
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00001c15 	andeq	r1, r0, r5, lsl ip
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001c0f 	andeq	r1, r0, pc, lsl #24
       c:	00001c11 	andeq	r1, r0, r1, lsl ip
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00001c13 	andeq	r1, r0, r3, lsl ip
      14:	00001c13 	andeq	r1, r0, r3, lsl ip
		when (&__input_pins, st);
      18:	00001c13 	andeq	r1, r0, r3, lsl ip
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00001c13 	andeq	r1, r0, r3, lsl ip
      30:	00001c13 	andeq	r1, r0, r3, lsl ip
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00001c13 	andeq	r1, r0, r3, lsl ip
      3c:	00001c13 	andeq	r1, r0, r3, lsl ip
      40:	000009e1 	andeq	r0, r0, r1, ror #19
      44:	00001c13 	andeq	r1, r0, r3, lsl ip
      48:	00001c13 	andeq	r1, r0, r3, lsl ip
}
      4c:	00001c13 	andeq	r1, r0, r3, lsl ip
      50:	000005a1 	andeq	r0, r0, r1, lsr #11
      54:	000008a1 	andeq	r0, r0, r1, lsr #17
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00001c13 	andeq	r1, r0, r3, lsl ip
	    pbutton++) {
      5c:	00001c13 	andeq	r1, r0, r3, lsl ip
      60:	00001c13 	andeq	r1, r0, r3, lsl ip
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000025d9 	ldrdeq	r2, [r0], -r9
      68:	00001c13 	andeq	r1, r0, r3, lsl ip
      6c:	00001c13 	andeq	r1, r0, r3, lsl ip
      70:	00001c13 	andeq	r1, r0, r3, lsl ip
      74:	00001c13 	andeq	r1, r0, r3, lsl ip
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00001c13 	andeq	r1, r0, r3, lsl ip
      7c:	00001c13 	andeq	r1, r0, r3, lsl ip
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00001c13 	andeq	r1, r0, r3, lsl ip
      84:	00001c13 	andeq	r1, r0, r3, lsl ip
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00001c13 	andeq	r1, r0, r3, lsl ip
      8c:	00001c13 	andeq	r1, r0, r3, lsl ip
      90:	00001c13 	andeq	r1, r0, r3, lsl ip
      94:	00001c13 	andeq	r1, r0, r3, lsl ip
      98:	00001c13 	andeq	r1, r0, r3, lsl ip
		goto Done;

	if (baction == NULL)
      9c:	00001c13 	andeq	r1, r0, r3, lsl ip
      a0:	00001c13 	andeq	r1, r0, r3, lsl ip
		goto Term;

	(*baction) (pbutton);
      a4:	00001c13 	andeq	r1, r0, r3, lsl ip

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00001c13 	andeq	r1, r0, r3, lsl ip
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00001c13 	andeq	r1, r0, r3, lsl ip
      b0:	00001c13 	andeq	r1, r0, r3, lsl ip
endthread
      b4:	00001c13 	andeq	r1, r0, r3, lsl ip
      b8:	00001c13 	andeq	r1, r0, r3, lsl ip
      bc:	00001c13 	andeq	r1, r0, r3, lsl ip
      c0:	00001c13 	andeq	r1, r0, r3, lsl ip
      c4:	00001c13 	andeq	r1, r0, r3, lsl ip

000000c8 <transmitter>:

int sfd = -1;
/**
 * State machine for handling transmitting messages
*/
fsm transmitter (message * messagePtr) {
      c8:	b538      	push	{r3, r4, r5, lr}
      ca:	4604      	mov	r4, r0
      cc:	b128      	cbz	r0, da <transmitter+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d019      	beq.n	106 <_Min_Stack_Size+0x6>
        tcv_endp (spkt);

    state Confirm_Transmission:
        ser_outf(Transmit_Message, "Message Sent\n\r");
        finish;
}
      d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d6:	f000 bfa1 	b.w	101c <__pi_badstate>
fsm transmitter (message * messagePtr) {
      da:	4b0f      	ldr	r3, [pc, #60]	; (118 <_Min_Stack_Size+0x18>)
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	490f      	ldr	r1, [pc, #60]	; (11c <_Min_Stack_Size+0x1c>)
fsm transmitter (message * messagePtr) {
      de:	681b      	ldr	r3, [r3, #0]
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      e0:	2222      	movs	r2, #34	; 0x22
fsm transmitter (message * messagePtr) {
      e2:	689d      	ldr	r5, [r3, #8]
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f001 fbea 	bl	18c0 <tcv_wnps>
        spkt [0] = 0;
      ec:	8004      	strh	r4, [r0, #0]
        *p = messagePtr->senderGroupId; p += 2;
      ee:	882b      	ldrh	r3, [r5, #0]
      f0:	7083      	strb	r3, [r0, #2]
        *p = messagePtr->messageType; p++;
      f2:	78ab      	ldrb	r3, [r5, #2]
      f4:	7103      	strb	r3, [r0, #4]
        *p = messagePtr->requestNumber; p++;
      f6:	78eb      	ldrb	r3, [r5, #3]
      f8:	7143      	strb	r3, [r0, #5]
        *p = messagePtr->senderId; p++; // insert sender ID
      fa:	792b      	ldrb	r3, [r5, #4]
      fc:	7183      	strb	r3, [r0, #6]
        *p = messagePtr->receiverId; p++; // insert receiveer ID
      fe:	796b      	ldrb	r3, [r5, #5]
     100:	71c3      	strb	r3, [r0, #7]
        tcv_endp (spkt);
     102:	f001 fb33 	bl	176c <tcv_endp>
        ser_outf(Transmit_Message, "Message Sent\n\r");
     106:	2000      	movs	r0, #0
     108:	4905      	ldr	r1, [pc, #20]	; (120 <_Min_Stack_Size+0x20>)
     10a:	f001 fe93 	bl	1e34 <ser_outf>
}
     10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        finish;
     112:	2000      	movs	r0, #0
     114:	f001 b94c 	b.w	13b0 <kill>
     118:	20000b68 	andcs	r0, r0, r8, ror #22
     11c:	20000000 	andcs	r0, r0, r0
     120:	000041ac 	andeq	r4, r0, ip, lsr #3

00000124 <randomNumber>:
 * Generates a random number
 * 
 *  Return:
 *      returns a random 1 byte number
*/
char randomNumber() {
     124:	b507      	push	{r0, r1, r2, lr}
   time_t t;
   
   /* Intializes random number generator */
   srand((unsigned) time(&t));
     126:	4668      	mov	r0, sp
     128:	f003 ffdc 	bl	40e4 <time>
     12c:	f003 ffb4 	bl	4098 <srand>

   return (char)rand();
     130:	f003 ffbc 	bl	40ac <rand>
}
     134:	b2c0      	uxtb	r0, r0
     136:	b003      	add	sp, #12
     138:	f85d fb04 	ldr.w	pc, [sp], #4

0000013c <root>:

fsm root {
     13c:	b530      	push	{r4, r5, lr}
     13e:	b085      	sub	sp, #20
     140:	2812      	cmp	r0, #18
     142:	f200 812c 	bhi.w	39e <root+0x262>
     146:	e8df f010 	tbh	[pc, r0, lsl #1]
     14a:	003c0013 	eorseq	r0, ip, r3, lsl r0
     14e:	0051004d 	subseq	r0, r1, sp, asr #32
     152:	00760072 	rsbseq	r0, r6, r2, ror r0
     156:	0082007e 	addeq	r0, r2, lr, ror r0
     15a:	009a0092 	umullseq	r0, sl, r2, r0
     15e:	00ae00a1 	adceq	r0, lr, r1, lsr #1
     162:	00cd00c3 	sbceq	r0, sp, r3, asr #1
     166:	00d800d4 	ldrsbeq	r0, [r8], #4
     16a:	00e900e5 	rsceq	r0, r9, r5, ror #1
     16e:	240000fa 	strcs	r0, [r0], #-250	; 0xffffff06
    char receiverId;

    message * messagePtr;

    state Initialize:
        recordCount = 0;
     172:	4b8d      	ldr	r3, [pc, #564]	; (3a8 <root+0x26c>)

        nodeId = 1;
     174:	4a8d      	ldr	r2, [pc, #564]	; (3ac <root+0x270>)
        recordCount = 0;
     176:	601c      	str	r4, [r3, #0]
        nodeId = 1;
     178:	2301      	movs	r3, #1
     17a:	7013      	strb	r3, [r2, #0]
        groupId = 1;
     17c:	4a8c      	ldr	r2, [pc, #560]	; (3b0 <root+0x274>)

        messagePtr = (message *) umalloc(sizeof(message));
     17e:	201e      	movs	r0, #30
        groupId = 1;
     180:	8013      	strh	r3, [r2, #0]
        messagePtr = (message *) umalloc(sizeof(message));
     182:	f001 f93d 	bl	1400 <__pi_malloc>
     186:	4b8b      	ldr	r3, [pc, #556]	; (3b4 <root+0x278>)

        // Set up cc1350 board
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	21fa      	movs	r1, #250	; 0xfa
        messagePtr = (message *) umalloc(sizeof(message));
     18a:	6018      	str	r0, [r3, #0]
        phys_cc1350(0, MAX_PACKET_LENGTH);
     18c:	4620      	mov	r0, r4
     18e:	f002 fa5b 	bl	2648 <phys_cc1350>

        // Load null plug in
        tcv_plug(0, &plug_null);
     192:	4989      	ldr	r1, [pc, #548]	; (3b8 <root+0x27c>)
     194:	4620      	mov	r0, r4
     196:	f001 fb81 	bl	189c <tcv_plug>

        // Open the session
        sfd = tcv_open(WNONE, 0, 0);
     19a:	4622      	mov	r2, r4
     19c:	4621      	mov	r1, r4
     19e:	f64f 70ff 	movw	r0, #65535	; 0xffff
     1a2:	f001 fb1b 	bl	17dc <tcv_open>
     1a6:	4d85      	ldr	r5, [pc, #532]	; (3bc <root+0x280>)
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	4622      	mov	r2, r4
     1aa:	2104      	movs	r1, #4
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	6028      	str	r0, [r5, #0]
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1ae:	f001 fbfb 	bl	19a8 <tcv_control>

        // Ensure session opened properly
		if (sfd < 0) {
     1b2:	682b      	ldr	r3, [r5, #0]
     1b4:	42a3      	cmp	r3, r4
     1b6:	da04      	bge.n	1c2 <root+0x86>
			diag("Cannot open tcv interface");
     1b8:	4881      	ldr	r0, [pc, #516]	; (3c0 <root+0x284>)
     1ba:	f001 f99b 	bl	14f4 <diag>
			halt();
     1be:	f000 fe7b 	bl	eb8 <halt>
		}

    state Menu_Header:
        currentProtocol = IDLE;
     1c2:	22ff      	movs	r2, #255	; 0xff
     1c4:	4b7f      	ldr	r3, [pc, #508]	; (3c4 <root+0x288>)
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1c6:	2001      	movs	r0, #1
        currentProtocol = IDLE;
     1c8:	701a      	strb	r2, [r3, #0]
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1ca:	2328      	movs	r3, #40	; 0x28
     1cc:	9301      	str	r3, [sp, #4]
     1ce:	4b76      	ldr	r3, [pc, #472]	; (3a8 <root+0x26c>)
     1d0:	4a77      	ldr	r2, [pc, #476]	; (3b0 <root+0x274>)
     1d2:	681b      	ldr	r3, [r3, #0]
     1d4:	497c      	ldr	r1, [pc, #496]	; (3c8 <root+0x28c>)
     1d6:	9300      	str	r3, [sp, #0]
     1d8:	4b74      	ldr	r3, [pc, #464]	; (3ac <root+0x270>)
     1da:	f9b2 2000 	ldrsh.w	r2, [r2]
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	f001 fe28 	bl	1e34 <ser_outf>
    
    state Options:
        ser_outf(Options, menu);
     1e4:	2002      	movs	r0, #2
     1e6:	4979      	ldr	r1, [pc, #484]	; (3cc <root+0x290>)
     1e8:	f001 fe24 	bl	1e34 <ser_outf>

    state Get_Choice:
        char choice;

        ser_inf(Get_Choice, "%c", &choice);
     1ec:	2003      	movs	r0, #3
     1ee:	4978      	ldr	r1, [pc, #480]	; (3d0 <root+0x294>)
     1f0:	f10d 020f 	add.w	r2, sp, #15
     1f4:	f001 fe48 	bl	1e88 <ser_inf>

        switch (choice)
     1f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     1fc:	2b53      	cmp	r3, #83	; 0x53
     1fe:	d80f      	bhi.n	220 <root+0xe4>
     200:	2b42      	cmp	r3, #66	; 0x42
     202:	d911      	bls.n	228 <root+0xec>
     204:	3b43      	subs	r3, #67	; 0x43
     206:	2b10      	cmp	r3, #16
     208:	d80e      	bhi.n	228 <root+0xec>
     20a:	e8df f003 	tbb	[pc, r3]
     20e:	bac6bebc 	blt	ff1afd06 <_estack+0xdf1aad06>
     212:	0d0d0db4 	stceq	13, cr0, [sp, #-720]	; 0xfffffd30
     216:	b80d0d0d 	stmdalt	sp, {r0, r2, r3, r8, sl, fp}
     21a:	c00d0d0d 	andgt	r0, sp, sp, lsl #26
     21e:	3b6300c2 	blcc	18c052e <__ccfg+0x18a0586>
     222:	b2da      	uxtb	r2, r3
     224:	2a10      	cmp	r2, #16
     226:	d9ee      	bls.n	206 <root+0xca>
            diag("Reset Local Storage");
            break;

        }
        
        proceed Menu_Header;
     228:	2001      	movs	r0, #1
     22a:	f000 ff7f 	bl	112c <proceed>

// - - - - - - - - - - - Set Group ID - - - - - - - - - - - - //
    state Set_Group_ID:
        ser_outf(Set_Group_ID, "New Group ID: ");
     22e:	2004      	movs	r0, #4
     230:	4968      	ldr	r1, [pc, #416]	; (3d4 <root+0x298>)
     232:	f001 fdff 	bl	1e34 <ser_outf>
    state Get_Group_ID:
        ser_inf(Get_Group_ID, "%d", &groupId);
     236:	2005      	movs	r0, #5
     238:	4a5d      	ldr	r2, [pc, #372]	; (3b0 <root+0x274>)
     23a:	4967      	ldr	r1, [pc, #412]	; (3d8 <root+0x29c>)
     23c:	f001 fe24 	bl	1e88 <ser_inf>

        proceed Menu_Header;
     240:	2001      	movs	r0, #1
     242:	f000 ff73 	bl	112c <proceed>

// - - - - - - - - - - - Set Node ID - - - - - - - - - - - - //    
    state Set_Node_ID:
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     246:	2006      	movs	r0, #6
     248:	4964      	ldr	r1, [pc, #400]	; (3dc <root+0x2a0>)
     24a:	f001 fdf3 	bl	1e34 <ser_outf>
    
    state Get_Node_ID:
        ser_inf(Get_Node_ID, "%d", &nodeId);
     24e:	4c57      	ldr	r4, [pc, #348]	; (3ac <root+0x270>)
     250:	2007      	movs	r0, #7
     252:	4622      	mov	r2, r4
     254:	4960      	ldr	r1, [pc, #384]	; (3d8 <root+0x29c>)
     256:	f001 fe17 	bl	1e88 <ser_inf>
    if (node < 1 || node > 25) {
     25a:	7823      	ldrb	r3, [r4, #0]
     25c:	3b01      	subs	r3, #1
     25e:	2b18      	cmp	r3, #24
     260:	d902      	bls.n	268 <root+0x12c>

        if (!isValidNodeId(nodeId)) {
            proceed Set_Node_ID;
     262:	2006      	movs	r0, #6
     264:	f000 ff62 	bl	112c <proceed>
        }

        proceed Menu_Header;
     268:	2001      	movs	r0, #1
     26a:	f000 ff5f 	bl	112c <proceed>

// - - - - - - - - - - - - Find Neighbour - - - - - - - - - - - - - //
    state Find_Neighbours:
        currentProtocol = DISCOVERY_REQUEST;
     26e:	2300      	movs	r3, #0
     270:	4a54      	ldr	r2, [pc, #336]	; (3c4 <root+0x288>)
        receiverId = 0;
        proceed Transmit_Message;
     272:	2012      	movs	r0, #18
        currentProtocol = DISCOVERY_REQUEST;
     274:	7013      	strb	r3, [r2, #0]
        receiverId = 0;
     276:	4a5a      	ldr	r2, [pc, #360]	; (3e0 <root+0x2a4>)
     278:	7013      	strb	r3, [r2, #0]
        proceed Transmit_Message;
     27a:	f000 ff57 	bl	112c <proceed>

// - - - - - - - - - - - - Create Recrods - - - - - - - - - - - - - //    
    state Create_Record:
        currentProtocol = CREATE_RECORD;
     27e:	2202      	movs	r2, #2
     280:	4b50      	ldr	r3, [pc, #320]	; (3c4 <root+0x288>)
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     282:	2009      	movs	r0, #9
     284:	4957      	ldr	r1, [pc, #348]	; (3e4 <root+0x2a8>)
        currentProtocol = CREATE_RECORD;
     286:	701a      	strb	r2, [r3, #0]
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     288:	f001 fdd4 	bl	1e34 <ser_outf>
    
    state Get_Receiver_Node:
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	4c54      	ldr	r4, [pc, #336]	; (3e0 <root+0x2a4>)
     28e:	200a      	movs	r0, #10
     290:	4622      	mov	r2, r4
     292:	4951      	ldr	r1, [pc, #324]	; (3d8 <root+0x29c>)
     294:	f001 fdf8 	bl	1e88 <ser_inf>
    if (node < 1 || node > 25) {
     298:	7823      	ldrb	r3, [r4, #0]
     29a:	3b01      	subs	r3, #1
     29c:	2b18      	cmp	r3, #24
     29e:	d902      	bls.n	2a6 <root+0x16a>

        if(!isValidNodeId(receiverId)) {
            proceed Create_Record;
     2a0:	2009      	movs	r0, #9
     2a2:	f000 ff43 	bl	112c <proceed>
        }

    state Get_Message:
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a6:	4c43      	ldr	r4, [pc, #268]	; (3b4 <root+0x278>)
     2a8:	2214      	movs	r2, #20
     2aa:	6821      	ldr	r1, [r4, #0]
     2ac:	200b      	movs	r0, #11
     2ae:	3106      	adds	r1, #6
     2b0:	f001 fd84 	bl	1dbc <ser_in>

        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	6820      	ldr	r0, [r4, #0]
     2b6:	3006      	adds	r0, #6
     2b8:	f000 ffb6 	bl	1228 <__pi_strlen>
     2bc:	2813      	cmp	r0, #19
            // ensures that the last byte in the payload message is a null character
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2be:	bfc4      	itt	gt
     2c0:	2230      	movgt	r2, #48	; 0x30
     2c2:	6823      	ldrgt	r3, [r4, #0]
        }

        proceed Transmit_Message;
     2c4:	f04f 0012 	mov.w	r0, #18
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	bfc8      	it	gt
     2ca:	765a      	strbgt	r2, [r3, #25]
        proceed Transmit_Message;
     2cc:	f000 ff2e 	bl	112c <proceed>

// - - - - - - - - Deleting and Retreiving Records - - - - - - - - //

    state Delete_Record:
        currentProtocol = DELETE_RECORD;
     2d0:	2203      	movs	r2, #3
     2d2:	4b3c      	ldr	r3, [pc, #240]	; (3c4 <root+0x288>)
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	200d      	movs	r0, #13
     2d6:	4944      	ldr	r1, [pc, #272]	; (3e8 <root+0x2ac>)
        currentProtocol = DELETE_RECORD;
     2d8:	701a      	strb	r2, [r3, #0]
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2da:	f001 fdab 	bl	1e34 <ser_outf>
        proceed Get_Receiving_Node;
     2de:	200f      	movs	r0, #15
     2e0:	f000 ff24 	bl	112c <proceed>

    state Retrieve_Record:
        currentProtocol = RETRIEVE_RECORD;
     2e4:	2204      	movs	r2, #4
     2e6:	4b37      	ldr	r3, [pc, #220]	; (3c4 <root+0x288>)
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	200d      	movs	r0, #13
     2ea:	4940      	ldr	r1, [pc, #256]	; (3ec <root+0x2b0>)
        currentProtocol = RETRIEVE_RECORD;
     2ec:	701a      	strb	r2, [r3, #0]
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2ee:	f001 fda1 	bl	1e34 <ser_outf>

    state Prompt_Recieving_Node:
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f2:	200e      	movs	r0, #14
     2f4:	493e      	ldr	r1, [pc, #248]	; (3f0 <root+0x2b4>)
     2f6:	f001 fd9d 	bl	1e34 <ser_outf>
    
    state Get_Receiving_Node:
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fa:	4c39      	ldr	r4, [pc, #228]	; (3e0 <root+0x2a4>)
     2fc:	200f      	movs	r0, #15
     2fe:	4622      	mov	r2, r4
     300:	4935      	ldr	r1, [pc, #212]	; (3d8 <root+0x29c>)
     302:	f001 fdc1 	bl	1e88 <ser_inf>
    if (node < 1 || node > 25) {
     306:	7823      	ldrb	r3, [r4, #0]
     308:	3b01      	subs	r3, #1
     30a:	2b18      	cmp	r3, #24
     30c:	d902      	bls.n	314 <root+0x1d8>

        if(!isValidNodeId(receiverId)) {
            proceed Prompt_Recieving_Node;
     30e:	200e      	movs	r0, #14
     310:	f000 ff0c 	bl	112c <proceed>
        }
    
    state Prompt_Record_Index:
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	2010      	movs	r0, #16
     316:	4937      	ldr	r1, [pc, #220]	; (3f4 <root+0x2b8>)
     318:	f001 fd8c 	bl	1e34 <ser_outf>
    
    state Get_Record_Index:
        char desiredRecordIndex = -1;
     31c:	23ff      	movs	r3, #255	; 0xff
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     31e:	f10d 020f 	add.w	r2, sp, #15
     322:	2011      	movs	r0, #17
     324:	492c      	ldr	r1, [pc, #176]	; (3d8 <root+0x29c>)
        char desiredRecordIndex = -1;
     326:	f88d 300f 	strb.w	r3, [sp, #15]
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32a:	f001 fdad 	bl	1e88 <ser_inf>
        messagePtr->recordIndex = desiredRecordIndex;
     32e:	4b21      	ldr	r3, [pc, #132]	; (3b4 <root+0x278>)
     330:	f89d 200f 	ldrb.w	r2, [sp, #15]
     334:	681b      	ldr	r3, [r3, #0]

        proceed Transmit_Message;
     336:	2012      	movs	r0, #18
        messagePtr->recordIndex = desiredRecordIndex;
     338:	769a      	strb	r2, [r3, #26]
        proceed Transmit_Message;
     33a:	f000 fef7 	bl	112c <proceed>

// - - - - - - Assemble Common Parts and Send Message - - - - - - - //
    state Transmit_Message:
        messagePtr -> senderGroupId = groupId;
     33e:	4d1d      	ldr	r5, [pc, #116]	; (3b4 <root+0x278>)
     340:	4b1b      	ldr	r3, [pc, #108]	; (3b0 <root+0x274>)
     342:	682c      	ldr	r4, [r5, #0]
     344:	f9b3 3000 	ldrsh.w	r3, [r3]
     348:	8023      	strh	r3, [r4, #0]
        messagePtr -> messageType = currentProtocol;
     34a:	4b1e      	ldr	r3, [pc, #120]	; (3c4 <root+0x288>)
     34c:	781b      	ldrb	r3, [r3, #0]
     34e:	70a3      	strb	r3, [r4, #2]
        messagePtr -> requestNumber = randomNumber();
     350:	f7ff fee8 	bl	124 <randomNumber>
        messagePtr -> senderId = nodeId;
     354:	4b15      	ldr	r3, [pc, #84]	; (3ac <root+0x270>)
     356:	6829      	ldr	r1, [r5, #0]
     358:	781b      	ldrb	r3, [r3, #0]
        messagePtr -> requestNumber = randomNumber();
     35a:	70e0      	strb	r0, [r4, #3]
        messagePtr -> senderId = nodeId;
     35c:	710b      	strb	r3, [r1, #4]
        messagePtr -> receiverId = receiverId;
     35e:	4b20      	ldr	r3, [pc, #128]	; (3e0 <root+0x2a4>)

        call transmitter(messagePtr, Menu_Header);
     360:	4825      	ldr	r0, [pc, #148]	; (3f8 <root+0x2bc>)
        messagePtr -> receiverId = receiverId;
     362:	781b      	ldrb	r3, [r3, #0]
     364:	714b      	strb	r3, [r1, #5]
        call transmitter(messagePtr, Menu_Header);
     366:	f001 f89f 	bl	14a8 <__pi_fork>
     36a:	2101      	movs	r1, #1
     36c:	f000 ff1c 	bl	11a8 <__pi_join>
     370:	b1b8      	cbz	r0, 3a2 <root+0x266>
     372:	f000 fc75 	bl	c60 <__pi_release>
            proceed Set_Group_ID;
     376:	2004      	movs	r0, #4
            proceed Set_Node_ID;
     378:	f000 fed8 	bl	112c <proceed>
            break;
     37c:	e754      	b.n	228 <root+0xec>
            proceed Set_Node_ID;
     37e:	2006      	movs	r0, #6
     380:	e7fa      	b.n	378 <root+0x23c>
            proceed Find_Neighbours;
     382:	2008      	movs	r0, #8
     384:	e7f8      	b.n	378 <root+0x23c>
            proceed Create_Record;
     386:	2009      	movs	r0, #9
     388:	e7f6      	b.n	378 <root+0x23c>
            proceed Delete_Record;
     38a:	200c      	movs	r0, #12
     38c:	e7f4      	b.n	378 <root+0x23c>
            proceed Retrieve_Record;
     38e:	200d      	movs	r0, #13
     390:	e7f2      	b.n	378 <root+0x23c>
            diag("Show Local Records");
     392:	481a      	ldr	r0, [pc, #104]	; (3fc <root+0x2c0>)
            diag("Reset Local Storage");
     394:	f001 f8ae 	bl	14f4 <diag>
            break;
     398:	e746      	b.n	228 <root+0xec>
            diag("Reset Local Storage");
     39a:	4819      	ldr	r0, [pc, #100]	; (400 <root+0x2c4>)
     39c:	e7fa      	b.n	394 <root+0x258>
     39e:	f000 fe3d 	bl	101c <__pi_badstate>
     3a2:	b005      	add	sp, #20
     3a4:	bd30      	pop	{r4, r5, pc}
     3a6:	bf00      	nop
     3a8:	20000b34 	andcs	r0, r0, r4, lsr fp
     3ac:	20000628 	andcs	r0, r0, r8, lsr #12
     3b0:	20000b32 	andcs	r0, r0, r2, lsr fp
     3b4:	20000540 	andcs	r0, r0, r0, asr #10
     3b8:	00004f0c 	andeq	r4, r0, ip, lsl #30
     3bc:	20000000 	andcs	r0, r0, r0
     3c0:	000041bb 			; <UNDEFINED> instruction: 0x000041bb
     3c4:	20000b30 	andcs	r0, r0, r0, lsr fp
     3c8:	000041d5 	ldrdeq	r4, [r0], -r5
     3cc:	000041fd 	strdeq	r4, [r0], -sp
     3d0:	000042c1 	andeq	r4, r0, r1, asr #5
     3d4:	000042eb 	andeq	r4, r0, fp, ror #5
     3d8:	00004593 	muleq	r0, r3, r5
     3dc:	000042fa 	strdeq	r4, [r0], -sl
     3e0:	20000544 	andcs	r0, r0, r4, asr #10
     3e4:	0000430e 	andeq	r4, r0, lr, lsl #6
     3e8:	00004327 	andeq	r4, r0, r7, lsr #6
     3ec:	00004347 	andeq	r4, r0, r7, asr #6
     3f0:	00004369 	andeq	r4, r0, r9, ror #6
     3f4:	00004383 	andeq	r4, r0, r3, lsl #7
     3f8:	000000c9 	andeq	r0, r0, r9, asr #1
     3fc:	000042c4 	andeq	r4, r0, r4, asr #5
     400:	000042d7 	ldrdeq	r4, [r0], -r7

00000404 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     404:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     406:	4801      	ldr	r0, [pc, #4]	; (40c <devinit_uart+0x8>)
     408:	f000 bf26 	b.w	1258 <adddevfunc>
     40c:	00000791 	muleq	r0, r1, r7

00000410 <udelay>:
void udelay (volatile word n) {
     410:	b082      	sub	sp, #8
     412:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     416:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     41a:	b29b      	uxth	r3, r3
     41c:	b90b      	cbnz	r3, 422 <udelay+0x12>
}
     41e:	b002      	add	sp, #8
     420:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     422:	2304      	movs	r3, #4
	while (n--);
     424:	461a      	mov	r2, r3
     426:	3b01      	subs	r3, #1
     428:	b29b      	uxth	r3, r3
     42a:	2a00      	cmp	r2, #0
     42c:	d1fa      	bne.n	424 <udelay+0x14>
		n--;
     42e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     432:	3b01      	subs	r3, #1
     434:	b29b      	uxth	r3, r3
     436:	f8ad 3006 	strh.w	r3, [sp, #6]
     43a:	e7ec      	b.n	416 <udelay+0x6>

0000043c <mdelay>:
void mdelay (volatile word n) {
     43c:	b507      	push	{r0, r1, r2, lr}
     43e:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     442:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     446:	b29b      	uxth	r3, r3
     448:	b913      	cbnz	r3, 450 <mdelay+0x14>
}
     44a:	b003      	add	sp, #12
     44c:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     450:	f240 30e7 	movw	r0, #999	; 0x3e7
     454:	f7ff ffdc 	bl	410 <udelay>
		n--;
     458:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     45c:	3b01      	subs	r3, #1
     45e:	b29b      	uxth	r3, r3
     460:	f8ad 3006 	strh.w	r3, [sp, #6]
     464:	e7ed      	b.n	442 <mdelay+0x6>
	...

00000468 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     468:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     46a:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     46c:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     46e:	d505      	bpl.n	47c <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     470:	4b0a      	ldr	r3, [pc, #40]	; (49c <__pi_ondomain+0x34>)
     472:	78da      	ldrb	r2, [r3, #3]
     474:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     476:	bf84      	itt	hi
     478:	2201      	movhi	r2, #1
     47a:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     47c:	4d08      	ldr	r5, [pc, #32]	; (4a0 <__pi_ondomain+0x38>)
     47e:	4620      	mov	r0, r4
     480:	682b      	ldr	r3, [r5, #0]
     482:	695b      	ldr	r3, [r3, #20]
     484:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     486:	682b      	ldr	r3, [r5, #0]
     488:	4620      	mov	r0, r4
     48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     48c:	4798      	blx	r3
     48e:	2801      	cmp	r0, #1
     490:	d1f9      	bne.n	486 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     492:	4b02      	ldr	r3, [pc, #8]	; (49c <__pi_ondomain+0x34>)
     494:	6858      	ldr	r0, [r3, #4]
     496:	4304      	orrs	r4, r0
     498:	605c      	str	r4, [r3, #4]
}
     49a:	bd38      	pop	{r3, r4, r5, pc}
     49c:	20000b4c 	andcs	r0, r0, ip, asr #22
     4a0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

000004a4 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     4a4:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     4a6:	4d0d      	ldr	r5, [pc, #52]	; (4dc <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     4a8:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     4aa:	682b      	ldr	r3, [r5, #0]
     4ac:	699b      	ldr	r3, [r3, #24]
     4ae:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	682b      	ldr	r3, [r5, #0]
     4b2:	4620      	mov	r0, r4
     4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     4b6:	4798      	blx	r3
     4b8:	2802      	cmp	r0, #2
     4ba:	d1f9      	bne.n	4b0 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     4bc:	f014 0f01 	tst.w	r4, #1
     4c0:	4b07      	ldr	r3, [pc, #28]	; (4e0 <__pi_offdomain+0x3c>)
     4c2:	d006      	beq.n	4d2 <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c4:	7899      	ldrb	r1, [r3, #2]
     4c6:	78da      	ldrb	r2, [r3, #3]
     4c8:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4ca:	bf82      	ittt	hi
     4cc:	789a      	ldrbhi	r2, [r3, #2]
     4ce:	b2d2      	uxtbhi	r2, r2
     4d0:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     4d2:	6858      	ldr	r0, [r3, #4]
     4d4:	ea20 0404 	bic.w	r4, r0, r4
     4d8:	605c      	str	r4, [r3, #4]
}
     4da:	bd38      	pop	{r3, r4, r5, pc}
     4dc:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     4e0:	20000b4c 	andcs	r0, r0, ip, asr #22

000004e4 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     4e4:	460a      	mov	r2, r1
     4e6:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	4601      	mov	r1, r0
     4ea:	480f      	ldr	r0, [pc, #60]	; (528 <__pi_syserror+0x44>)
     4ec:	f001 f802 	bl	14f4 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     4f0:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4f2:	2540      	movs	r5, #64	; 0x40
     4f4:	462f      	mov	r7, r5
     4f6:	4e0d      	ldr	r6, [pc, #52]	; (52c <__pi_syserror+0x48>)
     4f8:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     4fa:	490d      	ldr	r1, [pc, #52]	; (530 <__pi_syserror+0x4c>)
     4fc:	6037      	str	r7, [r6, #0]
     4fe:	6034      	str	r4, [r6, #0]
     500:	780b      	ldrb	r3, [r1, #0]
     502:	780b      	ldrb	r3, [r1, #0]
     504:	20c8      	movs	r0, #200	; 0xc8
     506:	f36f 1307 	bfc	r3, #4, #4
     50a:	700b      	strb	r3, [r1, #0]
     50c:	f7ff ff96 	bl	43c <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     510:	4b08      	ldr	r3, [pc, #32]	; (534 <__pi_syserror+0x50>)
     512:	20c8      	movs	r0, #200	; 0xc8
     514:	601d      	str	r5, [r3, #0]
     516:	601c      	str	r4, [r3, #0]
     518:	780b      	ldrb	r3, [r1, #0]
     51a:	780b      	ldrb	r3, [r1, #0]
     51c:	f36f 1307 	bfc	r3, #4, #4
     520:	700b      	strb	r3, [r1, #0]
     522:	f7ff ff8b 	bl	43c <mdelay>
	while (1) {
     526:	e7e7      	b.n	4f8 <__pi_syserror+0x14>
     528:	00004391 	muleq	r0, r1, r3
     52c:	40022090 	mulmi	r2, r0, r0
     530:	20000b4c 	andcs	r0, r0, ip, asr #22
     534:	400220a0 	andmi	r2, r2, r0, lsr #1

00000538 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     538:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     53a:	4b0a      	ldr	r3, [pc, #40]	; (564 <tci_run_delay_timer+0x2c>)
     53c:	881c      	ldrh	r4, [r3, #0]
     53e:	4b0a      	ldr	r3, [pc, #40]	; (568 <tci_run_delay_timer+0x30>)
     540:	8818      	ldrh	r0, [r3, #0]
     542:	4b0a      	ldr	r3, [pc, #40]	; (56c <tci_run_delay_timer+0x34>)
     544:	1b00      	subs	r0, r0, r4
     546:	b284      	uxth	r4, r0
     548:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54a:	f002 fda1 	bl	3090 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     54e:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     552:	4b07      	ldr	r3, [pc, #28]	; (570 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     554:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     558:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	6018      	str	r0, [r3, #0]
	sti_tim;
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <tci_run_delay_timer+0x3c>)
     560:	601a      	str	r2, [r3, #0]
}
     562:	bd10      	pop	{r4, pc}
     564:	20000b4a 	andcs	r0, r0, sl, asr #22
     568:	20000b48 	andcs	r0, r0, r8, asr #22
     56c:	20000546 	andcs	r0, r0, r6, asr #10
     570:	40092018 	andmi	r2, r9, r8, lsl r0
     574:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000578 <tci_run_auxiliary_timer>:
	cli_aux;
     578:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     57a:	b510      	push	{r4, lr}
	cli_aux;
     57c:	4c06      	ldr	r4, [pc, #24]	; (598 <tci_run_auxiliary_timer+0x20>)
     57e:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	f002 fd86 	bl	3090 <NOROM_AONRTCCurrent64BitValueGet>
     584:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     586:	4b05      	ldr	r3, [pc, #20]	; (59c <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     588:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     58c:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     58e:	6018      	str	r0, [r3, #0]
	sti_aux;
     590:	2301      	movs	r3, #1
     592:	6023      	str	r3, [r4, #0]
}
     594:	bd10      	pop	{r4, pc}
     596:	bf00      	nop
     598:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     59c:	40092020 	andmi	r2, r9, r0, lsr #32

000005a0 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     5a0:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a2:	4b3b      	ldr	r3, [pc, #236]	; (690 <AONRTCIntHandler+0xf0>)
     5a4:	6818      	ldr	r0, [r3, #0]
     5a6:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     5aa:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     5ae:	d542      	bpl.n	636 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     5b0:	4b38      	ldr	r3, [pc, #224]	; (694 <AONRTCIntHandler+0xf4>)
     5b2:	6819      	ldr	r1, [r3, #0]
     5b4:	2900      	cmp	r1, #0
     5b6:	d053      	beq.n	660 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     5b8:	880a      	ldrh	r2, [r1, #0]
     5ba:	2a00      	cmp	r2, #0
     5bc:	d04e      	beq.n	65c <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     5be:	3a01      	subs	r2, #1
     5c0:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     5c2:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     5c4:	685c      	ldr	r4, [r3, #4]
     5c6:	b194      	cbz	r4, 5ee <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     5c8:	8821      	ldrh	r1, [r4, #0]
     5ca:	b111      	cbz	r1, 5d2 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     5cc:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     5ce:	3901      	subs	r1, #1
     5d0:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     5d2:	689c      	ldr	r4, [r3, #8]
     5d4:	b15c      	cbz	r4, 5ee <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     5d6:	8821      	ldrh	r1, [r4, #0]
     5d8:	b111      	cbz	r1, 5e0 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     5da:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     5dc:	3901      	subs	r1, #1
     5de:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     5e0:	68d9      	ldr	r1, [r3, #12]
     5e2:	b121      	cbz	r1, 5ee <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     5e4:	880b      	ldrh	r3, [r1, #0]
     5e6:	b113      	cbz	r3, 5ee <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     5e8:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     5ea:	3b01      	subs	r3, #1
     5ec:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     5ee:	4b2a      	ldr	r3, [pc, #168]	; (698 <AONRTCIntHandler+0xf8>)
     5f0:	7819      	ldrb	r1, [r3, #0]
     5f2:	0909      	lsrs	r1, r1, #4
     5f4:	d047      	beq.n	686 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     5f6:	7859      	ldrb	r1, [r3, #1]
     5f8:	1c4a      	adds	r2, r1, #1
     5fa:	b2d2      	uxtb	r2, r2
     5fc:	705a      	strb	r2, [r3, #1]
     5fe:	b9d1      	cbnz	r1, 636 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     600:	781a      	ldrb	r2, [r3, #0]
     602:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     606:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     608:	d02c      	beq.n	664 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     60a:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     60c:	bf42      	ittt	mi
     60e:	2140      	movmi	r1, #64	; 0x40
     610:	4a22      	ldrmi	r2, [pc, #136]	; (69c <AONRTCIntHandler+0xfc>)
     612:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     614:	781a      	ldrb	r2, [r3, #0]
     616:	0692      	lsls	r2, r2, #26
     618:	bf42      	ittt	mi
     61a:	2180      	movmi	r1, #128	; 0x80
     61c:	4a1f      	ldrmi	r2, [pc, #124]	; (69c <AONRTCIntHandler+0xfc>)
     61e:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     620:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     622:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     624:	781a      	ldrb	r2, [r3, #0]
     626:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     62a:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     62c:	781a      	ldrb	r2, [r3, #0]
     62e:	0752      	lsls	r2, r2, #29
     630:	d501      	bpl.n	636 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     632:	22c8      	movs	r2, #200	; 0xc8
     634:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     636:	07c3      	lsls	r3, r0, #31
     638:	d50f      	bpl.n	65a <AONRTCIntHandler+0xba>
		cli_tim;
     63a:	2100      	movs	r1, #0
     63c:	4b18      	ldr	r3, [pc, #96]	; (6a0 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     63e:	4a19      	ldr	r2, [pc, #100]	; (6a4 <AONRTCIntHandler+0x104>)
     640:	4819      	ldr	r0, [pc, #100]	; (6a8 <AONRTCIntHandler+0x108>)
		cli_tim;
     642:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     644:	8803      	ldrh	r3, [r0, #0]
     646:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     648:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     64a:	4423      	add	r3, r4
		RISE_N_SHINE;
     64c:	4a12      	ldr	r2, [pc, #72]	; (698 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     64e:	b29b      	uxth	r3, r3
     650:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     652:	7813      	ldrb	r3, [r2, #0]
     654:	f043 0302 	orr.w	r3, r3, #2
     658:	7013      	strb	r3, [r2, #0]
}
     65a:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     65c:	2201      	movs	r2, #1
     65e:	e7b1      	b.n	5c4 <AONRTCIntHandler+0x24>
     660:	2201      	movs	r2, #1
     662:	e7c4      	b.n	5ee <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     664:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     666:	bf42      	ittt	mi
     668:	2140      	movmi	r1, #64	; 0x40
     66a:	4a10      	ldrmi	r2, [pc, #64]	; (6ac <AONRTCIntHandler+0x10c>)
     66c:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     66e:	781a      	ldrb	r2, [r3, #0]
     670:	0691      	lsls	r1, r2, #26
     672:	bf42      	ittt	mi
     674:	2180      	movmi	r1, #128	; 0x80
     676:	4a0d      	ldrmi	r2, [pc, #52]	; (6ac <AONRTCIntHandler+0x10c>)
     678:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     67a:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     67c:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     67e:	781a      	ldrb	r2, [r3, #0]
     680:	f042 0208 	orr.w	r2, r2, #8
     684:	e7d1      	b.n	62a <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     686:	2a00      	cmp	r2, #0
     688:	d0d5      	beq.n	636 <AONRTCIntHandler+0x96>
			cli_aux;
     68a:	4b09      	ldr	r3, [pc, #36]	; (6b0 <AONRTCIntHandler+0x110>)
     68c:	6019      	str	r1, [r3, #0]
     68e:	e7d2      	b.n	636 <AONRTCIntHandler+0x96>
     690:	40092004 	andmi	r2, r9, r4
     694:	20000b58 	andcs	r0, r0, r8, asr fp
     698:	20000b4c 	andcs	r0, r0, ip, asr #22
     69c:	40022090 	mulmi	r2, r0, r0
     6a0:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6a4:	20000546 	andcs	r0, r0, r6, asr #10
     6a8:	20000b54 	andcs	r0, r0, r4, asr fp
     6ac:	400220a0 	andmi	r2, r2, r0, lsr #1
     6b0:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

000006b4 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     6b6:	2600      	movs	r6, #0
     6b8:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     6ba:	4f0f      	ldr	r7, [pc, #60]	; (6f8 <tci_update_delay_ticks+0x44>)
	cli_tim;
     6bc:	601e      	str	r6, [r3, #0]
	if (setdel) {
     6be:	883d      	ldrh	r5, [r7, #0]
     6c0:	b19d      	cbz	r5, 6ea <tci_update_delay_ticks+0x36>
		if (force) {
     6c2:	b1a0      	cbz	r0, 6ee <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	4b0d      	ldr	r3, [pc, #52]	; (6fc <tci_update_delay_ticks+0x48>)
     6c6:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	f002 fce2 	bl	3090 <NOROM_AONRTCCurrent64BitValueGet>
     6cc:	0d80      	lsrs	r0, r0, #22
     6ce:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d2:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     6d6:	b280      	uxth	r0, r0
     6d8:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6da:	1b2c      	subs	r4, r5, r4
	return NO;
     6dc:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6de:	4b08      	ldr	r3, [pc, #32]	; (700 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     6e0:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e2:	881a      	ldrh	r2, [r3, #0]
     6e4:	4414      	add	r4, r2
     6e6:	b2a4      	uxth	r4, r4
     6e8:	801c      	strh	r4, [r3, #0]
}
     6ea:	4628      	mov	r0, r5
     6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     6ee:	2501      	movs	r5, #1
     6f0:	601d      	str	r5, [r3, #0]
		return YES;
     6f2:	e7fa      	b.n	6ea <tci_update_delay_ticks+0x36>
     6f4:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6f8:	20000546 	andcs	r0, r0, r6, asr #10
     6fc:	40092018 	andmi	r2, r9, r8, lsl r0
     700:	20000b54 	andcs	r0, r0, r4, asr fp

00000704 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     706:	4e0f      	ldr	r6, [pc, #60]	; (744 <__pi_uart_setrate+0x40>)
     708:	4d0f      	ldr	r5, [pc, #60]	; (748 <__pi_uart_setrate+0x44>)
     70a:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     70e:	68db      	ldr	r3, [r3, #12]
     710:	4628      	mov	r0, r5
     712:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     714:	2264      	movs	r2, #100	; 0x64
     716:	6833      	ldr	r3, [r6, #0]
     718:	4628      	mov	r0, r5
     71a:	4362      	muls	r2, r4
     71c:	685e      	ldr	r6, [r3, #4]
     71e:	490b      	ldr	r1, [pc, #44]	; (74c <__pi_uart_setrate+0x48>)
     720:	2360      	movs	r3, #96	; 0x60
     722:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	4a0a      	ldr	r2, [pc, #40]	; (750 <__pi_uart_setrate+0x4c>)
}
     726:	2001      	movs	r0, #1
     728:	6813      	ldr	r3, [r2, #0]
     72a:	f043 0310 	orr.w	r3, r3, #16
     72e:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	6853      	ldr	r3, [r2, #4]
     732:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     736:	f043 0301 	orr.w	r3, r3, #1
     73a:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     73c:	4b05      	ldr	r3, [pc, #20]	; (754 <__pi_uart_setrate+0x50>)
     73e:	801c      	strh	r4, [r3, #0]
}
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	bf00      	nop
     744:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     748:	40001000 	andmi	r1, r0, r0
     74c:	02dc6c00 	sbcseq	r6, ip, #0, 24
     750:	4000102c 	andmi	r1, r0, ip, lsr #32
     754:	20000548 	andcs	r0, r0, r8, asr #10

00000758 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	4a08      	ldr	r2, [pc, #32]	; (77c <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     75a:	4909      	ldr	r1, [pc, #36]	; (780 <reinit_uart+0x28>)
     75c:	6813      	ldr	r3, [r2, #0]
     75e:	f043 0310 	orr.w	r3, r3, #16
     762:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	2212      	movs	r2, #18
     766:	4b07      	ldr	r3, [pc, #28]	; (784 <reinit_uart+0x2c>)
     768:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76a:	4a07      	ldr	r2, [pc, #28]	; (788 <reinit_uart+0x30>)
     76c:	6813      	ldr	r3, [r2, #0]
     76e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     772:	6013      	str	r3, [r2, #0]
     774:	4b05      	ldr	r3, [pc, #20]	; (78c <reinit_uart+0x34>)
     776:	8818      	ldrh	r0, [r3, #0]
     778:	f7ff bfc4 	b.w	704 <__pi_uart_setrate>
     77c:	4000102c 	andmi	r1, r0, ip, lsr #32
     780:	20000b38 	andcs	r0, r0, r8, lsr fp
     784:	40001034 	andmi	r1, r0, r4, lsr r0
     788:	40001030 	andmi	r1, r0, r0, lsr r0
     78c:	20000548 	andcs	r0, r0, r8, asr #10

00000790 <ioreq_uart_a>:
	switch (operation) {
     790:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     792:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     796:	460d      	mov	r5, r1
     798:	4614      	mov	r4, r2
     79a:	2803      	cmp	r0, #3
     79c:	d86e      	bhi.n	87c <ioreq_uart_a+0xec>
     79e:	e8df f000 	tbb	[pc, r0]
     7a2:	5a471253 	bpl	11c50f6 <__ccfg+0x11a514e>
				*buf++ = uart_a_read;
     7a6:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     7aa:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     7ac:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     7b0:	b11e      	cbz	r6, 7ba <ioreq_uart_a+0x2a>
     7b2:	f8d8 3000 	ldr.w	r3, [r8]
     7b6:	06d8      	lsls	r0, r3, #27
     7b8:	d5f5      	bpl.n	7a6 <ioreq_uart_a+0x16>
			if (len != operation) {
     7ba:	42a6      	cmp	r6, r4
     7bc:	d00a      	beq.n	7d4 <ioreq_uart_a+0x44>
				return operation - len;
     7be:	1ba4      	subs	r4, r4, r6
}
     7c0:	4620      	mov	r0, r4
     7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     7c6:	4616      	mov	r6, r2
			uart_a_disable_int;
     7c8:	4f2e      	ldr	r7, [pc, #184]	; (884 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     7ca:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 898 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     7ce:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 89c <ioreq_uart_a+0x10c>
     7d2:	e7ed      	b.n	7b0 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     7d4:	683b      	ldr	r3, [r7, #0]
     7d6:	2015      	movs	r0, #21
     7d8:	695b      	ldr	r3, [r3, #20]
     7da:	4798      	blx	r3
			if (uart_a_char_available) {
     7dc:	f8d8 3000 	ldr.w	r3, [r8]
     7e0:	06d9      	lsls	r1, r3, #27
     7e2:	d404      	bmi.n	7ee <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     7e4:	683b      	ldr	r3, [r7, #0]
     7e6:	2015      	movs	r0, #21
     7e8:	691b      	ldr	r3, [r3, #16]
     7ea:	4798      	blx	r3
				goto Redo_rx;
     7ec:	e7e0      	b.n	7b0 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7ee:	4a26      	ldr	r2, [pc, #152]	; (888 <ioreq_uart_a+0xf8>)
     7f0:	7993      	ldrb	r3, [r2, #6]
     7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     7f6:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7fa:	7193      	strb	r3, [r2, #6]
			return -2;
     7fc:	e7e0      	b.n	7c0 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     7fe:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     802:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     804:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     808:	b11e      	cbz	r6, 812 <ioreq_uart_a+0x82>
     80a:	f8d8 3000 	ldr.w	r3, [r8]
     80e:	069a      	lsls	r2, r3, #26
     810:	d5f5      	bpl.n	7fe <ioreq_uart_a+0x6e>
			if (len != operation) {
     812:	42a6      	cmp	r6, r4
     814:	d1d3      	bne.n	7be <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     816:	683b      	ldr	r3, [r7, #0]
     818:	2015      	movs	r0, #21
     81a:	695b      	ldr	r3, [r3, #20]
     81c:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     81e:	f8d8 3000 	ldr.w	r3, [r8]
     822:	069b      	lsls	r3, r3, #26
     824:	d40b      	bmi.n	83e <ioreq_uart_a+0xae>
				uart_a_enable_int;
     826:	683b      	ldr	r3, [r7, #0]
     828:	2015      	movs	r0, #21
     82a:	691b      	ldr	r3, [r3, #16]
     82c:	4798      	blx	r3
				goto Redo_tx;
     82e:	e7eb      	b.n	808 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     830:	4616      	mov	r6, r2
			uart_a_disable_int;
     832:	4f14      	ldr	r7, [pc, #80]	; (884 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     834:	f8df 8060 	ldr.w	r8, [pc, #96]	; 898 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     838:	f8df 9060 	ldr.w	r9, [pc, #96]	; 89c <ioreq_uart_a+0x10c>
     83c:	e7e4      	b.n	808 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     83e:	4a12      	ldr	r2, [pc, #72]	; (888 <ioreq_uart_a+0xf8>)
     840:	7993      	ldrb	r3, [r2, #6]
     842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     846:	e7d6      	b.n	7f6 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     848:	4b0e      	ldr	r3, [pc, #56]	; (884 <ioreq_uart_a+0xf4>)
     84a:	2015      	movs	r0, #21
     84c:	681b      	ldr	r3, [r3, #0]
			return 0;
     84e:	2400      	movs	r4, #0
			uart_a_enable_int;
     850:	691b      	ldr	r3, [r3, #16]
     852:	4798      	blx	r3
			return 0;
     854:	e7b4      	b.n	7c0 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     856:	2a01      	cmp	r2, #1
     858:	d109      	bne.n	86e <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     85a:	490b      	ldr	r1, [pc, #44]	; (888 <ioreq_uart_a+0xf8>)
     85c:	8828      	ldrh	r0, [r5, #0]
     85e:	f7ff ff51 	bl	704 <__pi_uart_setrate>
     862:	2800      	cmp	r0, #0
     864:	d1ac      	bne.n	7c0 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     866:	2003      	movs	r0, #3
     868:	4908      	ldr	r1, [pc, #32]	; (88c <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     86a:	f7ff fe3b 	bl	4e4 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     86e:	2a02      	cmp	r2, #2
     870:	d104      	bne.n	87c <ioreq_uart_a+0xec>
	return urates [0];
     872:	4b07      	ldr	r3, [pc, #28]	; (890 <ioreq_uart_a+0x100>)
				return 1;
     874:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     876:	881b      	ldrh	r3, [r3, #0]
     878:	800b      	strh	r3, [r1, #0]
				return 1;
     87a:	e7a1      	b.n	7c0 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     87c:	2002      	movs	r0, #2
     87e:	4905      	ldr	r1, [pc, #20]	; (894 <ioreq_uart_a+0x104>)
     880:	e7f3      	b.n	86a <ioreq_uart_a+0xda>
     882:	bf00      	nop
     884:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     888:	20000b38 	andcs	r0, r0, r8, lsr fp
     88c:	000043a0 	andeq	r4, r0, r0, lsr #7
     890:	20000548 	andcs	r0, r0, r8, asr #10
     894:	000043a4 	andeq	r4, r0, r4, lsr #7
     898:	40001018 	andmi	r1, r0, r8, lsl r0
     89c:	40001000 	andmi	r1, r0, r0

000008a0 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     8a4:	b530      	push	{r4, r5, lr}
     8a6:	4b29      	ldr	r3, [pc, #164]	; (94c <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	4c29      	ldr	r4, [pc, #164]	; (950 <UART0IntHandler+0xb0>)
     8aa:	601a      	str	r2, [r3, #0]
     8ac:	6822      	ldr	r2, [r4, #0]
     8ae:	06d5      	lsls	r5, r2, #27
     8b0:	d423      	bmi.n	8fa <UART0IntHandler+0x5a>
     8b2:	4b28      	ldr	r3, [pc, #160]	; (954 <UART0IntHandler+0xb4>)
     8b4:	799a      	ldrb	r2, [r3, #6]
     8b6:	0610      	lsls	r0, r2, #24
     8b8:	d51f      	bpl.n	8fa <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8ba:	799a      	ldrb	r2, [r3, #6]
     8bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     8c0:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     8c2:	4a25      	ldr	r2, [pc, #148]	; (958 <UART0IntHandler+0xb8>)
     8c4:	7813      	ldrb	r3, [r2, #0]
     8c6:	f043 0302 	orr.w	r3, r3, #2
     8ca:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     8cc:	4b23      	ldr	r3, [pc, #140]	; (95c <UART0IntHandler+0xbc>)
     8ce:	681a      	ldr	r2, [r3, #0]
     8d0:	b19a      	cbz	r2, 8fa <UART0IntHandler+0x5a>
     8d2:	4610      	mov	r0, r2
     8d4:	2300      	movs	r3, #0
     8d6:	f830 1b10 	ldrh.w	r1, [r0], #16
     8da:	f001 0107 	and.w	r1, r1, #7
     8de:	4299      	cmp	r1, r3
     8e0:	dd09      	ble.n	8f6 <UART0IntHandler+0x56>
     8e2:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     8e6:	3301      	adds	r3, #1
     8e8:	f515 7f81 	cmn.w	r5, #258	; 0x102
     8ec:	d1f7      	bne.n	8de <UART0IntHandler+0x3e>
     8ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8f2:	889b      	ldrh	r3, [r3, #4]
     8f4:	8013      	strh	r3, [r2, #0]
     8f6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8f8:	e7ea      	b.n	8d0 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fa:	6823      	ldr	r3, [r4, #0]
     8fc:	0699      	lsls	r1, r3, #26
     8fe:	d424      	bmi.n	94a <UART0IntHandler+0xaa>
     900:	4b14      	ldr	r3, [pc, #80]	; (954 <UART0IntHandler+0xb4>)
     902:	799a      	ldrb	r2, [r3, #6]
     904:	0652      	lsls	r2, r2, #25
     906:	d520      	bpl.n	94a <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     908:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	799a      	ldrb	r2, [r3, #6]
     90e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     912:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     914:	4a10      	ldr	r2, [pc, #64]	; (958 <UART0IntHandler+0xb8>)
     916:	7813      	ldrb	r3, [r2, #0]
     918:	f043 0302 	orr.w	r3, r3, #2
     91c:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     91e:	4b0f      	ldr	r3, [pc, #60]	; (95c <UART0IntHandler+0xbc>)
     920:	681a      	ldr	r2, [r3, #0]
     922:	b192      	cbz	r2, 94a <UART0IntHandler+0xaa>
     924:	4610      	mov	r0, r2
     926:	2300      	movs	r3, #0
     928:	f830 1b10 	ldrh.w	r1, [r0], #16
     92c:	f001 0107 	and.w	r1, r1, #7
     930:	4299      	cmp	r1, r3
     932:	dd08      	ble.n	946 <UART0IntHandler+0xa6>
     934:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     938:	3301      	adds	r3, #1
     93a:	42a5      	cmp	r5, r4
     93c:	d1f8      	bne.n	930 <UART0IntHandler+0x90>
     93e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     942:	889b      	ldrh	r3, [r3, #4]
     944:	8013      	strh	r3, [r2, #0]
     946:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     948:	e7eb      	b.n	922 <UART0IntHandler+0x82>
	}

	RTNI;
}
     94a:	bd30      	pop	{r4, r5, pc}
     94c:	40001044 	andmi	r1, r0, r4, asr #32
     950:	40001018 	andmi	r1, r0, r8, lsl r0
     954:	20000b38 	andcs	r0, r0, r8, lsr fp
     958:	20000b4c 	andcs	r0, r0, ip, asr #22
     95c:	2000054c 	andcs	r0, r0, ip, asr #10

00000960 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     960:	b570      	push	{r4, r5, r6, lr}
     962:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     966:	4e0c      	ldr	r6, [pc, #48]	; (998 <__buttons_setirq+0x38>)
     968:	4d0c      	ldr	r5, [pc, #48]	; (99c <__buttons_setirq+0x3c>)
     96a:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	4c0c      	ldr	r4, [pc, #48]	; (9a0 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     96e:	0a1b      	lsrs	r3, r3, #8
     970:	fa01 f203 	lsl.w	r2, r1, r3
     974:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     976:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     978:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97a:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     97e:	0a1b      	lsrs	r3, r3, #8
     980:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     982:	01db      	lsls	r3, r3, #7
     984:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     988:	4322      	orrs	r2, r4
     98a:	4323      	orrs	r3, r4
     98c:	6010      	str	r0, [r2, #0]
     98e:	6029      	str	r1, [r5, #0]
     990:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     992:	b662      	cpsie	i
			val;
	}
	sti;
}
     994:	bd70      	pop	{r4, r5, r6, pc}
     996:	bf00      	nop
     998:	0000452e 	andeq	r4, r0, lr, lsr #10
     99c:	400220e0 	andmi	r2, r2, r0, ror #1
     9a0:	42000048 	andmi	r0, r0, #72	; 0x48

000009a4 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     9a6:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	2200      	movs	r2, #0
     9aa:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	4f09      	ldr	r7, [pc, #36]	; (9d4 <__pinlist_setirq+0x30>)
     9ae:	4c0a      	ldr	r4, [pc, #40]	; (9d8 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	490a      	ldr	r1, [pc, #40]	; (9dc <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b2:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9ba:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9be:	01db      	lsls	r3, r3, #7
     9c0:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     9c4:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     9c6:	2a04      	cmp	r2, #4
     9c8:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ca:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	d1f1      	bne.n	9b2 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     9ce:	b662      	cpsie	i
			val;
	}
	sti;
}
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	bf00      	nop
     9d4:	00004529 	andeq	r4, r0, r9, lsr #10
     9d8:	400220e0 	andmi	r2, r2, r0, ror #1
     9dc:	42000048 	andmi	r0, r0, #72	; 0x48

000009e0 <GPIOIntHandler>:
void GPIOIntHandler () {
     9e0:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     9e2:	4c23      	ldr	r4, [pc, #140]	; (a70 <GPIOIntHandler+0x90>)
     9e4:	6822      	ldr	r2, [r4, #0]
     9e6:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     9ea:	d01e      	beq.n	a2a <GPIOIntHandler+0x4a>
	buttons_disable ();
     9ec:	2000      	movs	r0, #0
     9ee:	f7ff ffb7 	bl	960 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     9f2:	4b20      	ldr	r3, [pc, #128]	; (a74 <GPIOIntHandler+0x94>)
     9f4:	4d20      	ldr	r5, [pc, #128]	; (a78 <GPIOIntHandler+0x98>)
     9f6:	681a      	ldr	r2, [r3, #0]
     9f8:	b192      	cbz	r2, a20 <GPIOIntHandler+0x40>
     9fa:	4610      	mov	r0, r2
     9fc:	2300      	movs	r3, #0
     9fe:	f830 1b10 	ldrh.w	r1, [r0], #16
     a02:	f001 0107 	and.w	r1, r1, #7
     a06:	4299      	cmp	r1, r3
     a08:	dd08      	ble.n	a1c <GPIOIntHandler+0x3c>
     a0a:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     a0e:	3301      	adds	r3, #1
     a10:	42ae      	cmp	r6, r5
     a12:	d1f8      	bne.n	a06 <GPIOIntHandler+0x26>
     a14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     a18:	889b      	ldrh	r3, [r3, #4]
     a1a:	8013      	strh	r3, [r2, #0]
     a1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a1e:	e7eb      	b.n	9f8 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     a20:	4a16      	ldr	r2, [pc, #88]	; (a7c <GPIOIntHandler+0x9c>)
     a22:	7813      	ldrb	r3, [r2, #0]
     a24:	f043 0302 	orr.w	r3, r3, #2
     a28:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     a2a:	6823      	ldr	r3, [r4, #0]
     a2c:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     a30:	d01d      	beq.n	a6e <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     a32:	4b10      	ldr	r3, [pc, #64]	; (a74 <GPIOIntHandler+0x94>)
     a34:	4c12      	ldr	r4, [pc, #72]	; (a80 <GPIOIntHandler+0xa0>)
     a36:	6818      	ldr	r0, [r3, #0]
     a38:	b190      	cbz	r0, a60 <GPIOIntHandler+0x80>
     a3a:	4601      	mov	r1, r0
     a3c:	2300      	movs	r3, #0
     a3e:	f831 2b10 	ldrh.w	r2, [r1], #16
     a42:	f002 0207 	and.w	r2, r2, #7
     a46:	429a      	cmp	r2, r3
     a48:	dd08      	ble.n	a5c <GPIOIntHandler+0x7c>
     a4a:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     a4e:	3301      	adds	r3, #1
     a50:	42a5      	cmp	r5, r4
     a52:	d1f8      	bne.n	a46 <GPIOIntHandler+0x66>
     a54:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     a58:	889b      	ldrh	r3, [r3, #4]
     a5a:	8003      	strh	r3, [r0, #0]
     a5c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     a5e:	e7eb      	b.n	a38 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     a60:	f7ff ffa0 	bl	9a4 <__pinlist_setirq>
	RISE_N_SHINE;
     a64:	4a05      	ldr	r2, [pc, #20]	; (a7c <GPIOIntHandler+0x9c>)
     a66:	7813      	ldrb	r3, [r2, #0]
     a68:	f043 0302 	orr.w	r3, r3, #2
     a6c:	7013      	strb	r3, [r2, #0]
}
     a6e:	bd70      	pop	{r4, r5, r6, pc}
     a70:	400220e0 	andmi	r2, r2, r0, ror #1
     a74:	2000054c 	andcs	r0, r0, ip, asr #10
     a78:	0000452e 	andeq	r4, r0, lr, lsr #10
     a7c:	20000b4c 	andcs	r0, r0, ip, asr #22
     a80:	00004529 	andeq	r4, r0, r9, lsr #10

00000a84 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a88:	4c58      	ldr	r4, [pc, #352]	; (bec <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8a:	2004      	movs	r0, #4
     a8c:	f7ff fcec 	bl	468 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	6823      	ldr	r3, [r4, #0]
     a92:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a96:	69db      	ldr	r3, [r3, #28]
     a98:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9a:	6823      	ldr	r3, [r4, #0]
     a9c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     aa2:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa4:	6823      	ldr	r3, [r4, #0]
     aa6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     aac:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     aae:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab0:	2600      	movs	r6, #0
     ab2:	4c4f      	ldr	r4, [pc, #316]	; (bf0 <system_init+0x16c>)
     ab4:	4f4f      	ldr	r7, [pc, #316]	; (bf4 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ab6:	f8df c17c 	ldr.w	ip, [pc, #380]	; c34 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aba:	f8df e17c 	ldr.w	lr, [pc, #380]	; c38 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     abe:	f8df 8140 	ldr.w	r8, [pc, #320]	; c00 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac2:	f8df 9134 	ldr.w	r9, [pc, #308]	; bf8 <system_init+0x174>
     ac6:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     ace:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad2:	0091      	lsls	r1, r2, #2
     ad4:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     ad8:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     adc:	ea05 0a0c 	and.w	sl, r5, ip
     ae0:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     ae4:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ae6:	bf44      	itt	mi
     ae8:	ea41 010e 	orrmi.w	r1, r1, lr
     aec:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     aee:	fa03 f202 	lsl.w	r2, r3, r2
     af2:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af4:	bf4c      	ite	mi
     af6:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afa:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     afe:	2e11      	cmp	r6, #17
     b00:	d1e2      	bne.n	ac8 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b02:	2540      	movs	r5, #64	; 0x40
     b04:	2680      	movs	r6, #128	; 0x80
     b06:	4b3c      	ldr	r3, [pc, #240]	; (bf8 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     b08:	493c      	ldr	r1, [pc, #240]	; (bfc <system_init+0x178>)
     b0a:	601d      	str	r5, [r3, #0]
     b0c:	601e      	str	r6, [r3, #0]
     b0e:	780b      	ldrb	r3, [r1, #0]
     b10:	780b      	ldrb	r3, [r1, #0]
     b12:	20c8      	movs	r0, #200	; 0xc8
     b14:	f36f 1307 	bfc	r3, #4, #4
     b18:	700b      	strb	r3, [r1, #0]
     b1a:	f7ff fc8f 	bl	43c <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b1e:	4b38      	ldr	r3, [pc, #224]	; (c00 <system_init+0x17c>)
     b20:	20c8      	movs	r0, #200	; 0xc8
     b22:	601d      	str	r5, [r3, #0]
     b24:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b26:	2601      	movs	r6, #1
	all_leds_blink;
     b28:	780b      	ldrb	r3, [r1, #0]
     b2a:	780b      	ldrb	r3, [r1, #0]
     b2c:	f36f 1307 	bfc	r3, #4, #4
     b30:	700b      	strb	r3, [r1, #0]
     b32:	f7ff fc83 	bl	43c <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     b36:	4b33      	ldr	r3, [pc, #204]	; (c04 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b38:	4a33      	ldr	r2, [pc, #204]	; (c08 <system_init+0x184>)
     b3a:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	4b33      	ldr	r3, [pc, #204]	; (c0c <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     b3e:	4d34      	ldr	r5, [pc, #208]	; (c10 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b42:	4b34      	ldr	r3, [pc, #208]	; (c14 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     b44:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b46:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     b48:	682b      	ldr	r3, [r5, #0]
     b4a:	691b      	ldr	r3, [r3, #16]
     b4c:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     b4e:	f000 fbe3 	bl	1318 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     b52:	682b      	ldr	r3, [r5, #0]
     b54:	2010      	movs	r0, #16
     b56:	691b      	ldr	r3, [r3, #16]
     b58:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5a:	2002      	movs	r0, #2
     b5c:	f7ff fc84 	bl	468 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	68ab      	ldr	r3, [r5, #8]
     b62:	f44f 7000 	mov.w	r0, #512	; 0x200
     b66:	69db      	ldr	r3, [r3, #28]
     b68:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6a:	68ab      	ldr	r3, [r5, #8]
     b6c:	f44f 7000 	mov.w	r0, #512	; 0x200
     b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b72:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b74:	68ab      	ldr	r3, [r5, #8]
     b76:	f44f 7000 	mov.w	r0, #512	; 0x200
     b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b7c:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     b7e:	2260      	movs	r2, #96	; 0x60
     b80:	4b25      	ldr	r3, [pc, #148]	; (c18 <system_init+0x194>)
     b82:	6026      	str	r6, [r4, #0]
     b84:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     b86:	f7ff fde7 	bl	758 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     b8a:	f001 f903 	bl	1d94 <ee_open>
     b8e:	f001 f90b 	bl	1da8 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b92:	f003 f99f 	bl	3ed4 <NOROM_SysCtrlResetSourceGet>
     b96:	2808      	cmp	r0, #8
     b98:	d11a      	bne.n	bd0 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b9a:	4b20      	ldr	r3, [pc, #128]	; (c1c <system_init+0x198>)
     b9c:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     ba2:	3b04      	subs	r3, #4
     ba4:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     baa:	3324      	adds	r3, #36	; 0x24
     bac:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     bae:	2000      	movs	r0, #0
     bb0:	f7ff fc28 	bl	404 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb4:	4a1a      	ldr	r2, [pc, #104]	; (c20 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     bb6:	2015      	movs	r0, #21
     bb8:	6813      	ldr	r3, [r2, #0]
     bba:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     bbe:	6013      	str	r3, [r2, #0]
     bc0:	4b13      	ldr	r3, [pc, #76]	; (c10 <system_init+0x18c>)
     bc2:	681b      	ldr	r3, [r3, #0]
     bc4:	691b      	ldr	r3, [r3, #16]
     bc6:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     bc8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     bcc:	f7ff bcd4 	b.w	578 <tci_run_auxiliary_timer>
		diag ("");
     bd0:	4814      	ldr	r0, [pc, #80]	; (c24 <system_init+0x1a0>)
     bd2:	f000 fc8f 	bl	14f4 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bd6:	4814      	ldr	r0, [pc, #80]	; (c28 <system_init+0x1a4>)
     bd8:	f000 fc8c 	bl	14f4 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bdc:	4913      	ldr	r1, [pc, #76]	; (c2c <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     bde:	4814      	ldr	r0, [pc, #80]	; (c30 <system_init+0x1ac>)
     be0:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     be4:	b289      	uxth	r1, r1
     be6:	f000 fc85 	bl	14f4 <diag>
     bea:	e7e0      	b.n	bae <system_init+0x12a>
     bec:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     bf0:	60082028 	andvs	r2, r8, r8, lsr #32
     bf4:	0000441c 	andeq	r4, r0, ip, lsl r4
     bf8:	40022090 	mulmi	r2, r0, r0
     bfc:	20000b4c 	andcs	r0, r0, ip, asr #22
     c00:	400220a0 	andmi	r2, r2, r0, lsr #1
     c04:	40092024 	andmi	r2, r9, r4, lsr #32
     c08:	00050003 	andeq	r0, r5, r3
     c0c:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     c10:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     c14:	40092000 	andmi	r2, r9, r0
     c18:	20000548 	andcs	r0, r0, r8, asr #10
     c1c:	4009400c 	andmi	r4, r9, ip
     c20:	40001038 	andmi	r1, r0, r8, lsr r0
     c24:	000041fc 	strdeq	r4, [r0], -ip
     c28:	000043a8 	andeq	r4, r0, r8, lsr #7
     c2c:	20000b70 	andcs	r0, r0, r0, ror fp
     c30:	000043f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
     c34:	7f077f3f 	svcvc	0x00077f3f
     c38:	42441a00 	submi	r1, r4, #0, 20

00000c3c <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	2803      	cmp	r0, #3
     c3e:	4603      	mov	r3, r0
     c40:	bf28      	it	cs
     c42:	2303      	movcs	r3, #3
     c44:	4a05      	ldr	r2, [pc, #20]	; (c5c <setpowermode+0x20>)
     c46:	b2db      	uxtb	r3, r3
     c48:	2801      	cmp	r0, #1
     c4a:	7093      	strb	r3, [r2, #2]
     c4c:	d904      	bls.n	c58 <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
     c4e:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c50:	f011 0f01 	tst.w	r1, #1
     c54:	bf18      	it	ne
     c56:	2301      	movne	r3, #1
     c58:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
     c5a:	4770      	bx	lr
     c5c:	20000b4c 	andcs	r0, r0, ip, asr #22

00000c60 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     c60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     c64:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c66:	4b79      	ldr	r3, [pc, #484]	; (e4c <__pi_release+0x1ec>)
     c68:	af00      	add	r7, sp, #0
     c6a:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     c6e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     c72:	681a      	ldr	r2, [r3, #0]
     c74:	4b76      	ldr	r3, [pc, #472]	; (e50 <__pi_release+0x1f0>)
     c76:	429a      	cmp	r2, r3
     c78:	d127      	bne.n	cca <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c7a:	4e76      	ldr	r6, [pc, #472]	; (e54 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     c7c:	2100      	movs	r1, #0
     c7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
     c82:	f000 f9ed 	bl	1060 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     c86:	4a74      	ldr	r2, [pc, #464]	; (e58 <__pi_release+0x1f8>)
     c88:	4b74      	ldr	r3, [pc, #464]	; (e5c <__pi_release+0x1fc>)
     c8a:	6812      	ldr	r2, [r2, #0]
     c8c:	601a      	str	r2, [r3, #0]
     c8e:	681a      	ldr	r2, [r3, #0]
     c90:	b9fa      	cbnz	r2, cd2 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c92:	4c73      	ldr	r4, [pc, #460]	; (e60 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     c96:	4d73      	ldr	r5, [pc, #460]	; (e64 <__pi_release+0x204>)
     c98:	782b      	ldrb	r3, [r5, #0]
     c9a:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c9e:	0798      	lsls	r0, r3, #30
     ca0:	607a      	str	r2, [r7, #4]
     ca2:	f100 80cd 	bmi.w	e40 <__pi_release+0x1e0>
	system_event_count ++;
     ca6:	4a70      	ldr	r2, [pc, #448]	; (e68 <__pi_release+0x208>)
     ca8:	6813      	ldr	r3, [r2, #0]
     caa:	3301      	adds	r3, #1
     cac:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     cae:	78ea      	ldrb	r2, [r5, #3]
     cb0:	2a01      	cmp	r2, #1
     cb2:	b2d3      	uxtb	r3, r2
     cb4:	d017      	beq.n	ce6 <__pi_release+0x86>
     cb6:	2b02      	cmp	r3, #2
     cb8:	d031      	beq.n	d1e <__pi_release+0xbe>
     cba:	2b00      	cmp	r3, #0
     cbc:	f040 8095 	bne.w	dea <__pi_release+0x18a>
			__WFI ();
     cc0:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     cc2:	b662      	cpsie	i
     cc4:	bf00      	nop
     cc6:	bf00      	nop
     cc8:	e7e4      	b.n	c94 <__pi_release+0x34>
	check_stack_overflow;
     cca:	200b      	movs	r0, #11
     ccc:	4967      	ldr	r1, [pc, #412]	; (e6c <__pi_release+0x20c>)
     cce:	f7ff fc09 	bl	4e4 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd2:	6851      	ldr	r1, [r2, #4]
     cd4:	b129      	cbz	r1, ce2 <__pi_release+0x82>
     cd6:	8810      	ldrh	r0, [r2, #0]
     cd8:	0704      	lsls	r4, r0, #28
     cda:	d102      	bne.n	ce2 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	0900      	lsrs	r0, r0, #4
     cde:	4788      	blx	r1
			goto Redo;
     ce0:	e7cc      	b.n	c7c <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     ce4:	e7d2      	b.n	c8c <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     ce6:	4a62      	ldr	r2, [pc, #392]	; (e70 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ce8:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cea:	6813      	ldr	r3, [r2, #0]
     cec:	f043 0301 	orr.w	r3, r3, #1
     cf0:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     cf6:	f043 0303 	orr.w	r3, r3, #3
     cfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cfe:	4b5d      	ldr	r3, [pc, #372]	; (e74 <__pi_release+0x214>)
     d00:	681b      	ldr	r3, [r3, #0]
     d02:	699b      	ldr	r3, [r3, #24]
     d04:	4798      	blx	r3
     d06:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	6823      	ldr	r3, [r4, #0]
     d0a:	f043 0304 	orr.w	r3, r3, #4
     d0e:	6023      	str	r3, [r4, #0]
			__WFI ();
     d10:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d12:	6823      	ldr	r3, [r4, #0]
     d14:	f023 0304 	bic.w	r3, r3, #4
     d18:	6023      	str	r3, [r4, #0]
     d1a:	6833      	ldr	r3, [r6, #0]
}
     d1c:	e7d1      	b.n	cc2 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d1e:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d22:	687a      	ldr	r2, [r7, #4]
     d24:	4b54      	ldr	r3, [pc, #336]	; (e78 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d26:	f8df b188 	ldr.w	fp, [pc, #392]	; eb0 <__pi_release+0x250>
     d2a:	601a      	str	r2, [r3, #0]
     d2c:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d2e:	f8df a144 	ldr.w	sl, [pc, #324]	; e74 <__pi_release+0x214>
     d32:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d36:	6833      	ldr	r3, [r6, #0]
     d38:	4b50      	ldr	r3, [pc, #320]	; (e7c <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3a:	f8df 9178 	ldr.w	r9, [pc, #376]	; eb4 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d3e:	f8c3 8000 	str.w	r8, [r3]
     d42:	6868      	ldr	r0, [r5, #4]
     d44:	f8da 3000 	ldr.w	r3, [sl]
     d48:	f040 0020 	orr.w	r0, r0, #32
     d4c:	699b      	ldr	r3, [r3, #24]
     d4e:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	4b4b      	ldr	r3, [pc, #300]	; (e80 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d52:	2103      	movs	r1, #3
     d54:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d58:	f8d9 3000 	ldr.w	r3, [r9]
     d5c:	4849      	ldr	r0, [pc, #292]	; (e84 <__pi_release+0x224>)
     d5e:	f023 0303 	bic.w	r3, r3, #3
     d62:	f8c9 3000 	str.w	r3, [r9]
     d66:	4b48      	ldr	r3, [pc, #288]	; (e88 <__pi_release+0x228>)
     d68:	681a      	ldr	r2, [r3, #0]
     d6a:	6852      	ldr	r2, [r2, #4]
     d6c:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     d6e:	6878      	ldr	r0, [r7, #4]
     d70:	f002 ff70 	bl	3c54 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     d74:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d76:	6822      	ldr	r2, [r4, #0]
     d78:	f042 0204 	orr.w	r2, r2, #4
     d7c:	6022      	str	r2, [r4, #0]
			__WFI ();
     d7e:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d82:	4b41      	ldr	r3, [pc, #260]	; (e88 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	f022 0204 	bic.w	r2, r2, #4
     d88:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8a:	681b      	ldr	r3, [r3, #0]
     d8c:	4641      	mov	r1, r8
     d8e:	685b      	ldr	r3, [r3, #4]
     d90:	483c      	ldr	r0, [pc, #240]	; (e84 <__pi_release+0x224>)
     d92:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d94:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d98:	4a3c      	ldr	r2, [pc, #240]	; (e8c <__pi_release+0x22c>)
     d9a:	f043 0303 	orr.w	r3, r3, #3
     d9e:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da2:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     da6:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     da8:	0699      	lsls	r1, r3, #26
     daa:	d5fc      	bpl.n	da6 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dac:	f8da 3000 	ldr.w	r3, [sl]
     db0:	6868      	ldr	r0, [r5, #4]
     db2:	695b      	ldr	r3, [r3, #20]
     db4:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     db6:	4d2f      	ldr	r5, [pc, #188]	; (e74 <__pi_release+0x214>)
     db8:	4b2a      	ldr	r3, [pc, #168]	; (e64 <__pi_release+0x204>)
     dba:	6858      	ldr	r0, [r3, #4]
     dbc:	682b      	ldr	r3, [r5, #0]
     dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     dc0:	4798      	blx	r3
     dc2:	2801      	cmp	r0, #1
     dc4:	d1f8      	bne.n	db8 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     dc6:	4b2d      	ldr	r3, [pc, #180]	; (e7c <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dc8:	4a2d      	ldr	r2, [pc, #180]	; (e80 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     dca:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	2300      	movs	r3, #0
     dce:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	4b29      	ldr	r3, [pc, #164]	; (e78 <__pi_release+0x218>)
     dd2:	6018      	str	r0, [r3, #0]
     dd4:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd6:	f003 f84d 	bl	3e74 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     dda:	f7ff fcbd 	bl	758 <reinit_uart>
     dde:	4a2c      	ldr	r2, [pc, #176]	; (e90 <__pi_release+0x230>)
     de0:	6813      	ldr	r3, [r2, #0]
     de2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     de6:	6013      	str	r3, [r2, #0]
}
     de8:	e76b      	b.n	cc2 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dea:	4b2a      	ldr	r3, [pc, #168]	; (e94 <__pi_release+0x234>)
     dec:	2001      	movs	r0, #1
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	68db      	ldr	r3, [r3, #12]
     df2:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df4:	4a28      	ldr	r2, [pc, #160]	; (e98 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     df6:	4929      	ldr	r1, [pc, #164]	; (e9c <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	6813      	ldr	r3, [r2, #0]
     dfa:	f023 0301 	bic.w	r3, r3, #1
     dfe:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	4b27      	ldr	r3, [pc, #156]	; (ea0 <__pi_release+0x240>)
     e02:	681a      	ldr	r2, [r3, #0]
     e04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     e08:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0a:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     e0e:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	604a      	str	r2, [r1, #4]
     e12:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	687a      	ldr	r2, [r7, #4]
     e16:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e18:	687a      	ldr	r2, [r7, #4]
     e1a:	4b22      	ldr	r3, [pc, #136]	; (ea4 <__pi_release+0x244>)
     e1c:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e1e:	2201      	movs	r2, #1
     e20:	4b21      	ldr	r3, [pc, #132]	; (ea8 <__pi_release+0x248>)
     e22:	601a      	str	r2, [r3, #0]
     e24:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e26:	4a19      	ldr	r2, [pc, #100]	; (e8c <__pi_release+0x22c>)
     e28:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2a:	069b      	lsls	r3, r3, #26
     e2c:	d4fc      	bmi.n	e28 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e2e:	2201      	movs	r2, #1
     e30:	4b1e      	ldr	r3, [pc, #120]	; (eac <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     e32:	2037      	movs	r0, #55	; 0x37
     e34:	601a      	str	r2, [r3, #0]
     e36:	4b0f      	ldr	r3, [pc, #60]	; (e74 <__pi_release+0x214>)
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	699b      	ldr	r3, [r3, #24]
     e3c:	4798      	blx	r3
			goto DeepSleep;
     e3e:	e763      	b.n	d08 <__pi_release+0xa8>
	__SLEEP;
     e40:	782b      	ldrb	r3, [r5, #0]
     e42:	f36f 0341 	bfc	r3, #1, #1
     e46:	702b      	strb	r3, [r5, #0]
     e48:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     e4a:	e717      	b.n	c7c <__pi_release+0x1c>
     e4c:	20005000 	andcs	r5, r0, r0
     e50:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e54:	4009202c 	andmi	r2, r9, ip, lsr #32
     e58:	2000054c 	andcs	r0, r0, ip, asr #10
     e5c:	20000b68 	andcs	r0, r0, r8, ror #22
     e60:	e000ed10 	and	lr, r0, r0, lsl sp
     e64:	20000b4c 	andcs	r0, r0, ip, asr #22
     e68:	20000b40 	andcs	r0, r0, r0, asr #22
     e6c:	0000440b 	andeq	r4, r0, fp, lsl #8
     e70:	4008218c 	andmi	r2, r8, ip, lsl #3
     e74:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     e78:	4009400c 	andmi	r4, r9, ip
     e7c:	60082028 	andvs	r2, r8, r8, lsr #32
     e80:	43040180 	movwmi	r0, #16768	; 0x4180
     e84:	40034000 	andmi	r4, r3, r0
     e88:	100001d8 	ldrdne	r0, [r0], -r8
     e8c:	40091014 	andmi	r1, r9, r4, lsl r0
     e90:	40001038 	andmi	r1, r0, r8, lsr r0
     e94:	100001a0 	andne	r0, r0, r0, lsr #3
     e98:	40091010 	andmi	r1, r9, r0, lsl r0
     e9c:	40093000 	andmi	r3, r9, r0
     ea0:	40091040 	andmi	r1, r9, r0, asr #32
     ea4:	43220420 			; <UNDEFINED> instruction: 0x43220420
     ea8:	40091018 	andmi	r1, r9, r8, lsl r0
     eac:	43040188 	movwmi	r0, #16776	; 0x4188
     eb0:	43220200 			; <UNDEFINED> instruction: 0x43220200
     eb4:	40082224 	andmi	r2, r8, r4, lsr #4

00000eb8 <halt>:
	cli_tim;
     eb8:	2400      	movs	r4, #0
void halt (void) {
     eba:	b508      	push	{r3, lr}
	cli_tim;
     ebc:	4b07      	ldr	r3, [pc, #28]	; (edc <halt+0x24>)
	diag ("PicOS halted");
     ebe:	4808      	ldr	r0, [pc, #32]	; (ee0 <halt+0x28>)
	cli_tim;
     ec0:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
     ec2:	f000 fb17 	bl	14f4 <diag>
	mdelay (500);
     ec6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     eca:	f7ff fab7 	bl	43c <mdelay>
	setpowermode (2);
     ece:	2002      	movs	r0, #2
     ed0:	f7ff feb4 	bl	c3c <setpowermode>
	__PCB = NULL;
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <halt+0x2c>)
     ed6:	601c      	str	r4, [r3, #0]
	release;
     ed8:	f7ff fec2 	bl	c60 <__pi_release>
     edc:	43240280 			; <UNDEFINED> instruction: 0x43240280
     ee0:	0000440e 	andeq	r4, r0, lr, lsl #8
     ee4:	2000054c 	andcs	r0, r0, ip, asr #10

00000ee8 <main>:

#include "scheduler.h"

}

int main (void) {
     ee8:	b510      	push	{r4, lr}
     eea:	4b11      	ldr	r3, [pc, #68]	; (f30 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	4911      	ldr	r1, [pc, #68]	; (f34 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     eee:	4a12      	ldr	r2, [pc, #72]	; (f38 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	4293      	cmp	r3, r2
     ef6:	d1fb      	bne.n	ef0 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef8:	4c10      	ldr	r4, [pc, #64]	; (f3c <main+0x54>)
	system_init ();
     efa:	f7ff fdc3 	bl	a84 <system_init>
	tcv_init ();
     efe:	f000 fe85 	bl	1c0c <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f02:	6823      	ldr	r3, [r4, #0]
     f04:	2129      	movs	r1, #41	; 0x29
     f06:	2000      	movs	r0, #0
     f08:	681b      	ldr	r3, [r3, #0]
     f0a:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	6823      	ldr	r3, [r4, #0]
     f0e:	2120      	movs	r1, #32
     f10:	681b      	ldr	r3, [r3, #0]
     f12:	2001      	movs	r0, #1
     f14:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f16:	2100      	movs	r1, #0
     f18:	4809      	ldr	r0, [pc, #36]	; (f40 <main+0x58>)
     f1a:	f000 fac5 	bl	14a8 <__pi_fork>
     f1e:	4b09      	ldr	r3, [pc, #36]	; (f44 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     f20:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f22:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     f24:	2010      	movs	r0, #16
     f26:	f000 f951 	bl	11cc <delay>
     f2a:	b662      	cpsie	i

	sti;

	__pi_release ();
     f2c:	f7ff fe98 	bl	c60 <__pi_release>
     f30:	20004bfc 	strdcs	r4, [r0], -ip
     f34:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     f38:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     f3c:	10000184 	andne	r0, r0, r4, lsl #3
     f40:	0000013d 	andeq	r0, r0, sp, lsr r1
     f44:	20000b68 	andcs	r0, r0, r8, ror #22

00000f48 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     f48:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     f4a:	4b0d      	ldr	r3, [pc, #52]	; (f80 <killev+0x38>)
	wfun = (aword)(pid->code);
     f4c:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     f4e:	681a      	ldr	r2, [r3, #0]
     f50:	b1aa      	cbz	r2, f7e <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     f52:	4614      	mov	r4, r2
     f54:	f834 1b10 	ldrh.w	r1, [r4], #16
     f58:	2300      	movs	r3, #0
     f5a:	f001 0107 	and.w	r1, r1, #7
     f5e:	e001      	b.n	f64 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     f60:	42b5      	cmp	r5, r6
     f62:	d006      	beq.n	f72 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     f64:	4299      	cmp	r1, r3
     f66:	dd08      	ble.n	f7a <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     f68:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f6c:	3301      	adds	r3, #1
     f6e:	42a8      	cmp	r0, r5
     f70:	d1f6      	bne.n	f60 <killev+0x18>
			    ) {
				wakeupev (i, j);
     f72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f76:	889b      	ldrh	r3, [r3, #4]
     f78:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f7c:	e7e8      	b.n	f50 <killev+0x8>
				break;
			}
		}
	}
}
     f7e:	bd70      	pop	{r4, r5, r6, pc}
     f80:	2000054c 	andcs	r0, r0, ip, asr #10

00000f84 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	4a1d      	ldr	r2, [pc, #116]	; (ffc <qfree+0x78>)
static void qfree (aword *ch) {
     f86:	b530      	push	{r4, r5, lr}
     f88:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8a:	6813      	ldr	r3, [r2, #0]
     f8c:	b93b      	cbnz	r3, f9e <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f8e:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     f90:	4a1a      	ldr	r2, [pc, #104]	; (ffc <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f92:	bb53      	cbnz	r3, fea <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     f94:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     f96:	4b1a      	ldr	r3, [pc, #104]	; (1000 <qfree+0x7c>)
	m_setnextp (cc, ch);
     f98:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     f9a:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     f9c:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9e:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     fa2:	3101      	adds	r1, #1
     fa4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     fa8:	4288      	cmp	r0, r1
     faa:	d10b      	bne.n	fc4 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     fac:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     fae:	f850 0c04 	ldr.w	r0, [r0, #-4]
     fb2:	f853 1c04 	ldr.w	r1, [r3, #-4]
     fb6:	4401      	add	r1, r0
     fb8:	4618      	mov	r0, r3
     fba:	3101      	adds	r1, #1
     fbc:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	681b      	ldr	r3, [r3, #0]
     fc2:	e7e3      	b.n	f8c <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	f850 1c04 	ldr.w	r1, [r0, #-4]
     fc8:	3101      	adds	r1, #1
     fca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     fce:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     fd0:	bf03      	ittte	eq
     fd2:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     fd8:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     fdc:	461a      	movne	r2, r3
     fde:	bf02      	ittt	eq
     fe0:	1949      	addeq	r1, r1, r5
     fe2:	3101      	addeq	r1, #1
     fe4:	f840 1c04 	streq.w	r1, [r0, #-4]
     fe8:	e7ea      	b.n	fc0 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     fea:	f853 4c04 	ldr.w	r4, [r3, #-4]
     fee:	f850 1c04 	ldr.w	r1, [r0, #-4]
     ff2:	428c      	cmp	r4, r1
     ff4:	d2ce      	bcs.n	f94 <qfree+0x10>
		chunk = m_nextp (chunk))
     ff6:	461a      	mov	r2, r3
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	e7ca      	b.n	f92 <qfree+0xe>
     ffc:	20000560 	andcs	r0, r0, r0, ror #10
    1000:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00001004 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1004:	4a03      	ldr	r2, [pc, #12]	; (1014 <dgout+0x10>)
    1006:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    1008:	071b      	lsls	r3, r3, #28
    100a:	d4fc      	bmi.n	1006 <dgout+0x2>
	diag_wchar (c, a);
    100c:	4b02      	ldr	r3, [pc, #8]	; (1018 <dgout+0x14>)
    100e:	b2c0      	uxtb	r0, r0
    1010:	6018      	str	r0, [r3, #0]
}
    1012:	4770      	bx	lr
    1014:	40001018 	andmi	r1, r0, r8, lsl r0
    1018:	40001000 	andmi	r1, r0, r0

0000101c <__pi_badstate>:
	syserror (ESTATE, "state");
    101c:	2007      	movs	r0, #7
void __pi_badstate (void) {
    101e:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    1020:	4901      	ldr	r1, [pc, #4]	; (1028 <__pi_badstate+0xc>)
    1022:	f7ff fa5f 	bl	4e4 <__pi_syserror>
    1026:	bf00      	nop
    1028:	00004460 	andeq	r4, r0, r0, ror #8

0000102c <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	4a08      	ldr	r2, [pc, #32]	; (1050 <utimer_add+0x24>)
void utimer_add (address ut) {
    102e:	4603      	mov	r3, r0
    1030:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    1032:	2000      	movs	r0, #0
void utimer_add (address ut) {
    1034:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    1036:	f852 4b04 	ldr.w	r4, [r2], #4
    103a:	b12c      	cbz	r4, 1048 <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	3001      	adds	r0, #1
    103e:	2804      	cmp	r0, #4
    1040:	d1f9      	bne.n	1036 <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    1042:	4904      	ldr	r1, [pc, #16]	; (1054 <utimer_add+0x28>)
    1044:	f7ff fa4e 	bl	4e4 <__pi_syserror>
	__pi_utims [i] = ut;
    1048:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    104c:	bd10      	pop	{r4, pc}
    104e:	bf00      	nop
    1050:	20000b58 	andcs	r0, r0, r8, asr fp
    1054:	00004466 	andeq	r4, r0, r6, ror #8

00001058 <__pi_utimer_set>:
	*t = v;
    1058:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    105a:	f7ff ba8d 	b.w	578 <tci_run_auxiliary_timer>
	...

00001060 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1062:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	4608      	mov	r0, r1
    1066:	f7ff fb25 	bl	6b4 <tci_update_delay_ticks>
    106a:	2800      	cmp	r0, #0
    106c:	d154      	bne.n	1118 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    106e:	4b2b      	ldr	r3, [pc, #172]	; (111c <update_n_wake+0xbc>)
    1070:	4d2b      	ldr	r5, [pc, #172]	; (1120 <update_n_wake+0xc0>)
    1072:	8819      	ldrh	r1, [r3, #0]
    1074:	882a      	ldrh	r2, [r5, #0]
    1076:	b289      	uxth	r1, r1
    1078:	428a      	cmp	r2, r1
    107a:	492a      	ldr	r1, [pc, #168]	; (1124 <update_n_wake+0xc4>)
    107c:	d803      	bhi.n	1086 <update_n_wake+0x26>
    107e:	8808      	ldrh	r0, [r1, #0]
    1080:	b280      	uxth	r0, r0
    1082:	4282      	cmp	r2, r0
    1084:	d20d      	bcs.n	10a2 <update_n_wake+0x42>
    1086:	881e      	ldrh	r6, [r3, #0]
    1088:	8808      	ldrh	r0, [r1, #0]
    108a:	b2b6      	uxth	r6, r6
    108c:	b280      	uxth	r0, r0
    108e:	4286      	cmp	r6, r0
    1090:	d236      	bcs.n	1100 <update_n_wake+0xa0>
    1092:	8818      	ldrh	r0, [r3, #0]
    1094:	b280      	uxth	r0, r0
    1096:	4282      	cmp	r2, r0
    1098:	d903      	bls.n	10a2 <update_n_wake+0x42>
    109a:	8808      	ldrh	r0, [r1, #0]
    109c:	b280      	uxth	r0, r0
    109e:	4282      	cmp	r2, r0
    10a0:	d32e      	bcc.n	1100 <update_n_wake+0xa0>
		for_all_tasks (i) {
    10a2:	4a21      	ldr	r2, [pc, #132]	; (1128 <update_n_wake+0xc8>)
    10a4:	6810      	ldr	r0, [r2, #0]
    10a6:	b918      	cbnz	r0, 10b0 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    10a8:	8818      	ldrh	r0, [r3, #0]
    10aa:	4404      	add	r4, r0
    10ac:	802c      	strh	r4, [r5, #0]
    10ae:	e02c      	b.n	110a <update_n_wake+0xaa>
			if (!twaiting (i))
    10b0:	8806      	ldrh	r6, [r0, #0]
    10b2:	0732      	lsls	r2, r6, #28
    10b4:	d51b      	bpl.n	10ee <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10b6:	881f      	ldrh	r7, [r3, #0]
    10b8:	8842      	ldrh	r2, [r0, #2]
    10ba:	b2bf      	uxth	r7, r7
    10bc:	42ba      	cmp	r2, r7
    10be:	d803      	bhi.n	10c8 <update_n_wake+0x68>
    10c0:	880f      	ldrh	r7, [r1, #0]
    10c2:	b2bf      	uxth	r7, r7
    10c4:	42ba      	cmp	r2, r7
    10c6:	d20f      	bcs.n	10e8 <update_n_wake+0x88>
    10c8:	f8b3 c000 	ldrh.w	ip, [r3]
    10cc:	880f      	ldrh	r7, [r1, #0]
    10ce:	fa1f fc8c 	uxth.w	ip, ip
    10d2:	b2bf      	uxth	r7, r7
    10d4:	45bc      	cmp	ip, r7
    10d6:	d20c      	bcs.n	10f2 <update_n_wake+0x92>
    10d8:	881f      	ldrh	r7, [r3, #0]
    10da:	b2bf      	uxth	r7, r7
    10dc:	42ba      	cmp	r2, r7
    10de:	d903      	bls.n	10e8 <update_n_wake+0x88>
    10e0:	880f      	ldrh	r7, [r1, #0]
    10e2:	b2bf      	uxth	r7, r7
    10e4:	42ba      	cmp	r2, r7
    10e6:	d304      	bcc.n	10f2 <update_n_wake+0x92>
				wakeuptm (i);
    10e8:	f026 060f 	bic.w	r6, r6, #15
    10ec:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    10ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    10f0:	e7d9      	b.n	10a6 <update_n_wake+0x46>
				d = i->Timer - znew;
    10f2:	881e      	ldrh	r6, [r3, #0]
    10f4:	1b92      	subs	r2, r2, r6
    10f6:	b292      	uxth	r2, r2
    10f8:	4294      	cmp	r4, r2
    10fa:	bf28      	it	cs
    10fc:	4614      	movcs	r4, r2
    10fe:	e7f6      	b.n	10ee <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    1100:	8818      	ldrh	r0, [r3, #0]
    1102:	1a12      	subs	r2, r2, r0
    1104:	b292      	uxth	r2, r2
    1106:	4294      	cmp	r4, r2
    1108:	d9ce      	bls.n	10a8 <update_n_wake+0x48>
	__pi_old = znew;
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	b29b      	uxth	r3, r3
    110e:	800b      	strh	r3, [r1, #0]
}
    1110:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1114:	f7ff ba10 	b.w	538 <tci_run_delay_timer>
}
    1118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    111a:	bf00      	nop
    111c:	20000b54 	andcs	r0, r0, r4, asr fp
    1120:	20000b48 	andcs	r0, r0, r8, asr #22
    1124:	20000b4a 	andcs	r0, r0, sl, asr #22
    1128:	2000054c 	andcs	r0, r0, ip, asr #10

0000112c <proceed>:
void proceed (word state) {
    112c:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    112e:	4b03      	ldr	r3, [pc, #12]	; (113c <proceed+0x10>)
    1130:	0100      	lsls	r0, r0, #4
    1132:	681b      	ldr	r3, [r3, #0]
    1134:	8018      	strh	r0, [r3, #0]
	release;
    1136:	f7ff fd93 	bl	c60 <__pi_release>
    113a:	bf00      	nop
    113c:	20000b68 	andcs	r0, r0, r8, ror #22

00001140 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1140:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    1142:	4b0a      	ldr	r3, [pc, #40]	; (116c <__pi_wait+0x2c>)
    1144:	681c      	ldr	r4, [r3, #0]
    1146:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	f013 0f04 	tst.w	r3, #4
    114c:	f003 0207 	and.w	r2, r3, #7
    1150:	d003      	beq.n	115a <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    1152:	2005      	movs	r0, #5
    1154:	4906      	ldr	r1, [pc, #24]	; (1170 <__pi_wait+0x30>)
    1156:	f7ff f9c5 	bl	4e4 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    115a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    115e:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1160:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    1162:	8191      	strh	r1, [r2, #12]
    1164:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    1166:	8023      	strh	r3, [r4, #0]
}
    1168:	bd10      	pop	{r4, pc}
    116a:	bf00      	nop
    116c:	20000b68 	andcs	r0, r0, r8, ror #22
    1170:	0000446b 	andeq	r4, r0, fp, ror #8

00001174 <__pi_trigger>:
void __pi_trigger (aword event) {
    1174:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    1176:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <__pi_trigger+0x30>)
    1178:	681a      	ldr	r2, [r3, #0]
    117a:	b192      	cbz	r2, 11a2 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    117c:	4614      	mov	r4, r2
    117e:	2300      	movs	r3, #0
    1180:	f834 1b10 	ldrh.w	r1, [r4], #16
    1184:	f001 0107 	and.w	r1, r1, #7
    1188:	4299      	cmp	r1, r3
    118a:	dd08      	ble.n	119e <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    118c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1190:	3301      	adds	r3, #1
    1192:	4285      	cmp	r5, r0
    1194:	d1f8      	bne.n	1188 <__pi_trigger+0x14>
				wakeupev (i, j);
    1196:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    119a:	889b      	ldrh	r3, [r3, #4]
    119c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    119e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    11a0:	e7eb      	b.n	117a <__pi_trigger+0x6>
}
    11a2:	bd30      	pop	{r4, r5, pc}
    11a4:	2000054c 	andcs	r0, r0, ip, asr #10

000011a8 <__pi_join>:
aword __pi_join (aword pid, word st) {
    11a8:	b510      	push	{r4, lr}
    11aa:	4604      	mov	r4, r0
	for_all_tasks (i) {
    11ac:	4b06      	ldr	r3, [pc, #24]	; (11c8 <__pi_join+0x20>)
    11ae:	681b      	ldr	r3, [r3, #0]
    11b0:	b90b      	cbnz	r3, 11b6 <__pi_join+0xe>
	return 0;
    11b2:	461c      	mov	r4, r3
    11b4:	e004      	b.n	11c0 <__pi_join+0x18>
		if ((aword)i == pid) {
    11b6:	42a3      	cmp	r3, r4
    11b8:	d104      	bne.n	11c4 <__pi_join+0x1c>
			__pi_wait (pid, st);
    11ba:	4620      	mov	r0, r4
    11bc:	f7ff ffc0 	bl	1140 <__pi_wait>
}
    11c0:	4620      	mov	r0, r4
    11c2:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    11c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11c6:	e7f3      	b.n	11b0 <__pi_join+0x8>
    11c8:	2000054c 	andcs	r0, r0, ip, asr #10

000011cc <delay>:
void delay (word d, word state) {
    11cc:	b538      	push	{r3, r4, r5, lr}
    11ce:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    11d0:	4d0a      	ldr	r5, [pc, #40]	; (11fc <delay+0x30>)
    11d2:	682a      	ldr	r2, [r5, #0]
    11d4:	8813      	ldrh	r3, [r2, #0]
    11d6:	f003 0307 	and.w	r3, r3, #7
    11da:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    11de:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    11e0:	2101      	movs	r1, #1
    11e2:	f7ff ff3d 	bl	1060 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    11e6:	4b06      	ldr	r3, [pc, #24]	; (1200 <delay+0x34>)
    11e8:	8818      	ldrh	r0, [r3, #0]
    11ea:	682b      	ldr	r3, [r5, #0]
    11ec:	4404      	add	r4, r0
    11ee:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    11f0:	682a      	ldr	r2, [r5, #0]
    11f2:	8813      	ldrh	r3, [r2, #0]
    11f4:	f043 0308 	orr.w	r3, r3, #8
    11f8:	8013      	strh	r3, [r2, #0]
}
    11fa:	bd38      	pop	{r3, r4, r5, pc}
    11fc:	20000b68 	andcs	r0, r0, r8, ror #22
    1200:	20000b4a 	andcs	r0, r0, sl, asr #22

00001204 <running>:
	if (fun == NULL)
    1204:	4603      	mov	r3, r0
    1206:	b910      	cbnz	r0, 120e <running+0xa>
		return (int) __pi_curr;
    1208:	4b05      	ldr	r3, [pc, #20]	; (1220 <running+0x1c>)
    120a:	6818      	ldr	r0, [r3, #0]
    120c:	4770      	bx	lr
	for_all_tasks (i)
    120e:	4a05      	ldr	r2, [pc, #20]	; (1224 <running+0x20>)
    1210:	6810      	ldr	r0, [r2, #0]
    1212:	b900      	cbnz	r0, 1216 <running+0x12>
}
    1214:	4770      	bx	lr
		if (i->code == fun)
    1216:	6842      	ldr	r2, [r0, #4]
    1218:	429a      	cmp	r2, r3
    121a:	d0fb      	beq.n	1214 <running+0x10>
	for_all_tasks (i)
    121c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    121e:	e7f8      	b.n	1212 <running+0xe>
    1220:	20000b68 	andcs	r0, r0, r8, ror #22
    1224:	2000054c 	andcs	r0, r0, ip, asr #10

00001228 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1228:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    122a:	2000      	movs	r0, #0
    122c:	5c1a      	ldrb	r2, [r3, r0]
    122e:	b902      	cbnz	r2, 1232 <__pi_strlen+0xa>
}
    1230:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1232:	3001      	adds	r0, #1
    1234:	e7fa      	b.n	122c <__pi_strlen+0x4>

00001236 <__pi_memcpy>:
	while (n--)
    1236:	3801      	subs	r0, #1
    1238:	440a      	add	r2, r1
    123a:	4291      	cmp	r1, r2
    123c:	d100      	bne.n	1240 <__pi_memcpy+0xa>
}
    123e:	4770      	bx	lr
		*dest++ = *src++;
    1240:	f811 3b01 	ldrb.w	r3, [r1], #1
    1244:	f800 3f01 	strb.w	r3, [r0, #1]!
    1248:	e7f7      	b.n	123a <__pi_memcpy+0x4>

0000124a <__pi_memset>:
	while (n--)
    124a:	4402      	add	r2, r0
    124c:	4290      	cmp	r0, r2
    124e:	d100      	bne.n	1252 <__pi_memset+0x8>
}
    1250:	4770      	bx	lr
		*dest++ = c;
    1252:	f800 1b01 	strb.w	r1, [r0], #1
    1256:	e7f9      	b.n	124c <__pi_memset+0x2>

00001258 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1258:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    125a:	b119      	cbz	r1, 1264 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    125c:	2003      	movs	r0, #3
    125e:	4905      	ldr	r1, [pc, #20]	; (1274 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1260:	f7ff f940 	bl	4e4 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1264:	4b04      	ldr	r3, [pc, #16]	; (1278 <adddevfunc+0x20>)
    1266:	681a      	ldr	r2, [r3, #0]
    1268:	b112      	cbz	r2, 1270 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    126a:	2004      	movs	r0, #4
    126c:	4901      	ldr	r1, [pc, #4]	; (1274 <adddevfunc+0x1c>)
    126e:	e7f7      	b.n	1260 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1270:	6018      	str	r0, [r3, #0]
}
    1272:	bd08      	pop	{r3, pc}
    1274:	0000446e 	andeq	r4, r0, lr, ror #8
    1278:	20000550 	andcs	r0, r0, r0, asr r5

0000127c <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1280:	4604      	mov	r4, r0
    1282:	4616      	mov	r6, r2
    1284:	461d      	mov	r5, r3
    1286:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128a:	b921      	cbnz	r1, 1296 <io+0x1a>
    128c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1314 <io+0x98>
    1290:	f8d9 3000 	ldr.w	r3, [r9]
    1294:	b91b      	cbnz	r3, 129e <io+0x22>
		syserror (ENODEVICE, "io");
    1296:	2001      	movs	r0, #1
    1298:	491d      	ldr	r1, [pc, #116]	; (1310 <io+0x94>)
    129a:	f7ff f923 	bl	4e4 <__pi_syserror>
	if (len == 0)
    129e:	f1b8 0f00 	cmp.w	r8, #0
    12a2:	d028      	beq.n	12f6 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	4642      	mov	r2, r8
    12a6:	4629      	mov	r1, r5
    12a8:	4630      	mov	r0, r6
    12aa:	4798      	blx	r3
	if (ret >= 0)
    12ac:	2800      	cmp	r0, #0
    12ae:	da23      	bge.n	12f8 <io+0x7c>
	if (ret == -1) {
    12b0:	1c41      	adds	r1, r0, #1
    12b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12b6:	d108      	bne.n	12ca <io+0x4e>
		if (retry == WNONE)
    12b8:	429c      	cmp	r4, r3
    12ba:	d01c      	beq.n	12f6 <io+0x7a>
		iowait (dev, operation, retry);
    12bc:	4621      	mov	r1, r4
    12be:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    12c2:	f7ff ff3d 	bl	1140 <__pi_wait>
			release;
    12c6:	f7ff fccb 	bl	c60 <__pi_release>
	if (ret == -2) {
    12ca:	1c82      	adds	r2, r0, #2
    12cc:	d116      	bne.n	12fc <io+0x80>
		if (retry != WNONE) {
    12ce:	429c      	cmp	r4, r3
    12d0:	f8d9 9000 	ldr.w	r9, [r9]
    12d4:	d00a      	beq.n	12ec <io+0x70>
			iowait (dev, operation, retry);
    12d6:	4621      	mov	r1, r4
    12d8:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    12dc:	f7ff ff30 	bl	1140 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    12e0:	4642      	mov	r2, r8
    12e2:	4629      	mov	r1, r5
    12e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12e8:	47c8      	blx	r9
    12ea:	e7ec      	b.n	12c6 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    12ec:	4642      	mov	r2, r8
    12ee:	4629      	mov	r1, r5
    12f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12f4:	47c8      	blx	r9
		return 0;
    12f6:	2000      	movs	r0, #0
}
    12f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    12fc:	429c      	cmp	r4, r3
    12fe:	d0fa      	beq.n	12f6 <io+0x7a>
		delay (-ret - 2, retry);
    1300:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1304:	30fe      	adds	r0, #254	; 0xfe
    1306:	4621      	mov	r1, r4
    1308:	b280      	uxth	r0, r0
    130a:	f7ff ff5f 	bl	11cc <delay>
		release;
    130e:	e7da      	b.n	12c6 <io+0x4a>
    1310:	00004473 	andeq	r4, r0, r3, ror r4
    1314:	20000550 	andcs	r0, r0, r0, asr r5

00001318 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1318:	4a0d      	ldr	r2, [pc, #52]	; (1350 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    131a:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1320:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1324:	089b      	lsrs	r3, r3, #2
    1326:	1e59      	subs	r1, r3, #1
    1328:	29ff      	cmp	r1, #255	; 0xff
    132a:	d803      	bhi.n	1334 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    132c:	2004      	movs	r0, #4
    132e:	4909      	ldr	r1, [pc, #36]	; (1354 <__pi_malloc_init+0x3c>)
    1330:	f7ff f8d8 	bl	4e4 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1334:	4908      	ldr	r1, [pc, #32]	; (1358 <__pi_malloc_init+0x40>)
    1336:	1d10      	adds	r0, r2, #4
    1338:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133a:	2000      	movs	r0, #0
    133c:	4907      	ldr	r1, [pc, #28]	; (135c <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    133e:	3b02      	subs	r3, #2
    1340:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1342:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1346:	4a06      	ldr	r2, [pc, #24]	; (1360 <__pi_malloc_init+0x48>)
    1348:	6013      	str	r3, [r2, #0]
    134a:	4a06      	ldr	r2, [pc, #24]	; (1364 <__pi_malloc_init+0x4c>)
    134c:	6013      	str	r3, [r2, #0]
}
    134e:	bd08      	pop	{r3, pc}
    1350:	20000b70 	andcs	r0, r0, r0, ror fp
    1354:	00004476 	andeq	r4, r0, r6, ror r4
    1358:	20000560 	andcs	r0, r0, r0, ror #10
    135c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1360:	20000554 	andcs	r0, r0, r4, asr r5
    1364:	2000055c 	andcs	r0, r0, ip, asr r5

00001368 <__pi_free>:
void __pi_free (aword *ch) {
    1368:	b508      	push	{r3, lr}
	if (ch == NULL)
    136a:	b1c8      	cbz	r0, 13a0 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    136c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1370:	2b00      	cmp	r3, #0
    1372:	db03      	blt.n	137c <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1374:	2006      	movs	r0, #6
    1376:	490b      	ldr	r1, [pc, #44]	; (13a4 <__pi_free+0x3c>)
    1378:	f7ff f8b4 	bl	4e4 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    137c:	490a      	ldr	r1, [pc, #40]	; (13a8 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    137e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1382:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1384:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1388:	4413      	add	r3, r2
    138a:	600b      	str	r3, [r1, #0]
	QFREE;
    138c:	f7ff fdfa 	bl	f84 <qfree>
	if (mevent [MA_NP] . nwait) {
    1390:	4806      	ldr	r0, [pc, #24]	; (13ac <__pi_free+0x44>)
    1392:	7803      	ldrb	r3, [r0, #0]
    1394:	b123      	cbz	r3, 13a0 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1396:	f7ff feed 	bl	1174 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    139a:	7803      	ldrb	r3, [r0, #0]
    139c:	3b01      	subs	r3, #1
    139e:	7003      	strb	r3, [r0, #0]
}
    13a0:	bd08      	pop	{r3, pc}
    13a2:	bf00      	nop
    13a4:	0000447b 	andeq	r4, r0, fp, ror r4
    13a8:	20000554 	andcs	r0, r0, r4, asr r5
    13ac:	20000558 	andcs	r0, r0, r8, asr r5

000013b0 <kill>:
void kill (aword pid) {
    13b0:	b510      	push	{r4, lr}
	if (pid == 0)
    13b2:	b908      	cbnz	r0, 13b8 <kill+0x8>
		pid = (aword) __pi_curr;
    13b4:	4b0f      	ldr	r3, [pc, #60]	; (13f4 <kill+0x44>)
    13b6:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    13b8:	2200      	movs	r2, #0
	for_all_tasks (i) {
    13ba:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <kill+0x48>)
    13bc:	681c      	ldr	r4, [r3, #0]
    13be:	b91c      	cbnz	r4, 13c8 <kill+0x18>
	syserror (EREQPAR, "kpi");
    13c0:	2003      	movs	r0, #3
    13c2:	490e      	ldr	r1, [pc, #56]	; (13fc <kill+0x4c>)
    13c4:	f7ff f88e 	bl	4e4 <__pi_syserror>
		if ((aword)i == pid) {
    13c8:	4284      	cmp	r4, r0
    13ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    13cc:	d10e      	bne.n	13ec <kill+0x3c>
			if (j == NULL)
    13ce:	b95a      	cbnz	r2, 13e8 <kill+0x38>
				__PCB = i->Next;
    13d0:	6019      	str	r1, [r3, #0]
			killev (i);
    13d2:	4620      	mov	r0, r4
    13d4:	f7ff fdb8 	bl	f48 <killev>
			ufree (i);
    13d8:	f7ff ffc6 	bl	1368 <__pi_free>
			if (i == __pi_curr)
    13dc:	4b05      	ldr	r3, [pc, #20]	; (13f4 <kill+0x44>)
    13de:	681b      	ldr	r3, [r3, #0]
    13e0:	42a3      	cmp	r3, r4
    13e2:	d106      	bne.n	13f2 <kill+0x42>
				release;
    13e4:	f7ff fc3c 	bl	c60 <__pi_release>
				j->Next = i->Next;
    13e8:	62d1      	str	r1, [r2, #44]	; 0x2c
    13ea:	e7f2      	b.n	13d2 <kill+0x22>
    13ec:	4622      	mov	r2, r4
    13ee:	460c      	mov	r4, r1
    13f0:	e7e5      	b.n	13be <kill+0xe>
}
    13f2:	bd10      	pop	{r4, pc}
    13f4:	20000b68 	andcs	r0, r0, r8, ror #22
    13f8:	2000054c 	andcs	r0, r0, ip, asr #10
    13fc:	00004480 	andeq	r4, r0, r0, lsl #9

00001400 <__pi_malloc>:
	if (size < 8)
    1400:	2807      	cmp	r0, #7
		_size = 2;
    1402:	bf98      	it	ls
    1404:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    1406:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1408:	4b21      	ldr	r3, [pc, #132]	; (1490 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    140a:	bf88      	it	hi
    140c:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    140e:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1410:	4920      	ldr	r1, [pc, #128]	; (1494 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1412:	bf88      	it	hi
    1414:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1416:	b94c      	cbnz	r4, 142c <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    1418:	4a1f      	ldr	r2, [pc, #124]	; (1498 <__pi_malloc+0x98>)
    141a:	7853      	ldrb	r3, [r2, #1]
    141c:	2bff      	cmp	r3, #255	; 0xff
    141e:	d001      	beq.n	1424 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1420:	3301      	adds	r3, #1
    1422:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1424:	2200      	movs	r2, #0
    1426:	4b1d      	ldr	r3, [pc, #116]	; (149c <__pi_malloc+0x9c>)
    1428:	601a      	str	r2, [r3, #0]
	return chunk;
    142a:	e02f      	b.n	148c <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    142c:	6862      	ldr	r2, [r4, #4]
    142e:	428a      	cmp	r2, r1
    1430:	d003      	beq.n	143a <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1432:	2006      	movs	r0, #6
    1434:	491a      	ldr	r1, [pc, #104]	; (14a0 <__pi_malloc+0xa0>)
    1436:	f7ff f855 	bl	4e4 <__pi_syserror>
		if (m_size (chunk) >= _size)
    143a:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    143e:	4285      	cmp	r5, r0
    1440:	d202      	bcs.n	1448 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1442:	4623      	mov	r3, r4
    1444:	4614      	mov	r4, r2
    1446:	e7e6      	b.n	1416 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1448:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    144e:	1a1b      	subs	r3, r3, r0
    1450:	2b08      	cmp	r3, #8
    1452:	d909      	bls.n	1468 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1454:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1458:	3001      	adds	r0, #1
    145a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    145e:	3b01      	subs	r3, #1
    1460:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1464:	f7ff fd8e 	bl	f84 <qfree>
		mevent [MA_NP] . nfail = 0;
    1468:	2200      	movs	r2, #0
    146a:	4b0b      	ldr	r3, [pc, #44]	; (1498 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    146c:	490d      	ldr	r1, [pc, #52]	; (14a4 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    146e:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1470:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1474:	680b      	ldr	r3, [r1, #0]
    1476:	1a9b      	subs	r3, r3, r2
    1478:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    147a:	4908      	ldr	r1, [pc, #32]	; (149c <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    147c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1480:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1482:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1486:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1488:	bf38      	it	cc
    148a:	600b      	strcc	r3, [r1, #0]
}
    148c:	4620      	mov	r0, r4
    148e:	bd38      	pop	{r3, r4, r5, pc}
    1490:	20000560 	andcs	r0, r0, r0, ror #10
    1494:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1498:	20000558 	andcs	r0, r0, r8, asr r5
    149c:	2000055c 	andcs	r0, r0, ip, asr r5
    14a0:	00004484 	andeq	r4, r0, r4, lsl #9
    14a4:	20000554 	andcs	r0, r0, r4, asr r5

000014a8 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    14a8:	b538      	push	{r3, r4, r5, lr}
    14aa:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14ac:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    14ae:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	f7ff ffa6 	bl	1400 <__pi_malloc>
    14b4:	2300      	movs	r3, #0
    14b6:	b138      	cbz	r0, 14c8 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    14b8:	4a07      	ldr	r2, [pc, #28]	; (14d8 <__pi_fork+0x30>)
	i->Status = 0;
    14ba:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    14bc:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    14be:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    14c0:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    14c4:	b90b      	cbnz	r3, 14ca <__pi_fork+0x22>
			__PCB = i;
    14c6:	6010      	str	r0, [r2, #0]
}
    14c8:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    14ca:	461a      	mov	r2, r3
    14cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14ce:	2b00      	cmp	r3, #0
    14d0:	d1fb      	bne.n	14ca <__pi_fork+0x22>
			j->Next = i;
    14d2:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    14d4:	e7f8      	b.n	14c8 <__pi_fork+0x20>
    14d6:	bf00      	nop
    14d8:	2000054c 	andcs	r0, r0, ip, asr #10

000014dc <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    14dc:	4a04      	ldr	r2, [pc, #16]	; (14f0 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    14de:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    14e0:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    14e2:	4803      	ldr	r0, [pc, #12]	; (14f0 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    14e4:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    14e6:	bf1c      	itt	ne
    14e8:	3301      	addne	r3, #1
    14ea:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    14ec:	f7ff be28 	b.w	1140 <__pi_wait>
    14f0:	20000558 	andcs	r0, r0, r8, asr r5

000014f4 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    14f4:	b40f      	push	{r0, r1, r2, r3}
    14f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    14fa:	ab0a      	add	r3, sp, #40	; 0x28
    14fc:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1500:	2015      	movs	r0, #21
	va_start (ap, mess);
    1502:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1504:	4b46      	ldr	r3, [pc, #280]	; (1620 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    1506:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    1508:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    150a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1628 <diag+0x134>
	diag_disable_int (a, is);
    150e:	695b      	ldr	r3, [r3, #20]
    1510:	4798      	blx	r3
	while (*mess != '\0') {
    1512:	7820      	ldrb	r0, [r4, #0]
    1514:	b998      	cbnz	r0, 153e <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    1516:	200d      	movs	r0, #13
    1518:	f7ff fd74 	bl	1004 <dgout>
	dgout ('\n');
    151c:	200a      	movs	r0, #10
    151e:	f7ff fd71 	bl	1004 <dgout>
    1522:	4a40      	ldr	r2, [pc, #256]	; (1624 <diag+0x130>)
    1524:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    1526:	071b      	lsls	r3, r3, #28
    1528:	d4fc      	bmi.n	1524 <diag+0x30>
	diag_enable_int (a, is);
    152a:	4b3d      	ldr	r3, [pc, #244]	; (1620 <diag+0x12c>)
    152c:	2015      	movs	r0, #21
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	691b      	ldr	r3, [r3, #16]
    1532:	4798      	blx	r3
}
    1534:	b003      	add	sp, #12
    1536:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    153a:	b004      	add	sp, #16
    153c:	4770      	bx	lr
		if (*mess == '%') {
    153e:	2825      	cmp	r0, #37	; 0x25
    1540:	f104 0601 	add.w	r6, r4, #1
    1544:	d169      	bne.n	161a <diag+0x126>
			if (*mess == 'l') {
    1546:	9b01      	ldr	r3, [sp, #4]
    1548:	7862      	ldrb	r2, [r4, #1]
    154a:	f853 1b04 	ldr.w	r1, [r3], #4
    154e:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1550:	bf08      	it	eq
    1552:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1554:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1556:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1558:	bf0c      	ite	eq
    155a:	2520      	moveq	r5, #32
				bc = 16;
    155c:	2510      	movne	r5, #16
			switch (*mess) {
    155e:	2b75      	cmp	r3, #117	; 0x75
    1560:	d04e      	beq.n	1600 <diag+0x10c>
    1562:	d80a      	bhi.n	157a <diag+0x86>
    1564:	2b64      	cmp	r3, #100	; 0x64
    1566:	d01c      	beq.n	15a2 <diag+0xae>
    1568:	2b73      	cmp	r3, #115	; 0x73
    156a:	d052      	beq.n	1612 <diag+0x11e>
				dgout ('%');
    156c:	2025      	movs	r0, #37	; 0x25
    156e:	f7ff fd49 	bl	1004 <dgout>
				dgout (*mess);
    1572:	7830      	ldrb	r0, [r6, #0]
    1574:	f7ff fd46 	bl	1004 <dgout>
    1578:	e010      	b.n	159c <diag+0xa8>
			switch (*mess) {
    157a:	2b78      	cmp	r3, #120	; 0x78
    157c:	d1f6      	bne.n	156c <diag+0x78>
    157e:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1580:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 162c <diag+0x138>
					i += 4;
    1584:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1586:	1b2b      	subs	r3, r5, r4
    1588:	fa21 f303 	lsr.w	r3, r1, r3
    158c:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1590:	f819 0003 	ldrb.w	r0, [r9, r3]
    1594:	f7ff fd36 	bl	1004 <dgout>
				while (i < bc) {
    1598:	42a5      	cmp	r5, r4
    159a:	dcf3      	bgt.n	1584 <diag+0x90>
			mess++;
    159c:	3601      	adds	r6, #1
					d /= 10;
    159e:	4634      	mov	r4, r6
    15a0:	e7b7      	b.n	1512 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    15a2:	1e6b      	subs	r3, r5, #1
    15a4:	fa21 f303 	lsr.w	r3, r1, r3
    15a8:	07da      	lsls	r2, r3, #31
    15aa:	d509      	bpl.n	15c0 <diag+0xcc>
					dgout ('-');
    15ac:	202d      	movs	r0, #45	; 0x2d
    15ae:	f7ff fd29 	bl	1004 <dgout>
					if (bc == 16)
    15b2:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    15b4:	bf04      	itt	eq
    15b6:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    15ba:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    15be:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    15c0:	f242 7410 	movw	r4, #10000	; 0x2710
    15c4:	2d10      	cmp	r5, #16
    15c6:	bf18      	it	ne
    15c8:	4644      	movne	r4, r8
					v = (word) (val / d);
    15ca:	fbb1 f5f4 	udiv	r5, r1, r4
    15ce:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    15d0:	b935      	cbnz	r5, 15e0 <diag+0xec>
    15d2:	2c01      	cmp	r4, #1
    15d4:	d004      	beq.n	15e0 <diag+0xec>
					d /= 10;
    15d6:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    15da:	e7f6      	b.n	15ca <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    15dc:	4c12      	ldr	r4, [pc, #72]	; (1628 <diag+0x134>)
    15de:	e7f4      	b.n	15ca <diag+0xd6>
					dgout (v + '0');
    15e0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    15e4:	b280      	uxth	r0, r0
    15e6:	f7ff fd0d 	bl	1004 <dgout>
					if (d == 0) break;
    15ea:	2c09      	cmp	r4, #9
					d /= 10;
    15ec:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    15f0:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    15f4:	d9d2      	bls.n	159c <diag+0xa8>
					v = (word) (val / d);
    15f6:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    15fa:	461c      	mov	r4, r3
					v = (word) (val / d);
    15fc:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    15fe:	e7ef      	b.n	15e0 <diag+0xec>
				if (bc == 16)
    1600:	2d10      	cmp	r5, #16
    1602:	d1eb      	bne.n	15dc <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1604:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    1608:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    160a:	e7de      	b.n	15ca <diag+0xd6>
					dgout (*s);
    160c:	f7ff fcfa 	bl	1004 <dgout>
					s++;
    1610:	3101      	adds	r1, #1
				while (*s != '\0') {
    1612:	7808      	ldrb	r0, [r1, #0]
    1614:	2800      	cmp	r0, #0
    1616:	d1f9      	bne.n	160c <diag+0x118>
    1618:	e7c0      	b.n	159c <diag+0xa8>
			dgout (*mess++);
    161a:	f7ff fcf3 	bl	1004 <dgout>
    161e:	e7be      	b.n	159e <diag+0xaa>
    1620:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1624:	40001018 	andmi	r1, r0, r8, lsl r0
    1628:	3b9aca00 	blcc	fe6b3e30 <_estack+0xde6aee30>
    162c:	00004489 	andeq	r4, r0, r9, lsl #9

00001630 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1630:	f243 0039 	movw	r0, #12345	; 0x3039
    1634:	4a04      	ldr	r2, [pc, #16]	; (1648 <lrnd+0x18>)
    1636:	4905      	ldr	r1, [pc, #20]	; (164c <lrnd+0x1c>)
    1638:	6813      	ldr	r3, [r2, #0]
    163a:	fb01 0303 	mla	r3, r1, r3, r0
    163e:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1640:	4a03      	ldr	r2, [pc, #12]	; (1650 <lrnd+0x20>)
    1642:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1644:	4058      	eors	r0, r3
    1646:	4770      	bx	lr
    1648:	20000004 	andcs	r0, r0, r4
    164c:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1650:	20000b44 	andcs	r0, r0, r4, asr #22

00001654 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1654:	b510      	push	{r4, lr}
    1656:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    1658:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165a:	b280      	uxth	r0, r0
    165c:	f7ff fed0 	bl	1400 <__pi_malloc>
    1660:	b110      	cbz	r0, 1668 <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1662:	2300      	movs	r3, #0
	p -> length = size;
    1664:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    1666:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    1668:	bd10      	pop	{r4, pc}

0000166a <deq>:
	if (p->attributes.b.queued) {
    166a:	7a83      	ldrb	r3, [r0, #10]
    166c:	07db      	lsls	r3, r3, #31
    166e:	d508      	bpl.n	1682 <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1670:	e9d0 2300 	ldrd	r2, r3, [r0]
    1674:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1676:	6802      	ldr	r2, [r0, #0]
    1678:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    167a:	7a83      	ldrb	r3, [r0, #10]
    167c:	f36f 0300 	bfc	r3, #0, #1
    1680:	7283      	strb	r3, [r0, #10]
}
    1682:	4770      	bx	lr

00001684 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1684:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    1686:	f7ff fff0 	bl	166a <deq>
}
    168a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    168e:	f7ff be6b 	b.w	1368 <__pi_free>
	...

00001694 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1694:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    1696:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    169a:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    169c:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    169e:	d503      	bpl.n	16a8 <enq+0x14>
    16a0:	200a      	movs	r0, #10
    16a2:	490e      	ldr	r1, [pc, #56]	; (16dc <enq+0x48>)
    16a4:	f7fe ff1e 	bl	4e4 <__pi_syserror>
	if (q_empty (q))
    16a8:	6803      	ldr	r3, [r0, #0]
    16aa:	4283      	cmp	r3, r0
    16ac:	d101      	bne.n	16b2 <enq+0x1e>
		trigger (q);
    16ae:	f7ff fd61 	bl	1174 <__pi_trigger>
	if (p->attributes.b.urgent) {
    16b2:	7aa3      	ldrb	r3, [r4, #10]
    16b4:	075b      	lsls	r3, r3, #29
    16b6:	d50a      	bpl.n	16ce <enq+0x3a>
		p->u.bqueue.next = q->next;
    16b8:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    16ba:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    16be:	682b      	ldr	r3, [r5, #0]
    16c0:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    16c2:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    16c4:	7aa3      	ldrb	r3, [r4, #10]
    16c6:	f043 0301 	orr.w	r3, r3, #1
    16ca:	72a3      	strb	r3, [r4, #10]
}
    16cc:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    16ce:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    16d0:	686b      	ldr	r3, [r5, #4]
    16d2:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    16d4:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    16d6:	606c      	str	r4, [r5, #4]
    16d8:	e7f4      	b.n	16c4 <enq+0x30>
    16da:	bf00      	nop
    16dc:	00004499 	muleq	r0, r9, r4

000016e0 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e0:	b510      	push	{r4, lr}
    16e2:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    16e4:	f7ff ffc1 	bl	166a <deq>
	switch (dv) {
    16e8:	3901      	subs	r1, #1
    16ea:	2904      	cmp	r1, #4
    16ec:	d832      	bhi.n	1754 <dispose+0x74>
    16ee:	e8df f001 	tbb	[pc, r1]
    16f2:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    16f6:	7a830019 	bvc	fe0c1762 <_estack+0xde0bc762>
			p->attributes.b.urgent = 1;
    16fa:	f043 0304 	orr.w	r3, r3, #4
    16fe:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1700:	8963      	ldrh	r3, [r4, #10]
    1702:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    1706:	2b07      	cmp	r3, #7
    1708:	d803      	bhi.n	1712 <dispose+0x32>
    170a:	4a13      	ldr	r2, [pc, #76]	; (1758 <dispose+0x78>)
    170c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1710:	b918      	cbnz	r0, 171a <dispose+0x3a>
    1712:	4912      	ldr	r1, [pc, #72]	; (175c <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1714:	200a      	movs	r0, #10
    1716:	f7fe fee5 	bl	4e4 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    171a:	4621      	mov	r1, r4
}
    171c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1720:	f7ff bfb8 	b.w	1694 <enq>
			p->attributes.b.urgent = 1;
    1724:	7a83      	ldrb	r3, [r0, #10]
    1726:	f043 0304 	orr.w	r3, r3, #4
    172a:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    172c:	7ae2      	ldrb	r2, [r4, #11]
    172e:	2a5f      	cmp	r2, #95	; 0x5f
    1730:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1734:	d803      	bhi.n	173e <dispose+0x5e>
    1736:	4a0a      	ldr	r2, [pc, #40]	; (1760 <dispose+0x80>)
    1738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    173c:	b90a      	cbnz	r2, 1742 <dispose+0x62>
    173e:	4909      	ldr	r1, [pc, #36]	; (1764 <dispose+0x84>)
    1740:	e7e8      	b.n	1714 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1742:	4a09      	ldr	r2, [pc, #36]	; (1768 <dispose+0x88>)
    1744:	4621      	mov	r1, r4
    1746:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    174a:	e7e7      	b.n	171c <dispose+0x3c>
}
    174c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1750:	f7ff bf98 	b.w	1684 <rlp>
}
    1754:	bd10      	pop	{r4, pc}
    1756:	bf00      	nop
    1758:	20000564 	andcs	r0, r0, r4, ror #10
    175c:	0000449f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1760:	20000590 	mulcs	r0, r0, r5
    1764:	000044ab 	andeq	r4, r0, fp, lsr #9
    1768:	20000584 	andcs	r0, r0, r4, lsl #11

0000176c <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    176c:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    176e:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1772:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    1776:	0792      	lsls	r2, r2, #30
    1778:	d522      	bpl.n	17c0 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    177a:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    177e:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1782:	2a07      	cmp	r2, #7
    1784:	d803      	bhi.n	178e <tcv_endp+0x22>
    1786:	4911      	ldr	r1, [pc, #68]	; (17cc <tcv_endp+0x60>)
    1788:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    178c:	b91a      	cbnz	r2, 1796 <tcv_endp+0x2a>
    178e:	4910      	ldr	r1, [pc, #64]	; (17d0 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1790:	200a      	movs	r0, #10
    1792:	f7fe fea7 	bl	4e4 <__pi_syserror>
    1796:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    179a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    179e:	2b02      	cmp	r3, #2
    17a0:	d805      	bhi.n	17ae <tcv_endp+0x42>
    17a2:	4a0c      	ldr	r2, [pc, #48]	; (17d4 <tcv_endp+0x68>)
    17a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    17a8:	b10b      	cbz	r3, 17ae <tcv_endp+0x42>
    17aa:	691b      	ldr	r3, [r3, #16]
    17ac:	b90b      	cbnz	r3, 17b2 <tcv_endp+0x46>
    17ae:	490a      	ldr	r1, [pc, #40]	; (17d8 <tcv_endp+0x6c>)
    17b0:	e7ee      	b.n	1790 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b2:	4798      	blx	r3
    17b4:	4601      	mov	r1, r0
    17b6:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    17b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    17bc:	f7ff bf90 	b.w	16e0 <dispose>
		rlp (b);
    17c0:	4620      	mov	r0, r4
}
    17c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    17c6:	f7ff bf5d 	b.w	1684 <rlp>
    17ca:	bf00      	nop
    17cc:	20000564 	andcs	r0, r0, r4, ror #10
    17d0:	000044b7 			; <UNDEFINED> instruction: 0x000044b7
    17d4:	200005a8 	andcs	r0, r0, r8, lsr #11
    17d8:	000044bd 			; <UNDEFINED> instruction: 0x000044bd

000017dc <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17dc:	b40c      	push	{r2, r3}
    17de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    17e2:	ab0a      	add	r3, sp, #40	; 0x28
    17e4:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17e8:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17ea:	460f      	mov	r7, r1
	va_start (ap, plid);
    17ec:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17ee:	d80b      	bhi.n	1808 <tcv_open+0x2c>
    17f0:	4b24      	ldr	r3, [pc, #144]	; (1884 <tcv_open+0xa8>)
    17f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    17f6:	b13b      	cbz	r3, 1808 <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17f8:	f1b8 0f02 	cmp.w	r8, #2
    17fc:	d804      	bhi.n	1808 <tcv_open+0x2c>
    17fe:	4b22      	ldr	r3, [pc, #136]	; (1888 <tcv_open+0xac>)
    1800:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1804:	4699      	mov	r9, r3
    1806:	b91a      	cbnz	r2, 1810 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    1808:	2001      	movs	r0, #1
    180a:	4920      	ldr	r1, [pc, #128]	; (188c <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    180c:	f7fe fe6a 	bl	4e4 <__pi_syserror>
	attp.b.outgoing = 1;
    1810:	f008 0307 	and.w	r3, r8, #7
    1814:	029b      	lsls	r3, r3, #10
    1816:	f043 0302 	orr.w	r3, r3, #2
    181a:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    181e:	4b1c      	ldr	r3, [pc, #112]	; (1890 <tcv_open+0xb4>)
    1820:	2600      	movs	r6, #0
    1822:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    1824:	f853 2b04 	ldr.w	r2, [r3], #4
    1828:	b312      	cbz	r2, 1870 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    182a:	3601      	adds	r6, #1
    182c:	2e08      	cmp	r6, #8
    182e:	d1f9      	bne.n	1824 <tcv_open+0x48>
		return ERROR;
    1830:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    1834:	4630      	mov	r0, r6
    1836:	b002      	add	sp, #8
    1838:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    183c:	b002      	add	sp, #8
    183e:	4770      	bx	lr
	s->attpattern.b.session = fd;
    1840:	462b      	mov	r3, r5
    1842:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    1846:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    184a:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    184c:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1850:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    1854:	681b      	ldr	r3, [r3, #0]
    1856:	b913      	cbnz	r3, 185e <tcv_open+0x82>
    1858:	200a      	movs	r0, #10
    185a:	490e      	ldr	r1, [pc, #56]	; (1894 <tcv_open+0xb8>)
    185c:	e7d6      	b.n	180c <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    185e:	4631      	mov	r1, r6
    1860:	4638      	mov	r0, r7
    1862:	9a01      	ldr	r2, [sp, #4]
    1864:	4798      	blx	r3
    1866:	2800      	cmp	r0, #0
    1868:	d1e2      	bne.n	1830 <tcv_open+0x54>
	descriptors [fd] = s;
    186a:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    186e:	e7e1      	b.n	1834 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1870:	200c      	movs	r0, #12
    1872:	f7ff fdc5 	bl	1400 <__pi_malloc>
	if (s == NULL)
    1876:	4604      	mov	r4, r0
    1878:	2800      	cmp	r0, #0
    187a:	d1e1      	bne.n	1840 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    187c:	2006      	movs	r0, #6
    187e:	4906      	ldr	r1, [pc, #24]	; (1898 <tcv_open+0xbc>)
    1880:	e7c4      	b.n	180c <tcv_open+0x30>
    1882:	bf00      	nop
    1884:	20000584 	andcs	r0, r0, r4, lsl #11
    1888:	200005a8 	andcs	r0, r0, r8, lsr #11
    188c:	000044c3 	andeq	r4, r0, r3, asr #9
    1890:	20000564 	andcs	r0, r0, r4, ror #10
    1894:	000044cf 	andeq	r4, r0, pc, asr #9
    1898:	000044c9 	andeq	r4, r0, r9, asr #9

0000189c <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    189c:	2802      	cmp	r0, #2
    189e:	d809      	bhi.n	18b4 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a0:	4b06      	ldr	r3, [pc, #24]	; (18bc <tcv_plug+0x20>)
    18a2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18a6:	b10a      	cbz	r2, 18ac <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a8:	428a      	cmp	r2, r1
    18aa:	d103      	bne.n	18b4 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    18ac:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    18b0:	2000      	movs	r0, #0
    18b2:	4770      	bx	lr
		return ERROR;
    18b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    18b8:	4770      	bx	lr
    18ba:	bf00      	nop
    18bc:	200005a8 	andcs	r0, r0, r8, lsr #11

000018c0 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    18c0:	2908      	cmp	r1, #8
								Boolean urg) {
    18c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18c4:	4605      	mov	r5, r0
    18c6:	4614      	mov	r4, r2
    18c8:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    18ca:	d803      	bhi.n	18d4 <tcv_wnps+0x14>
    18cc:	4b26      	ldr	r3, [pc, #152]	; (1968 <tcv_wnps+0xa8>)
    18ce:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    18d2:	b91f      	cbnz	r7, 18dc <tcv_wnps+0x1c>
    18d4:	4925      	ldr	r1, [pc, #148]	; (196c <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    18d6:	200a      	movs	r0, #10
    18d8:	f7fe fe04 	bl	4e4 <__pi_syserror>
    18dc:	7a7b      	ldrb	r3, [r7, #9]
    18de:	f3c3 0382 	ubfx	r3, r3, #2, #3
    18e2:	2b02      	cmp	r3, #2
    18e4:	d805      	bhi.n	18f2 <tcv_wnps+0x32>
    18e6:	4a22      	ldr	r2, [pc, #136]	; (1970 <tcv_wnps+0xb0>)
    18e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18ec:	b10b      	cbz	r3, 18f2 <tcv_wnps+0x32>
    18ee:	68db      	ldr	r3, [r3, #12]
    18f0:	b90b      	cbnz	r3, 18f6 <tcv_wnps+0x36>
    18f2:	4920      	ldr	r1, [pc, #128]	; (1974 <tcv_wnps+0xb4>)
    18f4:	e7ef      	b.n	18d6 <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    18f6:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18fa:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    18fc:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1900:	a901      	add	r1, sp, #4
    1902:	4798      	blx	r3
    1904:	b158      	cbz	r0, 191e <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    1906:	f64f 73ff 	movw	r3, #65535	; 0xffff
    190a:	429d      	cmp	r5, r3
    190c:	d102      	bne.n	1914 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    190e:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    1910:	b003      	add	sp, #12
    1912:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    1914:	4629      	mov	r1, r5
    1916:	f7ff fc13 	bl	1140 <__pi_wait>
			release;
    191a:	f7ff f9a1 	bl	c60 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    191e:	7a3b      	ldrb	r3, [r7, #8]
    1920:	07db      	lsls	r3, r3, #31
    1922:	d501      	bpl.n	1928 <tcv_wnps+0x68>
    1924:	4914      	ldr	r1, [pc, #80]	; (1978 <tcv_wnps+0xb8>)
    1926:	e7d6      	b.n	18d6 <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1928:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    192c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1930:	b2a4      	uxth	r4, r4
    1932:	4418      	add	r0, r3
    1934:	4420      	add	r0, r4
    1936:	b280      	uxth	r0, r0
    1938:	f7ff fe8c 	bl	1654 <apb>
    193c:	b938      	cbnz	r0, 194e <tcv_wnps+0x8e>
		if (state != WNONE) {
    193e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1942:	429d      	cmp	r5, r3
    1944:	d0e3      	beq.n	190e <tcv_wnps+0x4e>
			tmwait (state);
    1946:	4628      	mov	r0, r5
    1948:	f7ff fdc8 	bl	14dc <__pi_waitmem>
    194c:	e7e5      	b.n	191a <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    194e:	893b      	ldrh	r3, [r7, #8]
    1950:	8143      	strh	r3, [r0, #10]
	if (urg)
    1952:	b11e      	cbz	r6, 195c <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    1954:	7a83      	ldrb	r3, [r0, #10]
    1956:	f043 0304 	orr.w	r3, r3, #4
    195a:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    195c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    1960:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    1962:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    1964:	300c      	adds	r0, #12
    1966:	e7d3      	b.n	1910 <tcv_wnps+0x50>
    1968:	20000564 	andcs	r0, r0, r4, ror #10
    196c:	000044d5 	ldrdeq	r4, [r0], -r5
    1970:	200005a8 	andcs	r0, r0, r8, lsr #11
    1974:	000044db 	ldrdeq	r4, [r0], -fp
    1978:	000044e1 	andeq	r4, r0, r1, ror #9

0000197c <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    197c:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    197e:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	4608      	mov	r0, r1
    1982:	b510      	push	{r4, lr}
    1984:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    1986:	d803      	bhi.n	1990 <tcvp_control+0x14>
    1988:	4a05      	ldr	r2, [pc, #20]	; (19a0 <tcvp_control+0x24>)
    198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    198e:	b91b      	cbnz	r3, 1998 <tcvp_control+0x1c>
    1990:	200a      	movs	r0, #10
    1992:	4904      	ldr	r1, [pc, #16]	; (19a4 <tcvp_control+0x28>)
    1994:	f7fe fda6 	bl	4e4 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    1998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    199c:	4718      	bx	r3
    199e:	bf00      	nop
    19a0:	20000590 	mulcs	r0, r0, r5
    19a4:	000044e7 	andeq	r4, r0, r7, ror #9

000019a8 <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19a8:	b508      	push	{r3, lr}
	if (opt < 0) {
    19aa:	1e0b      	subs	r3, r1, #0
    19ac:	da11      	bge.n	19d2 <tcv_control+0x2a>
		if (fd < 0)
    19ae:	2800      	cmp	r0, #0
    19b0:	db1f      	blt.n	19f2 <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    19b2:	3301      	adds	r3, #1
    19b4:	d107      	bne.n	19c6 <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    19b6:	2802      	cmp	r0, #2
    19b8:	dc1b      	bgt.n	19f2 <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    19ba:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <tcv_control+0x50>)
    19bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19c0:	b100      	cbz	r0, 19c4 <tcv_control+0x1c>
			return p->tcv_info;
    19c2:	69c0      	ldr	r0, [r0, #28]
}
    19c4:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    19c6:	2802      	cmp	r0, #2
    19c8:	dc13      	bgt.n	19f2 <tcv_control+0x4a>
		return physinfo [fd];
    19ca:	4b0c      	ldr	r3, [pc, #48]	; (19fc <tcv_control+0x54>)
    19cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19d0:	e7f8      	b.n	19c4 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    19d2:	2808      	cmp	r0, #8
    19d4:	d803      	bhi.n	19de <tcv_control+0x36>
    19d6:	4b0a      	ldr	r3, [pc, #40]	; (1a00 <tcv_control+0x58>)
    19d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    19dc:	b91b      	cbnz	r3, 19e6 <tcv_control+0x3e>
    19de:	200a      	movs	r0, #10
    19e0:	4908      	ldr	r1, [pc, #32]	; (1a04 <tcv_control+0x5c>)
    19e2:	f7fe fd7f 	bl	4e4 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19e6:	7a58      	ldrb	r0, [r3, #9]
}
    19e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19ec:	0940      	lsrs	r0, r0, #5
    19ee:	f7ff bfc5 	b.w	197c <tcvp_control>
			return 0;
    19f2:	2000      	movs	r0, #0
    19f4:	e7e6      	b.n	19c4 <tcv_control+0x1c>
    19f6:	bf00      	nop
    19f8:	200005a8 	andcs	r0, r0, r8, lsr #11
    19fc:	2000059c 	mulcs	r0, ip, r5
    1a00:	20000564 	andcs	r0, r0, r4, ror #10
    1a04:	000044ed 	andeq	r4, r0, sp, ror #9

00001a08 <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a0a:	b280      	uxth	r0, r0
    1a0c:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    1a0e:	460e      	mov	r6, r1
    1a10:	b309      	cbz	r1, 1a56 <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    1a12:	1c53      	adds	r3, r2, #1
    1a14:	d103      	bne.n	1a1e <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    1a16:	2003      	movs	r0, #3
    1a18:	4912      	ldr	r1, [pc, #72]	; (1a64 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    1a1a:	f7fe fd63 	bl	4e4 <__pi_syserror>
    1a1e:	2a08      	cmp	r2, #8
    1a20:	d803      	bhi.n	1a2a <tcvp_new+0x22>
    1a22:	4f11      	ldr	r7, [pc, #68]	; (1a68 <tcvp_new+0x60>)
    1a24:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    1a28:	b913      	cbnz	r3, 1a30 <tcvp_new+0x28>
    1a2a:	200a      	movs	r0, #10
    1a2c:	490f      	ldr	r1, [pc, #60]	; (1a6c <tcvp_new+0x64>)
    1a2e:	e7f4      	b.n	1a1a <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    1a30:	f7ff fe10 	bl	1654 <apb>
    1a34:	4604      	mov	r4, r0
    1a36:	b908      	cbnz	r0, 1a3c <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    1a38:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    1a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    1a3c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    1a40:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    1a42:	891b      	ldrh	r3, [r3, #8]
    1a44:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    1a46:	f36f 0341 	bfc	r3, #1, #1
    1a4a:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    1a4c:	f7ff fe48 	bl	16e0 <dispose>
			return (address)(p + 1);
    1a50:	f104 000c 	add.w	r0, r4, #12
    1a54:	e7f1      	b.n	1a3a <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    1a56:	f7ff fdfd 	bl	1654 <apb>
    1a5a:	2800      	cmp	r0, #0
    1a5c:	d0ec      	beq.n	1a38 <tcvp_new+0x30>
		return (address)(p + 1);
    1a5e:	300c      	adds	r0, #12
    1a60:	e7eb      	b.n	1a3a <tcvp_new+0x32>
    1a62:	bf00      	nop
    1a64:	000044f3 	strdeq	r4, [r0], -r3
    1a68:	20000564 	andcs	r0, r0, r4, ror #10
    1a6c:	000044f9 	strdeq	r4, [r0], -r9

00001a70 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a70:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a72:	b510      	push	{r4, lr}
    1a74:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a76:	d803      	bhi.n	1a80 <tcvphy_reg+0x10>
    1a78:	4b0c      	ldr	r3, [pc, #48]	; (1aac <tcvphy_reg+0x3c>)
    1a7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1a7e:	b118      	cbz	r0, 1a88 <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    1a80:	2003      	movs	r0, #3
    1a82:	490b      	ldr	r1, [pc, #44]	; (1ab0 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    1a84:	f7fe fd2e 	bl	4e4 <__pi_syserror>
	physical [phy] = ps;
    1a88:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    1a8c:	4b09      	ldr	r3, [pc, #36]	; (1ab4 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a8e:	2008      	movs	r0, #8
	physinfo [phy] = info;
    1a90:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a94:	f7ff fcb4 	bl	1400 <__pi_malloc>
    1a98:	4a07      	ldr	r2, [pc, #28]	; (1ab8 <tcvphy_reg+0x48>)
    1a9a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    1a9e:	b910      	cbnz	r0, 1aa6 <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    1aa0:	2006      	movs	r0, #6
    1aa2:	4906      	ldr	r1, [pc, #24]	; (1abc <tcvphy_reg+0x4c>)
    1aa4:	e7ee      	b.n	1a84 <tcvphy_reg+0x14>
	q_init (q);
    1aa6:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    1aaa:	bd10      	pop	{r4, pc}
    1aac:	20000590 	mulcs	r0, r0, r5
    1ab0:	000044ff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    1ab4:	2000059c 	mulcs	r0, ip, r5
    1ab8:	20000584 	andcs	r0, r0, r4, lsl #11
    1abc:	00004505 	andeq	r4, r0, r5, lsl #10

00001ac0 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    1ac4:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac6:	4605      	mov	r5, r0
    1ac8:	460f      	mov	r7, r1
    1aca:	4614      	mov	r4, r2
    1acc:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    1ace:	d803      	bhi.n	1ad8 <tcvphy_rcv+0x18>
    1ad0:	4b1e      	ldr	r3, [pc, #120]	; (1b4c <tcvphy_rcv+0x8c>)
    1ad2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1ad6:	b91b      	cbnz	r3, 1ae0 <tcvphy_rcv+0x20>
    1ad8:	491d      	ldr	r1, [pc, #116]	; (1b50 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ada:	200a      	movs	r0, #10
    1adc:	f7fe fd02 	bl	4e4 <__pi_syserror>
    1ae0:	4e1c      	ldr	r6, [pc, #112]	; (1b54 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae2:	f10d 080c 	add.w	r8, sp, #12
    1ae6:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    1aea:	6833      	ldr	r3, [r6, #0]
    1aec:	46b1      	mov	r9, r6
    1aee:	3e04      	subs	r6, #4
    1af0:	b92b      	cbnz	r3, 1afe <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af2:	45ca      	cmp	sl, r9
    1af4:	d1f9      	bne.n	1aea <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    1af6:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    1af8:	b005      	add	sp, #20
    1afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1afe:	f8d3 b008 	ldr.w	fp, [r3, #8]
    1b02:	f1bb 0f00 	cmp.w	fp, #0
    1b06:	d101      	bne.n	1b0c <tcvphy_rcv+0x4c>
    1b08:	4913      	ldr	r1, [pc, #76]	; (1b58 <tcvphy_rcv+0x98>)
    1b0a:	e7e6      	b.n	1ada <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b0c:	4639      	mov	r1, r7
    1b0e:	4622      	mov	r2, r4
    1b10:	4628      	mov	r0, r5
    1b12:	f8cd 8000 	str.w	r8, [sp]
    1b16:	ab02      	add	r3, sp, #8
    1b18:	47d8      	blx	fp
    1b1a:	4601      	mov	r1, r0
    1b1c:	2800      	cmp	r0, #0
    1b1e:	d0e8      	beq.n	1af2 <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b20:	2801      	cmp	r0, #1
    1b22:	d0e8      	beq.n	1af6 <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    1b24:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    1b28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1b2c:	441a      	add	r2, r3
    1b2e:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b30:	4620      	mov	r0, r4
    1b32:	9a02      	ldr	r2, [sp, #8]
    1b34:	f7ff ff68 	bl	1a08 <tcvp_new>
    1b38:	2800      	cmp	r0, #0
    1b3a:	d0dc      	beq.n	1af6 <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    1b40:	4622      	mov	r2, r4
    1b42:	4439      	add	r1, r7
    1b44:	f7ff fb77 	bl	1236 <__pi_memcpy>
	return 1;
    1b48:	2001      	movs	r0, #1
    1b4a:	e7d5      	b.n	1af8 <tcvphy_rcv+0x38>
    1b4c:	20000590 	mulcs	r0, r0, r5
    1b50:	0000450b 	andeq	r4, r0, fp, lsl #10
    1b54:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    1b58:	00004511 	andeq	r4, r0, r1, lsl r5

00001b5c <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    1b5c:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    1b5e:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    1b60:	d803      	bhi.n	1b6a <tcvphy_get+0xe>
    1b62:	4b0b      	ldr	r3, [pc, #44]	; (1b90 <tcvphy_get+0x34>)
    1b64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b68:	b91b      	cbnz	r3, 1b72 <tcvphy_get+0x16>
    1b6a:	200a      	movs	r0, #10
    1b6c:	4909      	ldr	r1, [pc, #36]	; (1b94 <tcvphy_get+0x38>)
    1b6e:	f7fe fcb9 	bl	4e4 <__pi_syserror>

	oq = oqueues [phy];
    1b72:	4b09      	ldr	r3, [pc, #36]	; (1b98 <tcvphy_get+0x3c>)
    1b74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1b78:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    1b7a:	4283      	cmp	r3, r0
    1b7c:	d005      	beq.n	1b8a <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    1b7e:	8903      	ldrh	r3, [r0, #8]
    1b80:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    1b82:	f7ff fd72 	bl	166a <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    1b86:	300c      	adds	r0, #12
}
    1b88:	bd08      	pop	{r3, pc}
		return NULL;
    1b8a:	2000      	movs	r0, #0
    1b8c:	e7fc      	b.n	1b88 <tcvphy_get+0x2c>
    1b8e:	bf00      	nop
    1b90:	20000590 	mulcs	r0, r0, r5
    1b94:	00004517 	andeq	r4, r0, r7, lsl r5
    1b98:	20000584 	andcs	r0, r0, r4, lsl #11

00001b9c <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    1b9c:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    1b9e:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    1ba0:	d803      	bhi.n	1baa <tcvphy_top+0xe>
    1ba2:	4b08      	ldr	r3, [pc, #32]	; (1bc4 <tcvphy_top+0x28>)
    1ba4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1ba8:	b91b      	cbnz	r3, 1bb2 <tcvphy_top+0x16>
    1baa:	200a      	movs	r0, #10
    1bac:	4906      	ldr	r1, [pc, #24]	; (1bc8 <tcvphy_top+0x2c>)
    1bae:	f7fe fc99 	bl	4e4 <__pi_syserror>

	oq = oqueues [phy];
    1bb2:	4b06      	ldr	r3, [pc, #24]	; (1bcc <tcvphy_top+0x30>)
    1bb4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1bb8:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    1bba:	4283      	cmp	r3, r0
		return NULL;
    1bbc:	bf0c      	ite	eq
    1bbe:	2000      	moveq	r0, #0

	return (address)(b + 1);
    1bc0:	300c      	addne	r0, #12
}
    1bc2:	bd08      	pop	{r3, pc}
    1bc4:	20000590 	mulcs	r0, r0, r5
    1bc8:	0000451d 	andeq	r4, r0, sp, lsl r5
    1bcc:	20000584 	andcs	r0, r0, r4, lsl #11

00001bd0 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd0:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    1bd2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    1bd6:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    1bda:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1bde:	2b02      	cmp	r3, #2
    1be0:	d805      	bhi.n	1bee <tcvphy_end+0x1e>
    1be2:	4a08      	ldr	r2, [pc, #32]	; (1c04 <tcvphy_end+0x34>)
    1be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1be8:	b10b      	cbz	r3, 1bee <tcvphy_end+0x1e>
    1bea:	695b      	ldr	r3, [r3, #20]
    1bec:	b91b      	cbnz	r3, 1bf6 <tcvphy_end+0x26>
    1bee:	200a      	movs	r0, #10
    1bf0:	4905      	ldr	r1, [pc, #20]	; (1c08 <tcvphy_end+0x38>)
    1bf2:	f7fe fc77 	bl	4e4 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf6:	4798      	blx	r3
    1bf8:	4601      	mov	r1, r0
    1bfa:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    1bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c00:	f7ff bd6e 	b.w	16e0 <dispose>
    1c04:	200005a8 	andcs	r0, r0, r8, lsr #11
    1c08:	00004523 	andeq	r4, r0, r3, lsr #10

00001c0c <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1c0c:	4770      	bx	lr

00001c0e <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1c0e:	e7fe      	b.n	1c0e <NmiSR>

00001c10 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1c10:	e7fe      	b.n	1c10 <FaultISR>

00001c12 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    1c12:	e7fe      	b.n	1c12 <AONIntHandler>

00001c14 <ResetISR>:
{
    1c14:	b508      	push	{r3, lr}
    SetupTrimDevice();
    1c16:	f001 fcdf 	bl	35d8 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c1a:	4b0c      	ldr	r3, [pc, #48]	; (1c4c <zero_loop+0x20>)
    pui32Src = &_etext;
    1c1c:	4a0c      	ldr	r2, [pc, #48]	; (1c50 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c1e:	490d      	ldr	r1, [pc, #52]	; (1c54 <zero_loop+0x28>)
    1c20:	428b      	cmp	r3, r1
    1c22:	d30d      	bcc.n	1c40 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    1c24:	480c      	ldr	r0, [pc, #48]	; (1c58 <zero_loop+0x2c>)
    1c26:	490d      	ldr	r1, [pc, #52]	; (1c5c <zero_loop+0x30>)
    1c28:	f04f 0200 	mov.w	r2, #0

00001c2c <zero_loop>:
    1c2c:	4288      	cmp	r0, r1
    1c2e:	bfb8      	it	lt
    1c30:	f840 2b04 	strlt.w	r2, [r0], #4
    1c34:	dbfa      	blt.n	1c2c <zero_loop>
   main();
    1c36:	f7ff f957 	bl	ee8 <main>
    FaultISR();
    1c3a:	f7ff ffe9 	bl	1c10 <FaultISR>
}
    1c3e:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1c40:	f852 0b04 	ldr.w	r0, [r2], #4
    1c44:	f843 0b04 	str.w	r0, [r3], #4
    1c48:	e7ea      	b.n	1c20 <ResetISR+0xc>
    1c4a:	bf00      	nop
    1c4c:	20000000 	andcs	r0, r0, r0
    1c50:	00004f2c 	andeq	r4, r0, ip, lsr #30
    1c54:	20000540 	andcs	r0, r0, r0, asr #10
    1c58:	20000540 	andcs	r0, r0, r0, asr #10
    1c5c:	20000b70 	andcs	r0, r0, r0, ror fp

00001c60 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1c60:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1c62:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1c68:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c6a:	4907      	ldr	r1, [pc, #28]	; (1c88 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c6c:	4d07      	ldr	r5, [pc, #28]	; (1c8c <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c6e:	4c08      	ldr	r4, [pc, #32]	; (1c90 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c70:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    1c72:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1c74:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    1c76:	b2c0      	uxtb	r0, r0
			b |= 1;
    1c78:	bf48      	it	mi
    1c7a:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1c7e:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c82:	600a      	str	r2, [r1, #0]
    1c84:	d1f4      	bne.n	1c70 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    1c86:	bd70      	pop	{r4, r5, r6, pc}
    1c88:	400220a0 	andmi	r2, r2, r0, lsr #1
    1c8c:	400220c0 	andmi	r2, r2, r0, asr #1
    1c90:	40022090 	mulmi	r2, r0, r0

00001c94 <put_byte>:

static void put_byte (byte b) {
    1c94:	b530      	push	{r4, r5, lr}
    1c96:	2308      	movs	r3, #8
    1c98:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1ca0:	4c06      	ldr	r4, [pc, #24]	; (1cbc <put_byte+0x28>)
    1ca2:	4a07      	ldr	r2, [pc, #28]	; (1cc0 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1ca4:	f010 0f80 	tst.w	r0, #128	; 0x80
    1ca8:	bf14      	ite	ne
    1caa:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1cae:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1cb0:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1cb2:	6021      	str	r1, [r4, #0]
		b <<= 1;
    1cb4:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cb6:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1cb8:	d1f4      	bne.n	1ca4 <put_byte+0x10>
	}
}
    1cba:	bd30      	pop	{r4, r5, pc}
    1cbc:	40022090 	mulmi	r2, r0, r0
    1cc0:	400220a0 	andmi	r2, r2, r0, lsr #1

00001cc4 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc4:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    1cc6:	b510      	push	{r4, lr}
    1cc8:	4c03      	ldr	r4, [pc, #12]	; (1cd8 <cmd_0+0x14>)
    1cca:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    1ccc:	f7ff ffe2 	bl	1c94 <put_byte>
    1cd0:	2300      	movs	r3, #0
    1cd2:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    1cd4:	bd10      	pop	{r4, pc}
    1cd6:	bf00      	nop
    1cd8:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001cdc <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ce0:	4604      	mov	r4, r0
    1ce2:	460d      	mov	r5, r1
    1ce4:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    1ce6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d2c <wwait+0x50>
    1cea:	4e0f      	ldr	r6, [pc, #60]	; (1d28 <wwait+0x4c>)
    1cec:	f898 3000 	ldrb.w	r3, [r8]
    1cf0:	b14b      	cbz	r3, 1d06 <wwait+0x2a>
	put_byte (CMD_RDSR);
    1cf2:	2005      	movs	r0, #5
    1cf4:	6037      	str	r7, [r6, #0]
    1cf6:	f7ff ffcd 	bl	1c94 <put_byte>
	r = get_byte ();
    1cfa:	f7ff ffb1 	bl	1c60 <get_byte>
    1cfe:	2300      	movs	r3, #0
    1d00:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    1d02:	07c3      	lsls	r3, r0, #31
    1d04:	d401      	bmi.n	1d0a <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    1d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d0e:	429c      	cmp	r4, r3
    1d10:	d103      	bne.n	1d1a <wwait+0x3e>
			mdelay (1);
    1d12:	2001      	movs	r0, #1
    1d14:	f7fe fb92 	bl	43c <mdelay>
    1d18:	e7e8      	b.n	1cec <wwait+0x10>
			delay (del, st);
    1d1a:	4621      	mov	r1, r4
    1d1c:	4628      	mov	r0, r5
    1d1e:	f7ff fa55 	bl	11cc <delay>
			release;
    1d22:	f7fe ff9d 	bl	c60 <__pi_release>
    1d26:	bf00      	nop
    1d28:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1d2c:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

00001d30 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1d32:	4d0c      	ldr	r5, [pc, #48]	; (1d64 <ready+0x34>)
    1d34:	782f      	ldrb	r7, [r5, #0]
    1d36:	b147      	cbz	r7, 1d4a <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1d38:	2101      	movs	r1, #1
    1d3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d3e:	f7ff ffcd 	bl	1cdc <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1d42:	2200      	movs	r2, #0
    1d44:	4b08      	ldr	r3, [pc, #32]	; (1d68 <ready+0x38>)
    1d46:	701a      	strb	r2, [r3, #0]
}
    1d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d4a:	2401      	movs	r4, #1
    1d4c:	4e07      	ldr	r6, [pc, #28]	; (1d6c <ready+0x3c>)
	udelay (1);
    1d4e:	4620      	mov	r0, r4
    1d50:	6034      	str	r4, [r6, #0]
    1d52:	f7fe fb5d 	bl	410 <udelay>
	udelay (1);
    1d56:	4620      	mov	r0, r4
    1d58:	6037      	str	r7, [r6, #0]
    1d5a:	f7fe fb59 	bl	410 <udelay>
		dopen = DOPEN_TEMP;
    1d5e:	2302      	movs	r3, #2
    1d60:	702b      	strb	r3, [r5, #0]
    1d62:	e7ee      	b.n	1d42 <ready+0x12>
    1d64:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
    1d68:	200005b5 			; <UNDEFINED> instruction: 0x200005b5
    1d6c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001d70 <cclose>:
static void cclose () {
    1d70:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1d72:	4c07      	ldr	r4, [pc, #28]	; (1d90 <cclose+0x20>)
    1d74:	7823      	ldrb	r3, [r4, #0]
    1d76:	2b02      	cmp	r3, #2
    1d78:	d109      	bne.n	1d8e <cclose+0x1e>
		wwait (WNONE, 1);
    1d7a:	2101      	movs	r1, #1
    1d7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d80:	f7ff ffac 	bl	1cdc <wwait>
	cmd_0 (CMD_DP);
    1d84:	20b9      	movs	r0, #185	; 0xb9
    1d86:	f7ff ff9d 	bl	1cc4 <cmd_0>
		dopen = 0;
    1d8a:	2300      	movs	r3, #0
    1d8c:	7023      	strb	r3, [r4, #0]
}
    1d8e:	bd10      	pop	{r4, pc}
    1d90:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

00001d94 <ee_open>:

// ============================================================================

word ee_open () {
    1d94:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    1d96:	f7ff ffcb 	bl	1d30 <ready>
	dopen = DOPEN_PERM;
    1d9a:	2201      	movs	r2, #1
    1d9c:	4b01      	ldr	r3, [pc, #4]	; (1da4 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1d9e:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1da0:	701a      	strb	r2, [r3, #0]
}
    1da2:	bd08      	pop	{r3, pc}
    1da4:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

00001da8 <ee_close>:

void ee_close () {

	if (dopen) {
    1da8:	4b03      	ldr	r3, [pc, #12]	; (1db8 <ee_close+0x10>)
    1daa:	781a      	ldrb	r2, [r3, #0]
    1dac:	b11a      	cbz	r2, 1db6 <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1dae:	2202      	movs	r2, #2
    1db0:	701a      	strb	r2, [r3, #0]
		cclose ();
    1db2:	f7ff bfdd 	b.w	1d70 <cclose>
	}
}
    1db6:	4770      	bx	lr
    1db8:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

00001dbc <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dbe:	4604      	mov	r4, r0
    1dc0:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    1dc2:	4615      	mov	r5, r2
    1dc4:	b37a      	cbz	r2, 1e26 <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    1dc6:	4e19      	ldr	r6, [pc, #100]	; (1e2c <ser_in+0x70>)
    1dc8:	6830      	ldr	r0, [r6, #0]
    1dca:	b988      	cbnz	r0, 1df0 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1dcc:	4818      	ldr	r0, [pc, #96]	; (1e30 <ser_in+0x74>)
    1dce:	f7ff fa19 	bl	1204 <running>
    1dd2:	b948      	cbnz	r0, 1de8 <ser_in+0x2c>
			prcs = runthread (__inserial);
    1dd4:	4601      	mov	r1, r0
    1dd6:	4816      	ldr	r0, [pc, #88]	; (1e30 <ser_in+0x74>)
    1dd8:	f7ff fb66 	bl	14a8 <__pi_fork>
			if (prcs == 0) {
    1ddc:	b920      	cbnz	r0, 1de8 <ser_in+0x2c>
				npwait (st);
    1dde:	4620      	mov	r0, r4
    1de0:	f7ff fb7c 	bl	14dc <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1de4:	f7fe ff3c 	bl	c60 <__pi_release>
		join (prcs, st);
    1de8:	4621      	mov	r1, r4
    1dea:	f7ff f9dd 	bl	11a8 <__pi_join>
    1dee:	e7f9      	b.n	1de4 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    1df0:	7803      	ldrb	r3, [r0, #0]
    1df2:	b9a3      	cbnz	r3, 1e1e <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df4:	7844      	ldrb	r4, [r0, #1]
    1df6:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    1df8:	42ac      	cmp	r4, r5
		prcs = len-1;
    1dfa:	bfa8      	it	ge
    1dfc:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    1e00:	4622      	mov	r2, r4
    1e02:	4638      	mov	r0, r7
    1e04:	6831      	ldr	r1, [r6, #0]
    1e06:	f7ff fa16 	bl	1236 <__pi_memcpy>
	ufree (__inpline);
    1e0a:	6830      	ldr	r0, [r6, #0]
    1e0c:	f7ff faac 	bl	1368 <__pi_free>
	__inpline = NULL;
    1e10:	2300      	movs	r3, #0
    1e12:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    1e14:	783a      	ldrb	r2, [r7, #0]
    1e16:	b102      	cbz	r2, 1e1a <ser_in+0x5e>
		buf [prcs] = '\0';
    1e18:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    1e1a:	4620      	mov	r0, r4
    1e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1e1e:	f7ff fa03 	bl	1228 <__pi_strlen>
    1e22:	4604      	mov	r4, r0
    1e24:	e7e8      	b.n	1df8 <ser_in+0x3c>
		return 0;
    1e26:	4614      	mov	r4, r2
    1e28:	e7f7      	b.n	1e1a <ser_in+0x5e>
    1e2a:	bf00      	nop
    1e2c:	20000600 	andcs	r0, r0, r0, lsl #12
    1e30:	000028cd 	andeq	r2, r0, sp, asr #17

00001e34 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1e34:	b40e      	push	{r1, r2, r3}
    1e36:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1e38:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1e3a:	4812      	ldr	r0, [pc, #72]	; (1e84 <ser_outf+0x50>)
    1e3c:	f7ff f9e2 	bl	1204 <running>
    1e40:	4606      	mov	r6, r0
    1e42:	b120      	cbz	r0, 1e4e <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1e44:	4621      	mov	r1, r4
    1e46:	f7ff f9af 	bl	11a8 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1e4a:	f7fe ff09 	bl	c60 <__pi_release>
	va_start (ap, m);
    1e4e:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e50:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1e52:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e54:	f000 fef0 	bl	2c38 <vform>
    1e58:	4605      	mov	r5, r0
    1e5a:	b918      	cbnz	r0, 1e64 <ser_outf+0x30>
		umwait (st);
    1e5c:	4620      	mov	r0, r4
    1e5e:	f7ff fb3d 	bl	14dc <__pi_waitmem>
    1e62:	e7f2      	b.n	1e4a <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1e64:	4601      	mov	r1, r0
    1e66:	4807      	ldr	r0, [pc, #28]	; (1e84 <ser_outf+0x50>)
    1e68:	f7ff fb1e 	bl	14a8 <__pi_fork>
    1e6c:	b918      	cbnz	r0, 1e76 <ser_outf+0x42>
		ufree (buf);
    1e6e:	4628      	mov	r0, r5
    1e70:	f7ff fa7a 	bl	1368 <__pi_free>
		npwait (st);
    1e74:	e7f2      	b.n	1e5c <ser_outf+0x28>
		release;
	}

	return 0;
}
    1e76:	4630      	mov	r0, r6
    1e78:	b003      	add	sp, #12
    1e7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e7e:	b003      	add	sp, #12
    1e80:	4770      	bx	lr
    1e82:	bf00      	nop
    1e84:	0000285d 	andeq	r2, r0, sp, asr r8

00001e88 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1e88:	b40e      	push	{r1, r2, r3}
    1e8a:	b533      	push	{r0, r1, r4, r5, lr}
    1e8c:	9905      	ldr	r1, [sp, #20]
    1e8e:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1e90:	b321      	cbz	r1, 1edc <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1e92:	4d13      	ldr	r5, [pc, #76]	; (1ee0 <ser_inf+0x58>)
    1e94:	6828      	ldr	r0, [r5, #0]
    1e96:	b988      	cbnz	r0, 1ebc <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1e98:	4812      	ldr	r0, [pc, #72]	; (1ee4 <ser_inf+0x5c>)
    1e9a:	f7ff f9b3 	bl	1204 <running>
    1e9e:	b948      	cbnz	r0, 1eb4 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1ea0:	4601      	mov	r1, r0
    1ea2:	4810      	ldr	r0, [pc, #64]	; (1ee4 <ser_inf+0x5c>)
    1ea4:	f7ff fb00 	bl	14a8 <__pi_fork>
			if (prcs == 0) {
    1ea8:	b920      	cbnz	r0, 1eb4 <ser_inf+0x2c>
				npwait (st);
    1eaa:	4620      	mov	r0, r4
    1eac:	f7ff fb16 	bl	14dc <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1eb0:	f7fe fed6 	bl	c60 <__pi_release>
		join (prcs, st);
    1eb4:	4621      	mov	r1, r4
    1eb6:	f7ff f977 	bl	11a8 <__pi_join>
    1eba:	e7f9      	b.n	1eb0 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1ebc:	aa06      	add	r2, sp, #24
    1ebe:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1ec0:	f000 fee2 	bl	2c88 <vscan>
    1ec4:	4604      	mov	r4, r0

	ufree (__inpline);
    1ec6:	6828      	ldr	r0, [r5, #0]
    1ec8:	f7ff fa4e 	bl	1368 <__pi_free>
	__inpline = NULL;
    1ecc:	2300      	movs	r3, #0
    1ece:	602b      	str	r3, [r5, #0]

	return prcs;
}
    1ed0:	4620      	mov	r0, r4
    1ed2:	b002      	add	sp, #8
    1ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1ed8:	b003      	add	sp, #12
    1eda:	4770      	bx	lr
		return 0;
    1edc:	460c      	mov	r4, r1
    1ede:	e7f7      	b.n	1ed0 <ser_inf+0x48>
    1ee0:	20000600 	andcs	r0, r0, r0, lsl #12
    1ee4:	000028cd 	andeq	r2, r0, sp, asr #17

00001ee8 <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	4b04      	ldr	r3, [pc, #16]	; (1efc <plugch+0x14>)
    1eea:	4a05      	ldr	r2, [pc, #20]	; (1f00 <plugch+0x18>)
    1eec:	781b      	ldrb	r3, [r3, #0]
    1eee:	f503 7359 	add.w	r3, r3, #868	; 0x364
    1ef2:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    1ef4:	4a03      	ldr	r2, [pc, #12]	; (1f04 <plugch+0x1c>)
    1ef6:	81d3      	strh	r3, [r2, #14]
}
    1ef8:	4770      	bx	lr
    1efa:	bf00      	nop
    1efc:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    1f00:	20000054 	andcs	r0, r0, r4, asr r0
    1f04:	2000003c 	andcs	r0, r0, ip, lsr r0

00001f08 <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    1f08:	b570      	push	{r4, r5, r6, lr}
    1f0a:	460c      	mov	r4, r1
    1f0c:	281a      	cmp	r0, #26
    1f0e:	f200 80a4 	bhi.w	205a <option+0x152>
    1f12:	e8df f000 	tbb	[pc, r0]
    1f16:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    1f1a:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    1f1e:	3b35445b 	blcc	d53092 <__ccfg+0xd330ea>
    1f22:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    1f26:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    1f2a:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    1f2e:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f32:	4b4c      	ldr	r3, [pc, #304]	; (2064 <option+0x15c>)
    1f34:	7818      	ldrb	r0, [r3, #0]
    1f36:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    1f3a:	3002      	adds	r0, #2
			goto RVal;
    1f3c:	e028      	b.n	1f90 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    1f3e:	4a49      	ldr	r2, [pc, #292]	; (2064 <option+0x15c>)
    1f40:	7813      	ldrb	r3, [r2, #0]
    1f42:	f043 0301 	orr.w	r3, r3, #1
    1f46:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    1f48:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    1f4a:	4b47      	ldr	r3, [pc, #284]	; (2068 <option+0x160>)
    1f4c:	6819      	ldr	r1, [r3, #0]
    1f4e:	4b47      	ldr	r3, [pc, #284]	; (206c <option+0x164>)
    1f50:	460c      	mov	r4, r1
    1f52:	681d      	ldr	r5, [r3, #0]
    1f54:	2300      	movs	r3, #0
    1f56:	f834 2b10 	ldrh.w	r2, [r4], #16
    1f5a:	f002 0207 	and.w	r2, r2, #7
    1f5e:	429a      	cmp	r2, r3
    1f60:	dd08      	ble.n	1f74 <option+0x6c>
    1f62:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    1f66:	3301      	adds	r3, #1
    1f68:	42ae      	cmp	r6, r5
    1f6a:	d1f8      	bne.n	1f5e <option+0x56>
    1f6c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f70:	889b      	ldrh	r3, [r3, #4]
    1f72:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    1f74:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    1f76:	4a3b      	ldr	r2, [pc, #236]	; (2064 <option+0x15c>)
    1f78:	7813      	ldrb	r3, [r2, #0]
    1f7a:	f023 0301 	bic.w	r3, r3, #1
    1f7e:	e7e2      	b.n	1f46 <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    1f80:	b101      	cbz	r1, 1f84 <option+0x7c>
    1f82:	880c      	ldrh	r4, [r1, #0]
    1f84:	4b3a      	ldr	r3, [pc, #232]	; (2070 <option+0x168>)
    1f86:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    1f88:	2000      	movs	r0, #0
    1f8a:	e7f3      	b.n	1f74 <option+0x6c>
			ret = (int) statid;
    1f8c:	4b38      	ldr	r3, [pc, #224]	; (2070 <option+0x168>)
    1f8e:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    1f90:	2c00      	cmp	r4, #0
    1f92:	d0ef      	beq.n	1f74 <option+0x6c>
		*val = ret;
    1f94:	8020      	strh	r0, [r4, #0]
	return ret;
    1f96:	e7ed      	b.n	1f74 <option+0x6c>
			ret = rbuffl + 2;
    1f98:	4b36      	ldr	r3, [pc, #216]	; (2074 <option+0x16c>)
    1f9a:	7818      	ldrb	r0, [r3, #0]
    1f9c:	e7cd      	b.n	1f3a <option+0x32>
				memcpy (val, &rxstat,
    1f9e:	220c      	movs	r2, #12
			if (val != NULL) {
    1fa0:	b121      	cbz	r1, 1fac <option+0xa4>
				memcpy (val, &rxstat,
    1fa2:	4620      	mov	r0, r4
    1fa4:	4934      	ldr	r1, [pc, #208]	; (2078 <option+0x170>)
    1fa6:	f7ff f946 	bl	1236 <__pi_memcpy>
    1faa:	e7ed      	b.n	1f88 <option+0x80>
				memset (&rxstat, 0, 
    1fac:	4832      	ldr	r0, [pc, #200]	; (2078 <option+0x170>)
    1fae:	f7ff f94c 	bl	124a <__pi_memset>
    1fb2:	e7e9      	b.n	1f88 <option+0x80>
			if (val == NULL)
    1fb4:	b941      	cbnz	r1, 1fc8 <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb6:	f7ff fb3b 	bl	1630 <lrnd>
    1fba:	f3c0 4105 	ubfx	r1, r0, #16, #6
    1fbe:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    1fc0:	482e      	ldr	r0, [pc, #184]	; (207c <option+0x174>)
    1fc2:	f7ff f849 	bl	1058 <__pi_utimer_set>
    1fc6:	e7bf      	b.n	1f48 <option+0x40>
    1fc8:	8809      	ldrh	r1, [r1, #0]
    1fca:	e7f9      	b.n	1fc0 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    1fcc:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    1fce:	4b2c      	ldr	r3, [pc, #176]	; (2080 <option+0x178>)
    1fd0:	8b5a      	ldrh	r2, [r3, #26]
    1fd2:	4b2c      	ldr	r3, [pc, #176]	; (2084 <option+0x17c>)
					== patable [ret])
    1fd4:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	428a      	cmp	r2, r1
    1fda:	d0d9      	beq.n	1f90 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    1fdc:	3001      	adds	r0, #1
    1fde:	2808      	cmp	r0, #8
    1fe0:	d1f8      	bne.n	1fd4 <option+0xcc>
    1fe2:	e7d5      	b.n	1f90 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	b119      	cbz	r1, 1fee <option+0xe6>
				(*val > 7) ? 7 : *val;
    1fe6:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	2807      	cmp	r0, #7
    1fea:	bf28      	it	cs
    1fec:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1fee:	4b25      	ldr	r3, [pc, #148]	; (2084 <option+0x17c>)
    1ff0:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    1ff4:	4b22      	ldr	r3, [pc, #136]	; (2080 <option+0x178>)
    1ff6:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    1ff8:	4a1a      	ldr	r2, [pc, #104]	; (2064 <option+0x15c>)
    1ffa:	7813      	ldrb	r3, [r2, #0]
    1ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2000:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    2002:	e7a2      	b.n	1f4a <option+0x42>
			ret = (int) channel;
    2004:	4b20      	ldr	r3, [pc, #128]	; (2088 <option+0x180>)
			ret = (int) vrate;
    2006:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    2008:	e7c2      	b.n	1f90 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    200a:	b121      	cbz	r1, 2016 <option+0x10e>
				(*val > 7) ? 7 : *val;
    200c:	880c      	ldrh	r4, [r1, #0]
    200e:	2c07      	cmp	r4, #7
    2010:	bf28      	it	cs
    2012:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	b2e4      	uxtb	r4, r4
    2016:	4b1c      	ldr	r3, [pc, #112]	; (2088 <option+0x180>)
    2018:	701c      	strb	r4, [r3, #0]
			plugch ();
    201a:	f7ff ff65 	bl	1ee8 <plugch>
			_BIS (dstate, DSTATE_IRST);
    201e:	4a11      	ldr	r2, [pc, #68]	; (2064 <option+0x15c>)
    2020:	7813      	ldrb	r3, [r2, #0]
    2022:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2026:	e78e      	b.n	1f46 <option+0x3e>
			ret = (int) vrate;
    2028:	4b18      	ldr	r3, [pc, #96]	; (208c <option+0x184>)
    202a:	e7ec      	b.n	2006 <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	b139      	cbz	r1, 203e <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    202e:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	2b03      	cmp	r3, #3
    2032:	d806      	bhi.n	2042 <option+0x13a>
    2034:	b13b      	cbz	r3, 2046 <option+0x13e>
    2036:	b2db      	uxtb	r3, r3
    2038:	4a14      	ldr	r2, [pc, #80]	; (208c <option+0x184>)
    203a:	7013      	strb	r3, [r2, #0]
    203c:	e7ed      	b.n	201a <option+0x112>
    203e:	2302      	movs	r3, #2
    2040:	e7fa      	b.n	2038 <option+0x130>
    2042:	2303      	movs	r3, #3
    2044:	e7f8      	b.n	2038 <option+0x130>
    2046:	2301      	movs	r3, #1
    2048:	e7f6      	b.n	2038 <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204a:	b119      	cbz	r1, 2054 <option+0x14c>
    204c:	880b      	ldrh	r3, [r1, #0]
    204e:	4a10      	ldr	r2, [pc, #64]	; (2090 <option+0x188>)
    2050:	8013      	strh	r3, [r2, #0]
			goto RRet;
    2052:	e799      	b.n	1f88 <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2054:	f44f 7380 	mov.w	r3, #256	; 0x100
    2058:	e7f9      	b.n	204e <option+0x146>
			syserror (EREQPAR, "cc13 op");
    205a:	2003      	movs	r0, #3
    205c:	490d      	ldr	r1, [pc, #52]	; (2094 <option+0x18c>)
    205e:	f7fe fa41 	bl	4e4 <__pi_syserror>
    2062:	bf00      	nop
    2064:	200005c0 	andcs	r0, r0, r0, asr #11
    2068:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    206c:	200005cc 	andcs	r0, r0, ip, asr #11
    2070:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2074:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2078:	200005e4 	andcs	r0, r0, r4, ror #11
    207c:	200005b6 			; <UNDEFINED> instruction: 0x200005b6
    2080:	20000054 	andcs	r0, r0, r4, asr r0
    2084:	00004596 	muleq	r0, r6, r5
    2088:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    208c:	2000003a 	andcs	r0, r0, sl, lsr r0
    2090:	20000038 	andcs	r0, r0, r8, lsr r0
    2094:	00004532 	andeq	r4, r0, r2, lsr r5

00002098 <issue_cmd>:
static void issue_cmd (lword cmd) {
    2098:	b538      	push	{r3, r4, r5, lr}
    209a:	4604      	mov	r4, r0
    209c:	4d0c      	ldr	r5, [pc, #48]	; (20d0 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    209e:	4620      	mov	r0, r4
    20a0:	f001 f8a4 	bl	31ec <NOROM_RFCDoorbellSendTo>
    20a4:	b2c2      	uxtb	r2, r0
    20a6:	2a01      	cmp	r2, #1
    20a8:	d011      	beq.n	20ce <issue_cmd+0x36>
		if (res != 0x86)
    20aa:	2a86      	cmp	r2, #134	; 0x86
    20ac:	d003      	beq.n	20b6 <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    20ae:	4909      	ldr	r1, [pc, #36]	; (20d4 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    20b0:	2008      	movs	r0, #8
    20b2:	f7fe fa17 	bl	4e4 <__pi_syserror>
		if (cnt-- == 0) {
    20b6:	3d01      	subs	r5, #1
    20b8:	d105      	bne.n	20c6 <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    20ba:	4621      	mov	r1, r4
    20bc:	4806      	ldr	r0, [pc, #24]	; (20d8 <issue_cmd+0x40>)
    20be:	f7ff fa19 	bl	14f4 <diag>
			syserror (EHARDWARE, "hang ic0");
    20c2:	4906      	ldr	r1, [pc, #24]	; (20dc <issue_cmd+0x44>)
    20c4:	e7f4      	b.n	20b0 <issue_cmd+0x18>
		udelay (1);
    20c6:	2001      	movs	r0, #1
    20c8:	f7fe f9a2 	bl	410 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	e7e7      	b.n	209e <issue_cmd+0x6>
}
    20ce:	bd38      	pop	{r3, r4, r5, pc}
    20d0:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    20d4:	0000453a 	andeq	r4, r0, sl, lsr r5
    20d8:	0000453e 	andeq	r4, r0, lr, lsr r5
    20dc:	0000454a 	andeq	r4, r0, sl, asr #10

000020e0 <rx_de>:
static void rx_de () {
    20e0:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    20e2:	4c06      	ldr	r4, [pc, #24]	; (20fc <rx_de+0x1c>)
    20e4:	7823      	ldrb	r3, [r4, #0]
    20e6:	079b      	lsls	r3, r3, #30
    20e8:	d506      	bpl.n	20f8 <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ea:	4805      	ldr	r0, [pc, #20]	; (2100 <rx_de+0x20>)
    20ec:	f7ff ffd4 	bl	2098 <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    20f0:	7823      	ldrb	r3, [r4, #0]
    20f2:	f023 0302 	bic.w	r3, r3, #2
    20f6:	7023      	strb	r3, [r4, #0]
}
    20f8:	bd10      	pop	{r4, pc}
    20fa:	bf00      	nop
    20fc:	200005c0 	andcs	r0, r0, r0, asr #11
    2100:	04010001 	streq	r0, [r1], #-1

00002104 <rf_off>:
static void rf_off () {
    2104:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    2106:	4c11      	ldr	r4, [pc, #68]	; (214c <rf_off+0x48>)
    2108:	7823      	ldrb	r3, [r4, #0]
    210a:	06db      	lsls	r3, r3, #27
    210c:	d51d      	bpl.n	214a <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    210e:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2110:	4b0f      	ldr	r3, [pc, #60]	; (2150 <rf_off+0x4c>)
    2112:	2019      	movs	r0, #25
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	695b      	ldr	r3, [r3, #20]
    2118:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    211a:	2000      	movs	r0, #0
    211c:	f001 f9e4 	bl	34e8 <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2120:	f001 f878 	bl	3214 <NOROM_RFCSynthPowerDown>
    2124:	4b0b      	ldr	r3, [pc, #44]	; (2154 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2126:	2001      	movs	r0, #1
    2128:	601d      	str	r5, [r3, #0]
    212a:	f7fe f9bb 	bl	4a4 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    212e:	4b0a      	ldr	r3, [pc, #40]	; (2158 <rf_off+0x54>)
    2130:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2132:	f001 f841 	bl	31b8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    213a:	4b08      	ldr	r3, [pc, #32]	; (215c <rf_off+0x58>)
    213c:	601a      	str	r2, [r3, #0]
    213e:	2202      	movs	r2, #2
    2140:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    2142:	7823      	ldrb	r3, [r4, #0]
    2144:	f023 0310 	bic.w	r3, r3, #16
    2148:	7023      	strb	r3, [r4, #0]
}
    214a:	bd38      	pop	{r3, r4, r5, pc}
    214c:	200005c0 	andcs	r0, r0, r0, asr #11
    2150:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2154:	60040000 	andvs	r0, r4, r0
    2158:	43240004 			; <UNDEFINED> instruction: 0x43240004
    215c:	400220a0 	andmi	r2, r2, r0, lsr #1

00002160 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2160:	b570      	push	{r4, r5, r6, lr}
    2162:	4604      	mov	r4, r0
    2164:	460d      	mov	r5, r1
    2166:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    216a:	8862      	ldrh	r2, [r4, #2]
    216c:	42aa      	cmp	r2, r5
    216e:	d00e      	beq.n	218e <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2170:	3e01      	subs	r6, #1
    2172:	d108      	bne.n	2186 <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2174:	8821      	ldrh	r1, [r4, #0]
    2176:	4806      	ldr	r0, [pc, #24]	; (2190 <wait_cmd.constprop.0+0x30>)
    2178:	462b      	mov	r3, r5
    217a:	f7ff f9bb 	bl	14f4 <diag>
			syserror (EHARDWARE, "rt2");
    217e:	2008      	movs	r0, #8
    2180:	4904      	ldr	r1, [pc, #16]	; (2194 <wait_cmd.constprop.0+0x34>)
    2182:	f7fe f9af 	bl	4e4 <__pi_syserror>
		udelay (1);
    2186:	2001      	movs	r0, #1
    2188:	f7fe f942 	bl	410 <udelay>
		if (cmd->status == tstat)
    218c:	e7ed      	b.n	216a <wait_cmd.constprop.0+0xa>
}
    218e:	bd70      	pop	{r4, r5, r6, pc}
    2190:	00004553 	andeq	r4, r0, r3, asr r5
    2194:	00004563 	andeq	r4, r0, r3, ror #10

00002198 <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2198:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    219c:	4b46      	ldr	r3, [pc, #280]	; (22b8 <rf_on.part.0+0x120>)
static void rf_on () {
    219e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21a2:	601a      	str	r2, [r3, #0]
    21a4:	2202      	movs	r2, #2
    21a6:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    21a8:	f000 ffca 	bl	3140 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21ac:	200a      	movs	r0, #10
    21ae:	f7fe f92f 	bl	410 <udelay>
    21b2:	f000 ffd1 	bl	3158 <NOROM_OSCHF_AttemptToSwitchToXosc>
    21b6:	2800      	cmp	r0, #0
    21b8:	d0f8      	beq.n	21ac <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21ba:	2401      	movs	r4, #1
    21bc:	4b3f      	ldr	r3, [pc, #252]	; (22bc <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21be:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21c0:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c2:	f7fe f951 	bl	468 <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    21ca:	4b3d      	ldr	r3, [pc, #244]	; (22c0 <rf_on.part.0+0x128>)
	issue_cmd (
    21cc:	483d      	ldr	r0, [pc, #244]	; (22c4 <rf_on.part.0+0x12c>)
    21ce:	601a      	str	r2, [r3, #0]
    21d0:	f7ff ff62 	bl	2098 <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d4:	f44f 7223 	mov.w	r2, #652	; 0x28c
    21d8:	493b      	ldr	r1, [pc, #236]	; (22c8 <rf_on.part.0+0x130>)
    21da:	483c      	ldr	r0, [pc, #240]	; (22cc <rf_on.part.0+0x134>)
    21dc:	f001 ff06 	bl	3fec <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    21e0:	2200      	movs	r2, #0
    21e2:	4b3b      	ldr	r3, [pc, #236]	; (22d0 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    21e4:	493b      	ldr	r1, [pc, #236]	; (22d4 <rf_on.part.0+0x13c>)
    21e6:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    21e8:	2202      	movs	r2, #2
    21ea:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    21ee:	2203      	movs	r2, #3
    21f0:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    21f4:	2204      	movs	r2, #4
    21f6:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    21f8:	2205      	movs	r2, #5
    21fa:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    21fc:	2206      	movs	r2, #6
    21fe:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2202:	4a35      	ldr	r2, [pc, #212]	; (22d8 <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2204:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    2208:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    220a:	4b34      	ldr	r3, [pc, #208]	; (22dc <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    220c:	4a34      	ldr	r2, [pc, #208]	; (22e0 <rf_on.part.0+0x148>)
      t7 = *pS++;
    220e:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2210:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2214:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    2218:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    221c:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    221e:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2222:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    2226:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    222a:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    222c:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    222e:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2230:	6198      	str	r0, [r3, #24]
    2232:	4618      	mov	r0, r3
   } while (--nIterations);
    2234:	4288      	cmp	r0, r1
    2236:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    223a:	f103 0320 	add.w	r3, r3, #32
    223e:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2240:	d1e5      	bne.n	220e <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2242:	4b28      	ldr	r3, [pc, #160]	; (22e4 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2244:	4828      	ldr	r0, [pc, #160]	; (22e8 <rf_on.part.0+0x150>)
    2246:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    2248:	4b28      	ldr	r3, [pc, #160]	; (22ec <rf_on.part.0+0x154>)
    224a:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    224c:	4b28      	ldr	r3, [pc, #160]	; (22f0 <rf_on.part.0+0x158>)
    224e:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2250:	4b28      	ldr	r3, [pc, #160]	; (22f4 <rf_on.part.0+0x15c>)
    2252:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2254:	4b28      	ldr	r3, [pc, #160]	; (22f8 <rf_on.part.0+0x160>)
    2256:	630b      	str	r3, [r1, #48]	; 0x30
    2258:	f7ff ff1e 	bl	2098 <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    225c:	2001      	movs	r0, #1
    225e:	f001 f943 	bl	34e8 <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2262:	4826      	ldr	r0, [pc, #152]	; (22fc <rf_on.part.0+0x164>)
    2264:	f001 f930 	bl	34c8 <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2268:	4825      	ldr	r0, [pc, #148]	; (2300 <rf_on.part.0+0x168>)
    226a:	f7ff ff15 	bl	2098 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    226e:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2272:	4823      	ldr	r0, [pc, #140]	; (2300 <rf_on.part.0+0x168>)
    2274:	f7ff ff74 	bl	2160 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    2278:	4822      	ldr	r0, [pc, #136]	; (2304 <rf_on.part.0+0x16c>)
    227a:	f7ff ff0d 	bl	2098 <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    227e:	4822      	ldr	r0, [pc, #136]	; (2308 <rf_on.part.0+0x170>)
    2280:	f7ff ff0a 	bl	2098 <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2284:	4820      	ldr	r0, [pc, #128]	; (2308 <rf_on.part.0+0x170>)
    2286:	f44f 6180 	mov.w	r1, #1024	; 0x400
    228a:	f7ff ff69 	bl	2160 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    228e:	4a1f      	ldr	r2, [pc, #124]	; (230c <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2290:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2292:	7813      	ldrb	r3, [r2, #0]
    2294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2298:	f043 0310 	orr.w	r3, r3, #16
    229c:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    229e:	2300      	movs	r3, #0
    22a0:	4a1b      	ldr	r2, [pc, #108]	; (2310 <rf_on.part.0+0x178>)
    22a2:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a4:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    22a8:	4b1a      	ldr	r3, [pc, #104]	; (2314 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22aa:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    22ac:	681b      	ldr	r3, [r3, #0]
}
    22ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    22b2:	691b      	ldr	r3, [r3, #16]
    22b4:	4718      	bx	r3
    22b6:	bf00      	nop
    22b8:	40022090 	mulmi	r2, r0, r0
    22bc:	43240004 			; <UNDEFINED> instruction: 0x43240004
    22c0:	60040000 	andvs	r0, r4, r0
    22c4:	06070051 			; <UNDEFINED> instruction: 0x06070051
    22c8:	00004c5c 	andeq	r4, r0, ip, asr ip
    22cc:	2100041c 	tstcs	r0, ip, lsl r4
    22d0:	21000390 			; <UNDEFINED> instruction: 0x21000390
    22d4:	2100c680 	smlabbcs	r0, r0, r6, ip
    22d8:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    22dc:	2100c000 	mrscs	ip, (UNDEF: 0)
    22e0:	000045a8 	andeq	r4, r0, r8, lsr #11
    22e4:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    22e8:	06070001 	streq	r0, [r7], -r1
    22ec:	1a101020 	bne	406374 <__ccfg+0x3e63cc>
    22f0:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    22f4:	16121611 			; <UNDEFINED> instruction: 0x16121611
    22f8:	70006b54 	andvc	r6, r0, r4, asr fp
    22fc:	200005d4 	ldrdcs	r0, [r0], -r4
    2300:	20000054 	andcs	r0, r0, r4, asr r0
    2304:	20000024 	andcs	r0, r0, r4, lsr #32
    2308:	2000003c 	andcs	r0, r0, ip, lsr r0
    230c:	200005c0 	andcs	r0, r0, r0, asr #11
    2310:	40041014 	andmi	r1, r4, r4, lsl r0
    2314:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

00002318 <rx_int_enable>:
static void rx_int_enable () {
    2318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    231c:	4a2a      	ldr	r2, [pc, #168]	; (23c8 <rx_int_enable+0xb0>)
    231e:	6813      	ldr	r3, [r2, #0]
    2320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    2328:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    232a:	2200      	movs	r2, #0
    232c:	4b27      	ldr	r3, [pc, #156]	; (23cc <rx_int_enable+0xb4>)
    232e:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2330:	681d      	ldr	r5, [r3, #0]
    2332:	2d00      	cmp	r5, #0
    2334:	d1fb      	bne.n	232e <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2336:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2338:	4a25      	ldr	r2, [pc, #148]	; (23d0 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    233a:	4f26      	ldr	r7, [pc, #152]	; (23d4 <rx_int_enable+0xbc>)
    233c:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    233e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 23e0 <rx_int_enable+0xc8>
    2342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    234a:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    234c:	4b22      	ldr	r3, [pc, #136]	; (23d8 <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    234e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 23e4 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2352:	69db      	ldr	r3, [r3, #28]
    2354:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    2356:	7923      	ldrb	r3, [r4, #4]
    2358:	2b03      	cmp	r3, #3
    235a:	d11e      	bne.n	239a <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	7a63      	ldrb	r3, [r4, #9]
    235e:	7a21      	ldrb	r1, [r4, #8]
    2360:	1cda      	adds	r2, r3, #3
    2362:	4291      	cmp	r1, r2
			nr++;
    2364:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2368:	d11c      	bne.n	23a4 <rx_int_enable+0x8c>
    236a:	f898 2000 	ldrb.w	r2, [r8]
    236e:	429a      	cmp	r2, r3
    2370:	d318      	bcc.n	23a4 <rx_int_enable+0x8c>
    2372:	f013 0c01 	ands.w	ip, r3, #1
    2376:	d115      	bne.n	23a4 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    2378:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    237c:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    237e:	5c88      	ldrb	r0, [r1, r2]
    2380:	440b      	add	r3, r1
    2382:	3880      	subs	r0, #128	; 0x80
    2384:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    2386:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    238a:	f8b9 0000 	ldrh.w	r0, [r9]
    238e:	f104 010a 	add.w	r1, r4, #10
    2392:	f7ff fb95 	bl	1ac0 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    2396:	2300      	movs	r3, #0
    2398:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    239a:	2e01      	cmp	r6, #1
    239c:	d006      	beq.n	23ac <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    239e:	2601      	movs	r6, #1
    23a0:	6824      	ldr	r4, [r4, #0]
    23a2:	e7d8      	b.n	2356 <rx_int_enable+0x3e>
				diag ("BAD RX");
    23a4:	4638      	mov	r0, r7
    23a6:	f7ff f8a5 	bl	14f4 <diag>
    23aa:	e7f4      	b.n	2396 <rx_int_enable+0x7e>
	if (nr) {
    23ac:	b14d      	cbz	r5, 23c2 <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23ae:	f7ff f93f 	bl	1630 <lrnd>
}
    23b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b6:	f3c0 4102 	ubfx	r1, r0, #16, #3
    23ba:	3102      	adds	r1, #2
    23bc:	4807      	ldr	r0, [pc, #28]	; (23dc <rx_int_enable+0xc4>)
    23be:	f7fe be4b 	b.w	1058 <__pi_utimer_set>
}
    23c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23c6:	bf00      	nop
    23c8:	40041018 	andmi	r1, r4, r8, lsl r0
    23cc:	40041010 	andmi	r1, r4, r0, lsl r0
    23d0:	40041014 	andmi	r1, r4, r4, lsl r0
    23d4:	00004567 	andeq	r4, r0, r7, ror #10
    23d8:	2000007c 	andcs	r0, r0, ip, ror r0
    23dc:	200005b6 			; <UNDEFINED> instruction: 0x200005b6
    23e0:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    23e4:	200005c8 	andcs	r0, r0, r8, asr #11

000023e8 <cc1350_driver>:
thread (cc1350_driver)
    23e8:	2801      	cmp	r0, #1
    23ea:	b570      	push	{r4, r5, r6, lr}
    23ec:	f000 808b 	beq.w	2506 <cc1350_driver+0x11e>
    23f0:	2802      	cmp	r0, #2
    23f2:	f000 80bd 	beq.w	2570 <cc1350_driver+0x188>
    23f6:	2800      	cmp	r0, #0
    23f8:	f040 80ce 	bne.w	2598 <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    23fc:	4c68      	ldr	r4, [pc, #416]	; (25a0 <cc1350_driver+0x1b8>)
    23fe:	f994 3000 	ldrsb.w	r3, [r4]
    2402:	2b00      	cmp	r3, #0
    2404:	da05      	bge.n	2412 <cc1350_driver+0x2a>
			rf_off ();
    2406:	f7ff fe7d 	bl	2104 <rf_off>
			_BIC (dstate,
    240a:	7823      	ldrb	r3, [r4, #0]
    240c:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2410:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2412:	7823      	ldrb	r3, [r4, #0]
    2414:	0798      	lsls	r0, r3, #30
    2416:	f003 0201 	and.w	r2, r3, #1
    241a:	d51e      	bpl.n	245a <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    241c:	b90a      	cbnz	r2, 2422 <cc1350_driver+0x3a>
				rx_de ();
    241e:	f7ff fe5f 	bl	20e0 <rx_de>
		if (paylen == 0) {
    2422:	4d60      	ldr	r5, [pc, #384]	; (25a4 <cc1350_driver+0x1bc>)
    2424:	4e60      	ldr	r6, [pc, #384]	; (25a8 <cc1350_driver+0x1c0>)
    2426:	682b      	ldr	r3, [r5, #0]
    2428:	2b00      	cmp	r3, #0
    242a:	d14c      	bne.n	24c6 <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    242c:	4b5f      	ldr	r3, [pc, #380]	; (25ac <cc1350_driver+0x1c4>)
    242e:	4629      	mov	r1, r5
    2430:	8818      	ldrh	r0, [r3, #0]
    2432:	f7ff fb93 	bl	1b5c <tcvphy_get>
    2436:	6170      	str	r0, [r6, #20]
    2438:	2800      	cmp	r0, #0
    243a:	d02f      	beq.n	249c <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    243c:	4a5c      	ldr	r2, [pc, #368]	; (25b0 <cc1350_driver+0x1c8>)
				paylen -= 2;
    243e:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2440:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2442:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2444:	4293      	cmp	r3, r2
				paylen -= 2;
    2446:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2448:	dc03      	bgt.n	2452 <cc1350_driver+0x6a>
    244a:	2b00      	cmp	r3, #0
    244c:	dd01      	ble.n	2452 <cc1350_driver+0x6a>
    244e:	07db      	lsls	r3, r3, #31
    2450:	d51b      	bpl.n	248a <cc1350_driver+0xa2>
    2452:	200a      	movs	r0, #10
    2454:	4957      	ldr	r1, [pc, #348]	; (25b4 <cc1350_driver+0x1cc>)
    2456:	f7fe f845 	bl	4e4 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    245a:	2a00      	cmp	r2, #0
    245c:	d0e1      	beq.n	2422 <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    245e:	06d9      	lsls	r1, r3, #27
    2460:	d50d      	bpl.n	247e <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2462:	4855      	ldr	r0, [pc, #340]	; (25b8 <cc1350_driver+0x1d0>)
    2464:	69c3      	ldr	r3, [r0, #28]
    2466:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    2468:	2300      	movs	r3, #0
    246a:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    246c:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    246e:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2470:	f7ff fe12 	bl	2098 <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2474:	7823      	ldrb	r3, [r4, #0]
    2476:	f043 0302 	orr.w	r3, r3, #2
    247a:	7023      	strb	r3, [r4, #0]
    247c:	e7d1      	b.n	2422 <cc1350_driver+0x3a>
    247e:	f7ff fe8b 	bl	2198 <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2482:	7823      	ldrb	r3, [r4, #0]
    2484:	079a      	lsls	r2, r3, #30
    2486:	d5ec      	bpl.n	2462 <cc1350_driver+0x7a>
    2488:	e7cb      	b.n	2422 <cc1350_driver+0x3a>
				if (statid != 0xffff)
    248a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    248e:	4b4b      	ldr	r3, [pc, #300]	; (25bc <cc1350_driver+0x1d4>)
    2490:	881b      	ldrh	r3, [r3, #0]
    2492:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2494:	bf18      	it	ne
    2496:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2498:	682b      	ldr	r3, [r5, #0]
    249a:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    249c:	6829      	ldr	r1, [r5, #0]
    249e:	b991      	cbnz	r1, 24c6 <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    24a0:	4b47      	ldr	r3, [pc, #284]	; (25c0 <cc1350_driver+0x1d8>)
    24a2:	6818      	ldr	r0, [r3, #0]
    24a4:	f7fe fe4c 	bl	1140 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    24a8:	7823      	ldrb	r3, [r4, #0]
    24aa:	079d      	lsls	r5, r3, #30
    24ac:	d503      	bpl.n	24b6 <cc1350_driver+0xce>
				rx_int_enable ();
    24ae:	f7ff ff33 	bl	2318 <rx_int_enable>
			release;
    24b2:	f7fe fbd5 	bl	c60 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    24b6:	06dc      	lsls	r4, r3, #27
    24b8:	d5fb      	bpl.n	24b2 <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    24ba:	2102      	movs	r1, #2
    24bc:	4b41      	ldr	r3, [pc, #260]	; (25c4 <cc1350_driver+0x1dc>)
    24be:	8818      	ldrh	r0, [r3, #0]
    24c0:	f7fe fe84 	bl	11cc <delay>
    24c4:	e7f5      	b.n	24b2 <cc1350_driver+0xca>
		if (bckf_timer) {
    24c6:	4d40      	ldr	r5, [pc, #256]	; (25c8 <cc1350_driver+0x1e0>)
    24c8:	882b      	ldrh	r3, [r5, #0]
    24ca:	b163      	cbz	r3, 24e6 <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    24cc:	4b3c      	ldr	r3, [pc, #240]	; (25c0 <cc1350_driver+0x1d8>)
    24ce:	2100      	movs	r1, #0
    24d0:	6818      	ldr	r0, [r3, #0]
    24d2:	f7fe fe35 	bl	1140 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    24d6:	8828      	ldrh	r0, [r5, #0]
    24d8:	2100      	movs	r1, #0
    24da:	f7fe fe77 	bl	11cc <delay>
			if (dstate & DSTATE_RXAC)
    24de:	7823      	ldrb	r3, [r4, #0]
    24e0:	0798      	lsls	r0, r3, #30
    24e2:	d5e6      	bpl.n	24b2 <cc1350_driver+0xca>
    24e4:	e7e3      	b.n	24ae <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    24e6:	7823      	ldrb	r3, [r4, #0]
    24e8:	06d9      	lsls	r1, r3, #27
    24ea:	d401      	bmi.n	24f0 <cc1350_driver+0x108>
    24ec:	f7ff fe54 	bl	2198 <rf_on.part.0>
		rx_de ();
    24f0:	f7ff fdf6 	bl	20e0 <rx_de>
		RF_cmdPropTx . status = 0;
    24f4:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24f6:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    24fa:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24fc:	4b33      	ldr	r3, [pc, #204]	; (25cc <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    24fe:	4834      	ldr	r0, [pc, #208]	; (25d0 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2500:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2502:	f7ff fdc9 	bl	2098 <issue_cmd>
		if (dstate & DSTATE_IRST)
    2506:	4b26      	ldr	r3, [pc, #152]	; (25a0 <cc1350_driver+0x1b8>)
    2508:	f993 3000 	ldrsb.w	r3, [r3]
    250c:	2b00      	cmp	r3, #0
    250e:	f6ff af75 	blt.w	23fc <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2512:	4b2e      	ldr	r3, [pc, #184]	; (25cc <cc1350_driver+0x1e4>)
    2514:	681a      	ldr	r2, [r3, #0]
    2516:	0792      	lsls	r2, r2, #30
    2518:	d402      	bmi.n	2520 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    251a:	2101      	movs	r1, #1
    251c:	4608      	mov	r0, r1
    251e:	e7cf      	b.n	24c0 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2520:	4821      	ldr	r0, [pc, #132]	; (25a8 <cc1350_driver+0x1c0>)
    2522:	4c2c      	ldr	r4, [pc, #176]	; (25d4 <cc1350_driver+0x1ec>)
    2524:	8842      	ldrh	r2, [r0, #2]
    2526:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    252a:	d018      	beq.n	255e <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    252c:	7822      	ldrb	r2, [r4, #0]
    252e:	2a0f      	cmp	r2, #15
    2530:	d909      	bls.n	2546 <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2532:	2200      	movs	r2, #0
    2534:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2536:	f06f 0202 	mvn.w	r2, #2
    253a:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    253c:	f7ff fdac 	bl	2098 <issue_cmd>
				proceed (DR_XMIT);
    2540:	2001      	movs	r0, #1
    2542:	f7fe fdf3 	bl	112c <proceed>
			txtries++;
    2546:	7823      	ldrb	r3, [r4, #0]
    2548:	3301      	adds	r3, #1
    254a:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    254c:	f7ff f870 	bl	1630 <lrnd>
    2550:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2554:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2556:	481c      	ldr	r0, [pc, #112]	; (25c8 <cc1350_driver+0x1e0>)
    2558:	f7fe fd7e 	bl	1058 <__pi_utimer_set>
		goto DR_LOOP__;
    255c:	e74e      	b.n	23fc <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    255e:	6940      	ldr	r0, [r0, #20]
    2560:	f7ff fb36 	bl	1bd0 <tcvphy_end>
		paylen = 0;
    2564:	2300      	movs	r3, #0
    2566:	4a0f      	ldr	r2, [pc, #60]	; (25a4 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	2102      	movs	r1, #2
		paylen = 0;
    256a:	6013      	str	r3, [r2, #0]
		txtries = 0;
    256c:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    256e:	e7f2      	b.n	2556 <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2570:	4b0b      	ldr	r3, [pc, #44]	; (25a0 <cc1350_driver+0x1b8>)
    2572:	781a      	ldrb	r2, [r3, #0]
    2574:	f993 3000 	ldrsb.w	r3, [r3]
    2578:	2b00      	cmp	r3, #0
    257a:	f6ff af3f 	blt.w	23fc <cc1350_driver+0x14>
    257e:	07d3      	lsls	r3, r2, #31
    2580:	f53f af3c 	bmi.w	23fc <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2584:	4b09      	ldr	r3, [pc, #36]	; (25ac <cc1350_driver+0x1c4>)
    2586:	8818      	ldrh	r0, [r3, #0]
    2588:	f7ff fb08 	bl	1b9c <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	2800      	cmp	r0, #0
    258e:	f47f af35 	bne.w	23fc <cc1350_driver+0x14>
			rf_off ();
    2592:	f7ff fdb7 	bl	2104 <rf_off>
    2596:	e731      	b.n	23fc <cc1350_driver+0x14>
endthread
    2598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    259c:	f7fe bd3e 	b.w	101c <__pi_badstate>
    25a0:	200005c0 	andcs	r0, r0, r0, asr #11
    25a4:	200005c4 	andcs	r0, r0, r4, asr #11
    25a8:	200000a0 	andcs	r0, r0, r0, lsr #1
    25ac:	200005c8 	andcs	r0, r0, r8, asr #11
    25b0:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    25b4:	0000456e 	andeq	r4, r0, lr, ror #10
    25b8:	2000007c 	andcs	r0, r0, ip, ror r0
    25bc:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    25c0:	200005cc 	andcs	r0, r0, ip, asr #11
    25c4:	20000038 	andcs	r0, r0, r8, lsr r0
    25c8:	200005b6 			; <UNDEFINED> instruction: 0x200005b6
    25cc:	40041010 	andmi	r1, r4, r0, lsl r0
    25d0:	20000008 	andcs	r0, r0, r8
    25d4:	200005f2 	strdcs	r0, [r0], -r2

000025d8 <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    25d8:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25da:	4a15      	ldr	r2, [pc, #84]	; (2630 <RFCCPE0IntHandler+0x58>)
    25dc:	6813      	ldr	r3, [r2, #0]
    25de:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    25e0:	bfbf      	itttt	lt
    25e2:	4914      	ldrlt	r1, [pc, #80]	; (2634 <RFCCPE0IntHandler+0x5c>)
    25e4:	780b      	ldrblt	r3, [r1, #0]
    25e6:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    25ea:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25ec:	2100      	movs	r1, #0
    25ee:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f0:	6813      	ldr	r3, [r2, #0]
    25f2:	2b00      	cmp	r3, #0
    25f4:	d1fb      	bne.n	25ee <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    25f6:	4a10      	ldr	r2, [pc, #64]	; (2638 <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    25f8:	4c10      	ldr	r4, [pc, #64]	; (263c <RFCCPE0IntHandler+0x64>)
    25fa:	6811      	ldr	r1, [r2, #0]
    25fc:	6013      	str	r3, [r2, #0]
    25fe:	4a10      	ldr	r2, [pc, #64]	; (2640 <RFCCPE0IntHandler+0x68>)
    2600:	6824      	ldr	r4, [r4, #0]
    2602:	6811      	ldr	r1, [r2, #0]
    2604:	4608      	mov	r0, r1
    2606:	f830 2b10 	ldrh.w	r2, [r0], #16
    260a:	f002 0207 	and.w	r2, r2, #7
    260e:	429a      	cmp	r2, r3
    2610:	dd08      	ble.n	2624 <RFCCPE0IntHandler+0x4c>
    2612:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    2616:	3301      	adds	r3, #1
    2618:	42a5      	cmp	r5, r4
    261a:	d1f8      	bne.n	260e <RFCCPE0IntHandler+0x36>
    261c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2620:	889b      	ldrh	r3, [r3, #4]
    2622:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2624:	4a07      	ldr	r2, [pc, #28]	; (2644 <RFCCPE0IntHandler+0x6c>)
    2626:	7813      	ldrb	r3, [r2, #0]
    2628:	f043 0302 	orr.w	r3, r3, #2
    262c:	7013      	strb	r3, [r2, #0]
}
    262e:	bd30      	pop	{r4, r5, pc}
    2630:	40041010 	andmi	r1, r4, r0, lsl r0
    2634:	200005c0 	andcs	r0, r0, r0, asr #11
    2638:	40041014 	andmi	r1, r4, r4, lsl r0
    263c:	200005cc 	andcs	r0, r0, ip, asr #11
    2640:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2644:	20000b4c 	andcs	r0, r0, ip, asr #22

00002648 <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    2648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    264c:	4c49      	ldr	r4, [pc, #292]	; (2774 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    264e:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2650:	7822      	ldrb	r2, [r4, #0]
    2652:	b11a      	cbz	r2, 265c <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2654:	2009      	movs	r0, #9
    2656:	4948      	ldr	r1, [pc, #288]	; (2778 <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    2658:	f7fd ff44 	bl	4e4 <__pi_syserror>
	if (mbs == 0)
    265c:	b129      	cbz	r1, 266a <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    265e:	1f8a      	subs	r2, r1, #6
    2660:	2af4      	cmp	r2, #244	; 0xf4
    2662:	d903      	bls.n	266c <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2664:	2003      	movs	r0, #3
    2666:	4945      	ldr	r1, [pc, #276]	; (277c <phys_cc1350+0x134>)
    2668:	e7f6      	b.n	2658 <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    266a:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    266c:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    266e:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2672:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2674:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    2678:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    267a:	7820      	ldrb	r0, [r4, #0]
    267c:	469b      	mov	fp, r3
    267e:	300d      	adds	r0, #13
    2680:	f7fe febe 	bl	1400 <__pi_malloc>
		if (db == NULL)
    2684:	4603      	mov	r3, r0
    2686:	b920      	cbnz	r0, 2692 <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    2688:	2006      	movs	r0, #6
    268a:	493b      	ldr	r1, [pc, #236]	; (2778 <phys_cc1350+0x130>)
    268c:	e7e4      	b.n	2658 <phys_cc1350+0x10>
    268e:	46b8      	mov	r8, r7
    2690:	e7f3      	b.n	267a <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2692:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    2696:	2f00      	cmp	r7, #0
    2698:	d03e      	beq.n	2718 <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    269a:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    269e:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    26a0:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    26a2:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    26a4:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    26a8:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    26ac:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    26ae:	d1ee      	bne.n	268e <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    26b0:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b2:	2008      	movs	r0, #8
    26b4:	f7fe fea4 	bl	1400 <__pi_malloc>
    26b8:	4b31      	ldr	r3, [pc, #196]	; (2780 <phys_cc1350+0x138>)
    26ba:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    26bc:	2800      	cmp	r0, #0
    26be:	d0e3      	beq.n	2688 <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    26c0:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    26c2:	2500      	movs	r5, #0
    26c4:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26c6:	492f      	ldr	r1, [pc, #188]	; (2784 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    26c8:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26ca:	4a2f      	ldr	r2, [pc, #188]	; (2788 <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26cc:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26ce:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d0:	89da      	ldrh	r2, [r3, #14]
    26d2:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    26d6:	f042 0206 	orr.w	r2, r2, #6
    26da:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    26dc:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26de:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    26e2:	3b02      	subs	r3, #2
    26e4:	7023      	strb	r3, [r4, #0]
	physid = phy;
    26e6:	4b29      	ldr	r3, [pc, #164]	; (278c <phys_cc1350+0x144>)
    26e8:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ea:	f7ff f9c1 	bl	1a70 <tcvphy_reg>
    26ee:	4b28      	ldr	r3, [pc, #160]	; (2790 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f0:	2207      	movs	r2, #7
    26f2:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f4:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f6:	462b      	mov	r3, r5
    26f8:	4826      	ldr	r0, [pc, #152]	; (2794 <phys_cc1350+0x14c>)
    26fa:	f7fe fefb 	bl	14f4 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    26fe:	4826      	ldr	r0, [pc, #152]	; (2798 <phys_cc1350+0x150>)
    2700:	f7fe fc94 	bl	102c <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2704:	4629      	mov	r1, r5
    2706:	4825      	ldr	r0, [pc, #148]	; (279c <phys_cc1350+0x154>)
    2708:	f7fe fece 	bl	14a8 <__pi_fork>
    270c:	4b24      	ldr	r3, [pc, #144]	; (27a0 <phys_cc1350+0x158>)
    270e:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    2710:	b920      	cbnz	r0, 271c <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    2712:	2004      	movs	r0, #4
    2714:	4918      	ldr	r1, [pc, #96]	; (2778 <phys_cc1350+0x130>)
    2716:	e79f      	b.n	2658 <phys_cc1350+0x10>
    2718:	4605      	mov	r5, r0
    271a:	e7c0      	b.n	269e <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    271c:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    2720:	4c20      	ldr	r4, [pc, #128]	; (27a4 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2722:	4921      	ldr	r1, [pc, #132]	; (27a8 <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2724:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2726:	4b21      	ldr	r3, [pc, #132]	; (27ac <phys_cc1350+0x164>)
    2728:	781a      	ldrb	r2, [r3, #0]
    272a:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    272c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2730:	8858      	ldrh	r0, [r3, #2]
    2732:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    2736:	6922      	ldr	r2, [r4, #16]
    2738:	f003 030f 	and.w	r3, r3, #15
    273c:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    2740:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    2744:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    2748:	f022 020f 	bic.w	r2, r2, #15
    274c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    2750:	4313      	orrs	r3, r2
    2752:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    2754:	f7ff fbc8 	bl	1ee8 <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2758:	4b15      	ldr	r3, [pc, #84]	; (27b0 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    275a:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    275e:	f000 fe27 	bl	33b0 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2762:	4620      	mov	r0, r4
    2764:	4913      	ldr	r1, [pc, #76]	; (27b4 <phys_cc1350+0x16c>)
    2766:	f000 fd7b 	bl	3260 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    276a:	4b13      	ldr	r3, [pc, #76]	; (27b8 <phys_cc1350+0x170>)
    276c:	601d      	str	r5, [r3, #0]
}
    276e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2772:	bf00      	nop
    2774:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2778:	00004576 	andeq	r4, r0, r6, ror r5
    277c:	0000457b 	andeq	r4, r0, fp, ror r5
    2780:	2000007c 	andcs	r0, r0, ip, ror r0
    2784:	00001f09 	andeq	r1, r0, r9, lsl #30
    2788:	200005e4 	andcs	r0, r0, r4, ror #11
    278c:	200005c8 	andcs	r0, r0, r8, asr #11
    2790:	200005cc 	andcs	r0, r0, ip, asr #11
    2794:	00004583 	andeq	r4, r0, r3, lsl #11
    2798:	200005b6 			; <UNDEFINED> instruction: 0x200005b6
    279c:	000023e9 	andeq	r2, r0, r9, ror #7
    27a0:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    27a4:	20000054 	andcs	r0, r0, r4, asr r0
    27a8:	00004ee8 	andeq	r4, r0, r8, ror #29
    27ac:	2000003a 	andcs	r0, r0, sl, lsr r0
    27b0:	400821d0 	ldrdmi	r2, [r8], -r0
    27b4:	200005d4 	ldrdcs	r0, [r0], -r4
    27b8:	40041018 	andmi	r1, r4, r8, lsl r0

000027bc <tcv_clo_null>:
    27bc:	b510      	push	{r4, lr}
    27be:	4a07      	ldr	r2, [pc, #28]	; (27dc <tcv_clo_null+0x20>)
    27c0:	4603      	mov	r3, r0
    27c2:	6812      	ldr	r2, [r2, #0]
    27c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27c8:	b132      	cbz	r2, 27d8 <tcv_clo_null+0x1c>
    27ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    27ce:	428c      	cmp	r4, r1
    27d0:	bf04      	itt	eq
    27d2:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    27d6:	2000      	moveq	r0, #0
    27d8:	bd10      	pop	{r4, pc}
    27da:	bf00      	nop
    27dc:	200005f4 	strdcs	r0, [r0], -r4

000027e0 <tcv_rcv_null>:
    27e0:	4907      	ldr	r1, [pc, #28]	; (2800 <tcv_rcv_null+0x20>)
    27e2:	9a00      	ldr	r2, [sp, #0]
    27e4:	6809      	ldr	r1, [r1, #0]
    27e6:	b909      	cbnz	r1, 27ec <tcv_rcv_null+0xc>
    27e8:	2000      	movs	r0, #0
    27ea:	4770      	bx	lr
    27ec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    27f0:	6019      	str	r1, [r3, #0]
    27f2:	3101      	adds	r1, #1
    27f4:	d0f8      	beq.n	27e8 <tcv_rcv_null+0x8>
    27f6:	2300      	movs	r3, #0
    27f8:	2002      	movs	r0, #2
    27fa:	8053      	strh	r3, [r2, #2]
    27fc:	8013      	strh	r3, [r2, #0]
    27fe:	4770      	bx	lr
    2800:	200005f4 	strdcs	r0, [r0], -r4

00002804 <tcv_frm_null>:
    2804:	2000      	movs	r0, #0
    2806:	8048      	strh	r0, [r1, #2]
    2808:	8008      	strh	r0, [r1, #0]
    280a:	4770      	bx	lr

0000280c <tcv_out_null>:
    280c:	2004      	movs	r0, #4
    280e:	4770      	bx	lr

00002810 <tcv_xmt_null>:
    2810:	2001      	movs	r0, #1
    2812:	4770      	bx	lr

00002814 <tcv_ope_null>:
    2814:	b570      	push	{r4, r5, r6, lr}
    2816:	4c0f      	ldr	r4, [pc, #60]	; (2854 <tcv_ope_null+0x40>)
    2818:	4605      	mov	r5, r0
    281a:	6823      	ldr	r3, [r4, #0]
    281c:	460e      	mov	r6, r1
    281e:	b94b      	cbnz	r3, 2834 <tcv_ope_null+0x20>
    2820:	200c      	movs	r0, #12
    2822:	f7fe fded 	bl	1400 <__pi_malloc>
    2826:	6020      	str	r0, [r4, #0]
    2828:	b178      	cbz	r0, 284a <tcv_ope_null+0x36>
    282a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    282e:	e9c0 3300 	strd	r3, r3, [r0]
    2832:	6083      	str	r3, [r0, #8]
    2834:	6823      	ldr	r3, [r4, #0]
    2836:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    283a:	3201      	adds	r2, #1
    283c:	bf06      	itte	eq
    283e:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    2842:	2000      	moveq	r0, #0
    2844:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2848:	bd70      	pop	{r4, r5, r6, pc}
    284a:	2006      	movs	r0, #6
    284c:	4902      	ldr	r1, [pc, #8]	; (2858 <tcv_ope_null+0x44>)
    284e:	f7fd fe49 	bl	4e4 <__pi_syserror>
    2852:	bf00      	nop
    2854:	200005f4 	strdcs	r0, [r0], -r4
    2858:	00004ef4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>

0000285c <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    285c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    285e:	4b18      	ldr	r3, [pc, #96]	; (28c0 <__outserial+0x64>)
    2860:	681b      	ldr	r3, [r3, #0]
    2862:	689d      	ldr	r5, [r3, #8]
    2864:	b130      	cbz	r0, 2874 <__outserial+0x18>
    2866:	280a      	cmp	r0, #10
    2868:	d00d      	beq.n	2886 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    286a:	b003      	add	sp, #12
    286c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2870:	f7fe bbd4 	b.w	101c <__pi_badstate>
	ptr = data;
    2874:	4b13      	ldr	r3, [pc, #76]	; (28c4 <__outserial+0x68>)
    2876:	4c14      	ldr	r4, [pc, #80]	; (28c8 <__outserial+0x6c>)
    2878:	601d      	str	r5, [r3, #0]
	if (*ptr)
    287a:	782b      	ldrb	r3, [r5, #0]
    287c:	b1e3      	cbz	r3, 28b8 <__outserial+0x5c>
		len = strlen (ptr);
    287e:	4628      	mov	r0, r5
    2880:	f7fe fcd2 	bl	1228 <__pi_strlen>
    2884:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2886:	4e0f      	ldr	r6, [pc, #60]	; (28c4 <__outserial+0x68>)
    2888:	4f0f      	ldr	r7, [pc, #60]	; (28c8 <__outserial+0x6c>)
    288a:	883b      	ldrh	r3, [r7, #0]
    288c:	2201      	movs	r2, #1
    288e:	9300      	str	r3, [sp, #0]
    2890:	2100      	movs	r1, #0
    2892:	6833      	ldr	r3, [r6, #0]
    2894:	200a      	movs	r0, #10
    2896:	f7fe fcf1 	bl	127c <io>
	ptr += quant;
    289a:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    289c:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    289e:	4403      	add	r3, r0
	len -= quant;
    28a0:	1a24      	subs	r4, r4, r0
	ptr += quant;
    28a2:	6033      	str	r3, [r6, #0]
	len -= quant;
    28a4:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    28a6:	2c00      	cmp	r4, #0
    28a8:	d1ef      	bne.n	288a <__outserial+0x2e>
		ufree (data);
    28aa:	4628      	mov	r0, r5
    28ac:	f7fe fd5c 	bl	1368 <__pi_free>
		finish;
    28b0:	4620      	mov	r0, r4
    28b2:	f7fe fd7d 	bl	13b0 <kill>
    28b6:	e7e8      	b.n	288a <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28b8:	786b      	ldrb	r3, [r5, #1]
    28ba:	3303      	adds	r3, #3
    28bc:	6023      	str	r3, [r4, #0]
    28be:	e7e2      	b.n	2886 <__outserial+0x2a>
    28c0:	20000b68 	andcs	r0, r0, r8, ror #22
    28c4:	200005fc 	strdcs	r0, [r0], -ip
    28c8:	200005f8 	strdcs	r0, [r0], -r8

000028cc <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    28cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28ce:	4d42      	ldr	r5, [pc, #264]	; (29d8 <__inserial+0x10c>)
    28d0:	682a      	ldr	r2, [r5, #0]
    28d2:	6894      	ldr	r4, [r2, #8]
    28d4:	2803      	cmp	r0, #3
    28d6:	d87a      	bhi.n	29ce <__inserial+0x102>
    28d8:	e8df f000 	tbb	[pc, r0]
    28dc:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    28e0:	4b3e      	ldr	r3, [pc, #248]	; (29dc <__inserial+0x110>)
    28e2:	681b      	ldr	r3, [r3, #0]
    28e4:	b113      	cbz	r3, 28ec <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    28e6:	2000      	movs	r0, #0
    28e8:	f7fe fd62 	bl	13b0 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28ec:	2040      	movs	r0, #64	; 0x40
    28ee:	f7fe fd87 	bl	1400 <__pi_malloc>
    28f2:	4b3b      	ldr	r3, [pc, #236]	; (29e0 <__inserial+0x114>)
    28f4:	4604      	mov	r4, r0
    28f6:	6018      	str	r0, [r3, #0]
    28f8:	b918      	cbnz	r0, 2902 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    28fa:	f7fe fdef 	bl	14dc <__pi_waitmem>
		release;
    28fe:	f7fe f9af 	bl	c60 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    2902:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    2904:	682b      	ldr	r3, [r5, #0]
    2906:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    2908:	4b36      	ldr	r3, [pc, #216]	; (29e4 <__inserial+0x118>)
    290a:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    290c:	2001      	movs	r0, #1
    290e:	2200      	movs	r2, #0
    2910:	4d33      	ldr	r5, [pc, #204]	; (29e0 <__inserial+0x114>)
    2912:	9000      	str	r0, [sp, #0]
    2914:	682b      	ldr	r3, [r5, #0]
    2916:	4611      	mov	r1, r2
    2918:	f7fe fcb0 	bl	127c <io>
	if (ptr == (char*) data) { // new line
    291c:	682b      	ldr	r3, [r5, #0]
    291e:	42a3      	cmp	r3, r4
    2920:	d10d      	bne.n	293e <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    2922:	7823      	ldrb	r3, [r4, #0]
    2924:	b923      	cbnz	r3, 2930 <__inserial+0x64>
			ptr++;
    2926:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    2928:	2002      	movs	r0, #2
			ptr++;
    292a:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    292c:	f7fe fbfe 	bl	112c <proceed>
		}

		if (*ptr < 0x20)
    2930:	682b      	ldr	r3, [r5, #0]
    2932:	781b      	ldrb	r3, [r3, #0]
    2934:	2b1f      	cmp	r3, #31
    2936:	d802      	bhi.n	293e <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    2938:	2001      	movs	r0, #1
    293a:	f7fe fbf7 	bl	112c <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    293e:	682b      	ldr	r3, [r5, #0]
    2940:	781a      	ldrb	r2, [r3, #0]
    2942:	2a0a      	cmp	r2, #10
    2944:	d001      	beq.n	294a <__inserial+0x7e>
    2946:	2a0d      	cmp	r2, #13
    2948:	d105      	bne.n	2956 <__inserial+0x8a>
		*ptr = '\0';
    294a:	2000      	movs	r0, #0
    294c:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    294e:	4b23      	ldr	r3, [pc, #140]	; (29dc <__inserial+0x110>)
    2950:	601c      	str	r4, [r3, #0]
		finish;
    2952:	f7fe fd2d 	bl	13b0 <kill>
	}

	if (len) {
    2956:	4923      	ldr	r1, [pc, #140]	; (29e4 <__inserial+0x118>)
    2958:	680b      	ldr	r3, [r1, #0]
    295a:	b123      	cbz	r3, 2966 <__inserial+0x9a>
		ptr++;
    295c:	682a      	ldr	r2, [r5, #0]
		len--;
    295e:	3b01      	subs	r3, #1
		ptr++;
    2960:	3201      	adds	r2, #1
    2962:	602a      	str	r2, [r5, #0]
		len--;
    2964:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    2966:	2001      	movs	r0, #1
    2968:	f7fe fbe0 	bl	112c <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    296c:	2301      	movs	r3, #1
    296e:	2200      	movs	r2, #0
    2970:	4d1b      	ldr	r5, [pc, #108]	; (29e0 <__inserial+0x114>)
    2972:	9300      	str	r3, [sp, #0]
    2974:	4611      	mov	r1, r2
    2976:	682b      	ldr	r3, [r5, #0]
    2978:	2002      	movs	r0, #2
    297a:	f7fe fc7f 	bl	127c <io>
	len -= 2;
    297e:	4819      	ldr	r0, [pc, #100]	; (29e4 <__inserial+0x118>)
    2980:	6803      	ldr	r3, [r0, #0]
    2982:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    2984:	682b      	ldr	r3, [r5, #0]
    2986:	f813 1b01 	ldrb.w	r1, [r3], #1
    298a:	3101      	adds	r1, #1
		len = *ptr + 1;
    298c:	4291      	cmp	r1, r2
    298e:	bfd4      	ite	le
    2990:	6001      	strle	r1, [r0, #0]
    2992:	6002      	strgt	r2, [r0, #0]
	ptr++;
    2994:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    2996:	2200      	movs	r2, #0
    2998:	4f12      	ldr	r7, [pc, #72]	; (29e4 <__inserial+0x118>)
    299a:	4d11      	ldr	r5, [pc, #68]	; (29e0 <__inserial+0x114>)
    299c:	883b      	ldrh	r3, [r7, #0]
    299e:	4611      	mov	r1, r2
    29a0:	9300      	str	r3, [sp, #0]
    29a2:	682b      	ldr	r3, [r5, #0]
    29a4:	2003      	movs	r0, #3
    29a6:	f7fe fc69 	bl	127c <io>
	len -= quant;
    29aa:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29ac:	4606      	mov	r6, r0
	len -= quant;
    29ae:	1a18      	subs	r0, r3, r0
    29b0:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    29b2:	b918      	cbnz	r0, 29bc <__inserial+0xf0>
		__inpline = (char*)data;
    29b4:	4b09      	ldr	r3, [pc, #36]	; (29dc <__inserial+0x110>)
    29b6:	601c      	str	r4, [r3, #0]
		finish;
    29b8:	f7fe fcfa 	bl	13b0 <kill>
	}
	ptr += quant;
    29bc:	6828      	ldr	r0, [r5, #0]
    29be:	4430      	add	r0, r6
    29c0:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    29c2:	2003      	movs	r0, #3

endstrand
    29c4:	b003      	add	sp, #12
    29c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    29ca:	f7fe bbaf 	b.w	112c <proceed>
endstrand
    29ce:	b003      	add	sp, #12
    29d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    29d4:	f7fe bb22 	b.w	101c <__pi_badstate>
    29d8:	20000b68 	andcs	r0, r0, r8, ror #22
    29dc:	20000600 	andcs	r0, r0, r0, lsl #12
    29e0:	20000608 	andcs	r0, r0, r8, lsl #12
    29e4:	20000604 	andcs	r0, r0, r4, lsl #12

000029e8 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    29e8:	f8dc 2000 	ldr.w	r2, [ip]
    29ec:	b132      	cbz	r2, 29fc <outc.5724+0x14>
    29ee:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    29f2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    29f6:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    29f8:	bf88      	it	hi
    29fa:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    29fc:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2a00:	3301      	adds	r3, #1
    2a02:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    2a06:	4770      	bx	lr

00002a08 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2a0c:	461c      	mov	r4, r3
    2a0e:	ab0c      	add	r3, sp, #48	; 0x30
    2a10:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    2a12:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    2a14:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    2a16:	4f86      	ldr	r7, [pc, #536]	; (2c30 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a18:	9001      	str	r0, [sp, #4]
    2a1a:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    2a1e:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    2a22:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    2a26:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    2a2a:	d118      	bne.n	2a5e <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    2a2c:	f892 9001 	ldrb.w	r9, [r2, #1]
    2a30:	1c95      	adds	r5, r2, #2
				outc ('\\');
    2a32:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    2a36:	f1b9 0f00 	cmp.w	r9, #0
    2a3a:	d10b      	bne.n	2a54 <__pi_vfparse+0x4c>
				outc ('\\');
    2a3c:	205c      	movs	r0, #92	; 0x5c
    2a3e:	f7ff ffd3 	bl	29e8 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    2a42:	4648      	mov	r0, r9
    2a44:	f10d 0c04 	add.w	ip, sp, #4
    2a48:	f7ff ffce 	bl	29e8 <outc.5724>
			if (c == '\0')
    2a4c:	f1b9 0f00 	cmp.w	r9, #0
    2a50:	d103      	bne.n	2a5a <__pi_vfparse+0x52>
    2a52:	e027      	b.n	2aa4 <__pi_vfparse+0x9c>
			outc (c);
    2a54:	4648      	mov	r0, r9
				outc (val);
    2a56:	f7ff ffc7 	bl	29e8 <outc.5724>
				val = (word) va_arg (ap, aword);
    2a5a:	462a      	mov	r2, r5
    2a5c:	e7e1      	b.n	2a22 <__pi_vfparse+0x1a>
		if (c == '%') {
    2a5e:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    2a62:	f040 80e2 	bne.w	2c2a <__pi_vfparse+0x222>
			c = *fm++;
    2a66:	f892 8001 	ldrb.w	r8, [r2, #1]
    2a6a:	1c95      	adds	r5, r2, #2
			switch (c) {
    2a6c:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    2a70:	f000 80cd 	beq.w	2c0e <__pi_vfparse+0x206>
    2a74:	d81b      	bhi.n	2aae <__pi_vfparse+0xa6>
    2a76:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    2a7a:	d033      	beq.n	2ae4 <__pi_vfparse+0xdc>
    2a7c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2a80:	d067      	beq.n	2b52 <__pi_vfparse+0x14a>
    2a82:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    2a86:	f000 80bc 	beq.w	2c02 <__pi_vfparse+0x1fa>
				outc ('%');
    2a8a:	2025      	movs	r0, #37	; 0x25
    2a8c:	f10d 0c04 	add.w	ip, sp, #4
    2a90:	f7ff ffaa 	bl	29e8 <outc.5724>
				outc (c);
    2a94:	4640      	mov	r0, r8
    2a96:	f10d 0c04 	add.w	ip, sp, #4
    2a9a:	f7ff ffa5 	bl	29e8 <outc.5724>
				if (c == '\0')
    2a9e:	f1b8 0f00 	cmp.w	r8, #0
    2aa2:	d1da      	bne.n	2a5a <__pi_vfparse+0x52>
Ret:
				return d;
    2aa4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    2aa8:	b004      	add	sp, #16
    2aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    2aae:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    2ab2:	d017      	beq.n	2ae4 <__pi_vfparse+0xdc>
    2ab4:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    2ab8:	d1e7      	bne.n	2a8a <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    2aba:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    2abe:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    2ac2:	fa1f f983 	uxth.w	r9, r3
    2ac6:	fa49 f308 	asr.w	r3, r9, r8
    2aca:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    2ace:	5cf8      	ldrb	r0, [r7, r3]
    2ad0:	f10d 0c04 	add.w	ip, sp, #4
    2ad4:	f7ff ff88 	bl	29e8 <outc.5724>
					if (i == 0)
    2ad8:	f1b8 0f00 	cmp.w	r8, #0
    2adc:	d0bd      	beq.n	2a5a <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    2ade:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    2ae2:	e7f0      	b.n	2ac6 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    2ae4:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    2ae8:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    2aec:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    2af0:	d10a      	bne.n	2b08 <__pi_vfparse+0x100>
    2af2:	041b      	lsls	r3, r3, #16
    2af4:	d508      	bpl.n	2b08 <__pi_vfparse+0x100>
					outc ('-');
    2af6:	202d      	movs	r0, #45	; 0x2d
    2af8:	f10d 0c04 	add.w	ip, sp, #4
    2afc:	f7ff ff74 	bl	29e8 <outc.5724>
					val = (~val) + 1;
    2b00:	f1c9 0900 	rsb	r9, r9, #0
    2b04:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    2b08:	2305      	movs	r3, #5
				enci (10000);
    2b0a:	f242 7810 	movw	r8, #10000	; 0x2710
    2b0e:	fbb9 f0f8 	udiv	r0, r9, r8
    2b12:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    2b16:	d103      	bne.n	2b20 <__pi_vfparse+0x118>
    2b18:	3b01      	subs	r3, #1
    2b1a:	d117      	bne.n	2b4c <__pi_vfparse+0x144>
    2b1c:	f04f 0801 	mov.w	r8, #1
    2b20:	fa1f fa80 	uxth.w	sl, r0
    2b24:	f10d 0c04 	add.w	ip, sp, #4
    2b28:	3030      	adds	r0, #48	; 0x30
    2b2a:	f7ff ff5d 	bl	29e8 <outc.5724>
    2b2e:	fbb8 f3f6 	udiv	r3, r8, r6
    2b32:	fb08 991a 	mls	r9, r8, sl, r9
    2b36:	f1b8 0f09 	cmp.w	r8, #9
    2b3a:	fa1f f989 	uxth.w	r9, r9
    2b3e:	b29b      	uxth	r3, r3
    2b40:	d98b      	bls.n	2a5a <__pi_vfparse+0x52>
    2b42:	fbb9 f0f3 	udiv	r0, r9, r3
    2b46:	4698      	mov	r8, r3
    2b48:	b2c0      	uxtb	r0, r0
    2b4a:	e7e9      	b.n	2b20 <__pi_vfparse+0x118>
    2b4c:	fbb8 f8f6 	udiv	r8, r8, r6
    2b50:	e7dd      	b.n	2b0e <__pi_vfparse+0x106>
				c = *fm;
    2b52:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    2b54:	2b64      	cmp	r3, #100	; 0x64
    2b56:	d001      	beq.n	2b5c <__pi_vfparse+0x154>
    2b58:	2b75      	cmp	r3, #117	; 0x75
    2b5a:	d132      	bne.n	2bc2 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    2b5c:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    2b5e:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    2b62:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    2b66:	d109      	bne.n	2b7c <__pi_vfparse+0x174>
    2b68:	f1ba 0f00 	cmp.w	sl, #0
    2b6c:	da06      	bge.n	2b7c <__pi_vfparse+0x174>
						outc ('-');
    2b6e:	202d      	movs	r0, #45	; 0x2d
    2b70:	f10d 0c04 	add.w	ip, sp, #4
    2b74:	f7ff ff38 	bl	29e8 <outc.5724>
						val = (~val) + 1;
    2b78:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    2b7c:	230a      	movs	r3, #10
					enci (1000000000UL);
    2b7e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2c34 <__pi_vfparse+0x22c>
    2b82:	fbba f9f8 	udiv	r9, sl, r8
    2b86:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    2b8a:	d103      	bne.n	2b94 <__pi_vfparse+0x18c>
    2b8c:	3b01      	subs	r3, #1
    2b8e:	d115      	bne.n	2bbc <__pi_vfparse+0x1b4>
    2b90:	f04f 0801 	mov.w	r8, #1
    2b94:	f10d 0c04 	add.w	ip, sp, #4
    2b98:	f109 0030 	add.w	r0, r9, #48	; 0x30
    2b9c:	f7ff ff24 	bl	29e8 <outc.5724>
    2ba0:	f1b8 0f09 	cmp.w	r8, #9
    2ba4:	fbb8 f3f6 	udiv	r3, r8, r6
    2ba8:	fb08 aa19 	mls	sl, r8, r9, sl
    2bac:	f67f af55 	bls.w	2a5a <__pi_vfparse+0x52>
    2bb0:	fbba f9f3 	udiv	r9, sl, r3
    2bb4:	4698      	mov	r8, r3
    2bb6:	fa5f f989 	uxtb.w	r9, r9
    2bba:	e7eb      	b.n	2b94 <__pi_vfparse+0x18c>
    2bbc:	fbb8 f8f6 	udiv	r8, r8, r6
    2bc0:	e7df      	b.n	2b82 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    2bc2:	2b78      	cmp	r3, #120	; 0x78
    2bc4:	d114      	bne.n	2bf0 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    2bc6:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    2bca:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    2bce:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    2bd0:	fa29 f308 	lsr.w	r3, r9, r8
    2bd4:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    2bd8:	5cf8      	ldrb	r0, [r7, r3]
    2bda:	f10d 0c04 	add.w	ip, sp, #4
    2bde:	f7ff ff03 	bl	29e8 <outc.5724>
						if (i == 0)
    2be2:	f1b8 0f00 	cmp.w	r8, #0
    2be6:	f43f af38 	beq.w	2a5a <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    2bea:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    2bee:	e7ef      	b.n	2bd0 <__pi_vfparse+0x1c8>
					outc ('%');
    2bf0:	4648      	mov	r0, r9
    2bf2:	f10d 0c04 	add.w	ip, sp, #4
    2bf6:	f7ff fef7 	bl	29e8 <outc.5724>
					outc ('l');
    2bfa:	4640      	mov	r0, r8
    2bfc:	f10d 0c04 	add.w	ip, sp, #4
    2c00:	e729      	b.n	2a56 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    2c02:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    2c06:	f10d 0c04 	add.w	ip, sp, #4
    2c0a:	b280      	uxth	r0, r0
    2c0c:	e723      	b.n	2a56 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    2c0e:	f854 3b04 	ldr.w	r3, [r4], #4
    2c12:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2c16:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    2c1a:	2800      	cmp	r0, #0
    2c1c:	f43f af1d 	beq.w	2a5a <__pi_vfparse+0x52>
					outc (*st);
    2c20:	f10d 0c04 	add.w	ip, sp, #4
    2c24:	f7ff fee0 	bl	29e8 <outc.5724>
					st++;
    2c28:	e7f5      	b.n	2c16 <__pi_vfparse+0x20e>
		c = *fm++;
    2c2a:	1c55      	adds	r5, r2, #1
    2c2c:	e709      	b.n	2a42 <__pi_vfparse+0x3a>
    2c2e:	bf00      	nop
    2c30:	00004489 	andeq	r4, r0, r9, lsl #9
    2c34:	3b9aca00 	blcc	fe6b543c <_estack+0xde6b043c>

00002c38 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    2c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c3c:	460e      	mov	r6, r1
    2c3e:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    2c40:	4604      	mov	r4, r0
    2c42:	b140      	cbz	r0, 2c56 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c44:	4613      	mov	r3, r2
    2c46:	460a      	mov	r2, r1
    2c48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2c4c:	f7ff fedc 	bl	2a08 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    2c50:	4620      	mov	r0, r4
    2c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    2c56:	4608      	mov	r0, r1
    2c58:	f7fe fae6 	bl	1228 <__pi_strlen>
    2c5c:	f100 0511 	add.w	r5, r0, #17
    2c60:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    2c62:	4628      	mov	r0, r5
    2c64:	f7fe fbcc 	bl	1400 <__pi_malloc>
    2c68:	4604      	mov	r4, r0
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d0f0      	beq.n	2c50 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c6e:	463b      	mov	r3, r7
    2c70:	4632      	mov	r2, r6
    2c72:	4629      	mov	r1, r5
    2c74:	f7ff fec8 	bl	2a08 <__pi_vfparse>
    2c78:	4285      	cmp	r5, r0
    2c7a:	4680      	mov	r8, r0
    2c7c:	d2e8      	bcs.n	2c50 <vform+0x18>
		ufree (res);
    2c7e:	4620      	mov	r0, r4
    2c80:	f7fe fb72 	bl	1368 <__pi_free>
		goto Again;
    2c84:	4645      	mov	r5, r8
    2c86:	e7ec      	b.n	2c62 <vform+0x2a>

00002c88 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    2c88:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    2c8e:	2800      	cmp	r0, #0
    2c90:	f000 81b5 	beq.w	2ffe <vscan+0x376>
    2c94:	2900      	cmp	r1, #0
    2c96:	f000 81b4 	beq.w	3002 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    2c9a:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    2c9c:	270a      	movs	r7, #10
    2c9e:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    2ca0:	f8df c370 	ldr.w	ip, [pc, #880]	; 3014 <vscan+0x38c>
    2ca4:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    2ca6:	f811 0b01 	ldrb.w	r0, [r1], #1
    2caa:	b170      	cbz	r0, 2cca <vscan+0x42>
		if (*fmt++ != '%')
    2cac:	2825      	cmp	r0, #37	; 0x25
    2cae:	d1f9      	bne.n	2ca4 <vscan+0x1c>
		switch (*fmt++) {
    2cb0:	7870      	ldrb	r0, [r6, #1]
    2cb2:	1cb1      	adds	r1, r6, #2
    2cb4:	286c      	cmp	r0, #108	; 0x6c
    2cb6:	f000 80e1 	beq.w	2e7c <vscan+0x1f4>
    2cba:	d809      	bhi.n	2cd0 <vscan+0x48>
    2cbc:	2863      	cmp	r0, #99	; 0x63
    2cbe:	f000 8184 	beq.w	2fca <vscan+0x342>
    2cc2:	2864      	cmp	r0, #100	; 0x64
    2cc4:	d043      	beq.n	2d4e <vscan+0xc6>
    2cc6:	2800      	cmp	r0, #0
    2cc8:	d1ec      	bne.n	2ca4 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    2cca:	4620      	mov	r0, r4
    2ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    2cd0:	2875      	cmp	r0, #117	; 0x75
    2cd2:	d074      	beq.n	2dbe <vscan+0x136>
    2cd4:	2878      	cmp	r0, #120	; 0x78
    2cd6:	f000 8098 	beq.w	2e0a <vscan+0x182>
    2cda:	2873      	cmp	r0, #115	; 0x73
    2cdc:	d1e2      	bne.n	2ca4 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2cde:	7818      	ldrb	r0, [r3, #0]
    2ce0:	461e      	mov	r6, r3
    2ce2:	f1a0 0e09 	sub.w	lr, r0, #9
    2ce6:	fa5f fe8e 	uxtb.w	lr, lr
    2cea:	f1be 0f17 	cmp.w	lr, #23
    2cee:	4698      	mov	r8, r3
    2cf0:	f103 0301 	add.w	r3, r3, #1
    2cf4:	f240 8173 	bls.w	2fde <vscan+0x356>
			if (*buf == '\0')
    2cf8:	2800      	cmp	r0, #0
    2cfa:	d0e6      	beq.n	2cca <vscan+0x42>
			if (*buf != ',') {
    2cfc:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    2cfe:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    2d02:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    2d06:	d00e      	beq.n	2d26 <vscan+0x9e>
    2d08:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    2d0a:	f818 3b01 	ldrb.w	r3, [r8], #1
    2d0e:	f1a3 0009 	sub.w	r0, r3, #9
    2d12:	2801      	cmp	r0, #1
    2d14:	d907      	bls.n	2d26 <vscan+0x9e>
    2d16:	2b0d      	cmp	r3, #13
    2d18:	d005      	beq.n	2d26 <vscan+0x9e>
    2d1a:	2b2c      	cmp	r3, #44	; 0x2c
    2d1c:	d003      	beq.n	2d26 <vscan+0x9e>
    2d1e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    2d22:	f040 8163 	bne.w	2fec <vscan+0x364>
			while (isspace (*buf)) buf++;
    2d26:	f896 8000 	ldrb.w	r8, [r6]
    2d2a:	4633      	mov	r3, r6
    2d2c:	f1a8 0009 	sub.w	r0, r8, #9
    2d30:	b2c0      	uxtb	r0, r0
    2d32:	2817      	cmp	r0, #23
    2d34:	f106 0601 	add.w	r6, r6, #1
    2d38:	f240 815b 	bls.w	2ff2 <vscan+0x36a>
			if (*buf == ',') buf++;
    2d3c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    2d40:	bf08      	it	eq
    2d42:	4633      	moveq	r3, r6
			*sap = '\0';
    2d44:	f88e 5000 	strb.w	r5, [lr]
			break;
    2d48:	e7ac      	b.n	2ca4 <vscan+0x1c>
		    case 'd': scani (word); break;
    2d4a:	2e00      	cmp	r6, #0
    2d4c:	d0bd      	beq.n	2cca <vscan+0x42>
    2d4e:	469e      	mov	lr, r3
    2d50:	f813 6b01 	ldrb.w	r6, [r3], #1
    2d54:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2d58:	2809      	cmp	r0, #9
    2d5a:	d923      	bls.n	2da4 <vscan+0x11c>
    2d5c:	2e2d      	cmp	r6, #45	; 0x2d
    2d5e:	d001      	beq.n	2d64 <vscan+0xdc>
    2d60:	2e2b      	cmp	r6, #43	; 0x2b
    2d62:	d1f2      	bne.n	2d4a <vscan+0xc2>
    2d64:	7818      	ldrb	r0, [r3, #0]
    2d66:	469e      	mov	lr, r3
    2d68:	3830      	subs	r0, #48	; 0x30
    2d6a:	2809      	cmp	r0, #9
    2d6c:	d8ef      	bhi.n	2d4e <vscan+0xc6>
    2d6e:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    2d72:	f1d9 0800 	rsbs	r8, r9, #0
    2d76:	eb48 0809 	adc.w	r8, r8, r9
    2d7a:	f852 6b04 	ldr.w	r6, [r2], #4
    2d7e:	3401      	adds	r4, #1
    2d80:	8035      	strh	r5, [r6, #0]
    2d82:	f89e 0000 	ldrb.w	r0, [lr]
    2d86:	4673      	mov	r3, lr
    2d88:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    2d8c:	f1b9 0f09 	cmp.w	r9, #9
    2d90:	f10e 0e01 	add.w	lr, lr, #1
    2d94:	d909      	bls.n	2daa <vscan+0x122>
    2d96:	f1b8 0f00 	cmp.w	r8, #0
    2d9a:	d183      	bne.n	2ca4 <vscan+0x1c>
    2d9c:	8830      	ldrh	r0, [r6, #0]
    2d9e:	4240      	negs	r0, r0
    2da0:	8030      	strh	r0, [r6, #0]
    2da2:	e77f      	b.n	2ca4 <vscan+0x1c>
    2da4:	f04f 0800 	mov.w	r8, #0
    2da8:	e7e7      	b.n	2d7a <vscan+0xf2>
    2daa:	8833      	ldrh	r3, [r6, #0]
    2dac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2db0:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    2db4:	3030      	adds	r0, #48	; 0x30
    2db6:	8030      	strh	r0, [r6, #0]
    2db8:	e7e3      	b.n	2d82 <vscan+0xfa>
		    case 'u': scanu (word); break;
    2dba:	2800      	cmp	r0, #0
    2dbc:	d085      	beq.n	2cca <vscan+0x42>
    2dbe:	7818      	ldrb	r0, [r3, #0]
    2dc0:	461e      	mov	r6, r3
    2dc2:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2dc6:	f1be 0f09 	cmp.w	lr, #9
    2dca:	f103 0301 	add.w	r3, r3, #1
    2dce:	d8f4      	bhi.n	2dba <vscan+0x132>
    2dd0:	f852 eb04 	ldr.w	lr, [r2], #4
    2dd4:	3401      	adds	r4, #1
    2dd6:	f8ae 5000 	strh.w	r5, [lr]
    2dda:	7830      	ldrb	r0, [r6, #0]
    2ddc:	4633      	mov	r3, r6
    2dde:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    2de2:	f1b8 0f09 	cmp.w	r8, #9
    2de6:	f106 0601 	add.w	r6, r6, #1
    2dea:	f63f af5b 	bhi.w	2ca4 <vscan+0x1c>
    2dee:	f8be 3000 	ldrh.w	r3, [lr]
    2df2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2df6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    2dfa:	3830      	subs	r0, #48	; 0x30
    2dfc:	f8ae 0000 	strh.w	r0, [lr]
    2e00:	e7eb      	b.n	2dda <vscan+0x152>
		    case 'x': scanx (word); break;
    2e02:	f1be 0f00 	cmp.w	lr, #0
    2e06:	f43f af60 	beq.w	2cca <vscan+0x42>
    2e0a:	f893 e000 	ldrb.w	lr, [r3]
    2e0e:	461e      	mov	r6, r3
    2e10:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2e14:	2809      	cmp	r0, #9
    2e16:	f103 0301 	add.w	r3, r3, #1
    2e1a:	d904      	bls.n	2e26 <vscan+0x19e>
    2e1c:	f02e 0020 	bic.w	r0, lr, #32
    2e20:	3841      	subs	r0, #65	; 0x41
    2e22:	2805      	cmp	r0, #5
    2e24:	d8ed      	bhi.n	2e02 <vscan+0x17a>
    2e26:	f852 eb04 	ldr.w	lr, [r2], #4
    2e2a:	3401      	adds	r4, #1
    2e2c:	f8ae 5000 	strh.w	r5, [lr]
    2e30:	f106 0805 	add.w	r8, r6, #5
    2e34:	f896 9000 	ldrb.w	r9, [r6]
    2e38:	4633      	mov	r3, r6
    2e3a:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2e3e:	b2c0      	uxtb	r0, r0
    2e40:	2809      	cmp	r0, #9
    2e42:	f106 0601 	add.w	r6, r6, #1
    2e46:	f240 80de 	bls.w	3006 <vscan+0x37e>
    2e4a:	f029 0020 	bic.w	r0, r9, #32
    2e4e:	3841      	subs	r0, #65	; 0x41
    2e50:	2805      	cmp	r0, #5
    2e52:	f63f af27 	bhi.w	2ca4 <vscan+0x1c>
    2e56:	4546      	cmp	r6, r8
    2e58:	f43f af24 	beq.w	2ca4 <vscan+0x1c>
    2e5c:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2e60:	2b05      	cmp	r3, #5
    2e62:	bf94      	ite	ls
    2e64:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2e68:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2e6c:	b2c0      	uxtb	r0, r0
    2e6e:	f8be 3000 	ldrh.w	r3, [lr]
    2e72:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2e76:	f8ae 0000 	strh.w	r0, [lr]
    2e7a:	e7db      	b.n	2e34 <vscan+0x1ac>
			switch (*fmt++) {
    2e7c:	78b0      	ldrb	r0, [r6, #2]
    2e7e:	1cf1      	adds	r1, r6, #3
    2e80:	2875      	cmp	r0, #117	; 0x75
    2e82:	d07d      	beq.n	2f80 <vscan+0x2f8>
    2e84:	d831      	bhi.n	2eea <vscan+0x262>
    2e86:	2800      	cmp	r0, #0
    2e88:	f43f af1f 	beq.w	2cca <vscan+0x42>
    2e8c:	2864      	cmp	r0, #100	; 0x64
    2e8e:	f47f af09 	bne.w	2ca4 <vscan+0x1c>
    2e92:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    2e94:	f813 6b01 	ldrb.w	r6, [r3], #1
    2e98:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2e9c:	2809      	cmp	r0, #9
    2e9e:	d962      	bls.n	2f66 <vscan+0x2de>
    2ea0:	2e2d      	cmp	r6, #45	; 0x2d
    2ea2:	d001      	beq.n	2ea8 <vscan+0x220>
    2ea4:	2e2b      	cmp	r6, #43	; 0x2b
    2ea6:	d15b      	bne.n	2f60 <vscan+0x2d8>
    2ea8:	7818      	ldrb	r0, [r3, #0]
    2eaa:	4698      	mov	r8, r3
    2eac:	3830      	subs	r0, #48	; 0x30
    2eae:	2809      	cmp	r0, #9
    2eb0:	d8ef      	bhi.n	2e92 <vscan+0x20a>
    2eb2:	3e2d      	subs	r6, #45	; 0x2d
    2eb4:	4270      	negs	r0, r6
    2eb6:	4170      	adcs	r0, r6
    2eb8:	f852 eb04 	ldr.w	lr, [r2], #4
    2ebc:	3401      	adds	r4, #1
    2ebe:	f8ce 5000 	str.w	r5, [lr]
    2ec2:	f898 6000 	ldrb.w	r6, [r8]
    2ec6:	4643      	mov	r3, r8
    2ec8:	3e30      	subs	r6, #48	; 0x30
    2eca:	fa5f f986 	uxtb.w	r9, r6
    2ece:	f1b9 0f09 	cmp.w	r9, #9
    2ed2:	f108 0801 	add.w	r8, r8, #1
    2ed6:	d948      	bls.n	2f6a <vscan+0x2e2>
    2ed8:	2800      	cmp	r0, #0
    2eda:	f47f aee3 	bne.w	2ca4 <vscan+0x1c>
    2ede:	f8de 0000 	ldr.w	r0, [lr]
    2ee2:	4240      	negs	r0, r0
    2ee4:	f8ce 0000 	str.w	r0, [lr]
    2ee8:	e6dc      	b.n	2ca4 <vscan+0x1c>
    2eea:	2878      	cmp	r0, #120	; 0x78
    2eec:	f47f aeda 	bne.w	2ca4 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    2ef0:	f893 e000 	ldrb.w	lr, [r3]
    2ef4:	461e      	mov	r6, r3
    2ef6:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2efa:	2809      	cmp	r0, #9
    2efc:	f103 0301 	add.w	r3, r3, #1
    2f00:	d904      	bls.n	2f0c <vscan+0x284>
    2f02:	f02e 0020 	bic.w	r0, lr, #32
    2f06:	3841      	subs	r0, #65	; 0x41
    2f08:	2805      	cmp	r0, #5
    2f0a:	d85a      	bhi.n	2fc2 <vscan+0x33a>
    2f0c:	f852 eb04 	ldr.w	lr, [r2], #4
    2f10:	3401      	adds	r4, #1
    2f12:	f8ce 5000 	str.w	r5, [lr]
    2f16:	f106 0809 	add.w	r8, r6, #9
    2f1a:	f896 9000 	ldrb.w	r9, [r6]
    2f1e:	4633      	mov	r3, r6
    2f20:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2f24:	b2c0      	uxtb	r0, r0
    2f26:	2809      	cmp	r0, #9
    2f28:	f106 0601 	add.w	r6, r6, #1
    2f2c:	d96f      	bls.n	300e <vscan+0x386>
    2f2e:	f029 0020 	bic.w	r0, r9, #32
    2f32:	3841      	subs	r0, #65	; 0x41
    2f34:	2805      	cmp	r0, #5
    2f36:	f63f aeb5 	bhi.w	2ca4 <vscan+0x1c>
    2f3a:	4546      	cmp	r6, r8
    2f3c:	f43f aeb2 	beq.w	2ca4 <vscan+0x1c>
    2f40:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2f44:	2b05      	cmp	r3, #5
    2f46:	bf94      	ite	ls
    2f48:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2f4c:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2f50:	b2c0      	uxtb	r0, r0
    2f52:	f8de 3000 	ldr.w	r3, [lr]
    2f56:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2f5a:	f8ce 0000 	str.w	r0, [lr]
    2f5e:	e7dc      	b.n	2f1a <vscan+0x292>
		    	    case 'd': scani (lword); break;
    2f60:	2e00      	cmp	r6, #0
    2f62:	d196      	bne.n	2e92 <vscan+0x20a>
    2f64:	e6b1      	b.n	2cca <vscan+0x42>
    2f66:	2000      	movs	r0, #0
    2f68:	e7a6      	b.n	2eb8 <vscan+0x230>
    2f6a:	f8de 3000 	ldr.w	r3, [lr]
    2f6e:	b2b6      	uxth	r6, r6
    2f70:	437b      	muls	r3, r7
    2f72:	1b9e      	subs	r6, r3, r6
    2f74:	f8ce 6000 	str.w	r6, [lr]
    2f78:	e7a3      	b.n	2ec2 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    2f7a:	2800      	cmp	r0, #0
    2f7c:	f43f aea5 	beq.w	2cca <vscan+0x42>
    2f80:	7818      	ldrb	r0, [r3, #0]
    2f82:	461e      	mov	r6, r3
    2f84:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2f88:	f1be 0f09 	cmp.w	lr, #9
    2f8c:	f103 0301 	add.w	r3, r3, #1
    2f90:	d8f3      	bhi.n	2f7a <vscan+0x2f2>
    2f92:	f852 eb04 	ldr.w	lr, [r2], #4
    2f96:	3401      	adds	r4, #1
    2f98:	f8ce 5000 	str.w	r5, [lr]
    2f9c:	7830      	ldrb	r0, [r6, #0]
    2f9e:	4633      	mov	r3, r6
    2fa0:	3830      	subs	r0, #48	; 0x30
    2fa2:	fa5f f880 	uxtb.w	r8, r0
    2fa6:	f1b8 0f09 	cmp.w	r8, #9
    2faa:	f106 0601 	add.w	r6, r6, #1
    2fae:	f63f ae79 	bhi.w	2ca4 <vscan+0x1c>
    2fb2:	f8de 3000 	ldr.w	r3, [lr]
    2fb6:	b280      	uxth	r0, r0
    2fb8:	fb07 0003 	mla	r0, r7, r3, r0
    2fbc:	f8ce 0000 	str.w	r0, [lr]
    2fc0:	e7ec      	b.n	2f9c <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    2fc2:	f1be 0f00 	cmp.w	lr, #0
    2fc6:	d193      	bne.n	2ef0 <vscan+0x268>
    2fc8:	e67f      	b.n	2cca <vscan+0x42>
			if ((c = *buf++) == '\0')
    2fca:	f813 0b01 	ldrb.w	r0, [r3], #1
    2fce:	2800      	cmp	r0, #0
    2fd0:	f43f ae7b 	beq.w	2cca <vscan+0x42>
			sap = va_arg (ap, char*);
    2fd4:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    2fd8:	3401      	adds	r4, #1
			*sap = c;
    2fda:	7030      	strb	r0, [r6, #0]
			break;
    2fdc:	e662      	b.n	2ca4 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2fde:	fa2c fe0e 	lsr.w	lr, ip, lr
    2fe2:	f01e 0f01 	tst.w	lr, #1
    2fe6:	f47f ae7a 	bne.w	2cde <vscan+0x56>
    2fea:	e687      	b.n	2cfc <vscan+0x74>
						*sap++ = *buf++;
    2fec:	f80e 3b01 	strb.w	r3, [lr], #1
    2ff0:	e68a      	b.n	2d08 <vscan+0x80>
			while (isspace (*buf)) buf++;
    2ff2:	fa2c f000 	lsr.w	r0, ip, r0
    2ff6:	07c0      	lsls	r0, r0, #31
    2ff8:	f53f ae95 	bmi.w	2d26 <vscan+0x9e>
    2ffc:	e6a2      	b.n	2d44 <vscan+0xbc>
		return 0;
    2ffe:	4604      	mov	r4, r0
    3000:	e663      	b.n	2cca <vscan+0x42>
    3002:	460c      	mov	r4, r1
    3004:	e661      	b.n	2cca <vscan+0x42>
		    case 'x': scanx (word); break;
    3006:	4546      	cmp	r6, r8
    3008:	f47f af31 	bne.w	2e6e <vscan+0x1e6>
    300c:	e64a      	b.n	2ca4 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    300e:	4546      	cmp	r6, r8
    3010:	d19f      	bne.n	2f52 <vscan+0x2ca>
    3012:	e647      	b.n	2ca4 <vscan+0x1c>
    3014:	00800013 	addeq	r0, r0, r3, lsl r0

00003018 <SafeHapiVoid>:
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	4606      	mov	r6, r0
    301c:	f000 f844 	bl	30a8 <NOROM_CPUcpsid>
    3020:	4605      	mov	r5, r0
    3022:	4c06      	ldr	r4, [pc, #24]	; (303c <SafeHapiVoid+0x24>)
    3024:	6823      	ldr	r3, [r4, #0]
    3026:	2b00      	cmp	r3, #0
    3028:	d0fb      	beq.n	3022 <SafeHapiVoid+0xa>
    302a:	47b0      	blx	r6
    302c:	2301      	movs	r3, #1
    302e:	6023      	str	r3, [r4, #0]
    3030:	b91d      	cbnz	r5, 303a <SafeHapiVoid+0x22>
    3032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3036:	f000 b83b 	b.w	30b0 <NOROM_CPUcpsie>
    303a:	bd70      	pop	{r4, r5, r6, pc}
    303c:	400c8000 	andmi	r8, ip, r0

00003040 <NOROM_AONBatMonTemperatureGetDegC>:
    3040:	4b08      	ldr	r3, [pc, #32]	; (3064 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    3042:	6818      	ldr	r0, [r3, #0]
    3044:	4b08      	ldr	r3, [pc, #32]	; (3068 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    3046:	7819      	ldrb	r1, [r3, #0]
    3048:	4b08      	ldr	r3, [pc, #32]	; (306c <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    304a:	681a      	ldr	r2, [r3, #0]
    304c:	f340 0310 	sbfx	r3, r0, #0, #17
    3050:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3054:	b248      	sxtb	r0, r1
    3056:	4350      	muls	r0, r2
    3058:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    305c:	3080      	adds	r0, #128	; 0x80
    305e:	1200      	asrs	r0, r0, #8
    3060:	4770      	bx	lr
    3062:	bf00      	nop
    3064:	40095030 	andmi	r5, r9, r0, lsr r0
    3068:	5000130c 	andpl	r1, r0, ip, lsl #6
    306c:	40095028 	andmi	r5, r9, r8, lsr #32

00003070 <NOROM_AONRTCCurrentCompareValueGet>:
    3070:	4a05      	ldr	r2, [pc, #20]	; (3088 <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    3072:	4906      	ldr	r1, [pc, #24]	; (308c <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3074:	6813      	ldr	r3, [r2, #0]
    3076:	6808      	ldr	r0, [r1, #0]
    3078:	6812      	ldr	r2, [r2, #0]
    307a:	4293      	cmp	r3, r2
    307c:	d1f8      	bne.n	3070 <NOROM_AONRTCCurrentCompareValueGet>
    307e:	041b      	lsls	r3, r3, #16
    3080:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3084:	4770      	bx	lr
    3086:	bf00      	nop
    3088:	40092008 	andmi	r2, r9, r8
    308c:	4009200c 	andmi	r2, r9, ip

00003090 <NOROM_AONRTCCurrent64BitValueGet>:
    3090:	4b03      	ldr	r3, [pc, #12]	; (30a0 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    3092:	4904      	ldr	r1, [pc, #16]	; (30a4 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    3094:	681a      	ldr	r2, [r3, #0]
    3096:	6808      	ldr	r0, [r1, #0]
    3098:	6819      	ldr	r1, [r3, #0]
    309a:	4291      	cmp	r1, r2
    309c:	d1f8      	bne.n	3090 <NOROM_AONRTCCurrent64BitValueGet>
    309e:	4770      	bx	lr
    30a0:	40092008 	andmi	r2, r9, r8
    30a4:	4009200c 	andmi	r2, r9, ip

000030a8 <NOROM_CPUcpsid>:
    30a8:	f3ef 8010 	mrs	r0, PRIMASK
    30ac:	b672      	cpsid	i
    30ae:	4770      	bx	lr

000030b0 <NOROM_CPUcpsie>:
    30b0:	f3ef 8010 	mrs	r0, PRIMASK
    30b4:	b662      	cpsie	i
    30b6:	4770      	bx	lr

000030b8 <NOROM_OSCClockSourceSet>:
    30b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    30ba:	460c      	mov	r4, r1
    30bc:	07c1      	lsls	r1, r0, #31
    30be:	4605      	mov	r5, r0
    30c0:	d509      	bpl.n	30d6 <NOROM_OSCClockSourceSet+0x1e>
    30c2:	4b12      	ldr	r3, [pc, #72]	; (310c <NOROM_OSCClockSourceSet+0x54>)
    30c4:	b2a2      	uxth	r2, r4
    30c6:	681b      	ldr	r3, [r3, #0]
    30c8:	2100      	movs	r1, #0
    30ca:	9200      	str	r2, [sp, #0]
    30cc:	685e      	ldr	r6, [r3, #4]
    30ce:	4810      	ldr	r0, [pc, #64]	; (3110 <NOROM_OSCClockSourceSet+0x58>)
    30d0:	2201      	movs	r2, #1
    30d2:	460b      	mov	r3, r1
    30d4:	47b0      	blx	r6
    30d6:	07aa      	lsls	r2, r5, #30
    30d8:	d509      	bpl.n	30ee <NOROM_OSCClockSourceSet+0x36>
    30da:	4b0c      	ldr	r3, [pc, #48]	; (310c <NOROM_OSCClockSourceSet+0x54>)
    30dc:	b2a2      	uxth	r2, r4
    30de:	681b      	ldr	r3, [r3, #0]
    30e0:	9200      	str	r2, [sp, #0]
    30e2:	685e      	ldr	r6, [r3, #4]
    30e4:	480a      	ldr	r0, [pc, #40]	; (3110 <NOROM_OSCClockSourceSet+0x58>)
    30e6:	2100      	movs	r1, #0
    30e8:	2202      	movs	r2, #2
    30ea:	2301      	movs	r3, #1
    30ec:	47b0      	blx	r6
    30ee:	076b      	lsls	r3, r5, #29
    30f0:	d509      	bpl.n	3106 <NOROM_OSCClockSourceSet+0x4e>
    30f2:	4b06      	ldr	r3, [pc, #24]	; (310c <NOROM_OSCClockSourceSet+0x54>)
    30f4:	b2a4      	uxth	r4, r4
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	9400      	str	r4, [sp, #0]
    30fa:	685c      	ldr	r4, [r3, #4]
    30fc:	4804      	ldr	r0, [pc, #16]	; (3110 <NOROM_OSCClockSourceSet+0x58>)
    30fe:	2100      	movs	r1, #0
    3100:	220c      	movs	r2, #12
    3102:	2302      	movs	r3, #2
    3104:	47a0      	blx	r4
    3106:	b002      	add	sp, #8
    3108:	bd70      	pop	{r4, r5, r6, pc}
    310a:	bf00      	nop
    310c:	100001a4 	andne	r0, r0, r4, lsr #3
    3110:	400ca000 	andmi	sl, ip, r0

00003114 <NOROM_OSCClockSourceGet>:
    3114:	b510      	push	{r4, lr}
    3116:	4b08      	ldr	r3, [pc, #32]	; (3138 <NOROM_OSCClockSourceGet+0x24>)
    3118:	2804      	cmp	r0, #4
    311a:	681b      	ldr	r3, [r3, #0]
    311c:	f04f 0134 	mov.w	r1, #52	; 0x34
    3120:	68dc      	ldr	r4, [r3, #12]
    3122:	bf07      	ittee	eq
    3124:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    3128:	231d      	moveq	r3, #29
    312a:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    312e:	231c      	movne	r3, #28
    3130:	4802      	ldr	r0, [pc, #8]	; (313c <NOROM_OSCClockSourceGet+0x28>)
    3132:	47a0      	blx	r4
    3134:	bd10      	pop	{r4, pc}
    3136:	bf00      	nop
    3138:	100001a4 	andne	r0, r0, r4, lsr #3
    313c:	400ca000 	andmi	sl, ip, r0

00003140 <NOROM_OSCHF_TurnOnXosc>:
    3140:	b508      	push	{r3, lr}
    3142:	2003      	movs	r0, #3
    3144:	2101      	movs	r1, #1
    3146:	f7ff ffb7 	bl	30b8 <NOROM_OSCClockSourceSet>
    314a:	f7ff ff91 	bl	3070 <NOROM_AONRTCCurrentCompareValueGet>
    314e:	4b01      	ldr	r3, [pc, #4]	; (3154 <NOROM_OSCHF_TurnOnXosc+0x14>)
    3150:	6098      	str	r0, [r3, #8]
    3152:	bd08      	pop	{r3, pc}
    3154:	2000060c 	andcs	r0, r0, ip, lsl #12

00003158 <NOROM_OSCHF_AttemptToSwitchToXosc>:
    3158:	b510      	push	{r4, lr}
    315a:	2001      	movs	r0, #1
    315c:	f7ff ffda 	bl	3114 <NOROM_OSCClockSourceGet>
    3160:	2801      	cmp	r0, #1
    3162:	d01c      	beq.n	319e <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3164:	4b0f      	ldr	r3, [pc, #60]	; (31a4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    3166:	4810      	ldr	r0, [pc, #64]	; (31a8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    3168:	681b      	ldr	r3, [r3, #0]
    316a:	2134      	movs	r1, #52	; 0x34
    316c:	68dc      	ldr	r4, [r3, #12]
    316e:	2201      	movs	r2, #1
    3170:	2300      	movs	r3, #0
    3172:	47a0      	blx	r4
    3174:	b1a0      	cbz	r0, 31a0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    3176:	4b0d      	ldr	r3, [pc, #52]	; (31ac <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    3178:	6b98      	ldr	r0, [r3, #56]	; 0x38
    317a:	f7ff ff4d 	bl	3018 <SafeHapiVoid>
    317e:	f7ff ff77 	bl	3070 <NOROM_AONRTCCurrentCompareValueGet>
    3182:	4a0b      	ldr	r2, [pc, #44]	; (31b0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3184:	6893      	ldr	r3, [r2, #8]
    3186:	60d0      	str	r0, [r2, #12]
    3188:	1ac0      	subs	r0, r0, r3
    318a:	4b0a      	ldr	r3, [pc, #40]	; (31b4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    318c:	4358      	muls	r0, r3
    318e:	6813      	ldr	r3, [r2, #0]
    3190:	0c00      	lsrs	r0, r0, #16
    3192:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    3196:	4283      	cmp	r3, r0
    3198:	bf94      	ite	ls
    319a:	6010      	strls	r0, [r2, #0]
    319c:	6013      	strhi	r3, [r2, #0]
    319e:	2001      	movs	r0, #1
    31a0:	bd10      	pop	{r4, pc}
    31a2:	bf00      	nop
    31a4:	100001a4 	andne	r0, r0, r4, lsr #3
    31a8:	400ca000 	andmi	sl, ip, r0
    31ac:	10000048 	andne	r0, r0, r8, asr #32
    31b0:	2000060c 	andcs	r0, r0, ip, lsl #12
    31b4:	000f4240 	andeq	r4, pc, r0, asr #4

000031b8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    31b8:	b510      	push	{r4, lr}
    31ba:	2003      	movs	r0, #3
    31bc:	2100      	movs	r1, #0
    31be:	f7ff ff7b 	bl	30b8 <NOROM_OSCClockSourceSet>
    31c2:	2001      	movs	r0, #1
    31c4:	f7ff ffa6 	bl	3114 <NOROM_OSCClockSourceGet>
    31c8:	b118      	cbz	r0, 31d2 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    31ca:	4b06      	ldr	r3, [pc, #24]	; (31e4 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    31cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
    31ce:	f7ff ff23 	bl	3018 <SafeHapiVoid>
    31d2:	f7ff ff4d 	bl	3070 <NOROM_AONRTCCurrentCompareValueGet>
    31d6:	4c04      	ldr	r4, [pc, #16]	; (31e8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    31d8:	6060      	str	r0, [r4, #4]
    31da:	f7ff ff31 	bl	3040 <NOROM_AONBatMonTemperatureGetDegC>
    31de:	6120      	str	r0, [r4, #16]
    31e0:	bd10      	pop	{r4, pc}
    31e2:	bf00      	nop
    31e4:	10000048 	andne	r0, r0, r8, asr #32
    31e8:	2000060c 	andcs	r0, r0, ip, lsl #12

000031ec <NOROM_RFCDoorbellSendTo>:
    31ec:	4a07      	ldr	r2, [pc, #28]	; (320c <NOROM_RFCDoorbellSendTo+0x20>)
    31ee:	6811      	ldr	r1, [r2, #0]
    31f0:	2900      	cmp	r1, #0
    31f2:	d1fb      	bne.n	31ec <NOROM_RFCDoorbellSendTo>
    31f4:	4b06      	ldr	r3, [pc, #24]	; (3210 <NOROM_RFCDoorbellSendTo+0x24>)
    31f6:	6019      	str	r1, [r3, #0]
    31f8:	6010      	str	r0, [r2, #0]
    31fa:	681a      	ldr	r2, [r3, #0]
    31fc:	2a00      	cmp	r2, #0
    31fe:	d0fc      	beq.n	31fa <NOROM_RFCDoorbellSendTo+0xe>
    3200:	4b03      	ldr	r3, [pc, #12]	; (3210 <NOROM_RFCDoorbellSendTo+0x24>)
    3202:	2200      	movs	r2, #0
    3204:	601a      	str	r2, [r3, #0]
    3206:	f853 0c18 	ldr.w	r0, [r3, #-24]
    320a:	4770      	bx	lr
    320c:	40041000 	andmi	r1, r4, r0
    3210:	4004101c 	andmi	r1, r4, ip, lsl r0

00003214 <NOROM_RFCSynthPowerDown>:
    3214:	4a0e      	ldr	r2, [pc, #56]	; (3250 <NOROM_RFCSynthPowerDown+0x3c>)
    3216:	490f      	ldr	r1, [pc, #60]	; (3254 <NOROM_RFCSynthPowerDown+0x40>)
    3218:	6813      	ldr	r3, [r2, #0]
    321a:	2050      	movs	r0, #80	; 0x50
    321c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3220:	f023 0302 	bic.w	r3, r3, #2
    3224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3228:	6013      	str	r3, [r2, #0]
    322a:	4b0b      	ldr	r3, [pc, #44]	; (3258 <NOROM_RFCSynthPowerDown+0x44>)
    322c:	2203      	movs	r2, #3
    322e:	601a      	str	r2, [r3, #0]
    3230:	f241 0330 	movw	r3, #4144	; 0x1030
    3234:	4a09      	ldr	r2, [pc, #36]	; (325c <NOROM_RFCSynthPowerDown+0x48>)
    3236:	600b      	str	r3, [r1, #0]
    3238:	2301      	movs	r3, #1
    323a:	6013      	str	r3, [r2, #0]
    323c:	6008      	str	r0, [r1, #0]
    323e:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3242:	6013      	str	r3, [r2, #0]
    3244:	6008      	str	r0, [r1, #0]
    3246:	6013      	str	r3, [r2, #0]
    3248:	f842 3c0c 	str.w	r3, [r2, #-12]
    324c:	4770      	bx	lr
    324e:	bf00      	nop
    3250:	60040000 	andvs	r0, r4, r0
    3254:	40044114 	andmi	r4, r4, r4, lsl r1
    3258:	40044108 	andmi	r4, r4, r8, lsl #2
    325c:	4004410c 	andmi	r4, r4, ip, lsl #2

00003260 <NOROM_RFCRfTrimRead>:
    3260:	f640 0202 	movw	r2, #2050	; 0x802
    3264:	8803      	ldrh	r3, [r0, #0]
    3266:	4293      	cmp	r3, r2
    3268:	d006      	beq.n	3278 <NOROM_RFCRfTrimRead+0x18>
    326a:	f643 0207 	movw	r2, #14343	; 0x3807
    326e:	4293      	cmp	r3, r2
    3270:	d104      	bne.n	327c <NOROM_RFCRfTrimRead+0x1c>
    3272:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3276:	e002      	b.n	327e <NOROM_RFCRfTrimRead+0x1e>
    3278:	7bc3      	ldrb	r3, [r0, #15]
    327a:	e000      	b.n	327e <NOROM_RFCRfTrimRead+0x1e>
    327c:	2300      	movs	r3, #0
    327e:	4a36      	ldr	r2, [pc, #216]	; (3358 <NOROM_RFCRfTrimRead+0xf8>)
    3280:	2b0a      	cmp	r3, #10
    3282:	6812      	ldr	r2, [r2, #0]
    3284:	600a      	str	r2, [r1, #0]
    3286:	d031      	beq.n	32ec <NOROM_RFCRfTrimRead+0x8c>
    3288:	dc10      	bgt.n	32ac <NOROM_RFCRfTrimRead+0x4c>
    328a:	2b05      	cmp	r3, #5
    328c:	d021      	beq.n	32d2 <NOROM_RFCRfTrimRead+0x72>
    328e:	2b06      	cmp	r3, #6
    3290:	d153      	bne.n	333a <NOROM_RFCRfTrimRead+0xda>
    3292:	4b32      	ldr	r3, [pc, #200]	; (335c <NOROM_RFCRfTrimRead+0xfc>)
    3294:	681b      	ldr	r3, [r3, #0]
    3296:	604b      	str	r3, [r1, #4]
    3298:	4b31      	ldr	r3, [pc, #196]	; (3360 <NOROM_RFCRfTrimRead+0x100>)
    329a:	681b      	ldr	r3, [r3, #0]
    329c:	608b      	str	r3, [r1, #8]
    329e:	4b31      	ldr	r3, [pc, #196]	; (3364 <NOROM_RFCRfTrimRead+0x104>)
    32a0:	681b      	ldr	r3, [r3, #0]
    32a2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32a6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    32aa:	e052      	b.n	3352 <NOROM_RFCRfTrimRead+0xf2>
    32ac:	2b0f      	cmp	r3, #15
    32ae:	d02a      	beq.n	3306 <NOROM_RFCRfTrimRead+0xa6>
    32b0:	2b1e      	cmp	r3, #30
    32b2:	d035      	beq.n	3320 <NOROM_RFCRfTrimRead+0xc0>
    32b4:	2b0c      	cmp	r3, #12
    32b6:	d140      	bne.n	333a <NOROM_RFCRfTrimRead+0xda>
    32b8:	4b2b      	ldr	r3, [pc, #172]	; (3368 <NOROM_RFCRfTrimRead+0x108>)
    32ba:	681b      	ldr	r3, [r3, #0]
    32bc:	604b      	str	r3, [r1, #4]
    32be:	4b2b      	ldr	r3, [pc, #172]	; (336c <NOROM_RFCRfTrimRead+0x10c>)
    32c0:	681b      	ldr	r3, [r3, #0]
    32c2:	608b      	str	r3, [r1, #8]
    32c4:	4b2a      	ldr	r3, [pc, #168]	; (3370 <NOROM_RFCRfTrimRead+0x110>)
    32c6:	681b      	ldr	r3, [r3, #0]
    32c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    32d0:	e03f      	b.n	3352 <NOROM_RFCRfTrimRead+0xf2>
    32d2:	4b28      	ldr	r3, [pc, #160]	; (3374 <NOROM_RFCRfTrimRead+0x114>)
    32d4:	681b      	ldr	r3, [r3, #0]
    32d6:	604b      	str	r3, [r1, #4]
    32d8:	4b27      	ldr	r3, [pc, #156]	; (3378 <NOROM_RFCRfTrimRead+0x118>)
    32da:	681b      	ldr	r3, [r3, #0]
    32dc:	608b      	str	r3, [r1, #8]
    32de:	4b27      	ldr	r3, [pc, #156]	; (337c <NOROM_RFCRfTrimRead+0x11c>)
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32e6:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    32ea:	e032      	b.n	3352 <NOROM_RFCRfTrimRead+0xf2>
    32ec:	4b24      	ldr	r3, [pc, #144]	; (3380 <NOROM_RFCRfTrimRead+0x120>)
    32ee:	681b      	ldr	r3, [r3, #0]
    32f0:	604b      	str	r3, [r1, #4]
    32f2:	4b24      	ldr	r3, [pc, #144]	; (3384 <NOROM_RFCRfTrimRead+0x124>)
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	608b      	str	r3, [r1, #8]
    32f8:	4b23      	ldr	r3, [pc, #140]	; (3388 <NOROM_RFCRfTrimRead+0x128>)
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3300:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3304:	e025      	b.n	3352 <NOROM_RFCRfTrimRead+0xf2>
    3306:	4b21      	ldr	r3, [pc, #132]	; (338c <NOROM_RFCRfTrimRead+0x12c>)
    3308:	681b      	ldr	r3, [r3, #0]
    330a:	604b      	str	r3, [r1, #4]
    330c:	4b20      	ldr	r3, [pc, #128]	; (3390 <NOROM_RFCRfTrimRead+0x130>)
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	608b      	str	r3, [r1, #8]
    3312:	4b20      	ldr	r3, [pc, #128]	; (3394 <NOROM_RFCRfTrimRead+0x134>)
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    331a:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    331e:	e018      	b.n	3352 <NOROM_RFCRfTrimRead+0xf2>
    3320:	4b1d      	ldr	r3, [pc, #116]	; (3398 <NOROM_RFCRfTrimRead+0x138>)
    3322:	681b      	ldr	r3, [r3, #0]
    3324:	604b      	str	r3, [r1, #4]
    3326:	4b1d      	ldr	r3, [pc, #116]	; (339c <NOROM_RFCRfTrimRead+0x13c>)
    3328:	681b      	ldr	r3, [r3, #0]
    332a:	608b      	str	r3, [r1, #8]
    332c:	4b1c      	ldr	r3, [pc, #112]	; (33a0 <NOROM_RFCRfTrimRead+0x140>)
    332e:	681b      	ldr	r3, [r3, #0]
    3330:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3334:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    3338:	e00b      	b.n	3352 <NOROM_RFCRfTrimRead+0xf2>
    333a:	4b1a      	ldr	r3, [pc, #104]	; (33a4 <NOROM_RFCRfTrimRead+0x144>)
    333c:	681b      	ldr	r3, [r3, #0]
    333e:	604b      	str	r3, [r1, #4]
    3340:	4b19      	ldr	r3, [pc, #100]	; (33a8 <NOROM_RFCRfTrimRead+0x148>)
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	608b      	str	r3, [r1, #8]
    3346:	4b19      	ldr	r3, [pc, #100]	; (33ac <NOROM_RFCRfTrimRead+0x14c>)
    3348:	681b      	ldr	r3, [r3, #0]
    334a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3352:	60cb      	str	r3, [r1, #12]
    3354:	4770      	bx	lr
    3356:	bf00      	nop
    3358:	5000134c 	andpl	r1, r0, ip, asr #6
    335c:	500010c8 	andpl	r1, r0, r8, asr #1
    3360:	500010e0 	andpl	r1, r0, r0, ror #1
    3364:	500010f8 	strdpl	r1, [r0], -r8
    3368:	500010d0 	ldrdpl	r1, [r0], -r0
    336c:	500010e8 	andpl	r1, r0, r8, ror #1
    3370:	50001100 	andpl	r1, r0, r0, lsl #2
    3374:	500010c4 	andpl	r1, r0, r4, asr #1
    3378:	500010dc 	ldrdpl	r1, [r0], -ip
    337c:	500010f4 	strdpl	r1, [r0], -r4
    3380:	500010cc 	andpl	r1, r0, ip, asr #1
    3384:	500010e4 	andpl	r1, r0, r4, ror #1
    3388:	500010fc 	strdpl	r1, [r0], -ip
    338c:	500010d4 	ldrdpl	r1, [r0], -r4
    3390:	500010ec 	andpl	r1, r0, ip, ror #1
    3394:	50001104 	andpl	r1, r0, r4, lsl #2
    3398:	500010d8 	ldrdpl	r1, [r0], -r8
    339c:	500010f0 	strdpl	r1, [r0], -r0
    33a0:	50001108 	andpl	r1, r0, r8, lsl #2
    33a4:	50001354 	andpl	r1, r0, r4, asr r3
    33a8:	50001358 	andpl	r1, r0, r8, asr r3
    33ac:	50001380 	andpl	r1, r0, r0, lsl #7

000033b0 <NOROM_RFCRTrim>:
    33b0:	f643 0206 	movw	r2, #14342	; 0x3806
    33b4:	b570      	push	{r4, r5, r6, lr}
    33b6:	8803      	ldrh	r3, [r0, #0]
    33b8:	4293      	cmp	r3, r2
    33ba:	d00a      	beq.n	33d2 <NOROM_RFCRTrim+0x22>
    33bc:	f643 0207 	movw	r2, #14343	; 0x3807
    33c0:	4293      	cmp	r3, r2
    33c2:	d009      	beq.n	33d8 <NOROM_RFCRTrim+0x28>
    33c4:	f640 0202 	movw	r2, #2050	; 0x802
    33c8:	4293      	cmp	r3, r2
    33ca:	d16b      	bne.n	34a4 <NOROM_RFCRTrim+0xf4>
    33cc:	7bc1      	ldrb	r1, [r0, #15]
    33ce:	6943      	ldr	r3, [r0, #20]
    33d0:	e005      	b.n	33de <NOROM_RFCRTrim+0x2e>
    33d2:	69c3      	ldr	r3, [r0, #28]
    33d4:	2102      	movs	r1, #2
    33d6:	e002      	b.n	33de <NOROM_RFCRTrim+0x2e>
    33d8:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    33dc:	69c3      	ldr	r3, [r0, #28]
    33de:	2b00      	cmp	r3, #0
    33e0:	d060      	beq.n	34a4 <NOROM_RFCRTrim+0xf4>
    33e2:	f103 0414 	add.w	r4, r3, #20
    33e6:	f244 0538 	movw	r5, #16440	; 0x4038
    33ea:	681a      	ldr	r2, [r3, #0]
    33ec:	4618      	mov	r0, r3
    33ee:	b296      	uxth	r6, r2
    33f0:	42ae      	cmp	r6, r5
    33f2:	f103 0304 	add.w	r3, r3, #4
    33f6:	d103      	bne.n	3400 <NOROM_RFCRTrim+0x50>
    33f8:	f3c2 4403 	ubfx	r4, r2, #16, #4
    33fc:	b91c      	cbnz	r4, 3406 <NOROM_RFCRTrim+0x56>
    33fe:	bd70      	pop	{r4, r5, r6, pc}
    3400:	42a3      	cmp	r3, r4
    3402:	d1f0      	bne.n	33e6 <NOROM_RFCRTrim+0x36>
    3404:	bd70      	pop	{r4, r5, r6, pc}
    3406:	290a      	cmp	r1, #10
    3408:	d01d      	beq.n	3446 <NOROM_RFCRTrim+0x96>
    340a:	dc06      	bgt.n	341a <NOROM_RFCRTrim+0x6a>
    340c:	2905      	cmp	r1, #5
    340e:	d013      	beq.n	3438 <NOROM_RFCRTrim+0x88>
    3410:	2906      	cmp	r1, #6
    3412:	d016      	beq.n	3442 <NOROM_RFCRTrim+0x92>
    3414:	2902      	cmp	r1, #2
    3416:	d11f      	bne.n	3458 <NOROM_RFCRTrim+0xa8>
    3418:	e007      	b.n	342a <NOROM_RFCRTrim+0x7a>
    341a:	290f      	cmp	r1, #15
    341c:	d015      	beq.n	344a <NOROM_RFCRTrim+0x9a>
    341e:	291e      	cmp	r1, #30
    3420:	d015      	beq.n	344e <NOROM_RFCRTrim+0x9e>
    3422:	290c      	cmp	r1, #12
    3424:	d118      	bne.n	3458 <NOROM_RFCRTrim+0xa8>
    3426:	4b20      	ldr	r3, [pc, #128]	; (34a8 <NOROM_RFCRTrim+0xf8>)
    3428:	e012      	b.n	3450 <NOROM_RFCRTrim+0xa0>
    342a:	4b20      	ldr	r3, [pc, #128]	; (34ac <NOROM_RFCRTrim+0xfc>)
    342c:	681b      	ldr	r3, [r3, #0]
    342e:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3432:	2b0f      	cmp	r3, #15
    3434:	d12a      	bne.n	348c <NOROM_RFCRTrim+0xdc>
    3436:	e023      	b.n	3480 <NOROM_RFCRTrim+0xd0>
    3438:	4b1d      	ldr	r3, [pc, #116]	; (34b0 <NOROM_RFCRTrim+0x100>)
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3440:	e02c      	b.n	349c <NOROM_RFCRTrim+0xec>
    3442:	4b1c      	ldr	r3, [pc, #112]	; (34b4 <NOROM_RFCRTrim+0x104>)
    3444:	e004      	b.n	3450 <NOROM_RFCRTrim+0xa0>
    3446:	4b1c      	ldr	r3, [pc, #112]	; (34b8 <NOROM_RFCRTrim+0x108>)
    3448:	e002      	b.n	3450 <NOROM_RFCRTrim+0xa0>
    344a:	4b1c      	ldr	r3, [pc, #112]	; (34bc <NOROM_RFCRTrim+0x10c>)
    344c:	e000      	b.n	3450 <NOROM_RFCRTrim+0xa0>
    344e:	4b1c      	ldr	r3, [pc, #112]	; (34c0 <NOROM_RFCRTrim+0x110>)
    3450:	681b      	ldr	r3, [r3, #0]
    3452:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3456:	e021      	b.n	349c <NOROM_RFCRTrim+0xec>
    3458:	4b14      	ldr	r3, [pc, #80]	; (34ac <NOROM_RFCRTrim+0xfc>)
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3460:	2b0f      	cmp	r3, #15
    3462:	d113      	bne.n	348c <NOROM_RFCRTrim+0xdc>
    3464:	3905      	subs	r1, #5
    3466:	2919      	cmp	r1, #25
    3468:	d80a      	bhi.n	3480 <NOROM_RFCRTrim+0xd0>
    346a:	2301      	movs	r3, #1
    346c:	fa03 f101 	lsl.w	r1, r3, r1
    3470:	4b14      	ldr	r3, [pc, #80]	; (34c4 <NOROM_RFCRTrim+0x114>)
    3472:	400b      	ands	r3, r1
    3474:	b123      	cbz	r3, 3480 <NOROM_RFCRTrim+0xd0>
    3476:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    347a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    347e:	e003      	b.n	3488 <NOROM_RFCRTrim+0xd8>
    3480:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3484:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3488:	6002      	str	r2, [r0, #0]
    348a:	bd70      	pop	{r4, r5, r6, pc}
    348c:	429c      	cmp	r4, r3
    348e:	d209      	bcs.n	34a4 <NOROM_RFCRTrim+0xf4>
    3490:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3494:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3498:	6003      	str	r3, [r0, #0]
    349a:	bd70      	pop	{r4, r5, r6, pc}
    349c:	2b0f      	cmp	r3, #15
    349e:	d1f5      	bne.n	348c <NOROM_RFCRTrim+0xdc>
    34a0:	3905      	subs	r1, #5
    34a2:	e7e2      	b.n	346a <NOROM_RFCRTrim+0xba>
    34a4:	bd70      	pop	{r4, r5, r6, pc}
    34a6:	bf00      	nop
    34a8:	50001100 	andpl	r1, r0, r0, lsl #2
    34ac:	50001380 	andpl	r1, r0, r0, lsl #7
    34b0:	50001320 	andpl	r1, r0, r0, lsr #6
    34b4:	500010f8 	strdpl	r1, [r0], -r8
    34b8:	500010fc 	strdpl	r1, [r0], -ip
    34bc:	50001104 	andpl	r1, r0, r4, lsl #2
    34c0:	50001108 	andpl	r1, r0, r8, lsl #2
    34c4:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

000034c8 <NOROM_RFCRfTrimSet>:
    34c8:	4603      	mov	r3, r0
    34ca:	b530      	push	{r4, r5, lr}
    34cc:	4c05      	ldr	r4, [pc, #20]	; (34e4 <NOROM_RFCRfTrimSet+0x1c>)
    34ce:	f100 0510 	add.w	r5, r0, #16
    34d2:	4622      	mov	r2, r4
    34d4:	6818      	ldr	r0, [r3, #0]
    34d6:	6859      	ldr	r1, [r3, #4]
    34d8:	3308      	adds	r3, #8
    34da:	c203      	stmia	r2!, {r0, r1}
    34dc:	42ab      	cmp	r3, r5
    34de:	4614      	mov	r4, r2
    34e0:	d1f7      	bne.n	34d2 <NOROM_RFCRfTrimSet+0xa>
    34e2:	bd30      	pop	{r4, r5, pc}
    34e4:	21000018 	tstcs	r0, r8, lsl r0

000034e8 <NOROM_RFCAdi3VcoLdoVoltageMode>:
    34e8:	4b04      	ldr	r3, [pc, #16]	; (34fc <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    34ea:	b128      	cbz	r0, 34f8 <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    34ec:	4a04      	ldr	r2, [pc, #16]	; (3500 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    34ee:	2100      	movs	r1, #0
    34f0:	7011      	strb	r1, [r2, #0]
    34f2:	2220      	movs	r2, #32
    34f4:	701a      	strb	r2, [r3, #0]
    34f6:	4770      	bx	lr
    34f8:	7018      	strb	r0, [r3, #0]
    34fa:	4770      	bx	lr
    34fc:	40086202 	andmi	r6, r8, r2, lsl #4
    3500:	40086200 	andmi	r6, r8, r0, lsl #4

00003504 <TrimAfterColdResetWakeupFromShutDown>:
    3504:	b538      	push	{r3, r4, r5, lr}
    3506:	4605      	mov	r5, r0
    3508:	4b26      	ldr	r3, [pc, #152]	; (35a4 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    350a:	2201      	movs	r2, #1
    350c:	601a      	str	r2, [r3, #0]
    350e:	4b26      	ldr	r3, [pc, #152]	; (35a8 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3510:	681b      	ldr	r3, [r3, #0]
    3512:	2b00      	cmp	r3, #0
    3514:	d0fb      	beq.n	350e <TrimAfterColdResetWakeupFromShutDown+0xa>
    3516:	4b25      	ldr	r3, [pc, #148]	; (35ac <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3518:	22c0      	movs	r2, #192	; 0xc0
    351a:	601a      	str	r2, [r3, #0]
    351c:	4b24      	ldr	r3, [pc, #144]	; (35b0 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    351e:	681b      	ldr	r3, [r3, #0]
    3520:	079b      	lsls	r3, r3, #30
    3522:	bf5f      	itttt	pl
    3524:	4b23      	ldrpl	r3, [pc, #140]	; (35b4 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    3526:	4a24      	ldrpl	r2, [pc, #144]	; (35b8 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    3528:	681b      	ldrpl	r3, [r3, #0]
    352a:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    352e:	bf5c      	itt	pl
    3530:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3534:	7013      	strbpl	r3, [r2, #0]
    3536:	4b21      	ldr	r3, [pc, #132]	; (35bc <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    3538:	2200      	movs	r2, #0
    353a:	601a      	str	r2, [r3, #0]
    353c:	4b20      	ldr	r3, [pc, #128]	; (35c0 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    353e:	681c      	ldr	r4, [r3, #0]
    3540:	4620      	mov	r0, r4
    3542:	f000 f8d9 	bl	36f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    3546:	4628      	mov	r0, r5
    3548:	4621      	mov	r1, r4
    354a:	f000 fa0d 	bl	3968 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    354e:	f240 221d 	movw	r2, #541	; 0x21d
    3552:	4b1c      	ldr	r3, [pc, #112]	; (35c4 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3554:	681b      	ldr	r3, [r3, #0]
    3556:	b29b      	uxth	r3, r3
    3558:	4293      	cmp	r3, r2
    355a:	d814      	bhi.n	3586 <TrimAfterColdResetWakeupFromShutDown+0x82>
    355c:	4a1a      	ldr	r2, [pc, #104]	; (35c8 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    355e:	6813      	ldr	r3, [r2, #0]
    3560:	6812      	ldr	r2, [r2, #0]
    3562:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3566:	f3c2 4203 	ubfx	r2, r2, #16, #4
    356a:	b103      	cbz	r3, 356e <TrimAfterColdResetWakeupFromShutDown+0x6a>
    356c:	3b01      	subs	r3, #1
    356e:	1f91      	subs	r1, r2, #6
    3570:	2901      	cmp	r1, #1
    3572:	bf86      	itte	hi
    3574:	3202      	addhi	r2, #2
    3576:	f002 020f 	andhi.w	r2, r2, #15
    357a:	2207      	movls	r2, #7
    357c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3580:	4a12      	ldr	r2, [pc, #72]	; (35cc <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3582:	b2db      	uxtb	r3, r3
    3584:	7013      	strb	r3, [r2, #0]
    3586:	4620      	mov	r0, r4
    3588:	f000 fabc 	bl	3b04 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    358c:	4b10      	ldr	r3, [pc, #64]	; (35d0 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    358e:	2002      	movs	r0, #2
    3590:	681b      	ldr	r3, [r3, #0]
    3592:	68db      	ldr	r3, [r3, #12]
    3594:	4798      	blx	r3
    3596:	4b05      	ldr	r3, [pc, #20]	; (35ac <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    3598:	2240      	movs	r2, #64	; 0x40
    359a:	601a      	str	r2, [r3, #0]
    359c:	4b0d      	ldr	r3, [pc, #52]	; (35d4 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    359e:	2201      	movs	r2, #1
    35a0:	601a      	str	r2, [r3, #0]
    35a2:	bd38      	pop	{r3, r4, r5, pc}
    35a4:	40091010 	andmi	r1, r9, r0, lsl r0
    35a8:	43220294 			; <UNDEFINED> instruction: 0x43220294
    35ac:	400c6000 	andmi	r6, ip, r0
    35b0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    35b4:	50003fac 	andpl	r3, r0, ip, lsr #31
    35b8:	40086256 	andmi	r6, r8, r6, asr r2
    35bc:	40091040 	andmi	r1, r9, r0, asr #32
    35c0:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    35c4:	50001314 	andpl	r1, r0, r4, lsl r3
    35c8:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    35cc:	40086002 	andmi	r6, r8, r2
    35d0:	100001a0 	andne	r0, r0, r0, lsr #3
    35d4:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

000035d8 <NOROM_SetupTrimDevice>:
    35d8:	b510      	push	{r4, lr}
    35da:	4b1f      	ldr	r3, [pc, #124]	; (3658 <NOROM_SetupTrimDevice+0x80>)
    35dc:	681c      	ldr	r4, [r3, #0]
    35de:	1c63      	adds	r3, r4, #1
    35e0:	bf08      	it	eq
    35e2:	2400      	moveq	r4, #0
    35e4:	f000 fcde 	bl	3fa4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    35e8:	4b1c      	ldr	r3, [pc, #112]	; (365c <NOROM_SetupTrimDevice+0x84>)
    35ea:	2200      	movs	r2, #0
    35ec:	601a      	str	r2, [r3, #0]
    35ee:	4a1c      	ldr	r2, [pc, #112]	; (3660 <NOROM_SetupTrimDevice+0x88>)
    35f0:	2301      	movs	r3, #1
    35f2:	6013      	str	r3, [r2, #0]
    35f4:	4a1b      	ldr	r2, [pc, #108]	; (3664 <NOROM_SetupTrimDevice+0x8c>)
    35f6:	6013      	str	r3, [r2, #0]
    35f8:	f000 fa3e 	bl	3a78 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    35fc:	4b1a      	ldr	r3, [pc, #104]	; (3668 <NOROM_SetupTrimDevice+0x90>)
    35fe:	681b      	ldr	r3, [r3, #0]
    3600:	b123      	cbz	r3, 360c <NOROM_SetupTrimDevice+0x34>
    3602:	4b1a      	ldr	r3, [pc, #104]	; (366c <NOROM_SetupTrimDevice+0x94>)
    3604:	4620      	mov	r0, r4
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	f7ff ff7c 	bl	3504 <TrimAfterColdResetWakeupFromShutDown>
    360c:	4b18      	ldr	r3, [pc, #96]	; (3670 <NOROM_SetupTrimDevice+0x98>)
    360e:	2200      	movs	r2, #0
    3610:	601a      	str	r2, [r3, #0]
    3612:	4a18      	ldr	r2, [pc, #96]	; (3674 <NOROM_SetupTrimDevice+0x9c>)
    3614:	6813      	ldr	r3, [r2, #0]
    3616:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    361a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    361e:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3626:	6013      	str	r3, [r2, #0]
    3628:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    362c:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3630:	6813      	ldr	r3, [r2, #0]
    3632:	f3c3 3301 	ubfx	r3, r3, #12, #2
    3636:	2b01      	cmp	r3, #1
    3638:	bf01      	itttt	eq
    363a:	6813      	ldreq	r3, [r2, #0]
    363c:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3640:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3644:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    3648:	bf04      	itt	eq
    364a:	6011      	streq	r1, [r2, #0]
    364c:	6013      	streq	r3, [r2, #0]
    364e:	4b0a      	ldr	r3, [pc, #40]	; (3678 <NOROM_SetupTrimDevice+0xa0>)
    3650:	681b      	ldr	r3, [r3, #0]
    3652:	2b00      	cmp	r3, #0
    3654:	d1fb      	bne.n	364e <NOROM_SetupTrimDevice+0x76>
    3656:	bd10      	pop	{r4, pc}
    3658:	5000131c 	andpl	r1, r0, ip, lsl r3
    365c:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3660:	400c605c 	andmi	r6, ip, ip, asr r0
    3664:	43042208 	movwmi	r2, #16904	; 0x4208
    3668:	43280180 			; <UNDEFINED> instruction: 0x43280180
    366c:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3670:	4008218c 	andmi	r2, r8, ip, lsl #3
    3674:	40032048 	andmi	r2, r3, r8, asr #32
    3678:	4268000c 	rsbmi	r0, r8, #12

0000367c <NOROM_SetupSetVddrLevel>:
    367c:	b530      	push	{r4, r5, lr}
    367e:	4b19      	ldr	r3, [pc, #100]	; (36e4 <NOROM_SetupSetVddrLevel+0x68>)
    3680:	681a      	ldr	r2, [r3, #0]
    3682:	4b19      	ldr	r3, [pc, #100]	; (36e8 <NOROM_SetupSetVddrLevel+0x6c>)
    3684:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	2a15      	cmp	r2, #21
    368c:	f003 031f 	and.w	r3, r3, #31
    3690:	bf88      	it	hi
    3692:	3a20      	subhi	r2, #32
    3694:	2b15      	cmp	r3, #21
    3696:	bf88      	it	hi
    3698:	3b20      	subhi	r3, #32
    369a:	4293      	cmp	r3, r2
    369c:	d020      	beq.n	36e0 <NOROM_SetupSetVddrLevel+0x64>
    369e:	4913      	ldr	r1, [pc, #76]	; (36ec <NOROM_SetupSetVddrLevel+0x70>)
    36a0:	2000      	movs	r0, #0
    36a2:	6008      	str	r0, [r1, #0]
    36a4:	4608      	mov	r0, r1
    36a6:	1ad1      	subs	r1, r2, r3
    36a8:	2902      	cmp	r1, #2
    36aa:	dc05      	bgt.n	36b8 <NOROM_SetupSetVddrLevel+0x3c>
    36ac:	f06f 0401 	mvn.w	r4, #1
    36b0:	42a1      	cmp	r1, r4
    36b2:	bfb8      	it	lt
    36b4:	4621      	movlt	r1, r4
    36b6:	e000      	b.n	36ba <NOROM_SetupSetVddrLevel+0x3e>
    36b8:	2102      	movs	r1, #2
    36ba:	440b      	add	r3, r1
    36bc:	490c      	ldr	r1, [pc, #48]	; (36f0 <NOROM_SetupSetVddrLevel+0x74>)
    36be:	4d0d      	ldr	r5, [pc, #52]	; (36f4 <NOROM_SetupSetVddrLevel+0x78>)
    36c0:	680c      	ldr	r4, [r1, #0]
    36c2:	f003 041f 	and.w	r4, r3, #31
    36c6:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    36ca:	802c      	strh	r4, [r5, #0]
    36cc:	4293      	cmp	r3, r2
    36ce:	f04f 0401 	mov.w	r4, #1
    36d2:	600c      	str	r4, [r1, #0]
    36d4:	d1e7      	bne.n	36a6 <NOROM_SetupSetVddrLevel+0x2a>
    36d6:	680b      	ldr	r3, [r1, #0]
    36d8:	600c      	str	r4, [r1, #0]
    36da:	680b      	ldr	r3, [r1, #0]
    36dc:	6004      	str	r4, [r0, #0]
    36de:	680b      	ldr	r3, [r1, #0]
    36e0:	bd30      	pop	{r4, r5, pc}
    36e2:	bf00      	nop
    36e4:	50001388 	andpl	r1, r0, r8, lsl #7
    36e8:	40086206 	andmi	r6, r8, r6, lsl #4
    36ec:	43200098 			; <UNDEFINED> instruction: 0x43200098
    36f0:	4009202c 	andmi	r2, r9, ip, lsr #32
    36f4:	4008626c 	andmi	r6, r8, ip, ror #4

000036f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    36f8:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    36fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3700:	b510      	push	{r4, lr}
    3702:	4604      	mov	r4, r0
    3704:	d10f      	bne.n	3726 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    3706:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    370a:	4a1e      	ldr	r2, [pc, #120]	; (3784 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    370c:	2380      	movs	r3, #128	; 0x80
    370e:	7013      	strb	r3, [r2, #0]
    3710:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3714:	f802 3c10 	strb.w	r3, [r2, #-16]
    3718:	f7ff ffb0 	bl	367c <NOROM_SetupSetVddrLevel>
    371c:	4b1a      	ldr	r3, [pc, #104]	; (3788 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    371e:	681b      	ldr	r3, [r3, #0]
    3720:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3724:	e003      	b.n	372e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    3726:	4b19      	ldr	r3, [pc, #100]	; (378c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    3728:	681b      	ldr	r3, [r3, #0]
    372a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    372e:	2b15      	cmp	r3, #21
    3730:	bf88      	it	hi
    3732:	3b20      	subhi	r3, #32
    3734:	eb03 7324 	add.w	r3, r3, r4, asr #28
    3738:	3301      	adds	r3, #1
    373a:	2b15      	cmp	r3, #21
    373c:	dc05      	bgt.n	374a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    373e:	f06f 0209 	mvn.w	r2, #9
    3742:	4293      	cmp	r3, r2
    3744:	bfb8      	it	lt
    3746:	4613      	movlt	r3, r2
    3748:	e000      	b.n	374c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    374a:	2315      	movs	r3, #21
    374c:	4a10      	ldr	r2, [pc, #64]	; (3790 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    374e:	f003 031f 	and.w	r3, r3, #31
    3752:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    3756:	8013      	strh	r3, [r2, #0]
    3758:	4b0e      	ldr	r3, [pc, #56]	; (3794 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	f013 0302 	ands.w	r3, r3, #2
    3760:	bf0a      	itet	eq
    3762:	4a0d      	ldreq	r2, [pc, #52]	; (3798 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    3764:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    3768:	6013      	streq	r3, [r2, #0]
    376a:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    376e:	4a0b      	ldr	r2, [pc, #44]	; (379c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    3770:	f083 0301 	eor.w	r3, r3, #1
    3774:	6013      	str	r3, [r2, #0]
    3776:	f3c4 6480 	ubfx	r4, r4, #26, #1
    377a:	4b09      	ldr	r3, [pc, #36]	; (37a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    377c:	f084 0401 	eor.w	r4, r4, #1
    3780:	601c      	str	r4, [r3, #0]
    3782:	bd10      	pop	{r4, pc}
    3784:	40086225 	andmi	r6, r8, r5, lsr #4
    3788:	50001388 	andpl	r1, r0, r8, lsl #7
    378c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3790:	4008626e 	andmi	r6, r8, lr, ror #4
    3794:	40090000 	andmi	r0, r9, r0
    3798:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    379c:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    37a0:	43200008 			; <UNDEFINED> instruction: 0x43200008

000037a4 <NOROM_SetupGetTrimForAnabypassValue1>:
    37a4:	4b15      	ldr	r3, [pc, #84]	; (37fc <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    37a6:	0381      	lsls	r1, r0, #14
    37a8:	681b      	ldr	r3, [r3, #0]
    37aa:	f3c3 6283 	ubfx	r2, r3, #26, #4
    37ae:	f3c3 238f 	ubfx	r3, r3, #10, #16
    37b2:	d41f      	bmi.n	37f4 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    37b4:	f340 2007 	sbfx	r0, r0, #8, #8
    37b8:	2800      	cmp	r0, #0
    37ba:	da19      	bge.n	37f0 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    37bc:	085b      	lsrs	r3, r3, #1
    37be:	d105      	bne.n	37cc <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    37c0:	0852      	lsrs	r2, r2, #1
    37c2:	bf06      	itte	eq
    37c4:	2301      	moveq	r3, #1
    37c6:	461a      	moveq	r2, r3
    37c8:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    37cc:	3001      	adds	r0, #1
    37ce:	e7f3      	b.n	37b8 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    37d0:	005b      	lsls	r3, r3, #1
    37d2:	f043 0301 	orr.w	r3, r3, #1
    37d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    37da:	d308      	bcc.n	37ee <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    37dc:	0052      	lsls	r2, r2, #1
    37de:	f042 0201 	orr.w	r2, r2, #1
    37e2:	2a0f      	cmp	r2, #15
    37e4:	bf86      	itte	hi
    37e6:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    37ea:	220f      	movhi	r2, #15
    37ec:	2301      	movls	r3, #1
    37ee:	3801      	subs	r0, #1
    37f0:	2800      	cmp	r0, #0
    37f2:	d1ed      	bne.n	37d0 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    37f4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    37f8:	4770      	bx	lr
    37fa:	bf00      	nop
    37fc:	50001350 	andpl	r1, r0, r0, asr r3

00003800 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    3800:	4a04      	ldr	r2, [pc, #16]	; (3814 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    3802:	6813      	ldr	r3, [r2, #0]
    3804:	6810      	ldr	r0, [r2, #0]
    3806:	f3c3 0387 	ubfx	r3, r3, #2, #8
    380a:	f000 0003 	and.w	r0, r0, #3
    380e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3812:	4770      	bx	lr
    3814:	50001350 	andpl	r1, r0, r0, asr r3

00003818 <NOROM_SetupGetTrimForAmpcompTh2>:
    3818:	4b02      	ldr	r3, [pc, #8]	; (3824 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    381a:	6818      	ldr	r0, [r3, #0]
    381c:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    3820:	4770      	bx	lr
    3822:	bf00      	nop
    3824:	50001374 	andpl	r1, r0, r4, ror r3

00003828 <NOROM_SetupGetTrimForAmpcompTh1>:
    3828:	4b03      	ldr	r3, [pc, #12]	; (3838 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    382a:	6818      	ldr	r0, [r3, #0]
    382c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3830:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    3834:	4770      	bx	lr
    3836:	bf00      	nop
    3838:	50001370 	andpl	r1, r0, r0, ror r3

0000383c <NOROM_SetupGetTrimForAmpcompCtrl>:
    383c:	b570      	push	{r4, r5, r6, lr}
    383e:	4b15      	ldr	r3, [pc, #84]	; (3894 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    3840:	4915      	ldr	r1, [pc, #84]	; (3898 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    3842:	681c      	ldr	r4, [r3, #0]
    3844:	6809      	ldr	r1, [r1, #0]
    3846:	f3c4 5203 	ubfx	r2, r4, #20, #4
    384a:	f011 0501 	ands.w	r5, r1, #1
    384e:	f3c4 4303 	ubfx	r3, r4, #16, #4
    3852:	d113      	bne.n	387c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    3854:	4911      	ldr	r1, [pc, #68]	; (389c <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    3856:	6809      	ldr	r1, [r1, #0]
    3858:	f341 2603 	sbfx	r6, r1, #8, #4
    385c:	18b2      	adds	r2, r6, r2
    385e:	d403      	bmi.n	3868 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    3860:	2a0f      	cmp	r2, #15
    3862:	bfa8      	it	ge
    3864:	220f      	movge	r2, #15
    3866:	e000      	b.n	386a <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    3868:	462a      	mov	r2, r5
    386a:	f341 3103 	sbfx	r1, r1, #12, #4
    386e:	18cb      	adds	r3, r1, r3
    3870:	d403      	bmi.n	387a <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    3872:	2b0f      	cmp	r3, #15
    3874:	bfa8      	it	ge
    3876:	230f      	movge	r3, #15
    3878:	e000      	b.n	387c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    387a:	2300      	movs	r3, #0
    387c:	b2a1      	uxth	r1, r4
    387e:	2821      	cmp	r0, #33	; 0x21
    3880:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    3884:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3888:	bf84      	itt	hi
    388a:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    388e:	4323      	orrhi	r3, r4
    3890:	4618      	mov	r0, r3
    3892:	bd70      	pop	{r4, r5, r6, pc}
    3894:	50001378 	andpl	r1, r0, r8, ror r3
    3898:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    389c:	50003fac 	andpl	r3, r0, ip, lsr #31

000038a0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    38a0:	281f      	cmp	r0, #31
    38a2:	bf83      	ittte	hi
    38a4:	4b02      	ldrhi	r3, [pc, #8]	; (38b0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    38a6:	6818      	ldrhi	r0, [r3, #0]
    38a8:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    38ac:	2000      	movls	r0, #0
    38ae:	4770      	bx	lr
    38b0:	50001398 	mulpl	r0, r8, r3

000038b4 <NOROM_SetupGetTrimForAdcShModeEn>:
    38b4:	2821      	cmp	r0, #33	; 0x21
    38b6:	bf83      	ittte	hi
    38b8:	4b02      	ldrhi	r3, [pc, #8]	; (38c4 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    38ba:	6818      	ldrhi	r0, [r3, #0]
    38bc:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    38c0:	2001      	movls	r0, #1
    38c2:	4770      	bx	lr
    38c4:	5000138c 	andpl	r1, r0, ip, lsl #7

000038c8 <NOROM_SetupGetTrimForAdcShVbufEn>:
    38c8:	2821      	cmp	r0, #33	; 0x21
    38ca:	bf83      	ittte	hi
    38cc:	4b02      	ldrhi	r3, [pc, #8]	; (38d8 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    38ce:	6818      	ldrhi	r0, [r3, #0]
    38d0:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    38d4:	2001      	movls	r0, #1
    38d6:	4770      	bx	lr
    38d8:	5000138c 	andpl	r1, r0, ip, lsl #7

000038dc <NOROM_SetupGetTrimForXoscHfCtl>:
    38dc:	281f      	cmp	r0, #31
    38de:	bf81      	itttt	hi
    38e0:	4b07      	ldrhi	r3, [pc, #28]	; (3900 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    38e2:	681b      	ldrhi	r3, [r3, #0]
    38e4:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    38e8:	0080      	lslhi	r0, r0, #2
    38ea:	bf81      	itttt	hi
    38ec:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    38f0:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    38f4:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    38f8:	4318      	orrhi	r0, r3
    38fa:	bf98      	it	ls
    38fc:	2000      	movls	r0, #0
    38fe:	4770      	bx	lr
    3900:	50001398 	mulpl	r0, r8, r3

00003904 <NOROM_SetupGetTrimForXoscHfFastStart>:
    3904:	4b02      	ldr	r3, [pc, #8]	; (3910 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    3906:	6818      	ldr	r0, [r3, #0]
    3908:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    390c:	4770      	bx	lr
    390e:	bf00      	nop
    3910:	5000138c 	andpl	r1, r0, ip, lsl #7

00003914 <NOROM_SetupGetTrimForRadcExtCfg>:
    3914:	281f      	cmp	r0, #31
    3916:	bf81      	itttt	hi
    3918:	4b07      	ldrhi	r3, [pc, #28]	; (3938 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    391a:	681b      	ldrhi	r3, [r3, #0]
    391c:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    3920:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    3924:	bf81      	itttt	hi
    3926:	0400      	lslhi	r0, r0, #16
    3928:	031b      	lslhi	r3, r3, #12
    392a:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    392e:	b29b      	uxthhi	r3, r3
    3930:	bf8c      	ite	hi
    3932:	4318      	orrhi	r0, r3
    3934:	4801      	ldrls	r0, [pc, #4]	; (393c <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    3936:	4770      	bx	lr
    3938:	50001398 	mulpl	r0, r8, r3
    393c:	403f8000 	eorsmi	r8, pc, r0

00003940 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    3940:	2821      	cmp	r0, #33	; 0x21
    3942:	bf83      	ittte	hi
    3944:	4b02      	ldrhi	r3, [pc, #8]	; (3950 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    3946:	6818      	ldrhi	r0, [r3, #0]
    3948:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    394c:	2000      	movls	r0, #0
    394e:	4770      	bx	lr
    3950:	5000138c 	andpl	r1, r0, ip, lsl #7

00003954 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    3954:	2821      	cmp	r0, #33	; 0x21
    3956:	bf83      	ittte	hi
    3958:	4b02      	ldrhi	r3, [pc, #8]	; (3964 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    395a:	6818      	ldrhi	r0, [r3, #0]
    395c:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    3960:	2000      	movls	r0, #0
    3962:	4770      	bx	lr
    3964:	5000138c 	andpl	r1, r0, ip, lsl #7

00003968 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    3968:	b573      	push	{r0, r1, r4, r5, r6, lr}
    396a:	4605      	mov	r5, r0
    396c:	4608      	mov	r0, r1
    396e:	f7ff ff19 	bl	37a4 <NOROM_SetupGetTrimForAnabypassValue1>
    3972:	4c39      	ldr	r4, [pc, #228]	; (3a58 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    3974:	4602      	mov	r2, r0
    3976:	2118      	movs	r1, #24
    3978:	4620      	mov	r0, r4
    397a:	f000 fb33 	bl	3fe4 <NOROM_DDI32RegWrite>
    397e:	f7ff ff3f 	bl	3800 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    3982:	4b36      	ldr	r3, [pc, #216]	; (3a5c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    3984:	b280      	uxth	r0, r0
    3986:	681b      	ldr	r3, [r3, #0]
    3988:	9000      	str	r0, [sp, #0]
    398a:	685e      	ldr	r6, [r3, #4]
    398c:	4620      	mov	r0, r4
    398e:	212c      	movs	r1, #44	; 0x2c
    3990:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3994:	2300      	movs	r3, #0
    3996:	47b0      	blx	r6
    3998:	4b31      	ldr	r3, [pc, #196]	; (3a60 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    399a:	4620      	mov	r0, r4
    399c:	681a      	ldr	r2, [r3, #0]
    399e:	211c      	movs	r1, #28
    39a0:	f3c2 020d 	ubfx	r2, r2, #0, #14
    39a4:	f000 fb1e 	bl	3fe4 <NOROM_DDI32RegWrite>
    39a8:	f7ff ff36 	bl	3818 <NOROM_SetupGetTrimForAmpcompTh2>
    39ac:	2114      	movs	r1, #20
    39ae:	4602      	mov	r2, r0
    39b0:	4620      	mov	r0, r4
    39b2:	f000 fb17 	bl	3fe4 <NOROM_DDI32RegWrite>
    39b6:	f7ff ff37 	bl	3828 <NOROM_SetupGetTrimForAmpcompTh1>
    39ba:	2110      	movs	r1, #16
    39bc:	4602      	mov	r2, r0
    39be:	4620      	mov	r0, r4
    39c0:	f000 fb10 	bl	3fe4 <NOROM_DDI32RegWrite>
    39c4:	4628      	mov	r0, r5
    39c6:	f7ff ff39 	bl	383c <NOROM_SetupGetTrimForAmpcompCtrl>
    39ca:	210c      	movs	r1, #12
    39cc:	4602      	mov	r2, r0
    39ce:	4620      	mov	r0, r4
    39d0:	f000 fb08 	bl	3fe4 <NOROM_DDI32RegWrite>
    39d4:	4628      	mov	r0, r5
    39d6:	f7ff ff6d 	bl	38b4 <NOROM_SetupGetTrimForAdcShModeEn>
    39da:	0040      	lsls	r0, r0, #1
    39dc:	4e21      	ldr	r6, [pc, #132]	; (3a64 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    39de:	f040 0020 	orr.w	r0, r0, #32
    39e2:	b2c0      	uxtb	r0, r0
    39e4:	7030      	strb	r0, [r6, #0]
    39e6:	4628      	mov	r0, r5
    39e8:	f7ff ff6e 	bl	38c8 <NOROM_SetupGetTrimForAdcShVbufEn>
    39ec:	f040 0010 	orr.w	r0, r0, #16
    39f0:	b2c0      	uxtb	r0, r0
    39f2:	7030      	strb	r0, [r6, #0]
    39f4:	4628      	mov	r0, r5
    39f6:	f7ff ff71 	bl	38dc <NOROM_SetupGetTrimForXoscHfCtl>
    39fa:	2128      	movs	r1, #40	; 0x28
    39fc:	4602      	mov	r2, r0
    39fe:	4620      	mov	r0, r4
    3a00:	f000 faf0 	bl	3fe4 <NOROM_DDI32RegWrite>
    3a04:	4628      	mov	r0, r5
    3a06:	f7ff ff4b 	bl	38a0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    3a0a:	0040      	lsls	r0, r0, #1
    3a0c:	4b16      	ldr	r3, [pc, #88]	; (3a68 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    3a0e:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    3a12:	b2c0      	uxtb	r0, r0
    3a14:	7018      	strb	r0, [r3, #0]
    3a16:	4628      	mov	r0, r5
    3a18:	f7ff ff92 	bl	3940 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    3a1c:	00c0      	lsls	r0, r0, #3
    3a1e:	4b13      	ldr	r3, [pc, #76]	; (3a6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    3a20:	f060 007f 	orn	r0, r0, #127	; 0x7f
    3a24:	b2c0      	uxtb	r0, r0
    3a26:	7018      	strb	r0, [r3, #0]
    3a28:	4628      	mov	r0, r5
    3a2a:	f7ff ff93 	bl	3954 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    3a2e:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    3a32:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    3a36:	4b0e      	ldr	r3, [pc, #56]	; (3a70 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    3a38:	b280      	uxth	r0, r0
    3a3a:	8018      	strh	r0, [r3, #0]
    3a3c:	4628      	mov	r0, r5
    3a3e:	f7ff ff69 	bl	3914 <NOROM_SetupGetTrimForRadcExtCfg>
    3a42:	2108      	movs	r1, #8
    3a44:	4602      	mov	r2, r0
    3a46:	4620      	mov	r0, r4
    3a48:	f000 facc 	bl	3fe4 <NOROM_DDI32RegWrite>
    3a4c:	4b09      	ldr	r3, [pc, #36]	; (3a74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    3a4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3a52:	601a      	str	r2, [r3, #0]
    3a54:	b002      	add	sp, #8
    3a56:	bd70      	pop	{r4, r5, r6, pc}
    3a58:	400ca000 	andmi	sl, ip, r0
    3a5c:	100001a4 	andne	r0, r0, r4, lsr #3
    3a60:	5000137c 	andpl	r1, r0, ip, ror r3
    3a64:	400ca149 	andmi	sl, ip, r9, asr #2
    3a68:	400ca14c 	andmi	sl, ip, ip, asr #2
    3a6c:	400ca141 	andmi	sl, ip, r1, asr #2
    3a70:	400ca1dc 	ldrdmi	sl, [ip], -ip
    3a74:	400ca040 	andmi	sl, ip, r0, asr #32

00003a78 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    3a78:	b530      	push	{r4, r5, lr}
    3a7a:	4b14      	ldr	r3, [pc, #80]	; (3acc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    3a7c:	681b      	ldr	r3, [r3, #0]
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d1fb      	bne.n	3a7a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    3a82:	4a13      	ldr	r2, [pc, #76]	; (3ad0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    3a84:	4913      	ldr	r1, [pc, #76]	; (3ad4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    3a86:	6813      	ldr	r3, [r2, #0]
    3a88:	6809      	ldr	r1, [r1, #0]
    3a8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3a8e:	f023 0307 	bic.w	r3, r3, #7
    3a92:	f011 0f04 	tst.w	r1, #4
    3a96:	4614      	mov	r4, r2
    3a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    3a9c:	d003      	beq.n	3aa6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    3a9e:	f043 0305 	orr.w	r3, r3, #5
    3aa2:	6013      	str	r3, [r2, #0]
    3aa4:	bd30      	pop	{r4, r5, pc}
    3aa6:	490c      	ldr	r1, [pc, #48]	; (3ad8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    3aa8:	f043 0004 	orr.w	r0, r3, #4
    3aac:	680d      	ldr	r5, [r1, #0]
    3aae:	07ad      	lsls	r5, r5, #30
    3ab0:	d009      	beq.n	3ac6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    3ab2:	f043 0307 	orr.w	r3, r3, #7
    3ab6:	6013      	str	r3, [r2, #0]
    3ab8:	680b      	ldr	r3, [r1, #0]
    3aba:	f003 0303 	and.w	r3, r3, #3
    3abe:	2b03      	cmp	r3, #3
    3ac0:	d1fa      	bne.n	3ab8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    3ac2:	6020      	str	r0, [r4, #0]
    3ac4:	bd30      	pop	{r4, r5, pc}
    3ac6:	6010      	str	r0, [r2, #0]
    3ac8:	bd30      	pop	{r4, r5, pc}
    3aca:	bf00      	nop
    3acc:	4268000c 	rsbmi	r0, r8, #12
    3ad0:	40034004 	andmi	r4, r3, r4
    3ad4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3ad8:	40034000 	andmi	r4, r3, r0

00003adc <NOROM_SetupSetAonRtcSubSecInc>:
    3adc:	4b07      	ldr	r3, [pc, #28]	; (3afc <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    3ade:	b282      	uxth	r2, r0
    3ae0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3ae4:	601a      	str	r2, [r3, #0]
    3ae6:	6058      	str	r0, [r3, #4]
    3ae8:	2201      	movs	r2, #1
    3aea:	3308      	adds	r3, #8
    3aec:	601a      	str	r2, [r3, #0]
    3aee:	4a04      	ldr	r2, [pc, #16]	; (3b00 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    3af0:	6812      	ldr	r2, [r2, #0]
    3af2:	2a00      	cmp	r2, #0
    3af4:	d0fb      	beq.n	3aee <NOROM_SetupSetAonRtcSubSecInc+0x12>
    3af6:	2200      	movs	r2, #0
    3af8:	601a      	str	r2, [r3, #0]
    3afa:	4770      	bx	lr
    3afc:	400c603c 	andmi	r6, ip, ip, lsr r0
    3b00:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00003b04 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    3b04:	f3c0 4381 	ubfx	r3, r0, #18, #2
    3b08:	2b01      	cmp	r3, #1
    3b0a:	b510      	push	{r4, lr}
    3b0c:	4604      	mov	r4, r0
    3b0e:	d002      	beq.n	3b16 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    3b10:	2b02      	cmp	r3, #2
    3b12:	d02f      	beq.n	3b74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b14:	e02a      	b.n	3b6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b16:	4b42      	ldr	r3, [pc, #264]	; (3c20 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	039a      	lsls	r2, r3, #14
    3b1c:	d426      	bmi.n	3b6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b1e:	4a41      	ldr	r2, [pc, #260]	; (3c24 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3b24:	6011      	str	r1, [r2, #0]
    3b26:	4940      	ldr	r1, [pc, #256]	; (3c28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    3b28:	f3c3 3003 	ubfx	r0, r3, #12, #4
    3b2c:	680a      	ldr	r2, [r1, #0]
    3b2e:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    3b32:	4302      	orrs	r2, r0
    3b34:	f3c3 4000 	ubfx	r0, r3, #16, #1
    3b38:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    3b3c:	600a      	str	r2, [r1, #0]
    3b3e:	f851 2c01 	ldr.w	r2, [r1, #-1]
    3b42:	f3c3 2003 	ubfx	r0, r3, #8, #4
    3b46:	f022 020f 	bic.w	r2, r2, #15
    3b4a:	4302      	orrs	r2, r0
    3b4c:	f851 0c01 	ldr.w	r0, [r1, #-1]
    3b50:	f841 2c01 	str.w	r2, [r1, #-1]
    3b54:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b58:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    3b5c:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    3b60:	4313      	orrs	r3, r2
    3b62:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b66:	f841 3c02 	str.w	r3, [r1, #-2]
    3b6a:	e003      	b.n	3b74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b6c:	4b2d      	ldr	r3, [pc, #180]	; (3c24 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3b72:	601a      	str	r2, [r3, #0]
    3b74:	4b2d      	ldr	r3, [pc, #180]	; (3c2c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	071b      	lsls	r3, r3, #28
    3b7a:	bf5e      	ittt	pl
    3b7c:	4b2c      	ldrpl	r3, [pc, #176]	; (3c30 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    3b7e:	2240      	movpl	r2, #64	; 0x40
    3b80:	601a      	strpl	r2, [r3, #0]
    3b82:	4b2c      	ldr	r3, [pc, #176]	; (3c34 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    3b84:	f44f 7200 	mov.w	r2, #512	; 0x200
    3b88:	601a      	str	r2, [r3, #0]
    3b8a:	f7ff febb 	bl	3904 <NOROM_SetupGetTrimForXoscHfFastStart>
    3b8e:	4b2a      	ldr	r3, [pc, #168]	; (3c38 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    3b90:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3b94:	b2c0      	uxtb	r0, r0
    3b96:	7018      	strb	r0, [r3, #0]
    3b98:	f3c4 5081 	ubfx	r0, r4, #22, #2
    3b9c:	2801      	cmp	r0, #1
    3b9e:	d00b      	beq.n	3bb8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    3ba0:	d302      	bcc.n	3ba8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    3ba2:	2802      	cmp	r0, #2
    3ba4:	d026      	beq.n	3bf4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    3ba6:	e028      	b.n	3bfa <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    3ba8:	2004      	movs	r0, #4
    3baa:	2101      	movs	r1, #1
    3bac:	f7ff fa84 	bl	30b8 <NOROM_OSCClockSourceSet>
    3bb0:	4822      	ldr	r0, [pc, #136]	; (3c3c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    3bb2:	f7ff ff93 	bl	3adc <NOROM_SetupSetAonRtcSubSecInc>
    3bb6:	e024      	b.n	3c02 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    3bb8:	f7ff faac 	bl	3114 <NOROM_OSCClockSourceGet>
    3bbc:	4604      	mov	r4, r0
    3bbe:	2004      	movs	r0, #4
    3bc0:	4621      	mov	r1, r4
    3bc2:	f7ff fa79 	bl	30b8 <NOROM_OSCClockSourceSet>
    3bc6:	2004      	movs	r0, #4
    3bc8:	f7ff faa4 	bl	3114 <NOROM_OSCClockSourceGet>
    3bcc:	42a0      	cmp	r0, r4
    3bce:	d1fa      	bne.n	3bc6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    3bd0:	4b1b      	ldr	r3, [pc, #108]	; (3c40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    3bd2:	681c      	ldr	r4, [r3, #0]
    3bd4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    3bd8:	f7ff ff80 	bl	3adc <NOROM_SetupSetAonRtcSubSecInc>
    3bdc:	4b19      	ldr	r3, [pc, #100]	; (3c44 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    3bde:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    3be2:	681b      	ldr	r3, [r3, #0]
    3be4:	0e20      	lsrs	r0, r4, #24
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	2107      	movs	r1, #7
    3bea:	4798      	blx	r3
    3bec:	4b0d      	ldr	r3, [pc, #52]	; (3c24 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bf2:	601a      	str	r2, [r3, #0]
    3bf4:	2004      	movs	r0, #4
    3bf6:	2103      	movs	r1, #3
    3bf8:	e001      	b.n	3bfe <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    3bfa:	2004      	movs	r0, #4
    3bfc:	2102      	movs	r1, #2
    3bfe:	f7ff fa5b 	bl	30b8 <NOROM_OSCClockSourceSet>
    3c02:	4b11      	ldr	r3, [pc, #68]	; (3c48 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    3c04:	4a11      	ldr	r2, [pc, #68]	; (3c4c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    3c06:	681b      	ldr	r3, [r3, #0]
    3c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c0c:	7013      	strb	r3, [r2, #0]
    3c0e:	f647 0218 	movw	r2, #30744	; 0x7818
    3c12:	4b0f      	ldr	r3, [pc, #60]	; (3c50 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    3c14:	801a      	strh	r2, [r3, #0]
    3c16:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    3c1a:	3b44      	subs	r3, #68	; 0x44
    3c1c:	681b      	ldr	r3, [r3, #0]
    3c1e:	bd10      	pop	{r4, pc}
    3c20:	5000138c 	andpl	r1, r0, ip, lsl #7
    3c24:	400ca040 	andmi	sl, ip, r0, asr #32
    3c28:	4008600c 	andmi	r6, r8, ip
    3c2c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3c30:	400ca068 	andmi	sl, ip, r8, rrx
    3c34:	400ca080 	andmi	sl, ip, r0, lsl #1
    3c38:	400ca108 	andmi	sl, ip, r8, lsl #2
    3c3c:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    3c40:	50003fa8 	andpl	r3, r0, r8, lsr #31
    3c44:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    3c48:	5000136c 	andpl	r1, r0, ip, ror #6
    3c4c:	400cb00b 	andmi	fp, ip, fp
    3c50:	400cb070 	andmi	fp, ip, r0, ror r0

00003c54 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    3c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c58:	4b77      	ldr	r3, [pc, #476]	; (3e38 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    3c5a:	4607      	mov	r7, r0
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	4e77      	ldr	r6, [pc, #476]	; (3e3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3c60:	f013 0f02 	tst.w	r3, #2
    3c64:	d004      	beq.n	3c70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    3c66:	2308      	movs	r3, #8
    3c68:	71b3      	strb	r3, [r6, #6]
    3c6a:	4a75      	ldr	r2, [pc, #468]	; (3e40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    3c6c:	4b75      	ldr	r3, [pc, #468]	; (3e44 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3c6e:	e0df      	b.n	3e30 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    3c70:	f7ff f9e6 	bl	3040 <NOROM_AONBatMonTemperatureGetDegC>
    3c74:	4b74      	ldr	r3, [pc, #464]	; (3e48 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    3c76:	681d      	ldr	r5, [r3, #0]
    3c78:	172a      	asrs	r2, r5, #28
    3c7a:	02ac      	lsls	r4, r5, #10
    3c7c:	f102 0101 	add.w	r1, r2, #1
    3c80:	d408      	bmi.n	3c94 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    3c82:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    3c86:	10db      	asrs	r3, r3, #3
    3c88:	2b08      	cmp	r3, #8
    3c8a:	bfa8      	it	ge
    3c8c:	2308      	movge	r3, #8
    3c8e:	4299      	cmp	r1, r3
    3c90:	bfb8      	it	lt
    3c92:	4619      	movlt	r1, r3
    3c94:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    3c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3c9c:	d10a      	bne.n	3cb4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    3c9e:	4b6b      	ldr	r3, [pc, #428]	; (3e4c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    3ca0:	681a      	ldr	r2, [r3, #0]
    3ca2:	681b      	ldr	r3, [r3, #0]
    3ca4:	f3c2 2204 	ubfx	r2, r2, #8, #5
    3ca8:	2a15      	cmp	r2, #21
    3caa:	bf88      	it	hi
    3cac:	3a20      	subhi	r2, #32
    3cae:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3cb2:	e00a      	b.n	3cca <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    3cb4:	4b66      	ldr	r3, [pc, #408]	; (3e50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    3cb6:	681a      	ldr	r2, [r3, #0]
    3cb8:	4b66      	ldr	r3, [pc, #408]	; (3e54 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    3cba:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3cbe:	681b      	ldr	r3, [r3, #0]
    3cc0:	2a15      	cmp	r2, #21
    3cc2:	bf88      	it	hi
    3cc4:	3a20      	subhi	r2, #32
    3cc6:	f3c3 4304 	ubfx	r3, r3, #16, #5
    3cca:	2b15      	cmp	r3, #21
    3ccc:	440a      	add	r2, r1
    3cce:	bf88      	it	hi
    3cd0:	3b20      	subhi	r3, #32
    3cd2:	2a15      	cmp	r2, #21
    3cd4:	dc05      	bgt.n	3ce2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    3cd6:	f06f 0109 	mvn.w	r1, #9
    3cda:	428a      	cmp	r2, r1
    3cdc:	bfb8      	it	lt
    3cde:	460a      	movlt	r2, r1
    3ce0:	e000      	b.n	3ce4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    3ce2:	2215      	movs	r2, #21
    3ce4:	4c5c      	ldr	r4, [pc, #368]	; (3e58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    3ce6:	f002 011f 	and.w	r1, r2, #31
    3cea:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    3cee:	8021      	strh	r1, [r4, #0]
    3cf0:	495a      	ldr	r1, [pc, #360]	; (3e5c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    3cf2:	6809      	ldr	r1, [r1, #0]
    3cf4:	f011 0403 	ands.w	r4, r1, #3
    3cf8:	bf18      	it	ne
    3cfa:	2401      	movne	r4, #1
    3cfc:	0749      	lsls	r1, r1, #29
    3cfe:	bf48      	it	mi
    3d00:	f044 0402 	orrmi.w	r4, r4, #2
    3d04:	b10f      	cbz	r7, 3d0a <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    3d06:	f044 0404 	orr.w	r4, r4, #4
    3d0a:	f996 1007 	ldrsb.w	r1, [r6, #7]
    3d0e:	1a41      	subs	r1, r0, r1
    3d10:	2904      	cmp	r1, #4
    3d12:	dc03      	bgt.n	3d1c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    3d14:	4949      	ldr	r1, [pc, #292]	; (3e3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3d16:	7989      	ldrb	r1, [r1, #6]
    3d18:	428c      	cmp	r4, r1
    3d1a:	d06f      	beq.n	3dfc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    3d1c:	f1b0 010f 	subs.w	r1, r0, #15
    3d20:	9101      	str	r1, [sp, #4]
    3d22:	f004 0101 	and.w	r1, r4, #1
    3d26:	f8df a144 	ldr.w	sl, [pc, #324]	; 3e6c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    3d2a:	f004 0904 	and.w	r9, r4, #4
    3d2e:	f004 0802 	and.w	r8, r4, #2
    3d32:	460f      	mov	r7, r1
    3d34:	d42a      	bmi.n	3d8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3d36:	9901      	ldr	r1, [sp, #4]
    3d38:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    3d3c:	ea4f 2e21 	mov.w	lr, r1, asr #8
    3d40:	f1be 0f07 	cmp.w	lr, #7
    3d44:	9101      	str	r1, [sp, #4]
    3d46:	d801      	bhi.n	3d4c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    3d48:	d104      	bne.n	3d54 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    3d4a:	e001      	b.n	3d50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    3d4c:	f04f 0e07 	mov.w	lr, #7
    3d50:	2106      	movs	r1, #6
    3d52:	e000      	b.n	3d56 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    3d54:	4671      	mov	r1, lr
    3d56:	f8df b118 	ldr.w	fp, [pc, #280]	; 3e70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    3d5a:	3101      	adds	r1, #1
    3d5c:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    3d60:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    3d64:	ebc1 0c0c 	rsb	ip, r1, ip
    3d68:	fa5f f18c 	uxtb.w	r1, ip
    3d6c:	f1b9 0f00 	cmp.w	r9, #0
    3d70:	d002      	beq.n	3d78 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    3d72:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    3d76:	4459      	add	r1, fp
    3d78:	f1b8 0f00 	cmp.w	r8, #0
    3d7c:	d002      	beq.n	3d84 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    3d7e:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    3d82:	4459      	add	r1, fp
    3d84:	b12f      	cbz	r7, 3d92 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3d86:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    3d8a:	e002      	b.n	3d92 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3d8c:	f04f 0e00 	mov.w	lr, #0
    3d90:	4671      	mov	r1, lr
    3d92:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    3d96:	fa5f fc8a 	uxtb.w	ip, sl
    3d9a:	f1b9 0f00 	cmp.w	r9, #0
    3d9e:	d002      	beq.n	3da6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    3da0:	f3ca 2907 	ubfx	r9, sl, #8, #8
    3da4:	44cc      	add	ip, r9
    3da6:	f1b8 0f00 	cmp.w	r8, #0
    3daa:	d002      	beq.n	3db2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    3dac:	f3ca 4807 	ubfx	r8, sl, #16, #8
    3db0:	44c4      	add	ip, r8
    3db2:	b10f      	cbz	r7, 3db8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    3db4:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    3db8:	1a9b      	subs	r3, r3, r2
    3dba:	2b01      	cmp	r3, #1
    3dbc:	bfb8      	it	lt
    3dbe:	2301      	movlt	r3, #1
    3dc0:	9f01      	ldr	r7, [sp, #4]
    3dc2:	2234      	movs	r2, #52	; 0x34
    3dc4:	4353      	muls	r3, r2
    3dc6:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    3dca:	4379      	muls	r1, r7
    3dcc:	b2ed      	uxtb	r5, r5
    3dce:	436b      	muls	r3, r5
    3dd0:	3180      	adds	r1, #128	; 0x80
    3dd2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    3dd6:	fbb3 f1f1 	udiv	r1, r3, r1
    3dda:	f64f 7cff 	movw	ip, #65535	; 0xffff
    3dde:	4561      	cmp	r1, ip
    3de0:	bf28      	it	cs
    3de2:	4661      	movcs	r1, ip
    3de4:	287f      	cmp	r0, #127	; 0x7f
    3de6:	80b1      	strh	r1, [r6, #4]
    3de8:	dc05      	bgt.n	3df6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    3dea:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    3dee:	4298      	cmp	r0, r3
    3df0:	bfb8      	it	lt
    3df2:	4618      	movlt	r0, r3
    3df4:	e000      	b.n	3df8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    3df6:	207f      	movs	r0, #127	; 0x7f
    3df8:	71f0      	strb	r0, [r6, #7]
    3dfa:	71b4      	strb	r4, [r6, #6]
    3dfc:	4b18      	ldr	r3, [pc, #96]	; (3e60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    3dfe:	2100      	movs	r1, #0
    3e00:	681b      	ldr	r3, [r3, #0]
    3e02:	6033      	str	r3, [r6, #0]
    3e04:	88b3      	ldrh	r3, [r6, #4]
    3e06:	2b1e      	cmp	r3, #30
    3e08:	bf9e      	ittt	ls
    3e0a:	4a0c      	ldrls	r2, [pc, #48]	; (3e3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3e0c:	231f      	movls	r3, #31
    3e0e:	8093      	strhls	r3, [r2, #4]
    3e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3e14:	d302      	bcc.n	3e1c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    3e16:	085b      	lsrs	r3, r3, #1
    3e18:	3101      	adds	r1, #1
    3e1a:	e7f9      	b.n	3e10 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    3e1c:	4a11      	ldr	r2, [pc, #68]	; (3e64 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    3e1e:	3b0f      	subs	r3, #15
    3e20:	430a      	orrs	r2, r1
    3e22:	091b      	lsrs	r3, r3, #4
    3e24:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    3e28:	4a06      	ldr	r2, [pc, #24]	; (3e44 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3e2a:	6013      	str	r3, [r2, #0]
    3e2c:	4b0e      	ldr	r3, [pc, #56]	; (3e68 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    3e2e:	2200      	movs	r2, #0
    3e30:	601a      	str	r2, [r3, #0]
    3e32:	b003      	add	sp, #12
    3e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e38:	40090000 	andmi	r0, r9, r0
    3e3c:	20000620 	andcs	r0, r0, r0, lsr #12
    3e40:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    3e44:	40091030 	andmi	r1, r9, r0, lsr r0
    3e48:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3e4c:	50001388 	andpl	r1, r0, r8, lsl #7
    3e50:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3e54:	5000113c 	andpl	r1, r0, ip, lsr r1
    3e58:	4008626e 	andmi	r6, r8, lr, ror #4
    3e5c:	40082224 	andmi	r2, r8, r4, lsr #4
    3e60:	40092008 	andmi	r2, r9, r8
    3e64:	80a4e700 	adchi	lr, r4, r0, lsl #14
    3e68:	40091034 	andmi	r1, r9, r4, lsr r0
    3e6c:	5000139c 	mulpl	r0, ip, r3
    3e70:	50001398 	mulpl	r0, r8, r3

00003e74 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    3e74:	b510      	push	{r4, lr}
    3e76:	4b14      	ldr	r3, [pc, #80]	; (3ec8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    3e78:	681c      	ldr	r4, [r3, #0]
    3e7a:	b2a4      	uxth	r4, r4
    3e7c:	b314      	cbz	r4, 3ec4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    3e7e:	f7ff f8df 	bl	3040 <NOROM_AONBatMonTemperatureGetDegC>
    3e82:	4b12      	ldr	r3, [pc, #72]	; (3ecc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3e84:	f993 2007 	ldrsb.w	r2, [r3, #7]
    3e88:	4290      	cmp	r0, r2
    3e8a:	da05      	bge.n	3e98 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    3e8c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    3e90:	4290      	cmp	r0, r2
    3e92:	bfb8      	it	lt
    3e94:	4610      	movlt	r0, r2
    3e96:	71d8      	strb	r0, [r3, #7]
    3e98:	889a      	ldrh	r2, [r3, #4]
    3e9a:	490c      	ldr	r1, [pc, #48]	; (3ecc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3e9c:	4294      	cmp	r4, r2
    3e9e:	d310      	bcc.n	3ec2 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    3ea0:	4b0b      	ldr	r3, [pc, #44]	; (3ed0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    3ea2:	6808      	ldr	r0, [r1, #0]
    3ea4:	681b      	ldr	r3, [r3, #0]
    3ea6:	1aa4      	subs	r4, r4, r2
    3ea8:	3302      	adds	r3, #2
    3eaa:	1a1b      	subs	r3, r3, r0
    3eac:	2b1f      	cmp	r3, #31
    3eae:	bf28      	it	cs
    3eb0:	231f      	movcs	r3, #31
    3eb2:	085b      	lsrs	r3, r3, #1
    3eb4:	40dc      	lsrs	r4, r3
    3eb6:	4414      	add	r4, r2
    3eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ebc:	4294      	cmp	r4, r2
    3ebe:	bf28      	it	cs
    3ec0:	4614      	movcs	r4, r2
    3ec2:	808c      	strh	r4, [r1, #4]
    3ec4:	bd10      	pop	{r4, pc}
    3ec6:	bf00      	nop
    3ec8:	40091034 	andmi	r1, r9, r4, lsr r0
    3ecc:	20000620 	andcs	r0, r0, r0, lsr #12
    3ed0:	40092008 	andmi	r2, r9, r8

00003ed4 <NOROM_SysCtrlResetSourceGet>:
    3ed4:	4b04      	ldr	r3, [pc, #16]	; (3ee8 <NOROM_SysCtrlResetSourceGet+0x14>)
    3ed6:	681a      	ldr	r2, [r3, #0]
    3ed8:	0412      	lsls	r2, r2, #16
    3eda:	bf5a      	itte	pl
    3edc:	6818      	ldrpl	r0, [r3, #0]
    3ede:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    3ee2:	2008      	movmi	r0, #8
    3ee4:	4770      	bx	lr
    3ee6:	bf00      	nop
    3ee8:	40090004 	andmi	r0, r9, r4

00003eec <NOROM_ChipInfo_GetChipFamily>:
    3eec:	f64b 129a 	movw	r2, #47514	; 0xb99a
    3ef0:	4b10      	ldr	r3, [pc, #64]	; (3f34 <NOROM_ChipInfo_GetChipFamily+0x48>)
    3ef2:	6818      	ldr	r0, [r3, #0]
    3ef4:	f3c0 300f 	ubfx	r0, r0, #12, #16
    3ef8:	4290      	cmp	r0, r2
    3efa:	d106      	bne.n	3f0a <NOROM_ChipInfo_GetChipFamily+0x1e>
    3efc:	681b      	ldr	r3, [r3, #0]
    3efe:	0f1b      	lsrs	r3, r3, #28
    3f00:	2b0b      	cmp	r3, #11
    3f02:	bf0c      	ite	eq
    3f04:	2004      	moveq	r0, #4
    3f06:	2000      	movne	r0, #0
    3f08:	e011      	b.n	3f2e <NOROM_ChipInfo_GetChipFamily+0x42>
    3f0a:	f64b 13be 	movw	r3, #47550	; 0xb9be
    3f0e:	4298      	cmp	r0, r3
    3f10:	d00a      	beq.n	3f28 <NOROM_ChipInfo_GetChipFamily+0x3c>
    3f12:	f64b 3341 	movw	r3, #47937	; 0xbb41
    3f16:	4298      	cmp	r0, r3
    3f18:	d008      	beq.n	3f2c <NOROM_ChipInfo_GetChipFamily+0x40>
    3f1a:	f64b 3320 	movw	r3, #47904	; 0xbb20
    3f1e:	4298      	cmp	r0, r3
    3f20:	bf14      	ite	ne
    3f22:	20ff      	movne	r0, #255	; 0xff
    3f24:	2002      	moveq	r0, #2
    3f26:	e002      	b.n	3f2e <NOROM_ChipInfo_GetChipFamily+0x42>
    3f28:	2001      	movs	r0, #1
    3f2a:	e000      	b.n	3f2e <NOROM_ChipInfo_GetChipFamily+0x42>
    3f2c:	2003      	movs	r0, #3
    3f2e:	b240      	sxtb	r0, r0
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop
    3f34:	50001318 	andpl	r1, r0, r8, lsl r3

00003f38 <NOROM_ChipInfo_GetHwRevision>:
    3f38:	b538      	push	{r3, r4, r5, lr}
    3f3a:	4b19      	ldr	r3, [pc, #100]	; (3fa0 <NOROM_ChipInfo_GetHwRevision+0x68>)
    3f3c:	681d      	ldr	r5, [r3, #0]
    3f3e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    3f42:	6818      	ldr	r0, [r3, #0]
    3f44:	0f2d      	lsrs	r5, r5, #28
    3f46:	b2c4      	uxtb	r4, r0
    3f48:	2c80      	cmp	r4, #128	; 0x80
    3f4a:	bf28      	it	cs
    3f4c:	2400      	movcs	r4, #0
    3f4e:	f7ff ffcd 	bl	3eec <NOROM_ChipInfo_GetChipFamily>
    3f52:	2804      	cmp	r0, #4
    3f54:	d821      	bhi.n	3f9a <NOROM_ChipInfo_GetHwRevision+0x62>
    3f56:	e8df f000 	tbb	[pc, r0]
    3f5a:	1b1b1303 	blne	6c8b6e <__ccfg+0x6a8bc6>
    3f5e:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    3f62:	2d07      	cmp	r5, #7
    3f64:	d819      	bhi.n	3f9a <NOROM_ChipInfo_GetHwRevision+0x62>
    3f66:	e8df f005 	tbb	[pc, r5]
    3f6a:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    3f6e:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    3f72:	2014      	movs	r0, #20
    3f74:	e012      	b.n	3f9c <NOROM_ChipInfo_GetHwRevision+0x64>
    3f76:	2015      	movs	r0, #21
    3f78:	e010      	b.n	3f9c <NOROM_ChipInfo_GetHwRevision+0x64>
    3f7a:	f104 0016 	add.w	r0, r4, #22
    3f7e:	e00a      	b.n	3f96 <NOROM_ChipInfo_GetHwRevision+0x5e>
    3f80:	b125      	cbz	r5, 3f8c <NOROM_ChipInfo_GetHwRevision+0x54>
    3f82:	2d02      	cmp	r5, #2
    3f84:	d109      	bne.n	3f9a <NOROM_ChipInfo_GetHwRevision+0x62>
    3f86:	f104 0014 	add.w	r0, r4, #20
    3f8a:	e004      	b.n	3f96 <NOROM_ChipInfo_GetHwRevision+0x5e>
    3f8c:	200a      	movs	r0, #10
    3f8e:	e005      	b.n	3f9c <NOROM_ChipInfo_GetHwRevision+0x64>
    3f90:	b91d      	cbnz	r5, 3f9a <NOROM_ChipInfo_GetHwRevision+0x62>
    3f92:	f104 000a 	add.w	r0, r4, #10
    3f96:	b2c0      	uxtb	r0, r0
    3f98:	e000      	b.n	3f9c <NOROM_ChipInfo_GetHwRevision+0x64>
    3f9a:	20ff      	movs	r0, #255	; 0xff
    3f9c:	b240      	sxtb	r0, r0
    3f9e:	bd38      	pop	{r3, r4, r5, pc}
    3fa0:	50001318 	andpl	r1, r0, r8, lsl r3

00003fa4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    3fa4:	b508      	push	{r3, lr}
    3fa6:	f7ff ffa1 	bl	3eec <NOROM_ChipInfo_GetChipFamily>
    3faa:	2801      	cmp	r0, #1
    3fac:	d103      	bne.n	3fb6 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fae:	f7ff ffc3 	bl	3f38 <NOROM_ChipInfo_GetHwRevision>
    3fb2:	2813      	cmp	r0, #19
    3fb4:	dc00      	bgt.n	3fb8 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    3fb6:	e7fe      	b.n	3fb6 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fb8:	bd08      	pop	{r3, pc}
	...

00003fbc <AuxAdiDdiSafeWrite.constprop.1>:
    3fbc:	b538      	push	{r3, r4, r5, lr}
    3fbe:	4604      	mov	r4, r0
    3fc0:	460d      	mov	r5, r1
    3fc2:	f7ff f871 	bl	30a8 <NOROM_CPUcpsid>
    3fc6:	4b06      	ldr	r3, [pc, #24]	; (3fe0 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    3fc8:	681a      	ldr	r2, [r3, #0]
    3fca:	2a00      	cmp	r2, #0
    3fcc:	d0fb      	beq.n	3fc6 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    3fce:	2201      	movs	r2, #1
    3fd0:	6025      	str	r5, [r4, #0]
    3fd2:	601a      	str	r2, [r3, #0]
    3fd4:	b918      	cbnz	r0, 3fde <AuxAdiDdiSafeWrite.constprop.1+0x22>
    3fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3fda:	f7ff b869 	b.w	30b0 <NOROM_CPUcpsie>
    3fde:	bd38      	pop	{r3, r4, r5, pc}
    3fe0:	400c8000 	andmi	r8, ip, r0

00003fe4 <NOROM_DDI32RegWrite>:
    3fe4:	4408      	add	r0, r1
    3fe6:	4611      	mov	r1, r2
    3fe8:	f7ff bfe8 	b.w	3fbc <AuxAdiDdiSafeWrite.constprop.1>

00003fec <memcpy>:
    3fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fee:	46c6      	mov	lr, r8
    3ff0:	b500      	push	{lr}
    3ff2:	2a0f      	cmp	r2, #15
    3ff4:	d945      	bls.n	4082 <memcpy+0x96>
    3ff6:	000b      	movs	r3, r1
    3ff8:	2603      	movs	r6, #3
    3ffa:	4303      	orrs	r3, r0
    3ffc:	401e      	ands	r6, r3
    3ffe:	000c      	movs	r4, r1
    4000:	0003      	movs	r3, r0
    4002:	2e00      	cmp	r6, #0
    4004:	d142      	bne.n	408c <memcpy+0xa0>
    4006:	0015      	movs	r5, r2
    4008:	3d10      	subs	r5, #16
    400a:	092d      	lsrs	r5, r5, #4
    400c:	46ac      	mov	ip, r5
    400e:	012d      	lsls	r5, r5, #4
    4010:	46a8      	mov	r8, r5
    4012:	4480      	add	r8, r0
    4014:	e000      	b.n	4018 <memcpy+0x2c>
    4016:	003b      	movs	r3, r7
    4018:	6867      	ldr	r7, [r4, #4]
    401a:	605f      	str	r7, [r3, #4]
    401c:	68e7      	ldr	r7, [r4, #12]
    401e:	60df      	str	r7, [r3, #12]
    4020:	001f      	movs	r7, r3
    4022:	6825      	ldr	r5, [r4, #0]
    4024:	601d      	str	r5, [r3, #0]
    4026:	68a5      	ldr	r5, [r4, #8]
    4028:	3710      	adds	r7, #16
    402a:	609d      	str	r5, [r3, #8]
    402c:	3410      	adds	r4, #16
    402e:	4543      	cmp	r3, r8
    4030:	d1f1      	bne.n	4016 <memcpy+0x2a>
    4032:	4665      	mov	r5, ip
    4034:	230f      	movs	r3, #15
    4036:	240c      	movs	r4, #12
    4038:	3501      	adds	r5, #1
    403a:	012d      	lsls	r5, r5, #4
    403c:	1949      	adds	r1, r1, r5
    403e:	4013      	ands	r3, r2
    4040:	1945      	adds	r5, r0, r5
    4042:	4214      	tst	r4, r2
    4044:	d025      	beq.n	4092 <memcpy+0xa6>
    4046:	598c      	ldr	r4, [r1, r6]
    4048:	51ac      	str	r4, [r5, r6]
    404a:	3604      	adds	r6, #4
    404c:	1b9c      	subs	r4, r3, r6
    404e:	2c03      	cmp	r4, #3
    4050:	d8f9      	bhi.n	4046 <memcpy+0x5a>
    4052:	2403      	movs	r4, #3
    4054:	3b04      	subs	r3, #4
    4056:	089b      	lsrs	r3, r3, #2
    4058:	3301      	adds	r3, #1
    405a:	009b      	lsls	r3, r3, #2
    405c:	4022      	ands	r2, r4
    405e:	18ed      	adds	r5, r5, r3
    4060:	18c9      	adds	r1, r1, r3
    4062:	1e56      	subs	r6, r2, #1
    4064:	2a00      	cmp	r2, #0
    4066:	d007      	beq.n	4078 <memcpy+0x8c>
    4068:	2300      	movs	r3, #0
    406a:	e000      	b.n	406e <memcpy+0x82>
    406c:	0023      	movs	r3, r4
    406e:	5cca      	ldrb	r2, [r1, r3]
    4070:	1c5c      	adds	r4, r3, #1
    4072:	54ea      	strb	r2, [r5, r3]
    4074:	429e      	cmp	r6, r3
    4076:	d1f9      	bne.n	406c <memcpy+0x80>
    4078:	bc04      	pop	{r2}
    407a:	4690      	mov	r8, r2
    407c:	bcf0      	pop	{r4, r5, r6, r7}
    407e:	bc02      	pop	{r1}
    4080:	4708      	bx	r1
    4082:	0005      	movs	r5, r0
    4084:	1e56      	subs	r6, r2, #1
    4086:	2a00      	cmp	r2, #0
    4088:	d1ee      	bne.n	4068 <memcpy+0x7c>
    408a:	e7f5      	b.n	4078 <memcpy+0x8c>
    408c:	1e56      	subs	r6, r2, #1
    408e:	0005      	movs	r5, r0
    4090:	e7ea      	b.n	4068 <memcpy+0x7c>
    4092:	001a      	movs	r2, r3
    4094:	e7f6      	b.n	4084 <memcpy+0x98>
    4096:	46c0      	nop			; (mov r8, r8)

00004098 <srand>:
    4098:	2200      	movs	r2, #0
    409a:	4b03      	ldr	r3, [pc, #12]	; (40a8 <srand+0x10>)
    409c:	681b      	ldr	r3, [r3, #0]
    409e:	33a8      	adds	r3, #168	; 0xa8
    40a0:	6018      	str	r0, [r3, #0]
    40a2:	605a      	str	r2, [r3, #4]
    40a4:	4770      	bx	lr
    40a6:	46c0      	nop			; (mov r8, r8)
    40a8:	20000110 	andcs	r0, r0, r0, lsl r1

000040ac <rand>:
    40ac:	4b0a      	ldr	r3, [pc, #40]	; (40d8 <rand+0x2c>)
    40ae:	b510      	push	{r4, lr}
    40b0:	681c      	ldr	r4, [r3, #0]
    40b2:	34a8      	adds	r4, #168	; 0xa8
    40b4:	6820      	ldr	r0, [r4, #0]
    40b6:	6861      	ldr	r1, [r4, #4]
    40b8:	4a08      	ldr	r2, [pc, #32]	; (40dc <rand+0x30>)
    40ba:	4b09      	ldr	r3, [pc, #36]	; (40e0 <rand+0x34>)
    40bc:	f000 f844 	bl	4148 <__aeabi_lmul>
    40c0:	2201      	movs	r2, #1
    40c2:	2300      	movs	r3, #0
    40c4:	1880      	adds	r0, r0, r2
    40c6:	4159      	adcs	r1, r3
    40c8:	6020      	str	r0, [r4, #0]
    40ca:	6061      	str	r1, [r4, #4]
    40cc:	0048      	lsls	r0, r1, #1
    40ce:	0840      	lsrs	r0, r0, #1
    40d0:	bc10      	pop	{r4}
    40d2:	bc02      	pop	{r1}
    40d4:	4708      	bx	r1
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	20000110 	andcs	r0, r0, r0, lsl r1
    40dc:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    40e0:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

000040e4 <time>:
    40e4:	b510      	push	{r4, lr}
    40e6:	4b0c      	ldr	r3, [pc, #48]	; (4118 <time+0x34>)
    40e8:	b084      	sub	sp, #16
    40ea:	0004      	movs	r4, r0
    40ec:	2200      	movs	r2, #0
    40ee:	6818      	ldr	r0, [r3, #0]
    40f0:	4669      	mov	r1, sp
    40f2:	f000 f813 	bl	411c <_gettimeofday_r>
    40f6:	2800      	cmp	r0, #0
    40f8:	db09      	blt.n	410e <time+0x2a>
    40fa:	9800      	ldr	r0, [sp, #0]
    40fc:	9901      	ldr	r1, [sp, #4]
    40fe:	2c00      	cmp	r4, #0
    4100:	d001      	beq.n	4106 <time+0x22>
    4102:	6020      	str	r0, [r4, #0]
    4104:	6061      	str	r1, [r4, #4]
    4106:	b004      	add	sp, #16
    4108:	bc10      	pop	{r4}
    410a:	bc04      	pop	{r2}
    410c:	4710      	bx	r2
    410e:	2001      	movs	r0, #1
    4110:	4240      	negs	r0, r0
    4112:	17c1      	asrs	r1, r0, #31
    4114:	e7f3      	b.n	40fe <time+0x1a>
    4116:	46c0      	nop			; (mov r8, r8)
    4118:	20000110 	andcs	r0, r0, r0, lsl r1

0000411c <_gettimeofday_r>:
    411c:	2300      	movs	r3, #0
    411e:	b570      	push	{r4, r5, r6, lr}
    4120:	4c08      	ldr	r4, [pc, #32]	; (4144 <_gettimeofday_r+0x28>)
    4122:	0005      	movs	r5, r0
    4124:	0008      	movs	r0, r1
    4126:	0011      	movs	r1, r2
    4128:	6023      	str	r3, [r4, #0]
    412a:	f000 f837 	bl	419c <_gettimeofday>
    412e:	1c43      	adds	r3, r0, #1
    4130:	d002      	beq.n	4138 <_gettimeofday_r+0x1c>
    4132:	bc70      	pop	{r4, r5, r6}
    4134:	bc02      	pop	{r1}
    4136:	4708      	bx	r1
    4138:	6823      	ldr	r3, [r4, #0]
    413a:	2b00      	cmp	r3, #0
    413c:	d0f9      	beq.n	4132 <_gettimeofday_r+0x16>
    413e:	602b      	str	r3, [r5, #0]
    4140:	e7f7      	b.n	4132 <_gettimeofday_r+0x16>
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	20000b6c 	andcs	r0, r0, ip, ror #22

00004148 <__aeabi_lmul>:
    4148:	b5f0      	push	{r4, r5, r6, r7, lr}
    414a:	000f      	movs	r7, r1
    414c:	0001      	movs	r1, r0
    414e:	46c6      	mov	lr, r8
    4150:	4684      	mov	ip, r0
    4152:	0415      	lsls	r5, r2, #16
    4154:	0400      	lsls	r0, r0, #16
    4156:	0c14      	lsrs	r4, r2, #16
    4158:	0c00      	lsrs	r0, r0, #16
    415a:	0c09      	lsrs	r1, r1, #16
    415c:	0c2d      	lsrs	r5, r5, #16
    415e:	002e      	movs	r6, r5
    4160:	4346      	muls	r6, r0
    4162:	434d      	muls	r5, r1
    4164:	4360      	muls	r0, r4
    4166:	4361      	muls	r1, r4
    4168:	1940      	adds	r0, r0, r5
    416a:	0c34      	lsrs	r4, r6, #16
    416c:	1824      	adds	r4, r4, r0
    416e:	b500      	push	{lr}
    4170:	42a5      	cmp	r5, r4
    4172:	d903      	bls.n	417c <__aeabi_lmul+0x34>
    4174:	2080      	movs	r0, #128	; 0x80
    4176:	0240      	lsls	r0, r0, #9
    4178:	4680      	mov	r8, r0
    417a:	4441      	add	r1, r8
    417c:	0c25      	lsrs	r5, r4, #16
    417e:	186d      	adds	r5, r5, r1
    4180:	4661      	mov	r1, ip
    4182:	4359      	muls	r1, r3
    4184:	437a      	muls	r2, r7
    4186:	0430      	lsls	r0, r6, #16
    4188:	1949      	adds	r1, r1, r5
    418a:	0424      	lsls	r4, r4, #16
    418c:	0c00      	lsrs	r0, r0, #16
    418e:	1820      	adds	r0, r4, r0
    4190:	1889      	adds	r1, r1, r2
    4192:	bc04      	pop	{r2}
    4194:	4690      	mov	r8, r2
    4196:	bcf0      	pop	{r4, r5, r6, r7}
    4198:	bc04      	pop	{r2}
    419a:	4710      	bx	r2

0000419c <_gettimeofday>:
    419c:	2258      	movs	r2, #88	; 0x58
    419e:	2001      	movs	r0, #1
    41a0:	4b01      	ldr	r3, [pc, #4]	; (41a8 <_gettimeofday+0xc>)
    41a2:	4240      	negs	r0, r0
    41a4:	601a      	str	r2, [r3, #0]
    41a6:	4770      	bx	lr
    41a8:	20000b6c 	andcs	r0, r0, ip, ror #22
    41ac:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    41b0:	20656761 	rsbcs	r6, r5, r1, ror #14
    41b4:	746e6553 	strbtvc	r6, [lr], #-1363	; 0xfffffaad
    41b8:	43000d0a 	movwmi	r0, #3338	; 0xd0a
    41bc:	6f6e6e61 	svcvs	0x006e6e61
    41c0:	706f2074 	rsbvc	r2, pc, r4, ror r0	; <UNPREDICTABLE>
    41c4:	74206e65 	strtvc	r6, [r0], #-3685	; 0xfffff19b
    41c8:	69207663 	stmdbvs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}
    41cc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    41d0:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    41d4:	470a0d00 	strmi	r0, [sl, -r0, lsl #26]
    41d8:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    41dc:	20642520 	rsbcs	r2, r4, r0, lsr #10
    41e0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    41e4:	23206563 			; <UNDEFINED> instruction: 0x23206563
    41e8:	28206425 	stmdacs	r0!, {r0, r2, r5, sl, sp, lr}
    41ec:	252f6425 	strcs	r6, [pc, #-1061]!	; 3dcf <NOROM_SysCtrlSetRechargeBeforePowerDown+0x17b>
    41f0:	65722064 	ldrbvs	r2, [r2, #-100]!	; 0xffffff9c
    41f4:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    41f8:	0a0d2973 	beq	34e7cc <__ccfg+0x32e824>
    41fc:	29472800 	stmdbcs	r7, {fp, sp}^
    4200:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4204:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    4208:	294e280a 	stmdbcs	lr, {r1, r3, fp, sp}^
    420c:	64207765 	strtvs	r7, [r0], #-1893	; 0xfffff89b
    4210:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4214:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    4218:	46280a0d 	strtmi	r0, [r8], -sp, lsl #20
    421c:	646e6929 	strbtvs	r6, [lr], #-2345	; 0xfffff6d7
    4220:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4224:	6f626867 	svcvs	0x00626867
    4228:	0a0d7372 	beq	360ff8 <__ccfg+0x341050>
    422c:	72294328 	eorvc	r4, r9, #40, 6	; 0xa0000000
    4230:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4234:	63657220 	cmnvs	r5, #32, 4
    4238:	2064726f 	rsbcs	r7, r4, pc, ror #4
    423c:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4240:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4244:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    4248:	2944280a 	stmdbcs	r4, {r1, r3, fp, sp}^
    424c:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4250:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4254:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4258:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    425c:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4260:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4264:	52280a0d 	eorpl	r0, r8, #53248	; 0xd000
    4268:	72746529 	rsbsvc	r6, r4, #171966464	; 0xa400000
    426c:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
    4270:	63657220 	cmnvs	r5, #32, 4
    4274:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4278:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 40e8 <time+0x4>
    427c:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4280:	6f626867 	svcvs	0x00626867
    4284:	280a0d72 	stmdacs	sl, {r1, r4, r5, r6, r8, sl, fp}
    4288:	6f682953 	svcvs	0x00682953
    428c:	6f6c2077 	svcvs	0x006c2077
    4290:	206c6163 	rsbcs	r6, ip, r3, ror #2
    4294:	6f636572 	svcvs	0x00636572
    4298:	0d736472 	cfldrdeq	mvd6, [r3, #-456]!	; 0xfffffe38
    429c:	6528520a 	strvs	r5, [r8, #-522]!	; 0xfffffdf6
    42a0:	74657329 	strbtvc	r7, [r5], #-809	; 0xfffffcd7
    42a4:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    42a8:	73206c61 			; <UNDEFINED> instruction: 0x73206c61
    42ac:	61726f74 	cmnvs	r2, r4, ror pc
    42b0:	0a0d6567 	beq	35d854 <__ccfg+0x33d8ac>
    42b4:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
    42b8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    42bc:	3a6e6f69 	bcc	1ba0068 <__ccfg+0x1b800c0>
    42c0:	00632500 	rsbeq	r2, r3, r0, lsl #10
    42c4:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
    42c8:	636f4c20 	cmnvs	pc, #32, 24	; 0x2000
    42cc:	52206c61 	eorpl	r6, r0, #24832	; 0x6100
    42d0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    42d4:	52007364 	andpl	r7, r0, #100, 6	; 0x90000001
    42d8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    42dc:	636f4c20 	cmnvs	pc, #32, 24	; 0x2000
    42e0:	53206c61 			; <UNDEFINED> instruction: 0x53206c61
    42e4:	61726f74 	cmnvs	r2, r4, ror pc
    42e8:	4e006567 	cfsh32mi	mvfx6, mvfx0, #55
    42ec:	47207765 	strmi	r7, [r0, -r5, ror #14]!
    42f0:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    42f4:	3a444920 	bcc	111677c <__ccfg+0x10f67d4>
    42f8:	654e0020 	strbvs	r0, [lr, #-32]	; 0xffffffe0
    42fc:	6f6e2077 	svcvs	0x006e2077
    4300:	49206564 	stmdbmi	r0!, {r2, r5, r6, r8, sl, sp, lr}
    4304:	31282044 			; <UNDEFINED> instruction: 0x31282044
    4308:	2935322d 	ldmdbcs	r5!, {r0, r2, r3, r5, r9, ip, sp}
    430c:	6552003a 	ldrbvs	r0, [r2, #-58]	; 0xffffffc6
    4310:	76696563 	strbtvc	r6, [r9], -r3, ror #10
    4314:	6e207265 	cdpvs	2, 2, cr7, cr0, cr5, {3}
    4318:	2065646f 	rsbcs	r6, r5, pc, ror #8
    431c:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
    4320:	35322d31 	ldrcc	r2, [r2, #-3377]!	; 0xfffff2cf
    4324:	44003a29 	strmi	r3, [r0], #-2601	; 0xfffff5d7
    4328:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    432c:	65522065 	ldrbvs	r2, [r2, #-101]	; 0xffffff9b
    4330:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    4334:	6f726620 	svcvs	0x00726620
    4338:	654e206d 	strbvs	r2, [lr, #-109]	; 0xffffff93
    433c:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4340:	3a72756f 	bcc	1ca1904 <__ccfg+0x1c8195c>
    4344:	52000d0a 	andpl	r0, r0, #640	; 0x280
    4348:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    434c:	20657665 	rsbcs	r7, r5, r5, ror #12
    4350:	6f636552 	svcvs	0x00636552
    4354:	66206472 			; <UNDEFINED> instruction: 0x66206472
    4358:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    435c:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
    4360:	756f6268 	strbvc	r6, [pc, #-616]!	; 4100 <time+0x1c>
    4364:	0d0a3a72 	vstreq	s6, [sl, #-456]	; 0xfffffe38
    4368:	69654e00 	stmdbvs	r5!, {r9, sl, fp, lr}^
    436c:	6f626867 	svcvs	0x00626867
    4370:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    4374:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4378:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
    437c:	35322d31 	ldrcc	r2, [r2, #-3377]!	; 0xfffff2cf
    4380:	52003a29 	andpl	r3, r0, #167936	; 0x29000
    4384:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4388:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
    438c:	3a786564 	bcc	1e1d924 <__ccfg+0x1dfd97c>
    4390:	53595300 	cmppl	r9, #0, 6
    4394:	3a525245 	bcc	1498cb0 <__ccfg+0x1478d08>
    4398:	2c782520 	cfldr64cs	mvdx2, [r8], #-128	; 0xffffff80
    439c:	00732520 	rsbseq	r2, r3, r0, lsr #10
    43a0:	00726175 	rsbseq	r6, r2, r5, ror r1
    43a4:	00696175 	rsbeq	r6, r9, r5, ror r1
    43a8:	4f636950 	svcmi	0x00636950
    43ac:	35762053 	ldrbcc	r2, [r6, #-83]!	; 0xffffffad
    43b0:	502f342e 	eorpl	r3, pc, lr, lsr #8
    43b4:	30383147 	eorscc	r3, r8, r7, asr #2
    43b8:	41323232 	teqmi	r2, r2, lsr r2
    43bc:	3143432d 	cmpcc	r3, sp, lsr #6
    43c0:	5f303533 	svcpl	0x00303533
    43c4:	4e55414c 	rdfmism	f4, f5, #4.0
    43c8:	4c584843 	mrrcmi	8, 4, r4, r8, cr3
    43cc:	4328202c 			; <UNDEFINED> instruction: 0x4328202c
    43d0:	6c4f2029 	mcrrvs	0, 2, r2, pc, cr9
    43d4:	656e6f73 	strbvs	r6, [lr, #-3955]!	; 0xfffff08d
    43d8:	6f432074 	svcvs	0x00432074
    43dc:	6e756d6d 	cdpvs	13, 7, cr6, cr5, cr13, {3}
    43e0:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    43e4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    43e8:	3032202c 	eorscc	r2, r2, ip, lsr #32
    43ec:	322d3230 	eorcc	r3, sp, #48, 4
    43f0:	00383130 	eorseq	r3, r8, r0, lsr r1
    43f4:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
    43f8:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    43fc:	4d415220 	sfmmi	f5, 2, [r1, #-128]	; 0xffffff80
    4400:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    4404:	74796220 	ldrbtvc	r6, [r9], #-544	; 0xfffffde0
    4408:	73007365 	movwvc	r7, #869	; 0x365
    440c:	69500074 	ldmdbvs	r0, {r2, r4, r5, r6}^
    4410:	20534f63 	subscs	r4, r3, r3, ror #30
    4414:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
    4418:	00006465 	andeq	r6, r0, r5, ror #8

0000441c <port_confs>:
    441c:	00306080 	eorseq	r6, r0, r0, lsl #1
    4420:	00386080 	eorseq	r6, r8, r0, lsl #1
    4424:	00186010 	andseq	r6, r8, r0, lsl r0
    4428:	2010400f 	andscs	r4, r0, pc
    442c:	30694000 	rsbcc	r4, r9, r0
    4430:	30714000 	rsbscc	r4, r1, r0
    4434:	00b86008 	adcseq	r6, r8, r8
    4438:	60c94000 	sbcvs	r4, r9, r0
    443c:	60d14000 	sbcsvs	r4, r1, r0
    4440:	60d94000 	sbcsvs	r4, r9, r0
    4444:	60e14000 	rscvs	r4, r1, r0
    4448:	00096380 	andeq	r6, r9, r0, lsl #7
    444c:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    4450:	20402000 	subcs	r2, r0, r0
    4454:	00486080 	subeq	r6, r8, r0, lsl #1
    4458:	00506080 	subseq	r6, r0, r0, lsl #1
    445c:	00a06000 	adceq	r6, r0, r0
    4460:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4464:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    4468:	73006120 	movwvc	r6, #288	; 0x120
    446c:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    4470:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    4474:	616d006f 	cmnvs	sp, pc, rrx
    4478:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    447c:	00676c61 	rsbeq	r6, r7, r1, ror #24
    4480:	0069706b 	rsbeq	r7, r9, fp, rrx
    4484:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

00004489 <__pi_hex_enc_table>:
    4489:	33323130 	teqcc	r2, #48, 2
    448d:	37363534 			; <UNDEFINED> instruction: 0x37363534
    4491:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    4495:	46454443 	strbmi	r4, [r5], -r3, asr #8
    4499:	30766374 	rsbscc	r6, r6, r4, ror r3
    449d:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    44a1:	736f7073 	cmnvc	pc, #115	; 0x73
    44a5:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    44a9:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    44ad:	736f7073 	cmnvc	pc, #115	; 0x73
    44b1:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    44b5:	63740079 	cmnvs	r4, #121	; 0x79
    44b9:	00323076 	eorseq	r3, r2, r6, ror r0
    44bd:	30766374 	rsbscc	r6, r6, r4, ror r3
    44c1:	63740033 	cmnvs	r4, #51	; 0x33
    44c5:	00343076 	eorseq	r3, r4, r6, ror r0
    44c9:	30766374 	rsbscc	r6, r6, r4, ror r3
    44cd:	63740035 	cmnvs	r4, #53	; 0x35
    44d1:	00363076 	eorseq	r3, r6, r6, ror r0
    44d5:	31766374 	cmncc	r6, r4, ror r3
    44d9:	63740036 	cmnvs	r4, #54	; 0x36
    44dd:	00373176 	eorseq	r3, r7, r6, ror r1
    44e1:	31766374 	cmncc	r6, r4, ror r3
    44e5:	63740038 	cmnvs	r4, #56	; 0x38
    44e9:	00333276 	eorseq	r3, r3, r6, ror r2
    44ed:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    44f1:	63740032 	cmnvs	r4, #50	; 0x32
    44f5:	00363276 	eorseq	r3, r6, r6, ror r2
    44f9:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    44fd:	63740037 	cmnvs	r4, #55	; 0x37
    4501:	00383276 	eorseq	r3, r8, r6, ror r2
    4505:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4509:	63740039 	cmnvs	r4, #57	; 0x39
    450d:	00303376 	eorseq	r3, r0, r6, ror r3
    4511:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4515:	63740031 	cmnvs	r4, #49	; 0x31
    4519:	00323376 	eorseq	r3, r2, r6, ror r3
    451d:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4521:	63740033 	cmnvs	r4, #51	; 0x33
    4525:	00343376 	eorseq	r3, r4, r6, ror r3

00004529 <__input_pins>:
    4529:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

0000452e <__button_list>:
    452e:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    4532:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4536:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    453a:	00317472 	eorseq	r7, r1, r2, ror r4
    453e:	20505548 	subscs	r5, r0, r8, asr #10
    4542:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    4546:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    454a:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    454e:	30636920 	rsbcc	r6, r3, r0, lsr #18
    4552:	50554800 	subspl	r4, r5, r0, lsl #16
    4556:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    455a:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    455e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4562:	32747200 	rsbscc	r7, r4, #0, 4
    4566:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    456a:	00585220 	subseq	r5, r8, r0, lsr #4
    456e:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4572:	00797020 	rsbseq	r7, r9, r0, lsr #32
    4576:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    457a:	31636300 	cmncc	r3, r0, lsl #6
    457e:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    4582:	31434300 	mrscc	r4, (UNDEF: 115)
    4586:	3a303533 	bcc	c11a5a <__ccfg+0xbf1ab2>
    458a:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    458e:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    4592:	00642520 	rsbeq	r2, r4, r0, lsr #10

00004596 <patable>:
    4596:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    459a:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    459e:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    45a2:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

000045a8 <patchGenfskRfe>:
    45a8:	000061a3 	andeq	r6, r0, r3, lsr #3
    45ac:	1307147f 	movwne	r1, #29823	; 0x747f
    45b0:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    45b4:	3f131f2e 	svccc	0x00131f2e
    45b8:	003f0ab0 	ldrhteq	r0, [pc], -r0
    45bc:	0000ff07 	andeq	pc, r0, r7, lsl #30
    45c0:	40004030 	andmi	r4, r0, r0, lsr r0
    45c4:	40034001 	andmi	r4, r3, r1
    45c8:	400f4007 	andmi	r4, pc, r7
    45cc:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    45d0:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    45d4:	4fcf47cf 	svcmi	0x00cf47cf
    45d8:	2fcf3fcf 	svccs	0x00cf3fcf
    45dc:	0fcf1fcf 	svceq	0x00cf1fcf
    45e0:	00000000 	andeq	r0, r0, r0
    45e4:	0008000f 	andeq	r0, r8, pc
    45e8:	003f0000 	eorseq	r0, pc, r0
    45ec:	00400000 	subeq	r0, r0, r0
    45f0:	0000003f 	andeq	r0, r0, pc, lsr r0
    45f4:	00680004 	rsbeq	r0, r8, r4
    45f8:	00dc000e 	sbcseq	r0, ip, lr
    45fc:	00430006 	subeq	r0, r3, r6
    4600:	0005001a 	andeq	r0, r5, sl, lsl r0
    4604:	00000000 	andeq	r0, r0, r0
    4608:	00000002 	andeq	r0, r0, r2
    460c:	0000003f 	andeq	r0, r0, pc, lsr r0
    4610:	00040000 	andeq	r0, r4, r0
    4614:	000000c0 	andeq	r0, r0, r0, asr #1
    4618:	00c00004 	sbceq	r0, r0, r4
    461c:	00070000 	andeq	r0, r7, r0
    4620:	9100c050 	qaddls	ip, r0, r0
    4624:	c0707000 	rsbsgt	r7, r0, r0
    4628:	70009100 	andvc	r9, r0, r0, lsl #2
    462c:	00213182 	eoreq	r3, r1, r2, lsl #3
    4630:	b1109131 	tstlt	r0, r1, lsr r1
    4634:	81017000 	mrshi	r7, (UNDEF: 1)
    4638:	a100b101 	tstge	r0, r1, lsl #2
    463c:	91323182 	teqls	r2, r2, lsl #3
    4640:	9101b110 	tstls	r1, r0, lsl r1
    4644:	81411011 	cmphi	r1, r1, lsl r0
    4648:	404f2241 	submi	r2, pc, r1, asr #4
    464c:	700006f1 	strdvc	r0, [r0], -r1
    4650:	9101c051 	qaddls	ip, r1, r1
    4654:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    4658:	d0083183 	andle	r3, r8, r3, lsl #3
    465c:	6f413118 	svcvs	0x00413118
    4660:	91310031 	teqls	r1, r1, lsr r0
    4664:	1483b110 	strne	fp, [r3], #272	; 0x110
    4668:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    466c:	10257000 	eorne	r7, r5, r0
    4670:	9100c050 	qaddls	ip, r0, r0
    4674:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    4678:	6f031420 	svcvs	0x00031420
    467c:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    4680:	3182c022 	orrcc	ip, r2, r2, lsr #32
    4684:	91310021 	teqls	r1, r1, lsr #32
    4688:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    468c:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    4690:	3182c082 	orrcc	ip, r2, r2, lsl #1
    4694:	91310021 	teqls	r1, r1, lsr #32
    4698:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    469c:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    46a0:	00213182 	eoreq	r3, r1, r2, lsl #3
    46a4:	b1109131 	tstlt	r0, r1, lsr r1
    46a8:	31151050 	tstcc	r5, r0, asr r0
    46ac:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    46b0:	643f7000 	ldrtvs	r7, [pc], #-0	; 46b8 <patchGenfskRfe+0x110>
    46b4:	1031c052 	eorsne	ip, r1, r2, asr r0
    46b8:	31610631 	cmncc	r1, r1, lsr r6
    46bc:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    46c0:	1031c112 	eorsne	ip, r1, r2, lsl r1
    46c4:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    46c8:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    46cc:	70006442 	andvc	r6, r0, r2, asr #8
    46d0:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    46d4:	8220c088 	eorhi	ip, r0, #136	; 0x88
    46d8:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    46dc:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    46e0:	3001c041 	andcc	ip, r1, r1, asr #32
    46e4:	1a181418 	bne	60974c <__ccfg+0x5e97a4>
    46e8:	8230c089 	eorshi	ip, r0, #137	; 0x89
    46ec:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    46f0:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    46f4:	3001c041 	andcc	ip, r1, r1, asr #32
    46f8:	1a191419 	bne	649764 <__ccfg+0x6297bc>
    46fc:	9136643c 	teqls	r6, ip, lsr r4
    4700:	9134b110 	teqls	r4, r0, lsl r1
    4704:	b054b110 	subslt	fp, r4, r0, lsl r1
    4708:	a0547100 	subsge	r7, r4, r0, lsl #2
    470c:	80f0b064 	rscshi	fp, r0, r4, rrx
    4710:	40af2200 	adcmi	r2, pc, r0, lsl #4
    4714:	90b01240 	adcsls	r1, r0, r0, asr #4
    4718:	8253b032 	subshi	fp, r3, #50	; 0x32
    471c:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    4720:	643f6485 	ldrtvs	r6, [pc], #-1157	; 4728 <patchGenfskRfe+0x180>
    4724:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    4728:	c1706442 	cmngt	r0, r2, asr #8
    472c:	c11168c2 	tstgt	r1, r2, asr #17
    4730:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    4734:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    4738:	9100c050 	qaddls	ip, r0, r0
    473c:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    4740:	16141615 			; <UNDEFINED> instruction: 0x16141615
    4744:	10531042 	subsne	r1, r3, r2, asr #32
    4748:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    474c:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    4750:	31313981 	teqcc	r1, r1, lsl #19
    4754:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    4758:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    475c:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    4760:	10731062 	rsbsne	r1, r3, r2, rrx
    4764:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    4768:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    476c:	101b3981 	andsne	r3, fp, r1, lsl #19
    4770:	c0e26572 	rscgt	r6, r2, r2, ror r5
    4774:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    4778:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    477c:	b0610002 	rsblt	r0, r1, r2
    4780:	91327100 	teqls	r2, r0, lsl #2
    4784:	a051b110 	subsge	fp, r1, r0, lsl r1
    4788:	7227b061 	eorvc	fp, r7, #97	; 0x61
    478c:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    4790:	12800000 	addne	r0, r0, #0
    4794:	b03290b0 	ldrhtlt	r9, [r2], -r0
    4798:	c0507000 	subsgt	r7, r0, r0
    479c:	72279100 	eorvc	r9, r7, #0, 2
    47a0:	10629299 	mlsne	r2, r9, r2, r9
    47a4:	c3f01073 	mvnsgt	r1, #115	; 0x73
    47a8:	31218231 			; <UNDEFINED> instruction: 0x31218231
    47ac:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    47b0:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    47b4:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    47b8:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    47bc:	10531042 	subsne	r1, r3, r2, asr #32
    47c0:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    47c4:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    47c8:	31313981 	teqcc	r1, r1, lsl #19
    47cc:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    47d0:	b061a051 	rsblt	sl, r1, r1, asr r0
    47d4:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    47d8:	643f6918 	ldrtvs	r6, [pc], #-2328	; 47e0 <patchGenfskRfe+0x238>
    47dc:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    47e0:	c1016442 	tstgt	r1, r2, asr #8
    47e4:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    47e8:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    47ec:	b1109135 	tstlt	r0, r5, lsr r1
    47f0:	64858253 	strvs	r8, [r5], #595	; 0x253
    47f4:	90b012c0 	adcsls	r1, r0, r0, asr #5
    47f8:	7000b032 	andvc	fp, r0, r2, lsr r0
    47fc:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    4800:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    4804:	c111c122 	tstgt	r1, r2, lsr #2
    4808:	c0026442 	andgt	r6, r2, r2, asr #8
    480c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4810:	c331c062 	teqgt	r1, #98	; 0x62
    4814:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    4818:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    481c:	c111c302 	tstgt	r1, r2, lsl #6
    4820:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    4824:	64853953 	strvs	r3, [r5], #2387	; 0x953
    4828:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    482c:	41402211 	cmpmi	r0, r1, lsl r2
    4830:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    4834:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    4838:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    483c:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    4840:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    4844:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    4848:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    484c:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    4850:	70006954 	andvc	r6, r0, r4, asr r9
    4854:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    4858:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    485c:	c011c252 	andsgt	ip, r1, r2, asr r2
    4860:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    4864:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    4868:	c101c002 	tstgt	r1, r2
    486c:	c0626442 	rsbgt	r6, r2, r2, asr #8
    4870:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    4874:	c101c122 	tstgt	r1, r2, lsr #2
    4878:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    487c:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    4880:	c101c302 	tstgt	r1, r2, lsl #6
    4884:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    4888:	70006485 	andvc	r6, r0, r5, lsl #9
    488c:	7100b061 	tstvc	r0, r1, rrx
    4890:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    4894:	91334d7a 	teqls	r3, sl, ror sp
    4898:	7000b110 	andvc	fp, r0, r0, lsl r1
    489c:	b1109132 	tstlt	r0, r2, lsr r1
    48a0:	70006972 	andvc	r6, r0, r2, ror r9
    48a4:	7100b061 	tstvc	r0, r1, rrx
    48a8:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    48ac:	91324986 	teqls	r2, r6, lsl #19
    48b0:	7000b110 	andvc	fp, r0, r0, lsl r1
    48b4:	b1109133 	tstlt	r0, r3, lsr r1
    48b8:	7000697e 	andvc	r6, r0, lr, ror r9
    48bc:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    48c0:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    48c4:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    48c8:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    48cc:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    48d0:	10541405 	subsne	r1, r4, r5, lsl #8
    48d4:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    48d8:	c0e67000 	rscgt	r7, r6, r0
    48dc:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    48e0:	10671416 	rsbne	r1, r7, r6, lsl r4
    48e4:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    48e8:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    48ec:	73067000 	movwvc	r7, #24576	; 0x6000
    48f0:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    48f4:	b050720e 	subslt	r7, r0, lr, lsl #4
    48f8:	80817100 	addhi	r7, r1, r0, lsl #2
    48fc:	a050b060 	subsge	fp, r0, r0, rrx
    4900:	22418092 	subcs	r8, r1, #146	; 0x92
    4904:	808045c3 	addhi	r4, r0, r3, asr #11
    4908:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    490c:	11011630 	tstne	r1, r0, lsr r6
    4910:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    4914:	61d761d6 	ldrsbvs	r6, [r7, #22]
    4918:	61d961d8 	ldrsbvs	r6, [r9, #24]
    491c:	61db61da 	ldrsbvs	r6, [fp, #26]
    4920:	61de61dc 	ldrsbvs	r6, [lr, #28]
    4924:	61e261e0 	mvnvs	r6, r0, ror #3
    4928:	633661e4 	teqvs	r6, #228, 2	; 0x39
    492c:	80916339 	addshi	r6, r1, r9, lsr r3
    4930:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    4934:	80823121 	addhi	r3, r2, r1, lsr #2
    4938:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    493c:	11011632 	tstne	r1, r2, lsr r6
    4940:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    4944:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4948:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    494c:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4950:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    4954:	61e661e6 	mvnvs	r6, r6, ror #3
    4958:	61e661e6 	mvnvs	r6, r6, ror #3
    495c:	61e661e6 	mvnvs	r6, r6, ror #3
    4960:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    4964:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    4968:	61e6652a 	mvnvs	r6, sl, lsr #10
    496c:	61e66556 	mvnvs	r6, r6, asr r5
    4970:	61e66746 	mvnvs	r6, r6, asr #14
    4974:	90b01210 	adcsls	r1, r0, r0, lsl r2
    4978:	7306720e 	movwvc	r7, #25102	; 0x620e
    497c:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    4980:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    4984:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    4988:	c003c1d4 	ldrdgt	ip, [r3], -r4
    498c:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    4990:	91507840 	cmpls	r0, r0, asr #16
    4994:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    4998:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    499c:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    49a0:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    49a4:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    49a8:	91907830 	orrsls	r7, r0, r0, lsr r8
    49ac:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    49b0:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    49b4:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    49b8:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    49bc:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    49c0:	a054a0e2 	subsge	sl, r4, r2, ror #1
    49c4:	225080f0 	subscs	r8, r0, #240	; 0xf0
    49c8:	80404615 	subhi	r4, r0, r5, lsl r6
    49cc:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    49d0:	a040620d 	subge	r6, r0, sp, lsl #4
    49d4:	318d822d 	orrcc	r8, sp, sp, lsr #4
    49d8:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    49dc:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    49e0:	821a1009 	andshi	r1, sl, #9
    49e4:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    49e8:	39808210 	stmibcc	r0, {r4, r9, pc}
    49ec:	100e0410 	andne	r0, lr, r0, lsl r4
    49f0:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    49f4:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    49f8:	cfe07229 	svcgt	0x00e07229
    49fc:	b013673c 	andslt	r6, r3, ip, lsr r7
    4a00:	66c8b003 	strbvs	fp, [r8], r3
    4a04:	b050b053 	subslt	fp, r0, r3, asr r0
    4a08:	b064b054 	rsblt	fp, r4, r4, asr r0
    4a0c:	66a5b013 	ssatvs	fp, #6, r3
    4a10:	22e08210 	rsccs	r8, r0, #16, 4
    4a14:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    4a18:	80417100 	subhi	r7, r1, r0, lsl #2
    4a1c:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4a20:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4a24:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    4a28:	b0644718 	rsblt	r4, r4, r8, lsl r7
    4a2c:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    4a30:	66ceb063 	strbvs	fp, [lr], r3, rrx
    4a34:	22e08210 	rsccs	r8, r0, #16, 4
    4a38:	66704638 			; <UNDEFINED> instruction: 0x66704638
    4a3c:	b0646238 	rsblt	r6, r4, r8, lsr r2
    4a40:	318f816f 	orrcc	r8, pc, pc, ror #2
    4a44:	dfd03d8f 	svcle	0x00d03d8f
    4a48:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    4a4c:	80417100 	subhi	r7, r1, r0, lsl #2
    4a50:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4a54:	80f0b064 	rscshi	fp, r0, r4, rrx
    4a58:	42652250 	rsbmi	r2, r5, #80, 4
    4a5c:	8211b063 	andshi	fp, r1, #99	; 0x63
    4a60:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    4a64:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    4a68:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    4a6c:	66704652 			; <UNDEFINED> instruction: 0x66704652
    4a70:	81616252 	cmnhi	r1, r2, asr r2
    4a74:	31818172 	orrcc	r8, r1, r2, ror r1
    4a78:	31823d81 	orrcc	r3, r2, r1, lsl #27
    4a7c:	efc03d82 	svc	0x00c03d82
    4a80:	930292f1 	movwls	r9, #8945	; 0x22f1
    4a84:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    4a88:	91c081b0 	strhls	r8, [r0, #16]
    4a8c:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    4a90:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    4a94:	0bf34e7f 	bleq	ffcd8498 <_estack+0xdfcd3498>
    4a98:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    4a9c:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    4aa0:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    4aa4:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    4aa8:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    4aac:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    4ab0:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    4ab4:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    4ab8:	1a1ba290 	bne	6ed500 <__ccfg+0x6cd558>
    4abc:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    4ac0:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    4ac4:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    4ac8:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    4acc:	4aa21c9b 	bmi	fe88bd40 <_estack+0xde886d40>
    4ad0:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    4ad4:	821010b2 	andshi	r1, r0, #178	; 0xb2
    4ad8:	429d22d0 	addsmi	r2, sp, #208, 4
    4adc:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4ae0:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    4ae4:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    4ae8:	629410ab 	addsvs	r1, r4, #171	; 0xab
    4aec:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    4af0:	82307000 	eorshi	r7, r0, #0
    4af4:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    4af8:	7100b063 	tstvc	r0, r3, rrx
    4afc:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    4b00:	7000b0e0 	andvc	fp, r0, r0, ror #1
    4b04:	91c281b2 	strhls	r8, [r2, #18]
    4b08:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    4b0c:	81511812 	cmphi	r1, r2, lsl r8
    4b10:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    4b14:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4b18:	4abf1c12 	bmi	fefcbb68 <_estack+0xdefc6b68>
    4b1c:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    4b20:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    4b24:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    4b28:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    4b2c:	9162c812 	cmnls	r2, r2, lsl r8
    4b30:	b0319172 	eorslt	r9, r1, r2, ror r1
    4b34:	7000b0e1 	andvc	fp, r0, r1, ror #1
    4b38:	c006c008 	andgt	ip, r6, r8
    4b3c:	9160c800 	cmnls	r0, r0, lsl #16
    4b40:	70009170 	andvc	r9, r0, r0, ror r1
    4b44:	81b08201 	lslshi	r8, r1, #4
    4b48:	81d091c0 	bicshi	r9, r0, r0, asr #3
    4b4c:	81511810 	cmphi	r1, r0, lsl r8
    4b50:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    4b54:	824280e1 	subhi	r8, r2, #225	; 0xe1
    4b58:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    4b5c:	4ae41c20 	bmi	ff90bbe4 <_estack+0xdf906be4>
    4b60:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    4b64:	b03246e8 	eorslt	r4, r2, r8, ror #13
    4b68:	dfa01005 	svcle	0x00a01005
    4b6c:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    4b70:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    4b74:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    4b78:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    4b7c:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    4b80:	42f61e01 	rscsmi	r1, r6, #1, 28
    4b84:	c0101618 	andsgt	r1, r0, r8, lsl r6
    4b88:	1c083010 	stcne	0, cr3, [r8], {16}
    4b8c:	10604704 	rsbne	r4, r0, r4, lsl #14
    4b90:	10063c10 	andne	r3, r6, r0, lsl ip
    4b94:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    4b98:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    4b9c:	81719166 	cmnhi	r1, r6, ror #2
    4ba0:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4ba4:	4b011c16 	blmi	4bc04 <__ccfg+0x2bc5c>
    4ba8:	b0319176 	eorslt	r9, r1, r6, ror r1
    4bac:	c008c006 	andgt	ip, r8, r6
    4bb0:	81617000 	cmnhi	r1, r0
    4bb4:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4bb8:	39808240 	stmibcc	r0, {r6, r9, pc}
    4bbc:	1cf11801 	ldclne	8, cr1, [r1], #4
    4bc0:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    4bc4:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    4bc8:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    4bcc:	ef90b033 	svc	0x0090b033
    4bd0:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    4bd4:	7000673c 	andvc	r6, r0, ip, lsr r7
    4bd8:	b063a003 	rsblt	sl, r3, r3
    4bdc:	b0efb064 	rsclt	fp, pc, r4, rrx
    4be0:	71006556 	tstvc	r0, r6, asr r5
    4be4:	22008040 	andcs	r8, r0, #64	; 0x40
    4be8:	b064472b 	rsblt	r4, r4, fp, lsr #14
    4bec:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    4bf0:	80407100 	subhi	r7, r0, r0, lsl #2
    4bf4:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    4bf8:	b003b064 	andlt	fp, r3, r4, rrx
    4bfc:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    4c00:	31828162 	orrcc	r8, r2, r2, ror #2
    4c04:	ef803d82 	svc	0x00803d82
    4c08:	930292f1 	movwls	r9, #8945	; 0x22f1
    4c0c:	a003673c 	andge	r6, r3, ip, lsr r7
    4c10:	61e66556 	mvnvs	r6, r6, asr r5
    4c14:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    4c18:	b05061e6 	subslt	r6, r0, r6, ror #3
    4c1c:	61e67100 	mvnvs	r7, r0, lsl #2
    4c20:	82d092e0 	sbcshi	r9, r0, #224, 4
    4c24:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    4c28:	7000b2c0 	andvc	fp, r0, r0, asr #5
    4c2c:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    4c30:	b0304359 	eorslt	r4, r0, r9, asr r3
    4c34:	3162c102 	cmncc	r2, r2, lsl #2
    4c38:	80a0c001 	adchi	ip, r0, r1
    4c3c:	43521e00 	cmpmi	r2, #0, 28
    4c40:	435322f0 	cmpmi	r3, #240, 4
    4c44:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    4c48:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    4c4c:	1a101020 	bne	408cd4 <__ccfg+0x3e8d2c>
    4c50:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    4c54:	16121611 			; <UNDEFINED> instruction: 0x16121611
    4c58:	70006b54 	andvc	r6, r0, r4, asr fp

00004c5c <patchImageGenfsk>:
    4c5c:	210004ad 	smlatbcs	r0, sp, r4, r0
    4c60:	21000449 	tstcs	r0, r9, asr #8
    4c64:	2100047d 	tstcs	r0, sp, ror r4
    4c68:	21000481 	smlabbcs	r0, r1, r4, r0
    4c6c:	21000511 	tstcs	r0, r1, lsl r5
    4c70:	21000591 			; <UNDEFINED> instruction: 0x21000591
    4c74:	21000641 	tstcs	r0, r1, asr #12
    4c78:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    4c7c:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    4c80:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    4c84:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    4c88:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    4c8c:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    4c90:	d00b079b 	mulle	fp, fp, r7
    4c94:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    4c98:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    4c9c:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    4ca0:	240f490e 	strcs	r4, [pc], #-2318	; 4ca8 <patchImageGenfsk+0x4c>
    4ca4:	43200224 			; <UNDEFINED> instruction: 0x43200224
    4ca8:	82c83160 	sbchi	r3, r8, #96, 2
    4cac:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    4cb0:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    4cb4:	2100026b 	tstcs	r0, fp, ror #4
    4cb8:	00004ce5 	andeq	r4, r0, r5, ror #25
    4cbc:	e0014809 	and	r4, r1, r9, lsl #16
    4cc0:	0c004808 	stceq	8, cr4, [r0], {8}
    4cc4:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    4cc8:	2aff7822 	bcs	fffe2d58 <_estack+0xdffddd58>
    4ccc:	7acad101 	bvc	ff2b90d8 <_estack+0xdf2b40d8>
    4cd0:	31607022 	cmncc	r0, r2, lsr #32
    4cd4:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    4cd8:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    4cdc:	40086200 	andmi	r6, r8, r0, lsl #4
    4ce0:	210006a4 	smlatbcs	r0, r4, r6, r0
    4ce4:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    4ce8:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    4cec:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    4cf0:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    4cf4:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    4cf8:	4a11d006 	bmi	478d18 <__ccfg+0x458d70>
    4cfc:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4d00:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    4d04:	e000480f 	and	r4, r0, pc, lsl #16
    4d08:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    4d0c:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    4d10:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    4d14:	dcf92c00 	ldclle	12, cr2, [r9]
    4d18:	200140e3 	andcs	r4, r1, r3, ror #1
    4d1c:	18180340 	ldmdane	r8, {r6, r8, r9}
    4d20:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    4d24:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    4d28:	31802300 	orrcc	r2, r0, r0, lsl #6
    4d2c:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4d30:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    4d34:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    4d38:	316c4b04 	cmncc	ip, r4, lsl #22
    4d3c:	0000e7f6 	strdeq	lr, [r0], -r6
    4d40:	00005c83 	andeq	r5, r0, r3, lsl #25
    4d44:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    4d48:	230d8300 	movwcs	r8, #54016	; 0xd300
    4d4c:	21000674 	tstcs	r0, r4, ror r6
    4d50:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    4d54:	6b714605 	blvs	1c56570 <__ccfg+0x1c365c8>
    4d58:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    4d5c:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    4d60:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    4d64:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    4d68:	7b00d00f 	blvc	38dac <__ccfg+0x18e04>
    4d6c:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    4d70:	4f152001 	svcmi	0x00152001
    4d74:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    4d78:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    4d7c:	09c18800 	stmibeq	r1, {fp, pc}^
    4d80:	d00407c9 	andle	r0, r4, r9, asr #15
    4d84:	7ac0e016 	bvc	ff03cde4 <_estack+0xdf037de4>
    4d88:	7b40e7f0 	blvc	103ed50 <__ccfg+0x101eda8>
    4d8c:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    4d90:	61cc6374 	bicvs	r6, ip, r4, ror r3
    4d94:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    4d98:	2001d00c 	andcs	sp, r1, ip
    4d9c:	6b310380 	blvs	c45ba4 <__ccfg+0xc25bfc>
    4da0:	d0012d00 	andle	r2, r1, r0, lsl #26
    4da4:	e0004301 	and	r4, r0, r1, lsl #6
    4da8:	46084381 	strmi	r4, [r8], -r1, lsl #7
    4dac:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    4db0:	63483940 	movtvs	r3, #35136	; 0x8940
    4db4:	47b82000 	ldrmi	r2, [r8, r0]!
    4db8:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    4dbc:	21000280 	smlabbcs	r0, r0, r2, r0
    4dc0:	21000088 	smlabbcs	r0, r8, r0, r0
    4dc4:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    4dc8:	00003f7b 	andeq	r3, r0, fp, ror pc
    4dcc:	40044040 	andmi	r4, r4, r0, asr #32
    4dd0:	4a22b510 	bmi	8b2218 <__ccfg+0x892270>
    4dd4:	61512100 	cmpvs	r1, r0, lsl #2
    4dd8:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    4ddc:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    4de0:	4b204921 	blmi	81726c <__ccfg+0x7f72c4>
    4de4:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    4de8:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    4dec:	e0004313 	and	r4, r0, r3, lsl r3
    4df0:	634b4393 	movtvs	r4, #45971	; 0xb393
    4df4:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    4df8:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    4dfc:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    4e00:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    4e04:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    4e08:	09c08800 	stmibeq	r0, {fp, pc}^
    4e0c:	d12207c0 	smlawtle	r2, r0, r7, r0
    4e10:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    4e14:	d11e2800 	tstle	lr, r0, lsl #16
    4e18:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    4e1c:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    4e20:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    4e24:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    4e28:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    4e2c:	2008d213 	andcs	sp, r8, r3, lsl r2
    4e30:	6a686160 	bvs	1a1d3b8 <__ccfg+0x19fd410>
    4e34:	01400940 	cmpeq	r0, r0, asr #18
    4e38:	4a0e6020 	bmi	39cec0 <__ccfg+0x37cf18>
    4e3c:	62d12100 	sbcsvs	r2, r1, #0, 2
    4e40:	21024a0d 	tstcs	r2, sp, lsl #20
    4e44:	21016011 	tstcs	r1, r1, lsl r0
    4e48:	60204308 	eorvs	r4, r0, r8, lsl #6
    4e4c:	43082103 	movwmi	r2, #33027	; 0x8103
    4e50:	60206268 	eorvs	r6, r0, r8, ror #4
    4e54:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    4e58:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    4e5c:	40044000 	andmi	r4, r4, r0
    4e60:	21000018 	tstcs	r0, r8, lsl r0
    4e64:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    4e68:	21000280 	smlabbcs	r0, r0, r2, r0
    4e6c:	000068cf 	andeq	r6, r0, pc, asr #17
    4e70:	21000068 	tstcs	r0, r8, rrx
    4e74:	40041100 	andmi	r1, r4, r0, lsl #2
    4e78:	e000e280 	and	lr, r0, r0, lsl #5
    4e7c:	00003bc3 	andeq	r3, r0, r3, asr #23
    4e80:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    4e84:	2004d000 	andcs	sp, r4, r0
    4e88:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    4e8c:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    4e90:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    4e94:	2080e000 	addcs	lr, r0, r0
    4e98:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    4e9c:	00004770 	andeq	r4, r0, r0, ror r7
    4ea0:	2100026b 	tstcs	r0, fp, ror #4
    4ea4:	40046058 	andmi	r6, r4, r8, asr r0
    4ea8:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    4eac:	bd019001 	stclt	0, cr9, [r1, #-4]
    4eb0:	00006fa5 	andeq	r6, r0, r5, lsr #31
    4eb4:	00000000 	andeq	r0, r0, r0
    4eb8:	00030001 	andeq	r0, r3, r1
    4ebc:	001f000a 	andseq	r0, pc, sl
    4ec0:	00eb0059 	rsceq	r0, fp, r9, asr r0
    4ec4:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    4ec8:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    4ecc:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    4ed0:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    4ed4:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    4ed8:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    4edc:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    4ee0:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    4ee4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00004ee8 <ratable>:
    4ee8:	12c5000b 	sbcne	r0, r5, #11
    4eec:	2de00007 	stclcs	0, cr0, [r0, #28]!
    4ef0:	8000000f 	andhi	r0, r0, pc
    4ef4:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    4ef8:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    4efc:	6374206c 	cmnvs	r4, #108	; 0x6c
    4f00:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    4f04:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    4f08:	00006c6c 	andeq	r6, r0, ip, ror #24

00004f0c <plug_null>:
    4f0c:	00002815 	andeq	r2, r0, r5, lsl r8
    4f10:	000027bd 			; <UNDEFINED> instruction: 0x000027bd
    4f14:	000027e1 	andeq	r2, r0, r1, ror #15
    4f18:	00002805 	andeq	r2, r0, r5, lsl #16
    4f1c:	0000280d 	andeq	r2, r0, sp, lsl #16
    4f20:	00002811 	andeq	r2, r0, r1, lsl r8
    4f24:	00000000 	andeq	r0, r0, r0
    4f28:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <messagePtr.6917>:
20000540:	00000000 	andeq	r0, r0, r0

20000544 <receiverId.6916>:
	...

20000546 <setdel>:
	...

20000548 <urates>:
static word urates [N_UARTS];
20000548:	00000000 	andeq	r0, r0, r0

2000054c <__PCB>:
2000054c:	00000000 	andeq	r0, r0, r0

20000550 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000550:	00000000 	andeq	r0, r0, r0

20000554 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000554:	00000000 	andeq	r0, r0, r0

20000558 <mevent>:
20000558:	00000000 	andeq	r0, r0, r0

2000055c <mnfree>:
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000560:	00000000 	andeq	r0, r0, r0

20000564 <descriptors>:
	...

20000584 <oqueues>:
	...

20000590 <physical>:
	...

2000059c <physinfo>:
	...

200005a8 <plugins>:
	...

200005b4 <dopen>:
	...

200005b5 <dstat>:
	...

200005b6 <bckf_timer>:
	...

200005b8 <channel>:
200005b8:	00000000 	andeq	r0, r0, r0

200005bc <drvprcs>:
static aword drvprcs, qevent;
200005bc:	00000000 	andeq	r0, r0, r0

200005c0 <dstate>:
200005c0:	00000000 	andeq	r0, r0, r0

200005c4 <paylen>:
static	int paylen = 0;			// Current TX payload length
200005c4:	00000000 	andeq	r0, r0, r0

200005c8 <physid>:
static word	physid,
200005c8:	00000000 	andeq	r0, r0, r0

200005cc <qevent>:
static aword drvprcs, qevent;
200005cc:	00000000 	andeq	r0, r0, r0

200005d0 <rbuffl>:
200005d0:	00000000 	andeq	r0, r0, r0

200005d4 <rfTrim>:
	...

200005e4 <rxstat>:
	...

200005f0 <statid>:
	...

200005f2 <txtries>:
	...

200005f4 <ndsc_null>:
200005f4:	00000000 	andeq	r0, r0, r0

200005f8 <len.5699>:
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <ptr.5698>:
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <__inpline>:
char *__inpline = NULL;
20000600:	00000000 	andeq	r0, r0, r0

20000604 <len.5700>:
20000604:	00000000 	andeq	r0, r0, r0

20000608 <ptr.5699>:
20000608:	00000000 	andeq	r0, r0, r0

2000060c <oscHfGlobals>:
	...

20000620 <powerQualGlobals>:
	...

20000628 <nodeId>:
	...

20000630 <database>:
	...

20000b30 <currentProtocol>:
	...

20000b32 <groupId>:
	...

20000b34 <recordCount>:
int recordCount;
20000b34:	00000000 	andeq	r0, r0, r0

20000b38 <__pi_uart>:
	...

20000b40 <system_event_count>:
20000b40:	00000000 	andeq	r0, r0, r0

20000b44 <entropy>:
20000b44:	00000000 	andeq	r0, r0, r0

20000b48 <__pi_mintk>:
	...

20000b4a <__pi_old>:
	...

20000b4c <__pi_systat>:
	...

20000b54 <__pi_new>:
20000b54:	00000000 	andeq	r0, r0, r0

20000b58 <__pi_utims>:
	...

20000b68 <__pi_curr>:
20000b68:	00000000 	andeq	r0, r0, r0

20000b6c <errno>:
20000b6c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

20000b70 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000131b 	andeq	r1, r0, fp, lsl r3
       4:	00000003 	andeq	r0, r0, r3
}
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000bd 	strheq	r0, [r0], -sp
      10:	00061e0c 	andeq	r1, r6, ip, lsl #28
      14:	00066400 	andeq	r6, r6, r0, lsl #8
      18:	00005000 	andeq	r5, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000008da 	ldrdeq	r0, [r0], -sl
      2c:	00082f03 	andeq	r2, r8, r3, lsl #30
      30:	172b0200 	strne	r0, [fp, -r0, lsl #4]!
      34:	00000038 	andeq	r0, r0, r8, lsr r0
      38:	d8080102 	stmdale	r8, {r1, r8}
      3c:	02000008 	andeq	r0, r0, #8
			i = k;
      40:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
				j->Next = k;
      44:	cc030000 	stcgt	0, cr0, [r3], {-0}
      48:	02000003 	andeq	r0, r0, #3
}
      4c:	00521c39 	subseq	r1, r2, r9, lsr ip
      50:	02020000 	andeq	r0, r2, #0
      54:	0009a607 	andeq	sl, r9, r7, lsl #12
		release;
      58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      5c:	000005e9 	andeq	r0, r0, r9, ror #11
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	0008ef03 	andeq	lr, r8, r3, lsl #30
	b->u.pointers.tail =
      64:	1b4f0200 	blne	13c086c <__ccfg+0x13a08c4>
}
      68:	0000006c 	andeq	r0, r0, ip, rrx
		return NULL;
      6c:	93070402 	movwls	r0, #29698	; 0x7402
      70:	02000003 	andeq	r0, r0, #3
      74:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00038e07 	andeq	r8, r3, r7, lsl #28
      80:	07760300 	ldrbeq	r0, [r6, -r0, lsl #6]!
      84:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
      88:	00007317 	andeq	r7, r0, r7, lsl r3
      8c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      90:	00746e69 	rsbseq	r6, r4, r9, ror #28
      94:	98070402 	stmdals	r7, {r1, sl}
      98:	05000003 	streq	r0, [r0, #-3]
      9c:	00000892 	muleq	r0, r2, r8
      a0:	16015e03 	strne	r5, [r1], -r3, lsl #28
      a4:	00000094 	muleq	r0, r4, r0
      a8:	0009e203 	andeq	lr, r9, r3, lsl #4
      ac:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
      b0:	00000059 	andeq	r0, r0, r9, asr r0
      b4:	00026703 	andeq	r6, r2, r3, lsl #14
      b8:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
      bc:	00000059 	andeq	r0, r0, r9, asr r0
      c0:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
      c4:	0000e203 	andeq	lr, r0, r3, lsl #4
fsm transmitter (message * messagePtr) {
      c8:	05870700 	streq	r0, [r7, #1792]	; 0x700
      cc:	a7040000 	strge	r0, [r4, -r0]
      d0:	00009b0c 	andeq	r9, r0, ip, lsl #22
}
      d4:	07e60700 	strbeq	r0, [r6, r0, lsl #14]!
      d8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	0000e213 	andeq	lr, r0, r3, lsl r2
      e0:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
      e4:	f2000000 	vhadd.s8	d0, d0, d0
      e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
        spkt [0] = 0;
      ec:	00000094 	muleq	r0, r4, r0
        *p = messagePtr->senderGroupId; p += 2;
      f0:	080a0003 	stmdaeq	sl, {r0, r1}
        *p = messagePtr->messageType; p++;
      f4:	1609a204 	strne	sl, [r9], -r4, lsl #4
        *p = messagePtr->requestNumber; p++;
      f8:	0b000001 	bleq	104 <_Min_Stack_Size+0x4>
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	00000322 	andeq	r0, r0, r2, lsr #6
        *p = messagePtr->receiverId; p++; // insert receiveer ID
     100:	8d07a404 	cfstrshi	mvf10, [r7, #-16]
        tcv_endp (spkt);
     104:	00000000 	andeq	r0, r0, r0
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	0004aa0b 	andeq	sl, r4, fp, lsl #20
     10c:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
}
     110:	000000c0 	andeq	r0, r0, r0, asr #1
        finish;
     114:	a5030004 	strge	r0, [r3, #-4]
     118:	04000006 	streq	r0, [r0], #-6
     11c:	00f203aa 	rscseq	r0, r2, sl, lsr #7
     120:	040c0000 	streq	r0, [ip], #-0
char randomNumber() {
     124:	0008610d 	andeq	r6, r8, sp, lsl #2
   srand((unsigned) time(&t));
     128:	00120400 	andseq	r0, r2, r0, lsl #8
     12c:	0000013c 	andeq	r0, r0, ip, lsr r1
   return (char)rand();
     130:	0009480e 	andeq	r4, r9, lr, lsl #16
}
     134:	00012200 	andeq	r2, r1, r0, lsl #4
     138:	00010000 	andeq	r0, r1, r0
fsm root {
     13c:	00062903 	andeq	r2, r6, r3, lsl #18
     140:	17160500 	ldrne	r0, [r6, -r0, lsl #10]
     144:	0000006c 	andeq	r0, r0, ip, rrx
     148:	0001fe03 	andeq	pc, r1, r3, lsl #28
     14c:	0d0c0600 	stceq	6, cr0, [ip, #-0]
     150:	0000008d 	andeq	r0, r0, sp, lsl #1
     154:	00055503 	andeq	r5, r5, r3, lsl #10
     158:	1b230500 	blne	8c1560 <__ccfg+0x8a15b8>
     15c:	00000148 	andeq	r0, r0, r8, asr #2
     160:	0002a70f 	andeq	sl, r2, pc, lsl #14
     164:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
     168:	0001ba08 	andeq	fp, r1, r8, lsl #20
     16c:	0a320b00 	beq	c82d74 <__ccfg+0xc62dcc>
        recordCount = 0;
     170:	36050000 	strcc	r0, [r5], -r0
        nodeId = 1;
     174:	0001ba13 	andeq	fp, r1, r3, lsl sl
     178:	5f100000 	svcpl	0x00100000
        groupId = 1;
     17c:	3705006b 	strcc	r0, [r5, -fp, rrx]
     180:	00008d07 	andeq	r8, r0, r7, lsl #26
        messagePtr = (message *) umalloc(sizeof(message));
     184:	410b0400 	tstmi	fp, r0, lsl #8
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	05000008 	streq	r0, [r0, #-8]
     18c:	008d0b37 	addeq	r0, sp, r7, lsr fp
     190:	0b080000 	bleq	200198 <__ccfg+0x1e01f0>
        tcv_plug(0, &plug_null);
     194:	00003ea2 	andeq	r3, r0, r2, lsr #29
     198:	8d143705 	ldchi	7, cr3, [r4, #-20]	; 0xffffffec
        sfd = tcv_open(WNONE, 0, 0);
     19c:	0c000000 	stceq	0, cr0, [r0], {-0}
     1a0:	0003ba0b 	andeq	fp, r3, fp, lsl #20
     1a4:	1b370500 	blne	dc15ac <__ccfg+0xda1604>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	0000008d 	andeq	r0, r0, sp, lsl #1
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	0b380500 	bleq	e015b8 <__ccfg+0xde1610>
		if (sfd < 0) {
     1b4:	000001c0 	andeq	r0, r0, r0, asr #3
			diag("Cannot open tcv interface");
     1b8:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
     1bc:	00000160 	andeq	r0, r0, r0, ror #2
			halt();
     1c0:	00013c08 	andeq	r3, r1, r8, lsl #24
        currentProtocol = IDLE;
     1c4:	0001d000 	andeq	sp, r1, r0
     1c8:	00940900 	addseq	r0, r4, r0, lsl #18
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	00085c0f 	andeq	r5, r8, pc, lsl #24
     1d4:	3c052400 	cfstrscc	mvf2, [r5], {-0}
     1d8:	00025308 	andeq	r5, r2, r8, lsl #6
     1dc:	044a0b00 	strbeq	r0, [sl], #-2816	; 0xfffff500
     1e0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
        ser_outf(Options, menu);
     1e4:	00008d07 	andeq	r8, r0, r7, lsl #26
     1e8:	540b0000 	strpl	r0, [fp], #-0
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	05000003 	streq	r0, [r0, #-3]
     1f0:	008d073f 	addeq	r0, sp, pc, lsr r7
     1f4:	0b040000 	bleq	1001fc <__ccfg+0xe0254>
        switch (choice)
     1f8:	000002fd 	strdeq	r0, [r0], -sp
     1fc:	8d074005 	stchi	0, cr4, [r7, #-20]	; 0xffffffec
     200:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     204:	00050b0b 	andeq	r0, r5, fp, lsl #22
     208:	07410500 	strbeq	r0, [r1, -r0, lsl #10]
     20c:	0000008d 	andeq	r0, r0, sp, lsl #1
     210:	07190b0c 	ldreq	r0, [r9, -ip, lsl #22]
     214:	42050000 	andmi	r0, r5, #0
     218:	00008d07 	andeq	r8, r0, r7, lsl #26
     21c:	000b1000 	andeq	r1, fp, r0
     220:	05000008 	streq	r0, [r0, #-8]
     224:	008d0743 	addeq	r0, sp, r3, asr #14
        proceed Menu_Header;
     228:	0b140000 	bleq	500230 <__ccfg+0x4e0288>
     22c:	000002c2 	andeq	r0, r0, r2, asr #5
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	8d074405 	cfstrshi	mvf4, [r7, #-20]	; 0xffffffec
     234:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	0004530b 	andeq	r5, r4, fp, lsl #6
     23c:	07450500 	strbeq	r0, [r5, -r0, lsl #10]
        proceed Menu_Header;
     240:	0000008d 	andeq	r0, r0, sp, lsl #1
     244:	06c30b1c 			; <UNDEFINED> instruction: 0x06c30b1c
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	46050000 	strmi	r0, [r5], -r0
     24c:	00008d07 	andeq	r8, r0, r7, lsl #26
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	12002000 	andne	r2, r0, #0
     254:	00000061 	andeq	r0, r0, r1, rrx
     258:	4f050108 	svcmi	0x00050108
    if (node < 1 || node > 25) {
     25c:	00029808 	andeq	r9, r2, r8, lsl #16
     260:	09700b00 	ldmdbeq	r0!, {r8, r9, fp}^
            proceed Set_Node_ID;
     264:	50050000 	andpl	r0, r5, r0
        proceed Menu_Header;
     268:	00029809 	andeq	r9, r2, r9, lsl #16
     26c:	bc0b0000 	stclt	0, cr0, [fp], {-0}
        currentProtocol = DISCOVERY_REQUEST;
     270:	05000008 	streq	r0, [r0, #-8]
     274:	02980951 	addseq	r0, r8, #1327104	; 0x144000
        receiverId = 0;
     278:	13800000 	orrne	r0, r0, #0
        proceed Transmit_Message;
     27c:	000009d9 	ldrdeq	r0, [r0], -r9
        currentProtocol = CREATE_RECORD;
     280:	3c0a5305 	stccc	3, cr5, [sl], {5}
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	00000001 	andeq	r0, r0, r1
     288:	0a1d1301 	beq	744e94 <__ccfg+0x724eec>
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	56050000 	strpl	r0, [r5], -r0
     290:	00013c0a 	andeq	r3, r1, sl, lsl #24
     294:	00010400 	andeq	r0, r1, r0, lsl #8
    if (node < 1 || node > 25) {
     298:	00012208 	andeq	r2, r1, r8, lsl #4
     29c:	0002a800 	andeq	sl, r2, r0, lsl #16
            proceed Create_Record;
     2a0:	00940900 	addseq	r0, r4, r0, lsl #18
     2a4:	001f0000 	andseq	r0, pc, r0
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	00078612 	andeq	r8, r7, r2, lsl r6
     2ac:	05019000 	streq	r9, [r1, #-0]
     2b0:	02eb0862 	rsceq	r0, fp, #6422528	; 0x620000
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	320b0000 	andcc	r0, fp, #0
     2b8:	0500000a 	streq	r0, [r0, #-10]
     2bc:	02eb1263 	rsceq	r1, fp, #805306374	; 0x30000006
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	0b000000 	bleq	2c8 <root+0x18c>
        proceed Transmit_Message;
     2c4:	00000462 	andeq	r0, r0, r2, ror #8
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	8d066405 	cfstrshi	mvf6, [r6, #-20]	; 0xffffffec
        proceed Transmit_Message;
     2cc:	04000000 	streq	r0, [r0], #-0
        currentProtocol = DELETE_RECORD;
     2d0:	00026f0b 	andeq	r6, r2, fp, lsl #30
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	09660500 	stmdbeq	r6!, {r8, sl}^
        currentProtocol = DELETE_RECORD;
     2d8:	000002f1 	strdeq	r0, [r0], -r1
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	00610b08 	rsbeq	r0, r1, r8, lsl #22
        proceed Get_Receiving_Node;
     2e0:	67050000 	strvs	r0, [r5, -r0]
        currentProtocol = RETRIEVE_RECORD;
     2e4:	0002531e 	andeq	r5, r2, lr, lsl r3
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	11008800 	tstne	r0, r0, lsl #16
        currentProtocol = RETRIEVE_RECORD;
     2ec:	0002a804 	andeq	sl, r2, r4, lsl #16
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	03010800 	movweq	r0, #6144	; 0x1800
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	03010000 	movweq	r0, #4096	; 0x1000
     2f8:	94090000 	strls	r0, [r9], #-0
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	1f000000 	svcne	0x00000000
     300:	07041100 	streq	r1, [r4, -r0, lsl #2]
     304:	14000003 	strne	r0, [r0], #-3
    if (node < 1 || node > 25) {
     308:	093a0f01 	ldmdbeq	sl!, {r0, r8, r9, sl, fp}
     30c:	05080000 	streq	r0, [r8, #-0]
            proceed Prompt_Recieving_Node;
     310:	0331087a 	teqeq	r1, #7995392	; 0x7a0000
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	000b0000 	andeq	r0, fp, r0
     318:	05000006 	streq	r0, [r0, #-6]
        char desiredRecordIndex = -1;
     31c:	0331117b 	teqeq	r1, #-1073741794	; 0xc000001e
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	0b000000 	bleq	328 <root+0x1ec>
     324:	000018c1 	andeq	r1, r0, r1, asr #17
        char desiredRecordIndex = -1;
     328:	8d067c05 	stchi	12, cr7, [r6, #-20]	; 0xffffffec
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	04000000 	streq	r0, [r0], #-0
        messagePtr->recordIndex = desiredRecordIndex;
     330:	38041100 	stmdacc	r4, {r8, ip}
     334:	0f000000 	svceq	0x00000000
     338:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
        proceed Transmit_Message;
     33c:	08ba0568 	ldmeq	sl!, {r3, r5, r6, r8, sl}
        messagePtr -> senderGroupId = groupId;
     340:	0000047a 	andeq	r0, r0, sl, ror r4
     344:	00705f10 	rsbseq	r5, r0, r0, lsl pc
     348:	3112bb05 	tstcc	r2, r5, lsl #22
        messagePtr -> messageType = currentProtocol;
     34c:	00000003 	andeq	r0, r0, r3
        messagePtr -> requestNumber = randomNumber();
     350:	00725f10 	rsbseq	r5, r2, r0, lsl pc
        messagePtr -> senderId = nodeId;
     354:	8d07bc05 	stchi	12, cr11, [r7, #-20]	; 0xffffffec
     358:	04000000 	streq	r0, [r0], #-0
     35c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
        call transmitter(messagePtr, Menu_Header);
     360:	8d07bd05 	stchi	13, cr11, [r7, #-20]	; 0xffffffec
        messagePtr -> receiverId = receiverId;
     364:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
        call transmitter(messagePtr, Menu_Header);
     368:	0001e90b 	andeq	lr, r1, fp, lsl #18
     36c:	09be0500 	ldmibeq	lr!, {r8, sl}
     370:	0000003f 	andeq	r0, r0, pc, lsr r0
     374:	065e0b0c 	ldrbeq	r0, [lr], -ip, lsl #22
            proceed Set_Node_ID;
     378:	bf050000 	svclt	0x00050000
            break;
     37c:	00003f09 	andeq	r3, r0, r9, lsl #30
            proceed Set_Node_ID;
     380:	5f100e00 	svcpl	0x00100e00
            proceed Find_Neighbours;
     384:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
            proceed Create_Record;
     388:	030911c0 	movweq	r1, #37312	; 0x91c0
            proceed Delete_Record;
     38c:	0b100000 	bleq	400394 <__ccfg+0x3e03ec>
            proceed Retrieve_Record;
     390:	000001e0 	andeq	r0, r0, r0, ror #3
            diag("Reset Local Storage");
     394:	8d07c105 	stfhid	f4, [r7, #-20]	; 0xffffffec
            break;
     398:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
            diag("Reset Local Storage");
     39c:	0002740b 	andeq	r7, r2, fp, lsl #8
     3a0:	0ac80500 	beq	ff2017a8 <_estack+0xdf1fc7a8>
     3a4:	00000122 	andeq	r0, r0, r2, lsr #2
     3a8:	18510b1c 	ldmdane	r1, {r2, r3, r4, r8, r9, fp}^
     3ac:	ca050000 	bgt	1403b4 <__ccfg+0x12040c>
     3b0:	0005ff09 	andeq	pc, r5, r9, lsl #30
     3b4:	180b2000 	stmdane	fp, {sp}
     3b8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
     3bc:	062a09cc 	strteq	r0, [sl], -ip, asr #19
     3c0:	0b240000 	bleq	9003c8 <__ccfg+0x8e0420>
     3c4:	00000a43 	andeq	r0, r0, r3, asr #20
     3c8:	4f0dcf05 	svcmi	0x000dcf05
     3cc:	28000006 	stmdacs	r0, {r1, r2}
     3d0:	0018060b 	andseq	r0, r8, fp, lsl #12
     3d4:	09d00500 	ldmibeq	r0, {r8, sl}^
     3d8:	0000066a 	andeq	r0, r0, sl, ror #12
     3dc:	755f102c 	ldrbvc	r1, [pc, #-44]	; 3b8 <root+0x27c>
     3e0:	d3050062 	movwle	r0, #20578	; 0x5062
     3e4:	00030911 	andeq	r0, r3, r1, lsl r9
     3e8:	5f103000 	svcpl	0x00103000
     3ec:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
     3f0:	033112d4 	teqeq	r1, #212, 4	; 0x4000000d
     3f4:	10380000 	eorsne	r0, r8, r0
     3f8:	0072755f 	rsbseq	r7, r2, pc, asr r5
     3fc:	8d07d505 	cfstr32hi	mvfx13, [r7, #-20]	; 0xffffffec
     400:	3c000000 	stccc	0, cr0, [r0], {-0}
static void devinit_uart (int devnum) {
     404:	000a5a0b 	andeq	r5, sl, fp, lsl #20
	adddevfunc (ioreq_uart_a, devnum);
     408:	11d80500 	bicsne	r0, r8, r0, lsl #10
     40c:	00000670 	andeq	r0, r0, r0, ror r6
void udelay (volatile word n) {
     410:	09e90b40 	stmibeq	r9!, {r6, r8, r9, fp}^
     414:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
	while (n) {
     418:	00068011 	andeq	r8, r6, r1, lsl r0
     41c:	5f104300 	svcpl	0x00104300
}
     420:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
	while (n--);
     424:	030911dc 	movweq	r1, #37340	; 0x91dc
     428:	0b440000 	bleq	1100430 <__ccfg+0x10e0488>
     42c:	00000853 	andeq	r0, r0, r3, asr r8
		n--;
     430:	8d07df05 	stchi	15, cr13, [r7, #-20]	; 0xffffffec
     434:	4c000000 	stcmi	0, cr0, [r0], {-0}
     438:	0003ff0b 	andeq	pc, r3, fp, lsl #30
void mdelay (volatile word n) {
     43c:	0ae00500 	beq	ff801844 <_estack+0xdf7fc844>
     440:	000000a8 	andeq	r0, r0, r8, lsr #1
	while (n) {
     444:	43200b50 			; <UNDEFINED> instruction: 0x43200b50
     448:	e3050000 	movw	r0, #20480	; 0x5000
}
     44c:	00049912 	andeq	r9, r4, r2, lsl r9
		udelay (999);
     450:	6b0b5400 	blvs	2d5458 <__ccfg+0x2b54b0>
     454:	05000008 	streq	r0, [r0, #-8]
		n--;
     458:	01540ce7 	cmpeq	r4, r7, ror #25
     45c:	0b580000 	bleq	1600464 <__ccfg+0x15e04bc>
     460:	0000078e 	andeq	r0, r0, lr, lsl #15
     464:	160ee905 	strne	lr, [lr], -r5, lsl #18
void __pi_ondomain (lword d) {
     468:	5c000001 	stcpl	0, cr0, [r0], {1}
     46c:	000a150b 	andeq	r1, sl, fp, lsl #10
		if (__pi_systat.effpdm > 1)
     470:	07ea0500 	strbeq	r0, [sl, r0, lsl #10]!
     474:	0000008d 	andeq	r0, r0, sp, lsl #1
			__pi_systat.effpdm = 1;
     478:	01150064 	tsteq	r5, r4, rrx
	PRCMPowerDomainOn (d);
     47c:	0000008d 	andeq	r0, r0, sp, lsl #1
     480:	00000499 	muleq	r0, r9, r4
     484:	00049916 	andeq	r9, r4, r6, lsl r9
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     488:	01221600 			; <UNDEFINED> instruction: 0x01221600
     48c:	ed160000 	ldc	0, cr0, [r6, #-0]
     490:	16000005 	strne	r0, [r0], -r5
	__pi_systat.ondmns |= d;
     494:	0000008d 	andeq	r0, r0, sp, lsl #1
     498:	a4041100 	strge	r1, [r4], #-256	; 0xffffff00
}
     49c:	17000004 	strne	r0, [r0, -r4]
     4a0:	00000499 	muleq	r0, r9, r4
void __pi_offdomain (lword d) {
     4a4:	00435e18 	subeq	r5, r3, r8, lsl lr
     4a8:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
	PRCMPowerDomainOff (d);
     4ac:	ed080265 	sfm	f0, 4, [r8, #-404]	; 0xfffffe6c
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	19000005 	stmdbne	r0, {r0, r2}
     4b4:	000006f4 	strdeq	r0, [r0], -r4
     4b8:	07026705 	streq	r6, [r2, -r5, lsl #14]
	if (d & PRCM_DOMAIN_RFCORE) {
     4bc:	0000008d 	andeq	r0, r0, sp, lsl #1
     4c0:	05ce1900 	strbeq	r1, [lr, #2304]	; 0x900
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c4:	6c050000 	stcvs	0, cr0, [r5], {-0}
     4c8:	06dc0b02 	ldrbeq	r0, [ip], r2, lsl #22
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4cc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
     4d0:	00000255 	andeq	r0, r0, r5, asr r2
	__pi_systat.ondmns &= ~d;
     4d4:	14026c05 	strne	r6, [r2], #-3077	; 0xfffff3fb
     4d8:	000006dc 	ldrdeq	r0, [r0], -ip
}
     4dc:	0a491908 	beq	1246904 <__ccfg+0x122695c>
     4e0:	6c050000 	stcvs	0, cr0, [r5], {-0}
void __pi_syserror (word ec, const char *m) {
     4e4:	06dc1e02 	ldrbeq	r1, [ip], r2, lsl #28
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
     4ec:	0000045d 	andeq	r0, r0, sp, asr r4
  __ASM volatile ("cpsid i" : : : "memory");
     4f0:	07026e05 	streq	r6, [r2, -r5, lsl #28]
     4f4:	0000008d 	andeq	r0, r0, sp, lsl #1
     4f8:	040f1910 	streq	r1, [pc], #-2320	; 500 <__pi_syserror+0x1c>
     4fc:	6f050000 	svcvs	0x00050000
		all_leds_blink;
     500:	08dc0802 	ldmeq	ip, {r1, fp}^
     504:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     508:	000009fc 	strdeq	r0, [r0], -ip
     50c:	07027205 	streq	r7, [r2, -r5, lsl #4]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     510:	0000008d 	andeq	r0, r0, sp, lsl #1
     514:	3d4e1930 	vstrcc.16	s3, [lr, #-96]	; 0xffffffa0	; <UNPREDICTABLE>
     518:	73050000 	movwvc	r0, #20480	; 0x5000
     51c:	08f21602 	ldmeq	r2!, {r1, r9, sl, ip}^
     520:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     524:	000005a1 	andeq	r0, r0, r1, lsr #11
	while (1) {
     528:	07027505 	streq	r7, [r2, -r5, lsl #10]
     52c:	0000008d 	andeq	r0, r0, sp, lsl #1
     530:	069b1938 			; <UNDEFINED> instruction: 0x069b1938
     534:	77050000 	strvc	r0, [r5, -r0]
void tci_run_delay_timer () {
     538:	09040a02 	stmdbeq	r4, {r1, r9, fp}
	setdel = __pi_mintk - __pi_old;
     53c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     540:	000002cc 	andeq	r0, r0, ip, asr #5
     544:	13027a05 	movwne	r7, #10757	; 0x2a05
     548:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	03781940 	cmneq	r8, #64, 18	; 0x100000
     550:	7b050000 	blvc	140558 <__ccfg+0x1205b0>
     554:	008d0702 	addeq	r0, sp, r2, lsl #14
     558:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
	sti_tim;
     560:	13027c05 	movwne	r7, #11269	; 0x2c05
}
     564:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     568:	06061948 	streq	r1, [r6], -r8, asr #18
     56c:	7d050000 	stcvc	0, cr0, [r5, #-0]
     570:	090a1402 	stmdbeq	sl, {r1, sl, ip}
     574:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
	cli_aux;
     578:	00000839 	andeq	r0, r0, r9, lsr r8
     57c:	07028005 	streq	r8, [r2, -r5]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	0000008d 	andeq	r0, r0, sp, lsl #1
     584:	08d01950 	ldmeq	r0, {r4, r6, r8, fp, ip}^
     588:	81050000 	mrshi	r0, (UNDEF: 5)
     58c:	05ed0902 	strbeq	r0, [sp, #2306]!	; 0x902
	sti_aux;
     590:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
}
     594:	000008ea 	andeq	r0, r0, sl, ror #17
     598:	0702a405 	streq	sl, [r2, -r5, lsl #8]
     59c:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
void AONRTCIntHandler () {
     5a0:	07861a58 			; <UNDEFINED> instruction: 0x07861a58
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a4:	a8050000 	stmdage	r5, {}	; <UNPREDICTABLE>
     5a8:	02eb1302 	rsceq	r1, fp, #134217728	; 0x8000000
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	01480000 	mrseq	r0, (UNDEF: 72)
		if (__pi_utims [0] == 0)
     5b0:	00052e1a 	andeq	r2, r5, sl, lsl lr
     5b4:	02a90500 	adceq	r0, r9, #0, 10
		if (*(__pi_utims [0])) {
     5b8:	0002a812 	andeq	sl, r2, r2, lsl r8
     5bc:	1a014c00 	bne	535c4 <__ccfg+0x3361c>
			(*(__pi_utims [0]))--;
     5c0:	00000515 	andeq	r0, r0, r5, lsl r5
		if (__pi_utims [1] == 0)
     5c4:	0c02ad05 	stceq	13, cr10, [r2], {5}
		if (*(__pi_utims [1])) {
     5c8:	0000091c 	andeq	r0, r0, ip, lsl r9
			aux_timer_inactive = 0;
     5cc:	4d1a02dc 	lfmmi	f0, 4, [sl, #-880]	; 0xfffffc90
			(*(__pi_utims [1]))--;
     5d0:	05000009 	streq	r0, [r0, #-9]
		if (__pi_utims [2] == 0)
     5d4:	9d1002b2 	lfmls	f0, 4, [r0, #-712]	; 0xfffffd38
		if (*(__pi_utims [2])) {
     5d8:	e0000006 	and	r0, r0, r6
			(*(__pi_utims [2]))--;
     5dc:	07c71a02 	strbeq	r1, [r7, r2, lsl #20]
		if (__pi_utims [3] != 0) {
     5e0:	b4050000 	strlt	r0, [r5], #-0
			if (*(__pi_utims [3])) {
     5e4:	09280a02 	stmdbeq	r8!, {r1, r9, fp}
				aux_timer_inactive = 0;
     5e8:	02ec0000 	rsceq	r0, ip, #0
				(*(__pi_utims [3]))--;
     5ec:	f3041100 	vrhadd.u8	d1, d4, d0
	if (__pi_systat.ledsts) {
     5f0:	02000005 	andeq	r0, r0, #5
     5f4:	08e10801 	stmiaeq	r1!, {r0, fp}^
		if (__pi_systat.ledblc++ == 0) {
     5f8:	f3170000 	vhadd.u16	d0, d7, d0
     5fc:	11000005 	tstne	r0, r5
			if (__pi_systat.ledblk) {
     600:	00047a04 	andeq	r7, r4, r4, lsl #20
     604:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
     608:	24000000 	strcs	r0, [r0], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     60c:	16000006 	strne	r0, [r0], -r6
     610:	00000499 	muleq	r0, r9, r4
				if (__pi_systat.ledsts & 0x2)
     614:	00012216 	andeq	r2, r1, r6, lsl r2
     618:	06241600 	strteq	r1, [r4], -r0, lsl #12
     61c:	8d160000 	ldchi	0, cr0, [r6, #-0]
				if (__pi_systat.ledsts & 0x4)
     620:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 0;
     624:	05fa0411 	ldrbeq	r0, [sl, #1041]!	; 0x411
     628:	04110000 	ldreq	r0, [r1], #-0
			if (__pi_systat.fstblk)
     62c:	00000605 	andeq	r0, r0, r5, lsl #12
     630:	00b40115 	adcseq	r0, r4, r5, lsl r1
				__pi_systat.ledblc = 200;
     634:	064f0000 	strbeq	r0, [pc], -r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     638:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
		cli_tim;
     63c:	16000004 	strne	r0, [r0], -r4
		__pi_new += setdel;
     640:	00000122 	andeq	r0, r0, r2, lsr #2
     644:	0000b416 	andeq	fp, r0, r6, lsl r4
		setdel = 0;
     648:	008d1600 	addeq	r1, sp, r0, lsl #12
		RISE_N_SHINE;
     64c:	11000000 	mrsne	r0, (UNDEF: 0)
		__pi_new += setdel;
     650:	00063004 	andeq	r3, r6, r4
		RISE_N_SHINE;
     654:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
     658:	6a000000 	bvs	660 <AONRTCIntHandler+0xc0>
		aux_timer_inactive = 1;
     65c:	16000006 	strne	r0, [r0], -r6
     660:	00000499 	muleq	r0, r9, r4
				if (__pi_systat.ledsts & 0x1)
     664:	00012216 	andeq	r2, r1, r6, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     668:	04110000 	ldreq	r0, [r1], #-0
     66c:	00000655 	andeq	r0, r0, r5, asr r6
				if (__pi_systat.ledsts & 0x2)
     670:	00003808 	andeq	r3, r0, r8, lsl #16
     674:	00068000 	andeq	r8, r6, r0
     678:	00940900 	addseq	r0, r4, r0, lsl #18
				if (__pi_systat.ledsts & 0x8)
     67c:	00020000 	andeq	r0, r2, r0
				__pi_systat.ledblk = 1;
     680:	00003808 	andeq	r3, r0, r8, lsl #16
     684:	00069000 	andeq	r9, r6, r0
		if (aux_timer_inactive) {
     688:	00940900 	addseq	r0, r4, r0, lsl #18
			cli_aux;
     68c:	00000000 	andeq	r0, r0, r0
     690:	0003ed05 	andeq	lr, r3, r5, lsl #26
     694:	01240500 			; <UNDEFINED> instruction: 0x01240500
     698:	00033718 	andeq	r3, r3, r8, lsl r7
     69c:	43741b00 	cmnmi	r4, #0, 22
     6a0:	050c0000 	streq	r0, [ip, #-0]
     6a4:	d6080128 	strle	r0, [r8], -r8, lsr #2
     6a8:	19000006 	stmdbne	r0, {r1, r2}
     6ac:	00000a32 	andeq	r0, r0, r2, lsr sl
     6b0:	11012a05 	tstne	r1, r5, lsl #20
word tci_update_delay_ticks (Boolean force) {
     6b4:	000006d6 	ldrdeq	r0, [r0], -r6
	cli_tim;
     6b8:	088b1900 	stmeq	fp, {r8, fp, ip}
     6bc:	2b050000 	blcs	1406c4 <__ccfg+0x12071c>
	if (setdel) {
     6c0:	008d0701 	addeq	r0, sp, r1, lsl #14
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	0000058d 	andeq	r0, r0, sp, lsl #11
     6cc:	0b012c05 	bleq	4b6e8 <__ccfg+0x2b740>
     6d0:	000006dc 	ldrdeq	r0, [r0], -ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d4:	04110008 	ldreq	r0, [r1], #-8
				AON_RTC_O_CH0CMP)) - gettav ());
     6d8:	0000069d 	muleq	r0, sp, r6
	return NO;
     6dc:	06900411 			; <UNDEFINED> instruction: 0x06900411
			setdel = 0;
     6e0:	641b0000 	ldrvs	r0, [fp], #-0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     6e8:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
}
     6ec:	0000071b 	andeq	r0, r0, fp, lsl r7
		sti_tim;
     6f0:	00117a19 	andseq	r7, r1, r9, lsl sl
		return YES;
     6f4:	01450500 	cmpeq	r5, r0, lsl #10
     6f8:	00071b12 	andeq	r1, r7, r2, lsl fp
     6fc:	18190000 	ldmdane	r9, {}	; <UNPREDICTABLE>
     700:	05000006 	streq	r0, [r0, #-6]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	1b120146 	blne	480c24 <__ccfg+0x460c7c>
	UARTDisable (UART0_BASE);
     708:	06000007 	streq	r0, [r0], -r7
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	00101f19 	andseq	r1, r0, r9, lsl pc
	UARTDisable (UART0_BASE);
     710:	01470500 	cmpeq	r7, r0, lsl #10
	UARTConfigSetExpClk (UART0_BASE,
     714:	00005212 	andeq	r5, r0, r2, lsl r2
     718:	08000c00 	stmdaeq	r0, {sl, fp}
     71c:	00000052 	andeq	r0, r0, r2, asr r0
     720:	0000072b 	andeq	r0, r0, fp, lsr #14
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	00009409 	andeq	r9, r0, r9, lsl #8
     728:	1c000200 	sfmne	f0, 4, [r0], {-0}
     72c:	028505d0 	addeq	r0, r5, #208, 10	; 0x34000000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	00084007 	andeq	r4, r8, r7
     734:	09ef1900 	stmibeq	pc!, {r8, fp, ip}^	; <UNPREDICTABLE>
     738:	87050000 	strhi	r0, [r5, -r0]
	urates [0] = rate;
     73c:	00941802 	addseq	r1, r4, r2, lsl #16
}
     740:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     744:	00000955 	andeq	r0, r0, r5, asr r9
     748:	12028805 	andne	r8, r2, #327680	; 0x50000
     74c:	000005ed 	andeq	r0, r0, sp, ror #11
     750:	03a51904 			; <UNDEFINED> instruction: 0x03a51904
     754:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	08401002 	stmdaeq	r0, {r1, ip}^
     75c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     760:	00000818 	andeq	r0, r0, r8, lsl r8
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	17028a05 	strne	r8, [r2, -r5, lsl #20]
     768:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76c:	05d51924 	ldrbeq	r1, [r5, #2340]	; 0x924
     770:	8b050000 	blhi	140778 <__ccfg+0x1207d0>
	__pi_uart_setrate (urates [0], __pi_uart);
     774:	008d0f02 	addeq	r0, sp, r2, lsl #30
     778:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     77c:	00000a2d 	andeq	r0, r0, sp, lsr #20
     780:	2c028c05 	stccs	12, cr8, [r2], {5}
     784:	0000007a 	andeq	r0, r0, sl, ror r0
     788:	00851950 	addeq	r1, r5, r0, asr r9
     78c:	8d050000 	stchi	0, cr0, [r5, #-0]
	switch (operation) {
     790:	06e21a02 	strbteq	r1, [r2], r2, lsl #20
static int ioreq_uart_a (int operation, char *buf, int len) {
     794:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     798:	000004ea 	andeq	r0, r0, sl, ror #9
     79c:	16028e05 	strne	r8, [r2], -r5, lsl #28
     7a0:	00000116 	andeq	r0, r0, r6, lsl r1
     7a4:	09621968 	stmdbeq	r2!, {r3, r5, r6, r8, fp, ip}^
				*buf++ = uart_a_read;
     7a8:	8f050000 	svchi	0x00050000
     7ac:	01161602 	tsteq	r6, r2, lsl #12
			while (len && uart_a_char_available) {
     7b0:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     7b4:	0000006f 	andeq	r0, r0, pc, rrx
     7b8:	16029005 	strne	r9, [r2], -r5
			if (len != operation) {
     7bc:	00000116 	andeq	r0, r0, r6, lsl r1
}
     7c0:	08491978 	stmdaeq	r9, {r3, r4, r5, r6, r8, fp, ip}^
     7c4:	91050000 	mrsls	r0, (UNDEF: 5)
			uart_a_disable_int;
     7c8:	08501002 	ldmdaeq	r0, {r1, ip}^
			if (uart_a_char_available) {
     7cc:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
				*buf++ = uart_a_read;
     7d0:	00000382 	andeq	r0, r0, r2, lsl #7
			uart_a_disable_int;
     7d4:	10029205 	andne	r9, r2, r5, lsl #4
     7d8:	00000860 	andeq	r0, r0, r0, ror #16
			if (uart_a_char_available) {
     7dc:	090d1988 	stmdbeq	sp, {r3, r7, r8, fp, ip}
     7e0:	93050000 	movwls	r0, #20480	; 0x5000
				uart_a_enable_int;
     7e4:	008d0f02 	addeq	r0, sp, r2, lsl #30
     7e8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
				goto Redo_rx;
     7ec:	00000229 	andeq	r0, r0, r9, lsr #4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f0:	16029405 	strne	r9, [r2], -r5, lsl #8
     7f4:	00000116 	andeq	r0, r0, r6, lsl r1
			return -2;
     7f8:	051f19a4 	ldreq	r1, [pc, #-2468]	; fffffe5c <_estack+0xdfffae5c>
     7fc:	95050000 	strls	r0, [r5, #-0]
				uart_a_write (*buf);
     800:	01161602 	tsteq	r6, r2, lsl #12
     804:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
			while (len && uart_a_room_in_tx) {
     808:	00000467 	andeq	r0, r0, r7, ror #8
     80c:	16029605 	strne	r9, [r2], -r5, lsl #12
     810:	00000116 	andeq	r0, r0, r6, lsl r1
			if (len != operation) {
     814:	064f19b4 			; <UNDEFINED> instruction: 0x064f19b4
			uart_a_disable_int;
     818:	97050000 	strls	r0, [r5, -r0]
     81c:	01161602 	tsteq	r6, r2, lsl #12
			if (uart_a_room_in_tx) {
     820:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     824:	000004d9 	ldrdeq	r0, [r0], -r9
				uart_a_enable_int;
     828:	16029805 	strne	r9, [r2], -r5, lsl #16
     82c:	00000116 	andeq	r0, r0, r6, lsl r1
				*buf++ = uart_a_read;
     830:	06f219c4 	ldrbteq	r1, [r2], r4, asr #19
			if (uart_a_room_in_tx) {
     834:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
				uart_a_write (*buf);
     838:	008d0802 	addeq	r0, sp, r2, lsl #16
     83c:	00cc0000 	sbceq	r0, ip, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     840:	0005f308 	andeq	pc, r5, r8, lsl #6
     844:	00085000 	andeq	r5, r8, r0
			uart_a_enable_int;
     848:	00940900 	addseq	r0, r4, r0, lsl #18
     84c:	00190000 	andseq	r0, r9, r0
     850:	0005f308 	andeq	pc, r5, r8, lsl #6
			return 0;
     854:	00086000 	andeq	r6, r8, r0
			if (len == UART_CNTRL_SETRATE) {
     858:	00940900 	addseq	r0, r4, r0, lsl #18
				if (__pi_uart_setrate (*((word*)buf),
     85c:	00070000 	andeq	r0, r7, r0
     860:	0005f308 	andeq	pc, r5, r8, lsl #6
     864:	00087000 	andeq	r7, r8, r0
				syserror (EREQPAR, "uar");
     868:	00940900 	addseq	r0, r4, r0, lsl #18
			syserror (ENOOPER, "uai");
     86c:	00170000 	andseq	r0, r7, r0
			if (len == UART_CNTRL_GETRATE) {
     870:	9e05f01c 	mcrls	0, 0, pc, cr5, cr12, {0}	; <UNPREDICTABLE>
				return 1;
     874:	08970702 	ldmeq	r7, {r1, r8, r9, sl}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     878:	5d190000 	ldcpl	0, cr0, [r9, #-0]
			syserror (ENOOPER, "uai");
     87c:	05000003 	streq	r0, [r0, #-3]
     880:	971b02a1 	ldrls	r0, [fp, -r1, lsr #5]
     884:	00000008 	andeq	r0, r0, r8
     888:	000a5119 	andeq	r5, sl, r9, lsl r1
     88c:	02a20500 	adceq	r0, r2, #0, 10
     890:	0008a718 	andeq	sl, r8, r8, lsl r7
     894:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
     898:	00000331 	andeq	r0, r0, r1, lsr r3
     89c:	000008a7 	andeq	r0, r0, r7, lsr #17
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	00009409 	andeq	r9, r0, r9, lsl #8
void UART0IntHandler () {
     8a4:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	00000094 	muleq	r0, r4, r0
     8ac:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
     8b0:	00009409 	andeq	r9, r0, r9, lsl #8
     8b4:	1d001d00 	stcne	13, cr1, [r0, #-0]
     8b8:	028305f0 	addeq	r0, r3, #240, 10	; 0x3c000000
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8bc:	0008dc03 	andeq	sp, r8, r3, lsl #24
     8c0:	435e1e00 	cmpmi	lr, #0, 28
		RISE_N_SHINE;
     8c4:	9a050000 	bls	1408cc <__ccfg+0x120924>
     8c8:	072b0b02 	streq	r0, [fp, -r2, lsl #22]!
		i_trigger (devevent (UART_A, READ));
     8cc:	271e0000 	ldrcs	r0, [lr, -r0]
     8d0:	05000008 	streq	r0, [r0, #-8]
     8d4:	700b02a3 	andvc	r0, fp, r3, lsr #5
     8d8:	00000008 	andeq	r0, r0, r8
     8dc:	0005f308 	andeq	pc, r5, r8, lsl #6
     8e0:	0008ec00 	andeq	lr, r8, r0, lsl #24
     8e4:	00940900 	addseq	r0, r4, r0, lsl #18
     8e8:	00180000 	andseq	r0, r8, r0
     8ec:	000a381f 	andeq	r3, sl, pc, lsl r8
     8f0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
     8f4:	000008ec 	andeq	r0, r0, ip, ror #17
     8f8:	09040120 	stmdbeq	r4, {r5, r8}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fc:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
     900:	00000004 	andeq	r0, r0, r4
     904:	08f80411 	ldmeq	r8!, {r0, r4, sl}^
		i_trigger (devevent (UART_A, WRITE));
     908:	04110000 	ldreq	r0, [r1], #-0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     910:	091c0120 	ldmdbeq	ip, {r5, r8}
		RISE_N_SHINE;
     914:	8d160000 	ldchi	0, cr0, [r6, #-0]
     918:	00000000 	andeq	r0, r0, r0
     91c:	09220411 	stmdbeq	r2!, {r0, r4, sl}
		i_trigger (devevent (UART_A, WRITE));
     920:	04110000 	ldreq	r0, [r1], #-0
     924:	00000910 	andeq	r0, r0, r0, lsl r9
     928:	00069008 	andeq	r9, r6, r8
     92c:	00093800 	andeq	r3, r9, r0, lsl #16
     930:	00940900 	addseq	r0, r4, r0, lsl #18
     934:	00020000 	andeq	r0, r2, r0
     938:	0007f421 	andeq	pc, r7, r1, lsr #8
     93c:	03330500 	teqeq	r3, #0, 10
     940:	00049917 	andeq	r9, r4, r7, lsl r9
     944:	21010100 	mrscs	r0, (UNDEF: 17)
     948:	000007ed 	andeq	r0, r0, sp, ror #15
}
     94c:	1d033405 	cfstrsne	mvf3, [r3, #-20]	; 0xffffffec
     950:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     954:	31030101 	tstcc	r3, r1, lsl #2
     958:	07000008 	streq	r0, [r0, -r8]
     95c:	002c1318 	eoreq	r1, ip, r8, lsl r3
void __buttons_setirq (int val) {
     960:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	07000003 	streq	r0, [r0, -r3]
     968:	00461424 	subeq	r1, r6, r4, lsr #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
     970:	07000008 	streq	r0, [r0, -r8]
     974:	00601430 	rsbeq	r1, r0, r0, lsr r4
		bn = BUTTON_GPIO (__button_list [i]);
     978:	9a030000 	bls	c0980 <__ccfg+0xa09d8>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97c:	08000005 	stmdaeq	r0, {r0, r2}
     980:	00811971 	addeq	r1, r1, r1, ror r9
     984:	1a030000 	bne	c098c <__ccfg+0xa09e4>
     988:	09000004 	stmdbeq	r0, {r2}
     98c:	01241b28 			; <UNDEFINED> instruction: 0x01241b28
     990:	63030000 	movwvs	r0, #12288	; 0x3000
}
     994:	09000008 	stmdbeq	r0, {r3}
     998:	09861863 	stmibeq	r6, {r0, r1, r5, r6, fp, ip}
     99c:	2f030000 	svccs	0x00030000
     9a0:	0a000007 	beq	9c4 <__pinlist_setirq+0x20>
void __pinlist_setirq (int val) {
     9a4:	09561126 	ldmdbeq	r6, {r1, r2, r5, r8, ip}^
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	ca030000 	bgt	c09b0 <__ccfg+0xa0a08>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	0a000023 	beq	a40 <GPIOIntHandler+0x60>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	09621227 	stmdbeq	r2!, {r0, r1, r2, r5, r9, ip}^
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	aa170000 	bge	5c09bc <__ccfg+0x5a0a14>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b8:	22000009 	andcs	r0, r0, #9
     9bc:	000009aa 	andeq	r0, r0, sl, lsr #19
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c0:	0018e303 	andseq	lr, r8, r3, lsl #6
     9c4:	112b0a00 			; <UNDEFINED> instruction: 0x112b0a00
     9c8:	00000956 	andeq	r0, r0, r6, asr r9
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	0009c022 	andeq	ip, r9, r2, lsr #32
}
     9d0:	241b0300 	ldrcs	r0, [fp], #-768	; 0xfffffd00
     9d4:	2c0a0000 	stccs	0, cr0, [sl], {-0}
     9d8:	00096e12 	andeq	r6, r9, r2, lsl lr
     9dc:	09d11700 	ldmibeq	r1, {r8, r9, sl, ip}^
void GPIOIntHandler () {
     9e0:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
if (buttons_int) {
     9e4:	0a000004 	beq	9fc <GPIOIntHandler+0x1c>
     9e8:	096e122d 	stmdbeq	lr!, {r0, r2, r3, r5, r9, ip}^
	buttons_disable ();
     9ec:	71030000 	mrsvc	r0, (UNDEF: 3)
     9f0:	0a000008 	beq	a18 <GPIOIntHandler+0x38>
	i_trigger ((aword)&__button_list);
     9f4:	09fa0f2e 	ldmibeq	sl!, {r1, r2, r3, r5, r8, r9, sl, fp}^
     9f8:	04110000 	ldreq	r0, [r1], #-0
     9fc:	000009aa 	andeq	r0, r0, sl, lsr #19
     a00:	320a080a 	andcc	r0, sl, #655360	; 0xa0000
     a04:	000a8e09 	andeq	r8, sl, r9, lsl #28
     a08:	003e2300 	eorseq	r2, lr, r0, lsl #6
     a0c:	340a0000 	strcc	r0, [sl], #-0
     a10:	0009c007 	andeq	ip, r9, r7
     a14:	07010100 	streq	r0, [r1, -r0, lsl #2]
     a18:	04fd2300 	ldrbteq	r2, [sp], #768	; 0x300
     a1c:	350a0000 	strcc	r0, [sl, #-0]
	RISE_N_SHINE;
     a20:	0009c003 	andeq	ip, r9, r3
     a24:	06010100 	streq	r0, [r1], -r0, lsl #2
     a28:	02372300 	eorseq	r2, r7, #0, 6
if (pin_sensor_int) {
     a2c:	360a0000 	strcc	r0, [sl], -r0
     a30:	0009c003 	andeq	ip, r9, r3
	i_trigger ((aword)(&__input_pins));
     a34:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     a38:	05372300 	ldreq	r2, [r7, #-768]!	; 0xfffffd00
     a3c:	370a0000 	strcc	r0, [sl, -r0]
     a40:	0009c003 	andeq	ip, r9, r3
     a44:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     a48:	07c02300 	strbeq	r2, [r0, r0, lsl #6]
     a4c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
     a50:	0009c003 	andeq	ip, r9, r3
     a54:	00040100 	andeq	r0, r4, r0, lsl #2
     a58:	05040b00 	streq	r0, [r4, #-2816]	; 0xfffff500
     a5c:	3a0a0000 	bcc	280a64 <__ccfg+0x260abc>
	__pinsen_disable_and_clear;
     a60:	0009c007 	andeq	ip, r9, r7
	RISE_N_SHINE;
     a64:	ce0b0100 	adfgte	f0, f3, f0
     a68:	0a000006 	beq	a88 <system_init+0x4>
     a6c:	09c0033c 	stmibeq	r0, {r2, r3, r4, r5, r8, r9}^
}
     a70:	0b020000 	bleq	80a78 <__ccfg+0x60ad0>
     a74:	00000a6e 	andeq	r0, r0, lr, ror #20
     a78:	c0033d0a 	andgt	r3, r3, sl, lsl #26
     a7c:	03000009 	movweq	r0, #9
     a80:	0007030b 	andeq	r0, r7, fp, lsl #6
void system_init () {
     a84:	083f0a00 	ldmdaeq	pc!, {r9, fp}	; <UNPREDICTABLE>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a88:	000009d1 	ldrdeq	r0, [r0], -r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8c:	85030004 	strhi	r0, [r3, #-4]
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	0a000002 	beq	aa0 <system_init+0x1c>
     a94:	0a000341 	beq	17a0 <tcv_endp+0x34>
     a98:	8e220000 	cdphi	0, 2, cr0, cr2, cr0, {0}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9c:	2400000a 	strcs	r0, [r0], #-10
     aa0:	0000053e 	andeq	r0, r0, lr, lsr r5
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa4:	9a1a430a 	bls	6916d4 <__ccfg+0x67172c>
     aa8:	0100000a 	tsteq	r0, sl
     aac:	01b12401 			; <UNDEFINED> instruction: 0x01b12401
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab0:	450a0000 	strmi	r0, [sl, #-0]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab4:	0005ed0e 	andeq	lr, r5, lr, lsl #26
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ab8:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     abc:	0000028e 	andeq	r0, r0, lr, lsl #5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac0:	ed1e450a 	cfldr32	mvfx4, [lr, #-40]	; 0xffffffd8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac4:	01000005 	tsteq	r0, r5
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	0b080a01 	bleq	2032d4 <__ccfg+0x1e332c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	0afa098f 	beq	ffe83110 <_estack+0xdfe7e110>
		pin = (port_confs [i] >> 19) & 0x1f;
     ad0:	010b0000 	mrseq	r0, (UNDEF: 11)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad4:	0b000006 	bleq	af4 <system_init+0x70>
     ad8:	096e0b90 	stmdbeq	lr!, {r4, r7, r8, r9, fp}^
     adc:	0b000000 	bleq	ae4 <system_init+0x60>
     ae0:	00000ba0 	andeq	r0, r0, r0, lsr #23
		if (port_confs [i] & 0x80)
     ae4:	aa07910b 	bge	1e4f18 <__ccfg+0x1c4f70>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ae8:	04000009 	streq	r0, [r0], #-9
     aec:	0001ea0b 	andeq	lr, r1, fp, lsl #20
		if (port_confs [i] & 0x40)
     af0:	10920b00 	addsne	r0, r2, r0, lsl #22
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af4:	000009cc 	andeq	r0, r0, ip, asr #19
     af8:	41030006 	tstmi	r3, r6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afc:	0b000009 	bleq	b28 <system_init+0xa4>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	0ac90393 	beq	ff241954 <_estack+0xdf23c954>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b04:	fa080000 	blx	200b0c <__ccfg+0x1e0b64>
	all_leds_blink;
     b08:	1100000a 	tstne	r0, sl
     b0c:	2500000b 	strcs	r0, [r0, #-11]
     b10:	070f2400 	streq	r2, [pc, -r0, lsl #8]
     b14:	990b0000 	stmdbls	fp, {}	; <UNPREDICTABLE>
     b18:	000b060f 	andeq	r0, fp, pc, lsl #12
     b1c:	0a010100 	beq	40f24 <__ccfg+0x20f7c>
     b20:	09910c01 	ldmibeq	r1, {r0, sl, fp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b24:	00000b49 	andeq	r0, r0, r9, asr #22
     b28:	00070a23 	andeq	r0, r7, r3, lsr #20
     b2c:	07930c00 	ldreq	r0, [r3, r0, lsl #24]
     b30:	000009c0 	andeq	r0, r0, r0, asr #19
     b34:	00010701 	andeq	r0, r1, r1, lsl #14
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b38:	00047823 	andeq	r7, r4, r3, lsr #16
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	03940c00 	orrseq	r0, r4, #0, 24
     b40:	000009c0 	andeq	r0, r0, r0, asr #19
	IntEnable (INT_AON_RTC_COMB);
     b44:	00000101 	andeq	r0, r0, r1, lsl #2
     b48:	07cc0300 	strbeq	r0, [ip, r0, lsl #6]
     b4c:	960c0000 	strls	r0, [ip], -r0
	__pi_malloc_init ();
     b50:	000b1f03 	andeq	r1, fp, r3, lsl #30
	IntEnable (INT_AON_GPIO_EDGE);
     b54:	0b491700 	bleq	124675c <__ccfg+0x12267b4>
     b58:	55080000 	strpl	r0, [r8, #-0]
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5c:	6500000b 	strvs	r0, [r0, #-11]
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	2500000b 	strcs	r0, [r0, #-11]
     b64:	0b5a1700 	bleq	168676c <__ccfg+0x16667c4>
     b68:	47240000 	strmi	r0, [r4, -r0]!
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6c:	0c000003 	stceq	0, cr0, [r0], {3}
     b70:	0b65179c 	bleq	19469e8 <__ccfg+0x1926a40>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b74:	01010000 	mrseq	r0, (UNDEF: 1)
     b78:	0009b608 	andeq	fp, r9, r8, lsl #12
     b7c:	000b8300 	andeq	r8, fp, r0, lsl #6
	urates [0] = UART_RATE / 100;
     b80:	17002500 	strne	r2, [r0, -r0, lsl #10]
     b84:	00000b78 	andeq	r0, r0, r8, ror fp
	reinit_uart ();
     b88:	0004b724 	andeq	fp, r4, r4, lsr #14
	EXTRA_INITIALIZERS;
     b8c:	13060d00 	movwne	r0, #27904	; 0x6d00
     b90:	00000b83 	andeq	r0, r0, r3, lsl #23
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b94:	b0240101 	eorlt	r0, r4, r1, lsl #2
     b98:	0b000006 	bleq	bb8 <system_init+0x134>
     b9c:	09d10ec3 	ldmibeq	r1, {r0, r1, r6, r7, r9, sl, fp}^
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba0:	01010000 	mrseq	r0, (UNDEF: 1)
     ba4:	0008fa05 	andeq	pc, r8, r5, lsl #20
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	016e0e00 	cmneq	lr, r0, lsl #28
     bac:	000bb110 	andeq	fp, fp, r0, lsl r1
			devinit [i] . init (devinit [i] . param);
     bb0:	b7041100 	strlt	r1, [r4, -r0, lsl #2]
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb4:	2000000b 	andcs	r0, r0, fp
     bb8:	000bc301 	andeq	ip, fp, r1, lsl #6
     bbc:	09aa1600 	stmibeq	sl!, {r9, sl, ip}
	IntEnable (INT_UART0_COMB);
     bc0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     bc4:	000005fa 	strdeq	r0, [r0], -sl
}
     bc8:	00000bce 	andeq	r0, r0, lr, asr #23
	tci_run_auxiliary_timer ();
     bcc:	c3170025 	tstgt	r7, #37	; 0x25
		diag ("");
     bd0:	2100000b 	tstcs	r0, fp
     bd4:	00000763 	andeq	r0, r0, r3, ror #14
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bd8:	13017f0e 	movwne	r7, #7950	; 0x1f0e
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bdc:	00000bce 	andeq	r0, r0, lr, asr #23
		diag ("Leftover RAM: %d bytes",
     be0:	2a210101 	bcs	840fec <__ccfg+0x821044>
     be4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     be8:	dd140182 	ldfles	f0, [r4, #-520]	; 0xfffffdf8
     bec:	01000009 	tsteq	r0, r9
     bf0:	0f040a01 	svceq	0x00040a01
     bf4:	0c150908 			; <UNDEFINED> instruction: 0x0c150908
     bf8:	f00b0000 			; <UNDEFINED> instruction: 0xf00b0000
     bfc:	0f000001 	svceq	0x00000001
     c00:	09aa070f 	stmibeq	sl!, {r0, r1, r2, r3, r8, r9, sl}
     c04:	0b000000 	bleq	c0c <system_init+0x188>
     c08:	00000935 	andeq	r0, r0, r5, lsr r9
     c0c:	aa03100f 	bge	c4c50 <__ccfg+0xa4ca8>
     c10:	02000009 	andeq	r0, r0, #9
     c14:	09c20300 	stmibeq	r2, {r8, r9}^
     c18:	110f0000 	mrsne	r0, CPSR
     c1c:	000bf103 	andeq	pc, fp, r3, lsl #2
     c20:	0f200a00 	svceq	0x00200a00
     c24:	0c930916 			; <UNDEFINED> instruction: 0x0c930916
     c28:	070b0000 	streq	r0, [fp, -r0]
     c2c:	0f000004 	svceq	0x00000004
     c30:	0cad0817 	stceq	8, cr0, [sp], #92	; 0x5c
     c34:	0b000000 	bleq	c3c <setpowermode>
     c38:	000006fb 	strdeq	r0, [r0], -fp
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	c808180f 	stmdagt	r8, {r0, r1, r2, r3, fp, ip}
     c40:	0400000c 	streq	r0, [r0], #-12
     c44:	0008830b 	andeq	r8, r8, fp, lsl #6
     c48:	08190f00 	ldmdaeq	r9, {r8, r9, sl, fp}
     c4c:	00000cfe 	strdeq	r0, [r0], -lr
     c50:	092d0b08 	pusheq	{r3, r8, r9, fp}
     c54:	1a0f0000 	bne	3c0c5c <__ccfg+0x3a0cb4>
     c58:	000d1908 	andeq	r1, sp, r8, lsl #18
}
     c5c:	270b0c00 	strcs	r0, [fp, -r0, lsl #24]
__attribute__ ((noreturn)) void __pi_release () {
     c60:	0f000007 	svceq	0x00000007
     c64:	0d2f081b 	stceq	8, cr0, [pc, #-108]!	; c00 <system_init+0x17c>
     c68:	0b100000 	bleq	400c70 <__ccfg+0x3e0cc8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6c:	00000797 	muleq	r0, r7, r7
	check_stack_overflow;
     c70:	2f081c0f 	svccs	0x00081c0f
     c74:	1400000d 	strne	r0, [r0], #-13
     c78:	0001d30b 	andeq	sp, r1, fp, lsl #6
	update_n_wake (MAX_WORD, NO);
     c7c:	081d0f00 	ldmdaeq	sp, {r8, r9, sl, fp}
     c80:	00000d2f 	andeq	r0, r0, pc, lsr #26
     c84:	027c0b18 	rsbseq	r0, ip, #24, 22	; 0x6000
	for_all_tasks (__pi_curr) {
     c88:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
     c8c:	00008d06 	andeq	r8, r0, r6, lsl #26
     c90:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	00008d01 	andeq	r8, r0, r1, lsl #26
	__SLEEP;
     c98:	000cad00 	andeq	sl, ip, r0, lsl #26
     c9c:	008d1600 	addeq	r1, sp, r0, lsl #12
     ca0:	8d160000 	ldchi	0, cr0, [r6, #-0]
     ca4:	16000000 	strne	r0, [r0], -r0
	system_event_count ++;
     ca8:	00000992 	muleq	r0, r2, r9
     cac:	93041100 	movwls	r1, #16640	; 0x4100
	switch (__pi_systat.effpdm) {
     cb0:	1500000c 	strne	r0, [r0, #-12]
     cb4:	00008d01 	andeq	r8, r0, r1, lsl #26
     cb8:	000cc800 	andeq	ip, ip, r0, lsl #16
     cbc:	008d1600 	addeq	r1, sp, r0, lsl #12
			__WFI ();
     cc0:	8d160000 	ldchi	0, cr0, [r6, #-0]
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	0cb30411 	cfldrseq	mvf0, [r3], #68	; 0x44
	check_stack_overflow;
     ccc:	01150000 	tsteq	r5, r0
     cd0:	0000008d 	andeq	r0, r0, sp, lsl #1
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd4:	00000cf2 	strdeq	r0, [r0], -r2
     cd8:	00008d16 	andeq	r8, r0, r6, lsl sp
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
			goto Redo;
     ce0:	8d160000 	ldchi	0, cr0, [r6, #-0]
	for_all_tasks (__pi_curr) {
     ce4:	16000000 	strne	r0, [r0], -r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ce8:	00000cf2 	strdeq	r0, [r0], -r2
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cec:	000cf816 	andeq	pc, ip, r6, lsl r8	; <UNPREDICTABLE>
     cf0:	04110000 	ldreq	r0, [r1], #-0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf4:	0000008d 	andeq	r0, r0, sp, lsl #1
     cf8:	0c150411 	cfldrseq	mvf0, [r5], {17}
     cfc:	04110000 	ldreq	r0, [r1], #-0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d00:	00000cce 	andeq	r0, r0, lr, asr #25
     d04:	008d0115 	addeq	r0, sp, r5, lsl r1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	0d190000 	ldceq	0, cr0, [r9, #-0]
     d0c:	ee160000 	cdp	0, 1, cr0, cr6, cr0, {0}
			__WFI ();
     d10:	16000009 	strne	r0, [r0], -r9
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d14:	00000cf8 	strdeq	r0, [r0], -r8
     d18:	04041100 	streq	r1, [r4], #-256	; 0xffffff00
}
     d1c:	1500000d 	strne	r0, [r0, #-13]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d20:	00008d01 	andeq	r8, r0, r1, lsl #26
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d24:	000d2f00 	andeq	r2, sp, r0, lsl #30
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d28:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
     d2c:	11000000 	mrsne	r0, (UNDEF: 0)
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d30:	000d1f04 	andeq	r1, sp, r4, lsl #30
     d34:	09780300 	ldmdbeq	r8!, {r8, r9}^
     d38:	1f0f0000 	svcne	0x000f0000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3c:	000c2103 	andeq	r2, ip, r3, lsl #2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d40:	0d351700 	ldceq	7, cr1, [r5, #-0]
     d44:	07210000 	streq	r0, [r1, -r0]!
     d48:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     d4c:	d10e02d8 	ldrdle	r0, [lr, -r8]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	01000009 	tsteq	r0, r9
     d54:	0e081c01 	cdpeq	12, 0, cr1, cr8, cr1, {0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d58:	7c090303 	stcvc	3, cr0, [r9], {3}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d5c:	1900000d 	stmdbne	r0, {r0, r2, r3}
     d60:	0000374e 	andeq	r3, r0, lr, asr #14
     d64:	0703070e 	streq	r0, [r3, -lr, lsl #14]
     d68:	000009aa 	andeq	r0, r0, sl, lsr #19
     d6c:	0af81900 	beq	ffe07174 <_estack+0xdfe02174>
			SysCtrlSetRechargeBeforePowerDown
     d70:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d74:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d78:	00040000 	andeq	r0, r4, r0
     d7c:	0003bf05 	andeq	fp, r3, r5, lsl #30
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	03090e00 	movweq	r0, #40448	; 0x9e00
     d84:	000d5503 	andeq	r5, sp, r3, lsl #10
     d88:	00331b00 	eorseq	r1, r3, r0, lsl #22
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
     d90:	ec08030b 	stc	3, cr0, [r8], {11}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d94:	1900000d 	stmdbne	r0, {r0, r2, r3}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d98:	000019f9 	strdeq	r1, [r0], -r9
     d9c:	0703140e 	streq	r1, [r3, -lr, lsl #8]
     da0:	000009aa 	andeq	r0, r0, sl, lsr #19
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da4:	08a41900 	stmiaeq	r4!, {r8, fp, ip}
			while (!(AONWUCPowerStatusGet () &
     da8:	150e0000 	strne	r0, [lr, #-0]
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dac:	09aa0703 	stmibeq	sl!, {r0, r1, r8, r9, sl}
     db0:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     db4:	000048be 			; <UNDEFINED> instruction: 0x000048be
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     db8:	0a03160e 	beq	c65f8 <__ccfg+0xa6650>
     dbc:	00000ba4 	andeq	r0, r0, r4, lsr #23
     dc0:	43211904 			; <UNDEFINED> instruction: 0x43211904
     dc4:	170e0000 	strne	r0, [lr, -r0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dc8:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
     dcc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	00000007 	andeq	r0, r0, r7
     dd4:	0f03180e 	svceq	0x0003180e
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd8:	00000dec 	andeq	r0, r0, ip, ror #27
			reinit_uart ();
     ddc:	0722190c 	streq	r1, [r2, -ip, lsl #18]!
     de0:	190e0000 	stmdbne	lr, {}	; <UNPREDICTABLE>
     de4:	0dfc1503 	cfldr64eq	mvdx1, [ip, #12]!
}
     de8:	002c0000 	eoreq	r0, ip, r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dec:	000d7c08 	andeq	r7, sp, r8, lsl #24
     df0:	000dfc00 	andeq	pc, sp, r0, lsl #24
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df4:	00940900 	addseq	r0, r4, r0, lsl #18
     df8:	00030000 	andeq	r0, r3, r0
     dfc:	0d890411 	cfstrseq	mvf0, [r9, #68]	; 0x44
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     e04:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
     e08:	891b031c 	ldmdbhi	fp, {r2, r3, r4, r8, r9}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0c:	2100000d 	tstcs	r0, sp
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	00000879 	andeq	r0, r0, r9, ror r8
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	14031e0e 	strne	r1, [r3], #-3598	; 0xfffff1f2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e18:	00000e1e 	andeq	r0, r0, lr, lsl lr
     e1c:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e20:	00000e02 	andeq	r0, r0, r2, lsl #28
     e24:	00054a24 	andeq	r4, r5, r4, lsr #20
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e28:	0d1d1000 	ldceq	0, cr1, [sp, #-0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2c:	000009aa 	andeq	r0, r0, sl, lsr #19
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e30:	3e240101 	sufccs	f0, f4, f1
     e34:	10000002 	andne	r0, r0, r2
			PRCMPowerDomainOff (
     e38:	09bb161e 	ldmibeq	fp!, {r1, r2, r3, r4, r9, sl, ip}
     e3c:	01010000 	mrseq	r0, (UNDEF: 1)
	__SLEEP;
     e40:	0008e624 	andeq	lr, r8, r4, lsr #12
     e44:	201e1000 	andscs	r1, lr, r0
  __ASM volatile ("cpsie i" : : : "memory");
     e48:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
	goto Redo;
     e4c:	02240101 	eoreq	r0, r4, #1073741824	; 0x40000000
     e50:	10000009 	andne	r0, r0, r9
     e54:	0e1e1422 	cfmuldeq	mvd1, mvd14, mvd2
     e58:	01010000 	mrseq	r0, (UNDEF: 1)
     e5c:	00000e24 	andeq	r0, r0, r4, lsr #28
     e60:	180c1100 	stmdane	ip, {r8, ip}
     e64:	00000d41 	andeq	r0, r0, r1, asr #26
     e68:	01260101 			; <UNDEFINED> instruction: 0x01260101
     e6c:	00000025 	andeq	r0, r0, r5, lsr #32
     e70:	a20e1101 	andge	r1, lr, #1073741824	; 0x40000000
     e74:	2700000e 	strcs	r0, [r0, -lr]
     e78:	000008aa 	andeq	r0, r0, sl, lsr #17
     e7c:	07472700 	strbeq	r2, [r7, -r0, lsl #14]
     e80:	27010000 	strcs	r0, [r1, -r0]
     e84:	00000a60 	andeq	r0, r0, r0, ror #20
     e88:	080a2702 	stmdaeq	sl, {r1, r8, r9, sl, sp}
     e8c:	27030000 	strcs	r0, [r3, -r0]
     e90:	00000737 	andeq	r0, r0, r7, lsr r7
     e94:	07512704 	ldrbeq	r2, [r1, -r4, lsl #14]
     e98:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
     e9c:	000007d5 	ldrdeq	r0, [r0], -r5
     ea0:	f503007f 			; <UNDEFINED> instruction: 0xf503007f
     ea4:	01000001 	tsteq	r0, r1
     ea8:	0e6a7a11 			; <UNDEFINED> instruction: 0x0e6a7a11
     eac:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
     eb0:	2d091301 	stccs	3, cr1, [r9, #-4]
     eb4:	0b00000f 	bleq	ef8 <main+0x10>
	cli_tim;
     eb8:	00000430 	andeq	r0, r0, r0, lsr r4
     ebc:	3f0b1401 	svccc	0x000b1401
     ec0:	00000000 	andeq	r0, r0, r0
	diag ("PicOS halted");
     ec4:	00036c0b 	andeq	r6, r3, fp, lsl #24
	mdelay (500);
     ec8:	0a150100 	beq	5412d0 <__ccfg+0x521328>
     ecc:	000005f3 	strdeq	r0, [r0], -r3
	setpowermode (2);
     ed0:	05f20b02 	ldrbeq	r0, [r2, #2818]!	; 0xb02
	__PCB = NULL;
     ed4:	16010000 	strne	r0, [r1], -r0
	release;
     ed8:	0005f30a 	andeq	pc, r5, sl, lsl #6
     edc:	5a0b0300 	bpl	2c1ae4 <__ccfg+0x2a1b3c>
     ee0:	01000007 	tsteq	r0, r7
     ee4:	05f30a17 	ldrbeq	r0, [r3, #2583]!	; 0xa17
int main (void) {
     ee8:	0b040000 	bleq	100ef0 <__ccfg+0xe0f48>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	000003f4 	strdeq	r0, [r0], -r4
     ef0:	f30a1801 	vsub.i8	d1, d10, d1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	05000005 	streq	r0, [r0, #-5]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef8:	0009980b 	andeq	r9, r9, fp, lsl #16
	system_init ();
     efc:	0a190100 	beq	641304 <__ccfg+0x62135c>
	tcv_init ();
     f00:	00000f2d 	andeq	r0, r0, sp, lsr #30
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	07da0b06 	ldrbeq	r0, [sl, r6, lsl #22]
     f08:	1a010000 	bne	40f10 <__ccfg+0x20f68>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	0005f30a 	andeq	pc, r5, sl, lsl #6
     f10:	930b1a00 	movwls	r1, #47616	; 0xba00
     f14:	01000005 	tsteq	r0, r5
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f18:	05f30a1b 	ldrbeq	r0, [r3, #2587]!	; 0xa1b
     f1c:	0b1b0000 	bleq	6c0f24 <__ccfg+0x6a0f7c>
	delay (16, 0);
     f20:	00000610 	andeq	r0, r0, r0, lsl r6
     f24:	f30a1c01 			; <UNDEFINED> instruction: 0xf30a1c01
     f28:	1c000005 	stcne	0, cr0, [r0], {5}
	__pi_release ();
     f2c:	05f30800 	ldrbeq	r0, [r3, #2048]!	; 0x800
     f30:	0f3d0000 	svceq	0x003d0000
     f34:	94090000 	strls	r0, [r9], #-0
     f38:	13000000 	movwne	r0, #0
     f3c:	007d0300 	rsbseq	r0, sp, r0, lsl #6
     f40:	1d010000 	stcne	0, cr0, [r1, #-0]
     f44:	000eae03 	andeq	sl, lr, r3, lsl #28
static void killev (__pi_pcb_t *pid) {
     f48:	01200a00 			; <UNDEFINED> instruction: 0x01200a00
	wfun = (aword)(pid->code);
     f4c:	0f7a091f 	svceq	0x007a091f
	for_all_tasks (i) {
     f50:	5d0b0000 	stcpl	0, cr0, [fp, #-0]
		for (j = 0; j < nevents (i); j++) {
     f54:	01000002 	tsteq	r0, r2
     f58:	097a0c20 	ldmdbeq	sl!, {r5, sl, fp}^
     f5c:	0b000000 	bleq	f64 <killev+0x1c>
			    || i->Events [j] . Event == wfun
     f60:	000005ac 	andeq	r0, r0, ip, lsr #11
		for (j = 0; j < nevents (i); j++) {
     f64:	f30a2101 	vrhadd.u8	d2, d10, d1
			if (i->Events [j] . Event == (aword)pid
     f68:	08000005 	stmdaeq	r0, {r0, r2}
     f6c:	0009cb0b 	andeq	ip, r9, fp, lsl #22
     f70:	0a220100 	beq	881378 <__ccfg+0x8613d0>
				wakeupev (i, j);
     f74:	00000f2d 	andeq	r0, r0, sp, lsr #30
     f78:	00030009 	andeq	r0, r3, r9
	for_all_tasks (i) {
     f7c:	01000000 	mrseq	r0, (UNDEF: 0)
}
     f80:	0f490323 	svceq	0x00490323
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	7a080000 	bvc	200f8c <__ccfg+0x1e0fe4>
static void qfree (aword *ch) {
     f88:	9600000f 	strls	r0, [r0], -pc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8c:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
	cc = (aword*)(mpools + MA_NP);
     f90:	00000094 	muleq	r0, r4, r0
	m_setnextp (ch, chunk);
     f94:	b9290027 	stmdblt	r9!, {r0, r1, r2, r5}
	m_setnextp (cc, ch);
     f98:	01000009 	tsteq	r0, r9
}
     f9c:	0f860825 	svceq	0x00860825
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa0:	05010000 	streq	r0, [r1, #-0]
     fa4:	00063003 	andeq	r3, r6, r3
     fa8:	00a22920 	adceq	r2, r2, r0, lsr #18
			m_setnextp (cc, m_nextp (chunk));
     fac:	27010000 	strcs	r0, [r1, -r0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb0:	0005f306 	andeq	pc, r5, r6, lsl #6
     fb4:	03050100 	movweq	r0, #20736	; 0x5100
     fb8:	20000628 	andcs	r0, r0, r8, lsr #12
     fbc:	000a2529 	andeq	r2, sl, r9, lsr #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	07280100 	streq	r0, [r8, -r0, lsl #2]!
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	0000003f 	andeq	r0, r0, pc, lsr r0
     fc8:	32030501 	andcc	r0, r3, #4194304	; 0x400000
     fcc:	2920000b 	stmdbcs	r0!, {r0, r1, r3}
			m_setnextp (cc, m_nextp (chunk));
     fd0:	0000043e 	andeq	r0, r0, lr, lsr r4
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	8d052a01 	vstrhi	s4, [r5, #-4]
     fd8:	01000000 	mrseq	r0, (UNDEF: 0)
     fdc:	0b340305 	bleq	d01bf8 <__ccfg+0xce1c50>
     fe0:	7d292000 	stcvc	0, cr2, [r9, #-0]
     fe4:	01000004 	tsteq	r0, r4
     fe8:	0ea20a2c 	vfmaeq.f32	s0, s4, s25
			if (m_size (chunk) >= m_size (ch))
     fec:	05010000 	streq	r0, [r1, #-0]
     ff0:	000b3003 	andeq	r3, fp, r3
     ff4:	66732a20 	ldrbtvs	r2, [r3], -r0, lsr #20
		chunk = m_nextp (chunk))
     ff8:	2e010064 	cdpcs	0, 0, cr0, cr1, cr4, {3}
     ffc:	00008d05 	andeq	r8, r0, r5, lsl #26
    1000:	03050100 	movweq	r0, #20736	; 0x5100
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1004:	20000000 	andcs	r0, r0, r0
	diag_wait (a);
    1008:	01db012b 	bicseq	r0, fp, fp, lsr #2
	diag_wchar (c, a);
    100c:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    1010:	013c0106 	teqeq	ip, r6, lsl #2
}
    1014:	04040000 	streq	r0, [r4], #-0
    1018:	9c010000 	stcls	0, cr0, [r1], {-0}
	syserror (ESTATE, "state");
    101c:	000011e3 	andeq	r1, r0, r3, ror #3
    1020:	0008c82c 	andeq	ip, r8, ip, lsr #16
    1024:	11680100 	cmnne	r8, r0, lsl #2
    1028:	000009aa 	andeq	r0, r0, sl, lsr #19
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	00000000 	andeq	r0, r0, r0
void utimer_add (address ut) {
    1030:	0002af2d 	andeq	sl, r2, sp, lsr #30
    1034:	17780100 	ldrbne	r0, [r8, -r0, lsl #2]!
		if (__pi_utims [i] == NULL)
    1038:	00000170 	andeq	r0, r0, r0, ror r1
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	0004c52d 	andeq	ip, r4, sp, lsr #10
    1040:	1a900100 	bne	fe401448 <_estack+0xde3fc448>
		syserror (ERESOURCE, "ut a");
    1044:	000001c2 	andeq	r0, r0, r2, asr #3
	__pi_utims [i] = ut;
    1048:	00055e2d 	andeq	r5, r5, sp, lsr #28
}
    104c:	16940100 	ldrne	r0, [r4], r0, lsl #2
    1050:	000001e4 	andeq	r0, r0, r4, ror #3
    1054:	00030f2d 	andeq	r0, r3, sp, lsr #30
	*t = v;
    1058:	19970100 	ldmibne	r7, {r8}
	TCI_RUN_AUXILIARY_TIMER;
    105c:	000001ec 	andeq	r0, r0, ip, ror #3
void update_n_wake (word min, Boolean force) {
    1060:	0002e82d 	andeq	lr, r2, sp, lsr #16
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	1bcb0100 	blne	ff2c146c <_estack+0xdf2bc46c>
    1068:	0000022e 	andeq	r0, r0, lr, lsr #4
    106c:	0003322d 	andeq	r3, r3, sp, lsr #4
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1070:	1bcd0100 	blne	ff341478 <_estack+0xdf33c478>
    1074:	00000236 	andeq	r0, r0, r6, lsr r2
    1078:	0000a92d 	andeq	sl, r0, sp, lsr #18
    107c:	1ad30100 	bne	ff4c1484 <_estack+0xdf4bc484>
    1080:	00000246 	andeq	r0, r0, r6, asr #4
    1084:	0001bf2d 	andeq	fp, r1, sp, lsr #30
    1088:	1ad60100 	bne	ff581490 <_estack+0xdf57c490>
    108c:	0000024e 	andeq	r0, r0, lr, asr #4
    1090:	00008a2d 	andeq	r8, r0, sp, lsr #20
    1094:	1ee00100 	cdpne	1, 14, cr0, cr0, cr0, {0}
    1098:	0000026e 	andeq	r0, r0, lr, ror #4
    109c:	0003d72d 	andeq	sp, r3, sp, lsr #14
    10a0:	1ce60100 	stfnee	f0, [r6]
		for_all_tasks (i) {
    10a4:	0000027e 	andeq	r0, r0, lr, ror r2
	__pi_mintk = znew + min;
    10a8:	0005b42d 	andeq	fp, r5, sp, lsr #8
    10ac:	20ea0100 	rsccs	r0, sl, r0, lsl #2
			if (!twaiting (i))
    10b0:	0000028c 	andeq	r0, r0, ip, lsl #5
    10b4:	0002d42d 	andeq	sp, r2, sp, lsr #8
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10b8:	1af10100 	bne	ffc414c0 <_estack+0xdfc3c4c0>
    10bc:	000002a6 	andeq	r0, r0, r6, lsr #5
    10c0:	0009822d 	andeq	r8, r9, sp, lsr #4
    10c4:	1cfd0100 	ldfnee	f0, [sp]
    10c8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10cc:	0004922e 	andeq	r9, r4, lr, lsr #4
    10d0:	01020100 	mrseq	r0, (UNDEF: 18)
    10d4:	0002e41e 	andeq	lr, r2, lr, lsl r4
    10d8:	06312e00 	ldrteq	r2, [r1], -r0, lsl #28
    10dc:	06010000 	streq	r0, [r1], -r0
    10e0:	02f22401 	rscseq	r2, r2, #16777216	; 0x1000000
    10e4:	182e0000 	stmdane	lr!, {}	; <UNPREDICTABLE>
				wakeuptm (i);
    10e8:	01000000 	mrseq	r0, (UNDEF: 0)
    10ec:	fa210109 	blx	841518 <__ccfg+0x821570>
		for_all_tasks (i) {
    10f0:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
				d = i->Timer - znew;
    10f4:	00000045 	andeq	r0, r0, r5, asr #32
    10f8:	22011001 	andcs	r1, r1, #1
    10fc:	00000314 	andeq	r0, r0, r4, lsl r3
		if ((word)(__pi_mintk - znew) < min) 
    1100:	0002102e 	andeq	r1, r2, lr, lsr #32
    1104:	01130100 	tsteq	r3, r0, lsl #2
    1108:	00031c1f 	andeq	r1, r3, pc, lsl ip
	__pi_old = znew;
    110c:	056e2e00 	strbeq	r2, [lr, #-3584]!	; 0xfffff200
}
    1110:	1b010000 	blne	41118 <__ccfg+0x21170>
	TCI_RUN_DELAY_TIMER;
    1114:	033e1f01 	teqeq	lr, #1, 30
}
    1118:	702f0000 	eorvc	r0, pc, r0
    111c:	a2000001 	andge	r0, r0, #1
    1120:	30000003 	andcc	r0, r0, r3
    1124:	00000908 	andeq	r0, r0, r8, lsl #18
    1128:	ed126a01 	vldr	s12, [r2, #-4]
void proceed (word state) {
    112c:	31000005 	tstcc	r0, r5
	prcdstate (__pi_curr, state);
    1130:	000003f4 	strdeq	r0, [r0], -r4
    1134:	f3117401 	vshl.u16	d7, d1, d1
	release;
    1138:	05000005 	streq	r0, [r0, #-5]
    113c:	00054403 	andeq	r4, r5, r3, lsl #8
void __pi_wait (aword event, word state) {
    1140:	07a93120 	streq	r3, [r9, r0, lsr #2]!
	sint j = nevents (__pi_curr);
    1144:	76010000 	strvc	r0, [r1], -r0
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	0011e315 	andseq	lr, r1, r5, lsl r3
    114c:	40030500 	andmi	r0, r3, r0, lsl #10
    1150:	32200005 	eorcc	r0, r0, #5
		syserror (ENEVENTS, "sw");
    1154:	00000038 	andeq	r0, r0, r8, lsr r0
    1158:	0000116c 	andeq	r1, r0, ip, ror #2
	setestate (__pi_curr->Events [j], state, event);
    115c:	00042931 	andeq	r2, r4, r1, lsr r9
	incwait (__pi_curr);
    1160:	0e980100 	fmleqe	f0, f0, f0
	setestate (__pi_curr->Events [j], state, event);
    1164:	000005f3 	strdeq	r0, [r0], -r3
}
    1168:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    116c:	00031c33 	andeq	r1, r3, r3, lsr ip
    1170:	00033e00 	andeq	r3, r3, r0, lsl #28
void __pi_trigger (aword event) {
    1174:	00118a00 	andseq	r8, r1, r0, lsl #20
	for_all_tasks (i) {
    1178:	091a3400 	ldmdbeq	sl, {sl, ip, sp}
		for (j = 0; j < nevents (i); j++) {
    117c:	14010000 	strne	r0, [r1], #-0
    1180:	05f30e01 	ldrbeq	r0, [r3, #3585]!	; 0xe01
    1184:	91020000 	mrsls	r0, (UNDEF: 2)
    1188:	1235006f 	eorsne	r0, r5, #111	; 0x6f
			if (i->Events [j] . Event == event) {
    118c:	5a000012 	bpl	11dc <delay+0x10>
    1190:	62000002 	andvs	r0, r0, #2
    1194:	01000002 	tsteq	r0, r2
				wakeupev (i, j);
    1198:	11a80ed9 	ldrdne	r0, [r8, r9]!
    119c:	25360000 	ldrcs	r0, [r6, #-0]!
	for_all_tasks (i) {
    11a0:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
}
    11a4:	00000000 	andeq	r0, r0, r0
aword __pi_join (aword pid, word st) {
    11a8:	00121235 	andseq	r1, r2, r5, lsr r2
	for_all_tasks (i) {
    11ac:	00029800 	andeq	r9, r2, r0, lsl #16
    11b0:	0002a000 	andeq	sl, r2, r0
	return 0;
    11b4:	0ded0100 	stfeqe	f0, [sp]
		if ((aword)i == pid) {
    11b8:	000011c6 	andeq	r1, r0, r6, asr #3
			__pi_wait (pid, st);
    11bc:	00122536 	andseq	r2, r2, r6, lsr r5
}
    11c0:	00003500 	andeq	r3, r0, r0, lsl #10
	for_all_tasks (i) {
    11c4:	12370000 	eorsne	r0, r7, #0
    11c8:	06000012 			; <UNDEFINED> instruction: 0x06000012
void delay (word d, word state) {
    11cc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
	settstate (__pi_curr, state);
    11d0:	01000003 	tsteq	r0, r3
    11d4:	360d010c 	strcc	r0, [sp], -ip, lsl #2
    11d8:	00001225 	andeq	r1, r0, r5, lsr #4
    11dc:	0000004c 	andeq	r0, r0, ip, asr #32
	update_n_wake (d, YES);
    11e0:	11000000 	mrsne	r0, (UNDEF: 0)
    11e4:	000f3d04 	andeq	r3, pc, r4, lsl #26
	__pi_curr->Timer = __pi_old + d;
    11e8:	9a013800 	bls	4f1f0 <__ccfg+0x2f248>
    11ec:	01000002 	tsteq	r0, r2
	inctimer (__pi_curr);
    11f0:	05f3065f 	ldrbeq	r0, [r3, #1631]!	; 0x65f
    11f4:	01240000 			; <UNDEFINED> instruction: 0x01240000
    11f8:	013c0000 	teqeq	ip, r0
}
    11fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1200:	00001212 	andeq	r1, r0, r2, lsl r2
	if (fun == NULL)
    1204:	01007439 	tsteq	r0, r9, lsr r4
		return (int) __pi_curr;
    1208:	097a0b60 	ldmdbeq	sl!, {r5, r6, r8, r9, fp}^
    120c:	91020000 	mrsls	r0, (UNDEF: 2)
	for_all_tasks (i)
    1210:	013a0070 	teqeq	sl, r0, ror r0
}
    1214:	00000247 	andeq	r0, r0, r7, asr #4
		if (i->code == fun)
    1218:	01095101 	tsteq	r9, r1, lsl #2
	for_all_tasks (i)
    121c:	0000099e 	muleq	r0, lr, r9
    1220:	00123201 	andseq	r3, r2, r1, lsl #4
    1224:	4e193b00 	vnmlsmi.f64	d3, d9, d0
int __pi_strlen (const char *s) {
    1228:	51010000 	mrspl	r0, (UNDEF: 1)
	for (i = 0; *(s+i) != '\0'; i++);
    122c:	0009c01c 	andeq	ip, r9, ip, lsl r0
}
    1230:	013c0000 	teqeq	ip, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1234:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
	while (n--)
    1238:	01063201 	tsteq	r6, r1, lsl #4
    123c:	00128a01 	andseq	r8, r2, r1, lsl #20
		*dest++ = *src++;
    1240:	08c83b00 	stmiaeq	r8, {r8, r9, fp, ip, sp}^
    1244:	32010000 	andcc	r0, r1, #0
    1248:	0009aa18 	andeq	sl, r9, r8, lsl sl
	while (n--)
    124c:	07a93000 	streq	r3, [r9, r0]!
}
    1250:	32010000 	andcc	r0, r1, #0
		*dest++ = c;
    1254:	0011e32d 	andseq	lr, r1, sp, lsr #6
void adddevfunc (devreqfun_t rf, int loc) {
    1258:	056e2d00 	strbeq	r2, [lr, #-3328]!	; 0xfffff300
		syserror (EREQPAR, "addv");
    125c:	33010000 	movwcc	r0, #4096	; 0x1000
		syserror (ERESOURCE, "addv");
    1260:	0000da1d 	andeq	sp, r0, sp, lsl sl
	if (ioreq [loc] != NULL)
    1264:	06d52d00 	ldrbeq	r2, [r5], r0, lsl #26
    1268:	43010000 	movwmi	r0, #4096	; 0x1000
		syserror (ERESOURCE, "addv");
    126c:	00010623 	andeq	r0, r1, r3, lsr #12
	ioreq [loc] = rf;
    1270:	8d303d00 	ldchi	13, cr3, [r0, #-0]
}
    1274:	01000004 	tsteq	r0, r4
    1278:	09ee1135 	stmibeq	lr!, {r0, r2, r4, r5, r8, ip}^
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	703e0000 	eorsvc	r0, lr, r0
    1280:	103a0100 	eorsne	r0, sl, r0, lsl #2
    1284:	0000128a 	andeq	r1, r0, sl, lsl #5
    1288:	04110000 	ldreq	r0, [r1], #-0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128c:	000009c0 	andeq	r0, r0, r0, asr #19
    1290:	0012323f 	andseq	r3, r2, pc, lsr r2
    1294:	0000c800 	andeq	ip, r0, r0, lsl #16
		syserror (ENODEVICE, "io");
    1298:	00012400 	andeq	r2, r1, r0, lsl #8
    129c:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
	if (len == 0)
    12a0:	36000013 			; <UNDEFINED> instruction: 0x36000013
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	00001241 	andeq	r1, r0, r1, asr #4
    12a8:	00000063 	andeq	r0, r0, r3, rrx
	if (ret >= 0)
    12ac:	00124d40 	andseq	r4, r2, r0, asr #26
	if (ret == -1) {
    12b0:	00008100 	andeq	r8, r0, r0, lsl #2
    12b4:	12714100 	rsbsne	r4, r1, #0, 2
		if (retry == WNONE)
    12b8:	00000000 	andeq	r0, r0, r0
		iowait (dev, operation, retry);
    12bc:	12d10000 	sbcsne	r0, r1, #0
    12c0:	72400000 	subvc	r0, r0, #0
    12c4:	98000012 	stmdals	r0, {r1, r4}
			release;
    12c8:	42000000 	andmi	r0, r0, #0
	if (ret == -2) {
    12cc:	0000127e 	andeq	r1, r0, lr, ror r2
		if (retry != WNONE) {
    12d0:	12324300 	eorsne	r4, r2, #0, 6
    12d4:	01060000 	mrseq	r0, (UNDEF: 6)
			iowait (dev, operation, retry);
    12d8:	00200000 	eoreq	r0, r0, r0
    12dc:	32010000 	andcc	r0, r1, #0
			(ioreq [dev]) (NONE, buf, len);
    12e0:	12413606 	subne	r3, r1, #6291456	; 0x600000
    12e4:	00ab0000 	adceq	r0, fp, r0
    12e8:	20440000 	subcs	r0, r4, r0
		(ioreq [dev]) (NONE, buf, len);
    12ec:	42000000 	andmi	r0, r0, #0
    12f0:	0000124d 	andeq	r1, r0, sp, asr #4
    12f4:	00125945 	andseq	r5, r2, r5, asr #18
}
    12f8:	12654600 	rsbne	r4, r5, #0, 12
	if (retry != WNONE) {
    12fc:	01060000 	mrseq	r0, (UNDEF: 6)
		delay (-ret - 2, retry);
    1300:	00000000 	andeq	r0, r0, r0
    1304:	12124700 	andsne	r4, r2, #0, 14
	...
		release;
    1310:	9c010000 	stcls	0, cr0, [r1], {-0}
    1314:	00122536 	andseq	r2, r2, r6, lsr r5
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1318:	0000be00 	andeq	fp, r0, r0, lsl #28
    131c:	8c000000 	stchi	0, cr0, [r0], {-0}
    1320:	03000014 	movweq	r0, #20
    1324:	0003d800 	andeq	sp, r3, r0, lsl #16
    1328:	bd010400 	cfstrslt	mvf0, [r1, #-0]
		syserror (ERESOURCE, "mal1");
    132c:	0c000000 	stceq	0, cr0, [r0], {-0}
    1330:	00000ee5 	andeq	r0, r0, r5, ror #29
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1334:	00000664 	andeq	r0, r0, r4, ror #12
    1338:	000004e0 	andeq	r0, r0, r0, ror #9
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133c:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1340:	00000524 	andeq	r0, r0, r4, lsr #10
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1344:	da060102 	ble	181754 <__ccfg+0x1617ac>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1348:	02000008 	andeq	r0, r0, #8
    134c:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
}
    1350:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    1354:	10000026 	andne	r0, r0, r6, lsr #32
    1358:	003f1828 	eorseq	r1, pc, r8, lsr #16
    135c:	04020000 	streq	r0, [r2], #-0
    1360:	0005e905 	andeq	lr, r5, r5, lsl #18
    1364:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
void __pi_free (aword *ch) {
    1368:	000005e4 	andeq	r0, r0, r4, ror #11
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    136c:	00083103 	andeq	r3, r8, r3, lsl #2
    1370:	182e1000 	stmdane	lr!, {ip}
		syserror (EMALLOC, "malg");
    1374:	00000059 	andeq	r0, r0, r9, asr r0
    1378:	d8080102 	stmdale	r8, {r1, r8}
	mcfree [MA_NP] += m_size (ch);
    137c:	03000008 	movweq	r0, #8
		m_size (ch) ^= MALLOC_UMASK;
    1380:	000003ce 	andeq	r0, r0, lr, asr #7
    1384:	6c193110 	ldfvss	f3, [r9], {16}
	mcfree [MA_NP] += m_size (ch);
    1388:	02000000 	andeq	r0, r0, #0
	QFREE;
    138c:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
	if (mevent [MA_NP] . nwait) {
    1390:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    1394:	10000008 	andne	r0, r0, r8
		trigger ((aword)(&(mevent [MA_NP])));
    1398:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
		mevent [MA_NP] . nwait --;
    139c:	04020000 	streq	r0, [r2], #-0
}
    13a0:	00039307 	andeq	r9, r3, r7, lsl #6
    13a4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    13a8:	0000038e 	andeq	r0, r0, lr, lsl #7
    13ac:	69050404 	stmdbvs	r5, {r2, sl}
void kill (aword pid) {
    13b0:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
		pid = (aword) __pi_curr;
    13b4:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
	j = NULL;
    13b8:	2f030000 	svccs	0x00030000
	for_all_tasks (i) {
    13bc:	11000007 	tstne	r0, r7
	syserror (EREQPAR, "kpi");
    13c0:	004d1226 	subeq	r1, sp, r6, lsr #4
    13c4:	ca030000 	bgt	c13cc <__ccfg+0xa1424>
		if ((aword)i == pid) {
    13c8:	11000023 	tstne	r0, r3, lsr #32
    13cc:	00601227 	rsbeq	r1, r0, r7, lsr #4
				__PCB = i->Next;
    13d0:	a7050000 	strge	r0, [r5, -r0]
			killev (i);
    13d4:	06000000 	streq	r0, [r0], -r0
			ufree (i);
    13d8:	000000a7 	andeq	r0, r0, r7, lsr #1
			if (i == __pi_curr)
    13dc:	000eb703 	andeq	fp, lr, r3, lsl #14
    13e0:	12281100 	eorne	r1, r8, #0, 2
				release;
    13e4:	00000033 	andeq	r0, r0, r3, lsr r0
				j->Next = i->Next;
    13e8:	0018e303 	andseq	lr, r8, r3, lsl #6
    13ec:	122b1100 	eorne	r1, fp, #0, 2
    13f0:	0000004d 	andeq	r0, r0, sp, asr #32
}
    13f4:	0000c906 	andeq	ip, r0, r6, lsl #18
    13f8:	00c90500 	sbceq	r0, r9, r0, lsl #10
    13fc:	1b030000 	blne	c1404 <__ccfg+0xa145c>
	if (size < 8)
    1400:	11000024 	tstne	r0, r4, lsr #32
		_size = 2;
    1404:	0073122c 	rsbseq	r1, r3, ip, lsr #4
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1408:	df050000 	svcle	0x00050000
		_size = (((aword)size) + 3) >> 2;
    140c:	03000000 	movweq	r0, #0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1410:	000004f7 	strdeq	r0, [r0], -r7
		_size = (((aword)size) + 3) >> 2;
    1414:	73122d11 	tstvc	r2, #1088	; 0x440
		if (mevent [MA_NP] . nfail != 255)
    1418:	03000000 	movweq	r0, #0
    141c:	00000871 	andeq	r0, r0, r1, ror r8
			mevent [MA_NP] . nfail ++;
    1420:	08102e11 	ldmdaeq	r0, {r0, r4, r9, sl, fp, sp}
		mnfree [MA_NP] = 0;
    1424:	07000001 	streq	r0, [r0, -r1]
    1428:	0000a704 	andeq	sl, r0, r4, lsl #14
		if (m_magic (chunk) != MALLOC_MAGIC)
    142c:	11080800 	tstne	r8, r0, lsl #16
    1430:	019c0932 	orrseq	r0, ip, r2, lsr r9
			syserror (EMALLOC, "malc");
    1434:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    1438:	11000000 	mrsne	r0, (UNDEF: 0)
		if (m_size (chunk) >= _size)
    143c:	00c90734 	sbceq	r0, r9, r4, lsr r7
    1440:	01010000 	mrseq	r0, (UNDEF: 1)
		chunk = m_nextp (chunk)) {
    1444:	fd090007 	stc2	0, cr0, [r9, #-28]	; 0xffffffe4
		m_setnextp (cc, m_nextp (chunk));
    1448:	11000004 	tstne	r0, r4
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144c:	00c90335 	sbceq	r0, r9, r5, lsr r3
    1450:	01010000 	mrseq	r0, (UNDEF: 1)
			m_size (chunk) = _size;
    1454:	37090006 	strcc	r0, [r9, -r6]
			cc = chunk + _size + m_hdrlen;
    1458:	11000002 	tstne	r0, r2
    145c:	00c90336 	sbceq	r0, r9, r6, lsr r3
			m_size (cc) = waste - m_hdrlen;
    1460:	01010000 	mrseq	r0, (UNDEF: 1)
			QFREE;
    1464:	37090005 	strcc	r0, [r9, -r5]
		mevent [MA_NP] . nfail = 0;
    1468:	11000005 	tstne	r0, r5
		mcfree [MA_NP] -= m_size (chunk);
    146c:	00c90337 	sbceq	r0, r9, r7, lsr r3
    1470:	01010000 	mrseq	r0, (UNDEF: 1)
    1474:	c0090004 	andgt	r0, r9, r4
    1478:	11000007 	tstne	r0, r7
		m_size (chunk) |= MALLOC_UMASK;
    147c:	00c90338 	sbceq	r0, r9, r8, lsr r3
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1480:	04010000 	streq	r0, [r1], #-0
		m_size (chunk) |= MALLOC_UMASK;
    1484:	040a0000 	streq	r0, [sl], #-0
			mnfree [MA_NP] = mcfree [MA_NP];
    1488:	11000005 	tstne	r0, r5
}
    148c:	00c9073a 	sbceq	r0, r9, sl, lsr r7
    1490:	0a010000 	beq	41498 <__ccfg+0x214f0>
    1494:	000006ce 	andeq	r0, r0, lr, asr #13
    1498:	c9033c11 	stmdbgt	r3, {r0, r4, sl, fp, ip, sp}
    149c:	02000000 	andeq	r0, r0, #0
    14a0:	000a6e0a 	andeq	r6, sl, sl, lsl #28
    14a4:	033d1100 	teqeq	sp, #0, 2
aword __pi_fork (fsmcode func, aword data) {
    14a8:	000000c9 	andeq	r0, r0, r9, asr #1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14ac:	07030a03 	streq	r0, [r3, -r3, lsl #20]
    14b0:	3f110000 	svccc	0x00110000
    14b4:	0000df08 	andeq	sp, r0, r8, lsl #30
		if ((j = __PCB) == NULL)
    14b8:	03000400 	movweq	r0, #1024	; 0x400
	i->Next = NULL;
    14bc:	00000285 	andeq	r0, r0, r5, lsl #5
	i->data = data;
    14c0:	0e034111 	mcreq	1, 0, r4, cr3, cr1, {0}
		if ((j = __PCB) == NULL)
    14c4:	06000001 	streq	r0, [r0], -r1
}
    14c8:	0000019c 	muleq	r0, ip, r1
			for (; j->Next != NULL; j = j->Next);
    14cc:	00053e0b 	andeq	r3, r5, fp, lsl #28
    14d0:	1a431100 	bne	10c58d8 <__ccfg+0x10a5930>
	return (aword) i;
    14d4:	000001a8 	andeq	r0, r0, r8, lsr #3
    14d8:	b10b0101 	tstlt	fp, r1, lsl #2
	if (mevent [MA_NP] . nwait != 255)
    14dc:	11000001 	tstne	r0, r1
    14e0:	01c90e45 	biceq	r0, r9, r5, asr #28
    14e4:	01010000 	mrseq	r0, (UNDEF: 1)
		mevent [MA_NP] . nwait ++;
    14e8:	01cf0407 	biceq	r0, pc, r7, lsl #8
	wait ((aword)(&(mevent [MA_NP])), state);
    14ec:	01020000 	mrseq	r0, (UNDEF: 2)
    14f0:	0008e108 	andeq	lr, r8, r8, lsl #2
void diag (const char *mess, ...) {
    14f4:	01cf0500 	biceq	r0, pc, r0, lsl #10
    14f8:	8e0b0000 	cdphi	0, 0, cr0, cr11, cr0, {0}
    14fc:	11000002 	tstne	r0, r2
	diag_disable_int (a, is);
    1500:	01c91e45 	biceq	r1, r9, r5, asr #28
    1504:	01010000 	mrseq	r0, (UNDEF: 1)
    1508:	8f120808 	svchi	0x00120808
				d = (bc == 16) ? 10000 : 1000000000;
    150c:	00021a09 	andeq	r1, r2, r9, lsl #20
	diag_disable_int (a, is);
    1510:	06010a00 	streq	r0, [r1], -r0, lsl #20
	while (*mess != '\0') {
    1514:	90120000 	andsls	r0, r2, r0
	dgout ('\r');
    1518:	0000730b 	andeq	r7, r0, fp, lsl #6
	dgout ('\n');
    151c:	a00a0000 	andge	r0, sl, r0
    1520:	1200000b 	andne	r0, r0, #11
    1524:	00a70891 	umlaleq	r0, r7, r1, r8
	diag_wait (a);
    1528:	0a040000 	beq	101530 <__ccfg+0xe1588>
	diag_enable_int (a, is);
    152c:	000001ea 	andeq	r0, r0, sl, ror #3
    1530:	d5109212 	ldrle	r9, [r0, #-530]	; 0xfffffdee
}
    1534:	06000000 	streq	r0, [r0], -r0
    1538:	09410300 	stmdbeq	r1, {r8, r9}^
    153c:	93120000 	tstls	r2, #0
		if (*mess == '%') {
    1540:	0001e903 	andeq	lr, r1, r3, lsl #18
    1544:	021a0500 	andseq	r0, sl, #0, 10
			if (*mess == 'l') {
    1548:	1a0c0000 	bne	301550 <__ccfg+0x2e15a8>
    154c:	36000002 	strcc	r0, [r0], -r2
				mess++;
    1550:	0d000002 	stceq	0, cr0, [r0, #-8]
				val = va_arg (ap, lword);
    1554:	070f0b00 	streq	r0, [pc, -r0, lsl #22]
				bc = 32;
    1558:	99120000 	ldmdbls	r2, {}	; <UNPREDICTABLE>
				bc = 16;
    155c:	00022b0f 	andeq	r2, r2, pc, lsl #22
			switch (*mess) {
    1560:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1564:	0000da04 	andeq	sp, r0, r4, lsl #20
    1568:	13010800 	movwne	r0, #6144	; 0x1800
				dgout ('%');
    156c:	02740991 	rsbseq	r0, r4, #2375680	; 0x244000
    1570:	0a090000 	beq	241578 <__ccfg+0x2215d0>
				dgout (*mess);
    1574:	13000007 	movwne	r0, #7
    1578:	00c90793 	smulleq	r0, r9, r3, r7
			switch (*mess) {
    157c:	07010000 	streq	r0, [r1, -r0]
					v = __pi_hex_enc_table [
    1580:	78090001 	stmdavc	r9, {r0}
					i += 4;
    1584:	13000004 	movwne	r0, #4
					(val >> (bc - i)) & 0xf];
    1588:	00c90394 	smulleq	r0, r9, r4, r3
    158c:	01010000 	mrseq	r0, (UNDEF: 1)
					dgout (v);
    1590:	03000000 	movweq	r0, #0
    1594:	000007cc 	andeq	r0, r0, ip, asr #15
				while (i < bc) {
    1598:	4a039613 	bmi	e6dec <__ccfg+0xc6e44>
			mess++;
    159c:	05000002 	streq	r0, [r0, #-2]
					d /= 10;
    15a0:	00000274 	andeq	r0, r0, r4, ror r2
				if ((val >> (bc - 1)) & 1) {
    15a4:	0002800c 	andeq	r8, r2, ip
    15a8:	00029000 	andeq	r9, r2, r0
					dgout ('-');
    15ac:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    15b0:	00000285 	andeq	r0, r0, r5, lsl #5
						val |= 0xffff0000;
    15b4:	0003470b 	andeq	r4, r3, fp, lsl #14
    15b8:	179c1300 	ldrne	r1, [ip, r0, lsl #6]
    15bc:	00000290 	muleq	r0, r0, r2
				d = (bc == 16) ? 10000 : 1000000000;
    15c0:	b30c0101 	movwlt	r0, #49409	; 0xc101
    15c4:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    15c8:	0d000002 	stceq	0, cr0, [r0, #-8]
					v = (word) (val / d);
    15cc:	02a30500 	adceq	r0, r3, #0, 10
					if (v || d == 1) break;
    15d0:	b70b0000 	strlt	r0, [fp, -r0]
    15d4:	14000004 	strne	r0, [r0], #-4
					d /= 10;
    15d8:	02ae1306 	adceq	r1, lr, #402653184	; 0x18000000
				d = (bc == 16) ? 10000 : 1000000000;
    15dc:	01010000 	mrseq	r0, (UNDEF: 1)
					dgout (v + '0');
    15e0:	0006b00b 	andeq	fp, r6, fp
    15e4:	0ec31200 	cdpeq	2, 12, cr1, cr3, cr0, {0}
    15e8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
					d /= 10;
    15ec:	fa0e0101 	blx	3819f8 <__ccfg+0x361a50>
					val = val - (v * d);
    15f0:	15000008 	strne	r0, [r0, #-8]
					if (d == 0) break;
    15f4:	dc10016e 	ldfles	f0, [r0], {110}	; 0x6e
					v = (word) (val / d);
    15f8:	07000002 	streq	r0, [r0, -r2]
    15fc:	0002e204 	andeq	lr, r2, r4, lsl #4
				if (bc == 16)
    1600:	ee010f00 	cdp	15, 0, cr0, cr1, cr0, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    1604:	10000002 	andne	r0, r0, r2
					val &= 0xffff;
    1608:	000000a7 	andeq	r0, r0, r7, lsr #1
					dgout (*s);
    160c:	01d60c00 	bicseq	r0, r6, r0, lsl #24
					s++;
    1610:	02f90000 	rscseq	r0, r9, #0
				while (*s != '\0') {
    1614:	000d0000 	andeq	r0, sp, r0
    1618:	0002ee05 	andeq	lr, r2, r5, lsl #28
			dgout (*mess++);
    161c:	07631100 	strbeq	r1, [r3, -r0, lsl #2]!
    1620:	7f150000 	svcvc	0x00150000
    1624:	02f91601 	rscseq	r1, r9, #1048576	; 0x100000
    1628:	01010000 	mrseq	r0, (UNDEF: 1)
    162c:	00032a11 	andeq	r2, r3, r1, lsl sl
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1630:	01821500 	orreq	r1, r2, r0, lsl #10
    1634:	0000eb14 	andeq	lr, r0, r4, lsl fp
    1638:	11010100 	mrsne	r0, (UNDEF: 17)
    163c:	00000307 	andeq	r0, r0, r7, lsl #6
	^ entropy
    1640:	0e02d815 	mcreq	8, 0, sp, cr2, cr5, {0}
}
    1644:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1648:	08120101 	ldmdaeq	r2, {r0, r8}
    164c:	09030315 	stmdbeq	r3, {r0, r2, r4, r8, r9}
    1650:	00000352 	andeq	r0, r0, r2, asr r3
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1654:	00374e13 	eorseq	r4, r7, r3, lsl lr
	word cs = size + hblenb;
    1658:	03071500 	movweq	r1, #29952	; 0x7500
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165c:	0000a707 	andeq	sl, r0, r7, lsl #14
    1660:	f8130000 			; <UNDEFINED> instruction: 0xf8130000
	p -> length = size;
    1664:	1500000a 	strne	r0, [r0, #-10]
}
    1668:	f0080308 			; <UNDEFINED> instruction: 0xf0080308
	if (p->attributes.b.queued) {
    166c:	04000000 	streq	r0, [r0], #-0
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1670:	03bf0e00 			; <UNDEFINED> instruction: 0x03bf0e00
    1674:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1678:	032b0303 			; <UNDEFINED> instruction: 0x032b0303
		p->attributes.b.queued = 0;
    167c:	33140000 	tstcc	r4, #0
    1680:	30000000 	andcc	r0, r0, r0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1684:	08030b15 	stmdaeq	r3, {r0, r2, r4, r8, r9, fp}
	deq (p);	// Remove from queue
    1688:	000003c2 	andeq	r0, r0, r2, asr #7
}
    168c:	0019f913 	andseq	pc, r9, r3, lsl r9	; <UNPREDICTABLE>
	tfree ((address)p);
    1690:	03141500 	tsteq	r4, #0, 10
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1694:	0000a708 	andeq	sl, r0, r8, lsl #14
    1698:	a4130000 	ldrge	r0, [r3], #-0
    169c:	15000008 	strne	r0, [r0, #-8]
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a0:	a7080315 	smladge	r8, r5, r3, r0
    16a4:	02000000 	andeq	r0, r0, #0
	if (q_empty (q))
    16a8:	0048be13 	subeq	fp, r8, r3, lsl lr
    16ac:	03161500 	tsteq	r6, #0, 10
		trigger (q);
    16b0:	0002cf0b 	andeq	ip, r2, fp, lsl #30
	if (p->attributes.b.urgent) {
    16b4:	21130400 	tstcs	r3, r0, lsl #8
		p->u.bqueue.next = q->next;
    16b8:	15000043 	strne	r0, [r0, #-67]	; 0xffffffbd
		p->u.bqueue.prev = q;
    16bc:	f0090317 			; <UNDEFINED> instruction: 0xf0090317
		q->next->prev = (qitem_t*) p;
    16c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	p->attributes.b.queued = 1;
    16c4:	00000713 	andeq	r0, r0, r3, lsl r7
    16c8:	03181500 	tsteq	r8, #0, 10
}
    16cc:	0003c20f 	andeq	ip, r3, pc, lsl #4
		p->u.bqueue.prev = q->prev;
    16d0:	22130c00 	andscs	r0, r3, #0, 24
		q->prev->next = (qitem_t*) p;
    16d4:	15000007 	strne	r0, [r0, #-7]
		q->prev = (qitem_t*) p;
    16d8:	d2150319 	andsle	r0, r5, #1677721600	; 0x64000000
    16dc:	2c000003 	stccs	0, cr0, [r0], {3}
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e0:	03520c00 	cmpeq	r2, #0, 24
	deq (p);	// Soft dequeue, timer and hook left intact
    16e4:	03d20000 	bicseq	r0, r2, #0
	switch (dv) {
    16e8:	94150000 	ldrls	r0, [r5], #-0
    16ec:	03000000 	movweq	r0, #0
    16f0:	5f040700 	svcpl	0x00040700
    16f4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
			p->attributes.b.urgent = 1;
    16f8:	00000899 	muleq	r0, r9, r8
    16fc:	1b031c15 	blne	c8758 <__ccfg+0xa87b0>
			verify_ses (p, "dispose ses");
    1700:	0000035f 	andeq	r0, r0, pc, asr r3
    1704:	00087911 	andeq	r7, r8, r1, lsl r9
    1708:	031e1500 	tsteq	lr, #0, 10
    170c:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
    1710:	07010100 	streq	r0, [r1, -r0, lsl #2]
			verify_phy (p, "dispose phy");
    1714:	0003d804 	andeq	sp, r3, r4, lsl #16
    1718:	054a0b00 	strbeq	r0, [sl, #-2816]	; 0xfffff500
}
    171c:	1d160000 	ldcne	0, cr0, [r6, #-0]
			enq (oqueues [p->attributes.b.phys], p);
    1720:	0000a713 	andeq	sl, r0, r3, lsl r7
			p->attributes.b.urgent = 1;
    1724:	0b010100 	bleq	41b2c <__ccfg+0x21b84>
    1728:	0000023e 	andeq	r0, r0, lr, lsr r2
			verify_phy (p, "dispose phy");
    172c:	b81a1e16 	ldmdalt	sl, {r1, r2, r4, r9, sl, fp, ip}
    1730:	01000000 	mrseq	r0, (UNDEF: 0)
    1734:	08e60b01 	stmiaeq	r6!, {r0, r8, r9, fp}^
    1738:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
    173c:	0000b824 	andeq	fp, r0, r4, lsr #16
    1740:	0b010100 	bleq	41b48 <__ccfg+0x21ba0>
			enq (oqueues [p->attributes.b.phys], p);
    1744:	00000902 	andeq	r0, r0, r2, lsl #18
    1748:	f4142216 			; <UNDEFINED> instruction: 0xf4142216
}
    174c:	01000003 	tsteq	r0, r3
			rlp (p);
    1750:	0adc0301 	beq	ff70235c <_estack+0xdf6fd35c>
}
    1754:	43160000 	tstmi	r6, #0
    1758:	00043e10 	andeq	r3, r4, r0, lsl lr
    175c:	44040700 	strmi	r0, [r4], #-1792	; 0xfffff900
    1760:	0f000004 	svceq	0x00000004
    1764:	00045001 	andeq	r5, r4, r1
    1768:	008d1000 	addeq	r1, sp, r0
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    176c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	if (b->attributes.b.outgoing) {
    1770:	09461608 	stmdbeq	r6, {r3, r9, sl, ip}^
	b = header (p);
    1774:	00000474 	andeq	r0, r0, r4, ror r4
	if (b->attributes.b.outgoing) {
    1778:	0010390a 	andseq	r3, r0, sl, lsl #18
		verify_ses (b, "tcv02");
    177c:	0f4a1600 	svceq	0x004a1600
    1780:	00000432 	andeq	r0, r0, r2, lsr r4
    1784:	0d340a00 	vldmdbeq	r4!, {s0-s-1}
    1788:	4b160000 	blmi	581790 <__ccfg+0x5617e8>
    178c:	00008d07 	andeq	r8, r0, r7, lsl #26
		verify_plg (b, tcv_out, "tcv03");
    1790:	03000400 	movweq	r0, #1024	; 0x400
    1794:	00000b62 	andeq	r0, r0, r2, ror #22
    1798:	50034c16 	andpl	r4, r3, r6, lsl ip
    179c:	05000004 	streq	r0, [r0, #-4]
    17a0:	00000474 	andeq	r0, r0, r4, ror r4
    17a4:	0000fc0c 	andeq	pc, r0, ip, lsl #24
    17a8:	00049500 	andeq	r9, r4, r0, lsl #10
    17ac:	00941500 	addseq	r1, r4, r0, lsl #10
    17b0:	00030000 	andeq	r0, r3, r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b4:	000eac0b 	andeq	sl, lr, fp, lsl #24
}
    17b8:	120d0100 	andne	r0, sp, #0, 2
		dispose (b, plugins [b->attributes.b.plugin] ->
    17bc:	00000485 	andeq	r0, r0, r5, lsl #9
		rlp (b);
    17c0:	800c0101 	andhi	r0, ip, r1, lsl #2
}
    17c4:	b3000004 	movwlt	r0, #4
		rlp (b);
    17c8:	15000004 	strne	r0, [r0, #-4]
    17cc:	00000094 	muleq	r0, r4, r0
    17d0:	a3050001 	movwge	r0, #20481	; 0x5001
    17d4:	16000004 	strne	r0, [r0], -r4
    17d8:	00000ec8 	andeq	r0, r0, r8, asr #29
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17dc:	b318cf01 	tstlt	r8, #1, 30
    17e0:	0c000004 	stceq	0, cr0, [r0], {4}
    17e4:	000000eb 	andeq	r0, r0, fp, ror #1
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17e8:	000004d4 	ldrdeq	r0, [r0], -r4
	va_start (ap, plid);
    17ec:	00009415 	andeq	r9, r0, r5, lsl r4
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f0:	05001000 	streq	r1, [r0, #-0]
    17f4:	000004c4 	andeq	r0, r0, r4, asr #9
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17f8:	000cc517 	andeq	ip, ip, r7, lsl r5
    17fc:	0dec0100 	stfeqe	f0, [ip]
    1800:	000004d4 	ldrdeq	r0, [r0], -r4
    1804:	1c030501 	cfstr32ne	mvfx0, [r3], {1}
			syserror (ENODEVICE, "tcv04");
    1808:	18000044 	stmdane	r0, {r2, r6}
		syserror (EMALLOC, "tcv05");
    180c:	00000b41 	andeq	r0, r0, r1, asr #22
	attp.b.outgoing = 1;
    1810:	0d010c01 	stceq	12, cr0, [r1, #-4]
    1814:	000000a7 	andeq	r0, r0, r7, lsr #1
    1818:	05460305 	strbeq	r0, [r6, #-773]	; 0xfffffcfb
    181c:	36192000 	ldrcc	r2, [r9], -r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1820:	01000002 	tsteq	r0, r2
		if (descriptors [fd] == NULL)
    1824:	050802d0 	streq	r0, [r8, #-720]	; 0xfffffd30
    1828:	000b3803 	andeq	r3, fp, r3, lsl #16
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    182c:	00a70c20 	adceq	r0, r7, r0, lsr #24
		return ERROR;
    1830:	051e0000 	ldreq	r0, [lr, #-0]
}
    1834:	94150000 	ldrls	r0, [r5], #-0
    1838:	00000000 	andeq	r0, r0, r0
    183c:	0ac21800 	beq	ff087844 <_estack+0xdf082844>
	s->attpattern.b.session = fd;
    1840:	d2010000 	andle	r0, r1, #0
    1844:	050e0d02 	streq	r0, [lr, #-3330]	; 0xfffff2fe
	descriptors [fd] = s;
    1848:	03050000 	movweq	r0, #20480	; 0x5000
	q_init (&(s->rqueue));
    184c:	20000548 	andcs	r0, r0, r8, asr #10
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1850:	0002c119 	andeq	ip, r2, r9, lsl r1
    1854:	048c0100 	streq	r0, [ip], #256	; 0x100
    1858:	40030507 	andmi	r0, r3, r7, lsl #10
    185c:	1a20000b 	bne	801890 <__ccfg+0x7e18e8>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1860:	000ab601 	andeq	fp, sl, r1, lsl #12
    1864:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
    1868:	008d0105 	addeq	r0, sp, r5, lsl #2
	descriptors [fd] = s;
    186c:	0ee80000 	cdpeq	0, 14, cr0, cr8, cr0, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1870:	0f480000 	svceq	0x00480000
    1874:	9c010000 	stcls	0, cr0, [r1], {-0}
	if (s == NULL)
    1878:	00000584 	andeq	r0, r0, r4, lsl #11
		syserror (EMALLOC, "tcv05");
    187c:	0004c81b 	andeq	ip, r4, fp, lsl r8
    1880:	00057200 	andeq	r7, r5, r0, lsl #4
    1884:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    1888:	11057601 	tstne	r5, r1, lsl #12
    188c:	000000bd 	strheq	r0, [r0], -sp
    1890:	11f71d00 	mvnsne	r1, r0, lsl #26
    1894:	0f2a0000 	svceq	0x002a0000
    1898:	0f2c0000 	svceq	0x002c0000
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    189c:	8d010000 	stchi	0, cr0, [r1, #-0]
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a0:	1e000205 	cdpne	2, 0, cr0, cr0, cr5, {0}
    18a4:	000d4e01 	andeq	r4, sp, r1, lsl #28
    18a8:	05680100 	strbeq	r0, [r8, #-256]!	; 0xffffff00
	plugins [ord] = pl;
    18ac:	000c6021 	andeq	r6, ip, r1, lsr #32
	return 0;
    18b0:	000eb800 	andeq	fp, lr, r0, lsl #16
		return ERROR;
    18b4:	e49c0100 	ldr	r0, [ip], #256	; 0x100
}
    18b8:	1f000007 	svcne	0x00000007
    18bc:	00000d5b 	andeq	r0, r0, fp, asr sp
	verify_fds (fd, "tcv16");
    18c0:	2001080d 	andcs	r0, r1, sp, lsl #16
								Boolean urg) {
    18c4:	000011d0 	ldrdeq	r1, [r0], -r0
    18c8:	00000c60 	andeq	r0, r0, r0, ror #24
	verify_fds (fd, "tcv16");
    18cc:	00000328 	andeq	r0, r0, r8, lsr #6
    18d0:	02056a01 	andeq	r6, r5, #4096	; 0x1000
    18d4:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
	verify_pld (s, tcv_frm, "tcv17");
    18d8:	0011df21 	andseq	sp, r1, r1, lsr #30
    18dc:	12220000 	eorne	r0, r2, #0
    18e0:	7a000008 	bvc	1908 <tcv_wnps+0x48>
    18e4:	4800000c 	stmdami	r0, {r2, r3}
    18e8:	0d000003 	stceq	0, cr0, [r0, #-12]
    18ec:	07b30227 	ldreq	r0, [r3, r7, lsr #4]!
    18f0:	48230000 	stmdami	r3!, {}	; <UNPREDICTABLE>
    18f4:	24000003 	strcs	r0, [r0], #-3
	ptrs.head = (word) fd;
    18f8:	00000820 	andeq	r0, r0, r0, lsr #16
	ptrs.tail = (word) urg;
    18fc:	00000d08 	andeq	r0, r0, r8, lsl #26
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1900:	00125c25 	andseq	r5, r2, r5, lsr #24
    1904:	000c7a00 	andeq	r7, ip, r0, lsl #20
		if (state != WNONE) {
    1908:	00037000 	andeq	r7, r3, r0
    190c:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
}
    1910:	14381d04 	ldrtne	r1, [r8], #-3332	; 0xfffff2fc
			when (eid, state);
    1914:	0cf20000 	ldcleq	0, cr0, [r2]
    1918:	0cfe0000 	ldcleq	0, cr0, [lr]
			release;
    191c:	a4010000 	strge	r0, [r1], #-0
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1920:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
    1924:	06000012 			; <UNDEFINED> instruction: 0x06000012
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1928:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    192c:	0100000d 	tsteq	r0, sp
    1930:	250404aa 	strcs	r0, [r4, #-1194]	; 0xfffffb56
    1934:	000012c0 	andeq	r1, r0, r0, asr #5
    1938:	00000d1e 	andeq	r0, r0, lr, lsl sp
    193c:	00000388 	andeq	r0, r0, r8, lsl #7
		if (state != WNONE) {
    1940:	0404bb01 	streq	fp, [r4], #-2817	; 0xfffff4ff
    1944:	00144325 	andseq	r4, r4, r5, lsr #6
			tmwait (state);
    1948:	000d1e00 	andeq	r1, sp, r0, lsl #28
    194c:	0003a800 	andeq	sl, r3, r0, lsl #16
	b->attributes = s->attpattern;
    1950:	04c50100 	strbeq	r0, [r5], #256	; 0x100
		b->attributes.b.urgent = 1;
    1954:	128e2004 	addne	r2, lr, #4
    1958:	0d260000 	stceq	0, cr0, [r6, #-0]
	b->u.pointers.head = ptrs.head;
    195c:	03c80000 	biceq	r0, r8, #0
	b->u.pointers.tail = length;
    1960:	c0010000 	andgt	r0, r1, r0
	return (address) (b + 1);
    1964:	06510404 	ldrbeq	r0, [r1], -r4, lsl #8
    1968:	9d210000 	stcls	0, cr0, [r1, #-0]
    196c:	00000012 	andeq	r0, r0, r2, lsl r0
    1970:	00125c1d 	andseq	r5, r2, sp, lsl ip
    1974:	000d3600 	andeq	r3, sp, r0, lsl #12
    1978:	000d3800 	andeq	r3, sp, r0, lsl #16
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    197c:	04c30100 	strbeq	r0, [r3], #256	; 0x100
    1980:	142d2504 	strtne	r2, [sp], #-1284	; 0xfffffafc
    1984:	0d3a0000 	ldceq	0, cr0, [sl, #-0]
	verify_fph (phy, "tcv23");
    1988:	03e80000 	mvneq	r0, #0
    198c:	d5010000 	strle	r0, [r1, #-0]
    1990:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
    1994:	50000014 	andpl	r0, r0, r4, lsl r0
}
    1998:	0800000d 	stmdaeq	r0, {r0, r2, r3}
	return (physical [phy]) (opt, arg);
    199c:	01000004 	tsteq	r0, r4
    19a0:	8e0404cc 	cdphi	4, 0, cr0, cr4, cr12, {6}
    19a4:	21000006 	tstcs	r0, r6
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19a8:	0000145d 	andeq	r1, r0, sp, asr r4
	if (opt < 0) {
    19ac:	125c1d00 	subsne	r1, ip, #0, 26
		if (fd < 0)
    19b0:	0d740000 	ldcleq	0, cr0, [r4, #-0]
		if (opt == PHYSOPT_PLUGINFO) {
    19b4:	0d760000 	ldcleq	0, cr0, [r6, #-0]
			if (fd >= TCV_MAX_PLUGS)
    19b8:	df010000 	svcle	0x00010000
			if ((p = plugins [fd]) == NULL)
    19bc:	38250404 	stmdacc	r5!, {r2, sl}
    19c0:	94000014 	strls	r0, [r0], #-20	; 0xffffffec
}
    19c4:	2000000d 	andcs	r0, r0, sp
		if (fd >= TCV_MAX_PHYS)
    19c8:	01000004 	tsteq	r0, r4
		return physinfo [fd];
    19cc:	250404e8 	strcs	r0, [r4, #-1256]	; 0xfffffb18
    19d0:	0000127f 	andeq	r1, r0, pc, ror r2
	verify_fds (fd, "tcv22");
    19d4:	00000d98 	muleq	r0, r8, sp
    19d8:	00000438 	andeq	r0, r0, r8, lsr r4
    19dc:	0d04ee01 	stceq	14, cr14, [r4, #-4]
    19e0:	00128e26 	andseq	r8, r2, r6, lsr #28
    19e4:	000da200 	andeq	sl, sp, r0, lsl #4
}
    19e8:	000da600 	andeq	sl, sp, r0, lsl #12
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19ec:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    19f0:	0006dc04 	andeq	sp, r6, r4, lsl #24
			return 0;
    19f4:	129d2100 	addsne	r2, sp, #0, 2
    19f8:	25000000 	strcs	r0, [r0, #-0]
    19fc:	00001443 	andeq	r1, r0, r3, asr #8
    1a00:	00000dc6 	andeq	r0, r0, r6, asr #27
    1a04:	00000450 	andeq	r0, r0, r0, asr r4
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a08:	0404f701 	streq	pc, [r4], #-1793	; 0xfffff8ff
    1a0c:	00144e20 	andseq	r4, r4, r0, lsr #28
	if (dsp != TCV_DSP_PASS) {
    1a10:	000dc800 	andeq	ip, sp, r0, lsl #16
		if (ses == NONE)
    1a14:	00046800 	andeq	r6, r4, r0, lsl #16
			syserror (EREQPAR, "tcv26");
    1a18:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
		verify_fds (ses, "tcv27");
    1a1c:	00070804 	andeq	r0, r7, r4, lsl #16
    1a20:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
    1a24:	1d000000 	stcne	0, cr0, [r0, #-0]
    1a28:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    1a2c:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if ((p = apb (size)) != NULL) {
    1a30:	00000dd4 	ldrdeq	r0, [r0], -r4
    1a34:	0404fd01 	streq	pc, [r4], #-3329	; 0xfffff2ff
		return NULL;
    1a38:	00125c1d 	andseq	r5, r2, sp, lsl ip
			p->attributes = descriptors [ses] -> attpattern;
    1a3c:	000dd400 	andeq	sp, sp, r0, lsl #8
			dispose (p, dsp);
    1a40:	000dd600 	andeq	sp, sp, r0, lsl #12
			p->attributes = descriptors [ses] -> attpattern;
    1a44:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
			p->attributes.b.outgoing = 0;
    1a48:	0b952604 	bleq	fe54b260 <_estack+0xde546260>
			dispose (p, dsp);
    1a4c:	0dde0000 	ldcleq	0, cr0, [lr]
			return (address)(p + 1);
    1a50:	0dea0000 	stcleq	0, cr0, [sl]
    1a54:	0d010000 	stceq	0, cr0, [r1, #-0]
	if ((p = apb (size)) != NULL)
    1a58:	075c0405 	ldrbeq	r0, [ip, -r5, lsl #8]
    1a5c:	11270000 			; <UNDEFINED> instruction: 0x11270000
		return (address)(p + 1);
    1a60:	de000013 	mcrle	0, 0, r0, cr0, cr3, {0}
    1a64:	e800000d 	stmda	r0, {r0, r2, r3}
    1a68:	0100000d 	tsteq	r0, sp
    1a6c:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a70:	0000132d 	andeq	r1, r0, sp, lsr #6
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a74:	00132021 	andseq	r2, r3, r1, lsr #32
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a78:	1d000000 	stcne	0, cr0, [r0, #-0]
    1a7c:	0000125c 	andeq	r1, r0, ip, asr r2
		syserror (EREQPAR, "tcv28");
    1a80:	00000e12 	andeq	r0, r0, r2, lsl lr
		syserror (EMALLOC, "tcv29");
    1a84:	00000e14 	andeq	r0, r0, r4, lsl lr
	physical [phy] = ps;
    1a88:	04053e01 	streq	r3, [r5], #-3585	; 0xfffff1ff
	physinfo [phy] = info;
    1a8c:	0012741d 	andseq	r7, r2, sp, lsl r4
    1a90:	000e1400 	andeq	r1, lr, r0, lsl #8
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a94:	000e2400 	andeq	r2, lr, r0, lsl #8
    1a98:	05410100 	strbeq	r0, [r1, #-256]	; 0xffffff00
    1a9c:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
		syserror (EMALLOC, "tcv29");
    1aa0:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
    1aa4:	0e260000 	cdpeq	0, 2, cr0, cr6, cr0, {0}
	q_init (q);
    1aa8:	44010000 	strmi	r0, [r1], #-0
}
    1aac:	7f250405 	svcvc	0x00250405
    1ab0:	26000012 			; <UNDEFINED> instruction: 0x26000012
    1ab4:	8000000e 	andhi	r0, r0, lr
    1ab8:	01000004 	tsteq	r0, r4
    1abc:	250b0547 	strcs	r0, [fp, #-1351]	; 0xfffffab9
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac0:	0000146b 	andeq	r1, r0, fp, ror #8
	verify_fph (phy, "tcv30");
    1ac4:	00000e2e 	andeq	r0, r0, lr, lsr #28
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac8:	00000498 	muleq	r0, r8, r4
    1acc:	04054b01 	streq	r4, [r5], #-2817	; 0xfffff4ff
	verify_fph (phy, "tcv30");
    1ad0:	ed280000 	stc	0, cr0, [r8, #-0]
    1ad4:	94000011 	strls	r0, [r0], #-17	; 0xffffffef
    1ad8:	9600000c 	strls	r0, [r0], -ip
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1adc:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    1ae0:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae4:	c2000011 	andgt	r0, r0, #17
    1ae8:	c400000c 	strgt	r0, [r0], #-12
		if (plugins [plg] == NULL)
    1aec:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    1af0:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af4:	48000011 	stmdami	r0, {r0, r4}
}
    1af8:	4a00000e 	bmi	1b38 <tcvphy_rcv+0x78>
    1afc:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b00:	1a000227 	bne	23a4 <rx_int_enable+0x8c>
    1b04:	000dd401 	andeq	sp, sp, r1, lsl #8
    1b08:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0xffffff00
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b0c:	00a70106 	adceq	r0, r7, r6, lsl #2
	...
    1b18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b1c:	00000812 	andeq	r0, r0, r2, lsl r8
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b20:	00637329 	rsbeq	r7, r3, r9, lsr #6
	len -= (ap.head + ap.tail);
    1b24:	07055e01 	streq	r5, [r5, -r1, lsl #28]
    1b28:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b2c:	000000d1 	ldrdeq	r0, [r0], -r1
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b30:	0cee2a00 	vstmiaeq	lr!, {s5-s4}
    1b34:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1b38:	2a031404 	bcs	c6b50 <__ccfg+0xa6ba8>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b3c:	2b000008 	blcs	1b64 <tcvphy_get+0x8>
    1b40:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    1b44:	0104ad01 	tsteq	r4, r1, lsl #26
	return 1;
    1b48:	9b012c00 	blls	4cb50 <__ccfg+0x2cba8>
    1b4c:	0100000c 	tsteq	r0, ip
    1b50:	0106047e 	tsteq	r6, lr, ror r4
    1b54:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1b58:	00000c60 	andeq	r0, r0, r0, ror #24
	verify_fph (phy, "tcv32");
    1b5c:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
    1b60:	402d0000 	eormi	r0, sp, r0
    1b64:	01000000 	mrseq	r0, (UNDEF: 0)
    1b68:	a719047e 			; <UNDEFINED> instruction: 0xa719047e
    1b6c:	e4000000 	str	r0, [r0], #-0
    1b70:	00000000 	andeq	r0, r0, r0
	oq = oqueues [phy];
    1b74:	0b20011e 	bleq	801ff4 <__ccfg+0x7e204c>
	b = q_first (oq);
    1b78:	01010000 	mrseq	r0, (UNDEF: 1)
	if (q_end (b, oq)) {
    1b7c:	0a840604 	beq	fe103394 <_estack+0xde0fe394>
	*len = b->length;
    1b80:	0c3c0000 	ldceq	0, cr0, [ip], #-0
	deq (b);	// Dequeue the packet ...
    1b84:	9c010000 	stcls	0, cr0, [r1], {-0}
}
    1b88:	00000a1e 	andeq	r0, r0, lr, lsl sl
		return NULL;
    1b8c:	000bae2e 	andeq	sl, fp, lr, lsr #28
    1b90:	000bb400 	andeq	fp, fp, r0, lsl #8
    1b94:	00088600 	andeq	r8, r8, r0, lsl #12
    1b98:	00691c00 	rsbeq	r1, r9, r0, lsl #24
	verify_fph (phy, "tcv33");
    1b9c:	0b046b01 	bleq	11c7a8 <__ccfg+0xfc800>
    1ba0:	0000008d 	andeq	r0, r0, sp, lsl #1
    1ba4:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    1ba8:	0aae0000 	beq	feb81bb0 <_estack+0xdeb7cbb0>
    1bac:	02080000 	andeq	r0, r8, #0
    1bb0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
	oq = oqueues [phy];
    1bb4:	54200204 	strtpl	r0, [r0], #-516	; 0xfffffdfc
	b = q_first (oq);
    1bb8:	b000000f 	andlt	r0, r0, pc
		return NULL;
    1bbc:	2800000a 	stmdacs	r0, {r1, r3}
	return (address)(b + 1);
    1bc0:	01000002 	tsteq	r0, r2
}
    1bc4:	1a02040b 	bne	82bf8 <__ccfg+0x62c50>
    1bc8:	23000009 	movwcs	r0, #9
    1bcc:	00000228 	andeq	r0, r0, r8, lsr #4
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd0:	000f612f 	andeq	r6, pc, pc, lsr #2
	verify_plg (b, tcv_xmt, "tcv34");
    1bd4:	0f6d3000 	svceq	0x006d3000
	hblock_t *b = header (pkt);
    1bd8:	02280000 	eoreq	r0, r8, #0
	verify_plg (b, tcv_xmt, "tcv34");
    1bdc:	6e310000 	cdpvs	0, 3, cr0, cr1, cr0, {0}
    1be0:	f700000f 			; <UNDEFINED> instruction: 0xf700000f
    1be4:	22000000 	andcs	r0, r0, #0
    1be8:	000013c9 	andeq	r1, r0, r9, asr #7
    1bec:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
    1bf0:	00000248 	andeq	r0, r0, r8, asr #4
    1bf4:	e704fa01 	str	pc, [r4, -r1, lsl #20]
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf8:	21000008 	tstcs	r0, r8
}
    1bfc:	000013e5 	andeq	r1, r0, r5, ror #7
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c00:	0013d821 	andseq	sp, r3, r1, lsr #16
    1c04:	f3220000 	vhadd.u32	d0, d2, d0
    1c08:	be000013 	mcrlt	0, 0, r0, cr0, cr3, {0}
}
    1c0c:	6000000a 	andvs	r0, r0, sl
    while(1)
    1c10:	01000002 	tsteq	r0, r2
{
    1c14:	090104fe 	stmdbeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl}
    SetupTrimDevice();
    1c18:	02210000 	eoreq	r0, r1, #0
    pui32Src = &_etext;
    1c1c:	00000014 	andeq	r0, r0, r4, lsl r0
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c20:	00141032 	andseq	r1, r4, r2, lsr r0
    __asm("    ldr     r0, =_bss\n"
    1c24:	000ac200 	andeq	ip, sl, r0, lsl #4
    1c28:	00027800 	andeq	r7, r2, r0, lsl #16
    1c2c:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
    1c30:	00141f21 	andseq	r1, r4, r1, lsr #30
    1c34:	00000000 	andeq	r0, r0, r0
   main();
    1c38:	14102000 	ldrne	r2, [r0], #-0
    FaultISR();
    1c3c:	0b020000 	bleq	81c44 <__ccfg+0x61c9c>
        *pui32Dest++ = *pui32Src++;
    1c40:	02900000 	addseq	r0, r0, #0
    1c44:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1c48:	09350204 	ldmdbeq	r5!, {r2, r9}
    1c4c:	1f210000 	svcne	0x00210000
    1c50:	00000014 	andeq	r0, r0, r4, lsl r0
    1c54:	00141020 	andseq	r1, r4, r0, lsr #32
    1c58:	000b0400 	andeq	r0, fp, r0, lsl #8
    1c5c:	0002b000 	andeq	fp, r2, r0
static byte get_byte () {
    1c60:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c64:	00095002 	andeq	r5, r9, r2
    1c68:	141f2100 	ldrne	r2, [pc], #-256	; 1c70 <get_byte+0x10>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c6c:	20000000 	andcs	r0, r0, r0
    1c70:	000013f3 	strdeq	r1, [r0], -r3
		if (ee_inp)
    1c74:	00000b1e 	andeq	r0, r0, lr, lsl fp
			b |= 1;
    1c78:	000002c8 	andeq	r0, r0, r8, asr #5
    1c7c:	02040e01 	andeq	r0, r4, #1, 28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	0000096b 	andeq	r0, r0, fp, ror #18
	for (b = 0, i = 0; i < 8; i++) {
    1c84:	00140221 	andseq	r0, r4, r1, lsr #4
}
    1c88:	f3260000 	vhadd.u32	d0, d6, d0
    1c8c:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    1c90:	2600000b 	strcs	r0, [r0], -fp
static void put_byte (byte b) {
    1c94:	0100000b 	tsteq	r0, fp
    1c98:	8602040e 	strhi	r0, [r2], -lr, lsl #8
    1c9c:	21000009 	tstcs	r0, r9
    1ca0:	00001402 	andeq	r1, r0, r2, lsl #8
		if (b & 0x80)
    1ca4:	12342000 	eorsne	r2, r4, #0
    1ca8:	0b360000 	bleq	d81cb0 <__ccfg+0xd61d08>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	02e00000 	rsceq	r0, r0, #0
	for (i = 0; i < 8; i++) {
    1cb0:	1b010000 	blne	41cb8 <__ccfg+0x21d10>
		b <<= 1;
    1cb4:	09a10204 	stmibeq	r1!, {r2, r9}
	for (i = 0; i < 8; i++) {
    1cb8:	43210000 			; <UNDEFINED> instruction: 0x43210000
}
    1cbc:	00000012 	andeq	r0, r0, r2, lsl r0
    1cc0:	000ccb26 	andeq	ip, ip, r6, lsr #22
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc4:	000b6000 	andeq	r6, fp, r0
    1cc8:	000b8a00 	andeq	r8, fp, r0, lsl #20
	put_byte (cmd);
    1ccc:	043e0100 	ldrteq	r0, [lr], #-256	; 0xffffff00
    1cd0:	0009c802 	andeq	ip, r9, r2, lsl #16
}
    1cd4:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    1cd8:	0b7e0000 	bleq	1f81ce0 <__ccfg+0x1f61d38>
static void wwait (word st, word del) {
    1cdc:	02f80000 	rscseq	r0, r8, #0
    1ce0:	01010000 	mrseq	r0, (UNDEF: 1)
    1ce4:	26000203 	strcs	r0, [r0], -r3, lsl #4
	while (dopen && (rdsr () & 1)) {
    1ce8:	000012ab 	andeq	r1, r0, fp, lsr #5
    1cec:	00000b9a 	muleq	r0, sl, fp
    1cf0:	00000bae 	andeq	r0, r0, lr, lsr #23
    1cf4:	03045101 	movweq	r5, #16641	; 0x4101
	put_byte (CMD_RDSR);
    1cf8:	000009ef 	andeq	r0, r0, pc, ror #19
	r = get_byte ();
    1cfc:	0012b61d 	andseq	fp, r2, sp, lsl r6
    1d00:	000b9a00 	andeq	r9, fp, r0, lsl #20
	while (dopen && (rdsr () & 1)) {
    1d04:	000b9e00 	andeq	r9, fp, r0, lsl #28
}
    1d08:	01140b00 	tsteq	r4, r0, lsl #22
		if (st == WNONE)
    1d0c:	95330005 	ldrls	r0, [r3, #-5]!
    1d10:	b400000b 	strlt	r0, [r0], #-11
			mdelay (1);
    1d14:	1000000b 	andne	r0, r0, fp
    1d18:	01000003 	tsteq	r0, r3
			delay (del, st);
    1d1c:	33020472 	movwcc	r0, #9330	; 0x2472
    1d20:	00001311 	andeq	r1, r0, r1, lsl r3
			release;
    1d24:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
    1d28:	00000310 	andeq	r0, r0, r0, lsl r3
    1d2c:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
static void ready () {
    1d30:	00132d21 	andseq	r2, r3, r1, lsr #26
	if (dopen) {
    1d34:	13202100 	nopne	{0}	; <UNPREDICTABLE>
		wwait (WNONE, 1);
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	fb012c00 	blx	4cd46 <__ccfg+0x2cd9e>
    1d40:	0100000d 	tsteq	r0, sp
	dstat = 0;
    1d44:	010603ed 	smlatteq	r6, sp, r3, r0
}
    1d48:	000009a4 	andeq	r0, r0, r4, lsr #19
    1d4c:	000009e0 	andeq	r0, r0, r0, ror #19
    1d50:	0aa79c01 	beq	fe9e8d5c <_estack+0xde9e3d5c>
	udelay (1);
    1d54:	76340000 	ldrtvc	r0, [r4], -r0
    1d58:	01006c61 	tsteq	r0, r1, ror #24
	udelay (1);
    1d5c:	8d1c03ed 	ldchi	3, cr0, [ip, #-948]	; 0xfffffc4c
		dopen = DOPEN_TEMP;
    1d60:	01000000 	mrseq	r0, (UNDEF: 0)
    1d64:	00692950 	rsbeq	r2, r9, r0, asr r9
    1d68:	0603ef01 	streq	lr, [r3], -r1, lsl #30
    1d6c:	0000008d 	andeq	r0, r0, sp, lsl #1
static void cclose () {
    1d70:	00000115 	andeq	r0, r0, r5, lsl r1
	if (dopen == DOPEN_TEMP) {
    1d74:	006e6229 	rsbeq	r6, lr, r9, lsr #4
    1d78:	0803f001 	stmdaeq	r3, {r0, ip, sp, lr, pc}
		wwait (WNONE, 1);
    1d7c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1d80:	00000133 	andeq	r0, r0, r3, lsr r1
	cmd_0 (CMD_DP);
    1d84:	0011ed25 	andseq	lr, r1, r5, lsr #26
    1d88:	0009a400 	andeq	sl, r9, r0, lsl #8
		dopen = 0;
    1d8c:	0001c800 	andeq	ip, r1, r0, lsl #16
}
    1d90:	03f20100 	mvnseq	r0, #0, 2
word ee_open () {
    1d94:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
	ready ();
    1d98:	09aa0000 	stmibeq	sl!, {}	; <UNPREDICTABLE>
	dopen = DOPEN_PERM;
    1d9c:	01e00000 	mvneq	r0, r0
    1da0:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
}
    1da4:	0a950303 	beq	fe5429b8 <_estack+0xde53d9b8>
	if (dopen) {
    1da8:	bb350000 	bllt	d41db0 <__ccfg+0xd21e08>
    1dac:	33000013 	movwcc	r0, #19
		dopen = DOPEN_TEMP;
    1db0:	00000001 	andeq	r0, r0, r1
		cclose ();
    1db4:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
}
    1db8:	0009ce00 	andeq	ip, r9, r0, lsl #28
int ser_in (word st, char *buf, int len) {
    1dbc:	0009d000 	andeq	sp, r9, r0
    1dc0:	03f90100 	mvnseq	r0, #0, 2
	if (len == 0)
    1dc4:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
	if (__inpline == NULL) {
    1dc8:	00000d91 	muleq	r0, r1, sp
		if ((prcs = running (__inserial)) == 0) {
    1dcc:	0603da01 	streq	sp, [r3], -r1, lsl #20
    1dd0:	00096001 	andeq	r6, r9, r1
			prcs = runthread (__inserial);
    1dd4:	0009a400 	andeq	sl, r9, r0, lsl #8
    1dd8:	2c9c0100 	ldfcss	f0, [ip], {0}
			if (prcs == 0) {
    1ddc:	3400000b 	strcc	r0, [r0], #-11
				npwait (st);
    1de0:	006c6176 	rsbeq	r6, ip, r6, ror r1
		release;
    1de4:	1c03da01 			; <UNDEFINED> instruction: 0x1c03da01
		join (prcs, st);
    1de8:	0000008d 	andeq	r0, r0, sp, lsl #1
    1dec:	691c5001 	ldmdbvs	ip, {r0, ip, lr}
	if (*__inpline == NULL) // bin cmd
    1df0:	03dc0100 	bicseq	r0, ip, #0, 2
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df4:	00008d06 	andeq	r8, r0, r6, lsl #26
	if (prcs >= len)
    1df8:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
		prcs = len-1;
    1dfc:	03dd0100 	bicseq	r0, sp, #0, 2
	memcpy (buf, __inpline, prcs);
    1e00:	0000df08 	andeq	sp, r0, r8, lsl #30
    1e04:	00014600 	andeq	r4, r1, r0, lsl #12
    1e08:	11ed2500 	mvnne	r2, r0, lsl #10
	ufree (__inpline);
    1e0c:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
	__inpline = NULL;
    1e10:	01800000 	orreq	r0, r0, r0
	if (*buf) // if it's NULL, it's a bin cmd
    1e14:	df010000 	svcle	0x00010000
		buf [prcs] = '\0';
    1e18:	ac200203 	sfmge	f0, 4, [r0], #-12
}
    1e1c:	64000013 	strvs	r0, [r0], #-19	; 0xffffffed
		prcs = strlen (__inpline);
    1e20:	98000009 	stmdals	r0, {r0, r3}
    1e24:	01000001 	tsteq	r0, r1
		return 0;
    1e28:	1a0303e2 	bne	c2db8 <__ccfg+0xa2e10>
    1e2c:	3500000b 	strcc	r0, [r0, #-11]
    1e30:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
int ser_outf (word st, const char *m, ...) {
    1e34:	00000159 	andeq	r0, r0, r9, asr r1
    1e38:	11f71d00 	mvnsne	r1, r0, lsl #26
	if ((prcs = running (__outserial)) != 0) {
    1e3c:	09920000 	ldmibeq	r2, {}	; <UNPREDICTABLE>
    1e40:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
		join (prcs, st);
    1e44:	e6010000 	str	r0, [r1], -r0
    1e48:	1e000203 	cdpne	2, 0, cr0, cr0, cr3, {0}
		release;
    1e4c:	000e0c01 	andeq	r0, lr, r1, lsl #24
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e50:	03c60100 	biceq	r0, r6, #0, 2
    1e54:	0009e006 	andeq	lr, r9, r6
    1e58:	000a8400 	andeq	r8, sl, r0, lsl #8
		umwait (st);
    1e5c:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    1e60:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
	if (runstrand (__outserial, buf) == 0) {
    1e64:	000009f2 	strdeq	r0, [r0], -r2
    1e68:	00000a20 	andeq	r0, r0, r0, lsr #20
    1e6c:	00000b6e 	andeq	r0, r0, lr, ror #22
		ufree (buf);
    1e70:	07006a36 	smladxeq	r0, r6, sl, r6
		npwait (st);
    1e74:	008d0203 	addeq	r0, sp, r3, lsl #4
}
    1e78:	016c0000 	cmneq	ip, r0
    1e7c:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
    1e80:	02030700 	andeq	r0, r3, #0, 14
    1e84:	000003f4 	strdeq	r0, [r0], -r4
int ser_inf (word st, const char *fmt, ...) {
    1e88:	0000017f 	andeq	r0, r0, pc, ror r1
    1e8c:	0a323700 	beq	c8fa94 <__ccfg+0xc6faec>
	if (fmt == NULL)
    1e90:	0a600000 	beq	1801e98 <__ccfg+0x17e1ef0>
	if (__inpline == NULL) {
    1e94:	6a360000 	bvs	d81e9c <__ccfg+0xd61ef4>
		if ((prcs = running (__inserial)) == 0) {
    1e98:	02020800 	andeq	r0, r2, #0, 16
    1e9c:	0000008d 	andeq	r0, r0, sp, lsl #1
			prcs = runthread (__inserial);
    1ea0:	00000192 	muleq	r0, r2, r1
    1ea4:	08006936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, lr}
			if (prcs == 0) {
    1ea8:	03f40202 	mvnseq	r0, #536870912	; 0x20000000
				npwait (st);
    1eac:	01a50000 			; <UNDEFINED> instruction: 0x01a50000
		release;
    1eb0:	00000000 	andeq	r0, r0, r0
		join (prcs, st);
    1eb4:	000c1938 	andeq	r1, ip, r8, lsr r9
    1eb8:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
	va_start (ap, fmt);
    1ebc:	011e0314 	tsteq	lr, r4, lsl r3
	prcs = vscan (__inpline, fmt, ap);
    1ec0:	00000f80 	andeq	r0, r0, r0, lsl #31
    1ec4:	06038201 	streq	r8, [r3], -r1, lsl #4
	ufree (__inpline);
    1ec8:	000008a0 	andeq	r0, r0, r0, lsr #17
	__inpline = NULL;
    1ecc:	00000960 	andeq	r0, r0, r0, ror #18
}
    1ed0:	0c289c01 	stceq	12, cr9, [r8], #-4
    1ed4:	cc2e0000 	stcgt	0, cr0, [lr], #-0
    1ed8:	fa000008 	blx	1f00 <plugch+0x18>
		return 0;
    1edc:	e3000008 	movw	r0, #8
    1ee0:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    1ee4:	8901006a 	stmdbhi	r1, {r1, r3, r5, r6}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	008d0303 	addeq	r0, sp, r3, lsl #6
    1eec:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    1ef0:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
	RF_cmdFs.frequency = 
    1ef4:	03890100 	orreq	r0, r9, #0, 2
}
    1ef8:	0003f403 	andeq	pc, r3, r3, lsl #8
    1efc:	0001cb00 	andeq	ip, r1, r0, lsl #22
    1f00:	681b0000 	ldmdavs	fp, {}	; <UNPREDICTABLE>
    1f04:	0b000001 	bleq	1f10 <option+0x8>
static int option (int opt, address val) {
    1f08:	2900000c 	stmdbcs	r0, {r2, r3}
    1f0c:	8f01006a 	svchi	0x0001006a
    1f10:	008d0303 	addeq	r0, sp, r3, lsl #6
    1f14:	01de0000 	bicseq	r0, lr, r0
    1f18:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    1f1c:	038f0100 	orreq	r0, pc, #0, 2
    1f20:	0003f403 	andeq	pc, r3, r3, lsl #8
    1f24:	0001f100 	andeq	pc, r1, r0, lsl #2
    1f28:	e7330000 	ldr	r0, [r3, -r0]!
    1f2c:	a0000012 	andge	r0, r0, r2, lsl r0
    1f30:	48000008 	stmdami	r0, {r3}
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	01000001 	tsteq	r0, r1
    1f38:	21020384 	smlabbcs	r2, r4, r3, r0
			goto RVal;
    1f3c:	00001303 	andeq	r1, r0, r3, lsl #6
			_BIS (dstate, DSTATE_RXON);
    1f40:	0012f621 	andseq	pc, r2, r1, lsr #12
    1f44:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
	int ret = 0;
    1f48:	00000d16 	andeq	r0, r0, r6, lsl sp
			p_trigger (drvprcs, qevent);
    1f4c:	0d037d01 	stceq	13, cr7, [r3, #-4]
    1f50:	00040401 	andeq	r0, r4, r1, lsl #8
    1f54:	00041000 	andeq	r1, r4, r0
    1f58:	529c0100 	addspl	r0, ip, #0, 2
    1f5c:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    1f60:	00000ede 	ldrdeq	r0, [r0], -lr
    1f64:	1f037d01 	svcne	0x00037d01
    1f68:	0000008d 	andeq	r0, r0, sp, lsl #1
    1f6c:	00000204 	andeq	r0, r0, r4, lsl #4
    1f70:	0e9f3a00 	vfnmseq.f32	s6, s30, s0
}
    1f74:	10010000 	andne	r0, r1, r0
			_BIC (dstate, DSTATE_RXON);
    1f78:	8d010c03 	stchi	12, cr0, [r1, #-12]
    1f7c:	90000000 	andls	r0, r0, r0
			statid = (val == NULL) ? 0 : *val;
    1f80:	a0000007 	andge	r0, r0, r7
    1f84:	01000008 	tsteq	r0, r8
	int ret = 0;
    1f88:	000ccb9c 	muleq	ip, ip, fp
			ret = (int) statid;
    1f8c:	0ca82d00 	stceq	13, cr2, [r8]
	if (val != NULL)
    1f90:	10010000 	andne	r0, r1, r0
		*val = ret;
    1f94:	008d1e03 	addeq	r1, sp, r3, lsl #28
			ret = rbuffl + 2;
    1f98:	02220000 	eoreq	r0, r2, #0
    1f9c:	623b0000 	eorsvs	r0, fp, #0
			if (val != NULL) {
    1fa0:	01006675 	tsteq	r0, r5, ror r6
				memcpy (val, &rxstat,
    1fa4:	c92f0310 	stmdbgt	pc!, {r4, r8, r9}	; <UNPREDICTABLE>
    1fa8:	35000001 	strcc	r0, [r0, #-1]
				memset (&rxstat, 0, 
    1fac:	3b000002 	blcc	1fbc <option+0xb4>
    1fb0:	006e656c 	rsbeq	r6, lr, ip, ror #10
			if (val == NULL)
    1fb4:	38031001 	stmdacc	r3, {r0, ip}
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	0000008d 	andeq	r0, r0, sp, lsl #1
    1fbc:	000002d7 	ldrdeq	r0, [r0], -r7
				utimer_set (bckf_timer, *val);
    1fc0:	000bc52b 	andeq	ip, fp, fp, lsr #10
    1fc4:	03180100 	tsteq	r8, #0, 2
    1fc8:	0cd02b01 	fldmiaxeq	r0, {d18-d17}	;@ Deprecated
			for (ret = 0; ret < 8; ret++)
    1fcc:	3d010000 	stccc	0, cr0, [r1, #-0]
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	44270103 	strtmi	r0, [r7], #-259	; 0xfffffefd
					== patable [ret])
    1fd4:	7200000d 	andvc	r0, r0, #13
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	74000008 	strvc	r0, [r0], #-8
			for (ret = 0; ret < 8; ret++)
    1fdc:	01000008 	tsteq	r0, r8
    1fe0:	21150365 	tstcs	r5, r5, ror #6
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	00000d58 	andeq	r0, r0, r8, asr sp
    1fe8:	60380000 	eorsvs	r0, r8, r0
    1fec:	0100000d 	tsteq	r0, sp
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	010d02fc 	strdeq	r0, [sp, -ip]
    1ff4:	000d613c 	andeq	r6, sp, ip, lsr r1
			_BIS (dstate, DSTATE_IRST);
    1ff8:	02f00100 	rscseq	r0, r0, #0, 2
    1ffc:	0007580d 	andeq	r5, r7, sp, lsl #16
    2000:	00079000 	andeq	r9, r7, r0
			ret = (int) channel;
    2004:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
			goto RVal;
    2008:	2000000d 	andcs	r0, r0, sp
				(*val > 7) ? 7 : *val;
    200c:	0000133b 	andeq	r1, r0, fp, lsr r3
    2010:	00000758 	andeq	r0, r0, r8, asr r7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	00000130 	andeq	r0, r0, r0, lsr r1
    2018:	0202f501 	andeq	pc, r2, #4194304	; 0x400000
			plugch ();
    201c:	00000d07 	andeq	r0, r0, r7, lsl #26
			_BIS (dstate, DSTATE_IRST);
    2020:	00134a21 	andseq	r4, r3, r1, lsr #20
    2024:	75260000 	strvc	r0, [r6, #-0]!
			ret = (int) vrate;
    2028:	64000013 	strvs	r0, [r0], #-19	; 0xffffffed
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	6a000007 	bvs	2050 <option+0x148>
    2030:	01000007 	tsteq	r0, r7
    2034:	2c0202f6 	sfmcs	f0, 4, [r2], {246}	; 0xf6
    2038:	2100000d 	tstcs	r0, sp
    203c:	0000139e 	muleq	r0, lr, r3
    2040:	00139121 	andseq	r9, r3, r1, lsr #2
    2044:	13842100 	orrne	r2, r4, #0, 2
    2048:	27000000 	strcs	r0, [r0, -r0]
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	000012ca 	andeq	r1, r0, sl, asr #5
    2050:	0000076a 	andeq	r0, r0, sl, ror #14
    2054:	00000774 	andeq	r0, r0, r4, ror r7
    2058:	0202f701 	andeq	pc, r2, #262144	; 0x40000
			syserror (EREQPAR, "cc13 op");
    205c:	0012d921 	andseq	sp, r2, r1, lsr #18
    2060:	3d000000 	stccc	0, cr0, [r0, #-0]
    2064:	000b9301 	andeq	r9, fp, r1, lsl #6
    2068:	02eb0100 	rsceq	r0, fp, #0, 2
    206c:	00a70106 	adceq	r0, r7, r6, lsl #2
    2070:	65010000 	strvs	r0, [r1, #-0]
    2074:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
    2078:	01006175 	tsteq	r0, r5, ror r1
    207c:	652702eb 	strvs	r0, [r7, #-747]!	; 0xfffffd15
    2080:	0000000d 	andeq	r0, r0, sp
    2084:	02260407 	eoreq	r0, r6, #117440512	; 0x7000000
    2088:	011a0000 	tsteq	sl, r0
    208c:	00000c56 	andeq	r0, r0, r6, asr ip
    2090:	0902d401 	stmdbeq	r2, {r0, sl, ip, lr, pc}
    2094:	00009b01 	andeq	r9, r0, r1, lsl #22
static void issue_cmd (lword cmd) {
    2098:	00070400 	andeq	r0, r7, r0, lsl #8
    209c:	00075800 	andeq	r5, r7, r0, lsl #16
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    20a4:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    20a8:	00000ba0 	andeq	r0, r0, r0, lsr #23
		if (res != 0x86)
    20ac:	2102d401 	tstcs	r2, r1, lsl #8
			syserror (EHARDWARE, "hang ic0");
    20b0:	000000a7 	andeq	r0, r0, r7, lsr #1
    20b4:	00000363 	andeq	r0, r0, r3, ror #6
		if (cnt-- == 0) {
    20b8:	0061753b 	rsbeq	r7, r1, fp, lsr r5
			diag ("HUP %lx %lx", cmd, res);
    20bc:	2f02d401 	svccs	0x0002d401
    20c0:	00000dc1 	andeq	r0, r0, r1, asr #27
			syserror (EHARDWARE, "hang ic0");
    20c4:	00000376 	andeq	r0, r0, r6, ror r3
		udelay (1);
    20c8:	00135833 	andseq	r5, r3, r3, lsr r8
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	00072400 	andeq	r2, r7, r0, lsl #8
}
    20d0:	00011800 	andeq	r1, r1, r0, lsl #16
    20d4:	02e60100 	rsceq	r0, r6, #0, 2
    20d8:	13672102 	cmnne	r7, #-2147483648	; 0x80000000
    20dc:	00000000 	andeq	r0, r0, r0
static void rx_de () {
    20e0:	021a0407 	andseq	r0, sl, #117440512	; 0x7000000
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	011a0000 	tsteq	sl, r0
    20e8:	00000fa6 	andeq	r0, r0, r6, lsr #31
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	06018a01 	streq	r8, [r1], -r1, lsl #20
	_BIC (dstate, DSTATE_RXAC);
    20f0:	0000a701 	andeq	sl, r0, r1, lsl #14
    20f4:	0006b400 	andeq	fp, r6, r0, lsl #8
}
    20f8:	00070400 	andeq	r0, r7, r0, lsl #8
    20fc:	0f9c0100 	svceq	0x009c0100
    2100:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
static void rf_off () {
    2104:	00000d6d 	andeq	r0, r0, sp, ror #26
	if ((dstate & DSTATE_RFON) == 0)
    2108:	26018a01 	strcs	r8, [r1], -r1, lsl #20
    210c:	0000009b 	muleq	r0, fp, r0
	IntDisable (INT_RFC_CPE_0);
    2110:	00000389 	andeq	r0, r0, r9, lsl #7
    2114:	0058453f 	subseq	r4, r8, pc, lsr r5
    2118:	0101a401 	tsteq	r1, r1, lsl #8
	RFCAdi3VcoLdoVoltageMode (false);
    211c:	000f461d 	andeq	r4, pc, sp, lsl r6	; <UNPREDICTABLE>
	RFCSynthPowerDown ();
    2120:	0006c800 	andeq	ip, r6, r0, lsl #16
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2124:	0006d200 	andeq	sp, r6, r0, lsl #4
    2128:	019c0100 	orrseq	r0, ip, r0, lsl #2
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    212c:	011e001a 	tsteq	lr, sl, lsl r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2130:	00000d23 	andeq	r0, r0, r3, lsr #26
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2134:	06013801 	streq	r3, [r1], -r1, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2138:	000005a0 	andeq	r0, r0, r0, lsr #11
    213c:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    2140:	0ec19c01 	cdpeq	12, 12, cr9, cr1, cr1, {0}
	_BIC (dstate, DSTATE_RFON);
    2144:	46400000 	strbmi	r0, [r0], -r0
    2148:	0100000e 	tsteq	r0, lr
}
    214c:	df08013a 	svcle	0x0008013a
    2150:	a7000000 	strge	r0, [r0, -r0]
    2154:	41000003 	tstmi	r0, r3
    2158:	00545545 	subseq	r5, r4, r5, asr #10
    215c:	01016801 	tsteq	r1, r1, lsl #16
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2160:	000005ee 	andeq	r0, r0, lr, ror #11
    2164:	00010023 	andeq	r0, r1, r3, lsr #32
    2168:	0cb24000 	ldceq	0, cr4, [r2]
		if (cmd->status == tstat)
    216c:	47010000 	strmi	r0, [r1, -r0]
		if (timeout-- == 0) {
    2170:	009b0b01 	addseq	r0, fp, r1, lsl #22
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2174:	03f20000 	mvnseq	r0, #0
    2178:	10420000 	subne	r0, r2, r0
    217c:	0c000014 	stceq	0, cr0, [r0], {20}
			syserror (EHARDWARE, "rt2");
    2180:	14000006 	strne	r0, [r0], #-6
    2184:	05000006 	streq	r0, [r0, #-6]
		udelay (1);
    2188:	0e75060d 	cdpeq	6, 7, cr0, cr5, cr13, {0}
		if (cmd->status == tstat)
    218c:	1f210000 	svcne	0x00210000
}
    2190:	00000014 	andeq	r0, r0, r4, lsl r0
    2194:	00141042 	andseq	r1, r4, r2, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2198:	00061800 	andeq	r1, r6, r0, lsl #16
    219c:	00062000 	andeq	r2, r6, r0
static void rf_on () {
    21a0:	060f0500 	streq	r0, [pc], -r0, lsl #10
    21a4:	00000e8f 	andeq	r0, r0, pc, lsl #29
	OSCHF_TurnOnXosc();
    21a8:	00141f21 	andseq	r1, r4, r1, lsr #30
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21ac:	f3420000 	vhadd.u8	d16, d2, d0
    21b0:	66000013 			; <UNDEFINED> instruction: 0x66000013
    21b4:	6e000006 	cdpvs	0, 0, cr0, cr0, cr6, {0}
    21b8:	05000006 	streq	r0, [r0, #-6]
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21bc:	0ea90617 	mcreq	6, 5, r0, cr9, cr7, {0}
    21c0:	02210000 	eoreq	r0, r1, #0
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c4:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21c8:	0013f343 	andseq	pc, r3, r3, asr #6
	issue_cmd (
    21cc:	00067200 	andeq	r7, r6, r0, lsl #4
    21d0:	00067a00 	andeq	r7, r6, r0, lsl #20
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d4:	06190500 	ldreq	r0, [r9], -r0, lsl #10
    21d8:	00140221 	andseq	r0, r4, r1, lsr #4
    21dc:	00000000 	andeq	r0, r0, r0
   pPatchTab[80] = 0;
    21e0:	0de3011e 	stfeqe	f0, [r3, #120]!	; 0x78
   } while (--nIterations);
    21e4:	2b010000 	blcs	421ec <__ccfg+0x22244>
   pPatchTab[53] = 2;
    21e8:	05780601 	ldrbeq	r0, [r8, #-1537]!	; 0xfffff9ff
    21ec:	05a00000 	streq	r0, [r0, #0]!
   pPatchTab[55] = 3;
    21f0:	9c010000 	stcls	0, cr0, [r1], {-0}
   pPatchTab[110] = 4;
    21f4:	00000ef1 	strdeq	r0, [r0], -r1
   pPatchTab[107] = 5;
    21f8:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
   pPatchTab[65] = 6;
    21fc:	00058000 	andeq	r8, r5, r0
    2200:	0000e800 	andeq	lr, r0, r0, lsl #16
   pPatchTab[57] = 1;
    2204:	01320100 	teqeq	r2, r0, lsl #2
   pIrqPatch[1] = _IRQ_PATCH_0;
    2208:	0f38212c 	svceq	0x0038212c
   const uint32_t *pS = patchGenfskRfe;
    220c:	00000000 	andeq	r0, r0, r0
      t2 = *pS++;
    2210:	0d3a011e 	ldfeqs	f0, [sl, #-120]!	; 0xffffff88
      t4 = *pS++;
    2214:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
      t6 = *pS++;
    2218:	05380601 	ldreq	r0, [r8, #-1537]!	; 0xfffff9ff
      t8 = *pS++;
    221c:	05780000 	ldrbeq	r0, [r8, #-0]!
      *pD++ = t1;
    2220:	9c010000 	stcls	0, cr0, [r1], {-0}
      *pD++ = t2;
    2224:	00000f25 	andeq	r0, r0, r5, lsr #30
      *pD++ = t3;
    2228:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
      *pD++ = t5;
    222c:	00054a00 	andeq	r4, r5, r0, lsl #20
      *pD++ = t7;
    2230:	0000c800 	andeq	ip, r0, r0, lsl #16
   } while (--nIterations);
    2234:	01250100 			; <UNDEFINED> instruction: 0x01250100
    2238:	0f38352c 	svceq	0x0038352c
      *pD++ = t8;
    223c:	04310000 	ldrteq	r0, [r1], #-0
   } while (--nIterations);
    2240:	00000000 	andeq	r0, r0, r0
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2244:	000e3f44 	andeq	r3, lr, r4, asr #30
   *pD++ = t2;
    2248:	01170100 	tsteq	r7, r0, lsl #2
   *pD++ = t3;
    224c:	00df0115 	sbcseq	r0, pc, r5, lsl r1	; <UNPREDICTABLE>
   *pD++ = t4;
    2250:	46030000 	strmi	r0, [r3], -r0
   *pD++ = t5;
    2254:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
    2258:	006c6564 	rsbeq	r6, ip, r4, ror #10
	RFCAdi3VcoLdoVoltageMode (true);
    225c:	22011701 	andcs	r1, r1, #262144	; 0x40000
    2260:	000000a7 	andeq	r0, r0, r7, lsr #1
       	RFCRfTrimSet (&rfTrim);
    2264:	0abb4500 	beq	feed366c <_estack+0xdeece66c>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2268:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    226c:	00a71401 	adceq	r1, r7, r1, lsl #8
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2270:	46030000 	strmi	r0, [r3], -r0
    2274:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
	issue_cmd ((lword)&cmd_srt);
    2278:	0314ee01 	tsteq	r4, #1, 28
    227c:	00000f7a 	andeq	r0, r0, sl, ror pc
	issue_cmd ((lword)&RF_cmdFs);
    2280:	6e697047 	cdpvs	0, 6, cr7, cr9, cr7, {2}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2284:	06f20100 	ldrbteq	r0, [r2], r0, lsl #2
    2288:	0000008d 	andeq	r0, r0, sp, lsl #1
    228c:	00694748 	rsbeq	r4, r9, r8, asr #14
	IntEnable (INT_RFC_CPE_0);
    2290:	8d0bf401 	cfstrshi	mvf15, [fp, #-4]
	_BIC (dstate, DSTATE_IRST);
    2294:	00000000 	andeq	r0, r0, r0
    2298:	d0014900 	andle	r4, r1, r0, lsl #18
    229c:	0100000e 	tsteq	r0, lr
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a0:	e4010698 	str	r0, [r1], #-1688	; 0xfffff968
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a4:	38000004 	stmdacc	r0, {r2}
	IntEnable (INT_RFC_CPE_0);
    22a8:	01000005 	tsteq	r0, r5
    22ac:	0010249c 	mulseq	r0, ip, r4
}
    22b0:	63654a00 	cmnvs	r5, #0, 20
	IntEnable (INT_RFC_CPE_0);
    22b4:	1a980100 	bne	fe6026bc <_estack+0xde5fd6bc>
    22b8:	000000a7 	andeq	r0, r0, r7, lsr #1
    22bc:	00000444 	andeq	r0, r0, r4, asr #8
    22c0:	01006d4a 	tsteq	r0, sl, asr #26
    22c4:	10242a98 	mlane	r4, r8, sl, r2
    22c8:	04570000 	ldrbeq	r0, [r7], #-0
    22cc:	ed280000 	stc	0, cr0, [r8, #-0]
    22d0:	f0000011 			; <UNDEFINED> instruction: 0xf0000011
    22d4:	f2000004 	vhadd.s8	d0, d0, d4
    22d8:	01000004 	tsteq	r0, r4
    22dc:	102202a8 	eorne	r0, r2, r8, lsr #5
    22e0:	f2000014 	vqadd.s8	d0, d0, d4
    22e4:	78000004 	stmdavc	r0, {r2}
    22e8:	01000000 	mrseq	r0, (UNDEF: 0)
    22ec:	0fd903b8 	svceq	0x00d903b8
    22f0:	1f210000 	svcne	0x00210000
    22f4:	00000014 	andeq	r0, r0, r4, lsl r0
    22f8:	00141022 	andseq	r1, r4, r2, lsr #32
    22fc:	0004f800 	andeq	pc, r4, r0, lsl #16
    2300:	00009800 	andeq	r9, r0, r0, lsl #16
    2304:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    2308:	00000ff3 	strdeq	r0, [r0], -r3
    230c:	00141f21 	andseq	r1, r4, r1, lsr #30
    2310:	f3220000 	vhadd.u32	d0, d2, d0
    2314:	10000013 	andne	r0, r0, r3, lsl r0
static void rx_int_enable () {
    2318:	b0000005 	andlt	r0, r0, r5
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    231c:	01000000 	mrseq	r0, (UNDEF: 0)
    2320:	100d03b8 			; <UNDEFINED> instruction: 0x100d03b8
    2324:	02210000 	eoreq	r0, r1, #0
    2328:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    232c:	0013f343 	andseq	pc, r3, r3, asr #6
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2330:	00051600 	andeq	r1, r5, r0, lsl #12
    2334:	00051800 	andeq	r1, r5, r0, lsl #16
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2338:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    233c:	00140221 	andseq	r0, r4, r1, lsr #4
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2340:	07000000 	streq	r0, [r0, -r0]
    2344:	0001d604 	andeq	sp, r1, r4, lsl #12
    2348:	65014900 	strvs	r4, [r1, #-2304]	; 0xfffff700
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    234c:	0100000e 	tsteq	r0, lr
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2350:	00010672 	andeq	r0, r1, r2, ror r6
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2354:	00000000 	andeq	r0, r0, r0
		if (db->status == DATA_ENTRY_FINISHED) {
    2358:	01000000 	mrseq	r0, (UNDEF: 0)
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	0010ca9c 	mulseq	r0, ip, sl
    2360:	74734a00 	ldrbtvc	r4, [r3], #-2560	; 0xfffff600
			nr++;
    2364:	18720100 	ldmdane	r2!, {r8}^
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2368:	000000a7 	andeq	r0, r0, r7, lsr #1
    236c:	00000475 	andeq	r0, r0, r5, ror r4
    2370:	6e65734a 	cdpvs	3, 6, cr7, cr5, cr10, {2}
    2374:	28720100 	ldmdacs	r2!, {r8}^
				__dp [pl + 1] = __dp [pl] - 128;
    2378:	00000244 	andeq	r0, r0, r4, asr #4
				pl = __dp [1] + 2;
    237c:	00000488 	andeq	r0, r0, r8, lsl #9
				__dp [pl + 1] = __dp [pl] - 128;
    2380:	6c61764a 	stclvs	6, cr7, [r1], #-296	; 0xfffffed8
    2384:	35720100 	ldrbcc	r0, [r2, #-256]!	; 0xffffff00
				__dp [pl] = 0;
    2388:	000000fc 	strdeq	r0, [r0], -ip
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    238c:	000004a6 	andeq	r0, r0, r6, lsr #9
    2390:	000ad64b 	andeq	sp, sl, fp, asr #12
    2394:	0e740100 	rpweqs	f0, f4, f0
			db->status = DATA_ENTRY_PENDING;
    2398:	000000c9 	andeq	r0, r0, r9, asr #1
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    239c:	00000305 	andeq	r0, r0, r5, lsl #6
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a0:	bd4c0000 	stcllt	0, cr0, [ip, #-0]
				diag ("BAD RX");
    23a4:	0100000f 	tsteq	r0, pc
    23a8:	00000178 	andeq	r0, r0, r8, ror r1
	if (nr) {
    23ac:	204d0000 	subcs	r0, sp, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b0:	00000012 	andeq	r0, r0, r2, lsl r0
}
    23b4:	b0000000 	andlt	r0, r0, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b8:	01000004 	tsteq	r0, r4
    23bc:	01420381 	smlalbbeq	r0, r2, r1, r3
    23c0:	00000012 	andeq	r0, r0, r2, lsl r0
}
    23c4:	00000000 	andeq	r0, r0, r0
    23c8:	01000000 	mrseq	r0, (UNDEF: 0)
    23cc:	10b9127e 	adcsne	r1, r9, lr, ror r2
    23d0:	132f0000 			; <UNDEFINED> instruction: 0x132f0000
    23d4:	00000012 	andeq	r0, r0, r2, lsl r0
    23d8:	00122a28 	andseq	r2, r2, r8, lsr #20
	...
    23e4:	03840100 	orreq	r0, r4, #0, 2
thread (cc1350_driver)
    23e8:	64014e00 	strvs	r4, [r1], #-3584	; 0xfffff200
    23ec:	0100000f 	tsteq	r0, pc
    23f0:	b8010662 	stmdalt	r1, {r1, r5, r6, r9, sl}
    23f4:	e800000e 	stmda	r0, {r1, r2, r3}
    23f8:	0100000e 	tsteq	r0, lr
		if (dstate & DSTATE_IRST) {
    23fc:	7501499c 	strvc	r4, [r1, #-2460]	; 0xfffff664
    2400:	0100000a 	tsteq	r0, sl
    2404:	0001064f 	andeq	r0, r1, pc, asr #12
			rf_off ();
    2408:	00000000 	andeq	r0, r0, r0
			_BIC (dstate,
    240c:	01000000 	mrseq	r0, (UNDEF: 0)
    2410:	0011079c 	mulseq	r1, ip, r7
		if (dstate & DSTATE_RXAC) {
    2414:	12512800 	subsne	r2, r1, #0, 16
	...
				rx_de ();
    2420:	5f010000 	svcpl	0x00010000
		if (paylen == 0) {
    2424:	01490003 	cmpeq	r9, r3
    2428:	00000aac 	andeq	r0, r0, ip, lsr #21
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    242c:	01063b01 	tsteq	r6, r1, lsl #22
    2430:	000004a4 	andeq	r0, r0, r4, lsr #9
    2434:	000004e4 	andeq	r0, r0, r4, ror #9
    2438:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
				sysassert (paylen <= rbuffl && paylen > 0 &&
    243c:	644a0000 	strbvs	r0, [sl], #-0
    2440:	1c3b0100 	ldfnes	f0, [fp], #-0
    2444:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2448:	000004c4 	andeq	r0, r0, r4, asr #9
    244c:	6c014900 			; <UNDEFINED> instruction: 0x6c014900
    2450:	0100000b 	tsteq	r0, fp
    2454:	6801062b 	stmdavs	r1, {r0, r1, r3, r5, r9, sl}
    2458:	a4000004 	strge	r0, [r0], #-4
		} else if (dstate & DSTATE_RXON) {
    245c:	01000004 	tsteq	r0, r4
	if (dstate & DSTATE_RFON)
    2460:	0011559c 	mulseq	r1, ip, r5
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2464:	00644a00 	rsbeq	r4, r4, r0, lsl #20
		re->status = DATA_ENTRY_PENDING;
    2468:	df1b2b01 	svcle	0x001b2b01
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    246c:	e2000000 	and	r0, r0, #0
	issue_cmd ((lword)&RF_cmdPropRx);
    2470:	00000004 	andeq	r0, r0, r4
	_BIS (dstate, DSTATE_RXAC);
    2474:	0da20149 	stfeqs	f0, [r2, #292]!	; 0x124
    2478:	20010000 	andcs	r0, r1, r0
    247c:	043c0106 	ldrteq	r0, [ip], #-262	; 0xfffffefa
    2480:	04660000 	strbteq	r0, [r6], #-0
	if (dstate & DSTATE_RXAC)
    2484:	9c010000 	stcls	0, cr0, [r1], {-0}
    2488:	0000117c 	andeq	r1, r0, ip, ror r1
				if (statid != 0xffff)
    248c:	01006e4a 	tsteq	r0, sl, asr #28
    2490:	00b81c20 	adcseq	r1, r8, r0, lsr #24
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2494:	05000000 	streq	r0, [r0, #-0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    2498:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
		if (paylen == 0) {
    249c:	000e4d01 	andeq	r4, lr, r1, lsl #26
			wait (qevent, DR_LOOP);
    24a0:	06190100 	ldreq	r0, [r9], -r0, lsl #2
    24a4:	00041001 	andeq	r1, r4, r1
			if (dstate & DSTATE_RXAC) {
    24a8:	00043c00 	andeq	r3, r4, r0, lsl #24
    24ac:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
				rx_int_enable ();
    24b0:	4f000011 	svcmi	0x00000011
			release;
    24b4:	1901006e 	stmdbne	r1, {r1, r2, r3, r5, r6}
			} else if (dstate & DSTATE_RFON) {
    24b8:	0000b81c 	andeq	fp, r0, ip, lsl r8
				delay (offdelay, DR_GOOF);
    24bc:	43500100 	cmpmi	r0, #0, 2
    24c0:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    24c4:	00000424 	andeq	r0, r0, r4, lsr #8
		if (bckf_timer) {
    24c8:	0000042e 	andeq	r0, r0, lr, lsr #8
			wait (qevent, DR_LOOP);
    24cc:	21031b01 	tstcs	r3, r1, lsl #22
    24d0:	000011c5 	andeq	r1, r0, r5, asr #3
    24d4:	78500000 	ldmdavc	r0, {}^	; <UNPREDICTABLE>
			delay (bckf_timer, DR_LOOP);
    24d8:	0100000f 	tsteq	r0, pc
    24dc:	03011415 	movweq	r1, #5141	; 0x1415
			if (dstate & DSTATE_RXAC)
    24e0:	000011d0 	ldrdeq	r1, [r0], -r0
    24e4:	01006e51 	tsteq	r0, r1, asr lr
	if (dstate & DSTATE_RFON)
    24e8:	00b82b15 	adcseq	r2, r8, r5, lsl fp
    24ec:	52000000 	andpl	r0, r0, #0
		rx_de ();
    24f0:	00000b58 	andeq	r0, r0, r8, asr fp
		RF_cmdPropTx . status = 0;
    24f4:	35011a03 	strcc	r1, [r1, #-2563]	; 0xfffff5fd
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24f8:	11ed0301 	mvnne	r0, r1, lsl #6
    24fc:	69530000 	ldmdbvs	r3, {}^	; <UNPREDICTABLE>
    2500:	0300000f 	movweq	r0, #15
		issue_cmd ((lword)&cmd_cs);
    2504:	7348011a 	movtvc	r0, #33050	; 0x811a
		if (dstate & DSTATE_IRST)
    2508:	00000000 	andeq	r0, r0, r0
    250c:	000da954 	andeq	sl, sp, r4, asr r9
    2510:	355b0300 	ldrbcc	r0, [fp, #-768]	; 0xfffffd00
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2514:	c9540301 	ldmdbgt	r4, {r0, r8, r9}^
    2518:	0300000a 	movweq	r0, #10
			delay (1, DR_XMIT);
    251c:	03013550 	movweq	r3, #5456	; 0x1550
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2520:	000e8455 	andeq	r8, lr, r5, asr r4
    2524:	01bf0f00 			; <UNDEFINED> instruction: 0x01bf0f00
    2528:	00007301 	andeq	r7, r0, r1, lsl #6
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    252c:	12200300 	eorne	r0, r0, #0, 6
    2530:	1c160000 	ldcne	0, cr0, [r6], {-0}
				RF_cmdPropTx . status = 0;
    2534:	0f00000f 	svceq	0x0000000f
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2538:	00730ec1 	rsbseq	r0, r3, r1, asr #29
				issue_cmd ((lword)&RF_cmdPropTx);
    253c:	54000000 	strpl	r0, [r0], #-0
				proceed (DR_XMIT);
    2540:	00000e54 	andeq	r0, r0, r4, asr lr
    2544:	0101900f 	tsteq	r1, pc
			txtries++;
    2548:	0a935403 	beq	fe4d755c <_estack+0xde4d255c>
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    254c:	7b0f0000 	blvc	3c2554 <__ccfg+0x3a25ac>
    2550:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    2554:	00000d01 	andeq	r0, r0, r1, lsl #26
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2558:	0103660a 	tsteq	r3, sl, lsl #12
		goto DR_LOOP__;
    255c:	12510301 	subsne	r0, r1, #67108864	; 0x4000000
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2560:	d8530000 	ldmdale	r3, {}^	; <UNPREDICTABLE>
		paylen = 0;
    2564:	0a00000c 	beq	259c <cc1350_driver+0x1b4>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	731f0366 	tstvc	pc, #-1744830463	; 0x98000001
		txtries = 0;
    256c:	00000000 	andeq	r0, r0, r0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2570:	000e2c56 	andeq	r2, lr, r6, asr ip
    2574:	014c0200 	mrseq	r0, (UNDEF: 108)
    2578:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    257c:	00000dc5 	andeq	r0, r0, r5, asr #27
    2580:	0101c402 	tsteq	r1, r2, lsl #8
		    tcvphy_top (physid) == NULL)
    2584:	0bd95703 	bleq	ff658198 <_estack+0xdf653198>
    2588:	ad020000 	stcge	0, cr0, [r2, #-0]
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	00730101 	rsbseq	r0, r3, r1, lsl #2
    2590:	56030000 	strpl	r0, [r3], -r0
			rf_off ();
    2594:	00000b2c 	andeq	r0, r0, ip, lsr #22
endthread
    2598:	0102450e 	tsteq	r2, lr, lsl #10
    259c:	fe580301 	cdp2	3, 5, cr0, cr8, cr1, {0}
    25a0:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    25a4:	0101022c 	tsteq	r1, ip, lsr #4
    25a8:	00000073 	andeq	r0, r0, r3, ror r0
    25ac:	0ae95203 	beq	ffa56dc0 <_estack+0xdfa51dc0>
    25b0:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    25b4:	03010101 	movweq	r0, #4353	; 0x1101
    25b8:	000012ab 	andeq	r1, r0, fp, lsr #5
    25bc:	000aa353 	andeq	sl, sl, r3, asr r3
    25c0:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
    25c4:	0000731f 	andeq	r7, r0, pc, lsl r3
    25c8:	68560000 	ldmdavs	r6, {}^	; <UNPREDICTABLE>
    25cc:	0b00000c 	bleq	2604 <RFCCPE0IntHandler+0x2c>
    25d0:	0101010f 	tsteq	r1, pc, lsl #2
    25d4:	0ba55403 	bleq	fe9575e8 <_estack+0xde9525e8>
void RFCCPE0IntHandler (void) {
    25d8:	ed0c0000 	stc	0, cr0, [ip, #-0]
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25dc:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
		_BIS (dstate, DSTATE_IRST);
    25e0:	00000e71 	andeq	r0, r0, r1, ror lr
    25e4:	0101d60c 	tsteq	r1, ip, lsl #12
    25e8:	0b7a5203 	bleq	1e96dfc <__ccfg+0x1e76e54>
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25ec:	40060000 	andmi	r0, r6, r0
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f0:	03010104 	movweq	r0, #4356	; 0x1104
    25f4:	000012e7 	andeq	r1, r0, r7, ror #5
	p_trigger (drvprcs, qevent);
    25f8:	000ce553 	andeq	lr, ip, r3, asr r5
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    25fc:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
    2600:	00007324 	andeq	r7, r0, r4, lsr #6
    2604:	13520000 	cmpne	r2, #0
    2608:	0600000b 	streq	r0, [r0], -fp
    260c:	01010391 			; <UNDEFINED> instruction: 0x01010391
    2610:	00131103 	andseq	r1, r3, r3, lsl #2
    2614:	0ce55300 	stcleq	3, cr5, [r5]
    2618:	91060000 	mrsls	r0, (UNDEF: 6)
    261c:	00731703 	rsbseq	r1, r3, r3, lsl #14
    2620:	3f530000 	svccc	0x00530000
	RISE_N_SHINE;
    2624:	0600000c 	streq	r0, [r0], -ip
    2628:	732a0391 			; <UNDEFINED> instruction: 0x732a0391
    262c:	00000000 	andeq	r0, r0, r0
}
    2630:	000f2f52 	andeq	r2, pc, r2, asr pc	; <UNPREDICTABLE>
    2634:	030c0600 	movweq	r0, #50688	; 0xc600
    2638:	3b030101 	blcc	c2a44 <__ccfg+0xa2a9c>
    263c:	53000013 	movwpl	r0, #19
    2640:	00000ce5 	andeq	r0, r0, r5, ror #25
    2644:	18030c06 	stmdane	r3, {r1, r2, sl, fp}
void phys_cc1350 (int phy, int mbs) {
    2648:	00000073 	andeq	r0, r0, r3, ror r0
	if (rbuffl != 0)
    264c:	000c3f53 	andeq	r3, ip, r3, asr pc
    2650:	030c0600 	movweq	r0, #50688	; 0xc600
		syserror (ETOOMANY, "cc13");
    2654:	0000732b 	andeq	r7, r0, fp, lsr #6
		syserror (EREQPAR, "cc13 mb");
    2658:	30520000 	subscc	r0, r2, r0
	if (mbs == 0)
    265c:	0600000c 	streq	r0, [r0], -ip
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2660:	010101e7 	smlatteq	r1, r7, r1, r0
		syserror (EREQPAR, "cc13 mb");
    2664:	00135803 	andseq	r5, r3, r3, lsl #16
    2668:	0ce55300 	stcleq	3, cr5, [r5]
	i = 0;
    266c:	e7060000 	str	r0, [r6, -r0]
	rbuffl = (byte) mbs;
    2670:	00731901 	rsbseq	r1, r3, r1, lsl #18
		db->config.type = 0;	// General (data in structure)
    2674:	52000000 	andpl	r0, r0, #0
	rbuffl = (byte) mbs;
    2678:	00000d73 	andeq	r0, r0, r3, ror sp
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    267c:	0101ba06 	tsteq	r1, r6, lsl #20
    2680:	13750301 	cmnne	r5, #67108864	; 0x4000000
		if (db == NULL)
    2684:	e5530000 	ldrb	r0, [r3, #-0]
			syserror (EMALLOC, "cc13");
    2688:	0600000c 	streq	r0, [r0], -ip
    268c:	731501ba 	tstvc	r5, #-2147483602	; 0x8000002e
    2690:	00000000 	andeq	r0, r0, r0
		db->status = DATA_ENTRY_PENDING;
    2694:	000e1b52 	andeq	r1, lr, r2, asr fp
		if (i)
    2698:	01390600 	teqeq	r9, r0, lsl #12
			da->pNextEntry = (byte*) db;
    269c:	ac030101 	stfges	f0, [r3], {1}
		db->length = rbuffl + 2;
    26a0:	53000013 	movwpl	r0, #19
    26a4:	00000ce5 	andeq	r0, r0, r5, ror #25
		db->config.type = 0;	// General (data in structure)
    26a8:	1b013906 	blne	50ac8 <__ccfg+0x30b20>
		db->length = rbuffl + 2;
    26ac:	00000073 	andeq	r0, r0, r3, ror r0
	db->pNextEntry = (byte*) re;
    26b0:	000bcd53 	andeq	ip, fp, r3, asr sp
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b4:	01390600 	teqeq	r9, r0, lsl #12
    26b8:	0000732e 	andeq	r7, r0, lr, lsr #6
	if (rbuffs == NULL)
    26bc:	0bb95300 	bleq	fee572c4 <_estack+0xdee522c4>
	rbuffs->pCurrEntry = (byte*) re;
    26c0:	3a060000 	bcc	1826c8 <__ccfg+0x162720>
	rbuffs->pLastEntry = NULL;
    26c4:	00731b01 	rsbseq	r1, r3, r1, lsl #22
    26c8:	52000000 	andpl	r0, r0, #0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26cc:	00000d7e 	andeq	r0, r0, lr, ror sp
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d0:	01028404 	tsteq	r2, r4, lsl #8
    26d4:	13c90301 	bicne	r0, r9, #67108864	; 0x4000000
    26d8:	4c530000 	mrami	r0, r3, acc0
	rbuffl -= 2;
    26dc:	0400000c 	streq	r0, [r0], #-12
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e0:	731e0284 	tstvc	lr, #132, 4	; 0x40000008
	rbuffl -= 2;
    26e4:	00000000 	andeq	r0, r0, r0
	physid = phy;
    26e8:	000a7b52 	andeq	r7, sl, r2, asr fp
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	02060400 	andeq	r0, r6, #0, 8
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f0:	f3030101 	vrhadd.u8	d0, d3, d1
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f4:	53000013 	movwpl	r0, #19
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f8:	00000c4c 	andeq	r0, r0, ip, asr #24
    26fc:	23020604 	movwcs	r0, #9732	; 0x2604
	utimer_add (&bckf_timer);
    2700:	00000073 	andeq	r0, r0, r3, ror r0
	drvprcs = runthread (cc1350_driver);
    2704:	000f5253 	andeq	r5, pc, r3, asr r2	; <UNPREDICTABLE>
    2708:	02060400 	andeq	r0, r6, #0, 8
    270c:	00007337 	andeq	r7, r0, r7, lsr r3
	if (drvprcs == 0)
    2710:	b7520000 	ldrblt	r0, [r2, -r0]
		syserror (ERESOURCE, "cc13");
    2714:	0400000d 	streq	r0, [r0], #-13
    2718:	01010154 	tsteq	r1, r4, asr r1
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    271c:	00141003 	andseq	r1, r4, r3
    2720:	0c4c5300 	mcrreq	3, 0, r5, ip, cr0
    2724:	54040000 	strpl	r0, [r4], #-0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2728:	00731901 	rsbseq	r1, r3, r1, lsl #18
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    272c:	52000000 	andpl	r0, r0, #0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2730:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
    2734:	01011e04 	tsteq	r1, r4, lsl #28
    2738:	142d0301 	strtne	r0, [sp], #-769	; 0xfffffcff
    273c:	4c530000 	mrami	r0, r3, acc0
    2740:	0400000c 	streq	r0, [r0], #-12
    2744:	7317011e 	tstvc	r7, #-2147483641	; 0x80000007
    2748:	00000000 	andeq	r0, r0, r0
    274c:	000c8156 	andeq	r8, ip, r6, asr r1
    2750:	04630900 	strbteq	r0, [r3], #-2304	; 0xfffff700
	plugch ();
    2754:	56030101 	strpl	r0, [r3], -r1, lsl #2
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2758:	00000be9 	andeq	r0, r0, r9, ror #23
    275c:	01045409 	tsteq	r4, r9, lsl #8
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2760:	02560301 	subseq	r0, r6, #67108864	; 0x4000000
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2764:	0900000c 	stmdbeq	r0, {r2, r3}
    2768:	0101022a 	tsteq	r1, sl, lsr #4
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    276c:	0f3d5203 	svceq	0x003d5203
}
    2770:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    2774:	03010101 	movweq	r0, #4353	; 0x1101
    2778:	0000146b 	andeq	r1, r0, fp, ror #8
    277c:	000c0e53 	andeq	r0, ip, r3, asr lr
    2780:	01680900 	cmneq	r8, r0, lsl #18
    2784:	0000731f 	andeq	r7, r0, pc, lsl r3
    2788:	48560000 	ldmdami	r6, {}^	; <UNPREDICTABLE>
    278c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    2790:	01010132 	tsteq	r1, r2, lsr r1
    2794:	0d445903 	vstreq.16	s11, [r4, #-6]	; <UNPREDICTABLE>
	...
    27a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    27a4:	000d5835 	andeq	r5, sp, r5, lsr r8
    27a8:	00051300 	andeq	r1, r5, r0, lsl #6
    27ac:	1f000000 	svcne	0x00000000
    27b0:	03000012 	movweq	r0, #18
    27b4:	00094400 	andeq	r4, r9, r0, lsl #8
    27b8:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    27bc:	0c000000 	stceq	0, cr0, [r0], {-0}
    27c0:	0000103e 	andeq	r1, r0, lr, lsr r0
    27c4:	00000664 	andeq	r0, r0, r4, ror #12
    27c8:	00000658 	andeq	r0, r0, r8, asr r6
    27cc:	00000000 	andeq	r0, r0, r0
    27d0:	00001a84 	andeq	r1, r0, r4, lsl #21
    27d4:	da060102 	ble	182be4 <__ccfg+0x162c3c>
    27d8:	02000008 	andeq	r0, r0, #8
    27dc:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    27e0:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    27e4:	03000026 	movweq	r0, #38	; 0x26
    27e8:	003f1828 	eorseq	r1, pc, r8, lsr #16
    27ec:	04020000 	streq	r0, [r2], #-0
    27f0:	0005e905 	andeq	lr, r5, r5, lsl #18
    27f4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    27f8:	000005e4 	andeq	r0, r0, r4, ror #11
    27fc:	00083103 	andeq	r3, r8, r3, lsl #2
    2800:	182e0300 	stmdane	lr!, {r8, r9}
    2804:	00000059 	andeq	r0, r0, r9, asr r0
    2808:	d8080102 	stmdale	r8, {r1, r8}
    280c:	03000008 	movweq	r0, #8
    2810:	000003ce 	andeq	r0, r0, lr, asr #7
    2814:	6c193103 	ldfvss	f3, [r9], {3}
    2818:	02000000 	andeq	r0, r0, #0
    281c:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    2820:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    2824:	03000008 	movweq	r0, #8
    2828:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
    282c:	04020000 	streq	r0, [r2], #-0
    2830:	00039307 	andeq	r9, r3, r7, lsl #6
    2834:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2838:	0000038e 	andeq	r0, r0, lr, lsl #7
    283c:	69050404 	stmdbvs	r5, {r2, sl}
    2840:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    2844:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
    2848:	1a030000 	bne	c2850 <__ccfg+0xa28a8>
    284c:	04000004 	streq	r0, [r0], #-4
    2850:	00a71b28 	adceq	r1, r7, r8, lsr #22
    2854:	61050000 	mrsvs	r0, (UNDEF: 5)
    2858:	04000008 	streq	r0, [r0], #-8
strand (__outserial, const char*)
    285c:	00bf000b 	adcseq	r0, pc, fp
    2860:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    2864:	bf000009 	svclt	0x00000009
    2868:	00000000 	andeq	r0, r0, r0
endstrand
    286c:	04070001 	streq	r0, [r7], #-1
    2870:	00086303 	andeq	r6, r8, r3, lsl #6
	ptr = data;
    2874:	18630400 	stmdane	r3!, {sl}^
    2878:	0000009b 	muleq	r0, fp, r0
	if (*ptr)
    287c:	00072f03 	andeq	r2, r7, r3, lsl #30
		len = strlen (ptr);
    2880:	12260500 	eorne	r0, r6, #0, 10
    2884:	0000004d 	andeq	r0, r0, sp, asr #32
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2888:	0023ca03 	eoreq	ip, r3, r3, lsl #20
    288c:	12270500 	eorne	r0, r7, #0, 10
    2890:	00000060 	andeq	r0, r0, r0, rrx
    2894:	0000d908 	andeq	sp, r0, r8, lsl #18
    2898:	00d90900 	sbcseq	r0, r9, r0, lsl #18
	len -= quant;
    289c:	b7030000 	strlt	r0, [r3, -r0]
    28a0:	0500000e 	streq	r0, [r0, #-14]
    28a4:	00331228 	eorseq	r1, r3, r8, lsr #4
	if (len == 0) {
    28a8:	e3030000 	movw	r0, #12288	; 0x3000
		ufree (data);
    28ac:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
		finish;
    28b0:	004d122b 	subeq	r1, sp, fp, lsr #4
    28b4:	fb090000 	blx	2428be <__ccfg+0x222916>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28b8:	03000000 	movweq	r0, #0
    28bc:	0000241b 	andeq	r2, r0, fp, lsl r4
    28c0:	73122c05 	tstvc	r2, #1280	; 0x500
    28c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    28c8:	0000010c 	andeq	r0, r0, ip, lsl #2
strand (__inserial, address)
    28cc:	0004f703 	andeq	pc, r4, r3, lsl #14
    28d0:	122d0500 	eorne	r0, sp, #0, 10
    28d4:	00000073 	andeq	r0, r0, r3, ror r0
    28d8:	00087103 	andeq	r7, r8, r3, lsl #2
    28dc:	102e0500 	eorne	r0, lr, r0, lsl #10
	if (__inpline != NULL)
    28e0:	00000135 	andeq	r0, r0, r5, lsr r1
    28e4:	00d9040a 	sbcseq	r0, r9, sl, lsl #8
		finish;
    28e8:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28ec:	c9093205 	stmdbgt	r9, {r0, r2, r9, ip, sp}
    28f0:	0c000001 	stceq	0, cr0, [r0], {1}
    28f4:	0000003e 	andeq	r0, r0, lr, lsr r0
    28f8:	fb073405 	blx	1cf916 <__ccfg+0x1af96e>
		umwait (IM_INIT);
    28fc:	01000000 	mrseq	r0, (UNDEF: 0)
		release;
    2900:	0c000701 	stceq	7, cr0, [r0], {1}
	savedata (data);
    2904:	000004fd 	strdeq	r0, [r0], -sp
	len = MAX_LINE_LENGTH;
    2908:	fb033505 	blx	cfd26 <__ccfg+0xafd7e>
	io (IM_READ, __cport, READ, ptr, 1);
    290c:	01000000 	mrseq	r0, (UNDEF: 0)
    2910:	0c000601 	stceq	6, cr0, [r0], {1}
    2914:	00000237 	andeq	r0, r0, r7, lsr r2
    2918:	fb033605 	blx	d0136 <__ccfg+0xb018e>
	if (ptr == (char*) data) { // new line
    291c:	01000000 	mrseq	r0, (UNDEF: 0)
    2920:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
		if (*ptr == '\0') { // bin cmd
    2924:	00000537 	andeq	r0, r0, r7, lsr r5
			proceed (IM_BIN);
    2928:	fb033705 	blx	d0546 <__ccfg+0xb059e>
    292c:	01000000 	mrseq	r0, (UNDEF: 0)
		if (*ptr < 0x20)
    2930:	0c000401 	cfstrseq	mvf0, [r0], {1}
    2934:	000007c0 	andeq	r0, r0, r0, asr #15
			proceed (IM_READ);
    2938:	fb033805 	blx	d0956 <__ccfg+0xb09ae>
    293c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (*ptr == '\n' || *ptr == '\r') {
    2940:	0d000004 	stceq	0, cr0, [r0, #-16]
    2944:	00000504 	andeq	r0, r0, r4, lsl #10
    2948:	fb073a05 	blx	1d1166 <__ccfg+0x1b11be>
		*ptr = '\0';
    294c:	01000000 	mrseq	r0, (UNDEF: 0)
		__inpline = (char*)data;
    2950:	0006ce0d 	andeq	ip, r6, sp, lsl #28
		finish;
    2954:	033c0500 	teqeq	ip, #0, 10
	if (len) {
    2958:	000000fb 	strdeq	r0, [r0], -fp
		ptr++;
    295c:	0a6e0d02 	beq	1b85d6c <__ccfg+0x1b65dc4>
    2960:	3d050000 	stccc	0, cr0, [r5, #-0]
		len--;
    2964:	0000fb03 	andeq	pc, r0, r3, lsl #22
	proceed (IM_READ);
    2968:	030d0300 	movweq	r0, #54016	; 0xd300
	io (IM_BIN, __cport, READ, ptr, 1);
    296c:	05000007 	streq	r0, [r0, #-7]
    2970:	010c083f 	tsteq	ip, pc, lsr r8
    2974:	00040000 	andeq	r0, r4, r0
    2978:	00028503 	andeq	r8, r2, r3, lsl #10
    297c:	03410500 	movteq	r0, #5376	; 0x1500
	len -= 2;
    2980:	0000013b 	andeq	r0, r0, fp, lsr r1
	if (len > *ptr + 1) // 1 for 0x04
    2984:	0001c909 	andeq	ip, r1, r9, lsl #18
    2988:	053e0e00 	ldreq	r0, [lr, #-3584]!	; 0xfffff200
		len = *ptr + 1;
    298c:	43050000 	movwmi	r0, #20480	; 0x5000
    2990:	0001d51a 	andeq	sp, r1, sl, lsl r5
	ptr++;
    2994:	0e010100 	adfeqs	f0, f1, f0
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2998:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    299c:	f60e4505 			; <UNDEFINED> instruction: 0xf60e4505
    29a0:	01000001 	tsteq	r0, r1
    29a4:	fc040a01 	stc2	10, cr0, [r4], {1}	; <UNPREDICTABLE>
    29a8:	02000001 	andeq	r0, r0, #1
    29ac:	08e10801 	stmiaeq	r1!, {r0, fp}^
	len -= quant;
    29b0:	fc080000 	stc2	0, cr0, [r8], {-0}
		__inpline = (char*)data;
    29b4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
		finish;
    29b8:	0000028e 	andeq	r0, r0, lr, lsl #5
	ptr += quant;
    29bc:	f61e4505 			; <UNDEFINED> instruction: 0xf61e4505
    29c0:	01000001 	tsteq	r0, r1
endstrand
    29c4:	06080b01 	streq	r0, [r8], -r1, lsl #22
    29c8:	0247098f 	subeq	r0, r7, #2342912	; 0x23c000
	proceed (IM_BINL);
    29cc:	010d0000 	mrseq	r0, (UNDEF: 13)
endstrand
    29d0:	06000006 	streq	r0, [r0], -r6
    29d4:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
    29d8:	0d000000 	stceq	0, cr0, [r0, #-0]
    29dc:	00000ba0 	andeq	r0, r0, r0, lsr #23
    29e0:	d9089106 	stmdble	r8, {r1, r2, r8, ip, pc}
    29e4:	04000000 	streq	r0, [r0], #-0
		if (res && (d < n))
    29e8:	0001ea0d 	andeq	lr, r1, sp, lsl #20
    29ec:	10920600 	addsne	r0, r2, r0, lsl #12
    29f0:	00000107 	andeq	r0, r0, r7, lsl #2
    29f4:	41030006 	tstmi	r3, r6
			res [d] = (char) c;
    29f8:	06000009 	streq	r0, [r0], -r9
		d++;
    29fc:	02160393 	andseq	r0, r6, #1275068418	; 0x4c000002
    2a00:	470f0000 	strmi	r0, [pc, -r0]
    2a04:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a08:	10000002 	andne	r0, r0, r2
    2a0c:	070f0e00 	streq	r0, [pc, -r0, lsl #28]
    2a10:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
				enci (10000);
    2a14:	0002530f 	andeq	r5, r2, pc, lsl #6
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a18:	0b010100 	bleq	42e20 <__ccfg+0x22e78>
    2a1c:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
	d = 0;
    2a20:	00000296 	muleq	r0, r6, r2
		c = *fm++;
    2a24:	00070a0c 	andeq	r0, r7, ip, lsl #20
		if (c == '\\') {
    2a28:	07930700 	ldreq	r0, [r3, r0, lsl #14]
			if ((c = *fm++) == '\0') {
    2a2c:	000000fb 	strdeq	r0, [r0], -fp
    2a30:	00010701 	andeq	r0, r1, r1, lsl #14
				outc ('\\');
    2a34:	0004780c 	andeq	r7, r4, ip, lsl #16
			if ((c = *fm++) == '\0') {
    2a38:	03940700 	orrseq	r0, r4, #0, 14
				outc ('\\');
    2a3c:	000000fb 	strdeq	r0, [r0], -fp
    2a40:	00000101 	andeq	r0, r0, r1, lsl #2
			outc (c);
    2a44:	07cc0300 	strbeq	r0, [ip, r0, lsl #6]
    2a48:	96070000 	strls	r0, [r7], -r0
			if (c == '\0')
    2a4c:	00026c03 	andeq	r6, r2, r3, lsl #24
    2a50:	02960800 	addseq	r0, r6, #0, 16
			outc (c);
    2a54:	a20f0000 	andge	r0, pc, #0
				outc (val);
    2a58:	b2000002 	andlt	r0, r0, #2
				val = (word) va_arg (ap, aword);
    2a5c:	10000002 	andne	r0, r0, r2
		if (c == '%') {
    2a60:	02a70800 	adceq	r0, r7, #0, 16
    2a64:	470e0000 	strmi	r0, [lr, -r0]
			c = *fm++;
    2a68:	07000003 	streq	r0, [r0, -r3]
			switch (c) {
    2a6c:	02b2179c 	adcseq	r1, r2, #156, 14	; 0x2700000
    2a70:	01010000 	mrseq	r0, (UNDEF: 1)
    2a74:	0000e50f 	andeq	lr, r0, pc, lsl #10
    2a78:	0002d000 	andeq	sp, r2, r0
    2a7c:	08001000 	stmdaeq	r0, {ip}
    2a80:	000002c5 	andeq	r0, r0, r5, asr #5
    2a84:	0004b70e 	andeq	fp, r4, lr, lsl #14
    2a88:	13060800 	movwne	r0, #26624	; 0x6800
				outc ('%');
    2a8c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2a90:	b00e0101 	andlt	r0, lr, r1, lsl #2
				outc (c);
    2a94:	06000006 	streq	r0, [r0], -r6
    2a98:	010c0ec3 	smlabteq	ip, r3, lr, r0
    2a9c:	01010000 	mrseq	r0, (UNDEF: 1)
				if (c == '\0')
    2aa0:	0008fa11 	andeq	pc, r8, r1, lsl sl	; <UNPREDICTABLE>
				return d;
    2aa4:	016e0900 	cmneq	lr, r0, lsl #18
}
    2aa8:	0002fe10 	andeq	pc, r2, r0, lsl lr	; <UNPREDICTABLE>
    2aac:	04040a00 	streq	r0, [r4], #-2560	; 0xfffff600
			switch (c) {
    2ab0:	12000003 	andne	r0, r0, #3
    2ab4:	00031001 	andeq	r1, r3, r1
    2ab8:	00d91300 	sbcseq	r1, r9, r0, lsl #6
				for (i = 12; ; i -= 4) {
    2abc:	0f000000 	svceq	0x00000000
				val = (word) va_arg (ap, aword);
    2ac0:	00000203 	andeq	r0, r0, r3, lsl #4
						[ (val >> i) & 0xf ]);
    2ac4:	0000031b 	andeq	r0, r0, fp, lsl r3
    2ac8:	10080010 	andne	r0, r8, r0, lsl r0
    2acc:	14000003 	strne	r0, [r0], #-3
					outc (__pi_hex_enc_table
    2ad0:	00000763 	andeq	r0, r0, r3, ror #14
    2ad4:	16017f09 	strne	r7, [r1], -r9, lsl #30
					if (i == 0)
    2ad8:	0000031b 	andeq	r0, r0, fp, lsl r3
    2adc:	2a140101 	bcs	502ee8 <__ccfg+0x4e2f40>
				for (i = 12; ; i -= 4) {
    2ae0:	09000003 	stmdbeq	r0, {r0, r1}
				val = (word) va_arg (ap, aword);
    2ae4:	18140182 	ldmdane	r4, {r1, r7, r8}
				if (c == 'd' && (val & 0x8000) != 0) {
    2ae8:	01000001 	tsteq	r0, r1
				val = (word) va_arg (ap, aword);
    2aec:	03071401 	movweq	r1, #29697	; 0x7401
				if (c == 'd' && (val & 0x8000) != 0) {
    2af0:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    2af4:	010c0e02 	tsteq	ip, r2, lsl #28
					outc ('-');
    2af8:	01010000 	mrseq	r0, (UNDEF: 1)
    2afc:	03090815 	movweq	r0, #38933	; 0x9815
					val = (~val) + 1;
    2b00:	03740903 	cmneq	r4, #49152	; 0xc000
    2b04:	4e160000 	cdpmi	0, 1, cr0, cr6, cr0, {0}
				for (i = 12; ; i -= 4) {
    2b08:	09000037 	stmdbeq	r0, {r0, r1, r2, r4, r5}
				enci (10000);
    2b0c:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    2b10:	00000000 	andeq	r0, r0, r0
    2b14:	000af816 	andeq	pc, sl, r6, lsl r8	; <UNPREDICTABLE>
    2b18:	03080900 	movweq	r0, #35072	; 0x8900
    2b1c:	00011d08 	andeq	r1, r1, r8, lsl #26
    2b20:	11000400 	tstne	r0, r0, lsl #8
    2b24:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    2b28:	03030909 	movweq	r0, #14601	; 0x3909
    2b2c:	0000034d 	andeq	r0, r0, sp, asr #6
    2b30:	00003317 	andeq	r3, r0, r7, lsl r3
    2b34:	0b093000 	bleq	24eb3c <__ccfg+0x22eb94>
    2b38:	03e40803 	mvneq	r0, #196608	; 0x30000
    2b3c:	f9160000 			; <UNDEFINED> instruction: 0xf9160000
    2b40:	09000019 	stmdbeq	r0, {r0, r3, r4}
    2b44:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
    2b48:	00000000 	andeq	r0, r0, r0
    2b4c:	0008a416 	andeq	sl, r8, r6, lsl r4
    2b50:	03150900 	tsteq	r5, #0, 18
				if (c == 'd' || c == 'u') {
    2b54:	0000d908 	andeq	sp, r0, r8, lsl #18
    2b58:	be160200 	cdplt	2, 1, cr0, cr6, cr0, {0}
					if (c == 'd' &&
    2b5c:	09000048 	stmdbeq	r0, {r3, r6}
					val = va_arg (ap, lword);
    2b60:	f10b0316 			; <UNDEFINED> instruction: 0xf10b0316
					fm++;
    2b64:	04000002 	streq	r0, [r0], #-2
					if (c == 'd' &&
    2b68:	00432116 	subeq	r2, r3, r6, lsl r1
    2b6c:	03170900 	tsteq	r7, #0, 18
						outc ('-');
    2b70:	00011d09 	andeq	r1, r1, r9, lsl #26
    2b74:	07160800 	ldreq	r0, [r6, -r0, lsl #16]
						val = (~val) + 1;
    2b78:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
				enci (10000);
    2b7c:	e40f0318 	str	r0, [pc], #-792	; 2b84 <__pi_vfparse+0x17c>
					enci (1000000000UL);
    2b80:	0c000003 	stceq	0, cr0, [r0], {3}
    2b84:	00072216 	andeq	r2, r7, r6, lsl r2
    2b88:	03190900 	tsteq	r9, #0, 18
    2b8c:	0003f415 	andeq	pc, r3, r5, lsl r4	; <UNPREDICTABLE>
    2b90:	0f002c00 	svceq	0x00002c00
    2b94:	00000374 	andeq	r0, r0, r4, ror r3
    2b98:	000003f4 	strdeq	r0, [r0], -r4
    2b9c:	00009418 	andeq	r9, r0, r8, lsl r4
    2ba0:	0a000300 	beq	37a8 <NOROM_SetupGetTrimForAnabypassValue1+0x4>
    2ba4:	00038104 	andeq	r8, r3, r4, lsl #2
    2ba8:	08991100 	ldmeq	r9, {r8, ip}
    2bac:	1c090000 	stcne	0, cr0, [r9], {-0}
    2bb0:	03811b03 	orreq	r1, r1, #3072	; 0xc00
    2bb4:	79140000 	ldmdbvc	r4, {}	; <UNPREDICTABLE>
    2bb8:	09000008 	stmdbeq	r0, {r3}
    2bbc:	1614031e 			; <UNDEFINED> instruction: 0x1614031e
    2bc0:	01000004 	tsteq	r0, r4
				} else if (c == 'x') {
    2bc4:	fa040a01 	blx	1053d0 <__ccfg+0xe5428>
					for (i = 28; ; i -= 4) {
    2bc8:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
					val = va_arg (ap, lword);
    2bcc:	0000054a 	andeq	r0, r0, sl, asr #10
							[ (val >> i) & 0xf ]);
    2bd0:	d9131d0a 	ldmdble	r3, {r1, r3, r8, sl, fp, ip}
    2bd4:	01000000 	mrseq	r0, (UNDEF: 0)
						outc (__pi_hex_enc_table
    2bd8:	023e0e01 	eorseq	r0, lr, #1, 28
    2bdc:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    2be0:	0000ea1a 	andeq	lr, r0, sl, lsl sl
						if (i == 0)
    2be4:	0e010100 	adfeqs	f0, f1, f0
    2be8:	000008e6 	andeq	r0, r0, r6, ror #17
					for (i = 28; ; i -= 4) {
    2bec:	ea241e0a 	b	90a41c <__ccfg+0x8ea474>
					outc ('%');
    2bf0:	01000000 	mrseq	r0, (UNDEF: 0)
    2bf4:	09020e01 	stmdbeq	r2, {r0, r9, sl, fp}
    2bf8:	220a0000 	andcs	r0, sl, #0
					outc ('l');
    2bfc:	00041614 	andeq	r1, r4, r4, lsl r6
    2c00:	03010100 	movweq	r0, #4352	; 0x1100
				val = (word) va_arg (ap, aword);
    2c04:	00000fc5 	andeq	r0, r0, r5, asr #31
				outc (val);
    2c08:	600f440a 	andvs	r4, pc, sl, lsl #8
    2c0c:	0a000004 	beq	2c24 <__pi_vfparse+0x21c>
				while (*st != '\0') {
    2c10:	00046604 	andeq	r6, r4, r4, lsl #12
    2c14:	8d011900 	vstrhi.16	s2, [r1, #-0]	; <UNPREDICTABLE>
    2c18:	80000000 	andhi	r0, r0, r0
    2c1c:	13000004 	movwne	r0, #4
					outc (*st);
    2c20:	0000008d 	andeq	r0, r0, sp, lsl #1
    2c24:	0001f613 	andeq	pc, r1, r3, lsl r6	; <UNPREDICTABLE>
					st++;
    2c28:	008d1300 	addeq	r1, sp, r0, lsl #6
		c = *fm++;
    2c2c:	1a000000 	bne	2c34 <__pi_vfparse+0x22c>
    2c30:	0000033e 	andeq	r0, r0, lr, lsr r3
    2c34:	05070c01 	streq	r0, [r7, #-3073]	; 0xfffff3ff
char *vform (char *res, const char *fm, va_list aq) {
    2c38:	000b4403 	andeq	r4, fp, r3, lsl #8
    2c3c:	11761b20 	cmnne	r6, r0, lsr #22
	if (res != NULL) {
    2c40:	10010000 	andne	r0, r1, r0
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c44:	00010c07 	andeq	r0, r1, r7, lsl #24
    2c48:	03050100 	movweq	r0, #20736	; 0x5100
    2c4c:	20000004 	andcs	r0, r0, r4
}
    2c50:	0004461a 	andeq	r4, r4, sl, lsl r6
    2c54:	0d1a0100 	ldfeqs	f0, [sl, #-0]
	fml = strlen (fm) + 17;
    2c58:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    2c5c:	540f2000 	strpl	r2, [pc], #-0	; 2c64 <vform+0x2c>
    2c60:	bf000004 	svclt	0x00000004
	if ((res = (char*) umalloc (fml)) == NULL)
    2c64:	18000004 	stmdane	r0, {r2}
    2c68:	00000094 	muleq	r0, r4, r0
    2c6c:	fd1c0000 	ldc2	0, cr0, [ip, #-0]
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c70:	0100000f 	tsteq	r0, pc
    2c74:	04af141e 	strteq	r1, [pc], #1054	; 2c7c <vform+0x44>
    2c78:	03050000 	movweq	r0, #20480	; 0x5000
    2c7c:	20000550 	andcs	r0, r0, r0, asr r5
		ufree (res);
    2c80:	0001da1a 	andeq	sp, r1, sl, lsl sl
		goto Again;
    2c84:	13220100 			; <UNDEFINED> instruction: 0x13220100
	if (buf == NULL || fmt == NULL)
    2c88:	0b4c0305 	bleq	13038a4 <__ccfg+0x12e38fc>
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c8c:	071a2000 	ldreq	r2, [sl, -r0]
	if (buf == NULL || fmt == NULL)
    2c90:	01000004 	tsteq	r0, r4
    2c94:	03050d27 	movweq	r0, #23847	; 0x5d27
    2c98:	20000b68 	andcs	r0, r0, r8, ror #22
		    	    case 'u': scanu (lword); break;
    2c9c:	00041c1a 	andeq	r1, r4, sl, lsl ip
			while (isspace (*buf)) buf++;
    2ca0:	07300100 	ldreq	r0, [r0, -r0, lsl #2]!
    2ca4:	0b480305 	bleq	12038c0 <__ccfg+0x11e3918>
	while (*fmt != '\0') {
    2ca8:	2a1a2000 	bcs	68acb0 <__ccfg+0x66ad08>
		if (*fmt++ != '%')
    2cac:	01000004 	tsteq	r0, r4
		switch (*fmt++) {
    2cb0:	03050f31 	movweq	r0, #24369	; 0x5f31
    2cb4:	20000b4a 	andcs	r0, r0, sl, asr #22
    2cb8:	0004381a 	andeq	r3, r4, sl, lsl r8
    2cbc:	19310100 	ldmdbne	r1!, {r8}
    2cc0:	0b540305 	bleq	15038dc <__ccfg+0x14e3934>
    2cc4:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
    2cc8:	27000001 	strcs	r0, [r0, -r1]
}
    2ccc:	18000005 	stmdane	r0, {r0, r2}
		switch (*fmt++) {
    2cd0:	00000094 	muleq	r0, r4, r0
    2cd4:	ac1b0003 	ldcge	0, cr0, [fp], {3}
    2cd8:	0100000e 	tsteq	r0, lr
    2cdc:	05170a36 	ldreq	r0, [r7, #-2614]	; 0xfffff5ca
			while (isspace (*buf)) buf++;
    2ce0:	05010000 	streq	r0, [r1, #-0]
    2ce4:	000b5803 	andeq	r5, fp, r3, lsl #16
    2ce8:	03201a20 			; <UNDEFINED> instruction: 0x03201a20
    2cec:	3f010000 	svccc	0x00010000
    2cf0:	8903050c 	stmdbhi	r3, {r2, r3, r8, sl}
    2cf4:	1a000044 	bne	2e0c <vscan+0x184>
			if (*buf == '\0')
    2cf8:	0000032f 	andeq	r0, r0, pc, lsr #6
			if (*buf != ',') {
    2cfc:	050d4501 	streq	r4, [sp, #-1281]	; 0xfffffaff
			sap = va_arg (ap, char*);
    2d00:	00000003 	andeq	r0, r0, r3
			nc++;
    2d04:	01020b00 	tsteq	r2, r0, lsl #22
			if (*buf != ',') {
    2d08:	057a0949 	ldrbeq	r0, [sl, #-2377]!	; 0xfffff6b7
				while (!isspace (*buf) && *buf != ',' &&
    2d0c:	f10d0000 			; <UNDEFINED> instruction: 0xf10d0000
    2d10:	0100000f 	tsteq	r0, pc
    2d14:	00fb074a 	rscseq	r0, fp, sl, asr #14
    2d18:	0d000000 	stceq	0, cr0, [r0, #-0]
    2d1c:	000011b5 			; <UNDEFINED> instruction: 0x000011b5
    2d20:	fb074b01 	blx	1d592e <__ccfg+0x1b5986>
    2d24:	01000000 	mrseq	r0, (UNDEF: 0)
			while (isspace (*buf)) buf++;
    2d28:	10f00300 	rscsne	r0, r0, r0, lsl #6
    2d2c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2d30:	00055603 	andeq	r5, r5, r3, lsl #12
    2d34:	057a0f00 	ldrbeq	r0, [sl, #-3840]!	; 0xfffff100
    2d38:	05960000 	ldreq	r0, [r6]
			if (*buf == ',') buf++;
    2d3c:	94180000 	ldrls	r0, [r8], #-0
    2d40:	00000000 	andeq	r0, r0, r0
			*sap = '\0';
    2d44:	11161c00 	tstne	r6, r0, lsl #24
			break;
    2d48:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
		    case 'd': scani (word); break;
    2d4c:	00058611 	andeq	r8, r5, r1, lsl r6
    2d50:	58030500 	stmdapl	r3, {r8, sl}
    2d54:	0f200005 	svceq	0x00200005
    2d58:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2d5c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2d60:	00009418 	andeq	r9, r0, r8, lsl r4
    2d64:	0a000000 	beq	2d6c <vscan+0xe4>
    2d68:	00011d04 	andeq	r1, r1, r4, lsl #26
    2d6c:	10121d00 	andsne	r1, r2, r0, lsl #26
    2d70:	bd010000 	stclt	0, cr0, [r1, #-0]
    2d74:	05a80f02 	streq	r0, [r8, #3842]!	; 0xf02
    2d78:	03050000 	movweq	r0, #20480	; 0x5000
    2d7c:	20000560 	andcs	r0, r0, r0, ror #10
    2d80:	00011d0f 	andeq	r1, r1, pc, lsl #26
    2d84:	0005e100 	andeq	lr, r5, r0, lsl #2
    2d88:	00941800 	addseq	r1, r4, r0, lsl #16
    2d8c:	00000000 	andeq	r0, r0, r0
    2d90:	0010ab1d 	andseq	sl, r0, sp, lsl fp
    2d94:	02c20100 	sbceq	r0, r2, #0, 2
    2d98:	0005d10e 	andeq	sp, r5, lr, lsl #2
    2d9c:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    2da0:	1d200005 	stcne	0, cr0, [r0, #-20]!	; 0xffffffec
    2da4:	000010f9 	strdeq	r1, [r0], -r9
    2da8:	2602c201 	strcs	ip, [r2], -r1, lsl #4
    2dac:	000005d1 	ldrdeq	r0, [r0], -r1
    2db0:	05540305 	ldrbeq	r0, [r4, #-773]	; 0xfffffcfb
    2db4:	011e2000 	tsteq	lr, r0
    2db8:	00001142 	andeq	r1, r0, r2, asr #2
		    case 'u': scanu (word); break;
    2dbc:	07052f01 	streq	r2, [r5, -r1, lsl #30]
    2dc0:	00010c01 	andeq	r0, r1, r1, lsl #24
    2dc4:	00163000 	andseq	r3, r6, r0
    2dc8:	00165400 	andseq	r5, r6, r0, lsl #8
    2dcc:	1f9c0100 	svcne	0x009c0100
    2dd0:	0010df01 	andseq	sp, r0, r1, lsl #30
    2dd4:	04820100 	streq	r0, [r2], #256	; 0x100
    2dd8:	14f40106 	ldrbtne	r0, [r4], #262	; 0x106
    2ddc:	16300000 	ldrtne	r0, [r0], -r0
    2de0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2de4:	0000070e 	andeq	r0, r0, lr, lsl #14
    2de8:	00111120 	andseq	r1, r1, r0, lsr #2
    2dec:	04820100 	streq	r0, [r2], #256	; 0x100
    2df0:	00070e18 	andeq	r0, r7, r8, lsl lr
    2df4:	00052600 	andeq	r2, r5, r0, lsl #12
    2df8:	76222100 	strtvc	r2, [r2], -r0, lsl #2
    2dfc:	01006c61 	tsteq	r0, r1, ror #24
    2e00:	0c080487 	cfstrseq	mvf0, [r8], {135}	; 0x87
		    case 'x': scanx (word); break;
    2e04:	66000001 	strvs	r0, [r0], -r1
    2e08:	23000005 	movwcs	r0, #5
    2e0c:	01007061 	tsteq	r0, r1, rrx
    2e10:	c10a0488 	smlabbgt	sl, r8, r4, r0
    2e14:	02000000 	andeq	r0, r0, #0
    2e18:	62224c91 	eorvs	r4, r2, #37120	; 0x9100
    2e1c:	89010063 	stmdbhi	r1, {r0, r1, r5, r6}
    2e20:	00ef0704 	rsceq	r0, pc, r4, lsl #14
    2e24:	05a50000 	streq	r0, [r5, #0]!
    2e28:	76220000 	strtvc	r0, [r2], -r0
    2e2c:	048a0100 	streq	r0, [sl], #256	; 0x100
    2e30:	0000d907 	andeq	sp, r0, r7, lsl #18
    2e34:	0005d900 	andeq	sp, r5, r0, lsl #18
    2e38:	73692400 	cmnvc	r9, #0, 8
    2e3c:	048b0100 	streq	r0, [fp], #256	; 0x100
    2e40:	0000fb07 	andeq	pc, r0, r7, lsl #22
    2e44:	11c52500 	bicne	r2, r5, r0, lsl #10
    2e48:	b0010000 	andlt	r0, r1, r0
    2e4c:	15c00104 	strbne	r0, [r0, #260]	; 0x104
    2e50:	80260000 	eorhi	r0, r6, r0
    2e54:	9c000015 	stcls	0, cr0, [r0], {21}
    2e58:	c0000015 	andgt	r0, r0, r5, lsl r0
    2e5c:	22000006 	andcs	r0, r0, #6
    2e60:	9f010069 	svcls	0x00010069
    2e64:	00ef0a04 	rsceq	r0, pc, r4, lsl #20
    2e68:	06020000 	streq	r0, [r2], -r0
    2e6c:	27000000 	strcs	r0, [r0, -r0]
    2e70:	00000610 	andeq	r0, r0, r0, lsl r6
    2e74:	000006d9 	ldrdeq	r0, [r0], -r9
    2e78:	01006422 	tsteq	r0, r2, lsr #8
			switch (*fmt++) {
    2e7c:	0c0b04a9 	cfstrseq	mvf0, [fp], {169}	; 0xa9
    2e80:	15000001 	strne	r0, [r0, #-1]
    2e84:	00000006 	andeq	r0, r0, r6
    2e88:	00160c26 	andseq	r0, r6, r6, lsr #24
    2e8c:	00161a00 	andseq	r1, r6, r0, lsl #20
    2e90:	0006f600 	andeq	pc, r6, r0, lsl #12
		    	    case 'd': scani (lword); break;
    2e94:	00732200 	rsbseq	r2, r3, r0, lsl #4
    2e98:	0b04c601 	bleq	1346a4 <__ccfg+0x1146fc>
    2e9c:	000001f6 	strdeq	r0, [r0], -r6
    2ea0:	0000063e 	andeq	r0, r0, lr, lsr r6
    2ea4:	10c12800 	sbcne	r2, r1, r0, lsl #16
    2ea8:	15220000 	strne	r0, [r2, #-0]!
    2eac:	06400000 	strbeq	r0, [r0], -r0
    2eb0:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2eb4:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    2eb8:	00000010 	andeq	r0, r0, r0, lsl r0
    2ebc:	03040a00 	movweq	r0, #18944	; 0x4a00
    2ec0:	2a000002 	bcs	2ed0 <vscan+0x248>
    2ec4:	0000119a 	muleq	r0, sl, r1
    2ec8:	0d044701 	stceq	7, cr4, [r4, #-4]
    2ecc:	00100401 	andseq	r0, r0, r1, lsl #8
    2ed0:	00101c00 	andseq	r1, r0, r0, lsl #24
    2ed4:	539c0100 	orrspl	r0, ip, #0, 2
    2ed8:	2b000007 	blcs	2efc <vscan+0x274>
    2edc:	47010063 	strmi	r0, [r1, -r3, rrx]
    2ee0:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    2ee4:	06510000 	ldrbeq	r0, [r1], -r0
    2ee8:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2eec:	04000010 	streq	r0, [r0], #-16
		    	    case 'x': scanx (lword); break;
    2ef0:	b8000010 	stmdalt	r0, {r4}
    2ef4:	01000005 	tsteq	r0, r5
    2ef8:	29020449 	stmdbcs	r2, {r0, r3, r6, sl}
    2efc:	000010d4 	ldrdeq	r1, [r0], -r4
    2f00:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2f04:	00001090 	muleq	r0, r0, r0
    2f08:	06042801 	streq	r2, [r4], -r1, lsl #16
    2f0c:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    2f18:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    2f1c:	2b000007 	blcs	2f40 <vscan+0x2b8>
    2f20:	0100636e 	tsteq	r0, lr, ror #6
    2f24:	291c0428 	ldmdbcs	ip, {r3, r5, sl}
    2f28:	64000001 	strvs	r0, [r0], #-1
    2f2c:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    2f30:	00001162 	andeq	r1, r0, r2, ror #2
    2f34:	09043101 	stmdbeq	r4, {r0, r8, ip, sp}
    2f38:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2f3c:	00000682 	andeq	r0, r0, r2, lsl #13
    2f40:	78616d22 	stmdavc	r1!, {r1, r5, r8, sl, fp, sp, lr}^
    2f44:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    2f48:	00011d08 	andeq	r1, r1, r8, lsl #26
    2f4c:	0006a000 	andeq	sl, r6, r0
    2f50:	10a62d00 	adcne	r2, r6, r0, lsl #26
    2f54:	32010000 	andcc	r0, r1, #0
    2f58:	011d0d04 	tsteq	sp, r4, lsl #26
    2f5c:	06be0000 	ldrteq	r0, [lr], r0
		    	    case 'd': scani (lword); break;
    2f60:	2c000000 	stccs	0, cr0, [r0], {-0}
    2f64:	00114f01 	andseq	r4, r1, r1, lsl #30
    2f68:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    2f6c:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    2f78:	9c010000 	stcls	0, cr0, [r1], {-0}
		    	    case 'u': scanu (lword); break;
    2f7c:	000007e3 	andeq	r0, r0, r3, ror #15
    2f80:	6e696d2b 	cdpvs	13, 6, cr6, cr9, cr11, {1}
    2f84:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    2f88:	0001291c 	andeq	r2, r1, ip, lsl r9
    2f8c:	0006e700 	andeq	lr, r6, r0, lsl #14
    2f90:	011f0000 	tsteq	pc, r0
    2f94:	00001135 	andeq	r1, r0, r5, lsr r1
    2f98:	06040201 	streq	r0, [r4], -r1, lsl #4
    2f9c:	0014dc01 	andseq	sp, r4, r1, lsl #24
    2fa0:	0014f400 	andseq	pc, r4, r0, lsl #8
    2fa4:	0e9c0100 	fmleqe	f0, f4, f0
    2fa8:	20000008 	andcs	r0, r0, r8
    2fac:	00000077 	andeq	r0, r0, r7, ror r0
    2fb0:	19040201 	stmdbne	r4, {r0, r9}
    2fb4:	000000d9 	ldrdeq	r0, [r0], -r9
    2fb8:	000006fa 	strdeq	r0, [r0], -sl
    2fbc:	e4012c00 	str	r2, [r1], #-3072	; 0xfffff400
    2fc0:	0100000f 	tsteq	r0, pc
		    	    case 'x': scanx (lword); break;
    2fc4:	010803a3 	smlatbeq	r8, r3, r3, r0
    2fc8:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
			if ((c = *buf++) == '\0')
    2fcc:	00001400 	andeq	r1, r0, r0, lsl #8
    2fd0:	000014a8 	andeq	r1, r0, r8, lsr #9
			sap = va_arg (ap, char*);
    2fd4:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
			nc++;
    2fd8:	c2200000 	eorgt	r0, r0, #0
			break;
    2fdc:	01000018 	tsteq	r0, r8, lsl r0
			while (isspace (*buf)) buf++;
    2fe0:	d91a03a3 	ldmdble	sl, {r0, r1, r5, r7, r8, r9}
    2fe4:	0d000000 	stceq	0, cr0, [r0, #-0]
    2fe8:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
						*sap++ = *buf++;
    2fec:	00001162 	andeq	r1, r0, r2, ror #2
    2ff0:	0903ab01 	stmdbeq	r3, {r0, r8, r9, fp, sp, pc}
			while (isspace (*buf)) buf++;
    2ff4:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2ff8:	00000720 	andeq	r0, r0, r0, lsr #14
    2ffc:	00636322 	rsbeq	r6, r3, r2, lsr #6
		return 0;
    3000:	1103ab01 	tstne	r3, r1, lsl #22
    3004:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
		    case 'x': scanx (word); break;
    3008:	00000754 	andeq	r0, r0, r4, asr r7
    300c:	0011002d 	andseq	r0, r1, sp, lsr #32
		    	    case 'x': scanx (lword); break;
    3010:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    3014:	00011d15 	andeq	r1, r1, r5, lsl sp
    3018:	00077d00 	andeq	r7, r7, r0, lsl #26
    301c:	18c12d00 	stmiane	r1, {r8, sl, fp, sp}^
    3020:	af010000 	svcge	0x00010000
    3024:	011d0803 	tsteq	sp, r3, lsl #16
    3028:	07900000 	ldreq	r0, [r0, r0]
    302c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3030:	0011bb01 	andseq	fp, r1, r1, lsl #22
    3034:	037c0100 	cmneq	ip, #0, 2
    3038:	9d010106 	stflss	f0, [r1, #-24]	; 0xffffffe8
    303c:	2f000008 	svccs	0x00000008
    3040:	01006863 	tsteq	r0, r3, ror #16
    3044:	b818037c 	ldmdalt	r8, {r2, r3, r4, r5, r6, r8, r9}
    3048:	00000005 	andeq	r0, r0, r5
    304c:	000ff72a 	andeq	pc, pc, sl, lsr #14
    3050:	034a0100 	movteq	r0, #41216	; 0xa100
    3054:	0f84010d 	svceq	0x0084010d
    3058:	10040000 	andne	r0, r4, r0
    305c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3060:	000008e7 	andeq	r0, r0, r7, ror #17
    3064:	0068632b 	rsbeq	r6, r8, fp, lsr #6
    3068:	1b034a01 	blne	d5874 <__ccfg+0xb58cc>
    306c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3070:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
    3074:	0011622d 	andseq	r6, r1, sp, lsr #4
    3078:	03570100 	cmpeq	r7, #0, 2
    307c:	0005b809 	andeq	fp, r5, r9, lsl #16
    3080:	0007d800 	andeq	sp, r7, r0, lsl #16
    3084:	63632200 	cmnvs	r3, #0, 4
    3088:	03570100 	cmpeq	r7, #0, 2
    308c:	0005b811 	andeq	fp, r5, r1, lsl r8
    3090:	00081900 	andeq	r1, r8, r0, lsl #18
    3094:	01300000 	teqeq	r0, r0
    3098:	0000102d 	andeq	r1, r0, sp, lsr #32
    309c:	0602f001 	streq	pc, [r2], -r1
    30a0:	00001318 	andeq	r1, r0, r8, lsl r3
    30a4:	00001368 	andeq	r1, r0, r8, ror #6
    30a8:	09119c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}
    30ac:	ba2d0000 	blt	b430b4 <__ccfg+0xb2310c>
    30b0:	01000010 	tsteq	r0, r0, lsl r0
    30b4:	1d0802f5 	sfmne	f0, 4, [r8, #-980]	; 0xfffffc2c
    30b8:	4d000001 	stcmi	0, cr0, [r0, #-4]
    30bc:	00000008 	andeq	r0, r0, r8
    30c0:	6f690131 	svcvs	0x00690131
    30c4:	02790100 	rsbseq	r0, r9, #0, 2
    30c8:	00ef0106 	rsceq	r0, pc, r6, lsl #2
    30cc:	127c0000 	rsbsne	r0, ip, #0
    30d0:	13180000 	tstne	r8, #0
    30d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    30d8:	00000994 	muleq	r0, r4, r9
    30dc:	00110620 	andseq	r0, r1, r0, lsr #12
    30e0:	02790100 	rsbseq	r0, r9, #0, 2
    30e4:	0000d90f 	andeq	sp, r0, pc, lsl #18
    30e8:	00086b00 	andeq	r6, r8, r0, lsl #22
    30ec:	65642b00 	strbvs	r2, [r4, #-2816]!	; 0xfffff500
    30f0:	79010076 	stmdbvc	r1, {r1, r2, r4, r5, r6}
    30f4:	00d91b02 	sbcseq	r1, r9, r2, lsl #22
    30f8:	08890000 	stmeq	r9, {}	; <UNPREDICTABLE>
    30fc:	a8200000 	stmdage	r0!, {}	; <UNPREDICTABLE>
    3100:	0100000c 	tsteq	r0, ip
    3104:	d9250279 	stmdble	r5!, {r0, r3, r4, r5, r6, r9}
    3108:	a7000000 	strge	r0, [r0, -r0]
    310c:	2b000008 	blcs	3134 <NOROM_OSCClockSourceGet+0x20>
    3110:	00667562 	rsbeq	r7, r6, r2, ror #10
    3114:	36027901 	strcc	r7, [r2], -r1, lsl #18
    3118:	000001f6 	strdeq	r0, [r0], -r6
    311c:	000008c5 	andeq	r0, r0, r5, asr #17
    3120:	6e656c2b 	cdpvs	12, 6, cr6, cr5, cr11, {1}
    3124:	02790100 	rsbseq	r0, r9, #0, 2
    3128:	0000d940 	andeq	sp, r0, r0, asr #18
    312c:	0008e300 	andeq	lr, r8, r0, lsl #6
    3130:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    3134:	7b010074 	blvc	4330c <__ccfg+0x23364>
    3138:	00ef0702 	rsceq	r0, pc, r2, lsl #14
    313c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    3140:	1f000000 	svcne	0x00000000
    3144:	0010cd01 	andseq	ip, r0, r1, lsl #26
    3148:	02690100 	rsbeq	r0, r9, #0, 2
    314c:	12580106 	subsne	r0, r8, #-2147483647	; 0x80000001
    3150:	127c0000 	rsbsne	r0, ip, #0
    3154:	9c010000 	stcls	0, cr0, [r1], {-0}
    3158:	000009cf 	andeq	r0, r0, pc, asr #19
    315c:	0066722b 	rsbeq	r7, r6, fp, lsr #4
    3160:	1e026901 	vmlane.f16	s12, s4, s2	; <UNPREDICTABLE>
    3164:	00000454 	andeq	r0, r0, r4, asr r4
    3168:	00000937 	andeq	r0, r0, r7, lsr r9
    316c:	636f6c2b 	cmnvs	pc, #11008	; 0x2b00
    3170:	02690100 	rsbeq	r0, r9, #0, 2
    3174:	00008d26 	andeq	r8, r0, r6, lsr #26
    3178:	00096000 	andeq	r6, r9, r0
    317c:	011f0000 	tsteq	pc, r0
    3180:	000011cc 	andeq	r1, r0, ip, asr #3
    3184:	06025f01 	streq	r5, [r2], -r1, lsl #30
    3188:	00124a01 	andseq	r4, r2, r1, lsl #20
    318c:	00125800 	andseq	r5, r2, r0, lsl #16
    3190:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    3194:	2000000a 	andcs	r0, r0, sl
    3198:	0000110c 	andeq	r1, r0, ip, lsl #2
    319c:	19025f01 	stmdbne	r2, {r0, r8, r9, sl, fp, ip, lr}
    31a0:	000001f6 	strdeq	r0, [r0], -r6
    31a4:	00000989 	andeq	r0, r0, r9, lsl #19
    31a8:	01006332 	tsteq	r0, r2, lsr r3
    31ac:	fc24025f 	stc2	2, cr0, [r4], #-380	; 0xfffffe84
    31b0:	01000001 	tsteq	r0, r1
    31b4:	006e2b51 	rsbeq	r2, lr, r1, asr fp
    31b8:	2b025f01 	blcs	9adc4 <__ccfg+0x7ae1c>
    31bc:	0000008d 	andeq	r0, r0, sp, lsl #1
    31c0:	000009a7 	andeq	r0, r0, r7, lsr #19
    31c4:	8e011f00 	cdphi	15, 0, cr1, cr1, cr0, {0}
    31c8:	01000011 	tsteq	r0, r1, lsl r0
    31cc:	01060259 	tsteq	r6, r9, asr r2
    31d0:	00001236 	andeq	r1, r0, r6, lsr r2
    31d4:	0000124a 	andeq	r1, r0, sl, asr #4
    31d8:	0a619c01 	beq	186a1e4 <__ccfg+0x184a23c>
    31dc:	0c200000 	stceq	0, cr0, [r0], #-0
    31e0:	01000011 	tsteq	r0, r1, lsl r0
    31e4:	f6190259 			; <UNDEFINED> instruction: 0xf6190259
    31e8:	ba000001 	blt	31f4 <NOROM_RFCDoorbellSendTo+0x8>
    31ec:	2b000009 	blcs	3218 <NOROM_RFCSynthPowerDown+0x4>
    31f0:	00637273 	rsbeq	r7, r3, r3, ror r2
    31f4:	2b025901 	blcs	99600 <__ccfg+0x79658>
    31f8:	0000070e 	andeq	r0, r0, lr, lsl #14
    31fc:	000009cd 	andeq	r0, r0, sp, asr #19
    3200:	01006e2b 	tsteq	r0, fp, lsr #28
    3204:	8d340259 	lfmhi	f0, 4, [r4, #-356]!	; 0xfffffe9c
    3208:	eb000000 	bl	3210 <NOROM_RFCDoorbellSendTo+0x24>
    320c:	00000009 	andeq	r0, r0, r9
    3210:	11fd011f 	mvnsne	r0, pc, lsl r1
    3214:	54010000 	strpl	r0, [r1], #-0
    3218:	00010602 	andeq	r0, r1, r2, lsl #12
    321c:	00000000 	andeq	r0, r0, r0
    3220:	01000000 	mrseq	r0, (UNDEF: 0)
    3224:	000aa69c 	muleq	sl, ip, r6
    3228:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    322c:	1a025401 	bne	98238 <__ccfg+0x78290>
    3230:	000001f6 	strdeq	r0, [r0], -r6
    3234:	000009fe 	strdeq	r0, [r0], -lr
    3238:	0100732b 	tsteq	r0, fp, lsr #6
    323c:	0e290254 	mcreq	2, 1, r0, cr9, cr4, {2}
    3240:	11000007 	tstne	r0, r7
    3244:	3200000a 	andcc	r0, r0, #10
    3248:	5401006e 	strpl	r0, [r1], #-110	; 0xffffff92
    324c:	008d3002 	addeq	r3, sp, r2
    3250:	52010000 	andpl	r0, r1, #0
    3254:	e4011f00 	str	r1, [r1], #-3840	; 0xfffff100
    3258:	01000010 	tsteq	r0, r0, lsl r0
    325c:	0106024e 	tsteq	r6, lr, asr #4
	...
    3268:	0ade9c01 	beq	ff7aa274 <_estack+0xdf7a5274>
    326c:	642b0000 	strtvs	r0, [fp], #-0
    3270:	024e0100 	subeq	r0, lr, #0, 2
    3274:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    3278:	000a2400 	andeq	r2, sl, r0, lsl #8
    327c:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3280:	28024e01 	stmdacs	r2, {r0, r9, sl, fp, lr}
    3284:	0000070e 	andeq	r0, r0, lr, lsl #14
    3288:	00000a42 	andeq	r0, r0, r2, asr #20
    328c:	d8011f00 	stmdale	r1, {r8, r9, sl, fp, ip}
    3290:	01000011 	tsteq	r0, r1, lsl r0
    3294:	01060247 	tsteq	r6, r7, asr #4
	...
    32a0:	0b259c01 	bleq	96a2ac <__ccfg+0x94a304>
    32a4:	642b0000 	strtvs	r0, [fp], #-0
    32a8:	02470100 	subeq	r0, r7, #0, 2
    32ac:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    32b0:	000a5500 	andeq	r5, sl, r0, lsl #10
    32b4:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    32b8:	29024701 	stmdbcs	r2, {r0, r8, r9, sl, lr}
    32bc:	0000070e 	andeq	r0, r0, lr, lsl #14
    32c0:	00000a73 	andeq	r0, r0, r3, ror sl
    32c4:	01006e2b 	tsteq	r0, fp, lsr #28
    32c8:	8d300247 	lfmhi	f0, 4, [r0, #-284]!	; 0xfffffee4
    32cc:	86000000 	strhi	r0, [r0], -r0
    32d0:	0000000a 	andeq	r0, r0, sl
    32d4:	0fd8011f 	svceq	0x00d8011f
    32d8:	42010000 	andmi	r0, r1, #0
    32dc:	00010602 	andeq	r0, r1, r2, lsl #12
    32e0:	00000000 	andeq	r0, r0, r0
    32e4:	01000000 	mrseq	r0, (UNDEF: 0)
    32e8:	000b5d9c 	muleq	fp, ip, sp
    32ec:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    32f0:	19024201 	stmdbne	r2, {r0, r9, lr}
    32f4:	000001f6 	strdeq	r0, [r0], -r6
    32f8:	00000a99 	muleq	r0, r9, sl
    32fc:	0100732b 	tsteq	r0, fp, lsr #6
    3300:	0e280242 	cdpeq	2, 2, cr0, cr8, cr2, {2}
    3304:	ac000007 	stcge	0, cr0, [r0], {7}
    3308:	0000000a 	andeq	r0, r0, sl
    330c:	1084012c 	addne	r0, r4, ip, lsr #2
    3310:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    3314:	8d010502 	cfstr32hi	mvfx0, [r1, #-8]
    3318:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    331c:	36000012 			; <UNDEFINED> instruction: 0x36000012
    3320:	01000012 	tsteq	r0, r2, lsl r0
    3324:	000b999c 	muleq	fp, ip, r9
    3328:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    332c:	1e023901 	vmlane.f16	s6, s4, s2	; <UNPREDICTABLE>
    3330:	0000070e 	andeq	r0, r0, lr, lsl #14
    3334:	00000aca 	andeq	r0, r0, sl, asr #21
    3338:	01006922 	tsteq	r0, r2, lsr #18
    333c:	8d06023b 	sfmhi	f0, 4, [r6, #-236]	; 0xffffff14
    3340:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    3344:	0000000a 	andeq	r0, r0, sl
    3348:	109d012c 	addsne	r0, sp, ip, lsr #2
    334c:	2d010000 	stccs	0, cr0, [r1, #-0]
    3350:	d9010602 	stmdble	r1, {r1, r9, sl}
	...
    335c:	01000000 	mrseq	r0, (UNDEF: 0)
    3360:	000be69c 	muleq	fp, ip, r6
    3364:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3368:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    336c:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    3370:	0afb0000 	beq	ffec3378 <_estack+0xdfebe378>
    3374:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3378:	022f0100 	eoreq	r0, pc, #0, 2
    337c:	0004160e 	andeq	r1, r4, lr, lsl #12
    3380:	000b1900 	andeq	r1, fp, r0, lsl #18
    3384:	00632200 	rsbeq	r2, r3, r0, lsl #4
    3388:	07023001 	streq	r3, [r2, -r1]
    338c:	000000d9 	ldrdeq	r0, [r0], -r9
    3390:	00000b37 	andeq	r0, r0, r7, lsr fp
    3394:	9e012c00 	cdpls	12, 0, cr2, cr1, cr0, {0}
    3398:	01000010 	tsteq	r0, r0, lsl r0
    339c:	0107021f 	tsteq	r7, pc, lsl r2
    33a0:	0000011d 	andeq	r0, r0, sp, lsl r1
    33a4:	00001204 	andeq	r1, r0, r4, lsl #4
    33a8:	00001228 	andeq	r1, r0, r8, lsr #4
    33ac:	0c229c01 	stceq	12, cr9, [r2], #-4
    33b0:	662b0000 	strtvs	r0, [fp], -r0
    33b4:	01006e75 	tsteq	r0, r5, ror lr
    33b8:	f118021f 			; <UNDEFINED> instruction: 0xf118021f
    33bc:	4a000002 	bmi	33cc <NOROM_RFCRTrim+0x1c>
    33c0:	2300000b 	movwcs	r0, #11
    33c4:	21010069 	tstcs	r1, r9, rrx
    33c8:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    33cc:	50010000 	andpl	r0, r1, r0
    33d0:	80012c00 	andhi	r2, r1, r0, lsl #24
    33d4:	01000011 	tsteq	r0, r1, lsl r0
    33d8:	01090213 	tsteq	r9, r3, lsl r2
    33dc:	000002f1 	strdeq	r0, [r0], -r1
	...
    33e8:	0c609c01 	stcleq	12, cr9, [r0], #-4
    33ec:	702b0000 	eorvc	r0, fp, r0
    33f0:	01006469 	tsteq	r0, r9, ror #8
    33f4:	1d180213 	lfmne	f0, 4, [r8, #-76]	; 0xffffffb4
    33f8:	73000001 	movwvc	r0, #1
    33fc:	2200000b 	andcs	r0, r0, #11
    3400:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
    3404:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    3408:	0b910000 	bleq	fe443410 <_estack+0xde43e410>
    340c:	1f000000 	svcne	0x00000000
    3410:	00114701 	andseq	r4, r1, r1, lsl #14
    3414:	01f50100 	mvnseq	r0, r0, lsl #2
    3418:	00000106 	andeq	r0, r0, r6, lsl #2
    341c:	00000000 	andeq	r0, r0, r0
    3420:	9c010000 	stcls	0, cr0, [r1], {-0}
    3424:	00000cc9 	andeq	r0, r0, r9, asr #25
    3428:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    342c:	01f50100 	mvnseq	r0, r0, lsl #2
    3430:	0002f117 	andeq	pc, r2, r7, lsl r1	; <UNPREDICTABLE>
    3434:	000baf00 	andeq	sl, fp, r0, lsl #30
    3438:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    343c:	f901006c 			; <UNDEFINED> instruction: 0xf901006c
    3440:	00cd0a01 	sbceq	r0, sp, r1, lsl #20
    3444:	0bcd0000 	bleq	ff34344c <_estack+0xdf33e44c>
    3448:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    344c:	01fa0100 	mvnseq	r0, r0, lsl #2
    3450:	0004160e 	andeq	r1, r4, lr, lsl #12
    3454:	000be000 	andeq	lr, fp, r0
    3458:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    345c:	1201fa01 	andne	pc, r1, #4096	; 0x1000
    3460:	00000416 	andeq	r0, r0, r6, lsl r4
    3464:	00000c14 	andeq	r0, r0, r4, lsl ip
    3468:	01006b22 	tsteq	r0, r2, lsr #22
    346c:	161601fa 			; <UNDEFINED> instruction: 0x161601fa
    3470:	32000004 	andcc	r0, r0, #4
    3474:	0000000c 	andeq	r0, r0, ip
    3478:	100d011f 	andne	r0, sp, pc, lsl r1
    347c:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    3480:	b0010601 	andlt	r0, r1, r1, lsl #12
    3484:	00000013 	andeq	r0, r0, r3, lsl r0
    3488:	01000014 	tsteq	r0, r4, lsl r0
    348c:	000d0e9c 	muleq	sp, ip, lr
    3490:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    3494:	d9010064 	stmdble	r1, {r2, r5, r6}
    3498:	011d1201 	tsteq	sp, r1, lsl #4
    349c:	0c500000 	mraeq	r0, r0, acc0
    34a0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    34a4:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    34a8:	0004160e 	andeq	r1, r4, lr, lsl #12
    34ac:	000c8400 	andeq	r8, ip, r0, lsl #8
    34b0:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    34b4:	1201dd01 	andne	sp, r1, #1, 26	; 0x40
    34b8:	00000416 	andeq	r0, r0, r6, lsl r4
    34bc:	0fd12a00 	svceq	0x00d12a00
    34c0:	c4010000 	strgt	r0, [r1], #-0
    34c4:	48010d01 	stmdami	r1, {r0, r8, sl, fp}
    34c8:	8400000f 	strhi	r0, [r0], #-15
    34cc:	0100000f 	tsteq	r0, pc
    34d0:	000d639c 	muleq	sp, ip, r3
    34d4:	69703200 	ldmdbvs	r0!, {r9, ip, sp}^
    34d8:	c4010064 	strgt	r0, [r1], #-100	; 0xffffff9c
    34dc:	04162101 	ldreq	r2, [r6], #-257	; 0xfffffeff
    34e0:	50010000 	andpl	r0, r1, r0
    34e4:	0011b02d 	andseq	fp, r1, sp, lsr #32
    34e8:	01c80100 	biceq	r0, r8, r0, lsl #2
    34ec:	00011d08 	andeq	r1, r1, r8, lsl #26
    34f0:	000cad00 	andeq	sl, ip, r0, lsl #26
    34f4:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    34f8:	0601c901 	streq	ip, [r1], -r1, lsl #18
    34fc:	0000008d 	andeq	r0, r0, sp, lsl #1
    3500:	00000cc0 	andeq	r0, r0, r0, asr #25
    3504:	01006923 	tsteq	r0, r3, lsr #18
    3508:	160e01ca 	strne	r0, [lr], -sl, asr #3
    350c:	01000004 	tsteq	r0, r4
    3510:	012c0052 	qsubeq	r0, r2, ip
    3514:	00001188 	andeq	r1, r0, r8, lsl #3
    3518:	0601b301 	streq	fp, [r1], -r1, lsl #6
    351c:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    3528:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    352c:	2b00000d 	blcs	3568 <TrimAfterColdResetWakeupFromShutDown+0x64>
    3530:	00646970 	rsbeq	r6, r4, r0, ror r9
    3534:	1301b301 	movwne	fp, #4865	; 0x1301
    3538:	0000011d 	andeq	r0, r0, sp, lsl r1
    353c:	00000cd3 	ldrdeq	r0, [r0], -r3
    3540:	01006922 	tsteq	r0, r2, lsr #18
    3544:	160e01b5 			; <UNDEFINED> instruction: 0x160e01b5
    3548:	f1000004 	cps	#4
    354c:	0000000c 	andeq	r0, r0, ip
    3550:	0ff00133 	svceq	0x00f00133
    3554:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3558:	00010601 	andeq	r0, r1, r1, lsl #12
    355c:	00000000 	andeq	r0, r0, r0
    3560:	01000000 	mrseq	r0, (UNDEF: 0)
    3564:	91011f9c 			; <UNDEFINED> instruction: 0x91011f9c
    3568:	01000027 	tsteq	r0, r7, lsr #32
    356c:	0106019a 			; <UNDEFINED> instruction: 0x0106019a
    3570:	000011cc 	andeq	r1, r0, ip, asr #3
    3574:	00001204 	andeq	r1, r0, r4, lsl #4
    3578:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    357c:	642b0000 	strtvs	r0, [fp], #-0
    3580:	019a0100 	orrseq	r0, sl, r0, lsl #2
    3584:	0000d912 	andeq	sp, r0, r2, lsl r9
    3588:	000d0f00 	andeq	r0, sp, r0, lsl #30
    358c:	00772000 	rsbseq	r2, r7, r0
    3590:	9a010000 	bls	43598 <__ccfg+0x235f0>
    3594:	00d91a01 	sbcseq	r1, r9, r1, lsl #20
    3598:	0d220000 	stceq	0, cr0, [r2, #-0]
    359c:	2c000000 	stccs	0, cr0, [r0], {-0}
    35a0:	0011e501 	andseq	lr, r1, r1, lsl #10
    35a4:	01880100 	orreq	r0, r8, r0, lsl #2
    35a8:	011d0107 	tsteq	sp, r7, lsl #2
    35ac:	11a80000 			; <UNDEFINED> instruction: 0x11a80000
    35b0:	11cc0000 	bicne	r0, ip, r0
    35b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    35b8:	00000e3e 	andeq	r0, r0, lr, lsr lr
    35bc:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    35c0:	01880100 	orreq	r0, r8, r0, lsl #2
    35c4:	00011d18 	andeq	r1, r1, r8, lsl sp
    35c8:	000d3500 	andeq	r3, sp, r0, lsl #10
    35cc:	74732b00 	ldrbtvc	r2, [r3], #-2816	; 0xfffff500
    35d0:	01880100 	orreq	r0, r8, r0, lsl #2
    35d4:	0000d922 	andeq	sp, r0, r2, lsr #18
    35d8:	000d5e00 	andeq	r5, sp, r0, lsl #28
    35dc:	00692200 	rsbeq	r2, r9, r0, lsl #4
    35e0:	0e018a01 	vmlaeq.f32	s16, s2, s2
    35e4:	00000416 	andeq	r0, r0, r6, lsl r4
    35e8:	00000d7c 	andeq	r0, r0, ip, ror sp
    35ec:	bf011f00 	svclt	0x00011f00
    35f0:	01000010 	tsteq	r0, r0, lsl r0
    35f4:	01060178 	tsteq	r6, r8, ror r1
	...
    3600:	0e969c01 	cdpeq	12, 9, cr9, cr6, cr1, {0}
    3604:	702b0000 	eorvc	r0, fp, r0
    3608:	01006469 	tsteq	r0, r9, ror #8
    360c:	1d1b0178 	ldfnes	f0, [fp, #-480]	; 0xfffffe20
    3610:	9a000001 	bls	361c <NOROM_SetupTrimDevice+0x44>
    3614:	2000000d 	andcs	r0, r0, sp
    3618:	00001117 	andeq	r1, r0, r7, lsl r1
    361c:	26017801 	strcs	r7, [r1], -r1, lsl #16
    3620:	0000011d 	andeq	r0, r0, sp, lsl r1
    3624:	00000dad 	andeq	r0, r0, sp, lsr #27
    3628:	01006923 	tsteq	r0, r3, lsr #18
    362c:	160e017c 			; <UNDEFINED> instruction: 0x160e017c
    3630:	01000004 	tsteq	r0, r4
    3634:	006a2250 	rsbeq	r2, sl, r0, asr r2
    3638:	07017d01 	streq	r7, [r1, -r1, lsl #26]
    363c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3640:	00000dcb 	andeq	r0, r0, fp, asr #27
    3644:	77011f00 	strvc	r1, [r1, -r0, lsl #30]
    3648:	01000010 	tsteq	r0, r0, lsl r0
    364c:	01060166 	tsteq	r6, r6, ror #2
    3650:	00001174 	andeq	r1, r0, r4, ror r1
    3654:	000011a8 	andeq	r1, r0, r8, lsr #3
    3658:	0edb9c01 	cdpeq	12, 13, cr9, cr11, cr1, {0}
    365c:	17340000 	ldrne	r0, [r4, -r0]!
    3660:	01000011 	tsteq	r0, r1, lsl r0
    3664:	1d1a0166 	ldfnes	f0, [sl, #-408]	; 0xfffffe68
    3668:	01000001 	tsteq	r0, r1
    366c:	006a2250 	rsbeq	r2, sl, r0, asr r2
    3670:	06016a01 	streq	r6, [r1], -r1, lsl #20
    3674:	0000008d 	andeq	r0, r0, sp, lsl #1
    3678:	00000de9 	andeq	r0, r0, r9, ror #27
    367c:	01006923 	tsteq	r0, r3, lsr #18
    3680:	160e016b 	strne	r0, [lr], -fp, ror #2
    3684:	01000004 	tsteq	r0, r4
    3688:	012e0052 	qsubeq	r0, r2, lr
    368c:	0000112b 	andeq	r1, r0, fp, lsr #2
    3690:	06015901 	streq	r5, [r1], -r1, lsl #18
    3694:	0f110101 	svceq	0x00110101
    3698:	17350000 	ldrne	r0, [r5, -r0]!
    369c:	01000011 	tsteq	r0, r1, lsl r0
    36a0:	1d170159 	ldfnes	f0, [r7, #-356]	; 0xfffffe9c
    36a4:	35000001 	strcc	r0, [r0, #-1]
    36a8:	00000077 	andeq	r0, r0, r7, ror r0
    36ac:	23015901 	movwcs	r5, #6401	; 0x1901
    36b0:	000000d9 	ldrdeq	r0, [r0], -r9
    36b4:	01006a24 	tsteq	r0, r4, lsr #20
    36b8:	ef07015d 	svc	0x0007015d
    36bc:	00000000 	andeq	r0, r0, r0
    36c0:	10b2011f 	adcsne	r0, r2, pc, lsl r1
    36c4:	53010000 	movwpl	r0, #4096	; 0x1000
    36c8:	2c010601 	stccs	6, cr0, [r1], {1}
    36cc:	40000011 	andmi	r0, r0, r1, lsl r0
    36d0:	01000011 	tsteq	r0, r1, lsl r0
    36d4:	000f3c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    36d8:	00772000 	rsbseq	r2, r7, r0
    36dc:	53010000 	movwpl	r0, #4096	; 0x1000
    36e0:	00d91401 	sbcseq	r1, r9, r1, lsl #8
    36e4:	0dfc0000 	ldcleq	0, cr0, [ip]
    36e8:	2c000000 	stccs	0, cr0, [r0], {-0}
    36ec:	00100301 	andseq	r0, r0, r1, lsl #6
    36f0:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    36f4:	011d0107 	tsteq	sp, r7, lsl #2
    36f8:	14a80000 	strtne	r0, [r8], #0
    36fc:	14dc0000 	ldrbne	r0, [ip], #0
    3700:	9c010000 	stcls	0, cr0, [r1], {-0}
    3704:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    3708:	00051a20 	andeq	r1, r5, r0, lsr #20
    370c:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    3710:	0002f11a 	andeq	pc, r2, sl, lsl r1	; <UNPREDICTABLE>
    3714:	000e0f00 	andeq	r0, lr, r0, lsl #30
    3718:	43212000 			; <UNDEFINED> instruction: 0x43212000
    371c:	2c010000 	stccs	0, cr0, [r1], {-0}
    3720:	011d2601 	tsteq	sp, r1, lsl #12
    3724:	0e2d0000 	cdpeq	0, 2, cr0, cr13, cr0, {0}
    3728:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    372c:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    3730:	0004160e 	andeq	r1, r4, lr, lsl #12
    3734:	36500100 	ldrbcc	r0, [r0], -r0, lsl #2
    3738:	000005e8 	andeq	r0, r0, r8, ror #11
    373c:	01006a22 	tsteq	r0, r2, lsr #20
    3740:	160f013d 			; <UNDEFINED> instruction: 0x160f013d
    3744:	4b000004 	blmi	375c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x64>
    3748:	0000000e 	andeq	r0, r0, lr
    374c:	68013700 	stmdavs	r1, {r8, r9, sl, ip, sp}
    3750:	01000011 	tsteq	r0, r1, lsl r0
    3754:	010106af 	smlatbeq	r1, pc, r6, r0	; <UNPREDICTABLE>
    3758:	00000fe3 	andeq	r0, r0, r3, ror #31
    375c:	6e696d38 	mcrvs	13, 3, r6, cr9, cr8, {1}
    3760:	1aaf0100 	bne	febc3b68 <_estack+0xdebbeb68>
    3764:	000000d9 	ldrdeq	r0, [r0], -r9
    3768:	000d6d39 	andeq	r6, sp, r9, lsr sp
    376c:	27af0100 	strcs	r0, [pc, r0, lsl #2]!
    3770:	000000cd 	andeq	r0, r0, sp, asr #1
    3774:	0100693a 	tsteq	r0, sl, lsr r9
    3778:	04160ebd 	ldreq	r0, [r6], #-3773	; 0xfffff143
    377c:	643a0000 	ldrtvs	r0, [sl], #-0
    3780:	07be0100 	ldreq	r0, [lr, r0, lsl #2]!
    3784:	000000d9 	ldrdeq	r0, [r0], -r9
    3788:	4b4f4d3b 	blmi	13d6c7c <__ccfg+0x13b6cd4>
    378c:	01090100 	mrseq	r0, (UNDEF: 25)
    3790:	013c0001 	teqeq	ip, r1
    3794:	000011a0 	andeq	r1, r0, r0, lsr #3
    3798:	0106a701 	tsteq	r6, r1, lsl #14
    379c:	00001058 	andeq	r1, r0, r8, asr r0
    37a0:	0000105e 	andeq	r1, r0, lr, asr r0
    37a4:	10189c01 	andsne	r9, r8, r1, lsl #24
    37a8:	743d0000 	ldrtvc	r0, [sp], #-0
    37ac:	1fa70100 	svcne	0x00a70100
    37b0:	00000129 	andeq	r0, r0, r9, lsr #2
    37b4:	00000e74 	andeq	r0, r0, r4, ror lr
    37b8:	0100763d 	tsteq	r0, sp, lsr r6
    37bc:	00d927a7 	sbcseq	r2, r9, r7, lsr #15
    37c0:	0e870000 	cdpeq	0, 8, cr0, cr7, cr0, {0}
    37c4:	3c000000 	stccc	0, cr0, [r0], {-0}
    37c8:	0011ef01 	andseq	lr, r1, r1, lsl #30
    37cc:	068f0100 	streq	r0, [pc], r0, lsl #2
    37d0:	00000001 	andeq	r0, r0, r1
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	4e9c0100 	fmlmie	f0, f4, f0
    37dc:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    37e0:	01007475 	tsteq	r0, r5, ror r4
    37e4:	01291d8f 	smlawbeq	r9, pc, sp, r1	; <UNPREDICTABLE>
    37e8:	0e9a0000 	cdpeq	0, 9, cr0, cr10, cr0, {0}
    37ec:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    37f0:	06930100 	ldreq	r0, [r3], r0, lsl #2
    37f4:	0000008d 	andeq	r0, r0, sp, lsl #1
    37f8:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
    37fc:	19013c00 	stmdbne	r1, {sl, fp, ip, sp}
    3800:	01000010 	tsteq	r0, r0, lsl r0
    3804:	2c01067f 	stccs	6, cr0, [r1], {127}	; 0x7f
    3808:	58000010 	stmdapl	r0, {r4}
    380c:	01000010 	tsteq	r0, r0, lsl r0
    3810:	0010849c 	mulseq	r0, ip, r4
    3814:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    3818:	1a7f0100 	bne	1fc3c20 <__ccfg+0x1fa3c78>
    381c:	00000129 	andeq	r0, r0, r9, lsr #2
    3820:	00000ed6 	ldrdeq	r0, [r0], -r6
    3824:	0100693e 	tsteq	r0, lr, lsr r9
    3828:	008d0683 	addeq	r0, sp, r3, lsl #13
    382c:	0eff0000 	cdpeq	0, 15, cr0, cr15, cr0, {0}
    3830:	3f000000 	svccc	0x00000000
    3834:	00111d01 	andseq	r1, r1, r1, lsl #26
    3838:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    383c:	00101c01 	andseq	r1, r0, r1, lsl #24
    3840:	00102c00 	andseq	r2, r0, r0, lsl #24
    3844:	409c0100 	addsmi	r0, ip, r0, lsl #2
    3848:	000010d8 	ldrdeq	r1, [r0], -r8
    384c:	01145f01 	tsteq	r4, r1, lsl #30
    3850:	00000416 	andeq	r0, r0, r6, lsl r4
    3854:	0010c101 	andseq	ip, r0, r1, lsl #2
    3858:	69703800 	ldmdbvs	r0!, {fp, ip, sp}^
    385c:	5f010064 	svcpl	0x00010064
    3860:	00011d22 	andeq	r1, r1, r2, lsr #26
    3864:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    3868:	16176101 	ldrne	r6, [r7], -r1, lsl #2
    386c:	00000004 	andeq	r0, r0, r4
    3870:	00102441 	andseq	r2, r0, r1, asr #8
    3874:	029e0200 	addseq	r0, lr, #0, 4
    3878:	10e20101 	rscne	r0, r2, r1, lsl #2
    387c:	e2030000 	and	r0, r3, #0
    3880:	35000010 	strcc	r0, [r0, #-16]
    3884:	00000ce5 	andeq	r0, r0, r5, ror #25
    3888:	13029e02 	movwne	r9, #11778	; 0x2e02
    388c:	00000073 	andeq	r0, r0, r3, ror r0
    3890:	02010200 	andeq	r0, r1, #0, 4
    3894:	0000115c 	andeq	r1, r0, ip, asr r1
    3898:	00109842 	andseq	r9, r0, r2, asr #16
	...
    38a4:	2e9c0100 	fmlcse	f0, f4, f0
    38a8:	43000011 	movwmi	r0, #17
    38ac:	000010aa 	andeq	r1, r0, sl, lsr #1
    38b0:	00000f1d 	andeq	r0, r0, sp, lsl pc
    38b4:	0010b644 	andseq	fp, r0, r4, asr #12
    38b8:	000f4600 	andeq	r4, pc, r0, lsl #12
    38bc:	10984500 	addsne	r4, r8, r0, lsl #10
	...
    38c8:	5f010000 	svcpl	0x00010000
    38cc:	10aa4314 	adcne	r4, sl, r4, lsl r3
    38d0:	0f640000 	svceq	0x00640000
    38d4:	b6460000 	strblt	r0, [r6], -r0
    38d8:	00000010 	andeq	r0, r0, r0, lsl r0
    38dc:	0f9e4200 	svceq	0x009e4200
    38e0:	10600000 	rsbne	r0, r0, r0
    38e4:	112c0000 			; <UNDEFINED> instruction: 0x112c0000
    38e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    38ec:	0000119a 	muleq	r0, sl, r1
    38f0:	000fad43 	andeq	sl, pc, r3, asr #26
    38f4:	000f7700 	andeq	r7, pc, r0, lsl #14
    38f8:	0fb94300 	svceq	0x00b94300
    38fc:	0f8a0000 	svceq	0x008a0000
    3900:	c5460000 	strbgt	r0, [r6, #-0]
    3904:	4600000f 	strmi	r0, [r0], -pc
    3908:	00000fcf 	andeq	r0, r0, pc, asr #31
    390c:	000f9e47 	andeq	r9, pc, r7, asr #28
    3910:	00106e00 	andseq	r6, r0, r0, lsl #28
    3914:	0005d000 	andeq	sp, r5, r0
    3918:	06af0100 	strteq	r0, [pc], r0, lsl #2
    391c:	000fb929 	andeq	fp, pc, r9, lsr #18
    3920:	0fad4300 	svceq	0x00ad4300
    3924:	0f9d0000 	svceq	0x009d0000
    3928:	d0360000 	eorsle	r0, r6, r0
    392c:	44000005 	strmi	r0, [r0], #-5
    3930:	00000fc5 	andeq	r0, r0, r5, asr #31
    3934:	00000fc6 	andeq	r0, r0, r6, asr #31
    3938:	000fcf46 	andeq	ip, pc, r6, asr #30
    393c:	0fd94800 	svceq	0x00d94800
    3940:	110a0000 	mrsne	r0, (UNDEF: 10)
    3944:	00000000 	andeq	r0, r0, r0
    3948:	0edb4200 	cdpeq	2, 13, cr4, cr11, cr0, {0}
    394c:	11400000 	mrsne	r0, (UNDEF: 64)
    3950:	11740000 	cmnne	r4, r0
    3954:	9c010000 	stcls	0, cr0, [r1], {-0}
    3958:	000011ee 	andeq	r1, r0, lr, ror #3
    395c:	000eeb43 	andeq	lr, lr, r3, asr #22
    3960:	000fe400 	andeq	lr, pc, r0, lsl #8
    3964:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    3968:	10020000 	andne	r0, r2, r0
    396c:	05460000 	strbeq	r0, [r6, #-0]
    3970:	4900000f 	stmdbmi	r0, {r0, r1, r2, r3}
    3974:	00000edb 	ldrdeq	r0, [r0], -fp
    3978:	00001152 	andeq	r1, r0, r2, asr r1
    397c:	0000115a 	andeq	r1, r0, sl, asr r1
    3980:	06015901 	streq	r5, [r1], -r1, lsl #18
    3984:	000eeb43 	andeq	lr, lr, r3, asr #22
    3988:	00102000 	andseq	r2, r0, r0
    398c:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    3990:	10330000 	eorsne	r0, r3, r0
    3994:	05460000 	strbeq	r0, [r6, #-0]
    3998:	0000000f 	andeq	r0, r0, pc
    399c:	08804a00 	stmeq	r0, {r9, fp, lr}
    39a0:	13680000 	cmnne	r8, #0
    39a4:	13b00000 	movsne	r0, #0
    39a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    39ac:	00089043 	andeq	r9, r8, r3, asr #32
    39b0:	00104600 	andseq	r4, r0, r0, lsl #12
    39b4:	08804900 	stmeq	r0, {r8, fp, lr}
    39b8:	13740000 	cmnne	r4, #0
    39bc:	137c0000 	cmnne	ip, #0
    39c0:	7c010000 	stcvc	0, cr0, [r1], {-0}
    39c4:	90430603 	subls	r0, r3, r3, lsl #12
    39c8:	64000008 	strvs	r0, [r0], #-8
    39cc:	00000010 	andeq	r0, r0, r0, lsl r0
    39d0:	13330000 	teqne	r3, #0
    39d4:	00030000 	andeq	r0, r3, r0
    39d8:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    39dc:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    39e0:	3e0c0000 	cdpcc	0, 0, cr0, cr12, cr0, {0}
    39e4:	64000012 	strvs	r0, [r0], #-18	; 0xffffffee
    39e8:	d8000006 	stmdale	r0, {r1, r2}
    39ec:	00000007 	andeq	r0, r0, r7
    39f0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    39f4:	02000029 	andeq	r0, r0, #41	; 0x29
    39f8:	08da0601 	ldmeq	sl, {r0, r9, sl}^
    39fc:	02020000 	andeq	r0, r2, #0
    3a00:	00079f05 	andeq	r9, r7, r5, lsl #30
    3a04:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3a08:	000005e9 	andeq	r0, r0, r9, ror #11
    3a0c:	e4050802 	str	r0, [r5], #-2050	; 0xfffff7fe
    3a10:	03000005 	movweq	r0, #5
    3a14:	00000831 	andeq	r0, r0, r1, lsr r8
    3a18:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    3a1c:	02000000 	andeq	r0, r0, #0
    3a20:	08d80801 	ldmeq	r8, {r0, fp}^
    3a24:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    3a28:	02000003 	andeq	r0, r0, #3
    3a2c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    3a30:	02020000 	andeq	r0, r2, #0
    3a34:	0009a607 	andeq	sl, r9, r7, lsl #12
    3a38:	08f10300 	ldmeq	r1!, {r8, r9}^
    3a3c:	34020000 	strcc	r0, [r2], #-0
    3a40:	00007319 	andeq	r7, r0, r9, lsl r3
    3a44:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3a48:	00000393 	muleq	r0, r3, r3
    3a4c:	8e070802 	cdphi	8, 0, cr0, cr7, cr2, {0}
    3a50:	04000003 	streq	r0, [r0], #-3
    3a54:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3a58:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3a5c:	00039807 	andeq	r9, r3, r7, lsl #16
    3a60:	041a0300 	ldreq	r0, [sl], #-768	; 0xfffffd00
    3a64:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    3a68:	00009b1b 	andeq	r9, r0, fp, lsl fp
    3a6c:	08610500 	stmdaeq	r1!, {r8, sl}^
    3a70:	0d040000 	stceq	0, cr0, [r4, #-0]
    3a74:	0000b300 	andeq	fp, r0, r0, lsl #6
    3a78:	09480600 	stmdbeq	r8, {r9, sl}^
    3a7c:	00b30000 	adcseq	r0, r3, r0
    3a80:	01000000 	mrseq	r0, (UNDEF: 0)
    3a84:	03040700 	movweq	r0, #18176	; 0x4700
    3a88:	00000863 	andeq	r0, r0, r3, ror #16
    3a8c:	8f186303 	svchi	0x00186303
    3a90:	03000000 	movweq	r0, #0
    3a94:	0000072f 	andeq	r0, r0, pc, lsr #14
    3a98:	41122604 	tstmi	r2, r4, lsl #12
    3a9c:	03000000 	movweq	r0, #0
    3aa0:	000023ca 	andeq	r2, r0, sl, asr #7
    3aa4:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    3aa8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3aac:	000000cd 	andeq	r0, r0, sp, asr #1
    3ab0:	0000cd09 	andeq	ip, r0, r9, lsl #26
    3ab4:	18e30300 	stmiane	r3!, {r8, r9}^
    3ab8:	2b040000 	blcs	103ac0 <__ccfg+0xe3b18>
    3abc:	00004112 	andeq	r4, r0, r2, lsl r1
    3ac0:	00e30900 	rsceq	r0, r3, r0, lsl #18
    3ac4:	e3080000 	movw	r0, #32768	; 0x8000
    3ac8:	03000000 	movweq	r0, #0
    3acc:	0000241b 	andeq	r2, r0, fp, lsl r4
    3ad0:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    3ad4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ad8:	000000f9 	strdeq	r0, [r0], -r9
    3adc:	0004f703 	andeq	pc, r4, r3, lsl #14
    3ae0:	122d0400 	eorne	r0, sp, #0, 8
    3ae4:	00000067 	andeq	r0, r0, r7, rrx
    3ae8:	00087103 	andeq	r7, r8, r3, lsl #2
    3aec:	102e0400 	eorne	r0, lr, r0, lsl #8
    3af0:	00000122 	andeq	r0, r0, r2, lsr #2
    3af4:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    3af8:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    3afc:	b6093204 	strlt	r3, [r9], -r4, lsl #4
    3b00:	0c000001 	stceq	0, cr0, [r0], {1}
    3b04:	0000003e 	andeq	r0, r0, lr, lsr r0
    3b08:	e3073404 	movw	r3, #29700	; 0x7404
    3b0c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b10:	0c000701 	stceq	7, cr0, [r0], {1}
    3b14:	000004fd 	strdeq	r0, [r0], -sp
    3b18:	e3033504 	movw	r3, #13572	; 0x3504
    3b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b20:	0c000601 	stceq	6, cr0, [r0], {1}
    3b24:	00000237 	andeq	r0, r0, r7, lsr r2
    3b28:	e3033604 	movw	r3, #13828	; 0x3604
    3b2c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b30:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    3b34:	00000537 	andeq	r0, r0, r7, lsr r5
    3b38:	e3033704 	movw	r3, #14084	; 0x3704
    3b3c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b40:	0c000401 	cfstrseq	mvf0, [r0], {1}
    3b44:	000007c0 	andeq	r0, r0, r0, asr #15
    3b48:	e3033804 	movw	r3, #14340	; 0x3804
    3b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b50:	0d000004 	stceq	0, cr0, [r0, #-16]
    3b54:	00000504 	andeq	r0, r0, r4, lsl #10
    3b58:	e3073a04 	movw	r3, #31236	; 0x7a04
    3b5c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b60:	0006ce0d 	andeq	ip, r6, sp, lsl #28
    3b64:	033c0400 	teqeq	ip, #0, 8
    3b68:	000000e3 	andeq	r0, r0, r3, ror #1
    3b6c:	0a6e0d02 	beq	1b86f7c <__ccfg+0x1b66fd4>
    3b70:	3d040000 	stccc	0, cr0, [r4, #-0]
    3b74:	0000e303 	andeq	lr, r0, r3, lsl #6
    3b78:	030d0300 	movweq	r0, #54016	; 0xd300
    3b7c:	04000007 	streq	r0, [r0], #-7
    3b80:	00f9083f 	rscseq	r0, r9, pc, lsr r8
    3b84:	00040000 	andeq	r0, r4, r0
    3b88:	00028503 	andeq	r8, r2, r3, lsl #10
    3b8c:	03410400 	movteq	r0, #5120	; 0x1400
    3b90:	00000128 	andeq	r0, r0, r8, lsr #2
    3b94:	0001b609 	andeq	fp, r1, r9, lsl #12
    3b98:	053e0e00 	ldreq	r0, [lr, #-3584]!	; 0xfffff200
    3b9c:	43040000 	movwmi	r0, #16384	; 0x4000
    3ba0:	0001c21a 	andeq	ip, r1, sl, lsl r2
    3ba4:	0e010100 	adfeqs	f0, f1, f0
    3ba8:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    3bac:	e30e4504 	movw	r4, #58628	; 0xe504
    3bb0:	01000001 	tsteq	r0, r1
    3bb4:	e9040a01 	stmdb	r4, {r0, r9, fp}
    3bb8:	02000001 	andeq	r0, r0, #1
    3bbc:	08e10801 	stmiaeq	r1!, {r0, fp}^
    3bc0:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    3bc4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3bc8:	0000028e 	andeq	r0, r0, lr, lsl #5
    3bcc:	e31e4504 	tst	lr, #4, 10	; 0x1000000
    3bd0:	01000001 	tsteq	r0, r1
    3bd4:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    3bd8:	0234098f 	eorseq	r0, r4, #2342912	; 0x23c000
    3bdc:	010d0000 	mrseq	r0, (UNDEF: 13)
    3be0:	05000006 	streq	r0, [r0, #-6]
    3be4:	00670b90 	mlseq	r7, r0, fp, r0
    3be8:	0d000000 	stceq	0, cr0, [r0, #-0]
    3bec:	00000ba0 	andeq	r0, r0, r0, lsr #23
    3bf0:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    3bf4:	04000000 	streq	r0, [r0], #-0
    3bf8:	0001ea0d 	andeq	lr, r1, sp, lsl #20
    3bfc:	10920500 	addsne	r0, r2, r0, lsl #10
    3c00:	000000ef 	andeq	r0, r0, pc, ror #1
    3c04:	41030006 	tstmi	r3, r6
    3c08:	05000009 	streq	r0, [r0, #-9]
    3c0c:	02030393 	andeq	r0, r3, #1275068418	; 0x4c000002
    3c10:	340f0000 	strcc	r0, [pc], #-0	; 3c18 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x114>
    3c14:	4b000002 	blmi	3c24 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>
    3c18:	10000002 	andne	r0, r0, r2
    3c1c:	070f0e00 	streq	r0, [pc, -r0, lsl #28]
    3c20:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    3c24:	0002400f 	andeq	r4, r2, pc
    3c28:	0a010100 	beq	44030 <__ccfg+0x24088>
    3c2c:	0000f404 	andeq	pc, r0, r4, lsl #8
    3c30:	06010b00 	streq	r0, [r1], -r0, lsl #22
    3c34:	02890991 	addeq	r0, r9, #2375680	; 0x244000
    3c38:	0a0c0000 	beq	303c40 <__ccfg+0x2e3c98>
    3c3c:	06000007 	streq	r0, [r0], -r7
    3c40:	00e30793 	smlaleq	r0, r3, r3, r7
    3c44:	07010000 	streq	r0, [r1, -r0]
    3c48:	780c0001 	stmdavc	ip, {r0}
    3c4c:	06000004 	streq	r0, [r0], -r4
    3c50:	00e30394 	smlaleq	r0, r3, r4, r3
    3c54:	01010000 	mrseq	r0, (UNDEF: 1)
    3c58:	03000000 	movweq	r0, #0
    3c5c:	000007cc 	andeq	r0, r0, ip, asr #15
    3c60:	5f039606 	svcpl	0x00039606
    3c64:	08000002 	stmdaeq	r0, {r1}
    3c68:	00000289 	andeq	r0, r0, r9, lsl #5
    3c6c:	0002950f 	andeq	r9, r2, pc, lsl #10
    3c70:	0002a500 	andeq	sl, r2, r0, lsl #10
    3c74:	08001000 	stmdaeq	r0, {ip}
    3c78:	0000029a 	muleq	r0, sl, r2
    3c7c:	0003470e 	andeq	r4, r3, lr, lsl #14
    3c80:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    3c84:	000002a5 	andeq	r0, r0, r5, lsr #5
    3c88:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    3c8c:	c3000000 	movwgt	r0, #0
    3c90:	10000002 	andne	r0, r0, r2
    3c94:	02b80800 	adcseq	r0, r8, #0, 16
    3c98:	b70e0000 	strlt	r0, [lr, -r0]
    3c9c:	07000004 	streq	r0, [r0, -r4]
    3ca0:	02c31306 	sbceq	r1, r3, #402653184	; 0x18000000
    3ca4:	01010000 	mrseq	r0, (UNDEF: 1)
    3ca8:	0006b00e 	andeq	fp, r6, lr
    3cac:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    3cb0:	000000f9 	strdeq	r0, [r0], -r9
    3cb4:	fa110101 	blx	4440c0 <__ccfg+0x424118>
    3cb8:	08000008 	stmdaeq	r0, {r3}
    3cbc:	f110016e 			; <UNDEFINED> instruction: 0xf110016e
    3cc0:	0a000002 	beq	3cd0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x7c>
    3cc4:	0002f704 	andeq	pc, r2, r4, lsl #14
    3cc8:	03011200 	movweq	r1, #4608	; 0x1200
    3ccc:	13000003 	movwne	r0, #3
    3cd0:	000000cd 	andeq	r0, r0, sp, asr #1
    3cd4:	01f00f00 	mvnseq	r0, r0, lsl #30
    3cd8:	030e0000 	movweq	r0, #57344	; 0xe000
    3cdc:	00100000 	andseq	r0, r0, r0
    3ce0:	00030308 	andeq	r0, r3, r8, lsl #6
    3ce4:	07631400 	strbeq	r1, [r3, -r0, lsl #8]!
    3ce8:	7f080000 	svcvc	0x00080000
    3cec:	030e1601 	movweq	r1, #58881	; 0xe601
    3cf0:	01010000 	mrseq	r0, (UNDEF: 1)
    3cf4:	00032a14 	andeq	r2, r3, r4, lsl sl
    3cf8:	01820800 	orreq	r0, r2, r0, lsl #16
    3cfc:	00010514 	andeq	r0, r1, r4, lsl r5
    3d00:	0b010100 	bleq	44108 <__ccfg+0x24160>
    3d04:	09080904 	stmdbeq	r8, {r2, r8, fp}
    3d08:	00000355 	andeq	r0, r0, r5, asr r3
    3d0c:	0001f00d 	andeq	pc, r1, sp
    3d10:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    3d14:	000000cd 	andeq	r0, r0, sp, asr #1
    3d18:	09350d00 	ldmdbeq	r5!, {r8, sl, fp}
    3d1c:	10090000 	andne	r0, r9, r0
    3d20:	0000cd03 	andeq	ip, r0, r3, lsl #26
    3d24:	03000200 	movweq	r0, #512	; 0x200
    3d28:	000009c2 	andeq	r0, r0, r2, asr #19
    3d2c:	31031109 	tstcc	r3, r9, lsl #2
    3d30:	0b000003 	bleq	3d44 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf0>
    3d34:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    3d38:	000003d3 	ldrdeq	r0, [r0], -r3
    3d3c:	0004070d 	andeq	r0, r4, sp, lsl #14
    3d40:	08170900 	ldmdaeq	r7, {r8, fp}
    3d44:	000003ed 	andeq	r0, r0, sp, ror #7
    3d48:	06fb0d00 	ldrbteq	r0, [fp], r0, lsl #26
    3d4c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    3d50:	00040808 	andeq	r0, r4, r8, lsl #16
    3d54:	830d0400 	movwhi	r0, #54272	; 0xd400
    3d58:	09000008 	stmdbeq	r0, {r3}
    3d5c:	043e0819 	ldrteq	r0, [lr], #-2073	; 0xfffff7e7
    3d60:	0d080000 	stceq	0, cr0, [r8, #-0]
    3d64:	0000092d 	andeq	r0, r0, sp, lsr #18
    3d68:	59081a09 	stmdbpl	r8, {r0, r3, r9, fp, ip}
    3d6c:	0c000004 	stceq	0, cr0, [r0], {4}
    3d70:	0007270d 	andeq	r2, r7, sp, lsl #14
    3d74:	081b0900 	ldmdaeq	fp, {r8, fp}
    3d78:	0000046f 	andeq	r0, r0, pc, ror #8
    3d7c:	07970d10 			; <UNDEFINED> instruction: 0x07970d10
    3d80:	1c090000 	stcne	0, cr0, [r9], {-0}
    3d84:	00046f08 	andeq	r6, r4, r8, lsl #30
    3d88:	d30d1400 	movwle	r1, #54272	; 0xd400
    3d8c:	09000001 	stmdbeq	r0, {r0}
    3d90:	046f081d 	strbteq	r0, [pc], #-2077	; 3d98 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x144>
    3d94:	0d180000 	ldceq	0, cr0, [r8, #-0]
    3d98:	0000027c 	andeq	r0, r0, ip, ror r2
    3d9c:	81061e09 	tsthi	r6, r9, lsl #28
    3da0:	1c000000 	stcne	0, cr0, [r0], {-0}
    3da4:	81011500 	tsthi	r1, r0, lsl #10
    3da8:	ed000000 	stc	0, cr0, [r0, #-0]
    3dac:	13000003 	movwne	r0, #3
    3db0:	00000081 	andeq	r0, r0, r1, lsl #1
    3db4:	00008113 	andeq	r8, r0, r3, lsl r1
    3db8:	00b51300 	adcseq	r1, r5, r0, lsl #6
    3dbc:	0a000000 	beq	3dc4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x170>
    3dc0:	0003d304 	andeq	sp, r3, r4, lsl #6
    3dc4:	81011500 	tsthi	r1, r0, lsl #10
    3dc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3dcc:	13000004 	movwne	r0, #4
    3dd0:	00000081 	andeq	r0, r0, r1, lsl #1
    3dd4:	00008113 	andeq	r8, r0, r3, lsl r1
    3dd8:	040a0000 	streq	r0, [sl], #-0
    3ddc:	000003f3 	strdeq	r0, [r0], -r3
    3de0:	00810115 	addeq	r0, r1, r5, lsl r1
    3de4:	04320000 	ldrteq	r0, [r2], #-0
    3de8:	81130000 	tsthi	r3, r0
    3dec:	13000000 	movwne	r0, #0
    3df0:	00000116 	andeq	r0, r0, r6, lsl r1
    3df4:	00008113 	andeq	r8, r0, r3, lsl r1
    3df8:	04321300 	ldrteq	r1, [r2], #-768	; 0xfffffd00
    3dfc:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3e00:	00000004 	andeq	r0, r0, r4
    3e04:	0081040a 	addeq	r0, r1, sl, lsl #8
    3e08:	040a0000 	streq	r0, [sl], #-0
    3e0c:	00000355 	andeq	r0, r0, r5, asr r3
    3e10:	040e040a 	streq	r0, [lr], #-1034	; 0xfffffbf6
    3e14:	01150000 	tsteq	r5, r0
    3e18:	00000081 	andeq	r0, r0, r1, lsl #1
    3e1c:	00000459 	andeq	r0, r0, r9, asr r4
    3e20:	00011613 	andeq	r1, r1, r3, lsl r6
    3e24:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    3e28:	0a000000 	beq	3e30 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    3e2c:	00044404 	andeq	r4, r4, r4, lsl #8
    3e30:	81011500 	tsthi	r1, r0, lsl #10
    3e34:	6f000000 	svcvs	0x00000000
    3e38:	13000004 	movwne	r0, #4
    3e3c:	00000116 	andeq	r0, r0, r6, lsl r1
    3e40:	5f040a00 	svcpl	0x00040a00
    3e44:	03000004 	movweq	r0, #4
    3e48:	00000978 	andeq	r0, r0, r8, ror r9
    3e4c:	61031f09 	tstvs	r3, r9, lsl #30
    3e50:	08000003 	stmdaeq	r0, {r0, r1}
    3e54:	00000475 	andeq	r0, r0, r5, ror r4
    3e58:	0012e816 	andseq	lr, r2, r6, lsl r8
    3e5c:	24090800 	strcs	r0, [r9], #-2048	; 0xfffff800
    3e60:	0004ae08 	andeq	sl, r4, r8, lsl #28
    3e64:	0a330d00 	beq	cc726c <__ccfg+0xca72c4>
    3e68:	25090000 	strcs	r0, [r9, #-0]
    3e6c:	0004ae18 	andeq	sl, r4, r8, lsl lr
    3e70:	140d0000 	strne	r0, [sp], #-0
    3e74:	09000012 	stmdbeq	r0, {r1, r4}
    3e78:	04ae0626 	strteq	r0, [lr], #1574	; 0x626
    3e7c:	00040000 	andeq	r0, r4, r0
    3e80:	0486040a 	streq	r0, [r6], #1034	; 0x40a
    3e84:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    3e88:	09000012 	stmdbeq	r0, {r1, r4}
    3e8c:	04861e29 	streq	r1, [r6], #3625	; 0xe29
    3e90:	04030000 	streq	r0, [r3], #-0
    3e94:	09000014 	stmdbeq	r0, {r2, r4}
    3e98:	04861e2a 	streq	r1, [r6], #3626	; 0xe2a
    3e9c:	020b0000 	andeq	r0, fp, #0
    3ea0:	36023f09 	strcc	r3, [r2], -r9, lsl #30
    3ea4:	0c000005 	stceq	0, cr0, [r0], {5}
    3ea8:	0000139d 	muleq	r0, sp, r3
    3eac:	cd094009 	stcgt	0, cr4, [r9, #-36]	; 0xffffffdc
    3eb0:	02000000 	andeq	r0, r0, #0
    3eb4:	0c000f01 	stceq	15, cr0, [r0], {1}
    3eb8:	00001456 	andeq	r1, r0, r6, asr r4
    3ebc:	cd044109 	stfgts	f4, [r4, #-36]	; 0xffffffdc
    3ec0:	02000000 	andeq	r0, r0, #0
    3ec4:	0c000e01 	stceq	14, cr0, [r0], {1}
    3ec8:	00001318 	andeq	r1, r0, r8, lsl r3
    3ecc:	cd044209 	sfmgt	f4, 4, [r4, #-36]	; 0xffffffdc
    3ed0:	02000000 	andeq	r0, r0, #0
    3ed4:	0c000d01 	stceq	13, cr0, [r0], {1}
    3ed8:	000013b6 			; <UNDEFINED> instruction: 0x000013b6
    3edc:	cd044309 	stcgt	3, cr4, [r4, #-36]	; 0xffffffdc
    3ee0:	02000000 	andeq	r0, r0, #0
    3ee4:	0c000607 	stceq	6, cr0, [r0], {7}
    3ee8:	00001412 	andeq	r1, r0, r2, lsl r4
    3eec:	cd044409 	cfstrsgt	mvf4, [r4, #-36]	; 0xffffffdc
    3ef0:	02000000 	andeq	r0, r0, #0
    3ef4:	0c000303 	stceq	3, cr0, [r0], {3}
    3ef8:	0000138f 	andeq	r1, r0, pc, lsl #7
    3efc:	cd044509 	cfstr32gt	mvfx4, [r4, #-36]	; 0xffffffdc
    3f00:	02000000 	andeq	r0, r0, #0
    3f04:	00000003 	andeq	r0, r0, r3
    3f08:	3d090217 	sfmcc	f0, 4, [r9, #-92]	; 0xffffffa4
    3f0c:	00055609 	andeq	r5, r5, r9, lsl #12
    3f10:	04ac1800 	strteq	r1, [ip], #2048	; 0x800
    3f14:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    3f18:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3f1c:	00621900 	rsbeq	r1, r2, r0, lsl #18
    3f20:	cc044609 	stcgt	6, cr4, [r4], {9}
    3f24:	00000004 	andeq	r0, r0, r4
    3f28:	00121903 	andseq	r1, r2, r3, lsl #18
    3f2c:	03470900 	movteq	r0, #30976	; 0x7900
    3f30:	00000536 	andeq	r0, r0, r6, lsr r5
    3f34:	50090817 	andpl	r0, r9, r7, lsl r8
    3f38:	00058405 	andeq	r8, r5, r5, lsl #8
    3f3c:	14381800 	ldrtne	r1, [r8], #-2048	; 0xfffff800
    3f40:	51090000 	mrspl	r0, (UNDEF: 9)
    3f44:	0004b410 	andeq	fp, r4, r0, lsl r4
    3f48:	13591800 	cmpne	r9, #0, 16
    3f4c:	52090000 	andpl	r0, r9, #0
    3f50:	0003550b 	andeq	r5, r3, fp, lsl #10
    3f54:	47160000 	ldrmi	r0, [r6, -r0]
    3f58:	0c000014 	stceq	0, cr0, [r0], {20}
    3f5c:	b7084c09 	strlt	r4, [r8, -r9, lsl #24]
    3f60:	1a000005 	bne	3f7c <NOROM_ChipInfo_GetHwRevision+0x44>
    3f64:	58090075 	stmdapl	r9, {r0, r2, r4, r5, r6}
    3f68:	00056207 	andeq	r6, r5, r7, lsl #4
    3f6c:	190d0000 	stmdbne	sp, {}	; <UNPREDICTABLE>
    3f70:	09000014 	stmdbeq	r0, {r2, r4}
    3f74:	00cd0763 	sbceq	r0, sp, r3, ror #14
    3f78:	0d080000 	stceq	0, cr0, [r8, #-0]
    3f7c:	000013f9 	strdeq	r1, [r0], -r9
    3f80:	56106809 	ldrpl	r6, [r0], -r9, lsl #16
    3f84:	0a000005 	beq	3fa0 <NOROM_ChipInfo_GetHwRevision+0x68>
    3f88:	13040300 	movwne	r0, #17152	; 0x4300
    3f8c:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    3f90:	0005841f 	andeq	r8, r5, pc, lsl r4
    3f94:	090c0b00 	stmdbeq	ip, {r8, r9, fp}
    3f98:	05e7097b 	strbeq	r0, [r7, #2427]!	; 0x97b
    3f9c:	4d0d0000 	stcmi	0, cr0, [sp, #-0]
    3fa0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3fa4:	04c0117f 	strbeq	r1, [r0], #383	; 0x17f
    3fa8:	0d000000 	stceq	0, cr0, [r0, #-0]
    3fac:	000013e5 	andeq	r1, r0, r5, ror #7
    3fb0:	56118309 	ldrpl	r8, [r1], -r9, lsl #6
    3fb4:	08000005 	stmdaeq	r0, {r0, r2}
    3fb8:	137f0300 	cmnne	pc, #0, 6
    3fbc:	92090000 	andls	r0, r9, #0
    3fc0:	0005c303 	andeq	ip, r5, r3, lsl #6
    3fc4:	03071400 	movweq	r1, #29696	; 0x7400
    3fc8:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    3fcc:	00f90e02 	rscseq	r0, r9, r2, lsl #28
    3fd0:	01010000 	mrseq	r0, (UNDEF: 1)
    3fd4:	0308081b 	movweq	r0, #34843	; 0x881b
    3fd8:	06290903 	strteq	r0, [r9], -r3, lsl #18
    3fdc:	4e1c0000 	cdpmi	0, 1, cr0, cr12, cr0, {0}
    3fe0:	08000037 	stmdaeq	r0, {r0, r1, r2, r4, r5}
    3fe4:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    3fe8:	00000000 	andeq	r0, r0, r0
    3fec:	000af81c 	andeq	pc, sl, ip, lsl r8	; <UNPREDICTABLE>
    3ff0:	03080800 	movweq	r0, #34816	; 0x8800
    3ff4:	00010a08 	andeq	r0, r1, r8, lsl #20
    3ff8:	11000400 	tstne	r0, r0, lsl #8
    3ffc:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    4000:	03030908 	movweq	r0, #14600	; 0x3908
    4004:	00000602 	andeq	r0, r0, r2, lsl #12
    4008:	0000331d 	andeq	r3, r0, sp, lsl r3
    400c:	0b083000 	bleq	210014 <__ccfg+0x1f006c>
    4010:	06990803 	ldreq	r0, [r9], r3, lsl #16
    4014:	f91c0000 			; <UNDEFINED> instruction: 0xf91c0000
    4018:	08000019 	stmdaeq	r0, {r0, r3, r4}
    401c:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    4020:	00000000 	andeq	r0, r0, r0
    4024:	0008a41c 	andeq	sl, r8, ip, lsl r4
    4028:	03150800 	tsteq	r5, #0, 16
    402c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    4030:	be1c0200 	cdplt	2, 1, cr0, cr12, cr0, {0}
    4034:	08000048 	stmdaeq	r0, {r3, r6}
    4038:	e40b0316 	str	r0, [fp], #-790	; 0xfffffcea
    403c:	04000002 	streq	r0, [r0], #-2
    4040:	0043211c 	subeq	r2, r3, ip, lsl r1
    4044:	03170800 	tsteq	r7, #0, 16
    4048:	00010a09 	andeq	r0, r1, r9, lsl #20
    404c:	071c0800 	ldreq	r0, [ip, -r0, lsl #16]
    4050:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4054:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    4058:	0c000006 	stceq	0, cr0, [r0], {6}
    405c:	0007221c 	andeq	r2, r7, ip, lsl r2
    4060:	03190800 	tsteq	r9, #0, 16
    4064:	0006a915 	andeq	sl, r6, r5, lsl r9
    4068:	0f002c00 	svceq	0x00002c00
    406c:	00000629 	andeq	r0, r0, r9, lsr #12
    4070:	000006a9 	andeq	r0, r0, r9, lsr #13
    4074:	0000881e 	andeq	r8, r0, lr, lsl r8
    4078:	0a000300 	beq	4c80 <patchImageGenfsk+0x24>
    407c:	00063604 	andeq	r3, r6, r4, lsl #12
    4080:	08991100 	ldmeq	r9, {r8, ip}
    4084:	1c080000 	stcne	0, cr0, [r8], {-0}
    4088:	06361b03 	ldrteq	r1, [r6], -r3, lsl #22
    408c:	79140000 	ldmdbvc	r4, {}	; <UNPREDICTABLE>
    4090:	08000008 	stmdaeq	r0, {r3}
    4094:	cb14031e 	blgt	504d14 <__ccfg+0x4e4d6c>
    4098:	01000006 	tsteq	r0, r6
    409c:	af040a01 	svcge	0x00040a01
    40a0:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    40a4:	0000054a 	andeq	r0, r0, sl, asr #10
    40a8:	cd131d0a 	ldcgt	13, cr1, [r3, #-40]	; 0xffffffd8
    40ac:	01000000 	mrseq	r0, (UNDEF: 0)
    40b0:	023e0e01 	eorseq	r0, lr, #1, 28
    40b4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    40b8:	0000de1a 	andeq	sp, r0, sl, lsl lr
    40bc:	0e010100 	adfeqs	f0, f1, f0
    40c0:	000008e6 	andeq	r0, r0, r6, ror #17
    40c4:	de241e0a 	cdple	14, 2, cr1, cr4, cr10, {0}
    40c8:	01000000 	mrseq	r0, (UNDEF: 0)
    40cc:	09020e01 	stmdbeq	r2, {r0, r9, sl, fp}
    40d0:	220a0000 	andcs	r0, sl, #0
    40d4:	0006cb14 	andeq	ip, r6, r4, lsl fp
    40d8:	03010100 	movweq	r0, #4352	; 0x1100
    40dc:	00001291 	muleq	r0, r1, r2
    40e0:	150f0e0b 	strne	r0, [pc, #-3595]	; 32dd <NOROM_RFCRfTrimRead+0x7d>
    40e4:	0a000007 	beq	4108 <time+0x24>
    40e8:	00071b04 	andeq	r1, r7, r4, lsl #22
    40ec:	81011500 	tsthi	r1, r0, lsl #10
    40f0:	30000000 	andcc	r0, r0, r0
    40f4:	13000007 	movwne	r0, #7
    40f8:	00000081 	andeq	r0, r0, r1, lsl #1
    40fc:	00011613 	andeq	r1, r1, r3, lsl r6
    4100:	400f0000 	andmi	r0, pc, r0
    4104:	40000007 	andmi	r0, r0, r7
    4108:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    410c:	00000088 	andeq	r0, r0, r8, lsl #1
    4110:	040a0007 	streq	r0, [sl], #-7
    4114:	000005e7 	andeq	r0, r0, r7, ror #11
    4118:	0013251f 	andseq	r2, r3, pc, lsl r5
    411c:	150d0c00 	strne	r0, [sp, #-3072]	; 0xfffff400
    4120:	00000730 	andeq	r0, r0, r0, lsr r7
    4124:	05640305 	strbeq	r0, [r4, #-773]!	; 0xfffffcfb
    4128:	090f2000 	stmdbeq	pc, {sp}	; <UNPREDICTABLE>
    412c:	68000007 	stmdavs	r0, {r0, r1, r2}
    4130:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    4134:	00000088 	andeq	r0, r0, r8, lsl #1
    4138:	941f0002 	ldrls	r0, [pc], #-2	; 4140 <_gettimeofday_r+0x24>
    413c:	0c000013 	stceq	0, cr0, [r0], {19}
    4140:	07581413 	smmlaeq	r8, r3, r4, r1
    4144:	03050000 	movweq	r0, #20480	; 0x5000
    4148:	20000590 	mulcs	r0, r0, r5
    414c:	00078a0f 	andeq	r8, r7, pc, lsl #20
    4150:	00078a00 	andeq	r8, r7, r0, lsl #20
    4154:	00881e00 	addeq	r1, r8, r0, lsl #28
    4158:	00020000 	andeq	r0, r2, r0
    415c:	04c0040a 	strbeq	r0, [r0], #1034	; 0x40a
    4160:	e01f0000 	ands	r0, pc, r0
    4164:	0c000012 	stceq	0, cr0, [r0], {18}
    4168:	077a1319 			; <UNDEFINED> instruction: 0x077a1319
    416c:	03050000 	movweq	r0, #20480	; 0x5000
    4170:	20000584 	andcs	r0, r0, r4, lsl #11
    4174:	0000810f 	andeq	r8, r0, pc, lsl #2
    4178:	0007b200 	andeq	fp, r7, r0, lsl #4
    417c:	00881e00 	addeq	r1, r8, r0, lsl #28
    4180:	00020000 	andeq	r0, r2, r0
    4184:	0012b81f 	andseq	fp, r2, pc, lsl r8
    4188:	0f1e0c00 	svceq	0x001e0c00
    418c:	000007a2 	andeq	r0, r0, r2, lsr #15
    4190:	059c0305 	ldreq	r0, [ip, #773]	; 0x305
    4194:	d40f2000 	strle	r2, [pc], #-0	; 419c <_gettimeofday>
    4198:	d4000007 	strle	r0, [r0], #-7
    419c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    41a0:	00000088 	andeq	r0, r0, r8, lsl #1
    41a4:	040a0002 	streq	r0, [sl], #-2
    41a8:	00000481 	andeq	r0, r0, r1, lsl #9
    41ac:	00143f1f 	andseq	r3, r4, pc, lsl pc
    41b0:	1b230c00 	blne	8c71b8 <__ccfg+0x8a7210>
    41b4:	000007c4 	andeq	r0, r0, r4, asr #15
    41b8:	05a80305 	streq	r0, [r8, #773]!	; 0x305
    41bc:	01202000 			; <UNDEFINED> instruction: 0x01202000
    41c0:	000013ad 	andeq	r1, r0, sp, lsr #7
    41c4:	01050d01 	tsteq	r5, r1, lsl #26
    41c8:	001c0c01 	andseq	r0, ip, r1, lsl #24
    41cc:	001c0e00 	andseq	r0, ip, r0, lsl #28
    41d0:	219c0100 	orrscs	r0, ip, r0, lsl #2
    41d4:	0012c701 	andseq	ip, r2, r1, lsl #14
    41d8:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    41dc:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    41e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    41ec:	00000863 	andeq	r0, r0, r3, ror #16
    41f0:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    41f4:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    41f8:	0000812d 	andeq	r8, r0, sp, lsr #2
    41fc:	00107700 	andseq	r7, r0, r0, lsl #14
    4200:	114e2300 	mrsne	r2, SPSR_hyp
    4204:	00000000 	andeq	r0, r0, r0
    4208:	07c00000 	strbeq	r0, [r0, r0]
    420c:	0a010000 	beq	44214 <__ccfg+0x2426c>
    4210:	60240905 	eorvs	r0, r4, r5, lsl #18
    4214:	95000011 	strls	r0, [r0, #-17]	; 0xffffffef
    4218:	25000010 	strcs	r0, [r0, #-16]
    421c:	000007c0 	andeq	r0, r0, r0, asr #15
    4220:	00116b26 	andseq	r6, r1, r6, lsr #22
    4224:	0010a800 	andseq	sl, r0, r0, lsl #16
    4228:	11762600 	cmnne	r6, r0, lsl #12
    422c:	10c60000 	sbcne	r0, r6, r0
    4230:	00000000 	andeq	r0, r0, r0
    4234:	da012700 	ble	4de3c <__ccfg+0x2de94>
    4238:	01000013 	tsteq	r0, r3, lsl r0
    423c:	010104fa 	strdeq	r0, [r1, -sl]
    4240:	00001bd0 	ldrdeq	r1, [r0], -r0
    4244:	00001c0c 	andeq	r1, r0, ip, lsl #24
    4248:	089d9c01 	ldmeq	sp, {r0, sl, fp, ip, pc}
    424c:	70220000 	eorvc	r0, r2, r0
    4250:	0100746b 	tsteq	r0, fp, ror #8
    4254:	163004fa 			; <UNDEFINED> instruction: 0x163004fa
    4258:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    425c:	28000010 	stmdacs	r0, {r4}
    4260:	fe010062 	cdp2	0, 0, cr0, cr1, cr2, {3}
    4264:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    4268:	110e0000 	mrsne	r0, (UNDEF: 14)
    426c:	0a000000 	beq	4274 <_gettimeofday+0xd8>
    4270:	0005b704 	andeq	fp, r5, r4, lsl #14
    4274:	27012100 	strcs	r2, [r1, -r0, lsl #2]
    4278:	01000012 	tsteq	r0, r2, lsl r0
    427c:	010104e9 	smlatteq	r1, r9, r4, r0
    4280:	00000116 	andeq	r0, r0, r6, lsl r1
    4284:	00001b9c 	muleq	r0, ip, fp
    4288:	00001bd0 	ldrdeq	r1, [r0], -r0
    428c:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    4290:	70220000 	eorvc	r0, r2, r0
    4294:	01007968 	tsteq	r0, r8, ror #18
    4298:	812f04e9 	smulwthi	pc, r9, r4	; <UNPREDICTABLE>
    429c:	2c000000 	stccs	0, cr0, [r0], {-0}
    42a0:	28000011 	stmdacs	r0, {r0, r4}
    42a4:	0100716f 	tsteq	r0, pc, ror #2
    42a8:	8a0b04ed 	bhi	2c5664 <__ccfg+0x2a56bc>
    42ac:	4a000007 	bmi	42d0 <_gettimeofday+0x134>
    42b0:	28000011 	stmdacs	r0, {r0, r4}
    42b4:	ee010062 	cdp	0, 0, cr0, cr1, cr2, {3}
    42b8:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    42bc:	115d0000 	cmpne	sp, r0
    42c0:	21000000 	mrscs	r0, (UNDEF: 0)
    42c4:	00129b01 	andseq	r9, r2, r1, lsl #22
    42c8:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    42cc:	01160101 	tsteq	r6, r1, lsl #2
    42d0:	1b5c0000 	blne	17042d8 <__ccfg+0x16e4330>
    42d4:	1b9c0000 	blne	fe7042dc <_estack+0xde6ff2dc>
    42d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    42dc:	00000950 	andeq	r0, r0, r0, asr r9
    42e0:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    42e4:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    42e8:	0000812f 	andeq	r8, r0, pc, lsr #2
    42ec:	00117c00 	andseq	r7, r1, r0, lsl #24
    42f0:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    42f4:	d201006e 	andle	r0, r1, #110	; 0x6e
    42f8:	04323904 	ldrteq	r3, [r2], #-2308	; 0xfffff6fc
    42fc:	119a0000 	orrsne	r0, sl, r0
    4300:	6f280000 	svcvs	0x00280000
    4304:	d7010071 	smlsdxle	r1, r1, r0, r0
    4308:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    430c:	11b80000 			; <UNDEFINED> instruction: 0x11b80000
    4310:	62280000 	eorvs	r0, r8, #0
    4314:	04d80100 	ldrbeq	r0, [r8], #256	; 0x100
    4318:	00089d0c 	andeq	r9, r8, ip, lsl #26
    431c:	0011d600 	andseq	sp, r1, r0, lsl #12
    4320:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4324:	0000142d 	andeq	r1, r0, sp, lsr #8
    4328:	0104a101 	tsteq	r4, r1, lsl #2
    432c:	00008101 	andeq	r8, r0, r1, lsl #2
    4330:	001ac000 	andseq	ip, sl, r0
    4334:	001b5c00 	andseq	r5, fp, r0, lsl #24
    4338:	eb9c0100 	bl	fe704740 <_estack+0xde6ff740>
    433c:	22000009 	andcs	r0, r0, #9
    4340:	00796870 	rsbseq	r6, r9, r0, ror r8
    4344:	2b04a101 	blcs	12c750 <__ccfg+0x10c7a8>
    4348:	00000081 	andeq	r0, r0, r1, lsl #1
    434c:	00001200 	andeq	r1, r0, r0, lsl #4
    4350:	01007022 	tsteq	r0, r2, lsr #32
    4354:	163804a1 	ldrtne	r0, [r8], -r1, lsr #9
    4358:	34000001 	strcc	r0, [r0], #-1
    435c:	22000012 	andcs	r0, r0, #18
    4360:	006e656c 	rsbeq	r6, lr, ip, ror #10
    4364:	3f04a101 	svccc	0x0004a101
    4368:	00000081 	andeq	r0, r0, r1, lsl #1
    436c:	00001268 	andeq	r1, r0, r8, ror #4
    4370:	676c7029 	strbvs	r7, [ip, -r9, lsr #32]!
    4374:	04a60100 	strteq	r0, [r6], #256	; 0x100
    4378:	00008106 	andeq	r8, r0, r6, lsl #2
    437c:	73642800 	cmnvc	r4, #0, 16
    4380:	a6010070 			; <UNDEFINED> instruction: 0xa6010070
    4384:	00810b04 	addeq	r0, r1, r4, lsl #22
    4388:	129c0000 	addsne	r0, ip, #0
    438c:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
    4390:	01007365 	tsteq	r0, r5, ror #6
    4394:	811004a6 	tsthi	r0, r6, lsr #9
    4398:	02000000 	andeq	r0, r0, #0
    439c:	612a5091 			; <UNDEFINED> instruction: 0x612a5091
    43a0:	a7010070 	smlsdxge	r1, r0, r0, r0
    43a4:	03550b04 	cmpeq	r5, #4, 22	; 0x1000
    43a8:	91020000 	mrsls	r0, (UNDEF: 2)
    43ac:	00632854 	rsbeq	r2, r3, r4, asr r8
    43b0:	0a04a801 	beq	12e3bc <__ccfg+0x10e414>
    43b4:	00000116 	andeq	r0, r0, r6, lsl r1
    43b8:	000012ba 			; <UNDEFINED> instruction: 0x000012ba
    43bc:	86012100 	strhi	r2, [r1], -r0, lsl #2
    43c0:	01000012 	tsteq	r0, r2, lsl r0
    43c4:	01010487 	smlabbeq	r1, r7, r4, r0
    43c8:	00000081 	andeq	r0, r0, r1, lsl #1
    43cc:	00001a70 	andeq	r1, r0, r0, ror sl
    43d0:	00001ac0 	andeq	r1, r0, r0, asr #21
    43d4:	0a4a9c01 	beq	12ab3e0 <__ccfg+0x128b438>
    43d8:	70220000 	eorvc	r0, r2, r0
    43dc:	01007968 	tsteq	r0, r8, ror #18
    43e0:	812b0487 	smlawbhi	fp, r7, r4, r0
    43e4:	cd000000 	stcgt	0, cr0, [r0, #-0]
    43e8:	22000012 	andcs	r0, r0, #18
    43ec:	01007370 	tsteq	r0, r0, ror r3
    43f0:	093a0487 	ldmdbeq	sl!, {r0, r1, r2, r7, sl}
    43f4:	eb000007 	bl	4418 <_gettimeofday+0x27c>
    43f8:	2b000012 	blcs	4448 <port_confs+0x2c>
    43fc:	00000a10 	andeq	r0, r0, r0, lsl sl
    4400:	42048701 	andmi	r8, r4, #262144	; 0x40000
    4404:	00000081 	andeq	r0, r0, r1, lsl #1
    4408:	00001309 	andeq	r1, r0, r9, lsl #6
    440c:	01007128 	tsteq	r0, r8, lsr #2
    4410:	8a0b048d 	bhi	2c564c <__ccfg+0x2a56a4>
    4414:	27000007 	strcs	r0, [r0, -r7]
    4418:	00000013 	andeq	r0, r0, r3, lsl r0
    441c:	1344012c 	movtne	r0, #16684	; 0x412c
    4420:	86010000 	strhi	r0, [r1], -r0
    4424:	16010103 	strne	r0, [r1], -r3, lsl #2
    4428:	01000001 	tsteq	r0, r1
    442c:	00000a91 	muleq	r0, r1, sl
    4430:	0018c22d 	andseq	ip, r8, sp, lsr #4
    4434:	03860100 	orreq	r0, r6, #0, 2
    4438:	0000812d 	andeq	r8, r0, sp, lsr #2
    443c:	73642e00 	cmnvc	r4, #0, 28
    4440:	86010070 			; <UNDEFINED> instruction: 0x86010070
    4444:	00813703 	addeq	r3, r1, r3, lsl #14
    4448:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    444c:	01007365 	tsteq	r0, r5, ror #6
    4450:	81400386 	smlalbbhi	r0, r0, r6, r3	; <UNPREDICTABLE>
    4454:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4458:	8a010070 	bhi	44620 <__ccfg+0x24678>
    445c:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    4460:	27000000 	strcs	r0, [r0, -r0]
    4464:	00127901 	andseq	r7, r2, r1, lsl #18
    4468:	037f0100 	cmneq	pc, #0, 2
    446c:	00000101 	andeq	r0, r0, r1, lsl #2
    4470:	00000000 	andeq	r0, r0, r0
    4474:	9c010000 	stcls	0, cr0, [r1], {-0}
    4478:	00000acb 	andeq	r0, r0, fp, asr #21
    447c:	01007022 	tsteq	r0, r2, lsr #32
    4480:	1632037f 			; <UNDEFINED> instruction: 0x1632037f
    4484:	56000001 	strpl	r0, [r0], -r1
    4488:	22000013 	andcs	r0, r0, #19
    448c:	00707364 	rsbseq	r7, r0, r4, ror #6
    4490:	39037f01 	stmdbcc	r3, {r0, r8, r9, sl, fp, ip, sp, lr}
    4494:	00000081 	andeq	r0, r0, r1, lsl #1
    4498:	00001369 	andeq	r1, r0, r9, ror #6
    449c:	be012100 	adflts	f2, f1, f0
    44a0:	01000013 	tsteq	r0, r3, lsl r0
    44a4:	0101036b 	tsteq	r1, fp, ror #6
    44a8:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    44b4:	0b259c01 	bleq	96b4c0 <__ccfg+0x94b518>
    44b8:	70220000 	eorvc	r0, r2, r0
    44bc:	036b0100 	cmneq	fp, #0, 2
    44c0:	00011633 	andeq	r1, r1, r3, lsr r6
    44c4:	00137c00 	andseq	r7, r3, r0, lsl #24
    44c8:	14202b00 	strtne	r2, [r0], #-2816	; 0xfffff500
    44cc:	6b010000 	blvs	444d4 <__ccfg+0x2452c>
    44d0:	00813a03 	addeq	r3, r1, r3, lsl #20
    44d4:	139a0000 	orrsne	r0, sl, #0
    44d8:	70280000 	eorvc	r0, r8, r0
    44dc:	6f010063 	svcvs	0x00010063
    44e0:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    44e4:	13b80000 			; <UNDEFINED> instruction: 0x13b80000
    44e8:	70290000 	eorvc	r0, r9, r0
    44ec:	6f010070 	svcvs	0x00010070
    44f0:	089d1103 	ldmeq	sp, {r0, r1, r8, ip}
    44f4:	27000000 	strcs	r0, [r0, -r0]
    44f8:	0012d401 	andseq	sp, r2, r1, lsl #8
    44fc:	03630100 	cmneq	r3, #0, 2
    4500:	00000101 	andeq	r0, r0, r1, lsl #2
    4504:	00000000 	andeq	r0, r0, r0
    4508:	9c010000 	stcls	0, cr0, [r1], {-0}
    450c:	00000b5f 	andeq	r0, r0, pc, asr fp
    4510:	01007022 	tsteq	r0, r2, lsr #32
    4514:	16310363 	ldrtne	r0, [r1], -r3, ror #6
    4518:	d6000001 	strle	r0, [r0], -r1
    451c:	22000013 	andcs	r0, r0, #19
    4520:	00796870 	rsbseq	r6, r9, r0, ror r8
    4524:	38036301 	stmdacc	r3, {r0, r8, r9, sp, lr}
    4528:	00000081 	andeq	r0, r0, r1, lsl #1
    452c:	000013f4 	strdeq	r1, [r0], -r4
    4530:	c9012700 	stmdbgt	r1, {r8, r9, sl, sp}
    4534:	01000013 	tsteq	r0, r3, lsl r0
    4538:	0101035a 	tsteq	r1, sl, asr r3
	...
    4544:	0b999c01 	bleq	fe66b550 <_estack+0xde666550>
    4548:	70220000 	eorvc	r0, r2, r0
    454c:	035a0100 	cmpeq	sl, #0, 2
    4550:	00011631 	andeq	r1, r1, r1, lsr r6
    4554:	00141200 	andseq	r1, r4, r0, lsl #4
    4558:	65732200 	ldrbvs	r2, [r3, #-512]!	; 0xfffffe00
    455c:	5a010073 	bpl	44730 <__ccfg+0x24788>
    4560:	00813803 	addeq	r3, r1, r3, lsl #16
    4564:	14300000 	ldrtne	r0, [r0], #-0
    4568:	2c000000 	stccs	0, cr0, [r0], {-0}
    456c:	00145f01 	andseq	r5, r4, r1, lsl #30
    4570:	03520100 	cmpeq	r2, #0, 2
    4574:	00810101 	addeq	r0, r1, r1, lsl #2
    4578:	d5010000 	strle	r0, [r1, #-0]
    457c:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    4580:	00796870 	rsbseq	r6, r9, r0, ror r8
    4584:	2d035201 	sfmcs	f5, 4, [r3, #-4]
    4588:	00000081 	andeq	r0, r0, r1, lsl #1
    458c:	74706f2e 	ldrbtvc	r6, [r0], #-3886	; 0xfffff0d2
    4590:	03520100 	cmpeq	r2, #0, 2
    4594:	00008136 	andeq	r8, r0, r6, lsr r1
    4598:	72612e00 	rsbvc	r2, r1, #0, 28
    459c:	52010067 	andpl	r0, r1, #103	; 0x67
    45a0:	01164303 	tsteq	r6, r3, lsl #6
    45a4:	21000000 	mrscs	r0, (UNDEF: 0)
    45a8:	00123201 	andseq	r3, r2, r1, lsl #4
    45ac:	03330100 	teqeq	r3, #0, 2
    45b0:	00810101 	addeq	r0, r1, r1, lsl #2
    45b4:	19a80000 	stmibne	r8!, {}	; <UNPREDICTABLE>
    45b8:	1a080000 	bne	2045c0 <__ccfg+0x1e4618>
    45bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    45c0:	00000c3e 	andeq	r0, r0, lr, lsr ip
    45c4:	00646622 	rsbeq	r6, r4, r2, lsr #12
    45c8:	2c033301 	stccs	3, cr3, [r3], {1}
    45cc:	00000081 	andeq	r0, r0, r1, lsl #1
    45d0:	0000144e 	andeq	r1, r0, lr, asr #8
    45d4:	74706f22 	ldrbtvc	r6, [r0], #-3874	; 0xfffff0de
    45d8:	03330100 	teqeq	r3, #0, 2
    45dc:	00008134 	andeq	r8, r0, r4, lsr r1
    45e0:	00148d00 	andseq	r8, r4, r0, lsl #26
    45e4:	72612200 	rsbvc	r2, r1, #0, 4
    45e8:	33010067 	movwcc	r0, #4199	; 0x1067
    45ec:	01164103 	tsteq	r6, r3, lsl #2
    45f0:	14b60000 	ldrtne	r0, [r6], #0
    45f4:	b62f0000 	strtlt	r0, [pc], -r0
    45f8:	c4000019 	strgt	r0, [r0], #-25	; 0xffffffe7
    45fc:	28000019 	stmdacs	r0, {r0, r3, r4}
    4600:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    4604:	07d41503 	ldrbeq	r1, [r4, r3, lsl #10]
    4608:	14df0000 	ldrbne	r0, [pc], #0	; 4610 <patchGenfskRfe+0x68>
    460c:	00000000 	andeq	r0, r0, r0
    4610:	12af0127 	adcne	r0, pc, #-1073741815	; 0xc0000009
    4614:	2b010000 	blcs	4461c <__ccfg+0x24674>
    4618:	00010103 	andeq	r0, r1, r3, lsl #2
    461c:	00000000 	andeq	r0, r0, r0
    4620:	01000000 	mrseq	r0, (UNDEF: 0)
    4624:	000c679c 	muleq	ip, ip, r7
    4628:	00702200 	rsbseq	r2, r0, r0, lsl #4
    462c:	2e032b01 	vmlacs.f64	d2, d3, d1
    4630:	00000116 	andeq	r0, r0, r6, lsl r1
    4634:	000014f2 	strdeq	r1, [r0], -r2
    4638:	6b012100 	blvs	4ca40 <__ccfg+0x2ca98>
    463c:	01000013 	tsteq	r0, r3, lsl r0
    4640:	0101031a 	tsteq	r1, sl, lsl r3
    4644:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    4650:	0cc19c01 	stcleq	12, cr9, [r1], {1}
    4654:	70220000 	eorvc	r0, r2, r0
    4658:	031a0100 	tsteq	sl, #0, 2
    465c:	0001162e 	andeq	r1, r1, lr, lsr #12
    4660:	00151000 	andseq	r1, r5, r0
    4664:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    4668:	1a010066 	bne	44808 <__ccfg+0x24860>
    466c:	02593d03 	subseq	r3, r9, #3, 26	; 0xc0
    4670:	152e0000 	strne	r0, [lr, #-0]!
    4674:	6c220000 	stcvs	0, cr0, [r2], #-0
    4678:	01006e65 	tsteq	r0, r5, ror #28
    467c:	8146031a 	cmphi	r6, sl, lsl r3
    4680:	41000000 	mrsmi	r0, (UNDEF: 0)
    4684:	29000015 	stmdbcs	r0, {r0, r2, r4}
    4688:	1e010062 	cdpne	0, 0, cr0, cr1, cr2, {3}
    468c:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    4690:	21000000 	mrscs	r0, (UNDEF: 0)
    4694:	0013a401 	andseq	sl, r3, r1, lsl #8
    4698:	03080100 	movweq	r0, #33024	; 0x8100
    469c:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    46a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    46ac:	00000d1b 	andeq	r0, r0, fp, lsl sp
    46b0:	01007022 	tsteq	r0, r2, lsr #32
    46b4:	162d0308 	strtne	r0, [sp], -r8, lsl #6
    46b8:	5f000001 	svcpl	0x00000001
    46bc:	22000015 	andcs	r0, r0, #21
    46c0:	00667562 	rsbeq	r7, r6, r2, ror #10
    46c4:	36030801 	strcc	r0, [r3], -r1, lsl #16
    46c8:	00000d1b 	andeq	r0, r0, fp, lsl sp
    46cc:	0000157d 	andeq	r1, r0, sp, ror r5
    46d0:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    46d4:	03080100 	movweq	r0, #33024	; 0x8100
    46d8:	0000813f 	andeq	r8, r0, pc, lsr r1
    46dc:	00159b00 	andseq	r9, r5, r0, lsl #22
    46e0:	00622900 	rsbeq	r2, r2, r0, lsl #18
    46e4:	0c030c01 	stceq	12, cr0, [r3], {1}
    46e8:	0000089d 	muleq	r0, sp, r8
    46ec:	e3040a00 	movw	r0, #18944	; 0x4a00
    46f0:	21000000 	mrscs	r0, (UNDEF: 0)
    46f4:	00136201 	andseq	r6, r3, r1, lsl #4
    46f8:	02cd0100 	sbceq	r0, sp, #0, 2
    46fc:	01160101 	tsteq	r6, r1, lsl #2
    4700:	18c00000 	stmiane	r0, {}^	; <UNPREDICTABLE>
    4704:	197c0000 	ldmdbne	ip!, {}^	; <UNPREDICTABLE>
    4708:	9c010000 	stcls	0, cr0, [r1], {-0}
    470c:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4710:	0000772b 	andeq	r7, r0, fp, lsr #14
    4714:	02cd0100 	sbceq	r0, sp, #0, 2
    4718:	0000cd2e 	andeq	ip, r0, lr, lsr #26
    471c:	0015b900 	andseq	fp, r5, r0, lsl #18
    4720:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    4724:	02cd0100 	sbceq	r0, sp, #0, 2
    4728:	00008139 	andeq	r8, r0, r9, lsr r1
    472c:	0015d700 	andseq	sp, r5, r0, lsl #14
    4730:	14192b00 	ldrne	r2, [r9], #-2816	; 0xfffff500
    4734:	cd010000 	stcgt	0, cr0, [r1, #-0]
    4738:	00814102 	addeq	r4, r1, r2, lsl #2
    473c:	16000000 	strne	r0, [r0], -r0
    4740:	75220000 	strvc	r0, [r2, #-0]!
    4744:	01006772 	tsteq	r0, r2, ror r7
    4748:	c11102ce 	tstgt	r1, lr, asr #5
    474c:	4a000000 	bmi	4754 <patchGenfskRfe+0x1ac>
    4750:	28000016 	stmdacs	r0, {r1, r2, r4}
    4754:	cf010062 	svcgt	0x00010062
    4758:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    475c:	165d0000 	ldrbne	r0, [sp], -r0
    4760:	54300000 	ldrtpl	r0, [r0], #-0
    4764:	01000013 	tsteq	r0, r3, lsl r0
    4768:	550b02d0 	strpl	r0, [fp, #-720]	; 0xfffffd30
    476c:	02000003 	andeq	r0, r0, #3
    4770:	732a6491 			; <UNDEFINED> instruction: 0x732a6491
    4774:	02d10100 	sbcseq	r0, r1, #0, 2
    4778:	0007400d 	andeq	r4, r7, sp
    477c:	28570100 	ldmdacs	r7, {r8}^
    4780:	00646965 	rsbeq	r6, r4, r5, ror #18
    4784:	0602d201 	streq	sp, [r2], -r1, lsl #4
    4788:	00000081 	andeq	r0, r0, r1, lsl #1
    478c:	0000167b 	andeq	r1, r0, fp, ror r6
    4790:	31012100 	mrscc	r2, (UNDEF: 17)
    4794:	01000013 	tsteq	r0, r3, lsl r0
    4798:	010102a4 	smlatbeq	r1, r4, r2, r0
    479c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    47a8:	0e729c01 	cdpeq	12, 7, cr9, cr2, cr1, {0}
    47ac:	66220000 	strtvs	r0, [r2], -r0
    47b0:	a4010064 	strge	r0, [r1], #-100	; 0xffffff9c
    47b4:	00812a02 	addeq	r2, r1, r2, lsl #20
    47b8:	16a40000 	strtne	r0, [r4], r0
    47bc:	202b0000 	eorcs	r0, fp, r0
    47c0:	01000014 	tsteq	r0, r4, lsl r0
    47c4:	813202a4 	teqhi	r2, r4, lsr #5
    47c8:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    47cc:	28000016 	stmdacs	r0, {r1, r2, r4}
    47d0:	a8010073 	stmdage	r1, {r0, r1, r4, r5, r6}
    47d4:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    47d8:	170c0000 	strne	r0, [ip, -r0]
    47dc:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    47e0:	a9010071 	stmdbge	r1, {r0, r4, r5, r6}
    47e4:	00810602 	addeq	r0, r1, r2, lsl #12
    47e8:	17710000 	ldrbne	r0, [r1, -r0]!
    47ec:	72280000 	eorvc	r0, r8, #0
    47f0:	aa010071 	bge	449bc <__ccfg+0x24a14>
    47f4:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    47f8:	178f0000 	strne	r0, [pc, r0]
    47fc:	62280000 	eorvs	r0, r8, #0
    4800:	02ab0100 	adceq	r0, fp, #0, 2
    4804:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4808:	0017ad00 	andseq	sl, r7, r0, lsl #26
    480c:	131f3100 	tstne	pc, #0, 2
    4810:	c0010000 	andgt	r0, r1, r0
    4814:	00000102 	andeq	r0, r0, r2, lsl #2
    4818:	4e320000 	cdpmi	0, 3, cr0, cr2, cr0, {0}
    481c:	00000011 	andeq	r0, r0, r1, lsl r0
    4820:	00000000 	andeq	r0, r0, r0
    4824:	01000000 	mrseq	r0, (UNDEF: 0)
    4828:	330a02bb 	movwcc	r0, #41659	; 0xa2bb
    482c:	00001160 	andeq	r1, r0, r0, ror #2
    4830:	00116b26 	andseq	r6, r1, r6, lsr #22
    4834:	0017d600 	andseq	sp, r7, r0, lsl #12
    4838:	11762600 	cmnne	r6, r0, lsl #12
    483c:	17e90000 	strbne	r0, [r9, r0]!
    4840:	00000000 	andeq	r0, r0, r0
    4844:	120a0121 	andne	r0, sl, #1073741832	; 0x40000008
    4848:	7d010000 	stcvc	0, cr0, [r1, #-0]
    484c:	81010102 	tsthi	r1, r2, lsl #2
	...
    4858:	01000000 	mrseq	r0, (UNDEF: 0)
    485c:	000eef9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    4860:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    4864:	027d0100 	rsbseq	r0, sp, #0, 2
    4868:	0000812a 	andeq	r8, r0, sl, lsr #2
    486c:	0017fc00 	andseq	pc, r7, r0, lsl #24
    4870:	14202b00 	strtne	r2, [r0], #-2816	; 0xfffff500
    4874:	7d010000 	stcvc	0, cr0, [r1, #-0]
    4878:	00813202 	addeq	r3, r1, r2, lsl #4
    487c:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    4880:	73280000 			; <UNDEFINED> instruction: 0x73280000
    4884:	02810100 	addeq	r0, r1, #0, 2
    4888:	0007400d 	andeq	r4, r7, sp
    488c:	00185900 	andseq	r5, r8, r0, lsl #18
    4890:	716e2800 	cmnvc	lr, r0, lsl #16
    4894:	02820100 	addeq	r0, r2, #0, 2
    4898:	00008106 	andeq	r8, r0, r6, lsl #2
    489c:	0018be00 	andseq	fp, r8, r0, lsl #28
    48a0:	71722800 	cmnvc	r2, r0, lsl #16
    48a4:	02830100 	addeq	r0, r3, #0, 2
    48a8:	00078a0b 	andeq	r8, r7, fp, lsl #20
    48ac:	0018dc00 	andseq	sp, r8, r0, lsl #24
    48b0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    48b4:	0c028401 	cfstrseq	mvf8, [r2], {1}
    48b8:	0000089d 	muleq	r0, sp, r8
    48bc:	00001905 	andeq	r1, r0, r5, lsl #18
    48c0:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    48c4:	01000014 	tsteq	r0, r4, lsl r0
    48c8:	01010256 	tsteq	r1, r6, asr r2
    48cc:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    48d8:	0f5c9c01 	svceq	0x005c9c01
    48dc:	772b0000 	strvc	r0, [fp, -r0]!
    48e0:	01000000 	mrseq	r0, (UNDEF: 0)
    48e4:	cd2d0256 	sfmgt	f0, 4, [sp, #-344]!	; 0xfffffea8
    48e8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    48ec:	22000019 	andcs	r0, r0, #25
    48f0:	01006466 	tsteq	r0, r6, ror #8
    48f4:	81380256 	teqhi	r8, r6, asr r2
    48f8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    48fc:	28000019 	stmdacs	r0, {r0, r3, r4}
    4900:	5d010070 	stcpl	0, cr0, [r1, #-448]	; 0xfffffe40
    4904:	01160a02 	tsteq	r6, r2, lsl #20
    4908:	198b0000 	stmibne	fp, {}	; <UNPREDICTABLE>
    490c:	62280000 	eorvs	r0, r8, #0
    4910:	025e0100 	subseq	r0, lr, #0, 2
    4914:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4918:	00199e00 	andseq	r9, r9, r0, lsl #28
    491c:	71722800 	cmnvc	r2, r0, lsl #16
    4920:	025f0100 	subseq	r0, pc, #0, 2
    4924:	00078a0b 	andeq	r8, r7, fp, lsl #20
    4928:	0019c700 	andseq	ip, r9, r0, lsl #14
    492c:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4930:	000013f0 	strdeq	r1, [r0], -r0
    4934:	01024a01 	tsteq	r2, r1, lsl #20
    4938:	00008101 	andeq	r8, r0, r1, lsl #2
    493c:	00189c00 	andseq	r9, r8, r0, lsl #24
    4940:	0018c000 	andseq	ip, r8, r0
    4944:	999c0100 	ldmibls	ip, {r8}
    4948:	2200000f 	andcs	r0, r0, #15
    494c:	0064726f 	rsbeq	r7, r4, pc, ror #4
    4950:	29024a01 	stmdbcs	r2, {r0, r9, fp, lr}
    4954:	00000081 	andeq	r0, r0, r1, lsl #1
    4958:	00001a01 	andeq	r1, r0, r1, lsl #20
    495c:	006c7034 	rsbeq	r7, ip, r4, lsr r0
    4960:	3f024a01 	svccc	0x00024a01
    4964:	000007d4 	ldrdeq	r0, [r0], -r4
    4968:	21005101 	tstcs	r0, r1, lsl #2
    496c:	00137501 	andseq	r7, r3, r1, lsl #10
    4970:	02290100 	eoreq	r0, r9, #0, 2
    4974:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    4980:	9c010000 	stcls	0, cr0, [r1], {-0}
    4984:	00000ff6 	strdeq	r0, [r0], -r6
    4988:	0000772b 	andeq	r7, r0, fp, lsr #14
    498c:	02290100 	eoreq	r0, r9, #0, 2
    4990:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    4994:	001a1f00 	andseq	r1, sl, r0, lsl #30
    4998:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    499c:	02290100 	eoreq	r0, r9, #0, 2
    49a0:	00008136 	andeq	r8, r0, r6, lsr r1
    49a4:	001a3d00 	andseq	r3, sl, r0, lsl #26
    49a8:	00732800 	rsbseq	r2, r3, r0, lsl #16
    49ac:	0d022b01 	vstreq	d2, [r2, #-4]
    49b0:	00000740 	andeq	r0, r0, r0, asr #14
    49b4:	00001a87 	andeq	r1, r0, r7, lsl #21
    49b8:	01006228 	tsteq	r0, r8, lsr #4
    49bc:	9d0c022c 	sfmls	f0, 4, [ip, #-176]	; 0xffffff50
    49c0:	9a000008 	bls	49e8 <patchGenfskRfe+0x440>
    49c4:	0000001a 	andeq	r0, r0, sl, lsl r0
    49c8:	12a60121 	adcne	r0, r6, #1073741832	; 0x40000008
    49cc:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    49d0:	81010101 	tsthi	r1, r1, lsl #2
    49d4:	dc000000 	stcle	0, cr0, [r0], {-0}
    49d8:	9c000017 	stcls	0, cr0, [r0], {23}
    49dc:	01000018 	tsteq	r0, r8, lsl r0
    49e0:	0010839c 	mulseq	r0, ip, r3
    49e4:	00772b00 	rsbseq	r2, r7, r0, lsl #22
    49e8:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    49ec:	00cd2a01 	sbceq	r2, sp, r1, lsl #20
    49f0:	1aad0000 	bne	feb449f8 <_estack+0xdeb3f9f8>
    49f4:	70220000 	eorvc	r0, r2, r0
    49f8:	01007968 	tsteq	r0, r8, ror #18
    49fc:	813501f6 	teqhi	r5, r6	; <illegal shifter operand>
    4a00:	d6000000 	strle	r0, [r0], -r0
    4a04:	2b00001a 	blcs	4a74 <patchGenfskRfe+0x4cc>
    4a08:	000013d5 	ldrdeq	r1, [r0], -r5
    4a0c:	3e01f601 	cfmadd32cc	mvax0, mvfx15, mvfx1, mvfx1
    4a10:	00000081 	andeq	r0, r0, r1, lsl #1
    4a14:	00001b2b 	andeq	r1, r0, fp, lsr #22
    4a18:	64662835 	strbtvs	r2, [r6], #-2101	; 0xfffff7cb
    4a1c:	01f80100 	mvnseq	r0, r0, lsl #2
    4a20:	00008106 	andeq	r8, r0, r6, lsl #2
    4a24:	001b6300 	andseq	r6, fp, r0, lsl #6
    4a28:	13133600 	tstne	r3, #0, 12
    4a2c:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    4a30:	05560a01 	ldrbeq	r0, [r6, #-2561]	; 0xfffff5ff
    4a34:	73280000 			; <UNDEFINED> instruction: 0x73280000
    4a38:	01fa0100 	mvnseq	r0, r0, lsl #2
    4a3c:	0007400d 	andeq	r4, r7, sp
    4a40:	001b8100 	andseq	r8, fp, r0, lsl #2
    4a44:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    4a48:	01fc0100 	mvnseq	r0, r0, lsl #2
    4a4c:	0000b50b 	andeq	fp, r0, fp, lsl #10
    4a50:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4a54:	3b012700 	blcc	4e65c <__ccfg+0x2e6b4>
    4a58:	01000013 	tsteq	r0, r3, lsl r0
    4a5c:	0101013b 	tsteq	r1, fp, lsr r1
    4a60:	0000176c 	andeq	r1, r0, ip, ror #14
    4a64:	000017dc 	ldrdeq	r1, [r0], -ip
    4a68:	10bb9c01 	adcsne	r9, fp, r1, lsl #24
    4a6c:	70220000 	eorvc	r0, r2, r0
    4a70:	013b0100 	teqeq	fp, r0, lsl #2
    4a74:	0001162e 	andeq	r1, r1, lr, lsr #12
    4a78:	001bcb00 	andseq	ip, fp, r0, lsl #22
    4a7c:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4a80:	0c014101 	stfeqs	f4, [r1], {1}
    4a84:	0000089d 	muleq	r0, sp, r8
    4a88:	00001bf4 	strdeq	r1, [r0], -r4
    4a8c:	70613700 	rsbvc	r3, r1, r0, lsl #14
    4a90:	14010062 	strne	r0, [r1], #-98	; 0xffffff9e
    4a94:	9d010101 	stflss	f0, [r1, #-4]
    4a98:	54000008 	strpl	r0, [r0], #-8
    4a9c:	6a000016 	bvs	4afc <patchGenfskRfe+0x554>
    4aa0:	01000016 	tsteq	r0, r6, lsl r0
    4aa4:	0011029c 	mulseq	r1, ip, r2
    4aa8:	18c22b00 	stmiane	r2, {r8, r9, fp, sp}^
    4aac:	14010000 	strne	r0, [r1], #-0
    4ab0:	00cd2b01 	sbceq	r2, sp, r1, lsl #22
    4ab4:	1c280000 	stcne	0, cr0, [r8], #-0
    4ab8:	702a0000 	eorvc	r0, sl, r0
    4abc:	01190100 	tsteq	r9, r0, lsl #2
    4ac0:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4ac4:	29500100 	ldmdbcs	r0, {r8}^
    4ac8:	01007363 	tsteq	r0, r3, ror #6
    4acc:	cd07011a 	stfgts	f0, [r7, #-104]	; 0xffffff98
    4ad0:	00000000 	andeq	r0, r0, r0
    4ad4:	706c7238 	rsbvc	r7, ip, r8, lsr r2
    4ad8:	01040100 	mrseq	r0, (UNDEF: 20)
    4adc:	16840101 	strne	r0, [r4], r1, lsl #2
    4ae0:	16920000 	ldrne	r0, [r2], r0
    4ae4:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ae8:	0000112a 	andeq	r1, r0, sl, lsr #2
    4aec:	01007022 	tsteq	r0, r2, lsr #32
    4af0:	9d2b0104 	stflss	f0, [fp, #-16]!
    4af4:	3b000008 	blcc	4b1c <patchGenfskRfe+0x574>
    4af8:	0000001c 	andeq	r0, r0, ip, lsl r0
    4afc:	00127e39 	andseq	r7, r2, r9, lsr lr
    4b00:	01e00100 	mvneq	r0, r0, lsl #2
    4b04:	114e0101 	cmpne	lr, r1, lsl #2
    4b08:	703a0000 	eorsvc	r0, sl, r0
    4b0c:	2fe00100 	svccs	0x00e00100
    4b10:	0000089d 	muleq	r0, sp, r8
    4b14:	0076643a 	rsbseq	r6, r6, sl, lsr r4
    4b18:	8136e001 	teqhi	r6, r1
    4b1c:	00000000 	andeq	r0, r0, r0
    4b20:	0012c13b 	andseq	ip, r2, fp, lsr r1
    4b24:	01cf0100 	biceq	r0, pc, r0, lsl #2
    4b28:	00008101 	andeq	r8, r0, r1, lsl #2
    4b2c:	11810100 	orrne	r0, r1, r0, lsl #2
    4b30:	6f3a0000 	svcvs	0x003a0000
    4b34:	cf010071 	svcgt	0x00010071
    4b38:	00078a2b 	andeq	r8, r7, fp, lsr #20
    4b3c:	716e3c00 	cmnvc	lr, r0, lsl #24
    4b40:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
    4b44:	00000081 	andeq	r0, r0, r1, lsl #1
    4b48:	0100623c 	tsteq	r0, ip, lsr r2
    4b4c:	089d0cd4 	ldmeq	sp, {r2, r4, r6, r7, sl, fp}
    4b50:	3d000000 	stccc	0, cr0, [r0, #-0]
    4b54:	00716e65 	rsbseq	r6, r1, r5, ror #28
    4b58:	0101a801 	tsteq	r1, r1, lsl #16
    4b5c:	0011a401 	andseq	sl, r1, r1, lsl #8
    4b60:	00713a00 	rsbseq	r3, r1, r0, lsl #20
    4b64:	8a2aa801 	bhi	aaeb70 <__ccfg+0xa8ebc8>
    4b68:	3a000007 	bcc	4b8c <patchGenfskRfe+0x5e4>
    4b6c:	a8010070 	stmdage	r1, {r4, r5, r6}
    4b70:	00089d37 	andeq	r9, r8, r7, lsr sp
    4b74:	643d0000 	ldrtvs	r0, [sp], #-0
    4b78:	01007165 	tsteq	r0, r5, ror #2
    4b7c:	0101017f 	tsteq	r1, pc, ror r1
    4b80:	000011bd 			; <UNDEFINED> instruction: 0x000011bd
    4b84:	0100703a 	tsteq	r0, sl, lsr r0
    4b88:	089d2b7f 	ldmeq	sp, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
    4b8c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4b90:	000011a4 	andeq	r1, r0, r4, lsr #3
    4b94:	0000166a 	andeq	r1, r0, sl, ror #12
    4b98:	00001684 	andeq	r1, r0, r4, lsl #13
    4b9c:	11f29c01 	mvnsne	r9, r1, lsl #24
    4ba0:	b23f0000 	eorslt	r0, pc, #0
    4ba4:	01000011 	tsteq	r0, r1, lsl r0
    4ba8:	11a44050 			; <UNDEFINED> instruction: 0x11a44050
    4bac:	16700000 	ldrbtne	r0, [r0], -r0
    4bb0:	16820000 	strne	r0, [r2], r0
    4bb4:	7f010000 	svcvc	0x00010000
    4bb8:	11b22401 			; <UNDEFINED> instruction: 0x11b22401
    4bbc:	1c4e0000 	marne	acc0, r0, lr
    4bc0:	00000000 	andeq	r0, r0, r0
    4bc4:	0011813e 	andseq	r8, r1, lr, lsr r1
    4bc8:	00169400 	andseq	r9, r6, r0, lsl #8
    4bcc:	0016e000 	andseq	lr, r6, r0
    4bd0:	3b9c0100 	blcc	fe704fd8 <_estack+0xde6fffd8>
    4bd4:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    4bd8:	0000118f 	andeq	r1, r0, pc, lsl #3
    4bdc:	00001c61 	andeq	r1, r0, r1, ror #24
    4be0:	00119924 	andseq	r9, r1, r4, lsr #18
    4be4:	001c9500 	andseq	r9, ip, r0, lsl #10
    4be8:	11814000 	orrne	r4, r1, r0
    4bec:	16a00000 	strtne	r0, [r0], r0
    4bf0:	16a80000 	strtne	r0, [r8], r0
    4bf4:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    4bf8:	118f2401 	orrne	r2, pc, r1, lsl #8
    4bfc:	1cc90000 	stclne	0, cr0, [r9], {0}
    4c00:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    4c04:	e7000011 	smlad	r0, r1, r0, r0
    4c08:	0000001c 	andeq	r0, r0, ip, lsl r0
    4c0c:	112a3e00 			; <UNDEFINED> instruction: 0x112a3e00
    4c10:	16e00000 	strbtne	r0, [r0], r0
    4c14:	176c0000 	strbne	r0, [ip, -r0]!
    4c18:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c1c:	00001280 	andeq	r1, r0, r0, lsl #5
    4c20:	00113824 	andseq	r3, r1, r4, lsr #16
    4c24:	001d0500 	andseq	r0, sp, r0, lsl #10
    4c28:	11422400 	cmpne	r2, r0, lsl #8
    4c2c:	1d5a0000 	ldclne	0, cr0, [sl, #-0]
    4c30:	2a410000 	bcs	1044c38 <__ccfg+0x1024c90>
    4c34:	14000011 	strne	r0, [r0], #-17	; 0xffffffef
    4c38:	a0000017 	andge	r0, r0, r7, lsl r0
    4c3c:	01000007 	tsteq	r0, r7
    4c40:	423301e0 	eorsmi	r0, r3, #224, 2	; 0x38
    4c44:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    4c48:	00001138 	andeq	r1, r0, r8, lsr r1
    4c4c:	00001d6d 	andeq	r1, r0, sp, ror #26
    4c50:	993e0000 	ldmdbls	lr!, {}	; <UNPREDICTABLE>
    4c54:	7c00000b 	stcvc	0, cr0, [r0], {11}
    4c58:	a8000019 	stmdage	r0, {r0, r3, r4}
    4c5c:	01000019 	tsteq	r0, r9, lsl r0
    4c60:	0012d89c 	mulseq	r2, ip, r8
    4c64:	0bad2400 	bleq	feb4dc6c <_estack+0xdeb48c6c>
    4c68:	1d8b0000 	stcne	0, cr0, [fp]
    4c6c:	ba240000 	blt	904c74 <__ccfg+0x8e4ccc>
    4c70:	a900000b 	stmdbge	r0, {r0, r1, r3}
    4c74:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4c78:	00000bc7 	andeq	r0, r0, r7, asr #23
    4c7c:	00001dd2 	ldrdeq	r1, [r0], -r2
    4c80:	000b9932 	andeq	r9, fp, r2, lsr r9
    4c84:	00199000 	andseq	r9, r9, r0
    4c88:	00199800 	andseq	r9, r9, r0, lsl #16
    4c8c:	03520100 	cmpeq	r2, #0, 2
    4c90:	0bad3301 	bleq	feb5189c <_estack+0xdeb4c89c>
    4c94:	ba240000 	blt	904c9c <__ccfg+0x8e4cf4>
    4c98:	fb00000b 	blx	4cce <patchImageGenfsk+0x72>
    4c9c:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4ca0:	00000bc7 	andeq	r0, r0, r7, asr #23
    4ca4:	00001e0e 	andeq	r1, r0, lr, lsl #28
    4ca8:	4a420000 	bmi	1084cb0 <__ccfg+0x1064d08>
    4cac:	0800000a 	stmdaeq	r0, {r1, r3}
    4cb0:	7000001a 	andvc	r0, r0, sl, lsl r0
    4cb4:	0100001a 	tsteq	r0, sl, lsl r0
    4cb8:	0a5e249c 	beq	178df30 <__ccfg+0x176df88>
    4cbc:	1e210000 	cdpne	0, 2, cr0, cr1, cr0, {0}
    4cc0:	6b240000 	blvs	904cc8 <__ccfg+0x8e4d20>
    4cc4:	3400000a 	strcc	r0, [r0], #-10
    4cc8:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    4ccc:	00000a78 	andeq	r0, r0, r8, ror sl
    4cd0:	00001e94 	muleq	r0, r4, lr
    4cd4:	000a8526 	andeq	r8, sl, r6, lsr #10
    4cd8:	001ede00 	andseq	sp, lr, r0, lsl #28
    4cdc:	0a4a3200 	beq	12914e4 <__ccfg+0x127153c>
    4ce0:	1a160000 	bne	584ce8 <__ccfg+0x564d40>
    4ce4:	1a1a0000 	bne	684cec <__ccfg+0x664d44>
    4ce8:	86010000 	strhi	r0, [r1], -r0
    4cec:	5e330103 	rsfpls	f0, f3, f3
    4cf0:	2400000a 	strcs	r0, [r0], #-10
    4cf4:	00000a6b 	andeq	r0, r0, fp, ror #20
    4cf8:	00001f12 	andeq	r1, r0, r2, lsl pc
    4cfc:	000a7833 	andeq	r7, sl, r3, lsr r8
    4d00:	0a854300 	beq	fe155908 <_estack+0xde150908>
    4d04:	00000000 	andeq	r0, r0, r0
    4d08:	00017400 	andeq	r7, r1, r0, lsl #8
    4d0c:	8f000300 	svchi	0x00000300
    4d10:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    4d14:	0000bd01 	andeq	fp, r0, r1, lsl #26
    4d18:	14a70c00 	strtne	r0, [r7], #3072	; 0xc00
    4d1c:	06640000 	strbteq	r0, [r4], -r0
    4d20:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
    4d24:	00000000 	andeq	r0, r0, r0
    4d28:	36230000 	strtcc	r0, [r3], -r0
    4d2c:	01020000 	mrseq	r0, (UNDEF: 2)
    4d30:	0008da06 	andeq	sp, r8, r6, lsl #20
    4d34:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4d38:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    4d3c:	e9050402 	stmdb	r5, {r1, sl}
    4d40:	02000005 	andeq	r0, r0, #5
    4d44:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    4d48:	01020000 	mrseq	r0, (UNDEF: 2)
    4d4c:	0008d808 	andeq	sp, r8, r8, lsl #16
    4d50:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4d54:	000009a6 	andeq	r0, r0, r6, lsr #19
    4d58:	0008f103 	andeq	pc, r8, r3, lsl #2
    4d5c:	19340200 	ldmdbne	r4!, {r9}
    4d60:	0000005b 	andeq	r0, r0, fp, asr r0
    4d64:	93070402 	movwls	r0, #29698	; 0x7402
    4d68:	02000003 	andeq	r0, r0, #3
    4d6c:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    4d70:	04040000 	streq	r0, [r4], #-0
    4d74:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4d78:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4d7c:	00000398 	muleq	r0, r8, r3
    4d80:	00820405 	addeq	r0, r2, r5, lsl #8
    4d84:	77060000 	strvc	r0, [r6, -r0]
    4d88:	07000000 	streq	r0, [r0, -r0]
    4d8c:	4f040501 	svcmi	0x00040501
    4d90:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4d94:	0000149a 	muleq	r0, sl, r4
    4d98:	4f117f01 	svcmi	0x00117f01
    4d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4da0:	43200801 			; <UNDEFINED> instruction: 0x43200801
    4da4:	80010000 	andhi	r0, r1, r0
    4da8:	00004f11 	andeq	r4, r0, r1, lsl pc
    4dac:	08010100 	stmdaeq	r1, {r8}
    4db0:	000014ea 	andeq	r1, r0, sl, ror #9
    4db4:	4f118101 	svcmi	0x00118101
    4db8:	01000000 	mrseq	r0, (UNDEF: 0)
    4dbc:	14e50801 	strbtne	r0, [r5], #2049	; 0x801
    4dc0:	82010000 	andhi	r0, r1, #0
    4dc4:	00004f11 	andeq	r4, r0, r1, lsl pc
    4dc8:	08010100 	stmdaeq	r1, {r8}
    4dcc:	000014a1 	andeq	r1, r0, r1, lsr #9
    4dd0:	4f118301 	svcmi	0x00118301
    4dd4:	01000000 	mrseq	r0, (UNDEF: 0)
    4dd8:	146c0801 	strbtne	r0, [ip], #-2049	; 0xfffff7ff
    4ddc:	84010000 	strhi	r0, [r1], #-0
    4de0:	00004f11 	andeq	r4, r0, r1, lsl pc
    4de4:	09010100 	stmdbeq	r1, {r8}
    4de8:	0000007d 	andeq	r0, r0, sp, ror r0
    4dec:	000000ee 	andeq	r0, r0, lr, ror #1
    4df0:	0000700a 	andeq	r7, r0, sl
    4df4:	06003100 	streq	r3, [r0], -r0, lsl #2
    4df8:	000000de 	ldrdeq	r0, [r0], -lr
    4dfc:	0015030b 	andseq	r0, r5, fp, lsl #6
    4e00:	0f8e0100 	svceq	0x008e0100
    4e04:	000000ee 	andeq	r0, r0, lr, ror #1
    4e08:	00030501 	andeq	r0, r3, r1, lsl #10
    4e0c:	0c000000 	stceq	0, cr0, [r0], {-0}
    4e10:	000014f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    4e14:	01012801 	tsteq	r1, r1, lsl #16
    4e18:	001c1201 	andseq	r1, ip, r1, lsl #4
    4e1c:	001c1400 	andseq	r1, ip, r0, lsl #8
    4e20:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4e24:	0000147d 	andeq	r1, r0, sp, ror r4
    4e28:	01011601 	tsteq	r1, r1, lsl #12
    4e2c:	001c1001 	andseq	r1, ip, r1
    4e30:	001c1200 	andseq	r1, ip, r0, lsl #4
    4e34:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4e38:	0000148d 	andeq	r1, r0, sp, lsl #9
    4e3c:	01010401 	tsteq	r1, r1, lsl #8
    4e40:	001c0e01 	andseq	r0, ip, r1, lsl #28
    4e44:	001c1000 	andseq	r1, ip, r0
    4e48:	0d9c0100 	ldfeqs	f0, [ip]
    4e4c:	00151a01 	andseq	r1, r5, r1, lsl #20
    4e50:	01d20100 	bicseq	r0, r2, r0, lsl #2
    4e54:	001c1401 	andseq	r1, ip, r1, lsl #8
    4e58:	001c5800 	andseq	r5, ip, r0, lsl #16
    4e5c:	0e9c0100 	fmleqe	f0, f4, f0
    4e60:	00001474 	andeq	r1, r0, r4, ror r4
    4e64:	840fd401 	strhi	sp, [pc], #-1025	; 4e6c <patchImageGenfsk+0x210>
    4e68:	25000000 	strcs	r0, [r0, #-0]
    4e6c:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    4e70:	00001510 	andeq	r1, r0, r0, lsl r5
    4e74:	841ad401 	ldrhi	sp, [sl], #-1025	; 0xfffffbff
    4e78:	43000000 	movwmi	r0, #0
    4e7c:	0000001f 	andeq	r0, r0, pc, lsl r0
    4e80:	00053700 	andeq	r3, r5, r0, lsl #14
    4e84:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    4e88:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
    4e8c:	0000bd01 	andeq	fp, r0, r1, lsl #26
    4e90:	157a0c00 	ldrbne	r0, [sl, #-3072]!	; 0xfffff400
    4e94:	06640000 	strbteq	r0, [r4], -r0
    4e98:	374a0000 	strbcc	r0, [sl, -r0]
    4e9c:	01020000 	mrseq	r0, (UNDEF: 2)
    4ea0:	0008da06 	andeq	sp, r8, r6, lsl #20
    4ea4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4ea8:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    4eac:	e9050402 	stmdb	r5, {r1, sl}
    4eb0:	02000005 	andeq	r0, r0, #5
    4eb4:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    4eb8:	31030000 	mrscc	r0, (UNDEF: 3)
    4ebc:	01000008 	tsteq	r0, r8
    4ec0:	0045182e 	subeq	r1, r5, lr, lsr #16
    4ec4:	01020000 	mrseq	r0, (UNDEF: 2)
    4ec8:	0008d808 	andeq	sp, r8, r8, lsl #16
    4ecc:	03ce0300 	biceq	r0, lr, #0, 6
    4ed0:	31010000 	mrscc	r0, (UNDEF: 1)
    4ed4:	00005819 	andeq	r5, r0, r9, lsl r8
    4ed8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4edc:	000009a6 	andeq	r0, r0, r6, lsr #19
    4ee0:	0008f103 	andeq	pc, r8, r3, lsl #2
    4ee4:	19340100 	ldmdbne	r4!, {r8}
    4ee8:	0000006b 	andeq	r0, r0, fp, rrx
    4eec:	93070402 	movwls	r0, #29698	; 0x7402
    4ef0:	02000003 	andeq	r0, r0, #3
    4ef4:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    4ef8:	04040000 	streq	r0, [r4], #-0
    4efc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4f00:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4f04:	00000398 	muleq	r0, r8, r3
    4f08:	2f025805 	svccs	0x00025805
    4f0c:	0001af09 	andeq	sl, r1, r9, lsl #30
    4f10:	16d40600 	ldrbne	r0, [r4], r0, lsl #12
    4f14:	31020000 	mrscc	r0, (UNDEF: 2)
    4f18:	00005f10 	andeq	r5, r0, r0, lsl pc
    4f1c:	e9060000 	stmdb	r6, {}	; <UNPREDICTABLE>
    4f20:	02000015 	andeq	r0, r0, #21
    4f24:	005f1032 	subseq	r1, pc, r2, lsr r0	; <UNPREDICTABLE>
    4f28:	06040000 	streq	r0, [r4], -r0
    4f2c:	000015b1 			; <UNDEFINED> instruction: 0x000015b1
    4f30:	5f103302 	svcpl	0x00103302
    4f34:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4f38:	00156406 	andseq	r6, r5, r6, lsl #8
    4f3c:	10340200 	eorsne	r0, r4, r0, lsl #4
    4f40:	0000005f 	andeq	r0, r0, pc, asr r0
    4f44:	1523060c 	strne	r0, [r3, #-1548]!	; 0xfffff9f4
    4f48:	35020000 	strcc	r0, [r2, #-0]
    4f4c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4f50:	34061000 	strcc	r1, [r6], #-0
    4f54:	02000015 	andeq	r0, r0, #21
    4f58:	005f1036 	subseq	r1, pc, r6, lsr r0	; <UNPREDICTABLE>
    4f5c:	06140000 	ldreq	r0, [r4], -r0
    4f60:	00001554 	andeq	r1, r0, r4, asr r5
    4f64:	5f103702 	svcpl	0x00103702
    4f68:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4f6c:	00167906 	andseq	r7, r6, r6, lsl #18
    4f70:	10380200 	eorsne	r0, r8, r0, lsl #4
    4f74:	0000005f 	andeq	r0, r0, pc, asr r0
    4f78:	15c9061c 	strbne	r0, [r9, #1564]	; 0x61c
    4f7c:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    4f80:	00005f10 	andeq	r5, r0, r0, lsl pc
    4f84:	d9062000 	stmdble	r6, {sp}
    4f88:	02000015 	andeq	r0, r0, #21
    4f8c:	005f103a 	subseq	r1, pc, sl, lsr r0	; <UNPREDICTABLE>
    4f90:	06240000 	strteq	r0, [r4], -r0
    4f94:	0000169f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    4f98:	5f103b02 	svcpl	0x00103b02
    4f9c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4fa0:	0016af06 	andseq	sl, r6, r6, lsl #30
    4fa4:	103c0200 	eorsne	r0, ip, r0, lsl #4
    4fa8:	0000005f 	andeq	r0, r0, pc, asr r0
    4fac:	1545062c 	strbne	r0, [r5, #-1580]	; 0xfffff9d4
    4fb0:	3d020000 	stccc	0, cr0, [r2, #-0]
    4fb4:	00005f10 	andeq	r5, r0, r0, lsl pc
    4fb8:	3f063000 	svccc	0x00063000
    4fbc:	02000016 	andeq	r0, r0, #22
    4fc0:	005f103e 	subseq	r1, pc, lr, lsr r0	; <UNPREDICTABLE>
    4fc4:	06340000 	ldrteq	r0, [r4], -r0
    4fc8:	000016e4 	andeq	r1, r0, r4, ror #13
    4fcc:	5f103f02 	svcpl	0x00103f02
    4fd0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4fd4:	0015fa06 	andseq	pc, r5, r6, lsl #20
    4fd8:	10400200 	subne	r0, r0, r0, lsl #4
    4fdc:	0000005f 	andeq	r0, r0, pc, asr r0
    4fe0:	160e063c 			; <UNDEFINED> instruction: 0x160e063c
    4fe4:	41020000 	mrsmi	r0, (UNDEF: 2)
    4fe8:	00005f10 	andeq	r5, r0, r0, lsl pc
    4fec:	63064000 	movwvs	r4, #24576	; 0x6000
    4ff0:	02000016 	andeq	r0, r0, #22
    4ff4:	005f1042 	subseq	r1, pc, r2, asr #32
    4ff8:	06440000 	strbeq	r0, [r4], -r0
    4ffc:	0000164f 	andeq	r1, r0, pc, asr #12
    5000:	5f104302 	svcpl	0x00104302
    5004:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    5008:	00168a06 	andseq	r8, r6, r6, lsl #20
    500c:	10440200 	subne	r0, r4, r0, lsl #4
    5010:	0000005f 	andeq	r0, r0, pc, asr r0
    5014:	16bf064c 	ldrtne	r0, [pc], ip, asr #12
    5018:	45020000 	strmi	r0, [r2, #-0]
    501c:	00005f10 	andeq	r5, r0, r0, lsl pc
    5020:	29065000 	stmdbcs	r6, {ip, lr}
    5024:	02000016 	andeq	r0, r0, #22
    5028:	005f1046 	subseq	r1, pc, r6, asr #32
    502c:	00540000 	subseq	r0, r4, r0
    5030:	00162203 	andseq	r2, r6, r3, lsl #4
    5034:	03470200 	movteq	r0, #29184	; 0x7200
    5038:	00000087 	andeq	r0, r0, r7, lsl #1
    503c:	0001af07 	andeq	sl, r1, r7, lsl #30
    5040:	15730800 	ldrbne	r0, [r3, #-2048]!	; 0xfffff800
    5044:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    5048:	0001bb15 	andeq	fp, r1, r5, lsl fp
    504c:	03010100 	movweq	r0, #4352	; 0x1100
    5050:	000023ca 	andeq	r2, r0, sl, asr #7
    5054:	4c122703 	ldcmi	7, cr2, [r2], {3}
    5058:	07000000 	streq	r0, [r0, -r0]
    505c:	000001ce 	andeq	r0, r0, lr, asr #3
    5060:	0001ce09 	andeq	ip, r1, r9, lsl #28
    5064:	18e30300 	stmiane	r3!, {r8, r9}^
    5068:	2b030000 	blcs	c5070 <__ccfg+0xa50c8>
    506c:	00003912 	andeq	r3, r0, r2, lsl r9
    5070:	01e40900 	mvneq	r0, r0, lsl #18
    5074:	1b030000 	blne	c507c <__ccfg+0xa50d4>
    5078:	03000024 	movweq	r0, #36	; 0x24
    507c:	005f122c 	subseq	r1, pc, ip, lsr #4
    5080:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
    5084:	03000001 	movweq	r0, #1
    5088:	000004f7 	strdeq	r0, [r0], -r7
    508c:	5f122d03 	svcpl	0x00122d03
    5090:	05000000 	streq	r0, [r0, #-0]
    5094:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    5098:	000002a0 	andeq	r0, r0, r0, lsr #5
    509c:	00003e0a 	andeq	r3, r0, sl, lsl #28
    50a0:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    50a4:	000001e4 	andeq	r0, r0, r4, ror #3
    50a8:	00070101 	andeq	r0, r7, r1, lsl #2
    50ac:	0004fd0a 	andeq	pc, r4, sl, lsl #26
    50b0:	03350300 	teqeq	r5, #0, 6
    50b4:	000001e4 	andeq	r0, r0, r4, ror #3
    50b8:	00060101 	andeq	r0, r6, r1, lsl #2
    50bc:	0002370a 	andeq	r3, r2, sl, lsl #14
    50c0:	03360300 	teqeq	r6, #0, 6
    50c4:	000001e4 	andeq	r0, r0, r4, ror #3
    50c8:	00050101 	andeq	r0, r5, r1, lsl #2
    50cc:	0005370a 	andeq	r3, r5, sl, lsl #14
    50d0:	03370300 	teqeq	r7, #0, 6
    50d4:	000001e4 	andeq	r0, r0, r4, ror #3
    50d8:	00040101 	andeq	r0, r4, r1, lsl #2
    50dc:	0007c00a 	andeq	ip, r7, sl
    50e0:	03380300 	teqeq	r8, #0, 6
    50e4:	000001e4 	andeq	r0, r0, r4, ror #3
    50e8:	00000401 	andeq	r0, r0, r1, lsl #8
    50ec:	00050406 	andeq	r0, r5, r6, lsl #8
    50f0:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    50f4:	000001e4 	andeq	r0, r0, r4, ror #3
    50f8:	06ce0601 	strbeq	r0, [lr], r1, lsl #12
    50fc:	3c030000 	stccc	0, cr0, [r3], {-0}
    5100:	0001e403 	andeq	lr, r1, r3, lsl #8
    5104:	6e060200 	cdpvs	2, 0, cr0, cr6, cr0, {0}
    5108:	0300000a 	movweq	r0, #10
    510c:	01e4033d 	mvneq	r0, sp, lsr r3
    5110:	06030000 	streq	r0, [r3], -r0
    5114:	00000703 	andeq	r0, r0, r3, lsl #14
    5118:	f5083f03 			; <UNDEFINED> instruction: 0xf5083f03
    511c:	04000001 	streq	r0, [r0], #-1
    5120:	02850300 	addeq	r0, r5, #0, 6
    5124:	41030000 	mrsmi	r0, (UNDEF: 3)
    5128:	00021203 	andeq	r1, r2, r3, lsl #4
    512c:	02a00900 	adceq	r0, r0, #0, 18
    5130:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    5134:	03000005 	movweq	r0, #5
    5138:	02ac1a43 	adceq	r1, ip, #274432	; 0x43000
    513c:	01010000 	mrseq	r0, (UNDEF: 1)
    5140:	0001b108 	andeq	fp, r1, r8, lsl #2
    5144:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    5148:	000002cd 	andeq	r0, r0, sp, asr #5
    514c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5150:	000002d3 	ldrdeq	r0, [r0], -r3
    5154:	e1080102 	tst	r8, r2, lsl #2
    5158:	07000008 	streq	r0, [r0, -r8]
    515c:	000002d3 	ldrdeq	r0, [r0], -r3
    5160:	00028e08 	andeq	r8, r2, r8, lsl #28
    5164:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    5168:	000002cd 	andeq	r0, r0, sp, asr #5
    516c:	08050101 	stmdaeq	r5, {r0, r8}
    5170:	1e098f04 	cdpne	15, 0, cr8, cr9, cr4, {0}
    5174:	06000003 	streq	r0, [r0], -r3
    5178:	00000601 	andeq	r0, r0, r1, lsl #12
    517c:	5f0b9004 	svcpl	0x000b9004
    5180:	00000000 	andeq	r0, r0, r0
    5184:	000ba006 	andeq	sl, fp, r6
    5188:	08910400 	ldmeq	r1, {sl}
    518c:	000001ce 	andeq	r0, r0, lr, asr #3
    5190:	01ea0604 	mvneq	r0, r4, lsl #12
    5194:	92040000 	andls	r0, r4, #0
    5198:	0001f010 	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    519c:	03000600 	movweq	r0, #1536	; 0x600
    51a0:	00000941 	andeq	r0, r0, r1, asr #18
    51a4:	ed039304 	stc	3, cr9, [r3, #-16]
    51a8:	0c000002 	stceq	0, cr0, [r0], {2}
    51ac:	0000031e 	andeq	r0, r0, lr, lsl r3
    51b0:	00000335 	andeq	r0, r0, r5, lsr r3
    51b4:	0f08000d 	svceq	0x0008000d
    51b8:	04000007 	streq	r0, [r0], #-7
    51bc:	032a0f99 			; <UNDEFINED> instruction: 0x032a0f99
    51c0:	01010000 	mrseq	r0, (UNDEF: 1)
    51c4:	91050105 	tstls	r5, r5, lsl #2
    51c8:	00036d09 	andeq	r6, r3, r9, lsl #26
    51cc:	070a0a00 	streq	r0, [sl, -r0, lsl #20]
    51d0:	93050000 	movwls	r0, #20480	; 0x5000
    51d4:	0001e407 	andeq	lr, r1, r7, lsl #8
    51d8:	01070100 	mrseq	r0, (UNDEF: 23)
    51dc:	04780a00 	ldrbteq	r0, [r8], #-2560	; 0xfffff600
    51e0:	94050000 	strls	r0, [r5], #-0
    51e4:	0001e403 	andeq	lr, r1, r3, lsl #8
    51e8:	00010100 	andeq	r0, r1, r0, lsl #2
    51ec:	cc030000 	stcgt	0, cr0, [r3], {-0}
    51f0:	05000007 	streq	r0, [r0, #-7]
    51f4:	03430396 	movteq	r0, #13206	; 0x3396
    51f8:	6d070000 	stcvs	0, cr0, [r7, #-0]
    51fc:	0c000003 	stceq	0, cr0, [r0], {3}
    5200:	00000379 	andeq	r0, r0, r9, ror r3
    5204:	00000389 	andeq	r0, r0, r9, lsl #7
    5208:	7e07000d 	cdpvc	0, 0, cr0, cr7, cr13, {0}
    520c:	08000003 	stmdaeq	r0, {r0, r1}
    5210:	00000347 	andeq	r0, r0, r7, asr #6
    5214:	89179c05 	ldmdbhi	r7, {r0, r2, sl, fp, ip, pc}
    5218:	01000003 	tsteq	r0, r3
    521c:	01da0c01 	bicseq	r0, sl, r1, lsl #24
    5220:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
    5224:	000d0000 	andeq	r0, sp, r0
    5228:	00039c07 	andeq	r9, r3, r7, lsl #24
    522c:	04b70800 	ldrteq	r0, [r7], #2048	; 0x800
    5230:	06060000 	streq	r0, [r6], -r0
    5234:	0003a713 	andeq	sl, r3, r3, lsl r7
    5238:	08010100 	stmdaeq	r1, {r8}
    523c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    5240:	f50ec304 			; <UNDEFINED> instruction: 0xf50ec304
    5244:	01000001 	tsteq	r0, r1
    5248:	08fa0e01 	ldmeq	sl!, {r0, r9, sl, fp}^
    524c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    5250:	03d51001 	bicseq	r1, r5, #1
    5254:	040b0000 	streq	r0, [fp], #-0
    5258:	000003db 	ldrdeq	r0, [r0], -fp
    525c:	03e7010f 	mvneq	r0, #-1073741821	; 0xc0000003
    5260:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    5264:	00000001 	andeq	r0, r0, r1
    5268:	0002da0c 	andeq	sp, r2, ip, lsl #20
    526c:	0003f200 	andeq	pc, r3, r0, lsl #4
    5270:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    5274:	000003e7 	andeq	r0, r0, r7, ror #7
    5278:	00076311 	andeq	r6, r7, r1, lsl r3
    527c:	017f0700 	cmneq	pc, r0, lsl #14
    5280:	0003f216 	andeq	pc, r3, r6, lsl r2	; <UNPREDICTABLE>
    5284:	11010100 	mrsne	r0, (UNDEF: 17)
    5288:	0000032a 	andeq	r0, r0, sl, lsr #6
    528c:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    5290:	00000201 	andeq	r0, r0, r1, lsl #4
    5294:	07110101 	ldreq	r0, [r1, -r1, lsl #2]
    5298:	07000003 	streq	r0, [r0, -r3]
    529c:	f50e02d8 			; <UNDEFINED> instruction: 0xf50e02d8
    52a0:	01000001 	tsteq	r0, r1
    52a4:	07081201 	streq	r1, [r8, -r1, lsl #4]
    52a8:	4b090303 	blmi	245ebc <__ccfg+0x225f14>
    52ac:	13000004 	movwne	r0, #4
    52b0:	0000374e 	andeq	r3, r0, lr, asr #14
    52b4:	07030707 	streq	r0, [r3, -r7, lsl #14]
    52b8:	000001ce 	andeq	r0, r0, lr, asr #3
    52bc:	0af81300 	beq	ffe09ec4 <_estack+0xdfe04ec4>
    52c0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    52c4:	02060803 	andeq	r0, r6, #196608	; 0x30000
    52c8:	00040000 	andeq	r0, r4, r0
    52cc:	0003bf0e 	andeq	fp, r3, lr, lsl #30
    52d0:	03090700 	movweq	r0, #38656	; 0x9700
    52d4:	00042403 	andeq	r2, r4, r3, lsl #8
    52d8:	00331400 	eorseq	r1, r3, r0, lsl #8
    52dc:	07300000 	ldreq	r0, [r0, -r0]!
    52e0:	bb08030b 	bllt	205f14 <__ccfg+0x1e5f6c>
    52e4:	13000004 	movwne	r0, #4
    52e8:	000019f9 	strdeq	r1, [r0], -r9
    52ec:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    52f0:	000001ce 	andeq	r0, r0, lr, asr #3
    52f4:	08a41300 	stmiaeq	r4!, {r8, r9, ip}
    52f8:	15070000 	strne	r0, [r7, #-0]
    52fc:	01ce0803 	biceq	r0, lr, r3, lsl #16
    5300:	13020000 	movwne	r0, #8192	; 0x2000
    5304:	000048be 			; <UNDEFINED> instruction: 0x000048be
    5308:	0b031607 	bleq	cab2c <__ccfg+0xaab84>
    530c:	000003c8 	andeq	r0, r0, r8, asr #7
    5310:	43211304 			; <UNDEFINED> instruction: 0x43211304
    5314:	17070000 	strne	r0, [r7, -r0]
    5318:	02060903 	andeq	r0, r6, #49152	; 0xc000
    531c:	13080000 	movwne	r0, #32768	; 0x8000
    5320:	00000007 	andeq	r0, r0, r7
    5324:	0f031807 	svceq	0x00031807
    5328:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    532c:	0722130c 	streq	r1, [r2, -ip, lsl #6]!
    5330:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    5334:	04cb1503 	strbeq	r1, [fp], #1283	; 0x503
    5338:	002c0000 	eoreq	r0, ip, r0
    533c:	00044b0c 	andeq	r4, r4, ip, lsl #22
    5340:	0004cb00 	andeq	ip, r4, r0, lsl #22
    5344:	00801500 	addeq	r1, r0, r0, lsl #10
    5348:	00030000 	andeq	r0, r3, r0
    534c:	0458040b 	ldrbeq	r0, [r8], #-1035	; 0xfffffbf5
    5350:	990e0000 	stmdbls	lr, {}	; <UNPREDICTABLE>
    5354:	07000008 	streq	r0, [r0, -r8]
    5358:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    535c:	11000004 	tstne	r0, r4
    5360:	00000879 	andeq	r0, r0, r9, ror r8
    5364:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    5368:	000004ed 	andeq	r0, r0, sp, ror #9
    536c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5370:	000004d1 	ldrdeq	r0, [r0], -r1
    5374:	00054a08 	andeq	r4, r5, r8, lsl #20
    5378:	131d0800 	tstne	sp, #0, 16
    537c:	000001ce 	andeq	r0, r0, lr, asr #3
    5380:	3e080101 	adfcce	f0, f0, f1
    5384:	08000002 	stmdaeq	r0, {r1}
    5388:	01df1a1e 	bicseq	r1, pc, lr, lsl sl	; <UNPREDICTABLE>
    538c:	01010000 	mrseq	r0, (UNDEF: 1)
    5390:	0008e608 	andeq	lr, r8, r8, lsl #12
    5394:	241e0800 	ldrcs	r0, [lr], #-2048	; 0xfffff800
    5398:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    539c:	02080101 	andeq	r0, r8, #1073741824	; 0x40000000
    53a0:	08000009 	stmdaeq	r0, {r0, r3}
    53a4:	04ed1422 	strbteq	r1, [sp], #1058	; 0x422
    53a8:	01010000 	mrseq	r0, (UNDEF: 1)
    53ac:	0001c016 	andeq	ip, r1, r6, lsl r0
    53b0:	02170900 	andseq	r0, r7, #0, 18
    53b4:	a803050e 	stmdage	r3, {r1, r2, r3, r8, sl}
    53b8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    53bc:	00000500 	andeq	r0, r0, r0, lsl #10
    53c0:	13730003 	cmnne	r3, #3
    53c4:	01040000 	mrseq	r0, (UNDEF: 4)
    53c8:	000000bd 	strheq	r0, [r0], -sp
    53cc:	00172b0c 	andseq	r2, r7, ip, lsl #22
    53d0:	00066400 	andeq	r6, r6, r0, lsl #8
    53d4:	00092000 	andeq	r2, r9, r0
    53d8:	00000000 	andeq	r0, r0, r0
    53dc:	0038d300 	eorseq	sp, r8, r0, lsl #6
    53e0:	06010200 	streq	r0, [r1], -r0, lsl #4
    53e4:	000008da 	ldrdeq	r0, [r0], -sl
    53e8:	9f050202 	svcls	0x00050202
    53ec:	02000007 	andeq	r0, r0, #7
    53f0:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
    53f4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    53f8:	0005e405 	andeq	lr, r5, r5, lsl #8
    53fc:	08310300 	ldmdaeq	r1!, {r8, r9}
    5400:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    5404:	00004d18 	andeq	r4, r0, r8, lsl sp
    5408:	08010200 	stmdaeq	r1, {r9}
    540c:	000008d8 	ldrdeq	r0, [r0], -r8
    5410:	0003ce03 	andeq	ip, r3, r3, lsl #28
    5414:	19310400 	ldmdbne	r1!, {sl}
    5418:	00000060 	andeq	r0, r0, r0, rrx
    541c:	a6070202 	strge	r0, [r7], -r2, lsl #4
    5420:	03000009 	movweq	r0, #9
    5424:	000008f1 	strdeq	r0, [r0], -r1
    5428:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    542c:	02000000 	andeq	r0, r0, #0
    5430:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
    5434:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5438:	00038e07 	andeq	r8, r3, r7, lsl #28
    543c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5440:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5444:	98070402 	stmdals	r7, {r1, sl}
    5448:	03000003 	movweq	r0, #3
    544c:	000023ca 	andeq	r2, r0, sl, asr #7
    5450:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    5454:	05000000 	streq	r0, [r0, #-0]
    5458:	0000008f 	andeq	r0, r0, pc, lsl #1
    545c:	00008f06 	andeq	r8, r0, r6, lsl #30
    5460:	18e30300 	stmiane	r3!, {r8, r9}^
    5464:	2b050000 	blcs	14546c <__ccfg+0x1254c4>
    5468:	00004112 	andeq	r4, r0, r2, lsl r1
    546c:	00a50600 	adceq	r0, r5, r0, lsl #12
    5470:	a5050000 	strge	r0, [r5, #-0]
    5474:	03000000 	movweq	r0, #0
    5478:	0000241b 	andeq	r2, r0, fp, lsl r4
    547c:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    5480:	05000000 	streq	r0, [r0, #-0]
    5484:	000000bb 	strheq	r0, [r0], -fp
    5488:	0004f703 	andeq	pc, r4, r3, lsl #14
    548c:	122d0500 	eorne	r0, sp, #0, 10
    5490:	00000067 	andeq	r0, r0, r7, rrx
    5494:	00087103 	andeq	r7, r8, r3, lsl #2
    5498:	102e0500 	eorne	r0, lr, r0, lsl #10
    549c:	000000e4 	andeq	r0, r0, r4, ror #1
    54a0:	008f0407 	addeq	r0, pc, r7, lsl #8
    54a4:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    54a8:	78093205 	stmdavc	r9, {r0, r2, r9, ip, sp}
    54ac:	09000001 	stmdbeq	r0, {r0}
    54b0:	0000003e 	andeq	r0, r0, lr, lsr r0
    54b4:	a5073405 	strge	r3, [r7, #-1029]	; 0xfffffbfb
    54b8:	01000000 	mrseq	r0, (UNDEF: 0)
    54bc:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    54c0:	000004fd 	strdeq	r0, [r0], -sp
    54c4:	a5033505 	strge	r3, [r3, #-1285]	; 0xfffffafb
    54c8:	01000000 	mrseq	r0, (UNDEF: 0)
    54cc:	09000601 	stmdbeq	r0, {r0, r9, sl}
    54d0:	00000237 	andeq	r0, r0, r7, lsr r2
    54d4:	a5033605 	strge	r3, [r3, #-1541]	; 0xfffff9fb
    54d8:	01000000 	mrseq	r0, (UNDEF: 0)
    54dc:	09000501 	stmdbeq	r0, {r0, r8, sl}
    54e0:	00000537 	andeq	r0, r0, r7, lsr r5
    54e4:	a5033705 	strge	r3, [r3, #-1797]	; 0xfffff8fb
    54e8:	01000000 	mrseq	r0, (UNDEF: 0)
    54ec:	09000401 	stmdbeq	r0, {r0, sl}
    54f0:	000007c0 	andeq	r0, r0, r0, asr #15
    54f4:	a5033805 	strge	r3, [r3, #-2053]	; 0xfffff7fb
    54f8:	01000000 	mrseq	r0, (UNDEF: 0)
    54fc:	0a000004 	beq	5514 <__exidx_end+0x5e8>
    5500:	00000504 	andeq	r0, r0, r4, lsl #10
    5504:	a5073a05 	strge	r3, [r7, #-2565]	; 0xfffff5fb
    5508:	01000000 	mrseq	r0, (UNDEF: 0)
    550c:	0006ce0a 	andeq	ip, r6, sl, lsl #28
    5510:	033c0500 	teqeq	ip, #0, 10
    5514:	000000a5 	andeq	r0, r0, r5, lsr #1
    5518:	0a6e0a02 	beq	1b87d28 <__ccfg+0x1b67d80>
    551c:	3d050000 	stccc	0, cr0, [r5, #-0]
    5520:	0000a503 	andeq	sl, r0, r3, lsl #10
    5524:	030a0300 	movweq	r0, #41728	; 0xa300
    5528:	05000007 	streq	r0, [r0, #-7]
    552c:	00bb083f 	adcseq	r0, fp, pc, lsr r8
    5530:	00040000 	andeq	r0, r4, r0
    5534:	00028503 	andeq	r8, r2, r3, lsl #10
    5538:	03410500 	movteq	r0, #5376	; 0x1500
    553c:	000000ea 	andeq	r0, r0, sl, ror #1
    5540:	00017806 	andeq	r7, r1, r6, lsl #16
    5544:	053e0b00 	ldreq	r0, [lr, #-2816]!	; 0xfffff500
    5548:	43050000 	movwmi	r0, #20480	; 0x5000
    554c:	0001841a 	andeq	r8, r1, sl, lsl r4
    5550:	0b010100 	bleq	45958 <__ccfg+0x259b0>
    5554:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    5558:	a50e4505 	strge	r4, [lr, #-1285]	; 0xfffffafb
    555c:	01000001 	tsteq	r0, r1
    5560:	ab040701 	blge	10716c <__ccfg+0xe71c4>
    5564:	02000001 	andeq	r0, r0, #1
    5568:	08e10801 	stmiaeq	r1!, {r0, fp}^
    556c:	ab050000 	blge	145574 <__ccfg+0x1255cc>
    5570:	0b000001 	bleq	557c <__exidx_end+0x650>
    5574:	0000028e 	andeq	r0, r0, lr, lsl #5
    5578:	a51e4505 	ldrge	r4, [lr, #-1285]	; 0xfffffafb
    557c:	01000001 	tsteq	r0, r1
    5580:	06080801 	streq	r0, [r8], -r1, lsl #16
    5584:	01f6098f 	mvnseq	r0, pc, lsl #19
    5588:	010a0000 	mrseq	r0, (UNDEF: 10)
    558c:	06000006 	streq	r0, [r0], -r6
    5590:	00670b90 	mlseq	r7, r0, fp, r0
    5594:	0a000000 	beq	559c <__exidx_end+0x670>
    5598:	00000ba0 	andeq	r0, r0, r0, lsr #23
    559c:	8f089106 	svchi	0x00089106
    55a0:	04000000 	streq	r0, [r0], #-0
    55a4:	0001ea0a 	andeq	lr, r1, sl, lsl #20
    55a8:	10920600 	addsne	r0, r2, r0, lsl #12
    55ac:	000000b1 	strheq	r0, [r0], -r1
    55b0:	41030006 	tstmi	r3, r6
    55b4:	06000009 	streq	r0, [r0], -r9
    55b8:	01c50393 			; <UNDEFINED> instruction: 0x01c50393
    55bc:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    55c0:	0d000001 	stceq	0, cr0, [r0, #-4]
    55c4:	0d000002 	stceq	0, cr0, [r0, #-8]
    55c8:	070f0b00 	streq	r0, [pc, -r0, lsl #22]
    55cc:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    55d0:	0002020f 	andeq	r0, r2, pc, lsl #4
    55d4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    55d8:	0000b604 	andeq	fp, r0, r4, lsl #12
    55dc:	07010800 	streq	r0, [r1, -r0, lsl #16]
    55e0:	024b0991 	subeq	r0, fp, #2375680	; 0x244000
    55e4:	0a090000 	beq	2455ec <__ccfg+0x225644>
    55e8:	07000007 	streq	r0, [r0, -r7]
    55ec:	00a50793 	umlaleq	r0, r5, r3, r7
    55f0:	07010000 	streq	r0, [r1, -r0]
    55f4:	78090001 	stmdavc	r9, {r0}
    55f8:	07000004 	streq	r0, [r0, -r4]
    55fc:	00a50394 	umlaleq	r0, r5, r4, r3
    5600:	01010000 	mrseq	r0, (UNDEF: 1)
    5604:	03000000 	movweq	r0, #0
    5608:	000007cc 	andeq	r0, r0, ip, asr #15
    560c:	21039607 	tstcs	r3, r7, lsl #12
    5610:	05000002 	streq	r0, [r0, #-2]
    5614:	0000024b 	andeq	r0, r0, fp, asr #4
    5618:	0002570c 	andeq	r5, r2, ip, lsl #14
    561c:	00026700 	andeq	r6, r2, r0, lsl #14
    5620:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5624:	0000025c 	andeq	r0, r0, ip, asr r2
    5628:	0003470b 	andeq	r4, r3, fp, lsl #14
    562c:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    5630:	00000267 	andeq	r0, r0, r7, ror #4
    5634:	9b0c0101 	blls	305a40 <__ccfg+0x2e5a98>
    5638:	85000000 	strhi	r0, [r0, #-0]
    563c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5640:	027a0500 	rsbseq	r0, sl, #0, 10
    5644:	b70b0000 	strlt	r0, [fp, -r0]
    5648:	08000004 	stmdaeq	r0, {r2}
    564c:	02851306 	addeq	r1, r5, #402653184	; 0x18000000
    5650:	01010000 	mrseq	r0, (UNDEF: 1)
    5654:	0006b00b 	andeq	fp, r6, fp
    5658:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    565c:	000000bb 	strheq	r0, [r0], -fp
    5660:	fa0e0101 	blx	385a6c <__ccfg+0x365ac4>
    5664:	09000008 	stmdbeq	r0, {r3}
    5668:	b310016e 	tstlt	r0, #-2147483621	; 0x8000001b
    566c:	07000002 	streq	r0, [r0, -r2]
    5670:	0002b904 	andeq	fp, r2, r4, lsl #18
    5674:	c5010f00 	strgt	r0, [r1, #-3840]	; 0xfffff100
    5678:	10000002 	andne	r0, r0, r2
    567c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5680:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    5684:	02d00000 	sbcseq	r0, r0, #0
    5688:	000d0000 	andeq	r0, sp, r0
    568c:	0002c505 	andeq	ip, r2, r5, lsl #10
    5690:	07631100 	strbeq	r1, [r3, -r0, lsl #2]!
    5694:	7f090000 	svcvc	0x00090000
    5698:	02d01601 	sbcseq	r1, r0, #1048576	; 0x100000
    569c:	01010000 	mrseq	r0, (UNDEF: 1)
    56a0:	00032a11 	andeq	r2, r3, r1, lsl sl
    56a4:	01820900 	orreq	r0, r2, r0, lsl #18
    56a8:	0000c714 	andeq	ip, r0, r4, lsl r7
    56ac:	11010100 	mrsne	r0, (UNDEF: 17)
    56b0:	00000307 	andeq	r0, r0, r7, lsl #6
    56b4:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    56b8:	000000bb 	strheq	r0, [r0], -fp
    56bc:	08120101 	ldmdaeq	r2, {r0, r8}
    56c0:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    56c4:	00000329 	andeq	r0, r0, r9, lsr #6
    56c8:	00374e13 	eorseq	r4, r7, r3, lsl lr
    56cc:	03070900 	movweq	r0, #30976	; 0x7900
    56d0:	00008f07 	andeq	r8, r0, r7, lsl #30
    56d4:	f8130000 			; <UNDEFINED> instruction: 0xf8130000
    56d8:	0900000a 	stmdbeq	r0, {r1, r3}
    56dc:	cc080308 	stcgt	3, cr0, [r8], {8}
    56e0:	04000000 	streq	r0, [r0], #-0
    56e4:	03bf0e00 			; <UNDEFINED> instruction: 0x03bf0e00
    56e8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    56ec:	03020303 	movweq	r0, #8963	; 0x2303
    56f0:	33140000 	tstcc	r4, #0
    56f4:	30000000 	andcc	r0, r0, r0
    56f8:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    56fc:	00000399 	muleq	r0, r9, r3
    5700:	0019f913 	andseq	pc, r9, r3, lsl r9	; <UNPREDICTABLE>
    5704:	03140900 	tsteq	r4, #0, 18
    5708:	00008f08 	andeq	r8, r0, r8, lsl #30
    570c:	a4130000 	ldrge	r0, [r3], #-0
    5710:	09000008 	stmdbeq	r0, {r3}
    5714:	8f080315 	svchi	0x00080315
    5718:	02000000 	andeq	r0, r0, #0
    571c:	0048be13 	subeq	fp, r8, r3, lsl lr
    5720:	03160900 	tsteq	r6, #0, 18
    5724:	0002a60b 	andeq	sl, r2, fp, lsl #12
    5728:	21130400 	tstcs	r3, r0, lsl #8
    572c:	09000043 	stmdbeq	r0, {r0, r1, r6}
    5730:	cc090317 	stcgt	3, cr0, [r9], {23}
    5734:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5738:	00000713 	andeq	r0, r0, r3, lsl r7
    573c:	03180900 	tsteq	r8, #0, 18
    5740:	0003990f 	andeq	r9, r3, pc, lsl #18
    5744:	22130c00 	andscs	r0, r3, #0, 24
    5748:	09000007 	stmdbeq	r0, {r0, r1, r2}
    574c:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    5750:	2c000003 	stccs	0, cr0, [r0], {3}
    5754:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
    5758:	03a90000 			; <UNDEFINED> instruction: 0x03a90000
    575c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5760:	03000000 	movweq	r0, #0
    5764:	36040700 	strcc	r0, [r4], -r0, lsl #14
    5768:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    576c:	00000899 	muleq	r0, r9, r8
    5770:	1b031c09 	blne	cc79c <__ccfg+0xac7f4>
    5774:	00000336 	andeq	r0, r0, r6, lsr r3
    5778:	00087911 	andeq	r7, r8, r1, lsl r9
    577c:	031e0900 	tsteq	lr, #0, 18
    5780:	0003cb14 	andeq	ip, r3, r4, lsl fp
    5784:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5788:	0003af04 	andeq	sl, r3, r4, lsl #30
    578c:	054a0b00 	strbeq	r0, [sl, #-2816]	; 0xfffff500
    5790:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    5794:	00008f13 	andeq	r8, r0, r3, lsl pc
    5798:	0b010100 	bleq	45ba0 <__ccfg+0x25bf8>
    579c:	0000023e 	andeq	r0, r0, lr, lsr r2
    57a0:	a01a1e0a 	andsge	r1, sl, sl, lsl #28
    57a4:	01000000 	mrseq	r0, (UNDEF: 0)
    57a8:	08e60b01 	stmiaeq	r6!, {r0, r8, r9, fp}^
    57ac:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    57b0:	0000a024 	andeq	sl, r0, r4, lsr #32
    57b4:	0b010100 	bleq	45bbc <__ccfg+0x25c14>
    57b8:	00000902 	andeq	r0, r0, r2, lsl #18
    57bc:	cb14220a 	blgt	50dfec <__ccfg+0x4ee044>
    57c0:	01000003 	tsteq	r0, r3
    57c4:	026c1601 	rsbeq	r1, ip, #1048576	; 0x100000
    57c8:	0d010000 	stceq	0, cr0, [r1, #-0]
    57cc:	29030510 	stmdbcs	r3, {r4, r8, sl}
    57d0:	17000045 	strne	r0, [r0, -r5, asr #32]
    57d4:	00170b01 	andseq	r0, r7, r1, lsl #22
    57d8:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    57dc:	00000001 	andeq	r0, r0, r1
    57e0:	00000000 	andeq	r0, r0, r0
    57e4:	bb9c0100 	bllt	fe705bec <_estack+0xde700bec>
    57e8:	18000004 	stmdane	r0, {r2}
    57ec:	01007473 	tsteq	r0, r3, ror r4
    57f0:	008f1c11 	addeq	r1, pc, r1, lsl ip	; <UNPREDICTABLE>
    57f4:	1f610000 	svcne	0x00610000
    57f8:	06190000 	ldreq	r0, [r9], -r0
    57fc:	01000017 	tsteq	r0, r7, lsl r0
    5800:	021b2c11 	andseq	r2, fp, #4352	; 0x1100
    5804:	1f7f0000 	svcne	0x007f0000
    5808:	76180000 	ldrvc	r0, [r8], -r0
    580c:	01006c61 	tsteq	r0, r1, ror #24
    5810:	00d83a11 	sbcseq	r3, r8, r1, lsl sl
    5814:	1f9d0000 	svcne	0x009d0000
    5818:	701a0000 	andsvc	r0, sl, r0
    581c:	12130100 	andsne	r0, r3, #0, 2
    5820:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    5824:	0100691b 	tsteq	r0, fp, lsl r9
    5828:	008f0714 	addeq	r0, pc, r4, lsl r7	; <UNPREDICTABLE>
    582c:	1fbb0000 	svcne	0x00bb0000
    5830:	761a0000 	ldrvc	r0, [sl], -r0
    5834:	07150100 	ldreq	r0, [r5, -r0, lsl #2]
    5838:	000000a5 	andeq	r0, r0, r5, lsr #1
    583c:	0004d41c 	andeq	sp, r4, ip, lsl r4
	...
    5848:	031c0100 	tsteq	ip, #0, 2
    584c:	0004de1c 	andeq	sp, r4, ip, lsl lr
	...
    5858:	031f0100 	tsteq	pc, #0, 2
    585c:	0004e81d 	andeq	lr, r4, sp, lsl r8
    5860:	00000000 	andeq	r0, r0, r0
    5864:	0008f800 	andeq	pc, r8, r0, lsl #16
    5868:	0b260100 	bleq	985c70 <__ccfg+0x965cc8>
    586c:	0004f61e 	andeq	pc, r4, lr, lsl r6	; <UNPREDICTABLE>
    5870:	001fce00 	andseq	ip, pc, r0, lsl #28
    5874:	07000000 	streq	r0, [r0, -r0]
    5878:	00025704 	andeq	r5, r2, r4, lsl #14
    587c:	1b011f00 	blne	4d484 <__ccfg+0x2d4dc>
    5880:	01000017 	tsteq	r0, r7, lsl r0
    5884:	0000060f 	andeq	r0, r0, pc, lsl #12
    5888:	00000000 	andeq	r0, r0, r0
    588c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5890:	000da920 	andeq	sl, sp, r0, lsr #18
    5894:	355b0200 	ldrbcc	r0, [fp, #-512]	; 0xfffffe00
    5898:	c9200301 	stmdbgt	r0!, {r0, r8, r9}
    589c:	0200000a 	andeq	r0, r0, #10
    58a0:	03013550 	movweq	r3, #5456	; 0x1550
    58a4:	0016f921 	andseq	pc, r6, r1, lsr #18
    58a8:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    58ac:	00006701 	andeq	r6, r0, r1, lsl #14
    58b0:	4c220300 	stcmi	3, cr0, [r2], #-0
    58b4:	0300000c 	movweq	r0, #12
    58b8:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    58bc:	00000000 	andeq	r0, r0, r0
    58c0:	000004f6 	strdeq	r0, [r0], -r6
    58c4:	15640003 	strbne	r0, [r4, #-3]!
    58c8:	01040000 	mrseq	r0, (UNDEF: 4)
    58cc:	000000bd 	strheq	r0, [r0], -sp
    58d0:	0017850c 	andseq	r8, r7, ip, lsl #10
    58d4:	00066400 	andeq	r6, r6, r0, lsl #8
    58d8:	00099800 	andeq	r9, r9, r0, lsl #16
    58dc:	00000000 	andeq	r0, r0, r0
    58e0:	003b7000 	eorseq	r7, fp, r0
    58e4:	06010200 	streq	r0, [r1], -r0, lsl #4
    58e8:	000008da 	ldrdeq	r0, [r0], -sl
    58ec:	9f050202 	svcls	0x00050202
    58f0:	02000007 	andeq	r0, r0, #7
    58f4:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
    58f8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    58fc:	0005e405 	andeq	lr, r5, r5, lsl #8
    5900:	08310300 	ldmdaeq	r1!, {r8, r9}
    5904:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    5908:	00004d18 	andeq	r4, r0, r8, lsl sp
    590c:	08010200 	stmdaeq	r1, {r9}
    5910:	000008d8 	ldrdeq	r0, [r0], -r8
    5914:	0003ce03 	andeq	ip, r3, r3, lsl #28
    5918:	19310300 	ldmdbne	r1!, {r8, r9}
    591c:	00000060 	andeq	r0, r0, r0, rrx
    5920:	a6070202 	strge	r0, [r7], -r2, lsl #4
    5924:	03000009 	movweq	r0, #9
    5928:	000008f1 	strdeq	r0, [r0], -r1
    592c:	73193403 	tstvc	r9, #50331648	; 0x3000000
    5930:	02000000 	andeq	r0, r0, #0
    5934:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
    5938:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    593c:	00038e07 	andeq	r8, r3, r7, lsl #28
    5940:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5944:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5948:	98070402 	stmdals	r7, {r1, sl}
    594c:	03000003 	movweq	r0, #3
    5950:	000023ca 	andeq	r2, r0, sl, asr #7
    5954:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    5958:	05000000 	streq	r0, [r0, #-0]
    595c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5960:	00008f06 	andeq	r8, r0, r6, lsl #30
    5964:	18e30300 	stmiane	r3!, {r8, r9}^
    5968:	2b040000 	blcs	105970 <__ccfg+0xe59c8>
    596c:	00004112 	andeq	r4, r0, r2, lsl r1
    5970:	00a50600 	adceq	r0, r5, r0, lsl #12
    5974:	1b030000 	blne	c597c <__ccfg+0xa59d4>
    5978:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    597c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5980:	b6050000 	strlt	r0, [r5], -r0
    5984:	03000000 	movweq	r0, #0
    5988:	000004f7 	strdeq	r0, [r0], -r7
    598c:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    5990:	07000000 	streq	r0, [r0, -r0]
    5994:	09320408 	ldmdbeq	r2!, {r3, sl}
    5998:	00000161 	andeq	r0, r0, r1, ror #2
    599c:	00003e08 	andeq	r3, r0, r8, lsl #28
    59a0:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    59a4:	000000a5 	andeq	r0, r0, r5, lsr #1
    59a8:	00070101 	andeq	r0, r7, r1, lsl #2
    59ac:	0004fd08 	andeq	pc, r4, r8, lsl #26
    59b0:	03350400 	teqeq	r5, #0, 8
    59b4:	000000a5 	andeq	r0, r0, r5, lsr #1
    59b8:	00060101 	andeq	r0, r6, r1, lsl #2
    59bc:	00023708 	andeq	r3, r2, r8, lsl #14
    59c0:	03360400 	teqeq	r6, #0, 8
    59c4:	000000a5 	andeq	r0, r0, r5, lsr #1
    59c8:	00050101 	andeq	r0, r5, r1, lsl #2
    59cc:	00053708 	andeq	r3, r5, r8, lsl #14
    59d0:	03370400 	teqeq	r7, #0, 8
    59d4:	000000a5 	andeq	r0, r0, r5, lsr #1
    59d8:	00040101 	andeq	r0, r4, r1, lsl #2
    59dc:	0007c008 	andeq	ip, r7, r8
    59e0:	03380400 	teqeq	r8, #0, 8
    59e4:	000000a5 	andeq	r0, r0, r5, lsr #1
    59e8:	00000401 	andeq	r0, r0, r1, lsl #8
    59ec:	00050409 	andeq	r0, r5, r9, lsl #8
    59f0:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    59f4:	000000a5 	andeq	r0, r0, r5, lsr #1
    59f8:	06ce0901 	strbeq	r0, [lr], r1, lsl #18
    59fc:	3c040000 	stccc	0, cr0, [r4], {-0}
    5a00:	0000a503 	andeq	sl, r0, r3, lsl #10
    5a04:	6e090200 	cdpvs	2, 0, cr0, cr9, cr0, {0}
    5a08:	0400000a 	streq	r0, [r0], #-10
    5a0c:	00a5033d 	adceq	r0, r5, sp, lsr r3
    5a10:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    5a14:	00000703 	andeq	r0, r0, r3, lsl #14
    5a18:	b6083f04 	strlt	r3, [r8], -r4, lsl #30
    5a1c:	04000000 	streq	r0, [r0], #-0
    5a20:	02850300 	addeq	r0, r5, #0, 6
    5a24:	41040000 	mrsmi	r0, (UNDEF: 4)
    5a28:	0000d303 	andeq	sp, r0, r3, lsl #6
    5a2c:	01610600 	cmneq	r1, r0, lsl #12
    5a30:	3e0a0000 	cdpcc	0, 0, cr0, cr10, cr0, {0}
    5a34:	04000005 	streq	r0, [r0], #-5
    5a38:	016d1a43 	cmneq	sp, r3, asr #20
    5a3c:	01010000 	mrseq	r0, (UNDEF: 1)
    5a40:	0001b10a 	andeq	fp, r1, sl, lsl #2
    5a44:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    5a48:	0000018e 	andeq	r0, r0, lr, lsl #3
    5a4c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5a50:	00000194 	muleq	r0, r4, r1
    5a54:	e1080102 	tst	r8, r2, lsl #2
    5a58:	05000008 	streq	r0, [r0, #-8]
    5a5c:	00000194 	muleq	r0, r4, r1
    5a60:	00028e0a 	andeq	r8, r2, sl, lsl #28
    5a64:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    5a68:	0000018e 	andeq	r0, r0, lr, lsl #3
    5a6c:	08070101 	stmdaeq	r7, {r0, r8}
    5a70:	df098f05 	svcle	0x00098f05
    5a74:	09000001 	stmdbeq	r0, {r0}
    5a78:	00000601 	andeq	r0, r0, r1, lsl #12
    5a7c:	670b9005 	strvs	r9, [fp, -r5]
    5a80:	00000000 	andeq	r0, r0, r0
    5a84:	000ba009 	andeq	sl, fp, r9
    5a88:	08910500 	ldmeq	r1, {r8, sl}
    5a8c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5a90:	01ea0904 	mvneq	r0, r4, lsl #18
    5a94:	92050000 	andls	r0, r5, #0
    5a98:	0000b110 	andeq	fp, r0, r0, lsl r1
    5a9c:	03000600 	movweq	r0, #1536	; 0x600
    5aa0:	00000941 	andeq	r0, r0, r1, asr #18
    5aa4:	ae039305 	cdpge	3, 0, cr9, cr3, cr5, {0}
    5aa8:	0c000001 	stceq	0, cr0, [r0], {1}
    5aac:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5ab0:	000001f6 	strdeq	r0, [r0], -r6
    5ab4:	0f0a000d 	svceq	0x000a000d
    5ab8:	05000007 	streq	r0, [r0, #-7]
    5abc:	01eb0f99 	strexheq	r0, r9, [fp]
    5ac0:	01010000 	mrseq	r0, (UNDEF: 1)
    5ac4:	91060107 	tstls	r6, r7, lsl #2
    5ac8:	00022e09 	andeq	r2, r2, r9, lsl #28
    5acc:	070a0800 	streq	r0, [sl, -r0, lsl #16]
    5ad0:	93060000 	movwls	r0, #24576	; 0x6000
    5ad4:	0000a507 	andeq	sl, r0, r7, lsl #10
    5ad8:	01070100 	mrseq	r0, (UNDEF: 23)
    5adc:	04780800 	ldrbteq	r0, [r8], #-2048	; 0xfffff800
    5ae0:	94060000 	strls	r0, [r6], #-0
    5ae4:	0000a503 	andeq	sl, r0, r3, lsl #10
    5ae8:	00010100 	andeq	r0, r1, r0, lsl #2
    5aec:	cc030000 	stcgt	0, cr0, [r3], {-0}
    5af0:	06000007 	streq	r0, [r0], -r7
    5af4:	02040396 	andeq	r0, r4, #1476395010	; 0x58000002
    5af8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5afc:	0c000002 	stceq	0, cr0, [r0], {2}
    5b00:	0000023a 	andeq	r0, r0, sl, lsr r2
    5b04:	0000024a 	andeq	r0, r0, sl, asr #4
    5b08:	3f05000d 	svccc	0x0005000d
    5b0c:	0a000002 	beq	5b1c <__exidx_end+0xbf0>
    5b10:	00000347 	andeq	r0, r0, r7, asr #6
    5b14:	4a179c06 	bmi	5ecb34 <__ccfg+0x5ccb8c>
    5b18:	01000002 	tsteq	r0, r2
    5b1c:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5b20:	02680000 	rsbeq	r0, r8, #0
    5b24:	000d0000 	andeq	r0, sp, r0
    5b28:	00025d05 	andeq	r5, r2, r5, lsl #26
    5b2c:	04b70a00 	ldrteq	r0, [r7], #2560	; 0xa00
    5b30:	06070000 	streq	r0, [r7], -r0
    5b34:	00026813 	andeq	r6, r2, r3, lsl r8
    5b38:	0a010100 	beq	45f40 <__ccfg+0x25f98>
    5b3c:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    5b40:	b60ec305 	strlt	ip, [lr], -r5, lsl #6
    5b44:	01000000 	mrseq	r0, (UNDEF: 0)
    5b48:	08fa0e01 	ldmeq	sl!, {r0, r9, sl, fp}^
    5b4c:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    5b50:	02961001 	addseq	r1, r6, #1
    5b54:	040b0000 	streq	r0, [fp], #-0
    5b58:	0000029c 	muleq	r0, ip, r2
    5b5c:	02a8010f 	adceq	r0, r8, #-1073741821	; 0xc0000003
    5b60:	8f100000 	svchi	0x00100000
    5b64:	00000000 	andeq	r0, r0, r0
    5b68:	00019b0c 	andeq	r9, r1, ip, lsl #22
    5b6c:	0002b300 	andeq	fp, r2, r0, lsl #6
    5b70:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5b74:	000002a8 	andeq	r0, r0, r8, lsr #5
    5b78:	00076311 	andeq	r6, r7, r1, lsl r3
    5b7c:	017f0800 	cmneq	pc, r0, lsl #16
    5b80:	0002b316 	andeq	fp, r2, r6, lsl r3
    5b84:	11010100 	mrsne	r0, (UNDEF: 17)
    5b88:	0000032a 	andeq	r0, r0, sl, lsr #6
    5b8c:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    5b90:	000000c2 	andeq	r0, r0, r2, asr #1
    5b94:	07110101 	ldreq	r0, [r1, -r1, lsl #2]
    5b98:	08000003 	stmdaeq	r0, {r0, r1}
    5b9c:	b60e02d8 			; <UNDEFINED> instruction: 0xb60e02d8
    5ba0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ba4:	08081201 	stmdaeq	r8, {r0, r9, ip}
    5ba8:	0c090303 	stceq	3, cr0, [r9], {3}
    5bac:	13000003 	movwne	r0, #3
    5bb0:	0000374e 	andeq	r3, r0, lr, asr #14
    5bb4:	07030708 	streq	r0, [r3, -r8, lsl #14]
    5bb8:	0000008f 	andeq	r0, r0, pc, lsl #1
    5bbc:	0af81300 	beq	ffe0a7c4 <_estack+0xdfe057c4>
    5bc0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    5bc4:	00c70803 	sbceq	r0, r7, r3, lsl #16
    5bc8:	00040000 	andeq	r0, r4, r0
    5bcc:	0003bf0e 	andeq	fp, r3, lr, lsl #30
    5bd0:	03090800 	movweq	r0, #38912	; 0x9800
    5bd4:	0002e503 	andeq	lr, r2, r3, lsl #10
    5bd8:	00331400 	eorseq	r1, r3, r0, lsl #8
    5bdc:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    5be0:	7c08030b 	stcvc	3, cr0, [r8], {11}
    5be4:	13000003 	movwne	r0, #3
    5be8:	000019f9 	strdeq	r1, [r0], -r9
    5bec:	08031408 	stmdaeq	r3, {r3, sl, ip}
    5bf0:	0000008f 	andeq	r0, r0, pc, lsl #1
    5bf4:	08a41300 	stmiaeq	r4!, {r8, r9, ip}
    5bf8:	15080000 	strne	r0, [r8, #-0]
    5bfc:	008f0803 	addeq	r0, pc, r3, lsl #16
    5c00:	13020000 	movwne	r0, #8192	; 0x2000
    5c04:	000048be 			; <UNDEFINED> instruction: 0x000048be
    5c08:	0b031608 	bleq	cb430 <__ccfg+0xab488>
    5c0c:	00000289 	andeq	r0, r0, r9, lsl #5
    5c10:	43211304 			; <UNDEFINED> instruction: 0x43211304
    5c14:	17080000 	strne	r0, [r8, -r0]
    5c18:	00c70903 	sbceq	r0, r7, r3, lsl #18
    5c1c:	13080000 	movwne	r0, #32768	; 0x8000
    5c20:	00000007 	andeq	r0, r0, r7
    5c24:	0f031808 	svceq	0x00031808
    5c28:	0000037c 	andeq	r0, r0, ip, ror r3
    5c2c:	0722130c 	streq	r1, [r2, -ip, lsl #6]!
    5c30:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    5c34:	038c1503 	orreq	r1, ip, #12582912	; 0xc00000
    5c38:	002c0000 	eoreq	r0, ip, r0
    5c3c:	00030c0c 	andeq	r0, r3, ip, lsl #24
    5c40:	00038c00 	andeq	r8, r3, r0, lsl #24
    5c44:	00881500 	addeq	r1, r8, r0, lsl #10
    5c48:	00030000 	andeq	r0, r3, r0
    5c4c:	0319040b 	tsteq	r9, #184549376	; 0xb000000
    5c50:	990e0000 	stmdbls	lr, {}	; <UNPREDICTABLE>
    5c54:	08000008 	stmdaeq	r0, {r3}
    5c58:	191b031c 	ldmdbne	fp, {r2, r3, r4, r8, r9}
    5c5c:	11000003 	tstne	r0, r3
    5c60:	00000879 	andeq	r0, r0, r9, ror r8
    5c64:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    5c68:	000003ae 	andeq	r0, r0, lr, lsr #7
    5c6c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5c70:	00000392 	muleq	r0, r2, r3
    5c74:	00054a0a 	andeq	r4, r5, sl, lsl #20
    5c78:	131d0900 	tstne	sp, #0, 18
    5c7c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5c80:	3e0a0101 	adfcce	f0, f2, f1
    5c84:	09000002 	stmdbeq	r0, {r1}
    5c88:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    5c8c:	01010000 	mrseq	r0, (UNDEF: 1)
    5c90:	0008e60a 	andeq	lr, r8, sl, lsl #12
    5c94:	241e0900 	ldrcs	r0, [lr], #-2304	; 0xfffff700
    5c98:	000000a0 	andeq	r0, r0, r0, lsr #1
    5c9c:	020a0101 	andeq	r0, sl, #1073741824	; 0x40000000
    5ca0:	09000009 	stmdbeq	r0, {r0, r3}
    5ca4:	03ae1422 			; <UNDEFINED> instruction: 0x03ae1422
    5ca8:	01010000 	mrseq	r0, (UNDEF: 1)
    5cac:	00177416 	andseq	r7, r7, r6, lsl r4
    5cb0:	0f080100 	svceq	0x00080100
    5cb4:	00000296 	muleq	r0, r6, r2
    5cb8:	00000305 	andeq	r0, r0, r5, lsl #6
    5cbc:	c1160000 	tstgt	r6, r0
    5cc0:	01000017 	tsteq	r0, r7, lsl r0
    5cc4:	008f0d09 	addeq	r0, pc, r9, lsl #26
    5cc8:	03050000 	movweq	r0, #20480	; 0x5000
    5ccc:	00000000 	andeq	r0, r0, r0
    5cd0:	00026d17 	andeq	r6, r2, r7, lsl sp
    5cd4:	0c0a0100 	stfeqs	f0, [sl], {-0}
    5cd8:	452e0305 	strmi	r0, [lr, #-773]!	; 0xfffffcfb
    5cdc:	01180000 	tsteq	r8, r0
    5ce0:	000017d6 	ldrdeq	r1, [r0], -r6
    5ce4:	01065801 	tsteq	r6, r1, lsl #16
	...
    5cf0:	04479c01 	strbeq	r9, [r7], #-3073	; 0xfffff3ff
    5cf4:	61190000 	tstvs	r9, r0
    5cf8:	01007463 	tsteq	r0, r3, ror #8
    5cfc:	02961d58 	addseq	r1, r6, #88, 26	; 0x1600
    5d00:	1fe10000 	svcne	0x00e10000
    5d04:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5d08:	0017c901 	andseq	ip, r7, r1, lsl #18
    5d0c:	011c0100 	tsteq	ip, r0, lsl #2
    5d10:	00000001 	andeq	r0, r0, r1
    5d14:	00000000 	andeq	r0, r0, r0
    5d18:	de9c0100 	fmllee	f0, f4, f0
    5d1c:	1a000004 	bne	5d34 <__exidx_end+0xe08>
    5d20:	000008c8 	andeq	r0, r0, r8, asr #17
    5d24:	8f011c01 	svchi	0x00011c01
    5d28:	1d000000 	stcne	0, cr0, [r0, #-0]
    5d2c:	1b000020 	blne	5db4 <__exidx_end+0xe88>
    5d30:	0000176f 	andeq	r1, r0, pc, ror #14
    5d34:	00012101 	andeq	r2, r1, r1, lsl #2
    5d38:	1b000000 	blne	5d40 <__exidx_end+0xe14>
    5d3c:	0000177c 	andeq	r1, r0, ip, ror r7
    5d40:	00013001 	andeq	r3, r1, r1
    5d44:	1b000000 	blne	5d4c <__exidx_end+0xe20>
    5d48:	000018ce 	andeq	r1, r0, lr, asr #17
    5d4c:	00013701 	andeq	r3, r1, r1, lsl #14
    5d50:	1c000000 	stcne	0, cr0, [r0], {-0}
    5d54:	000004de 	ldrdeq	r0, [r0], -lr
    5d58:	00000000 	andeq	r0, r0, r0
    5d5c:	00000938 	andeq	r0, r0, r8, lsr r9
    5d60:	ad072b01 	vstrge	d2, [r7, #-4]
    5d64:	1d000004 	stcne	0, cr0, [r0, #-16]
    5d68:	000004ec 	andeq	r0, r0, ip, ror #9
    5d6c:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    5d70:	00000000 	andeq	r0, r0, r0
    5d74:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    5d78:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5d7c:	0004c707 	andeq	ip, r4, r7, lsl #14
    5d80:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    5d84:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5d88:	000004de 	ldrdeq	r0, [r0], -lr
    5d8c:	00000000 	andeq	r0, r0, r0
    5d90:	00000978 	andeq	r0, r0, r8, ror r9
    5d94:	1d074a01 	vstrne	s8, [r7, #-4]
    5d98:	000004ec 	andeq	r0, r0, ip, ror #9
    5d9c:	f91f0000 			; <UNDEFINED> instruction: 0xf91f0000
    5da0:	02000016 	andeq	r0, r0, #22
    5da4:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    5da8:	03000000 	movweq	r0, #0
    5dac:	000c4c20 	andeq	r4, ip, r0, lsr #24
    5db0:	18a40200 	stmiane	r4!, {r9}
    5db4:	00000067 	andeq	r0, r0, r7, rrx
    5db8:	0aa70000 	beq	fe9c5dc0 <_estack+0xde9c0dc0>
    5dbc:	00030000 	andeq	r0, r3, r0
    5dc0:	0000172f 	andeq	r1, r0, pc, lsr #14
    5dc4:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    5dc8:	5c0c0000 	stcpl	0, cr0, [ip], {-0}
    5dcc:	64000018 	strvs	r0, [r0], #-24	; 0xffffffe8
    5dd0:	38000006 	stmdacc	r0, {r1, r2}
    5dd4:	0000000b 	andeq	r0, r0, fp
    5dd8:	b0000000 	andlt	r0, r0, r0
    5ddc:	0200003e 	andeq	r0, r0, #62	; 0x3e
    5de0:	08da0601 	ldmeq	sl, {r0, r9, sl}^
    5de4:	02020000 	andeq	r0, r2, #0
    5de8:	00079f05 	andeq	r9, r7, r5, lsl #30
    5dec:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5df0:	000005e9 	andeq	r0, r0, r9, ror #11
    5df4:	e4050802 	str	r0, [r5], #-2050	; 0xfffff7fe
    5df8:	03000005 	movweq	r0, #5
    5dfc:	00000831 	andeq	r0, r0, r1, lsr r8
    5e00:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    5e04:	02000000 	andeq	r0, r0, #0
    5e08:	08d80801 	ldmeq	r8, {r0, fp}^
    5e0c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    5e10:	04000003 	streq	r0, [r0], #-3
    5e14:	00601931 	rsbeq	r1, r0, r1, lsr r9
    5e18:	02020000 	andeq	r0, r2, #0
    5e1c:	0009a607 	andeq	sl, r9, r7, lsl #12
    5e20:	08f10300 	ldmeq	r1!, {r8, r9}^
    5e24:	34040000 	strcc	r0, [r4], #-0
    5e28:	00007319 	andeq	r7, r0, r9, lsl r3
    5e2c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5e30:	00000393 	muleq	r0, r3, r3
    5e34:	8e070802 	cdphi	8, 0, cr0, cr7, cr2, {0}
    5e38:	04000003 	streq	r0, [r0], #-3
    5e3c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5e40:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5e44:	00039807 	andeq	r9, r3, r7, lsl #16
    5e48:	072f0300 	streq	r0, [pc, -r0, lsl #6]!
    5e4c:	26050000 	strcs	r0, [r5], -r0
    5e50:	00004112 	andeq	r4, r0, r2, lsl r1
    5e54:	23ca0300 	biccs	r0, sl, #0, 6
    5e58:	27050000 	strcs	r0, [r5, -r0]
    5e5c:	00005412 	andeq	r5, r0, r2, lsl r4
    5e60:	009b0500 	addseq	r0, fp, r0, lsl #10
    5e64:	9b060000 	blls	185e6c <__ccfg+0x165ec4>
    5e68:	03000000 	movweq	r0, #0
    5e6c:	000018e3 	andeq	r1, r0, r3, ror #17
    5e70:	41122b05 	tstmi	r2, r5, lsl #22
    5e74:	06000000 	streq	r0, [r0], -r0
    5e78:	000000b1 	strheq	r0, [r0], -r1
    5e7c:	0000b105 	andeq	fp, r0, r5, lsl #2
    5e80:	241b0300 	ldrcs	r0, [fp], #-768	; 0xfffffd00
    5e84:	2c050000 	stccs	0, cr0, [r5], {-0}
    5e88:	00006712 	andeq	r6, r0, r2, lsl r7
    5e8c:	00c70500 	sbceq	r0, r7, r0, lsl #10
    5e90:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    5e94:	05000004 	streq	r0, [r0, #-4]
    5e98:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    5e9c:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    5ea0:	72093205 	andvc	r3, r9, #1342177280	; 0x50000000
    5ea4:	08000001 	stmdaeq	r0, {r0}
    5ea8:	0000003e 	andeq	r0, r0, lr, lsr r0
    5eac:	b1073405 	tstlt	r7, r5, lsl #8
    5eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    5eb4:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    5eb8:	000004fd 	strdeq	r0, [r0], -sp
    5ebc:	b1033505 	tstlt	r3, r5, lsl #10
    5ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ec4:	08000601 	stmdaeq	r0, {r0, r9, sl}
    5ec8:	00000237 	andeq	r0, r0, r7, lsr r2
    5ecc:	b1033605 	tstlt	r3, r5, lsl #12
    5ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ed4:	08000501 	stmdaeq	r0, {r0, r8, sl}
    5ed8:	00000537 	andeq	r0, r0, r7, lsr r5
    5edc:	b1033705 	tstlt	r3, r5, lsl #14
    5ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ee4:	08000401 	stmdaeq	r0, {r0, sl}
    5ee8:	000007c0 	andeq	r0, r0, r0, asr #15
    5eec:	b1033805 	tstlt	r3, r5, lsl #16
    5ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ef4:	09000004 	stmdbeq	r0, {r2}
    5ef8:	00000504 	andeq	r0, r0, r4, lsl #10
    5efc:	b1073a05 	tstlt	r7, r5, lsl #20
    5f00:	01000000 	mrseq	r0, (UNDEF: 0)
    5f04:	0006ce09 	andeq	ip, r6, r9, lsl #28
    5f08:	033c0500 	teqeq	ip, #0, 10
    5f0c:	000000b1 	strheq	r0, [r0], -r1
    5f10:	0a6e0902 	beq	1b88320 <__ccfg+0x1b68378>
    5f14:	3d050000 	stccc	0, cr0, [r5, #-0]
    5f18:	0000b103 	andeq	fp, r0, r3, lsl #2
    5f1c:	03090300 	movweq	r0, #37632	; 0x9300
    5f20:	05000007 	streq	r0, [r0, #-7]
    5f24:	00c7083f 	sbceq	r0, r7, pc, lsr r8
    5f28:	00040000 	andeq	r0, r4, r0
    5f2c:	00028503 	andeq	r8, r2, r3, lsl #10
    5f30:	03410500 	movteq	r0, #5376	; 0x1500
    5f34:	000000e4 	andeq	r0, r0, r4, ror #1
    5f38:	00017206 	andeq	r7, r1, r6, lsl #4
    5f3c:	053e0a00 	ldreq	r0, [lr, #-2560]!	; 0xfffff600
    5f40:	43050000 	movwmi	r0, #20480	; 0x5000
    5f44:	00017e1a 	andeq	r7, r1, sl, lsl lr
    5f48:	0a010100 	beq	46350 <__ccfg+0x263a8>
    5f4c:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    5f50:	9f0e4505 	svcls	0x000e4505
    5f54:	01000001 	tsteq	r0, r1
    5f58:	a5040b01 	strge	r0, [r4, #-2817]	; 0xfffff4ff
    5f5c:	02000001 	andeq	r0, r0, #1
    5f60:	08e10801 	stmiaeq	r1!, {r0, fp}^
    5f64:	a5050000 	strge	r0, [r5, #-0]
    5f68:	0a000001 	beq	5f74 <__exidx_end+0x1048>
    5f6c:	0000028e 	andeq	r0, r0, lr, lsl #5
    5f70:	9f1e4505 	svcls	0x001e4505
    5f74:	01000001 	tsteq	r0, r1
    5f78:	06080701 	streq	r0, [r8], -r1, lsl #14
    5f7c:	01f0098f 	mvnseq	r0, pc, lsl #19
    5f80:	01090000 	mrseq	r0, (UNDEF: 9)
    5f84:	06000006 	streq	r0, [r0], -r6
    5f88:	00670b90 	mlseq	r7, r0, fp, r0
    5f8c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5f90:	00000ba0 	andeq	r0, r0, r0, lsr #23
    5f94:	9b089106 	blls	22a3b4 <__ccfg+0x20a40c>
    5f98:	04000000 	streq	r0, [r0], #-0
    5f9c:	0001ea09 	andeq	lr, r1, r9, lsl #20
    5fa0:	10920600 	addsne	r0, r2, r0, lsl #12
    5fa4:	000000bd 	strheq	r0, [r0], -sp
    5fa8:	41030006 	tstmi	r3, r6
    5fac:	06000009 	streq	r0, [r0], -r9
    5fb0:	01bf0393 			; <UNDEFINED> instruction: 0x01bf0393
    5fb4:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    5fb8:	07000001 	streq	r0, [r0, -r1]
    5fbc:	0d000002 	stceq	0, cr0, [r0, #-8]
    5fc0:	070f0a00 	streq	r0, [pc, -r0, lsl #20]
    5fc4:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    5fc8:	0001fc0f 	andeq	pc, r1, pc, lsl #24
    5fcc:	0b010100 	bleq	463d4 <__ccfg+0x2642c>
    5fd0:	0000c204 	andeq	ip, r0, r4, lsl #4
    5fd4:	07010700 	streq	r0, [r1, -r0, lsl #14]
    5fd8:	02450991 	subeq	r0, r5, #2375680	; 0x244000
    5fdc:	0a080000 	beq	205fe4 <__ccfg+0x1e603c>
    5fe0:	07000007 	streq	r0, [r0, -r7]
    5fe4:	00b10793 	umlalseq	r0, r1, r3, r7
    5fe8:	07010000 	streq	r0, [r1, -r0]
    5fec:	78080001 	stmdavc	r8, {r0}
    5ff0:	07000004 	streq	r0, [r0, -r4]
    5ff4:	00b10394 	umlalseq	r0, r1, r4, r3
    5ff8:	01010000 	mrseq	r0, (UNDEF: 1)
    5ffc:	03000000 	movweq	r0, #0
    6000:	000007cc 	andeq	r0, r0, ip, asr #15
    6004:	1b039607 	blne	eb828 <__ccfg+0xcb880>
    6008:	05000002 	streq	r0, [r0, #-2]
    600c:	00000245 	andeq	r0, r0, r5, asr #4
    6010:	0002510c 	andeq	r5, r2, ip, lsl #2
    6014:	00026100 	andeq	r6, r2, r0, lsl #2
    6018:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    601c:	00000256 	andeq	r0, r0, r6, asr r2
    6020:	0003470a 	andeq	r4, r3, sl, lsl #14
    6024:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    6028:	00000261 	andeq	r0, r0, r1, ror #4
    602c:	a70c0101 	strge	r0, [ip, -r1, lsl #2]
    6030:	7f000000 	svcvc	0x00000000
    6034:	0d000002 	stceq	0, cr0, [r0, #-8]
    6038:	02740500 	rsbseq	r0, r4, #0, 10
    603c:	b70a0000 	strlt	r0, [sl, -r0]
    6040:	08000004 	stmdaeq	r0, {r2}
    6044:	027f1306 	rsbseq	r1, pc, #402653184	; 0x18000000
    6048:	01010000 	mrseq	r0, (UNDEF: 1)
    604c:	0006b00a 	andeq	fp, r6, sl
    6050:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    6054:	000000c7 	andeq	r0, r0, r7, asr #1
    6058:	fa0e0101 	blx	386464 <__ccfg+0x3664bc>
    605c:	09000008 	stmdbeq	r0, {r3}
    6060:	ad10016e 	ldfges	f0, [r0, #-440]	; 0xfffffe48
    6064:	0b000002 	bleq	6074 <__exidx_end+0x1148>
    6068:	0002b304 	andeq	fp, r2, r4, lsl #6
    606c:	bf010f00 	svclt	0x00010f00
    6070:	10000002 	andne	r0, r0, r2
    6074:	0000009b 	muleq	r0, fp, r0
    6078:	01ac0c00 			; <UNDEFINED> instruction: 0x01ac0c00
    607c:	02ca0000 	sbceq	r0, sl, #0
    6080:	000d0000 	andeq	r0, sp, r0
    6084:	0002bf05 	andeq	fp, r2, r5, lsl #30
    6088:	07631100 	strbeq	r1, [r3, -r0, lsl #2]!
    608c:	7f090000 	svcvc	0x00090000
    6090:	02ca1601 	sbceq	r1, sl, #1048576	; 0x100000
    6094:	01010000 	mrseq	r0, (UNDEF: 1)
    6098:	00032a11 	andeq	r2, r3, r1, lsl sl
    609c:	01820900 	orreq	r0, r2, r0, lsl #18
    60a0:	0000d314 	andeq	sp, r0, r4, lsl r3
    60a4:	11010100 	mrsne	r0, (UNDEF: 17)
    60a8:	00000307 	andeq	r0, r0, r7, lsl #6
    60ac:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    60b0:	000000c7 	andeq	r0, r0, r7, asr #1
    60b4:	08120101 	ldmdaeq	r2, {r0, r8}
    60b8:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    60bc:	00000323 	andeq	r0, r0, r3, lsr #6
    60c0:	00374e13 	eorseq	r4, r7, r3, lsl lr
    60c4:	03070900 	movweq	r0, #30976	; 0x7900
    60c8:	00009b07 	andeq	r9, r0, r7, lsl #22
    60cc:	f8130000 			; <UNDEFINED> instruction: 0xf8130000
    60d0:	0900000a 	stmdbeq	r0, {r1, r3}
    60d4:	d8080308 	stmdale	r8, {r3, r8, r9}
    60d8:	04000000 	streq	r0, [r0], #-0
    60dc:	03bf0e00 			; <UNDEFINED> instruction: 0x03bf0e00
    60e0:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    60e4:	02fc0303 	rscseq	r0, ip, #201326592	; 0xc000000
    60e8:	33140000 	tstcc	r4, #0
    60ec:	30000000 	andcc	r0, r0, r0
    60f0:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    60f4:	00000393 	muleq	r0, r3, r3
    60f8:	0019f913 	andseq	pc, r9, r3, lsl r9	; <UNPREDICTABLE>
    60fc:	03140900 	tsteq	r4, #0, 18
    6100:	00009b08 	andeq	r9, r0, r8, lsl #22
    6104:	a4130000 	ldrge	r0, [r3], #-0
    6108:	09000008 	stmdbeq	r0, {r3}
    610c:	9b080315 	blls	206d68 <__ccfg+0x1e6dc0>
    6110:	02000000 	andeq	r0, r0, #0
    6114:	0048be13 	subeq	fp, r8, r3, lsl lr
    6118:	03160900 	tsteq	r6, #0, 18
    611c:	0002a00b 	andeq	sl, r2, fp
    6120:	21130400 	tstcs	r3, r0, lsl #8
    6124:	09000043 	stmdbeq	r0, {r0, r1, r6}
    6128:	d8090317 	stmdale	r9, {r0, r1, r2, r4, r8, r9}
    612c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6130:	00000713 	andeq	r0, r0, r3, lsl r7
    6134:	03180900 	tsteq	r8, #0, 18
    6138:	0003930f 	andeq	r9, r3, pc, lsl #6
    613c:	22130c00 	andscs	r0, r3, #0, 24
    6140:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6144:	a3150319 	tstge	r5, #1677721600	; 0x64000000
    6148:	2c000003 	stccs	0, cr0, [r0], {3}
    614c:	03230c00 			; <UNDEFINED> instruction: 0x03230c00
    6150:	03a30000 			; <UNDEFINED> instruction: 0x03a30000
    6154:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    6158:	03000000 	movweq	r0, #0
    615c:	30040b00 	andcc	r0, r4, r0, lsl #22
    6160:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6164:	00000899 	muleq	r0, r9, r8
    6168:	1b031c09 	blne	cd194 <__ccfg+0xad1ec>
    616c:	00000330 	andeq	r0, r0, r0, lsr r3
    6170:	00087911 	andeq	r7, r8, r1, lsl r9
    6174:	031e0900 	tsteq	lr, #0, 18
    6178:	0003c514 	andeq	ip, r3, r4, lsl r5
    617c:	0b010100 	bleq	46584 <__ccfg+0x265dc>
    6180:	0003a904 	andeq	sl, r3, r4, lsl #18
    6184:	054a0a00 	strbeq	r0, [sl, #-2560]	; 0xfffff600
    6188:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    618c:	00009b13 	andeq	r9, r0, r3, lsl fp
    6190:	0a010100 	beq	46598 <__ccfg+0x265f0>
    6194:	0000023e 	andeq	r0, r0, lr, lsr r2
    6198:	ac1a1e0a 	ldcge	14, cr1, [sl], {10}
    619c:	01000000 	mrseq	r0, (UNDEF: 0)
    61a0:	08e60a01 	stmiaeq	r6!, {r0, r9, fp}^
    61a4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    61a8:	0000ac24 	andeq	sl, r0, r4, lsr #24
    61ac:	0a010100 	beq	465b4 <__ccfg+0x2660c>
    61b0:	00000902 	andeq	r0, r0, r2, lsl #18
    61b4:	c514220a 	ldrgt	r2, [r4, #-522]	; 0xfffffdf6
    61b8:	01000003 	tsteq	r0, r3
    61bc:	087e1601 	ldmdaeq	lr!, {r0, r9, sl, ip}^
    61c0:	0f010000 	svceq	0x00010000
    61c4:	0000c70f 	andeq	ip, r0, pc, lsl #14
    61c8:	00030500 	andeq	r0, r3, r0, lsl #10
    61cc:	16000000 	strne	r0, [r0], -r0
    61d0:	0000095d 	andeq	r0, r0, sp, asr r9
    61d4:	c7150f01 	ldrgt	r0, [r5, -r1, lsl #30]
    61d8:	05000000 	streq	r0, [r0, #-0]
    61dc:	00000003 	andeq	r0, r0, r3
    61e0:	18ba1600 	ldmne	sl!, {r9, sl, ip}
    61e4:	10010000 	andne	r0, r1, r0
    61e8:	00021514 	andeq	r1, r2, r4, lsl r5
    61ec:	00030500 	andeq	r0, r3, r0, lsl #10
    61f0:	16000000 	strne	r0, [r0], -r0
    61f4:	0000181f 	andeq	r1, r0, pc, lsl r8
    61f8:	b10d1201 	tstlt	sp, r1, lsl #4
    61fc:	05000000 	streq	r0, [r0, #-0]
    6200:	0005b403 	andeq	fp, r5, r3, lsl #8
    6204:	18ae1620 	stmiane	lr!, {r5, r9, sl, ip}
    6208:	13010000 	movwne	r0, #4096	; 0x1000
    620c:	0000b103 	andeq	fp, r0, r3, lsl #2
    6210:	b5030500 	strlt	r0, [r3, #-1280]	; 0xfffffb00
    6214:	16200005 	strtne	r0, [r0], -r5
    6218:	00001189 	andeq	r1, r0, r9, lsl #3
    621c:	9b0d1501 	blls	34b628 <__ccfg+0x32b680>
    6220:	05000000 	streq	r0, [r0, #-0]
    6224:	00000003 	andeq	r0, r0, r3
    6228:	eb011700 	bl	4be30 <__ccfg+0x2be88>
    622c:	03000017 	movweq	r0, #23
    6230:	00000613 	andeq	r0, r0, r3, lsl r6
    6234:	00000000 	andeq	r0, r0, r0
    6238:	9c010000 	stcls	0, cr0, [r1], {-0}
    623c:	18bf0118 	ldmne	pc!, {r3, r4, r8}	; <UNPREDICTABLE>
    6240:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    6244:	00c70107 	sbceq	r0, r7, r7, lsl #2
	...
    6250:	9c010000 	stcls	0, cr0, [r1], {-0}
    6254:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    6258:	00726519 	rsbseq	r6, r2, r9, lsl r5
    625c:	bc190803 	ldclt	8, cr0, [r9], {3}
    6260:	51000004 	tstpl	r0, r4
    6264:	1a000020 	bne	62ec <__exidx_end+0x13c0>
    6268:	00757265 	rsbseq	r7, r5, r5, ror #4
    626c:	c2240803 	eorgt	r0, r4, #196608	; 0x30000
    6270:	01000004 	tsteq	r0, r4
    6274:	040b0051 	streq	r0, [fp], #-81	; 0xffffffaf
    6278:	0000008f 	andeq	r0, r0, pc, lsl #1
    627c:	00c7040b 	sbceq	r0, r7, fp, lsl #8
    6280:	011b0000 	tsteq	fp, r0
    6284:	00001842 	andeq	r1, r0, r2, asr #16
    6288:	06016001 	streq	r6, [r1], -r1
    628c:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6298:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    629c:	1c000004 	stcne	0, cr0, [r0], {4}
    62a0:	01007473 	tsteq	r0, r3, ror r4
    62a4:	9b140160 	blls	50682c <__ccfg+0x4e6884>
    62a8:	64000000 	strvs	r0, [r0], #-0
    62ac:	00000020 	andeq	r0, r0, r0, lsr #32
    62b0:	1839011d 	ldmdane	r9!, {r0, r2, r3, r4, r8}
    62b4:	5b010000 	blpl	462bc <__ccfg+0x26314>
    62b8:	00000601 	andeq	r0, r0, r1, lsl #12
    62bc:	00000000 	andeq	r0, r0, r0
    62c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    62c4:	1816011b 	ldmdane	r6, {r0, r1, r3, r4, r8}
    62c8:	21010000 	mrscs	r0, (UNDEF: 1)
    62cc:	9b010601 	blls	47ad8 <__ccfg+0x27b30>
	...
    62d8:	01000000 	mrseq	r0, (UNDEF: 0)
    62dc:	0005c09c 	muleq	r5, ip, r0
    62e0:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    62e4:	01210100 			; <UNDEFINED> instruction: 0x01210100
    62e8:	00009b15 	andeq	r9, r0, r5, lsl fp
    62ec:	00207700 	eoreq	r7, r0, r0, lsl #14
    62f0:	00611c00 	rsbeq	r1, r1, r0, lsl #24
    62f4:	1f012101 	svcne	0x00012101
    62f8:	000000c7 	andeq	r0, r0, r7, asr #1
    62fc:	0000208a 	andeq	r2, r0, sl, lsl #1
    6300:	0100731c 	tsteq	r0, ip, lsl r3
    6304:	152e0121 	strne	r0, [lr, #-289]!	; 0xfffffedf
    6308:	a8000002 	stmdage	r0, {r1}
    630c:	1c000020 	stcne	0, cr0, [r0], {32}
    6310:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6314:	36012101 	strcc	r2, [r1], -r1, lsl #2
    6318:	0000009b 	muleq	r0, fp, r0
    631c:	000020bb 	strheq	r2, [r0], -fp
    6320:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    6324:	07012301 	streq	r2, [r1, -r1, lsl #6]
    6328:	0000009b 	muleq	r0, fp, r0
    632c:	000020ce 	andeq	r2, r0, lr, asr #1
    6330:	00182d1f 	andseq	r2, r8, pc, lsl sp
    6334:	01320100 	teqeq	r2, r0, lsl #2
    6338:	00000001 	andeq	r0, r0, r1
    633c:	09f62000 	ldmibeq	r6!, {sp}^
    6340:	00000000 	andeq	r0, r0, r0
    6344:	0b200000 	bleq	80634c <__ccfg+0x7e63a4>
    6348:	43010000 	movwmi	r0, #4096	; 0x1000
    634c:	05a30301 	streq	r0, [r3, #769]!	; 0x301
    6350:	12210000 	eorne	r0, r1, #0
    6354:	2100000a 	tstcs	r0, sl
    6358:	00000a05 	andeq	r0, r0, r5, lsl #20
    635c:	09f62200 	ldmibeq	r6!, {r9, sp}^
	...
    6368:	50010000 	andpl	r0, r1, r0
    636c:	12210301 	eorne	r0, r1, #67108864	; 0x4000000
    6370:	2100000a 	tstcs	r0, sl
    6374:	00000a05 	andeq	r0, r0, r5, lsl #20
    6378:	01180000 	tsteq	r8, r0
    637c:	0000180d 	andeq	r1, r0, sp, lsl #16
    6380:	0106cb01 	tsteq	r6, r1, lsl #22
    6384:	0000009b 	muleq	r0, fp, r0
	...
    6390:	06819c01 	streq	r9, [r1], r1, lsl #24
    6394:	73190000 	tstvc	r9, #0
    6398:	cb010074 	blgt	46570 <__ccfg+0x265c8>
    639c:	00009b15 	andeq	r9, r0, r5, lsl fp
    63a0:	0020f700 	eoreq	pc, r0, r0, lsl #14
    63a4:	184a2300 	stmdane	sl, {r8, r9, sp}^
    63a8:	cb010000 	blgt	463b0 <__ccfg+0x26408>
    63ac:	0000c71f 	andeq	ip, r0, pc, lsl r7
    63b0:	00211500 	eoreq	r1, r1, r0, lsl #10
    63b4:	17f92300 	ldrbne	r2, [r9, r0, lsl #6]!
    63b8:	cb010000 	blgt	463c0 <__ccfg+0x26418>
    63bc:	0000c72b 	andeq	ip, r0, fp, lsr #14
    63c0:	00213e00 	eoreq	r3, r1, r0, lsl #28
    63c4:	17e52400 	strbne	r2, [r5, r0, lsl #8]!
    63c8:	e6010000 	str	r0, [r1], -r0
    63cc:	00000001 	andeq	r0, r0, r1
    63d0:	18cd2400 	stmiane	sp, {sl, sp}^
    63d4:	ea010000 	b	463dc <__ccfg+0x26434>
    63d8:	00000001 	andeq	r0, r0, r1
    63dc:	085e2500 	ldmdaeq	lr, {r8, sl, sp}^
    63e0:	00000000 	andeq	r0, r0, r0
    63e4:	0af00000 	beq	ffc063ec <_estack+0xdfc013ec>
    63e8:	fc010000 	stc2	0, cr0, [r1], {-0}
    63ec:	08782604 	ldmdaeq	r8!, {r2, r9, sl, sp}^
    63f0:	215c0000 	cmpcs	ip, r0
    63f4:	6c260000 	stcvs	0, cr0, [r6], #-0
    63f8:	6f000008 	svcvs	0x00000008
    63fc:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    6400:	000009f6 	strdeq	r0, [r0], -r6
    6404:	00000000 	andeq	r0, r0, r0
    6408:	00000b08 	andeq	r0, r0, r8, lsl #22
    640c:	64024301 	strvs	r4, [r2], #-769	; 0xfffffcff
    6410:	21000006 	tstcs	r0, r6
    6414:	00000a12 	andeq	r0, r0, r2, lsl sl
    6418:	000a0521 	andeq	r0, sl, r1, lsr #10
    641c:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    6420:	00000009 	andeq	r0, r0, r9
    6424:	00000000 	andeq	r0, r0, r0
    6428:	01000000 	mrseq	r0, (UNDEF: 0)
    642c:	12210248 	eorne	r0, r1, #72, 4	; 0x80000004
    6430:	2100000a 	tstcs	r0, sl
    6434:	00000a05 	andeq	r0, r0, r5, lsl #20
    6438:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    643c:	00184f01 	andseq	r4, r8, r1, lsl #30
    6440:	06b00100 	ldrteq	r0, [r0], r0, lsl #2
    6444:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6450:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    6454:	19000007 	stmdbne	r0, {r0, r1, r2}
    6458:	b0010061 	andlt	r0, r1, r1, rrx
    645c:	0000c715 	andeq	ip, r0, r5, lsl r7
    6460:	00218200 	eoreq	r8, r1, r0, lsl #4
    6464:	00731900 	rsbseq	r1, r3, r0, lsl #18
    6468:	041eb001 	ldreq	fp, [lr], #-1
    646c:	ab000007 	blge	6490 <__exidx_end+0x1564>
    6470:	19000021 	stmdbne	r0, {r0, r5}
    6474:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6478:	9b26b001 	blls	9b2484 <__ccfg+0x9924dc>
    647c:	df000000 	svcle	0x00000000
    6480:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    6484:	000009f6 	strdeq	r0, [r0], -r6
    6488:	00000000 	andeq	r0, r0, r0
    648c:	00000ad8 	ldrdeq	r0, [r0], -r8
    6490:	e802ba01 	stmda	r2, {r0, r9, fp, ip, sp, pc}
    6494:	21000006 	tstcs	r0, r6
    6498:	00000a12 	andeq	r0, r0, r2, lsl sl
    649c:	000a0521 	andeq	r0, sl, r1, lsr #10
    64a0:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    64a4:	00000009 	andeq	r0, r0, r9
    64a8:	00000000 	andeq	r0, r0, r0
    64ac:	01000000 	mrseq	r0, (UNDEF: 0)
    64b0:	122102c4 	eorne	r0, r1, #196, 4	; 0x4000000c
    64b4:	2100000a 	tstcs	r0, sl
    64b8:	00000a05 	andeq	r0, r0, r5, lsl #20
    64bc:	040b0000 	streq	r0, [fp], #-0
    64c0:	000000b1 	strheq	r0, [r0], -r1
    64c4:	18040117 	stmdane	r4, {r0, r1, r2, r4, r8}
    64c8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    64cc:	001da806 	andseq	sl, sp, r6, lsl #16
    64d0:	001dbc00 	andseq	fp, sp, r0, lsl #24
    64d4:	299c0100 	ldmibcs	ip, {r8}
    64d8:	00182501 	andseq	r2, r8, r1, lsl #10
    64dc:	06930100 	ldreq	r0, [r3], r0, lsl #2
    64e0:	0000009b 	muleq	r0, fp, r0
    64e4:	00001d94 	muleq	r0, r4, sp
    64e8:	00001da8 	andeq	r1, r0, r8, lsr #27
    64ec:	c72a9c01 	strgt	r9, [sl, -r1, lsl #24]!
    64f0:	01000018 	tsteq	r0, r8, lsl r0
    64f4:	1d300d82 	ldcne	13, cr0, [r0, #-520]!	; 0xfffffdf8
    64f8:	1d700000 	ldclne	0, cr0, [r0, #-0]
    64fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    6500:	00000796 	muleq	r0, r6, r7
    6504:	00079f28 	andeq	r9, r7, r8, lsr #30
    6508:	001d4a00 	andseq	r4, sp, r0, lsl #20
    650c:	001d5e00 	andseq	r5, sp, r0, lsl #28
    6510:	038a0100 	orreq	r0, sl, #0, 2
    6514:	0009f627 	andeq	pc, r9, r7, lsr #12
    6518:	001d4a00 	andseq	r4, sp, r0, lsl #20
    651c:	000aa800 	andeq	sl, sl, r0, lsl #16
    6520:	02720100 	rsbseq	r0, r2, #0, 2
    6524:	00000779 	andeq	r0, r0, r9, ror r7
    6528:	000a1221 	andeq	r1, sl, r1, lsr #4
    652c:	0a052100 	beq	14e934 <__ccfg+0x12e98c>
    6530:	25000000 	strcs	r0, [r0, #-0]
    6534:	000009f6 	strdeq	r0, [r0], -r6
    6538:	00001d56 	andeq	r1, r0, r6, asr sp
    653c:	00000ac0 	andeq	r0, r0, r0, asr #21
    6540:	21027401 	tstcs	r2, r1, lsl #8
    6544:	00000a12 	andeq	r0, r0, r2, lsl sl
    6548:	000a0521 	andeq	r0, sl, r1, lsr #10
    654c:	00000000 	andeq	r0, r0, r0
    6550:	0018a72b 	andseq	sl, r8, fp, lsr #14
    6554:	0d780100 	ldfeqe	f0, [r8, #-0]
    6558:	18b42b01 	ldmne	r4!, {r0, r8, r9, fp, sp}
    655c:	6d010000 	stcvs	0, cr0, [r1, #-0]
    6560:	d32b010d 			; <UNDEFINED> instruction: 0xd32b010d
    6564:	01000018 	tsteq	r0, r8, lsl r0
    6568:	2c010d66 	stccs	13, cr0, [r1], {102}	; 0x66
    656c:	000018d9 	ldrdeq	r1, [r0], -r9
    6570:	010d5801 	tsteq	sp, r1, lsl #16
    6574:	00001cdc 	ldrdeq	r1, [r0], -ip
    6578:	00001d30 	andeq	r1, r0, r0, lsr sp
    657c:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    6580:	73190000 	tstvc	r9, #0
    6584:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    6588:	00009b19 	andeq	r9, r0, r9, lsl fp
    658c:	0021fd00 	eoreq	pc, r1, r0, lsl #26
    6590:	65641900 	strbvs	r1, [r4, #-2304]!	; 0xfffff700
    6594:	5801006c 	stmdapl	r1, {r2, r3, r5, r6}
    6598:	00009b22 	andeq	r9, r0, r2, lsr #22
    659c:	00221000 	eoreq	r1, r2, r0
    65a0:	08422500 	stmdaeq	r2, {r8, sl, sp}^
    65a4:	1ce40000 	stclne	0, cr0, [r4]
    65a8:	0a600000 	beq	18065b0 <__ccfg+0x17e6608>
    65ac:	5c010000 	stcpl	0, cr0, [r1], {-0}
    65b0:	0a602d13 	beq	1811a04 <__ccfg+0x17f1a5c>
    65b4:	532e0000 			; <UNDEFINED> instruction: 0x532e0000
    65b8:	23000008 	movwcs	r0, #8
    65bc:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    65c0:	000009f6 	strdeq	r0, [r0], -r6
    65c4:	00001ce4 	andeq	r1, r0, r4, ror #25
    65c8:	00000a80 	andeq	r0, r0, r0, lsl #21
    65cc:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
    65d0:	21000008 	tstcs	r0, r8
    65d4:	00000a12 	andeq	r0, r0, r2, lsl sl
    65d8:	000a0521 	andeq	r0, sl, r1, lsr #10
    65dc:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    65e0:	fe000009 	cdp2	0, 0, cr0, cr0, cr9, {0}
    65e4:	0200001c 	andeq	r0, r0, #28
    65e8:	0100001d 	tsteq	r0, sp, lsl r0
    65ec:	12210254 	eorne	r0, r1, #84, 4	; 0x40000005
    65f0:	2100000a 	tstcs	r0, sl
    65f4:	00000a05 	andeq	r0, r0, r5, lsl #20
    65f8:	00000000 	andeq	r0, r0, r0
    65fc:	0018572f 	andseq	r5, r8, pc, lsr #14
    6600:	0d4b0100 	stfeqe	f0, [fp, #-0]
    6604:	000000b1 	strheq	r0, [r0], -r1
    6608:	00085e01 	andeq	r5, r8, r1, lsl #28
    660c:	00723000 	rsbseq	r3, r2, r0
    6610:	b1074f01 	tstlt	r7, r1, lsl #30
    6614:	00000000 	andeq	r0, r0, r0
    6618:	00183331 	andseq	r3, r8, r1, lsr r3
    661c:	0d410100 	stfeqe	f0, [r1, #-0]
    6620:	08830101 	stmeq	r3, {r0, r8}
    6624:	63320000 	teqvs	r2, #0
    6628:	0100646d 	tsteq	r0, sp, ror #8
    662c:	00b11941 	adcseq	r1, r1, r1, asr #18
    6630:	61320000 	teqvs	r2, r0
    6634:	24410100 	strbcs	r0, [r1], #-256	; 0xffffff00
    6638:	000000c7 	andeq	r0, r0, r7, asr #1
    663c:	17fe2c00 	ldrbne	r2, [lr, r0, lsl #24]!
    6640:	3a010000 	bcc	46648 <__ccfg+0x266a0>
    6644:	1cc4010d 	stfnee	f0, [r4], {13}
    6648:	1cdc0000 	ldclne	0, cr0, [ip], {0}
    664c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6650:	000008e5 	andeq	r0, r0, r5, ror #17
    6654:	646d6319 	strbtvs	r6, [sp], #-793	; 0xfffffce7
    6658:	193a0100 	ldmdbne	sl!, {r8}
    665c:	000000b1 	strheq	r0, [r0], -r1
    6660:	00002236 	andeq	r2, r0, r6, lsr r2
    6664:	0009f627 	andeq	pc, r9, r7, lsr #12
    6668:	001cc400 	andseq	ip, ip, r0, lsl #8
    666c:	000a4800 	andeq	r4, sl, r0, lsl #16
    6670:	023c0100 	eorseq	r0, ip, #0, 2
    6674:	000008c9 	andeq	r0, r0, r9, asr #17
    6678:	000a1221 	andeq	r1, sl, r1, lsr #4
    667c:	0a052100 	beq	14ea84 <__ccfg+0x12eadc>
    6680:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6684:	000009f6 	strdeq	r0, [r0], -r6
    6688:	00001cd0 	ldrdeq	r1, [r0], -r0
    668c:	00001cd4 	ldrdeq	r1, [r0], -r4
    6690:	21023e01 	tstcs	r2, r1, lsl #28
    6694:	00000a12 	andeq	r0, r0, r2, lsl sl
    6698:	000a0521 	andeq	r0, sl, r1, lsr #10
    669c:	2c000000 	stccs	0, cr0, [r0], {-0}
    66a0:	000018e8 	andeq	r1, r0, r8, ror #17
    66a4:	010d2901 	tsteq	sp, r1, lsl #18
    66a8:	00001c94 	muleq	r0, r4, ip
    66ac:	00001cc4 	andeq	r1, r0, r4, asr #25
    66b0:	09799c01 	ldmdbeq	r9!, {r0, sl, fp, ip, pc}^
    66b4:	62190000 	andsvs	r0, r9, #0
    66b8:	1c290100 	stfnes	f0, [r9], #-0
    66bc:	000000b1 	strheq	r0, [r0], -r1
    66c0:	00002249 	andeq	r2, r0, r9, asr #4
    66c4:	01006930 	tsteq	r0, r0, lsr r9
    66c8:	0081062b 	addeq	r0, r1, fp, lsr #12
    66cc:	3d270000 	stccc	0, cr0, [r7, #-0]
    66d0:	9c00000a 	stcls	0, cr0, [r0], {10}
    66d4:	1000001c 	andne	r0, r0, ip, lsl r0
    66d8:	0100000a 	tsteq	r0, sl
    66dc:	092e0332 	stmdbeq	lr!, {r1, r4, r5, r8, r9}
    66e0:	4c210000 	stcmi	0, cr0, [r1], #-0
    66e4:	0000000a 	andeq	r0, r0, sl
    66e8:	000a3d33 	andeq	r3, sl, r3, lsr sp
    66ec:	001ca800 	andseq	sl, ip, r0, lsl #16
    66f0:	001cac00 	andseq	sl, ip, r0, lsl #24
    66f4:	042f0100 	strteq	r0, [pc], #-256	; 66fc <__exidx_end+0x17d0>
    66f8:	00000948 	andeq	r0, r0, r8, asr #18
    66fc:	000a4c21 	andeq	r4, sl, r1, lsr #24
    6700:	20330000 	eorscs	r0, r3, r0
    6704:	ac00000a 	stcge	0, cr0, [r0], {10}
    6708:	ae00001c 	mcrge	0, 0, r0, cr0, cr12, {0}
    670c:	0100001c 	tsteq	r0, ip, lsl r0
    6710:	09620431 	stmdbeq	r2!, {r0, r4, r5, sl}^
    6714:	2f210000 	svccs	0x00210000
    6718:	0000000a 	andeq	r0, r0, sl
    671c:	000a2025 	andeq	r2, sl, r5, lsr #32
    6720:	001cb400 	andseq	fp, ip, r0, lsl #8
    6724:	000a3000 	andeq	r3, sl, r0
    6728:	03330100 	teqeq	r3, #0, 2
    672c:	000a2f21 	andeq	r2, sl, r1, lsr #30
    6730:	34000000 	strcc	r0, [r0], #-0
    6734:	000018df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    6738:	b10d1901 	tstlt	sp, r1, lsl #18
    673c:	60000000 	andvs	r0, r0, r0
    6740:	9400001c 	strls	r0, [r0], #-28	; 0xffffffe4
    6744:	0100001c 	tsteq	r0, ip, lsl r0
    6748:	0009f69c 	muleq	r9, ip, r6
    674c:	00693000 	rsbeq	r3, r9, r0
    6750:	81061b01 	tsthi	r6, r1, lsl #22
    6754:	35000000 	strcc	r0, [r0, #-0]
    6758:	1c010062 	stcne	0, cr0, [r1], {98}	; 0x62
    675c:	0000b107 	andeq	fp, r0, r7, lsl #2
    6760:	00226700 	eoreq	r6, r2, r0, lsl #14
    6764:	0a3d2700 	beq	f5036c <__ccfg+0xf303c4>
    6768:	1c640000 	stclne	0, cr0, [r4], #-0
    676c:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
    6770:	22010000 	andcs	r0, r1, #0
    6774:	0009c503 	andeq	ip, r9, r3, lsl #10
    6778:	0a4c2100 	beq	130eb80 <__ccfg+0x12eebd8>
    677c:	27000000 	strcs	r0, [r0, -r0]
    6780:	00000a20 	andeq	r0, r0, r0, lsr #20
    6784:	00001c6a 	andeq	r1, r0, sl, ror #24
    6788:	000009d8 	ldrdeq	r0, [r0], -r8
    678c:	df032301 	svcle	0x00032301
    6790:	21000009 	tstcs	r0, r9
    6794:	00000a2f 	andeq	r0, r0, pc, lsr #20
    6798:	0a5a2500 	beq	168fba0 <__ccfg+0x166fbf8>
    679c:	1c6c0000 	stclne	0, cr0, [ip], #-0
    67a0:	09f00000 	ldmibeq	r0!, {}^	; <UNPREDICTABLE>
    67a4:	20010000 	andcs	r0, r1, r0
    67a8:	0a6c2107 	beq	1b0ebcc <__ccfg+0x1aeec24>
    67ac:	00000000 	andeq	r0, r0, r0
    67b0:	000a7b36 	andeq	r7, sl, r6, lsr fp
    67b4:	02060200 	andeq	r0, r6, #0, 4
    67b8:	20030101 	andcs	r0, r3, r1, lsl #2
    67bc:	3700000a 	strcc	r0, [r0, -sl]
    67c0:	00000c4c 	andeq	r0, r0, ip, asr #24
    67c4:	23020602 	movwcs	r0, #9730	; 0x2602
    67c8:	00000067 	andeq	r0, r0, r7, rrx
    67cc:	000f5237 	andeq	r5, pc, r7, lsr r2	; <UNPREDICTABLE>
    67d0:	02060200 	andeq	r0, r6, #0, 4
    67d4:	00006737 	andeq	r6, r0, r7, lsr r7
    67d8:	b7360000 	ldrlt	r0, [r6, -r0]!
    67dc:	0200000d 	andeq	r0, r0, #13
    67e0:	01010154 	tsteq	r1, r4, asr r1
    67e4:	000a3d03 	andeq	r3, sl, r3, lsl #26
    67e8:	0c4c3700 	mcrreq	7, 0, r3, ip, cr0
    67ec:	54020000 	strpl	r0, [r2], #-0
    67f0:	00671901 	rsbeq	r1, r7, r1, lsl #18
    67f4:	36000000 	strcc	r0, [r0], -r0
    67f8:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
    67fc:	01011e02 	tsteq	r1, r2, lsl #28
    6800:	0a5a0301 	beq	168740c <__ccfg+0x1667464>
    6804:	4c370000 	ldcmi	0, cr0, [r7], #-0
    6808:	0200000c 	andeq	r0, r0, #12
    680c:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
    6810:	00000000 	andeq	r0, r0, r0
    6814:	0016f938 	andseq	pc, r6, r8, lsr r9	; <UNPREDICTABLE>
    6818:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    681c:	00006701 	andeq	r6, r0, r1, lsl #14
    6820:	0a790300 	beq	1e47428 <__ccfg+0x1e27480>
    6824:	4c390000 	ldcmi	0, cr0, [r9], #-0
    6828:	0200000c 	andeq	r0, r0, #12
    682c:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    6830:	3a000000 	bcc	6838 <__exidx_end+0x190c>
    6834:	00000796 	muleq	r0, r6, r7
    6838:	00001d70 	andeq	r1, r0, r0, ror sp
    683c:	00001d94 	muleq	r0, r4, sp
    6840:	96289c01 	strtls	r9, [r8], -r1, lsl #24
    6844:	7a000007 	bvc	6868 <__exidx_end+0x193c>
    6848:	8e00001d 	mcrhi	0, 0, r0, cr0, cr13, {0}
    684c:	0100001d 	tsteq	r0, sp, lsl r0
    6850:	a83b0d78 	ldmdage	fp!, {r3, r4, r5, r6, r8, sl, fp}
    6854:	84000007 	strhi	r0, [r0], #-7
    6858:	8a00001d 	bhi	68d4 <__exidx_end+0x19a8>
    685c:	0100001d 	tsteq	r0, sp, lsl r0
    6860:	0000037c 	andeq	r0, r0, ip, ror r3
    6864:	00041200 	andeq	r1, r4, r0, lsl #4
    6868:	d5000300 	strle	r0, [r0, #-768]	; 0xfffffd00
    686c:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    6870:	0000bd01 	andeq	fp, r0, r1, lsl #26
    6874:	18fb0c00 	ldmne	fp!, {sl, fp}^
    6878:	06640000 	strbteq	r0, [r4], -r0
    687c:	0bb80000 	bleq	fee06884 <_estack+0xdee01884>
    6880:	00000000 	andeq	r0, r0, r0
    6884:	47e50000 	strbmi	r0, [r5, r0]!
    6888:	01020000 	mrseq	r0, (UNDEF: 2)
    688c:	0008da06 	andeq	sp, r8, r6, lsl #20
    6890:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    6894:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    6898:	e9050402 	stmdb	r5, {r1, sl}
    689c:	02000005 	andeq	r0, r0, #5
    68a0:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    68a4:	31030000 	mrscc	r0, (UNDEF: 3)
    68a8:	02000008 	andeq	r0, r0, #8
    68ac:	004d182e 	subeq	r1, sp, lr, lsr #16
    68b0:	01020000 	mrseq	r0, (UNDEF: 2)
    68b4:	0008d808 	andeq	sp, r8, r8, lsl #16
    68b8:	03ce0300 	biceq	r0, lr, #0, 6
    68bc:	31020000 	mrscc	r0, (UNDEF: 2)
    68c0:	00006019 	andeq	r6, r0, r9, lsl r0
    68c4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    68c8:	000009a6 	andeq	r0, r0, r6, lsr #19
    68cc:	0008f103 	andeq	pc, r8, r3, lsl #2
    68d0:	19340200 	ldmdbne	r4!, {r9}
    68d4:	00000073 	andeq	r0, r0, r3, ror r0
    68d8:	93070402 	movwls	r0, #29698	; 0x7402
    68dc:	02000003 	andeq	r0, r0, #3
    68e0:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    68e4:	04040000 	streq	r0, [r4], #-0
    68e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    68ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    68f0:	00000398 	muleq	r0, r8, r3
    68f4:	0023ca03 	eoreq	ip, r3, r3, lsl #20
    68f8:	12270300 	eorne	r0, r7, #0, 6
    68fc:	00000054 	andeq	r0, r0, r4, asr r0
    6900:	00008f05 	andeq	r8, r0, r5, lsl #30
    6904:	18e30300 	stmiane	r3!, {r8, r9}^
    6908:	2b030000 	blcs	c6910 <__ccfg+0xa6968>
    690c:	00004112 	andeq	r4, r0, r2, lsl r1
    6910:	00a00600 	adceq	r0, r0, r0, lsl #12
    6914:	1b030000 	blne	c691c <__ccfg+0xa6974>
    6918:	03000024 	movweq	r0, #36	; 0x24
    691c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6920:	b1050000 	mrslt	r0, (UNDEF: 5)
    6924:	03000000 	movweq	r0, #0
    6928:	000004f7 	strdeq	r0, [r0], -r7
    692c:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    6930:	07000000 	streq	r0, [r0, -r0]
    6934:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    6938:	0000015c 	andeq	r0, r0, ip, asr r1
    693c:	00003e08 	andeq	r3, r0, r8, lsl #28
    6940:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    6944:	000000a0 	andeq	r0, r0, r0, lsr #1
    6948:	00070101 	andeq	r0, r7, r1, lsl #2
    694c:	0004fd08 	andeq	pc, r4, r8, lsl #26
    6950:	03350300 	teqeq	r5, #0, 6
    6954:	000000a0 	andeq	r0, r0, r0, lsr #1
    6958:	00060101 	andeq	r0, r6, r1, lsl #2
    695c:	00023708 	andeq	r3, r2, r8, lsl #14
    6960:	03360300 	teqeq	r6, #0, 6
    6964:	000000a0 	andeq	r0, r0, r0, lsr #1
    6968:	00050101 	andeq	r0, r5, r1, lsl #2
    696c:	00053708 	andeq	r3, r5, r8, lsl #14
    6970:	03370300 	teqeq	r7, #0, 6
    6974:	000000a0 	andeq	r0, r0, r0, lsr #1
    6978:	00040101 	andeq	r0, r4, r1, lsl #2
    697c:	0007c008 	andeq	ip, r7, r8
    6980:	03380300 	teqeq	r8, #0, 6
    6984:	000000a0 	andeq	r0, r0, r0, lsr #1
    6988:	00000401 	andeq	r0, r0, r1, lsl #8
    698c:	00050409 	andeq	r0, r5, r9, lsl #8
    6990:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    6994:	000000a0 	andeq	r0, r0, r0, lsr #1
    6998:	06ce0901 	strbeq	r0, [lr], r1, lsl #18
    699c:	3c030000 	stccc	0, cr0, [r3], {-0}
    69a0:	0000a003 	andeq	sl, r0, r3
    69a4:	6e090200 	cdpvs	2, 0, cr0, cr9, cr0, {0}
    69a8:	0300000a 	movweq	r0, #10
    69ac:	00a0033d 	adceq	r0, r0, sp, lsr r3
    69b0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    69b4:	00000703 	andeq	r0, r0, r3, lsl #14
    69b8:	b1083f03 	tstlt	r8, r3, lsl #30
    69bc:	04000000 	streq	r0, [r0], #-0
    69c0:	02850300 	addeq	r0, r5, #0, 6
    69c4:	41030000 	mrsmi	r0, (UNDEF: 3)
    69c8:	0000ce03 	andeq	ip, r0, r3, lsl #28
    69cc:	015c0600 	cmpeq	ip, r0, lsl #12
    69d0:	3e0a0000 	cdpcc	0, 0, cr0, cr10, cr0, {0}
    69d4:	03000005 	movweq	r0, #5
    69d8:	01681a43 	cmneq	r8, r3, asr #20
    69dc:	01010000 	mrseq	r0, (UNDEF: 1)
    69e0:	0001b10a 	andeq	fp, r1, sl, lsl #2
    69e4:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    69e8:	00000189 	andeq	r0, r0, r9, lsl #3
    69ec:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    69f0:	0000018f 	andeq	r0, r0, pc, lsl #3
    69f4:	e1080102 	tst	r8, r2, lsl #2
    69f8:	05000008 	streq	r0, [r0, #-8]
    69fc:	0000018f 	andeq	r0, r0, pc, lsl #3
    6a00:	00028e0a 	andeq	r8, r2, sl, lsl #28
    6a04:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    6a08:	00000189 	andeq	r0, r0, r9, lsl #3
    6a0c:	08070101 	stmdaeq	r7, {r0, r8}
    6a10:	da098f04 	ble	26a628 <__ccfg+0x24a680>
    6a14:	09000001 	stmdbeq	r0, {r0}
    6a18:	00000601 	andeq	r0, r0, r1, lsl #12
    6a1c:	670b9004 	strvs	r9, [fp, -r4]
    6a20:	00000000 	andeq	r0, r0, r0
    6a24:	000ba009 	andeq	sl, fp, r9
    6a28:	08910400 	ldmeq	r1, {sl}
    6a2c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6a30:	01ea0904 	mvneq	r0, r4, lsl #18
    6a34:	92040000 	andls	r0, r4, #0
    6a38:	0000ac10 	andeq	sl, r0, r0, lsl ip
    6a3c:	03000600 	movweq	r0, #1536	; 0x600
    6a40:	00000941 	andeq	r0, r0, r1, asr #18
    6a44:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    6a48:	0c000001 	stceq	0, cr0, [r0], {1}
    6a4c:	000001da 	ldrdeq	r0, [r0], -sl
    6a50:	000001f1 	strdeq	r0, [r0], -r1
    6a54:	0f0a000d 	svceq	0x000a000d
    6a58:	04000007 	streq	r0, [r0], #-7
    6a5c:	01e60f99 	strexheq	r0, r9, [r6]
    6a60:	01010000 	mrseq	r0, (UNDEF: 1)
    6a64:	91050107 	tstls	r5, r7, lsl #2
    6a68:	00022909 	andeq	r2, r2, r9, lsl #18
    6a6c:	070a0800 	streq	r0, [sl, -r0, lsl #16]
    6a70:	93050000 	movwls	r0, #20480	; 0x5000
    6a74:	0000a007 	andeq	sl, r0, r7
    6a78:	01070100 	mrseq	r0, (UNDEF: 23)
    6a7c:	04780800 	ldrbteq	r0, [r8], #-2048	; 0xfffff800
    6a80:	94050000 	strls	r0, [r5], #-0
    6a84:	0000a003 	andeq	sl, r0, r3
    6a88:	00010100 	andeq	r0, r1, r0, lsl #2
    6a8c:	cc030000 	stcgt	0, cr0, [r3], {-0}
    6a90:	05000007 	streq	r0, [r0, #-7]
    6a94:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    6a98:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    6a9c:	0c000002 	stceq	0, cr0, [r0], {2}
    6aa0:	00000235 	andeq	r0, r0, r5, lsr r2
    6aa4:	00000245 	andeq	r0, r0, r5, asr #4
    6aa8:	3a05000d 	bcc	146ae4 <__ccfg+0x126b3c>
    6aac:	0a000002 	beq	6abc <__exidx_end+0x1b90>
    6ab0:	00000347 	andeq	r0, r0, r7, asr #6
    6ab4:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    6ab8:	01000002 	tsteq	r0, r2
    6abc:	009b0c01 	addseq	r0, fp, r1, lsl #24
    6ac0:	02630000 	rsbeq	r0, r3, #0
    6ac4:	000d0000 	andeq	r0, sp, r0
    6ac8:	00025805 	andeq	r5, r2, r5, lsl #16
    6acc:	04b70a00 	ldrteq	r0, [r7], #2560	; 0xa00
    6ad0:	06060000 	streq	r0, [r6], -r0
    6ad4:	00026313 	andeq	r6, r2, r3, lsl r3
    6ad8:	0a010100 	beq	46ee0 <__ccfg+0x26f38>
    6adc:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    6ae0:	b10ec304 	tstlt	lr, r4, lsl #6
    6ae4:	01000000 	mrseq	r0, (UNDEF: 0)
    6ae8:	08fa0e01 	ldmeq	sl!, {r0, r9, sl, fp}^
    6aec:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    6af0:	02911001 	addseq	r1, r1, #1
    6af4:	040b0000 	streq	r0, [fp], #-0
    6af8:	00000297 	muleq	r0, r7, r2
    6afc:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    6b00:	8f100000 	svchi	0x00100000
    6b04:	00000000 	andeq	r0, r0, r0
    6b08:	0001960c 	andeq	r9, r1, ip, lsl #12
    6b0c:	0002ae00 	andeq	sl, r2, r0, lsl #28
    6b10:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6b14:	000002a3 	andeq	r0, r0, r3, lsr #5
    6b18:	00076311 	andeq	r6, r7, r1, lsl r3
    6b1c:	017f0700 	cmneq	pc, r0, lsl #14
    6b20:	0002ae16 	andeq	sl, r2, r6, lsl lr
    6b24:	11010100 	mrsne	r0, (UNDEF: 17)
    6b28:	0000032a 	andeq	r0, r0, sl, lsr #6
    6b2c:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    6b30:	000000bd 	strheq	r0, [r0], -sp
    6b34:	07110101 	ldreq	r0, [r1, -r1, lsl #2]
    6b38:	07000003 	streq	r0, [r0, -r3]
    6b3c:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    6b40:	01000000 	mrseq	r0, (UNDEF: 0)
    6b44:	07081201 	streq	r1, [r8, -r1, lsl #4]
    6b48:	07090303 	streq	r0, [r9, -r3, lsl #6]
    6b4c:	13000003 	movwne	r0, #3
    6b50:	0000374e 	andeq	r3, r0, lr, asr #14
    6b54:	07030707 	streq	r0, [r3, -r7, lsl #14]
    6b58:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b5c:	0af81300 	beq	ffe0b764 <_estack+0xdfe06764>
    6b60:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6b64:	00c20803 	sbceq	r0, r2, r3, lsl #16
    6b68:	00040000 	andeq	r0, r4, r0
    6b6c:	0003bf0e 	andeq	fp, r3, lr, lsl #30
    6b70:	03090700 	movweq	r0, #38656	; 0x9700
    6b74:	0002e003 	andeq	lr, r2, r3
    6b78:	00331400 	eorseq	r1, r3, r0, lsl #8
    6b7c:	07300000 	ldreq	r0, [r0, -r0]!
    6b80:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    6b84:	13000003 	movwne	r0, #3
    6b88:	000019f9 	strdeq	r1, [r0], -r9
    6b8c:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    6b90:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b94:	08a41300 	stmiaeq	r4!, {r8, r9, ip}
    6b98:	15070000 	strne	r0, [r7, #-0]
    6b9c:	008f0803 	addeq	r0, pc, r3, lsl #16
    6ba0:	13020000 	movwne	r0, #8192	; 0x2000
    6ba4:	000048be 			; <UNDEFINED> instruction: 0x000048be
    6ba8:	0b031607 	bleq	cc3cc <__ccfg+0xac424>
    6bac:	00000284 	andeq	r0, r0, r4, lsl #5
    6bb0:	43211304 			; <UNDEFINED> instruction: 0x43211304
    6bb4:	17070000 	strne	r0, [r7, -r0]
    6bb8:	00c20903 	sbceq	r0, r2, r3, lsl #18
    6bbc:	13080000 	movwne	r0, #32768	; 0x8000
    6bc0:	00000007 	andeq	r0, r0, r7
    6bc4:	0f031807 	svceq	0x00031807
    6bc8:	00000377 	andeq	r0, r0, r7, ror r3
    6bcc:	0722130c 	streq	r1, [r2, -ip, lsl #6]!
    6bd0:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    6bd4:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    6bd8:	002c0000 	eoreq	r0, ip, r0
    6bdc:	0003070c 	andeq	r0, r3, ip, lsl #14
    6be0:	00038700 	andeq	r8, r3, r0, lsl #14
    6be4:	00881500 	addeq	r1, r8, r0, lsl #10
    6be8:	00030000 	andeq	r0, r3, r0
    6bec:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    6bf0:	990e0000 	stmdbls	lr, {}	; <UNPREDICTABLE>
    6bf4:	07000008 	streq	r0, [r0, -r8]
    6bf8:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    6bfc:	11000003 	tstne	r0, r3
    6c00:	00000879 	andeq	r0, r0, r9, ror r8
    6c04:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    6c08:	000003a9 	andeq	r0, r0, r9, lsr #7
    6c0c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6c10:	0000038d 	andeq	r0, r0, sp, lsl #7
    6c14:	0018f10a 	andseq	pc, r8, sl, lsl #2
    6c18:	0e090100 	adfeqe	f0, f1, f0
    6c1c:	00000189 	andeq	r0, r0, r9, lsl #3
    6c20:	01160101 	tsteq	r6, r1, lsl #2
    6c24:	0000193a 	andeq	r1, r0, sl, lsr r9
    6c28:	01050d01 	tsteq	r5, r1, lsl #26
    6c2c:	00000081 	andeq	r0, r0, r1, lsl #1
    6c30:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    6c34:	00001e34 	andeq	r1, r0, r4, lsr lr
    6c38:	73179c01 	tstvc	r7, #256	; 0x100
    6c3c:	0d010074 	stceq	0, cr0, [r1, #-464]	; 0xfffffe30
    6c40:	00008f12 	andeq	r8, r0, r2, lsl pc
    6c44:	00228500 	eoreq	r8, r2, r0, lsl #10
    6c48:	75621700 	strbvc	r1, [r2, #-1792]!	; 0xfffff900
    6c4c:	0d010066 	stceq	0, cr0, [r1, #-408]	; 0xfffffe68
    6c50:	0001891c 	andeq	r8, r1, ip, lsl r9
    6c54:	0022a300 	eoreq	sl, r2, r0, lsl #6
    6c58:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0xfffff900
    6c5c:	0d01006e 	stceq	0, cr0, [r1, #-440]	; 0xfffffe48
    6c60:	00008125 	andeq	r8, r0, r5, lsr #2
    6c64:	0022f800 	eoreq	pc, r2, r0, lsl #16
    6c68:	20d41800 	sbcscs	r1, r4, r0, lsl #16
    6c6c:	11010000 	mrsne	r0, (UNDEF: 1)
    6c70:	00008106 	andeq	r8, r0, r6, lsl #2
    6c74:	00234d00 	eoreq	r4, r3, r0, lsl #26
    6c78:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6c7c:	03000004 	movweq	r0, #4
    6c80:	001c2400 	andseq	r2, ip, r0, lsl #8
    6c84:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    6c88:	0c000000 	stceq	0, cr0, [r0], {-0}
    6c8c:	0000194a 	andeq	r1, r0, sl, asr #18
    6c90:	00000664 	andeq	r0, r0, r4, ror #12
    6c94:	00000bc8 	andeq	r0, r0, r8, asr #23
    6c98:	00000000 	andeq	r0, r0, r0
    6c9c:	000049aa 	andeq	r4, r0, sl, lsr #19
    6ca0:	da060102 	ble	1870b0 <__ccfg+0x167108>
    6ca4:	02000008 	andeq	r0, r0, #8
    6ca8:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    6cac:	04020000 	streq	r0, [r2], #-0
    6cb0:	0005e905 	andeq	lr, r5, r5, lsl #18
    6cb4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6cb8:	000005e4 	andeq	r0, r0, r4, ror #11
    6cbc:	00083103 	andeq	r3, r8, r3, lsl #2
    6cc0:	182e0200 	stmdane	lr!, {r9}
    6cc4:	0000004d 	andeq	r0, r0, sp, asr #32
    6cc8:	d8080102 	stmdale	r8, {r1, r8}
    6ccc:	03000008 	movweq	r0, #8
    6cd0:	000003ce 	andeq	r0, r0, lr, asr #7
    6cd4:	60193102 	andsvs	r3, r9, r2, lsl #2
    6cd8:	02000000 	andeq	r0, r0, #0
    6cdc:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    6ce0:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    6ce4:	02000008 	andeq	r0, r0, #8
    6ce8:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6cec:	04020000 	streq	r0, [r2], #-0
    6cf0:	00039307 	andeq	r9, r3, r7, lsl #6
    6cf4:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6cf8:	0000038e 	andeq	r0, r0, lr, lsl #7
    6cfc:	69050404 	stmdbvs	r5, {r2, sl}
    6d00:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6d04:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
    6d08:	1a030000 	bne	c6d10 <__ccfg+0xa6d68>
    6d0c:	03000004 	movweq	r0, #4
    6d10:	009b1b28 	addseq	r1, fp, r8, lsr #22
    6d14:	61050000 	mrsvs	r0, (UNDEF: 5)
    6d18:	04000008 	streq	r0, [r0], #-8
    6d1c:	00b30009 	adcseq	r0, r3, r9
    6d20:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    6d24:	b3000009 	movwlt	r0, #9
    6d28:	00000000 	andeq	r0, r0, r0
    6d2c:	04070001 	streq	r0, [r7], #-1
    6d30:	00086303 	andeq	r6, r8, r3, lsl #6
    6d34:	18630300 	stmdane	r3!, {r8, r9}^
    6d38:	0000008f 	andeq	r0, r0, pc, lsl #1
    6d3c:	0023ca03 	eoreq	ip, r3, r3, lsl #20
    6d40:	12270400 	eorne	r0, r7, #0, 8
    6d44:	00000054 	andeq	r0, r0, r4, asr r0
    6d48:	0000c108 	andeq	ip, r0, r8, lsl #2
    6d4c:	18e30300 	stmiane	r3!, {r8, r9}^
    6d50:	2b040000 	blcs	106d58 <__ccfg+0xe6db0>
    6d54:	00004112 	andeq	r4, r0, r2, lsl r1
    6d58:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    6d5c:	1b030000 	blne	c6d64 <__ccfg+0xa6dbc>
    6d60:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    6d64:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6d68:	e3080000 	movw	r0, #32768	; 0x8000
    6d6c:	03000000 	movweq	r0, #0
    6d70:	000004f7 	strdeq	r0, [r0], -r7
    6d74:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    6d78:	0a000000 	beq	6d80 <__exidx_end+0x1e54>
    6d7c:	09320408 	ldmdbeq	r2!, {r3, sl}
    6d80:	0000018e 	andeq	r0, r0, lr, lsl #3
    6d84:	00003e0b 	andeq	r3, r0, fp, lsl #28
    6d88:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    6d8c:	000000d2 	ldrdeq	r0, [r0], -r2
    6d90:	00070101 	andeq	r0, r7, r1, lsl #2
    6d94:	0004fd0b 	andeq	pc, r4, fp, lsl #26
    6d98:	03350400 	teqeq	r5, #0, 8
    6d9c:	000000d2 	ldrdeq	r0, [r0], -r2
    6da0:	00060101 	andeq	r0, r6, r1, lsl #2
    6da4:	0002370b 	andeq	r3, r2, fp, lsl #14
    6da8:	03360400 	teqeq	r6, #0, 8
    6dac:	000000d2 	ldrdeq	r0, [r0], -r2
    6db0:	00050101 	andeq	r0, r5, r1, lsl #2
    6db4:	0005370b 	andeq	r3, r5, fp, lsl #14
    6db8:	03370400 	teqeq	r7, #0, 8
    6dbc:	000000d2 	ldrdeq	r0, [r0], -r2
    6dc0:	00040101 	andeq	r0, r4, r1, lsl #2
    6dc4:	0007c00b 	andeq	ip, r7, fp
    6dc8:	03380400 	teqeq	r8, #0, 8
    6dcc:	000000d2 	ldrdeq	r0, [r0], -r2
    6dd0:	00000401 	andeq	r0, r0, r1, lsl #8
    6dd4:	0005040c 	andeq	r0, r5, ip, lsl #8
    6dd8:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    6ddc:	000000d2 	ldrdeq	r0, [r0], -r2
    6de0:	06ce0c01 	strbeq	r0, [lr], r1, lsl #24
    6de4:	3c040000 	stccc	0, cr0, [r4], {-0}
    6de8:	0000d203 	andeq	sp, r0, r3, lsl #4
    6dec:	6e0c0200 	cdpvs	2, 0, cr0, cr12, cr0, {0}
    6df0:	0400000a 	streq	r0, [r0], #-10
    6df4:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    6df8:	0c030000 	stceq	0, cr0, [r3], {-0}
    6dfc:	00000703 	andeq	r0, r0, r3, lsl #14
    6e00:	e3083f04 	movw	r3, #36612	; 0x8f04
    6e04:	04000000 	streq	r0, [r0], #-0
    6e08:	02850300 	addeq	r0, r5, #0, 6
    6e0c:	41040000 	mrsmi	r0, (UNDEF: 4)
    6e10:	00010003 	andeq	r0, r1, r3
    6e14:	018e0900 	orreq	r0, lr, r0, lsl #18
    6e18:	3e0d0000 	cdpcc	0, 0, cr0, cr13, cr0, {0}
    6e1c:	04000005 	streq	r0, [r0], #-5
    6e20:	019a1a43 	orrseq	r1, sl, r3, asr #20
    6e24:	01010000 	mrseq	r0, (UNDEF: 1)
    6e28:	0001b10d 	andeq	fp, r1, sp, lsl #2
    6e2c:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    6e30:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    6e34:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    6e38:	000001c1 	andeq	r0, r0, r1, asr #3
    6e3c:	e1080102 	tst	r8, r2, lsl #2
    6e40:	08000008 	stmdaeq	r0, {r3}
    6e44:	000001c1 	andeq	r0, r0, r1, asr #3
    6e48:	00028e0d 	andeq	r8, r2, sp, lsl #28
    6e4c:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    6e50:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    6e54:	080a0101 	stmdaeq	sl, {r0, r8}
    6e58:	0c098f05 	stceq	15, cr8, [r9], {5}
    6e5c:	0c000002 	stceq	0, cr0, [r0], {2}
    6e60:	00000601 	andeq	r0, r0, r1, lsl #12
    6e64:	670b9005 	strvs	r9, [fp, -r5]
    6e68:	00000000 	andeq	r0, r0, r0
    6e6c:	000ba00c 	andeq	sl, fp, ip
    6e70:	08910500 	ldmeq	r1, {r8, sl}
    6e74:	000000c1 	andeq	r0, r0, r1, asr #1
    6e78:	01ea0c04 	mvneq	r0, r4, lsl #24
    6e7c:	92050000 	andls	r0, r5, #0
    6e80:	0000de10 	andeq	sp, r0, r0, lsl lr
    6e84:	03000600 	movweq	r0, #1536	; 0x600
    6e88:	00000941 	andeq	r0, r0, r1, asr #18
    6e8c:	db039305 	blle	ebaa8 <__ccfg+0xcbb00>
    6e90:	0f000001 	svceq	0x00000001
    6e94:	0000020c 	andeq	r0, r0, ip, lsl #4
    6e98:	00000223 	andeq	r0, r0, r3, lsr #4
    6e9c:	0f0d0010 	svceq	0x000d0010
    6ea0:	05000007 	streq	r0, [r0, #-7]
    6ea4:	02180f99 	andseq	r0, r8, #612	; 0x264
    6ea8:	01010000 	mrseq	r0, (UNDEF: 1)
    6eac:	9106010a 	tstls	r6, sl, lsl #2
    6eb0:	00025b09 	andeq	r5, r2, r9, lsl #22
    6eb4:	070a0b00 	streq	r0, [sl, -r0, lsl #22]
    6eb8:	93060000 	movwls	r0, #24576	; 0x6000
    6ebc:	0000d207 	andeq	sp, r0, r7, lsl #4
    6ec0:	01070100 	mrseq	r0, (UNDEF: 23)
    6ec4:	04780b00 	ldrbteq	r0, [r8], #-2816	; 0xfffff500
    6ec8:	94060000 	strls	r0, [r6], #-0
    6ecc:	0000d203 	andeq	sp, r0, r3, lsl #4
    6ed0:	00010100 	andeq	r0, r1, r0, lsl #2
    6ed4:	cc030000 	stcgt	0, cr0, [r3], {-0}
    6ed8:	06000007 	streq	r0, [r0], -r7
    6edc:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    6ee0:	5b080000 	blpl	206ee8 <__ccfg+0x1e6f40>
    6ee4:	0f000002 	svceq	0x00000002
    6ee8:	00000267 	andeq	r0, r0, r7, ror #4
    6eec:	00000277 	andeq	r0, r0, r7, ror r2
    6ef0:	6c080010 	stcvs	0, cr0, [r8], {16}
    6ef4:	0d000002 	stceq	0, cr0, [r0, #-8]
    6ef8:	00000347 	andeq	r0, r0, r7, asr #6
    6efc:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    6f00:	01000002 	tsteq	r0, r2
    6f04:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    6f08:	02950000 	addseq	r0, r5, #0
    6f0c:	00100000 	andseq	r0, r0, r0
    6f10:	00028a08 	andeq	r8, r2, r8, lsl #20
    6f14:	04b70d00 	ldrteq	r0, [r7], #3328	; 0xd00
    6f18:	06070000 	streq	r0, [r7], -r0
    6f1c:	00029513 	andeq	r9, r2, r3, lsl r5
    6f20:	0d010100 	stfeqs	f0, [r1, #-0]
    6f24:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    6f28:	e30ec305 	movw	ip, #58117	; 0xe305
    6f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    6f30:	08fa1101 	ldmeq	sl!, {r0, r8, ip}^
    6f34:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    6f38:	02c31001 	sbceq	r1, r3, #1
    6f3c:	040e0000 	streq	r0, [lr], #-0
    6f40:	000002c9 	andeq	r0, r0, r9, asr #5
    6f44:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    6f48:	c1130000 	tstgt	r3, r0
    6f4c:	00000000 	andeq	r0, r0, r0
    6f50:	0001c80f 	andeq	ip, r1, pc, lsl #16
    6f54:	0002e000 	andeq	lr, r2, r0
    6f58:	08001000 	stmdaeq	r0, {ip}
    6f5c:	000002d5 	ldrdeq	r0, [r0], -r5
    6f60:	00076314 	andeq	r6, r7, r4, lsl r3
    6f64:	017f0800 	cmneq	pc, r0, lsl #16
    6f68:	0002e016 	andeq	lr, r2, r6, lsl r0
    6f6c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6f70:	0000032a 	andeq	r0, r0, sl, lsr #6
    6f74:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    6f78:	000000ef 	andeq	r0, r0, pc, ror #1
    6f7c:	07140101 	ldreq	r0, [r4, -r1, lsl #2]
    6f80:	08000003 	stmdaeq	r0, {r0, r1}
    6f84:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    6f88:	01000000 	mrseq	r0, (UNDEF: 0)
    6f8c:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    6f90:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    6f94:	16000003 	strne	r0, [r0], -r3
    6f98:	0000374e 	andeq	r3, r0, lr, asr #14
    6f9c:	07030708 	streq	r0, [r3, -r8, lsl #14]
    6fa0:	000000c1 	andeq	r0, r0, r1, asr #1
    6fa4:	0af81600 	beq	ffe0c7ac <_estack+0xdfe077ac>
    6fa8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6fac:	00f40803 	rscseq	r0, r4, r3, lsl #16
    6fb0:	00040000 	andeq	r0, r4, r0
    6fb4:	0003bf11 	andeq	fp, r3, r1, lsl pc
    6fb8:	03090800 	movweq	r0, #38912	; 0x9800
    6fbc:	00031203 	andeq	r1, r3, r3, lsl #4
    6fc0:	00331700 	eorseq	r1, r3, r0, lsl #14
    6fc4:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    6fc8:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    6fcc:	16000003 	strne	r0, [r0], -r3
    6fd0:	000019f9 	strdeq	r1, [r0], -r9
    6fd4:	08031408 	stmdaeq	r3, {r3, sl, ip}
    6fd8:	000000c1 	andeq	r0, r0, r1, asr #1
    6fdc:	08a41600 	stmiaeq	r4!, {r9, sl, ip}
    6fe0:	15080000 	strne	r0, [r8, #-0]
    6fe4:	00c10803 	sbceq	r0, r1, r3, lsl #16
    6fe8:	16020000 	strne	r0, [r2], -r0
    6fec:	000048be 			; <UNDEFINED> instruction: 0x000048be
    6ff0:	0b031608 	bleq	cc818 <__ccfg+0xac870>
    6ff4:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    6ff8:	43211604 			; <UNDEFINED> instruction: 0x43211604
    6ffc:	17080000 	strne	r0, [r8, -r0]
    7000:	00f40903 	rscseq	r0, r4, r3, lsl #18
    7004:	16080000 	strne	r0, [r8], -r0
    7008:	00000007 	andeq	r0, r0, r7
    700c:	0f031808 	svceq	0x00031808
    7010:	000003a9 	andeq	r0, r0, r9, lsr #7
    7014:	0722160c 	streq	r1, [r2, -ip, lsl #12]!
    7018:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    701c:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    7020:	002c0000 	eoreq	r0, ip, r0
    7024:	0003390f 	andeq	r3, r3, pc, lsl #18
    7028:	0003b900 	andeq	fp, r3, r0, lsl #18
    702c:	00881800 	addeq	r1, r8, r0, lsl #16
    7030:	00030000 	andeq	r0, r3, r0
    7034:	0346040e 	movteq	r0, #25614	; 0x640e
    7038:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    703c:	08000008 	stmdaeq	r0, {r3}
    7040:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    7044:	14000003 	strne	r0, [r0], #-3
    7048:	00000879 	andeq	r0, r0, r9, ror r8
    704c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    7050:	000003db 	ldrdeq	r0, [r0], -fp
    7054:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    7058:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    705c:	19410119 	stmdbne	r1, {r0, r3, r4, r8}^
    7060:	0c010000 	stceq	0, cr0, [r1], {-0}
    7064:	00810105 	addeq	r0, r1, r5, lsl #2
    7068:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
    706c:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    7070:	9c010000 	stcls	0, cr0, [r1], {-0}
    7074:	00000449 	andeq	r0, r0, r9, asr #8
    7078:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    707c:	c1140c01 	tstgt	r4, r1, lsl #24
    7080:	97000000 	strls	r0, [r0, -r0]
    7084:	1b000023 	blne	7118 <__exidx_end+0x21ec>
    7088:	0c01006d 	stceq	0, cr0, [r1], {109}	; 0x6d
    708c:	00044924 	andeq	r4, r4, r4, lsr #18
    7090:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    7094:	20d41d1c 	sbcscs	r1, r4, ip, lsl sp
    7098:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    709c:	00008106 	andeq	r8, r0, r6, lsl #2
    70a0:	0023aa00 	eoreq	sl, r3, r0, lsl #20
    70a4:	75621e00 	strbvc	r1, [r2, #-3584]!	; 0xfffff200
    70a8:	0f010066 	svceq	0x00010066
    70ac:	0001bb08 	andeq	fp, r1, r8, lsl #22
    70b0:	0023e900 	eoreq	lr, r3, r0, lsl #18
    70b4:	70611f00 	rsbvc	r1, r1, r0, lsl #30
    70b8:	0a100100 	beq	4074c0 <__ccfg+0x3e7518>
    70bc:	000000b5 	strheq	r0, [r0], -r5
    70c0:	005c9102 	subseq	r9, ip, r2, lsl #2
    70c4:	01c8040e 	biceq	r0, r8, lr, lsl #8
    70c8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    70cc:	03000004 	movweq	r0, #4
    70d0:	001dd000 	andseq	sp, sp, r0
    70d4:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    70d8:	0c000000 	stceq	0, cr0, [r0], {-0}
    70dc:	0000198b 	andeq	r1, r0, fp, lsl #19
    70e0:	00000664 	andeq	r0, r0, r4, ror #12
    70e4:	00000bd8 	ldrdeq	r0, [r0], -r8
    70e8:	00000000 	andeq	r0, r0, r0
    70ec:	00004b4c 	andeq	r4, r0, ip, asr #22
    70f0:	da060102 	ble	187500 <__ccfg+0x167558>
    70f4:	02000008 	andeq	r0, r0, #8
    70f8:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    70fc:	04020000 	streq	r0, [r2], #-0
    7100:	0005e905 	andeq	lr, r5, r5, lsl #18
    7104:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    7108:	000005e4 	andeq	r0, r0, r4, ror #11
    710c:	00083103 	andeq	r3, r8, r3, lsl #2
    7110:	182e0200 	stmdane	lr!, {r9}
    7114:	0000004d 	andeq	r0, r0, sp, asr #32
    7118:	d8080102 	stmdale	r8, {r1, r8}
    711c:	03000008 	movweq	r0, #8
    7120:	000003ce 	andeq	r0, r0, lr, asr #7
    7124:	60193102 	andsvs	r3, r9, r2, lsl #2
    7128:	02000000 	andeq	r0, r0, #0
    712c:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    7130:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    7134:	02000008 	andeq	r0, r0, #8
    7138:	00731934 	rsbseq	r1, r3, r4, lsr r9
    713c:	04020000 	streq	r0, [r2], #-0
    7140:	00039307 	andeq	r9, r3, r7, lsl #6
    7144:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7148:	0000038e 	andeq	r0, r0, lr, lsl #7
    714c:	69050404 	stmdbvs	r5, {r2, sl}
    7150:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7154:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
    7158:	1a030000 	bne	c7160 <__ccfg+0xa71b8>
    715c:	03000004 	movweq	r0, #4
    7160:	009b1b28 	addseq	r1, fp, r8, lsr #22
    7164:	61050000 	mrsvs	r0, (UNDEF: 5)
    7168:	04000008 	streq	r0, [r0], #-8
    716c:	00b30009 	adcseq	r0, r3, r9
    7170:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    7174:	b3000009 	movwlt	r0, #9
    7178:	00000000 	andeq	r0, r0, r0
    717c:	04070001 	streq	r0, [r7], #-1
    7180:	00086303 	andeq	r6, r8, r3, lsl #6
    7184:	18630300 	stmdane	r3!, {r8, r9}^
    7188:	0000008f 	andeq	r0, r0, pc, lsl #1
    718c:	0023ca03 	eoreq	ip, r3, r3, lsl #20
    7190:	12270400 	eorne	r0, r7, #0, 8
    7194:	00000054 	andeq	r0, r0, r4, asr r0
    7198:	0000c108 	andeq	ip, r0, r8, lsl #2
    719c:	18e30300 	stmiane	r3!, {r8, r9}^
    71a0:	2b040000 	blcs	1071a8 <__ccfg+0xe7200>
    71a4:	00004112 	andeq	r4, r0, r2, lsl r1
    71a8:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    71ac:	1b030000 	blne	c71b4 <__ccfg+0xa720c>
    71b0:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    71b4:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    71b8:	e3080000 	movw	r0, #32768	; 0x8000
    71bc:	03000000 	movweq	r0, #0
    71c0:	000004f7 	strdeq	r0, [r0], -r7
    71c4:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    71c8:	0a000000 	beq	71d0 <__exidx_end+0x22a4>
    71cc:	09320408 	ldmdbeq	r2!, {r3, sl}
    71d0:	0000018e 	andeq	r0, r0, lr, lsl #3
    71d4:	00003e0b 	andeq	r3, r0, fp, lsl #28
    71d8:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    71dc:	000000d2 	ldrdeq	r0, [r0], -r2
    71e0:	00070101 	andeq	r0, r7, r1, lsl #2
    71e4:	0004fd0b 	andeq	pc, r4, fp, lsl #26
    71e8:	03350400 	teqeq	r5, #0, 8
    71ec:	000000d2 	ldrdeq	r0, [r0], -r2
    71f0:	00060101 	andeq	r0, r6, r1, lsl #2
    71f4:	0002370b 	andeq	r3, r2, fp, lsl #14
    71f8:	03360400 	teqeq	r6, #0, 8
    71fc:	000000d2 	ldrdeq	r0, [r0], -r2
    7200:	00050101 	andeq	r0, r5, r1, lsl #2
    7204:	0005370b 	andeq	r3, r5, fp, lsl #14
    7208:	03370400 	teqeq	r7, #0, 8
    720c:	000000d2 	ldrdeq	r0, [r0], -r2
    7210:	00040101 	andeq	r0, r4, r1, lsl #2
    7214:	0007c00b 	andeq	ip, r7, fp
    7218:	03380400 	teqeq	r8, #0, 8
    721c:	000000d2 	ldrdeq	r0, [r0], -r2
    7220:	00000401 	andeq	r0, r0, r1, lsl #8
    7224:	0005040c 	andeq	r0, r5, ip, lsl #8
    7228:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    722c:	000000d2 	ldrdeq	r0, [r0], -r2
    7230:	06ce0c01 	strbeq	r0, [lr], r1, lsl #24
    7234:	3c040000 	stccc	0, cr0, [r4], {-0}
    7238:	0000d203 	andeq	sp, r0, r3, lsl #4
    723c:	6e0c0200 	cdpvs	2, 0, cr0, cr12, cr0, {0}
    7240:	0400000a 	streq	r0, [r0], #-10
    7244:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    7248:	0c030000 	stceq	0, cr0, [r3], {-0}
    724c:	00000703 	andeq	r0, r0, r3, lsl #14
    7250:	e3083f04 	movw	r3, #36612	; 0x8f04
    7254:	04000000 	streq	r0, [r0], #-0
    7258:	02850300 	addeq	r0, r5, #0, 6
    725c:	41040000 	mrsmi	r0, (UNDEF: 4)
    7260:	00010003 	andeq	r0, r1, r3
    7264:	018e0900 	orreq	r0, lr, r0, lsl #18
    7268:	3e0d0000 	cdpcc	0, 0, cr0, cr13, cr0, {0}
    726c:	04000005 	streq	r0, [r0], #-5
    7270:	019a1a43 	orrseq	r1, sl, r3, asr #20
    7274:	01010000 	mrseq	r0, (UNDEF: 1)
    7278:	0001b10d 	andeq	fp, r1, sp, lsl #2
    727c:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    7280:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    7284:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    7288:	000001c1 	andeq	r0, r0, r1, asr #3
    728c:	e1080102 	tst	r8, r2, lsl #2
    7290:	08000008 	stmdaeq	r0, {r3}
    7294:	000001c1 	andeq	r0, r0, r1, asr #3
    7298:	00028e0d 	andeq	r8, r2, sp, lsl #28
    729c:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    72a0:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    72a4:	080a0101 	stmdaeq	sl, {r0, r8}
    72a8:	0c098f05 	stceq	15, cr8, [r9], {5}
    72ac:	0c000002 	stceq	0, cr0, [r0], {2}
    72b0:	00000601 	andeq	r0, r0, r1, lsl #12
    72b4:	670b9005 	strvs	r9, [fp, -r5]
    72b8:	00000000 	andeq	r0, r0, r0
    72bc:	000ba00c 	andeq	sl, fp, ip
    72c0:	08910500 	ldmeq	r1, {r8, sl}
    72c4:	000000c1 	andeq	r0, r0, r1, asr #1
    72c8:	01ea0c04 	mvneq	r0, r4, lsl #24
    72cc:	92050000 	andls	r0, r5, #0
    72d0:	0000de10 	andeq	sp, r0, r0, lsl lr
    72d4:	03000600 	movweq	r0, #1536	; 0x600
    72d8:	00000941 	andeq	r0, r0, r1, asr #18
    72dc:	db039305 	blle	ebef8 <__ccfg+0xcbf50>
    72e0:	0f000001 	svceq	0x00000001
    72e4:	0000020c 	andeq	r0, r0, ip, lsl #4
    72e8:	00000223 	andeq	r0, r0, r3, lsr #4
    72ec:	0f0d0010 	svceq	0x000d0010
    72f0:	05000007 	streq	r0, [r0, #-7]
    72f4:	02180f99 	andseq	r0, r8, #612	; 0x264
    72f8:	01010000 	mrseq	r0, (UNDEF: 1)
    72fc:	9106010a 	tstls	r6, sl, lsl #2
    7300:	00025b09 	andeq	r5, r2, r9, lsl #22
    7304:	070a0b00 	streq	r0, [sl, -r0, lsl #22]
    7308:	93060000 	movwls	r0, #24576	; 0x6000
    730c:	0000d207 	andeq	sp, r0, r7, lsl #4
    7310:	01070100 	mrseq	r0, (UNDEF: 23)
    7314:	04780b00 	ldrbteq	r0, [r8], #-2816	; 0xfffff500
    7318:	94060000 	strls	r0, [r6], #-0
    731c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7320:	00010100 	andeq	r0, r1, r0, lsl #2
    7324:	cc030000 	stcgt	0, cr0, [r3], {-0}
    7328:	06000007 	streq	r0, [r0], -r7
    732c:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    7330:	5b080000 	blpl	207338 <__ccfg+0x1e7390>
    7334:	0f000002 	svceq	0x00000002
    7338:	00000267 	andeq	r0, r0, r7, ror #4
    733c:	00000277 	andeq	r0, r0, r7, ror r2
    7340:	6c080010 	stcvs	0, cr0, [r8], {16}
    7344:	0d000002 	stceq	0, cr0, [r0, #-8]
    7348:	00000347 	andeq	r0, r0, r7, asr #6
    734c:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    7350:	01000002 	tsteq	r0, r2
    7354:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    7358:	02950000 	addseq	r0, r5, #0
    735c:	00100000 	andseq	r0, r0, r0
    7360:	00028a08 	andeq	r8, r2, r8, lsl #20
    7364:	04b70d00 	ldrteq	r0, [r7], #3328	; 0xd00
    7368:	06070000 	streq	r0, [r7], -r0
    736c:	00029513 	andeq	r9, r2, r3, lsl r5
    7370:	0d010100 	stfeqs	f0, [r1, #-0]
    7374:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    7378:	e30ec305 	movw	ip, #58117	; 0xe305
    737c:	01000000 	mrseq	r0, (UNDEF: 0)
    7380:	08fa1101 	ldmeq	sl!, {r0, r8, ip}^
    7384:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    7388:	02c31001 	sbceq	r1, r3, #1
    738c:	040e0000 	streq	r0, [lr], #-0
    7390:	000002c9 	andeq	r0, r0, r9, asr #5
    7394:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    7398:	c1130000 	tstgt	r3, r0
    739c:	00000000 	andeq	r0, r0, r0
    73a0:	0001c80f 	andeq	ip, r1, pc, lsl #16
    73a4:	0002e000 	andeq	lr, r2, r0
    73a8:	08001000 	stmdaeq	r0, {ip}
    73ac:	000002d5 	ldrdeq	r0, [r0], -r5
    73b0:	00076314 	andeq	r6, r7, r4, lsl r3
    73b4:	017f0800 	cmneq	pc, r0, lsl #16
    73b8:	0002e016 	andeq	lr, r2, r6, lsl r0
    73bc:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    73c0:	0000032a 	andeq	r0, r0, sl, lsr #6
    73c4:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    73c8:	000000ef 	andeq	r0, r0, pc, ror #1
    73cc:	07140101 	ldreq	r0, [r4, -r1, lsl #2]
    73d0:	08000003 	stmdaeq	r0, {r0, r1}
    73d4:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    73d8:	01000000 	mrseq	r0, (UNDEF: 0)
    73dc:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    73e0:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    73e4:	16000003 	strne	r0, [r0], -r3
    73e8:	0000374e 	andeq	r3, r0, lr, asr #14
    73ec:	07030708 	streq	r0, [r3, -r8, lsl #14]
    73f0:	000000c1 	andeq	r0, r0, r1, asr #1
    73f4:	0af81600 	beq	ffe0cbfc <_estack+0xdfe07bfc>
    73f8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    73fc:	00f40803 	rscseq	r0, r4, r3, lsl #16
    7400:	00040000 	andeq	r0, r4, r0
    7404:	0003bf11 	andeq	fp, r3, r1, lsl pc
    7408:	03090800 	movweq	r0, #38912	; 0x9800
    740c:	00031203 	andeq	r1, r3, r3, lsl #4
    7410:	00331700 	eorseq	r1, r3, r0, lsl #14
    7414:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    7418:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    741c:	16000003 	strne	r0, [r0], -r3
    7420:	000019f9 	strdeq	r1, [r0], -r9
    7424:	08031408 	stmdaeq	r3, {r3, sl, ip}
    7428:	000000c1 	andeq	r0, r0, r1, asr #1
    742c:	08a41600 	stmiaeq	r4!, {r9, sl, ip}
    7430:	15080000 	strne	r0, [r8, #-0]
    7434:	00c10803 	sbceq	r0, r1, r3, lsl #16
    7438:	16020000 	strne	r0, [r2], -r0
    743c:	000048be 			; <UNDEFINED> instruction: 0x000048be
    7440:	0b031608 	bleq	ccc68 <__ccfg+0xaccc0>
    7444:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    7448:	43211604 			; <UNDEFINED> instruction: 0x43211604
    744c:	17080000 	strne	r0, [r8, -r0]
    7450:	00f40903 	rscseq	r0, r4, r3, lsl #18
    7454:	16080000 	strne	r0, [r8], -r0
    7458:	00000007 	andeq	r0, r0, r7
    745c:	0f031808 	svceq	0x00031808
    7460:	000003a9 	andeq	r0, r0, r9, lsr #7
    7464:	0722160c 	streq	r1, [r2, -ip, lsl #12]!
    7468:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    746c:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    7470:	002c0000 	eoreq	r0, ip, r0
    7474:	0003390f 	andeq	r3, r3, pc, lsl #18
    7478:	0003b900 	andeq	fp, r3, r0, lsl #18
    747c:	00881800 	addeq	r1, r8, r0, lsl #16
    7480:	00030000 	andeq	r0, r3, r0
    7484:	0346040e 	movteq	r0, #25614	; 0x640e
    7488:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    748c:	08000008 	stmdaeq	r0, {r3}
    7490:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    7494:	14000003 	strne	r0, [r0], #-3
    7498:	00000879 	andeq	r0, r0, r9, ror r8
    749c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    74a0:	000003db 	ldrdeq	r0, [r0], -fp
    74a4:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    74a8:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    74ac:	0018f10d 	andseq	pc, r8, sp, lsl #2
    74b0:	0e0a0100 	adfeqe	f0, f2, f0
    74b4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    74b8:	01190101 	tsteq	r9, r1, lsl #2
    74bc:	000019cb 	andeq	r1, r0, fp, asr #19
    74c0:	01050e01 	tsteq	r5, r1, lsl #28
    74c4:	00000081 	andeq	r0, r0, r1, lsl #1
    74c8:	00001e88 	andeq	r1, r0, r8, lsl #29
    74cc:	00001ee8 	andeq	r1, r0, r8, ror #29
    74d0:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    74d4:	731a0000 	tstvc	sl, #0
    74d8:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    74dc:	0000c113 	andeq	ip, r0, r3, lsl r1
    74e0:	00241d00 	eoreq	r1, r4, r0, lsl #26
    74e4:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    74e8:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    74ec:	00044923 	andeq	r4, r4, r3, lsr #18
    74f0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    74f4:	20d41d1c 	sbcscs	r1, r4, ip, lsl sp
    74f8:	13010000 	movwne	r0, #4096	; 0x1000
    74fc:	00008106 	andeq	r8, r0, r6, lsl #2
    7500:	00243b00 	eoreq	r3, r4, r0, lsl #22
    7504:	70611e00 	rsbvc	r1, r1, r0, lsl #28
    7508:	0a140100 	beq	507910 <__ccfg+0x4e7968>
    750c:	000000b5 	strheq	r0, [r0], -r5
    7510:	00649102 	rsbeq	r9, r4, r2, lsl #2
    7514:	01c8040e 	biceq	r0, r8, lr, lsl #8
    7518:	74000000 	strvc	r0, [r0], #-0
    751c:	03000024 	movweq	r0, #36	; 0x24
    7520:	001f6b00 	andseq	r6, pc, r0, lsl #22
    7524:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    7528:	0c000000 	stceq	0, cr0, [r0], {-0}
    752c:	00001de3 	andeq	r1, r0, r3, ror #27
    7530:	00000664 	andeq	r0, r0, r4, ror #12
    7534:	00000d60 	andeq	r0, r0, r0, ror #26
    7538:	00000000 	andeq	r0, r0, r0
    753c:	00004cff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    7540:	00266302 	eoreq	r6, r6, r2, lsl #6
    7544:	17220600 	strne	r0, [r2, -r0, lsl #12]!
    7548:	00000031 	andeq	r0, r0, r1, lsr r0
    754c:	da060103 	ble	187960 <__ccfg+0x1679b8>
    7550:	02000008 	andeq	r0, r0, #8
    7554:	00002c9a 	muleq	r0, sl, ip
    7558:	44182506 	ldrmi	r2, [r8], #-1286	; 0xfffffafa
    755c:	03000000 	movweq	r0, #0
    7560:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    7564:	04030000 	streq	r0, [r3], #-0
    7568:	0005e905 	andeq	lr, r5, r5, lsl #18
    756c:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    7570:	000005e4 	andeq	r0, r0, r4, ror #11
    7574:	00083102 	andeq	r3, r8, r2, lsl #2
    7578:	182e0600 	stmdane	lr!, {r9, sl}
    757c:	00000065 	andeq	r0, r0, r5, rrx
    7580:	d8080103 	stmdale	r8, {r0, r1, r8}
    7584:	02000008 	andeq	r0, r0, #8
    7588:	000003ce 	andeq	r0, r0, lr, asr #7
    758c:	78193106 	ldmdavc	r9, {r1, r2, r8, ip, sp}
    7590:	03000000 	movweq	r0, #0
    7594:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    7598:	f1020000 	cps	#0
    759c:	06000008 	streq	r0, [r0], -r8
    75a0:	00901934 	addseq	r1, r0, r4, lsr r9
    75a4:	7f040000 	svcvc	0x00040000
    75a8:	03000000 	movweq	r0, #0
    75ac:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
    75b0:	90050000 	andls	r0, r5, r0
    75b4:	03000000 	movweq	r0, #0
    75b8:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    75bc:	04060000 	streq	r0, [r6], #-0
    75c0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    75c4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    75c8:	00000398 	muleq	r0, r8, r3
    75cc:	00089207 	andeq	r9, r8, r7, lsl #4
    75d0:	015e0700 	cmpeq	lr, r0, lsl #14
    75d4:	0000aa17 	andeq	sl, r0, r7, lsl sl
    75d8:	09e20200 	stmibeq	r2!, {r9}^
    75dc:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    75e0:	00004b0e 	andeq	r4, r0, lr, lsl #22
    75e4:	02670200 	rsbeq	r0, r7, #0, 4
    75e8:	74080000 	strvc	r0, [r8], #-0
    75ec:	00004b0e 	andeq	r4, r0, lr, lsl #22
    75f0:	08040800 	stmdaeq	r4, {fp}
    75f4:	00f803a5 	rscseq	r0, r8, r5, lsr #7
    75f8:	87090000 	strhi	r0, [r9, -r0]
    75fc:	08000005 	stmdaeq	r0, {r0, r2}
    7600:	00b10ca7 	adcseq	r0, r1, r7, lsr #25
    7604:	e6090000 	str	r0, [r9], -r0
    7608:	08000007 	stmdaeq	r0, {r0, r1, r2}
    760c:	00f813a8 	rscseq	r1, r8, r8, lsr #7
    7610:	0a000000 	beq	7618 <__exidx_end+0x26ec>
    7614:	00000065 	andeq	r0, r0, r5, rrx
    7618:	00000108 	andeq	r0, r0, r8, lsl #2
    761c:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7620:	0c000300 	stceq	3, cr0, [r0], {-0}
    7624:	09a20808 	stmibeq	r2!, {r3, fp}
    7628:	0000012c 	andeq	r0, r0, ip, lsr #2
    762c:	0003220d 	andeq	r2, r3, sp, lsl #4
    7630:	07a40800 	streq	r0, [r4, r0, lsl #16]!
    7634:	000000a3 	andeq	r0, r0, r3, lsr #1
    7638:	04aa0d00 	strteq	r0, [sl], #3328	; 0xd00
    763c:	a9080000 	stmdbge	r8, {}	; <UNPREDICTABLE>
    7640:	0000d605 	andeq	sp, r0, r5, lsl #12
    7644:	02000400 	andeq	r0, r0, #0, 8
    7648:	000006a5 	andeq	r0, r0, r5, lsr #13
    764c:	0803aa08 	stmdaeq	r3, {r3, r9, fp, sp, pc}
    7650:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    7654:	06290204 	strteq	r0, [r9], -r4, lsl #4
    7658:	16090000 	strne	r0, [r9], -r0
    765c:	00009019 	andeq	r9, r0, r9, lsl r0
    7660:	01fe0200 	mvnseq	r0, r0, lsl #4
    7664:	0c0a0000 	stceq	0, cr0, [sl], {-0}
    7668:	0000a30d 	andeq	sl, r0, sp, lsl #6
    766c:	05550200 	ldrbeq	r0, [r5, #-512]	; 0xfffffe00
    7670:	23090000 	movwcs	r0, #36864	; 0x9000
    7674:	0001461b 	andeq	r4, r1, fp, lsl r6
    7678:	02a70f00 	adceq	r0, r7, #0, 30
    767c:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    7680:	01b80834 			; <UNDEFINED> instruction: 0x01b80834
    7684:	320d0000 	andcc	r0, sp, #0
    7688:	0900000a 	stmdbeq	r0, {r1, r3}
    768c:	01b81336 			; <UNDEFINED> instruction: 0x01b81336
    7690:	10000000 	andne	r0, r0, r0
    7694:	09006b5f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    7698:	00a30737 	adceq	r0, r3, r7, lsr r7
    769c:	0d040000 	stceq	0, cr0, [r4, #-0]
    76a0:	00000841 	andeq	r0, r0, r1, asr #16
    76a4:	a30b3709 	movwge	r3, #46857	; 0xb709
    76a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    76ac:	003ea20d 	eorseq	sl, lr, sp, lsl #4
    76b0:	14370900 	ldrtne	r0, [r7], #-2304	; 0xfffff700
    76b4:	000000a3 	andeq	r0, r0, r3, lsr #1
    76b8:	03ba0d0c 			; <UNDEFINED> instruction: 0x03ba0d0c
    76bc:	37090000 	strcc	r0, [r9, -r0]
    76c0:	0000a31b 	andeq	sl, r0, fp, lsl r3
    76c4:	5f101000 	svcpl	0x00101000
    76c8:	38090078 	stmdacc	r9, {r3, r4, r5, r6}
    76cc:	0001be0b 	andeq	fp, r1, fp, lsl #28
    76d0:	11001400 	tstne	r0, r0, lsl #8
    76d4:	00015e04 	andeq	r5, r1, r4, lsl #28
    76d8:	013a0a00 	teqeq	sl, r0, lsl #20
    76dc:	01ce0000 	biceq	r0, lr, r0
    76e0:	aa0b0000 	bge	2c76e8 <__ccfg+0x2a7740>
    76e4:	00000000 	andeq	r0, r0, r0
    76e8:	085c0f00 	ldmdaeq	ip, {r8, r9, sl, fp}^
    76ec:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    76f0:	0251083c 	subseq	r0, r1, #60, 16	; 0x3c0000
    76f4:	4a0d0000 	bmi	3476fc <__ccfg+0x327754>
    76f8:	09000004 	stmdbeq	r0, {r2}
    76fc:	00a3093e 	adceq	r0, r3, lr, lsr r9
    7700:	0d000000 	stceq	0, cr0, [r0, #-0]
    7704:	00000354 	andeq	r0, r0, r4, asr r3
    7708:	a3093f09 	movwge	r3, #40713	; 0x9f09
    770c:	04000000 	streq	r0, [r0], #-0
    7710:	0002fd0d 	andeq	pc, r2, sp, lsl #26
    7714:	09400900 	stmdbeq	r0, {r8, fp}^
    7718:	000000a3 	andeq	r0, r0, r3, lsr #1
    771c:	050b0d08 	streq	r0, [fp, #-3336]	; 0xfffff2f8
    7720:	41090000 	mrsmi	r0, (UNDEF: 9)
    7724:	0000a309 	andeq	sl, r0, r9, lsl #6
    7728:	190d0c00 	stmdbne	sp, {sl, fp}
    772c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7730:	00a30942 	adceq	r0, r3, r2, asr #18
    7734:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7738:	00000800 	andeq	r0, r0, r0, lsl #16
    773c:	a3094309 	movwge	r4, #37641	; 0x9309
    7740:	14000000 	strne	r0, [r0], #-0
    7744:	0002c20d 	andeq	ip, r2, sp, lsl #4
    7748:	09440900 	stmdbeq	r4, {r8, fp}^
    774c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7750:	04530d18 	ldrbeq	r0, [r3], #-3352	; 0xfffff2e8
    7754:	45090000 	strmi	r0, [r9, #-0]
    7758:	0000a309 	andeq	sl, r0, r9, lsl #6
    775c:	c30d1c00 	movwgt	r1, #56320	; 0xdc00
    7760:	09000006 	stmdbeq	r0, {r1, r2}
    7764:	00a30946 	adceq	r0, r3, r6, asr #18
    7768:	00200000 	eoreq	r0, r0, r0
    776c:	00006112 	andeq	r6, r0, r2, lsl r1
    7770:	09010800 	stmdbeq	r1, {fp}
    7774:	0296084f 	addseq	r0, r6, #5177344	; 0x4f0000
    7778:	700d0000 	andvc	r0, sp, r0
    777c:	09000009 	stmdbeq	r0, {r0, r3}
    7780:	02960a50 	addseq	r0, r6, #80, 20	; 0x50000
    7784:	0d000000 	stceq	0, cr0, [r0, #-0]
    7788:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    778c:	96095109 	strls	r5, [r9], -r9, lsl #2
    7790:	80000002 	andhi	r0, r0, r2
    7794:	0009d913 	andeq	sp, r9, r3, lsl r9
    7798:	0a530900 	beq	14c9ba0 <__ccfg+0x14a9bf8>
    779c:	0000013a 	andeq	r0, r0, sl, lsr r1
    77a0:	1d130100 	ldfnes	f0, [r3, #-0]
    77a4:	0900000a 	stmdbeq	r0, {r1, r3}
    77a8:	013a0a56 	teqeq	sl, r6, asr sl
    77ac:	01040000 	mrseq	r0, (UNDEF: 4)
    77b0:	01380a00 	teqeq	r8, r0, lsl #20
    77b4:	02a60000 	adceq	r0, r6, #0
    77b8:	aa0b0000 	bge	2c77c0 <__ccfg+0x2a7818>
    77bc:	1f000000 	svcne	0x00000000
    77c0:	07861200 	streq	r1, [r6, r0, lsl #4]
    77c4:	01900000 	orrseq	r0, r0, r0
    77c8:	e9086209 	stmdb	r8, {r0, r3, r9, sp, lr}
    77cc:	0d000002 	stceq	0, cr0, [r0, #-8]
    77d0:	00000a32 	andeq	r0, r0, r2, lsr sl
    77d4:	e9126309 	ldmdb	r2, {r0, r3, r8, r9, sp, lr}
    77d8:	00000002 	andeq	r0, r0, r2
    77dc:	0004620d 	andeq	r6, r4, sp, lsl #4
    77e0:	06640900 	strbteq	r0, [r4], -r0, lsl #18
    77e4:	000000a3 	andeq	r0, r0, r3, lsr #1
    77e8:	026f0d04 	rsbeq	r0, pc, #4, 26	; 0x100
    77ec:	66090000 	strvs	r0, [r9], -r0
    77f0:	0002ef09 	andeq	lr, r2, r9, lsl #30
    77f4:	610d0800 	tstvs	sp, r0, lsl #16
    77f8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    77fc:	02511e67 	subseq	r1, r1, #1648	; 0x670
    7800:	00880000 	addeq	r0, r8, r0
    7804:	02a60411 	adceq	r0, r6, #285212672	; 0x11000000
    7808:	ff0a0000 			; <UNDEFINED> instruction: 0xff0a0000
    780c:	ff000002 			; <UNDEFINED> instruction: 0xff000002
    7810:	0b000002 	bleq	7820 <__exidx_end+0x28f4>
    7814:	000000aa 	andeq	r0, r0, sl, lsr #1
    7818:	0411001f 	ldreq	r0, [r1], #-31	; 0xffffffe1
    781c:	00000305 	andeq	r0, r0, r5, lsl #6
    7820:	3a0f0114 	bcc	3c7c78 <__ccfg+0x3a7cd0>
    7824:	08000009 	stmdaeq	r0, {r0, r3}
    7828:	2f087a09 	svccs	0x00087a09
    782c:	0d000003 	stceq	0, cr0, [r0, #-12]
    7830:	00000600 	andeq	r0, r0, r0, lsl #12
    7834:	2f117b09 	svccs	0x00117b09
    7838:	00000003 	andeq	r0, r0, r3
    783c:	0018c10d 	andseq	ip, r8, sp, lsl #2
    7840:	067c0900 	ldrbteq	r0, [ip], -r0, lsl #18
    7844:	000000a3 	andeq	r0, r0, r3, lsr #1
    7848:	04110004 	ldreq	r0, [r1], #-4
    784c:	00000065 	andeq	r0, r0, r5, rrx
    7850:	0003b20f 	andeq	fp, r3, pc, lsl #4
    7854:	ba096800 	blt	26185c <__ccfg+0x2418b4>
    7858:	00047808 	andeq	r7, r4, r8, lsl #16
    785c:	705f1000 	subsvc	r1, pc, r0
    7860:	12bb0900 	adcsne	r0, fp, #0, 18
    7864:	0000032f 	andeq	r0, r0, pc, lsr #6
    7868:	725f1000 	subsvc	r1, pc, #0
    786c:	07bc0900 	ldreq	r0, [ip, r0, lsl #18]!
    7870:	000000a3 	andeq	r0, r0, r3, lsr #1
    7874:	775f1004 	ldrbvc	r1, [pc, -r4]
    7878:	07bd0900 	ldreq	r0, [sp, r0, lsl #18]!
    787c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7880:	01e90d08 	mvneq	r0, r8, lsl #26
    7884:	be090000 	cdplt	0, 0, cr0, cr9, cr0, {0}
    7888:	00004409 	andeq	r4, r0, r9, lsl #8
    788c:	5e0d0c00 	cdppl	12, 0, cr0, cr13, cr0, {0}
    7890:	09000006 	stmdbeq	r0, {r1, r2}
    7894:	004409bf 	strheq	r0, [r4], #-159	; 0xffffff61
    7898:	100e0000 	andne	r0, lr, r0
    789c:	0066625f 	rsbeq	r6, r6, pc, asr r2
    78a0:	0711c009 	ldreq	ip, [r1, -r9]
    78a4:	10000003 	andne	r0, r0, r3
    78a8:	0001e00d 	andeq	lr, r1, sp
    78ac:	07c10900 	strbeq	r0, [r1, r0, lsl #18]
    78b0:	000000a3 	andeq	r0, r0, r3, lsr #1
    78b4:	02740d18 	rsbseq	r0, r4, #24, 26	; 0x600
    78b8:	c8090000 	stmdagt	r9, {}	; <UNPREDICTABLE>
    78bc:	0001380a 	andeq	r3, r1, sl, lsl #16
    78c0:	510d1c00 	tstpl	sp, r0, lsl #24
    78c4:	09000018 	stmdbeq	r0, {r3, r4}
    78c8:	05fd1dca 	ldrbeq	r1, [sp, #3530]!	; 0xdca
    78cc:	0d200000 	stceq	0, cr0, [r0, #-0]
    78d0:	00001818 	andeq	r1, r0, r8, lsl r8
    78d4:	281dcc09 	ldmdacs	sp, {r0, r3, sl, fp, lr, pc}
    78d8:	24000006 	strcs	r0, [r0], #-6
    78dc:	000a430d 	andeq	r4, sl, sp, lsl #6
    78e0:	0dcf0900 	vstreq.16	s1, [pc]	; 78e8 <__exidx_end+0x29bc>	; <UNPREDICTABLE>
    78e4:	0000064d 	andeq	r0, r0, sp, asr #12
    78e8:	18060d28 	stmdane	r6, {r3, r5, r8, sl, fp}
    78ec:	d0090000 	andle	r0, r9, r0
    78f0:	00066809 	andeq	r6, r6, r9, lsl #16
    78f4:	5f102c00 	svcpl	0x00102c00
    78f8:	09006275 	stmdbeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    78fc:	030711d3 	movweq	r1, #29139	; 0x71d3
    7900:	10300000 	eorsne	r0, r0, r0
    7904:	0070755f 	rsbseq	r7, r0, pc, asr r5
    7908:	2f12d409 	svccs	0x0012d409
    790c:	38000003 	stmdacc	r0, {r0, r1}
    7910:	72755f10 	rsbsvc	r5, r5, #16, 30	; 0x40
    7914:	07d50900 	ldrbeq	r0, [r5, r0, lsl #18]
    7918:	000000a3 	andeq	r0, r0, r3, lsr #1
    791c:	0a5a0d3c 	beq	168ae14 <__ccfg+0x166ae6c>
    7920:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    7924:	00066e11 	andeq	r6, r6, r1, lsl lr
    7928:	e90d4000 	stmdb	sp, {lr}
    792c:	09000009 	stmdbeq	r0, {r0, r3}
    7930:	067e11d9 			; <UNDEFINED> instruction: 0x067e11d9
    7934:	10430000 	subne	r0, r3, r0
    7938:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    793c:	0711dc09 	ldreq	sp, [r1, -r9, lsl #24]
    7940:	44000003 	strmi	r0, [r0], #-3
    7944:	0008530d 	andeq	r5, r8, sp, lsl #6
    7948:	07df0900 	ldrbeq	r0, [pc, r0, lsl #18]
    794c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7950:	03ff0d4c 	mvnseq	r0, #76, 26	; 0x1300
    7954:	e0090000 	and	r0, r9, r0
    7958:	0000be0a 	andeq	fp, r0, sl, lsl #28
    795c:	200d5000 	andcs	r5, sp, r0
    7960:	09000043 	stmdbeq	r0, {r0, r1, r6}
    7964:	049712e3 	ldreq	r1, [r7], #739	; 0x2e3
    7968:	0d540000 	ldcleq	0, cr0, [r4, #-0]
    796c:	0000086b 	andeq	r0, r0, fp, ror #16
    7970:	520ce709 	andpl	lr, ip, #2359296	; 0x240000
    7974:	58000001 	stmdapl	r0, {r0}
    7978:	00078e0d 	andeq	r8, r7, sp, lsl #28
    797c:	0ee90900 	vfmaeq.f16	s1, s18, s0	; <UNPREDICTABLE>
    7980:	0000012c 	andeq	r0, r0, ip, lsr #2
    7984:	0a150d5c 	beq	54aefc <__ccfg+0x52af54>
    7988:	ea090000 	b	247990 <__ccfg+0x2279e8>
    798c:	0000a309 	andeq	sl, r0, r9, lsl #6
    7990:	15006400 	strne	r6, [r0, #-1024]	; 0xfffffc00
    7994:	0000a301 	andeq	sl, r0, r1, lsl #6
    7998:	00049700 	andeq	r9, r4, r0, lsl #14
    799c:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    79a0:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    79a4:	16000001 	strne	r0, [r0], -r1
    79a8:	000005eb 	andeq	r0, r0, fp, ror #11
    79ac:	0000a316 	andeq	sl, r0, r6, lsl r3
    79b0:	04110000 	ldreq	r0, [r1], #-0
    79b4:	000004a2 	andeq	r0, r0, r2, lsr #9
    79b8:	00049704 	andeq	r9, r4, r4, lsl #14
    79bc:	435e1700 	cmpmi	lr, #0, 14
    79c0:	04280000 	strteq	r0, [r8], #-0
    79c4:	08026509 	stmdaeq	r2, {r0, r3, r8, sl, sp, lr}
    79c8:	000005eb 	andeq	r0, r0, fp, ror #11
    79cc:	0006f418 	andeq	pc, r6, r8, lsl r4	; <UNPREDICTABLE>
    79d0:	02670900 	rsbeq	r0, r7, #0, 18
    79d4:	0000a307 	andeq	sl, r0, r7, lsl #6
    79d8:	ce180000 	cdpgt	0, 1, cr0, cr8, cr0, {0}
    79dc:	09000005 	stmdbeq	r0, {r0, r2}
    79e0:	da0b026c 	ble	2c8398 <__ccfg+0x2a83f0>
    79e4:	04000006 	streq	r0, [r0], #-6
    79e8:	00025518 	andeq	r5, r2, r8, lsl r5
    79ec:	026c0900 	rsbeq	r0, ip, #0, 18
    79f0:	0006da14 	andeq	sp, r6, r4, lsl sl
    79f4:	49180800 	ldmdbmi	r8, {fp}
    79f8:	0900000a 	stmdbeq	r0, {r1, r3}
    79fc:	da1e026c 	ble	7883b4 <__ccfg+0x76840c>
    7a00:	0c000006 	stceq	0, cr0, [r0], {6}
    7a04:	00045d18 	andeq	r5, r4, r8, lsl sp
    7a08:	026e0900 	rsbeq	r0, lr, #0, 18
    7a0c:	0000a308 	andeq	sl, r0, r8, lsl #6
    7a10:	0f181000 	svceq	0x00181000
    7a14:	09000004 	stmdbeq	r0, {r2}
    7a18:	da08026f 	ble	2083dc <__ccfg+0x1e8434>
    7a1c:	14000008 	strne	r0, [r0], #-8
    7a20:	0009fc18 	andeq	pc, r9, r8, lsl ip	; <UNPREDICTABLE>
    7a24:	02720900 	rsbseq	r0, r2, #0, 18
    7a28:	0000a307 	andeq	sl, r0, r7, lsl #6
    7a2c:	4e183000 	cdpmi	0, 1, cr3, cr8, cr0, {0}
    7a30:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
    7a34:	f0160273 			; <UNDEFINED> instruction: 0xf0160273
    7a38:	34000008 	strcc	r0, [r0], #-8
    7a3c:	0005a118 	andeq	sl, r5, r8, lsl r1
    7a40:	02750900 	rsbseq	r0, r5, #0, 18
    7a44:	0000a307 	andeq	sl, r0, r7, lsl #6
    7a48:	9b183800 	blls	615a50 <__ccfg+0x5f5aa8>
    7a4c:	09000006 	stmdbeq	r0, {r1, r2}
    7a50:	020a0277 	andeq	r0, sl, #1879048199	; 0x70000007
    7a54:	3c000009 	stccc	0, cr0, [r0], {9}
    7a58:	0002cc18 	andeq	ip, r2, r8, lsl ip
    7a5c:	027a0900 	rsbseq	r0, sl, #0, 18
    7a60:	0001b813 	andeq	fp, r1, r3, lsl r8
    7a64:	78184000 	ldmdavc	r8, {lr}
    7a68:	09000003 	stmdbeq	r0, {r0, r1}
    7a6c:	a307027b 	movwge	r0, #29307	; 0x727b
    7a70:	44000000 	strmi	r0, [r0], #-0
    7a74:	0004b218 	andeq	fp, r4, r8, lsl r2
    7a78:	027c0900 	rsbseq	r0, ip, #0, 18
    7a7c:	0001b813 	andeq	fp, r1, r3, lsl r8
    7a80:	06184800 	ldreq	r4, [r8], -r0, lsl #16
    7a84:	09000006 	stmdbeq	r0, {r1, r2}
    7a88:	0814027d 	ldmdaeq	r4, {r0, r2, r3, r4, r5, r6, r9}
    7a8c:	4c000009 	stcmi	0, cr0, [r0], {9}
    7a90:	00083918 	andeq	r3, r8, r8, lsl r9
    7a94:	02800900 	addeq	r0, r0, #0, 18
    7a98:	0000a307 	andeq	sl, r0, r7, lsl #6
    7a9c:	d0185000 	andsle	r5, r8, r0
    7aa0:	09000008 	stmdbeq	r0, {r3}
    7aa4:	eb090281 	bl	2484b0 <__ccfg+0x228508>
    7aa8:	54000005 	strpl	r0, [r0], #-5
    7aac:	0008ea18 	andeq	lr, r8, r8, lsl sl
    7ab0:	02a40900 	adceq	r0, r4, #0, 18
    7ab4:	0008b507 	andeq	fp, r8, r7, lsl #10
    7ab8:	86195800 	ldrhi	r5, [r9], -r0, lsl #16
    7abc:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7ac0:	e91302a8 	ldmdb	r3, {r3, r5, r7, r9}
    7ac4:	48000002 	stmdami	r0, {r1}
    7ac8:	052e1901 	streq	r1, [lr, #-2305]!	; 0xfffff6ff
    7acc:	a9090000 	stmdbge	r9, {}	; <UNPREDICTABLE>
    7ad0:	02a61202 	adceq	r1, r6, #536870912	; 0x20000000
    7ad4:	014c0000 	mrseq	r0, (UNDEF: 76)
    7ad8:	00051519 	andeq	r1, r5, r9, lsl r5
    7adc:	02ad0900 	adceq	r0, sp, #0, 18
    7ae0:	00091a0c 	andeq	r1, r9, ip, lsl #20
    7ae4:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
    7ae8:	0000094d 	andeq	r0, r0, sp, asr #18
    7aec:	1002b209 	andne	fp, r2, r9, lsl #4
    7af0:	0000069b 	muleq	r0, fp, r6
    7af4:	c71902e0 	ldrgt	r0, [r9, -r0, ror #5]
    7af8:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7afc:	260a02b4 			; <UNDEFINED> instruction: 0x260a02b4
    7b00:	ec000009 	stc	0, cr0, [r0], {9}
    7b04:	04110002 	ldreq	r0, [r1], #-2
    7b08:	000005f1 	strdeq	r0, [r0], -r1
    7b0c:	e1080103 	tst	r8, r3, lsl #2
    7b10:	04000008 	streq	r0, [r0], #-8
    7b14:	000005f1 	strdeq	r0, [r0], -r1
    7b18:	04780411 	ldrbteq	r0, [r8], #-1041	; 0xfffffbef
    7b1c:	01150000 	tsteq	r5, r0
    7b20:	000000a3 	andeq	r0, r0, r3, lsr #1
    7b24:	00000622 	andeq	r0, r0, r2, lsr #12
    7b28:	00049716 	andeq	r9, r4, r6, lsl r7
    7b2c:	01381600 	teqeq	r8, r0, lsl #12
    7b30:	22160000 	andscs	r0, r6, #0
    7b34:	16000006 	strne	r0, [r0], -r6
    7b38:	000000a3 	andeq	r0, r0, r3, lsr #1
    7b3c:	f8041100 			; <UNDEFINED> instruction: 0xf8041100
    7b40:	11000005 	tstne	r0, r5
    7b44:	00060304 	andeq	r0, r6, r4, lsl #6
    7b48:	ca011500 	bgt	4cf50 <__ccfg+0x2cfa8>
    7b4c:	4d000000 	stcmi	0, cr0, [r0, #-0]
    7b50:	16000006 	strne	r0, [r0], -r6
    7b54:	00000497 	muleq	r0, r7, r4
    7b58:	00013816 	andeq	r3, r1, r6, lsl r8
    7b5c:	00ca1600 	sbceq	r1, sl, r0, lsl #12
    7b60:	a3160000 	tstge	r6, #0
    7b64:	00000000 	andeq	r0, r0, r0
    7b68:	062e0411 			; <UNDEFINED> instruction: 0x062e0411
    7b6c:	01150000 	tsteq	r5, r0
    7b70:	000000a3 	andeq	r0, r0, r3, lsr #1
    7b74:	00000668 	andeq	r0, r0, r8, ror #12
    7b78:	00049716 	andeq	r9, r4, r6, lsl r7
    7b7c:	01381600 	teqeq	r8, r0, lsl #12
    7b80:	11000000 	mrsne	r0, (UNDEF: 0)
    7b84:	00065304 	andeq	r5, r6, r4, lsl #6
    7b88:	00650a00 	rsbeq	r0, r5, r0, lsl #20
    7b8c:	067e0000 	ldrbteq	r0, [lr], -r0
    7b90:	aa0b0000 	bge	2c7b98 <__ccfg+0x2a7bf0>
    7b94:	02000000 	andeq	r0, r0, #0
    7b98:	00650a00 	rsbeq	r0, r5, r0, lsl #20
    7b9c:	068e0000 	streq	r0, [lr], r0
    7ba0:	aa0b0000 	bge	2c7ba8 <__ccfg+0x2a7c00>
    7ba4:	00000000 	andeq	r0, r0, r0
    7ba8:	03ed0700 	mvneq	r0, #0, 14
    7bac:	24090000 	strcs	r0, [r9], #-0
    7bb0:	03351a01 	teqeq	r5, #4096	; 0x1000
    7bb4:	741a0000 	ldrvc	r0, [sl], #-0
    7bb8:	0c000043 	stceq	0, cr0, [r0], {67}	; 0x43
    7bbc:	08012809 	stmdaeq	r1, {r0, r3, fp, sp}
    7bc0:	000006d4 	ldrdeq	r0, [r0], -r4
    7bc4:	000a3218 	andeq	r3, sl, r8, lsl r2
    7bc8:	012a0900 			; <UNDEFINED> instruction: 0x012a0900
    7bcc:	0006d411 	andeq	sp, r6, r1, lsl r4
    7bd0:	8b180000 	blhi	607bd8 <__ccfg+0x5e7c30>
    7bd4:	09000008 	stmdbeq	r0, {r3}
    7bd8:	a307012b 	movwge	r0, #28971	; 0x712b
    7bdc:	04000000 	streq	r0, [r0], #-0
    7be0:	00058d18 	andeq	r8, r5, r8, lsl sp
    7be4:	012c0900 			; <UNDEFINED> instruction: 0x012c0900
    7be8:	0006da0b 	andeq	sp, r6, fp, lsl #20
    7bec:	11000800 	tstne	r0, r0, lsl #16
    7bf0:	00069b04 	andeq	r9, r6, r4, lsl #22
    7bf4:	8e041100 	adfhis	f1, f4, f0
    7bf8:	1a000006 	bne	7c18 <__exidx_end+0x2cec>
    7bfc:	00000364 	andeq	r0, r0, r4, ror #6
    7c00:	0144090e 	cmpeq	r4, lr, lsl #18
    7c04:	00071908 	andeq	r1, r7, r8, lsl #18
    7c08:	117a1800 	cmnne	sl, r0, lsl #16
    7c0c:	45090000 	strmi	r0, [r9, #-0]
    7c10:	07191201 	ldreq	r1, [r9, -r1, lsl #4]
    7c14:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7c18:	00000618 	andeq	r0, r0, r8, lsl r6
    7c1c:	12014609 	andne	r4, r1, #9437184	; 0x900000
    7c20:	00000719 	andeq	r0, r0, r9, lsl r7
    7c24:	101f1806 	andsne	r1, pc, r6, lsl #16
    7c28:	47090000 	strmi	r0, [r9, -r0]
    7c2c:	00781201 	rsbseq	r1, r8, r1, lsl #4
    7c30:	000c0000 	andeq	r0, ip, r0
    7c34:	0000780a 	andeq	r7, r0, sl, lsl #16
    7c38:	00072900 	andeq	r2, r7, r0, lsl #18
    7c3c:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    7c40:	00020000 	andeq	r0, r2, r0
    7c44:	8509d01b 	strhi	sp, [r9, #-27]	; 0xffffffe5
    7c48:	083e0702 	ldmdaeq	lr!, {r1, r8, r9, sl}
    7c4c:	ef180000 	svc	0x00180000
    7c50:	09000009 	stmdbeq	r0, {r0, r3}
    7c54:	aa180287 	bge	608678 <__ccfg+0x5e86d0>
    7c58:	00000000 	andeq	r0, r0, r0
    7c5c:	00095518 	andeq	r5, r9, r8, lsl r5
    7c60:	02880900 	addeq	r0, r8, #0, 18
    7c64:	0005eb12 	andeq	lr, r5, r2, lsl fp
    7c68:	a5180400 	ldrge	r0, [r8, #-1024]	; 0xfffffc00
    7c6c:	09000003 	stmdbeq	r0, {r0, r1}
    7c70:	3e100289 	cdpcc	2, 1, cr0, cr0, cr9, {4}
    7c74:	08000008 	stmdaeq	r0, {r3}
    7c78:	00081818 	andeq	r1, r8, r8, lsl r8
    7c7c:	028a0900 	addeq	r0, sl, #0, 18
    7c80:	0001ce17 	andeq	ip, r1, r7, lsl lr
    7c84:	d5182400 	ldrle	r2, [r8, #-1024]	; 0xfffffc00
    7c88:	09000005 	stmdbeq	r0, {r0, r2}
    7c8c:	a30f028b 	movwge	r0, #62091	; 0xf28b
    7c90:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    7c94:	000a2d18 	andeq	r2, sl, r8, lsl sp
    7c98:	028c0900 	addeq	r0, ip, #0, 18
    7c9c:	00009c2c 	andeq	r9, r0, ip, lsr #24
    7ca0:	85185000 	ldrhi	r5, [r8, #-0]
    7ca4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7ca8:	e01a028d 	ands	r0, sl, sp, lsl #5
    7cac:	58000006 	stmdapl	r0, {r1, r2}
    7cb0:	0004ea18 	andeq	lr, r4, r8, lsl sl
    7cb4:	028e0900 	addeq	r0, lr, #0, 18
    7cb8:	00012c16 	andeq	r2, r1, r6, lsl ip
    7cbc:	62186800 	andsvs	r6, r8, #0, 16
    7cc0:	09000009 	stmdbeq	r0, {r0, r3}
    7cc4:	2c16028f 	lfmcs	f0, 4, [r6], {143}	; 0x8f
    7cc8:	70000001 	andvc	r0, r0, r1
    7ccc:	00006f18 	andeq	r6, r0, r8, lsl pc
    7cd0:	02900900 	addseq	r0, r0, #0, 18
    7cd4:	00012c16 	andeq	r2, r1, r6, lsl ip
    7cd8:	49187800 	ldmdbmi	r8, {fp, ip, sp, lr}
    7cdc:	09000008 	stmdbeq	r0, {r3}
    7ce0:	4e100291 	mrcmi	2, 0, r0, cr0, cr1, {4}
    7ce4:	80000008 	andhi	r0, r0, r8
    7ce8:	00038218 	andeq	r8, r3, r8, lsl r2
    7cec:	02920900 	addseq	r0, r2, #0, 18
    7cf0:	00085e10 	andeq	r5, r8, r0, lsl lr
    7cf4:	0d188800 	ldceq	8, cr8, [r8, #-0]
    7cf8:	09000009 	stmdbeq	r0, {r0, r3}
    7cfc:	a30f0293 	movwge	r0, #62099	; 0xf293
    7d00:	a0000000 	andge	r0, r0, r0
    7d04:	00022918 	andeq	r2, r2, r8, lsl r9
    7d08:	02940900 	addseq	r0, r4, #0, 18
    7d0c:	00012c16 	andeq	r2, r1, r6, lsl ip
    7d10:	1f18a400 	svcne	0x0018a400
    7d14:	09000005 	stmdbeq	r0, {r0, r2}
    7d18:	2c160295 	lfmcs	f0, 4, [r6], {149}	; 0x95
    7d1c:	ac000001 	stcge	0, cr0, [r0], {1}
    7d20:	00046718 	andeq	r6, r4, r8, lsl r7
    7d24:	02960900 	addseq	r0, r6, #0, 18
    7d28:	00012c16 	andeq	r2, r1, r6, lsl ip
    7d2c:	4f18b400 	svcmi	0x0018b400
    7d30:	09000006 	stmdbeq	r0, {r1, r2}
    7d34:	2c160297 	lfmcs	f0, 4, [r6], {151}	; 0x97
    7d38:	bc000001 	stclt	0, cr0, [r0], {1}
    7d3c:	0004d918 	andeq	sp, r4, r8, lsl r9
    7d40:	02980900 	addseq	r0, r8, #0, 18
    7d44:	00012c16 	andeq	r2, r1, r6, lsl ip
    7d48:	f218c400 	vshl.s16	d12, d0, d8
    7d4c:	09000006 	stmdbeq	r0, {r1, r2}
    7d50:	a3080299 	movwge	r0, #33433	; 0x8299
    7d54:	cc000000 	stcgt	0, cr0, [r0], {-0}
    7d58:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    7d5c:	084e0000 	stmdaeq	lr, {}^	; <UNPREDICTABLE>
    7d60:	aa0b0000 	bge	2c7d68 <__ccfg+0x2a7dc0>
    7d64:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    7d68:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    7d6c:	085e0000 	ldmdaeq	lr, {}^	; <UNPREDICTABLE>
    7d70:	aa0b0000 	bge	2c7d78 <__ccfg+0x2a7dd0>
    7d74:	07000000 	streq	r0, [r0, -r0]
    7d78:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    7d7c:	086e0000 	stmdaeq	lr!, {}^	; <UNPREDICTABLE>
    7d80:	aa0b0000 	bge	2c7d88 <__ccfg+0x2a7de0>
    7d84:	17000000 	strne	r0, [r0, -r0]
    7d88:	09f01b00 	ldmibeq	r0!, {r8, r9, fp, ip}^
    7d8c:	9507029e 	strls	r0, [r7, #-670]	; 0xfffffd62
    7d90:	18000008 	stmdane	r0, {r3}
    7d94:	0000035d 	andeq	r0, r0, sp, asr r3
    7d98:	1b02a109 	blne	b01c4 <__ccfg+0x9021c>
    7d9c:	00000895 	muleq	r0, r5, r8
    7da0:	0a511800 	beq	144dda8 <__ccfg+0x142de00>
    7da4:	a2090000 	andge	r0, r9, #0
    7da8:	08a51802 	stmiaeq	r5!, {r1, fp, ip}
    7dac:	00780000 	rsbseq	r0, r8, r0
    7db0:	00032f0a 	andeq	r2, r3, sl, lsl #30
    7db4:	0008a500 	andeq	sl, r8, r0, lsl #10
    7db8:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    7dbc:	001d0000 	andseq	r0, sp, r0
    7dc0:	0000aa0a 	andeq	sl, r0, sl, lsl #20
    7dc4:	0008b500 	andeq	fp, r8, r0, lsl #10
    7dc8:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    7dcc:	001d0000 	andseq	r0, sp, r0
    7dd0:	8309f01c 	movwhi	pc, #36892	; 0x901c	; <UNPREDICTABLE>
    7dd4:	08da0302 	ldmeq	sl, {r1, r8, r9}^
    7dd8:	5e1d0000 	cdppl	0, 1, cr0, cr13, cr0, {0}
    7ddc:	09000043 	stmdbeq	r0, {r0, r1, r6}
    7de0:	290b029a 	stmdbcs	fp, {r1, r3, r4, r7, r9}
    7de4:	1d000007 	stcne	0, cr0, [r0, #-28]	; 0xffffffe4
    7de8:	00000827 	andeq	r0, r0, r7, lsr #16
    7dec:	0b02a309 	bleq	b0a18 <__ccfg+0x90a70>
    7df0:	0000086e 	andeq	r0, r0, lr, ror #16
    7df4:	05f10a00 	ldrbeq	r0, [r1, #2560]!	; 0xa00
    7df8:	08ea0000 	stmiaeq	sl!, {}^	; <UNPREDICTABLE>
    7dfc:	aa0b0000 	bge	2c7e04 <__ccfg+0x2a7e5c>
    7e00:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7e04:	0a381e00 	beq	e0f60c <__ccfg+0xdef664>
    7e08:	11010000 	mrsne	r0, (UNDEF: 1)
    7e0c:	0008ea04 	andeq	lr, r8, r4, lsl #20
    7e10:	02011f00 	andeq	r1, r1, #0, 30
    7e14:	16000009 	strne	r0, [r0], -r9
    7e18:	00000497 	muleq	r0, r7, r4
    7e1c:	f6041100 			; <UNDEFINED> instruction: 0xf6041100
    7e20:	11000008 	tstne	r0, r8
    7e24:	0001b804 	andeq	fp, r1, r4, lsl #16
    7e28:	1a011f00 	bne	4fa30 <__ccfg+0x2fa88>
    7e2c:	16000009 	strne	r0, [r0], -r9
    7e30:	000000a3 	andeq	r0, r0, r3, lsr #1
    7e34:	20041100 	andcs	r1, r4, r0, lsl #2
    7e38:	11000009 	tstne	r0, r9
    7e3c:	00090e04 	andeq	r0, r9, r4, lsl #28
    7e40:	068e0a00 	streq	r0, [lr], r0, lsl #20
    7e44:	09360000 	ldmdbeq	r6!, {}	; <UNPREDICTABLE>
    7e48:	aa0b0000 	bge	2c7e50 <__ccfg+0x2a7ea8>
    7e4c:	02000000 	andeq	r0, r0, #0
    7e50:	07f42000 	ldrbeq	r2, [r4, r0]!
    7e54:	33090000 	movwcc	r0, #36864	; 0x9000
    7e58:	04971703 	ldreq	r1, [r7], #1795	; 0x703
    7e5c:	01010000 	mrseq	r0, (UNDEF: 1)
    7e60:	0007ed20 	andeq	lr, r7, r0, lsr #26
    7e64:	03340900 	teqeq	r4, #0, 18
    7e68:	00049d1d 	andeq	r9, r4, sp, lsl sp
    7e6c:	02010100 	andeq	r0, r1, #0, 2
    7e70:	00001fa2 	andeq	r1, r0, r2, lsr #31
    7e74:	7f123b0b 	svcvc	0x00123b0b
    7e78:	0c000000 	stceq	0, cr0, [r0], {-0}
    7e7c:	09400b08 	stmdbeq	r0, {r3, r8, r9, fp}^
    7e80:	00000984 	andeq	r0, r0, r4, lsl #19
    7e84:	001ab90d 	andseq	fp, sl, sp, lsl #18
    7e88:	0d410b00 	vstreq	d16, [r1, #-0]
    7e8c:	00000984 	andeq	r0, r0, r4, lsl #19
    7e90:	1ce90d00 	stclne	13, cr0, [r9]
    7e94:	420b0000 	andmi	r0, fp, #0
    7e98:	0009840d 	andeq	r8, r9, sp, lsl #8
    7e9c:	11000400 	tstne	r0, r0, lsl #8
    7ea0:	00005904 	andeq	r5, r0, r4, lsl #18
    7ea4:	21f50200 	mvnscs	r0, r0, lsl #4
    7ea8:	430b0000 	movwmi	r0, #45056	; 0xb000
    7eac:	00096003 	andeq	r6, r9, r3
    7eb0:	1d6a0200 	sfmne	f0, 2, [sl, #-0]
    7eb4:	3c0c0000 	stccc	0, cr0, [ip], {-0}
    7eb8:	0009a22b 	andeq	sl, r9, fp, lsr #4
    7ebc:	20080f00 	andcs	r0, r8, r0, lsl #30
    7ec0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    7ec4:	09fe156f 	ldmibeq	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, ip}^
    7ec8:	e80d0000 	stmda	sp, {}	; <UNPREDICTABLE>
    7ecc:	0c000019 	stceq	0, cr0, [r0], {25}
    7ed0:	006c0d70 	rsbeq	r0, ip, r0, ror sp
    7ed4:	0d000000 	stceq	0, cr0, [r0, #-0]
    7ed8:	00000593 	muleq	r0, r3, r5
    7edc:	6c0d710c 	stfvss	f7, [sp], {12}
    7ee0:	02000000 	andeq	r0, r0, #0
    7ee4:	001d480d 	andseq	r4, sp, sp, lsl #16
    7ee8:	13740c00 	cmnne	r4, #0, 24
    7eec:	00000bc0 	andeq	r0, r0, r0, asr #23
    7ef0:	1ae00d04 	bne	ff80b308 <_estack+0xdf806308>
    7ef4:	750c0000 	strvc	r0, [ip, #-0]
    7ef8:	0009540c 	andeq	r5, r9, ip, lsl #8
    7efc:	780d0800 	stmdavc	sp, {fp}
    7f00:	0c00001d 	stceq	0, cr0, [r0], {29}
    7f04:	0b4c067d 	bleq	1309900 <__ccfg+0x12e9958>
    7f08:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7f0c:	00001cc2 	andeq	r1, r0, r2, asr #25
    7f10:	9606810c 	strls	r8, [r6], -ip, lsl #2
    7f14:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    7f18:	1b540200 	blne	1508720 <__ccfg+0x14e8778>
    7f1c:	3f0c0000 	svccc	0x000c0000
    7f20:	000a0a2a 	andeq	r0, sl, sl, lsr #20
    7f24:	1b470f00 	blne	11cbb2c <__ccfg+0x11abb84>
    7f28:	0c180000 	ldceq	0, cr0, [r8], {-0}
    7f2c:	0ac115e0 	beq	ff04d6b4 <_estack+0xdf0486b4>
    7f30:	e80d0000 	stmda	sp, {}	; <UNPREDICTABLE>
    7f34:	0c000019 	stceq	0, cr0, [r0], {25}
    7f38:	006c0de1 	rsbeq	r0, ip, r1, ror #27
    7f3c:	0d000000 	stceq	0, cr0, [r0, #-0]
    7f40:	00000593 	muleq	r0, r3, r5
    7f44:	6c0de20c 	sfmvs	f6, 1, [sp], {12}
    7f48:	02000000 	andeq	r0, r0, #0
    7f4c:	001d480d 	andseq	r4, sp, sp, lsl #16
    7f50:	13e50c00 	mvnne	r0, #0, 24
    7f54:	00000bc0 	andeq	r0, r0, r0, asr #23
    7f58:	1ae00d04 	bne	ff80b370 <_estack+0xdf806370>
    7f5c:	e60c0000 	str	r0, [ip], -r0
    7f60:	0009540c 	andeq	r5, r9, ip, lsl #8
    7f64:	780d0800 	stmdavc	sp, {fp}
    7f68:	0c00001d 	stceq	0, cr0, [r0], {29}
    7f6c:	0bcc06ee 	bleq	ff309b2c <_estack+0xdf304b2c>
    7f70:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7f74:	00001cc2 	andeq	r1, r0, r2, asr #25
    7f78:	1606f20c 	strne	pc, [r6], -ip, lsl #4
    7f7c:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    7f80:	00211b0d 	eoreq	r1, r1, sp, lsl #22
    7f84:	0df30c00 	ldcleq	12, cr0, [r3]
    7f88:	0000006c 	andeq	r0, r0, ip, rrx
    7f8c:	1e6b0d0e 	cdpne	13, 6, cr0, cr11, cr14, {0}
    7f90:	f40c0000 	vst4.8	{d0-d3}, [ip], r0
    7f94:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7f98:	870d1000 	strhi	r1, [sp, -r0]
    7f9c:	0c00001b 	stceq	0, cr0, [r0], {27}
    7fa0:	0c4006fa 	mcrreq	6, 15, r0, r0, cr10
    7fa4:	0d120000 	ldceq	0, cr0, [r2, #-0]
    7fa8:	00001d28 	andeq	r1, r0, r8, lsr #26
    7fac:	590cfb0c 	stmdbpl	ip, {r2, r3, r8, r9, fp, ip, sp, lr, pc}
    7fb0:	13000000 	movwne	r0, #0
    7fb4:	0020770d 	eoreq	r7, r0, sp, lsl #14
    7fb8:	0cfc0c00 	ldcleq	12, cr0, [ip]
    7fbc:	00000059 	andeq	r0, r0, r9, asr r0
    7fc0:	20800d14 	addcs	r0, r0, r4, lsl sp
    7fc4:	fd0c0000 	stc2	0, cr0, [ip, #-0]
    7fc8:	0000590c 	andeq	r5, r0, ip, lsl #18
    7fcc:	890d1500 	stmdbhi	sp, {r8, sl, ip}
    7fd0:	0c000020 	stceq	0, cr0, [r0], {32}
    7fd4:	006c0dfe 	strdeq	r0, [ip], #-222	; 0xffffff22	; <UNPREDICTABLE>
    7fd8:	00160000 	andseq	r0, r6, r0
    7fdc:	00219602 	eoreq	r9, r1, r2, lsl #12
    7fe0:	36440c00 	strbcc	r0, [r4], -r0, lsl #24
    7fe4:	00000acd 	andeq	r0, r0, sp, asr #21
    7fe8:	00217d1a 	eoreq	r7, r1, sl, lsl sp
    7fec:	9f0c1400 	svcls	0x000c1400
    7ff0:	0b4c1501 	bleq	130d3fc <__ccfg+0x12ed454>
    7ff4:	e8180000 	ldmda	r8, {}	; <UNPREDICTABLE>
    7ff8:	0c000019 	stceq	0, cr0, [r0], {25}
    7ffc:	6c0d01a0 	stfvss	f0, [sp], {160}	; 0xa0
    8000:	00000000 	andeq	r0, r0, r0
    8004:	00059318 	andeq	r9, r5, r8, lsl r3
    8008:	01a10c00 			; <UNDEFINED> instruction: 0x01a10c00
    800c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8010:	48180200 	ldmdami	r8, {r9}
    8014:	0c00001d 	stceq	0, cr0, [r0], {29}
    8018:	c01301a4 	andsgt	r0, r3, r4, lsr #3
    801c:	0400000b 	streq	r0, [r0], #-11
    8020:	001ae018 	andseq	lr, sl, r8, lsl r0
    8024:	01a50c00 			; <UNDEFINED> instruction: 0x01a50c00
    8028:	0009540c 	andeq	r5, r9, ip, lsl #8
    802c:	78180800 	ldmdavc	r8, {fp}
    8030:	0c00001d 	stceq	0, cr0, [r0], {29}
    8034:	6a0601ad 	bvs	1886f0 <__ccfg+0x168748>
    8038:	0c00000c 	stceq	0, cr0, [r0], {12}
    803c:	001cc218 	andseq	ip, ip, r8, lsl r2
    8040:	01b10c00 			; <UNDEFINED> instruction: 0x01b10c00
    8044:	000cb906 	andeq	fp, ip, r6, lsl #18
    8048:	28180d00 	ldmdacs	r8, {r8, sl, fp}
    804c:	0c00001d 	stceq	0, cr0, [r0], {29}
    8050:	6c0d01b2 	stfvss	f0, [sp], {178}	; 0xb2
    8054:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8058:	001c1618 	andseq	r1, ip, r8, lsl r6
    805c:	01b30c00 			; <UNDEFINED> instruction: 0x01b30c00
    8060:	0009540c 	andeq	r5, r9, ip, lsl #8
    8064:	0c001000 	stceq	0, cr1, [r0], {-0}
    8068:	04760c01 	ldrbteq	r0, [r6], #-3073	; 0xfffff3ff
    806c:	00000b96 	muleq	r0, r6, fp
    8070:	00223b21 	eoreq	r3, r2, r1, lsr #22
    8074:	0f770c00 	svceq	0x00770c00
    8078:	00000059 	andeq	r0, r0, r9, asr r0
    807c:	00040401 	andeq	r0, r4, r1, lsl #8
    8080:	001bc921 	andseq	ip, fp, r1, lsr #18
    8084:	0f780c00 	svceq	0x00780c00
    8088:	00000059 	andeq	r0, r0, r9, asr r0
    808c:	00030101 	andeq	r0, r3, r1, lsl #2
    8090:	001c8921 	andseq	r8, ip, r1, lsr #18
    8094:	0f7a0c00 	svceq	0x007a0c00
    8098:	00000059 	andeq	r0, r0, r9, asr r0
    809c:	00010201 	andeq	r0, r1, r1, lsl #4
    80a0:	001a5721 	andseq	r5, sl, r1, lsr #14
    80a4:	0f7b0c00 	svceq	0x007b0c00
    80a8:	00000059 	andeq	r0, r0, r9, asr r0
    80ac:	00000101 	andeq	r0, r0, r1, lsl #2
    80b0:	0c010c00 	stceq	12, cr0, [r1], {-0}
    80b4:	0bc0047e 	bleq	ff0092b4 <_estack+0xdf0042b4>
    80b8:	a5210000 	strge	r0, [r1, #-0]!
    80bc:	0c000020 	stceq	0, cr0, [r0], {32}
    80c0:	00590f7f 	subseq	r0, r9, pc, ror pc
    80c4:	04010000 	streq	r0, [r1], #-0
    80c8:	01210004 			; <UNDEFINED> instruction: 0x01210004
    80cc:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    80d0:	00590f80 	subseq	r0, r9, r0, lsl #31
    80d4:	04010000 	streq	r0, [r1], #-0
    80d8:	11000000 	mrsne	r0, (UNDEF: 0)
    80dc:	00099604 	andeq	r9, r9, r4, lsl #12
    80e0:	7f041100 	svcvc	0x00041100
    80e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    80e8:	04e70c01 	strbteq	r0, [r7], #3073	; 0xc01
    80ec:	00000c16 	andeq	r0, r0, r6, lsl ip
    80f0:	00223b21 	eoreq	r3, r2, r1, lsr #22
    80f4:	0fe80c00 	svceq	0x00e80c00
    80f8:	00000059 	andeq	r0, r0, r9, asr r0
    80fc:	00040401 	andeq	r0, r4, r1, lsl #8
    8100:	001bc921 	andseq	ip, fp, r1, lsr #18
    8104:	0fe90c00 	svceq	0x00e90c00
    8108:	00000059 	andeq	r0, r0, r9, asr r0
    810c:	00030101 	andeq	r0, r3, r1, lsl #2
    8110:	001c8921 	andseq	r8, ip, r1, lsr #18
    8114:	0feb0c00 	svceq	0x00eb0c00
    8118:	00000059 	andeq	r0, r0, r9, asr r0
    811c:	00010201 	andeq	r0, r1, r1, lsl #4
    8120:	001a5721 	andseq	r5, sl, r1, lsr #14
    8124:	0fec0c00 	svceq	0x00ec0c00
    8128:	00000059 	andeq	r0, r0, r9, asr r0
    812c:	00000101 	andeq	r0, r0, r1, lsl #2
    8130:	0c010c00 	stceq	12, cr0, [r1], {-0}
    8134:	0c4004ef 	cfstrdeq	mvd0, [r0], {239}	; 0xef
    8138:	a5210000 	strge	r0, [r1, #-0]!
    813c:	0c000020 	stceq	0, cr0, [r0], {32}
    8140:	00590ff0 	ldrsheq	r0, [r9], #-240	; 0xffffff10
    8144:	04010000 	streq	r0, [r1], #-0
    8148:	01210004 			; <UNDEFINED> instruction: 0x01210004
    814c:	0c000022 	stceq	0, cr0, [r0], {34}	; 0x22
    8150:	00590ff1 	ldrsheq	r0, [r9], #-241	; 0xffffff0f
    8154:	04010000 	streq	r0, [r1], #-0
    8158:	0c000000 	stceq	0, cr0, [r0], {-0}
    815c:	04f50c01 	ldrbteq	r0, [r5], #3073	; 0xc01
    8160:	00000c6a 	andeq	r0, r0, sl, ror #24
    8164:	001bb321 	andseq	fp, fp, r1, lsr #6
    8168:	0ff60c00 	svceq	0x00f60c00
    816c:	00000059 	andeq	r0, r0, r9, asr r0
    8170:	00070101 	andeq	r0, r7, r1, lsl #2
    8174:	00222421 	eoreq	r2, r2, r1, lsr #8
    8178:	0ff80c00 	svceq	0x00f80c00
    817c:	00000059 	andeq	r0, r0, r9, asr r0
    8180:	00010601 	andeq	r0, r1, r1, lsl #12
    8184:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    8188:	b90401a6 	stmdblt	r4, {r1, r2, r5, r7, r8}
    818c:	2200000c 	andcs	r0, r0, #12
    8190:	0000223b 	andeq	r2, r0, fp, lsr r2
    8194:	0f01a70c 	svceq	0x0001a70c
    8198:	00000059 	andeq	r0, r0, r9, asr r0
    819c:	00040401 	andeq	r0, r4, r1, lsl #8
    81a0:	001bc922 	andseq	ip, fp, r2, lsr #18
    81a4:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    81a8:	0000590f 	andeq	r5, r0, pc, lsl #18
    81ac:	03010100 	movweq	r0, #4352	; 0x1100
    81b0:	1c892200 	sfmne	f2, 4, [r9], {0}
    81b4:	aa0c0000 	bge	3081bc <__ccfg+0x2e8214>
    81b8:	00590f01 	subseq	r0, r9, r1, lsl #30
    81bc:	02010000 	andeq	r0, r1, #0
    81c0:	57220001 	strpl	r0, [r2, -r1]!
    81c4:	0c00001a 	stceq	0, cr0, [r0], {26}
    81c8:	590f01ab 	stmdbpl	pc, {r0, r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    81cc:	01000000 	mrseq	r0, (UNDEF: 0)
    81d0:	00000001 	andeq	r0, r0, r1
    81d4:	ae0c011b 	mcrge	1, 0, r0, cr12, cr11, {0}
    81d8:	0ce60401 	cfstrdeq	mvd0, [r6], #4
    81dc:	a5220000 	strge	r0, [r2, #-0]!
    81e0:	0c000020 	stceq	0, cr0, [r0], {32}
    81e4:	590f01af 	stmdbpl	pc, {r0, r1, r2, r3, r5, r7, r8}	; <UNPREDICTABLE>
    81e8:	01000000 	mrseq	r0, (UNDEF: 0)
    81ec:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    81f0:	00002201 	andeq	r2, r0, r1, lsl #4
    81f4:	0f01b00c 	svceq	0x0001b00c
    81f8:	00000059 	andeq	r0, r0, r9, asr r0
    81fc:	00000401 	andeq	r0, r0, r1, lsl #8
    8200:	8a041100 	bhi	10c608 <__ccfg+0xec660>
    8204:	02000009 	andeq	r0, r0, #9
    8208:	000020f0 	strdeq	r2, [r0], -r0
    820c:	f82f3d0d 			; <UNDEFINED> instruction: 0xf82f3d0d
    8210:	0f00000c 	svceq	0x0000000c
    8214:	00002102 	andeq	r2, r0, r2, lsl #2
    8218:	15780d18 	ldrbne	r0, [r8, #-3352]!	; 0xfffff2e8
    821c:	00000d88 	andeq	r0, r0, r8, lsl #27
    8220:	0019e80d 	andseq	lr, r9, sp, lsl #16
    8224:	0d790d00 	ldcleq	13, cr0, [r9, #-0]
    8228:	0000006c 	andeq	r0, r0, ip, rrx
    822c:	05930d00 	ldreq	r0, [r3, #3328]	; 0xd00
    8230:	7a0d0000 	bvc	348238 <__ccfg+0x328290>
    8234:	00006c0d 	andeq	r6, r0, sp, lsl #24
    8238:	480d0200 	stmdami	sp, {r9}
    823c:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8240:	0bc0137d 	bleq	ff00d03c <_estack+0xdf00803c>
    8244:	0d040000 	stceq	0, cr0, [r4, #-0]
    8248:	00001ae0 	andeq	r1, r0, r0, ror #21
    824c:	540c7e0d 	strpl	r7, [ip], #-3597	; 0xfffff1f3
    8250:	08000009 	stmdaeq	r0, {r0, r3}
    8254:	001d780d 	andseq	r7, sp, sp, lsl #16
    8258:	06860d00 	streq	r0, [r6], r0, lsl #26
    825c:	000010f3 	strdeq	r1, [r0], -r3
    8260:	1cc20d0c 	stclne	13, cr0, [r2], {12}
    8264:	8a0d0000 	bhi	34826c <__ccfg+0x3282c4>
    8268:	00113d06 	andseq	r3, r1, r6, lsl #26
    826c:	250d0d00 	strcs	r0, [sp, #-3328]	; 0xfffff300
    8270:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8274:	11670693 			; <UNDEFINED> instruction: 0x11670693
    8278:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    827c:	0000209e 	muleq	r0, lr, r0
    8280:	590c940d 	stmdbpl	ip, {r0, r2, r3, sl, ip, pc}
    8284:	0f000000 	svceq	0x00000000
    8288:	001dc40d 	andseq	ip, sp, sp, lsl #8
    828c:	0d950d00 	ldceq	13, cr0, [r5]
    8290:	0000007f 	andeq	r0, r0, pc, ror r0
    8294:	1a150d10 	bne	54b6dc <__ccfg+0x52b734>
    8298:	960d0000 	strls	r0, [sp], -r0
    829c:	0009840d 	andeq	r8, r9, sp, lsl #8
    82a0:	02001400 	andeq	r1, r0, #0, 8
    82a4:	00001f54 	andeq	r1, r0, r4, asr pc
    82a8:	942f3e0d 	strtls	r3, [pc], #-3597	; 82b0 <__exidx_end+0x3384>
    82ac:	0f00000d 	svceq	0x0000000d
    82b0:	00001c4d 	andeq	r1, r0, sp, asr #24
    82b4:	159f0d24 	ldrne	r0, [pc, #3364]	; 8fe0 <__exidx_end+0x40b4>
    82b8:	00000e72 	andeq	r0, r0, r2, ror lr
    82bc:	0019e80d 	andseq	lr, r9, sp, lsl #16
    82c0:	0da00d00 	stceq	13, cr0, [r0]
    82c4:	0000006c 	andeq	r0, r0, ip, rrx
    82c8:	05930d00 	ldreq	r0, [r3, #3328]	; 0xd00
    82cc:	a10d0000 	mrsge	r0, (UNDEF: 13)
    82d0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    82d4:	480d0200 	stmdami	sp, {r9}
    82d8:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    82dc:	0bc013a4 	bleq	ff00d174 <_estack+0xdf008174>
    82e0:	0d040000 	stceq	0, cr0, [r4, #-0]
    82e4:	00001ae0 	andeq	r1, r0, r0, ror #21
    82e8:	540ca50d 	strpl	sl, [ip], #-1293	; 0xfffffaf3
    82ec:	08000009 	stmdaeq	r0, {r0, r3}
    82f0:	001d780d 	andseq	r7, sp, sp, lsl #16
    82f4:	06ad0d00 	strteq	r0, [sp], r0, lsl #26
    82f8:	000011a1 	andeq	r1, r0, r1, lsr #3
    82fc:	1cc20d0c 	stclne	13, cr0, [r2], {12}
    8300:	b10d0000 	mrslt	r0, (UNDEF: 13)
    8304:	0011eb06 	andseq	lr, r1, r6, lsl #22
    8308:	250d0d00 	strcs	r0, [sp, #-3328]	; 0xfffff300
    830c:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8310:	121506c3 	andsne	r0, r5, #204472320	; 0xc300000
    8314:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    8318:	00001eb2 			; <UNDEFINED> instruction: 0x00001eb2
    831c:	9f06cd0d 	svcls	0x0006cd0d
    8320:	0f000012 	svceq	0x00000012
    8324:	001dc40d 	andseq	ip, sp, sp, lsl #8
    8328:	0dce0d00 	stcleq	13, cr0, [lr]
    832c:	0000007f 	andeq	r0, r0, pc, ror r0
    8330:	1c010d10 	stcne	13, cr0, [r1], {16}
    8334:	cf0d0000 	svcgt	0x000d0000
    8338:	0000590c 	andeq	r5, r0, ip, lsl #18
    833c:	040d1400 	streq	r1, [sp], #-1024	; 0xfffffc00
    8340:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8344:	00590cd1 	ldrsbeq	r0, [r9], #-193	; 0xffffff3f
    8348:	0d150000 	ldceq	0, cr0, [r5, #-0]
    834c:	00001f0d 	andeq	r1, r0, sp, lsl #30
    8350:	590cd20d 	stmdbpl	ip, {r0, r2, r3, r9, ip, lr, pc}
    8354:	16000000 	strne	r0, [r0], -r0
    8358:	001c5f0d 	andseq	r5, ip, sp, lsl #30
    835c:	06db0d00 	ldrbeq	r0, [fp], r0, lsl #26
    8360:	00001319 	andeq	r1, r0, r9, lsl r3
    8364:	21550d17 	cmpcs	r5, r7, lsl sp
    8368:	dc0d0000 	stcle	0, cr0, [sp], {-0}
    836c:	0009540c 	andeq	r5, r9, ip, lsl #8
    8370:	930d1800 	movwls	r1, #55296	; 0xd800
    8374:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8378:	0ce611dd 	stfeqe	f1, [r6], #884	; 0x374
    837c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    8380:	00001a7a 	andeq	r1, r0, sl, ror sl
    8384:	840dde0d 	strhi	sp, [sp], #-3597	; 0xfffff1f3
    8388:	20000009 	andcs	r0, r0, r9
    838c:	1c6a0200 	sfmne	f0, 2, [sl], #-0
    8390:	410d0000 	mrsmi	r0, (UNDEF: 13)
    8394:	000e7e2f 	andeq	r7, lr, pc, lsr #28
    8398:	1a451a00 	bne	114eba0 <__ccfg+0x112ebf8>
    839c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    83a0:	6d15017d 	ldfvss	f0, [r5, #-500]	; 0xfffffe0c
    83a4:	1800000f 	stmdane	r0, {r0, r1, r2, r3}
    83a8:	000019e8 	andeq	r1, r0, r8, ror #19
    83ac:	0d017e0d 	stceq	14, cr7, [r1, #-52]	; 0xffffffcc
    83b0:	0000006c 	andeq	r0, r0, ip, rrx
    83b4:	05931800 	ldreq	r1, [r3, #2048]	; 0x800
    83b8:	7f0d0000 	svcvc	0x000d0000
    83bc:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    83c0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    83c4:	00001d48 	andeq	r1, r0, r8, asr #26
    83c8:	1301820d 	movwne	r8, #4621	; 0x120d
    83cc:	00000bc0 	andeq	r0, r0, r0, asr #23
    83d0:	1ae01804 	bne	ff80e3e8 <_estack+0xdf8093e8>
    83d4:	830d0000 	movwhi	r0, #53248	; 0xd000
    83d8:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    83dc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    83e0:	00001d78 	andeq	r1, r0, r8, ror sp
    83e4:	06018b0d 	streq	r8, [r1], -sp, lsl #22
    83e8:	00001363 	andeq	r1, r0, r3, ror #6
    83ec:	1cc2180c 	stclne	8, cr1, [r2], {12}
    83f0:	8f0d0000 	svchi	0x000d0000
    83f4:	13b20601 			; <UNDEFINED> instruction: 0x13b20601
    83f8:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    83fc:	0000212f 	andeq	r2, r0, pc, lsr #2
    8400:	0601950d 	streq	r9, [r1], -sp, lsl #10
    8404:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    8408:	1d28180e 	stcne	8, cr1, [r8, #-56]!	; 0xffffffc8
    840c:	960d0000 	strls	r0, [sp], -r0
    8410:	00590c01 	subseq	r0, r9, r1, lsl #24
    8414:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
    8418:	000021ee 	andeq	r2, r0, lr, ror #3
    841c:	0601a30d 	streq	sl, [r1], -sp, lsl #6
    8420:	0000140c 	andeq	r1, r0, ip, lsl #8
    8424:	1ca91810 	stcne	8, cr1, [r9], #64	; 0x40
    8428:	a40d0000 	strge	r0, [sp], #-0
    842c:	00250b01 	eoreq	r0, r5, r1, lsl #22
    8430:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
    8434:	00001f79 	andeq	r1, r0, r9, ror pc
    8438:	0c01a50d 	cfstr32eq	mvfx10, [r1], {13}
    843c:	00000059 	andeq	r0, r0, r9, asr r0
    8440:	21b61812 			; <UNDEFINED> instruction: 0x21b61812
    8444:	a70d0000 	strge	r0, [sp, -r0]
    8448:	00590c01 	subseq	r0, r9, r1, lsl #24
    844c:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    8450:	00001e30 	andeq	r1, r0, r0, lsr lr
    8454:	0d01a90d 	vstreq.16	s20, [r1, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    8458:	0000006c 	andeq	r0, r0, ip, rrx
    845c:	1c0b1814 	stcne	8, cr1, [fp], {20}
    8460:	af0d0000 	svcge	0x000d0000
    8464:	147d0601 	ldrbtne	r0, [sp], #-1537	; 0xfffff9ff
    8468:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    846c:	00001d0e 	andeq	r1, r0, lr, lsl #26
    8470:	0601b70d 	streq	fp, [r1], -sp, lsl #14
    8474:	000014aa 	andeq	r1, r0, sl, lsr #9
    8478:	1e1c1817 	mrcne	8, 0, r1, cr12, cr7, {0}
    847c:	b80d0000 	stmdalt	sp, {}	; <UNPREDICTABLE>
    8480:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8484:	00180000 	andseq	r0, r8, r0
    8488:	001f3502 	andseq	r3, pc, r2, lsl #10
    848c:	3c430d00 	mcrrcc	13, 0, r0, r3, cr0
    8490:	00000f79 	andeq	r0, r0, r9, ror pc
    8494:	001f161a 	andseq	r1, pc, sl, lsl r6	; <UNPREDICTABLE>
    8498:	1a0d2800 	bne	3524a0 <__ccfg+0x3324f8>
    849c:	10761502 	rsbsne	r1, r6, r2, lsl #10
    84a0:	e8180000 	ldmda	r8, {}	; <UNPREDICTABLE>
    84a4:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    84a8:	6c0d021b 	sfmvs	f0, 4, [sp], {27}
    84ac:	00000000 	andeq	r0, r0, r0
    84b0:	00059318 	andeq	r9, r5, r8, lsl r3
    84b4:	021d0d00 	andseq	r0, sp, #0, 26
    84b8:	00006c0d 	andeq	r6, r0, sp, lsl #24
    84bc:	48180200 	ldmdami	r8, {r9}
    84c0:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    84c4:	c0130220 	andsgt	r0, r3, r0, lsr #4
    84c8:	0400000b 	streq	r0, [r0], #-11
    84cc:	001ae018 	andseq	lr, sl, r8, lsl r0
    84d0:	02210d00 	eoreq	r0, r1, #0, 26
    84d4:	0009540c 	andeq	r5, r9, ip, lsl #8
    84d8:	78180800 	ldmdavc	r8, {fp}
    84dc:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    84e0:	f9060229 			; <UNDEFINED> instruction: 0xf9060229
    84e4:	0c000014 	stceq	0, cr0, [r0], {20}
    84e8:	001cc218 	andseq	ip, ip, r8, lsl r2
    84ec:	022d0d00 	eoreq	r0, sp, #0, 26
    84f0:	00154806 	andseq	r4, r5, r6, lsl #16
    84f4:	dd180d00 	ldcle	13, cr0, [r8, #-0]
    84f8:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    84fc:	75060233 	strvc	r0, [r6, #-563]	; 0xfffffdcd
    8500:	0e000015 	mcreq	0, 0, r0, cr0, cr5, {0}
    8504:	001d3118 	andseq	r3, sp, r8, lsl r1
    8508:	02380d00 	eorseq	r0, r8, #0, 26
    850c:	0015a206 	andseq	sl, r5, r6, lsl #4
    8510:	69181000 	ldmdbvs	r8, {ip}
    8514:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8518:	590c0239 	stmdbpl	ip, {r0, r3, r4, r5, r9}
    851c:	14000000 	strne	r0, [r0], #-0
    8520:	001dba18 	andseq	fp, sp, r8, lsl sl
    8524:	02410d00 	subeq	r0, r1, #0, 26
    8528:	0015cf06 	andseq	ip, r5, r6, lsl #30
    852c:	d5181500 	ldrle	r1, [r8, #-1280]	; 0xfffffb00
    8530:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8534:	fc060255 	stc2	2, cr0, [r6], {85}	; 0x55
    8538:	16000015 			; <UNDEFINED> instruction: 0x16000015
    853c:	000f9f18 	andeq	r9, pc, r8, lsl pc	; <UNPREDICTABLE>
    8540:	02680d00 	rsbeq	r0, r8, #0, 26
    8544:	00165c06 	andseq	r5, r6, r6, lsl #24
    8548:	61181800 	tstvs	r8, r0, lsl #16
    854c:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8550:	6c0d0269 	sfmvs	f0, 4, [sp], {105}	; 0x69
    8554:	1a000000 	bne	855c <__exidx_end+0x3630>
    8558:	001f9518 	andseq	r9, pc, r8, lsl r5	; <UNPREDICTABLE>
    855c:	026a0d00 	rsbeq	r0, sl, #0, 26
    8560:	000bc60e 	andeq	ip, fp, lr, lsl #12
    8564:	1a181c00 	bne	60f56c <__ccfg+0x5ef5c4>
    8568:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    856c:	6c0d026c 	sfmvs	f0, 4, [sp], {108}	; 0x6c
    8570:	20000000 	andcs	r0, r0, r0
    8574:	001d5018 	andseq	r5, sp, r8, lsl r0
    8578:	02700d00 	rsbseq	r0, r0, #0, 26
    857c:	0000380c 	andeq	r3, r0, ip, lsl #16
    8580:	8d182200 	lfmhi	f2, 4, [r8, #-0]
    8584:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    8588:	590c0273 	stmdbpl	ip, {r0, r1, r4, r5, r6, r9}
    858c:	24000000 	strcs	r0, [r0], #-0
    8590:	1fc90200 	svcne	0x00c90200
    8594:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    8598:	00108230 	andseq	r8, r0, r0, lsr r2
    859c:	1fb61a00 	svcne	0x00b61a00
    85a0:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    85a4:	f3150375 	vcge.u16	q0, <illegal reg q2.5>, <illegal reg q10.5>
    85a8:	18000010 	stmdane	r0, {r4}
    85ac:	0000206c 	andeq	r2, r0, ip, rrx
    85b0:	0d03760d 	stceq	6, cr7, [r3, #-52]	; 0xffffffcc
    85b4:	0000006c 	andeq	r0, r0, ip, rrx
    85b8:	1a9f1800 	bne	fe7ce5c0 <_estack+0xde7c95c0>
    85bc:	770d0000 	strvc	r0, [sp, -r0]
    85c0:	006c0d03 	rsbeq	r0, ip, r3, lsl #26
    85c4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    85c8:	00001a8c 	andeq	r1, r0, ip, lsl #21
    85cc:	0c03780d 	stceq	8, cr7, [r3], {13}
    85d0:	00000059 	andeq	r0, r0, r9, asr r0
    85d4:	1f6e1804 	svcne	0x006e1804
    85d8:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    85dc:	00590c03 	subseq	r0, r9, r3, lsl #24
    85e0:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
    85e4:	00001cf4 	strdeq	r1, [r0], -r4
    85e8:	0c037a0d 			; <UNDEFINED> instruction: 0x0c037a0d
    85ec:	00000059 	andeq	r0, r0, r9, asr r0
    85f0:	1cd81806 	ldclne	8, cr1, [r8], {6}
    85f4:	7b0d0000 	blvc	3485fc <__ccfg+0x328654>
    85f8:	00250b03 	eoreq	r0, r5, r3, lsl #22
    85fc:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    8600:	0000025d 	andeq	r0, r0, sp, asr r2
    8604:	0c037c0d 	stceq	12, cr7, [r3], {13}
    8608:	00000954 	andeq	r0, r0, r4, asr r9
    860c:	010c0008 	tsteq	ip, r8
    8610:	3d047f0d 	stccc	15, cr7, [r4, #-52]	; 0xffffffcc
    8614:	21000011 	tstcs	r0, r1, lsl r0
    8618:	0000223b 	andeq	r2, r0, fp, lsr r2
    861c:	590f800d 	stmdbpl	pc, {r0, r2, r3, pc}	; <UNPREDICTABLE>
    8620:	01000000 	mrseq	r0, (UNDEF: 0)
    8624:	21000404 	tstcs	r0, r4, lsl #8
    8628:	00001bc9 	andeq	r1, r0, r9, asr #23
    862c:	590f810d 	stmdbpl	pc, {r0, r2, r3, r8, pc}	; <UNPREDICTABLE>
    8630:	01000000 	mrseq	r0, (UNDEF: 0)
    8634:	21000301 	tstcs	r0, r1, lsl #6
    8638:	00001c89 	andeq	r1, r0, r9, lsl #25
    863c:	590f830d 	stmdbpl	pc, {r0, r2, r3, r8, r9, pc}	; <UNPREDICTABLE>
    8640:	01000000 	mrseq	r0, (UNDEF: 0)
    8644:	21000102 	tstcs	r0, r2, lsl #2
    8648:	00001a57 	andeq	r1, r0, r7, asr sl
    864c:	590f840d 	stmdbpl	pc, {r0, r2, r3, sl, pc}	; <UNPREDICTABLE>
    8650:	01000000 	mrseq	r0, (UNDEF: 0)
    8654:	00000001 	andeq	r0, r0, r1
    8658:	870d010c 	strhi	r0, [sp, -ip, lsl #2]
    865c:	00116704 	andseq	r6, r1, r4, lsl #14
    8660:	20a52100 	adccs	r2, r5, r0, lsl #2
    8664:	880d0000 	stmdahi	sp, {}	; <UNPREDICTABLE>
    8668:	0000590f 	andeq	r5, r0, pc, lsl #18
    866c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8670:	22012100 	andcs	r2, r1, #0, 2
    8674:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    8678:	0000590f 	andeq	r5, r0, pc, lsl #18
    867c:	00040100 	andeq	r0, r4, r0, lsl #2
    8680:	010c0000 	mrseq	r0, (UNDEF: 12)
    8684:	a1048b0d 	tstge	r4, sp, lsl #22
    8688:	21000011 	tstcs	r0, r1, lsl r0
    868c:	00002140 	andeq	r2, r0, r0, asr #2
    8690:	590f8c0d 	stmdbpl	pc, {r0, r2, r3, sl, fp, pc}	; <UNPREDICTABLE>
    8694:	01000000 	mrseq	r0, (UNDEF: 0)
    8698:	21000701 	tstcs	r0, r1, lsl #14
    869c:	000021c8 	andeq	r2, r0, r8, asr #3
    86a0:	590f8f0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, fp, pc}	; <UNPREDICTABLE>
    86a4:	01000000 	mrseq	r0, (UNDEF: 0)
    86a8:	21000401 	tstcs	r0, r1, lsl #8
    86ac:	00001a0d 	andeq	r1, r0, sp, lsl #20
    86b0:	590f910d 	stmdbpl	pc, {r0, r2, r3, r8, ip, pc}	; <UNPREDICTABLE>
    86b4:	01000000 	mrseq	r0, (UNDEF: 0)
    86b8:	00000301 	andeq	r0, r0, r1, lsl #6
    86bc:	a60d010c 	strge	r0, [sp], -ip, lsl #2
    86c0:	0011eb04 	andseq	lr, r1, r4, lsl #22
    86c4:	223b2100 	eorscs	r2, fp, #0, 2
    86c8:	a70d0000 	strge	r0, [sp, -r0]
    86cc:	0000590f 	andeq	r5, r0, pc, lsl #18
    86d0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    86d4:	1bc92100 	blne	ff250adc <_estack+0xdf24badc>
    86d8:	a80d0000 	stmdage	sp, {}	; <UNPREDICTABLE>
    86dc:	0000590f 	andeq	r5, r0, pc, lsl #18
    86e0:	03010100 	movweq	r0, #4352	; 0x1100
    86e4:	1c892100 	stfnes	f2, [r9], {0}
    86e8:	aa0d0000 	bge	3486f0 <__ccfg+0x328748>
    86ec:	0000590f 	andeq	r5, r0, pc, lsl #18
    86f0:	01020100 	mrseq	r0, (UNDEF: 18)
    86f4:	1a572100 	bne	15d0afc <__ccfg+0x15b0b54>
    86f8:	ab0d0000 	blge	348700 <__ccfg+0x328758>
    86fc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8700:	00010100 	andeq	r0, r1, r0, lsl #2
    8704:	010c0000 	mrseq	r0, (UNDEF: 12)
    8708:	1504ae0d 	strne	sl, [r4, #-3597]	; 0xfffff1f3
    870c:	21000012 	tstcs	r0, r2, lsl r0
    8710:	000020a5 	andeq	r2, r0, r5, lsr #1
    8714:	590faf0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, fp, sp, pc}	; <UNPREDICTABLE>
    8718:	01000000 	mrseq	r0, (UNDEF: 0)
    871c:	21000404 	tstcs	r0, r4, lsl #8
    8720:	00002201 	andeq	r2, r0, r1, lsl #4
    8724:	590fb00d 	stmdbpl	pc, {r0, r2, r3, ip, sp, pc}	; <UNPREDICTABLE>
    8728:	01000000 	mrseq	r0, (UNDEF: 0)
    872c:	00000004 	andeq	r0, r0, r4
    8730:	b20d010c 	andlt	r0, sp, #12, 2
    8734:	00129f04 	andseq	r9, r2, r4, lsl #30
    8738:	21402100 	mrscs	r2, (UNDEF: 80)
    873c:	b30d0000 	movwlt	r0, #53248	; 0xd000
    8740:	0000590f 	andeq	r5, r0, pc, lsl #18
    8744:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8748:	1a822100 	bne	fe090b50 <_estack+0xde08bb50>
    874c:	b50d0000 	strlt	r0, [sp, #-0]
    8750:	0000590f 	andeq	r5, r0, pc, lsl #18
    8754:	06010100 	streq	r0, [r1], -r0, lsl #2
    8758:	20162100 	andscs	r2, r6, r0, lsl #2
    875c:	b70d0000 	strlt	r0, [sp, -r0]
    8760:	0000590f 	andeq	r5, r0, pc, lsl #18
    8764:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    8768:	21c82100 	biccs	r2, r8, r0, lsl #2
    876c:	b90d0000 	stmdblt	sp, {}	; <UNPREDICTABLE>
    8770:	0000590f 	andeq	r5, r0, pc, lsl #18
    8774:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8778:	1a0d2100 	bne	350b80 <__ccfg+0x330bd8>
    877c:	bb0d0000 	bllt	348784 <__ccfg+0x3287dc>
    8780:	0000590f 	andeq	r5, r0, pc, lsl #18
    8784:	03010100 	movweq	r0, #4352	; 0x1100
    8788:	215d2100 	cmpcs	sp, r0, lsl #2
    878c:	bd0d0000 	stclt	0, cr0, [sp, #-0]
    8790:	0000590f 	andeq	r5, r0, pc, lsl #18
    8794:	02010100 	andeq	r0, r1, #0, 2
    8798:	1c9a2100 	ldfnes	f2, [sl], {0}
    879c:	bf0d0000 	svclt	0x000d0000
    87a0:	0000590f 	andeq	r5, r0, pc, lsl #18
    87a4:	01010100 	mrseq	r0, (UNDEF: 17)
    87a8:	20212100 	eorcs	r2, r1, r0, lsl #2
    87ac:	c10d0000 	mrsgt	r0, (UNDEF: 13)
    87b0:	0000590f 	andeq	r5, r0, pc, lsl #18
    87b4:	00010100 	andeq	r0, r1, r0, lsl #2
    87b8:	010c0000 	mrseq	r0, (UNDEF: 12)
    87bc:	1904c40d 	stmdbne	r4, {r0, r2, r3, sl, lr, pc}
    87c0:	21000013 	tstcs	r0, r3, lsl r0
    87c4:	00001d58 	andeq	r1, r0, r8, asr sp
    87c8:	590fc50d 	stmdbpl	pc, {r0, r2, r3, r8, sl, lr, pc}	; <UNPREDICTABLE>
    87cc:	01000000 	mrseq	r0, (UNDEF: 0)
    87d0:	21000701 	tstcs	r0, r1, lsl #14
    87d4:	00001b91 	muleq	r0, r1, fp
    87d8:	590fc60d 	stmdbpl	pc, {r0, r2, r3, r9, sl, lr, pc}	; <UNPREDICTABLE>
    87dc:	01000000 	mrseq	r0, (UNDEF: 0)
    87e0:	21000601 	tstcs	r0, r1, lsl #12
    87e4:	00001ccc 	andeq	r1, r0, ip, asr #25
    87e8:	590fc80d 	stmdbpl	pc, {r0, r2, r3, fp, lr, pc}	; <UNPREDICTABLE>
    87ec:	01000000 	mrseq	r0, (UNDEF: 0)
    87f0:	21000401 	tstcs	r0, r1, lsl #8
    87f4:	00001c35 	andeq	r1, r0, r5, lsr ip
    87f8:	590fc90d 	stmdbpl	pc, {r0, r2, r3, r8, fp, lr, pc}	; <UNPREDICTABLE>
    87fc:	01000000 	mrseq	r0, (UNDEF: 0)
    8800:	21000301 	tstcs	r0, r1, lsl #6
    8804:	00001faa 	andeq	r1, r0, sl, lsr #31
    8808:	590fca0d 	stmdbpl	pc, {r0, r2, r3, r9, fp, lr, pc}	; <UNPREDICTABLE>
    880c:	01000000 	mrseq	r0, (UNDEF: 0)
    8810:	21000201 	tstcs	r0, r1, lsl #4
    8814:	00001aea 	andeq	r1, r0, sl, ror #21
    8818:	590fcb0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, fp, lr, pc}	; <UNPREDICTABLE>
    881c:	01000000 	mrseq	r0, (UNDEF: 0)
    8820:	21000101 	tstcs	r0, r1, lsl #2
    8824:	000019f2 	strdeq	r1, [r0], -r2
    8828:	590fcc0d 	stmdbpl	pc, {r0, r2, r3, sl, fp, lr, pc}	; <UNPREDICTABLE>
    882c:	01000000 	mrseq	r0, (UNDEF: 0)
    8830:	00000001 	andeq	r0, r0, r1
    8834:	d40d010c 	strle	r0, [sp], #-268	; 0xfffffef4
    8838:	00136304 	andseq	r6, r3, r4, lsl #6
    883c:	223b2100 	eorscs	r2, fp, #0, 2
    8840:	d50d0000 	strle	r0, [sp, #-0]
    8844:	0000590f 	andeq	r5, r0, pc, lsl #18
    8848:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    884c:	1bc92100 	blne	ff250c54 <_estack+0xdf24bc54>
    8850:	d60d0000 	strle	r0, [sp], -r0
    8854:	0000590f 	andeq	r5, r0, pc, lsl #18
    8858:	03010100 	movweq	r0, #4352	; 0x1100
    885c:	1c892100 	stfnes	f2, [r9], {0}
    8860:	d80d0000 	stmdale	sp, {}	; <UNPREDICTABLE>
    8864:	0000590f 	andeq	r5, r0, pc, lsl #18
    8868:	01020100 	mrseq	r0, (UNDEF: 18)
    886c:	1a572100 	bne	15d0c74 <__ccfg+0x15b0ccc>
    8870:	d90d0000 	stmdble	sp, {}	; <UNPREDICTABLE>
    8874:	0000590f 	andeq	r5, r0, pc, lsl #18
    8878:	00010100 	andeq	r0, r1, r0, lsl #2
    887c:	011b0000 	tsteq	fp, r0
    8880:	0401840d 	streq	r8, [r1], #-1037	; 0xfffffbf3
    8884:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    8888:	00223b22 	eoreq	r3, r2, r2, lsr #22
    888c:	01850d00 	orreq	r0, r5, r0, lsl #26
    8890:	0000590f 	andeq	r5, r0, pc, lsl #18
    8894:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8898:	1bc92200 	blne	ff2510a0 <_estack+0xdf24c0a0>
    889c:	860d0000 	strhi	r0, [sp], -r0
    88a0:	00590f01 	subseq	r0, r9, r1, lsl #30
    88a4:	01010000 	mrseq	r0, (UNDEF: 1)
    88a8:	89220003 	stmdbhi	r2!, {r0, r1}
    88ac:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    88b0:	590f0188 	stmdbpl	pc, {r3, r7, r8}	; <UNPREDICTABLE>
    88b4:	01000000 	mrseq	r0, (UNDEF: 0)
    88b8:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    88bc:	00001a57 	andeq	r1, r0, r7, asr sl
    88c0:	0f01890d 	svceq	0x0001890d
    88c4:	00000059 	andeq	r0, r0, r9, asr r0
    88c8:	00000101 	andeq	r0, r0, r1, lsl #2
    88cc:	0d011b00 	vstreq	d1, [r1, #-0]
    88d0:	df04018c 	svcle	0x0004018c
    88d4:	22000013 	andcs	r0, r0, #19
    88d8:	000020a5 	andeq	r2, r0, r5, lsr #1
    88dc:	0f018d0d 	svceq	0x00018d0d
    88e0:	00000059 	andeq	r0, r0, r9, asr r0
    88e4:	00040401 	andeq	r0, r4, r1, lsl #8
    88e8:	00220122 	eoreq	r0, r2, r2, lsr #2
    88ec:	018e0d00 	orreq	r0, lr, r0, lsl #26
    88f0:	0000590f 	andeq	r5, r0, pc, lsl #18
    88f4:	00040100 	andeq	r0, r4, r0, lsl #2
    88f8:	011b0000 	tsteq	fp, r0
    88fc:	0401900d 	streq	r9, [r1], #-13
    8900:	0000140c 	andeq	r1, r0, ip, lsl #8
    8904:	001da622 	andseq	sl, sp, r2, lsr #12
    8908:	01910d00 	orrseq	r0, r1, r0, lsl #26
    890c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8910:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8914:	1ecd2200 	cdpne	2, 12, cr2, cr13, cr0, {0}
    8918:	930d0000 	movwls	r0, #53248	; 0xd000
    891c:	00590f01 	subseq	r0, r9, r1, lsl #30
    8920:	01010000 	mrseq	r0, (UNDEF: 1)
    8924:	1b000006 	blne	8944 <__exidx_end+0x3a18>
    8928:	01970d01 	orrseq	r0, r7, r1, lsl #26
    892c:	00147d04 	andseq	r7, r4, r4, lsl #26
    8930:	22072200 	andcs	r2, r7, #0, 4
    8934:	980d0000 	stmdals	sp, {}	; <UNPREDICTABLE>
    8938:	00590f01 	subseq	r0, r9, r1, lsl #30
    893c:	01010000 	mrseq	r0, (UNDEF: 1)
    8940:	9d220007 	stcls	0, cr0, [r2, #-28]!	; 0xffffffe4
    8944:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8948:	590f0199 	stmdbpl	pc, {r0, r3, r4, r7, r8}	; <UNPREDICTABLE>
    894c:	01000000 	mrseq	r0, (UNDEF: 0)
    8950:	22000601 	andcs	r0, r0, #1048576	; 0x100000
    8954:	00000ca8 	andeq	r0, r0, r8, lsr #25
    8958:	0f019a0d 	svceq	0x00019a0d
    895c:	00000059 	andeq	r0, r0, r9, asr r0
    8960:	00050101 	andeq	r0, r5, r1, lsl #2
    8964:	001e8622 	andseq	r8, lr, r2, lsr #12
    8968:	019c0d00 	orrseq	r0, ip, r0, lsl #26
    896c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8970:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8974:	21142200 	tstcs	r4, r0, lsl #4
    8978:	9f0d0000 	svcls	0x000d0000
    897c:	00590f01 	subseq	r0, r9, r1, lsl #30
    8980:	01010000 	mrseq	r0, (UNDEF: 1)
    8984:	60220003 	eorvs	r0, r2, r3
    8988:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    898c:	590f01a1 	stmdbpl	pc, {r0, r5, r7, r8}	; <UNPREDICTABLE>
    8990:	01000000 	mrseq	r0, (UNDEF: 0)
    8994:	00000201 	andeq	r0, r0, r1, lsl #4
    8998:	aa0d011b 	bge	348e0c <__ccfg+0x328e64>
    899c:	14aa0401 	strtne	r0, [sl], #1025	; 0x401
    89a0:	d1220000 			; <UNDEFINED> instruction: 0xd1220000
    89a4:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    89a8:	590f01ab 	stmdbpl	pc, {r0, r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    89ac:	01000000 	mrseq	r0, (UNDEF: 0)
    89b0:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    89b4:	00001cb1 			; <UNDEFINED> instruction: 0x00001cb1
    89b8:	0f01ad0d 	svceq	0x0001ad0d
    89bc:	00000059 	andeq	r0, r0, r9, asr r0
    89c0:	00000401 	andeq	r0, r0, r1, lsl #8
    89c4:	0d011b00 	vstreq	d1, [r1, #-0]
    89c8:	f90401b0 			; <UNDEFINED> instruction: 0xf90401b0
    89cc:	22000014 	andcs	r0, r0, #20
    89d0:	0000223b 	andeq	r2, r0, fp, lsr r2
    89d4:	0f01b10d 	svceq	0x0001b10d
    89d8:	00000059 	andeq	r0, r0, r9, asr r0
    89dc:	00040401 	andeq	r0, r4, r1, lsl #8
    89e0:	001bc922 	andseq	ip, fp, r2, lsr #18
    89e4:	01b20d00 			; <UNDEFINED> instruction: 0x01b20d00
    89e8:	0000590f 	andeq	r5, r0, pc, lsl #18
    89ec:	03010100 	movweq	r0, #4352	; 0x1100
    89f0:	1c892200 	sfmne	f2, 4, [r9], {0}
    89f4:	b40d0000 	strlt	r0, [sp], #-0
    89f8:	00590f01 	subseq	r0, r9, r1, lsl #30
    89fc:	02010000 	andeq	r0, r1, #0
    8a00:	57220001 	strpl	r0, [r2, -r1]!
    8a04:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8a08:	590f01b5 	stmdbpl	pc, {r0, r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    8a0c:	01000000 	mrseq	r0, (UNDEF: 0)
    8a10:	00000001 	andeq	r0, r0, r1
    8a14:	220d011b 	andcs	r0, sp, #-1073741818	; 0xc0000006
    8a18:	15480402 	strbne	r0, [r8, #-1026]	; 0xfffffbfe
    8a1c:	3b220000 	blcc	888a24 <__ccfg+0x868a7c>
    8a20:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8a24:	590f0223 	stmdbpl	pc, {r0, r1, r5, r9}	; <UNPREDICTABLE>
    8a28:	01000000 	mrseq	r0, (UNDEF: 0)
    8a2c:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    8a30:	00001bc9 	andeq	r1, r0, r9, asr #23
    8a34:	0f02240d 	svceq	0x0002240d
    8a38:	00000059 	andeq	r0, r0, r9, asr r0
    8a3c:	00030101 	andeq	r0, r3, r1, lsl #2
    8a40:	001c8922 	andseq	r8, ip, r2, lsr #18
    8a44:	02260d00 	eoreq	r0, r6, #0, 26
    8a48:	0000590f 	andeq	r5, r0, pc, lsl #18
    8a4c:	01020100 	mrseq	r0, (UNDEF: 18)
    8a50:	1a572200 	bne	15d1258 <__ccfg+0x15b12b0>
    8a54:	270d0000 	strcs	r0, [sp, -r0]
    8a58:	00590f02 	subseq	r0, r9, r2, lsl #30
    8a5c:	01010000 	mrseq	r0, (UNDEF: 1)
    8a60:	1b000000 	blne	8a68 <__exidx_end+0x3b3c>
    8a64:	022a0d01 	eoreq	r0, sl, #1, 26	; 0x40
    8a68:	00157504 	andseq	r7, r5, r4, lsl #10
    8a6c:	20a52200 	adccs	r2, r5, r0, lsl #4
    8a70:	2b0d0000 	blcs	348a78 <__ccfg+0x328ad0>
    8a74:	00590f02 	subseq	r0, r9, r2, lsl #30
    8a78:	04010000 	streq	r0, [r1], #-0
    8a7c:	01220004 			; <UNDEFINED> instruction: 0x01220004
    8a80:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8a84:	590f022c 	stmdbpl	pc, {r2, r3, r5, r9}	; <UNPREDICTABLE>
    8a88:	01000000 	mrseq	r0, (UNDEF: 0)
    8a8c:	00000004 	andeq	r0, r0, r4
    8a90:	2e0d021b 	mcrcs	2, 0, r0, cr13, cr11, {0}
    8a94:	15a20402 	strne	r0, [r2, #1026]!	; 0x402
    8a98:	e1220000 			; <UNDEFINED> instruction: 0xe1220000
    8a9c:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8aa0:	6c10022f 	lfmvs	f0, 4, [r0], {47}	; 0x2f
    8aa4:	02000000 	andeq	r0, r0, #0
    8aa8:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    8aac:	000021e4 	andeq	r2, r0, r4, ror #3
    8ab0:	1002320d 	andne	r3, r2, sp, lsl #4
    8ab4:	0000006c 	andeq	r0, r0, ip, rrx
    8ab8:	00000d02 	andeq	r0, r0, r2, lsl #26
    8abc:	0d041b00 	vstreq	d1, [r4, #-0]
    8ac0:	cf040234 	svcgt	0x00040234
    8ac4:	22000015 	andcs	r0, r0, #21
    8ac8:	00001e75 	andeq	r1, r0, r5, ror lr
    8acc:	1002350d 	andne	r3, r2, sp, lsl #10
    8ad0:	0000007f 	andeq	r0, r0, pc, ror r0
    8ad4:	001c0404 	andseq	r0, ip, r4, lsl #8
    8ad8:	001f8522 	andseq	r8, pc, r2, lsr #10
    8adc:	02370d00 	eorseq	r0, r7, #0, 26
    8ae0:	00007f10 	andeq	r7, r0, r0, lsl pc
    8ae4:	03150400 	tsteq	r5, #0, 8
    8ae8:	011b0000 	tsteq	fp, r0
    8aec:	04023a0d 	streq	r3, [r2], #-2573	; 0xfffff5f3
    8af0:	000015fc 	strdeq	r1, [r0], -ip
    8af4:	0020d922 	eoreq	sp, r0, r2, lsr #18
    8af8:	023b0d00 	eorseq	r0, fp, #0, 26
    8afc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8b00:	02060100 	andeq	r0, r6, #0, 2
    8b04:	1aaf2200 	bne	febd130c <_estack+0xdebcc30c>
    8b08:	3d0d0000 	stccc	0, cr0, [sp, #-0]
    8b0c:	00590f02 	subseq	r0, r9, r2, lsl #30
    8b10:	02010000 	andeq	r0, r1, #0
    8b14:	1b000000 	blne	8b1c <__exidx_end+0x3bf0>
    8b18:	02420d02 	subeq	r0, r2, #2, 26	; 0x80
    8b1c:	00165c04 	andseq	r5, r6, r4, lsl #24
    8b20:	1e7e2200 	cdpne	2, 7, cr2, cr14, cr0, {0}
    8b24:	430d0000 	movwmi	r0, #53248	; 0xd000
    8b28:	006c1002 	rsbeq	r1, ip, r2
    8b2c:	06020000 	streq	r0, [r2], -r0
    8b30:	1b22000a 	blne	888b60 <__ccfg+0x868bb8>
    8b34:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8b38:	6c100244 	lfmvs	f0, 4, [r0], {68}	; 0x44
    8b3c:	02000000 	andeq	r0, r0, #0
    8b40:	22000901 	andcs	r0, r0, #16384	; 0x4000
    8b44:	00001ee6 	andeq	r1, r0, r6, ror #29
    8b48:	1002460d 	andne	r4, r2, sp, lsl #12
    8b4c:	0000006c 	andeq	r0, r0, ip, rrx
    8b50:	00080102 	andeq	r0, r8, r2, lsl #2
    8b54:	001a9722 	andseq	r9, sl, r2, lsr #14
    8b58:	02480d00 	subeq	r0, r8, #0, 26
    8b5c:	00006c10 	andeq	r6, r0, r0, lsl ip
    8b60:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    8b64:	1a3a2200 	bne	e9136c <__ccfg+0xe713c4>
    8b68:	4d0d0000 	stcmi	0, cr0, [sp, #-0]
    8b6c:	006c1002 	rsbeq	r1, ip, r2
    8b70:	03020000 	movweq	r0, #8192	; 0x2000
    8b74:	1b000000 	blne	8b7c <__exidx_end+0x3c50>
    8b78:	02560d02 	subseq	r0, r6, #2, 26	; 0x80
    8b7c:	0016ab04 	andseq	sl, r6, r4, lsl #22
    8b80:	1c7c2200 	lfmne	f2, 2, [ip], #-0
    8b84:	570d0000 	strpl	r0, [sp, -r0]
    8b88:	006c1002 	rsbeq	r1, ip, r2
    8b8c:	03020000 	movweq	r0, #8192	; 0x2000
    8b90:	1b22000d 	blne	888bcc <__ccfg+0x868c24>
    8b94:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8b98:	6c10025d 	lfmvs	f0, 4, [r0], {93}	; 0x5d
    8b9c:	02000000 	andeq	r0, r0, #0
    8ba0:	22000c01 	andcs	r0, r0, #256	; 0x100
    8ba4:	00001bbb 			; <UNDEFINED> instruction: 0x00001bbb
    8ba8:	10025f0d 	andne	r5, r2, sp, lsl #30
    8bac:	0000006c 	andeq	r0, r0, ip, rrx
    8bb0:	00060602 	andeq	r0, r6, r2, lsl #12
    8bb4:	001eb922 	andseq	fp, lr, r2, lsr #18
    8bb8:	02660d00 	rsbeq	r0, r6, #0, 26
    8bbc:	00006c10 	andeq	r6, r0, r0, lsl ip
    8bc0:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    8bc4:	41020000 	mrsmi	r0, (UNDEF: 2)
    8bc8:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    8bcc:	16b7343c 			; <UNDEFINED> instruction: 0x16b7343c
    8bd0:	2a0f0000 	bcs	3c8bd8 <__ccfg+0x3a8c30>
    8bd4:	0c000020 	stceq	0, cr0, [r0], {32}
    8bd8:	06155e0e 	ldreq	r5, [r5], -lr, lsl #28
    8bdc:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    8be0:	00001afb 	strdeq	r1, [r0], -fp
    8be4:	840d5f0e 	strhi	r5, [sp], #-3854	; 0xfffff0f2
    8be8:	00000009 	andeq	r0, r0, r9
    8bec:	0005930d 	andeq	r9, r5, sp, lsl #6
    8bf0:	0c600e00 	stcleq	14, cr0, [r0], #-0
    8bf4:	00000059 	andeq	r0, r0, r9, asr r0
    8bf8:	0f9f0d04 	svceq	0x009f0d04
    8bfc:	6e0e0000 	cdpvs	0, 0, cr0, cr14, cr0, {0}
    8c00:	00170606 	andseq	r0, r7, r6, lsl #12
    8c04:	190d0500 	stmdbne	sp, {r8, sl}
    8c08:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    8c0c:	006c0d6f 	rsbeq	r0, ip, pc, ror #26
    8c10:	0d060000 	stceq	0, cr0, [r6, #-0]
    8c14:	00004321 	andeq	r4, r0, r1, lsr #6
    8c18:	590c710e 	stmdbpl	ip, {r1, r2, r3, r8, ip, sp, lr}
    8c1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8c20:	0e010c00 	cdpeq	12, 0, cr0, cr1, cr0, {0}
    8c24:	17400461 	strbne	r0, [r0, -r1, ror #8]
    8c28:	96210000 	strtls	r0, [r1], -r0
    8c2c:	0e00004f 	cdpeq	0, 0, cr0, cr0, cr15, {2}
    8c30:	00590f62 	subseq	r0, r9, r2, ror #30
    8c34:	02010000 	andeq	r0, r1, #0
    8c38:	02210006 	eoreq	r0, r1, #6
    8c3c:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    8c40:	00590f67 	subseq	r0, r9, r7, ror #30
    8c44:	02010000 	andeq	r0, r1, #0
    8c48:	c4210004 	strtgt	r0, [r1], #-4
    8c4c:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    8c50:	00590f6c 	subseq	r0, r9, ip, ror #30
    8c54:	04010000 	streq	r0, [r1], #-0
    8c58:	0c000000 	stceq	0, cr0, [r0], {-0}
    8c5c:	09480210 	stmdbeq	r8, {r4, r9}^
    8c60:	0000177e 	andeq	r1, r0, lr, ror r7
    8c64:	001c410d 	andseq	r4, ip, sp, lsl #2
    8c68:	0d490200 	sfmeq	f0, 2, [r9, #-0]
    8c6c:	0000007f 	andeq	r0, r0, pc, ror r0
    8c70:	1ba20d00 	blne	fe88c078 <_estack+0xde887078>
    8c74:	4a020000 	bmi	88c7c <__ccfg+0x68cd4>
    8c78:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8c7c:	ec0d0400 	cfstrs	mvf0, [sp], {-0}
    8c80:	0200001f 	andeq	r0, r0, #31
    8c84:	007f0d4b 	rsbseq	r0, pc, fp, asr #26
    8c88:	0d080000 	stceq	0, cr0, [r8, #-0]
    8c8c:	00002147 	andeq	r2, r0, r7, asr #2
    8c90:	7f0d4c02 	svcvc	0x000d4c02
    8c94:	0c000000 	stceq	0, cr0, [r0], {-0}
    8c98:	1a600200 	bne	18094a0 <__ccfg+0x17e94f8>
    8c9c:	4d020000 	stcmi	0, cr0, [r2, #-0]
    8ca0:	00174003 	andseq	r4, r7, r3
    8ca4:	008b0a00 	addeq	r0, fp, r0, lsl #20
    8ca8:	179a0000 	ldrne	r0, [sl, r0]
    8cac:	aa0b0000 	bge	2c8cb4 <__ccfg+0x2a8d0c>
    8cb0:	a2000000 	andge	r0, r0, #0
    8cb4:	178a0400 	strne	r0, [sl, r0, lsl #8]
    8cb8:	85230000 	strhi	r0, [r3, #-0]!
    8cbc:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    8cc0:	179a1049 	ldrne	r1, [sl, r9, asr #32]
    8cc4:	03050000 	movweq	r0, #20480	; 0x5000
    8cc8:	00004c5c 	andeq	r4, r0, ip, asr ip
    8ccc:	00008b0a 	andeq	r8, r0, sl, lsl #22
    8cd0:	0017c200 	andseq	ip, r7, r0, lsl #4
    8cd4:	00aa2400 	adceq	r2, sl, r0, lsl #8
    8cd8:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    8cdc:	17b10400 	ldrne	r0, [r1, r0, lsl #8]!
    8ce0:	d4230000 	strtle	r0, [r3], #-0
    8ce4:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
    8ce8:	17c2103a 			; <UNDEFINED> instruction: 0x17c2103a
    8cec:	03050000 	movweq	r0, #20480	; 0x5000
    8cf0:	000045a8 	andeq	r4, r0, r8, lsr #11
    8cf4:	0023ca02 	eoreq	ip, r3, r2, lsl #20
    8cf8:	12270f00 	eorne	r0, r7, #0, 30
    8cfc:	0000006c 	andeq	r0, r0, ip, rrx
    8d00:	0017d904 	andseq	sp, r7, r4, lsl #18
    8d04:	17d90500 	ldrbne	r0, [r9, r0, lsl #10]
    8d08:	e3020000 	movw	r0, #8192	; 0x2000
    8d0c:	0f000018 	svceq	0x00000018
    8d10:	0059122b 	subseq	r1, r9, fp, lsr #4
    8d14:	ef050000 	svc	0x00050000
    8d18:	02000017 	andeq	r0, r0, #23
    8d1c:	0000241b 	andeq	r2, r0, fp, lsl r4
    8d20:	7f122c0f 	svcvc	0x00122c0f
    8d24:	04000000 	streq	r0, [r0], #-0
    8d28:	00001800 	andeq	r1, r0, r0, lsl #16
    8d2c:	0004f702 	andeq	pc, r4, r2, lsl #14
    8d30:	122d0f00 	eorne	r0, sp, #0, 30
    8d34:	0000007f 	andeq	r0, r0, pc, ror r0
    8d38:	00087102 	andeq	r7, r8, r2, lsl #2
    8d3c:	102e0f00 	eorne	r0, lr, r0, lsl #30
    8d40:	00001829 	andeq	r1, r0, r9, lsr #16
    8d44:	17d90411 	bfine	r0, r1, #8, #18
    8d48:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    8d4c:	bd09320f 	sfmlt	f3, 4, [r9, #-60]	; 0xffffffc4
    8d50:	21000018 	tstcs	r0, r8, lsl r0
    8d54:	0000003e 	andeq	r0, r0, lr, lsr r0
    8d58:	ef07340f 	svc	0x0007340f
    8d5c:	01000017 	tsteq	r0, r7, lsl r0
    8d60:	21000701 	tstcs	r0, r1, lsl #14
    8d64:	000004fd 	strdeq	r0, [r0], -sp
    8d68:	ef03350f 	svc	0x0003350f
    8d6c:	01000017 	tsteq	r0, r7, lsl r0
    8d70:	21000601 	tstcs	r0, r1, lsl #12
    8d74:	00000237 	andeq	r0, r0, r7, lsr r2
    8d78:	ef03360f 	svc	0x0003360f
    8d7c:	01000017 	tsteq	r0, r7, lsl r0
    8d80:	21000501 	tstcs	r0, r1, lsl #10
    8d84:	00000537 	andeq	r0, r0, r7, lsr r5
    8d88:	ef03370f 	svc	0x0003370f
    8d8c:	01000017 	tsteq	r0, r7, lsl r0
    8d90:	21000401 	tstcs	r0, r1, lsl #8
    8d94:	000007c0 	andeq	r0, r0, r0, asr #15
    8d98:	ef03380f 	svc	0x0003380f
    8d9c:	01000017 	tsteq	r0, r7, lsl r0
    8da0:	0d000004 	stceq	0, cr0, [r0, #-16]
    8da4:	00000504 	andeq	r0, r0, r4, lsl #10
    8da8:	ef073a0f 	svc	0x00073a0f
    8dac:	01000017 	tsteq	r0, r7, lsl r0
    8db0:	0006ce0d 	andeq	ip, r6, sp, lsl #28
    8db4:	033c0f00 	teqeq	ip, #0, 30
    8db8:	000017ef 	andeq	r1, r0, pc, ror #15
    8dbc:	0a6e0d02 	beq	1b8c1cc <__ccfg+0x1b6c224>
    8dc0:	3d0f0000 	stccc	0, cr0, [pc, #-0]	; 8dc8 <__exidx_end+0x3e9c>
    8dc4:	0017ef03 	andseq	lr, r7, r3, lsl #30
    8dc8:	030d0300 	movweq	r0, #54016	; 0xd300
    8dcc:	0f000007 	svceq	0x00000007
    8dd0:	1800083f 	stmdane	r0, {r0, r1, r2, r3, r4, r5, fp}
    8dd4:	00040000 	andeq	r0, r4, r0
    8dd8:	00028502 	andeq	r8, r2, r2, lsl #10
    8ddc:	03410f00 	movteq	r0, #7936	; 0x1f00
    8de0:	0000182f 	andeq	r1, r0, pc, lsr #16
    8de4:	0018bd05 	andseq	fp, r8, r5, lsl #26
    8de8:	053e2500 	ldreq	r2, [lr, #-1280]!	; 0xfffffb00
    8dec:	430f0000 	movwmi	r0, #61440	; 0xf000
    8df0:	0018c91a 	andseq	ip, r8, sl, lsl r9
    8df4:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    8df8:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    8dfc:	eb0e450f 	bl	39a240 <__ccfg+0x37a298>
    8e00:	01000005 	tsteq	r0, r5
    8e04:	028e2501 	addeq	r2, lr, #4194304	; 0x400000
    8e08:	450f0000 	strmi	r0, [pc, #-0]	; 8e10 <__exidx_end+0x3ee4>
    8e0c:	0005eb1e 	andeq	lr, r5, lr, lsl fp
    8e10:	0c010100 	stfeqs	f0, [r1], {-0}
    8e14:	098f1008 	stmibeq	pc, {r3, ip}	; <UNPREDICTABLE>
    8e18:	00001929 	andeq	r1, r0, r9, lsr #18
    8e1c:	0006010d 	andeq	r0, r6, sp, lsl #2
    8e20:	0b901000 	bleq	fe40ce28 <_estack+0xde407e28>
    8e24:	0000007f 	andeq	r0, r0, pc, ror r0
    8e28:	0ba00d00 	bleq	fe80c230 <_estack+0xde807230>
    8e2c:	91100000 	tstls	r0, r0
    8e30:	0017d908 	andseq	sp, r7, r8, lsl #18
    8e34:	ea0d0400 	b	349e3c <__ccfg+0x329e94>
    8e38:	10000001 	andne	r0, r0, r1
    8e3c:	17fb1092 			; <UNDEFINED> instruction: 0x17fb1092
    8e40:	00060000 	andeq	r0, r6, r0
    8e44:	00094102 	andeq	r4, r9, r2, lsl #2
    8e48:	03931000 	orrseq	r1, r3, #0
    8e4c:	000018f8 	strdeq	r1, [r0], -r8
    8e50:	0019290a 	andseq	r2, r9, sl, lsl #18
    8e54:	00194000 	andseq	r4, r9, r0
    8e58:	25002600 	strcs	r2, [r0, #-1536]	; 0xfffffa00
    8e5c:	0000070f 	andeq	r0, r0, pc, lsl #14
    8e60:	350f9910 	strcc	r9, [pc, #-2320]	; 8558 <__exidx_end+0x362c>
    8e64:	01000019 	tsteq	r0, r9, lsl r0
    8e68:	11010c01 	tstne	r1, r1, lsl #24
    8e6c:	19780991 	ldmdbne	r8!, {r0, r4, r7, r8, fp}^
    8e70:	0a210000 	beq	848e78 <__ccfg+0x828ed0>
    8e74:	11000007 	tstne	r0, r7
    8e78:	17ef0793 			; <UNDEFINED> instruction: 0x17ef0793
    8e7c:	07010000 	streq	r0, [r1, -r0]
    8e80:	78210001 	stmdavc	r1!, {r0}
    8e84:	11000004 	tstne	r0, r4
    8e88:	17ef0394 			; <UNDEFINED> instruction: 0x17ef0394
    8e8c:	01010000 	mrseq	r0, (UNDEF: 1)
    8e90:	02000000 	andeq	r0, r0, #0
    8e94:	000007cc 	andeq	r0, r0, ip, asr #15
    8e98:	4e039611 	mcrmi	6, 0, r9, cr3, cr1, {0}
    8e9c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    8ea0:	00001978 	andeq	r1, r0, r8, ror r9
    8ea4:	0019840a 	andseq	r8, r9, sl, lsl #8
    8ea8:	00199400 	andseq	r9, r9, r0, lsl #8
    8eac:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    8eb0:	00001989 	andeq	r1, r0, r9, lsl #19
    8eb4:	00034725 	andeq	r4, r3, r5, lsr #14
    8eb8:	179c1100 	ldrne	r1, [ip, r0, lsl #2]
    8ebc:	00001994 	muleq	r0, r4, r9
    8ec0:	e50a0101 	str	r0, [sl, #-257]	; 0xfffffeff
    8ec4:	b2000017 	andlt	r0, r0, #23
    8ec8:	26000019 			; <UNDEFINED> instruction: 0x26000019
    8ecc:	19a70400 	stmibne	r7!, {sl}
    8ed0:	b7250000 	strlt	r0, [r5, -r0]!
    8ed4:	12000004 	andne	r0, r0, #4
    8ed8:	19b21306 	ldmibne	r2!, {r1, r2, r8, r9, ip}
    8edc:	01010000 	mrseq	r0, (UNDEF: 1)
    8ee0:	0006b025 	andeq	fp, r6, r5, lsr #32
    8ee4:	0ec31000 	cdpeq	0, 12, cr1, cr3, cr0, {0}
    8ee8:	00001800 	andeq	r1, r0, r0, lsl #16
    8eec:	fa070101 	blx	1c92f8 <__ccfg+0x1a9350>
    8ef0:	13000008 	movwne	r0, #8
    8ef4:	e010016e 	ands	r0, r0, lr, ror #2
    8ef8:	11000019 	tstne	r0, r9, lsl r0
    8efc:	0019e604 	andseq	lr, r9, r4, lsl #12
    8f00:	f2011f00 	vmax.f32	d1, d1, d0
    8f04:	16000019 			; <UNDEFINED> instruction: 0x16000019
    8f08:	000017d9 	ldrdeq	r1, [r0], -r9
    8f0c:	05f80a00 	ldrbeq	r0, [r8, #2560]!	; 0xa00
    8f10:	19fd0000 	ldmibne	sp!, {}^	; <UNPREDICTABLE>
    8f14:	00260000 	eoreq	r0, r6, r0
    8f18:	0019f204 	andseq	pc, r9, r4, lsl #4
    8f1c:	07632000 	strbeq	r2, [r3, -r0]!
    8f20:	7f130000 	svcvc	0x00130000
    8f24:	19fd1601 	ldmibne	sp!, {r0, r9, sl, ip}^
    8f28:	01010000 	mrseq	r0, (UNDEF: 1)
    8f2c:	00032a20 	andeq	r2, r3, r0, lsr #20
    8f30:	01821300 	orreq	r1, r2, r0, lsl #6
    8f34:	00180c14 	andseq	r0, r8, r4, lsl ip
    8f38:	20010100 	andcs	r0, r1, r0, lsl #2
    8f3c:	00000307 	andeq	r0, r0, r7, lsl #6
    8f40:	0e02d813 	mcreq	8, 0, sp, cr2, cr3, {0}
    8f44:	00001800 	andeq	r1, r0, r0, lsl #16
    8f48:	081b0101 	ldmdaeq	fp, {r0, r8}
    8f4c:	09030313 	stmdbeq	r3, {r0, r1, r4, r8, r9}
    8f50:	00001a56 	andeq	r1, r0, r6, asr sl
    8f54:	00374e18 	eorseq	r4, r7, r8, lsl lr
    8f58:	03071300 	movweq	r1, #29440	; 0x7300
    8f5c:	0017d907 	andseq	sp, r7, r7, lsl #18
    8f60:	f8180000 			; <UNDEFINED> instruction: 0xf8180000
    8f64:	1300000a 	movwne	r0, #10
    8f68:	11080308 	tstne	r8, r8, lsl #6
    8f6c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    8f70:	03bf0700 			; <UNDEFINED> instruction: 0x03bf0700
    8f74:	09130000 	ldmdbeq	r3, {}	; <UNPREDICTABLE>
    8f78:	1a2f0303 	bne	bc9b8c <__ccfg+0xba9be4>
    8f7c:	331a0000 	tstcc	sl, #0
    8f80:	30000000 	andcc	r0, r0, r0
    8f84:	08030b13 	stmdaeq	r3, {r0, r1, r4, r8, r9, fp}
    8f88:	00001ac6 	andeq	r1, r0, r6, asr #21
    8f8c:	0019f918 	andseq	pc, r9, r8, lsl r9	; <UNPREDICTABLE>
    8f90:	03141300 	tsteq	r4, #0, 6
    8f94:	0017d908 	andseq	sp, r7, r8, lsl #18
    8f98:	a4180000 	ldrge	r0, [r8], #-0
    8f9c:	13000008 	movwne	r0, #8
    8fa0:	d9080315 	stmdble	r8, {r0, r2, r4, r8, r9}
    8fa4:	02000017 	andeq	r0, r0, #23
    8fa8:	0048be18 	subeq	fp, r8, r8, lsl lr
    8fac:	03161300 	tsteq	r6, #0, 6
    8fb0:	0019d30b 	andseq	sp, r9, fp, lsl #6
    8fb4:	21180400 	tstcs	r8, r0, lsl #8
    8fb8:	13000043 	movwne	r0, #67	; 0x43
    8fbc:	11090317 	tstne	r9, r7, lsl r3
    8fc0:	08000018 	stmdaeq	r0, {r3, r4}
    8fc4:	00000718 	andeq	r0, r0, r8, lsl r7
    8fc8:	03181300 	tsteq	r8, #0, 6
    8fcc:	001ac60f 	andseq	ip, sl, pc, lsl #12
    8fd0:	22180c00 	andscs	r0, r8, #0, 24
    8fd4:	13000007 	movwne	r0, #7
    8fd8:	d6150319 			; <UNDEFINED> instruction: 0xd6150319
    8fdc:	2c00001a 	stccs	0, cr0, [r0], {26}
    8fe0:	1a560a00 	bne	158b7e8 <__ccfg+0x156b840>
    8fe4:	1ad60000 	bne	ff588fec <_estack+0xdf583fec>
    8fe8:	aa0b0000 	bge	2c8ff0 <__ccfg+0x2a9048>
    8fec:	03000000 	movweq	r0, #0
    8ff0:	63041100 	movwvs	r1, #16640	; 0x4100
    8ff4:	0700001a 	smladeq	r0, sl, r0, r0
    8ff8:	00000899 	muleq	r0, r9, r8
    8ffc:	1b031c13 	blne	d0050 <__ccfg+0xb00a8>
    9000:	00001a63 	andeq	r1, r0, r3, ror #20
    9004:	00087920 	andeq	r7, r8, r0, lsr #18
    9008:	031e1300 	tsteq	lr, #0, 6
    900c:	001af814 	andseq	pc, sl, r4, lsl r8	; <UNPREDICTABLE>
    9010:	11010100 	mrsne	r0, (UNDEF: 17)
    9014:	001adc04 	andseq	sp, sl, r4, lsl #24
    9018:	054a2500 	strbeq	r2, [sl, #-1280]	; 0xfffffb00
    901c:	1d140000 	ldcne	0, cr0, [r4, #-0]
    9020:	0017d913 	andseq	sp, r7, r3, lsl r9
    9024:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9028:	0000023e 	andeq	r0, r0, lr, lsr r2
    902c:	ea1a1e14 	b	690884 <__ccfg+0x6708dc>
    9030:	01000017 	tsteq	r0, r7, lsl r0
    9034:	08e62501 	stmiaeq	r6!, {r0, r8, sl, sp}^
    9038:	1e140000 	cdpne	0, 1, cr0, cr4, cr0, {0}
    903c:	0017ea24 	andseq	lr, r7, r4, lsr #20
    9040:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9044:	00000902 	andeq	r0, r0, r2, lsl #18
    9048:	f8142214 			; <UNDEFINED> instruction: 0xf8142214
    904c:	0100001a 	tsteq	r0, sl, lsl r0
    9050:	1b062501 	blne	19245c <__ccfg+0x1724b4>
    9054:	39150000 	ldmdbcc	r5, {}	; <UNPREDICTABLE>
    9058:	000f6d27 	andeq	r6, pc, r7, lsr #26
    905c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    9060:	00001db1 			; <UNDEFINED> instruction: 0x00001db1
    9064:	fe153a15 	mrc2	10, 0, r3, cr5, cr5, {0}	; <UNPREDICTABLE>
    9068:	01000009 	tsteq	r0, r9
    906c:	22172501 	andscs	r2, r7, #4194304	; 0x400000
    9070:	3b150000 	blcc	549078 <__ccfg+0x5290d0>
    9074:	000cec1a 	andeq	lr, ip, sl, lsl ip
    9078:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    907c:	000020aa 	andeq	r2, r0, sl, lsr #1
    9080:	881a3c15 	ldmdahi	sl, {r0, r2, r4, sl, fp, ip, sp}
    9084:	0100000d 	tsteq	r0, sp
    9088:	21af2301 			; <UNDEFINED> instruction: 0x21af2301
    908c:	24010000 	strcs	r0, [r1], #-0
    9090:	0000a30c 	andeq	sl, r0, ip, lsl #6
    9094:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    9098:	23200005 			; <UNDEFINED> instruction: 0x23200005
    909c:	00001a69 	andeq	r1, r0, r9, ror #20
    90a0:	ef0d2601 	svc	0x000d2601
    90a4:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    90a8:	0005d003 	andeq	sp, r5, r3
    90ac:	11242320 			; <UNDEFINED> instruction: 0x11242320
    90b0:	27010000 	strcs	r0, [r1, -r0]
    90b4:	0017ef03 	andseq	lr, r7, r3, lsl #30
    90b8:	c0030500 	andgt	r0, r3, r0, lsl #10
    90bc:	23200005 			; <UNDEFINED> instruction: 0x23200005
    90c0:	00001ede 	ldrdeq	r1, [r0], -lr
    90c4:	ef0d2a01 	svc	0x000d2a01
    90c8:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    90cc:	0005f203 	andeq	pc, r5, r3, lsl #4
    90d0:	1ed82320 	cdpne	3, 13, cr2, cr8, cr0, {1}
    90d4:	43010000 	movwmi	r0, #4096	; 0x1000
    90d8:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    90dc:	3a030500 	bcc	ca4e4 <__ccfg+0xaa53c>
    90e0:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    90e4:	00001b7f 	andeq	r1, r0, pc, ror fp
    90e8:	ef0d4701 	svc	0x000d4701
    90ec:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    90f0:	0005b803 	andeq	fp, r5, r3, lsl #16
    90f4:	17e50a20 	strbne	r0, [r5, r0, lsr #20]!
    90f8:	1bea0000 	blne	ffa89100 <_estack+0xdfa84100>
    90fc:	aa0b0000 	bge	2c9104 <__ccfg+0x2a915c>
    9100:	07000000 	streq	r0, [r0, -r0]
    9104:	1bda0400 	blne	ff68a10c <_estack+0xdf68510c>
    9108:	66230000 	strtvs	r0, [r3], -r0
    910c:	0100001f 	tsteq	r0, pc, lsl r0
    9110:	1bea134e 	blne	ffa8de50 <_estack+0xdfa88e50>
    9114:	03050000 	movweq	r0, #20480	; 0x5000
    9118:	00004596 	muleq	r0, r6, r5
    911c:	00221023 	eoreq	r1, r2, r3, lsr #32
    9120:	0d520100 	ldfeqe	f0, [r2, #-0]
    9124:	000017d9 	ldrdeq	r1, [r0], -r9
    9128:	05c80305 	strbeq	r0, [r8, #773]	; 0x305
    912c:	97232000 	strls	r2, [r3, -r0]!
    9130:	0100001e 	tsteq	r0, lr, lsl r0
    9134:	17d90353 			; <UNDEFINED> instruction: 0x17d90353
    9138:	03050000 	movweq	r0, #20480	; 0x5000
    913c:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    9140:	0020e523 	eoreq	lr, r0, r3, lsr #10
    9144:	03540100 	cmpeq	r4, #0, 2
    9148:	000017d9 	ldrdeq	r1, [r0], -r9
    914c:	05b60305 	ldreq	r0, [r6, #773]!	; 0x305
    9150:	a6232000 	strtge	r2, [r3], -r0
    9154:	0100001a 	tsteq	r0, sl, lsl r0
    9158:	17d90355 			; <UNDEFINED> instruction: 0x17d90355
    915c:	03050000 	movweq	r0, #20480	; 0x5000
    9160:	20000038 	andcs	r0, r0, r8, lsr r0
    9164:	5901040c 	stmdbpl	r1, {r2, r3, sl}
    9168:	001c6b09 	andseq	r6, ip, r9, lsl #22
    916c:	73701000 	cmnvc	r0, #0
    9170:	085a0100 	ldmdaeq	sl, {r8}^
    9174:	000017d9 	ldrdeq	r1, [r0], -r9
    9178:	77721000 	ldrbvc	r1, [r2, -r0]!
    917c:	045b0100 	ldrbeq	r0, [fp], #-256	; 0xffffff00
    9180:	000017d9 	ldrdeq	r1, [r0], -r9
    9184:	26020002 	strcs	r0, [r2], -r2
    9188:	0100001e 	tsteq	r0, lr, lsl r0
    918c:	1c49035c 	mcrrne	3, 5, r0, r9, cr12
    9190:	6b040000 	blvs	109198 <__ccfg+0xe91f0>
    9194:	0a00001c 	beq	920c <__exidx_end+0x42e0>
    9198:	00001c77 	andeq	r1, r0, r7, ror ip
    919c:	00001c8c 	andeq	r1, r0, ip, lsl #25
    91a0:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    91a4:	04000200 	streq	r0, [r0], #-512	; 0xfffffe00
    91a8:	00001c7c 	andeq	r1, r0, ip, ror ip
    91ac:	001e5823 	andseq	r5, lr, r3, lsr #16
    91b0:	185e0100 	ldmdane	lr, {r8}^
    91b4:	00001c8c 	andeq	r1, r0, ip, lsl #25
    91b8:	4ee80305 	cdpmi	3, 14, cr0, cr8, cr5, {0}
    91bc:	8e230000 	cdphi	0, 2, cr0, cr3, cr0, {0}
    91c0:	0100001f 	tsteq	r0, pc, lsl r0
    91c4:	10761b66 	rsbsne	r1, r6, r6, ror #22
    91c8:	03050000 	movweq	r0, #20480	; 0x5000
    91cc:	200005e4 	andcs	r0, r0, r4, ror #11
    91d0:	0020d123 	eoreq	sp, r0, r3, lsr #2
    91d4:	0e690100 	poweqe	f0, f1, f0
    91d8:	00001811 	andeq	r1, r0, r1, lsl r8
    91dc:	05bc0305 	ldreq	r0, [ip, #773]!	; 0x305
    91e0:	1e232000 	cdpne	0, 2, cr2, cr3, cr0, {0}
    91e4:	0100001b 	tsteq	r0, fp, lsl r0
    91e8:	18111769 	ldmdane	r1, {r0, r3, r5, r6, r8, r9, sl, ip}
    91ec:	03050000 	movweq	r0, #20480	; 0x5000
    91f0:	200005cc 	andcs	r0, r0, ip, asr #11
    91f4:	00213823 	eoreq	r3, r1, r3, lsr #16
    91f8:	21780100 	cmncs	r8, r0, lsl #2
    91fc:	00000ac1 	andeq	r0, r0, r1, asr #21
    9200:	00240305 	eoreq	r0, r4, r5, lsl #6
    9204:	a2232000 	eorge	r2, r3, #0
    9208:	0100001c 	tsteq	r0, ip, lsl r0
    920c:	0e721a83 	vaddeq.f32	s3, s5, s6
    9210:	03050000 	movweq	r0, #20480	; 0x5000
    9214:	20000008 	andcs	r0, r0, r8
    9218:	001a0623 	andseq	r0, sl, r3, lsr #12
    921c:	11c10100 	bicne	r0, r1, r0, lsl #2
    9220:	0000177e 	andeq	r1, r0, lr, ror r7
    9224:	05d40305 	ldrbeq	r0, [r4, #773]	; 0x305
    9228:	f8272000 			; <UNDEFINED> instruction: 0xf8272000
    922c:	0100001f 	tsteq	r0, pc, lsl r0
    9230:	a30c020a 	movwge	r0, #49674	; 0xc20a
    9234:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    9238:	001b2d01 	andseq	r2, fp, r1, lsl #26
    923c:	03d70100 	bicseq	r0, r7, #0, 2
    9240:	26480106 	strbcs	r0, [r8], -r6, lsl #2
    9244:	27bc0000 	ldrcs	r0, [ip, r0]!
    9248:	9c010000 	stcls	0, cr0, [r1], {-0}
    924c:	00001da5 	andeq	r1, r0, r5, lsr #27
    9250:	79687029 	stmdbvc	r8!, {r0, r3, r5, ip, sp, lr}^
    9254:	03d70100 	bicseq	r0, r7, #0, 2
    9258:	0000a317 	andeq	sl, r0, r7, lsl r3
    925c:	00248500 	eoreq	r8, r4, r0, lsl #10
    9260:	626d2900 	rsbvs	r2, sp, #0, 18
    9264:	d7010073 	smlsdxle	r1, r3, r0, r0
    9268:	00a32003 	adceq	r2, r3, r3
    926c:	24cf0000 	strbcs	r0, [pc], #0	; 9274 <__exidx_end+0x4348>
    9270:	352a0000 	strcc	r0, [sl, #-0]!
    9274:	6c00001e 	stcvs	0, cr0, [r0], {30}
    9278:	08000026 	stmdaeq	r0, {r1, r2, r5}
    927c:	0100000d 	tsteq	r0, sp
    9280:	930203f0 	movwls	r0, #9200	; 0x23f0
    9284:	2b00001d 	blcs	9300 <__exidx_end+0x43d4>
    9288:	00000d08 	andeq	r0, r0, r8, lsl #26
    928c:	001e432c 	andseq	r4, lr, ip, lsr #6
    9290:	1e4e2d00 	cdpne	13, 4, cr2, cr14, cr0, {0}
    9294:	24f80000 	ldrbtcs	r0, [r8], #0
    9298:	5a2d0000 	bpl	b492a0 <__ccfg+0xb292f8>
    929c:	1700001e 	smladne	r0, lr, r0, r0
    92a0:	2d000025 	stccs	0, cr0, [r0, #-148]	; 0xffffff6c
    92a4:	00001e66 	andeq	r1, r0, r6, ror #28
    92a8:	00002540 	andeq	r2, r0, r0, asr #10
    92ac:	cc2e0000 	stcgt	0, cr0, [lr], #-0
    92b0:	2200001f 	andcs	r0, r0, #31
    92b4:	48000027 	stmdami	r0, {r0, r1, r2, r5}
    92b8:	0100000d 	tsteq	r0, sp
    92bc:	00020414 	andeq	r0, r2, r4, lsl r4
    92c0:	001dcd2f 	andseq	ip, sp, pc, lsr #26
    92c4:	034a0100 	movteq	r0, #41216	; 0xa100
    92c8:	00a3010c 	adceq	r0, r3, ip, lsl #2
    92cc:	1f080000 	svcne	0x00080000
    92d0:	20980000 	addscs	r0, r8, r0
    92d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    92d8:	00001e35 	andeq	r1, r0, r5, lsr lr
    92dc:	74706f29 	ldrbtvc	r6, [r0], #-3881	; 0xfffff0d7
    92e0:	034a0100 	movteq	r0, #41216	; 0xa100
    92e4:	0000a318 	andeq	sl, r0, r8, lsl r3
    92e8:	00257400 	eoreq	r7, r5, r0, lsl #8
    92ec:	61762900 	cmnvs	r6, r0, lsl #18
    92f0:	4a01006c 	bmi	494a8 <__ccfg+0x29500>
    92f4:	181d2503 	ldmdane	sp, {r0, r1, r8, sl, sp}
    92f8:	26000000 	strcs	r0, [r0], -r0
    92fc:	72300000 	eorsvc	r0, r0, #0
    9300:	01007465 	tsteq	r0, r5, ror #8
    9304:	a306034c 	movwge	r0, #25420	; 0x634c
    9308:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    930c:	31000026 	tstcc	r0, r6, lsr #32
    9310:	00001cbd 			; <UNDEFINED> instruction: 0x00001cbd
    9314:	0103cf01 	tsteq	r3, r1, lsl #30
    9318:	00001f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    931c:	001ec631 	andseq	ip, lr, r1, lsr r6
    9320:	03580100 	cmpeq	r8, #0, 2
    9324:	001f4a01 	andseq	r4, pc, r1, lsl #20
    9328:	20723100 	rsbscs	r3, r2, r0, lsl #2
    932c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    9330:	1f940103 	svcne	0x00940103
    9334:	4a320000 	bmi	c8933c <__ccfg+0xc69394>
    9338:	7400001f 	strvc	r0, [r0], #-31	; 0xffffffe1
    933c:	3000001f 	andcc	r0, r0, pc, lsl r0
    9340:	5901006a 	stmdbpl	r1, {r1, r3, r5, r6}
    9344:	00a30403 	adceq	r0, r3, r3, lsl #8
    9348:	27020000 	strcs	r0, [r2, -r0]
    934c:	00000000 	andeq	r0, r0, r0
    9350:	001d3c33 	andseq	r3, sp, r3, lsr ip
    9354:	03070100 	movweq	r0, #28928	; 0x7100
    9358:	1e73010d 	rpwnes	f0, f3, #5.0
    935c:	69340000 	ldmdbvs	r4!, {}	; <UNPREDICTABLE>
    9360:	030b0100 	movweq	r0, #45312	; 0xb100
    9364:	0000a306 	andeq	sl, r0, r6, lsl #6
    9368:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    936c:	030c0100 	movweq	r0, #49408	; 0xc100
    9370:	001e731a 	andseq	r7, lr, sl, lsl r3
    9374:	61643400 	cmnvs	r4, r0, lsl #8
    9378:	030c0100 	movweq	r0, #49408	; 0xc100
    937c:	001e731f 	andseq	r7, lr, pc, lsl r3
    9380:	62643400 	rsbvs	r3, r4, #0, 8
    9384:	030c0100 	movweq	r0, #49408	; 0xc100
    9388:	001e7324 	andseq	r7, lr, r4, lsr #6
    938c:	04110000 	ldreq	r0, [r1], #-0
    9390:	000016ab 	andeq	r1, r0, fp, lsr #13
    9394:	1b390128 	blne	e4983c <__ccfg+0xe29894>
    9398:	0d010000 	stceq	0, cr0, [r1, #-0]
    939c:	e8010102 	stmda	r1, {r1, r8}
    93a0:	d8000023 	stmdale	r0, {r0, r1, r5}
    93a4:	01000025 	tsteq	r0, r5, lsr #32
    93a8:	001efd9c 	mulseq	lr, ip, sp
    93ac:	08c83500 	stmiaeq	r8, {r8, sl, ip, sp}^
    93b0:	0d010000 	stceq	0, cr0, [r1, #-0]
    93b4:	17d90102 	ldrbne	r0, [r9, r2, lsl #2]
    93b8:	27150000 	ldrcs	r0, [r5, -r0]
    93bc:	70310000 	eorsvc	r0, r1, r0
    93c0:	0100001a 	tsteq	r0, sl, lsl r0
    93c4:	fc010216 	stc2	2, cr0, [r1], {22}
    93c8:	2e000023 	cdpcs	0, 0, cr0, cr0, cr3, {1}
    93cc:	00002023 	andeq	r2, r0, r3, lsr #32
    93d0:	0000245e 	andeq	r2, r0, lr, asr r4
    93d4:	00000ca8 	andeq	r0, r0, r8, lsr #25
    93d8:	04022501 	streq	r2, [r2], #-1281	; 0xfffffaff
    93dc:	001ff32a 	andseq	pc, pc, sl, lsr #6
    93e0:	00246200 	eoreq	r6, r4, r0, lsl #4
    93e4:	000cc000 	andeq	ip, ip, r0
    93e8:	02260100 	eoreq	r0, r6, #0, 2
    93ec:	001eeb04 	andseq	lr, lr, r4, lsl #22
    93f0:	0cc02b00 	vstmiaeq	r0, {d18-d17}
    93f4:	012d0000 			; <UNDEFINED> instruction: 0x012d0000
    93f8:	3e000020 	cdpcc	0, 0, cr0, cr0, cr0, {1}
    93fc:	2c000027 	stccs	0, cr0, [r0], {39}	; 0x27
    9400:	0000200d 	andeq	r2, r0, sp
    9404:	23360000 	teqcs	r6, #0
    9408:	e6000020 	str	r0, [r0], -r0, lsr #32
    940c:	f0000024 			; <UNDEFINED> instruction: 0xf0000024
    9410:	01000024 	tsteq	r0, r4, lsr #32
    9414:	00030265 	andeq	r0, r3, r5, ror #4
    9418:	20b70128 	adcscs	r0, r7, r8, lsr #2
    941c:	ec010000 	stc	0, cr0, [r1], {-0}
    9420:	d8010601 	stmdale	r1, {r0, r9, sl}
    9424:	48000025 	stmdami	r0, {r0, r2, r5}
    9428:	01000026 	tsteq	r0, r6, lsr #32
    942c:	001f629c 	mulseq	pc, ip, r2	; <UNPREDICTABLE>
    9430:	0cf03700 	ldcleq	7, cr3, [r0]
    9434:	1f2f0000 	svcne	0x002f0000
    9438:	6a300000 	bvs	c09440 <__ccfg+0xbe9498>
    943c:	01fe0100 	mvnseq	r0, r0, lsl #2
    9440:	0000a302 	andeq	sl, r0, r2, lsl #6
    9444:	00275d00 	eoreq	r5, r7, r0, lsl #26
    9448:	d5380000 	ldrle	r0, [r8, #-0]!
    944c:	ec000021 	stc	0, cr0, [r0], {33}	; 0x21
    9450:	f6000025 			; <UNDEFINED> instruction: 0xf6000025
    9454:	01000025 	tsteq	r0, r5, lsr #32
    9458:	4a0201f8 	bmi	89c40 <__ccfg+0x69c98>
    945c:	3900001f 	stmdbcc	r0, {r0, r1, r2, r3, r4}
    9460:	000021e4 	andeq	r2, r0, r4, ror #3
    9464:	21f23a00 	mvnscs	r3, r0, lsl #20
    9468:	25f60000 	ldrbcs	r0, [r6, #0]!
    946c:	0cd80000 	ldcleq	0, cr0, [r8], {0}
    9470:	fb010000 	blx	4947a <__ccfg+0x294d2>
    9474:	00390201 	eorseq	r0, r9, r1, lsl #4
    9478:	00000022 	andeq	r0, r0, r2, lsr #32
    947c:	1ef63b00 	vmovne.f64	d19, #96	; 0x3f000000  0.5
    9480:	b5010000 	strlt	r0, [r1, #-0]
    9484:	23180d01 	tstcs	r8, #1, 26	; 0x40
    9488:	23e80000 	mvncs	r0, #0
    948c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9490:	00001fcc 	andeq	r1, r0, ip, asr #31
    9494:	00626430 	rsbeq	r6, r2, r0, lsr r4
    9498:	1a01b701 	bne	770a4 <__ccfg+0x570fc>
    949c:	00001e73 	andeq	r1, r0, r3, ror lr
    94a0:	00002770 	andeq	r2, r0, r0, ror r7
    94a4:	01006934 	tsteq	r0, r4, lsr r9
    94a8:	a30601b8 	movwge	r0, #25016	; 0x61b8
    94ac:	30000000 	andcc	r0, r0, r0
    94b0:	01006c70 	tsteq	r0, r0, ror ip
    94b4:	a30901b8 	movwge	r0, #37304	; 0x91b8
    94b8:	b2000000 	andlt	r0, r0, #0
    94bc:	30000027 	andcc	r0, r0, r7, lsr #32
    94c0:	0100726e 	tsteq	r0, lr, ror #4
    94c4:	a30d01b8 	movwge	r0, #53688	; 0xd1b8
    94c8:	c5000000 	strgt	r0, [r0, #-0]
    94cc:	3a000027 	bcc	9570 <__exidx_end+0x4644>
    94d0:	0000220d 	andeq	r2, r0, sp, lsl #4
    94d4:	00002318 	andeq	r2, r0, r8, lsl r3
    94d8:	00000c78 	andeq	r0, r0, r8, ror ip
    94dc:	0201c101 	andeq	ip, r1, #1073741824	; 0x40000000
    94e0:	00221b39 	eoreq	r1, r2, r9, lsr fp
    94e4:	3c000000 	stccc	0, cr0, [r0], {-0}
    94e8:	00001e3b 	andeq	r1, r0, fp, lsr lr
    94ec:	0d01ab01 	vstreq	d10, [r1, #-4]
    94f0:	1e513d01 	cdpne	13, 5, cr3, cr1, cr1, {0}
    94f4:	a0010000 	andge	r0, r1, r0
    94f8:	1ee80d01 	cdpne	13, 14, cr0, cr8, cr1, {0}
    94fc:	1f080000 	svcne	0x00080000
    9500:	9c010000 	stcls	0, cr0, [r1], {-0}
    9504:	001ef03c 	andseq	pc, lr, ip, lsr r0	; <UNPREDICTABLE>
    9508:	01950100 	orrseq	r0, r5, r0, lsl #2
    950c:	ff33010d 			; <UNDEFINED> instruction: 0xff33010d
    9510:	0100001c 	tsteq	r0, ip, lsl r0
    9514:	010d0180 	smlabbeq	sp, r0, r1, r0
    9518:	00002019 	andeq	r2, r0, r9, lsl r0
    951c:	00657234 	rsbeq	r7, r5, r4, lsr r2
    9520:	1a018401 	bne	6a52c <__ccfg+0x4a584>
    9524:	00001e73 	andeq	r1, r0, r3, ror lr
    9528:	01006934 	tsteq	r0, r4, lsr r9
    952c:	a3060185 	movwge	r0, #24965	; 0x6185
    9530:	00000000 	andeq	r0, r0, r0
    9534:	001d963c 	andseq	r9, sp, ip, lsr r6
    9538:	01610100 	cmneq	r1, r0, lsl #2
    953c:	003e010d 	eorseq	r0, lr, sp, lsl #2
    9540:	0100001a 	tsteq	r0, sl, lsl r0
    9544:	3f010dff 	svccc	0x00010dff
    9548:	00001acc 	andeq	r1, r0, ip, asr #21
    954c:	010de201 	tsteq	sp, r1, lsl #4
    9550:	00205f01 	eoreq	r5, r0, r1, lsl #30
    9554:	6d634000 	stclvs	0, cr4, [r3, #-0]
    9558:	e2010064 	and	r0, r1, #100	; 0x64
    955c:	000bc026 	andeq	ip, fp, r6, lsr #32
    9560:	21c24100 	biccs	r4, r2, r0, lsl #2
    9564:	e2010000 	and	r0, r1, #0
    9568:	00180031 	andseq	r0, r8, r1, lsr r0
    956c:	20c94100 	sbccs	r4, r9, r0, lsl #2
    9570:	e2010000 	and	r0, r1, #0
    9574:	0018003e 	andseq	r0, r8, lr, lsr r0
    9578:	d33f0000 	teqle	pc, #0
    957c:	01000019 	tsteq	r0, r9, lsl r0
    9580:	01010dc5 	smlabteq	r1, r5, sp, r0
    9584:	00002092 	muleq	r0, r2, r0
    9588:	646d6340 	strbtvs	r6, [sp], #-832	; 0xfffffcc0
    958c:	1ec50100 	polnes	f0, f5, f0
    9590:	00001800 	andeq	r1, r0, r0, lsl #16
    9594:	73657242 	cmnvc	r5, #536870916	; 0x20000004
    9598:	06ca0100 	strbeq	r0, [sl], r0, lsl #2
    959c:	000000a3 	andeq	r0, r0, r3, lsr #1
    95a0:	746e6342 	strbtvc	r6, [lr], #-834	; 0xfffffcbe
    95a4:	06cd0100 	strbeq	r0, [sp], r0, lsl #2
    95a8:	000000a3 	andeq	r0, r0, r3, lsr #1
    95ac:	0db74300 	ldceq	3, cr4, [r7]
    95b0:	54030000 	strpl	r0, [r3], #-0
    95b4:	03010101 	movweq	r0, #4353	; 0x1101
    95b8:	000020af 	andeq	r2, r0, pc, lsr #1
    95bc:	000c4c44 	andeq	r4, ip, r4, asr #24
    95c0:	01540300 	cmpeq	r4, r0, lsl #6
    95c4:	00007f19 	andeq	r7, r0, r9, lsl pc
    95c8:	bc430000 	marlt	acc0, r0, r3
    95cc:	0300000e 	movweq	r0, #14
    95d0:	0101011e 	tsteq	r1, lr, lsl r1
    95d4:	0020cc03 	eoreq	ip, r0, r3, lsl #24
    95d8:	0c4c4400 	cfstrdeq	mvd4, [ip], {-0}
    95dc:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    95e0:	007f1701 	rsbseq	r1, pc, r1, lsl #14
    95e4:	43000000 	movwmi	r0, #0
    95e8:	00002058 	andeq	r2, r0, r8, asr r0
    95ec:	1501ea05 	strne	lr, [r1, #-2565]	; 0xfffff5fb
    95f0:	21610301 	cmncs	r1, r1, lsl #6
    95f4:	70340000 	eorsvc	r0, r4, r0
    95f8:	f2050053 	vqadd.s8	q0, <illegal reg q2.5>, <illegal reg q1.5>
    95fc:	21611401 	cmncs	r1, r1, lsl #8
    9600:	70340000 	eorsvc	r0, r4, r0
    9604:	f3050044 	vhadd.u8	q0, <illegal reg q2.5>, q2
    9608:	21671c01 	cmncs	r7, r1, lsl #24
    960c:	74340000 	ldrtvc	r0, [r4], #-0
    9610:	f4050031 	vst4.8	{d0-d3}, [r5 :256], r1
    9614:	007f0d01 	rsbseq	r0, pc, r1, lsl #26
    9618:	74340000 	ldrtvc	r0, [r4], #-0
    961c:	f4050032 	vst4.8	{d0-d3}, [r5 :256], r2
    9620:	007f1101 	rsbseq	r1, pc, r1, lsl #2
    9624:	74340000 	ldrtvc	r0, [r4], #-0
    9628:	f4050033 	vst4.8	{d0-d3}, [r5 :256], r3
    962c:	007f1501 	rsbseq	r1, pc, r1, lsl #10
    9630:	74340000 	ldrtvc	r0, [r4], #-0
    9634:	f4050034 	vst4.8	{d0-d3}, [r5 :256], r4
    9638:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    963c:	74340000 	ldrtvc	r0, [r4], #-0
    9640:	f4050035 	vst4.8	{d0-d3}, [r5 :256], r5
    9644:	007f1d01 	rsbseq	r1, pc, r1, lsl #26
    9648:	74340000 	ldrtvc	r0, [r4], #-0
    964c:	f4050036 	vst4.8	{d0-d3}, [r5 :256], r6
    9650:	007f2101 	rsbseq	r2, pc, r1, lsl #2
    9654:	74340000 	ldrtvc	r0, [r4], #-0
    9658:	f4050037 	vst4.8	{d0-d3}, [r5 :256], r7
    965c:	007f2501 	rsbseq	r2, pc, r1, lsl #10
    9660:	74340000 	ldrtvc	r0, [r4], #-0
    9664:	f4050038 	vst4.8	{d0-d3}, [r5 :256], r8
    9668:	007f2901 	rsbseq	r2, pc, r1, lsl #18
    966c:	92270000 	eorls	r0, r7, #0
    9670:	05000020 	streq	r0, [r0, #-32]	; 0xffffffe0
    9674:	7f0d01f5 	svcvc	0x000d01f5
    9678:	00000000 	andeq	r0, r0, r0
    967c:	008b0411 	addeq	r0, fp, r1, lsl r4
    9680:	04110000 	ldreq	r0, [r1], #-0
    9684:	00000097 	muleq	r0, r7, r0
    9688:	001e9e45 	andseq	r9, lr, r5, asr #28
    968c:	012f0400 			; <UNDEFINED> instruction: 0x012f0400
    9690:	45030115 	strmi	r0, [r3, #-277]	; 0xfffffeeb
    9694:	00001b6e 	andeq	r1, r0, lr, ror #22
    9698:	15012204 	strne	r2, [r1, #-516]	; 0xfffffdfc
    969c:	25430301 	strbcs	r0, [r3, #-769]	; 0xfffffcff
    96a0:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    96a4:	01150111 	tsteq	r5, r1, lsl r1
    96a8:	0021ad03 	eoreq	sl, r1, r3, lsl #26
    96ac:	21252700 			; <UNDEFINED> instruction: 0x21252700
    96b0:	13040000 	movwne	r0, #16384	; 0x4000
    96b4:	09840d01 	stmibeq	r4, {r0, r8, sl, fp}
    96b8:	dc270000 	stcle	0, cr0, [r7], #-0
    96bc:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    96c0:	c60e0114 			; <UNDEFINED> instruction: 0xc60e0114
    96c4:	0000000b 	andeq	r0, r0, fp
    96c8:	0021d045 	eoreq	sp, r1, r5, asr #32
    96cc:	010d0400 	tsteq	sp, r0, lsl #8
    96d0:	43030115 	movwmi	r0, #12565	; 0x3115
    96d4:	00002169 	andeq	r2, r0, r9, ror #2
    96d8:	15010404 	strne	r0, [r1, #-1028]	; 0xfffffbfc
    96dc:	21d50301 	bicscs	r0, r5, r1, lsl #6
    96e0:	e6270000 	strt	r0, [r7], -r0
    96e4:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    96e8:	c60e0106 	strgt	r0, [lr], -r6, lsl #2
    96ec:	0000000b 	andeq	r0, r0, fp
    96f0:	001e4243 	andseq	r4, lr, r3, asr #4
    96f4:	011d0200 	tsteq	sp, r0, lsl #4
    96f8:	f2030101 	vrhadd.s8	d0, d3, d1
    96fc:	44000021 	strmi	r0, [r0], #-33	; 0xffffffdf
    9700:	00001d05 	andeq	r1, r0, r5, lsl #26
    9704:	19011d02 	stmdbne	r1, {r1, r8, sl, fp, ip}
    9708:	0000007f 	andeq	r0, r0, pc, ror r0
    970c:	1bf03f00 	blne	ffc19314 <_estack+0xdfc14314>
    9710:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    9714:	0d030101 	stfeqs	f0, [r3, #-4]
    9718:	41000022 	tstmi	r0, r2, lsr #32
    971c:	00001d05 	andeq	r1, r0, r5, lsl #26
    9720:	7f1bf702 	svcvc	0x001bf702
    9724:	00000000 	andeq	r0, r0, r0
    9728:	001c243f 	andseq	r2, ip, pc, lsr r4
    972c:	01aa0200 			; <UNDEFINED> instruction: 0x01aa0200
    9730:	22280301 	eorcs	r0, r8, #67108864	; 0x4000000
    9734:	05410000 	strbeq	r0, [r1, #-0]
    9738:	0200001d 	andeq	r0, r0, #29
    973c:	007f1baa 	rsbseq	r1, pc, sl, lsr #23
    9740:	46000000 	strmi	r0, [r0], -r0
    9744:	00001fdc 	ldrdeq	r1, [r0], -ip
    9748:	01019c02 	tsteq	r1, r2, lsl #24
    974c:	222c4603 	eorcs	r4, ip, #3145728	; 0x300000
    9750:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
    9754:	47030101 	strmi	r0, [r3, -r1, lsl #2]
    9758:	0000205f 	andeq	r2, r0, pc, asr r0
    975c:	00002098 	muleq	r0, r8, r0
    9760:	000020e0 	andeq	r2, r0, r0, ror #1
    9764:	228b9c01 	addcs	r9, fp, #256	; 0x100
    9768:	6d480000 	stclvs	0, cr0, [r8, #-0]
    976c:	e3000020 	movw	r0, #32
    9770:	2d000027 	stccs	0, cr0, [r0, #-156]	; 0xffffff64
    9774:	00002079 	andeq	r2, r0, r9, ror r0
    9778:	00002801 	andeq	r2, r0, r1, lsl #16
    977c:	0020852c 	eoreq	r8, r0, ip, lsr #10
    9780:	205f4900 	subscs	r4, pc, r0, lsl #18
    9784:	20ae0000 	adccs	r0, lr, r0
    9788:	20b00000 	adcscs	r0, r0, r0
    978c:	c5010000 	strgt	r0, [r1, #-0]
    9790:	206d480d 	rsbcs	r4, sp, sp, lsl #16
    9794:	28350000 	ldmdacs	r5!, {}	; <UNPREDICTABLE>
    9798:	792c0000 	stmdbvc	ip!, {}	; <UNPREDICTABLE>
    979c:	2c000020 	stccs	0, cr0, [r0], {32}
    97a0:	00002085 	andeq	r2, r0, r5, lsl #1
    97a4:	e9470000 	stmdb	r7, {}^	; <UNPREDICTABLE>
    97a8:	e000001f 	and	r0, r0, pc, lsl r0
    97ac:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    97b0:	01000021 	tsteq	r0, r1, lsr #32
    97b4:	0022b09c 	mlaeq	r2, ip, r0, fp
    97b8:	1fe93600 	svcne	0x00e93600
    97bc:	20ea0000 	rsccs	r0, sl, r0
    97c0:	20f80000 	rscscs	r0, r8, r0
    97c4:	95010000 	strls	r0, [r1, #-0]
    97c8:	47000d01 	strmi	r0, [r0, -r1, lsl #26]
    97cc:	00002019 	andeq	r2, r0, r9, lsl r0
    97d0:	00002104 	andeq	r2, r0, r4, lsl #2
    97d4:	00002160 	andeq	r2, r0, r0, ror #2
    97d8:	23199c01 	tstcs	r9, #256	; 0x100
    97dc:	194a0000 	stmdbne	sl, {}^	; <UNPREDICTABLE>
    97e0:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
    97e4:	4a000021 	bmi	9870 <__exidx_end+0x4944>
    97e8:	01000021 	tsteq	r0, r1, lsr #32
    97ec:	2e0d0161 	adfcsez	f0, f5, f1
    97f0:	00002228 	andeq	r2, r0, r8, lsr #4
    97f4:	0000210e 	andeq	r2, r0, lr, lsl #2
    97f8:	00000be8 	andeq	r0, r0, r8, ror #23
    97fc:	02016f01 	andeq	r6, r1, #1, 30
    9800:	00209238 	eoreq	r9, r0, r8, lsr r2
    9804:	00213600 	eoreq	r3, r1, r0, lsl #12
    9808:	00213e00 	eoreq	r3, r1, r0, lsl #28
    980c:	017a0100 	cmneq	sl, r0, lsl #2
    9810:	00230002 	eoreq	r0, r3, r2
    9814:	20a13900 	adccs	r3, r1, r0, lsl #18
    9818:	4a000000 	bmi	9820 <__exidx_end+0x48f4>
    981c:	00002092 	muleq	r0, r2, r0
    9820:	0000213e 	andeq	r2, r0, lr, lsr r1
    9824:	00002142 	andeq	r2, r0, r2, asr #2
    9828:	02017a01 	andeq	r7, r1, #4096	; 0x1000
    982c:	0020a139 	eoreq	sl, r0, r9, lsr r1
    9830:	00000000 	andeq	r0, r0, r0
    9834:	00202c47 	eoreq	r2, r0, r7, asr #24
    9838:	00216000 	eoreq	r6, r1, r0
    983c:	00219800 	eoreq	r9, r1, r0, lsl #16
    9840:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    9844:	48000023 	stmdami	r0, {r0, r1, r5}
    9848:	0000203a 	andeq	r2, r0, sl, lsr r0
    984c:	00002848 	andeq	r2, r0, r8, asr #16
    9850:	00204648 	eoreq	r4, r0, r8, asr #12
    9854:	00286600 	eoreq	r6, r8, r0, lsl #12
    9858:	20523900 	subscs	r3, r2, r0, lsl #18
    985c:	4b000000 	blmi	9864 <__exidx_end+0x4938>
    9860:	00002023 	andeq	r2, r0, r3, lsr #32
    9864:	00002198 	muleq	r0, r8, r1
    9868:	00002318 	andeq	r2, r0, r8, lsl r3
    986c:	af2a9c01 	svcge	0x002a9c01
    9870:	98000020 	stmdals	r0, {r5}
    9874:	08000021 	stmdaeq	r0, {r0, r5}
    9878:	0100000c 	tsteq	r0, ip
    987c:	6e020108 	adfvss	f0, f2, #0.0
    9880:	39000023 	stmdbcc	r0, {r0, r1, r5}
    9884:	000020be 	strheq	r2, [r0], -lr
    9888:	20af3800 	adccs	r3, pc, r0, lsl #16
    988c:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    9890:	21a80000 			; <UNDEFINED> instruction: 0x21a80000
    9894:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    9898:	23890201 	orrcs	r0, r9, #268435456	; 0x10000000
    989c:	be390000 	cdplt	0, 3, cr0, cr9, cr0, {0}
    98a0:	00000020 	andeq	r0, r0, r0, lsr #32
    98a4:	0022322e 	eoreq	r3, r2, lr, lsr #4
    98a8:	0021c600 	eoreq	ip, r1, r0, lsl #12
    98ac:	000c2000 	andeq	r2, ip, r0
    98b0:	011a0100 	tsteq	sl, r0, lsl #2
    98b4:	216d2a02 	cmncs	sp, r2, lsl #20
    98b8:	21d40000 	bicscs	r0, r4, r0
    98bc:	0c380000 	ldceq	0, cr0, [r8], #-0
    98c0:	21010000 	mrscs	r0, (UNDEF: 1)
    98c4:	240b0201 	strcs	r0, [fp], #-513	; 0xfffffdff
    98c8:	783a0000 	ldmdavc	sl!, {}	; <UNPREDICTABLE>
    98cc:	d4000021 	strle	r0, [r0], #-33	; 0xffffffdf
    98d0:	38000021 	stmdacc	r0, {r0, r5}
    98d4:	0400000c 	streq	r0, [r0], #-12
    98d8:	38040131 	stmdacc	r4, {r0, r4, r5, r8}
    98dc:	000021b8 			; <UNDEFINED> instruction: 0x000021b8
    98e0:	000021d4 	ldrdeq	r2, [r0], -r4
    98e4:	000021e0 	andeq	r2, r0, r0, ror #3
    98e8:	04012504 	streq	r2, [r1], #-1284	; 0xfffffafc
    98ec:	000023df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    98f0:	0021c74c 	eoreq	ip, r1, ip, asr #14
    98f4:	00041c00 	andeq	r1, r4, r0, lsl #24
    98f8:	833a0021 	teqhi	sl, #33	; 0x21
    98fc:	e0000021 	and	r0, r0, r1, lsr #32
    9900:	40000021 	andmi	r0, r0, r1, lsr #32
    9904:	0400000c 	streq	r0, [r0], #-12
    9908:	2b040126 	blcs	109da8 <__ccfg+0xe9e00>
    990c:	00000c40 	andeq	r0, r0, r0, asr #24
    9910:	0021924c 	eoreq	r9, r1, ip, asr #4
    9914:	00034000 	andeq	r4, r3, r0
    9918:	219f4c21 	orrscs	r4, pc, r1, lsr #24
    991c:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
    9920:	00002100 	andeq	r2, r0, r0, lsl #2
    9924:	cc3a0000 	ldcgt	0, cr0, [sl], #-0
    9928:	e4000020 	str	r0, [r0], #-32	; 0xffffffe0
    992c:	58000021 	stmdapl	r0, {r0, r5}
    9930:	0100000c 	tsteq	r0, ip
    9934:	2b020122 	blcs	89dc4 <__ccfg+0x69e1c>
    9938:	00000c58 	andeq	r0, r0, r8, asr ip
    993c:	0020db2d 	eoreq	sp, r0, sp, lsr #22
    9940:	00288400 	eoreq	r8, r8, r0, lsl #8
    9944:	20e72d00 	rsccs	r2, r7, r0, lsl #26
    9948:	28970000 	ldmcs	r7, {}	; <UNPREDICTABLE>
    994c:	f32c0000 	vhadd.u32	d0, d12, d0
    9950:	2d000020 	stccs	0, cr0, [r0, #-128]	; 0xffffff80
    9954:	000020ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    9958:	000028b5 			; <UNDEFINED> instruction: 0x000028b5
    995c:	00210b2c 	eoreq	r0, r1, ip, lsr #22
    9960:	21172d00 	tstcs	r7, r0, lsl #26
    9964:	28c80000 	stmiacs	r8, {}^	; <UNPREDICTABLE>
    9968:	232c0000 			; <UNDEFINED> instruction: 0x232c0000
    996c:	2d000021 	stccs	0, cr0, [r0, #-132]	; 0xffffff7c
    9970:	0000212f 	andeq	r2, r0, pc, lsr #2
    9974:	000028db 	ldrdeq	r2, [r0], -fp
    9978:	00213b2d 	eoreq	r3, r1, sp, lsr #22
    997c:	0028ee00 	eoreq	lr, r8, r0, lsl #28
    9980:	21472d00 	cmpcs	r7, r0, lsl #26
    9984:	29190000 	ldmdbcs	r9, {}	; <UNPREDICTABLE>
    9988:	532c0000 			; <UNDEFINED> instruction: 0x532c0000
    998c:	00000021 	andeq	r0, r0, r1, lsr #32
    9990:	31000000 	mrscc	r0, (UNDEF: 0)
    9994:	03000007 	movweq	r0, #7
    9998:	0023ba00 	eoreq	fp, r3, r0, lsl #20
    999c:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    99a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    99a4:	00002247 	andeq	r2, r0, r7, asr #4
    99a8:	00000664 	andeq	r0, r0, r4, ror #12
    99ac:	00000dc0 	andeq	r0, r0, r0, asr #27
    99b0:	00000000 	andeq	r0, r0, r0
    99b4:	000059ac 	andeq	r5, r0, ip, lsr #19
    99b8:	da060102 	ble	189dc8 <__ccfg+0x169e20>
    99bc:	02000008 	andeq	r0, r0, #8
    99c0:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    99c4:	04020000 	streq	r0, [r2], #-0
    99c8:	0005e905 	andeq	lr, r5, r5, lsl #18
    99cc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    99d0:	000005e4 	andeq	r0, r0, r4, ror #11
    99d4:	00083103 	andeq	r3, r8, r3, lsl #2
    99d8:	172e0200 	strne	r0, [lr, -r0, lsl #4]!
    99dc:	0000004d 	andeq	r0, r0, sp, asr #32
    99e0:	d8080102 	stmdale	r8, {r1, r8}
    99e4:	03000008 	movweq	r0, #8
    99e8:	000003ce 	andeq	r0, r0, lr, asr #7
    99ec:	601c3102 	andsvs	r3, ip, r2, lsl #2
    99f0:	02000000 	andeq	r0, r0, #0
    99f4:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    99f8:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    99fc:	02000008 	andeq	r0, r0, #8
    9a00:	00731b34 	rsbseq	r1, r3, r4, lsr fp
    9a04:	04020000 	streq	r0, [r2], #-0
    9a08:	00039307 	andeq	r9, r3, r7, lsl #6
    9a0c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    9a10:	0000038e 	andeq	r0, r0, lr, lsl #7
    9a14:	69050404 	stmdbvs	r5, {r2, sl}
    9a18:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    9a1c:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
    9a20:	1a030000 	bne	c9a28 <__ccfg+0xa9a80>
    9a24:	03000004 	movweq	r0, #4
    9a28:	009b1b28 	addseq	r1, fp, r8, lsr #22
    9a2c:	61050000 	mrsvs	r0, (UNDEF: 5)
    9a30:	04000008 	streq	r0, [r0], #-8
    9a34:	00b3000a 	adcseq	r0, r3, sl
    9a38:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    9a3c:	b3000009 	movwlt	r0, #9
    9a40:	00000000 	andeq	r0, r0, r0
    9a44:	04070001 	streq	r0, [r7], #-1
    9a48:	00086303 	andeq	r6, r8, r3, lsl #6
    9a4c:	18630300 	stmdane	r3!, {r8, r9}^
    9a50:	0000008f 	andeq	r0, r0, pc, lsl #1
    9a54:	0023ca03 	eoreq	ip, r3, r3, lsl #20
    9a58:	12270400 	eorne	r0, r7, #0, 8
    9a5c:	00000054 	andeq	r0, r0, r4, asr r0
    9a60:	0000c108 	andeq	ip, r0, r8, lsl #2
    9a64:	18e30300 	stmiane	r3!, {r8, r9}^
    9a68:	2b040000 	blcs	109a70 <__ccfg+0xe9ac8>
    9a6c:	00004111 	andeq	r4, r0, r1, lsl r1
    9a70:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    9a74:	1b030000 	blne	c9a7c <__ccfg+0xa9ad4>
    9a78:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    9a7c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    9a80:	e3080000 	movw	r0, #32768	; 0x8000
    9a84:	03000000 	movweq	r0, #0
    9a88:	000004f7 	strdeq	r0, [r0], -r7
    9a8c:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    9a90:	03000000 	movweq	r0, #0
    9a94:	00000871 	andeq	r0, r0, r1, ror r8
    9a98:	0c0f2e04 	stceq	14, cr2, [pc], {4}
    9a9c:	0a000001 	beq	9aa8 <__exidx_end+0x4b7c>
    9aa0:	0000c104 	andeq	ip, r0, r4, lsl #2
    9aa4:	04080b00 	streq	r0, [r8], #-2816	; 0xfffff500
    9aa8:	01a00932 	lsreq	r0, r2, r9
    9aac:	3e0c0000 	cdpcc	0, 0, cr0, cr12, cr0, {0}
    9ab0:	04000000 	streq	r0, [r0], #-0
    9ab4:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    9ab8:	01010000 	mrseq	r0, (UNDEF: 1)
    9abc:	fd0c0007 	stc2	0, cr0, [ip, #-28]	; 0xffffffe4
    9ac0:	04000004 	streq	r0, [r0], #-4
    9ac4:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    9ac8:	01010000 	mrseq	r0, (UNDEF: 1)
    9acc:	370c0006 	strcc	r0, [ip, -r6]
    9ad0:	04000002 	streq	r0, [r0], #-2
    9ad4:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    9ad8:	01010000 	mrseq	r0, (UNDEF: 1)
    9adc:	370c0005 	strcc	r0, [ip, -r5]
    9ae0:	04000005 	streq	r0, [r0], #-5
    9ae4:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    9ae8:	01010000 	mrseq	r0, (UNDEF: 1)
    9aec:	c00c0004 	andgt	r0, ip, r4
    9af0:	04000007 	streq	r0, [r0], #-7
    9af4:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    9af8:	04010000 	streq	r0, [r1], #-0
    9afc:	040d0000 	streq	r0, [sp], #-0
    9b00:	04000005 	streq	r0, [r0], #-5
    9b04:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    9b08:	0d010000 	stceq	0, cr0, [r1, #-0]
    9b0c:	000006ce 	andeq	r0, r0, lr, asr #13
    9b10:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    9b14:	02000000 	andeq	r0, r0, #0
    9b18:	000a6e0d 	andeq	r6, sl, sp, lsl #28
    9b1c:	033d0400 	teqeq	sp, #0, 8
    9b20:	000000d2 	ldrdeq	r0, [r0], -r2
    9b24:	07030d03 	streq	r0, [r3, -r3, lsl #26]
    9b28:	3f040000 	svccc	0x00040000
    9b2c:	0000e308 	andeq	lr, r0, r8, lsl #6
    9b30:	03000400 	movweq	r0, #1024	; 0x400
    9b34:	00000285 	andeq	r0, r0, r5, lsl #5
    9b38:	12034104 	andne	r4, r3, #4, 2
    9b3c:	09000001 	stmdbeq	r0, {r0}
    9b40:	000001a0 	andeq	r0, r0, r0, lsr #3
    9b44:	00053e0e 	andeq	r3, r5, lr, lsl #28
    9b48:	1a430400 	bne	10cab50 <__ccfg+0x10aaba8>
    9b4c:	000001ac 	andeq	r0, r0, ip, lsr #3
    9b50:	b10e0101 	tstlt	lr, r1, lsl #2
    9b54:	04000001 	streq	r0, [r0], #-1
    9b58:	01cd0e45 	biceq	r0, sp, r5, asr #28
    9b5c:	01010000 	mrseq	r0, (UNDEF: 1)
    9b60:	01d3040a 	bicseq	r0, r3, sl, lsl #8
    9b64:	01020000 	mrseq	r0, (UNDEF: 2)
    9b68:	0008e108 	andeq	lr, r8, r8, lsl #2
    9b6c:	01d30800 	bicseq	r0, r3, r0, lsl #16
    9b70:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    9b74:	04000002 	streq	r0, [r0], #-2
    9b78:	01cd1e45 	biceq	r1, sp, r5, asr #28
    9b7c:	01010000 	mrseq	r0, (UNDEF: 1)
    9b80:	8f05080b 	svchi	0x0005080b
    9b84:	00021e09 	andeq	r1, r2, r9, lsl #28
    9b88:	06010d00 	streq	r0, [r1], -r0, lsl #26
    9b8c:	90050000 	andls	r0, r5, r0
    9b90:	0000670b 	andeq	r6, r0, fp, lsl #14
    9b94:	a00d0000 	andge	r0, sp, r0
    9b98:	0500000b 	streq	r0, [r0, #-11]
    9b9c:	00c10791 	smulleq	r0, r1, r1, r7
    9ba0:	0d040000 	stceq	0, cr0, [r4, #-0]
    9ba4:	000001ea 	andeq	r0, r0, sl, ror #3
    9ba8:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    9bac:	06000000 	streq	r0, [r0], -r0
    9bb0:	09410300 	stmdbeq	r1, {r8, r9}^
    9bb4:	93050000 	movwls	r0, #20480	; 0x5000
    9bb8:	0001ed03 	andeq	lr, r1, r3, lsl #26
    9bbc:	021e0f00 	andseq	r0, lr, #0, 30
    9bc0:	02350000 	eorseq	r0, r5, #0
    9bc4:	00100000 	andseq	r0, r0, r0
    9bc8:	00070f0e 	andeq	r0, r7, lr, lsl #30
    9bcc:	0f990500 	svceq	0x00990500
    9bd0:	0000022a 	andeq	r0, r0, sl, lsr #4
    9bd4:	010b0101 	tsteq	fp, r1, lsl #2
    9bd8:	6d099106 	stfvsd	f1, [r9, #-24]	; 0xffffffe8
    9bdc:	0c000002 	stceq	0, cr0, [r0], {2}
    9be0:	0000070a 	andeq	r0, r0, sl, lsl #14
    9be4:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    9be8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bec:	0c000107 	stfeqs	f0, [r0], {7}
    9bf0:	00000478 	andeq	r0, r0, r8, ror r4
    9bf4:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    9bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bfc:	00000001 	andeq	r0, r0, r1
    9c00:	0007cc03 	andeq	ip, r7, r3, lsl #24
    9c04:	03960600 	orrseq	r0, r6, #0, 12
    9c08:	00000243 	andeq	r0, r0, r3, asr #4
    9c0c:	00026d08 	andeq	r6, r2, r8, lsl #26
    9c10:	02790f00 	rsbseq	r0, r9, #0, 30
    9c14:	02890000 	addeq	r0, r9, #0
    9c18:	00100000 	andseq	r0, r0, r0
    9c1c:	00027e08 	andeq	r7, r2, r8, lsl #28
    9c20:	03470e00 	movteq	r0, #32256	; 0x7e00
    9c24:	9c060000 	stcls	0, cr0, [r6], {-0}
    9c28:	00028917 	andeq	r8, r2, r7, lsl r9
    9c2c:	0f010100 	svceq	0x00010100
    9c30:	000000cd 	andeq	r0, r0, sp, asr #1
    9c34:	000002a7 	andeq	r0, r0, r7, lsr #5
    9c38:	9c080010 	stcls	0, cr0, [r8], {16}
    9c3c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    9c40:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    9c44:	a7130607 	ldrge	r0, [r3, -r7, lsl #12]
    9c48:	01000002 	tsteq	r0, r2
    9c4c:	06b00e01 	ldrteq	r0, [r0], r1, lsl #28
    9c50:	c3050000 	movwgt	r0, #20480	; 0x5000
    9c54:	0000e30e 	andeq	lr, r0, lr, lsl #6
    9c58:	11010100 	mrsne	r0, (UNDEF: 17)
    9c5c:	000008fa 	strdeq	r0, [r0], -sl
    9c60:	10016e08 	andne	r6, r1, r8, lsl #28
    9c64:	000002d5 	ldrdeq	r0, [r0], -r5
    9c68:	02db040a 	sbcseq	r0, fp, #167772160	; 0xa000000
    9c6c:	01120000 	tsteq	r2, r0
    9c70:	000002e7 	andeq	r0, r0, r7, ror #5
    9c74:	0000c113 	andeq	ip, r0, r3, lsl r1
    9c78:	da0f0000 	ble	3c9c80 <__ccfg+0x3a9cd8>
    9c7c:	f2000001 	vhadd.s8	d0, d0, d1
    9c80:	10000002 	andne	r0, r0, r2
    9c84:	02e70800 	rsceq	r0, r7, #0, 16
    9c88:	63140000 	tstvs	r4, #0
    9c8c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    9c90:	f213017f 	vbic	q0, <illegal reg q1.5>, <illegal reg q15.5>
    9c94:	01000002 	tsteq	r0, r2
    9c98:	032a1401 			; <UNDEFINED> instruction: 0x032a1401
    9c9c:	82080000 	andhi	r0, r8, #0
    9ca0:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    9ca4:	01010000 	mrseq	r0, (UNDEF: 1)
    9ca8:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    9cac:	00033909 	andeq	r3, r3, r9, lsl #18
    9cb0:	01f00d00 	mvnseq	r0, r0, lsl #26
    9cb4:	0f090000 	svceq	0x00090000
    9cb8:	0000c107 	andeq	ip, r0, r7, lsl #2
    9cbc:	350d0000 	strcc	r0, [sp, #-0]
    9cc0:	09000009 	stmdbeq	r0, {r0, r3}
    9cc4:	00c10310 	sbceq	r0, r1, r0, lsl r3
    9cc8:	00020000 	andeq	r0, r2, r0
    9ccc:	0009c203 	andeq	ip, r9, r3, lsl #4
    9cd0:	03110900 	tsteq	r1, #0, 18
    9cd4:	00000315 	andeq	r0, r0, r5, lsl r3
    9cd8:	1609200b 	strne	r2, [r9], -fp
    9cdc:	0003b709 	andeq	fp, r3, r9, lsl #14
    9ce0:	04070d00 	streq	r0, [r7], #-3328	; 0xfffff300
    9ce4:	17090000 	strne	r0, [r9, -r0]
    9ce8:	0003d108 	andeq	sp, r3, r8, lsl #2
    9cec:	fb0d0000 	blx	349cf6 <__ccfg+0x329d4e>
    9cf0:	09000006 	stmdbeq	r0, {r1, r2}
    9cf4:	03ec0818 	mvneq	r0, #24, 16	; 0x180000
    9cf8:	0d040000 	stceq	0, cr0, [r4, #-0]
    9cfc:	00000883 	andeq	r0, r0, r3, lsl #17
    9d00:	22081909 	andcs	r1, r8, #147456	; 0x24000
    9d04:	08000004 	stmdaeq	r0, {r2}
    9d08:	00092d0d 	andeq	r2, r9, sp, lsl #26
    9d0c:	081a0900 	ldmdaeq	sl, {r8, fp}
    9d10:	0000043d 	andeq	r0, r0, sp, lsr r4
    9d14:	07270d0c 	streq	r0, [r7, -ip, lsl #26]!
    9d18:	1b090000 	blne	249d20 <__ccfg+0x229d78>
    9d1c:	00045308 	andeq	r5, r4, r8, lsl #6
    9d20:	970d1000 	strls	r1, [sp, -r0]
    9d24:	09000007 	stmdbeq	r0, {r0, r1, r2}
    9d28:	0453081c 	ldrbeq	r0, [r3], #-2076	; 0xfffff7e4
    9d2c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    9d30:	000001d3 	ldrdeq	r0, [r0], -r3
    9d34:	53081d09 	movwpl	r1, #36105	; 0x8d09
    9d38:	18000004 	stmdane	r0, {r2}
    9d3c:	00027c0d 	andeq	r7, r2, sp, lsl #24
    9d40:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    9d44:	00000081 	andeq	r0, r0, r1, lsl #1
    9d48:	0115001c 	tsteq	r5, ip, lsl r0
    9d4c:	00000081 	andeq	r0, r0, r1, lsl #1
    9d50:	000003d1 	ldrdeq	r0, [r0], -r1
    9d54:	00008113 	andeq	r8, r0, r3, lsl r1
    9d58:	00811300 	addeq	r1, r1, r0, lsl #6
    9d5c:	b5130000 	ldrlt	r0, [r3, #-0]
    9d60:	00000000 	andeq	r0, r0, r0
    9d64:	03b7040a 			; <UNDEFINED> instruction: 0x03b7040a
    9d68:	01150000 	tsteq	r5, r0
    9d6c:	00000081 	andeq	r0, r0, r1, lsl #1
    9d70:	000003ec 	andeq	r0, r0, ip, ror #7
    9d74:	00008113 	andeq	r8, r0, r3, lsl r1
    9d78:	00811300 	addeq	r1, r1, r0, lsl #6
    9d7c:	0a000000 	beq	9d84 <__exidx_end+0x4e58>
    9d80:	0003d704 	andeq	sp, r3, r4, lsl #14
    9d84:	81011500 	tsthi	r1, r0, lsl #10
    9d88:	16000000 	strne	r0, [r0], -r0
    9d8c:	13000004 	movwne	r0, #4
    9d90:	00000081 	andeq	r0, r0, r1, lsl #1
    9d94:	00010013 	andeq	r0, r1, r3, lsl r0
    9d98:	00811300 	addeq	r1, r1, r0, lsl #6
    9d9c:	16130000 	ldrne	r0, [r3], -r0
    9da0:	13000004 	movwne	r0, #4
    9da4:	0000041c 	andeq	r0, r0, ip, lsl r4
    9da8:	81040a00 	tsthi	r4, r0, lsl #20
    9dac:	0a000000 	beq	9db4 <__exidx_end+0x4e88>
    9db0:	00033904 	andeq	r3, r3, r4, lsl #18
    9db4:	f2040a00 	vpmax.s8	d0, d4, d0
    9db8:	15000003 	strne	r0, [r0, #-3]
    9dbc:	00008101 	andeq	r8, r0, r1, lsl #2
    9dc0:	00043d00 	andeq	r3, r4, r0, lsl #26
    9dc4:	01001300 	mrseq	r1, LR_irq
    9dc8:	1c130000 	ldcne	0, cr0, [r3], {-0}
    9dcc:	00000004 	andeq	r0, r0, r4
    9dd0:	0428040a 	strteq	r0, [r8], #-1034	; 0xfffffbf6
    9dd4:	01150000 	tsteq	r5, r0
    9dd8:	00000081 	andeq	r0, r0, r1, lsl #1
    9ddc:	00000453 	andeq	r0, r0, r3, asr r4
    9de0:	00010013 	andeq	r0, r1, r3, lsl r0
    9de4:	040a0000 	streq	r0, [sl], #-0
    9de8:	00000443 	andeq	r0, r0, r3, asr #8
    9dec:	00097803 	andeq	r7, r9, r3, lsl #16
    9df0:	031f0900 	tsteq	pc, #0, 18
    9df4:	00000345 	andeq	r0, r0, r5, asr #6
    9df8:	00045908 	andeq	r5, r4, r8, lsl #18
    9dfc:	03071400 	movweq	r1, #29696	; 0x7400
    9e00:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    9e04:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    9e08:	01010000 	mrseq	r0, (UNDEF: 1)
    9e0c:	03080816 	movweq	r0, #34838	; 0x8816
    9e10:	04a00903 	strteq	r0, [r0], #2307	; 0x903
    9e14:	4e170000 	cdpmi	0, 1, cr0, cr7, cr0, {0}
    9e18:	08000037 	stmdaeq	r0, {r0, r1, r2, r4, r5}
    9e1c:	c1070307 	tstgt	r7, r7, lsl #6
    9e20:	00000000 	andeq	r0, r0, r0
    9e24:	000af817 	andeq	pc, sl, r7, lsl r8	; <UNPREDICTABLE>
    9e28:	03080800 	movweq	r0, #34816	; 0x8800
    9e2c:	0000f408 	andeq	pc, r0, r8, lsl #8
    9e30:	11000400 	tstne	r0, r0, lsl #8
    9e34:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    9e38:	03030908 	movweq	r0, #14600	; 0x3908
    9e3c:	00000479 	andeq	r0, r0, r9, ror r4
    9e40:	00003318 	andeq	r3, r0, r8, lsl r3
    9e44:	0b083000 	bleq	215e4c <__ccfg+0x1f5ea4>
    9e48:	05100803 	ldreq	r0, [r0, #-2051]	; 0xfffff7fd
    9e4c:	f9170000 			; <UNDEFINED> instruction: 0xf9170000
    9e50:	08000019 	stmdaeq	r0, {r0, r3, r4}
    9e54:	c1070314 	tstgt	r7, r4, lsl r3
    9e58:	00000000 	andeq	r0, r0, r0
    9e5c:	0008a417 	andeq	sl, r8, r7, lsl r4
    9e60:	03150800 	tsteq	r5, #0, 16
    9e64:	0000c107 	andeq	ip, r0, r7, lsl #2
    9e68:	be170200 	cdplt	2, 1, cr0, cr7, cr0, {0}
    9e6c:	08000048 	stmdaeq	r0, {r3, r6}
    9e70:	c80a0316 	stmdagt	sl, {r1, r2, r4, r8, r9}
    9e74:	04000002 	streq	r0, [r0], #-2
    9e78:	00432117 	subeq	r2, r3, r7, lsl r1
    9e7c:	03170800 	tsteq	r7, #0, 16
    9e80:	0000f408 	andeq	pc, r0, r8, lsl #8
    9e84:	07170800 	ldreq	r0, [r7, -r0, lsl #16]
    9e88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9e8c:	100f0318 	andne	r0, pc, r8, lsl r3	; <UNPREDICTABLE>
    9e90:	0c000005 	stceq	0, cr0, [r0], {5}
    9e94:	00072217 	andeq	r2, r7, r7, lsl r2
    9e98:	03190800 	tsteq	r9, #0, 16
    9e9c:	00052015 	andeq	r2, r5, r5, lsl r0
    9ea0:	0f002c00 	svceq	0x00002c00
    9ea4:	000004a0 	andeq	r0, r0, r0, lsr #9
    9ea8:	00000520 	andeq	r0, r0, r0, lsr #10
    9eac:	00008819 	andeq	r8, r0, r9, lsl r8
    9eb0:	0a000300 	beq	aab8 <__exidx_end+0x5b8c>
    9eb4:	0004ad04 	andeq	sl, r4, r4, lsl #26
    9eb8:	08991100 	ldmeq	r9, {r8, ip}
    9ebc:	1c080000 	stcne	0, cr0, [r8], {-0}
    9ec0:	04ad1b03 	strteq	r1, [sp], #2819	; 0xb03
    9ec4:	79140000 	ldmdbvc	r4, {}	; <UNPREDICTABLE>
    9ec8:	08000008 	stmdaeq	r0, {r3}
    9ecc:	4214031e 	andsmi	r0, r4, #2013265920	; 0x78000000
    9ed0:	01000005 	tsteq	r0, r5
    9ed4:	26040a01 	strcs	r0, [r4], -r1, lsl #20
    9ed8:	1a000005 	bne	9ef4 <__exidx_end+0x4fc8>
    9edc:	0000000e 	andeq	r0, r0, lr
    9ee0:	65111a01 	ldrvs	r1, [r1, #-2561]	; 0xfffff5ff
    9ee4:	01000004 	tsteq	r0, r4
    9ee8:	4f0c0305 	svcmi	0x000c0305
    9eec:	ad1b0000 	ldcge	0, cr0, [fp, #-0]
    9ef0:	01000022 	tsteq	r0, r2, lsr #32
    9ef4:	04160d1f 	ldreq	r0, [r6], #-3359	; 0xfffff2e1
    9ef8:	03050000 	movweq	r0, #20480	; 0x5000
    9efc:	200005f4 	strdcs	r0, [r0], -r4
    9f00:	0022991c 	eoreq	r9, r2, ip, lsl r9
    9f04:	0c580100 	ldfeqe	f0, [r8], {-0}
    9f08:	00008101 	andeq	r8, r0, r1, lsl #2
    9f0c:	00281000 	eoreq	r1, r8, r0
    9f10:	00281400 	eoreq	r1, r8, r0, lsl #8
    9f14:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    9f18:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9f1c:	58010070 	stmdapl	r1, {r4, r5, r6}
    9f20:	00010022 	andeq	r0, r1, r2, lsr #32
    9f24:	00292c00 	eoreq	r2, r9, r0, lsl #24
    9f28:	581c0000 	ldmdapl	ip, {}	; <UNPREDICTABLE>
    9f2c:	01000022 	tsteq	r0, r2, lsr #32
    9f30:	81010c52 	tsthi	r1, r2, asr ip
    9f34:	0c000000 	stceq	0, cr0, [r0], {-0}
    9f38:	10000028 	andne	r0, r0, r8, lsr #32
    9f3c:	01000028 	tsteq	r0, r8, lsr #32
    9f40:	0005c19c 	muleq	r5, ip, r1
    9f44:	00701d00 	rsbseq	r1, r0, r0, lsl #26
    9f48:	00225201 	eoreq	r5, r2, r1, lsl #4
    9f4c:	3f000001 	svccc	0x00000001
    9f50:	00000029 	andeq	r0, r0, r9, lsr #32
    9f54:	00227f1c 	eoreq	r7, r2, ip, lsl pc
    9f58:	0c4d0100 	stfeqe	f0, [sp], {-0}
    9f5c:	00008101 	andeq	r8, r0, r1, lsl #2
    9f60:	00280400 	eoreq	r0, r8, r0, lsl #8
    9f64:	00280c00 	eoreq	r0, r8, r0, lsl #24
    9f68:	f99c0100 			; <UNDEFINED> instruction: 0xf99c0100
    9f6c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9f70:	4d010070 	stcmi	0, cr0, [r1, #-448]	; 0xfffffe40
    9f74:	00010022 	andeq	r0, r1, r2, lsr #32
    9f78:	00295200 	eoreq	r5, r9, r0, lsl #4
    9f7c:	22a61e00 	adccs	r1, r6, #0, 28
    9f80:	4d010000 	stcmi	0, cr0, [r1, #-0]
    9f84:	00041c2f 	andeq	r1, r4, pc, lsr #24
    9f88:	00510100 	subseq	r0, r1, r0, lsl #2
    9f8c:	0022651c 	eoreq	r6, r2, ip, lsl r5
    9f90:	0c420100 	stfeqe	f0, [r2], {-0}
    9f94:	00008101 	andeq	r8, r0, r1, lsl #2
    9f98:	0027e000 	eoreq	lr, r7, r0
    9f9c:	00280400 	eoreq	r0, r8, r0, lsl #8
    9fa0:	629c0100 	addsvs	r0, ip, #0, 2
    9fa4:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    9fa8:	00796870 	rsbseq	r6, r9, r0, ror r8
    9fac:	811e4201 	tsthi	lr, r1, lsl #4
    9fb0:	65000000 	strvs	r0, [r0, #-0]
    9fb4:	1d000029 	stcne	0, cr0, [r0, #-164]	; 0xffffff5c
    9fb8:	42010070 	andmi	r0, r1, #112	; 0x70
    9fbc:	0001002b 	andeq	r0, r1, fp, lsr #32
    9fc0:	00298300 	eoreq	r8, r9, r0, lsl #6
    9fc4:	656c1d00 	strbvs	r1, [ip, #-3328]!	; 0xfffff300
    9fc8:	4201006e 	andmi	r0, r1, #110	; 0x6e
    9fcc:	00008132 	andeq	r8, r0, r2, lsr r1
    9fd0:	00299600 	eoreq	r9, r9, r0, lsl #12
    9fd4:	65731d00 	ldrbvs	r1, [r3, #-3328]!	; 0xfffff300
    9fd8:	42010073 	andmi	r0, r1, #115	; 0x73
    9fdc:	0004163c 	andeq	r1, r4, ip, lsr r6
    9fe0:	0029a900 	eoreq	sl, r9, r0, lsl #18
    9fe4:	22a61e00 	adccs	r1, r6, #0, 28
    9fe8:	43010000 	movwmi	r0, #4096	; 0x1000
    9fec:	00041c17 	andeq	r1, r4, r7, lsl ip
    9ff0:	00910200 	addseq	r0, r1, r0, lsl #4
    9ff4:	228c1c00 	addcs	r1, ip, #0, 24
    9ff8:	37010000 	strcc	r0, [r1, -r0]
    9ffc:	0081010c 	addeq	r0, r1, ip, lsl #2
    a000:	27bc0000 	ldrcs	r0, [ip, r0]!
    a004:	27e00000 	strbcs	r0, [r0, r0]!
    a008:	9c010000 	stcls	0, cr0, [r1], {-0}
    a00c:	0000069b 	muleq	r0, fp, r6
    a010:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    a014:	1e370100 	rsfnes	f0, f7, f0
    a018:	00000081 	andeq	r0, r0, r1, lsl #1
    a01c:	000029bc 			; <UNDEFINED> instruction: 0x000029bc
    a020:	0064661f 	rsbeq	r6, r4, pc, lsl r6
    a024:	81273701 			; <UNDEFINED> instruction: 0x81273701
    a028:	01000000 	mrseq	r0, (UNDEF: 0)
    a02c:	72200051 	eorvc	r0, r0, #81	; 0x51
    a030:	01000022 	tsteq	r0, r2, lsr #32
    a034:	81010c21 	tsthi	r1, r1, lsr #24
    a038:	01000000 	mrseq	r0, (UNDEF: 0)
    a03c:	000006db 	ldrdeq	r0, [r0], -fp
    a040:	79687021 	stmdbvc	r8!, {r0, r5, ip, sp, lr}^
    a044:	1e210100 	sufnes	f0, f1, f0
    a048:	00000081 	andeq	r0, r0, r1, lsl #1
    a04c:	00646621 	rsbeq	r6, r4, r1, lsr #12
    a050:	81272101 			; <UNDEFINED> instruction: 0x81272101
    a054:	22000000 	andcs	r0, r0, #0
    a058:	000013d5 	ldrdeq	r1, [r0], -r5
    a05c:	b5332101 	ldrlt	r2, [r3, #-257]!	; 0xfffffeff
    a060:	23000000 	movwcs	r0, #0
    a064:	25010069 	strcs	r0, [r1, #-105]	; 0xffffff97
    a068:	00008106 	andeq	r8, r0, r6, lsl #2
    a06c:	9b240000 	blls	90a074 <__ccfg+0x8ea0cc>
    a070:	14000006 	strne	r0, [r0], #-6
    a074:	5c000028 	stcpl	0, cr0, [r0], {40}	; 0x28
    a078:	01000028 	tsteq	r0, r8, lsr #32
    a07c:	06ad259c 	ssateq	r2, #14, ip, lsl #11
    a080:	29da0000 	ldmibcs	sl, {}^	; <UNPREDICTABLE>
    a084:	b9250000 	stmdblt	r5!, {}	; <UNPREDICTABLE>
    a088:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
    a08c:	25000029 	strcs	r0, [r0, #-41]	; 0xffffffd7
    a090:	000006c4 	andeq	r0, r0, r4, asr #13
    a094:	00002a16 	andeq	r2, r0, r6, lsl sl
    a098:	0006d026 	andeq	sp, r6, r6, lsr #32
    a09c:	069b2700 	ldreq	r2, [fp], r0, lsl #14
    a0a0:	284a0000 	stmdacs	sl, {}^	; <UNPREDICTABLE>
    a0a4:	285c0000 	ldmdacs	ip, {}^	; <UNPREDICTABLE>
    a0a8:	21010000 	mrscs	r0, (UNDEF: 1)
    a0ac:	06ad280c 	strteq	r2, [sp], ip, lsl #16
    a0b0:	55010000 	strpl	r0, [r1, #-0]
    a0b4:	0006b928 	andeq	fp, r6, r8, lsr #18
    a0b8:	29560100 	ldmdbcs	r6, {r8}^
    a0bc:	000006c4 	andeq	r0, r0, r4, asr #13
    a0c0:	0006d026 	andeq	sp, r6, r6, lsr #32
    a0c4:	00000000 	andeq	r0, r0, r0
    a0c8:	0000042d 	andeq	r0, r0, sp, lsr #8
    a0cc:	25ec0003 	strbcs	r0, [ip, #3]!
    a0d0:	01040000 	mrseq	r0, (UNDEF: 4)
    a0d4:	000000bd 	strheq	r0, [r0], -sp
    a0d8:	0022b70c 	eoreq	fp, r2, ip, lsl #14
    a0dc:	00066400 	andeq	r6, r6, r0, lsl #8
    a0e0:	000e1000 	andeq	r1, lr, r0
    a0e4:	00000000 	andeq	r0, r0, r0
    a0e8:	005c5800 	subseq	r5, ip, r0, lsl #16
    a0ec:	06010200 	streq	r0, [r1], -r0, lsl #4
    a0f0:	000008da 	ldrdeq	r0, [r0], -sl
    a0f4:	9f050202 	svcls	0x00050202
    a0f8:	02000007 	andeq	r0, r0, #7
    a0fc:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
    a100:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a104:	0005e405 	andeq	lr, r5, r5, lsl #8
    a108:	08310300 	ldmdaeq	r1!, {r8, r9}
    a10c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    a110:	00004d18 	andeq	r4, r0, r8, lsl sp
    a114:	08010200 	stmdaeq	r1, {r9}
    a118:	000008d8 	ldrdeq	r0, [r0], -r8
    a11c:	0003ce03 	andeq	ip, r3, r3, lsl #28
    a120:	19310200 	ldmdbne	r1!, {r9}
    a124:	00000060 	andeq	r0, r0, r0, rrx
    a128:	a6070202 	strge	r0, [r7], -r2, lsl #4
    a12c:	03000009 	movweq	r0, #9
    a130:	000008f1 	strdeq	r0, [r0], -r1
    a134:	73193402 	tstvc	r9, #33554432	; 0x2000000
    a138:	02000000 	andeq	r0, r0, #0
    a13c:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
    a140:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a144:	00038e07 	andeq	r8, r3, r7, lsl #28
    a148:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a14c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a150:	98070402 	stmdals	r7, {r1, sl}
    a154:	03000003 	movweq	r0, #3
    a158:	000023ca 	andeq	r2, r0, sl, asr #7
    a15c:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    a160:	05000000 	streq	r0, [r0, #-0]
    a164:	0000008f 	andeq	r0, r0, pc, lsl #1
    a168:	0018e303 	andseq	lr, r8, r3, lsl #6
    a16c:	122b0300 	eorne	r0, fp, #0, 6
    a170:	00000041 	andeq	r0, r0, r1, asr #32
    a174:	0000a006 	andeq	sl, r0, r6
    a178:	241b0300 	ldrcs	r0, [fp], #-768	; 0xfffffd00
    a17c:	2c030000 	stccs	0, cr0, [r3], {-0}
    a180:	00006712 	andeq	r6, r0, r2, lsl r7
    a184:	00b10500 	adcseq	r0, r1, r0, lsl #10
    a188:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    a18c:	03000004 	movweq	r0, #4
    a190:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    a194:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    a198:	5c093203 	sfmpl	f3, 4, [r9], {3}
    a19c:	08000001 	stmdaeq	r0, {r0}
    a1a0:	0000003e 	andeq	r0, r0, lr, lsr r0
    a1a4:	a0073403 	andge	r3, r7, r3, lsl #8
    a1a8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1ac:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    a1b0:	000004fd 	strdeq	r0, [r0], -sp
    a1b4:	a0033503 	andge	r3, r3, r3, lsl #10
    a1b8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1bc:	08000601 	stmdaeq	r0, {r0, r9, sl}
    a1c0:	00000237 	andeq	r0, r0, r7, lsr r2
    a1c4:	a0033603 	andge	r3, r3, r3, lsl #12
    a1c8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1cc:	08000501 	stmdaeq	r0, {r0, r8, sl}
    a1d0:	00000537 	andeq	r0, r0, r7, lsr r5
    a1d4:	a0033703 	andge	r3, r3, r3, lsl #14
    a1d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1dc:	08000401 	stmdaeq	r0, {r0, sl}
    a1e0:	000007c0 	andeq	r0, r0, r0, asr #15
    a1e4:	a0033803 	andge	r3, r3, r3, lsl #16
    a1e8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1ec:	09000004 	stmdbeq	r0, {r2}
    a1f0:	00000504 	andeq	r0, r0, r4, lsl #10
    a1f4:	a0073a03 	andge	r3, r7, r3, lsl #20
    a1f8:	01000000 	mrseq	r0, (UNDEF: 0)
    a1fc:	0006ce09 	andeq	ip, r6, r9, lsl #28
    a200:	033c0300 	teqeq	ip, #0, 6
    a204:	000000a0 	andeq	r0, r0, r0, lsr #1
    a208:	0a6e0902 	beq	1b8c618 <__ccfg+0x1b6c670>
    a20c:	3d030000 	stccc	0, cr0, [r3, #-0]
    a210:	0000a003 	andeq	sl, r0, r3
    a214:	03090300 	movweq	r0, #37632	; 0x9300
    a218:	03000007 	movweq	r0, #7
    a21c:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    a220:	00040000 	andeq	r0, r4, r0
    a224:	00028503 	andeq	r8, r2, r3, lsl #10
    a228:	03410300 	movteq	r0, #4864	; 0x1300
    a22c:	000000ce 	andeq	r0, r0, lr, asr #1
    a230:	00015c06 	andeq	r5, r1, r6, lsl #24
    a234:	053e0a00 	ldreq	r0, [lr, #-2560]!	; 0xfffff600
    a238:	43030000 	movwmi	r0, #12288	; 0x3000
    a23c:	0001681a 	andeq	r6, r1, sl, lsl r8
    a240:	0a010100 	beq	4a648 <__ccfg+0x2a6a0>
    a244:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    a248:	890e4503 	stmdbhi	lr, {r0, r1, r8, sl, lr}
    a24c:	01000001 	tsteq	r0, r1
    a250:	8f040b01 	svchi	0x00040b01
    a254:	02000001 	andeq	r0, r0, #1
    a258:	08e10801 	stmiaeq	r1!, {r0, fp}^
    a25c:	8f050000 	svchi	0x00050000
    a260:	0a000001 	beq	a26c <__exidx_end+0x5340>
    a264:	0000028e 	andeq	r0, r0, lr, lsl #5
    a268:	891e4503 	ldmdbhi	lr, {r0, r1, r8, sl, lr}
    a26c:	01000001 	tsteq	r0, r1
    a270:	04080701 	streq	r0, [r8], #-1793	; 0xfffff8ff
    a274:	01da098f 	bicseq	r0, sl, pc, lsl #19
    a278:	01090000 	mrseq	r0, (UNDEF: 9)
    a27c:	04000006 	streq	r0, [r0], #-6
    a280:	00670b90 	mlseq	r7, r0, fp, r0
    a284:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    a288:	00000ba0 	andeq	r0, r0, r0, lsr #23
    a28c:	8f089104 	svchi	0x00089104
    a290:	04000000 	streq	r0, [r0], #-0
    a294:	0001ea09 	andeq	lr, r1, r9, lsl #20
    a298:	10920400 	addsne	r0, r2, r0, lsl #8
    a29c:	000000ac 	andeq	r0, r0, ip, lsr #1
    a2a0:	41030006 	tstmi	r3, r6
    a2a4:	04000009 	streq	r0, [r0], #-9
    a2a8:	01a90393 			; <UNDEFINED> instruction: 0x01a90393
    a2ac:	da0c0000 	ble	30a2b4 <__ccfg+0x2ea30c>
    a2b0:	f1000001 	cps	#1
    a2b4:	0d000001 	stceq	0, cr0, [r0, #-4]
    a2b8:	070f0a00 	streq	r0, [pc, -r0, lsl #20]
    a2bc:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    a2c0:	0001e60f 	andeq	lr, r1, pc, lsl #12
    a2c4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    a2c8:	09910501 	ldmibeq	r1, {r0, r8, sl}
    a2cc:	00000229 	andeq	r0, r0, r9, lsr #4
    a2d0:	00070a08 	andeq	r0, r7, r8, lsl #20
    a2d4:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    a2d8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a2dc:	00010701 	andeq	r0, r1, r1, lsl #14
    a2e0:	00047808 	andeq	r7, r4, r8, lsl #16
    a2e4:	03940500 	orrseq	r0, r4, #0, 10
    a2e8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a2ec:	00000101 	andeq	r0, r0, r1, lsl #2
    a2f0:	07cc0300 	strbeq	r0, [ip, r0, lsl #6]
    a2f4:	96050000 	strls	r0, [r5], -r0
    a2f8:	0001ff03 	andeq	pc, r1, r3, lsl #30
    a2fc:	02290500 	eoreq	r0, r9, #0, 10
    a300:	350c0000 	strcc	r0, [ip, #-0]
    a304:	45000002 	strmi	r0, [r0, #-2]
    a308:	0d000002 	stceq	0, cr0, [r0, #-8]
    a30c:	023a0500 	eorseq	r0, sl, #0, 10
    a310:	470a0000 	strmi	r0, [sl, -r0]
    a314:	05000003 	streq	r0, [r0, #-3]
    a318:	0245179c 	subeq	r1, r5, #156, 14	; 0x2700000
    a31c:	01010000 	mrseq	r0, (UNDEF: 1)
    a320:	00009b0c 	andeq	r9, r0, ip, lsl #22
    a324:	00026300 	andeq	r6, r2, r0, lsl #6
    a328:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    a32c:	00000258 	andeq	r0, r0, r8, asr r2
    a330:	0004b70a 	andeq	fp, r4, sl, lsl #14
    a334:	13060600 	movwne	r0, #26112	; 0x6600
    a338:	00000263 	andeq	r0, r0, r3, ror #4
    a33c:	b00a0101 	andlt	r0, sl, r1, lsl #2
    a340:	04000006 	streq	r0, [r0], #-6
    a344:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    a348:	01010000 	mrseq	r0, (UNDEF: 1)
    a34c:	0008fa0e 	andeq	pc, r8, lr, lsl #20
    a350:	016e0700 	cmneq	lr, r0, lsl #14
    a354:	00029110 	andeq	r9, r2, r0, lsl r1
    a358:	97040b00 	strls	r0, [r4, -r0, lsl #22]
    a35c:	0f000002 	svceq	0x00000002
    a360:	0002a301 	andeq	sl, r2, r1, lsl #6
    a364:	008f1000 	addeq	r1, pc, r0
    a368:	0c000000 	stceq	0, cr0, [r0], {-0}
    a36c:	00000196 	muleq	r0, r6, r1
    a370:	000002ae 	andeq	r0, r0, lr, lsr #5
    a374:	a305000d 	movwge	r0, #20493	; 0x500d
    a378:	11000002 	tstne	r0, r2
    a37c:	00000763 	andeq	r0, r0, r3, ror #14
    a380:	16017f07 	strne	r7, [r1], -r7, lsl #30
    a384:	000002ae 	andeq	r0, r0, lr, lsr #5
    a388:	2a110101 	bcs	44a794 <__ccfg+0x42a7ec>
    a38c:	07000003 	streq	r0, [r0, -r3]
    a390:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    a394:	01000000 	mrseq	r0, (UNDEF: 0)
    a398:	03071101 	movweq	r1, #28929	; 0x7101
    a39c:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    a3a0:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    a3a4:	01010000 	mrseq	r0, (UNDEF: 1)
    a3a8:	03070812 	movweq	r0, #30738	; 0x7812
    a3ac:	03070903 	movweq	r0, #30979	; 0x7903
    a3b0:	4e130000 	cdpmi	0, 1, cr0, cr3, cr0, {0}
    a3b4:	07000037 	smladxeq	r0, r7, r0, r0
    a3b8:	8f070307 	svchi	0x00070307
    a3bc:	00000000 	andeq	r0, r0, r0
    a3c0:	000af813 	andeq	pc, sl, r3, lsl r8	; <UNPREDICTABLE>
    a3c4:	03080700 	movweq	r0, #34560	; 0x8700
    a3c8:	0000c208 	andeq	ip, r0, r8, lsl #4
    a3cc:	0e000400 	cfcpyseq	mvf0, mvf0
    a3d0:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    a3d4:	03030907 	movweq	r0, #14599	; 0x3907
    a3d8:	000002e0 	andeq	r0, r0, r0, ror #5
    a3dc:	00003314 	andeq	r3, r0, r4, lsl r3
    a3e0:	0b073000 	bleq	1d63e8 <__ccfg+0x1b6440>
    a3e4:	03770803 	cmneq	r7, #196608	; 0x30000
    a3e8:	f9130000 			; <UNDEFINED> instruction: 0xf9130000
    a3ec:	07000019 	smladeq	r0, r9, r0, r0
    a3f0:	8f080314 	svchi	0x00080314
    a3f4:	00000000 	andeq	r0, r0, r0
    a3f8:	0008a413 	andeq	sl, r8, r3, lsl r4
    a3fc:	03150700 	tsteq	r5, #0, 14
    a400:	00008f08 	andeq	r8, r0, r8, lsl #30
    a404:	be130200 	cdplt	2, 1, cr0, cr3, cr0, {0}
    a408:	07000048 	streq	r0, [r0, -r8, asr #32]
    a40c:	840b0316 	strhi	r0, [fp], #-790	; 0xfffffcea
    a410:	04000002 	streq	r0, [r0], #-2
    a414:	00432113 	subeq	r2, r3, r3, lsl r1
    a418:	03170700 	tsteq	r7, #0, 14
    a41c:	0000c209 	andeq	ip, r0, r9, lsl #4
    a420:	07130800 	ldreq	r0, [r3, -r0, lsl #16]
    a424:	07000000 	streq	r0, [r0, -r0]
    a428:	770f0318 	smladvc	pc, r8, r3, r0	; <UNPREDICTABLE>
    a42c:	0c000003 	stceq	0, cr0, [r0], {3}
    a430:	00072213 	andeq	r2, r7, r3, lsl r2
    a434:	03190700 	tsteq	r9, #0, 14
    a438:	00038715 	andeq	r8, r3, r5, lsl r7
    a43c:	0c002c00 	stceq	12, cr2, [r0], {-0}
    a440:	00000307 	andeq	r0, r0, r7, lsl #6
    a444:	00000387 	andeq	r0, r0, r7, lsl #7
    a448:	00008815 	andeq	r8, r0, r5, lsl r8
    a44c:	0b000300 	bleq	b054 <__exidx_end+0x6128>
    a450:	00031404 	andeq	r1, r3, r4, lsl #8
    a454:	08990e00 	ldmeq	r9, {r9, sl, fp}
    a458:	1c070000 	stcne	0, cr0, [r7], {-0}
    a45c:	03141b03 	tsteq	r4, #3072	; 0xc00
    a460:	79110000 	ldmdbvc	r1, {}	; <UNPREDICTABLE>
    a464:	07000008 	streq	r0, [r0, -r8]
    a468:	a914031e 	ldmdbge	r4, {r1, r2, r3, r4, r8, r9}
    a46c:	01000003 	tsteq	r0, r3
    a470:	8d040b01 	vstrhi	d0, [r4, #-4]
    a474:	16000003 	strne	r0, [r0], -r3
    a478:	00230101 	eoreq	r0, r3, r1, lsl #2
    a47c:	011d0100 	tsteq	sp, r0, lsl #2
    a480:	00285c01 	eoreq	r5, r8, r1, lsl #24
    a484:	0028cc00 	eoreq	ip, r8, r0, lsl #24
    a488:	2a9c0100 	bcs	fe70a890 <_estack+0xde705890>
    a48c:	17000004 	strne	r0, [r0, -r4]
    a490:	000008c8 	andeq	r0, r0, r8, asr #17
    a494:	8f011d01 	svchi	0x00011d01
    a498:	34000000 	strcc	r0, [r0], #-0
    a49c:	1800002a 	stmdane	r0, {r1, r3, r5}
    a4a0:	00004321 	andeq	r4, r0, r1, lsr #6
    a4a4:	2a011d01 	bcs	518b0 <__ccfg+0x31908>
    a4a8:	5d000004 	stcpl	0, cr0, [r0, #-16]
    a4ac:	1900002a 	stmdbne	r0, {r1, r3, r5}
    a4b0:	0000230d 	andeq	r2, r0, sp, lsl #6
    a4b4:	1a013001 	bne	564c0 <__ccfg+0x36518>
    a4b8:	00000df8 	strdeq	r0, [r0], -r8
    a4bc:	7274701b 	rsbsvc	r7, r4, #27
    a4c0:	15220100 	strne	r0, [r2, #-256]!	; 0xffffff00
    a4c4:	0000042a 	andeq	r0, r0, sl, lsr #8
    a4c8:	05fc0305 	ldrbeq	r0, [ip, #773]!	; 0x305
    a4cc:	6c1b2000 	ldcvs	0, cr2, [fp], {-0}
    a4d0:	01006e65 	tsteq	r0, r5, ror #28
    a4d4:	00810d23 	addeq	r0, r1, r3, lsr #26
    a4d8:	03050000 	movweq	r0, #20480	; 0x5000
    a4dc:	200005f8 	strdcs	r0, [r0], -r8
    a4e0:	0022fb18 	eoreq	pc, r2, r8, lsl fp	; <UNPREDICTABLE>
    a4e4:	06240100 	strteq	r0, [r4], -r0, lsl #2
    a4e8:	00000081 	andeq	r0, r0, r1, lsl #1
    a4ec:	00002a87 	andeq	r2, r0, r7, lsl #21
    a4f0:	040b0000 	streq	r0, [fp], #-0
    a4f4:	00000196 	muleq	r0, r6, r1
    a4f8:	00044000 	andeq	r4, r4, r0
    a4fc:	60000300 	andvs	r0, r0, r0, lsl #6
    a500:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    a504:	0000bd01 	andeq	fp, r0, r1, lsl #26
    a508:	23230c00 			; <UNDEFINED> instruction: 0x23230c00
    a50c:	06640000 	strbteq	r0, [r4], -r0
    a510:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
    a514:	00000000 	andeq	r0, r0, r0
    a518:	5dfd0000 	ldclpl	0, cr0, [sp]
    a51c:	01020000 	mrseq	r0, (UNDEF: 2)
    a520:	0008da06 	andeq	sp, r8, r6, lsl #20
    a524:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a528:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    a52c:	e9050402 	stmdb	r5, {r1, sl}
    a530:	02000005 	andeq	r0, r0, #5
    a534:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    a538:	31030000 	mrscc	r0, (UNDEF: 3)
    a53c:	02000008 	andeq	r0, r0, #8
    a540:	004d182e 	subeq	r1, sp, lr, lsr #16
    a544:	01020000 	mrseq	r0, (UNDEF: 2)
    a548:	0008d808 	andeq	sp, r8, r8, lsl #16
    a54c:	03ce0300 	biceq	r0, lr, #0, 6
    a550:	31020000 	mrscc	r0, (UNDEF: 2)
    a554:	00006019 	andeq	r6, r0, r9, lsl r0
    a558:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a55c:	000009a6 	andeq	r0, r0, r6, lsr #19
    a560:	0008f103 	andeq	pc, r8, r3, lsl #2
    a564:	19340200 	ldmdbne	r4!, {r9}
    a568:	00000073 	andeq	r0, r0, r3, ror r0
    a56c:	93070402 	movwls	r0, #29698	; 0x7402
    a570:	02000003 	andeq	r0, r0, #3
    a574:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    a578:	04040000 	streq	r0, [r4], #-0
    a57c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a580:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a584:	00000398 	muleq	r0, r8, r3
    a588:	0023ca03 	eoreq	ip, r3, r3, lsl #20
    a58c:	12270300 	eorne	r0, r7, #0, 6
    a590:	00000054 	andeq	r0, r0, r4, asr r0
    a594:	00008f05 	andeq	r8, r0, r5, lsl #30
    a598:	18e30300 	stmiane	r3!, {r8, r9}^
    a59c:	2b030000 	blcs	ca5a4 <__ccfg+0xaa5fc>
    a5a0:	00004112 	andeq	r4, r0, r2, lsl r1
    a5a4:	00a00600 	adceq	r0, r0, r0, lsl #12
    a5a8:	1b030000 	blne	ca5b0 <__ccfg+0xaa608>
    a5ac:	03000024 	movweq	r0, #36	; 0x24
    a5b0:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    a5b4:	b1050000 	mrslt	r0, (UNDEF: 5)
    a5b8:	03000000 	movweq	r0, #0
    a5bc:	000004f7 	strdeq	r0, [r0], -r7
    a5c0:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    a5c4:	03000000 	movweq	r0, #0
    a5c8:	00000871 	andeq	r0, r0, r1, ror r8
    a5cc:	da102e03 	ble	415de0 <__ccfg+0x3f5e38>
    a5d0:	07000000 	streq	r0, [r0, -r0]
    a5d4:	00008f04 	andeq	r8, r0, r4, lsl #30
    a5d8:	03080800 	movweq	r0, #34816	; 0x8800
    a5dc:	016e0932 	cmneq	lr, r2, lsr r9
    a5e0:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    a5e4:	03000000 	movweq	r0, #0
    a5e8:	00a00734 	adceq	r0, r0, r4, lsr r7
    a5ec:	01010000 	mrseq	r0, (UNDEF: 1)
    a5f0:	fd090007 	stc2	0, cr0, [r9, #-28]	; 0xffffffe4
    a5f4:	03000004 	movweq	r0, #4
    a5f8:	00a00335 	adceq	r0, r0, r5, lsr r3
    a5fc:	01010000 	mrseq	r0, (UNDEF: 1)
    a600:	37090006 	strcc	r0, [r9, -r6]
    a604:	03000002 	movweq	r0, #2
    a608:	00a00336 	adceq	r0, r0, r6, lsr r3
    a60c:	01010000 	mrseq	r0, (UNDEF: 1)
    a610:	37090005 	strcc	r0, [r9, -r5]
    a614:	03000005 	movweq	r0, #5
    a618:	00a00337 	adceq	r0, r0, r7, lsr r3
    a61c:	01010000 	mrseq	r0, (UNDEF: 1)
    a620:	c0090004 	andgt	r0, r9, r4
    a624:	03000007 	movweq	r0, #7
    a628:	00a00338 	adceq	r0, r0, r8, lsr r3
    a62c:	04010000 	streq	r0, [r1], #-0
    a630:	040a0000 	streq	r0, [sl], #-0
    a634:	03000005 	movweq	r0, #5
    a638:	00a0073a 	adceq	r0, r0, sl, lsr r7
    a63c:	0a010000 	beq	4a644 <__ccfg+0x2a69c>
    a640:	000006ce 	andeq	r0, r0, lr, asr #13
    a644:	a0033c03 	andge	r3, r3, r3, lsl #24
    a648:	02000000 	andeq	r0, r0, #0
    a64c:	000a6e0a 	andeq	r6, sl, sl, lsl #28
    a650:	033d0300 	teqeq	sp, #0, 6
    a654:	000000a0 	andeq	r0, r0, r0, lsr #1
    a658:	07030a03 	streq	r0, [r3, -r3, lsl #20]
    a65c:	3f030000 	svccc	0x00030000
    a660:	0000b108 	andeq	fp, r0, r8, lsl #2
    a664:	03000400 	movweq	r0, #1024	; 0x400
    a668:	00000285 	andeq	r0, r0, r5, lsl #5
    a66c:	e0034103 	and	r4, r3, r3, lsl #2
    a670:	06000000 	streq	r0, [r0], -r0
    a674:	0000016e 	andeq	r0, r0, lr, ror #2
    a678:	00053e0b 	andeq	r3, r5, fp, lsl #28
    a67c:	1a430300 	bne	10cb284 <__ccfg+0x10ab2dc>
    a680:	0000017a 	andeq	r0, r0, sl, ror r1
    a684:	b10b0101 	tstlt	fp, r1, lsl #2
    a688:	03000001 	movweq	r0, #1
    a68c:	019b0e45 	orrseq	r0, fp, r5, asr #28
    a690:	01010000 	mrseq	r0, (UNDEF: 1)
    a694:	01a10407 			; <UNDEFINED> instruction: 0x01a10407
    a698:	01020000 	mrseq	r0, (UNDEF: 2)
    a69c:	0008e108 	andeq	lr, r8, r8, lsl #2
    a6a0:	01a10500 			; <UNDEFINED> instruction: 0x01a10500
    a6a4:	8e0b0000 	cdphi	0, 0, cr0, cr11, cr0, {0}
    a6a8:	03000002 	movweq	r0, #2
    a6ac:	019b1e45 	orrseq	r1, fp, r5, asr #28
    a6b0:	01010000 	mrseq	r0, (UNDEF: 1)
    a6b4:	8f040808 	svchi	0x00040808
    a6b8:	0001ec09 	andeq	lr, r1, r9, lsl #24
    a6bc:	06010a00 	streq	r0, [r1], -r0, lsl #20
    a6c0:	90040000 	andls	r0, r4, r0
    a6c4:	0000670b 	andeq	r6, r0, fp, lsl #14
    a6c8:	a00a0000 	andge	r0, sl, r0
    a6cc:	0400000b 	streq	r0, [r0], #-11
    a6d0:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    a6d4:	0a040000 	beq	10a6dc <__ccfg+0xea734>
    a6d8:	000001ea 	andeq	r0, r0, sl, ror #3
    a6dc:	ac109204 	lfmge	f1, 1, [r0], {4}
    a6e0:	06000000 	streq	r0, [r0], -r0
    a6e4:	09410300 	stmdbeq	r1, {r8, r9}^
    a6e8:	93040000 	movwls	r0, #16384	; 0x4000
    a6ec:	0001bb03 	andeq	fp, r1, r3, lsl #22
    a6f0:	01ec0c00 	mvneq	r0, r0, lsl #24
    a6f4:	02030000 	andeq	r0, r3, #0
    a6f8:	000d0000 	andeq	r0, sp, r0
    a6fc:	00070f0b 	andeq	r0, r7, fp, lsl #30
    a700:	0f990400 	svceq	0x00990400
    a704:	000001f8 	strdeq	r0, [r0], -r8
    a708:	01080101 	tsteq	r8, r1, lsl #2
    a70c:	3b099105 	blcc	26eb28 <__ccfg+0x24eb80>
    a710:	09000002 	stmdbeq	r0, {r1}
    a714:	0000070a 	andeq	r0, r0, sl, lsl #14
    a718:	a0079305 	andge	r9, r7, r5, lsl #6
    a71c:	01000000 	mrseq	r0, (UNDEF: 0)
    a720:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    a724:	00000478 	andeq	r0, r0, r8, ror r4
    a728:	a0039405 	andge	r9, r3, r5, lsl #8
    a72c:	01000000 	mrseq	r0, (UNDEF: 0)
    a730:	00000001 	andeq	r0, r0, r1
    a734:	0007cc03 	andeq	ip, r7, r3, lsl #24
    a738:	03960500 	orrseq	r0, r6, #0, 10
    a73c:	00000211 	andeq	r0, r0, r1, lsl r2
    a740:	00023b05 	andeq	r3, r2, r5, lsl #22
    a744:	02470c00 	subeq	r0, r7, #0, 24
    a748:	02570000 	subseq	r0, r7, #0
    a74c:	000d0000 	andeq	r0, sp, r0
    a750:	00024c05 	andeq	r4, r2, r5, lsl #24
    a754:	03470b00 	movteq	r0, #31488	; 0x7b00
    a758:	9c050000 	stcls	0, cr0, [r5], {-0}
    a75c:	00025717 	andeq	r5, r2, r7, lsl r7
    a760:	0c010100 	stfeqs	f0, [r1], {-0}
    a764:	0000009b 	muleq	r0, fp, r0
    a768:	00000275 	andeq	r0, r0, r5, ror r2
    a76c:	6a05000d 	bvs	14a7a8 <__ccfg+0x12a800>
    a770:	0b000002 	bleq	a780 <__exidx_end+0x5854>
    a774:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
    a778:	75130606 	ldrvc	r0, [r3, #-1542]	; 0xfffff9fa
    a77c:	01000002 	tsteq	r0, r2
    a780:	06b00b01 	ldrteq	r0, [r0], r1, lsl #22
    a784:	c3040000 	movwgt	r0, #16384	; 0x4000
    a788:	0000b10e 	andeq	fp, r0, lr, lsl #2
    a78c:	0e010100 	adfeqs	f0, f1, f0
    a790:	000008fa 	strdeq	r0, [r0], -sl
    a794:	10016e07 	andne	r6, r1, r7, lsl #28
    a798:	000002a3 	andeq	r0, r0, r3, lsr #5
    a79c:	02a90407 	adceq	r0, r9, #117440512	; 0x7000000
    a7a0:	010f0000 	mrseq	r0, CPSR
    a7a4:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
    a7a8:	00008f10 	andeq	r8, r0, r0, lsl pc
    a7ac:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    a7b0:	c0000001 	andgt	r0, r0, r1
    a7b4:	0d000002 	stceq	0, cr0, [r0, #-8]
    a7b8:	02b50500 	adcseq	r0, r5, #0, 10
    a7bc:	63110000 	tstvs	r1, #0
    a7c0:	07000007 	streq	r0, [r0, -r7]
    a7c4:	c016017f 	andsgt	r0, r6, pc, ror r1
    a7c8:	01000002 	tsteq	r0, r2
    a7cc:	032a1101 			; <UNDEFINED> instruction: 0x032a1101
    a7d0:	82070000 	andhi	r0, r7, #0
    a7d4:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    a7d8:	01010000 	mrseq	r0, (UNDEF: 1)
    a7dc:	00030711 	andeq	r0, r3, r1, lsl r7
    a7e0:	02d80700 	sbcseq	r0, r8, #0, 14
    a7e4:	0000b10e 	andeq	fp, r0, lr, lsl #2
    a7e8:	12010100 	andne	r0, r1, #0, 2
    a7ec:	03030708 	movweq	r0, #14088	; 0x3708
    a7f0:	00031909 	andeq	r1, r3, r9, lsl #18
    a7f4:	374e1300 	strbcc	r1, [lr, -r0, lsl #6]
    a7f8:	07070000 	streq	r0, [r7, -r0]
    a7fc:	008f0703 	addeq	r0, pc, r3, lsl #14
    a800:	13000000 	movwne	r0, #0
    a804:	00000af8 	strdeq	r0, [r0], -r8
    a808:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    a80c:	000000c2 	andeq	r0, r0, r2, asr #1
    a810:	bf0e0004 	svclt	0x000e0004
    a814:	07000003 	streq	r0, [r0, -r3]
    a818:	f2030309 	vcgt.s8	d0, d3, d9
    a81c:	14000002 	strne	r0, [r0], #-2
    a820:	00000033 	andeq	r0, r0, r3, lsr r0
    a824:	030b0730 	movweq	r0, #46896	; 0xb730
    a828:	00038908 	andeq	r8, r3, r8, lsl #18
    a82c:	19f91300 	ldmibne	r9!, {r8, r9, ip}^
    a830:	14070000 	strne	r0, [r7], #-0
    a834:	008f0803 	addeq	r0, pc, r3, lsl #16
    a838:	13000000 	movwne	r0, #0
    a83c:	000008a4 	andeq	r0, r0, r4, lsr #17
    a840:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    a844:	0000008f 	andeq	r0, r0, pc, lsl #1
    a848:	48be1302 	ldmmi	lr!, {r1, r8, r9, ip}
    a84c:	16070000 	strne	r0, [r7], -r0
    a850:	02960b03 	addseq	r0, r6, #3072	; 0xc00
    a854:	13040000 	movwne	r0, #16384	; 0x4000
    a858:	00004321 	andeq	r4, r0, r1, lsr #6
    a85c:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    a860:	000000c2 	andeq	r0, r0, r2, asr #1
    a864:	00071308 	andeq	r1, r7, r8, lsl #6
    a868:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    a86c:	03890f03 	orreq	r0, r9, #3, 30
    a870:	130c0000 	movwne	r0, #49152	; 0xc000
    a874:	00000722 	andeq	r0, r0, r2, lsr #14
    a878:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    a87c:	00000399 	muleq	r0, r9, r3
    a880:	190c002c 	stmdbne	ip, {r2, r3, r5}
    a884:	99000003 	stmdbls	r0, {r0, r1}
    a888:	15000003 	strne	r0, [r0, #-3]
    a88c:	00000088 	andeq	r0, r0, r8, lsl #1
    a890:	04070003 	streq	r0, [r7], #-3
    a894:	00000326 	andeq	r0, r0, r6, lsr #6
    a898:	0008990e 	andeq	r9, r8, lr, lsl #18
    a89c:	031c0700 	tsteq	ip, #0, 14
    a8a0:	0003261b 	andeq	r2, r3, fp, lsl r6
    a8a4:	08791100 	ldmdaeq	r9!, {r8, ip}^
    a8a8:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    a8ac:	03bb1403 			; <UNDEFINED> instruction: 0x03bb1403
    a8b0:	01010000 	mrseq	r0, (UNDEF: 1)
    a8b4:	039f0407 	orrseq	r0, pc, #117440512	; 0x7000000
    a8b8:	f1160000 			; <UNDEFINED> instruction: 0xf1160000
    a8bc:	01000018 	tsteq	r0, r8, lsl r0
    a8c0:	019b070d 	orrseq	r0, fp, sp, lsl #14
    a8c4:	05010000 	streq	r0, [r1, #-0]
    a8c8:	00060003 	andeq	r0, r6, r3
    a8cc:	18011720 	stmdane	r1, {r5, r8, r9, sl, ip}
    a8d0:	01000023 	tsteq	r0, r3, lsr #32
    a8d4:	cc010123 	stfgts	f0, [r1], {35}	; 0x23
    a8d8:	e8000028 	stmda	r0, {r3, r5}
    a8dc:	01000029 	tsteq	r0, r9, lsr #32
    a8e0:	08c8189c 	stmiaeq	r8, {r2, r3, r4, r7, fp, ip}^
    a8e4:	23010000 	movwcs	r0, #4096	; 0x1000
    a8e8:	00008f01 	andeq	r8, r0, r1, lsl #30
    a8ec:	002a9a00 	eoreq	r9, sl, r0, lsl #20
    a8f0:	43211900 			; <UNDEFINED> instruction: 0x43211900
    a8f4:	23010000 	movwcs	r0, #4096	; 0x1000
    a8f8:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a8fc:	002ab800 	eoreq	fp, sl, r0, lsl #16
    a900:	0e201a00 	vmuleq.f32	s2, s0, s0
    a904:	701b0000 	andsvc	r0, fp, r0
    a908:	01007274 	tsteq	r0, r4, ror r2
    a90c:	019b0f28 	orrseq	r0, fp, r8, lsr #30
    a910:	03050000 	movweq	r0, #20480	; 0x5000
    a914:	20000608 	andcs	r0, r0, r8, lsl #12
    a918:	6e656c1b 	mcrvs	12, 3, r6, cr5, cr11, {0}
    a91c:	0d290100 	stfeqs	f0, [r9, #-0]
    a920:	00000081 	andeq	r0, r0, r1, lsl #1
    a924:	06040305 	streq	r0, [r4], -r5, lsl #6
    a928:	fb192000 	blx	652932 <__ccfg+0x63298a>
    a92c:	01000022 	tsteq	r0, r2, lsr #32
    a930:	0081062a 	addeq	r0, r1, sl, lsr #12
    a934:	2b0e0000 	blcs	38a93c <__ccfg+0x36a994>
    a938:	00000000 	andeq	r0, r0, r0
    a93c:	0005f000 	andeq	pc, r5, r0
    a940:	d8000300 	stmdale	r0, {r8, r9}
    a944:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    a948:	0000bd01 	andeq	fp, r0, r1, lsl #26
    a94c:	23660c00 	cmncs	r6, #0, 24
    a950:	06640000 	strbteq	r0, [r4], -r0
    a954:	0ec80000 	cdpeq	0, 12, cr0, cr8, cr0, {0}
    a958:	00000000 	andeq	r0, r0, r0
    a95c:	604c0000 	subvs	r0, ip, r0
    a960:	01020000 	mrseq	r0, (UNDEF: 2)
    a964:	0008da06 	andeq	sp, r8, r6, lsl #20
    a968:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a96c:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    a970:	e9050402 	stmdb	r5, {r1, sl}
    a974:	02000005 	andeq	r0, r0, #5
    a978:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    a97c:	31030000 	mrscc	r0, (UNDEF: 3)
    a980:	02000008 	andeq	r0, r0, #8
    a984:	004d182e 	subeq	r1, sp, lr, lsr #16
    a988:	01020000 	mrseq	r0, (UNDEF: 2)
    a98c:	0008d808 	andeq	sp, r8, r8, lsl #16
    a990:	03ce0300 	biceq	r0, lr, #0, 6
    a994:	31020000 	mrscc	r0, (UNDEF: 2)
    a998:	00006019 	andeq	r6, r0, r9, lsl r0
    a99c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a9a0:	000009a6 	andeq	r0, r0, r6, lsr #19
    a9a4:	0008f103 	andeq	pc, r8, r3, lsl #2
    a9a8:	19340200 	ldmdbne	r4!, {r9}
    a9ac:	00000073 	andeq	r0, r0, r3, ror r0
    a9b0:	93070402 	movwls	r0, #29698	; 0x7402
    a9b4:	02000003 	andeq	r0, r0, #3
    a9b8:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    a9bc:	04040000 	streq	r0, [r4], #-0
    a9c0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a9c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a9c8:	00000398 	muleq	r0, r8, r3
    a9cc:	00041a03 	andeq	r1, r4, r3, lsl #20
    a9d0:	1b280300 	blne	a0b5d8 <__ccfg+0x9eb630>
    a9d4:	0000009b 	muleq	r0, fp, r0
    a9d8:	00086105 	andeq	r6, r8, r5, lsl #2
    a9dc:	00090400 	andeq	r0, r9, r0, lsl #8
    a9e0:	000000b3 	strheq	r0, [r0], -r3
    a9e4:	00094806 	andeq	r4, r9, r6, lsl #16
    a9e8:	0000b300 	andeq	fp, r0, r0, lsl #6
    a9ec:	00010000 	andeq	r0, r1, r0
    a9f0:	63030407 	movwvs	r0, #13319	; 0x3407
    a9f4:	03000008 	movweq	r0, #8
    a9f8:	008f1863 	addeq	r1, pc, r3, ror #16
    a9fc:	ca030000 	bgt	caa04 <__ccfg+0xaaa5c>
    aa00:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    aa04:	00541227 	subseq	r1, r4, r7, lsr #4
    aa08:	c1080000 	mrsgt	r0, (UNDEF: 8)
    aa0c:	03000000 	movweq	r0, #0
    aa10:	000018e3 	andeq	r1, r0, r3, ror #17
    aa14:	41122b04 	tstmi	r2, r4, lsl #22
    aa18:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    aa1c:	000000d2 	ldrdeq	r0, [r0], -r2
    aa20:	00241b03 	eoreq	r1, r4, r3, lsl #22
    aa24:	122c0400 	eorne	r0, ip, #0, 8
    aa28:	00000067 	andeq	r0, r0, r7, rrx
    aa2c:	0000e308 	andeq	lr, r0, r8, lsl #6
    aa30:	04f70300 	ldrbteq	r0, [r7], #768	; 0x300
    aa34:	2d040000 	stccs	0, cr0, [r4, #-0]
    aa38:	00006712 	andeq	r6, r0, r2, lsl r7
    aa3c:	08710300 	ldmdaeq	r1!, {r8, r9}^
    aa40:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    aa44:	00010c10 	andeq	r0, r1, r0, lsl ip
    aa48:	c1040a00 	tstgt	r4, r0, lsl #20
    aa4c:	0b000000 	bleq	aa54 <__exidx_end+0x5b28>
    aa50:	09320408 	ldmdbeq	r2!, {r3, sl}
    aa54:	000001a0 	andeq	r0, r0, r0, lsr #3
    aa58:	00003e0c 	andeq	r3, r0, ip, lsl #28
    aa5c:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    aa60:	000000d2 	ldrdeq	r0, [r0], -r2
    aa64:	00070101 	andeq	r0, r7, r1, lsl #2
    aa68:	0004fd0c 	andeq	pc, r4, ip, lsl #26
    aa6c:	03350400 	teqeq	r5, #0, 8
    aa70:	000000d2 	ldrdeq	r0, [r0], -r2
    aa74:	00060101 	andeq	r0, r6, r1, lsl #2
    aa78:	0002370c 	andeq	r3, r2, ip, lsl #14
    aa7c:	03360400 	teqeq	r6, #0, 8
    aa80:	000000d2 	ldrdeq	r0, [r0], -r2
    aa84:	00050101 	andeq	r0, r5, r1, lsl #2
    aa88:	0005370c 	andeq	r3, r5, ip, lsl #14
    aa8c:	03370400 	teqeq	r7, #0, 8
    aa90:	000000d2 	ldrdeq	r0, [r0], -r2
    aa94:	00040101 	andeq	r0, r4, r1, lsl #2
    aa98:	0007c00c 	andeq	ip, r7, ip
    aa9c:	03380400 	teqeq	r8, #0, 8
    aaa0:	000000d2 	ldrdeq	r0, [r0], -r2
    aaa4:	00000401 	andeq	r0, r0, r1, lsl #8
    aaa8:	0005040d 	andeq	r0, r5, sp, lsl #8
    aaac:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    aab0:	000000d2 	ldrdeq	r0, [r0], -r2
    aab4:	06ce0d01 	strbeq	r0, [lr], r1, lsl #26
    aab8:	3c040000 	stccc	0, cr0, [r4], {-0}
    aabc:	0000d203 	andeq	sp, r0, r3, lsl #4
    aac0:	6e0d0200 	cdpvs	2, 0, cr0, cr13, cr0, {0}
    aac4:	0400000a 	streq	r0, [r0], #-10
    aac8:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    aacc:	0d030000 	stceq	0, cr0, [r3, #-0]
    aad0:	00000703 	andeq	r0, r0, r3, lsl #14
    aad4:	e3083f04 	movw	r3, #36612	; 0x8f04
    aad8:	04000000 	streq	r0, [r0], #-0
    aadc:	02850300 	addeq	r0, r5, #0, 6
    aae0:	41040000 	mrsmi	r0, (UNDEF: 4)
    aae4:	00011203 	andeq	r1, r1, r3, lsl #4
    aae8:	01a00900 	lsleq	r0, r0, #18
    aaec:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
    aaf0:	04000005 	streq	r0, [r0], #-5
    aaf4:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    aaf8:	01010000 	mrseq	r0, (UNDEF: 1)
    aafc:	0001b10e 	andeq	fp, r1, lr, lsl #2
    ab00:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    ab04:	000001cd 	andeq	r0, r0, sp, asr #3
    ab08:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    ab0c:	000001d3 	ldrdeq	r0, [r0], -r3
    ab10:	e1080102 	tst	r8, r2, lsl #2
    ab14:	08000008 	stmdaeq	r0, {r3}
    ab18:	000001d3 	ldrdeq	r0, [r0], -r3
    ab1c:	00028e0e 	andeq	r8, r2, lr, lsl #28
    ab20:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    ab24:	000001cd 	andeq	r0, r0, sp, asr #3
    ab28:	080b0101 	stmdaeq	fp, {r0, r8}
    ab2c:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    ab30:	0d000002 	stceq	0, cr0, [r0, #-8]
    ab34:	00000601 	andeq	r0, r0, r1, lsl #12
    ab38:	670b9005 	strvs	r9, [fp, -r5]
    ab3c:	00000000 	andeq	r0, r0, r0
    ab40:	000ba00d 	andeq	sl, fp, sp
    ab44:	08910500 	ldmeq	r1, {r8, sl}
    ab48:	000000c1 	andeq	r0, r0, r1, asr #1
    ab4c:	01ea0d04 	mvneq	r0, r4, lsl #26
    ab50:	92050000 	andls	r0, r5, #0
    ab54:	0000de10 	andeq	sp, r0, r0, lsl lr
    ab58:	03000600 	movweq	r0, #1536	; 0x600
    ab5c:	00000941 	andeq	r0, r0, r1, asr #18
    ab60:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    ab64:	0f000001 	svceq	0x00000001
    ab68:	0000021e 	andeq	r0, r0, lr, lsl r2
    ab6c:	00000235 	andeq	r0, r0, r5, lsr r2
    ab70:	0f0e0010 	svceq	0x000e0010
    ab74:	05000007 	streq	r0, [r0, #-7]
    ab78:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    ab7c:	01010000 	mrseq	r0, (UNDEF: 1)
    ab80:	9106010b 	tstls	r6, fp, lsl #2
    ab84:	00026d09 	andeq	r6, r2, r9, lsl #26
    ab88:	070a0c00 	streq	r0, [sl, -r0, lsl #24]
    ab8c:	93060000 	movwls	r0, #24576	; 0x6000
    ab90:	0000d207 	andeq	sp, r0, r7, lsl #4
    ab94:	01070100 	mrseq	r0, (UNDEF: 23)
    ab98:	04780c00 	ldrbteq	r0, [r8], #-3072	; 0xfffff400
    ab9c:	94060000 	strls	r0, [r6], #-0
    aba0:	0000d203 	andeq	sp, r0, r3, lsl #4
    aba4:	00010100 	andeq	r0, r1, r0, lsl #2
    aba8:	cc030000 	stcgt	0, cr0, [r3], {-0}
    abac:	06000007 	streq	r0, [r0], -r7
    abb0:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    abb4:	6d080000 	stcvs	0, cr0, [r8, #-0]
    abb8:	0f000002 	svceq	0x00000002
    abbc:	00000279 	andeq	r0, r0, r9, ror r2
    abc0:	00000289 	andeq	r0, r0, r9, lsl #5
    abc4:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    abc8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    abcc:	00000347 	andeq	r0, r0, r7, asr #6
    abd0:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    abd4:	01000002 	tsteq	r0, r2
    abd8:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    abdc:	02a70000 	adceq	r0, r7, #0
    abe0:	00100000 	andseq	r0, r0, r0
    abe4:	00029c08 	andeq	r9, r2, r8, lsl #24
    abe8:	04b70e00 	ldrteq	r0, [r7], #3584	; 0xe00
    abec:	06070000 	streq	r0, [r7], -r0
    abf0:	0002a713 	andeq	sl, r2, r3, lsl r7
    abf4:	0e010100 	adfeqs	f0, f1, f0
    abf8:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    abfc:	e30ec305 	movw	ip, #58117	; 0xe305
    ac00:	01000000 	mrseq	r0, (UNDEF: 0)
    ac04:	08fa1101 	ldmeq	sl!, {r0, r8, ip}^
    ac08:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    ac0c:	02d51001 	sbcseq	r1, r5, #1
    ac10:	040a0000 	streq	r0, [sl], #-0
    ac14:	000002db 	ldrdeq	r0, [r0], -fp
    ac18:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    ac1c:	c1130000 	tstgt	r3, r0
    ac20:	00000000 	andeq	r0, r0, r0
    ac24:	0001da0f 	andeq	sp, r1, pc, lsl #20
    ac28:	0002f200 	andeq	pc, r2, r0, lsl #4
    ac2c:	08001000 	stmdaeq	r0, {ip}
    ac30:	000002e7 	andeq	r0, r0, r7, ror #5
    ac34:	00076314 	andeq	r6, r7, r4, lsl r3
    ac38:	017f0800 	cmneq	pc, r0, lsl #16
    ac3c:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    ac40:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    ac44:	0000032a 	andeq	r0, r0, sl, lsr #6
    ac48:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    ac4c:	000000ef 	andeq	r0, r0, pc, ror #1
    ac50:	07140101 	ldreq	r0, [r4, -r1, lsl #2]
    ac54:	08000003 	stmdaeq	r0, {r0, r1}
    ac58:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    ac5c:	01000000 	mrseq	r0, (UNDEF: 0)
    ac60:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    ac64:	4b090303 	blmi	24b878 <__ccfg+0x22b8d0>
    ac68:	16000003 	strne	r0, [r0], -r3
    ac6c:	0000374e 	andeq	r3, r0, lr, asr #14
    ac70:	07030708 	streq	r0, [r3, -r8, lsl #14]
    ac74:	000000c1 	andeq	r0, r0, r1, asr #1
    ac78:	0af81600 	beq	ffe10480 <_estack+0xdfe0b480>
    ac7c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    ac80:	00f40803 	rscseq	r0, r4, r3, lsl #16
    ac84:	00040000 	andeq	r0, r4, r0
    ac88:	0003bf11 	andeq	fp, r3, r1, lsl pc
    ac8c:	03090800 	movweq	r0, #38912	; 0x9800
    ac90:	00032403 	andeq	r2, r3, r3, lsl #8
    ac94:	00331700 	eorseq	r1, r3, r0, lsl #14
    ac98:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    ac9c:	bb08030b 	bllt	20b8d0 <__ccfg+0x1eb928>
    aca0:	16000003 	strne	r0, [r0], -r3
    aca4:	000019f9 	strdeq	r1, [r0], -r9
    aca8:	08031408 	stmdaeq	r3, {r3, sl, ip}
    acac:	000000c1 	andeq	r0, r0, r1, asr #1
    acb0:	08a41600 	stmiaeq	r4!, {r9, sl, ip}
    acb4:	15080000 	strne	r0, [r8, #-0]
    acb8:	00c10803 	sbceq	r0, r1, r3, lsl #16
    acbc:	16020000 	strne	r0, [r2], -r0
    acc0:	000048be 			; <UNDEFINED> instruction: 0x000048be
    acc4:	0b031608 	bleq	d04ec <__ccfg+0xb0544>
    acc8:	000002c8 	andeq	r0, r0, r8, asr #5
    accc:	43211604 			; <UNDEFINED> instruction: 0x43211604
    acd0:	17080000 	strne	r0, [r8, -r0]
    acd4:	00f40903 	rscseq	r0, r4, r3, lsl #18
    acd8:	16080000 	strne	r0, [r8], -r0
    acdc:	00000007 	andeq	r0, r0, r7
    ace0:	0f031808 	svceq	0x00031808
    ace4:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    ace8:	0722160c 	streq	r1, [r2, -ip, lsl #12]!
    acec:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    acf0:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    acf4:	002c0000 	eoreq	r0, ip, r0
    acf8:	00034b0f 	andeq	r4, r3, pc, lsl #22
    acfc:	0003cb00 	andeq	ip, r3, r0, lsl #22
    ad00:	00881800 	addeq	r1, r8, r0, lsl #16
    ad04:	00030000 	andeq	r0, r3, r0
    ad08:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    ad0c:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    ad10:	08000008 	stmdaeq	r0, {r3}
    ad14:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    ad18:	14000003 	strne	r0, [r0], #-3
    ad1c:	00000879 	andeq	r0, r0, r9, ror r8
    ad20:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    ad24:	000003ed 	andeq	r0, r0, sp, ror #7
    ad28:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    ad2c:	000003d1 	ldrdeq	r0, [r0], -r1
    ad30:	23bc0119 			; <UNDEFINED> instruction: 0x23bc0119
    ad34:	91010000 	mrsls	r0, (UNDEF: 1)
    ad38:	01cd0107 	biceq	r0, sp, r7, lsl #2
    ad3c:	2c380000 	ldccs	0, cr0, [r8], #-0
    ad40:	2c880000 	stccs	0, cr0, [r8], {0}
    ad44:	9c010000 	stcls	0, cr0, [r1], {-0}
    ad48:	00000468 	andeq	r0, r0, r8, ror #8
    ad4c:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    ad50:	14910100 	ldrne	r0, [r1], #256	; 0x100
    ad54:	000001cd 	andeq	r0, r0, sp, asr #3
    ad58:	00002b2c 	andeq	r2, r0, ip, lsr #22
    ad5c:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    ad60:	68259101 	stmdavs	r5!, {r0, r8, ip, pc}
    ad64:	76000004 	strvc	r0, [r0], -r4
    ad68:	1a00002b 	bne	ae1c <__exidx_end+0x5ef0>
    ad6c:	01007161 	tsteq	r0, r1, ror #2
    ad70:	00b53191 	umlalseq	r3, r5, r1, r1
    ad74:	2bb50000 	blcs	fed4ad7c <_estack+0xded45d7c>
    ad78:	661b0000 	ldrvs	r0, [fp], -r0
    ad7c:	01006c6d 	tsteq	r0, sp, ror #24
    ad80:	00c10793 	smulleq	r0, r1, r3, r7
    ad84:	2be90000 	blcs	ffa4ad8c <_estack+0xdfa45d8c>
    ad88:	641b0000 	ldrvs	r0, [fp], #-0
    ad8c:	0c930100 	ldfeqs	f0, [r3], {0}
    ad90:	000000c1 	andeq	r0, r0, r1, asr #1
    ad94:	00002c07 	andeq	r2, r0, r7, lsl #24
    ad98:	0023a41c 	eoreq	sl, r3, ip, lsl r4
    ad9c:	019e0100 	orrseq	r0, lr, r0, lsl #2
    ada0:	00002c62 	andeq	r2, r0, r2, ror #24
    ada4:	da040a00 	ble	10d5ac <__ccfg+0xed604>
    ada8:	1d000001 	stcne	0, cr0, [r0, #-4]
    adac:	0023af01 	eoreq	sl, r3, r1, lsl #30
    adb0:	06080100 	streq	r0, [r8], -r0, lsl #2
    adb4:	0000c101 	andeq	ip, r0, r1, lsl #2
    adb8:	002a0800 	eoreq	r0, sl, r0, lsl #16
    adbc:	002c3800 	eoreq	r3, ip, r0, lsl #16
    adc0:	1a9c0100 	bne	fe70b1c8 <_estack+0xde7061c8>
    adc4:	00736572 	rsbseq	r6, r3, r2, ror r5
    adc8:	cd1a0801 	ldcgt	8, cr0, [sl, #-4]
    adcc:	1a000001 	bne	add8 <__exidx_end+0x5eac>
    add0:	1a00002c 	bne	ae88 <__exidx_end+0x5f5c>
    add4:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    add8:	0000c124 	andeq	ip, r0, r4, lsr #2
    addc:	002c2d00 	eoreq	r2, ip, r0, lsl #26
    ade0:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    ade4:	33080100 	movwcc	r0, #33024	; 0x8100
    ade8:	00000468 	andeq	r0, r0, r8, ror #8
    adec:	00002c40 	andeq	r2, r0, r0, asr #24
    adf0:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    adf4:	b53f0801 	ldrlt	r0, [pc, #-2049]!	; a5fb <__exidx_end+0x56cf>
    adf8:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    adfc:	1b00002c 	blne	aeb4 <__exidx_end+0x5f88>
    ae00:	0a010063 	beq	4af94 <__ccfg+0x2afec>
    ae04:	0001d307 	andeq	sp, r1, r7, lsl #6
    ae08:	002d0b00 	eoreq	r0, sp, r0, lsl #22
    ae0c:	00641e00 	rsbeq	r1, r4, r0, lsl #28
    ae10:	c1070b01 	tstgt	r7, r1, lsl #22
    ae14:	04000000 	streq	r0, [r0], #-0
    ae18:	06235491 			; <UNDEFINED> instruction: 0x06235491
    ae1c:	0023aa1f 	eoreq	sl, r3, pc, lsl sl
    ae20:	070d0100 	streq	r0, [sp, -r0, lsl #2]
    ae24:	0029e801 	eoreq	lr, r9, r1, lsl #16
    ae28:	002a0800 	eoreq	r0, sl, r0, lsl #16
    ae2c:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    ae30:	0823007c 	stmdaeq	r3!, {r2, r3, r4, r5, r6}
    ae34:	00050906 	andeq	r0, r5, r6, lsl #18
    ae38:	00632000 	rsbeq	r2, r3, r0
    ae3c:	c1120d01 	tstgt	r2, r1, lsl #26
    ae40:	01000000 	mrseq	r0, (UNDEF: 0)
    ae44:	45210050 	strmi	r0, [r1, #-80]!	; 0xffffffb0
    ae48:	01006c6f 	tsteq	r0, pc, ror #24
    ae4c:	2a420188 	bcs	108b474 <__ccfg+0x106b4cc>
    ae50:	52210000 	eorpl	r0, r1, #0
    ae54:	01007465 	tsteq	r0, r5, ror #8
    ae58:	2aa4018b 	bcs	fe90b48c <_estack+0xde90648c>
    ae5c:	78220000 	stmdavc	r2!, {}	; <UNPREDICTABLE>
    ae60:	4500000e 	strmi	r0, [r0, #-14]
    ae64:	23000005 	movwcs	r0, #5
    ae68:	006c6176 	rsbeq	r6, ip, r6, ror r1
    ae6c:	c10a3a01 	tstgt	sl, r1, lsl #20
    ae70:	1b000000 	blne	ae78 <__exidx_end+0x5f4c>
    ae74:	3a010069 	bcc	4b020 <__ccfg+0x2b078>
    ae78:	00008113 	andeq	r8, r0, r3, lsl r1
    ae7c:	002df100 	eoreq	pc, sp, r0, lsl #2
    ae80:	50220000 	eorpl	r0, r2, r0
    ae84:	6d00000e 	stcvs	0, cr0, [r0, #-56]	; 0xffffffc8
    ae88:	1b000005 	blne	aea4 <__exidx_end+0x5f78>
    ae8c:	006c6176 	rsbeq	r6, ip, r6, ror r1
    ae90:	c10a4601 	tstgt	sl, r1, lsl #12
    ae94:	04000000 	streq	r0, [r0], #-0
    ae98:	1b00002e 	blne	af58 <__exidx_end+0x602c>
    ae9c:	46010069 	strmi	r0, [r1], -r9, rrx
    aea0:	0000c10f 	andeq	ip, r0, pc, lsl #2
    aea4:	002e2d00 	eoreq	r2, lr, r0, lsl #26
    aea8:	b0220000 	eorlt	r0, r2, r0
    aeac:	9500000e 	strls	r0, [r0, #-14]
    aeb0:	1b000005 	blne	aecc <__exidx_end+0x5fa0>
    aeb4:	006c6176 	rsbeq	r6, ip, r6, ror r1
    aeb8:	e30c5501 	movw	r5, #50433	; 0xc501
    aebc:	56000000 	strpl	r0, [r0], -r0
    aec0:	1b00002e 	blne	af80 <__exidx_end+0x6054>
    aec4:	55010069 	strpl	r0, [r1, #-105]	; 0xffffff97
    aec8:	0000e311 	andeq	lr, r0, r1, lsl r3
    aecc:	002e6900 	eoreq	r6, lr, r0, lsl #18
    aed0:	c6240000 	strtgt	r0, [r4], -r0
    aed4:	f000002b 			; <UNDEFINED> instruction: 0xf000002b
    aed8:	bf00002b 	svclt	0x0000002b
    aedc:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    aee0:	006c6176 	rsbeq	r6, ip, r6, ror r1
    aee4:	e30c6001 	movw	r6, #49153	; 0xc001
    aee8:	01000000 	mrseq	r0, (UNDEF: 0)
    aeec:	00691b59 	rsbeq	r1, r9, r9, asr fp
    aef0:	810a6101 	tsthi	sl, r1, lsl #2
    aef4:	92000000 	andls	r0, r0, #0
    aef8:	0000002e 	andeq	r0, r0, lr, lsr #32
    aefc:	000e9822 	andeq	r9, lr, r2, lsr #16
    af00:	0005d900 	andeq	sp, r5, r0, lsl #18
    af04:	61761b00 	cmnvs	r6, r0, lsl #22
    af08:	7101006c 	tstvc	r1, ip, rrx
    af0c:	0000c10a 	andeq	ip, r0, sl, lsl #2
    af10:	002ea500 	eoreq	sl, lr, r0, lsl #10
    af14:	0e250000 	cdpeq	0, 2, cr0, cr5, cr0, {0}
    af18:	2a00002c 	bcs	afd0 <__exidx_end+0x60a4>
    af1c:	1b00002c 	blne	afd4 <__exidx_end+0x60a8>
    af20:	01007473 	tsteq	r0, r3, ror r4
    af24:	01cd0b78 	biceq	r0, sp, r8, ror fp
    af28:	2ec50000 	cdpcs	0, 12, cr0, cr5, cr0, {0}
    af2c:	00000000 	andeq	r0, r0, r0
    af30:	00058f00 	andeq	r8, r5, r0, lsl #30
    af34:	ea000300 	b	bb3c <__exidx_end+0x6c10>
    af38:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    af3c:	0000bd01 	andeq	fp, r0, r1, lsl #26
    af40:	23cf0c00 	biccs	r0, pc, #0, 24
    af44:	06640000 	strbteq	r0, [r4], -r0
    af48:	0f700000 	svceq	0x00700000
    af4c:	00000000 	andeq	r0, r0, r0
    af50:	640d0000 	strvs	r0, [sp], #-0
    af54:	01020000 	mrseq	r0, (UNDEF: 2)
    af58:	0008da06 	andeq	sp, r8, r6, lsl #20
    af5c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    af60:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    af64:	e9050402 	stmdb	r5, {r1, sl}
    af68:	02000005 	andeq	r0, r0, #5
    af6c:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    af70:	31030000 	mrscc	r0, (UNDEF: 3)
    af74:	02000008 	andeq	r0, r0, #8
    af78:	004d182e 	subeq	r1, sp, lr, lsr #16
    af7c:	01020000 	mrseq	r0, (UNDEF: 2)
    af80:	0008d808 	andeq	sp, r8, r8, lsl #16
    af84:	03ce0300 	biceq	r0, lr, #0, 6
    af88:	31020000 	mrscc	r0, (UNDEF: 2)
    af8c:	00006019 	andeq	r6, r0, r9, lsl r0
    af90:	07020200 	streq	r0, [r2, -r0, lsl #4]
    af94:	000009a6 	andeq	r0, r0, r6, lsr #19
    af98:	0008f103 	andeq	pc, r8, r3, lsl #2
    af9c:	19340200 	ldmdbne	r4!, {r9}
    afa0:	00000073 	andeq	r0, r0, r3, ror r0
    afa4:	93070402 	movwls	r0, #29698	; 0x7402
    afa8:	02000003 	andeq	r0, r0, #3
    afac:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    afb0:	04040000 	streq	r0, [r4], #-0
    afb4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    afb8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    afbc:	00000398 	muleq	r0, r8, r3
    afc0:	00041a03 	andeq	r1, r4, r3, lsl #20
    afc4:	1b280300 	blne	a0bbcc <__ccfg+0x9ebc24>
    afc8:	0000009b 	muleq	r0, fp, r0
    afcc:	00086105 	andeq	r6, r8, r5, lsl #2
    afd0:	00090400 	andeq	r0, r9, r0, lsl #8
    afd4:	000000b3 	strheq	r0, [r0], -r3
    afd8:	00094806 	andeq	r4, r9, r6, lsl #16
    afdc:	0000b300 	andeq	fp, r0, r0, lsl #6
    afe0:	00010000 	andeq	r0, r1, r0
    afe4:	63030407 	movwvs	r0, #13319	; 0x3407
    afe8:	03000008 	movweq	r0, #8
    afec:	008f1863 	addeq	r1, pc, r3, ror #16
    aff0:	2f030000 	svccs	0x00030000
    aff4:	04000007 	streq	r0, [r0], #-7
    aff8:	00411226 	subeq	r1, r1, r6, lsr #4
    affc:	ca030000 	bgt	cb004 <__ccfg+0xab05c>
    b000:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    b004:	00541227 	subseq	r1, r4, r7, lsr #4
    b008:	cd080000 	stcgt	0, cr0, [r8, #-0]
    b00c:	03000000 	movweq	r0, #0
    b010:	000018e3 	andeq	r1, r0, r3, ror #17
    b014:	41122b04 	tstmi	r2, r4, lsl #22
    b018:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b01c:	000000de 	ldrdeq	r0, [r0], -lr
    b020:	00241b03 	eoreq	r1, r4, r3, lsl #22
    b024:	122c0400 	eorne	r0, ip, #0, 8
    b028:	00000067 	andeq	r0, r0, r7, rrx
    b02c:	0000ef08 	andeq	lr, r0, r8, lsl #30
    b030:	04f70300 	ldrbteq	r0, [r7], #768	; 0x300
    b034:	2d040000 	stccs	0, cr0, [r4, #-0]
    b038:	00006712 	andeq	r6, r0, r2, lsl r7
    b03c:	cd040a00 	vstrgt	s0, [r4, #-0]
    b040:	0b000000 	bleq	b048 <__exidx_end+0x611c>
    b044:	09320408 	ldmdbeq	r2!, {r3, sl}
    b048:	000001a0 	andeq	r0, r0, r0, lsr #3
    b04c:	00003e0c 	andeq	r3, r0, ip, lsl #28
    b050:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    b054:	000000de 	ldrdeq	r0, [r0], -lr
    b058:	00070101 	andeq	r0, r7, r1, lsl #2
    b05c:	0004fd0c 	andeq	pc, r4, ip, lsl #26
    b060:	03350400 	teqeq	r5, #0, 8
    b064:	000000de 	ldrdeq	r0, [r0], -lr
    b068:	00060101 	andeq	r0, r6, r1, lsl #2
    b06c:	0002370c 	andeq	r3, r2, ip, lsl #14
    b070:	03360400 	teqeq	r6, #0, 8
    b074:	000000de 	ldrdeq	r0, [r0], -lr
    b078:	00050101 	andeq	r0, r5, r1, lsl #2
    b07c:	0005370c 	andeq	r3, r5, ip, lsl #14
    b080:	03370400 	teqeq	r7, #0, 8
    b084:	000000de 	ldrdeq	r0, [r0], -lr
    b088:	00040101 	andeq	r0, r4, r1, lsl #2
    b08c:	0007c00c 	andeq	ip, r7, ip
    b090:	03380400 	teqeq	r8, #0, 8
    b094:	000000de 	ldrdeq	r0, [r0], -lr
    b098:	00000401 	andeq	r0, r0, r1, lsl #8
    b09c:	0005040d 	andeq	r0, r5, sp, lsl #8
    b0a0:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    b0a4:	000000de 	ldrdeq	r0, [r0], -lr
    b0a8:	06ce0d01 	strbeq	r0, [lr], r1, lsl #26
    b0ac:	3c040000 	stccc	0, cr0, [r4], {-0}
    b0b0:	0000de03 	andeq	sp, r0, r3, lsl #28
    b0b4:	6e0d0200 	cdpvs	2, 0, cr0, cr13, cr0, {0}
    b0b8:	0400000a 	streq	r0, [r0], #-10
    b0bc:	00de033d 	sbcseq	r0, lr, sp, lsr r3
    b0c0:	0d030000 	stceq	0, cr0, [r3, #-0]
    b0c4:	00000703 	andeq	r0, r0, r3, lsl #14
    b0c8:	ef083f04 	svc	0x00083f04
    b0cc:	04000000 	streq	r0, [r0], #-0
    b0d0:	02850300 	addeq	r0, r5, #0, 6
    b0d4:	41040000 	mrsmi	r0, (UNDEF: 4)
    b0d8:	00011203 	andeq	r1, r1, r3, lsl #4
    b0dc:	01a00900 	lsleq	r0, r0, #18
    b0e0:	3e0e0000 	cdpcc	0, 0, cr0, cr14, cr0, {0}
    b0e4:	04000005 	streq	r0, [r0], #-5
    b0e8:	01ac1a43 			; <UNDEFINED> instruction: 0x01ac1a43
    b0ec:	01010000 	mrseq	r0, (UNDEF: 1)
    b0f0:	0001b10e 	andeq	fp, r1, lr, lsl #2
    b0f4:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    b0f8:	000001cd 	andeq	r0, r0, sp, asr #3
    b0fc:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    b100:	000001d3 	ldrdeq	r0, [r0], -r3
    b104:	e1080102 	tst	r8, r2, lsl #2
    b108:	08000008 	stmdaeq	r0, {r3}
    b10c:	000001d3 	ldrdeq	r0, [r0], -r3
    b110:	00028e0e 	andeq	r8, r2, lr, lsl #28
    b114:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    b118:	000001cd 	andeq	r0, r0, sp, asr #3
    b11c:	080b0101 	stmdaeq	fp, {r0, r8}
    b120:	1e098f05 	cdpne	15, 0, cr8, cr9, cr5, {0}
    b124:	0d000002 	stceq	0, cr0, [r0, #-8]
    b128:	00000601 	andeq	r0, r0, r1, lsl #12
    b12c:	670b9005 	strvs	r9, [fp, -r5]
    b130:	00000000 	andeq	r0, r0, r0
    b134:	000ba00d 	andeq	sl, fp, sp
    b138:	08910500 	ldmeq	r1, {r8, sl}
    b13c:	000000cd 	andeq	r0, r0, sp, asr #1
    b140:	01ea0d04 	mvneq	r0, r4, lsl #26
    b144:	92050000 	andls	r0, r5, #0
    b148:	0000ea10 	andeq	lr, r0, r0, lsl sl
    b14c:	03000600 	movweq	r0, #1536	; 0x600
    b150:	00000941 	andeq	r0, r0, r1, asr #18
    b154:	ed039305 	stc	3, cr9, [r3, #-20]	; 0xffffffec
    b158:	0f000001 	svceq	0x00000001
    b15c:	0000021e 	andeq	r0, r0, lr, lsl r2
    b160:	00000235 	andeq	r0, r0, r5, lsr r2
    b164:	0f0e0010 	svceq	0x000e0010
    b168:	05000007 	streq	r0, [r0, #-7]
    b16c:	022a0f99 	eoreq	r0, sl, #612	; 0x264
    b170:	01010000 	mrseq	r0, (UNDEF: 1)
    b174:	9106010b 	tstls	r6, fp, lsl #2
    b178:	00026d09 	andeq	r6, r2, r9, lsl #26
    b17c:	070a0c00 	streq	r0, [sl, -r0, lsl #24]
    b180:	93060000 	movwls	r0, #24576	; 0x6000
    b184:	0000de07 	andeq	sp, r0, r7, lsl #28
    b188:	01070100 	mrseq	r0, (UNDEF: 23)
    b18c:	04780c00 	ldrbteq	r0, [r8], #-3072	; 0xfffff400
    b190:	94060000 	strls	r0, [r6], #-0
    b194:	0000de03 	andeq	sp, r0, r3, lsl #28
    b198:	00010100 	andeq	r0, r1, r0, lsl #2
    b19c:	cc030000 	stcgt	0, cr0, [r3], {-0}
    b1a0:	06000007 	streq	r0, [r0], -r7
    b1a4:	02430396 	subeq	r0, r3, #1476395010	; 0x58000002
    b1a8:	6d080000 	stcvs	0, cr0, [r8, #-0]
    b1ac:	0f000002 	svceq	0x00000002
    b1b0:	00000279 	andeq	r0, r0, r9, ror r2
    b1b4:	00000289 	andeq	r0, r0, r9, lsl #5
    b1b8:	7e080010 	mcrvc	0, 0, r0, cr8, cr0, {0}
    b1bc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    b1c0:	00000347 	andeq	r0, r0, r7, asr #6
    b1c4:	89179c06 	ldmdbhi	r7, {r1, r2, sl, fp, ip, pc}
    b1c8:	01000002 	tsteq	r0, r2
    b1cc:	00d90f01 	sbcseq	r0, r9, r1, lsl #30
    b1d0:	02a70000 	adceq	r0, r7, #0
    b1d4:	00100000 	andseq	r0, r0, r0
    b1d8:	00029c08 	andeq	r9, r2, r8, lsl #24
    b1dc:	04b70e00 	ldrteq	r0, [r7], #3584	; 0xe00
    b1e0:	06070000 	streq	r0, [r7], -r0
    b1e4:	0002a713 	andeq	sl, r2, r3, lsl r7
    b1e8:	0e010100 	adfeqs	f0, f1, f0
    b1ec:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    b1f0:	ef0ec305 	svc	0x000ec305
    b1f4:	01000000 	mrseq	r0, (UNDEF: 0)
    b1f8:	08fa1101 	ldmeq	sl!, {r0, r8, ip}^
    b1fc:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    b200:	02d51001 	sbcseq	r1, r5, #1
    b204:	040a0000 	streq	r0, [sl], #-0
    b208:	000002db 	ldrdeq	r0, [r0], -fp
    b20c:	02e70112 	rsceq	r0, r7, #-2147483644	; 0x80000004
    b210:	cd130000 	ldcgt	0, cr0, [r3, #-0]
    b214:	00000000 	andeq	r0, r0, r0
    b218:	0001da0f 	andeq	sp, r1, pc, lsl #20
    b21c:	0002f200 	andeq	pc, r2, r0, lsl #4
    b220:	08001000 	stmdaeq	r0, {ip}
    b224:	000002e7 	andeq	r0, r0, r7, ror #5
    b228:	00076314 	andeq	r6, r7, r4, lsl r3
    b22c:	017f0800 	cmneq	pc, r0, lsl #16
    b230:	0002f216 	andeq	pc, r2, r6, lsl r2	; <UNPREDICTABLE>
    b234:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    b238:	0000032a 	andeq	r0, r0, sl, lsr #6
    b23c:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    b240:	000000fb 	strdeq	r0, [r0], -fp
    b244:	07140101 	ldreq	r0, [r4, -r1, lsl #2]
    b248:	08000003 	stmdaeq	r0, {r0, r1}
    b24c:	ef0e02d8 	svc	0x000e02d8
    b250:	01000000 	mrseq	r0, (UNDEF: 0)
    b254:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    b258:	4b090303 	blmi	24be6c <__ccfg+0x22bec4>
    b25c:	16000003 	strne	r0, [r0], -r3
    b260:	0000374e 	andeq	r3, r0, lr, asr #14
    b264:	07030708 	streq	r0, [r3, -r8, lsl #14]
    b268:	000000cd 	andeq	r0, r0, sp, asr #1
    b26c:	0af81600 	beq	ffe10a74 <_estack+0xdfe0ba74>
    b270:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    b274:	01000803 	tsteq	r0, r3, lsl #16
    b278:	00040000 	andeq	r0, r4, r0
    b27c:	0003bf11 	andeq	fp, r3, r1, lsl pc
    b280:	03090800 	movweq	r0, #38912	; 0x9800
    b284:	00032403 	andeq	r2, r3, r3, lsl #8
    b288:	00331700 	eorseq	r1, r3, r0, lsl #14
    b28c:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    b290:	bb08030b 	bllt	20bec4 <__ccfg+0x1ebf1c>
    b294:	16000003 	strne	r0, [r0], -r3
    b298:	000019f9 	strdeq	r1, [r0], -r9
    b29c:	08031408 	stmdaeq	r3, {r3, sl, ip}
    b2a0:	000000cd 	andeq	r0, r0, sp, asr #1
    b2a4:	08a41600 	stmiaeq	r4!, {r9, sl, ip}
    b2a8:	15080000 	strne	r0, [r8, #-0]
    b2ac:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    b2b0:	16020000 	strne	r0, [r2], -r0
    b2b4:	000048be 			; <UNDEFINED> instruction: 0x000048be
    b2b8:	0b031608 	bleq	d0ae0 <__ccfg+0xb0b38>
    b2bc:	000002c8 	andeq	r0, r0, r8, asr #5
    b2c0:	43211604 			; <UNDEFINED> instruction: 0x43211604
    b2c4:	17080000 	strne	r0, [r8, -r0]
    b2c8:	01000903 	tsteq	r0, r3, lsl #18
    b2cc:	16080000 	strne	r0, [r8], -r0
    b2d0:	00000007 	andeq	r0, r0, r7
    b2d4:	0f031808 	svceq	0x00031808
    b2d8:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    b2dc:	0722160c 	streq	r1, [r2, -ip, lsl #12]!
    b2e0:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    b2e4:	03cb1503 	biceq	r1, fp, #12582912	; 0xc00000
    b2e8:	002c0000 	eoreq	r0, ip, r0
    b2ec:	00034b0f 	andeq	r4, r3, pc, lsl #22
    b2f0:	0003cb00 	andeq	ip, r3, r0, lsl #22
    b2f4:	00881800 	addeq	r1, r8, r0, lsl #16
    b2f8:	00030000 	andeq	r0, r3, r0
    b2fc:	0358040a 	cmpeq	r8, #167772160	; 0xa000000
    b300:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    b304:	08000008 	stmdaeq	r0, {r3}
    b308:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    b30c:	14000003 	strne	r0, [r0], #-3
    b310:	00000879 	andeq	r0, r0, r9, ror r8
    b314:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    b318:	000003ed 	andeq	r0, r0, sp, ror #7
    b31c:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    b320:	000003d1 	ldrdeq	r0, [r0], -r1
    b324:	240d0119 	strcs	r0, [sp], #-281	; 0xfffffee7
    b328:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    b32c:	00810105 	addeq	r0, r1, r5, lsl #2
    b330:	2c880000 	stccs	0, cr0, [r8], {0}
    b334:	30180000 	andscc	r0, r8, r0
    b338:	9c010000 	stcls	0, cr0, [r1], {-0}
    b33c:	00000586 	andeq	r0, r0, r6, lsl #11
    b340:	6675621a 			; <UNDEFINED> instruction: 0x6675621a
    b344:	18080100 	stmdane	r8, {r8}
    b348:	00000586 	andeq	r0, r0, r6, lsl #11
    b34c:	00002ed8 	ldrdeq	r2, [r0], -r8
    b350:	746d661a 	strbtvc	r6, [sp], #-1562	; 0xfffff9e6
    b354:	29080100 	stmdbcs	r8, {r8}
    b358:	00000586 	andeq	r0, r0, r6, lsl #11
    b35c:	000030cf 	andeq	r3, r0, pc, asr #1
    b360:	0070611a 	rsbseq	r6, r0, sl, lsl r1
    b364:	b5360801 	ldrlt	r0, [r6, #-2049]!	; 0xfffff7ff
    b368:	03000000 	movweq	r0, #0
    b36c:	1b000031 	blne	b438 <__exidx_end+0x650c>
    b370:	0100636e 	tsteq	r0, lr, ror #6
    b374:	0081060a 	addeq	r0, r1, sl, lsl #12
    b378:	319c0000 	orrscc	r0, ip, r0
    b37c:	c21c0000 	andsgt	r0, ip, #0
    b380:	01000023 	tsteq	r0, r3, lsr #32
    b384:	131c114e 	tstne	ip, #-2147483629	; 0x80000013
    b388:	01000024 	tsteq	r0, r4, lsr #32
    b38c:	4a1d1655 	bmi	750ce8 <__ccfg+0x730d40>
    b390:	ba00002d 	blt	b44c <__exidx_end+0x6520>
    b394:	8800002d 	stmdahi	r0, {r0, r2, r3, r5}
    b398:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    b39c:	00706176 	rsbseq	r6, r0, r6, ror r1
    b3a0:	0c114e01 	ldceq	14, cr4, [r1], {1}
    b3a4:	01000001 	tsteq	r0, r1
    b3a8:	666d1b56 			; <UNDEFINED> instruction: 0x666d1b56
    b3ac:	114e0100 	mrsne	r0, (UNDEF: 94)
    b3b0:	000000c1 	andeq	r0, r0, r1, asr #1
    b3b4:	0000321d 	andeq	r3, r0, sp, lsl r2
    b3b8:	2dba1d00 	ldccs	13, cr1, [sl]
    b3bc:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    b3c0:	04a40000 	strteq	r0, [r4], #0
    b3c4:	761e0000 	ldrvc	r0, [lr], -r0
    b3c8:	01007061 	tsteq	r0, r1, rrx
    b3cc:	010c114f 	tsteq	ip, pc, asr #2
    b3d0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    b3d4:	0f201f00 	svceq	0x00201f00
    b3d8:	04d50000 	ldrbeq	r0, [r5], #0
    b3dc:	761e0000 	ldrvc	r0, [lr], -r0
    b3e0:	01007061 	tsteq	r0, r1, rrx
    b3e4:	010c1150 	tsteq	ip, r0, asr r1
    b3e8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    b3ec:	00636420 	rsbeq	r6, r3, r0, lsr #8
    b3f0:	81115001 	tsthi	r1, r1
    b3f4:	1b000000 	blne	b3fc <__exidx_end+0x64d0>
    b3f8:	50010063 	andpl	r0, r1, r3, rrx
    b3fc:	0001d311 	andeq	sp, r1, r1, lsl r3
    b400:	00323b00 	eorseq	r3, r2, r0, lsl #22
    b404:	381f0000 	ldmdacc	pc, {}	; <UNPREDICTABLE>
    b408:	fc00000f 	stc2	0, cr0, [r0], {15}
    b40c:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    b410:	00706176 	rsbseq	r6, r0, r6, ror r1
    b414:	8c165501 	cfldr32hi	mvfx5, [r6], {1}
    b418:	01000005 	tsteq	r0, r5
    b41c:	666d1b5e 			; <UNDEFINED> instruction: 0x666d1b5e
    b420:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    b424:	000000c1 	andeq	r0, r0, r1, asr #1
    b428:	00003259 	andeq	r3, r0, r9, asr r2
    b42c:	0ee81f00 	cdpeq	15, 14, cr1, cr8, cr0, {0}
    b430:	05140000 	ldreq	r0, [r4, #-0]
    b434:	761e0000 	ldrvc	r0, [lr], -r0
    b438:	01007061 	tsteq	r0, r1, rrx
    b43c:	058c1656 	streq	r1, [ip, #1622]	; 0x656
    b440:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    b444:	0f501f00 	svceq	0x00501f00
    b448:	05450000 	strbeq	r0, [r5, #-0]
    b44c:	761e0000 	ldrvc	r0, [lr], -r0
    b450:	01007061 	tsteq	r0, r1, rrx
    b454:	058c1657 	streq	r1, [ip, #1623]	; 0x657
    b458:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    b45c:	00636420 	rsbeq	r6, r3, r0, lsr #8
    b460:	81165701 	tsthi	r6, r1, lsl #14
    b464:	1b000000 	blne	b46c <__exidx_end+0x6540>
    b468:	57010063 	strpl	r0, [r1, -r3, rrx]
    b46c:	0001d316 	andeq	sp, r1, r6, lsl r3
    b470:	00327700 	eorseq	r7, r2, r0, lsl #14
    b474:	ca1d0000 	bgt	74b47c <__ccfg+0x72b4d4>
    b478:	de00002f 	cdple	0, 0, cr0, cr0, cr15, {1}
    b47c:	6f00002f 	svcvs	0x0000002f
    b480:	1b000005 	blne	b49c <__exidx_end+0x6570>
    b484:	5c010063 	stcpl	0, cr0, [r1], {99}	; 0x63
    b488:	0001d309 	andeq	sp, r1, r9, lsl #6
    b48c:	00329500 	eorseq	r9, r2, r0, lsl #10
    b490:	61731e00 	cmnvs	r3, r0, lsl #28
    b494:	5c010070 	stcpl	0, cr0, [r1], {112}	; 0x70
    b498:	0001cd0d 	andeq	ip, r1, sp, lsl #26
    b49c:	00560100 	subseq	r0, r6, r0, lsl #2
    b4a0:	000f0021 	andeq	r0, pc, r1, lsr #32
    b4a4:	61731b00 	cmnvs	r3, r0, lsl #22
    b4a8:	66010070 			; <UNDEFINED> instruction: 0x66010070
    b4ac:	0001cd0a 	andeq	ip, r1, sl, lsl #26
    b4b0:	0032a800 	eorseq	sl, r2, r0, lsl #16
    b4b4:	0a000000 	beq	b4bc <__exidx_end+0x6590>
    b4b8:	0001da04 	andeq	sp, r1, r4, lsl #20
    b4bc:	ef040a00 	svc	0x00040a00
    b4c0:	00000000 	andeq	r0, r0, r0
    b4c4:	00001fea 	andeq	r1, r0, sl, ror #31
    b4c8:	2ca60003 	stccs	0, cr0, [r6], #12
    b4cc:	01040000 	mrseq	r0, (UNDEF: 4)
    b4d0:	000000bd 	strheq	r0, [r0], -sp
    b4d4:	0024210c 	eoreq	r2, r4, ip, lsl #2
    b4d8:	00066400 	andeq	r6, r6, r0, lsl #8
    b4dc:	0066d700 	rsbeq	sp, r6, r0, lsl #14
    b4e0:	06010200 	streq	r0, [r1], -r0, lsl #4
    b4e4:	000008da 	ldrdeq	r0, [r0], -sl
    b4e8:	002c9a03 	eoreq	r9, ip, r3, lsl #20
    b4ec:	18250100 	stmdane	r5!, {r8}
    b4f0:	00000030 	andeq	r0, r0, r0, lsr r0
    b4f4:	9f050202 	svcls	0x00050202
    b4f8:	02000007 	andeq	r0, r0, #7
    b4fc:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
    b500:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b504:	0005e405 	andeq	lr, r5, r5, lsl #8
    b508:	08310300 	ldmdaeq	r1!, {r8, r9}
    b50c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    b510:	00005118 	andeq	r5, r0, r8, lsl r1
    b514:	08010200 	stmdaeq	r1, {r9}
    b518:	000008d8 	ldrdeq	r0, [r0], -r8
    b51c:	0003ce03 	andeq	ip, r3, r3, lsl #28
    b520:	19310100 	ldmdbne	r1!, {r8}
    b524:	00000064 	andeq	r0, r0, r4, rrx
    b528:	a6070202 	strge	r0, [r7], -r2, lsl #4
    b52c:	03000009 	movweq	r0, #9
    b530:	000008f1 	strdeq	r0, [r0], -r1
    b534:	7c193401 	cfldrsvc	mvf3, [r9], {1}
    b538:	04000000 	streq	r0, [r0], #-0
    b53c:	0000006b 	andeq	r0, r0, fp, rrx
    b540:	93070402 	movwls	r0, #29698	; 0x7402
    b544:	02000003 	andeq	r0, r0, #3
    b548:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    b54c:	04050000 	streq	r0, [r5], #-0
    b550:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    b554:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b558:	00000398 	muleq	r0, r8, r3
    b55c:	00246a03 	eoreq	r6, r4, r3, lsl #20
    b560:	1a560100 	bne	158b968 <__ccfg+0x156b9c0>
    b564:	00000091 	muleq	r0, r1, r0
    b568:	00089206 	andeq	r9, r8, r6, lsl #4
    b56c:	015e0200 	cmpeq	lr, r0, lsl #4
    b570:	00009117 	andeq	r9, r0, r7, lsl r1
    b574:	09e20300 	stmibeq	r2!, {r8, r9}^
    b578:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    b57c:	0000370e 	andeq	r3, r0, lr, lsl #14
    b580:	02670300 	rsbeq	r0, r7, #0, 6
    b584:	74030000 	strvc	r0, [r3], #-0
    b588:	0000370e 	andeq	r3, r0, lr, lsl #14
    b58c:	03040700 	movweq	r0, #18176	; 0x4700
    b590:	00eb03a5 	rsceq	r0, fp, r5, lsr #7
    b594:	87080000 	strhi	r0, [r8, -r0]
    b598:	03000005 	movweq	r0, #5
    b59c:	00a40ca7 	adceq	r0, r4, r7, lsr #25
    b5a0:	e6080000 	str	r0, [r8], -r0
    b5a4:	03000007 	movweq	r0, #7
    b5a8:	00eb13a8 	rsceq	r1, fp, r8, lsr #7
    b5ac:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b5b0:	00000051 	andeq	r0, r0, r1, asr r0
    b5b4:	000000fb 	strdeq	r0, [r0], -fp
    b5b8:	0000910a 	andeq	r9, r0, sl, lsl #2
    b5bc:	0b000300 	bleq	c1c4 <__exidx_end+0x7298>
    b5c0:	09a20308 	stmibeq	r2!, {r3, r8, r9}
    b5c4:	0000011f 	andeq	r0, r0, pc, lsl r1
    b5c8:	0003220c 	andeq	r2, r3, ip, lsl #4
    b5cc:	07a40300 	streq	r0, [r4, r0, lsl #6]!
    b5d0:	0000008a 	andeq	r0, r0, sl, lsl #1
    b5d4:	04aa0c00 	strteq	r0, [sl], #3072	; 0xc00
    b5d8:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    b5dc:	0000c905 	andeq	ip, r0, r5, lsl #18
    b5e0:	03000400 	movweq	r0, #1024	; 0x400
    b5e4:	000006a5 	andeq	r0, r0, r5, lsr #13
    b5e8:	fb03aa03 	blx	f5dfe <__ccfg+0xd5e56>
    b5ec:	0d000000 	stceq	0, cr0, [r0, #-0]
    b5f0:	06290304 	strteq	r0, [r9], -r4, lsl #6
    b5f4:	16040000 	strne	r0, [r4], -r0
    b5f8:	00007c19 	andeq	r7, r0, r9, lsl ip
    b5fc:	01fe0300 	mvnseq	r0, r0, lsl #6
    b600:	0c050000 	stceq	0, cr0, [r5], {-0}
    b604:	00008a0d 	andeq	r8, r0, sp, lsl #20
    b608:	05550300 	ldrbeq	r0, [r5, #-768]	; 0xfffffd00
    b60c:	23040000 	movwcs	r0, #16384	; 0x4000
    b610:	0001391b 	andeq	r3, r1, fp, lsl r9
    b614:	02a70e00 	adceq	r0, r7, #0, 28
    b618:	04180000 	ldreq	r0, [r8], #-0
    b61c:	01ab0834 			; <UNDEFINED> instruction: 0x01ab0834
    b620:	320c0000 	andcc	r0, ip, #0
    b624:	0400000a 	streq	r0, [r0], #-10
    b628:	01ab1336 			; <UNDEFINED> instruction: 0x01ab1336
    b62c:	0f000000 	svceq	0x00000000
    b630:	04006b5f 	streq	r6, [r0], #-2911	; 0xfffff4a1
    b634:	008a0737 	addeq	r0, sl, r7, lsr r7
    b638:	0c040000 	stceq	0, cr0, [r4], {-0}
    b63c:	00000841 	andeq	r0, r0, r1, asr #16
    b640:	8a0b3704 	bhi	2d9258 <__ccfg+0x2b92b0>
    b644:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b648:	003ea20c 	eorseq	sl, lr, ip, lsl #4
    b64c:	14370400 	ldrtne	r0, [r7], #-1024	; 0xfffffc00
    b650:	0000008a 	andeq	r0, r0, sl, lsl #1
    b654:	03ba0c0c 			; <UNDEFINED> instruction: 0x03ba0c0c
    b658:	37040000 	strcc	r0, [r4, -r0]
    b65c:	00008a1b 	andeq	r8, r0, fp, lsl sl
    b660:	5f0f1000 	svcpl	0x000f1000
    b664:	38040078 	stmdacc	r4, {r3, r4, r5, r6}
    b668:	0001b10b 	andeq	fp, r1, fp, lsl #2
    b66c:	10001400 	andne	r1, r0, r0, lsl #8
    b670:	00015104 	andeq	r5, r1, r4, lsl #2
    b674:	012d0900 			; <UNDEFINED> instruction: 0x012d0900
    b678:	01c10000 	biceq	r0, r1, r0
    b67c:	910a0000 	mrsls	r0, (UNDEF: 10)
    b680:	00000000 	andeq	r0, r0, r0
    b684:	085c0e00 	ldmdaeq	ip, {r9, sl, fp}^
    b688:	04240000 	strteq	r0, [r4], #-0
    b68c:	0244083c 	subeq	r0, r4, #60, 16	; 0x3c0000
    b690:	4a0c0000 	bmi	30b698 <__ccfg+0x2eb6f0>
    b694:	04000004 	streq	r0, [r0], #-4
    b698:	008a093e 	addeq	r0, sl, lr, lsr r9
    b69c:	0c000000 	stceq	0, cr0, [r0], {-0}
    b6a0:	00000354 	andeq	r0, r0, r4, asr r3
    b6a4:	8a093f04 	bhi	25b2bc <__ccfg+0x23b314>
    b6a8:	04000000 	streq	r0, [r0], #-0
    b6ac:	0002fd0c 	andeq	pc, r2, ip, lsl #26
    b6b0:	09400400 	stmdbeq	r0, {sl}^
    b6b4:	0000008a 	andeq	r0, r0, sl, lsl #1
    b6b8:	050b0c08 	streq	r0, [fp, #-3080]	; 0xfffff3f8
    b6bc:	41040000 	mrsmi	r0, (UNDEF: 4)
    b6c0:	00008a09 	andeq	r8, r0, r9, lsl #20
    b6c4:	190c0c00 	stmdbne	ip, {sl, fp}
    b6c8:	04000007 	streq	r0, [r0], #-7
    b6cc:	008a0942 	addeq	r0, sl, r2, asr #18
    b6d0:	0c100000 	ldceq	0, cr0, [r0], {-0}
    b6d4:	00000800 	andeq	r0, r0, r0, lsl #16
    b6d8:	8a094304 	bhi	25c2f0 <__ccfg+0x23c348>
    b6dc:	14000000 	strne	r0, [r0], #-0
    b6e0:	0002c20c 	andeq	ip, r2, ip, lsl #4
    b6e4:	09440400 	stmdbeq	r4, {sl}^
    b6e8:	0000008a 	andeq	r0, r0, sl, lsl #1
    b6ec:	04530c18 	ldrbeq	r0, [r3], #-3096	; 0xfffff3e8
    b6f0:	45040000 	strmi	r0, [r4, #-0]
    b6f4:	00008a09 	andeq	r8, r0, r9, lsl #20
    b6f8:	c30c1c00 	movwgt	r1, #52224	; 0xcc00
    b6fc:	04000006 	streq	r0, [r0], #-6
    b700:	008a0946 	addeq	r0, sl, r6, asr #18
    b704:	00200000 	eoreq	r0, r0, r0
    b708:	00006111 	andeq	r6, r0, r1, lsl r1
    b70c:	04010800 	streq	r0, [r1], #-2048	; 0xfffff800
    b710:	0289084f 	addeq	r0, r9, #5177344	; 0x4f0000
    b714:	700c0000 	andvc	r0, ip, r0
    b718:	04000009 	streq	r0, [r0], #-9
    b71c:	02890a50 	addeq	r0, r9, #80, 20	; 0x50000
    b720:	0c000000 	stceq	0, cr0, [r0], {-0}
    b724:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    b728:	89095104 	stmdbhi	r9, {r2, r8, ip, lr}
    b72c:	80000002 	andhi	r0, r0, r2
    b730:	0009d912 	andeq	sp, r9, r2, lsl r9
    b734:	0a530400 	beq	14cc73c <__ccfg+0x14ac794>
    b738:	0000012d 	andeq	r0, r0, sp, lsr #2
    b73c:	1d120100 	ldfnes	f0, [r2, #-0]
    b740:	0400000a 	streq	r0, [r0], #-10
    b744:	012d0a56 			; <UNDEFINED> instruction: 0x012d0a56
    b748:	01040000 	mrseq	r0, (UNDEF: 4)
    b74c:	012b0900 			; <UNDEFINED> instruction: 0x012b0900
    b750:	02990000 	addseq	r0, r9, #0
    b754:	910a0000 	mrsls	r0, (UNDEF: 10)
    b758:	1f000000 	svcne	0x00000000
    b75c:	07861100 	streq	r1, [r6, r0, lsl #2]
    b760:	01900000 	orrseq	r0, r0, r0
    b764:	dc086204 	sfmle	f6, 4, [r8], {4}
    b768:	0c000002 	stceq	0, cr0, [r0], {2}
    b76c:	00000a32 	andeq	r0, r0, r2, lsr sl
    b770:	dc126304 	ldcle	3, cr6, [r2], {4}
    b774:	00000002 	andeq	r0, r0, r2
    b778:	0004620c 	andeq	r6, r4, ip, lsl #4
    b77c:	06640400 	strbteq	r0, [r4], -r0, lsl #8
    b780:	0000008a 	andeq	r0, r0, sl, lsl #1
    b784:	026f0c04 	rsbeq	r0, pc, #4, 24	; 0x400
    b788:	66040000 	strvs	r0, [r4], -r0
    b78c:	0002e209 	andeq	lr, r2, r9, lsl #4
    b790:	610c0800 	tstvs	ip, r0, lsl #16
    b794:	04000000 	streq	r0, [r0], #-0
    b798:	02441e67 	subeq	r1, r4, #1648	; 0x670
    b79c:	00880000 	addeq	r0, r8, r0
    b7a0:	02990410 	addseq	r0, r9, #16, 8	; 0x10000000
    b7a4:	f2090000 	vhadd.s8	d0, d9, d0
    b7a8:	f2000002 	vhadd.s8	d0, d0, d2
    b7ac:	0a000002 	beq	b7bc <__exidx_end+0x6890>
    b7b0:	00000091 	muleq	r0, r1, r0
    b7b4:	0410001f 	ldreq	r0, [r0], #-31	; 0xffffffe1
    b7b8:	000002f8 	strdeq	r0, [r0], -r8
    b7bc:	3a0e0113 	bcc	38bc10 <__ccfg+0x36bc68>
    b7c0:	08000009 	stmdaeq	r0, {r0, r3}
    b7c4:	22087a04 	andcs	r7, r8, #4, 20	; 0x4000
    b7c8:	0c000003 	stceq	0, cr0, [r0], {3}
    b7cc:	00000600 	andeq	r0, r0, r0, lsl #12
    b7d0:	22117b04 	andscs	r7, r1, #4, 22	; 0x1000
    b7d4:	00000003 	andeq	r0, r0, r3
    b7d8:	0018c10c 	andseq	ip, r8, ip, lsl #2
    b7dc:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
    b7e0:	0000008a 	andeq	r0, r0, sl, lsl #1
    b7e4:	04100004 	ldreq	r0, [r0], #-4
    b7e8:	00000051 	andeq	r0, r0, r1, asr r0
    b7ec:	0003b20e 	andeq	fp, r3, lr, lsl #4
    b7f0:	ba046800 	blt	1257f8 <__ccfg+0x105850>
    b7f4:	00046b08 	andeq	r6, r4, r8, lsl #22
    b7f8:	705f0f00 	subsvc	r0, pc, r0, lsl #30
    b7fc:	12bb0400 	adcsne	r0, fp, #0, 8
    b800:	00000322 	andeq	r0, r0, r2, lsr #6
    b804:	725f0f00 	subsvc	r0, pc, #0, 30
    b808:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
    b80c:	0000008a 	andeq	r0, r0, sl, lsl #1
    b810:	775f0f04 	ldrbvc	r0, [pc, -r4, lsl #30]
    b814:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
    b818:	0000008a 	andeq	r0, r0, sl, lsl #1
    b81c:	01e90c08 	mvneq	r0, r8, lsl #24
    b820:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
    b824:	00003009 	andeq	r3, r0, r9
    b828:	5e0c0c00 	cdppl	12, 0, cr0, cr12, cr0, {0}
    b82c:	04000006 	streq	r0, [r0], #-6
    b830:	003009bf 	ldrhteq	r0, [r0], -pc
    b834:	0f0e0000 	svceq	0x000e0000
    b838:	0066625f 	rsbeq	r6, r6, pc, asr r2
    b83c:	fa11c004 	blx	47b854 <__ccfg+0x45b8ac>
    b840:	10000002 	andne	r0, r0, r2
    b844:	0001e00c 	andeq	lr, r1, ip
    b848:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    b84c:	0000008a 	andeq	r0, r0, sl, lsl #1
    b850:	02740c18 	rsbseq	r0, r4, #24, 24	; 0x1800
    b854:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    b858:	00012b0a 	andeq	r2, r1, sl, lsl #22
    b85c:	510c1c00 	tstpl	ip, r0, lsl #24
    b860:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    b864:	05f01dca 	ldrbeq	r1, [r0, #3530]!	; 0xdca
    b868:	0c200000 	stceq	0, cr0, [r0], #-0
    b86c:	00001818 	andeq	r1, r0, r8, lsl r8
    b870:	1b1dcc04 	blne	77e888 <__ccfg+0x75e8e0>
    b874:	24000006 	strcs	r0, [r0], #-6
    b878:	000a430c 	andeq	r4, sl, ip, lsl #6
    b87c:	0dcf0400 	cfstrdeq	mvd0, [pc]	; b884 <__exidx_end+0x6958>
    b880:	00000640 	andeq	r0, r0, r0, asr #12
    b884:	18060c28 	stmdane	r6, {r3, r5, sl, fp}
    b888:	d0040000 	andle	r0, r4, r0
    b88c:	00065b09 	andeq	r5, r6, r9, lsl #22
    b890:	5f0f2c00 	svcpl	0x000f2c00
    b894:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
    b898:	02fa11d3 	rscseq	r1, sl, #-1073741772	; 0xc0000034
    b89c:	0f300000 	svceq	0x00300000
    b8a0:	0070755f 	rsbseq	r7, r0, pc, asr r5
    b8a4:	2212d404 	andscs	sp, r2, #4, 8	; 0x4000000
    b8a8:	38000003 	stmdacc	r0, {r0, r1}
    b8ac:	72755f0f 	rsbsvc	r5, r5, #15, 30	; 0x3c
    b8b0:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
    b8b4:	0000008a 	andeq	r0, r0, sl, lsl #1
    b8b8:	0a5a0c3c 	beq	168e9b0 <__ccfg+0x166ea08>
    b8bc:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    b8c0:	00066111 	andeq	r6, r6, r1, lsl r1
    b8c4:	e90c4000 	stmdb	ip, {lr}
    b8c8:	04000009 	streq	r0, [r0], #-9
    b8cc:	067111d9 			; <UNDEFINED> instruction: 0x067111d9
    b8d0:	0f430000 	svceq	0x00430000
    b8d4:	00626c5f 	rsbeq	r6, r2, pc, asr ip
    b8d8:	fa11dc04 	blx	4828f0 <__ccfg+0x462948>
    b8dc:	44000002 	strmi	r0, [r0], #-2
    b8e0:	0008530c 	andeq	r5, r8, ip, lsl #6
    b8e4:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
    b8e8:	0000008a 	andeq	r0, r0, sl, lsl #1
    b8ec:	03ff0c4c 	mvnseq	r0, #76, 24	; 0x4c00
    b8f0:	e0040000 	and	r0, r4, r0
    b8f4:	0000b10a 	andeq	fp, r0, sl, lsl #2
    b8f8:	200c5000 	andcs	r5, ip, r0
    b8fc:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
    b900:	048a12e3 	streq	r1, [sl], #739	; 0x2e3
    b904:	0c540000 	mraeq	r0, r4, acc0
    b908:	0000086b 	andeq	r0, r0, fp, ror #16
    b90c:	450ce704 	strmi	lr, [ip, #-1796]	; 0xfffff8fc
    b910:	58000001 	stmdapl	r0, {r0}
    b914:	00078e0c 	andeq	r8, r7, ip, lsl #28
    b918:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
    b91c:	0000011f 	andeq	r0, r0, pc, lsl r1
    b920:	0a150c5c 	beq	54ea98 <__ccfg+0x52eaf0>
    b924:	ea040000 	b	10b92c <__ccfg+0xeb984>
    b928:	00008a09 	andeq	r8, r0, r9, lsl #20
    b92c:	14006400 	strne	r6, [r0], #-1024	; 0xfffffc00
    b930:	00008a01 	andeq	r8, r0, r1, lsl #20
    b934:	00048a00 	andeq	r8, r4, r0, lsl #20
    b938:	048a1500 	streq	r1, [sl], #1280	; 0x500
    b93c:	2b150000 	blcs	54b944 <__ccfg+0x52b99c>
    b940:	15000001 	strne	r0, [r0, #-1]
    b944:	000005de 	ldrdeq	r0, [r0], -lr
    b948:	00008a15 	andeq	r8, r0, r5, lsl sl
    b94c:	04100000 	ldreq	r0, [r0], #-0
    b950:	00000495 	muleq	r0, r5, r4
    b954:	00048a04 	andeq	r8, r4, r4, lsl #20
    b958:	435e1600 	cmpmi	lr, #0, 12
    b95c:	04280000 	strteq	r0, [r8], #-0
    b960:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
    b964:	000005de 	ldrdeq	r0, [r0], -lr
    b968:	0006f417 	andeq	pc, r6, r7, lsl r4	; <UNPREDICTABLE>
    b96c:	02670400 	rsbeq	r0, r7, #0, 8
    b970:	00008a07 	andeq	r8, r0, r7, lsl #20
    b974:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
    b978:	04000005 	streq	r0, [r0], #-5
    b97c:	cd0b026c 	sfmgt	f0, 4, [fp, #-432]	; 0xfffffe50
    b980:	04000006 	streq	r0, [r0], #-6
    b984:	00025517 	andeq	r5, r2, r7, lsl r5
    b988:	026c0400 	rsbeq	r0, ip, #0, 8
    b98c:	0006cd14 	andeq	ip, r6, r4, lsl sp
    b990:	49170800 	ldmdbmi	r7, {fp}
    b994:	0400000a 	streq	r0, [r0], #-10
    b998:	cd1e026c 	lfmgt	f0, 4, [lr, #-432]	; 0xfffffe50
    b99c:	0c000006 	stceq	0, cr0, [r0], {6}
    b9a0:	00045d17 	andeq	r5, r4, r7, lsl sp
    b9a4:	026e0400 	rsbeq	r0, lr, #0, 8
    b9a8:	00008a08 	andeq	r8, r0, r8, lsl #20
    b9ac:	0f171000 	svceq	0x00171000
    b9b0:	04000004 	streq	r0, [r0], #-4
    b9b4:	cd08026f 	sfmgt	f0, 4, [r8, #-444]	; 0xfffffe44
    b9b8:	14000008 	strne	r0, [r0], #-8
    b9bc:	0009fc17 	andeq	pc, r9, r7, lsl ip	; <UNPREDICTABLE>
    b9c0:	02720400 	rsbseq	r0, r2, #0, 8
    b9c4:	00008a07 	andeq	r8, r0, r7, lsl #20
    b9c8:	4e173000 	cdpmi	0, 1, cr3, cr7, cr0, {0}
    b9cc:	0400003d 	streq	r0, [r0], #-61	; 0xffffffc3
    b9d0:	e3160273 	tst	r6, #805306375	; 0x30000007
    b9d4:	34000008 	strcc	r0, [r0], #-8
    b9d8:	0005a117 	andeq	sl, r5, r7, lsl r1
    b9dc:	02750400 	rsbseq	r0, r5, #0, 8
    b9e0:	00008a07 	andeq	r8, r0, r7, lsl #20
    b9e4:	9b173800 	blls	5d99ec <__ccfg+0x5b9a44>
    b9e8:	04000006 	streq	r0, [r0], #-6
    b9ec:	f50a0277 			; <UNDEFINED> instruction: 0xf50a0277
    b9f0:	3c000008 	stccc	0, cr0, [r0], {8}
    b9f4:	0002cc17 	andeq	ip, r2, r7, lsl ip
    b9f8:	027a0400 	rsbseq	r0, sl, #0, 8
    b9fc:	0001ab13 	andeq	sl, r1, r3, lsl fp
    ba00:	78174000 	ldmdavc	r7, {lr}
    ba04:	04000003 	streq	r0, [r0], #-3
    ba08:	8a07027b 	bhi	1cc3fc <__ccfg+0x1ac454>
    ba0c:	44000000 	strmi	r0, [r0], #-0
    ba10:	0004b217 	andeq	fp, r4, r7, lsl r2
    ba14:	027c0400 	rsbseq	r0, ip, #0, 8
    ba18:	0001ab13 	andeq	sl, r1, r3, lsl fp
    ba1c:	06174800 	ldreq	r4, [r7], -r0, lsl #16
    ba20:	04000006 	streq	r0, [r0], #-6
    ba24:	fb14027d 	blx	50c422 <__ccfg+0x4ec47a>
    ba28:	4c000008 	stcmi	0, cr0, [r0], {8}
    ba2c:	00083917 	andeq	r3, r8, r7, lsl r9
    ba30:	02800400 	addeq	r0, r0, #0, 8
    ba34:	00008a07 	andeq	r8, r0, r7, lsl #20
    ba38:	d0175000 	andsle	r5, r7, r0
    ba3c:	04000008 	streq	r0, [r0], #-8
    ba40:	de090281 	cdple	2, 0, cr0, cr9, cr1, {4}
    ba44:	54000005 	strpl	r0, [r0], #-5
    ba48:	0008ea17 	andeq	lr, r8, r7, lsl sl
    ba4c:	02a40400 	adceq	r0, r4, #0, 8
    ba50:	0008a807 	andeq	sl, r8, r7, lsl #16
    ba54:	86185800 	ldrhi	r5, [r8], -r0, lsl #16
    ba58:	04000007 	streq	r0, [r0], #-7
    ba5c:	dc1302a8 	lfmle	f0, 4, [r3], {168}	; 0xa8
    ba60:	48000002 	stmdami	r0, {r1}
    ba64:	052e1801 	streq	r1, [lr, #-2049]!	; 0xfffff7ff
    ba68:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
    ba6c:	02991202 	addseq	r1, r9, #536870912	; 0x20000000
    ba70:	014c0000 	mrseq	r0, (UNDEF: 76)
    ba74:	00051518 	andeq	r1, r5, r8, lsl r5
    ba78:	02ad0400 	adceq	r0, sp, #0, 8
    ba7c:	00090d0c 	andeq	r0, r9, ip, lsl #26
    ba80:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
    ba84:	0000094d 	andeq	r0, r0, sp, asr #18
    ba88:	1002b204 	andne	fp, r2, r4, lsl #4
    ba8c:	0000068e 	andeq	r0, r0, lr, lsl #13
    ba90:	c71802e0 	ldrgt	r0, [r8, -r0, ror #5]
    ba94:	04000007 	streq	r0, [r0], #-7
    ba98:	190a02b4 	stmdbne	sl, {r2, r4, r5, r7, r9}
    ba9c:	ec000009 	stc	0, cr0, [r0], {9}
    baa0:	04100002 	ldreq	r0, [r0], #-2
    baa4:	000005e4 	andeq	r0, r0, r4, ror #11
    baa8:	e1080102 	tst	r8, r2, lsl #2
    baac:	04000008 	streq	r0, [r0], #-8
    bab0:	000005e4 	andeq	r0, r0, r4, ror #11
    bab4:	046b0410 	strbteq	r0, [fp], #-1040	; 0xfffffbf0
    bab8:	01140000 	tsteq	r4, r0
    babc:	0000008a 	andeq	r0, r0, sl, lsl #1
    bac0:	00000615 	andeq	r0, r0, r5, lsl r6
    bac4:	00048a15 	andeq	r8, r4, r5, lsl sl
    bac8:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    bacc:	15150000 	ldrne	r0, [r5, #-0]
    bad0:	15000006 	strne	r0, [r0, #-6]
    bad4:	0000008a 	andeq	r0, r0, sl, lsl #1
    bad8:	eb041000 	bl	10fae0 <__ccfg+0xefb38>
    badc:	10000005 	andne	r0, r0, r5
    bae0:	0005f604 	andeq	pc, r5, r4, lsl #12
    bae4:	bd011400 	cfstrslt	mvf1, [r1, #-0]
    bae8:	40000000 	andmi	r0, r0, r0
    baec:	15000006 	strne	r0, [r0, #-6]
    baf0:	0000048a 	andeq	r0, r0, sl, lsl #9
    baf4:	00012b15 	andeq	r2, r1, r5, lsl fp
    baf8:	00bd1500 	adcseq	r1, sp, r0, lsl #10
    bafc:	8a150000 	bhi	54bb04 <__ccfg+0x52bb5c>
    bb00:	00000000 	andeq	r0, r0, r0
    bb04:	06210410 			; <UNDEFINED> instruction: 0x06210410
    bb08:	01140000 	tsteq	r4, r0
    bb0c:	0000008a 	andeq	r0, r0, sl, lsl #1
    bb10:	0000065b 	andeq	r0, r0, fp, asr r6
    bb14:	00048a15 	andeq	r8, r4, r5, lsl sl
    bb18:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    bb1c:	10000000 	andne	r0, r0, r0
    bb20:	00064604 	andeq	r4, r6, r4, lsl #12
    bb24:	00510900 	subseq	r0, r1, r0, lsl #18
    bb28:	06710000 	ldrbteq	r0, [r1], -r0
    bb2c:	910a0000 	mrsls	r0, (UNDEF: 10)
    bb30:	02000000 	andeq	r0, r0, #0
    bb34:	00510900 	subseq	r0, r1, r0, lsl #18
    bb38:	06810000 	streq	r0, [r1], r0
    bb3c:	910a0000 	mrsls	r0, (UNDEF: 10)
    bb40:	00000000 	andeq	r0, r0, r0
    bb44:	03ed0600 	mvneq	r0, #0, 12
    bb48:	24040000 	strcs	r0, [r4], #-0
    bb4c:	03281a01 			; <UNDEFINED> instruction: 0x03281a01
    bb50:	74190000 	ldrvc	r0, [r9], #-0
    bb54:	0c000043 	stceq	0, cr0, [r0], {67}	; 0x43
    bb58:	08012804 	stmdaeq	r1, {r2, fp, sp}
    bb5c:	000006c7 	andeq	r0, r0, r7, asr #13
    bb60:	000a3217 	andeq	r3, sl, r7, lsl r2
    bb64:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
    bb68:	0006c711 	andeq	ip, r6, r1, lsl r7
    bb6c:	8b170000 	blhi	5cbb74 <__ccfg+0x5abbcc>
    bb70:	04000008 	streq	r0, [r0], #-8
    bb74:	8a07012b 	bhi	1cc028 <__ccfg+0x1ac080>
    bb78:	04000000 	streq	r0, [r0], #-0
    bb7c:	00058d17 	andeq	r8, r5, r7, lsl sp
    bb80:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
    bb84:	0006cd0b 	andeq	ip, r6, fp, lsl #26
    bb88:	10000800 	andne	r0, r0, r0, lsl #16
    bb8c:	00068e04 	andeq	r8, r6, r4, lsl #28
    bb90:	81041000 	mrshi	r1, (UNDEF: 4)
    bb94:	19000006 	stmdbne	r0, {r1, r2}
    bb98:	00000364 	andeq	r0, r0, r4, ror #6
    bb9c:	0144040e 	cmpeq	r4, lr, lsl #8
    bba0:	00070c08 	andeq	r0, r7, r8, lsl #24
    bba4:	117a1700 	cmnne	sl, r0, lsl #14
    bba8:	45040000 	strmi	r0, [r4, #-0]
    bbac:	070c1201 	streq	r1, [ip, -r1, lsl #4]
    bbb0:	17000000 	strne	r0, [r0, -r0]
    bbb4:	00000618 	andeq	r0, r0, r8, lsl r6
    bbb8:	12014604 	andne	r4, r1, #4, 12	; 0x400000
    bbbc:	0000070c 	andeq	r0, r0, ip, lsl #14
    bbc0:	101f1706 	andsne	r1, pc, r6, lsl #14
    bbc4:	47040000 	strmi	r0, [r4, -r0]
    bbc8:	00641201 	rsbeq	r1, r4, r1, lsl #4
    bbcc:	000c0000 	andeq	r0, ip, r0
    bbd0:	00006409 	andeq	r6, r0, r9, lsl #8
    bbd4:	00071c00 	andeq	r1, r7, r0, lsl #24
    bbd8:	00910a00 	addseq	r0, r1, r0, lsl #20
    bbdc:	00020000 	andeq	r0, r2, r0
    bbe0:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
    bbe4:	08310702 	ldmdaeq	r1!, {r1, r8, r9, sl}
    bbe8:	ef170000 	svc	0x00170000
    bbec:	04000009 	streq	r0, [r0], #-9
    bbf0:	91180287 	tstls	r8, r7, lsl #5
    bbf4:	00000000 	andeq	r0, r0, r0
    bbf8:	00095517 	andeq	r5, r9, r7, lsl r5
    bbfc:	02880400 	addeq	r0, r8, #0, 8
    bc00:	0005de12 	andeq	sp, r5, r2, lsl lr
    bc04:	a5170400 	ldrge	r0, [r7, #-1024]	; 0xfffffc00
    bc08:	04000003 	streq	r0, [r0], #-3
    bc0c:	31100289 	tstcc	r0, r9, lsl #5
    bc10:	08000008 	stmdaeq	r0, {r3}
    bc14:	00081817 	andeq	r1, r8, r7, lsl r8
    bc18:	028a0400 	addeq	r0, sl, #0, 8
    bc1c:	0001c117 	andeq	ip, r1, r7, lsl r1
    bc20:	d5172400 	ldrle	r2, [r7, #-1024]	; 0xfffffc00
    bc24:	04000005 	streq	r0, [r0], #-5
    bc28:	8a0f028b 	bhi	3cc65c <__ccfg+0x3ac6b4>
    bc2c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    bc30:	000a2d17 	andeq	r2, sl, r7, lsl sp
    bc34:	028c0400 	addeq	r0, ip, #0, 8
    bc38:	0000832c 	andeq	r8, r0, ip, lsr #6
    bc3c:	85175000 	ldrhi	r5, [r7, #-0]
    bc40:	04000000 	streq	r0, [r0], #-0
    bc44:	d31a028d 	tstle	sl, #-805306360	; 0xd0000008
    bc48:	58000006 	stmdapl	r0, {r1, r2}
    bc4c:	0004ea17 	andeq	lr, r4, r7, lsl sl
    bc50:	028e0400 	addeq	r0, lr, #0, 8
    bc54:	00011f16 	andeq	r1, r1, r6, lsl pc
    bc58:	62176800 	andsvs	r6, r7, #0, 16
    bc5c:	04000009 	streq	r0, [r0], #-9
    bc60:	1f16028f 	svcne	0x0016028f
    bc64:	70000001 	andvc	r0, r0, r1
    bc68:	00006f17 	andeq	r6, r0, r7, lsl pc
    bc6c:	02900400 	addseq	r0, r0, #0, 8
    bc70:	00011f16 	andeq	r1, r1, r6, lsl pc
    bc74:	49177800 	ldmdbmi	r7, {fp, ip, sp, lr}
    bc78:	04000008 	streq	r0, [r0], #-8
    bc7c:	41100291 			; <UNDEFINED> instruction: 0x41100291
    bc80:	80000008 	andhi	r0, r0, r8
    bc84:	00038217 	andeq	r8, r3, r7, lsl r2
    bc88:	02920400 	addseq	r0, r2, #0, 8
    bc8c:	00085110 	andeq	r5, r8, r0, lsl r1
    bc90:	0d178800 	ldceq	8, cr8, [r7, #-0]
    bc94:	04000009 	streq	r0, [r0], #-9
    bc98:	8a0f0293 	bhi	3cc6ec <__ccfg+0x3ac744>
    bc9c:	a0000000 	andge	r0, r0, r0
    bca0:	00022917 	andeq	r2, r2, r7, lsl r9
    bca4:	02940400 	addseq	r0, r4, #0, 8
    bca8:	00011f16 	andeq	r1, r1, r6, lsl pc
    bcac:	1f17a400 	svcne	0x0017a400
    bcb0:	04000005 	streq	r0, [r0], #-5
    bcb4:	1f160295 	svcne	0x00160295
    bcb8:	ac000001 	stcge	0, cr0, [r0], {1}
    bcbc:	00046717 	andeq	r6, r4, r7, lsl r7
    bcc0:	02960400 	addseq	r0, r6, #0, 8
    bcc4:	00011f16 	andeq	r1, r1, r6, lsl pc
    bcc8:	4f17b400 	svcmi	0x0017b400
    bccc:	04000006 	streq	r0, [r0], #-6
    bcd0:	1f160297 	svcne	0x00160297
    bcd4:	bc000001 	stclt	0, cr0, [r0], {1}
    bcd8:	0004d917 	andeq	sp, r4, r7, lsl r9
    bcdc:	02980400 	addseq	r0, r8, #0, 8
    bce0:	00011f16 	andeq	r1, r1, r6, lsl pc
    bce4:	f217c400 	vshl.s16	d12, d0, d7
    bce8:	04000006 	streq	r0, [r0], #-6
    bcec:	8a080299 	bhi	20c758 <__ccfg+0x1ec7b0>
    bcf0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    bcf4:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    bcf8:	08410000 	stmdaeq	r1, {}^	; <UNPREDICTABLE>
    bcfc:	910a0000 	mrsls	r0, (UNDEF: 10)
    bd00:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    bd04:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    bd08:	08510000 	ldmdaeq	r1, {}^	; <UNPREDICTABLE>
    bd0c:	910a0000 	mrsls	r0, (UNDEF: 10)
    bd10:	07000000 	streq	r0, [r0, -r0]
    bd14:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    bd18:	08610000 	stmdaeq	r1!, {}^	; <UNPREDICTABLE>
    bd1c:	910a0000 	mrsls	r0, (UNDEF: 10)
    bd20:	17000000 	strne	r0, [r0, -r0]
    bd24:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
    bd28:	8807029e 	stmdahi	r7, {r1, r2, r3, r4, r7, r9}
    bd2c:	17000008 	strne	r0, [r0, -r8]
    bd30:	0000035d 	andeq	r0, r0, sp, asr r3
    bd34:	1b02a104 	blne	b414c <__ccfg+0x941a4>
    bd38:	00000888 	andeq	r0, r0, r8, lsl #17
    bd3c:	0a511700 	beq	1451944 <__ccfg+0x143199c>
    bd40:	a2040000 	andge	r0, r4, #0
    bd44:	08981802 	ldmeq	r8, {r1, fp, ip}
    bd48:	00780000 	rsbseq	r0, r8, r0
    bd4c:	00032209 	andeq	r2, r3, r9, lsl #4
    bd50:	00089800 	andeq	r9, r8, r0, lsl #16
    bd54:	00910a00 	addseq	r0, r1, r0, lsl #20
    bd58:	001d0000 	andseq	r0, sp, r0
    bd5c:	00009109 	andeq	r9, r0, r9, lsl #2
    bd60:	0008a800 	andeq	sl, r8, r0, lsl #16
    bd64:	00910a00 	addseq	r0, r1, r0, lsl #20
    bd68:	001d0000 	andseq	r0, sp, r0
    bd6c:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
    bd70:	08cd0302 	stmiaeq	sp, {r1, r8, r9}^
    bd74:	5e1c0000 	cdppl	0, 1, cr0, cr12, cr0, {0}
    bd78:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
    bd7c:	1c0b029a 	sfmne	f0, 4, [fp], {154}	; 0x9a
    bd80:	1c000007 	stcne	0, cr0, [r0], {7}
    bd84:	00000827 	andeq	r0, r0, r7, lsr #16
    bd88:	0b02a304 	bleq	b49a0 <__ccfg+0x949f8>
    bd8c:	00000861 	andeq	r0, r0, r1, ror #16
    bd90:	05e40900 	strbeq	r0, [r4, #2304]!	; 0x900
    bd94:	08dd0000 	ldmeq	sp, {}^	; <UNPREDICTABLE>
    bd98:	910a0000 	mrsls	r0, (UNDEF: 10)
    bd9c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    bda0:	0a381d00 	beq	e131a8 <__ccfg+0xdf3200>
    bda4:	10010000 	andne	r0, r1, r0
    bda8:	0008dd04 	andeq	sp, r8, r4, lsl #26
    bdac:	f5011e00 			; <UNDEFINED> instruction: 0xf5011e00
    bdb0:	15000008 	strne	r0, [r0, #-8]
    bdb4:	0000048a 	andeq	r0, r0, sl, lsl #9
    bdb8:	e9041000 	stmdb	r4, {ip}
    bdbc:	10000008 	andne	r0, r0, r8
    bdc0:	0001ab04 	andeq	sl, r1, r4, lsl #22
    bdc4:	0d011e00 	stceq	14, cr1, [r1, #-0]
    bdc8:	15000009 	strne	r0, [r0, #-9]
    bdcc:	0000008a 	andeq	r0, r0, sl, lsl #1
    bdd0:	13041000 	movwne	r1, #16384	; 0x4000
    bdd4:	10000009 	andne	r0, r0, r9
    bdd8:	00090104 	andeq	r0, r9, r4, lsl #2
    bddc:	06810900 	streq	r0, [r1], r0, lsl #18
    bde0:	09290000 	stmdbeq	r9!, {}	; <UNPREDICTABLE>
    bde4:	910a0000 	mrsls	r0, (UNDEF: 10)
    bde8:	02000000 	andeq	r0, r0, #0
    bdec:	07f41f00 	ldrbeq	r1, [r4, r0, lsl #30]!
    bdf0:	33040000 	movwcc	r0, #16384	; 0x4000
    bdf4:	048a1703 	streq	r1, [sl], #1795	; 0x703
    bdf8:	01010000 	mrseq	r0, (UNDEF: 1)
    bdfc:	0007ed1f 	andeq	lr, r7, pc, lsl sp
    be00:	03340400 	teqeq	r4, #0, 8
    be04:	0004901d 	andeq	r9, r4, sp, lsl r0
    be08:	03010100 	movweq	r0, #4352	; 0x1100
    be0c:	00001fa2 	andeq	r1, r0, r2, lsr #31
    be10:	6b123b06 	blvs	49aa30 <__ccfg+0x47aa88>
    be14:	0b000000 	bleq	be1c <__exidx_end+0x6ef0>
    be18:	09400608 	stmdbeq	r0, {r3, r9, sl}^
    be1c:	00000977 	andeq	r0, r0, r7, ror r9
    be20:	001ab90c 	andseq	fp, sl, ip, lsl #18
    be24:	0d410600 	stcleq	6, cr0, [r1, #-0]
    be28:	00000977 	andeq	r0, r0, r7, ror r9
    be2c:	1ce90c00 	stclne	12, cr0, [r9]
    be30:	42060000 	andmi	r0, r6, #0
    be34:	0009770d 	andeq	r7, r9, sp, lsl #14
    be38:	10000400 	andne	r0, r0, r0, lsl #8
    be3c:	00004504 	andeq	r4, r0, r4, lsl #10
    be40:	21f50300 	mvnscs	r0, r0, lsl #6
    be44:	43060000 	movwmi	r0, #24576	; 0x6000
    be48:	00095303 	andeq	r5, r9, r3, lsl #6
    be4c:	1d6a0300 	stclne	3, cr0, [sl, #-0]
    be50:	3c070000 	stccc	0, cr0, [r7], {-0}
    be54:	0009952b 	andeq	r9, r9, fp, lsr #10
    be58:	20080e00 	andcs	r0, r8, r0, lsl #28
    be5c:	07100000 	ldreq	r0, [r0, -r0]
    be60:	09f1156f 	ldmibeq	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, ip}^
    be64:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    be68:	07000019 	smladeq	r0, r9, r0, r0
    be6c:	00580d70 	subseq	r0, r8, r0, ror sp
    be70:	0c000000 	stceq	0, cr0, [r0], {-0}
    be74:	00000593 	muleq	r0, r3, r5
    be78:	580d7107 	stmdapl	sp, {r0, r1, r2, r8, ip, sp, lr}
    be7c:	02000000 	andeq	r0, r0, #0
    be80:	001d480c 	andseq	r4, sp, ip, lsl #16
    be84:	13740700 	cmnne	r4, #0, 14
    be88:	00000b28 	andeq	r0, r0, r8, lsr #22
    be8c:	1ae00c04 	bne	ff80eea4 <_estack+0xdf809ea4>
    be90:	75070000 	strvc	r0, [r7, #-0]
    be94:	0009470c 	andeq	r4, r9, ip, lsl #14
    be98:	780c0800 	stmdavc	ip, {fp}
    be9c:	0700001d 	smladeq	r0, sp, r0, r0
    bea0:	0ab4067d 	beq	fed0d89c <_estack+0xded0889c>
    bea4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    bea8:	00001cc2 	andeq	r1, r0, r2, asr #25
    beac:	fe068107 	cdp2	1, 0, cr8, cr6, cr7, {0}
    beb0:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    beb4:	1b540300 	blne	150cabc <__ccfg+0x14ecb14>
    beb8:	3f070000 	svccc	0x00070000
    bebc:	0009fd2a 	andeq	pc, r9, sl, lsr #26
    bec0:	1b470e00 	blne	11cf6c8 <__ccfg+0x11af720>
    bec4:	07180000 	ldreq	r0, [r8, -r0]
    bec8:	0ab415e0 	beq	fed11650 <_estack+0xded0c650>
    becc:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    bed0:	07000019 	smladeq	r0, r9, r0, r0
    bed4:	00580de1 	subseq	r0, r8, r1, ror #27
    bed8:	0c000000 	stceq	0, cr0, [r0], {-0}
    bedc:	00000593 	muleq	r0, r3, r5
    bee0:	580de207 	stmdapl	sp, {r0, r1, r2, r9, sp, lr, pc}
    bee4:	02000000 	andeq	r0, r0, #0
    bee8:	001d480c 	andseq	r4, sp, ip, lsl #16
    beec:	13e50700 	mvnne	r0, #0, 14
    bef0:	00000b28 	andeq	r0, r0, r8, lsr #22
    bef4:	1ae00c04 	bne	ff80ef0c <_estack+0xdf809f0c>
    bef8:	e6070000 	str	r0, [r7], -r0
    befc:	0009470c 	andeq	r4, r9, ip, lsl #14
    bf00:	780c0800 	stmdavc	ip, {fp}
    bf04:	0700001d 	smladeq	r0, sp, r0, r0
    bf08:	0b3406ee 	bleq	d0dac8 <__ccfg+0xcedb20>
    bf0c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    bf10:	00001cc2 	andeq	r1, r0, r2, asr #25
    bf14:	7e06f207 	cdpvc	2, 0, cr15, cr6, cr7, {0}
    bf18:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    bf1c:	00211b0c 	eoreq	r1, r1, ip, lsl #22
    bf20:	0df30700 	ldcleq	7, cr0, [r3]
    bf24:	00000058 	andeq	r0, r0, r8, asr r0
    bf28:	1e6b0c0e 	cdpne	12, 6, cr0, cr11, cr14, {0}
    bf2c:	f4070000 	vst4.8	{d0-d3}, [r7], r0
    bf30:	0000580d 	andeq	r5, r0, sp, lsl #16
    bf34:	870c1000 	strhi	r1, [ip, -r0]
    bf38:	0700001b 	smladeq	r0, fp, r0, r0
    bf3c:	0ba806fa 	bleq	fea0db2c <_estack+0xdea08b2c>
    bf40:	0c120000 	ldceq	0, cr0, [r2], {-0}
    bf44:	00001d28 	andeq	r1, r0, r8, lsr #26
    bf48:	450cfb07 	strmi	pc, [ip, #-2823]	; 0xfffff4f9
    bf4c:	13000000 	movwne	r0, #0
    bf50:	0020770c 	eoreq	r7, r0, ip, lsl #14
    bf54:	0cfc0700 	ldcleq	7, cr0, [ip]
    bf58:	00000045 	andeq	r0, r0, r5, asr #32
    bf5c:	20800c14 	addcs	r0, r0, r4, lsl ip
    bf60:	fd070000 	stc2	0, cr0, [r7, #-0]
    bf64:	0000450c 	andeq	r4, r0, ip, lsl #10
    bf68:	890c1500 	stmdbhi	ip, {r8, sl, ip}
    bf6c:	07000020 	streq	r0, [r0, -r0, lsr #32]
    bf70:	00580dfe 	ldrsheq	r0, [r8], #-222	; 0xffffff22
    bf74:	00160000 	andseq	r0, r6, r0
    bf78:	7607010b 	strvc	r0, [r7], -fp, lsl #2
    bf7c:	000afe04 	andeq	pc, sl, r4, lsl #28
    bf80:	223b2000 	eorscs	r2, fp, #0
    bf84:	77070000 	strvc	r0, [r7, -r0]
    bf88:	0000450f 	andeq	r4, r0, pc, lsl #10
    bf8c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    bf90:	1bc92000 	blne	ff253f98 <_estack+0xdf24ef98>
    bf94:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    bf98:	0000450f 	andeq	r4, r0, pc, lsl #10
    bf9c:	03010100 	movweq	r0, #4352	; 0x1100
    bfa0:	1c892000 	stcne	0, cr2, [r9], {0}
    bfa4:	7a070000 	bvc	1cbfac <__ccfg+0x1ac004>
    bfa8:	0000450f 	andeq	r4, r0, pc, lsl #10
    bfac:	01020100 	mrseq	r0, (UNDEF: 18)
    bfb0:	1a572000 	bne	15d3fb8 <__ccfg+0x15b4010>
    bfb4:	7b070000 	blvc	1cbfbc <__ccfg+0x1ac014>
    bfb8:	0000450f 	andeq	r4, r0, pc, lsl #10
    bfbc:	00010100 	andeq	r0, r1, r0, lsl #2
    bfc0:	010b0000 	mrseq	r0, (UNDEF: 11)
    bfc4:	28047e07 	stmdacs	r4, {r0, r1, r2, r9, sl, fp, ip, sp, lr}
    bfc8:	2000000b 	andcs	r0, r0, fp
    bfcc:	000020a5 	andeq	r2, r0, r5, lsr #1
    bfd0:	450f7f07 	strmi	r7, [pc, #-3847]	; b0d1 <__exidx_end+0x61a5>
    bfd4:	01000000 	mrseq	r0, (UNDEF: 0)
    bfd8:	20000404 	andcs	r0, r0, r4, lsl #8
    bfdc:	00002201 	andeq	r2, r0, r1, lsl #4
    bfe0:	450f8007 	strmi	r8, [pc, #-7]	; bfe1 <__exidx_end+0x70b5>
    bfe4:	01000000 	mrseq	r0, (UNDEF: 0)
    bfe8:	00000004 	andeq	r0, r0, r4
    bfec:	09890410 	stmibeq	r9, {r4, sl}
    bff0:	04100000 	ldreq	r0, [r0], #-0
    bff4:	0000006b 	andeq	r0, r0, fp, rrx
    bff8:	e707010b 	str	r0, [r7, -fp, lsl #2]
    bffc:	000b7e04 	andeq	r7, fp, r4, lsl #28
    c000:	223b2000 	eorscs	r2, fp, #0
    c004:	e8070000 	stmda	r7, {}	; <UNPREDICTABLE>
    c008:	0000450f 	andeq	r4, r0, pc, lsl #10
    c00c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    c010:	1bc92000 	blne	ff254018 <_estack+0xdf24f018>
    c014:	e9070000 	stmdb	r7, {}	; <UNPREDICTABLE>
    c018:	0000450f 	andeq	r4, r0, pc, lsl #10
    c01c:	03010100 	movweq	r0, #4352	; 0x1100
    c020:	1c892000 	stcne	0, cr2, [r9], {0}
    c024:	eb070000 	bl	1cc02c <__ccfg+0x1ac084>
    c028:	0000450f 	andeq	r4, r0, pc, lsl #10
    c02c:	01020100 	mrseq	r0, (UNDEF: 18)
    c030:	1a572000 	bne	15d4038 <__ccfg+0x15b4090>
    c034:	ec070000 	stc	0, cr0, [r7], {-0}
    c038:	0000450f 	andeq	r4, r0, pc, lsl #10
    c03c:	00010100 	andeq	r0, r1, r0, lsl #2
    c040:	010b0000 	mrseq	r0, (UNDEF: 11)
    c044:	a804ef07 	stmdage	r4, {r0, r1, r2, r8, r9, sl, fp, sp, lr, pc}
    c048:	2000000b 	andcs	r0, r0, fp
    c04c:	000020a5 	andeq	r2, r0, r5, lsr #1
    c050:	450ff007 	strmi	pc, [pc, #-7]	; c051 <__exidx_end+0x7125>
    c054:	01000000 	mrseq	r0, (UNDEF: 0)
    c058:	20000404 	andcs	r0, r0, r4, lsl #8
    c05c:	00002201 	andeq	r2, r0, r1, lsl #4
    c060:	450ff107 	strmi	pc, [pc, #-263]	; bf61 <__exidx_end+0x7035>
    c064:	01000000 	mrseq	r0, (UNDEF: 0)
    c068:	00000004 	andeq	r0, r0, r4
    c06c:	f507010b 			; <UNDEFINED> instruction: 0xf507010b
    c070:	000bd204 	andeq	sp, fp, r4, lsl #4
    c074:	1bb32000 	blne	fecd407c <_estack+0xdeccf07c>
    c078:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    c07c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c080:	07010100 	streq	r0, [r1, -r0, lsl #2]
    c084:	22242000 	eorcs	r2, r4, #0
    c088:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    c08c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c090:	01060100 	mrseq	r0, (UNDEF: 22)
    c094:	04100000 	ldreq	r0, [r0], #-0
    c098:	0000097d 	andeq	r0, r0, sp, ror r9
    c09c:	0020f003 	eoreq	pc, r0, r3
    c0a0:	2f3d0800 	svccs	0x003d0800
    c0a4:	00000be4 	andeq	r0, r0, r4, ror #23
    c0a8:	0021020e 	eoreq	r0, r1, lr, lsl #4
    c0ac:	78081800 	stmdavc	r8, {fp, ip}
    c0b0:	000c7415 	andeq	r7, ip, r5, lsl r4
    c0b4:	19e80c00 	stmibne	r8!, {sl, fp}^
    c0b8:	79080000 	stmdbvc	r8, {}	; <UNPREDICTABLE>
    c0bc:	0000580d 	andeq	r5, r0, sp, lsl #16
    c0c0:	930c0000 	movwls	r0, #49152	; 0xc000
    c0c4:	08000005 	stmdaeq	r0, {r0, r2}
    c0c8:	00580d7a 	subseq	r0, r8, sl, ror sp
    c0cc:	0c020000 	stceq	0, cr0, [r2], {-0}
    c0d0:	00001d48 	andeq	r1, r0, r8, asr #26
    c0d4:	28137d08 	ldmdacs	r3, {r3, r8, sl, fp, ip, sp, lr}
    c0d8:	0400000b 	streq	r0, [r0], #-11
    c0dc:	001ae00c 	andseq	lr, sl, ip
    c0e0:	0c7e0800 	ldcleq	8, cr0, [lr], #-0
    c0e4:	00000947 	andeq	r0, r0, r7, asr #18
    c0e8:	1d780c08 	ldclne	12, cr0, [r8, #-32]!	; 0xffffffe0
    c0ec:	86080000 	strhi	r0, [r8], -r0
    c0f0:	000e6706 	andeq	r6, lr, r6, lsl #14
    c0f4:	c20c0c00 	andgt	r0, ip, #0, 24
    c0f8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c0fc:	0eb1068a 	cdpeq	6, 11, cr0, cr1, cr10, {4}
    c100:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    c104:	00001b25 	andeq	r1, r0, r5, lsr #22
    c108:	db069308 	blle	1b0d30 <__ccfg+0x190d88>
    c10c:	0e00000e 	cdpeq	0, 0, cr0, cr0, cr14, {0}
    c110:	00209e0c 	eoreq	r9, r0, ip, lsl #28
    c114:	0c940800 	ldceq	8, cr0, [r4], {0}
    c118:	00000045 	andeq	r0, r0, r5, asr #32
    c11c:	1dc40c0f 	stclne	12, cr0, [r4, #60]	; 0x3c
    c120:	95080000 	strls	r0, [r8, #-0]
    c124:	00006b0d 	andeq	r6, r0, sp, lsl #22
    c128:	150c1000 	strne	r1, [ip, #-0]
    c12c:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c130:	09770d96 	ldmdbeq	r7!, {r1, r2, r4, r7, r8, sl, fp}^
    c134:	00140000 	andseq	r0, r4, r0
    c138:	001f5403 	andseq	r5, pc, r3, lsl #8
    c13c:	2f3e0800 	svccs	0x003e0800
    c140:	00000c80 	andeq	r0, r0, r0, lsl #25
    c144:	001c4d0e 	andseq	r4, ip, lr, lsl #26
    c148:	9f082400 	svcls	0x00082400
    c14c:	000d5e15 	andeq	r5, sp, r5, lsl lr
    c150:	19e80c00 	stmibne	r8!, {sl, fp}^
    c154:	a0080000 	andge	r0, r8, r0
    c158:	0000580d 	andeq	r5, r0, sp, lsl #16
    c15c:	930c0000 	movwls	r0, #49152	; 0xc000
    c160:	08000005 	stmdaeq	r0, {r0, r2}
    c164:	00580da1 	subseq	r0, r8, r1, lsr #27
    c168:	0c020000 	stceq	0, cr0, [r2], {-0}
    c16c:	00001d48 	andeq	r1, r0, r8, asr #26
    c170:	2813a408 	ldmdacs	r3, {r3, sl, sp, pc}
    c174:	0400000b 	streq	r0, [r0], #-11
    c178:	001ae00c 	andseq	lr, sl, ip
    c17c:	0ca50800 	stceq	8, cr0, [r5]
    c180:	00000947 	andeq	r0, r0, r7, asr #18
    c184:	1d780c08 	ldclne	12, cr0, [r8, #-32]!	; 0xffffffe0
    c188:	ad080000 	stcge	0, cr0, [r8, #-0]
    c18c:	000f1506 	andeq	r1, pc, r6, lsl #10
    c190:	c20c0c00 	andgt	r0, ip, #0, 24
    c194:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c198:	0f5f06b1 	svceq	0x005f06b1
    c19c:	0c0d0000 	stceq	0, cr0, [sp], {-0}
    c1a0:	00001b25 	andeq	r1, r0, r5, lsr #22
    c1a4:	8906c308 	stmdbhi	r6, {r3, r8, r9, lr, pc}
    c1a8:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    c1ac:	001eb20c 	andseq	fp, lr, ip, lsl #4
    c1b0:	06cd0800 	strbeq	r0, [sp], r0, lsl #16
    c1b4:	00001013 	andeq	r1, r0, r3, lsl r0
    c1b8:	1dc40c0f 	stclne	12, cr0, [r4, #60]	; 0x3c
    c1bc:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    c1c0:	00006b0d 	andeq	r6, r0, sp, lsl #22
    c1c4:	010c1000 	mrseq	r1, (UNDEF: 12)
    c1c8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c1cc:	00450ccf 	subeq	r0, r5, pc, asr #25
    c1d0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    c1d4:	00001f04 	andeq	r1, r0, r4, lsl #30
    c1d8:	450cd108 	strmi	sp, [ip, #-264]	; 0xfffffef8
    c1dc:	15000000 	strne	r0, [r0, #-0]
    c1e0:	001f0d0c 	andseq	r0, pc, ip, lsl #26
    c1e4:	0cd20800 	ldcleq	8, cr0, [r2], {0}
    c1e8:	00000045 	andeq	r0, r0, r5, asr #32
    c1ec:	1c5f0c16 	mrrcne	12, 1, r0, pc, cr6	; <UNPREDICTABLE>
    c1f0:	db080000 	blle	20c1f8 <__ccfg+0x1ec250>
    c1f4:	00108d06 	andseq	r8, r0, r6, lsl #26
    c1f8:	550c1700 	strpl	r1, [ip, #-1792]	; 0xfffff900
    c1fc:	08000021 	stmdaeq	r0, {r0, r5}
    c200:	09470cdc 	stmdbeq	r7, {r2, r3, r4, r6, r7, sl, fp}^
    c204:	0c180000 	ldceq	0, cr0, [r8], {-0}
    c208:	00001c93 	muleq	r0, r3, ip
    c20c:	d211dd08 	andsle	sp, r1, #8, 26	; 0x200
    c210:	1c00000b 	stcne	0, cr0, [r0], {11}
    c214:	001a7a0c 	andseq	r7, sl, ip, lsl #20
    c218:	0dde0800 	ldcleq	8, cr0, [lr]
    c21c:	00000977 	andeq	r0, r0, r7, ror r9
    c220:	35030020 	strcc	r0, [r3, #-32]	; 0xffffffe0
    c224:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    c228:	0d6a3c43 	stcleq	12, cr3, [sl, #-268]!	; 0xfffffef4
    c22c:	16190000 	ldrne	r0, [r9], -r0
    c230:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    c234:	15021a08 	strne	r1, [r2, #-2568]	; 0xfffff5f8
    c238:	00000e67 	andeq	r0, r0, r7, ror #28
    c23c:	0019e817 	andseq	lr, r9, r7, lsl r8
    c240:	021b0800 	andseq	r0, fp, #0, 16
    c244:	0000580d 	andeq	r5, r0, sp, lsl #16
    c248:	93170000 	tstls	r7, #0
    c24c:	08000005 	stmdaeq	r0, {r0, r2}
    c250:	580d021d 	stmdapl	sp, {r0, r2, r3, r4, r9}
    c254:	02000000 	andeq	r0, r0, #0
    c258:	001d4817 	andseq	r4, sp, r7, lsl r8
    c25c:	02200800 	eoreq	r0, r0, #0, 16
    c260:	000b2813 	andeq	r2, fp, r3, lsl r8
    c264:	e0170400 	ands	r0, r7, r0, lsl #8
    c268:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c26c:	470c0221 	strmi	r0, [ip, -r1, lsr #4]
    c270:	08000009 	stmdaeq	r0, {r0, r3}
    c274:	001d7817 	andseq	r7, sp, r7, lsl r8
    c278:	02290800 	eoreq	r0, r9, #0, 16
    c27c:	0010d706 	andseq	sp, r0, r6, lsl #14
    c280:	c2170c00 	andsgt	r0, r7, #0, 24
    c284:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c288:	2606022d 	strcs	r0, [r6], -sp, lsr #4
    c28c:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    c290:	0019dd17 	andseq	sp, r9, r7, lsl sp
    c294:	02330800 	eorseq	r0, r3, #0, 16
    c298:	00115306 	andseq	r5, r1, r6, lsl #6
    c29c:	31170e00 	tstcc	r7, r0, lsl #28
    c2a0:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c2a4:	80060238 	andhi	r0, r6, r8, lsr r2
    c2a8:	10000011 	andne	r0, r0, r1, lsl r0
    c2ac:	001b6917 	andseq	r6, fp, r7, lsl r9
    c2b0:	02390800 	eorseq	r0, r9, #0, 16
    c2b4:	0000450c 	andeq	r4, r0, ip, lsl #10
    c2b8:	ba171400 	blt	5d12c0 <__ccfg+0x5b1318>
    c2bc:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c2c0:	ad060241 	sfmge	f0, 4, [r6, #-260]	; 0xfffffefc
    c2c4:	15000011 	strne	r0, [r0, #-17]	; 0xffffffef
    c2c8:	001ad517 	andseq	sp, sl, r7, lsl r5
    c2cc:	02550800 	subseq	r0, r5, #0, 16
    c2d0:	0011da06 	andseq	sp, r1, r6, lsl #20
    c2d4:	9f171600 	svcls	0x00171600
    c2d8:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    c2dc:	3a060268 	bcc	18cc84 <__ccfg+0x16ccdc>
    c2e0:	18000012 	stmdane	r0, {r1, r4}
    c2e4:	001b6117 	andseq	r6, fp, r7, lsl r1
    c2e8:	02690800 	rsbeq	r0, r9, #0, 16
    c2ec:	0000580d 	andeq	r5, r0, sp, lsl #16
    c2f0:	95171a00 	ldrls	r1, [r7, #-2560]	; 0xfffff600
    c2f4:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    c2f8:	2e0e026a 	cdpcs	2, 0, cr0, cr14, cr10, {3}
    c2fc:	1c00000b 	stcne	0, cr0, [r0], {11}
    c300:	001a1a17 	andseq	r1, sl, r7, lsl sl
    c304:	026c0800 	rsbeq	r0, ip, #0, 16
    c308:	0000580d 	andeq	r5, r0, sp, lsl #16
    c30c:	50172000 	andspl	r2, r7, r0
    c310:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c314:	240c0270 	strcs	r0, [ip], #-624	; 0xfffffd90
    c318:	22000000 	andcs	r0, r0, #0
    c31c:	001e8d17 	andseq	r8, lr, r7, lsl sp
    c320:	02730800 	rsbseq	r0, r3, #0, 16
    c324:	0000450c 	andeq	r4, r0, ip, lsl #10
    c328:	0b002400 	bleq	15330 <__exidx_end+0x10404>
    c32c:	047f0801 	ldrbteq	r0, [pc], #-2049	; c334 <__exidx_end+0x7408>
    c330:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    c334:	00223b20 	eoreq	r3, r2, r0, lsr #22
    c338:	0f800800 	svceq	0x00800800
    c33c:	00000045 	andeq	r0, r0, r5, asr #32
    c340:	00040401 	andeq	r0, r4, r1, lsl #8
    c344:	001bc920 	andseq	ip, fp, r0, lsr #18
    c348:	0f810800 	svceq	0x00810800
    c34c:	00000045 	andeq	r0, r0, r5, asr #32
    c350:	00030101 	andeq	r0, r3, r1, lsl #2
    c354:	001c8920 	andseq	r8, ip, r0, lsr #18
    c358:	0f830800 	svceq	0x00830800
    c35c:	00000045 	andeq	r0, r0, r5, asr #32
    c360:	00010201 	andeq	r0, r1, r1, lsl #4
    c364:	001a5720 	andseq	r5, sl, r0, lsr #14
    c368:	0f840800 	svceq	0x00840800
    c36c:	00000045 	andeq	r0, r0, r5, asr #32
    c370:	00000101 	andeq	r0, r0, r1, lsl #2
    c374:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    c378:	0edb0487 	cdpeq	4, 13, cr0, cr11, cr7, {4}
    c37c:	a5200000 	strge	r0, [r0, #-0]!
    c380:	08000020 	stmdaeq	r0, {r5}
    c384:	00450f88 	subeq	r0, r5, r8, lsl #31
    c388:	04010000 	streq	r0, [r1], #-0
    c38c:	01200004 			; <UNDEFINED> instruction: 0x01200004
    c390:	08000022 	stmdaeq	r0, {r1, r5}
    c394:	00450f89 	subeq	r0, r5, r9, lsl #31
    c398:	04010000 	streq	r0, [r1], #-0
    c39c:	0b000000 	bleq	c3a4 <__exidx_end+0x7478>
    c3a0:	048b0801 	streq	r0, [fp], #2049	; 0x801
    c3a4:	00000f15 	andeq	r0, r0, r5, lsl pc
    c3a8:	00214020 	eoreq	r4, r1, r0, lsr #32
    c3ac:	0f8c0800 	svceq	0x008c0800
    c3b0:	00000045 	andeq	r0, r0, r5, asr #32
    c3b4:	00070101 	andeq	r0, r7, r1, lsl #2
    c3b8:	0021c820 	eoreq	ip, r1, r0, lsr #16
    c3bc:	0f8f0800 	svceq	0x008f0800
    c3c0:	00000045 	andeq	r0, r0, r5, asr #32
    c3c4:	00040101 	andeq	r0, r4, r1, lsl #2
    c3c8:	001a0d20 	andseq	r0, sl, r0, lsr #26
    c3cc:	0f910800 	svceq	0x00910800
    c3d0:	00000045 	andeq	r0, r0, r5, asr #32
    c3d4:	00030101 	andeq	r0, r3, r1, lsl #2
    c3d8:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    c3dc:	0f5f04a6 	svceq	0x005f04a6
    c3e0:	3b200000 	blcc	80c3e8 <__ccfg+0x7ec440>
    c3e4:	08000022 	stmdaeq	r0, {r1, r5}
    c3e8:	00450fa7 	subeq	r0, r5, r7, lsr #31
    c3ec:	04010000 	streq	r0, [r1], #-0
    c3f0:	c9200004 	stmdbgt	r0!, {r2}
    c3f4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    c3f8:	00450fa8 	subeq	r0, r5, r8, lsr #31
    c3fc:	01010000 	mrseq	r0, (UNDEF: 1)
    c400:	89200003 	stmdbhi	r0!, {r0, r1}
    c404:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c408:	00450faa 	subeq	r0, r5, sl, lsr #31
    c40c:	02010000 	andeq	r0, r1, #0
    c410:	57200001 	strpl	r0, [r0, -r1]!
    c414:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c418:	00450fab 	subeq	r0, r5, fp, lsr #31
    c41c:	01010000 	mrseq	r0, (UNDEF: 1)
    c420:	0b000000 	bleq	c428 <__exidx_end+0x74fc>
    c424:	04ae0801 	strteq	r0, [lr], #2049	; 0x801
    c428:	00000f89 	andeq	r0, r0, r9, lsl #31
    c42c:	0020a520 	eoreq	sl, r0, r0, lsr #10
    c430:	0faf0800 	svceq	0x00af0800
    c434:	00000045 	andeq	r0, r0, r5, asr #32
    c438:	00040401 	andeq	r0, r4, r1, lsl #8
    c43c:	00220120 	eoreq	r0, r2, r0, lsr #2
    c440:	0fb00800 	svceq	0x00b00800
    c444:	00000045 	andeq	r0, r0, r5, asr #32
    c448:	00000401 	andeq	r0, r0, r1, lsl #8
    c44c:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    c450:	101304b2 			; <UNDEFINED> instruction: 0x101304b2
    c454:	40200000 	eormi	r0, r0, r0
    c458:	08000021 	stmdaeq	r0, {r0, r5}
    c45c:	00450fb3 	strheq	r0, [r5], #-243	; 0xffffff0d
    c460:	01010000 	mrseq	r0, (UNDEF: 1)
    c464:	82200007 	eorhi	r0, r0, #7
    c468:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c46c:	00450fb5 	strheq	r0, [r5], #-245	; 0xffffff0b
    c470:	01010000 	mrseq	r0, (UNDEF: 1)
    c474:	16200006 	strtne	r0, [r0], -r6
    c478:	08000020 	stmdaeq	r0, {r5}
    c47c:	00450fb7 	strheq	r0, [r5], #-247	; 0xffffff09
    c480:	01010000 	mrseq	r0, (UNDEF: 1)
    c484:	c8200005 	stmdagt	r0!, {r0, r2}
    c488:	08000021 	stmdaeq	r0, {r0, r5}
    c48c:	00450fb9 	strheq	r0, [r5], #-249	; 0xffffff07
    c490:	01010000 	mrseq	r0, (UNDEF: 1)
    c494:	0d200004 	stceq	0, cr0, [r0, #-16]!
    c498:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c49c:	00450fbb 	strheq	r0, [r5], #-251	; 0xffffff05
    c4a0:	01010000 	mrseq	r0, (UNDEF: 1)
    c4a4:	5d200003 	stcpl	0, cr0, [r0, #-12]!
    c4a8:	08000021 	stmdaeq	r0, {r0, r5}
    c4ac:	00450fbd 	strheq	r0, [r5], #-253	; 0xffffff03
    c4b0:	01010000 	mrseq	r0, (UNDEF: 1)
    c4b4:	9a200002 	bls	80c4c4 <__ccfg+0x7ec51c>
    c4b8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c4bc:	00450fbf 	strheq	r0, [r5], #-255	; 0xffffff01
    c4c0:	01010000 	mrseq	r0, (UNDEF: 1)
    c4c4:	21200001 			; <UNDEFINED> instruction: 0x21200001
    c4c8:	08000020 	stmdaeq	r0, {r5}
    c4cc:	00450fc1 	subeq	r0, r5, r1, asr #31
    c4d0:	01010000 	mrseq	r0, (UNDEF: 1)
    c4d4:	0b000000 	bleq	c4dc <__exidx_end+0x75b0>
    c4d8:	04c40801 	strbeq	r0, [r4], #2049	; 0x801
    c4dc:	0000108d 	andeq	r1, r0, sp, lsl #1
    c4e0:	001d5820 	andseq	r5, sp, r0, lsr #16
    c4e4:	0fc50800 	svceq	0x00c50800
    c4e8:	00000045 	andeq	r0, r0, r5, asr #32
    c4ec:	00070101 	andeq	r0, r7, r1, lsl #2
    c4f0:	001b9120 	andseq	r9, fp, r0, lsr #2
    c4f4:	0fc60800 	svceq	0x00c60800
    c4f8:	00000045 	andeq	r0, r0, r5, asr #32
    c4fc:	00060101 	andeq	r0, r6, r1, lsl #2
    c500:	001ccc20 	andseq	ip, ip, r0, lsr #24
    c504:	0fc80800 	svceq	0x00c80800
    c508:	00000045 	andeq	r0, r0, r5, asr #32
    c50c:	00040101 	andeq	r0, r4, r1, lsl #2
    c510:	001c3520 	andseq	r3, ip, r0, lsr #10
    c514:	0fc90800 	svceq	0x00c90800
    c518:	00000045 	andeq	r0, r0, r5, asr #32
    c51c:	00030101 	andeq	r0, r3, r1, lsl #2
    c520:	001faa20 	andseq	sl, pc, r0, lsr #20
    c524:	0fca0800 	svceq	0x00ca0800
    c528:	00000045 	andeq	r0, r0, r5, asr #32
    c52c:	00020101 	andeq	r0, r2, r1, lsl #2
    c530:	001aea20 	andseq	lr, sl, r0, lsr #20
    c534:	0fcb0800 	svceq	0x00cb0800
    c538:	00000045 	andeq	r0, r0, r5, asr #32
    c53c:	00010101 	andeq	r0, r1, r1, lsl #2
    c540:	0019f220 	andseq	pc, r9, r0, lsr #4
    c544:	0fcc0800 	svceq	0x00cc0800
    c548:	00000045 	andeq	r0, r0, r5, asr #32
    c54c:	00000101 	andeq	r0, r0, r1, lsl #2
    c550:	08010b00 	stmdaeq	r1, {r8, r9, fp}
    c554:	10d704d4 	ldrsbne	r0, [r7], #68	; 0x44
    c558:	3b200000 	blcc	80c560 <__ccfg+0x7ec5b8>
    c55c:	08000022 	stmdaeq	r0, {r1, r5}
    c560:	00450fd5 	ldrdeq	r0, [r5], #-245	; 0xffffff0b
    c564:	04010000 	streq	r0, [r1], #-0
    c568:	c9200004 	stmdbgt	r0!, {r2}
    c56c:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    c570:	00450fd6 	ldrdeq	r0, [r5], #-246	; 0xffffff0a
    c574:	01010000 	mrseq	r0, (UNDEF: 1)
    c578:	89200003 	stmdbhi	r0!, {r0, r1}
    c57c:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c580:	00450fd8 	ldrdeq	r0, [r5], #-248	; 0xffffff08
    c584:	02010000 	andeq	r0, r1, #0
    c588:	57200001 	strpl	r0, [r0, -r1]!
    c58c:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    c590:	00450fd9 	ldrdeq	r0, [r5], #-249	; 0xffffff07
    c594:	01010000 	mrseq	r0, (UNDEF: 1)
    c598:	1a000000 	bne	c5a0 <__exidx_end+0x7674>
    c59c:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    c5a0:	00112604 	andseq	r2, r1, r4, lsl #12
    c5a4:	223b2100 	eorscs	r2, fp, #0, 2
    c5a8:	23080000 	movwcs	r0, #32768	; 0x8000
    c5ac:	00450f02 	subeq	r0, r5, r2, lsl #30
    c5b0:	04010000 	streq	r0, [r1], #-0
    c5b4:	c9210004 	stmdbgt	r1!, {r2}
    c5b8:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    c5bc:	450f0224 	strmi	r0, [pc, #-548]	; c3a0 <__exidx_end+0x7474>
    c5c0:	01000000 	mrseq	r0, (UNDEF: 0)
    c5c4:	21000301 	tstcs	r0, r1, lsl #6
    c5c8:	00001c89 	andeq	r1, r0, r9, lsl #25
    c5cc:	0f022608 	svceq	0x00022608
    c5d0:	00000045 	andeq	r0, r0, r5, asr #32
    c5d4:	00010201 	andeq	r0, r1, r1, lsl #4
    c5d8:	001a5721 	andseq	r5, sl, r1, lsr #14
    c5dc:	02270800 	eoreq	r0, r7, #0, 16
    c5e0:	0000450f 	andeq	r4, r0, pc, lsl #10
    c5e4:	00010100 	andeq	r0, r1, r0, lsl #2
    c5e8:	011a0000 	tsteq	sl, r0
    c5ec:	04022a08 	streq	r2, [r2], #-2568	; 0xfffff5f8
    c5f0:	00001153 	andeq	r1, r0, r3, asr r1
    c5f4:	0020a521 	eoreq	sl, r0, r1, lsr #10
    c5f8:	022b0800 	eoreq	r0, fp, #0, 16
    c5fc:	0000450f 	andeq	r4, r0, pc, lsl #10
    c600:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    c604:	22012100 	andcs	r2, r1, #0, 2
    c608:	2c080000 	stccs	0, cr0, [r8], {-0}
    c60c:	00450f02 	subeq	r0, r5, r2, lsl #30
    c610:	04010000 	streq	r0, [r1], #-0
    c614:	1a000000 	bne	c61c <__exidx_end+0x76f0>
    c618:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    c61c:	00118004 	andseq	r8, r1, r4
    c620:	1ce12100 	stfnee	f2, [r1]
    c624:	2f080000 	svccs	0x00080000
    c628:	00581002 	subseq	r1, r8, r2
    c62c:	03020000 	movweq	r0, #8192	; 0x2000
    c630:	e421000d 	strt	r0, [r1], #-13
    c634:	08000021 	stmdaeq	r0, {r0, r5}
    c638:	58100232 	ldmdapl	r0, {r1, r4, r5, r9}
    c63c:	02000000 	andeq	r0, r0, #0
    c640:	0000000d 	andeq	r0, r0, sp
    c644:	3408041a 	strcc	r0, [r8], #-1050	; 0xfffffbe6
    c648:	11ad0402 			; <UNDEFINED> instruction: 0x11ad0402
    c64c:	75210000 	strvc	r0, [r1, #-0]!
    c650:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    c654:	6b100235 	blvs	40cf30 <__ccfg+0x3ecf88>
    c658:	04000000 	streq	r0, [r0], #-0
    c65c:	21001c04 	tstcs	r0, r4, lsl #24
    c660:	00001f85 	andeq	r1, r0, r5, lsl #31
    c664:	10023708 	andne	r3, r2, r8, lsl #14
    c668:	0000006b 	andeq	r0, r0, fp, rrx
    c66c:	00031504 	andeq	r1, r3, r4, lsl #10
    c670:	08011a00 	stmdaeq	r1, {r9, fp, ip}
    c674:	da04023a 	ble	10cf64 <__ccfg+0xecfbc>
    c678:	21000011 	tstcs	r0, r1, lsl r0
    c67c:	000020d9 	ldrdeq	r2, [r0], -r9
    c680:	0f023b08 	svceq	0x00023b08
    c684:	00000045 	andeq	r0, r0, r5, asr #32
    c688:	00020601 	andeq	r0, r2, r1, lsl #12
    c68c:	001aaf21 	andseq	sl, sl, r1, lsr #30
    c690:	023d0800 	eorseq	r0, sp, #0, 16
    c694:	0000450f 	andeq	r4, r0, pc, lsl #10
    c698:	00020100 	andeq	r0, r2, r0, lsl #2
    c69c:	021a0000 	andseq	r0, sl, #0
    c6a0:	04024208 	streq	r4, [r2], #-520	; 0xfffffdf8
    c6a4:	0000123a 	andeq	r1, r0, sl, lsr r2
    c6a8:	001e7e21 	andseq	r7, lr, r1, lsr #28
    c6ac:	02430800 	subeq	r0, r3, #0, 16
    c6b0:	00005810 	andeq	r5, r0, r0, lsl r8
    c6b4:	0a060200 	beq	18cebc <__ccfg+0x16cf14>
    c6b8:	1d1b2100 	ldfnes	f2, [fp, #-0]
    c6bc:	44080000 	strmi	r0, [r8], #-0
    c6c0:	00581002 	subseq	r1, r8, r2
    c6c4:	01020000 	mrseq	r0, (UNDEF: 2)
    c6c8:	e6210009 	strt	r0, [r1], -r9
    c6cc:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    c6d0:	58100246 	ldmdapl	r0, {r1, r2, r6, r9}
    c6d4:	02000000 	andeq	r0, r0, #0
    c6d8:	21000801 	tstcs	r0, r1, lsl #16
    c6dc:	00001a97 	muleq	r0, r7, sl
    c6e0:	10024808 	andne	r4, r2, r8, lsl #16
    c6e4:	00000058 	andeq	r0, r0, r8, asr r0
    c6e8:	00040402 	andeq	r0, r4, r2, lsl #8
    c6ec:	001a3a21 	andseq	r3, sl, r1, lsr #20
    c6f0:	024d0800 	subeq	r0, sp, #0, 16
    c6f4:	00005810 	andeq	r5, r0, r0, lsl r8
    c6f8:	00030200 	andeq	r0, r3, r0, lsl #4
    c6fc:	021a0000 	andseq	r0, sl, #0
    c700:	04025608 	streq	r5, [r2], #-1544	; 0xfffff9f8
    c704:	00001289 	andeq	r1, r0, r9, lsl #5
    c708:	001c7c21 	andseq	r7, ip, r1, lsr #24
    c70c:	02570800 	subseq	r0, r7, #0, 16
    c710:	00005810 	andeq	r5, r0, r0, lsl r8
    c714:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    c718:	1c1b2100 	ldfnes	f2, [fp], {-0}
    c71c:	5d080000 	stcpl	0, cr0, [r8, #-0]
    c720:	00581002 	subseq	r1, r8, r2
    c724:	01020000 	mrseq	r0, (UNDEF: 2)
    c728:	bb21000c 	bllt	84c760 <__ccfg+0x82c7b8>
    c72c:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    c730:	5810025f 	ldmdapl	r0, {r0, r1, r2, r3, r4, r6, r9}
    c734:	02000000 	andeq	r0, r0, #0
    c738:	21000606 	tstcs	r0, r6, lsl #12
    c73c:	00001eb9 			; <UNDEFINED> instruction: 0x00001eb9
    c740:	10026608 	andne	r6, r2, r8, lsl #12
    c744:	00000058 	andeq	r0, r0, r8, asr r0
    c748:	00050102 	andeq	r0, r5, r2, lsl #2
    c74c:	00770900 	rsbseq	r0, r7, r0, lsl #18
    c750:	12990000 	addsne	r0, r9, #0
    c754:	910a0000 	mrsls	r0, (UNDEF: 10)
    c758:	a2000000 	andge	r0, r0, #0
    c75c:	12890400 	addne	r0, r9, #0, 8
    c760:	85220000 	strhi	r0, [r2, #-0]!
    c764:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    c768:	12991049 	addsne	r1, r9, #73	; 0x49
    c76c:	028c0000 	addeq	r0, ip, #0
    c770:	210004ad 	smlatbcs	r0, sp, r4, r0
    c774:	21000449 	tstcs	r0, r9, asr #8
    c778:	2100047d 	tstcs	r0, sp, ror r4
    c77c:	21000481 	smlabbcs	r0, r1, r4, r0
    c780:	21000511 	tstcs	r0, r1, lsl r5
    c784:	21000591 			; <UNDEFINED> instruction: 0x21000591
    c788:	21000641 	tstcs	r0, r1, asr #12
    c78c:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    c790:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    c794:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    c798:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    c79c:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    c7a0:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    c7a4:	d00b079b 	mulle	fp, fp, r7
    c7a8:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    c7ac:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    c7b0:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    c7b4:	240f490e 	strcs	r4, [pc], #-2318	; c7bc <__exidx_end+0x7890>
    c7b8:	43200224 			; <UNDEFINED> instruction: 0x43200224
    c7bc:	82c83160 	sbchi	r3, r8, #96, 2
    c7c0:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    c7c4:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    c7c8:	2100026b 	tstcs	r0, fp, ror #4
    c7cc:	00004ce5 	andeq	r4, r0, r5, ror #25
    c7d0:	e0014809 	and	r4, r1, r9, lsl #16
    c7d4:	0c004808 	stceq	8, cr4, [r0], {8}
    c7d8:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    c7dc:	2aff7822 	bcs	fffea86c <_estack+0xdffe586c>
    c7e0:	7acad101 	bvc	ff2c0bec <_estack+0xdf2bbbec>
    c7e4:	31607022 	cmncc	r0, r2, lsr #32
    c7e8:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    c7ec:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    c7f0:	40086200 	andmi	r6, r8, r0, lsl #4
    c7f4:	210006a4 	smlatbcs	r0, r4, r6, r0
    c7f8:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    c7fc:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    c800:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    c804:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    c808:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    c80c:	4a11d006 	bmi	48082c <__ccfg+0x460884>
    c810:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    c814:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    c818:	e000480f 	and	r4, r0, pc, lsl #16
    c81c:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    c820:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    c824:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    c828:	dcf92c00 	ldclle	12, cr2, [r9]
    c82c:	200140e3 	andcs	r4, r1, r3, ror #1
    c830:	18180340 	ldmdane	r8, {r6, r8, r9}
    c834:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    c838:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    c83c:	31802300 	orrcc	r2, r0, r0, lsl #6
    c840:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    c844:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    c848:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    c84c:	316c4b04 	cmncc	ip, r4, lsl #22
    c850:	0000e7f6 	strdeq	lr, [r0], -r6
    c854:	00005c83 	andeq	r5, r0, r3, lsl #25
    c858:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    c85c:	230d8300 	movwcs	r8, #54016	; 0xd300
    c860:	21000674 	tstcs	r0, r4, ror r6
    c864:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    c868:	6b714605 	blvs	1c5e084 <__ccfg+0x1c3e0dc>
    c86c:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    c870:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    c874:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    c878:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    c87c:	7b00d00f 	blvc	408c0 <__ccfg+0x20918>
    c880:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    c884:	4f152001 	svcmi	0x00152001
    c888:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    c88c:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    c890:	09c18800 	stmibeq	r1, {fp, pc}^
    c894:	d00407c9 	andle	r0, r4, r9, asr #15
    c898:	7ac0e016 	bvc	ff0448f8 <_estack+0xdf03f8f8>
    c89c:	7b40e7f0 	blvc	1046864 <__ccfg+0x10268bc>
    c8a0:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    c8a4:	61cc6374 	bicvs	r6, ip, r4, ror r3
    c8a8:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    c8ac:	2001d00c 	andcs	sp, r1, ip
    c8b0:	6b310380 	blvs	c4d6b8 <__ccfg+0xc2d710>
    c8b4:	d0012d00 	andle	r2, r1, r0, lsl #26
    c8b8:	e0004301 	and	r4, r0, r1, lsl #6
    c8bc:	46084381 	strmi	r4, [r8], -r1, lsl #7
    c8c0:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    c8c4:	63483940 	movtvs	r3, #35136	; 0x8940
    c8c8:	47b82000 	ldrmi	r2, [r8, r0]!
    c8cc:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    c8d0:	21000280 	smlabbcs	r0, r0, r2, r0
    c8d4:	21000088 	smlabbcs	r0, r8, r0, r0
    c8d8:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    c8dc:	00003f7b 	andeq	r3, r0, fp, ror pc
    c8e0:	40044040 	andmi	r4, r4, r0, asr #32
    c8e4:	4a22b510 	bmi	8b9d2c <__ccfg+0x899d84>
    c8e8:	61512100 	cmpvs	r1, r0, lsl #2
    c8ec:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    c8f0:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    c8f4:	4b204921 	blmi	81ed80 <__ccfg+0x7fedd8>
    c8f8:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    c8fc:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    c900:	e0004313 	and	r4, r0, r3, lsl r3
    c904:	634b4393 	movtvs	r4, #45971	; 0xb393
    c908:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    c90c:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    c910:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    c914:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    c918:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    c91c:	09c08800 	stmibeq	r0, {fp, pc}^
    c920:	d12207c0 	smlawtle	r2, r0, r7, r0
    c924:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    c928:	d11e2800 	tstle	lr, r0, lsl #16
    c92c:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    c930:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    c934:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    c938:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    c93c:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    c940:	2008d213 	andcs	sp, r8, r3, lsl r2
    c944:	6a686160 	bvs	1a24ecc <__ccfg+0x1a04f24>
    c948:	01400940 	cmpeq	r0, r0, asr #18
    c94c:	4a0e6020 	bmi	3a49d4 <__ccfg+0x384a2c>
    c950:	62d12100 	sbcsvs	r2, r1, #0, 2
    c954:	21024a0d 	tstcs	r2, sp, lsl #20
    c958:	21016011 	tstcs	r1, r1, lsl r0
    c95c:	60204308 	eorvs	r4, r0, r8, lsl #6
    c960:	43082103 	movwmi	r2, #33027	; 0x8103
    c964:	60206268 	eorvs	r6, r0, r8, ror #4
    c968:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    c96c:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    c970:	40044000 	andmi	r4, r4, r0
    c974:	21000018 	tstcs	r0, r8, lsl r0
    c978:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    c97c:	21000280 	smlabbcs	r0, r0, r2, r0
    c980:	000068cf 	andeq	r6, r0, pc, asr #17
    c984:	21000068 	tstcs	r0, r8, rrx
    c988:	40041100 	andmi	r1, r4, r0, lsl #2
    c98c:	e000e280 	and	lr, r0, r0, lsl #5
    c990:	00003bc3 	andeq	r3, r0, r3, asr #23
    c994:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    c998:	2004d000 	andcs	sp, r4, r0
    c99c:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    c9a0:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    c9a4:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    c9a8:	2080e000 	addcs	lr, r0, r0
    c9ac:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    c9b0:	00004770 	andeq	r4, r0, r0, ror r7
    c9b4:	2100026b 	tstcs	r0, fp, ror #4
    c9b8:	40046058 	andmi	r6, r4, r8, asr r0
    c9bc:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    c9c0:	bd019001 	stclt	0, cr9, [r1, #-4]
    c9c4:	00006fa5 	andeq	r6, r0, r5, lsr #31
    c9c8:	00000000 	andeq	r0, r0, r0
    c9cc:	00030001 	andeq	r0, r3, r1
    c9d0:	001f000a 	andseq	r0, pc, sl
    c9d4:	00eb0059 	rsceq	r0, fp, r9, asr r0
    c9d8:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    c9dc:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    c9e0:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    c9e4:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    c9e8:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    c9ec:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    c9f0:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    c9f4:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    c9f8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    c9fc:	00007709 	andeq	r7, r0, r9, lsl #14
    ca00:	00154900 	andseq	r4, r5, r0, lsl #18
    ca04:	00912300 	addseq	r2, r1, r0, lsl #6
    ca08:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
    ca0c:	15380400 	ldrne	r0, [r8, #-1024]!	; 0xfffffc00
    ca10:	d4220000 	strtle	r0, [r2], #-0
    ca14:	0a00001d 	beq	ca90 <__exidx_end+0x7b64>
    ca18:	1549103a 	strbne	r1, [r9, #-58]	; 0xffffffc6
    ca1c:	06b40000 	ldrteq	r0, [r4], r0
    ca20:	000061a3 	andeq	r6, r0, r3, lsr #3
    ca24:	1307147f 	movwne	r1, #29823	; 0x747f
    ca28:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    ca2c:	3f131f2e 	svccc	0x00131f2e
    ca30:	003f0ab0 	ldrhteq	r0, [pc], -r0
    ca34:	0000ff07 	andeq	pc, r0, r7, lsl #30
    ca38:	40004030 	andmi	r4, r0, r0, lsr r0
    ca3c:	40034001 	andmi	r4, r3, r1
    ca40:	400f4007 	andmi	r4, pc, r7
    ca44:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    ca48:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    ca4c:	4fcf47cf 	svcmi	0x00cf47cf
    ca50:	2fcf3fcf 	svccs	0x00cf3fcf
    ca54:	0fcf1fcf 	svceq	0x00cf1fcf
    ca58:	00000000 	andeq	r0, r0, r0
    ca5c:	0008000f 	andeq	r0, r8, pc
    ca60:	003f0000 	eorseq	r0, pc, r0
    ca64:	00400000 	subeq	r0, r0, r0
    ca68:	0000003f 	andeq	r0, r0, pc, lsr r0
    ca6c:	00680004 	rsbeq	r0, r8, r4
    ca70:	00dc000e 	sbcseq	r0, ip, lr
    ca74:	00430006 	subeq	r0, r3, r6
    ca78:	0005001a 	andeq	r0, r5, sl, lsl r0
    ca7c:	00000000 	andeq	r0, r0, r0
    ca80:	00000002 	andeq	r0, r0, r2
    ca84:	0000003f 	andeq	r0, r0, pc, lsr r0
    ca88:	00040000 	andeq	r0, r4, r0
    ca8c:	000000c0 	andeq	r0, r0, r0, asr #1
    ca90:	00c00004 	sbceq	r0, r0, r4
    ca94:	00070000 	andeq	r0, r7, r0
    ca98:	9100c050 	qaddls	ip, r0, r0
    ca9c:	c0707000 	rsbsgt	r7, r0, r0
    caa0:	70009100 	andvc	r9, r0, r0, lsl #2
    caa4:	00213182 	eoreq	r3, r1, r2, lsl #3
    caa8:	b1109131 	tstlt	r0, r1, lsr r1
    caac:	81017000 	mrshi	r7, (UNDEF: 1)
    cab0:	a100b101 	tstge	r0, r1, lsl #2
    cab4:	91323182 	teqls	r2, r2, lsl #3
    cab8:	9101b110 	tstls	r1, r0, lsl r1
    cabc:	81411011 	cmphi	r1, r1, lsl r0
    cac0:	404f2241 	submi	r2, pc, r1, asr #4
    cac4:	700006f1 	strdvc	r0, [r0], -r1
    cac8:	9101c051 	qaddls	ip, r1, r1
    cacc:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    cad0:	d0083183 	andle	r3, r8, r3, lsl #3
    cad4:	6f413118 	svcvs	0x00413118
    cad8:	91310031 	teqls	r1, r1, lsr r0
    cadc:	1483b110 	strne	fp, [r3], #272	; 0x110
    cae0:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    cae4:	10257000 	eorne	r7, r5, r0
    cae8:	9100c050 	qaddls	ip, r0, r0
    caec:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    caf0:	6f031420 	svcvs	0x00031420
    caf4:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    caf8:	3182c022 	orrcc	ip, r2, r2, lsr #32
    cafc:	91310021 	teqls	r1, r1, lsr #32
    cb00:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    cb04:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    cb08:	3182c082 	orrcc	ip, r2, r2, lsl #1
    cb0c:	91310021 	teqls	r1, r1, lsr #32
    cb10:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    cb14:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    cb18:	00213182 	eoreq	r3, r1, r2, lsl #3
    cb1c:	b1109131 	tstlt	r0, r1, lsr r1
    cb20:	31151050 	tstcc	r5, r0, asr r0
    cb24:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    cb28:	643f7000 	ldrtvs	r7, [pc], #-0	; cb30 <__exidx_end+0x7c04>
    cb2c:	1031c052 	eorsne	ip, r1, r2, asr r0
    cb30:	31610631 	cmncc	r1, r1, lsr r6
    cb34:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    cb38:	1031c112 	eorsne	ip, r1, r2, lsl r1
    cb3c:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    cb40:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    cb44:	70006442 	andvc	r6, r0, r2, asr #8
    cb48:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    cb4c:	8220c088 	eorhi	ip, r0, #136	; 0x88
    cb50:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    cb54:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    cb58:	3001c041 	andcc	ip, r1, r1, asr #32
    cb5c:	1a181418 	bne	611bc4 <__ccfg+0x5f1c1c>
    cb60:	8230c089 	eorshi	ip, r0, #137	; 0x89
    cb64:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    cb68:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    cb6c:	3001c041 	andcc	ip, r1, r1, asr #32
    cb70:	1a191419 	bne	651bdc <__ccfg+0x631c34>
    cb74:	9136643c 	teqls	r6, ip, lsr r4
    cb78:	9134b110 	teqls	r4, r0, lsl r1
    cb7c:	b054b110 	subslt	fp, r4, r0, lsl r1
    cb80:	a0547100 	subsge	r7, r4, r0, lsl #2
    cb84:	80f0b064 	rscshi	fp, r0, r4, rrx
    cb88:	40af2200 	adcmi	r2, pc, r0, lsl #4
    cb8c:	90b01240 	adcsls	r1, r0, r0, asr #4
    cb90:	8253b032 	subshi	fp, r3, #50	; 0x32
    cb94:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    cb98:	643f6485 	ldrtvs	r6, [pc], #-1157	; cba0 <__exidx_end+0x7c74>
    cb9c:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    cba0:	c1706442 	cmngt	r0, r2, asr #8
    cba4:	c11168c2 	tstgt	r1, r2, asr #17
    cba8:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    cbac:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    cbb0:	9100c050 	qaddls	ip, r0, r0
    cbb4:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    cbb8:	16141615 			; <UNDEFINED> instruction: 0x16141615
    cbbc:	10531042 	subsne	r1, r3, r2, asr #32
    cbc0:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    cbc4:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    cbc8:	31313981 	teqcc	r1, r1, lsl #19
    cbcc:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    cbd0:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    cbd4:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    cbd8:	10731062 	rsbsne	r1, r3, r2, rrx
    cbdc:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    cbe0:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    cbe4:	101b3981 	andsne	r3, fp, r1, lsl #19
    cbe8:	c0e26572 	rscgt	r6, r2, r2, ror r5
    cbec:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    cbf0:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    cbf4:	b0610002 	rsblt	r0, r1, r2
    cbf8:	91327100 	teqls	r2, r0, lsl #2
    cbfc:	a051b110 	subsge	fp, r1, r0, lsl r1
    cc00:	7227b061 	eorvc	fp, r7, #97	; 0x61
    cc04:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    cc08:	12800000 	addne	r0, r0, #0
    cc0c:	b03290b0 	ldrhtlt	r9, [r2], -r0
    cc10:	c0507000 	subsgt	r7, r0, r0
    cc14:	72279100 	eorvc	r9, r7, #0, 2
    cc18:	10629299 	mlsne	r2, r9, r2, r9
    cc1c:	c3f01073 	mvnsgt	r1, #115	; 0x73
    cc20:	31218231 			; <UNDEFINED> instruction: 0x31218231
    cc24:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    cc28:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    cc2c:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    cc30:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    cc34:	10531042 	subsne	r1, r3, r2, asr #32
    cc38:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    cc3c:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    cc40:	31313981 	teqcc	r1, r1, lsl #19
    cc44:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    cc48:	b061a051 	rsblt	sl, r1, r1, asr r0
    cc4c:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    cc50:	643f6918 	ldrtvs	r6, [pc], #-2328	; cc58 <__exidx_end+0x7d2c>
    cc54:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    cc58:	c1016442 	tstgt	r1, r2, asr #8
    cc5c:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    cc60:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    cc64:	b1109135 	tstlt	r0, r5, lsr r1
    cc68:	64858253 	strvs	r8, [r5], #595	; 0x253
    cc6c:	90b012c0 	adcsls	r1, r0, r0, asr #5
    cc70:	7000b032 	andvc	fp, r0, r2, lsr r0
    cc74:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    cc78:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    cc7c:	c111c122 	tstgt	r1, r2, lsr #2
    cc80:	c0026442 	andgt	r6, r2, r2, asr #8
    cc84:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    cc88:	c331c062 	teqgt	r1, #98	; 0x62
    cc8c:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    cc90:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    cc94:	c111c302 	tstgt	r1, r2, lsl #6
    cc98:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    cc9c:	64853953 	strvs	r3, [r5], #2387	; 0x953
    cca0:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    cca4:	41402211 	cmpmi	r0, r1, lsl r2
    cca8:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    ccac:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    ccb0:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    ccb4:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    ccb8:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    ccbc:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    ccc0:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    ccc4:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    ccc8:	70006954 	andvc	r6, r0, r4, asr r9
    cccc:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    ccd0:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    ccd4:	c011c252 	andsgt	ip, r1, r2, asr r2
    ccd8:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    ccdc:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    cce0:	c101c002 	tstgt	r1, r2
    cce4:	c0626442 	rsbgt	r6, r2, r2, asr #8
    cce8:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    ccec:	c101c122 	tstgt	r1, r2, lsr #2
    ccf0:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    ccf4:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    ccf8:	c101c302 	tstgt	r1, r2, lsl #6
    ccfc:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    cd00:	70006485 	andvc	r6, r0, r5, lsl #9
    cd04:	7100b061 	tstvc	r0, r1, rrx
    cd08:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    cd0c:	91334d7a 	teqls	r3, sl, ror sp
    cd10:	7000b110 	andvc	fp, r0, r0, lsl r1
    cd14:	b1109132 	tstlt	r0, r2, lsr r1
    cd18:	70006972 	andvc	r6, r0, r2, ror r9
    cd1c:	7100b061 	tstvc	r0, r1, rrx
    cd20:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    cd24:	91324986 	teqls	r2, r6, lsl #19
    cd28:	7000b110 	andvc	fp, r0, r0, lsl r1
    cd2c:	b1109133 	tstlt	r0, r3, lsr r1
    cd30:	7000697e 	andvc	r6, r0, lr, ror r9
    cd34:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    cd38:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    cd3c:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    cd40:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    cd44:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    cd48:	10541405 	subsne	r1, r4, r5, lsl #8
    cd4c:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    cd50:	c0e67000 	rscgt	r7, r6, r0
    cd54:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    cd58:	10671416 	rsbne	r1, r7, r6, lsl r4
    cd5c:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    cd60:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    cd64:	73067000 	movwvc	r7, #24576	; 0x6000
    cd68:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    cd6c:	b050720e 	subslt	r7, r0, lr, lsl #4
    cd70:	80817100 	addhi	r7, r1, r0, lsl #2
    cd74:	a050b060 	subsge	fp, r0, r0, rrx
    cd78:	22418092 	subcs	r8, r1, #146	; 0x92
    cd7c:	808045c3 	addhi	r4, r0, r3, asr #11
    cd80:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    cd84:	11011630 	tstne	r1, r0, lsr r6
    cd88:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    cd8c:	61d761d6 	ldrsbvs	r6, [r7, #22]
    cd90:	61d961d8 	ldrsbvs	r6, [r9, #24]
    cd94:	61db61da 	ldrsbvs	r6, [fp, #26]
    cd98:	61de61dc 	ldrsbvs	r6, [lr, #28]
    cd9c:	61e261e0 	mvnvs	r6, r0, ror #3
    cda0:	633661e4 	teqvs	r6, #228, 2	; 0x39
    cda4:	80916339 	addshi	r6, r1, r9, lsr r3
    cda8:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    cdac:	80823121 	addhi	r3, r2, r1, lsr #2
    cdb0:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    cdb4:	11011632 	tstne	r1, r2, lsr r6
    cdb8:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    cdbc:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    cdc0:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    cdc4:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    cdc8:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    cdcc:	61e661e6 	mvnvs	r6, r6, ror #3
    cdd0:	61e661e6 	mvnvs	r6, r6, ror #3
    cdd4:	61e661e6 	mvnvs	r6, r6, ror #3
    cdd8:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    cddc:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    cde0:	61e6652a 	mvnvs	r6, sl, lsr #10
    cde4:	61e66556 	mvnvs	r6, r6, asr r5
    cde8:	61e66746 	mvnvs	r6, r6, asr #14
    cdec:	90b01210 	adcsls	r1, r0, r0, lsl r2
    cdf0:	7306720e 	movwvc	r7, #25102	; 0x620e
    cdf4:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    cdf8:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    cdfc:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    ce00:	c003c1d4 	ldrdgt	ip, [r3], -r4
    ce04:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    ce08:	91507840 	cmpls	r0, r0, asr #16
    ce0c:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    ce10:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    ce14:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    ce18:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    ce1c:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    ce20:	91907830 	orrsls	r7, r0, r0, lsr r8
    ce24:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    ce28:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    ce2c:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    ce30:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    ce34:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    ce38:	a054a0e2 	subsge	sl, r4, r2, ror #1
    ce3c:	225080f0 	subscs	r8, r0, #240	; 0xf0
    ce40:	80404615 	subhi	r4, r0, r5, lsl r6
    ce44:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    ce48:	a040620d 	subge	r6, r0, sp, lsl #4
    ce4c:	318d822d 	orrcc	r8, sp, sp, lsr #4
    ce50:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    ce54:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    ce58:	821a1009 	andshi	r1, sl, #9
    ce5c:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    ce60:	39808210 	stmibcc	r0, {r4, r9, pc}
    ce64:	100e0410 	andne	r0, lr, r0, lsl r4
    ce68:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    ce6c:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    ce70:	cfe07229 	svcgt	0x00e07229
    ce74:	b013673c 	andslt	r6, r3, ip, lsr r7
    ce78:	66c8b003 	strbvs	fp, [r8], r3
    ce7c:	b050b053 	subslt	fp, r0, r3, asr r0
    ce80:	b064b054 	rsblt	fp, r4, r4, asr r0
    ce84:	66a5b013 	ssatvs	fp, #6, r3
    ce88:	22e08210 	rsccs	r8, r0, #16, 4
    ce8c:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    ce90:	80417100 	subhi	r7, r1, r0, lsl #2
    ce94:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    ce98:	221080f0 	andscs	r8, r0, #240	; 0xf0
    ce9c:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    cea0:	b0644718 	rsblt	r4, r4, r8, lsl r7
    cea4:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    cea8:	66ceb063 	strbvs	fp, [lr], r3, rrx
    ceac:	22e08210 	rsccs	r8, r0, #16, 4
    ceb0:	66704638 			; <UNDEFINED> instruction: 0x66704638
    ceb4:	b0646238 	rsblt	r6, r4, r8, lsr r2
    ceb8:	318f816f 	orrcc	r8, pc, pc, ror #2
    cebc:	dfd03d8f 	svcle	0x00d03d8f
    cec0:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    cec4:	80417100 	subhi	r7, r1, r0, lsl #2
    cec8:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    cecc:	80f0b064 	rscshi	fp, r0, r4, rrx
    ced0:	42652250 	rsbmi	r2, r5, #80, 4
    ced4:	8211b063 	andshi	fp, r1, #99	; 0x63
    ced8:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    cedc:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    cee0:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    cee4:	66704652 			; <UNDEFINED> instruction: 0x66704652
    cee8:	81616252 	cmnhi	r1, r2, asr r2
    ceec:	31818172 	orrcc	r8, r1, r2, ror r1
    cef0:	31823d81 	orrcc	r3, r2, r1, lsl #27
    cef4:	efc03d82 	svc	0x00c03d82
    cef8:	930292f1 	movwls	r9, #8945	; 0x22f1
    cefc:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    cf00:	91c081b0 	strhls	r8, [r0, #16]
    cf04:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    cf08:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    cf0c:	0bf34e7f 	bleq	ffce0910 <_estack+0xdfcdb910>
    cf10:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    cf14:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    cf18:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    cf1c:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    cf20:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    cf24:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    cf28:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    cf2c:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    cf30:	1a1ba290 	bne	6f5978 <__ccfg+0x6d59d0>
    cf34:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    cf38:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    cf3c:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    cf40:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    cf44:	4aa21c9b 	bmi	fe8941b8 <_estack+0xde88f1b8>
    cf48:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    cf4c:	821010b2 	andshi	r1, r0, #178	; 0xb2
    cf50:	429d22d0 	addsmi	r2, sp, #208, 4
    cf54:	221080f0 	andscs	r8, r0, #240	; 0xf0
    cf58:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    cf5c:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    cf60:	629410ab 	addsvs	r1, r4, #171	; 0xab
    cf64:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    cf68:	82307000 	eorshi	r7, r0, #0
    cf6c:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    cf70:	7100b063 	tstvc	r0, r3, rrx
    cf74:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    cf78:	7000b0e0 	andvc	fp, r0, r0, ror #1
    cf7c:	91c281b2 	strhls	r8, [r2, #18]
    cf80:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    cf84:	81511812 	cmphi	r1, r2, lsl r8
    cf88:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    cf8c:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    cf90:	4abf1c12 	bmi	fefd3fe0 <_estack+0xdefcefe0>
    cf94:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    cf98:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    cf9c:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    cfa0:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    cfa4:	9162c812 	cmnls	r2, r2, lsl r8
    cfa8:	b0319172 	eorslt	r9, r1, r2, ror r1
    cfac:	7000b0e1 	andvc	fp, r0, r1, ror #1
    cfb0:	c006c008 	andgt	ip, r6, r8
    cfb4:	9160c800 	cmnls	r0, r0, lsl #16
    cfb8:	70009170 	andvc	r9, r0, r0, ror r1
    cfbc:	81b08201 	lslshi	r8, r1, #4
    cfc0:	81d091c0 	bicshi	r9, r0, r0, asr #3
    cfc4:	81511810 	cmphi	r1, r0, lsl r8
    cfc8:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    cfcc:	824280e1 	subhi	r8, r2, #225	; 0xe1
    cfd0:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    cfd4:	4ae41c20 	bmi	ff91405c <_estack+0xdf90f05c>
    cfd8:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    cfdc:	b03246e8 	eorslt	r4, r2, r8, ror #13
    cfe0:	dfa01005 	svcle	0x00a01005
    cfe4:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    cfe8:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    cfec:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    cff0:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    cff4:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    cff8:	42f61e01 	rscsmi	r1, r6, #1, 28
    cffc:	c0101618 	andsgt	r1, r0, r8, lsl r6
    d000:	1c083010 	stcne	0, cr3, [r8], {16}
    d004:	10604704 	rsbne	r4, r0, r4, lsl #14
    d008:	10063c10 	andne	r3, r6, r0, lsl ip
    d00c:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    d010:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    d014:	81719166 	cmnhi	r1, r6, ror #2
    d018:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    d01c:	4b011c16 	blmi	5407c <__ccfg+0x340d4>
    d020:	b0319176 	eorslt	r9, r1, r6, ror r1
    d024:	c008c006 	andgt	ip, r8, r6
    d028:	81617000 	cmnhi	r1, r0
    d02c:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    d030:	39808240 	stmibcc	r0, {r6, r9, pc}
    d034:	1cf11801 	ldclne	8, cr1, [r1], #4
    d038:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    d03c:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    d040:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    d044:	ef90b033 	svc	0x0090b033
    d048:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    d04c:	7000673c 	andvc	r6, r0, ip, lsr r7
    d050:	b063a003 	rsblt	sl, r3, r3
    d054:	b0efb064 	rsclt	fp, pc, r4, rrx
    d058:	71006556 	tstvc	r0, r6, asr r5
    d05c:	22008040 	andcs	r8, r0, #64	; 0x40
    d060:	b064472b 	rsblt	r4, r4, fp, lsr #14
    d064:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    d068:	80407100 	subhi	r7, r0, r0, lsl #2
    d06c:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    d070:	b003b064 	andlt	fp, r3, r4, rrx
    d074:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    d078:	31828162 	orrcc	r8, r2, r2, ror #2
    d07c:	ef803d82 	svc	0x00803d82
    d080:	930292f1 	movwls	r9, #8945	; 0x22f1
    d084:	a003673c 	andge	r6, r3, ip, lsr r7
    d088:	61e66556 	mvnvs	r6, r6, asr r5
    d08c:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    d090:	b05061e6 	subslt	r6, r0, r6, ror #3
    d094:	61e67100 	mvnvs	r7, r0, lsl #2
    d098:	82d092e0 	sbcshi	r9, r0, #224, 4
    d09c:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    d0a0:	7000b2c0 	andvc	fp, r0, r0, asr #5
    d0a4:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    d0a8:	b0304359 	eorslt	r4, r0, r9, asr r3
    d0ac:	3162c102 	cmncc	r2, r2, lsl #2
    d0b0:	80a0c001 	adchi	ip, r0, r1
    d0b4:	43521e00 	cmpmi	r2, #0, 28
    d0b8:	435322f0 	cmpmi	r3, #240, 4
    d0bc:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    d0c0:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    d0c4:	1a101020 	bne	41114c <__ccfg+0x3f11a4>
    d0c8:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    d0cc:	16121611 			; <UNDEFINED> instruction: 0x16121611
    d0d0:	70006b54 	andvc	r6, r0, r4, asr fp
    d0d4:	0023ca03 	eoreq	ip, r3, r3, lsl #20
    d0d8:	12270b00 	eorne	r0, r7, #0, 22
    d0dc:	00000058 	andeq	r0, r0, r8, asr r0
    d0e0:	001c1004 	andseq	r1, ip, r4
    d0e4:	1c102400 	cfldrsne	mvf2, [r0], {-0}
    d0e8:	e3030000 	movw	r0, #12288	; 0x3000
    d0ec:	0b000018 	bleq	d154 <__exidx_end+0x8228>
    d0f0:	0045122b 	subeq	r1, r5, fp, lsr #4
    d0f4:	26240000 	strtcs	r0, [r4], -r0
    d0f8:	0300001c 	movweq	r0, #28
    d0fc:	0000241b 	andeq	r2, r0, fp, lsl r4
    d100:	6b122c0b 	blvs	498134 <__ccfg+0x47818c>
    d104:	04000000 	streq	r0, [r0], #-0
    d108:	00001c37 	andeq	r1, r0, r7, lsr ip
    d10c:	0004f703 	andeq	pc, r4, r3, lsl #14
    d110:	122d0b00 	eorne	r0, sp, #0, 22
    d114:	0000006b 	andeq	r0, r0, fp, rrx
    d118:	320b080b 	andcc	r0, fp, #720896	; 0xb0000
    d11c:	001ce209 	andseq	lr, ip, r9, lsl #4
    d120:	003e2000 	eorseq	r2, lr, r0
    d124:	340b0000 	strcc	r0, [fp], #-0
    d128:	001c2607 	andseq	r2, ip, r7, lsl #12
    d12c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    d130:	04fd2000 	ldrbteq	r2, [sp], #0
    d134:	350b0000 	strcc	r0, [fp, #-0]
    d138:	001c2603 	andseq	r2, ip, r3, lsl #12
    d13c:	06010100 	streq	r0, [r1], -r0, lsl #2
    d140:	02372000 	eorseq	r2, r7, #0
    d144:	360b0000 	strcc	r0, [fp], -r0
    d148:	001c2603 	andseq	r2, ip, r3, lsl #12
    d14c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    d150:	05372000 	ldreq	r2, [r7, #-0]!
    d154:	370b0000 	strcc	r0, [fp, -r0]
    d158:	001c2603 	andseq	r2, ip, r3, lsl #12
    d15c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    d160:	07c02000 	strbeq	r2, [r0, r0]
    d164:	380b0000 	stmdacc	fp, {}	; <UNPREDICTABLE>
    d168:	001c2603 	andseq	r2, ip, r3, lsl #12
    d16c:	00040100 	andeq	r0, r4, r0, lsl #2
    d170:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
    d174:	3a0b0000 	bcc	2cd17c <__ccfg+0x2ad1d4>
    d178:	001c2607 	andseq	r2, ip, r7, lsl #12
    d17c:	ce0c0100 	adfgte	f0, f4, f0
    d180:	0b000006 	bleq	d1a0 <__exidx_end+0x8274>
    d184:	1c26033c 	stcne	3, cr0, [r6], #-240	; 0xffffff10
    d188:	0c020000 	stceq	0, cr0, [r2], {-0}
    d18c:	00000a6e 	andeq	r0, r0, lr, ror #20
    d190:	26033d0b 	strcs	r3, [r3], -fp, lsl #26
    d194:	0300001c 	movweq	r0, #28
    d198:	0007030c 	andeq	r0, r7, ip, lsl #6
    d19c:	083f0b00 	ldmdaeq	pc!, {r8, r9, fp}	; <UNPREDICTABLE>
    d1a0:	00001c37 	andeq	r1, r0, r7, lsr ip
    d1a4:	85030004 	strhi	r0, [r3, #-4]
    d1a8:	0b000002 	bleq	d1b8 <__exidx_end+0x828c>
    d1ac:	1c540341 	mrrcne	3, 4, r0, r4, cr1
    d1b0:	e2240000 	eor	r0, r4, #0
    d1b4:	2500001c 	strcs	r0, [r0, #-28]	; 0xffffffe4
    d1b8:	0000053e 	andeq	r0, r0, lr, lsr r5
    d1bc:	ee1a430b 	cdp	3, 1, cr4, cr10, cr11, {0}
    d1c0:	0100001c 	tsteq	r0, ip, lsl r0
    d1c4:	01b12501 			; <UNDEFINED> instruction: 0x01b12501
    d1c8:	450b0000 	strmi	r0, [fp, #-0]
    d1cc:	0005de0e 	andeq	sp, r5, lr, lsl #28
    d1d0:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    d1d4:	0000028e 	andeq	r0, r0, lr, lsl #5
    d1d8:	de1e450b 	cfmul32le	mvfx4, mvfx14, mvfx11
    d1dc:	01000005 	tsteq	r0, r5
    d1e0:	0c080b01 			; <UNDEFINED> instruction: 0x0c080b01
    d1e4:	1d4e098f 	vstrne.16	s1, [lr, #-286]	; 0xfffffee2	; <UNPREDICTABLE>
    d1e8:	010c0000 	mrseq	r0, (UNDEF: 12)
    d1ec:	0c000006 	stceq	0, cr0, [r0], {6}
    d1f0:	006b0b90 	mlseq	fp, r0, fp, r0
    d1f4:	0c000000 	stceq	0, cr0, [r0], {-0}
    d1f8:	00000ba0 	andeq	r0, r0, r0, lsr #23
    d1fc:	1008910c 	andne	r9, r8, ip, lsl #2
    d200:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    d204:	0001ea0c 	andeq	lr, r1, ip, lsl #20
    d208:	10920c00 	addsne	r0, r2, r0, lsl #24
    d20c:	00001c32 	andeq	r1, r0, r2, lsr ip
    d210:	41030006 	tstmi	r3, r6
    d214:	0c000009 	stceq	0, cr0, [r0], {9}
    d218:	1d1d0393 	ldcne	3, cr0, [sp, #-588]	; 0xfffffdb4
    d21c:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    d220:	6500001d 	strvs	r0, [r0, #-29]	; 0xffffffe3
    d224:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
    d228:	070f2500 	streq	r2, [pc, -r0, lsl #10]
    d22c:	990c0000 	stmdbls	ip, {}	; <UNPREDICTABLE>
    d230:	001d5a0f 	andseq	r5, sp, pc, lsl #20
    d234:	0b010100 	bleq	4d63c <__ccfg+0x2d694>
    d238:	09910d01 	ldmibeq	r1, {r0, r8, sl, fp}
    d23c:	00001d9d 	muleq	r0, sp, sp
    d240:	00070a20 	andeq	r0, r7, r0, lsr #20
    d244:	07930d00 	ldreq	r0, [r3, r0, lsl #26]
    d248:	00001c26 	andeq	r1, r0, r6, lsr #24
    d24c:	00010701 	andeq	r0, r1, r1, lsl #14
    d250:	00047820 	andeq	r7, r4, r0, lsr #16
    d254:	03940d00 	orrseq	r0, r4, #0, 26
    d258:	00001c26 	andeq	r1, r0, r6, lsr #24
    d25c:	00000101 	andeq	r0, r0, r1, lsl #2
    d260:	07cc0300 	strbeq	r0, [ip, r0, lsl #6]
    d264:	960d0000 	strls	r0, [sp], -r0
    d268:	001d7303 	andseq	r7, sp, r3, lsl #6
    d26c:	1d9d0400 	cfldrsne	mvf0, [sp]
    d270:	a9090000 	stmdbge	r9, {}	; <UNPREDICTABLE>
    d274:	b900001d 	stmdblt	r0, {r0, r2, r3, r4}
    d278:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
    d27c:	1dae0400 	cfstrsne	mvf0, [lr]
    d280:	47250000 	strmi	r0, [r5, -r0]!
    d284:	0d000003 	stceq	0, cr0, [r0, #-12]
    d288:	1db9179c 	ldcne	7, cr1, [r9, #624]!	; 0x270
    d28c:	01010000 	mrseq	r0, (UNDEF: 1)
    d290:	001c1c09 	andseq	r1, ip, r9, lsl #24
    d294:	001dd700 	andseq	sp, sp, r0, lsl #14
    d298:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    d29c:	00001dcc 	andeq	r1, r0, ip, asr #27
    d2a0:	0004b725 	andeq	fp, r4, r5, lsr #14
    d2a4:	13060e00 	movwne	r0, #28160	; 0x6e00
    d2a8:	00001dd7 	ldrdeq	r1, [r0], -r7
    d2ac:	b0250101 	eorlt	r0, r5, r1, lsl #2
    d2b0:	0c000006 	stceq	0, cr0, [r0], {6}
    d2b4:	1c370ec3 	ldcne	14, cr0, [r7], #-780	; 0xfffffcf4
    d2b8:	01010000 	mrseq	r0, (UNDEF: 1)
    d2bc:	0008fa06 	andeq	pc, r8, r6, lsl #20
    d2c0:	016e0f00 	cmneq	lr, r0, lsl #30
    d2c4:	001e0510 	andseq	r0, lr, r0, lsl r5
    d2c8:	0b041000 	bleq	1112d0 <__ccfg+0xf1328>
    d2cc:	1e00001e 	mcrne	0, 0, r0, cr0, cr14, {0}
    d2d0:	001e1701 	andseq	r1, lr, r1, lsl #14
    d2d4:	1c101500 	cfldr32ne	mvfx1, [r0], {-0}
    d2d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    d2dc:	000005eb 	andeq	r0, r0, fp, ror #11
    d2e0:	00001e22 	andeq	r1, r0, r2, lsr #28
    d2e4:	17040026 	strne	r0, [r4, -r6, lsr #32]
    d2e8:	1f00001e 	svcne	0x0000001e
    d2ec:	00000763 	andeq	r0, r0, r3, ror #14
    d2f0:	16017f0f 	strne	r7, [r1], -pc, lsl #30
    d2f4:	00001e22 	andeq	r1, r0, r2, lsr #28
    d2f8:	2a1f0101 	bcs	7cd704 <__ccfg+0x7ad75c>
    d2fc:	0f000003 	svceq	0x00000003
    d300:	43140182 	tstmi	r4, #-2147483616	; 0x80000020
    d304:	0100001c 	tsteq	r0, ip, lsl r0
    d308:	03071f01 	movweq	r1, #32513	; 0x7f01
    d30c:	d80f0000 	stmdale	pc, {}	; <UNPREDICTABLE>
    d310:	1c370e02 	ldcne	14, cr0, [r7], #-8
    d314:	01010000 	mrseq	r0, (UNDEF: 1)
    d318:	030f081a 	movweq	r0, #63514	; 0xf81a
    d31c:	1e7b0903 	vaddne.f16	s1, s22, s6	; <UNPREDICTABLE>
    d320:	4e170000 	cdpmi	0, 1, cr0, cr7, cr0, {0}
    d324:	0f000037 	svceq	0x00000037
    d328:	10070307 	andne	r0, r7, r7, lsl #6
    d32c:	0000001c 	andeq	r0, r0, ip, lsl r0
    d330:	000af817 	andeq	pc, sl, r7, lsl r8	; <UNPREDICTABLE>
    d334:	03080f00 	movweq	r0, #36608	; 0x8f00
    d338:	001c4808 	andseq	r4, ip, r8, lsl #16
    d33c:	06000400 	streq	r0, [r0], -r0, lsl #8
    d340:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    d344:	0303090f 	movweq	r0, #14607	; 0x390f
    d348:	00001e54 	andeq	r1, r0, r4, asr lr
    d34c:	00003319 	andeq	r3, r0, r9, lsl r3
    d350:	0b0f3000 	bleq	3d9358 <__ccfg+0x3b93b0>
    d354:	1eeb0803 	cdpne	8, 14, cr0, cr11, cr3, {0}
    d358:	f9170000 			; <UNDEFINED> instruction: 0xf9170000
    d35c:	0f000019 	svceq	0x00000019
    d360:	10080314 	andne	r0, r8, r4, lsl r3
    d364:	0000001c 	andeq	r0, r0, ip, lsl r0
    d368:	0008a417 	andeq	sl, r8, r7, lsl r4
    d36c:	03150f00 	tsteq	r5, #0, 30
    d370:	001c1008 	andseq	r1, ip, r8
    d374:	be170200 	cdplt	2, 1, cr0, cr7, cr0, {0}
    d378:	0f000048 	svceq	0x00000048
    d37c:	f80b0316 			; <UNDEFINED> instruction: 0xf80b0316
    d380:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    d384:	00432117 	subeq	r2, r3, r7, lsl r1
    d388:	03170f00 	tsteq	r7, #0, 30
    d38c:	001c4809 	andseq	r4, ip, r9, lsl #16
    d390:	07170800 	ldreq	r0, [r7, -r0, lsl #16]
    d394:	0f000000 	svceq	0x00000000
    d398:	eb0f0318 	bl	3ce000 <__ccfg+0x3ae058>
    d39c:	0c00001e 	stceq	0, cr0, [r0], {30}
    d3a0:	00072217 	andeq	r2, r7, r7, lsl r2
    d3a4:	03190f00 	tsteq	r9, #0, 30
    d3a8:	001efb15 	andseq	pc, lr, r5, lsl fp	; <UNPREDICTABLE>
    d3ac:	09002c00 	stmdbeq	r0, {sl, fp, sp}
    d3b0:	00001e7b 	andeq	r1, r0, fp, ror lr
    d3b4:	00001efb 	strdeq	r1, [r0], -fp
    d3b8:	0000910a 	andeq	r9, r0, sl, lsl #2
    d3bc:	10000300 	andne	r0, r0, r0, lsl #6
    d3c0:	001e8804 	andseq	r8, lr, r4, lsl #16
    d3c4:	08990600 	ldmeq	r9, {r9, sl}
    d3c8:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    d3cc:	1e881b03 	vdivne.f64	d1, d8, d3
    d3d0:	791f0000 	ldmdbvc	pc, {}	; <UNPREDICTABLE>
    d3d4:	0f000008 	svceq	0x00000008
    d3d8:	1d14031e 	ldcne	3, cr0, [r4, #-120]	; 0xffffff88
    d3dc:	0100001f 	tsteq	r0, pc, lsl r0
    d3e0:	01041001 	tsteq	r4, r1
    d3e4:	2500001f 	strcs	r0, [r0, #-31]	; 0xffffffe1
    d3e8:	0000054a 	andeq	r0, r0, sl, asr #10
    d3ec:	10131d10 	andsne	r1, r3, r0, lsl sp
    d3f0:	0100001c 	tsteq	r0, ip, lsl r0
    d3f4:	023e2501 	eorseq	r2, lr, #4194304	; 0x400000
    d3f8:	1e100000 	cdpne	0, 1, cr0, cr0, cr0, {0}
    d3fc:	001c211a 	andseq	r2, ip, sl, lsl r1
    d400:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    d404:	000008e6 	andeq	r0, r0, r6, ror #17
    d408:	21241e10 			; <UNDEFINED> instruction: 0x21241e10
    d40c:	0100001c 	tsteq	r0, ip, lsl r0
    d410:	09022501 	stmdbeq	r2, {r0, r8, sl, sp}
    d414:	22100000 	andscs	r0, r0, #0
    d418:	001f1d14 	andseq	r1, pc, r4, lsl sp	; <UNPREDICTABLE>
    d41c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    d420:	00001b06 	andeq	r1, r0, r6, lsl #22
    d424:	5e273911 			; <UNDEFINED> instruction: 0x5e273911
    d428:	0100000d 	tsteq	r0, sp
    d42c:	1db12501 	cfldr32ne	mvfx2, [r1, #4]!
    d430:	3a110000 	bcc	44d438 <__ccfg+0x42d490>
    d434:	0009f115 	andeq	pc, r9, r5, lsl r1	; <UNPREDICTABLE>
    d438:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    d43c:	00002217 	andeq	r2, r0, r7, lsl r2
    d440:	d81a3b11 	ldmdale	sl, {r0, r4, r8, r9, fp, ip, sp}
    d444:	0100000b 	tsteq	r0, fp
    d448:	20aa2501 	adccs	r2, sl, r1, lsl #10
    d44c:	3c110000 	ldccc	0, cr0, [r1], {-0}
    d450:	000c741a 	andeq	r7, ip, sl, lsl r4
    d454:	09010100 	stmdbeq	r1, {r8}
    d458:	0000006b 	andeq	r0, r0, fp, rrx
    d45c:	00001fa3 	andeq	r1, r0, r3, lsr #31
    d460:	0000910a 	andeq	r9, r0, sl, lsl #2
    d464:	27001400 	strcs	r1, [r0, -r0, lsl #8]
    d468:	00002474 	andeq	r2, r0, r4, ror r4
    d46c:	93113d12 	tstls	r1, #1152	; 0x480
    d470:	0500001f 	streq	r0, [r0, #-31]	; 0xffffffe1
    d474:	0000b803 	andeq	fp, r0, r3, lsl #16
    d478:	1f5b2820 	svcne	0x005b2820
    d47c:	72120000 	andsvc	r0, r2, #0
    d480:	54030520 	strpl	r0, [r3], #-1312	; 0xfffffae0
    d484:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    d488:	00001f69 	andeq	r1, r0, r9, ror #30
    d48c:	050e9612 	streq	r9, [lr, #-1554]	; 0xfffff9ee
    d490:	00003c03 	andeq	r3, r0, r3, lsl #24
    d494:	1f772820 	svcne	0x00772820
    d498:	ad120000 	ldcge	0, cr0, [r2, #-0]
    d49c:	a0030513 	andge	r0, r3, r3, lsl r5
    d4a0:	28200000 	stmdacs	r0!, {}	; <UNPREDICTABLE>
    d4a4:	00001f85 	andeq	r1, r0, r5, lsl #31
    d4a8:	0513c212 	ldreq	ip, [r3, #-530]	; 0xfffffdee
    d4ac:	00007c03 	andeq	r7, r0, r3, lsl #24
    d4b0:	018a0020 	orreq	r0, sl, r0, lsr #32
    d4b4:	00040000 	andeq	r0, r4, r0
    d4b8:	00002ecb 	andeq	r2, r0, fp, asr #29
    d4bc:	24f70104 	ldrbtcs	r0, [r7], #260	; 0x104
    d4c0:	dc010000 	stcle	0, cr0, [r1], {-0}
    d4c4:	be000024 	cdplt	0, 0, cr0, cr0, cr4, {1}
    d4c8:	80000025 	andhi	r0, r0, r5, lsr #32
    d4cc:	0000000f 	andeq	r0, r0, pc
    d4d0:	64000000 	strvs	r0, [r0], #-0
    d4d4:	02000069 	andeq	r0, r0, #105	; 0x69
    d4d8:	08da0601 	ldmeq	sl, {r0, r9, sl}^
    d4dc:	2f030000 	svccs	0x00030000
    d4e0:	02000008 	andeq	r0, r0, #8
    d4e4:	0000371d 	andeq	r3, r0, sp, lsl r7
    d4e8:	08010200 	stmdaeq	r1, {r9}
    d4ec:	000008d8 	ldrdeq	r0, [r0], -r8
    d4f0:	9f050202 	svcls	0x00050202
    d4f4:	02000007 	andeq	r0, r0, #7
    d4f8:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    d4fc:	04020000 	streq	r0, [r2], #-0
    d500:	0005e905 	andeq	lr, r5, r5, lsl #18
    d504:	08ef0300 	stmiaeq	pc!, {r8, r9}^	; <UNPREDICTABLE>
    d508:	41020000 	mrsmi	r0, (UNDEF: 2)
    d50c:	0000005e 	andeq	r0, r0, lr, asr r0
    d510:	93070402 	movwls	r0, #29698	; 0x7402
    d514:	02000003 	andeq	r0, r0, #3
    d518:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    d51c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d520:	00038e07 	andeq	r8, r3, r7, lsl #28
    d524:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    d528:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d52c:	98070402 	stmdals	r7, {r1, sl}
    d530:	03000003 	movweq	r0, #3
    d534:	00000831 	andeq	r0, r0, r1, lsr r8
    d538:	002c1403 	eoreq	r1, ip, r3, lsl #8
    d53c:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    d540:	03000008 	movweq	r0, #8
    d544:	00005320 	andeq	r5, r0, r0, lsr #6
    d548:	24a00300 	strtcs	r0, [r0], #768	; 0x300
    d54c:	33040000 	movwcc	r0, #16384	; 0x4000
    d550:	000000a2 	andeq	r0, r0, r2, lsr #1
    d554:	00a80405 	adceq	r0, r8, r5, lsl #8
    d558:	03060000 	movweq	r0, #24576	; 0x6000
    d55c:	000025ac 	andeq	r2, r0, ip, lsr #11
    d560:	00b43404 	adcseq	r3, r4, r4, lsl #8
    d564:	04050000 	streq	r0, [r5], #-0
    d568:	000000ba 	strheq	r0, [r0], -sl
    d56c:	0000c507 	andeq	ip, r0, r7, lsl #10
    d570:	00810800 	addeq	r0, r1, r0, lsl #16
    d574:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    d578:	000024cf 	andeq	r2, r0, pc, asr #9
    d57c:	30189905 	andscc	r9, r8, r5, lsl #18
    d580:	00280000 	eoreq	r0, r8, r0
    d584:	9c010000 	stcls	0, cr0, [r1], {-0}
    d588:	0000010b 	andeq	r0, r0, fp, lsl #2
    d58c:	0025a70a 	eoreq	sl, r5, sl, lsl #14
    d590:	97350100 	ldrls	r0, [r5, -r0, lsl #2]!
    d594:	c6000000 	strgt	r0, [r0], -r0
    d598:	0b000032 	bleq	d668 <__exidx_end+0x873c>
    d59c:	0000247f 	andeq	r2, r0, pc, ror r4
    d5a0:	010b3701 	tsteq	fp, r1, lsl #14
    d5a4:	330b0000 	movwcc	r0, #45056	; 0xb000
    d5a8:	200c0000 	andcs	r0, ip, r0
    d5ac:	77000030 	smladxvc	r0, r0, r0, r0
    d5b0:	0d000001 	stceq	0, cr0, [r0, #-4]
    d5b4:	0000303a 	andeq	r3, r0, sl, lsr r0
    d5b8:	00000182 	andeq	r0, r0, r2, lsl #3
    d5bc:	02010200 	andeq	r0, r1, #0, 4
    d5c0:	0000115c 	andeq	r1, r0, ip, asr r1
    d5c4:	00248b0e 	eoreq	r8, r4, lr, lsl #22
    d5c8:	009a0500 	addseq	r0, sl, r0, lsl #10
    d5cc:	2c000000 	stccs	0, cr0, [r0], {-0}
    d5d0:	01000000 	mrseq	r0, (UNDEF: 0)
    d5d4:	0001779c 	muleq	r1, ip, r7
    d5d8:	25a70a00 	strcs	r0, [r7, #2560]!	; 0xa00
    d5dc:	40010000 	andmi	r0, r1, r0
    d5e0:	000000a9 	andeq	r0, r0, r9, lsr #1
    d5e4:	00003340 	andeq	r3, r0, r0, asr #6
    d5e8:	00261e0a 	eoreq	r1, r6, sl, lsl #28
    d5ec:	81400100 	mrshi	r0, (UNDEF: 80)
    d5f0:	85000000 	strhi	r0, [r0, #-0]
    d5f4:	0b000033 	bleq	d6c8 <__exidx_end+0x879c>
    d5f8:	0000247f 	andeq	r2, r0, pc, ror r4
    d5fc:	010b4201 	tsteq	fp, r1, lsl #4
    d600:	33a60000 			; <UNDEFINED> instruction: 0x33a60000
    d604:	000c0000 	andeq	r0, ip, r0
    d608:	77000000 	strvc	r0, [r0, -r0]
    d60c:	0f000001 	svceq	0x00000001
    d610:	00000000 	andeq	r0, r0, r0
    d614:	0000016d 	andeq	r0, r0, sp, ror #2
    d618:	02500110 	subseq	r0, r0, #16, 2
    d61c:	0d000077 	stceq	0, cr0, [r0, #-476]	; 0xfffffe24
    d620:	00000000 	andeq	r0, r0, r0
    d624:	00000182 	andeq	r0, r0, r2, lsl #3
    d628:	24b11100 	ldrtcs	r1, [r1], #256	; 0x100
    d62c:	6a060000 	bvs	18d634 <__ccfg+0x16d68c>
    d630:	0000008c 	andeq	r0, r0, ip, lsl #1
    d634:	0024c011 	eoreq	ip, r4, r1, lsl r0
    d638:	8c840600 	stchi	6, cr0, [r4], {0}
    d63c:	00000000 	andeq	r0, r0, r0
    d640:	000000d5 	ldrdeq	r0, [r0], -r5
    d644:	2fb70004 	svccs	0x00b70004
    d648:	01040000 	mrseq	r0, (UNDEF: 4)
    d64c:	000024f7 	strdeq	r2, [r0], -r7
    d650:	00266a01 	eoreq	r6, r6, r1, lsl #20
    d654:	0025be00 	eoreq	fp, r5, r0, lsl #28
    d658:	000f9800 	andeq	r9, pc, r0, lsl #16
    d65c:	00000000 	andeq	r0, r0, r0
    d660:	006b0400 	rsbeq	r0, fp, r0, lsl #8
    d664:	26610200 	strbtcs	r0, [r1], -r0, lsl #4
    d668:	1b020000 	blne	8d670 <__ccfg+0x6d6c8>
    d66c:	00000030 	andeq	r0, r0, r0, lsr r0
    d670:	da060103 	ble	18da84 <__ccfg+0x16dadc>
    d674:	03000008 	movweq	r0, #8
    d678:	08d80801 	ldmeq	r8, {r0, fp}^
    d67c:	02030000 	andeq	r0, r3, #0
    d680:	00079f05 	andeq	r9, r7, r5, lsl #30
    d684:	07020300 	streq	r0, [r2, -r0, lsl #6]
    d688:	000009a6 	andeq	r0, r0, r6, lsr #19
    d68c:	00265702 	eoreq	r5, r6, r2, lsl #14
    d690:	573f0200 	ldrpl	r0, [pc, -r0, lsl #4]!
    d694:	03000000 	movweq	r0, #0
    d698:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
    d69c:	04030000 	streq	r0, [r3], #-0
    d6a0:	00039307 	andeq	r9, r3, r7, lsl #6
    d6a4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    d6a8:	000005e4 	andeq	r0, r0, r4, ror #11
    d6ac:	8e070803 	cdphi	8, 0, cr0, cr7, cr3, {0}
    d6b0:	04000003 	streq	r0, [r0], #-3
    d6b4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    d6b8:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    d6bc:	00039807 	andeq	r9, r3, r7, lsl #16
    d6c0:	26630200 	strbtcs	r0, [r3], -r0, lsl #4
    d6c4:	13030000 	movwne	r0, #12288	; 0x3000
    d6c8:	00000025 	andeq	r0, r0, r5, lsr #32
    d6cc:	00265902 	eoreq	r5, r6, r2, lsl #18
    d6d0:	4c1f0300 	ldcmi	3, cr0, [pc], {-0}
    d6d4:	05000000 	streq	r0, [r0, #-0]
    d6d8:	00002628 	andeq	r2, r0, r8, lsr #12
    d6dc:	008caa04 	addeq	sl, ip, r4, lsl #20
    d6e0:	30400000 	subcc	r0, r0, r0
    d6e4:	00300000 	eorseq	r0, r0, r0
    d6e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    d6ec:	00269b06 	eoreq	r9, r6, r6, lsl #22
    d6f0:	8c3e0100 	ldfhis	f0, [lr], #-0
    d6f4:	db000000 	blle	d6fc <__exidx_end+0x87d0>
    d6f8:	06000033 			; <UNDEFINED> instruction: 0x06000033
    d6fc:	0000268c 	andeq	r2, r0, ip, lsl #13
    d700:	008c3f01 	addeq	r3, ip, r1, lsl #30
    d704:	33f40000 	mvnscc	r0, #0
    d708:	4a070000 	bmi	1cd710 <__ccfg+0x1ad768>
    d70c:	01000026 	tsteq	r0, r6, lsr #32
    d710:	00008140 	andeq	r8, r0, r0, asr #2
    d714:	00510100 	subseq	r0, r1, r0, lsl #2
    d718:	00014300 	andeq	r4, r1, r0, lsl #6
    d71c:	26000400 	strcs	r0, [r0], -r0, lsl #8
    d720:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    d724:	0024f701 	eoreq	pc, r4, r1, lsl #14
    d728:	274c0100 	strbcs	r0, [ip, -r0, lsl #2]
    d72c:	25be0000 	ldrcs	r0, [lr, #0]!
    d730:	0fa80000 	svceq	0x00a80000
    d734:	00000000 	andeq	r0, r0, r0
    d738:	6c6f0000 	stclvs	0, cr0, [pc], #-0	; d740 <__exidx_end+0x8814>
    d73c:	01020000 	mrseq	r0, (UNDEF: 2)
    d740:	0008da06 	andeq	sp, r8, r6, lsl #20
    d744:	08010200 	stmdaeq	r1, {r9}
    d748:	000008d8 	ldrdeq	r0, [r0], -r8
    d74c:	9f050202 	svcls	0x00050202
    d750:	02000007 	andeq	r0, r0, #7
    d754:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    d758:	04020000 	streq	r0, [r2], #-0
    d75c:	0005e905 	andeq	lr, r5, r5, lsl #18
    d760:	08ef0300 	stmiaeq	pc!, {r8, r9}^	; <UNPREDICTABLE>
    d764:	41020000 	mrsmi	r0, (UNDEF: 2)
    d768:	00000053 	andeq	r0, r0, r3, asr r0
    d76c:	93070402 	movwls	r0, #29698	; 0x7402
    d770:	02000003 	andeq	r0, r0, #3
    d774:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    d778:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
    d77c:	02000026 	andeq	r0, r0, #38	; 0x26
    d780:	00006c5b 	andeq	r6, r0, fp, asr ip
    d784:	07080200 	streq	r0, [r8, -r0, lsl #4]
    d788:	0000038e 	andeq	r0, r0, lr, lsl #7
    d78c:	69050404 	stmdbvs	r5, {r2, sl}
    d790:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    d794:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
    d798:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    d79c:	03000008 	movweq	r0, #8
    d7a0:	00004820 	andeq	r4, r0, r0, lsr #16
    d7a4:	26f80300 	ldrbtcs	r0, [r8], r0, lsl #6
    d7a8:	26030000 	strcs	r0, [r3], -r0
    d7ac:	00000061 	andeq	r0, r0, r1, rrx
    d7b0:	0026c105 	eoreq	ip, r6, r5, lsl #2
    d7b4:	03450400 	movteq	r0, #21504	; 0x5400
    d7b8:	00000081 	andeq	r0, r0, r1, lsl #1
    d7bc:	00003070 	andeq	r3, r0, r0, ror r0
    d7c0:	00000020 	andeq	r0, r0, r0, lsr #32
    d7c4:	00dd9c01 	sbcseq	r9, sp, r1, lsl #24
    d7c8:	b2060000 	andlt	r0, r6, #0
    d7cc:	01000026 	tsteq	r0, r6, lsr #32
    d7d0:	00008140 	andeq	r8, r0, r0, asr #2
    d7d4:	00342900 	eorseq	r2, r4, r0, lsl #18
    d7d8:	27010600 	strcs	r0, [r1, -r0, lsl #12]
    d7dc:	41010000 	mrsmi	r0, (UNDEF: 1)
    d7e0:	00000081 	andeq	r0, r0, r1, lsl #1
    d7e4:	0000343c 	andeq	r3, r0, ip, lsr r4
    d7e8:	0026e407 	eoreq	lr, r6, r7, lsl #8
    d7ec:	81420100 	mrshi	r0, (UNDEF: 82)
    d7f0:	01000000 	mrseq	r0, (UNDEF: 0)
    d7f4:	13050052 	movwne	r0, #20562	; 0x5052
    d7f8:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    d7fc:	008c0353 	addeq	r0, ip, r3, asr r3
    d800:	30900000 	addscc	r0, r0, r0
    d804:	00180000 	andseq	r0, r8, r0
    d808:	9c010000 	stcls	0, cr0, [r1], {-0}
    d80c:	0000012f 	andeq	r0, r0, pc, lsr #2
    d810:	59010808 	stmdbpl	r1, {r3, fp}
    d814:	00000116 	andeq	r0, r0, r6, lsl r1
    d818:	0026a609 	eoreq	sl, r6, r9, lsl #12
    d81c:	8c5a0100 	ldfhie	f0, [sl], {-0}
    d820:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    d824:	0000273f 	andeq	r2, r0, pc, lsr r7
    d828:	012f5b01 			; <UNDEFINED> instruction: 0x012f5b01
    d82c:	0a000000 	beq	d834 <__exidx_end+0x8908>
    d830:	00002734 	andeq	r2, r0, r4, lsr r7
    d834:	00f75c01 	rscseq	r5, r7, r1, lsl #24
    d838:	e4070000 	str	r0, [r7], #-0
    d83c:	01000026 	tsteq	r0, r6, lsr #32
    d840:	0000815d 	andeq	r8, r0, sp, asr r1
    d844:	00510100 	subseq	r0, r1, r0, lsl #2
    d848:	0000810b 	andeq	r8, r0, fp, lsl #2
    d84c:	00013f00 	andeq	r3, r1, r0, lsl #30
    d850:	013f0c00 	teqeq	pc, r0, lsl #24
    d854:	00010000 	andeq	r0, r1, r0
    d858:	6b070402 	blvs	1ce868 <__ccfg+0x1ae8c0>
    d85c:	00000027 	andeq	r0, r0, r7, lsr #32
    d860:	00000136 	andeq	r0, r0, r6, lsr r1
    d864:	30d00004 	sbcscc	r0, r0, r4
    d868:	01040000 	mrseq	r0, (UNDEF: 4)
    d86c:	000024f7 	strdeq	r2, [r0], -r7
    d870:	0027a901 	eoreq	sl, r7, r1, lsl #18
    d874:	0025be00 	eoreq	fp, r5, r0, lsl #28
    d878:	000fc000 	andeq	ip, pc, r0
    d87c:	00000000 	andeq	r0, r0, r0
    d880:	006e1c00 	rsbeq	r1, lr, r0, lsl #24
    d884:	06010200 	streq	r0, [r1], -r0, lsl #4
    d888:	000008da 	ldrdeq	r0, [r0], -sl
    d88c:	d8080102 	stmdale	r8, {r1, r8}
    d890:	02000008 	andeq	r0, r0, #8
    d894:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    d898:	02020000 	andeq	r0, r2, #0
    d89c:	0009a607 	andeq	sl, r9, r7, lsl #12
    d8a0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    d8a4:	000005e9 	andeq	r0, r0, r9, ror #11
    d8a8:	0008ef03 	andeq	lr, r8, r3, lsl #30
    d8ac:	53410200 	movtpl	r0, #4608	; 0x1200
    d8b0:	02000000 	andeq	r0, r0, #0
    d8b4:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
    d8b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d8bc:	0005e405 	andeq	lr, r5, r5, lsl #8
    d8c0:	07080200 	streq	r0, [r8, -r0, lsl #4]
    d8c4:	0000038e 	andeq	r0, r0, lr, lsl #7
    d8c8:	69050404 	stmdbvs	r5, {r2, sl}
    d8cc:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    d8d0:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
    d8d4:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    d8d8:	03000008 	movweq	r0, #8
    d8dc:	00004820 	andeq	r4, r0, r0, lsr #16
    d8e0:	24b10500 	ldrtcs	r0, [r1], #1280	; 0x500
    d8e4:	6a040000 	bvs	10d8ec <__ccfg+0xed944>
    d8e8:	00000076 	andeq	r0, r0, r6, ror r0
    d8ec:	000030a8 	andeq	r3, r0, r8, lsr #1
    d8f0:	00000008 	andeq	r0, r0, r8
    d8f4:	00a69c01 	adceq	r9, r6, r1, lsl #24
    d8f8:	97060000 	strls	r0, [r6, -r0]
    d8fc:	01000027 	tsteq	r0, r7, lsr #32
    d900:	00007677 	andeq	r7, r0, r7, ror r6
    d904:	c4050000 	strgt	r0, [r5], #-0
    d908:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    d90c:	00007678 	andeq	r7, r0, r8, ror r6
    d910:	00000000 	andeq	r0, r0, r0
    d914:	00000600 	andeq	r0, r0, r0, lsl #12
    d918:	cb9c0100 	blgt	fe70dd20 <_estack+0xde708d20>
    d91c:	06000000 	streq	r0, [r0], -r0
    d920:	00002797 	muleq	r0, r7, r7
    d924:	0076c201 	rsbseq	ip, r6, r1, lsl #4
    d928:	05000000 	streq	r0, [r0, #-0]
    d92c:	000024c0 	andeq	r2, r0, r0, asr #9
    d930:	00768404 	rsbseq	r8, r6, r4, lsl #8
    d934:	30b00000 	adcscc	r0, r0, r0
    d938:	00080000 	andeq	r0, r8, r0
    d93c:	9c010000 	stcls	0, cr0, [r1], {-0}
    d940:	000000f1 	strdeq	r0, [r0], -r1
    d944:	00279707 	eoreq	r9, r7, r7, lsl #14
    d948:	010f0100 	mrseq	r0, (UNDEF: 31)
    d94c:	00000076 	andeq	r0, r0, r6, ror r0
    d950:	27740800 	ldrbcs	r0, [r4, -r0, lsl #16]!
    d954:	5b040000 	blpl	10d95c <__ccfg+0xed9b4>
    d958:	00007601 	andeq	r7, r0, r1, lsl #12
    d95c:	00000000 	andeq	r0, r0, r0
    d960:	00000600 	andeq	r0, r0, r0, lsl #12
    d964:	189c0100 	ldmne	ip, {r8}
    d968:	07000001 	streq	r0, [r0, -r1]
    d96c:	00002797 	muleq	r0, r7, r7
    d970:	76015a01 	strvc	r5, [r1], -r1, lsl #20
    d974:	00000000 	andeq	r0, r0, r0
    d978:	00278809 	eoreq	r8, r7, r9, lsl #16
    d97c:	016c0400 	cmneq	ip, r0, lsl #8
    d980:	00000000 	andeq	r0, r0, r0
    d984:	00000008 	andeq	r0, r0, r8
    d988:	9f0a9c01 	svcls	0x000a9c01
    d98c:	01000027 	tsteq	r0, r7, lsr #32
    d990:	0076019e 			; <UNDEFINED> instruction: 0x0076019e
    d994:	50010000 	andpl	r0, r1, r0
    d998:	08bf0000 	ldmeq	pc!, {}	; <UNPREDICTABLE>
    d99c:	00040000 	andeq	r0, r4, r0
    d9a0:	00003180 	andeq	r3, r0, r0, lsl #3
    d9a4:	24f70104 	ldrbtcs	r0, [r7], #260	; 0x104
    d9a8:	f1010000 	setend	le
    d9ac:	be000028 	cdplt	0, 0, cr0, cr0, cr8, {1}
    d9b0:	08000025 	stmdaeq	r0, {r0, r2, r5}
    d9b4:	00000010 	andeq	r0, r0, r0, lsl r0
    d9b8:	bc000000 	stclt	0, cr0, [r0], {-0}
    d9bc:	0200006f 	andeq	r0, r0, #111	; 0x6f
    d9c0:	08da0601 	ldmeq	sl, {r0, r9, sl}^
    d9c4:	2f030000 	svccs	0x00030000
    d9c8:	03000008 	movweq	r0, #8
    d9cc:	0000371d 	andeq	r3, r0, sp, lsl r7
    d9d0:	08010200 	stmdaeq	r1, {r9}
    d9d4:	000008d8 	ldrdeq	r0, [r0], -r8
    d9d8:	002c9803 	eoreq	r9, ip, r3, lsl #16
    d9dc:	49290300 	stmdbmi	r9!, {r8, r9}
    d9e0:	02000000 	andeq	r0, r0, #0
    d9e4:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    d9e8:	cc030000 	stcgt	0, cr0, [r3], {-0}
    d9ec:	03000003 	movweq	r0, #3
    d9f0:	00005b2b 	andeq	r5, r0, fp, lsr #22
    d9f4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    d9f8:	000009a6 	andeq	r0, r0, r6, lsr #19
    d9fc:	00265703 	eoreq	r5, r6, r3, lsl #14
    da00:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; da08 <__exidx_end+0x8adc>
    da04:	02000000 	andeq	r0, r0, #0
    da08:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
    da0c:	ef030000 	svc	0x00030000
    da10:	03000008 	movweq	r0, #8
    da14:	00007f41 	andeq	r7, r0, r1, asr #30
    da18:	07040200 	streq	r0, [r4, -r0, lsl #4]
    da1c:	00000393 	muleq	r0, r3, r3
    da20:	e4050802 	str	r0, [r5], #-2050	; 0xfffff7fe
    da24:	02000005 	andeq	r0, r0, #5
    da28:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
    da2c:	04040000 	streq	r0, [r4], #-0
    da30:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    da34:	07040200 	streq	r0, [r4, -r0, lsl #4]
    da38:	00000398 	muleq	r0, r8, r3
    da3c:	00083103 	andeq	r3, r8, r3, lsl #2
    da40:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    da44:	03000000 	movweq	r0, #0
    da48:	00002c9a 	muleq	r0, sl, ip
    da4c:	003e1904 	eorseq	r1, lr, r4, lsl #18
    da50:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    da54:	04000003 	streq	r0, [r0], #-3
    da58:	0000501a 	andeq	r5, r0, sl, lsl r0
    da5c:	26590300 	ldrbcs	r0, [r9], -r0, lsl #6
    da60:	1f040000 	svcne	0x00040000
    da64:	00000062 	andeq	r0, r0, r2, rrx
    da68:	0008f103 	andeq	pc, r8, r3, lsl #2
    da6c:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    da70:	03000000 	movweq	r0, #0
    da74:	000024a0 	andeq	r2, r0, r0, lsr #9
    da78:	00e43305 	rsceq	r3, r4, r5, lsl #6
    da7c:	04050000 	streq	r0, [r5], #-0
    da80:	000000ea 	andeq	r0, r0, sl, ror #1
    da84:	f1040506 			; <UNDEFINED> instruction: 0xf1040506
    da88:	07000000 	streq	r0, [r0, -r0]
    da8c:	000000fc 	strdeq	r0, [r0], -ip
    da90:	0000a208 	andeq	sl, r0, r8, lsl #4
    da94:	c1030000 	mrsgt	r0, (UNDEF: 3)
    da98:	0600002b 	streq	r0, [r0], -fp, lsr #32
    da9c:	00010742 	andeq	r0, r1, r2, asr #14
    daa0:	0d040500 	cfstr32eq	mvfx0, [r4, #-0]
    daa4:	09000001 	stmdbeq	r0, {r0}
    daa8:	000000ce 	andeq	r0, r0, lr, asr #1
    daac:	00000126 	andeq	r0, r0, r6, lsr #2
    dab0:	00012608 	andeq	r2, r1, r8, lsl #12
    dab4:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    dab8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    dabc:	00000000 	andeq	r0, r0, r0
    dac0:	00a20405 	adceq	r0, r2, r5, lsl #8
    dac4:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    dac8:	0600002d 	streq	r0, [r0], -sp, lsr #32
    dacc:	00013746 	andeq	r3, r1, r6, asr #14
    dad0:	3d040500 	cfstr32cc	mvfx0, [r4, #-0]
    dad4:	0a000001 	beq	dae0 <__exidx_end+0x8bb4>
    dad8:	000000ce 	andeq	r0, r0, lr, asr #1
    dadc:	002d7203 	eoreq	r7, sp, r3, lsl #4
    dae0:	37480600 	strbcc	r0, [r8, -r0, lsl #12]
    dae4:	03000001 	movweq	r0, #1
    dae8:	00002a59 	andeq	r2, r0, r9, asr sl
    daec:	01584a06 	cmpeq	r8, r6, lsl #20
    daf0:	04050000 	streq	r0, [r5], #-0
    daf4:	0000015e 	andeq	r0, r0, lr, asr r1
    daf8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    dafc:	00016d00 	andeq	r6, r1, r0, lsl #26
    db00:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    db04:	03000000 	movweq	r0, #0
    db08:	00002968 	andeq	r2, r0, r8, ror #18
    db0c:	01374c06 	teqeq	r7, r6, lsl #24
    db10:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    db14:	06000028 	streq	r0, [r0], -r8, lsr #32
    db18:	0001074e 	andeq	r0, r1, lr, asr #14
    db1c:	29580300 	ldmdbcs	r8, {r8, r9}^
    db20:	51060000 	mrspl	r0, (UNDEF: 6)
    db24:	000000e4 	andeq	r0, r0, r4, ror #1
    db28:	0027ed03 	eoreq	lr, r7, r3, lsl #26
    db2c:	99530600 	ldmdbls	r3, {r9, sl}^
    db30:	05000001 	streq	r0, [r0, #-1]
    db34:	00019f04 	andeq	r9, r1, r4, lsl #30
    db38:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    db3c:	01b80000 			; <UNDEFINED> instruction: 0x01b80000
    db40:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    db44:	08000001 	stmdaeq	r0, {r0}
    db48:	000000b8 	strheq	r0, [r0], -r8
    db4c:	0000b808 	andeq	fp, r0, r8, lsl #16
    db50:	04050000 	streq	r0, [r5], #-0
    db54:	000000b8 	strheq	r0, [r0], -r8
    db58:	002bd703 	eoreq	sp, fp, r3, lsl #14
    db5c:	c9570600 	ldmdbgt	r7, {r9, sl}^
    db60:	05000001 	streq	r0, [r0, #-1]
    db64:	0001cf04 	andeq	ip, r1, r4, lsl #30
    db68:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    db6c:	01e30000 	mvneq	r0, r0
    db70:	e3080000 	movw	r0, #32768	; 0x8000
    db74:	08000001 	stmdaeq	r0, {r0}
    db78:	000000ce 	andeq	r0, r0, lr, asr #1
    db7c:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    db80:	03000000 	movweq	r0, #0
    db84:	000029cb 	andeq	r2, r0, fp, asr #19
    db88:	01c95a06 	biceq	r5, r9, r6, lsl #20
    db8c:	85030000 	strhi	r0, [r3, #-0]
    db90:	0600002a 	streq	r0, [r0], -sl, lsr #32
    db94:	0001c95d 	andeq	ip, r1, sp, asr r9
    db98:	27ff0300 	ldrbcs	r0, [pc, r0, lsl #6]!
    db9c:	60060000 	andvs	r0, r6, r0
    dba0:	000001c9 	andeq	r0, r0, r9, asr #3
    dba4:	002be503 	eoreq	lr, fp, r3, lsl #10
    dba8:	e4630600 	strbt	r0, [r3], #-1536	; 0xfffffa00
    dbac:	03000000 	movweq	r0, #0
    dbb0:	0000283d 	andeq	r2, r0, sp, lsr r8
    dbb4:	02206506 	eoreq	r6, r0, #25165824	; 0x1800000
    dbb8:	04050000 	streq	r0, [r5], #-0
    dbbc:	00000226 	andeq	r0, r0, r6, lsr #4
    dbc0:	00023107 	andeq	r3, r2, r7, lsl #2
    dbc4:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    dbc8:	03000000 	movweq	r0, #0
    dbcc:	00002d83 	andeq	r2, r0, r3, lsl #27
    dbd0:	02206706 	eoreq	r6, r0, #1572864	; 0x180000
    dbd4:	c7030000 	strgt	r0, [r3, -r0]
    dbd8:	0600002a 	streq	r0, [r0], -sl, lsr #32
    dbdc:	0000eb69 	andeq	lr, r0, r9, ror #22
    dbe0:	2d620300 	stclcs	3, cr0, [r2, #-0]
    dbe4:	6b060000 	blvs	18dbec <__ccfg+0x16dc44>
    dbe8:	000000eb 	andeq	r0, r0, fp, ror #1
    dbec:	002a9403 	eoreq	r9, sl, r3, lsl #8
    dbf0:	eb6d0600 	bl	1b4f3f8 <__ccfg+0x1b2f450>
    dbf4:	03000000 	movweq	r0, #0
    dbf8:	00002aa6 	andeq	r2, r0, r6, lsr #21
    dbfc:	00eb6f06 	rsceq	r6, fp, r6, lsl #30
    dc00:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    dc04:	03557a06 	cmpeq	r5, #24576	; 0x6000
    dc08:	6a0c0000 	bvs	30dc10 <__ccfg+0x2edc68>
    dc0c:	0600002a 	streq	r0, [r0], -sl, lsr #32
    dc10:	0000fc7c 	andeq	pc, r0, ip, ror ip	; <UNPREDICTABLE>
    dc14:	550c0000 	strpl	r0, [ip, #-0]
    dc18:	0600002d 	streq	r0, [r0], -sp, lsr #32
    dc1c:	00012c7d 	andeq	r2, r1, sp, ror ip
    dc20:	7b0c0400 	blvc	30ec28 <__ccfg+0x2eec80>
    dc24:	0600002a 	streq	r0, [r0], -sl, lsr #32
    dc28:	0001427e 	andeq	r4, r1, lr, ror r2
    dc2c:	740c0800 	strvc	r0, [ip], #-2048	; 0xfffff800
    dc30:	0600002c 	streq	r0, [r0], -ip, lsr #32
    dc34:	00014d7f 	andeq	r4, r1, pc, ror sp
    dc38:	860c0c00 	strhi	r0, [ip], -r0, lsl #24
    dc3c:	0600002c 	streq	r0, [r0], -ip, lsr #32
    dc40:	00016d80 	andeq	r6, r1, r0, lsl #27
    dc44:	790c1000 	stmdbvc	ip, {ip}
    dc48:	06000029 	streq	r0, [r0], -r9, lsr #32
    dc4c:	00017881 	andeq	r7, r1, r1, lsl #17
    dc50:	350c1400 	strcc	r1, [ip, #-1024]	; 0xfffffc00
    dc54:	06000029 	streq	r0, [r0], -r9, lsr #32
    dc58:	00018382 	andeq	r8, r1, r2, lsl #7
    dc5c:	700c1800 	andvc	r1, ip, r0, lsl #16
    dc60:	0600002a 	streq	r0, [r0], -sl, lsr #32
    dc64:	00018e83 	andeq	r8, r1, r3, lsl #29
    dc68:	ff0c1c00 			; <UNDEFINED> instruction: 0xff0c1c00
    dc6c:	0600002b 	streq	r0, [r0], -fp, lsr #32
    dc70:	0001be84 	andeq	fp, r1, r4, lsl #29
    dc74:	f70c2000 			; <UNDEFINED> instruction: 0xf70c2000
    dc78:	06000029 	streq	r0, [r0], -r9, lsr #32
    dc7c:	0001e985 	andeq	lr, r1, r5, lsl #19
    dc80:	4f0c2400 	svcmi	0x000c2400
    dc84:	0600002a 	streq	r0, [r0], -sl, lsr #32
    dc88:	0001f486 	andeq	pc, r1, r6, lsl #9
    dc8c:	b40c2800 	strlt	r2, [ip], #-2048	; 0xfffff800
    dc90:	0600002c 	streq	r0, [r0], -ip, lsr #32
    dc94:	0001ff87 	andeq	pc, r1, r7, lsl #31
    dc98:	940c2c00 	strls	r2, [ip], #-3072	; 0xfffff400
    dc9c:	06000029 	streq	r0, [r0], -r9, lsr #32
    dca0:	00021588 	andeq	r1, r2, r8, lsl #11
    dca4:	a20c3000 	andge	r3, ip, #0
    dca8:	0600002c 	streq	r0, [r0], -ip, lsr #32
    dcac:	00023189 	andeq	r3, r2, r9, lsl #3
    dcb0:	7e0c3400 	cfcpysvc	mvf3, mvf12
    dcb4:	06000028 	streq	r0, [r0], -r8, lsr #32
    dcb8:	00020a8a 	andeq	r0, r2, sl, lsl #21
    dcbc:	b60c3800 	strlt	r3, [ip], -r0, lsl #16
    dcc0:	0600002a 	streq	r0, [r0], -sl, lsr #32
    dcc4:	00023c8b 	andeq	r3, r2, fp, lsl #25
    dcc8:	550c3c00 	strpl	r3, [ip, #-3072]	; 0xfffff400
    dccc:	0600002c 	streq	r0, [r0], -ip, lsr #32
    dcd0:	0002478c 	andeq	r4, r2, ip, lsl #15
    dcd4:	d90c4000 	stmdble	ip, {lr}
    dcd8:	06000029 	streq	r0, [r0], -r9, lsr #32
    dcdc:	0002528d 	andeq	r5, r2, sp, lsl #5
    dce0:	2e0c4400 	cfcpyscs	mvf4, mvf12
    dce4:	06000028 	streq	r0, [r0], -r8, lsr #32
    dce8:	00025d8e 	andeq	r5, r2, lr, lsl #27
    dcec:	03004800 	movweq	r4, #2048	; 0x800
    dcf0:	00002b85 	andeq	r2, r0, r5, lsl #23
    dcf4:	02688f06 	rsbeq	r8, r8, #6, 30
    dcf8:	140b0000 	strne	r0, [fp], #-0
    dcfc:	03a55401 			; <UNDEFINED> instruction: 0x03a55401
    dd00:	d90c0000 	stmdble	ip, {}	; <UNPREDICTABLE>
    dd04:	01000028 	tsteq	r0, r8, lsr #32
    dd08:	0000ce55 	andeq	ip, r0, r5, asr lr
    dd0c:	4b0c0000 	blmi	30dd14 <__ccfg+0x2edd6c>
    dd10:	0100002b 	tsteq	r0, fp, lsr #32
    dd14:	0000ce56 	andeq	ip, r0, r6, asr lr
    dd18:	4e0c0400 	cfcpysmi	mvf0, mvf12
    dd1c:	01000028 	tsteq	r0, r8, lsr #32
    dd20:	0000ce57 	andeq	ip, r0, r7, asr lr
    dd24:	0c0c0800 	stceq	8, cr0, [ip], {-0}
    dd28:	01000029 	tsteq	r0, r9, lsr #32
    dd2c:	0000ce58 	andeq	ip, r0, r8, asr lr
    dd30:	910c0c00 	tstls	ip, r0, lsl #24
    dd34:	01000028 	tsteq	r0, r8, lsr #32
    dd38:	0000c359 	andeq	ip, r0, r9, asr r3
    dd3c:	03001000 	movweq	r1, #0
    dd40:	00002b76 	andeq	r2, r0, r6, ror fp
    dd44:	03605a01 	cmneq	r0, #4096	; 0x1000
    dd48:	d50d0000 	strle	r0, [sp, #-0]
    dd4c:	02000027 	andeq	r0, r0, #39	; 0x27
    dd50:	03d301f9 	bicseq	r0, r3, #1073741886	; 0x4000003e
    dd54:	a40e0000 	strge	r0, [lr], #-0
    dd58:	0100002b 	tsteq	r0, fp, lsr #32
    dd5c:	0000ce65 	andeq	ip, r0, r5, ror #28
    dd60:	28260e00 	stmdacs	r6!, {r9, sl, fp}
    dd64:	65010000 	strvs	r0, [r1, #-0]
    dd68:	000000ce 	andeq	r0, r0, lr, asr #1
    dd6c:	280e0f00 	stmdacs	lr, {r8, r9, sl, fp}
    dd70:	10020000 	andne	r0, r2, r0
    dd74:	0000ce01 	andeq	ip, r0, r1, lsl #28
    dd78:	03fb0100 	mvnseq	r0, #0, 2
    dd7c:	a40e0000 	strge	r0, [lr], #-0
    dd80:	0100002b 	tsteq	r0, fp, lsr #32
    dd84:	0000cea0 	andeq	ip, r0, r0, lsr #29
    dd88:	2c641000 	stclcs	0, cr1, [r4], #-0
    dd8c:	a2010000 	andge	r0, r1, #0
    dd90:	000000ce 	andeq	r0, r0, lr, asr #1
    dd94:	03b01100 	movseq	r1, #0, 2
    dd98:	30b80000 	adcscc	r0, r8, r0
    dd9c:	005c0000 	subseq	r0, ip, r0
    dda0:	9c010000 	stcls	0, cr0, [r1], {-0}
    dda4:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
    dda8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    ddac:	00344f00 	eorseq	r4, r4, r0, lsl #30
    ddb0:	03c71200 	biceq	r1, r7, #0, 4
    ddb4:	347b0000 	ldrbtcc	r0, [fp], #-0
    ddb8:	f2130000 	vhadd.s16	d0, d3, d0
    ddbc:	14000030 	strne	r0, [r0], #-48	; 0xffffffd0
    ddc0:	61000000 	mrsvs	r0, (UNDEF: 0)
    ddc4:	12000004 	andne	r0, r0, #4
    ddc8:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    ddcc:	000034a7 	andeq	r3, r0, r7, lsr #9
    ddd0:	0003c712 	andeq	ip, r3, r2, lsl r7
    ddd4:	0034ba00 	eorseq	fp, r4, r0, lsl #20
    ddd8:	31061400 	tstcc	r6, r0, lsl #8
    dddc:	74020000 	strvc	r0, [r2], #-0
    dde0:	53011500 	movwpl	r1, #5376	; 0x1500
    dde4:	01153201 	tsteq	r5, r1, lsl #4
    dde8:	153c0152 	ldrne	r0, [ip, #-338]!	; 0xfffffeae
    ddec:	30015101 	andcc	r5, r1, r1, lsl #2
    ddf0:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    ddf4:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    ddf8:	16000040 	strne	r0, [r0], -r0, asr #32
    ddfc:	000030d6 	ldrdeq	r3, [r0], -r6
    de00:	8d007602 	stchi	6, cr7, [r0, #-8]
    de04:	15000004 	strne	r0, [r0, #-4]
    de08:	30015301 	andcc	r5, r1, r1, lsl #6
    de0c:	01520115 	cmpeq	r2, r5, lsl r1
    de10:	51011531 	tstpl	r1, r1, lsr r5
    de14:	01153001 	tsteq	r5, r1
    de18:	000c0550 	andeq	r0, ip, r0, asr r5
    de1c:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    de20:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    de24:	14000074 	strne	r0, [r0], #-116	; 0xffffff8c
    de28:	000030ee 	andeq	r3, r0, lr, ror #1
    de2c:	15007602 	strne	r7, [r0, #-1538]	; 0xfffff9fe
    de30:	31015301 	tstcc	r1, r1, lsl #6
    de34:	01520115 	cmpeq	r2, r5, lsl r1
    de38:	51011532 	tstpl	r1, r2, lsr r5
    de3c:	01153001 	tsteq	r5, r1
    de40:	000c0550 	andeq	r0, ip, r0, asr r5
    de44:	15400ca0 	strbne	r0, [r0, #-3232]	; 0xfffff360
    de48:	02007d02 	andeq	r7, r0, #2, 26	; 0x80
    de4c:	00000074 	andeq	r0, r0, r4, ror r0
    de50:	0003d311 	andeq	sp, r3, r1, lsl r3
    de54:	00311400 	eorseq	r1, r1, r0, lsl #8
    de58:	00002c00 	andeq	r2, r0, r0, lsl #24
    de5c:	0d9c0100 	ldfeqs	f0, [ip]
    de60:	12000005 	andne	r0, r0, #5
    de64:	000003e4 	andeq	r0, r0, r4, ror #7
    de68:	000034db 	ldrdeq	r3, [r0], -fp
    de6c:	0003ef17 	andeq	lr, r3, r7, lsl pc
    de70:	18500100 	ldmdane	r0, {r8}^
    de74:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    de78:	000004f4 	strdeq	r0, [r0], -r4
    de7c:	0003e419 	andeq	lr, r3, r9, lsl r4
    de80:	f01a0400 			; <UNDEFINED> instruction: 0xf01a0400
    de84:	1b00000f 	blne	dec8 <__exidx_end+0x8f9c>
    de88:	000003ef 	andeq	r0, r0, pc, ror #7
    de8c:	34140000 	ldrcc	r0, [r4], #-0
    de90:	02000031 	andeq	r0, r0, #49	; 0x31
    de94:	01150074 	tsteq	r5, r4, ror r0
    de98:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    de9c:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    dea0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    dea4:	1c000040 	stcne	0, cr0, [r0], {64}	; 0x40
    dea8:	00002d3a 	andeq	r2, r0, sl, lsr sp
    deac:	ce018402 	cdpgt	4, 0, cr8, cr1, cr2, {0}
    deb0:	00000000 	andeq	r0, r0, r0
    deb4:	90000000 	andls	r0, r0, r0
    deb8:	01000000 	mrseq	r0, (UNDEF: 0)
    debc:	0005769c 	muleq	r5, ip, r6
    dec0:	2b901d00 	blcs	fe4152c8 <_estack+0xde4102c8>
    dec4:	c2010000 	andgt	r0, r1, #0
    dec8:	000000ce 	andeq	r0, r0, lr, asr #1
    decc:	000034fc 	strdeq	r3, [r0], -ip
    ded0:	002b031e 	eoreq	r0, fp, lr, lsl r3
    ded4:	cec40100 	polgts	f0, f4, f0
    ded8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    dedc:	1e000035 	mcrne	0, 0, r0, cr0, cr5, {1}
    dee0:	00002b1c 	andeq	r2, r0, ip, lsl fp
    dee4:	00c3c501 	sbceq	ip, r3, r1, lsl #10
    dee8:	353b0000 	ldrcc	r0, [fp, #-0]!
    deec:	9d1e0000 	ldcls	0, cr0, [lr, #-0]
    def0:	01000028 	tsteq	r0, r8, lsr #32
    def4:	0000cec6 	andeq	ip, r0, r6, asr #29
    def8:	00356200 	eorseq	r6, r5, r0, lsl #4
    defc:	00001f00 	andeq	r1, r0, r0, lsl #30
    df00:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    df04:	001f0000 	andseq	r0, pc, r0
    df08:	aa000000 	bge	df10 <__exidx_end+0x8fe4>
    df0c:	00000008 	andeq	r0, r0, r8
    df10:	00294120 	eoreq	r4, r9, r0, lsr #2
    df14:	01910200 	orrseq	r0, r1, r0, lsl #4
    df18:	00003140 	andeq	r3, r0, r0, asr #2
    df1c:	00000018 	andeq	r0, r0, r8, lsl r0
    df20:	05ae9c01 	streq	r9, [lr, #3073]!	; 0xc01
    df24:	4a210000 	bmi	84df2c <__ccfg+0x82df84>
    df28:	b0000031 	andlt	r0, r0, r1, lsr r0
    df2c:	a4000003 	strge	r0, [r0], #-3
    df30:	15000005 	strne	r0, [r0, #-5]
    df34:	31015101 	tstcc	r1, r1, lsl #2
    df38:	01500115 	cmpeq	r0, r5, lsl r1
    df3c:	4e1f0033 	mrcmi	0, 0, r0, cr15, cr3, {1}
    df40:	9e000031 	mcrls	0, 0, r0, cr0, cr1, {1}
    df44:	00000008 	andeq	r0, r0, r8
    df48:	002b5a22 	eoreq	r5, fp, r2, lsr #20
    df4c:	01220200 			; <UNDEFINED> instruction: 0x01220200
    df50:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    df54:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    df58:	0000115c 	andeq	r1, r0, ip, asr r1
    df5c:	002baf23 	eoreq	sl, fp, r3, lsr #30
    df60:	01400200 	mrseq	r0, (UNDEF: 96)
    df64:	285c1c03 	ldmdacs	ip, {r0, r1, sl, fp, ip}^
    df68:	a1020000 	mrsge	r0, (UNDEF: 2)
    df6c:	0005bb01 	andeq	fp, r5, r1, lsl #22
    df70:	00315800 	eorseq	r5, r1, r0, lsl #16
    df74:	00006000 	andeq	r6, r0, r0
    df78:	779c0100 	ldrvc	r0, [ip, r0, lsl #2]
    df7c:	24000006 	strcs	r0, [r0], #-6
    df80:	00002b3b 	andeq	r2, r0, fp, lsr fp
    df84:	ce010201 	cdpgt	2, 0, cr0, cr1, cr1, {0}
    df88:	b6000000 	strlt	r0, [r0], -r0
    df8c:	24000035 	strcs	r0, [r0], #-53	; 0xffffffcb
    df90:	00002c08 	andeq	r2, r0, r8, lsl #24
    df94:	ce010301 	cdpgt	3, 0, cr0, cr1, cr1, {0}
    df98:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    df9c:	25000035 	strcs	r0, [r0, #-53]	; 0xffffffcb
    dfa0:	000005ae 	andeq	r0, r0, lr, lsr #11
    dfa4:	00003164 	andeq	r3, r0, r4, ror #2
    dfa8:	00000010 	andeq	r0, r0, r0, lsl r0
    dfac:	3c010901 			; <UNDEFINED> instruction: 0x3c010901
    dfb0:	14000006 	strne	r0, [r0], #-6
    dfb4:	00003174 	andeq	r3, r0, r4, ror r1
    dfb8:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    dfbc:	30015301 	andcc	r5, r1, r1, lsl #6
    dfc0:	01520115 	cmpeq	r2, r5, lsl r1
    dfc4:	51011531 	tstpl	r1, r1, lsr r5
    dfc8:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    dfcc:	0c055001 	stceq	0, cr5, [r5], {1}
    dfd0:	400ca000 	andmi	sl, ip, r0
    dfd4:	c2250000 	eorgt	r0, r5, #0
    dfd8:	76000005 	strvc	r0, [r0], -r5
    dfdc:	08000031 	stmdaeq	r0, {r0, r4, r5}
    dfe0:	01000000 	mrseq	r0, (UNDEF: 0)
    dfe4:	065a010a 	ldrbeq	r0, [sl], -sl, lsl #2
    dfe8:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    dfec:	b5000031 	strlt	r0, [r0, #-49]	; 0xffffffcf
    dff0:	00000008 	andeq	r0, r0, r8
    dff4:	00316021 	eorseq	r6, r1, r1, lsr #32
    dff8:	0003d300 	andeq	sp, r3, r0, lsl #6
    dffc:	00066d00 	andeq	r6, r6, r0, lsl #26
    e000:	50011500 	andpl	r1, r1, r0, lsl #10
    e004:	1f003101 	svcne	0x00003101
    e008:	00003182 	andeq	r3, r0, r2, lsl #3
    e00c:	0000089e 	muleq	r0, lr, r8
    e010:	29a62000 	stmibcs	r6!, {sp}
    e014:	ae020000 	cdpge	0, 0, cr0, cr2, cr0, {0}
    e018:	0031b801 	eorseq	fp, r1, r1, lsl #16
    e01c:	00003400 	andeq	r3, r0, r0, lsl #8
    e020:	e99c0100 	ldmib	ip, {r8}
    e024:	25000006 	strcs	r0, [r0, #-6]
    e028:	000005c2 	andeq	r0, r0, r2, asr #11
    e02c:	000031ca 	andeq	r3, r0, sl, asr #3
    e030:	00000008 	andeq	r0, r0, r8
    e034:	ab012f01 	blge	59c40 <__ccfg+0x39c98>
    e038:	1f000006 	svcne	0x00000006
    e03c:	000031d2 	ldrdeq	r3, [r0], -r2
    e040:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    e044:	31c22100 	biccc	r2, r2, r0, lsl #2
    e048:	03b00000 	movseq	r0, #0
    e04c:	06c30000 	strbeq	r0, [r3], r0
    e050:	01150000 	tsteq	r5, r0
    e054:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    e058:	33015001 	movwcc	r5, #4097	; 0x1001
    e05c:	31c82100 	biccc	r2, r8, r0, lsl #2
    e060:	03d30000 	bicseq	r0, r3, #0
    e064:	06d60000 	ldrbeq	r0, [r6], r0
    e068:	01150000 	tsteq	r5, r0
    e06c:	00310150 	eorseq	r0, r1, r0, asr r1
    e070:	0031d61f 	eorseq	sp, r1, pc, lsl r6
    e074:	00089e00 	andeq	r9, r8, r0, lsl #28
    e078:	31de1f00 	bicscc	r1, lr, r0, lsl #30
    e07c:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    e080:	1c000000 	stcne	0, cr0, [r0], {-0}
    e084:	00002a00 	andeq	r2, r0, r0, lsl #20
    e088:	c301f202 	movwgt	pc, #4610	; 0x1202	; <UNPREDICTABLE>
    e08c:	00000000 	andeq	r0, r0, r0
    e090:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    e094:	01000000 	mrseq	r0, (UNDEF: 0)
    e098:	00079a9c 	muleq	r7, ip, sl
    e09c:	2bce2600 	blcs	ff3978a4 <_estack+0xdf3928a4>
    e0a0:	3c010000 	stccc	0, cr0, [r1], {-0}
    e0a4:	0000c301 	andeq	ip, r0, r1, lsl #6
    e0a8:	0035dc00 	eorseq	sp, r5, r0, lsl #24
    e0ac:	2b312700 	blcs	c57cb4 <__ccfg+0xc37d0c>
    e0b0:	3f010000 	svccc	0x00010000
    e0b4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    e0b8:	27510100 	ldrbcs	r0, [r1, -r0, lsl #2]
    e0bc:	00002d94 	muleq	r0, r4, sp
    e0c0:	c3014101 	movwgt	r4, #4353	; 0x1101
    e0c4:	05000000 	streq	r0, [r0, #-0]
    e0c8:	26400071 			; <UNDEFINED> instruction: 0x26400071
    e0cc:	28b0279f 	ldmcs	r0!, {r0, r1, r2, r3, r4, r7, r8, r9, sl, sp}
    e0d0:	43010000 	movwmi	r0, #4096	; 0x1000
    e0d4:	0000c301 	andeq	ip, r0, r1, lsl #6
    e0d8:	00710700 	rsbseq	r0, r1, r0, lsl #14
    e0dc:	26482440 	strbcs	r2, [r8], -r0, asr #8
    e0e0:	28b8279f 	ldmcs	r8!, {r0, r1, r2, r3, r4, r7, r8, r9, sl, sp}
    e0e4:	45010000 	strmi	r0, [r1, #-0]
    e0e8:	0000c301 	andeq	ip, r0, r1, lsl #6
    e0ec:	00710700 	rsbseq	r0, r1, r0, lsl #14
    e0f0:	26482448 	strbcs	r2, [r8], -r8, asr #8
    e0f4:	28c0249f 	stmiacs	r0, {r0, r1, r2, r3, r4, r7, sl, sp}^
    e0f8:	47010000 	strmi	r0, [r1, -r0]
    e0fc:	0000c301 	andeq	ip, r0, r1, lsl #6
    e100:	00360a00 	eorseq	r0, r6, r0, lsl #20
    e104:	291e2400 	ldmdbcs	lr, {sl, sp}
    e108:	56010000 	strpl	r0, [r1], -r0
    e10c:	0000c301 	andeq	ip, r0, r1, lsl #6
    e110:	00362300 	eorseq	r2, r6, r0, lsl #6
    e114:	2ad62400 	bcs	ff59711c <_estack+0xdf59211c>
    e118:	57010000 	strpl	r0, [r1, -r0]
    e11c:	0000c301 	andeq	ip, r0, r1, lsl #6
    e120:	00364600 	eorseq	r4, r6, r0, lsl #12
    e124:	00642800 	rsbeq	r2, r4, r0, lsl #16
    e128:	c3015801 	movwgt	r5, #6145	; 0x1801
    e12c:	6f000000 	svcvs	0x00000000
    e130:	00000036 	andeq	r0, r0, r6, lsr r0
    e134:	002c191c 	eoreq	r1, ip, ip, lsl r9
    e138:	020e0200 	andeq	r0, lr, #0, 4
    e13c:	000000ad 	andeq	r0, r0, sp, lsr #1
    e140:	00000000 	andeq	r0, r0, r0
    e144:	0000000c 	andeq	r0, r0, ip
    e148:	07d59c01 	ldrbeq	r9, [r5, r1, lsl #24]
    e14c:	ef260000 	svc	0x00260000
    e150:	0100002a 	tsteq	r0, sl, lsr #32
    e154:	00c30163 	sbceq	r0, r3, r3, ror #2
    e158:	36e90000 	strbtcc	r0, [r9], r0
    e15c:	c8240000 	stmdagt	r4!, {}	; <UNPREDICTABLE>
    e160:	0100002c 	tsteq	r0, ip, lsr #32
    e164:	00c30185 	sbceq	r0, r3, r5, lsl #3
    e168:	370a0000 	strcc	r0, [sl, -r0]
    e16c:	1c000000 	stcne	0, cr0, [r0], {-0}
    e170:	00002a2a 	andeq	r2, r0, sl, lsr #20
    e174:	ce01c202 	cdpgt	2, 0, cr12, cr1, cr2, {0}
    e178:	00000000 	andeq	r0, r0, r0
    e17c:	34000000 	strcc	r0, [r0], #-0
    e180:	01000000 	mrseq	r0, (UNDEF: 0)
    e184:	0008429c 	muleq	r8, ip, r2
    e188:	2d1b2400 	cfldrscs	mvf2, [fp, #-0]
    e18c:	92010000 	andls	r0, r1, #0
    e190:	0000ce01 	andeq	ip, r0, r1, lsl #28
    e194:	00374a00 	eorseq	r4, r7, r0, lsl #20
    e198:	1ae02400 	bne	ff8171a0 <_estack+0xdf8121a0>
    e19c:	93010000 	movwls	r0, #4096	; 0x1000
    e1a0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    e1a4:	00376c00 	eorseq	r6, r7, r0, lsl #24
    e1a8:	29ed2400 	stmibcs	sp!, {sl, sp}^
    e1ac:	94010000 	strls	r0, [r1], #-0
    e1b0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    e1b4:	00377f00 	eorseq	r7, r7, r0, lsl #30
    e1b8:	298b2400 	stmibcs	fp, {sl, sp}
    e1bc:	95010000 	strls	r0, [r1, #-0]
    e1c0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    e1c4:	0037a200 	eorseq	sl, r7, r0, lsl #4
    e1c8:	00001f00 	andeq	r1, r0, r0, lsl #30
    e1cc:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    e1d0:	001f0000 	andseq	r0, pc, r0
    e1d4:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    e1d8:	00000008 	andeq	r0, r0, r8
    e1dc:	002ce71c 	eoreq	lr, ip, ip, lsl r7
    e1e0:	01d30200 	bicseq	r0, r3, r0, lsl #4
    e1e4:	000000ce 	andeq	r0, r0, lr, asr #1
    e1e8:	00000000 	andeq	r0, r0, r0
    e1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    e1f0:	088d9c01 	stmeq	sp, {r0, sl, fp, ip, pc}
    e1f4:	6b240000 	blvs	90e1fc <__ccfg+0x8ee254>
    e1f8:	0100002b 	tsteq	r0, fp, lsr #32
    e1fc:	00ce01b7 	strheq	r0, [lr], #23
    e200:	37be0000 	ldrcc	r0, [lr, r0]!
    e204:	d9240000 	stmdble	r4!, {}	; <UNPREDICTABLE>
    e208:	0100002c 	tsteq	r0, ip, lsr #32
    e20c:	00ce01b8 	strheq	r0, [lr], #24
    e210:	37d10000 	ldrbcc	r0, [r1, r0]
    e214:	28240000 	stmdacs	r4!, {}	; <UNPREDICTABLE>
    e218:	01000029 	tsteq	r0, r9, lsr #32
    e21c:	00ce01b9 	strheq	r0, [lr], #25
    e220:	37ec0000 	strbcc	r0, [ip, r0]!
    e224:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    e228:	00002ae2 	andeq	r2, r0, r2, ror #21
    e22c:	03a55c01 			; <UNDEFINED> instruction: 0x03a55c01
    e230:	03050000 	movweq	r0, #20480	; 0x5000
    e234:	2000060c 	andcs	r0, r0, ip, lsl #12
    e238:	0026c12a 	eoreq	ip, r6, sl, lsr #2
    e23c:	03450700 	movteq	r0, #22272	; 0x5700
    e240:	000000ce 	andeq	r0, r0, lr, asr #1
    e244:	0026282b 	eoreq	r2, r6, fp, lsr #16
    e248:	c3aa0800 			; <UNDEFINED> instruction: 0xc3aa0800
    e24c:	2c000000 	stccs	0, cr0, [r0], {-0}
    e250:	000024cf 	andeq	r2, r0, pc, asr #9
    e254:	d9089906 	stmdble	r8, {r1, r2, r8, fp, ip, pc}
    e258:	00000000 	andeq	r0, r0, r0
    e25c:	000ab400 	andeq	fp, sl, r0, lsl #8
    e260:	dd000400 	cfstrsle	mvf0, [r0, #-0]
    e264:	04000033 	streq	r0, [r0], #-51	; 0xffffffcd
    e268:	0024f701 	eoreq	pc, r4, r1, lsl #14
    e26c:	2eb80100 	frdcse	f0, f0, f0
    e270:	25be0000 	ldrcs	r0, [lr, #0]!
    e274:	10600000 	rsbne	r0, r0, r0
    e278:	00000000 	andeq	r0, r0, r0
    e27c:	72960000 	addsvc	r0, r6, #0
    e280:	01020000 	mrseq	r0, (UNDEF: 2)
    e284:	0008da06 	andeq	sp, r8, r6, lsl #20
    e288:	082f0300 	stmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    e28c:	1d030000 	stcne	0, cr0, [r3, #-0]
    e290:	00000037 	andeq	r0, r0, r7, lsr r0
    e294:	d8080102 	stmdale	r8, {r1, r8}
    e298:	03000008 	movweq	r0, #8
    e29c:	00002c98 	muleq	r0, r8, ip
    e2a0:	00492903 	subeq	r2, r9, r3, lsl #18
    e2a4:	02020000 	andeq	r0, r2, #0
    e2a8:	00079f05 	andeq	r9, r7, r5, lsl #30
    e2ac:	03cc0300 	biceq	r0, ip, #0, 6
    e2b0:	2b030000 	blcs	ce2b8 <__ccfg+0xae310>
    e2b4:	0000005b 	andeq	r0, r0, fp, asr r0
    e2b8:	a6070202 	strge	r0, [r7], -r2, lsl #4
    e2bc:	03000009 	movweq	r0, #9
    e2c0:	00002657 	andeq	r2, r0, r7, asr r6
    e2c4:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    e2c8:	04020000 	streq	r0, [r2], #-0
    e2cc:	0005e905 	andeq	lr, r5, r5, lsl #18
    e2d0:	08ef0300 	stmiaeq	pc!, {r8, r9}^	; <UNPREDICTABLE>
    e2d4:	41030000 	mrsmi	r0, (UNDEF: 3)
    e2d8:	0000007f 	andeq	r0, r0, pc, ror r0
    e2dc:	93070402 	movwls	r0, #29698	; 0x7402
    e2e0:	02000003 	andeq	r0, r0, #3
    e2e4:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    e2e8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    e2ec:	00038e07 	andeq	r8, r3, r7, lsl #28
    e2f0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    e2f4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    e2f8:	98070402 	stmdals	r7, {r1, sl}
    e2fc:	03000003 	movweq	r0, #3
    e300:	00000831 	andeq	r0, r0, r1, lsr r8
    e304:	002c1404 	eoreq	r1, ip, r4, lsl #8
    e308:	9a030000 	bls	ce310 <__ccfg+0xae368>
    e30c:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    e310:	00003e19 	andeq	r3, r0, r9, lsl lr
    e314:	03ce0300 	biceq	r0, lr, #0, 6
    e318:	1a040000 	bne	10e320 <__ccfg+0xee378>
    e31c:	00000050 	andeq	r0, r0, r0, asr r0
    e320:	00265903 	eoreq	r5, r6, r3, lsl #18
    e324:	621f0400 	andsvs	r0, pc, #0, 8
    e328:	03000000 	movweq	r0, #0
    e32c:	000008f1 	strdeq	r0, [r0], -r1
    e330:	00742004 	rsbseq	r2, r4, r4
    e334:	c1030000 	mrsgt	r0, (UNDEF: 3)
    e338:	0500002d 	streq	r0, [r0, #-45]	; 0xffffffd3
    e33c:	00009bd4 	ldrdeq	r9, [r0], -r4
    e340:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e344:	0000276b 	andeq	r2, r0, fp, ror #14
    e348:	01020405 	tsteq	r2, r5, lsl #8
    e34c:	0008e108 	andeq	lr, r8, r8, lsl #2
    e350:	1fa20300 	svcne	0x00a20300
    e354:	3b060000 	blcc	18e35c <__ccfg+0x16e3b4>
    e358:	000000ce 	andeq	r0, r0, lr, asr #1
    e35c:	00a20406 	adceq	r0, r2, r6, lsl #8
    e360:	6a030000 	bvs	ce368 <__ccfg+0xae3c0>
    e364:	0700001d 	smladeq	r0, sp, r0, r0
    e368:	0001103c 	andeq	r1, r1, ip, lsr r0
    e36c:	20080700 	andcs	r0, r8, r0, lsl #14
    e370:	07100000 	ldreq	r0, [r0, -r0]
    e374:	0001656f 	andeq	r6, r1, pc, ror #10
    e378:	19e80800 	stmibne	r8!, {fp}^
    e37c:	70070000 	andvc	r0, r7, r0
    e380:	000000b8 	strheq	r0, [r0], -r8
    e384:	05930800 	ldreq	r0, [r3, #2048]	; 0x800
    e388:	71070000 	mrsvc	r0, (UNDEF: 7)
    e38c:	000000b8 	strheq	r0, [r0], -r8
    e390:	1d480802 	stclne	8, cr0, [r8, #-8]
    e394:	74070000 	strvc	r0, [r7], #-0
    e398:	0000026d 	andeq	r0, r0, sp, ror #4
    e39c:	1ae00804 	bne	ff8103b4 <_estack+0xdf80b3b4>
    e3a0:	75070000 	strvc	r0, [r7, #-0]
    e3a4:	000000f4 	strdeq	r0, [r0], -r4
    e3a8:	1d780808 	ldclne	8, cr0, [r8, #-32]!	; 0xffffffe0
    e3ac:	7d070000 	stcvc	0, cr0, [r7, #-0]
    e3b0:	00000201 	andeq	r0, r0, r1, lsl #4
    e3b4:	1cc2080c 	stclne	8, cr0, [r2], {12}
    e3b8:	81070000 	mrshi	r0, (UNDEF: 7)
    e3bc:	00000246 	andeq	r0, r0, r6, asr #4
    e3c0:	e903000d 	stmdb	r3, {r0, r2, r3}
    e3c4:	0700002e 	streq	r0, [r0, -lr, lsr #32]
    e3c8:	0001703e 	andeq	r7, r1, lr, lsr r0
    e3cc:	2ed30700 	cdpcs	7, 13, cr0, cr3, cr0, {0}
    e3d0:	07180000 	ldreq	r0, [r8, -r0]
    e3d4:	000201a5 	andeq	r0, r2, r5, lsr #3
    e3d8:	19e80800 	stmibne	r8!, {fp}^
    e3dc:	a6070000 	strge	r0, [r7], -r0
    e3e0:	000000b8 	strheq	r0, [r0], -r8
    e3e4:	05930800 	ldreq	r0, [r3, #2048]	; 0x800
    e3e8:	a7070000 	strge	r0, [r7, -r0]
    e3ec:	000000b8 	strheq	r0, [r0], -r8
    e3f0:	1d480802 	stclne	8, cr0, [r8, #-8]
    e3f4:	aa070000 	bge	1ce3fc <__ccfg+0x1ae454>
    e3f8:	0000026d 	andeq	r0, r0, sp, ror #4
    e3fc:	1ae00804 	bne	ff810414 <_estack+0xdf80b414>
    e400:	ab070000 	blge	1ce408 <__ccfg+0x1ae460>
    e404:	000000f4 	strdeq	r0, [r0], -r4
    e408:	1d780808 	ldclne	8, cr0, [r8, #-32]!	; 0xffffffe0
    e40c:	b3070000 	movwlt	r0, #28672	; 0x7000
    e410:	00000273 	andeq	r0, r0, r3, ror r2
    e414:	1cc2080c 	stclne	8, cr0, [r2], {12}
    e418:	b7070000 	strlt	r0, [r7, -r0]
    e41c:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    e420:	0040080d 	subeq	r0, r0, sp, lsl #16
    e424:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    e428:	000000a2 	andeq	r0, r0, r2, lsr #1
    e42c:	1e8d080e 	cdpne	8, 8, cr0, cr13, cr14, {0}
    e430:	bf070000 	svclt	0x00070000
    e434:	000000a2 	andeq	r0, r0, r2, lsr #1
    e438:	0f9f080f 	svceq	0x009f080f
    e43c:	d4070000 	strle	r0, [r7], #-0
    e440:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    e444:	1b610810 	blne	185048c <__ccfg+0x18304e4>
    e448:	d5070000 	strle	r0, [r7, #-0]
    e44c:	000000b8 	strheq	r0, [r0], -r8
    e450:	1f950812 	svcne	0x00950812
    e454:	d6070000 	strle	r0, [r7], -r0
    e458:	00000324 	andeq	r0, r0, r4, lsr #6
    e45c:	01090014 	tsteq	r9, r4, lsl r0
    e460:	02467607 	subeq	r7, r6, #7340032	; 0x700000
    e464:	3b0a0000 	blcc	28e46c <__ccfg+0x26e4c4>
    e468:	07000022 	streq	r0, [r0, -r2, lsr #32]
    e46c:	0000a277 	andeq	sl, r0, r7, ror r2
    e470:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    e474:	1bc90a00 	blne	ff250c7c <_estack+0xdf24bc7c>
    e478:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    e47c:	000000a2 	andeq	r0, r0, r2, lsr #1
    e480:	00030101 	andeq	r0, r3, r1, lsl #2
    e484:	001c890a 	andseq	r8, ip, sl, lsl #18
    e488:	a27a0700 	rsbsge	r0, sl, #0, 14
    e48c:	01000000 	mrseq	r0, (UNDEF: 0)
    e490:	0a000102 	beq	e8a0 <__exidx_end+0x9974>
    e494:	00001a57 	andeq	r1, r0, r7, asr sl
    e498:	00a27b07 	adceq	r7, r2, r7, lsl #22
    e49c:	01010000 	mrseq	r0, (UNDEF: 1)
    e4a0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    e4a4:	6d7e0701 	ldclvs	7, cr0, [lr, #-4]!
    e4a8:	0a000002 	beq	e4b8 <__exidx_end+0x958c>
    e4ac:	000020a5 	andeq	r2, r0, r5, lsr #1
    e4b0:	00a27f07 	adceq	r7, r2, r7, lsl #30
    e4b4:	04010000 	streq	r0, [r1], #-0
    e4b8:	010a0004 	tsteq	sl, r4
    e4bc:	07000022 	streq	r0, [r0, -r2, lsr #32]
    e4c0:	0000a280 	andeq	sl, r0, r0, lsl #5
    e4c4:	00040100 	andeq	r0, r4, r0, lsl #2
    e4c8:	04060000 	streq	r0, [r6], #-0
    e4cc:	00000105 	andeq	r0, r0, r5, lsl #2
    e4d0:	ac070109 	stfges	f0, [r7], {9}
    e4d4:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    e4d8:	00223b0a 	eoreq	r3, r2, sl, lsl #22
    e4dc:	a2ad0700 	adcge	r0, sp, #0, 14
    e4e0:	01000000 	mrseq	r0, (UNDEF: 0)
    e4e4:	0a000404 	beq	f4fc <__exidx_end+0xa5d0>
    e4e8:	00001bc9 	andeq	r1, r0, r9, asr #23
    e4ec:	00a2ae07 	adceq	sl, r2, r7, lsl #28
    e4f0:	01010000 	mrseq	r0, (UNDEF: 1)
    e4f4:	890a0003 	stmdbhi	sl, {r0, r1}
    e4f8:	0700001c 	smladeq	r0, ip, r0, r0
    e4fc:	0000a2b0 			; <UNDEFINED> instruction: 0x0000a2b0
    e500:	01020100 	mrseq	r0, (UNDEF: 18)
    e504:	1a570a00 	bne	15d0d0c <__ccfg+0x15b0d64>
    e508:	b1070000 	mrslt	r0, (UNDEF: 7)
    e50c:	000000a2 	andeq	r0, r0, r2, lsr #1
    e510:	00000101 	andeq	r0, r0, r1, lsl #2
    e514:	07010900 	streq	r0, [r1, -r0, lsl #18]
    e518:	0002dfb4 			; <UNDEFINED> instruction: 0x0002dfb4
    e51c:	20a50a00 	adccs	r0, r5, r0, lsl #20
    e520:	b5070000 	strlt	r0, [r7, #-0]
    e524:	000000a2 	andeq	r0, r0, r2, lsr #1
    e528:	00040401 	andeq	r0, r4, r1, lsl #8
    e52c:	0022010a 	eoreq	r0, r2, sl, lsl #2
    e530:	a2b60700 	adcsge	r0, r6, #0, 14
    e534:	01000000 	mrseq	r0, (UNDEF: 0)
    e538:	00000004 	andeq	r0, r0, r4
    e53c:	c2070209 	andgt	r0, r7, #-1879048192	; 0x90000000
    e540:	00000324 	andeq	r0, r0, r4, lsr #6
    e544:	001c7c0a 	andseq	r7, ip, sl, lsl #24
    e548:	b8c30700 	stmialt	r3, {r8, r9, sl}^
    e54c:	02000000 	andeq	r0, r0, #0
    e550:	0a000d03 	beq	11964 <__exidx_end+0xca38>
    e554:	00001c1b 	andeq	r1, r0, fp, lsl ip
    e558:	00b8c907 	adcseq	ip, r8, r7, lsl #18
    e55c:	01020000 	mrseq	r0, (UNDEF: 2)
    e560:	bb0a000c 	bllt	28e598 <__ccfg+0x26e5f0>
    e564:	0700001b 	smladeq	r0, fp, r0, r0
    e568:	0000b8cb 	andeq	fp, r0, fp, asr #17
    e56c:	06060200 	streq	r0, [r6], -r0, lsl #4
    e570:	1eb90a00 	vmovne.f32	s0, #144	; 0xc0800000 -4.0
    e574:	d2070000 	andle	r0, r7, #0
    e578:	000000b8 	strheq	r0, [r0], -r8
    e57c:	00050102 	andeq	r0, r5, r2, lsl #2
    e580:	ce040600 	cfmadd32gt	mvax0, mvfx0, mvfx4, mvfx0
    e584:	03000000 	movweq	r0, #0
    e588:	00002df6 	strdeq	r2, [r0], -r6
    e58c:	03354208 	teqeq	r5, #8, 4	; 0x80000000
    e590:	860b0000 	strhi	r0, [fp], -r0
    e594:	2000002e 	andcs	r0, r0, lr, lsr #32
    e598:	f901c108 			; <UNDEFINED> instruction: 0xf901c108
    e59c:	0c000003 	stceq	0, cr0, [r0], {3}
    e5a0:	000019e8 	andeq	r1, r0, r8, ror #19
    e5a4:	b801c208 	stmdalt	r1, {r3, r9, lr, pc}
    e5a8:	00000000 	andeq	r0, r0, r0
    e5ac:	0005930c 	andeq	r9, r5, ip, lsl #6
    e5b0:	01c30800 	biceq	r0, r3, r0, lsl #16
    e5b4:	000000b8 	strheq	r0, [r0], -r8
    e5b8:	1d480c02 	stclne	12, cr0, [r8, #-8]
    e5bc:	c6080000 	strgt	r0, [r8], -r0
    e5c0:	00026d01 	andeq	r6, r2, r1, lsl #26
    e5c4:	e00c0400 	and	r0, ip, r0, lsl #8
    e5c8:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    e5cc:	00f401c7 	rscseq	r0, r4, r7, asr #3
    e5d0:	0c080000 	stceq	0, cr0, [r8], {-0}
    e5d4:	00001d78 	andeq	r1, r0, r8, ror sp
    e5d8:	ef01cf08 	svc	0x0001cf08
    e5dc:	0c000004 	stceq	0, cr0, [r0], {4}
    e5e0:	001cc20c 	andseq	ip, ip, ip, lsl #4
    e5e4:	01d30800 	bicseq	r0, r3, r0, lsl #16
    e5e8:	00000539 	andeq	r0, r0, r9, lsr r5
    e5ec:	19dd0c0d 	ldmibne	sp, {r0, r2, r3, sl, fp}^
    e5f0:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    e5f4:	00056301 	andeq	r6, r5, r1, lsl #6
    e5f8:	310c0e00 	tstcc	ip, r0, lsl #28
    e5fc:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e600:	058d01de 	streq	r0, [sp, #478]	; 0x1de
    e604:	0c100000 	ldceq	0, cr0, [r0], {-0}
    e608:	00001b69 	andeq	r1, r0, r9, ror #22
    e60c:	a201df08 	andge	sp, r1, #8, 30
    e610:	14000000 	strne	r0, [r0], #-0
    e614:	001dba0c 	andseq	fp, sp, ip, lsl #20
    e618:	01e70800 	mvneq	r0, r0, lsl #16
    e61c:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    e620:	1ad50c15 	bne	ff55167c <_estack+0xdf54c67c>
    e624:	fb080000 	blx	20e62e <__ccfg+0x1ee686>
    e628:	0005e101 	andeq	lr, r5, r1, lsl #2
    e62c:	9f0c1600 	svcls	0x000c1600
    e630:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    e634:	063b020e 	ldrteq	r0, [fp], -lr, lsl #4
    e638:	0c180000 	ldceq	0, cr0, [r8], {-0}
    e63c:	00001b61 	andeq	r1, r0, r1, ror #22
    e640:	b8020f08 	stmdalt	r2, {r3, r8, r9, sl, fp}
    e644:	1a000000 	bne	e64c <__exidx_end+0x9720>
    e648:	001f950c 	andseq	r9, pc, ip, lsl #10
    e64c:	02100800 	andseq	r0, r0, #0, 16
    e650:	00000324 	andeq	r0, r0, r4, lsr #6
    e654:	3503001c 	strcc	r0, [r3, #-28]	; 0xffffffe4
    e658:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    e65c:	00040443 	andeq	r0, r4, r3, asr #8
    e660:	1f160b00 	svcne	0x00160b00
    e664:	08280000 	stmdaeq	r8!, {}	; <UNPREDICTABLE>
    e668:	04ef021a 	strbteq	r0, [pc], #538	; e670 <__exidx_end+0x9744>
    e66c:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    e670:	08000019 	stmdaeq	r0, {r0, r3, r4}
    e674:	00b8021b 	adcseq	r0, r8, fp, lsl r2
    e678:	0c000000 	stceq	0, cr0, [r0], {-0}
    e67c:	00000593 	muleq	r0, r3, r5
    e680:	b8021d08 	stmdalt	r2, {r3, r8, sl, fp, ip}
    e684:	02000000 	andeq	r0, r0, #0
    e688:	001d480c 	andseq	r4, sp, ip, lsl #16
    e68c:	02200800 	eoreq	r0, r0, #0, 16
    e690:	0000026d 	andeq	r0, r0, sp, ror #4
    e694:	1ae00c04 	bne	ff8116ac <_estack+0xdf80c6ac>
    e698:	21080000 	mrscs	r0, (UNDEF: 8)
    e69c:	0000f402 	andeq	pc, r0, r2, lsl #8
    e6a0:	780c0800 	stmdavc	ip, {fp}
    e6a4:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e6a8:	06850229 	streq	r0, [r5], r9, lsr #4
    e6ac:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    e6b0:	00001cc2 	andeq	r1, r0, r2, asr #25
    e6b4:	cf022d08 	svcgt	0x00022d08
    e6b8:	0d000006 	stceq	0, cr0, [r0, #-24]	; 0xffffffe8
    e6bc:	0019dd0c 	andseq	sp, r9, ip, lsl #26
    e6c0:	02330800 	eorseq	r0, r3, #0, 16
    e6c4:	000006f9 	strdeq	r0, [r0], -r9
    e6c8:	1d310c0e 	ldcne	12, cr0, [r1, #-56]!	; 0xffffffc8
    e6cc:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    e6d0:	00072302 	andeq	r2, r7, r2, lsl #6
    e6d4:	690c1000 	stmdbvs	ip, {ip}
    e6d8:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e6dc:	00a20239 	adceq	r0, r2, r9, lsr r2
    e6e0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    e6e4:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
    e6e8:	4d024108 	stfmis	f4, [r2, #-32]	; 0xffffffe0
    e6ec:	15000007 	strne	r0, [r0, #-7]
    e6f0:	001ad50c 	andseq	sp, sl, ip, lsl #10
    e6f4:	02550800 	subseq	r0, r5, #0, 16
    e6f8:	00000777 	andeq	r0, r0, r7, ror r7
    e6fc:	0f9f0c16 	svceq	0x009f0c16
    e700:	68080000 	stmdavs	r8, {}	; <UNPREDICTABLE>
    e704:	0007d102 	andeq	sp, r7, r2, lsl #2
    e708:	610c1800 	tstvs	ip, r0, lsl #16
    e70c:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e710:	00b80269 	adcseq	r0, r8, r9, ror #4
    e714:	0c1a0000 	ldceq	0, cr0, [sl], {-0}
    e718:	00001f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    e71c:	24026a08 	strcs	r6, [r2], #-2568	; 0xfffff5f8
    e720:	1c000003 	stcne	0, cr0, [r0], {3}
    e724:	001a1a0c 	andseq	r1, sl, ip, lsl #20
    e728:	026c0800 	rsbeq	r0, ip, #0, 16
    e72c:	000000b8 	strheq	r0, [r0], -r8
    e730:	1d500c20 	ldclne	12, cr0, [r0, #-128]	; 0xffffff80
    e734:	70080000 	andvc	r0, r8, r0
    e738:	0000ad02 	andeq	sl, r0, r2, lsl #26
    e73c:	8d0c2200 	sfmhi	f2, 4, [ip, #-0]
    e740:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    e744:	00a20273 	adceq	r0, r2, r3, ror r2
    e748:	00240000 	eoreq	r0, r4, r0
    e74c:	c808010d 	stmdagt	r8, {r0, r2, r3, r8}
    e750:	00053901 	andeq	r3, r5, r1, lsl #18
    e754:	223b0e00 	eorscs	r0, fp, #0, 28
    e758:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    e75c:	0000a201 	andeq	sl, r0, r1, lsl #4
    e760:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    e764:	1bc90e00 	blne	ff251f6c <_estack+0xdf24cf6c>
    e768:	ca080000 	bgt	20e770 <__ccfg+0x1ee7c8>
    e76c:	0000a201 	andeq	sl, r0, r1, lsl #4
    e770:	03010100 	movweq	r0, #4352	; 0x1100
    e774:	1c890e00 	stcne	14, cr0, [r9], {0}
    e778:	cc080000 	stcgt	0, cr0, [r8], {-0}
    e77c:	0000a201 	andeq	sl, r0, r1, lsl #4
    e780:	01020100 	mrseq	r0, (UNDEF: 18)
    e784:	1a570e00 	bne	15d1f8c <__ccfg+0x15b1fe4>
    e788:	cd080000 	stcgt	0, cr0, [r8, #-0]
    e78c:	0000a201 	andeq	sl, r0, r1, lsl #4
    e790:	00010100 	andeq	r0, r1, r0, lsl #2
    e794:	010d0000 	mrseq	r0, (UNDEF: 13)
    e798:	6301d008 	movwvs	sp, #4104	; 0x1008
    e79c:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    e7a0:	000020a5 	andeq	r2, r0, r5, lsr #1
    e7a4:	a201d108 	andge	sp, r1, #8, 2
    e7a8:	01000000 	mrseq	r0, (UNDEF: 0)
    e7ac:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    e7b0:	00002201 	andeq	r2, r0, r1, lsl #4
    e7b4:	a201d208 	andge	sp, r1, #8, 4	; 0x80000000
    e7b8:	01000000 	mrseq	r0, (UNDEF: 0)
    e7bc:	00000004 	andeq	r0, r0, r4
    e7c0:	d408020d 	strle	r0, [r8], #-525	; 0xfffffdf3
    e7c4:	00058d01 	andeq	r8, r5, r1, lsl #26
    e7c8:	1ce10e00 	stclne	14, cr0, [r1]
    e7cc:	d5080000 	strle	r0, [r8, #-0]
    e7d0:	0000b801 	andeq	fp, r0, r1, lsl #16
    e7d4:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    e7d8:	21e40e00 	mvncs	r0, r0, lsl #28
    e7dc:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    e7e0:	0000b801 	andeq	fp, r0, r1, lsl #16
    e7e4:	000d0200 	andeq	r0, sp, r0, lsl #4
    e7e8:	040d0000 	streq	r0, [sp], #-0
    e7ec:	b701da08 	strlt	sp, [r1, -r8, lsl #20]
    e7f0:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    e7f4:	00001e75 	andeq	r1, r0, r5, ror lr
    e7f8:	ce01db08 	vmlagt.f64	d13, d1, d8
    e7fc:	04000000 	streq	r0, [r0], #-0
    e800:	0e001c04 	cdpeq	12, 0, cr1, cr0, cr4, {0}
    e804:	00001f85 	andeq	r1, r0, r5, lsl #31
    e808:	ce01dd08 	cdpgt	13, 0, cr13, cr1, cr8, {0}
    e80c:	04000000 	streq	r0, [r0], #-0
    e810:	00000315 	andeq	r0, r0, r5, lsl r3
    e814:	e008010d 	and	r0, r8, sp, lsl #2
    e818:	0005e101 	andeq	lr, r5, r1, lsl #2
    e81c:	20d90e00 	sbcscs	r0, r9, r0, lsl #28
    e820:	e1080000 	mrs	r0, (UNDEF: 8)
    e824:	0000a201 	andeq	sl, r0, r1, lsl #4
    e828:	02060100 	andeq	r0, r6, #0, 2
    e82c:	1aaf0e00 	bne	febd2034 <_estack+0xdebcd034>
    e830:	e3080000 	movw	r0, #32768	; 0x8000
    e834:	0000a201 	andeq	sl, r0, r1, lsl #4
    e838:	00020100 	andeq	r0, r2, r0, lsl #2
    e83c:	020d0000 	andeq	r0, sp, #0
    e840:	3b01e808 	blcc	88868 <__ccfg+0x688c0>
    e844:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    e848:	00001e7e 	andeq	r1, r0, lr, ror lr
    e84c:	b801e908 	stmdalt	r1, {r3, r8, fp, sp, lr, pc}
    e850:	02000000 	andeq	r0, r0, #0
    e854:	0e000a06 	vmlaeq.f32	s0, s0, s12
    e858:	00001d1b 	andeq	r1, r0, fp, lsl sp
    e85c:	b801ea08 	stmdalt	r1, {r3, r9, fp, sp, lr, pc}
    e860:	02000000 	andeq	r0, r0, #0
    e864:	0e000901 	vmlaeq.f16	s0, s0, s2	; <UNPREDICTABLE>
    e868:	00001ee6 	andeq	r1, r0, r6, ror #29
    e86c:	b801ec08 	stmdalt	r1, {r3, sl, fp, sp, lr, pc}
    e870:	02000000 	andeq	r0, r0, #0
    e874:	0e000801 	cdpeq	8, 0, cr0, cr0, cr1, {0}
    e878:	00001a97 	muleq	r0, r7, sl
    e87c:	b801ee08 	stmdalt	r1, {r3, r9, sl, fp, sp, lr, pc}
    e880:	02000000 	andeq	r0, r0, #0
    e884:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    e888:	00001a3a 	andeq	r1, r0, sl, lsr sl
    e88c:	b801f308 	stmdalt	r1, {r3, r8, r9, ip, sp, lr, pc}
    e890:	02000000 	andeq	r0, r0, #0
    e894:	00000003 	andeq	r0, r0, r3
    e898:	fc08020d 	stc2	2, cr0, [r8], {13}
    e89c:	00068501 	andeq	r8, r6, r1, lsl #10
    e8a0:	1c7c0e00 	ldclne	14, cr0, [ip], #-0
    e8a4:	fd080000 	stc2	0, cr0, [r8, #-0]
    e8a8:	0000b801 	andeq	fp, r0, r1, lsl #16
    e8ac:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    e8b0:	1c1b0e00 	ldcne	14, cr0, [fp], {-0}
    e8b4:	03080000 	movweq	r0, #32768	; 0x8000
    e8b8:	0000b802 	andeq	fp, r0, r2, lsl #16
    e8bc:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    e8c0:	1bbb0e00 	blne	feed20c8 <_estack+0xdeecd0c8>
    e8c4:	05080000 	streq	r0, [r8, #-0]
    e8c8:	0000b802 	andeq	fp, r0, r2, lsl #16
    e8cc:	06060200 	streq	r0, [r6], -r0, lsl #4
    e8d0:	1eb90e00 	cdpne	14, 11, cr0, cr9, cr0, {0}
    e8d4:	0c080000 	stceq	0, cr0, [r8], {-0}
    e8d8:	0000b802 	andeq	fp, r0, r2, lsl #16
    e8dc:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    e8e0:	010d0000 	mrseq	r0, (UNDEF: 13)
    e8e4:	cf022208 	svcgt	0x00022208
    e8e8:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    e8ec:	0000223b 	andeq	r2, r0, fp, lsr r2
    e8f0:	a2022308 	andge	r2, r2, #8, 6	; 0x20000000
    e8f4:	01000000 	mrseq	r0, (UNDEF: 0)
    e8f8:	0e000404 	cdpeq	4, 0, cr0, cr0, cr4, {0}
    e8fc:	00001bc9 	andeq	r1, r0, r9, asr #23
    e900:	a2022408 	andge	r2, r2, #8, 8	; 0x8000000
    e904:	01000000 	mrseq	r0, (UNDEF: 0)
    e908:	0e000301 	cdpeq	3, 0, cr0, cr0, cr1, {0}
    e90c:	00001c89 	andeq	r1, r0, r9, lsl #25
    e910:	a2022608 	andge	r2, r2, #8, 12	; 0x800000
    e914:	01000000 	mrseq	r0, (UNDEF: 0)
    e918:	0e000102 	adfeqs	f0, f0, f2
    e91c:	00001a57 	andeq	r1, r0, r7, asr sl
    e920:	a2022708 	andge	r2, r2, #8, 14	; 0x200000
    e924:	01000000 	mrseq	r0, (UNDEF: 0)
    e928:	00000001 	andeq	r0, r0, r1
    e92c:	2a08010d 	bcs	20ed68 <__ccfg+0x1eedc0>
    e930:	0006f902 	andeq	pc, r6, r2, lsl #18
    e934:	20a50e00 	adccs	r0, r5, r0, lsl #28
    e938:	2b080000 	blcs	20e940 <__ccfg+0x1ee998>
    e93c:	0000a202 	andeq	sl, r0, r2, lsl #4
    e940:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    e944:	22010e00 	andcs	r0, r1, #0, 28
    e948:	2c080000 	stccs	0, cr0, [r8], {-0}
    e94c:	0000a202 	andeq	sl, r0, r2, lsl #4
    e950:	00040100 	andeq	r0, r4, r0, lsl #2
    e954:	020d0000 	andeq	r0, sp, #0
    e958:	23022e08 	movwcs	r2, #11784	; 0x2e08
    e95c:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    e960:	00001ce1 	andeq	r1, r0, r1, ror #25
    e964:	b8022f08 	stmdalt	r2, {r3, r8, r9, sl, fp, sp}
    e968:	02000000 	andeq	r0, r0, #0
    e96c:	0e000d03 	cdpeq	13, 0, cr0, cr0, cr3, {0}
    e970:	000021e4 	andeq	r2, r0, r4, ror #3
    e974:	b8023208 	stmdalt	r2, {r3, r9, ip, sp}
    e978:	02000000 	andeq	r0, r0, #0
    e97c:	0000000d 	andeq	r0, r0, sp
    e980:	3408040d 	strcc	r0, [r8], #-1037	; 0xfffffbf3
    e984:	00074d02 	andeq	r4, r7, r2, lsl #26
    e988:	1e750e00 	cdpne	14, 7, cr0, cr5, cr0, {0}
    e98c:	35080000 	strcc	r0, [r8, #-0]
    e990:	0000ce02 	andeq	ip, r0, r2, lsl #28
    e994:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    e998:	1f850e00 	svcne	0x00850e00
    e99c:	37080000 	strcc	r0, [r8, -r0]
    e9a0:	0000ce02 	andeq	ip, r0, r2, lsl #28
    e9a4:	03150400 	tsteq	r5, #0, 8
    e9a8:	010d0000 	mrseq	r0, (UNDEF: 13)
    e9ac:	77023a08 	strvc	r3, [r2, -r8, lsl #20]
    e9b0:	0e000007 	cdpeq	0, 0, cr0, cr0, cr7, {0}
    e9b4:	000020d9 	ldrdeq	r2, [r0], -r9
    e9b8:	a2023b08 	andge	r3, r2, #8, 22	; 0x2000
    e9bc:	01000000 	mrseq	r0, (UNDEF: 0)
    e9c0:	0e000206 	cdpeq	2, 0, cr0, cr0, cr6, {0}
    e9c4:	00001aaf 	andeq	r1, r0, pc, lsr #21
    e9c8:	a2023d08 	andge	r3, r2, #8, 26	; 0x200
    e9cc:	01000000 	mrseq	r0, (UNDEF: 0)
    e9d0:	00000002 	andeq	r0, r0, r2
    e9d4:	4208020d 	andmi	r0, r8, #-805306368	; 0xd0000000
    e9d8:	0007d102 	andeq	sp, r7, r2, lsl #2
    e9dc:	1e7e0e00 	cdpne	14, 7, cr0, cr14, cr0, {0}
    e9e0:	43080000 	movwmi	r0, #32768	; 0x8000
    e9e4:	0000b802 	andeq	fp, r0, r2, lsl #16
    e9e8:	0a060200 	beq	18f1f0 <__ccfg+0x16f248>
    e9ec:	1d1b0e00 	ldcne	14, cr0, [fp, #-0]
    e9f0:	44080000 	strmi	r0, [r8], #-0
    e9f4:	0000b802 	andeq	fp, r0, r2, lsl #16
    e9f8:	09010200 	stmdbeq	r1, {r9}
    e9fc:	1ee60e00 	cdpne	14, 14, cr0, cr6, cr0, {0}
    ea00:	46080000 	strmi	r0, [r8], -r0
    ea04:	0000b802 	andeq	fp, r0, r2, lsl #16
    ea08:	08010200 	stmdaeq	r1, {r9}
    ea0c:	1a970e00 	bne	fe5d2214 <_estack+0xde5cd214>
    ea10:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
    ea14:	0000b802 	andeq	fp, r0, r2, lsl #16
    ea18:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    ea1c:	1a3a0e00 	bne	e92224 <__ccfg+0xe7227c>
    ea20:	4d080000 	stcmi	0, cr0, [r8, #-0]
    ea24:	0000b802 	andeq	fp, r0, r2, lsl #16
    ea28:	00030200 	andeq	r0, r3, r0, lsl #4
    ea2c:	020d0000 	andeq	r0, sp, #0
    ea30:	1b025608 	blne	a4258 <__ccfg+0x842b0>
    ea34:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    ea38:	00001c7c 	andeq	r1, r0, ip, ror ip
    ea3c:	b8025708 	stmdalt	r2, {r3, r8, r9, sl, ip, lr}
    ea40:	02000000 	andeq	r0, r0, #0
    ea44:	0e000d03 	cdpeq	13, 0, cr0, cr0, cr3, {0}
    ea48:	00001c1b 	andeq	r1, r0, fp, lsl ip
    ea4c:	b8025d08 	stmdalt	r2, {r3, r8, sl, fp, ip, lr}
    ea50:	02000000 	andeq	r0, r0, #0
    ea54:	0e000c01 	cdpeq	12, 0, cr0, cr0, cr1, {0}
    ea58:	00001bbb 			; <UNDEFINED> instruction: 0x00001bbb
    ea5c:	b8025f08 	stmdalt	r2, {r3, r8, r9, sl, fp, ip, lr}
    ea60:	02000000 	andeq	r0, r0, #0
    ea64:	0e000606 	cfmadd32eq	mvax0, mvfx0, mvfx0, mvfx6
    ea68:	00001eb9 			; <UNDEFINED> instruction: 0x00001eb9
    ea6c:	b8026608 	stmdalt	r2, {r3, r9, sl, sp, lr}
    ea70:	02000000 	andeq	r0, r0, #0
    ea74:	00000501 	andeq	r0, r0, r1, lsl #10
    ea78:	48021009 	stmdami	r2, {r0, r3, ip}
    ea7c:	00000854 	andeq	r0, r0, r4, asr r8
    ea80:	001c4108 	andseq	r4, ip, r8, lsl #2
    ea84:	ce490200 	cdpgt	2, 4, cr0, cr9, cr0, {0}
    ea88:	00000000 	andeq	r0, r0, r0
    ea8c:	001ba208 	andseq	sl, fp, r8, lsl #4
    ea90:	ce4a0200 	cdpgt	2, 4, cr0, cr10, cr0, {0}
    ea94:	04000000 	streq	r0, [r0], #-0
    ea98:	001fec08 	andseq	lr, pc, r8, lsl #24
    ea9c:	ce4b0200 	cdpgt	2, 4, cr0, cr11, cr0, {0}
    eaa0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    eaa4:	00214708 	eoreq	r4, r1, r8, lsl #14
    eaa8:	ce4c0200 	cdpgt	2, 4, cr0, cr12, cr0, {0}
    eaac:	0c000000 	stceq	0, cr0, [r0], {-0}
    eab0:	1a600300 	bne	180f6b8 <__ccfg+0x17ef710>
    eab4:	4d020000 	stcmi	0, cr0, [r2, #-0]
    eab8:	0000081b 	andeq	r0, r0, fp, lsl r8
    eabc:	002f3a0f 	eoreq	r3, pc, pc, lsl #20
    eac0:	013e0200 	teqeq	lr, r0, lsl #4
    eac4:	2d9c1003 	ldccs	0, cr1, [ip, #12]
    eac8:	14020000 	strne	r0, [r2], #-0
    eacc:	0000ce01 	andeq	ip, r0, r1, lsl #28
    ead0:	00000000 	andeq	r0, r0, r0
    ead4:	00001400 	andeq	r1, r0, r0, lsl #8
    ead8:	909c0100 	addsls	r0, ip, r0, lsl #2
    eadc:	11000008 	tstne	r0, r8
    eae0:	00002e54 	andeq	r2, r0, r4, asr lr
    eae4:	00ce6a01 	sbceq	r6, lr, r1, lsl #20
    eae8:	50010000 	andpl	r0, r1, r0
    eaec:	2f221000 	svccs	0x00221000
    eaf0:	4c020000 	stcmi	0, cr0, [r2], {-0}
    eaf4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    eaf8:	0031ec00 	eorseq	lr, r1, r0, lsl #24
    eafc:	00002800 	andeq	r2, r0, r0, lsl #16
    eb00:	d89c0100 	ldmle	ip, {r8}
    eb04:	12000008 	andne	r0, r0, #8
    eb08:	00704f70 	rsbseq	r4, r0, r0, ror pc
    eb0c:	00ce7a01 	sbceq	r7, lr, r1, lsl #20
    eb10:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
    eb14:	5f130000 	svcpl	0x00130000
    eb18:	f4000008 	vst4.8	{d0-d3}, [r0], r8
    eb1c:	04000031 	streq	r0, [r0], #-49	; 0xffffffcf
    eb20:	01000000 	mrseq	r0, (UNDEF: 0)
    eb24:	085f137e 	ldmdaeq	pc, {r1, r2, r3, r4, r5, r6, r8, r9, ip}^	; <UNPREDICTABLE>
    eb28:	32000000 	andcc	r0, r0, #0
    eb2c:	00060000 	andeq	r0, r6, r0
    eb30:	83010000 	movwhi	r0, #4096	; 0x1000
    eb34:	2e241400 	cdpcs	4, 2, cr1, cr4, cr0, {0}
    eb38:	54020000 	strpl	r0, [r2], #-0
    eb3c:	00321401 	eorseq	r1, r2, r1, lsl #8
    eb40:	00004c00 	andeq	r4, r0, r0, lsl #24
    eb44:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    eb48:	00002f51 	andeq	r2, r0, r1, asr pc
    eb4c:	60015c02 	andvs	r5, r1, r2, lsl #24
    eb50:	50000032 	andpl	r0, r0, r2, lsr r0
    eb54:	01000001 	tsteq	r0, r1
    eb58:	00092a9c 	muleq	r9, ip, sl
    eb5c:	2e4b1600 	cdpcs	6, 4, cr1, cr11, cr0, {0}
    eb60:	a4010000 	strge	r0, [r1], #-0
    eb64:	0000026d 	andeq	r0, r0, sp, ror #4
    eb68:	a1165001 	tstge	r6, r1
    eb6c:	0100002e 	tsteq	r0, lr, lsr #32
    eb70:	00092aa4 	andeq	r2, r9, r4, lsr #21
    eb74:	17510100 	ldrbne	r0, [r1, -r0, lsl #2]
    eb78:	00002f49 	andeq	r2, r0, r9, asr #30
    eb7c:	0094a601 	addseq	sl, r4, r1, lsl #12
    eb80:	38290000 	stmdacc	r9!, {}	; <UNPREDICTABLE>
    eb84:	06000000 	streq	r0, [r0], -r0
    eb88:	00085404 	andeq	r5, r8, r4, lsl #8
    eb8c:	2f131500 	svccs	0x00131500
    eb90:	6c020000 	stcvs	0, cr0, [r2], {-0}
    eb94:	0033b001 	eorseq	fp, r3, r1
    eb98:	00011800 	andeq	r1, r1, r0, lsl #16
    eb9c:	ac9c0100 	ldfges	f0, [ip], {0}
    eba0:	18000009 	stmdane	r0, {r0, r3}
    eba4:	00002e4b 	andeq	r2, r0, fp, asr #28
    eba8:	026df301 	rsbeq	pc, sp, #67108864	; 0x4000000
    ebac:	38470000 	stmdacc	r7, {}^	; <UNPREDICTABLE>
    ebb0:	49170000 	ldmdbmi	r7, {}	; <UNPREDICTABLE>
    ebb4:	0100002f 	tsteq	r0, pc, lsr #32
    ebb8:	0000c3f5 	strdeq	ip, [r0], -r5
    ebbc:	00386800 	eorseq	r6, r8, r0, lsl #16
    ebc0:	2f071700 	svccs	0x00071700
    ebc4:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    ebc8:	000000ce 	andeq	r0, r0, lr, asr #1
    ebcc:	000038b7 			; <UNDEFINED> instruction: 0x000038b7
    ebd0:	002db717 	eoreq	fp, sp, r7, lsl r7
    ebd4:	24f70100 	ldrbtcs	r0, [r7], #256	; 0x100
    ebd8:	01000003 	tsteq	r0, r3
    ebdc:	19000039 	stmdbne	r0, {r0, r3, r4, r5}
    ebe0:	00002dc8 	andeq	r2, r0, r8, asr #27
    ebe4:	00c3f801 	sbceq	pc, r3, r1, lsl #16
    ebe8:	a9170000 	ldmdbge	r7, {}	; <UNPREDICTABLE>
    ebec:	0100002e 	tsteq	r0, lr, lsr #32
    ebf0:	0000cef9 	strdeq	ip, [r0], -r9
    ebf4:	00394400 	eorseq	r4, r9, r0, lsl #8
    ebf8:	2e3c1700 	cdpcs	7, 3, cr1, cr12, cr0, {0}
    ebfc:	fa010000 	blx	4ec04 <__ccfg+0x2ec5c>
    ec00:	000000ce 	andeq	r0, r0, lr, asr #1
    ec04:	0000399c 	muleq	r0, ip, r9
    ec08:	2e111500 	cfmul32cs	mvfx1, mvfx1, mvfx0
    ec0c:	64020000 	strvs	r0, [r2], #-0
    ec10:	0034c801 	eorseq	ip, r4, r1, lsl #16
    ec14:	00002000 	andeq	r2, r0, r0
    ec18:	d39c0100 	orrsle	r0, ip, #0, 2
    ec1c:	1a000009 	bne	ec48 <__exidx_end+0x9d1c>
    ec20:	00002ea1 	andeq	r2, r0, r1, lsr #29
    ec24:	2a017701 	bcs	6c830 <__ccfg+0x4c888>
    ec28:	d2000009 	andle	r0, r0, #9
    ec2c:	00000039 	andeq	r0, r0, r9, lsr r0
    ec30:	002e6f15 	eoreq	r6, lr, r5, lsl pc
    ec34:	01740200 	cmneq	r4, r0, lsl #4
    ec38:	00000000 	andeq	r0, r0, r0
    ec3c:	00000060 	andeq	r0, r0, r0, rrx
    ec40:	0a379c01 	beq	df5c4c <__ccfg+0xdd5ca4>
    ec44:	251b0000 	ldrcs	r0, [fp, #-0]
    ec48:	01000021 	tsteq	r0, r1, lsr #32
    ec4c:	00ff0184 	rscseq	r0, pc, r4, lsl #3
    ec50:	03380000 	teqeq	r8, #0
    ec54:	dc1b2100 	ldfles	f2, [fp], {-0}
    ec58:	0100001b 	tsteq	r0, fp, lsl r0
    ec5c:	03240185 			; <UNDEFINED> instruction: 0x03240185
    ec60:	03bc0000 			; <UNDEFINED> instruction: 0x03bc0000
    ec64:	691c2100 	ldmdbvs	ip, {r8, sp}
    ec68:	01890100 	orreq	r0, r9, r0, lsl #2
    ec6c:	00000094 	muleq	r0, r4, r0
    ec70:	00003a00 	andeq	r3, r0, r0, lsl #20
    ec74:	0000001d 	andeq	r0, r0, sp, lsl r0
    ec78:	000a9c00 	andeq	r9, sl, r0, lsl #24
    ec7c:	52011e00 	andpl	r1, r1, #0, 28
    ec80:	1e840802 	cdpne	8, 8, cr0, cr4, cr2, {0}
    ec84:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    ec88:	50011eff 	strdpl	r1, [r1], -pc	; <UNPREDICTABLE>
    ec8c:	03380c05 	teqeq	r8, #1280	; 0x500
    ec90:	00002100 	andeq	r2, r0, r0, lsl #2
    ec94:	002dd715 	eoreq	sp, sp, r5, lsl r7
    ec98:	017c0200 	cmneq	ip, r0, lsl #4
    ec9c:	000034e8 	andeq	r3, r0, r8, ror #9
    eca0:	0000001c 	andeq	r0, r0, ip, lsl r0
    eca4:	0a5c9c01 	beq	1735cb0 <__ccfg+0x1715d08>
    eca8:	ff1f0000 			; <UNDEFINED> instruction: 0xff1f0000
    ecac:	0100002e 	tsteq	r0, lr, lsr #32
    ecb0:	0a5c0196 	beq	170f310 <__ccfg+0x16ef368>
    ecb4:	50010000 	andpl	r0, r1, r0
    ecb8:	02010200 	andeq	r0, r1, #0, 4
    ecbc:	0000115c 	andeq	r1, r0, ip, asr r1
    ecc0:	0000b820 	andeq	fp, r0, r0, lsr #16
    ecc4:	000a7300 	andeq	r7, sl, r0, lsl #6
    ecc8:	00e42100 	rsceq	r2, r4, r0, lsl #2
    eccc:	000b0000 	andeq	r0, fp, r0
    ecd0:	002e5c22 	eoreq	r5, lr, r2, lsr #24
    ecd4:	97520100 	ldrbls	r0, [r2, -r0, lsl #2]
    ecd8:	1800000a 	stmdane	r0, {r1, r3}
    ecdc:	3a3d3bc3 	bcc	f5dbf0 <__ccfg+0xf3dc48>
    ece0:	3a713a5d 	bcc	1c5d65c <__ccfg+0x1c3d6b4>
    ece4:	3a8f0aa1 	bcc	fe3d1770 <_estack+0xde3cc770>
    ece8:	09b33b0f 	ldmibeq	r3!, {r0, r1, r2, r3, r8, r9, fp, ip, sp}
    ecec:	0a855e49 	beq	fe166618 <_estack+0xde161618>
    ecf0:	3b853b2f 	blcc	fe15d9b4 <_estack+0xde1589b4>
    ecf4:	000a6323 	andeq	r6, sl, r3, lsr #6
    ecf8:	11d12400 	bicsne	r2, r1, r0, lsl #8
    ecfc:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    ed00:	000000eb 	andeq	r0, r0, fp, ror #1
    ed04:	0000eb25 	andeq	lr, r0, r5, lsr #22
    ed08:	00942500 	addseq	r2, r4, r0, lsl #10
    ed0c:	d9250000 	stmdble	r5!, {}	; <UNPREDICTABLE>
    ed10:	00000000 	andeq	r0, r0, r0
    ed14:	00020700 	andeq	r0, r2, r0, lsl #14
    ed18:	fd000400 	stc2	4, cr0, [r0, #-0]
    ed1c:	04000035 	streq	r0, [r0], #-53	; 0xffffffcb
    ed20:	0024f701 	eoreq	pc, r4, r1, lsl #14
    ed24:	30210100 	eorcc	r0, r1, r0, lsl #2
    ed28:	25be0000 	ldrcs	r0, [lr, #0]!
    ed2c:	10a80000 	adcne	r0, r8, r0
    ed30:	00000000 	andeq	r0, r0, r0
    ed34:	76410000 	strbvc	r0, [r1], -r0
    ed38:	01020000 	mrseq	r0, (UNDEF: 2)
    ed3c:	0008da06 	andeq	sp, r8, r6, lsl #20
    ed40:	08010200 	stmdaeq	r1, {r9}
    ed44:	000008d8 	ldrdeq	r0, [r0], -r8
    ed48:	9f050202 	svcls	0x00050202
    ed4c:	02000007 	andeq	r0, r0, #7
    ed50:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
    ed54:	04020000 	streq	r0, [r2], #-0
    ed58:	0005e905 	andeq	lr, r5, r5, lsl #18
    ed5c:	08ef0300 	stmiaeq	pc!, {r8, r9}^	; <UNPREDICTABLE>
    ed60:	41030000 	mrsmi	r0, (UNDEF: 3)
    ed64:	00000053 	andeq	r0, r0, r3, asr r0
    ed68:	93070402 	movwls	r0, #29698	; 0x7402
    ed6c:	02000003 	andeq	r0, r0, #3
    ed70:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
    ed74:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    ed78:	00038e07 	andeq	r8, r3, r7, lsl #28
    ed7c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    ed80:	00746e69 	rsbseq	r6, r4, r9, ror #28
    ed84:	98070402 	stmdals	r7, {r1, sl}
    ed88:	03000003 	movweq	r0, #3
    ed8c:	000008f1 	strdeq	r0, [r0], -r1
    ed90:	00482004 	subeq	r2, r8, r4
    ed94:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
    ed98:	02000030 	andeq	r0, r0, #48	; 0x30
    ed9c:	06030330 			; <UNDEFINED> instruction: 0x06030330
    eda0:	000030e9 	andeq	r3, r0, r9, ror #1
    eda4:	0501fd01 	streq	pc, [r1, #-3329]	; 0xfffff2ff
    eda8:	00003091 	muleq	r0, r1, r0
    edac:	01018201 	tsteq	r1, r1, lsl #4
    edb0:	002f6c07 	eoreq	r6, pc, r7, lsl #24
    edb4:	010d0100 	mrseq	r0, (UNDEF: 29)
    edb8:	00003504 	andeq	r3, r0, r4, lsl #10
    edbc:	000000d4 	ldrdeq	r0, [r0], -r4
    edc0:	016d9c01 	cmneq	sp, r1, lsl #24
    edc4:	6c080000 	stcvs	0, cr0, [r8], {-0}
    edc8:	01000030 	tsteq	r0, r0, lsr r0
    edcc:	0076010d 	rsbseq	r0, r6, sp, lsl #2
    edd0:	3aa40000 	bcc	fe90edd8 <_estack+0xde909dd8>
    edd4:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    edd8:	01000030 	tsteq	r0, r0, lsr r0
    eddc:	0076010f 	rsbseq	r0, r6, pc, lsl #2
    ede0:	3ad00000 	bcc	ff40ede8 <_estack+0xdf409de8>
    ede4:	65090000 	strvs	r0, [r9, #-0]
    ede8:	0100002f 	tsteq	r0, pc, lsr #32
    edec:	00760110 	rsbseq	r0, r6, r0, lsl r1
    edf0:	3ae30000 	bcc	ff8cedf8 <_estack+0xdf8c9df8>
    edf4:	810a0000 	mrshi	r0, (UNDEF: 10)
    edf8:	36000000 	strcc	r0, [r0], -r0
    edfc:	06000035 			; <UNDEFINED> instruction: 0x06000035
    ee00:	01000000 	mrseq	r0, (UNDEF: 0)
    ee04:	5c0b0136 	stfpls	f0, [fp], {54}	; 0x36
    ee08:	2a000035 	bcs	eee4 <__exidx_end+0x9fb8>
    ee0c:	1f000000 	svcne	0x00000000
    ee10:	09000001 	stmdbeq	r0, {r0}
    ee14:	0000315e 	andeq	r3, r0, lr, asr r1
    ee18:	76015301 	strvc	r5, [r1], -r1, lsl #6
    ee1c:	fc000000 	stc2	0, cr0, [r0], {-0}
    ee20:	0900003a 	stmdbeq	r0, {r1, r3, r4, r5}
    ee24:	000030ba 	strheq	r3, [r0], -sl
    ee28:	76015401 	strvc	r5, [r1], -r1, lsl #8
    ee2c:	0f000000 	svceq	0x00000000
    ee30:	0000003b 	andeq	r0, r0, fp, lsr r0
    ee34:	0035460c 	eorseq	r4, r5, ip, lsl #12
    ee38:	0001c300 	andeq	ip, r1, r0, lsl #6
    ee3c:	00013300 	andeq	r3, r1, r0, lsl #6
    ee40:	50010d00 	andpl	r0, r1, r0, lsl #26
    ee44:	00007402 	andeq	r7, r0, r2, lsl #8
    ee48:	00354e0c 	eorseq	r4, r5, ip, lsl #28
    ee4c:	0001d400 	andeq	sp, r1, r0, lsl #8
    ee50:	00014d00 	andeq	r4, r1, r0, lsl #26
    ee54:	51010d00 	tstpl	r1, r0, lsl #26
    ee58:	0d007402 	cfstrseq	mvf7, [r0, #-8]
    ee5c:	75025001 	strvc	r5, [r2, #-1]
    ee60:	8c0c0000 	stchi	0, cr0, [ip], {-0}
    ee64:	ea000035 	b	ef40 <__exidx_end+0xa014>
    ee68:	61000001 	tstvs	r0, r1
    ee6c:	0d000001 	stceq	0, cr0, [r0, #-4]
    ee70:	74025001 	strvc	r5, [r2], #-1
    ee74:	960e0000 	strls	r0, [lr], -r0
    ee78:	0d000035 	stceq	0, cr0, [r0, #-212]	; 0xffffff2c
    ee7c:	32015001 	andcc	r5, r1, #1
    ee80:	a40f0000 	strge	r0, [pc], #-0	; ee88 <__exidx_end+0x9f5c>
    ee84:	07000030 	smladxeq	r0, r0, r0, r0
    ee88:	0035d85f 	eorseq	sp, r5, pc, asr r8
    ee8c:	0000a400 	andeq	sl, r0, r0, lsl #8
    ee90:	c39c0100 	orrsgt	r0, ip, #0, 2
    ee94:	10000001 	andne	r0, r0, r1
    ee98:	0000306c 	andeq	r3, r0, ip, rrx
    ee9c:	00767201 	rsbseq	r7, r6, r1, lsl #4
    eea0:	3b3a0000 	blcc	e8eea8 <__ccfg+0xe6ef00>
    eea4:	c5100000 	ldrgt	r0, [r0, #-0]
    eea8:	01000030 	tsteq	r0, r0, lsr r0
    eeac:	00007673 	andeq	r7, r0, r3, ror r6
    eeb0:	003b4d00 	eorseq	r4, fp, r0, lsl #26
    eeb4:	35e81100 	strbcc	r1, [r8, #256]!	; 0x100
    eeb8:	01fb0000 	mvnseq	r0, r0
    eebc:	fc110000 	ldc2	0, cr0, [r1], {-0}
    eec0:	03000035 	movweq	r0, #53	; 0x35
    eec4:	12000002 	andne	r0, r0, #2
    eec8:	0000360c 	andeq	r3, r0, ip, lsl #12
    eecc:	0000009b 	muleq	r0, fp, r0
    eed0:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    eed4:	00000074 	andeq	r0, r0, r4, ror r0
    eed8:	002f9113 	eoreq	r9, pc, r3, lsl r1	; <UNPREDICTABLE>
    eedc:	d46c0500 	strbtle	r0, [ip], #-1280	; 0xfffffb00
    eee0:	14000001 	strne	r0, [r0], #-1
    eee4:	00000076 	andeq	r0, r0, r6, ror r0
    eee8:	2fc11300 	svccs	0x00c11300
    eeec:	73050000 	movwvc	r0, #20480	; 0x5000
    eef0:	000001ea 	andeq	r0, r0, sl, ror #3
    eef4:	00007614 	andeq	r7, r0, r4, lsl r6
    eef8:	00761400 	rsbseq	r1, r6, r0, lsl #8
    eefc:	13000000 	movwne	r0, #0
    ef00:	00002ff1 	strdeq	r2, [r0], -r1
    ef04:	01fb7a05 	mvnseq	r7, r5, lsl #20
    ef08:	76140000 	ldrvc	r0, [r4], -r0
    ef0c:	00000000 	andeq	r0, r0, r0
    ef10:	00312115 	eorseq	r2, r1, r5, lsl r1
    ef14:	02430600 	subeq	r0, r3, #0, 12
    ef18:	00303e16 	eorseq	r3, r0, r6, lsl lr
    ef1c:	00fd0500 	rscseq	r0, sp, r0, lsl #10
    ef20:	00000b17 	andeq	r0, r0, r7, lsl fp
    ef24:	373f0004 	ldrcc	r0, [pc, -r4]!
    ef28:	01040000 	mrseq	r0, (UNDEF: 4)
    ef2c:	000024f7 	strdeq	r2, [r0], -r7
    ef30:	0033a101 	eorseq	sl, r3, r1, lsl #2
    ef34:	0025be00 	eoreq	fp, r5, r0, lsl #28
    ef38:	0010f000 	andseq	pc, r0, r0
    ef3c:	00000000 	andeq	r0, r0, r0
    ef40:	00782e00 	rsbseq	r2, r8, r0, lsl #28
    ef44:	06010200 	streq	r0, [r1], -r0, lsl #4
    ef48:	000008da 	ldrdeq	r0, [r0], -sl
    ef4c:	d8080102 	stmdale	r8, {r1, r8}
    ef50:	02000008 	andeq	r0, r0, #8
    ef54:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
    ef58:	02020000 	andeq	r0, r2, #0
    ef5c:	0009a607 	andeq	sl, r9, r7, lsl #12
    ef60:	26570300 	ldrbcs	r0, [r7], -r0, lsl #6
    ef64:	3f040000 	svccc	0x00040000
    ef68:	0000004c 	andeq	r0, r0, ip, asr #32
    ef6c:	e9050402 	stmdb	r5, {r1, sl}
    ef70:	03000005 	movweq	r0, #5
    ef74:	000008ef 	andeq	r0, r0, pc, ror #17
    ef78:	005e4104 	subseq	r4, lr, r4, lsl #2
    ef7c:	04020000 	streq	r0, [r2], #-0
    ef80:	00039307 	andeq	r9, r3, r7, lsl #6
    ef84:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    ef88:	000005e4 	andeq	r0, r0, r4, ror #11
    ef8c:	8e070802 	cdphi	8, 0, cr0, cr7, cr2, {0}
    ef90:	04000003 	streq	r0, [r0], #-3
    ef94:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    ef98:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    ef9c:	00039807 	andeq	r9, r3, r7, lsl #16
    efa0:	26590300 	ldrbcs	r0, [r9], -r0, lsl #6
    efa4:	1f050000 	svcne	0x00050000
    efa8:	00000041 	andeq	r0, r0, r1, asr #32
    efac:	0008f103 	andeq	pc, r8, r3, lsl #2
    efb0:	53200500 	noppl	{0}	; <UNPREDICTABLE>
    efb4:	05000000 	streq	r0, [r0, #-0]
    efb8:	00003434 	andeq	r3, r0, r4, lsr r4
    efbc:	0081e902 	addeq	lr, r1, r2, lsl #18
    efc0:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    efc4:	06000000 	streq	r0, [r0], -r0
    efc8:	00003184 	andeq	r3, r0, r4, lsl #3
    efcc:	008ce902 	addeq	lr, ip, r2, lsl #18
    efd0:	8d070000 	stchi	0, cr0, [r7, #-0]
    efd4:	02000034 	andeq	r0, r0, #52	; 0x34
    efd8:	000081ef 	andeq	r8, r0, pc, ror #3
    efdc:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    efe0:	02000031 	andeq	r0, r0, #49	; 0x31
    efe4:	00008cab 	andeq	r8, r0, fp, lsr #25
    efe8:	00e70100 	rsceq	r0, r7, r0, lsl #2
    efec:	6c090000 	stcvs	0, cr0, [r9], {-0}
    eff0:	01000030 	tsteq	r0, r0, lsr r0
    eff4:	008c0329 	addeq	r0, ip, r9, lsr #6
    eff8:	160a0000 	strne	r0, [sl], -r0
    effc:	01000035 	tsteq	r0, r5, lsr r0
    f000:	008c032b 	addeq	r0, ip, fp, lsr #6
    f004:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f008:	0000346c 	andeq	r3, r0, ip, ror #8
    f00c:	008c8102 	addeq	r8, ip, r2, lsl #2
    f010:	10010000 	andne	r0, r1, r0
    f014:	09000001 	stmdbeq	r0, {r0}
    f018:	0000306c 	andeq	r3, r0, ip, rrx
    f01c:	8c033c01 	stchi	12, cr3, [r3], {1}
    f020:	0a000000 	beq	f028 <__exidx_end+0xa0fc>
    f024:	000034dd 	ldrdeq	r3, [r0], -sp
    f028:	8c033e01 	stchi	14, cr3, [r3], {1}
    f02c:	00000000 	andeq	r0, r0, r0
    f030:	00331a08 	eorseq	r1, r3, r8, lsl #20
    f034:	8c880200 	sfmhi	f0, 4, [r8], {0}
    f038:	01000000 	mrseq	r0, (UNDEF: 0)
    f03c:	00000139 	andeq	r0, r0, r9, lsr r1
    f040:	00306c09 	eorseq	r6, r0, r9, lsl #24
    f044:	034f0100 	movteq	r0, #61696	; 0xf100
    f048:	0000008c 	andeq	r0, r0, ip, lsl #1
    f04c:	0034510a 	eorseq	r5, r4, sl, lsl #2
    f050:	03510100 	cmpeq	r1, #0, 2
    f054:	0000008c 	andeq	r0, r0, ip, lsl #1
    f058:	327e0800 	rsbscc	r0, lr, #0, 16
    f05c:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    f060:	0000008c 	andeq	r0, r0, ip, lsl #1
    f064:	00016e01 	andeq	r6, r1, r1, lsl #28
    f068:	306c0900 	rsbcc	r0, ip, r0, lsl #18
    f06c:	62010000 	andvs	r0, r1, #0
    f070:	00008c03 	andeq	r8, r0, r3, lsl #24
    f074:	320e0a00 	andcc	r0, lr, #0, 20
    f078:	64010000 	strvs	r0, [r1], #-0
    f07c:	00008c03 	andeq	r8, r0, r3, lsl #24
    f080:	334f0a00 	movtcc	r0, #64000	; 0xfa00
    f084:	65010000 	strvs	r0, [r1, #-0]
    f088:	00008c03 	andeq	r8, r0, r3, lsl #24
    f08c:	81080000 	mrshi	r0, (UNDEF: 8)
    f090:	02000033 	andeq	r0, r0, #51	; 0x33
    f094:	00008cb2 			; <UNDEFINED> instruction: 0x00008cb2
    f098:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    f09c:	6c090000 	stcvs	0, cr0, [r9], {-0}
    f0a0:	01000030 	tsteq	r0, r0, lsr r0
    f0a4:	008c0394 	umulleq	r0, ip, r4, r3
    f0a8:	9d0a0000 	stcls	0, cr0, [sl, #-0]
    f0ac:	01000032 	tsteq	r0, r2, lsr r0
    f0b0:	008c0396 	umulleq	r0, ip, r6, r3
    f0b4:	4f0a0000 	svcmi	0x000a0000
    f0b8:	01000033 	tsteq	r0, r3, lsr r0
    f0bc:	008c0397 	umulleq	r0, ip, r7, r3
    f0c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f0c4:	0000324c 	andeq	r3, r0, ip, asr #4
    f0c8:	008cb902 	addeq	fp, ip, r2, lsl #18
    f0cc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    f0d0:	09000001 	stmdbeq	r0, {r0}
    f0d4:	0000306c 	andeq	r3, r0, ip, rrx
    f0d8:	8c03b401 	cfstrshi	mvf11, [r3], {1}
    f0dc:	0a000000 	beq	f0e4 <__exidx_end+0xa1b8>
    f0e0:	00003359 	andeq	r3, r0, r9, asr r3
    f0e4:	8c03b601 	stchi	6, cr11, [r3], {1}
    f0e8:	00000000 	andeq	r0, r0, r0
    f0ec:	0033f708 	eorseq	pc, r3, r8, lsl #14
    f0f0:	8cdf0200 	lfmhi	f0, 2, [pc], {0}
    f0f4:	01000000 	mrseq	r0, (UNDEF: 0)
    f0f8:	000001f5 	strdeq	r0, [r0], -r5
    f0fc:	00306c09 	eorseq	r6, r0, r9, lsl #24
    f100:	03c80100 	biceq	r0, r8, #0, 2
    f104:	0000008c 	andeq	r0, r0, ip, lsl #1
    f108:	0035360a 	eorseq	r3, r5, sl, lsl #12
    f10c:	03ca0100 	biceq	r0, sl, #0, 2
    f110:	0000008c 	andeq	r0, r0, ip, lsl #1
    f114:	34b70800 	ldrtcc	r0, [r7], #2048	; 0x800
    f118:	d7020000 	strle	r0, [r2, -r0]
    f11c:	0000008c 	andeq	r0, r0, ip, lsl #1
    f120:	00021201 	andeq	r1, r2, r1, lsl #4
    f124:	35e90a00 	strbcc	r0, [r9, #2560]!	; 0xa00
    f128:	83010000 	movwhi	r0, #4096	; 0x1000
    f12c:	00008c02 	andeq	r8, r0, r2, lsl #24
    f130:	c50b0000 	strgt	r0, [fp, #-0]
    f134:	0300000d 	movweq	r0, #13
    f138:	c60c03c4 	strgt	r0, [ip], -r4, asr #7
    f13c:	02000035 	andeq	r0, r0, #53	; 0x35
    f140:	367c010f 	ldrbtcc	r0, [ip], -pc, lsl #2
    f144:	007c0000 	rsbseq	r0, ip, r0
    f148:	9c010000 	stcls	0, cr0, [r1], {-0}
    f14c:	000002c4 	andeq	r0, r0, r4, asr #5
    f150:	0030d80d 	eorseq	sp, r0, sp, lsl #16
    f154:	8c7f0100 	ldfhie	f0, [pc], #-0	; f15c <__exidx_end+0xa230>
    f158:	60000000 	andvs	r0, r0, r0
    f15c:	0700003b 	smladxeq	r0, fp, r0, r0
    f160:	000035de 	ldrdeq	r3, [r0], -lr
    f164:	008c8101 	addeq	r8, ip, r1, lsl #2
    f168:	760e0000 	strvc	r0, [lr], -r0
    f16c:	01000033 	tsteq	r0, r3, lsr r0
    f170:	00008182 	andeq	r8, r0, r2, lsl #3
    f174:	0f520100 	svceq	0x00520100
    f178:	000031e9 	andeq	r3, r0, r9, ror #3
    f17c:	00818301 	addeq	r8, r1, r1, lsl #6
    f180:	3b810000 	blcc	fe04f188 <_estack+0xde04a188>
    f184:	b70f0000 	strlt	r0, [pc, -r0]
    f188:	01000032 	tsteq	r0, r2, lsr r0
    f18c:	00008184 	andeq	r8, r0, r4, lsl #3
    f190:	003b9400 	eorseq	r9, fp, r0, lsl #8
    f194:	00971000 	addseq	r1, r7, r0
    f198:	368a0000 	strcc	r0, [sl], r0
    f19c:	10c00000 	sbcne	r0, r0, r0
    f1a0:	97010000 	strls	r0, [r1, -r0]
    f1a4:	0000029b 	muleq	r0, fp, r2
    f1a8:	0000a711 	andeq	sl, r0, r1, lsl r7
    f1ac:	10c01200 	sbcne	r1, r0, r0, lsl #4
    f1b0:	b2130000 	andslt	r0, r3, #0
    f1b4:	01000000 	mrseq	r0, (UNDEF: 0)
    f1b8:	14000052 	strne	r0, [r0], #-82	; 0xffffffae
    f1bc:	00000097 	muleq	r0, r7, r0
    f1c0:	00003694 	muleq	r0, r4, r6
    f1c4:	00000006 	andeq	r0, r0, r6
    f1c8:	a7119801 	ldrge	r9, [r1, -r1, lsl #16]
    f1cc:	15000000 	strne	r0, [r0, #-0]
    f1d0:	00003694 	muleq	r0, r4, r6
    f1d4:	00000006 	andeq	r0, r0, r6
    f1d8:	0000b216 	andeq	fp, r0, r6, lsl r2
    f1dc:	003bc200 	eorseq	ip, fp, r0, lsl #4
    f1e0:	00000000 	andeq	r0, r0, r0
    f1e4:	002f9117 	eoreq	r9, pc, r7, lsl r1	; <UNPREDICTABLE>
    f1e8:	f86c0200 			; <UNDEFINED> instruction: 0xf86c0200
    f1ec:	ac000036 	stcge	0, cr0, [r0], {54}	; 0x36
    f1f0:	01000000 	mrseq	r0, (UNDEF: 0)
    f1f4:	0003439c 	muleq	r3, ip, r3
    f1f8:	30d80d00 	sbcscc	r0, r8, r0, lsl #26
    f1fc:	bf010000 	svclt	0x00010000
    f200:	0000008c 	andeq	r0, r0, ip, lsl #1
    f204:	00003bd5 	ldrdeq	r3, [r0], -r5
    f208:	0034f80f 	eorseq	pc, r4, pc, lsl #16
    f20c:	81c10100 	bichi	r0, r1, r0, lsl #2
    f210:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    f214:	0f00003c 	svceq	0x0000003c
    f218:	0000360e 	andeq	r3, r0, lr, lsl #12
    f21c:	0081c201 	addeq	ip, r1, r1, lsl #4
    f220:	3c320000 	ldccc	0, cr0, [r2], #-0
    f224:	97180000 	ldrls	r0, [r8, -r0]
    f228:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    f22c:	06000037 			; <UNDEFINED> instruction: 0x06000037
    f230:	01000000 	mrseq	r0, (UNDEF: 0)
    f234:	000332ee 	andeq	r3, r3, lr, ror #5
    f238:	00a71100 	adceq	r1, r7, r0, lsl #2
    f23c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    f240:	06000037 			; <UNDEFINED> instruction: 0x06000037
    f244:	16000000 	strne	r0, [r0], -r0
    f248:	000000b2 	strheq	r0, [r0], -r2
    f24c:	00003c59 	andeq	r3, r0, r9, asr ip
    f250:	1c190000 	ldcne	0, cr0, [r9], {-0}
    f254:	1a000037 	bne	f338 <__exidx_end+0xa40c>
    f258:	1a000002 	bne	f268 <__exidx_end+0xa33c>
    f25c:	74025001 	strvc	r5, [r2], #-1
    f260:	1b000000 	blne	f268 <__exidx_end+0xa33c>
    f264:	00003194 	muleq	r0, r4, r1
    f268:	008ca402 	addeq	sl, ip, r2, lsl #8
    f26c:	37a40000 	strcc	r0, [r4, r0]!
    f270:	005c0000 	subseq	r0, ip, r0
    f274:	9c010000 	stcls	0, cr0, [r1], {-0}
    f278:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    f27c:	0030d81c 	eorseq	sp, r0, ip, lsl r8
    f280:	021f0100 	andseq	r0, pc, #0, 2
    f284:	0000008c 	andeq	r0, r0, ip, lsl #1
    f288:	00003c6c 	andeq	r3, r0, ip, ror #24
    f28c:	0034a81d 	eorseq	sl, r4, sp, lsl r8
    f290:	02210100 	eoreq	r0, r1, #0, 2
    f294:	0000008c 	andeq	r0, r0, ip, lsl #1
    f298:	00003c8d 	andeq	r3, r0, sp, lsl #25
    f29c:	0035aa1d 	eorseq	sl, r5, sp, lsl sl
    f2a0:	02220100 	eoreq	r0, r2, #0, 2
    f2a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f2a8:	00003ca0 	andeq	r3, r0, r0, lsr #25
    f2ac:	0035b81d 	eorseq	fp, r5, sp, lsl r8
    f2b0:	02230100 	eoreq	r0, r3, #0, 2
    f2b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f2b8:	00003cee 	andeq	r3, r0, lr, ror #25
    f2bc:	0035f71d 	eorseq	pc, r5, sp, lsl r7	; <UNPREDICTABLE>
    f2c0:	02240100 	eoreq	r0, r4, #0, 2
    f2c4:	00000081 	andeq	r0, r0, r1, lsl #1
    f2c8:	00003d56 	andeq	r3, r0, r6, asr sp
    f2cc:	0035e91d 	eorseq	lr, r5, sp, lsl r9
    f2d0:	02250100 	eoreq	r0, r5, #0, 2
    f2d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f2d8:	00003d75 	andeq	r3, r0, r5, ror sp
    f2dc:	33cc1b00 	biccc	r1, ip, #0, 22
    f2e0:	c1020000 	mrsgt	r0, (UNDEF: 2)
    f2e4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f2e8:	00003800 	andeq	r3, r0, r0, lsl #16
    f2ec:	00000018 	andeq	r0, r0, r8, lsl r0
    f2f0:	03e79c01 	mvneq	r9, #256	; 0x100
    f2f4:	e91d0000 	ldmdb	sp, {}	; <UNPREDICTABLE>
    f2f8:	01000035 	tsteq	r0, r5, lsr r0
    f2fc:	008c0267 	addeq	r0, ip, r7, ror #4
    f300:	3d9a0000 	ldccc	0, cr0, [sl]
    f304:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f308:	000001f5 	strdeq	r0, [r0], -r5
    f30c:	00000000 	andeq	r0, r0, r0
    f310:	00000010 	andeq	r0, r0, r0, lsl r0
    f314:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
    f318:	05160000 	ldreq	r0, [r6, #-0]
    f31c:	c1000002 	tstgt	r0, r2
    f320:	0000003d 	andeq	r0, r0, sp, lsr r0
    f324:	0032fa1b 	eorseq	pc, r2, fp, lsl sl	; <UNPREDICTABLE>
    f328:	8c9d0200 	lfmhi	f0, 4, [sp], {0}
    f32c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    f330:	10000038 	andne	r0, r0, r8, lsr r0
    f334:	01000000 	mrseq	r0, (UNDEF: 0)
    f338:	00043e9c 	muleq	r4, ip, lr
    f33c:	35e91d00 	strbcc	r1, [r9, #3328]!	; 0xd00
    f340:	97010000 	strls	r0, [r1, -r0]
    f344:	00008c02 	andeq	r8, r0, r2, lsl #24
    f348:	003dda00 	eorseq	sp, sp, r0, lsl #20
    f34c:	34a81d00 	strtcc	r1, [r8], #3328	; 0xd00
    f350:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    f354:	00008c02 	andeq	r8, r0, r2, lsl #24
    f358:	003dfb00 	eorseq	pc, sp, r0, lsl #22
    f35c:	da1b0000 	ble	6cf364 <__ccfg+0x6af3bc>
    f360:	02000032 	andeq	r0, r0, #50	; 0x32
    f364:	00008c96 	muleq	r0, r6, ip
    f368:	00382800 	eorseq	r2, r8, r0, lsl #16
    f36c:	00001400 	andeq	r1, r0, r0, lsl #8
    f370:	789c0100 	ldmvc	ip, {r8}
    f374:	1d000004 	stcne	0, cr0, [r0, #-16]
    f378:	000035e9 	andeq	r3, r0, r9, ror #11
    f37c:	8c02ba01 			; <UNDEFINED> instruction: 0x8c02ba01
    f380:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f384:	1d00003e 	stcne	0, cr0, [r0, #-248]	; 0xffffff08
    f388:	000034a8 	andeq	r3, r0, r8, lsr #9
    f38c:	8c02bb01 			; <UNDEFINED> instruction: 0x8c02bb01
    f390:	2f000000 	svccs	0x00000000
    f394:	0000003e 	andeq	r0, r0, lr, lsr r0
    f398:	0035891b 	eorseq	r8, r5, fp, lsl r9
    f39c:	8c8f0200 	sfmhi	f0, 4, [pc], {0}
    f3a0:	3c000000 	stccc	0, cr0, [r0], {-0}
    f3a4:	64000038 	strvs	r0, [r0], #-56	; 0xffffffc8
    f3a8:	01000000 	mrseq	r0, (UNDEF: 0)
    f3ac:	0004fe9c 	muleq	r4, ip, lr
    f3b0:	306c1c00 	rsbcc	r1, ip, r0, lsl #24
    f3b4:	db010000 	blle	4f3bc <__ccfg+0x2f414>
    f3b8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3bc:	003e4200 	eorseq	r4, lr, r0, lsl #4
    f3c0:	35e91d00 	strbcc	r1, [r9, #3328]!	; 0xd00
    f3c4:	dd010000 	stcle	0, cr0, [r1, #-0]
    f3c8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3cc:	003e6300 	eorseq	r6, lr, r0, lsl #6
    f3d0:	34a81d00 	strtcc	r1, [r8], #3328	; 0xd00
    f3d4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    f3d8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3dc:	003e9700 	eorseq	r9, lr, r0, lsl #14
    f3e0:	32021d00 	andcc	r1, r2, #0, 26
    f3e4:	df010000 	svcle	0x00010000
    f3e8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3ec:	003eaa00 	eorseq	sl, lr, r0, lsl #20
    f3f0:	35611d00 	strbcc	r1, [r1, #-3328]!	; 0xfffff300
    f3f4:	e0010000 	and	r0, r1, r0
    f3f8:	00008c02 	andeq	r8, r0, r2, lsl #24
    f3fc:	003ed800 	eorseq	sp, lr, r0, lsl #16
    f400:	349e0a00 	ldrcc	r0, [lr], #2560	; 0xa00
    f404:	e1010000 	mrs	r0, (UNDEF: 1)
    f408:	00008c02 	andeq	r8, r0, r2, lsl #24
    f40c:	32721d00 	rsbscc	r1, r2, #0, 26
    f410:	e2010000 	and	r0, r1, #0
    f414:	00008102 	andeq	r8, r0, r2, lsl #2
    f418:	003f0600 	eorseq	r0, pc, r0, lsl #12
    f41c:	be1e0000 	cdplt	0, 1, cr0, cr14, cr0, {0}
    f420:	a0000000 	andge	r0, r0, r0
    f424:	14000038 	strne	r0, [r0], #-56	; 0xffffffc8
    f428:	01000000 	mrseq	r0, (UNDEF: 0)
    f42c:	00054a9c 	muleq	r5, ip, sl
    f430:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    f434:	3f810000 	svccc	0x00810000
    f438:	da160000 	ble	58f440 <__ccfg+0x56f498>
    f43c:	a2000000 	andge	r0, r0, #0
    f440:	1500003f 	strne	r0, [r0, #-63]	; 0xffffffc1
    f444:	000038a2 	andeq	r3, r0, r2, lsr #17
    f448:	0000000a 	andeq	r0, r0, sl
    f44c:	0000ce1f 	andeq	ip, r0, pc, lsl lr
    f450:	003fc100 	eorseq	ip, pc, r0, lsl #2
    f454:	38a21500 	stmiacc	r2!, {r8, sl, ip}
    f458:	000a0000 	andeq	r0, sl, r0
    f45c:	da160000 	ble	58f464 <__ccfg+0x56f4bc>
    f460:	e2000000 	and	r0, r0, #0
    f464:	0000003f 	andeq	r0, r0, pc, lsr r0
    f468:	e71e0000 	ldr	r0, [lr, -r0]
    f46c:	b4000000 	strlt	r0, [r0], #-0
    f470:	14000038 	strne	r0, [r0], #-56	; 0xffffffc8
    f474:	01000000 	mrseq	r0, (UNDEF: 0)
    f478:	0005969c 	muleq	r5, ip, r6
    f47c:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    f480:	3ff50000 	svccc	0x00f50000
    f484:	03160000 	tsteq	r6, #0
    f488:	16000001 	strne	r0, [r0], -r1
    f48c:	15000040 	strne	r0, [r0, #-64]	; 0xffffffc0
    f490:	000038b6 			; <UNDEFINED> instruction: 0x000038b6
    f494:	0000000a 	andeq	r0, r0, sl
    f498:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
    f49c:	00403500 	subeq	r3, r0, r0, lsl #10
    f4a0:	38b61500 	ldmcc	r6!, {r8, sl, ip}
    f4a4:	000a0000 	andeq	r0, sl, r0
    f4a8:	03160000 	tsteq	r6, #0
    f4ac:	56000001 	strpl	r0, [r0], -r1
    f4b0:	00000040 	andeq	r0, r0, r0, asr #32
    f4b4:	101e0000 	andsne	r0, lr, r0
    f4b8:	c8000001 	stmdagt	r0, {r0}
    f4bc:	14000038 	strne	r0, [r0], #-56	; 0xffffffc8
    f4c0:	01000000 	mrseq	r0, (UNDEF: 0)
    f4c4:	0005e29c 	muleq	r5, ip, r2
    f4c8:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    f4cc:	40690000 	rsbmi	r0, r9, r0
    f4d0:	2c160000 	ldccs	0, cr0, [r6], {-0}
    f4d4:	8a000001 	bhi	f4e0 <__exidx_end+0xa5b4>
    f4d8:	15000040 	strne	r0, [r0, #-64]	; 0xffffffc0
    f4dc:	000038ca 	andeq	r3, r0, sl, asr #17
    f4e0:	0000000a 	andeq	r0, r0, sl
    f4e4:	0001201f 	andeq	r2, r1, pc, lsl r0
    f4e8:	0040a900 	subeq	sl, r0, r0, lsl #18
    f4ec:	38ca1500 	stmiacc	sl, {r8, sl, ip}^
    f4f0:	000a0000 	andeq	r0, sl, r0
    f4f4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    f4f8:	ca000001 	bgt	f504 <__exidx_end+0xa5d8>
    f4fc:	00000040 	andeq	r0, r0, r0, asr #32
    f500:	391e0000 	ldmdbcc	lr, {}	; <UNPREDICTABLE>
    f504:	dc000001 	stcle	0, cr0, [r0], {1}
    f508:	28000038 	stmdacs	r0, {r3, r4, r5}
    f50c:	01000000 	mrseq	r0, (UNDEF: 0)
    f510:	00063c9c 	muleq	r6, ip, ip
    f514:	01491f00 	cmpeq	r9, r0, lsl #30
    f518:	40dd0000 	sbcsmi	r0, sp, r0
    f51c:	55160000 	ldrpl	r0, [r6, #-0]
    f520:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
    f524:	20000040 	andcs	r0, r0, r0, asr #32
    f528:	00000161 	andeq	r0, r0, r1, ror #2
    f52c:	0038de15 	eorseq	sp, r8, r5, lsl lr
    f530:	00001c00 	andeq	r1, r0, r0, lsl #24
    f534:	01491f00 	cmpeq	r9, r0, lsl #30
    f538:	411d0000 	tstmi	sp, r0
    f53c:	de150000 	cdple	0, 1, cr0, cr5, cr0, {0}
    f540:	1c000038 	stcne	0, cr0, [r0], {56}	; 0x38
    f544:	16000000 	strne	r0, [r0], -r0
    f548:	00000155 	andeq	r0, r0, r5, asr r1
    f54c:	0000413e 	andeq	r4, r0, lr, lsr r1
    f550:	00016116 	andeq	r6, r1, r6, lsl r1
    f554:	00416b00 	subeq	r6, r1, r0, lsl #22
    f558:	00000000 	andeq	r0, r0, r0
    f55c:	0032271b 	eorseq	r2, r2, fp, lsl r7
    f560:	8ccf0200 	sfmhi	f0, 2, [pc], {0}
    f564:	04000000 	streq	r0, [r0], #-0
    f568:	10000039 	andne	r0, r0, r9, lsr r0
    f56c:	01000000 	mrseq	r0, (UNDEF: 0)
    f570:	0006669c 	muleq	r6, ip, r6
    f574:	32c11d00 	sbccc	r1, r1, #0, 26
    f578:	84010000 	strhi	r0, [r1], #-0
    f57c:	00008c03 	andeq	r8, r0, r3, lsl #24
    f580:	00417e00 	subeq	r7, r1, r0, lsl #28
    f584:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    f588:	14000001 	strne	r0, [r0], #-1
    f58c:	2c000039 	stccs	0, cr0, [r0], {57}	; 0x39
    f590:	01000000 	mrseq	r0, (UNDEF: 0)
    f594:	0006c09c 	muleq	r6, ip, r0
    f598:	017e1f00 	cmneq	lr, r0, lsl #30
    f59c:	41990000 	orrsmi	r0, r9, r0
    f5a0:	8a160000 	bhi	58f5a8 <__ccfg+0x56f600>
    f5a4:	ba000001 	blt	f5b0 <__exidx_end+0xa684>
    f5a8:	20000041 	andcs	r0, r0, r1, asr #32
    f5ac:	00000196 	muleq	r0, r6, r1
    f5b0:	00391615 	eorseq	r1, r9, r5, lsl r6
    f5b4:	00001e00 	andeq	r1, r0, r0, lsl #28
    f5b8:	017e1f00 	cmneq	lr, r0, lsl #30
    f5bc:	41dd0000 	bicsmi	r0, sp, r0
    f5c0:	16150000 	ldrne	r0, [r5], -r0
    f5c4:	1e000039 	mcrne	0, 0, r0, cr0, cr9, {1}
    f5c8:	16000000 	strne	r0, [r0], -r0
    f5cc:	0000018a 	andeq	r0, r0, sl, lsl #3
    f5d0:	000041fe 	strdeq	r4, [r0], -lr
    f5d4:	00019616 	andeq	r9, r1, r6, lsl r6
    f5d8:	00422b00 	subeq	r2, r2, r0, lsl #22
    f5dc:	00000000 	andeq	r0, r0, r0
    f5e0:	0001a31e 	andeq	sl, r1, lr, lsl r3
    f5e4:	00394000 	eorseq	r4, r9, r0
    f5e8:	00001400 	andeq	r1, r0, r0, lsl #8
    f5ec:	0c9c0100 	ldfeqs	f0, [ip], {0}
    f5f0:	1f000007 	svcne	0x00000007
    f5f4:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    f5f8:	0000423e 	andeq	r4, r0, lr, lsr r2
    f5fc:	0001bf16 	andeq	fp, r1, r6, lsl pc
    f600:	00425f00 	subeq	r5, r2, r0, lsl #30
    f604:	39421500 	stmdbcc	r2, {r8, sl, ip}^
    f608:	000a0000 	andeq	r0, sl, r0
    f60c:	b31f0000 	tstlt	pc, #0
    f610:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
    f614:	15000042 	strne	r0, [r0, #-66]	; 0xffffffbe
    f618:	00003942 	andeq	r3, r0, r2, asr #18
    f61c:	0000000a 	andeq	r0, r0, sl
    f620:	0001bf16 	andeq	fp, r1, r6, lsl pc
    f624:	00429f00 	subeq	r9, r2, r0, lsl #30
    f628:	00000000 	andeq	r0, r0, r0
    f62c:	0001cc1e 	andeq	ip, r1, lr, lsl ip
    f630:	00395400 	eorseq	r5, r9, r0, lsl #8
    f634:	00001400 	andeq	r1, r0, r0, lsl #8
    f638:	589c0100 	ldmpl	ip, {r8}
    f63c:	1f000007 	svcne	0x00000007
    f640:	000001dc 	ldrdeq	r0, [r0], -ip
    f644:	000042b2 			; <UNDEFINED> instruction: 0x000042b2
    f648:	0001e816 	andeq	lr, r1, r6, lsl r8
    f64c:	0042d300 	subeq	sp, r2, r0, lsl #6
    f650:	39561500 	ldmdbcc	r6, {r8, sl, ip}^
    f654:	000a0000 	andeq	r0, sl, r0
    f658:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
    f65c:	f2000001 	vhadd.s8	d0, d0, d1
    f660:	15000042 	strne	r0, [r0, #-66]	; 0xffffffbe
    f664:	00003956 	andeq	r3, r0, r6, asr r9
    f668:	0000000a 	andeq	r0, r0, sl
    f66c:	0001e816 	andeq	lr, r1, r6, lsl r8
    f670:	00431300 	subeq	r1, r3, r0, lsl #6
    f674:	00000000 	andeq	r0, r0, r0
    f678:	002fc117 	eoreq	ip, pc, r7, lsl r1	; <UNPREDICTABLE>
    f67c:	68730200 	ldmdavs	r3!, {r9}^
    f680:	10000039 	andne	r0, r0, r9, lsr r0
    f684:	01000001 	tsteq	r0, r1
    f688:	0009639c 	muleq	r9, ip, r3
    f68c:	306c1c00 	rsbcc	r1, ip, r0, lsl #24
    f690:	27010000 	strcs	r0, [r1, -r0]
    f694:	00008c01 	andeq	r8, r0, r1, lsl #24
    f698:	00432600 	subeq	r2, r3, r0, lsl #12
    f69c:	30d81c00 	sbcscc	r1, r8, r0, lsl #24
    f6a0:	27010000 	strcs	r0, [r1, -r0]
    f6a4:	00008c01 	andeq	r8, r0, r1, lsl #24
    f6a8:	00435200 	subeq	r5, r3, r0, lsl #4
    f6ac:	342b1d00 	strtcc	r1, [fp], #-3328	; 0xfffff300
    f6b0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    f6b4:	00008c01 	andeq	r8, r0, r1, lsl #24
    f6b8:	00437300 	subeq	r7, r3, r0, lsl #6
    f6bc:	01f52100 	mvnseq	r2, r0, lsl #2
    f6c0:	39980000 	ldmibcc	r8, {}	; <UNPREDICTABLE>
    f6c4:	10d80000 	sbcsne	r0, r8, r0
    f6c8:	40010000 	andmi	r0, r1, r0
    f6cc:	0007c101 	andeq	ip, r7, r1, lsl #2
    f6d0:	10d81200 	sbcsne	r1, r8, r0, lsl #4
    f6d4:	05160000 	ldreq	r0, [r6, #-0]
    f6d8:	41000002 	tstmi	r0, r2
    f6dc:	00000044 	andeq	r0, r0, r4, asr #32
    f6e0:	39722200 	ldmdbcc	r2!, {r9, sp}^
    f6e4:	03430000 	movteq	r0, #12288	; 0x3000
    f6e8:	07d60000 	ldrbeq	r0, [r6, r0]
    f6ec:	011a0000 	tsteq	sl, r0
    f6f0:	01f30350 	mvnseq	r0, r0, asr r3
    f6f4:	7e220051 	mcrvc	0, 1, r0, cr2, cr1, {2}
    f6f8:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    f6fc:	ef00000a 	svc	0x0000000a
    f700:	1a000007 	bne	f724 <__exidx_end+0xa7f8>
    f704:	48015101 	stmdami	r1, {r0, r8, ip, lr}
    f708:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f70c:	23000074 	movwcs	r0, #116	; 0x74
    f710:	00003982 	andeq	r3, r0, r2, lsl #19
    f714:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    f718:	00399824 	eorseq	r9, r9, r4, lsr #16
    f71c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    f720:	0000081d 	andeq	r0, r0, sp, lsl r8
    f724:	0153011a 	cmpeq	r3, sl, lsl r1
    f728:	52011a30 	andpl	r1, r1, #48, 20	; 0x30000
    f72c:	03ff0a03 	mvnseq	r0, #12288	; 0x3000
    f730:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    f734:	011a2c08 	tsteq	sl, r8, lsl #24
    f738:	00740250 	rsbseq	r0, r4, r0, asr r2
    f73c:	39a82200 	stmibcc	r8!, {r9, sp}
    f740:	0ad60000 	beq	ff58f748 <_estack+0xdf58a748>
    f744:	08360000 	ldmdaeq	r6!, {}	; <UNPREDICTABLE>
    f748:	011a0000 	tsteq	sl, r0
    f74c:	1a4c0151 	bne	130fc98 <__ccfg+0x12efcf0>
    f750:	74025001 	strvc	r5, [r2], #-1
    f754:	ac230000 	stcge	0, cr0, [r3], #-0
    f758:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
    f75c:	22000004 	andcs	r0, r0, #4
    f760:	000039b6 			; <UNDEFINED> instruction: 0x000039b6
    f764:	00000ad6 	ldrdeq	r0, [r0], -r6
    f768:	00000858 	andeq	r0, r0, r8, asr r8
    f76c:	0151011a 	cmpeq	r1, sl, lsl r1
    f770:	50011a44 	andpl	r1, r1, r4, asr #20
    f774:	00007402 	andeq	r7, r0, r2, lsl #8
    f778:	0039ba23 	eorseq	fp, r9, r3, lsr #20
    f77c:	00043e00 	andeq	r3, r4, r0, lsl #28
    f780:	39c42200 	stmibcc	r4, {r9, sp}^
    f784:	0ad60000 	beq	ff58f78c <_estack+0xdf58a78c>
    f788:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    f78c:	011a0000 	tsteq	sl, r0
    f790:	1a400151 	bne	100fcdc <__ccfg+0xfefd34>
    f794:	74025001 	strvc	r5, [r2], #-1
    f798:	ca220000 	bgt	88f7a0 <__ccfg+0x86f7f8>
    f79c:	78000039 	stmdavc	r0, {r0, r3, r4, r5}
    f7a0:	8e000004 	cdphi	0, 0, cr0, cr0, cr4, {0}
    f7a4:	1a000008 	bne	f7cc <__exidx_end+0xa8a0>
    f7a8:	75025001 	strvc	r5, [r2, #-1]
    f7ac:	d4220000 	strtle	r0, [r2], #-0
    f7b0:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    f7b4:	a700000a 	strge	r0, [r0, -sl]
    f7b8:	1a000008 	bne	f7e0 <__exidx_end+0xa8b4>
    f7bc:	3c015101 	stfccs	f5, [r1], {1}
    f7c0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f7c4:	22000074 	andcs	r0, r0, #116	; 0x74
    f7c8:	000039da 	ldrdeq	r3, [r0], -sl
    f7cc:	000000e7 	andeq	r0, r0, r7, ror #1
    f7d0:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    f7d4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f7d8:	22000075 	andcs	r0, r0, #117	; 0x75
    f7dc:	000039ec 	andeq	r3, r0, ip, ror #19
    f7e0:	00000110 	andeq	r0, r0, r0, lsl r1
    f7e4:	000008cf 	andeq	r0, r0, pc, asr #17
    f7e8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f7ec:	22000075 	andcs	r0, r0, #117	; 0x75
    f7f0:	000039fa 	strdeq	r3, [r0], -sl
    f7f4:	00000139 	andeq	r0, r0, r9, lsr r1
    f7f8:	000008e3 	andeq	r0, r0, r3, ror #17
    f7fc:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f800:	22000075 	andcs	r0, r0, #117	; 0x75
    f804:	00003a04 	andeq	r3, r0, r4, lsl #20
    f808:	00000ad6 	ldrdeq	r0, [r0], -r6
    f80c:	000008fd 	strdeq	r0, [r0], -sp
    f810:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    f814:	011a2808 	tsteq	sl, r8, lsl #16
    f818:	00740250 	rsbseq	r0, r4, r0, asr r2
    f81c:	3a0a2200 	bcc	298024 <__ccfg+0x27807c>
    f820:	00be0000 	adcseq	r0, lr, r0
    f824:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    f828:	011a0000 	tsteq	sl, r0
    f82c:	00750250 	rsbseq	r0, r5, r0, asr r2
    f830:	3a1c2200 	bcc	718038 <__ccfg+0x6f8090>
    f834:	01a30000 			; <UNDEFINED> instruction: 0x01a30000
    f838:	09250000 	stmdbeq	r5!, {}	; <UNPREDICTABLE>
    f83c:	011a0000 	tsteq	sl, r0
    f840:	00750250 	rsbseq	r0, r5, r0, asr r2
    f844:	3a2e2200 	bcc	b9804c <__ccfg+0xb780a4>
    f848:	01cc0000 	biceq	r0, ip, r0
    f84c:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    f850:	011a0000 	tsteq	sl, r0
    f854:	00750250 	rsbseq	r0, r5, r0, asr r2
    f858:	3a422200 	bcc	1098060 <__ccfg+0x10780b8>
    f85c:	016e0000 	cmneq	lr, r0
    f860:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    f864:	011a0000 	tsteq	sl, r0
    f868:	00750250 	rsbseq	r0, r5, r0, asr r2
    f86c:	3a4c1900 	bcc	1315c74 <__ccfg+0x12f5ccc>
    f870:	0ad60000 	beq	ff58f878 <_estack+0xdf58a878>
    f874:	011a0000 	tsteq	sl, r0
    f878:	1a380151 	bne	e0fdc4 <__ccfg+0xdefe1c>
    f87c:	74025001 	strvc	r5, [r2], #-1
    f880:	17000000 	strne	r0, [r0, -r0]
    f884:	0000303e 	andeq	r3, r0, lr, lsr r0
    f888:	3a78fd02 	bcc	1e4ec98 <__ccfg+0x1e2ecf0>
    f88c:	00640000 	rsbeq	r0, r4, r0
    f890:	9c010000 	stcls	0, cr0, [r1], {-0}
    f894:	00000989 	andeq	r0, r0, r9, lsl #19
    f898:	0031f51d 	eorseq	pc, r1, sp, lsl r5	; <UNPREDICTABLE>
    f89c:	03eb0100 	mvneq	r0, #0, 2
    f8a0:	0000008c 	andeq	r0, r0, ip, lsl #1
    f8a4:	0000445a 	andeq	r4, r0, sl, asr r4
    f8a8:	356b0c00 	strbcc	r0, [fp, #-3072]!	; 0xfffff400
    f8ac:	06020000 	streq	r0, [r2], -r0
    f8b0:	003adc01 	eorseq	sp, sl, r1, lsl #24
    f8b4:	00002800 	andeq	r2, r0, r0, lsl #16
    f8b8:	b09c0100 	addslt	r0, ip, r0, lsl #2
    f8bc:	1c000009 	stcne	0, cr0, [r0], {9}
    f8c0:	000033c2 	andeq	r3, r0, r2, asr #7
    f8c4:	8c041301 	stchi	3, cr1, [r4], {1}
    f8c8:	75000000 	strvc	r0, [r0, #-0]
    f8cc:	00000044 	andeq	r0, r0, r4, asr #32
    f8d0:	002ff117 	eoreq	pc, pc, r7, lsl r1	; <UNPREDICTABLE>
    f8d4:	047a0200 	ldrbteq	r0, [sl], #-512	; 0xfffffe00
    f8d8:	5000003b 	andpl	r0, r0, fp, lsr r0
    f8dc:	01000001 	tsteq	r0, r1
    f8e0:	000ad69c 	muleq	sl, ip, r6
    f8e4:	30d81c00 	sbcscc	r1, r8, r0, lsl #24
    f8e8:	9b010000 	blls	4f8f0 <__ccfg+0x2f948>
    f8ec:	00008c01 	andeq	r8, r0, r1, lsl #24
    f8f0:	00449600 	subeq	r9, r4, r0, lsl #12
    f8f4:	35091d00 	strcc	r1, [r9, #-3328]	; 0xfffff300
    f8f8:	9d010000 	stcls	0, cr0, [r1, #-0]
    f8fc:	00008c01 	andeq	r8, r0, r1, lsl #24
    f900:	0044f100 	subeq	pc, r4, r0, lsl #2
    f904:	342b1d00 	strtcc	r1, [fp], #-3328	; 0xfffff300
    f908:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    f90c:	00008c01 	andeq	r8, r0, r1, lsl #24
    f910:	00450400 	subeq	r0, r5, r0, lsl #8
    f914:	31751d00 	cmncc	r5, r0, lsl #26
    f918:	9f010000 	svcls	0x00010000
    f91c:	00008c01 	andeq	r8, r0, r1, lsl #24
    f920:	00451700 	subeq	r1, r5, r0, lsl #14
    f924:	31681d00 	cmncc	r8, r0, lsl #26
    f928:	a0010000 	andge	r0, r1, r0
    f92c:	00008c01 	andeq	r8, r0, r1, lsl #24
    f930:	00453500 	subeq	r3, r5, r0, lsl #10
    f934:	02122500 	andseq	r2, r2, #0, 10
    f938:	3c160000 	ldccc	0, cr0, [r6], {-0}
    f93c:	003e0000 	eorseq	r0, lr, r0
    f940:	16010000 	strne	r0, [r1], -r0
    f944:	3b8e2302 	blcc	fe398554 <_estack+0xde393554>
    f948:	063c0000 	ldrteq	r0, [ip], -r0
    f94c:	b0220000 	eorlt	r0, r2, r0
    f950:	f200003b 	vqadd.s8	d0, d0, d27
    f954:	4600000a 	strmi	r0, [r0], -sl
    f958:	1a00000a 	bne	f988 <__exidx_end+0xaa5c>
    f95c:	31015101 	tstcc	r1, r1, lsl #2
    f960:	0150011a 	cmpeq	r0, sl, lsl r1
    f964:	b6220034 			; <UNDEFINED> instruction: 0xb6220034
    f968:	8900003b 	stmdbhi	r0, {r0, r1, r3, r4, r5}
    f96c:	5d000009 	stcpl	0, cr0, [r0, #-36]	; 0xffffffdc
    f970:	1a00000a 	bne	f9a0 <__exidx_end+0xaa74>
    f974:	0c055001 	stceq	0, cr5, [r5], {1}
    f978:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    f97c:	3bbc2300 	blcc	fef18584 <_estack+0xdef13584>
    f980:	0b080000 	bleq	20f988 <__ccfg+0x1ef9e0>
    f984:	c6220000 	strtgt	r0, [r2], -r0
    f988:	f200003b 	vqadd.s8	d0, d0, d27
    f98c:	7f00000a 	svcvc	0x0000000a
    f990:	1a00000a 	bne	f9c0 <__exidx_end+0xaa94>
    f994:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    f998:	50011a00 	andpl	r1, r1, r0, lsl #20
    f99c:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    f9a0:	00003bcc 	andeq	r3, r0, ip, asr #23
    f9a4:	00000b08 	andeq	r0, r0, r8, lsl #22
    f9a8:	00000a92 	muleq	r0, r2, sl
    f9ac:	0150011a 	cmpeq	r0, sl, lsl r1
    f9b0:	dc220034 	stcle	0, cr0, [r2], #-208	; 0xffffff30
    f9b4:	8900003b 	stmdbhi	r0, {r0, r1, r3, r4, r5}
    f9b8:	ac000009 	stcge	0, cr0, [r0], {9}
    f9bc:	1a00000a 	bne	f9ec <__exidx_end+0xaac0>
    f9c0:	74085001 	strvc	r5, [r8], #-1
    f9c4:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    f9c8:	001a00ff 	ldrsheq	r0, [sl], -pc	; <UNPREDICTABLE>
    f9cc:	003bec26 	eorseq	lr, fp, r6, lsr #24
    f9d0:	000acc00 	andeq	ip, sl, r0, lsl #24
    f9d4:	52011a00 	andpl	r1, r1, #0, 20
    f9d8:	60000c05 	andvs	r0, r0, r5, lsl #24
    f9dc:	011a6000 	tsteq	sl, r0
    f9e0:	1a370151 	bne	dcff2c <__ccfg+0xdaff84>
    f9e4:	74045001 	strvc	r5, [r4], #-1
    f9e8:	00254800 	eoreq	r4, r5, r0, lsl #16
    f9ec:	003c0223 	eorseq	r0, ip, r3, lsr #4
    f9f0:	000af200 	andeq	pc, sl, r0, lsl #4
    f9f4:	3b270000 	blcc	9cf9fc <__ccfg+0x9afa54>
    f9f8:	06000033 			; <UNDEFINED> instruction: 0x06000033
    f9fc:	0af201ca 	beq	ffc9012c <_estack+0xdfc8b12c>
    fa00:	8c280000 	stchi	0, cr0, [r8], #-0
    fa04:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    fa08:	0000008c 	andeq	r0, r0, ip, lsl #1
    fa0c:	00008c28 	andeq	r8, r0, r8, lsr #24
    fa10:	d5290000 	strle	r0, [r9, #-0]!
    fa14:	07000027 	streq	r0, [r0, -r7, lsr #32]
    fa18:	000b08f9 	strdeq	r0, [fp], -r9
    fa1c:	008c2800 	addeq	r2, ip, r0, lsl #16
    fa20:	8c280000 	stchi	0, cr0, [r8], #-0
    fa24:	00000000 	andeq	r0, r0, r0
    fa28:	00280e2a 	eoreq	r0, r8, sl, lsr #28
    fa2c:	01100700 	tsteq	r0, r0, lsl #14
    fa30:	0000008c 	andeq	r0, r0, ip, lsl #1
    fa34:	00008c28 	andeq	r8, r0, r8, lsr #24
    fa38:	23000000 	movwcs	r0, #0
    fa3c:	04000009 	streq	r0, [r0], #-9
    fa40:	0039a000 	eorseq	sl, r9, r0
    fa44:	f7010400 			; <UNDEFINED> instruction: 0xf7010400
    fa48:	01000024 	tsteq	r0, r4, lsr #32
    fa4c:	000036b2 			; <UNDEFINED> instruction: 0x000036b2
    fa50:	000025be 			; <UNDEFINED> instruction: 0x000025be
    fa54:	000011c8 	andeq	r1, r0, r8, asr #3
    fa58:	00000000 	andeq	r0, r0, r0
    fa5c:	00007c89 	andeq	r7, r0, r9, lsl #25
    fa60:	00266102 	eoreq	r6, r6, r2, lsl #2
    fa64:	301b0600 	andscc	r0, fp, r0, lsl #12
    fa68:	03000000 	movweq	r0, #0
    fa6c:	08da0601 	ldmeq	sl, {r0, r9, sl}^
    fa70:	2f020000 	svccs	0x00020000
    fa74:	06000008 	streq	r0, [r0], -r8
    fa78:	0000421d 	andeq	r4, r0, sp, lsl r2
    fa7c:	08010300 	stmdaeq	r1, {r8, r9}
    fa80:	000008d8 	ldrdeq	r0, [r0], -r8
    fa84:	9f050203 	svcls	0x00050203
    fa88:	02000007 	andeq	r0, r0, #7
    fa8c:	000003cc 	andeq	r0, r0, ip, asr #7
    fa90:	005b2b06 	subseq	r2, fp, r6, lsl #22
    fa94:	02030000 	andeq	r0, r3, #0
    fa98:	0009a607 	andeq	sl, r9, r7, lsl #12
    fa9c:	26570200 	ldrbcs	r0, [r7], -r0, lsl #4
    faa0:	3f060000 	svccc	0x00060000
    faa4:	0000006d 	andeq	r0, r0, sp, rrx
    faa8:	e9050403 	stmdb	r5, {r0, r1, sl}
    faac:	02000005 	andeq	r0, r0, #5
    fab0:	000008ef 	andeq	r0, r0, pc, ror #17
    fab4:	007f4106 	rsbseq	r4, pc, r6, lsl #2
    fab8:	04030000 	streq	r0, [r3], #-0
    fabc:	00039307 	andeq	r9, r3, r7, lsl #6
    fac0:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    fac4:	000005e4 	andeq	r0, r0, r4, ror #11
    fac8:	8e070803 	cdphi	8, 0, cr0, cr7, cr3, {0}
    facc:	04000003 	streq	r0, [r0], #-3
    fad0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    fad4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    fad8:	00039807 	andeq	r9, r3, r7, lsl #16
    fadc:	26630200 	strbtcs	r0, [r3], -r0, lsl #4
    fae0:	13070000 	movwne	r0, #28672	; 0x7000
    fae4:	00000025 	andeq	r0, r0, r5, lsr #32
    fae8:	00083102 	andeq	r3, r8, r2, lsl #2
    faec:	37140700 	ldrcc	r0, [r4, -r0, lsl #14]
    faf0:	02000000 	andeq	r0, r0, #0
    faf4:	000003ce 	andeq	r0, r0, lr, asr #7
    faf8:	00501a07 	subseq	r1, r0, r7, lsl #20
    fafc:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
    fb00:	07000026 	streq	r0, [r0, -r6, lsr #32]
    fb04:	0000621f 	andeq	r6, r0, pc, lsl r2
    fb08:	08f10200 	ldmeq	r1!, {r9}^
    fb0c:	20070000 	andcs	r0, r7, r0
    fb10:	00000074 	andeq	r0, r0, r4, ror r0
    fb14:	0024a002 	eoreq	sl, r4, r2
    fb18:	e4330800 	ldrt	r0, [r3], #-2048	; 0xfffff800
    fb1c:	05000000 	streq	r0, [r0, #-0]
    fb20:	0000ea04 	andeq	lr, r0, r4, lsl #20
    fb24:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    fb28:	000000f1 	strdeq	r0, [r0], -r1
    fb2c:	0000fc07 	andeq	pc, r0, r7, lsl #24
    fb30:	00ad0800 	adceq	r0, sp, r0, lsl #16
    fb34:	02000000 	andeq	r0, r0, #0
    fb38:	00002bc1 	andeq	r2, r0, r1, asr #23
    fb3c:	01074209 	tsteq	r7, r9, lsl #4
    fb40:	04050000 	streq	r0, [r5], #-0
    fb44:	0000010d 	andeq	r0, r0, sp, lsl #2
    fb48:	0000ce09 	andeq	ip, r0, r9, lsl #28
    fb4c:	00012600 	andeq	r2, r1, r0, lsl #12
    fb50:	01260800 			; <UNDEFINED> instruction: 0x01260800
    fb54:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    fb58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    fb5c:	000000ce 	andeq	r0, r0, lr, asr #1
    fb60:	ad040500 	cfstr32ge	mvfx0, [r4, #-0]
    fb64:	02000000 	andeq	r0, r0, #0
    fb68:	00002d29 	andeq	r2, r0, r9, lsr #26
    fb6c:	01374609 	teqeq	r7, r9, lsl #12
    fb70:	04050000 	streq	r0, [r5], #-0
    fb74:	0000013d 	andeq	r0, r0, sp, lsr r1
    fb78:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    fb7c:	2d720200 	lfmcs	f0, 2, [r2, #-0]
    fb80:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    fb84:	00000137 	andeq	r0, r0, r7, lsr r1
    fb88:	002a5902 	eoreq	r5, sl, r2, lsl #18
    fb8c:	584a0900 	stmdapl	sl, {r8, fp}^
    fb90:	05000001 	streq	r0, [r0, #-1]
    fb94:	00015e04 	andeq	r5, r1, r4, lsl #28
    fb98:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    fb9c:	016d0000 	cmneq	sp, r0
    fba0:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    fba4:	00000000 	andeq	r0, r0, r0
    fba8:	00296802 	eoreq	r6, r9, r2, lsl #16
    fbac:	374c0900 	strbcc	r0, [ip, -r0, lsl #18]
    fbb0:	02000001 	andeq	r0, r0, #1
    fbb4:	000028c8 	andeq	r2, r0, r8, asr #17
    fbb8:	01074e09 	tsteq	r7, r9, lsl #28
    fbbc:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    fbc0:	09000029 	stmdbeq	r0, {r0, r3, r5}
    fbc4:	0000e451 	andeq	lr, r0, r1, asr r4
    fbc8:	27ed0200 	strbcs	r0, [sp, r0, lsl #4]!
    fbcc:	53090000 	movwpl	r0, #36864	; 0x9000
    fbd0:	00000199 	muleq	r0, r9, r1
    fbd4:	019f0405 	orrseq	r0, pc, r5, lsl #8
    fbd8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    fbdc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    fbe0:	08000001 	stmdaeq	r0, {r0}
    fbe4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    fbe8:	0000b808 	andeq	fp, r0, r8, lsl #16
    fbec:	00b80800 	adcseq	r0, r8, r0, lsl #16
    fbf0:	05000000 	streq	r0, [r0, #-0]
    fbf4:	0000b804 	andeq	fp, r0, r4, lsl #16
    fbf8:	2bd70200 	blcs	ff5d0400 <_estack+0xdf5cb400>
    fbfc:	57090000 	strpl	r0, [r9, -r0]
    fc00:	000001c9 	andeq	r0, r0, r9, asr #3
    fc04:	01cf0405 	biceq	r0, pc, r5, lsl #8
    fc08:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    fc0c:	e3000000 	movw	r0, #0
    fc10:	08000001 	stmdaeq	r0, {r0}
    fc14:	000001e3 	andeq	r0, r0, r3, ror #3
    fc18:	0000ce08 	andeq	ip, r0, r8, lsl #28
    fc1c:	04050000 	streq	r0, [r5], #-0
    fc20:	000000ce 	andeq	r0, r0, lr, asr #1
    fc24:	0029cb02 	eoreq	ip, r9, r2, lsl #22
    fc28:	c95a0900 	ldmdbgt	sl, {r8, fp}^
    fc2c:	02000001 	andeq	r0, r0, #1
    fc30:	00002a85 	andeq	r2, r0, r5, lsl #21
    fc34:	01c95d09 	biceq	r5, r9, r9, lsl #26
    fc38:	ff020000 			; <UNDEFINED> instruction: 0xff020000
    fc3c:	09000027 	stmdbeq	r0, {r0, r1, r2, r5}
    fc40:	0001c960 	andeq	ip, r1, r0, ror #18
    fc44:	2be50200 	blcs	ff95044c <_estack+0xdf94b44c>
    fc48:	63090000 	movwvs	r0, #36864	; 0x9000
    fc4c:	000000e4 	andeq	r0, r0, r4, ror #1
    fc50:	00283d02 	eoreq	r3, r8, r2, lsl #26
    fc54:	20650900 	rsbcs	r0, r5, r0, lsl #18
    fc58:	05000002 	streq	r0, [r0, #-2]
    fc5c:	00022604 	andeq	r2, r2, r4, lsl #12
    fc60:	02310700 	eorseq	r0, r1, #0, 14
    fc64:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    fc68:	00000000 	andeq	r0, r0, r0
    fc6c:	002d8302 	eoreq	r8, sp, r2, lsl #6
    fc70:	20670900 	rsbcs	r0, r7, r0, lsl #18
    fc74:	02000002 	andeq	r0, r0, #2
    fc78:	00002ac7 	andeq	r2, r0, r7, asr #21
    fc7c:	00eb6909 	rsceq	r6, fp, r9, lsl #18
    fc80:	62020000 	andvs	r0, r2, #0
    fc84:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    fc88:	0000eb6b 	andeq	lr, r0, fp, ror #22
    fc8c:	2a940200 	bcs	fe510494 <_estack+0xde50b494>
    fc90:	6d090000 	stcvs	0, cr0, [r9, #-0]
    fc94:	000000eb 	andeq	r0, r0, fp, ror #1
    fc98:	002aa602 	eoreq	sl, sl, r2, lsl #12
    fc9c:	eb6f0900 	bl	1bd20a4 <__ccfg+0x1bb20fc>
    fca0:	0b000000 	bleq	fca8 <__exidx_end+0xad7c>
    fca4:	557a094c 	ldrbpl	r0, [sl, #-2380]!	; 0xfffff6b4
    fca8:	0c000003 	stceq	0, cr0, [r0], {3}
    fcac:	00002a6a 	andeq	r2, r0, sl, ror #20
    fcb0:	00fc7c09 	rscseq	r7, ip, r9, lsl #24
    fcb4:	0c000000 	stceq	0, cr0, [r0], {-0}
    fcb8:	00002d55 	andeq	r2, r0, r5, asr sp
    fcbc:	012c7d09 			; <UNDEFINED> instruction: 0x012c7d09
    fcc0:	0c040000 	stceq	0, cr0, [r4], {-0}
    fcc4:	00002a7b 	andeq	r2, r0, fp, ror sl
    fcc8:	01427e09 	cmpeq	r2, r9, lsl #28
    fccc:	0c080000 	stceq	0, cr0, [r8], {-0}
    fcd0:	00002c74 	andeq	r2, r0, r4, ror ip
    fcd4:	014d7f09 	cmpeq	sp, r9, lsl #30
    fcd8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    fcdc:	00002c86 	andeq	r2, r0, r6, lsl #25
    fce0:	016d8009 	cmneq	sp, r9
    fce4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    fce8:	00002979 	andeq	r2, r0, r9, ror r9
    fcec:	01788109 	cmneq	r8, r9, lsl #2
    fcf0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    fcf4:	00002935 	andeq	r2, r0, r5, lsr r9
    fcf8:	01838209 	orreq	r8, r3, r9, lsl #4
    fcfc:	0c180000 	ldceq	0, cr0, [r8], {-0}
    fd00:	00002a70 	andeq	r2, r0, r0, ror sl
    fd04:	018e8309 	orreq	r8, lr, r9, lsl #6
    fd08:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    fd0c:	00002bff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    fd10:	01be8409 			; <UNDEFINED> instruction: 0x01be8409
    fd14:	0c200000 	stceq	0, cr0, [r0], #-0
    fd18:	000029f7 	strdeq	r2, [r0], -r7
    fd1c:	01e98509 	mvneq	r8, r9, lsl #10
    fd20:	0c240000 	stceq	0, cr0, [r4], #-0
    fd24:	00002a4f 	andeq	r2, r0, pc, asr #20
    fd28:	01f48609 	mvnseq	r8, r9, lsl #12
    fd2c:	0c280000 	stceq	0, cr0, [r8], #-0
    fd30:	00002cb4 			; <UNDEFINED> instruction: 0x00002cb4
    fd34:	01ff8709 	mvnseq	r8, r9, lsl #14
    fd38:	0c2c0000 	stceq	0, cr0, [ip], #-0
    fd3c:	00002994 	muleq	r0, r4, r9
    fd40:	02158809 	andseq	r8, r5, #589824	; 0x90000
    fd44:	0c300000 	ldceq	0, cr0, [r0], #-0
    fd48:	00002ca2 	andeq	r2, r0, r2, lsr #25
    fd4c:	02318909 	eorseq	r8, r1, #147456	; 0x24000
    fd50:	0c340000 	ldceq	0, cr0, [r4], #-0
    fd54:	0000287e 	andeq	r2, r0, lr, ror r8
    fd58:	020a8a09 	andeq	r8, sl, #36864	; 0x9000
    fd5c:	0c380000 	ldceq	0, cr0, [r8], #-0
    fd60:	00002ab6 			; <UNDEFINED> instruction: 0x00002ab6
    fd64:	023c8b09 	eorseq	r8, ip, #9216	; 0x2400
    fd68:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    fd6c:	00002c55 	andeq	r2, r0, r5, asr ip
    fd70:	02478c09 	subeq	r8, r7, #2304	; 0x900
    fd74:	0c400000 	mareq	acc0, r0, r0
    fd78:	000029d9 	ldrdeq	r2, [r0], -r9
    fd7c:	02528d09 	subseq	r8, r2, #576	; 0x240
    fd80:	0c440000 	mareq	acc0, r0, r4
    fd84:	0000282e 	andeq	r2, r0, lr, lsr #16
    fd88:	025d8e09 	subseq	r8, sp, #9, 28	; 0x90
    fd8c:	00480000 	subeq	r0, r8, r0
    fd90:	002b8502 	eoreq	r8, fp, r2, lsl #10
    fd94:	688f0900 	stmvs	pc, {r8, fp}	; <UNPREDICTABLE>
    fd98:	0b000002 	bleq	fda8 <__exidx_end+0xae7c>
    fd9c:	994e0108 	stmdbls	lr, {r3, r8}^
    fda0:	0c000003 	stceq	0, cr0, [r0], {3}
    fda4:	000037e1 	andeq	r3, r0, r1, ror #15
    fda8:	00ce4f01 	sbceq	r4, lr, r1, lsl #30
    fdac:	0c000000 	stceq	0, cr0, [r0], {-0}
    fdb0:	00003812 	andeq	r3, r0, r2, lsl r8
    fdb4:	00b85001 	adcseq	r5, r8, r1
    fdb8:	0c040000 	stceq	0, cr0, [r4], {-0}
    fdbc:	0000374c 	andeq	r3, r0, ip, asr #14
    fdc0:	00ad5101 	adceq	r5, sp, r1, lsl #2
    fdc4:	0c060000 	stceq	0, cr0, [r6], {-0}
    fdc8:	000036ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    fdcc:	00a25201 	adceq	r5, r2, r1, lsl #4
    fdd0:	00070000 	andeq	r0, r7, r0
    fdd4:	00383e02 	eorseq	r3, r8, r2, lsl #28
    fdd8:	60530100 	subsvs	r0, r3, r0, lsl #2
    fddc:	0d000003 	stceq	0, cr0, [r0, #-12]
    fde0:	00000ae9 	andeq	r0, r0, r9, ror #21
    fde4:	0301dc02 	movweq	sp, #7170	; 0x1c02
    fde8:	000003be 			; <UNDEFINED> instruction: 0x000003be
    fdec:	000aa30e 	andeq	sl, sl, lr, lsl #6
    fdf0:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    fdf4:	000000ce 	andeq	r0, r0, lr, asr #1
    fdf8:	0afe0f00 	beq	fff93a00 <_estack+0xdff8ea00>
    fdfc:	2c020000 	stccs	0, cr0, [r2], {-0}
    fe00:	0000ce02 	andeq	ip, r0, r2, lsl #28
    fe04:	02100300 	andseq	r0, r0, #0, 6
    fe08:	0400000c 	streq	r0, [r0], #-12
    fe0c:	1103022a 	tstne	r3, sl, lsr #4
    fe10:	00003434 	andeq	r3, r0, r4, lsr r4
    fe14:	00c3e905 	sbceq	lr, r3, r5, lsl #18
    fe18:	fb030000 	blx	cfe22 <__ccfg+0xafe7a>
    fe1c:	12000003 	andne	r0, r0, #3
    fe20:	00003184 	andeq	r3, r0, r4, lsl #3
    fe24:	00cee905 	sbceq	lr, lr, r5, lsl #18
    fe28:	8d130000 	ldchi	0, cr0, [r3, #-0]
    fe2c:	05000034 	streq	r0, [r0, #-52]	; 0xffffffcc
    fe30:	0000c3ef 	andeq	ip, r0, pc, ror #7
    fe34:	140d0000 	strne	r0, [sp], #-0
    fe38:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    fe3c:	1503025c 	strne	r0, [r3, #-604]	; 0xfffffda4
    fe40:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    fe44:	000036ee 	andeq	r3, r0, lr, ror #13
    fe48:	ce025c04 	cdpgt	12, 0, cr5, cr2, cr4, {0}
    fe4c:	00000000 	andeq	r0, r0, r0
    fe50:	002baf10 	eoreq	sl, fp, r0, lsl pc
    fe54:	01400300 	mrseq	r0, SPSR_irq
    fe58:	37980f03 	ldrcc	r0, [r8, r3, lsl #30]
    fe5c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    fe60:	00042b02 	andeq	r2, r4, r2, lsl #22
    fe64:	01030300 	mrseq	r0, SP_svc
    fe68:	00115c02 	andseq	r5, r1, r2, lsl #24
    fe6c:	37e81400 	strbcc	r1, [r8, r0, lsl #8]!
    fe70:	9e0a0000 	cdpls	0, 0, cr0, cr10, cr0, {0}
    fe74:	00000000 	andeq	r0, r0, r0
    fe78:	000000f4 	strdeq	r0, [r0], -r4
    fe7c:	05cd9c01 	strbeq	r9, [sp, #3073]	; 0xc01
    fe80:	44150000 	ldrmi	r0, [r5], #-0
    fe84:	01000037 	tsteq	r0, r7, lsr r0
    fe88:	0000ce7b 	andeq	ip, r0, fp, ror lr
    fe8c:	00454800 	subeq	r4, r5, r0, lsl #16
    fe90:	37061600 	strcc	r1, [r6, -r0, lsl #12]
    fe94:	7c010000 	stcvc	0, cr0, [r1], {-0}
    fe98:	000000ce 	andeq	r0, r0, lr, asr #1
    fe9c:	a41707ff 	ldrge	r0, [r7], #-2047	; 0xfffff801
    fea0:	00000003 	andeq	r0, r0, r3
    fea4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    fea8:	01000011 	tsteq	r0, r1, lsl r0
    feac:	00047d81 	andeq	r7, r4, r1, lsl #27
    feb0:	03b11800 			; <UNDEFINED> instruction: 0x03b11800
    feb4:	00010000 	andeq	r0, r1, r0
    feb8:	0003be19 	andeq	fp, r3, r9, lsl lr
    febc:	00000000 	andeq	r0, r0, r0
    fec0:	00000400 	andeq	r0, r0, r0, lsl #8
    fec4:	1a820100 	bne	fe0902cc <_estack+0xde08b2cc>
    fec8:	00000415 	andeq	r0, r0, r5, lsl r4
    fecc:	00000000 	andeq	r0, r0, r0
    fed0:	00000008 	andeq	r0, r0, r8
    fed4:	04a9a101 	strteq	sl, [r9], #257	; 0x101
    fed8:	001b0000 	andseq	r0, fp, r0
    fedc:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    fee0:	00000008 	andeq	r0, r0, r8
    fee4:	0003cb19 	andeq	ip, r3, r9, lsl fp
    fee8:	00000000 	andeq	r0, r0, r0
    feec:	00000600 	andeq	r0, r0, r0, lsl #12
    fef0:	19b10100 	ldmibne	r1!, {r8}
    fef4:	0000041e 	andeq	r0, r0, lr, lsl r4
    fef8:	00000000 	andeq	r0, r0, r0
    fefc:	00000004 	andeq	r0, r0, r4
    ff00:	fb1ab201 	blx	6bc70e <__ccfg+0x69c766>
    ff04:	00000003 	andeq	r0, r0, r3
    ff08:	0a000000 	beq	ff10 <__exidx_end+0xafe4>
    ff0c:	01000000 	mrseq	r0, (UNDEF: 0)
    ff10:	0004e1b8 			; <UNDEFINED> instruction: 0x0004e1b8
    ff14:	04081800 	streq	r1, [r8], #-2048	; 0xfffff800
    ff18:	00110000 	andseq	r0, r1, r0
    ff1c:	0003cb19 	andeq	ip, r3, r9, lsl fp
    ff20:	00000000 	andeq	r0, r0, r0
    ff24:	00000400 	andeq	r0, r0, r0, lsl #8
    ff28:	19b90100 	ldmibne	r9!, {r8}
    ff2c:	0000041e 	andeq	r0, r0, lr, lsl r4
    ff30:	00000000 	andeq	r0, r0, r0
    ff34:	00000002 	andeq	r0, r0, r2
    ff38:	cb19ba01 	blgt	67e744 <__ccfg+0x65e79c>
    ff3c:	00000003 	andeq	r0, r0, r3
    ff40:	06000000 	streq	r0, [r0], -r0
    ff44:	01000000 	mrseq	r0, (UNDEF: 0)
    ff48:	041e19cf 	ldreq	r1, [lr], #-2511	; 0xfffff631
    ff4c:	00000000 	andeq	r0, r0, r0
    ff50:	00020000 	andeq	r0, r2, r0
    ff54:	d0010000 	andle	r0, r1, r0
    ff58:	0000001c 	andeq	r0, r0, ip, lsl r0
    ff5c:	00052e00 	andeq	r2, r5, r0, lsl #28
    ff60:	50011d00 	andpl	r1, r1, r0, lsl #26
    ff64:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
    ff68:	00001c00 	andeq	r1, r0, r0, lsl #24
    ff6c:	053f0000 	ldreq	r0, [pc, #-0]!	; ff74 <__exidx_end+0xb048>
    ff70:	011d0000 	tsteq	sp, r0
    ff74:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    ff78:	001e0007 	andseq	r0, lr, r7
    ff7c:	ef000000 	svc	0x00000000
    ff80:	57000008 	strpl	r0, [r0, -r8]
    ff84:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ff88:	31015101 	tstcc	r1, r1, lsl #2
    ff8c:	0150011d 	cmpeq	r0, sp, lsl r1
    ff90:	001e0033 	andseq	r0, lr, r3, lsr r0
    ff94:	ef000000 	svc	0x00000000
    ff98:	6f000008 	svcvs	0x00000008
    ff9c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ffa0:	33015101 	movwcc	r5, #4353	; 0x1101
    ffa4:	0150011d 	cmpeq	r0, sp, lsl r1
    ffa8:	001e0034 	andseq	r0, lr, r4, lsr r0
    ffac:	05000000 	streq	r0, [r0, #-0]
    ffb0:	82000009 	andhi	r0, r0, #9
    ffb4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ffb8:	31015001 	tstcc	r1, r1
    ffbc:	00001c00 	andeq	r1, r0, r0, lsl #24
    ffc0:	05910000 	ldreq	r0, [r1]
    ffc4:	011d0000 	tsteq	sp, r0
    ffc8:	00370150 	eorseq	r0, r7, r0, asr r1
    ffcc:	0000001c 	andeq	r0, r0, ip, lsl r0
    ffd0:	0005a000 	andeq	sl, r5, r0
    ffd4:	50011d00 	andpl	r1, r1, r0, lsl #26
    ffd8:	1c003701 	stcne	7, cr3, [r0], {1}
    ffdc:	00000000 	andeq	r0, r0, r0
    ffe0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    ffe4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    ffe8:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    ffec:	00000000 	andeq	r0, r0, r0
    fff0:	000005c0 	andeq	r0, r0, r0, asr #11
    fff4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    fff8:	1f000076 	svcne	0x00000076
    fffc:	00000000 	andeq	r0, r0, r0
   10000:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
   10004:	00000076 	andeq	r0, r0, r6, ror r0
   10008:	00368a20 	eorseq	r8, r6, r0, lsr #20
   1000c:	01010a00 	tsteq	r1, r0, lsl #20
   10010:	00003c54 	andeq	r3, r0, r4, asr ip
   10014:	00000220 	andeq	r0, r0, r0, lsr #4
   10018:	07c89c01 	strbeq	r9, [r8, r1, lsl #24]
   1001c:	8a210000 	bhi	850024 <__ccfg+0x83007c>
   10020:	01000037 	tsteq	r0, r7, lsr r0
   10024:	0000ceda 	ldrdeq	ip, [r0], -sl
   10028:	00457300 	subeq	r7, r5, r0, lsl #6
   1002c:	362e1500 	strtcc	r1, [lr], -r0, lsl #10
   10030:	dc010000 	stcle	0, cr0, [r1], {-0}
   10034:	000000c3 	andeq	r0, r0, r3, asr #1
   10038:	0000459f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   1003c:	0037a415 	eorseq	sl, r7, r5, lsl r4
   10040:	c3dd0100 	bicsgt	r0, sp, #0, 2
   10044:	bd000000 	stclt	0, cr0, [r0, #-0]
   10048:	15000045 	strne	r0, [r0, #-69]	; 0xffffffbb
   1004c:	0000376a 	andeq	r3, r0, sl, ror #14
   10050:	00c3de01 	sbceq	sp, r3, r1, lsl #28
   10054:	46170000 	ldrmi	r0, [r7], -r0
   10058:	30150000 	andscc	r0, r5, r0
   1005c:	01000038 	tsteq	r0, r8, lsr r0
   10060:	0000c3df 	ldrdeq	ip, [r0], -pc	; <UNPREDICTABLE>
   10064:	00463500 	subeq	r3, r6, r0, lsl #10
   10068:	36201500 	strtcc	r1, [r0], -r0, lsl #10
   1006c:	e0010000 	and	r0, r1, r0
   10070:	000000c3 	andeq	r0, r0, r3, asr #1
   10074:	00004653 	andeq	r4, r0, r3, asr r6
   10078:	00363622 	eorseq	r3, r6, r2, lsr #12
   1007c:	c3e10100 	mvngt	r0, #0, 2
   10080:	01000000 	mrseq	r0, (UNDEF: 0)
   10084:	30d81553 	sbcscc	r1, r8, r3, asr r5
   10088:	e2010000 	and	r0, r1, #0
   1008c:	000000ce 	andeq	r0, r0, lr, asr #1
   10090:	00004666 	andeq	r4, r0, r6, ror #12
   10094:	0037c815 	eorseq	ip, r7, r5, lsl r8
   10098:	cee30100 	cdpgt	1, 14, cr0, cr3, cr0, {0}
   1009c:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
   100a0:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
   100a4:	0000364a 	andeq	r3, r0, sl, asr #12
   100a8:	00cee401 	sbceq	lr, lr, r1, lsl #8
   100ac:	46980000 	ldrmi	r0, [r8], r0
   100b0:	64230000 	strtvs	r0, [r3], #-0
   100b4:	e5010069 	str	r0, [r1, #-105]	; 0xffffff97
   100b8:	000000ce 	andeq	r0, r0, lr, asr #1
   100bc:	000046ab 	andeq	r4, r0, fp, lsr #13
   100c0:	69696423 	stmdbvs	r9!, {r0, r1, r5, sl, sp, lr}^
   100c4:	cee60100 	cdpgt	1, 14, cr0, cr6, cr0, {0}
   100c8:	e1000000 	mrs	r0, (UNDEF: 0)
   100cc:	23000046 	movwcs	r0, #70	; 0x46
   100d0:	01006974 	tsteq	r0, r4, ror r9
   100d4:	0000cee7 	andeq	ip, r0, r7, ror #29
   100d8:	00471700 	subeq	r1, r7, r0, lsl #14
   100dc:	64632300 	strbtvs	r2, [r3], #-768	; 0xfffffd00
   100e0:	cee80100 	cdpgt	1, 14, cr0, cr8, cr0, {0}
   100e4:	87000000 	strhi	r0, [r0, -r0]
   100e8:	23000047 	movwcs	r0, #71	; 0x47
   100ec:	01006c63 	tsteq	r0, r3, ror #24
   100f0:	0000cee9 	andeq	ip, r0, r9, ror #29
   100f4:	00479a00 	subeq	r9, r7, r0, lsl #20
   100f8:	365b1500 	ldrbcc	r1, [fp], -r0, lsl #10
   100fc:	ea010000 	b	50104 <__ccfg+0x3015c>
   10100:	000000ce 	andeq	r0, r0, lr, asr #1
   10104:	000047ad 	andeq	r4, r0, sp, lsr #15
   10108:	01006b24 	tsteq	r0, r4, lsr #22
   1010c:	0000ceeb 	andeq	ip, r0, fp, ror #29
   10110:	373c1300 	ldrcc	r1, [ip, -r0, lsl #6]!
   10114:	ec010000 	stc	0, cr0, [r1], {-0}
   10118:	000000ce 	andeq	r0, r0, lr, asr #1
   1011c:	00372a15 	eorseq	r2, r7, r5, lsl sl
   10120:	ceed0100 	cdpgt	1, 14, cr0, cr13, cr0, {0}
   10124:	cb000000 	blgt	1012c <__exidx_end+0xb200>
   10128:	15000047 	strne	r0, [r0, #-71]	; 0xffffffb9
   1012c:	000036fa 	strdeq	r3, [r0], -sl
   10130:	00ceee01 	sbceq	lr, lr, r1, lsl #28
   10134:	47f40000 	ldrbmi	r0, [r4, r0]!
   10138:	25150000 	ldrcs	r0, [r5, #-0]
   1013c:	01000037 	tsteq	r0, r7, lsr r0
   10140:	0000ceef 	andeq	ip, r0, pc, ror #29
   10144:	00481300 	subeq	r1, r8, r0, lsl #6
   10148:	38051500 	stmdacc	r5, {r8, sl, ip}
   1014c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
   10150:	000007c8 	andeq	r0, r0, r8, asr #15
   10154:	00004857 	andeq	r4, r0, r7, asr r8
   10158:	003c8225 	eorseq	r8, ip, r5, lsr #4
   1015c:	00001200 	andeq	r1, r0, r0, lsl #4
   10160:	00073b00 	andeq	r3, r7, r0, lsl #22
   10164:	37b02600 	ldrcc	r2, [r0, r0, lsl #12]!
   10168:	0a010000 	beq	50170 <__ccfg+0x301c8>
   1016c:	0000c301 	andeq	ip, r0, r1, lsl #6
   10170:	00486f00 	subeq	r6, r8, r0, lsl #30
   10174:	d4270000 	strtle	r0, [r7], #-0
   10178:	a8000003 	stmdage	r0, {r0, r1}
   1017c:	0600003c 			; <UNDEFINED> instruction: 0x0600003c
   10180:	01000000 	mrseq	r0, (UNDEF: 0)
   10184:	07680111 			; <UNDEFINED> instruction: 0x07680111
   10188:	e4280000 	strt	r0, [r8], #-0
   1018c:	29000003 	stmdbcs	r0, {r0, r1}
   10190:	00003ca8 	andeq	r3, r0, r8, lsr #25
   10194:	00000006 	andeq	r0, r0, r6
   10198:	0003ef2a 	andeq	lr, r3, sl, lsr #30
   1019c:	00488200 	subeq	r8, r8, r0, lsl #4
   101a0:	27000000 	strcs	r0, [r0, -r0]
   101a4:	000003d4 	ldrdeq	r0, [r0], -r4
   101a8:	00003cc0 	andeq	r3, r0, r0, asr #25
   101ac:	00000006 	andeq	r0, r0, r6
   101b0:	95011b01 	strls	r1, [r1, #-2817]	; 0xfffff4ff
   101b4:	28000007 	stmdacs	r0, {r0, r1, r2}
   101b8:	000003e4 	andeq	r0, r0, r4, ror #7
   101bc:	003cc029 	eorseq	ip, ip, r9, lsr #32
   101c0:	00000600 	andeq	r0, r0, r0, lsl #12
   101c4:	03ef2a00 	mvneq	r2, #0, 20
   101c8:	48950000 	ldmmi	r5, {}	; <UNPREDICTABLE>
   101cc:	00000000 	andeq	r0, r0, r0
   101d0:	0003d42b 	andeq	sp, r3, fp, lsr #8
   101d4:	003cca00 	eorseq	ip, ip, r0, lsl #20
   101d8:	0011b000 	andseq	fp, r1, r0
   101dc:	011f0100 	tsteq	pc, r0, lsl #2
   101e0:	000007be 			; <UNDEFINED> instruction: 0x000007be
   101e4:	0003e428 	andeq	lr, r3, r8, lsr #8
   101e8:	11b02c00 	lslsne	r2, r0, #24
   101ec:	ef2a0000 	svc	0x002a0000
   101f0:	a8000003 	stmdage	r0, {r0, r1}
   101f4:	00000048 	andeq	r0, r0, r8, asr #32
   101f8:	3c741b00 			; <UNDEFINED> instruction: 0x3c741b00
   101fc:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   10200:	05000000 	streq	r0, [r0, #-0]
   10204:	0007ce04 	andeq	ip, r7, r4, lsl #28
   10208:	00ce2d00 	sbceq	r2, lr, r0, lsl #26
   1020c:	60200000 	eorvs	r0, r0, r0
   10210:	0a000036 	beq	102f0 <__exidx_end+0xb3c4>
   10214:	3e740117 	mrccc	1, 3, r0, cr4, cr7, {0}
   10218:	00600000 	rsbeq	r0, r0, r0
   1021c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10220:	00000833 	andeq	r0, r0, r3, lsr r8
   10224:	00362e26 	eorseq	r2, r6, r6, lsr #28
   10228:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
   1022c:	000000c3 	andeq	r0, r0, r3, asr #1
   10230:	000048bb 			; <UNDEFINED> instruction: 0x000048bb
   10234:	00375426 	eorseq	r5, r7, r6, lsr #8
   10238:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
   1023c:	000000ce 	andeq	r0, r0, lr, asr #1
   10240:	000048e6 	andeq	r4, r0, r6, ror #17
   10244:	0029ed26 	eoreq	lr, r9, r6, lsr #26
   10248:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
   1024c:	000000ce 	andeq	r0, r0, lr, asr #1
   10250:	000048f9 	strdeq	r4, [r0], -r9
   10254:	00372a26 	eorseq	r2, r7, r6, lsr #20
   10258:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
   1025c:	000000ce 	andeq	r0, r0, lr, asr #1
   10260:	00004920 	andeq	r4, r0, r0, lsr #18
   10264:	003e821b 	eorseq	r8, lr, fp, lsl r2
   10268:	00091b00 	andeq	r1, r9, r0, lsl #22
   1026c:	51200000 			; <UNDEFINED> instruction: 0x51200000
   10270:	0a000038 	beq	10358 <__exidx_end+0xb42c>
   10274:	00000129 	andeq	r0, r0, r9, lsr #2
   10278:	00780000 	rsbseq	r0, r8, r0
   1027c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10280:	0000088a 	andeq	r0, r0, sl, lsl #17
   10284:	00377d26 	eorseq	r7, r7, r6, lsr #26
   10288:	01e70100 	mvneq	r0, r0, lsl #2
   1028c:	000000ce 	andeq	r0, r0, lr, asr #1
   10290:	00004949 	andeq	r4, r0, r9, asr #18
   10294:	00382326 	eorseq	r2, r8, r6, lsr #6
   10298:	01e80100 	mvneq	r0, r0, lsl #2
   1029c:	000000ce 	andeq	r0, r0, lr, asr #1
   102a0:	0000495c 	andeq	r4, r0, ip, asr r9
   102a4:	0030d826 	eorseq	sp, r0, r6, lsr #16
   102a8:	01e90100 	mvneq	r0, r0, lsl #2
   102ac:	000000ce 	andeq	r0, r0, lr, asr #1
   102b0:	0000496f 	andeq	r4, r0, pc, ror #18
   102b4:	0037d126 	eorseq	sp, r7, r6, lsr #2
   102b8:	01ea0100 	mvneq	r0, r0, lsl #2
   102bc:	000000ce 	andeq	r0, r0, lr, asr #1
   102c0:	00004982 	andeq	r4, r0, r2, lsl #19
   102c4:	36d22e00 	ldrbcc	r2, [r2], r0, lsl #28
   102c8:	420a0000 	andmi	r0, sl, #0
   102cc:	0000ce01 	andeq	ip, r0, r1, lsl #28
   102d0:	003ed400 	eorseq	sp, lr, r0, lsl #8
   102d4:	00001800 	andeq	r1, r0, r0, lsl #16
   102d8:	229c0100 	addscs	r0, ip, #0, 2
   102dc:	0000387e 	andeq	r3, r0, lr, ror r8
   102e0:	03995501 	orrseq	r5, r9, #4194304	; 0x400000
   102e4:	03050000 	movweq	r0, #20480	; 0x5000
   102e8:	20000620 	andcs	r0, r0, r0, lsr #12
   102ec:	0000ce2f 	andeq	ip, r0, pc, lsr #28
   102f0:	0008c100 	andeq	ip, r8, r0, lsl #2
   102f4:	08c13000 	stmiaeq	r1, {ip, sp}^
   102f8:	000c0000 	andeq	r0, ip, r0
   102fc:	6b070403 	blvs	1d1310 <__ccfg+0x1b1368>
   10300:	22000027 	andcs	r0, r0, #39	; 0x27
   10304:	000037b8 			; <UNDEFINED> instruction: 0x000037b8
   10308:	08d96101 	ldmeq	r9, {r0, r8, sp, lr}^
   1030c:	03050000 	movweq	r0, #20480	; 0x5000
   10310:	00000000 	andeq	r0, r0, r0
   10314:	0008b12d 	andeq	fp, r8, sp, lsr #2
   10318:	24cf3100 	strbcs	r3, [pc], #256	; 10320 <__exidx_end+0xb3f4>
   1031c:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
   10320:	000008ef 	andeq	r0, r0, pc, ror #17
   10324:	0000d908 	andeq	sp, r0, r8, lsl #18
   10328:	d5310000 	ldrle	r0, [r1, #-0]!
   1032c:	03000027 	movweq	r0, #39	; 0x27
   10330:	000905f9 	strdeq	r0, [r9], -r9
   10334:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   10338:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   1033c:	00000000 	andeq	r0, r0, r0
   10340:	00280e32 	eoreq	r0, r8, r2, lsr lr
   10344:	01100300 	tsteq	r0, r0, lsl #6
   10348:	000000ce 	andeq	r0, r0, lr, asr #1
   1034c:	0000091b 	andeq	r0, r0, fp, lsl r9
   10350:	0000ce08 	andeq	ip, r0, r8, lsl #28
   10354:	28330000 	ldmdacs	r3!, {}	; <UNPREDICTABLE>
   10358:	0b000026 	bleq	103f8 <__exidx_end+0xb4cc>
   1035c:	0000c3aa 	andeq	ip, r0, sl, lsr #7
   10360:	03cc0000 	biceq	r0, ip, #0
   10364:	00040000 	andeq	r0, r4, r0
   10368:	00003c5a 	andeq	r3, r0, sl, asr ip
   1036c:	24f70104 	ldrbtcs	r0, [r7], #260	; 0x104
   10370:	65010000 	strvs	r0, [r1, #-0]
   10374:	be00003b 	mcrlt	0, 0, r0, cr0, cr11, {1}
   10378:	28000025 	stmdacs	r0, {r0, r2, r5}
   1037c:	00000012 	andeq	r0, r0, r2, lsl r0
   10380:	f2000000 	vhadd.s8	d0, d0, d0
   10384:	0200007f 	andeq	r0, r0, #127	; 0x7f
   10388:	08da0601 	ldmeq	sl, {r0, r9, sl}^
   1038c:	01020000 	mrseq	r0, (UNDEF: 2)
   10390:	0008d808 	andeq	sp, r8, r8, lsl #16
   10394:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   10398:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
   1039c:	a6070202 	strge	r0, [r7], -r2, lsl #4
   103a0:	02000009 	andeq	r0, r0, #9
   103a4:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
   103a8:	ef030000 	svc	0x00030000
   103ac:	03000008 	movweq	r0, #8
   103b0:	00005341 	andeq	r5, r0, r1, asr #6
   103b4:	07040200 	streq	r0, [r4, -r0, lsl #4]
   103b8:	00000393 	muleq	r0, r3, r3
   103bc:	e4050802 	str	r0, [r5], #-2050	; 0xfffff7fe
   103c0:	02000005 	andeq	r0, r0, #5
   103c4:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
   103c8:	04040000 	streq	r0, [r4], #-0
   103cc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   103d0:	07040200 	streq	r0, [r4, -r0, lsl #4]
   103d4:	00000398 	muleq	r0, r8, r3
   103d8:	0008f103 	andeq	pc, r8, r3, lsl #2
   103dc:	48200400 	stmdami	r0!, {sl}
   103e0:	05000000 	streq	r0, [r0, #-0]
   103e4:	a2630201 	rsbge	r0, r3, #268435456	; 0x10000000
   103e8:	06000000 	streq	r0, [r0], -r0
   103ec:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
   103f0:	3adf0600 	bcc	ff7d1bf8 <_estack+0xdf7ccbf8>
   103f4:	06020000 	streq	r0, [r2], -r0
   103f8:	00003a4f 	andeq	r3, r0, pc, asr #20
   103fc:	388f0604 	stmcc	pc, {r2, r9, sl}	; <UNPREDICTABLE>
   10400:	00080000 	andeq	r0, r8, r0
   10404:	003a3b03 	eorseq	r3, sl, r3, lsl #22
   10408:	81680200 	cmnhi	r8, r0, lsl #4
   1040c:	05000000 	streq	r0, [r0, #-0]
   10410:	daa50201 	ble	fe950c1c <_estack+0xde94bc1c>
   10414:	06000000 	streq	r0, [r0], -r0
   10418:	00003b55 	andeq	r3, r0, r5, asr fp
   1041c:	38a7067f 	stmiacc	r7!, {r0, r1, r2, r3, r4, r5, r6, r9, sl}
   10420:	06000000 	streq	r0, [r0], -r0
   10424:	00003c06 	andeq	r3, r0, r6, lsl #24
   10428:	3a930601 	bcc	fe4d1c34 <_estack+0xde4ccc34>
   1042c:	06020000 	streq	r0, [r2], -r0
   10430:	00003bf8 	strdeq	r3, [r0], -r8
   10434:	398c0603 	stmibcc	ip, {r0, r1, r9, sl}
   10438:	00040000 	andeq	r0, r4, r0
   1043c:	003c1203 	eorseq	r1, ip, r3, lsl #4
   10440:	adac0200 	sfmge	f0, 4, [ip]
   10444:	07000000 	streq	r0, [r0, -r0]
   10448:	013d0201 	teqeq	sp, r1, lsl #4
   1044c:	00000125 	andeq	r0, r0, r5, lsr #2
   10450:	003a6906 	eorseq	r6, sl, r6, lsl #18
   10454:	57067f00 	strpl	r7, [r6, -r0, lsl #30]
   10458:	00000039 	andeq	r0, r0, r9, lsr r0
   1045c:	0039b306 	eorseq	fp, r9, r6, lsl #6
   10460:	ef060100 	svc	0x00060100
   10464:	02000039 	andeq	r0, r0, #57	; 0x39
   10468:	003b3a06 	eorseq	r3, fp, r6, lsl #20
   1046c:	b3060300 	movwlt	r0, #25344	; 0x6300
   10470:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
   10474:	00397b06 	eorseq	r7, r9, r6, lsl #22
   10478:	14060500 	strne	r0, [r6], #-1280	; 0xfffffb00
   1047c:	0600003b 			; <UNDEFINED> instruction: 0x0600003b
   10480:	003b2706 	eorseq	r2, fp, r6, lsl #14
   10484:	08000700 	stmdaeq	r0, {r8, r9, sl}
   10488:	0000393f 	andeq	r3, r0, pc, lsr r9
   1048c:	e5014702 	str	r4, [r1, #-1794]	; 0xfffff8fe
   10490:	07000000 	streq	r0, [r0, -r0]
   10494:	01590201 	cmpeq	r9, r1, lsl #4
   10498:	0000015f 	andeq	r0, r0, pc, asr r1
   1049c:	0039e006 	eorseq	lr, r9, r6
   104a0:	09067f00 	stmdbeq	r6, {r8, r9, sl, fp, ip, sp, lr}
   104a4:	0000003a 	andeq	r0, r0, sl, lsr r0
   104a8:	003a8506 	eorseq	r8, sl, r6, lsl #10
   104ac:	cc060100 	stfgts	f0, [r6], {-0}
   104b0:	02000038 	andeq	r0, r0, #56	; 0x38
   104b4:	003aef06 	eorseq	lr, sl, r6, lsl #30
   104b8:	a2060300 	andge	r0, r6, #0, 6
   104bc:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
   104c0:	39680800 	stmdbcc	r8!, {fp}^
   104c4:	60020000 	andvs	r0, r2, r0
   104c8:	00013101 	andeq	r3, r1, r1, lsl #2
   104cc:	02010700 	andeq	r0, r1, #0, 14
   104d0:	019901b8 			; <UNDEFINED> instruction: 0x019901b8
   104d4:	1f060000 	svcne	0x00060000
   104d8:	7f00003a 	svcvc	0x0000003a
   104dc:	003b4b06 	eorseq	r4, fp, r6, lsl #22
   104e0:	b0060a00 	andlt	r0, r6, r0, lsl #20
   104e4:	1400003a 	strne	r0, [r0], #-58	; 0xffffffc6
   104e8:	003ad506 	eorseq	sp, sl, r6, lsl #10
   104ec:	7b061500 	blvc	1958f4 <__ccfg+0x17594c>
   104f0:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
   104f4:	003b0106 	eorseq	r0, fp, r6, lsl #2
   104f8:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
   104fc:	0000394a 	andeq	r3, r0, sl, asr #18
   10500:	6b01bf02 	blvs	80110 <__ccfg+0x60168>
   10504:	09000001 	stmdbeq	r0, {r0}
   10508:	00003b91 	muleq	r0, r1, fp
   1050c:	76010702 	strvc	r0, [r1], -r2, lsl #14
   10510:	03000000 	movweq	r0, #0
   10514:	0038de0a 	eorseq	sp, r8, sl, lsl #28
   10518:	016a0200 	cmneq	sl, r0, lsl #4
   1051c:	0000015f 	andeq	r0, r0, pc, asr r1
   10520:	0001da01 	andeq	sp, r1, r1, lsl #20
   10524:	3a170b00 	bcc	5d312c <__ccfg+0x5b3184>
   10528:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
   1052c:	0000015f 	andeq	r0, r0, pc, asr r1
   10530:	0038c40b 	eorseq	ip, r8, fp, lsl #8
   10534:	76690100 	strbtvc	r0, [r9], -r0, lsl #2
   10538:	00000000 	andeq	r0, r0, r0
   1053c:	003c3f09 	eorseq	r3, ip, r9, lsl #30
   10540:	01320200 	teqeq	r2, r0, lsl #4
   10544:	00000076 	andeq	r0, r0, r6, ror r0
   10548:	3bd10c03 	blcc	ff45355c <_estack+0xdf44e55c>
   1054c:	72020000 	andvc	r0, r2, #0
   10550:	000000a2 	andeq	r0, r0, r2, lsr #1
   10554:	00000000 	andeq	r0, r0, r0
   10558:	00000010 	andeq	r0, r0, r0, lsl r0
   1055c:	fb0d9c01 	blx	37756a <__ccfg+0x3575c2>
   10560:	02000038 	andeq	r0, r0, #56	; 0x38
   10564:	0000dab6 			; <UNDEFINED> instruction: 0x0000dab6
   10568:	00000000 	andeq	r0, r0, r0
   1056c:	00001800 	andeq	r1, r0, r0, lsl #16
   10570:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
   10574:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   10578:	00003936 	andeq	r3, r0, r6, lsr r9
   1057c:	00da5201 	sbcseq	r5, sl, r1, lsl #4
   10580:	49950000 	ldmibmi	r5, {}	; <UNPREDICTABLE>
   10584:	0f000000 	svceq	0x00000000
   10588:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   1058c:	00003eec 	andeq	r3, r0, ip, ror #29
   10590:	0000004c 	andeq	r0, r0, ip, asr #32
   10594:	026e9c01 	rsbeq	r9, lr, #256	; 0x100
   10598:	c3100000 	tstgt	r0, #0
   1059c:	bd000001 	stclt	0, cr0, [r0, #-4]
   105a0:	10000049 	andne	r0, r0, r9, asr #32
   105a4:	000001ce 	andeq	r0, r0, lr, asr #3
   105a8:	000049dd 	ldrdeq	r4, [r0], -sp
   105ac:	003efc11 	eorseq	pc, lr, r1, lsl ip	; <UNPREDICTABLE>
   105b0:	00000e00 	andeq	r0, r0, r0, lsl #28
   105b4:	01c31200 	biceq	r1, r3, r0, lsl #4
   105b8:	ce120000 	cdpgt	0, 1, cr0, cr2, cr0, {0}
   105bc:	13000001 	movwne	r0, #1
   105c0:	000001a5 	andeq	r0, r0, r5, lsr #3
   105c4:	00003efc 	strdeq	r3, [r0], -ip
   105c8:	00000004 	andeq	r0, r0, r4
   105cc:	00007001 	andeq	r7, r0, r1
   105d0:	003aba14 	eorseq	fp, sl, r4, lsl sl
   105d4:	01510200 	cmpeq	r1, r0, lsl #4
   105d8:	00000125 	andeq	r0, r0, r5, lsr #2
   105dc:	00000000 	andeq	r0, r0, r0
   105e0:	00000030 	andeq	r0, r0, r0, lsr r0
   105e4:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
   105e8:	0b0e0000 	bleq	3905f0 <__ccfg+0x370648>
   105ec:	0100003b 	tsteq	r0, fp, lsr r0
   105f0:	00012585 	andeq	r2, r1, r5, lsl #11
   105f4:	004a1100 	subeq	r1, sl, r0, lsl #2
   105f8:	3b850b00 	blcc	fe153200 <_estack+0xde14e200>
   105fc:	86010000 	strhi	r0, [r1], -r0
   10600:	00000076 	andeq	r0, r0, r6, ror r0
   10604:	003a2d0e 	eorseq	r2, sl, lr, lsl #26
   10608:	76870100 	strvc	r0, [r7], r0, lsl #2
   1060c:	31000000 	mrscc	r0, (UNDEF: 0)
   10610:	1300004a 	movwne	r0, #74	; 0x4a
   10614:	000001da 	ldrdeq	r0, [r0], -sl
   10618:	00000000 	andeq	r0, r0, r0
   1061c:	00000004 	andeq	r0, r0, r4
   10620:	00158601 	andseq	r8, r5, r1, lsl #12
   10624:	b2000000 	andlt	r0, r0, #0
   10628:	00000001 	andeq	r0, r0, r1
   1062c:	003baf16 	eorseq	sl, fp, r6, lsl pc
   10630:	01190200 	tsteq	r9, r0, lsl #4
   10634:	00000076 	andeq	r0, r0, r6, ror r0
   10638:	0002e803 	andeq	lr, r2, r3, lsl #16
   1063c:	39991700 	ldmibcc	r9, {r8, r9, sl, ip}
   10640:	1b020000 	blne	90648 <__ccfg+0x706a0>
   10644:	00007601 	andeq	r7, r0, r1, lsl #12
   10648:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
   1064c:	02000039 	andeq	r0, r0, #57	; 0x39
   10650:	019901c9 	orrseq	r0, r9, r9, asr #3
   10654:	3f380000 	svccc	0x00380000
   10658:	006c0000 	rsbeq	r0, ip, r0
   1065c:	9c010000 	stcls	0, cr0, [r1], {-0}
   10660:	00000365 	andeq	r0, r0, r5, ror #6
   10664:	0039750e 	eorseq	r7, r9, lr, lsl #10
   10668:	99a80100 	stmibls	r8!, {r8}
   1066c:	44000001 	strmi	r0, [r0], #-1
   10670:	0b00004a 	bleq	107a0 <__exidx_end+0xb874>
   10674:	00003a00 	andeq	r3, r0, r0, lsl #20
   10678:	0076a901 	rsbseq	sl, r6, r1, lsl #18
   1067c:	c6180000 	ldrgt	r0, [r8], -r0
   10680:	0100003b 	tsteq	r0, fp, lsr r0
   10684:	000076aa 	andeq	r7, r0, sl, lsr #13
   10688:	19540100 	ldmdbne	r4, {r8}^
   1068c:	000001a5 	andeq	r0, r0, r5, lsr #3
   10690:	00003f3a 	andeq	r3, r0, sl, lsr pc
   10694:	000011f8 	strdeq	r1, [r0], -r8
   10698:	ca1aa901 	bgt	6baaa4 <__ccfg+0x69aafc>
   1069c:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
   106a0:	1000003f 	andne	r0, r0, pc, lsr r0
   106a4:	01000012 	tsteq	r0, r2, lsl r0
   106a8:	00035baa 	andeq	r5, r3, sl, lsr #23
   106ac:	12101b00 	andsne	r1, r0, #0, 22
   106b0:	db100000 	blle	4106b8 <__ccfg+0x3f0710>
   106b4:	a1000002 	tstge	r0, r2
   106b8:	0000004a 	andeq	r0, r0, sl, asr #32
   106bc:	3f521500 	svccc	0x00521500
   106c0:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
   106c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   106c8:	000039c4 	andeq	r3, r0, r4, asr #19
   106cc:	72018302 	andvc	r8, r1, #134217728	; 0x8000000
   106d0:	03000003 	movweq	r0, #3
   106d4:	5c020102 	stfpls	f0, [r2], {2}
   106d8:	09000011 	stmdbeq	r0, {r0, r4}
   106dc:	00003c20 	andeq	r3, r0, r0, lsr #24
   106e0:	7201f002 	andvc	pc, r1, #2
   106e4:	03000003 	movweq	r0, #3
   106e8:	0031211c 	eorseq	r2, r1, ip, lsl r1
   106ec:	02430200 	subeq	r0, r3, #0, 4
   106f0:	00003fa4 	andeq	r3, r0, r4, lsr #31
   106f4:	00000016 	andeq	r0, r0, r6, lsl r0
   106f8:	651d9c01 	ldrvs	r9, [sp, #-3073]	; 0xfffff3ff
   106fc:	a6000003 	strge	r0, [r0], -r3
   10700:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   10704:	01000000 	mrseq	r0, (UNDEF: 0)
   10708:	0003b5e2 	andeq	fp, r3, r2, ror #11
   1070c:	3faa1500 	svccc	0x00aa1500
   10710:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
   10714:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   10718:	00000379 	andeq	r0, r0, r9, ror r3
   1071c:	00003fae 	andeq	r3, r0, lr, lsr #31
   10720:	00000004 	andeq	r0, r0, r4
   10724:	b215e301 	andslt	lr, r5, #67108864	; 0x4000000
   10728:	e800003f 	stmda	r0, {r0, r1, r2, r3, r4, r5}
   1072c:	00000002 	andeq	r0, r0, r2
   10730:	05a70000 	streq	r0, [r7, #0]!
   10734:	00040000 	andeq	r0, r4, r0
   10738:	00003e28 	andeq	r3, r0, r8, lsr #28
   1073c:	24f70104 	ldrbtcs	r0, [r7], #260	; 0x104
   10740:	17010000 	strne	r0, [r1, -r0]
   10744:	be00003d 	mcrlt	0, 0, r0, cr0, cr13, {1}
   10748:	60000025 	andvs	r0, r0, r5, lsr #32
   1074c:	00000012 	andeq	r0, r0, r2, lsl r0
   10750:	21000000 	mrscs	r0, (UNDEF: 0)
   10754:	02000082 	andeq	r0, r0, #130	; 0x82
   10758:	08da0601 	ldmeq	sl, {r0, r9, sl}^
   1075c:	2f030000 	svccs	0x00030000
   10760:	03000008 	movweq	r0, #8
   10764:	0000371d 	andeq	r3, r0, sp, lsl r7
   10768:	08010200 	stmdaeq	r1, {r9}
   1076c:	000008d8 	ldrdeq	r0, [r0], -r8
   10770:	9f050202 	svcls	0x00050202
   10774:	03000007 	movweq	r0, #7
   10778:	000003cc 	andeq	r0, r0, ip, asr #7
   1077c:	00502b03 	subseq	r2, r0, r3, lsl #22
   10780:	02020000 	andeq	r0, r2, #0
   10784:	0009a607 	andeq	sl, r9, r7, lsl #12
   10788:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   1078c:	000005e9 	andeq	r0, r0, r9, ror #11
   10790:	0008ef03 	andeq	lr, r8, r3, lsl #30
   10794:	69410300 	stmdbvs	r1, {r8, r9}^
   10798:	02000000 	andeq	r0, r0, #0
   1079c:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
   107a0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   107a4:	0005e405 	andeq	lr, r5, r5, lsl #8
   107a8:	07080200 	streq	r0, [r8, -r0, lsl #4]
   107ac:	0000038e 	andeq	r0, r0, lr, lsl #7
   107b0:	69050404 	stmdbvs	r5, {r2, sl}
   107b4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   107b8:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
   107bc:	31030000 	mrscc	r0, (UNDEF: 3)
   107c0:	04000008 	streq	r0, [r0], #-8
   107c4:	00002c14 	andeq	r2, r0, r4, lsl ip
   107c8:	03ce0300 	biceq	r0, lr, #0, 6
   107cc:	1a040000 	bne	1107d4 <__ccfg+0xf082c>
   107d0:	00000045 	andeq	r0, r0, r5, asr #32
   107d4:	0008f103 	andeq	pc, r8, r3, lsl #2
   107d8:	5e200400 	cdppl	4, 2, cr0, cr0, cr0, {0}
   107dc:	05000000 	streq	r0, [r0, #-0]
   107e0:	00003c90 	muleq	r0, r0, ip
   107e4:	e6038901 	str	r8, [r3], -r1, lsl #18
   107e8:	06000000 	streq	r0, [r0], -r0
   107ec:	00003c72 	andeq	r3, r0, r2, ror ip
   107f0:	00a28901 	adceq	r8, r2, r1, lsl #18
   107f4:	e3060000 	movw	r0, #24576	; 0x6000
   107f8:	0100003c 	tsteq	r0, ip, lsr r0
   107fc:	0000a289 	andeq	sl, r0, r9, lsl #5
   10800:	3d3e0600 	ldccc	6, cr0, [lr, #-0]
   10804:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
   10808:	000000a2 	andeq	r0, r0, r2, lsr #1
   1080c:	00247f07 	eoreq	r7, r4, r7, lsl #30
   10810:	e68c0100 	str	r0, [ip], r0, lsl #2
   10814:	00000000 	andeq	r0, r0, r0
   10818:	5c020102 	stfpls	f0, [r2], {2}
   1081c:	08000011 	stmdaeq	r0, {r0, r4}
   10820:	00003cf1 	strdeq	r3, [r0], -r1
   10824:	00a2a901 	adceq	sl, r2, r1, lsl #18
   10828:	2a030000 	bcs	d0830 <__ccfg+0xb0888>
   1082c:	06000001 	streq	r0, [r0], -r1
   10830:	00003c72 	andeq	r3, r0, r2, ror ip
   10834:	00a2a901 	adceq	sl, r2, r1, lsl #18
   10838:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
   1083c:	0100003d 	tsteq	r0, sp, lsr r0
   10840:	0000a2a9 	andeq	sl, r0, r9, lsr #5
   10844:	3c8b0700 	stccc	7, cr0, [fp], {0}
   10848:	ab010000 	blge	50850 <__ccfg+0x308a8>
   1084c:	000000a2 	andeq	r0, r0, r2, lsr #1
   10850:	00247f07 	eoreq	r7, r4, r7, lsl #30
   10854:	e6ad0100 	strt	r0, [sp], r0, lsl #2
   10858:	00000000 	andeq	r0, r0, r0
   1085c:	0000ad09 	andeq	sl, r0, r9, lsl #26
   10860:	003fbc00 	eorseq	fp, pc, r0, lsl #24
   10864:	00002800 	andeq	r2, r0, r0, lsl #16
   10868:	719c0100 	orrsvc	r0, ip, r0, lsl #2
   1086c:	0a000001 	beq	10878 <__exidx_end+0xb94c>
   10870:	000000b9 	strheq	r0, [r0], -r9
   10874:	00004ab4 			; <UNDEFINED> instruction: 0x00004ab4
   10878:	0000c40a 	andeq	ip, r0, sl, lsl #8
   1087c:	004af900 	subeq	pc, sl, r0, lsl #18
   10880:	00da0b00 	sbcseq	r0, sl, r0, lsl #22
   10884:	4b3e0000 	blmi	f9088c <__ccfg+0xf708e4>
   10888:	cf0c0000 	svcgt	0x000c0000
   1088c:	04000000 	streq	r0, [r0], #-0
   10890:	003fc60d 	eorseq	ip, pc, sp, lsl #12
   10894:	00059400 	andeq	r9, r5, r0, lsl #8
   10898:	3fde0e00 	svccc	0x00de0e00
   1089c:	059f0000 	ldreq	r0, [pc]	; 108a4 <__exidx_end+0xb978>
   108a0:	0f000000 	svceq	0x00000000
   108a4:	0000333b 	andeq	r3, r0, fp, lsr r3
   108a8:	e401ca01 	str	ip, [r1], #-2561	; 0xfffff5ff
   108ac:	0800003f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5}
   108b0:	01000000 	mrseq	r0, (UNDEF: 0)
   108b4:	0001d19c 	muleq	r1, ip, r1
   108b8:	0ce51000 	stcleq	0, cr1, [r5]
   108bc:	42020000 	andmi	r0, r2, #0
   108c0:	000000a2 	andeq	r0, r0, r2, lsr #1
   108c4:	00004b64 	andeq	r4, r0, r4, ror #22
   108c8:	003c5210 	eorseq	r5, ip, r0, lsl r2
   108cc:	a2420200 	subge	r0, r2, #0, 4
   108d0:	85000000 	strhi	r0, [r0, #-0]
   108d4:	1000004b 	andne	r0, r0, fp, asr #32
   108d8:	00003ce9 	andeq	r3, r0, r9, ror #25
   108dc:	00a24302 	adceq	r4, r2, r2, lsl #6
   108e0:	4ba60000 	blmi	fe9908e8 <_estack+0xde98b8e8>
   108e4:	ec110000 	ldc	0, cr0, [r1], {-0}
   108e8:	2a00003f 	bcs	109ec <__exidx_end+0xbac0>
   108ec:	12000001 	andne	r0, r0, #1
   108f0:	f3035101 	vrhadd.u8	d5, d3, d1
   108f4:	01125201 	tsteq	r2, r1, lsl #4
   108f8:	01f30750 	mvnseq	r0, r0, asr r7
   108fc:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
   10900:	0f000022 	svceq	0x00000022
   10904:	00003d03 	andeq	r3, r0, r3, lsl #26
   10908:	0001df01 	andeq	sp, r1, r1, lsl #30
   1090c:	22000000 	andcs	r0, r0, #0
   10910:	01000000 	mrseq	r0, (UNDEF: 0)
   10914:	0002ea9c 	muleq	r2, ip, sl
   10918:	0ce51000 	stcleq	0, cr1, [r5]
   1091c:	57020000 	strpl	r0, [r2, -r0]
   10920:	000000a2 	andeq	r0, r0, r2, lsr #1
   10924:	00004bc7 	andeq	r4, r0, r7, asr #23
   10928:	003c5210 	eorseq	r5, ip, r0, lsl r2
   1092c:	a2570200 	subsge	r0, r7, #0, 4
   10930:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   10934:	1000004b 	andne	r0, r0, fp, asr #32
   10938:	00001d05 	andeq	r1, r0, r5, lsl #26
   1093c:	00a25802 	adceq	r5, r2, r2, lsl #16
   10940:	4c090000 	stcmi	0, cr0, [r9], {-0}
   10944:	ac100000 	ldcge	0, cr0, [r0], {-0}
   10948:	0200003c 	andeq	r0, r0, #60	; 0x3c
   1094c:	0000a258 	andeq	sl, r0, r8, asr r2
   10950:	004c5400 	subeq	r5, ip, r0, lsl #8
   10954:	3d321300 	ldccc	3, cr1, [r2, #-0]
   10958:	5a020000 	bpl	90960 <__ccfg+0x709b8>
   1095c:	000000a2 	andeq	r0, r0, r2, lsr #1
   10960:	00004c75 	andeq	r4, r0, r5, ror ip
   10964:	003cb713 	eorseq	fp, ip, r3, lsl r7
   10968:	a25b0200 	subsge	r0, fp, #0, 4
   1096c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   10970:	1100004d 	tstne	r0, sp, asr #32
   10974:	00000000 	andeq	r0, r0, r0
   10978:	0000012a 	andeq	r0, r0, sl, lsr #2
   1097c:	45510112 	ldrbmi	r0, [r1, #-274]	; 0xfffffeee
   10980:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   10984:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   10988:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   1098c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   10990:	13160001 	tstne	r6, #1
   10994:	f3302440 	vshl.u64	q1, q0, q0
   10998:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   1099c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
   109a0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   109a4:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   109a8:	f3131600 	vmax.u16	d1, d3, d0
   109ac:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   109b0:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
   109b4:	0001282e 	andeq	r2, r1, lr, lsr #16
   109b8:	01f31316 	mvnseq	r1, r6, lsl r3
   109bc:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
   109c0:	13160001 	tstne	r6, #1
   109c4:	50011221 	andpl	r1, r1, r1, lsr #4
   109c8:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
   109cc:	01f32431 	mvnseq	r2, r1, lsr r4
   109d0:	80232250 	eorhi	r2, r3, r0, asr r2
   109d4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   109d8:	01f32431 	mvnseq	r2, r1, lsr r4
   109dc:	01f32250 	mvnseq	r2, r0, asr r2
   109e0:	30254052 	eorcc	r4, r5, r2, asr r0
   109e4:	00012829 	andeq	r2, r1, r9, lsr #16
   109e8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
   109ec:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   109f0:	01f32431 	mvnseq	r2, r1, lsr r4
   109f4:	80232250 	eorhi	r2, r3, r0, asr r2
   109f8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   109fc:	01f32431 	mvnseq	r2, r1, lsr r4
   10a00:	01f32250 	mvnseq	r2, r0, asr r2
   10a04:	30254052 	eorcc	r4, r5, r2, asr r0
   10a08:	00012829 	andeq	r2, r1, r9, lsr #16
   10a0c:	01f31316 	mvnseq	r1, r6, lsl r3
   10a10:	30254052 	eorcc	r4, r5, r2, asr r0
   10a14:	0001282e 	andeq	r2, r1, lr, lsr #16
   10a18:	00001316 	andeq	r1, r0, r6, lsl r3
   10a1c:	003cca0f 	eorseq	ip, ip, pc, lsl #20
   10a20:	01f60100 	mvnseq	r0, r0, lsl #2
   10a24:	00000000 	andeq	r0, r0, r0
   10a28:	0000002e 	andeq	r0, r0, lr, lsr #32
   10a2c:	041f9c01 	ldreq	r9, [pc], #-3073	; 10a34 <__exidx_end+0xbb08>
   10a30:	e5100000 	ldr	r0, [r0, #-0]
   10a34:	0200000c 	andeq	r0, r0, #12
   10a38:	0000a283 	andeq	sl, r0, r3, lsl #5
   10a3c:	004d5500 	subeq	r5, sp, r0, lsl #10
   10a40:	3c521000 	mracc	r1, r2, acc0
   10a44:	83020000 	movwhi	r0, #8192	; 0x2000
   10a48:	000000a2 	andeq	r0, r0, r2, lsr #1
   10a4c:	00004d76 	andeq	r4, r0, r6, ror sp
   10a50:	001d0510 	andseq	r0, sp, r0, lsl r5
   10a54:	a2840200 	addge	r0, r4, #0, 4
   10a58:	97000000 	strls	r0, [r0, -r0]
   10a5c:	1000004d 	andne	r0, r0, sp, asr #32
   10a60:	00003cc0 	andeq	r3, r0, r0, asr #25
   10a64:	00a28402 	adceq	r8, r2, r2, lsl #8
   10a68:	4de80000 	stclmi	0, cr0, [r8]
   10a6c:	b7100000 	ldrlt	r0, [r0, -r0]
   10a70:	0200003c 	andeq	r0, r0, #60	; 0x3c
   10a74:	00009785 	andeq	r9, r0, r5, lsl #15
   10a78:	004e3900 	subeq	r3, lr, r0, lsl #18
   10a7c:	3d321300 	ldccc	3, cr1, [r2, #-0]
   10a80:	87020000 	strhi	r0, [r2, -r0]
   10a84:	000000a2 	andeq	r0, r0, r2, lsr #1
   10a88:	00004e59 	andeq	r4, r0, r9, asr lr
   10a8c:	003cac13 	eorseq	sl, ip, r3, lsl ip
   10a90:	a2880200 	addge	r0, r8, #0, 4
   10a94:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   10a98:	1100004e 	tstne	r0, lr, asr #32
   10a9c:	00000000 	andeq	r0, r0, r0
   10aa0:	0000012a 	andeq	r0, r0, sl, lsr #2
   10aa4:	40510112 	subsmi	r0, r1, r2, lsl r1
   10aa8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   10aac:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   10ab0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   10ab4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   10ab8:	8000000f 	andhi	r0, r0, pc
   10abc:	0001282b 	andeq	r2, r1, fp, lsr #16
   10ac0:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
   10ac4:	0294007d 	addseq	r0, r4, #125	; 0x7d
   10ac8:	1affff0a 	bne	106f8 <__exidx_end+0xb7cc>
   10acc:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   10ad0:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
   10ad4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   10ad8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   10adc:	8000000f 	andhi	r0, r0, pc
   10ae0:	0001282b 	andeq	r2, r1, fp, lsr #16
   10ae4:	21241316 			; <UNDEFINED> instruction: 0x21241316
   10ae8:	63500112 	cmpvs	r0, #-2147483644	; 0x80000004
   10aec:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   10af0:	5001f324 	andpl	pc, r1, r4, lsr #6
   10af4:	04802322 	streq	r2, [r0], #802	; 0x322
   10af8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
   10afc:	5001f324 	andpl	pc, r1, r4, lsr #6
   10b00:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
   10b04:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   10b08:	00000f0c 	andeq	r0, r0, ip, lsl #30
   10b0c:	01282c80 	smlawbeq	r8, r0, ip, r2
   10b10:	23131600 	tstcs	r3, #0, 12
   10b14:	01f30484 	mvnseq	r0, r4, lsl #9
   10b18:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   10b1c:	23225001 			; <UNDEFINED> instruction: 0x23225001
   10b20:	01f30480 	mvnseq	r0, r0, lsl #9
   10b24:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   10b28:	f3225001 	vhadd.u32	d5, d2, d1
   10b2c:	4b405301 	blmi	1025738 <__ccfg+0x1005790>
   10b30:	0f0c2224 	svceq	0x000c2224
   10b34:	2c800000 	stccs	0, cr0, [r0], {0}
   10b38:	16000128 	strne	r0, [r0], -r8, lsr #2
   10b3c:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
   10b40:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   10b44:	00000f0c 	andeq	r0, r0, ip, lsl #30
   10b48:	01282b80 	smlawbeq	r8, r0, fp, r2
   10b4c:	00131600 	andseq	r1, r3, r0, lsl #12
   10b50:	3c781400 	cfldrdcc	mvd1, [r8], #-0
   10b54:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
   10b58:	00009702 	andeq	r9, r0, r2, lsl #14
   10b5c:	00000000 	andeq	r0, r0, r0
   10b60:	00003400 	andeq	r3, r0, r0, lsl #8
   10b64:	d29c0100 	addsle	r0, ip, #0, 2
   10b68:	10000004 	andne	r0, r0, r4
   10b6c:	00000ce5 	andeq	r0, r0, r5, ror #25
   10b70:	00a2af02 	adceq	sl, r2, r2, lsl #30
   10b74:	4f5f0000 	svcmi	0x005f0000
   10b78:	52100000 	andspl	r0, r0, #0
   10b7c:	0200003c 	andeq	r0, r0, #60	; 0x3c
   10b80:	0000a2af 	andeq	sl, r0, pc, lsr #5
   10b84:	004f8000 	subeq	r8, pc, r0
   10b88:	1d051000 	stcne	0, cr1, [r5, #-0]
   10b8c:	af020000 	svcge	0x00020000
   10b90:	000000a2 	andeq	r0, r0, r2, lsr #1
   10b94:	00004fa1 	andeq	r4, r0, r1, lsr #31
   10b98:	003d3213 	eorseq	r3, sp, r3, lsl r2
   10b9c:	a2b10200 	adcsge	r0, r1, #0, 4
   10ba0:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
   10ba4:	1300004f 	movwne	r0, #79	; 0x4f
   10ba8:	00003ca3 	andeq	r3, r0, r3, lsr #25
   10bac:	0097b202 	addseq	fp, r7, r2, lsl #4
   10bb0:	50180000 	andspl	r0, r8, r0
   10bb4:	ed150000 	ldc	0, cr0, [r5, #-0]
   10bb8:	00000000 	andeq	r0, r0, r0
   10bbc:	1a000000 	bne	10bc4 <__exidx_end+0xbc98>
   10bc0:	02000000 	andeq	r0, r0, #0
   10bc4:	01080cca 	smlabteq	r8, sl, ip, r0
   10bc8:	0a020000 	beq	90bd0 <__ccfg+0x70c28>
   10bcc:	000000fd 	strdeq	r0, [r0], -sp
   10bd0:	00005030 	andeq	r5, r0, r0, lsr r0
   10bd4:	00000016 	andeq	r0, r0, r6, lsl r0
   10bd8:	00001a00 	andeq	r1, r0, r0, lsl #20
   10bdc:	01130b00 	tsteq	r3, r0, lsl #22
   10be0:	506a0000 	rsbpl	r0, sl, r0
   10be4:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
   10be8:	83000001 	movwhi	r0, #1
   10bec:	0d000050 	stceq	0, cr0, [r0, #-320]	; 0xfffffec0
   10bf0:	00000000 	andeq	r0, r0, r0
   10bf4:	00000594 	muleq	r0, r4, r5
   10bf8:	0000000d 	andeq	r0, r0, sp
   10bfc:	00059f00 	andeq	r9, r5, r0, lsl #30
   10c00:	00000000 	andeq	r0, r0, r0
   10c04:	003c5a14 	eorseq	r5, ip, r4, lsl sl
   10c08:	021d0100 	andseq	r0, sp, #0, 2
   10c0c:	00000097 	muleq	r0, r7, r0
   10c10:	00000000 	andeq	r0, r0, r0
   10c14:	00000040 	andeq	r0, r0, r0, asr #32
   10c18:	05949c01 	ldreq	r9, [r4, #3073]	; 0xc01
   10c1c:	e5100000 	ldr	r0, [r0, #-0]
   10c20:	0200000c 	andeq	r0, r0, #12
   10c24:	0000a2dd 	ldrdeq	sl, [r0], -sp
   10c28:	00509a00 	subseq	r9, r0, r0, lsl #20
   10c2c:	3c521000 	mracc	r1, r2, acc0
   10c30:	dd020000 	stcle	0, cr0, [r2, #-0]
   10c34:	000000a2 	andeq	r0, r0, r2, lsr #1
   10c38:	000050bb 	strheq	r5, [r0], -fp
   10c3c:	001d0510 	andseq	r0, sp, r0, lsl r5
   10c40:	a2de0200 	sbcsge	r0, lr, #0, 4
   10c44:	dc000000 	stcle	0, cr0, [r0], {-0}
   10c48:	10000050 	andne	r0, r0, r0, asr r0
   10c4c:	00003cc0 	andeq	r3, r0, r0, asr #25
   10c50:	00a2de02 	adceq	sp, r2, r2, lsl #28
   10c54:	511f0000 	tstpl	pc, r0
   10c58:	32130000 	andscc	r0, r3, #0
   10c5c:	0200003d 	andeq	r0, r0, #61	; 0x3d
   10c60:	0000a2e0 	andeq	sl, r0, r0, ror #5
   10c64:	00516200 	subseq	r6, r1, r0, lsl #4
   10c68:	3ca31300 	stccc	3, cr1, [r3]
   10c6c:	e1020000 	mrs	r0, (UNDEF: 2)
   10c70:	00000097 	muleq	r0, r7, r0
   10c74:	000051bd 			; <UNDEFINED> instruction: 0x000051bd
   10c78:	0000ed15 	andeq	lr, r0, r5, lsl sp
   10c7c:	00000000 	andeq	r0, r0, r0
   10c80:	00001a00 	andeq	r1, r0, r0, lsl #20
   10c84:	0cfa0200 	lfmeq	f0, 2, [sl]
   10c88:	00000108 	andeq	r0, r0, r8, lsl #2
   10c8c:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
   10c90:	51e00000 	mvnpl	r0, r0
   10c94:	00160000 	andseq	r0, r6, r0
   10c98:	1a000000 	bne	10ca0 <__exidx_end+0xbd74>
   10c9c:	0b000000 	bleq	10ca4 <__exidx_end+0xbd78>
   10ca0:	00000113 	andeq	r0, r0, r3, lsl r1
   10ca4:	00005220 	andeq	r5, r0, r0, lsr #4
   10ca8:	00011e0b 	andeq	r1, r1, fp, lsl #28
   10cac:	00523900 	subseq	r3, r2, r0, lsl #18
   10cb0:	00000d00 	andeq	r0, r0, r0, lsl #26
   10cb4:	05940000 	ldreq	r0, [r4]
   10cb8:	000d0000 	andeq	r0, sp, r0
   10cbc:	9f000000 	svcls	0x00000000
   10cc0:	00000005 	andeq	r0, r0, r5
   10cc4:	b1170000 	tstlt	r7, r0
   10cc8:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
   10ccc:	0000a26a 	andeq	sl, r0, sl, ror #4
   10cd0:	24c01700 	strbcs	r1, [r0], #1792	; 0x700
   10cd4:	84050000 	strhi	r0, [r5], #-0
   10cd8:	000000a2 	andeq	r0, r0, r2, lsr #1
   10cdc:	000f3100 	andeq	r3, pc, r0, lsl #2
   10ce0:	7c000400 	cfstrsvc	mvf0, [r0], {-0}
   10ce4:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
   10ce8:	00400601 	subeq	r0, r0, r1, lsl #12
   10cec:	3f1f0c00 	svccc	0x001f0c00
   10cf0:	40a10000 	adcmi	r0, r1, r0
   10cf4:	3fec0000 	svccc	0x00ec0000
   10cf8:	00aa0000 	adceq	r0, sl, r0
   10cfc:	84430000 	strbhi	r0, [r3], #-0
   10d00:	04020000 	streq	r0, [r2], #-0
   10d04:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   10d08:	2dc10300 	stclcs	3, cr0, [r1]
   10d0c:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
   10d10:	00003817 	andeq	r3, r0, r7, lsl r8
   10d14:	07040400 	streq	r0, [r4, -r0, lsl #8]
   10d18:	00000398 	muleq	r0, r8, r3
   10d1c:	003eb305 	eorseq	fp, lr, r5, lsl #6
   10d20:	01480200 	mrseq	r0, (UNDEF: 104)
   10d24:	00003818 	andeq	r3, r0, r8, lsl r8
   10d28:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
   10d2c:	000005e4 	andeq	r0, r0, r4, ror #11
   10d30:	d7040804 	strle	r0, [r4, -r4, lsl #16]
   10d34:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   10d38:	00000892 	muleq	r0, r2, r8
   10d3c:	17016502 	strne	r6, [r1, -r2, lsl #10]
   10d40:	00000038 	andeq	r0, r0, r8, lsr r0
   10d44:	da060104 	ble	19115c <__ccfg+0x1711b4>
   10d48:	04000008 	streq	r0, [r0], #-8
   10d4c:	08d80801 	ldmeq	r8, {r0, fp}^
   10d50:	02040000 	andeq	r0, r4, #0
   10d54:	00079f05 	andeq	r9, r7, r5, lsl #30
   10d58:	07020400 	streq	r0, [r2, -r0, lsl #8]
   10d5c:	000009a6 	andeq	r0, r0, r6, lsr #19
   10d60:	e9050404 	stmdb	r5, {r2, sl}
   10d64:	06000005 	streq	r0, [r0], -r5
   10d68:	00000083 	andeq	r0, r0, r3, lsl #1
   10d6c:	93070404 	movwls	r0, #29700	; 0x7404
   10d70:	04000003 	streq	r0, [r0], #-3
   10d74:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
   10d78:	e2030000 	and	r0, r3, #0
   10d7c:	03000009 	movweq	r0, #9
   10d80:	00830e2e 	addeq	r0, r3, lr, lsr #28
   10d84:	67030000 	strvs	r0, [r3, -r0]
   10d88:	03000002 	movweq	r0, #2
   10d8c:	00830e74 	addeq	r0, r3, r4, ror lr
   10d90:	04070000 	streq	r0, [r7], #-0
   10d94:	d703a503 	strle	sl, [r3, -r3, lsl #10]
   10d98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10d9c:	00000587 	andeq	r0, r0, r7, lsl #11
   10da0:	5a0ca703 	bpl	33a9b4 <__ccfg+0x31aa0c>
   10da4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10da8:	000007e6 	andeq	r0, r0, r6, ror #15
   10dac:	d713a803 	ldrle	sl, [r3, -r3, lsl #16]
   10db0:	00000000 	andeq	r0, r0, r0
   10db4:	00006e09 	andeq	r6, r0, r9, lsl #28
   10db8:	0000e700 	andeq	lr, r0, r0, lsl #14
   10dbc:	00380a00 	eorseq	r0, r8, r0, lsl #20
   10dc0:	00030000 	andeq	r0, r3, r0
   10dc4:	a203080b 	andge	r0, r3, #720896	; 0xb0000
   10dc8:	00010b09 	andeq	r0, r1, r9, lsl #22
   10dcc:	03220c00 			; <UNDEFINED> instruction: 0x03220c00
   10dd0:	a4030000 	strge	r0, [r3], #-0
   10dd4:	00002507 	andeq	r2, r0, r7, lsl #10
   10dd8:	aa0c0000 	bge	310de0 <__ccfg+0x2f0e38>
   10ddc:	03000004 	movweq	r0, #4
   10de0:	00b505a9 	adcseq	r0, r5, r9, lsr #11
   10de4:	00040000 	andeq	r0, r4, r0
   10de8:	0006a503 	andeq	sl, r6, r3, lsl #10
   10dec:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   10df0:	000000e7 	andeq	r0, r0, r7, ror #1
   10df4:	170e040d 	strne	r0, [lr, -sp, lsl #8]
   10df8:	03000001 	movweq	r0, #1
   10dfc:	00000629 	andeq	r0, r0, r9, lsr #12
   10e00:	8f191604 	svchi	0x00191604
   10e04:	03000000 	movweq	r0, #0
   10e08:	000001fe 	strdeq	r0, [r0], -lr
   10e0c:	250d0c05 	strcs	r0, [sp, #-3077]	; 0xfffff3fb
   10e10:	03000000 	movweq	r0, #0
   10e14:	00000555 	andeq	r0, r0, r5, asr r5
   10e18:	2a1b2304 	bcs	6d9a30 <__ccfg+0x6b9a88>
   10e1c:	0f000001 	svceq	0x00000001
   10e20:	000002a7 	andeq	r0, r0, r7, lsr #5
   10e24:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
   10e28:	0000019c 	muleq	r0, ip, r1
   10e2c:	000a320c 	andeq	r3, sl, ip, lsl #4
   10e30:	13360400 	teqne	r6, #0, 8
   10e34:	0000019c 	muleq	r0, ip, r1
   10e38:	6b5f1000 	blvs	17d4e40 <__ccfg+0x17b4e98>
   10e3c:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
   10e40:	00000025 	andeq	r0, r0, r5, lsr #32
   10e44:	08410c04 	stmdaeq	r1, {r2, sl, fp}^
   10e48:	37040000 	strcc	r0, [r4, -r0]
   10e4c:	0000250b 	andeq	r2, r0, fp, lsl #10
   10e50:	a20c0800 	andge	r0, ip, #0, 16
   10e54:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   10e58:	00251437 	eoreq	r1, r5, r7, lsr r4
   10e5c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   10e60:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
   10e64:	251b3704 	ldrcs	r3, [fp, #-1796]	; 0xfffff8fc
   10e68:	10000000 	andne	r0, r0, r0
   10e6c:	00785f10 	rsbseq	r5, r8, r0, lsl pc
   10e70:	a20b3804 	andge	r3, fp, #4, 16	; 0x40000
   10e74:	14000001 	strne	r0, [r0], #-1
   10e78:	42041100 	andmi	r1, r4, #0, 2
   10e7c:	09000001 	stmdbeq	r0, {r0}
   10e80:	0000011e 	andeq	r0, r0, lr, lsl r1
   10e84:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   10e88:	0000380a 	andeq	r3, r0, sl, lsl #16
   10e8c:	0f000000 	svceq	0x00000000
   10e90:	0000085c 	andeq	r0, r0, ip, asr r8
   10e94:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
   10e98:	00000235 	andeq	r0, r0, r5, lsr r2
   10e9c:	00044a0c 	andeq	r4, r4, ip, lsl #20
   10ea0:	093e0400 	ldmdbeq	lr!, {sl}
   10ea4:	00000025 	andeq	r0, r0, r5, lsr #32
   10ea8:	03540c00 	cmpeq	r4, #0, 24
   10eac:	3f040000 	svccc	0x00040000
   10eb0:	00002509 	andeq	r2, r0, r9, lsl #10
   10eb4:	fd0c0400 	stc2	4, cr0, [ip, #-0]
   10eb8:	04000002 	streq	r0, [r0], #-2
   10ebc:	00250940 	eoreq	r0, r5, r0, asr #18
   10ec0:	0c080000 	stceq	0, cr0, [r8], {-0}
   10ec4:	0000050b 	andeq	r0, r0, fp, lsl #10
   10ec8:	25094104 	strcs	r4, [r9, #-260]	; 0xfffffefc
   10ecc:	0c000000 	stceq	0, cr0, [r0], {-0}
   10ed0:	0007190c 	andeq	r1, r7, ip, lsl #18
   10ed4:	09420400 	stmdbeq	r2, {sl}^
   10ed8:	00000025 	andeq	r0, r0, r5, lsr #32
   10edc:	08000c10 	stmdaeq	r0, {r4, sl, fp}
   10ee0:	43040000 	movwmi	r0, #16384	; 0x4000
   10ee4:	00002509 	andeq	r2, r0, r9, lsl #10
   10ee8:	c20c1400 	andgt	r1, ip, #0, 8
   10eec:	04000002 	streq	r0, [r0], #-2
   10ef0:	00250944 	eoreq	r0, r5, r4, asr #18
   10ef4:	0c180000 	ldceq	0, cr0, [r8], {-0}
   10ef8:	00000453 	andeq	r0, r0, r3, asr r4
   10efc:	25094504 	strcs	r4, [r9, #-1284]	; 0xfffffafc
   10f00:	1c000000 	stcne	0, cr0, [r0], {-0}
   10f04:	0006c30c 	andeq	ip, r6, ip, lsl #6
   10f08:	09460400 	stmdbeq	r6, {sl}^
   10f0c:	00000025 	andeq	r0, r0, r5, lsr #32
   10f10:	61120020 	tstvs	r2, r0, lsr #32
   10f14:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10f18:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
   10f1c:	0000027a 	andeq	r0, r0, sl, ror r2
   10f20:	0009700c 	andeq	r7, r9, ip
   10f24:	0a500400 	beq	1411f2c <__ccfg+0x13f1f84>
   10f28:	0000027a 	andeq	r0, r0, sl, ror r2
   10f2c:	08bc0c00 	ldmeq	ip!, {sl, fp}
   10f30:	51040000 	mrspl	r0, (UNDEF: 4)
   10f34:	00027a09 	andeq	r7, r2, r9, lsl #20
   10f38:	d9138000 	ldmdble	r3, {pc}
   10f3c:	04000009 	streq	r0, [r0], #-9
   10f40:	011e0a53 	tsteq	lr, r3, asr sl
   10f44:	01000000 	mrseq	r0, (UNDEF: 0)
   10f48:	000a1d13 	andeq	r1, sl, r3, lsl sp
   10f4c:	0a560400 	beq	1591f54 <__ccfg+0x1571fac>
   10f50:	0000011e 	andeq	r0, r0, lr, lsl r1
   10f54:	09000104 	stmdbeq	r0, {r2, r8}
   10f58:	00000117 	andeq	r0, r0, r7, lsl r1
   10f5c:	0000028a 	andeq	r0, r0, sl, lsl #5
   10f60:	0000380a 	andeq	r3, r0, sl, lsl #16
   10f64:	12001f00 	andne	r1, r0, #0, 30
   10f68:	00000786 	andeq	r0, r0, r6, lsl #15
   10f6c:	62040190 	andvs	r0, r4, #144, 2	; 0x24
   10f70:	0002cd08 	andeq	ip, r2, r8, lsl #26
   10f74:	0a320c00 	beq	c93f7c <__ccfg+0xc73fd4>
   10f78:	63040000 	movwvs	r0, #16384	; 0x4000
   10f7c:	0002cd12 	andeq	ip, r2, r2, lsl sp
   10f80:	620c0000 	andvs	r0, ip, #0
   10f84:	04000004 	streq	r0, [r0], #-4
   10f88:	00250664 	eoreq	r0, r5, r4, ror #12
   10f8c:	0c040000 	stceq	0, cr0, [r4], {-0}
   10f90:	0000026f 	andeq	r0, r0, pc, ror #4
   10f94:	d3096604 	movwle	r6, #38404	; 0x9604
   10f98:	08000002 	stmdaeq	r0, {r1}
   10f9c:	0000610c 	andeq	r6, r0, ip, lsl #2
   10fa0:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
   10fa4:	00000235 	andeq	r0, r0, r5, lsr r2
   10fa8:	04110088 	ldreq	r0, [r1], #-136	; 0xffffff78
   10fac:	0000028a 	andeq	r0, r0, sl, lsl #5
   10fb0:	0002e309 	andeq	lr, r2, r9, lsl #6
   10fb4:	0002e300 	andeq	lr, r2, r0, lsl #6
   10fb8:	00380a00 	eorseq	r0, r8, r0, lsl #20
   10fbc:	001f0000 	andseq	r0, pc, r0
   10fc0:	02e90411 	rsceq	r0, r9, #285212672	; 0x11000000
   10fc4:	0f140000 	svceq	0x00140000
   10fc8:	0000093a 	andeq	r0, r0, sl, lsr r9
   10fcc:	087a0408 	ldmdaeq	sl!, {r3, sl}^
   10fd0:	00000312 	andeq	r0, r0, r2, lsl r3
   10fd4:	0006000c 	andeq	r0, r6, ip
   10fd8:	117b0400 	cmnne	fp, r0, lsl #8
   10fdc:	00000312 	andeq	r0, r0, r2, lsl r3
   10fe0:	18c10c00 	stmiane	r1, {sl, fp}^
   10fe4:	7c040000 	stcvc	0, cr0, [r4], {-0}
   10fe8:	00002506 	andeq	r2, r0, r6, lsl #10
   10fec:	11000400 	tstne	r0, r0, lsl #8
   10ff0:	00006e04 	andeq	r6, r0, r4, lsl #28
   10ff4:	03b20f00 			; <UNDEFINED> instruction: 0x03b20f00
   10ff8:	04680000 	strbteq	r0, [r8], #-0
   10ffc:	045b08ba 	ldrbeq	r0, [fp], #-2234	; 0xfffff746
   11000:	5f100000 	svcpl	0x00100000
   11004:	bb040070 	bllt	1111cc <__ccfg+0xf1224>
   11008:	00031212 	andeq	r1, r3, r2, lsl r2
   1100c:	5f100000 	svcpl	0x00100000
   11010:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
   11014:	00002507 	andeq	r2, r0, r7, lsl #10
   11018:	5f100400 	svcpl	0x00100400
   1101c:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
   11020:	00002507 	andeq	r2, r0, r7, lsl #10
   11024:	e90c0800 	stmdb	ip, {fp}
   11028:	04000001 	streq	r0, [r0], #-1
   1102c:	007509be 	ldrhteq	r0, [r5], #-158	; 0xffffff62
   11030:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   11034:	0000065e 	andeq	r0, r0, lr, asr r6
   11038:	7509bf04 	strvc	fp, [r9, #-3844]	; 0xfffff0fc
   1103c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   11040:	66625f10 	uqadd16vs	r5, r2, r0
   11044:	11c00400 	bicne	r0, r0, r0, lsl #8
   11048:	000002ea 	andeq	r0, r0, sl, ror #5
   1104c:	01e00c10 	mvneq	r0, r0, lsl ip
   11050:	c1040000 	mrsgt	r0, (UNDEF: 4)
   11054:	00002507 	andeq	r2, r0, r7, lsl #10
   11058:	740c1800 	strvc	r1, [ip], #-2048	; 0xfffff800
   1105c:	04000002 	streq	r0, [r0], #-2
   11060:	01170ac8 	tsteq	r7, r8, asr #21
   11064:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   11068:	00001851 	andeq	r1, r0, r1, asr r8
   1106c:	df1dca04 	svcle	0x001dca04
   11070:	20000005 	andcs	r0, r0, r5
   11074:	0018180c 	andseq	r1, r8, ip, lsl #16
   11078:	1dcc0400 	cfstrdne	mvd0, [ip]
   1107c:	00000609 	andeq	r0, r0, r9, lsl #12
   11080:	0a430c24 	beq	10d4118 <__ccfg+0x10b4170>
   11084:	cf040000 	svcgt	0x00040000
   11088:	00062d0d 	andeq	r2, r6, sp, lsl #26
   1108c:	060c2800 	streq	r2, [ip], -r0, lsl #16
   11090:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   11094:	064709d0 			; <UNDEFINED> instruction: 0x064709d0
   11098:	102c0000 	eorne	r0, ip, r0
   1109c:	0062755f 	rsbeq	r7, r2, pc, asr r5
   110a0:	ea11d304 	b	485cb8 <__ccfg+0x465d10>
   110a4:	30000002 	andcc	r0, r0, r2
   110a8:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
   110ac:	12d40400 	sbcsne	r0, r4, #0, 8
   110b0:	00000312 	andeq	r0, r0, r2, lsl r3
   110b4:	755f1038 	ldrbvc	r1, [pc, #-56]	; 11084 <__exidx_end+0xc158>
   110b8:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
   110bc:	00002507 	andeq	r2, r0, r7, lsl #10
   110c0:	5a0c3c00 	bpl	3200c8 <__ccfg+0x300120>
   110c4:	0400000a 	streq	r0, [r0], #-10
   110c8:	064d11d8 			; <UNDEFINED> instruction: 0x064d11d8
   110cc:	0c400000 	mareq	acc0, r0, r0
   110d0:	000009e9 	andeq	r0, r0, r9, ror #19
   110d4:	5d11d904 	vldrpl.16	s26, [r1, #-8]	; <UNPREDICTABLE>
   110d8:	43000006 	movwmi	r0, #6
   110dc:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
   110e0:	11dc0400 	bicsne	r0, ip, r0, lsl #8
   110e4:	000002ea 	andeq	r0, r0, sl, ror #5
   110e8:	08530c44 	ldmdaeq	r3, {r2, r6, sl, fp}^
   110ec:	df040000 	svcle	0x00040000
   110f0:	00002507 	andeq	r2, r0, r7, lsl #10
   110f4:	ff0c4c00 			; <UNDEFINED> instruction: 0xff0c4c00
   110f8:	04000003 	streq	r0, [r0], #-3
   110fc:	009d0ae0 	addseq	r0, sp, r0, ror #21
   11100:	0c500000 	mraeq	r0, r0, acc0
   11104:	00004320 	andeq	r4, r0, r0, lsr #6
   11108:	7912e304 	ldmdbvc	r2, {r2, r8, r9, sp, lr, pc}
   1110c:	54000004 	strpl	r0, [r0], #-4
   11110:	00086b0c 	andeq	r6, r8, ip, lsl #22
   11114:	0ce70400 	cfstrdeq	mvd0, [r7]
   11118:	00000136 	andeq	r0, r0, r6, lsr r1
   1111c:	078e0c58 			; <UNDEFINED> instruction: 0x078e0c58
   11120:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
   11124:	00010b0e 	andeq	r0, r1, lr, lsl #22
   11128:	150c5c00 	strne	r5, [ip, #-3072]	; 0xfffff400
   1112c:	0400000a 	streq	r0, [r0], #-10
   11130:	002509ea 	eoreq	r0, r5, sl, ror #19
   11134:	00640000 	rsbeq	r0, r4, r0
   11138:	00002515 	andeq	r2, r0, r5, lsl r5
   1113c:	00047900 	andeq	r7, r4, r0, lsl #18
   11140:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   11144:	17160000 	ldrne	r0, [r6, -r0]
   11148:	16000001 	strne	r0, [r0], -r1
   1114c:	000005cd 	andeq	r0, r0, sp, asr #11
   11150:	00002516 	andeq	r2, r0, r6, lsl r5
   11154:	04110000 	ldreq	r0, [r1], #-0
   11158:	00000484 	andeq	r0, r0, r4, lsl #9
   1115c:	00047906 	andeq	r7, r4, r6, lsl #18
   11160:	435e1700 	cmpmi	lr, #0, 14
   11164:	04280000 	strteq	r0, [r8], #-0
   11168:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
   1116c:	000005cd 	andeq	r0, r0, sp, asr #11
   11170:	0006f418 	andeq	pc, r6, r8, lsl r4	; <UNPREDICTABLE>
   11174:	02670400 	rsbeq	r0, r7, #0, 8
   11178:	00002507 	andeq	r2, r0, r7, lsl #10
   1117c:	ce180000 	cdpgt	0, 1, cr0, cr8, cr0, {0}
   11180:	04000005 	streq	r0, [r0], #-5
   11184:	b90b026c 	stmdblt	fp, {r2, r3, r5, r6, r9}
   11188:	04000006 	streq	r0, [r0], #-6
   1118c:	00025518 	andeq	r5, r2, r8, lsl r5
   11190:	026c0400 	rsbeq	r0, ip, #0, 8
   11194:	0006b914 	andeq	fp, r6, r4, lsl r9
   11198:	49180800 	ldmdbmi	r8, {fp}
   1119c:	0400000a 	streq	r0, [r0], #-10
   111a0:	b91e026c 	ldmdblt	lr, {r2, r3, r5, r6, r9}
   111a4:	0c000006 	stceq	0, cr0, [r0], {6}
   111a8:	00045d18 	andeq	r5, r4, r8, lsl sp
   111ac:	026e0400 	rsbeq	r0, lr, #0, 8
   111b0:	00002508 	andeq	r2, r0, r8, lsl #10
   111b4:	0f181000 	svceq	0x00181000
   111b8:	04000004 	streq	r0, [r0], #-4
   111bc:	b908026f 	stmdblt	r8, {r0, r1, r2, r3, r5, r6, r9}
   111c0:	14000008 	strne	r0, [r0], #-8
   111c4:	0009fc18 	andeq	pc, r9, r8, lsl ip	; <UNPREDICTABLE>
   111c8:	02720400 	rsbseq	r0, r2, #0, 8
   111cc:	00002507 	andeq	r2, r0, r7, lsl #10
   111d0:	4e183000 	cdpmi	0, 1, cr3, cr8, cr0, {0}
   111d4:	0400003d 	streq	r0, [r0], #-61	; 0xffffffc3
   111d8:	50160273 	andspl	r0, r6, r3, ror r2
   111dc:	34000009 	strcc	r0, [r0], #-9
   111e0:	0005a118 	andeq	sl, r5, r8, lsl r1
   111e4:	02750400 	rsbseq	r0, r5, #0, 8
   111e8:	00002507 	andeq	r2, r0, r7, lsl #10
   111ec:	9b183800 	blls	61f1f4 <__ccfg+0x5ff24c>
   111f0:	04000006 	streq	r0, [r0], #-6
   111f4:	610a0277 	tstvs	sl, r7, ror r2
   111f8:	3c000009 	stccc	0, cr0, [r0], {9}
   111fc:	0002cc18 	andeq	ip, r2, r8, lsl ip
   11200:	027a0400 	rsbseq	r0, sl, #0, 8
   11204:	00019c13 	andeq	r9, r1, r3, lsl ip
   11208:	78184000 	ldmdavc	r8, {lr}
   1120c:	04000003 	streq	r0, [r0], #-3
   11210:	2507027b 	strcs	r0, [r7, #-635]	; 0xfffffd85
   11214:	44000000 	strmi	r0, [r0], #-0
   11218:	0004b218 	andeq	fp, r4, r8, lsl r2
   1121c:	027c0400 	rsbseq	r0, ip, #0, 8
   11220:	00019c13 	andeq	r9, r1, r3, lsl ip
   11224:	06184800 	ldreq	r4, [r8], -r0, lsl #16
   11228:	04000006 	streq	r0, [r0], #-6
   1122c:	6714027d 			; <UNDEFINED> instruction: 0x6714027d
   11230:	4c000009 	stcmi	0, cr0, [r0], {9}
   11234:	00083918 	andeq	r3, r8, r8, lsl r9
   11238:	02800400 	addeq	r0, r0, #0, 8
   1123c:	00002507 	andeq	r2, r0, r7, lsl #10
   11240:	d0185000 	andsle	r5, r8, r0
   11244:	04000008 	streq	r0, [r0], #-8
   11248:	cd090281 	sfmgt	f0, 4, [r9, #-516]	; 0xfffffdfc
   1124c:	54000005 	strpl	r0, [r0], #-5
   11250:	0008ea18 	andeq	lr, r8, r8, lsl sl
   11254:	02a40400 	adceq	r0, r4, #0, 8
   11258:	00089407 	andeq	r9, r8, r7, lsl #8
   1125c:	86195800 	ldrhi	r5, [r9], -r0, lsl #16
   11260:	04000007 	streq	r0, [r0], #-7
   11264:	cd1302a8 	lfmgt	f0, 4, [r3, #-672]	; 0xfffffd60
   11268:	48000002 	stmdami	r0, {r1}
   1126c:	052e1901 	streq	r1, [lr, #-2305]!	; 0xfffff6ff
   11270:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   11274:	028a1202 	addeq	r1, sl, #536870912	; 0x20000000
   11278:	014c0000 	mrseq	r0, (UNDEF: 76)
   1127c:	00051519 	andeq	r1, r5, r9, lsl r5
   11280:	02ad0400 	adceq	r0, sp, #0, 8
   11284:	0009780c 	andeq	r7, r9, ip, lsl #16
   11288:	1902dc00 	stmdbne	r2, {sl, fp, ip, lr, pc}
   1128c:	0000094d 	andeq	r0, r0, sp, asr #18
   11290:	1002b204 	andne	fp, r2, r4, lsl #4
   11294:	0000067a 	andeq	r0, r0, sl, ror r6
   11298:	c71902e0 	ldrgt	r0, [r9, -r0, ror #5]
   1129c:	04000007 	streq	r0, [r0], #-7
   112a0:	840a02b4 	strhi	r0, [sl], #-692	; 0xfffffd4c
   112a4:	ec000009 	stc	0, cr0, [r0], {9}
   112a8:	04110002 	ldreq	r0, [r1], #-2
   112ac:	000005d3 	ldrdeq	r0, [r0], -r3
   112b0:	e1080104 	tst	r8, r4, lsl #2
   112b4:	06000008 	streq	r0, [r0], -r8
   112b8:	000005d3 	ldrdeq	r0, [r0], -r3
   112bc:	045b0411 	ldrbeq	r0, [fp], #-1041	; 0xfffffbef
   112c0:	25150000 	ldrcs	r0, [r5, #-0]
   112c4:	03000000 	movweq	r0, #0
   112c8:	16000006 	strne	r0, [r0], -r6
   112cc:	00000479 	andeq	r0, r0, r9, ror r4
   112d0:	00011716 	andeq	r1, r1, r6, lsl r7
   112d4:	06031600 	streq	r1, [r3], -r0, lsl #12
   112d8:	25160000 	ldrcs	r0, [r6, #-0]
   112dc:	00000000 	andeq	r0, r0, r0
   112e0:	05da0411 	ldrbeq	r0, [sl, #1041]	; 0x411
   112e4:	04110000 	ldreq	r0, [r1], #-0
   112e8:	000005e5 	andeq	r0, r0, r5, ror #11
   112ec:	0000a915 	andeq	sl, r0, r5, lsl r9
   112f0:	00062d00 	andeq	r2, r6, r0, lsl #26
   112f4:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   112f8:	17160000 	ldrne	r0, [r6, -r0]
   112fc:	16000001 	strne	r0, [r0], -r1
   11300:	000000a9 	andeq	r0, r0, r9, lsr #1
   11304:	00002516 	andeq	r2, r0, r6, lsl r5
   11308:	04110000 	ldreq	r0, [r1], #-0
   1130c:	0000060f 	andeq	r0, r0, pc, lsl #12
   11310:	00002515 	andeq	r2, r0, r5, lsl r5
   11314:	00064700 	andeq	r4, r6, r0, lsl #14
   11318:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   1131c:	17160000 	ldrne	r0, [r6, -r0]
   11320:	00000001 	andeq	r0, r0, r1
   11324:	06330411 			; <UNDEFINED> instruction: 0x06330411
   11328:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
   1132c:	5d000000 	stcpl	0, cr0, [r0, #-0]
   11330:	0a000006 	beq	11350 <__exidx_end+0xc424>
   11334:	00000038 	andeq	r0, r0, r8, lsr r0
   11338:	6e090002 	cdpvs	0, 0, cr0, cr9, cr2, {0}
   1133c:	6d000000 	stcvs	0, cr0, [r0, #-0]
   11340:	0a000006 	beq	11360 <__exidx_end+0xc434>
   11344:	00000038 	andeq	r0, r0, r8, lsr r0
   11348:	ed050000 	stc	0, cr0, [r5, #-0]
   1134c:	04000003 	streq	r0, [r0], #-3
   11350:	181a0124 	ldmdane	sl, {r2, r5, r8}
   11354:	1a000003 	bne	11368 <__exidx_end+0xc43c>
   11358:	00004374 	andeq	r4, r0, r4, ror r3
   1135c:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
   11360:	0006b308 	andeq	fp, r6, r8, lsl #6
   11364:	0a321800 	beq	c9736c <__ccfg+0xc773c4>
   11368:	2a040000 	bcs	111370 <__ccfg+0xf13c8>
   1136c:	06b31101 	ldrteq	r1, [r3], r1, lsl #2
   11370:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11374:	0000088b 	andeq	r0, r0, fp, lsl #17
   11378:	07012b04 	streq	r2, [r1, -r4, lsl #22]
   1137c:	00000025 	andeq	r0, r0, r5, lsr #32
   11380:	058d1804 	streq	r1, [sp, #2052]	; 0x804
   11384:	2c040000 	stccs	0, cr0, [r4], {-0}
   11388:	06b90b01 	ldrteq	r0, [r9], r1, lsl #22
   1138c:	00080000 	andeq	r0, r8, r0
   11390:	067a0411 			; <UNDEFINED> instruction: 0x067a0411
   11394:	04110000 	ldreq	r0, [r1], #-0
   11398:	0000066d 	andeq	r0, r0, sp, ror #12
   1139c:	0003641a 	andeq	r6, r3, sl, lsl r4
   113a0:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
   113a4:	06f80801 	ldrbteq	r0, [r8], r1, lsl #16
   113a8:	7a180000 	bvc	6113b0 <__ccfg+0x5f1408>
   113ac:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
   113b0:	f8120145 			; <UNDEFINED> instruction: 0xf8120145
   113b4:	00000006 	andeq	r0, r0, r6
   113b8:	00061818 	andeq	r1, r6, r8, lsl r8
   113bc:	01460400 	cmpeq	r6, r0, lsl #8
   113c0:	0006f812 	andeq	pc, r6, r2, lsl r8	; <UNPREDICTABLE>
   113c4:	1f180600 	svcne	0x00180600
   113c8:	04000010 	streq	r0, [r0], #-16
   113cc:	7c120147 	ldfvcs	f0, [r2], {71}	; 0x47
   113d0:	0c000000 	stceq	0, cr0, [r0], {-0}
   113d4:	007c0900 	rsbseq	r0, ip, r0, lsl #18
   113d8:	07080000 	streq	r0, [r8, -r0]
   113dc:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   113e0:	02000000 	andeq	r0, r0, #0
   113e4:	04d01b00 	ldrbeq	r1, [r0], #2816	; 0xb00
   113e8:	1d070285 	sfmne	f0, 4, [r7, #-532]	; 0xfffffdec
   113ec:	18000008 	stmdane	r0, {r3}
   113f0:	000009ef 	andeq	r0, r0, pc, ror #19
   113f4:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
   113f8:	00000038 	andeq	r0, r0, r8, lsr r0
   113fc:	09551800 	ldmdbeq	r5, {fp, ip}^
   11400:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
   11404:	05cd1202 	strbeq	r1, [sp, #514]	; 0x202
   11408:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
   1140c:	000003a5 	andeq	r0, r0, r5, lsr #7
   11410:	10028904 	andne	r8, r2, r4, lsl #18
   11414:	0000081d 	andeq	r0, r0, sp, lsl r8
   11418:	08181808 	ldmdaeq	r8, {r3, fp, ip}
   1141c:	8a040000 	bhi	111424 <__ccfg+0xf147c>
   11420:	01b21702 			; <UNDEFINED> instruction: 0x01b21702
   11424:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
   11428:	000005d5 	ldrdeq	r0, [r0], -r5
   1142c:	0f028b04 	svceq	0x00028b04
   11430:	00000025 	andeq	r0, r0, r5, lsr #32
   11434:	0a2d1848 	beq	b5755c <__ccfg+0xb375b4>
   11438:	8c040000 	stchi	0, cr0, [r4], {-0}
   1143c:	00962c02 	addseq	r2, r6, r2, lsl #24
   11440:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   11444:	00000085 	andeq	r0, r0, r5, lsl #1
   11448:	1a028d04 	bne	b4860 <__ccfg+0x948b8>
   1144c:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
   11450:	04ea1858 	strbteq	r1, [sl], #2136	; 0x858
   11454:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
   11458:	010b1602 	tsteq	fp, r2, lsl #12
   1145c:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
   11460:	00000962 	andeq	r0, r0, r2, ror #18
   11464:	16028f04 	strne	r8, [r2], -r4, lsl #30
   11468:	0000010b 	andeq	r0, r0, fp, lsl #2
   1146c:	006f1870 	rsbeq	r1, pc, r0, ror r8	; <UNPREDICTABLE>
   11470:	90040000 	andls	r0, r4, r0
   11474:	010b1602 	tsteq	fp, r2, lsl #12
   11478:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
   1147c:	00000849 	andeq	r0, r0, r9, asr #16
   11480:	10029104 	andne	r9, r2, r4, lsl #2
   11484:	0000082d 	andeq	r0, r0, sp, lsr #16
   11488:	03821880 	orreq	r1, r2, #128, 16	; 0x800000
   1148c:	92040000 	andls	r0, r4, #0
   11490:	083d1002 	ldmdaeq	sp!, {r1, ip}
   11494:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
   11498:	0000090d 	andeq	r0, r0, sp, lsl #18
   1149c:	0f029304 	svceq	0x00029304
   114a0:	00000025 	andeq	r0, r0, r5, lsr #32
   114a4:	022918a0 	eoreq	r1, r9, #160, 16	; 0xa00000
   114a8:	94040000 	strls	r0, [r4], #-0
   114ac:	010b1602 	tsteq	fp, r2, lsl #12
   114b0:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
   114b4:	0000051f 	andeq	r0, r0, pc, lsl r5
   114b8:	16029504 	strne	r9, [r2], -r4, lsl #10
   114bc:	0000010b 	andeq	r0, r0, fp, lsl #2
   114c0:	046718ac 	strbteq	r1, [r7], #-2220	; 0xfffff754
   114c4:	96040000 	strls	r0, [r4], -r0
   114c8:	010b1602 	tsteq	fp, r2, lsl #12
   114cc:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
   114d0:	0000064f 	andeq	r0, r0, pc, asr #12
   114d4:	16029704 	strne	r9, [r2], -r4, lsl #14
   114d8:	0000010b 	andeq	r0, r0, fp, lsl #2
   114dc:	04d918bc 	ldrbeq	r1, [r9], #2236	; 0x8bc
   114e0:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
   114e4:	010b1602 	tsteq	fp, r2, lsl #12
   114e8:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
   114ec:	000006f2 	strdeq	r0, [r0], -r2
   114f0:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
   114f4:	00000025 	andeq	r0, r0, r5, lsr #32
   114f8:	d30900cc 	movwle	r0, #37068	; 0x90cc
   114fc:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
   11500:	0a000008 	beq	11528 <__exidx_end+0xc5fc>
   11504:	00000038 	andeq	r0, r0, r8, lsr r0
   11508:	d3090019 	movwle	r0, #36889	; 0x9019
   1150c:	3d000005 	stccc	0, cr0, [r0, #-20]	; 0xffffffec
   11510:	0a000008 	beq	11538 <__exidx_end+0xc60c>
   11514:	00000038 	andeq	r0, r0, r8, lsr r0
   11518:	d3090007 	movwle	r0, #36871	; 0x9007
   1151c:	4d000005 	stcmi	0, cr0, [r0, #-20]	; 0xffffffec
   11520:	0a000008 	beq	11548 <__exidx_end+0xc61c>
   11524:	00000038 	andeq	r0, r0, r8, lsr r0
   11528:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
   1152c:	07029e04 	streq	r9, [r2, -r4, lsl #28]
   11530:	00000874 	andeq	r0, r0, r4, ror r8
   11534:	00035d18 	andeq	r5, r3, r8, lsl sp
   11538:	02a10400 	adceq	r0, r1, #0, 8
   1153c:	0008741b 	andeq	r7, r8, fp, lsl r4
   11540:	51180000 	tstpl	r8, r0
   11544:	0400000a 	streq	r0, [r0], #-10
   11548:	841802a2 	ldrhi	r0, [r8], #-674	; 0xfffffd5e
   1154c:	78000008 	stmdavc	r0, {r3}
   11550:	03120900 	tsteq	r2, #0, 18
   11554:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
   11558:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   1155c:	1d000000 	stcne	0, cr0, [r0, #-0]
   11560:	00380900 	eorseq	r0, r8, r0, lsl #18
   11564:	08940000 	ldmeq	r4, {}	; <UNPREDICTABLE>
   11568:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   1156c:	1d000000 	stcne	0, cr0, [r0, #-0]
   11570:	04f01c00 	ldrbteq	r1, [r0], #3072	; 0xc00
   11574:	b9030283 	stmdblt	r3, {r0, r1, r7, r9}
   11578:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
   1157c:	0000435e 	andeq	r4, r0, lr, asr r3
   11580:	0b029a04 	bleq	b7d98 <__ccfg+0x97df0>
   11584:	00000708 	andeq	r0, r0, r8, lsl #14
   11588:	0008271d 	andeq	r2, r8, sp, lsl r7
   1158c:	02a30400 	adceq	r0, r3, #0, 8
   11590:	00084d0b 	andeq	r4, r8, fp, lsl #26
   11594:	d3090000 	movwle	r0, #36864	; 0x9000
   11598:	c9000005 	stmdbgt	r0, {r0, r2}
   1159c:	0a000008 	beq	115c4 <__exidx_end+0xc698>
   115a0:	00000038 	andeq	r0, r0, r8, lsr r0
   115a4:	38120018 	ldmdacc	r2, {r3, r4}
   115a8:	6c00000a 	stcvs	0, cr0, [r0], {10}
   115ac:	08b20601 	ldmeq	r2!, {r0, r9, sl}
   115b0:	00000950 	andeq	r0, r0, r0, asr r9
   115b4:	003fdf0c 	eorseq	sp, pc, ip, lsl #30
   115b8:	0bb40600 	bleq	fed12dc0 <_estack+0xded0ddc0>
   115bc:	00000df8 	strdeq	r0, [r0], -r8
   115c0:	3f940c00 	svccc	0x00940c00
   115c4:	b5060000 	strlt	r0, [r6, #-0]
   115c8:	000e320b 	andeq	r3, lr, fp, lsl #4
   115cc:	2a0ce000 	bcs	3495d4 <__ccfg+0x32962c>
   115d0:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   115d4:	0e610bb7 	vmoveq.8	d17[5], r0
   115d8:	0ce40000 	stcleq	0, cr0, [r4]
   115dc:	00003d9a 	muleq	r0, sl, sp
   115e0:	250ab906 	strcs	fp, [sl, #-2310]	; 0xfffff6fa
   115e4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   115e8:	003d660c 	eorseq	r6, sp, ip, lsl #12
   115ec:	0bba0600 	bleq	fee92df4 <_estack+0xdee8ddf4>
   115f0:	000005cd 	andeq	r0, r0, sp, asr #11
   115f4:	3d940cec 	ldccc	12, cr0, [r4, #944]	; 0x3b0
   115f8:	bb060000 	bllt	191600 <__ccfg+0x171658>
   115fc:	0009d212 	andeq	sp, r9, r2, lsl r2
   11600:	a813f000 	ldmdage	r3, {ip, sp, lr, pc}
   11604:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11608:	0e670bbd 	vmoveq.8	d23[5], r0
   1160c:	01280000 			; <UNDEFINED> instruction: 0x01280000
   11610:	003ec913 	eorseq	ip, lr, r3, lsl r9
   11614:	0bbe0600 	bleq	fef92e1c <_estack+0xdef8de1c>
   11618:	00000e77 	andeq	r0, r0, r7, ror lr
   1161c:	1a13012a 	bne	4d1acc <__ccfg+0x4b1b24>
   11620:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11624:	0e770bbf 	vmoveq.s8	r0, d23[5]
   11628:	014a0000 	mrseq	r0, (UNDEF: 74)
   1162c:	c9041100 	stmdbgt	r4, {r8, ip}
   11630:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   11634:	00000961 	andeq	r0, r0, r1, ror #18
   11638:	00047916 	andeq	r7, r4, r6, lsl r9
   1163c:	04110000 	ldreq	r0, [r1], #-0
   11640:	00000956 	andeq	r0, r0, r6, asr r9
   11644:	019c0411 	orrseq	r0, ip, r1, lsl r4
   11648:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
   1164c:	16000009 	strne	r0, [r0], -r9
   11650:	00000025 	andeq	r0, r0, r5, lsr #32
   11654:	7e041100 	adfvcs	f1, f4, f0
   11658:	11000009 	tstne	r0, r9
   1165c:	00096d04 	andeq	r6, r9, r4, lsl #26
   11660:	066d0900 	strbteq	r0, [sp], -r0, lsl #18
   11664:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
   11668:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   1166c:	02000000 	andeq	r0, r0, #0
   11670:	07f41f00 	ldrbeq	r1, [r4, r0, lsl #30]!
   11674:	33040000 	movwcc	r0, #16384	; 0x4000
   11678:	04791703 	ldrbteq	r1, [r9], #-1795	; 0xfffff8fd
   1167c:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 11684 <__exidx_end+0xc758>
   11680:	04000007 	streq	r0, [r0], #-7
   11684:	7f1d0334 	svcvc	0x001d0334
   11688:	11000004 	tstne	r0, r4
   1168c:	0009b904 	andeq	fp, r9, r4, lsl #18
   11690:	09ae0e00 	stmibeq	lr!, {r9, sl, fp}
   11694:	21200000 			; <UNDEFINED> instruction: 0x21200000
   11698:	00003ef0 	strdeq	r3, [r0], -r0
   1169c:	cd0e6707 	stcgt	7, cr6, [lr, #-28]	; 0xffffffe4
   116a0:	03000005 	movweq	r0, #5
   116a4:	000006a6 	andeq	r0, r0, r6, lsr #13
   116a8:	0b145608 	bleq	526ed0 <__ccfg+0x506f28>
   116ac:	0f000001 	svceq	0x00000001
   116b0:	00003d94 	muleq	r0, r4, sp
   116b4:	082a0938 	stmdaeq	sl!, {r3, r4, r5, r8, fp}
   116b8:	00000b18 	andeq	r0, r0, r8, lsl fp
   116bc:	003e7d0c 	eorseq	r7, lr, ip, lsl #26
   116c0:	092c0900 	stmdbeq	ip!, {r8, fp}
   116c4:	000005cd 	andeq	r0, r0, sp, asr #11
   116c8:	3f9f0c00 	svccc	0x009f0c00
   116cc:	2d090000 	stccs	0, cr0, [r9, #-0]
   116d0:	0005cd09 	andeq	ip, r5, r9, lsl #26
   116d4:	580c0400 	stmdapl	ip, {sl}
   116d8:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
   116dc:	05cd092e 	strbeq	r0, [sp, #2350]	; 0x92e
   116e0:	0c080000 	stceq	0, cr0, [r8], {-0}
   116e4:	00003dbf 			; <UNDEFINED> instruction: 0x00003dbf
   116e8:	cd092f09 	stcgt	15, cr2, [r9, #-36]	; 0xffffffdc
   116ec:	0c000005 	stceq	0, cr0, [r0], {5}
   116f0:	003d560c 	eorseq	r5, sp, ip, lsl #12
   116f4:	09300900 	ldmdbeq	r0!, {r8, fp}
   116f8:	000005cd 	andeq	r0, r0, sp, asr #11
   116fc:	3e790c10 	mrccc	12, 3, r0, cr9, cr0, {0}
   11700:	31090000 	mrscc	r0, (UNDEF: 9)
   11704:	0005cd09 	andeq	ip, r5, r9, lsl #26
   11708:	9b0c1400 	blls	316710 <__ccfg+0x2f6768>
   1170c:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   11710:	05cd0932 	strbeq	r0, [sp, #2354]	; 0x932
   11714:	0c180000 	ldceq	0, cr0, [r8], {-0}
   11718:	00003e54 	andeq	r3, r0, r4, asr lr
   1171c:	cd093309 	stcgt	3, cr3, [r9, #-36]	; 0xffffffdc
   11720:	1c000005 	stcne	0, cr0, [r0], {5}
   11724:	003ebb0c 	eorseq	fp, lr, ip, lsl #22
   11728:	09340900 	ldmdbeq	r4!, {r8, fp}
   1172c:	000005cd 	andeq	r0, r0, sp, asr #11
   11730:	3e9a0c20 	cdpcc	12, 9, cr0, cr10, cr0, {1}
   11734:	35090000 	strcc	r0, [r9, #-0]
   11738:	0005cd09 	andeq	ip, r5, r9, lsl #26
   1173c:	ff0c2400 			; <UNDEFINED> instruction: 0xff0c2400
   11740:	09000040 	stmdbeq	r0, {r6}
   11744:	05d30836 	ldrbeq	r0, [r3, #2102]	; 0x836
   11748:	0c280000 	stceq	0, cr0, [r8], #-0
   1174c:	00004103 	andeq	r4, r0, r3, lsl #2
   11750:	d3083709 	movwle	r3, #34569	; 0x8709
   11754:	29000005 	stmdbcs	r0, {r0, r2}
   11758:	003e6b0c 	eorseq	r6, lr, ip, lsl #22
   1175c:	08380900 	ldmdaeq	r8!, {r8, fp}
   11760:	000005d3 	ldrdeq	r0, [r0], -r3
   11764:	3efe0c2a 	cdpcc	12, 15, cr0, cr14, cr10, {1}
   11768:	39090000 	stmdbcc	r9, {}	; <UNPREDICTABLE>
   1176c:	0005d308 	andeq	sp, r5, r8, lsl #6
   11770:	110c2b00 	tstne	ip, r0, lsl #22
   11774:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   11778:	05d3083a 	ldrbeq	r0, [r3, #2106]	; 0x83a
   1177c:	0c2c0000 	stceq	0, cr0, [ip], #-0
   11780:	00003d85 	andeq	r3, r0, r5, lsl #27
   11784:	d3083b09 	movwle	r3, #35593	; 0x8b09
   11788:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
   1178c:	003e480c 	eorseq	r4, lr, ip, lsl #16
   11790:	083c0900 	ldmdaeq	ip!, {r8, fp}
   11794:	000005d3 	ldrdeq	r0, [r0], -r3
   11798:	3fee0c2e 	svccc	0x00ee0c2e
   1179c:	3d090000 	stccc	0, cr0, [r9, #-0]
   117a0:	0005d308 	andeq	sp, r5, r8, lsl #6
   117a4:	0d0c2f00 	stceq	15, cr2, [ip, #-0]
   117a8:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   117ac:	05d3083e 	ldrbeq	r0, [r3, #2110]	; 0x83e
   117b0:	0c300000 	ldceq	0, cr0, [r0], #-0
   117b4:	00003d81 	andeq	r3, r0, r1, lsl #27
   117b8:	d3083f09 	movwle	r3, #36617	; 0x8f09
   117bc:	31000005 	tstcc	r0, r5
   117c0:	003fea0c 	eorseq	lr, pc, ip, lsl #20
   117c4:	08400900 	stmdaeq	r0, {r8, fp}^
   117c8:	000005d3 	ldrdeq	r0, [r0], -r3
   117cc:	3e670c32 	mcrcc	12, 3, r0, cr7, cr2, {1}
   117d0:	41090000 	mrsmi	r0, (UNDEF: 9)
   117d4:	0005d308 	andeq	sp, r5, r8, lsl #6
   117d8:	fa0c3300 	blx	31e3e0 <__ccfg+0x2fe438>
   117dc:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
   117e0:	05d30842 	ldrbeq	r0, [r3, #2114]	; 0x842
   117e4:	0c340000 	ldceq	0, cr0, [r4], #-0
   117e8:	00003e44 	andeq	r3, r0, r4, asr #28
   117ec:	d3084309 	movwle	r4, #33545	; 0x8309
   117f0:	35000005 	strcc	r0, [r0, #-5]
   117f4:	3f7f0f00 	svccc	0x007f0f00
   117f8:	06080000 	streq	r0, [r8], -r0
   117fc:	0b400839 	bleq	10138e8 <__ccfg+0xff3940>
   11800:	220c0000 	andcs	r0, ip, #0
   11804:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11808:	06030f3b 			; <UNDEFINED> instruction: 0x06030f3b
   1180c:	0c000000 	stceq	0, cr0, [r0], {-0}
   11810:	00003ea8 	andeq	r3, r0, r8, lsr #29
   11814:	030f3c06 	movweq	r3, #64518	; 0xfc06
   11818:	04000006 	streq	r0, [r0], #-6
   1181c:	0b180600 	bleq	613024 <__ccfg+0x5f307c>
   11820:	e4210000 	strt	r0, [r1], #-0
   11824:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   11828:	0b402042 	bleq	1019938 <__ccfg+0xff9990>
   1182c:	0c0f0000 	stceq	0, cr0, [pc], {-0}
   11830:	3c00003e 	stccc	0, cr0, [r0], {62}	; 0x3e
   11834:	22084406 	andcs	r4, r8, #100663296	; 0x6000000
   11838:	0c00000c 	stceq	0, cr0, [r0], {12}
   1183c:	00003dbf 			; <UNDEFINED> instruction: 0x00003dbf
   11840:	030f4606 	movweq	r4, #62982	; 0xf606
   11844:	00000006 	andeq	r0, r0, r6
   11848:	003d560c 	eorseq	r5, sp, ip, lsl #12
   1184c:	0f470600 	svceq	0x00470600
   11850:	00000603 	andeq	r0, r0, r3, lsl #12
   11854:	3e790c04 	cdpcc	12, 7, cr0, cr9, cr4, {0}
   11858:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
   1185c:	0006030f 	andeq	r0, r6, pc, lsl #6
   11860:	9b0c0800 	blls	313868 <__ccfg+0x2f38c0>
   11864:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11868:	06030f49 	streq	r0, [r3], -r9, asr #30
   1186c:	0c0c0000 	stceq	0, cr0, [ip], {-0}
   11870:	00003e54 	andeq	r3, r0, r4, asr lr
   11874:	030f4a06 	movweq	r4, #64006	; 0xfa06
   11878:	10000006 	andne	r0, r0, r6
   1187c:	003ebb0c 	eorseq	fp, lr, ip, lsl #22
   11880:	0f4b0600 	svceq	0x004b0600
   11884:	00000603 	andeq	r0, r0, r3, lsl #12
   11888:	3e9a0c14 	mrccc	12, 4, r0, cr10, cr4, {0}
   1188c:	4c060000 	stcmi	0, cr0, [r6], {-0}
   11890:	0006030f 	andeq	r0, r6, pc, lsl #6
   11894:	ff0c1800 			; <UNDEFINED> instruction: 0xff0c1800
   11898:	06000040 	streq	r0, [r0], -r0, asr #32
   1189c:	06030f4d 	streq	r0, [r3], -sp, asr #30
   118a0:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
   118a4:	00004103 	andeq	r4, r0, r3, lsl #2
   118a8:	030f4e06 	movweq	r4, #65030	; 0xfe06
   118ac:	20000006 	andcs	r0, r0, r6
   118b0:	003e6b0c 	eorseq	r6, lr, ip, lsl #22
   118b4:	0f4f0600 	svceq	0x004f0600
   118b8:	00000603 	andeq	r0, r0, r3, lsl #12
   118bc:	3efe0c24 	cdpcc	12, 15, cr0, cr14, cr4, {1}
   118c0:	50060000 	andpl	r0, r6, r0
   118c4:	0006030f 	andeq	r0, r6, pc, lsl #6
   118c8:	110c2800 	tstne	ip, r0, lsl #16
   118cc:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   118d0:	06030f51 			; <UNDEFINED> instruction: 0x06030f51
   118d4:	0c2c0000 	stceq	0, cr0, [ip], #-0
   118d8:	00003d85 	andeq	r3, r0, r5, lsl #27
   118dc:	030f5206 	movweq	r5, #61958	; 0xf206
   118e0:	30000006 	andcc	r0, r0, r6
   118e4:	003e480c 	eorseq	r4, lr, ip, lsl #16
   118e8:	0f530600 	svceq	0x00530600
   118ec:	00000603 	andeq	r0, r0, r3, lsl #12
   118f0:	3fee0c34 	svccc	0x00ee0c34
   118f4:	54060000 	strpl	r0, [r6], #-0
   118f8:	0006030f 	andeq	r0, r6, pc, lsl #6
   118fc:	06003800 	streq	r3, [r0], -r0, lsl #16
   11900:	00000b51 	andeq	r0, r0, r1, asr fp
   11904:	003fcc21 	eorseq	ip, pc, r1, lsr #24
   11908:	23650600 	cmncs	r5, #0, 12
   1190c:	00000c22 	andeq	r0, r0, r2, lsr #24
   11910:	003da30f 	eorseq	sl, sp, pc, lsl #6
   11914:	67060c00 	strvs	r0, [r6, -r0, lsl #24]
   11918:	000c6808 	andeq	r6, ip, r8, lsl #16
   1191c:	3e7d0c00 	cdpcc	12, 7, cr0, cr13, cr0, {0}
   11920:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
   11924:	0006030f 	andeq	r0, r6, pc, lsl #6
   11928:	9f0c0000 	svcls	0x000c0000
   1192c:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11930:	06030f6a 	streq	r0, [r3], -sl, ror #30
   11934:	0c040000 	stceq	0, cr0, [r4], {-0}
   11938:	00003e58 	andeq	r3, r0, r8, asr lr
   1193c:	030f6b06 	movweq	r6, #64262	; 0xfb06
   11940:	08000006 	stmdaeq	r0, {r1, r2}
   11944:	0c330600 	ldceq	6, cr0, [r3], #-0
   11948:	44210000 	strtmi	r0, [r1], #-0
   1194c:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   11950:	0c682272 	sfmeq	f2, 2, [r8], #-456	; 0xfffffe38
   11954:	cf0f0000 	svcgt	0x000f0000
   11958:	fc00003d 	stc2	0, cr0, [r0], {61}	; 0x3d
   1195c:	64087406 	strvs	r7, [r8], #-1030	; 0xfffffbfa
   11960:	1000000d 	andne	r0, r0, sp
   11964:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
   11968:	690f7606 	stmdbvs	pc, {r1, r2, r9, sl, ip, sp, lr}	; <UNPREDICTABLE>
   1196c:	0000000d 	andeq	r0, r0, sp
   11970:	0041180c 	subeq	r1, r1, ip, lsl #16
   11974:	0f770600 	svceq	0x00770600
   11978:	00000d69 	andeq	r0, r0, r9, ror #26
   1197c:	02c70c30 	sbceq	r0, r7, #48, 24	; 0x3000
   11980:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
   11984:	000d790f 	andeq	r7, sp, pc, lsl #18
   11988:	c40c6000 	strgt	r6, [ip], #-0
   1198c:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11990:	0d790f79 	ldcleq	15, cr0, [r9, #-484]!	; 0xfffffe1c
   11994:	0c7c0000 	ldcleq	0, cr0, [ip], #-0
   11998:	00003e61 	andeq	r3, r0, r1, ror #28
   1199c:	030f7a06 	movweq	r7, #64006	; 0xfa06
   119a0:	98000006 	stmdals	r0, {r1, r2}
   119a4:	003eea0c 	eorseq	lr, lr, ip, lsl #20
   119a8:	0f7b0600 	svceq	0x007b0600
   119ac:	00000603 	andeq	r0, r0, r3, lsl #12
   119b0:	3e8b0c9c 	mcrcc	12, 4, r0, cr11, cr12, {4}
   119b4:	7c060000 	stcvc	0, cr0, [r6], {-0}
   119b8:	0006030f 	andeq	r0, r6, pc, lsl #6
   119bc:	f40ca000 	vst4.8	{d10-d13}, [ip], r0
   119c0:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   119c4:	0d890f7d 	stceq	15, cr0, [r9, #500]	; 0x1f4
   119c8:	0ca40000 	stceq	0, cr0, [r4]
   119cc:	00003e91 	muleq	r0, r1, lr
   119d0:	030f7e06 	movweq	r7, #65030	; 0xfe06
   119d4:	ac000006 	stcge	0, cr0, [r0], {6}
   119d8:	0041140c 	subeq	r1, r1, ip, lsl #8
   119dc:	0f7f0600 	svceq	0x007f0600
   119e0:	00000d69 	andeq	r0, r0, r9, ror #26
   119e4:	3f5d0cb0 	svccc	0x005d0cb0
   119e8:	80060000 	andhi	r0, r6, r0
   119ec:	0006030f 	andeq	r0, r6, pc, lsl #6
   119f0:	ad0ce000 	stcge	0, cr14, [ip, #-0]
   119f4:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   119f8:	06030f81 	streq	r0, [r3], -r1, lsl #31
   119fc:	10e40000 	rscne	r0, r4, r0
   11a00:	00617265 	rsbeq	r7, r1, r5, ror #4
   11a04:	030f8206 	movweq	r8, #61958	; 0xf206
   11a08:	e8000006 	stmda	r0, {r1, r2}
   11a0c:	003f750c 	eorseq	r7, pc, ip, lsl #10
   11a10:	0f830600 	svceq	0x00830600
   11a14:	00000603 	andeq	r0, r0, r3, lsl #12
   11a18:	3dfa0cec 	ldclcc	12, cr0, [sl, #944]!	; 0x3b0
   11a1c:	84060000 	strhi	r0, [r6], #-0
   11a20:	0006030f 	andeq	r0, r6, pc, lsl #6
   11a24:	8a0cf000 	bhi	34da2c <__ccfg+0x32da84>
   11a28:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11a2c:	06030f85 	streq	r0, [r3], -r5, lsl #31
   11a30:	0cf40000 	ldcleq	0, cr0, [r4]
   11a34:	00003dd9 	ldrdeq	r3, [r0], -r9
   11a38:	030f8606 	movweq	r8, #62982	; 0xf606
   11a3c:	f8000006 			; <UNDEFINED> instruction: 0xf8000006
   11a40:	0c790600 	ldcleq	6, cr0, [r9], #-0
   11a44:	03090000 	movweq	r0, #36864	; 0x9000
   11a48:	79000006 	stmdbvc	r0, {r1, r2}
   11a4c:	0a00000d 	beq	11a88 <__exidx_end+0xcb5c>
   11a50:	00000038 	andeq	r0, r0, r8, lsr r0
   11a54:	0309000b 	movweq	r0, #36875	; 0x900b
   11a58:	89000006 	stmdbhi	r0, {r1, r2}
   11a5c:	0a00000d 	beq	11a98 <__exidx_end+0xcb6c>
   11a60:	00000038 	andeq	r0, r0, r8, lsr r0
   11a64:	03090006 	movweq	r0, #36870	; 0x9006
   11a68:	99000006 	stmdbls	r0, {r1, r2}
   11a6c:	0a00000d 	beq	11aa8 <__exidx_end+0xcb7c>
   11a70:	00000038 	andeq	r0, r0, r8, lsr r0
   11a74:	b0210001 	eorlt	r0, r1, r1
   11a78:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   11a7c:	0d641f9a 	stcleq	15, cr1, [r4, #-616]!	; 0xfffffd98
   11a80:	b60f0000 	strlt	r0, [pc], -r0
   11a84:	1000003f 	andne	r0, r0, pc, lsr r0
   11a88:	e7089c06 	str	r9, [r8, -r6, lsl #24]
   11a8c:	0c00000d 	stceq	0, cr0, [r0], {13}
   11a90:	00003f6d 	andeq	r3, r0, sp, ror #30
   11a94:	030f9e06 	movweq	r9, #65030	; 0xfe06
   11a98:	00000006 	andeq	r0, r0, r6
   11a9c:	003ee30c 	eorseq	lr, lr, ip, lsl #6
   11aa0:	0f9f0600 	svceq	0x009f0600
   11aa4:	00000603 	andeq	r0, r0, r3, lsl #12
   11aa8:	3f660c04 	svccc	0x00660c04
   11aac:	a0060000 	andge	r0, r6, r0
   11ab0:	0006030f 	andeq	r0, r6, pc, lsl #6
   11ab4:	060c0800 	streq	r0, [ip], -r0, lsl #16
   11ab8:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11abc:	06030fa1 	streq	r0, [r3], -r1, lsr #31
   11ac0:	000c0000 	andeq	r0, ip, r0
   11ac4:	000da506 	andeq	sl, sp, r6, lsl #10
   11ac8:	3e312100 	rsfccs	f2, f1, f0
   11acc:	aa060000 	bge	191ad4 <__ccfg+0x171b2c>
   11ad0:	000de723 	andeq	lr, sp, r3, lsr #14
   11ad4:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   11ad8:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   11adc:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11ae0:	06000000 	streq	r0, [r0], -r0
   11ae4:	0000380a 	andeq	r3, r0, sl, lsl #16
   11ae8:	15001f00 	strne	r1, [r0, #-3840]	; 0xfffff100
   11aec:	00000025 	andeq	r0, r0, r5, lsr #32
   11af0:	00000e2c 	andeq	r0, r0, ip, lsr #28
   11af4:	00047916 	andeq	r7, r4, r6, lsl r9
   11af8:	05cd1600 	strbeq	r1, [sp, #1536]	; 0x600
   11afc:	3f160000 	svccc	0x00160000
   11b00:	16000000 	strne	r0, [r0], -r0
   11b04:	00000e2c 	andeq	r0, r0, ip, lsr #28
   11b08:	c6041100 	strgt	r1, [r4], -r0, lsl #2
   11b0c:	11000009 	tstne	r0, r9
   11b10:	000e0e04 	andeq	r0, lr, r4, lsl #28
   11b14:	00251500 	eoreq	r1, r5, r0, lsl #10
   11b18:	0e5b0000 	cdpeq	0, 5, cr0, cr11, cr0, {0}
   11b1c:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   11b20:	16000004 	strne	r0, [r0], -r4
   11b24:	00000e5b 	andeq	r0, r0, fp, asr lr
   11b28:	00060316 	andeq	r0, r6, r6, lsl r3
   11b2c:	002c1600 	eoreq	r1, ip, r0, lsl #12
   11b30:	2c160000 	ldccs	0, cr0, [r6], {-0}
   11b34:	0000000e 	andeq	r0, r0, lr
   11b38:	003f0411 	eorseq	r0, pc, r1, lsl r4	; <UNPREDICTABLE>
   11b3c:	04110000 	ldreq	r0, [r1], #-0
   11b40:	00000e38 	andeq	r0, r0, r8, lsr lr
   11b44:	0005d309 	andeq	sp, r5, r9, lsl #6
   11b48:	000e7700 	andeq	r7, lr, r0, lsl #14
   11b4c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11b50:	00010000 	andeq	r0, r1, r0
   11b54:	0005d309 	andeq	sp, r5, r9, lsl #6
   11b58:	000e8700 	andeq	r8, lr, r0, lsl #14
   11b5c:	00380a00 	eorseq	r0, r8, r0, lsl #20
   11b60:	001f0000 	andseq	r0, pc, r0
   11b64:	00119322 	andseq	r9, r1, r2, lsr #6
   11b68:	091f0a00 	ldmdbeq	pc, {r9, fp}	; <UNPREDICTABLE>
   11b6c:	00000117 	andeq	r0, r0, r7, lsl r1
   11b70:	00003fec 	andeq	r3, r0, ip, ror #31
   11b74:	000000aa 	andeq	r0, r0, sl, lsr #1
   11b78:	0f289c01 	svceq	0x00289c01
   11b7c:	70230000 	eorvc	r0, r3, r0
   11b80:	0100003d 	tsteq	r0, sp, lsr r0
   11b84:	01191a31 	tsteq	r9, r1, lsr sl
   11b88:	50010000 	andpl	r0, r1, r0
   11b8c:	00410f24 	subeq	r0, r1, r4, lsr #30
   11b90:	19320100 	ldmdbne	r2!, {r8}
   11b94:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
   11b98:	0000525c 	andeq	r5, r0, ip, asr r2
   11b9c:	00005250 	andeq	r5, r0, r0, asr r2
   11ba0:	0040fa24 	subeq	pc, r0, r4, lsr #20
   11ba4:	09330100 	ldmdbeq	r3!, {r8}
   11ba8:	0000002c 	andeq	r0, r0, ip, lsr #32
   11bac:	000052d7 	ldrdeq	r5, [r0], -r7
   11bb0:	000052af 	andeq	r5, r0, pc, lsr #5
   11bb4:	74736425 	ldrbtvc	r6, [r3], #-1061	; 0xfffffbdb
   11bb8:	09420100 	stmdbeq	r2, {r8}^
   11bbc:	000005cd 	andeq	r0, r0, sp, asr #11
   11bc0:	00005416 	andeq	r5, r0, r6, lsl r4
   11bc4:	00005406 	andeq	r5, r0, r6, lsl #8
   11bc8:	63727325 	cmnvs	r2, #-1811939328	; 0x94000000
   11bcc:	0f430100 	svceq	0x00430100
   11bd0:	00000603 	andeq	r0, r0, r3, lsl #12
   11bd4:	00005499 	muleq	r0, r9, r4
   11bd8:	00005489 	andeq	r5, r0, r9, lsl #9
   11bdc:	003d7526 	eorseq	r7, sp, r6, lsr #10
   11be0:	09440100 	stmdbeq	r4, {r8}^
   11be4:	00000f28 	andeq	r0, r0, r8, lsr #30
   11be8:	0000552a 	andeq	r5, r0, sl, lsr #10
   11bec:	00005512 	andeq	r5, r0, r2, lsl r5
   11bf0:	003ffa26 	eorseq	pc, pc, r6, lsr #20
   11bf4:	0f450100 	svceq	0x00450100
   11bf8:	00000f2e 	andeq	r0, r0, lr, lsr #30
   11bfc:	00005621 	andeq	r5, r0, r1, lsr #12
   11c00:	00005609 	andeq	r5, r0, r9, lsl #12
   11c04:	83041100 	movwhi	r1, #16640	; 0x4100
   11c08:	11000000 	mrsne	r0, (UNDEF: 0)
   11c0c:	00008a04 	andeq	r8, r0, r4, lsl #20
   11c10:	09760000 	ldmdbeq	r6!, {}^	; <UNPREDICTABLE>
   11c14:	00040000 	andeq	r0, r4, r0
   11c18:	0000419f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
   11c1c:	40060104 	andmi	r0, r6, r4, lsl #2
   11c20:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
   11c24:	53000041 	movwpl	r0, #65	; 0x41
   11c28:	98000041 	stmdals	r0, {r0, r6}
   11c2c:	4c000040 	stcmi	0, cr0, [r0], {64}	; 0x40
   11c30:	8a000000 	bhi	11c38 <__exidx_end+0xcd0c>
   11c34:	02000086 	andeq	r0, r0, #134	; 0x86
   11c38:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
   11c3c:	04030000 	streq	r0, [r3], #-0
   11c40:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   11c44:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   11c48:	000005e4 	andeq	r0, r0, r4, ror #11
   11c4c:	d7040802 	strle	r0, [r4, -r2, lsl #16]
   11c50:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   11c54:	00000892 	muleq	r0, r2, r8
   11c58:	17016502 	strne	r6, [r1, -r2, lsl #10]
   11c5c:	00000025 	andeq	r0, r0, r5, lsr #32
   11c60:	da060102 	ble	192070 <__ccfg+0x1720c8>
   11c64:	02000008 	andeq	r0, r0, #8
   11c68:	08d80801 	ldmeq	r8, {r0, fp}^
   11c6c:	02020000 	andeq	r0, r2, #0
   11c70:	00079f05 	andeq	r9, r7, r5, lsl #30
   11c74:	07020200 	streq	r0, [r2, -r0, lsl #4]
   11c78:	000009a6 	andeq	r0, r0, r6, lsr #19
   11c7c:	e9050402 	stmdb	r5, {r1, sl}
   11c80:	02000005 	andeq	r0, r0, #5
   11c84:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
   11c88:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   11c8c:	00038e07 	andeq	r8, r3, r7, lsl #28
   11c90:	09e20500 	stmibeq	r2!, {r8, sl}^
   11c94:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
   11c98:	00006a0e 	andeq	r6, r0, lr, lsl #20
   11c9c:	02670500 	rsbeq	r0, r7, #0, 10
   11ca0:	74030000 	strvc	r0, [r3], #-0
   11ca4:	00006a0e 	andeq	r6, r0, lr, lsl #20
   11ca8:	03040600 	movweq	r0, #17920	; 0x4600
   11cac:	00b903a5 	adcseq	r0, r9, r5, lsr #7
   11cb0:	87070000 	strhi	r0, [r7, -r0]
   11cb4:	03000005 	movweq	r0, #5
   11cb8:	00410ca7 	subeq	r0, r1, r7, lsr #25
   11cbc:	e6070000 	str	r0, [r7], -r0
   11cc0:	03000007 	movweq	r0, #7
   11cc4:	00b913a8 	adcseq	r1, r9, r8, lsr #7
   11cc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11ccc:	00000055 	andeq	r0, r0, r5, asr r0
   11cd0:	000000c9 	andeq	r0, r0, r9, asr #1
   11cd4:	00002509 	andeq	r2, r0, r9, lsl #10
   11cd8:	0a000300 	beq	128e0 <__exidx_end+0xd9b4>
   11cdc:	09a20308 	stmibeq	r2!, {r3, r8, r9}
   11ce0:	000000ed 	andeq	r0, r0, sp, ror #1
   11ce4:	0003220b 	andeq	r2, r3, fp, lsl #4
   11ce8:	07a40300 	streq	r0, [r4, r0, lsl #6]!
   11cec:	0000002c 	andeq	r0, r0, ip, lsr #32
   11cf0:	04aa0b00 	strteq	r0, [sl], #2816	; 0xb00
   11cf4:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
   11cf8:	00009705 	andeq	r9, r0, r5, lsl #14
   11cfc:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
   11d00:	000006a5 	andeq	r0, r0, r5, lsr #13
   11d04:	c903aa03 	stmdbgt	r3, {r0, r1, r9, fp, sp, pc}
   11d08:	0c000000 	stceq	0, cr0, [r0], {-0}
   11d0c:	06290504 	strteq	r0, [r9], -r4, lsl #10
   11d10:	16040000 	strne	r0, [r4], -r0
   11d14:	00007119 	andeq	r7, r0, r9, lsl r1
   11d18:	01fe0500 	mvnseq	r0, r0, lsl #10
   11d1c:	0c050000 	stceq	0, cr0, [r5], {-0}
   11d20:	00002c0d 	andeq	r2, r0, sp, lsl #24
   11d24:	05550500 	ldrbeq	r0, [r5, #-1280]	; 0xfffffb00
   11d28:	23040000 	movwcs	r0, #16384	; 0x4000
   11d2c:	0001071b 	andeq	r0, r1, fp, lsl r7
   11d30:	02a70d00 	adceq	r0, r7, #0, 26
   11d34:	04180000 	ldreq	r0, [r8], #-0
   11d38:	01790834 	cmneq	r9, r4, lsr r8
   11d3c:	320b0000 	andcc	r0, fp, #0
   11d40:	0400000a 	streq	r0, [r0], #-10
   11d44:	01791336 	cmneq	r9, r6, lsr r3
   11d48:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   11d4c:	04006b5f 	streq	r6, [r0], #-2911	; 0xfffff4a1
   11d50:	002c0737 	eoreq	r0, ip, r7, lsr r7
   11d54:	0b040000 	bleq	111d5c <__ccfg+0xf1db4>
   11d58:	00000841 	andeq	r0, r0, r1, asr #16
   11d5c:	2c0b3704 	stccs	7, cr3, [fp], {4}
   11d60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11d64:	003ea20b 	eorseq	sl, lr, fp, lsl #4
   11d68:	14370400 	ldrtne	r0, [r7], #-1024	; 0xfffffc00
   11d6c:	0000002c 	andeq	r0, r0, ip, lsr #32
   11d70:	03ba0b0c 			; <UNDEFINED> instruction: 0x03ba0b0c
   11d74:	37040000 	strcc	r0, [r4, -r0]
   11d78:	00002c1b 	andeq	r2, r0, fp, lsl ip
   11d7c:	5f0e1000 	svcpl	0x000e1000
   11d80:	38040078 	stmdacc	r4, {r3, r4, r5, r6}
   11d84:	00017f0b 	andeq	r7, r1, fp, lsl #30
   11d88:	0f001400 	svceq	0x00001400
   11d8c:	00011f04 	andeq	r1, r1, r4, lsl #30
   11d90:	00fb0800 	rscseq	r0, fp, r0, lsl #16
   11d94:	018f0000 	orreq	r0, pc, r0
   11d98:	25090000 	strcs	r0, [r9, #-0]
   11d9c:	00000000 	andeq	r0, r0, r0
   11da0:	085c0d00 	ldmdaeq	ip, {r8, sl, fp}^
   11da4:	04240000 	strteq	r0, [r4], #-0
   11da8:	0212083c 	andseq	r0, r2, #60, 16	; 0x3c0000
   11dac:	4a0b0000 	bmi	2d1db4 <__ccfg+0x2b1e0c>
   11db0:	04000004 	streq	r0, [r0], #-4
   11db4:	002c093e 	eoreq	r0, ip, lr, lsr r9
   11db8:	0b000000 	bleq	11dc0 <__exidx_end+0xce94>
   11dbc:	00000354 	andeq	r0, r0, r4, asr r3
   11dc0:	2c093f04 	stccs	15, cr3, [r9], {4}
   11dc4:	04000000 	streq	r0, [r0], #-0
   11dc8:	0002fd0b 	andeq	pc, r2, fp, lsl #26
   11dcc:	09400400 	stmdbeq	r0, {sl}^
   11dd0:	0000002c 	andeq	r0, r0, ip, lsr #32
   11dd4:	050b0b08 	streq	r0, [fp, #-2824]	; 0xfffff4f8
   11dd8:	41040000 	mrsmi	r0, (UNDEF: 4)
   11ddc:	00002c09 	andeq	r2, r0, r9, lsl #24
   11de0:	190b0c00 	stmdbne	fp, {sl, fp}
   11de4:	04000007 	streq	r0, [r0], #-7
   11de8:	002c0942 	eoreq	r0, ip, r2, asr #18
   11dec:	0b100000 	bleq	411df4 <__ccfg+0x3f1e4c>
   11df0:	00000800 	andeq	r0, r0, r0, lsl #16
   11df4:	2c094304 	stccs	3, cr4, [r9], {4}
   11df8:	14000000 	strne	r0, [r0], #-0
   11dfc:	0002c20b 	andeq	ip, r2, fp, lsl #4
   11e00:	09440400 	stmdbeq	r4, {sl}^
   11e04:	0000002c 	andeq	r0, r0, ip, lsr #32
   11e08:	04530b18 	ldrbeq	r0, [r3], #-2840	; 0xfffff4e8
   11e0c:	45040000 	strmi	r0, [r4, #-0]
   11e10:	00002c09 	andeq	r2, r0, r9, lsl #24
   11e14:	c30b1c00 	movwgt	r1, #48128	; 0xbc00
   11e18:	04000006 	streq	r0, [r0], #-6
   11e1c:	002c0946 	eoreq	r0, ip, r6, asr #18
   11e20:	00200000 	eoreq	r0, r0, r0
   11e24:	00006110 	andeq	r6, r0, r0, lsl r1
   11e28:	04010800 	streq	r0, [r1], #-2048	; 0xfffff800
   11e2c:	0257084f 	subseq	r0, r7, #5177344	; 0x4f0000
   11e30:	700b0000 	andvc	r0, fp, r0
   11e34:	04000009 	streq	r0, [r0], #-9
   11e38:	02570a50 	subseq	r0, r7, #80, 20	; 0x50000
   11e3c:	0b000000 	bleq	11e44 <__exidx_end+0xcf18>
   11e40:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
   11e44:	57095104 	strpl	r5, [r9, -r4, lsl #2]
   11e48:	80000002 	andhi	r0, r0, r2
   11e4c:	0009d911 	andeq	sp, r9, r1, lsl r9
   11e50:	0a530400 	beq	14d2e58 <__ccfg+0x14b2eb0>
   11e54:	000000fb 	strdeq	r0, [r0], -fp
   11e58:	1d110100 	ldfnes	f0, [r1, #-0]
   11e5c:	0400000a 	streq	r0, [r0], #-10
   11e60:	00fb0a56 	rscseq	r0, fp, r6, asr sl
   11e64:	01040000 	mrseq	r0, (UNDEF: 4)
   11e68:	00f90800 	rscseq	r0, r9, r0, lsl #16
   11e6c:	02670000 	rsbeq	r0, r7, #0
   11e70:	25090000 	strcs	r0, [r9, #-0]
   11e74:	1f000000 	svcne	0x00000000
   11e78:	07861000 	streq	r1, [r6, r0]
   11e7c:	01900000 	orrseq	r0, r0, r0
   11e80:	aa086204 	bge	22a698 <__ccfg+0x20a6f0>
   11e84:	0b000002 	bleq	11e94 <__exidx_end+0xcf68>
   11e88:	00000a32 	andeq	r0, r0, r2, lsr sl
   11e8c:	aa126304 	bge	4aaaa4 <__ccfg+0x48aafc>
   11e90:	00000002 	andeq	r0, r0, r2
   11e94:	0004620b 	andeq	r6, r4, fp, lsl #4
   11e98:	06640400 	strbteq	r0, [r4], -r0, lsl #8
   11e9c:	0000002c 	andeq	r0, r0, ip, lsr #32
   11ea0:	026f0b04 	rsbeq	r0, pc, #4, 22	; 0x1000
   11ea4:	66040000 	strvs	r0, [r4], -r0
   11ea8:	0002b009 	andeq	fp, r2, r9
   11eac:	610b0800 	tstvs	fp, r0, lsl #16
   11eb0:	04000000 	streq	r0, [r0], #-0
   11eb4:	02121e67 	andseq	r1, r2, #1648	; 0x670
   11eb8:	00880000 	addeq	r0, r8, r0
   11ebc:	0267040f 	rsbeq	r0, r7, #251658240	; 0xf000000
   11ec0:	c0080000 	andgt	r0, r8, r0
   11ec4:	c0000002 	andgt	r0, r0, r2
   11ec8:	09000002 	stmdbeq	r0, {r1}
   11ecc:	00000025 	andeq	r0, r0, r5, lsr #32
   11ed0:	040f001f 	streq	r0, [pc], #-31	; 11ed8 <__exidx_end+0xcfac>
   11ed4:	000002c6 	andeq	r0, r0, r6, asr #5
   11ed8:	093a0d12 	ldmdbeq	sl!, {r1, r4, r8, sl, fp}
   11edc:	04080000 	streq	r0, [r8], #-0
   11ee0:	02ef087a 	rsceq	r0, pc, #7995392	; 0x7a0000
   11ee4:	000b0000 	andeq	r0, fp, r0
   11ee8:	04000006 	streq	r0, [r0], #-6
   11eec:	02ef117b 	rsceq	r1, pc, #-1073741794	; 0xc000001e
   11ef0:	0b000000 	bleq	11ef8 <__exidx_end+0xcfcc>
   11ef4:	000018c1 	andeq	r1, r0, r1, asr #17
   11ef8:	2c067c04 	stccs	12, cr7, [r6], {4}
   11efc:	04000000 	streq	r0, [r0], #-0
   11f00:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
   11f04:	0d000000 	stceq	0, cr0, [r0, #-0]
   11f08:	000003b2 			; <UNDEFINED> instruction: 0x000003b2
   11f0c:	08ba0468 	ldmeq	sl!, {r3, r5, r6, sl}
   11f10:	00000438 	andeq	r0, r0, r8, lsr r4
   11f14:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   11f18:	ef12bb04 	svc	0x0012bb04
   11f1c:	00000002 	andeq	r0, r0, r2
   11f20:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   11f24:	2c07bc04 	stccs	12, cr11, [r7], {4}
   11f28:	04000000 	streq	r0, [r0], #-0
   11f2c:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   11f30:	2c07bd04 	stccs	13, cr11, [r7], {4}
   11f34:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   11f38:	0001e90b 	andeq	lr, r1, fp, lsl #18
   11f3c:	09be0400 	ldmibeq	lr!, {sl}
   11f40:	0000005c 	andeq	r0, r0, ip, asr r0
   11f44:	065e0b0c 	ldrbeq	r0, [lr], -ip, lsl #22
   11f48:	bf040000 	svclt	0x00040000
   11f4c:	00005c09 	andeq	r5, r0, r9, lsl #24
   11f50:	5f0e0e00 	svcpl	0x000e0e00
   11f54:	04006662 	streq	r6, [r0], #-1634	; 0xfffff99e
   11f58:	02c711c0 	sbceq	r1, r7, #192, 2	; 0x30
   11f5c:	0b100000 	bleq	411f64 <__ccfg+0x3f1fbc>
   11f60:	000001e0 	andeq	r0, r0, r0, ror #3
   11f64:	2c07c104 	stfcsd	f4, [r7], {4}
   11f68:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11f6c:	0002740b 	andeq	r7, r2, fp, lsl #8
   11f70:	0ac80400 	beq	ff212f78 <_estack+0xdf20df78>
   11f74:	000000f9 	strdeq	r0, [r0], -r9
   11f78:	18510b1c 	ldmdane	r1, {r2, r3, r4, r8, r9, fp}^
   11f7c:	ca040000 	bgt	111f84 <__ccfg+0xf1fdc>
   11f80:	0005bc1d 	andeq	fp, r5, sp, lsl ip
   11f84:	180b2000 	stmdane	fp, {sp}
   11f88:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   11f8c:	05e61dcc 	strbeq	r1, [r6, #3532]!	; 0xdcc
   11f90:	0b240000 	bleq	911f98 <__ccfg+0x8f1ff0>
   11f94:	00000a43 	andeq	r0, r0, r3, asr #20
   11f98:	0a0dcf04 	beq	385bb0 <__ccfg+0x365c08>
   11f9c:	28000006 	stmdacs	r0, {r1, r2}
   11fa0:	0018060b 	andseq	r0, r8, fp, lsl #12
   11fa4:	09d00400 	ldmibeq	r0, {sl}^
   11fa8:	00000624 	andeq	r0, r0, r4, lsr #12
   11fac:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; 11188 <__exidx_end+0xc25c>
   11fb0:	d3040062 	movwle	r0, #16482	; 0x4062
   11fb4:	0002c711 	andeq	ip, r2, r1, lsl r7
   11fb8:	5f0e3000 	svcpl	0x000e3000
   11fbc:	04007075 	streq	r7, [r0], #-117	; 0xffffff8b
   11fc0:	02ef12d4 	rsceq	r1, pc, #212, 4	; 0x4000000d
   11fc4:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
   11fc8:	0072755f 	rsbseq	r7, r2, pc, asr r5
   11fcc:	2c07d504 	cfstr32cs	mvfx13, [r7], {4}
   11fd0:	3c000000 	stccc	0, cr0, [r0], {-0}
   11fd4:	000a5a0b 	andeq	r5, sl, fp, lsl #20
   11fd8:	11d80400 	bicsne	r0, r8, r0, lsl #8
   11fdc:	0000062a 	andeq	r0, r0, sl, lsr #12
   11fe0:	09e90b40 	stmibeq	r9!, {r6, r8, r9, fp}^
   11fe4:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
   11fe8:	00063a11 	andeq	r3, r6, r1, lsl sl
   11fec:	5f0e4300 	svcpl	0x000e4300
   11ff0:	0400626c 	streq	r6, [r0], #-620	; 0xfffffd94
   11ff4:	02c711dc 	sbceq	r1, r7, #220, 2	; 0x37
   11ff8:	0b440000 	bleq	1112000 <__ccfg+0x10f2058>
   11ffc:	00000853 	andeq	r0, r0, r3, asr r8
   12000:	2c07df04 	stccs	15, cr13, [r7], {4}
   12004:	4c000000 	stcmi	0, cr0, [r0], {-0}
   12008:	0003ff0b 	andeq	pc, r3, fp, lsl #30
   1200c:	0ae00400 	beq	ff813014 <_estack+0xdf80e014>
   12010:	0000007f 	andeq	r0, r0, pc, ror r0
   12014:	43200b50 			; <UNDEFINED> instruction: 0x43200b50
   12018:	e3040000 	movw	r0, #16384	; 0x4000
   1201c:	00045612 	andeq	r5, r4, r2, lsl r6
   12020:	6b0b5400 	blvs	2e7028 <__ccfg+0x2c7080>
   12024:	04000008 	streq	r0, [r0], #-8
   12028:	01130ce7 	tsteq	r3, r7, ror #25
   1202c:	0b580000 	bleq	1612034 <__ccfg+0x15f208c>
   12030:	0000078e 	andeq	r0, r0, lr, lsl #15
   12034:	ed0ee904 	vstr.16	s28, [lr, #-8]
   12038:	5c000000 	stcpl	0, cr0, [r0], {-0}
   1203c:	000a150b 	andeq	r1, sl, fp, lsl #10
   12040:	09ea0400 	stmibeq	sl!, {sl}^
   12044:	0000002c 	andeq	r0, r0, ip, lsr #32
   12048:	2c130064 	ldccs	0, cr0, [r3], {100}	; 0x64
   1204c:	56000000 	strpl	r0, [r0], -r0
   12050:	14000004 	strne	r0, [r0], #-4
   12054:	00000456 	andeq	r0, r0, r6, asr r4
   12058:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   1205c:	05aa1400 	streq	r1, [sl, #1024]!	; 0x400
   12060:	2c140000 	ldccs	0, cr0, [r4], {-0}
   12064:	00000000 	andeq	r0, r0, r0
   12068:	0461040f 	strbteq	r0, [r1], #-1039	; 0xfffffbf1
   1206c:	56150000 	ldrpl	r0, [r5], -r0
   12070:	16000004 	strne	r0, [r0], -r4
   12074:	0000435e 	andeq	r4, r0, lr, asr r3
   12078:	65040428 	strvs	r0, [r4, #-1064]	; 0xfffffbd8
   1207c:	05aa0802 	streq	r0, [sl, #2050]!	; 0x802
   12080:	f4170000 			; <UNDEFINED> instruction: 0xf4170000
   12084:	04000006 	streq	r0, [r0], #-6
   12088:	2c070267 	sfmcs	f0, 4, [r7], {103}	; 0x67
   1208c:	00000000 	andeq	r0, r0, r0
   12090:	0005ce17 	andeq	ip, r5, r7, lsl lr
   12094:	026c0400 	rsbeq	r0, ip, #0, 8
   12098:	0006960b 	andeq	r9, r6, fp, lsl #12
   1209c:	55170400 	ldrpl	r0, [r7, #-1024]	; 0xfffffc00
   120a0:	04000002 	streq	r0, [r0], #-2
   120a4:	9614026c 	ldrls	r0, [r4], -ip, ror #4
   120a8:	08000006 	stmdaeq	r0, {r1, r2}
   120ac:	000a4917 	andeq	r4, sl, r7, lsl r9
   120b0:	026c0400 	rsbeq	r0, ip, #0, 8
   120b4:	0006961e 	andeq	r9, r6, lr, lsl r6
   120b8:	5d170c00 	ldcpl	12, cr0, [r7, #-0]
   120bc:	04000004 	streq	r0, [r0], #-4
   120c0:	2c08026e 	sfmcs	f0, 4, [r8], {110}	; 0x6e
   120c4:	10000000 	andne	r0, r0, r0
   120c8:	00040f17 	andeq	r0, r4, r7, lsl pc
   120cc:	026f0400 	rsbeq	r0, pc, #0, 8
   120d0:	00089608 	andeq	r9, r8, r8, lsl #12
   120d4:	fc171400 	ldc2	4, cr1, [r7], {-0}
   120d8:	04000009 	streq	r0, [r0], #-9
   120dc:	2c070272 	sfmcs	f0, 4, [r7], {114}	; 0x72
   120e0:	30000000 	andcc	r0, r0, r0
   120e4:	003d4e17 	eorseq	r4, sp, r7, lsl lr
   120e8:	02730400 	rsbseq	r0, r3, #0, 8
   120ec:	0008ab16 	andeq	sl, r8, r6, lsl fp
   120f0:	a1173400 	tstge	r7, r0, lsl #8
   120f4:	04000005 	streq	r0, [r0], #-5
   120f8:	2c070275 	sfmcs	f0, 4, [r7], {117}	; 0x75
   120fc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   12100:	00069b17 	andeq	r9, r6, r7, lsl fp
   12104:	02770400 	rsbseq	r0, r7, #0, 8
   12108:	0008bc0a 	andeq	fp, r8, sl, lsl #24
   1210c:	cc173c00 	ldcgt	12, cr3, [r7], {-0}
   12110:	04000002 	streq	r0, [r0], #-2
   12114:	7913027a 	ldmdbvc	r3, {r1, r3, r4, r5, r6, r9}
   12118:	40000001 	andmi	r0, r0, r1
   1211c:	00037817 	andeq	r7, r3, r7, lsl r8
   12120:	027b0400 	rsbseq	r0, fp, #0, 8
   12124:	00002c07 	andeq	r2, r0, r7, lsl #24
   12128:	b2174400 	andslt	r4, r7, #0, 8
   1212c:	04000004 	streq	r0, [r0], #-4
   12130:	7913027c 	ldmdbvc	r3, {r2, r3, r4, r5, r6, r9}
   12134:	48000001 	stmdami	r0, {r0}
   12138:	00060617 	andeq	r0, r6, r7, lsl r6
   1213c:	027d0400 	rsbseq	r0, sp, #0, 8
   12140:	0008c214 	andeq	ip, r8, r4, lsl r2
   12144:	39174c00 	ldmdbcc	r7, {sl, fp, lr}
   12148:	04000008 	streq	r0, [r0], #-8
   1214c:	2c070280 	sfmcs	f0, 4, [r7], {128}	; 0x80
   12150:	50000000 	andpl	r0, r0, r0
   12154:	0008d017 	andeq	sp, r8, r7, lsl r0
   12158:	02810400 	addeq	r0, r1, #0, 8
   1215c:	0005aa09 	andeq	sl, r5, r9, lsl #20
   12160:	ea175400 	b	5e7168 <__ccfg+0x5c71c0>
   12164:	04000008 	streq	r0, [r0], #-8
   12168:	710702a4 	smlatbvc	r7, r4, r2, r0
   1216c:	58000008 	stmdapl	r0, {r3}
   12170:	00078618 	andeq	r8, r7, r8, lsl r6
   12174:	02a80400 	adceq	r0, r8, #0, 8
   12178:	0002aa13 	andeq	sl, r2, r3, lsl sl
   1217c:	18014800 	stmdane	r1, {fp, lr}
   12180:	0000052e 	andeq	r0, r0, lr, lsr #10
   12184:	1202a904 	andne	sl, r2, #4, 18	; 0x10000
   12188:	00000267 	andeq	r0, r0, r7, ror #4
   1218c:	1518014c 	ldrne	r0, [r8, #-332]	; 0xfffffeb4
   12190:	04000005 	streq	r0, [r0], #-5
   12194:	d30c02ad 	movwle	r0, #49837	; 0xc2ad
   12198:	dc000008 	stcle	0, cr0, [r0], {8}
   1219c:	094d1802 	stmdbeq	sp, {r1, fp, ip}^
   121a0:	b2040000 	andlt	r0, r4, #0
   121a4:	06571002 	ldrbeq	r1, [r7], -r2
   121a8:	02e00000 	rsceq	r0, r0, #0
   121ac:	0007c718 	andeq	ip, r7, r8, lsl r7
   121b0:	02b40400 	adcseq	r0, r4, #0, 8
   121b4:	0008df0a 	andeq	sp, r8, sl, lsl #30
   121b8:	0002ec00 	andeq	lr, r2, r0, lsl #24
   121bc:	05b0040f 	ldreq	r0, [r0, #1039]!	; 0x40f
   121c0:	01020000 	mrseq	r0, (UNDEF: 2)
   121c4:	0008e108 	andeq	lr, r8, r8, lsl #2
   121c8:	05b01500 	ldreq	r1, [r0, #1280]!	; 0x500
   121cc:	040f0000 	streq	r0, [pc], #-0	; 121d4 <__exidx_end+0xd2a8>
   121d0:	00000438 	andeq	r0, r0, r8, lsr r4
   121d4:	00002c13 	andeq	r2, r0, r3, lsl ip
   121d8:	0005e000 	andeq	lr, r5, r0
   121dc:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   121e0:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   121e4:	14000000 	strne	r0, [r0], #-0
   121e8:	000005e0 	andeq	r0, r0, r0, ror #11
   121ec:	00002c14 	andeq	r2, r0, r4, lsl ip
   121f0:	040f0000 	streq	r0, [pc], #-0	; 121f8 <__exidx_end+0xd2cc>
   121f4:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
   121f8:	05c2040f 	strbeq	r0, [r2, #1039]	; 0x40f
   121fc:	8b130000 	blhi	4d2204 <__ccfg+0x4b225c>
   12200:	0a000000 	beq	12208 <__exidx_end+0xd2dc>
   12204:	14000006 	strne	r0, [r0], #-6
   12208:	00000456 	andeq	r0, r0, r6, asr r4
   1220c:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   12210:	008b1400 	addeq	r1, fp, r0, lsl #8
   12214:	2c140000 	ldccs	0, cr0, [r4], {-0}
   12218:	00000000 	andeq	r0, r0, r0
   1221c:	05ec040f 	strbeq	r0, [ip, #1039]!	; 0x40f
   12220:	2c130000 	ldccs	0, cr0, [r3], {-0}
   12224:	24000000 	strcs	r0, [r0], #-0
   12228:	14000006 	strne	r0, [r0], #-6
   1222c:	00000456 	andeq	r0, r0, r6, asr r4
   12230:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   12234:	040f0000 	streq	r0, [pc], #-0	; 1223c <__exidx_end+0xd310>
   12238:	00000610 	andeq	r0, r0, r0, lsl r6
   1223c:	00005508 	andeq	r5, r0, r8, lsl #10
   12240:	00063a00 	andeq	r3, r6, r0, lsl #20
   12244:	00250900 	eoreq	r0, r5, r0, lsl #18
   12248:	00020000 	andeq	r0, r2, r0
   1224c:	00005508 	andeq	r5, r0, r8, lsl #10
   12250:	00064a00 	andeq	r4, r6, r0, lsl #20
   12254:	00250900 	eoreq	r0, r5, r0, lsl #18
   12258:	00000000 	andeq	r0, r0, r0
   1225c:	0003ed04 	andeq	lr, r3, r4, lsl #26
   12260:	01240400 			; <UNDEFINED> instruction: 0x01240400
   12264:	0002f51a 	andeq	pc, r2, sl, lsl r5	; <UNPREDICTABLE>
   12268:	43741900 	cmnmi	r4, #0, 18
   1226c:	040c0000 	streq	r0, [ip], #-0
   12270:	90080128 	andls	r0, r8, r8, lsr #2
   12274:	17000006 	strne	r0, [r0, -r6]
   12278:	00000a32 	andeq	r0, r0, r2, lsr sl
   1227c:	11012a04 	tstne	r1, r4, lsl #20
   12280:	00000690 	muleq	r0, r0, r6
   12284:	088b1700 	stmeq	fp, {r8, r9, sl, ip}
   12288:	2b040000 	blcs	112290 <__ccfg+0xf22e8>
   1228c:	002c0701 	eoreq	r0, ip, r1, lsl #14
   12290:	17040000 	strne	r0, [r4, -r0]
   12294:	0000058d 	andeq	r0, r0, sp, lsl #11
   12298:	0b012c04 	bleq	5d2b0 <__ccfg+0x3d308>
   1229c:	00000696 	muleq	r0, r6, r6
   122a0:	040f0008 	streq	r0, [pc], #-8	; 122a8 <__exidx_end+0xd37c>
   122a4:	00000657 	andeq	r0, r0, r7, asr r6
   122a8:	064a040f 	strbeq	r0, [sl], -pc, lsl #8
   122ac:	64190000 	ldrvs	r0, [r9], #-0
   122b0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   122b4:	08014404 	stmdaeq	r1, {r2, sl, lr}
   122b8:	000006d5 	ldrdeq	r0, [r0], -r5
   122bc:	00117a17 	andseq	r7, r1, r7, lsl sl
   122c0:	01450400 	cmpeq	r5, r0, lsl #8
   122c4:	0006d512 	andeq	sp, r6, r2, lsl r5
   122c8:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
   122cc:	04000006 	streq	r0, [r0], #-6
   122d0:	d5120146 	ldrle	r0, [r2, #-326]	; 0xfffffeba
   122d4:	06000006 	streq	r0, [r0], -r6
   122d8:	00101f17 	andseq	r1, r0, r7, lsl pc
   122dc:	01470400 	cmpeq	r7, r0, lsl #8
   122e0:	00006312 	andeq	r6, r0, r2, lsl r3
   122e4:	08000c00 	stmdaeq	r0, {sl, fp}
   122e8:	00000063 	andeq	r0, r0, r3, rrx
   122ec:	000006e5 	andeq	r0, r0, r5, ror #13
   122f0:	00002509 	andeq	r2, r0, r9, lsl #10
   122f4:	1a000200 	bne	12afc <__exidx_end+0xdbd0>
   122f8:	028504d0 	addeq	r0, r5, #208, 8	; 0xd0000000
   122fc:	0007fa07 	andeq	pc, r7, r7, lsl #20
   12300:	09ef1700 	stmibeq	pc!, {r8, r9, sl, ip}^	; <UNPREDICTABLE>
   12304:	87040000 	strhi	r0, [r4, -r0]
   12308:	00251802 	eoreq	r1, r5, r2, lsl #16
   1230c:	17000000 	strne	r0, [r0, -r0]
   12310:	00000955 	andeq	r0, r0, r5, asr r9
   12314:	12028804 	andne	r8, r2, #4, 16	; 0x40000
   12318:	000005aa 	andeq	r0, r0, sl, lsr #11
   1231c:	03a51704 			; <UNDEFINED> instruction: 0x03a51704
   12320:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
   12324:	07fa1002 	ldrbeq	r1, [sl, r2]!
   12328:	17080000 	strne	r0, [r8, -r0]
   1232c:	00000818 	andeq	r0, r0, r8, lsl r8
   12330:	17028a04 	strne	r8, [r2, -r4, lsl #20]
   12334:	0000018f 	andeq	r0, r0, pc, lsl #3
   12338:	05d51724 	ldrbeq	r1, [r5, #1828]	; 0x724
   1233c:	8b040000 	blhi	112344 <__ccfg+0xf239c>
   12340:	002c0f02 	eoreq	r0, ip, r2, lsl #30
   12344:	17480000 	strbne	r0, [r8, -r0]
   12348:	00000a2d 	andeq	r0, r0, sp, lsr #20
   1234c:	2c028c04 	stccs	12, cr8, [r2], {4}
   12350:	00000078 	andeq	r0, r0, r8, ror r0
   12354:	00851750 	addeq	r1, r5, r0, asr r7
   12358:	8d040000 	stchi	0, cr0, [r4, #-0]
   1235c:	069c1a02 	ldreq	r1, [ip], r2, lsl #20
   12360:	17580000 	ldrbne	r0, [r8, -r0]
   12364:	000004ea 	andeq	r0, r0, sl, ror #9
   12368:	16028e04 	strne	r8, [r2], -r4, lsl #28
   1236c:	000000ed 	andeq	r0, r0, sp, ror #1
   12370:	09621768 	stmdbeq	r2!, {r3, r5, r6, r8, r9, sl, ip}^
   12374:	8f040000 	svchi	0x00040000
   12378:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   1237c:	17700000 	ldrbne	r0, [r0, -r0]!
   12380:	0000006f 	andeq	r0, r0, pc, rrx
   12384:	16029004 	strne	r9, [r2], -r4
   12388:	000000ed 	andeq	r0, r0, sp, ror #1
   1238c:	08491778 	stmdaeq	r9, {r3, r4, r5, r6, r8, r9, sl, ip}^
   12390:	91040000 	mrsls	r0, (UNDEF: 4)
   12394:	080a1002 	stmdaeq	sl, {r1, ip}
   12398:	17800000 	strne	r0, [r0, r0]
   1239c:	00000382 	andeq	r0, r0, r2, lsl #7
   123a0:	10029204 	andne	r9, r2, r4, lsl #4
   123a4:	0000081a 	andeq	r0, r0, sl, lsl r8
   123a8:	090d1788 	stmdbeq	sp, {r3, r7, r8, r9, sl, ip}
   123ac:	93040000 	movwls	r0, #16384	; 0x4000
   123b0:	002c0f02 	eoreq	r0, ip, r2, lsl #30
   123b4:	17a00000 	strne	r0, [r0, r0]!
   123b8:	00000229 	andeq	r0, r0, r9, lsr #4
   123bc:	16029404 	strne	r9, [r2], -r4, lsl #8
   123c0:	000000ed 	andeq	r0, r0, sp, ror #1
   123c4:	051f17a4 	ldreq	r1, [pc, #-1956]	; 11c28 <__exidx_end+0xccfc>
   123c8:	95040000 	strls	r0, [r4, #-0]
   123cc:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   123d0:	17ac0000 	strne	r0, [ip, r0]!
   123d4:	00000467 	andeq	r0, r0, r7, ror #8
   123d8:	16029604 	strne	r9, [r2], -r4, lsl #12
   123dc:	000000ed 	andeq	r0, r0, sp, ror #1
   123e0:	064f17b4 			; <UNDEFINED> instruction: 0x064f17b4
   123e4:	97040000 	strls	r0, [r4, -r0]
   123e8:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   123ec:	17bc0000 	ldrne	r0, [ip, r0]!
   123f0:	000004d9 	ldrdeq	r0, [r0], -r9
   123f4:	16029804 	strne	r9, [r2], -r4, lsl #16
   123f8:	000000ed 	andeq	r0, r0, sp, ror #1
   123fc:	06f217c4 	ldrbteq	r1, [r2], r4, asr #15
   12400:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
   12404:	002c0802 	eoreq	r0, ip, r2, lsl #16
   12408:	00cc0000 	sbceq	r0, ip, r0
   1240c:	0005b008 	andeq	fp, r5, r8
   12410:	00080a00 	andeq	r0, r8, r0, lsl #20
   12414:	00250900 	eoreq	r0, r5, r0, lsl #18
   12418:	00190000 	andseq	r0, r9, r0
   1241c:	0005b008 	andeq	fp, r5, r8
   12420:	00081a00 	andeq	r1, r8, r0, lsl #20
   12424:	00250900 	eoreq	r0, r5, r0, lsl #18
   12428:	00070000 	andeq	r0, r7, r0
   1242c:	0005b008 	andeq	fp, r5, r8
   12430:	00082a00 	andeq	r2, r8, r0, lsl #20
   12434:	00250900 	eoreq	r0, r5, r0, lsl #18
   12438:	00170000 	andseq	r0, r7, r0
   1243c:	9e04f01a 	mcrls	0, 0, pc, cr4, cr10, {0}	; <UNPREDICTABLE>
   12440:	08510702 	ldmdaeq	r1, {r1, r8, r9, sl}^
   12444:	5d170000 	ldcpl	0, cr0, [r7, #-0]
   12448:	04000003 	streq	r0, [r0], #-3
   1244c:	511b02a1 	tstpl	fp, r1, lsr #5
   12450:	00000008 	andeq	r0, r0, r8
   12454:	000a5117 	andeq	r5, sl, r7, lsl r1
   12458:	02a20400 	adceq	r0, r2, #0, 8
   1245c:	00086118 	andeq	r6, r8, r8, lsl r1
   12460:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
   12464:	000002ef 	andeq	r0, r0, pc, ror #5
   12468:	00000861 	andeq	r0, r0, r1, ror #16
   1246c:	00002509 	andeq	r2, r0, r9, lsl #10
   12470:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
   12474:	00000025 	andeq	r0, r0, r5, lsr #32
   12478:	00000871 	andeq	r0, r0, r1, ror r8
   1247c:	00002509 	andeq	r2, r0, r9, lsl #10
   12480:	1b001d00 	blne	19888 <__exidx_end+0x1495c>
   12484:	028304f0 	addeq	r0, r3, #240, 8	; 0xf0000000
   12488:	00089603 	andeq	r9, r8, r3, lsl #12
   1248c:	435e1c00 	cmpmi	lr, #0, 24
   12490:	9a040000 	bls	112498 <__ccfg+0xf24f0>
   12494:	06e50b02 	strbteq	r0, [r5], r2, lsl #22
   12498:	271c0000 	ldrcs	r0, [ip, -r0]
   1249c:	04000008 	streq	r0, [r0], #-8
   124a0:	2a0b02a3 	bcs	2d2f34 <__ccfg+0x2b2f8c>
   124a4:	00000008 	andeq	r0, r0, r8
   124a8:	0005b008 	andeq	fp, r5, r8
   124ac:	0008a600 	andeq	sl, r8, r0, lsl #12
   124b0:	00250900 	eoreq	r0, r5, r0, lsl #18
   124b4:	00180000 	andseq	r0, r8, r0
   124b8:	000a381d 	andeq	r3, sl, sp, lsl r8
   124bc:	a6040f00 	strge	r0, [r4], -r0, lsl #30
   124c0:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   124c4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
   124c8:	00045614 	andeq	r5, r4, r4, lsl r6
   124cc:	040f0000 	streq	r0, [pc], #-0	; 124d4 <__exidx_end+0xd5a8>
   124d0:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   124d4:	0179040f 	cmneq	r9, pc, lsl #8
   124d8:	d31e0000 	tstle	lr, #0
   124dc:	14000008 	strne	r0, [r0], #-8
   124e0:	0000002c 	andeq	r0, r0, ip, lsr #32
   124e4:	d9040f00 	stmdble	r4, {r8, r9, sl, fp}
   124e8:	0f000008 	svceq	0x00000008
   124ec:	0008c804 	andeq	ip, r8, r4, lsl #16
   124f0:	064a0800 	strbeq	r0, [sl], -r0, lsl #16
   124f4:	08ef0000 	stmiaeq	pc!, {}^	; <UNPREDICTABLE>
   124f8:	25090000 	strcs	r0, [r9, #-0]
   124fc:	02000000 	andeq	r0, r0, #0
   12500:	07f41f00 	ldrbeq	r1, [r4, r0, lsl #30]!
   12504:	33040000 	movwcc	r0, #16384	; 0x4000
   12508:	04561703 	ldrbeq	r1, [r6], #-1795	; 0xfffff8fd
   1250c:	ed1f0000 	ldc	0, cr0, [pc, #-0]	; 12514 <__exidx_end+0xd5e8>
   12510:	04000007 	streq	r0, [r0], #-7
   12514:	5c1d0334 	ldcpl	3, cr0, [sp], {52}	; 0x34
   12518:	20000004 	andcs	r0, r0, r4
   1251c:	00003ef0 	strdeq	r3, [r0], -r0
   12520:	aa0e6706 	bge	3ac140 <__ccfg+0x38c198>
   12524:	21000005 	tstcs	r0, r5
   12528:	000009f7 	strdeq	r0, [r0], -r7
   1252c:	2c059006 	stccs	0, cr9, [r5], {6}
   12530:	ac000000 	stcge	0, cr0, [r0], {-0}
   12534:	38000040 	stmdacc	r0, {r6}
   12538:	01000000 	mrseq	r0, (UNDEF: 0)
   1253c:	0009449c 	muleq	r9, ip, r4
   12540:	42fd2200 	rscsmi	r2, sp, #0, 4
   12544:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
   12548:	00045612 	andeq	r5, r4, r2, lsl r6
   1254c:	0056d700 	subseq	sp, r6, r0, lsl #14
   12550:	0056d100 	subseq	sp, r6, r0, lsl #2
   12554:	4d230000 	stcmi	0, cr0, [r3, #-0]
   12558:	06000041 	streq	r0, [r0], -r1, asr #32
   1255c:	4098069f 	umullsmi	r0, r8, pc, r6	; <UNPREDICTABLE>
   12560:	00140000 	andseq	r0, r4, r0
   12564:	9c010000 	stcls	0, cr0, [r1], {-0}
   12568:	00117b24 	andseq	r7, r1, r4, lsr #22
   1256c:	153e0100 	ldrne	r0, [lr, #-256]!	; 0xffffff00
   12570:	00000025 	andeq	r0, r0, r5, lsr #32
   12574:	fd225001 	stc2	0, cr5, [r2, #-4]!
   12578:	01000042 	tsteq	r0, r2, asr #32
   1257c:	04561240 	ldrbeq	r1, [r6], #-576	; 0xfffffdc0
   12580:	57080000 	strpl	r0, [r8, -r0]
   12584:	57040000 	strpl	r0, [r4, -r0]
   12588:	00000000 	andeq	r0, r0, r0
   1258c:	000009f5 	strdeq	r0, [r0], -r5
   12590:	43b10004 			; <UNDEFINED> instruction: 0x43b10004
   12594:	01040000 	mrseq	r0, (UNDEF: 4)
   12598:	00004006 	andeq	r4, r0, r6
   1259c:	0041d70c 	subeq	sp, r1, ip, lsl #14
   125a0:	00420b00 	subeq	r0, r2, r0, lsl #22
   125a4:	0040e400 	subeq	lr, r0, r0, lsl #8
   125a8:	00003800 	andeq	r3, r0, r0, lsl #16
   125ac:	0087ff00 	addeq	pc, r7, r0, lsl #30
   125b0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   125b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
   125b8:	98070403 	stmdals	r7, {r0, r1, sl}
   125bc:	03000003 	movweq	r0, #3
   125c0:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
   125c4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   125c8:	003ed704 	eorseq	sp, lr, r4, lsl #14
   125cc:	08920400 	ldmeq	r2, {sl}
   125d0:	65020000 	strvs	r0, [r2, #-0]
   125d4:	002c1701 	eoreq	r1, ip, r1, lsl #14
   125d8:	01030000 	mrseq	r0, (UNDEF: 3)
   125dc:	0008da06 	andeq	sp, r8, r6, lsl #20
   125e0:	08010300 	stmdaeq	r1, {r8, r9}
   125e4:	000008d8 	ldrdeq	r0, [r0], -r8
   125e8:	9f050203 	svcls	0x00050203
   125ec:	03000007 	movweq	r0, #7
   125f0:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
   125f4:	04030000 	streq	r0, [r3], #-0
   125f8:	0005e905 	andeq	lr, r5, r5, lsl #18
   125fc:	07040300 	streq	r0, [r4, -r0, lsl #6]
   12600:	00000393 	muleq	r0, r3, r3
   12604:	8e070803 	cdphi	8, 0, cr0, cr7, cr3, {0}
   12608:	05000003 	streq	r0, [r0, #-3]
   1260c:	00000776 	andeq	r0, r0, r6, ror r7
   12610:	331ec803 	tstcc	lr, #196608	; 0x30000
   12614:	05000000 	streq	r0, [r0, #-0]
   12618:	000009e2 	andeq	r0, r0, r2, ror #19
   1261c:	6a0e2e04 	bvs	39de34 <__ccfg+0x37de8c>
   12620:	05000000 	streq	r0, [r0, #-0]
   12624:	00000267 	andeq	r0, r0, r7, ror #4
   12628:	6a0e7404 	bvs	3af640 <__ccfg+0x38f698>
   1262c:	06000000 	streq	r0, [r0], -r0
   12630:	03a50404 			; <UNDEFINED> instruction: 0x03a50404
   12634:	000000c5 	andeq	r0, r0, r5, asr #1
   12638:	00058707 	andeq	r8, r5, r7, lsl #14
   1263c:	0ca70400 	cfstrseq	mvf0, [r7]
   12640:	00000041 	andeq	r0, r0, r1, asr #32
   12644:	0007e607 	andeq	lr, r7, r7, lsl #12
   12648:	13a80400 			; <UNDEFINED> instruction: 0x13a80400
   1264c:	000000c5 	andeq	r0, r0, r5, asr #1
   12650:	00550800 	subseq	r0, r5, r0, lsl #16
   12654:	00d50000 	sbcseq	r0, r5, r0
   12658:	2c090000 	stccs	0, cr0, [r9], {-0}
   1265c:	03000000 	movweq	r0, #0
   12660:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
   12664:	00f909a2 	rscseq	r0, r9, r2, lsr #19
   12668:	220b0000 	andcs	r0, fp, #0
   1266c:	04000003 	streq	r0, [r0], #-3
   12670:	002507a4 	eoreq	r0, r5, r4, lsr #15
   12674:	0b000000 	bleq	1267c <__exidx_end+0xd750>
   12678:	000004aa 	andeq	r0, r0, sl, lsr #9
   1267c:	a305a904 	movwge	sl, #22788	; 0x5904
   12680:	04000000 	streq	r0, [r0], #-0
   12684:	06a50500 	strteq	r0, [r5], r0, lsl #10
   12688:	aa040000 	bge	112690 <__ccfg+0xf26e8>
   1268c:	0000d503 	andeq	sp, r0, r3, lsl #10
   12690:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
   12694:	000041c9 	andeq	r4, r0, r9, asr #3
   12698:	6a0fd204 	bvs	406eb0 <__ccfg+0x3e6f08>
   1269c:	05000000 	streq	r0, [r0, #-0]
   126a0:	00000629 	andeq	r0, r0, r9, lsr #12
   126a4:	71191605 	tstvc	r9, r5, lsl #12
   126a8:	05000000 	streq	r0, [r0, #-0]
   126ac:	000001fe 	strdeq	r0, [r0], -lr
   126b0:	250d0c06 	strcs	r0, [sp, #-3078]	; 0xfffff3fa
   126b4:	05000000 	streq	r0, [r0, #-0]
   126b8:	00000555 	andeq	r0, r0, r5, asr r5
   126bc:	1f1b2305 	svcne	0x001b2305
   126c0:	0d000001 	stceq	0, cr0, [r0, #-4]
   126c4:	000002a7 	andeq	r0, r0, r7, lsr #5
   126c8:	08340518 	ldmdaeq	r4!, {r3, r4, r8, sl}
   126cc:	00000191 	muleq	r0, r1, r1
   126d0:	000a320b 	andeq	r3, sl, fp, lsl #4
   126d4:	13360500 	teqne	r6, #0, 10
   126d8:	00000191 	muleq	r0, r1, r1
   126dc:	6b5f0e00 	blvs	17d5ee4 <__ccfg+0x17b5f3c>
   126e0:	07370500 	ldreq	r0, [r7, -r0, lsl #10]!
   126e4:	00000025 	andeq	r0, r0, r5, lsr #32
   126e8:	08410b04 	stmdaeq	r1, {r2, r8, r9, fp}^
   126ec:	37050000 	strcc	r0, [r5, -r0]
   126f0:	0000250b 	andeq	r2, r0, fp, lsl #10
   126f4:	a20b0800 	andge	r0, fp, #0, 16
   126f8:	0500003e 	streq	r0, [r0, #-62]	; 0xffffffc2
   126fc:	00251437 	eoreq	r1, r5, r7, lsr r4
   12700:	0b0c0000 	bleq	312708 <__ccfg+0x2f2760>
   12704:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
   12708:	251b3705 	ldrcs	r3, [fp, #-1797]	; 0xfffff8fb
   1270c:	10000000 	andne	r0, r0, r0
   12710:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
   12714:	970b3805 	strls	r3, [fp, -r5, lsl #16]
   12718:	14000001 	strne	r0, [r0], #-1
   1271c:	37040f00 	strcc	r0, [r4, -r0, lsl #30]
   12720:	08000001 	stmdaeq	r0, {r0}
   12724:	00000113 	andeq	r0, r0, r3, lsl r1
   12728:	000001a7 	andeq	r0, r0, r7, lsr #3
   1272c:	00002c09 	andeq	r2, r0, r9, lsl #24
   12730:	0d000000 	stceq	0, cr0, [r0, #-0]
   12734:	0000085c 	andeq	r0, r0, ip, asr r8
   12738:	083c0524 	ldmdaeq	ip!, {r2, r5, r8, sl}
   1273c:	0000022a 	andeq	r0, r0, sl, lsr #4
   12740:	00044a0b 	andeq	r4, r4, fp, lsl #20
   12744:	093e0500 	ldmdbeq	lr!, {r8, sl}
   12748:	00000025 	andeq	r0, r0, r5, lsr #32
   1274c:	03540b00 	cmpeq	r4, #0, 22
   12750:	3f050000 	svccc	0x00050000
   12754:	00002509 	andeq	r2, r0, r9, lsl #10
   12758:	fd0b0400 	stc2	4, cr0, [fp, #-0]
   1275c:	05000002 	streq	r0, [r0, #-2]
   12760:	00250940 	eoreq	r0, r5, r0, asr #18
   12764:	0b080000 	bleq	21276c <__ccfg+0x1f27c4>
   12768:	0000050b 	andeq	r0, r0, fp, lsl #10
   1276c:	25094105 	strcs	r4, [r9, #-261]	; 0xfffffefb
   12770:	0c000000 	stceq	0, cr0, [r0], {-0}
   12774:	0007190b 	andeq	r1, r7, fp, lsl #18
   12778:	09420500 	stmdbeq	r2, {r8, sl}^
   1277c:	00000025 	andeq	r0, r0, r5, lsr #32
   12780:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
   12784:	43050000 	movwmi	r0, #20480	; 0x5000
   12788:	00002509 	andeq	r2, r0, r9, lsl #10
   1278c:	c20b1400 	andgt	r1, fp, #0, 8
   12790:	05000002 	streq	r0, [r0, #-2]
   12794:	00250944 	eoreq	r0, r5, r4, asr #18
   12798:	0b180000 	bleq	6127a0 <__ccfg+0x5f27f8>
   1279c:	00000453 	andeq	r0, r0, r3, asr r4
   127a0:	25094505 	strcs	r4, [r9, #-1285]	; 0xfffffafb
   127a4:	1c000000 	stcne	0, cr0, [r0], {-0}
   127a8:	0006c30b 	andeq	ip, r6, fp, lsl #6
   127ac:	09460500 	stmdbeq	r6, {r8, sl}^
   127b0:	00000025 	andeq	r0, r0, r5, lsr #32
   127b4:	61100020 	tstvs	r0, r0, lsr #32
   127b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   127bc:	084f0501 	stmdaeq	pc, {r0, r8, sl}^	; <UNPREDICTABLE>
   127c0:	0000026f 	andeq	r0, r0, pc, ror #4
   127c4:	0009700b 	andeq	r7, r9, fp
   127c8:	0a500500 	beq	1413bd0 <__ccfg+0x13f3c28>
   127cc:	0000026f 	andeq	r0, r0, pc, ror #4
   127d0:	08bc0b00 	ldmeq	ip!, {r8, r9, fp}
   127d4:	51050000 	mrspl	r0, (UNDEF: 5)
   127d8:	00026f09 	andeq	r6, r2, r9, lsl #30
   127dc:	d9118000 	ldmdble	r1, {pc}
   127e0:	05000009 	streq	r0, [r0, #-9]
   127e4:	01130a53 	tsteq	r3, r3, asr sl
   127e8:	01000000 	mrseq	r0, (UNDEF: 0)
   127ec:	000a1d11 	andeq	r1, sl, r1, lsl sp
   127f0:	0a560500 	beq	1593bf8 <__ccfg+0x1573c50>
   127f4:	00000113 	andeq	r0, r0, r3, lsl r1
   127f8:	08000104 	stmdaeq	r0, {r2, r8}
   127fc:	00000105 	andeq	r0, r0, r5, lsl #2
   12800:	0000027f 	andeq	r0, r0, pc, ror r2
   12804:	00002c09 	andeq	r2, r0, r9, lsl #24
   12808:	10001f00 	andne	r1, r0, r0, lsl #30
   1280c:	00000786 	andeq	r0, r0, r6, lsl #15
   12810:	62050190 	andvs	r0, r5, #144, 2	; 0x24
   12814:	0002c208 	andeq	ip, r2, r8, lsl #4
   12818:	0a320b00 	beq	c95420 <__ccfg+0xc75478>
   1281c:	63050000 	movwvs	r0, #20480	; 0x5000
   12820:	0002c212 	andeq	ip, r2, r2, lsl r2
   12824:	620b0000 	andvs	r0, fp, #0
   12828:	05000004 	streq	r0, [r0, #-4]
   1282c:	00250664 	eoreq	r0, r5, r4, ror #12
   12830:	0b040000 	bleq	112838 <__ccfg+0xf2890>
   12834:	0000026f 	andeq	r0, r0, pc, ror #4
   12838:	c8096605 	stmdagt	r9, {r0, r2, r9, sl, sp, lr}
   1283c:	08000002 	stmdaeq	r0, {r1}
   12840:	0000610b 	andeq	r6, r0, fp, lsl #2
   12844:	1e670500 	cdpne	5, 6, cr0, cr7, cr0, {0}
   12848:	0000022a 	andeq	r0, r0, sl, lsr #4
   1284c:	040f0088 	streq	r0, [pc], #-136	; 12854 <__exidx_end+0xd928>
   12850:	0000027f 	andeq	r0, r0, pc, ror r2
   12854:	0002d808 	andeq	sp, r2, r8, lsl #16
   12858:	0002d800 	andeq	sp, r2, r0, lsl #16
   1285c:	002c0900 	eoreq	r0, ip, r0, lsl #18
   12860:	001f0000 	andseq	r0, pc, r0
   12864:	02de040f 	sbcseq	r0, lr, #251658240	; 0xf000000
   12868:	0d120000 	ldceq	0, cr0, [r2, #-0]
   1286c:	0000093a 	andeq	r0, r0, sl, lsr r9
   12870:	087a0508 	ldmdaeq	sl!, {r3, r8, sl}^
   12874:	00000307 	andeq	r0, r0, r7, lsl #6
   12878:	0006000b 	andeq	r0, r6, fp
   1287c:	117b0500 	cmnne	fp, r0, lsl #10
   12880:	00000307 	andeq	r0, r0, r7, lsl #6
   12884:	18c10b00 	stmiane	r1, {r8, r9, fp}^
   12888:	7c050000 	stcvc	0, cr0, [r5], {-0}
   1288c:	00002506 	andeq	r2, r0, r6, lsl #10
   12890:	0f000400 	svceq	0x00000400
   12894:	00005504 	andeq	r5, r0, r4, lsl #10
   12898:	03b20d00 			; <UNDEFINED> instruction: 0x03b20d00
   1289c:	05680000 	strbeq	r0, [r8, #-0]!
   128a0:	045008ba 	ldrbeq	r0, [r0], #-2234	; 0xfffff746
   128a4:	5f0e0000 	svcpl	0x000e0000
   128a8:	bb050070 	bllt	152a70 <__ccfg+0x132ac8>
   128ac:	00030712 	andeq	r0, r3, r2, lsl r7
   128b0:	5f0e0000 	svcpl	0x000e0000
   128b4:	bc050072 	stclt	0, cr0, [r5], {114}	; 0x72
   128b8:	00002507 	andeq	r2, r0, r7, lsl #10
   128bc:	5f0e0400 	svcpl	0x000e0400
   128c0:	bd050077 	stclt	0, cr0, [r5, #-476]	; 0xfffffe24
   128c4:	00002507 	andeq	r2, r0, r7, lsl #10
   128c8:	e90b0800 	stmdb	fp, {fp}
   128cc:	05000001 	streq	r0, [r0, #-1]
   128d0:	005c09be 	ldrheq	r0, [ip], #-158	; 0xffffff62
   128d4:	0b0c0000 	bleq	3128dc <__ccfg+0x2f2934>
   128d8:	0000065e 	andeq	r0, r0, lr, asr r6
   128dc:	5c09bf05 	stcpl	15, cr11, [r9], {5}
   128e0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   128e4:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
   128e8:	11c00500 	bicne	r0, r0, r0, lsl #10
   128ec:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   128f0:	01e00b10 	mvneq	r0, r0, lsl fp
   128f4:	c1050000 	mrsgt	r0, (UNDEF: 5)
   128f8:	00002507 	andeq	r2, r0, r7, lsl #10
   128fc:	740b1800 	strvc	r1, [fp], #-2048	; 0xfffff800
   12900:	05000002 	streq	r0, [r0, #-2]
   12904:	01050ac8 	smlabteq	r5, r8, sl, r0
   12908:	0b1c0000 	bleq	712910 <__ccfg+0x6f2968>
   1290c:	00001851 	andeq	r1, r0, r1, asr r8
   12910:	d41dca05 	ldrle	ip, [sp], #-2565	; 0xfffff5fb
   12914:	20000005 	andcs	r0, r0, r5
   12918:	0018180b 	andseq	r1, r8, fp, lsl #16
   1291c:	1dcc0500 	cfstr64ne	mvdx0, [ip]
   12920:	000005fe 	strdeq	r0, [r0], -lr
   12924:	0a430b24 	beq	10d55bc <__ccfg+0x10b5614>
   12928:	cf050000 	svcgt	0x00050000
   1292c:	0006220d 	andeq	r2, r6, sp, lsl #4
   12930:	060b2800 	streq	r2, [fp], -r0, lsl #16
   12934:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
   12938:	063c09d0 			; <UNDEFINED> instruction: 0x063c09d0
   1293c:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
   12940:	0062755f 	rsbeq	r7, r2, pc, asr r5
   12944:	df11d305 	svcle	0x0011d305
   12948:	30000002 	andcc	r0, r0, r2
   1294c:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
   12950:	12d40500 	sbcsne	r0, r4, #0, 10
   12954:	00000307 	andeq	r0, r0, r7, lsl #6
   12958:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; 11b28 <__exidx_end+0xcbfc>
   1295c:	d5050072 	strle	r0, [r5, #-114]	; 0xffffff8e
   12960:	00002507 	andeq	r2, r0, r7, lsl #10
   12964:	5a0b3c00 	bpl	2e196c <__ccfg+0x2c19c4>
   12968:	0500000a 	streq	r0, [r0, #-10]
   1296c:	064211d8 			; <UNDEFINED> instruction: 0x064211d8
   12970:	0b400000 	bleq	1012978 <__ccfg+0xff29d0>
   12974:	000009e9 	andeq	r0, r0, r9, ror #19
   12978:	5211d905 	andspl	sp, r1, #81920	; 0x14000
   1297c:	43000006 	movwmi	r0, #6
   12980:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
   12984:	11dc0500 	bicsne	r0, ip, r0, lsl #10
   12988:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1298c:	08530b44 	ldmdaeq	r3, {r2, r6, r8, r9, fp}^
   12990:	df050000 	svcle	0x00050000
   12994:	00002507 	andeq	r2, r0, r7, lsl #10
   12998:	ff0b4c00 			; <UNDEFINED> instruction: 0xff0b4c00
   1299c:	05000003 	streq	r0, [r0, #-3]
   129a0:	008b0ae0 	addeq	r0, fp, r0, ror #21
   129a4:	0b500000 	bleq	14129ac <__ccfg+0x13f2a04>
   129a8:	00004320 	andeq	r4, r0, r0, lsr #6
   129ac:	6e12e305 	cdpvs	3, 1, cr14, cr2, cr5, {0}
   129b0:	54000004 	strpl	r0, [r0], #-4
   129b4:	00086b0b 	andeq	r6, r8, fp, lsl #22
   129b8:	0ce70500 	cfstr64eq	mvdx0, [r7]
   129bc:	0000012b 	andeq	r0, r0, fp, lsr #2
   129c0:	078e0b58 			; <UNDEFINED> instruction: 0x078e0b58
   129c4:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
   129c8:	0000f90e 	andeq	pc, r0, lr, lsl #18
   129cc:	150b5c00 	strne	r5, [fp, #-3072]	; 0xfffff400
   129d0:	0500000a 	streq	r0, [r0, #-10]
   129d4:	002509ea 	eoreq	r0, r5, sl, ror #19
   129d8:	00640000 	rsbeq	r0, r4, r0
   129dc:	00002513 	andeq	r2, r0, r3, lsl r5
   129e0:	00046e00 	andeq	r6, r4, r0, lsl #28
   129e4:	046e1400 	strbteq	r1, [lr], #-1024	; 0xfffffc00
   129e8:	05140000 	ldreq	r0, [r4, #-0]
   129ec:	14000001 	strne	r0, [r0], #-1
   129f0:	000005c2 	andeq	r0, r0, r2, asr #11
   129f4:	00002514 	andeq	r2, r0, r4, lsl r5
   129f8:	040f0000 	streq	r0, [pc], #-0	; 12a00 <__exidx_end+0xdad4>
   129fc:	00000479 	andeq	r0, r0, r9, ror r4
   12a00:	00046e15 	andeq	r6, r4, r5, lsl lr
   12a04:	435e1600 	cmpmi	lr, #0, 12
   12a08:	04280000 	strteq	r0, [r8], #-0
   12a0c:	08026505 	stmdaeq	r2, {r0, r2, r8, sl, sp, lr}
   12a10:	000005c2 	andeq	r0, r0, r2, asr #11
   12a14:	0006f417 	andeq	pc, r6, r7, lsl r4	; <UNPREDICTABLE>
   12a18:	02670500 	rsbeq	r0, r7, #0, 10
   12a1c:	00002507 	andeq	r2, r0, r7, lsl #10
   12a20:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
   12a24:	05000005 	streq	r0, [r0, #-5]
   12a28:	ae0b026c 	cdpge	2, 0, cr0, cr11, cr12, {3}
   12a2c:	04000006 	streq	r0, [r0], #-6
   12a30:	00025517 	andeq	r5, r2, r7, lsl r5
   12a34:	026c0500 	rsbeq	r0, ip, #0, 10
   12a38:	0006ae14 	andeq	sl, r6, r4, lsl lr
   12a3c:	49170800 	ldmdbmi	r7, {fp}
   12a40:	0500000a 	streq	r0, [r0, #-10]
   12a44:	ae1e026c 	cdpge	2, 1, cr0, cr14, cr12, {3}
   12a48:	0c000006 	stceq	0, cr0, [r0], {6}
   12a4c:	00045d17 	andeq	r5, r4, r7, lsl sp
   12a50:	026e0500 	rsbeq	r0, lr, #0, 10
   12a54:	00002508 	andeq	r2, r0, r8, lsl #10
   12a58:	0f171000 	svceq	0x00171000
   12a5c:	05000004 	streq	r0, [r0, #-4]
   12a60:	ae08026f 	cdpge	2, 0, cr0, cr8, cr15, {3}
   12a64:	14000008 	strne	r0, [r0], #-8
   12a68:	0009fc17 	andeq	pc, r9, r7, lsl ip	; <UNPREDICTABLE>
   12a6c:	02720500 	rsbseq	r0, r2, #0, 10
   12a70:	00002507 	andeq	r2, r0, r7, lsl #10
   12a74:	4e173000 	cdpmi	0, 1, cr3, cr7, cr0, {0}
   12a78:	0500003d 	streq	r0, [r0, #-61]	; 0xffffffc3
   12a7c:	c3160273 	tstgt	r6, #805306375	; 0x30000007
   12a80:	34000008 	strcc	r0, [r0], #-8
   12a84:	0005a117 	andeq	sl, r5, r7, lsl r1
   12a88:	02750500 	rsbseq	r0, r5, #0, 10
   12a8c:	00002507 	andeq	r2, r0, r7, lsl #10
   12a90:	9b173800 	blls	5e0a98 <__ccfg+0x5c0af0>
   12a94:	05000006 	streq	r0, [r0, #-6]
   12a98:	d40a0277 	strle	r0, [sl], #-631	; 0xfffffd89
   12a9c:	3c000008 	stccc	0, cr0, [r0], {8}
   12aa0:	0002cc17 	andeq	ip, r2, r7, lsl ip
   12aa4:	027a0500 	rsbseq	r0, sl, #0, 10
   12aa8:	00019113 	andeq	r9, r1, r3, lsl r1
   12aac:	78174000 	ldmdavc	r7, {lr}
   12ab0:	05000003 	streq	r0, [r0, #-3]
   12ab4:	2507027b 	strcs	r0, [r7, #-635]	; 0xfffffd85
   12ab8:	44000000 	strmi	r0, [r0], #-0
   12abc:	0004b217 	andeq	fp, r4, r7, lsl r2
   12ac0:	027c0500 	rsbseq	r0, ip, #0, 10
   12ac4:	00019113 	andeq	r9, r1, r3, lsl r1
   12ac8:	06174800 	ldreq	r4, [r7], -r0, lsl #16
   12acc:	05000006 	streq	r0, [r0, #-6]
   12ad0:	da14027d 	ble	5134cc <__ccfg+0x4f3524>
   12ad4:	4c000008 	stcmi	0, cr0, [r0], {8}
   12ad8:	00083917 	andeq	r3, r8, r7, lsl r9
   12adc:	02800500 	addeq	r0, r0, #0, 10
   12ae0:	00002507 	andeq	r2, r0, r7, lsl #10
   12ae4:	d0175000 	andsle	r5, r7, r0
   12ae8:	05000008 	streq	r0, [r0, #-8]
   12aec:	c2090281 	andgt	r0, r9, #268435464	; 0x10000008
   12af0:	54000005 	strpl	r0, [r0], #-5
   12af4:	0008ea17 	andeq	lr, r8, r7, lsl sl
   12af8:	02a40500 	adceq	r0, r4, #0, 10
   12afc:	00088907 	andeq	r8, r8, r7, lsl #18
   12b00:	86185800 	ldrhi	r5, [r8], -r0, lsl #16
   12b04:	05000007 	streq	r0, [r0, #-7]
   12b08:	c21302a8 	andsgt	r0, r3, #168, 4	; 0x8000000a
   12b0c:	48000002 	stmdami	r0, {r1}
   12b10:	052e1801 	streq	r1, [lr, #-2049]!	; 0xfffff7ff
   12b14:	a9050000 	stmdbge	r5, {}	; <UNPREDICTABLE>
   12b18:	027f1202 	rsbseq	r1, pc, #536870912	; 0x20000000
   12b1c:	014c0000 	mrseq	r0, (UNDEF: 76)
   12b20:	00051518 	andeq	r1, r5, r8, lsl r5
   12b24:	02ad0500 	adceq	r0, sp, #0, 10
   12b28:	0008eb0c 	andeq	lr, r8, ip, lsl #22
   12b2c:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
   12b30:	0000094d 	andeq	r0, r0, sp, asr #18
   12b34:	1002b205 	andne	fp, r2, r5, lsl #4
   12b38:	0000066f 	andeq	r0, r0, pc, ror #12
   12b3c:	c71802e0 	ldrgt	r0, [r8, -r0, ror #5]
   12b40:	05000007 	streq	r0, [r0, #-7]
   12b44:	f70a02b4 			; <UNDEFINED> instruction: 0xf70a02b4
   12b48:	ec000008 	stc	0, cr0, [r0], {8}
   12b4c:	040f0002 	streq	r0, [pc], #-2	; 12b54 <__exidx_end+0xdc28>
   12b50:	000005c8 	andeq	r0, r0, r8, asr #11
   12b54:	e1080103 	tst	r8, r3, lsl #2
   12b58:	15000008 	strne	r0, [r0, #-8]
   12b5c:	000005c8 	andeq	r0, r0, r8, asr #11
   12b60:	0450040f 	ldrbeq	r0, [r0], #-1039	; 0xfffffbf1
   12b64:	25130000 	ldrcs	r0, [r3, #-0]
   12b68:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
   12b6c:	14000005 	strne	r0, [r0], #-5
   12b70:	0000046e 	andeq	r0, r0, lr, ror #8
   12b74:	00010514 	andeq	r0, r1, r4, lsl r5
   12b78:	05f81400 	ldrbeq	r1, [r8, #1024]!	; 0x400
   12b7c:	25140000 	ldrcs	r0, [r4, #-0]
   12b80:	00000000 	andeq	r0, r0, r0
   12b84:	05cf040f 	strbeq	r0, [pc, #1039]	; 12f9b <__exidx_end+0xe06f>
   12b88:	040f0000 	streq	r0, [pc], #-0	; 12b90 <__exidx_end+0xdc64>
   12b8c:	000005da 	ldrdeq	r0, [r0], -sl
   12b90:	00009713 	andeq	r9, r0, r3, lsl r7
   12b94:	00062200 	andeq	r2, r6, r0, lsl #4
   12b98:	046e1400 	strbteq	r1, [lr], #-1024	; 0xfffffc00
   12b9c:	05140000 	ldreq	r0, [r4, #-0]
   12ba0:	14000001 	strne	r0, [r0], #-1
   12ba4:	00000097 	muleq	r0, r7, r0
   12ba8:	00002514 	andeq	r2, r0, r4, lsl r5
   12bac:	040f0000 	streq	r0, [pc], #-0	; 12bb4 <__exidx_end+0xdc88>
   12bb0:	00000604 	andeq	r0, r0, r4, lsl #12
   12bb4:	00002513 	andeq	r2, r0, r3, lsl r5
   12bb8:	00063c00 	andeq	r3, r6, r0, lsl #24
   12bbc:	046e1400 	strbteq	r1, [lr], #-1024	; 0xfffffc00
   12bc0:	05140000 	ldreq	r0, [r4, #-0]
   12bc4:	00000001 	andeq	r0, r0, r1
   12bc8:	0628040f 	strteq	r0, [r8], -pc, lsl #8
   12bcc:	55080000 	strpl	r0, [r8, #-0]
   12bd0:	52000000 	andpl	r0, r0, #0
   12bd4:	09000006 	stmdbeq	r0, {r1, r2}
   12bd8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12bdc:	55080002 	strpl	r0, [r8, #-2]
   12be0:	62000000 	andvs	r0, r0, #0
   12be4:	09000006 	stmdbeq	r0, {r1, r2}
   12be8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12bec:	ed040000 	stc	0, cr0, [r4, #-0]
   12bf0:	05000003 	streq	r0, [r0, #-3]
   12bf4:	0d1a0124 	ldfeqs	f0, [sl, #-144]	; 0xffffff70
   12bf8:	19000003 	stmdbne	r0, {r0, r1}
   12bfc:	00004374 	andeq	r4, r0, r4, ror r3
   12c00:	0128050c 			; <UNDEFINED> instruction: 0x0128050c
   12c04:	0006a808 	andeq	sl, r6, r8, lsl #16
   12c08:	0a321700 	beq	c98810 <__ccfg+0xc78868>
   12c0c:	2a050000 	bcs	152c14 <__ccfg+0x132c6c>
   12c10:	06a81101 	strteq	r1, [r8], r1, lsl #2
   12c14:	17000000 	strne	r0, [r0, -r0]
   12c18:	0000088b 	andeq	r0, r0, fp, lsl #17
   12c1c:	07012b05 	streq	r2, [r1, -r5, lsl #22]
   12c20:	00000025 	andeq	r0, r0, r5, lsr #32
   12c24:	058d1704 	streq	r1, [sp, #1796]	; 0x704
   12c28:	2c050000 	stccs	0, cr0, [r5], {-0}
   12c2c:	06ae0b01 	strteq	r0, [lr], r1, lsl #22
   12c30:	00080000 	andeq	r0, r8, r0
   12c34:	066f040f 	strbteq	r0, [pc], -pc, lsl #8
   12c38:	040f0000 	streq	r0, [pc], #-0	; 12c40 <__exidx_end+0xdd14>
   12c3c:	00000662 	andeq	r0, r0, r2, ror #12
   12c40:	00036419 	andeq	r6, r3, r9, lsl r4
   12c44:	44050e00 	strmi	r0, [r5], #-3584	; 0xfffff200
   12c48:	06ed0801 	strbteq	r0, [sp], r1, lsl #16
   12c4c:	7a170000 	bvc	5d2c54 <__ccfg+0x5b2cac>
   12c50:	05000011 	streq	r0, [r0, #-17]	; 0xffffffef
   12c54:	ed120145 	ldfs	f0, [r2, #-276]	; 0xfffffeec
   12c58:	00000006 	andeq	r0, r0, r6
   12c5c:	00061817 	andeq	r1, r6, r7, lsl r8
   12c60:	01460500 	cmpeq	r6, r0, lsl #10
   12c64:	0006ed12 	andeq	lr, r6, r2, lsl sp
   12c68:	1f170600 	svcne	0x00170600
   12c6c:	05000010 	streq	r0, [r0, #-16]
   12c70:	63120147 	tstvs	r2, #-1073741807	; 0xc0000011
   12c74:	0c000000 	stceq	0, cr0, [r0], {-0}
   12c78:	00630800 	rsbeq	r0, r3, r0, lsl #16
   12c7c:	06fd0000 	ldrbteq	r0, [sp], r0
   12c80:	2c090000 	stccs	0, cr0, [r9], {-0}
   12c84:	02000000 	andeq	r0, r0, #0
   12c88:	05d01a00 	ldrbeq	r1, [r0, #2560]	; 0xa00
   12c8c:	12070285 	andne	r0, r7, #1342177288	; 0x50000008
   12c90:	17000008 	strne	r0, [r0, -r8]
   12c94:	000009ef 	andeq	r0, r0, pc, ror #19
   12c98:	18028705 	stmdane	r2, {r0, r2, r8, r9, sl, pc}
   12c9c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12ca0:	09551700 	ldmdbeq	r5, {r8, r9, sl, ip}^
   12ca4:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
   12ca8:	05c21202 	strbeq	r1, [r2, #514]	; 0x202
   12cac:	17040000 	strne	r0, [r4, -r0]
   12cb0:	000003a5 	andeq	r0, r0, r5, lsr #7
   12cb4:	10028905 	andne	r8, r2, r5, lsl #18
   12cb8:	00000812 	andeq	r0, r0, r2, lsl r8
   12cbc:	08181708 	ldmdaeq	r8, {r3, r8, r9, sl, ip}
   12cc0:	8a050000 	bhi	152cc8 <__ccfg+0x132d20>
   12cc4:	01a71702 			; <UNDEFINED> instruction: 0x01a71702
   12cc8:	17240000 	strne	r0, [r4, -r0]!
   12ccc:	000005d5 	ldrdeq	r0, [r0], -r5
   12cd0:	0f028b05 	svceq	0x00028b05
   12cd4:	00000025 	andeq	r0, r0, r5, lsr #32
   12cd8:	0a2d1748 	beq	b58a00 <__ccfg+0xb38a58>
   12cdc:	8c050000 	stchi	0, cr0, [r5], {-0}
   12ce0:	00782c02 	rsbseq	r2, r8, r2, lsl #24
   12ce4:	17500000 	ldrbne	r0, [r0, -r0]
   12ce8:	00000085 	andeq	r0, r0, r5, lsl #1
   12cec:	1a028d05 	bne	b6108 <__ccfg+0x96160>
   12cf0:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
   12cf4:	04ea1758 	strbteq	r1, [sl], #1880	; 0x758
   12cf8:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
   12cfc:	00f91602 	rscseq	r1, r9, r2, lsl #12
   12d00:	17680000 	strbne	r0, [r8, -r0]!
   12d04:	00000962 	andeq	r0, r0, r2, ror #18
   12d08:	16028f05 	strne	r8, [r2], -r5, lsl #30
   12d0c:	000000f9 	strdeq	r0, [r0], -r9
   12d10:	006f1770 	rsbeq	r1, pc, r0, ror r7	; <UNPREDICTABLE>
   12d14:	90050000 	andls	r0, r5, r0
   12d18:	00f91602 	rscseq	r1, r9, r2, lsl #12
   12d1c:	17780000 	ldrbne	r0, [r8, -r0]!
   12d20:	00000849 	andeq	r0, r0, r9, asr #16
   12d24:	10029105 	andne	r9, r2, r5, lsl #2
   12d28:	00000822 	andeq	r0, r0, r2, lsr #16
   12d2c:	03821780 	orreq	r1, r2, #128, 14	; 0x2000000
   12d30:	92050000 	andls	r0, r5, #0
   12d34:	08321002 	ldmdaeq	r2!, {r1, ip}
   12d38:	17880000 	strne	r0, [r8, r0]
   12d3c:	0000090d 	andeq	r0, r0, sp, lsl #18
   12d40:	0f029305 	svceq	0x00029305
   12d44:	00000025 	andeq	r0, r0, r5, lsr #32
   12d48:	022917a0 	eoreq	r1, r9, #160, 14	; 0x2800000
   12d4c:	94050000 	strls	r0, [r5], #-0
   12d50:	00f91602 	rscseq	r1, r9, r2, lsl #12
   12d54:	17a40000 	strne	r0, [r4, r0]!
   12d58:	0000051f 	andeq	r0, r0, pc, lsl r5
   12d5c:	16029505 	strne	r9, [r2], -r5, lsl #10
   12d60:	000000f9 	strdeq	r0, [r0], -r9
   12d64:	046717ac 	strbteq	r1, [r7], #-1964	; 0xfffff854
   12d68:	96050000 	strls	r0, [r5], -r0
   12d6c:	00f91602 	rscseq	r1, r9, r2, lsl #12
   12d70:	17b40000 	ldrne	r0, [r4, r0]!
   12d74:	0000064f 	andeq	r0, r0, pc, asr #12
   12d78:	16029705 	strne	r9, [r2], -r5, lsl #14
   12d7c:	000000f9 	strdeq	r0, [r0], -r9
   12d80:	04d917bc 	ldrbeq	r1, [r9], #1980	; 0x7bc
   12d84:	98050000 	stmdals	r5, {}	; <UNPREDICTABLE>
   12d88:	00f91602 	rscseq	r1, r9, r2, lsl #12
   12d8c:	17c40000 	strbne	r0, [r4, r0]
   12d90:	000006f2 	strdeq	r0, [r0], -r2
   12d94:	08029905 	stmdaeq	r2, {r0, r2, r8, fp, ip, pc}
   12d98:	00000025 	andeq	r0, r0, r5, lsr #32
   12d9c:	c80800cc 	stmdagt	r8, {r2, r3, r6, r7}
   12da0:	22000005 	andcs	r0, r0, #5
   12da4:	09000008 	stmdbeq	r0, {r3}
   12da8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12dac:	c8080019 	stmdagt	r8, {r0, r3, r4}
   12db0:	32000005 	andcc	r0, r0, #5
   12db4:	09000008 	stmdbeq	r0, {r3}
   12db8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12dbc:	c8080007 	stmdagt	r8, {r0, r1, r2}
   12dc0:	42000005 	andmi	r0, r0, #5
   12dc4:	09000008 	stmdbeq	r0, {r3}
   12dc8:	0000002c 	andeq	r0, r0, ip, lsr #32
   12dcc:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
   12dd0:	07029e05 	streq	r9, [r2, -r5, lsl #28]
   12dd4:	00000869 	andeq	r0, r0, r9, ror #16
   12dd8:	00035d17 	andeq	r5, r3, r7, lsl sp
   12ddc:	02a10500 	adceq	r0, r1, #0, 10
   12de0:	0008691b 	andeq	r6, r8, fp, lsl r9
   12de4:	51170000 	tstpl	r7, r0
   12de8:	0500000a 	streq	r0, [r0, #-10]
   12dec:	791802a2 	ldmdbvc	r8, {r1, r5, r7, r9}
   12df0:	78000008 	stmdavc	r0, {r3}
   12df4:	03070800 	movweq	r0, #30720	; 0x7800
   12df8:	08790000 	ldmdaeq	r9!, {}^	; <UNPREDICTABLE>
   12dfc:	2c090000 	stccs	0, cr0, [r9], {-0}
   12e00:	1d000000 	stcne	0, cr0, [r0, #-0]
   12e04:	002c0800 	eoreq	r0, ip, r0, lsl #16
   12e08:	08890000 	stmeq	r9, {}	; <UNPREDICTABLE>
   12e0c:	2c090000 	stccs	0, cr0, [r9], {-0}
   12e10:	1d000000 	stcne	0, cr0, [r0, #-0]
   12e14:	05f01b00 	ldrbeq	r1, [r0, #2816]!	; 0xb00
   12e18:	ae030283 	cdpge	2, 0, cr0, cr3, cr3, {4}
   12e1c:	1c000008 	stcne	0, cr0, [r0], {8}
   12e20:	0000435e 	andeq	r4, r0, lr, asr r3
   12e24:	0b029a05 	bleq	b9640 <__ccfg+0x99698>
   12e28:	000006fd 	strdeq	r0, [r0], -sp
   12e2c:	0008271c 	andeq	r2, r8, ip, lsl r7
   12e30:	02a30500 	adceq	r0, r3, #0, 10
   12e34:	0008420b 	andeq	r4, r8, fp, lsl #4
   12e38:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
   12e3c:	be000005 	cdplt	0, 0, cr0, cr0, cr5, {0}
   12e40:	09000008 	stmdbeq	r0, {r3}
   12e44:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e48:	381d0018 	ldmdacc	sp, {r3, r4}
   12e4c:	0f00000a 	svceq	0x0000000a
   12e50:	0008be04 	andeq	fp, r8, r4, lsl #28
   12e54:	08d41e00 	ldmeq	r4, {r9, sl, fp, ip}^
   12e58:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   12e5c:	00000004 	andeq	r0, r0, r4
   12e60:	08c9040f 	stmiaeq	r9, {r0, r1, r2, r3, sl}^
   12e64:	040f0000 	streq	r0, [pc], #-0	; 12e6c <__exidx_end+0xdf40>
   12e68:	00000191 	muleq	r0, r1, r1
   12e6c:	0008eb1e 	andeq	lr, r8, lr, lsl fp
   12e70:	00251400 	eoreq	r1, r5, r0, lsl #8
   12e74:	0f000000 	svceq	0x00000000
   12e78:	0008f104 	andeq	pc, r8, r4, lsl #2
   12e7c:	e0040f00 	and	r0, r4, r0, lsl #30
   12e80:	08000008 	stmdaeq	r0, {r3}
   12e84:	00000662 	andeq	r0, r0, r2, ror #12
   12e88:	00000907 	andeq	r0, r0, r7, lsl #18
   12e8c:	00002c09 	andeq	r2, r0, r9, lsl #24
   12e90:	1f000200 	svcne	0x00000200
   12e94:	000007f4 	strdeq	r0, [r0], -r4
   12e98:	17033305 	strne	r3, [r3, -r5, lsl #6]
   12e9c:	0000046e 	andeq	r0, r0, lr, ror #8
   12ea0:	0007ed1f 	andeq	lr, r7, pc, lsl sp
   12ea4:	03340500 	teqeq	r4, #0, 10
   12ea8:	0004741d 	andeq	r7, r4, sp, lsl r4
   12eac:	41cb0500 	bicmi	r0, fp, r0, lsl #10
   12eb0:	25070000 	strcs	r0, [r7, #-0]
   12eb4:	00010717 	andeq	r0, r1, r7, lsl r7
   12eb8:	059a0500 	ldreq	r0, [sl, #1280]	; 0x500
   12ebc:	2a070000 	bcs	1d2ec4 <__ccfg+0x1b2f1c>
   12ec0:	00007f12 	andeq	r7, r0, r2, lsl pc
   12ec4:	43040d00 	movwmi	r0, #19712	; 0x4d00
   12ec8:	07100000 	ldreq	r0, [r0, -r0]
   12ecc:	09610836 	stmdbeq	r1!, {r1, r2, r4, r5, fp}^
   12ed0:	040b0000 	streq	r0, [fp], #-0
   12ed4:	07000042 	streq	r0, [r0, -r2, asr #32]
   12ed8:	092d0a37 	pusheq	{r0, r1, r2, r4, r5, r9, fp}
   12edc:	0b000000 	bleq	12ee4 <__exidx_end+0xdfb8>
   12ee0:	00004267 	andeq	r4, r0, r7, ror #4
   12ee4:	210e3807 	tstcs	lr, r7, lsl #16
   12ee8:	08000009 	stmdaeq	r0, {r0, r3}
   12eec:	425d2000 	subsmi	r2, sp, #0
   12ef0:	9a080000 	bls	212ef8 <__ccfg+0x1f2f50>
   12ef4:	00006a16 	andeq	r6, r0, r6, lsl sl
   12ef8:	41a72000 			; <UNDEFINED> instruction: 0x41a72000
   12efc:	9b080000 	blls	212f04 <__ccfg+0x1f2f5c>
   12f00:	00002515 	andeq	r2, r0, r5, lsl r5
   12f04:	05c20800 	strbeq	r0, [r2, #2048]	; 0x800
   12f08:	09890000 	stmibeq	r9, {}	; <UNPREDICTABLE>
   12f0c:	2c090000 	stccs	0, cr0, [r9], {-0}
   12f10:	01000000 	mrseq	r0, (UNDEF: 0)
   12f14:	41b12000 			; <UNDEFINED> instruction: 0x41b12000
   12f18:	9e080000 	cdpls	0, 0, cr0, cr8, cr0, {0}
   12f1c:	00097917 	andeq	r7, r9, r7, lsl r9
   12f20:	42582100 	subsmi	r2, r8, #0, 2
   12f24:	3b080000 	blcc	212f2c <__ccfg+0x1f2f84>
   12f28:	00092d0b 	andeq	r2, r9, fp, lsl #26
   12f2c:	0040e400 	subeq	lr, r0, r0, lsl #8
   12f30:	00003800 	andeq	r3, r0, r0, lsl #16
   12f34:	e69c0100 	ldr	r0, [ip], r0, lsl #2
   12f38:	22000009 	andcs	r0, r0, #9
   12f3c:	24010074 	strcs	r0, [r1], #-116	; 0xffffff8c
   12f40:	0009e610 	andeq	lr, r9, r0, lsl r6
   12f44:	00572f00 	subseq	r2, r7, r0, lsl #30
   12f48:	00572700 	subseq	r2, r7, r0, lsl #14
   12f4c:	6f6e2300 	svcvs	0x006e2300
   12f50:	26010077 			; <UNDEFINED> instruction: 0x26010077
   12f54:	00093912 	andeq	r3, r9, r2, lsl r9
   12f58:	68910200 	ldmvs	r1, {r9}
   12f5c:	0040f624 	subeq	pc, r0, r4, lsr #12
   12f60:	0009ec00 	andeq	lr, r9, r0, lsl #24
   12f64:	51012500 	tstpl	r1, r0, lsl #10
   12f68:	25007d02 	strcs	r7, [r0, #-3330]	; 0xfffff2fe
   12f6c:	30015201 	andcc	r5, r1, r1, lsl #4
   12f70:	040f0000 	streq	r0, [pc], #-0	; 12f78 <__exidx_end+0xe04c>
   12f74:	0000092d 	andeq	r0, r0, sp, lsr #18
   12f78:	0041b926 	subeq	fp, r1, r6, lsr #18
   12f7c:	0041b900 	subeq	fp, r1, r0, lsl #18
   12f80:	0ca10900 			; <UNDEFINED> instruction: 0x0ca10900
   12f84:	000a3400 	andeq	r3, sl, r0, lsl #8
   12f88:	d3000400 	movwle	r0, #1024	; 0x400
   12f8c:	04000045 	streq	r0, [r0], #-69	; 0xffffffbb
   12f90:	00400601 	subeq	r0, r0, r1, lsl #12
   12f94:	426f0c00 	rsbmi	r0, pc, #0, 24
   12f98:	42b00000 	adcsmi	r0, r0, #0
   12f9c:	411c0000 	tstmi	ip, r0
   12fa0:	002c0000 	eoreq	r0, ip, r0
   12fa4:	89c80000 	stmibhi	r8, {}^	; <UNPREDICTABLE>
   12fa8:	04020000 	streq	r0, [r2], #-0
   12fac:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   12fb0:	07040300 	streq	r0, [r4, -r0, lsl #6]
   12fb4:	00000398 	muleq	r0, r8, r3
   12fb8:	e4050803 	str	r0, [r5], #-2051	; 0xfffff7fd
   12fbc:	03000005 	movweq	r0, #5
   12fc0:	3ed70408 	cdpcc	4, 13, cr0, cr7, cr8, {0}
   12fc4:	92040000 	andls	r0, r4, #0
   12fc8:	02000008 	andeq	r0, r0, #8
   12fcc:	2c170165 	ldfcss	f0, [r7], {101}	; 0x65
   12fd0:	03000000 	movweq	r0, #0
   12fd4:	08da0601 	ldmeq	sl, {r0, r9, sl}^
   12fd8:	01030000 	mrseq	r0, (UNDEF: 3)
   12fdc:	0008d808 	andeq	sp, r8, r8, lsl #16
   12fe0:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   12fe4:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
   12fe8:	a6070203 	strge	r0, [r7], -r3, lsl #4
   12fec:	03000009 	movweq	r0, #9
   12ff0:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
   12ff4:	04030000 	streq	r0, [r3], #-0
   12ff8:	00039307 	andeq	r9, r3, r7, lsl #6
   12ffc:	07080300 	streq	r0, [r8, -r0, lsl #6]
   13000:	0000038e 	andeq	r0, r0, lr, lsl #7
   13004:	00077605 	andeq	r7, r7, r5, lsl #12
   13008:	1ec80300 	cdpne	3, 12, cr0, cr8, cr0, {0}
   1300c:	00000033 	andeq	r0, r0, r3, lsr r0
   13010:	0009e205 	andeq	lr, r9, r5, lsl #4
   13014:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
   13018:	0000006a 	andeq	r0, r0, sl, rrx
   1301c:	00026705 	andeq	r6, r2, r5, lsl #14
   13020:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
   13024:	0000006a 	andeq	r0, r0, sl, rrx
   13028:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
   1302c:	0000c503 	andeq	ip, r0, r3, lsl #10
   13030:	05870700 	streq	r0, [r7, #1792]	; 0x700
   13034:	a7040000 	strge	r0, [r4, -r0]
   13038:	0000410c 	andeq	r4, r0, ip, lsl #2
   1303c:	07e60700 	strbeq	r0, [r6, r0, lsl #14]!
   13040:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   13044:	0000c513 	andeq	ip, r0, r3, lsl r5
   13048:	55080000 	strpl	r0, [r8, #-0]
   1304c:	d5000000 	strle	r0, [r0, #-0]
   13050:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   13054:	0000002c 	andeq	r0, r0, ip, lsr #32
   13058:	080a0003 	stmdaeq	sl, {r0, r1}
   1305c:	f909a204 			; <UNDEFINED> instruction: 0xf909a204
   13060:	0b000000 	bleq	13068 <__exidx_end+0xe13c>
   13064:	00000322 	andeq	r0, r0, r2, lsr #6
   13068:	2507a404 	strcs	sl, [r7, #-1028]	; 0xfffffbfc
   1306c:	00000000 	andeq	r0, r0, r0
   13070:	0004aa0b 	andeq	sl, r4, fp, lsl #20
   13074:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
   13078:	000000a3 	andeq	r0, r0, r3, lsr #1
   1307c:	a5050004 	strge	r0, [r5, #-4]
   13080:	04000006 	streq	r0, [r0], #-6
   13084:	00d503aa 	sbcseq	r0, r5, sl, lsr #7
   13088:	040c0000 	streq	r0, [ip], #-0
   1308c:	0041c905 	subeq	ip, r1, r5, lsl #18
   13090:	0fd20400 	svceq	0x00d20400
   13094:	0000006a 	andeq	r0, r0, sl, rrx
   13098:	00062905 	andeq	r2, r6, r5, lsl #18
   1309c:	19160500 	ldmdbne	r6, {r8, sl}
   130a0:	00000071 	andeq	r0, r0, r1, ror r0
   130a4:	0001fe05 	andeq	pc, r1, r5, lsl #28
   130a8:	0d0c0600 	stceq	6, cr0, [ip, #-0]
   130ac:	00000025 	andeq	r0, r0, r5, lsr #32
   130b0:	00055505 	andeq	r5, r5, r5, lsl #10
   130b4:	1b230500 	blne	8d44bc <__ccfg+0x8b4514>
   130b8:	0000011f 	andeq	r0, r0, pc, lsl r1
   130bc:	0002a70d 	andeq	sl, r2, sp, lsl #14
   130c0:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
   130c4:	00019108 	andeq	r9, r1, r8, lsl #2
   130c8:	0a320b00 	beq	c95cd0 <__ccfg+0xc75d28>
   130cc:	36050000 	strcc	r0, [r5], -r0
   130d0:	00019113 	andeq	r9, r1, r3, lsl r1
   130d4:	5f0e0000 	svcpl	0x000e0000
   130d8:	3705006b 	strcc	r0, [r5, -fp, rrx]
   130dc:	00002507 	andeq	r2, r0, r7, lsl #10
   130e0:	410b0400 	tstmi	fp, r0, lsl #8
   130e4:	05000008 	streq	r0, [r0, #-8]
   130e8:	00250b37 	eoreq	r0, r5, r7, lsr fp
   130ec:	0b080000 	bleq	2130f4 <__ccfg+0x1f314c>
   130f0:	00003ea2 	andeq	r3, r0, r2, lsr #29
   130f4:	25143705 	ldrcs	r3, [r4, #-1797]	; 0xfffff8fb
   130f8:	0c000000 	stceq	0, cr0, [r0], {-0}
   130fc:	0003ba0b 	andeq	fp, r3, fp, lsl #20
   13100:	1b370500 	blne	dd4508 <__ccfg+0xdb4560>
   13104:	00000025 	andeq	r0, r0, r5, lsr #32
   13108:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   1310c:	0b380500 	bleq	e14514 <__ccfg+0xdf456c>
   13110:	00000197 	muleq	r0, r7, r1
   13114:	040f0014 	streq	r0, [pc], #-20	; 1311c <__exidx_end+0xe1f0>
   13118:	00000137 	andeq	r0, r0, r7, lsr r1
   1311c:	00011308 	andeq	r1, r1, r8, lsl #6
   13120:	0001a700 	andeq	sl, r1, r0, lsl #14
   13124:	002c0900 	eoreq	r0, ip, r0, lsl #18
   13128:	00000000 	andeq	r0, r0, r0
   1312c:	00085c0d 	andeq	r5, r8, sp, lsl #24
   13130:	3c052400 	cfstrscc	mvf2, [r5], {-0}
   13134:	00022a08 	andeq	r2, r2, r8, lsl #20
   13138:	044a0b00 	strbeq	r0, [sl], #-2816	; 0xfffff500
   1313c:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   13140:	00002509 	andeq	r2, r0, r9, lsl #10
   13144:	540b0000 	strpl	r0, [fp], #-0
   13148:	05000003 	streq	r0, [r0, #-3]
   1314c:	0025093f 	eoreq	r0, r5, pc, lsr r9
   13150:	0b040000 	bleq	113158 <__ccfg+0xf31b0>
   13154:	000002fd 	strdeq	r0, [r0], -sp
   13158:	25094005 	strcs	r4, [r9, #-5]
   1315c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13160:	00050b0b 	andeq	r0, r5, fp, lsl #22
   13164:	09410500 	stmdbeq	r1, {r8, sl}^
   13168:	00000025 	andeq	r0, r0, r5, lsr #32
   1316c:	07190b0c 	ldreq	r0, [r9, -ip, lsl #22]
   13170:	42050000 	andmi	r0, r5, #0
   13174:	00002509 	andeq	r2, r0, r9, lsl #10
   13178:	000b1000 	andeq	r1, fp, r0
   1317c:	05000008 	streq	r0, [r0, #-8]
   13180:	00250943 	eoreq	r0, r5, r3, asr #18
   13184:	0b140000 	bleq	51318c <__ccfg+0x4f31e4>
   13188:	000002c2 	andeq	r0, r0, r2, asr #5
   1318c:	25094405 	strcs	r4, [r9, #-1029]	; 0xfffffbfb
   13190:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13194:	0004530b 	andeq	r5, r4, fp, lsl #6
   13198:	09450500 	stmdbeq	r5, {r8, sl}^
   1319c:	00000025 	andeq	r0, r0, r5, lsr #32
   131a0:	06c30b1c 			; <UNDEFINED> instruction: 0x06c30b1c
   131a4:	46050000 	strmi	r0, [r5], -r0
   131a8:	00002509 	andeq	r2, r0, r9, lsl #10
   131ac:	10002000 	andne	r2, r0, r0
   131b0:	00000061 	andeq	r0, r0, r1, rrx
   131b4:	4f050108 	svcmi	0x00050108
   131b8:	00026f08 	andeq	r6, r2, r8, lsl #30
   131bc:	09700b00 	ldmdbeq	r0!, {r8, r9, fp}^
   131c0:	50050000 	andpl	r0, r5, r0
   131c4:	00026f0a 	andeq	r6, r2, sl, lsl #30
   131c8:	bc0b0000 	stclt	0, cr0, [fp], {-0}
   131cc:	05000008 	streq	r0, [r0, #-8]
   131d0:	026f0951 	rsbeq	r0, pc, #1327104	; 0x144000
   131d4:	11800000 	orrne	r0, r0, r0
   131d8:	000009d9 	ldrdeq	r0, [r0], -r9
   131dc:	130a5305 	movwne	r5, #41733	; 0xa305
   131e0:	00000001 	andeq	r0, r0, r1
   131e4:	0a1d1101 	beq	7575f0 <__ccfg+0x737648>
   131e8:	56050000 	strpl	r0, [r5], -r0
   131ec:	0001130a 	andeq	r1, r1, sl, lsl #6
   131f0:	00010400 	andeq	r0, r1, r0, lsl #8
   131f4:	00010508 	andeq	r0, r1, r8, lsl #10
   131f8:	00027f00 	andeq	r7, r2, r0, lsl #30
   131fc:	002c0900 	eoreq	r0, ip, r0, lsl #18
   13200:	001f0000 	andseq	r0, pc, r0
   13204:	00078610 	andeq	r8, r7, r0, lsl r6
   13208:	05019000 	streq	r9, [r1, #-0]
   1320c:	02c20862 	sbceq	r0, r2, #6422528	; 0x620000
   13210:	320b0000 	andcc	r0, fp, #0
   13214:	0500000a 	streq	r0, [r0, #-10]
   13218:	02c21263 	sbceq	r1, r2, #805306374	; 0x30000006
   1321c:	0b000000 	bleq	13224 <__exidx_end+0xe2f8>
   13220:	00000462 	andeq	r0, r0, r2, ror #8
   13224:	25066405 	strcs	r6, [r6, #-1029]	; 0xfffffbfb
   13228:	04000000 	streq	r0, [r0], #-0
   1322c:	00026f0b 	andeq	r6, r2, fp, lsl #30
   13230:	09660500 	stmdbeq	r6!, {r8, sl}^
   13234:	000002c8 	andeq	r0, r0, r8, asr #5
   13238:	00610b08 	rsbeq	r0, r1, r8, lsl #22
   1323c:	67050000 	strvs	r0, [r5, -r0]
   13240:	00022a1e 	andeq	r2, r2, lr, lsl sl
   13244:	0f008800 	svceq	0x00008800
   13248:	00027f04 	andeq	r7, r2, r4, lsl #30
   1324c:	02d80800 	sbcseq	r0, r8, #0, 16
   13250:	02d80000 	sbcseq	r0, r8, #0
   13254:	2c090000 	stccs	0, cr0, [r9], {-0}
   13258:	1f000000 	svcne	0x00000000
   1325c:	de040f00 	cdple	15, 0, cr0, cr4, cr0, {0}
   13260:	12000002 	andne	r0, r0, #2
   13264:	00093a0d 	andeq	r3, r9, sp, lsl #20
   13268:	7a050800 	bvc	155270 <__ccfg+0x1352c8>
   1326c:	00030708 	andeq	r0, r3, r8, lsl #14
   13270:	06000b00 	streq	r0, [r0], -r0, lsl #22
   13274:	7b050000 	blvc	15327c <__ccfg+0x1332d4>
   13278:	00030711 	andeq	r0, r3, r1, lsl r7
   1327c:	c10b0000 	mrsgt	r0, (UNDEF: 11)
   13280:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
   13284:	0025067c 	eoreq	r0, r5, ip, ror r6
   13288:	00040000 	andeq	r0, r4, r0
   1328c:	0055040f 	subseq	r0, r5, pc, lsl #8
   13290:	b20d0000 	andlt	r0, sp, #0
   13294:	68000003 	stmdavs	r0, {r0, r1}
   13298:	5008ba05 	andpl	fp, r8, r5, lsl #20
   1329c:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   132a0:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
   132a4:	030712bb 	movweq	r1, #29371	; 0x72bb
   132a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   132ac:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
   132b0:	002507bc 	strhteq	r0, [r5], -ip
   132b4:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   132b8:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   132bc:	002507bd 	strhteq	r0, [r5], -sp
   132c0:	0b080000 	bleq	2132c8 <__ccfg+0x1f3320>
   132c4:	000001e9 	andeq	r0, r0, r9, ror #3
   132c8:	5c09be05 	stcpl	14, cr11, [r9], {5}
   132cc:	0c000000 	stceq	0, cr0, [r0], {-0}
   132d0:	00065e0b 	andeq	r5, r6, fp, lsl #28
   132d4:	09bf0500 	ldmibeq	pc!, {r8, sl}	; <UNPREDICTABLE>
   132d8:	0000005c 	andeq	r0, r0, ip, asr r0
   132dc:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   132e0:	c0050066 	andgt	r0, r5, r6, rrx
   132e4:	0002df11 	andeq	sp, r2, r1, lsl pc
   132e8:	e00b1000 	and	r1, fp, r0
   132ec:	05000001 	streq	r0, [r0, #-1]
   132f0:	002507c1 	eoreq	r0, r5, r1, asr #15
   132f4:	0b180000 	bleq	6132fc <__ccfg+0x5f3354>
   132f8:	00000274 	andeq	r0, r0, r4, ror r2
   132fc:	050ac805 	streq	ip, [sl, #-2053]	; 0xfffff7fb
   13300:	1c000001 	stcne	0, cr0, [r0], {1}
   13304:	0018510b 	andseq	r5, r8, fp, lsl #2
   13308:	1dca0500 	cfstr64ne	mvdx0, [sl]
   1330c:	000005d4 	ldrdeq	r0, [r0], -r4
   13310:	18180b20 	ldmdane	r8, {r5, r8, r9, fp}
   13314:	cc050000 	stcgt	0, cr0, [r5], {-0}
   13318:	0005fe1d 	andeq	pc, r5, sp, lsl lr	; <UNPREDICTABLE>
   1331c:	430b2400 	movwmi	r2, #46080	; 0xb400
   13320:	0500000a 	streq	r0, [r0, #-10]
   13324:	06220dcf 	strteq	r0, [r2], -pc, asr #27
   13328:	0b280000 	bleq	a13330 <__ccfg+0x9f3388>
   1332c:	00001806 	andeq	r1, r0, r6, lsl #16
   13330:	3c09d005 	stccc	0, cr13, [r9], {5}
   13334:	2c000006 	stccs	0, cr0, [r0], {6}
   13338:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   1333c:	11d30500 	bicsne	r0, r3, r0, lsl #10
   13340:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13344:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 1251c <__exidx_end+0xd5f0>
   13348:	d4050070 	strle	r0, [r5], #-112	; 0xffffff90
   1334c:	00030712 	andeq	r0, r3, r2, lsl r7
   13350:	5f0e3800 	svcpl	0x000e3800
   13354:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   13358:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   1335c:	0b3c0000 	bleq	f13364 <__ccfg+0xef33bc>
   13360:	00000a5a 	andeq	r0, r0, sl, asr sl
   13364:	4211d805 	andsmi	sp, r1, #327680	; 0x50000
   13368:	40000006 	andmi	r0, r0, r6
   1336c:	0009e90b 	andeq	lr, r9, fp, lsl #18
   13370:	11d90500 	bicsne	r0, r9, r0, lsl #10
   13374:	00000652 	andeq	r0, r0, r2, asr r6
   13378:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   1337c:	dc050062 	stcle	0, cr0, [r5], {98}	; 0x62
   13380:	0002df11 	andeq	sp, r2, r1, lsl pc
   13384:	530b4400 	movwpl	r4, #46080	; 0xb400
   13388:	05000008 	streq	r0, [r0, #-8]
   1338c:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   13390:	0b4c0000 	bleq	1313398 <__ccfg+0x12f33f0>
   13394:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13398:	8b0ae005 	blhi	2cb3b4 <__ccfg+0x2ab40c>
   1339c:	50000000 	andpl	r0, r0, r0
   133a0:	0043200b 	subeq	r2, r3, fp
   133a4:	12e30500 	rscne	r0, r3, #0, 10
   133a8:	0000046e 	andeq	r0, r0, lr, ror #8
   133ac:	086b0b54 	stmdaeq	fp!, {r2, r4, r6, r8, r9, fp}^
   133b0:	e7050000 	str	r0, [r5, -r0]
   133b4:	00012b0c 	andeq	r2, r1, ip, lsl #22
   133b8:	8e0b5800 	cdphi	8, 0, cr5, cr11, cr0, {0}
   133bc:	05000007 	streq	r0, [r0, #-7]
   133c0:	00f90ee9 	rscseq	r0, r9, r9, ror #29
   133c4:	0b5c0000 	bleq	17133cc <__ccfg+0x16f3424>
   133c8:	00000a15 	andeq	r0, r0, r5, lsl sl
   133cc:	2509ea05 	strcs	lr, [r9, #-2565]	; 0xfffff5fb
   133d0:	64000000 	strvs	r0, [r0], #-0
   133d4:	00251300 	eoreq	r1, r5, r0, lsl #6
   133d8:	046e0000 	strbteq	r0, [lr], #-0
   133dc:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   133e0:	14000004 	strne	r0, [r0], #-4
   133e4:	00000105 	andeq	r0, r0, r5, lsl #2
   133e8:	0005c214 	andeq	ip, r5, r4, lsl r2
   133ec:	00251400 	eoreq	r1, r5, r0, lsl #8
   133f0:	0f000000 	svceq	0x00000000
   133f4:	00047904 	andeq	r7, r4, r4, lsl #18
   133f8:	046e1500 	strbteq	r1, [lr], #-1280	; 0xfffffb00
   133fc:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
   13400:	28000043 	stmdacs	r0, {r0, r1, r6}
   13404:	02650504 	rsbeq	r0, r5, #4, 10	; 0x1000000
   13408:	0005c208 	andeq	ip, r5, r8, lsl #4
   1340c:	06f41700 	ldrbteq	r1, [r4], r0, lsl #14
   13410:	67050000 	strvs	r0, [r5, -r0]
   13414:	00250702 	eoreq	r0, r5, r2, lsl #14
   13418:	17000000 	strne	r0, [r0, -r0]
   1341c:	000005ce 	andeq	r0, r0, lr, asr #11
   13420:	0b026c05 	bleq	ae43c <__ccfg+0x8e494>
   13424:	000006ae 	andeq	r0, r0, lr, lsr #13
   13428:	02551704 	subseq	r1, r5, #4, 14	; 0x100000
   1342c:	6c050000 	stcvs	0, cr0, [r5], {-0}
   13430:	06ae1402 	strteq	r1, [lr], r2, lsl #8
   13434:	17080000 	strne	r0, [r8, -r0]
   13438:	00000a49 	andeq	r0, r0, r9, asr #20
   1343c:	1e026c05 	cdpne	12, 0, cr6, cr2, cr5, {0}
   13440:	000006ae 	andeq	r0, r0, lr, lsr #13
   13444:	045d170c 	ldrbeq	r1, [sp], #-1804	; 0xfffff8f4
   13448:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
   1344c:	00250802 	eoreq	r0, r5, r2, lsl #16
   13450:	17100000 	ldrne	r0, [r0, -r0]
   13454:	0000040f 	andeq	r0, r0, pc, lsl #8
   13458:	08026f05 	stmdaeq	r2, {r0, r2, r8, r9, sl, fp, sp, lr}
   1345c:	000008ae 	andeq	r0, r0, lr, lsr #17
   13460:	09fc1714 	ldmibeq	ip!, {r2, r4, r8, r9, sl, ip}^
   13464:	72050000 	andvc	r0, r5, #0
   13468:	00250702 	eoreq	r0, r5, r2, lsl #14
   1346c:	17300000 	ldrne	r0, [r0, -r0]!
   13470:	00003d4e 	andeq	r3, r0, lr, asr #26
   13474:	16027305 	strne	r7, [r2], -r5, lsl #6
   13478:	000008c3 	andeq	r0, r0, r3, asr #17
   1347c:	05a11734 	streq	r1, [r1, #1844]!	; 0x734
   13480:	75050000 	strvc	r0, [r5, #-0]
   13484:	00250702 	eoreq	r0, r5, r2, lsl #14
   13488:	17380000 	ldrne	r0, [r8, -r0]!
   1348c:	0000069b 	muleq	r0, fp, r6
   13490:	0a027705 	beq	b10ac <__ccfg+0x91104>
   13494:	000008d4 	ldrdeq	r0, [r0], -r4
   13498:	02cc173c 	sbceq	r1, ip, #60, 14	; 0xf00000
   1349c:	7a050000 	bvc	1534a4 <__ccfg+0x1334fc>
   134a0:	01911302 	orrseq	r1, r1, r2, lsl #6
   134a4:	17400000 	strbne	r0, [r0, -r0]
   134a8:	00000378 	andeq	r0, r0, r8, ror r3
   134ac:	07027b05 	streq	r7, [r2, -r5, lsl #22]
   134b0:	00000025 	andeq	r0, r0, r5, lsr #32
   134b4:	04b21744 	ldrteq	r1, [r2], #1860	; 0x744
   134b8:	7c050000 	stcvc	0, cr0, [r5], {-0}
   134bc:	01911302 	orrseq	r1, r1, r2, lsl #6
   134c0:	17480000 	strbne	r0, [r8, -r0]
   134c4:	00000606 	andeq	r0, r0, r6, lsl #12
   134c8:	14027d05 	strne	r7, [r2], #-3333	; 0xfffff2fb
   134cc:	000008da 	ldrdeq	r0, [r0], -sl
   134d0:	0839174c 	ldmdaeq	r9!, {r2, r3, r6, r8, r9, sl, ip}
   134d4:	80050000 	andhi	r0, r5, r0
   134d8:	00250702 	eoreq	r0, r5, r2, lsl #14
   134dc:	17500000 	ldrbne	r0, [r0, -r0]
   134e0:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   134e4:	09028105 	stmdbeq	r2, {r0, r2, r8, pc}
   134e8:	000005c2 	andeq	r0, r0, r2, asr #11
   134ec:	08ea1754 	stmiaeq	sl!, {r2, r4, r6, r8, r9, sl, ip}^
   134f0:	a4050000 	strge	r0, [r5], #-0
   134f4:	08890702 	stmeq	r9, {r1, r8, r9, sl}
   134f8:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   134fc:	00000786 	andeq	r0, r0, r6, lsl #15
   13500:	1302a805 	movwne	sl, #10245	; 0x2805
   13504:	000002c2 	andeq	r0, r0, r2, asr #5
   13508:	2e180148 	mufcsem	f0, f0, #0.0
   1350c:	05000005 	streq	r0, [r0, #-5]
   13510:	7f1202a9 	svcvc	0x001202a9
   13514:	4c000002 	stcmi	0, cr0, [r0], {2}
   13518:	05151801 	ldreq	r1, [r5, #-2049]	; 0xfffff7ff
   1351c:	ad050000 	stcge	0, cr0, [r5, #-0]
   13520:	08eb0c02 	stmiaeq	fp!, {r1, sl, fp}^
   13524:	02dc0000 	sbcseq	r0, ip, #0
   13528:	00094d18 	andeq	r4, r9, r8, lsl sp
   1352c:	02b20500 	adcseq	r0, r2, #0, 10
   13530:	00066f10 	andeq	r6, r6, r0, lsl pc
   13534:	1802e000 	stmdane	r2, {sp, lr, pc}
   13538:	000007c7 	andeq	r0, r0, r7, asr #15
   1353c:	0a02b405 	beq	c0558 <__ccfg+0xa05b0>
   13540:	000008f7 	strdeq	r0, [r0], -r7
   13544:	0f0002ec 	svceq	0x000002ec
   13548:	0005c804 	andeq	ip, r5, r4, lsl #16
   1354c:	08010300 	stmdaeq	r1, {r8, r9}
   13550:	000008e1 	andeq	r0, r0, r1, ror #17
   13554:	0005c815 	andeq	ip, r5, r5, lsl r8
   13558:	50040f00 	andpl	r0, r4, r0, lsl #30
   1355c:	13000004 	movwne	r0, #4
   13560:	00000025 	andeq	r0, r0, r5, lsr #32
   13564:	000005f8 	strdeq	r0, [r0], -r8
   13568:	00046e14 	andeq	r6, r4, r4, lsl lr
   1356c:	01051400 	tsteq	r5, r0, lsl #8
   13570:	f8140000 			; <UNDEFINED> instruction: 0xf8140000
   13574:	14000005 	strne	r0, [r0], #-5
   13578:	00000025 	andeq	r0, r0, r5, lsr #32
   1357c:	cf040f00 	svcgt	0x00040f00
   13580:	0f000005 	svceq	0x00000005
   13584:	0005da04 	andeq	sp, r5, r4, lsl #20
   13588:	00971300 	addseq	r1, r7, r0, lsl #6
   1358c:	06220000 	strteq	r0, [r2], -r0
   13590:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   13594:	14000004 	strne	r0, [r0], #-4
   13598:	00000105 	andeq	r0, r0, r5, lsl #2
   1359c:	00009714 	andeq	r9, r0, r4, lsl r7
   135a0:	00251400 	eoreq	r1, r5, r0, lsl #8
   135a4:	0f000000 	svceq	0x00000000
   135a8:	00060404 	andeq	r0, r6, r4, lsl #8
   135ac:	00251300 	eoreq	r1, r5, r0, lsl #6
   135b0:	063c0000 	ldrteq	r0, [ip], -r0
   135b4:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   135b8:	14000004 	strne	r0, [r0], #-4
   135bc:	00000105 	andeq	r0, r0, r5, lsl #2
   135c0:	28040f00 	stmdacs	r4, {r8, r9, sl, fp}
   135c4:	08000006 	stmdaeq	r0, {r1, r2}
   135c8:	00000055 	andeq	r0, r0, r5, asr r0
   135cc:	00000652 	andeq	r0, r0, r2, asr r6
   135d0:	00002c09 	andeq	r2, r0, r9, lsl #24
   135d4:	08000200 	stmdaeq	r0, {r9}
   135d8:	00000055 	andeq	r0, r0, r5, asr r0
   135dc:	00000662 	andeq	r0, r0, r2, ror #12
   135e0:	00002c09 	andeq	r2, r0, r9, lsl #24
   135e4:	04000000 	streq	r0, [r0], #-0
   135e8:	000003ed 	andeq	r0, r0, sp, ror #7
   135ec:	1a012405 	bne	5c608 <__ccfg+0x3c660>
   135f0:	0000030d 	andeq	r0, r0, sp, lsl #6
   135f4:	00437419 	subeq	r7, r3, r9, lsl r4
   135f8:	28050c00 	stmdacs	r5, {sl, fp}
   135fc:	06a80801 	strteq	r0, [r8], r1, lsl #16
   13600:	32170000 	andscc	r0, r7, #0
   13604:	0500000a 	streq	r0, [r0, #-10]
   13608:	a811012a 	ldmdage	r1, {r1, r3, r5, r8}
   1360c:	00000006 	andeq	r0, r0, r6
   13610:	00088b17 	andeq	r8, r8, r7, lsl fp
   13614:	012b0500 			; <UNDEFINED> instruction: 0x012b0500
   13618:	00002507 	andeq	r2, r0, r7, lsl #10
   1361c:	8d170400 	cfldrshi	mvf0, [r7, #-0]
   13620:	05000005 	streq	r0, [r0, #-5]
   13624:	ae0b012c 	adfgeep	f0, f3, #4.0
   13628:	08000006 	stmdaeq	r0, {r1, r2}
   1362c:	6f040f00 	svcvs	0x00040f00
   13630:	0f000006 	svceq	0x00000006
   13634:	00066204 	andeq	r6, r6, r4, lsl #4
   13638:	03641900 	cmneq	r4, #0, 18
   1363c:	050e0000 	streq	r0, [lr, #-0]
   13640:	ed080144 	stfs	f0, [r8, #-272]	; 0xfffffef0
   13644:	17000006 	strne	r0, [r0, -r6]
   13648:	0000117a 	andeq	r1, r0, sl, ror r1
   1364c:	12014505 	andne	r4, r1, #20971520	; 0x1400000
   13650:	000006ed 	andeq	r0, r0, sp, ror #13
   13654:	06181700 	ldreq	r1, [r8], -r0, lsl #14
   13658:	46050000 	strmi	r0, [r5], -r0
   1365c:	06ed1201 	strbteq	r1, [sp], r1, lsl #4
   13660:	17060000 	strne	r0, [r6, -r0]
   13664:	0000101f 	andeq	r1, r0, pc, lsl r0
   13668:	12014705 	andne	r4, r1, #1310720	; 0x140000
   1366c:	00000063 	andeq	r0, r0, r3, rrx
   13670:	6308000c 	movwvs	r0, #32780	; 0x800c
   13674:	fd000000 	stc2	0, cr0, [r0, #-0]
   13678:	09000006 	stmdbeq	r0, {r1, r2}
   1367c:	0000002c 	andeq	r0, r0, ip, lsr #32
   13680:	d01a0002 	andsle	r0, sl, r2
   13684:	07028505 	streq	r8, [r2, -r5, lsl #10]
   13688:	00000812 	andeq	r0, r0, r2, lsl r8
   1368c:	0009ef17 	andeq	lr, r9, r7, lsl pc
   13690:	02870500 	addeq	r0, r7, #0, 10
   13694:	00002c18 	andeq	r2, r0, r8, lsl ip
   13698:	55170000 	ldrpl	r0, [r7, #-0]
   1369c:	05000009 	streq	r0, [r0, #-9]
   136a0:	c2120288 	andsgt	r0, r2, #136, 4	; 0x80000008
   136a4:	04000005 	streq	r0, [r0], #-5
   136a8:	0003a517 	andeq	sl, r3, r7, lsl r5
   136ac:	02890500 	addeq	r0, r9, #0, 10
   136b0:	00081210 	andeq	r1, r8, r0, lsl r2
   136b4:	18170800 	ldmdane	r7, {fp}
   136b8:	05000008 	streq	r0, [r0, #-8]
   136bc:	a717028a 	ldrge	r0, [r7, -sl, lsl #5]
   136c0:	24000001 	strcs	r0, [r0], #-1
   136c4:	0005d517 	andeq	sp, r5, r7, lsl r5
   136c8:	028b0500 	addeq	r0, fp, #0, 10
   136cc:	0000250f 	andeq	r2, r0, pc, lsl #10
   136d0:	2d174800 	ldccs	8, cr4, [r7, #-0]
   136d4:	0500000a 	streq	r0, [r0, #-10]
   136d8:	782c028c 	stmdavc	ip!, {r2, r3, r7, r9}
   136dc:	50000000 	andpl	r0, r0, r0
   136e0:	00008517 	andeq	r8, r0, r7, lsl r5
   136e4:	028d0500 	addeq	r0, sp, #0, 10
   136e8:	0006b41a 	andeq	fp, r6, sl, lsl r4
   136ec:	ea175800 	b	5e96f4 <__ccfg+0x5c974c>
   136f0:	05000004 	streq	r0, [r0, #-4]
   136f4:	f916028e 			; <UNDEFINED> instruction: 0xf916028e
   136f8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   136fc:	00096217 	andeq	r6, r9, r7, lsl r2
   13700:	028f0500 	addeq	r0, pc, #0, 10
   13704:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   13708:	6f177000 	svcvs	0x00177000
   1370c:	05000000 	streq	r0, [r0, #-0]
   13710:	f9160290 			; <UNDEFINED> instruction: 0xf9160290
   13714:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   13718:	00084917 	andeq	r4, r8, r7, lsl r9
   1371c:	02910500 	addseq	r0, r1, #0, 10
   13720:	00082210 	andeq	r2, r8, r0, lsl r2
   13724:	82178000 	andshi	r8, r7, #0
   13728:	05000003 	streq	r0, [r0, #-3]
   1372c:	32100292 	andscc	r0, r0, #536870921	; 0x20000009
   13730:	88000008 	stmdahi	r0, {r3}
   13734:	00090d17 	andeq	r0, r9, r7, lsl sp
   13738:	02930500 	addseq	r0, r3, #0, 10
   1373c:	0000250f 	andeq	r2, r0, pc, lsl #10
   13740:	2917a000 	ldmdbcs	r7, {sp, pc}
   13744:	05000002 	streq	r0, [r0, #-2]
   13748:	f9160294 			; <UNDEFINED> instruction: 0xf9160294
   1374c:	a4000000 	strge	r0, [r0], #-0
   13750:	00051f17 	andeq	r1, r5, r7, lsl pc
   13754:	02950500 	addseq	r0, r5, #0, 10
   13758:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   1375c:	6717ac00 	ldrvs	sl, [r7, -r0, lsl #24]
   13760:	05000004 	streq	r0, [r0, #-4]
   13764:	f9160296 			; <UNDEFINED> instruction: 0xf9160296
   13768:	b4000000 	strlt	r0, [r0], #-0
   1376c:	00064f17 	andeq	r4, r6, r7, lsl pc
   13770:	02970500 	addseq	r0, r7, #0, 10
   13774:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   13778:	d917bc00 	ldmdble	r7, {sl, fp, ip, sp, pc}
   1377c:	05000004 	streq	r0, [r0, #-4]
   13780:	f9160298 			; <UNDEFINED> instruction: 0xf9160298
   13784:	c4000000 	strgt	r0, [r0], #-0
   13788:	0006f217 	andeq	pc, r6, r7, lsl r2	; <UNPREDICTABLE>
   1378c:	02990500 	addseq	r0, r9, #0, 10
   13790:	00002508 	andeq	r2, r0, r8, lsl #10
   13794:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   13798:	000005c8 	andeq	r0, r0, r8, asr #11
   1379c:	00000822 	andeq	r0, r0, r2, lsr #16
   137a0:	00002c09 	andeq	r2, r0, r9, lsl #24
   137a4:	08001900 	stmdaeq	r0, {r8, fp, ip}
   137a8:	000005c8 	andeq	r0, r0, r8, asr #11
   137ac:	00000832 	andeq	r0, r0, r2, lsr r8
   137b0:	00002c09 	andeq	r2, r0, r9, lsl #24
   137b4:	08000700 	stmdaeq	r0, {r8, r9, sl}
   137b8:	000005c8 	andeq	r0, r0, r8, asr #11
   137bc:	00000842 	andeq	r0, r0, r2, asr #16
   137c0:	00002c09 	andeq	r2, r0, r9, lsl #24
   137c4:	1a001700 	bne	193cc <__exidx_end+0x144a0>
   137c8:	029e05f0 	addseq	r0, lr, #240, 10	; 0x3c000000
   137cc:	00086907 	andeq	r6, r8, r7, lsl #18
   137d0:	035d1700 	cmpeq	sp, #0, 14
   137d4:	a1050000 	mrsge	r0, (UNDEF: 5)
   137d8:	08691b02 	stmdaeq	r9!, {r1, r8, r9, fp, ip}^
   137dc:	17000000 	strne	r0, [r0, -r0]
   137e0:	00000a51 	andeq	r0, r0, r1, asr sl
   137e4:	1802a205 	stmdane	r2, {r0, r2, r9, sp, pc}
   137e8:	00000879 	andeq	r0, r0, r9, ror r8
   137ec:	07080078 	smlsdxeq	r8, r8, r0, r0
   137f0:	79000003 	stmdbvc	r0, {r0, r1}
   137f4:	09000008 	stmdbeq	r0, {r3}
   137f8:	0000002c 	andeq	r0, r0, ip, lsr #32
   137fc:	2c08001d 	stccs	0, cr0, [r8], {29}
   13800:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
   13804:	09000008 	stmdbeq	r0, {r3}
   13808:	0000002c 	andeq	r0, r0, ip, lsr #32
   1380c:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   13810:	03028305 	movweq	r8, #8965	; 0x2305
   13814:	000008ae 	andeq	r0, r0, lr, lsr #17
   13818:	00435e1c 	subeq	r5, r3, ip, lsl lr
   1381c:	029a0500 	addseq	r0, sl, #0, 10
   13820:	0006fd0b 	andeq	pc, r6, fp, lsl #26
   13824:	08271c00 	stmdaeq	r7!, {sl, fp, ip}
   13828:	a3050000 	movwge	r0, #20480	; 0x5000
   1382c:	08420b02 	stmdaeq	r2, {r1, r8, r9, fp}^
   13830:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13834:	000005c8 	andeq	r0, r0, r8, asr #11
   13838:	000008be 			; <UNDEFINED> instruction: 0x000008be
   1383c:	00002c09 	andeq	r2, r0, r9, lsl #24
   13840:	1d001800 	stcne	8, cr1, [r0, #-0]
   13844:	00000a38 	andeq	r0, r0, r8, lsr sl
   13848:	08be040f 	ldmeq	lr!, {r0, r1, r2, r3, sl}
   1384c:	d41e0000 	ldrle	r0, [lr], #-0
   13850:	14000008 	strne	r0, [r0], #-8
   13854:	0000046e 	andeq	r0, r0, lr, ror #8
   13858:	c9040f00 	stmdbgt	r4, {r8, r9, sl, fp}
   1385c:	0f000008 	svceq	0x00000008
   13860:	00019104 	andeq	r9, r1, r4, lsl #2
   13864:	08eb1e00 	stmiaeq	fp!, {r9, sl, fp, ip}^
   13868:	25140000 	ldrcs	r0, [r4, #-0]
   1386c:	00000000 	andeq	r0, r0, r0
   13870:	08f1040f 	ldmeq	r1!, {r0, r1, r2, r3, sl}^
   13874:	040f0000 	streq	r0, [pc], #-0	; 1387c <__exidx_end+0xe950>
   13878:	000008e0 	andeq	r0, r0, r0, ror #17
   1387c:	00066208 	andeq	r6, r6, r8, lsl #4
   13880:	00090700 	andeq	r0, r9, r0, lsl #14
   13884:	002c0900 	eoreq	r0, ip, r0, lsl #18
   13888:	00020000 	andeq	r0, r2, r0
   1388c:	0007f41f 	andeq	pc, r7, pc, lsl r4	; <UNPREDICTABLE>
   13890:	03330500 	teqeq	r3, #0, 10
   13894:	00046e17 	andeq	r6, r4, r7, lsl lr
   13898:	07ed1f00 	strbeq	r1, [sp, r0, lsl #30]!
   1389c:	34050000 	strcc	r0, [r5], #-0
   138a0:	04741d03 	ldrbteq	r1, [r4], #-3331	; 0xfffff2fd
   138a4:	cb050000 	blgt	1538ac <__ccfg+0x133904>
   138a8:	07000041 	streq	r0, [r0, -r1, asr #32]
   138ac:	01071725 	tsteq	r7, r5, lsr #14
   138b0:	9a050000 	bls	1538b8 <__ccfg+0x133910>
   138b4:	07000005 	streq	r0, [r0, -r5]
   138b8:	007f122a 	rsbseq	r1, pc, sl, lsr #4
   138bc:	040d0000 	streq	r0, [sp], #-0
   138c0:	10000043 	andne	r0, r0, r3, asr #32
   138c4:	61083607 	tstvs	r8, r7, lsl #12
   138c8:	0b000009 	bleq	138f4 <__exidx_end+0xe9c8>
   138cc:	00004204 	andeq	r4, r0, r4, lsl #4
   138d0:	2d0a3707 	stccs	7, cr3, [sl, #-28]	; 0xffffffe4
   138d4:	00000009 	andeq	r0, r0, r9
   138d8:	0042670b 	subeq	r6, r2, fp, lsl #14
   138dc:	0e380700 	cdpeq	7, 3, cr0, cr8, cr0, {0}
   138e0:	00000921 	andeq	r0, r0, r1, lsr #18
   138e4:	5d200008 	stcpl	0, cr0, [r0, #-32]!	; 0xffffffe0
   138e8:	08000042 	stmdaeq	r0, {r1, r6}
   138ec:	006a169a 	mlseq	sl, sl, r6, r1
   138f0:	a7200000 	strge	r0, [r0, -r0]!
   138f4:	08000041 	stmdaeq	r0, {r0, r6}
   138f8:	0025159b 	mlaeq	r5, fp, r5, r1
   138fc:	c2080000 	andgt	r0, r8, #0
   13900:	89000005 	stmdbhi	r0, {r0, r2}
   13904:	09000009 	stmdbeq	r0, {r0, r3}
   13908:	0000002c 	andeq	r0, r0, ip, lsr #32
   1390c:	b1200001 			; <UNDEFINED> instruction: 0xb1200001
   13910:	08000041 	stmdaeq	r0, {r0, r6}
   13914:	0979179e 	ldmdbeq	r9!, {r1, r2, r3, r4, r7, r8, r9, sl, ip}^
   13918:	f5200000 			; <UNDEFINED> instruction: 0xf5200000
   1391c:	01000006 	tsteq	r0, r6
   13920:	00250c1d 	eoreq	r0, r5, sp, lsl ip
   13924:	b9210000 	stmdblt	r1!, {}	; <UNPREDICTABLE>
   13928:	09000041 	stmdbeq	r0, {r0, r6}
   1392c:	00250ca1 	eoreq	r0, r5, r1, lsr #25
   13930:	411c0000 	tstmi	ip, r0
   13934:	002c0000 	eoreq	r0, ip, r0
   13938:	9c010000 	stcls	0, cr0, [r1], {-0}
   1393c:	00000a24 	andeq	r0, r0, r4, lsr #20
   13940:	72747022 	rsbsvc	r7, r4, #34	; 0x22
   13944:	21370100 	teqcs	r7, r0, lsl #2
   13948:	0000046e 	andeq	r0, r0, lr, ror #8
   1394c:	0000576e 	andeq	r5, r0, lr, ror #14
   13950:	00005766 	andeq	r5, r0, r6, ror #14
   13954:	00430323 	subeq	r0, r3, r3, lsr #6
   13958:	16380100 	ldrtne	r0, [r8], -r0, lsl #2
   1395c:	00000a24 	andeq	r0, r0, r4, lsr #20
   13960:	000057ab 	andeq	r5, r0, fp, lsr #15
   13964:	000057a5 	andeq	r5, r0, r5, lsr #15
   13968:	0042a623 	subeq	sl, r2, r3, lsr #12
   1396c:	0c390100 	ldfeqs	f0, [r9], #-0
   13970:	00000105 	andeq	r0, r0, r5, lsl #2
   13974:	000057db 	ldrdeq	r5, [r0], -fp
   13978:	000057d7 	ldrdeq	r5, [r0], -r7
   1397c:	74657224 	strbtvc	r7, [r5], #-548	; 0xfffffddc
   13980:	073b0100 	ldreq	r0, [fp, -r0, lsl #2]!
   13984:	00000025 	andeq	r0, r0, r5, lsr #32
   13988:	000057fe 	strdeq	r5, [r0], -lr
   1398c:	000057fc 	strdeq	r5, [r0], -ip
   13990:	00412e25 	subeq	r2, r1, r5, lsr #28
   13994:	000a2a00 	andeq	r2, sl, r0, lsl #20
   13998:	50012600 	andpl	r2, r1, r0, lsl #12
   1399c:	5101f303 	tstpl	r1, r3, lsl #6	; <UNPREDICTABLE>
   139a0:	03510126 	cmpeq	r1, #-2147483639	; 0x80000009
   139a4:	005201f3 	ldrsheq	r0, [r2], #-19	; 0xffffffed
   139a8:	39040f00 	stmdbcc	r4, {r8, r9, sl, fp}
   139ac:	27000009 	strcs	r0, [r0, -r9]
   139b0:	0000430c 	andeq	r4, r0, ip, lsl #6
   139b4:	0000430c 	andeq	r4, r0, ip, lsl #6
   139b8:	0501b80a 	streq	fp, [r1, #-2058]	; 0xfffff7f6
   139bc:	00092600 	andeq	r2, r9, r0, lsl #12
   139c0:	0c000400 	cfstrseq	mvf0, [r0], {-0}
   139c4:	04000048 	streq	r0, [r0], #-72	; 0xffffffb8
   139c8:	00400601 	subeq	r0, r0, r1, lsl #12
   139cc:	43260c00 			; <UNDEFINED> instruction: 0x43260c00
   139d0:	42b00000 	adcsmi	r0, r0, #0
   139d4:	8bb90000 	blhi	fee539dc <_estack+0xdee4e9dc>
   139d8:	04020000 	streq	r0, [r2], #-0
   139dc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   139e0:	07040300 	streq	r0, [r4, -r0, lsl #6]
   139e4:	00000398 	muleq	r0, r8, r3
   139e8:	e4050803 	str	r0, [r5], #-2051	; 0xfffff7fd
   139ec:	03000005 	movweq	r0, #5
   139f0:	3ed70408 	cdpcc	4, 13, cr0, cr7, cr8, {0}
   139f4:	92040000 	andls	r0, r4, #0
   139f8:	01000008 	tsteq	r0, r8
   139fc:	24170165 	ldrcs	r0, [r7], #-357	; 0xfffffe9b
   13a00:	03000000 	movweq	r0, #0
   13a04:	08da0601 	ldmeq	sl, {r0, r9, sl}^
   13a08:	01030000 	mrseq	r0, (UNDEF: 3)
   13a0c:	0008d808 	andeq	sp, r8, r8, lsl #16
   13a10:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   13a14:	0000079f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
   13a18:	a6070203 	strge	r0, [r7], -r3, lsl #4
   13a1c:	03000009 	movweq	r0, #9
   13a20:	05e90504 	strbeq	r0, [r9, #1284]!	; 0x504
   13a24:	04030000 	streq	r0, [r3], #-0
   13a28:	00039307 	andeq	r9, r3, r7, lsl #6
   13a2c:	07080300 	streq	r0, [r8, -r0, lsl #6]
   13a30:	0000038e 	andeq	r0, r0, lr, lsl #7
   13a34:	0009e205 	andeq	lr, r9, r5, lsl #4
   13a38:	0e2e0200 	cdpeq	2, 2, cr0, cr14, cr0, {0}
   13a3c:	00000062 	andeq	r0, r0, r2, rrx
   13a40:	00026705 	andeq	r6, r2, r5, lsl #14
   13a44:	0e740200 	cdpeq	2, 7, cr0, cr4, cr0, {0}
   13a48:	00000062 	andeq	r0, r0, r2, rrx
   13a4c:	a5020406 	strge	r0, [r2, #-1030]	; 0xfffffbfa
   13a50:	0000b103 	andeq	fp, r0, r3, lsl #2
   13a54:	05870700 	streq	r0, [r7, #1792]	; 0x700
   13a58:	a7020000 	strge	r0, [r2, -r0]
   13a5c:	0000390c 	andeq	r3, r0, ip, lsl #18
   13a60:	07e60700 	strbeq	r0, [r6, r0, lsl #14]!
   13a64:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
   13a68:	0000b113 	andeq	fp, r0, r3, lsl r1
   13a6c:	4d080000 	stcmi	0, cr0, [r8, #-0]
   13a70:	c1000000 	mrsgt	r0, (UNDEF: 0)
   13a74:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   13a78:	00000024 	andeq	r0, r0, r4, lsr #32
   13a7c:	080a0003 	stmdaeq	sl, {r0, r1}
   13a80:	e509a202 	str	sl, [r9, #-514]	; 0xfffffdfe
   13a84:	0b000000 	bleq	13a8c <__exidx_end+0xeb60>
   13a88:	00000322 	andeq	r0, r0, r2, lsr #6
   13a8c:	1d07a402 	cfstrsne	mvf10, [r7, #-8]
   13a90:	00000000 	andeq	r0, r0, r0
   13a94:	0004aa0b 	andeq	sl, r4, fp, lsl #20
   13a98:	05a90200 	streq	r0, [r9, #512]!	; 0x200
   13a9c:	0000008f 	andeq	r0, r0, pc, lsl #1
   13aa0:	a5050004 	strge	r0, [r5, #-4]
   13aa4:	02000006 	andeq	r0, r0, #6
   13aa8:	00c103aa 	sbceq	r0, r1, sl, lsr #7
   13aac:	040c0000 	streq	r0, [ip], #-0
   13ab0:	00062905 	andeq	r2, r6, r5, lsl #18
   13ab4:	19160300 	ldmdbne	r6, {r8, r9}
   13ab8:	00000069 	andeq	r0, r0, r9, rrx
   13abc:	0001fe05 	andeq	pc, r1, r5, lsl #28
   13ac0:	0d0c0400 	cfstrseq	mvf0, [ip, #-0]
   13ac4:	0000001d 	andeq	r0, r0, sp, lsl r0
   13ac8:	00055505 	andeq	r5, r5, r5, lsl #10
   13acc:	1b230300 	blne	8d46d4 <__ccfg+0x8b472c>
   13ad0:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13ad4:	0002a70d 	andeq	sl, r2, sp, lsl #14
   13ad8:	34031800 	strcc	r1, [r3], #-2048	; 0xfffff800
   13adc:	00017108 	andeq	r7, r1, r8, lsl #2
   13ae0:	0a320b00 	beq	c966e8 <__ccfg+0xc76740>
   13ae4:	36030000 	strcc	r0, [r3], -r0
   13ae8:	00017113 	andeq	r7, r1, r3, lsl r1
   13aec:	5f0e0000 	svcpl	0x000e0000
   13af0:	3703006b 	strcc	r0, [r3, -fp, rrx]
   13af4:	00001d07 	andeq	r1, r0, r7, lsl #26
   13af8:	410b0400 	tstmi	fp, r0, lsl #8
   13afc:	03000008 	movweq	r0, #8
   13b00:	001d0b37 	andseq	r0, sp, r7, lsr fp
   13b04:	0b080000 	bleq	213b0c <__ccfg+0x1f3b64>
   13b08:	00003ea2 	andeq	r3, r0, r2, lsr #29
   13b0c:	1d143703 	ldcne	7, cr3, [r4, #-12]
   13b10:	0c000000 	stceq	0, cr0, [r0], {-0}
   13b14:	0003ba0b 	andeq	fp, r3, fp, lsl #20
   13b18:	1b370300 	blne	dd4720 <__ccfg+0xdb4778>
   13b1c:	0000001d 	andeq	r0, r0, sp, lsl r0
   13b20:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   13b24:	0b380300 	bleq	e1472c <__ccfg+0xdf4784>
   13b28:	00000177 	andeq	r0, r0, r7, ror r1
   13b2c:	040f0014 	streq	r0, [pc], #-20	; 13b34 <__exidx_end+0xec08>
   13b30:	00000117 	andeq	r0, r0, r7, lsl r1
   13b34:	0000f308 	andeq	pc, r0, r8, lsl #6
   13b38:	00018700 	andeq	r8, r1, r0, lsl #14
   13b3c:	00240900 	eoreq	r0, r4, r0, lsl #18
   13b40:	00000000 	andeq	r0, r0, r0
   13b44:	00085c0d 	andeq	r5, r8, sp, lsl #24
   13b48:	3c032400 	cfstrscc	mvf2, [r3], {-0}
   13b4c:	00020a08 	andeq	r0, r2, r8, lsl #20
   13b50:	044a0b00 	strbeq	r0, [sl], #-2816	; 0xfffff500
   13b54:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
   13b58:	00001d09 	andeq	r1, r0, r9, lsl #26
   13b5c:	540b0000 	strpl	r0, [fp], #-0
   13b60:	03000003 	movweq	r0, #3
   13b64:	001d093f 	andseq	r0, sp, pc, lsr r9
   13b68:	0b040000 	bleq	113b70 <__ccfg+0xf3bc8>
   13b6c:	000002fd 	strdeq	r0, [r0], -sp
   13b70:	1d094003 	stcne	0, cr4, [r9, #-12]
   13b74:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13b78:	00050b0b 	andeq	r0, r5, fp, lsl #22
   13b7c:	09410300 	stmdbeq	r1, {r8, r9}^
   13b80:	0000001d 	andeq	r0, r0, sp, lsl r0
   13b84:	07190b0c 	ldreq	r0, [r9, -ip, lsl #22]
   13b88:	42030000 	andmi	r0, r3, #0
   13b8c:	00001d09 	andeq	r1, r0, r9, lsl #26
   13b90:	000b1000 	andeq	r1, fp, r0
   13b94:	03000008 	movweq	r0, #8
   13b98:	001d0943 	andseq	r0, sp, r3, asr #18
   13b9c:	0b140000 	bleq	513ba4 <__ccfg+0x4f3bfc>
   13ba0:	000002c2 	andeq	r0, r0, r2, asr #5
   13ba4:	1d094403 	cfstrsne	mvf4, [r9, #-12]
   13ba8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13bac:	0004530b 	andeq	r5, r4, fp, lsl #6
   13bb0:	09450300 	stmdbeq	r5, {r8, r9}^
   13bb4:	0000001d 	andeq	r0, r0, sp, lsl r0
   13bb8:	06c30b1c 			; <UNDEFINED> instruction: 0x06c30b1c
   13bbc:	46030000 	strmi	r0, [r3], -r0
   13bc0:	00001d09 	andeq	r1, r0, r9, lsl #26
   13bc4:	10002000 	andne	r2, r0, r0
   13bc8:	00000061 	andeq	r0, r0, r1, rrx
   13bcc:	4f030108 	svcmi	0x00030108
   13bd0:	00024f08 	andeq	r4, r2, r8, lsl #30
   13bd4:	09700b00 	ldmdbeq	r0!, {r8, r9, fp}^
   13bd8:	50030000 	andpl	r0, r3, r0
   13bdc:	00024f0a 	andeq	r4, r2, sl, lsl #30
   13be0:	bc0b0000 	stclt	0, cr0, [fp], {-0}
   13be4:	03000008 	movweq	r0, #8
   13be8:	024f0951 	subeq	r0, pc, #1327104	; 0x144000
   13bec:	11800000 	orrne	r0, r0, r0
   13bf0:	000009d9 	ldrdeq	r0, [r0], -r9
   13bf4:	f30a5303 	vcgt.u8	d5, d10, d3
   13bf8:	00000000 	andeq	r0, r0, r0
   13bfc:	0a1d1101 	beq	758008 <__ccfg+0x738060>
   13c00:	56030000 	strpl	r0, [r3], -r0
   13c04:	0000f30a 	andeq	pc, r0, sl, lsl #6
   13c08:	00010400 	andeq	r0, r1, r0, lsl #8
   13c0c:	0000f108 	andeq	pc, r0, r8, lsl #2
   13c10:	00025f00 	andeq	r5, r2, r0, lsl #30
   13c14:	00240900 	eoreq	r0, r4, r0, lsl #18
   13c18:	001f0000 	andseq	r0, pc, r0
   13c1c:	00078610 	andeq	r8, r7, r0, lsl r6
   13c20:	03019000 	movweq	r9, #4096	; 0x1000
   13c24:	02a20862 	adceq	r0, r2, #6422528	; 0x620000
   13c28:	320b0000 	andcc	r0, fp, #0
   13c2c:	0300000a 	movweq	r0, #10
   13c30:	02a21263 	adceq	r1, r2, #805306374	; 0x30000006
   13c34:	0b000000 	bleq	13c3c <__exidx_end+0xed10>
   13c38:	00000462 	andeq	r0, r0, r2, ror #8
   13c3c:	1d066403 	cfstrsne	mvf6, [r6, #-12]
   13c40:	04000000 	streq	r0, [r0], #-0
   13c44:	00026f0b 	andeq	r6, r2, fp, lsl #30
   13c48:	09660300 	stmdbeq	r6!, {r8, r9}^
   13c4c:	000002a8 	andeq	r0, r0, r8, lsr #5
   13c50:	00610b08 	rsbeq	r0, r1, r8, lsl #22
   13c54:	67030000 	strvs	r0, [r3, -r0]
   13c58:	00020a1e 	andeq	r0, r2, lr, lsl sl
   13c5c:	0f008800 	svceq	0x00008800
   13c60:	00025f04 	andeq	r5, r2, r4, lsl #30
   13c64:	02b80800 	adcseq	r0, r8, #0, 16
   13c68:	02b80000 	adcseq	r0, r8, #0
   13c6c:	24090000 	strcs	r0, [r9], #-0
   13c70:	1f000000 	svcne	0x00000000
   13c74:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   13c78:	12000002 	andne	r0, r0, #2
   13c7c:	00093a0d 	andeq	r3, r9, sp, lsl #20
   13c80:	7a030800 	bvc	d5c88 <__ccfg+0xb5ce0>
   13c84:	0002e708 	andeq	lr, r2, r8, lsl #14
   13c88:	06000b00 	streq	r0, [r0], -r0, lsl #22
   13c8c:	7b030000 	blvc	d3c94 <__ccfg+0xb3cec>
   13c90:	0002e711 	andeq	lr, r2, r1, lsl r7
   13c94:	c10b0000 	mrsgt	r0, (UNDEF: 11)
   13c98:	03000018 	movweq	r0, #24
   13c9c:	001d067c 	andseq	r0, sp, ip, ror r6
   13ca0:	00040000 	andeq	r0, r4, r0
   13ca4:	004d040f 	subeq	r0, sp, pc, lsl #8
   13ca8:	b20d0000 	andlt	r0, sp, #0
   13cac:	68000003 	stmdavs	r0, {r0, r1}
   13cb0:	3008ba03 	andcc	fp, r8, r3, lsl #20
   13cb4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   13cb8:	0300705f 	movweq	r7, #95	; 0x5f
   13cbc:	02e712bb 	rsceq	r1, r7, #-1342177269	; 0xb000000b
   13cc0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13cc4:	0300725f 	movweq	r7, #607	; 0x25f
   13cc8:	001d07bc 			; <UNDEFINED> instruction: 0x001d07bc
   13ccc:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   13cd0:	0300775f 	movweq	r7, #1887	; 0x75f
   13cd4:	001d07bd 			; <UNDEFINED> instruction: 0x001d07bd
   13cd8:	0b080000 	bleq	213ce0 <__ccfg+0x1f3d38>
   13cdc:	000001e9 	andeq	r0, r0, r9, ror #3
   13ce0:	5409be03 	strpl	fp, [r9], #-3587	; 0xfffff1fd
   13ce4:	0c000000 	stceq	0, cr0, [r0], {-0}
   13ce8:	00065e0b 	andeq	r5, r6, fp, lsl #28
   13cec:	09bf0300 	ldmibeq	pc!, {r8, r9}	; <UNPREDICTABLE>
   13cf0:	00000054 	andeq	r0, r0, r4, asr r0
   13cf4:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   13cf8:	c0030066 	andgt	r0, r3, r6, rrx
   13cfc:	0002bf11 	andeq	fp, r2, r1, lsl pc
   13d00:	e00b1000 	and	r1, fp, r0
   13d04:	03000001 	movweq	r0, #1
   13d08:	001d07c1 	andseq	r0, sp, r1, asr #15
   13d0c:	0b180000 	bleq	613d14 <__ccfg+0x5f3d6c>
   13d10:	00000274 	andeq	r0, r0, r4, ror r2
   13d14:	f10ac803 			; <UNDEFINED> instruction: 0xf10ac803
   13d18:	1c000000 	stcne	0, cr0, [r0], {-0}
   13d1c:	0018510b 	andseq	r5, r8, fp, lsl #2
   13d20:	1dca0300 	stclne	3, cr0, [sl]
   13d24:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
   13d28:	18180b20 	ldmdane	r8, {r5, r8, r9, fp}
   13d2c:	cc030000 	stcgt	0, cr0, [r3], {-0}
   13d30:	0005de1d 	andeq	sp, r5, sp, lsl lr
   13d34:	430b2400 	movwmi	r2, #46080	; 0xb400
   13d38:	0300000a 	movweq	r0, #10
   13d3c:	06020dcf 	streq	r0, [r2], -pc, asr #27
   13d40:	0b280000 	bleq	a13d48 <__ccfg+0x9f3da0>
   13d44:	00001806 	andeq	r1, r0, r6, lsl #16
   13d48:	1c09d003 	stcne	0, cr13, [r9], {3}
   13d4c:	2c000006 	stccs	0, cr0, [r0], {6}
   13d50:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   13d54:	11d30300 	bicsne	r0, r3, r0, lsl #6
   13d58:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
   13d5c:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 12f34 <__exidx_end+0xe008>
   13d60:	d4030070 	strle	r0, [r3], #-112	; 0xffffff90
   13d64:	0002e712 	andeq	lr, r2, r2, lsl r7
   13d68:	5f0e3800 	svcpl	0x000e3800
   13d6c:	03007275 	movweq	r7, #629	; 0x275
   13d70:	001d07d5 			; <UNDEFINED> instruction: 0x001d07d5
   13d74:	0b3c0000 	bleq	f13d7c <__ccfg+0xef3dd4>
   13d78:	00000a5a 	andeq	r0, r0, sl, asr sl
   13d7c:	2211d803 	andscs	sp, r1, #196608	; 0x30000
   13d80:	40000006 	andmi	r0, r0, r6
   13d84:	0009e90b 	andeq	lr, r9, fp, lsl #18
   13d88:	11d90300 	bicsne	r0, r9, r0, lsl #6
   13d8c:	00000632 	andeq	r0, r0, r2, lsr r6
   13d90:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   13d94:	dc030062 	stcle	0, cr0, [r3], {98}	; 0x62
   13d98:	0002bf11 	andeq	fp, r2, r1, lsl pc
   13d9c:	530b4400 	movwpl	r4, #46080	; 0xb400
   13da0:	03000008 	movweq	r0, #8
   13da4:	001d07df 			; <UNDEFINED> instruction: 0x001d07df
   13da8:	0b4c0000 	bleq	1313db0 <__ccfg+0x12f3e08>
   13dac:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   13db0:	770ae003 	strvc	lr, [sl, -r3]
   13db4:	50000000 	andpl	r0, r0, r0
   13db8:	0043200b 	subeq	r2, r3, fp
   13dbc:	12e30300 	rscne	r0, r3, #0, 6
   13dc0:	0000044e 	andeq	r0, r0, lr, asr #8
   13dc4:	086b0b54 	stmdaeq	fp!, {r2, r4, r6, r8, r9, fp}^
   13dc8:	e7030000 	str	r0, [r3, -r0]
   13dcc:	00010b0c 	andeq	r0, r1, ip, lsl #22
   13dd0:	8e0b5800 	cdphi	8, 0, cr5, cr11, cr0, {0}
   13dd4:	03000007 	movweq	r0, #7
   13dd8:	00e50ee9 	rsceq	r0, r5, r9, ror #29
   13ddc:	0b5c0000 	bleq	1713de4 <__ccfg+0x16f3e3c>
   13de0:	00000a15 	andeq	r0, r0, r5, lsl sl
   13de4:	1d09ea03 	vstrne	s28, [r9, #-12]
   13de8:	64000000 	strvs	r0, [r0], #-0
   13dec:	001d1300 	andseq	r1, sp, r0, lsl #6
   13df0:	044e0000 	strbeq	r0, [lr], #-0
   13df4:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13df8:	14000004 	strne	r0, [r0], #-4
   13dfc:	000000f1 	strdeq	r0, [r0], -r1
   13e00:	0005a214 	andeq	sl, r5, r4, lsl r2
   13e04:	001d1400 	andseq	r1, sp, r0, lsl #8
   13e08:	0f000000 	svceq	0x00000000
   13e0c:	00045904 	andeq	r5, r4, r4, lsl #18
   13e10:	044e1500 	strbeq	r1, [lr], #-1280	; 0xfffffb00
   13e14:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
   13e18:	28000043 	stmdacs	r0, {r0, r1, r6}
   13e1c:	02650304 	rsbeq	r0, r5, #4, 6	; 0x10000000
   13e20:	0005a208 	andeq	sl, r5, r8, lsl #4
   13e24:	06f41700 	ldrbteq	r1, [r4], r0, lsl #14
   13e28:	67030000 	strvs	r0, [r3, -r0]
   13e2c:	001d0702 	andseq	r0, sp, r2, lsl #14
   13e30:	17000000 	strne	r0, [r0, -r0]
   13e34:	000005ce 	andeq	r0, r0, lr, asr #11
   13e38:	0b026c03 	bleq	aee4c <__ccfg+0x8eea4>
   13e3c:	0000068e 	andeq	r0, r0, lr, lsl #13
   13e40:	02551704 	subseq	r1, r5, #4, 14	; 0x100000
   13e44:	6c030000 	stcvs	0, cr0, [r3], {-0}
   13e48:	068e1402 	streq	r1, [lr], r2, lsl #8
   13e4c:	17080000 	strne	r0, [r8, -r0]
   13e50:	00000a49 	andeq	r0, r0, r9, asr #20
   13e54:	1e026c03 	cdpne	12, 0, cr6, cr2, cr3, {0}
   13e58:	0000068e 	andeq	r0, r0, lr, lsl #13
   13e5c:	045d170c 	ldrbeq	r1, [sp], #-1804	; 0xfffff8f4
   13e60:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
   13e64:	001d0802 	andseq	r0, sp, r2, lsl #16
   13e68:	17100000 	ldrne	r0, [r0, -r0]
   13e6c:	0000040f 	andeq	r0, r0, pc, lsl #8
   13e70:	08026f03 	stmdaeq	r2, {r0, r1, r8, r9, sl, fp, sp, lr}
   13e74:	0000088e 	andeq	r0, r0, lr, lsl #17
   13e78:	09fc1714 	ldmibeq	ip!, {r2, r4, r8, r9, sl, ip}^
   13e7c:	72030000 	andvc	r0, r3, #0
   13e80:	001d0702 	andseq	r0, sp, r2, lsl #14
   13e84:	17300000 	ldrne	r0, [r0, -r0]!
   13e88:	00003d4e 	andeq	r3, r0, lr, asr #26
   13e8c:	16027303 	strne	r7, [r2], -r3, lsl #6
   13e90:	000008a3 	andeq	r0, r0, r3, lsr #17
   13e94:	05a11734 	streq	r1, [r1, #1844]!	; 0x734
   13e98:	75030000 	strvc	r0, [r3, #-0]
   13e9c:	001d0702 	andseq	r0, sp, r2, lsl #14
   13ea0:	17380000 	ldrne	r0, [r8, -r0]!
   13ea4:	0000069b 	muleq	r0, fp, r6
   13ea8:	0a027703 	beq	b1abc <__ccfg+0x91b14>
   13eac:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
   13eb0:	02cc173c 	sbceq	r1, ip, #60, 14	; 0xf00000
   13eb4:	7a030000 	bvc	d3ebc <__ccfg+0xb3f14>
   13eb8:	01711302 	cmneq	r1, r2, lsl #6
   13ebc:	17400000 	strbne	r0, [r0, -r0]
   13ec0:	00000378 	andeq	r0, r0, r8, ror r3
   13ec4:	07027b03 	streq	r7, [r2, -r3, lsl #22]
   13ec8:	0000001d 	andeq	r0, r0, sp, lsl r0
   13ecc:	04b21744 	ldrteq	r1, [r2], #1860	; 0x744
   13ed0:	7c030000 	stcvc	0, cr0, [r3], {-0}
   13ed4:	01711302 	cmneq	r1, r2, lsl #6
   13ed8:	17480000 	strbne	r0, [r8, -r0]
   13edc:	00000606 	andeq	r0, r0, r6, lsl #12
   13ee0:	14027d03 	strne	r7, [r2], #-3331	; 0xfffff2fd
   13ee4:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
   13ee8:	0839174c 	ldmdaeq	r9!, {r2, r3, r6, r8, r9, sl, ip}
   13eec:	80030000 	andhi	r0, r3, r0
   13ef0:	001d0702 	andseq	r0, sp, r2, lsl #14
   13ef4:	17500000 	ldrbne	r0, [r0, -r0]
   13ef8:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13efc:	09028103 	stmdbeq	r2, {r0, r1, r8, pc}
   13f00:	000005a2 	andeq	r0, r0, r2, lsr #11
   13f04:	08ea1754 	stmiaeq	sl!, {r2, r4, r6, r8, r9, sl, ip}^
   13f08:	a4030000 	strge	r0, [r3], #-0
   13f0c:	08690702 	stmdaeq	r9!, {r1, r8, r9, sl}^
   13f10:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   13f14:	00000786 	andeq	r0, r0, r6, lsl #15
   13f18:	1302a803 	movwne	sl, #10243	; 0x2803
   13f1c:	000002a2 	andeq	r0, r0, r2, lsr #5
   13f20:	2e180148 	mufcsem	f0, f0, #0.0
   13f24:	03000005 	movweq	r0, #5
   13f28:	5f1202a9 	svcpl	0x001202a9
   13f2c:	4c000002 	stcmi	0, cr0, [r0], {2}
   13f30:	05151801 	ldreq	r1, [r5, #-2049]	; 0xfffff7ff
   13f34:	ad030000 	stcge	0, cr0, [r3, #-0]
   13f38:	08cb0c02 	stmiaeq	fp, {r1, sl, fp}^
   13f3c:	02dc0000 	sbcseq	r0, ip, #0
   13f40:	00094d18 	andeq	r4, r9, r8, lsl sp
   13f44:	02b20300 	adcseq	r0, r2, #0, 6
   13f48:	00064f10 	andeq	r4, r6, r0, lsl pc
   13f4c:	1802e000 	stmdane	r2, {sp, lr, pc}
   13f50:	000007c7 	andeq	r0, r0, r7, asr #15
   13f54:	0a02b403 	beq	c0f68 <__ccfg+0xa0fc0>
   13f58:	000008d7 	ldrdeq	r0, [r0], -r7
   13f5c:	0f0002ec 	svceq	0x000002ec
   13f60:	0005a804 	andeq	sl, r5, r4, lsl #16
   13f64:	08010300 	stmdaeq	r1, {r8, r9}
   13f68:	000008e1 	andeq	r0, r0, r1, ror #17
   13f6c:	0005a815 	andeq	sl, r5, r5, lsl r8
   13f70:	30040f00 	andcc	r0, r4, r0, lsl #30
   13f74:	13000004 	movwne	r0, #4
   13f78:	0000001d 	andeq	r0, r0, sp, lsl r0
   13f7c:	000005d8 	ldrdeq	r0, [r0], -r8
   13f80:	00044e14 	andeq	r4, r4, r4, lsl lr
   13f84:	00f11400 	rscseq	r1, r1, r0, lsl #8
   13f88:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
   13f8c:	14000005 	strne	r0, [r0], #-5
   13f90:	0000001d 	andeq	r0, r0, sp, lsl r0
   13f94:	af040f00 	svcge	0x00040f00
   13f98:	0f000005 	svceq	0x00000005
   13f9c:	0005ba04 	andeq	fp, r5, r4, lsl #20
   13fa0:	00831300 	addeq	r1, r3, r0, lsl #6
   13fa4:	06020000 	streq	r0, [r2], -r0
   13fa8:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13fac:	14000004 	strne	r0, [r0], #-4
   13fb0:	000000f1 	strdeq	r0, [r0], -r1
   13fb4:	00008314 	andeq	r8, r0, r4, lsl r3
   13fb8:	001d1400 	andseq	r1, sp, r0, lsl #8
   13fbc:	0f000000 	svceq	0x00000000
   13fc0:	0005e404 	andeq	lr, r5, r4, lsl #8
   13fc4:	001d1300 	andseq	r1, sp, r0, lsl #6
   13fc8:	061c0000 	ldreq	r0, [ip], -r0
   13fcc:	4e140000 	cdpmi	0, 1, cr0, cr4, cr0, {0}
   13fd0:	14000004 	strne	r0, [r0], #-4
   13fd4:	000000f1 	strdeq	r0, [r0], -r1
   13fd8:	08040f00 	stmdaeq	r4, {r8, r9, sl, fp}
   13fdc:	08000006 	stmdaeq	r0, {r1, r2}
   13fe0:	0000004d 	andeq	r0, r0, sp, asr #32
   13fe4:	00000632 	andeq	r0, r0, r2, lsr r6
   13fe8:	00002409 	andeq	r2, r0, r9, lsl #8
   13fec:	08000200 	stmdaeq	r0, {r9}
   13ff0:	0000004d 	andeq	r0, r0, sp, asr #32
   13ff4:	00000642 	andeq	r0, r0, r2, asr #12
   13ff8:	00002409 	andeq	r2, r0, r9, lsl #8
   13ffc:	04000000 	streq	r0, [r0], #-0
   14000:	000003ed 	andeq	r0, r0, sp, ror #7
   14004:	1a012403 	bne	5d018 <__ccfg+0x3d070>
   14008:	000002ed 	andeq	r0, r0, sp, ror #5
   1400c:	00437419 	subeq	r7, r3, r9, lsl r4
   14010:	28030c00 	stmdacs	r3, {sl, fp}
   14014:	06880801 	streq	r0, [r8], r1, lsl #16
   14018:	32170000 	andscc	r0, r7, #0
   1401c:	0300000a 	movweq	r0, #10
   14020:	8811012a 	ldmdahi	r1, {r1, r3, r5, r8}
   14024:	00000006 	andeq	r0, r0, r6
   14028:	00088b17 	andeq	r8, r8, r7, lsl fp
   1402c:	012b0300 			; <UNDEFINED> instruction: 0x012b0300
   14030:	00001d07 	andeq	r1, r0, r7, lsl #26
   14034:	8d170400 	cfldrshi	mvf0, [r7, #-0]
   14038:	03000005 	movweq	r0, #5
   1403c:	8e0b012c 	adfhiep	f0, f3, #4.0
   14040:	08000006 	stmdaeq	r0, {r1, r2}
   14044:	4f040f00 	svcmi	0x00040f00
   14048:	0f000006 	svceq	0x00000006
   1404c:	00064204 	andeq	r4, r6, r4, lsl #4
   14050:	03641900 	cmneq	r4, #0, 18
   14054:	030e0000 	movweq	r0, #57344	; 0xe000
   14058:	cd080144 	stfgts	f0, [r8, #-272]	; 0xfffffef0
   1405c:	17000006 	strne	r0, [r0, -r6]
   14060:	0000117a 	andeq	r1, r0, sl, ror r1
   14064:	12014503 	andne	r4, r1, #12582912	; 0xc00000
   14068:	000006cd 	andeq	r0, r0, sp, asr #13
   1406c:	06181700 	ldreq	r1, [r8], -r0, lsl #14
   14070:	46030000 	strmi	r0, [r3], -r0
   14074:	06cd1201 	strbeq	r1, [sp], r1, lsl #4
   14078:	17060000 	strne	r0, [r6, -r0]
   1407c:	0000101f 	andeq	r1, r0, pc, lsl r0
   14080:	12014703 	andne	r4, r1, #786432	; 0xc0000
   14084:	0000005b 	andeq	r0, r0, fp, asr r0
   14088:	5b08000c 	blpl	2140c0 <__ccfg+0x1f4118>
   1408c:	dd000000 	stcle	0, cr0, [r0, #-0]
   14090:	09000006 	stmdbeq	r0, {r1, r2}
   14094:	00000024 	andeq	r0, r0, r4, lsr #32
   14098:	d01a0002 	andsle	r0, sl, r2
   1409c:	07028503 	streq	r8, [r2, -r3, lsl #10]
   140a0:	000007f2 	strdeq	r0, [r0], -r2
   140a4:	0009ef17 	andeq	lr, r9, r7, lsl pc
   140a8:	02870300 	addeq	r0, r7, #0, 6
   140ac:	00002418 	andeq	r2, r0, r8, lsl r4
   140b0:	55170000 	ldrpl	r0, [r7, #-0]
   140b4:	03000009 	movweq	r0, #9
   140b8:	a2120288 	andsge	r0, r2, #136, 4	; 0x80000008
   140bc:	04000005 	streq	r0, [r0], #-5
   140c0:	0003a517 	andeq	sl, r3, r7, lsl r5
   140c4:	02890300 	addeq	r0, r9, #0, 6
   140c8:	0007f210 	andeq	pc, r7, r0, lsl r2	; <UNPREDICTABLE>
   140cc:	18170800 	ldmdane	r7, {fp}
   140d0:	03000008 	movweq	r0, #8
   140d4:	8717028a 	ldrhi	r0, [r7, -sl, lsl #5]
   140d8:	24000001 	strcs	r0, [r0], #-1
   140dc:	0005d517 	andeq	sp, r5, r7, lsl r5
   140e0:	028b0300 	addeq	r0, fp, #0, 6
   140e4:	00001d0f 	andeq	r1, r0, pc, lsl #26
   140e8:	2d174800 	ldccs	8, cr4, [r7, #-0]
   140ec:	0300000a 	movweq	r0, #10
   140f0:	702c028c 	eorvc	r0, ip, ip, lsl #5
   140f4:	50000000 	andpl	r0, r0, r0
   140f8:	00008517 	andeq	r8, r0, r7, lsl r5
   140fc:	028d0300 	addeq	r0, sp, #0, 6
   14100:	0006941a 	andeq	r9, r6, sl, lsl r4
   14104:	ea175800 	b	5ea10c <__ccfg+0x5ca164>
   14108:	03000004 	movweq	r0, #4
   1410c:	e516028e 	ldr	r0, [r6, #-654]	; 0xfffffd72
   14110:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   14114:	00096217 	andeq	r6, r9, r7, lsl r2
   14118:	028f0300 	addeq	r0, pc, #0, 6
   1411c:	0000e516 	andeq	lr, r0, r6, lsl r5
   14120:	6f177000 	svcvs	0x00177000
   14124:	03000000 	movweq	r0, #0
   14128:	e5160290 	ldr	r0, [r6, #-656]	; 0xfffffd70
   1412c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   14130:	00084917 	andeq	r4, r8, r7, lsl r9
   14134:	02910300 	addseq	r0, r1, #0, 6
   14138:	00080210 	andeq	r0, r8, r0, lsl r2
   1413c:	82178000 	andshi	r8, r7, #0
   14140:	03000003 	movweq	r0, #3
   14144:	12100292 	andsne	r0, r0, #536870921	; 0x20000009
   14148:	88000008 	stmdahi	r0, {r3}
   1414c:	00090d17 	andeq	r0, r9, r7, lsl sp
   14150:	02930300 	addseq	r0, r3, #0, 6
   14154:	00001d0f 	andeq	r1, r0, pc, lsl #26
   14158:	2917a000 	ldmdbcs	r7, {sp, pc}
   1415c:	03000002 	movweq	r0, #2
   14160:	e5160294 	ldr	r0, [r6, #-660]	; 0xfffffd6c
   14164:	a4000000 	strge	r0, [r0], #-0
   14168:	00051f17 	andeq	r1, r5, r7, lsl pc
   1416c:	02950300 	addseq	r0, r5, #0, 6
   14170:	0000e516 	andeq	lr, r0, r6, lsl r5
   14174:	6717ac00 	ldrvs	sl, [r7, -r0, lsl #24]
   14178:	03000004 	movweq	r0, #4
   1417c:	e5160296 	ldr	r0, [r6, #-662]	; 0xfffffd6a
   14180:	b4000000 	strlt	r0, [r0], #-0
   14184:	00064f17 	andeq	r4, r6, r7, lsl pc
   14188:	02970300 	addseq	r0, r7, #0, 6
   1418c:	0000e516 	andeq	lr, r0, r6, lsl r5
   14190:	d917bc00 	ldmdble	r7, {sl, fp, ip, sp, pc}
   14194:	03000004 	movweq	r0, #4
   14198:	e5160298 	ldr	r0, [r6, #-664]	; 0xfffffd68
   1419c:	c4000000 	strgt	r0, [r0], #-0
   141a0:	0006f217 	andeq	pc, r6, r7, lsl r2	; <UNPREDICTABLE>
   141a4:	02990300 	addseq	r0, r9, #0, 6
   141a8:	00001d08 	andeq	r1, r0, r8, lsl #26
   141ac:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   141b0:	000005a8 	andeq	r0, r0, r8, lsr #11
   141b4:	00000802 	andeq	r0, r0, r2, lsl #16
   141b8:	00002409 	andeq	r2, r0, r9, lsl #8
   141bc:	08001900 	stmdaeq	r0, {r8, fp, ip}
   141c0:	000005a8 	andeq	r0, r0, r8, lsr #11
   141c4:	00000812 	andeq	r0, r0, r2, lsl r8
   141c8:	00002409 	andeq	r2, r0, r9, lsl #8
   141cc:	08000700 	stmdaeq	r0, {r8, r9, sl}
   141d0:	000005a8 	andeq	r0, r0, r8, lsr #11
   141d4:	00000822 	andeq	r0, r0, r2, lsr #16
   141d8:	00002409 	andeq	r2, r0, r9, lsl #8
   141dc:	1a001700 	bne	19de4 <__exidx_end+0x14eb8>
   141e0:	029e03f0 	addseq	r0, lr, #240, 6	; 0xc0000003
   141e4:	00084907 	andeq	r4, r8, r7, lsl #18
   141e8:	035d1700 	cmpeq	sp, #0, 14
   141ec:	a1030000 	mrsge	r0, (UNDEF: 3)
   141f0:	08491b02 	stmdaeq	r9, {r1, r8, r9, fp, ip}^
   141f4:	17000000 	strne	r0, [r0, -r0]
   141f8:	00000a51 	andeq	r0, r0, r1, asr sl
   141fc:	1802a203 	stmdane	r2, {r0, r1, r9, sp, pc}
   14200:	00000859 	andeq	r0, r0, r9, asr r8
   14204:	e7080078 	smlsdx	r8, r8, r0, r0
   14208:	59000002 	stmdbpl	r0, {r1}
   1420c:	09000008 	stmdbeq	r0, {r3}
   14210:	00000024 	andeq	r0, r0, r4, lsr #32
   14214:	2408001d 	strcs	r0, [r8], #-29	; 0xffffffe3
   14218:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
   1421c:	09000008 	stmdbeq	r0, {r3}
   14220:	00000024 	andeq	r0, r0, r4, lsr #32
   14224:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   14228:	03028303 	movweq	r8, #8963	; 0x2303
   1422c:	0000088e 	andeq	r0, r0, lr, lsl #17
   14230:	00435e1c 	subeq	r5, r3, ip, lsl lr
   14234:	029a0300 	addseq	r0, sl, #0, 6
   14238:	0006dd0b 	andeq	sp, r6, fp, lsl #26
   1423c:	08271c00 	stmdaeq	r7!, {sl, fp, ip}
   14240:	a3030000 	movwge	r0, #12288	; 0x3000
   14244:	08220b02 	stmdaeq	r2!, {r1, r8, r9, fp}
   14248:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1424c:	000005a8 	andeq	r0, r0, r8, lsr #11
   14250:	0000089e 	muleq	r0, lr, r8
   14254:	00002409 	andeq	r2, r0, r9, lsl #8
   14258:	1d001800 	stcne	8, cr1, [r0, #-0]
   1425c:	00000a38 	andeq	r0, r0, r8, lsr sl
   14260:	089e040f 	ldmeq	lr, {r0, r1, r2, r3, sl}
   14264:	b41e0000 	ldrlt	r0, [lr], #-0
   14268:	14000008 	strne	r0, [r0], #-8
   1426c:	0000044e 	andeq	r0, r0, lr, asr #8
   14270:	a9040f00 	stmdbge	r4, {r8, r9, sl, fp}
   14274:	0f000008 	svceq	0x00000008
   14278:	00017104 	andeq	r7, r1, r4, lsl #2
   1427c:	08cb1e00 	stmiaeq	fp, {r9, sl, fp, ip}^
   14280:	1d140000 	ldcne	0, cr0, [r4, #-0]
   14284:	00000000 	andeq	r0, r0, r0
   14288:	08d1040f 	ldmeq	r1, {r0, r1, r2, r3, sl}^
   1428c:	040f0000 	streq	r0, [pc], #-0	; 14294 <__exidx_end+0xf368>
   14290:	000008c0 	andeq	r0, r0, r0, asr #17
   14294:	00064208 	andeq	r4, r6, r8, lsl #4
   14298:	0008e700 	andeq	lr, r8, r0, lsl #14
   1429c:	00240900 	eoreq	r0, r4, r0, lsl #18
   142a0:	00020000 	andeq	r0, r2, r0
   142a4:	0007f41f 	andeq	pc, r7, pc, lsl r4	; <UNPREDICTABLE>
   142a8:	03330300 	teqeq	r3, #0, 6
   142ac:	00044e17 	andeq	r4, r4, r7, lsl lr
   142b0:	07ed1f00 	strbeq	r1, [sp, r0, lsl #30]!
   142b4:	34030000 	strcc	r0, [r3], #-0
   142b8:	04541d03 	ldrbeq	r1, [r4], #-3331	; 0xfffff2fd
   142bc:	1a200000 	bne	8142c4 <__ccfg+0x7f431c>
   142c0:	05000043 	streq	r0, [r0, #-67]	; 0xffffffbd
   142c4:	04593017 	ldrbeq	r3, [r9], #-23	; 0xffffffe9
   142c8:	03050000 	movweq	r0, #20480	; 0x5000
   142cc:	20000118 	andcs	r0, r0, r8, lsl r1
   142d0:	0008e721 	andeq	lr, r8, r1, lsr #14
   142d4:	10030500 	andne	r0, r3, r0, lsl #10
   142d8:	21200001 			; <UNDEFINED> instruction: 0x21200001
   142dc:	000008f4 	strdeq	r0, [r0], -r4
   142e0:	00000305 	andeq	r0, r0, r5, lsl #6
   142e4:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
   142e8:	0400000a 	streq	r0, [r0], #-10
   142ec:	0049c400 	subeq	ip, r9, r0, lsl #8
   142f0:	06010400 	streq	r0, [r1], -r0, lsl #8
   142f4:	0c000040 	stceq	0, cr0, [r0], {64}	; 0x40
   142f8:	0000437a 	andeq	r4, r0, sl, ror r3
   142fc:	000042b0 			; <UNDEFINED> instruction: 0x000042b0
   14300:	00000000 	andeq	r0, r0, r0
   14304:	000000b8 	strheq	r0, [r0], -r8
   14308:	00008c99 	muleq	r0, r9, ip
   1430c:	98070402 	stmdals	r7, {r1, sl}
   14310:	03000003 	movweq	r0, #3
   14314:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   14318:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
   1431c:	0005e405 	andeq	lr, r5, r5, lsl #8
   14320:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   14324:	00003ed7 	ldrdeq	r3, [r0], -r7
   14328:	00089204 	andeq	r9, r8, r4, lsl #4
   1432c:	01650200 	cmneq	r5, r0, lsl #4
   14330:	00002517 	andeq	r2, r0, r7, lsl r5
   14334:	06010200 	streq	r0, [r1], -r0, lsl #4
   14338:	000008da 	ldrdeq	r0, [r0], -sl
   1433c:	d8080102 	stmdale	r8, {r1, r8}
   14340:	02000008 	andeq	r0, r0, #8
   14344:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
   14348:	02020000 	andeq	r0, r2, #0
   1434c:	0009a607 	andeq	sl, r9, r7, lsl #12
   14350:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   14354:	000005e9 	andeq	r0, r0, r9, ror #11
   14358:	93070402 	movwls	r0, #29698	; 0x7402
   1435c:	02000003 	andeq	r0, r0, #3
   14360:	038e0708 	orreq	r0, lr, #8, 14	; 0x200000
   14364:	e2050000 	and	r0, r5, #0
   14368:	03000009 	movweq	r0, #9
   1436c:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
   14370:	67050000 	strvs	r0, [r5, -r0]
   14374:	03000002 	movweq	r0, #2
   14378:	006a0e74 	rsbeq	r0, sl, r4, ror lr
   1437c:	04060000 	streq	r0, [r6], #-0
   14380:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
   14384:	07000000 	streq	r0, [r0, -r0]
   14388:	00000587 	andeq	r0, r0, r7, lsl #11
   1438c:	410ca703 	tstmi	ip, r3, lsl #14
   14390:	07000000 	streq	r0, [r0, -r0]
   14394:	000007e6 	andeq	r0, r0, r6, ror #15
   14398:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
   1439c:	00000000 	andeq	r0, r0, r0
   143a0:	00005508 	andeq	r5, r0, r8, lsl #10
   143a4:	0000c900 	andeq	ip, r0, r0, lsl #18
   143a8:	00250900 	eoreq	r0, r5, r0, lsl #18
   143ac:	00030000 	andeq	r0, r3, r0
   143b0:	a203080a 	andge	r0, r3, #655360	; 0xa0000
   143b4:	0000ed09 	andeq	lr, r0, r9, lsl #26
   143b8:	03220b00 			; <UNDEFINED> instruction: 0x03220b00
   143bc:	a4030000 	strge	r0, [r3], #-0
   143c0:	00002c07 	andeq	r2, r0, r7, lsl #24
   143c4:	aa0b0000 	bge	2d43cc <__ccfg+0x2b4424>
   143c8:	03000004 	movweq	r0, #4
   143cc:	009705a9 	addseq	r0, r7, r9, lsr #11
   143d0:	00040000 	andeq	r0, r4, r0
   143d4:	0006a505 	andeq	sl, r6, r5, lsl #10
   143d8:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   143dc:	000000c9 	andeq	r0, r0, r9, asr #1
   143e0:	2905040c 	stmdbcs	r5, {r2, r3, sl}
   143e4:	04000006 	streq	r0, [r0], #-6
   143e8:	00711916 	rsbseq	r1, r1, r6, lsl r9
   143ec:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
   143f0:	05000001 	streq	r0, [r0, #-1]
   143f4:	002c0d0c 	eoreq	r0, ip, ip, lsl #26
   143f8:	55050000 	strpl	r0, [r5, #-0]
   143fc:	04000005 	streq	r0, [r0], #-5
   14400:	01071b23 	tsteq	r7, r3, lsr #22
   14404:	a70d0000 	strge	r0, [sp, -r0]
   14408:	18000002 	stmdane	r0, {r1}
   1440c:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
   14410:	0b000001 	bleq	1441c <__exidx_end+0xf4f0>
   14414:	00000a32 	andeq	r0, r0, r2, lsr sl
   14418:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
   1441c:	00000001 	andeq	r0, r0, r1
   14420:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   14424:	2c073704 	stccs	7, cr3, [r7], {4}
   14428:	04000000 	streq	r0, [r0], #-0
   1442c:	0008410b 	andeq	r4, r8, fp, lsl #2
   14430:	0b370400 	bleq	dd5438 <__ccfg+0xdb5490>
   14434:	0000002c 	andeq	r0, r0, ip, lsr #32
   14438:	3ea20b08 	vfmacc.f64	d0, d2, d8
   1443c:	37040000 	strcc	r0, [r4, -r0]
   14440:	00002c14 	andeq	r2, r0, r4, lsl ip
   14444:	ba0b0c00 	blt	2d744c <__ccfg+0x2b74a4>
   14448:	04000003 	streq	r0, [r0], #-3
   1444c:	002c1b37 	eoreq	r1, ip, r7, lsr fp
   14450:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   14454:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   14458:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
   1445c:	00140000 	andseq	r0, r4, r0
   14460:	011f040f 	tsteq	pc, pc, lsl #8
   14464:	fb080000 	blx	21446e <__ccfg+0x1f44c6>
   14468:	8f000000 	svchi	0x00000000
   1446c:	09000001 	stmdbeq	r0, {r0}
   14470:	00000025 	andeq	r0, r0, r5, lsr #32
   14474:	5c0d0000 	stcpl	0, cr0, [sp], {-0}
   14478:	24000008 	strcs	r0, [r0], #-8
   1447c:	12083c04 	andne	r3, r8, #4, 24	; 0x400
   14480:	0b000002 	bleq	14490 <__exidx_end+0xf564>
   14484:	0000044a 	andeq	r0, r0, sl, asr #8
   14488:	2c093e04 	stccs	14, cr3, [r9], {4}
   1448c:	00000000 	andeq	r0, r0, r0
   14490:	0003540b 	andeq	r5, r3, fp, lsl #8
   14494:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   14498:	0000002c 	andeq	r0, r0, ip, lsr #32
   1449c:	02fd0b04 	rscseq	r0, sp, #4, 22	; 0x1000
   144a0:	40040000 	andmi	r0, r4, r0
   144a4:	00002c09 	andeq	r2, r0, r9, lsl #24
   144a8:	0b0b0800 	bleq	2d64b0 <__ccfg+0x2b6508>
   144ac:	04000005 	streq	r0, [r0], #-5
   144b0:	002c0941 	eoreq	r0, ip, r1, asr #18
   144b4:	0b0c0000 	bleq	3144bc <__ccfg+0x2f4514>
   144b8:	00000719 	andeq	r0, r0, r9, lsl r7
   144bc:	2c094204 	sfmcs	f4, 4, [r9], {4}
   144c0:	10000000 	andne	r0, r0, r0
   144c4:	0008000b 	andeq	r0, r8, fp
   144c8:	09430400 	stmdbeq	r3, {sl}^
   144cc:	0000002c 	andeq	r0, r0, ip, lsr #32
   144d0:	02c20b14 	sbceq	r0, r2, #20, 22	; 0x5000
   144d4:	44040000 	strmi	r0, [r4], #-0
   144d8:	00002c09 	andeq	r2, r0, r9, lsl #24
   144dc:	530b1800 	movwpl	r1, #47104	; 0xb800
   144e0:	04000004 	streq	r0, [r0], #-4
   144e4:	002c0945 	eoreq	r0, ip, r5, asr #18
   144e8:	0b1c0000 	bleq	7144f0 <__ccfg+0x6f4548>
   144ec:	000006c3 	andeq	r0, r0, r3, asr #13
   144f0:	2c094604 	stccs	6, cr4, [r9], {4}
   144f4:	20000000 	andcs	r0, r0, r0
   144f8:	00611000 	rsbeq	r1, r1, r0
   144fc:	01080000 	mrseq	r0, (UNDEF: 8)
   14500:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
   14504:	0b000002 	bleq	14514 <__exidx_end+0xf5e8>
   14508:	00000970 	andeq	r0, r0, r0, ror r9
   1450c:	570a5004 	strpl	r5, [sl, -r4]
   14510:	00000002 	andeq	r0, r0, r2
   14514:	0008bc0b 	andeq	fp, r8, fp, lsl #24
   14518:	09510400 	ldmdbeq	r1, {sl}^
   1451c:	00000257 	andeq	r0, r0, r7, asr r2
   14520:	09d91180 	ldmibeq	r9, {r7, r8, ip}^
   14524:	53040000 	movwpl	r0, #16384	; 0x4000
   14528:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   1452c:	11010000 	mrsne	r0, (UNDEF: 1)
   14530:	00000a1d 	andeq	r0, r0, sp, lsl sl
   14534:	fb0a5604 	blx	2a9d4e <__ccfg+0x289da6>
   14538:	04000000 	streq	r0, [r0], #-0
   1453c:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
   14540:	67000000 	strvs	r0, [r0, -r0]
   14544:	09000002 	stmdbeq	r0, {r1}
   14548:	00000025 	andeq	r0, r0, r5, lsr #32
   1454c:	8610001f 			; <UNDEFINED> instruction: 0x8610001f
   14550:	90000007 	andls	r0, r0, r7
   14554:	08620401 	stmdaeq	r2!, {r0, sl}^
   14558:	000002aa 	andeq	r0, r0, sl, lsr #5
   1455c:	000a320b 	andeq	r3, sl, fp, lsl #4
   14560:	12630400 	rsbne	r0, r3, #0, 8
   14564:	000002aa 	andeq	r0, r0, sl, lsr #5
   14568:	04620b00 	strbteq	r0, [r2], #-2816	; 0xfffff500
   1456c:	64040000 	strvs	r0, [r4], #-0
   14570:	00002c06 	andeq	r2, r0, r6, lsl #24
   14574:	6f0b0400 	svcvs	0x000b0400
   14578:	04000002 	streq	r0, [r0], #-2
   1457c:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
   14580:	0b080000 	bleq	214588 <__ccfg+0x1f45e0>
   14584:	00000061 	andeq	r0, r0, r1, rrx
   14588:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
   1458c:	88000002 	stmdahi	r0, {r1}
   14590:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
   14594:	08000002 	stmdaeq	r0, {r1}
   14598:	000002c0 	andeq	r0, r0, r0, asr #5
   1459c:	000002c0 	andeq	r0, r0, r0, asr #5
   145a0:	00002509 	andeq	r2, r0, r9, lsl #10
   145a4:	0f001f00 	svceq	0x00001f00
   145a8:	0002c604 	andeq	ip, r2, r4, lsl #12
   145ac:	3a0d1200 	bcc	358db4 <__ccfg+0x338e0c>
   145b0:	08000009 	stmdaeq	r0, {r0, r3}
   145b4:	ef087a04 	svc	0x00087a04
   145b8:	0b000002 	bleq	145c8 <__exidx_end+0xf69c>
   145bc:	00000600 	andeq	r0, r0, r0, lsl #12
   145c0:	ef117b04 	svc	0x00117b04
   145c4:	00000002 	andeq	r0, r0, r2
   145c8:	0018c10b 	andseq	ip, r8, fp, lsl #2
   145cc:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   145d0:	0000002c 	andeq	r0, r0, ip, lsr #32
   145d4:	040f0004 	streq	r0, [pc], #-4	; 145dc <__exidx_end+0xf6b0>
   145d8:	00000055 	andeq	r0, r0, r5, asr r0
   145dc:	0003b20d 	andeq	fp, r3, sp, lsl #4
   145e0:	ba046800 	blt	12e5e8 <__ccfg+0x10e640>
   145e4:	00043808 	andeq	r3, r4, r8, lsl #16
   145e8:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   145ec:	12bb0400 	adcsne	r0, fp, #0, 8
   145f0:	000002ef 	andeq	r0, r0, pc, ror #5
   145f4:	725f0e00 	subsvc	r0, pc, #0, 28
   145f8:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   145fc:	0000002c 	andeq	r0, r0, ip, lsr #32
   14600:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   14604:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   14608:	0000002c 	andeq	r0, r0, ip, lsr #32
   1460c:	01e90b08 	mvneq	r0, r8, lsl #22
   14610:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   14614:	00005c09 	andeq	r5, r0, r9, lsl #24
   14618:	5e0b0c00 	cdppl	12, 0, cr0, cr11, cr0, {0}
   1461c:	04000006 	streq	r0, [r0], #-6
   14620:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
   14624:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   14628:	0066625f 	rsbeq	r6, r6, pc, asr r2
   1462c:	c711c004 	ldrgt	ip, [r1, -r4]
   14630:	10000002 	andne	r0, r0, r2
   14634:	0001e00b 	andeq	lr, r1, fp
   14638:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   1463c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14640:	02740b18 	rsbseq	r0, r4, #24, 22	; 0x6000
   14644:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   14648:	0000f90a 	andeq	pc, r0, sl, lsl #18
   1464c:	510b1c00 	tstpl	fp, r0, lsl #24
   14650:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   14654:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
   14658:	0b200000 	bleq	814660 <__ccfg+0x7f46b8>
   1465c:	00001818 	andeq	r1, r0, r8, lsl r8
   14660:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
   14664:	24000005 	strcs	r0, [r0], #-5
   14668:	000a430b 	andeq	r4, sl, fp, lsl #6
   1466c:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 14674 <__exidx_end+0xf748>
   14670:	0000060a 	andeq	r0, r0, sl, lsl #12
   14674:	18060b28 	stmdane	r6, {r3, r5, r8, r9, fp}
   14678:	d0040000 	andle	r0, r4, r0
   1467c:	00062409 	andeq	r2, r6, r9, lsl #8
   14680:	5f0e2c00 	svcpl	0x000e2c00
   14684:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   14688:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
   1468c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   14690:	0070755f 	rsbseq	r7, r0, pc, asr r5
   14694:	ef12d404 	svc	0x0012d404
   14698:	38000002 	stmdacc	r0, {r1}
   1469c:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   146a0:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   146a4:	0000002c 	andeq	r0, r0, ip, lsr #32
   146a8:	0a5a0b3c 	beq	16973a0 <__ccfg+0x16773f8>
   146ac:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   146b0:	00062a11 	andeq	r2, r6, r1, lsl sl
   146b4:	e90b4000 	stmdb	fp, {lr}
   146b8:	04000009 	streq	r0, [r0], #-9
   146bc:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
   146c0:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   146c4:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   146c8:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
   146cc:	44000002 	strmi	r0, [r0], #-2
   146d0:	0008530b 	andeq	r5, r8, fp, lsl #6
   146d4:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   146d8:	0000002c 	andeq	r0, r0, ip, lsr #32
   146dc:	03ff0b4c 	mvnseq	r0, #76, 22	; 0x13000
   146e0:	e0040000 	and	r0, r4, r0
   146e4:	00007f0a 	andeq	r7, r0, sl, lsl #30
   146e8:	200b5000 	andcs	r5, fp, r0
   146ec:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   146f0:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
   146f4:	0b540000 	bleq	15146fc <__ccfg+0x14f4754>
   146f8:	0000086b 	andeq	r0, r0, fp, ror #16
   146fc:	130ce704 	movwne	lr, #50948	; 0xc704
   14700:	58000001 	stmdapl	r0, {r0}
   14704:	00078e0b 	andeq	r8, r7, fp, lsl #28
   14708:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   1470c:	000000ed 	andeq	r0, r0, sp, ror #1
   14710:	0a150b5c 	beq	557488 <__ccfg+0x5374e0>
   14714:	ea040000 	b	11471c <__ccfg+0xf4774>
   14718:	00002c09 	andeq	r2, r0, r9, lsl #24
   1471c:	13006400 	movwne	r6, #1024	; 0x400
   14720:	0000002c 	andeq	r0, r0, ip, lsr #32
   14724:	00000456 	andeq	r0, r0, r6, asr r4
   14728:	00045614 	andeq	r5, r4, r4, lsl r6
   1472c:	00f91400 	rscseq	r1, r9, r0, lsl #8
   14730:	aa140000 	bge	514738 <__ccfg+0x4f4790>
   14734:	14000005 	strne	r0, [r0], #-5
   14738:	0000002c 	andeq	r0, r0, ip, lsr #32
   1473c:	61040f00 	tstvs	r4, r0, lsl #30
   14740:	15000004 	strne	r0, [r0, #-4]
   14744:	00000456 	andeq	r0, r0, r6, asr r4
   14748:	00435e16 	subeq	r5, r3, r6, lsl lr
   1474c:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   14750:	aa080265 	bge	2150ec <__ccfg+0x1f5144>
   14754:	17000005 	strne	r0, [r0, -r5]
   14758:	000006f4 	strdeq	r0, [r0], -r4
   1475c:	07026704 	streq	r6, [r2, -r4, lsl #14]
   14760:	0000002c 	andeq	r0, r0, ip, lsr #32
   14764:	05ce1700 	strbeq	r1, [lr, #1792]	; 0x700
   14768:	6c040000 	stcvs	0, cr0, [r4], {-0}
   1476c:	06960b02 	ldreq	r0, [r6], r2, lsl #22
   14770:	17040000 	strne	r0, [r4, -r0]
   14774:	00000255 	andeq	r0, r0, r5, asr r2
   14778:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   1477c:	00000696 	muleq	r0, r6, r6
   14780:	0a491708 	beq	125a3a8 <__ccfg+0x123a400>
   14784:	6c040000 	stcvs	0, cr0, [r4], {-0}
   14788:	06961e02 	ldreq	r1, [r6], r2, lsl #28
   1478c:	170c0000 	strne	r0, [ip, -r0]
   14790:	0000045d 	andeq	r0, r0, sp, asr r4
   14794:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   14798:	0000002c 	andeq	r0, r0, ip, lsr #32
   1479c:	040f1710 	streq	r1, [pc], #-1808	; 147a4 <__exidx_end+0xf878>
   147a0:	6f040000 	svcvs	0x00040000
   147a4:	08960802 	ldmeq	r6, {r1, fp}
   147a8:	17140000 	ldrne	r0, [r4, -r0]
   147ac:	000009fc 	strdeq	r0, [r0], -ip
   147b0:	07027204 	streq	r7, [r2, -r4, lsl #4]
   147b4:	0000002c 	andeq	r0, r0, ip, lsr #32
   147b8:	3d4e1730 	stclcc	7, cr1, [lr, #-192]	; 0xffffff40
   147bc:	73040000 	movwvc	r0, #16384	; 0x4000
   147c0:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
   147c4:	17340000 	ldrne	r0, [r4, -r0]!
   147c8:	000005a1 	andeq	r0, r0, r1, lsr #11
   147cc:	07027504 	streq	r7, [r2, -r4, lsl #10]
   147d0:	0000002c 	andeq	r0, r0, ip, lsr #32
   147d4:	069b1738 			; <UNDEFINED> instruction: 0x069b1738
   147d8:	77040000 	strvc	r0, [r4, -r0]
   147dc:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
   147e0:	173c0000 	ldrne	r0, [ip, -r0]!
   147e4:	000002cc 	andeq	r0, r0, ip, asr #5
   147e8:	13027a04 	movwne	r7, #10756	; 0x2a04
   147ec:	00000179 	andeq	r0, r0, r9, ror r1
   147f0:	03781740 	cmneq	r8, #64, 14	; 0x1000000
   147f4:	7b040000 	blvc	1147fc <__ccfg+0xf4854>
   147f8:	002c0702 	eoreq	r0, ip, r2, lsl #14
   147fc:	17440000 	strbne	r0, [r4, -r0]
   14800:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
   14804:	13027c04 	movwne	r7, #11268	; 0x2c04
   14808:	00000179 	andeq	r0, r0, r9, ror r1
   1480c:	06061748 	streq	r1, [r6], -r8, asr #14
   14810:	7d040000 	stcvc	0, cr0, [r4, #-0]
   14814:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
   14818:	174c0000 	strbne	r0, [ip, -r0]
   1481c:	00000839 	andeq	r0, r0, r9, lsr r8
   14820:	07028004 	streq	r8, [r2, -r4]
   14824:	0000002c 	andeq	r0, r0, ip, lsr #32
   14828:	08d01750 	ldmeq	r0, {r4, r6, r8, r9, sl, ip}^
   1482c:	81040000 	mrshi	r0, (UNDEF: 4)
   14830:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
   14834:	17540000 	ldrbne	r0, [r4, -r0]
   14838:	000008ea 	andeq	r0, r0, sl, ror #17
   1483c:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   14840:	00000871 	andeq	r0, r0, r1, ror r8
   14844:	07861858 			; <UNDEFINED> instruction: 0x07861858
   14848:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   1484c:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
   14850:	01480000 	mrseq	r0, (UNDEF: 72)
   14854:	00052e18 	andeq	r2, r5, r8, lsl lr
   14858:	02a90400 	adceq	r0, r9, #0, 8
   1485c:	00026712 	andeq	r6, r2, r2, lsl r7
   14860:	18014c00 	stmdane	r1, {sl, fp, lr}
   14864:	00000515 	andeq	r0, r0, r5, lsl r5
   14868:	0c02ad04 	stceq	13, cr10, [r2], {4}
   1486c:	000008d3 	ldrdeq	r0, [r0], -r3
   14870:	4d1802dc 	lfmmi	f0, 4, [r8, #-880]	; 0xfffffc90
   14874:	04000009 	streq	r0, [r0], #-9
   14878:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
   1487c:	e0000006 	and	r0, r0, r6
   14880:	07c71802 	strbeq	r1, [r7, r2, lsl #16]
   14884:	b4040000 	strlt	r0, [r4], #-0
   14888:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
   1488c:	02ec0000 	rsceq	r0, ip, #0
   14890:	b0040f00 	andlt	r0, r4, r0, lsl #30
   14894:	02000005 	andeq	r0, r0, #5
   14898:	08e10801 	stmiaeq	r1!, {r0, fp}^
   1489c:	b0150000 	andslt	r0, r5, r0
   148a0:	0f000005 	svceq	0x00000005
   148a4:	00043804 	andeq	r3, r4, r4, lsl #16
   148a8:	002c1300 	eoreq	r1, ip, r0, lsl #6
   148ac:	05e00000 	strbeq	r0, [r0, #0]!
   148b0:	56140000 	ldrpl	r0, [r4], -r0
   148b4:	14000004 	strne	r0, [r0], #-4
   148b8:	000000f9 	strdeq	r0, [r0], -r9
   148bc:	0005e014 	andeq	lr, r5, r4, lsl r0
   148c0:	002c1400 	eoreq	r1, ip, r0, lsl #8
   148c4:	0f000000 	svceq	0x00000000
   148c8:	0005b704 	andeq	fp, r5, r4, lsl #14
   148cc:	c2040f00 	andgt	r0, r4, #0, 30
   148d0:	13000005 	movwne	r0, #5
   148d4:	0000008b 	andeq	r0, r0, fp, lsl #1
   148d8:	0000060a 	andeq	r0, r0, sl, lsl #12
   148dc:	00045614 	andeq	r5, r4, r4, lsl r6
   148e0:	00f91400 	rscseq	r1, r9, r0, lsl #8
   148e4:	8b140000 	blhi	5148ec <__ccfg+0x4f4944>
   148e8:	14000000 	strne	r0, [r0], #-0
   148ec:	0000002c 	andeq	r0, r0, ip, lsr #32
   148f0:	ec040f00 	stc	15, cr0, [r4], {-0}
   148f4:	13000005 	movwne	r0, #5
   148f8:	0000002c 	andeq	r0, r0, ip, lsr #32
   148fc:	00000624 	andeq	r0, r0, r4, lsr #12
   14900:	00045614 	andeq	r5, r4, r4, lsl r6
   14904:	00f91400 	rscseq	r1, r9, r0, lsl #8
   14908:	0f000000 	svceq	0x00000000
   1490c:	00061004 	andeq	r1, r6, r4
   14910:	00550800 	subseq	r0, r5, r0, lsl #16
   14914:	063a0000 	ldrteq	r0, [sl], -r0
   14918:	25090000 	strcs	r0, [r9, #-0]
   1491c:	02000000 	andeq	r0, r0, #0
   14920:	00550800 	subseq	r0, r5, r0, lsl #16
   14924:	064a0000 	strbeq	r0, [sl], -r0
   14928:	25090000 	strcs	r0, [r9, #-0]
   1492c:	00000000 	andeq	r0, r0, r0
   14930:	03ed0400 	mvneq	r0, #0, 8
   14934:	24040000 	strcs	r0, [r4], #-0
   14938:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
   1493c:	74190000 	ldrvc	r0, [r9], #-0
   14940:	0c000043 	stceq	0, cr0, [r0], {67}	; 0x43
   14944:	08012804 	stmdaeq	r1, {r2, fp, sp}
   14948:	00000690 	muleq	r0, r0, r6
   1494c:	000a3217 	andeq	r3, sl, r7, lsl r2
   14950:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   14954:	00069011 	andeq	r9, r6, r1, lsl r0
   14958:	8b170000 	blhi	5d4960 <__ccfg+0x5b49b8>
   1495c:	04000008 	streq	r0, [r0], #-8
   14960:	2c07012b 	stfcss	f0, [r7], {43}	; 0x2b
   14964:	04000000 	streq	r0, [r0], #-0
   14968:	00058d17 	andeq	r8, r5, r7, lsl sp
   1496c:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   14970:	0006960b 	andeq	r9, r6, fp, lsl #12
   14974:	0f000800 	svceq	0x00000800
   14978:	00065704 	andeq	r5, r6, r4, lsl #14
   1497c:	4a040f00 	bmi	118584 <__ccfg+0xf85dc>
   14980:	19000006 	stmdbne	r0, {r1, r2}
   14984:	00000364 	andeq	r0, r0, r4, ror #6
   14988:	0144040e 	cmpeq	r4, lr, lsl #8
   1498c:	0006d508 	andeq	sp, r6, r8, lsl #10
   14990:	117a1700 	cmnne	sl, r0, lsl #14
   14994:	45040000 	strmi	r0, [r4, #-0]
   14998:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   1499c:	17000000 	strne	r0, [r0, -r0]
   149a0:	00000618 	andeq	r0, r0, r8, lsl r6
   149a4:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   149a8:	000006d5 	ldrdeq	r0, [r0], -r5
   149ac:	101f1706 	andsne	r1, pc, r6, lsl #14
   149b0:	47040000 	strmi	r0, [r4, -r0]
   149b4:	00631201 	rsbeq	r1, r3, r1, lsl #4
   149b8:	000c0000 	andeq	r0, ip, r0
   149bc:	00006308 	andeq	r6, r0, r8, lsl #6
   149c0:	0006e500 	andeq	lr, r6, r0, lsl #10
   149c4:	00250900 	eoreq	r0, r5, r0, lsl #18
   149c8:	00020000 	andeq	r0, r2, r0
   149cc:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
   149d0:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
   149d4:	ef170000 	svc	0x00170000
   149d8:	04000009 	streq	r0, [r0], #-9
   149dc:	25180287 	ldrcs	r0, [r8, #-647]	; 0xfffffd79
   149e0:	00000000 	andeq	r0, r0, r0
   149e4:	00095517 	andeq	r5, r9, r7, lsl r5
   149e8:	02880400 	addeq	r0, r8, #0, 8
   149ec:	0005aa12 	andeq	sl, r5, r2, lsl sl
   149f0:	a5170400 	ldrge	r0, [r7, #-1024]	; 0xfffffc00
   149f4:	04000003 	streq	r0, [r0], #-3
   149f8:	fa100289 	blx	415424 <__ccfg+0x3f547c>
   149fc:	08000007 	stmdaeq	r0, {r0, r1, r2}
   14a00:	00081817 	andeq	r1, r8, r7, lsl r8
   14a04:	028a0400 	addeq	r0, sl, #0, 8
   14a08:	00018f17 	andeq	r8, r1, r7, lsl pc
   14a0c:	d5172400 	ldrle	r2, [r7, #-1024]	; 0xfffffc00
   14a10:	04000005 	streq	r0, [r0], #-5
   14a14:	2c0f028b 	sfmcs	f0, 4, [pc], {139}	; 0x8b
   14a18:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   14a1c:	000a2d17 	andeq	r2, sl, r7, lsl sp
   14a20:	028c0400 	addeq	r0, ip, #0, 8
   14a24:	0000782c 	andeq	r7, r0, ip, lsr #16
   14a28:	85175000 	ldrhi	r5, [r7, #-0]
   14a2c:	04000000 	streq	r0, [r0], #-0
   14a30:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
   14a34:	58000006 	stmdapl	r0, {r1, r2}
   14a38:	0004ea17 	andeq	lr, r4, r7, lsl sl
   14a3c:	028e0400 	addeq	r0, lr, #0, 8
   14a40:	0000ed16 	andeq	lr, r0, r6, lsl sp
   14a44:	62176800 	andsvs	r6, r7, #0, 16
   14a48:	04000009 	streq	r0, [r0], #-9
   14a4c:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
   14a50:	70000000 	andvc	r0, r0, r0
   14a54:	00006f17 	andeq	r6, r0, r7, lsl pc
   14a58:	02900400 	addseq	r0, r0, #0, 8
   14a5c:	0000ed16 	andeq	lr, r0, r6, lsl sp
   14a60:	49177800 	ldmdbmi	r7, {fp, ip, sp, lr}
   14a64:	04000008 	streq	r0, [r0], #-8
   14a68:	0a100291 	beq	4154b4 <__ccfg+0x3f550c>
   14a6c:	80000008 	andhi	r0, r0, r8
   14a70:	00038217 	andeq	r8, r3, r7, lsl r2
   14a74:	02920400 	addseq	r0, r2, #0, 8
   14a78:	00081a10 	andeq	r1, r8, r0, lsl sl
   14a7c:	0d178800 	ldceq	8, cr8, [r7, #-0]
   14a80:	04000009 	streq	r0, [r0], #-9
   14a84:	2c0f0293 	sfmcs	f0, 4, [pc], {147}	; 0x93
   14a88:	a0000000 	andge	r0, r0, r0
   14a8c:	00022917 	andeq	r2, r2, r7, lsl r9
   14a90:	02940400 	addseq	r0, r4, #0, 8
   14a94:	0000ed16 	andeq	lr, r0, r6, lsl sp
   14a98:	1f17a400 	svcne	0x0017a400
   14a9c:	04000005 	streq	r0, [r0], #-5
   14aa0:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
   14aa4:	ac000000 	stcge	0, cr0, [r0], {-0}
   14aa8:	00046717 	andeq	r6, r4, r7, lsl r7
   14aac:	02960400 	addseq	r0, r6, #0, 8
   14ab0:	0000ed16 	andeq	lr, r0, r6, lsl sp
   14ab4:	4f17b400 	svcmi	0x0017b400
   14ab8:	04000006 	streq	r0, [r0], #-6
   14abc:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
   14ac0:	bc000000 	stclt	0, cr0, [r0], {-0}
   14ac4:	0004d917 	andeq	sp, r4, r7, lsl r9
   14ac8:	02980400 	addseq	r0, r8, #0, 8
   14acc:	0000ed16 	andeq	lr, r0, r6, lsl sp
   14ad0:	f217c400 	vshl.s16	d12, d0, d7
   14ad4:	04000006 	streq	r0, [r0], #-6
   14ad8:	2c080299 	sfmcs	f0, 4, [r8], {153}	; 0x99
   14adc:	cc000000 	stcgt	0, cr0, [r0], {-0}
   14ae0:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   14ae4:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   14ae8:	25090000 	strcs	r0, [r9, #-0]
   14aec:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   14af0:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   14af4:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
   14af8:	25090000 	strcs	r0, [r9, #-0]
   14afc:	07000000 	streq	r0, [r0, -r0]
   14b00:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   14b04:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
   14b08:	25090000 	strcs	r0, [r9, #-0]
   14b0c:	17000000 	strne	r0, [r0, -r0]
   14b10:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
   14b14:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
   14b18:	17000008 	strne	r0, [r0, -r8]
   14b1c:	0000035d 	andeq	r0, r0, sp, asr r3
   14b20:	1b02a104 	blne	bcf38 <__ccfg+0x9cf90>
   14b24:	00000851 	andeq	r0, r0, r1, asr r8
   14b28:	0a511700 	beq	145a730 <__ccfg+0x143a788>
   14b2c:	a2040000 	andge	r0, r4, #0
   14b30:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
   14b34:	00780000 	rsbseq	r0, r8, r0
   14b38:	0002ef08 	andeq	lr, r2, r8, lsl #30
   14b3c:	00086100 	andeq	r6, r8, r0, lsl #2
   14b40:	00250900 	eoreq	r0, r5, r0, lsl #18
   14b44:	001d0000 	andseq	r0, sp, r0
   14b48:	00002508 	andeq	r2, r0, r8, lsl #10
   14b4c:	00087100 	andeq	r7, r8, r0, lsl #2
   14b50:	00250900 	eoreq	r0, r5, r0, lsl #18
   14b54:	001d0000 	andseq	r0, sp, r0
   14b58:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
   14b5c:	08960302 	ldmeq	r6, {r1, r8, r9}
   14b60:	5e1c0000 	cdppl	0, 1, cr0, cr12, cr0, {0}
   14b64:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   14b68:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
   14b6c:	1c000006 	stcne	0, cr0, [r0], {6}
   14b70:	00000827 	andeq	r0, r0, r7, lsr #16
   14b74:	0b02a304 	bleq	bd78c <__ccfg+0x9d7e4>
   14b78:	0000082a 	andeq	r0, r0, sl, lsr #16
   14b7c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   14b80:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
   14b84:	25090000 	strcs	r0, [r9, #-0]
   14b88:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   14b8c:	0a381d00 	beq	e1bf94 <__ccfg+0xdfbfec>
   14b90:	040f0000 	streq	r0, [pc], #-0	; 14b98 <__exidx_end+0xfc6c>
   14b94:	000008a6 	andeq	r0, r0, r6, lsr #17
   14b98:	0008bc1e 	andeq	fp, r8, lr, lsl ip
   14b9c:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   14ba0:	0f000000 	svceq	0x00000000
   14ba4:	0008b104 	andeq	fp, r8, r4, lsl #2
   14ba8:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
   14bac:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   14bb0:	000008d3 	ldrdeq	r0, [r0], -r3
   14bb4:	00002c14 	andeq	r2, r0, r4, lsl ip
   14bb8:	040f0000 	streq	r0, [pc], #-0	; 14bc0 <__exidx_end+0xfc94>
   14bbc:	000008d9 	ldrdeq	r0, [r0], -r9
   14bc0:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
   14bc4:	4a080000 	bmi	214bcc <__ccfg+0x1f4c24>
   14bc8:	ef000006 	svc	0x00000006
   14bcc:	09000008 	stmdbeq	r0, {r3}
   14bd0:	00000025 	andeq	r0, r0, r5, lsr #32
   14bd4:	f41f0002 			; <UNDEFINED> instruction: 0xf41f0002
   14bd8:	04000007 	streq	r0, [r0], #-7
   14bdc:	56170333 			; <UNDEFINED> instruction: 0x56170333
   14be0:	1f000004 	svcne	0x00000004
   14be4:	000007ed 	andeq	r0, r0, sp, ror #15
   14be8:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   14bec:	0000045c 	andeq	r0, r0, ip, asr r4
   14bf0:	003ef020 	eorseq	pc, lr, r0, lsr #32
   14bf4:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
   14bf8:	000005aa 	andeq	r0, r0, sl, lsr #11
   14bfc:	0006f521 	andeq	pc, r6, r1, lsr #10
   14c00:	051a0100 	ldreq	r0, [sl, #-256]	; 0xffffff00
   14c04:	0000002c 	andeq	r0, r0, ip, lsr #32
   14c08:	0b6c0305 	bleq	1b15824 <__ccfg+0x1af587c>
   14c0c:	56222000 	strtpl	r2, [r2], -r0
   14c10:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   14c14:	00060336 	andeq	r0, r6, r6, lsr r3
   14c18:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
   14c1c:	01000000 	mrseq	r0, (UNDEF: 0)
   14c20:	000a4b9c 	muleq	sl, ip, fp
   14c24:	74702300 	ldrbtvc	r2, [r0], #-768	; 0xfffffd00
   14c28:	2c010072 	stccs	0, cr0, [r1], {114}	; 0x72
   14c2c:	00045620 	andeq	r5, r4, r0, lsr #12
   14c30:	00581700 	subseq	r1, r8, r0, lsl #14
   14c34:	00581100 	subseq	r1, r8, r0, lsl #2
   14c38:	00002400 	andeq	r2, r0, r0, lsl #8
   14c3c:	00220000 	eoreq	r0, r2, r0
   14c40:	09c00000 	stmibeq	r0, {}^	; <UNPREDICTABLE>
   14c44:	69250000 	stmdbvs	r5!, {}	; <UNPREDICTABLE>
   14c48:	08370100 	ldmdaeq	r7!, {r8}
   14c4c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14c50:	00000024 	andeq	r0, r0, r4, lsr #32
   14c54:	00001600 	andeq	r1, r0, r0, lsl #12
   14c58:	0009af00 	andeq	sl, r9, r0, lsl #30
   14c5c:	43652600 	cmnmi	r5, #0, 12
   14c60:	3a010000 	bcc	54c68 <__ccfg+0x34cc0>
   14c64:	00017918 	andeq	r7, r1, r8, lsl r9
   14c68:	00584500 	subseq	r4, r8, r0, lsl #10
   14c6c:	00584300 	subseq	r4, r8, r0, lsl #6
   14c70:	43b12600 			; <UNDEFINED> instruction: 0x43b12600
   14c74:	3a010000 	bcc	54c7c <__ccfg+0x34cd4>
   14c78:	00017922 	andeq	r7, r1, r2, lsr #18
   14c7c:	00585e00 	subseq	r5, r8, r0, lsl #28
   14c80:	00585800 	subseq	r5, r8, r0, lsl #16
   14c84:	00002700 	andeq	r2, r0, r0, lsl #14
   14c88:	0ab40000 	beq	fed14c90 <_estack+0xded0fc90>
   14c8c:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14c90:	00750250 	rsbseq	r0, r5, r0, asr r2
   14c94:	00270000 	eoreq	r0, r7, r0
   14c98:	b4000000 	strlt	r0, [r0], #-0
   14c9c:	2800000a 	stmdacs	r0, {r1, r3}
   14ca0:	75025001 	strvc	r5, [r2, #-1]
   14ca4:	24000000 	strcs	r0, [r0], #-0
   14ca8:	00000000 	andeq	r0, r0, r0
   14cac:	0000000e 	andeq	r0, r0, lr
   14cb0:	00000a02 	andeq	r0, r0, r2, lsl #20
   14cb4:	01007029 	tsteq	r0, r9, lsr #32
   14cb8:	02aa1466 	adceq	r1, sl, #1711276032	; 0x66000000
   14cbc:	588b0000 	stmpl	fp, {}	; <UNPREDICTABLE>
   14cc0:	58870000 	stmpl	r7, {}	; <UNPREDICTABLE>
   14cc4:	71290000 			; <UNDEFINED> instruction: 0x71290000
   14cc8:	18660100 	stmdane	r6!, {r8}^
   14ccc:	000002aa 	andeq	r0, r0, sl, lsr #5
   14cd0:	000058ab 	andeq	r5, r0, fp, lsr #17
   14cd4:	000058a9 	andeq	r5, r0, r9, lsr #17
   14cd8:	00000027 	andeq	r0, r0, r7, lsr #32
   14cdc:	000ab400 	andeq	fp, sl, r0, lsl #8
   14ce0:	50012800 	andpl	r2, r1, r0, lsl #16
   14ce4:	00007502 	andeq	r7, r0, r2, lsl #10
   14ce8:	00002a00 	andeq	r2, r0, r0, lsl #20
   14cec:	0ab40000 	beq	fed14cf4 <_estack+0xded0fcf4>
   14cf0:	0a160000 	beq	594cf8 <__ccfg+0x574d50>
   14cf4:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14cf8:	00750250 	rsbseq	r0, r5, r0, asr r2
   14cfc:	00002a00 	andeq	r2, r0, r0, lsl #20
   14d00:	0ab40000 	beq	fed14d08 <_estack+0xded0fd08>
   14d04:	0a2a0000 	beq	a94d0c <__ccfg+0xa74d64>
   14d08:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14d0c:	00750250 	rsbseq	r0, r5, r0, asr r2
   14d10:	00002b00 	andeq	r2, r0, r0, lsl #22
   14d14:	0a3a0000 	beq	e94d1c <__ccfg+0xe74d74>
   14d18:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14d1c:	00750250 	rsbseq	r0, r5, r0, asr r2
   14d20:	00002700 	andeq	r2, r0, r0, lsl #14
   14d24:	0a4b0000 	beq	12d4d2c <__ccfg+0x12b4d84>
   14d28:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14d2c:	00750250 	rsbseq	r0, r5, r0, asr r2
   14d30:	6d2c0000 	stcvs	0, cr0, [ip, #-0]
   14d34:	01000043 	tsteq	r0, r3, asr #32
   14d38:	00000121 	andeq	r0, r0, r1, lsr #2
   14d3c:	001e0000 	andseq	r0, lr, r0
   14d40:	9c010000 	stcls	0, cr0, [r1], {-0}
   14d44:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
   14d48:	72747023 	rsbsvc	r7, r4, #35	; 0x23
   14d4c:	1e210100 	sufnes	f0, f1, f0
   14d50:	00000456 	andeq	r0, r0, r6, asr r4
   14d54:	000058c4 	andeq	r5, r0, r4, asr #17
   14d58:	000058be 			; <UNDEFINED> instruction: 0x000058be
   14d5c:	0043752d 	subeq	r7, r3, sp, lsr #10
   14d60:	14220100 	strtne	r0, [r2], #-256	; 0xffffff00
   14d64:	00000690 	muleq	r0, r0, r6
   14d68:	000058f6 	strdeq	r5, [r0], -r6
   14d6c:	000058f0 	strdeq	r5, [r0], -r0
   14d70:	0000002a 	andeq	r0, r0, sl, lsr #32
   14d74:	000a4b00 	andeq	r4, sl, r0, lsl #22
   14d78:	000a9d00 	andeq	r9, sl, r0, lsl #26
   14d7c:	50012800 	andpl	r2, r1, r0, lsl #16
   14d80:	00007502 	andeq	r7, r0, r2, lsl #10
   14d84:	00000027 	andeq	r0, r0, r7, lsr #32
   14d88:	000ab400 	andeq	fp, sl, r0, lsl #8
   14d8c:	50012800 	andpl	r2, r1, r0, lsl #16
   14d90:	28007502 	stmdacs	r0, {r1, r8, sl, ip, sp, lr}
   14d94:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
   14d98:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
   14d9c:	000043a9 	andeq	r4, r0, r9, lsr #7
   14da0:	000043a9 	andeq	r4, r0, r9, lsr #7
   14da4:	06012806 	streq	r2, [r1], -r6, lsl #16
   14da8:	000a9200 	andeq	r9, sl, r0, lsl #4
   14dac:	70000400 	andvc	r0, r0, r0, lsl #8
   14db0:	0400004c 	streq	r0, [r0], #-76	; 0xffffffb4
   14db4:	0046da01 	subeq	sp, r6, r1, lsl #20
   14db8:	45340c00 	ldrmi	r0, [r4, #-3072]!	; 0xfffff400
   14dbc:	4e570000 	cdpmi	0, 5, cr0, cr7, cr0, {0}
   14dc0:	41480000 	mrsmi	r0, (UNDEF: 72)
   14dc4:	00540000 	subseq	r0, r4, r0
   14dc8:	8ea10000 	cdphi	0, 10, cr0, cr1, cr0, {0}
   14dcc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   14dd0:	00038e07 	andeq	r8, r3, r7, lsl #28
   14dd4:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
   14dd8:	00746e69 	rsbseq	r6, r4, r9, ror #28
   14ddc:	98070402 	stmdals	r7, {r1, sl}
   14de0:	02000003 	andeq	r0, r0, #3
   14de4:	05e40508 	strbeq	r0, [r4, #1288]!	; 0x508
   14de8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   14dec:	003ed704 	eorseq	sp, lr, r4, lsl #14
   14df0:	47c50400 	strbmi	r0, [r5, r0, lsl #8]
   14df4:	2a020000 	bcs	94dfc <__ccfg+0x74e54>
   14df8:	00003316 	andeq	r3, r0, r6, lsl r3
   14dfc:	4b720400 	blmi	1c95e04 <__ccfg+0x1c75e5c>
   14e00:	2f020000 	svccs	0x00020000
   14e04:	00006015 	andeq	r6, r0, r5, lsl r0
   14e08:	66040500 	strvs	r0, [r4], -r0, lsl #10
   14e0c:	06000000 	streq	r0, [r0], -r0
   14e10:	00000048 	andeq	r0, r0, r8, asr #32
   14e14:	00000075 	andeq	r0, r0, r5, ror r0
   14e18:	00007507 	andeq	r7, r0, r7, lsl #10
   14e1c:	04050000 	streq	r0, [r5], #-0
   14e20:	0000007b 	andeq	r0, r0, fp, ror r0
   14e24:	52d40408 	sbcspl	r0, r4, #8, 8	; 0x8000000
   14e28:	36020000 	strcc	r0, [r2], -r0
   14e2c:	0000880f 	andeq	r8, r0, pc, lsl #16
   14e30:	8e040500 	cfsh32hi	mvfx0, mvfx4, #0
   14e34:	06000000 	streq	r0, [r0], -r0
   14e38:	0000002c 	andeq	r0, r0, ip, lsr #32
   14e3c:	000000a2 	andeq	r0, r0, r2, lsr #1
   14e40:	00007507 	andeq	r7, r0, r7, lsl #10
   14e44:	00750700 	rsbseq	r0, r5, r0, lsl #14
   14e48:	02000000 	andeq	r0, r0, #0
   14e4c:	08d80801 	ldmeq	r8, {r0, fp}^
   14e50:	8c090000 	stchi	0, cr0, [r9], {-0}
   14e54:	0200004d 	andeq	r0, r0, #77	; 0x4d
   14e58:	005412bb 	ldrheq	r1, [r4], #-43	; 0xffffffd5
   14e5c:	07090000 	streq	r0, [r9, -r0]
   14e60:	02000053 	andeq	r0, r0, #83	; 0x53
   14e64:	007c10be 	ldrhteq	r1, [ip], #-14
   14e68:	01020000 	mrseq	r0, (UNDEF: 2)
   14e6c:	0008da06 	andeq	sp, r8, r6, lsl #20
   14e70:	4a920a00 	bmi	fe497678 <_estack+0xde492678>
   14e74:	01070000 	mrseq	r0, (UNDEF: 7)
   14e78:	000000a2 	andeq	r0, r0, r2, lsr #1
   14e7c:	f5061703 			; <UNDEFINED> instruction: 0xf5061703
   14e80:	0b000001 	bleq	14e8c <__exidx_end+0xff60>
   14e84:	00004568 	andeq	r4, r0, r8, ror #10
   14e88:	49910b00 	ldmibmi	r1, {r8, r9, fp}
   14e8c:	0b010000 	bleq	54e94 <__ccfg+0x34eec>
   14e90:	00004eb9 			; <UNDEFINED> instruction: 0x00004eb9
   14e94:	521a0b02 	andspl	r0, sl, #2048	; 0x800
   14e98:	0b030000 	bleq	d4ea0 <__ccfg+0xb4ef8>
   14e9c:	00004dfb 	strdeq	r4, [r0], -fp
   14ea0:	51370b04 	teqpl	r7, r4, lsl #22
   14ea4:	0b050000 	bleq	154eac <__ccfg+0x134f04>
   14ea8:	0000509b 	muleq	r0, fp, r0
   14eac:	45890b06 	strmi	r0, [r9, #2822]	; 0xb06
   14eb0:	0b070000 	bleq	1d4eb8 <__ccfg+0x1b4f10>
   14eb4:	0000514c 	andeq	r5, r0, ip, asr #2
   14eb8:	515a0b08 	cmppl	sl, r8, lsl #22
   14ebc:	0b090000 	bleq	254ec4 <__ccfg+0x234f1c>
   14ec0:	0000520d 	andeq	r5, r0, sp, lsl #4
   14ec4:	4d520b0a 	vldrmi	d16, [r2, #-40]	; 0xffffffd8
   14ec8:	0b0b0000 	bleq	2d4ed0 <__ccfg+0x2b4f28>
   14ecc:	00004806 	andeq	r4, r0, r6, lsl #16
   14ed0:	481a0b0c 	ldmdami	sl, {r2, r3, r8, r9, fp}
   14ed4:	0b0d0000 	bleq	354edc <__ccfg+0x334f34>
   14ed8:	00004ad6 	ldrdeq	r4, [r0], -r6
   14edc:	4aec0b0e 	bmi	ffb17b1c <_estack+0xdfb12b1c>
   14ee0:	0b0f0000 	bleq	3d4ee8 <__ccfg+0x3b4f40>
   14ee4:	000049cb 	andeq	r4, r0, fp, asr #19
   14ee8:	4ddf0b10 	vldrmi	d16, [pc, #64]	; 14f30 <__exidx_end+0x10004>
   14eec:	0b110000 	bleq	454ef4 <__ccfg+0x434f4c>
   14ef0:	00004a55 	andeq	r4, r0, r5, asr sl
   14ef4:	54d20b12 	ldrbpl	r0, [r2], #2834	; 0xb12
   14ef8:	0b130000 	bleq	4d4f00 <__ccfg+0x4b4f58>
   14efc:	000045f2 	strdeq	r4, [r0], -r2
   14f00:	4a790b14 	bmi	1e57b58 <__ccfg+0x1e37bb0>
   14f04:	0b150000 	bleq	554f0c <__ccfg+0x534f64>
   14f08:	00004507 	andeq	r4, r0, r7, lsl #10
   14f0c:	523d0b16 	eorspl	r0, sp, #22528	; 0x5800
   14f10:	0b170000 	bleq	5d4f18 <__ccfg+0x5b4f70>
   14f14:	00005360 	andeq	r5, r0, r0, ror #6
   14f18:	4a9e0b18 	bmi	fe797b80 <_estack+0xde792b80>
   14f1c:	0b190000 	bleq	654f24 <__ccfg+0x634f7c>
   14f20:	00004f2b 	andeq	r4, r0, fp, lsr #30
   14f24:	524b0b1a 	subpl	r0, fp, #26624	; 0x6800
   14f28:	0b1b0000 	bleq	6d4f30 <__ccfg+0x6b4f88>
   14f2c:	00004428 	andeq	r4, r0, r8, lsr #8
   14f30:	52590b1c 	subspl	r0, r9, #28, 22	; 0x7000
   14f34:	0b1d0000 	bleq	754f3c <__ccfg+0x734f94>
   14f38:	00005267 	andeq	r5, r0, r7, ror #4
   14f3c:	43d60b1e 	bicsmi	r0, r6, #30720	; 0x7800
   14f40:	0b1f0000 	bleq	7d4f48 <__ccfg+0x7b4fa0>
   14f44:	00005291 	muleq	r0, r1, r2
   14f48:	4fdc0b20 	svcmi	0x00dc0b20
   14f4c:	0b210000 	bleq	854f54 <__ccfg+0x834fac>
   14f50:	00004db1 			; <UNDEFINED> instruction: 0x00004db1
   14f54:	52300b22 	eorspl	r0, r0, #34816	; 0x8800
   14f58:	0b230000 	bleq	8d4f60 <__ccfg+0x8b4fb8>
   14f5c:	00004cd3 	ldrdeq	r4, [r0], -r3
   14f60:	4bd50b24 	blmi	ff557bf8 <_estack+0xdf552bf8>
   14f64:	0b250000 	bleq	954f6c <__ccfg+0x934fc4>
   14f68:	000048d1 	ldrdeq	r4, [r0], -r1
   14f6c:	4bf30b26 	blmi	ffcd7c0c <_estack+0xdfcd2c0c>
   14f70:	0b270000 	bleq	9d4f78 <__ccfg+0x9b4fd0>
   14f74:	0000496d 	andeq	r4, r0, sp, ror #18
   14f78:	4c030b28 			; <UNDEFINED> instruction: 0x4c030b28
   14f7c:	0b290000 	bleq	a54f84 <__ccfg+0xa34fdc>
   14f80:	00004c13 	andeq	r4, r0, r3, lsl ip
   14f84:	4d380b2a 	vldmdbmi	r8!, {d0-d20}
   14f88:	0b2b0000 	bleq	ad4f90 <__ccfg+0xab4fe8>
   14f8c:	00004b7c 	andeq	r4, r0, ip, ror fp
   14f90:	4fe90b2c 	svcmi	0x00e90b2c
   14f94:	0b2d0000 	bleq	b54f9c <__ccfg+0xb34ff4>
   14f98:	00004912 	andeq	r4, r0, r2, lsl r9
   14f9c:	0e0a002e 	cdpeq	0, 0, cr0, cr10, cr14, {1}
   14fa0:	0700004b 	streq	r0, [r0, -fp, asr #32]
   14fa4:	0000a201 	andeq	sl, r0, r1, lsl #4
   14fa8:	06170400 	ldreq	r0, [r7], -r0, lsl #8
   14fac:	000003d6 	ldrdeq	r0, [r0], -r6
   14fb0:	00483c0b 	subeq	r3, r8, fp, lsl #24
   14fb4:	6f0b0000 	svcvs	0x000b0000
   14fb8:	01000044 	tsteq	r0, r4, asr #32
   14fbc:	00546c0b 	subseq	r6, r4, fp, lsl #24
   14fc0:	dc0b0200 	sfmle	f0, 4, [fp], {-0}
   14fc4:	03000052 	movweq	r0, #82	; 0x52
   14fc8:	00485c0b 	subeq	r5, r8, fp, lsl #24
   14fcc:	540b0400 	strpl	r0, [fp], #-1024	; 0xfffffc00
   14fd0:	05000045 	streq	r0, [r0, #-69]	; 0xffffffbb
   14fd4:	0048ee0b 	subeq	lr, r8, fp, lsl #28
   14fd8:	4c0b0600 	stcmi	6, cr0, [fp], {-0}
   14fdc:	07000048 	streq	r0, [r0, -r8, asr #32]
   14fe0:	0051880b 	subseq	r8, r1, fp, lsl #16
   14fe4:	bc0b0800 	stclt	8, cr0, [fp], {-0}
   14fe8:	09000052 	stmdbeq	r0, {r1, r4, r6}
   14fec:	0050bf0b 	subseq	fp, r0, fp, lsl #30
   14ff0:	a70b0a00 	strge	r0, [fp, -r0, lsl #20]
   14ff4:	0b000045 	bleq	15110 <__exidx_end+0x101e4>
   14ff8:	00488f0b 	subeq	r8, r8, fp, lsl #30
   14ffc:	f00b0c00 			; <UNDEFINED> instruction: 0xf00b0c00
   15000:	0d000044 	stceq	0, cr0, [r0, #-272]	; 0xfffffef0
   15004:	0054a10b 	subseq	sl, r4, fp, lsl #2
   15008:	250b0e00 	strcs	r0, [fp, #-3584]	; 0xfffff200
   1500c:	0f00004d 	svceq	0x0000004d
   15010:	004a200b 	subeq	r2, sl, fp
   15014:	620b1000 	andvs	r1, fp, #0
   15018:	1100004d 	tstne	r0, sp, asr #32
   1501c:	0053a20b 	subseq	sl, r3, fp, lsl #4
   15020:	720b1200 	andvc	r1, fp, #0, 4
   15024:	13000046 	movwne	r0, #70	; 0x46
   15028:	004a330b 	subeq	r3, sl, fp, lsl #6
   1502c:	960b1400 	strls	r1, [fp], -r0, lsl #8
   15030:	1500004c 	strne	r0, [r0, #-76]	; 0xffffffb4
   15034:	0048270b 	subeq	r2, r8, fp, lsl #14
   15038:	e20b1600 	and	r1, fp, #0, 12
   1503c:	1700004c 	strne	r0, [r0, -ip, asr #32]
   15040:	004af80b 	subeq	pc, sl, fp, lsl #16
   15044:	720b1800 	andvc	r1, fp, #0, 16
   15048:	19000045 	stmdbne	r0, {r0, r2, r6}
   1504c:	0053490b 	subseq	r4, r3, fp, lsl #18
   15050:	620b1a00 	andvs	r1, fp, #0, 20
   15054:	1b00004c 	blne	1518c <__exidx_end+0x10260>
   15058:	0049ec0b 	subeq	lr, r9, fp, lsl #24
   1505c:	110b1c00 	tstne	fp, r0, lsl #24
   15060:	1d000044 	stcne	0, cr0, [r0, #-272]	; 0xfffffef0
   15064:	004bad0b 	subeq	sl, fp, fp, lsl #26
   15068:	990b1e00 	stmdbls	fp, {r9, sl, fp, ip}
   1506c:	1f00004b 	svcne	0x0000004b
   15070:	00507c0b 	subseq	r7, r0, fp, lsl #24
   15074:	070b2000 	streq	r2, [fp, -r0]
   15078:	21000051 	qaddcs	r0, r1, r0
   1507c:	0053280b 	subseq	r2, r3, fp, lsl #16
   15080:	1f0b2200 	svcne	0x000b2200
   15084:	23000049 	movwcs	r0, #73	; 0x49
   15088:	004edb0b 	subeq	sp, lr, fp, lsl #22
   1508c:	d40b2400 	strle	r2, [fp], #-1024	; 0xfffffc00
   15090:	25000050 	strcs	r0, [r0, #-80]	; 0xffffffb0
   15094:	004ff80b 	subeq	pc, pc, fp, lsl #16
   15098:	0c0b2600 	stceq	6, cr2, [fp], {-0}
   1509c:	27000050 	smlsdcs	r0, r0, r0, r0
   150a0:	0050200b 	subseq	r2, r0, fp
   150a4:	b00b2800 	andlt	r2, fp, r0, lsl #16
   150a8:	29000047 	stmdbcs	r0, {r0, r1, r2, r6}
   150ac:	00465d0b 	subeq	r5, r6, fp, lsl #26
   150b0:	850b2a00 	strhi	r2, [fp, #-2560]	; 0xfffff600
   150b4:	2b000046 	blcs	151d4 <__exidx_end+0x102a8>
   150b8:	0053e10b 	subseq	lr, r3, fp, lsl #2
   150bc:	b70b2c00 	strlt	r2, [fp, -r0, lsl #24]
   150c0:	2d000046 	stccs	0, cr0, [r0, #-280]	; 0xfffffee8
   150c4:	0051d10b 	subseq	sp, r1, fp, lsl #2
   150c8:	e50b2e00 	str	r2, [fp, #-3584]	; 0xfffff200
   150cc:	2f000051 	svccs	0x00000051
   150d0:	0051f90b 	subseq	pc, r1, fp, lsl #18
   150d4:	a10b3000 	mrsge	r3, (UNDEF: 11)
   150d8:	31000048 	tstcc	r0, r8, asr #32
   150dc:	00487b0b 	subeq	r7, r8, fp, lsl #22
   150e0:	c10b3200 	mrsgt	r3, R11_fiq
   150e4:	3300004b 	movwcc	r0, #75	; 0x4b
   150e8:	004d750b 	subeq	r7, sp, fp, lsl #10
   150ec:	f50b3400 			; <UNDEFINED> instruction: 0xf50b3400
   150f0:	35000053 	strcc	r0, [r0, #-83]	; 0xffffffad
   150f4:	0043b90b 	subeq	fp, r3, fp, lsl #18
   150f8:	a10b3600 	tstge	fp, r0, lsl #12
   150fc:	37000049 	strcc	r0, [r0, -r9, asr #32]
   15100:	0049b60b 	subeq	fp, r9, fp, lsl #12
   15104:	230b3800 	movwcs	r3, #47104	; 0xb800
   15108:	3900004c 	stmdbcc	r0, {r2, r3, r6}
   1510c:	004c4d0b 	subeq	r4, ip, fp, lsl #26
   15110:	1e0b3a00 	vmlane.f32	s6, s22, s0
   15114:	3b000054 	blcc	1526c <__exidx_end+0x10340>
   15118:	004ec60b 	subeq	ip, lr, fp, lsl #12
   1511c:	440b3c00 	strmi	r3, [fp], #-3072	; 0xfffff400
   15120:	3d000049 	stccc	0, cr0, [r0, #-292]	; 0xfffffedc
   15124:	0044810b 	subeq	r8, r4, fp, lsl #2
   15128:	360b3e00 	strcc	r3, [fp], -r0, lsl #28
   1512c:	3f000044 	svccc	0x00000044
   15130:	004dc10b 	subeq	ip, sp, fp, lsl #2
   15134:	470b4000 	strmi	r4, [fp, -r0]
   15138:	4100004f 	tstmi	r0, pc, asr #32
   1513c:	00505e0b 	subseq	r5, r0, fp, lsl #28
   15140:	380b4200 	stmdacc	fp, {r9, lr}
   15144:	4300004c 	movwmi	r0, #76	; 0x4c
   15148:	0054570b 	subseq	r5, r4, fp, lsl #14
   1514c:	f10b4400 			; <UNDEFINED> instruction: 0xf10b4400
   15150:	4500004e 	strmi	r0, [r0, #-78]	; 0xffffffb2
   15154:	0046a10b 	subeq	sl, r6, fp, lsl #2
   15158:	020b4600 	andeq	r4, fp, #0, 12
   1515c:	4700004a 	strmi	r0, [r0, -sl, asr #32]
   15160:	004b460b 	subeq	r4, fp, fp, lsl #12
   15164:	f50b4800 			; <UNDEFINED> instruction: 0xf50b4800
   15168:	49000043 	stmdbmi	r0, {r0, r1, r6}
   1516c:	0045170b 	subeq	r1, r5, fp, lsl #14
   15170:	580b4a00 	stmdapl	fp, {r9, fp, lr}
   15174:	4b000049 	blmi	152a0 <__exidx_end+0x10374>
   15178:	004c740b 	subeq	r7, ip, fp, lsl #8
   1517c:	02004c00 	andeq	r4, r0, #0, 24
   15180:	09a60702 	stmibeq	r6!, {r1, r8, r9, sl}
   15184:	f30c0000 	vhadd.u8	d0, d12, d0
   15188:	e8000003 	stmda	r0, {r0, r1}
   1518c:	0d000003 	stceq	0, cr0, [r0, #-12]
   15190:	03dd0e00 	bicseq	r0, sp, #0, 28
   15194:	04050000 	streq	r0, [r5], #-0
   15198:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1519c:	0003ed0e 	andeq	lr, r3, lr, lsl #26
   151a0:	08010200 	stmdaeq	r1, {r9}
   151a4:	000008e1 	andeq	r0, r0, r1, ror #17
   151a8:	0003f80e 	andeq	pc, r3, lr, lsl #16
   151ac:	45e30f00 	strbmi	r0, [r3, #3840]!	; 0xf00
   151b0:	4c050000 	stcmi	0, cr0, [r5], {-0}
   151b4:	03e81a01 	mvneq	r1, #4096	; 0x1000
   151b8:	dc0f0000 	stcle	0, cr0, [pc], {-0}
   151bc:	05000049 	streq	r0, [r0, #-73]	; 0xffffffb7
   151c0:	e81a0182 	ldmda	sl, {r1, r7, r8}
   151c4:	0c000003 	stceq	0, cr0, [r0], {3}
   151c8:	000003f8 	strdeq	r0, [r0], -r8
   151cc:	00000429 	andeq	r0, r0, r9, lsr #8
   151d0:	e509000d 	str	r0, [r9, #-13]
   151d4:	0600004b 	streq	r0, [r0], -fp, asr #32
   151d8:	041e0d2d 	ldreq	r0, [lr], #-3373	; 0xfffff2d3
   151dc:	a1090000 	mrsge	r0, (UNDEF: 9)
   151e0:	06000052 			; <UNDEFINED> instruction: 0x06000052
   151e4:	01f51c38 	mvnseq	r1, r8, lsr ip
   151e8:	b50a0000 	strlt	r0, [sl, #-0]
   151ec:	07000048 	streq	r0, [r0, -r8, asr #32]
   151f0:	0000a201 	andeq	sl, r0, r1, lsl #4
   151f4:	0e3a0600 	cfmsuba32eq	mvax0, mvax0, mvfx10, mvfx0
   151f8:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
   151fc:	00440a0b 	subeq	r0, r4, fp, lsl #20
   15200:	e50b0000 	str	r0, [fp, #-0]
   15204:	0100004a 	tsteq	r0, sl, asr #32
   15208:	0053b40b 	subseq	fp, r3, fp, lsl #8
   1520c:	770b0200 	strvc	r0, [fp, -r0, lsl #4]
   15210:	03000053 	movweq	r0, #83	; 0x53
   15214:	004e1e0b 	subeq	r1, lr, fp, lsl #28
   15218:	450b0400 	strmi	r0, [fp, #-1024]	; 0xfffffc00
   1521c:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   15220:	00462e0b 	subeq	r2, r6, fp, lsl #28
   15224:	080b0600 	stmdaeq	fp, {r9, sl}
   15228:	07000046 	streq	r0, [r0, -r6, asr #32]
   1522c:	0048130b 	subeq	r1, r8, fp, lsl #6
   15230:	f80b0800 			; <UNDEFINED> instruction: 0xf80b0800
   15234:	0900004c 	stmdbeq	r0, {r2, r3, r6}
   15238:	0046350b 	subeq	r3, r6, fp, lsl #10
   1523c:	ff0b0a00 			; <UNDEFINED> instruction: 0xff0b0a00
   15240:	0b00004c 	bleq	15378 <__exidx_end+0x1044c>
   15244:	00469a0b 	subeq	r9, r6, fp, lsl #20
   15248:	1f0b0c00 	svcne	0x000b0c00
   1524c:	0d000046 	stceq	0, cr0, [r0, #-280]	; 0xfffffee8
   15250:	00519c0b 	subseq	r9, r1, fp, lsl #24
   15254:	650b0e00 	strvs	r0, [fp, #-3584]	; 0xfffff200
   15258:	0f00004f 	svceq	0x0000004f
   1525c:	50940400 	addspl	r0, r4, r0, lsl #8
   15260:	3f060000 	svccc	0x00060000
   15264:	00044101 	andeq	r4, r4, r1, lsl #2
   15268:	51280900 			; <UNDEFINED> instruction: 0x51280900
   1526c:	41060000 	mrsmi	r0, (UNDEF: 6)
   15270:	0004b40f 	andeq	fp, r4, pc, lsl #8
   15274:	51b00900 	lslspl	r0, r0, #18
   15278:	4a060000 	bmi	195280 <__ccfg+0x1752d8>
   1527c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15280:	45c70900 	strbmi	r0, [r7, #2304]	; 0x900
   15284:	4b060000 	blmi	19528c <__ccfg+0x1752e4>
   15288:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1528c:	52751000 	rsbspl	r1, r5, #0
   15290:	c1090000 	mrsgt	r0, (UNDEF: 9)
   15294:	06000051 			; <UNDEFINED> instruction: 0x06000051
   15298:	04f5144c 	ldrbteq	r1, [r5], #1100	; 0x44c
   1529c:	04050000 	streq	r0, [r5], #-0
   152a0:	000004e4 	andeq	r0, r0, r4, ror #9
   152a4:	4aaf0911 	bmi	febd76f0 <_estack+0xdebd26f0>
   152a8:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
   152ac:	0005080f 	andeq	r0, r5, pc, lsl #16
   152b0:	fb040500 	blx	1166ba <__ccfg+0xf6712>
   152b4:	12000004 	andne	r0, r0, #4
   152b8:	000050aa 	andeq	r5, r0, sl, lsr #1
   152bc:	004e0b09 	subeq	r0, lr, r9, lsl #22
   152c0:	0d520600 	ldcleq	6, cr0, [r2, #-0]
   152c4:	0000051f 	andeq	r0, r0, pc, lsl r5
   152c8:	050e0405 	streq	r0, [lr, #-1029]	; 0xfffffbfb
   152cc:	f9130000 			; <UNDEFINED> instruction: 0xf9130000
   152d0:	34000047 	strcc	r0, [r0], #-71	; 0xffffffb9
   152d4:	15016706 	strne	r6, [r1, #-1798]	; 0xfffff8fa
   152d8:	00000550 	andeq	r0, r0, r0, asr r5
   152dc:	004bee14 	subeq	lr, fp, r4, lsl lr
   152e0:	01690600 	cmneq	r9, r0, lsl #12
   152e4:	0003ed0f 	andeq	lr, r3, pc, lsl #26
   152e8:	dd140000 	ldcle	0, cr0, [r4, #-0]
   152ec:	06000047 	streq	r0, [r0], -r7, asr #32
   152f0:	5514016a 	ldrpl	r0, [r4, #-362]	; 0xfffffe96
   152f4:	04000005 	streq	r0, [r0], #-5
   152f8:	05250e00 	streq	r0, [r5, #-3584]!	; 0xfffff200
   152fc:	c80c0000 	stmdagt	ip, {}	; <UNPREDICTABLE>
   15300:	65000000 	strvs	r0, [r0, #-0]
   15304:	15000005 	strne	r0, [r0, #-5]
   15308:	00000033 	andeq	r0, r0, r3, lsr r0
   1530c:	500c002d 	andpl	r0, ip, sp, lsr #32
   15310:	70000005 	andvc	r0, r0, r5
   15314:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   15318:	05650e00 	strbeq	r0, [r5, #-3584]!	; 0xfffff200
   1531c:	1d0f0000 	stcne	0, cr0, [pc, #-0]	; 15324 <__exidx_end+0x103f8>
   15320:	0600004b 	streq	r0, [r0], -fp, asr #32
   15324:	7003016b 	andvc	r0, r3, fp, ror #2
   15328:	0f000005 	svceq	0x00000005
   1532c:	00004d45 	andeq	r4, r0, r5, asr #26
   15330:	0c016e06 	stceq	14, cr6, [r1], {6}
   15334:	0000002c 	andeq	r0, r0, ip, lsr #32
   15338:	0050e816 	subseq	lr, r0, r6, lsl r8
   1533c:	a2010700 	andge	r0, r1, #0, 14
   15340:	06000000 	streq	r0, [r0], -r0
   15344:	39060181 	stmdbcc	r6, {r0, r7, r8}
   15348:	0b000006 	bleq	15368 <__exidx_end+0x1043c>
   1534c:	000044a8 	andeq	r4, r0, r8, lsr #9
   15350:	44b40b00 	ldrtmi	r0, [r4], #2816	; 0xb00
   15354:	0b020000 	bleq	9535c <__ccfg+0x753b4>
   15358:	000044c0 	andeq	r4, r0, r0, asr #9
   1535c:	48e10b03 	stmiami	r1!, {r0, r1, r8, r9, fp}^
   15360:	0b030000 	bleq	d5368 <__ccfg+0xb53c0>
   15364:	000044cc 	andeq	r4, r0, ip, asr #9
   15368:	4a480b04 	bmi	1217f80 <__ccfg+0x11f7fd8>
   1536c:	0b040000 	bleq	115374 <__ccfg+0xf53cc>
   15370:	00004b2e 	andeq	r4, r0, lr, lsr #22
   15374:	4a840b05 	bmi	fe117f90 <_estack+0xde112f90>
   15378:	0b050000 	bleq	155380 <__ccfg+0x1353d8>
   1537c:	000045b8 			; <UNDEFINED> instruction: 0x000045b8
   15380:	44d80b05 	ldrbmi	r0, [r8], #2821	; 0xb05
   15384:	0b060000 	bleq	19538c <__ccfg+0x1753e4>
   15388:	00004cac 	andeq	r4, r0, ip, lsr #25
   1538c:	47cf0b06 	strbmi	r0, [pc, r6, lsl #22]
   15390:	0b060000 	bleq	195398 <__ccfg+0x1753f0>
   15394:	00004cb9 			; <UNDEFINED> instruction: 0x00004cb9
   15398:	51680b06 	cmnpl	r8, r6, lsl #22
   1539c:	0b060000 	bleq	1953a4 <__ccfg+0x1753fc>
   153a0:	00004cc6 	andeq	r4, r0, r6, asr #25
   153a4:	4d060b06 	vstrmi	d0, [r6, #-24]	; 0xffffffe8
   153a8:	0b060000 	bleq	1953b0 <__ccfg+0x175408>
   153ac:	000044e4 	andeq	r4, r0, r4, ror #9
   153b0:	4dee0b07 			; <UNDEFINED> instruction: 0x4dee0b07
   153b4:	0b070000 	bleq	1d53bc <__ccfg+0x1b5414>
   153b8:	00004e3b 	andeq	r4, r0, fp, lsr lr
   153bc:	51a30b07 			; <UNDEFINED> instruction: 0x51a30b07
   153c0:	0b070000 	bleq	1d53c8 <__ccfg+0x1b5420>
   153c4:	000046cc 	andeq	r4, r0, ip, asr #13
   153c8:	4f1e0b07 	svcmi	0x001e0b07
   153cc:	0b080000 	bleq	2153d4 <__ccfg+0x1f542c>
   153d0:	0000445d 	andeq	r4, r0, sp, asr r4
   153d4:	51760b08 	cmnpl	r6, r8, lsl #22
   153d8:	0b080000 	bleq	2153e0 <__ccfg+0x1f5438>
   153dc:	00004f3a 	andeq	r4, r0, sl, lsr pc
   153e0:	ce0f0008 	cdpgt	0, 0, cr0, cr15, cr8, {0}
   153e4:	06000053 			; <UNDEFINED> instruction: 0x06000053
   153e8:	8f1f019f 	svchi	0x001f019f
   153ec:	0f000005 	svceq	0x00000005
   153f0:	00004f6c 	andeq	r4, r0, ip, ror #30
   153f4:	0c01a206 	sfmeq	f2, 1, [r1], {6}
   153f8:	0000002c 	andeq	r0, r0, ip, lsr #32
   153fc:	004b3b0f 	subeq	r3, fp, pc, lsl #22
   15400:	01a50600 			; <UNDEFINED> instruction: 0x01a50600
   15404:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15408:	54b30f00 	ldrtpl	r0, [r3], #3840	; 0xf00
   1540c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
   15410:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15414:	d70f0000 	strle	r0, [pc, -r0]
   15418:	06000045 	streq	r0, [r0], -r5, asr #32
   1541c:	2c0c01ab 	stfcss	f0, [ip], {171}	; 0xab
   15420:	0f000000 	svceq	0x00000000
   15424:	00004f76 	andeq	r4, r0, r6, ror pc
   15428:	0c01ae06 	stceq	14, cr10, [r1], {6}
   1542c:	0000002c 	andeq	r0, r0, ip, lsr #32
   15430:	004e250f 	subeq	r2, lr, pc, lsl #10
   15434:	01b10600 			; <UNDEFINED> instruction: 0x01b10600
   15438:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1543c:	4e300f00 	cdpmi	15, 3, cr0, cr0, cr0, {0}
   15440:	b4060000 	strlt	r0, [r6], #-0
   15444:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15448:	800f0000 	andhi	r0, pc, r0
   1544c:	0600004f 	streq	r0, [r0], -pc, asr #32
   15450:	2c0c01b7 	stfcss	f0, [ip], {183}	; 0xb7
   15454:	0f000000 	svceq	0x00000000
   15458:	00004c88 	andeq	r4, r0, r8, lsl #25
   1545c:	0c01ba06 			; <UNDEFINED> instruction: 0x0c01ba06
   15460:	0000002c 	andeq	r0, r0, ip, lsr #32
   15464:	0054120f 	subseq	r1, r4, pc, lsl #4
   15468:	01bd0600 			; <UNDEFINED> instruction: 0x01bd0600
   1546c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15470:	4f8a0f00 	svcmi	0x008a0f00
   15474:	c0060000 	andgt	r0, r6, r0
   15478:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1547c:	ea0f0000 	b	3d5484 <__ccfg+0x3b54dc>
   15480:	06000054 			; <UNDEFINED> instruction: 0x06000054
   15484:	2c0c01c3 	stfcss	f0, [ip], {195}	; 0xc3
   15488:	0f000000 	svceq	0x00000000
   1548c:	0000537e 	andeq	r5, r0, lr, ror r3
   15490:	0c01c606 	stceq	6, cr12, [r1], {6}
   15494:	0000002c 	andeq	r0, r0, ip, lsr #32
   15498:	00538a0f 	subseq	r8, r3, pc, lsl #20
   1549c:	01c90600 	biceq	r0, r9, r0, lsl #12
   154a0:	00002c0c 	andeq	r2, r0, ip, lsl #24
   154a4:	53960f00 	orrspl	r0, r6, #0, 30
   154a8:	cc060000 	stcgt	0, cr0, [r6], {-0}
   154ac:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   154b0:	bb0f0000 	bllt	3d54b8 <__ccfg+0x3b5510>
   154b4:	06000053 			; <UNDEFINED> instruction: 0x06000053
   154b8:	2c0c01d0 	stfcss	f0, [ip], {208}	; 0xd0
   154bc:	0f000000 	svceq	0x00000000
   154c0:	000054dd 	ldrdeq	r5, [r0], -sp
   154c4:	0c01d306 	stceq	3, cr13, [r1], {6}
   154c8:	0000002c 	andeq	r0, r0, ip, lsr #32
   154cc:	00463c0f 	subeq	r3, r6, pc, lsl #24
   154d0:	01d60600 	bicseq	r0, r6, r0, lsl #12
   154d4:	00002c0c 	andeq	r2, r0, ip, lsl #24
   154d8:	43e50f00 	mvnmi	r0, #0, 30
   154dc:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
   154e0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   154e4:	010f0000 	mrseq	r0, CPSR
   154e8:	06000049 	streq	r0, [r0], -r9, asr #32
   154ec:	2c0c01dc 	stfcss	f0, [ip], {220}	; 0xdc
   154f0:	0f000000 	svceq	0x00000000
   154f4:	0000460f 	andeq	r4, r0, pc, lsl #12
   154f8:	0c01df06 	stceq	15, cr13, [r1], {6}
   154fc:	0000002c 	andeq	r0, r0, ip, lsr #32
   15500:	004f9b0f 	subeq	r9, pc, pc, lsl #22
   15504:	01e20600 	mvneq	r0, r0, lsl #12
   15508:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1550c:	4b640f00 	blmi	1919114 <__ccfg+0x18f916c>
   15510:	e5060000 	str	r0, [r6, #-0]
   15514:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15518:	9e0f0000 	cdpls	0, 0, cr0, cr15, cr0, {0}
   1551c:	0600004d 	streq	r0, [r0], -sp, asr #32
   15520:	2c0c01e8 	stfcss	f0, [ip], {232}	; 0xe8
   15524:	0f000000 	svceq	0x00000000
   15528:	000052aa 	andeq	r5, r0, sl, lsr #5
   1552c:	0c01ef06 	stceq	15, cr14, [r1], {6}
   15530:	0000002c 	andeq	r0, r0, ip, lsr #32
   15534:	0054810f 	subseq	r8, r4, pc, lsl #2
   15538:	01f20600 	mvnseq	r0, r0, lsl #12
   1553c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15540:	54910f00 	ldrpl	r0, [r1], #3840	; 0xf00
   15544:	f5060000 			; <UNDEFINED> instruction: 0xf5060000
   15548:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1554c:	e60f0000 	str	r0, [pc], -r0
   15550:	06000047 	streq	r0, [r0], -r7, asr #32
   15554:	2c0c01f8 	stfcss	f0, [ip], {248}	; 0xf8
   15558:	0f000000 	svceq	0x00000000
   1555c:	000052f2 	strdeq	r5, [r0], -r2
   15560:	0c01fb06 			; <UNDEFINED> instruction: 0x0c01fb06
   15564:	0000002c 	andeq	r0, r0, ip, lsr #32
   15568:	004f060f 	subeq	r0, pc, pc, lsl #12
   1556c:	01fe0600 	mvnseq	r0, r0, lsl #12
   15570:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15574:	497a0f00 	ldmdbmi	sl!, {r8, r9, sl, fp}^
   15578:	02060000 	andeq	r0, r6, #0
   1557c:	002c0c02 	eoreq	r0, ip, r2, lsl #24
   15580:	fa0f0000 	blx	3d5588 <__ccfg+0x3b55e0>
   15584:	06000050 			; <UNDEFINED> instruction: 0x06000050
   15588:	2c0c020a 	sfmcs	f0, 4, [ip], {10}
   1558c:	0f000000 	svceq	0x00000000
   15590:	0000486d 	andeq	r4, r0, sp, ror #16
   15594:	0c020d06 	stceq	13, cr0, [r2], {6}
   15598:	0000002c 	andeq	r0, r0, ip, lsr #32
   1559c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   155a0:	0007fe00 	andeq	pc, r7, r0, lsl #28
   155a4:	0f000d00 	svceq	0x00000d00
   155a8:	00004a64 	andeq	r4, r0, r4, ror #20
   155ac:	0c03fb06 			; <UNDEFINED> instruction: 0x0c03fb06
   155b0:	000007f3 	strdeq	r0, [r0], -r3
   155b4:	0004f50c 	andeq	pc, r4, ip, lsl #10
   155b8:	00081b00 	andeq	r1, r8, r0, lsl #22
   155bc:	00331500 	eorseq	r1, r3, r0, lsl #10
   155c0:	000d0000 	andeq	r0, sp, r0
   155c4:	004fc70f 	subeq	ip, pc, pc, lsl #14
   155c8:	05840600 	streq	r0, [r4, #1536]	; 0x600
   155cc:	00080b14 	andeq	r0, r8, r4, lsl fp
   155d0:	4b261600 	blmi	99add8 <__ccfg+0x97ae30>
   155d4:	01070000 	mrseq	r0, (UNDEF: 7)
   155d8:	000000a2 	andeq	r0, r0, r2, lsr #1
   155dc:	06058b06 	streq	r8, [r5], -r6, lsl #22
   155e0:	00000866 	andeq	r0, r0, r6, ror #16
   155e4:	0048c30b 	subeq	ip, r8, fp, lsl #6
   155e8:	130b0000 	movwne	r0, #45056	; 0xb000
   155ec:	0100004d 	tsteq	r0, sp, asr #32
   155f0:	0044930b 	subeq	r9, r4, fp, lsl #6
   155f4:	430b0200 	movwmi	r0, #45568	; 0xb200
   155f8:	03000054 	movweq	r0, #84	; 0x54
   155fc:	0050410b 	subseq	r4, r0, fp, lsl #2
   15600:	340b0400 	strcc	r0, [fp], #-1024	; 0xfffffc00
   15604:	05000050 	streq	r0, [r0, #-80]	; 0xffffffb0
   15608:	0045970b 	subeq	r9, r5, fp, lsl #14
   1560c:	0f000600 	svceq	0x00000600
   15610:	00005433 	andeq	r5, r0, r3, lsr r4
   15614:	15059806 	strne	r9, [r5, #-2054]	; 0xfffff7fa
   15618:	00000828 	andeq	r0, r0, r8, lsr #16
   1561c:	0053170f 	subseq	r1, r3, pc, lsl #14
   15620:	07990600 	ldreq	r0, [r9, r0, lsl #12]
   15624:	00003311 	andeq	r3, r0, r1, lsl r3
   15628:	4fb40f00 	svcmi	0x00b40f00
   1562c:	ae060000 	cdpge	0, 0, cr0, cr6, cr0, {0}
   15630:	002c0c07 	eoreq	r0, ip, r7, lsl #24
   15634:	89040000 	stmdbhi	r4, {}	; <UNPREDICTABLE>
   15638:	07000052 	smlsdeq	r0, r2, r0, r0
   1563c:	00a2167b 	adceq	r1, r2, fp, ror r6
   15640:	8d0e0000 	stchi	0, cr0, [lr, #-0]
   15644:	02000008 	andeq	r0, r0, #8
   15648:	079f0502 	ldreq	r0, [pc, r2, lsl #10]
   1564c:	2d040000 	stccs	0, cr0, [r4, #-0]
   15650:	07000045 	streq	r0, [r0, -r5, asr #32]
   15654:	002c0f80 	eoreq	r0, ip, r0, lsl #31
   15658:	2c040000 	stccs	0, cr0, [r4], {-0}
   1565c:	07000045 	streq	r0, [r0, -r5, asr #32]
   15660:	00331681 	eorseq	r1, r3, r1, lsl #13
   15664:	94040000 	strls	r0, [r4], #-0
   15668:	0700004f 	streq	r0, [r0, -pc, asr #32]
   1566c:	003a0f84 	eorseq	r0, sl, r4, lsl #31
   15670:	04020000 	streq	r0, [r2], #-0
   15674:	00465704 	subeq	r5, r6, r4, lsl #14
   15678:	03080200 	movweq	r0, #33280	; 0x8200
   1567c:	0000464f 	andeq	r4, r0, pc, asr #12
   15680:	dc040802 	stcle	8, cr0, [r4], {2}
   15684:	0200003e 	andeq	r0, r0, #62	; 0x3e
   15688:	504f0310 	subpl	r0, pc, r0, lsl r3	; <UNPREDICTABLE>
   1568c:	ab130000 	blge	4d5694 <__ccfg+0x4b56ec>
   15690:	0800004f 	stmdaeq	r0, {r0, r1, r2, r3, r6}
   15694:	0a01ed07 	beq	90ab8 <__ccfg+0x70b10>
   15698:	00000910 	andeq	r0, r0, r0, lsl r9
   1569c:	776f6c17 			; <UNDEFINED> instruction: 0x776f6c17
   156a0:	01ed0700 	mvneq	r0, r0, lsl #14
   156a4:	0008a51a 	andeq	sl, r8, sl, lsl r5
   156a8:	02140000 	andseq	r0, r4, #0
   156ac:	07000045 	streq	r0, [r0, -r5, asr #32]
   156b0:	a51f01ed 	ldrge	r0, [pc, #-493]	; 154cb <__exidx_end+0x1059f>
   156b4:	04000008 	streq	r0, [r0], #-8
   156b8:	07081800 	streq	r1, [r8, -r0, lsl #16]
   156bc:	320901f4 	andcc	r0, r9, #244, 2	; 0x3d
   156c0:	19000009 	stmdbne	r0, {r0, r3}
   156c4:	f6070073 			; <UNDEFINED> instruction: 0xf6070073
   156c8:	08e51301 	stmiaeq	r5!, {r0, r8, r9, ip}^
   156cc:	6c190000 	ldcvs	0, cr0, [r9], {-0}
   156d0:	f707006c 			; <UNDEFINED> instruction: 0xf707006c
   156d4:	08bd0a01 	popeq	{r0, r9, fp}
   156d8:	1a000000 	bne	156e0 <__exidx_end+0x107b4>
   156dc:	00004626 	andeq	r4, r0, r6, lsr #12
   156e0:	0301f807 	movweq	pc, #6151	; 0x1807	; <UNPREDICTABLE>
   156e4:	00000910 	andeq	r0, r0, r0, lsl r9
   156e8:	0009320e 	andeq	r3, r9, lr, lsl #4
   156ec:	08990c00 	ldmeq	r9, {sl, fp}
   156f0:	09540000 	ldmdbeq	r4, {}^	; <UNPREDICTABLE>
   156f4:	33150000 	tstcc	r5, #0
   156f8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   156fc:	09440e00 	stmdbeq	r4, {r9, sl, fp}^
   15700:	480f0000 	stmdami	pc, {}	; <UNPREDICTABLE>
   15704:	0700004e 	streq	r0, [r0, -lr, asr #32]
   15708:	541601fc 	ldrpl	r0, [r6], #-508	; 0xfffffe04
   1570c:	0f000009 	svceq	0x00000009
   15710:	000045fe 	strdeq	r4, [r0], -lr
   15714:	16020207 	strne	r0, [r2], -r7, lsl #4
   15718:	00000954 	andeq	r0, r0, r4, asr r9
   1571c:	0044541b 	subeq	r5, r4, fp, lsl r4
   15720:	02240100 	eoreq	r0, r4, #0, 2
   15724:	0008bd01 	andeq	fp, r8, r1, lsl #26
   15728:	00414800 	subeq	r4, r1, r0, lsl #16
   1572c:	00005400 	andeq	r5, r0, r0, lsl #8
   15730:	1c9c0100 	ldfnes	f0, [ip], {0}
   15734:	24010075 	strcs	r0, [r1], #-117	; 0xffffff8b
   15738:	08bd1202 	popeq	{r1, r9, ip}
   1573c:	59260000 	stmdbpl	r6!, {}	; <UNPREDICTABLE>
   15740:	59220000 	stmdbpl	r2!, {}	; <UNPREDICTABLE>
   15744:	761c0000 	ldrvc	r0, [ip], -r0
   15748:	02240100 	eoreq	r0, r4, #0, 2
   1574c:	0008bd1c 	andeq	fp, r8, ip, lsl sp
   15750:	00595200 	subseq	r5, r9, r0, lsl #4
   15754:	00594e00 	subseq	r4, r9, r0, lsl #28
   15758:	75751d00 	ldrbvc	r1, [r5, #-3328]!	; 0xfffff300
   1575c:	02260100 	eoreq	r0, r6, #0, 2
   15760:	00093f11 	andeq	r3, r9, r1, lsl pc
   15764:	76761d00 	ldrbtvc	r1, [r6], -r0, lsl #26
   15768:	02270100 	eoreq	r0, r7, #0, 2
   1576c:	00093f11 	andeq	r3, r9, r1, lsl pc
   15770:	00771d00 	rsbseq	r1, r7, r0, lsl #26
   15774:	0b022801 	bleq	9f780 <__ccfg+0x7f7d8>
   15778:	00000932 	andeq	r0, r0, r2, lsr r9
   1577c:	0012981e 	andseq	r9, r2, lr, lsl r8
   15780:	5f5f1d00 	svcpl	0x005f1d00
   15784:	28010077 	stmdacs	r1, {r0, r1, r2, r4, r5, r6}
   15788:	09321602 	ldmdbeq	r2!, {r1, r9, sl, ip}
   1578c:	981e0000 	ldmdals	lr, {}	; <UNPREDICTABLE>
   15790:	1f000012 	svcne	0x00000012
   15794:	000054be 			; <UNDEFINED> instruction: 0x000054be
   15798:	16022801 	strne	r2, [r2], -r1, lsl #16
   1579c:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   157a0:	0000597c 	andeq	r5, r0, ip, ror r9
   157a4:	0000597a 	andeq	r5, r0, sl, ror r9
   157a8:	0054c31f 	subseq	ip, r4, pc, lsl r3
   157ac:	02280100 	eoreq	r0, r8, #0, 2
   157b0:	0008b116 	andeq	fp, r8, r6, lsl r1
   157b4:	00599500 	subseq	r9, r9, r0, lsl #10
   157b8:	00598f00 	subseq	r8, r9, r0, lsl #30
   157bc:	54c81f00 	strbpl	r1, [r8], #3840	; 0xf00
   157c0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   157c4:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   157c8:	59c70000 	stmibpl	r7, {}^	; <UNPREDICTABLE>
   157cc:	59c30000 	stmibpl	r3, {}^	; <UNPREDICTABLE>
   157d0:	cd1f0000 	ldcgt	0, cr0, [pc, #-0]	; 157d8 <__exidx_end+0x108ac>
   157d4:	01000054 	qaddeq	r0, r4, r0
   157d8:	b1160228 	tstlt	r6, r8, lsr #4
   157dc:	f2000008 	vhadd.s8	d0, d0, d8
   157e0:	f0000059 			; <UNDEFINED> instruction: 0xf0000059
   157e4:	1f000059 	svcne	0x00000059
   157e8:	000052ed 	andeq	r5, r0, sp, ror #5
   157ec:	16022801 	strne	r2, [r2], -r1, lsl #16
   157f0:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   157f4:	00005a09 	andeq	r5, r0, r9, lsl #20
   157f8:	00005a05 	andeq	r5, r0, r5, lsl #20
   157fc:	0053dc1f 	subseq	sp, r3, pc, lsl ip
   15800:	02280100 	eoreq	r0, r8, #0, 2
   15804:	0008b116 	andeq	fp, r8, r6, lsl r1
   15808:	005a3100 	subseq	r3, sl, r0, lsl #2
   1580c:	005a2d00 	subseq	r2, sl, r0, lsl #26
   15810:	52cf1f00 	sbcpl	r1, pc, #0, 30
   15814:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   15818:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   1581c:	5a590000 	bpl	1655824 <__ccfg+0x163587c>
   15820:	5a550000 	bpl	1555828 <__ccfg+0x1535880>
   15824:	c91f0000 	ldmdbgt	pc, {}	; <UNPREDICTABLE>
   15828:	01000053 	qaddeq	r0, r3, r0
   1582c:	b1160228 	tstlt	r6, r8, lsr #4
   15830:	7f000008 	svcvc	0x00000008
   15834:	7b00005a 	blvc	159a4 <__exidx_end+0x10a78>
   15838:	0000005a 	andeq	r0, r0, sl, asr r0
   1583c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   15840:	0400000a 	streq	r0, [r0], #-10
   15844:	004e1300 	subeq	r1, lr, r0, lsl #6
   15848:	56010400 	strpl	r0, [r1], -r0, lsl #8
   1584c:	0c000055 	stceq	0, cr0, [r0], {85}	; 0x55
   15850:	000055e8 	andeq	r5, r0, r8, ror #11
   15854:	000054f6 	strdeq	r5, [r0], -r6
   15858:	0000419c 	muleq	r0, ip, r1
   1585c:	00000010 	andeq	r0, r0, r0, lsl r0
   15860:	00009040 	andeq	r9, r0, r0, asr #32
   15864:	da060102 	ble	195c74 <__ccfg+0x175ccc>
   15868:	02000008 	andeq	r0, r0, #8
   1586c:	08d80801 	ldmeq	r8, {r0, fp}^
   15870:	02020000 	andeq	r0, r2, #0
   15874:	00079f05 	andeq	r9, r7, r5, lsl #30
   15878:	07020200 	streq	r0, [r2, -r0, lsl #4]
   1587c:	000009a6 	andeq	r0, r0, r6, lsr #19
   15880:	e9050402 	stmdb	r5, {r1, sl}
   15884:	02000005 	andeq	r0, r0, #5
   15888:	03930704 	orrseq	r0, r3, #4, 14	; 0x100000
   1588c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   15890:	0005e405 	andeq	lr, r5, r5, lsl #8
   15894:	07080200 	streq	r0, [r8, -r0, lsl #4]
   15898:	0000038e 	andeq	r0, r0, lr, lsl #7
   1589c:	00077603 	andeq	r7, r7, r3, lsl #12
   158a0:	1ec80200 	cdpne	2, 12, cr0, cr8, cr0, {0}
   158a4:	0000004f 	andeq	r0, r0, pc, asr #32
   158a8:	69050404 	stmdbvs	r5, {r2, sl}
   158ac:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   158b0:	03980704 	orrseq	r0, r8, #4, 14	; 0x100000
   158b4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   158b8:	003ed704 	eorseq	sp, lr, r4, lsl #14
   158bc:	08920500 	ldmeq	r2, {r8, sl}
   158c0:	65030000 	strvs	r0, [r3, #-0]
   158c4:	00701701 	rsbseq	r1, r0, r1, lsl #14
   158c8:	e2030000 	and	r0, r3, #0
   158cc:	04000009 	streq	r0, [r0], #-9
   158d0:	00410e2e 	subeq	r0, r1, lr, lsr #28
   158d4:	67030000 	strvs	r0, [r3, -r0]
   158d8:	04000002 	streq	r0, [r0], #-2
   158dc:	00410e74 	subeq	r0, r1, r4, ror lr
   158e0:	04060000 	streq	r0, [r6], #-0
   158e4:	c503a504 	strgt	sl, [r3, #-1284]	; 0xfffffafc
   158e8:	07000000 	streq	r0, [r0, -r0]
   158ec:	00000587 	andeq	r0, r0, r7, lsl #11
   158f0:	7e0ca704 	cdpvc	7, 0, cr10, cr12, cr4, {0}
   158f4:	07000000 	streq	r0, [r0, -r0]
   158f8:	000007e6 	andeq	r0, r0, r6, ror #15
   158fc:	c513a804 	ldrgt	sl, [r3, #-2052]	; 0xfffff7fc
   15900:	00000000 	andeq	r0, r0, r0
   15904:	00002c08 	andeq	r2, r0, r8, lsl #24
   15908:	0000d500 	andeq	sp, r0, r0, lsl #10
   1590c:	00700900 	rsbseq	r0, r0, r0, lsl #18
   15910:	00030000 	andeq	r0, r3, r0
   15914:	a204080a 	andge	r0, r4, #655360	; 0xa0000
   15918:	0000f909 	andeq	pc, r0, r9, lsl #18
   1591c:	03220b00 			; <UNDEFINED> instruction: 0x03220b00
   15920:	a4040000 	strge	r0, [r4], #-0
   15924:	00006907 	andeq	r6, r0, r7, lsl #18
   15928:	aa0b0000 	bge	2d5930 <__ccfg+0x2b5988>
   1592c:	04000004 	streq	r0, [r0], #-4
   15930:	00a305a9 	adceq	r0, r3, r9, lsr #11
   15934:	00040000 	andeq	r0, r4, r0
   15938:	0006a503 	andeq	sl, r6, r3, lsl #10
   1593c:	03aa0400 			; <UNDEFINED> instruction: 0x03aa0400
   15940:	000000d5 	ldrdeq	r0, [r0], -r5
   15944:	c903040c 	stmdbgt	r3, {r2, r3, sl}
   15948:	04000041 	streq	r0, [r0], #-65	; 0xffffffbf
   1594c:	00410fd2 	ldrdeq	r0, [r1], #-242	; 0xffffff0e
   15950:	cb030000 	blgt	d5958 <__ccfg+0xb59b0>
   15954:	05000041 	streq	r0, [r0, #-65]	; 0xffffffbf
   15958:	01071725 	tsteq	r7, r5, lsr #14
   1595c:	9a030000 	bls	d5964 <__ccfg+0xb59bc>
   15960:	05000005 	streq	r0, [r0, #-5]
   15964:	005d122a 	subseq	r1, sp, sl, lsr #4
   15968:	040d0000 	streq	r0, [sp], #-0
   1596c:	10000043 	andne	r0, r0, r3, asr #32
   15970:	53083605 	movwpl	r3, #34309	; 0x8605
   15974:	0b000001 	bleq	15980 <__exidx_end+0x10a54>
   15978:	00004204 	andeq	r4, r0, r4, lsl #4
   1597c:	1f0a3705 	svcne	0x000a3705
   15980:	00000001 	andeq	r0, r0, r1
   15984:	0042670b 	subeq	r6, r2, fp, lsl #14
   15988:	0e380500 	cfabs32eq	mvfx0, mvfx8
   1598c:	00000113 	andeq	r0, r0, r3, lsl r1
   15990:	040e0008 	streq	r0, [lr], #-8
   15994:	00000159 	andeq	r0, r0, r9, asr r1
   15998:	e1080102 	tst	r8, r2, lsl #2
   1599c:	0f000008 	svceq	0x00000008
   159a0:	00000159 	andeq	r0, r0, r9, asr r1
   159a4:	00062903 	andeq	r2, r6, r3, lsl #18
   159a8:	19160600 	ldmdbne	r6, {r9, sl}
   159ac:	00000048 	andeq	r0, r0, r8, asr #32
   159b0:	0001fe03 	andeq	pc, r1, r3, lsl #28
   159b4:	0d0c0700 	stceq	7, cr0, [ip, #-0]
   159b8:	00000069 	andeq	r0, r0, r9, rrx
   159bc:	00055503 	andeq	r5, r5, r3, lsl #10
   159c0:	1b230600 	blne	8d71c8 <__ccfg+0x8b7220>
   159c4:	00000171 	andeq	r0, r0, r1, ror r1
   159c8:	0002a70d 	andeq	sl, r2, sp, lsl #14
   159cc:	34061800 	strcc	r1, [r6], #-2048	; 0xfffff800
   159d0:	0001e308 	andeq	lr, r1, r8, lsl #6
   159d4:	0a320b00 	beq	c985dc <__ccfg+0xc78634>
   159d8:	36060000 	strcc	r0, [r6], -r0
   159dc:	0001e313 	andeq	lr, r1, r3, lsl r3
   159e0:	5f100000 	svcpl	0x00100000
   159e4:	3706006b 	strcc	r0, [r6, -fp, rrx]
   159e8:	00006907 	andeq	r6, r0, r7, lsl #18
   159ec:	410b0400 	tstmi	fp, r0, lsl #8
   159f0:	06000008 	streq	r0, [r0], -r8
   159f4:	00690b37 	rsbeq	r0, r9, r7, lsr fp
   159f8:	0b080000 	bleq	215a00 <__ccfg+0x1f5a58>
   159fc:	00003ea2 	andeq	r3, r0, r2, lsr #29
   15a00:	69143706 	ldmdbvs	r4, {r1, r2, r8, r9, sl, ip, sp}
   15a04:	0c000000 	stceq	0, cr0, [r0], {-0}
   15a08:	0003ba0b 	andeq	fp, r3, fp, lsl #20
   15a0c:	1b370600 	blne	dd7214 <__ccfg+0xdb726c>
   15a10:	00000069 	andeq	r0, r0, r9, rrx
   15a14:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   15a18:	0b380600 	bleq	e17220 <__ccfg+0xdf7278>
   15a1c:	000001e9 	andeq	r0, r0, r9, ror #3
   15a20:	040e0014 	streq	r0, [lr], #-20	; 0xffffffec
   15a24:	00000189 	andeq	r0, r0, r9, lsl #3
   15a28:	00016508 	andeq	r6, r1, r8, lsl #10
   15a2c:	0001f900 	andeq	pc, r1, r0, lsl #18
   15a30:	00700900 	rsbseq	r0, r0, r0, lsl #18
   15a34:	00000000 	andeq	r0, r0, r0
   15a38:	00085c0d 	andeq	r5, r8, sp, lsl #24
   15a3c:	3c062400 	cfstrscc	mvf2, [r6], {-0}
   15a40:	00027c08 	andeq	r7, r2, r8, lsl #24
   15a44:	044a0b00 	strbeq	r0, [sl], #-2816	; 0xfffff500
   15a48:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
   15a4c:	00006909 	andeq	r6, r0, r9, lsl #18
   15a50:	540b0000 	strpl	r0, [fp], #-0
   15a54:	06000003 	streq	r0, [r0], -r3
   15a58:	0069093f 	rsbeq	r0, r9, pc, lsr r9
   15a5c:	0b040000 	bleq	115a64 <__ccfg+0xf5abc>
   15a60:	000002fd 	strdeq	r0, [r0], -sp
   15a64:	69094006 	stmdbvs	r9, {r1, r2, lr}
   15a68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   15a6c:	00050b0b 	andeq	r0, r5, fp, lsl #22
   15a70:	09410600 	stmdbeq	r1, {r9, sl}^
   15a74:	00000069 	andeq	r0, r0, r9, rrx
   15a78:	07190b0c 	ldreq	r0, [r9, -ip, lsl #22]
   15a7c:	42060000 	andmi	r0, r6, #0
   15a80:	00006909 	andeq	r6, r0, r9, lsl #18
   15a84:	000b1000 	andeq	r1, fp, r0
   15a88:	06000008 	streq	r0, [r0], -r8
   15a8c:	00690943 	rsbeq	r0, r9, r3, asr #18
   15a90:	0b140000 	bleq	515a98 <__ccfg+0x4f5af0>
   15a94:	000002c2 	andeq	r0, r0, r2, asr #5
   15a98:	69094406 	stmdbvs	r9, {r1, r2, sl, lr}
   15a9c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   15aa0:	0004530b 	andeq	r5, r4, fp, lsl #6
   15aa4:	09450600 	stmdbeq	r5, {r9, sl}^
   15aa8:	00000069 	andeq	r0, r0, r9, rrx
   15aac:	06c30b1c 			; <UNDEFINED> instruction: 0x06c30b1c
   15ab0:	46060000 	strmi	r0, [r6], -r0
   15ab4:	00006909 	andeq	r6, r0, r9, lsl #18
   15ab8:	11002000 	mrsne	r2, (UNDEF: 0)
   15abc:	00000061 	andeq	r0, r0, r1, rrx
   15ac0:	4f060108 	svcmi	0x00060108
   15ac4:	0002c108 	andeq	ip, r2, r8, lsl #2
   15ac8:	09700b00 	ldmdbeq	r0!, {r8, r9, fp}^
   15acc:	50060000 	andpl	r0, r6, r0
   15ad0:	0002c10a 	andeq	ip, r2, sl, lsl #2
   15ad4:	bc0b0000 	stclt	0, cr0, [fp], {-0}
   15ad8:	06000008 	streq	r0, [r0], -r8
   15adc:	02c10951 	sbceq	r0, r1, #1327104	; 0x144000
   15ae0:	12800000 	addne	r0, r0, #0
   15ae4:	000009d9 	ldrdeq	r0, [r0], -r9
   15ae8:	650a5306 	strvs	r5, [sl, #-774]	; 0xfffffcfa
   15aec:	00000001 	andeq	r0, r0, r1
   15af0:	0a1d1201 	beq	75a2fc <__ccfg+0x73a354>
   15af4:	56060000 	strpl	r0, [r6], -r0
   15af8:	0001650a 	andeq	r6, r1, sl, lsl #10
   15afc:	00010400 	andeq	r0, r1, r0, lsl #8
   15b00:	00010508 	andeq	r0, r1, r8, lsl #10
   15b04:	0002d100 	andeq	sp, r2, r0, lsl #2
   15b08:	00700900 	rsbseq	r0, r0, r0, lsl #18
   15b0c:	001f0000 	andseq	r0, pc, r0
   15b10:	00078611 	andeq	r8, r7, r1, lsl r6
   15b14:	06019000 	streq	r9, [r1], -r0
   15b18:	03140862 	tsteq	r4, #6422528	; 0x620000
   15b1c:	320b0000 	andcc	r0, fp, #0
   15b20:	0600000a 	streq	r0, [r0], -sl
   15b24:	03141263 	tsteq	r4, #805306374	; 0x30000006
   15b28:	0b000000 	bleq	15b30 <__exidx_end+0x10c04>
   15b2c:	00000462 	andeq	r0, r0, r2, ror #8
   15b30:	69066406 	stmdbvs	r6, {r1, r2, sl, sp, lr}
   15b34:	04000000 	streq	r0, [r0], #-0
   15b38:	00026f0b 	andeq	r6, r2, fp, lsl #30
   15b3c:	09660600 	stmdbeq	r6!, {r9, sl}^
   15b40:	0000031a 	andeq	r0, r0, sl, lsl r3
   15b44:	00610b08 	rsbeq	r0, r1, r8, lsl #22
   15b48:	67060000 	strvs	r0, [r6, -r0]
   15b4c:	00027c1e 	andeq	r7, r2, lr, lsl ip
   15b50:	0e008800 	cdpeq	8, 0, cr8, cr0, cr0, {0}
   15b54:	0002d104 	andeq	sp, r2, r4, lsl #2
   15b58:	032a0800 			; <UNDEFINED> instruction: 0x032a0800
   15b5c:	032a0000 			; <UNDEFINED> instruction: 0x032a0000
   15b60:	70090000 	andvc	r0, r9, r0
   15b64:	1f000000 	svcne	0x00000000
   15b68:	30040e00 	andcc	r0, r4, r0, lsl #28
   15b6c:	13000003 	movwne	r0, #3
   15b70:	00093a0d 	andeq	r3, r9, sp, lsl #20
   15b74:	7a060800 	bvc	197b7c <__ccfg+0x177bd4>
   15b78:	00035908 	andeq	r5, r3, r8, lsl #18
   15b7c:	06000b00 	streq	r0, [r0], -r0, lsl #22
   15b80:	7b060000 	blvc	195b88 <__ccfg+0x175be0>
   15b84:	00035911 	andeq	r5, r3, r1, lsl r9
   15b88:	c10b0000 	mrsgt	r0, (UNDEF: 11)
   15b8c:	06000018 			; <UNDEFINED> instruction: 0x06000018
   15b90:	0069067c 	rsbeq	r0, r9, ip, ror r6
   15b94:	00040000 	andeq	r0, r4, r0
   15b98:	002c040e 	eoreq	r0, ip, lr, lsl #8
   15b9c:	b20d0000 	andlt	r0, sp, #0
   15ba0:	68000003 	stmdavs	r0, {r0, r1}
   15ba4:	a208ba06 	andge	fp, r8, #24576	; 0x6000
   15ba8:	10000004 	andne	r0, r0, r4
   15bac:	0600705f 			; <UNDEFINED> instruction: 0x0600705f
   15bb0:	035912bb 	cmpeq	r9, #-1342177269	; 0xb000000b
   15bb4:	10000000 	andne	r0, r0, r0
   15bb8:	0600725f 			; <UNDEFINED> instruction: 0x0600725f
   15bbc:	006907bc 	strhteq	r0, [r9], #-124	; 0xffffff84
   15bc0:	10040000 	andne	r0, r4, r0
   15bc4:	0600775f 			; <UNDEFINED> instruction: 0x0600775f
   15bc8:	006907bd 	strhteq	r0, [r9], #-125	; 0xffffff83
   15bcc:	0b080000 	bleq	215bd4 <__ccfg+0x1f5c2c>
   15bd0:	000001e9 	andeq	r0, r0, r9, ror #3
   15bd4:	3309be06 	movwcc	fp, #40454	; 0x9e06
   15bd8:	0c000000 	stceq	0, cr0, [r0], {-0}
   15bdc:	00065e0b 	andeq	r5, r6, fp, lsl #28
   15be0:	09bf0600 	ldmibeq	pc!, {r9, sl}	; <UNPREDICTABLE>
   15be4:	00000033 	andeq	r0, r0, r3, lsr r0
   15be8:	625f100e 	subsvs	r1, pc, #14
   15bec:	c0060066 	andgt	r0, r6, r6, rrx
   15bf0:	00033111 	andeq	r3, r3, r1, lsl r1
   15bf4:	e00b1000 	and	r1, fp, r0
   15bf8:	06000001 	streq	r0, [r0], -r1
   15bfc:	006907c1 	rsbeq	r0, r9, r1, asr #15
   15c00:	0b180000 	bleq	615c08 <__ccfg+0x5f5c60>
   15c04:	00000274 	andeq	r0, r0, r4, ror r2
   15c08:	050ac806 	streq	ip, [sl, #-2054]	; 0xfffff7fa
   15c0c:	1c000001 	stcne	0, cr0, [r0], {1}
   15c10:	0018510b 	andseq	r5, r8, fp, lsl #2
   15c14:	1dca0600 	stclne	6, cr0, [sl]
   15c18:	00000614 	andeq	r0, r0, r4, lsl r6
   15c1c:	18180b20 	ldmdane	r8, {r5, r8, r9, fp}
   15c20:	cc060000 	stcgt	0, cr0, [r6], {-0}
   15c24:	0006431d 	andeq	r4, r6, sp, lsl r3
   15c28:	430b2400 	movwmi	r2, #46080	; 0xb400
   15c2c:	0600000a 	streq	r0, [r0], -sl
   15c30:	06670dcf 	strbteq	r0, [r7], -pc, asr #27
   15c34:	0b280000 	bleq	a15c3c <__ccfg+0x9f5c94>
   15c38:	00001806 	andeq	r1, r0, r6, lsl #16
   15c3c:	8109d006 	tsthi	r9, r6
   15c40:	2c000006 	stccs	0, cr0, [r0], {6}
   15c44:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
   15c48:	11d30600 	bicsne	r0, r3, r0, lsl #12
   15c4c:	00000331 	andeq	r0, r0, r1, lsr r3
   15c50:	755f1030 	ldrbvc	r1, [pc, #-48]	; 15c28 <__exidx_end+0x10cfc>
   15c54:	d4060070 	strle	r0, [r6], #-112	; 0xffffff90
   15c58:	00035912 	andeq	r5, r3, r2, lsl r9
   15c5c:	5f103800 	svcpl	0x00103800
   15c60:	06007275 			; <UNDEFINED> instruction: 0x06007275
   15c64:	006907d5 	ldrdeq	r0, [r9], #-117	; 0xffffff8b	; <UNPREDICTABLE>
   15c68:	0b3c0000 	bleq	f15c70 <__ccfg+0xef5cc8>
   15c6c:	00000a5a 	andeq	r0, r0, sl, asr sl
   15c70:	8711d806 	ldrhi	sp, [r1, -r6, lsl #16]
   15c74:	40000006 	andmi	r0, r0, r6
   15c78:	0009e90b 	andeq	lr, r9, fp, lsl #18
   15c7c:	11d90600 	bicsne	r0, r9, r0, lsl #12
   15c80:	00000697 	muleq	r0, r7, r6
   15c84:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
   15c88:	dc060062 	stcle	0, cr0, [r6], {98}	; 0x62
   15c8c:	00033111 	andeq	r3, r3, r1, lsl r1
   15c90:	530b4400 	movwpl	r4, #46080	; 0xb400
   15c94:	06000008 	streq	r0, [r0], -r8
   15c98:	006907df 	ldrdeq	r0, [r9], #-127	; 0xffffff81	; <UNPREDICTABLE>
   15c9c:	0b4c0000 	bleq	1315ca4 <__ccfg+0x12f5cfc>
   15ca0:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15ca4:	8b0ae006 	blhi	2cdcc4 <__ccfg+0x2add1c>
   15ca8:	50000000 	andpl	r0, r0, r0
   15cac:	0043200b 	subeq	r2, r3, fp
   15cb0:	12e30600 	rscne	r0, r3, #0, 12
   15cb4:	000004c0 	andeq	r0, r0, r0, asr #9
   15cb8:	086b0b54 	stmdaeq	fp!, {r2, r4, r6, r8, r9, fp}^
   15cbc:	e7060000 	str	r0, [r6, -r0]
   15cc0:	00017d0c 	andeq	r7, r1, ip, lsl #26
   15cc4:	8e0b5800 	cdphi	8, 0, cr5, cr11, cr0, {0}
   15cc8:	06000007 	streq	r0, [r0], -r7
   15ccc:	00f90ee9 	rscseq	r0, r9, r9, ror #29
   15cd0:	0b5c0000 	bleq	1715cd8 <__ccfg+0x16f5d30>
   15cd4:	00000a15 	andeq	r0, r0, r5, lsl sl
   15cd8:	6909ea06 	stmdbvs	r9, {r1, r2, r9, fp, sp, lr, pc}
   15cdc:	64000000 	strvs	r0, [r0], #-0
   15ce0:	00691400 	rsbeq	r1, r9, r0, lsl #8
   15ce4:	04c00000 	strbeq	r0, [r0], #0
   15ce8:	c0150000 	andsgt	r0, r5, r0
   15cec:	15000004 	strne	r0, [r0, #-4]
   15cf0:	00000105 	andeq	r0, r0, r5, lsl #2
   15cf4:	00015315 	andeq	r5, r1, r5, lsl r3
   15cf8:	00691500 	rsbeq	r1, r9, r0, lsl #10
   15cfc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   15d00:	0004cb04 	andeq	ip, r4, r4, lsl #22
   15d04:	04c00f00 	strbeq	r0, [r0], #3840	; 0xf00
   15d08:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
   15d0c:	28000043 	stmdacs	r0, {r0, r1, r6}
   15d10:	02650604 	rsbeq	r0, r5, #4, 12	; 0x400000
   15d14:	00061408 	andeq	r1, r6, r8, lsl #8
   15d18:	06f41700 	ldrbteq	r1, [r4], r0, lsl #14
   15d1c:	67060000 	strvs	r0, [r6, -r0]
   15d20:	00690702 	rsbeq	r0, r9, r2, lsl #14
   15d24:	17000000 	strne	r0, [r0, -r0]
   15d28:	000005ce 	andeq	r0, r0, lr, asr #11
   15d2c:	0b026c06 	bleq	b0d4c <__ccfg+0x90da4>
   15d30:	000006f3 	strdeq	r0, [r0], -r3
   15d34:	02551704 	subseq	r1, r5, #4, 14	; 0x100000
   15d38:	6c060000 	stcvs	0, cr0, [r6], {-0}
   15d3c:	06f31402 	ldrbteq	r1, [r3], r2, lsl #8
   15d40:	17080000 	strne	r0, [r8, -r0]
   15d44:	00000a49 	andeq	r0, r0, r9, asr #20
   15d48:	1e026c06 	cdpne	12, 0, cr6, cr2, cr6, {0}
   15d4c:	000006f3 	strdeq	r0, [r0], -r3
   15d50:	045d170c 	ldrbeq	r1, [sp], #-1804	; 0xfffff8f4
   15d54:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
   15d58:	00690802 	rsbeq	r0, r9, r2, lsl #16
   15d5c:	17100000 	ldrne	r0, [r0, -r0]
   15d60:	0000040f 	andeq	r0, r0, pc, lsl #8
   15d64:	08026f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, sp, lr}
   15d68:	000008f3 	strdeq	r0, [r0], -r3
   15d6c:	09fc1714 	ldmibeq	ip!, {r2, r4, r8, r9, sl, ip}^
   15d70:	72060000 	andvc	r0, r6, #0
   15d74:	00690702 	rsbeq	r0, r9, r2, lsl #14
   15d78:	17300000 	ldrne	r0, [r0, -r0]!
   15d7c:	00003d4e 	andeq	r3, r0, lr, asr #26
   15d80:	16027306 	strne	r7, [r2], -r6, lsl #6
   15d84:	00000908 	andeq	r0, r0, r8, lsl #18
   15d88:	05a11734 	streq	r1, [r1, #1844]!	; 0x734
   15d8c:	75060000 	strvc	r0, [r6, #-0]
   15d90:	00690702 	rsbeq	r0, r9, r2, lsl #14
   15d94:	17380000 	ldrne	r0, [r8, -r0]!
   15d98:	0000069b 	muleq	r0, fp, r6
   15d9c:	0a027706 	beq	b39bc <__ccfg+0x93a14>
   15da0:	00000919 	andeq	r0, r0, r9, lsl r9
   15da4:	02cc173c 	sbceq	r1, ip, #60, 14	; 0xf00000
   15da8:	7a060000 	bvc	195db0 <__ccfg+0x175e08>
   15dac:	01e31302 	mvneq	r1, r2, lsl #6
   15db0:	17400000 	strbne	r0, [r0, -r0]
   15db4:	00000378 	andeq	r0, r0, r8, ror r3
   15db8:	07027b06 	streq	r7, [r2, -r6, lsl #22]
   15dbc:	00000069 	andeq	r0, r0, r9, rrx
   15dc0:	04b21744 	ldrteq	r1, [r2], #1860	; 0x744
   15dc4:	7c060000 	stcvc	0, cr0, [r6], {-0}
   15dc8:	01e31302 	mvneq	r1, r2, lsl #6
   15dcc:	17480000 	strbne	r0, [r8, -r0]
   15dd0:	00000606 	andeq	r0, r0, r6, lsl #12
   15dd4:	14027d06 	strne	r7, [r2], #-3334	; 0xfffff2fa
   15dd8:	0000091f 	andeq	r0, r0, pc, lsl r9
   15ddc:	0839174c 	ldmdaeq	r9!, {r2, r3, r6, r8, r9, sl, ip}
   15de0:	80060000 	andhi	r0, r6, r0
   15de4:	00690702 	rsbeq	r0, r9, r2, lsl #14
   15de8:	17500000 	ldrbne	r0, [r0, -r0]
   15dec:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   15df0:	09028106 	stmdbeq	r2, {r1, r2, r8, pc}
   15df4:	00000153 	andeq	r0, r0, r3, asr r1
   15df8:	08ea1754 	stmiaeq	sl!, {r2, r4, r6, r8, r9, sl, ip}^
   15dfc:	a4060000 	strge	r0, [r6], #-0
   15e00:	08ce0702 	stmiaeq	lr, {r1, r8, r9, sl}^
   15e04:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   15e08:	00000786 	andeq	r0, r0, r6, lsl #15
   15e0c:	1302a806 	movwne	sl, #10246	; 0x2806
   15e10:	00000314 	andeq	r0, r0, r4, lsl r3
   15e14:	2e180148 	mufcsem	f0, f0, #0.0
   15e18:	06000005 	streq	r0, [r0], -r5
   15e1c:	d11202a9 	tstle	r2, r9, lsr #5
   15e20:	4c000002 	stcmi	0, cr0, [r0], {2}
   15e24:	05151801 	ldreq	r1, [r5, #-2049]	; 0xfffff7ff
   15e28:	ad060000 	stcge	0, cr0, [r6, #-0]
   15e2c:	09300c02 	ldmdbeq	r0!, {r1, sl, fp}
   15e30:	02dc0000 	sbcseq	r0, ip, #0
   15e34:	00094d18 	andeq	r4, r9, r8, lsl sp
   15e38:	02b20600 	adcseq	r0, r2, #0, 12
   15e3c:	0006b410 	andeq	fp, r6, r0, lsl r4
   15e40:	1802e000 	stmdane	r2, {sp, lr, pc}
   15e44:	000007c7 	andeq	r0, r0, r7, asr #15
   15e48:	0a02b406 	beq	c2e68 <__ccfg+0xa2ec0>
   15e4c:	0000093c 	andeq	r0, r0, ip, lsr r9
   15e50:	0e0002ec 	cdpeq	2, 0, cr0, cr0, cr12, {7}
   15e54:	0004a204 	andeq	sl, r4, r4, lsl #4
   15e58:	00691400 	rsbeq	r1, r9, r0, lsl #8
   15e5c:	06380000 	ldrteq	r0, [r8], -r0
   15e60:	c0150000 	andsgt	r0, r5, r0
   15e64:	15000004 	strne	r0, [r0, #-4]
   15e68:	00000105 	andeq	r0, r0, r5, lsl #2
   15e6c:	00063815 	andeq	r3, r6, r5, lsl r8
   15e70:	00691500 	rsbeq	r1, r9, r0, lsl #10
   15e74:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   15e78:	00016004 	andeq	r6, r1, r4
   15e7c:	06380f00 	ldrteq	r0, [r8], -r0, lsl #30
   15e80:	040e0000 	streq	r0, [lr], #-0
   15e84:	0000061a 	andeq	r0, r0, sl, lsl r6
   15e88:	00009714 	andeq	r9, r0, r4, lsl r7
   15e8c:	00066700 	andeq	r6, r6, r0, lsl #14
   15e90:	04c01500 	strbeq	r1, [r0], #1280	; 0x500
   15e94:	05150000 	ldreq	r0, [r5, #-0]
   15e98:	15000001 	strne	r0, [r0, #-1]
   15e9c:	00000097 	muleq	r0, r7, r0
   15ea0:	00006915 	andeq	r6, r0, r5, lsl r9
   15ea4:	040e0000 	streq	r0, [lr], #-0
   15ea8:	00000649 	andeq	r0, r0, r9, asr #12
   15eac:	00006914 	andeq	r6, r0, r4, lsl r9
   15eb0:	00068100 	andeq	r8, r6, r0, lsl #2
   15eb4:	04c01500 	strbeq	r1, [r0], #1280	; 0x500
   15eb8:	05150000 	ldreq	r0, [r5, #-0]
   15ebc:	00000001 	andeq	r0, r0, r1
   15ec0:	066d040e 	strbteq	r0, [sp], -lr, lsl #8
   15ec4:	2c080000 	stccs	0, cr0, [r8], {-0}
   15ec8:	97000000 	strls	r0, [r0, -r0]
   15ecc:	09000006 	stmdbeq	r0, {r1, r2}
   15ed0:	00000070 	andeq	r0, r0, r0, ror r0
   15ed4:	2c080002 	stccs	0, cr0, [r8], {2}
   15ed8:	a7000000 	strge	r0, [r0, -r0]
   15edc:	09000006 	stmdbeq	r0, {r1, r2}
   15ee0:	00000070 	andeq	r0, r0, r0, ror r0
   15ee4:	ed050000 	stc	0, cr0, [r5, #-0]
   15ee8:	06000003 	streq	r0, [r0], -r3
   15eec:	5f1a0124 	svcpl	0x001a0124
   15ef0:	19000003 	stmdbne	r0, {r0, r1}
   15ef4:	00004374 	andeq	r4, r0, r4, ror r3
   15ef8:	0128060c 			; <UNDEFINED> instruction: 0x0128060c
   15efc:	0006ed08 	andeq	lr, r6, r8, lsl #26
   15f00:	0a321700 	beq	c9bb08 <__ccfg+0xc7bb60>
   15f04:	2a060000 	bcs	195f0c <__ccfg+0x175f64>
   15f08:	06ed1101 	strbteq	r1, [sp], r1, lsl #2
   15f0c:	17000000 	strne	r0, [r0, -r0]
   15f10:	0000088b 	andeq	r0, r0, fp, lsl #17
   15f14:	07012b06 	streq	r2, [r1, -r6, lsl #22]
   15f18:	00000069 	andeq	r0, r0, r9, rrx
   15f1c:	058d1704 	streq	r1, [sp, #1796]	; 0x704
   15f20:	2c060000 	stccs	0, cr0, [r6], {-0}
   15f24:	06f30b01 	ldrbteq	r0, [r3], r1, lsl #22
   15f28:	00080000 	andeq	r0, r8, r0
   15f2c:	06b4040e 	ldrteq	r0, [r4], lr, lsl #8
   15f30:	040e0000 	streq	r0, [lr], #-0
   15f34:	000006a7 	andeq	r0, r0, r7, lsr #13
   15f38:	00036419 	andeq	r6, r3, r9, lsl r4
   15f3c:	44060e00 	strmi	r0, [r6], #-3584	; 0xfffff200
   15f40:	07320801 	ldreq	r0, [r2, -r1, lsl #16]!
   15f44:	7a170000 	bvc	5d5f4c <__ccfg+0x5b5fa4>
   15f48:	06000011 			; <UNDEFINED> instruction: 0x06000011
   15f4c:	32120145 	andscc	r0, r2, #1073741841	; 0x40000011
   15f50:	00000007 	andeq	r0, r0, r7
   15f54:	00061817 	andeq	r1, r6, r7, lsl r8
   15f58:	01460600 	cmpeq	r6, r0, lsl #12
   15f5c:	00073212 	andeq	r3, r7, r2, lsl r2
   15f60:	1f170600 	svcne	0x00170600
   15f64:	06000010 			; <UNDEFINED> instruction: 0x06000010
   15f68:	3a120147 	bcc	49648c <__ccfg+0x4764e4>
   15f6c:	0c000000 	stceq	0, cr0, [r0], {-0}
   15f70:	003a0800 	eorseq	r0, sl, r0, lsl #16
   15f74:	07420000 	strbeq	r0, [r2, -r0]
   15f78:	70090000 	andvc	r0, r9, r0
   15f7c:	02000000 	andeq	r0, r0, #0
   15f80:	06d01a00 	ldrbeq	r1, [r0], r0, lsl #20
   15f84:	57070285 	strpl	r0, [r7, -r5, lsl #5]
   15f88:	17000008 	strne	r0, [r0, -r8]
   15f8c:	000009ef 	andeq	r0, r0, pc, ror #19
   15f90:	18028706 	stmdane	r2, {r1, r2, r8, r9, sl, pc}
   15f94:	00000070 	andeq	r0, r0, r0, ror r0
   15f98:	09551700 	ldmdbeq	r5, {r8, r9, sl, ip}^
   15f9c:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
   15fa0:	01531202 	cmpeq	r3, r2, lsl #4
   15fa4:	17040000 	strne	r0, [r4, -r0]
   15fa8:	000003a5 	andeq	r0, r0, r5, lsr #7
   15fac:	10028906 	andne	r8, r2, r6, lsl #18
   15fb0:	00000857 	andeq	r0, r0, r7, asr r8
   15fb4:	08181708 	ldmdaeq	r8, {r3, r8, r9, sl, ip}
   15fb8:	8a060000 	bhi	195fc0 <__ccfg+0x176018>
   15fbc:	01f91702 	mvnseq	r1, r2, lsl #14
   15fc0:	17240000 	strne	r0, [r4, -r0]!
   15fc4:	000005d5 	ldrdeq	r0, [r0], -r5
   15fc8:	0f028b06 	svceq	0x00028b06
   15fcc:	00000069 	andeq	r0, r0, r9, rrx
   15fd0:	0a2d1748 	beq	b5bcf8 <__ccfg+0xb3bd50>
   15fd4:	8c060000 	stchi	0, cr0, [r6], {-0}
   15fd8:	00562c02 	subseq	r2, r6, r2, lsl #24
   15fdc:	17500000 	ldrbne	r0, [r0, -r0]
   15fe0:	00000085 	andeq	r0, r0, r5, lsl #1
   15fe4:	1a028d06 	bne	b9404 <__ccfg+0x9945c>
   15fe8:	000006f9 	strdeq	r0, [r0], -r9
   15fec:	04ea1758 	strbteq	r1, [sl], #1880	; 0x758
   15ff0:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
   15ff4:	00f91602 	rscseq	r1, r9, r2, lsl #12
   15ff8:	17680000 	strbne	r0, [r8, -r0]!
   15ffc:	00000962 	andeq	r0, r0, r2, ror #18
   16000:	16028f06 	strne	r8, [r2], -r6, lsl #30
   16004:	000000f9 	strdeq	r0, [r0], -r9
   16008:	006f1770 	rsbeq	r1, pc, r0, ror r7	; <UNPREDICTABLE>
   1600c:	90060000 	andls	r0, r6, r0
   16010:	00f91602 	rscseq	r1, r9, r2, lsl #12
   16014:	17780000 	ldrbne	r0, [r8, -r0]!
   16018:	00000849 	andeq	r0, r0, r9, asr #16
   1601c:	10029106 	andne	r9, r2, r6, lsl #2
   16020:	00000867 	andeq	r0, r0, r7, ror #16
   16024:	03821780 	orreq	r1, r2, #128, 14	; 0x2000000
   16028:	92060000 	andls	r0, r6, #0
   1602c:	08771002 	ldmdaeq	r7!, {r1, ip}^
   16030:	17880000 	strne	r0, [r8, r0]
   16034:	0000090d 	andeq	r0, r0, sp, lsl #18
   16038:	0f029306 	svceq	0x00029306
   1603c:	00000069 	andeq	r0, r0, r9, rrx
   16040:	022917a0 	eoreq	r1, r9, #160, 14	; 0x2800000
   16044:	94060000 	strls	r0, [r6], #-0
   16048:	00f91602 	rscseq	r1, r9, r2, lsl #12
   1604c:	17a40000 	strne	r0, [r4, r0]!
   16050:	0000051f 	andeq	r0, r0, pc, lsl r5
   16054:	16029506 	strne	r9, [r2], -r6, lsl #10
   16058:	000000f9 	strdeq	r0, [r0], -r9
   1605c:	046717ac 	strbteq	r1, [r7], #-1964	; 0xfffff854
   16060:	96060000 	strls	r0, [r6], -r0
   16064:	00f91602 	rscseq	r1, r9, r2, lsl #12
   16068:	17b40000 	ldrne	r0, [r4, r0]!
   1606c:	0000064f 	andeq	r0, r0, pc, asr #12
   16070:	16029706 	strne	r9, [r2], -r6, lsl #14
   16074:	000000f9 	strdeq	r0, [r0], -r9
   16078:	04d917bc 	ldrbeq	r1, [r9], #1980	; 0x7bc
   1607c:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
   16080:	00f91602 	rscseq	r1, r9, r2, lsl #12
   16084:	17c40000 	strbne	r0, [r4, r0]
   16088:	000006f2 	strdeq	r0, [r0], -r2
   1608c:	08029906 	stmdaeq	r2, {r1, r2, r8, fp, ip, pc}
   16090:	00000069 	andeq	r0, r0, r9, rrx
   16094:	590800cc 	stmdbpl	r8, {r2, r3, r6, r7}
   16098:	67000001 	strvs	r0, [r0, -r1]
   1609c:	09000008 	stmdbeq	r0, {r3}
   160a0:	00000070 	andeq	r0, r0, r0, ror r0
   160a4:	59080019 	stmdbpl	r8, {r0, r3, r4}
   160a8:	77000001 	strvc	r0, [r0, -r1]
   160ac:	09000008 	stmdbeq	r0, {r3}
   160b0:	00000070 	andeq	r0, r0, r0, ror r0
   160b4:	59080007 	stmdbpl	r8, {r0, r1, r2}
   160b8:	87000001 	strhi	r0, [r0, -r1]
   160bc:	09000008 	stmdbeq	r0, {r3}
   160c0:	00000070 	andeq	r0, r0, r0, ror r0
   160c4:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
   160c8:	07029e06 	streq	r9, [r2, -r6, lsl #28]
   160cc:	000008ae 	andeq	r0, r0, lr, lsr #17
   160d0:	00035d17 	andeq	r5, r3, r7, lsl sp
   160d4:	02a10600 	adceq	r0, r1, #0, 12
   160d8:	0008ae1b 	andeq	sl, r8, fp, lsl lr
   160dc:	51170000 	tstpl	r7, r0
   160e0:	0600000a 	streq	r0, [r0], -sl
   160e4:	be1802a2 	cdplt	2, 1, cr0, cr8, cr2, {5}
   160e8:	78000008 	stmdavc	r0, {r3}
   160ec:	03590800 	cmpeq	r9, #0, 16
   160f0:	08be0000 	ldmeq	lr!, {}	; <UNPREDICTABLE>
   160f4:	70090000 	andvc	r0, r9, r0
   160f8:	1d000000 	stcne	0, cr0, [r0, #-0]
   160fc:	00700800 	rsbseq	r0, r0, r0, lsl #16
   16100:	08ce0000 	stmiaeq	lr, {}^	; <UNPREDICTABLE>
   16104:	70090000 	andvc	r0, r9, r0
   16108:	1d000000 	stcne	0, cr0, [r0, #-0]
   1610c:	06f01b00 	ldrbteq	r1, [r0], r0, lsl #22
   16110:	f3030283 	vhsub.u8	d0, d19, d3
   16114:	1c000008 	stcne	0, cr0, [r0], {8}
   16118:	0000435e 	andeq	r4, r0, lr, asr r3
   1611c:	0b029a06 	bleq	bc93c <__ccfg+0x9c994>
   16120:	00000742 	andeq	r0, r0, r2, asr #14
   16124:	0008271c 	andeq	r2, r8, ip, lsl r7
   16128:	02a30600 	adceq	r0, r3, #0, 12
   1612c:	0008870b 	andeq	r8, r8, fp, lsl #14
   16130:	59080000 	stmdbpl	r8, {}	; <UNPREDICTABLE>
   16134:	03000001 	movweq	r0, #1
   16138:	09000009 	stmdbeq	r0, {r0, r3}
   1613c:	00000070 	andeq	r0, r0, r0, ror r0
   16140:	381d0018 	ldmdacc	sp, {r3, r4}
   16144:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
   16148:	00090304 	andeq	r0, r9, r4, lsl #6
   1614c:	09191e00 	ldmdbeq	r9, {r9, sl, fp, ip}
   16150:	c0150000 	andsgt	r0, r5, r0
   16154:	00000004 	andeq	r0, r0, r4
   16158:	090e040e 	stmdbeq	lr, {r1, r2, r3, sl}
   1615c:	040e0000 	streq	r0, [lr], #-0
   16160:	000001e3 	andeq	r0, r0, r3, ror #3
   16164:	0009301e 	andeq	r3, r9, lr, lsl r0
   16168:	00691500 	rsbeq	r1, r9, r0, lsl #10
   1616c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   16170:	00093604 	andeq	r3, r9, r4, lsl #12
   16174:	25040e00 	strcs	r0, [r4, #-3584]	; 0xfffff200
   16178:	08000009 	stmdaeq	r0, {r0, r3}
   1617c:	000006a7 	andeq	r0, r0, r7, lsr #13
   16180:	0000094c 	andeq	r0, r0, ip, asr #18
   16184:	00007009 	andeq	r7, r0, r9
   16188:	1f000200 	svcne	0x00000200
   1618c:	000007f4 	strdeq	r0, [r0], -r4
   16190:	17033306 	strne	r3, [r3, -r6, lsl #6]
   16194:	000004c0 	andeq	r0, r0, r0, asr #9
   16198:	0007ed1f 	andeq	lr, r7, pc, lsl sp
   1619c:	03340600 	teqeq	r4, #0, 12
   161a0:	0004c61d 	andeq	ip, r4, sp, lsl r6
   161a4:	425d2000 	subsmi	r2, sp, #0
   161a8:	9a080000 	bls	2161b0 <__ccfg+0x1f6208>
   161ac:	00004116 	andeq	r4, r0, r6, lsl r1
   161b0:	41a72000 			; <UNDEFINED> instruction: 0x41a72000
   161b4:	9b080000 	blls	2161bc <__ccfg+0x1f6214>
   161b8:	00006915 	andeq	r6, r0, r5, lsl r9
   161bc:	01530800 	cmpeq	r3, r0, lsl #16
   161c0:	098e0000 	stmibeq	lr, {}	; <UNPREDICTABLE>
   161c4:	70090000 	andvc	r0, r9, r0
   161c8:	01000000 	mrseq	r0, (UNDEF: 0)
   161cc:	41b12000 			; <UNDEFINED> instruction: 0x41b12000
   161d0:	9e080000 	cdpls	0, 0, cr0, cr8, cr0, {0}
   161d4:	00097e17 	andeq	r7, r9, r7, lsl lr
   161d8:	063e0800 	ldrteq	r0, [lr], -r0, lsl #16
   161dc:	09a50000 	stmibeq	r5!, {}	; <UNPREDICTABLE>
   161e0:	00210000 	eoreq	r0, r1, r0
   161e4:	00099a0f 	andeq	r9, r9, pc, lsl #20
   161e8:	55492000 	strbpl	r2, [r9, #-0]
   161ec:	14090000 	strne	r0, [r9], #-0
   161f0:	0009a524 	andeq	sl, r9, r4, lsr #10
   161f4:	55de2000 	ldrbpl	r2, [lr]
   161f8:	15090000 	strne	r0, [r9, #-0]
   161fc:	00006915 	andeq	r6, r0, r5, lsl r9
   16200:	06f52000 	ldrbteq	r2, [r5], r0
   16204:	0c010000 	stceq	0, cr0, [r1], {-0}
   16208:	0000690c 	andeq	r6, r0, ip, lsl #18
   1620c:	430c2200 	movwmi	r2, #49664	; 0xc200
   16210:	12010000 	andne	r0, r1, #0
   16214:	00006901 	andeq	r6, r0, r1, lsl #18
   16218:	00419c00 	subeq	r9, r1, r0, lsl #24
   1621c:	00001000 	andeq	r1, r0, r0
   16220:	0b9c0100 	bleq	fe716628 <_estack+0xde711628>
   16224:	2300000a 	movwcs	r0, #10
   16228:	00004303 	andeq	r4, r0, r3, lsl #6
   1622c:	0b211201 	bleq	85aa38 <__ccfg+0x83aa90>
   16230:	a500000a 	strge	r0, [r0, #-10]
   16234:	a100005a 	qaddge	r0, sl, r0
   16238:	2400005a 	strcs	r0, [r0], #-90	; 0xffffffa6
   1623c:	000042a6 	andeq	r4, r0, r6, lsr #5
   16240:	050f1301 	streq	r1, [pc, #-769]	; 15f47 <__exidx_end+0x1101b>
   16244:	01000001 	tsteq	r0, r1
   16248:	040e0051 	streq	r0, [lr], #-81	; 0xffffffaf
   1624c:	0000012b 	andeq	r0, r0, fp, lsr #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	b->u.pointers.tail =
      64:	01010800 	tsteq	r1, r0, lsl #16
}
      68:	13011349 	movwne	r1, #4937	; 0x1349
		return NULL;
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm transmitter (message * messagePtr) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	0b000f11 	bleq	3d28 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xd4>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
        spkt [0] = 0;
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
        *p = messagePtr->senderGroupId; p += 2;
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
        *p = messagePtr->messageType; p++;
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
        *p = messagePtr->requestNumber; p++;
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        *p = messagePtr->receiverId; p++; // insert receiveer ID
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
        tcv_endp (spkt);
     104:	14000005 	strne	r0, [r0], #-5
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
     10c:	15150000 	ldrne	r0, [r5, #-0]
}
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
        finish;
     114:	00130113 	andseq	r0, r3, r3, lsl r1
     118:	00051600 	andeq	r1, r5, r0, lsl #12
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
char randomNumber() {
     124:	18000013 	stmdane	r0, {r0, r1, r4}
   srand((unsigned) time(&t));
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
   return (char)rand();
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
}
     134:	00001301 	andeq	r1, r0, r1, lsl #6
     138:	03000d19 	movweq	r0, #3353	; 0xd19
fsm root {
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     158:	131b0000 	tstne	fp, #0
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
     164:	010b3905 	tsteq	fp, r5, lsl #18
     168:	1c000013 	stcne	0, cr0, [r0], {19}
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
        recordCount = 0;
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        nodeId = 1;
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
        groupId = 1;
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        messagePtr = (message *) umalloc(sizeof(message));
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
        tcv_plug(0, &plug_null);
     194:	00001349 	andeq	r1, r0, r9, asr #6
     198:	0300131f 	movweq	r1, #799	; 0x31f
        sfd = tcv_open(WNONE, 0, 0);
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
     1a0:	01152000 	tsteq	r5, r0
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	34210000 	strtcc	r0, [r1], #-0
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (sfd < 0) {
     1b4:	3f13490b 	svccc	0x0013490b
			diag("Cannot open tcv interface");
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
			halt();
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
        currentProtocol = IDLE;
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
        ser_outf(Options, menu);
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0b0b0104 	bleq	2c060c <__ccfg+0x2a0664>
        switch (choice)
     1f8:	0b3a1349 	bleq	e84f24 <__ccfg+0xe64f7c>
     1fc:	0b390b3b 	bleq	e42ef0 <__ccfg+0xe22f48>
     200:	00001301 	andeq	r1, r0, r1, lsl #6
     204:	03002827 	movweq	r2, #2087	; 0x827
     208:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     20c:	00282800 	eoreq	r2, r8, r0, lsl #16
     210:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     214:	34290000 	strtcc	r0, [r9], #-0
     218:	3a0e0300 	bcc	380e20 <__ccfg+0x360e78>
     21c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     220:	3f13490b 	svccc	0x0013490b
     224:	000a020c 	andeq	r0, sl, ip, lsl #4
        proceed Menu_Header;
     228:	00342a00 	eorseq	r2, r4, r0, lsl #20
     22c:	0b3a0803 	bleq	e82240 <__ccfg+0xe62298>
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	0b390b3b 	bleq	e42f24 <__ccfg+0xe22f7c>
     234:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 118 <_Min_Stack_Size+0x18>
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	00000a02 	andeq	r0, r0, r2, lsl #20
     23c:	3f012e2b 	svccc	0x00012e2b
        proceed Menu_Header;
     240:	3a0e030c 	bcc	380e78 <__ccfg+0x360ed0>
     244:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	110c270b 	tstne	ip, fp, lsl #14
     24c:	40011201 	andmi	r1, r1, r1, lsl #4
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	0013010a 	andseq	r0, r3, sl, lsl #2
     254:	00052c00 	andeq	r2, r5, r0, lsl #24
     258:	0b3a0e03 	bleq	e83a6c <__ccfg+0xe63ac4>
    if (node < 1 || node > 25) {
     25c:	0b390b3b 	bleq	e42f50 <__ccfg+0xe22fa8>
     260:	06021349 	streq	r1, [r2], -r9, asr #6
            proceed Set_Node_ID;
     264:	0a2d0000 	beq	b4026c <__ccfg+0xb202c4>
        proceed Menu_Header;
     268:	3a0e0300 	bcc	380e70 <__ccfg+0x360ec8>
     26c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        currentProtocol = DISCOVERY_REQUEST;
     270:	0001110b 	andeq	r1, r1, fp, lsl #2
     274:	000a2e00 	andeq	r2, sl, r0, lsl #28
        receiverId = 0;
     278:	0b3a0e03 	bleq	e83a8c <__ccfg+0xe63ae4>
        proceed Transmit_Message;
     27c:	0b39053b 	bleq	e41770 <__ccfg+0xe217c8>
        currentProtocol = CREATE_RECORD;
     280:	00000111 	andeq	r0, r0, r1, lsl r1
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	11010b2f 	tstne	r1, pc, lsr #22
     288:	00011201 	andeq	r1, r1, r1, lsl #4
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	00343000 	eorseq	r3, r4, r0
     290:	0b3a0e03 	bleq	e83aa4 <__ccfg+0xe63afc>
     294:	0b390b3b 	bleq	e42f88 <__ccfg+0xe22fe0>
    if (node < 1 || node > 25) {
     298:	00001349 	andeq	r1, r0, r9, asr #6
     29c:	03003431 	movweq	r3, #1073	; 0x431
            proceed Create_Record;
     2a0:	3b0b3a0e 	blcc	2ceae0 <__ccfg+0x2aeb38>
     2a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	000a0213 	andeq	r0, sl, r3, lsl r2
     2ac:	010b3200 	mrseq	r3, R11_fiq
     2b0:	13010655 	movwne	r0, #5717	; 0x1655
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	0b330000 	bleq	cc02bc <__ccfg+0xca0314>
     2b8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     2bc:	00130101 	andseq	r0, r3, r1, lsl #2
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	00343400 	eorseq	r3, r4, r0, lsl #8
        proceed Transmit_Message;
     2c4:	0b3a0e03 	bleq	e83ad8 <__ccfg+0xe63b30>
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	0b39053b 	bleq	e417bc <__ccfg+0xe21814>
        proceed Transmit_Message;
     2cc:	0a021349 	beq	84ff8 <__ccfg+0x65050>
        currentProtocol = DELETE_RECORD;
     2d0:	1d350000 	ldcne	0, cr0, [r5, #-0]
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	11133101 	tstne	r3, r1, lsl #2
        currentProtocol = DELETE_RECORD;
     2d8:	58011201 	stmdapl	r1, {r0, r9, ip}
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
        proceed Get_Receiving_Node;
     2e0:	0013010b 	andseq	r0, r3, fp, lsl #2
        currentProtocol = RETRIEVE_RECORD;
     2e4:	00053600 	andeq	r3, r5, r0, lsl #12
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	06021331 			; <UNDEFINED> instruction: 0x06021331
        currentProtocol = RETRIEVE_RECORD;
     2ec:	1d370000 	ldcne	0, cr0, [r7, #-0]
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	11133101 	tstne	r3, r1, lsl #2
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	58011201 	stmdapl	r1, {r0, r9, ip}
     2f8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	3800000b 	stmdacc	r0, {r0, r1, r3}
     300:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 250 <root+0x114>
     304:	0b3a0e03 	bleq	e83b18 <__ccfg+0xe63b70>
    if (node < 1 || node > 25) {
     308:	0b390b3b 	bleq	e42ffc <__ccfg+0xe23054>
     30c:	01111349 	tsteq	r1, r9, asr #6
            proceed Prompt_Recieving_Node;
     310:	0a400112 	beq	1000760 <__ccfg+0xfe07b8>
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00001301 	andeq	r1, r0, r1, lsl #6
     318:	03003439 	movweq	r3, #1081	; 0x439
        char desiredRecordIndex = -1;
     31c:	3b0b3a08 	blcc	2ceb44 <__ccfg+0x2aeb9c>
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     324:	000a0213 	andeq	r0, sl, r3, lsl r2
        char desiredRecordIndex = -1;
     328:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
        messagePtr->recordIndex = desiredRecordIndex;
     330:	0b3b0b3a 	bleq	ec3020 <__ccfg+0xea3078>
     334:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     338:	0b201349 	bleq	805064 <__ccfg+0x7e50bc>
        proceed Transmit_Message;
     33c:	00001301 	andeq	r1, r0, r1, lsl #6
        messagePtr -> senderGroupId = groupId;
     340:	0300053b 	movweq	r0, #1339	; 0x53b
     344:	3b0b3a0e 	blcc	2ceb84 <__ccfg+0x2aebdc>
     348:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        messagePtr -> messageType = currentProtocol;
     34c:	3c000013 	stccc	0, cr0, [r0], {19}
        messagePtr -> requestNumber = randomNumber();
     350:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2a0 <root+0x164>
        messagePtr -> senderId = nodeId;
     354:	0b3a0e03 	bleq	e83b68 <__ccfg+0xe63bc0>
     358:	0b390b3b 	bleq	e4304c <__ccfg+0xe230a4>
     35c:	0b200c27 	bleq	803400 <__ccfg+0x7e3458>
        call transmitter(messagePtr, Menu_Header);
     360:	00001301 	andeq	r1, r0, r1, lsl #6
        messagePtr -> receiverId = receiverId;
     364:	00010b3d 	andeq	r0, r1, sp, lsr fp
        call transmitter(messagePtr, Menu_Header);
     368:	00343e00 	eorseq	r3, r4, r0, lsl #28
     36c:	0b3a0803 	bleq	e82380 <__ccfg+0xe623d8>
     370:	0b390b3b 	bleq	e43064 <__ccfg+0xe230bc>
     374:	00001349 	andeq	r1, r0, r9, asr #6
            proceed Set_Node_ID;
     378:	31012e3f 	tstcc	r1, pc, lsr lr
            break;
     37c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
            proceed Set_Node_ID;
     380:	010a4001 	tsteq	sl, r1
            proceed Find_Neighbours;
     384:	40000013 	andmi	r0, r0, r3, lsl r0
            proceed Create_Record;
     388:	13310034 	teqne	r1, #52	; 0x34
            proceed Delete_Record;
     38c:	00000602 	andeq	r0, r0, r2, lsl #12
            proceed Retrieve_Record;
     390:	31010b41 	tstcc	r1, r1, asr #22
            diag("Reset Local Storage");
     394:	01065513 	tsteq	r6, r3, lsl r5
            break;
     398:	42000013 	andmi	r0, r0, #19
            diag("Reset Local Storage");
     39c:	13310034 	teqne	r1, #52	; 0x34
     3a0:	1d430000 	stclne	0, cr0, [r3, #-0]
     3a4:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     3a8:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     3ac:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     3b0:	4400000b 	strmi	r0, [r0], #-11
     3b4:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     3b8:	0a450000 	beq	11403c0 <__ccfg+0x1120418>
     3bc:	00133100 	andseq	r3, r3, r0, lsl #2
     3c0:	000a4600 	andeq	r4, sl, r0, lsl #12
     3c4:	01111331 	tsteq	r1, r1, lsr r3
     3c8:	2e470000 	cdpcs	0, 4, cr0, cr7, cr0, {0}
     3cc:	11133101 	tstne	r3, r1, lsl #2
     3d0:	40011201 	andmi	r1, r1, r1, lsl #4
     3d4:	0000000a 	andeq	r0, r0, sl
     3d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     3dc:	030b130e 	movweq	r1, #45838	; 0xb30e
     3e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     3e4:	10011106 	andne	r1, r1, r6, lsl #2
     3e8:	02000006 	andeq	r0, r0, #6
     3ec:	0b0b0024 	bleq	2c0484 <__ccfg+0x2a04dc>
     3f0:	0e030b3e 	vmoveq.16	d3[0], r0
     3f4:	16030000 	strne	r0, [r3], -r0
     3f8:	3a0e0300 	bcc	381000 <__ccfg+0x361058>
     3fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     400:	0013490b 	andseq	r4, r3, fp, lsl #18
static void devinit_uart (int devnum) {
     404:	00240400 	eoreq	r0, r4, r0, lsl #8
	adddevfunc (ioreq_uart_a, devnum);
     408:	0b3e0b0b 	bleq	f8303c <__ccfg+0xf63094>
     40c:	00000803 	andeq	r0, r0, r3, lsl #16
void udelay (volatile word n) {
     410:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
     414:	06000013 			; <UNDEFINED> instruction: 0x06000013
	while (n) {
     418:	13490035 	movtne	r0, #36917	; 0x9035
     41c:	0f070000 	svceq	0x00070000
}
     420:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
	while (n--);
     424:	08000013 	stmdaeq	r0, {r0, r1, r4}
     428:	0b0b0113 	bleq	2c087c <__ccfg+0x2a08d4>
     42c:	0b3b0b3a 	bleq	ec311c <__ccfg+0xea3174>
		n--;
     430:	13010b39 	movwne	r0, #6969	; 0x1b39
     434:	0d090000 	stceq	0, cr0, [r9, #-0]
     438:	3a0e0300 	bcc	381040 <__ccfg+0x361098>
void mdelay (volatile word n) {
     43c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     440:	0b13490b 	bleq	4d2874 <__ccfg+0x4b28cc>
	while (n) {
     444:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     448:	000b380b 	andeq	r3, fp, fp, lsl #16
}
     44c:	000d0a00 	andeq	r0, sp, r0, lsl #20
		udelay (999);
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
     454:	0b390b3b 	bleq	e43148 <__ccfg+0xe231a0>
		n--;
     458:	0b381349 	bleq	e05184 <__ccfg+0xde51dc>
     45c:	340b0000 	strcc	r0, [fp], #-0
     460:	3a0e0300 	bcc	381068 <__ccfg+0x3610c0>
     464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void __pi_ondomain (lword d) {
     468:	3f13490b 	svccc	0x0013490b
     46c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		if (__pi_systat.effpdm > 1)
     470:	01010c00 	tsteq	r1, r0, lsl #24
     474:	13011349 	movwne	r1, #4937	; 0x1349
			__pi_systat.effpdm = 1;
     478:	210d0000 	mrscs	r0, (UNDEF: 13)
	PRCMPowerDomainOn (d);
     47c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     480:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     484:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     488:	13490b39 	movtne	r0, #39737	; 0x9b39
     48c:	150f0000 	strne	r0, [pc, #-0]	; 494 <__pi_ondomain+0x2c>
     490:	010c2701 	tsteq	ip, r1, lsl #14
	__pi_systat.ondmns |= d;
     494:	10000013 	andne	r0, r0, r3, lsl r0
     498:	13490005 	movtne	r0, #36869	; 0x9005
}
     49c:	34110000 	ldrcc	r0, [r1], #-0
     4a0:	3a0e0300 	bcc	3810a8 <__ccfg+0x361100>
void __pi_offdomain (lword d) {
     4a4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a8:	3f13490b 	svccc	0x0013490b
	PRCMPowerDomainOff (d);
     4ac:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	01131200 	tsteq	r3, r0, lsl #4
     4b4:	0b3a0b0b 	bleq	e830e8 <__ccfg+0xe63140>
     4b8:	0b39053b 	bleq	e419ac <__ccfg+0xe21a04>
	if (d & PRCM_DOMAIN_RFCORE) {
     4bc:	00001301 	andeq	r1, r0, r1, lsl #6
     4c0:	03000d13 	movweq	r0, #3347	; 0xd13
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c4:	3b0b3a0e 	blcc	2ced04 <__ccfg+0x2aed5c>
     4c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4cc:	000b3813 	andeq	r3, fp, r3, lsl r8
     4d0:	01131400 	tsteq	r3, r0, lsl #8
	__pi_systat.ondmns &= ~d;
     4d4:	0b0b0e03 	bleq	2c3ce8 <__ccfg+0x2a3d40>
     4d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     4dc:	13010b39 	movwne	r0, #6969	; 0x1b39
     4e0:	21150000 	tstcs	r5, r0
void __pi_syserror (word ec, const char *m) {
     4e4:	2f134900 	svccs	0x00134900
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	1600000b 	strne	r0, [r0], -fp
     4ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  __ASM volatile ("cpsid i" : : : "memory");
     4f0:	0b3b0b3a 	bleq	ec31e0 <__ccfg+0xea3238>
     4f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     4f8:	34170000 	ldrcc	r0, [r7], #-0
     4fc:	3a0e0300 	bcc	381104 <__ccfg+0x36115c>
		all_leds_blink;
     500:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     504:	3f13490b 	svccc	0x0013490b
     508:	000a020c 	andeq	r0, sl, ip, lsl #4
     50c:	00341800 	eorseq	r1, r4, r0, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     510:	0b3a0e03 	bleq	e83d24 <__ccfg+0xe63d7c>
     514:	0b39053b 	bleq	e41a08 <__ccfg+0xe21a60>
     518:	0a021349 	beq	85244 <__ccfg+0x6529c>
     51c:	34190000 	ldrcc	r0, [r9], #-0
     520:	3a134700 	bcc	4d2128 <__ccfg+0x4b2180>
     524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (1) {
     528:	000a020b 	andeq	r0, sl, fp, lsl #4
     52c:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     530:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     534:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void tci_run_delay_timer () {
     538:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	setdel = __pi_mintk - __pi_old;
     53c:	01111349 	tsteq	r1, r9, asr #6
     540:	0a400112 	beq	1000990 <__ccfg+0xfe09e8>
     544:	00001301 	andeq	r1, r0, r1, lsl #6
     548:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	00130106 	andseq	r0, r3, r6, lsl #2
     550:	00341c00 	eorseq	r1, r4, r0, lsl #24
     554:	0b3a0803 	bleq	e82568 <__ccfg+0xe625c0>
     558:	0b39053b 	bleq	e41a4c <__ccfg+0xe21aa4>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	00001349 	andeq	r1, r0, r9, asr #6
	sti_tim;
     560:	31001d1d 	tstcc	r0, sp, lsl sp
}
     564:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     568:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     56c:	000b5705 	andeq	r5, fp, r5, lsl #14
     570:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     574:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	cli_aux;
     578:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     57c:	01110b39 	tsteq	r1, r9, lsr fp
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	0a400112 	beq	10009d0 <__ccfg+0xfe0a28>
     584:	00001301 	andeq	r1, r0, r1, lsl #6
     588:	03000a1f 	movweq	r0, #2591	; 0xa1f
     58c:	3b0b3a0e 	blcc	2cedcc <__ccfg+0x2aee24>
	sti_aux;
     590:	000b390b 	andeq	r3, fp, fp, lsl #18
}
     594:	011d2000 	tsteq	sp, r0
     598:	01521331 	cmpeq	r2, r1, lsr r3
     59c:	0b580655 	bleq	1601ef8 <__ccfg+0x15e1f50>
void AONRTCIntHandler () {
     5a0:	0b570559 	bleq	15c1b0c <__ccfg+0x15a1b64>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a4:	00001301 	andeq	r1, r0, r1, lsl #6
     5a8:	31000521 	tstcc	r0, r1, lsr #10
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	22000013 	andcs	r0, r0, #19
		if (__pi_utims [0] == 0)
     5b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     5b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
		if (*(__pi_utims [0])) {
     5b8:	0b590b58 	bleq	1643320 <__ccfg+0x1623378>
     5bc:	13010b57 	movwne	r0, #6999	; 0x1b57
			(*(__pi_utims [0]))--;
     5c0:	0b230000 	bleq	8c05c8 <__ccfg+0x8a0620>
		if (__pi_utims [1] == 0)
     5c4:	00065501 	andeq	r5, r6, r1, lsl #10
		if (*(__pi_utims [1])) {
     5c8:	000a2400 	andeq	r2, sl, r0, lsl #8
			aux_timer_inactive = 0;
     5cc:	01111331 	tsteq	r1, r1, lsr r3
			(*(__pi_utims [1]))--;
     5d0:	1d250000 	stcne	0, cr0, [r5, #-0]
		if (__pi_utims [2] == 0)
     5d4:	52133100 	andspl	r3, r3, #0, 2
		if (*(__pi_utims [2])) {
     5d8:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
			(*(__pi_utims [2]))--;
     5dc:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
		if (__pi_utims [3] != 0) {
     5e0:	2600000b 	strcs	r0, [r0], -fp
			if (*(__pi_utims [3])) {
     5e4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				aux_timer_inactive = 0;
     5e8:	01120111 	tsteq	r2, r1, lsl r1
				(*(__pi_utims [3]))--;
     5ec:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	if (__pi_systat.ledsts) {
     5f0:	13010b57 	movwne	r0, #6999	; 0x1b57
     5f4:	1d270000 	stcne	0, cr0, [r7, #-0]
		if (__pi_systat.ledblc++ == 0) {
     5f8:	11133101 	tstne	r3, r1, lsl #2
     5fc:	58011201 	stmdapl	r1, {r0, r9, ip}
			if (__pi_systat.ledblk) {
     600:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     604:	2800000b 	stmdacs	r0, {r0, r1, r3}
     608:	1331001d 	teqne	r1, #29
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     60c:	01120111 	tsteq	r2, r1, lsl r1
     610:	0b590b58 	bleq	1643378 <__ccfg+0x16233d0>
				if (__pi_systat.ledsts & 0x2)
     614:	00000b57 	andeq	r0, r0, r7, asr fp
     618:	03003429 	movweq	r3, #1065	; 0x429
     61c:	3b0b3a08 	blcc	2cee44 <__ccfg+0x2aee9c>
				if (__pi_systat.ledsts & 0x4)
     620:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				__pi_systat.ledblk = 0;
     624:	00060213 	andeq	r0, r6, r3, lsl r2
     628:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
			if (__pi_systat.fstblk)
     62c:	0b3a0e03 	bleq	e83e40 <__ccfg+0xe63e98>
     630:	0b39053b 	bleq	e41b24 <__ccfg+0xe21b7c>
				__pi_systat.ledblc = 200;
     634:	13010b20 	movwne	r0, #6944	; 0x1b20
	if (events & AON_RTC_EVFLAGS_CH0) {
     638:	0a2b0000 	beq	ac0640 <__ccfg+0xaa0698>
		cli_tim;
     63c:	3a0e0300 	bcc	381244 <__ccfg+0x36129c>
		__pi_new += setdel;
     640:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     644:	2c00000b 	stccs	0, cr0, [r0], {11}
		setdel = 0;
     648:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 598 <tci_run_auxiliary_timer+0x20>
		RISE_N_SHINE;
     64c:	0b3a0e03 	bleq	e83e60 <__ccfg+0xe63eb8>
		__pi_new += setdel;
     650:	0b39053b 	bleq	e41b44 <__ccfg+0xe21b9c>
		RISE_N_SHINE;
     654:	01110c27 	tsteq	r1, r7, lsr #24
     658:	0a400112 	beq	1000aa8 <__ccfg+0xfe0b00>
		aux_timer_inactive = 1;
     65c:	00001301 	andeq	r1, r0, r1, lsl #6
     660:	0300052d 	movweq	r0, #1325	; 0x52d
				if (__pi_systat.ledsts & 0x1)
     664:	3b0b3a0e 	blcc	2ceea4 <__ccfg+0x2aeefc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     668:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     66c:	00060213 	andeq	r0, r6, r3, lsl r2
				if (__pi_systat.ledsts & 0x2)
     670:	010b2e00 	tsteq	fp, r0, lsl #28
     674:	01120111 	tsteq	r2, r1, lsl r1
     678:	00001301 	andeq	r1, r0, r1, lsl #6
				if (__pi_systat.ledsts & 0x8)
     67c:	3100342f 	tstcc	r0, pc, lsr #8
				__pi_systat.ledblk = 1;
     680:	30000013 	andcc	r0, r0, r3, lsl r0
     684:	1331010b 	teqne	r1, #-1073741822	; 0xc0000002
		if (aux_timer_inactive) {
     688:	00000655 	andeq	r0, r0, r5, asr r6
			cli_aux;
     68c:	31003431 	tstcc	r0, r1, lsr r4
     690:	00060213 	andeq	r0, r6, r3, lsl r2
     694:	011d3200 	tsteq	sp, r0, lsl #4
     698:	01521331 	cmpeq	r2, r1, lsr r3
     69c:	0b580655 	bleq	1601ff8 <__ccfg+0x15e2050>
     6a0:	0b570b59 	bleq	15c340c <__ccfg+0x15a3464>
     6a4:	1d330000 	ldcne	0, cr0, [r3, #-0]
     6a8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     6ac:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     6b0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
word tci_update_delay_ticks (Boolean force) {
     6b4:	3400000b 	strcc	r0, [r0], #-11
	cli_tim;
     6b8:	08030005 	stmdaeq	r3, {r0, r2}
     6bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (setdel) {
     6c0:	13490b39 	movtne	r0, #39737	; 0x9b39
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	00000a02 	andeq	r0, r0, r2, lsl #20
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	31000535 	tstcc	r0, r5, lsr r5
     6cc:	00060213 	andeq	r0, r6, r3, lsl r2
     6d0:	00343600 	eorseq	r3, r4, r0, lsl #12
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d4:	0b3a0803 	bleq	e826e8 <__ccfg+0xe62740>
				AON_RTC_O_CH0CMP)) - gettav ());
     6d8:	0b390b3b 	bleq	e433cc <__ccfg+0xe23424>
	return NO;
     6dc:	06021349 	streq	r1, [r2], -r9, asr #6
			setdel = 0;
     6e0:	0b370000 	bleq	dc06e8 <__ccfg+0xda0740>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     6e8:	38000001 	stmdacc	r0, {r0}
}
     6ec:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
		sti_tim;
     6f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		return YES;
     6f4:	0b200b39 	bleq	8033e0 <__ccfg+0x7e3438>
     6f8:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
     6fc:	3a0e0301 	bcc	381308 <__ccfg+0x361360>
     700:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	110c270b 	tstne	ip, fp, lsl #14
	UARTDisable (UART0_BASE);
     708:	40011201 	andmi	r1, r1, r1, lsl #4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	0013010a 	andseq	r0, r3, sl, lsl #2
	UARTDisable (UART0_BASE);
     710:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
	UARTConfigSetExpClk (UART0_BASE,
     714:	0b3a0e03 	bleq	e83f28 <__ccfg+0xe63f80>
     718:	0b39053b 	bleq	e41c0c <__ccfg+0xe21c64>
     71c:	13490c27 	movtne	r0, #39975	; 0x9c27
     720:	01120111 	tsteq	r2, r1, lsl r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	13010a40 	movwne	r0, #6720	; 0x1a40
     728:	053b0000 	ldreq	r0, [fp, #-0]!
     72c:	3a080300 	bcc	201334 <__ccfg+0x1e138c>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     734:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     738:	3c000006 	stccc	0, cr0, [r0], {6}
	urates [0] = rate;
     73c:	0e03012e 	adfeqsp	f0, f3, #0.5
}
     740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     744:	01110b39 	tsteq	r1, r9, lsr fp
     748:	0a400112 	beq	1000b98 <__ccfg+0xfe0bf0>
     74c:	00001301 	andeq	r1, r0, r1, lsl #6
     750:	3f012e3d 	svccc	0x00012e3d
     754:	3a0e030c 	bcc	38138c <__ccfg+0x3613e4>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     75c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     760:	010b2013 	tsteq	fp, r3, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     768:	08030005 	stmdaeq	r3, {r0, r2}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     770:	13490b39 	movtne	r0, #39737	; 0x9b39
	__pi_uart_setrate (urates [0], __pi_uart);
     774:	0a3f0000 	beq	fc077c <__ccfg+0xfa07d4>
     778:	3a080300 	bcc	201380 <__ccfg+0x1e13d8>
     77c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     780:	4000000b 	andmi	r0, r0, fp
     784:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     788:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     78c:	13490b39 	movtne	r0, #39737	; 0x9b39
	switch (operation) {
     790:	00000602 	andeq	r0, r0, r2, lsl #12
static int ioreq_uart_a (int operation, char *buf, int len) {
     794:	03000a41 	movweq	r0, #2625	; 0xa41
     798:	3b0b3a08 	blcc	2cefc0 <__ccfg+0x2af018>
     79c:	110b3905 	tstne	fp, r5, lsl #18
     7a0:	42000001 	andmi	r0, r0, #1
     7a4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				*buf++ = uart_a_read;
     7a8:	01120111 	tsteq	r2, r1, lsl r1
     7ac:	0b590b58 	bleq	1643514 <__ccfg+0x162356c>
			while (len && uart_a_char_available) {
     7b0:	13010b57 	movwne	r0, #6999	; 0x1b57
     7b4:	1d430000 	stclne	0, cr0, [r3, #-0]
     7b8:	11133101 	tstne	r3, r1, lsl #2
			if (len != operation) {
     7bc:	58011201 	stmdapl	r1, {r0, r9, ip}
}
     7c0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     7c4:	4400000b 	strmi	r0, [r0], #-11
			uart_a_disable_int;
     7c8:	0e03012e 	adfeqsp	f0, f3, #0.5
			if (uart_a_char_available) {
     7cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				*buf++ = uart_a_read;
     7d0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			uart_a_disable_int;
     7d4:	0b201349 	bleq	805500 <__ccfg+0x7e5558>
     7d8:	00001301 	andeq	r1, r0, r1, lsl #6
			if (uart_a_char_available) {
     7dc:	03002e45 	movweq	r2, #3653	; 0xe45
     7e0:	3b0b3a0e 	blcc	2cf020 <__ccfg+0x2af078>
				uart_a_enable_int;
     7e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     7e8:	000b2013 	andeq	r2, fp, r3, lsl r0
				goto Redo_rx;
     7ec:	012e4600 			; <UNDEFINED> instruction: 0x012e4600
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f0:	0b3a0e03 	bleq	e84004 <__ccfg+0xe6405c>
     7f4:	0b390b3b 	bleq	e434e8 <__ccfg+0xe23540>
			return -2;
     7f8:	13010b20 	movwne	r0, #6944	; 0x1b20
     7fc:	34470000 	strbcc	r0, [r7], #-0
				uart_a_write (*buf);
     800:	3a080300 	bcc	201408 <__ccfg+0x1e1460>
     804:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (len && uart_a_room_in_tx) {
     808:	0013490b 	andseq	r4, r3, fp, lsl #18
     80c:	010b4800 	tsteq	fp, r0, lsl #16
     810:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
			if (len != operation) {
     814:	030c3f01 	movweq	r3, #52993	; 0xcf01
			uart_a_disable_int;
     818:	3b0b3a0e 	blcc	2cf058 <__ccfg+0x2af0b0>
     81c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			if (uart_a_room_in_tx) {
     820:	1201110c 	andne	r1, r1, #12, 2
     824:	010a4001 	tsteq	sl, r1
				uart_a_enable_int;
     828:	4a000013 	bmi	87c <ioreq_uart_a+0xec>
     82c:	08030005 	stmdaeq	r3, {r0, r2}
				*buf++ = uart_a_read;
     830:	0b3b0b3a 	bleq	ec3520 <__ccfg+0xea3578>
			if (uart_a_room_in_tx) {
     834:	13490b39 	movtne	r0, #39737	; 0x9b39
				uart_a_write (*buf);
     838:	00000602 	andeq	r0, r0, r2, lsl #12
     83c:	0300344b 	movweq	r3, #1099	; 0x44b
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     840:	3b0b3a0e 	blcc	2cf080 <__ccfg+0x2af0d8>
     844:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			uart_a_enable_int;
     848:	000a0213 	andeq	r0, sl, r3, lsl r2
     84c:	000a4c00 	andeq	r4, sl, r0, lsl #24
     850:	0b3a0e03 	bleq	e84064 <__ccfg+0xe640bc>
			return 0;
     854:	0b390b3b 	bleq	e43548 <__ccfg+0xe235a0>
			if (len == UART_CNTRL_SETRATE) {
     858:	00000111 	andeq	r0, r0, r1, lsl r1
				if (__pi_uart_setrate (*((word*)buf),
     85c:	31001d4d 	tstcc	r0, sp, asr #26
     860:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     864:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
				syserror (EREQPAR, "uar");
     868:	000b570b 	andeq	r5, fp, fp, lsl #14
			syserror (ENOOPER, "uai");
     86c:	002e4e00 	eoreq	r4, lr, r0, lsl #28
			if (len == UART_CNTRL_GETRATE) {
     870:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
				return 1;
     874:	0b3b0b3a 	bleq	ec3564 <__ccfg+0xea35bc>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     878:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			syserror (ENOOPER, "uai");
     87c:	01120111 	tsteq	r2, r1, lsl r1
     880:	00000a40 	andeq	r0, r0, r0, asr #20
     884:	0300054f 	movweq	r0, #1359	; 0x54f
     888:	3b0b3a08 	blcc	2cf0b0 <__ccfg+0x2af108>
     88c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     890:	000a0213 	andeq	r0, sl, r3, lsl r2
     894:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
     898:	0b3a0e03 	bleq	e840ac <__ccfg+0xe64104>
     89c:	0b390b3b 	bleq	e43590 <__ccfg+0xe235e8>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	0b200c27 	bleq	803944 <__ccfg+0x7e399c>
void UART0IntHandler () {
     8a4:	00001301 	andeq	r1, r0, r1, lsl #6
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	03000551 	movweq	r0, #1361	; 0x551
     8ac:	3b0b3a08 	blcc	2cf0d4 <__ccfg+0x2af12c>
     8b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     8b4:	52000013 	andpl	r0, r0, #19
     8b8:	0e03012e 	adfeqsp	f0, f3, #0.5
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		RISE_N_SHINE;
     8c4:	13010b20 	movwne	r0, #6944	; 0x1b20
     8c8:	05530000 	ldrbeq	r0, [r3, #-0]
		i_trigger (devevent (UART_A, READ));
     8cc:	3a0e0300 	bcc	3814d4 <__ccfg+0x36152c>
     8d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8d8:	002e5400 	eoreq	r5, lr, r0, lsl #8
     8dc:	0b3a0e03 	bleq	e840f0 <__ccfg+0xe64148>
     8e0:	0b390b3b 	bleq	e435d4 <__ccfg+0xe2362c>
     8e4:	0b200c27 	bleq	803988 <__ccfg+0x7e39e0>
     8e8:	2e550000 	cdpcs	0, 5, cr0, cr5, cr0, {0}
     8ec:	3a0e0301 	bcc	3814f8 <__ccfg+0x361550>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     8f8:	010b2013 	tsteq	fp, r3, lsl r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fc:	56000013 			; <UNDEFINED> instruction: 0x56000013
     900:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     904:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		i_trigger (devevent (UART_A, WRITE));
     908:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	00000b20 	andeq	r0, r0, r0, lsr #22
     910:	03002e57 	movweq	r2, #3671	; 0xe57
		RISE_N_SHINE;
     914:	3b0b3a0e 	blcc	2cf154 <__ccfg+0x2af1ac>
     918:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     91c:	2013490c 	andscs	r4, r3, ip, lsl #18
		i_trigger (devevent (UART_A, WRITE));
     920:	5800000b 	stmdapl	r0, {r0, r1, r3}
     924:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     928:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     92c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     930:	0b201349 	bleq	80565c <__ccfg+0x7e56b4>
     934:	2e590000 	cdpcs	0, 5, cr0, cr9, cr0, {0}
     938:	11133101 	tstne	r3, r1, lsl #2
     93c:	40011201 	andmi	r1, r1, r1, lsl #4
     940:	0000000a 	andeq	r0, r0, sl
     944:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     948:	030b130e 	movweq	r1, #45838	; 0xb30e
}
     94c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     950:	10011106 	andne	r1, r1, r6, lsl #2
     954:	02000006 	andeq	r0, r0, #6
     958:	0b0b0024 	bleq	2c09f0 <__ccfg+0x2a0a48>
     95c:	0e030b3e 	vmoveq.16	d3[0], r0
void __buttons_setirq (int val) {
     960:	16030000 	strne	r0, [r3], -r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	3a0e0300 	bcc	38156c <__ccfg+0x3615c4>
     968:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	0013490b 	andseq	r4, r3, fp, lsl #18
     970:	00240400 	eoreq	r0, r4, r0, lsl #8
     974:	0b3e0b0b 	bleq	f835a8 <__ccfg+0xf63600>
		bn = BUTTON_GPIO (__button_list [i]);
     978:	00000803 	andeq	r0, r0, r3, lsl #16
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97c:	03011305 	movweq	r1, #4869	; 0x1305
     980:	3a0b0b0e 	bcc	2c35c0 <__ccfg+0x2a3618>
     984:	010b3b0b 	tsteq	fp, fp, lsl #22
     988:	06000013 			; <UNDEFINED> instruction: 0x06000013
     98c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     990:	0b381349 	bleq	e056bc <__ccfg+0xde5714>
}
     994:	00000c34 	andeq	r0, r0, r4, lsr ip
     998:	0b000f07 	bleq	45bc <patchGenfskRfe+0x14>
     99c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     9a0:	13490026 	movtne	r0, #36902	; 0x9026
void __pinlist_setirq (int val) {
     9a4:	35090000 	strcc	r0, [r9, #-0]
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	00134900 	andseq	r4, r3, r0, lsl #18
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	000f0a00 	andeq	r0, pc, r0, lsl #20
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	130b0000 	movwne	r0, #45056	; 0xb000
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b8:	3a0b0b01 	bcc	2c35c4 <__ccfg+0x2a361c>
     9bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c0:	0013010b 	andseq	r0, r3, fp, lsl #2
     9c4:	000d0c00 	andeq	r0, sp, r0, lsl #24
     9c8:	0b3a0e03 	bleq	e841dc <__ccfg+0xe64234>
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	0b390b3b 	bleq	e436c0 <__ccfg+0xe23718>
}
     9d0:	0b0b1349 	bleq	2c56fc <__ccfg+0x2a5754>
     9d4:	0b0c0b0d 	bleq	303610 <__ccfg+0x2e3668>
     9d8:	00000b38 	andeq	r0, r0, r8, lsr fp
     9dc:	03000d0d 	movweq	r0, #3341	; 0xd0d
void GPIOIntHandler () {
     9e0:	3b0b3a0e 	blcc	2cf220 <__ccfg+0x2af278>
if (buttons_int) {
     9e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9e8:	000b3813 	andeq	r3, fp, r3, lsl r8
	buttons_disable ();
     9ec:	00340e00 	eorseq	r0, r4, r0, lsl #28
     9f0:	0b3a0e03 	bleq	e84204 <__ccfg+0xe6425c>
	i_trigger ((aword)&__button_list);
     9f4:	0b390b3b 	bleq	e436e8 <__ccfg+0xe23740>
     9f8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 8dc <UART0IntHandler+0x3c>
     9fc:	00000c3c 	andeq	r0, r0, ip, lsr ip
     a00:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     a04:	00130113 	andseq	r0, r3, r3, lsl r1
     a08:	00211000 	eoreq	r1, r1, r0
     a0c:	16110000 	ldrne	r0, [r1], -r0
     a10:	3a0e0300 	bcc	381618 <__ccfg+0x361670>
     a14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a18:	0013490b 	andseq	r4, r3, fp, lsl #18
     a1c:	01151200 	tsteq	r5, r0, lsl #4
	RISE_N_SHINE;
     a20:	13010c27 	movwne	r0, #7207	; 0x1c27
     a24:	05130000 	ldreq	r0, [r3, #-0]
     a28:	00134900 	andseq	r4, r3, r0, lsl #18
if (pin_sensor_int) {
     a2c:	00341400 	eorseq	r1, r4, r0, lsl #8
     a30:	0b3a0e03 	bleq	e84244 <__ccfg+0xe6429c>
	i_trigger ((aword)(&__input_pins));
     a34:	0b39053b 	bleq	e41f28 <__ccfg+0xe21f80>
     a38:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 91c <UART0IntHandler+0x7c>
     a3c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     a40:	0b011315 	bleq	4569c <__ccfg+0x256f4>
     a44:	3b0b3a0b 	blcc	2cf278 <__ccfg+0x2af2d0>
     a48:	010b3905 	tsteq	fp, r5, lsl #18
     a4c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     a50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a58:	13490b39 	movtne	r0, #39737	; 0x9b39
     a5c:	00000b38 	andeq	r0, r0, r8, lsr fp
	__pinsen_disable_and_clear;
     a60:	03011317 	movweq	r1, #4887	; 0x1317
	RISE_N_SHINE;
     a64:	3a0b0b0e 	bcc	2c36a4 <__ccfg+0x2a36fc>
     a68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a6c:	0013010b 	andseq	r0, r3, fp, lsl #2
}
     a70:	00211800 	eoreq	r1, r1, r0, lsl #16
     a74:	0b2f1349 	bleq	bc57a0 <__ccfg+0xba57f8>
     a78:	15190000 	ldrne	r0, [r9, #-0]
     a7c:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     a80:	00130113 	andseq	r0, r3, r3, lsl r1
void system_init () {
     a84:	00341a00 	eorseq	r1, r4, r0, lsl #20
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a88:	0b3a1347 	bleq	e857ac <__ccfg+0xe65804>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8c:	0b390b3b 	bleq	e43780 <__ccfg+0xe237d8>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	00000a02 	andeq	r0, r0, r2, lsl #20
     a94:	0300341b 	movweq	r3, #1051	; 0x41b
     a98:	3b0b3a0e 	blcc	2cf2d8 <__ccfg+0x2af330>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     aa0:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa4:	1c00000a 	stcne	0, cr0, [r0], {10}
     aa8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aac:	0b3b0b3a 	bleq	ec379c <__ccfg+0xea37f4>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab0:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab4:	00000a02 	andeq	r0, r0, r2, lsl #20
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ab8:	0300341d 	movweq	r3, #1053	; 0x41d
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     abc:	3b0b3a0e 	blcc	2cf2fc <__ccfg+0x2af354>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac4:	000a0213 	andeq	r0, sl, r3, lsl r2
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	002e1e00 	eoreq	r1, lr, r0, lsl #28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		pin = (port_confs [i] >> 19) & 0x1f;
     ad0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     ad8:	01111349 	tsteq	r1, r9, asr #6
     adc:	0a400112 	beq	1000f2c <__ccfg+0xfe0f84>
     ae0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
		if (port_confs [i] & 0x80)
     ae4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ae8:	3b0b3a0e 	blcc	2cf328 <__ccfg+0x2af380>
     aec:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (port_confs [i] & 0x40)
     af0:	1201110c 	andne	r1, r1, #12, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af4:	010a4001 	tsteq	sl, r1
     af8:	20000013 	andcs	r0, r0, r3, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b04:	13490b39 	movtne	r0, #39737	; 0x9b39
	all_leds_blink;
     b08:	00000602 	andeq	r0, r0, r2, lsl #12
     b0c:	00001821 	andeq	r1, r0, r1, lsr #16
     b10:	00342200 	eorseq	r2, r4, r0, lsl #4
     b14:	0b3a0803 	bleq	e82b28 <__ccfg+0xe62b80>
     b18:	0b39053b 	bleq	e4200c <__ccfg+0xe22064>
     b1c:	06021349 	streq	r1, [r2], -r9, asr #6
     b20:	34230000 	strtcc	r0, [r3], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b24:	3a080300 	bcc	20172c <__ccfg+0x1e1784>
     b28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b30:	2400000a 	strcs	r0, [r0], #-10
     b34:	08030034 	stmdaeq	r3, {r2, r4, r5}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b40:	0a250000 	beq	940b48 <__ccfg+0x920ba0>
	IntEnable (INT_AON_RTC_COMB);
     b44:	3a0e0300 	bcc	38174c <__ccfg+0x3617a4>
     b48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b4c:	0001110b 	andeq	r1, r1, fp, lsl #2
	__pi_malloc_init ();
     b50:	010b2600 	tsteq	fp, r0, lsl #12
	IntEnable (INT_AON_GPIO_EDGE);
     b54:	01120111 	tsteq	r2, r1, lsl r1
     b58:	00001301 	andeq	r1, r0, r1, lsl #6
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5c:	55010b27 	strpl	r0, [r1, #-2855]	; 0xfffff4d9
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	00130106 	andseq	r0, r3, r6, lsl #2
     b64:	011d2800 	tsteq	sp, r0, lsl #16
     b68:	01521331 	cmpeq	r2, r1, lsr r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6c:	0b580655 	bleq	16024c8 <__ccfg+0x15e2520>
     b70:	0b570559 	bleq	15c20dc <__ccfg+0x15a2134>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b74:	05290000 	streq	r0, [r9, #-0]!
     b78:	00133100 	andseq	r3, r3, r0, lsl #2
     b7c:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
	urates [0] = UART_RATE / 100;
     b80:	0b3a0e03 	bleq	e84394 <__ccfg+0xe643ec>
     b84:	0b39053b 	bleq	e42078 <__ccfg+0xe220d0>
	reinit_uart ();
     b88:	01110c27 	tsteq	r1, r7, lsr #24
	EXTRA_INITIALIZERS;
     b8c:	0a400112 	beq	1000fdc <__ccfg+0xfe1034>
     b90:	00001301 	andeq	r1, r0, r1, lsl #6
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b94:	0300052b 	movweq	r0, #1323	; 0x52b
     b98:	3b0b3a08 	blcc	2cf3c0 <__ccfg+0x2af418>
     b9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba0:	00060213 	andeq	r0, r6, r3, lsl r2
     ba4:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			devinit [i] . init (devinit [i] . param);
     bb0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb4:	01111349 	tsteq	r1, r9, asr #6
     bb8:	0a400112 	beq	1001008 <__ccfg+0xfe1060>
     bbc:	00001301 	andeq	r1, r0, r1, lsl #6
	IntEnable (INT_UART0_COMB);
     bc0:	0300342d 	movweq	r3, #1069	; 0x42d
     bc4:	3b0b3a0e 	blcc	2cf404 <__ccfg+0x2af45c>
}
     bc8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	tci_run_auxiliary_timer ();
     bcc:	00060213 	andeq	r0, r6, r3, lsl r2
		diag ("");
     bd0:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
     bd4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bdc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		diag ("Leftover RAM: %d bytes",
     be0:	13010b20 	movwne	r0, #6944	; 0x1b20
     be4:	052f0000 	streq	r0, [pc, #-0]!	; bec <system_init+0x168>
     be8:	3a080300 	bcc	2017f0 <__ccfg+0x1e1848>
     bec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bf0:	0013490b 	andseq	r4, r3, fp, lsl #18
     bf4:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
     bf8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c00:	01110b39 	tsteq	r1, r9, lsr fp
     c04:	0a400112 	beq	1001054 <__ccfg+0xfe10ac>
     c08:	00001301 	andeq	r1, r0, r1, lsl #6
     c0c:	3f012e31 	svccc	0x00012e31
     c10:	3a08030c 	bcc	201848 <__ccfg+0x1e18a0>
     c14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c18:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     c1c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c20:	010a4001 	tsteq	sl, r1
     c24:	32000013 	andcc	r0, r0, #19
     c28:	08030005 	stmdaeq	r3, {r0, r2}
     c2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c30:	13490b39 	movtne	r0, #39737	; 0x9b39
     c34:	00000a02 	andeq	r0, r0, r2, lsl #20
     c38:	3f002e33 	svccc	0x00002e33
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	3a0e030c 	bcc	381874 <__ccfg+0x3618cc>
     c40:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c44:	110c270b 	tstne	ip, fp, lsl #14
     c48:	40011201 	andmi	r1, r1, r1, lsl #4
     c4c:	3400000a 	strcc	r0, [r0], #-10
     c50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c58:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     c5c:	00000a02 	andeq	r0, r0, r2, lsl #20
__attribute__ ((noreturn)) void __pi_release () {
     c60:	03000535 	movweq	r0, #1333	; 0x535
     c64:	3b0b3a0e 	blcc	2cf4a4 <__ccfg+0x2af4fc>
     c68:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6c:	36000013 			; <UNDEFINED> instruction: 0x36000013
	check_stack_overflow;
     c70:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     c74:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     c78:	030c3f01 	movweq	r3, #52993	; 0xcf01
	update_n_wake (MAX_WORD, NO);
     c7c:	3b0b3a0e 	blcc	2cf4bc <__ccfg+0x2af514>
     c80:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c84:	010b200c 	tsteq	fp, ip
	for_all_tasks (__pi_curr) {
     c88:	38000013 	stmdacc	r0, {r0, r1, r4}
     c8c:	08030005 	stmdaeq	r3, {r0, r2}
     c90:	0b3b0b3a 	bleq	ec3980 <__ccfg+0xea39d8>
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	13490b39 	movtne	r0, #39737	; 0x9b39
	__SLEEP;
     c98:	05390000 	ldreq	r0, [r9, #-0]!
     c9c:	3a0e0300 	bcc	3818a4 <__ccfg+0x3618fc>
     ca0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ca4:	0013490b 	andseq	r4, r3, fp, lsl #18
	system_event_count ++;
     ca8:	00343a00 	eorseq	r3, r4, r0, lsl #20
     cac:	0b3a0803 	bleq	e82cc0 <__ccfg+0xe62d18>
	switch (__pi_systat.effpdm) {
     cb0:	0b390b3b 	bleq	e439a4 <__ccfg+0xe239fc>
     cb4:	00001349 	andeq	r1, r0, r9, asr #6
     cb8:	03000a3b 	movweq	r0, #2619	; 0xa3b
     cbc:	3b0b3a08 	blcc	2cf4e4 <__ccfg+0x2af53c>
			__WFI ();
     cc0:	000b3905 	andeq	r3, fp, r5, lsl #18
     cc4:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     cc8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	check_stack_overflow;
     ccc:	0b3b0b3a 	bleq	ec39bc <__ccfg+0xea3a14>
     cd0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd4:	01120111 	tsteq	r2, r1, lsl r1
     cd8:	13010a40 	movwne	r0, #6720	; 0x1a40
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	053d0000 	ldreq	r0, [sp, #-0]!
			goto Redo;
     ce0:	3a080300 	bcc	2018e8 <__ccfg+0x1e1940>
	for_all_tasks (__pi_curr) {
     ce4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ce8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cec:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
     cf0:	08030034 	stmdaeq	r3, {r2, r4, r5}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf4:	0b3b0b3a 	bleq	ec39e4 <__ccfg+0xea3a3c>
     cf8:	13490b39 	movtne	r0, #39737	; 0x9b39
     cfc:	00000602 	andeq	r0, r0, r2, lsl #12
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d00:	3f002e3f 	svccc	0x00002e3f
     d04:	3a0e030c 	bcc	38193c <__ccfg+0x361994>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d0c:	110c270b 	tstne	ip, fp, lsl #14
			__WFI ();
     d10:	40011201 	andmi	r1, r1, r1, lsl #4
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d14:	4000000a 	andmi	r0, r0, sl
     d18:	0e03012e 	adfeqsp	f0, f3, #0.5
}
     d1c:	0b3b0b3a 	bleq	ec3a0c <__ccfg+0xea3a64>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d20:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d24:	0b201349 	bleq	805a50 <__ccfg+0x7e5aa8>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d28:	00001301 	andeq	r1, r0, r1, lsl #6
     d2c:	03012e41 	movweq	r2, #7745	; 0x1e41
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d30:	3b0b3a0e 	blcc	2cf570 <__ccfg+0x2af5c8>
     d34:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     d38:	2013490c 	andscs	r4, r3, ip, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3c:	0013010b 	andseq	r0, r3, fp, lsl #2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d40:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
     d44:	01111331 	tsteq	r1, r1, lsr r3
     d48:	0a400112 	beq	1001198 <__ccfg+0xfe11f0>
     d4c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	31000543 	tstcc	r0, r3, asr #10
     d54:	00060213 	andeq	r0, r6, r3, lsl r2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d58:	00344400 	eorseq	r4, r4, r0, lsl #8
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d5c:	06021331 			; <UNDEFINED> instruction: 0x06021331
     d60:	1d450000 	stclne	0, cr0, [r5, #-0]
     d64:	11133101 	tstne	r3, r1, lsl #2
     d68:	58011201 	stmdapl	r1, {r0, r9, ip}
     d6c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
			SysCtrlSetRechargeBeforePowerDown
     d70:	4600000b 	strmi	r0, [r0], -fp
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d74:	13310034 	teqne	r1, #52	; 0x34
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d78:	1d470000 	stclne	0, cr0, [r7, #-0]
     d7c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     d84:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     d88:	4800000b 	stmdami	r0, {r0, r1, r3}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8c:	1331000a 	teqne	r1, #10
     d90:	00000111 	andeq	r0, r0, r1, lsl r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d94:	31011d49 	tstcc	r1, r9, asr #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d98:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d9c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     da0:	000b5705 	andeq	r5, fp, r5, lsl #14
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da4:	012e4a00 			; <UNDEFINED> instruction: 0x012e4a00
			while (!(AONWUCPowerStatusGet () &
     da8:	01111331 	tsteq	r1, r1, lsr r3
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dac:	0a400112 	beq	10011fc <__ccfg+0xfe1254>
     db0:	01000000 	mrseq	r0, (UNDEF: 0)
     db4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     db8:	0e030b13 	vmoveq.32	d3[0], r0
     dbc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     dc0:	06100111 			; <UNDEFINED> instruction: 0x06100111
     dc4:	24020000 	strcs	r0, [r2], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dc8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     dcc:	000e030b 	andeq	r0, lr, fp, lsl #6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	00160300 	andseq	r0, r6, r0, lsl #6
     dd4:	0b3a0e03 	bleq	e845e8 <__ccfg+0xe64640>
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd8:	0b390b3b 	bleq	e43acc <__ccfg+0xe23b24>
			reinit_uart ();
     ddc:	00001349 	andeq	r1, r0, r9, asr #6
     de0:	0b002404 	bleq	9df8 <__exidx_end+0x4ecc>
     de4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
     de8:	05000008 	streq	r0, [r0, #-8]
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dec:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     df0:	0b3a0b0b 	bleq	e83a24 <__ccfg+0xe63a7c>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     df8:	0d060000 	stceq	0, cr0, [r6, #-0]
     dfc:	490e0300 	stmdbmi	lr, {r8, r9}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
     e04:	0700000c 	streq	r0, [r0, -ip]
     e08:	0b0b000f 	bleq	2c0e4c <__ccfg+0x2a0ea4>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0c:	26080000 	strcs	r0, [r8], -r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	00134900 	andseq	r4, r3, r0, lsl #18
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	00350900 	eorseq	r0, r5, r0, lsl #18
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e18:	00001349 	andeq	r1, r0, r9, asr #6
     e1c:	0b000f0a 	bleq	4a4c <patchGenfskRfe+0x4a4>
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e20:	0013490b 	andseq	r4, r3, fp, lsl #18
     e24:	01130b00 	tsteq	r3, r0, lsl #22
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e28:	0b3a0b0b 	bleq	e83a5c <__ccfg+0xe63ab4>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2c:	0b390b3b 	bleq	e43b20 <__ccfg+0xe23b78>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e30:	00001301 	andeq	r1, r0, r1, lsl #6
     e34:	03000d0c 	movweq	r0, #3340	; 0xd0c
			PRCMPowerDomainOff (
     e38:	3b0b3a0e 	blcc	2cf678 <__ccfg+0x2af6d0>
     e3c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	__SLEEP;
     e40:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     e44:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
  __ASM volatile ("cpsie i" : : : "memory");
     e48:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
	goto Redo;
     e4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     e50:	0b3b0b3a 	bleq	ec3b40 <__ccfg+0xea3b98>
     e54:	13490b39 	movtne	r0, #39737	; 0x9b39
     e58:	00000b38 	andeq	r0, r0, r8, lsr fp
     e5c:	0300340e 	movweq	r3, #1038	; 0x40e
     e60:	3b0b3a0e 	blcc	2cf6a0 <__ccfg+0x2af6f8>
     e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e68:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     e6c:	0f00000c 	svceq	0x0000000c
     e70:	13490101 	movtne	r0, #37121	; 0x9101
     e74:	00001301 	andeq	r1, r0, r1, lsl #6
     e78:	00002110 	andeq	r2, r0, r0, lsl r1
     e7c:	00161100 	andseq	r1, r6, r0, lsl #2
     e80:	0b3a0e03 	bleq	e84694 <__ccfg+0xe646ec>
     e84:	0b39053b 	bleq	e42378 <__ccfg+0xe223d0>
     e88:	00001349 	andeq	r1, r0, r9, asr #6
     e8c:	27011512 	smladcs	r1, r2, r5, r1
     e90:	0013010c 	andseq	r0, r3, ip, lsl #2
     e94:	00051300 	andeq	r1, r5, r0, lsl #6
     e98:	00001349 	andeq	r1, r0, r9, asr #6
     e9c:	03003414 	movweq	r3, #1044	; 0x414
     ea0:	3b0b3a0e 	blcc	2cf6e0 <__ccfg+0x2af738>
     ea4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ea8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     eac:	1500000c 	strne	r0, [r0, #-12]
     eb0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     eb4:	13011349 	movwne	r1, #4937	; 0x1349
	cli_tim;
     eb8:	13160000 	tstne	r6, #0
     ebc:	0b0e0301 	bleq	381ac8 <__ccfg+0x361b20>
     ec0:	3b0b3a0b 	blcc	2cf6f4 <__ccfg+0x2af74c>
	diag ("PicOS halted");
     ec4:	010b390b 	tsteq	fp, fp, lsl #18
	mdelay (500);
     ec8:	17000013 	smladne	r0, r3, r0, r0
     ecc:	0b0b0117 	bleq	2c1330 <__ccfg+0x2a1388>
	setpowermode (2);
     ed0:	0b3b0b3a 	bleq	ec3bc0 <__ccfg+0xea3c18>
	__PCB = NULL;
     ed4:	13010b39 	movwne	r0, #6969	; 0x1b39
	release;
     ed8:	0d180000 	ldceq	0, cr0, [r8, #-0]
     edc:	3a0e0300 	bcc	381ae4 <__ccfg+0x361b3c>
     ee0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ee4:	0013490b 	andseq	r4, r3, fp, lsl #18
int main (void) {
     ee8:	000d1900 	andeq	r1, sp, r0, lsl #18
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	0b3a0803 	bleq	e82f00 <__ccfg+0xe62f58>
     ef0:	0b390b3b 	bleq	e43be4 <__ccfg+0xe23c3c>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	00001349 	andeq	r1, r0, r9, asr #6
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef8:	03000d1a 	movweq	r0, #3354	; 0xd1a
	system_init ();
     efc:	3b0b3a08 	blcc	2cf724 <__ccfg+0x2af77c>
	tcv_init ();
     f00:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	000b3813 	andeq	r3, fp, r3, lsl r8
     f08:	01131b00 	tsteq	r3, r0, lsl #22
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	0b3a0b0b 	bleq	e83b40 <__ccfg+0xe63b98>
     f10:	0b39053b 	bleq	e42404 <__ccfg+0xe2245c>
     f14:	00001301 	andeq	r1, r0, r1, lsl #6
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f18:	03000d1c 	movweq	r0, #3356	; 0xd1c
     f1c:	3b0b3a0e 	blcc	2cf75c <__ccfg+0x2af7b4>
	delay (16, 0);
     f20:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f24:	000b3813 	andeq	r3, fp, r3, lsl r8
     f28:	01131d00 	tsteq	r3, r0, lsl #26
	__pi_release ();
     f2c:	0b0b0e03 	bleq	2c4740 <__ccfg+0x2a4798>
     f30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f34:	13010b39 	movwne	r0, #6969	; 0x1b39
     f38:	211e0000 	tstcs	lr, r0
     f3c:	2f134900 	svccs	0x00134900
     f40:	1f00000b 	svcne	0x0000000b
     f44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
static void killev (__pi_pcb_t *pid) {
     f48:	0b3b0b3a 	bleq	ec3c38 <__ccfg+0xea3c90>
	wfun = (aword)(pid->code);
     f4c:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i) {
     f50:	00000a02 	andeq	r0, r0, r2, lsl #20
		for (j = 0; j < nevents (i); j++) {
     f54:	3f002e20 	svccc	0x00002e20
     f58:	3a0e030c 	bcc	381b90 <__ccfg+0x361be8>
     f5c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			    || i->Events [j] . Event == wfun
     f60:	110c270b 	tstne	ip, fp, lsl #14
		for (j = 0; j < nevents (i); j++) {
     f64:	40011201 	andmi	r1, r1, r1, lsl #4
			if (i->Events [j] . Event == (aword)pid
     f68:	2100000a 	tstcs	r0, sl
     f6c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; ebc <halt+0x4>
     f70:	0b3a0e03 	bleq	e84784 <__ccfg+0xe647dc>
				wakeupev (i, j);
     f74:	0b39053b 	bleq	e42468 <__ccfg+0xe224c0>
     f78:	13490c27 	movtne	r0, #39975	; 0x9c27
	for_all_tasks (i) {
     f7c:	01120111 	tsteq	r2, r1, lsl r1
}
     f80:	13010a40 	movwne	r0, #6720	; 0x1a40
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	05220000 	streq	r0, [r2, #-0]!
static void qfree (aword *ch) {
     f88:	3a080300 	bcc	201b90 <__ccfg+0x1e1be8>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	cc = (aword*)(mpools + MA_NP);
     f90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	m_setnextp (ch, chunk);
     f94:	23000006 	movwcs	r0, #6
	m_setnextp (cc, ch);
     f98:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
     f9c:	06550152 			; <UNDEFINED> instruction: 0x06550152
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     fa4:	00000b57 	andeq	r0, r0, r7, asr fp
     fa8:	31000524 	tstcc	r0, r4, lsr #10
			m_setnextp (cc, m_nextp (chunk));
     fac:	00060213 	andeq	r0, r6, r3, lsl r2
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb0:	010b2500 	tsteq	fp, r0, lsl #10
     fb4:	00000655 	andeq	r0, r0, r5, asr r6
     fb8:	31003426 	tstcc	r0, r6, lsr #8
     fbc:	00060213 	andeq	r0, r6, r3, lsl r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     fc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fcc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			m_setnextp (cc, m_nextp (chunk));
     fd0:	01120111 	tsteq	r2, r1, lsl r1
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	13010a40 	movwne	r0, #6720	; 0x1a40
     fd8:	34280000 	strtcc	r0, [r8], #-0
     fdc:	3a080300 	bcc	201be4 <__ccfg+0x1e1c3c>
     fe0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fe8:	29000006 	stmdbcs	r0, {r1, r2}
			if (m_size (chunk) >= m_size (ch))
     fec:	08030034 	stmdaeq	r3, {r2, r4, r5}
     ff0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ff4:	13490b39 	movtne	r0, #39737	; 0x9b39
		chunk = m_nextp (chunk))
     ff8:	342a0000 	strtcc	r0, [sl], #-0
     ffc:	3a080300 	bcc	201c04 <__ccfg+0x1e1c5c>
    1000:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1004:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	diag_wait (a);
    1008:	2b00000a 	blcs	1038 <utimer_add+0xc>
	diag_wchar (c, a);
    100c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1010:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1014:	13490b39 	movtne	r0, #39737	; 0x9b39
    1018:	00000602 	andeq	r0, r0, r2, lsl #12
	syserror (ESTATE, "state");
    101c:	3f012e2c 	svccc	0x00012e2c
    1020:	3a0e030c 	bcc	381c58 <__ccfg+0x361cb0>
    1024:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1028:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	010b2013 	tsteq	fp, r3, lsl r0
void utimer_add (address ut) {
    1030:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    1034:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		if (__pi_utims [i] == NULL)
    1038:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1040:	052e0000 	streq	r0, [lr, #-0]!
		syserror (ERESOURCE, "ut a");
    1044:	3a080300 	bcc	201c4c <__ccfg+0x1e1ca4>
	__pi_utims [i] = ut;
    1048:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    104c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1050:	010b2f00 	tsteq	fp, r0, lsl #30
    1054:	01120111 	tsteq	r2, r1, lsl r1
	*t = v;
    1058:	34300000 	ldrtcc	r0, [r0], #-0
	TCI_RUN_AUXILIARY_TIMER;
    105c:	3a0e0300 	bcc	381c64 <__ccfg+0x361cbc>
void update_n_wake (word min, Boolean force) {
    1060:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1068:	3100000a 	tstcc	r0, sl
    106c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1070:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1074:	01110b39 	tsteq	r1, r9, lsr fp
    1078:	1d320000 	ldcne	0, cr0, [r2, #-0]
    107c:	11133101 	tstne	r3, r1, lsl #2
    1080:	58011201 	stmdapl	r1, {r0, r9, ip}
    1084:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1088:	3300000b 	movwcc	r0, #11
    108c:	13310005 	teqne	r1, #5
    1090:	05340000 	ldreq	r0, [r4, #-0]!
    1094:	3a080300 	bcc	201c9c <__ccfg+0x1e1cf4>
    1098:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    109c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10a0:	3500000a 	strcc	r0, [r0, #-10]
		for_all_tasks (i) {
    10a4:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_mintk = znew + min;
    10a8:	03003436 	movweq	r3, #1078	; 0x436
    10ac:	3b0b3a0e 	blcc	2cf8ec <__ccfg+0x2af944>
			if (!twaiting (i))
    10b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    10b4:	37000013 	smladcc	r0, r3, r0, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10b8:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
    10bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    10c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    10c4:	01111349 	tsteq	r1, r9, asr #6
    10c8:	0a400112 	beq	1001518 <__ccfg+0xfe1570>
    10cc:	00001301 	andeq	r1, r0, r1, lsl #6
    10d0:	03012e38 	movweq	r2, #7736	; 0x1e38
    10d4:	3b0b3a08 	blcc	2cf8fc <__ccfg+0x2af954>
    10d8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    10dc:	1201110c 	andne	r1, r1, #12, 2
    10e0:	010a4001 	tsteq	sl, r1
    10e4:	39000013 	stmdbcc	r0, {r0, r1, r4}
				wakeuptm (i);
    10e8:	0e03012e 	adfeqsp	f0, f3, #0.5
    10ec:	0b3b0b3a 	bleq	ec3ddc <__ccfg+0xea3e34>
		for_all_tasks (i) {
    10f0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				d = i->Timer - znew;
    10f4:	13010b20 	movwne	r0, #6944	; 0x1b20
    10f8:	053a0000 	ldreq	r0, [sl, #-0]!
    10fc:	3a080300 	bcc	201d04 <__ccfg+0x1e1d5c>
		if ((word)(__pi_mintk - znew) < min) 
    1100:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1104:	0013490b 	andseq	r4, r3, fp, lsl #18
    1108:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
	__pi_old = znew;
    110c:	0b3a0e03 	bleq	e84920 <__ccfg+0xe64978>
}
    1110:	0b390b3b 	bleq	e43e04 <__ccfg+0xe23e5c>
	TCI_RUN_DELAY_TIMER;
    1114:	13490c27 	movtne	r0, #39975	; 0x9c27
}
    1118:	13010b20 	movwne	r0, #6944	; 0x1b20
    111c:	343c0000 	ldrtcc	r0, [ip], #-0
    1120:	3a080300 	bcc	201d28 <__ccfg+0x1e1d80>
    1124:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1128:	0013490b 	andseq	r4, r3, fp, lsl #18
void proceed (word state) {
    112c:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
	prcdstate (__pi_curr, state);
    1130:	0b3a0803 	bleq	e83144 <__ccfg+0xe6319c>
    1134:	0b390b3b 	bleq	e43e28 <__ccfg+0xe23e80>
	release;
    1138:	0b200c27 	bleq	8041dc <__ccfg+0x7e4234>
    113c:	00001301 	andeq	r1, r0, r1, lsl #6
void __pi_wait (aword event, word state) {
    1140:	31012e3e 	tstcc	r1, lr, lsr lr
	sint j = nevents (__pi_curr);
    1144:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	010a4001 	tsteq	sl, r1
    114c:	3f000013 	svccc	0x00000013
    1150:	13310005 	teqne	r1, #5
		syserror (ENEVENTS, "sw");
    1154:	00000a02 	andeq	r0, r0, r2, lsl #20
    1158:	31011d40 	tstcc	r1, r0, asr #26
	setestate (__pi_curr->Events [j], state, event);
    115c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	incwait (__pi_curr);
    1160:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	setestate (__pi_curr->Events [j], state, event);
    1164:	000b570b 	andeq	r5, fp, fp, lsl #14
}
    1168:	011d4100 	tsteq	sp, r0, lsl #2
    116c:	01521331 	cmpeq	r2, r1, lsr r3
    1170:	0b580655 	bleq	1602acc <__ccfg+0x15e2b24>
void __pi_trigger (aword event) {
    1174:	0b570b59 	bleq	15c3ee0 <__ccfg+0x15a3f38>
	for_all_tasks (i) {
    1178:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
		for (j = 0; j < nevents (i); j++) {
    117c:	11133101 	tstne	r3, r1, lsl #2
    1180:	40011201 	andmi	r1, r1, r1, lsl #4
    1184:	4300000a 	movwmi	r0, #10
    1188:	13310034 	teqne	r1, #52	; 0x34
			if (i->Events [j] . Event == event) {
    118c:	01000000 	mrseq	r0, (UNDEF: 0)
    1190:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1194:	0e030b13 	vmoveq.32	d3[0], r0
				wakeupev (i, j);
    1198:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    119c:	06100111 			; <UNDEFINED> instruction: 0x06100111
	for_all_tasks (i) {
    11a0:	24020000 	strcs	r0, [r2], #-0
}
    11a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
aword __pi_join (aword pid, word st) {
    11a8:	000e030b 	andeq	r0, lr, fp, lsl #6
	for_all_tasks (i) {
    11ac:	00160300 	andseq	r0, r6, r0, lsl #6
    11b0:	0b3a0e03 	bleq	e849c4 <__ccfg+0xe64a1c>
	return 0;
    11b4:	0b390b3b 	bleq	e43ea8 <__ccfg+0xe23f00>
		if ((aword)i == pid) {
    11b8:	00001349 	andeq	r1, r0, r9, asr #6
			__pi_wait (pid, st);
    11bc:	0b002404 	bleq	a1d4 <__exidx_end+0x52a8>
}
    11c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	for_all_tasks (i) {
    11c4:	05000008 	streq	r0, [r0, #-8]
    11c8:	0b0b000f 	bleq	2c120c <__ccfg+0x2a1264>
void delay (word d, word state) {
    11cc:	00001349 	andeq	r1, r0, r9, asr #6
	settstate (__pi_curr, state);
    11d0:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
    11d4:	07000013 	smladeq	r0, r3, r0, r0
    11d8:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
    11dc:	34080000 	strcc	r0, [r8], #-0
	update_n_wake (d, YES);
    11e0:	3a0e0300 	bcc	381de8 <__ccfg+0x361e40>
    11e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_curr->Timer = __pi_old + d;
    11e8:	3f13490b 	svccc	0x0013490b
    11ec:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	inctimer (__pi_curr);
    11f0:	01010900 	tsteq	r1, r0, lsl #18
    11f4:	13011349 	movwne	r1, #4937	; 0x1349
    11f8:	210a0000 	mrscs	r0, (UNDEF: 10)
}
    11fc:	2f134900 	svccs	0x00134900
    1200:	0b00000b 	bleq	1234 <__pi_strlen+0xc>
	if (fun == NULL)
    1204:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		return (int) __pi_curr;
    1208:	0b3b0b3a 	bleq	ec3ef8 <__ccfg+0xea3f50>
    120c:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i)
    1210:	0a020c3f 	beq	84314 <__ccfg+0x6436c>
}
    1214:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
		if (i->code == fun)
    1218:	3a0e0300 	bcc	381e20 <__ccfg+0x361e78>
	for_all_tasks (i)
    121c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1220:	110c270b 	tstne	ip, fp, lsl #14
    1224:	40011201 	andmi	r1, r1, r1, lsl #4
int __pi_strlen (const char *s) {
    1228:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
	for (i = 0; *(s+i) != '\0'; i++);
    122c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 117c <__pi_trigger+0x8>
}
    1230:	0b3a0e03 	bleq	e84a44 <__ccfg+0xe64a9c>
	for (i = 0; *(s+i) != '\0'; i++);
    1234:	0b390b3b 	bleq	e43f28 <__ccfg+0xe23f80>
	while (n--)
    1238:	01110c27 	tsteq	r1, r7, lsr #24
    123c:	0a400112 	beq	100168c <__ccfg+0xfe16e4>
		*dest++ = *src++;
    1240:	340e0000 	strcc	r0, [lr], #-0
    1244:	3a0e0300 	bcc	381e4c <__ccfg+0x361ea4>
    1248:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (n--)
    124c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    1250:	00000006 	andeq	r0, r0, r6
		*dest++ = c;
    1254:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
void adddevfunc (devreqfun_t rf, int loc) {
    1258:	030b130e 	movweq	r1, #45838	; 0xb30e
		syserror (EREQPAR, "addv");
    125c:	100e1b0e 	andne	r1, lr, lr, lsl #22
		syserror (ERESOURCE, "addv");
    1260:	02000006 	andeq	r0, r0, #6
	if (ioreq [loc] != NULL)
    1264:	0b0b0024 	bleq	2c12fc <__ccfg+0x2a1354>
    1268:	0e030b3e 	vmoveq.16	d3[0], r0
		syserror (ERESOURCE, "addv");
    126c:	16030000 	strne	r0, [r3], -r0
	ioreq [loc] = rf;
    1270:	3a0e0300 	bcc	381e78 <__ccfg+0x361ed0>
}
    1274:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1278:	0013490b 	andseq	r4, r3, fp, lsl #18
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1280:	0b3e0b0b 	bleq	f83eb4 <__ccfg+0xf63f0c>
    1284:	00000803 	andeq	r0, r0, r3, lsl #16
    1288:	0b011305 	bleq	45ea4 <__ccfg+0x25efc>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128c:	3b0b3a0b 	blcc	2cfac0 <__ccfg+0x2afb18>
    1290:	010b390b 	tsteq	fp, fp, lsl #18
    1294:	06000013 			; <UNDEFINED> instruction: 0x06000013
		syserror (ENODEVICE, "io");
    1298:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    129c:	0b3b0b3a 	bleq	ec3f8c <__ccfg+0xea3fe4>
	if (len == 0)
    12a0:	13490b39 	movtne	r0, #39737	; 0x9b39
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	00000b38 	andeq	r0, r0, r8, lsr fp
    12a8:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
	if (ret >= 0)
    12ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
	if (ret == -1) {
    12b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12b4:	0b3b0b3a 	bleq	ec3fa4 <__ccfg+0xea3ffc>
		if (retry == WNONE)
    12b8:	13490b39 	movtne	r0, #39737	; 0x9b39
		iowait (dev, operation, retry);
    12bc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    12c0:	35090000 	strcc	r0, [r9, #-0]
    12c4:	00134900 	andseq	r4, r3, r0, lsl #18
			release;
    12c8:	000d0a00 	andeq	r0, sp, r0, lsl #20
	if (ret == -2) {
    12cc:	0b3a0e03 	bleq	e84ae0 <__ccfg+0xe64b38>
		if (retry != WNONE) {
    12d0:	0b390b3b 	bleq	e43fc4 <__ccfg+0xe2401c>
    12d4:	0b0b1349 	bleq	2c6000 <__ccfg+0x2a6058>
			iowait (dev, operation, retry);
    12d8:	0b0c0b0d 	bleq	303f14 <__ccfg+0x2e3f6c>
    12dc:	00000b38 	andeq	r0, r0, r8, lsr fp
			(ioreq [dev]) (NONE, buf, len);
    12e0:	0b000f0b 	bleq	4f14 <plug_null+0x8>
    12e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    12e8:	01010c00 	tsteq	r1, r0, lsl #24
		(ioreq [dev]) (NONE, buf, len);
    12ec:	13011349 	movwne	r1, #4937	; 0x1349
    12f0:	210d0000 	mrscs	r0, (UNDEF: 13)
    12f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
}
    12f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	if (retry != WNONE) {
    12fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		delay (-ret - 2, retry);
    1300:	13490b39 	movtne	r0, #39737	; 0x9b39
    1304:	150f0000 	strne	r0, [pc, #-0]	; 130c <io+0x90>
    1308:	010c2701 	tsteq	ip, r1, lsl #14
    130c:	10000013 	andne	r0, r0, r3, lsl r0
		release;
    1310:	13490005 	movtne	r0, #36869	; 0x9005
    1314:	34110000 	ldrcc	r0, [r1], #-0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1318:	3a0e0300 	bcc	381f20 <__ccfg+0x361f78>
    131c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1320:	3f13490b 	svccc	0x0013490b
    1324:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1328:	01131200 	tsteq	r3, r0, lsl #4
		syserror (ERESOURCE, "mal1");
    132c:	0b3a0b0b 	bleq	e83f60 <__ccfg+0xe63fb8>
    1330:	0b39053b 	bleq	e42824 <__ccfg+0xe2287c>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1334:	00001301 	andeq	r1, r0, r1, lsl #6
    1338:	03000d13 	movweq	r0, #3347	; 0xd13
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133c:	3b0b3a0e 	blcc	2cfb7c <__ccfg+0x2afbd4>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1340:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1344:	000b3813 	andeq	r3, fp, r3, lsl r8
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1348:	01131400 	tsteq	r3, r0, lsl #8
    134c:	0b0b0e03 	bleq	2c4b60 <__ccfg+0x2a4bb8>
}
    1350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1354:	13010b39 	movwne	r0, #6969	; 0x1b39
    1358:	21150000 	tstcs	r5, r0
    135c:	2f134900 	svccs	0x00134900
    1360:	1600000b 	strne	r0, [r0], -fp
    1364:	13470034 	movtne	r0, #28724	; 0x7034
void __pi_free (aword *ch) {
    1368:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    136c:	0a020b39 	beq	84058 <__ccfg+0x640b0>
    1370:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (EMALLOC, "malg");
    1374:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1378:	0e030b13 	vmoveq.32	d3[0], r0
	mcfree [MA_NP] += m_size (ch);
    137c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
		m_size (ch) ^= MALLOC_UMASK;
    1380:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1384:	24020000 	strcs	r0, [r2], #-0
	mcfree [MA_NP] += m_size (ch);
    1388:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	QFREE;
    138c:	000e030b 	andeq	r0, lr, fp, lsl #6
	if (mevent [MA_NP] . nwait) {
    1390:	00160300 	andseq	r0, r6, r0, lsl #6
    1394:	0b3a0e03 	bleq	e84ba8 <__ccfg+0xe64c00>
		trigger ((aword)(&(mevent [MA_NP])));
    1398:	0b390b3b 	bleq	e4408c <__ccfg+0xe240e4>
		mevent [MA_NP] . nwait --;
    139c:	00001349 	andeq	r1, r0, r9, asr #6
}
    13a0:	0b002404 	bleq	a3b8 <__exidx_end+0x548c>
    13a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13a8:	05000008 	streq	r0, [r0, #-8]
    13ac:	13490026 	movtne	r0, #36902	; 0x9026
void kill (aword pid) {
    13b0:	35060000 	strcc	r0, [r6, #-0]
		pid = (aword) __pi_curr;
    13b4:	00134900 	andseq	r4, r3, r0, lsl #18
	j = NULL;
    13b8:	000f0700 	andeq	r0, pc, r0, lsl #14
	for_all_tasks (i) {
    13bc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	syserror (EREQPAR, "kpi");
    13c0:	13080000 	movwne	r0, #32768	; 0x8000
    13c4:	3a0b0b01 	bcc	2c3fd0 <__ccfg+0x2a4028>
		if ((aword)i == pid) {
    13c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13cc:	0013010b 	andseq	r0, r3, fp, lsl #2
				__PCB = i->Next;
    13d0:	000d0900 	andeq	r0, sp, r0, lsl #18
			killev (i);
    13d4:	0b3a0e03 	bleq	e84be8 <__ccfg+0xe64c40>
			ufree (i);
    13d8:	0b390b3b 	bleq	e440cc <__ccfg+0xe24124>
			if (i == __pi_curr)
    13dc:	0b0b1349 	bleq	2c6108 <__ccfg+0x2a6160>
    13e0:	0b0c0b0d 	bleq	30401c <__ccfg+0x2e4074>
				release;
    13e4:	00000b38 	andeq	r0, r0, r8, lsr fp
				j->Next = i->Next;
    13e8:	03000d0a 	movweq	r0, #3338	; 0xd0a
    13ec:	3b0b3a0e 	blcc	2cfc2c <__ccfg+0x2afc84>
    13f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    13f4:	000b3813 	andeq	r3, fp, r3, lsl r8
    13f8:	00340b00 	eorseq	r0, r4, r0, lsl #22
    13fc:	0b3a0e03 	bleq	e84c10 <__ccfg+0xe64c68>
	if (size < 8)
    1400:	0b390b3b 	bleq	e440f4 <__ccfg+0xe2414c>
		_size = 2;
    1404:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 12e8 <io+0x6c>
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1408:	00000c3c 	andeq	r0, r0, ip, lsr ip
		_size = (((aword)size) + 3) >> 2;
    140c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1410:	00130113 	andseq	r0, r3, r3, lsl r1
		_size = (((aword)size) + 3) >> 2;
    1414:	00210d00 	eoreq	r0, r1, r0, lsl #26
		if (mevent [MA_NP] . nfail != 255)
    1418:	160e0000 	strne	r0, [lr], -r0
    141c:	3a0e0300 	bcc	382024 <__ccfg+0x36207c>
			mevent [MA_NP] . nfail ++;
    1420:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		mnfree [MA_NP] = 0;
    1424:	0013490b 	andseq	r4, r3, fp, lsl #18
    1428:	01150f00 	tsteq	r5, r0, lsl #30
		if (m_magic (chunk) != MALLOC_MAGIC)
    142c:	13010c27 	movwne	r0, #7207	; 0x1c27
    1430:	05100000 	ldreq	r0, [r0, #-0]
			syserror (EMALLOC, "malc");
    1434:	00134900 	andseq	r4, r3, r0, lsl #18
    1438:	00341100 	eorseq	r1, r4, r0, lsl #2
		if (m_size (chunk) >= _size)
    143c:	0b3a0e03 	bleq	e84c50 <__ccfg+0xe64ca8>
    1440:	0b39053b 	bleq	e42934 <__ccfg+0xe2298c>
		chunk = m_nextp (chunk)) {
    1444:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1328 <__pi_malloc_init+0x10>
		m_setnextp (cc, m_nextp (chunk));
    1448:	00000c3c 	andeq	r0, r0, ip, lsr ip
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144c:	0b011312 	bleq	4609c <__ccfg+0x260f4>
    1450:	3b0b3a0b 	blcc	2cfc84 <__ccfg+0x2afcdc>
			m_size (chunk) = _size;
    1454:	010b3905 	tsteq	fp, r5, lsl #18
			cc = chunk + _size + m_hdrlen;
    1458:	13000013 	movwne	r0, #19
    145c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			m_size (cc) = waste - m_hdrlen;
    1460:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			QFREE;
    1464:	13490b39 	movtne	r0, #39737	; 0x9b39
		mevent [MA_NP] . nfail = 0;
    1468:	00000b38 	andeq	r0, r0, r8, lsr fp
		mcfree [MA_NP] -= m_size (chunk);
    146c:	03011314 	movweq	r1, #4884	; 0x1314
    1470:	3a0b0b0e 	bcc	2c40b0 <__ccfg+0x2a4108>
    1474:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1478:	0013010b 	andseq	r0, r3, fp, lsl #2
		m_size (chunk) |= MALLOC_UMASK;
    147c:	00211500 	eoreq	r1, r1, r0, lsl #10
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1480:	0b2f1349 	bleq	bc61ac <__ccfg+0xba6204>
		m_size (chunk) |= MALLOC_UMASK;
    1484:	34160000 	ldrcc	r0, [r6], #-0
			mnfree [MA_NP] = mcfree [MA_NP];
    1488:	3a134700 	bcc	4d3090 <__ccfg+0x4b30e8>
}
    148c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1490:	000a020b 	andeq	r0, sl, fp, lsl #4
    1494:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    1498:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    149c:	0b3b0b3a 	bleq	ec418c <__ccfg+0xea41e4>
    14a0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    14a4:	01120111 	tsteq	r2, r1, lsl r1
aword __pi_fork (fsmcode func, aword data) {
    14a8:	13010a40 	movwne	r0, #6720	; 0x1a40
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14ac:	05180000 	ldreq	r0, [r8, #-0]
    14b0:	3a080300 	bcc	2020b8 <__ccfg+0x1e2110>
    14b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((j = __PCB) == NULL)
    14b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	i->Next = NULL;
    14bc:	19000006 	stmdbne	r0, {r1, r2}
	i->data = data;
    14c0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		if ((j = __PCB) == NULL)
    14c4:	0b3b0b3a 	bleq	ec41b4 <__ccfg+0xea420c>
}
    14c8:	13490b39 	movtne	r0, #39737	; 0x9b39
			for (; j->Next != NULL; j = j->Next);
    14cc:	00000602 	andeq	r0, r0, r2, lsl #12
    14d0:	0300341a 	movweq	r3, #1050	; 0x41a
	return (aword) i;
    14d4:	3b0b3a08 	blcc	2cfcfc <__ccfg+0x2afd54>
    14d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (mevent [MA_NP] . nwait != 255)
    14dc:	1b000013 	blne	1530 <diag+0x3c>
    14e0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    14e4:	0b3b0b3a 	bleq	ec41d4 <__ccfg+0xea422c>
		mevent [MA_NP] . nwait ++;
    14e8:	13490b39 	movtne	r0, #39737	; 0x9b39
	wait ((aword)(&(mevent [MA_NP])), state);
    14ec:	00000602 	andeq	r0, r0, r2, lsl #12
    14f0:	31001d1c 	tstcc	r0, ip, lsl sp
void diag (const char *mess, ...) {
    14f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    14f8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    14fc:	000b570b 	andeq	r5, fp, fp, lsl #14
	diag_disable_int (a, is);
    1500:	011d1d00 	tsteq	sp, r0, lsl #26
    1504:	01521331 	cmpeq	r2, r1, lsr r3
    1508:	0b580655 	bleq	1602e64 <__ccfg+0x15e2ebc>
				d = (bc == 16) ? 10000 : 1000000000;
    150c:	0b570b59 	bleq	15c4278 <__ccfg+0x15a42d0>
	diag_disable_int (a, is);
    1510:	051e0000 	ldreq	r0, [lr, #-0]
	while (*mess != '\0') {
    1514:	02133100 	andseq	r3, r3, #0, 2
	dgout ('\r');
    1518:	1f000006 	svcne	0x00000006
	dgout ('\n');
    151c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 146c <__pi_malloc+0x6c>
    1520:	0b3a0e03 	bleq	e84d34 <__ccfg+0xe64d8c>
    1524:	0b390b3b 	bleq	e44218 <__ccfg+0xe24270>
	diag_wait (a);
    1528:	01120111 	tsteq	r2, r1, lsl r1
	diag_enable_int (a, is);
    152c:	00000a40 	andeq	r0, r0, r0, asr #20
    1530:	03002e20 	movweq	r2, #3616	; 0xe20
}
    1534:	3b0b3a0e 	blcc	2cfd74 <__ccfg+0x2afdcc>
    1538:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    153c:	000b200c 	andeq	r2, fp, ip
		if (*mess == '%') {
    1540:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    1544:	0b3a0e03 	bleq	e84d58 <__ccfg+0xe64db0>
			if (*mess == 'l') {
    1548:	0b390b3b 	bleq	e4423c <__ccfg+0xe24294>
    154c:	13490c27 	movtne	r0, #39975	; 0x9c27
				mess++;
    1550:	00000b20 	andeq	r0, r0, r0, lsr #22
				val = va_arg (ap, lword);
    1554:	03000522 	movweq	r0, #1314	; 0x522
				bc = 32;
    1558:	3b0b3a0e 	blcc	2cfd98 <__ccfg+0x2afdf0>
				bc = 16;
    155c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			switch (*mess) {
    1560:	00000013 	andeq	r0, r0, r3, lsl r0
    1564:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1568:	030b130e 	movweq	r1, #45838	; 0xb30e
				dgout ('%');
    156c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1570:	10011106 	andne	r1, r1, r6, lsl #2
				dgout (*mess);
    1574:	02000006 	andeq	r0, r0, #6
    1578:	0b0b0024 	bleq	2c1610 <__ccfg+0x2a1668>
			switch (*mess) {
    157c:	0e030b3e 	vmoveq.16	d3[0], r0
					v = __pi_hex_enc_table [
    1580:	16030000 	strne	r0, [r3], -r0
					i += 4;
    1584:	3a0e0300 	bcc	38218c <__ccfg+0x3621e4>
					(val >> (bc - i)) & 0xf];
    1588:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    158c:	0013490b 	andseq	r4, r3, fp, lsl #18
					dgout (v);
    1590:	00240400 	eoreq	r0, r4, r0, lsl #8
    1594:	0b3e0b0b 	bleq	f841c8 <__ccfg+0xf64220>
				while (i < bc) {
    1598:	00000803 	andeq	r0, r0, r3, lsl #16
			mess++;
    159c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
					d /= 10;
    15a0:	06000013 			; <UNDEFINED> instruction: 0x06000013
				if ((val >> (bc - 1)) & 1) {
    15a4:	13490035 	movtne	r0, #36917	; 0x9035
    15a8:	13070000 	movwne	r0, #28672	; 0x7000
					dgout ('-');
    15ac:	3a0b0b01 	bcc	2c41b8 <__ccfg+0x2a4210>
    15b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
						val |= 0xffff0000;
    15b4:	0013010b 	andseq	r0, r3, fp, lsl #2
    15b8:	000d0800 	andeq	r0, sp, r0, lsl #16
    15bc:	0b3a0e03 	bleq	e84dd0 <__ccfg+0xe64e28>
				d = (bc == 16) ? 10000 : 1000000000;
    15c0:	0b390b3b 	bleq	e442b4 <__ccfg+0xe2430c>
    15c4:	0b0b1349 	bleq	2c62f0 <__ccfg+0x2a6348>
    15c8:	0b0c0b0d 	bleq	304204 <__ccfg+0x2e425c>
					v = (word) (val / d);
    15cc:	00000b38 	andeq	r0, r0, r8, lsr fp
					if (v || d == 1) break;
    15d0:	03000d09 	movweq	r0, #3337	; 0xd09
    15d4:	3b0b3a0e 	blcc	2cfe14 <__ccfg+0x2afe6c>
					d /= 10;
    15d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				d = (bc == 16) ? 10000 : 1000000000;
    15dc:	000b3813 	andeq	r3, fp, r3, lsl r8
					dgout (v + '0');
    15e0:	00340a00 	eorseq	r0, r4, r0, lsl #20
    15e4:	0b3a0e03 	bleq	e84df8 <__ccfg+0xe64e50>
    15e8:	0b390b3b 	bleq	e442dc <__ccfg+0xe24334>
					d /= 10;
    15ec:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 14d0 <__pi_fork+0x28>
					val = val - (v * d);
    15f0:	00000c3c 	andeq	r0, r0, ip, lsr ip
					if (d == 0) break;
    15f4:	0b000f0b 	bleq	5228 <__exidx_end+0x2fc>
					v = (word) (val / d);
    15f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    15fc:	01010c00 	tsteq	r1, r0, lsl #24
				if (bc == 16)
    1600:	13011349 	movwne	r1, #4937	; 0x1349
				d = (bc == 16) ? 10000 : 1000000000;
    1604:	210d0000 	mrscs	r0, (UNDEF: 13)
					val &= 0xffff;
    1608:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
					dgout (*s);
    160c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
					s++;
    1610:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				while (*s != '\0') {
    1614:	13490b39 	movtne	r0, #39737	; 0x9b39
    1618:	150f0000 	strne	r0, [pc, #-0]	; 1620 <diag+0x12c>
			dgout (*mess++);
    161c:	010c2701 	tsteq	ip, r1, lsl #14
    1620:	10000013 	andne	r0, r0, r3, lsl r0
    1624:	13490005 	movtne	r0, #36869	; 0x9005
    1628:	34110000 	ldrcc	r0, [r1], #-0
    162c:	3a0e0300 	bcc	382234 <__ccfg+0x36228c>
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1630:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1634:	3f13490b 	svccc	0x0013490b
    1638:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    163c:	01131200 	tsteq	r3, r0, lsl #4
	^ entropy
    1640:	0b3a0b0b 	bleq	e84274 <__ccfg+0xe642cc>
}
    1644:	0b39053b 	bleq	e42b38 <__ccfg+0xe22b90>
    1648:	00001301 	andeq	r1, r0, r1, lsl #6
    164c:	03000d13 	movweq	r0, #3347	; 0xd13
    1650:	3b0b3a0e 	blcc	2cfe90 <__ccfg+0x2afee8>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1654:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	word cs = size + hblenb;
    1658:	000b3813 	andeq	r3, fp, r3, lsl r8
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165c:	01131400 	tsteq	r3, r0, lsl #8
    1660:	0b0b0e03 	bleq	2c4e74 <__ccfg+0x2a4ecc>
	p -> length = size;
    1664:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1668:	13010b39 	movwne	r0, #6969	; 0x1b39
	if (p->attributes.b.queued) {
    166c:	21150000 	tstcs	r5, r0
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1670:	2f134900 	svccs	0x00134900
    1674:	1600000b 	strne	r0, [r0], -fp
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1678:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		p->attributes.b.queued = 0;
    167c:	0b3b0b3a 	bleq	ec436c <__ccfg+0xea43c4>
    1680:	13490b39 	movtne	r0, #39737	; 0x9b39
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1684:	00000a02 	andeq	r0, r0, r2, lsl #20
	deq (p);	// Remove from queue
    1688:	47003417 	smladmi	r0, r7, r4, r3
}
    168c:	3b0b3a13 	blcc	2cfee0 <__ccfg+0x2aff38>
	tfree ((address)p);
    1690:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1694:	1800000a 	stmdane	r0, {r1, r3}
    1698:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 15e8 <diag+0xf4>
    169c:	0b3a0e03 	bleq	e84eb0 <__ccfg+0xe64f08>
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a0:	0b390b3b 	bleq	e44394 <__ccfg+0xe243ec>
    16a4:	01110c27 	tsteq	r1, r7, lsr #24
	if (q_empty (q))
    16a8:	0a400112 	beq	1001af8 <__ccfg+0xfe1b50>
    16ac:	00001301 	andeq	r1, r0, r1, lsl #6
		trigger (q);
    16b0:	03000519 	movweq	r0, #1305	; 0x519
	if (p->attributes.b.urgent) {
    16b4:	3b0b3a08 	blcc	2cfedc <__ccfg+0x2aff34>
		p->u.bqueue.next = q->next;
    16b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		p->u.bqueue.prev = q;
    16bc:	00060213 	andeq	r0, r6, r3, lsl r2
		q->next->prev = (qitem_t*) p;
    16c0:	00051a00 	andeq	r1, r5, r0, lsl #20
	p->attributes.b.queued = 1;
    16c4:	0b3a0e03 	bleq	e84ed8 <__ccfg+0xe64f30>
    16c8:	0b390b3b 	bleq	e443bc <__ccfg+0xe24414>
}
    16cc:	06021349 	streq	r1, [r2], -r9, asr #6
		p->u.bqueue.prev = q->prev;
    16d0:	0a1b0000 	beq	6c16d8 <__ccfg+0x6a1730>
		q->prev->next = (qitem_t*) p;
    16d4:	3a0e0300 	bcc	3822dc <__ccfg+0x362334>
		q->prev = (qitem_t*) p;
    16d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    16dc:	0001110b 	andeq	r1, r1, fp, lsl #2
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e0:	011d1c00 	tsteq	sp, r0, lsl #24
	deq (p);	// Soft dequeue, timer and hook left intact
    16e4:	01521331 	cmpeq	r2, r1, lsr r3
	switch (dv) {
    16e8:	0b580655 	bleq	1603044 <__ccfg+0x15e309c>
    16ec:	0b570b59 	bleq	15c4458 <__ccfg+0x15a44b0>
    16f0:	00001301 	andeq	r1, r0, r1, lsl #6
    16f4:	3100051d 	tstcc	r0, sp, lsl r5
			p->attributes.b.urgent = 1;
    16f8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    16fc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			verify_ses (p, "dispose ses");
    1700:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1704:	0b590b58 	bleq	164446c <__ccfg+0x16244c4>
    1708:	00000b57 	andeq	r0, r0, r7, asr fp
    170c:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    1710:	3b0b3a0e 	blcc	2cff50 <__ccfg+0x2affa8>
			verify_phy (p, "dispose phy");
    1714:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1718:	2013490c 	andscs	r4, r3, ip, lsl #18
}
    171c:	2000000b 	andcs	r0, r0, fp
			enq (oqueues [p->attributes.b.phys], p);
    1720:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			p->attributes.b.urgent = 1;
    1724:	0b3b0b3a 	bleq	ec4414 <__ccfg+0xea446c>
    1728:	13490b39 	movtne	r0, #39737	; 0x9b39
			verify_phy (p, "dispose phy");
    172c:	01000000 	mrseq	r0, (UNDEF: 0)
    1730:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1734:	0e030b13 	vmoveq.32	d3[0], r0
    1738:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    173c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1740:	24020000 	strcs	r0, [r2], #-0
			enq (oqueues [p->attributes.b.phys], p);
    1744:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1748:	000e030b 	andeq	r0, lr, fp, lsl #6
}
    174c:	00160300 	andseq	r0, r6, r0, lsl #6
			rlp (p);
    1750:	0b3a0e03 	bleq	e84f64 <__ccfg+0xe64fbc>
}
    1754:	0b390b3b 	bleq	e44448 <__ccfg+0xe244a0>
    1758:	00001349 	andeq	r1, r0, r9, asr #6
    175c:	0b002404 	bleq	a774 <__exidx_end+0x5848>
    1760:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1764:	05000008 	streq	r0, [r0, #-8]
    1768:	13490026 	movtne	r0, #36902	; 0x9026
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    176c:	35060000 	strcc	r0, [r6, #-0]
	if (b->attributes.b.outgoing) {
    1770:	00134900 	andseq	r4, r3, r0, lsl #18
	b = header (p);
    1774:	01130700 	tsteq	r3, r0, lsl #14
	if (b->attributes.b.outgoing) {
    1778:	0b3a0b0b 	bleq	e843ac <__ccfg+0xe64404>
		verify_ses (b, "tcv02");
    177c:	0b390b3b 	bleq	e44470 <__ccfg+0xe244c8>
    1780:	00001301 	andeq	r1, r0, r1, lsl #6
    1784:	03000d08 	movweq	r0, #3336	; 0xd08
    1788:	3b0b3a0e 	blcc	2cffc8 <__ccfg+0x2b0020>
    178c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		verify_plg (b, tcv_out, "tcv03");
    1790:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1794:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1798:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    179c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    17a0:	0b3b0b3a 	bleq	ec4490 <__ccfg+0xea44e8>
    17a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    17a8:	00000b38 	andeq	r0, r0, r8, lsr fp
    17ac:	0300340a 	movweq	r3, #1034	; 0x40a
    17b0:	3b0b3a0e 	blcc	2cfff0 <__ccfg+0x2b0048>
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    17b8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		dispose (b, plugins [b->attributes.b.plugin] ->
    17bc:	0b00000c 	bleq	17f4 <tcv_open+0x18>
		rlp (b);
    17c0:	0b0b000f 	bleq	2c1804 <__ccfg+0x2a185c>
}
    17c4:	00001349 	andeq	r1, r0, r9, asr #6
		rlp (b);
    17c8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    17cc:	00130113 	andseq	r0, r3, r3, lsl r1
    17d0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    17d4:	160e0000 	strne	r0, [lr], -r0
    17d8:	3a0e0300 	bcc	3823e0 <__ccfg+0x362438>
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    17e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    17e4:	01150f00 	tsteq	r5, r0, lsl #30
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17e8:	13010c27 	movwne	r0, #7207	; 0x1c27
	va_start (ap, plid);
    17ec:	05100000 	ldreq	r0, [r0, #-0]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f0:	00134900 	andseq	r4, r3, r0, lsl #18
    17f4:	00341100 	eorseq	r1, r4, r0, lsl #2
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17f8:	0b3a0e03 	bleq	e8500c <__ccfg+0xe65064>
    17fc:	0b39053b 	bleq	e42cf0 <__ccfg+0xe22d48>
    1800:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 16e4 <dispose+0x4>
    1804:	00000c3c 	andeq	r0, r0, ip, lsr ip
			syserror (ENODEVICE, "tcv04");
    1808:	0b011312 	bleq	46458 <__ccfg+0x264b0>
		syserror (EMALLOC, "tcv05");
    180c:	3b0b3a0b 	blcc	2d0040 <__ccfg+0x2b0098>
	attp.b.outgoing = 1;
    1810:	010b3905 	tsteq	fp, r5, lsl #18
    1814:	13000013 	movwne	r0, #19
    1818:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    181c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1820:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (descriptors [fd] == NULL)
    1824:	00000b38 	andeq	r0, r0, r8, lsr fp
    1828:	03011314 	movweq	r1, #4884	; 0x1314
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    182c:	3a0b0b0e 	bcc	2c446c <__ccfg+0x2a44c4>
		return ERROR;
    1830:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1834:	0013010b 	andseq	r0, r3, fp, lsl #2
    1838:	00211500 	eoreq	r1, r1, r0, lsl #10
    183c:	0b2f1349 	bleq	bc6568 <__ccfg+0xba65c0>
	s->attpattern.b.session = fd;
    1840:	34160000 	ldrcc	r0, [r6], #-0
    1844:	3a0e0300 	bcc	38244c <__ccfg+0x3624a4>
	descriptors [fd] = s;
    1848:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	q_init (&(s->rqueue));
    184c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1850:	1700000a 	strne	r0, [r0, -sl]
    1854:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 17a4 <tcv_endp+0x38>
    1858:	0b3a0e03 	bleq	e8506c <__ccfg+0xe650c4>
    185c:	0b390b3b 	bleq	e44550 <__ccfg+0xe245a8>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1860:	01120111 	tsteq	r2, r1, lsl r1
    1864:	00000a40 	andeq	r0, r0, r0, asr #20
    1868:	3f012e18 	svccc	0x00012e18
	descriptors [fd] = s;
    186c:	3a0e030c 	bcc	3824a4 <__ccfg+0x3624fc>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1870:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1874:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	if (s == NULL)
    1878:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		syserror (EMALLOC, "tcv05");
    187c:	010a4001 	tsteq	sl, r1
    1880:	19000013 	stmdbne	r0, {r0, r1, r4}
    1884:	08030005 	stmdaeq	r3, {r0, r2}
    1888:	0b3b0b3a 	bleq	ec4578 <__ccfg+0xea45d0>
    188c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1890:	00000602 	andeq	r0, r0, r2, lsl #12
    1894:	0300051a 	movweq	r0, #1306	; 0x51a
    1898:	3b0b3a08 	blcc	2d00c0 <__ccfg+0x2b0118>
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    189c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a0:	000a0213 	andeq	r0, sl, r3, lsl r2
    18a4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    18a8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	plugins [ord] = pl;
    18ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	return 0;
    18b0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		return ERROR;
    18b4:	01111349 	tsteq	r1, r9, asr #6
}
    18b8:	0a400112 	beq	1001d08 <__ccfg+0xfe1d60>
    18bc:	00001301 	andeq	r1, r0, r1, lsl #6
	verify_fds (fd, "tcv16");
    18c0:	0300051c 	movweq	r0, #1308	; 0x51c
								Boolean urg) {
    18c4:	3b0b3a08 	blcc	2d00ec <__ccfg+0x2b0144>
    18c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	verify_fds (fd, "tcv16");
    18cc:	00060213 	andeq	r0, r6, r3, lsl r2
    18d0:	002e1d00 	eoreq	r1, lr, r0, lsl #26
    18d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	verify_pld (s, tcv_frm, "tcv17");
    18d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    18dc:	01110b39 	tsteq	r1, r9, lsr fp
    18e0:	0a400112 	beq	1001d30 <__ccfg+0xfe1d88>
    18e4:	341e0000 	ldrcc	r0, [lr], #-0
    18e8:	3a080300 	bcc	2024f0 <__ccfg+0x1e2548>
    18ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18f4:	1f000006 	svcne	0x00000006
	ptrs.head = (word) fd;
    18f8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
	ptrs.tail = (word) urg;
    18fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1900:	01110b39 	tsteq	r1, r9, lsr fp
    1904:	1d200000 	stcne	0, cr0, [r0, #-0]
		if (state != WNONE) {
    1908:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    190c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
}
    1910:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			when (eid, state);
    1914:	0013010b 	andseq	r0, r3, fp, lsl #2
    1918:	00052100 	andeq	r2, r5, r0, lsl #2
			release;
    191c:	00001331 	andeq	r1, r0, r1, lsr r3
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1920:	31011d22 	tstcc	r1, r2, lsr #26
    1924:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1928:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    192c:	000b5705 	andeq	r5, fp, r5, lsl #14
    1930:	00052300 	andeq	r2, r5, r0, lsl #6
    1934:	0b3a0e03 	bleq	e85148 <__ccfg+0xe651a0>
    1938:	0b390b3b 	bleq	e4462c <__ccfg+0xe24684>
    193c:	06021349 	streq	r1, [r2], -r9, asr #6
		if (state != WNONE) {
    1940:	0a240000 	beq	901948 <__ccfg+0x8e19a0>
    1944:	3a0e0300 	bcc	38254c <__ccfg+0x3625a4>
			tmwait (state);
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    194c:	0001110b 	andeq	r1, r1, fp, lsl #2
	b->attributes = s->attpattern;
    1950:	011d2500 	tsteq	sp, r0, lsl #10
		b->attributes.b.urgent = 1;
    1954:	01521331 	cmpeq	r2, r1, lsr r3
    1958:	0b580655 	bleq	16032b4 <__ccfg+0x15e330c>
	b->u.pointers.head = ptrs.head;
    195c:	0b570b59 	bleq	15c46c8 <__ccfg+0x15a4720>
	b->u.pointers.tail = length;
    1960:	05260000 	streq	r0, [r6, #-0]!
	return (address) (b + 1);
    1964:	02133100 	andseq	r3, r3, #0, 2
    1968:	27000006 	strcs	r0, [r0, -r6]
    196c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1970:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1974:	0b590b58 	bleq	16446dc <__ccfg+0x1624734>
    1978:	13010b57 	movwne	r0, #6999	; 0x1b57
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    197c:	1d280000 	stcne	0, cr0, [r8, #-0]
    1980:	11133101 	tstne	r3, r1, lsl #2
    1984:	58011201 	stmdapl	r1, {r0, r9, ip}
	verify_fph (phy, "tcv23");
    1988:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    198c:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    1990:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 18e0 <tcv_wnps+0x20>
    1994:	0b3a0e03 	bleq	e851a8 <__ccfg+0xe65200>
}
    1998:	0b390b3b 	bleq	e4468c <__ccfg+0xe246e4>
	return (physical [phy]) (opt, arg);
    199c:	01111349 	tsteq	r1, r9, asr #6
    19a0:	0a400112 	beq	1001df0 <__ccfg+0xfe1e48>
    19a4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19a8:	3a0e0301 	bcc	3825b4 <__ccfg+0x36260c>
	if (opt < 0) {
    19ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (fd < 0)
    19b0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		if (opt == PHYSOPT_PLUGINFO) {
    19b4:	010a4001 	tsteq	sl, r1
			if (fd >= TCV_MAX_PLUGS)
    19b8:	2b000013 	blcs	1a0c <tcvp_new+0x4>
			if ((p = plugins [fd]) == NULL)
    19bc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    19c0:	0b3b0b3a 	bleq	ec46b0 <__ccfg+0xea4708>
}
    19c4:	0b200b39 	bleq	8046b0 <__ccfg+0x7e4708>
		if (fd >= TCV_MAX_PHYS)
    19c8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
		return physinfo [fd];
    19cc:	3a0e0301 	bcc	3825d8 <__ccfg+0x362630>
    19d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	verify_fds (fd, "tcv22");
    19d4:	110c270b 	tstne	ip, fp, lsl #14
    19d8:	40011201 	andmi	r1, r1, r1, lsl #4
    19dc:	0013010a 	andseq	r0, r3, sl, lsl #2
    19e0:	010b2d00 	tsteq	fp, r0, lsl #26
    19e4:	00000655 	andeq	r0, r0, r5, asr r6
}
    19e8:	3100342e 	tstcc	r0, lr, lsr #8
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19ec:	00060213 	andeq	r0, r6, r3, lsl r2
    19f0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
			return 0;
    19f4:	0b3a0e03 	bleq	e85208 <__ccfg+0xe65260>
    19f8:	0b390b3b 	bleq	e446ec <__ccfg+0xe24744>
    19fc:	0b201349 	bleq	806728 <__ccfg+0x7e6780>
    1a00:	00001301 	andeq	r1, r0, r1, lsl #6
    1a04:	03003430 	movweq	r3, #1072	; 0x430
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a08:	3b0b3a08 	blcc	2d0230 <__ccfg+0x2b0288>
    1a0c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (dsp != TCV_DSP_PASS) {
    1a10:	31000013 	tstcc	r0, r3, lsl r0
		if (ses == NONE)
    1a14:	0e03012e 	adfeqsp	f0, f3, #0.5
			syserror (EREQPAR, "tcv26");
    1a18:	0b3b0b3a 	bleq	ec4708 <__ccfg+0xea4760>
		verify_fds (ses, "tcv27");
    1a1c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1a20:	13010b20 	movwne	r0, #6944	; 0x1b20
    1a24:	05320000 	ldreq	r0, [r2, #-0]!
    1a28:	3a080300 	bcc	202630 <__ccfg+0x1e2688>
    1a2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((p = apb (size)) != NULL) {
    1a30:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a34:	011d3300 	tsteq	sp, r0, lsl #6
		return NULL;
    1a38:	01111331 	tsteq	r1, r1, lsr r3
			p->attributes = descriptors [ses] -> attpattern;
    1a3c:	0b580112 	bleq	1601e8c <__ccfg+0x15e1ee4>
			dispose (p, dsp);
    1a40:	0b570b59 	bleq	15c47ac <__ccfg+0x15a4804>
			p->attributes = descriptors [ses] -> attpattern;
    1a44:	00001301 	andeq	r1, r0, r1, lsl #6
			p->attributes.b.outgoing = 0;
    1a48:	03012e34 	movweq	r2, #7732	; 0x1e34
			dispose (p, dsp);
    1a4c:	3b0b3a0e 	blcc	2d028c <__ccfg+0x2b02e4>
			return (address)(p + 1);
    1a50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if ((p = apb (size)) != NULL)
    1a58:	010a4001 	tsteq	sl, r1
    1a5c:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
		return (address)(p + 1);
    1a60:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1a64:	0b3b0b3a 	bleq	ec4754 <__ccfg+0xea47ac>
    1a68:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a6c:	00000602 	andeq	r0, r0, r2, lsl #12
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a70:	03012e36 	movweq	r2, #7734	; 0x1e36
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a74:	3b0b3a0e 	blcc	2d02b4 <__ccfg+0x2b030c>
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a78:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1a7c:	010b200c 	tsteq	fp, ip
		syserror (EREQPAR, "tcv28");
    1a80:	37000013 	smladcc	r0, r3, r0, r0
		syserror (EMALLOC, "tcv29");
    1a84:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	physical [phy] = ps;
    1a88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	physinfo [phy] = info;
    1a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a90:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a94:	3a0e0301 	bcc	3826a0 <__ccfg+0x3626f8>
    1a98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a9c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		syserror (EMALLOC, "tcv29");
    1aa0:	010b2013 	tsteq	fp, r3, lsl r0
    1aa4:	39000013 	stmdbcc	r0, {r0, r1, r4}
	q_init (q);
    1aa8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
}
    1aac:	0b3b0b3a 	bleq	ec479c <__ccfg+0xea47f4>
    1ab0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ab4:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
    1ab8:	11133101 	tstne	r3, r1, lsl #2
    1abc:	40011201 	andmi	r1, r1, r1, lsl #4
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac0:	3b00000a 	blcc	1af0 <tcvphy_rcv+0x30>
	verify_fph (phy, "tcv30");
    1ac4:	1331001d 	teqne	r1, #29
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac8:	01120111 	tsteq	r2, r1, lsl r1
    1acc:	0b590b58 	bleq	1644834 <__ccfg+0x162488c>
	verify_fph (phy, "tcv30");
    1ad0:	00000b57 	andeq	r0, r0, r7, asr fp
    1ad4:	01110100 	tsteq	r1, r0, lsl #2
    1ad8:	0b130e25 	bleq	4c5374 <__ccfg+0x4a53cc>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1adc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1ae0:	01110655 	tsteq	r1, r5, asr r6
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae4:	00000610 	andeq	r0, r0, r0, lsl r6
    1ae8:	0b002402 	bleq	aaf8 <__exidx_end+0x5bcc>
		if (plugins [plg] == NULL)
    1aec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1af0:	0300000e 	movweq	r0, #14
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
}
    1af8:	0b3b0b3a 	bleq	ec47e8 <__ccfg+0xea4840>
    1afc:	13490b39 	movtne	r0, #39737	; 0x9b39
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b00:	24040000 	strcs	r0, [r4], #-0
    1b04:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1b08:	0008030b 	andeq	r0, r8, fp, lsl #6
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b0c:	00260500 	eoreq	r0, r6, r0, lsl #10
    1b10:	00001349 	andeq	r1, r0, r9, asr #6
    1b14:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1b18:	07000013 	smladeq	r0, r3, r0, r0
    1b1c:	0b0b0113 	bleq	2c1f70 <__ccfg+0x2a1fc8>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b20:	0b3b0b3a 	bleq	ec4810 <__ccfg+0xea4868>
	len -= (ap.head + ap.tail);
    1b24:	13010b39 	movwne	r0, #6969	; 0x1b39
    1b28:	0d080000 	stceq	0, cr0, [r8, #-0]
    1b2c:	3a0e0300 	bcc	382734 <__ccfg+0x36278c>
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b30:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b34:	0b13490b 	bleq	4d3f68 <__ccfg+0x4b3fc0>
    1b38:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b3c:	000b380b 	andeq	r3, fp, fp, lsl #16
    1b40:	000d0900 	andeq	r0, sp, r0, lsl #18
    1b44:	0b3a0e03 	bleq	e85358 <__ccfg+0xe653b0>
	return 1;
    1b48:	0b390b3b 	bleq	e4483c <__ccfg+0xe24894>
    1b4c:	0b381349 	bleq	e06878 <__ccfg+0xde68d0>
    1b50:	340a0000 	strcc	r0, [sl], #-0
    1b54:	3a0e0300 	bcc	38275c <__ccfg+0x3627b4>
    1b58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	verify_fph (phy, "tcv32");
    1b5c:	3f13490b 	svccc	0x0013490b
    1b60:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1b64:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1b68:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1b6c:	010c0000 	mrseq	r0, (UNDEF: 12)
    1b70:	01134901 	tsteq	r3, r1, lsl #18
	oq = oqueues [phy];
    1b74:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	b = q_first (oq);
    1b78:	00000021 	andeq	r0, r0, r1, lsr #32
	if (q_end (b, oq)) {
    1b7c:	0300160e 	movweq	r1, #1550	; 0x60e
	*len = b->length;
    1b80:	3b0b3a0e 	blcc	2d03c0 <__ccfg+0x2b0418>
	deq (b);	// Dequeue the packet ...
    1b84:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    1b88:	0f000013 	svceq	0x00000013
		return NULL;
    1b8c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1b90:	00001301 	andeq	r1, r0, r1, lsl #6
    1b94:	49000510 	stmdbmi	r0, {r4, r8, sl}
    1b98:	11000013 	tstne	r0, r3, lsl r0
	verify_fph (phy, "tcv33");
    1b9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ba0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ba4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ba8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1bac:	13120000 	tstne	r2, #0
    1bb0:	3a0b0b01 	bcc	2c47bc <__ccfg+0x2a4814>
	oq = oqueues [phy];
    1bb4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	b = q_first (oq);
    1bb8:	0013010b 	andseq	r0, r3, fp, lsl #2
		return NULL;
    1bbc:	000d1300 	andeq	r1, sp, r0, lsl #6
	return (address)(b + 1);
    1bc0:	0b3a0e03 	bleq	e853d4 <__ccfg+0xe6542c>
}
    1bc4:	0b39053b 	bleq	e430b8 <__ccfg+0xe23110>
    1bc8:	0b381349 	bleq	e068f4 <__ccfg+0xde694c>
    1bcc:	13140000 	tstne	r4, #0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd0:	0b0e0301 	bleq	3827dc <__ccfg+0x362834>
	verify_plg (b, tcv_xmt, "tcv34");
    1bd4:	3b0b3a0b 	blcc	2d0408 <__ccfg+0x2b0460>
	hblock_t *b = header (pkt);
    1bd8:	010b3905 	tsteq	fp, r5, lsl #18
	verify_plg (b, tcv_xmt, "tcv34");
    1bdc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1be0:	13490021 	movtne	r0, #36897	; 0x9021
    1be4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1be8:	3f012e16 	svccc	0x00012e16
    1bec:	3a0e030c 	bcc	382824 <__ccfg+0x36287c>
    1bf0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bf4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
}
    1bfc:	000a4001 	andeq	r4, sl, r1
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c00:	00051700 	andeq	r1, r5, r0, lsl #14
    1c04:	0b3a0803 	bleq	e83c18 <__ccfg+0xe63c70>
    1c08:	0b390b3b 	bleq	e448fc <__ccfg+0xe24954>
}
    1c0c:	06021349 	streq	r1, [r2], -r9, asr #6
    while(1)
    1c10:	34180000 	ldrcc	r0, [r8], #-0
{
    1c14:	3a0e0300 	bcc	38281c <__ccfg+0x362874>
    SetupTrimDevice();
    1c18:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    pui32Src = &_etext;
    1c1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c20:	00000006 	andeq	r0, r0, r6
    __asm("    ldr     r0, =_bss\n"
    1c24:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1c28:	030b130e 	movweq	r1, #45838	; 0xb30e
    1c2c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1c30:	10011106 	andne	r1, r1, r6, lsl #2
    1c34:	02000006 	andeq	r0, r0, #6
   main();
    1c38:	0b0b0024 	bleq	2c1cd0 <__ccfg+0x2a1d28>
    FaultISR();
    1c3c:	0e030b3e 	vmoveq.16	d3[0], r0
        *pui32Dest++ = *pui32Src++;
    1c40:	16030000 	strne	r0, [r3], -r0
    1c44:	3a0e0300 	bcc	38284c <__ccfg+0x3628a4>
    1c48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1c50:	00240400 	eoreq	r0, r4, r0, lsl #8
    1c54:	0b3e0b0b 	bleq	f84888 <__ccfg+0xf648e0>
    1c58:	00000803 	andeq	r0, r0, r3, lsl #16
    1c5c:	03011305 	movweq	r1, #4869	; 0x1305
static byte get_byte () {
    1c60:	3a0b0b0e 	bcc	2c48a0 <__ccfg+0x2a48f8>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c64:	010b3b0b 	tsteq	fp, fp, lsl #22
    1c68:	06000013 			; <UNDEFINED> instruction: 0x06000013
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1c70:	0b381349 	bleq	e0699c <__ccfg+0xde69f4>
		if (ee_inp)
    1c74:	00000c34 	andeq	r0, r0, r4, lsr ip
			b |= 1;
    1c78:	0b000f07 	bleq	589c <__exidx_end+0x970>
    1c7c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	13490026 	movtne	r0, #36902	; 0x9026
	for (b = 0, i = 0; i < 8; i++) {
    1c84:	35090000 	strcc	r0, [r9, #-0]
}
    1c88:	00134900 	andseq	r4, r3, r0, lsl #18
    1c8c:	01130a00 	tsteq	r3, r0, lsl #20
    1c90:	0b3a0b0b 	bleq	e848c4 <__ccfg+0xe6491c>
static void put_byte (byte b) {
    1c94:	0b390b3b 	bleq	e44988 <__ccfg+0xe249e0>
    1c98:	00001301 	andeq	r1, r0, r1, lsl #6
    1c9c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1ca0:	3b0b3a0e 	blcc	2d04e0 <__ccfg+0x2b0538>
		if (b & 0x80)
    1ca4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ca8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
	for (i = 0; i < 8; i++) {
    1cb0:	0c00000b 	stceq	0, cr0, [r0], {11}
		b <<= 1;
    1cb4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	for (i = 0; i < 8; i++) {
    1cb8:	0b3b0b3a 	bleq	ec49a8 <__ccfg+0xea4a00>
}
    1cbc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1cc0:	00000b38 	andeq	r0, r0, r8, lsr fp
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc4:	0300340d 	movweq	r3, #1037	; 0x40d
    1cc8:	3b0b3a0e 	blcc	2d0508 <__ccfg+0x2b0560>
	put_byte (cmd);
    1ccc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1cd0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
}
    1cd4:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1cd8:	0b0b000f 	bleq	2c1d1c <__ccfg+0x2a1d74>
static void wwait (word st, word del) {
    1cdc:	00001349 	andeq	r1, r0, r9, asr #6
    1ce0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1ce4:	00130113 	andseq	r0, r3, r3, lsl r1
	while (dopen && (rdsr () & 1)) {
    1ce8:	00211000 	eoreq	r1, r1, r0
    1cec:	16110000 	ldrne	r0, [r1], -r0
    1cf0:	3a0e0300 	bcc	3828f8 <__ccfg+0x362950>
    1cf4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	put_byte (CMD_RDSR);
    1cf8:	0013490b 	andseq	r4, r3, fp, lsl #18
	r = get_byte ();
    1cfc:	01151200 	tsteq	r5, r0, lsl #4
    1d00:	13010c27 	movwne	r0, #7207	; 0x1c27
	while (dopen && (rdsr () & 1)) {
    1d04:	05130000 	ldreq	r0, [r3, #-0]
}
    1d08:	00134900 	andseq	r4, r3, r0, lsl #18
		if (st == WNONE)
    1d0c:	00341400 	eorseq	r1, r4, r0, lsl #8
    1d10:	0b3a0e03 	bleq	e85524 <__ccfg+0xe6557c>
			mdelay (1);
    1d14:	0b39053b 	bleq	e43208 <__ccfg+0xe23260>
    1d18:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1bfc <tcvphy_end+0x2c>
			delay (del, st);
    1d1c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1d20:	0b011315 	bleq	4697c <__ccfg+0x269d4>
			release;
    1d24:	3b0b3a0b 	blcc	2d0558 <__ccfg+0x2b05b0>
    1d28:	010b3905 	tsteq	fp, r5, lsl #18
    1d2c:	16000013 			; <UNDEFINED> instruction: 0x16000013
static void ready () {
    1d30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (dopen) {
    1d34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		wwait (WNONE, 1);
    1d38:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d3c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1d40:	03011317 	movweq	r1, #4887	; 0x1317
	dstat = 0;
    1d44:	3a0b0b0e 	bcc	2c4984 <__ccfg+0x2a49dc>
}
    1d48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d4c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d50:	00211800 	eoreq	r1, r1, r0, lsl #16
	udelay (1);
    1d54:	0b2f1349 	bleq	bc6a80 <__ccfg+0xba6ad8>
    1d58:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
	udelay (1);
    1d5c:	030c3f01 	movweq	r3, #52993	; 0xcf01
		dopen = DOPEN_TEMP;
    1d60:	3b0b3a0e 	blcc	2d05a0 <__ccfg+0x2b05f8>
    1d64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1d68:	1113490c 	tstne	r3, ip, lsl #18
    1d6c:	40011201 	andmi	r1, r1, r1, lsl #4
static void cclose () {
    1d70:	0013010a 	andseq	r0, r3, sl, lsl #2
	if (dopen == DOPEN_TEMP) {
    1d74:	00051a00 	andeq	r1, r5, r0, lsl #20
    1d78:	0b3a0803 	bleq	e83d8c <__ccfg+0xe63de4>
		wwait (WNONE, 1);
    1d7c:	0b390b3b 	bleq	e44a70 <__ccfg+0xe24ac8>
    1d80:	06021349 	streq	r1, [r2], -r9, asr #6
	cmd_0 (CMD_DP);
    1d84:	051b0000 	ldreq	r0, [fp, #-0]
    1d88:	3a080300 	bcc	202990 <__ccfg+0x1e29e8>
		dopen = 0;
    1d8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1d90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
word ee_open () {
    1d94:	1c00000a 	stcne	0, cr0, [r0], {10}
	ready ();
    1d98:	00000018 	andeq	r0, r0, r8, lsl r0
	dopen = DOPEN_PERM;
    1d9c:	0300341d 	movweq	r3, #1053	; 0x41d
    1da0:	3b0b3a0e 	blcc	2d05e0 <__ccfg+0x2b0638>
}
    1da4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (dopen) {
    1da8:	00060213 	andeq	r0, r6, r3, lsl r2
    1dac:	00341e00 	eorseq	r1, r4, r0, lsl #28
		dopen = DOPEN_TEMP;
    1db0:	0b3a0803 	bleq	e83dc4 <__ccfg+0xe63e1c>
		cclose ();
    1db4:	0b390b3b 	bleq	e44aa8 <__ccfg+0xe24b00>
}
    1db8:	06021349 	streq	r1, [r2], -r9, asr #6
int ser_in (word st, char *buf, int len) {
    1dbc:	341f0000 	ldrcc	r0, [pc], #-0	; 1dc4 <ser_in+0x8>
    1dc0:	3a080300 	bcc	2029c8 <__ccfg+0x1e2a20>
	if (len == 0)
    1dc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (__inpline == NULL) {
    1dc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if ((prcs = running (__inserial)) == 0) {
    1dcc:	0000000a 	andeq	r0, r0, sl
    1dd0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			prcs = runthread (__inserial);
    1dd4:	030b130e 	movweq	r1, #45838	; 0xb30e
    1dd8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			if (prcs == 0) {
    1ddc:	10011106 	andne	r1, r1, r6, lsl #2
				npwait (st);
    1de0:	02000006 	andeq	r0, r0, #6
		release;
    1de4:	0b0b0024 	bleq	2c1e7c <__ccfg+0x2a1ed4>
		join (prcs, st);
    1de8:	0e030b3e 	vmoveq.16	d3[0], r0
    1dec:	16030000 	strne	r0, [r3], -r0
	if (*__inpline == NULL) // bin cmd
    1df0:	3a0e0300 	bcc	3829f8 <__ccfg+0x362a50>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (prcs >= len)
    1df8:	0013490b 	andseq	r4, r3, fp, lsl #18
		prcs = len-1;
    1dfc:	00240400 	eoreq	r0, r4, r0, lsl #8
	memcpy (buf, __inpline, prcs);
    1e00:	0b3e0b0b 	bleq	f84a34 <__ccfg+0xf64a8c>
    1e04:	00000803 	andeq	r0, r0, r3, lsl #16
    1e08:	03011305 	movweq	r1, #4869	; 0x1305
	ufree (__inpline);
    1e0c:	3a0b0b0e 	bcc	2c4a4c <__ccfg+0x2a4aa4>
	__inpline = NULL;
    1e10:	010b3b0b 	tsteq	fp, fp, lsl #22
	if (*buf) // if it's NULL, it's a bin cmd
    1e14:	06000013 			; <UNDEFINED> instruction: 0x06000013
		buf [prcs] = '\0';
    1e18:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
    1e1c:	0b381349 	bleq	e06b48 <__ccfg+0xde6ba0>
		prcs = strlen (__inpline);
    1e20:	00000c34 	andeq	r0, r0, r4, lsr ip
    1e24:	0b000f07 	bleq	5a48 <__exidx_end+0xb1c>
		return 0;
    1e28:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1e2c:	13490026 	movtne	r0, #36902	; 0x9026
    1e30:	35090000 	strcc	r0, [r9, #-0]
int ser_outf (word st, const char *m, ...) {
    1e34:	00134900 	andseq	r4, r3, r0, lsl #18
    1e38:	01130a00 	tsteq	r3, r0, lsl #20
	if ((prcs = running (__outserial)) != 0) {
    1e3c:	0b3a0b0b 	bleq	e84a70 <__ccfg+0xe64ac8>
    1e40:	0b390b3b 	bleq	e44b34 <__ccfg+0xe24b8c>
		join (prcs, st);
    1e44:	00001301 	andeq	r1, r0, r1, lsl #6
    1e48:	03000d0b 	movweq	r0, #3339	; 0xd0b
		release;
    1e4c:	3b0b3a0e 	blcc	2d068c <__ccfg+0x2b06e4>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e54:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1e58:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
		umwait (st);
    1e5c:	0c00000b 	stceq	0, cr0, [r0], {11}
    1e60:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if (runstrand (__outserial, buf) == 0) {
    1e64:	0b3b0b3a 	bleq	ec4b54 <__ccfg+0xea4bac>
    1e68:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e6c:	00000b38 	andeq	r0, r0, r8, lsr fp
		ufree (buf);
    1e70:	0300340d 	movweq	r3, #1037	; 0x40d
		npwait (st);
    1e74:	3b0b3a0e 	blcc	2d06b4 <__ccfg+0x2b070c>
}
    1e78:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e7c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1e80:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1e84:	0b0b000f 	bleq	2c1ec8 <__ccfg+0x2a1f20>
int ser_inf (word st, const char *fmt, ...) {
    1e88:	00001349 	andeq	r1, r0, r9, asr #6
    1e8c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
	if (fmt == NULL)
    1e90:	00130113 	andseq	r0, r3, r3, lsl r1
	if (__inpline == NULL) {
    1e94:	00211000 	eoreq	r1, r1, r0
		if ((prcs = running (__inserial)) == 0) {
    1e98:	16110000 	ldrne	r0, [r1], -r0
    1e9c:	3a0e0300 	bcc	382aa4 <__ccfg+0x362afc>
			prcs = runthread (__inserial);
    1ea0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea4:	0013490b 	andseq	r4, r3, fp, lsl #18
			if (prcs == 0) {
    1ea8:	01151200 	tsteq	r5, r0, lsl #4
				npwait (st);
    1eac:	13010c27 	movwne	r0, #7207	; 0x1c27
		release;
    1eb0:	05130000 	ldreq	r0, [r3, #-0]
		join (prcs, st);
    1eb4:	00134900 	andseq	r4, r3, r0, lsl #18
    1eb8:	00341400 	eorseq	r1, r4, r0, lsl #8
	va_start (ap, fmt);
    1ebc:	0b3a0e03 	bleq	e856d0 <__ccfg+0xe65728>
	prcs = vscan (__inpline, fmt, ap);
    1ec0:	0b39053b 	bleq	e433b4 <__ccfg+0xe2340c>
    1ec4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1da8 <ee_close>
	ufree (__inpline);
    1ec8:	00000c3c 	andeq	r0, r0, ip, lsr ip
	__inpline = NULL;
    1ecc:	0b011315 	bleq	46b28 <__ccfg+0x26b80>
}
    1ed0:	3b0b3a0b 	blcc	2d0704 <__ccfg+0x2b075c>
    1ed4:	010b3905 	tsteq	fp, r5, lsl #18
    1ed8:	16000013 			; <UNDEFINED> instruction: 0x16000013
		return 0;
    1edc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1ee0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ee4:	13490b39 	movtne	r0, #39737	; 0x9b39
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	00000b38 	andeq	r0, r0, r8, lsr fp
    1eec:	03011317 	movweq	r1, #4887	; 0x1317
    1ef0:	3a0b0b0e 	bcc	2c4b30 <__ccfg+0x2a4b88>
	RF_cmdFs.frequency = 
    1ef4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1ef8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1efc:	00211800 	eoreq	r1, r1, r0, lsl #16
    1f00:	0b2f1349 	bleq	bc6c2c <__ccfg+0xba6c84>
    1f04:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
static int option (int opt, address val) {
    1f08:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1f0c:	3b0b3a0e 	blcc	2d074c <__ccfg+0x2b07a4>
    1f10:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1f14:	1113490c 	tstne	r3, ip, lsl #18
    1f18:	40011201 	andmi	r1, r1, r1, lsl #4
    1f1c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f20:	00051a00 	andeq	r1, r5, r0, lsl #20
    1f24:	0b3a0803 	bleq	e83f38 <__ccfg+0xe63f90>
    1f28:	0b390b3b 	bleq	e44c1c <__ccfg+0xe24c74>
    1f2c:	06021349 	streq	r1, [r2], -r9, asr #6
    1f30:	051b0000 	ldreq	r0, [fp, #-0]
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	3a080300 	bcc	202b3c <__ccfg+0x1e2b94>
    1f38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			goto RVal;
    1f3c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			_BIS (dstate, DSTATE_RXON);
    1f40:	1c00000a 	stcne	0, cr0, [r0], {10}
    1f44:	00000018 	andeq	r0, r0, r8, lsl r0
	int ret = 0;
    1f48:	0300341d 	movweq	r3, #1053	; 0x41d
			p_trigger (drvprcs, qevent);
    1f4c:	3b0b3a0e 	blcc	2d078c <__ccfg+0x2b07e4>
    1f50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f54:	00060213 	andeq	r0, r6, r3, lsl r2
    1f58:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1f5c:	0b3a0803 	bleq	e83f70 <__ccfg+0xe63fc8>
    1f60:	0b390b3b 	bleq	e44c54 <__ccfg+0xe24cac>
    1f64:	0a021349 	beq	86c90 <__ccfg+0x66ce8>
    1f68:	01000000 	mrseq	r0, (UNDEF: 0)
    1f6c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1f70:	0e030b13 	vmoveq.32	d3[0], r0
}
    1f74:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
			_BIC (dstate, DSTATE_RXON);
    1f78:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1f7c:	16020000 	strne	r0, [r2], -r0
			statid = (val == NULL) ? 0 : *val;
    1f80:	3a0e0300 	bcc	382b88 <__ccfg+0x362be0>
    1f84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	int ret = 0;
    1f88:	0013490b 	andseq	r4, r3, fp, lsl #18
			ret = (int) statid;
    1f8c:	00240300 	eoreq	r0, r4, r0, lsl #6
	if (val != NULL)
    1f90:	0b3e0b0b 	bleq	f84bc4 <__ccfg+0xf64c1c>
		*val = ret;
    1f94:	00000e03 	andeq	r0, r0, r3, lsl #28
			ret = rbuffl + 2;
    1f98:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
    1f9c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
			if (val != NULL) {
    1fa0:	13490035 	movtne	r0, #36917	; 0x9035
				memcpy (val, &rxstat,
    1fa4:	24060000 	strcs	r0, [r6], #-0
    1fa8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
				memset (&rxstat, 0, 
    1fac:	0008030b 	andeq	r0, r8, fp, lsl #6
    1fb0:	00160700 	andseq	r0, r6, r0, lsl #14
			if (val == NULL)
    1fb4:	0b3a0e03 	bleq	e857c8 <__ccfg+0xe65820>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	0b39053b 	bleq	e434ac <__ccfg+0xe23504>
    1fbc:	00001349 	andeq	r1, r0, r9, asr #6
				utimer_set (bckf_timer, *val);
    1fc0:	0b011708 	bleq	47be8 <__ccfg+0x27c40>
    1fc4:	3b0b3a0b 	blcc	2d07f8 <__ccfg+0x2b0850>
    1fc8:	010b390b 	tsteq	fp, fp, lsl #18
			for (ret = 0; ret < 8; ret++)
    1fcc:	09000013 	stmdbeq	r0, {r0, r1, r4}
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
					== patable [ret])
    1fd4:	0b3b0b3a 	bleq	ec4cc4 <__ccfg+0xea4d1c>
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	13490b39 	movtne	r0, #39737	; 0x9b39
			for (ret = 0; ret < 8; ret++)
    1fdc:	010a0000 	mrseq	r0, (UNDEF: 10)
    1fe0:	01134901 	tsteq	r3, r1, lsl #18
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	0b000013 	bleq	2038 <option+0x130>
    1fe8:	13490021 	movtne	r0, #36897	; 0x9021
    1fec:	00000b2f 	andeq	r0, r0, pc, lsr #22
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	0b01130c 	bleq	46c28 <__ccfg+0x26c80>
    1ff4:	3b0b3a0b 	blcc	2d0828 <__ccfg+0x2b0880>
			_BIS (dstate, DSTATE_IRST);
    1ff8:	010b390b 	tsteq	fp, fp, lsl #18
    1ffc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2000:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			ret = (int) channel;
    2004:	0b3b0b3a 	bleq	ec4cf4 <__ccfg+0xea4d4c>
			goto RVal;
    2008:	13490b39 	movtne	r0, #39737	; 0x9b39
				(*val > 7) ? 7 : *val;
    200c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2010:	0b000f0e 	bleq	5c50 <__exidx_end+0xd24>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	0f00000b 	svceq	0x0000000b
    2018:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			plugch ();
    201c:	0b3a0b0b 	bleq	e84c50 <__ccfg+0xe64ca8>
			_BIS (dstate, DSTATE_IRST);
    2020:	0b390b3b 	bleq	e44d14 <__ccfg+0xe24d6c>
    2024:	00001301 	andeq	r1, r0, r1, lsl #6
			ret = (int) vrate;
    2028:	03000d10 	movweq	r0, #3344	; 0xd10
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	3b0b3a08 	blcc	2d0854 <__ccfg+0x2b08ac>
    2030:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2034:	000b3813 	andeq	r3, fp, r3, lsl r8
    2038:	000f1100 	andeq	r1, pc, r0, lsl #2
    203c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2040:	13120000 	tstne	r2, #0
    2044:	0b0e0301 	bleq	382c50 <__ccfg+0x362ca8>
    2048:	3b0b3a05 	blcc	2d0864 <__ccfg+0x2b08bc>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	010b390b 	tsteq	fp, fp, lsl #18
    2050:	13000013 	movwne	r0, #19
    2054:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2058:	0b3b0b3a 	bleq	ec4d48 <__ccfg+0xea4da0>
			syserror (EREQPAR, "cc13 op");
    205c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2060:	00000538 	andeq	r0, r0, r8, lsr r5
    2064:	27001514 	smladcs	r0, r4, r5, r1
    2068:	1500000c 	strne	r0, [r0, #-12]
    206c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2070:	13011349 	movwne	r1, #4937	; 0x1349
    2074:	05160000 	ldreq	r0, [r6, #-0]
    2078:	00134900 	andseq	r4, r3, r0, lsl #18
    207c:	01131700 	tsteq	r3, r0, lsl #14
    2080:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2084:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2088:	13010b39 	movwne	r0, #6969	; 0x1b39
    208c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    2090:	3a0e0300 	bcc	382c98 <__ccfg+0x362cf0>
    2094:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
static void issue_cmd (lword cmd) {
    2098:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    209c:	1900000b 	stmdbne	r0, {r0, r1, r3}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    20a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20a8:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (res != 0x86)
    20ac:	00000538 	andeq	r0, r0, r8, lsr r5
			syserror (EHARDWARE, "hang ic0");
    20b0:	0301131a 	movweq	r1, #4890	; 0x131a
    20b4:	3a0b0b0e 	bcc	2c4cf4 <__ccfg+0x2a4d4c>
		if (cnt-- == 0) {
    20b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			diag ("HUP %lx %lx", cmd, res);
    20bc:	0013010b 	andseq	r0, r3, fp, lsl #2
    20c0:	01131b00 	tsteq	r3, r0, lsl #22
			syserror (EHARDWARE, "hang ic0");
    20c4:	0b3a0b0b 	bleq	e84cf8 <__ccfg+0xe64d50>
		udelay (1);
    20c8:	0b39053b 	bleq	e435bc <__ccfg+0xe23614>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	00001301 	andeq	r1, r0, r1, lsl #6
}
    20d0:	0b01171c 	bleq	47d48 <__ccfg+0x27da0>
    20d4:	3b0b3a0b 	blcc	2d0908 <__ccfg+0x2b0960>
    20d8:	010b3905 	tsteq	fp, r5, lsl #18
    20dc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
static void rx_de () {
    20e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20e8:	13490b39 	movtne	r0, #39737	; 0x9b39
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	131e0000 	tstne	lr, #0
	_BIC (dstate, DSTATE_RXAC);
    20f0:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    20f4:	1f00000c 	svcne	0x0000000c
}
    20f8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    20fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2100:	03003420 	movweq	r3, #1056	; 0x420
static void rf_off () {
    2104:	3b0b3a0e 	blcc	2d0944 <__ccfg+0x2b099c>
	if ((dstate & DSTATE_RFON) == 0)
    2108:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    210c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	IntDisable (INT_RFC_CPE_0);
    2110:	2100000c 	tstcs	r0, ip
    2114:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2118:	0b3b0b3a 	bleq	ec4e08 <__ccfg+0xea4e60>
	RFCAdi3VcoLdoVoltageMode (false);
    211c:	13490b39 	movtne	r0, #39737	; 0x9b39
	RFCSynthPowerDown ();
    2120:	0b0d0b0b 	bleq	344d54 <__ccfg+0x324dac>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2124:	0b380b0c 	bleq	e04d5c <__ccfg+0xde4db4>
    2128:	0d220000 	stceq	0, cr0, [r2, #-0]
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    212c:	3a0e0300 	bcc	382d34 <__ccfg+0x362d8c>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2130:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2134:	0b13490b 	bleq	4d4568 <__ccfg+0x4b45c0>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2138:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    213c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2140:	00342300 	eorseq	r2, r4, r0, lsl #6
	_BIC (dstate, DSTATE_RFON);
    2144:	0b3a0e03 	bleq	e85958 <__ccfg+0xe659b0>
    2148:	0b390b3b 	bleq	e44e3c <__ccfg+0xe24e94>
}
    214c:	0a021349 	beq	86e78 <__ccfg+0x66ed0>
    2150:	21240000 			; <UNDEFINED> instruction: 0x21240000
    2154:	2f134900 	svccs	0x00134900
    2158:	25000005 	strcs	r0, [r0, #-5]
    215c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2160:	0b3b0b3a 	bleq	ec4e50 <__ccfg+0xea4ea8>
    2164:	13490b39 	movtne	r0, #39737	; 0x9b39
    2168:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		if (cmd->status == tstat)
    216c:	21260000 			; <UNDEFINED> instruction: 0x21260000
		if (timeout-- == 0) {
    2170:	27000000 	strcs	r0, [r0, -r0]
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2174:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2178:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    217c:	13490b39 	movtne	r0, #39737	; 0x9b39
			syserror (EHARDWARE, "rt2");
    2180:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
    2184:	030c3f01 	movweq	r3, #52993	; 0xcf01
		udelay (1);
    2188:	3b0b3a0e 	blcc	2d09c8 <__ccfg+0x2b0a20>
		if (cmd->status == tstat)
    218c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
}
    2190:	1201110c 	andne	r1, r1, #12, 2
    2194:	010a4001 	tsteq	sl, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2198:	29000013 	stmdbcs	r0, {r0, r1, r4}
    219c:	08030005 	stmdaeq	r3, {r0, r2}
static void rf_on () {
    21a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21a4:	13490b39 	movtne	r0, #39737	; 0x9b39
	OSCHF_TurnOnXosc();
    21a8:	00000602 	andeq	r0, r0, r2, lsl #12
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21ac:	31011d2a 	tstcc	r1, sl, lsr #26
    21b0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    21b4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    21b8:	010b5705 	tsteq	fp, r5, lsl #14
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21bc:	2b000013 	blcs	2210 <rf_on.part.0+0x78>
    21c0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c4:	342c0000 	strtcc	r0, [ip], #-0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21c8:	00133100 	andseq	r3, r3, r0, lsl #2
	issue_cmd (
    21cc:	00342d00 	eorseq	r2, r4, r0, lsl #26
    21d0:	06021331 			; <UNDEFINED> instruction: 0x06021331
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d4:	1d2e0000 	stcne	0, cr0, [lr, #-0]
    21d8:	52133100 	andspl	r3, r3, #0, 2
    21dc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
   pPatchTab[80] = 0;
    21e0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
   } while (--nIterations);
    21e4:	2f00000b 	svccs	0x0000000b
   pPatchTab[53] = 2;
    21e8:	0e03012e 	adfeqsp	f0, f3, #0.5
    21ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
   pPatchTab[55] = 3;
    21f0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
   pPatchTab[110] = 4;
    21f4:	01111349 	tsteq	r1, r9, asr #6
   pPatchTab[107] = 5;
    21f8:	0a400112 	beq	1002648 <__ccfg+0xfe26a0>
   pPatchTab[65] = 6;
    21fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2200:	03003430 	movweq	r3, #1072	; 0x430
   pPatchTab[57] = 1;
    2204:	3b0b3a08 	blcc	2d0a2c <__ccfg+0x2b0a84>
   pIrqPatch[1] = _IRQ_PATCH_0;
    2208:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
   const uint32_t *pS = patchGenfskRfe;
    220c:	00060213 	andeq	r0, r6, r3, lsl r2
      t2 = *pS++;
    2210:	000a3100 	andeq	r3, sl, r0, lsl #2
      t4 = *pS++;
    2214:	0b3a0e03 	bleq	e85a28 <__ccfg+0xe65a80>
      t6 = *pS++;
    2218:	0b39053b 	bleq	e4370c <__ccfg+0xe23764>
      t8 = *pS++;
    221c:	00000111 	andeq	r0, r0, r1, lsl r1
      *pD++ = t1;
    2220:	11010b32 	tstne	r1, r2, lsr fp
      *pD++ = t2;
    2224:	00011201 	andeq	r1, r1, r1, lsl #4
      *pD++ = t3;
    2228:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
      *pD++ = t5;
    222c:	0b3a0e03 	bleq	e85a40 <__ccfg+0xe65a98>
      *pD++ = t7;
    2230:	0b39053b 	bleq	e43724 <__ccfg+0xe2377c>
   } while (--nIterations);
    2234:	13010b20 	movwne	r0, #6944	; 0x1b20
    2238:	34340000 	ldrtcc	r0, [r4], #-0
      *pD++ = t8;
    223c:	3a080300 	bcc	202e44 <__ccfg+0x1e2e9c>
   } while (--nIterations);
    2240:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2244:	0013490b 	andseq	r4, r3, fp, lsl #18
   *pD++ = t2;
    2248:	00053500 	andeq	r3, r5, r0, lsl #10
   *pD++ = t3;
    224c:	0b3a0e03 	bleq	e85a60 <__ccfg+0xe65ab8>
   *pD++ = t4;
    2250:	0b39053b 	bleq	e43744 <__ccfg+0xe2379c>
   *pD++ = t5;
    2254:	06021349 	streq	r1, [r2], -r9, asr #6
    2258:	1d360000 	ldcne	0, cr0, [r6, #-0]
	RFCAdi3VcoLdoVoltageMode (true);
    225c:	11133100 	tstne	r3, r0, lsl #2
    2260:	58011201 	stmdapl	r1, {r0, r9, ip}
       	RFCRfTrimSet (&rfTrim);
    2264:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2268:	3700000b 	strcc	r0, [r0, -fp]
    226c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2270:	00001301 	andeq	r1, r0, r1, lsl #6
    2274:	31011d38 	tstcc	r1, r8, lsr sp
	issue_cmd ((lword)&cmd_srt);
    2278:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    227c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	issue_cmd ((lword)&RF_cmdFs);
    2280:	010b5705 	tsteq	fp, r5, lsl #14
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2284:	39000013 	stmdbcc	r0, {r0, r1, r4}
    2288:	13310005 	teqne	r1, #5
    228c:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
	IntEnable (INT_RFC_CPE_0);
    2290:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	_BIC (dstate, DSTATE_IRST);
    2294:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    2298:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    229c:	3b00000b 	blcc	22d0 <rf_on.part.0+0x138>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a0:	0e03012e 	adfeqsp	f0, f3, #0.5
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	IntEnable (INT_RFC_CPE_0);
    22a8:	01110b39 	tsteq	r1, r9, lsr fp
    22ac:	0a400112 	beq	10026fc <__ccfg+0xfe2754>
}
    22b0:	00001301 	andeq	r1, r0, r1, lsl #6
	IntEnable (INT_RFC_CPE_0);
    22b4:	03002e3c 	movweq	r2, #3644	; 0xe3c
    22b8:	3b0b3a0e 	blcc	2d0af8 <__ccfg+0x2b0b50>
    22bc:	200b3905 	andcs	r3, fp, r5, lsl #18
    22c0:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
    22c4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    22c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22cc:	01110b39 	tsteq	r1, r9, lsr fp
    22d0:	0a400112 	beq	1002720 <__ccfg+0xfe2778>
    22d4:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    22d8:	3a0e0300 	bcc	382ee0 <__ccfg+0x362f38>
    22dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22e0:	000b200b 	andeq	r2, fp, fp
    22e4:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
    22e8:	0b3a0e03 	bleq	e85afc <__ccfg+0xe65b54>
    22ec:	0b390b3b 	bleq	e44fe0 <__ccfg+0xe25038>
    22f0:	0b200c27 	bleq	805394 <__ccfg+0x7e53ec>
    22f4:	00001301 	andeq	r1, r0, r1, lsl #6
    22f8:	03000540 	movweq	r0, #1344	; 0x540
    22fc:	3b0b3a08 	blcc	2d0b24 <__ccfg+0x2b0b7c>
    2300:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2304:	41000013 	tstmi	r0, r3, lsl r0
    2308:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    230c:	0b3b0b3a 	bleq	ec4ffc <__ccfg+0xea5054>
    2310:	13490b39 	movtne	r0, #39737	; 0x9b39
    2314:	34420000 	strbcc	r0, [r2], #-0
static void rx_int_enable () {
    2318:	3a080300 	bcc	202f20 <__ccfg+0x1e2f78>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    231c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2320:	0013490b 	andseq	r4, r3, fp, lsl #18
    2324:	012e4300 			; <UNDEFINED> instruction: 0x012e4300
    2328:	0b3a0e03 	bleq	e85b3c <__ccfg+0xe65b94>
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    232c:	0b39053b 	bleq	e43820 <__ccfg+0xe23878>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2330:	0b200c27 	bleq	8053d4 <__ccfg+0x7e542c>
    2334:	00001301 	andeq	r1, r0, r1, lsl #6
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2338:	03000544 	movweq	r0, #1348	; 0x544
    233c:	3b0b3a0e 	blcc	2d0b7c <__ccfg+0x2b0bd4>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2340:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2344:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
    2348:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    234c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2350:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2354:	00000b20 	andeq	r0, r0, r0, lsr #22
		if (db->status == DATA_ENTRY_FINISHED) {
    2358:	03002e46 	movweq	r2, #3654	; 0xe46
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	3b0b3a0e 	blcc	2d0b9c <__ccfg+0x2b0bf4>
    2360:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			nr++;
    2364:	000b200c 	andeq	r2, fp, ip
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2368:	012e4700 			; <UNDEFINED> instruction: 0x012e4700
    236c:	01111331 	tsteq	r1, r1, lsr r3
    2370:	0a400112 	beq	10027c0 <__ccfg+0xfe2818>
    2374:	00001301 	andeq	r1, r0, r1, lsl #6
				__dp [pl + 1] = __dp [pl] - 128;
    2378:	31000548 	tstcc	r0, r8, asr #10
				pl = __dp [1] + 2;
    237c:	00060213 	andeq	r0, r6, r3, lsl r2
				__dp [pl + 1] = __dp [pl] - 128;
    2380:	011d4900 	tsteq	sp, r0, lsl #18
    2384:	01111331 	tsteq	r1, r1, lsr r3
				__dp [pl] = 0;
    2388:	0b580112 	bleq	16027d8 <__ccfg+0x15e2830>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    238c:	0b570b59 	bleq	15c50f8 <__ccfg+0x15a5150>
    2390:	1d4a0000 	stclne	0, cr0, [sl, #-0]
    2394:	11133101 	tstne	r3, r1, lsl #2
			db->status = DATA_ENTRY_PENDING;
    2398:	58011201 	stmdapl	r1, {r0, r9, ip}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    239c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a0:	4b00000b 	blmi	23d4 <rx_int_enable+0xbc>
				diag ("BAD RX");
    23a4:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    23a8:	01120111 	tsteq	r2, r1, lsl r1
	if (nr) {
    23ac:	00000a40 	andeq	r0, r0, r0, asr #20
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b0:	3100344c 	tstcc	r0, ip, asr #8
}
    23b4:	00061c13 	andeq	r1, r6, r3, lsl ip
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b8:	11010000 	mrsne	r0, (UNDEF: 1)
    23bc:	130e2501 	movwne	r2, #58625	; 0xe501
    23c0:	1b0e030b 	blne	382ff4 <__ccfg+0x36304c>
}
    23c4:	1106550e 	tstne	r6, lr, lsl #10
    23c8:	00061001 	andeq	r1, r6, r1
    23cc:	00240200 	eoreq	r0, r4, r0, lsl #4
    23d0:	0b3e0b0b 	bleq	f85004 <__ccfg+0xf6505c>
    23d4:	00000e03 	andeq	r0, r0, r3, lsl #28
    23d8:	03001603 	movweq	r1, #1539	; 0x603
    23dc:	3b0b3a0e 	blcc	2d0c1c <__ccfg+0x2b0c74>
    23e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    23e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
thread (cc1350_driver)
    23e8:	0b0b0024 	bleq	2c2480 <__ccfg+0x2a24d8>
    23ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    23f0:	13050000 	movwne	r0, #20480	; 0x5000
    23f4:	0b0e0301 	bleq	383000 <__ccfg+0x363058>
    23f8:	3b0b3a0b 	blcc	2d0c2c <__ccfg+0x2b0c84>
		if (dstate & DSTATE_IRST) {
    23fc:	0013010b 	andseq	r0, r3, fp, lsl #2
    2400:	000d0600 	andeq	r0, sp, r0, lsl #12
    2404:	13490e03 	movtne	r0, #40451	; 0x9e03
			rf_off ();
    2408:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
			_BIC (dstate,
    240c:	0f070000 	svceq	0x00070000
    2410:	000b0b00 	andeq	r0, fp, r0, lsl #22
		if (dstate & DSTATE_RXAC) {
    2414:	00260800 	eoreq	r0, r6, r0, lsl #16
    2418:	00001349 	andeq	r1, r0, r9, asr #6
			if ((dstate & DSTATE_RXON) == 0)
    241c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
				rx_de ();
    2420:	0a000013 	beq	2474 <cc1350_driver+0x8c>
		if (paylen == 0) {
    2424:	0b0b000f 	bleq	2c2468 <__ccfg+0x2a24c0>
    2428:	00001349 	andeq	r1, r0, r9, asr #6
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    242c:	0b01130b 	bleq	47060 <__ccfg+0x270b8>
    2430:	3b0b3a0b 	blcc	2d0c64 <__ccfg+0x2b0cbc>
    2434:	010b390b 	tsteq	fp, fp, lsl #18
    2438:	0c000013 	stceq	0, cr0, [r0], {19}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    243c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2440:	0b3b0b3a 	bleq	ec5130 <__ccfg+0xea5188>
    2444:	13490b39 	movtne	r0, #39737	; 0x9b39
    2448:	0b0d0b0b 	bleq	34507c <__ccfg+0x3250d4>
    244c:	0b380b0c 	bleq	e05084 <__ccfg+0xde50dc>
    2450:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2454:	3a0e0300 	bcc	38305c <__ccfg+0x3630b4>
    2458:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		} else if (dstate & DSTATE_RXON) {
    245c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	if (dstate & DSTATE_RFON)
    2460:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2464:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		re->status = DATA_ENTRY_PENDING;
    2468:	0b3b0b3a 	bleq	ec5158 <__ccfg+0xea51b0>
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    246c:	13490b39 	movtne	r0, #39737	; 0x9b39
	issue_cmd ((lword)&RF_cmdPropRx);
    2470:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	_BIS (dstate, DSTATE_RXAC);
    2474:	010f0000 	mrseq	r0, CPSR
    2478:	01134901 	tsteq	r3, r1, lsl #18
    247c:	10000013 	andne	r0, r0, r3, lsl r0
    2480:	00000021 	andeq	r0, r0, r1, lsr #32
	if (dstate & DSTATE_RXAC)
    2484:	03001611 	movweq	r1, #1553	; 0x611
    2488:	3b0b3a0e 	blcc	2d0cc8 <__ccfg+0x2b0d20>
				if (statid != 0xffff)
    248c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2490:	12000013 	andne	r0, r0, #19
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2494:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
				RF_cmdPropTx.pktLen = (byte) paylen;
    2498:	00001301 	andeq	r1, r0, r1, lsl #6
		if (paylen == 0) {
    249c:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
			wait (qevent, DR_LOOP);
    24a0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    24a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			if (dstate & DSTATE_RXAC) {
    24a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    24ac:	13490b39 	movtne	r0, #39737	; 0x9b39
				rx_int_enable ();
    24b0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			release;
    24b4:	15150000 	ldrne	r0, [r5, #-0]
			} else if (dstate & DSTATE_RFON) {
    24b8:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
				delay (offdelay, DR_GOOF);
    24bc:	00130113 	andseq	r0, r3, r3, lsl r1
    24c0:	01131600 	tsteq	r3, r0, lsl #12
    24c4:	0b3a0b0b 	bleq	e850f8 <__ccfg+0xe65150>
		if (bckf_timer) {
    24c8:	0b39053b 	bleq	e439bc <__ccfg+0xe23a14>
			wait (qevent, DR_LOOP);
    24cc:	00001301 	andeq	r1, r0, r1, lsl #6
    24d0:	03000d17 	movweq	r0, #3351	; 0xd17
    24d4:	3b0b3a0e 	blcc	2d0d14 <__ccfg+0x2b0d6c>
			delay (bckf_timer, DR_LOOP);
    24d8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    24dc:	000b3813 	andeq	r3, fp, r3, lsl r8
			if (dstate & DSTATE_RXAC)
    24e0:	01131800 	tsteq	r3, r0, lsl #16
    24e4:	0b0b0e03 	bleq	2c5cf8 <__ccfg+0x2a5d50>
	if (dstate & DSTATE_RFON)
    24e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    24ec:	13010b39 	movwne	r0, #6969	; 0x1b39
		rx_de ();
    24f0:	21190000 	tstcs	r9, r0
		RF_cmdPropTx . status = 0;
    24f4:	2f134900 	svccs	0x00134900
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24f8:	1a00000b 	bne	252c <cc1350_driver+0x144>
    24fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2500:	0b3b0b3a 	bleq	ec51f0 <__ccfg+0xea5248>
		issue_cmd ((lword)&cmd_cs);
    2504:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (dstate & DSTATE_IRST)
    2508:	0a020c3f 	beq	8560c <__ccfg+0x65664>
    250c:	341b0000 	ldrcc	r0, [fp], #-0
    2510:	3a0e0300 	bcc	383118 <__ccfg+0x363170>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2514:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2518:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			delay (1, DR_XMIT);
    251c:	1c00000a 	stcne	0, cr0, [r0], {10}
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2520:	0e03012e 	adfeqsp	f0, f3, #0.5
    2524:	0b3b0b3a 	bleq	ec5214 <__ccfg+0xea526c>
    2528:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    252c:	01111349 	tsteq	r1, r9, asr #6
    2530:	0a400112 	beq	1002980 <__ccfg+0xfe29d8>
				RF_cmdPropTx . status = 0;
    2534:	00001301 	andeq	r1, r0, r1, lsl #6
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2538:	0300051d 	movweq	r0, #1309	; 0x51d
				issue_cmd ((lword)&RF_cmdPropTx);
    253c:	3b0b3a08 	blcc	2d0d64 <__ccfg+0x2b0dbc>
				proceed (DR_XMIT);
    2540:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2544:	00060213 	andeq	r0, r6, r3, lsl r2
			txtries++;
    2548:	00051e00 	andeq	r1, r5, r0, lsl #28
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    254c:	0b3a0e03 	bleq	e85d60 <__ccfg+0xe65db8>
    2550:	0b390b3b 	bleq	e45244 <__ccfg+0xe2529c>
    2554:	0a021349 	beq	87280 <__ccfg+0x672d8>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2558:	051f0000 	ldreq	r0, [pc, #-0]	; 2560 <cc1350_driver+0x178>
		goto DR_LOOP__;
    255c:	3a080300 	bcc	203164 <__ccfg+0x1e31bc>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2560:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		paylen = 0;
    2564:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	2000000a 	andcs	r0, r0, sl
		txtries = 0;
    256c:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2570:	0b3b0b3a 	bleq	ec5260 <__ccfg+0xea52b8>
    2574:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2578:	0b201349 	bleq	8072a4 <__ccfg+0x7e72fc>
    257c:	00001301 	andeq	r1, r0, r1, lsl #6
    2580:	03000521 	movweq	r0, #1313	; 0x521
		    tcvphy_top (physid) == NULL)
    2584:	3b0b3a08 	blcc	2d0dac <__ccfg+0x2b0e04>
    2588:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	22000013 	andcs	r0, r0, #19
    2590:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			rf_off ();
    2594:	0b3b0b3a 	bleq	ec5284 <__ccfg+0xea52dc>
endthread
    2598:	13490b39 	movtne	r0, #39737	; 0x9b39
    259c:	34230000 	strtcc	r0, [r3], #-0
    25a0:	3a080300 	bcc	2031a8 <__ccfg+0x1e3200>
    25a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    25ac:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
    25b0:	01111331 	tsteq	r1, r1, lsr r3
    25b4:	0a400112 	beq	1002a04 <__ccfg+0xfe2a5c>
    25b8:	05250000 	streq	r0, [r5, #-0]!
    25bc:	02133100 	andseq	r3, r3, #0, 2
    25c0:	26000006 	strcs	r0, [r0], -r6
    25c4:	13310034 	teqne	r1, #52	; 0x34
    25c8:	1d270000 	stcne	0, cr0, [r7, #-0]
    25cc:	11133101 	tstne	r3, r1, lsl #2
    25d0:	58011201 	stmdapl	r1, {r0, r9, ip}
    25d4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
void RFCCPE0IntHandler (void) {
    25d8:	2800000b 	stmdacs	r0, {r0, r1, r3}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25dc:	13310005 	teqne	r1, #5
		_BIS (dstate, DSTATE_IRST);
    25e0:	00000a02 	andeq	r0, r0, r2, lsl #20
    25e4:	31000529 	tstcc	r0, r9, lsr #10
    25e8:	00000013 	andeq	r0, r0, r3, lsl r0
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f0:	030b130e 	movweq	r1, #45838	; 0xb30e
    25f4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	p_trigger (drvprcs, qevent);
    25f8:	10011106 	andne	r1, r1, r6, lsl #2
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    25fc:	02000006 	andeq	r0, r0, #6
    2600:	0b0b0024 	bleq	2c2698 <__ccfg+0x2a26f0>
    2604:	0e030b3e 	vmoveq.16	d3[0], r0
    2608:	16030000 	strne	r0, [r3], -r0
    260c:	3a0e0300 	bcc	383214 <__ccfg+0x36326c>
    2610:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2614:	0013490b 	andseq	r4, r3, fp, lsl #18
    2618:	00240400 	eoreq	r0, r4, r0, lsl #8
    261c:	0b3e0b0b 	bleq	f85250 <__ccfg+0xf652a8>
    2620:	00000803 	andeq	r0, r0, r3, lsl #16
	RISE_N_SHINE;
    2624:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2628:	06000013 			; <UNDEFINED> instruction: 0x06000013
    262c:	13490035 	movtne	r0, #36917	; 0x9035
}
    2630:	13070000 	movwne	r0, #28672	; 0x7000
    2634:	3a0b0b01 	bcc	2c5240 <__ccfg+0x2a5298>
    2638:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    263c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2640:	000d0800 	andeq	r0, sp, r0, lsl #16
    2644:	0b3a0e03 	bleq	e85e58 <__ccfg+0xe65eb0>
void phys_cc1350 (int phy, int mbs) {
    2648:	0b390b3b 	bleq	e4533c <__ccfg+0xe25394>
	if (rbuffl != 0)
    264c:	0b0b1349 	bleq	2c7378 <__ccfg+0x2a73d0>
    2650:	0b0c0b0d 	bleq	30528c <__ccfg+0x2e52e4>
		syserror (ETOOMANY, "cc13");
    2654:	00000b38 	andeq	r0, r0, r8, lsr fp
		syserror (EREQPAR, "cc13 mb");
    2658:	03000d09 	movweq	r0, #3337	; 0xd09
	if (mbs == 0)
    265c:	3b0b3a0e 	blcc	2d0e9c <__ccfg+0x2b0ef4>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2660:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		syserror (EREQPAR, "cc13 mb");
    2664:	000b3813 	andeq	r3, fp, r3, lsl r8
    2668:	00340a00 	eorseq	r0, r4, r0, lsl #20
	i = 0;
    266c:	0b3a0e03 	bleq	e85e80 <__ccfg+0xe65ed8>
	rbuffl = (byte) mbs;
    2670:	0b390b3b 	bleq	e45364 <__ccfg+0xe253bc>
		db->config.type = 0;	// General (data in structure)
    2674:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2558 <cc1350_driver+0x170>
	rbuffl = (byte) mbs;
    2678:	00000c3c 	andeq	r0, r0, ip, lsr ip
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    267c:	0b000f0b 	bleq	62b0 <__exidx_end+0x1384>
    2680:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (db == NULL)
    2684:	01010c00 	tsteq	r1, r0, lsl #24
			syserror (EMALLOC, "cc13");
    2688:	13011349 	movwne	r1, #4937	; 0x1349
    268c:	210d0000 	mrscs	r0, (UNDEF: 13)
    2690:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
		db->status = DATA_ENTRY_PENDING;
    2694:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		if (i)
    2698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			da->pNextEntry = (byte*) db;
    269c:	13490b39 	movtne	r0, #39737	; 0x9b39
		db->length = rbuffl + 2;
    26a0:	150f0000 	strne	r0, [pc, #-0]	; 26a8 <phys_cc1350+0x60>
    26a4:	010c2701 	tsteq	ip, r1, lsl #14
		db->config.type = 0;	// General (data in structure)
    26a8:	10000013 	andne	r0, r0, r3, lsl r0
		db->length = rbuffl + 2;
    26ac:	13490005 	movtne	r0, #36869	; 0x9005
	db->pNextEntry = (byte*) re;
    26b0:	34110000 	ldrcc	r0, [r1], #-0
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b4:	3a0e0300 	bcc	3832bc <__ccfg+0x363314>
    26b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (rbuffs == NULL)
    26bc:	3f13490b 	svccc	0x0013490b
	rbuffs->pCurrEntry = (byte*) re;
    26c0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	rbuffs->pLastEntry = NULL;
    26c4:	01131200 	tsteq	r3, r0, lsl #4
    26c8:	0b3a0b0b 	bleq	e852fc <__ccfg+0xe65354>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26cc:	0b39053b 	bleq	e43bc0 <__ccfg+0xe23c18>
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d0:	00001301 	andeq	r1, r0, r1, lsl #6
    26d4:	03000d13 	movweq	r0, #3347	; 0xd13
    26d8:	3b0b3a0e 	blcc	2d0f18 <__ccfg+0x2b0f70>
	rbuffl -= 2;
    26dc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e0:	000b3813 	andeq	r3, fp, r3, lsl r8
	rbuffl -= 2;
    26e4:	01131400 	tsteq	r3, r0, lsl #8
	physid = phy;
    26e8:	0b0b0e03 	bleq	2c5efc <__ccfg+0x2a5f54>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f0:	13010b39 	movwne	r0, #6969	; 0x1b39
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f4:	21150000 	tstcs	r5, r0
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f8:	2f134900 	svccs	0x00134900
    26fc:	1600000b 	strne	r0, [r0], -fp
	utimer_add (&bckf_timer);
    2700:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2650 <phys_cc1350+0x8>
	drvprcs = runthread (cc1350_driver);
    2704:	0b3a0e03 	bleq	e85f18 <__ccfg+0xe65f70>
    2708:	0b390b3b 	bleq	e453fc <__ccfg+0xe25454>
    270c:	01110c27 	tsteq	r1, r7, lsr #24
	if (drvprcs == 0)
    2710:	0a400112 	beq	1002b60 <__ccfg+0xfe2bb8>
		syserror (ERESOURCE, "cc13");
    2714:	00001301 	andeq	r1, r0, r1, lsl #6
    2718:	03000517 	movweq	r0, #1303	; 0x517
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    271c:	3b0b3a0e 	blcc	2d0f5c <__ccfg+0x2b0fb4>
    2720:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2724:	00060213 	andeq	r0, r6, r3, lsl r2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2728:	00341800 	eorseq	r1, r4, r0, lsl #16
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    272c:	0b3a0e03 	bleq	e85f40 <__ccfg+0xe65f98>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2730:	0b390b3b 	bleq	e45424 <__ccfg+0xe2547c>
    2734:	06021349 	streq	r1, [r2], -r9, asr #6
    2738:	0a190000 	beq	642740 <__ccfg+0x622798>
    273c:	3a0e0300 	bcc	383344 <__ccfg+0x36339c>
    2740:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2744:	1a00000b 	bne	2778 <phys_cc1350+0x130>
    2748:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    274c:	341b0000 	ldrcc	r0, [fp], #-0
    2750:	3a080300 	bcc	203358 <__ccfg+0x1e33b0>
	plugch ();
    2754:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2758:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    275c:	0000000a 	andeq	r0, r0, sl
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2760:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2764:	030b130e 	movweq	r1, #45838	; 0xb30e
    2768:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    276c:	10011106 	andne	r1, r1, r6, lsl #2
}
    2770:	02000006 	andeq	r0, r0, #6
    2774:	0b0b0024 	bleq	2c280c <__ccfg+0x2a2864>
    2778:	0e030b3e 	vmoveq.16	d3[0], r0
    277c:	16030000 	strne	r0, [r3], -r0
    2780:	3a0e0300 	bcc	383388 <__ccfg+0x3633e0>
    2784:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2788:	0013490b 	andseq	r4, r3, fp, lsl #18
    278c:	00240400 	eoreq	r0, r4, r0, lsl #8
    2790:	0b3e0b0b 	bleq	f853c4 <__ccfg+0xf6541c>
    2794:	00000803 	andeq	r0, r0, r3, lsl #16
    2798:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    279c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    27a0:	13490035 	movtne	r0, #36917	; 0x9035
    27a4:	0f070000 	svceq	0x00070000
    27a8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    27ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
    27b0:	0b0b0113 	bleq	2c2c04 <__ccfg+0x2a2c5c>
    27b4:	0b3b0b3a 	bleq	ec54a4 <__ccfg+0xea54fc>
    27b8:	13010b39 	movwne	r0, #6969	; 0x1b39
    27bc:	0d090000 	stceq	0, cr0, [r9, #-0]
    27c0:	3a0e0300 	bcc	3833c8 <__ccfg+0x363420>
    27c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27c8:	0b13490b 	bleq	4d4bfc <__ccfg+0x4b4c54>
    27cc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    27d0:	000b380b 	andeq	r3, fp, fp, lsl #16
    27d4:	000d0a00 	andeq	r0, sp, r0, lsl #20
    27d8:	0b3a0e03 	bleq	e85fec <__ccfg+0xe66044>
    27dc:	0b390b3b 	bleq	e454d0 <__ccfg+0xe25528>
    27e0:	0b381349 	bleq	e0750c <__ccfg+0xde7564>
    27e4:	340b0000 	strcc	r0, [fp], #-0
    27e8:	3a0e0300 	bcc	3833f0 <__ccfg+0x363448>
    27ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27f0:	3f13490b 	svccc	0x0013490b
    27f4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    27f8:	01010c00 	tsteq	r1, r0, lsl #24
    27fc:	13011349 	movwne	r1, #4937	; 0x1349
    2800:	210d0000 	mrscs	r0, (UNDEF: 13)
    2804:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2808:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    280c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2810:	13490b39 	movtne	r0, #39737	; 0x9b39
    2814:	150f0000 	strne	r0, [pc, #-0]	; 281c <tcv_ope_null+0x8>
    2818:	010c2701 	tsteq	ip, r1, lsl #14
    281c:	10000013 	andne	r0, r0, r3, lsl r0
    2820:	13490005 	movtne	r0, #36869	; 0x9005
    2824:	34110000 	ldrcc	r0, [r1], #-0
    2828:	3a0e0300 	bcc	383430 <__ccfg+0x363488>
    282c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2830:	3f13490b 	svccc	0x0013490b
    2834:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2838:	01131200 	tsteq	r3, r0, lsl #4
    283c:	0b3a0b0b 	bleq	e85470 <__ccfg+0xe654c8>
    2840:	0b39053b 	bleq	e43d34 <__ccfg+0xe23d8c>
    2844:	00001301 	andeq	r1, r0, r1, lsl #6
    2848:	03000d13 	movweq	r0, #3347	; 0xd13
    284c:	3b0b3a0e 	blcc	2d108c <__ccfg+0x2b10e4>
    2850:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2854:	000b3813 	andeq	r3, fp, r3, lsl r8
    2858:	01131400 	tsteq	r3, r0, lsl #8
strand (__outserial, const char*)
    285c:	0b0b0e03 	bleq	2c6070 <__ccfg+0x2a60c8>
    2860:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2864:	13010b39 	movwne	r0, #6969	; 0x1b39
    2868:	21150000 	tstcs	r5, r0
endstrand
    286c:	2f134900 	svccs	0x00134900
    2870:	1600000b 	strne	r0, [r0], -fp
	ptr = data;
    2874:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2878:	0b3b0b3a 	bleq	ec5568 <__ccfg+0xea55c0>
	if (*ptr)
    287c:	13490b39 	movtne	r0, #39737	; 0x9b39
		len = strlen (ptr);
    2880:	0a020c3f 	beq	85984 <__ccfg+0x659dc>
    2884:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2888:	030c3f01 	movweq	r3, #52993	; 0xcf01
    288c:	3b0b3a0e 	blcc	2d10cc <__ccfg+0x2b1124>
    2890:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2894:	1201110c 	andne	r1, r1, #12, 2
    2898:	000a4001 	andeq	r4, sl, r1
	len -= quant;
    289c:	00051800 	andeq	r1, r5, r0, lsl #16
    28a0:	0b3a0e03 	bleq	e860b4 <__ccfg+0xe6610c>
    28a4:	0b390b3b 	bleq	e45598 <__ccfg+0xe255f0>
	if (len == 0) {
    28a8:	06021349 	streq	r1, [r2], -r9, asr #6
		ufree (data);
    28ac:	34190000 	ldrcc	r0, [r9], #-0
		finish;
    28b0:	3a0e0300 	bcc	3834b8 <__ccfg+0x363510>
    28b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28bc:	1a000006 	bne	28dc <__inserial+0x10>
    28c0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    28c4:	341b0000 	ldrcc	r0, [fp], #-0
    28c8:	3a080300 	bcc	2034d0 <__ccfg+0x1e3528>
strand (__inserial, address)
    28cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28d4:	0000000a 	andeq	r0, r0, sl
    28d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    28dc:	030b130e 	movweq	r1, #45838	; 0xb30e
	if (__inpline != NULL)
    28e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    28e4:	10011106 	andne	r1, r1, r6, lsl #2
		finish;
    28e8:	02000006 	andeq	r0, r0, #6
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28ec:	0b0b0024 	bleq	2c2984 <__ccfg+0x2a29dc>
    28f0:	0e030b3e 	vmoveq.16	d3[0], r0
    28f4:	16030000 	strne	r0, [r3], -r0
    28f8:	3a0e0300 	bcc	383500 <__ccfg+0x363558>
		umwait (IM_INIT);
    28fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		release;
    2900:	0013490b 	andseq	r4, r3, fp, lsl #18
	savedata (data);
    2904:	00240400 	eoreq	r0, r4, r0, lsl #8
	len = MAX_LINE_LENGTH;
    2908:	0b3e0b0b 	bleq	f8553c <__ccfg+0xf65594>
	io (IM_READ, __cport, READ, ptr, 1);
    290c:	00000803 	andeq	r0, r0, r3, lsl #16
    2910:	03011305 	movweq	r1, #4869	; 0x1305
    2914:	3a0b0b0e 	bcc	2c5554 <__ccfg+0x2a55ac>
    2918:	010b3b0b 	tsteq	fp, fp, lsl #22
	if (ptr == (char*) data) { // new line
    291c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2920:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if (*ptr == '\0') { // bin cmd
    2924:	0b381349 	bleq	e07650 <__ccfg+0xde76a8>
			proceed (IM_BIN);
    2928:	00000c34 	andeq	r0, r0, r4, lsr ip
    292c:	0b000f07 	bleq	6550 <__exidx_end+0x1624>
		if (*ptr < 0x20)
    2930:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2934:	13490026 	movtne	r0, #36902	; 0x9026
			proceed (IM_READ);
    2938:	35090000 	strcc	r0, [r9, #-0]
    293c:	00134900 	andseq	r4, r3, r0, lsl #18
	if (*ptr == '\n' || *ptr == '\r') {
    2940:	000f0a00 	andeq	r0, pc, r0, lsl #20
    2944:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2948:	130b0000 	movwne	r0, #45056	; 0xb000
		*ptr = '\0';
    294c:	3a0b0b01 	bcc	2c5558 <__ccfg+0x2a55b0>
		__inpline = (char*)data;
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		finish;
    2954:	0013010b 	andseq	r0, r3, fp, lsl #2
	if (len) {
    2958:	000d0c00 	andeq	r0, sp, r0, lsl #24
		ptr++;
    295c:	0b3a0e03 	bleq	e86170 <__ccfg+0xe661c8>
    2960:	0b390b3b 	bleq	e45654 <__ccfg+0xe256ac>
		len--;
    2964:	0b0b1349 	bleq	2c7690 <__ccfg+0x2a76e8>
	proceed (IM_READ);
    2968:	0b0c0b0d 	bleq	3055a4 <__ccfg+0x2e55fc>
	io (IM_BIN, __cport, READ, ptr, 1);
    296c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2970:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2974:	3b0b3a0e 	blcc	2d11b4 <__ccfg+0x2b120c>
    2978:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    297c:	000b3813 	andeq	r3, fp, r3, lsl r8
	len -= 2;
    2980:	00340e00 	eorseq	r0, r4, r0, lsl #28
	if (len > *ptr + 1) // 1 for 0x04
    2984:	0b3a0e03 	bleq	e86198 <__ccfg+0xe661f0>
    2988:	0b390b3b 	bleq	e4567c <__ccfg+0xe256d4>
		len = *ptr + 1;
    298c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2870 <__outserial+0x14>
    2990:	00000c3c 	andeq	r0, r0, ip, lsr ip
	ptr++;
    2994:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2998:	00130113 	andseq	r0, r3, r3, lsl r1
    299c:	00211000 	eoreq	r1, r1, r0
    29a0:	16110000 	ldrne	r0, [r1], -r0
    29a4:	3a0e0300 	bcc	3835ac <__ccfg+0x363604>
    29a8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    29ac:	0013490b 	andseq	r4, r3, fp, lsl #18
	len -= quant;
    29b0:	01151200 	tsteq	r5, r0, lsl #4
		__inpline = (char*)data;
    29b4:	13010c27 	movwne	r0, #7207	; 0x1c27
		finish;
    29b8:	05130000 	ldreq	r0, [r3, #-0]
	ptr += quant;
    29bc:	00134900 	andseq	r4, r3, r0, lsl #18
    29c0:	00341400 	eorseq	r1, r4, r0, lsl #8
endstrand
    29c4:	0b3a0e03 	bleq	e861d8 <__ccfg+0xe66230>
    29c8:	0b39053b 	bleq	e43ebc <__ccfg+0xe23f14>
	proceed (IM_BINL);
    29cc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 28b0 <__outserial+0x54>
endstrand
    29d0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    29d4:	0b011315 	bleq	47630 <__ccfg+0x27688>
    29d8:	3b0b3a0b 	blcc	2d120c <__ccfg+0x2b1264>
    29dc:	010b3905 	tsteq	fp, r5, lsl #18
    29e0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    29e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if (res && (d < n))
    29e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    29ec:	13490b39 	movtne	r0, #39737	; 0x9b39
    29f0:	00000b38 	andeq	r0, r0, r8, lsr fp
    29f4:	03011317 	movweq	r1, #4887	; 0x1317
			res [d] = (char) c;
    29f8:	3a0b0b0e 	bcc	2c5638 <__ccfg+0x2a5690>
		d++;
    29fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a00:	0013010b 	andseq	r0, r3, fp, lsl #2
    2a04:	00211800 	eoreq	r1, r1, r0, lsl #16
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a08:	0b2f1349 	bleq	bc7734 <__ccfg+0xba778c>
    2a0c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2a10:	030c3f01 	movweq	r3, #52993	; 0xcf01
				enci (10000);
    2a14:	3b0b3a0e 	blcc	2d1254 <__ccfg+0x2b12ac>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a18:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2a1c:	1113490c 	tstne	r3, ip, lsl #18
	d = 0;
    2a20:	40011201 	andmi	r1, r1, r1, lsl #4
		c = *fm++;
    2a24:	0013010a 	andseq	r0, r3, sl, lsl #2
		if (c == '\\') {
    2a28:	00051a00 	andeq	r1, r5, r0, lsl #20
			if ((c = *fm++) == '\0') {
    2a2c:	0b3a0803 	bleq	e84a40 <__ccfg+0xe64a98>
    2a30:	0b390b3b 	bleq	e45724 <__ccfg+0xe2577c>
				outc ('\\');
    2a34:	06021349 	streq	r1, [r2], -r9, asr #6
			if ((c = *fm++) == '\0') {
    2a38:	341b0000 	ldrcc	r0, [fp], #-0
				outc ('\\');
    2a3c:	3a080300 	bcc	203644 <__ccfg+0x1e369c>
    2a40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			outc (c);
    2a44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2a48:	1c000006 	stcne	0, cr0, [r0], {6}
			if (c == '\0')
    2a4c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2a50:	0b3b0b3a 	bleq	ec5740 <__ccfg+0xea5798>
			outc (c);
    2a54:	01110b39 	tsteq	r1, r9, lsr fp
				outc (val);
    2a58:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
				val = (word) va_arg (ap, aword);
    2a5c:	030c3f01 	movweq	r3, #52993	; 0xcf01
		if (c == '%') {
    2a60:	3b0b3a0e 	blcc	2d12a0 <__ccfg+0x2b12f8>
    2a64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			c = *fm++;
    2a68:	1113490c 	tstne	r3, ip, lsl #18
			switch (c) {
    2a6c:	40011201 	andmi	r1, r1, r1, lsl #4
    2a70:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2a74:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2a78:	0b3b0b3a 	bleq	ec5768 <__ccfg+0xea57c0>
    2a7c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a80:	00000a02 	andeq	r0, r0, r2, lsl #20
    2a84:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    2a88:	3b0b3a0e 	blcc	2d12c8 <__ccfg+0x2b1320>
				outc ('%');
    2a8c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2a90:	1201110c 	andne	r1, r1, #12, 2
				outc (c);
    2a94:	480a4001 	stmdami	sl, {r0, lr}
    2a98:	0013010a 	andseq	r0, r3, sl, lsl #2
    2a9c:	00052000 	andeq	r2, r5, r0
				if (c == '\0')
    2aa0:	0b3a0803 	bleq	e84ab4 <__ccfg+0xe64b0c>
				return d;
    2aa4:	0b390b3b 	bleq	e45798 <__ccfg+0xe257f0>
}
    2aa8:	0a021349 	beq	877d4 <__ccfg+0x6782c>
    2aac:	0a210000 	beq	842ab4 <__ccfg+0x822b0c>
			switch (c) {
    2ab0:	3a080300 	bcc	2036b8 <__ccfg+0x1e3710>
    2ab4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ab8:	0001110b 	andeq	r1, r1, fp, lsl #2
				for (i = 12; ; i -= 4) {
    2abc:	010b2200 	mrseq	r2, R11_fiq
				val = (word) va_arg (ap, aword);
    2ac0:	13010655 	movwne	r0, #5717	; 0x1655
						[ (val >> i) & 0xf ]);
    2ac4:	34230000 	strtcc	r0, [r3], #-0
    2ac8:	3a080300 	bcc	2036d0 <__ccfg+0x1e3728>
    2acc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					outc (__pi_hex_enc_table
    2ad0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ad4:	010b2400 	tsteq	fp, r0, lsl #8
					if (i == 0)
    2ad8:	01120111 	tsteq	r2, r1, lsl r1
    2adc:	00001301 	andeq	r1, r0, r1, lsl #6
				for (i = 12; ; i -= 4) {
    2ae0:	11010b25 	tstne	r1, r5, lsr #22
				val = (word) va_arg (ap, aword);
    2ae4:	00011201 	andeq	r1, r1, r1, lsl #4
				if (c == 'd' && (val & 0x8000) != 0) {
    2ae8:	11010000 	mrsne	r0, (UNDEF: 1)
				val = (word) va_arg (ap, aword);
    2aec:	130e2501 	movwne	r2, #58625	; 0xe501
				if (c == 'd' && (val & 0x8000) != 0) {
    2af0:	1b0e030b 	blne	383724 <__ccfg+0x36377c>
    2af4:	1106550e 	tstne	r6, lr, lsl #10
					outc ('-');
    2af8:	00061001 	andeq	r1, r6, r1
    2afc:	00240200 	eoreq	r0, r4, r0, lsl #4
					val = (~val) + 1;
    2b00:	0b3e0b0b 	bleq	f85734 <__ccfg+0xf6578c>
    2b04:	00000e03 	andeq	r0, r0, r3, lsl #28
				for (i = 12; ; i -= 4) {
    2b08:	03001603 	movweq	r1, #1539	; 0x603
				enci (10000);
    2b0c:	3b0b3a0e 	blcc	2d134c <__ccfg+0x2b13a4>
    2b10:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2b14:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2b18:	0b0b0024 	bleq	2c2bb0 <__ccfg+0x2a2c08>
    2b1c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2b20:	13050000 	movwne	r0, #20480	; 0x5000
    2b24:	0b0e0301 	bleq	383730 <__ccfg+0x363788>
    2b28:	3b0b3a0b 	blcc	2d135c <__ccfg+0x2b13b4>
    2b2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b30:	000d0600 	andeq	r0, sp, r0, lsl #12
    2b34:	13490e03 	movtne	r0, #40451	; 0x9e03
    2b38:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2b3c:	0f070000 	svceq	0x00070000
    2b40:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2b44:	00260800 	eoreq	r0, r6, r0, lsl #16
    2b48:	00001349 	andeq	r1, r0, r9, asr #6
    2b4c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2b50:	0a000013 	beq	2ba4 <__pi_vfparse+0x19c>
				if (c == 'd' || c == 'u') {
    2b54:	0b0b000f 	bleq	2c2b98 <__ccfg+0x2a2bf0>
    2b58:	00001349 	andeq	r1, r0, r9, asr #6
					if (c == 'd' &&
    2b5c:	0b01130b 	bleq	47790 <__ccfg+0x277e8>
					val = va_arg (ap, lword);
    2b60:	3b0b3a0b 	blcc	2d1394 <__ccfg+0x2b13ec>
					fm++;
    2b64:	010b390b 	tsteq	fp, fp, lsl #18
					if (c == 'd' &&
    2b68:	0c000013 	stceq	0, cr0, [r0], {19}
    2b6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
						outc ('-');
    2b70:	0b3b0b3a 	bleq	ec5860 <__ccfg+0xea58b8>
    2b74:	13490b39 	movtne	r0, #39737	; 0x9b39
						val = (~val) + 1;
    2b78:	0b0d0b0b 	bleq	3457ac <__ccfg+0x325804>
				enci (10000);
    2b7c:	0b380b0c 	bleq	e057b4 <__ccfg+0xde580c>
					enci (1000000000UL);
    2b80:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2b84:	3a0e0300 	bcc	38378c <__ccfg+0x3637e4>
    2b88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b8c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2b90:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2b94:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b98:	0b3b0b3a 	bleq	ec5888 <__ccfg+0xea58e0>
    2b9c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2ba0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2ba4:	010f0000 	mrseq	r0, CPSR
    2ba8:	01134901 	tsteq	r3, r1, lsl #18
    2bac:	10000013 	andne	r0, r0, r3, lsl r0
    2bb0:	00000021 	andeq	r0, r0, r1, lsr #32
    2bb4:	03001611 	movweq	r1, #1553	; 0x611
    2bb8:	3b0b3a0e 	blcc	2d13f8 <__ccfg+0x2b1450>
    2bbc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2bc0:	12000013 	andne	r0, r0, #19
				} else if (c == 'x') {
    2bc4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
					for (i = 28; ; i -= 4) {
    2bc8:	00001301 	andeq	r1, r0, r1, lsl #6
					val = va_arg (ap, lword);
    2bcc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
							[ (val >> i) & 0xf ]);
    2bd0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2bd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
						outc (__pi_hex_enc_table
    2bd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2bdc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2be0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
						if (i == 0)
    2be4:	13150000 	tstne	r5, #0
    2be8:	3a0b0b01 	bcc	2c57f4 <__ccfg+0x2a584c>
					for (i = 28; ; i -= 4) {
    2bec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					outc ('%');
    2bf0:	0013010b 	andseq	r0, r3, fp, lsl #2
    2bf4:	000d1600 	andeq	r1, sp, r0, lsl #12
    2bf8:	0b3a0e03 	bleq	e8640c <__ccfg+0xe66464>
					outc ('l');
    2bfc:	0b39053b 	bleq	e440f0 <__ccfg+0xe24148>
    2c00:	0b381349 	bleq	e0792c <__ccfg+0xde7984>
				val = (word) va_arg (ap, aword);
    2c04:	13170000 	tstne	r7, #0
				outc (val);
    2c08:	0b0e0301 	bleq	383814 <__ccfg+0x36386c>
    2c0c:	3b0b3a0b 	blcc	2d1440 <__ccfg+0x2b1498>
				while (*st != '\0') {
    2c10:	010b3905 	tsteq	fp, r5, lsl #18
    2c14:	18000013 	stmdane	r0, {r0, r1, r4}
    2c18:	13490021 	movtne	r0, #36897	; 0x9021
    2c1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
					outc (*st);
    2c20:	3f012e19 	svccc	0x00012e19
    2c24:	3a0e030c 	bcc	38385c <__ccfg+0x3638b4>
					st++;
    2c28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		c = *fm++;
    2c2c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2c30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2c34:	010a4001 	tsteq	sl, r1
char *vform (char *res, const char *fm, va_list aq) {
    2c38:	1a000013 	bne	2c8c <vscan+0x4>
    2c3c:	08030005 	stmdaeq	r3, {r0, r2}
	if (res != NULL) {
    2c40:	0b3b0b3a 	bleq	ec5930 <__ccfg+0xea5988>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c44:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c48:	00000602 	andeq	r0, r0, r2, lsl #12
    2c4c:	0300341b 	movweq	r3, #1051	; 0x41b
}
    2c50:	3b0b3a08 	blcc	2d1478 <__ccfg+0x2b14d0>
    2c54:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	fml = strlen (fm) + 17;
    2c58:	00060213 	andeq	r0, r6, r3, lsl r2
    2c5c:	000a1c00 	andeq	r1, sl, r0, lsl #24
    2c60:	0b3a0e03 	bleq	e86474 <__ccfg+0xe664cc>
	if ((res = (char*) umalloc (fml)) == NULL)
    2c64:	0b390b3b 	bleq	e45958 <__ccfg+0xe259b0>
    2c68:	0b1d0000 	bleq	742c70 <__ccfg+0x722cc8>
    2c6c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c70:	00130101 	andseq	r0, r3, r1, lsl #2
    2c74:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2c78:	0b3a0803 	bleq	e84c8c <__ccfg+0xe64ce4>
    2c7c:	0b390b3b 	bleq	e45970 <__ccfg+0xe259c8>
		ufree (res);
    2c80:	0a021349 	beq	879ac <__ccfg+0x67a04>
		goto Again;
    2c84:	0b1f0000 	bleq	7c2c8c <__ccfg+0x7a2ce4>
	if (buf == NULL || fmt == NULL)
    2c88:	01065501 	tsteq	r6, r1, lsl #10
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c8c:	20000013 	andcs	r0, r0, r3, lsl r0
	if (buf == NULL || fmt == NULL)
    2c90:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c94:	0b3b0b3a 	bleq	ec5984 <__ccfg+0xea59dc>
    2c98:	13490b39 	movtne	r0, #39737	; 0x9b39
		    	    case 'u': scanu (lword); break;
    2c9c:	0b210000 	bleq	842ca4 <__ccfg+0x822cfc>
			while (isspace (*buf)) buf++;
    2ca0:	00065501 	andeq	r5, r6, r1, lsl #10
    2ca4:	11010000 	mrsne	r0, (UNDEF: 1)
	while (*fmt != '\0') {
    2ca8:	130e2501 	movwne	r2, #58625	; 0xe501
		if (*fmt++ != '%')
    2cac:	1b0e030b 	blne	3838e0 <__ccfg+0x363938>
		switch (*fmt++) {
    2cb0:	0006100e 	andeq	r1, r6, lr
    2cb4:	00240200 	eoreq	r0, r4, r0, lsl #4
    2cb8:	0b3e0b0b 	bleq	f858ec <__ccfg+0xf65944>
    2cbc:	00000e03 	andeq	r0, r0, r3, lsl #28
    2cc0:	03001603 	movweq	r1, #1539	; 0x603
    2cc4:	3b0b3a0e 	blcc	2d1504 <__ccfg+0x2b155c>
    2cc8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    2ccc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		switch (*fmt++) {
    2cd0:	13490026 	movtne	r0, #36902	; 0x9026
    2cd4:	24050000 	strcs	r0, [r5], #-0
    2cd8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2cdc:	0008030b 	andeq	r0, r8, fp, lsl #6
			while (isspace (*buf)) buf++;
    2ce0:	00160600 	andseq	r0, r6, r0, lsl #12
    2ce4:	0b3a0e03 	bleq	e864f8 <__ccfg+0xe66550>
    2ce8:	0b39053b 	bleq	e441dc <__ccfg+0xe24234>
    2cec:	00001349 	andeq	r1, r0, r9, asr #6
    2cf0:	0b011707 	bleq	48914 <__ccfg+0x2896c>
    2cf4:	3b0b3a0b 	blcc	2d1528 <__ccfg+0x2b1580>
			if (*buf == '\0')
    2cf8:	010b390b 	tsteq	fp, fp, lsl #18
			if (*buf != ',') {
    2cfc:	08000013 	stmdaeq	r0, {r0, r1, r4}
			sap = va_arg (ap, char*);
    2d00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			nc++;
    2d04:	0b3b0b3a 	bleq	ec59f4 <__ccfg+0xea5a4c>
			if (*buf != ',') {
    2d08:	13490b39 	movtne	r0, #39737	; 0x9b39
				while (!isspace (*buf) && *buf != ',' &&
    2d0c:	01090000 	mrseq	r0, (UNDEF: 9)
    2d10:	01134901 	tsteq	r3, r1, lsl #18
    2d14:	0a000013 	beq	2d68 <vscan+0xe0>
    2d18:	13490021 	movtne	r0, #36897	; 0x9021
    2d1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2d20:	0b01130b 	bleq	47954 <__ccfg+0x279ac>
    2d24:	3b0b3a0b 	blcc	2d1558 <__ccfg+0x2b15b0>
			while (isspace (*buf)) buf++;
    2d28:	010b390b 	tsteq	fp, fp, lsl #18
    2d2c:	0c000013 	stceq	0, cr0, [r0], {19}
    2d30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d34:	0b3b0b3a 	bleq	ec5a24 <__ccfg+0xea5a7c>
    2d38:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (*buf == ',') buf++;
    2d3c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2d40:	0b000f0d 	bleq	697c <__exidx_end+0x1a50>
			*sap = '\0';
    2d44:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
			break;
    2d48:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		    case 'd': scani (word); break;
    2d4c:	0b3a0b0b 	bleq	e85980 <__ccfg+0xe659d8>
    2d50:	0b390b3b 	bleq	e45a44 <__ccfg+0xe25a9c>
    2d54:	00001301 	andeq	r1, r0, r1, lsl #6
    2d58:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2d5c:	3b0b3a08 	blcc	2d1584 <__ccfg+0x2b15dc>
    2d60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d64:	000b3813 	andeq	r3, fp, r3, lsl r8
    2d68:	000f1000 	andeq	r1, pc, r0
    2d6c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2d70:	13110000 	tstne	r1, #0
    2d74:	0b0e0301 	bleq	383980 <__ccfg+0x3639d8>
    2d78:	3b0b3a05 	blcc	2d1594 <__ccfg+0x2b15ec>
    2d7c:	010b390b 	tsteq	fp, fp, lsl #18
    2d80:	12000013 	andne	r0, r0, #19
    2d84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d88:	0b3b0b3a 	bleq	ec5a78 <__ccfg+0xea5ad0>
    2d8c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d90:	00000538 	andeq	r0, r0, r8, lsr r5
    2d94:	27001513 	smladcs	r0, r3, r5, r1
    2d98:	1400000c 	strne	r0, [r0], #-12
    2d9c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2da0:	13011349 	movwne	r1, #4937	; 0x1349
    2da4:	05150000 	ldreq	r0, [r5, #-0]
    2da8:	00134900 	andseq	r4, r3, r0, lsl #18
    2dac:	01131600 	tsteq	r3, r0, lsl #12
    2db0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2db4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2db8:	13010b39 	movwne	r0, #6969	; 0x1b39
		    case 'u': scanu (word); break;
    2dbc:	0d170000 	ldceq	0, cr0, [r7, #-0]
    2dc0:	3a0e0300 	bcc	3839c8 <__ccfg+0x363a20>
    2dc4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dc8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2dcc:	1800000b 	stmdane	r0, {r0, r1, r3}
    2dd0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2dd4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2dd8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2ddc:	00000538 	andeq	r0, r0, r8, lsr r5
    2de0:	03011319 	movweq	r1, #4889	; 0x1319
    2de4:	3a0b0b0e 	bcc	2c5a24 <__ccfg+0x2a5a7c>
    2de8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dec:	0013010b 	andseq	r0, r3, fp, lsl #2
    2df0:	01131a00 	tsteq	r3, r0, lsl #20
    2df4:	0b3a0b0b 	bleq	e85a28 <__ccfg+0xe65a80>
    2df8:	0b39053b 	bleq	e442ec <__ccfg+0xe24344>
    2dfc:	00001301 	andeq	r1, r0, r1, lsl #6
    2e00:	0b01171b 	bleq	48a74 <__ccfg+0x28acc>
		    case 'x': scanx (word); break;
    2e04:	3b0b3a0b 	blcc	2d1638 <__ccfg+0x2b1690>
    2e08:	010b3905 	tsteq	fp, r5, lsl #18
    2e0c:	1c000013 	stcne	0, cr0, [r0], {19}
    2e10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2e14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2e18:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e1c:	131d0000 	tstne	sp, #0
    2e20:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    2e24:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    2e28:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2e2c:	00001301 	andeq	r1, r0, r1, lsl #6
    2e30:	0300341f 	movweq	r3, #1055	; 0x41f
    2e34:	3b0b3a0e 	blcc	2d1674 <__ccfg+0x2b16cc>
    2e38:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2e3c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2e40:	2000000c 	andcs	r0, r0, ip
    2e44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2e48:	0b3b0b3a 	bleq	ec5b38 <__ccfg+0xea5b90>
    2e4c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e50:	0b0d0b0b 	bleq	345a84 <__ccfg+0x325adc>
    2e54:	0b380b0c 	bleq	e05a8c <__ccfg+0xde5ae4>
    2e58:	0d210000 	stceq	0, cr0, [r1, #-0]
    2e5c:	3a0e0300 	bcc	383a64 <__ccfg+0x363abc>
    2e60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e64:	0b13490b 	bleq	4d5298 <__ccfg+0x4b52f0>
    2e68:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2e6c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2e70:	00342200 	eorseq	r2, r4, r0, lsl #4
    2e74:	0b3a0e03 	bleq	e86688 <__ccfg+0xe666e0>
    2e78:	0b390b3b 	bleq	e45b6c <__ccfg+0xe25bc4>
			switch (*fmt++) {
    2e7c:	031c1349 	tsteq	ip, #603979777	; 0x24000001
    2e80:	21230000 			; <UNDEFINED> instruction: 0x21230000
    2e84:	2f134900 	svccs	0x00134900
    2e88:	24000005 	strcs	r0, [r0], #-5
    2e8c:	13490035 	movtne	r0, #36917	; 0x9035
    2e90:	34250000 	strtcc	r0, [r5], #-0
		    	    case 'd': scani (lword); break;
    2e94:	3a0e0300 	bcc	383a9c <__ccfg+0x363af4>
    2e98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e9c:	3f13490b 	svccc	0x0013490b
    2ea0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2ea4:	00212600 	eoreq	r2, r1, r0, lsl #12
    2ea8:	34270000 	strtcc	r0, [r7], #-0
    2eac:	3a0e0300 	bcc	383ab4 <__ccfg+0x363b0c>
    2eb0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2eb4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2eb8:	2800000a 	stmdacs	r0, {r1, r3}
    2ebc:	13470034 	movtne	r0, #28724	; 0x7034
    2ec0:	0b3b0b3a 	bleq	ec5bb0 <__ccfg+0xea5c08>
    2ec4:	0a020b39 	beq	85bb0 <__ccfg+0x65c08>
    2ec8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ecc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2ed0:	0e030b13 	vmoveq.32	d3[0], r0
    2ed4:	17550e1b 	smmlane	r5, fp, lr, r0
    2ed8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2edc:	24020000 	strcs	r0, [r2], #-0
    2ee0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2ee4:	000e030b 	andeq	r0, lr, fp, lsl #6
    2ee8:	00160300 	andseq	r0, r6, r0, lsl #6
    2eec:	0b3a0e03 	bleq	e86700 <__ccfg+0xe66758>
		    	    case 'x': scanx (lword); break;
    2ef0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ef4:	24040000 	strcs	r0, [r4], #-0
    2ef8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2efc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2f00:	000f0500 	andeq	r0, pc, r0, lsl #10
    2f04:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2f08:	15060000 	strne	r0, [r6, #-0]
    2f0c:	00192700 	andseq	r2, r9, r0, lsl #14
    2f10:	01150700 	tsteq	r5, r0, lsl #14
    2f14:	13011927 	movwne	r1, #6439	; 0x1927
    2f18:	05080000 	streq	r0, [r8, #-0]
    2f1c:	00134900 	andseq	r4, r3, r0, lsl #18
    2f20:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2f24:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2f28:	0b3b0b3a 	bleq	ec5c18 <__ccfg+0xea5c70>
    2f2c:	01111927 	tsteq	r1, r7, lsr #18
    2f30:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f34:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2f38:	0a000013 	beq	2f8c <vscan+0x304>
    2f3c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2f40:	0b3b0b3a 	bleq	ec5c30 <__ccfg+0xea5c88>
    2f44:	17021349 	strne	r1, [r2, -r9, asr #6]
    2f48:	340b0000 	strcc	r0, [fp], #-0
    2f4c:	3a0e0300 	bcc	383b54 <__ccfg+0x363bac>
    2f50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f54:	00170213 	andseq	r0, r7, r3, lsl r2
    2f58:	82890c00 	addhi	r0, r9, #0, 24
    2f5c:	01110001 	tsteq	r1, r1
		    	    case 'd': scani (lword); break;
    2f60:	00001331 	andeq	r1, r0, r1, lsr r3
    2f64:	0182890d 	orreq	r8, r2, sp, lsl #18
    2f68:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    2f6c:	13311942 	teqne	r1, #1081344	; 0x108000
    2f70:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    2f74:	03193f01 	tsteq	r9, #1, 30
    2f78:	3b0b3a0e 	blcc	2d17b8 <__ccfg+0x2b1810>
		    	    case 'u': scanu (lword); break;
    2f7c:	1119270b 	tstne	r9, fp, lsl #14
    2f80:	40061201 	andmi	r1, r6, r1, lsl #4
    2f84:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2f88:	00001301 	andeq	r1, r0, r1, lsl #6
    2f8c:	0182890f 	orreq	r8, r2, pc, lsl #18
    2f90:	01011101 	tsteq	r1, r1, lsl #2
    2f94:	10000013 	andne	r0, r0, r3, lsl r0
    2f98:	0001828a 	andeq	r8, r1, sl, lsl #5
    2f9c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2fa0:	11000018 	tstne	r0, r8, lsl r0
    2fa4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2fa8:	0b3a0e03 	bleq	e867bc <__ccfg+0xe66814>
    2fac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2fb0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    2fb8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2fbc:	0e030b13 	vmoveq.32	d3[0], r0
    2fc0:	17550e1b 	smmlane	r5, fp, lr, r0
		    	    case 'x': scanx (lword); break;
    2fc4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2fc8:	16020000 	strne	r0, [r2], -r0
			if ((c = *buf++) == '\0')
    2fcc:	3a0e0300 	bcc	383bd4 <__ccfg+0x363c2c>
    2fd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			sap = va_arg (ap, char*);
    2fd4:	03000013 	movweq	r0, #19
			nc++;
    2fd8:	0b0b0024 	bleq	2c3070 <__ccfg+0x2a30c8>
			break;
    2fdc:	0e030b3e 	vmoveq.16	d3[0], r0
			while (isspace (*buf)) buf++;
    2fe0:	24040000 	strcs	r0, [r4], #-0
    2fe4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2fe8:	0008030b 	andeq	r0, r8, fp, lsl #6
						*sap++ = *buf++;
    2fec:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    2ff0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
			while (isspace (*buf)) buf++;
    2ff4:	0b3b0b3a 	bleq	ec5ce4 <__ccfg+0xea5d3c>
    2ff8:	13491927 	movtne	r1, #39207	; 0x9927
    2ffc:	06120111 			; <UNDEFINED> instruction: 0x06120111
		return 0;
    3000:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3004:	06000019 			; <UNDEFINED> instruction: 0x06000019
		    case 'x': scanx (word); break;
    3008:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    300c:	0b3b0b3a 	bleq	ec5cfc <__ccfg+0xea5d54>
		    	    case 'x': scanx (lword); break;
    3010:	17021349 	strne	r1, [r2, -r9, asr #6]
    3014:	34070000 	strcc	r0, [r7], #-0
    3018:	3a0e0300 	bcc	383c20 <__ccfg+0x363c78>
    301c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3020:	00180213 	andseq	r0, r8, r3, lsl r2
    3024:	11010000 	mrsne	r0, (UNDEF: 1)
    3028:	130e2501 	movwne	r2, #58625	; 0xe501
    302c:	1b0e030b 	blne	383c60 <__ccfg+0x363cb8>
    3030:	1117550e 	tstne	r7, lr, lsl #10
    3034:	00171001 	andseq	r1, r7, r1
    3038:	00240200 	eoreq	r0, r4, r0, lsl #4
    303c:	0b3e0b0b 	bleq	f85c70 <__ccfg+0xf65cc8>
    3040:	00000e03 	andeq	r0, r0, r3, lsl #28
    3044:	03001603 	movweq	r1, #1539	; 0x603
    3048:	3b0b3a0e 	blcc	2d1888 <__ccfg+0x2b18e0>
    304c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3050:	00240400 	eoreq	r0, r4, r0, lsl #8
    3054:	0b3e0b0b 	bleq	f85c88 <__ccfg+0xf65ce0>
    3058:	00000803 	andeq	r0, r0, r3, lsl #16
    305c:	3f012e05 	svccc	0x00012e05
    3060:	3a0e0319 	bcc	383ccc <__ccfg+0x363d24>
    3064:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3068:	11134919 	tstne	r3, r9, lsl r9
    306c:	40061201 	andmi	r1, r6, r1, lsl #4
    3070:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3074:	00001301 	andeq	r1, r0, r1, lsl #6
    3078:	03003406 	movweq	r3, #1030	; 0x406
    307c:	3b0b3a0e 	blcc	2d18bc <__ccfg+0x2b1914>
    3080:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3084:	07000017 	smladeq	r0, r7, r0, r0
    3088:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    308c:	0b3b0b3a 	bleq	ec5d7c <__ccfg+0xea5dd4>
    3090:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3094:	17080000 	strne	r0, [r8, -r0]
    3098:	3a0b0b01 	bcc	2c5ca4 <__ccfg+0x2a5cfc>
    309c:	010b3b0b 	tsteq	fp, fp, lsl #22
    30a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    30a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    30a8:	0b3b0b3a 	bleq	ec5d98 <__ccfg+0xea5df0>
    30ac:	00001349 	andeq	r1, r0, r9, asr #6
    30b0:	0300340a 	movweq	r3, #1034	; 0x40a
    30b4:	3b0b3a0e 	blcc	2d18f4 <__ccfg+0x2b194c>
    30b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    30bc:	01010b00 	tsteq	r1, r0, lsl #22
    30c0:	13011349 	movwne	r1, #4937	; 0x1349
    30c4:	210c0000 	mrscs	r0, (UNDEF: 12)
    30c8:	2f134900 	svccs	0x00134900
    30cc:	0000000b 	andeq	r0, r0, fp
    30d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    30d4:	030b130e 	movweq	r1, #45838	; 0xb30e
    30d8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    30dc:	10011117 	andne	r1, r1, r7, lsl r1
    30e0:	02000017 	andeq	r0, r0, #23
    30e4:	0b0b0024 	bleq	2c317c <__ccfg+0x2a31d4>
    30e8:	0e030b3e 	vmoveq.16	d3[0], r0
    30ec:	16030000 	strne	r0, [r3], -r0
    30f0:	3a0e0300 	bcc	383cf8 <__ccfg+0x363d50>
    30f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30f8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    30fc:	0b0b0024 	bleq	2c3194 <__ccfg+0x2a31ec>
    3100:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3104:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3108:	03193f01 	tsteq	r9, #1, 30
    310c:	3b0b3a0e 	blcc	2d194c <__ccfg+0x2b19a4>
    3110:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3114:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3118:	97184006 	ldrls	r4, [r8, -r6]
    311c:	13011942 	movwne	r1, #6466	; 0x1942
    3120:	34060000 	strcc	r0, [r6], #-0
    3124:	3a0e0300 	bcc	383d2c <__ccfg+0x363d84>
    3128:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    312c:	07000013 	smladeq	r0, r3, r0, r0
    3130:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3138:	00001349 	andeq	r1, r0, r9, asr #6
    313c:	3f012e08 	svccc	0x00012e08
    3140:	3a0e0319 	bcc	383dac <__ccfg+0x363e04>
    3144:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3148:	11134919 	tstne	r3, r9, lsl r9
    314c:	40061201 	andmi	r1, r6, r1, lsl #4
    3150:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3154:	00001301 	andeq	r1, r0, r1, lsl #6
    3158:	3f012e09 	svccc	0x00012e09
    315c:	3a0e0319 	bcc	383dc8 <__ccfg+0x363e20>
    3160:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3164:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3168:	97184006 	ldrls	r4, [r8, -r6]
    316c:	00001942 	andeq	r1, r0, r2, asr #18
    3170:	0300050a 	movweq	r0, #1290	; 0x50a
    3174:	3b0b3a0e 	blcc	2d19b4 <__ccfg+0x2b1a0c>
    3178:	02134905 	andseq	r4, r3, #81920	; 0x14000
    317c:	00000018 	andeq	r0, r0, r8, lsl r0
    3180:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3184:	030b130e 	movweq	r1, #45838	; 0xb30e
    3188:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    318c:	10011117 	andne	r1, r1, r7, lsl r1
    3190:	02000017 	andeq	r0, r0, #23
    3194:	0b0b0024 	bleq	2c322c <__ccfg+0x2a3284>
    3198:	0e030b3e 	vmoveq.16	d3[0], r0
    319c:	16030000 	strne	r0, [r3], -r0
    31a0:	3a0e0300 	bcc	383da8 <__ccfg+0x363e00>
    31a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    31ac:	0b0b0024 	bleq	2c3244 <__ccfg+0x2a329c>
    31b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    31b4:	0f050000 	svceq	0x00050000
    31b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    31bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    31c0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    31c4:	15070000 	strne	r0, [r7, #-0]
    31c8:	01192701 	tsteq	r9, r1, lsl #14
    31cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    31d0:	13490005 	movtne	r0, #36869	; 0x9005
    31d4:	15090000 	strne	r0, [r9, #-0]
    31d8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    31dc:	00130113 	andseq	r0, r3, r3, lsl r1
    31e0:	00150a00 	andseq	r0, r5, r0, lsl #20
    31e4:	13491927 	movtne	r1, #39207	; 0x9927
    31e8:	130b0000 	movwne	r0, #45056	; 0xb000
    31ec:	3a0b0b01 	bcc	2c5df8 <__ccfg+0x2a5e50>
    31f0:	010b3b0b 	tsteq	fp, fp, lsl #22
    31f4:	0c000013 	stceq	0, cr0, [r0], {19}
    31f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    31fc:	0b3b0b3a 	bleq	ec5eec <__ccfg+0xea5f44>
    3200:	0b381349 	bleq	e07f2c <__ccfg+0xde7f84>
    3204:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3208:	03193f01 	tsteq	r9, #1, 30
    320c:	3b0b3a0e 	blcc	2d1a4c <__ccfg+0x2b1aa4>
    3210:	2019270b 	andscs	r2, r9, fp, lsl #14
    3214:	0013010b 	andseq	r0, r3, fp, lsl #2
    3218:	00050e00 	andeq	r0, r5, r0, lsl #28
    321c:	0b3a0e03 	bleq	e86a30 <__ccfg+0xe66a88>
    3220:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3224:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3228:	03193f01 	tsteq	r9, #1, 30
    322c:	3b0b3a0e 	blcc	2d1a6c <__ccfg+0x2b1ac4>
    3230:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3234:	010b2013 	tsteq	fp, r3, lsl r0
    3238:	10000013 	andne	r0, r0, r3, lsl r0
    323c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3240:	0b3b0b3a 	bleq	ec5f30 <__ccfg+0xea5f88>
    3244:	00001349 	andeq	r1, r0, r9, asr #6
    3248:	31012e11 	tstcc	r1, r1, lsl lr
    324c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3250:	97184006 	ldrls	r4, [r8, -r6]
    3254:	13011942 	movwne	r1, #6466	; 0x1942
    3258:	05120000 	ldreq	r0, [r2, #-0]
    325c:	02133100 	andseq	r3, r3, #0, 2
    3260:	13000017 	movwne	r0, #23
    3264:	0111010b 	tsteq	r1, fp, lsl #2
    3268:	13010612 	movwne	r0, #5650	; 0x1612
    326c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    3270:	11010182 	smlabbne	r1, r2, r1, r0
    3274:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3278:	8a150000 	bhi	543280 <__ccfg+0x5232d8>
    327c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3280:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3284:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3288:	11010182 	smlabbne	r1, r2, r1, r0
    328c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3290:	00001301 	andeq	r1, r0, r1, lsl #6
    3294:	31003417 	tstcc	r0, r7, lsl r4
    3298:	00180213 	andseq	r0, r8, r3, lsl r2
    329c:	010b1800 	tsteq	fp, r0, lsl #16
    32a0:	13011755 	movwne	r1, #5973	; 0x1755
    32a4:	05190000 	ldreq	r0, [r9, #-0]
    32a8:	1c133100 	ldfnes	f3, [r3], {-0}
    32ac:	1a00000b 	bne	32e0 <NOROM_RFCRfTrimRead+0x80>
    32b0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    32b4:	341b0000 	ldrcc	r0, [fp], #-0
    32b8:	00133100 	andseq	r3, r3, r0, lsl #2
    32bc:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    32c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    32c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    32c8:	13491927 	movtne	r1, #39207	; 0x9927
    32cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    32d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    32d4:	00130119 	andseq	r0, r3, r9, lsl r1
    32d8:	00051d00 	andeq	r1, r5, r0, lsl #26
    32dc:	0b3a0e03 	bleq	e86af0 <__ccfg+0xe66b48>
    32e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    32e4:	00001702 	andeq	r1, r0, r2, lsl #14
    32e8:	0300341e 	movweq	r3, #1054	; 0x41e
    32ec:	3b0b3a0e 	blcc	2d1b2c <__ccfg+0x2b1b84>
    32f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    32f4:	1f000017 	svcne	0x00000017
    32f8:	00018289 	andeq	r8, r1, r9, lsl #5
    32fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3300:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    3304:	03193f01 	tsteq	r9, #1, 30
    3308:	3b0b3a0e 	blcc	2d1b48 <__ccfg+0x2b1ba0>
    330c:	11192705 	tstne	r9, r5, lsl #14
    3310:	40061201 	andmi	r1, r6, r1, lsl #4
    3314:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3318:	00001301 	andeq	r1, r0, r1, lsl #6
    331c:	01828921 	orreq	r8, r2, r1, lsr #18
    3320:	31011101 	tstcc	r1, r1, lsl #2
    3324:	00130113 	andseq	r0, r3, r3, lsl r1
    3328:	002e2200 	eoreq	r2, lr, r0, lsl #4
    332c:	0b3a0e03 	bleq	e86b40 <__ccfg+0xe66b98>
    3330:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3334:	0b201349 	bleq	808060 <__ccfg+0x7e80b8>
    3338:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    333c:	3a0e0300 	bcc	383f44 <__ccfg+0x363f9c>
    3340:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3344:	000b2019 	andeq	r2, fp, r9, lsl r0
    3348:	00342400 	eorseq	r2, r4, r0, lsl #8
    334c:	0b3a0e03 	bleq	e86b60 <__ccfg+0xe66bb8>
    3350:	1349053b 	movtne	r0, #38203	; 0x953b
    3354:	00001702 	andeq	r1, r0, r2, lsl #14
    3358:	31011d25 	tstcc	r1, r5, lsr #26
    335c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3360:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3364:	00130105 	andseq	r0, r3, r5, lsl #2
    3368:	00052600 	andeq	r2, r5, r0, lsl #12
    336c:	0b3a0e03 	bleq	e86b80 <__ccfg+0xe66bd8>
    3370:	1349053b 	movtne	r0, #38203	; 0x953b
    3374:	00001702 	andeq	r1, r0, r2, lsl #14
    3378:	03003427 	movweq	r3, #1063	; 0x427
    337c:	3b0b3a0e 	blcc	2d1bbc <__ccfg+0x2b1c14>
    3380:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3384:	28000018 	stmdacs	r0, {r3, r4}
    3388:	08030034 	stmdaeq	r3, {r2, r4, r5}
    338c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3390:	17021349 	strne	r1, [r2, -r9, asr #6]
    3394:	34290000 	strtcc	r0, [r9], #-0
    3398:	3a0e0300 	bcc	383fa0 <__ccfg+0x363ff8>
    339c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    33a0:	00180213 	andseq	r0, r8, r3, lsl r2
    33a4:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    33a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    33ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    33b0:	13491927 	movtne	r1, #39207	; 0x9927
    33b4:	0000193c 	andeq	r1, r0, ip, lsr r9
    33b8:	3f002e2b 	svccc	0x00002e2b
    33bc:	3a0e0319 	bcc	384028 <__ccfg+0x364080>
    33c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    33c4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    33c8:	2c000019 	stccs	0, cr0, [r0], {25}
    33cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    33d0:	0b3a0e03 	bleq	e86be4 <__ccfg+0xe66c3c>
    33d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    33d8:	0000193c 	andeq	r1, r0, ip, lsr r9
    33dc:	01110100 	tsteq	r1, r0, lsl #2
    33e0:	0b130e25 	bleq	4c6c7c <__ccfg+0x4a6cd4>
    33e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    33e8:	01111755 	tsteq	r1, r5, asr r7
    33ec:	00001710 	andeq	r1, r0, r0, lsl r7
    33f0:	0b002402 	bleq	c400 <__exidx_end+0x74d4>
    33f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33f8:	0300000e 	movweq	r0, #14
    33fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3400:	0b3b0b3a 	bleq	ec60f0 <__ccfg+0xea6148>
    3404:	00001349 	andeq	r1, r0, r9, asr #6
    3408:	0b002404 	bleq	c420 <__exidx_end+0x74f4>
    340c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3410:	05000008 	streq	r0, [r0, #-8]
    3414:	0b0b000f 	bleq	2c3458 <__ccfg+0x2a34b0>
    3418:	0f060000 	svceq	0x00060000
    341c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3420:	07000013 	smladeq	r0, r3, r0, r0
    3424:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3428:	0b3a0b0b 	bleq	e8605c <__ccfg+0xe660b4>
    342c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3430:	0d080000 	stceq	0, cr0, [r8, #-0]
    3434:	3a0e0300 	bcc	38403c <__ccfg+0x364094>
    3438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    343c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3440:	01130900 	tsteq	r3, r0, lsl #18
    3444:	0b3a0b0b 	bleq	e86078 <__ccfg+0xe660d0>
    3448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    344c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    3450:	3a0e0300 	bcc	384058 <__ccfg+0x3640b0>
    3454:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3458:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    345c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3460:	0b00000b 	bleq	3494 <NOROM_RFCRTrim+0xe4>
    3464:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3468:	0b3a0b0b 	bleq	e8609c <__ccfg+0xe660f4>
    346c:	1301053b 	movwne	r0, #5435	; 0x153b
    3470:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3474:	3a0e0300 	bcc	38407c <__ccfg+0x3640d4>
    3478:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    347c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3480:	01130d00 	tsteq	r3, r0, lsl #26
    3484:	0b3a0b0b 	bleq	e860b8 <__ccfg+0xe66110>
    3488:	1301053b 	movwne	r0, #5435	; 0x153b
    348c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    3490:	3a0e0300 	bcc	384098 <__ccfg+0x3640f0>
    3494:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3498:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    349c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    34a0:	0f00000b 	svceq	0x0000000b
    34a4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    34a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    34ac:	0b201927 	bleq	809950 <__ccfg+0x7e99a8>
    34b0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    34b4:	03193f01 	tsteq	r9, #1, 30
    34b8:	3b0b3a0e 	blcc	2d1cf8 <__ccfg+0x2b1d50>
    34bc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    34c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34c4:	97184006 	ldrls	r4, [r8, -r6]
    34c8:	13011942 	movwne	r1, #6466	; 0x1942
    34cc:	34110000 	ldrcc	r0, [r1], #-0
    34d0:	3a0e0300 	bcc	3840d8 <__ccfg+0x364130>
    34d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    34d8:	00180213 	andseq	r0, r8, r3, lsl r2
    34dc:	00051200 	andeq	r1, r5, r0, lsl #4
    34e0:	0b3a0803 	bleq	e854f4 <__ccfg+0xe6554c>
    34e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    34e8:	00001702 	andeq	r1, r0, r2, lsl #14
    34ec:	31001d13 	tstcc	r0, r3, lsl sp
    34f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34f4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    34f8:	1400000b 	strne	r0, [r0], #-11
    34fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3500:	0b3a0e03 	bleq	e86d14 <__ccfg+0xe66d6c>
    3504:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3508:	06120111 			; <UNDEFINED> instruction: 0x06120111
    350c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3510:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    3514:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3518:	0b3a0e03 	bleq	e86d2c <__ccfg+0xe66d84>
    351c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3520:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3524:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3528:	00130119 	andseq	r0, r3, r9, lsl r1
    352c:	00051600 	andeq	r1, r5, r0, lsl #12
    3530:	0b3a0e03 	bleq	e86d44 <__ccfg+0xe66d9c>
    3534:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3538:	00001802 	andeq	r1, r0, r2, lsl #16
    353c:	03003417 	movweq	r3, #1047	; 0x417
    3540:	3b0b3a0e 	blcc	2d1d80 <__ccfg+0x2b1dd8>
    3544:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3548:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    354c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3550:	0b3b0b3a 	bleq	ec6240 <__ccfg+0xea6298>
    3554:	17021349 	strne	r1, [r2, -r9, asr #6]
    3558:	34190000 	ldrcc	r0, [r9], #-0
    355c:	3a0e0300 	bcc	384164 <__ccfg+0x3641bc>
    3560:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3564:	1a000013 	bne	35b8 <TrimAfterColdResetWakeupFromShutDown+0xb4>
    3568:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    356c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3570:	17021349 	strne	r1, [r2, -r9, asr #6]
    3574:	341b0000 	ldrcc	r0, [fp], #-0
    3578:	3a0e0300 	bcc	384180 <__ccfg+0x3641d8>
    357c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3580:	00061c13 	andeq	r1, r6, r3, lsl ip
    3584:	00341c00 	eorseq	r1, r4, r0, lsl #24
    3588:	0b3a0803 	bleq	e8559c <__ccfg+0xe655f4>
    358c:	1349053b 	movtne	r0, #38203	; 0x953b
    3590:	00001702 	andeq	r1, r0, r2, lsl #14
    3594:	0182891d 	orreq	r8, r2, sp, lsl r9
    3598:	31011101 	tstcc	r1, r1, lsl #2
    359c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    35a0:	0001828a 	andeq	r8, r1, sl, lsl #5
    35a4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    35a8:	1f000018 	svcne	0x00000018
    35ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    35b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    35b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    35b8:	01200000 			; <UNDEFINED> instruction: 0x01200000
    35bc:	01134901 	tsteq	r3, r1, lsl #18
    35c0:	21000013 	tstcs	r0, r3, lsl r0
    35c4:	13490021 	movtne	r0, #36897	; 0x9021
    35c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    35cc:	03003422 	movweq	r3, #1058	; 0x422
    35d0:	3b0b3a0e 	blcc	2d1e10 <__ccfg+0x2b1e68>
    35d4:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    35d8:	2300000a 	movwcs	r0, #10
    35dc:	13490026 	movtne	r0, #36902	; 0x9026
    35e0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    35e4:	03193f01 	tsteq	r9, #1, 30
    35e8:	3b0b3a0e 	blcc	2d1e28 <__ccfg+0x2b1e80>
    35ec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    35f0:	00193c13 	andseq	r3, r9, r3, lsl ip
    35f4:	00052500 	andeq	r2, r5, r0, lsl #10
    35f8:	00001349 	andeq	r1, r0, r9, asr #6
    35fc:	01110100 	tsteq	r1, r0, lsl #2
    3600:	0b130e25 	bleq	4c6e9c <__ccfg+0x4a6ef4>
    3604:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3608:	01111755 	tsteq	r1, r5, asr r7
    360c:	00001710 	andeq	r1, r0, r0, lsl r7
    3610:	0b002402 	bleq	c620 <__exidx_end+0x76f4>
    3614:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3618:	0300000e 	movweq	r0, #14
    361c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3620:	0b3b0b3a 	bleq	ec6310 <__ccfg+0xea6368>
    3624:	00001349 	andeq	r1, r0, r9, asr #6
    3628:	0b002404 	bleq	c640 <__exidx_end+0x7714>
    362c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3630:	05000008 	streq	r0, [r0, #-8]
    3634:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3638:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    363c:	0b201927 	bleq	809ae0 <__ccfg+0x7e9b38>
    3640:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3644:	3a0e0300 	bcc	38424c <__ccfg+0x3642a4>
    3648:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    364c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3650:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    3654:	0b3a0e03 	bleq	e86e68 <__ccfg+0xe66ec0>
    3658:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    365c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3660:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3664:	00130119 	andseq	r0, r3, r9, lsl r1
    3668:	00050800 	andeq	r0, r5, r0, lsl #16
    366c:	0b3a0e03 	bleq	e86e80 <__ccfg+0xe66ed8>
    3670:	1349053b 	movtne	r0, #38203	; 0x953b
    3674:	00001702 	andeq	r1, r0, r2, lsl #14
    3678:	03003409 	movweq	r3, #1033	; 0x409
    367c:	3b0b3a0e 	blcc	2d1ebc <__ccfg+0x2b1f14>
    3680:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3684:	0a000017 	beq	36e8 <NOROM_SetupSetVddrLevel+0x6c>
    3688:	1331001d 	teqne	r1, #29
    368c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3690:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3694:	0b0b0000 	bleq	2c369c <__ccfg+0x2a36f4>
    3698:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    369c:	00130106 	andseq	r0, r3, r6, lsl #2
    36a0:	82890c00 	addhi	r0, r9, #0, 24
    36a4:	01110101 	tsteq	r1, r1, lsl #2
    36a8:	13011331 	movwne	r1, #4913	; 0x1331
    36ac:	8a0d0000 	bhi	3436b4 <__ccfg+0x32370c>
    36b0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    36b4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    36b8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    36bc:	11010182 	smlabbne	r1, r2, r1, r0
    36c0:	0f000001 	svceq	0x00000001
    36c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    36c8:	0b3a0e03 	bleq	e86edc <__ccfg+0xe66f34>
    36cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    36d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    36d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    36d8:	00130119 	andseq	r0, r3, r9, lsl r1
    36dc:	00341000 	eorseq	r1, r4, r0
    36e0:	0b3a0e03 	bleq	e86ef4 <__ccfg+0xe66f4c>
    36e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36e8:	00001702 	andeq	r1, r0, r2, lsl #14
    36ec:	01828911 	orreq	r8, r2, r1, lsl r9
    36f0:	31011100 	mrscc	r1, (UNDEF: 17)
    36f4:	12000013 	andne	r0, r0, #19
    36f8:	01018289 	smlabbeq	r1, r9, r2, r8
    36fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3700:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    3704:	03193f01 	tsteq	r9, #1, 30
    3708:	3b0b3a0e 	blcc	2d1f48 <__ccfg+0x2b1fa0>
    370c:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3710:	00130119 	andseq	r0, r3, r9, lsl r1
    3714:	00051400 	andeq	r1, r5, r0, lsl #8
    3718:	00001349 	andeq	r1, r0, r9, asr #6
    371c:	3f002e15 	svccc	0x00002e15
    3720:	3a0e0319 	bcc	38438c <__ccfg+0x3643e4>
    3724:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3728:	00193c19 	andseq	r3, r9, r9, lsl ip
    372c:	002e1600 	eoreq	r1, lr, r0, lsl #12
    3730:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3734:	0b3b0b3a 	bleq	ec6424 <__ccfg+0xea647c>
    3738:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    373c:	01000000 	mrseq	r0, (UNDEF: 0)
    3740:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3744:	0e030b13 	vmoveq.32	d3[0], r0
    3748:	17550e1b 	smmlane	r5, fp, lr, r0
    374c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3750:	24020000 	strcs	r0, [r2], #-0
    3754:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3758:	000e030b 	andeq	r0, lr, fp, lsl #6
    375c:	00160300 	andseq	r0, r6, r0, lsl #6
    3760:	0b3a0e03 	bleq	e86f74 <__ccfg+0xe66fcc>
    3764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3768:	24040000 	strcs	r0, [r4], #-0
    376c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3770:	0008030b 	andeq	r0, r8, fp, lsl #6
    3774:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3778:	0b3a0e03 	bleq	e86f8c <__ccfg+0xe66fe4>
    377c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3780:	0b201349 	bleq	8084ac <__ccfg+0x7e8504>
    3784:	00001301 	andeq	r1, r0, r1, lsl #6
    3788:	03000506 	movweq	r0, #1286	; 0x506
    378c:	3b0b3a0e 	blcc	2d1fcc <__ccfg+0x2b2024>
    3790:	0013490b 	andseq	r4, r3, fp, lsl #18
    3794:	00340700 	eorseq	r0, r4, r0, lsl #14
    3798:	0b3a0e03 	bleq	e86fac <__ccfg+0xe67004>
    379c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    37a0:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    37a4:	03193f01 	tsteq	r9, #1, 30
    37a8:	3b0b3a0e 	blcc	2d1fe8 <__ccfg+0x2b2040>
    37ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    37b0:	010b2013 	tsteq	fp, r3, lsl r0
    37b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    37b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    37bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37c0:	00001349 	andeq	r1, r0, r9, asr #6
    37c4:	0300340a 	movweq	r3, #1034	; 0x40a
    37c8:	3b0b3a0e 	blcc	2d2008 <__ccfg+0x2b2060>
    37cc:	00134905 	andseq	r4, r3, r5, lsl #18
    37d0:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    37d4:	0b3a0e03 	bleq	e86fe8 <__ccfg+0xe67040>
    37d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    37dc:	00000b20 	andeq	r0, r0, r0, lsr #22
    37e0:	3f012e0c 	svccc	0x00012e0c
    37e4:	3a0e0319 	bcc	384450 <__ccfg+0x3644a8>
    37e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    37ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    37f0:	97184006 	ldrls	r4, [r8, -r6]
    37f4:	13011942 	movwne	r1, #6466	; 0x1942
    37f8:	050d0000 	streq	r0, [sp, #-0]
    37fc:	3a0e0300 	bcc	384404 <__ccfg+0x36445c>
    3800:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3804:	00170213 	andseq	r0, r7, r3, lsl r2
    3808:	00340e00 	eorseq	r0, r4, r0, lsl #28
    380c:	0b3a0e03 	bleq	e87020 <__ccfg+0xe67078>
    3810:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3814:	00001802 	andeq	r1, r0, r2, lsl #16
    3818:	0300340f 	movweq	r3, #1039	; 0x40f
    381c:	3b0b3a0e 	blcc	2d205c <__ccfg+0x2b20b4>
    3820:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3824:	10000017 	andne	r0, r0, r7, lsl r0
    3828:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    382c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3830:	0b590b58 	bleq	1646598 <__ccfg+0x16265f0>
    3834:	00001301 	andeq	r1, r0, r1, lsl #6
    3838:	31000511 	tstcc	r0, r1, lsl r5
    383c:	12000013 	andne	r0, r0, #19
    3840:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3844:	34130000 	ldrcc	r0, [r3], #-0
    3848:	02133100 	andseq	r3, r3, #0, 2
    384c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    3850:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3854:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3858:	0b590b58 	bleq	16465c0 <__ccfg+0x1626618>
    385c:	0b150000 	bleq	543864 <__ccfg+0x5238bc>
    3860:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3864:	16000006 	strne	r0, [r0], -r6
    3868:	13310034 	teqne	r1, #52	; 0x34
    386c:	00001702 	andeq	r1, r0, r2, lsl #14
    3870:	3f012e17 	svccc	0x00012e17
    3874:	3a0e0319 	bcc	3844e0 <__ccfg+0x364538>
    3878:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    387c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3880:	97184006 	ldrls	r4, [r8, -r6]
    3884:	13011942 	movwne	r1, #6466	; 0x1942
    3888:	1d180000 	ldcne	0, cr0, [r8, #-0]
    388c:	11133101 	tstne	r3, r1, lsl #2
    3890:	58061201 	stmdapl	r6, {r0, r9, ip}
    3894:	010b590b 	tsteq	fp, fp, lsl #18
    3898:	19000013 	stmdbne	r0, {r0, r1, r4}
    389c:	01018289 	smlabbeq	r1, r9, r2, r8
    38a0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    38a4:	8a1a0000 	bhi	6838ac <__ccfg+0x663904>
    38a8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    38ac:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    38b0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    38b4:	03193f01 	tsteq	r9, #1, 30
    38b8:	3b0b3a0e 	blcc	2d20f8 <__ccfg+0x2b2150>
    38bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    38c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38c4:	97184006 	ldrls	r4, [r8, -r6]
    38c8:	13011942 	movwne	r1, #6466	; 0x1942
    38cc:	051c0000 	ldreq	r0, [ip, #-0]
    38d0:	3a0e0300 	bcc	3844d8 <__ccfg+0x364530>
    38d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    38d8:	00170213 	andseq	r0, r7, r3, lsl r2
    38dc:	00341d00 	eorseq	r1, r4, r0, lsl #26
    38e0:	0b3a0e03 	bleq	e870f4 <__ccfg+0xe6714c>
    38e4:	1349053b 	movtne	r0, #38203	; 0x953b
    38e8:	00001702 	andeq	r1, r0, r2, lsl #14
    38ec:	31012e1e 	tstcc	r1, lr, lsl lr
    38f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38f4:	97184006 	ldrls	r4, [r8, -r6]
    38f8:	13011942 	movwne	r1, #6466	; 0x1942
    38fc:	051f0000 	ldreq	r0, [pc, #-0]	; 3904 <NOROM_SetupGetTrimForXoscHfFastStart>
    3900:	02133100 	andseq	r3, r3, #0, 2
    3904:	20000017 	andcs	r0, r0, r7, lsl r0
    3908:	13310034 	teqne	r1, #52	; 0x34
    390c:	1d210000 	stcne	0, cr0, [r1, #-0]
    3910:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3914:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3918:	0105590b 	tsteq	r5, fp, lsl #18
    391c:	22000013 	andcs	r0, r0, #19
    3920:	01018289 	smlabbeq	r1, r9, r2, r8
    3924:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3928:	00001301 	andeq	r1, r0, r1, lsl #6
    392c:	01828923 	orreq	r8, r2, r3, lsr #18
    3930:	31011100 	mrscc	r1, (UNDEF: 17)
    3934:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3938:	01018289 	smlabbeq	r1, r9, r2, r8
    393c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3940:	00130118 	andseq	r0, r3, r8, lsl r1
    3944:	001d2500 	andseq	r2, sp, r0, lsl #10
    3948:	01111331 	tsteq	r1, r1, lsr r3
    394c:	0b580612 	bleq	160519c <__ccfg+0x15e51f4>
    3950:	00000559 	andeq	r0, r0, r9, asr r5
    3954:	01828926 	orreq	r8, r2, r6, lsr #18
    3958:	01011101 	tsteq	r1, r1, lsl #2
    395c:	27000013 	smladcs	r0, r3, r0, r0
    3960:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3964:	0b3a0e03 	bleq	e87178 <__ccfg+0xe671d0>
    3968:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    396c:	1301193c 	movwne	r1, #6460	; 0x193c
    3970:	05280000 	streq	r0, [r8, #-0]!
    3974:	00134900 	andseq	r4, r3, r0, lsl #18
    3978:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    397c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3980:	0b3b0b3a 	bleq	ec6670 <__ccfg+0xea66c8>
    3984:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3988:	00001301 	andeq	r1, r0, r1, lsl #6
    398c:	3f012e2a 	svccc	0x00012e2a
    3990:	3a0e0319 	bcc	3845fc <__ccfg+0x364654>
    3994:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3998:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    399c:	00000019 	andeq	r0, r0, r9, lsl r0
    39a0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    39a4:	030b130e 	movweq	r1, #45838	; 0xb30e
    39a8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    39ac:	10011117 	andne	r1, r1, r7, lsl r1
    39b0:	02000017 	andeq	r0, r0, #23
    39b4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    39b8:	0b3b0b3a 	bleq	ec66a8 <__ccfg+0xea6700>
    39bc:	00001349 	andeq	r1, r0, r9, asr #6
    39c0:	0b002403 	bleq	c9d4 <__exidx_end+0x7aa8>
    39c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    39c8:	0400000e 	streq	r0, [r0], #-14
    39cc:	0b0b0024 	bleq	2c3a64 <__ccfg+0x2a3abc>
    39d0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    39d4:	0f050000 	svceq	0x00050000
    39d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    39dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    39e0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    39e4:	15070000 	strne	r0, [r7, #-0]
    39e8:	01192701 	tsteq	r9, r1, lsl #14
    39ec:	08000013 	stmdaeq	r0, {r0, r1, r4}
    39f0:	13490005 	movtne	r0, #36869	; 0x9005
    39f4:	15090000 	strne	r0, [r9, #-0]
    39f8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    39fc:	00130113 	andseq	r0, r3, r3, lsl r1
    3a00:	00150a00 	andseq	r0, r5, r0, lsl #20
    3a04:	13491927 	movtne	r1, #39207	; 0x9927
    3a08:	130b0000 	movwne	r0, #45056	; 0xb000
    3a0c:	3a0b0b01 	bcc	2c6618 <__ccfg+0x2a6670>
    3a10:	010b3b0b 	tsteq	fp, fp, lsl #22
    3a14:	0c000013 	stceq	0, cr0, [r0], {19}
    3a18:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3a1c:	0b3b0b3a 	bleq	ec670c <__ccfg+0xea6764>
    3a20:	0b381349 	bleq	e0874c <__ccfg+0xde87a4>
    3a24:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3a28:	3a0e0301 	bcc	384634 <__ccfg+0x36468c>
    3a2c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3a30:	010b2019 	tsteq	fp, r9, lsl r0
    3a34:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3a38:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3a40:	00001349 	andeq	r1, r0, r9, asr #6
    3a44:	03002e0f 	movweq	r2, #3599	; 0xe0f
    3a48:	3b0b3a0e 	blcc	2d2288 <__ccfg+0x2b22e0>
    3a4c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3a50:	000b2013 	andeq	r2, fp, r3, lsl r0
    3a54:	002e1000 	eoreq	r1, lr, r0
    3a58:	0b3a0e03 	bleq	e8726c <__ccfg+0xe672c4>
    3a5c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3a60:	00000b20 	andeq	r0, r0, r0, lsr #22
    3a64:	03012e11 	movweq	r2, #7697	; 0x1e11
    3a68:	3b0b3a0e 	blcc	2d22a8 <__ccfg+0x2b2300>
    3a6c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3a70:	010b2013 	tsteq	fp, r3, lsl r0
    3a74:	12000013 	andne	r0, r0, #19
    3a78:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a7c:	0b3b0b3a 	bleq	ec676c <__ccfg+0xea67c4>
    3a80:	00001349 	andeq	r1, r0, r9, asr #6
    3a84:	03003413 	movweq	r3, #1043	; 0x413
    3a88:	3b0b3a0e 	blcc	2d22c8 <__ccfg+0x2b2320>
    3a8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3a90:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    3a94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a98:	0b3b0b3a 	bleq	ec6788 <__ccfg+0xea67e0>
    3a9c:	01111927 	tsteq	r1, r7, lsr #18
    3aa0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3aa4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aa8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3aac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3ab0:	0b3b0b3a 	bleq	ec67a0 <__ccfg+0xea67f8>
    3ab4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3ab8:	34160000 	ldrcc	r0, [r6], #-0
    3abc:	3a0e0300 	bcc	3846c4 <__ccfg+0x36471c>
    3ac0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ac4:	00051c13 	andeq	r1, r5, r3, lsl ip
    3ac8:	011d1700 	tsteq	sp, r0, lsl #14
    3acc:	01521331 	cmpeq	r2, r1, lsr r3
    3ad0:	0b581755 	bleq	160982c <__ccfg+0x15e9884>
    3ad4:	13010b59 	movwne	r0, #7001	; 0x1b59
    3ad8:	05180000 	ldreq	r0, [r8, #-0]
    3adc:	1c133100 	ldfnes	f3, [r3], {-0}
    3ae0:	1900000b 	stmdbne	r0, {r0, r1, r3}
    3ae4:	1331001d 	teqne	r1, #29
    3ae8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3aec:	0b590b58 	bleq	1646854 <__ccfg+0x16268ac>
    3af0:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3af4:	11133101 	tstne	r3, r1, lsl #2
    3af8:	58061201 	stmdapl	r6, {r0, r9, ip}
    3afc:	010b590b 	tsteq	fp, fp, lsl #18
    3b00:	1b000013 	blne	3b54 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x50>
    3b04:	00018289 	andeq	r8, r1, r9, lsl #5
    3b08:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3b0c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3b10:	11010182 	smlabbne	r1, r2, r1, r0
    3b14:	00130101 	andseq	r0, r3, r1, lsl #2
    3b18:	828a1d00 	addhi	r1, sl, #0, 26
    3b1c:	18020001 	stmdane	r2, {r0}
    3b20:	00184291 	mulseq	r8, r1, r2
    3b24:	82891e00 	addhi	r1, r9, #0, 28
    3b28:	01110101 	tsteq	r1, r1, lsl #2
    3b2c:	13011331 	movwne	r1, #4913	; 0x1331
    3b30:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3b34:	11010182 	smlabbne	r1, r2, r1, r0
    3b38:	20000001 	andcs	r0, r0, r1
    3b3c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b40:	0b3a0e03 	bleq	e87354 <__ccfg+0xe673ac>
    3b44:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3b48:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3b4c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3b50:	00130119 	andseq	r0, r3, r9, lsl r1
    3b54:	00052100 	andeq	r2, r5, r0, lsl #2
    3b58:	0b3a0e03 	bleq	e8736c <__ccfg+0xe673c4>
    3b5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3b60:	00001702 	andeq	r1, r0, r2, lsl #14
    3b64:	03003422 	movweq	r3, #1058	; 0x422
    3b68:	3b0b3a0e 	blcc	2d23a8 <__ccfg+0x2b2400>
    3b6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3b70:	23000018 	movwcs	r0, #24
    3b74:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3b78:	0b3b0b3a 	bleq	ec6868 <__ccfg+0xea68c0>
    3b7c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3b80:	34240000 	strtcc	r0, [r4], #-0
    3b84:	3a080300 	bcc	20478c <__ccfg+0x1e47e4>
    3b88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b8c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3b90:	0111010b 	tsteq	r1, fp, lsl #2
    3b94:	13010612 	movwne	r0, #5650	; 0x1612
    3b98:	34260000 	strtcc	r0, [r6], #-0
    3b9c:	3a0e0300 	bcc	3847a4 <__ccfg+0x3647fc>
    3ba0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ba4:	00170213 	andseq	r0, r7, r3, lsl r2
    3ba8:	011d2700 	tsteq	sp, r0, lsl #14
    3bac:	01111331 	tsteq	r1, r1, lsr r3
    3bb0:	0b580612 	bleq	1605400 <__ccfg+0x15e5458>
    3bb4:	13010559 	movwne	r0, #5465	; 0x1559
    3bb8:	05280000 	streq	r0, [r8, #-0]!
    3bbc:	00133100 	andseq	r3, r3, r0, lsl #2
    3bc0:	010b2900 	tsteq	fp, r0, lsl #18
    3bc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3bc8:	342a0000 	strtcc	r0, [sl], #-0
    3bcc:	02133100 	andseq	r3, r3, #0, 2
    3bd0:	2b000017 	blcs	3c34 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>
    3bd4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3bd8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3bdc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3be0:	00001301 	andeq	r1, r0, r1, lsl #6
    3be4:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3be8:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3bec:	13490026 	movtne	r0, #36902	; 0x9026
    3bf0:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3bf4:	03193f00 	tsteq	r9, #0, 30
    3bf8:	3b0b3a0e 	blcc	2d2438 <__ccfg+0x2b2490>
    3bfc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3c00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3c04:	97184006 	ldrls	r4, [r8, -r6]
    3c08:	00001942 	andeq	r1, r0, r2, asr #18
    3c0c:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    3c10:	00130113 	andseq	r0, r3, r3, lsl r1
    3c14:	00213000 	eoreq	r3, r1, r0
    3c18:	0b2f1349 	bleq	bc8944 <__ccfg+0xba899c>
    3c1c:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    3c20:	03193f01 	tsteq	r9, #1, 30
    3c24:	3b0b3a0e 	blcc	2d2464 <__ccfg+0x2b24bc>
    3c28:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3c2c:	00130119 	andseq	r0, r3, r9, lsl r1
    3c30:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    3c34:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3c38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c3c:	13491927 	movtne	r1, #39207	; 0x9927
    3c40:	1301193c 	movwne	r1, #6460	; 0x193c
    3c44:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    3c48:	03193f00 	tsteq	r9, #0, 30
    3c4c:	3b0b3a0e 	blcc	2d248c <__ccfg+0x2b24e4>
    3c50:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3c54:	00193c13 	andseq	r3, r9, r3, lsl ip
    3c58:	11010000 	mrsne	r0, (UNDEF: 1)
    3c5c:	130e2501 	movwne	r2, #58625	; 0xe501
    3c60:	1b0e030b 	blne	384894 <__ccfg+0x3648ec>
    3c64:	1117550e 	tstne	r7, lr, lsl #10
    3c68:	00171001 	andseq	r1, r7, r1
    3c6c:	00240200 	eoreq	r0, r4, r0, lsl #4
    3c70:	0b3e0b0b 	bleq	f868a4 <__ccfg+0xf668fc>
    3c74:	00000e03 	andeq	r0, r0, r3, lsl #28
    3c78:	03001603 	movweq	r1, #1539	; 0x603
    3c7c:	3b0b3a0e 	blcc	2d24bc <__ccfg+0x2b2514>
    3c80:	0013490b 	andseq	r4, r3, fp, lsl #18
    3c84:	00240400 	eoreq	r0, r4, r0, lsl #8
    3c88:	0b3e0b0b 	bleq	f868bc <__ccfg+0xf66914>
    3c8c:	00000803 	andeq	r0, r0, r3, lsl #16
    3c90:	0b010405 	bleq	44cac <__ccfg+0x24d04>
    3c94:	3b0b3a0b 	blcc	2d24c8 <__ccfg+0x2b2520>
    3c98:	0013010b 	andseq	r0, r3, fp, lsl #2
    3c9c:	00280600 	eoreq	r0, r8, r0, lsl #12
    3ca0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3ca4:	04070000 	streq	r0, [r7], #-0
    3ca8:	3a0b0b01 	bcc	2c68b4 <__ccfg+0x2a690c>
    3cac:	01053b0b 	tsteq	r5, fp, lsl #22
    3cb0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3cb4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3cbc:	00001349 	andeq	r1, r0, r9, asr #6
    3cc0:	03002e09 	movweq	r2, #3593	; 0xe09
    3cc4:	3b0b3a0e 	blcc	2d2504 <__ccfg+0x2b255c>
    3cc8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3ccc:	000b2013 	andeq	r2, fp, r3, lsl r0
    3cd0:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3cd4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3cd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3cdc:	13491927 	movtne	r1, #39207	; 0x9927
    3ce0:	13010b20 	movwne	r0, #6944	; 0x1b20
    3ce4:	340b0000 	strcc	r0, [fp], #-0
    3ce8:	3a0e0300 	bcc	3848f0 <__ccfg+0x364948>
    3cec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cf0:	0c000013 	stceq	0, cr0, [r0], {19}
    3cf4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3cf8:	0b3a0e03 	bleq	e8750c <__ccfg+0xe67564>
    3cfc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3d00:	01111349 	tsteq	r1, r9, asr #6
    3d04:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3d08:	00194297 	mulseq	r9, r7, r2
    3d0c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3d10:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3d14:	0b3b0b3a 	bleq	ec6a04 <__ccfg+0xea6a5c>
    3d18:	13491927 	movtne	r1, #39207	; 0x9927
    3d1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d20:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3d24:	00130119 	andseq	r0, r3, r9, lsl r1
    3d28:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3d2c:	0b3a0e03 	bleq	e87540 <__ccfg+0xe67598>
    3d30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d34:	00001702 	andeq	r1, r0, r2, lsl #14
    3d38:	31012e0f 	tstcc	r1, pc, lsl #28
    3d3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d40:	97184006 	ldrls	r4, [r8, -r6]
    3d44:	13011942 	movwne	r1, #6466	; 0x1942
    3d48:	34100000 	ldrcc	r0, [r0], #-0
    3d4c:	02133100 	andseq	r3, r3, #0, 2
    3d50:	11000017 	tstne	r0, r7, lsl r0
    3d54:	0111010b 	tsteq	r1, fp, lsl #2
    3d58:	00000612 	andeq	r0, r0, r2, lsl r6
    3d5c:	31003412 	tstcc	r0, r2, lsl r4
    3d60:	13000013 	movwne	r0, #19
    3d64:	1331001d 	teqne	r1, #29
    3d68:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d6c:	0b590b58 	bleq	1646ad4 <__ccfg+0x1626b2c>
    3d70:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3d74:	03193f01 	tsteq	r9, #1, 30
    3d78:	3b0b3a0e 	blcc	2d25b8 <__ccfg+0x2b2610>
    3d7c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3d80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d84:	97184006 	ldrls	r4, [r8, -r6]
    3d88:	13011942 	movwne	r1, #6466	; 0x1942
    3d8c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    3d90:	11000182 	smlabbne	r0, r2, r1, r0
    3d94:	00133101 	andseq	r3, r3, r1, lsl #2
    3d98:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3d9c:	0b3a0e03 	bleq	e875b0 <__ccfg+0xe67608>
    3da0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3da4:	0b201349 	bleq	808ad0 <__ccfg+0x7e8b28>
    3da8:	00001301 	andeq	r1, r0, r1, lsl #6
    3dac:	03003417 	movweq	r3, #1047	; 0x417
    3db0:	3b0b3a0e 	blcc	2d25f0 <__ccfg+0x2b2648>
    3db4:	00134905 	andseq	r4, r3, r5, lsl #18
    3db8:	00341800 	eorseq	r1, r4, r0, lsl #16
    3dbc:	0b3a0e03 	bleq	e875d0 <__ccfg+0xe67628>
    3dc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3dc4:	00001802 	andeq	r1, r0, r2, lsl #16
    3dc8:	31001d19 	tstcc	r0, r9, lsl sp
    3dcc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3dd0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3dd4:	1a00000b 	bne	3e08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b4>
    3dd8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3ddc:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3de0:	0b590b58 	bleq	1646b48 <__ccfg+0x1626ba0>
    3de4:	00001301 	andeq	r1, r0, r1, lsl #6
    3de8:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    3dec:	1c000017 	stcne	0, cr0, [r0], {23}
    3df0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3df4:	0b3a0e03 	bleq	e87608 <__ccfg+0xe67660>
    3df8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3dfc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3e00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3e04:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    3e08:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3e0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3e10:	0b590b58 	bleq	1646b78 <__ccfg+0x1626bd0>
    3e14:	00001301 	andeq	r1, r0, r1, lsl #6
    3e18:	31011d1e 	tstcc	r1, lr, lsl sp
    3e1c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e20:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3e24:	0000000b 	andeq	r0, r0, fp
    3e28:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3e2c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3e30:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3e34:	10011117 	andne	r1, r1, r7, lsl r1
    3e38:	02000017 	andeq	r0, r0, #23
    3e3c:	0b0b0024 	bleq	2c3ed4 <__ccfg+0x2a3f2c>
    3e40:	0e030b3e 	vmoveq.16	d3[0], r0
    3e44:	16030000 	strne	r0, [r3], -r0
    3e48:	3a0e0300 	bcc	384a50 <__ccfg+0x364aa8>
    3e4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3e50:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3e54:	0b0b0024 	bleq	2c3eec <__ccfg+0x2a3f44>
    3e58:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3e5c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3e60:	3a0e0301 	bcc	384a6c <__ccfg+0x364ac4>
    3e64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3e68:	010b2019 	tsteq	fp, r9, lsl r0
    3e6c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3e70:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3e74:	0b3b0b3a 	bleq	ec6b64 <__ccfg+0xea6bbc>
    3e78:	00001349 	andeq	r1, r0, r9, asr #6
    3e7c:	03003407 	movweq	r3, #1031	; 0x407
    3e80:	3b0b3a0e 	blcc	2d26c0 <__ccfg+0x2b2718>
    3e84:	0013490b 	andseq	r4, r3, fp, lsl #18
    3e88:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    3e8c:	0b3a0e03 	bleq	e876a0 <__ccfg+0xe676f8>
    3e90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e94:	0b201349 	bleq	808bc0 <__ccfg+0x7e8c18>
    3e98:	00001301 	andeq	r1, r0, r1, lsl #6
    3e9c:	31012e09 	tstcc	r1, r9, lsl #28
    3ea0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3ea4:	97184006 	ldrls	r4, [r8, -r6]
    3ea8:	13011942 	movwne	r1, #6466	; 0x1942
    3eac:	050a0000 	streq	r0, [sl, #-0]
    3eb0:	02133100 	andseq	r3, r3, #0, 2
    3eb4:	0b000017 	bleq	3f18 <NOROM_ChipInfo_GetChipFamily+0x2c>
    3eb8:	13310034 	teqne	r1, #52	; 0x34
    3ebc:	00001702 	andeq	r1, r0, r2, lsl #14
    3ec0:	3100050c 	tstcc	r0, ip, lsl #10
    3ec4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    3ec8:	82890d00 	addhi	r0, r9, #0, 26
    3ecc:	01110001 	tsteq	r1, r1
    3ed0:	00001331 	andeq	r1, r0, r1, lsr r3
    3ed4:	0182890e 	orreq	r8, r2, lr, lsl #18
    3ed8:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    3edc:	13311942 	teqne	r1, #1081344	; 0x108000
    3ee0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3ee4:	03193f01 	tsteq	r9, #1, 30
    3ee8:	3b0b3a0e 	blcc	2d2728 <__ccfg+0x2b2780>
    3eec:	11192705 	tstne	r9, r5, lsl #14
    3ef0:	40061201 	andmi	r1, r6, r1, lsl #4
    3ef4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3ef8:	00001301 	andeq	r1, r0, r1, lsl #6
    3efc:	03000510 	movweq	r0, #1296	; 0x510
    3f00:	3b0b3a0e 	blcc	2d2740 <__ccfg+0x2b2798>
    3f04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3f08:	11000017 	tstne	r0, r7, lsl r0
    3f0c:	01018289 	smlabbeq	r1, r9, r2, r8
    3f10:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    3f14:	00133119 	andseq	r3, r3, r9, lsl r1
    3f18:	828a1200 	addhi	r1, sl, #0, 4
    3f1c:	18020001 	stmdane	r2, {r0}
    3f20:	00184291 	mulseq	r8, r1, r2
    3f24:	00341300 	eorseq	r1, r4, r0, lsl #6
    3f28:	0b3a0e03 	bleq	e8773c <__ccfg+0xe67794>
    3f2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f30:	00001702 	andeq	r1, r0, r2, lsl #14
    3f34:	3f012e14 	svccc	0x00012e14
    3f38:	3a0e0319 	bcc	384ba4 <__ccfg+0x364bfc>
    3f3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3f40:	11134919 	tstne	r3, r9, lsl r9
    3f44:	40061201 	andmi	r1, r6, r1, lsl #4
    3f48:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3f4c:	00001301 	andeq	r1, r0, r1, lsl #6
    3f50:	31011d15 	tstcc	r1, r5, lsl sp
    3f54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f58:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3f5c:	1600000b 	strne	r0, [r0], -fp
    3f60:	0111010b 	tsteq	r1, fp, lsl #2
    3f64:	00000612 	andeq	r0, r0, r2, lsl r6
    3f68:	3f002e17 	svccc	0x00002e17
    3f6c:	3a0e0319 	bcc	384bd8 <__ccfg+0x364c30>
    3f70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3f74:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3f78:	00000019 	andeq	r0, r0, r9, lsl r0
    3f7c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3f80:	030b130e 	movweq	r1, #45838	; 0xb30e
    3f84:	110e1b0e 	tstne	lr, lr, lsl #22
    3f88:	10061201 	andne	r1, r6, r1, lsl #4
    3f8c:	02000017 	andeq	r0, r0, #23
    3f90:	0b0b0024 	bleq	2c4028 <__ccfg+0x2a4080>
    3f94:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3f98:	16030000 	strne	r0, [r3], -r0
    3f9c:	3a0e0300 	bcc	384ba4 <__ccfg+0x364bfc>
    3fa0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fa4:	0013490b 	andseq	r4, r3, fp, lsl #18
    3fa8:	00240400 	eoreq	r0, r4, r0, lsl #8
    3fac:	0b3e0b0b 	bleq	f86be0 <__ccfg+0xf66c38>
    3fb0:	00000e03 	andeq	r0, r0, r3, lsl #28
    3fb4:	03001605 	movweq	r1, #1541	; 0x605
    3fb8:	3b0b3a0e 	blcc	2d27f8 <__ccfg+0x2b2850>
    3fbc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    3fc0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3fc4:	13490026 	movtne	r0, #36902	; 0x9026
    3fc8:	17070000 	strne	r0, [r7, -r0]
    3fcc:	3a0b0b01 	bcc	2c6bd8 <__ccfg+0x2a6c30>
    3fd0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fd4:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fd8:	000d0800 	andeq	r0, sp, r0, lsl #16
    3fdc:	0b3a0e03 	bleq	e877f0 <__ccfg+0xe67848>
    3fe0:	0b390b3b 	bleq	e46cd4 <__ccfg+0xe26d2c>
    3fe4:	00001349 	andeq	r1, r0, r9, asr #6
    3fe8:	49010109 	stmdbmi	r1, {r0, r3, r8}
    3fec:	00130113 	andseq	r0, r3, r3, lsl r1
    3ff0:	00210a00 	eoreq	r0, r1, r0, lsl #20
    3ff4:	0b2f1349 	bleq	bc8d20 <__ccfg+0xba8d78>
    3ff8:	130b0000 	movwne	r0, #45056	; 0xb000
    3ffc:	3a0b0b01 	bcc	2c6c08 <__ccfg+0x2a6c60>
    4000:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4004:	0013010b 	andseq	r0, r3, fp, lsl #2
    4008:	000d0c00 	andeq	r0, sp, r0, lsl #24
    400c:	0b3a0e03 	bleq	e87820 <__ccfg+0xe67878>
    4010:	0b390b3b 	bleq	e46d04 <__ccfg+0xe26d5c>
    4014:	0b381349 	bleq	e08d40 <__ccfg+0xde8d98>
    4018:	0f0d0000 	svceq	0x000d0000
    401c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4020:	00370e00 	eorseq	r0, r7, r0, lsl #28
    4024:	00001349 	andeq	r1, r0, r9, asr #6
    4028:	0301130f 	movweq	r1, #4879	; 0x130f
    402c:	3a0b0b0e 	bcc	2c6c6c <__ccfg+0x2a6cc4>
    4030:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4034:	0013010b 	andseq	r0, r3, fp, lsl #2
    4038:	000d1000 	andeq	r1, sp, r0
    403c:	0b3a0803 	bleq	e86050 <__ccfg+0xe660a8>
    4040:	0b390b3b 	bleq	e46d34 <__ccfg+0xe26d8c>
    4044:	0b381349 	bleq	e08d70 <__ccfg+0xde8dc8>
    4048:	0f110000 	svceq	0x00110000
    404c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4050:	12000013 	andne	r0, r0, #19
    4054:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4058:	0b3a050b 	bleq	e8548c <__ccfg+0xe654e4>
    405c:	0b390b3b 	bleq	e46d50 <__ccfg+0xe26da8>
    4060:	00001301 	andeq	r1, r0, r1, lsl #6
    4064:	03000d13 	movweq	r0, #3347	; 0xd13
    4068:	3b0b3a0e 	blcc	2d28a8 <__ccfg+0x2b2900>
    406c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4070:	00053813 	andeq	r3, r5, r3, lsl r8
    4074:	00151400 	andseq	r1, r5, r0, lsl #8
    4078:	00001927 	andeq	r1, r0, r7, lsr #18
    407c:	27011515 	smladcs	r1, r5, r5, r1
    4080:	01134919 	tsteq	r3, r9, lsl r9
    4084:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4088:	13490005 	movtne	r0, #36869	; 0x9005
    408c:	13170000 	tstne	r7, #0
    4090:	0b0e0301 	bleq	384c9c <__ccfg+0x364cf4>
    4094:	3b0b3a05 	blcc	2d28b0 <__ccfg+0x2b2908>
    4098:	010b3905 	tsteq	fp, r5, lsl #18
    409c:	18000013 	stmdane	r0, {r0, r1, r4}
    40a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    40a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    40a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    40ac:	00000b38 	andeq	r0, r0, r8, lsr fp
    40b0:	03000d19 	movweq	r0, #3353	; 0xd19
    40b4:	3b0b3a0e 	blcc	2d28f4 <__ccfg+0x2b294c>
    40b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    40bc:	00053813 	andeq	r3, r5, r3, lsl r8
    40c0:	01131a00 	tsteq	r3, r0, lsl #20
    40c4:	0b0b0e03 	bleq	2c78d8 <__ccfg+0x2a7930>
    40c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    40cc:	13010b39 	movwne	r0, #6969	; 0x1b39
    40d0:	131b0000 	tstne	fp, #0
    40d4:	3a0b0b01 	bcc	2c6ce0 <__ccfg+0x2a6d38>
    40d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    40dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    40e0:	01171c00 	tsteq	r7, r0, lsl #24
    40e4:	0b3a0b0b 	bleq	e86d18 <__ccfg+0xe66d70>
    40e8:	0b39053b 	bleq	e455dc <__ccfg+0xe25634>
    40ec:	00001301 	andeq	r1, r0, r1, lsl #6
    40f0:	03000d1d 	movweq	r0, #3357	; 0xd1d
    40f4:	3b0b3a0e 	blcc	2d2934 <__ccfg+0x2b298c>
    40f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    40fc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4100:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4104:	00001301 	andeq	r1, r0, r1, lsl #6
    4108:	0300341f 	movweq	r3, #1055	; 0x41f
    410c:	3b0b3a0e 	blcc	2d294c <__ccfg+0x2b29a4>
    4110:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4114:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4118:	20000019 	andcs	r0, r0, r9, lsl r0
    411c:	00000026 	andeq	r0, r0, r6, lsr #32
    4120:	03003421 	movweq	r3, #1057	; 0x421
    4124:	3b0b3a0e 	blcc	2d2964 <__ccfg+0x2b29bc>
    4128:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    412c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4130:	22000019 	andcs	r0, r0, #25
    4134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4138:	0b3a0e03 	bleq	e8794c <__ccfg+0xe679a4>
    413c:	0b390b3b 	bleq	e46e30 <__ccfg+0xe26e88>
    4140:	13491927 	movtne	r1, #39207	; 0x9927
    4144:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4148:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    414c:	00130119 	andseq	r0, r3, r9, lsl r1
    4150:	00052300 	andeq	r2, r5, r0, lsl #6
    4154:	0b3a0e03 	bleq	e87968 <__ccfg+0xe679c0>
    4158:	0b390b3b 	bleq	e46e4c <__ccfg+0xe26ea4>
    415c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4160:	05240000 	streq	r0, [r4, #-0]!
    4164:	3a0e0300 	bcc	384d6c <__ccfg+0x364dc4>
    4168:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    416c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4170:	1742b717 	smlaldne	fp, r2, r7, r7
    4174:	34250000 	strtcc	r0, [r5], #-0
    4178:	3a080300 	bcc	204d80 <__ccfg+0x1e4dd8>
    417c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4180:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4184:	1742b717 	smlaldne	fp, r2, r7, r7
    4188:	34260000 	strtcc	r0, [r6], #-0
    418c:	3a0e0300 	bcc	384d94 <__ccfg+0x364dec>
    4190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4198:	1742b717 	smlaldne	fp, r2, r7, r7
    419c:	01000000 	mrseq	r0, (UNDEF: 0)
    41a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    41a4:	0e030b13 	vmoveq.32	d3[0], r0
    41a8:	01110e1b 	tsteq	r1, fp, lsl lr
    41ac:	17100612 			; <UNDEFINED> instruction: 0x17100612
    41b0:	24020000 	strcs	r0, [r2], #-0
    41b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    41b8:	000e030b 	andeq	r0, lr, fp, lsl #6
    41bc:	00240300 	eoreq	r0, r4, r0, lsl #6
    41c0:	0b3e0b0b 	bleq	f86df4 <__ccfg+0xf66e4c>
    41c4:	00000803 	andeq	r0, r0, r3, lsl #16
    41c8:	03001604 	movweq	r1, #1540	; 0x604
    41cc:	3b0b3a0e 	blcc	2d2a0c <__ccfg+0x2b2a64>
    41d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    41d4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    41d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    41dc:	0b3b0b3a 	bleq	ec6ecc <__ccfg+0xea6f24>
    41e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    41e4:	17060000 	strne	r0, [r6, -r0]
    41e8:	3a0b0b01 	bcc	2c6df4 <__ccfg+0x2a6e4c>
    41ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    41f4:	000d0700 	andeq	r0, sp, r0, lsl #14
    41f8:	0b3a0e03 	bleq	e87a0c <__ccfg+0xe67a64>
    41fc:	0b390b3b 	bleq	e46ef0 <__ccfg+0xe26f48>
    4200:	00001349 	andeq	r1, r0, r9, asr #6
    4204:	49010108 	stmdbmi	r1, {r3, r8}
    4208:	00130113 	andseq	r0, r3, r3, lsl r1
    420c:	00210900 	eoreq	r0, r1, r0, lsl #18
    4210:	0b2f1349 	bleq	bc8f3c <__ccfg+0xba8f94>
    4214:	130a0000 	movwne	r0, #40960	; 0xa000
    4218:	3a0b0b01 	bcc	2c6e24 <__ccfg+0x2a6e7c>
    421c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4220:	0013010b 	andseq	r0, r3, fp, lsl #2
    4224:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4228:	0b3a0e03 	bleq	e87a3c <__ccfg+0xe67a94>
    422c:	0b390b3b 	bleq	e46f20 <__ccfg+0xe26f78>
    4230:	0b381349 	bleq	e08f5c <__ccfg+0xde8fb4>
    4234:	0f0c0000 	svceq	0x000c0000
    4238:	000b0b00 	andeq	r0, fp, r0, lsl #22
    423c:	01130d00 	tsteq	r3, r0, lsl #26
    4240:	0b0b0e03 	bleq	2c7a54 <__ccfg+0x2a7aac>
    4244:	0b3b0b3a 	bleq	ec6f34 <__ccfg+0xea6f8c>
    4248:	13010b39 	movwne	r0, #6969	; 0x1b39
    424c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4250:	3a080300 	bcc	204e58 <__ccfg+0x1e4eb0>
    4254:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4258:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    425c:	0f00000b 	svceq	0x0000000b
    4260:	0b0b000f 	bleq	2c42a4 <__ccfg+0x2a42fc>
    4264:	00001349 	andeq	r1, r0, r9, asr #6
    4268:	03011310 	movweq	r1, #4880	; 0x1310
    426c:	3a050b0e 	bcc	146eac <__ccfg+0x126f04>
    4270:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4274:	0013010b 	andseq	r0, r3, fp, lsl #2
    4278:	000d1100 	andeq	r1, sp, r0, lsl #2
    427c:	0b3a0e03 	bleq	e87a90 <__ccfg+0xe67ae8>
    4280:	0b390b3b 	bleq	e46f74 <__ccfg+0xe26fcc>
    4284:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4288:	15120000 	ldrne	r0, [r2, #-0]
    428c:	00192700 	andseq	r2, r9, r0, lsl #14
    4290:	01151300 	tsteq	r5, r0, lsl #6
    4294:	13491927 	movtne	r1, #39207	; 0x9927
    4298:	00001301 	andeq	r1, r0, r1, lsl #6
    429c:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    42a0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    42a4:	13490026 	movtne	r0, #36902	; 0x9026
    42a8:	13160000 	tstne	r6, #0
    42ac:	0b0e0301 	bleq	384eb8 <__ccfg+0x364f10>
    42b0:	3b0b3a05 	blcc	2d2acc <__ccfg+0x2b2b24>
    42b4:	010b3905 	tsteq	fp, r5, lsl #18
    42b8:	17000013 	smladne	r0, r3, r0, r0
    42bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    42c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    42c8:	00000b38 	andeq	r0, r0, r8, lsr fp
    42cc:	03000d18 	movweq	r0, #3352	; 0xd18
    42d0:	3b0b3a0e 	blcc	2d2b10 <__ccfg+0x2b2b68>
    42d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42d8:	00053813 	andeq	r3, r5, r3, lsl r8
    42dc:	01131900 	tsteq	r3, r0, lsl #18
    42e0:	0b0b0e03 	bleq	2c7af4 <__ccfg+0x2a7b4c>
    42e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42e8:	13010b39 	movwne	r0, #6969	; 0x1b39
    42ec:	131a0000 	tstne	sl, #0
    42f0:	3a0b0b01 	bcc	2c6efc <__ccfg+0x2a6f54>
    42f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    42f8:	0013010b 	andseq	r0, r3, fp, lsl #2
    42fc:	01171b00 	tsteq	r7, r0, lsl #22
    4300:	0b3a0b0b 	bleq	e86f34 <__ccfg+0xe66f8c>
    4304:	0b39053b 	bleq	e457f8 <__ccfg+0xe25850>
    4308:	00001301 	andeq	r1, r0, r1, lsl #6
    430c:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4310:	3b0b3a0e 	blcc	2d2b50 <__ccfg+0x2b2ba8>
    4314:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4318:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    431c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4320:	0000193c 	andeq	r1, r0, ip, lsr r9
    4324:	2701151e 	smladcs	r1, lr, r5, r1
    4328:	00130119 	andseq	r0, r3, r9, lsl r1
    432c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4330:	0b3a0e03 	bleq	e87b44 <__ccfg+0xe67b9c>
    4334:	0b39053b 	bleq	e45828 <__ccfg+0xe25880>
    4338:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    433c:	0000193c 	andeq	r1, r0, ip, lsr r9
    4340:	03003420 	movweq	r3, #1056	; 0x420
    4344:	3b0b3a0e 	blcc	2d2b84 <__ccfg+0x2b2bdc>
    4348:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    434c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4350:	21000019 	tstcs	r0, r9, lsl r0
    4354:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4358:	0b3a0e03 	bleq	e87b6c <__ccfg+0xe67bc4>
    435c:	0b390b3b 	bleq	e47050 <__ccfg+0xe270a8>
    4360:	13491927 	movtne	r1, #39207	; 0x9927
    4364:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4368:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    436c:	00130119 	andseq	r0, r3, r9, lsl r1
    4370:	00342200 	eorseq	r2, r4, r0, lsl #4
    4374:	0b3a0e03 	bleq	e87b88 <__ccfg+0xe67be0>
    4378:	0b390b3b 	bleq	e4706c <__ccfg+0xe270c4>
    437c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4380:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4384:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    4388:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    438c:	0b3b0b3a 	bleq	ec707c <__ccfg+0xea70d4>
    4390:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    4394:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4398:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    439c:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    43a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    43a4:	0b3b0b3a 	bleq	ec7094 <__ccfg+0xea70ec>
    43a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    43ac:	00001802 	andeq	r1, r0, r2, lsl #16
    43b0:	01110100 	tsteq	r1, r0, lsl #2
    43b4:	0b130e25 	bleq	4c7c50 <__ccfg+0x4a7ca8>
    43b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    43bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    43c0:	00001710 	andeq	r1, r0, r0, lsl r7
    43c4:	0b002402 	bleq	d3d4 <__exidx_end+0x84a8>
    43c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    43cc:	03000008 	movweq	r0, #8
    43d0:	0b0b0024 	bleq	2c4468 <__ccfg+0x2a44c0>
    43d4:	0e030b3e 	vmoveq.16	d3[0], r0
    43d8:	16040000 	strne	r0, [r4], -r0
    43dc:	3a0e0300 	bcc	384fe4 <__ccfg+0x36503c>
    43e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    43e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    43e8:	00160500 	andseq	r0, r6, r0, lsl #10
    43ec:	0b3a0e03 	bleq	e87c00 <__ccfg+0xe67c58>
    43f0:	0b390b3b 	bleq	e470e4 <__ccfg+0xe2713c>
    43f4:	00001349 	andeq	r1, r0, r9, asr #6
    43f8:	0b011706 	bleq	4a018 <__ccfg+0x2a070>
    43fc:	3b0b3a0b 	blcc	2d2c30 <__ccfg+0x2b2c88>
    4400:	010b390b 	tsteq	fp, fp, lsl #18
    4404:	07000013 	smladeq	r0, r3, r0, r0
    4408:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    440c:	0b3b0b3a 	bleq	ec70fc <__ccfg+0xea7154>
    4410:	13490b39 	movtne	r0, #39737	; 0x9b39
    4414:	01080000 	mrseq	r0, (UNDEF: 8)
    4418:	01134901 	tsteq	r3, r1, lsl #18
    441c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    4420:	13490021 	movtne	r0, #36897	; 0x9021
    4424:	00000b2f 	andeq	r0, r0, pc, lsr #22
    4428:	0b01130a 	bleq	49058 <__ccfg+0x290b0>
    442c:	3b0b3a0b 	blcc	2d2c60 <__ccfg+0x2b2cb8>
    4430:	010b390b 	tsteq	fp, fp, lsl #18
    4434:	0b000013 	bleq	4488 <port_confs+0x6c>
    4438:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    443c:	0b3b0b3a 	bleq	ec712c <__ccfg+0xea7184>
    4440:	13490b39 	movtne	r0, #39737	; 0x9b39
    4444:	00000b38 	andeq	r0, r0, r8, lsr fp
    4448:	0b000f0c 	bleq	8080 <__exidx_end+0x3154>
    444c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    4450:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4454:	0b3a0b0b 	bleq	e87088 <__ccfg+0xe670e0>
    4458:	0b390b3b 	bleq	e4714c <__ccfg+0xe271a4>
    445c:	00001301 	andeq	r1, r0, r1, lsl #6
    4460:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4464:	3b0b3a08 	blcc	2d2c8c <__ccfg+0x2b2ce4>
    4468:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    446c:	000b3813 	andeq	r3, fp, r3, lsl r8
    4470:	000f0f00 	andeq	r0, pc, r0, lsl #30
    4474:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4478:	13100000 	tstne	r0, #0
    447c:	0b0e0301 	bleq	385088 <__ccfg+0x3650e0>
    4480:	3b0b3a05 	blcc	2d2c9c <__ccfg+0x2b2cf4>
    4484:	010b390b 	tsteq	fp, fp, lsl #18
    4488:	11000013 	tstne	r0, r3, lsl r0
    448c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4490:	0b3b0b3a 	bleq	ec7180 <__ccfg+0xea71d8>
    4494:	13490b39 	movtne	r0, #39737	; 0x9b39
    4498:	00000538 	andeq	r0, r0, r8, lsr r5
    449c:	27001512 	smladcs	r0, r2, r5, r1
    44a0:	13000019 	movwne	r0, #25
    44a4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    44a8:	13011349 	movwne	r1, #4937	; 0x1349
    44ac:	05140000 	ldreq	r0, [r4, #-0]
    44b0:	00134900 	andseq	r4, r3, r0, lsl #18
    44b4:	00261500 	eoreq	r1, r6, r0, lsl #10
    44b8:	00001349 	andeq	r1, r0, r9, asr #6
    44bc:	03011316 	movweq	r1, #4886	; 0x1316
    44c0:	3a050b0e 	bcc	147100 <__ccfg+0x127158>
    44c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    44c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    44cc:	000d1700 	andeq	r1, sp, r0, lsl #14
    44d0:	0b3a0e03 	bleq	e87ce4 <__ccfg+0xe67d3c>
    44d4:	0b39053b 	bleq	e459c8 <__ccfg+0xe25a20>
    44d8:	0b381349 	bleq	e09204 <__ccfg+0xde925c>
    44dc:	0d180000 	ldceq	0, cr0, [r8, #-0]
    44e0:	3a0e0300 	bcc	3850e8 <__ccfg+0x365140>
    44e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    44e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    44ec:	19000005 	stmdbne	r0, {r0, r2}
    44f0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    44f4:	0b3a0b0b 	bleq	e87128 <__ccfg+0xe67180>
    44f8:	0b39053b 	bleq	e459ec <__ccfg+0xe25a44>
    44fc:	00001301 	andeq	r1, r0, r1, lsl #6
    4500:	0b01131a 	bleq	49170 <__ccfg+0x291c8>
    4504:	3b0b3a0b 	blcc	2d2d38 <__ccfg+0x2b2d90>
    4508:	010b3905 	tsteq	fp, r5, lsl #18
    450c:	1b000013 	blne	4560 <__button_list+0x32>
    4510:	0b0b0117 	bleq	2c4974 <__ccfg+0x2a49cc>
    4514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4518:	13010b39 	movwne	r0, #6969	; 0x1b39
    451c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    4520:	3a0e0300 	bcc	385128 <__ccfg+0x365180>
    4524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4528:	0013490b 	andseq	r4, r3, fp, lsl #18
    452c:	00131d00 	andseq	r1, r3, r0, lsl #26
    4530:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4534:	151e0000 	ldrne	r0, [lr, #-0]
    4538:	01192701 	tsteq	r9, r1, lsl #14
    453c:	1f000013 	svcne	0x00000013
    4540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4548:	13490b39 	movtne	r0, #39737	; 0x9b39
    454c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4550:	34200000 	strtcc	r0, [r0], #-0
    4554:	3a0e0300 	bcc	38515c <__ccfg+0x3651b4>
    4558:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    455c:	3f13490b 	svccc	0x0013490b
    4560:	00193c19 	andseq	r3, r9, r9, lsl ip
    4564:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    4568:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    456c:	0b3b0b3a 	bleq	ec725c <__ccfg+0xea72b4>
    4570:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    4574:	01111349 	tsteq	r1, r9, asr #6
    4578:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    457c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4580:	22000013 	andcs	r0, r0, #19
    4584:	08030005 	stmdaeq	r3, {r0, r2}
    4588:	0b3b0b3a 	bleq	ec7278 <__ccfg+0xea72d0>
    458c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4590:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4594:	23000017 	movwcs	r0, #23
    4598:	08030034 	stmdaeq	r3, {r2, r4, r5}
    459c:	0b3b0b3a 	bleq	ec728c <__ccfg+0xea72e4>
    45a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    45a4:	00001802 	andeq	r1, r0, r2, lsl #16
    45a8:	01828924 	orreq	r8, r2, r4, lsr #18
    45ac:	31011101 	tstcc	r1, r1, lsl #2
    45b0:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    45b4:	0001828a 	andeq	r8, r1, sl, lsl #5
    45b8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    45bc:	26000018 			; <UNDEFINED> instruction: 0x26000018
    45c0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    45c4:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
    45c8:	0b3a0e03 	bleq	e87ddc <__ccfg+0xe67e34>
    45cc:	0b390b3b 	bleq	e472c0 <__ccfg+0xe27318>
    45d0:	01000000 	mrseq	r0, (UNDEF: 0)
    45d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    45d8:	0e030b13 	vmoveq.32	d3[0], r0
    45dc:	01110e1b 	tsteq	r1, fp, lsl lr
    45e0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    45e4:	24020000 	strcs	r0, [r2], #-0
    45e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    45ec:	0008030b 	andeq	r0, r8, fp, lsl #6
    45f0:	00240300 	eoreq	r0, r4, r0, lsl #6
    45f4:	0b3e0b0b 	bleq	f87228 <__ccfg+0xf67280>
    45f8:	00000e03 	andeq	r0, r0, r3, lsl #28
    45fc:	03001604 	movweq	r1, #1540	; 0x604
    4600:	3b0b3a0e 	blcc	2d2e40 <__ccfg+0x2b2e98>
    4604:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4608:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    460c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    4610:	0b3b0b3a 	bleq	ec7300 <__ccfg+0xea7358>
    4614:	13490b39 	movtne	r0, #39737	; 0x9b39
    4618:	17060000 	strne	r0, [r6, -r0]
    461c:	3a0b0b01 	bcc	2c7228 <__ccfg+0x2a7280>
    4620:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4624:	0013010b 	andseq	r0, r3, fp, lsl #2
    4628:	000d0700 	andeq	r0, sp, r0, lsl #14
    462c:	0b3a0e03 	bleq	e87e40 <__ccfg+0xe67e98>
    4630:	0b390b3b 	bleq	e47324 <__ccfg+0xe2737c>
    4634:	00001349 	andeq	r1, r0, r9, asr #6
    4638:	49010108 	stmdbmi	r1, {r3, r8}
    463c:	00130113 	andseq	r0, r3, r3, lsl r1
    4640:	00210900 	eoreq	r0, r1, r0, lsl #18
    4644:	0b2f1349 	bleq	bc9370 <__ccfg+0xba93c8>
    4648:	130a0000 	movwne	r0, #40960	; 0xa000
    464c:	3a0b0b01 	bcc	2c7258 <__ccfg+0x2a72b0>
    4650:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4654:	0013010b 	andseq	r0, r3, fp, lsl #2
    4658:	000d0b00 	andeq	r0, sp, r0, lsl #22
    465c:	0b3a0e03 	bleq	e87e70 <__ccfg+0xe67ec8>
    4660:	0b390b3b 	bleq	e47354 <__ccfg+0xe273ac>
    4664:	0b381349 	bleq	e09390 <__ccfg+0xde93e8>
    4668:	0f0c0000 	svceq	0x000c0000
    466c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4670:	01130d00 	tsteq	r3, r0, lsl #26
    4674:	0b0b0e03 	bleq	2c7e88 <__ccfg+0x2a7ee0>
    4678:	0b3b0b3a 	bleq	ec7368 <__ccfg+0xea73c0>
    467c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4680:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4684:	3a080300 	bcc	20528c <__ccfg+0x1e52e4>
    4688:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    468c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4690:	0f00000b 	svceq	0x0000000b
    4694:	0b0b000f 	bleq	2c46d8 <__ccfg+0x2a4730>
    4698:	00001349 	andeq	r1, r0, r9, asr #6
    469c:	03011310 	movweq	r1, #4880	; 0x1310
    46a0:	3a050b0e 	bcc	1472e0 <__ccfg+0x127338>
    46a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    46a8:	0013010b 	andseq	r0, r3, fp, lsl #2
    46ac:	000d1100 	andeq	r1, sp, r0, lsl #2
    46b0:	0b3a0e03 	bleq	e87ec4 <__ccfg+0xe67f1c>
    46b4:	0b390b3b 	bleq	e473a8 <__ccfg+0xe27400>
    46b8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    46bc:	15120000 	ldrne	r0, [r2, #-0]
    46c0:	00192700 	andseq	r2, r9, r0, lsl #14
    46c4:	01151300 	tsteq	r5, r0, lsl #6
    46c8:	13491927 	movtne	r1, #39207	; 0x9927
    46cc:	00001301 	andeq	r1, r0, r1, lsl #6
    46d0:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    46d4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    46d8:	13490026 	movtne	r0, #36902	; 0x9026
    46dc:	13160000 	tstne	r6, #0
    46e0:	0b0e0301 	bleq	3852ec <__ccfg+0x365344>
    46e4:	3b0b3a05 	blcc	2d2f00 <__ccfg+0x2b2f58>
    46e8:	010b3905 	tsteq	fp, r5, lsl #18
    46ec:	17000013 	smladne	r0, r3, r0, r0
    46f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    46f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    46f8:	13490b39 	movtne	r0, #39737	; 0x9b39
    46fc:	00000b38 	andeq	r0, r0, r8, lsr fp
    4700:	03000d18 	movweq	r0, #3352	; 0xd18
    4704:	3b0b3a0e 	blcc	2d2f44 <__ccfg+0x2b2f9c>
    4708:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    470c:	00053813 	andeq	r3, r5, r3, lsl r8
    4710:	01131900 	tsteq	r3, r0, lsl #18
    4714:	0b0b0e03 	bleq	2c7f28 <__ccfg+0x2a7f80>
    4718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    471c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4720:	131a0000 	tstne	sl, #0
    4724:	3a0b0b01 	bcc	2c7330 <__ccfg+0x2a7388>
    4728:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    472c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4730:	01171b00 	tsteq	r7, r0, lsl #22
    4734:	0b3a0b0b 	bleq	e87368 <__ccfg+0xe673c0>
    4738:	0b39053b 	bleq	e45c2c <__ccfg+0xe25c84>
    473c:	00001301 	andeq	r1, r0, r1, lsl #6
    4740:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4744:	3b0b3a0e 	blcc	2d2f84 <__ccfg+0x2b2fdc>
    4748:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    474c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4750:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4754:	0000193c 	andeq	r1, r0, ip, lsr r9
    4758:	2701151e 	smladcs	r1, lr, r5, r1
    475c:	00130119 	andseq	r0, r3, r9, lsl r1
    4760:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4764:	0b3a0e03 	bleq	e87f78 <__ccfg+0xe67fd0>
    4768:	0b39053b 	bleq	e45c5c <__ccfg+0xe25cb4>
    476c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4770:	0000193c 	andeq	r1, r0, ip, lsr r9
    4774:	03003420 	movweq	r3, #1056	; 0x420
    4778:	3b0b3a0e 	blcc	2d2fb8 <__ccfg+0x2b3010>
    477c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4780:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4784:	21000019 	tstcs	r0, r9, lsl r0
    4788:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    478c:	0b3a0e03 	bleq	e87fa0 <__ccfg+0xe67ff8>
    4790:	0b390b3b 	bleq	e47484 <__ccfg+0xe274dc>
    4794:	13491927 	movtne	r1, #39207	; 0x9927
    4798:	06120111 			; <UNDEFINED> instruction: 0x06120111
    479c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    47a0:	00130119 	andseq	r0, r3, r9, lsl r1
    47a4:	00052200 	andeq	r2, r5, r0, lsl #4
    47a8:	0b3a0803 	bleq	e867bc <__ccfg+0xe66814>
    47ac:	0b390b3b 	bleq	e474a0 <__ccfg+0xe274f8>
    47b0:	17021349 	strne	r1, [r2, -r9, asr #6]
    47b4:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47b8:	00052300 	andeq	r2, r5, r0, lsl #6
    47bc:	0b3a0e03 	bleq	e87fd0 <__ccfg+0xe68028>
    47c0:	0b390b3b 	bleq	e474b4 <__ccfg+0xe2750c>
    47c4:	17021349 	strne	r1, [r2, -r9, asr #6]
    47c8:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47cc:	00342400 	eorseq	r2, r4, r0, lsl #8
    47d0:	0b3a0803 	bleq	e867e4 <__ccfg+0xe6683c>
    47d4:	0b390b3b 	bleq	e474c8 <__ccfg+0xe27520>
    47d8:	17021349 	strne	r1, [r2, -r9, asr #6]
    47dc:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47e0:	82892500 	addhi	r2, r9, #0, 10
    47e4:	01110101 	tsteq	r1, r1, lsl #2
    47e8:	00001331 	andeq	r1, r0, r1, lsr r3
    47ec:	01828a26 	orreq	r8, r2, r6, lsr #20
    47f0:	91180200 	tstls	r8, r0, lsl #4
    47f4:	00001842 	andeq	r1, r0, r2, asr #16
    47f8:	3f002e27 	svccc	0x00002e27
    47fc:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    4800:	3a0e030e 	bcc	385440 <__ccfg+0x365498>
    4804:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4808:	0000000b 	andeq	r0, r0, fp
    480c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4810:	030b130e 	movweq	r1, #45838	; 0xb30e
    4814:	100e1b0e 	andne	r1, lr, lr, lsl #22
    4818:	02000017 	andeq	r0, r0, #23
    481c:	0b0b0024 	bleq	2c48b4 <__ccfg+0x2a490c>
    4820:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    4824:	24030000 	strcs	r0, [r3], #-0
    4828:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    482c:	000e030b 	andeq	r0, lr, fp, lsl #6
    4830:	00160400 	andseq	r0, r6, r0, lsl #8
    4834:	0b3a0e03 	bleq	e88048 <__ccfg+0xe680a0>
    4838:	0b39053b 	bleq	e45d2c <__ccfg+0xe25d84>
    483c:	00001349 	andeq	r1, r0, r9, asr #6
    4840:	03001605 	movweq	r1, #1541	; 0x605
    4844:	3b0b3a0e 	blcc	2d3084 <__ccfg+0x2b30dc>
    4848:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    484c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4850:	0b0b0117 	bleq	2c4cb4 <__ccfg+0x2a4d0c>
    4854:	0b3b0b3a 	bleq	ec7544 <__ccfg+0xea759c>
    4858:	13010b39 	movwne	r0, #6969	; 0x1b39
    485c:	0d070000 	stceq	0, cr0, [r7, #-0]
    4860:	3a0e0300 	bcc	385468 <__ccfg+0x3654c0>
    4864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4868:	0013490b 	andseq	r4, r3, fp, lsl #18
    486c:	01010800 	tsteq	r1, r0, lsl #16
    4870:	13011349 	movwne	r1, #4937	; 0x1349
    4874:	21090000 	mrscs	r0, (UNDEF: 9)
    4878:	2f134900 	svccs	0x00134900
    487c:	0a00000b 	beq	48b0 <patchGenfskRfe+0x308>
    4880:	0b0b0113 	bleq	2c4cd4 <__ccfg+0x2a4d2c>
    4884:	0b3b0b3a 	bleq	ec7574 <__ccfg+0xea75cc>
    4888:	13010b39 	movwne	r0, #6969	; 0x1b39
    488c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4890:	3a0e0300 	bcc	385498 <__ccfg+0x3654f0>
    4894:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4898:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    489c:	0c00000b 	stceq	0, cr0, [r0], {11}
    48a0:	0b0b000f 	bleq	2c48e4 <__ccfg+0x2a493c>
    48a4:	130d0000 	movwne	r0, #53248	; 0xd000
    48a8:	0b0e0301 	bleq	3854b4 <__ccfg+0x36550c>
    48ac:	3b0b3a0b 	blcc	2d30e0 <__ccfg+0x2b3138>
    48b0:	010b390b 	tsteq	fp, fp, lsl #18
    48b4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    48b8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    48bc:	0b3b0b3a 	bleq	ec75ac <__ccfg+0xea7604>
    48c0:	13490b39 	movtne	r0, #39737	; 0x9b39
    48c4:	00000b38 	andeq	r0, r0, r8, lsr fp
    48c8:	0b000f0f 	bleq	850c <__exidx_end+0x35e0>
    48cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    48d0:	01131000 	tsteq	r3, r0
    48d4:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    48d8:	0b3b0b3a 	bleq	ec75c8 <__ccfg+0xea7620>
    48dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    48e0:	0d110000 	ldceq	0, cr0, [r1, #-0]
    48e4:	3a0e0300 	bcc	3854ec <__ccfg+0x365544>
    48e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    48ec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    48f0:	12000005 	andne	r0, r0, #5
    48f4:	19270015 	stmdbne	r7!, {r0, r2, r4}
    48f8:	15130000 	ldrne	r0, [r3, #-0]
    48fc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    4900:	00130113 	andseq	r0, r3, r3, lsl r1
    4904:	00051400 	andeq	r1, r5, r0, lsl #8
    4908:	00001349 	andeq	r1, r0, r9, asr #6
    490c:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    4910:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4914:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4918:	0b3a050b 	bleq	e85d4c <__ccfg+0xe65da4>
    491c:	0b39053b 	bleq	e45e10 <__ccfg+0xe25e68>
    4920:	00001301 	andeq	r1, r0, r1, lsl #6
    4924:	03000d17 	movweq	r0, #3351	; 0xd17
    4928:	3b0b3a0e 	blcc	2d3168 <__ccfg+0x2b31c0>
    492c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4930:	000b3813 	andeq	r3, fp, r3, lsl r8
    4934:	000d1800 	andeq	r1, sp, r0, lsl #16
    4938:	0b3a0e03 	bleq	e8814c <__ccfg+0xe681a4>
    493c:	0b39053b 	bleq	e45e30 <__ccfg+0xe25e88>
    4940:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4944:	13190000 	tstne	r9, #0
    4948:	0b0e0301 	bleq	385554 <__ccfg+0x3655ac>
    494c:	3b0b3a0b 	blcc	2d3180 <__ccfg+0x2b31d8>
    4950:	010b3905 	tsteq	fp, r5, lsl #18
    4954:	1a000013 	bne	49a8 <patchGenfskRfe+0x400>
    4958:	0b0b0113 	bleq	2c4dac <__ccfg+0x2a4e04>
    495c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4960:	13010b39 	movwne	r0, #6969	; 0x1b39
    4964:	171b0000 	ldrne	r0, [fp, -r0]
    4968:	3a0b0b01 	bcc	2c7574 <__ccfg+0x2a75cc>
    496c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4970:	0013010b 	andseq	r0, r3, fp, lsl #2
    4974:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4978:	0b3a0e03 	bleq	e8818c <__ccfg+0xe681e4>
    497c:	0b39053b 	bleq	e45e70 <__ccfg+0xe25ec8>
    4980:	00001349 	andeq	r1, r0, r9, asr #6
    4984:	0300131d 	movweq	r1, #797	; 0x31d
    4988:	00193c0e 	andseq	r3, r9, lr, lsl #24
    498c:	01151e00 	tsteq	r5, r0, lsl #28
    4990:	13011927 	movwne	r1, #6439	; 0x1927
    4994:	341f0000 	ldrcc	r0, [pc], #-0	; 499c <patchGenfskRfe+0x3f4>
    4998:	3a0e0300 	bcc	3855a0 <__ccfg+0x3655f8>
    499c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    49a0:	3f13490b 	svccc	0x0013490b
    49a4:	00193c19 	andseq	r3, r9, r9, lsl ip
    49a8:	00342000 	eorseq	r2, r4, r0
    49ac:	0b3a0e03 	bleq	e881c0 <__ccfg+0xe68218>
    49b0:	0b390b3b 	bleq	e476a4 <__ccfg+0xe276fc>
    49b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    49b8:	34210000 	strtcc	r0, [r1], #-0
    49bc:	02134700 	andseq	r4, r3, #0, 14
    49c0:	00000018 	andeq	r0, r0, r8, lsl r0
    49c4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    49c8:	030b130e 	movweq	r1, #45838	; 0xb30e
    49cc:	110e1b0e 	tstne	lr, lr, lsl #22
    49d0:	10061201 	andne	r1, r6, r1, lsl #4
    49d4:	02000017 	andeq	r0, r0, #23
    49d8:	0b0b0024 	bleq	2c4a70 <__ccfg+0x2a4ac8>
    49dc:	0e030b3e 	vmoveq.16	d3[0], r0
    49e0:	24030000 	strcs	r0, [r3], #-0
    49e4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    49e8:	0008030b 	andeq	r0, r8, fp, lsl #6
    49ec:	00160400 	andseq	r0, r6, r0, lsl #8
    49f0:	0b3a0e03 	bleq	e88204 <__ccfg+0xe6825c>
    49f4:	0b39053b 	bleq	e45ee8 <__ccfg+0xe25f40>
    49f8:	00001349 	andeq	r1, r0, r9, asr #6
    49fc:	03001605 	movweq	r1, #1541	; 0x605
    4a00:	3b0b3a0e 	blcc	2d3240 <__ccfg+0x2b3298>
    4a04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4a08:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4a0c:	0b0b0117 	bleq	2c4e70 <__ccfg+0x2a4ec8>
    4a10:	0b3b0b3a 	bleq	ec7700 <__ccfg+0xea7758>
    4a14:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a18:	0d070000 	stceq	0, cr0, [r7, #-0]
    4a1c:	3a0e0300 	bcc	385624 <__ccfg+0x36567c>
    4a20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4a24:	0013490b 	andseq	r4, r3, fp, lsl #18
    4a28:	01010800 	tsteq	r1, r0, lsl #16
    4a2c:	13011349 	movwne	r1, #4937	; 0x1349
    4a30:	21090000 	mrscs	r0, (UNDEF: 9)
    4a34:	2f134900 	svccs	0x00134900
    4a38:	0a00000b 	beq	4a6c <patchGenfskRfe+0x4c4>
    4a3c:	0b0b0113 	bleq	2c4e90 <__ccfg+0x2a4ee8>
    4a40:	0b3b0b3a 	bleq	ec7730 <__ccfg+0xea7788>
    4a44:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a48:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4a4c:	3a0e0300 	bcc	385654 <__ccfg+0x3656ac>
    4a50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4a54:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4a58:	0c00000b 	stceq	0, cr0, [r0], {11}
    4a5c:	0b0b000f 	bleq	2c4aa0 <__ccfg+0x2a4af8>
    4a60:	130d0000 	movwne	r0, #53248	; 0xd000
    4a64:	0b0e0301 	bleq	385670 <__ccfg+0x3656c8>
    4a68:	3b0b3a0b 	blcc	2d329c <__ccfg+0x2b32f4>
    4a6c:	010b390b 	tsteq	fp, fp, lsl #18
    4a70:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    4a74:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4a78:	0b3b0b3a 	bleq	ec7768 <__ccfg+0xea77c0>
    4a7c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4a80:	00000b38 	andeq	r0, r0, r8, lsr fp
    4a84:	0b000f0f 	bleq	86c8 <__exidx_end+0x379c>
    4a88:	0013490b 	andseq	r4, r3, fp, lsl #18
    4a8c:	01131000 	tsteq	r3, r0
    4a90:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    4a94:	0b3b0b3a 	bleq	ec7784 <__ccfg+0xea77dc>
    4a98:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a9c:	0d110000 	ldceq	0, cr0, [r1, #-0]
    4aa0:	3a0e0300 	bcc	3856a8 <__ccfg+0x365700>
    4aa4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4aa8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4aac:	12000005 	andne	r0, r0, #5
    4ab0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    4ab4:	15130000 	ldrne	r0, [r3, #-0]
    4ab8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    4abc:	00130113 	andseq	r0, r3, r3, lsl r1
    4ac0:	00051400 	andeq	r1, r5, r0, lsl #8
    4ac4:	00001349 	andeq	r1, r0, r9, asr #6
    4ac8:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    4acc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4ad0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4ad4:	0b3a050b 	bleq	e85f08 <__ccfg+0xe65f60>
    4ad8:	0b39053b 	bleq	e45fcc <__ccfg+0xe26024>
    4adc:	00001301 	andeq	r1, r0, r1, lsl #6
    4ae0:	03000d17 	movweq	r0, #3351	; 0xd17
    4ae4:	3b0b3a0e 	blcc	2d3324 <__ccfg+0x2b337c>
    4ae8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4aec:	000b3813 	andeq	r3, fp, r3, lsl r8
    4af0:	000d1800 	andeq	r1, sp, r0, lsl #16
    4af4:	0b3a0e03 	bleq	e88308 <__ccfg+0xe68360>
    4af8:	0b39053b 	bleq	e45fec <__ccfg+0xe26044>
    4afc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4b00:	13190000 	tstne	r9, #0
    4b04:	0b0e0301 	bleq	385710 <__ccfg+0x365768>
    4b08:	3b0b3a0b 	blcc	2d333c <__ccfg+0x2b3394>
    4b0c:	010b3905 	tsteq	fp, r5, lsl #18
    4b10:	1a000013 	bne	4b64 <patchGenfskRfe+0x5bc>
    4b14:	0b0b0113 	bleq	2c4f68 <__ccfg+0x2a4fc0>
    4b18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4b1c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4b20:	171b0000 	ldrne	r0, [fp, -r0]
    4b24:	3a0b0b01 	bcc	2c7730 <__ccfg+0x2a7788>
    4b28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4b2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4b30:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4b34:	0b3a0e03 	bleq	e88348 <__ccfg+0xe683a0>
    4b38:	0b39053b 	bleq	e4602c <__ccfg+0xe26084>
    4b3c:	00001349 	andeq	r1, r0, r9, asr #6
    4b40:	0300131d 	movweq	r1, #797	; 0x31d
    4b44:	00193c0e 	andseq	r3, r9, lr, lsl #24
    4b48:	01151e00 	tsteq	r5, r0, lsl #28
    4b4c:	13011927 	movwne	r1, #6439	; 0x1927
    4b50:	341f0000 	ldrcc	r0, [pc], #-0	; 4b58 <patchGenfskRfe+0x5b0>
    4b54:	3a0e0300 	bcc	38575c <__ccfg+0x3657b4>
    4b58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4b5c:	3f13490b 	svccc	0x0013490b
    4b60:	00193c19 	andseq	r3, r9, r9, lsl ip
    4b64:	00342000 	eorseq	r2, r4, r0
    4b68:	0b3a0e03 	bleq	e8837c <__ccfg+0xe683d4>
    4b6c:	0b390b3b 	bleq	e47860 <__ccfg+0xe278b8>
    4b70:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4b74:	0000193c 	andeq	r1, r0, ip, lsr r9
    4b78:	03003421 	movweq	r3, #1057	; 0x421
    4b7c:	3b0b3a0e 	blcc	2d33bc <__ccfg+0x2b3414>
    4b80:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4b84:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    4b88:	22000018 	andcs	r0, r0, #24
    4b8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4b90:	0b3a0e03 	bleq	e883a4 <__ccfg+0xe683fc>
    4b94:	0b39053b 	bleq	e46088 <__ccfg+0xe260e0>
    4b98:	01111927 	tsteq	r1, r7, lsr #18
    4b9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    4ba0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4ba4:	23000013 	movwcs	r0, #19
    4ba8:	08030005 	stmdaeq	r3, {r0, r2}
    4bac:	0b3b0b3a 	bleq	ec789c <__ccfg+0xea78f4>
    4bb0:	13490b39 	movtne	r0, #39737	; 0x9b39
    4bb4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4bb8:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    4bbc:	0111010b 	tsteq	r1, fp, lsl #2
    4bc0:	13010612 	movwne	r0, #5650	; 0x1612
    4bc4:	34250000 	strtcc	r0, [r5], #-0
    4bc8:	3a080300 	bcc	2057d0 <__ccfg+0x1e5828>
    4bcc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4bd0:	0013490b 	andseq	r4, r3, fp, lsl #18
    4bd4:	00342600 	eorseq	r2, r4, r0, lsl #12
    4bd8:	0b3a0e03 	bleq	e883ec <__ccfg+0xe68444>
    4bdc:	0b390b3b 	bleq	e478d0 <__ccfg+0xe27928>
    4be0:	17021349 	strne	r1, [r2, -r9, asr #6]
    4be4:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4be8:	82892700 	addhi	r2, r9, #0, 14
    4bec:	01110101 	tsteq	r1, r1, lsl #2
    4bf0:	00001331 	andeq	r1, r0, r1, lsr r3
    4bf4:	01828a28 	orreq	r8, r2, r8, lsr #20
    4bf8:	91180200 	tstls	r8, r0, lsl #4
    4bfc:	00001842 	andeq	r1, r0, r2, asr #16
    4c00:	03003429 	movweq	r3, #1065	; 0x429
    4c04:	3b0b3a08 	blcc	2d342c <__ccfg+0x2b3484>
    4c08:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4c0c:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4c10:	00001742 	andeq	r1, r0, r2, asr #14
    4c14:	0182892a 	orreq	r8, r2, sl, lsr #18
    4c18:	31011101 	tstcc	r1, r1, lsl #2
    4c1c:	00130113 	andseq	r0, r3, r3, lsl r1
    4c20:	82892b00 	addhi	r2, r9, #0, 22
    4c24:	01110101 	tsteq	r1, r1, lsl #2
    4c28:	00001301 	andeq	r1, r0, r1, lsl #6
    4c2c:	3f012e2c 	svccc	0x00012e2c
    4c30:	3a0e0319 	bcc	38589c <__ccfg+0x3658f4>
    4c34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4c38:	1119270b 	tstne	r9, fp, lsl #14
    4c3c:	40061201 	andmi	r1, r6, r1, lsl #4
    4c40:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4c44:	00001301 	andeq	r1, r0, r1, lsl #6
    4c48:	0300052d 	movweq	r0, #1325	; 0x52d
    4c4c:	3b0b3a0e 	blcc	2d348c <__ccfg+0x2b34e4>
    4c50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4c54:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4c58:	00001742 	andeq	r1, r0, r2, asr #14
    4c5c:	3f002e2e 	svccc	0x00002e2e
    4c60:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    4c64:	3a0e030e 	bcc	3858a4 <__ccfg+0x3658fc>
    4c68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4c6c:	0000000b 	andeq	r0, r0, fp
    4c70:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4c74:	030b130e 	movweq	r1, #45838	; 0xb30e
    4c78:	110e1b0e 	tstne	lr, lr, lsl #22
    4c7c:	10061201 	andne	r1, r6, r1, lsl #4
    4c80:	02000017 	andeq	r0, r0, #23
    4c84:	0b0b0024 	bleq	2c4d1c <__ccfg+0x2a4d74>
    4c88:	0e030b3e 	vmoveq.16	d3[0], r0
    4c8c:	24030000 	strcs	r0, [r3], #-0
    4c90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4c94:	0008030b 	andeq	r0, r8, fp, lsl #6
    4c98:	00160400 	andseq	r0, r6, r0, lsl #8
    4c9c:	0b3a0e03 	bleq	e884b0 <__ccfg+0xe68508>
    4ca0:	0b390b3b 	bleq	e47994 <__ccfg+0xe279ec>
    4ca4:	00001349 	andeq	r1, r0, r9, asr #6
    4ca8:	0b000f05 	bleq	88c4 <__exidx_end+0x3998>
    4cac:	0013490b 	andseq	r4, r3, fp, lsl #18
    4cb0:	01150600 	tsteq	r5, r0, lsl #12
    4cb4:	13491927 	movtne	r1, #39207	; 0x9927
    4cb8:	00001301 	andeq	r1, r0, r1, lsl #6
    4cbc:	49000507 	stmdbmi	r0, {r0, r1, r2, r8, sl}
    4cc0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    4cc4:	00000026 	andeq	r0, r0, r6, lsr #32
    4cc8:	03003409 	movweq	r3, #1033	; 0x409
    4ccc:	3b0b3a0e 	blcc	2d350c <__ccfg+0x2b3564>
    4cd0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4cd4:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4cd8:	0a000019 	beq	4d44 <patchImageGenfsk+0xe8>
    4cdc:	0e030104 	adfeqs	f0, f3, f4
    4ce0:	0b0b0b3e 	bleq	2c79e0 <__ccfg+0x2a7a38>
    4ce4:	0b3a1349 	bleq	e89a10 <__ccfg+0xe69a68>
    4ce8:	0b390b3b 	bleq	e479dc <__ccfg+0xe27a34>
    4cec:	00001301 	andeq	r1, r0, r1, lsl #6
    4cf0:	0300280b 	movweq	r2, #2059	; 0x80b
    4cf4:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    4cf8:	01010c00 	tsteq	r1, r0, lsl #24
    4cfc:	13011349 	movwne	r1, #4937	; 0x1349
    4d00:	210d0000 	mrscs	r0, (UNDEF: 13)
    4d04:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4d08:	13490026 	movtne	r0, #36902	; 0x9026
    4d0c:	340f0000 	strcc	r0, [pc], #-0	; 4d14 <patchImageGenfsk+0xb8>
    4d10:	3a0e0300 	bcc	385918 <__ccfg+0x365970>
    4d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4d18:	3f13490b 	svccc	0x0013490b
    4d1c:	00193c19 	andseq	r3, r9, r9, lsl ip
    4d20:	00131000 	andseq	r1, r3, r0
    4d24:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4d28:	15110000 	ldrne	r0, [r1, #-0]
    4d2c:	00192700 	andseq	r2, r9, r0, lsl #14
    4d30:	00171200 	andseq	r1, r7, r0, lsl #4
    4d34:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4d38:	13130000 	tstne	r3, #0
    4d3c:	0b0e0301 	bleq	385948 <__ccfg+0x3659a0>
    4d40:	3b0b3a0b 	blcc	2d3574 <__ccfg+0x2b35cc>
    4d44:	010b3905 	tsteq	fp, r5, lsl #18
    4d48:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    4d4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4d50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d54:	13490b39 	movtne	r0, #39737	; 0x9b39
    4d58:	00000b38 	andeq	r0, r0, r8, lsr fp
    4d5c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    4d60:	000b2f13 	andeq	r2, fp, r3, lsl pc
    4d64:	01041600 	tsteq	r4, r0, lsl #12
    4d68:	0b3e0e03 	bleq	f8857c <__ccfg+0xf685d4>
    4d6c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4d70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d74:	13010b39 	movwne	r0, #6969	; 0x1b39
    4d78:	0d170000 	ldceq	0, cr0, [r7, #-0]
    4d7c:	3a080300 	bcc	205984 <__ccfg+0x1e59dc>
    4d80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4d84:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4d88:	1800000b 	stmdane	r0, {r0, r1, r3}
    4d8c:	0b0b0117 	bleq	2c51f0 <__ccfg+0x2a5248>
    4d90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d94:	13010b39 	movwne	r0, #6969	; 0x1b39
    4d98:	0d190000 	ldceq	0, cr0, [r9, #-0]
    4d9c:	3a080300 	bcc	2059a4 <__ccfg+0x1e59fc>
    4da0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4da4:	0013490b 	andseq	r4, r3, fp, lsl #18
    4da8:	00161a00 	andseq	r1, r6, r0, lsl #20
    4dac:	0b3a0e03 	bleq	e885c0 <__ccfg+0xe68618>
    4db0:	0b39053b 	bleq	e462a4 <__ccfg+0xe262fc>
    4db4:	00001349 	andeq	r1, r0, r9, asr #6
    4db8:	3f012e1b 	svccc	0x00012e1b
    4dbc:	3a0e0319 	bcc	385a28 <__ccfg+0x365a80>
    4dc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4dc4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4dc8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4dcc:	97184006 	ldrls	r4, [r8, -r6]
    4dd0:	00001942 	andeq	r1, r0, r2, asr #18
    4dd4:	0300051c 	movweq	r0, #1308	; 0x51c
    4dd8:	3b0b3a08 	blcc	2d3600 <__ccfg+0x2b3658>
    4ddc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4de0:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4de4:	00001742 	andeq	r1, r0, r2, asr #14
    4de8:	0300341d 	movweq	r3, #1053	; 0x41d
    4dec:	3b0b3a08 	blcc	2d3614 <__ccfg+0x2b366c>
    4df0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4df4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4df8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    4dfc:	341f0000 	ldrcc	r0, [pc], #-0	; 4e04 <patchImageGenfsk+0x1a8>
    4e00:	3a0e0300 	bcc	385a08 <__ccfg+0x365a60>
    4e04:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e08:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4e0c:	1742b717 	smlaldne	fp, r2, r7, r7
    4e10:	01000000 	mrseq	r0, (UNDEF: 0)
    4e14:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    4e18:	0e030b13 	vmoveq.32	d3[0], r0
    4e1c:	01110e1b 	tsteq	r1, fp, lsl lr
    4e20:	17100612 			; <UNDEFINED> instruction: 0x17100612
    4e24:	24020000 	strcs	r0, [r2], #-0
    4e28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4e2c:	000e030b 	andeq	r0, lr, fp, lsl #6
    4e30:	00160300 	andseq	r0, r6, r0, lsl #6
    4e34:	0b3a0e03 	bleq	e88648 <__ccfg+0xe686a0>
    4e38:	0b390b3b 	bleq	e47b2c <__ccfg+0xe27b84>
    4e3c:	00001349 	andeq	r1, r0, r9, asr #6
    4e40:	0b002404 	bleq	de58 <__exidx_end+0x8f2c>
    4e44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4e48:	05000008 	streq	r0, [r0, #-8]
    4e4c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    4e50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4e54:	13490b39 	movtne	r0, #39737	; 0x9b39
    4e58:	17060000 	strne	r0, [r6, -r0]
    4e5c:	3a0b0b01 	bcc	2c7a68 <__ccfg+0x2a7ac0>
    4e60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e64:	0013010b 	andseq	r0, r3, fp, lsl #2
    4e68:	000d0700 	andeq	r0, sp, r0, lsl #14
    4e6c:	0b3a0e03 	bleq	e88680 <__ccfg+0xe686d8>
    4e70:	0b390b3b 	bleq	e47b64 <__ccfg+0xe27bbc>
    4e74:	00001349 	andeq	r1, r0, r9, asr #6
    4e78:	49010108 	stmdbmi	r1, {r3, r8}
    4e7c:	00130113 	andseq	r0, r3, r3, lsl r1
    4e80:	00210900 	eoreq	r0, r1, r0, lsl #18
    4e84:	0b2f1349 	bleq	bc9bb0 <__ccfg+0xba9c08>
    4e88:	130a0000 	movwne	r0, #40960	; 0xa000
    4e8c:	3a0b0b01 	bcc	2c7a98 <__ccfg+0x2a7af0>
    4e90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e94:	0013010b 	andseq	r0, r3, fp, lsl #2
    4e98:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4e9c:	0b3a0e03 	bleq	e886b0 <__ccfg+0xe68708>
    4ea0:	0b390b3b 	bleq	e47b94 <__ccfg+0xe27bec>
    4ea4:	0b381349 	bleq	e09bd0 <__ccfg+0xde9c28>
    4ea8:	0f0c0000 	svceq	0x000c0000
    4eac:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4eb0:	01130d00 	tsteq	r3, r0, lsl #26
    4eb4:	0b0b0e03 	bleq	2c86c8 <__ccfg+0x2a8720>
    4eb8:	0b3b0b3a 	bleq	ec7ba8 <__ccfg+0xea7c00>
    4ebc:	13010b39 	movwne	r0, #6969	; 0x1b39
    4ec0:	0f0e0000 	svceq	0x000e0000
    4ec4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4ec8:	0f000013 	svceq	0x00000013
    4ecc:	13490026 	movtne	r0, #36902	; 0x9026
    4ed0:	0d100000 	ldceq	0, cr0, [r0, #-0]
    4ed4:	3a080300 	bcc	205adc <__ccfg+0x1e5b34>
    4ed8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4edc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4ee0:	1100000b 	tstne	r0, fp
    4ee4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4ee8:	0b3a050b 	bleq	e8631c <__ccfg+0xe66374>
    4eec:	0b390b3b 	bleq	e47be0 <__ccfg+0xe27c38>
    4ef0:	00001301 	andeq	r1, r0, r1, lsl #6
    4ef4:	03000d12 	movweq	r0, #3346	; 0xd12
    4ef8:	3b0b3a0e 	blcc	2d3738 <__ccfg+0x2b3790>
    4efc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4f00:	00053813 	andeq	r3, r5, r3, lsl r8
    4f04:	00151300 	andseq	r1, r5, r0, lsl #6
    4f08:	00001927 	andeq	r1, r0, r7, lsr #18
    4f0c:	27011514 	smladcs	r1, r4, r5, r1
    4f10:	01134919 	tsteq	r3, r9, lsl r9
    4f14:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    4f18:	13490005 	movtne	r0, #36869	; 0x9005
    4f1c:	13160000 	tstne	r6, #0
    4f20:	0b0e0301 	bleq	385b2c <__ccfg+0x365b84>
    4f24:	3b0b3a05 	blcc	2d3740 <__ccfg+0x2b3798>
    4f28:	010b3905 	tsteq	fp, r5, lsl #18
    4f2c:	17000013 	smladne	r0, r3, r0, r0
    4f30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4f34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4f38:	13490b39 	movtne	r0, #39737	; 0x9b39
    4f3c:	00000b38 	andeq	r0, r0, r8, lsr fp
    4f40:	03000d18 	movweq	r0, #3352	; 0xd18
    4f44:	3b0b3a0e 	blcc	2d3784 <__ccfg+0x2b37dc>
    4f48:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4f4c:	00053813 	andeq	r3, r5, r3, lsl r8
    4f50:	01131900 	tsteq	r3, r0, lsl #18
    4f54:	0b0b0e03 	bleq	2c8768 <__ccfg+0x2a87c0>
    4f58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4f5c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4f60:	131a0000 	tstne	sl, #0
    4f64:	3a0b0b01 	bcc	2c7b70 <__ccfg+0x2a7bc8>
    4f68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4f6c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4f70:	01171b00 	tsteq	r7, r0, lsl #22
    4f74:	0b3a0b0b 	bleq	e87ba8 <__ccfg+0xe67c00>
    4f78:	0b39053b 	bleq	e4646c <__ccfg+0xe264c4>
    4f7c:	00001301 	andeq	r1, r0, r1, lsl #6
    4f80:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4f84:	3b0b3a0e 	blcc	2d37c4 <__ccfg+0x2b381c>
    4f88:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4f8c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4f90:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4f94:	0000193c 	andeq	r1, r0, ip, lsr r9
    4f98:	2701151e 	smladcs	r1, lr, r5, r1
    4f9c:	00130119 	andseq	r0, r3, r9, lsl r1
    4fa0:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4fa4:	0b3a0e03 	bleq	e887b8 <__ccfg+0xe68810>
    4fa8:	0b39053b 	bleq	e4649c <__ccfg+0xe264f4>
    4fac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4fb0:	0000193c 	andeq	r1, r0, ip, lsr r9
    4fb4:	03003420 	movweq	r3, #1056	; 0x420
    4fb8:	3b0b3a0e 	blcc	2d37f8 <__ccfg+0x2b3850>
    4fbc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4fc0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4fc4:	21000019 	tstcs	r0, r9, lsl r0
    4fc8:	00000021 	andeq	r0, r0, r1, lsr #32
    4fcc:	3f012e22 	svccc	0x00012e22
    4fd0:	3a0e0319 	bcc	385c3c <__ccfg+0x365c94>
    4fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4fd8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4fdc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4fe0:	97184006 	ldrls	r4, [r8, -r6]
    4fe4:	13011942 	movwne	r1, #6466	; 0x1942
    4fe8:	05230000 	streq	r0, [r3, #-0]!
    4fec:	3a0e0300 	bcc	385bf4 <__ccfg+0x365c4c>
    4ff0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4ff4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4ff8:	1742b717 	smlaldne	fp, r2, r7, r7
    4ffc:	05240000 	streq	r0, [r4, #-0]!
    5000:	3a0e0300 	bcc	385c08 <__ccfg+0x365c60>
    5004:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    5008:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    500c:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000013c 	andeq	r0, r0, ip, lsr r1
       4:	00000180 	andeq	r0, r0, r0, lsl #3
}
       8:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
       c:	a1000003 	tstge	r0, r3
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	025a0000 	subseq	r0, sl, #0
      20:	02620000 	rsbeq	r0, r2, #0
      24:	00050000 	andeq	r0, r5, r0
      28:	00062803 	andeq	r2, r6, r3, lsl #16
      2c:	00000020 	andeq	r0, r0, r0, lsr #32
      30:	00000000 	andeq	r0, r0, r0
      34:	00029800 	andeq	r9, r2, r0, lsl #16
      38:	0002a000 	andeq	sl, r2, r0
      3c:	03000500 	movweq	r0, #1280	; 0x500
			i = k;
      40:	20000544 	andcs	r0, r0, r4, asr #10
	...
}
      4c:	00000306 	andeq	r0, r0, r6, lsl #6
      50:	0000030e 	andeq	r0, r0, lr, lsl #6
      54:	44030005 	strmi	r0, [r3], #-5
		release;
      58:	00200005 	eoreq	r0, r0, r5
      5c:	00000000 	andeq	r0, r0, r0
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
	b->u.pointers.tail =
      64:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
}
      68:	01000000 	mrseq	r0, (UNDEF: 0)
		return NULL;
      6c:	00da5000 	sbcseq	r5, sl, r0
      70:	00eb0000 	rsceq	r0, fp, r0
      74:	00010000 	andeq	r0, r1, r0
      78:	00000050 	andeq	r0, r0, r0, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	0000dc00 	andeq	sp, r0, r0, lsl #24
      84:	0000e000 	andeq	lr, r0, r0
      88:	73000500 	movwvc	r0, #1280	; 0x500
      8c:	08230600 	stmdaeq	r3!, {r9, sl}
	...
      98:	000000ec 	andeq	r0, r0, ip, ror #1
      9c:	00000105 	andeq	r0, r0, r5, lsl #2
      a0:	00500001 	subseq	r0, r0, r1
      a4:	00000000 	andeq	r0, r0, r0
      a8:	06000000 	streq	r0, [r0], -r0
      ac:	12000001 	andne	r0, r0, #1
      b0:	01000001 	tsteq	r0, r1
      b4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
      c4:	00010000 	andeq	r0, r1, r0
fsm transmitter (message * messagePtr) {
      c8:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
      d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      e4:	00000c3c 	andeq	r0, r0, ip, lsr ip
      e8:	00000c3c 	andeq	r0, r0, ip, lsr ip
        spkt [0] = 0;
      ec:	00500001 	subseq	r0, r0, r1
        *p = messagePtr->senderGroupId; p += 2;
      f0:	00000000 	andeq	r0, r0, r0
        *p = messagePtr->messageType; p++;
      f4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
        *p = messagePtr->requestNumber; p++;
      f8:	ce00000a 	cdpgt	0, 0, cr0, cr0, cr10, {0}
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	0100000a 	tsteq	r0, sl
        *p = messagePtr->receiverId; p++; // insert receiveer ID
     100:	0afe5600 	beq	fff95908 <_estack+0xdff90908>
        tcv_endp (spkt);
     104:	0b020000 	bleq	8010c <__ccfg+0x60164>
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	00010000 	andeq	r0, r1, r0
     10c:	00000056 	andeq	r0, r0, r6, asr r0
}
     110:	00000000 	andeq	r0, r0, r0
        finish;
     114:	0009b200 	andeq	fp, r9, r0, lsl #4
     118:	0009b600 	andeq	fp, r9, r0, lsl #12
     11c:	52000100 	andpl	r0, r0, #0, 2
     120:	000009cc 	andeq	r0, r0, ip, asr #19
char randomNumber() {
     124:	000009e0 	andeq	r0, r0, r0, ror #19
   srand((unsigned) time(&t));
     128:	00520001 	subseq	r0, r2, r1
     12c:	00000000 	andeq	r0, r0, r0
   return (char)rand();
     130:	ba000000 	blt	138 <randomNumber+0x14>
}
     134:	c0000009 	andgt	r0, r0, r9
     138:	01000009 	tsteq	r0, r9
fsm root {
     13c:	00005300 	andeq	r5, r0, r0, lsl #6
     140:	00000000 	andeq	r0, r0, r0
     144:	09700000 	ldmdbeq	r0!, {}^	; <UNPREDICTABLE>
     148:	097a0000 	ldmdbeq	sl!, {}^	; <UNPREDICTABLE>
     14c:	00010000 	andeq	r0, r1, r0
     150:	00000053 	andeq	r0, r0, r3, asr r0
     154:	00000000 	andeq	r0, r0, r0
     158:	00097000 	andeq	r7, r9, r0
     15c:	00097600 	andeq	r7, r9, r0, lsl #12
     160:	53000100 	movwpl	r0, #256	; 0x100
	...
     16c:	00000a06 	andeq	r0, r0, r6, lsl #20
        recordCount = 0;
     170:	00000a10 	andeq	r0, r0, r0, lsl sl
        nodeId = 1;
     174:	00530001 	subseq	r0, r3, r1
     178:	00000000 	andeq	r0, r0, r0
        groupId = 1;
     17c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     180:	22000009 	andcs	r0, r0, #9
        messagePtr = (message *) umalloc(sizeof(message));
     184:	0100000a 	tsteq	r0, sl
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	00005200 	andeq	r5, r0, r0, lsl #4
     18c:	00000000 	andeq	r0, r0, r0
     190:	0a460000 	beq	1180198 <__ccfg+0x11601f0>
        tcv_plug(0, &plug_null);
     194:	0a500000 	beq	140019c <__ccfg+0x13e01f4>
     198:	00010000 	andeq	r0, r1, r0
        sfd = tcv_open(WNONE, 0, 0);
     19c:	00000053 	andeq	r0, r0, r3, asr r0
     1a0:	00000000 	andeq	r0, r0, r0
     1a4:	000a3800 	andeq	r3, sl, r0, lsl #16
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	000a6e00 	andeq	r6, sl, r0, lsl #28
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			diag("Cannot open tcv interface");
     1b8:	000008de 	ldrdeq	r0, [r0], -lr
     1bc:	000008e8 	andeq	r0, r0, r8, ror #17
			halt();
     1c0:	00530001 	subseq	r0, r3, r1
        currentProtocol = IDLE;
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	d0000000 	andle	r0, r0, r0
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	fa000008 	blx	1f4 <root+0xb8>
     1d0:	01000008 	tsteq	r0, r8
     1d4:	00005200 	andeq	r5, r0, r0, lsl #4
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
     1e0:	093a0000 	ldmdbeq	sl!, {}	; <UNPREDICTABLE>
        ser_outf(Options, menu);
     1e4:	00010000 	andeq	r0, r1, r0
     1e8:	00000053 	andeq	r0, r0, r3, asr r0
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	00000000 	andeq	r0, r0, r0
     1f0:	00092200 	andeq	r2, r9, r0, lsl #4
     1f4:	00094a00 	andeq	r4, r9, r0, lsl #20
        switch (choice)
     1f8:	52000100 	andpl	r0, r0, #0, 2
	...
     204:	00000404 	andeq	r0, r0, r4, lsl #8
     208:	00000408 	andeq	r0, r0, r8, lsl #8
     20c:	08500001 	ldmdaeq	r0, {r0}^
     210:	0b000004 	bleq	228 <root+0xec>
     214:	01000004 	tsteq	r0, r4
     218:	00005100 	andeq	r5, r0, r0, lsl #2
     21c:	00000000 	andeq	r0, r0, r0
     220:	07900000 	ldreq	r0, [r0, r0]
     224:	07920000 	ldreq	r0, [r2, r0]
        proceed Menu_Header;
     228:	00010000 	andeq	r0, r1, r0
     22c:	00000050 	andeq	r0, r0, r0, asr r0
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	00000000 	andeq	r0, r0, r0
     234:	00079000 	andeq	r9, r7, r0
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	0007a600 	andeq	sl, r7, r0, lsl #12
     23c:	51000100 	mrspl	r0, (UNDEF: 16)
        proceed Menu_Header;
     240:	000007a6 	andeq	r0, r0, r6, lsr #15
     244:	000007aa 	andeq	r0, r0, sl, lsr #15
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	b0550001 	subslt	r0, r5, r1
     24c:	c6000007 	strgt	r0, [r0], -r7
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	01000007 	tsteq	r0, r7
     254:	07c65500 	strbeq	r5, [r6, r0, lsl #10]
     258:	07d40000 	ldrbeq	r0, [r4, r0]
    if (node < 1 || node > 25) {
     25c:	00010000 	andeq	r0, r1, r0
     260:	0007d451 	andeq	sp, r7, r1, asr r4
            proceed Set_Node_ID;
     264:	00080200 	andeq	r0, r8, r0, lsl #4
        proceed Menu_Header;
     268:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     26c:	00000808 	andeq	r0, r0, r8, lsl #16
        currentProtocol = DISCOVERY_REQUEST;
     270:	00000830 	andeq	r0, r0, r0, lsr r8
     274:	30550001 	subscc	r0, r5, r1
        receiverId = 0;
     278:	3e000008 	cdpcc	0, 0, cr0, cr0, cr8, {0}
        proceed Transmit_Message;
     27c:	01000008 	tsteq	r0, r8
        currentProtocol = CREATE_RECORD;
     280:	083e5100 	ldmdaeq	lr!, {r8, ip, lr}
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	08480000 	stmdaeq	r8, {}^	; <UNPREDICTABLE>
     288:	00010000 	andeq	r0, r1, r0
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	00084855 	andeq	r4, r8, r5, asr r8
     290:	00085300 	andeq	r5, r8, r0, lsl #6
     294:	51000100 	mrspl	r0, (UNDEF: 16)
    if (node < 1 || node > 25) {
     298:	00000853 	andeq	r0, r0, r3, asr r8
     29c:	00000856 	andeq	r0, r0, r6, asr r8
            proceed Create_Record;
     2a0:	56550001 	ldrbpl	r0, [r5], -r1
     2a4:	5c000008 	stcpl	0, cr0, [r0], {8}
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	01000008 	tsteq	r0, r8
     2ac:	085c5100 	ldmdaeq	ip, {r8, ip, lr}^
     2b0:	086e0000 	stmdaeq	lr!, {}^	; <UNPREDICTABLE>
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	00010000 	andeq	r0, r1, r0
     2b8:	00086e55 	andeq	r6, r8, r5, asr lr
     2bc:	00088000 	andeq	r8, r8, r0
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	51000100 	mrspl	r0, (UNDEF: 16)
        proceed Transmit_Message;
     2c4:	00000880 	andeq	r0, r0, r0, lsl #17
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	000008a0 	andeq	r0, r0, r0, lsr #17
        proceed Transmit_Message;
     2cc:	00550001 	subseq	r0, r5, r1
        currentProtocol = DELETE_RECORD;
     2d0:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	90000000 	andls	r0, r0, r0
        currentProtocol = DELETE_RECORD;
     2d8:	a6000007 	strge	r0, [r0], -r7
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	01000007 	tsteq	r0, r7
        proceed Get_Receiving_Node;
     2e0:	07a65200 	streq	r5, [r6, r0, lsl #4]!
        currentProtocol = RETRIEVE_RECORD;
     2e4:	07ac0000 	streq	r0, [ip, r0]!
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	00010000 	andeq	r0, r1, r0
        currentProtocol = RETRIEVE_RECORD;
     2ec:	0007b056 	andeq	fp, r7, r6, asr r0
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	0007c000 	andeq	ip, r7, r0
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
     2f8:	000007c6 	andeq	r0, r0, r6, asr #15
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	000007d4 	ldrdeq	r0, [r0], -r4
     300:	d4520001 	ldrble	r0, [r2], #-1
     304:	04000007 	streq	r0, [r0], #-7
    if (node < 1 || node > 25) {
     308:	01000008 	tsteq	r0, r8
     30c:	08085600 	stmdaeq	r8, {r9, sl, ip, lr}
            proceed Prompt_Recieving_Node;
     310:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00010000 	andeq	r0, r1, r0
     318:	00083056 	andeq	r3, r8, r6, asr r0
        char desiredRecordIndex = -1;
     31c:	00083e00 	andeq	r3, r8, r0, lsl #28
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	52000100 	andpl	r0, r0, #0, 2
     324:	0000083e 	andeq	r0, r0, lr, lsr r8
        char desiredRecordIndex = -1;
     328:	00000848 	andeq	r0, r0, r8, asr #16
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	48560001 	ldmdami	r6, {r0}^
        messagePtr->recordIndex = desiredRecordIndex;
     330:	53000008 	movwpl	r0, #8
     334:	01000008 	tsteq	r0, r8
     338:	08565200 	ldmdaeq	r6, {r9, ip, lr}^
        proceed Transmit_Message;
     33c:	08610000 	stmdaeq	r1!, {}^	; <UNPREDICTABLE>
        messagePtr -> senderGroupId = groupId;
     340:	00010000 	andeq	r0, r1, r0
     344:	00086152 	andeq	r6, r8, r2, asr r1
     348:	00086e00 	andeq	r6, r8, r0, lsl #28
        messagePtr -> messageType = currentProtocol;
     34c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
        messagePtr -> requestNumber = randomNumber();
     350:	0000086e 	andeq	r0, r0, lr, ror #16
        messagePtr -> senderId = nodeId;
     354:	000008a0 	andeq	r0, r0, r0, lsr #17
     358:	00520001 	subseq	r0, r2, r1
     35c:	00000000 	andeq	r0, r0, r0
        call transmitter(messagePtr, Menu_Header);
     360:	04000000 	streq	r0, [r0], #-0
        messagePtr -> receiverId = receiverId;
     364:	12000007 	andne	r0, r0, #7
        call transmitter(messagePtr, Menu_Header);
     368:	01000007 	tsteq	r0, r7
     36c:	00005000 	andeq	r5, r0, r0
     370:	00000000 	andeq	r0, r0, r0
     374:	07040000 	streq	r0, [r4, -r0]
            proceed Set_Node_ID;
     378:	07130000 	ldreq	r0, [r3, -r0]
            break;
     37c:	00010000 	andeq	r0, r1, r0
            proceed Set_Node_ID;
     380:	00000051 	andeq	r0, r0, r1, asr r0
            proceed Find_Neighbours;
     384:	00000000 	andeq	r0, r0, r0
            proceed Create_Record;
     388:	0006b400 	andeq	fp, r6, r0, lsl #8
            proceed Delete_Record;
     38c:	0006cb00 	andeq	ip, r6, r0, lsl #22
            proceed Retrieve_Record;
     390:	50000100 	andpl	r0, r0, r0, lsl #2
            diag("Reset Local Storage");
     394:	000006ee 	andeq	r0, r0, lr, ror #13
            break;
     398:	00000704 	andeq	r0, r0, r4, lsl #14
            diag("Reset Local Storage");
     39c:	00500001 	subseq	r0, r0, r1
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	aa000000 	bge	3ac <root+0x270>
     3a8:	ba000005 	blt	3c4 <root+0x288>
     3ac:	01000005 	tsteq	r0, r5
     3b0:	05ba5200 	ldreq	r5, [sl, #512]!	; 0x200
     3b4:	05c20000 	strbeq	r0, [r2]
     3b8:	00050000 	andeq	r0, r5, r0
     3bc:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     3c0:	00065c40 	andeq	r5, r6, r0, asr #24
     3c4:	00066000 	andeq	r6, r6, r0
     3c8:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     3cc:	40092004 	andmi	r2, r9, r4
     3d0:	00000660 	andeq	r0, r0, r0, ror #12
     3d4:	00000662 	andeq	r0, r0, r2, ror #12
     3d8:	62520001 	subsvs	r0, r2, #1
     3dc:	64000006 	strvs	r0, [r0], #-6
     3e0:	05000006 	streq	r0, [r0, #-6]
     3e4:	20040c00 	andcs	r0, r4, r0, lsl #24
     3e8:	00004009 	andeq	r4, r0, r9
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	05c40000 	strbeq	r0, [r4]
     3f4:	05ce0000 	strbeq	r0, [lr]
     3f8:	00010000 	andeq	r0, r1, r0
     3fc:	0005d252 	andeq	sp, r5, r2, asr r2
     400:	0005dc00 	andeq	sp, r5, r0, lsl #24
static void devinit_uart (int devnum) {
     404:	52000100 	andpl	r0, r0, #0, 2
	adddevfunc (ioreq_uart_a, devnum);
     408:	000005e0 	andeq	r0, r0, r0, ror #11
     40c:	000005ea 	andeq	r0, r0, sl, ror #11
void udelay (volatile word n) {
     410:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
     414:	fa000005 	blx	430 <udelay+0x20>
	while (n) {
     418:	01000005 	tsteq	r0, r5
     41c:	06865200 	streq	r5, [r6], r0, lsl #4
}
     420:	068a0000 	streq	r0, [sl], r0
	while (n--);
     424:	00010000 	andeq	r0, r1, r0
     428:	00000052 	andeq	r0, r0, r2, asr r0
     42c:	00000000 	andeq	r0, r0, r0
		n--;
     430:	00054a00 	andeq	r4, r5, r0, lsl #20
     434:	00055c00 	andeq	r5, r5, r0, lsl #24
     438:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	while (n) {
     444:	000004e4 	andeq	r0, r0, r4, ror #9
     448:	000004ec 	andeq	r0, r0, ip, ror #9
}
     44c:	00500001 	subseq	r0, r0, r1
		udelay (999);
     450:	00000000 	andeq	r0, r0, r0
     454:	e4000000 	str	r0, [r0], #-0
		n--;
     458:	ea000004 	b	470 <__pi_ondomain+0x8>
     45c:	01000004 	tsteq	r0, r4
     460:	04ea5100 	strbteq	r5, [sl], #256	; 0x100
     464:	04ef0000 	strbteq	r0, [pc], #0	; 46c <__pi_ondomain+0x4>
void __pi_ondomain (lword d) {
     468:	00010000 	andeq	r0, r1, r0
     46c:	00000052 	andeq	r0, r0, r2, asr r0
	...
	PRCMPowerDomainOn (d);
     47c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	00510001 	subseq	r0, r1, r1
	__pi_systat.ondmns |= d;
     494:	00000000 	andeq	r0, r0, r0
     498:	01000000 	mrseq	r0, (UNDEF: 0)
}
     49c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	PRCMPowerDomainOff (d);
     4ac:	00010000 	andeq	r0, r1, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	00000052 	andeq	r0, r0, r2, asr r0
     4b4:	00000000 	andeq	r0, r0, r0
     4b8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c4:	000004a4 	andeq	r0, r0, r4, lsr #9
     4c8:	000004af 	andeq	r0, r0, pc, lsr #9
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4cc:	af500001 	svcge	0x00500001
     4d0:	d8000004 	stmdale	r0, {r2}
	__pi_systat.ondmns &= ~d;
     4d4:	01000004 	tsteq	r0, r4
     4d8:	00005400 	andeq	r5, r0, r0, lsl #8
}
     4dc:	00000000 	andeq	r0, r0, r0
     4e0:	04680000 	strbteq	r0, [r8], #-0
void __pi_syserror (word ec, const char *m) {
     4e4:	04800000 	streq	r0, [r0], #0
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	00010000 	andeq	r0, r1, r0
     4ec:	00048050 	andeq	r8, r4, r0, asr r0
  __ASM volatile ("cpsid i" : : : "memory");
     4f0:	00049800 	andeq	r9, r4, r0, lsl #16
     4f4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		all_leds_blink;
     500:	0000043c 	andeq	r0, r0, ip, lsr r4
     504:	00000442 	andeq	r0, r0, r2, asr #8
     508:	00500001 	subseq	r0, r0, r1
	...
     518:	01000000 	mrseq	r0, (UNDEF: 0)
     51c:	00005000 	andeq	r5, r0, r0
     520:	00000000 	andeq	r0, r0, r0
     524:	14f40000 	ldrbtne	r0, [r4], #0
	while (1) {
     528:	15120000 	ldrne	r0, [r2, #-0]
     52c:	00020000 	andeq	r0, r2, r0
     530:	15127091 	ldrne	r7, [r2, #-145]	; 0xffffff6f
     534:	153a0000 	ldrne	r0, [sl, #-0]!
void tci_run_delay_timer () {
     538:	00010000 	andeq	r0, r1, r0
	setdel = __pi_mintk - __pi_old;
     53c:	00153e54 	andseq	r3, r5, r4, asr lr
     540:	00154600 	andseq	r4, r5, r0, lsl #12
     544:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     548:	00001554 	andeq	r1, r0, r4, asr r5
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	0000159e 	muleq	r0, lr, r5
     550:	a2560001 	subsge	r0, r6, #1
     554:	1a000015 	bne	5b0 <AONRTCIntHandler+0x10>
     558:	01000016 	tsteq	r0, r6, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	00005600 	andeq	r5, r0, r0, lsl #12
	sti_tim;
     560:	00000000 	andeq	r0, r0, r0
}
     564:	155e0000 	ldrbne	r0, [lr, #-0]
     568:	159c0000 	ldrne	r0, [ip]
     56c:	00010000 	andeq	r0, r1, r0
     570:	0015a251 	andseq	sl, r5, r1, asr r2
     574:	0015b400 	andseq	fp, r5, r0, lsl #8
	cli_aux;
     578:	51000100 	mrspl	r0, (UNDEF: 16)
     57c:	000015c0 	andeq	r1, r0, r0, asr #11
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	000015ca 	andeq	r1, r0, sl, asr #11
     584:	dc510001 	mrrcle	0, 0, r0, r1, cr1
     588:	e0000015 	and	r0, r0, r5, lsl r0
     58c:	01000015 	tsteq	r0, r5, lsl r0
	sti_aux;
     590:	16005100 	strne	r5, [r0], -r0, lsl #2
}
     594:	16040000 	strne	r0, [r4], -r0
     598:	00010000 	andeq	r0, r1, r0
     59c:	00000051 	andeq	r0, r0, r1, asr r0
void AONRTCIntHandler () {
     5a0:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a4:	00155e00 	andseq	r5, r5, r0, lsl #28
     5a8:	00159c00 	andseq	r9, r5, r0, lsl #24
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		if (__pi_utims [0] == 0)
     5b0:	000015a2 	andeq	r1, r0, r2, lsr #11
     5b4:	000015ca 	andeq	r1, r0, sl, asr #11
		if (*(__pi_utims [0])) {
     5b8:	dc550001 	mrrcle	0, 0, r0, r5, cr1
     5bc:	e0000015 	and	r0, r0, r5, lsl r0
			(*(__pi_utims [0]))--;
     5c0:	01000015 	tsteq	r0, r5, lsl r0
		if (__pi_utims [1] == 0)
     5c4:	16005500 	strne	r5, [r0], -r0, lsl #10
		if (*(__pi_utims [1])) {
     5c8:	161a0000 	ldrne	r0, [sl], -r0
			aux_timer_inactive = 0;
     5cc:	00010000 	andeq	r0, r1, r0
			(*(__pi_utims [1]))--;
     5d0:	00000055 	andeq	r0, r0, r5, asr r0
		if (__pi_utims [2] == 0)
     5d4:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
     5d8:	0015d000 	andseq	sp, r5, r0
			(*(__pi_utims [2]))--;
     5dc:	0015dc00 	andseq	sp, r5, r0, lsl #24
		if (__pi_utims [3] != 0) {
     5e0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			if (*(__pi_utims [3])) {
     5e4:	000015e0 	andeq	r1, r0, r0, ror #11
				aux_timer_inactive = 0;
     5e8:	000015fa 	strdeq	r1, [r0], -sl
				(*(__pi_utims [3]))--;
     5ec:	fe550001 	cdp2	0, 5, cr0, cr5, cr1, {0}
	if (__pi_systat.ledsts) {
     5f0:	00000015 	andeq	r0, r0, r5, lsl r0
     5f4:	01000016 	tsteq	r0, r6, lsl r0
		if (__pi_systat.ledblc++ == 0) {
     5f8:	00005500 	andeq	r5, r0, r0, lsl #10
     5fc:	00000000 	andeq	r0, r0, r0
			if (__pi_systat.ledblk) {
     600:	15840000 	strne	r0, [r4]
     604:	159c0000 	ldrne	r0, [ip]
     608:	00010000 	andeq	r0, r1, r0
     60c:	00000054 	andeq	r0, r0, r4, asr r0
     610:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     614:	0015ca00 	andseq	ip, r5, r0, lsl #20
     618:	0015dc00 	andseq	sp, r5, r0, lsl #24
     61c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				if (__pi_systat.ledsts & 0x4)
     620:	000015e0 	andeq	r1, r0, r0, ror #11
				__pi_systat.ledblk = 0;
     624:	000015f4 	strdeq	r1, [r0], -r4
     628:	f4540001 			; <UNDEFINED> instruction: 0xf4540001
			if (__pi_systat.fstblk)
     62c:	00000015 	andeq	r0, r0, r5, lsl r0
     630:	01000016 	tsteq	r0, r6, lsl r0
				__pi_systat.ledblc = 200;
     634:	00005300 	andeq	r5, r0, r0, lsl #6
	if (events & AON_RTC_EVFLAGS_CH0) {
     638:	00000000 	andeq	r0, r0, r0
		cli_tim;
     63c:	160c0000 	strne	r0, [ip], -r0
		__pi_new += setdel;
     640:	161a0000 	ldrne	r0, [sl], -r0
     644:	00010000 	andeq	r0, r1, r0
		setdel = 0;
     648:	00000051 	andeq	r0, r0, r1, asr r0
		RISE_N_SHINE;
     64c:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
     650:	00100400 	andseq	r0, r0, r0, lsl #8
		RISE_N_SHINE;
     654:	00101000 	andseq	r1, r0, r0
     658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	00500001 	subseq	r0, r0, r1
				if (__pi_systat.ledsts & 0x2)
     670:	00000000 	andeq	r0, r0, r0
     674:	01000000 	mrseq	r0, (UNDEF: 0)
     678:	00005000 	andeq	r5, r0, r0
	...
		if (aux_timer_inactive) {
     688:	00010000 	andeq	r0, r1, r0
			cli_aux;
     68c:	00000051 	andeq	r0, r0, r1, asr r0
     690:	00000000 	andeq	r0, r0, r0
     694:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     6a8:	00520001 	subseq	r0, r2, r1
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	01000000 	mrseq	r0, (UNDEF: 0)
word tci_update_delay_ticks (Boolean force) {
     6b4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	00010000 	andeq	r0, r1, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	00000053 	andeq	r0, r0, r3, asr r0
     6cc:	00000000 	andeq	r0, r0, r0
     6d0:	53000100 	movwpl	r0, #256	; 0x100
	...
	return NO;
     6dc:	00530001 	subseq	r0, r3, r1
	...
}
     6ec:	01000000 	mrseq	r0, (UNDEF: 0)
		sti_tim;
     6f0:	00005000 	andeq	r5, r0, r0
		return YES;
     6f4:	00000000 	andeq	r0, r0, r0
     6f8:	14dc0000 	ldrbne	r0, [ip], #0
     6fc:	14e40000 	strbtne	r0, [r4], #0
     700:	00010000 	andeq	r0, r1, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	00000050 	andeq	r0, r0, r0, asr r0
	UARTDisable (UART0_BASE);
     708:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	00140000 	andseq	r0, r4, r0
	UARTDisable (UART0_BASE);
     710:	00140600 	andseq	r0, r4, r0, lsl #12
	UARTConfigSetExpClk (UART0_BASE,
     714:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     720:	00001416 	andeq	r1, r0, r6, lsl r4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	00001442 	andeq	r1, r0, r2, asr #8
     728:	42540001 	subsmi	r0, r4, #1
     72c:	48000014 	stmdami	r0, {r2, r4}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	01000014 	tsteq	r0, r4, lsl r0
     734:	14485200 	strbne	r5, [r8], #-512	; 0xfffffe00
     738:	14900000 	ldrne	r0, [r0], #0
	urates [0] = rate;
     73c:	00010000 	andeq	r0, r1, r0
}
     740:	00149054 	andseq	r9, r4, r4, asr r0
     744:	0014a800 	andseq	sl, r4, r0, lsl #16
     748:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     754:	00001442 	andeq	r1, r0, r2, asr #8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	00001446 	andeq	r1, r0, r6, asr #8
     75c:	46540001 	ldrbmi	r0, [r4], -r1
     760:	48000014 	stmdami	r0, {r2, r4}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	01000014 	tsteq	r0, r4, lsl r0
     768:	145e5300 	ldrbne	r5, [lr], #-768	; 0xfffffd00
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76c:	14670000 	strbtne	r0, [r7], #-0
     770:	00010000 	andeq	r0, r1, r0
	__pi_uart_setrate (urates [0], __pi_uart);
     774:	00000050 	andeq	r0, r0, r0, asr r0
     778:	00000000 	andeq	r0, r0, r0
     77c:	00145000 	andseq	r5, r4, r0
     780:	00146000 	andseq	r6, r4, r0
     784:	53000100 	movwpl	r0, #256	; 0x100
	...
	switch (operation) {
     790:	00001416 	andeq	r1, r0, r6, lsl r4
static int ioreq_uart_a (int operation, char *buf, int len) {
     794:	00001434 	andeq	r1, r0, r4, lsr r4
     798:	3a500001 	bcc	14007a4 <__ccfg+0x13e07fc>
     79c:	5a000014 	bpl	7f4 <ioreq_uart_a+0x64>
     7a0:	01000014 	tsteq	r0, r4, lsl r0
     7a4:	145a5000 	ldrbne	r5, [sl], #-0
				*buf++ = uart_a_read;
     7a8:	14640000 	strbtne	r0, [r4], #-0
     7ac:	00020000 	andeq	r0, r2, r0
			while (len && uart_a_char_available) {
     7b0:	00007c74 	andeq	r7, r0, r4, ror ip
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	0f840000 	svceq	0x00840000
			if (len != operation) {
     7bc:	0fb20000 	svceq	0x00b20000
}
     7c0:	00010000 	andeq	r0, r1, r0
     7c4:	000fc050 	andeq	ip, pc, r0, asr r0	; <UNPREDICTABLE>
			uart_a_disable_int;
     7c8:	00100400 	andseq	r0, r0, r0, lsl #8
			if (uart_a_char_available) {
     7cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			uart_a_disable_int;
     7d8:	00000f8c 	andeq	r0, r0, ip, lsl #31
			if (uart_a_char_available) {
     7dc:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     7e0:	98530001 	ldmdals	r3, {r0}^
				uart_a_enable_int;
     7e4:	9a00000f 	bls	828 <ioreq_uart_a+0x98>
     7e8:	0200000f 	andeq	r0, r0, #15
				goto Redo_rx;
     7ec:	9e007000 	cdpls	0, 0, cr7, cr0, cr0, {0}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f0:	f600000f 			; <UNDEFINED> instruction: 0xf600000f
     7f4:	0100000f 	tsteq	r0, pc
			return -2;
     7f8:	0ff65300 	svceq	0x00f65300
     7fc:	0ffa0000 	svceq	0x00fa0000
				uart_a_write (*buf);
     800:	00020000 	andeq	r0, r2, r0
     804:	0ffa0073 	svceq	0x00fa0073
			while (len && uart_a_room_in_tx) {
     808:	10040000 	andne	r0, r4, r0
     80c:	00010000 	andeq	r0, r1, r0
     810:	00000053 	andeq	r0, r0, r3, asr r0
			if (len != operation) {
     814:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     818:	000f8c00 	andeq	r8, pc, r0, lsl #24
     81c:	000f8e00 	andeq	r8, pc, r0, lsl #28
			if (uart_a_room_in_tx) {
     820:	52000100 	andpl	r0, r0, #0, 2
     824:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
				uart_a_enable_int;
     828:	00000fde 	ldrdeq	r0, [r0], -lr
     82c:	f6520001 			; <UNDEFINED> instruction: 0xf6520001
				*buf++ = uart_a_read;
     830:	fa00000f 	blx	874 <ioreq_uart_a+0xe4>
			if (uart_a_room_in_tx) {
     834:	0100000f 	tsteq	r0, pc
				uart_a_write (*buf);
     838:	0ffa5300 	svceq	0x00fa5300
     83c:	10040000 	andne	r0, r4, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     840:	00010000 	andeq	r0, r1, r0
     844:	00000052 	andeq	r0, r0, r2, asr r0
			uart_a_enable_int;
     848:	00000000 	andeq	r0, r0, r0
     84c:	00132800 	andseq	r2, r3, r0, lsl #16
     850:	00133000 	andseq	r3, r3, r0
			return 0;
     854:	51000100 	mrspl	r0, (UNDEF: 16)
			if (len == UART_CNTRL_SETRATE) {
     858:	00001334 	andeq	r1, r0, r4, lsr r3
				if (__pi_uart_setrate (*((word*)buf),
     85c:	00001336 	andeq	r1, r0, r6, lsr r3
     860:	00510001 	subseq	r0, r1, r1
     864:	00000000 	andeq	r0, r0, r0
				syserror (EREQPAR, "uar");
     868:	7c000000 	stcvc	0, cr0, [r0], {-0}
			syserror (ENOOPER, "uai");
     86c:	98000012 	stmdals	r0, {r1, r4}
			if (len == UART_CNTRL_GETRATE) {
     870:	01000012 	tsteq	r0, r2, lsl r0
				return 1;
     874:	129e5000 	addsne	r5, lr, #0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     878:	12aa0000 	adcne	r0, sl, #0
			syserror (ENOOPER, "uai");
     87c:	00010000 	andeq	r0, r1, r0
     880:	00000050 	andeq	r0, r0, r0, asr r0
     884:	00000000 	andeq	r0, r0, r0
     888:	00127c00 	andseq	r7, r2, r0, lsl #24
     88c:	00129a00 	andseq	r9, r2, r0, lsl #20
     890:	51000100 	mrspl	r0, (UNDEF: 16)
     894:	0000129e 	muleq	r0, lr, r2
     898:	000012a8 	andeq	r1, r0, r8, lsr #5
     89c:	00510001 	subseq	r0, r1, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
     8a4:	7c000000 	stcvc	0, cr0, [r0], {-0}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	9d000012 	stcls	0, cr0, [r0, #-72]	; 0xffffffb8
     8ac:	01000012 	tsteq	r0, r2, lsl r0
     8b0:	129e5200 	addsne	r5, lr, #0, 4
     8b4:	12a60000 	adcne	r0, r6, #0
     8b8:	00010000 	andeq	r0, r1, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8bc:	00000052 	andeq	r0, r0, r2, asr r0
     8c0:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     8c4:	00127c00 	andseq	r7, r2, r0, lsl #24
     8c8:	00129400 	andseq	r9, r2, r0, lsl #8
		i_trigger (devevent (UART_A, READ));
     8cc:	53000100 	movwpl	r0, #256	; 0x100
     8d0:	00001294 	muleq	r0, r4, r2
     8d4:	00001318 	andeq	r1, r0, r8, lsl r3
     8d8:	00550001 	subseq	r0, r5, r1
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	7c000000 	stcvc	0, cr0, [r0], {-0}
     8e4:	fc000012 	stc2	0, cr0, [r0], {18}
     8e8:	02000012 	andeq	r0, r0, #18
     8ec:	fc009100 	stc2	1, cr9, [r0], {-0}
     8f0:	18000012 	stmdane	r0, {r1, r4}
     8f4:	02000013 	andeq	r0, r0, #19
     8f8:	00009100 	andeq	r9, r0, r0, lsl #2
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fc:	00000000 	andeq	r0, r0, r0
     900:	ac000000 	stcge	0, cr0, [r0], {-0}
     904:	c2000012 	andgt	r0, r0, #18
		i_trigger (devevent (UART_A, WRITE));
     908:	01000012 	tsteq	r0, r2, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	12ca5000 	sbcne	r5, sl, #0
     910:	12dc0000 	sbcsne	r0, ip, #0
		RISE_N_SHINE;
     914:	00010000 	andeq	r0, r1, r0
     918:	0012ec50 	andseq	lr, r2, r0, asr ip
     91c:	0012f400 	andseq	pc, r2, r0, lsl #8
		i_trigger (devevent (UART_A, WRITE));
     920:	50000100 	andpl	r0, r0, r0, lsl #2
     924:	000012fc 	strdeq	r1, [r0], -ip
     928:	00001304 	andeq	r1, r0, r4, lsl #6
     92c:	00500001 	subseq	r0, r0, r1
     930:	00000000 	andeq	r0, r0, r0
     934:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     938:	5e000012 	mcrpl	0, 0, r0, cr0, cr2, {0}
     93c:	01000012 	tsteq	r0, r2, lsl r0
     940:	12645000 	rsbne	r5, r4, #0
     944:	126c0000 	rsbne	r0, ip, #0
     948:	00010000 	andeq	r0, r1, r0
}
     94c:	00127050 	andseq	r7, r2, r0, asr r0
     950:	00127c00 	andseq	r7, r2, r0, lsl #24
     954:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void __buttons_setirq (int val) {
     960:	00001258 	andeq	r1, r0, r8, asr r2
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	00001260 	andeq	r1, r0, r0, ror #4
     968:	64510001 	ldrbvs	r0, [r1], #-1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	6e000012 	mcrvs	0, 0, r0, cr0, cr2, {0}
     970:	01000012 	tsteq	r0, r2, lsl r0
     974:	12705100 	rsbsne	r5, r0, #0, 2
		bn = BUTTON_GPIO (__button_list [i]);
     978:	127c0000 	rsbsne	r0, ip, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97c:	00010000 	andeq	r0, r1, r0
     980:	00000051 	andeq	r0, r0, r1, asr r0
     984:	00000000 	andeq	r0, r0, r0
     988:	00124a00 	andseq	r4, r2, r0, lsl #20
     98c:	00125200 	andseq	r5, r2, r0, lsl #4
     990:	50000100 	andpl	r0, r0, r0, lsl #2
}
     994:	00001256 	andeq	r1, r0, r6, asr r2
     998:	00001258 	andeq	r1, r0, r8, asr r2
     99c:	00500001 	subseq	r0, r0, r1
     9a0:	00000000 	andeq	r0, r0, r0
void __pinlist_setirq (int val) {
     9a4:	4a000000 	bmi	9ac <__pinlist_setirq+0x8>
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	4c000012 	stcmi	0, cr0, [r0], {18}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	01000012 	tsteq	r0, r2, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	00005200 	andeq	r5, r0, r0, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b8:	12360000 	eorsne	r0, r6, #0
     9bc:	12380000 	eorsne	r0, r8, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c0:	00010000 	andeq	r0, r1, r0
     9c4:	00000050 	andeq	r0, r0, r0, asr r0
     9c8:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	00123600 	andseq	r3, r2, r0, lsl #12
}
     9d0:	00124000 	andseq	r4, r2, r0
     9d4:	51000100 	mrspl	r0, (UNDEF: 16)
     9d8:	00001244 	andeq	r1, r0, r4, asr #4
     9dc:	0000124a 	andeq	r1, r0, sl, asr #4
void GPIOIntHandler () {
     9e0:	00510001 	subseq	r0, r1, r1
if (buttons_int) {
     9e4:	00000000 	andeq	r0, r0, r0
     9e8:	36000000 	strcc	r0, [r0], -r0
	buttons_disable ();
     9ec:	3a000012 	bcc	a3c <GPIOIntHandler+0x5c>
     9f0:	01000012 	tsteq	r0, r2, lsl r0
	i_trigger ((aword)&__button_list);
     9f4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
     a04:	00010000 	andeq	r0, r1, r0
     a08:	00000050 	andeq	r0, r0, r0, asr r0
	...
     a18:	51000100 	mrspl	r0, (UNDEF: 16)
	...
if (pin_sensor_int) {
     a2c:	00500001 	subseq	r0, r0, r1
     a30:	00000000 	andeq	r0, r0, r0
	i_trigger ((aword)(&__input_pins));
     a34:	01000000 	mrseq	r0, (UNDEF: 0)
     a38:	00005000 	andeq	r5, r0, r0
	...
     a48:	00010000 	andeq	r0, r1, r0
     a4c:	00000051 	andeq	r0, r0, r1, asr r0
	...
     a5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	RISE_N_SHINE;
     a68:	00500001 	subseq	r0, r0, r1
	...
}
     a78:	01000000 	mrseq	r0, (UNDEF: 0)
     a7c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8c:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	00000052 	andeq	r0, r0, r2, asr r0
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab4:	00510001 	subseq	r0, r1, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ab8:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     abc:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac0:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac4:	00000000 	andeq	r0, r0, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	12280000 	eorne	r0, r8, #0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	122c0000 	eorne	r0, ip, #0
		pin = (port_confs [i] >> 19) & 0x1f;
     ad0:	00010000 	andeq	r0, r1, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad4:	00122c50 	andseq	r2, r2, r0, asr ip
     ad8:	00123600 	andseq	r3, r2, r0, lsl #12
     adc:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ae8:	0000122c 	andeq	r1, r0, ip, lsr #4
     aec:	00001236 	andeq	r1, r0, r6, lsr r2
		if (port_confs [i] & 0x40)
     af0:	00500001 	subseq	r0, r0, r1
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b04:	00005000 	andeq	r5, r0, r0
	all_leds_blink;
     b08:	00000000 	andeq	r0, r0, r0
     b0c:	00010000 	andeq	r0, r1, r0
     b10:	00000051 	andeq	r0, r0, r1, asr r0
	...
     b20:	52000100 	andpl	r0, r0, #0, 2
	...
     b2c:	00520001 	subseq	r0, r2, r1
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	01000000 	mrseq	r0, (UNDEF: 0)
     b40:	00005000 	andeq	r5, r0, r0
	IntEnable (INT_AON_RTC_COMB);
     b44:	00000000 	andeq	r0, r0, r0
     b48:	12040000 	andne	r0, r4, #0
     b4c:	120c0000 	andne	r0, ip, #0
	__pi_malloc_init ();
     b50:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_AON_GPIO_EDGE);
     b54:	00120e50 	andseq	r0, r2, r0, asr lr
     b58:	00121200 	andseq	r1, r2, r0, lsl #4
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5c:	50000100 	andpl	r0, r0, r0, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	00001212 	andeq	r1, r0, r2, lsl r2
     b64:	00001228 	andeq	r1, r0, r8, lsr #4
     b68:	00530001 	subseq	r0, r3, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	01000000 	mrseq	r0, (UNDEF: 0)
     b7c:	00005000 	andeq	r5, r0, r0
	urates [0] = UART_RATE / 100;
     b80:	00000000 	andeq	r0, r0, r0
     b84:	00010000 	andeq	r0, r1, r0
	reinit_uart ();
     b88:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba4:	00500001 	subseq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb4:	01000000 	mrseq	r0, (UNDEF: 0)
     bb8:	00005000 	andeq	r5, r0, r0
     bbc:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_UART0_COMB);
     bc0:	00010000 	andeq	r0, r1, r0
     bc4:	00000057 	andeq	r0, r0, r7, asr r0
	...
		diag ("");
     bd4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		diag ("Leftover RAM: %d bytes",
     be8:	00500001 	subseq	r0, r0, r1
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	01000000 	mrseq	r0, (UNDEF: 0)
     bf4:	00005000 	andeq	r5, r0, r0
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	00010000 	andeq	r0, r1, r0
     c00:	00000058 	andeq	r0, r0, r8, asr r0
     c04:	00000000 	andeq	r0, r0, r0
     c08:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c1c:	00540001 	subseq	r0, r4, r1
     c20:	00000000 	andeq	r0, r0, r0
     c24:	01000000 	mrseq	r0, (UNDEF: 0)
     c28:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     c38:	00010000 	andeq	r0, r1, r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	00000058 	andeq	r0, r0, r8, asr r0
     c40:	00000000 	andeq	r0, r0, r0
     c44:	58000100 	stmdapl	r0, {r8}
	...
     c50:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     c54:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
     c58:	b8500001 	ldmdalt	r0, {r0}^
}
     c5c:	c2000013 	andgt	r0, r0, #19
__attribute__ ((noreturn)) void __pi_release () {
     c60:	01000013 	tsteq	r0, r3, lsl r0
     c64:	13c85000 	bicne	r5, r8, #0
     c68:	13d40000 	bicsne	r0, r4, #0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6c:	00010000 	andeq	r0, r1, r0
	check_stack_overflow;
     c70:	0013e850 	andseq	lr, r3, r0, asr r8
     c74:	0013f200 	andseq	pc, r3, r0, lsl #4
     c78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	update_n_wake (MAX_WORD, NO);
     c84:	000013be 			; <UNDEFINED> instruction: 0x000013be
	for_all_tasks (__pi_curr) {
     c88:	000013f0 	strdeq	r1, [r0], -r0
     c8c:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
     c90:	f2000013 	vqadd.s8	d0, d0, d3
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	01000013 	tsteq	r0, r3, lsl r0
	__SLEEP;
     c98:	13f25200 	mvnsne	r5, #0, 4
     c9c:	13f40000 	mvnsne	r0, #0
     ca0:	00010000 	andeq	r0, r1, r0
     ca4:	00000054 	andeq	r0, r0, r4, asr r0
	system_event_count ++;
     ca8:	00000000 	andeq	r0, r0, r0
     cac:	000f4e00 	andeq	r4, pc, r0, lsl #28
	switch (__pi_systat.effpdm) {
     cb0:	000f8000 	andeq	r8, pc, r0
     cb4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			__WFI ();
     cc0:	00000f64 	andeq	r0, r0, r4, ror #30
     cc4:	00000f6e 	andeq	r0, r0, lr, ror #30
     cc8:	00530001 	subseq	r0, r3, r1
	...
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	01000000 	mrseq	r0, (UNDEF: 0)
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	00005000 	andeq	r5, r0, r0
			goto Redo;
     ce0:	00000000 	andeq	r0, r0, r0
	for_all_tasks (__pi_curr) {
     ce4:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ce8:	00000054 	andeq	r0, r0, r4, asr r0
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d04:	00500001 	subseq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	00000000 	andeq	r0, r0, r0
     d0c:	cc000000 	stcgt	0, cr0, [r0], {-0}
			__WFI ();
     d10:	e5000011 	str	r0, [r0, #-17]	; 0xffffffef
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d14:	01000011 	tsteq	r0, r1, lsl r0
     d18:	00005000 	andeq	r5, r0, r0
}
     d1c:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d20:	11cc0000 	bicne	r0, ip, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d24:	11e20000 	mvnne	r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d28:	00010000 	andeq	r0, r1, r0
     d2c:	00000051 	andeq	r0, r0, r1, asr r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d30:	00000000 	andeq	r0, r0, r0
     d34:	0011a800 	andseq	sl, r1, r0, lsl #16
     d38:	0011bc00 	andseq	fp, r1, r0, lsl #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3c:	50000100 	andpl	r0, r0, r0, lsl #2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d40:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
     d44:	000011c0 	andeq	r1, r0, r0, asr #3
     d48:	c4540001 	ldrbgt	r0, [r4], #-1
     d4c:	cc000011 	stcgt	0, cr0, [r0], {17}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	01000011 	tsteq	r0, r1, lsl r0
     d54:	00005000 	andeq	r5, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d58:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d5c:	11a80000 			; <UNDEFINED> instruction: 0x11a80000
     d60:	11bf0000 			; <UNDEFINED> instruction: 0x11bf0000
     d64:	00010000 	andeq	r0, r1, r0
     d68:	0011c451 	andseq	ip, r1, r1, asr r4
     d6c:	0011cc00 	andseq	ip, r1, r0, lsl #24
			SysCtrlSetRechargeBeforePowerDown
     d70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	000011bf 			; <UNDEFINED> instruction: 0x000011bf
     d84:	c4530001 	ldrbgt	r0, [r3], #-1
     d88:	cc000011 	stcgt	0, cr0, [r0], {17}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8c:	01000011 	tsteq	r0, r1, lsl r0
     d90:	00005300 	andeq	r5, r0, r0, lsl #6
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     da0:	00010000 	andeq	r0, r1, r0
     da4:	00000050 	andeq	r0, r0, r0, asr r0
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dc0:	00550001 	subseq	r0, r5, r1
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     dd4:	00005200 	andeq	r5, r0, r0, lsl #4
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd8:	00000000 	andeq	r0, r0, r0
			reinit_uart ();
     ddc:	00010000 	andeq	r0, r1, r0
     de0:	00000052 	andeq	r0, r0, r2, asr r0
     de4:	00000000 	andeq	r0, r0, r0
}
     de8:	00118800 	andseq	r8, r1, r0, lsl #16
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dec:	00119200 	andseq	r9, r1, r0, lsl #4
     df0:	53000100 	movwpl	r0, #256	; 0x100
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dfc:	0000112c 	andeq	r1, r0, ip, lsr #2
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	00001132 	andeq	r1, r0, r2, lsr r1
     e04:	00500001 	subseq	r0, r0, r1
     e08:	00000000 	andeq	r0, r0, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	ae000014 	mcrge	0, 0, r0, cr0, cr4, {0}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	01000014 	tsteq	r0, r4, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e18:	14ae5000 	strtne	r5, [lr], #0
     e1c:	14dc0000 	ldrbne	r0, [ip], #0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e20:	00010000 	andeq	r0, r1, r0
     e24:	00000055 	andeq	r0, r0, r5, asr r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e28:	00000000 	andeq	r0, r0, r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2c:	0014a800 	andseq	sl, r4, r0, lsl #16
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e30:	0014b300 	andseq	fp, r4, r0, lsl #6
     e34:	51000100 	mrspl	r0, (UNDEF: 16)
			PRCMPowerDomainOff (
     e38:	000014b3 			; <UNDEFINED> instruction: 0x000014b3
     e3c:	000014dc 	ldrdeq	r1, [r0], -ip
	__SLEEP;
     e40:	00540001 	subseq	r0, r4, r1
     e44:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsie i" : : : "memory");
     e48:	c4000000 	strgt	r0, [r0], #-0
	goto Redo;
     e4c:	c8000014 	stmdagt	r0, {r2, r4}
     e50:	01000014 	tsteq	r0, r4, lsl r0
     e54:	14ca5300 	strbne	r5, [sl], #768	; 0x300
     e58:	14ce0000 	strbne	r0, [lr], #0
     e5c:	00010000 	andeq	r0, r1, r0
     e60:	0014ce53 	andseq	ip, r4, r3, asr lr
     e64:	0014dc00 	andseq	sp, r4, r0, lsl #24
     e68:	52000100 	andpl	r0, r0, #0, 2
	...
     e74:	00001058 	andeq	r1, r0, r8, asr r0
     e78:	0000105d 	andeq	r1, r0, sp, asr r0
     e7c:	00500001 	subseq	r0, r0, r1
     e80:	00000000 	andeq	r0, r0, r0
     e84:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     e88:	5d000010 	stcpl	0, cr0, [r0, #-64]	; 0xffffffc0
     e8c:	01000010 	tsteq	r0, r0, lsl r0
     e90:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     ea0:	00010000 	andeq	r0, r1, r0
     ea4:	00000050 	andeq	r0, r0, r0, asr r0
     ea8:	00000000 	andeq	r0, r0, r0
     eac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	cli_tim;
     ec0:	00530001 	subseq	r0, r3, r1
	diag ("PicOS halted");
     ec4:	00000000 	andeq	r0, r0, r0
	mdelay (500);
     ec8:	01000000 	mrseq	r0, (UNDEF: 0)
     ecc:	00005300 	andeq	r5, r0, r0, lsl #6
	setpowermode (2);
     ed0:	00000000 	andeq	r0, r0, r0
	__PCB = NULL;
     ed4:	102c0000 	eorne	r0, ip, r0
	release;
     ed8:	10340000 	eorsne	r0, r4, r0
     edc:	00010000 	andeq	r0, r1, r0
     ee0:	00103450 	andseq	r3, r0, r0, asr r4
     ee4:	00104700 	andseq	r4, r0, r0, lsl #14
int main (void) {
     ee8:	53000100 	movwpl	r0, #256	; 0x100
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	00001048 	andeq	r1, r0, r8, asr #32
     ef0:	00001058 	andeq	r1, r0, r8, asr r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	00530001 	subseq	r0, r3, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef8:	00000000 	andeq	r0, r0, r0
	system_init ();
     efc:	36000000 	strcc	r0, [r0], -r0
	tcv_init ();
     f00:	47000010 	smladmi	r0, r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	01000010 	tsteq	r0, r0, lsl r0
     f08:	10485000 	subne	r5, r8, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	10580000 	subsne	r0, r8, r0
     f10:	00010000 	andeq	r0, r1, r0
     f14:	00000050 	andeq	r0, r0, r0, asr r0
	...
	delay (16, 0);
     f24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_release ();
     f30:	00530001 	subseq	r0, r3, r1
     f34:	00000000 	andeq	r0, r0, r0
     f38:	01000000 	mrseq	r0, (UNDEF: 0)
     f3c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	wfun = (aword)(pid->code);
     f4c:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
     f50:	00000050 	andeq	r0, r0, r0, asr r0
		for (j = 0; j < nevents (i); j++) {
     f54:	00000000 	andeq	r0, r0, r0
     f58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (i->Events [j] . Event == (aword)pid
     f6c:	00530001 	subseq	r0, r3, r1
     f70:	00000000 	andeq	r0, r0, r0
				wakeupev (i, j);
     f74:	60000000 	andvs	r0, r0, r0
     f78:	66000010 			; <UNDEFINED> instruction: 0x66000010
	for_all_tasks (i) {
     f7c:	01000010 	tsteq	r0, r0, lsl r0
}
     f80:	00005000 	andeq	r5, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	00000000 	andeq	r0, r0, r0
static void qfree (aword *ch) {
     f88:	10600000 	rsbne	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8c:	10690000 	rsbne	r0, r9, r0
	cc = (aword*)(mpools + MA_NP);
     f90:	00010000 	andeq	r0, r1, r0
	m_setnextp (ch, chunk);
     f94:	00000051 	andeq	r0, r0, r1, asr r0
	m_setnextp (cc, ch);
     f98:	00000000 	andeq	r0, r0, r0
}
     f9c:	00106e00 	andseq	r6, r0, r0, lsl #28
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa0:	0010ac00 	andseq	sl, r0, r0, lsl #24
     fa4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     fa8:	000010b0 	strheq	r1, [r0], -r0
			m_setnextp (cc, m_nextp (chunk));
     fac:	000010fe 	strdeq	r1, [r0], -lr
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb0:	00540001 	subseq	r0, r4, r1
     fb4:	0a000011 	beq	1000 <qfree+0x7c>
     fb8:	01000011 	tsteq	r0, r1, lsl r0
     fbc:	00005400 	andeq	r5, r0, r0, lsl #8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	00000000 	andeq	r0, r0, r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	10a60000 	adcne	r0, r6, r0
     fc8:	10a80000 	adcne	r0, r8, r0
     fcc:	00010000 	andeq	r0, r1, r0
			m_setnextp (cc, m_nextp (chunk));
     fd0:	0010b050 	andseq	fp, r0, r0, asr r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	00110000 	andseq	r0, r1, r0
     fd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fe4:	00001140 	andeq	r1, r0, r0, asr #2
     fe8:	00001154 	andeq	r1, r0, r4, asr r1
			if (m_size (chunk) >= m_size (ch))
     fec:	5a500001 	bpl	1400ff8 <__ccfg+0x13e1050>
     ff0:	74000011 	strvc	r0, [r0], #-17	; 0xffffffef
     ff4:	01000011 	tsteq	r0, r1, lsl r0
		chunk = m_nextp (chunk))
     ff8:	00005000 	andeq	r5, r0, r0
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	11400000 	mrsne	r0, (UNDEF: 64)
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1004:	11560000 	cmpne	r6, r0
	diag_wait (a);
    1008:	00010000 	andeq	r0, r1, r0
	diag_wchar (c, a);
    100c:	00115a51 	andseq	r5, r1, r1, asr sl
    1010:	00116000 	andseq	r6, r1, r0
}
    1014:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	syserror (ESTATE, "state");
    1020:	00001152 	andeq	r1, r0, r2, asr r1
    1024:	00001154 	andeq	r1, r0, r4, asr r1
    1028:	00500001 	subseq	r0, r0, r1
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	00000000 	andeq	r0, r0, r0
void utimer_add (address ut) {
    1030:	52000000 	andpl	r0, r0, #0
    1034:	56000011 			; <UNDEFINED> instruction: 0x56000011
		if (__pi_utims [i] == NULL)
    1038:	01000011 	tsteq	r0, r1, lsl r0
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	00005100 	andeq	r5, r0, r0, lsl #2
    1040:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "ut a");
    1044:	13680000 	cmnne	r8, #0
	__pi_utims [i] = ut;
    1048:	13760000 	cmnne	r6, #0
}
    104c:	00010000 	andeq	r0, r1, r0
    1050:	00137c50 	andseq	r7, r3, r0, asr ip
    1054:	00138f00 	andseq	r8, r3, r0, lsl #30
	*t = v;
    1058:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	00001374 	andeq	r1, r0, r4, ror r3
    1068:	00001376 	andeq	r1, r0, r6, ror r3
    106c:	00500001 	subseq	r0, r0, r1
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    107c:	01000000 	mrseq	r0, (UNDEF: 0)
    1080:	00005000 	andeq	r5, r0, r0
    1084:	00000000 	andeq	r0, r0, r0
    1088:	00010000 	andeq	r0, r1, r0
    108c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    109c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			if (!twaiting (i))
    10b0:	00540001 	subseq	r0, r4, r1
    10b4:	00000000 	andeq	r0, r0, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10b8:	01000000 	mrseq	r0, (UNDEF: 0)
    10bc:	00005000 	andeq	r5, r0, r0
	...
    10cc:	00010000 	andeq	r0, r1, r0
    10d0:	00000050 	andeq	r0, r0, r0, asr r0
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10e4:	00750002 	rsbseq	r0, r5, r2
	...
		for_all_tasks (i) {
    10f0:	00001bd0 	ldrdeq	r1, [r0], -r0
				d = i->Timer - znew;
    10f4:	00001bf0 	strdeq	r1, [r0], -r0
    10f8:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    10fc:	f700001b 			; <UNDEFINED> instruction: 0xf700001b
		if ((word)(__pi_mintk - znew) < min) 
    1100:	0100001b 	tsteq	r0, fp, lsl r0
    1104:	00005000 	andeq	r5, r0, r0
    1108:	00000000 	andeq	r0, r0, r0
	__pi_old = znew;
    110c:	1bda0000 	blne	ff681114 <_estack+0xdf67c114>
}
    1110:	1c000000 	stcne	0, cr0, [r0], {-0}
	TCI_RUN_DELAY_TIMER;
    1114:	00010000 	andeq	r0, r1, r0
}
    1118:	001c0054 	andseq	r0, ip, r4, asr r0
    111c:	001c0300 	andseq	r0, ip, r0, lsl #6
    1120:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void proceed (word state) {
    112c:	00001b9c 	muleq	r0, ip, fp
	prcdstate (__pi_curr, state);
    1130:	00001bac 	andeq	r1, r0, ip, lsr #23
    1134:	b2500001 	subslt	r0, r0, #1
	release;
    1138:	ba00001b 	blt	11ac <__pi_join+0x4>
    113c:	0100001b 	tsteq	r0, fp, lsl r0
void __pi_wait (aword event, word state) {
    1140:	00005000 	andeq	r5, r0, r0
	sint j = nevents (__pi_curr);
    1144:	00000000 	andeq	r0, r0, r0
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	1bb80000 	blne	fee01150 <_estack+0xdedfc150>
    114c:	1bc40000 	blne	ff101154 <_estack+0xdf0fc154>
    1150:	00010000 	andeq	r0, r1, r0
		syserror (ENEVENTS, "sw");
    1154:	00000053 	andeq	r0, r0, r3, asr r0
    1158:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
    115c:	001bba00 	andseq	fp, fp, r0, lsl #20
	incwait (__pi_curr);
    1160:	001bc000 	andseq	ip, fp, r0
	setestate (__pi_curr->Events [j], state, event);
    1164:	50000100 	andpl	r0, r0, r0, lsl #2
}
    1168:	00001bc0 	andeq	r1, r0, r0, asr #23
    116c:	00001bc4 	andeq	r1, r0, r4, asr #23
    1170:	00730002 	rsbseq	r0, r3, r2
	...
		for (j = 0; j < nevents (i); j++) {
    117c:	00001b5c 	andeq	r1, r0, ip, asr fp
    1180:	00001b6c 	andeq	r1, r0, ip, ror #22
    1184:	72500001 	subsvc	r0, r0, #1
    1188:	7a00001b 	bvc	11fc <delay+0x30>
			if (i->Events [j] . Event == event) {
    118c:	0100001b 	tsteq	r0, fp, lsl r0
    1190:	00005000 	andeq	r5, r0, r0
    1194:	00000000 	andeq	r0, r0, r0
				wakeupev (i, j);
    1198:	1b5c0000 	blne	17011a0 <__ccfg+0x16e11f8>
    119c:	1b6e0000 	blne	1b811a4 <__ccfg+0x1b611fc>
	for_all_tasks (i) {
    11a0:	00010000 	andeq	r0, r1, r0
}
    11a4:	001b7251 	andseq	r7, fp, r1, asr r2
aword __pi_join (aword pid, word st) {
    11a8:	001b9c00 	andseq	r9, fp, r0, lsl #24
	for_all_tasks (i) {
    11ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if ((aword)i == pid) {
    11b8:	00001b78 	andeq	r1, r0, r8, ror fp
			__pi_wait (pid, st);
    11bc:	00001b80 	andeq	r1, r0, r0, lsl #23
}
    11c0:	8a530001 	bhi	14c11cc <__ccfg+0x14a1224>
	for_all_tasks (i) {
    11c4:	9c00001b 	stcls	0, cr0, [r0], {27}
    11c8:	0100001b 	tsteq	r0, fp, lsl r0
void delay (word d, word state) {
    11cc:	00005300 	andeq	r5, r0, r0, lsl #6
	settstate (__pi_curr, state);
    11d0:	00000000 	andeq	r0, r0, r0
    11d4:	1b7a0000 	blne	1e811dc <__ccfg+0x1e61234>
    11d8:	1b880000 	blne	fe2011e0 <_estack+0xde1fc1e0>
    11dc:	00010000 	andeq	r0, r1, r0
	update_n_wake (d, YES);
    11e0:	001b8a50 	andseq	r8, fp, r0, asr sl
    11e4:	001b8c00 	andseq	r8, fp, r0, lsl #24
	__pi_curr->Timer = __pi_old + d;
    11e8:	50000100 	andpl	r0, r0, r0, lsl #2
    11ec:	00001b8c 	andeq	r1, r0, ip, lsl #23
	inctimer (__pi_curr);
    11f0:	00001b9c 	muleq	r0, ip, fp
    11f4:	00730002 	rsbseq	r0, r3, r2
	...
}
    1200:	00001ac0 	andeq	r1, r0, r0, asr #21
	if (fun == NULL)
    1204:	00001ada 	ldrdeq	r1, [r0], -sl
		return (int) __pi_curr;
    1208:	da500001 	ble	1401214 <__ccfg+0x13e126c>
    120c:	e000001a 	and	r0, r0, sl, lsl r0
	for_all_tasks (i)
    1210:	0100001a 	tsteq	r0, sl, lsl r0
}
    1214:	1ae05500 	bne	ff81661c <_estack+0xdf81161c>
		if (i->code == fun)
    1218:	1aea0000 	bne	ffa81220 <_estack+0xdfa7c220>
	for_all_tasks (i)
    121c:	00010000 	andeq	r0, r1, r0
    1220:	001aea50 	andseq	lr, sl, r0, asr sl
    1224:	001b5c00 	andseq	r5, fp, r0, lsl #24
int __pi_strlen (const char *s) {
    1228:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	for (i = 0; *(s+i) != '\0'; i++);
    1234:	00001ac0 	andeq	r1, r0, r0, asr #21
	while (n--)
    1238:	00001ada 	ldrdeq	r1, [r0], -sl
    123c:	da510001 	ble	1441248 <__ccfg+0x14212a0>
		*dest++ = *src++;
    1240:	e000001a 	and	r0, r0, sl, lsl r0
    1244:	0100001a 	tsteq	r0, sl, lsl r0
    1248:	1ae05700 	bne	ff816e50 <_estack+0xdf811e50>
	while (n--)
    124c:	1aea0000 	bne	ffa81254 <_estack+0xdfa7c254>
}
    1250:	00010000 	andeq	r0, r1, r0
		*dest++ = c;
    1254:	001aea51 	andseq	lr, sl, r1, asr sl
void adddevfunc (devreqfun_t rf, int loc) {
    1258:	001b5c00 	andseq	r5, fp, r0, lsl #24
		syserror (EREQPAR, "addv");
    125c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
	if (ioreq [loc] != NULL)
    1268:	00001ac0 	andeq	r1, r0, r0, asr #21
		syserror (ERESOURCE, "addv");
    126c:	00001ada 	ldrdeq	r1, [r0], -sl
	ioreq [loc] = rf;
    1270:	da520001 	ble	148127c <__ccfg+0x14612d4>
}
    1274:	e000001a 	and	r0, r0, sl, lsl r0
    1278:	0100001a 	tsteq	r0, sl, lsl r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	1ae05400 	bne	ff816284 <_estack+0xdf811284>
    1280:	1aea0000 	bne	ffa81288 <_estack+0xdfa7c288>
    1284:	00010000 	andeq	r0, r1, r0
    1288:	001aea52 	andseq	lr, sl, r2, asr sl
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128c:	001b5c00 	andseq	r5, fp, r0, lsl #24
    1290:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		syserror (ENODEVICE, "io");
    129c:	00001b1a 	andeq	r1, r0, sl, lsl fp
	if (len == 0)
    12a0:	00001b32 	andeq	r1, r0, r2, lsr fp
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	32500001 	subscc	r0, r0, #1
    12a8:	3700001b 	smladcc	r0, fp, r0, r0
	if (ret >= 0)
    12ac:	0100001b 	tsteq	r0, fp, lsl r0
	if (ret == -1) {
    12b0:	00005100 	andeq	r5, r0, r0, lsl #2
    12b4:	00000000 	andeq	r0, r0, r0
		if (retry == WNONE)
    12b8:	1b380000 	blne	e012c0 <__ccfg+0xde1318>
		iowait (dev, operation, retry);
    12bc:	1b470000 	blne	11c12c4 <__ccfg+0x11a131c>
    12c0:	00010000 	andeq	r0, r1, r0
    12c4:	00000050 	andeq	r0, r0, r0, asr r0
			release;
    12c8:	00000000 	andeq	r0, r0, r0
	if (ret == -2) {
    12cc:	001a7000 	andseq	r7, sl, r0
		if (retry != WNONE) {
    12d0:	001a7e00 	andseq	r7, sl, r0, lsl #28
    12d4:	50000100 	andpl	r0, r0, r0, lsl #2
			iowait (dev, operation, retry);
    12d8:	00001a7e 	andeq	r1, r0, lr, ror sl
    12dc:	00001aac 	andeq	r1, r0, ip, lsr #21
			(ioreq [dev]) (NONE, buf, len);
    12e0:	00540001 	subseq	r0, r4, r1
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	70000000 	andvc	r0, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    12ec:	8400001a 	strhi	r0, [r0], #-26	; 0xffffffe6
    12f0:	0100001a 	tsteq	r0, sl, lsl r0
    12f4:	1a885100 	bne	fe2156fc <_estack+0xde2106fc>
}
    12f8:	1a970000 	bne	fe5c1300 <_estack+0xde5bc300>
	if (retry != WNONE) {
    12fc:	00010000 	andeq	r0, r1, r0
		delay (-ret - 2, retry);
    1300:	00000051 	andeq	r0, r0, r1, asr r0
    1304:	00000000 	andeq	r0, r0, r0
    1308:	001a7000 	andseq	r7, sl, r0
    130c:	001a8400 	andseq	r8, sl, r0, lsl #8
		release;
    1310:	52000100 	andpl	r0, r0, #0, 2
    1314:	00001a88 	andeq	r1, r0, r8, lsl #21
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1318:	00001a97 	muleq	r0, r7, sl
    131c:	00520001 	subseq	r0, r2, r1
    1320:	00000000 	andeq	r0, r0, r0
    1324:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1328:	a200001a 	andge	r0, r0, #26
		syserror (ERESOURCE, "mal1");
    132c:	0100001a 	tsteq	r0, sl, lsl r0
    1330:	1aa25000 	bne	fe895338 <_estack+0xde890338>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1334:	1aa60000 	bne	fe98133c <_estack+0xde97c33c>
    1338:	00070000 	andeq	r0, r7, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133c:	24320074 	ldrtcs	r0, [r2], #-116	; 0xffffff8c
	m_size (mpools [0]) = mlen - m_hdrlen;
    1340:	a6220072 			; <UNDEFINED> instruction: 0xa6220072
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1344:	c000001a 	andgt	r0, r0, sl, lsl r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1348:	0100001a 	tsteq	r0, sl, lsl r0
    134c:	00005000 	andeq	r5, r0, r0
	...
}
    135c:	00010000 	andeq	r0, r1, r0
    1360:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		m_size (ch) ^= MALLOC_UMASK;
    1384:	00500001 	subseq	r0, r0, r1
	mcfree [MA_NP] += m_size (ch);
    1388:	00000000 	andeq	r0, r0, r0
	QFREE;
    138c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (mevent [MA_NP] . nwait) {
    1390:	00005500 	andeq	r5, r0, r0, lsl #10
	...
}
    13a0:	00010000 	andeq	r0, r1, r0
    13a4:	00000051 	andeq	r0, r0, r1, asr r0
    13a8:	00000000 	andeq	r0, r0, r0
    13ac:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	syserror (EREQPAR, "kpi");
    13c0:	00500001 	subseq	r0, r0, r1
    13c4:	00000000 	andeq	r0, r0, r0
		if ((aword)i == pid) {
    13c8:	01000000 	mrseq	r0, (UNDEF: 0)
    13cc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
			if (i == __pi_curr)
    13dc:	00010000 	andeq	r0, r1, r0
    13e0:	00000050 	andeq	r0, r0, r0, asr r0
				release;
    13e4:	00000000 	andeq	r0, r0, r0
				j->Next = i->Next;
    13e8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    13fc:	00510001 	subseq	r0, r1, r1
	if (size < 8)
    1400:	00000000 	andeq	r0, r0, r0
		_size = 2;
    1404:	01000000 	mrseq	r0, (UNDEF: 0)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1408:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		if (mevent [MA_NP] . nfail != 255)
    1418:	00010000 	andeq	r0, r1, r0
    141c:	00000050 	andeq	r0, r0, r0, asr r0
			mevent [MA_NP] . nfail ++;
    1420:	00000000 	andeq	r0, r0, r0
		mnfree [MA_NP] = 0;
    1424:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			syserror (EMALLOC, "malc");
    1438:	00510001 	subseq	r0, r1, r1
		if (m_size (chunk) >= _size)
    143c:	00000000 	andeq	r0, r0, r0
    1440:	01000000 	mrseq	r0, (UNDEF: 0)
		chunk = m_nextp (chunk)) {
    1444:	00005100 	andeq	r5, r0, r0, lsl #2
		m_setnextp (cc, m_nextp (chunk));
    1448:	00000000 	andeq	r0, r0, r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144c:	19a80000 	stmibne	r8!, {}	; <UNPREDICTABLE>
    1450:	19c00000 	stmibne	r0, {}^	; <UNPREDICTABLE>
			m_size (chunk) = _size;
    1454:	00010000 	andeq	r0, r1, r0
			cc = chunk + _size + m_hdrlen;
    1458:	0019c650 	andseq	ip, r9, r0, asr r6
    145c:	0019d000 	andseq	sp, r9, r0
			m_size (cc) = waste - m_hdrlen;
    1460:	50000100 	andpl	r0, r0, r0, lsl #2
			QFREE;
    1464:	000019d2 	ldrdeq	r1, [r0], -r2
		mevent [MA_NP] . nfail = 0;
    1468:	000019e0 	andeq	r1, r0, r0, ror #19
		mcfree [MA_NP] -= m_size (chunk);
    146c:	e6500001 	ldrb	r0, [r0], -r1
    1470:	e8000019 	stmda	r0, {r0, r3, r4}
    1474:	01000019 	tsteq	r0, r9, lsl r0
    1478:	19f25000 	ldmibne	r2!, {ip, lr}^
		m_size (chunk) |= MALLOC_UMASK;
    147c:	19f40000 	ldmibne	r4!, {}^	; <UNPREDICTABLE>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1480:	00010000 	andeq	r0, r1, r0
		m_size (chunk) |= MALLOC_UMASK;
    1484:	00000050 	andeq	r0, r0, r0, asr r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1488:	00000000 	andeq	r0, r0, r0
}
    148c:	0019a800 	andseq	sl, r9, r0, lsl #16
    1490:	0019e200 	andseq	lr, r9, r0, lsl #4
    1494:	51000100 	mrspl	r0, (UNDEF: 16)
    1498:	000019e6 	andeq	r1, r0, r6, ror #19
    149c:	000019f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    14a0:	f2510001 	vhadd.s16	d16, d1, d1
    14a4:	08000019 	stmdaeq	r0, {r0, r3, r4}
aword __pi_fork (fsmcode func, aword data) {
    14a8:	0100001a 	tsteq	r0, sl, lsl r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14ac:	00005100 	andeq	r5, r0, r0, lsl #2
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	19a80000 	stmibne	r8!, {}	; <UNPREDICTABLE>
		if ((j = __PCB) == NULL)
    14b8:	19e50000 	stmibne	r5!, {}^	; <UNPREDICTABLE>
	i->Next = NULL;
    14bc:	00010000 	andeq	r0, r1, r0
	i->data = data;
    14c0:	0019e652 	andseq	lr, r9, r2, asr r6
		if ((j = __PCB) == NULL)
    14c4:	0019f100 	andseq	pc, r9, r0, lsl #2
}
    14c8:	52000100 	andpl	r0, r0, #0, 2
			for (; j->Next != NULL; j = j->Next);
    14cc:	000019f2 	strdeq	r1, [r0], -r2
    14d0:	00001a08 	andeq	r1, r0, r8, lsl #20
	return (aword) i;
    14d4:	00520001 	subseq	r0, r2, r1
    14d8:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait != 255)
    14dc:	c0000000 	andgt	r0, r0, r0
    14e0:	c4000019 	strgt	r0, [r0], #-25	; 0xffffffe7
    14e4:	01000019 	tsteq	r0, r9, lsl r0
		mevent [MA_NP] . nwait ++;
    14e8:	00005000 	andeq	r5, r0, r0
	...
void diag (const char *mess, ...) {
    14f8:	00010000 	andeq	r0, r1, r0
    14fc:	00000050 	andeq	r0, r0, r0, asr r0
	diag_disable_int (a, is);
    1500:	00000000 	andeq	r0, r0, r0
    1504:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	dgout ('\r');
    1518:	00500001 	subseq	r0, r0, r1
	dgout ('\n');
    151c:	00000000 	andeq	r0, r0, r0
    1520:	01000000 	mrseq	r0, (UNDEF: 0)
    1524:	00005400 	andeq	r5, r0, r0, lsl #8
	...
}
    1534:	00010000 	andeq	r0, r1, r0
    1538:	00000051 	andeq	r0, r0, r1, asr r0
	...
			if (*mess == 'l') {
    1548:	52000100 	andpl	r0, r0, #0, 2
	...
				val = va_arg (ap, lword);
    1554:	00550001 	subseq	r0, r5, r1
	...
			switch (*mess) {
    1564:	01000000 	mrseq	r0, (UNDEF: 0)
    1568:	00005000 	andeq	r5, r0, r0
				dgout ('%');
    156c:	00000000 	andeq	r0, r0, r0
    1570:	00010000 	andeq	r0, r1, r0
				dgout (*mess);
    1574:	00000054 	andeq	r0, r0, r4, asr r0
	...
					i += 4;
    1584:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					dgout (v);
    1590:	00500001 	subseq	r0, r0, r1
	...
					d /= 10;
    15a0:	01000000 	mrseq	r0, (UNDEF: 0)
				if ((val >> (bc - 1)) & 1) {
    15a4:	00005200 	andeq	r5, r0, r0, lsl #4
    15a8:	00000000 	andeq	r0, r0, r0
					dgout ('-');
    15ac:	00010000 	andeq	r0, r1, r0
    15b0:	00000055 	andeq	r0, r0, r5, asr r0
						val |= 0xffff0000;
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	0018c000 	andseq	ip, r8, r0
    15bc:	0018d600 	andseq	sp, r8, r0, lsl #12
				d = (bc == 16) ? 10000 : 1000000000;
    15c0:	50000100 	andpl	r0, r0, r0, lsl #2
    15c4:	000018dc 	ldrdeq	r1, [r0], -ip
    15c8:	000018fc 	strdeq	r1, [r0], -ip
					v = (word) (val / d);
    15cc:	00500001 	subseq	r0, r0, r1
					if (v || d == 1) break;
    15d0:	00000000 	andeq	r0, r0, r0
    15d4:	c0000000 	andgt	r0, r0, r0
					d /= 10;
    15d8:	d6000018 			; <UNDEFINED> instruction: 0xd6000018
				d = (bc == 16) ? 10000 : 1000000000;
    15dc:	01000018 	tsteq	r0, r8, lsl r0
					dgout (v + '0');
    15e0:	18dc5100 	ldmne	ip, {r8, ip, lr}^
    15e4:	18f40000 	ldmne	r4!, {}^	; <UNPREDICTABLE>
    15e8:	00010000 	andeq	r0, r1, r0
					d /= 10;
    15ec:	0018f651 	andseq	pc, r8, r1, asr r6	; <UNPREDICTABLE>
					val = val - (v * d);
    15f0:	00190200 	andseq	r0, r9, r0, lsl #4
					if (d == 0) break;
    15f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				if (bc == 16)
    1600:	000018c0 	andeq	r1, r0, r0, asr #17
				d = (bc == 16) ? 10000 : 1000000000;
    1604:	000018d6 	ldrdeq	r1, [r0], -r6
					val &= 0xffff;
    1608:	d6520001 	ldrble	r0, [r2], -r1
					dgout (*s);
    160c:	dc000018 	stcle	0, cr0, [r0], {24}
					s++;
    1610:	01000018 	tsteq	r0, r8, lsl r0
				while (*s != '\0') {
    1614:	18dc5400 	ldmne	ip, {sl, ip, lr}^
    1618:	18e80000 	stmiane	r8!, {}^	; <UNPREDICTABLE>
			dgout (*mess++);
    161c:	00010000 	andeq	r0, r1, r0
    1620:	0018e852 	andseq	lr, r8, r2, asr r8
    1624:	00190e00 	andseq	r0, r9, r0, lsl #28
    1628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    162c:	00001914 	andeq	r1, r0, r4, lsl r9
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1630:	0000191a 	andeq	r1, r0, sl, lsl r9
    1634:	1e540001 	cdpne	0, 5, cr0, cr4, cr1, {0}
    1638:	32000019 	andcc	r0, r0, #25
    163c:	01000019 	tsteq	r0, r9, lsl r0
	^ entropy
    1640:	00005400 	andeq	r5, r0, r0, lsl #8
}
    1644:	00000000 	andeq	r0, r0, r0
    1648:	18c00000 	stmiane	r0, {}^	; <UNPREDICTABLE>
    164c:	18ce0000 	stmiane	lr, {}^	; <UNPREDICTABLE>
    1650:	00010000 	andeq	r0, r1, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1654:	00000053 	andeq	r0, r0, r3, asr r0
	word cs = size + hblenb;
    1658:	00000000 	andeq	r0, r0, r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165c:	00193c00 	andseq	r3, r9, r0, lsl #24
    1660:	00194800 	andseq	r4, r9, r0, lsl #16
	p -> length = size;
    1664:	50000100 	andpl	r0, r0, r0, lsl #2
}
    1668:	0000194e 	andeq	r1, r0, lr, asr #18
	if (p->attributes.b.queued) {
    166c:	00001966 	andeq	r1, r0, r6, ror #18
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1670:	00500001 	subseq	r0, r0, r1
    1674:	00000000 	andeq	r0, r0, r0
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1678:	04000000 	streq	r0, [r0], #-0
		p->attributes.b.queued = 0;
    167c:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
    1680:	01000019 	tsteq	r0, r9, lsl r0
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1684:	19145000 	ldmdbne	r4, {ip, lr}
	deq (p);	// Remove from queue
    1688:	19190000 	ldmdbne	r9, {}	; <UNPREDICTABLE>
}
    168c:	00010000 	andeq	r0, r1, r0
	tfree ((address)p);
    1690:	00191e50 	andseq	r1, r9, r0, asr lr
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1694:	00192c00 	andseq	r2, r9, r0, lsl #24
    1698:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (q_empty (q))
    16ac:	00500001 	subseq	r0, r0, r1
		trigger (q);
    16b0:	00000000 	andeq	r0, r0, r0
	if (p->attributes.b.urgent) {
    16b4:	01000000 	mrseq	r0, (UNDEF: 0)
		p->u.bqueue.next = q->next;
    16b8:	00005000 	andeq	r5, r0, r0
		p->u.bqueue.prev = q;
    16bc:	00000000 	andeq	r0, r0, r0
		q->next->prev = (qitem_t*) p;
    16c0:	00010000 	andeq	r0, r1, r0
	p->attributes.b.queued = 1;
    16c4:	00000050 	andeq	r0, r0, r0, asr r0
    16c8:	00000000 	andeq	r0, r0, r0
}
    16cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e0:	00510001 	subseq	r0, r1, r1
	deq (p);	// Soft dequeue, timer and hook left intact
    16e4:	00000000 	andeq	r0, r0, r0
	switch (dv) {
    16e8:	01000000 	mrseq	r0, (UNDEF: 0)
    16ec:	00005100 	andeq	r5, r0, r0, lsl #2
    16f0:	00000000 	andeq	r0, r0, r0
    16f4:	00010000 	andeq	r0, r1, r0
			p->attributes.b.urgent = 1;
    16f8:	00000051 	andeq	r0, r0, r1, asr r0
    16fc:	00000000 	andeq	r0, r0, r0
			verify_ses (p, "dispose ses");
    1700:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			verify_phy (p, "dispose phy");
    1714:	00540001 	subseq	r0, r4, r1
    1718:	00000000 	andeq	r0, r0, r0
}
    171c:	0a000000 	beq	1724 <dispose+0x44>
			enq (oqueues [p->attributes.b.phys], p);
    1720:	32007000 	andcc	r7, r0, #0
			p->attributes.b.urgent = 1;
    1724:	05640324 	strbeq	r0, [r4, #-804]!	; 0xfffffcdc
    1728:	00222000 	eoreq	r2, r2, r0
			verify_phy (p, "dispose phy");
    172c:	00000000 	andeq	r0, r0, r0
    1730:	01000000 	mrseq	r0, (UNDEF: 0)
    1734:	00005400 	andeq	r5, r0, r0, lsl #8
    1738:	00000000 	andeq	r0, r0, r0
    173c:	000a0000 	andeq	r0, sl, r0
    1740:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
			enq (oqueues [p->attributes.b.phys], p);
    1744:	00056403 	andeq	r6, r5, r3, lsl #8
    1748:	00002220 	andeq	r2, r0, r0, lsr #4
}
    174c:	00000000 	andeq	r0, r0, r0
			rlp (p);
    1750:	00010000 	andeq	r0, r1, r0
}
    1754:	00000054 	andeq	r0, r0, r4, asr r0
    1758:	00000000 	andeq	r0, r0, r0
    175c:	70000a00 	andvc	r0, r0, r0, lsl #20
    1760:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1764:	20000564 	andcs	r0, r0, r4, ror #10
    1768:	00000022 	andeq	r0, r0, r2, lsr #32
	...
	if (b->attributes.b.outgoing) {
    1778:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		verify_ses (b, "tcv02");
    1784:	00550001 	subseq	r0, r5, r1
	...
		verify_plg (b, tcv_out, "tcv03");
    1794:	01000000 	mrseq	r0, (UNDEF: 0)
    1798:	00005400 	andeq	r5, r0, r0, lsl #8
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	00010000 	andeq	r0, r1, r0
    17a4:	00000054 	andeq	r0, r0, r4, asr r0
	...
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		rlp (b);
    17c0:	00500001 	subseq	r0, r0, r1
}
    17c4:	00000000 	andeq	r0, r0, r0
		rlp (b);
    17c8:	01000000 	mrseq	r0, (UNDEF: 0)
    17cc:	00005000 	andeq	r5, r0, r0
	...
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17dc:	00010000 	andeq	r0, r1, r0
    17e0:	00000055 	andeq	r0, r0, r5, asr r0
	...
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1804:	00500001 	subseq	r0, r0, r1
			syserror (ENODEVICE, "tcv04");
    1808:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "tcv05");
    180c:	01000000 	mrseq	r0, (UNDEF: 0)
	attp.b.outgoing = 1;
    1810:	00005000 	andeq	r5, r0, r0
    1814:	00000000 	andeq	r0, r0, r0
    1818:	00010000 	andeq	r0, r1, r0
    181c:	00000050 	andeq	r0, r0, r0, asr r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1820:	00000000 	andeq	r0, r0, r0
		if (descriptors [fd] == NULL)
    1824:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1838:	00510001 	subseq	r0, r1, r1
    183c:	00000000 	andeq	r0, r0, r0
	s->attpattern.b.session = fd;
    1840:	01000000 	mrseq	r0, (UNDEF: 0)
    1844:	00005100 	andeq	r5, r0, r0, lsl #2
	descriptors [fd] = s;
    1848:	00000000 	andeq	r0, r0, r0
	q_init (&(s->rqueue));
    184c:	00010000 	andeq	r0, r1, r0
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1850:	00000051 	andeq	r0, r0, r1, asr r0
	...
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1860:	53000100 	movwpl	r0, #256	; 0x100
	...
	descriptors [fd] = s;
    186c:	0070000a 	rsbseq	r0, r0, sl
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1870:	64032432 	strvs	r2, [r3], #-1074	; 0xfffffbce
    1874:	22200005 	eorcs	r0, r0, #5
	...
		syserror (EMALLOC, "tcv05");
    1880:	00530001 	subseq	r0, r3, r1
    1884:	00000000 	andeq	r0, r0, r0
    1888:	0a000000 	beq	1890 <tcv_open+0xb4>
    188c:	32007000 	andcc	r7, r0, #0
    1890:	05640324 	strbeq	r0, [r4, #-804]!	; 0xfffffcdc
    1894:	00222000 	eoreq	r2, r2, r0
    1898:	00000000 	andeq	r0, r0, r0
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    189c:	01000000 	mrseq	r0, (UNDEF: 0)
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a0:	00005300 	andeq	r5, r0, r0, lsl #6
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	000a0000 	andeq	r0, sl, r0
	plugins [ord] = pl;
    18ac:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	return 0;
    18b0:	00056403 	andeq	r6, r5, r3, lsl #8
		return ERROR;
    18b4:	00002220 	andeq	r2, r0, r0, lsr #4
	...
								Boolean urg) {
    18c4:	00010000 	andeq	r0, r1, r0
    18c8:	00000050 	andeq	r0, r0, r0, asr r0
	verify_fds (fd, "tcv16");
    18cc:	00000000 	andeq	r0, r0, r0
    18d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	verify_pld (s, tcv_frm, "tcv17");
    18e4:	00530001 	subseq	r0, r3, r1
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	01000000 	mrseq	r0, (UNDEF: 0)
    18f0:	00005300 	andeq	r5, r0, r0, lsl #6
    18f4:	00000000 	andeq	r0, r0, r0
	ptrs.head = (word) fd;
    18f8:	00010000 	andeq	r0, r1, r0
	ptrs.tail = (word) urg;
    18fc:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if (state != WNONE) {
    190c:	52000100 	andpl	r0, r0, #0, 2
	...
			when (eid, state);
    1918:	00520001 	subseq	r0, r2, r1
			release;
    191c:	00000000 	andeq	r0, r0, r0
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1920:	01000000 	mrseq	r0, (UNDEF: 0)
    1924:	00005200 	andeq	r5, r0, r0, lsl #4
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1928:	00000000 	andeq	r0, r0, r0
    192c:	00010000 	andeq	r0, r1, r0
    1930:	00000052 	andeq	r0, r0, r2, asr r0
	...
		if (state != WNONE) {
    1940:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		b->attributes.b.urgent = 1;
    1954:	00510001 	subseq	r0, r1, r1
    1958:	00000000 	andeq	r0, r0, r0
	b->u.pointers.head = ptrs.head;
    195c:	01000000 	mrseq	r0, (UNDEF: 0)
	b->u.pointers.tail = length;
    1960:	00005100 	andeq	r5, r0, r0, lsl #2
	return (address) (b + 1);
    1964:	00000000 	andeq	r0, r0, r0
    1968:	00010000 	andeq	r0, r1, r0
    196c:	00000051 	andeq	r0, r0, r1, asr r0
    1970:	00000000 	andeq	r0, r0, r0
    1974:	51000100 	mrspl	r0, (UNDEF: 16)
	...
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	00510001 	subseq	r0, r1, r1
	...
	verify_fph (phy, "tcv23");
    1990:	01000000 	mrseq	r0, (UNDEF: 0)
    1994:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	return (physical [phy]) (opt, arg);
    19a4:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19a8:	00000054 	andeq	r0, r0, r4, asr r0
	if (opt < 0) {
    19ac:	00000000 	andeq	r0, r0, r0
		if (fd < 0)
    19b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if ((p = plugins [fd]) == NULL)
    19bc:	00540001 	subseq	r0, r4, r1
	...
		return physinfo [fd];
    19cc:	01000000 	mrseq	r0, (UNDEF: 0)
    19d0:	00005000 	andeq	r5, r0, r0
	verify_fds (fd, "tcv22");
    19d4:	00000000 	andeq	r0, r0, r0
    19d8:	00010000 	andeq	r0, r1, r0
    19dc:	00000050 	andeq	r0, r0, r0, asr r0
    19e0:	00000000 	andeq	r0, r0, r0
    19e4:	71000700 	tstvc	r0, r0, lsl #14
}
    19e8:	72243200 	eorvc	r3, r4, #0, 4
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19ec:	00002200 	andeq	r2, r0, r0, lsl #4
    19f0:	00000000 	andeq	r0, r0, r0
			return 0;
    19f4:	00010000 	andeq	r0, r1, r0
    19f8:	00000050 	andeq	r0, r0, r0, asr r0
    19fc:	00000000 	andeq	r0, r0, r0
    1a00:	00189c00 	andseq	r9, r8, r0, lsl #24
    1a04:	0018b200 	andseq	fp, r8, r0, lsl #4
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a08:	50000100 	andpl	r0, r0, r0, lsl #2
    1a0c:	000018b4 			; <UNDEFINED> instruction: 0x000018b4
	if (dsp != TCV_DSP_PASS) {
    1a10:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
		if (ses == NONE)
    1a14:	00500001 	subseq	r0, r0, r1
	...
		verify_fds (ses, "tcv27");
    1a24:	01000000 	mrseq	r0, (UNDEF: 0)
    1a28:	00005000 	andeq	r5, r0, r0
    1a2c:	00000000 	andeq	r0, r0, r0
		if ((p = apb (size)) != NULL) {
    1a30:	00010000 	andeq	r0, r1, r0
    1a34:	00000050 	andeq	r0, r0, r0, asr r0
	...
			p->attributes = descriptors [ses] -> attpattern;
    1a44:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			return (address)(p + 1);
    1a50:	00550001 	subseq	r0, r5, r1
    1a54:	00000000 	andeq	r0, r0, r0
	if ((p = apb (size)) != NULL)
    1a58:	01000000 	mrseq	r0, (UNDEF: 0)
    1a5c:	00005100 	andeq	r5, r0, r0, lsl #2
		return (address)(p + 1);
    1a60:	00000000 	andeq	r0, r0, r0
    1a64:	00010000 	andeq	r0, r1, r0
    1a68:	00000055 	andeq	r0, r0, r5, asr r0
    1a6c:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1a7c:	00550001 	subseq	r0, r5, r1
	...
	physinfo [phy] = info;
    1a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a90:	00005600 	andeq	r5, r0, r0, lsl #12
	...
		syserror (EMALLOC, "tcv29");
    1aa0:	00010000 	andeq	r0, r1, r0
    1aa4:	00000050 	andeq	r0, r0, r0, asr r0
	q_init (q);
    1aa8:	00000000 	andeq	r0, r0, r0
}
    1aac:	0017dc00 	andseq	sp, r7, r0, lsl #24
    1ab0:	00180a00 	andseq	r0, r8, r0, lsl #20
    1ab4:	50000100 	andpl	r0, r0, r0, lsl #2
    1ab8:	00001810 	andeq	r1, r0, r0, lsl r8
    1abc:	00001830 	andeq	r1, r0, r0, lsr r8
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac0:	70500001 	subsvc	r0, r0, r1
	verify_fph (phy, "tcv30");
    1ac4:	72000018 	andvc	r0, r0, #24
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac8:	01000018 	tsteq	r0, r8, lsl r0
    1acc:	00005000 	andeq	r5, r0, r0
	verify_fph (phy, "tcv30");
    1ad0:	00000000 	andeq	r0, r0, r0
    1ad4:	17dc0000 	ldrbne	r0, [ip, r0]
    1ad8:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1adc:	00010000 	andeq	r0, r1, r0
    1ae0:	00180c51 	andseq	r0, r8, r1, asr ip
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae4:	00181000 	andseq	r1, r8, r0
    1ae8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
		if (plugins [plg] == NULL)
    1aec:	00001810 	andeq	r1, r0, r0, lsl r8
    1af0:	00001830 	andeq	r1, r0, r0, lsr r8
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af4:	30510001 	subscc	r0, r1, r1
}
    1af8:	3c000018 	stccc	0, cr0, [r0], {24}
    1afc:	01000018 	tsteq	r0, r8, lsl r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b00:	18405700 	stmdane	r0, {r8, r9, sl, ip, lr}^
    1b04:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    1b08:	00010000 	andeq	r0, r1, r0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b0c:	00187057 	andseq	r7, r8, r7, asr r0
    1b10:	00187500 	andseq	r7, r8, r0, lsl #10
    1b14:	51000100 	mrspl	r0, (UNDEF: 16)
    1b18:	00001875 	andeq	r1, r0, r5, ror r8
    1b1c:	0000189c 	muleq	r0, ip, r8
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b20:	00570001 	subseq	r0, r7, r1
	len -= (ap.head + ap.tail);
    1b24:	00000000 	andeq	r0, r0, r0
    1b28:	dc000000 	stcle	0, cr0, [r0], {-0}
    1b2c:	0c000017 	stceq	0, cr0, [r0], {23}
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b30:	02000018 	andeq	r0, r0, #24
    1b34:	10789100 	rsbsne	r9, r8, r0, lsl #2
    1b38:	30000018 	andcc	r0, r0, r8, lsl r0
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b3c:	02000018 	andeq	r0, r0, #24
    1b40:	40789100 	rsbsmi	r9, r8, r0, lsl #2
    1b44:	4c000018 	stcmi	0, cr0, [r0], {24}
	return 1;
    1b48:	02000018 	andeq	r0, r0, #24
    1b4c:	70789100 	rsbsvc	r9, r8, r0, lsl #2
    1b50:	9c000018 	stcls	0, cr0, [r0], {24}
    1b54:	02000018 	andeq	r0, r0, #24
    1b58:	00789100 	rsbseq	r9, r8, r0, lsl #2
	verify_fph (phy, "tcv32");
    1b5c:	00000000 	andeq	r0, r0, r0
    1b60:	24000000 	strcs	r0, [r0], #-0
    1b64:	34000018 	strcc	r0, [r0], #-24	; 0xffffffe8
    1b68:	01000018 	tsteq	r0, r8, lsl r0
    1b6c:	18405600 	stmdane	r0, {r9, sl, ip, lr}^
    1b70:	189c0000 	ldmne	ip, {}	; <UNPREDICTABLE>
	oq = oqueues [phy];
    1b74:	00010000 	andeq	r0, r1, r0
	b = q_first (oq);
    1b78:	00000056 	andeq	r0, r0, r6, asr r0
	if (q_end (b, oq)) {
    1b7c:	00000000 	andeq	r0, r0, r0
	*len = b->length;
    1b80:	00184000 	andseq	r4, r8, r0
	deq (b);	// Dequeue the packet ...
    1b84:	00185a00 	andseq	r5, r8, r0, lsl #20
}
    1b88:	50000100 	andpl	r0, r0, r0, lsl #2
		return NULL;
    1b8c:	0000185a 	andeq	r1, r0, sl, asr r8
    1b90:	0000185e 	andeq	r1, r0, lr, asr r8
    1b94:	5e540001 	cdppl	0, 5, cr0, cr4, cr1, {0}
    1b98:	62000018 	andvs	r0, r0, #24
	verify_fph (phy, "tcv33");
    1b9c:	01000018 	tsteq	r0, r8, lsl r0
    1ba0:	18625000 	stmdane	r2!, {ip, lr}^
    1ba4:	18700000 	ldmdane	r0!, {}^	; <UNPREDICTABLE>
    1ba8:	00010000 	andeq	r0, r1, r0
    1bac:	00187654 	andseq	r7, r8, r4, asr r6
    1bb0:	00187e00 	andseq	r7, r8, r0, lsl #28
	oq = oqueues [phy];
    1bb4:	50000100 	andpl	r0, r0, r0, lsl #2
	b = q_first (oq);
    1bb8:	0000187e 	andeq	r1, r0, lr, ror r8
		return NULL;
    1bbc:	0000189c 	muleq	r0, ip, r8
	return (address)(b + 1);
    1bc0:	00540001 	subseq	r0, r4, r1
}
    1bc4:	00000000 	andeq	r0, r0, r0
    1bc8:	6c000000 	stcvs	0, cr0, [r0], {-0}
    1bcc:	92000017 	andls	r0, r0, #23
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd0:	01000017 	tsteq	r0, r7, lsl r0
	verify_plg (b, tcv_xmt, "tcv34");
    1bd4:	17965000 	ldrne	r5, [r6, r0]
	hblock_t *b = header (pkt);
    1bd8:	17b30000 	ldrne	r0, [r3, r0]!
	verify_plg (b, tcv_xmt, "tcv34");
    1bdc:	00010000 	andeq	r0, r1, r0
    1be0:	0017c050 	andseq	ip, r7, r0, asr r0
    1be4:	0017c200 	andseq	ip, r7, r0, lsl #4
    1be8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1bf4:	00001776 	andeq	r1, r0, r6, ror r7
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf8:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
}
    1bfc:	bc540001 	mrrclt	0, 0, r0, r4, cr1
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c00:	bf000017 	svclt	0x00000017
    1c04:	01000017 	tsteq	r0, r7, lsl r0
    1c08:	17c05000 	strbne	r5, [r0, r0]
}
    1c0c:	17c60000 	strbne	r0, [r6, r0]
    while(1)
    1c10:	00010000 	andeq	r0, r1, r0
{
    1c14:	0017c654 	andseq	ip, r7, r4, asr r6
    SetupTrimDevice();
    1c18:	0017c900 	andseq	ip, r7, r0, lsl #18
    pui32Src = &_etext;
    1c1c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    1c28:	00001654 	andeq	r1, r0, r4, asr r6
    1c2c:	0000165a 	andeq	r1, r0, sl, asr r6
    1c30:	00500001 	subseq	r0, r0, r1
    1c34:	00000000 	andeq	r0, r0, r0
   main();
    1c38:	84000000 	strhi	r0, [r0], #-0
    FaultISR();
    1c3c:	91000016 	tstls	r0, r6, lsl r0
        *pui32Dest++ = *pui32Src++;
    1c40:	01000016 	tsteq	r0, r6, lsl r0
    1c44:	00005000 	andeq	r5, r0, r0
    1c48:	00000000 	andeq	r0, r0, r0
    1c4c:	16700000 	ldrbtne	r0, [r0], -r0
    1c50:	16820000 	strne	r0, [r2], r0
    1c54:	00010000 	andeq	r0, r1, r0
    1c58:	00000050 	andeq	r0, r0, r0, asr r0
    1c5c:	00000000 	andeq	r0, r0, r0
static byte get_byte () {
    1c60:	00169400 	andseq	r9, r6, r0, lsl #8
    1c64:	0016a200 	andseq	sl, r6, r0, lsl #4
    1c68:	50000100 	andpl	r0, r0, r0, lsl #2
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c6c:	000016a2 	andeq	r1, r0, r2, lsr #13
    1c70:	000016a8 	andeq	r1, r0, r8, lsr #13
		if (ee_inp)
    1c74:	a8550001 	ldmdage	r5, {r0}^
			b |= 1;
    1c78:	b1000016 	tstlt	r0, r6, lsl r0
    1c7c:	01000016 	tsteq	r0, r6, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	16b15000 	ldrtne	r5, [r1], r0
	for (b = 0, i = 0; i < 8; i++) {
    1c84:	16e00000 	strbtne	r0, [r0], r0
}
    1c88:	00010000 	andeq	r0, r1, r0
    1c8c:	00000055 	andeq	r0, r0, r5, asr r0
    1c90:	00000000 	andeq	r0, r0, r0
static void put_byte (byte b) {
    1c94:	00169400 	andseq	r9, r6, r0, lsl #8
    1c98:	0016a400 	andseq	sl, r6, r0, lsl #8
    1c9c:	51000100 	mrspl	r0, (UNDEF: 16)
    1ca0:	000016a4 	andeq	r1, r0, r4, lsr #13
		if (b & 0x80)
    1ca4:	000016a8 	andeq	r1, r0, r8, lsr #13
    1ca8:	a8540001 	ldmdage	r4, {r0}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	b1000016 	tstlt	r0, r6, lsl r0
	for (i = 0; i < 8; i++) {
    1cb0:	01000016 	tsteq	r0, r6, lsl r0
		b <<= 1;
    1cb4:	16b15100 	ldrtne	r5, [r1], r0, lsl #2
	for (i = 0; i < 8; i++) {
    1cb8:	16e00000 	strbtne	r0, [r0], r0
}
    1cbc:	00010000 	andeq	r0, r1, r0
    1cc0:	00000054 	andeq	r0, r0, r4, asr r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc4:	00000000 	andeq	r0, r0, r0
    1cc8:	0016a000 	andseq	sl, r6, r0
	put_byte (cmd);
    1ccc:	0016a200 	andseq	sl, r6, r0, lsl #4
    1cd0:	50000100 	andpl	r0, r0, r0, lsl #2
}
    1cd4:	000016a2 	andeq	r1, r0, r2, lsr #13
    1cd8:	000016a8 	andeq	r1, r0, r8, lsr #13
static void wwait (word st, word del) {
    1cdc:	00550001 	subseq	r0, r5, r1
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	a0000000 	andge	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    1ce8:	a4000016 	strge	r0, [r0], #-22	; 0xffffffea
    1cec:	01000016 	tsteq	r0, r6, lsl r0
    1cf0:	16a45100 	strtne	r5, [r4], r0, lsl #2
    1cf4:	16a80000 	strtne	r0, [r8], r0
	put_byte (CMD_RDSR);
    1cf8:	00010000 	andeq	r0, r1, r0
	r = get_byte ();
    1cfc:	00000054 	andeq	r0, r0, r4, asr r0
    1d00:	00000000 	andeq	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    1d04:	0016e000 	andseq	lr, r6, r0
}
    1d08:	00171000 	andseq	r1, r7, r0
		if (st == WNONE)
    1d0c:	50000100 	andpl	r0, r0, r0, lsl #2
    1d10:	00001710 	andeq	r1, r0, r0, lsl r7
			mdelay (1);
    1d14:	0000171c 	andeq	r1, r0, ip, lsl r7
    1d18:	1c540001 	mrrcne	0, 0, r0, r4, cr1
			delay (del, st);
    1d1c:	23000017 	movwcs	r0, #23
    1d20:	01000017 	tsteq	r0, r7, lsl r0
			release;
    1d24:	17245100 	strne	r5, [r4, -r0, lsl #2]!
    1d28:	174a0000 	strbne	r0, [sl, -r0]
    1d2c:	00010000 	andeq	r0, r1, r0
static void ready () {
    1d30:	00174a50 	andseq	r4, r7, r0, asr sl
	if (dopen) {
    1d34:	00174c00 	andseq	r4, r7, r0, lsl #24
		wwait (WNONE, 1);
    1d38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    1d3c:	0000174c 	andeq	r1, r0, ip, asr #14
    1d40:	00001753 	andeq	r1, r0, r3, asr r7
	dstat = 0;
    1d44:	54500001 	ldrbpl	r0, [r0], #-1
}
    1d48:	6c000017 	stcvs	0, cr0, [r0], {23}
    1d4c:	01000017 	tsteq	r0, r7, lsl r0
    1d50:	00005000 	andeq	r5, r0, r0
	udelay (1);
    1d54:	00000000 	andeq	r0, r0, r0
    1d58:	16e00000 	strbtne	r0, [r0], r0
	udelay (1);
    1d5c:	16ea0000 	strbtne	r0, [sl], r0
		dopen = DOPEN_TEMP;
    1d60:	00010000 	andeq	r0, r1, r0
    1d64:	00000051 	andeq	r0, r0, r1, asr r0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	00172c00 	andseq	r2, r7, r0, lsl #24
static void cclose () {
    1d70:	00174a00 	andseq	r4, r7, r0, lsl #20
	if (dopen == DOPEN_TEMP) {
    1d74:	50000100 	andpl	r0, r0, r0, lsl #2
    1d78:	0000174a 	andeq	r1, r0, sl, asr #14
		wwait (WNONE, 1);
    1d7c:	0000174c 	andeq	r1, r0, ip, asr #14
    1d80:	00540001 	subseq	r0, r4, r1
	cmd_0 (CMD_DP);
    1d84:	00000000 	andeq	r0, r0, r0
    1d88:	7c000000 	stcvc	0, cr0, [r0], {-0}
		dopen = 0;
    1d8c:	82000019 	andhi	r0, r0, #25
}
    1d90:	01000019 	tsteq	r0, r9, lsl r0
word ee_open () {
    1d94:	19825000 	stmibne	r2, {ip, lr}
	ready ();
    1d98:	198e0000 	stmibne	lr, {}	; <UNPREDICTABLE>
	dopen = DOPEN_PERM;
    1d9c:	00010000 	andeq	r0, r1, r0
    1da0:	00000053 	andeq	r0, r0, r3, asr r0
}
    1da4:	00000000 	andeq	r0, r0, r0
	if (dopen) {
    1da8:	00197c00 	andseq	r7, r9, r0, lsl #24
    1dac:	00198600 	andseq	r8, r9, r0, lsl #12
		dopen = DOPEN_TEMP;
    1db0:	51000100 	mrspl	r0, (UNDEF: 16)
		cclose ();
    1db4:	00001986 	andeq	r1, r0, r6, lsl #19
}
    1db8:	00001992 	muleq	r0, r2, r9
int ser_in (word st, char *buf, int len) {
    1dbc:	98500001 	ldmdals	r0, {r0}^
    1dc0:	9d000019 	stcls	0, cr0, [r0, #-100]	; 0xffffff9c
	if (len == 0)
    1dc4:	01000019 	tsteq	r0, r9, lsl r0
	if (__inpline == NULL) {
    1dc8:	00005000 	andeq	r5, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    1dcc:	00000000 	andeq	r0, r0, r0
    1dd0:	197c0000 	ldmdbne	ip!, {}^	; <UNPREDICTABLE>
			prcs = runthread (__inserial);
    1dd4:	198a0000 	stmibne	sl, {}	; <UNPREDICTABLE>
    1dd8:	00010000 	andeq	r0, r1, r0
			if (prcs == 0) {
    1ddc:	00198a52 	andseq	r8, r9, r2, asr sl
				npwait (st);
    1de0:	00199400 	andseq	r9, r9, r0, lsl #8
		release;
    1de4:	51000100 	mrspl	r0, (UNDEF: 16)
		join (prcs, st);
    1de8:	00001998 	muleq	r0, r8, r9
    1dec:	0000199d 	muleq	r0, sp, r9
	if (*__inpline == NULL) // bin cmd
    1df0:	00510001 	subseq	r0, r1, r1
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df4:	00000000 	andeq	r0, r0, r0
	if (prcs >= len)
    1df8:	90000000 	andls	r0, r0, r0
		prcs = len-1;
    1dfc:	92000019 	andls	r0, r0, #25
	memcpy (buf, __inpline, prcs);
    1e00:	01000019 	tsteq	r0, r9, lsl r0
    1e04:	00005000 	andeq	r5, r0, r0
    1e08:	00000000 	andeq	r0, r0, r0
	ufree (__inpline);
    1e0c:	19900000 	ldmibne	r0, {}	; <UNPREDICTABLE>
	__inpline = NULL;
    1e10:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
	if (*buf) // if it's NULL, it's a bin cmd
    1e14:	00010000 	andeq	r0, r1, r0
		buf [prcs] = '\0';
    1e18:	00000051 	andeq	r0, r0, r1, asr r0
}
    1e1c:	00000000 	andeq	r0, r0, r0
		prcs = strlen (__inpline);
    1e20:	001a0800 	andseq	r0, sl, r0, lsl #16
    1e24:	001a0c00 	andseq	r0, sl, r0, lsl #24
		return 0;
    1e28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
int ser_outf (word st, const char *m, ...) {
    1e34:	00001a08 	andeq	r1, r0, r8, lsl #20
    1e38:	00001a1a 	andeq	r1, r0, sl, lsl sl
	if ((prcs = running (__outserial)) != 0) {
    1e3c:	1a510001 	bne	1441e48 <__ccfg+0x1421ea0>
    1e40:	1e00001a 	mcrne	0, 0, r0, cr0, cr10, {0}
		join (prcs, st);
    1e44:	0100001a 	tsteq	r0, sl, lsl r0
    1e48:	1a1e5600 	bne	797650 <__ccfg+0x7776a8>
		release;
    1e4c:	1a2e0000 	bne	b81e54 <__ccfg+0xb61eac>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e50:	00010000 	andeq	r0, r1, r0
    1e54:	001a2e51 	andseq	r2, sl, r1, asr lr
    1e58:	001a3000 	andseq	r3, sl, r0
		umwait (st);
    1e5c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    1e60:	00001a30 	andeq	r1, r0, r0, lsr sl
	if (runstrand (__outserial, buf) == 0) {
    1e64:	00001a33 	andeq	r1, r0, r3, lsr sl
    1e68:	33510001 	cmpcc	r1, #1
    1e6c:	5600001a 			; <UNDEFINED> instruction: 0x5600001a
		ufree (buf);
    1e70:	0100001a 	tsteq	r0, sl, lsl r0
		npwait (st);
    1e74:	1a565600 	bne	159767c <__ccfg+0x15776d4>
}
    1e78:	1a590000 	bne	1641e80 <__ccfg+0x1621ed8>
    1e7c:	00010000 	andeq	r0, r1, r0
    1e80:	001a5951 	andseq	r5, sl, r1, asr r9
    1e84:	001a7000 	andseq	r7, sl, r0
int ser_inf (word st, const char *fmt, ...) {
    1e88:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	if (__inpline == NULL) {
    1e94:	00001a08 	andeq	r1, r0, r8, lsl #20
		if ((prcs = running (__inserial)) == 0) {
    1e98:	00001a1d 	andeq	r1, r0, sp, lsl sl
    1e9c:	1d520001 	ldclne	0, cr0, [r2, #-4]
			prcs = runthread (__inserial);
    1ea0:	1e00001a 	mcrne	0, 0, r0, cr0, cr10, {0}
    1ea4:	0100001a 	tsteq	r0, sl, lsl r0
			if (prcs == 0) {
    1ea8:	1a1e5500 	bne	7972b0 <__ccfg+0x777308>
				npwait (st);
    1eac:	1a330000 	bne	cc1eb4 <__ccfg+0xca1f0c>
		release;
    1eb0:	00010000 	andeq	r0, r1, r0
		join (prcs, st);
    1eb4:	001a3352 	andseq	r3, sl, r2, asr r3
    1eb8:	001a5600 	andseq	r5, sl, r0, lsl #12
	va_start (ap, fmt);
    1ebc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	prcs = vscan (__inpline, fmt, ap);
    1ec0:	00001a56 	andeq	r1, r0, r6, asr sl
    1ec4:	00001a59 	andeq	r1, r0, r9, asr sl
	ufree (__inpline);
    1ec8:	59520001 	ldmdbpl	r2, {r0}^
	__inpline = NULL;
    1ecc:	7000001a 	andvc	r0, r0, sl, lsl r0
}
    1ed0:	0100001a 	tsteq	r0, sl, lsl r0
    1ed4:	00005500 	andeq	r5, r0, r0, lsl #10
    1ed8:	00000000 	andeq	r0, r0, r0
		return 0;
    1edc:	1a340000 	bne	d01ee4 <__ccfg+0xce1f3c>
    1ee0:	1a3a0000 	bne	e81ee8 <__ccfg+0xe61f40>
    1ee4:	00010000 	andeq	r0, r1, r0
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	001a3c50 	andseq	r3, sl, r0, asr ip
    1eec:	001a4f00 	andseq	r4, sl, r0, lsl #30
    1ef0:	50000100 	andpl	r0, r0, r0, lsl #2
	RF_cmdFs.frequency = 
    1ef4:	00001a4f 	andeq	r1, r0, pc, asr #20
}
    1ef8:	00001a56 	andeq	r1, r0, r6, asr sl
    1efc:	5a540001 	bpl	1501f08 <__ccfg+0x14e1f60>
    1f00:	6000001a 	andvs	r0, r0, sl, lsl r0
    1f04:	0100001a 	tsteq	r0, sl, lsl r0
static int option (int opt, address val) {
    1f08:	00005000 	andeq	r5, r0, r0
    1f0c:	00000000 	andeq	r0, r0, r0
    1f10:	1a160000 	bne	581f18 <__ccfg+0x561f70>
    1f14:	1a1a0000 	bne	681f1c <__ccfg+0x661f74>
    1f18:	00010000 	andeq	r0, r1, r0
    1f1c:	00000051 	andeq	r0, r0, r1, asr r0
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	001c2000 	andseq	r2, ip, r0
    1f28:	001c3900 	andseq	r3, ip, r0, lsl #18
    1f2c:	52000100 	andpl	r0, r0, #0, 2
    1f30:	00001c44 	andeq	r1, r0, r4, asr #24
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	00001c58 	andeq	r1, r0, r8, asr ip
    1f38:	00520001 	subseq	r0, r2, r1
			goto RVal;
    1f3c:	00000000 	andeq	r0, r0, r0
			_BIS (dstate, DSTATE_RXON);
    1f40:	20000000 	andcs	r0, r0, r0
    1f44:	3900001c 	stmdbcc	r0, {r2, r3, r4}
	int ret = 0;
    1f48:	0100001c 	tsteq	r0, ip, lsl r0
			p_trigger (drvprcs, qevent);
    1f4c:	1c485300 	mcrrne	3, 0, r5, r8, cr0
    1f50:	1c580000 	mrane	r0, r8, acc0
    1f54:	00010000 	andeq	r0, r1, r0
    1f58:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1f68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1f74:	00500001 	subseq	r0, r0, r1
	...
			statid = (val == NULL) ? 0 : *val;
    1f84:	01000000 	mrseq	r0, (UNDEF: 0)
	int ret = 0;
    1f88:	00005100 	andeq	r5, r0, r0, lsl #2
			ret = (int) statid;
    1f8c:	00000000 	andeq	r0, r0, r0
	if (val != NULL)
    1f90:	00010000 	andeq	r0, r1, r0
		*val = ret;
    1f94:	00000051 	andeq	r0, r0, r1, asr r0
	...
				memcpy (val, &rxstat,
    1fa4:	52000100 	andpl	r0, r0, #0, 2
	...
				memset (&rxstat, 0, 
    1fb0:	00520001 	subseq	r0, r2, r1
	...
				utimer_set (bckf_timer, *val);
    1fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fc4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
					== patable [ret])
    1fd4:	00010000 	andeq	r0, r1, r0
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	00000050 	andeq	r0, r0, r0, asr r0
	...
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff4:	00030005 	andeq	r0, r3, r5
	...
			_BIS (dstate, DSTATE_IRST);
    2000:	01000000 	mrseq	r0, (UNDEF: 0)
			ret = (int) channel;
    2004:	00005000 	andeq	r5, r0, r0
			goto RVal;
    2008:	00000000 	andeq	r0, r0, r0
				(*val > 7) ? 7 : *val;
    200c:	00050000 	andeq	r0, r5, r0
    2010:	00000003 	andeq	r0, r0, r3
	...
			_BIS (dstate, DSTATE_IRST);
    2024:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	00500001 	subseq	r0, r0, r1
    2034:	00000000 	andeq	r0, r0, r0
    2038:	01000000 	mrseq	r0, (UNDEF: 0)
    203c:	00005000 	andeq	r5, r0, r0
    2040:	00000000 	andeq	r0, r0, r0
    2044:	00010000 	andeq	r0, r1, r0
    2048:	00000050 	andeq	r0, r0, r0, asr r0
	...
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2058:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			syserror (EREQPAR, "cc13 op");
    206c:	00500001 	subseq	r0, r0, r1
	...
    207c:	01000000 	mrseq	r0, (UNDEF: 0)
    2080:	00005000 	andeq	r5, r0, r0
	...
    2090:	00010000 	andeq	r0, r1, r0
    2094:	00000051 	andeq	r0, r0, r1, asr r0
static void issue_cmd (lword cmd) {
    2098:	00000000 	andeq	r0, r0, r0
    209c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			syserror (EHARDWARE, "hang ic0");
    20b0:	00520001 	subseq	r0, r2, r1
	...
			diag ("HUP %lx %lx", cmd, res);
    20c0:	01000000 	mrseq	r0, (UNDEF: 0)
			syserror (EHARDWARE, "hang ic0");
    20c4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
}
    20d4:	00010000 	andeq	r0, r1, r0
    20d8:	00000054 	andeq	r0, r0, r4, asr r0
    20dc:	00000000 	andeq	r0, r0, r0
static void rx_de () {
    20e0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	00540001 	subseq	r0, r4, r1
	...
}
    20fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2100:	00005000 	andeq	r5, r0, r0
static void rf_off () {
    2104:	00000000 	andeq	r0, r0, r0
	if ((dstate & DSTATE_RFON) == 0)
    2108:	00010000 	andeq	r0, r1, r0
    210c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	RFCAdi3VcoLdoVoltageMode (false);
    211c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	00560001 	subseq	r0, r6, r1
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    212c:	00000000 	andeq	r0, r0, r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2130:	01000000 	mrseq	r0, (UNDEF: 0)
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2134:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	_BIC (dstate, DSTATE_RFON);
    2144:	00010000 	andeq	r0, r1, r0
    2148:	00000052 	andeq	r0, r0, r2, asr r0
}
    214c:	00000000 	andeq	r0, r0, r0
    2150:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	00540001 	subseq	r0, r4, r1
	...
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2174:	01000000 	mrseq	r0, (UNDEF: 0)
    2178:	00005000 	andeq	r5, r0, r0
	...
		udelay (1);
    2188:	00010000 	andeq	r0, r1, r0
		if (cmd->status == tstat)
    218c:	00000050 	andeq	r0, r0, r0, asr r0
}
    2190:	00000000 	andeq	r0, r0, r0
    2194:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
static void rf_on () {
    21a0:	00500001 	subseq	r0, r0, r1
	...
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21b0:	01000000 	mrseq	r0, (UNDEF: 0)
    21b4:	00005100 	andeq	r5, r0, r0, lsl #2
    21b8:	00000000 	andeq	r0, r0, r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21bc:	00010000 	andeq	r0, r1, r0
    21c0:	00000056 	andeq	r0, r0, r6, asr r0
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c4:	00000000 	andeq	r0, r0, r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21c8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d4:	00510001 	subseq	r0, r1, r1
	...
   } while (--nIterations);
    21e4:	01000000 	mrseq	r0, (UNDEF: 0)
   pPatchTab[53] = 2;
    21e8:	00005200 	andeq	r5, r0, r0, lsl #4
    21ec:	00000000 	andeq	r0, r0, r0
   pPatchTab[55] = 3;
    21f0:	00010000 	andeq	r0, r1, r0
   pPatchTab[110] = 4;
    21f4:	00000052 	andeq	r0, r0, r2, asr r0
   pPatchTab[107] = 5;
    21f8:	00000000 	andeq	r0, r0, r0
   pPatchTab[65] = 6;
    21fc:	001cdc00 	andseq	sp, ip, r0, lsl #24
    2200:	001cec00 	andseq	lr, ip, r0, lsl #24
   pPatchTab[57] = 1;
    2204:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      t2 = *pS++;
    2210:	00001cdc 	ldrdeq	r1, [r0], -ip
      t4 = *pS++;
    2214:	00001cec 	andeq	r1, r0, ip, ror #25
      t6 = *pS++;
    2218:	00510001 	subseq	r0, r1, r1
      t8 = *pS++;
    221c:	00000000 	andeq	r0, r0, r0
      *pD++ = t1;
    2220:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
      *pD++ = t2;
    2224:	0200001c 	andeq	r0, r0, #28
      *pD++ = t3;
    2228:	0100001d 	tsteq	r0, sp, lsl r0
      *pD++ = t5;
    222c:	00005000 	andeq	r5, r0, r0
      *pD++ = t7;
    2230:	00000000 	andeq	r0, r0, r0
   } while (--nIterations);
    2234:	1cc40000 	stclne	0, cr0, [r4], {0}
    2238:	1ccf0000 	stclne	0, cr0, [pc], {0}
      *pD++ = t8;
    223c:	00010000 	andeq	r0, r1, r0
   } while (--nIterations);
    2240:	00000050 	andeq	r0, r0, r0, asr r0
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2244:	00000000 	andeq	r0, r0, r0
   *pD++ = t2;
    2248:	001c9400 	andseq	r9, ip, r0, lsl #8
   *pD++ = t3;
    224c:	001cb000 	andseq	fp, ip, r0
   *pD++ = t4;
    2250:	50000100 	andpl	r0, r0, r0, lsl #2
   *pD++ = t5;
    2254:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
    2258:	00001cc4 	andeq	r1, r0, r4, asr #25
	RFCAdi3VcoLdoVoltageMode (true);
    225c:	00500001 	subseq	r0, r0, r1
    2260:	00000000 	andeq	r0, r0, r0
       	RFCRfTrimSet (&rfTrim);
    2264:	70000000 	andvc	r0, r0, r0
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2268:	7400001c 	strvc	r0, [r0], #-28	; 0xffffffe4
    226c:	0100001c 	tsteq	r0, ip, lsl r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2270:	1c785000 	ldclne	0, cr5, [r8], #-0
    2274:	1c940000 	ldcne	0, cr0, [r4], {0}
	issue_cmd ((lword)&cmd_srt);
    2278:	00010000 	andeq	r0, r1, r0
    227c:	00000050 	andeq	r0, r0, r0, asr r0
	issue_cmd ((lword)&RF_cmdFs);
    2280:	00000000 	andeq	r0, r0, r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2284:	001dbc00 	andseq	fp, sp, r0, lsl #24
    2288:	001dca00 	andseq	ip, sp, r0, lsl #20
    228c:	50000100 	andpl	r0, r0, r0, lsl #2
	IntEnable (INT_RFC_CPE_0);
    2290:	00001e26 	andeq	r1, r0, r6, lsr #28
	_BIC (dstate, DSTATE_IRST);
    2294:	00001e34 	andeq	r1, r0, r4, lsr lr
    2298:	00500001 	subseq	r0, r0, r1
    229c:	00000000 	andeq	r0, r0, r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a0:	bc000000 	stclt	0, cr0, [r0], {-0}
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a4:	d100001d 	tstle	r0, sp, lsl r0
	IntEnable (INT_RFC_CPE_0);
    22a8:	0100001d 	tsteq	r0, sp, lsl r0
    22ac:	1dd15100 	ldfnee	f5, [r1]
}
    22b0:	1df00000 	ldclne	0, cr0, [r0]
	IntEnable (INT_RFC_CPE_0);
    22b4:	00010000 	andeq	r0, r1, r0
    22b8:	001df057 	andseq	pc, sp, r7, asr r0	; <UNPREDICTABLE>
    22bc:	001df800 	andseq	pc, sp, r0, lsl #16
    22c0:	51000100 	mrspl	r0, (UNDEF: 16)
    22c4:	00001df8 	strdeq	r1, [r0], -r8
    22c8:	00001e1e 	andeq	r1, r0, lr, lsl lr
    22cc:	1e570001 	cdpne	0, 5, cr0, cr7, cr1, {0}
    22d0:	2100001e 	tstcs	r0, lr, lsl r0
    22d4:	0100001e 	tsteq	r0, lr, lsl r0
    22d8:	1e215100 	sufnes	f5, f1, f0
    22dc:	1e260000 	cdpne	0, 2, cr0, cr6, cr0, {0}
    22e0:	00010000 	andeq	r0, r1, r0
    22e4:	001e2657 	andseq	r2, lr, r7, asr r6
    22e8:	001e3400 	andseq	r3, lr, r0, lsl #8
    22ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22f8:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    22fc:	00001dd1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    2300:	d1520001 	cmple	r2, r1
    2304:	f000001d 			; <UNDEFINED> instruction: 0xf000001d
    2308:	0100001d 	tsteq	r0, sp, lsl r0
    230c:	1df05500 	cfldr64ne	mvdx5, [r0]
    2310:	1df80000 	ldclne	0, cr0, [r8]
    2314:	00010000 	andeq	r0, r1, r0
static void rx_int_enable () {
    2318:	001df852 	andseq	pc, sp, r2, asr r8	; <UNPREDICTABLE>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    231c:	001e1e00 	andseq	r1, lr, r0, lsl #28
    2320:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2324:	00001e1e 	andeq	r1, r0, lr, lsl lr
    2328:	00001e21 	andeq	r1, r0, r1, lsr #28
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    232c:	21520001 	cmpcs	r2, r1
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2330:	2600001e 			; <UNDEFINED> instruction: 0x2600001e
    2334:	0100001e 	tsteq	r0, lr, lsl r0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2338:	1e265500 	cfsh64ne	mvdx5, mvdx6, #0
    233c:	1e340000 	cdpne	0, 3, cr0, cr4, cr0, {0}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2340:	00010000 	andeq	r0, r1, r0
    2344:	00000052 	andeq	r0, r0, r2, asr r0
    2348:	00000000 	andeq	r0, r0, r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    234c:	001dd200 	andseq	sp, sp, r0, lsl #4
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2350:	001dd800 	andseq	sp, sp, r0, lsl #16
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2354:	50000100 	andpl	r0, r0, r0, lsl #2
		if (db->status == DATA_ENTRY_FINISHED) {
    2358:	00001dd8 	ldrdeq	r1, [r0], -r8
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	00001ddb 	ldrdeq	r1, [r0], -fp
    2360:	dc510001 	mrrcle	0, 0, r0, r1, cr1
			nr++;
    2364:	e000001d 	and	r0, r0, sp, lsl r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2368:	0100001d 	tsteq	r0, sp, lsl r0
    236c:	1de85000 	stclne	0, cr5, [r8]
    2370:	1ded0000 	stclne	0, cr0, [sp]
    2374:	00010000 	andeq	r0, r1, r0
				__dp [pl + 1] = __dp [pl] - 128;
    2378:	001df850 	andseq	pc, sp, r0, asr r8	; <UNPREDICTABLE>
				pl = __dp [1] + 2;
    237c:	001e1a00 	andseq	r1, lr, r0, lsl #20
				__dp [pl + 1] = __dp [pl] - 128;
    2380:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2384:	00001e24 	andeq	r1, r0, r4, lsr #28
				__dp [pl] = 0;
    2388:	00001e26 	andeq	r1, r0, r6, lsr #28
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    238c:	00500001 	subseq	r0, r0, r1
    2390:	00000000 	andeq	r0, r0, r0
    2394:	34000000 	strcc	r0, [r0], #-0
			db->status = DATA_ENTRY_PENDING;
    2398:	3c00001e 	stccc	0, cr0, [r0], {30}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    239c:	0100001e 	tsteq	r0, lr, lsl r0
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a0:	00005000 	andeq	r5, r0, r0
				diag ("BAD RX");
    23a4:	00000000 	andeq	r0, r0, r0
    23a8:	1e400000 	cdpne	0, 4, cr0, cr0, cr0, {0}
	if (nr) {
    23ac:	1e490000 	cdpne	0, 4, cr0, cr9, cr0, {0}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b0:	00010000 	andeq	r0, r1, r0
}
    23b4:	001e4950 	andseq	r4, lr, r0, asr r9
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b8:	001e4e00 	andseq	r4, lr, r0, lsl #28
    23bc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    23c0:	00001e4e 	andeq	r1, r0, lr, asr #28
}
    23c4:	00001e57 	andeq	r1, r0, r7, asr lr
    23c8:	57500001 	ldrbpl	r0, [r0, -r1]
    23cc:	7e00001e 	mcrvc	0, 0, r0, cr0, cr14, {0}
    23d0:	0100001e 	tsteq	r0, lr, lsl r0
    23d4:	1e7e5600 	cdpne	6, 7, cr5, cr14, cr0, {0}
    23d8:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    23dc:	00010000 	andeq	r0, r1, r0
    23e0:	00000050 	andeq	r0, r0, r0, asr r0
    23e4:	00000000 	andeq	r0, r0, r0
thread (cc1350_driver)
    23e8:	001e5800 	andseq	r5, lr, r0, lsl #16
    23ec:	001e5c00 	andseq	r5, lr, r0, lsl #24
    23f0:	50000100 	andpl	r0, r0, r0, lsl #2
    23f4:	00001e5c 	andeq	r1, r0, ip, asr lr
    23f8:	00001e64 	andeq	r1, r0, r4, ror #28
		if (dstate & DSTATE_IRST) {
    23fc:	64550001 	ldrbvs	r0, [r5], #-1
    2400:	6800001e 	stmdavs	r0, {r1, r2, r3, r4}
    2404:	0100001e 	tsteq	r0, lr, lsl r0
			rf_off ();
    2408:	1e685000 	cdpne	0, 6, cr5, cr8, cr0, {0}
			_BIC (dstate,
    240c:	1e7e0000 	cdpne	0, 7, cr0, cr14, cr0, {0}
    2410:	00010000 	andeq	r0, r1, r0
		if (dstate & DSTATE_RXAC) {
    2414:	00000055 	andeq	r0, r0, r5, asr r0
    2418:	00000000 	andeq	r0, r0, r0
			if ((dstate & DSTATE_RXON) == 0)
    241c:	001e8800 	andseq	r8, lr, r0, lsl #16
				rx_de ();
    2420:	001e9600 	andseq	r9, lr, r0, lsl #12
		if (paylen == 0) {
    2424:	50000100 	andpl	r0, r0, r0, lsl #2
    2428:	00001edc 	ldrdeq	r1, [r0], -ip
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    242c:	00001ee8 	andeq	r1, r0, r8, ror #29
    2430:	00500001 	subseq	r0, r0, r1
    2434:	00000000 	andeq	r0, r0, r0
    2438:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    243c:	a400001e 	strge	r0, [r0], #-30	; 0xffffffe2
    2440:	0100001e 	tsteq	r0, lr, lsl r0
    2444:	1ea45000 	cdpne	0, 10, cr5, cr4, cr0, {0}
    2448:	1ea70000 	cdpne	0, 10, cr0, cr7, cr0, {0}
    244c:	00010000 	andeq	r0, r1, r0
    2450:	001ea851 	andseq	sl, lr, r1, asr r8
    2454:	001eac00 	andseq	sl, lr, r0, lsl #24
    2458:	50000100 	andpl	r0, r0, r0, lsl #2
		} else if (dstate & DSTATE_RXON) {
    245c:	00001eb4 			; <UNDEFINED> instruction: 0x00001eb4
	if (dstate & DSTATE_RFON)
    2460:	00001eb9 			; <UNDEFINED> instruction: 0x00001eb9
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2464:	c6500001 	ldrbgt	r0, [r0], -r1
		re->status = DATA_ENTRY_PENDING;
    2468:	c800001e 	stmdagt	r0, {r1, r2, r3, r4}
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    246c:	0100001e 	tsteq	r0, lr, lsl r0
	issue_cmd ((lword)&RF_cmdPropRx);
    2470:	1ec85000 	cdpne	0, 12, cr5, cr8, cr0, {0}
	_BIS (dstate, DSTATE_RXAC);
    2474:	1ed00000 	cdpne	0, 13, cr0, cr0, cr0, {0}
    2478:	00010000 	andeq	r0, r1, r0
    247c:	00000054 	andeq	r0, r0, r4, asr r0
    2480:	00000000 	andeq	r0, r0, r0
	if (dstate & DSTATE_RXAC)
    2484:	00264800 	eoreq	r4, r6, r0, lsl #16
    2488:	00265600 	eoreq	r5, r6, r0, lsl #12
				if (statid != 0xffff)
    248c:	50000100 	andpl	r0, r0, r0, lsl #2
    2490:	00002656 	andeq	r2, r0, r6, asr r6
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2494:	0000265c 	andeq	r2, r0, ip, asr r6
				RF_cmdPropTx.pktLen = (byte) paylen;
    2498:	5c560001 	mrrcpl	0, 0, r0, r6, cr1
		if (paylen == 0) {
    249c:	66000026 	strvs	r0, [r0], -r6, lsr #32
			wait (qevent, DR_LOOP);
    24a0:	01000026 	tsteq	r0, r6, lsr #32
    24a4:	26665000 	strbtcs	r5, [r6], -r0
			if (dstate & DSTATE_RXAC) {
    24a8:	266a0000 	strbtcs	r0, [sl], -r0
    24ac:	00010000 	andeq	r0, r1, r0
				rx_int_enable ();
    24b0:	00266a56 	eoreq	r6, r6, r6, asr sl
			release;
    24b4:	00267a00 	eoreq	r7, r6, r0, lsl #20
			} else if (dstate & DSTATE_RFON) {
    24b8:	50000100 	andpl	r0, r0, r0, lsl #2
				delay (offdelay, DR_GOOF);
    24bc:	0000267a 	andeq	r2, r0, sl, ror r6
    24c0:	00002772 	andeq	r2, r0, r2, ror r7
    24c4:	00560001 	subseq	r0, r6, r1
		if (bckf_timer) {
    24c8:	00000000 	andeq	r0, r0, r0
			wait (qevent, DR_LOOP);
    24cc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    24d0:	58000026 	stmdapl	r0, {r1, r2, r5}
    24d4:	01000026 	tsteq	r0, r6, lsr #32
			delay (bckf_timer, DR_LOOP);
    24d8:	265c5100 	ldrbcs	r5, [ip], -r0, lsl #2
    24dc:	26680000 	strbtcs	r0, [r8], -r0
			if (dstate & DSTATE_RXAC)
    24e0:	00010000 	andeq	r0, r1, r0
    24e4:	00266a51 	eoreq	r6, r6, r1, asr sl
	if (dstate & DSTATE_RFON)
    24e8:	00267a00 	eoreq	r7, r6, r0, lsl #20
    24ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24f8:	000026b0 			; <UNDEFINED> instruction: 0x000026b0
    24fc:	000026c4 	andeq	r2, r0, r4, asr #13
    2500:	c4550001 	ldrbgt	r0, [r5], #-1
		issue_cmd ((lword)&cmd_cs);
    2504:	ca000026 	bgt	25a4 <cc1350_driver+0x1bc>
		if (dstate & DSTATE_IRST)
    2508:	02000026 	andeq	r0, r0, #38	; 0x26
    250c:	00007000 	andeq	r7, r0, r0
    2510:	00000000 	andeq	r0, r0, r0
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2514:	7a000000 	bvc	251c <cc1350_driver+0x134>
    2518:	83000026 	movwhi	r0, #38	; 0x26
			delay (1, DR_XMIT);
    251c:	01000026 	tsteq	r0, r6, lsr #32
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2520:	26835300 	strcs	r5, [r3], r0, lsl #6
    2524:	26e60000 	strbtcs	r0, [r6], r0
    2528:	00010000 	andeq	r0, r1, r0
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    252c:	0027185b 	eoreq	r1, r7, fp, asr r8
    2530:	00271c00 	eoreq	r1, r7, r0, lsl #24
				RF_cmdPropTx . status = 0;
    2534:	5b000100 	blpl	293c <__inserial+0x70>
	...
				proceed (DR_XMIT);
    2540:	00002684 	andeq	r2, r0, r4, lsl #13
    2544:	00002688 	andeq	r2, r0, r8, lsl #13
			txtries++;
    2548:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    254c:	b4000026 	strlt	r0, [r0], #-38	; 0xffffffda
    2550:	01000026 	tsteq	r0, r6, lsr #32
    2554:	26b45000 	ldrtcs	r5, [r4], r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2558:	26b70000 	ldrtcs	r0, [r7], r0
		goto DR_LOOP__;
    255c:	00010000 	andeq	r0, r1, r0
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2560:	00271853 	eoreq	r1, r7, r3, asr r8
		paylen = 0;
    2564:	00271c00 	eoreq	r1, r7, r0, lsl #24
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2574:	00001f08 	andeq	r1, r0, r8, lsl #30
    2578:	00001f36 	andeq	r1, r0, r6, lsr pc
    257c:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
    2580:	4800001f 	stmdami	r0, {r0, r1, r2, r3, r4}
		    tcvphy_top (physid) == NULL)
    2584:	0100001f 	tsteq	r0, pc, lsl r0
    2588:	1f765000 	svcne	0x00765000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	1f880000 	svcne	0x00880000
    2590:	00010000 	andeq	r0, r1, r0
			rf_off ();
    2594:	001f8c50 	andseq	r8, pc, r0, asr ip	; <UNPREDICTABLE>
endthread
    2598:	001f9000 	andseq	r9, pc, r0
    259c:	50000100 	andpl	r0, r0, r0, lsl #2
    25a0:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    25a4:	00001f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    25a8:	9e500001 	cdpls	0, 5, cr0, cr0, cr1, {0}
    25ac:	a400001f 	strge	r0, [r0], #-31	; 0xffffffe1
    25b0:	0100001f 	tsteq	r0, pc, lsl r0
    25b4:	1fac5000 	svcne	0x00ac5000
    25b8:	1fae0000 	svcne	0x00ae0000
    25bc:	00010000 	andeq	r0, r1, r0
    25c0:	001fb450 	andseq	fp, pc, r0, asr r4	; <UNPREDICTABLE>
    25c4:	001fb900 	andseq	fp, pc, r0, lsl #18
    25c8:	50000100 	andpl	r0, r0, r0, lsl #2
    25cc:	00001fc8 	andeq	r1, r0, r8, asr #31
    25d0:	00001fce 	andeq	r1, r0, lr, asr #31
    25d4:	e4500001 	ldrb	r0, [r0], #-1
void RFCCPE0IntHandler (void) {
    25d8:	e800001f 	stmda	r0, {r0, r1, r2, r3, r4}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25dc:	0100001f 	tsteq	r0, pc, lsl r0
		_BIS (dstate, DSTATE_IRST);
    25e0:	20045000 	andcs	r5, r4, r0
    25e4:	20080000 	andcs	r0, r8, r0
    25e8:	00010000 	andeq	r0, r1, r0
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25ec:	00200a50 	eoreq	r0, r0, r0, asr sl
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f0:	00205c00 	eoreq	r5, r0, r0, lsl #24
    25f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	p_trigger (drvprcs, qevent);
    2600:	00001f08 	andeq	r1, r0, r8, lsl #30
    2604:	00001f48 	andeq	r1, r0, r8, asr #30
    2608:	76510001 	ldrbvc	r0, [r1], -r1
    260c:	8800001f 	stmdahi	r0, {r0, r1, r2, r3, r4}
    2610:	0100001f 	tsteq	r0, pc, lsl r0
    2614:	1f8c5100 	svcne	0x008c5100
    2618:	1f900000 	svcne	0x00900000
    261c:	00010000 	andeq	r0, r1, r0
    2620:	001f9051 	andseq	r9, pc, r1, asr r0	; <UNPREDICTABLE>
	RISE_N_SHINE;
    2624:	001f9800 	andseq	r9, pc, r0, lsl #16
    2628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    262c:	00001f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
}
    2630:	00001fa6 	andeq	r1, r0, r6, lsr #31
    2634:	a6510001 	ldrbge	r0, [r1], -r1
    2638:	ac00001f 	stcge	0, cr0, [r0], {31}
    263c:	0100001f 	tsteq	r0, pc, lsl r0
    2640:	1fac5400 	svcne	0x00ac5400
    2644:	1fb10000 	svcne	0x00b10000
void phys_cc1350 (int phy, int mbs) {
    2648:	00010000 	andeq	r0, r1, r0
	if (rbuffl != 0)
    264c:	001fb151 	andseq	fp, pc, r1, asr r1	; <UNPREDICTABLE>
    2650:	001fb400 	andseq	fp, pc, r0, lsl #8
		syserror (ETOOMANY, "cc13");
    2654:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		syserror (EREQPAR, "cc13 mb");
    2658:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
	if (mbs == 0)
    265c:	00001fb9 			; <UNDEFINED> instruction: 0x00001fb9
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2660:	b9510001 	ldmdblt	r1, {r0}^
		syserror (EREQPAR, "cc13 mb");
    2664:	c800001f 	stmdagt	r0, {r0, r1, r2, r3, r4}
    2668:	0100001f 	tsteq	r0, pc, lsl r0
	i = 0;
    266c:	1fc85400 	svcne	0x00c85400
	rbuffl = (byte) mbs;
    2670:	1fca0000 	svcne	0x00ca0000
		db->config.type = 0;	// General (data in structure)
    2674:	00010000 	andeq	r0, r1, r0
	rbuffl = (byte) mbs;
    2678:	001fca51 	andseq	ip, pc, r1, asr sl	; <UNPREDICTABLE>
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    267c:	001fcc00 	andseq	ip, pc, r0, lsl #24
    2680:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if (db == NULL)
    2684:	00001fcc 	andeq	r1, r0, ip, asr #31
			syserror (EMALLOC, "cc13");
    2688:	00001fd4 	ldrdeq	r1, [r0], -r4
    268c:	d4510001 	ldrble	r0, [r1], #-1
    2690:	e400001f 	str	r0, [r0], #-31	; 0xffffffe1
		db->status = DATA_ENTRY_PENDING;
    2694:	0100001f 	tsteq	r0, pc, lsl r0
		if (i)
    2698:	1fe45400 	svcne	0x00e45400
			da->pNextEntry = (byte*) db;
    269c:	205e0000 	subscs	r0, lr, r0
		db->length = rbuffl + 2;
    26a0:	00010000 	andeq	r0, r1, r0
    26a4:	00205e51 	eoreq	r5, r0, r1, asr lr
		db->config.type = 0;	// General (data in structure)
    26a8:	00209800 	eoreq	r9, r0, r0, lsl #16
		db->length = rbuffl + 2;
    26ac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b8:	00001f3c 	andeq	r1, r0, ip, lsr pc
	if (rbuffs == NULL)
    26bc:	00001f3e 	andeq	r1, r0, lr, lsr pc
	rbuffs->pCurrEntry = (byte*) re;
    26c0:	4a500001 	bmi	14026cc <__ccfg+0x13e2724>
	rbuffs->pLastEntry = NULL;
    26c4:	7400001f 	strvc	r0, [r0], #-31	; 0xffffffe1
    26c8:	0100001f 	tsteq	r0, pc, lsl r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26cc:	1f905000 	svcne	0x00905000
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d0:	1f980000 	svcne	0x00980000
    26d4:	00010000 	andeq	r0, r1, r0
    26d8:	001fd450 	andseq	sp, pc, r0, asr r4	; <UNPREDICTABLE>
	rbuffl -= 2;
    26dc:	001fe400 	andseq	lr, pc, r0, lsl #8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e0:	50000100 	andpl	r0, r0, r0, lsl #2
	rbuffl -= 2;
    26e4:	00001fee 	andeq	r1, r0, lr, ror #31
	physid = phy;
    26e8:	00002004 	andeq	r2, r0, r4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	08500001 	ldmdaeq	r0, {r0}^
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f0:	0a000020 	beq	2778 <phys_cc1350+0x130>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f4:	01000020 	tsteq	r0, r0, lsr #32
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f8:	00005000 	andeq	r5, r0, r0
    26fc:	00000000 	andeq	r0, r0, r0
	utimer_add (&bckf_timer);
    2700:	1f5e0000 	svcne	0x005e0000
	drvprcs = runthread (cc1350_driver);
    2704:	1f680000 	svcne	0x00680000
    2708:	00010000 	andeq	r0, r1, r0
    270c:	00000053 	andeq	r0, r0, r3, asr r0
	if (drvprcs == 0)
    2710:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "cc13");
    2714:	0023e800 	eoreq	lr, r3, r0, lsl #16
    2718:	0023fc00 	eoreq	pc, r3, r0, lsl #24
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    271c:	50000100 	andpl	r0, r0, r0, lsl #2
    2720:	00002570 	andeq	r2, r0, r0, ror r5
    2724:	00002588 	andeq	r2, r0, r8, lsl #11
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2728:	98500001 	ldmdals	r0, {r0}^
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    272c:	9f000025 	svcls	0x00000025
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2730:	01000025 	tsteq	r0, r5, lsr #32
    2734:	00005000 	andeq	r5, r0, r0
    2738:	00000000 	andeq	r0, r0, r0
    273c:	24680000 	strbtcs	r0, [r8], #-0
    2740:	24700000 	ldrbtcs	r0, [r0], #-0
    2744:	00010000 	andeq	r0, r1, r0
    2748:	00247052 	eoreq	r7, r4, r2, asr r0
    274c:	00247300 	eoreq	r7, r4, r0, lsl #6
    2750:	72000200 	andvc	r0, r0, #0, 4
	...
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	00260e00 	eoreq	r0, r6, r0, lsl #28
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2760:	00261800 	eoreq	r1, r6, r0, lsl #16
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2764:	53000100 	movwpl	r0, #256	; 0x100
	...
}
    2770:	00002356 	andeq	r2, r0, r6, asr r3
    2774:	0000239a 	muleq	r0, sl, r3
    2778:	9a540001 	bls	1502784 <__ccfg+0x14e27dc>
    277c:	a2000023 	andge	r0, r0, #35	; 0x23
    2780:	02000023 	andeq	r0, r0, #35	; 0x23
    2784:	a2007400 	andge	r7, r0, #0, 8
    2788:	ac000023 	stcge	0, cr0, [r0], {35}	; 0x23
    278c:	01000023 	tsteq	r0, r3, lsr #32
    2790:	23ac5400 			; <UNDEFINED> instruction: 0x23ac5400
    2794:	23b10000 			; <UNDEFINED> instruction: 0x23b10000
    2798:	00020000 	andeq	r0, r2, r0
    279c:	23c20074 	biccs	r0, r2, #116	; 0x74
    27a0:	23c60000 	biccs	r0, r6, #0
    27a4:	00020000 	andeq	r0, r2, r0
    27a8:	00000074 	andeq	r0, r0, r4, ror r0
    27ac:	00000000 	andeq	r0, r0, r0
    27b0:	237e0000 	cmncs	lr, #0
    27b4:	23950000 	orrscs	r0, r5, #0
    27b8:	00010000 	andeq	r0, r1, r0
    27bc:	00000052 	andeq	r0, r0, r2, asr r0
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	00235600 	eoreq	r5, r3, r0, lsl #12
    27c8:	0023b600 	eoreq	fp, r3, r0, lsl #12
    27cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    27d0:	000023c2 	andeq	r2, r0, r2, asr #7
    27d4:	000023c6 	andeq	r2, r0, r6, asr #7
    27d8:	00550001 	subseq	r0, r5, r1
    27dc:	00000000 	andeq	r0, r0, r0
    27e0:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    27e4:	9e000020 	cdpls	0, 0, cr0, cr0, cr0, {1}
    27e8:	01000020 	tsteq	r0, r0, lsr #32
    27ec:	209e5000 	addscs	r5, lr, r0
    27f0:	20d00000 	sbcscs	r0, r0, r0
    27f4:	00010000 	andeq	r0, r1, r0
    27f8:	00000054 	andeq	r0, r0, r4, asr r0
    27fc:	00000000 	andeq	r0, r0, r0
    2800:	0020a600 	eoreq	sl, r0, r0, lsl #12
    2804:	0020b000 	eoreq	fp, r0, r0
    2808:	52000100 	andpl	r0, r0, #0, 2
    280c:	000020b6 	strheq	r2, [r0], -r6
    2810:	000020c1 	andeq	r2, r0, r1, asr #1
    2814:	c6520001 	ldrbgt	r0, [r2], -r1
    2818:	cb000020 	blgt	28a0 <__outserial+0x44>
    281c:	01000020 	tsteq	r0, r0, lsr #32
    2820:	20ce5200 	sbccs	r5, lr, r0, lsl #4
    2824:	20e00000 	rsccs	r0, r0, r0
    2828:	00010000 	andeq	r0, r1, r0
    282c:	00000052 	andeq	r0, r0, r2, asr r0
    2830:	00000000 	andeq	r0, r0, r0
    2834:	0020ae00 	eoreq	sl, r0, r0, lsl #28
    2838:	0020b000 	eoreq	fp, r0, r0
    283c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2848:	00002160 	andeq	r2, r0, r0, ror #2
    284c:	0000216a 	andeq	r2, r0, sl, ror #2
    2850:	6a500001 	bvs	140285c <__ccfg+0x13e28b4>
    2854:	90000021 	andls	r0, r0, r1, lsr #32
    2858:	01000021 	tsteq	r0, r1, lsr #32
strand (__outserial, const char*)
    285c:	00005400 	andeq	r5, r0, r0, lsl #8
    2860:	00000000 	andeq	r0, r0, r0
    2864:	21600000 	cmncs	r0, r0
    2868:	216a0000 	cmncs	sl, r0
endstrand
    286c:	00010000 	andeq	r0, r1, r0
    2870:	00216a51 	eoreq	r6, r1, r1, asr sl
	ptr = data;
    2874:	00219000 	eoreq	r9, r1, r0
    2878:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		len = strlen (ptr);
    2884:	0000223a 	andeq	r2, r0, sl, lsr r2
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2888:	00002242 	andeq	r2, r0, r2, asr #4
    288c:	00520001 	subseq	r0, r2, r1
    2890:	00000000 	andeq	r0, r0, r0
    2894:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2898:	3a000022 	bcc	2928 <__inserial+0x5c>
	len -= quant;
    289c:	01000022 	tsteq	r0, r2, lsr #32
    28a0:	223e5300 	eorscs	r5, lr, #0, 6
    28a4:	22420000 	subcs	r0, r2, #0
	if (len == 0) {
    28a8:	00010000 	andeq	r0, r1, r0
		ufree (data);
    28ac:	00000053 	andeq	r0, r0, r3, asr r0
		finish;
    28b0:	00000000 	andeq	r0, r0, r0
    28b4:	00221400 	eoreq	r1, r2, r0, lsl #8
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28b8:	00224200 	eoreq	r4, r2, r0, lsl #4
    28bc:	5e000100 	adfpls	f0, f0, f0
	...
    28c8:	00002218 	andeq	r2, r0, r8, lsl r2
strand (__inserial, address)
    28cc:	00002242 	andeq	r2, r0, r2, asr #4
    28d0:	00570001 	subseq	r0, r7, r1
    28d4:	00000000 	andeq	r0, r0, r0
    28d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    28dc:	58000022 	stmdapl	r0, {r1, r5}
	if (__inpline != NULL)
    28e0:	01000022 	tsteq	r0, r2, lsr #32
    28e4:	00005500 	andeq	r5, r0, r0, lsl #10
		finish;
    28e8:	00000000 	andeq	r0, r0, r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28ec:	221c0000 	andscs	r0, ip, #0
    28f0:	22340000 	eorscs	r0, r4, #0
    28f4:	00010000 	andeq	r0, r1, r0
    28f8:	00223450 	eoreq	r3, r2, r0, asr r4
		umwait (IM_INIT);
    28fc:	00223e00 	eoreq	r3, r2, r0, lsl #28
		release;
    2900:	73000200 	movwvc	r0, #512	; 0x200
	savedata (data);
    2904:	00223e18 	eoreq	r3, r2, r8, lsl lr
	len = MAX_LINE_LENGTH;
    2908:	00224000 	eoreq	r4, r2, r0
	io (IM_READ, __cport, READ, ptr, 1);
    290c:	70000200 	andvc	r0, r0, r0, lsl #4
    2910:	00000018 	andeq	r0, r0, r8, lsl r0
    2914:	00000000 	andeq	r0, r0, r0
    2918:	00223a00 	eoreq	r3, r2, r0, lsl #20
	if (ptr == (char*) data) { // new line
    291c:	00225800 	eoreq	r5, r2, r0, lsl #16
    2920:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			proceed (IM_BIN);
    292c:	00002810 	andeq	r2, r0, r0, lsl r8
		if (*ptr < 0x20)
    2930:	00002812 	andeq	r2, r0, r2, lsl r8
    2934:	00500001 	subseq	r0, r0, r1
			proceed (IM_READ);
    2938:	00000000 	andeq	r0, r0, r0
    293c:	0c000000 	stceq	0, cr0, [r0], {-0}
	if (*ptr == '\n' || *ptr == '\r') {
    2940:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    2944:	01000028 	tsteq	r0, r8, lsr #32
    2948:	00005000 	andeq	r5, r0, r0
		*ptr = '\0';
    294c:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    2950:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
		finish;
    2954:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
	if (len) {
    2958:	00010000 	andeq	r0, r1, r0
		ptr++;
    295c:	00000050 	andeq	r0, r0, r0, asr r0
    2960:	00000000 	andeq	r0, r0, r0
		len--;
    2964:	0027e000 	eoreq	lr, r7, r0
	proceed (IM_READ);
    2968:	0027ea00 	eoreq	lr, r7, r0, lsl #20
	io (IM_BIN, __cport, READ, ptr, 1);
    296c:	50000100 	andpl	r0, r0, r0, lsl #2
    2970:	000027ec 	andeq	r2, r0, ip, ror #15
    2974:	000027fa 	strdeq	r2, [r0], -sl
    2978:	00500001 	subseq	r0, r0, r1
    297c:	00000000 	andeq	r0, r0, r0
	len -= 2;
    2980:	e0000000 	and	r0, r0, r0
	if (len > *ptr + 1) // 1 for 0x04
    2984:	e2000027 	and	r0, r0, #39	; 0x27
    2988:	01000027 	tsteq	r0, r7, lsr #32
		len = *ptr + 1;
    298c:	00005100 	andeq	r5, r0, r0, lsl #2
    2990:	00000000 	andeq	r0, r0, r0
	ptr++;
    2994:	27e00000 	strbcs	r0, [r0, r0]!
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2998:	27e40000 	strbcs	r0, [r4, r0]!
    299c:	00010000 	andeq	r0, r1, r0
    29a0:	00000052 	andeq	r0, r0, r2, asr r0
    29a4:	00000000 	andeq	r0, r0, r0
    29a8:	0027e000 	eoreq	lr, r7, r0
    29ac:	0027f800 	eoreq	pc, r7, r0, lsl #16
	len -= quant;
    29b0:	53000100 	movwpl	r0, #256	; 0x100
	...
	ptr += quant;
    29bc:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
    29c0:	000027c8 	andeq	r2, r0, r8, asr #15
endstrand
    29c4:	c8500001 	ldmdagt	r0, {r0}^
    29c8:	e0000027 	and	r0, r0, r7, lsr #32
	proceed (IM_BINL);
    29cc:	01000027 	tsteq	r0, r7, lsr #32
endstrand
    29d0:	00005300 	andeq	r5, r0, r0, lsl #6
    29d4:	00000000 	andeq	r0, r0, r0
    29d8:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
    29dc:	28220000 	stmdacs	r2!, {}	; <UNPREDICTABLE>
    29e0:	00010000 	andeq	r0, r1, r0
    29e4:	00282250 	eoreq	r2, r8, r0, asr r2
		if (res && (d < n))
    29e8:	00285c00 	eoreq	r5, r8, r0, lsl #24
    29ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			res [d] = (char) c;
    29f8:	00002814 	andeq	r2, r0, r4, lsl r8
		d++;
    29fc:	00002825 	andeq	r2, r0, r5, lsr #16
    2a00:	25510001 	ldrbcs	r0, [r1, #-1]
    2a04:	5c000028 	stcpl	0, cr0, [r0], {40}	; 0x28
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a08:	01000028 	tsteq	r0, r8, lsr #32
    2a0c:	00005600 	andeq	r5, r0, r0, lsl #12
    2a10:	00000000 	andeq	r0, r0, r0
				enci (10000);
    2a14:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a18:	28250000 	stmdacs	r5!, {}	; <UNPREDICTABLE>
    2a1c:	00010000 	andeq	r0, r1, r0
	d = 0;
    2a20:	00283452 	eoreq	r3, r8, r2, asr r4
		c = *fm++;
    2a24:	00283a00 	eoreq	r3, r8, r0, lsl #20
		if (c == '\\') {
    2a28:	52000100 	andpl	r0, r0, #0, 2
	...
				outc ('\\');
    2a34:	0000285c 	andeq	r2, r0, ip, asr r8
			if ((c = *fm++) == '\0') {
    2a38:	00002873 	andeq	r2, r0, r3, ror r8
				outc ('\\');
    2a3c:	74500001 	ldrbvc	r0, [r0], #-1
    2a40:	80000028 	andhi	r0, r0, r8, lsr #32
			outc (c);
    2a44:	01000028 	tsteq	r0, r8, lsr #32
    2a48:	28b85000 	ldmcs	r8!, {ip, lr}
			if (c == '\0')
    2a4c:	28cc0000 	stmiacs	ip, {}^	; <UNPREDICTABLE>
    2a50:	00010000 	andeq	r0, r1, r0
			outc (c);
    2a54:	00000050 	andeq	r0, r0, r0, asr r0
				outc (val);
    2a58:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    2a5c:	00286400 	eoreq	r6, r8, r0, lsl #8
		if (c == '%') {
    2a60:	00287000 	eoreq	r7, r8, r0
    2a64:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			c = *fm++;
    2a68:	00002870 	andeq	r2, r0, r0, ror r8
			switch (c) {
    2a6c:	00002873 	andeq	r2, r0, r3, ror r8
    2a70:	08730002 	ldmdaeq	r3!, {r1}^
    2a74:	00002874 	andeq	r2, r0, r4, ror r8
    2a78:	000028cc 	andeq	r2, r0, ip, asr #17
    2a7c:	00550001 	subseq	r0, r5, r1
    2a80:	00000000 	andeq	r0, r0, r0
    2a84:	9a000000 	bls	2a8c <__pi_vfparse+0x84>
    2a88:	ac000028 	stcge	0, cr0, [r0], {40}	; 0x28
				outc ('%');
    2a8c:	01000028 	tsteq	r0, r8, lsr #32
    2a90:	00005000 	andeq	r5, r0, r0
				outc (c);
    2a94:	00000000 	andeq	r0, r0, r0
    2a98:	28cc0000 	stmiacs	ip, {}^	; <UNPREDICTABLE>
    2a9c:	28e80000 	stmiacs	r8!, {}^	; <UNPREDICTABLE>
				if (c == '\0')
    2aa0:	00010000 	andeq	r0, r1, r0
				return d;
    2aa4:	0029ce50 	eoreq	ip, r9, r0, asr lr
}
    2aa8:	0029d700 	eoreq	sp, r9, r0, lsl #14
    2aac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (c) {
    2ab8:	000028d4 	ldrdeq	r2, [r0], -r4
				for (i = 12; ; i -= 4) {
    2abc:	000028f6 	strdeq	r2, [r0], -r6
				val = (word) va_arg (ap, aword);
    2ac0:	f6540001 			; <UNDEFINED> instruction: 0xf6540001
						[ (val >> i) & 0xf ]);
    2ac4:	fd000028 	stc2	0, cr0, [r0, #-160]	; 0xffffff60
    2ac8:	01000028 	tsteq	r0, r8, lsr #32
    2acc:	28fd5000 	ldmcs	sp!, {ip, lr}^
					outc (__pi_hex_enc_table
    2ad0:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    2ad4:	00010000 	andeq	r0, r1, r0
					if (i == 0)
    2ad8:	00290254 	eoreq	r0, r9, r4, asr r2
    2adc:	00290c00 	eoreq	r0, r9, r0, lsl #24
				for (i = 12; ; i -= 4) {
    2ae0:	50000100 	andpl	r0, r0, r0, lsl #2
				val = (word) va_arg (ap, aword);
    2ae4:	0000290c 	andeq	r2, r0, ip, lsl #18
				if (c == 'd' && (val & 0x8000) != 0) {
    2ae8:	000029ca 	andeq	r2, r0, sl, asr #19
				val = (word) va_arg (ap, aword);
    2aec:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
				if (c == 'd' && (val & 0x8000) != 0) {
    2af0:	d4000029 	strle	r0, [r0], #-41	; 0xffffffd7
    2af4:	01000029 	tsteq	r0, r9, lsr #32
					outc ('-');
    2af8:	29d45400 	ldmibcs	r4, {sl, ip, lr}^
    2afc:	29d70000 	ldmibcs	r7, {}^	; <UNPREDICTABLE>
					val = (~val) + 1;
    2b00:	00020000 	andeq	r0, r2, r0
    2b04:	00000872 	andeq	r0, r0, r2, ror r8
				for (i = 12; ; i -= 4) {
    2b08:	00000000 	andeq	r0, r0, r0
				enci (10000);
    2b0c:	29ae0000 	stmibcs	lr!, {}	; <UNPREDICTABLE>
    2b10:	29b00000 	ldmibcs	r0!, {}	; <UNPREDICTABLE>
    2b14:	00010000 	andeq	r0, r1, r0
    2b18:	0029b050 	eoreq	fp, r9, r0, asr r0
    2b1c:	0029ca00 	eoreq	ip, r9, r0, lsl #20
    2b20:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2b2c:	00002c38 	andeq	r2, r0, r8, lsr ip
    2b30:	00002c4f 	andeq	r2, r0, pc, asr #24
    2b34:	4f500001 	svcmi	0x00500001
    2b38:	5600002c 	strpl	r0, [r0], -ip, lsr #32
    2b3c:	0100002c 	tsteq	r0, ip, lsr #32
    2b40:	2c565400 	cfldrdcs	mvd5, [r6], {-0}
    2b44:	2c580000 	mracs	r0, r8, acc0
    2b48:	00010000 	andeq	r0, r1, r0
    2b4c:	002c5850 	eoreq	r5, ip, r0, asr r8
    2b50:	002c6800 	eoreq	r6, ip, r0, lsl #16
				if (c == 'd' || c == 'u') {
    2b54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2b58:	00002c68 	andeq	r2, r0, r8, ror #24
					if (c == 'd' &&
    2b5c:	00002c77 	andeq	r2, r0, r7, ror ip
					val = va_arg (ap, lword);
    2b60:	77500001 	ldrbvc	r0, [r0, -r1]
					fm++;
    2b64:	8800002c 	stmdahi	r0, {r2, r3, r5}
					if (c == 'd' &&
    2b68:	0100002c 	tsteq	r0, ip, lsr #32
    2b6c:	00005400 	andeq	r5, r0, r0, lsl #8
						outc ('-');
    2b70:	00000000 	andeq	r0, r0, r0
    2b74:	2c380000 	ldccs	0, cr0, [r8], #-0
						val = (~val) + 1;
    2b78:	2c4c0000 	marcs	acc0, r0, ip
				enci (10000);
    2b7c:	00010000 	andeq	r0, r1, r0
					enci (1000000000UL);
    2b80:	002c4c51 	eoreq	r4, ip, r1, asr ip
    2b84:	002c4f00 	eoreq	r4, ip, r0, lsl #30
    2b88:	52000100 	andpl	r0, r0, #0, 2
    2b8c:	00002c4f 	andeq	r2, r0, pc, asr #24
    2b90:	00002c56 	andeq	r2, r0, r6, asr ip
    2b94:	56560001 	ldrbpl	r0, [r6], -r1
    2b98:	5b00002c 	blpl	2c50 <vform+0x18>
    2b9c:	0100002c 	tsteq	r0, ip, lsr #32
    2ba0:	2c5b5100 	ldfcse	f5, [fp], {-0}
    2ba4:	2c880000 	stccs	0, cr0, [r8], {0}
    2ba8:	00010000 	andeq	r0, r1, r0
    2bac:	00000056 	andeq	r0, r0, r6, asr r0
    2bb0:	00000000 	andeq	r0, r0, r0
    2bb4:	002c3800 	eoreq	r3, ip, r0, lsl #16
    2bb8:	002c4000 	eoreq	r4, ip, r0
    2bbc:	52000100 	andpl	r0, r0, #0, 2
    2bc0:	00002c44 	andeq	r2, r0, r4, asr #24
				} else if (c == 'x') {
    2bc4:	00002c48 	andeq	r2, r0, r8, asr #24
					for (i = 28; ; i -= 4) {
    2bc8:	50520001 	subspl	r0, r2, r1
					val = va_arg (ap, lword);
    2bcc:	5600002c 	strpl	r0, [r0], -ip, lsr #32
							[ (val >> i) & 0xf ]);
    2bd0:	0100002c 	tsteq	r0, ip, lsr #32
    2bd4:	2c625700 	stclcs	7, cr5, [r2], #-0
						outc (__pi_hex_enc_table
    2bd8:	2c880000 	stccs	0, cr0, [r8], {0}
    2bdc:	00010000 	andeq	r0, r1, r0
    2be0:	00000057 	andeq	r0, r0, r7, asr r0
						if (i == 0)
    2be4:	00000000 	andeq	r0, r0, r0
    2be8:	002c6200 	eoreq	r6, ip, r0, lsl #4
					for (i = 28; ; i -= 4) {
    2bec:	002c8400 	eoreq	r8, ip, r0, lsl #8
					outc ('%');
    2bf0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2bf4:	00002c84 	andeq	r2, r0, r4, lsl #25
    2bf8:	00002c88 	andeq	r2, r0, r8, lsl #25
					outc ('l');
    2bfc:	00580001 	subseq	r0, r8, r1
    2c00:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    2c04:	7c000000 	stcvc	0, cr0, [r0], {-0}
				outc (val);
    2c08:	8000002c 	andhi	r0, r0, ip, lsr #32
    2c0c:	0100002c 	tsteq	r0, ip, lsr #32
				while (*st != '\0') {
    2c10:	00005000 	andeq	r5, r0, r0
    2c14:	00000000 	andeq	r0, r0, r0
    2c18:	2a080000 	bcs	202c20 <__ccfg+0x1e2c78>
    2c1c:	2a220000 	bcs	882c24 <__ccfg+0x862c7c>
					outc (*st);
    2c20:	00010000 	andeq	r0, r1, r0
    2c24:	00000050 	andeq	r0, r0, r0, asr r0
					st++;
    2c28:	00000000 	andeq	r0, r0, r0
		c = *fm++;
    2c2c:	002a0800 	eoreq	r0, sl, r0, lsl #16
    2c30:	002a2200 	eoreq	r2, sl, r0, lsl #4
    2c34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (res != NULL) {
    2c40:	00002a08 	andeq	r2, r0, r8, lsl #20
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c44:	00002a22 	andeq	r2, r0, r2, lsr #20
    2c48:	32520001 	subscc	r0, r2, #1
    2c4c:	5e00002a 	cdppl	0, 0, cr0, cr0, cr10, {1}
}
    2c50:	0100002a 	tsteq	r0, sl, lsr #32
    2c54:	2a6c5500 	bcs	1b1805c <__ccfg+0x1af80b4>
	fml = strlen (fm) + 17;
    2c58:	2c2a0000 	stccs	0, cr0, [sl], #-0
    2c5c:	00010000 	andeq	r0, r1, r0
    2c60:	00000055 	andeq	r0, r0, r5, asr r0
	if ((res = (char*) umalloc (fml)) == NULL)
    2c64:	00000000 	andeq	r0, r0, r0
    2c68:	002a0800 	eoreq	r0, sl, r0, lsl #16
    2c6c:	002a0c00 	eoreq	r0, sl, r0, lsl #24
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c70:	53000100 	movwpl	r0, #256	; 0x100
    2c74:	00002a0e 	andeq	r2, r0, lr, lsl #20
    2c78:	00002a10 	andeq	r2, r0, r0, lsl sl
    2c7c:	93530003 	cmpls	r3, #3
		ufree (res);
    2c80:	002a1004 	eoreq	r1, sl, r4
		goto Again;
    2c84:	002a5a00 	eoreq	r5, sl, r0, lsl #20
	if (buf == NULL || fmt == NULL)
    2c88:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c8c:	2a5a0493 	bcs	1683ee0 <__ccfg+0x1663f38>
	if (buf == NULL || fmt == NULL)
    2c90:	2aae0000 	bcs	feb82c98 <_estack+0xdeb7dc98>
    2c94:	00030000 	andeq	r0, r3, r0
    2c98:	ae049354 	mcrge	3, 0, r9, cr4, cr4, {2}
		    	    case 'u': scanu (lword); break;
    2c9c:	ba00002a 	blt	2d4c <vscan+0xc4>
			while (isspace (*buf)) buf++;
    2ca0:	0300002a 	movweq	r0, #42	; 0x2a
    2ca4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	while (*fmt != '\0') {
    2ca8:	00002ac2 	andeq	r2, r0, r2, asr #21
		if (*fmt++ != '%')
    2cac:	00002ae4 	andeq	r2, r0, r4, ror #21
		switch (*fmt++) {
    2cb0:	93540003 	cmpls	r4, #3
    2cb4:	002ae804 	eoreq	lr, sl, r4, lsl #16
    2cb8:	002b6200 	eoreq	r6, fp, r0, lsl #4
    2cbc:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2cc0:	2b680493 	blcs	1a03f14 <__ccfg+0x19e3f6c>
    2cc4:	2b7c0000 	blcs	1f02ccc <__ccfg+0x1ee2d24>
    2cc8:	00030000 	andeq	r0, r3, r0
}
    2ccc:	c2049354 	andgt	r9, r4, #84, 6	; 0x50000001
		switch (*fmt++) {
    2cd0:	ce00002b 	cdpgt	0, 0, cr0, cr0, cr11, {1}
    2cd4:	0300002b 	movweq	r0, #43	; 0x2b
    2cd8:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2cdc:	00002bf0 	strdeq	r2, [r0], -r0
			while (isspace (*buf)) buf++;
    2ce0:	00002c02 	andeq	r2, r0, r2, lsl #24
    2ce4:	93540003 	cmpls	r4, #3
    2ce8:	002c0604 	eoreq	r0, ip, r4, lsl #12
    2cec:	002c0e00 	eoreq	r0, ip, r0, lsl #28
    2cf0:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2cf4:	2c120493 	cfldrscs	mvf0, [r2], {147}	; 0x93
			if (*buf == '\0')
    2cf8:	2c380000 	ldccs	0, cr0, [r8], #-0
			if (*buf != ',') {
    2cfc:	00030000 	andeq	r0, r3, r0
			sap = va_arg (ap, char*);
    2d00:	00049354 	andeq	r9, r4, r4, asr r3
			nc++;
    2d04:	00000000 	andeq	r0, r0, r0
			if (*buf != ',') {
    2d08:	26000000 	strcs	r0, [r0], -r0
				while (!isspace (*buf) && *buf != ',' &&
    2d0c:	3000002a 	andcc	r0, r0, sl, lsr #32
    2d10:	0100002a 	tsteq	r0, sl, lsr #32
    2d14:	2a305900 	bcs	c1911c <__ccfg+0xbf9174>
    2d18:	2a320000 	bcs	c82d20 <__ccfg+0xc62d78>
    2d1c:	00020000 	andeq	r0, r2, r0
    2d20:	2a320072 	bcs	c82ef0 <__ccfg+0xc62f48>
    2d24:	2a560000 	bcs	1582d2c <__ccfg+0x1562d84>
			while (isspace (*buf)) buf++;
    2d28:	00010000 	andeq	r0, r1, r0
    2d2c:	002a5e59 	eoreq	r5, sl, r9, asr lr
    2d30:	002a6c00 	eoreq	r6, sl, r0, lsl #24
    2d34:	59000100 	stmdbpl	r0, {r8}
    2d38:	00002a6c 	andeq	r2, r0, ip, ror #20
			if (*buf == ',') buf++;
    2d3c:	00002aa4 	andeq	r2, r0, r4, lsr #21
    2d40:	ae580001 	cdpge	0, 5, cr0, cr8, cr1, {0}
			*sap = '\0';
    2d44:	be00002a 	cdplt	0, 0, cr0, cr0, cr10, {1}
			break;
    2d48:	0100002a 	tsteq	r0, sl, lsr #32
		    case 'd': scani (word); break;
    2d4c:	2abe5800 	bcs	fef98d54 <_estack+0xdef93d54>
    2d50:	2ac60000 	bcs	ff182d58 <_estack+0xdf17dd58>
    2d54:	00020000 	andeq	r0, r2, r0
    2d58:	2ae40172 	bcs	ff903328 <_estack+0xdf8fe328>
    2d5c:	2b0e0000 	blcs	382d64 <__ccfg+0x362dbc>
    2d60:	00010000 	andeq	r0, r1, r0
    2d64:	002b1258 	eoreq	r1, fp, r8, asr r2
    2d68:	002b1600 	eoreq	r1, fp, r0, lsl #12
    2d6c:	50000100 	andpl	r0, r0, r0, lsl #2
    2d70:	00002b20 	andeq	r2, r0, r0, lsr #22
    2d74:	00002b2a 	andeq	r2, r0, sl, lsr #22
    2d78:	4a500001 	bmi	1402d84 <__ccfg+0x13e2ddc>
    2d7c:	4c00002b 	stcmi	0, cr0, [r0], {43}	; 0x2b
    2d80:	0100002b 	tsteq	r0, fp, lsr #32
    2d84:	2b525000 	blcs	1496d8c <__ccfg+0x1476de4>
    2d88:	2b540000 	blcs	1502d90 <__ccfg+0x14e2de8>
    2d8c:	00010000 	andeq	r0, r1, r0
    2d90:	002b5458 	eoreq	r5, fp, r8, asr r4
    2d94:	002b7700 	eoreq	r7, fp, r0, lsl #14
    2d98:	53000100 	movwpl	r0, #256	; 0x100
    2d9c:	00002b86 	andeq	r2, r0, r6, lsl #23
    2da0:	00002b8a 	andeq	r2, r0, sl, lsl #23
    2da4:	94590001 	ldrbls	r0, [r9], #-1
    2da8:	b400002b 	strlt	r0, [r0], #-43	; 0xffffffd5
    2dac:	0100002b 	tsteq	r0, fp, lsr #32
    2db0:	2bba5900 	blcs	fee991b8 <_estack+0xdee941b8>
    2db4:	2bbc0000 	blcs	fef02dbc <_estack+0xdeefddbc>
    2db8:	00010000 	andeq	r0, r1, r0
		    case 'u': scanu (word); break;
    2dbc:	002bc259 	eoreq	ip, fp, r9, asr r2
    2dc0:	002bd000 	eoreq	sp, fp, r0
    2dc4:	53000100 	movwpl	r0, #256	; 0x100
    2dc8:	00002bf0 	strdeq	r2, [r0], -r0
    2dcc:	00002bf9 	strdeq	r2, [r0], -r9
    2dd0:	02530001 	subseq	r0, r3, #1
    2dd4:	1600002c 	strne	r0, [r0], -ip, lsr #32
    2dd8:	0100002c 	tsteq	r0, ip, lsr #32
    2ddc:	2c2a5800 	stccs	8, cr5, [sl], #-0
    2de0:	2c380000 	ldccs	0, cr0, [r8], #-0
    2de4:	00010000 	andeq	r0, r1, r0
    2de8:	00000059 	andeq	r0, r0, r9, asr r0
    2dec:	00000000 	andeq	r0, r0, r0
    2df0:	002ac600 	eoreq	ip, sl, r0, lsl #12
    2df4:	002ae400 	eoreq	lr, sl, r0, lsl #8
    2df8:	58000100 	stmdapl	r0, {r8}
	...
		    case 'x': scanx (word); break;
    2e04:	00002af0 	strdeq	r2, [r0], -r0
    2e08:	00002b04 	andeq	r2, r0, r4, lsl #22
    2e0c:	08590001 	ldmdaeq	r9, {r0}^
    2e10:	3600002b 	strcc	r0, [r0], -fp, lsr #32
    2e14:	0100002b 	tsteq	r0, fp, lsr #32
    2e18:	2b3e5900 	blcs	f99220 <__ccfg+0xf79278>
    2e1c:	2b520000 	blcs	1482e24 <__ccfg+0x1462e7c>
    2e20:	00010000 	andeq	r0, r1, r0
    2e24:	00000059 	andeq	r0, r0, r9, asr r0
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	002b0e00 	eoreq	r0, fp, r0, lsl #28
    2e30:	002b4000 	eoreq	r4, fp, r0
    2e34:	58000100 	stmdapl	r0, {r8}
    2e38:	00002b40 	andeq	r2, r0, r0, asr #22
    2e3c:	00002b4c 	andeq	r2, r0, ip, asr #22
    2e40:	4c530001 	mrrcmi	0, 0, r0, r3, cr1
    2e44:	5200002b 	andpl	r0, r0, #43	; 0x2b
    2e48:	0100002b 	tsteq	r0, fp, lsr #32
    2e4c:	00005800 	andeq	r5, r0, r0, lsl #16
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	2b7c0000 	blcs	1f02e5c <__ccfg+0x1ee2eb4>
    2e58:	2bc20000 	blcs	ff082e60 <_estack+0xdf07de60>
    2e5c:	00010000 	andeq	r0, r1, r0
    2e60:	0000005a 	andeq	r0, r0, sl, asr r0
    2e64:	00000000 	andeq	r0, r0, r0
    2e68:	002b8200 	eoreq	r8, fp, r0, lsl #4
    2e6c:	002bac00 	eoreq	sl, fp, r0, lsl #24
    2e70:	58000100 	stmdapl	r0, {r8}
    2e74:	00002bac 	andeq	r2, r0, ip, lsr #23
    2e78:	00002bbc 			; <UNDEFINED> instruction: 0x00002bbc
			switch (*fmt++) {
    2e7c:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    2e80:	c200002b 	andgt	r0, r0, #43	; 0x2b
    2e84:	0100002b 	tsteq	r0, fp, lsr #32
    2e88:	00005800 	andeq	r5, r0, r0, lsl #16
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	2bd00000 	blcs	ff402e98 <_estack+0xdf3fde98>
		    	    case 'd': scani (lword); break;
    2e94:	2bf00000 	blcs	ffc02e9c <_estack+0xdfbfde9c>
    2e98:	00010000 	andeq	r0, r1, r0
    2e9c:	00000058 	andeq	r0, r0, r8, asr r0
    2ea0:	00000000 	andeq	r0, r0, r0
    2ea4:	002c0200 	eoreq	r0, ip, r0, lsl #4
    2ea8:	002c0600 	eoreq	r0, ip, r0, lsl #12
    2eac:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2eb0:	002c0600 	eoreq	r0, ip, r0, lsl #12
    2eb4:	002c0e00 	eoreq	r0, ip, r0, lsl #28
    2eb8:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2ebc:	0000007c 	andeq	r0, r0, ip, ror r0
    2ec0:	00000000 	andeq	r0, r0, r0
    2ec4:	002c1a00 	eoreq	r1, ip, r0, lsl #20
    2ec8:	002c2800 	eoreq	r2, ip, r0, lsl #16
    2ecc:	58000100 	stmdapl	r0, {r8}
	...
    2ed8:	00002c88 	andeq	r2, r0, r8, lsl #25
    2edc:	00002ca4 	andeq	r2, r0, r4, lsr #25
    2ee0:	e2500001 	subs	r0, r0, #1
    2ee4:	f400002c 	vst4.8	{d0-d3}, [r0 :128], ip
    2ee8:	0100002c 	tsteq	r0, ip, lsr #32
    2eec:	2cf45300 	ldclcs	3, cr5, [r4]
		    	    case 'x': scanx (lword); break;
    2ef0:	2d080000 	stccs	0, cr0, [r8, #-0]
    2ef4:	00010000 	andeq	r0, r1, r0
    2ef8:	002d0a56 	eoreq	r0, sp, r6, asr sl
    2efc:	002d2600 	eoreq	r2, sp, r0, lsl #12
    2f00:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2f04:	00002d38 	andeq	r2, r0, r8, lsr sp
    2f08:	00002d44 	andeq	r2, r0, r4, asr #26
    2f0c:	44560001 	ldrbmi	r0, [r6], #-1
    2f10:	4a00002d 	bmi	2fcc <vscan+0x344>
    2f14:	0100002d 	tsteq	r0, sp, lsr #32
    2f18:	2d505300 	ldclcs	3, cr5, [r0, #-0]
    2f1c:	2d540000 	ldclcs	0, cr0, [r4, #-0]
    2f20:	00010000 	andeq	r0, r1, r0
    2f24:	002d5453 	eoreq	r5, sp, r3, asr r4
    2f28:	002d6400 	eoreq	r6, sp, r0, lsl #8
    2f2c:	5e000100 	adfpls	f0, f0, f0
    2f30:	00002d64 	andeq	r2, r0, r4, ror #26
    2f34:	00002d7a 	andeq	r2, r0, sl, ror sp
    2f38:	7a530001 	bvc	14c2f44 <__ccfg+0x14a2f9c>
    2f3c:	8200002d 	andhi	r0, r0, #45	; 0x2d
    2f40:	0100002d 	tsteq	r0, sp, lsr #32
    2f44:	2d885e00 	stccs	14, cr5, [r8]
    2f48:	2da40000 	stccs	0, cr0, [r4]
    2f4c:	00010000 	andeq	r0, r1, r0
    2f50:	002da453 	eoreq	sl, sp, r3, asr r4
    2f54:	002daa00 	eoreq	sl, sp, r0, lsl #20
    2f58:	5e000100 	adfpls	f0, f0, f0
    2f5c:	00002daa 	andeq	r2, r0, sl, lsr #27
		    	    case 'd': scani (lword); break;
    2f60:	00002dac 	andeq	r2, r0, ip, lsr #27
    2f64:	b8530001 	ldmdalt	r3, {r0}^
    2f68:	ba00002d 	blt	3024 <SafeHapiVoid+0xc>
    2f6c:	0100002d 	tsteq	r0, sp, lsr #32
    2f70:	2dba5e00 	ldccs	14, cr5, [sl]
    2f74:	2dce0000 	stclcs	0, cr0, [lr]
    2f78:	00010000 	andeq	r0, r1, r0
		    	    case 'u': scanu (lword); break;
    2f7c:	002dce53 	eoreq	ip, sp, r3, asr lr
    2f80:	002dde00 	eoreq	sp, sp, r0, lsl #28
    2f84:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2f88:	00002dde 	ldrdeq	r2, [r0], -lr
    2f8c:	00002df2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2f90:	00530001 	subseq	r0, r3, r1
    2f94:	0200002e 	andeq	r0, r0, #46	; 0x2e
    2f98:	0100002e 	tsteq	r0, lr, lsr #32
    2f9c:	2e025600 	cfmadd32cs	mvax0, mvfx5, mvfx2, mvfx0
    2fa0:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    2fa4:	00010000 	andeq	r0, r1, r0
    2fa8:	002e1a53 	eoreq	r1, lr, r3, asr sl
    2fac:	002e3400 	eoreq	r3, lr, r0, lsl #8
    2fb0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2fb4:	00002e3a 	andeq	r2, r0, sl, lsr lr
    2fb8:	00002e5c 	andeq	r2, r0, ip, asr lr
    2fbc:	5c530001 	mrrcpl	0, 0, r0, r3, cr1
    2fc0:	6e00002e 	cdpvs	0, 0, cr0, cr0, cr14, {1}
		    	    case 'x': scanx (lword); break;
    2fc4:	0100002e 	tsteq	r0, lr, lsr #32
    2fc8:	2e945600 	cdpcs	6, 9, cr5, cr4, cr0, {0}
			if ((c = *buf++) == '\0')
    2fcc:	2e980000 	cdpcs	0, 9, cr0, cr8, cr0, {0}
    2fd0:	00010000 	andeq	r0, r1, r0
			sap = va_arg (ap, char*);
    2fd4:	002e9853 	eoreq	r9, lr, r3, asr r8
			nc++;
    2fd8:	002ea800 	eoreq	sl, lr, r0, lsl #16
			break;
    2fdc:	58000100 	stmdapl	r0, {r8}
			while (isspace (*buf)) buf++;
    2fe0:	00002ea8 	andeq	r2, r0, r8, lsr #29
    2fe4:	00002eb8 			; <UNDEFINED> instruction: 0x00002eb8
    2fe8:	b8530001 	ldmdalt	r3, {r0}^
						*sap++ = *buf++;
    2fec:	c200002e 	andgt	r0, r0, #46	; 0x2e
    2ff0:	0100002e 	tsteq	r0, lr, lsr #32
			while (isspace (*buf)) buf++;
    2ff4:	2ec85800 	cdpcs	8, 12, cr5, cr8, cr0, {0}
    2ff8:	2eea0000 	cdpcs	0, 14, cr0, cr10, cr0, {0}
    2ffc:	00010000 	andeq	r0, r1, r0
		return 0;
    3000:	002ef053 	eoreq	pc, lr, r3, asr r0	; <UNPREDICTABLE>
    3004:	002f0000 	eoreq	r0, pc, r0
		    case 'x': scanx (word); break;
    3008:	53000100 	movwpl	r0, #256	; 0x100
    300c:	00002f00 	andeq	r2, r0, r0, lsl #30
		    	    case 'x': scanx (lword); break;
    3010:	00002f1a 	andeq	r2, r0, sl, lsl pc
    3014:	20560001 	subscs	r0, r6, r1
    3018:	4000002f 	andmi	r0, r0, pc, lsr #32
    301c:	0100002f 	tsteq	r0, pc, lsr #32
    3020:	2f405300 	svccs	0x00405300
    3024:	2f520000 	svccs	0x00520000
    3028:	00010000 	andeq	r0, r1, r0
    302c:	002f6656 	eoreq	r6, pc, r6, asr r6	; <UNPREDICTABLE>
    3030:	002f6a00 	eoreq	r6, pc, r0, lsl #20
    3034:	58000100 	stmdapl	r0, {r8}
    3038:	00002f6a 	andeq	r2, r0, sl, ror #30
    303c:	00002f6e 	andeq	r2, r0, lr, ror #30
    3040:	78530001 	ldmdavc	r3, {r0}^
    3044:	7a00002f 	bvc	3108 <NOROM_OSCClockSourceSet+0x50>
    3048:	0100002f 	tsteq	r0, pc, lsr #32
    304c:	2f7a5800 	svccs	0x007a5800
    3050:	2f900000 	svccs	0x00900000
    3054:	00010000 	andeq	r0, r1, r0
    3058:	002f9053 	eoreq	r9, pc, r3, asr r0	; <UNPREDICTABLE>
    305c:	002fa000 	eoreq	sl, pc, r0
    3060:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3064:	00002fa0 	andeq	r2, r0, r0, lsr #31
    3068:	00002fb6 			; <UNDEFINED> instruction: 0x00002fb6
    306c:	c0530001 	subsgt	r0, r3, r1
    3070:	c200002f 	andgt	r0, r0, #47	; 0x2f
    3074:	0100002f 	tsteq	r0, pc, lsr #32
    3078:	2fc25600 	svccs	0x00c25600
    307c:	2fca0000 	svccs	0x00ca0000
    3080:	00010000 	andeq	r0, r1, r0
    3084:	002fce53 	eoreq	ip, pc, r3, asr lr	; <UNPREDICTABLE>
    3088:	002fde00 	eoreq	sp, pc, r0, lsl #28
    308c:	53000100 	movwpl	r0, #256	; 0x100
    3090:	00002fde 	ldrdeq	r2, [r0], -lr
    3094:	00002fec 	andeq	r2, r0, ip, ror #31
    3098:	ec560001 	mrrc	0, 0, r0, r6, cr1
    309c:	f200002f 	vhadd.s8	d0, d0, d31
    30a0:	0100002f 	tsteq	r0, pc, lsr #32
    30a4:	2ff25800 	svccs	0x00f25800
    30a8:	2ffe0000 	svccs	0x00fe0000
    30ac:	00010000 	andeq	r0, r1, r0
    30b0:	002ffe56 	eoreq	pc, pc, r6, asr lr	; <UNPREDICTABLE>
    30b4:	00300600 	eorseq	r0, r0, r0, lsl #12
    30b8:	50000100 	andpl	r0, r0, r0, lsl #2
    30bc:	00003006 	andeq	r3, r0, r6
    30c0:	00003018 	andeq	r3, r0, r8, lsl r0
    30c4:	00530001 	subseq	r0, r3, r1
    30c8:	00000000 	andeq	r0, r0, r0
    30cc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    30d0:	a600002c 	strge	r0, [r0], -ip, lsr #32
    30d4:	0100002c 	tsteq	r0, ip, lsr #32
    30d8:	2ca65100 	stfcss	f5, [r6]
    30dc:	2cac0000 	stccs	0, cr0, [ip]
    30e0:	00010000 	andeq	r0, r1, r0
    30e4:	002cac56 	eoreq	sl, ip, r6, asr ip
    30e8:	002cca00 	eoreq	ip, ip, r0, lsl #20
    30ec:	51000100 	mrspl	r0, (UNDEF: 16)
    30f0:	00002cd0 	ldrdeq	r2, [r0], -r0
    30f4:	00003018 	andeq	r3, r0, r8, lsl r0
    30f8:	00510001 	subseq	r0, r1, r1
    30fc:	00000000 	andeq	r0, r0, r0
    3100:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3104:	8800002c 	stmdahi	r0, {r2, r3, r5}
    3108:	0100002c 	tsteq	r0, ip, lsr #32
    310c:	2c885200 	sfmcs	f5, 4, [r8], {0}
    3110:	2ca40000 	stccs	0, cr0, [r4]
    3114:	00030000 	andeq	r0, r3, r0
    3118:	4a049352 	bmi	127e68 <__ccfg+0x107ec0>
    311c:	7e00002d 	cdpvc	0, 0, cr0, cr0, cr13, {1}
    3120:	0100002d 	tsteq	r0, sp, lsr #32
    3124:	2da45200 	sfmcs	f5, 4, [r4]
    3128:	2daa0000 	stccs	0, cr0, [sl]
    312c:	00010000 	andeq	r0, r1, r0
    3130:	002dba52 	eoreq	fp, sp, r2, asr sl
    3134:	002dd400 	eoreq	sp, sp, r0, lsl #8
    3138:	52000100 	andpl	r0, r0, #0, 2
    313c:	00002e02 	andeq	r2, r0, r2, lsl #28
    3140:	00002e2a 	andeq	r2, r0, sl, lsr #28
    3144:	7c520001 	mrrcvc	0, 0, r0, r2, cr1
    3148:	bc00002e 	stclt	0, cr0, [r0], {46}	; 0x2e
    314c:	0100002e 	tsteq	r0, lr, lsr #32
    3150:	2eea5200 	cdpcs	2, 14, cr5, cr10, cr0, {0}
    3154:	2f100000 	svccs	0x00100000
    3158:	00010000 	andeq	r0, r1, r0
    315c:	002f6052 	eoreq	r6, pc, r2, asr r0	; <UNPREDICTABLE>
    3160:	002f6a00 	eoreq	r6, pc, r0, lsl #20
    3164:	52000100 	andpl	r0, r0, #0, 2
    3168:	00002f7a 	andeq	r2, r0, sl, ror pc
    316c:	00002f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    3170:	c2520001 	subsgt	r0, r2, #1
    3174:	d800002f 	stmdale	r0, {r0, r1, r2, r3, r5}
    3178:	0100002f 	tsteq	r0, pc, lsr #32
    317c:	2fde5200 	svccs	0x00de5200
    3180:	2fec0000 	svccs	0x00ec0000
    3184:	00010000 	andeq	r0, r1, r0
    3188:	002ffe52 	eoreq	pc, pc, r2, asr lr	; <UNPREDICTABLE>
    318c:	00300600 	eorseq	r0, r0, r0, lsl #12
    3190:	52000100 	andpl	r0, r0, #0, 2
	...
    319c:	00002d06 	andeq	r2, r0, r6, lsl #26
    31a0:	00002d08 	andeq	r2, r0, r8, lsl #26
    31a4:	80540001 	subshi	r0, r4, r1
    31a8:	a400002d 	strge	r0, [r0], #-45	; 0xffffffd3
    31ac:	0100002d 	tsteq	r0, sp, lsr #32
    31b0:	2daa5400 	cfstrscs	mvf5, [sl]
    31b4:	2dba0000 	ldccs	0, cr0, [sl]
    31b8:	00010000 	andeq	r0, r1, r0
    31bc:	002dd654 	eoreq	sp, sp, r4, asr r6
    31c0:	002e0200 	eoreq	r0, lr, r0, lsl #4
    31c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    31c8:	00002e2c 	andeq	r2, r0, ip, lsr #28
    31cc:	00002e7c 	andeq	r2, r0, ip, ror lr
    31d0:	be540001 	cdplt	0, 5, cr0, cr4, cr1, {0}
    31d4:	ea00002e 	b	3294 <NOROM_RFCRfTrimRead+0x34>
    31d8:	0100002e 	tsteq	r0, lr, lsr #32
    31dc:	2f125400 	svccs	0x00125400
    31e0:	2f600000 	svccs	0x00600000
    31e4:	00010000 	andeq	r0, r1, r0
    31e8:	002f6a54 	eoreq	r6, pc, r4, asr sl	; <UNPREDICTABLE>
    31ec:	002f7a00 	eoreq	r7, pc, r0, lsl #20
    31f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    31f4:	00002f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    31f8:	00002fc2 	andeq	r2, r0, r2, asr #31
    31fc:	da540001 	ble	1503208 <__ccfg+0x14e3260>
    3200:	de00002f 	cdple	0, 0, cr0, cr0, cr15, {1}
    3204:	0100002f 	tsteq	r0, pc, lsr #32
    3208:	30065400 	andcc	r5, r6, r0, lsl #8
    320c:	30180000 	andscc	r0, r8, r0
    3210:	00010000 	andeq	r0, r1, r0
    3214:	00000054 	andeq	r0, r0, r4, asr r0
    3218:	00000000 	andeq	r0, r0, r0
    321c:	002d7a00 	eoreq	r7, sp, r0, lsl #20
    3220:	002da400 	eoreq	sl, sp, r0, lsl #8
    3224:	58000100 	stmdapl	r0, {r8}
    3228:	00002daa 	andeq	r2, r0, sl, lsr #27
    322c:	00002dba 			; <UNDEFINED> instruction: 0x00002dba
    3230:	00580001 	subseq	r0, r8, r1
    3234:	00000000 	andeq	r0, r0, r0
    3238:	5c000000 	stcpl	0, cr0, [r0], {-0}
    323c:	6e00002e 	cdpvs	0, 0, cr0, cr0, cr14, {1}
    3240:	0100002e 	tsteq	r0, lr, lsr #32
    3244:	2e6e5900 	vmulcs.f16	s11, s28, s0	; <UNPREDICTABLE>
    3248:	2e760000 	cdpcs	0, 7, cr0, cr6, cr0, {0}
    324c:	00010000 	andeq	r0, r1, r0
    3250:	00000050 	andeq	r0, r0, r0, asr r0
    3254:	00000000 	andeq	r0, r0, r0
    3258:	002eb800 	eoreq	fp, lr, r0, lsl #16
    325c:	002ee200 	eoreq	lr, lr, r0, lsl #4
    3260:	50000100 	andpl	r0, r0, r0, lsl #2
    3264:	00002f6a 	andeq	r2, r0, sl, ror #30
    3268:	00002f7a 	andeq	r2, r0, sl, ror pc
    326c:	00500001 	subseq	r0, r0, r1
    3270:	00000000 	andeq	r0, r0, r0
    3274:	40000000 	andmi	r0, r0, r0
    3278:	5200002f 	andpl	r0, r0, #47	; 0x2f
    327c:	0100002f 	tsteq	r0, pc, lsr #32
    3280:	2f525900 	svccs	0x00525900
    3284:	2f5a0000 	svccs	0x005a0000
    3288:	00010000 	andeq	r0, r1, r0
    328c:	00000050 	andeq	r0, r0, r0, asr r0
    3290:	00000000 	andeq	r0, r0, r0
    3294:	002fce00 	eoreq	ip, pc, r0, lsl #28
    3298:	002fde00 	eoreq	sp, pc, r0, lsl #28
    329c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    32a8:	00002d0a 	andeq	r2, r0, sl, lsl #26
    32ac:	00002d26 	andeq	r2, r0, r6, lsr #26
    32b0:	f05e0001 			; <UNDEFINED> instruction: 0xf05e0001
    32b4:	f200002f 	vhadd.s8	d0, d0, d31
    32b8:	0100002f 	tsteq	r0, pc, lsr #32
    32bc:	00005e00 	andeq	r5, r0, r0, lsl #28
    32c0:	00000000 	andeq	r0, r0, r0
    32c4:	30180000 	andscc	r0, r8, r0
    32c8:	301f0000 	andscc	r0, pc, r0
    32cc:	00010000 	andeq	r0, r1, r0
    32d0:	00301f50 	eorseq	r1, r0, r0, asr pc
    32d4:	00303600 	eorseq	r3, r0, r0, lsl #12
    32d8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    32dc:	00003036 	andeq	r3, r0, r6, lsr r0
    32e0:	0000303a 	andeq	r3, r0, sl, lsr r0
    32e4:	01f30004 	mvnseq	r0, r4
    32e8:	303a9f50 	eorscc	r9, sl, r0, asr pc
    32ec:	303c0000 	eorscc	r0, ip, r0
    32f0:	00010000 	andeq	r0, r1, r0
    32f4:	00303c56 	eorseq	r3, r0, r6, asr ip
    32f8:	00304000 	eorseq	r4, r0, r0
    32fc:	f3000400 	vshl.u8	d0, d0, d0
    3300:	009f5001 	addseq	r5, pc, r1
    3304:	00000000 	andeq	r0, r0, r0
    3308:	22000000 	andcs	r0, r0, #0
    330c:	2b000030 	blcs	33d4 <NOROM_RFCRTrim+0x24>
    3310:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    3314:	30007000 	andcc	r7, r0, r0
    3318:	302b9f29 	eorcc	r9, fp, r9, lsr #30
    331c:	30360000 	eorscc	r0, r6, r0
    3320:	00050000 	andeq	r0, r5, r0
    3324:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3328:	00303a9f 	mlaseq	r0, pc, sl, r3	; <UNPREDICTABLE>
    332c:	00303c00 	eorseq	r3, r0, r0, lsl #24
    3330:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    3334:	9f293000 	svcls	0x00293000
	...
    3348:	00500001 	subseq	r0, r0, r1
    334c:	00000000 	andeq	r0, r0, r0
    3350:	01000000 	mrseq	r0, (UNDEF: 0)
    3354:	00005600 	andeq	r5, r0, r0, lsl #12
    3358:	00000000 	andeq	r0, r0, r0
    335c:	00040000 	andeq	r0, r4, r0
    3360:	9f5001f3 	svcls	0x005001f3
	...
    336c:	00560001 	subseq	r0, r6, r1
    3370:	00000000 	andeq	r0, r0, r0
    3374:	04000000 	streq	r0, [r0], #-0
    3378:	5001f300 	andpl	pc, r1, r0, lsl #6
    337c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    338c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3398:	01f30004 	mvnseq	r0, r4
    339c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    33ac:	00050000 	andeq	r0, r5, r0
    33b0:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    33b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    33c0:	9f293000 	svcls	0x00293000
	...
    33cc:	00750005 	rsbseq	r0, r5, r5
    33d0:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    33d4:	00000000 	andeq	r0, r0, r0
    33d8:	44000000 	strmi	r0, [r0], #-0
    33dc:	56000030 			; <UNDEFINED> instruction: 0x56000030
    33e0:	07000030 	smladxeq	r0, r0, r0, r0
    33e4:	3f007000 	svccc	0x00007000
    33e8:	9f263f24 	svcls	0x00263f24
	...
    33f4:	0000304c 	andeq	r3, r0, ip, asr #32
    33f8:	00003054 	andeq	r3, r0, r4, asr r0
    33fc:	8072000d 	rsbshi	r0, r2, sp
    3400:	4800717a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    3404:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3408:	549f2634 	ldrpl	r2, [pc], #1588	; 3410 <NOROM_RFCRTrim+0x60>
    340c:	70000030 	andvc	r0, r0, r0, lsr r0
    3410:	0c000030 	stceq	0, cr0, [r0], {48}	; 0x30
    3414:	48007100 	stmdami	r0, {r8, ip, sp, lr}
    3418:	72264824 	eorvc	r4, r6, #36, 16	; 0x240000
    341c:	26341e00 	ldrtcs	r1, [r4], -r0, lsl #28
    3420:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3424:	00000000 	andeq	r0, r0, r0
    3428:	00307600 	eorseq	r7, r0, r0, lsl #12
    342c:	00308000 	eorseq	r8, r0, r0
    3430:	53000100 	movwpl	r0, #256	; 0x100
	...
    343c:	00003078 	andeq	r3, r0, r8, ror r0
    3440:	00003084 	andeq	r3, r0, r4, lsl #1
    3444:	00500001 	subseq	r0, r0, r1
    3448:	00000000 	andeq	r0, r0, r0
    344c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    3450:	d0000030 	andle	r0, r0, r0, lsr r0
    3454:	01000030 	tsteq	r0, r0, lsr r0
    3458:	30d05000 	sbcscc	r5, r0, r0
    345c:	310a0000 	mrscc	r0, (UNDEF: 10)
    3460:	00010000 	andeq	r0, r1, r0
    3464:	00310a55 	eorseq	r0, r1, r5, asr sl
    3468:	00311400 	eorseq	r1, r1, r0, lsl #8
    346c:	f3000400 	vshl.u8	d0, d0, d0
    3470:	009f5001 	addseq	r5, pc, r1
    3474:	00000000 	andeq	r0, r0, r0
    3478:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    347c:	be000030 	mcrlt	0, 0, r0, cr0, cr0, {1}
    3480:	01000030 	tsteq	r0, r0, lsr r0
    3484:	30be5100 	adcscc	r5, lr, r0, lsl #2
    3488:	30f60000 	rscscc	r0, r6, r0
    348c:	00010000 	andeq	r0, r1, r0
    3490:	0030f654 	eorseq	pc, r0, r4, asr r6	; <UNPREDICTABLE>
    3494:	00311400 	eorseq	r1, r1, r0, lsl #8
    3498:	f3000400 	vshl.u8	d0, d0, d0
    349c:	009f5101 	addseq	r5, pc, r1, lsl #2
    34a0:	00000000 	andeq	r0, r0, r0
    34a4:	f2000000 	vhadd.s8	d0, d0, d0
    34a8:	06000030 			; <UNDEFINED> instruction: 0x06000030
    34ac:	01000031 	tsteq	r0, r1, lsr r0
    34b0:	00005500 	andeq	r5, r0, r0, lsl #10
    34b4:	00000000 	andeq	r0, r0, r0
    34b8:	30f20000 	rscscc	r0, r2, r0
    34bc:	30f60000 	rscscc	r0, r6, r0
    34c0:	00010000 	andeq	r0, r1, r0
    34c4:	0030f654 	eorseq	pc, r0, r4, asr r6	; <UNPREDICTABLE>
    34c8:	00310600 	eorseq	r0, r1, r0, lsl #12
    34cc:	f3000400 	vshl.u8	d0, d0, d0
    34d0:	009f5101 	addseq	r5, pc, r1, lsl #2
    34d4:	00000000 	andeq	r0, r0, r0
    34d8:	14000000 	strne	r0, [r0], #-0
    34dc:	32000031 	andcc	r0, r0, #49	; 0x31
    34e0:	01000031 	tsteq	r0, r1, lsr r0
    34e4:	31325000 	teqcc	r2, r0
    34e8:	31400000 	mrscc	r0, (UNDEF: 64)
    34ec:	00040000 	andeq	r0, r4, r0
    34f0:	9f5001f3 	svcls	0x005001f3
	...
    3504:	00500001 	subseq	r0, r0, r1
    3508:	00000000 	andeq	r0, r0, r0
    350c:	01000000 	mrseq	r0, (UNDEF: 0)
    3510:	00005600 	andeq	r5, r0, r0, lsl #12
    3514:	00000000 	andeq	r0, r0, r0
    3518:	00040000 	andeq	r0, r4, r0
    351c:	9f5001f3 	svcls	0x005001f3
	...
    3530:	00550001 	subseq	r0, r5, r1
	...
    3540:	07000000 	streq	r0, [r0, -r0]
    3544:	73007000 	movwvc	r7, #0
    3548:	9f191c00 	svcls	0x00191c00
	...
    3554:	00700004 	rsbseq	r0, r0, r4
    3558:	00009f19 	andeq	r9, r0, r9, lsl pc
	...
    3568:	00040000 	andeq	r0, r4, r0
    356c:	9f07d00a 	svcls	0x0007d00a
	...
    3578:	00500001 	subseq	r0, r0, r1
    357c:	00000000 	andeq	r0, r0, r0
    3580:	05000000 	streq	r0, [r0, #-0]
    3584:	40007200 	andmi	r7, r0, r0, lsl #4
    3588:	00009f25 	andeq	r9, r0, r5, lsr #30
    358c:	00000000 	andeq	r0, r0, r0
    3590:	00010000 	andeq	r0, r1, r0
    3594:	00000050 	andeq	r0, r0, r0, asr r0
    3598:	00000000 	andeq	r0, r0, r0
    359c:	0a000400 	beq	45a4 <patable+0xe>
    35a0:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    35a4:	00000000 	andeq	r0, r0, r0
    35a8:	01000000 	mrseq	r0, (UNDEF: 0)
    35ac:	00005000 	andeq	r5, r0, r0
    35b0:	00000000 	andeq	r0, r0, r0
    35b4:	31920000 	orrscc	r0, r2, r0
    35b8:	319e0000 	orrscc	r0, lr, r0
    35bc:	00010000 	andeq	r0, r1, r0
    35c0:	00000050 	andeq	r0, r0, r0, asr r0
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	00319200 	eorseq	r9, r1, r0, lsl #4
    35cc:	00319e00 	eorseq	r9, r1, r0, lsl #28
    35d0:	53000100 	movwpl	r0, #256	; 0x100
	...
    35e4:	00500001 	subseq	r0, r0, r1
    35e8:	00000000 	andeq	r0, r0, r0
    35ec:	03000000 	movweq	r0, #0
    35f0:	9f1b7000 	svcls	0x001b7000
	...
    35fc:	01f30004 	mvnseq	r0, r4
    3600:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3610:	00070000 	andeq	r0, r7, r0
    3614:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3618:	009f2648 	addseq	r2, pc, r8, asr #12
	...
    3628:	01000000 	mrseq	r0, (UNDEF: 0)
    362c:	00005000 	andeq	r5, r0, r0
    3630:	00000000 	andeq	r0, r0, r0
    3634:	00060000 	andeq	r0, r6, r0
    3638:	4b5001f3 	blmi	1403e0c <__ccfg+0x13e3e64>
    363c:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    364c:	00010000 	andeq	r0, r1, r0
    3650:	00000055 	andeq	r0, r0, r5, asr r0
    3654:	00000000 	andeq	r0, r0, r0
    3658:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    365c:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3660:	4b5001f3 	blmi	1403e34 <__ccfg+0x13e3e8c>
    3664:	009f1e1c 	addseq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
	...
    3674:	2c000000 	stccs	0, cr0, [r0], {-0}
    3678:	40007100 	andmi	r7, r0, r0, lsl #2
    367c:	40007126 	andmi	r7, r0, r6, lsr #2
    3680:	70264824 	eorvc	r4, r6, r4, lsr #16
    3684:	26331e00 	ldrtcs	r1, [r3], -r0, lsl #28
    3688:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    368c:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3690:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    3694:	48007422 	stmdami	r0, {r1, r5, sl, ip, sp, lr}
    3698:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    369c:	00701e00 	rsbseq	r1, r0, r0, lsl #28
    36a0:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    36a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36a8:	00000000 	andeq	r0, r0, r0
    36ac:	71003200 	mrsvc	r3, R8_usr
    36b0:	f3264000 	vhadd.u32	d4, d6, d0
    36b4:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    36b8:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    36bc:	331e2648 	tstcc	lr, #72, 12	; 0x4800000
    36c0:	00712226 	rsbseq	r2, r1, r6, lsr #4
    36c4:	26482448 	strbcs	r2, [r8], -r8, asr #8
    36c8:	3a1e0075 	bcc	7838a4 <__ccfg+0x7638fc>
    36cc:	01f32226 	mvnseq	r2, r6, lsr #4
    36d0:	741c4b50 	ldrvc	r4, [ip], #-2896	; 0xfffff4b0
    36d4:	48244800 	stmdami	r4!, {fp, lr}
    36d8:	00751e26 	rsbseq	r1, r5, r6, lsr #28
    36dc:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    36e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    36f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    36fc:	01f30004 	mvnseq	r0, r4
    3700:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3710:	000b0000 	andeq	r0, fp, r0
    3714:	00700070 	rsbseq	r0, r0, r0, ror r0
    3718:	7026461e 	eorvc	r4, r6, lr, lsl r6
    371c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3720:	00000000 	andeq	r0, r0, r0
    3724:	01000000 	mrseq	r0, (UNDEF: 0)
    3728:	00005000 	andeq	r5, r0, r0
    372c:	00000000 	andeq	r0, r0, r0
    3730:	000e0000 	andeq	r0, lr, r0
    3734:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    3738:	461e5001 	ldrmi	r5, [lr], -r1
    373c:	5001f326 	andpl	pc, r1, r6, lsr #6
    3740:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3750:	00010000 	andeq	r0, r1, r0
    3754:	00000055 	andeq	r0, r0, r5, asr r0
    3758:	00000000 	andeq	r0, r0, r0
    375c:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    3760:	40091038 	andmi	r1, r9, r8, lsr r0
	...
    3774:	00560001 	subseq	r0, r6, r1
	...
    3784:	06000000 	streq	r0, [r0], -r0
    3788:	76007000 	strvc	r7, [r0], -r0
    378c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3790:	00000000 	andeq	r0, r0, r0
    3794:	01000000 	mrseq	r0, (UNDEF: 0)
    3798:	00005000 	andeq	r5, r0, r0
	...
    37a8:	000a0000 	andeq	r0, sl, r0
    37ac:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    37b0:	461a2444 	ldrmi	r2, [sl], -r4, asr #8
    37b4:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    37c4:	00010000 	andeq	r0, r1, r0
    37c8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    37d8:	73000900 	movwvc	r0, #2304	; 0x900
    37dc:	fc000a00 	stc2	10, cr0, [r0], {-0}	; <UNPREDICTABLE>
    37e0:	9f253a1a 	svcls	0x00253a1a
	...
    37f4:	0073000a 	rsbseq	r0, r3, sl
    37f8:	2440fc08 	strbcs	pc, [r0], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    37fc:	9f25421a 	svcls	0x0025421a
	...
    3808:	000031ec 	andeq	r3, r0, ip, ror #3
    380c:	0000320a 	andeq	r3, r0, sl, lsl #4
    3810:	0a500001 	beq	140381c <__ccfg+0x13e3874>
    3814:	14000032 	strne	r0, [r0], #-50	; 0xffffffce
    3818:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    381c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3820:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3824:	00000000 	andeq	r0, r0, r0
    3828:	00327600 	eorseq	r7, r2, r0, lsl #12
    382c:	00327800 	eorseq	r7, r2, r0, lsl #16
    3830:	53000100 	movwpl	r0, #256	; 0x100
    3834:	0000327a 	andeq	r3, r0, sl, ror r2
    3838:	0000327c 	andeq	r3, r0, ip, ror r2
    383c:	00530001 	subseq	r0, r3, r1
    3840:	00000000 	andeq	r0, r0, r0
    3844:	b0000000 	andlt	r0, r0, r0
    3848:	e6000033 			; <UNDEFINED> instruction: 0xe6000033
    384c:	01000033 	tsteq	r0, r3, lsr r0
    3850:	33e65000 	mvncc	r5, #0
    3854:	34c80000 	strbcc	r0, [r8], #0
    3858:	00040000 	andeq	r0, r4, r0
    385c:	9f5001f3 	svcls	0x005001f3
	...
    3868:	000033ce 	andeq	r3, r0, lr, asr #7
    386c:	000033d2 	ldrdeq	r3, [r0], -r2
    3870:	d2510001 	subsle	r0, r1, #1
    3874:	d8000033 	stmdale	r0, {r0, r1, r4, r5}
    3878:	02000033 	andeq	r0, r0, #51	; 0x33
    387c:	dc9f3200 	lfmle	f3, 4, [pc], {0}
    3880:	66000033 			; <UNDEFINED> instruction: 0x66000033
    3884:	01000034 	tsteq	r0, r4, lsr r0
    3888:	34665100 	strbtcc	r5, [r6], #-256	; 0xffffff00
    388c:	346a0000 	strbtcc	r0, [sl], #-0
    3890:	00030000 	andeq	r0, r3, r0
    3894:	8c9f0571 	cfldr32hi	mvfx0, [pc], {113}	; 0x71
    3898:	a2000034 	andge	r0, r0, #52	; 0x34
    389c:	01000034 	tsteq	r0, r4, lsr r0
    38a0:	34a25100 	strtcc	r5, [r2], #256	; 0x100
    38a4:	34a40000 	strtcc	r0, [r4], #0
    38a8:	00030000 	andeq	r0, r3, r0
    38ac:	009f0571 	addseq	r0, pc, r1, ror r5	; <UNPREDICTABLE>
    38b0:	00000000 	andeq	r0, r0, r0
    38b4:	32000000 	andcc	r0, r0, #0
    38b8:	38000034 	stmdacc	r0, {r2, r4, r5}
    38bc:	01000034 	tsteq	r0, r4, lsr r0
    38c0:	34405300 	strbcc	r5, [r0], #-768	; 0xfffffd00
    38c4:	34420000 	strbcc	r0, [r2], #-0
    38c8:	00010000 	andeq	r0, r1, r0
    38cc:	00345653 	eorseq	r5, r4, r3, asr r6
    38d0:	00345800 	eorseq	r5, r4, r0, lsl #16
    38d4:	53000100 	movwpl	r0, #256	; 0x100
    38d8:	00003460 	andeq	r3, r0, r0, ror #8
    38dc:	0000346c 	andeq	r3, r0, ip, ror #8
    38e0:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    38e4:	98000034 	stmdals	r0, {r2, r4, r5}
    38e8:	01000034 	tsteq	r0, r4, lsr r0
    38ec:	349c5300 	ldrcc	r5, [ip], #768	; 0x300
    38f0:	34a40000 	strtcc	r0, [r4], #0
    38f4:	00010000 	andeq	r0, r1, r0
    38f8:	00000053 	andeq	r0, r0, r3, asr r0
    38fc:	00000000 	andeq	r0, r0, r0
    3900:	0033d000 	eorseq	sp, r3, r0
    3904:	0033d200 	eorseq	sp, r3, r0, lsl #4
    3908:	53000100 	movwpl	r0, #256	; 0x100
    390c:	000033d4 	ldrdeq	r3, [r0], -r4
    3910:	000033d8 	ldrdeq	r3, [r0], -r8
    3914:	de530001 	cdple	0, 5, cr0, cr3, cr1, {0}
    3918:	e6000033 			; <UNDEFINED> instruction: 0xe6000033
    391c:	01000033 	tsteq	r0, r3, lsr r0
    3920:	33e65300 	mvncc	r5, #0, 6
    3924:	33fc0000 	mvnscc	r0, #0
    3928:	00030000 	andeq	r0, r3, r0
    392c:	009f6c74 	addseq	r6, pc, r4, ror ip	; <UNPREDICTABLE>
    3930:	06000034 			; <UNDEFINED> instruction: 0x06000034
    3934:	03000034 	movweq	r0, #52	; 0x34
    3938:	9f6c7400 	svcls	0x006c7400
	...
    3944:	000033f6 	strdeq	r3, [r0], -r6
    3948:	0000347a 	andeq	r3, r0, sl, ror r4
    394c:	7a520001 	bvc	1483958 <__ccfg+0x14639b0>
    3950:	80000034 	andhi	r0, r0, r4, lsr r0
    3954:	02000034 	andeq	r0, r0, #52	; 0x34
    3958:	80007000 	andhi	r7, r0, r0
    395c:	84000034 	strhi	r0, [r0], #-52	; 0xffffffcc
    3960:	01000034 	tsteq	r0, r4, lsr r0
    3964:	34845200 	strcc	r5, [r4], #512	; 0x200
    3968:	348a0000 	strcc	r0, [sl], #0
    396c:	00020000 	andeq	r0, r2, r0
    3970:	348c0070 	strcc	r0, [ip], #112	; 0x70
    3974:	34940000 	ldrcc	r0, [r4], #0
    3978:	00010000 	andeq	r0, r1, r0
    397c:	00349452 	eorseq	r9, r4, r2, asr r4
    3980:	00349a00 	eorseq	r9, r4, r0, lsl #20
    3984:	70000200 	andvc	r0, r0, r0, lsl #4
    3988:	00349c00 	eorseq	r9, r4, r0, lsl #24
    398c:	0034a400 	eorseq	sl, r4, r0, lsl #8
    3990:	52000100 	andpl	r0, r0, #0, 2
	...
    399c:	000033b0 			; <UNDEFINED> instruction: 0x000033b0
    39a0:	000033fc 	strdeq	r3, [r0], -ip
    39a4:	9f300002 	svcls	0x00300002
    39a8:	000033fc 	strdeq	r3, [r0], -ip
    39ac:	00003400 	andeq	r3, r0, r0, lsl #8
    39b0:	00540001 	subseq	r0, r4, r1
    39b4:	06000034 			; <UNDEFINED> instruction: 0x06000034
    39b8:	02000034 	andeq	r0, r0, #52	; 0x34
    39bc:	069f3000 	ldreq	r3, [pc], r0
    39c0:	a4000034 	strge	r0, [r0], #-52	; 0xffffffcc
    39c4:	01000034 	tsteq	r0, r4, lsr r0
    39c8:	00005400 	andeq	r5, r0, r0, lsl #8
    39cc:	00000000 	andeq	r0, r0, r0
    39d0:	34c80000 	strbcc	r0, [r8], #0
    39d4:	34d20000 	ldrbcc	r0, [r2], #0
    39d8:	00010000 	andeq	r0, r1, r0
    39dc:	0034d250 	eorseq	sp, r4, r0, asr r2
    39e0:	0034e400 	eorseq	lr, r4, r0, lsl #8
    39e4:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    39e8:	34e49f70 	strbtcc	r9, [r4], #3952	; 0xf70
    39ec:	34e80000 	strbtcc	r0, [r8], #0
    39f0:	00040000 	andeq	r0, r4, r0
    39f4:	9f5001f3 	svcls	0x005001f3
	...
    3a08:	9f300002 	svcls	0x00300002
	...
    3a14:	9f310002 	svcls	0x00310002
	...
    3a20:	9f320002 	svcls	0x00320002
	...
    3a2c:	9f330002 	svcls	0x00330002
	...
    3a38:	9f340002 	svcls	0x00340002
	...
    3a44:	9f350002 	svcls	0x00350002
	...
    3a50:	9f360002 	svcls	0x00360002
	...
    3a5c:	9f370002 	svcls	0x00370002
	...
    3a68:	9f380002 	svcls	0x00380002
	...
    3a74:	9f390002 	svcls	0x00390002
	...
    3a80:	9f3a0002 	svcls	0x003a0002
	...
    3a8c:	9f3b0002 	svcls	0x003b0002
	...
    3a98:	9f3c0002 	svcls	0x003c0002
	...
    3aa4:	00003504 	andeq	r3, r0, r4, lsl #10
    3aa8:	00003542 	andeq	r3, r0, r2, asr #10
    3aac:	42500001 	subsmi	r0, r0, #1
    3ab0:	a4000035 	strge	r0, [r0], #-53	; 0xffffffcb
    3ab4:	01000035 	tsteq	r0, r5, lsr r0
    3ab8:	35a45500 	strcc	r5, [r4, #1280]!	; 0x500
    3abc:	35d80000 	ldrbcc	r0, [r8]
    3ac0:	00040000 	andeq	r0, r4, r0
    3ac4:	9f5001f3 	svcls	0x005001f3
	...
    3ad0:	00003540 	andeq	r3, r0, r0, asr #10
    3ad4:	000035a4 	andeq	r3, r0, r4, lsr #11
    3ad8:	00540001 	subseq	r0, r4, r1
    3adc:	00000000 	andeq	r0, r0, r0
    3ae0:	56000000 	strpl	r0, [r0], -r0
    3ae4:	58000035 	stmdapl	r0, {r0, r2, r4, r5}
    3ae8:	07000035 	smladxeq	r0, r5, r0, r0
    3aec:	0a007300 	beq	206f4 <__ccfg+0x74c>
    3af0:	9f1affff 	svcls	0x001affff
	...
    3afc:	00003566 	andeq	r3, r0, r6, ror #10
    3b00:	00003580 	andeq	r3, r0, r0, lsl #11
    3b04:	00530001 	subseq	r0, r3, r1
    3b08:	00000000 	andeq	r0, r0, r0
    3b0c:	6a000000 	bvs	3b14 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x10>
    3b10:	76000035 			; <UNDEFINED> instruction: 0x76000035
    3b14:	01000035 	tsteq	r0, r5, lsr r0
    3b18:	35765200 	ldrbcc	r5, [r6, #-512]!	; 0xfffffe00
    3b1c:	357a0000 	ldrbcc	r0, [sl, #-0]!
    3b20:	00030000 	andeq	r0, r3, r0
    3b24:	7a9f0671 	bvc	fe7c54f0 <_estack+0xde7c04f0>
    3b28:	82000035 	andhi	r0, r0, #53	; 0x35
    3b2c:	01000035 	tsteq	r0, r5, lsr r0
    3b30:	00005200 	andeq	r5, r0, r0, lsl #4
    3b34:	00000000 	andeq	r0, r0, r0
    3b38:	35de0000 	ldrbcc	r0, [lr]
    3b3c:	36580000 	ldrbcc	r0, [r8], -r0
    3b40:	00010000 	andeq	r0, r1, r0
    3b44:	00000054 	andeq	r0, r0, r4, asr r0
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	00364400 	eorseq	r4, r6, r0, lsl #8
    3b50:	00364e00 	eorseq	r4, r6, r0, lsl #28
    3b54:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b60:	0000367c 	andeq	r3, r0, ip, ror r6
    3b64:	000036a2 	andeq	r3, r0, r2, lsr #13
    3b68:	a2500001 	subsge	r0, r0, #1
    3b6c:	f8000036 			; <UNDEFINED> instruction: 0xf8000036
    3b70:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    3b74:	5001f300 	andpl	pc, r1, r0, lsl #6
    3b78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b7c:	00000000 	andeq	r0, r0, r0
    3b80:	0036a400 	eorseq	sl, r6, r0, lsl #8
    3b84:	0036d800 	eorseq	sp, r6, r0, lsl #16
    3b88:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b94:	000036a8 	andeq	r3, r0, r8, lsr #13
    3b98:	000036b6 			; <UNDEFINED> instruction: 0x000036b6
    3b9c:	b6510001 	ldrblt	r0, [r1], -r1
    3ba0:	b8000036 	stmdalt	r0, {r1, r2, r4, r5}
    3ba4:	06000036 			; <UNDEFINED> instruction: 0x06000036
    3ba8:	73007200 	movwvc	r7, #512	; 0x200
    3bac:	b89f1c00 	ldmlt	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    3bb0:	be000036 	mcrlt	0, 0, r0, cr0, cr6, {1}
    3bb4:	01000036 	tsteq	r0, r6, lsr r0
    3bb8:	00005100 	andeq	r5, r0, r0, lsl #2
    3bbc:	00000000 	andeq	r0, r0, r0
    3bc0:	36940000 	ldrcc	r0, [r4], r0
    3bc4:	36a60000 	strtcc	r0, [r6], r0
    3bc8:	00010000 	andeq	r0, r1, r0
    3bcc:	00000053 	andeq	r0, r0, r3, asr r0
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	0036f800 	eorseq	pc, r6, r0, lsl #16
    3bd8:	00371b00 	eorseq	r1, r7, r0, lsl #22
    3bdc:	50000100 	andpl	r0, r0, r0, lsl #2
    3be0:	0000371b 	andeq	r3, r0, fp, lsl r7
    3be4:	00003726 	andeq	r3, r0, r6, lsr #14
    3be8:	26540001 	ldrbcs	r0, [r4], -r1
    3bec:	2e000037 	mcrcs	0, 0, r0, cr0, cr7, {1}
    3bf0:	01000037 	tsteq	r0, r7, lsr r0
    3bf4:	372e5000 	strcc	r5, [lr, -r0]!
    3bf8:	377a0000 	ldrbcc	r0, [sl, -r0]!
    3bfc:	00010000 	andeq	r0, r1, r0
    3c00:	00000054 	andeq	r0, r0, r4, asr r0
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	00373400 	eorseq	r3, r7, r0, lsl #8
    3c0c:	00373800 	eorseq	r3, r7, r0, lsl #16
    3c10:	53000100 	movwpl	r0, #256	; 0x100
    3c14:	0000373a 	andeq	r3, r0, sl, lsr r7
    3c18:	00003748 	andeq	r3, r0, r8, asr #14
    3c1c:	4a530001 	bmi	14c3c28 <__ccfg+0x14a3c80>
    3c20:	52000037 	andpl	r0, r0, #55	; 0x37
    3c24:	01000037 	tsteq	r0, r7, lsr r0
    3c28:	00005300 	andeq	r5, r0, r0, lsl #6
    3c2c:	00000000 	andeq	r0, r0, r0
    3c30:	37340000 	ldrcc	r0, [r4, -r0]!
    3c34:	37680000 	strbcc	r0, [r8, -r0]!
    3c38:	00050000 	andeq	r0, r5, r0
    3c3c:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    3c40:	0037689f 	mlaseq	r7, pc, r8, r6	; <UNPREDICTABLE>
    3c44:	0037a400 	eorseq	sl, r7, r0, lsl #8
    3c48:	f3000600 	vmax.u8	d0, d0, d0
    3c4c:	264c5001 	strbcs	r5, [ip], -r1
    3c50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c54:	00000000 	andeq	r0, r0, r0
    3c58:	00372e00 	eorseq	r2, r7, r0, lsl #28
    3c5c:	00373800 	eorseq	r3, r7, r0, lsl #16
    3c60:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c6c:	000037a4 	andeq	r3, r0, r4, lsr #15
    3c70:	000037b8 			; <UNDEFINED> instruction: 0x000037b8
    3c74:	b8500001 	ldmdalt	r0, {r0}^
    3c78:	00000037 	andeq	r0, r0, r7, lsr r0
    3c7c:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    3c80:	5001f300 	andpl	pc, r1, r0, lsl #6
    3c84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c88:	00000000 	andeq	r0, r0, r0
    3c8c:	0037aa00 	eorseq	sl, r7, r0, lsl #20
    3c90:	0037b200 	eorseq	fp, r7, r0, lsl #4
    3c94:	53000100 	movwpl	r0, #256	; 0x100
	...
    3ca0:	000037ae 	andeq	r3, r0, lr, lsr #15
    3ca4:	000037c0 	andeq	r3, r0, r0, asr #15
    3ca8:	c0520001 	subsgt	r0, r2, r1
    3cac:	c2000037 	andgt	r0, r0, #55	; 0x37
    3cb0:	05000037 	streq	r0, [r0, #-55]	; 0xffffffc9
    3cb4:	31007200 	mrscc	r7, R8_usr
    3cb8:	37c29f25 	strbcc	r9, [r2, r5, lsr #30]
    3cbc:	37c80000 	strbcc	r0, [r8, r0]
    3cc0:	00010000 	andeq	r0, r1, r0
    3cc4:	0037cc52 	eorseq	ip, r7, r2, asr ip
    3cc8:	0037de00 	eorseq	sp, r7, r0, lsl #28
    3ccc:	52000100 	andpl	r0, r0, #0, 2
    3cd0:	000037e2 	andeq	r3, r0, r2, ror #15
    3cd4:	000037ec 	andeq	r3, r0, ip, ror #15
    3cd8:	ee520001 	cdp	0, 5, cr0, cr2, cr1, {0}
    3cdc:	00000037 	andeq	r0, r0, r7, lsr r0
    3ce0:	01000038 	tsteq	r0, r8, lsr r0
    3ce4:	00005200 	andeq	r5, r0, r0, lsl #4
    3ce8:	00000000 	andeq	r0, r0, r0
    3cec:	37b20000 	ldrcc	r0, [r2, r0]!
    3cf0:	37bc0000 	ldrcc	r0, [ip, r0]!
    3cf4:	00010000 	andeq	r0, r1, r0
    3cf8:	0037bc53 	eorseq	fp, r7, r3, asr ip
    3cfc:	0037be00 	eorseq	fp, r7, r0, lsl #28
    3d00:	73000500 	movwvc	r0, #1280	; 0x500
    3d04:	9f253100 	svcls	0x00253100
    3d08:	000037be 			; <UNDEFINED> instruction: 0x000037be
    3d0c:	000037c0 	andeq	r3, r0, r0, asr #15
    3d10:	c0530001 	subsgt	r0, r3, r1
    3d14:	cc000037 	stcgt	0, cr0, [r0], {55}	; 0x37
    3d18:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3d1c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3d20:	0037cc9f 	mlaseq	r7, pc, ip, ip	; <UNPREDICTABLE>
    3d24:	0037d200 	eorseq	sp, r7, r0, lsl #4
    3d28:	53000100 	movwpl	r0, #256	; 0x100
    3d2c:	000037d6 	ldrdeq	r3, [r0], -r6
    3d30:	000037dc 	ldrdeq	r3, [r0], -ip
    3d34:	dc530001 	mrrcle	0, 0, r0, r3, cr1
    3d38:	ee000037 	mcr	0, 0, r0, cr0, cr7, {1}
    3d3c:	02000037 	andeq	r0, r0, #55	; 0x37
    3d40:	ee9f3100 	fmle	f3, f7, f0
    3d44:	00000037 	andeq	r0, r0, r7, lsr r0
    3d48:	01000038 	tsteq	r0, r8, lsr r0
    3d4c:	00005300 	andeq	r5, r0, r0, lsl #6
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	37b20000 	ldrcc	r0, [r2, r0]!
    3d58:	37b80000 	ldrcc	r0, [r8, r0]!
    3d5c:	00020000 	andeq	r0, r2, r0
    3d60:	37b89f30 			; <UNDEFINED> instruction: 0x37b89f30
    3d64:	37f40000 	ldrbcc	r0, [r4, r0]!
    3d68:	00010000 	andeq	r0, r1, r0
    3d6c:	00000050 	andeq	r0, r0, r0, asr r0
    3d70:	00000000 	andeq	r0, r0, r0
    3d74:	0037f400 	eorseq	pc, r7, r0, lsl #8
    3d78:	0037f800 	eorseq	pc, r7, r0, lsl #16
    3d7c:	72000800 	andvc	r0, r0, #0, 16
    3d80:	73244000 			; <UNDEFINED> instruction: 0x73244000
    3d84:	f89f2100 			; <UNDEFINED> instruction: 0xf89f2100
    3d88:	00000037 	andeq	r0, r0, r7, lsr r0
    3d8c:	01000038 	tsteq	r0, r8, lsr r0
    3d90:	00005000 	andeq	r5, r0, r0
    3d94:	00000000 	andeq	r0, r0, r0
    3d98:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
    3d9c:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
    3da0:	000a0000 	andeq	r0, sl, r0
    3da4:	1a330070 	bne	cc3f6c <__ccfg+0xca3fc4>
    3da8:	00732438 	rsbseq	r2, r3, r8, lsr r4
    3dac:	38129f21 	ldmdacc	r2, {r0, r5, r8, r9, sl, fp, ip, pc}
    3db0:	38180000 	ldmdacc	r8, {}	; <UNPREDICTABLE>
    3db4:	00010000 	andeq	r0, r1, r0
    3db8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3dc8:	70000700 	andvc	r0, r0, r0, lsl #14
    3dcc:	3fff0a00 	svccc	0x00ff0a00
    3dd0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3dd4:	00000000 	andeq	r0, r0, r0
    3dd8:	381c0000 	ldmdacc	ip, {}	; <UNPREDICTABLE>
    3ddc:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    3de0:	000f0000 	andeq	r0, pc, r0
    3de4:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    3de8:	1100701a 	tstne	r0, sl, lsl r0
    3dec:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    3df0:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    3df4:	00000000 	andeq	r0, r0, r0
    3df8:	1c000000 	stcne	0, cr0, [r0], {-0}
    3dfc:	20000038 	andcs	r0, r0, r8, lsr r0
    3e00:	01000038 	tsteq	r0, r8, lsr r0
    3e04:	00005000 	andeq	r5, r0, r0
    3e08:	00000000 	andeq	r0, r0, r0
    3e0c:	382c0000 	stmdacc	ip!, {}	; <UNPREDICTABLE>
    3e10:	38300000 	ldmdacc	r0!, {}	; <UNPREDICTABLE>
    3e14:	000f0000 	andeq	r0, pc, r0
    3e18:	3f080070 	svccc	0x00080070
    3e1c:	0c00701a 	stceq	0, cr7, [r0], {26}
    3e20:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    3e24:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    3e28:	00000000 	andeq	r0, r0, r0
    3e2c:	2c000000 	stccs	0, cr0, [r0], {-0}
    3e30:	30000038 	andcc	r0, r0, r8, lsr r0
    3e34:	01000038 	tsteq	r0, r8, lsr r0
    3e38:	00005000 	andeq	r5, r0, r0
    3e3c:	00000000 	andeq	r0, r0, r0
    3e40:	383c0000 	ldmdacc	ip!, {}	; <UNPREDICTABLE>
    3e44:	38920000 	ldmcc	r2, {}	; <UNPREDICTABLE>
    3e48:	00010000 	andeq	r0, r1, r0
    3e4c:	00389250 	eorseq	r9, r8, r0, asr r2
    3e50:	0038a000 	eorseq	sl, r8, r0
    3e54:	f3000400 	vshl.u8	d0, d0, d0
    3e58:	009f5001 	addseq	r5, pc, r1
    3e5c:	00000000 	andeq	r0, r0, r0
    3e60:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3e64:	84000038 	strhi	r0, [r0], #-56	; 0xffffffc8
    3e68:	17000038 	smladxne	r0, r8, r0, r0
    3e6c:	0a007400 	beq	20e74 <__ccfg+0xecc>
    3e70:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    3e74:	1af00800 	bne	ffc05e7c <_estack+0xdfc00e7c>
    3e78:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    3e7c:	00732124 	rsbseq	r2, r3, r4, lsr #2
    3e80:	9f212440 	svcls	0x00212440
    3e84:	00003888 	andeq	r3, r0, r8, lsl #17
    3e88:	000038a0 	andeq	r3, r0, r0, lsr #17
    3e8c:	00530001 	subseq	r0, r3, r1
    3e90:	00000000 	andeq	r0, r0, r0
    3e94:	44000000 	strmi	r0, [r0], #-0
    3e98:	8e000038 	mcrhi	0, 0, r0, cr0, cr8, {1}
    3e9c:	01000038 	tsteq	r0, r8, lsr r0
    3ea0:	00005400 	andeq	r5, r0, r0, lsl #8
    3ea4:	00000000 	andeq	r0, r0, r0
    3ea8:	384a0000 	stmdacc	sl, {}^	; <UNPREDICTABLE>
    3eac:	385e0000 	ldmdacc	lr, {}^	; <UNPREDICTABLE>
    3eb0:	00010000 	andeq	r0, r1, r0
    3eb4:	00385e52 	eorseq	r5, r8, r2, asr lr
    3eb8:	00386a00 	eorseq	r6, r8, r0, lsl #20
    3ebc:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    3ec0:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3ec4:	00387c9f 	mlaseq	r8, pc, ip, r7	; <UNPREDICTABLE>
    3ec8:	00388400 	eorseq	r8, r8, r0, lsl #8
    3ecc:	52000100 	andpl	r0, r0, #0, 2
	...
    3ed8:	00003852 	andeq	r3, r0, r2, asr r8
    3edc:	00003870 	andeq	r3, r0, r0, ror r8
    3ee0:	70530001 	subsvc	r0, r3, r1
    3ee4:	7c000038 	stcvc	0, cr0, [r0], {56}	; 0x38
    3ee8:	06000038 			; <UNDEFINED> instruction: 0x06000038
    3eec:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    3ef0:	7c9f24f0 	cfldrsvc	mvf2, [pc], {240}	; 0xf0
    3ef4:	88000038 	stmdahi	r0, {r3, r4, r5}
    3ef8:	01000038 	tsteq	r0, r8, lsr r0
    3efc:	00005300 	andeq	r5, r0, r0, lsl #6
    3f00:	00000000 	andeq	r0, r0, r0
    3f04:	385c0000 	ldmdacc	ip, {}^	; <UNPREDICTABLE>
    3f08:	385e0000 	ldmdacc	lr, {}^	; <UNPREDICTABLE>
    3f0c:	00060000 	andeq	r0, r6, r0
    3f10:	00720076 	rsbseq	r0, r2, r6, ror r0
    3f14:	385e9f22 	ldmdacc	lr, {r1, r5, r8, r9, sl, fp, ip, pc}^
    3f18:	38660000 	stmdacc	r6!, {}^	; <UNPREDICTABLE>
    3f1c:	00010000 	andeq	r0, r1, r0
    3f20:	00386652 	eorseq	r6, r8, r2, asr r6
    3f24:	00386800 	eorseq	r6, r8, r0, lsl #16
    3f28:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    3f2c:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3f30:	9f220076 	svcls	0x00220076
    3f34:	00003868 	andeq	r3, r0, r8, ror #16
    3f38:	0000386a 	andeq	r3, r0, sl, ror #16
    3f3c:	6e550001 	cdpvs	0, 5, cr0, cr5, cr1, {0}
    3f40:	70000038 	andvc	r0, r0, r8, lsr r0
    3f44:	06000038 			; <UNDEFINED> instruction: 0x06000038
    3f48:	73007100 	movwvc	r7, #256	; 0x100
    3f4c:	709f2200 	addsvc	r2, pc, r0, lsl #4
    3f50:	78000038 	stmdavc	r0, {r3, r4, r5}
    3f54:	01000038 	tsteq	r0, r8, lsr r0
    3f58:	38785300 	ldmdacc	r8!, {r8, r9, ip, lr}^
    3f5c:	387a0000 	ldmdacc	sl!, {}^	; <UNPREDICTABLE>
    3f60:	00090000 	andeq	r0, r9, r0
    3f64:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    3f68:	22007124 	andcs	r7, r0, #36, 2
    3f6c:	00387a9f 	mlaseq	r8, pc, sl, r7	; <UNPREDICTABLE>
    3f70:	00387c00 	eorseq	r7, r8, r0, lsl #24
    3f74:	30000200 	andcc	r0, r0, r0, lsl #4
    3f78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	0038a000 	eorseq	sl, r8, r0
    3f84:	0038a800 	eorseq	sl, r8, r0, lsl #16
    3f88:	50000100 	andpl	r0, r0, r0, lsl #2
    3f8c:	000038a8 	andeq	r3, r0, r8, lsr #17
    3f90:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
    3f94:	01f30004 	mvnseq	r0, r4
    3f98:	00009f50 	andeq	r9, r0, r0, asr pc
    3f9c:	00000000 	andeq	r0, r0, r0
    3fa0:	38a00000 	stmiacc	r0!, {}	; <UNPREDICTABLE>
    3fa4:	38ae0000 	stmiacc	lr!, {}	; <UNPREDICTABLE>
    3fa8:	00020000 	andeq	r0, r2, r0
    3fac:	38ae9f30 	stmiacc	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}
    3fb0:	38b40000 	ldmcc	r4!, {}	; <UNPREDICTABLE>
    3fb4:	00010000 	andeq	r0, r1, r0
    3fb8:	00000050 	andeq	r0, r0, r0, asr r0
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	0038a200 	eorseq	sl, r8, r0, lsl #4
    3fc4:	0038a800 	eorseq	sl, r8, r0, lsl #16
    3fc8:	50000100 	andpl	r0, r0, r0, lsl #2
    3fcc:	000038a8 	andeq	r3, r0, r8, lsr #17
    3fd0:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
    3fd4:	01f30004 	mvnseq	r0, r4
    3fd8:	00009f50 	andeq	r9, r0, r0, asr pc
    3fdc:	00000000 	andeq	r0, r0, r0
    3fe0:	38ac0000 	stmiacc	ip!, {}	; <UNPREDICTABLE>
    3fe4:	38ae0000 	stmiacc	lr!, {}	; <UNPREDICTABLE>
    3fe8:	00010000 	andeq	r0, r1, r0
    3fec:	00000050 	andeq	r0, r0, r0, asr r0
    3ff0:	00000000 	andeq	r0, r0, r0
    3ff4:	0038b400 	eorseq	fp, r8, r0, lsl #8
    3ff8:	0038bc00 	eorseq	fp, r8, r0, lsl #24
    3ffc:	50000100 	andpl	r0, r0, r0, lsl #2
    4000:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    4004:	000038c8 	andeq	r3, r0, r8, asr #17
    4008:	01f30004 	mvnseq	r0, r4
    400c:	00009f50 	andeq	r9, r0, r0, asr pc
    4010:	00000000 	andeq	r0, r0, r0
    4014:	38b40000 	ldmcc	r4!, {}	; <UNPREDICTABLE>
    4018:	38c20000 	stmiacc	r2, {}^	; <UNPREDICTABLE>
    401c:	00020000 	andeq	r0, r2, r0
    4020:	38c29f31 	stmiacc	r2, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
    4024:	38c80000 	stmiacc	r8, {}^	; <UNPREDICTABLE>
    4028:	00010000 	andeq	r0, r1, r0
    402c:	00000050 	andeq	r0, r0, r0, asr r0
    4030:	00000000 	andeq	r0, r0, r0
    4034:	0038b600 	eorseq	fp, r8, r0, lsl #12
    4038:	0038bc00 	eorseq	fp, r8, r0, lsl #24
    403c:	50000100 	andpl	r0, r0, r0, lsl #2
    4040:	000038bc 			; <UNDEFINED> instruction: 0x000038bc
    4044:	000038c8 	andeq	r3, r0, r8, asr #17
    4048:	01f30004 	mvnseq	r0, r4
    404c:	00009f50 	andeq	r9, r0, r0, asr pc
    4050:	00000000 	andeq	r0, r0, r0
    4054:	38c00000 	stmiacc	r0, {}^	; <UNPREDICTABLE>
    4058:	38c20000 	stmiacc	r2, {}^	; <UNPREDICTABLE>
    405c:	00010000 	andeq	r0, r1, r0
    4060:	00000050 	andeq	r0, r0, r0, asr r0
    4064:	00000000 	andeq	r0, r0, r0
    4068:	0038c800 	eorseq	ip, r8, r0, lsl #16
    406c:	0038d000 	eorseq	sp, r8, r0
    4070:	50000100 	andpl	r0, r0, r0, lsl #2
    4074:	000038d0 	ldrdeq	r3, [r0], -r0
    4078:	000038dc 	ldrdeq	r3, [r0], -ip
    407c:	01f30004 	mvnseq	r0, r4
    4080:	00009f50 	andeq	r9, r0, r0, asr pc
    4084:	00000000 	andeq	r0, r0, r0
    4088:	38c80000 	stmiacc	r8, {}^	; <UNPREDICTABLE>
    408c:	38d60000 	ldmcc	r6, {}^	; <UNPREDICTABLE>
    4090:	00020000 	andeq	r0, r2, r0
    4094:	38d69f31 	ldmcc	r6, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
    4098:	38dc0000 	ldmcc	ip, {}^	; <UNPREDICTABLE>
    409c:	00010000 	andeq	r0, r1, r0
    40a0:	00000050 	andeq	r0, r0, r0, asr r0
    40a4:	00000000 	andeq	r0, r0, r0
    40a8:	0038ca00 	eorseq	ip, r8, r0, lsl #20
    40ac:	0038d000 	eorseq	sp, r8, r0
    40b0:	50000100 	andpl	r0, r0, r0, lsl #2
    40b4:	000038d0 	ldrdeq	r3, [r0], -r0
    40b8:	000038dc 	ldrdeq	r3, [r0], -ip
    40bc:	01f30004 	mvnseq	r0, r4
    40c0:	00009f50 	andeq	r9, r0, r0, asr pc
    40c4:	00000000 	andeq	r0, r0, r0
    40c8:	38d40000 	ldmcc	r4, {}^	; <UNPREDICTABLE>
    40cc:	38d60000 	ldmcc	r6, {}^	; <UNPREDICTABLE>
    40d0:	00010000 	andeq	r0, r1, r0
    40d4:	00000050 	andeq	r0, r0, r0, asr r0
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	0038dc00 	eorseq	sp, r8, r0, lsl #24
    40e0:	0038e800 	eorseq	lr, r8, r0, lsl #16
    40e4:	50000100 	andpl	r0, r0, r0, lsl #2
    40e8:	000038e8 	andeq	r3, r0, r8, ror #17
    40ec:	00003904 	andeq	r3, r0, r4, lsl #18
    40f0:	01f30004 	mvnseq	r0, r4
    40f4:	00009f50 	andeq	r9, r0, r0, asr pc
    40f8:	00000000 	andeq	r0, r0, r0
    40fc:	38dc0000 	ldmcc	ip, {}^	; <UNPREDICTABLE>
    4100:	38fe0000 	ldmcc	lr!, {}^	; <UNPREDICTABLE>
    4104:	00020000 	andeq	r0, r2, r0
    4108:	38fe9f30 	ldmcc	lr!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    410c:	39040000 	stmdbcc	r4, {}	; <UNPREDICTABLE>
    4110:	00010000 	andeq	r0, r1, r0
    4114:	00000050 	andeq	r0, r0, r0, asr r0
    4118:	00000000 	andeq	r0, r0, r0
    411c:	0038de00 	eorseq	sp, r8, r0, lsl #28
    4120:	0038e800 	eorseq	lr, r8, r0, lsl #16
    4124:	50000100 	andpl	r0, r0, r0, lsl #2
    4128:	000038e8 	andeq	r3, r0, r8, ror #17
    412c:	00003904 	andeq	r3, r0, r4, lsl #18
    4130:	01f30004 	mvnseq	r0, r4
    4134:	00009f50 	andeq	r9, r0, r0, asr pc
    4138:	00000000 	andeq	r0, r0, r0
    413c:	38f00000 	ldmcc	r0!, {}^	; <UNPREDICTABLE>
    4140:	38f80000 	ldmcc	r8!, {}^	; <UNPREDICTABLE>
    4144:	00100000 	andseq	r0, r0, r0
    4148:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    414c:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    4150:	00722432 	rsbseq	r2, r2, r2, lsr r4
    4154:	9f212438 	svcls	0x00212438
    4158:	000038fa 	strdeq	r3, [r0], -sl
    415c:	000038fe 	strdeq	r3, [r0], -lr
    4160:	00500001 	subseq	r0, r0, r1
    4164:	00000000 	andeq	r0, r0, r0
    4168:	e4000000 	str	r0, [r0], #-0
    416c:	f8000038 			; <UNDEFINED> instruction: 0xf8000038
    4170:	01000038 	tsteq	r0, r8, lsr r0
    4174:	00005300 	andeq	r5, r0, r0, lsl #6
    4178:	00000000 	andeq	r0, r0, r0
    417c:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    4180:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    4184:	00090000 	andeq	r0, r9, r0
    4188:	40480070 	submi	r0, r8, r0, ror r0
    418c:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    4190:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4194:	00000000 	andeq	r0, r0, r0
    4198:	00391400 	eorseq	r1, r9, r0, lsl #8
    419c:	00392000 	eorseq	r2, r9, r0
    41a0:	50000100 	andpl	r0, r0, r0, lsl #2
    41a4:	00003920 	andeq	r3, r0, r0, lsr #18
    41a8:	00003940 	andeq	r3, r0, r0, asr #18
    41ac:	01f30004 	mvnseq	r0, r4
    41b0:	00009f50 	andeq	r9, r0, r0, asr pc
    41b4:	00000000 	andeq	r0, r0, r0
    41b8:	39140000 	ldmdbcc	r4, {}	; <UNPREDICTABLE>
    41bc:	39360000 	ldmdbcc	r6!, {}	; <UNPREDICTABLE>
    41c0:	00060000 	andeq	r0, r6, r0
    41c4:	3f80000c 	svccc	0x0080000c
    41c8:	39369f40 	ldmdbcc	r6!, {r6, r8, r9, sl, fp, ip, pc}
    41cc:	39400000 	stmdbcc	r0, {}^	; <UNPREDICTABLE>
    41d0:	00010000 	andeq	r0, r1, r0
    41d4:	00000050 	andeq	r0, r0, r0, asr r0
    41d8:	00000000 	andeq	r0, r0, r0
    41dc:	00391600 	eorseq	r1, r9, r0, lsl #12
    41e0:	00392000 	eorseq	r2, r9, r0
    41e4:	50000100 	andpl	r0, r0, r0, lsl #2
    41e8:	00003920 	andeq	r3, r0, r0, lsr #18
    41ec:	00003940 	andeq	r3, r0, r0, asr #18
    41f0:	01f30004 	mvnseq	r0, r4
    41f4:	00009f50 	andeq	r9, r0, r0, asr pc
    41f8:	00000000 	andeq	r0, r0, r0
    41fc:	39240000 	stmdbcc	r4!, {}	; <UNPREDICTABLE>
    4200:	392a0000 	stmdbcc	sl!, {}	; <UNPREDICTABLE>
    4204:	00100000 	andseq	r0, r0, r0
    4208:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    420c:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    4210:	00722440 	rsbseq	r2, r2, r0, asr #8
    4214:	9f212446 	svcls	0x00212446
    4218:	00003934 	andeq	r3, r0, r4, lsr r9
    421c:	00003936 	andeq	r3, r0, r6, lsr r9
    4220:	00500001 	subseq	r0, r0, r1
    4224:	00000000 	andeq	r0, r0, r0
    4228:	1c000000 	stcne	0, cr0, [r0], {-0}
    422c:	2a000039 	bcs	4318 <_gettimeofday+0x17c>
    4230:	01000039 	tsteq	r0, r9, lsr r0
    4234:	00005300 	andeq	r5, r0, r0, lsl #6
    4238:	00000000 	andeq	r0, r0, r0
    423c:	39400000 	stmdbcc	r0, {}^	; <UNPREDICTABLE>
    4240:	39480000 	stmdbcc	r8, {}^	; <UNPREDICTABLE>
    4244:	00010000 	andeq	r0, r1, r0
    4248:	00394850 	eorseq	r4, r9, r0, asr r8
    424c:	00395400 	eorseq	r5, r9, r0, lsl #8
    4250:	f3000400 	vshl.u8	d0, d0, d0
    4254:	009f5001 	addseq	r5, pc, r1
    4258:	00000000 	andeq	r0, r0, r0
    425c:	40000000 	andmi	r0, r0, r0
    4260:	4e000039 	mcrmi	0, 0, r0, cr0, cr9, {1}
    4264:	02000039 	andeq	r0, r0, #57	; 0x39
    4268:	4e9f3000 	cdpmi	0, 9, cr3, cr15, cr0, {0}
    426c:	54000039 	strpl	r0, [r0], #-57	; 0xffffffc7
    4270:	01000039 	tsteq	r0, r9, lsr r0
    4274:	00005000 	andeq	r5, r0, r0
    4278:	00000000 	andeq	r0, r0, r0
    427c:	39420000 	stmdbcc	r2, {}^	; <UNPREDICTABLE>
    4280:	39480000 	stmdbcc	r8, {}^	; <UNPREDICTABLE>
    4284:	00010000 	andeq	r0, r1, r0
    4288:	00394850 	eorseq	r4, r9, r0, asr r8
    428c:	00395400 	eorseq	r5, r9, r0, lsl #8
    4290:	f3000400 	vshl.u8	d0, d0, d0
    4294:	009f5001 	addseq	r5, pc, r1
    4298:	00000000 	andeq	r0, r0, r0
    429c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    42a0:	4e000039 	mcrmi	0, 0, r0, cr0, cr9, {1}
    42a4:	01000039 	tsteq	r0, r9, lsr r0
    42a8:	00005000 	andeq	r5, r0, r0
    42ac:	00000000 	andeq	r0, r0, r0
    42b0:	39540000 	ldmdbcc	r4, {}^	; <UNPREDICTABLE>
    42b4:	395c0000 	ldmdbcc	ip, {}^	; <UNPREDICTABLE>
    42b8:	00010000 	andeq	r0, r1, r0
    42bc:	00395c50 	eorseq	r5, r9, r0, asr ip
    42c0:	00396800 	eorseq	r6, r9, r0, lsl #16
    42c4:	f3000400 	vshl.u8	d0, d0, d0
    42c8:	009f5001 	addseq	r5, pc, r1
    42cc:	00000000 	andeq	r0, r0, r0
    42d0:	54000000 	strpl	r0, [r0], #-0
    42d4:	62000039 	andvs	r0, r0, #57	; 0x39
    42d8:	02000039 	andeq	r0, r0, #57	; 0x39
    42dc:	629f3000 	addsvs	r3, pc, #0
    42e0:	68000039 	stmdavs	r0, {r0, r3, r4, r5}
    42e4:	01000039 	tsteq	r0, r9, lsr r0
    42e8:	00005000 	andeq	r5, r0, r0
    42ec:	00000000 	andeq	r0, r0, r0
    42f0:	39560000 	ldmdbcc	r6, {}^	; <UNPREDICTABLE>
    42f4:	395c0000 	ldmdbcc	ip, {}^	; <UNPREDICTABLE>
    42f8:	00010000 	andeq	r0, r1, r0
    42fc:	00395c50 	eorseq	r5, r9, r0, asr ip
    4300:	00396800 	eorseq	r6, r9, r0, lsl #16
    4304:	f3000400 	vshl.u8	d0, d0, d0
    4308:	009f5001 	addseq	r5, pc, r1
    430c:	00000000 	andeq	r0, r0, r0
    4310:	60000000 	andvs	r0, r0, r0
    4314:	62000039 	andvs	r0, r0, #57	; 0x39
    4318:	01000039 	tsteq	r0, r9, lsr r0
    431c:	00005000 	andeq	r5, r0, r0
    4320:	00000000 	andeq	r0, r0, r0
    4324:	39680000 	stmdbcc	r8!, {}^	; <UNPREDICTABLE>
    4328:	396e0000 	stmdbcc	lr!, {}^	; <UNPREDICTABLE>
    432c:	00010000 	andeq	r0, r1, r0
    4330:	00396e50 	eorseq	r6, r9, r0, asr lr
    4334:	003a5800 	eorseq	r5, sl, r0, lsl #16
    4338:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    433c:	00003a58 	andeq	r3, r0, r8, asr sl
    4340:	00003a78 	andeq	r3, r0, r8, ror sl
    4344:	01f30004 	mvnseq	r0, r4
    4348:	00009f50 	andeq	r9, r0, r0, asr pc
    434c:	00000000 	andeq	r0, r0, r0
    4350:	39680000 	stmdbcc	r8!, {}^	; <UNPREDICTABLE>
    4354:	39710000 	ldmdbcc	r1!, {}^	; <UNPREDICTABLE>
    4358:	00010000 	andeq	r0, r1, r0
    435c:	00397151 	eorseq	r7, r9, r1, asr r1
    4360:	003a7800 	eorseq	r7, sl, r0, lsl #16
    4364:	f3000400 	vshl.u8	d0, d0, d0
    4368:	009f5101 	addseq	r5, pc, r1, lsl #2
    436c:	00000000 	andeq	r0, r0, r0
    4370:	76000000 	strvc	r0, [r0], -r0
    4374:	7a000039 	bvc	4460 <port_confs+0x44>
    4378:	01000039 	tsteq	r0, r9, lsr r0
    437c:	397a5000 	ldmdbcc	sl!, {ip, lr}^
    4380:	397d0000 	ldmdbcc	sp!, {}^	; <UNPREDICTABLE>
    4384:	00010000 	andeq	r0, r1, r0
    4388:	00398252 	eorseq	r8, r9, r2, asr r2
    438c:	00398600 	eorseq	r8, r9, r0, lsl #12
    4390:	50000100 	andpl	r0, r0, r0, lsl #2
    4394:	000039b0 			; <UNDEFINED> instruction: 0x000039b0
    4398:	000039b2 			; <UNDEFINED> instruction: 0x000039b2
    439c:	b2500001 	subslt	r0, r0, #1
    43a0:	b5000039 	strlt	r0, [r0, #-57]	; 0xffffffc7
    43a4:	01000039 	tsteq	r0, r9, lsr r0
    43a8:	39be5200 	ldmibcc	lr!, {r9, ip, lr}
    43ac:	39c00000 	stmibcc	r0, {}^	; <UNPREDICTABLE>
    43b0:	00010000 	andeq	r0, r1, r0
    43b4:	0039c050 	eorseq	ip, r9, r0, asr r0
    43b8:	0039c300 	eorseq	ip, r9, r0, lsl #6
    43bc:	52000100 	andpl	r0, r0, #0, 2
    43c0:	000039ce 	andeq	r3, r0, lr, asr #19
    43c4:	000039d0 	ldrdeq	r3, [r0], -r0
    43c8:	d0500001 	subsle	r0, r0, r1
    43cc:	d3000039 	movwle	r0, #57	; 0x39
    43d0:	01000039 	tsteq	r0, r9, lsr r0
    43d4:	39da5200 	ldmibcc	sl, {r9, ip, lr}^
    43d8:	39dc0000 	ldmibcc	ip, {}^	; <UNPREDICTABLE>
    43dc:	00010000 	andeq	r0, r1, r0
    43e0:	0039ec50 	eorseq	lr, r9, r0, asr ip
    43e4:	0039f000 	eorseq	pc, r9, r0
    43e8:	50000100 	andpl	r0, r0, r0, lsl #2
    43ec:	000039fe 	strdeq	r3, [r0], -lr
    43f0:	00003a00 	andeq	r3, r0, r0, lsl #20
    43f4:	00500001 	subseq	r0, r0, r1
    43f8:	0300003a 	movweq	r0, #58	; 0x3a
    43fc:	0100003a 	tsteq	r0, sl, lsr r0
    4400:	3a0a5200 	bcc	298c08 <__ccfg+0x278c60>
    4404:	3a0c0000 	bcc	30440c <__ccfg+0x2e4464>
    4408:	00010000 	andeq	r0, r1, r0
    440c:	003a1c50 	eorseq	r1, sl, r0, asr ip
    4410:	003a1e00 	eorseq	r1, sl, r0, lsl #28
    4414:	50000100 	andpl	r0, r0, r0, lsl #2
    4418:	00003a2e 	andeq	r3, r0, lr, lsr #20
    441c:	00003a32 	andeq	r3, r0, r2, lsr sl
    4420:	46500001 	ldrbmi	r0, [r0], -r1
    4424:	4800003a 	stmdami	r0, {r1, r3, r4, r5}
    4428:	0100003a 	tsteq	r0, sl, lsr r0
    442c:	3a485000 	bcc	1218434 <__ccfg+0x11f848c>
    4430:	3a4b0000 	bcc	12c4438 <__ccfg+0x12a4490>
    4434:	00010000 	andeq	r0, r1, r0
    4438:	00000052 	andeq	r0, r0, r2, asr r0
    443c:	00000000 	andeq	r0, r0, r0
    4440:	00399e00 	eorseq	r9, r9, r0, lsl #28
    4444:	0039a400 	eorseq	sl, r9, r0, lsl #8
    4448:	72000700 	andvc	r0, r0, #0, 14
    444c:	3fff0a00 	svccc	0x00ff0a00
    4450:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4454:	00000000 	andeq	r0, r0, r0
    4458:	3a920000 	bcc	fe484460 <_estack+0xde47f460>
    445c:	3a9c0000 	bcc	fe704464 <_estack+0xde6ff464>
    4460:	00090000 	andeq	r0, r9, r0
    4464:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    4468:	21200000 			; <UNDEFINED> instruction: 0x21200000
    446c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4470:	00000000 	andeq	r0, r0, r0
    4474:	003adc00 	eorseq	sp, sl, r0, lsl #24
    4478:	003ae400 	eorseq	lr, sl, r0, lsl #8
    447c:	50000100 	andpl	r0, r0, r0, lsl #2
    4480:	00003ae4 	andeq	r3, r0, r4, ror #21
    4484:	00003b04 	andeq	r3, r0, r4, lsl #22
    4488:	01f30004 	mvnseq	r0, r4
    448c:	00009f50 	andeq	r9, r0, r0, asr pc
    4490:	00000000 	andeq	r0, r0, r0
    4494:	3b040000 	blcc	10449c <__ccfg+0xe44f4>
    4498:	3b2c0000 	blcc	b044a0 <__ccfg+0xae44f8>
    449c:	00010000 	andeq	r0, r1, r0
    44a0:	003b2c50 	eorseq	r2, fp, r0, asr ip
    44a4:	003b6c00 	eorseq	r6, fp, r0, lsl #24
    44a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    44ac:	00003b6c 	andeq	r3, r0, ip, ror #22
    44b0:	00003b74 	andeq	r3, r0, r4, ror fp
    44b4:	74500001 	ldrbvc	r0, [r0], #-1
    44b8:	be00003b 	mcrlt	0, 0, r0, cr0, cr11, {1}
    44bc:	0100003b 	tsteq	r0, fp, lsr r0
    44c0:	3bbe5400 	blcc	fef994c8 <_estack+0xdef944c8>
    44c4:	3bfa0000 	blcc	ffe844cc <_estack+0xdfe7f4cc>
    44c8:	00040000 	andeq	r0, r4, r0
    44cc:	9f5001f3 	svcls	0x005001f3
    44d0:	00003bfa 	strdeq	r3, [r0], -sl
    44d4:	00003bfe 	strdeq	r3, [r0], -lr
    44d8:	fe540001 	cdp2	0, 5, cr0, cr4, cr1, {0}
    44dc:	5400003b 	strpl	r0, [r0], #-59	; 0xffffffc5
    44e0:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
    44e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    44e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44ec:	00000000 	andeq	r0, r0, r0
    44f0:	003b1a00 	eorseq	r1, fp, r0, lsl #20
    44f4:	003b5c00 	eorseq	r5, fp, r0, lsl #24
    44f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    4504:	00003b8e 	andeq	r3, r0, lr, lsl #23
    4508:	00003b94 	muleq	r0, r4, fp
    450c:	00500001 	subseq	r0, r0, r1
    4510:	00000000 	andeq	r0, r0, r0
    4514:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    4518:	c000003b 	andgt	r0, r0, fp, lsr r0
    451c:	0100003b 	tsteq	r0, fp, lsr r0
    4520:	3bc05000 	blcc	ff018528 <_estack+0xdf013528>
    4524:	3bd40000 	blcc	ff50452c <_estack+0xdf4ff52c>
    4528:	00010000 	andeq	r0, r1, r0
    452c:	00000054 	andeq	r0, r0, r4, asr r0
    4530:	00000000 	andeq	r0, r0, r0
    4534:	003bd400 	eorseq	sp, fp, r0, lsl #8
    4538:	003bf400 	eorseq	pc, fp, r0, lsl #8
    453c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4550:	00550001 	subseq	r0, r5, r1
    4554:	00000000 	andeq	r0, r0, r0
    4558:	03000000 	movweq	r0, #0
    455c:	9f7f7500 	svcls	0x007f7500
	...
    4568:	00550001 	subseq	r0, r5, r1
    456c:	00000000 	andeq	r0, r0, r0
    4570:	54000000 	strpl	r0, [r0], #-0
    4574:	7300003c 	movwvc	r0, #60	; 0x3c
    4578:	0100003c 	tsteq	r0, ip, lsr r0
    457c:	3c735000 	ldclcc	0, cr5, [r3], #-0
    4580:	3d340000 	ldccc	0, cr0, [r4, #-0]
    4584:	00010000 	andeq	r0, r1, r0
    4588:	003d3457 	eorseq	r3, sp, r7, asr r4
    458c:	003e7400 	eorseq	r7, lr, r0, lsl #8
    4590:	f3000400 	vshl.u8	d0, d0, d0
    4594:	009f5001 	addseq	r5, pc, r1
    4598:	00000000 	andeq	r0, r0, r0
    459c:	74000000 	strvc	r0, [r0], #-0
    45a0:	f400003c 	vst4.8	{d0-d3}, [r0 :256], ip
    45a4:	0100003d 	tsteq	r0, sp, lsr r0
    45a8:	3df65000 	ldclcc	0, cr5, [r6]
    45ac:	3e300000 	cdpcc	0, 3, cr0, cr0, cr0, {0}
    45b0:	00010000 	andeq	r0, r1, r0
    45b4:	00000050 	andeq	r0, r0, r0, asr r0
    45b8:	00000000 	andeq	r0, r0, r0
    45bc:	003d1c00 	eorseq	r1, sp, r0, lsl #24
    45c0:	003d2000 	eorseq	r2, sp, r0
    45c4:	70000300 	andvc	r0, r0, r0, lsl #6
    45c8:	3d209f71 	stccc	15, cr9, [r0, #-452]!	; 0xfffffe3c
    45cc:	3d260000 	stccc	0, cr0, [r6, #-0]
    45d0:	00010000 	andeq	r0, r1, r0
    45d4:	003d2651 	eorseq	r2, sp, r1, asr r6
    45d8:	003d4600 	eorseq	r4, sp, r0, lsl #12
    45dc:	91000200 	mrsls	r0, R8_usr
    45e0:	003d4654 	eorseq	r4, sp, r4, asr r6
    45e4:	003d5200 	eorseq	r5, sp, r0, lsl #4
    45e8:	51000100 	mrspl	r0, (UNDEF: 16)
    45ec:	00003d52 	andeq	r3, r0, r2, asr sp
    45f0:	00003d54 	andeq	r3, r0, r4, asr sp
    45f4:	54910002 	ldrpl	r0, [r1], #2
    45f8:	00003d54 	andeq	r3, r0, r4, asr sp
    45fc:	00003d56 	andeq	r3, r0, r6, asr sp
    4600:	56510001 	ldrbpl	r0, [r1], -r1
    4604:	fc00003d 	stc2	0, cr0, [r0], {61}	; 0x3d
    4608:	0200003d 	andeq	r0, r0, #61	; 0x3d
    460c:	00549100 	subseq	r9, r4, r0, lsl #2
    4610:	00000000 	andeq	r0, r0, r0
    4614:	80000000 	andhi	r0, r0, r0
    4618:	da00003c 	ble	4710 <patchGenfskRfe+0x168>
    461c:	0100003c 	tsteq	r0, ip, lsr r0
    4620:	3ce25100 	stfcce	f5, [r2]
    4624:	3ce40000 	stclcc	0, cr0, [r4]
    4628:	00010000 	andeq	r0, r1, r0
    462c:	00000051 	andeq	r0, r0, r1, asr r0
    4630:	00000000 	andeq	r0, r0, r0
    4634:	003cd200 	eorseq	sp, ip, r0, lsl #4
    4638:	003ce000 	eorseq	lr, ip, r0
    463c:	52000100 	andpl	r0, r0, #0, 2
    4640:	00003ce2 	andeq	r3, r0, r2, ror #25
    4644:	00003dc4 	andeq	r3, r0, r4, asr #27
    4648:	00520001 	subseq	r0, r2, r1
    464c:	00000000 	andeq	r0, r0, r0
    4650:	d2000000 	andle	r0, r0, #0
    4654:	ba00003c 	blt	474c <patchGenfskRfe+0x1a4>
    4658:	0100003d 	tsteq	r0, sp, lsr r0
    465c:	00005300 	andeq	r5, r0, r0, lsl #6
    4660:	00000000 	andeq	r0, r0, r0
    4664:	3c780000 	ldclcc	0, cr0, [r8], #-0
    4668:	3dce0000 	stclcc	0, cr0, [lr]
    466c:	00010000 	andeq	r0, r1, r0
    4670:	00000055 	andeq	r0, r0, r5, asr r0
    4674:	00000000 	andeq	r0, r0, r0
    4678:	003c7400 	eorseq	r7, ip, r0, lsl #8
    467c:	003cfc00 	eorseq	pc, ip, r0, lsl #24
    4680:	30000200 	andcc	r0, r0, r0, lsl #4
    4684:	003cfc9f 	mlaseq	ip, pc, ip, pc	; <UNPREDICTABLE>
    4688:	003e3000 	eorseq	r3, lr, r0
    468c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4698:	00003cf4 	strdeq	r3, [r0], -r4
    469c:	00003cfe 	strdeq	r3, [r0], -lr
    46a0:	00510001 	subseq	r0, r1, r1
    46a4:	00000000 	andeq	r0, r0, r0
    46a8:	1c000000 	stcne	0, cr0, [r0], {-0}
    46ac:	6c00003d 	stcvs	0, cr0, [r0], {61}	; 0x3d
    46b0:	0200003d 	andeq	r0, r0, #61	; 0x3d
    46b4:	6c9f3000 	ldcvs	0, cr3, [pc], {0}
    46b8:	8c00003d 	stchi	0, cr0, [r0], {61}	; 0x3d
    46bc:	0100003d 	tsteq	r0, sp, lsr r0
    46c0:	3d8c5100 	stfccs	f5, [ip]
    46c4:	3d920000 	ldccc	0, cr0, [r2]
    46c8:	00020000 	andeq	r0, r2, r0
    46cc:	3d929f30 	ldccc	15, cr9, [r2, #192]	; 0xc0
    46d0:	3dcc0000 	stclcc	0, cr0, [ip]
    46d4:	00010000 	andeq	r0, r1, r0
    46d8:	00000051 	andeq	r0, r0, r1, asr r0
    46dc:	00000000 	andeq	r0, r0, r0
    46e0:	003d4800 	eorseq	r4, sp, r0, lsl #16
    46e4:	003d4c00 	eorseq	r4, sp, r0, lsl #24
    46e8:	5e000100 	adfpls	f0, f0, f0
    46ec:	00003d54 	andeq	r3, r0, r4, asr sp
    46f0:	00003d56 	andeq	r3, r0, r6, asr sp
    46f4:	565e0001 	ldrbpl	r0, [lr], -r1
    46f8:	5c00003d 	stcpl	0, cr0, [r0], {61}	; 0x3d
    46fc:	0100003d 	tsteq	r0, sp, lsr r0
    4700:	3d5c5100 	ldfcce	f5, [ip, #-0]
    4704:	3d640000 	stclcc	0, cr0, [r4, #-0]
    4708:	00030000 	andeq	r0, r3, r0
    470c:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    4710:	00000000 	andeq	r0, r0, r0
    4714:	1c000000 	stcne	0, cr0, [r0], {-0}
    4718:	4600003d 			; <UNDEFINED> instruction: 0x4600003d
    471c:	0200003d 	andeq	r0, r0, #61	; 0x3d
    4720:	469f3000 	ldrmi	r3, [pc], r0
    4724:	5000003d 	andpl	r0, r0, sp, lsr r0
    4728:	0100003d 	tsteq	r0, sp, lsr r0
    472c:	3d505e00 	ldclcc	14, cr5, [r0, #-0]
    4730:	3d520000 	ldclcc	0, cr0, [r2, #-0]
    4734:	00050000 	andeq	r0, r5, r0
    4738:	26380071 			; <UNDEFINED> instruction: 0x26380071
    473c:	003d529f 	mlaseq	sp, pc, r2, r5	; <UNPREDICTABLE>
    4740:	003d5400 	eorseq	r5, sp, r0, lsl #8
    4744:	91000600 	tstls	r0, r0, lsl #12
    4748:	26380654 			; <UNDEFINED> instruction: 0x26380654
    474c:	003d549f 	mlaseq	sp, pc, r4, r5	; <UNPREDICTABLE>
    4750:	003d5600 	eorseq	r5, sp, r0, lsl #12
    4754:	5e000100 	adfpls	f0, f0, f0
    4758:	00003d56 	andeq	r3, r0, r6, asr sp
    475c:	00003d8c 	andeq	r3, r0, ip, lsl #27
    4760:	54910006 	ldrpl	r0, [r1], #6
    4764:	9f263806 	svcls	0x00263806
    4768:	00003d8c 	andeq	r3, r0, ip, lsl #27
    476c:	00003d92 	muleq	r0, r2, sp
    4770:	9f300002 	svcls	0x00300002
    4774:	00003d92 	muleq	r0, r2, sp
    4778:	00003dfc 	strdeq	r3, [r0], -ip
    477c:	005e0001 	subseq	r0, lr, r1
    4780:	00000000 	andeq	r0, r0, r0
    4784:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    4788:	8c00003d 	stchi	0, cr0, [r0], {61}	; 0x3d
    478c:	0100003d 	tsteq	r0, sp, lsr r0
    4790:	00005c00 	andeq	r5, r0, r0, lsl #24
    4794:	00000000 	andeq	r0, r0, r0
    4798:	3d960000 	ldccc	0, cr0, [r6]
    479c:	3dfc0000 	ldclcc	0, cr0, [ip]
    47a0:	00010000 	andeq	r0, r1, r0
    47a4:	0000005a 	andeq	r0, r0, sl, asr r0
    47a8:	00000000 	andeq	r0, r0, r0
    47ac:	003d9a00 	eorseq	r9, sp, r0, lsl #20
    47b0:	003dd600 	eorseq	sp, sp, r0, lsl #12
    47b4:	5c000100 	stfpls	f0, [r0], {-0}
    47b8:	00003dd6 	ldrdeq	r3, [r0], -r6
    47bc:	00003dda 	ldrdeq	r3, [r0], -sl
    47c0:	00510001 	subseq	r0, r1, r1
    47c4:	00000000 	andeq	r0, r0, r0
    47c8:	da000000 	ble	47d0 <patchGenfskRfe+0x228>
    47cc:	e400003d 	str	r0, [r0], #-61	; 0xffffffc3
    47d0:	1700003d 	smladxne	r0, sp, r0, r0
    47d4:	12007100 	andne	r7, r0, #0, 2
    47d8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    47dc:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    47e0:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    47e4:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    47e8:	9f131600 	svcls	0x00131600
	...
    47f4:	00003e04 	andeq	r3, r0, r4, lsl #28
    47f8:	00003e10 	andeq	r3, r0, r0, lsl lr
    47fc:	9f300002 	svcls	0x00300002
    4800:	00003e10 	andeq	r3, r0, r0, lsl lr
    4804:	00003e30 	andeq	r3, r0, r0, lsr lr
    4808:	00510001 	subseq	r0, r1, r1
    480c:	00000000 	andeq	r0, r0, r0
    4810:	06000000 	streq	r0, [r0], -r0
    4814:	0800003e 	stmdaeq	r0, {r1, r2, r3, r4, r5}
    4818:	0100003e 	tsteq	r0, lr, lsr r0
    481c:	3e085300 	cdpcc	3, 0, cr5, cr8, cr0, {0}
    4820:	3e100000 	cdpcc	0, 1, cr0, cr0, cr0, {0}
    4824:	00020000 	andeq	r0, r2, r0
    4828:	3e109f4f 	cdpcc	15, 1, cr9, cr0, cr15, {2}
    482c:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
    4830:	00010000 	andeq	r0, r1, r0
    4834:	003e2053 	eorseq	r2, lr, r3, asr r0
    4838:	003e2400 	eorseq	r2, lr, r0, lsl #8
    483c:	73000500 	movwvc	r0, #1280	; 0x500
    4840:	9f253400 	svcls	0x00253400
    4844:	00003e24 	andeq	r3, r0, r4, lsr #28
    4848:	00003e28 	andeq	r3, r0, r8, lsr #28
    484c:	00530001 	subseq	r0, r3, r1
    4850:	00000000 	andeq	r0, r0, r0
    4854:	1c000000 	stcne	0, cr0, [r0], {-0}
    4858:	fc00003d 	stc2	0, cr0, [r0], {61}	; 0x3d
    485c:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
    4860:	139c0c00 	orrsne	r0, ip, #0, 24
    4864:	009f5000 	addseq	r5, pc, r0
    4868:	00000000 	andeq	r0, r0, r0
    486c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    4870:	9400003c 	strls	r0, [r0], #-60	; 0xffffffc4
    4874:	0100003c 	tsteq	r0, ip, lsr r0
    4878:	00005300 	andeq	r5, r0, r0, lsl #6
    487c:	00000000 	andeq	r0, r0, r0
    4880:	3ca80000 	stccc	0, cr0, [r8]
    4884:	3cb40000 	ldccc	0, cr0, [r4]
    4888:	00010000 	andeq	r0, r1, r0
    488c:	00000052 	andeq	r0, r0, r2, asr r0
    4890:	00000000 	andeq	r0, r0, r0
    4894:	003cbe00 	eorseq	fp, ip, r0, lsl #28
    4898:	003cca00 	eorseq	ip, ip, r0, lsl #20
    489c:	52000100 	andpl	r0, r0, #0, 2
	...
    48a8:	00003cca 	andeq	r3, r0, sl, asr #25
    48ac:	00003dba 			; <UNDEFINED> instruction: 0x00003dba
    48b0:	00530001 	subseq	r0, r3, r1
    48b4:	00000000 	andeq	r0, r0, r0
    48b8:	82000000 	andhi	r0, r0, #0
    48bc:	8c00003e 	stchi	0, cr0, [r0], {62}	; 0x3e
    48c0:	0100003e 	tsteq	r0, lr, lsr r0
    48c4:	3e8c5000 	cdpcc	0, 8, cr5, cr12, cr0, {0}
    48c8:	3e960000 	cdpcc	0, 9, cr0, cr6, cr0, {0}
    48cc:	000e0000 	andeq	r0, lr, r0
    48d0:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    48d4:	2b141680 	blcs	50a2dc <__ccfg+0x4ea334>
    48d8:	16000128 	strne	r0, [r0], -r8, lsr #2
    48dc:	00009f13 	andeq	r9, r0, r3, lsl pc
    48e0:	00000000 	andeq	r0, r0, r0
    48e4:	3e7c0000 	cdpcc	0, 7, cr0, cr12, cr0, {0}
    48e8:	3ea80000 	cdpcc	0, 10, cr0, cr8, cr0, {0}
    48ec:	00010000 	andeq	r0, r1, r0
    48f0:	00000054 	andeq	r0, r0, r4, asr r0
    48f4:	00000000 	andeq	r0, r0, r0
    48f8:	003eac00 	eorseq	sl, lr, r0, lsl #24
    48fc:	003eb200 	eorseq	fp, lr, r0, lsl #4
    4900:	73001500 	movwvc	r1, #1280	; 0x500
    4904:	4b401200 	blmi	100910c <__ccfg+0xfe9164>
    4908:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    490c:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4910:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4914:	9f131600 	svcls	0x00131600
	...
    4920:	00003eb8 			; <UNDEFINED> instruction: 0x00003eb8
    4924:	00003ec2 	andeq	r3, r0, r2, asr #29
    4928:	00740017 	rsbseq	r0, r4, r7, lsl r0
    492c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4930:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    4934:	4b401416 	blmi	1009994 <__ccfg+0xfe99ec>
    4938:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    493c:	13160001 	tstne	r6, #1
    4940:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4950:	52000100 	andpl	r0, r0, #0, 2
	...
    4964:	00500001 	subseq	r0, r0, r1
	...
    4974:	01000000 	mrseq	r0, (UNDEF: 0)
    4978:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    4988:	00010000 	andeq	r0, r1, r0
    498c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    499c:	70001600 	andvc	r1, r0, r0, lsl #12
    49a0:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    49a4:	244b4000 	strbcs	r4, [fp], #-0
    49a8:	00050c22 	andeq	r0, r5, r2, lsr #24
    49ac:	282d8000 	stmdacs	sp!, {pc}
    49b0:	13160001 	tstne	r6, #1
    49b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    49b8:	00000000 	andeq	r0, r0, r0
    49bc:	003eec00 	eorseq	lr, lr, r0, lsl #24
    49c0:	003f2e00 	eorseq	r2, pc, r0, lsl #28
    49c4:	09000300 	stmdbeq	r0, {r8, r9}
    49c8:	3f2e9fff 	svccc	0x002e9fff
    49cc:	3f380000 	svccc	0x00380000
    49d0:	00010000 	andeq	r0, r1, r0
    49d4:	00000050 	andeq	r0, r0, r0, asr r0
    49d8:	00000000 	andeq	r0, r0, r0
    49dc:	003ef800 	eorseq	pc, lr, r0, lsl #16
    49e0:	003f0600 	eorseq	r0, pc, r0, lsl #12
    49e4:	50000100 	andpl	r0, r0, r0, lsl #2
    49e8:	00003f0a 	andeq	r3, r0, sl, lsl #30
    49ec:	00003f26 	andeq	r3, r0, r6, lsr #30
    49f0:	28500001 	ldmdacs	r0, {r0}^
    49f4:	2a00003f 	bcs	4af8 <patchGenfskRfe+0x550>
    49f8:	0100003f 	tsteq	r0, pc, lsr r0
    49fc:	3f2c5000 	svccc	0x002c5000
    4a00:	3f2e0000 	svccc	0x002e0000
    4a04:	00010000 	andeq	r0, r1, r0
    4a08:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4a18:	09000300 	stmdbeq	r0, {r8, r9}
    4a1c:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    4a20:	00000000 	andeq	r0, r0, r0
    4a24:	00010000 	andeq	r0, r1, r0
    4a28:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4a38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4a44:	00003f38 	andeq	r3, r0, r8, lsr pc
    4a48:	00003f72 	andeq	r3, r0, r2, ror pc
    4a4c:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4a50:	003f729f 	mlaseq	pc, pc, r2, r7	; <UNPREDICTABLE>
    4a54:	003f7600 	eorseq	r7, pc, r0, lsl #12
    4a58:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    4a5c:	003f769f 	mlaseq	pc, pc, r6, r7	; <UNPREDICTABLE>
    4a60:	003f7a00 	eorseq	r7, pc, r0, lsl #20
    4a64:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    4a68:	003f7a9f 	mlaseq	pc, pc, sl, r7	; <UNPREDICTABLE>
    4a6c:	003f9800 	eorseq	r9, pc, r0, lsl #16
    4a70:	09000300 	stmdbeq	r0, {r8, r9}
    4a74:	3f989fff 	svccc	0x00989fff
    4a78:	3f9a0000 	svccc	0x009a0000
    4a7c:	00010000 	andeq	r0, r1, r0
    4a80:	003f9a50 	eorseq	r9, pc, r0, asr sl	; <UNPREDICTABLE>
    4a84:	003f9c00 	eorseq	r9, pc, r0, lsl #24
    4a88:	09000300 	stmdbeq	r0, {r8, r9}
    4a8c:	3f9c9fff 	svccc	0x009c9fff
    4a90:	3fa40000 	svccc	0x00a40000
    4a94:	00010000 	andeq	r0, r1, r0
    4a98:	00000050 	andeq	r0, r0, r0, asr r0
    4a9c:	00000000 	andeq	r0, r0, r0
    4aa0:	003f4800 	eorseq	r4, pc, r0, lsl #16
    4aa4:	003fa000 	eorseq	sl, pc, r0
    4aa8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4ab4:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
    4ab8:	00003fc5 	andeq	r3, r0, r5, asr #31
    4abc:	c5500001 	ldrbgt	r0, [r0, #-1]
    4ac0:	da00003f 	ble	4bc4 <patchGenfskRfe+0x61c>
    4ac4:	0100003f 	tsteq	r0, pc, lsr r0
    4ac8:	3fda5400 	svccc	0x00da5400
    4acc:	3fde0000 	svccc	0x00de0000
    4ad0:	00040000 	andeq	r0, r4, r0
    4ad4:	9f5001f3 	svcls	0x005001f3
    4ad8:	00003fde 	ldrdeq	r3, [r0], -lr
    4adc:	00003fe0 	andeq	r3, r0, r0, ror #31
    4ae0:	e0540001 	subs	r0, r4, r1
    4ae4:	e400003f 	str	r0, [r0], #-63	; 0xffffffc1
    4ae8:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    4aec:	5001f300 	andpl	pc, r1, r0, lsl #6
    4af0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4af4:	00000000 	andeq	r0, r0, r0
    4af8:	003fbc00 	eorseq	fp, pc, r0, lsl #24
    4afc:	003fc500 	eorseq	ip, pc, r0, lsl #10
    4b00:	51000100 	mrspl	r0, (UNDEF: 16)
    4b04:	00003fc5 	andeq	r3, r0, r5, asr #31
    4b08:	00003fda 	ldrdeq	r3, [r0], -sl
    4b0c:	da550001 	ble	1544b18 <__ccfg+0x1524b70>
    4b10:	de00003f 	mcrle	0, 0, r0, cr0, cr15, {1}
    4b14:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    4b18:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4b1c:	003fde9f 	mlaseq	pc, pc, lr, sp	; <UNPREDICTABLE>
    4b20:	003fe000 	eorseq	lr, pc, r0
    4b24:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4b28:	00003fe0 	andeq	r3, r0, r0, ror #31
    4b2c:	00003fe4 	andeq	r3, r0, r4, ror #31
    4b30:	01f30004 	mvnseq	r0, r4
    4b34:	00009f51 	andeq	r9, r0, r1, asr pc
    4b38:	00000000 	andeq	r0, r0, r0
    4b3c:	3fc60000 	svccc	0x00c60000
    4b40:	3fdd0000 	svccc	0x00dd0000
    4b44:	00050000 	andeq	r0, r5, r0
    4b48:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4b4c:	003fde9f 	mlaseq	pc, pc, lr, sp	; <UNPREDICTABLE>
    4b50:	003fe400 	eorseq	lr, pc, r0, lsl #8
    4b54:	70000500 	andvc	r0, r0, r0, lsl #10
    4b58:	9f293000 	svcls	0x00293000
	...
    4b64:	00003fe4 	andeq	r3, r0, r4, ror #31
    4b68:	00003fe6 	andeq	r3, r0, r6, ror #31
    4b6c:	e6500001 	ldrb	r0, [r0], -r1
    4b70:	ec00003f 	stc	0, cr0, [r0], {63}	; 0x3f
    4b74:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    4b78:	5001f300 	andpl	pc, r1, r0, lsl #6
    4b7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b80:	00000000 	andeq	r0, r0, r0
    4b84:	003fe400 	eorseq	lr, pc, r0, lsl #8
    4b88:	003fe800 	eorseq	lr, pc, r0, lsl #16
    4b8c:	51000100 	mrspl	r0, (UNDEF: 16)
    4b90:	00003fe8 	andeq	r3, r0, r8, ror #31
    4b94:	00003fec 	andeq	r3, r0, ip, ror #31
    4b98:	01f30004 	mvnseq	r0, r4
    4b9c:	00009f51 	andeq	r9, r0, r1, asr pc
    4ba0:	00000000 	andeq	r0, r0, r0
    4ba4:	3fe40000 	svccc	0x00e40000
    4ba8:	3feb0000 	svccc	0x00eb0000
    4bac:	00010000 	andeq	r0, r1, r0
    4bb0:	003feb52 	eorseq	lr, pc, r2, asr fp	; <UNPREDICTABLE>
    4bb4:	003fec00 	eorseq	lr, pc, r0, lsl #24
    4bb8:	f3000400 	vshl.u8	d0, d0, d0
    4bbc:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    4bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    4bd0:	00005000 	andeq	r5, r0, r0
    4bd4:	00000000 	andeq	r0, r0, r0
    4bd8:	00040000 	andeq	r0, r4, r0
    4bdc:	9f5001f3 	svcls	0x005001f3
	...
    4bf0:	00510001 	subseq	r0, r1, r1
    4bf4:	00000000 	andeq	r0, r0, r0
    4bf8:	04000000 	streq	r0, [r0], #-0
    4bfc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4c00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4c10:	52000100 	andpl	r0, r0, #0, 2
	...
    4c1c:	01f30004 	mvnseq	r0, r4
    4c20:	00009f52 	andeq	r9, r0, r2, asr pc
    4c24:	00000000 	andeq	r0, r0, r0
    4c28:	00010000 	andeq	r0, r1, r0
    4c2c:	00000052 	andeq	r0, r0, r2, asr r0
    4c30:	00000000 	andeq	r0, r0, r0
    4c34:	f3001500 	vrshl.u8	d1, d0, d0
    4c38:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4c3c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4c40:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4c44:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4c48:	9f131600 	svcls	0x00131600
	...
    4c5c:	00530001 	subseq	r0, r3, r1
    4c60:	00000000 	andeq	r0, r0, r0
    4c64:	04000000 	streq	r0, [r0], #-0
    4c68:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4c6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4c7c:	70000400 	andvc	r0, r0, r0, lsl #8
    4c80:	009f0480 	addseq	r0, pc, r0, lsl #9
    4c84:	00000000 	andeq	r0, r0, r0
    4c88:	0d000000 	stceq	0, cr0, [r0, #-0]
    4c8c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4c90:	01f32431 	mvnseq	r2, r1, lsr r4
    4c94:	80232250 	eorhi	r2, r3, r0, asr r2
    4c98:	00009f04 	andeq	r9, r0, r4, lsl #30
    4c9c:	00000000 	andeq	r0, r0, r0
    4ca0:	00010000 	andeq	r0, r1, r0
    4ca4:	00000050 	andeq	r0, r0, r0, asr r0
    4ca8:	00000000 	andeq	r0, r0, r0
    4cac:	f3005200 	vhsub.u8	d5, d0, d0
    4cb0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4cb4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4cb8:	f3048023 	vhadd.u8	d8, d4, d19
    4cbc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4cc0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4cc4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cc8:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    4ccc:	13160001 	tstne	r6, #1
    4cd0:	f3048423 	vshl.u8	d8, d19, d4
    4cd4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4cd8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4cdc:	f3048023 	vhadd.u8	d8, d4, d19
    4ce0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4ce4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4ce8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cec:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    4cf0:	13160001 	tstne	r6, #1
    4cf4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cf8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4cfc:	13160001 	tstne	r6, #1
    4d00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d10:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4d1c:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    4d20:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4d24:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4d28:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4d2c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4d30:	f3131600 	vmax.u16	d1, d3, d0
    4d34:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4d38:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    4d3c:	0001282e 	andeq	r2, r1, lr, lsr #16
    4d40:	01f31316 	mvnseq	r1, r6, lsl r3
    4d44:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    4d48:	13160001 	tstne	r6, #1
    4d4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4d68:	01f30004 	mvnseq	r0, r4
    4d6c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4d7c:	00010000 	andeq	r0, r1, r0
    4d80:	00000051 	andeq	r0, r0, r1, asr r0
    4d84:	00000000 	andeq	r0, r0, r0
    4d88:	f3000400 	vshl.u8	d0, d0, d0
    4d8c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4da0:	00005200 	andeq	r5, r0, r0, lsl #4
    4da4:	00000000 	andeq	r0, r0, r0
    4da8:	00040000 	andeq	r0, r4, r0
    4dac:	9f5201f3 	svcls	0x005201f3
	...
    4db8:	00520001 	subseq	r0, r2, r1
    4dbc:	00000000 	andeq	r0, r0, r0
    4dc0:	1b000000 	blne	4dc8 <patchImageGenfsk+0x16c>
    4dc4:	5201f300 	andpl	pc, r1, #0, 6
    4dc8:	01f32540 	mvnseq	r2, r0, asr #10
    4dcc:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    4dd0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4dd4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4dd8:	01282b80 	smlawbeq	r8, r0, fp, r2
    4ddc:	9f131600 	svcls	0x00131600
	...
    4df0:	00530001 	subseq	r0, r3, r1
    4df4:	00000000 	andeq	r0, r0, r0
    4df8:	04000000 	streq	r0, [r0], #-0
    4dfc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4e00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e04:	00000000 	andeq	r0, r0, r0
    4e08:	53000100 	movwpl	r0, #256	; 0x100
	...
    4e14:	01f3001b 	mvnseq	r0, fp, lsl r0
    4e18:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    4e1c:	01f35301 	mvnseq	r5, r1, lsl #6
    4e20:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4e24:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4e28:	282b8000 	stmdacs	fp!, {pc}
    4e2c:	13160001 	tstne	r6, #1
    4e30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4e40:	91000200 	mrsls	r0, R8_usr
	...
    4e4c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    4e60:	70000400 	andvc	r0, r0, r0, lsl #8
    4e64:	009f0480 	addseq	r0, pc, r0, lsl #9
    4e68:	00000000 	andeq	r0, r0, r0
    4e6c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4e70:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4e74:	01f32431 	mvnseq	r2, r1, lsr r4
    4e78:	80232250 	eorhi	r2, r3, r0, asr r2
    4e7c:	00009f04 	andeq	r9, r0, r4, lsl #30
    4e80:	00000000 	andeq	r0, r0, r0
    4e84:	00010000 	andeq	r0, r1, r0
    4e88:	00000050 	andeq	r0, r0, r0, asr r0
    4e8c:	00000000 	andeq	r0, r0, r0
    4e90:	f3006400 	vshl.u8	d6, d0, d0
    4e94:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4e98:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4e9c:	f3048023 	vhadd.u8	d8, d4, d19
    4ea0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4ea4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4ea8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4eac:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4eb0:	8000000f 	andhi	r0, r0, pc
    4eb4:	0001282c 	andeq	r2, r1, ip, lsr #16
    4eb8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    4ebc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4ec0:	01f32431 	mvnseq	r2, r1, lsr r4
    4ec4:	80232250 	eorhi	r2, r3, r0, asr r2
    4ec8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4ecc:	01f32431 	mvnseq	r2, r1, lsr r4
    4ed0:	01f32250 	mvnseq	r2, r0, asr r2
    4ed4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4ed8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4edc:	282c8000 	stmdacs	ip!, {pc}
    4ee0:	13160001 	tstne	r6, #1
    4ee4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4ee8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4eec:	8000000f 	andhi	r0, r0, pc
    4ef0:	0001282b 	andeq	r2, r1, fp, lsr #16
    4ef4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4f04:	0a000000 	beq	4f0c <plug_null>
    4f08:	0a007400 	beq	21f10 <__ccfg+0x1f68>
    4f0c:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    4f10:	009f2400 	addseq	r2, pc, r0, lsl #8
    4f14:	00000000 	andeq	r0, r0, r0
    4f18:	0c000000 	stceq	0, cr0, [r0], {-0}
    4f1c:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    4f20:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4f24:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    4f28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f2c:	00000000 	andeq	r0, r0, r0
    4f30:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    4f34:	0a029400 	beq	a9f3c <__ccfg+0x89f94>
    4f38:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    4f3c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4f40:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4f44:	4b405301 	blmi	1019b50 <__ccfg+0xff9ba8>
    4f48:	0f0c2224 	svceq	0x000c2224
    4f4c:	2b800000 	blcs	fe004f54 <_estack+0xddffff54>
    4f50:	16000128 	strne	r0, [r0], -r8, lsr #2
    4f54:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    4f64:	01000000 	mrseq	r0, (UNDEF: 0)
    4f68:	00005000 	andeq	r5, r0, r0
    4f6c:	00000000 	andeq	r0, r0, r0
    4f70:	00040000 	andeq	r0, r4, r0
    4f74:	9f5001f3 	svcls	0x005001f3
	...
    4f88:	00510001 	subseq	r0, r1, r1
    4f8c:	00000000 	andeq	r0, r0, r0
    4f90:	04000000 	streq	r0, [r0], #-0
    4f94:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4fa8:	52000100 	andpl	r0, r0, #0, 2
	...
    4fb4:	00540001 	subseq	r0, r4, r1
    4fb8:	00000000 	andeq	r0, r0, r0
    4fbc:	15000000 	strne	r0, [r0, #-0]
    4fc0:	5201f300 	andpl	pc, r1, #0, 6
    4fc4:	01f32540 	mvnseq	r2, r0, asr #10
    4fc8:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    4fcc:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4fd0:	16000128 	strne	r0, [r0], -r8, lsr #2
    4fd4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4fe4:	00010000 	andeq	r0, r1, r0
    4fe8:	00000055 	andeq	r0, r0, r5, asr r0
    4fec:	00000000 	andeq	r0, r0, r0
    4ff0:	f3001d00 	vpadd.f32	d1, d0, d0
    4ff4:	01f35001 	mvnseq	r5, r1
    4ff8:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    4ffc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5000:	f3225101 	vrhadd.u32	d5, d2, d1
    5004:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5008:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    500c:	9f131600 	svcls	0x00131600
	...
    5020:	00750006 	rsbseq	r0, r5, r6
    5024:	9f1a0074 	svcls	0x001a0074
	...
    5038:	00550001 	subseq	r0, r5, r1
    503c:	00000000 	andeq	r0, r0, r0
    5040:	1d000000 	stcne	0, cr0, [r0, #-0]
    5044:	5001f300 	andpl	pc, r1, r0, lsl #6
    5048:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    504c:	01f30223 	mvnseq	r0, r3, lsr #4
    5050:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5054:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    5058:	2e302540 	cfneg32cs	mvfx2, mvfx0
    505c:	16000128 	strne	r0, [r0], -r8, lsr #2
    5060:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5070:	00070000 	andeq	r0, r7, r0
    5074:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    5078:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    5088:	05000000 	streq	r0, [r0, #-0]
    508c:	30007000 	andcc	r7, r0, r0
    5090:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    50a0:	00010000 	andeq	r0, r1, r0
    50a4:	00000050 	andeq	r0, r0, r0, asr r0
    50a8:	00000000 	andeq	r0, r0, r0
    50ac:	f3000400 	vshl.u8	d0, d0, d0
    50b0:	009f5001 	addseq	r5, pc, r1
	...
    50c0:	01000000 	mrseq	r0, (UNDEF: 0)
    50c4:	00005100 	andeq	r5, r0, r0, lsl #2
    50c8:	00000000 	andeq	r0, r0, r0
    50cc:	00040000 	andeq	r0, r4, r0
    50d0:	9f5101f3 	svcls	0x005101f3
	...
    50e4:	00520001 	subseq	r0, r2, r1
    50e8:	00000000 	andeq	r0, r0, r0
    50ec:	01000000 	mrseq	r0, (UNDEF: 0)
    50f0:	00005400 	andeq	r5, r0, r0, lsl #8
    50f4:	00000000 	andeq	r0, r0, r0
    50f8:	001b0000 	andseq	r0, fp, r0
    50fc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5100:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    5104:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5108:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    510c:	8000000f 	andhi	r0, r0, pc
    5110:	0001282b 	andeq	r2, r1, fp, lsr #16
    5114:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5124:	01000000 	mrseq	r0, (UNDEF: 0)
    5128:	00005300 	andeq	r5, r0, r0, lsl #6
    512c:	00000000 	andeq	r0, r0, r0
    5130:	00010000 	andeq	r0, r1, r0
    5134:	00000055 	andeq	r0, r0, r5, asr r0
    5138:	00000000 	andeq	r0, r0, r0
    513c:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    5140:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    5144:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    5148:	4b405301 	blmi	1019d54 <__ccfg+0xff9dac>
    514c:	0f0c2224 	svceq	0x000c2224
    5150:	2b800000 	blcs	fe005158 <_estack+0xde000158>
    5154:	16000128 	strne	r0, [r0], -r8, lsr #2
    5158:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5168:	00010000 	andeq	r0, r1, r0
    516c:	00000056 	andeq	r0, r0, r6, asr r0
    5170:	00000000 	andeq	r0, r0, r0
    5174:	70000600 	andvc	r0, r0, r0, lsl #12
    5178:	22007100 	andcs	r7, r0, #0, 2
    517c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5180:	00000000 	andeq	r0, r0, r0
    5184:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5190:	01f30023 	mvnseq	r0, r3, lsr #32
    5194:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5198:	f3022322 	vcgt.u8	d2, d2, d18
    519c:	01f35001 	mvnseq	r5, r1
    51a0:	01f32251 	mvnseq	r2, r1, asr r2
    51a4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    51a8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    51ac:	282b8000 	stmdacs	fp!, {pc}
    51b0:	13160001 	tstne	r6, #1
    51b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    51c4:	76000600 	strvc	r0, [r0], -r0, lsl #12
    51c8:	1a007400 	bne	221d0 <__ccfg+0x2228>
    51cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51d0:	00000000 	andeq	r0, r0, r0
    51d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    51e8:	00560001 	subseq	r0, r6, r1
    51ec:	00000000 	andeq	r0, r0, r0
    51f0:	23000000 	movwcs	r0, #0
    51f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    51f8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    51fc:	01f30223 	mvnseq	r0, r3, lsr #4
    5200:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5204:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5208:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    520c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5210:	01282b80 	smlawbeq	r8, r0, fp, r2
    5214:	9f131600 	svcls	0x00131600
	...
    5228:	00760007 	rsbseq	r0, r6, r7
    522c:	1affff0a 	bne	4e5c <patchImageGenfsk+0x200>
    5230:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5240:	70000500 	andvc	r0, r0, r0, lsl #10
    5244:	9f293000 	svcls	0x00293000
	...
    5260:	00000052 	andeq	r0, r0, r2, asr r0
    5264:	52510001 	subspl	r0, r1, #1
    5268:	96000000 	strls	r0, [r0], -r0
    526c:	04000000 	streq	r0, [r0], #-0
    5270:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5274:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5278:	00009800 	andeq	r9, r0, r0, lsl #16
    527c:	51000100 	mrspl	r0, (UNDEF: 16)
    5280:	00000098 	muleq	r0, r8, r0
    5284:	000000a0 	andeq	r0, r0, r0, lsr #1
    5288:	01f30004 	mvnseq	r0, r4
    528c:	00a09f51 	adceq	r9, r0, r1, asr pc
    5290:	00a60000 	adceq	r0, r6, r0
    5294:	00010000 	andeq	r0, r1, r0
    5298:	0000a651 	andeq	sl, r0, r1, asr r6
    529c:	0000aa00 	andeq	sl, r0, r0, lsl #20
    52a0:	f3000400 	vshl.u8	d0, d0, d0
    52a4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    52b0:	02020000 	andeq	r0, r2, #0
    52b4:	00000000 	andeq	r0, r0, r0
    52b8:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    52d8:	2a000000 	bcs	52e0 <__exidx_end+0x3b4>
    52dc:	01000000 	mrseq	r0, (UNDEF: 0)
    52e0:	002a5200 	eoreq	r5, sl, r0, lsl #4
    52e4:	00400000 	subeq	r0, r0, r0
    52e8:	00090000 	andeq	r0, r9, r0
    52ec:	00720071 	rsbseq	r0, r2, r1, ror r0
    52f0:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    52f4:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52f8:	00004200 	andeq	r4, r0, r0, lsl #4
    52fc:	71000b00 	tstvc	r0, r0, lsl #22
    5300:	22007200 	andcs	r7, r0, #0, 4
    5304:	401c0074 	andsmi	r0, ip, r4, ror r0
    5308:	00429f1c 	subeq	r9, r2, ip, lsl pc
    530c:	004c0000 	subeq	r0, ip, r0
    5310:	00090000 	andeq	r0, r9, r0
    5314:	00720071 	rsbseq	r0, r2, r1, ror r0
    5318:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    531c:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5320:	00005a00 	andeq	r5, r0, r0, lsl #20
    5324:	53000100 	movwpl	r0, #256	; 0x100
    5328:	0000005a 	andeq	r0, r0, sl, asr r0
    532c:	0000005e 	andeq	r0, r0, lr, asr r0
    5330:	00730006 	rsbseq	r0, r3, r6
    5334:	9f1c0076 	svcls	0x001c0076
    5338:	0000005e 	andeq	r0, r0, lr, asr r0
    533c:	00000060 	andeq	r0, r0, r0, rrx
    5340:	00730008 	rsbseq	r0, r3, r8
    5344:	341c0076 	ldrcc	r0, [ip], #-118	; 0xffffff8a
    5348:	00609f1c 	rsbeq	r9, r0, ip, lsl pc
    534c:	006a0000 	rsbeq	r0, sl, r0
    5350:	00060000 	andeq	r0, r6, r0
    5354:	00760073 	rsbseq	r0, r6, r3, ror r0
    5358:	006a9f1c 	rsbeq	r9, sl, ip, lsl pc
    535c:	00720000 	rsbseq	r0, r2, r0
    5360:	00080000 	andeq	r0, r8, r0
    5364:	1a3f0072 	bne	fc5534 <__ccfg+0xfa558c>
    5368:	9f1c0076 	svcls	0x001c0076
    536c:	00000072 	andeq	r0, r0, r2, ror r0
    5370:	00000076 	andeq	r0, r0, r6, ror r0
    5374:	01f30009 	mvnseq	r0, r9
    5378:	761a3f52 	ssaxvc	r3, sl, r2
    537c:	769f1c00 	ldrvc	r1, [pc], r0, lsl #24
    5380:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5384:	01000000 	mrseq	r0, (UNDEF: 0)
    5388:	00785200 	rsbseq	r5, r8, r0, lsl #4
    538c:	00800000 	addeq	r0, r0, r0
    5390:	00010000 	andeq	r0, r1, r0
    5394:	00008056 	andeq	r8, r0, r6, asr r0
    5398:	00008200 	andeq	r8, r0, r0, lsl #4
    539c:	73000700 	movwvc	r0, #1792	; 0x700
    53a0:	00762000 	rsbseq	r2, r6, r0
    53a4:	00829f22 	addeq	r9, r2, r2, lsr #30
    53a8:	00880000 	addeq	r0, r8, r0
    53ac:	00060000 	andeq	r0, r6, r0
    53b0:	00730076 	rsbseq	r0, r3, r6, ror r0
    53b4:	00889f1c 	addeq	r9, r8, ip, lsl pc
    53b8:	008c0000 	addeq	r0, ip, r0
    53bc:	00070000 	andeq	r0, r7, r0
    53c0:	76200073 			; <UNDEFINED> instruction: 0x76200073
    53c4:	969f2200 	ldrls	r2, [pc], r0, lsl #4
    53c8:	9a000000 	bls	53d0 <__exidx_end+0x4a4>
    53cc:	01000000 	mrseq	r0, (UNDEF: 0)
    53d0:	009a5200 	addseq	r5, sl, r0, lsl #4
    53d4:	00a00000 	adceq	r0, r0, r0
    53d8:	00010000 	andeq	r0, r1, r0
    53dc:	0000a056 	andeq	sl, r0, r6, asr r0
    53e0:	0000a200 	andeq	sl, r0, r0, lsl #4
    53e4:	52000100 	andpl	r0, r0, #0, 2
    53e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    53ec:	000000a6 	andeq	r0, r0, r6, lsr #1
    53f0:	a6560001 	ldrbge	r0, [r6], -r1
    53f4:	aa000000 	bge	53fc <__exidx_end+0x4d0>
    53f8:	01000000 	mrseq	r0, (UNDEF: 0)
    53fc:	00005300 	andeq	r5, r0, r0, lsl #6
    5400:	00000000 	andeq	r0, r0, r0
    5404:	00020000 	andeq	r0, r2, r0
    5408:	00000000 	andeq	r0, r0, r0
    540c:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    5418:	00760000 	rsbseq	r0, r6, r0
    541c:	00010000 	andeq	r0, r1, r0
    5420:	00007650 	andeq	r7, r0, r0, asr r6
    5424:	00008000 	andeq	r8, r0, r0
    5428:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    542c:	00000080 	andeq	r0, r0, r0, lsl #1
    5430:	00000082 	andeq	r0, r0, r2, lsl #1
    5434:	00750008 	rsbseq	r0, r5, r8
    5438:	23220073 			; <UNDEFINED> instruction: 0x23220073
    543c:	00829f01 	addeq	r9, r2, r1, lsl #30
    5440:	00820000 	addeq	r0, r2, r0
    5444:	00060000 	andeq	r0, r6, r0
    5448:	00730075 	rsbseq	r0, r3, r5, ror r0
    544c:	00829f22 	addeq	r9, r2, r2, lsr #30
    5450:	008c0000 	addeq	r0, ip, r0
    5454:	00080000 	andeq	r0, r8, r0
    5458:	00730075 	rsbseq	r0, r3, r5, ror r0
    545c:	9f012322 	svcls	0x00012322
    5460:	00000096 	muleq	r0, r6, r0
    5464:	00000098 	muleq	r0, r8, r0
    5468:	98500001 	ldmdals	r0, {r0}^
    546c:	a0000000 	andge	r0, r0, r0
    5470:	01000000 	mrseq	r0, (UNDEF: 0)
    5474:	00a05500 	adceq	r5, r0, r0, lsl #10
    5478:	00aa0000 	adceq	r0, sl, r0
    547c:	00010000 	andeq	r0, r1, r0
    5480:	00000050 	andeq	r0, r0, r0, asr r0
    5484:	00000000 	andeq	r0, r0, r0
    5488:	00000300 	andeq	r0, r0, r0, lsl #6
    548c:	00000000 	andeq	r0, r0, r0
    5490:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    549c:	00005200 	andeq	r5, r0, r0, lsl #4
    54a0:	51000100 	mrspl	r0, (UNDEF: 16)
    54a4:	00000052 	andeq	r0, r0, r2, asr r0
    54a8:	00000076 	andeq	r0, r0, r6, ror r0
    54ac:	01f30004 	mvnseq	r0, r4
    54b0:	00769f51 	rsbseq	r9, r6, r1, asr pc
    54b4:	00800000 	addeq	r0, r0, r0
    54b8:	00010000 	andeq	r0, r1, r0
    54bc:	00008051 	andeq	r8, r0, r1, asr r0
    54c0:	00008200 	andeq	r8, r0, r0, lsl #4
    54c4:	71000800 	tstvc	r0, r0, lsl #16
    54c8:	22007300 	andcs	r7, r0, #0, 6
    54cc:	829f0123 	addshi	r0, pc, #-1073741816	; 0xc0000008
    54d0:	82000000 	andhi	r0, r0, #0
    54d4:	06000000 	streq	r0, [r0], -r0
    54d8:	73007100 	movwvc	r7, #256	; 0x100
    54dc:	829f2200 	addshi	r2, pc, #0, 4
    54e0:	8c000000 	stchi	0, cr0, [r0], {-0}
    54e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    54e8:	73007100 	movwvc	r7, #256	; 0x100
    54ec:	01232200 			; <UNDEFINED> instruction: 0x01232200
    54f0:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    54f4:	0000a600 	andeq	sl, r0, r0, lsl #12
    54f8:	51000100 	mrspl	r0, (UNDEF: 16)
    54fc:	000000a6 	andeq	r0, r0, r6, lsr #1
    5500:	000000aa 	andeq	r0, r0, sl, lsr #1
    5504:	01f30004 	mvnseq	r0, r4
    5508:	00009f51 	andeq	r9, r0, r1, asr pc
    550c:	00000000 	andeq	r0, r0, r0
    5510:	01000000 	mrseq	r0, (UNDEF: 0)
    5514:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
    5518:	00010102 	andeq	r0, r1, r2, lsl #2
    551c:	00000000 	andeq	r0, r0, r0
    5520:	00010100 	andeq	r0, r1, r0, lsl #2
    5524:	00000000 	andeq	r0, r0, r0
    5528:	002a0000 	eoreq	r0, sl, r0
    552c:	002c0000 	eoreq	r0, ip, r0
    5530:	00090000 	andeq	r0, r9, r0
    5534:	00710070 	rsbseq	r0, r1, r0, ror r0
    5538:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    553c:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    5540:	00003a00 	andeq	r3, r0, r0, lsl #20
    5544:	70000b00 	andvc	r0, r0, r0, lsl #22
    5548:	1c007100 	stfnes	f7, [r0], {-0}
    554c:	23220074 			; <UNDEFINED> instruction: 0x23220074
    5550:	003a9f04 	eorseq	r9, sl, r4, lsl #30
    5554:	003a0000 	eorseq	r0, sl, r0
    5558:	000b0000 	andeq	r0, fp, r0
    555c:	00710070 	rsbseq	r0, r1, r0, ror r0
    5560:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5564:	3a9f0823 	bcc	fe7c75f8 <_estack+0xde7c25f8>
    5568:	40000000 	andmi	r0, r0, r0
    556c:	0b000000 	bleq	5574 <__exidx_end+0x648>
    5570:	71007000 	mrsvc	r7, (UNDEF: 0)
    5574:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5578:	9f0c2322 	svcls	0x000c2322
    557c:	00000040 	andeq	r0, r0, r0, asr #32
    5580:	00000042 	andeq	r0, r0, r2, asr #32
    5584:	0070000b 	rsbseq	r0, r0, fp
    5588:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    558c:	10232200 	eorne	r2, r3, r0, lsl #4
    5590:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5594:	00004c00 	andeq	r4, r0, r0, lsl #24
    5598:	70000900 	andvc	r0, r0, r0, lsl #18
    559c:	1c007100 	stfnes	f7, [r0], {-0}
    55a0:	9f220074 	svcls	0x00220074
    55a4:	00000056 	andeq	r0, r0, r6, asr r0
    55a8:	0000005a 	andeq	r0, r0, sl, asr r0
    55ac:	5a550001 	bpl	15455b8 <__ccfg+0x1525610>
    55b0:	5a000000 	bpl	55b8 <__exidx_end+0x68c>
    55b4:	06000000 	streq	r0, [r0], -r0
    55b8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    55bc:	5a9f2200 	bpl	fe7cddc4 <_estack+0xde7c8dc4>
    55c0:	60000000 	andvs	r0, r0, r0
    55c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    55c8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    55cc:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    55d0:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    55d4:	00007400 	andeq	r7, r0, r0, lsl #8
    55d8:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    55dc:	22007600 	andcs	r7, r0, #0, 12
    55e0:	0000749f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    55e4:	00007800 	andeq	r7, r0, r0, lsl #16
    55e8:	7c000b00 			; <UNDEFINED> instruction: 0x7c000b00
    55ec:	70243401 	eorvc	r3, r4, r1, lsl #8
    55f0:	00762200 	rsbseq	r2, r6, r0, lsl #4
    55f4:	00a69f22 	adceq	r9, r6, r2, lsr #30
    55f8:	00aa0000 	adceq	r0, sl, r0
    55fc:	00010000 	andeq	r0, r1, r0
    5600:	00000055 	andeq	r0, r0, r5, asr r0
    5604:	00000000 	andeq	r0, r0, r0
    5608:	01010000 	mrseq	r0, (UNDEF: 1)
    560c:	02020101 	andeq	r0, r2, #1073741824	; 0x40000000
    5610:	00000101 	andeq	r0, r0, r1, lsl #2
    5614:	00000000 	andeq	r0, r0, r0
    5618:	00000101 	andeq	r0, r0, r1, lsl #2
    561c:	00000000 	andeq	r0, r0, r0
    5620:	00002a00 	andeq	r2, r0, r0, lsl #20
    5624:	00002c00 	andeq	r2, r0, r0, lsl #24
    5628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    562c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5630:	0000003a 	andeq	r0, r0, sl, lsr r0
    5634:	04740003 	ldrbteq	r0, [r4], #-3
    5638:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    563c:	00003a00 	andeq	r3, r0, r0, lsl #20
    5640:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    5644:	003a9f08 	eorseq	r9, sl, r8, lsl #30
    5648:	00400000 	subeq	r0, r0, r0
    564c:	00030000 	andeq	r0, r3, r0
    5650:	409f0c74 	addsmi	r0, pc, r4, ror ip	; <UNPREDICTABLE>
    5654:	42000000 	andmi	r0, r0, #0
    5658:	03000000 	movweq	r0, #0
    565c:	9f107400 	svcls	0x00107400
    5660:	00000042 	andeq	r0, r0, r2, asr #32
    5664:	0000004c 	andeq	r0, r0, ip, asr #32
    5668:	54540001 	ldrbpl	r0, [r4], #-1
    566c:	5a000000 	bpl	5674 <__exidx_end+0x748>
    5670:	01000000 	mrseq	r0, (UNDEF: 0)
    5674:	005a5100 	subseq	r5, sl, r0, lsl #2
    5678:	005a0000 	subseq	r0, sl, r0
    567c:	00060000 	andeq	r0, r6, r0
    5680:	00760071 	rsbseq	r0, r6, r1, ror r0
    5684:	005a9f22 	subseq	r9, sl, r2, lsr #30
    5688:	00600000 	rsbeq	r0, r0, r0
    568c:	00080000 	andeq	r0, r8, r0
    5690:	00760071 	rsbseq	r0, r6, r1, ror r0
    5694:	9f042322 	svcls	0x00042322
    5698:	00000060 	andeq	r0, r0, r0, rrx
    569c:	00000076 	andeq	r0, r0, r6, ror r0
    56a0:	00710006 	rsbseq	r0, r1, r6
    56a4:	9f220076 	svcls	0x00220076
    56a8:	00000076 	andeq	r0, r0, r6, ror r0
    56ac:	00000078 	andeq	r0, r0, r8, ror r0
    56b0:	017c000c 	cmneq	ip, ip
    56b4:	01f32434 	mvnseq	r2, r4, lsr r4
    56b8:	00762251 	rsbseq	r2, r6, r1, asr r2
    56bc:	00a69f22 	adceq	r9, r6, r2, lsr #30
    56c0:	00aa0000 	adceq	r0, sl, r0
    56c4:	00010000 	andeq	r0, r1, r0
    56c8:	00000051 	andeq	r0, r0, r1, asr r0
	...
    56d4:	1a010000 	bne	456dc <__ccfg+0x25734>
    56d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    56dc:	01000000 	mrseq	r0, (UNDEF: 0)
    56e0:	001c5400 	andseq	r5, ip, r0, lsl #8
    56e4:	00240000 	eoreq	r0, r4, r0
    56e8:	00020000 	andeq	r0, r2, r0
    56ec:	00270073 	eoreq	r0, r7, r3, ror r0
    56f0:	00380000 	eorseq	r0, r8, r0
    56f4:	00040000 	andeq	r0, r4, r0
    56f8:	9f7ed874 	svcls	0x007ed874
	...
    5708:	00000004 	andeq	r0, r0, r4
    570c:	00000006 	andeq	r0, r0, r6
    5710:	00730002 	rsbseq	r0, r3, r2
    5714:	00000006 	andeq	r0, r0, r6
    5718:	00000008 	andeq	r0, r0, r8
    571c:	00530001 	subseq	r0, r3, r1
	...
    5730:	0c000000 	stceq	0, cr0, [r0], {-0}
    5734:	01000000 	mrseq	r0, (UNDEF: 0)
    5738:	000c5000 	andeq	r5, ip, r0
    573c:	00240000 	eoreq	r0, r4, r0
    5740:	00010000 	andeq	r0, r1, r0
    5744:	00002454 	andeq	r2, r0, r4, asr r4
    5748:	00002a00 	andeq	r2, r0, r0, lsl #20
    574c:	f3000400 	vshl.u8	d0, d0, d0
    5750:	2a9f5001 	bcs	fe7d975c <_estack+0xde7d475c>
    5754:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5758:	01000000 	mrseq	r0, (UNDEF: 0)
    575c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    5768:	00010100 	andeq	r0, r1, r0, lsl #2
    576c:	00000000 	andeq	r0, r0, r0
    5770:	000a0000 	andeq	r0, sl, r0
    5774:	00010000 	andeq	r0, r1, r0
    5778:	00000a50 	andeq	r0, r0, r0, asr sl
    577c:	00001600 	andeq	r1, r0, r0, lsl #12
    5780:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5784:	00000016 	andeq	r0, r0, r6, lsl r0
    5788:	0000001c 	andeq	r0, r0, ip, lsl r0
    578c:	01f30004 	mvnseq	r0, r4
    5790:	001c9f50 	andseq	r9, ip, r0, asr pc
    5794:	002c0000 	eoreq	r0, ip, r0
    5798:	00010000 	andeq	r0, r1, r0
    579c:	00000055 	andeq	r0, r0, r5, asr r0
	...
    57ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    57b0:	01000000 	mrseq	r0, (UNDEF: 0)
    57b4:	000c5100 	andeq	r5, ip, r0, lsl #2
    57b8:	00110000 	andseq	r0, r1, r0
    57bc:	00010000 	andeq	r0, r1, r0
    57c0:	00001150 	andeq	r1, r0, r0, asr r1
    57c4:	00002c00 	andeq	r2, r0, r0, lsl #24
    57c8:	f3000400 	vshl.u8	d0, d0, d0
    57cc:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    57dc:	11000000 	mrsne	r0, (UNDEF: 0)
    57e0:	01000000 	mrseq	r0, (UNDEF: 0)
    57e4:	00115200 	andseq	r5, r1, r0, lsl #4
    57e8:	002c0000 	eoreq	r0, ip, r0
    57ec:	00040000 	andeq	r0, r4, r0
    57f0:	9f5201f3 	svcls	0x005201f3
	...
    57fc:	00120000 	andseq	r0, r2, r0
    5800:	002c0000 	eoreq	r0, ip, r0
    5804:	00010000 	andeq	r0, r1, r0
    5808:	00000050 	andeq	r0, r0, r0, asr r0
	...
    5814:	20000101 	andcs	r0, r0, r1, lsl #2
    5818:	34000000 	strcc	r0, [r0], #-0
    581c:	01000000 	mrseq	r0, (UNDEF: 0)
    5820:	00345000 	eorseq	r5, r4, r0
    5824:	00ae0000 	adceq	r0, lr, r0
    5828:	00010000 	andeq	r0, r1, r0
    582c:	0000ae55 	andeq	sl, r0, r5, asr lr
    5830:	0000b800 	andeq	fp, r0, r0, lsl #16
    5834:	f3000400 	vshl.u8	d0, d0, d0
    5838:	009f5001 	addseq	r5, pc, r1
    583c:	00000000 	andeq	r0, r0, r0
    5840:	01000000 	mrseq	r0, (UNDEF: 0)
    5844:	00003a00 	andeq	r3, r0, r0, lsl #20
    5848:	00004100 	andeq	r4, r0, r0, lsl #2
    584c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    585c:	00360000 	eorseq	r0, r6, r0
    5860:	003c0000 	eorseq	r0, ip, r0
    5864:	00010000 	andeq	r0, r1, r0
    5868:	00003c51 	andeq	r3, r0, r1, asr ip
    586c:	00004800 	andeq	r4, r0, r0, lsl #16
    5870:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5874:	00000048 	andeq	r0, r0, r8, asr #32
    5878:	00000050 	andeq	r0, r0, r0, asr r0
    587c:	00510001 	subseq	r0, r1, r1
	...
    5888:	76000000 	strvc	r0, [r0], -r0
    588c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5890:	01000000 	mrseq	r0, (UNDEF: 0)
    5894:	00785100 	rsbseq	r5, r8, r0, lsl #2
    5898:	00840000 	addeq	r0, r4, r0
    589c:	00010000 	andeq	r0, r1, r0
    58a0:	00000054 	andeq	r0, r0, r4, asr r0
    58a4:	00000000 	andeq	r0, r0, r0
    58a8:	76000100 	strvc	r0, [r0], -r0, lsl #2
    58ac:	7d000000 	stcvc	0, cr0, [r0, #-0]
    58b0:	01000000 	mrseq	r0, (UNDEF: 0)
    58b4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    58c0:	00010100 	andeq	r0, r1, r0, lsl #2
    58c4:	00000000 	andeq	r0, r0, r0
    58c8:	0000000f 	andeq	r0, r0, pc
    58cc:	0f500001 	svceq	0x00500001
    58d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    58d4:	01000000 	mrseq	r0, (UNDEF: 0)
    58d8:	00185500 	andseq	r5, r8, r0, lsl #10
    58dc:	001e0000 	andseq	r0, lr, r0
    58e0:	00040000 	andeq	r0, r4, r0
    58e4:	9f5001f3 	svcls	0x005001f3
	...
    58f0:	01000000 	mrseq	r0, (UNDEF: 0)
    58f4:	00000001 	andeq	r0, r0, r1
    58f8:	00060000 	andeq	r0, r6, r0
    58fc:	00010000 	andeq	r0, r1, r0
    5900:	00000651 	andeq	r0, r0, r1, asr r6
    5904:	00001800 	andeq	r1, r0, r0, lsl #16
    5908:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    590c:	00000018 	andeq	r0, r0, r8, lsl r0
    5910:	0000001e 	andeq	r0, r0, lr, lsl r0
    5914:	01f30004 	mvnseq	r0, r4
    5918:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5928:	000e0000 	andeq	r0, lr, r0
    592c:	00060000 	andeq	r0, r6, r0
    5930:	51049350 	tstpl	r4, r0, asr r3
    5934:	000e0493 	muleq	lr, r3, r4
    5938:	00540000 	subseq	r0, r4, r0
    593c:	00060000 	andeq	r0, r6, r0
    5940:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    5944:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5954:	003e0000 	eorseq	r0, lr, r0
    5958:	00060000 	andeq	r0, r6, r0
    595c:	53049352 	movwpl	r9, #17234	; 0x4352
    5960:	003e0493 	mlaseq	lr, r3, r4, r0
    5964:	00540000 	subseq	r0, r4, r0
    5968:	00060000 	andeq	r0, r6, r0
    596c:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
    5970:	00009f25 	andeq	r9, r0, r5, lsr #30
    5974:	00000000 	andeq	r0, r0, r0
    5978:	02000000 	andeq	r0, r0, #0
    597c:	0000001a 	andeq	r0, r0, sl, lsl r0
    5980:	0000004a 	andeq	r0, r0, sl, asr #32
    5984:	00560001 	subseq	r0, r6, r1
    5988:	00000000 	andeq	r0, r0, r0
    598c:	01000000 	mrseq	r0, (UNDEF: 0)
    5990:	00000000 	andeq	r0, r0, r0
    5994:	00001a00 	andeq	r1, r0, r0, lsl #20
    5998:	00001e00 	andeq	r1, r0, r0, lsl #28
    599c:	70000600 	andvc	r0, r0, r0, lsl #12
    59a0:	1e007400 	cfcpysne	mvf7, mvf0
    59a4:	00001e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    59a8:	00002200 	andeq	r2, r0, r0, lsl #4
    59ac:	50000100 	andpl	r0, r0, r0, lsl #2
    59b0:	00000026 	andeq	r0, r0, r6, lsr #32
    59b4:	00000044 	andeq	r0, r0, r4, asr #32
    59b8:	00540001 	subseq	r0, r4, r1
	...
    59c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    59c8:	36000000 	strcc	r0, [r0], -r0
    59cc:	01000000 	mrseq	r0, (UNDEF: 0)
    59d0:	00365500 	eorseq	r5, r6, r0, lsl #10
    59d4:	003e0000 	eorseq	r0, lr, r0
    59d8:	000c0000 	andeq	r0, ip, r0
    59dc:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    59e0:	007c2540 	rsbseq	r2, ip, r0, asr #10
    59e4:	9f1e2540 	svcls	0x001e2540
	...
    59f0:	00200000 	eoreq	r0, r0, r0
    59f4:	003c0000 	eorseq	r0, ip, r0
    59f8:	00010000 	andeq	r0, r1, r0
    59fc:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5a08:	00001200 	andeq	r1, r0, r0, lsl #4
    5a0c:	00001e00 	andeq	r1, r0, r0, lsl #28
    5a10:	50000100 	andpl	r0, r0, r0, lsl #2
    5a14:	0000001e 	andeq	r0, r0, lr, lsl r0
    5a18:	00000054 	andeq	r0, r0, r4, asr r0
    5a1c:	007c0007 	rsbseq	r0, ip, r7
    5a20:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5a30:	00001600 	andeq	r1, r0, r0, lsl #12
    5a34:	00001c00 	andeq	r1, r0, r0, lsl #24
    5a38:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
    5a40:	0000003e 	andeq	r0, r0, lr, lsr r0
    5a44:	00720007 	rsbseq	r0, r2, r7
    5a48:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5a4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5a58:	00001400 	andeq	r1, r0, r0, lsl #8
    5a5c:	00002000 	andeq	r2, r0, r0
    5a60:	51000100 	mrspl	r0, (UNDEF: 16)
    5a64:	00000020 	andeq	r0, r0, r0, lsr #32
    5a68:	00000054 	andeq	r0, r0, r4, asr r0
    5a6c:	007c0005 	rsbseq	r0, ip, r5
    5a70:	009f2540 	addseq	r2, pc, r0, asr #10
    5a74:	00000000 	andeq	r0, r0, r0
    5a78:	01000000 	mrseq	r0, (UNDEF: 0)
    5a7c:	16000000 	strne	r0, [r0], -r0
    5a80:	24000000 	strcs	r0, [r0], #-0
    5a84:	01000000 	mrseq	r0, (UNDEF: 0)
    5a88:	00245400 	eoreq	r5, r4, r0, lsl #8
    5a8c:	003e0000 	eorseq	r0, lr, r0
    5a90:	00050000 	andeq	r0, r5, r0
    5a94:	25400072 	strbcs	r0, [r0, #-114]	; 0xffffff8e
    5a98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5aa8:	00000400 	andeq	r0, r0, r0, lsl #8
    5aac:	50000100 	andpl	r0, r0, r0, lsl #2
    5ab0:	00000004 	andeq	r0, r0, r4
    5ab4:	00000010 	andeq	r0, r0, r0, lsl r0
    5ab8:	01f30004 	mvnseq	r0, r4
    5abc:	00009f50 	andeq	r9, r0, r0, asr pc
    5ac0:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
}
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	0000005c 	andeq	r0, r0, ip, asr r0
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000124 	andeq	r0, r0, r4, lsr #2
  24:	00000018 	andeq	r0, r0, r8, lsl r0
  28:	0000013c 	andeq	r0, r0, ip, lsr r1
  2c:	000002c8 	andeq	r0, r0, r8, asr #5
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	131f0002 	tstne	pc, #2
			i = k;
  40:	00040000 	andeq	r0, r4, r0
				j->Next = k;
  44:	00000000 	andeq	r0, r0, r0
  48:	00000404 	andeq	r0, r0, r4, lsl #8
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	00000410 	andeq	r0, r0, r0, lsl r4
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	0000043c 	andeq	r0, r0, ip, lsr r4
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
		b->length - b->u.pointers.head - b->u.pointers.tail;
  60:	00000468 	andeq	r0, r0, r8, ror #8
	b->u.pointers.tail =
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
}
  68:	000004a4 	andeq	r0, r0, r4, lsr #9
		return NULL;
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	000004e4 	andeq	r0, r0, r4, ror #9
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	00000538 	andeq	r0, r0, r8, lsr r5
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	00000578 	andeq	r0, r0, r8, ror r5
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
  90:	000005a0 	andeq	r0, r0, r0, lsr #11
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
  9c:	00000050 	andeq	r0, r0, r0, asr r0
  a0:	00000704 	andeq	r0, r0, r4, lsl #14
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	00000758 	andeq	r0, r0, r8, asr r7
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	00000790 	muleq	r0, r0, r7
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	000008a0 	andeq	r0, r0, r0, lsr #17
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
fsm transmitter (message * messagePtr) {
  c8:	00000960 	andeq	r0, r0, r0, ror #18
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	000009a4 	andeq	r0, r0, r4, lsr #19
}
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	000009e0 	andeq	r0, r0, r0, ror #19
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	00000a84 	andeq	r0, r0, r4, lsl #21
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000c3c 	andeq	r0, r0, ip, lsr ip
        spkt [0] = 0;
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
        *p = messagePtr->senderGroupId; p += 2;
  f0:	00000000 	andeq	r0, r0, r0
        *p = messagePtr->messageType; p++;
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
        *p = messagePtr->requestNumber; p++;
  f8:	00000c60 	andeq	r0, r0, r0, ror #24
        *p = messagePtr->senderId; p++; // insert sender ID
  fc:	00000258 	andeq	r0, r0, r8, asr r2
        *p = messagePtr->receiverId; p++; // insert receiveer ID
 100:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
        tcv_endp (spkt);
 104:	00000030 	andeq	r0, r0, r0, lsr r0
        ser_outf(Transmit_Message, "Message Sent\n\r");
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
}
 110:	00000ee8 	andeq	r0, r0, r8, ror #29
        finish;
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
char randomNumber() {
 124:	27af0002 	strcs	r0, [pc, r2]!
   srand((unsigned) time(&t));
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
   return (char)rand();
 130:	00000f48 	andeq	r0, r0, r8, asr #30
}
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
 138:	00000f84 	andeq	r0, r0, r4, lsl #31
fsm root {
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
 140:	00001004 	andeq	r1, r0, r4
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
 150:	0000101c 	andeq	r1, r0, ip, lsl r0
 154:	00000010 	andeq	r0, r0, r0, lsl r0
 158:	0000102c 	andeq	r1, r0, ip, lsr #32
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
 160:	00000000 	andeq	r0, r0, r0
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00001058 	andeq	r1, r0, r8, asr r0
 16c:	00000006 	andeq	r0, r0, r6
        recordCount = 0;
 170:	00001060 	andeq	r1, r0, r0, rrx
        nodeId = 1;
 174:	000000cc 	andeq	r0, r0, ip, asr #1
 178:	0000112c 	andeq	r1, r0, ip, lsr #2
        groupId = 1;
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	00001140 	andeq	r1, r0, r0, asr #2
        messagePtr = (message *) umalloc(sizeof(message));
 184:	00000034 	andeq	r0, r0, r4, lsr r0
        phys_cc1350(0, MAX_PACKET_LENGTH);
 188:	00001174 	andeq	r1, r0, r4, ror r1
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
 190:	00000000 	andeq	r0, r0, r0
        tcv_plug(0, &plug_null);
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	000011a8 	andeq	r1, r0, r8, lsr #3
        sfd = tcv_open(WNONE, 0, 0);
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
 1a0:	000011cc 	andeq	r1, r0, ip, asr #3
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 1a8:	00000000 	andeq	r0, r0, r0
        sfd = tcv_open(WNONE, 0, 0);
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 1b0:	00000000 	andeq	r0, r0, r0
		if (sfd < 0) {
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
			diag("Cannot open tcv interface");
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
			halt();
 1c0:	00001204 	andeq	r1, r0, r4, lsl #4
        currentProtocol = IDLE;
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
 1c8:	00000000 	andeq	r0, r0, r0
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
 1d0:	00001228 	andeq	r1, r0, r8, lsr #4
 1d4:	0000000e 	andeq	r0, r0, lr
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
        ser_outf(Options, menu);
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Choice, "%c", &choice);
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
        switch (choice)
 1f8:	00001236 	andeq	r1, r0, r6, lsr r2
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	0000124a 	andeq	r1, r0, sl, asr #4
 204:	0000000e 	andeq	r0, r0, lr
 208:	00001258 	andeq	r1, r0, r8, asr r2
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	0000127c 	andeq	r1, r0, ip, ror r2
 214:	0000009c 	muleq	r0, ip, r0
 218:	00001318 	andeq	r1, r0, r8, lsl r3
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	00001368 	andeq	r1, r0, r8, ror #6
 224:	00000048 	andeq	r0, r0, r8, asr #32
        proceed Menu_Header;
 228:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
 22c:	00000050 	andeq	r0, r0, r0, asr r0
        ser_outf(Set_Group_ID, "New Group ID: ");
 230:	00000000 	andeq	r0, r0, r0
 234:	00000058 	andeq	r0, r0, r8, asr r0
        ser_inf(Get_Group_ID, "%d", &groupId);
 238:	00001400 	andeq	r1, r0, r0, lsl #8
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
        proceed Menu_Header;
 240:	000014a8 	andeq	r1, r0, r8, lsr #9
 244:	00000034 	andeq	r0, r0, r4, lsr r0
        ser_outf(Set_Node_ID, "New node ID (1-25):");
 248:	000014dc 	ldrdeq	r1, [r0], -ip
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_inf(Get_Node_ID, "%d", &nodeId);
 250:	00000000 	andeq	r0, r0, r0
 254:	00000030 	andeq	r0, r0, r0, lsr r0
 258:	00000000 	andeq	r0, r0, r0
    if (node < 1 || node > 25) {
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
 260:	000014f4 	strdeq	r1, [r0], -r4
            proceed Set_Node_ID;
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
        proceed Menu_Header;
 268:	00001630 	andeq	r1, r0, r0, lsr r6
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
        receiverId = 0;
 278:	00000104 	andeq	r0, r0, r4, lsl #2
        proceed Transmit_Message;
 27c:	39d20002 	ldmibcc	r2, {r1}^
        currentProtocol = CREATE_RECORD;
 280:	00040000 	andeq	r0, r4, r0
        ser_outf(Create_Record, "Receiver node ID (1-25):");
 284:	00000000 	andeq	r0, r0, r0
 288:	00001654 	andeq	r1, r0, r4, asr r6
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
 290:	0000166a 	andeq	r1, r0, sl, ror #12
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
    if (node < 1 || node > 25) {
 298:	00001684 	andeq	r1, r0, r4, lsl #13
 29c:	0000000e 	andeq	r0, r0, lr
            proceed Create_Record;
 2a0:	00001694 	muleq	r0, r4, r6
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
 2a8:	000016e0 	andeq	r1, r0, r0, ror #13
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
 2b0:	0000176c 	andeq	r1, r0, ip, ror #14
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
 2b8:	000017dc 	ldrdeq	r1, [r0], -ip
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
 2c0:	00000000 	andeq	r0, r0, r0
        proceed Transmit_Message;
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
 2c8:	0000189c 	muleq	r0, ip, r8
        proceed Transmit_Message;
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
        currentProtocol = DELETE_RECORD;
 2d0:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
        currentProtocol = DELETE_RECORD;
 2d8:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
        proceed Get_Receiving_Node;
 2e0:	00000000 	andeq	r0, r0, r0
        currentProtocol = RETRIEVE_RECORD;
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
 2e8:	000018c0 	andeq	r1, r0, r0, asr #17
        currentProtocol = RETRIEVE_RECORD;
 2ec:	000000bc 	strheq	r0, [r0], -ip
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
 2f0:	00000000 	andeq	r0, r0, r0
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
 300:	00000000 	andeq	r0, r0, r0
 304:	0000000a 	andeq	r0, r0, sl
    if (node < 1 || node > 25) {
 308:	0000197c 	andeq	r1, r0, ip, ror r9
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
            proceed Prompt_Recieving_Node;
 310:	000019a8 	andeq	r1, r0, r8, lsr #19
        ser_outf(Prompt_Record_Index, "Record index:");
 314:	00000060 	andeq	r0, r0, r0, rrx
 318:	00000000 	andeq	r0, r0, r0
        char desiredRecordIndex = -1;
 31c:	00000040 	andeq	r0, r0, r0, asr #32
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
 320:	00000000 	andeq	r0, r0, r0
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
        char desiredRecordIndex = -1;
 328:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
        messagePtr->recordIndex = desiredRecordIndex;
 330:	00000000 	andeq	r0, r0, r0
 334:	00000006 	andeq	r0, r0, r6
 338:	00001a08 	andeq	r1, r0, r8, lsl #20
        proceed Transmit_Message;
 33c:	00000068 	andeq	r0, r0, r8, rrx
        messagePtr -> senderGroupId = groupId;
 340:	00001a70 	andeq	r1, r0, r0, ror sl
 344:	00000050 	andeq	r0, r0, r0, asr r0
 348:	00001ac0 	andeq	r1, r0, r0, asr #21
        messagePtr -> messageType = currentProtocol;
 34c:	0000009c 	muleq	r0, ip, r0
        messagePtr -> requestNumber = randomNumber();
 350:	00001b5c 	andeq	r1, r0, ip, asr fp
        messagePtr -> senderId = nodeId;
 354:	00000040 	andeq	r0, r0, r0, asr #32
 358:	00001b9c 	muleq	r0, ip, fp
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
        call transmitter(messagePtr, Menu_Header);
 360:	00001bd0 	ldrdeq	r1, [r0], -r0
        messagePtr -> receiverId = receiverId;
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
        call transmitter(messagePtr, Menu_Header);
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
 370:	00001c0c 	andeq	r1, r0, ip, lsl #24
 374:	00000002 	andeq	r0, r0, r2
	...
            proceed Set_Node_ID;
 380:	00000034 	andeq	r0, r0, r4, lsr r0
            proceed Find_Neighbours;
 384:	4d090002 	stcmi	0, cr0, [r9, #-8]
            proceed Create_Record;
 388:	00040000 	andeq	r0, r4, r0
            proceed Delete_Record;
 38c:	00000000 	andeq	r0, r0, r0
            proceed Retrieve_Record;
 390:	00001c0e 	andeq	r1, r0, lr, lsl #24
            diag("Reset Local Storage");
 394:	00000002 	andeq	r0, r0, r2
            break;
 398:	00001c10 	andeq	r1, r0, r0, lsl ip
            diag("Reset Local Storage");
 39c:	00000002 	andeq	r0, r0, r2
 3a0:	00001c12 	andeq	r1, r0, r2, lsl ip
 3a4:	00000002 	andeq	r0, r0, r2
 3a8:	00001c14 	andeq	r1, r0, r4, lsl ip
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
 3bc:	4e810002 	cdpmi	0, 8, cr0, cr1, cr2, {0}
 3c0:	00040000 	andeq	r0, r4, r0
	...
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
 3d4:	53bc0002 			; <UNDEFINED> instruction: 0x53bc0002
 3d8:	00040000 	andeq	r0, r4, r0
	...
 3e4:	00000002 	andeq	r0, r0, r2
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
 3fc:	58c00002 	stmiapl	r0, {r1}^
 400:	00040000 	andeq	r0, r4, r0
	...
	adddevfunc (ioreq_uart_a, devnum);
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
void udelay (volatile word n) {
 410:	00000000 	andeq	r0, r0, r0
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
}
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
	while (n--);
 424:	5dba0002 	ldcpl	0, cr0, [sl, #8]!
 428:	00040000 	andeq	r0, r4, r0
 42c:	00000000 	andeq	r0, r0, r0
		n--;
 430:	00001c60 	andeq	r1, r0, r0, ror #24
 434:	00000034 	andeq	r0, r0, r4, lsr r0
 438:	00001c94 	muleq	r0, r4, ip
void mdelay (volatile word n) {
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
 440:	00001cc4 	andeq	r1, r0, r4, asr #25
	while (n) {
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	00001cdc 	ldrdeq	r1, [r0], -ip
}
 44c:	00000054 	andeq	r0, r0, r4, asr r0
		udelay (999);
 450:	00001d30 	andeq	r1, r0, r0, lsr sp
 454:	00000040 	andeq	r0, r0, r0, asr #32
		n--;
 458:	00001d70 	andeq	r1, r0, r0, ror sp
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	00001d94 	muleq	r0, r4, sp
 464:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_ondomain (lword d) {
 468:	00001da8 	andeq	r1, r0, r8, lsr #27
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.effpdm > 1)
 470:	00000000 	andeq	r0, r0, r0
 474:	00000064 	andeq	r0, r0, r4, rrx
			__pi_systat.effpdm = 1;
 478:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOn (d);
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
 480:	00000000 	andeq	r0, r0, r0
 484:	000000ec 	andeq	r0, r0, ip, ror #1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000002 	andeq	r0, r0, r2
 490:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
 494:	00000004 	andeq	r0, r0, r4
 498:	00000000 	andeq	r0, r0, r0
}
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
 4a0:	00000000 	andeq	r0, r0, r0
void __pi_offdomain (lword d) {
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	68650002 	stmdavs	r5!, {r1}^
 4b8:	00040000 	andeq	r0, r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
 4bc:	00000000 	andeq	r0, r0, r0
 4c0:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
			__pi_systat.effpdm = __pi_systat.reqpdm;
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
	__pi_systat.ondmns &= ~d;
 4d4:	6c7b0002 	ldclvs	0, cr0, [fp], #-8
 4d8:	00040000 	andeq	r0, r4, r0
}
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	00001e34 	andeq	r1, r0, r4, lsr lr
void __pi_syserror (word ec, const char *m) {
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
  __ASM volatile ("cpsid i" : : : "memory");
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 4f4:	70cb0002 	sbcvc	r0, fp, r2
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
 500:	00001e88 	andeq	r1, r0, r8, lsl #29
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 510:	0000006c 	andeq	r0, r0, ip, rrx
 514:	751b0002 	ldrvc	r0, [fp, #-2]
 518:	00040000 	andeq	r0, r4, r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	00001ee8 	andeq	r1, r0, r8, ror #29
 524:	00000020 	andeq	r0, r0, r0, lsr #32
	while (1) {
 528:	00001f08 	andeq	r1, r0, r8, lsl #30
 52c:	00000190 	muleq	r0, r0, r1
 530:	00002098 	muleq	r0, r8, r0
 534:	00000048 	andeq	r0, r0, r8, asr #32
void tci_run_delay_timer () {
 538:	000020e0 	andeq	r2, r0, r0, ror #1
	setdel = __pi_mintk - __pi_old;
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
 540:	00002104 	andeq	r2, r0, r4, lsl #2
 544:	0000005c 	andeq	r0, r0, ip, asr r0
 548:	00002160 	andeq	r2, r0, r0, ror #2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 54c:	00000038 	andeq	r0, r0, r8, lsr r0
 550:	00002198 	muleq	r0, r8, r1
 554:	00000180 	andeq	r0, r0, r0, lsl #3
 558:	00002318 	andeq	r2, r0, r8, lsl r3
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 55c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	sti_tim;
 560:	000023e8 	andeq	r2, r0, r8, ror #7
}
 564:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 568:	000025d8 	ldrdeq	r2, [r0], -r8
 56c:	00000070 	andeq	r0, r0, r0, ror r0
 570:	00002648 	andeq	r2, r0, r8, asr #12
 574:	00000174 	andeq	r0, r0, r4, ror r1
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 580:	00000044 	andeq	r0, r0, r4, asr #32
 584:	99930002 	ldmibls	r3, {r1}
 588:	00040000 	andeq	r0, r4, r0
 58c:	00000000 	andeq	r0, r0, r0
	sti_aux;
 590:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
}
 594:	00000024 	andeq	r0, r0, r4, lsr #32
 598:	000027e0 	andeq	r2, r0, r0, ror #15
 59c:	00000024 	andeq	r0, r0, r4, lsr #32
void AONRTCIntHandler () {
 5a0:	00002804 	andeq	r2, r0, r4, lsl #16
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 5a4:	00000008 	andeq	r0, r0, r8
 5a8:	0000280c 	andeq	r2, r0, ip, lsl #16
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 5ac:	00000004 	andeq	r0, r0, r4
		if (__pi_utims [0] == 0)
 5b0:	00002810 	andeq	r2, r0, r0, lsl r8
 5b4:	00000004 	andeq	r0, r0, r4
		if (*(__pi_utims [0])) {
 5b8:	00002814 	andeq	r2, r0, r4, lsl r8
 5bc:	00000048 	andeq	r0, r0, r8, asr #32
	...
		if (*(__pi_utims [1])) {
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
			aux_timer_inactive = 0;
 5cc:	a0c80002 	sbcge	r0, r8, r2
			(*(__pi_utims [1]))--;
 5d0:	00040000 	andeq	r0, r4, r0
		if (__pi_utims [2] == 0)
 5d4:	00000000 	andeq	r0, r0, r0
		if (*(__pi_utims [2])) {
 5d8:	0000285c 	andeq	r2, r0, ip, asr r8
			(*(__pi_utims [2]))--;
 5dc:	00000070 	andeq	r0, r0, r0, ror r0
	...
				aux_timer_inactive = 0;
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
				(*(__pi_utims [3]))--;
 5ec:	a4f90002 	ldrbtge	r0, [r9], #2
	if (__pi_systat.ledsts) {
 5f0:	00040000 	andeq	r0, r4, r0
 5f4:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
 5f8:	000028cc 	andeq	r2, r0, ip, asr #17
 5fc:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
			if (__pi_systat.ledblk) {
 608:	0000002c 	andeq	r0, r0, ip, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 60c:	a93d0002 	ldmdbge	sp!, {r1}
 610:	00040000 	andeq	r0, r4, r0
				if (__pi_systat.ledsts & 0x2)
 614:	00000000 	andeq	r0, r0, r0
 618:	000029e8 	andeq	r2, r0, r8, ror #19
 61c:	00000020 	andeq	r0, r0, r0, lsr #32
				if (__pi_systat.ledsts & 0x4)
 620:	00002a08 	andeq	r2, r0, r8, lsl #20
				__pi_systat.ledblk = 0;
 624:	00000230 	andeq	r0, r0, r0, lsr r2
 628:	00002c38 	andeq	r2, r0, r8, lsr ip
			if (__pi_systat.fstblk)
 62c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (events & AON_RTC_EVFLAGS_CH0) {
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
		cli_tim;
 63c:	af310002 	svcge	0x00310002
		__pi_new += setdel;
 640:	00040000 	andeq	r0, r4, r0
 644:	00000000 	andeq	r0, r0, r0
		setdel = 0;
 648:	00002c88 	andeq	r2, r0, r8, lsl #25
		RISE_N_SHINE;
 64c:	00000390 	muleq	r0, r0, r3
	...
 658:	00000014 	andeq	r0, r0, r4, lsl r0
		aux_timer_inactive = 1;
 65c:	b4c40002 	strblt	r0, [r4], #2
 660:	00040000 	andeq	r0, r4, r0
	...
				if (__pi_systat.ledsts & 0x2)
 670:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 674:	d4b20002 	ldrtle	r0, [r2], #2
 678:	00040000 	andeq	r0, r4, r0
				if (__pi_systat.ledsts & 0x8)
 67c:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 1;
 680:	00003018 	andeq	r3, r0, r8, lsl r0
 684:	00000028 	andeq	r0, r0, r8, lsr #32
		if (aux_timer_inactive) {
 688:	00000000 	andeq	r0, r0, r0
			cli_aux;
 68c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	d6400002 	strble	r0, [r0], -r2
 6a0:	00040000 	andeq	r0, r4, r0
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	00003040 	andeq	r3, r0, r0, asr #32
 6ac:	00000030 	andeq	r0, r0, r0, lsr r0
	...
	cli_tim;
 6b8:	00000024 	andeq	r0, r0, r4, lsr #32
 6bc:	d7190002 	ldrle	r0, [r9, -r2]
	if (setdel) {
 6c0:	00040000 	andeq	r0, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6c4:	00000000 	andeq	r0, r0, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 6c8:	00003070 	andeq	r3, r0, r0, ror r0
 6cc:	00000020 	andeq	r0, r0, r0, lsr #32
 6d0:	00003090 	muleq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6d4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
			setdel = 0;
 6e0:	0000003c 	andeq	r0, r0, ip, lsr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6e4:	d8600002 	stmdale	r0!, {r1}^
 6e8:	00040000 	andeq	r0, r4, r0
}
 6ec:	00000000 	andeq	r0, r0, r0
		sti_tim;
 6f0:	000030a8 	andeq	r3, r0, r8, lsr #1
		return YES;
 6f4:	00000008 	andeq	r0, r0, r8
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	00000006 	andeq	r0, r0, r6
 700:	000030b0 	strheq	r3, [r0], -r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 704:	00000008 	andeq	r0, r0, r8
	UARTDisable (UART0_BASE);
 708:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 70c:	00000006 	andeq	r0, r0, r6
	UARTDisable (UART0_BASE);
 710:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
 714:	00000008 	andeq	r0, r0, r8
	...
 720:	00000064 	andeq	r0, r0, r4, rrx
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 724:	d99a0002 	ldmible	sl, {r1}
 728:	00040000 	andeq	r0, r4, r0
 72c:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 730:	000030b8 	strheq	r3, [r0], -r8
 734:	0000005c 	andeq	r0, r0, ip, asr r0
 738:	00003114 	andeq	r3, r0, r4, lsl r1
	urates [0] = rate;
 73c:	0000002c 	andeq	r0, r0, ip, lsr #32
}
 740:	00000000 	andeq	r0, r0, r0
 744:	00000090 	muleq	r0, r0, r0
 748:	00003140 	andeq	r3, r0, r0, asr #2
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
 750:	00003158 	andeq	r3, r0, r8, asr r1
 754:	00000060 	andeq	r0, r0, r0, rrx
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 758:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
 75c:	00000034 	andeq	r0, r0, r4, lsr r0
 760:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 764:	00000038 	andeq	r0, r0, r8, lsr r0
 768:	00000000 	andeq	r0, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 76c:	0000000c 	andeq	r0, r0, ip
 770:	00000000 	andeq	r0, r0, r0
	__pi_uart_setrate (urates [0], __pi_uart);
 774:	00000034 	andeq	r0, r0, r4, lsr r0
 778:	00000000 	andeq	r0, r0, r0
 77c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 788:	00000054 	andeq	r0, r0, r4, asr r0
 78c:	e25d0002 	subs	r0, sp, #2
	switch (operation) {
 790:	00040000 	andeq	r0, r4, r0
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
 79c:	00000014 	andeq	r0, r0, r4, lsl r0
 7a0:	000031ec 	andeq	r3, r0, ip, ror #3
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
				*buf++ = uart_a_read;
 7a8:	00003214 	andeq	r3, r0, r4, lsl r2
 7ac:	0000004c 	andeq	r0, r0, ip, asr #32
			while (len && uart_a_char_available) {
 7b0:	00003260 	andeq	r3, r0, r0, ror #4
 7b4:	00000150 	andeq	r0, r0, r0, asr r1
 7b8:	000033b0 			; <UNDEFINED> instruction: 0x000033b0
			if (len != operation) {
 7bc:	00000118 	andeq	r0, r0, r8, lsl r1
}
 7c0:	000034c8 	andeq	r3, r0, r8, asr #9
 7c4:	00000020 	andeq	r0, r0, r0, lsr #32
			uart_a_disable_int;
 7c8:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
 7cc:	00000060 	andeq	r0, r0, r0, rrx
				*buf++ = uart_a_read;
 7d0:	000034e8 	andeq	r3, r0, r8, ror #9
			uart_a_disable_int;
 7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			if (uart_a_char_available) {
 7e0:	00000024 	andeq	r0, r0, r4, lsr #32
				uart_a_enable_int;
 7e4:	ed150002 	ldc	0, cr0, [r5, #-8]
 7e8:	00040000 	andeq	r0, r4, r0
				goto Redo_rx;
 7ec:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 7f0:	00003504 	andeq	r3, r0, r4, lsl #10
 7f4:	000000d4 	ldrdeq	r0, [r0], -r4
			return -2;
 7f8:	000035d8 	ldrdeq	r3, [r0], -r8
 7fc:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			while (len && uart_a_room_in_tx) {
 808:	000000b4 	strheq	r0, [r0], -r4
 80c:	ef200002 	svc	0x00200002
 810:	00040000 	andeq	r0, r4, r0
			if (len != operation) {
 814:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 818:	0000367c 	andeq	r3, r0, ip, ror r6
 81c:	0000007c 	andeq	r0, r0, ip, ror r0
			if (uart_a_room_in_tx) {
 820:	000036f8 	strdeq	r3, [r0], -r8
 824:	000000ac 	andeq	r0, r0, ip, lsr #1
				uart_a_enable_int;
 828:	000037a4 	andeq	r3, r0, r4, lsr #15
 82c:	0000005c 	andeq	r0, r0, ip, asr r0
				*buf++ = uart_a_read;
 830:	00003800 	andeq	r3, r0, r0, lsl #16
			if (uart_a_room_in_tx) {
 834:	00000018 	andeq	r0, r0, r8, lsl r0
				uart_a_write (*buf);
 838:	00000000 	andeq	r0, r0, r0
 83c:	00000010 	andeq	r0, r0, r0, lsl r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 840:	00003818 	andeq	r3, r0, r8, lsl r8
 844:	00000010 	andeq	r0, r0, r0, lsl r0
			uart_a_enable_int;
 848:	00003828 	andeq	r3, r0, r8, lsr #16
 84c:	00000014 	andeq	r0, r0, r4, lsl r0
 850:	0000383c 	andeq	r3, r0, ip, lsr r8
			return 0;
 854:	00000064 	andeq	r0, r0, r4, rrx
			if (len == UART_CNTRL_SETRATE) {
 858:	000038a0 	andeq	r3, r0, r0, lsr #17
				if (__pi_uart_setrate (*((word*)buf),
 85c:	00000014 	andeq	r0, r0, r4, lsl r0
 860:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
 864:	00000014 	andeq	r0, r0, r4, lsl r0
				syserror (EREQPAR, "uar");
 868:	000038c8 	andeq	r3, r0, r8, asr #17
			syserror (ENOOPER, "uai");
 86c:	00000014 	andeq	r0, r0, r4, lsl r0
			if (len == UART_CNTRL_GETRATE) {
 870:	000038dc 	ldrdeq	r3, [r0], -ip
				return 1;
 874:	00000028 	andeq	r0, r0, r8, lsr #32
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 878:	00003904 	andeq	r3, r0, r4, lsl #18
			syserror (ENOOPER, "uai");
 87c:	00000010 	andeq	r0, r0, r0, lsl r0
 880:	00003914 	andeq	r3, r0, r4, lsl r9
 884:	0000002c 	andeq	r0, r0, ip, lsr #32
 888:	00003940 	andeq	r3, r0, r0, asr #18
 88c:	00000014 	andeq	r0, r0, r4, lsl r0
 890:	00003954 	andeq	r3, r0, r4, asr r9
 894:	00000014 	andeq	r0, r0, r4, lsl r0
 898:	00003968 	andeq	r3, r0, r8, ror #18
 89c:	00000110 	andeq	r0, r0, r0, lsl r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 8a0:	00003a78 	andeq	r3, r0, r8, ror sl
void UART0IntHandler () {
 8a4:	00000064 	andeq	r0, r0, r4, rrx
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 8a8:	00003adc 	ldrdeq	r3, [r0], -ip
 8ac:	00000028 	andeq	r0, r0, r8, lsr #32
 8b0:	00003b04 	andeq	r3, r0, r4, lsl #22
 8b4:	00000150 	andeq	r0, r0, r0, asr r1
	...
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 8c0:	0000003c 	andeq	r0, r0, ip, lsr r0
		RISE_N_SHINE;
 8c4:	fa3b0002 	blx	ec08d4 <__ccfg+0xea092c>
 8c8:	00040000 	andeq	r0, r4, r0
	...
		i_trigger (devevent (UART_A, READ));
 8d4:	000000f4 	strdeq	r0, [r0], -r4
 8d8:	00003c54 	andeq	r3, r0, r4, asr ip
 8dc:	00000220 	andeq	r0, r0, r0, lsr #4
 8e0:	00003e74 	andeq	r3, r0, r4, ror lr
 8e4:	00000060 	andeq	r0, r0, r0, rrx
 8e8:	00000000 	andeq	r0, r0, r0
 8ec:	00000078 	andeq	r0, r0, r8, ror r0
 8f0:	00003ed4 	ldrdeq	r3, [r0], -r4
 8f4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 900:	00000044 	andeq	r0, r0, r4, asr #32
 904:	03620002 	cmneq	r2, #2
		i_trigger (devevent (UART_A, WRITE));
 908:	00040001 	andeq	r0, r4, r1
	...
		RISE_N_SHINE;
 914:	00000010 	andeq	r0, r0, r0, lsl r0
 918:	00000000 	andeq	r0, r0, r0
 91c:	00000018 	andeq	r0, r0, r8, lsl r0
		i_trigger (devevent (UART_A, WRITE));
 920:	00003eec 	andeq	r3, r0, ip, ror #29
 924:	0000004c 	andeq	r0, r0, ip, asr #32
 928:	00000000 	andeq	r0, r0, r0
 92c:	00000030 	andeq	r0, r0, r0, lsr r0
 930:	00003f38 	andeq	r3, r0, r8, lsr pc
 934:	0000006c 	andeq	r0, r0, ip, rrx
 938:	00003fa4 	andeq	r3, r0, r4, lsr #31
 93c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 948:	00000044 	andeq	r0, r0, r4, asr #32
}
 94c:	07320002 	ldreq	r0, [r2, -r2]!
 950:	00040001 	andeq	r0, r4, r1
 954:	00000000 	andeq	r0, r0, r0
 958:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
 95c:	00000028 	andeq	r0, r0, r8, lsr #32
void __buttons_setirq (int val) {
 960:	00003fe4 	andeq	r3, r0, r4, ror #31
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 964:	00000008 	andeq	r0, r0, r8
 968:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 96c:	00000022 	andeq	r0, r0, r2, lsr #32
 970:	00000000 	andeq	r0, r0, r0
 974:	0000002e 	andeq	r0, r0, lr, lsr #32
		bn = BUTTON_GPIO (__button_list [i]);
 978:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 97c:	00000034 	andeq	r0, r0, r4, lsr r0
 980:	00000000 	andeq	r0, r0, r0
 984:	00000040 	andeq	r0, r0, r0, asr #32
	...
 990:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 994:	0cdd0002 	ldcleq	0, cr0, [sp], {2}
 998:	00040001 	andeq	r0, r4, r1
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	00003fec 	andeq	r3, r0, ip, ror #31
void __pinlist_setirq (int val) {
 9a4:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 9b0:	0000001c 	andeq	r0, r0, ip, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
 9b4:	1c120002 	ldcne	0, cr0, [r2], {2}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 9b8:	00040001 	andeq	r0, r4, r1
 9bc:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 9c0:	00004098 	muleq	r0, r8, r0
 9c4:	0000004c 	andeq	r0, r0, ip, asr #32
	...
}
 9d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d4:	258c0002 	strcs	r0, [ip, #2]
 9d8:	00040001 	andeq	r0, r4, r1
 9dc:	00000000 	andeq	r0, r0, r0
void GPIOIntHandler () {
 9e0:	000040e4 	andeq	r4, r0, r4, ror #1
if (buttons_int) {
 9e4:	00000038 	andeq	r0, r0, r8, lsr r0
	...
	buttons_disable ();
 9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
	i_trigger ((aword)&__button_list);
 9f4:	2f850002 	svccs	0x00850002
 9f8:	00040001 	andeq	r0, r4, r1
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	0000411c 	andeq	r4, r0, ip, lsl r1
 a04:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
 a10:	00000014 	andeq	r0, r0, r4, lsl r0
 a14:	39bd0002 	ldmibcc	sp!, {r1}
 a18:	00040001 	andeq	r0, r4, r1
	...
	RISE_N_SHINE;
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
if (pin_sensor_int) {
 a2c:	42e70002 	rscmi	r0, r7, #2
 a30:	00040001 	andeq	r0, r4, r1
	...
	i_trigger ((aword)(&__input_pins));
 a3c:	000000b8 	strheq	r0, [r0], -r8
	...
 a48:	0000001c 	andeq	r0, r0, ip, lsl r0
 a4c:	4da90002 	stcmi	0, cr0, [r9, #8]!
 a50:	00040001 	andeq	r0, r4, r1
 a54:	00000000 	andeq	r0, r0, r0
 a58:	00004148 	andeq	r4, r0, r8, asr #2
 a5c:	00000054 	andeq	r0, r0, r4, asr r0
	...
	RISE_N_SHINE;
 a68:	0000001c 	andeq	r0, r0, ip, lsl r0
 a6c:	583f0002 	ldmdapl	pc!, {r1}	; <UNPREDICTABLE>
}
 a70:	00040001 	andeq	r0, r4, r1
 a74:	00000000 	andeq	r0, r0, r0
 a78:	0000419c 	muleq	r0, ip, r1
 a7c:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000dc 	ldrdeq	r0, [r0], -ip
       4:	000000de 	ldrdeq	r0, [r0], -lr
}
       8:	000000e0 	andeq	r0, r0, r0, ror #1
       c:	000000e2 	andeq	r0, r0, r2, ror #1
      10:	000000e4 	andeq	r0, r0, r4, ror #1
      14:	00000106 	andeq	r0, r0, r6, lsl #2
	...
      20:	00000106 	andeq	r0, r0, r6, lsl #2
      24:	0000010e 	andeq	r0, r0, lr, lsl #2
      28:	00000112 	andeq	r0, r0, r2, lsl r1
      2c:	00000124 	andeq	r0, r0, r4, lsr #2
	...
      38:	000001ec 	andeq	r0, r0, ip, ror #3
      3c:	0000022e 	andeq	r0, r0, lr, lsr #4
			i = k;
      40:	00000376 	andeq	r0, r0, r6, ror r3
				j->Next = k;
      44:	0000039e 	muleq	r0, lr, r3
	...
}
      50:	000000c8 	andeq	r0, r0, r8, asr #1
      54:	00000124 	andeq	r0, r0, r4, lsr #2
		release;
      58:	00000001 	andeq	r0, r0, r1
      5c:	00000001 	andeq	r0, r0, r1
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	00000124 	andeq	r0, r0, r4, lsr #2
	b->u.pointers.tail =
      64:	0000013c 	andeq	r0, r0, ip, lsr r1
}
      68:	0000013c 	andeq	r0, r0, ip, lsr r1
		return NULL;
      6c:	00000404 	andeq	r0, r0, r4, lsl #8
	...
      78:	000004f2 	strdeq	r0, [r0], -r2
      7c:	000004f8 	strdeq	r0, [r0], -r8
      80:	000004f8 	strdeq	r0, [r0], -r8
      84:	000004f8 	strdeq	r0, [r0], -r8
      88:	000004fc 	strdeq	r0, [r0], -ip
      8c:	000004fe 	strdeq	r0, [r0], -lr
	...
      98:	000004f8 	strdeq	r0, [r0], -r8
      9c:	000004fa 	strdeq	r0, [r0], -sl
      a0:	000004fe 	strdeq	r0, [r0], -lr
      a4:	00000500 	andeq	r0, r0, r0, lsl #10
	...
      b0:	00000510 	andeq	r0, r0, r0, lsl r5
      b4:	00000512 	andeq	r0, r0, r2, lsl r5
      b8:	00000514 	andeq	r0, r0, r4, lsl r5
      bc:	00000516 	andeq	r0, r0, r6, lsl r5
	...
fsm transmitter (message * messagePtr) {
      c8:	0000054a 	andeq	r0, r0, sl, asr #10
      cc:	0000054e 	andeq	r0, r0, lr, asr #10
      d0:	00000550 	andeq	r0, r0, r0, asr r5
}
      d4:	00000552 	andeq	r0, r0, r2, asr r5
      d8:	00000554 	andeq	r0, r0, r4, asr r5
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	0000055c 	andeq	r0, r0, ip, asr r5
	...
      e8:	00000580 	andeq	r0, r0, r0, lsl #11
        spkt [0] = 0;
      ec:	00000586 	andeq	r0, r0, r6, lsl #11
        *p = messagePtr->senderGroupId; p += 2;
      f0:	00000588 	andeq	r0, r0, r8, lsl #11
        *p = messagePtr->messageType; p++;
      f4:	0000058e 	andeq	r0, r0, lr, lsl #11
	...
        *p = messagePtr->receiverId; p++; // insert receiveer ID
     100:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
        tcv_endp (spkt);
     104:	00000636 	andeq	r0, r0, r6, lsr r6
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	0000065c 	andeq	r0, r0, ip, asr r6
     10c:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
	...
        finish;
     118:	00000724 	andeq	r0, r0, r4, lsr #14
     11c:	00000726 	andeq	r0, r0, r6, lsr #14
     120:	00000728 	andeq	r0, r0, r8, lsr #14
char randomNumber() {
     124:	0000073c 	andeq	r0, r0, ip, lsr r7
	...
   return (char)rand();
     130:	00000758 	andeq	r0, r0, r8, asr r7
}
     134:	0000075a 	andeq	r0, r0, sl, asr r7
     138:	0000075c 	andeq	r0, r0, ip, asr r7
fsm root {
     13c:	00000764 	andeq	r0, r0, r4, ror #14
	...
     148:	000008a0 	andeq	r0, r0, r0, lsr #17
     14c:	000008a4 	andeq	r0, r0, r4, lsr #17
     150:	000008a6 	andeq	r0, r0, r6, lsr #17
     154:	000008a8 	andeq	r0, r0, r8, lsr #17
     158:	000008aa 	andeq	r0, r0, sl, lsr #17
     15c:	000008ac 	andeq	r0, r0, ip, lsr #17
	...
     168:	00000908 	andeq	r0, r0, r8, lsl #18
     16c:	0000090c 	andeq	r0, r0, ip, lsl #18
        recordCount = 0;
     170:	0000091e 	andeq	r0, r0, lr, lsl r9
        nodeId = 1;
     174:	0000094a 	andeq	r0, r0, sl, asr #18
	...
        groupId = 1;
     180:	00000960 	andeq	r0, r0, r0, ror #18
        messagePtr = (message *) umalloc(sizeof(message));
     184:	00000960 	andeq	r0, r0, r0, ror #18
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	00000962 	andeq	r0, r0, r2, ror #18
     18c:	00000964 	andeq	r0, r0, r4, ror #18
	...
        tcv_plug(0, &plug_null);
     198:	00000964 	andeq	r0, r0, r4, ror #18
        sfd = tcv_open(WNONE, 0, 0);
     19c:	00000966 	andeq	r0, r0, r6, ror #18
     1a0:	00000968 	andeq	r0, r0, r8, ror #18
     1a4:	0000096a 	andeq	r0, r0, sl, ror #18
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	00000970 	andeq	r0, r0, r0, ror r9
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	00000976 	andeq	r0, r0, r6, ror r9
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	00000980 	andeq	r0, r0, r0, lsl #19
		if (sfd < 0) {
     1b4:	00000982 	andeq	r0, r0, r2, lsl #19
			diag("Cannot open tcv interface");
     1b8:	0000098e 	andeq	r0, r0, lr, lsl #19
     1bc:	00000990 	muleq	r0, r0, r9
	...
        currentProtocol = IDLE;
     1c8:	000009a4 	andeq	r0, r0, r4, lsr #19
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	000009a4 	andeq	r0, r0, r4, lsr #19
     1d0:	000009a6 	andeq	r0, r0, r6, lsr #19
     1d4:	000009a8 	andeq	r0, r0, r8, lsr #19
	...
     1e0:	000009aa 	andeq	r0, r0, sl, lsr #19
        ser_outf(Options, menu);
     1e4:	000009ac 	andeq	r0, r0, ip, lsr #19
     1e8:	000009ae 	andeq	r0, r0, lr, lsr #19
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     1f0:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
     1f4:	000009be 			; <UNDEFINED> instruction: 0x000009be
        switch (choice)
     1f8:	000009c8 	andeq	r0, r0, r8, asr #19
     1fc:	000009ca 	andeq	r0, r0, sl, asr #19
	...
     208:	00000aae 	andeq	r0, r0, lr, lsr #21
     20c:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
     210:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     214:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
     218:	00000ac6 	andeq	r0, r0, r6, asr #21
     21c:	00000ac8 	andeq	r0, r0, r8, asr #21
	...
        proceed Menu_Header;
     228:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
     22c:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
     234:	00000ac6 	andeq	r0, r0, r6, asr #21
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	00000ac8 	andeq	r0, r0, r8, asr #21
     23c:	00000b02 	andeq	r0, r0, r2, lsl #22
	...
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
     24c:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	00000ae6 	andeq	r0, r0, r6, ror #21
     254:	00000aee 	andeq	r0, r0, lr, ror #21
	...
    if (node < 1 || node > 25) {
     260:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
            proceed Set_Node_ID;
     264:	00000ac2 	andeq	r0, r0, r2, asr #21
        proceed Menu_Header;
     268:	00000afa 	strdeq	r0, [r0], -sl
     26c:	00000afe 	strdeq	r0, [r0], -lr
	...
        receiverId = 0;
     278:	00000ac2 	andeq	r0, r0, r2, asr #21
        proceed Transmit_Message;
     27c:	00000ac6 	andeq	r0, r0, r6, asr #21
        currentProtocol = CREATE_RECORD;
     280:	00000af4 	strdeq	r0, [r0], -r4
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	00000afa 	strdeq	r0, [r0], -sl
	...
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     290:	00000b02 	andeq	r0, r0, r2, lsl #22
     294:	00000b04 	andeq	r0, r0, r4, lsl #22
    if (node < 1 || node > 25) {
     298:	00000b06 	andeq	r0, r0, r6, lsl #22
     29c:	00000b08 	andeq	r0, r0, r8, lsl #22
            proceed Create_Record;
     2a0:	00000b0a 	andeq	r0, r0, sl, lsl #22
     2a4:	00000b0c 	andeq	r0, r0, ip, lsl #22
	...
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2b0:	00000b04 	andeq	r0, r0, r4, lsl #22
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	00000b06 	andeq	r0, r0, r6, lsl #22
     2b8:	00000b0c 	andeq	r0, r0, ip, lsl #22
     2bc:	00000b0e 	andeq	r0, r0, lr, lsl #22
	...
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	00000b1e 	andeq	r0, r0, lr, lsl fp
        proceed Transmit_Message;
     2cc:	00000b20 	andeq	r0, r0, r0, lsr #22
        currentProtocol = DELETE_RECORD;
     2d0:	00000b22 	andeq	r0, r0, r2, lsr #22
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	00000b24 	andeq	r0, r0, r4, lsr #22
	...
        proceed Get_Receiving_Node;
     2e0:	00000b36 	andeq	r0, r0, r6, lsr fp
        currentProtocol = RETRIEVE_RECORD;
     2e4:	00000b38 	andeq	r0, r0, r8, lsr fp
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	00000b3a 	andeq	r0, r0, sl, lsr fp
        currentProtocol = RETRIEVE_RECORD;
     2ec:	00000b3c 	andeq	r0, r0, ip, lsr fp
	...
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f8:	00000b7e 	andeq	r0, r0, lr, ror fp
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	00000b7e 	andeq	r0, r0, lr, ror fp
     300:	00000b82 	andeq	r0, r0, r2, lsl #23
     304:	00000b84 	andeq	r0, r0, r4, lsl #23
	...
            proceed Prompt_Recieving_Node;
     310:	00000bb4 			; <UNDEFINED> instruction: 0x00000bb4
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
     318:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
        char desiredRecordIndex = -1;
     31c:	00000bc0 	andeq	r0, r0, r0, asr #23
	...
     328:	00000c60 	andeq	r0, r0, r0, ror #24
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	00000c60 	andeq	r0, r0, r0, ror #24
        messagePtr->recordIndex = desiredRecordIndex;
     330:	00000c66 	andeq	r0, r0, r6, ror #24
     334:	00000c68 	andeq	r0, r0, r8, ror #24
     338:	00000c6a 	andeq	r0, r0, sl, ror #24
        proceed Transmit_Message;
     33c:	00000c6e 	andeq	r0, r0, lr, ror #24
	...
        messagePtr -> senderGroupId = groupId;
     348:	00000c7a 	andeq	r0, r0, sl, ror ip
        messagePtr -> messageType = currentProtocol;
     34c:	00000c7c 	andeq	r0, r0, ip, ror ip
        messagePtr -> requestNumber = randomNumber();
     350:	00000c92 	muleq	r0, r2, ip
        messagePtr -> senderId = nodeId;
     354:	00000c94 	muleq	r0, r4, ip
     358:	00000ca6 	andeq	r0, r0, r6, lsr #25
     35c:	00000cc2 	andeq	r0, r0, r2, asr #25
        call transmitter(messagePtr, Menu_Header);
     360:	00000ce6 	andeq	r0, r0, r6, ror #25
        messagePtr -> receiverId = receiverId;
     364:	00000e40 	andeq	r0, r0, r0, asr #28
	...
        call transmitter(messagePtr, Menu_Header);
     370:	00000c7a 	andeq	r0, r0, sl, ror ip
     374:	00000c7c 	andeq	r0, r0, ip, ror ip
            proceed Set_Node_ID;
     378:	00000d1a 	andeq	r0, r0, sl, lsl sp
            break;
     37c:	00000d1e 	andeq	r0, r0, lr, lsl sp
	...
            proceed Create_Record;
     388:	00000d1e 	andeq	r0, r0, lr, lsl sp
            proceed Delete_Record;
     38c:	00000d1e 	andeq	r0, r0, lr, lsl sp
            proceed Retrieve_Record;
     390:	00000d22 	andeq	r0, r0, r2, lsr #26
            diag("Reset Local Storage");
     394:	00000d26 	andeq	r0, r0, r6, lsr #26
            break;
     398:	00000d2a 	andeq	r0, r0, sl, lsr #26
            diag("Reset Local Storage");
     39c:	00000d2c 	andeq	r0, r0, ip, lsr #26
	...
     3a8:	00000d1e 	andeq	r0, r0, lr, lsl sp
     3ac:	00000d22 	andeq	r0, r0, r2, lsr #26
     3b0:	00000d38 	andeq	r0, r0, r8, lsr sp
     3b4:	00000d3a 	andeq	r0, r0, sl, lsr sp
     3b8:	00000d3e 	andeq	r0, r0, lr, lsr sp
     3bc:	00000d42 	andeq	r0, r0, r2, asr #26
	...
     3c8:	00000d26 	andeq	r0, r0, r6, lsr #26
     3cc:	00000d2a 	andeq	r0, r0, sl, lsr #26
     3d0:	00000d2c 	andeq	r0, r0, ip, lsr #26
     3d4:	00000d2e 	andeq	r0, r0, lr, lsr #26
     3d8:	00000d32 	andeq	r0, r0, r2, lsr sp
     3dc:	00000d36 	andeq	r0, r0, r6, lsr sp
	...
     3e8:	00000d3a 	andeq	r0, r0, sl, lsr sp
     3ec:	00000d3e 	andeq	r0, r0, lr, lsr sp
     3f0:	00000d58 	andeq	r0, r0, r8, asr sp
     3f4:	00000d5c 	andeq	r0, r0, ip, asr sp
     3f8:	00000d5e 	andeq	r0, r0, lr, asr sp
     3fc:	00000d66 	andeq	r0, r0, r6, ror #26
	...
	adddevfunc (ioreq_uart_a, devnum);
     408:	00000d50 	andeq	r0, r0, r0, asr sp
     40c:	00000d52 	andeq	r0, r0, r2, asr sp
void udelay (volatile word n) {
     410:	00000d54 	andeq	r0, r0, r4, asr sp
     414:	00000d58 	andeq	r0, r0, r8, asr sp
	...
}
     420:	00000d94 	muleq	r0, r4, sp
	while (n--);
     424:	00000d98 	muleq	r0, r8, sp
     428:	00000d9a 	muleq	r0, sl, sp
     42c:	00000da2 	andeq	r0, r0, r2, lsr #27
	...
		n--;
     438:	00000d98 	muleq	r0, r8, sp
void mdelay (volatile word n) {
     43c:	00000d9a 	muleq	r0, sl, sp
     440:	00000da6 	andeq	r0, r0, r6, lsr #27
	while (n) {
     444:	00000da8 	andeq	r0, r0, r8, lsr #27
	...
		udelay (999);
     450:	00000dc6 	andeq	r0, r0, r6, asr #27
     454:	00000dc8 	andeq	r0, r0, r8, asr #27
		n--;
     458:	00000dca 	andeq	r0, r0, sl, asr #27
     45c:	00000dcc 	andeq	r0, r0, ip, asr #27
	...
void __pi_ondomain (lword d) {
     468:	00000dc8 	andeq	r0, r0, r8, asr #27
     46c:	00000dca 	andeq	r0, r0, sl, asr #27
		if (__pi_systat.effpdm > 1)
     470:	00000dcc 	andeq	r0, r0, ip, asr #27
     474:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
	PRCMPowerDomainOn (d);
     480:	00000e26 	andeq	r0, r0, r6, lsr #28
     484:	00000e28 	andeq	r0, r0, r8, lsr #28
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     488:	00000e28 	andeq	r0, r0, r8, lsr #28
     48c:	00000e2a 	andeq	r0, r0, sl, lsr #28
	...
	__pi_systat.ondmns |= d;
     498:	00000e2e 	andeq	r0, r0, lr, lsr #28
}
     49c:	00000e32 	andeq	r0, r0, r2, lsr lr
     4a0:	00000e34 	andeq	r0, r0, r4, lsr lr
void __pi_offdomain (lword d) {
     4a4:	00000e36 	andeq	r0, r0, r6, lsr lr
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	00000001 	andeq	r0, r0, r1
     4b4:	00000001 	andeq	r0, r0, r1
     4b8:	00000001 	andeq	r0, r0, r1
	if (d & PRCM_DOMAIN_RFCORE) {
     4bc:	00000001 	andeq	r0, r0, r1
	...
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	00000ee8 	andeq	r0, r0, r8, ror #29
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4cc:	00000ee8 	andeq	r0, r0, r8, ror #29
     4d0:	00000eec 	andeq	r0, r0, ip, ror #29
	__pi_systat.ondmns &= ~d;
     4d4:	00000ef8 	strdeq	r0, [r0], -r8
	...
}
     4e0:	00000404 	andeq	r0, r0, r4, lsl #8
void __pi_syserror (word ec, const char *m) {
     4e4:	00000410 	andeq	r0, r0, r0, lsl r4
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	00000410 	andeq	r0, r0, r0, lsl r4
     4ec:	0000043c 	andeq	r0, r0, ip, lsr r4
     4f0:	0000043c 	andeq	r0, r0, ip, lsr r4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4f4:	00000466 	andeq	r0, r0, r6, ror #8
     4f8:	00000468 	andeq	r0, r0, r8, ror #8
     4fc:	000004a4 	andeq	r0, r0, r4, lsr #9
		all_leds_blink;
     500:	000004a4 	andeq	r0, r0, r4, lsr #9
     504:	000004e4 	andeq	r0, r0, r4, ror #9
     508:	00000001 	andeq	r0, r0, r1
     50c:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     510:	000004e4 	andeq	r0, r0, r4, ror #9
     514:	00000538 	andeq	r0, r0, r8, lsr r5
     518:	00000538 	andeq	r0, r0, r8, lsr r5
     51c:	00000578 	andeq	r0, r0, r8, ror r5
     520:	00000578 	andeq	r0, r0, r8, ror r5
     524:	000005a0 	andeq	r0, r0, r0, lsr #11
	while (1) {
     528:	000005a0 	andeq	r0, r0, r0, lsr #11
     52c:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
     530:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
     534:	00000704 	andeq	r0, r0, r4, lsl #14
void tci_run_delay_timer () {
     538:	00000704 	andeq	r0, r0, r4, lsl #14
	setdel = __pi_mintk - __pi_old;
     53c:	00000758 	andeq	r0, r0, r8, asr r7
     540:	00000758 	andeq	r0, r0, r8, asr r7
     544:	00000790 	muleq	r0, r0, r7
     548:	00000790 	muleq	r0, r0, r7
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	000008a0 	andeq	r0, r0, r0, lsr #17
     550:	00000001 	andeq	r0, r0, r1
     554:	00000001 	andeq	r0, r0, r1
     558:	000008a0 	andeq	r0, r0, r0, lsr #17
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	00000960 	andeq	r0, r0, r0, ror #18
	sti_tim;
     560:	00000960 	andeq	r0, r0, r0, ror #18
}
     564:	000009a4 	andeq	r0, r0, r4, lsr #19
     568:	000009a4 	andeq	r0, r0, r4, lsr #19
     56c:	000009e0 	andeq	r0, r0, r0, ror #19
     570:	000009e0 	andeq	r0, r0, r0, ror #19
     574:	00000a84 	andeq	r0, r0, r4, lsl #21
	cli_aux;
     578:	00000a84 	andeq	r0, r0, r4, lsl #21
     57c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	00000c3c 	andeq	r0, r0, ip, lsr ip
     584:	00000c60 	andeq	r0, r0, r0, ror #24
     588:	00000001 	andeq	r0, r0, r1
     58c:	00000001 	andeq	r0, r0, r1
	sti_aux;
     590:	00000c60 	andeq	r0, r0, r0, ror #24
}
     594:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     598:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     59c:	00000ee8 	andeq	r0, r0, r8, ror #29
void AONRTCIntHandler () {
     5a0:	00000001 	andeq	r0, r0, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a4:	00000001 	andeq	r0, r0, r1
     5a8:	00000ee8 	andeq	r0, r0, r8, ror #29
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	00000f48 	andeq	r0, r0, r8, asr #30
	...
		if (*(__pi_utims [0])) {
     5b8:	00001004 	andeq	r1, r0, r4
     5bc:	00001006 	andeq	r1, r0, r6
			(*(__pi_utims [0]))--;
     5c0:	00001006 	andeq	r1, r0, r6
		if (__pi_utims [1] == 0)
     5c4:	00001008 	andeq	r1, r0, r8
	...
			(*(__pi_utims [1]))--;
     5d0:	0000106e 	andeq	r1, r0, lr, rrx
		if (__pi_utims [2] == 0)
     5d4:	00001110 	andeq	r1, r0, r0, lsl r1
		if (*(__pi_utims [2])) {
     5d8:	00001114 	andeq	r1, r0, r4, lsl r1
			(*(__pi_utims [2]))--;
     5dc:	00001118 	andeq	r1, r0, r8, lsl r1
	...
				aux_timer_inactive = 0;
     5e8:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
				(*(__pi_utims [3]))--;
     5ec:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
	if (__pi_systat.ledsts) {
     5f0:	000014be 			; <UNDEFINED> instruction: 0x000014be
     5f4:	000014c0 	andeq	r1, r0, r0, asr #9
		if (__pi_systat.ledblc++ == 0) {
     5f8:	000014c4 	andeq	r1, r0, r4, asr #9
     5fc:	000014c8 	andeq	r1, r0, r8, asr #9
			if (__pi_systat.ledblk) {
     600:	000014ca 	andeq	r1, r0, sl, asr #9
     604:	000014d4 	ldrdeq	r1, [r0], -r4
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	00001506 	andeq	r1, r0, r6, lsl #10
				if (__pi_systat.ledsts & 0x2)
     614:	00001508 	andeq	r1, r0, r8, lsl #10
     618:	0000150a 	andeq	r1, r0, sl, lsl #10
     61c:	0000150e 	andeq	r1, r0, lr, lsl #10
				if (__pi_systat.ledsts & 0x4)
     620:	0000159e 	muleq	r0, lr, r5
				__pi_systat.ledblk = 0;
     624:	00001600 	andeq	r1, r0, r0, lsl #12
     628:	00001604 	andeq	r1, r0, r4, lsl #12
			if (__pi_systat.fstblk)
     62c:	00001608 	andeq	r1, r0, r8, lsl #12
     630:	0000160a 	andeq	r1, r0, sl, lsl #12
				__pi_systat.ledblc = 200;
     634:	0000160c 	andeq	r1, r0, ip, lsl #12
	...
		__pi_new += setdel;
     640:	00001522 	andeq	r1, r0, r2, lsr #10
     644:	00001524 	andeq	r1, r0, r4, lsr #10
		setdel = 0;
     648:	00001524 	andeq	r1, r0, r4, lsr #10
		RISE_N_SHINE;
     64c:	00001526 	andeq	r1, r0, r6, lsr #10
	...
     658:	00000f48 	andeq	r0, r0, r8, asr #30
		aux_timer_inactive = 1;
     65c:	00000f84 	andeq	r0, r0, r4, lsl #31
     660:	00000f84 	andeq	r0, r0, r4, lsl #31
				if (__pi_systat.ledsts & 0x1)
     664:	00001004 	andeq	r1, r0, r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     668:	00001004 	andeq	r1, r0, r4
     66c:	0000101c 	andeq	r1, r0, ip, lsl r0
				if (__pi_systat.ledsts & 0x2)
     670:	00000001 	andeq	r0, r0, r1
     674:	00000001 	andeq	r0, r0, r1
     678:	0000101c 	andeq	r1, r0, ip, lsl r0
				if (__pi_systat.ledsts & 0x8)
     67c:	0000102c 	andeq	r1, r0, ip, lsr #32
				__pi_systat.ledblk = 1;
     680:	0000102c 	andeq	r1, r0, ip, lsr #32
     684:	00001058 	andeq	r1, r0, r8, asr r0
		if (aux_timer_inactive) {
     688:	00000001 	andeq	r0, r0, r1
			cli_aux;
     68c:	00000001 	andeq	r0, r0, r1
     690:	00001058 	andeq	r1, r0, r8, asr r0
     694:	0000105e 	andeq	r1, r0, lr, asr r0
     698:	00001060 	andeq	r1, r0, r0, rrx
     69c:	0000112c 	andeq	r1, r0, ip, lsr #2
     6a0:	0000112c 	andeq	r1, r0, ip, lsr #2
     6a4:	00001140 	andeq	r1, r0, r0, asr #2
     6a8:	00001140 	andeq	r1, r0, r0, asr #2
     6ac:	00001174 	andeq	r1, r0, r4, ror r1
     6b0:	00001174 	andeq	r1, r0, r4, ror r1
word tci_update_delay_ticks (Boolean force) {
     6b4:	000011a8 	andeq	r1, r0, r8, lsr #3
	cli_tim;
     6b8:	00000001 	andeq	r0, r0, r1
     6bc:	00000001 	andeq	r0, r0, r1
	if (setdel) {
     6c0:	000011a8 	andeq	r1, r0, r8, lsr #3
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	000011cc 	andeq	r1, r0, ip, asr #3
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	000011cc 	andeq	r1, r0, ip, asr #3
     6cc:	00001204 	andeq	r1, r0, r4, lsl #4
     6d0:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d4:	00000001 	andeq	r0, r0, r1
				AON_RTC_O_CH0CMP)) - gettav ());
     6d8:	00000001 	andeq	r0, r0, r1
	return NO;
     6dc:	00000001 	andeq	r0, r0, r1
			setdel = 0;
     6e0:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e4:	00000001 	andeq	r0, r0, r1
     6e8:	00001204 	andeq	r1, r0, r4, lsl #4
}
     6ec:	00001228 	andeq	r1, r0, r8, lsr #4
		sti_tim;
     6f0:	00000001 	andeq	r0, r0, r1
		return YES;
     6f4:	00000001 	andeq	r0, r0, r1
     6f8:	00001228 	andeq	r1, r0, r8, lsr #4
     6fc:	00001236 	andeq	r1, r0, r6, lsr r2
     700:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     708:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     710:	00000001 	andeq	r0, r0, r1
	UARTConfigSetExpClk (UART0_BASE,
     714:	00000001 	andeq	r0, r0, r1
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	00001236 	andeq	r1, r0, r6, lsr r2
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	0000124a 	andeq	r1, r0, sl, asr #4
     728:	0000124a 	andeq	r1, r0, sl, asr #4
     72c:	00001258 	andeq	r1, r0, r8, asr r2
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	00001258 	andeq	r1, r0, r8, asr r2
     734:	0000127c 	andeq	r1, r0, ip, ror r2
     738:	0000127c 	andeq	r1, r0, ip, ror r2
	urates [0] = rate;
     73c:	00001318 	andeq	r1, r0, r8, lsl r3
}
     740:	00001318 	andeq	r1, r0, r8, lsl r3
     744:	00001368 	andeq	r1, r0, r8, ror #6
     748:	00001368 	andeq	r1, r0, r8, ror #6
     74c:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     750:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     754:	00001400 	andeq	r1, r0, r0, lsl #8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	00000001 	andeq	r0, r0, r1
     75c:	00000001 	andeq	r0, r0, r1
     760:	00001400 	andeq	r1, r0, r0, lsl #8
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	000014a8 	andeq	r1, r0, r8, lsr #9
     768:	000014a8 	andeq	r1, r0, r8, lsr #9
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76c:	000014dc 	ldrdeq	r1, [r0], -ip
     770:	000014dc 	ldrdeq	r1, [r0], -ip
	__pi_uart_setrate (urates [0], __pi_uart);
     774:	000014f4 	strdeq	r1, [r0], -r4
     778:	00000001 	andeq	r0, r0, r1
     77c:	00000001 	andeq	r0, r0, r1
     780:	00000001 	andeq	r0, r0, r1
     784:	00000001 	andeq	r0, r0, r1
     788:	000014f4 	strdeq	r1, [r0], -r4
     78c:	00001630 	andeq	r1, r0, r0, lsr r6
	switch (operation) {
     790:	00001630 	andeq	r1, r0, r0, lsr r6
static int ioreq_uart_a (int operation, char *buf, int len) {
     794:	00001654 	andeq	r1, r0, r4, asr r6
	...
     7a0:	00001714 	andeq	r1, r0, r4, lsl r7
     7a4:	0000171a 	andeq	r1, r0, sl, lsl r7
				*buf++ = uart_a_read;
     7a8:	00001720 	andeq	r1, r0, r0, lsr #14
     7ac:	00001724 	andeq	r1, r0, r4, lsr #14
			while (len && uart_a_char_available) {
     7b0:	0000172c 	andeq	r1, r0, ip, lsr #14
     7b4:	0000174c 	andeq	r1, r0, ip, asr #14
	...
}
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     7c8:	00000001 	andeq	r0, r0, r1
			if (uart_a_char_available) {
     7cc:	00000001 	andeq	r0, r0, r1
	...
			uart_a_disable_int;
     7d8:	00001654 	andeq	r1, r0, r4, asr r6
			if (uart_a_char_available) {
     7dc:	0000166a 	andeq	r1, r0, sl, ror #12
     7e0:	0000166a 	andeq	r1, r0, sl, ror #12
				uart_a_enable_int;
     7e4:	00001684 	andeq	r1, r0, r4, lsl #13
     7e8:	00001684 	andeq	r1, r0, r4, lsl #13
				goto Redo_rx;
     7ec:	00001692 	muleq	r0, r2, r6
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f0:	00001694 	muleq	r0, r4, r6
     7f4:	000016e0 	andeq	r1, r0, r0, ror #13
			return -2;
     7f8:	000016e0 	andeq	r1, r0, r0, ror #13
     7fc:	0000176c 	andeq	r1, r0, ip, ror #14
				uart_a_write (*buf);
     800:	0000176c 	andeq	r1, r0, ip, ror #14
     804:	000017dc 	ldrdeq	r1, [r0], -ip
			while (len && uart_a_room_in_tx) {
     808:	000017dc 	ldrdeq	r1, [r0], -ip
     80c:	0000189c 	muleq	r0, ip, r8
     810:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
     814:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     818:	0000189c 	muleq	r0, ip, r8
     81c:	000018c0 	andeq	r1, r0, r0, asr #17
			if (uart_a_room_in_tx) {
     820:	00000001 	andeq	r0, r0, r1
     824:	00000001 	andeq	r0, r0, r1
				uart_a_enable_int;
     828:	00000001 	andeq	r0, r0, r1
     82c:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     830:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     834:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     838:	000018c0 	andeq	r1, r0, r0, asr #17
     83c:	0000197c 	andeq	r1, r0, ip, ror r9
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
			uart_a_enable_int;
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
			return 0;
     854:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     858:	0000197c 	andeq	r1, r0, ip, ror r9
				if (__pi_uart_setrate (*((word*)buf),
     85c:	000019a8 	andeq	r1, r0, r8, lsr #19
     860:	000019a8 	andeq	r1, r0, r8, lsr #19
     864:	00001a08 	andeq	r1, r0, r8, lsl #20
				syserror (EREQPAR, "uar");
     868:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     86c:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     870:	00000001 	andeq	r0, r0, r1
				return 1;
     874:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     878:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     87c:	00000001 	andeq	r0, r0, r1
     880:	00000001 	andeq	r0, r0, r1
     884:	00000001 	andeq	r0, r0, r1
     888:	00001a08 	andeq	r1, r0, r8, lsl #20
     88c:	00001a70 	andeq	r1, r0, r0, ror sl
     890:	00001a70 	andeq	r1, r0, r0, ror sl
     894:	00001ac0 	andeq	r1, r0, r0, asr #21
     898:	00001ac0 	andeq	r1, r0, r0, asr #21
     89c:	00001b5c 	andeq	r1, r0, ip, asr fp
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	00001b5c 	andeq	r1, r0, ip, asr fp
void UART0IntHandler () {
     8a4:	00001b9c 	muleq	r0, ip, fp
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	00001b9c 	muleq	r0, ip, fp
     8ac:	00001bd0 	ldrdeq	r1, [r0], -r0
     8b0:	00001bd0 	ldrdeq	r1, [r0], -r0
     8b4:	00001c0c 	andeq	r1, r0, ip, lsl #24
     8b8:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	00001c0c 	andeq	r1, r0, ip, lsl #24
		RISE_N_SHINE;
     8c4:	00001c0e 	andeq	r1, r0, lr, lsl #24
	...
		i_trigger (devevent (UART_A, READ));
     8d0:	00001c0e 	andeq	r1, r0, lr, lsl #24
     8d4:	00001c10 	andeq	r1, r0, r0, lsl ip
     8d8:	00001c10 	andeq	r1, r0, r0, lsl ip
     8dc:	00001c12 	andeq	r1, r0, r2, lsl ip
     8e0:	00001c12 	andeq	r1, r0, r2, lsl ip
     8e4:	00001c14 	andeq	r1, r0, r4, lsl ip
     8e8:	00001c14 	andeq	r1, r0, r4, lsl ip
     8ec:	00001c58 	andeq	r1, r0, r8, asr ip
	...
     8f8:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fc:	00000001 	andeq	r0, r0, r1
     900:	00000001 	andeq	r0, r0, r1
     904:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     908:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	00000001 	andeq	r0, r0, r1
     910:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     914:	00000001 	andeq	r0, r0, r1
	...
		i_trigger (devevent (UART_A, WRITE));
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
	...
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
}
     94c:	00000001 	andeq	r0, r0, r1
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
	...
void __buttons_setirq (int val) {
     960:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	00000001 	andeq	r0, r0, r1
	...
		bn = BUTTON_GPIO (__button_list [i]);
     978:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97c:	00000001 	andeq	r0, r0, r1
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
	...
}
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     9a4:	00000001 	andeq	r0, r0, r1
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	00001c64 	andeq	r1, r0, r4, ror #24
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	00001c68 	andeq	r1, r0, r8, ror #24
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b8:	00001c6e 	andeq	r1, r0, lr, ror #24
     9bc:	00001c70 	andeq	r1, r0, r0, ror ip
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c0:	00001c7e 	andeq	r1, r0, lr, ror ip
     9c4:	00001c7e 	andeq	r1, r0, lr, ror ip
     9c8:	00001c80 	andeq	r1, r0, r0, lsl #25
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	00001c82 	andeq	r1, r0, r2, lsl #25
	...
}
     9d8:	00001c6a 	andeq	r1, r0, sl, ror #24
     9dc:	00001c6c 	andeq	r1, r0, ip, ror #24
void GPIOIntHandler () {
     9e0:	00001c82 	andeq	r1, r0, r2, lsl #25
if (buttons_int) {
     9e4:	00001c84 	andeq	r1, r0, r4, lsl #25
	...
	buttons_disable ();
     9f0:	00001c6c 	andeq	r1, r0, ip, ror #24
	i_trigger ((aword)&__button_list);
     9f4:	00001c6e 	andeq	r1, r0, lr, ror #24
     9f8:	00001c70 	andeq	r1, r0, r0, ror ip
     9fc:	00001c72 	andeq	r1, r0, r2, ror ip
     a00:	00001c78 	andeq	r1, r0, r8, ror ip
     a04:	00001c78 	andeq	r1, r0, r8, ror ip
	...
     a10:	00001c9c 	muleq	r0, ip, ip
     a14:	00001ca4 	andeq	r1, r0, r4, lsr #25
     a18:	00001cae 	andeq	r1, r0, lr, lsr #25
     a1c:	00001cae 	andeq	r1, r0, lr, lsr #25
	RISE_N_SHINE;
     a20:	00001cb2 			; <UNDEFINED> instruction: 0x00001cb2
     a24:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
	...
if (pin_sensor_int) {
     a30:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
	i_trigger ((aword)(&__input_pins));
     a34:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
     a38:	00001cb6 			; <UNDEFINED> instruction: 0x00001cb6
     a3c:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
	...
     a48:	00001cc4 	andeq	r1, r0, r4, asr #25
     a4c:	00001cc6 	andeq	r1, r0, r6, asr #25
     a50:	00001cc8 	andeq	r1, r0, r8, asr #25
     a54:	00001ccc 	andeq	r1, r0, ip, asr #25
	...
	__pinsen_disable_and_clear;
     a60:	00001ce4 	andeq	r1, r0, r4, ror #25
	RISE_N_SHINE;
     a64:	00001ce6 	andeq	r1, r0, r6, ror #25
     a68:	00001cea 	andeq	r1, r0, sl, ror #25
     a6c:	00001cec 	andeq	r1, r0, ip, ror #25
}
     a70:	00001cf2 	strdeq	r1, [r0], -r2
     a74:	00001d02 	andeq	r1, r0, r2, lsl #26
	...
     a80:	00001ce4 	andeq	r1, r0, r4, ror #25
void system_init () {
     a84:	00001ce6 	andeq	r1, r0, r6, ror #25
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a88:	00001cea 	andeq	r1, r0, sl, ror #25
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8c:	00001cec 	andeq	r1, r0, ip, ror #25
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	00001cf2 	strdeq	r1, [r0], -r2
     a94:	00001cf2 	strdeq	r1, [r0], -r2
     a98:	00001cf4 	strdeq	r1, [r0], -r4
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9c:	00001cf6 	strdeq	r1, [r0], -r6
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	00001d4a 	andeq	r1, r0, sl, asr #26
     aac:	00001d4e 	andeq	r1, r0, lr, asr #26
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab0:	00001d50 	andeq	r1, r0, r0, asr sp
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab4:	00001d52 	andeq	r1, r0, r2, asr sp
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac0:	00001d56 	andeq	r1, r0, r6, asr sp
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac4:	00001d56 	andeq	r1, r0, r6, asr sp
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	00001d58 	andeq	r1, r0, r8, asr sp
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	00001d5a 	andeq	r1, r0, sl, asr sp
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
     ae0:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x80)
     ae4:	00000001 	andeq	r0, r0, r1
	...
		if (port_confs [i] & 0x40)
     af0:	00000001 	andeq	r0, r0, r1
     af4:	00000001 	andeq	r0, r0, r1
     af8:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afc:	00000001 	andeq	r0, r0, r1
	...
	all_leds_blink;
     b08:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b0c:	00000001 	andeq	r0, r0, r1
     b10:	00000001 	andeq	r0, r0, r1
     b14:	00000001 	andeq	r0, r0, r1
	...
     b20:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b24:	00000001 	andeq	r0, r0, r1
     b28:	00000001 	andeq	r0, r0, r1
     b2c:	00000001 	andeq	r0, r0, r1
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b38:	00001c60 	andeq	r1, r0, r0, ror #24
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	00001c94 	muleq	r0, r4, ip
     b40:	00001c94 	muleq	r0, r4, ip
	IntEnable (INT_AON_RTC_COMB);
     b44:	00001cc4 	andeq	r1, r0, r4, asr #25
     b48:	00001cc4 	andeq	r1, r0, r4, asr #25
     b4c:	00001cdc 	ldrdeq	r1, [r0], -ip
	__pi_malloc_init ();
     b50:	00001cdc 	ldrdeq	r1, [r0], -ip
	IntEnable (INT_AON_GPIO_EDGE);
     b54:	00001d30 	andeq	r1, r0, r0, lsr sp
     b58:	00001d30 	andeq	r1, r0, r0, lsr sp
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5c:	00001d70 	andeq	r1, r0, r0, ror sp
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	00001d70 	andeq	r1, r0, r0, ror sp
     b64:	00001d94 	muleq	r0, r4, sp
     b68:	00001d94 	muleq	r0, r4, sp
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6c:	00001da8 	andeq	r1, r0, r8, lsr #27
     b70:	00001da8 	andeq	r1, r0, r8, lsr #27
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b74:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
     b78:	00000001 	andeq	r0, r0, r1
     b7c:	00000001 	andeq	r0, r0, r1
	urates [0] = UART_RATE / 100;
     b80:	00000001 	andeq	r0, r0, r1
     b84:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
     b88:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
     b8c:	00000001 	andeq	r0, r0, r1
     b90:	00000001 	andeq	r0, r0, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b94:	00000001 	andeq	r0, r0, r1
     b98:	00000001 	andeq	r0, r0, r1
     b9c:	00000001 	andeq	r0, r0, r1
     ba0:	00000001 	andeq	r0, r0, r1
     ba4:	00000001 	andeq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	00000001 	andeq	r0, r0, r1
     bac:	00000001 	andeq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
     bbc:	00001e34 	andeq	r1, r0, r4, lsr lr
	...
}
     bc8:	00001e34 	andeq	r1, r0, r4, lsr lr
	tci_run_auxiliary_timer ();
     bcc:	00001e88 	andeq	r1, r0, r8, lsl #29
	...
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bd8:	00001e88 	andeq	r1, r0, r8, lsl #29
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bdc:	00001ee8 	andeq	r1, r0, r8, ror #29
	...
		diag ("Leftover RAM: %d bytes",
     be8:	0000210e 	andeq	r2, r0, lr, lsl #2
     bec:	00002110 	andeq	r2, r0, r0, lsl r1
     bf0:	00002124 	andeq	r2, r0, r4, lsr #2
     bf4:	00002126 	andeq	r2, r0, r6, lsr #2
     bf8:	00002128 	andeq	r2, r0, r8, lsr #2
     bfc:	0000212a 	andeq	r2, r0, sl, lsr #2
	...
     c08:	00002198 	muleq	r0, r8, r1
     c0c:	0000219e 	muleq	r0, lr, r1
     c10:	000021a2 	andeq	r2, r0, r2, lsr #3
     c14:	000021a4 	andeq	r2, r0, r4, lsr #3
	...
     c20:	000021c6 	andeq	r2, r0, r6, asr #3
     c24:	000021cc 	andeq	r2, r0, ip, asr #3
     c28:	000021ce 	andeq	r2, r0, lr, asr #3
     c2c:	000021d0 	ldrdeq	r2, [r0], -r0
	...
     c38:	000021d4 	ldrdeq	r2, [r0], -r4
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	000021e0 	andeq	r2, r0, r0, ror #3
     c40:	000021e0 	andeq	r2, r0, r0, ror #3
     c44:	000021e4 	andeq	r2, r0, r4, ror #3
     c48:	000021e6 	andeq	r2, r0, r6, ror #3
     c4c:	0000220a 	andeq	r2, r0, sl, lsl #4
	...
     c58:	000021e4 	andeq	r2, r0, r4, ror #3
}
     c5c:	000021e6 	andeq	r2, r0, r6, ror #3
__attribute__ ((noreturn)) void __pi_release () {
     c60:	0000220a 	andeq	r2, r0, sl, lsl #4
     c64:	00002244 	andeq	r2, r0, r4, asr #4
     c68:	00002246 	andeq	r2, r0, r6, asr #4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6c:	00002258 	andeq	r2, r0, r8, asr r2
	...
	check_stack_overflow;
     c78:	00002318 	andeq	r2, r0, r8, lsl r3
	update_n_wake (MAX_WORD, NO);
     c7c:	00002318 	andeq	r2, r0, r8, lsl r3
     c80:	0000231c 	andeq	r2, r0, ip, lsl r3
     c84:	00002336 	andeq	r2, r0, r6, lsr r3
	for_all_tasks (__pi_curr) {
     c88:	00002338 	andeq	r2, r0, r8, lsr r3
     c8c:	0000233a 	andeq	r2, r0, sl, lsr r3
     c90:	0000233c 	andeq	r2, r0, ip, lsr r3
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	0000233e 	andeq	r2, r0, lr, lsr r3
	__SLEEP;
     c98:	00002342 	andeq	r2, r0, r2, asr #6
     c9c:	0000234c 	andeq	r2, r0, ip, asr #6
	...
	system_event_count ++;
     ca8:	0000245e 	andeq	r2, r0, lr, asr r4
     cac:	00002462 	andeq	r2, r0, r2, ror #8
	switch (__pi_systat.effpdm) {
     cb0:	0000247e 	andeq	r2, r0, lr, ror r4
     cb4:	00002482 	andeq	r2, r0, r2, lsl #9
	...
			__WFI ();
     cc0:	00002462 	andeq	r2, r0, r2, ror #8
     cc4:	0000247e 	andeq	r2, r0, lr, ror r4
     cc8:	00002482 	andeq	r2, r0, r2, lsl #9
	check_stack_overflow;
     ccc:	0000248a 	andeq	r2, r0, sl, lsl #9
	...
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	000025f6 	strdeq	r2, [r0], -r6
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	000025f8 	strdeq	r2, [r0], -r8
			goto Redo;
     ce0:	000025fa 	strdeq	r2, [r0], -sl
	for_all_tasks (__pi_curr) {
     ce4:	000025fe 	strdeq	r2, [r0], -lr
	...
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cf0:	000025f8 	strdeq	r2, [r0], -r8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf4:	000025fa 	strdeq	r2, [r0], -sl
     cf8:	000025fe 	strdeq	r2, [r0], -lr
     cfc:	00002624 	andeq	r2, r0, r4, lsr #12
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	0000266c 	andeq	r2, r0, ip, ror #12
     d0c:	0000266e 	andeq	r2, r0, lr, ror #12
			__WFI ();
     d10:	00002672 	andeq	r2, r0, r2, ror r6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d14:	00002678 	andeq	r2, r0, r8, ror r6
     d18:	0000267a 	andeq	r2, r0, sl, ror r6
}
     d1c:	000026c6 	andeq	r2, r0, r6, asr #13
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d20:	000026c8 	andeq	r2, r0, r8, asr #13
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d24:	000026cc 	andeq	r2, r0, ip, asr #13
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d28:	000026ce 	andeq	r2, r0, lr, asr #13
     d2c:	000026de 	ldrdeq	r2, [r0], -lr
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d30:	000026e2 	andeq	r2, r0, r2, ror #13
     d34:	000026e6 	andeq	r2, r0, r6, ror #13
     d38:	00002718 	andeq	r2, r0, r8, lsl r7
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3c:	0000271c 	andeq	r2, r0, ip, lsl r7
	...
     d48:	00002722 	andeq	r2, r0, r2, lsr #14
     d4c:	00002724 	andeq	r2, r0, r4, lsr #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	00002726 	andeq	r2, r0, r6, lsr #14
     d54:	00002754 	andeq	r2, r0, r4, asr r7
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d60:	00001ee8 	andeq	r1, r0, r8, ror #29
     d64:	00001f08 	andeq	r1, r0, r8, lsl #30
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d68:	00001f08 	andeq	r1, r0, r8, lsl #30
     d6c:	00002098 	muleq	r0, r8, r0
			SysCtrlSetRechargeBeforePowerDown
     d70:	00002098 	muleq	r0, r8, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d74:	000020e0 	andeq	r2, r0, r0, ror #1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d78:	000020e0 	andeq	r2, r0, r0, ror #1
     d7c:	00002104 	andeq	r2, r0, r4, lsl #2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	00002104 	andeq	r2, r0, r4, lsl #2
     d84:	00002160 	andeq	r2, r0, r0, ror #2
     d88:	00002160 	andeq	r2, r0, r0, ror #2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8c:	00002198 	muleq	r0, r8, r1
     d90:	00002198 	muleq	r0, r8, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d94:	00002318 	andeq	r2, r0, r8, lsl r3
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d98:	00002318 	andeq	r2, r0, r8, lsl r3
     d9c:	000023e8 	andeq	r2, r0, r8, ror #7
     da0:	000023e8 	andeq	r2, r0, r8, ror #7
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da4:	000025d8 	ldrdeq	r2, [r0], -r8
			while (!(AONWUCPowerStatusGet () &
     da8:	000025d8 	ldrdeq	r2, [r0], -r8
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dac:	00002648 	andeq	r2, r0, r8, asr #12
     db0:	00002648 	andeq	r2, r0, r8, asr #12
     db4:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dc0:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
     dc4:	000027e0 	andeq	r2, r0, r0, ror #15
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dc8:	000027e0 	andeq	r2, r0, r0, ror #15
     dcc:	00002804 	andeq	r2, r0, r4, lsl #16
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	00002804 	andeq	r2, r0, r4, lsl #16
     dd4:	0000280c 	andeq	r2, r0, ip, lsl #16
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd8:	0000280c 	andeq	r2, r0, ip, lsl #16
			reinit_uart ();
     ddc:	00002810 	andeq	r2, r0, r0, lsl r8
     de0:	00002810 	andeq	r2, r0, r0, lsl r8
     de4:	00002814 	andeq	r2, r0, r4, lsl r8
}
     de8:	00002814 	andeq	r2, r0, r4, lsl r8
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dec:	0000285c 	andeq	r2, r0, ip, asr r8
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	0000286a 	andeq	r2, r0, sl, ror #16
     dfc:	0000286a 	andeq	r2, r0, sl, ror #16
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	00002870 	andeq	r2, r0, r0, ror r8
     e04:	000028cc 	andeq	r2, r0, ip, asr #17
	...
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	0000285c 	andeq	r2, r0, ip, asr r8
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	000028cc 	andeq	r2, r0, ip, asr #17
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e20:	000028e0 	andeq	r2, r0, r0, ror #17
     e24:	000029c4 	andeq	r2, r0, r4, asr #19
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e28:	000029ca 	andeq	r2, r0, sl, asr #19
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2c:	000029ce 	andeq	r2, r0, lr, asr #19
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e30:	000029d4 	ldrdeq	r2, [r0], -r4
     e34:	000029e8 	andeq	r2, r0, r8, ror #19
	...
	__SLEEP;
     e40:	000028cc 	andeq	r2, r0, ip, asr #17
     e44:	000029e8 	andeq	r2, r0, r8, ror #19
	...
	goto Redo;
     e50:	00002a14 	andeq	r2, r0, r4, lsl sl
     e54:	00002a16 	andeq	r2, r0, r6, lsl sl
     e58:	00002ae4 	andeq	r2, r0, r4, ror #21
     e5c:	00002b08 	andeq	r2, r0, r8, lsl #22
     e60:	00002b0a 	andeq	r2, r0, sl, lsl #22
     e64:	00002b52 	andeq	r2, r0, r2, asr fp
     e68:	00002b7c 	andeq	r2, r0, ip, ror fp
     e6c:	00002b7e 	andeq	r2, r0, lr, ror fp
	...
     e78:	00002a16 	andeq	r2, r0, r6, lsl sl
     e7c:	00002a18 	andeq	r2, r0, r8, lsl sl
     e80:	00002aba 			; <UNDEFINED> instruction: 0x00002aba
     e84:	00002ae4 	andeq	r2, r0, r4, ror #21
     e88:	00002b08 	andeq	r2, r0, r8, lsl #22
     e8c:	00002b0a 	andeq	r2, r0, sl, lsl #22
	...
     e98:	00002a56 	andeq	r2, r0, r6, asr sl
     e9c:	00002a5e 	andeq	r2, r0, lr, asr sl
     ea0:	00002c02 	andeq	r2, r0, r2, lsl #24
     ea4:	00002c0e 	andeq	r2, r0, lr, lsl #24
	...
     eb0:	00002b5c 	andeq	r2, r0, ip, asr fp
     eb4:	00002b7c 	andeq	r2, r0, ip, ror fp
	cli_tim;
     eb8:	00002b7e 	andeq	r2, r0, lr, ror fp
     ebc:	00002bc2 	andeq	r2, r0, r2, asr #23
	...
	mdelay (500);
     ec8:	000029e8 	andeq	r2, r0, r8, ror #19
     ecc:	00002a08 	andeq	r2, r0, r8, lsl #20
	setpowermode (2);
     ed0:	00002a08 	andeq	r2, r0, r8, lsl #20
	__PCB = NULL;
     ed4:	00002c38 	andeq	r2, r0, r8, lsr ip
	release;
     ed8:	00002c38 	andeq	r2, r0, r8, lsr ip
     edc:	00002c88 	andeq	r2, r0, r8, lsl #25
	...
int main (void) {
     ee8:	00002c9c 	muleq	r0, ip, ip
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	00002ca0 	andeq	r2, r0, r0, lsr #25
     ef0:	00002f7a 	andeq	r2, r0, sl, ror pc
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	00002fc2 	andeq	r2, r0, r2, asr #31
	...
	tcv_init ();
     f00:	00002ca0 	andeq	r2, r0, r0, lsr #25
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	00002ca6 	andeq	r2, r0, r6, lsr #25
     f08:	00002cde 	ldrdeq	r2, [r0], -lr
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	00002d4a 	andeq	r2, r0, sl, asr #26
     f10:	00002fde 	ldrdeq	r2, [r0], -lr
     f14:	00002ffe 	strdeq	r2, [r0], -lr
	...
	delay (16, 0);
     f20:	00002e02 	andeq	r2, r0, r2, lsl #28
     f24:	00002e7c 	andeq	r2, r0, ip, ror lr
     f28:	00003006 	andeq	r3, r0, r6
	__pi_release ();
     f2c:	0000300e 	andeq	r3, r0, lr
	...
     f38:	00002e94 	muleq	r0, r4, lr
     f3c:	00002eea 	andeq	r2, r0, sl, ror #29
     f40:	00002f60 	andeq	r2, r0, r0, ror #30
     f44:	00002f7a 	andeq	r2, r0, sl, ror pc
	...
	for_all_tasks (i) {
     f50:	00002ef0 	strdeq	r2, [r0], -r0
		for (j = 0; j < nevents (i); j++) {
     f54:	00002f60 	andeq	r2, r0, r0, ror #30
     f58:	00002fc2 	andeq	r2, r0, r2, asr #31
     f5c:	00002fca 	andeq	r2, r0, sl, asr #31
			    || i->Events [j] . Event == wfun
     f60:	0000300e 	andeq	r3, r0, lr
		for (j = 0; j < nevents (i); j++) {
     f64:	00003018 	andeq	r3, r0, r8, lsl r0
	...
			if (i->Events [j] . Event == (aword)pid
     f70:	00002c88 	andeq	r2, r0, r8, lsl #25
				wakeupev (i, j);
     f74:	00003018 	andeq	r3, r0, r8, lsl r0
	...
}
     f80:	00003018 	andeq	r3, r0, r8, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	00003040 	andeq	r3, r0, r0, asr #32
static void qfree (aword *ch) {
     f88:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8c:	00000001 	andeq	r0, r0, r1
	...
	m_setnextp (cc, ch);
     f98:	00003040 	andeq	r3, r0, r0, asr #32
}
     f9c:	00003070 	andeq	r3, r0, r0, ror r0
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa8:	00003070 	andeq	r3, r0, r0, ror r0
			m_setnextp (cc, m_nextp (chunk));
     fac:	00003090 	muleq	r0, r0, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb0:	00003090 	muleq	r0, r0, r0
     fb4:	000030a8 	andeq	r3, r0, r8, lsr #1
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	000030a8 	andeq	r3, r0, r8, lsr #1
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	000030b0 	strheq	r3, [r0], -r0
     fc8:	00000001 	andeq	r0, r0, r1
     fcc:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     fd0:	000030b0 	strheq	r3, [r0], -r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	000030b8 	strheq	r3, [r0], -r8
     fd8:	00000001 	andeq	r0, r0, r1
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	00000001 	andeq	r0, r0, r1
	...
			if (m_size (chunk) >= m_size (ch))
     ff0:	0000311a 	andeq	r3, r0, sl, lsl r1
     ff4:	0000312a 	andeq	r3, r0, sl, lsr #2
		chunk = m_nextp (chunk))
     ff8:	00003130 	andeq	r3, r0, r0, lsr r1
     ffc:	00003132 	andeq	r3, r0, r2, lsr r1
	...
	diag_wait (a);
    1008:	000030b8 	strheq	r3, [r0], -r8
	diag_wchar (c, a);
    100c:	00003114 	andeq	r3, r0, r4, lsl r1
    1010:	00003114 	andeq	r3, r0, r4, lsl r1
}
    1014:	00003140 	andeq	r3, r0, r0, asr #2
    1018:	00000001 	andeq	r0, r0, r1
	syserror (ESTATE, "state");
    101c:	00000001 	andeq	r0, r0, r1
    1020:	00003140 	andeq	r3, r0, r0, asr #2
    1024:	00003158 	andeq	r3, r0, r8, asr r1
    1028:	00003158 	andeq	r3, r0, r8, asr r1
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
void utimer_add (address ut) {
    1030:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
    1034:	000031ec 	andeq	r3, r0, ip, ror #3
		if (__pi_utims [i] == NULL)
    1038:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	00000001 	andeq	r0, r0, r1
    1040:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "ut a");
    1044:	00000001 	andeq	r0, r0, r1
	__pi_utims [i] = ut;
    1048:	00000001 	andeq	r0, r0, r1
}
    104c:	00000001 	andeq	r0, r0, r1
    1050:	00000001 	andeq	r0, r0, r1
    1054:	00000001 	andeq	r0, r0, r1
	...
void update_n_wake (word min, Boolean force) {
    1060:	00000001 	andeq	r0, r0, r1
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	00000001 	andeq	r0, r0, r1
    1068:	000031ec 	andeq	r3, r0, ip, ror #3
    106c:	00003214 	andeq	r3, r0, r4, lsl r2
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1070:	00003214 	andeq	r3, r0, r4, lsl r2
    1074:	00003260 	andeq	r3, r0, r0, ror #4
    1078:	00003260 	andeq	r3, r0, r0, ror #4
    107c:	000033b0 			; <UNDEFINED> instruction: 0x000033b0
    1080:	000033b0 			; <UNDEFINED> instruction: 0x000033b0
    1084:	000034c8 	andeq	r3, r0, r8, asr #9
    1088:	000034c8 	andeq	r3, r0, r8, asr #9
    108c:	000034e8 	andeq	r3, r0, r8, ror #9
    1090:	00000001 	andeq	r0, r0, r1
    1094:	00000001 	andeq	r0, r0, r1
    1098:	000034e8 	andeq	r3, r0, r8, ror #9
    109c:	00003504 	andeq	r3, r0, r4, lsl #10
	...
	__pi_mintk = znew + min;
    10a8:	00003504 	andeq	r3, r0, r4, lsl #10
    10ac:	000035d8 	ldrdeq	r3, [r0], -r8
			if (!twaiting (i))
    10b0:	000035d8 	ldrdeq	r3, [r0], -r8
    10b4:	0000367c 	andeq	r3, r0, ip, ror r6
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10c0:	0000368a 	andeq	r3, r0, sl, lsl #13
    10c4:	0000368c 	andeq	r3, r0, ip, lsl #13
    10c8:	00003690 	muleq	r0, r0, r6
    10cc:	00003694 	muleq	r0, r4, r6
	...
    10d8:	00003998 	muleq	r0, r8, r9
    10dc:	0000399a 	muleq	r0, sl, r9
    10e0:	0000399c 	muleq	r0, ip, r9
    10e4:	0000399e 	muleq	r0, lr, r9
	...
		for_all_tasks (i) {
    10f0:	0000367c 	andeq	r3, r0, ip, ror r6
				d = i->Timer - znew;
    10f4:	000036f8 	strdeq	r3, [r0], -r8
    10f8:	000036f8 	strdeq	r3, [r0], -r8
    10fc:	000037a4 	andeq	r3, r0, r4, lsr #15
		if ((word)(__pi_mintk - znew) < min) 
    1100:	000037a4 	andeq	r3, r0, r4, lsr #15
    1104:	00003800 	andeq	r3, r0, r0, lsl #16
    1108:	00003800 	andeq	r3, r0, r0, lsl #16
	__pi_old = znew;
    110c:	00003818 	andeq	r3, r0, r8, lsl r8
}
    1110:	00000001 	andeq	r0, r0, r1
	TCI_RUN_DELAY_TIMER;
    1114:	00000001 	andeq	r0, r0, r1
}
    1118:	00003818 	andeq	r3, r0, r8, lsl r8
    111c:	00003828 	andeq	r3, r0, r8, lsr #16
    1120:	00003828 	andeq	r3, r0, r8, lsr #16
    1124:	0000383c 	andeq	r3, r0, ip, lsr r8
    1128:	0000383c 	andeq	r3, r0, ip, lsr r8
void proceed (word state) {
    112c:	000038a0 	andeq	r3, r0, r0, lsr #17
	prcdstate (__pi_curr, state);
    1130:	000038a0 	andeq	r3, r0, r0, lsr #17
    1134:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
	release;
    1138:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
    113c:	000038c8 	andeq	r3, r0, r8, asr #17
void __pi_wait (aword event, word state) {
    1140:	000038c8 	andeq	r3, r0, r8, asr #17
	sint j = nevents (__pi_curr);
    1144:	000038dc 	ldrdeq	r3, [r0], -ip
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	000038dc 	ldrdeq	r3, [r0], -ip
    114c:	00003904 	andeq	r3, r0, r4, lsl #18
    1150:	00003904 	andeq	r3, r0, r4, lsl #18
		syserror (ENEVENTS, "sw");
    1154:	00003914 	andeq	r3, r0, r4, lsl r9
    1158:	00003914 	andeq	r3, r0, r4, lsl r9
	setestate (__pi_curr->Events [j], state, event);
    115c:	00003940 	andeq	r3, r0, r0, asr #18
	incwait (__pi_curr);
    1160:	00003940 	andeq	r3, r0, r0, asr #18
	setestate (__pi_curr->Events [j], state, event);
    1164:	00003954 	andeq	r3, r0, r4, asr r9
}
    1168:	00003954 	andeq	r3, r0, r4, asr r9
    116c:	00003968 	andeq	r3, r0, r8, ror #18
    1170:	00003968 	andeq	r3, r0, r8, ror #18
void __pi_trigger (aword event) {
    1174:	00003a78 	andeq	r3, r0, r8, ror sl
	for_all_tasks (i) {
    1178:	00003a78 	andeq	r3, r0, r8, ror sl
		for (j = 0; j < nevents (i); j++) {
    117c:	00003adc 	ldrdeq	r3, [r0], -ip
    1180:	00003adc 	ldrdeq	r3, [r0], -ip
    1184:	00003b04 	andeq	r3, r0, r4, lsl #22
    1188:	00003b04 	andeq	r3, r0, r4, lsl #22
			if (i->Events [j] . Event == event) {
    118c:	00003c54 	andeq	r3, r0, r4, asr ip
	...
				wakeupev (i, j);
    1198:	00000001 	andeq	r0, r0, r1
    119c:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
    11a0:	00000001 	andeq	r0, r0, r1
}
    11a4:	00000001 	andeq	r0, r0, r1
	...
	for_all_tasks (i) {
    11b0:	00003cca 	andeq	r3, r0, sl, asr #25
	return 0;
    11b4:	00003ccc 	andeq	r3, r0, ip, asr #25
		if ((aword)i == pid) {
    11b8:	00003cce 	andeq	r3, r0, lr, asr #25
			__pi_wait (pid, st);
    11bc:	00003cd2 	ldrdeq	r3, [r0], -r2
	...
	for_all_tasks (i) {
    11c8:	00000001 	andeq	r0, r0, r1
void delay (word d, word state) {
    11cc:	00000001 	andeq	r0, r0, r1
	settstate (__pi_curr, state);
    11d0:	00003c54 	andeq	r3, r0, r4, asr ip
    11d4:	00003e74 	andeq	r3, r0, r4, ror lr
    11d8:	00003e74 	andeq	r3, r0, r4, ror lr
    11dc:	00003ed4 	ldrdeq	r3, [r0], -r4
	update_n_wake (d, YES);
    11e0:	00000001 	andeq	r0, r0, r1
    11e4:	00000001 	andeq	r0, r0, r1
	__pi_curr->Timer = __pi_old + d;
    11e8:	00003ed4 	ldrdeq	r3, [r0], -r4
    11ec:	00003eec 	andeq	r3, r0, ip, ror #29
	...
	inctimer (__pi_curr);
    11f8:	00003f3a 	andeq	r3, r0, sl, lsr pc
}
    11fc:	00003f3e 	andeq	r3, r0, lr, lsr pc
    1200:	00003f44 	andeq	r3, r0, r4, asr #30
	if (fun == NULL)
    1204:	00003f46 	andeq	r3, r0, r6, asr #30
	...
	for_all_tasks (i)
    1210:	00003f3e 	andeq	r3, r0, lr, lsr pc
}
    1214:	00003f44 	andeq	r3, r0, r4, asr #30
		if (i->code == fun)
    1218:	00003f46 	andeq	r3, r0, r6, asr #30
	for_all_tasks (i)
    121c:	00003f4e 	andeq	r3, r0, lr, asr #30
	...
int __pi_strlen (const char *s) {
    1228:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
    122c:	00000001 	andeq	r0, r0, r1
}
    1230:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
    1234:	00000001 	andeq	r0, r0, r1
	while (n--)
    1238:	00003eec 	andeq	r3, r0, ip, ror #29
    123c:	00003f38 	andeq	r3, r0, r8, lsr pc
		*dest++ = *src++;
    1240:	00000001 	andeq	r0, r0, r1
    1244:	00000001 	andeq	r0, r0, r1
    1248:	00003f38 	andeq	r3, r0, r8, lsr pc
	while (n--)
    124c:	00003fa4 	andeq	r3, r0, r4, lsr #31
}
    1250:	00003fa4 	andeq	r3, r0, r4, lsr #31
		*dest++ = c;
    1254:	00003fba 			; <UNDEFINED> instruction: 0x00003fba
	...
		syserror (ERESOURCE, "addv");
    1260:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
	if (ioreq [loc] != NULL)
    1264:	00003fe4 	andeq	r3, r0, r4, ror #31
    1268:	00003fe4 	andeq	r3, r0, r4, ror #31
		syserror (ERESOURCE, "addv");
    126c:	00003fec 	andeq	r3, r0, ip, ror #31
	ioreq [loc] = rf;
    1270:	00000001 	andeq	r0, r0, r1
}
    1274:	00000001 	andeq	r0, r0, r1
    1278:	00000001 	andeq	r0, r0, r1
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	00000001 	andeq	r0, r0, r1
    1280:	00000001 	andeq	r0, r0, r1
    1284:	00000001 	andeq	r0, r0, r1
    1288:	00000001 	andeq	r0, r0, r1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128c:	00000001 	andeq	r0, r0, r1
	...
	if (len == 0)
    12a0:	00000004 	andeq	r0, r0, r4
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	00000006 	andeq	r0, r0, r6
    12a8:	0000000a 	andeq	r0, r0, sl
	if (ret >= 0)
    12ac:	00000026 	andeq	r0, r0, r6, lsr #32
	if (ret == -1) {
    12b0:	00000028 	andeq	r0, r0, r8, lsr #32
    12b4:	00000038 	andeq	r0, r0, r8, lsr r0
		if (retry == WNONE)
    12b8:	0000003e 	andeq	r0, r0, lr, lsr r0
		iowait (dev, operation, retry);
    12bc:	00000040 	andeq	r0, r0, r0, asr #32
    12c0:	00000042 	andeq	r0, r0, r2, asr #32
    12c4:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000520 	andeq	r0, r0, r0, lsr #10
       4:	024a0003 	subeq	r0, sl, #3
}
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      24:	2f656475 	svccs	0x00656475
      28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      2c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; fffffe90 <_estack+0xdfffae90>
      30:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      34:	2f00656e 	svccs	0x0000656e
      38:	2f727375 	svccs	0x00727375
      3c:	2f62696c 	svccs	0x0062696c
			i = k;
      40:	2f636367 	svccs	0x00636367
				j->Next = k;
      44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      48:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
}
      4c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      50:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      54:	2f312e32 	svccs	0x00312e32
		release;
      58:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      5c:	00656475 	rsbeq	r6, r5, r5, ror r4
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
	b->u.pointers.tail =
      64:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      68:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
		return NULL;
      6c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      70:	2f62696c 	svccs	0x0062696c
      74:	00737973 	rsbseq	r7, r3, r3, ror r9
      78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc4 <_estack+0xdfffafc4>
      7c:	616d2f65 	cmnvs	sp, r5, ror #30
      80:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      84:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      88:	706f746b 	rsbvc	r7, pc, fp, ror #8
      8c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      90:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      94:	4349502f 	movtmi	r5, #36911	; 0x902f
      98:	502f534f 	eorpl	r5, pc, pc, asr #6
      9c:	534f6369 	movtpl	r6, #62313	; 0xf369
      a0:	3143432f 	cmpcc	r3, pc, lsr #6
      a4:	00585833 	subseq	r5, r8, r3, lsr r8
      a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; fffffff4 <_estack+0xdfffaff4>
      ac:	616d2f65 	cmnvs	sp, r5, ror #30
      b0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      bc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      c0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      c4:	4349502f 	movtmi	r5, #36911	; 0x902f
fsm transmitter (message * messagePtr) {
      c8:	502f534f 	eorpl	r5, pc, pc, asr #6
      cc:	534f6369 	movtpl	r6, #62313	; 0xf369
      d0:	6f682f00 	svcvs	0x00682f00
}
      d4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff28 <_estack+0xdfffaf28>
      d8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      e0:	6f746b73 	svcvs	0x00746b73
      e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
        spkt [0] = 0;
      ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
        *p = messagePtr->senderGroupId; p += 2;
      f0:	2f534f43 	svccs	0x00534f43
        *p = messagePtr->messageType; p++;
      f4:	4f636950 	svcmi	0x00636950
        *p = messagePtr->requestNumber; p++;
      f8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	2f736269 	svccs	0x00736269
        *p = messagePtr->receiverId; p++; // insert receiveer ID
     100:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
        tcv_endp (spkt);
     104:	682f0049 	stmdavs	pc!, {r0, r3, r6}	; <UNPREDICTABLE>
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	2f656d6f 	svccs	0x00656d6f
     10c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
}
     110:	442f6e69 	strtmi	r6, [pc], #-3689	; 118 <_Min_Stack_Size+0x18>
        finish;
     114:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     118:	4f2f706f 	svcmi	0x002f706f
     11c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     120:	502f5445 	eorpl	r5, pc, r5, asr #8
char randomNumber() {
     124:	534f4349 	movtpl	r4, #62281	; 0xf349
   srand((unsigned) time(&t));
     128:	6369502f 	cmnvs	r9, #47	; 0x2f
     12c:	6b2f534f 	blvs	bd4e70 <__ccfg+0xbb4ec8>
   return (char)rand();
     130:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
}
     134:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     138:	2f656d6f 	svccs	0x00656d6f
fsm root {
     13c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     140:	442f6e69 	strtmi	r6, [pc], #-3689	; 148 <root+0xc>
     144:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     148:	4f2f706f 	svcmi	0x002f706f
     14c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     150:	502f5445 	eorpl	r5, pc, r5, asr #8
     154:	534f4349 	movtpl	r4, #62281	; 0xf349
     158:	6369502f 	cmnvs	r9, #47	; 0x2f
     15c:	562f534f 	strtpl	r5, [pc], -pc, asr #6
     160:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
     164:	756c502f 	strbvc	r5, [ip, #-47]!	; 0xffffffd1
     168:	6c754e67 	ldclvs	14, cr4, [r5], #-412	; 0xfffffe64
     16c:	6100006c 	tstvs	r0, ip, rrx
        recordCount = 0;
     170:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
        nodeId = 1;
     174:	00000063 	andeq	r0, r0, r3, rrx
     178:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
        groupId = 1;
     17c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     180:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
        messagePtr = (message *) umalloc(sizeof(message));
     184:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	00010068 	andeq	r0, r1, r8, rrx
     18c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     190:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
        tcv_plug(0, &plug_null);
     194:	00020068 	andeq	r0, r2, r8, rrx
     198:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
        sfd = tcv_open(WNONE, 0, 0);
     19c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     1a0:	00030068 	andeq	r0, r3, r8, rrx
     1a4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	00000300 	andeq	r0, r0, r0, lsl #6
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	6b636f6c 	blvs	18dbf68 <__ccfg+0x18bbfc0>
		if (sfd < 0) {
     1b4:	0300682e 	movweq	r6, #2094	; 0x82e
			diag("Cannot open tcv interface");
     1b8:	735f0000 	cmpvc	pc, #0
     1bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
			halt();
     1c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
        currentProtocol = IDLE;
     1c4:	74000003 	strvc	r0, [r0], #-3
     1c8:	73657079 	cmnvc	r5, #121	; 0x79
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	0300682e 	movweq	r6, #2094	; 0x82e
     1d0:	74730000 	ldrbtvc	r0, [r3], #-0
     1d4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
     1d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1dc:	72610000 	rsbvc	r0, r1, #0
     1e0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
        ser_outf(Options, menu);
     1e4:	00000400 	andeq	r0, r0, r0, lsl #8
     1e8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     1f0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
     1f4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
        switch (choice)
     1f8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     1fc:	00000400 	andeq	r0, r0, r0, lsl #8
     200:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     204:	5f736e6f 	svcpl	0x00736e6f
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     20c:	00040068 	andeq	r0, r4, r8, rrx
     210:	73797300 	cmnvc	r9, #0, 6
     214:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     218:	00000500 	andeq	r0, r0, r0, lsl #10
     21c:	5f766374 	svcpl	0x00766374
     220:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
     224:	0600682e 	streq	r6, [r0], -lr, lsr #16
        proceed Menu_Header;
     228:	656b0000 	strbvs	r0, [fp, #-0]!
     22c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     234:	6c700000 	ldclvs	0, cr0, [r0], #-0
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
     23c:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
        proceed Menu_Header;
     240:	00080068 	andeq	r0, r8, r8, rrx
     244:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     24c:	003e6e69 	eorseq	r6, lr, r9, ror #28
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	00000000 	andeq	r0, r0, r0
     254:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
     258:	0000c802 	andeq	ip, r0, r2, lsl #16
    if (node < 1 || node > 25) {
     25c:	01310300 	teqeq	r1, r0, lsl #6
     260:	05012305 	streq	r2, [r1, #-773]	; 0xfffffcfb
            proceed Set_Node_ID;
     264:	21050158 	tstcs	r5, r8, asr r1
        proceed Menu_Header;
     268:	58050106 	stmdapl	r5, {r1, r2, r8}
     26c:	06130520 	ldreq	r0, [r3], -r0, lsr #10
        currentProtocol = DISCOVERY_REQUEST;
     270:	054a1403 	strbeq	r1, [sl, #-1027]	; 0xfffffbfd
     274:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
        receiverId = 0;
     278:	4f052e13 	svcmi	0x00052e13
        proceed Transmit_Message;
     27c:	052e6c03 	streq	r6, [lr, #-3075]!	; 0xfffff3fd
        currentProtocol = CREATE_RECORD;
     280:	4f052610 	svcmi	0x00052610
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
     288:	2d052610 	stccs	6, cr2, [r5, #-64]	; 0xffffffc0
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
     290:	15230609 	strne	r0, [r3, #-1545]!	; 0xfffff9f7
     294:	01061005 	tsteq	r6, r5
    if (node < 1 || node > 25) {
     298:	4b060905 	blmi	1826b4 <__ccfg+0x16270c>
     29c:	01061205 	tsteq	r6, r5, lsl #4
            proceed Create_Record;
     2a0:	21060905 	tstcs	r6, r5, lsl #18
     2a4:	060c0513 			; <UNDEFINED> instruction: 0x060c0513
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	06290501 	strteq	r0, [r9], -r1, lsl #10
     2ac:	1309052e 	movwne	r0, #38190	; 0x952e
     2b0:	01061805 	tsteq	r6, r5, lsl #16
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     2b8:	05200627 	streq	r0, [r0, #-1575]!	; 0xfffff9d9
     2bc:	18051309 	stmdane	r5, {r0, r3, r8, r9, ip}
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	0c050106 	stfeqs	f0, [r5], {6}
        proceed Transmit_Message;
     2c4:	06290520 	strteq	r0, [r9], -r0, lsr #10
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	13090520 	movwne	r0, #38176	; 0x9520
        proceed Transmit_Message;
     2cc:	01061805 	tsteq	r6, r5, lsl #16
        currentProtocol = DELETE_RECORD;
     2d0:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	05200624 	streq	r0, [r0, #-1572]!	; 0xfffff9dc
        currentProtocol = DELETE_RECORD;
     2d8:	18051309 	stmdane	r5, {r0, r3, r8, r9, ip}
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	0c050106 	stfeqs	f0, [r5], {6}
        proceed Get_Receiving_Node;
     2e0:	06260520 	strteq	r0, [r6], -r0, lsr #10
        currentProtocol = RETRIEVE_RECORD;
     2e4:	14090520 	strne	r0, [r9], #-1312	; 0xfffffae0
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	01054b31 	tsteq	r5, r1, lsr fp
        currentProtocol = RETRIEVE_RECORD;
     2ec:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	0009022d 	andeq	r0, r9, sp, lsr #4
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	22050101 	andcs	r0, r5, #1073741824	; 0x40000000
     2f8:	00020500 	andeq	r0, r2, r0, lsl #10
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	03000000 	movweq	r0, #0
     300:	050100d0 	streq	r0, [r1, #-208]	; 0xffffff30
     304:	08051305 	stmdaeq	r5, {r0, r2, r8, r9, ip}
    if (node < 1 || node > 25) {
     308:	01050106 	tsteq	r5, r6, lsl #2
     30c:	00050225 	andeq	r0, r5, r5, lsr #4
            proceed Prompt_Recieving_Node;
     310:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
     318:	03000001 	movweq	r0, #1
        char desiredRecordIndex = -1;
     31c:	050100de 	streq	r0, [r1, #-222]	; 0xffffff22
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	05151304 	ldreq	r1, [r5, #-772]	; 0xfffffcfc
     324:	240e0615 	strcs	r0, [lr], #-1557	; 0xfffff9eb
        char desiredRecordIndex = -1;
     328:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	06110530 			; <UNDEFINED> instruction: 0x06110530
        messagePtr->recordIndex = desiredRecordIndex;
     330:	2f010501 	svccs	0x00010501
     334:	01000402 	tsteq	r0, r2, lsl #8
     338:	001a0501 	andseq	r0, sl, r1, lsl #10
        proceed Transmit_Message;
     33c:	013c0205 	teqeq	ip, r5, lsl #4
        messagePtr -> senderGroupId = groupId;
     340:	e7030000 	str	r0, [r3, -r0]
     344:	1c050100 	stfnes	f0, [r5], {-0}
     348:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
        messagePtr -> messageType = currentProtocol;
     34c:	06050501 	streq	r0, [r5], -r1, lsl #10
        messagePtr -> requestNumber = randomNumber();
     350:	0a039208 	beq	e4b78 <__ccfg+0xc4bd0>
        messagePtr -> senderId = nodeId;
     354:	09051401 	stmdbeq	r5, {r0, sl, ip}
     358:	06150515 			; <UNDEFINED> instruction: 0x06150515
     35c:	30100501 	andscc	r0, r0, r1, lsl #10
        call transmitter(messagePtr, Menu_Header);
     360:	051e1505 	ldreq	r1, [lr, #-1285]	; 0xfffffafb
        messagePtr -> receiverId = receiverId;
     364:	05220609 	streq	r0, [r2, #-1545]!	; 0xfffff9f7
        call transmitter(messagePtr, Menu_Header);
     368:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     36c:	052f0609 	streq	r0, [pc, #-1545]!	; fffffd6b <_estack+0xdfffad6b>
     370:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     374:	1105222c 	tstne	r5, ip, lsr #4
            proceed Set_Node_ID;
     378:	0609051e 			; <UNDEFINED> instruction: 0x0609051e
            break;
     37c:	062c0522 	strteq	r0, [ip], -r2, lsr #10
            proceed Set_Node_ID;
     380:	2e140501 	cfmul32cs	mvfx0, mvfx4, mvfx1
            proceed Find_Neighbours;
     384:	05230905 	streq	r0, [r3, #-2309]!	; 0xfffff6fb
            proceed Create_Record;
     388:	09051d14 	stmdbeq	r5, {r2, r4, r8, sl, fp, ip}
            proceed Delete_Record;
     38c:	4d3f2306 	ldcmi	3, cr2, [pc, #-24]!	; 37c <root+0x240>
            proceed Retrieve_Record;
     390:	01060f05 	tsteq	r6, r5, lsl #30
            diag("Reset Local Storage");
     394:	05660d05 	strbeq	r0, [r6, #-3333]!	; 0xfffff2fb
            break;
     398:	0d052103 	stfeqs	f2, [r5, #-12]
            diag("Reset Local Storage");
     39c:	0603052d 	streq	r0, [r3], -sp, lsr #10
     3a0:	06053121 	streq	r3, [r5], -r1, lsr #2
     3a4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     3a8:	053d3d06 	ldreq	r3, [sp, #-3334]!	; 0xfffff2fa
     3ac:	19053209 	stmdbne	r5, {r0, r3, r9, ip, sp}
     3b0:	09050106 	stmdbeq	r5, {r1, r2, r8}
     3b4:	1f19052f 	svcne	0x0019052f
     3b8:	21060905 	tstcs	r6, r5, lsl #18
     3bc:	68144dcb 	ldmdavs	r4, {r0, r1, r3, r6, r7, r8, sl, fp, lr}
     3c0:	74082c03 	strvc	r2, [r8], #-3075	; 0xfffff3fd
     3c4:	405a4c40 	subsmi	r4, sl, r0, asr #24
     3c8:	0505684d 	streq	r6, [r5, #-2125]	; 0xfffff7b3
     3cc:	017ef903 	cmneq	lr, r3, lsl #18	; <UNPREDICTABLE>
     3d0:	01061205 	tsteq	r6, r5, lsl #4
     3d4:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     3d8:	053d0609 	ldreq	r0, [sp, #-1545]!	; 0xfffff9f7
     3dc:	0187030d 	orreq	r0, r7, sp, lsl #6
     3e0:	3f090501 	svccc	0x00090501
     3e4:	06190540 	ldreq	r0, [r9], -r0, asr #10
     3e8:	30090501 	andcc	r0, r9, r1, lsl #10
     3ec:	051e1905 	ldreq	r1, [lr, #-2309]	; 0xfffff6fb
     3f0:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
     3f4:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     3f8:	322f0609 	eorcc	r0, pc, #9437184	; 0x900000
     3fc:	01061905 	tsteq	r6, r5, lsl #18
     400:	052f0905 	streq	r0, [pc, #-2309]!	; fffffb03 <_estack+0xdfffab03>
static void devinit_uart (int devnum) {
     404:	09052d19 	stmdbeq	r5, {r0, r3, r4, r8, sl, fp, sp}
	adddevfunc (ioreq_uart_a, devnum);
     408:	68312106 	ldmdavs	r1!, {r1, r2, r8, sp}
     40c:	e5030505 	str	r0, [r3, #-1285]	; 0xfffffafb
void udelay (volatile word n) {
     410:	1205017e 	andne	r0, r5, #-2147483617	; 0x8000001f
     414:	08050106 	stmdaeq	r5, {r1, r2, r8}
	while (n) {
     418:	06090520 	streq	r0, [r9], -r0, lsr #10
     41c:	030d053d 	movweq	r0, #54589	; 0xd53d
}
     420:	0501019b 	streq	r0, [r1, #-411]	; 0xfffffe65
	while (n--);
     424:	27054009 	strcs	r4, [r5, -r9]
     428:	09050106 	stmdbeq	r5, {r1, r2, r8}
     42c:	20270520 	eorcs	r0, r7, r0, lsr #10
		n--;
     430:	06200905 	strteq	r0, [r0], -r5, lsl #18
     434:	0623054c 	strteq	r0, [r3], -ip, asr #10
     438:	200c0501 	andcs	r0, ip, r1, lsl #10
void mdelay (volatile word n) {
     43c:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
     440:	0522060d 	streq	r0, [r2, #-1549]!	; 0xfffff9f3
	while (n) {
     444:	0501062f 	streq	r0, [r1, #-1583]	; 0xfffff9d1
     448:	2f053f09 	svccs	0x00053f09
}
     44c:	0609052b 	streq	r0, [r9], -fp, lsr #10
		udelay (999);
     450:	19053331 	stmdbne	r5, {r0, r4, r5, r8, r9, ip, sp}
     454:	09050106 	stmdbeq	r5, {r1, r2, r8}
		n--;
     458:	2d19052f 	cfldr32cs	mvfx0, [r9, #-188]	; 0xffffff44
     45c:	21060905 	tstcs	r6, r5, lsl #18
     460:	19053f2f 	stmdbne	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, sp}
     464:	09050106 	stmdbeq	r5, {r1, r2, r8}
void __pi_ondomain (lword d) {
     468:	2d19052f 	cfldr32cs	mvfx0, [r9, #-188]	; 0xffffff44
     46c:	21060905 	tstcs	r6, r5, lsl #18
		if (__pi_systat.effpdm > 1)
     470:	05684d31 	strbeq	r4, [r8, #-3377]!	; 0xfffff2cf
     474:	7ec60305 	cdpvc	3, 12, cr0, cr6, cr5, {0}
			__pi_systat.effpdm = 1;
     478:	06120501 	ldreq	r0, [r2], -r1, lsl #10
	PRCMPowerDomainOn (d);
     47c:	20080501 	andcs	r0, r8, r1, lsl #10
     480:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     484:	ba030d05 	blt	c38a0 <__ccfg+0xa38f8>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     488:	09050101 	stmdbeq	r5, {r0, r8}
     48c:	0e054d40 	cdpeq	13, 0, cr4, cr5, cr0, {2}
     490:	09050106 	stmdbeq	r5, {r1, r2, r8}
	__pi_systat.ondmns |= d;
     494:	490e0521 	stmdbmi	lr, {r0, r5, r8, sl}
     498:	2f060905 	svccs	0x00060905
}
     49c:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
     4a0:	20210501 	eorcs	r0, r1, r1, lsl #10
void __pi_offdomain (lword d) {
     4a4:	053e0905 	ldreq	r0, [lr, #-2309]!	; 0xfffff6fb
     4a8:	09051e21 	stmdbeq	r5, {r0, r5, r9, sl, fp, ip}
	PRCMPowerDomainOff (d);
     4ac:	05322206 	ldreq	r2, [r2, #-518]!	; 0xfffffdfa
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     4b4:	14052025 	strne	r2, [r5], #-37	; 0xffffffdb
     4b8:	20250520 	eorcs	r0, r5, r0, lsr #10
	if (d & PRCM_DOMAIN_RFCORE) {
     4bc:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     4c0:	01062305 	tsteq	r6, r5, lsl #6
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c4:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     4c8:	01062705 	tsteq	r6, r5, lsl #14
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4cc:	052f2005 	streq	r2, [pc, #-5]!	; 4cf <__pi_offdomain+0x2b>
     4d0:	20052014 	andcs	r2, r5, r4, lsl r0
	__pi_systat.ondmns &= ~d;
     4d4:	1f250520 	svcne	0x00250520
     4d8:	21060905 	tstcs	r6, r5, lsl #18
}
     4dc:	01062005 	tsteq	r6, r5
     4e0:	21060905 	tstcs	r6, r5, lsl #18
void __pi_syserror (word ec, const char *m) {
     4e4:	01062205 	tsteq	r6, r5, lsl #4
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	05221205 	streq	r1, [r2, #-517]!	; 0xfffffdfb
     4ec:	09051e22 	stmdbeq	r5, {r1, r5, r9, sl, fp, ip}
     4f0:	0e053006 	cdpeq	0, 0, cr3, cr5, cr6, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4f4:	06120501 	ldreq	r0, [r2], -r1, lsl #10
     4f8:	58110501 	ldmdapl	r1, {r0, r8, sl}
     4fc:	20065b05 	andcs	r5, r6, r5, lsl #22
		all_leds_blink;
     500:	fe030d05 	vdot.bf16	d0, d3, d5[0]
     504:	25062e7e 	strcs	r2, [r6, #-3710]	; 0xfffff182
     508:	331f2f06 	tstcc	pc, #6, 30
     50c:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     510:	2f062506 	svccs	0x00062506
     514:	0313051f 	tsteq	r3, #130023424	; 0x7c00000
     518:	052e00e0 	streq	r0, [lr, #-224]!	; 0xffffff20
     51c:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
     520:	01010031 	tsteq	r1, r1, lsr r0
     524:	0000155c 	andeq	r1, r0, ip, asr r5
	while (1) {
     528:	029b0003 	addseq	r0, fp, #3
     52c:	01020000 	mrseq	r0, (UNDEF: 2)
     530:	000d0efb 	strdeq	r0, [sp], -fp
     534:	01010101 	tsteq	r1, r1, lsl #2
void tci_run_delay_timer () {
     538:	01000000 	mrseq	r0, (UNDEF: 0)
	setdel = __pi_mintk - __pi_old;
     53c:	2f010000 	svccs	0x00010000
     540:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     544:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     548:	2f6e6974 	svccs	0x006e6974
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	6b736544 	blvs	1cd9a64 <__ccfg+0x1cb9abc>
     550:	2f706f74 	svccs	0x00706f74
     554:	4f534c4f 	svcmi	0x00534c4f
     558:	2f54454e 	svccs	0x0054454e
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	4f434950 	svcmi	0x00434950
	sti_tim;
     560:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
     564:	2f534f63 	svccs	0x00534f63
     568:	33314343 	teqcc	r1, #201326593	; 0xc000001
     56c:	2f005858 	svccs	0x00005858
     570:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     574:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	cli_aux;
     578:	2f6e6974 	svccs	0x006e6974
     57c:	6b736544 	blvs	1cd9a94 <__ccfg+0x1cb9aec>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	2f706f74 	svccs	0x00706f74
     584:	4f534c4f 	svcmi	0x00534c4f
     588:	2f54454e 	svccs	0x0054454e
     58c:	4f434950 	svcmi	0x00434950
	sti_aux;
     590:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
     594:	2f534f63 	svccs	0x00534f63
     598:	33314343 	teqcc	r1, #201326593	; 0xc000001
     59c:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
void AONRTCIntHandler () {
     5a0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
     5a8:	72642f45 	rsbvc	r2, r4, #276	; 0x114
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
		if (__pi_utims [0] == 0)
     5b0:	0062696c 	rsbeq	r6, r2, ip, ror #18
     5b4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 500 <__pi_syserror+0x1c>
		if (*(__pi_utims [0])) {
     5b8:	616d2f65 	cmnvs	sp, r5, ror #30
     5bc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			(*(__pi_utims [0]))--;
     5c0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		if (__pi_utims [1] == 0)
     5c4:	706f746b 	rsbvc	r7, pc, fp, ror #8
		if (*(__pi_utims [1])) {
     5c8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			aux_timer_inactive = 0;
     5cc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			(*(__pi_utims [1]))--;
     5d0:	4349502f 	movtmi	r5, #36911	; 0x902f
		if (__pi_utims [2] == 0)
     5d4:	502f534f 	eorpl	r5, pc, pc, asr #6
		if (*(__pi_utims [2])) {
     5d8:	534f6369 	movtpl	r6, #62313	; 0xf369
			(*(__pi_utims [2]))--;
     5dc:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		if (__pi_utims [3] != 0) {
     5e0:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
			if (*(__pi_utims [3])) {
     5e4:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
				aux_timer_inactive = 0;
     5e8:	2f656d6f 	svccs	0x00656d6f
				(*(__pi_utims [3]))--;
     5ec:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	if (__pi_systat.ledsts) {
     5f0:	442f6e69 	strtmi	r6, [pc], #-3689	; 5f8 <AONRTCIntHandler+0x58>
     5f4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (__pi_systat.ledblc++ == 0) {
     5f8:	4f2f706f 	svcmi	0x002f706f
     5fc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			if (__pi_systat.ledblk) {
     600:	502f5445 	eorpl	r5, pc, r5, asr #8
     604:	534f4349 	movtpl	r4, #62281	; 0xf349
     608:	6369502f 	cmnvs	r9, #47	; 0x2f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     60c:	502f534f 	eorpl	r5, pc, pc, asr #6
     610:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
				if (__pi_systat.ledsts & 0x2)
     614:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
     618:	73726f73 	cmnvc	r2, #460	; 0x1cc
     61c:	6f682f00 	svcvs	0x00682f00
				if (__pi_systat.ledsts & 0x4)
     620:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 474 <__pi_ondomain+0xc>
				__pi_systat.ledblk = 0;
     624:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     628:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			if (__pi_systat.fstblk)
     62c:	6f746b73 	svcvs	0x00746b73
     630:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				__pi_systat.ledblc = 200;
     634:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	if (events & AON_RTC_EVFLAGS_CH0) {
     638:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		cli_tim;
     63c:	2f534f43 	svccs	0x00534f43
		__pi_new += setdel;
     640:	4f636950 	svcmi	0x00636950
     644:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
		setdel = 0;
     648:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
		RISE_N_SHINE;
     64c:	73752f00 	cmnvc	r5, #0, 30
		__pi_new += setdel;
     650:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
		RISE_N_SHINE;
     654:	63672f62 	cmnvs	r7, #392	; 0x188
     658:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
		aux_timer_inactive = 1;
     65c:	6f6e2d6d 	svcvs	0x006e2d6d
     660:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
				if (__pi_systat.ledsts & 0x1)
     664:	2f696261 	svccs	0x00696261
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     668:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     66c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
				if (__pi_systat.ledsts & 0x2)
     670:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     674:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     678:	2f656d6f 	svccs	0x00656d6f
				if (__pi_systat.ledsts & 0x8)
     67c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
				__pi_systat.ledblk = 1;
     680:	442f6e69 	strtmi	r6, [pc], #-3689	; 688 <AONRTCIntHandler+0xe8>
     684:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (aux_timer_inactive) {
     688:	4f2f706f 	svcmi	0x002f706f
			cli_aux;
     68c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     690:	502f5445 	eorpl	r5, pc, r5, asr #8
     694:	534f4349 	movtpl	r4, #62281	; 0xf349
     698:	6369502f 	cmnvs	r9, #47	; 0x2f
     69c:	0000534f 	andeq	r5, r0, pc, asr #6
     6a0:	6e69616d 	powvsez	f6, f1, #5.0
     6a4:	0100632e 	tsteq	r0, lr, lsr #6
     6a8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     6ac:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
     6b0:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
word tci_update_delay_ticks (Boolean force) {
     6b4:	00000200 	andeq	r0, r0, r0, lsl #4
	cli_tim;
     6b8:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     6bc:	63675f73 	cmnvs	r7, #460	; 0x1cc
	if (setdel) {
     6c0:	00682e63 	rsbeq	r2, r8, r3, ror #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	67000001 	strvs	r0, [r0, -r1]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     6cc:	00020068 	andeq	r0, r2, r8, rrx
     6d0:	71726900 	cmnvc	r2, r0, lsl #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
				AON_RTC_O_CH0CMP)) - gettav ());
     6d8:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
	return NO;
     6dc:	2e736465 	cdpcs	4, 7, cr6, cr3, cr5, {3}
			setdel = 0;
     6e0:	00030068 	andeq	r0, r3, r8, rrx
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e4:	72617500 	rsbvc	r7, r1, #0, 10
     6e8:	00682e74 	rsbeq	r2, r8, r4, ror lr
}
     6ec:	69000002 	stmdbvs	r0, {r1}
		sti_tim;
     6f0:	625f7172 	subsvs	r7, pc, #-2147483620	; 0x8000001c
		return YES;
     6f4:	6f747475 	svcvs	0x00747475
     6f8:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     6fc:	00000300 	andeq	r0, r0, r0, lsl #6
     700:	5f717269 	svcpl	0x00717269
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	5f6e6970 	svcpl	0x006e6970
	UARTDisable (UART0_BASE);
     708:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	682e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
	UARTDisable (UART0_BASE);
     710:	00000400 	andeq	r0, r0, r0, lsl #8
	UARTConfigSetExpClk (UART0_BASE,
     714:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
     718:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     71c:	6f610000 	svcvs	0x00610000
     720:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	00682e63 	rsbeq	r2, r8, r3, ror #28
     728:	70000002 	andvc	r0, r0, r2
     72c:	635f7277 	cmpvs	pc, #1879048199	; 0x70000007
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
     734:	00020068 	andeq	r0, r2, r8, rrx
     738:	6e6f6100 	powvse	f6, f7, f0
	urates [0] = rate;
     73c:	636f695f 	cmnvs	pc, #1556480	; 0x17c000
}
     740:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     744:	63730000 	cmnvs	r3, #0
     748:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     74c:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
     750:	00050068 	andeq	r0, r5, r8, rrx
     754:	6e6f6100 	powvse	f6, f7, f0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
     75c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     760:	6f610000 	svcvs	0x00610000
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	61625f6e 	cmnvs	r2, lr, ror #30
     768:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     770:	74730000 	ldrbtvc	r0, [r3], #-0
	__pi_uart_setrate (urates [0], __pi_uart);
     774:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     778:	0600682e 	streq	r6, [r0], -lr, lsr #16
     77c:	72610000 	rsbvc	r0, r1, #0
     780:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     784:	00000100 	andeq	r0, r0, r0, lsl #2
     788:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     78c:	0100682e 	tsteq	r0, lr, lsr #16
	switch (operation) {
     790:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
static int ioreq_uart_a (int operation, char *buf, int len) {
     794:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     798:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     79c:	00000100 	andeq	r0, r0, r0, lsl #2
     7a0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     7a4:	5f736e6f 	svcpl	0x00736e6f
				*buf++ = uart_a_read;
     7a8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     7ac:	00010068 	andeq	r0, r1, r8, rrx
			while (len && uart_a_char_available) {
     7b0:	73797300 	cmnvc	r9, #0, 6
     7b4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     7b8:	00000700 	andeq	r0, r0, r0, lsl #14
			if (len != operation) {
     7bc:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
}
     7c0:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
     7c4:	00000500 	andeq	r0, r0, r0, lsl #10
			uart_a_disable_int;
     7c8:	00270500 	eoreq	r0, r7, r0, lsl #10
			if (uart_a_char_available) {
     7cc:	04040205 	streq	r0, [r4], #-517	; 0xfffffdfb
				*buf++ = uart_a_read;
     7d0:	fc030000 	stc2	0, cr0, [r3], {-0}
			uart_a_disable_int;
     7d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     7d8:	06270514 			; <UNDEFINED> instruction: 0x06270514
			if (uart_a_char_available) {
     7dc:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
     7e0:	01000502 	tsteq	r0, r2, lsl #10
				uart_a_enable_int;
     7e4:	001f0501 	andseq	r0, pc, r1, lsl #10
     7e8:	04100205 	ldreq	r0, [r0], #-517	; 0xfffffdfb
				goto Redo_rx;
     7ec:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f0:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
     7f4:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
			return -2;
     7f8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     7fc:	01053c08 	tsteq	r5, r8, lsl #24
				uart_a_write (*buf);
     800:	06030524 	streq	r0, [r3], -r4, lsr #10
     804:	1b02052b 	blne	81cb8 <__ccfg+0x61d10>
			while (len && uart_a_room_in_tx) {
     808:	05010d05 	streq	r0, [r1, #-3333]	; 0xfffff2fb
     80c:	0a050108 	beq	140c34 <__ccfg+0x120c8c>
     810:	08050106 	stmdaeq	r5, {r1, r2, r8}
			if (len != operation) {
     814:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
			uart_a_disable_int;
     818:	06040534 			; <UNDEFINED> instruction: 0x06040534
     81c:	00070201 	andeq	r0, r7, r1, lsl #4
			if (uart_a_room_in_tx) {
     820:	1f050101 	svcne	0x00050101
     824:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
				uart_a_enable_int;
     828:	03000004 	movweq	r0, #4
     82c:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
				*buf++ = uart_a_read;
     830:	0108053d 	tsteq	r8, sp, lsr r5
			if (uart_a_room_in_tx) {
     834:	01060905 	tsteq	r6, r5, lsl #18
				uart_a_write (*buf);
     838:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
     83c:	03052401 	movweq	r2, #21505	; 0x5401
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     840:	054b3906 	strbeq	r3, [fp, #-2310]	; 0xfffff6fa
     844:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
			uart_a_enable_int;
     848:	01010007 	tsteq	r1, r7
     84c:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
     850:	00046802 	andeq	r6, r4, r2, lsl #16
			return 0;
     854:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
			if (len == UART_CNTRL_SETRATE) {
     858:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
				if (__pi_uart_setrate (*((word*)buf),
     85c:	050e061e 	streq	r0, [lr, #-1566]	; 0xfffff9e2
     860:	1e052405 	cdpne	4, 0, cr2, cr5, cr5, {0}
     864:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
				syserror (EREQPAR, "uar");
     868:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
			syserror (ENOOPER, "uai");
     86c:	01061205 	tsteq	r6, r5, lsl #4
			if (len == UART_CNTRL_GETRATE) {
     870:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
				return 1;
     874:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     878:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
			syserror (ENOOPER, "uai");
     87c:	593f0602 	ldmdbpl	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
     880:	05013b05 	streq	r3, [r1, #-2821]	; 0xfffff4fb
     884:	09050108 	stmdbeq	r5, {r3, r8}
     888:	08050106 	stmdaeq	r5, {r1, r2, r8}
     88c:	0602054a 	streq	r0, [r2], -sl, asr #10
     890:	06150530 			; <UNDEFINED> instruction: 0x06150530
     894:	4b010501 	blmi	41ca0 <__ccfg+0x21cf8>
     898:	01000502 	tsteq	r0, r2, lsl #10
     89c:	001f0501 	andseq	r0, pc, r1, lsl #10
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	04a40205 	strteq	r0, [r4], #517	; 0x205
void UART0IntHandler () {
     8a4:	3a030000 	bcc	c08ac <__ccfg+0xa0904>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	17020501 	strne	r0, [r2, -r1, lsl #10]
     8ac:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
     8b0:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
     8b4:	02051b1f 	andeq	r1, r5, #31744	; 0x7c00
     8b8:	053d0625 	ldreq	r0, [sp, #-1573]!	; 0xfffff9db
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8bc:	0805013c 	stmdaeq	r5, {r2, r3, r4, r5, r8}
     8c0:	06090501 	streq	r0, [r9], -r1, lsl #10
		RISE_N_SHINE;
     8c4:	4a080501 	bmi	201cd0 <__ccfg+0x1e1d28>
     8c8:	30060205 	andcc	r0, r6, r5, lsl #4
		i_trigger (devevent (UART_A, READ));
     8cc:	01060505 	tsteq	r6, r5, lsl #10
     8d0:	4b060305 	blmi	1814ec <__ccfg+0x161544>
     8d4:	01061205 	tsteq	r6, r5, lsl #4
     8d8:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
     8dc:	04052006 	streq	r2, [r5], #-6
     8e0:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
     8e4:	17050106 	strne	r0, [r5, -r6, lsl #2]
     8e8:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
     8ec:	06150523 	ldreq	r0, [r5], -r3, lsr #10
     8f0:	4b010501 	blmi	41cfc <__ccfg+0x21d54>
     8f4:	01000502 	tsteq	r0, r2, lsl #10
     8f8:	00130501 	andseq	r0, r3, r1, lsl #10
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fc:	00000205 	andeq	r0, r0, r5, lsl #4
     900:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     904:	02050100 	andeq	r0, r5, #0, 2
		i_trigger (devevent (UART_A, WRITE));
     908:	06130514 			; <UNDEFINED> instruction: 0x06130514
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	2202051e 	andcs	r0, r2, #125829120	; 0x7800000
     910:	05363306 	ldreq	r3, [r6, #-774]!	; 0xfffffcfa
		RISE_N_SHINE;
     914:	02041303 	andeq	r1, r4, #201326592	; 0xc000000
     918:	f0030405 			; <UNDEFINED> instruction: 0xf0030405
     91c:	05300101 	ldreq	r0, [r0, #-257]!	; 0xfffffeff
		i_trigger (devevent (UART_A, WRITE));
     920:	0501065c 	streq	r0, [r1, #-1628]	; 0xfffff9a4
     924:	143e0604 	ldrtne	r0, [lr], #-1540	; 0xfffff9fc
     928:	02100a05 	andseq	r0, r0, #20480	; 0x5000
     92c:	01010005 	tsteq	r1, r5
     930:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
     934:	0004e402 	andeq	lr, r4, r2, lsl #8
     938:	01970300 	orrseq	r0, r7, r0, lsl #6
     93c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     940:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     944:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
     948:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
}
     94c:	4a090306 	bmi	24156c <__ccfg+0x2215c4>
     950:	03050304 	movweq	r0, #21252	; 0x5304
     954:	017fb503 	cmneq	pc, r3, lsl #10
     958:	2d050404 	cfstrscs	mvf0, [r5, #-16]
     95c:	01cb0306 	biceq	r0, fp, r6, lsl #6
void __buttons_setirq (int val) {
     960:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	8f030602 	svchi	0x00030602
     968:	03053c7f 	movweq	r3, #23679	; 0x5c7f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	04010113 	streq	r0, [r1], #-275	; 0xfffffeed
     970:	03290504 			; <UNDEFINED> instruction: 0x03290504
     974:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
		bn = BUTTON_GPIO (__button_list [i]);
     978:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97c:	01040106 	tsteq	r4, r6, lsl #2
     980:	90030305 	andls	r0, r3, r5, lsl #6
     984:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
     988:	f0032d05 			; <UNDEFINED> instruction: 0xf0032d05
     98c:	01042000 	mrseq	r2, (UNDEF: 4)
     990:	03060305 	movweq	r0, #25349	; 0x6305
}
     994:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
     998:	03290504 			; <UNDEFINED> instruction: 0x03290504
     99c:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
     9a0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
void __pinlist_setirq (int val) {
     9a4:	01040106 	tsteq	r4, r6, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	03060305 	movweq	r0, #25349	; 0x6305
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	01207f90 			; <UNDEFINED> instruction: 0x01207f90
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	01010101 	tsteq	r1, r1, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b8:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
     9bc:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c0:	17050501 	strne	r0, [r5, -r1, lsl #10]
     9c4:	01062d05 	tsteq	r6, r5, lsl #26
     9c8:	03050104 	movweq	r0, #20740	; 0x5104
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	207eda03 	rsbscs	sp, lr, r3, lsl #20
}
     9d0:	2d050404 	cfstrscs	mvf0, [r5, #-16]
     9d4:	2001a603 	andcs	sl, r1, r3, lsl #12
     9d8:	03050104 	movweq	r0, #20740	; 0x5104
     9dc:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
void GPIOIntHandler () {
     9e0:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
if (buttons_int) {
     9e4:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
     9e8:	17050501 	strne	r0, [r5, -r1, lsl #10]
	buttons_disable ();
     9ec:	01062d05 	tsteq	r6, r5, lsl #26
     9f0:	03050104 	movweq	r0, #20740	; 0x5104
	i_trigger ((aword)&__button_list);
     9f4:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
     9f8:	01010120 	tsteq	r1, r0, lsr #2
     9fc:	58010101 	stmdapl	r1, {r0, r8}
     a00:	08052e01 	stmdaeq	r5, {r0, r9, sl, fp, sp}
     a04:	00090211 	andeq	r0, r9, r1, lsl r2
     a08:	1d050101 	stfnes	f0, [r5, #-4]
     a0c:	38020500 	stmdacc	r2, {r8, sl}
     a10:	03000005 	movweq	r0, #5
     a14:	0501029d 	streq	r0, [r1, #-669]	; 0xfffffd63
     a18:	1d051602 	stcne	6, cr1, [r5, #-8]
     a1c:	16050e06 	strne	r0, [r5], -r6, lsl #28
	RISE_N_SHINE;
     a20:	4a090524 	bmi	241eb8 <__ccfg+0x221f10>
     a24:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
     a28:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
if (pin_sensor_int) {
     a2c:	76032306 	strvc	r2, [r3], -r6, lsl #6
     a30:	06110501 	ldreq	r0, [r1], -r1, lsl #10
	i_trigger ((aword)(&__input_pins));
     a34:	03020501 	movweq	r0, #9473	; 0x2501
     a38:	2f052e0d 	svccs	0x00052e0d
     a3c:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
     a40:	200a032a 	andcs	r0, sl, sl, lsr #6
     a44:	76032f05 	strvc	r2, [r3], -r5, lsl #30
     a48:	2e360520 	cfabs64cs	mvdx0, mvdx6
     a4c:	0a032a05 	beq	cb268 <__ccfg+0xab2c0>
     a50:	0602052e 	streq	r0, [r2], -lr, lsr #10
     a54:	06010523 	streq	r0, [r1], -r3, lsr #10
     a58:	000b022f 	andeq	r0, fp, pc, lsr #4
     a5c:	21050101 	tstcs	r5, r1, lsl #2
	__pinsen_disable_and_clear;
     a60:	78020500 	stmdavc	r2, {r8, sl}
	RISE_N_SHINE;
     a64:	03000005 	movweq	r0, #5
     a68:	050102aa 	streq	r0, [r1, #-682]	; 0xfffffd56
     a6c:	21051702 	tstcs	r5, r2, lsl #14
}
     a70:	02051b06 	andeq	r1, r5, #6144	; 0x1800
     a74:	06090525 	streq	r0, [r9], -r5, lsr #10
     a78:	1402052e 	strne	r0, [r2], #-1326	; 0xfffffad2
     a7c:	05016903 	streq	r6, [r1, #-2307]	; 0xfffff6fd
     a80:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
void system_init () {
     a84:	2a052e2f 	bcs	14c348 <__ccfg+0x12c3a0>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a88:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8c:	2069032f 	rsbcs	r0, r9, pc, lsr #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     a94:	2017032a 	andscs	r0, r7, sl, lsr #6
     a98:	23060205 	movwcs	r0, #25093	; 0x6205
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
     aa0:	02130601 	andseq	r0, r3, #1048576	; 0x100000
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa4:	01010006 	tsteq	r1, r6
     aa8:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
     aac:	0005a002 	andeq	sl, r5, r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab0:	02b70300 	adcseq	r0, r7, #0, 6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ab8:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     abc:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac4:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	02051e2b 	andeq	r1, r5, #688	; 0x2b0
		pin = (port_confs [i] >> 19) & 0x1f;
     ad0:	05052206 	streq	r2, [r5, #-518]	; 0xfffffdfa
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad4:	03050106 	movweq	r0, #20742	; 0x5106
     ad8:	15182506 	ldrne	r2, [r8, #-1286]	; 0xfffffafa
     adc:	01061205 	tsteq	r6, r5, lsl #4
     ae0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		if (port_confs [i] & 0x80)
     ae4:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ae8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     aec:	04052006 	streq	r2, [r5], #-6
		if (port_confs [i] & 0x40)
     af0:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     af8:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afc:	03050106 	movweq	r0, #20742	; 0x5106
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b04:	06050106 	streq	r0, [r5], -r6, lsl #2
	all_leds_blink;
     b08:	06030520 	streq	r0, [r3], -r0, lsr #10
     b0c:	06070522 	streq	r0, [r7], -r2, lsr #10
     b10:	20060501 	andcs	r0, r6, r1, lsl #10
     b14:	21060405 	tstcs	r6, r5, lsl #8
     b18:	13061705 	movwne	r1, #26373	; 0x6705
     b1c:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     b20:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b24:	01061205 	tsteq	r6, r5, lsl #4
     b28:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     b2c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     b30:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     b34:	04052006 	streq	r2, [r5], #-6
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b38:	17052106 	strne	r2, [r5, -r6, lsl #2]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	051f1306 	ldreq	r1, [pc, #-774]	; 83e <ioreq_uart_a+0xae>
     b40:	052f0604 	streq	r0, [pc, #-1540]!	; 544 <tci_run_delay_timer+0xc>
	IntEnable (INT_AON_RTC_COMB);
     b44:	12051403 	andne	r1, r5, #50331648	; 0x3000000
     b48:	06050106 	streq	r0, [r5], -r6, lsl #2
     b4c:	06040520 	streq	r0, [r4], -r0, lsr #10
	__pi_malloc_init ();
     b50:	06080521 	streq	r0, [r8], -r1, lsr #10
	IntEnable (INT_AON_GPIO_EDGE);
     b54:	20070501 	andcs	r0, r7, r1, lsl #10
     b58:	21060505 	tstcs	r6, r5, lsl #10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5c:	13061805 	movwne	r1, #26629	; 0x6805
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     b64:	0505042f 	streq	r0, [r5, #-1071]	; 0xfffffbd1
     b68:	7da30302 	stcvc	3, cr0, [r3, #8]!
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6c:	06110501 	ldreq	r0, [r1], -r1, lsl #10
     b70:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b74:	30060305 	andcc	r0, r6, r5, lsl #6
     b78:	01061205 	tsteq	r6, r5, lsl #4
     b7c:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
	urates [0] = UART_RATE / 100;
     b80:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
     b84:	13052106 	movwne	r2, #20742	; 0x5106
	reinit_uart ();
     b88:	07050106 	streq	r0, [r5, -r6, lsl #2]
	EXTRA_INITIALIZERS;
     b8c:	2f140520 	svccs	0x00140520
     b90:	051f0705 	ldreq	r0, [pc, #-1797]	; 493 <__pi_ondomain+0x2b>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b94:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     b98:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     b9c:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba0:	03290504 			; <UNDEFINED> instruction: 0x03290504
     ba4:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     bac:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
			devinit [i] . init (devinit [i] . param);
     bb0:	03060505 	movweq	r0, #25861	; 0x6505
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb4:	054a7de6 	strbeq	r7, [sl, #-3558]	; 0xfffff21a
     bb8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     bbc:	06052008 	streq	r2, [r5], -r8
	IntEnable (INT_UART0_COMB);
     bc0:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     bc4:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
}
     bc8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
	tci_run_auxiliary_timer ();
     bcc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		diag ("");
     bd0:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     bd4:	e8030605 	stmda	r3, {r0, r2, r9, sl}
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bd8:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bdc:	06050106 	streq	r0, [r5], -r6, lsl #2
		diag ("Leftover RAM: %d bytes",
     be0:	01012106 	tsteq	r1, r6, lsl #2
     be4:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     be8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     bec:	01210606 			; <UNDEFINED> instruction: 0x01210606
     bf0:	13050501 	movwne	r0, #21761	; 0x5501
     bf4:	01061805 	tsteq	r6, r5, lsl #16
     bf8:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
     bfc:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
     c00:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     c04:	05052007 	streq	r2, [r5, #-7]
     c08:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
     c0c:	01040106 	tsteq	r4, r6, lsl #2
     c10:	03060b05 	movweq	r0, #27397	; 0x6b05
     c14:	052e02cd 	streq	r0, [lr, #-717]!	; 0xfffffd33
     c18:	05051a02 	streq	r1, [r5, #-2562]	; 0xfffff5fe
     c1c:	03050106 	movweq	r0, #20742	; 0x5106
     c20:	0c053406 	cfstrseq	mvf3, [r5], {6}
     c24:	03053006 	movweq	r3, #20486	; 0x5006
     c28:	0522062c 	streq	r0, [r2, #-1580]!	; 0xfffff9d4
     c2c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     c30:	0c052f0a 	stceq	15, cr2, [r5], {10}
     c34:	2203051f 	andcs	r0, r3, #130023424	; 0x7c00000
     c38:	051e0c05 	ldreq	r0, [lr, #-3077]	; 0xfffff3fb
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	132f0603 			; <UNDEFINED> instruction: 0x132f0603
     c40:	02054a01 	andeq	r4, r5, #4096	; 0x1000
     c44:	06010519 			; <UNDEFINED> instruction: 0x06010519
     c48:	03160513 	tsteq	r6, #79691776	; 0x4c00000
     c4c:	05042045 	streq	r2, [r4, #-69]	; 0xffffffbb
     c50:	03060505 	movweq	r0, #25861	; 0x6505
     c54:	054a7dc9 	strbeq	r7, [sl, #-3529]	; 0xfffff237
     c58:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
}
     c5c:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
__attribute__ ((noreturn)) void __pi_release () {
     c60:	03290504 			; <UNDEFINED> instruction: 0x03290504
     c64:	050102c2 	streq	r0, [r1, #-706]	; 0xfffffd3e
     c68:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6c:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
	check_stack_overflow;
     c70:	03060505 	movweq	r0, #25861	; 0x6505
     c74:	054a7dba 	strbeq	r7, [sl, #-3514]	; 0xfffff246
     c78:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
	update_n_wake (MAX_WORD, NO);
     c7c:	06052008 	streq	r2, [r5], -r8
     c80:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     c84:	c0032905 	andgt	r2, r3, r5, lsl #18
	for_all_tasks (__pi_curr) {
     c88:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     c8c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     c90:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	bc030605 	stclt	6, cr0, [r3], {5}
	__SLEEP;
     c98:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
     c9c:	06050106 	streq	r0, [r5], -r6, lsl #2
     ca0:	01012106 	tsteq	r1, r6, lsl #2
     ca4:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
	system_event_count ++;
     ca8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     cac:	01210606 			; <UNDEFINED> instruction: 0x01210606
	switch (__pi_systat.effpdm) {
     cb0:	13050501 	movwne	r0, #21761	; 0x5501
     cb4:	01061805 	tsteq	r6, r5, lsl #16
     cb8:	03050104 	movweq	r0, #20740	; 0x5104
     cbc:	02ce0306 	sbceq	r0, lr, #402653184	; 0x18000000
			__WFI ();
     cc0:	0606054a 	streq	r0, [r6], -sl, asr #10
     cc4:	06040501 	streq	r0, [r4], -r1, lsl #10
     cc8:	00150230 	andseq	r0, r5, r0, lsr r2
	check_stack_overflow;
     ccc:	2d050101 	stfcss	f0, [r5, #-4]
     cd0:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd4:	03000006 	movweq	r0, #6
     cd8:	05010389 	streq	r0, [r1, #-905]	; 0xfffffc77
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	2d051602 	stccs	6, cr1, [r5, #-8]
			goto Redo;
     ce0:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
	for_all_tasks (__pi_curr) {
     ce4:	2f060524 	svccs	0x00060524
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ce8:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cec:	06060521 	streq	r0, [r6], -r1, lsr #10
     cf0:	20050501 	andcs	r0, r5, r1, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf4:	03060305 	movweq	r0, #25349	; 0x6305
     cf8:	06052009 	streq	r2, [r5], -r9
     cfc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d00:	1a052306 	bne	149920 <__ccfg+0x129978>
     d04:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	7ef90306 	cdpvc	3, 15, cr0, cr9, cr6, {0}
     d0c:	0610052e 	ldreq	r0, [r0], -lr, lsr #10
			__WFI ();
     d10:	2e2e0501 	cfsh64cs	mvdx0, mvdx14, #1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d14:	87031a05 	strhi	r1, [r3, -r5, lsl #20]
     d18:	052f3c01 	streq	r3, [pc, #-3073]!	; 11f <_Min_Stack_Size+0x1f>
}
     d1c:	17052018 	smladne	r5, r8, r0, r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d20:	0309051f 	movweq	r0, #38175	; 0x951f
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d24:	0d05200a 	stceq	0, cr2, [r5, #-40]	; 0xffffffd8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d28:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
     d2c:	0d05230b 	stceq	3, cr2, [r5, #-44]	; 0xffffffd4
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d30:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
     d34:	0105134d 	tsteq	r5, sp, asr #6
     d38:	03051906 	movweq	r1, #22790	; 0x5906
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3c:	052f2906 	streq	r2, [pc, #-2310]!	; 43e <mdelay+0x2>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d40:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
     d44:	01010009 	tsteq	r1, r9
     d48:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
     d4c:	00070402 	andeq	r0, r7, r2, lsl #8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	05d30300 	ldrbeq	r0, [r3, #768]	; 0x300
     d54:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d58:	06330517 			; <UNDEFINED> instruction: 0x06330517
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d5c:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
     d60:	33052702 	movwcc	r2, #22274	; 0x5702
     d64:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
     d68:	3e062702 	cdpcc	7, 0, cr2, cr6, cr2, {0}
     d6c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
			SysCtrlSetRechargeBeforePowerDown
     d70:	017bd503 	cmneq	fp, r3, lsl #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d74:	02050104 	andeq	r0, r5, #4, 2
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d78:	04ab0306 	strteq	r0, [fp], #774	; 0x306
     d7c:	09030601 	stmdbeq	r3, {r0, r9, sl}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	05060482 	streq	r0, [r6, #-1154]	; 0xfffffb7e
     d84:	7dd90324 	ldclvc	3, cr0, [r9, #144]	; 0x90
     d88:	17050501 	strne	r0, [r5, -r1, lsl #10]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8c:	01062305 	tsteq	r6, r5, lsl #6
     d90:	01050104 	tsteq	r5, r4, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d94:	2002a503 	andcs	sl, r2, r3, lsl #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d98:	23050604 	movwcs	r0, #22020	; 0x5604
     d9c:	207ddb03 	rsbscs	sp, sp, r3, lsl #22
     da0:	4f060505 	svcmi	0x00060505
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da4:	01062205 	tsteq	r6, r5, lsl #4
			while (!(AONWUCPowerStatusGet () &
     da8:	02050104 	andeq	r0, r5, #4, 2
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dac:	029e0306 	addseq	r0, lr, #402653184	; 0x18000000
     db0:	060d0566 	streq	r0, [sp], -r6, ror #10
     db4:	06020501 	streq	r0, [r2], -r1, lsl #10
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     db8:	0601052f 	streq	r0, [r1], -pc, lsr #10
     dbc:	000c0213 	andeq	r0, ip, r3, lsl r2
     dc0:	1c050101 	stfnes	f0, [r5], {1}
     dc4:	58020500 	stmdapl	r2, {r8, sl}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dc8:	03000007 	movweq	r0, #7
     dcc:	050105ef 	streq	r0, [r1, #-1519]	; 0xfffffa11
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	06041702 	streq	r1, [r4], -r2, lsl #14
     dd4:	f7032405 			; <UNDEFINED> instruction: 0xf7032405
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd8:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
			reinit_uart ();
     ddc:	06230517 			; <UNDEFINED> instruction: 0x06230517
     de0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     de4:	02880302 	addeq	r0, r8, #134217728	; 0x8000000
}
     de8:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dec:	7df80323 	ldclvc	3, cr0, [r8, #140]!	; 0x8c
     df0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df4:	85030602 	strhi	r0, [r3, #-1538]	; 0xfffff9fe
     df8:	06044a02 	streq	r4, [r4], -r2, lsl #20
     dfc:	c9032405 	stmdbgt	r3, {r0, r2, sl, sp}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	2d05017c 	stfcss	f0, [r5, #-496]	; 0xfffffe10
     e04:	05051717 	streq	r1, [r5, #-1815]	; 0xfffff8e9
     e08:	06230517 			; <UNDEFINED> instruction: 0x06230517
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	a9030602 	stmdbge	r3, {r1, r9, sl}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	06043c03 	streq	r3, [r4], -r3, lsl #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e18:	ce032705 	cdpgt	7, 0, cr2, cr3, cr5, {0}
     e1c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e20:	06240514 			; <UNDEFINED> instruction: 0x06240514
     e24:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e28:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2c:	0e02587d 	mcreq	8, 0, r5, cr2, cr13, {3}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e30:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     e34:	0205003d 	andeq	r0, r5, #61	; 0x3d
			PRCMPowerDomainOff (
     e38:	00000790 	muleq	r0, r0, r7
     e3c:	01068f03 	tsteq	r6, r3, lsl #30
	__SLEEP;
     e40:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
     e44:	2e1e063d 	mrccs	6, 0, r0, cr14, cr13, {1}
  __ASM volatile ("cpsie i" : : : "memory");
     e48:	03060505 	movweq	r0, #25861	; 0x6505
	goto Redo;
     e4c:	0e05820b 	cdpeq	2, 0, cr8, cr5, cr11, {0}
     e50:	08050106 	stmdaeq	r5, {r1, r2, r8}
     e54:	1f0e052f 	svcne	0x000e052f
     e58:	2f060505 	svccs	0x00060505
     e5c:	050f0a05 	streq	r0, [pc, #-2565]	; 45f <mdelay+0x23>
     e60:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
     e64:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     e68:	07053406 	streq	r3, [r5, -r6, lsl #8]
     e6c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     e70:	2e280306 	cdpcs	3, 2, cr0, cr8, cr6, {0}
     e74:	01061605 	tsteq	r6, r5, lsl #12
     e78:	34030105 	strcc	r0, [r3], #-261	; 0xfffffefb
     e7c:	03090520 	movweq	r0, #38176	; 0x9520
     e80:	053c7fa0 	ldreq	r7, [ip, #-4000]!	; 0xfffff060
     e84:	200b0304 	andcs	r0, fp, r4, lsl #6
     e88:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
     e8c:	2e74030e 	cdpcs	3, 7, cr0, cr4, cr14, {0}
     e90:	03060405 	movweq	r0, #25605	; 0x6405
     e94:	054b3c0b 	strbeq	r3, [fp, #-3083]	; 0xfffff3f5
     e98:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     e9c:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
     ea0:	054b3006 	strbeq	r3, [fp, #-6]
     ea4:	0b052404 	bleq	149ebc <__ccfg+0x129f14>
     ea8:	4a240306 	bmi	901ac8 <__ccfg+0x8e1b20>
     eac:	062d0405 	strteq	r0, [sp], -r5, lsl #8
     eb0:	060b0521 	streq	r0, [fp], -r1, lsr #10
     eb4:	06050501 	streq	r0, [r5], -r1, lsl #10
	cli_tim;
     eb8:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
     ebc:	05300608 	ldreq	r0, [r0, #-1544]!	; 0xfffff9f8
     ec0:	2f061e05 	svccs	0x00061e05
	diag ("PicOS halted");
     ec4:	0e0a0513 	mcreq	5, 0, r0, cr10, cr3, {0}
	mdelay (500);
     ec8:	20061205 	andcs	r1, r6, r5, lsl #4
     ecc:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
	setpowermode (2);
     ed0:	05350604 	ldreq	r0, [r5, #-1540]!	; 0xfffff9fc
	__PCB = NULL;
     ed4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	release;
     ed8:	4b340604 	blmi	d026f0 <__ccfg+0xce2748>
     edc:	01060805 	tsteq	r6, r5, lsl #16
     ee0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     ee4:	4b2f0605 	blmi	bc2700 <__ccfg+0xba2758>
int main (void) {
     ee8:	03060905 	movweq	r0, #26885	; 0x6905
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	0405204d 	streq	r2, [r5], #-77	; 0xffffffb3
     ef0:	05203003 	streq	r3, [r0, #-3]!
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	05052108 	streq	r2, [r5, #-264]	; 0xfffffef8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef8:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
	system_init ();
     efc:	11030604 	tstne	r3, r4, lsl #12
	tcv_init ();
     f00:	0b055e3c 	bleq	1587f8 <__ccfg+0x138850>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
     f08:	052f061f 	streq	r0, [pc, #-1567]!	; 8f1 <UART0IntHandler+0x51>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
     f10:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
     f14:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f18:	052f0605 	streq	r0, [pc, #-1541]!	; 91b <UART0IntHandler+0x7b>
     f1c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
	delay (16, 0);
     f20:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
     f24:	04053106 	streq	r3, [r5], #-262	; 0xfffffefa
     f28:	2e160306 	cdpcs	3, 1, cr0, cr6, cr6, {0}
	__pi_release ();
     f2c:	2e6d0306 	cdpcs	3, 6, cr0, cr13, cr6, {0}
     f30:	01060705 	tsteq	r6, r5, lsl #14
     f34:	2f060505 	svccs	0x00060505
     f38:	88030205 	stmdahi	r3, {r0, r2, r9}
     f3c:	1005017f 	andne	r0, r5, pc, ror r1
     f40:	0c050106 	stfeqs	f0, [r5], {6}
     f44:	2000f903 	andcs	pc, r0, r3, lsl #18
static void killev (__pi_pcb_t *pid) {
     f48:	051f1305 	ldreq	r1, [pc, #-773]	; c4b <setpowermode+0xf>
	wfun = (aword)(pid->code);
     f4c:	052f0605 	streq	r0, [pc, #-1541]!	; 94f <UART0IntHandler+0xaf>
	for_all_tasks (i) {
     f50:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
		for (j = 0; j < nevents (i); j++) {
     f54:	11030604 	tstne	r3, r4, lsl #12
     f58:	00120220 	andseq	r0, r2, r0, lsr #4
     f5c:	2b050101 	blcs	141368 <__ccfg+0x1213c0>
			    || i->Events [j] . Event == wfun
     f60:	00020500 	andeq	r0, r2, r0, lsl #10
		for (j = 0; j < nevents (i); j++) {
     f64:	03000000 	movweq	r0, #0
			if (i->Events [j] . Event == (aword)pid
     f68:	050105ea 	streq	r0, [r1, #-1514]	; 0xfffffa16
     f6c:	01051402 	tsteq	r5, r2, lsl #8
     f70:	06021306 	streq	r1, [r2], -r6, lsl #6
				wakeupev (i, j);
     f74:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     f78:	02050019 	andeq	r0, r5, #25
	for_all_tasks (i) {
     f7c:	000008a0 	andeq	r0, r0, r0, lsr #17
}
     f80:	01078103 	tsteq	r7, r3, lsl #2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
static void qfree (aword *ch) {
     f88:	03240506 			; <UNDEFINED> instruction: 0x03240506
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8c:	05050112 	streq	r0, [r5, #-274]	; 0xfffffeee
	cc = (aword*)(mpools + MA_NP);
     f90:	06220517 			; <UNDEFINED> instruction: 0x06220517
	m_setnextp (ch, chunk);
     f94:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	m_setnextp (cc, ch);
     f98:	2e670319 	mcrcs	3, 3, r0, cr7, cr9, {0}
}
     f9c:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa0:	04201903 	strteq	r1, [r0], #-2307	; 0xfffff6fd
     fa4:	03060501 	movweq	r0, #25857	; 0x6501
     fa8:	0604206b 	streq	r2, [r4], -fp, rrx
			m_setnextp (cc, m_nextp (chunk));
     fac:	15032205 	strne	r2, [r3, #-517]	; 0xfffffdfb
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     fb4:	6b030602 	blvs	c27c4 <__ccfg+0xa281c>
     fb8:	06060520 	streq	r0, [r6], -r0, lsr #10
     fbc:	20050501 	andcs	r0, r5, r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	03052e1c 	movweq	r2, #24092	; 0x5e1c
     fc8:	014b2f06 	cmpeq	fp, r6, lsl #30
     fcc:	01011358 	tsteq	r1, r8, asr r3
			m_setnextp (cc, m_nextp (chunk));
     fd0:	20062e01 	andcs	r2, r6, r1, lsl #28
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	662e6606 	strtvs	r6, [lr], -r6, lsl #12
     fd8:	052e014a 	streq	r0, [lr, #-330]!	; 0xfffffeb6
     fdc:	06051502 	streq	r1, [r5], -r2, lsl #10
     fe0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     fe4:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
     fe8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
			if (m_size (chunk) >= m_size (ch))
     fec:	062f0603 	strteq	r0, [pc], -r3, lsl #12
     ff0:	4b062c14 	blmi	18c048 <__ccfg+0x16c0a0>
     ff4:	01135801 	tsteq	r3, r1, lsl #16
		chunk = m_nextp (chunk))
     ff8:	062e0101 	strteq	r0, [lr], -r1, lsl #2
     ffc:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
    1000:	05014a58 	streq	r4, [r1, #-2648]	; 0xfffff5a8
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1004:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
	diag_wait (a);
    1008:	0101000b 	tsteq	r1, fp
	diag_wchar (c, a);
    100c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1010:	00096002 	andeq	r6, r9, r2
}
    1014:	07d90300 	ldrbeq	r0, [r9, r0, lsl #6]
    1018:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	syserror (ESTATE, "state");
    101c:	03041413 	movweq	r1, #17427	; 0x4413
    1020:	fe030305 	cdp2	3, 0, cr0, cr3, cr5, {0}
    1024:	01040178 	tsteq	r4, r8, ror r1
    1028:	03062105 	movweq	r2, #24837	; 0x6105
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	040106fd 	streq	r0, [r1], #-1789	; 0xfffff903
void utimer_add (address ut) {
    1030:	03030503 	movweq	r0, #13571	; 0x3503
    1034:	04207983 	strteq	r7, [r0], #-2435	; 0xfffff67d
		if (__pi_utims [i] == NULL)
    1038:	06020501 	streq	r0, [r2], -r1, lsl #10
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	20078303 	andcs	r8, r7, r3, lsl #6
    1040:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
		syserror (ERESOURCE, "ut a");
    1044:	04041303 	streq	r1, [r4], #-771	; 0xfffffcfd
	__pi_utims [i] = ut;
    1048:	03063305 	movweq	r3, #25349	; 0x6305
}
    104c:	04017dad 	streq	r7, [r1], #-3501	; 0xfffff253
    1050:	03080501 	movweq	r0, #34049	; 0x8501
    1054:	042002d3 	strteq	r0, [r0], #-723	; 0xfffffd2d
	*t = v;
    1058:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	TCI_RUN_AUXILIARY_TIMER;
    105c:	04207dad 	strteq	r7, [r0], #-3501	; 0xfffff253
void update_n_wake (word min, Boolean force) {
    1060:	03080501 	movweq	r0, #34049	; 0x8501
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	052002d3 	streq	r0, [r0, #-723]!	; 0xfffffd2d
    1068:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
    106c:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1070:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    1074:	7da70329 	stcvc	3, cr0, [r7, #164]!	; 0xa4
    1078:	17050501 	strne	r0, [r5, -r1, lsl #10]
    107c:	01063305 	tsteq	r6, r5, lsl #6
    1080:	042e2d05 	strteq	r2, [lr], #-3333	; 0xfffff2fb
    1084:	06030501 	streq	r0, [r3], -r1, lsl #10
    1088:	2002d503 	andcs	sp, r2, r3, lsl #10
    108c:	1e060805 	cdpne	8, 0, cr0, cr6, cr5, {0}
    1090:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
    1094:	04042c08 	streq	r2, [r4], #-3080	; 0xfffff3f8
    1098:	ad033305 	stcge	3, cr3, [r3, #-20]	; 0xffffffec
    109c:	0104207d 	tsteq	r4, sp, ror r0
    10a0:	d5030305 	strle	r0, [r3, #-773]	; 0xfffffcfb
		for_all_tasks (i) {
    10a4:	41052002 	tstmi	r5, r2
	__pi_mintk = znew + min;
    10a8:	061d0558 			; <UNDEFINED> instruction: 0x061d0558
    10ac:	010e051d 	tsteq	lr, sp, lsl r5
			if (!twaiting (i))
    10b0:	13130305 	tstne	r3, #335544320	; 0x14000000
    10b4:	29050404 	stmdbcs	r5, {r2, sl}
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10b8:	017da703 	cmneq	sp, r3, lsl #14
    10bc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    10c0:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    10c4:	06030501 	streq	r0, [r3], -r1, lsl #10
    10c8:	2002d503 	andcs	sp, r2, r3, lsl #10
    10cc:	01064105 	tsteq	r6, r5, lsl #2
    10d0:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
    10d4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    10d8:	03041802 	movweq	r1, #18434	; 0x4802
    10dc:	ec030305 	stc	3, cr0, [r3], {5}
    10e0:	01040178 	tsteq	r4, r8, ror r1
    10e4:	03060105 	movweq	r0, #24837	; 0x6105
				wakeuptm (i);
    10e8:	02200795 	eoreq	r0, r0, #39059456	; 0x2540000
    10ec:	01010008 	tsteq	r1, r8
		for_all_tasks (i) {
    10f0:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
				d = i->Timer - znew;
    10f4:	0009a402 	andeq	sl, r9, r2, lsl #8
    10f8:	07ec0300 	strbeq	r0, [ip, r0, lsl #6]!
    10fc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		if ((word)(__pi_mintk - znew) < min) 
    1100:	03041413 	movweq	r1, #17427	; 0x4413
    1104:	eb030305 	bl	c1d20 <__ccfg+0xa1d78>
    1108:	01040178 	tsteq	r4, r8, ror r1
	__pi_old = znew;
    110c:	03062105 	movweq	r2, #24837	; 0x6105
}
    1110:	04010790 	streq	r0, [r1], #-1936	; 0xfffff870
	TCI_RUN_DELAY_TIMER;
    1114:	03030503 	movweq	r0, #13571	; 0x3503
}
    1118:	042078f0 	strteq	r7, [r0], #-2288	; 0xfffff710
    111c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1120:	20079603 	andcs	r9, r7, r3, lsl #12
    1124:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1128:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
void proceed (word state) {
    112c:	03330504 	teqeq	r3, #4, 10	; 0x1000000
	prcdstate (__pi_curr, state);
    1130:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
    1134:	03080501 	movweq	r0, #34049	; 0x8501
	release;
    1138:	042002e6 	strteq	r0, [r0], #-742	; 0xfffffd1a
    113c:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
void __pi_wait (aword event, word state) {
    1140:	04207d9a 	strteq	r7, [r0], #-3482	; 0xfffff266
	sint j = nevents (__pi_curr);
    1144:	03030501 	movweq	r0, #13569	; 0x3501
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	062002e8 	strteq	r0, [r0], -r8, ror #5
    114c:	0608051e 			; <UNDEFINED> instruction: 0x0608051e
    1150:	1f1e0501 	svcne	0x001e0501
		syserror (ENEVENTS, "sw");
    1154:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1158:	042f0603 	strteq	r0, [pc], #-1539	; 1160 <__pi_wait+0x20>
	setestate (__pi_curr->Events [j], state, event);
    115c:	03290504 			; <UNDEFINED> instruction: 0x03290504
	incwait (__pi_curr);
    1160:	05017d94 	streq	r7, [r1, #-3476]	; 0xfffff26c
	setestate (__pi_curr->Events [j], state, event);
    1164:	33051705 	movwcc	r1, #22277	; 0x5705
}
    1168:	01040106 	tsteq	r4, r6, lsl #2
    116c:	e8030305 	stmda	r3, {r0, r2, r8, r9}
    1170:	02052e02 	andeq	r2, r5, #2, 28
void __pi_trigger (aword event) {
    1174:	05040447 	streq	r0, [r4, #-1095]	; 0xfffffbb9
	for_all_tasks (i) {
    1178:	7d9b032d 	ldcvc	3, cr0, [fp, #180]	; 0xb4
		for (j = 0; j < nevents (i); j++) {
    117c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1180:	e8030603 	stmda	r3, {r0, r1, r9, sl}
    1184:	41052002 	tstmi	r5, r2
    1188:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
			if (i->Events [j] . Event == event) {
    118c:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
    1190:	06020501 	streq	r0, [r2], -r1, lsl #10
    1194:	04260601 	strteq	r0, [r6], #-1537	; 0xfffff9ff
				wakeupev (i, j);
    1198:	03030503 	movweq	r0, #13571	; 0x3503
    119c:	040178d9 	streq	r7, [r1], #-2265	; 0xfffff727
	for_all_tasks (i) {
    11a0:	06010501 	streq	r0, [r1], -r1, lsl #10
}
    11a4:	2007a803 	andcs	sl, r7, r3, lsl #16
aword __pi_join (aword pid, word st) {
    11a8:	01000802 	tsteq	r0, r2, lsl #16
	for_all_tasks (i) {
    11ac:	00180501 	andseq	r0, r8, r1, lsl #10
    11b0:	09e00205 	stmibeq	r0!, {r0, r2, r9}^
	return 0;
    11b4:	c5030000 	strgt	r0, [r3, #-0]
		if ((aword)i == pid) {
    11b8:	07040107 	streq	r0, [r4, -r7, lsl #2]
			__pi_wait (pid, st);
    11bc:	bb030105 	bllt	c15d8 <__ccfg+0xa1630>
}
    11c0:	01040178 	tsteq	r4, r8, ror r1
	for_all_tasks (i) {
    11c4:	03061805 	movweq	r1, #26629	; 0x6805
    11c8:	040107c5 	streq	r0, [r1], #-1989	; 0xfffff83b
void delay (word d, word state) {
    11cc:	03050507 	movweq	r0, #21767	; 0x5507
	settstate (__pi_curr, state);
    11d0:	052078bb 	streq	r7, [r0, #-2235]!	; 0xfffff745
    11d4:	02052e04 	andeq	r2, r5, #4, 28	; 0x40
    11d8:	013d3d06 	teqeq	sp, r6, lsl #26
    11dc:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
	update_n_wake (d, YES);
    11e0:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
    11e4:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
	__pi_curr->Timer = __pi_old + d;
    11e8:	04580113 	ldrbeq	r0, [r8], #-275	; 0xfffffeed
    11ec:	0f010508 	svceq	0x00010508
	inctimer (__pi_curr);
    11f0:	01060505 	tsteq	r6, r5, lsl #10
    11f4:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
    11f8:	013d0602 	teqeq	sp, r2, lsl #12
}
    11fc:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    1200:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
	if (fun == NULL)
    1204:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
		return (int) __pi_curr;
    1208:	58012f13 	stmdapl	r1, {r0, r1, r4, r8, r9, sl, fp, sp}
    120c:	01050104 	tsteq	r5, r4, lsl #2
	for_all_tasks (i)
    1210:	07d00306 	ldrbeq	r0, [r0, r6, lsl #6]
}
    1214:	000b0201 	andeq	r0, fp, r1, lsl #4
		if (i->code == fun)
    1218:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
	for_all_tasks (i)
    121c:	84020500 	strhi	r0, [r2], #-1280	; 0xfffffb00
    1220:	0300000a 	movweq	r0, #10
    1224:	05010880 	streq	r0, [r1, #-2176]	; 0xfffff780
int __pi_strlen (const char *s) {
    1228:	15051402 	strne	r1, [r5, #-1026]	; 0xfffffbfe
	for (i = 0; *(s+i) != '\0'; i++);
    122c:	02051006 	andeq	r1, r5, #6
}
    1230:	3e061e32 	mcrcc	14, 0, r1, cr6, cr2, {1}
	for (i = 0; *(s+i) != '\0'; i++);
    1234:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
	while (n--)
    1238:	03050509 	movweq	r0, #21769	; 0x5509
    123c:	05017ca7 	streq	r7, [r1, #-3239]	; 0xfffff359
		*dest++ = *src++;
    1240:	04010631 	streq	r0, [r1], #-1585	; 0xfffff9cf
    1244:	030b0501 	movweq	r0, #46337	; 0xb501
    1248:	04207dc5 	strteq	r7, [r0], #-3525	; 0xfffff23b
	while (n--)
    124c:	03310509 	teqeq	r1, #37748736	; 0x2400000
}
    1250:	042002bb 	strteq	r0, [r0], #-699	; 0xfffffd45
		*dest++ = c;
    1254:	03320501 	teqeq	r2, #4194304	; 0x400000
void adddevfunc (devreqfun_t rf, int loc) {
    1258:	042e7dc8 	strteq	r7, [lr], #-3528	; 0xfffff238
		syserror (EREQPAR, "addv");
    125c:	03050504 	movweq	r0, #21764	; 0x5504
		syserror (ERESOURCE, "addv");
    1260:	052e029b 	streq	r0, [lr, #-667]!	; 0xfffffd65
	if (ioreq [loc] != NULL)
    1264:	7ecc032d 	cdpvc	3, 12, cr0, cr12, cr13, {1}
    1268:	2e4a032e 	cdpcs	3, 4, cr0, cr10, cr14, {1}
		syserror (ERESOURCE, "addv");
    126c:	31050904 	tstcc	r5, r4, lsl #18
	ioreq [loc] = rf;
    1270:	2e028703 	cdpcs	7, 0, cr8, cr2, cr3, {0}
}
    1274:	02050104 	andeq	r0, r5, #4, 2
    1278:	03dc0306 	bicseq	r0, ip, #402653184	; 0x18000000
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	79e70320 	stmibvc	r7!, {r5, r8, r9}^
    1280:	07051401 	streq	r1, [r5, -r1, lsl #8]
    1284:	01120501 	tsteq	r2, r1, lsl #10
    1288:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    1290:	07052c3d 	smladxeq	r5, sp, ip, r2
    1294:	06030522 	streq	r0, [r3], -r2, lsr #10
		syserror (ENODEVICE, "io");
    1298:	0632052f 	ldrteq	r0, [r2], -pc, lsr #10
    129c:	2e210558 	mcrcs	5, 1, r0, cr1, cr8, {2}
	if (len == 0)
    12a0:	2f060305 	svccs	0x00060305
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	01060605 	tsteq	r6, r5, lsl #12
    12a8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
	if (ret >= 0)
    12ac:	29050404 	stmdbcs	r5, {r2, sl}
	if (ret == -1) {
    12b0:	01029103 	tsteq	r2, r3, lsl #2
    12b4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
		if (retry == WNONE)
    12b8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
		iowait (dev, operation, retry);
    12bc:	01043c06 	tsteq	r4, r6, lsl #24
    12c0:	03060305 	movweq	r0, #25349	; 0x6305
    12c4:	05207de9 	streq	r7, [r0, #-3561]!	; 0xfffff217
			release;
    12c8:	052e0606 	streq	r0, [lr, #-1542]!	; 0xfffff9fa
	if (ret == -2) {
    12cc:	04210604 	strteq	r0, [r1], #-1540	; 0xfffff9fc
		if (retry != WNONE) {
    12d0:	03290504 			; <UNDEFINED> instruction: 0x03290504
    12d4:	05050127 	streq	r0, [r5, #-295]	; 0xfffffed9
			iowait (dev, operation, retry);
    12d8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    12dc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			(ioreq [dev]) (NONE, buf, len);
    12e0:	56030604 	strpl	r0, [r3], -r4, lsl #12
    12e4:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
    12e8:	00db0329 	sbcseq	r0, fp, r9, lsr #6
		(ioreq [dev]) (NONE, buf, len);
    12ec:	17050501 	strne	r0, [r5, -r1, lsl #10]
    12f0:	01062d05 	tsteq	r6, r5, lsl #26
    12f4:	3c050104 	stfccs	f0, [r5], {4}
}
    12f8:	7f960306 	svcvc	0x00960306
	if (retry != WNONE) {
    12fc:	0112052e 	tsteq	r2, lr, lsr #10
		delay (-ret - 2, retry);
    1300:	01060205 	tsteq	r6, r5, lsl #4
    1304:	069a0306 	ldreq	r0, [sl], r6, lsl #6
    1308:	0401012e 	streq	r0, [r1], #-302	; 0xfffffed2
    130c:	03290504 			; <UNDEFINED> instruction: 0x03290504
		release;
    1310:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
    1314:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1318:	01040106 	tsteq	r4, r6, lsl #2
    131c:	e6030205 	str	r0, [r3], -r5, lsl #4
    1320:	04043c05 	streq	r3, [r4], #-3077	; 0xfffff3fb
    1324:	9a032d05 	bls	cc740 <__ccfg+0xac798>
    1328:	0104207a 	tsteq	r4, sl, ror r0
		syserror (ERESOURCE, "mal1");
    132c:	03060205 	movweq	r0, #25093	; 0x6205
    1330:	042005e6 	strteq	r0, [r0], #-1510	; 0xfffffa1a
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1334:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1338:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	m_size (mpools [0]) = mlen - m_hdrlen;
    1340:	01040106 	tsteq	r4, r6, lsl #2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1344:	03060205 	movweq	r0, #25093	; 0x6205
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1348:	012005e6 	smulwteq	r0, r6, r5
    134c:	01010101 	tsteq	r1, r1, lsl #2
}
    1350:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
    1354:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1358:	7acb0329 	bvc	ff2c2004 <_estack+0xdf2bd004>
    135c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1360:	01062d05 	tsteq	r6, r5, lsl #26
    1364:	02050104 	andeq	r0, r5, #4, 2
void __pi_free (aword *ch) {
    1368:	2005b003 	andcs	fp, r5, r3
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    136c:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    1370:	207ad003 	rsbscs	sp, sl, r3
		syserror (EMALLOC, "malg");
    1374:	02050104 	andeq	r0, r5, #4, 2
    1378:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
	mcfree [MA_NP] += m_size (ch);
    137c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
		m_size (ch) ^= MALLOC_UMASK;
    1380:	7acb0329 	bvc	ff2c202c <_estack+0xdf2bd02c>
    1384:	17050501 	strne	r0, [r5, -r1, lsl #10]
	mcfree [MA_NP] += m_size (ch);
    1388:	01062d05 	tsteq	r6, r5, lsl #26
	QFREE;
    138c:	02050104 	andeq	r0, r5, #4, 2
	if (mevent [MA_NP] . nwait) {
    1390:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
    1394:	01010120 	tsteq	r1, r0, lsr #2
		trigger ((aword)(&(mevent [MA_NP])));
    1398:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
		mevent [MA_NP] . nwait --;
    139c:	10030623 	andne	r0, r3, r3, lsr #12
}
    13a0:	03020501 	movweq	r0, #9473	; 0x2501
    13a4:	58062070 	stmdapl	r6, {r4, r5, r6, sp}
    13a8:	0d032e01 	stceq	14, cr2, [r3, #-4]
    13ac:	050a0401 	streq	r0, [sl, #-1025]	; 0xfffffbff
void kill (aword pid) {
    13b0:	7ecd0305 	cdpvc	3, 12, cr0, cr13, cr5, {0}
		pid = (aword) __pi_curr;
    13b4:	062f0501 	strteq	r0, [pc], -r1, lsl #10
	j = NULL;
    13b8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	for_all_tasks (i) {
    13bc:	01ba0327 			; <UNDEFINED> instruction: 0x01ba0327
	syserror (EREQPAR, "kpi");
    13c0:	050a0420 	streq	r0, [sl, #-1056]	; 0xfffffbe0
    13c4:	7ec6032f 	cdpvc	3, 12, cr0, cr6, cr15, {1}
		if ((aword)i == pid) {
    13c8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    13cc:	b5030602 	strlt	r0, [r3, #-1538]	; 0xfffff9fe
				__PCB = i->Next;
    13d0:	23052001 	movwcs	r2, #20481	; 0x5001
			killev (i);
    13d4:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
			ufree (i);
    13d8:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
			if (i == __pi_curr)
    13dc:	20740323 	rsbscs	r0, r4, r3, lsr #6
    13e0:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
				release;
    13e4:	01062705 	tsteq	r6, r5, lsl #14
				j->Next = i->Next;
    13e8:	05280205 	streq	r0, [r8, #-517]!	; 0xfffffdfb
    13ec:	20780327 	rsbscs	r0, r8, r7, lsr #6
    13f0:	28060205 	stmdacs	r6, {r0, r2, r9}
}
    13f4:	0a03313f 	beq	cd8f8 <__ccfg+0xad950>
    13f8:	c003404a 	andgt	r4, r3, sl, asr #32
    13fc:	5959017d 	ldmdbpl	r9, {r0, r2, r3, r4, r5, r6, r8}^
	if (size < 8)
    1400:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
		_size = 2;
    1404:	7eae0305 	cdpvc	3, 10, cr0, cr14, cr5, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1408:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		_size = (((aword)size) + 3) >> 2;
    140c:	d403060d 	strle	r0, [r3], #-1549	; 0xfffff9f3
		if (m_magic (chunk) != MALLOC_MAGIC)
    1410:	09040101 	stmdbeq	r4, {r0, r8}
		_size = (((aword)size) + 3) >> 2;
    1414:	ac033105 	stfges	f3, [r3], {5}
		if (mevent [MA_NP] . nfail != 255)
    1418:	01042e7e 	tsteq	r4, lr, ror lr
    141c:	03060205 	movweq	r0, #25093	; 0x6205
			mevent [MA_NP] . nfail ++;
    1420:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
		mnfree [MA_NP] = 0;
    1424:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1428:	03220602 			; <UNDEFINED> instruction: 0x03220602
		if (m_magic (chunk) != MALLOC_MAGIC)
    142c:	012e02c7 	smlawteq	lr, r7, r2, r0
    1430:	05152e2e 	ldreq	r2, [r5, #-3630]	; 0xfffff1d2
			syserror (EMALLOC, "malc");
    1434:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1438:	03052e05 	movweq	r2, #24069	; 0x5e05
		if (m_size (chunk) >= _size)
    143c:	0b043006 	bleq	10d45c <__ccfg+0xed4b4>
    1440:	c3030505 	movwgt	r0, #13573	; 0x3505
		chunk = m_nextp (chunk)) {
    1444:	0c040179 	stfeqs	f0, [r4], {121}	; 0x79
		m_setnextp (cc, m_nextp (chunk));
    1448:	05015e03 	streq	r5, [r1, #-3587]	; 0xfffff1fd
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144c:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
    1450:	0605050b 	streq	r0, [r5], -fp, lsl #10
			m_size (chunk) = _size;
    1454:	052e2303 	streq	r2, [lr, #-771]!	; 0xfffffcfd
			cc = chunk + _size + m_hdrlen;
    1458:	05010634 	streq	r0, [r1, #-1588]	; 0xfffff9cc
    145c:	044b0605 	strbeq	r0, [fp], #-1541	; 0xfffff9fb
			m_size (cc) = waste - m_hdrlen;
    1460:	03150501 	tsteq	r5, #4194304	; 0x400000
			QFREE;
    1464:	054a06d5 	strbeq	r0, [sl, #-1749]	; 0xfffff92b
		mevent [MA_NP] . nfail = 0;
    1468:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
		mcfree [MA_NP] -= m_size (chunk);
    146c:	3a150513 	bcc	5428c0 <__ccfg+0x522918>
    1470:	03190205 	tsteq	r9, #1342177280	; 0x50000000
    1474:	04017ecb 	streq	r7, [r1], #-3787	; 0xfffff135
    1478:	03240506 			; <UNDEFINED> instruction: 0x03240506
		m_size (chunk) |= MALLOC_UMASK;
    147c:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1480:	23051705 	movwcs	r1, #22277	; 0x5705
		m_size (chunk) |= MALLOC_UMASK;
    1484:	01040106 	tsteq	r4, r6, lsl #2
			mnfree [MA_NP] = mcfree [MA_NP];
    1488:	dd030205 	sfmle	f0, 4, [r3, #-20]	; 0xffffffec
}
    148c:	06042002 	streq	r2, [r4], -r2
    1490:	a3032305 	movwge	r2, #13061	; 0x3305
    1494:	0104207d 	tsteq	r4, sp, ror r0
    1498:	03060205 	movweq	r0, #25093	; 0x6205
    149c:	4e4a02dd 	mcrmi	2, 2, r0, cr10, cr13, {6}
    14a0:	13060105 	movwne	r0, #24837	; 0x6105
    14a4:	052d0205 	streq	r0, [sp, #-517]!	; 0xfffffdfb
aword __pi_fork (fsmcode func, aword data) {
    14a8:	5f030603 	svcpl	0x00030603
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14ac:	0541412e 	strbeq	r4, [r1, #-302]	; 0xfffffed2
    14b0:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
    14b4:	2f021f03 	svccs	0x00021f03
		if ((j = __PCB) == NULL)
    14b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	i->Next = NULL;
    14bc:	0205001f 	andeq	r0, r5, #31
	i->data = data;
    14c0:	00000c3c 	andeq	r0, r0, ip, lsr ip
		if ((j = __PCB) == NULL)
    14c4:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
}
    14c8:	16170205 	ldrne	r0, [r7], -r5, lsl #4
			for (; j->Next != NULL; j = j->Next);
    14cc:	01062c05 	tsteq	r6, r5, lsl #24
    14d0:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
	return (aword) i;
    14d4:	1505202c 	strne	r2, [r5, #-44]	; 0xffffffd4
    14d8:	21120520 	tstcs	r2, r0, lsr #10
	if (mevent [MA_NP] . nwait != 255)
    14dc:	4a1f1505 	bmi	7c68f8 <__ccfg+0x7a6950>
    14e0:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    14e4:	01010003 	tsteq	r1, r3
		mevent [MA_NP] . nwait ++;
    14e8:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
	wait ((aword)(&(mevent [MA_NP])), state);
    14ec:	00000002 	andeq	r0, r0, r2
    14f0:	0adb0300 	beq	ff6c20f8 <_estack+0xdf6bd0f8>
void diag (const char *mess, ...) {
    14f4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    14f8:	010f0514 	tsteq	pc, r4, lsl r5	; <UNPREDICTABLE>
    14fc:	0e061c05 	cdpeq	12, 0, cr1, cr6, cr5, {0}
	diag_disable_int (a, is);
    1500:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
    1504:	06052007 	streq	r2, [r5], -r7
    1508:	06030558 			; <UNDEFINED> instruction: 0x06030558
				d = (bc == 16) ? 10000 : 1000000000;
    150c:	0606052e 	streq	r0, [r6], -lr, lsr #10
	diag_disable_int (a, is);
    1510:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
	while (*mess != '\0') {
    1514:	010f052d 	tsteq	pc, sp, lsr #10
	dgout ('\r');
    1518:	20060205 	andcs	r0, r6, r5, lsl #4
	dgout ('\n');
    151c:	01054d06 	tsteq	r5, r6, lsl #26
    1520:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
    1524:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	diag_wait (a);
    1528:	02050031 	andeq	r0, r5, #49	; 0x31
	diag_enable_int (a, is);
    152c:	00000c60 	andeq	r0, r0, r0, ror #24
    1530:	010ae703 	tsteq	sl, r3, lsl #14
}
    1534:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    1538:	03030503 	movweq	r0, #13571	; 0x3503
    153c:	040177b2 	streq	r7, [r1], #-1970	; 0xfffff84e
		if (*mess == '%') {
    1540:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    1544:	0108cc03 	tsteq	r8, r3, lsl #24
			if (*mess == 'l') {
    1548:	03050304 	movweq	r0, #21252	; 0x5304
    154c:	3c77b403 	cfldrdcc	mvd11, [r7], #-12
				mess++;
    1550:	31050104 	tstcc	r5, r4, lsl #2
				val = va_arg (ap, lword);
    1554:	2008cc03 	andcs	ip, r8, r3, lsl #24
				bc = 32;
    1558:	03050304 	movweq	r0, #21252	; 0x5304
				bc = 16;
    155c:	2077b403 	rsbscs	fp, r7, r3, lsl #8
			switch (*mess) {
    1560:	02050104 	andeq	r0, r5, #4, 2
    1564:	08d00306 	ldmeq	r0, {r1, r2, r8, r9}^
    1568:	0204012e 	andeq	r0, r4, #-2147483637	; 0x8000000b
				dgout ('%');
    156c:	03060505 	movweq	r0, #25861	; 0x6505
    1570:	046676dd 	strbteq	r7, [r6], #-1757	; 0xfffff923
				dgout (*mess);
    1574:	06020501 	streq	r0, [r2], -r1, lsl #10
    1578:	2009a303 	andcs	sl, r9, r3, lsl #6
			switch (*mess) {
    157c:	9b030d04 	blls	c4994 <__ccfg+0xa49ec>
					v = __pi_hex_enc_table [
    1580:	01010175 	tsteq	r1, r5, ror r1
					i += 4;
    1584:	044a5b19 	strbeq	r5, [sl], #-2841	; 0xfffff4e7
					(val >> (bc - i)) & 0xf];
    1588:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    158c:	2e099d03 	cdpcs	13, 0, cr9, cr9, cr3, {0}
					dgout (v);
    1590:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1594:	76f90306 	ldrbtvc	r0, [r9], r6, lsl #6
				while (i < bc) {
    1598:	01010120 	tsteq	r1, r0, lsr #2
			mess++;
    159c:	03040101 	movweq	r0, #16641	; 0x4101
					d /= 10;
    15a0:	36030305 	strcc	r0, [r3], -r5, lsl #6
				if ((val >> (bc - 1)) & 1) {
    15a4:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
    15a8:	204a0302 	subcs	r0, sl, r2, lsl #6
					dgout ('-');
    15ac:	03010482 	movweq	r0, #5250	; 0x1482
    15b0:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
						val |= 0xffff0000;
    15b4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    15b8:	054c0602 	strbeq	r0, [ip, #-1538]	; 0xfffff9fe
    15bc:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
				d = (bc == 16) ? 10000 : 1000000000;
    15c0:	15052002 	strne	r2, [r5, #-2]
    15c4:	20020520 	andcs	r0, r2, r0, lsr #10
    15c8:	6a060405 	bvs	1825e4 <__ccfg+0x16263c>
					v = (word) (val / d);
    15cc:	050d0421 	streq	r0, [sp, #-1057]	; 0xfffffbdf
					if (v || d == 1) break;
    15d0:	778e0302 	strvc	r0, [lr, r2, lsl #6]
    15d4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
					d /= 10;
    15d8:	012b0303 			; <UNDEFINED> instruction: 0x012b0303
				d = (bc == 16) ? 10000 : 1000000000;
    15dc:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
					dgout (v + '0');
    15e0:	20205503 	eorcs	r5, r0, r3, lsl #10
    15e4:	03010420 	movweq	r0, #5152	; 0x1420
    15e8:	04200ac5 	strteq	r0, [r0], #-2757	; 0xfffff53b
					d /= 10;
    15ec:	0303050d 	movweq	r0, #13581	; 0x350d
					val = val - (v * d);
    15f0:	054a75a6 	strbeq	r7, [sl, #-1446]	; 0xfffffa5a
					if (d == 0) break;
    15f4:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
					v = (word) (val / d);
    15f8:	23052006 	movwcs	r2, #20486	; 0x5006
    15fc:	201f0520 	andscs	r0, pc, r0, lsr #10
				if (bc == 16)
    1600:	30060405 	andcc	r0, r6, r5, lsl #8
				d = (bc == 16) ? 10000 : 1000000000;
    1604:	01060e05 	tsteq	r6, r5, lsl #28
					val &= 0xffff;
    1608:	2f060405 	svccs	0x00060405
					dgout (*s);
    160c:	041c0205 	ldreq	r0, [ip], #-517	; 0xfffffdfb
					s++;
    1610:	03040501 	movweq	r0, #17665	; 0x4501
				while (*s != '\0') {
    1614:	052e098f 	streq	r0, [lr, #-2447]!	; 0xfffff671
    1618:	0501062a 	streq	r0, [r1, #-1578]	; 0xfffff9d6
			dgout (*mess++);
    161c:	2a052704 	bcs	14b234 <__ccfg+0x12b28c>
    1620:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    1624:	044e0604 	strbeq	r0, [lr], #-1540	; 0xfffff9fc
    1628:	7fb20309 	svcvc	0x00b20309
    162c:	06290501 	strteq	r0, [r9], -r1, lsl #10
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1630:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1634:	d1030604 	tstle	r3, r4, lsl #12
    1638:	044d6600 	strbeq	r6, [sp], #-1536	; 0xfffffa00
    163c:	03050502 	movweq	r0, #21762	; 0x5502
	^ entropy
    1640:	0401789f 	streq	r7, [r1], #-2207	; 0xfffff761
}
    1644:	03040501 	movweq	r0, #17665	; 0x4501
    1648:	052007e5 	streq	r0, [r0, #-2021]!	; 0xfffff81b
    164c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1650:	214b0604 	cmpcs	fp, r4, lsl #12
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1654:	01061a05 	tsteq	r6, r5, lsl #20
	word cs = size + hblenb;
    1658:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    1660:	01789603 	cmneq	r8, r3, lsl #12
	p -> length = size;
    1664:	21060105 	tstcs	r6, r5, lsl #2
}
    1668:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (p->attributes.b.queued) {
    166c:	07f10306 	ldrbeq	r0, [r1, r6, lsl #6]!
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1670:	050c0420 	streq	r0, [ip, #-1056]	; 0xfffffbe0
    1674:	78a00305 	stmiavc	r0!, {r0, r2, r8, r9}
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1678:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
		p->attributes.b.queued = 0;
    167c:	d4030631 	strle	r0, [r3], #-1585	; 0xfffff9cf
    1680:	0c040102 	stfeqs	f0, [r4], {2}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1684:	ac032e05 	stcge	14, cr2, [r3], {5}
	deq (p);	// Remove from queue
    1688:	0e042e7d 	mcreq	14, 0, r2, cr4, cr13, {3}
}
    168c:	88035205 	stmdahi	r3, {r0, r2, r9, ip, lr}
	tfree ((address)p);
    1690:	0c042e02 	stceq	14, cr2, [r4], {2}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1694:	f8032e05 			; <UNDEFINED> instruction: 0xf8032e05
    1698:	01042e7d 	tsteq	r4, sp, ror lr
    169c:	03060405 	movweq	r0, #25605	; 0x6405
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a0:	042007e5 	strteq	r0, [r0], #-2021	; 0xfffff81b
    16a4:	0331050e 	teqeq	r1, #58720256	; 0x3800000
	if (q_empty (q))
    16a8:	05017aa0 	streq	r7, [r1, #-2720]	; 0xfffff560
    16ac:	52051505 	andpl	r1, r5, #20971520	; 0x1400000
		trigger (q);
    16b0:	01040106 	tsteq	r4, r6, lsl #2
	if (p->attributes.b.urgent) {
    16b4:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
		p->u.bqueue.next = q->next;
    16b8:	0e042005 	cdpeq	0, 0, cr2, cr4, cr5, {0}
		p->u.bqueue.prev = q;
    16bc:	9b035205 	blls	d5ed8 <__ccfg+0xb5f30>
		q->next->prev = (qitem_t*) p;
    16c0:	01042e7a 	tsteq	r4, sl, ror lr
	p->attributes.b.queued = 1;
    16c4:	03060405 	movweq	r0, #25605	; 0x6405
    16c8:	042e05e0 	strteq	r0, [lr], #-1504	; 0xfffffa20
}
    16cc:	03050502 	movweq	r0, #21762	; 0x5502
		p->u.bqueue.prev = q->prev;
    16d0:	04017886 	streq	r7, [r1], #-2182	; 0xfffff77a
		q->prev->next = (qitem_t*) p;
    16d4:	03040501 	movweq	r0, #17665	; 0x4501
		q->prev = (qitem_t*) p;
    16d8:	042007fc 	strteq	r0, [r0], #-2044	; 0xfffff804
    16dc:	03050509 	movweq	r0, #21769	; 0x5509
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e0:	05017aea 	streq	r7, [r1, #-2794]	; 0xfffff516
	deq (p);	// Soft dequeue, timer and hook left intact
    16e4:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
	switch (dv) {
    16e8:	04b60329 	ldrteq	r0, [r6], #809	; 0x329
    16ec:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    16f0:	042e7bca 	strteq	r7, [lr], #-3018	; 0xfffff436
    16f4:	06040501 	streq	r0, [r4], -r1, lsl #10
			p->attributes.b.urgent = 1;
    16f8:	2e059903 	vmlacs.f16	s18, s10, s6	; <UNPREDICTABLE>
    16fc:	01062305 	tsteq	r6, r5, lsl #6
			verify_ses (p, "dispose ses");
    1700:	06200405 	strteq	r0, [r0], -r5, lsl #8
    1704:	0509046a 	streq	r0, [r9, #-1130]	; 0xfffffb96
    1708:	799f0305 	ldmibvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
    170c:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    1710:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			verify_phy (p, "dispose phy");
    1714:	06ed0304 	strbteq	r0, [sp], r4, lsl #6
    1718:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
}
    171c:	7993033f 	ldmibvc	r3, {r0, r1, r2, r3, r4, r5, r8, r9}
			enq (oqueues [p->attributes.b.phys], p);
    1720:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			p->attributes.b.urgent = 1;
    1724:	ea030604 	b	c2f3c <__ccfg+0xa2f94>
    1728:	09042e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, sp}
			verify_phy (p, "dispose phy");
    172c:	017f9003 	cmneq	pc, r3
    1730:	01062905 	tsteq	r6, r5, lsl #18
    1734:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1738:	2e00f303 	cdpcs	3, 0, cr15, cr0, cr3, {0}
    173c:	29050904 	stmdbcs	r5, {r2, r8, fp}
    1740:	207f8d03 	rsbscs	r8, pc, r3, lsl #26
			enq (oqueues [p->attributes.b.phys], p);
    1744:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1748:	00f30306 	rscseq	r0, r3, r6, lsl #6
}
    174c:	04404d4a 	strbeq	r4, [r0], #-3402	; 0xfffff2b6
			rlp (p);
    1750:	03050502 	movweq	r0, #21762	; 0x5502
}
    1754:	040177ea 	streq	r7, [r1], #-2026	; 0xfffff816
    1758:	03040501 	movweq	r0, #17665	; 0x4501
    175c:	05200899 	streq	r0, [r0, #-2201]!	; 0xfffff767
    1760:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1764:	214b0604 	cmpcs	fp, r4, lsl #12
    1768:	01061a05 	tsteq	r6, r5, lsl #20
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    176c:	05230405 	streq	r0, [r3, #-1029]!	; 0xfffffbfb
	if (b->attributes.b.outgoing) {
    1770:	04051d1a 	streq	r1, [r5], #-3354	; 0xfffff2e6
	b = header (p);
    1774:	04593f06 	ldrbeq	r3, [r9], #-3846	; 0xfffff0fa
	if (b->attributes.b.outgoing) {
    1778:	7eee0309 	cdpvc	3, 14, cr0, cr14, cr9, {0}
		verify_ses (b, "tcv02");
    177c:	06290501 	strteq	r0, [r9], -r1, lsl #10
    1780:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    1784:	7bdb030d 	blvc	ff6c23c0 <_estack+0xdf6bd3c0>
    1788:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
    178c:	04a50329 	strteq	r0, [r5], #809	; 0x329
		verify_plg (b, tcv_out, "tcv03");
    1790:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1794:	97030604 	strls	r0, [r3, -r4, lsl #12]
    1798:	0e044a01 	vmlaeq.f32	s8, s8, s2
    179c:	f3033105 	vrhadd.u8	d3, d3, d5
    17a0:	05050179 	streq	r0, [r5, #-377]	; 0xfffffe87
    17a4:	06520515 			; <UNDEFINED> instruction: 0x06520515
    17a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    17ac:	8c03061a 	stchi	6, cr0, [r3], {26}
    17b0:	0a052e06 	beq	14cfd0 <__ccfg+0x12d028>
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b4:	050e0411 	streq	r0, [lr, #-1041]	; 0xfffffbef
}
    17b8:	7ac30305 	bvc	ff0c23d4 <_estack+0xdf0bd3d4>
		dispose (b, plugins [b->attributes.b.plugin] ->
    17bc:	060d0501 	streq	r0, [sp], -r1, lsl #10
		rlp (b);
    17c0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    17c4:	05bd030a 	ldreq	r0, [sp, #778]!	; 0x30a
		rlp (b);
    17c8:	06040520 	streq	r0, [r4], -r0, lsr #10
    17cc:	0b055932 	bleq	157c9c <__ccfg+0x137cf4>
    17d0:	1a050106 	bne	141bf0 <__ccfg+0x121c48>
    17d4:	0a052106 	beq	149bf4 <__ccfg+0x129c4c>
    17d8:	060b0511 			; <UNDEFINED> instruction: 0x060b0511
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17dc:	580a0501 	stmdapl	sl, {r0, r8, sl}
    17e0:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    17e4:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17e8:	017ab803 	cmneq	sl, r3, lsl #16
	va_start (ap, plid);
    17ec:	01063105 	tsteq	r6, r5, lsl #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f0:	bc033f05 	stclt	15, cr3, [r3], {5}
    17f4:	3105207e 	tstcc	r5, lr, ror r0
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17f8:	2001c403 	andcs	ip, r1, r3, lsl #8
    17fc:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1800:	05cb0306 	strbeq	r0, [fp, #774]	; 0x306
    1804:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
			syserror (ENODEVICE, "tcv04");
    1808:	78f10305 	ldmvc	r1!, {r0, r2, r8, r9}^
		syserror (EMALLOC, "tcv05");
    180c:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
	attp.b.outgoing = 1;
    1810:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1814:	92030604 	andls	r0, r3, #4, 12	; 0x400000
    1818:	0c042e07 	stceq	14, cr2, [r4], {7}
    181c:	f5030505 			; <UNDEFINED> instruction: 0xf5030505
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1820:	2e050177 	mcrcs	1, 0, r0, cr5, cr7, {3}
		if (descriptors [fd] == NULL)
    1824:	01040106 	tsteq	r4, r6, lsl #2
    1828:	03060405 	movweq	r0, #25605	; 0x6405
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    182c:	042e088e 	strteq	r0, [lr], #-2190	; 0xfffff772
		return ERROR;
    1830:	03050502 	movweq	r0, #21762	; 0x5502
}
    1834:	040177c9 	streq	r7, [r1], #-1993	; 0xfffff837
    1838:	03040501 	movweq	r0, #17665	; 0x4501
    183c:	032008ba 			; <UNDEFINED> instruction: 0x032008ba
	s->attpattern.b.session = fd;
    1840:	052f2e09 	streq	r2, [pc, #-3593]!	; a3f <GPIOIntHandler+0x5f>
    1844:	7db00302 	ldcvc	3, cr0, [r0, #8]!
	descriptors [fd] = s;
    1848:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
	q_init (&(s->rqueue));
    184c:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1850:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1854:	01062305 	tsteq	r6, r5, lsl #6
    1858:	01050104 	tsteq	r5, r4, lsl #2
    185c:	5801a803 	stmdapl	r1, {r0, r1, fp, sp, pc}
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1860:	03060405 	movweq	r0, #25605	; 0x6405
    1864:	5b2002f0 	blpl	80242c <__ccfg+0x7e2484>
    1868:	01062c05 	tsteq	r6, r5, lsl #24
	descriptors [fd] = s;
    186c:	05273205 	streq	r3, [r7, #-517]!	; 0xfffffdfb
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1870:	2079032c 	rsbscs	r0, r9, ip, lsr #6
    1874:	4c060405 	cfstrsmi	mvf0, [r6], {5}
	if (s == NULL)
    1878:	01062d05 	tsteq	r6, r5, lsl #26
		syserror (EMALLOC, "tcv05");
    187c:	5d060405 	cfstrspl	mvf0, [r6, #-20]	; 0xffffffec
    1880:	01063205 	tsteq	r6, r5, lsl #4
    1884:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    1888:	01063205 	tsteq	r6, r5, lsl #4
    188c:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
    1890:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    1894:	01778b03 	cmneq	r7, r3, lsl #22
    1898:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    189c:	2008f803 	andcs	pc, r8, r3, lsl #16
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a0:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
    18a4:	017a8803 	cmneq	sl, r3, lsl #16
    18a8:	01062d05 	tsteq	r6, r5, lsl #26
	plugins [ord] = pl;
    18ac:	31060505 	tstcc	r6, r5, lsl #10
	return 0;
    18b0:	01064d05 	tsteq	r6, r5, lsl #26
		return ERROR;
    18b4:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
}
    18b8:	01062e05 	tsteq	r6, r5, lsl #28
    18bc:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	verify_fds (fd, "tcv16");
    18c0:	05f70306 	ldrbeq	r0, [r7, #774]!	; 0x306
								Boolean urg) {
    18c4:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    18c8:	77850305 	strvc	r0, [r5, r5, lsl #6]
	verify_fds (fd, "tcv16");
    18cc:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    18d0:	e803060d 	stmda	r3, {r0, r2, r3, r9, sl}
    18d4:	01042002 	tsteq	r4, r2
	verify_pld (s, tcv_frm, "tcv17");
    18d8:	03063905 	movweq	r3, #26885	; 0x6905
    18dc:	05200696 	streq	r0, [r0, #-1686]!	; 0xfffff96a
    18e0:	0e04010a 	adfeqs	f0, f4, #2.0
    18e4:	ea030505 	b	c2d00 <__ccfg+0xa2d58>
    18e8:	0d050179 	stfeqs	f0, [r5, #-484]	; 0xfffffe1c
    18ec:	01040106 	tsteq	r4, r6, lsl #2
    18f0:	96030a05 	strls	r0, [r3], -r5, lsl #20
    18f4:	04052006 	streq	r2, [r5], #-6
	ptrs.head = (word) fd;
    18f8:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
	ptrs.tail = (word) urg;
    18fc:	ec030505 	cfstr32	mvfx0, [r3], {5}
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1900:	41050177 	tstmi	r5, r7, ror r1
    1904:	01040106 	tsteq	r4, r6, lsl #2
		if (state != WNONE) {
    1908:	97030405 	strls	r0, [r3, -r5, lsl #8]
    190c:	09042e08 	stmdbeq	r4, {r3, r9, sl, fp, sp}
}
    1910:	e9034105 	stmdb	r3, {r0, r2, r8, lr}
			when (eid, state);
    1914:	01042077 	tsteq	r4, r7, ror r0
    1918:	03060405 	movweq	r0, #25605	; 0x6405
			release;
    191c:	52200897 	eorpl	r0, r0, #9895936	; 0x970000
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1920:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    1924:	2075d103 	rsbscs	sp, r5, r3, lsl #2
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1928:	0101014a 	tsteq	r1, sl, asr #2
    192c:	03050304 	movweq	r0, #21252	; 0x5304
    1930:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
    1934:	0302050d 	movweq	r0, #9485	; 0x250d
    1938:	02162055 	andseq	r2, r6, #85	; 0x55
    193c:	01010037 	tsteq	r1, r7, lsr r0
		if (state != WNONE) {
    1940:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    1944:	000eb802 	andeq	fp, lr, r2, lsl #16
			tmwait (state);
    1948:	00e10300 	rsceq	r0, r1, r0, lsl #6
    194c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	b->attributes = s->attpattern;
    1950:	1e061205 	cdpne	2, 0, cr1, cr6, cr5, {0}
		b->attributes.b.urgent = 1;
    1954:	21220205 			; <UNDEFINED> instruction: 0x21220205
    1958:	2f21061f 	svccs	0x0021061f
	b->u.pointers.head = ptrs.head;
    195c:	08053f4b 	stmdaeq	r5, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
	b->u.pointers.tail = length;
    1960:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	return (address) (b + 1);
    1964:	08022f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, sp}
    1968:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    196c:	0205003a 	andeq	r0, r5, #58	; 0x3a
    1970:	00000000 	andeq	r0, r0, r0
    1974:	0100f103 	tsteq	r0, r3, lsl #2	; <UNPREDICTABLE>
    1978:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    197c:	0e063a05 	vmlaeq.f32	s6, s12, s10
    1980:	24060520 	strcs	r0, [r6], #-1312	; 0xfffffae0
    1984:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
	verify_fph (phy, "tcv23");
    1988:	03052405 	movweq	r2, #21509	; 0x5405
    198c:	06053f06 	streq	r3, [r5], -r6, lsl #30
    1990:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1994:	12053006 	andne	r3, r5, #6
}
    1998:	0b050106 	bleq	141db8 <__ccfg+0x121e10>
	return (physical [phy]) (opt, arg);
    199c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    19a0:	06090525 	streq	r0, [r9], -r5, lsr #10
    19a4:	050f0401 	streq	r0, [pc, #-1025]	; 15ab <diag+0xb7>
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19a8:	2015032f 	andscs	r0, r5, pc, lsr #6
	if (opt < 0) {
    19ac:	09050104 	stmdbeq	r5, {r2, r8}
		if (fd < 0)
    19b0:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
		if (opt == PHYSOPT_PLUGINFO) {
    19b4:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
			if (fd >= TCV_MAX_PLUGS)
    19b8:	0305050f 	movweq	r0, #21775	; 0x550f
			if ((p = plugins [fd]) == NULL)
    19bc:	2f050114 	svccs	0x00050114
    19c0:	01040106 	tsteq	r4, r6, lsl #2
}
    19c4:	7a030105 	bvc	c1de0 <__ccfg+0xa1e38>
		if (fd >= TCV_MAX_PHYS)
    19c8:	06040520 	streq	r0, [r4], -r0, lsr #10
		return physinfo [fd];
    19cc:	04206f03 	strteq	r6, [r0], #-3843	; 0xfffff0fd
    19d0:	0305050f 	movweq	r0, #21775	; 0x550f
	verify_fds (fd, "tcv22");
    19d4:	140100c3 	strne	r0, [r1], #-195	; 0xffffff3d
    19d8:	01061805 	tsteq	r6, r5, lsl #16
    19dc:	33060505 	movwcc	r0, #25861	; 0x6505
    19e0:	0b050104 	bleq	141df8 <__ccfg+0x121e50>
    19e4:	7fb60306 	svcvc	0x00b60306
}
    19e8:	06030501 	streq	r0, [r3], -r1, lsl #10
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19ec:	050f0434 	streq	r0, [pc, #-1076]	; 15c0 <diag+0xcc>
    19f0:	2f050e05 	svccs	0x00050e05
			return 0;
    19f4:	01040106 	tsteq	r4, r6, lsl #2
    19f8:	41060305 	tstmi	r6, r5, lsl #6
    19fc:	01060605 	tsteq	r6, r5, lsl #12
    1a00:	053f0405 	ldreq	r0, [pc, #-1029]!	; 1603 <diag+0x10f>
    1a04:	04052b06 	streq	r2, [r5], #-2822	; 0xfffff4fa
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a08:	052f2306 	streq	r2, [pc, #-774]!	; 170a <dispose+0x2a>
    1a0c:	13062203 	movwne	r2, #25091	; 0x6203
	if (dsp != TCV_DSP_PASS) {
    1a10:	051f0905 	ldreq	r0, [pc, #-2309]	; 1113 <update_n_wake+0xb3>
		if (ses == NONE)
    1a14:	2f210603 	svccs	0x00210603
			syserror (EREQPAR, "tcv26");
    1a18:	01000902 	tsteq	r0, r2, lsl #18
		verify_fds (ses, "tcv27");
    1a1c:	00110501 	andseq	r0, r1, r1, lsl #10
    1a20:	0ee80205 	cdpeq	2, 14, cr0, cr8, cr5, {0}
    1a24:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    1a28:	0305010a 	movweq	r0, #20746	; 0x510a
    1a2c:	0f051316 	svceq	0x00051316
		if ((p = apb (size)) != NULL) {
    1a30:	06110501 	ldreq	r0, [r1], -r1, lsl #10
    1a34:	2505200d 	strcs	r2, [r5, #-13]
		return NULL;
    1a38:	1f030526 	svcne	0x00030526
			p->attributes = descriptors [ses] -> attpattern;
    1a3c:	21060405 	tstcs	r6, r5, lsl #8
			dispose (p, dsp);
    1a40:	01062505 	tsteq	r6, r5, lsl #10
			p->attributes = descriptors [ses] -> attpattern;
    1a44:	2d063705 	stccs	7, cr3, [r6, #-20]	; 0xffffffec
			p->attributes.b.outgoing = 0;
    1a48:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
			dispose (p, dsp);
    1a4c:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
			return (address)(p + 1);
    1a50:	06320602 	ldrteq	r0, [r2], -r2, lsl #12
    1a54:	20790319 	rsbscs	r0, r9, r9, lsl r3
	if ((p = apb (size)) != NULL)
    1a58:	5b323106 	blpl	c8de78 <__ccfg+0xc6ded0>
    1a5c:	061c055b 			; <UNDEFINED> instruction: 0x061c055b
		return (address)(p + 1);
    1a60:	4a0c0501 	bmi	302e6c <__ccfg+0x2e2ec4>
    1a64:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    1a68:	02051d0c 	andeq	r1, r5, #12, 26	; 0x300
    1a6c:	043e2306 	ldrteq	r2, [lr], #-774	; 0xfffffcfa
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a70:	03030503 	movweq	r0, #13571	; 0x3503
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a74:	040175c5 	streq	r7, [r1], #-1477	; 0xfffffa3b
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a78:	03020501 	movweq	r0, #9473	; 0x2501
    1a7c:	02200abd 	eoreq	r0, r0, #774144	; 0xbd000
		syserror (EREQPAR, "tcv28");
    1a80:	0101000e 	tsteq	r1, lr
		syserror (EMALLOC, "tcv29");
    1a84:	00000ee0 	andeq	r0, r0, r0, ror #29
	physical [phy] = ps;
    1a88:	01900003 	orrseq	r0, r0, r3
	physinfo [phy] = info;
    1a8c:	01020000 	mrseq	r0, (UNDEF: 2)
    1a90:	000d0efb 	strdeq	r0, [sp], -fp
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a94:	01010101 	tsteq	r1, r1, lsl #2
    1a98:	01000000 	mrseq	r0, (UNDEF: 0)
    1a9c:	2f010000 	svccs	0x00010000
		syserror (EMALLOC, "tcv29");
    1aa0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1aa4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	q_init (q);
    1aa8:	2f6e6974 	svccs	0x006e6974
}
    1aac:	6b736544 	blvs	1cdafc4 <__ccfg+0x1cbb01c>
    1ab0:	2f706f74 	svccs	0x00706f74
    1ab4:	4f534c4f 	svcmi	0x00534c4f
    1ab8:	2f54454e 	svccs	0x0054454e
    1abc:	4f434950 	svcmi	0x00434950
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	verify_fph (phy, "tcv30");
    1ac4:	2f534f63 	svccs	0x00534f63
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    1acc:	2f006c65 	svccs	0x00006c65
	verify_fph (phy, "tcv30");
    1ad0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1ad4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1ad8:	2f6e6974 	svccs	0x006e6974
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1adc:	6b736544 	blvs	1cdaff4 <__ccfg+0x1cbb04c>
    1ae0:	2f706f74 	svccs	0x00706f74
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae4:	4f534c4f 	svcmi	0x00534c4f
    1ae8:	2f54454e 	svccs	0x0054454e
		if (plugins [plg] == NULL)
    1aec:	4f434950 	svcmi	0x00434950
    1af0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af4:	2f534f63 	svccs	0x00534f63
}
    1af8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    1afc:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b00:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    1b04:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    1b08:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b0c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1b10:	0062696c 	rsbeq	r6, r2, ip, ror #18
    1b14:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1b18:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1b1c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b20:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
	len -= (ap.head + ap.tail);
    1b24:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1b28:	61652d65 	cmnvs	r5, r5, ror #26
    1b2c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b30:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    1b34:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b38:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b3c:	6f682f00 	svcvs	0x00682f00
    1b40:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1994 <tcvp_control+0x18>
    1b44:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	return 1;
    1b48:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1b4c:	6f746b73 	svcvs	0x00746b73
    1b50:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1b54:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1b58:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	verify_fph (phy, "tcv32");
    1b5c:	2f534f43 	svccs	0x00534f43
    1b60:	4f636950 	svcmi	0x00636950
    1b64:	43432f53 	movtmi	r2, #16211	; 0x3f53
    1b68:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1b6c:	6f682f00 	svcvs	0x00682f00
    1b70:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 19c4 <tcv_control+0x1c>
	oq = oqueues [phy];
    1b74:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	b = q_first (oq);
    1b78:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	if (q_end (b, oq)) {
    1b7c:	6f746b73 	svcvs	0x00746b73
	*len = b->length;
    1b80:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	deq (b);	// Dequeue the packet ...
    1b84:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
}
    1b88:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		return NULL;
    1b8c:	2f534f43 	svccs	0x00534f43
    1b90:	4f636950 	svcmi	0x00636950
    1b94:	6b000053 	blvs	1ce8 <wwait+0xc>
    1b98:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	verify_fph (phy, "tcv33");
    1b9c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    1ba0:	75000001 	strvc	r0, [r0, #-1]
    1ba4:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1ba8:	00020068 	andeq	r0, r2, r8, rrx
    1bac:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1bb0:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
	oq = oqueues [phy];
    1bb4:	00030068 	andeq	r0, r3, r8, rrx
	b = q_first (oq);
    1bb8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
		return NULL;
    1bbc:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
	return (address)(b + 1);
    1bc0:	00030068 	andeq	r0, r3, r8, rrx
}
    1bc4:	63726100 	cmnvs	r2, #0, 2
    1bc8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    1bcc:	6d000004 	stcvs	0, cr0, [r0, #-16]
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd0:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
	verify_plg (b, tcv_xmt, "tcv34");
    1bd4:	00040068 	andeq	r0, r4, r8, rrx
	hblock_t *b = header (pkt);
    1bd8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
	verify_plg (b, tcv_xmt, "tcv34");
    1bdc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1be0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1be4:	62000004 	andvs	r0, r0, #4
    1be8:	6f747475 	svcvs	0x00747475
    1bec:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    1bf0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    1bf4:	00000400 	andeq	r0, r0, r0, lsl #8
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf8:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
}
    1bfc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c00:	6b000005 	blvs	1c1c <ResetISR+0x8>
    1c04:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    1c08:	00682e6c 	rsbeq	r2, r8, ip, ror #28
}
    1c0c:	3c000001 	stccc	0, cr0, [r0], {1}
    while(1)
    1c10:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
{
    1c14:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    SetupTrimDevice();
    1c18:	0000003e 	andeq	r0, r0, lr, lsr r0
    pui32Src = &_etext;
    1c1c:	26050000 	strcs	r0, [r5], -r0
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c20:	48020500 	stmdami	r2, {r8, sl}
    __asm("    ldr     r0, =_bss\n"
    1c24:	0300000f 	movweq	r0, #15
    1c28:	050103c3 	streq	r0, [r1, #-963]	; 0xfffffc3d
    1c2c:	13131602 	tstne	r3, #2097152	; 0x200000
    1c30:	06260514 			; <UNDEFINED> instruction: 0x06260514
    1c34:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
   main();
    1c38:	20090302 	andcs	r0, r9, r2, lsl #6
    FaultISR();
    1c3c:	051f0705 	ldreq	r0, [pc, #-1797]	; 153f <diag+0x4b>
        *pui32Dest++ = *pui32Src++;
    1c40:	20210602 	eorcs	r0, r1, r2, lsl #12
    1c44:	21061305 	tstcs	r6, r5, lsl #6
    1c48:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
    1c4c:	08052013 	stmdaeq	r5, {r0, r1, r4, sp}
    1c50:	060f053e 			; <UNDEFINED> instruction: 0x060f053e
    1c54:	0603052c 	streq	r0, [r3], -ip, lsr #10
    1c58:	06040501 	streq	r0, [r4], -r1, lsl #10
    1c5c:	0616052f 	ldreq	r0, [r6], -pc, lsr #10
static byte get_byte () {
    1c60:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c64:	31060505 	tstcc	r6, r5, lsl #10
    1c68:	0302054b 	movweq	r0, #9547	; 0x254b
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c6c:	0105017a 	tsteq	r5, sl, ror r1
    1c70:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
		if (ee_inp)
    1c74:	01000302 	tsteq	r0, r2, lsl #6
			b |= 1;
    1c78:	001f0501 	andseq	r0, pc, r1, lsl #10
    1c7c:	0f840205 	svceq	0x00840205
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
	for (b = 0, i = 0; i < 8; i++) {
    1c84:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
}
    1c88:	14010d03 	strne	r0, [r1], #-3331	; 0xfffff2fd
    1c8c:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    1c90:	031f0501 	tsteq	pc, #4194304	; 0x400000
static void put_byte (byte b) {
    1c94:	0d052070 	stceq	0, cr2, [r5, #-448]	; 0xfffffe40
    1c98:	052e1003 	streq	r1, [lr, #-3]!
    1c9c:	0520061f 	streq	r0, [r0, #-1567]!	; 0xfffff9e1
    1ca0:	06010602 	streq	r0, [r1], -r2, lsl #12
		if (b & 0x80)
    1ca4:	13201103 			; <UNDEFINED> instruction: 0x13201103
    1ca8:	01060d05 	tsteq	r6, r5, lsl #26
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	051f0505 	ldreq	r0, [pc, #-1285]	; 17af <tcv_endp+0x43>
	for (i = 0; i < 8; i++) {
    1cb0:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
		b <<= 1;
    1cb4:	06010602 	streq	r0, [r1], -r2, lsl #12
	for (i = 0; i < 8; i++) {
    1cb8:	0f052125 	svceq	0x00052125
}
    1cbc:	02051506 	andeq	r1, r5, #25165824	; 0x1800000
    1cc0:	0523061d 	streq	r0, [r3, #-1565]!	; 0xfffff9e3
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc4:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    1cc8:	03052401 	movweq	r2, #21505	; 0x5401
	put_byte (cmd);
    1ccc:	20620306 	rsbcs	r0, r2, r6, lsl #6
    1cd0:	01061e05 	tsteq	r6, r5, lsl #28
}
    1cd4:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
    1cd8:	21300604 	teqcs	r0, r4, lsl #12
static void wwait (word st, word del) {
    1cdc:	01061305 	tsteq	r6, r5, lsl #6
    1ce0:	91060405 	tstls	r6, r5, lsl #8
    1ce4:	050d2e05 	streq	r2, [sp, #-3589]	; 0xfffff1fb
	while (dopen && (rdsr () & 1)) {
    1ce8:	05010636 	streq	r0, [r1, #-1590]	; 0xfffff9ca
    1cec:	0534060a 	ldreq	r0, [r4, #-1546]!	; 0xfffff9f6
    1cf0:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    1cf4:	0405580d 	streq	r5, [r5], #-2061	; 0xfffff7f3
	put_byte (CMD_RDSR);
    1cf8:	052f2206 	streq	r2, [pc, #-518]!	; 1afa <tcvphy_rcv+0x3a>
	r = get_byte ();
    1cfc:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    1d00:	0b030604 	bleq	c3518 <__ccfg+0xa3570>
	while (dopen && (rdsr () & 1)) {
    1d04:	060705ac 	streq	r0, [r7], -ip, lsr #11
}
    1d08:	062e0501 	strteq	r0, [lr], -r1, lsl #10
		if (st == WNONE)
    1d0c:	06090564 	streq	r0, [r9], -r4, ror #10
    1d10:	00070213 	andeq	r0, r7, r3, lsl r2
			mdelay (1);
    1d14:	1c050101 	stfnes	f0, [r5], {1}
    1d18:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
			delay (del, st);
    1d1c:	03000010 	movweq	r0, #16
    1d20:	050108c6 	streq	r0, [r1, #-2246]	; 0xfffff73a
			release;
    1d24:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    1d28:	03060d05 	movweq	r0, #27909	; 0x6d05
    1d2c:	04017cdf 	streq	r7, [r1], #-3295	; 0xfffff321
static void ready () {
    1d30:	060f0501 	streq	r0, [pc], -r1, lsl #10
	if (dopen) {
    1d34:	2003a103 	andcs	sl, r3, r3, lsl #2
		wwait (WNONE, 1);
    1d38:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
    1d3c:	03240502 			; <UNDEFINED> instruction: 0x03240502
    1d40:	05017cda 	streq	r7, [r1, #-3290]	; 0xfffff326
	dstat = 0;
    1d44:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
}
    1d48:	01040106 	tsteq	r4, r6, lsl #2
    1d4c:	a1030205 	tstge	r3, r5, lsl #4
    1d50:	2f062003 	svccs	0x00062003
	udelay (1);
    1d54:	3d060105 	stfccs	f0, [r6, #-20]	; 0xffffffec
    1d58:	01000502 	tsteq	r0, r2, lsl #10
	udelay (1);
    1d5c:	00270501 	eoreq	r0, r7, r1, lsl #10
		dopen = DOPEN_TEMP;
    1d60:	00000205 	andeq	r0, r0, r5, lsl #4
    1d64:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1d68:	02050100 	andeq	r0, r5, #0, 2
    1d6c:	27051414 	smladcs	r5, r4, r4, r1
static void cclose () {
    1d70:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
	if (dopen == DOPEN_TEMP) {
    1d74:	1c270524 	cfstr32ne	mvfx0, [r7], #-144	; 0xffffff70
    1d78:	06240205 	strteq	r0, [r4], -r5, lsl #4
		wwait (WNONE, 1);
    1d7c:	03052320 	movweq	r2, #21280	; 0x5320
    1d80:	06060548 	streq	r0, [r6], -r8, asr #10
	cmd_0 (CMD_DP);
    1d84:	06020501 	streq	r0, [r2], -r1, lsl #10
    1d88:	0601052d 	streq	r0, [r1], -sp, lsr #10
		dopen = 0;
    1d8c:	00050232 	andeq	r0, r5, r2, lsr r2
}
    1d90:	1b050101 	blne	14219c <__ccfg+0x1221f4>
word ee_open () {
    1d94:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
	ready ();
    1d98:	03000010 	movweq	r0, #16
	dopen = DOPEN_PERM;
    1d9c:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
    1da0:	1b051302 	blne	1469b0 <__ccfg+0x126a08>
}
    1da4:	02051f06 	andeq	r1, r5, #6, 30
	if (dopen) {
    1da8:	00060221 	andeq	r0, r6, r1, lsr #4
    1dac:	1e050101 	adfnes	f0, f5, f1
		dopen = DOPEN_TEMP;
    1db0:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
		cclose ();
    1db4:	03000010 	movweq	r0, #16
}
    1db8:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
int ser_in (word st, char *buf, int len) {
    1dbc:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    1dc0:	1e05010e 	adfnes	f0, f5, #0.5
	if (len == 0)
    1dc4:	207a0306 	rsbscs	r0, sl, r6, lsl #6
	if (__inpline == NULL) {
    1dc8:	05340905 	ldreq	r0, [r4, #-2309]!	; 0xfffff6fb
		if ((prcs = running (__inserial)) == 0) {
    1dcc:	207a031e 	rsbscs	r0, sl, lr, lsl r3
    1dd0:	27060305 	strcs	r0, [r6, -r5, lsl #6]
			prcs = runthread (__inserial);
    1dd4:	01061205 	tsteq	r6, r5, lsl #4
    1dd8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
			if (prcs == 0) {
    1ddc:	051f061f 	ldreq	r0, [pc, #-1567]	; 17c5 <tcv_endp+0x59>
				npwait (st);
    1de0:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
		release;
    1de4:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
		join (prcs, st);
    1de8:	06010602 	streq	r0, [r1], -r2, lsl #12
    1dec:	13030532 	movwne	r0, #13618	; 0x3532
	if (*__inpline == NULL) // bin cmd
    1df0:	153b0205 	ldrne	r0, [fp, #-517]!	; 0xfffffdfb
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df4:	01061105 	tsteq	r6, r5, lsl #2
	if (prcs >= len)
    1df8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
		prcs = len-1;
    1dfc:	01010006 	tsteq	r1, r6
	memcpy (buf, __inpline, prcs);
    1e00:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1e04:	00000002 	andeq	r0, r0, r2
    1e08:	018e0300 	orreq	r0, lr, r0, lsl #6
	ufree (__inpline);
    1e0c:	16020501 	strne	r0, [r2], -r1, lsl #10
	__inpline = NULL;
    1e10:	010e0514 	tsteq	lr, r4, lsl r5
	if (*buf) // if it's NULL, it's a bin cmd
    1e14:	20060905 	andcs	r0, r6, r5, lsl #18
		buf [prcs] = '\0';
    1e18:	7a032105 	bvc	ca234 <__ccfg+0xaa28c>
}
    1e1c:	0603052e 	streq	r0, [r3], -lr, lsr #10
		prcs = strlen (__inpline);
    1e20:	06120527 	ldreq	r0, [r2], -r7, lsr #10
    1e24:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
		return 0;
    1e28:	21060405 	tstcs	r6, r5, lsl #8
    1e2c:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
    1e30:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
int ser_outf (word st, const char *m, ...) {
    1e34:	052b061f 	streq	r0, [fp, #-1567]!	; 0xfffff9e1
    1e38:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
	if ((prcs = running (__outserial)) != 0) {
    1e3c:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    1e40:	06010602 	streq	r0, [r1], -r2, lsl #12
		join (prcs, st);
    1e44:	580b0534 	stmdapl	fp, {r2, r4, r5, r8, sl}
    1e48:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
		release;
    1e4c:	03050108 	movweq	r0, #20744	; 0x5108
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e50:	061f052f 	ldreq	r0, [pc], -pc, lsr #10
    1e54:	20210501 	eorcs	r0, r1, r1, lsl #10
    1e58:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
		umwait (st);
    1e5c:	052f0603 	streq	r0, [pc, #-1539]!	; 1861 <tcv_open+0x85>
    1e60:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	if (runstrand (__outserial, buf) == 0) {
    1e64:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    1e68:	01052e0b 	tsteq	r5, fp, lsl #28
    1e6c:	07021306 	streq	r1, [r2, -r6, lsl #6]
		ufree (buf);
    1e70:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		npwait (st);
    1e74:	0205002a 	andeq	r0, r5, #42	; 0x2a
}
    1e78:	00001058 	andeq	r1, r0, r8, asr r0
    1e7c:	0101a603 	tsteq	r1, r3, lsl #12
    1e80:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1e84:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
int ser_inf (word st, const char *fmt, ...) {
    1e88:	02210602 	eoreq	r0, r1, #2097152	; 0x200000
    1e8c:	01010002 	tsteq	r1, r2
	if (fmt == NULL)
    1e90:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
	if (__inpline == NULL) {
    1e94:	00106002 	andseq	r6, r0, r2
		if ((prcs = running (__inserial)) == 0) {
    1e98:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    1e9c:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
			prcs = runthread (__inserial);
    1ea0:	0e030602 	cfmadd32eq	mvax0, mvfx0, mvfx3, mvfx2
    1ea4:	10031320 	andne	r1, r3, r0, lsr #6
			if (prcs == 0) {
    1ea8:	06060501 	streq	r0, [r6], -r1, lsl #10
				npwait (st);
    1eac:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
		release;
    1eb0:	03060205 	movweq	r0, #25093	; 0x6205
		join (prcs, st);
    1eb4:	06052e09 	streq	r2, [r5], -r9, lsl #28
    1eb8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	va_start (ap, fmt);
    1ebc:	3c060558 	cfstr32cc	mvfx0, [r6], {88}	; 0x58
	prcs = vscan (__inpline, fmt, ap);
    1ec0:	08060305 	stmdaeq	r6, {r0, r2, r8, r9}
    1ec4:	02052e27 	andeq	r2, r5, #624	; 0x270
	ufree (__inpline);
    1ec8:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
	__inpline = NULL;
    1ecc:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
}
    1ed0:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    1ed4:	2e590306 	cdpcs	3, 5, cr0, cr9, cr6, {0}
    1ed8:	01060905 	tsteq	r6, r5, lsl #18
		return 0;
    1edc:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    1ee0:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    1ee4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	08053c07 	stmdaeq	r5, {r0, r1, r2, sl, fp, ip, sp}
    1eec:	0605052e 	streq	r0, [r5], -lr, lsr #10
    1ef0:	03053e08 	movweq	r3, #24072	; 0x5e08
	RF_cmdFs.frequency = 
    1ef4:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
}
    1ef8:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
    1efc:	01061205 	tsteq	r6, r5, lsl #4
    1f00:	21060505 	tstcs	r6, r5, lsl #10
    1f04:	11060705 	tstne	r6, r5, lsl #14
static int option (int opt, address val) {
    1f08:	03060305 	movweq	r0, #25349	; 0x6305
    1f0c:	07056617 	smladeq	r5, r7, r6, r6
    1f10:	06050106 	streq	r0, [r5], -r6, lsl #2
    1f14:	0602052e 	streq	r0, [r2], -lr, lsr #10
    1f18:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
    1f1c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    1f20:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    1f24:	0d030601 	stceq	6, cr0, [r3, #-4]
    1f28:	03020501 	movweq	r0, #9473	; 0x2501
    1f2c:	01052e73 	tsteq	r5, r3, ror lr
    1f30:	022e0d03 	eoreq	r0, lr, #3, 26	; 0xc0
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	0101000a 	tsteq	r1, sl
    1f38:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
			goto RVal;
    1f3c:	00112c02 	andseq	r2, r1, r2, lsl #24
			_BIS (dstate, DSTATE_RXON);
    1f40:	02d20300 	sbcseq	r0, r2, #0, 6
    1f44:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	int ret = 0;
    1f48:	10061b05 	andne	r1, r6, r5, lsl #22
			p_trigger (drvprcs, qevent);
    1f4c:	06220205 	strteq	r0, [r2], -r5, lsl #4
    1f50:	0005024b 	andeq	r0, r5, fp, asr #4
    1f54:	2a050101 	bcs	142360 <__ccfg+0x1223b8>
    1f58:	40020500 	andmi	r0, r2, r0, lsl #10
    1f5c:	03000011 	movweq	r0, #17
    1f60:	050102d8 	streq	r0, [r1, #-728]	; 0xfffffd28
    1f64:	2a051602 	bcs	147774 <__ccfg+0x1277cc>
    1f68:	0b050e06 	bleq	145788 <__ccfg+0x1257e0>
    1f6c:	3e050524 	cfsh32cc	mvfx0, mvfx5, #20
    1f70:	4a060205 	bmi	18278c <__ccfg+0x1627e4>
}
    1f74:	01060505 	tsteq	r6, r5, lsl #10
			_BIC (dstate, DSTATE_RXON);
    1f78:	21060305 	tstcs	r6, r5, lsl #6
    1f7c:	014c0205 	cmpeq	ip, r5, lsl #4
			statid = (val == NULL) ? 0 : *val;
    1f80:	061f3d06 	ldreq	r3, [pc], -r6, lsl #26
    1f84:	05132020 	ldreq	r2, [r3, #-32]	; 0xffffffe0
	int ret = 0;
    1f88:	02210601 	eoreq	r0, r1, #1048576	; 0x100000
			ret = (int) statid;
    1f8c:	01010006 	tsteq	r1, r6
	if (val != NULL)
    1f90:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
		*val = ret;
    1f94:	00117402 	andseq	r7, r1, r2, lsl #8
			ret = rbuffl + 2;
    1f98:	02e50300 	rsceq	r0, r5, #0, 6
    1f9c:	16020501 	strne	r0, [r2], -r1, lsl #10
			if (val != NULL) {
    1fa0:	21051413 	tstcs	r5, r3, lsl r4
				memcpy (val, &rxstat,
    1fa4:	01790306 	cmneq	r9, r6, lsl #6
    1fa8:	06270205 	strteq	r0, [r7], -r5, lsl #4
				memset (&rxstat, 0, 
    1fac:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    1fb0:	200a0521 	andcs	r0, sl, r1, lsr #10
			if (val == NULL)
    1fb4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	054a060f 	strbeq	r0, [sl, #-1551]	; 0xfffff9f1
    1fbc:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
				utimer_set (bckf_timer, *val);
    1fc0:	052f0604 	streq	r0, [pc, #-1540]!	; 19c4 <tcv_control+0x1c>
    1fc4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    1fc8:	4b5a0605 	blmi	16837e4 <__ccfg+0x166383c>
			for (ret = 0; ret < 8; ret++)
    1fcc:	050d0205 	streq	r0, [sp, #-517]	; 0xfffffdfb
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	09030601 	stmdbeq	r3, {r0, r9, sl}
					== patable [ret])
    1fd4:	0003022e 	andeq	r0, r3, lr, lsr #4
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	2d050101 	stfcss	f0, [r5, #-4]
			for (ret = 0; ret < 8; ret++)
    1fdc:	00020500 	andeq	r0, r2, r0, lsl #10
    1fe0:	03000000 	movweq	r0, #0
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	050102f7 	streq	r0, [r1, #-759]	; 0xfffffd09
    1fe8:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    1fec:	03062d05 	movweq	r2, #27909	; 0x6d05
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	05200179 	streq	r0, [r0, #-377]!	; 0xfffffe87
    1ff4:	30062702 	andcc	r2, r6, r2, lsl #14
			_BIS (dstate, DSTATE_IRST);
    1ff8:	01060905 	tsteq	r6, r5, lsl #18
    1ffc:	2e060e05 	cdpcs	14, 0, cr0, cr6, cr5, {0}
    2000:	01061205 	tsteq	r6, r5, lsl #4
			ret = (int) channel;
    2004:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
			goto RVal;
    2008:	03053301 	movweq	r3, #21249	; 0x5301
				(*val > 7) ? 7 : *val;
    200c:	06051c06 	streq	r1, [r5], -r6, lsl #24
    2010:	20050106 	andcs	r0, r5, r6, lsl #2
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	2106051f 	tstcs	r6, pc, lsl r5
    2018:	21060405 	tstcs	r6, r5, lsl #8
			plugch ();
    201c:	02641f05 	rsbeq	r1, r4, #5, 30
			_BIS (dstate, DSTATE_IRST);
    2020:	01010001 	tsteq	r1, r1
    2024:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
			ret = (int) vrate;
    2028:	0011a802 	andseq	sl, r1, r2, lsl #16
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	03870300 	orreq	r0, r7, #0, 6
    2030:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2034:	06260514 			; <UNDEFINED> instruction: 0x06260514
    2038:	0205200e 	andeq	r2, r5, #14
    203c:	052e0624 	streq	r0, [lr, #-1572]!	; 0xfffff9dc
    2040:	05280609 	streq	r0, [r8, #-1545]!	; 0xfffff9f7
    2044:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    2048:	0606052e 	streq	r0, [r6], -lr, lsr #10
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2050:	01053d30 	tsteq	r5, r0, lsr sp
    2054:	02051706 	andeq	r1, r5, #1572864	; 0x180000
    2058:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
			syserror (EREQPAR, "cc13 op");
    205c:	01000402 	tsteq	r0, r2, lsl #8
    2060:	00210501 	eoreq	r0, r1, r1, lsl #10
    2064:	11cc0205 	bicne	r0, ip, r5, lsl #4
    2068:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    206c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2070:	06210516 			; <UNDEFINED> instruction: 0x06210516
    2074:	0205200e 	andeq	r2, r5, #14
    2078:	3e850624 	cdpcc	6, 8, cr0, cr5, cr4, {1}
    207c:	01061e05 	tsteq	r6, r5, lsl #28
    2080:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    2084:	1305201e 	movwne	r2, #20510	; 0x501e
    2088:	06020520 	streq	r0, [r2], -r0, lsr #10
    208c:	06010522 	streq	r0, [r1], -r2, lsr #10
    2090:	00050259 	andeq	r0, r5, r9, asr r2
    2094:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
static void issue_cmd (lword cmd) {
    2098:	00020500 	andeq	r0, r2, r0, lsl #10
    209c:	03000000 	movweq	r0, #0
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	050103a7 	streq	r0, [r1, #-935]	; 0xfffffc59
    20a4:	01051602 	tsteq	r5, r2, lsl #12
    20a8:	04026706 	streq	r6, [r2], #-1798	; 0xfffff8fa
		if (res != 0x86)
    20ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			syserror (EHARDWARE, "hang ic0");
    20b0:	02050018 	andeq	r0, r5, #24
    20b4:	00000000 	andeq	r0, r0, r0
		if (cnt-- == 0) {
    20b8:	0103b203 	tsteq	r3, r3, lsl #4
			diag ("HUP %lx %lx", cmd, res);
    20bc:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    20c0:	0e061805 	cdpeq	8, 0, cr1, cr6, cr5, {0}
			syserror (EHARDWARE, "hang ic0");
    20c4:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
		udelay (1);
    20c8:	05055a06 	streq	r5, [r5, #-2566]	; 0xfffff5fa
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	03050106 	movweq	r0, #20742	; 0x5106
}
    20d0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    20d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    20d8:	12053506 	andne	r3, r5, #25165824	; 0x1800000
    20dc:	01050106 	tsteq	r5, r6, lsl #2
static void rx_de () {
    20e0:	06030559 			; <UNDEFINED> instruction: 0x06030559
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	3d207a03 	vstmdbcc	r0!, {s14-s16}
    20e8:	01060605 	tsteq	r6, r5, lsl #12
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
	_BIC (dstate, DSTATE_RXAC);
    20f0:	08023d0b 	stmdaeq	r2, {r0, r1, r3, r8, sl, fp, ip, sp}
    20f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
}
    20f8:	0205001d 	andeq	r0, r5, #29
    20fc:	00000000 	andeq	r0, r0, r0
    2100:	01049203 	tsteq	r4, r3, lsl #4
static void rf_off () {
    2104:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
	if ((dstate & DSTATE_RFON) == 0)
    2108:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
    210c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
	IntDisable (INT_RFC_CPE_0);
    2110:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2114:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2118:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
	RFCAdi3VcoLdoVoltageMode (false);
    211c:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
	RFCSynthPowerDown ();
    2120:	022b0603 	eoreq	r0, fp, #3145728	; 0x300000
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2124:	01010006 	tsteq	r1, r6
    2128:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    212c:	00120402 	andseq	r0, r2, r2, lsl #8
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2130:	049e0300 	ldreq	r0, [lr], #768	; 0x300
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2134:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2138:	06050514 			; <UNDEFINED> instruction: 0x06050514
    213c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2140:	060a052f 	streq	r0, [sl], -pc, lsr #10
	_BIC (dstate, DSTATE_RFON);
    2144:	06020501 	streq	r0, [r2], -r1, lsl #10
    2148:	01052e3e 	tsteq	r5, lr, lsr lr
}
    214c:	03052506 	movweq	r2, #21766	; 0x5506
    2150:	06051c06 	streq	r1, [r5], -r6, lsl #24
    2154:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2158:	06023b06 	streq	r3, [r2], -r6, lsl #22
    215c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2160:	0205001d 	andeq	r0, r5, #29
    2164:	00000000 	andeq	r0, r0, r0
    2168:	0104ac03 	tsteq	r4, r3, lsl #24
		if (cmd->status == tstat)
    216c:	13140205 	tstne	r4, #1342177280	; 0x50000000
		if (timeout-- == 0) {
    2170:	1d051314 	stcne	3, cr1, [r5, #-80]	; 0xffffffb0
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2174:	017a0306 	cmneq	sl, r6, lsl #6
    2178:	05250405 	streq	r0, [r5, #-1029]!	; 0xfffffbfb
    217c:	2e062102 	adfcss	f2, f6, f2
			syserror (EHARDWARE, "rt2");
    2180:	24060105 	strcs	r0, [r6], #-261	; 0xfffffefb
    2184:	1d060305 	stcne	3, cr0, [r6, #-20]	; 0xffffffec
		udelay (1);
    2188:	01060605 	tsteq	r6, r5, lsl #12
		if (cmd->status == tstat)
    218c:	051f0205 	ldreq	r0, [pc, #-517]	; 1f8f <option+0x87>
}
    2190:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    2194:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2198:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    219c:	04023a06 	streq	r3, [r2], #-2566	; 0xfffff5fa
static void rf_on () {
    21a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    21a4:	02050021 	andeq	r0, r5, #33	; 0x21
	OSCHF_TurnOnXosc();
    21a8:	00001228 	andeq	r1, r0, r8, lsr #4
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21ac:	0104b803 	tsteq	r4, r3, lsl #16
    21b0:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    21b4:	0e062105 	adfeqs	f2, f6, f5
    21b8:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21bc:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    21c0:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c4:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21c8:	1e051d06 	cdpne	13, 0, cr1, cr5, cr6, {0}
	issue_cmd (
    21cc:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    21d0:	00020201 	andeq	r0, r2, r1, lsl #4
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d4:	2b050101 	blcs	1425e0 <__ccfg+0x122638>
    21d8:	00020500 	andeq	r0, r2, r0, lsl #10
    21dc:	03000000 	movweq	r0, #0
   pPatchTab[80] = 0;
    21e0:	050104c1 	streq	r0, [r1, #-1217]	; 0xfffffb3f
   } while (--nIterations);
    21e4:	20051402 	andcs	r1, r5, r2, lsl #8
   pPatchTab[53] = 2;
    21e8:	01080520 	tsteq	r8, r0, lsr #10
    21ec:	01061a05 	tsteq	r6, r5, lsl #20
   pPatchTab[55] = 3;
    21f0:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
   pPatchTab[110] = 4;
    21f4:	01052e08 	tsteq	r5, r8, lsl #28
   pPatchTab[107] = 5;
    21f8:	0001022f 	andeq	r0, r1, pc, lsr #4
   pPatchTab[65] = 6;
    21fc:	33050101 	movwcc	r0, #20737	; 0x5101
    2200:	00020500 	andeq	r0, r2, r0, lsl #10
   pPatchTab[57] = 1;
    2204:	03000000 	movweq	r0, #0
   pIrqPatch[1] = _IRQ_PATCH_0;
    2208:	050104c6 	streq	r0, [r1, #-1222]	; 0xfffffb3a
   const uint32_t *pS = patchGenfskRfe;
    220c:	08051402 	stmdaeq	r5, {r1, sl, ip}
      t2 = *pS++;
    2210:	3002052e 	andcc	r0, r2, lr, lsr #10
      t4 = *pS++;
    2214:	01060505 	tsteq	r6, r5, lsl #10
      t6 = *pS++;
    2218:	052f0105 	streq	r0, [pc, #-261]!	; 211b <rf_off+0x17>
      t8 = *pS++;
    221c:	0d051d11 	stceq	13, cr1, [r5, #-68]	; 0xffffffbc
      *pD++ = t1;
    2220:	0603052e 	streq	r0, [r3], -lr, lsr #10
      *pD++ = t2;
    2224:	0608052f 	streq	r0, [r8], -pc, lsr #10
      *pD++ = t3;
    2228:	00030201 	andeq	r0, r3, r1, lsl #4
      *pD++ = t5;
    222c:	2b050101 	blcs	142638 <__ccfg+0x122690>
      *pD++ = t7;
    2230:	00020500 	andeq	r0, r2, r0, lsl #10
   } while (--nIterations);
    2234:	03000000 	movweq	r0, #0
    2238:	050104cd 	streq	r0, [r1, #-1229]	; 0xfffffb33
      *pD++ = t8;
    223c:	08051402 	stmdaeq	r5, {r1, sl, ip}
   } while (--nIterations);
    2240:	4b02052e 	blmi	83700 <__ccfg+0x63758>
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2244:	01000202 	tsteq	r0, r2, lsl #4
   *pD++ = t2;
    2248:	00330501 	eorseq	r0, r3, r1, lsl #10
   *pD++ = t3;
    224c:	00000205 	andeq	r0, r0, r5, lsl #4
   *pD++ = t4;
    2250:	d3030000 	movwle	r0, #12288	; 0x3000
   *pD++ = t5;
    2254:	02050104 	andeq	r0, r5, #4, 2
    2258:	00030214 	andeq	r0, r3, r4, lsl r2
	RFCAdi3VcoLdoVoltageMode (true);
    225c:	37050101 	strcc	r0, [r5, -r1, lsl #2]
    2260:	36020500 	strcc	r0, [r2], -r0, lsl #10
       	RFCRfTrimSet (&rfTrim);
    2264:	03000012 	movweq	r0, #18
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2268:	050104d8 	streq	r0, [r1, #-1240]	; 0xfffffb28
    226c:	08051402 	stmdaeq	r5, {r1, sl, ip}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2270:	0601052e 	streq	r0, [r1], -lr, lsr #10
    2274:	06030530 			; <UNDEFINED> instruction: 0x06030530
	issue_cmd ((lword)&cmd_srt);
    2278:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
    227c:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
	issue_cmd ((lword)&RF_cmdFs);
    2280:	01000302 	tsteq	r0, r2, lsl #6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2284:	002e0501 	eoreq	r0, lr, r1, lsl #10
    2288:	124a0205 	subne	r0, sl, #1342177280	; 0x50000000
    228c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
	IntEnable (INT_RFC_CPE_0);
    2290:	02050104 	andeq	r0, r5, #4, 2
	_BIC (dstate, DSTATE_IRST);
    2294:	20080514 	andcs	r0, r8, r4, lsl r5
    2298:	30060105 	andcc	r0, r6, r5, lsl #2
    229c:	1f060305 	svcne	0x00060305
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a0:	01060b05 	tsteq	r6, r5, lsl #22
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a4:	01000302 	tsteq	r0, r2, lsl #6
	IntEnable (INT_RFC_CPE_0);
    22a8:	002b0501 	eoreq	r0, fp, r1, lsl #10
    22ac:	12580205 	subsne	r0, r8, #1342177280	; 0x50000000
}
    22b0:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
	IntEnable (INT_RFC_CPE_0);
    22b4:	02050104 	andeq	r0, r5, #4, 2
    22b8:	062b0514 			; <UNDEFINED> instruction: 0x062b0514
    22bc:	22050510 	andcs	r0, r5, #16, 10	; 0x4000000
    22c0:	21060305 	tstcs	r6, r5, lsl #6
    22c4:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    22c8:	0c052d06 	stceq	13, cr2, [r5], {6}
    22cc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    22d0:	06030520 	streq	r0, [r3], -r0, lsr #10
    22d4:	3e02052f 	cfsh32cc	mvfx0, mvfx2, #31
    22d8:	01060e05 	tsteq	r6, r5, lsl #28
    22dc:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    22e0:	01010005 	tsteq	r1, r5
    22e4:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    22e8:	00127c02 	andseq	r7, r2, r2, lsl #24
    22ec:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
    22f0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22f4:	06450514 			; <UNDEFINED> instruction: 0x06450514
    22f8:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
    22fc:	2022055c 	eorcs	r0, r2, ip, asr r5
    2300:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
    2304:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2308:	05054c02 	streq	r4, [r5, #-3074]	; 0xfffff3fe
    230c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2310:	0f054006 	svceq	0x00054006
    2314:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
static void rx_int_enable () {
    2318:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    231c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2320:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    2324:	03050106 	movweq	r0, #20742	; 0x5106
    2328:	06054f06 	streq	r4, [r5], -r6, lsl #30
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    232c:	03050106 	movweq	r0, #20742	; 0x5106
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2330:	05593006 	ldrbeq	r3, [r9, #-6]
    2334:	010d0304 	tsteq	sp, r4, lsl #6
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2338:	76030205 	strvc	r0, [r3], -r5, lsl #4
    233c:	0605052e 	streq	r0, [r5], -lr, lsr #10
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2340:	06030501 	streq	r0, [r3], -r1, lsl #10
    2344:	06060535 			; <UNDEFINED> instruction: 0x06060535
    2348:	06040501 	streq	r0, [r4], -r1, lsl #10
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    234c:	0b05594b 	bleq	158880 <__ccfg+0x1388d8>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2350:	03050106 	movweq	r0, #20742	; 0x5106
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2354:	0a056906 	beq	15c774 <__ccfg+0x13c7cc>
		if (db->status == DATA_ENTRY_FINISHED) {
    2358:	03050106 	movweq	r0, #20742	; 0x5106
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	0a055906 	beq	15877c <__ccfg+0x1387d4>
    2360:	01610306 	cmneq	r1, r6, lsl #6
			nr++;
    2364:	29030105 	stmdbcs	r3, {r0, r2, r8}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2368:	06020520 	streq	r0, [r2], -r0, lsr #10
    236c:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    2370:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2374:	752f0603 	strvc	r0, [pc, #-1539]!	; 1d79 <cclose+0x9>
				__dp [pl + 1] = __dp [pl] - 128;
    2378:	01000502 	tsteq	r0, r2, lsl #10
				pl = __dp [1] + 2;
    237c:	001a0501 	andseq	r0, sl, r1, lsl #10
				__dp [pl + 1] = __dp [pl] - 128;
    2380:	13180205 	tstne	r8, #1342177280	; 0x50000000
    2384:	ef030000 	svc	0x00030000
				__dp [pl] = 0;
    2388:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    238c:	01130317 	tsteq	r3, r7, lsl r3
    2390:	01061505 	tsteq	r6, r5, lsl #10
    2394:	68031a05 	stmdavs	r3, {r0, r2, r9, fp, ip}
			db->status = DATA_ENTRY_PENDING;
    2398:	03150520 	tsteq	r5, #32, 10	; 0x8000000
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    239c:	0c052018 	stceq	0, cr2, [r5], {24}
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a0:	20050558 	andcs	r0, r5, r8, asr r5
				diag ("BAD RX");
    23a4:	31060305 	tstcc	r6, r5, lsl #6
    23a8:	05520205 	ldrbeq	r0, [r2, #-517]	; 0xfffffdfb
	if (nr) {
    23ac:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b0:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
}
    23b4:	05150617 	ldreq	r0, [r5, #-1559]	; 0xfffff9e9
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b8:	16052b1d 			; <UNDEFINED> instruction: 0x16052b1d
    23bc:	06020520 	streq	r0, [r2], -r0, lsr #10
    23c0:	06170521 	ldreq	r0, [r7], -r1, lsr #10
}
    23c4:	06020514 			; <UNDEFINED> instruction: 0x06020514
    23c8:	061a0531 			; <UNDEFINED> instruction: 0x061a0531
    23cc:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    23d0:	2c030105 	stfcss	f0, [r3], {5}
    23d4:	000d022e 	andeq	r0, sp, lr, lsr #4
    23d8:	1c050101 	stfnes	f0, [r5], {1}
    23dc:	68020500 	stmdavs	r2, {r8, sl}
    23e0:	03000013 	movweq	r0, #19
    23e4:	050106fb 	streq	r0, [r1, #-1787]	; 0xfffff905
thread (cc1350_driver)
    23e8:	010c0302 	tsteq	ip, r2, lsl #6
    23ec:	03061c05 	movweq	r1, #27653	; 0x6c05
    23f0:	05050174 	streq	r0, [r5, #-372]	; 0xfffffe8c
    23f4:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    23f8:	05250602 	streq	r0, [r5, #-1538]!	; 0xfffff9fe
		if (dstate & DSTATE_IRST) {
    23fc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2400:	03052e05 	movweq	r2, #24069	; 0x5e05
    2404:	054c2f06 	strbeq	r2, [ip, #-3846]	; 0xfffff0fa
			rf_off ();
    2408:	05160611 	ldreq	r0, [r6, #-1553]	; 0xfffff9ef
			_BIC (dstate,
    240c:	11051c0f 	tstne	r5, pc, lsl #24
    2410:	1c0f0532 	cfstr32ne	mvfx0, [pc], {50}	; 0x32
		if (dstate & DSTATE_RXAC) {
    2414:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    2418:	01061105 	tsteq	r6, r5, lsl #2
			if ((dstate & DSTATE_RXON) == 0)
    241c:	30060205 	andcc	r0, r6, r5, lsl #4
				rx_de ();
    2420:	06150530 			; <UNDEFINED> instruction: 0x06150530
		if (paylen == 0) {
    2424:	20050501 	andcs	r0, r5, r1, lsl #10
    2428:	2f060305 	svccs	0x00060305
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    242c:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
    2430:	42010501 	andmi	r0, r1, #4194304	; 0x400000
    2434:	01000802 	tsteq	r0, r2, lsl #16
    2438:	00170501 	andseq	r0, r7, r1, lsl #10
				sysassert (paylen <= rbuffl && paylen > 0 &&
    243c:	13b00205 	movsne	r0, #1342177280	; 0x50000000
    2440:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    2444:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2448:	17051416 	smladne	r5, r6, r4, r1
    244c:	017a0306 	cmneq	sl, r6, lsl #6
    2450:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    2454:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2458:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
		} else if (dstate & DSTATE_RXON) {
    245c:	02052007 	andeq	r2, r5, #7
	if (dstate & DSTATE_RFON)
    2460:	05132206 	ldreq	r2, [r3, #-518]	; 0xfffffdfa
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2464:	05110604 	ldreq	r0, [r1, #-1540]	; 0xfffff9fc
		re->status = DATA_ENTRY_PENDING;
    2468:	2e062102 	adfcss	f2, f6, f2
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    246c:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
	issue_cmd ((lword)&RF_cmdPropRx);
    2470:	4a720303 	bmi	1c83084 <__ccfg+0x1c630dc>
	_BIS (dstate, DSTATE_RXAC);
    2474:	01060605 	tsteq	r6, r5, lsl #12
    2478:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    247c:	01060705 	tsteq	r6, r5, lsl #14
    2480:	21060505 	tstcs	r6, r5, lsl #10
	if (dstate & DSTATE_RXAC)
    2484:	01060b05 	tsteq	r6, r5, lsl #22
    2488:	23060405 	movwcs	r0, #25605	; 0x6405
				if (statid != 0xffff)
    248c:	0a052f3d 	beq	14e188 <__ccfg+0x12e1e0>
    2490:	07050106 	streq	r0, [r5, -r6, lsl #2]
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2494:	06050520 	streq	r0, [r5], -r0, lsr #10
				RF_cmdPropTx.pktLen = (byte) paylen;
    2498:	0d052a3d 	vstreq	s4, [r5, #-244]	; 0xffffff0c
		if (paylen == 0) {
    249c:	01050106 	tsteq	r5, r6, lsl #2
			wait (qevent, DR_LOOP);
    24a0:	02580a03 	subseq	r0, r8, #12288	; 0x3000
    24a4:	01010007 	tsteq	r1, r7
			if (dstate & DSTATE_RXAC) {
    24a8:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    24ac:	00000002 	andeq	r0, r0, r2
				rx_int_enable ();
    24b0:	03f40300 	mvnseq	r0, #0, 6
			release;
    24b4:	16020501 	strne	r0, [r2], -r1, lsl #10
			} else if (dstate & DSTATE_RFON) {
    24b8:	13131413 	tstne	r3, #318767104	; 0x13000000
				delay (offdelay, DR_GOOF);
    24bc:	03061c05 	movweq	r1, #27653	; 0x6c05
    24c0:	04050177 	streq	r0, [r5], #-375	; 0xfffffe89
    24c4:	1f060536 	svcne	0x00060536
		if (bckf_timer) {
    24c8:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
			wait (qevent, DR_LOOP);
    24cc:	2077031c 	rsbscs	r0, r7, ip, lsl r3
    24d0:	10030a05 	andne	r0, r3, r5, lsl #20
    24d4:	03090520 	movweq	r0, #38176	; 0x9520
			delay (bckf_timer, DR_LOOP);
    24d8:	12052e79 	andne	r2, r5, #1936	; 0x790
    24dc:	02052006 	andeq	r2, r5, #6
			if (dstate & DSTATE_RXAC)
    24e0:	03060106 	movweq	r0, #24838	; 0x6106
    24e4:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
	if (dstate & DSTATE_RFON)
    24e8:	03050106 	movweq	r0, #20742	; 0x5106
    24ec:	6f032106 	svcvs	0x00032106
		rx_de ();
    24f0:	0606052e 	streq	r0, [r6], -lr, lsr #10
		RF_cmdPropTx . status = 0;
    24f4:	06040501 	streq	r0, [r4], -r1, lsl #10
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24f8:	07051359 	smlsdeq	r5, r9, r3, r1
    24fc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2500:	0b052106 	bleq	14a920 <__ccfg+0x12a978>
		issue_cmd ((lword)&cmd_cs);
    2504:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if (dstate & DSTATE_IRST)
    2508:	07053106 	streq	r3, [r5, -r6, lsl #2]
    250c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    2510:	0604052f 	streq	r0, [r4], -pc, lsr #10
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2514:	052f2f3d 	streq	r2, [pc, #-3901]!	; 15df <diag+0xeb>
    2518:	0d054505 	cfstr32eq	mvfx4, [r5, #-20]	; 0xffffffec
			delay (1, DR_XMIT);
    251c:	01050106 	tsteq	r5, r6, lsl #2
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2520:	023c0d03 	eorseq	r0, ip, #3, 26	; 0xc0
    2524:	01010007 	tsteq	r1, r7
    2528:	05002005 	streq	r2, [r0, #-5]
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    252c:	00140002 	andseq	r0, r4, r2
    2530:	07a20300 	streq	r0, [r2, r0, lsl #6]!
				RF_cmdPropTx . status = 0;
    2534:	1a020501 	bne	83940 <__ccfg+0x63998>
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2538:	05051416 	streq	r1, [r5, #-1046]	; 0xfffffbea
				issue_cmd ((lword)&RF_cmdPropTx);
    253c:	03050106 	movweq	r0, #20742	; 0x5106
				proceed (DR_XMIT);
    2540:	09052506 	stmdbeq	r5, {r1, r2, r8, sl, sp}
    2544:	20050f06 	andcs	r0, r5, r6, lsl #30
			txtries++;
    2548:	052e7003 	streq	r7, [lr, #-3]!
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    254c:	2023030d 	eorcs	r0, r3, sp, lsl #6
    2550:	70031a05 	andvc	r1, r3, r5, lsl #20
    2554:	030d0520 	movweq	r0, #54560	; 0xd520
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2558:	06052e10 			; <UNDEFINED> instruction: 0x06052e10
		goto DR_LOOP__;
    255c:	03090523 	movweq	r0, #38179	; 0x9523
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2560:	0205206d 	andeq	r2, r5, #109	; 0x6d
		paylen = 0;
    2564:	2e0f0306 	cdpcs	3, 0, cr0, cr15, cr6, {0}
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	011f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
		txtries = 0;
    256c:	01060205 	tsteq	r6, r5, lsl #4
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2570:	20090306 	andcs	r0, r9, r6, lsl #6
    2574:	19030305 	stmdbne	r3, {r0, r2, r8, r9}
    2578:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    257c:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2580:	2f060405 	svccs	0x00060405
		    tcvphy_top (physid) == NULL)
    2584:	01061b05 	tsteq	r6, r5, lsl #22
    2588:	03060305 	movweq	r0, #25349	; 0x6305
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	12052e0d 	andne	r2, r5, #13, 28	; 0xd0
    2590:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			rf_off ();
    2594:	09054006 	stmdbeq	r5, {r1, r2, lr}
endthread
    2598:	03050106 	movweq	r0, #20742	; 0x5106
    259c:	204f0306 	subcs	r0, pc, r6, lsl #6
    25a0:	01060605 	tsteq	r6, r5, lsl #12
    25a4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    25a8:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    25ac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    25b0:	7a03062e 	bvc	c3e70 <__ccfg+0xa3ec8>
    25b4:	0609054a 	streq	r0, [r9], -sl, asr #10
    25b8:	06020513 			; <UNDEFINED> instruction: 0x06020513
    25bc:	14030544 	strne	r0, [r3], #-1348	; 0xfffffabc
    25c0:	060e0522 	streq	r0, [lr], -r2, lsr #10
    25c4:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    25c8:	30060405 	andcc	r0, r6, r5, lsl #8
    25cc:	01061305 	tsteq	r6, r5, lsl #6
    25d0:	2f060405 	svccs	0x00060405
    25d4:	01061705 	tsteq	r6, r5, lsl #14
void RFCCPE0IntHandler (void) {
    25d8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25dc:	052f0604 	streq	r0, [pc, #-1540]!	; 1fe0 <option+0xd8>
		_BIS (dstate, DSTATE_IRST);
    25e0:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    25e4:	04052010 	streq	r2, [r5], #-16
    25e8:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25ec:	1503052e 	strne	r0, [r3, #-1326]	; 0xfffffad2
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f0:	01061a05 	tsteq	r6, r5, lsl #20
    25f4:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
	p_trigger (drvprcs, qevent);
    25f8:	03051e1a 	movweq	r1, #24090	; 0x5e1a
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    25fc:	15052206 	strne	r2, [r5, #-518]	; 0xfffffdfa
    2600:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    2604:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2608:	060e053d 			; <UNDEFINED> instruction: 0x060e053d
    260c:	25120501 	ldrcs	r0, [r2, #-1281]	; 0xfffffaff
    2610:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    2614:	06052512 			; <UNDEFINED> instruction: 0x06052512
    2618:	06040529 	streq	r0, [r4], -r9, lsr #10
    261c:	06130522 	ldreq	r0, [r3], -r2, lsr #10
    2620:	06030501 	streq	r0, [r3], -r1, lsl #10
	RISE_N_SHINE;
    2624:	06010531 			; <UNDEFINED> instruction: 0x06010531
    2628:	02011b03 	andeq	r1, r1, #3072	; 0xc00
    262c:	0101000e 	tsteq	r1, lr
}
    2630:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    2634:	0014a802 	andseq	sl, r4, r2, lsl #16
    2638:	02ab0300 	adceq	r0, fp, #0, 6
    263c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2640:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    2644:	1905200e 	stmdbne	r5, {r1, r2, r3, sp}
void phys_cc1350 (int phy, int mbs) {
    2648:	1c2c0524 	cfstr32ne	mvfx0, [ip], #-144	; 0xffffff70
	if (rbuffl != 0)
    264c:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
    2650:	02053c05 	andeq	r3, r5, #1280	; 0x500
		syserror (ETOOMANY, "cc13");
    2654:	0a052306 	beq	14b274 <__ccfg+0x12b2cc>
		syserror (EREQPAR, "cc13 mb");
    2658:	010b0306 	tsteq	fp, r6, lsl #6
	if (mbs == 0)
    265c:	77030c05 	strvc	r0, [r3, -r5, lsl #24]
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2660:	260a0520 	strcs	r0, [sl], -r0, lsr #10
		syserror (EREQPAR, "cc13 mb");
    2664:	20760323 	rsbscs	r0, r6, r3, lsr #6
    2668:	2f060205 	svccs	0x00060205
	i = 0;
    266c:	14030518 	strne	r0, [r3], #-1304	; 0xfffffae8
	rbuffl = (byte) mbs;
    2670:	06060513 			; <UNDEFINED> instruction: 0x06060513
		db->config.type = 0;	// General (data in structure)
    2674:	06040501 	streq	r0, [r4], -r1, lsl #10
	rbuffl = (byte) mbs;
    2678:	060a0521 	streq	r0, [sl], -r1, lsr #10
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    267c:	03010501 	movweq	r0, #5377	; 0x1501
    2680:	0b05200f 	bleq	14a6c4 <__ccfg+0x12a71c>
		if (db == NULL)
    2684:	20730306 	rsbscs	r0, r3, r6, lsl #6
			syserror (EMALLOC, "cc13");
    2688:	20060c05 	andcs	r0, r6, r5, lsl #24
    268c:	06200405 	strteq	r0, [r0], -r5, lsl #8
    2690:	060c052f 	streq	r0, [ip], -pc, lsr #10
		db->status = DATA_ENTRY_PENDING;
    2694:	06020501 	streq	r0, [r2], -r1, lsl #10
		if (i)
    2698:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
			da->pNextEntry = (byte*) db;
    269c:	02010609 	andeq	r0, r1, #9437184	; 0x900000
		db->length = rbuffl + 2;
    26a0:	01010004 	tsteq	r1, r4
    26a4:	05002005 	streq	r2, [r0, #-5]
		db->config.type = 0;	// General (data in structure)
    26a8:	0014dc02 	andseq	sp, r4, r2, lsl #24
		db->length = rbuffl + 2;
    26ac:	08810300 	stmeq	r1, {r8, r9}
	db->pNextEntry = (byte*) re;
    26b0:	03020501 	movweq	r0, #9473	; 0x2501
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b4:	15050109 	strne	r0, [r5, #-265]	; 0xfffffef7
    26b8:	20050106 	andcs	r0, r5, r6, lsl #2
	if (rbuffs == NULL)
    26bc:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
	rbuffs->pCurrEntry = (byte*) re;
    26c0:	20090315 	andcs	r0, r9, r5, lsl r3
	rbuffs->pLastEntry = NULL;
    26c4:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    26c8:	03051d05 	movweq	r1, #23813	; 0x5d05
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26cc:	1a052106 	bne	14aaec <__ccfg+0x12ab44>
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    26d4:	04023e06 	streq	r3, [r2], #-3590	; 0xfffff1fa
    26d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	rbuffl -= 2;
    26dc:	02050021 	andeq	r0, r5, #33	; 0x21
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e0:	00000000 	andeq	r0, r0, r0
	rbuffl -= 2;
    26e4:	01089403 	tsteq	r8, r3, lsl #8
	physid = phy;
    26e8:	09030205 	stmdbeq	r3, {r0, r2, r9}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	06210501 	strteq	r0, [r1], -r1, lsl #10
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f0:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f4:	3c090305 	stccc	3, cr0, [r9], {5}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f8:	21060305 	tstcs	r6, r5, lsl #6
    26fc:	01060805 	tsteq	r6, r5, lsl #16
	utimer_add (&bckf_timer);
    2700:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
	drvprcs = runthread (cc1350_driver);
    2704:	12052008 	andne	r2, r5, #8
    2708:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    270c:	4c060305 	stcmi	3, cr0, [r6], {5}
	if (drvprcs == 0)
    2710:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
		syserror (ERESOURCE, "cc13");
    2714:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2718:	06025a01 	streq	r5, [r2], -r1, lsl #20
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    271c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2720:	02050020 	andeq	r0, r5, #32
    2724:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2728:	0108a703 	tsteq	r8, r3, lsl #14
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    272c:	09030205 	stmdbeq	r3, {r0, r2, r9}
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2730:	05141301 	ldreq	r1, [r4, #-769]	; 0xfffffcff
    2734:	74030620 	strvc	r0, [r3], #-1568	; 0xfffff9e0
    2738:	031d0501 	tsteq	sp, #4194304	; 0x400000
    273c:	1205200c 	andne	r2, r5, #12
    2740:	200b052e 	andcs	r0, fp, lr, lsr #10
    2744:	20062f05 	andcs	r2, r6, r5, lsl #30
    2748:	01060205 	tsteq	r6, r5, lsl #4
    274c:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    2750:	03052e06 	movweq	r2, #24070	; 0x5e06
	plugch ();
    2754:	07052106 	streq	r2, [r5, -r6, lsl #2]
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2758:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    275c:	09054c06 	stmdbeq	r5, {r1, r2, sl, fp, lr}
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2760:	01050106 	tsteq	r5, r6, lsl #2
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2764:	0603053e 			; <UNDEFINED> instruction: 0x0603053e
    2768:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    276c:	052d0623 	streq	r0, [sp, #-1571]!	; 0xfffff9dd
}
    2770:	054a0606 	strbeq	r0, [sl, #-1542]	; 0xfffff9fa
    2774:	0201060e 	andeq	r0, r1, #14680064	; 0xe00000
    2778:	01010004 	tsteq	r1, r4
    277c:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    2780:	0014f402 	andseq	pc, r4, r2, lsl #8
    2784:	09810300 	stmibeq	r1, {r8, r9}
    2788:	41020501 	tstmi	r2, r1, lsl #10
    278c:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    2790:	06230514 			; <UNDEFINED> instruction: 0x06230514
    2794:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2798:	3c0c0302 	stccc	3, cr0, [ip], {2}
    279c:	0121061f 			; <UNDEFINED> instruction: 0x0121061f
    27a0:	06080501 	streq	r0, [r8], -r1, lsl #10
    27a4:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    27a8:	20580302 	subscs	r0, r8, r2, lsl #6
    27ac:	23031c05 	movwcs	r1, #15365	; 0x3c05
    27b0:	03020520 	movweq	r0, #9504	; 0x2520
    27b4:	2e062e5d 	mcrcs	14, 0, r2, cr6, cr13, {2}
    27b8:	01080514 	tsteq	r8, r4, lsl r5
    27bc:	01060905 	tsteq	r6, r5, lsl #18
    27c0:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    27c4:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    27c8:	3d3d2000 	ldccc	0, cr2, [sp, #-0]
    27cc:	0d050204 	sfmeq	f0, 4, [r5, #-16]
    27d0:	7bcf0306 	blvc	ff3c33f0 <_estack+0xdf3be3f0>
    27d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    27d8:	b103060f 	tstlt	r3, pc, lsl #12
    27dc:	02052004 	andeq	r2, r5, #4
    27e0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    27e4:	7bca0324 	blvc	ff28347c <_estack+0xdf27e47c>
    27e8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    27ec:	01060d05 	tsteq	r6, r5, lsl #26
    27f0:	02050104 	andeq	r0, r5, #4, 2
    27f4:	2004b103 	andcs	fp, r4, r3, lsl #2
    27f8:	01012f06 	tsteq	r1, r6, lsl #30
    27fc:	06010558 			; <UNDEFINED> instruction: 0x06010558
    2800:	06030513 			; <UNDEFINED> instruction: 0x06030513
    2804:	587fb603 	ldmdapl	pc!, {r0, r1, r9, sl, ip, sp, pc}^	; <UNPREDICTABLE>
    2808:	01060605 	tsteq	r6, r5, lsl #12
    280c:	4b060405 	blmi	183828 <__ccfg+0x163880>
    2810:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2814:	06050520 	streq	r0, [r5], -r0, lsr #10
    2818:	0513134b 	ldreq	r1, [r3, #-843]	; 0xfffffcb5
    281c:	2d010609 	stccs	6, cr0, [r1, #-36]	; 0xffffffdc
    2820:	05280c05 	streq	r0, [r8, #-3077]!	; 0xfffff3fb
    2824:	20770308 	rsbscs	r0, r7, r8, lsl #6
    2828:	32060505 	andcc	r0, r6, #20971520	; 0x1400000
    282c:	06080515 			; <UNDEFINED> instruction: 0x06080515
    2830:	0604050f 	streq	r0, [r4], -pc, lsl #10
    2834:	03050525 	movweq	r0, #21797	; 0x5525
    2838:	053d7431 	ldreq	r7, [sp, #-1073]!	; 0xfffffbcf
    283c:	4e030604 	cfmadd32mi	mvax0, mvfx0, mvfx3, mvfx4
    2840:	411d054a 	tstmi	sp, sl, asr #10
    2844:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    2848:	01060805 	tsteq	r6, r5, lsl #16
    284c:	21060605 	tstcs	r6, r5, lsl #12
    2850:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    2854:	3c180511 	cfldr32cc	mvfx0, [r8], {17}
    2858:	052f0605 	streq	r0, [pc, #-1541]!	; 225b <rf_on.part.0+0xc3>
strand (__outserial, const char*)
    285c:	0546060b 	strbeq	r0, [r6, #-1547]	; 0xfffff9f5
    2860:	2e310304 	cdpcs	3, 3, cr0, cr1, cr4, {0}
    2864:	01060805 	tsteq	r6, r5, lsl #16
    2868:	05206a03 	streq	r6, [r0, #-2563]!	; 0xfffff5fd
endstrand
    286c:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    2870:	1505132e 	strne	r1, [r5, #-814]	; 0xfffffcd2
	ptr = data;
    2874:	0e050106 	adfeqs	f0, f5, f6
    2878:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
	if (*ptr)
    287c:	2f060605 	svccs	0x00060605
		len = strlen (ptr);
    2880:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    2884:	06070501 	streq	r0, [r7], -r1, lsl #10
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2888:	060b0521 	streq	r0, [fp], -r1, lsr #10
    288c:	06060501 	streq	r0, [r6], -r1, lsl #10
    2890:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2894:	06050501 	streq	r0, [r5], -r1, lsl #10
    2898:	061c0523 	ldreq	r0, [ip], -r3, lsr #10
	len -= quant;
    289c:	06050501 	streq	r0, [r5], -r1, lsl #10
    28a0:	14060559 	strne	r0, [r6], #-1369	; 0xfffffaa7
    28a4:	01061605 	tsteq	r6, r5, lsl #12
	if (len == 0) {
    28a8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
		ufree (data);
    28ac:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
		finish;
    28b0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    28b4:	0605200c 	streq	r2, [r5], -ip
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28b8:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    28bc:	0b050106 	bleq	142cdc <__ccfg+0x122d34>
    28c0:	08052a06 	stmdaeq	r5, {r1, r2, r9, fp, sp}
    28c4:	1c051406 	cfstrsne	mvf1, [r5], {6}
    28c8:	0605051d 			; <UNDEFINED> instruction: 0x0605051d
strand (__inserial, address)
    28cc:	13060535 	movwne	r0, #25909	; 0x6535
    28d0:	06090559 			; <UNDEFINED> instruction: 0x06090559
    28d4:	1f080514 	svcne	0x00080514
    28d8:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    28dc:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
	if (__inpline != NULL)
    28e0:	01060905 	tsteq	r6, r5, lsl #18
    28e4:	21060605 	tstcs	r6, r5, lsl #12
		finish;
    28e8:	01061605 	tsteq	r6, r5, lsl #12
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28ec:	222c0805 	eorcs	r0, ip, #327680	; 0x50000
    28f0:	1b060b05 	blne	18550c <__ccfg+0x165564>
    28f4:	13060605 	movwne	r0, #26117	; 0x6605
    28f8:	03060505 	movweq	r0, #25861	; 0x6505
		umwait (IM_INIT);
    28fc:	08052009 	stmdaeq	r5, {r0, r3, sp}
		release;
    2900:	06050106 	streq	r0, [r5], -r6, lsl #2
	savedata (data);
    2904:	1c052f06 	stcne	15, cr2, [r5], {6}
	len = MAX_LINE_LENGTH;
    2908:	016e0306 	cmneq	lr, r6, lsl #6
	io (IM_READ, __cport, READ, ptr, 1);
    290c:	12030a05 	andne	r0, r3, #20480	; 0x5000
    2910:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2914:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    2918:	20170306 	andscs	r0, r7, r6, lsl #6
	if (ptr == (char*) data) { // new line
    291c:	0607052f 	streq	r0, [r7], -pc, lsr #10
    2920:	060b0501 	streq	r0, [fp], -r1, lsl #10
		if (*ptr == '\0') { // bin cmd
    2924:	060c051e 			; <UNDEFINED> instruction: 0x060c051e
			proceed (IM_BIN);
    2928:	200b0501 	andcs	r0, fp, r1, lsl #10
    292c:	03060405 	movweq	r0, #25605	; 0x6405
		if (*ptr < 0x20)
    2930:	0b023c0c 	bleq	91968 <__ccfg+0x719c0>
    2934:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			proceed (IM_READ);
    2938:	0205000f 	andeq	r0, r5, #15
    293c:	00001630 	andeq	r1, r0, r0, lsr r6
	if (*ptr == '\n' || *ptr == '\r') {
    2940:	010aae03 	tsteq	sl, r3, lsl #28
    2944:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    2948:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
		*ptr = '\0';
    294c:	25052e18 	strcs	r2, [r5, #-3608]	; 0xfffff1e8
		__inpline = (char*)data;
    2950:	20180520 	andscs	r0, r8, r0, lsr #10
		finish;
    2954:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
	if (len) {
    2958:	02052e0c 	andeq	r2, r5, #12, 28	; 0xc0
		ptr++;
    295c:	14062106 	strne	r2, [r6], #-262	; 0xfffffefa
    2960:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
		len--;
    2964:	01010008 	tsteq	r1, r8
	proceed (IM_READ);
    2968:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
	io (IM_BIN, __cport, READ, ptr, 1);
    296c:	01a10003 			; <UNDEFINED> instruction: 0x01a10003
    2970:	01020000 	mrseq	r0, (UNDEF: 2)
    2974:	000d0efb 	strdeq	r0, [sp], -fp
    2978:	01010101 	tsteq	r1, r1, lsl #2
    297c:	01000000 	mrseq	r0, (UNDEF: 0)
	len -= 2;
    2980:	2f010000 	svccs	0x00010000
	if (len > *ptr + 1) // 1 for 0x04
    2984:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2988:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
		len = *ptr + 1;
    298c:	2f6e6974 	svccs	0x006e6974
    2990:	6b736544 	blvs	1cdbea8 <__ccfg+0x1cbbf00>
	ptr++;
    2994:	2f706f74 	svccs	0x00706f74
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2998:	4f534c4f 	svcmi	0x00534c4f
    299c:	2f54454e 	svccs	0x0054454e
    29a0:	4f434950 	svcmi	0x00434950
    29a4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    29a8:	2f534f63 	svccs	0x00534f63
    29ac:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
	len -= quant;
    29b0:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
		__inpline = (char*)data;
    29b4:	00497465 	subeq	r7, r9, r5, ror #8
		finish;
    29b8:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
	ptr += quant;
    29bc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    29c0:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
endstrand
    29c4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    29c8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
	proceed (IM_BINL);
    29cc:	61652d65 	cmnvs	r5, r5, ror #26
endstrand
    29d0:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    29d4:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    29d8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    29dc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    29e0:	6f682f00 	svcvs	0x00682f00
    29e4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2838 <tcv_ope_null+0x24>
		if (res && (d < n))
    29e8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    29ec:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    29f0:	6f746b73 	svcvs	0x00746b73
    29f4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			res [d] = (char) c;
    29f8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		d++;
    29fc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a00:	2f534f43 	svccs	0x00534f43
    2a04:	4f636950 	svcmi	0x00636950
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a08:	43432f53 	movtmi	r2, #16211	; 0x3f53
    2a0c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    2a10:	6f682f00 	svcvs	0x00682f00
				enci (10000);
    2a14:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2868 <__outserial+0xc>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a18:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2a1c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	d = 0;
    2a20:	6f746b73 	svcvs	0x00746b73
		c = *fm++;
    2a24:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		if (c == '\\') {
    2a28:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			if ((c = *fm++) == '\0') {
    2a2c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a30:	2f534f43 	svccs	0x00534f43
				outc ('\\');
    2a34:	4f636950 	svcmi	0x00636950
			if ((c = *fm++) == '\0') {
    2a38:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
				outc ('\\');
    2a3c:	2f656d6f 	svccs	0x00656d6f
    2a40:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
			outc (c);
    2a44:	442f6e69 	strtmi	r6, [pc], #-3689	; 2a4c <__pi_vfparse+0x44>
    2a48:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
			if (c == '\0')
    2a4c:	4f2f706f 	svcmi	0x002f706f
    2a50:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			outc (c);
    2a54:	502f5445 	eorpl	r5, pc, r5, asr #8
				outc (val);
    2a58:	534f4349 	movtpl	r4, #62281	; 0xf349
				val = (word) va_arg (ap, aword);
    2a5c:	6369502f 	cmnvs	r9, #47	; 0x2f
		if (c == '%') {
    2a60:	6b2f534f 	blvs	bd77a4 <__ccfg+0xbb77fc>
    2a64:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
			c = *fm++;
    2a68:	7400006c 	strvc	r0, [r0], #-108	; 0xffffff94
			switch (c) {
    2a6c:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
    2a70:	00000100 	andeq	r0, r0, r0, lsl #2
    2a74:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2a78:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2a7c:	00000200 	andeq	r0, r0, r0, lsl #4
    2a80:	61647473 	smcvs	18243	; 0x4743
    2a84:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    2a88:	00000200 	andeq	r0, r0, r0, lsl #4
				outc ('%');
    2a8c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    2a90:	0300682e 	movweq	r6, #2094	; 0x82e
				outc (c);
    2a94:	616d0000 	cmnvs	sp, r0
    2a98:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    2a9c:	00000300 	andeq	r0, r0, r0, lsl #6
				if (c == '\0')
    2aa0:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
				return d;
    2aa4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
}
    2aa8:	0300682e 	movweq	r6, #2094	; 0x82e
    2aac:	75620000 	strbvc	r0, [r2, #-0]!
			switch (c) {
    2ab0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    2ab4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2ab8:	00682e73 	rsbeq	r2, r8, r3, ror lr
				for (i = 12; ; i -= 4) {
    2abc:	73000003 	movwvc	r0, #3
				val = (word) va_arg (ap, aword);
    2ac0:	6f697379 	svcvs	0x00697379
						[ (val >> i) & 0xf ]);
    2ac4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    2ac8:	63740000 	cmnvs	r4, #0
    2acc:	65645f76 	strbvs	r5, [r4, #-3958]!	; 0xfffff08a
					outc (__pi_hex_enc_table
    2ad0:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    2ad4:	00000100 	andeq	r0, r0, r0, lsl #2
					if (i == 0)
    2ad8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    2adc:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
				for (i = 12; ; i -= 4) {
    2ae0:	00000500 	andeq	r0, r0, r0, lsl #10
				val = (word) va_arg (ap, aword);
    2ae4:	70766374 	rsbsvc	r6, r6, r4, ror r3
				if (c == 'd' && (val & 0x8000) != 0) {
    2ae8:	2e737968 	vsubcs.f16	s15, s6, s17	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    2aec:	00010068 	andeq	r0, r1, r8, rrx
				if (c == 'd' && (val & 0x8000) != 0) {
    2af0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2af4:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 2afc <__pi_vfparse+0xf4>
					outc ('-');
    2af8:	61645f65 	cmnvs	r4, r5, ror #30
    2afc:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
					val = (~val) + 1;
    2b00:	00000100 	andeq	r0, r0, r0, lsl #2
    2b04:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
				for (i = 12; ; i -= 4) {
    2b08:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
				enci (10000);
    2b0c:	00003e6e 	andeq	r3, r0, lr, ror #28
    2b10:	05000000 	streq	r0, [r0, #-0]
    2b14:	02050031 	andeq	r0, r5, #49	; 0x31
    2b18:	00001654 	andeq	r1, r0, r4, asr r6
    2b1c:	01029303 	tsteq	r2, r3, lsl #6
    2b20:	13170205 	tstne	r7, #1342177280	; 0x50000000
    2b24:	06310514 			; <UNDEFINED> instruction: 0x06310514
    2b28:	20017803 	andcs	r7, r1, r3, lsl #16
    2b2c:	05260705 	streq	r0, [r6, #-1797]!	; 0xfffff8fb
    2b30:	05052216 	streq	r2, [r5, #-534]	; 0xfffffdea
    2b34:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2b38:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    2b3c:	1f0e0513 	svcne	0x000e0513
    2b40:	21060205 	tstcs	r6, r5, lsl #4
    2b44:	01061a05 	tsteq	r6, r5, lsl #20
    2b48:	03060205 	movweq	r0, #25093	; 0x6205
    2b4c:	0105200c 	tsteq	r5, ip
    2b50:	01021606 	tsteq	r2, r6, lsl #12
				if (c == 'd' || c == 'u') {
    2b54:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2b58:	0205002e 	andeq	r0, r5, #46	; 0x2e
					if (c == 'd' &&
    2b5c:	0000166a 	andeq	r1, r0, sl, ror #12
					val = va_arg (ap, lword);
    2b60:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
					fm++;
    2b64:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
					if (c == 'd' &&
    2b68:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2b6c:	03052005 	movweq	r2, #20485	; 0x5005
						outc ('-');
    2b70:	29052f06 	stmdbcs	r5, {r1, r2, r8, r9, sl, fp, sp}
    2b74:	1c050106 	stfnes	f0, [r5], {6}
						val = (~val) + 1;
    2b78:	0603052e 	streq	r0, [r3], -lr, lsr #10
				enci (10000);
    2b7c:	06290521 	strteq	r0, [r9], -r1, lsr #10
					enci (1000000000UL);
    2b80:	201c0501 	andscs	r0, ip, r1, lsl #10
    2b84:	21060305 	tstcs	r6, r5, lsl #6
    2b88:	01061a05 	tsteq	r6, r5, lsl #20
    2b8c:	024c0105 	subeq	r0, ip, #1073741825	; 0x40000001
    2b90:	01010001 	tsteq	r1, r1
    2b94:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2b98:	00168402 	andseq	r8, r6, r2, lsl #8
    2b9c:	02830300 	addeq	r0, r3, #0, 6
    2ba0:	16020501 	strne	r0, [r2], -r1, lsl #10
    2ba4:	0e062e05 	cdpeq	14, 0, cr2, cr6, cr5, {0}
    2ba8:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2bac:	1301012f 	movwne	r0, #4399	; 0x112f
    2bb0:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    2bb4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2bb8:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    2bbc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2bc0:	0205003a 	andeq	r0, r5, #58	; 0x3a
				} else if (c == 'x') {
    2bc4:	00001694 	muleq	r0, r4, r6
					for (i = 28; ; i -= 4) {
    2bc8:	0101a703 	tsteq	r1, r3, lsl #14
					val = va_arg (ap, lword);
    2bcc:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
							[ (val >> i) & 0xf ]);
    2bd0:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
    2bd4:	01240602 			; <UNDEFINED> instruction: 0x01240602
						outc (__pi_hex_enc_table
    2bd8:	1c063a05 			; <UNDEFINED> instruction: 0x1c063a05
    2bdc:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2be0:	05134a20 	ldreq	r4, [r3, #-2592]	; 0xfffff5e0
						if (i == 0)
    2be4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2be8:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
					for (i = 28; ; i -= 4) {
    2bec:	06052f02 	streq	r2, [r5], -r2, lsl #30
					outc ('%');
    2bf0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2bf4:	06030520 	streq	r0, [r3], -r0, lsr #10
    2bf8:	06170530 			; <UNDEFINED> instruction: 0x06170530
					outc ('l');
    2bfc:	21140501 	tstcs	r4, r1, lsl #10
    2c00:	2f060305 	svccs	0x00060305
				val = (word) va_arg (ap, aword);
    2c04:	01060405 	tsteq	r6, r5, lsl #8
				outc (val);
    2c08:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    2c0c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
				while (*st != '\0') {
    2c10:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2c14:	05280602 	streq	r0, [r8, #-1538]!	; 0xfffff9fe
    2c18:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    2c1c:	03054b01 	movweq	r4, #23297	; 0x5b01
					outc (*st);
    2c20:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    2c24:	01061405 	tsteq	r6, r5, lsl #8
					st++;
    2c28:	21060305 	tstcs	r6, r5, lsl #6
		c = *fm++;
    2c2c:	01061705 	tsteq	r6, r5, lsl #14
    2c30:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
    2c34:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
char *vform (char *res, const char *fm, va_list aq) {
    2c38:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2c3c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
	if (res != NULL) {
    2c40:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c44:	01010005 	tsteq	r1, r5
    2c48:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    2c4c:	0016e002 	andseq	lr, r6, r2
}
    2c50:	01df0300 	bicseq	r0, pc, r0, lsl #6
    2c54:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
	fml = strlen (fm) + 17;
    2c58:	09030602 	stmdbeq	r3, {r1, r9, sl}
    2c5c:	04053020 	streq	r3, [r5], #-32	; 0xffffffe0
    2c60:	061b0584 	ldreq	r0, [fp], -r4, lsl #11
	if ((res = (char*) umalloc (fml)) == NULL)
    2c64:	06040501 	streq	r0, [r4], -r1, lsl #10
    2c68:	5806014c 	stmdapl	r6, {r2, r3, r6, r8}
    2c6c:	27064a06 	strcs	r4, [r6, -r6, lsl #20]
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c70:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
    2c74:	06010513 			; <UNDEFINED> instruction: 0x06010513
    2c78:	05201203 	streq	r1, [r0, #-515]!	; 0xfffffdfd
    2c7c:	2e750304 	cdpcs	3, 7, cr0, cr5, cr4, {0}
		ufree (res);
    2c80:	1b052b06 	blne	14d8a0 <__ccfg+0x12d8f8>
		goto Again;
    2c84:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	if (buf == NULL || fmt == NULL)
    2c88:	90014c06 	andls	r4, r1, r6, lsl #24
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c8c:	055b132e 	ldrbeq	r1, [fp, #-814]	; 0xfffffcd2
	if (buf == NULL || fmt == NULL)
    2c90:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    2c94:	2e780304 	cdpcs	3, 7, cr0, cr8, cr4, {0}
    2c98:	02360105 	eorseq	r0, r6, #1073741825	; 0x40000001
		    	    case 'u': scanu (lword); break;
    2c9c:	0101000c 	tsteq	r1, ip
			while (isspace (*buf)) buf++;
    2ca0:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    2ca4:	00176c02 	andseq	r6, r7, r2, lsl #24
	while (*fmt != '\0') {
    2ca8:	02ba0300 	adcseq	r0, sl, #0, 6
		if (*fmt++ != '%')
    2cac:	18020501 	stmdane	r2, {r0, r8, sl}
		switch (*fmt++) {
    2cb0:	06310514 			; <UNDEFINED> instruction: 0x06310514
    2cb4:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    2cb8:	20090306 	andcs	r0, r9, r6, lsl #6
    2cbc:	052d0405 	streq	r0, [sp, #-1029]!	; 0xfffffbfb
    2cc0:	052f0602 	streq	r0, [pc, #-1538]!	; 26c6 <phys_cc1350+0x7e>
    2cc4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2cc8:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
}
    2ccc:	4a066606 	bmi	19c4ec <__ccfg+0x17c544>
		switch (*fmt++) {
    2cd0:	3b062106 	blcc	18b0f0 <__ccfg+0x16b148>
    2cd4:	66060113 			; <UNDEFINED> instruction: 0x66060113
    2cd8:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2cdc:	06010513 			; <UNDEFINED> instruction: 0x06010513
			while (isspace (*buf)) buf++;
    2ce0:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    2ce4:	2e770303 	cdpcs	3, 7, cr0, cr7, cr3, {0}
    2ce8:	01053606 	tsteq	r5, r6, lsl #12
    2cec:	03052106 	movweq	r2, #20742	; 0x5106
    2cf0:	000b022d 	andeq	r0, fp, sp, lsr #4
    2cf4:	4a050101 	bmi	143100 <__ccfg+0x123158>
			if (*buf == '\0')
    2cf8:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
			if (*buf != ',') {
    2cfc:	03000017 	movweq	r0, #23
			sap = va_arg (ap, char*);
    2d00:	050103f5 	streq	r0, [r1, #-1013]	; 0xfffffc0b
			nc++;
    2d04:	13131402 	tstne	r3, #33554432	; 0x2000000
			if (*buf != ',') {
    2d08:	4a051314 	bmi	147960 <__ccfg+0x1279b8>
				while (!isspace (*buf) && *buf != ',' &&
    2d0c:	01790306 	cmneq	r9, r6, lsl #6
    2d10:	0305053c 	movweq	r0, #21820	; 0x553c
    2d14:	4a053c0b 	bmi	151d48 <__ccfg+0x131da0>
    2d18:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    2d1c:	24062702 	strcs	r2, [r6], #-1794	; 0xfffff8fe
    2d20:	01060505 	tsteq	r6, r5, lsl #10
    2d24:	05203005 	streq	r3, [r0, #-5]!
			while (isspace (*buf)) buf++;
    2d28:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    2d2c:	3c30053d 	cfldr32cc	mvfx0, [r0], #-244	; 0xffffff0c
    2d30:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2d34:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    2d38:	15030603 	strne	r0, [r3, #-1539]	; 0xfffff9fd
			if (*buf == ',') buf++;
    2d3c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2d40:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
			*sap = '\0';
    2d44:	12051713 	andne	r1, r5, #4980736	; 0x4c0000
			break;
    2d48:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		    case 'd': scani (word); break;
    2d4c:	0f057606 	svceq	0x00057606
    2d50:	060a0501 	streq	r0, [sl], -r1, lsl #10
    2d54:	06030520 	streq	r0, [r3], -r0, lsr #10
    2d58:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    2d5c:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2d60:	1f062205 	svcne	0x00062205
    2d64:	01062405 	tsteq	r6, r5, lsl #8
    2d68:	20060f05 	andcs	r0, r6, r5, lsl #30
    2d6c:	01060205 	tsteq	r6, r5, lsl #4
    2d70:	05330a05 	ldreq	r0, [r3, #-2565]!	; 0xfffff5fb
    2d74:	2e130301 	cdpcs	3, 1, cr0, cr3, cr1, {0}
    2d78:	03060205 	movweq	r0, #25093	; 0x6205
    2d7c:	1a056673 	bne	15c750 <__ccfg+0x13c7a8>
    2d80:	13051506 	movwne	r1, #21766	; 0x5506
    2d84:	06020539 			; <UNDEFINED> instruction: 0x06020539
    2d88:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
    2d8c:	1e020514 	mcrne	5, 0, r0, cr2, cr4, {0}
    2d90:	14132f06 	ldrne	r2, [r3], #-3846	; 0xfffff0fa
    2d94:	143c4a01 	ldrtne	r4, [ip], #-2561	; 0xfffff5ff
    2d98:	01060605 	tsteq	r6, r5, lsl #12
    2d9c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2da0:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2da4:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2da8:	052f0602 	streq	r0, [pc, #-1538]!	; 27ae <phys_cc1350+0x166>
    2dac:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2db0:	6d030602 	stcvs	6, cr0, [r3, #-8]
    2db4:	13051520 	movwne	r1, #21792	; 0x5520
    2db8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		    case 'u': scanu (word); break;
    2dbc:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    2dc0:	03050106 	movweq	r0, #20742	; 0x5106
    2dc4:	10023d06 	andne	r3, r2, r6, lsl #26
    2dc8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2dcc:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2dd0:	00000000 	andeq	r0, r0, r0
    2dd4:	0104a803 	tsteq	r4, r3, lsl #16
    2dd8:	13140205 	tstne	r4, #1342177280	; 0x50000000
    2ddc:	3a050114 	bcc	143234 <__ccfg+0x12328c>
    2de0:	05201b06 	streq	r1, [r0, #-2822]!	; 0xfffff4fa
    2de4:	06202502 	strteq	r2, [r0], -r2, lsl #10
    2de8:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2dec:	143c7903 	ldrtne	r7, [ip], #-2307	; 0xfffff6fd
    2df0:	06011514 			; <UNDEFINED> instruction: 0x06011514
    2df4:	2e064a58 			; <UNDEFINED> instruction: 0x2e064a58
    2df8:	0605142e 	streq	r1, [r5], -lr, lsr #8
    2dfc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2e00:	300a052e 	andcc	r0, sl, lr, lsr #10
		    case 'x': scanx (word); break;
    2e04:	41060305 	tstmi	r6, r5, lsl #6
    2e08:	2b080513 	blcs	20425c <__ccfg+0x1e42b4>
    2e0c:	01060a05 	tsteq	r6, r5, lsl #20
    2e10:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    2e14:	3d330602 	ldccc	6, cr0, [r3, #-8]!
    2e18:	01061305 	tsteq	r6, r5, lsl #6
    2e1c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    2e20:	13060105 	movwne	r0, #24837	; 0x6105
    2e24:	01000b02 	tsteq	r0, r2, lsl #22
    2e28:	00430501 	subeq	r0, r3, r1, lsl #10
    2e2c:	189c0205 	ldmne	ip, {r0, r2, r9}
    2e30:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    2e34:	02050104 	andeq	r0, r5, #4, 2
    2e38:	06050516 			; <UNDEFINED> instruction: 0x06050516
    2e3c:	2f0f0501 	svccs	0x000f0501
    2e40:	053b2605 	ldreq	r2, [fp, #-1541]!	; 0xfffff9fb
    2e44:	0205211d 	andeq	r2, r5, #1073741831	; 0x40000007
    2e48:	10053106 	andne	r3, r5, r6, lsl #2
    2e4c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2e50:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2e54:	0a050106 	beq	143274 <__ccfg+0x1232cc>
    2e58:	3201052b 	andcc	r0, r1, #180355072	; 0xac00000
    2e5c:	01000402 	tsteq	r0, r2, lsl #8
    2e60:	003c0501 	eorseq	r0, ip, r1, lsl #10
    2e64:	00000205 	andeq	r0, r0, r5, lsl #4
    2e68:	d5030000 	strle	r0, [r3, #-0]
    2e6c:	02050104 	andeq	r0, r5, #4, 2
    2e70:	14131319 	ldrne	r1, [r3], #-793	; 0xfffffce7
    2e74:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    2e78:	20207503 	eorcs	r7, r0, r3, lsl #10
			switch (*fmt++) {
    2e7c:	0b030205 	bleq	c3698 <__ccfg+0xa36f0>
    2e80:	4a062020 	bmi	18af08 <__ccfg+0x16af60>
    2e84:	20130306 	andscs	r0, r3, r6, lsl #6
    2e88:	3c6d0306 	stclcc	3, cr0, [sp], #-24	; 0xffffffe8
    2e8c:	04051314 	streq	r1, [r5], #-788	; 0xfffffcec
    2e90:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		    	    case 'd': scani (lword); break;
    2e94:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2e98:	03050106 	movweq	r0, #20742	; 0x5106
    2e9c:	06053006 	streq	r3, [r5], -r6
    2ea0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2ea4:	053d4b06 	ldreq	r4, [sp, #-2822]!	; 0xfffff4fa
    2ea8:	013d3302 	teqeq	sp, r2, lsl #6
    2eac:	14061501 	strne	r1, [r6], #-1281	; 0xfffffaff
    2eb0:	051e0405 	ldreq	r0, [lr, #-1029]	; 0xfffffbfb
    2eb4:	01300602 	teqeq	r0, r2, lsl #12
    2eb8:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    2ebc:	3e132e2e 	cdpcc	14, 1, cr2, cr3, cr14, {1}
    2ec0:	13062205 	movwne	r2, #25093	; 0x6205
    2ec4:	05571505 	ldrbeq	r1, [r7, #-1285]	; 0xfffffafb
    2ec8:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    2ecc:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2ed0:	2e70030a 	cdpcs	3, 7, cr0, cr0, cr10, {0}
    2ed4:	01000b02 	tsteq	r0, r2, lsl #22
    2ed8:	00380501 	eorseq	r0, r8, r1, lsl #10
    2edc:	00000205 	andeq	r0, r0, r5, lsl #4
    2ee0:	fc030000 	stc2	0, cr0, [r3], {-0}
    2ee4:	02050104 	andeq	r0, r5, #4, 2
    2ee8:	13131316 	tstne	r3, #1476395008	; 0x58000000
    2eec:	38050114 	stmdacc	r5, {r2, r4, r8}
		    	    case 'x': scanx (lword); break;
    2ef0:	20770306 	rsbscs	r0, r7, r6, lsl #6
    2ef4:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2ef8:	4a062020 	bmi	18af80 <__ccfg+0x16afd8>
    2efc:	03060305 	movweq	r0, #25349	; 0x6305
    2f00:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    2f04:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    2f08:	1a051414 	bne	147f60 <__ccfg+0x127fb8>
    2f0c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2f10:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f14:	1902052f 	stmdbne	r2, {r0, r1, r2, r3, r5, r8, sl}
    2f18:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    2f1c:	20050501 	andcs	r0, r5, r1, lsl #10
    2f20:	03060305 	movweq	r0, #25349	; 0x6305
    2f24:	0505200a 	streq	r2, [r5, #-10]
    2f28:	01750306 	cmneq	r5, r6, lsl #6
    2f2c:	0b030a05 	bleq	c5748 <__ccfg+0xa57a0>
    2f30:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    2f34:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f38:	06040501 	streq	r0, [r4], -r1, lsl #10
    2f3c:	062c052f 	strteq	r0, [ip], -pc, lsr #10
    2f40:	21060511 	tstcs	r6, r1, lsl r5
    2f44:	1f062a05 	svcne	0x00062a05
    2f48:	6f030905 	svcvs	0x00030905
    2f4c:	06210520 	strteq	r0, [r1], -r0, lsr #10
    2f50:	200c0501 	andcs	r0, ip, r1, lsl #10
    2f54:	2f060305 	svccs	0x00060305
    2f58:	01062005 	tsteq	r6, r5
    2f5c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
		    	    case 'd': scani (lword); break;
    2f60:	06052020 	streq	r2, [r5], -r0, lsr #32
    2f64:	06020520 	streq	r0, [r2], -r0, lsr #10
    2f68:	05051333 	streq	r1, [r5, #-819]	; 0xfffffccd
    2f6c:	03050106 	movweq	r0, #20742	; 0x5106
    2f70:	05422a06 	strbeq	r2, [r2, #-2566]	; 0xfffff5fa
    2f74:	050f0605 	streq	r0, [pc, #-1541]	; 2977 <__inserial+0xab>
    2f78:	1a05230a 	bne	14bba8 <__ccfg+0x12bc00>
		    	    case 'u': scanu (lword); break;
    2f7c:	03052006 	movweq	r2, #20486	; 0x5006
    2f80:	01050106 	tsteq	r5, r6, lsl #2
    2f84:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    2f88:	74030604 	strvc	r0, [r3], #-1540	; 0xfffff9fc
    2f8c:	06080520 	streq	r0, [r8], -r0, lsr #10
    2f90:	20070501 	andcs	r0, r7, r1, lsl #10
    2f94:	2f060505 	svccs	0x00060505
    2f98:	10062c05 	andne	r2, r6, r5, lsl #24
    2f9c:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    2fa0:	021e062a 	andseq	r0, lr, #44040192	; 0x2a00000
    2fa4:	0101000a 	tsteq	r1, sl
    2fa8:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2fac:	00000002 	andeq	r0, r0, r2
    2fb0:	05a30300 	streq	r0, [r3, #768]!	; 0x300
    2fb4:	16020501 	strne	r0, [r2], -r1, lsl #10
    2fb8:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2fbc:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2fc0:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
		    	    case 'x': scanx (lword); break;
    2fc4:	20090302 	andcs	r0, r9, r2, lsl #6
    2fc8:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
			if ((c = *buf++) == '\0')
    2fcc:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2fd0:	0602052e 	streq	r0, [r2], -lr, lsr #10
			sap = va_arg (ap, char*);
    2fd4:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
			nc++;
    2fd8:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
			break;
    2fdc:	20050501 	andcs	r0, r5, r1, lsl #10
			while (isspace (*buf)) buf++;
    2fe0:	2f060305 	svccs	0x00060305
    2fe4:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
    2fe8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
						*sap++ = *buf++;
    2fec:	3805201b 	stmdacc	r5, {r0, r1, r3, r4, sp}
    2ff0:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
			while (isspace (*buf)) buf++;
    2ff4:	b3030603 	movwlt	r0, #13827	; 0x3603
    2ff8:	0505207c 	streq	r2, [r5, #-124]	; 0xffffff84
    2ffc:	03050106 	movweq	r0, #20742	; 0x5106
		return 0;
    3000:	06052106 	streq	r2, [r5], -r6, lsl #2
    3004:	03050106 	movweq	r0, #20742	; 0x5106
		    case 'x': scanx (word); break;
    3008:	11053106 	tstne	r5, r6, lsl #2
    300c:	06130529 	ldreq	r0, [r3], -r9, lsr #10
		    	    case 'x': scanx (lword); break;
    3010:	060f0501 	streq	r0, [pc], -r1, lsl #10
    3014:	06050520 	streq	r0, [r5], -r0, lsr #10
    3018:	06090513 			; <UNDEFINED> instruction: 0x06090513
    301c:	2003dc03 	andcs	sp, r3, r3, lsl #24
    3020:	01062105 	tsteq	r6, r5, lsl #2
    3024:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    3028:	052f0603 	streq	r0, [pc, #-1539]!	; 2a2d <__pi_vfparse+0x25>
    302c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    3030:	20052006 	andcs	r2, r5, r6
    3034:	20060520 	andcs	r0, r6, r0, lsr #10
    3038:	33060205 	movwcc	r0, #25093	; 0x6205
    303c:	01061b05 	tsteq	r6, r5, lsl #22
    3040:	2b060305 	blcs	183c5c <__ccfg+0x163cb4>
    3044:	03060105 	movweq	r0, #24837	; 0x6105
    3048:	02053c0a 	andeq	r3, r5, #2560	; 0xa00
    304c:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    3050:	19050106 	stmdbne	r5, {r1, r2, r8}
    3054:	02052006 	andeq	r2, r5, #6
    3058:	01050106 	tsteq	r5, r6, lsl #2
    305c:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    3060:	77030603 	strvc	r0, [r3, -r3, lsl #12]
    3064:	061e052e 	ldreq	r0, [lr], -lr, lsr #10
    3068:	20060501 	andcs	r0, r6, r1, lsl #10
    306c:	30060405 	andcc	r0, r6, r5, lsl #8
    3070:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3074:	06040501 	streq	r0, [r4], -r1, lsl #10
    3078:	1b290521 	blne	a44504 <__ccfg+0xa2455c>
    307c:	01062b05 	tsteq	r6, r5, lsl #22
    3080:	01000a02 	tsteq	r0, r2, lsl #20
    3084:	00160501 	andseq	r0, r6, r1, lsl #10
    3088:	18c00205 	stmiane	r0, {r0, r2, r9}^
    308c:	cd030000 	stcgt	0, cr0, [r3, #-0]
    3090:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    3094:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    3098:	16050114 			; <UNDEFINED> instruction: 0x16050114
    309c:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    30a0:	42020520 	andmi	r0, r2, #32, 10	; 0x8000000
    30a4:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    30a8:	14380624 	ldrtne	r0, [r8], #-1572	; 0xfffff9dc
    30ac:	58060114 	stmdapl	r6, {r2, r4, r8}
    30b0:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    30b4:	060e0516 			; <UNDEFINED> instruction: 0x060e0516
    30b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    30bc:	060d052f 	streq	r0, [sp], -pc, lsr #10
    30c0:	1e0e0514 	mcrne	5, 0, r0, cr14, cr4, {0}
    30c4:	30060205 	andcc	r0, r6, r5, lsl #4
    30c8:	01060d05 	tsteq	r6, r5, lsl #26
    30cc:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    30d0:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    30d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    30d8:	01054e0a 	tsteq	r5, sl, lsl #28
    30dc:	05202103 	streq	r2, [r0, #-259]!	; 0xfffffefd
    30e0:	5c030604 	stcpl	6, cr0, [r3], {4}
    30e4:	17033d2e 	strne	r3, [r3, -lr, lsr #26]
    30e8:	03020501 	movweq	r0, #9473	; 0x2501
    30ec:	3c012e6e 	stccc	14, cr2, [r1], {110}	; 0x6e
    30f0:	010b032e 	tsteq	fp, lr, lsr #6
    30f4:	01060b05 	tsteq	r6, r5, lsl #22
    30f8:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    30fc:	0505200b 	streq	r2, [r5, #-11]
    3100:	06030558 			; <UNDEFINED> instruction: 0x06030558
    3104:	06060522 	streq	r0, [r6], -r2, lsr #10
    3108:	06040501 	streq	r0, [r4], -r1, lsl #10
    310c:	5002054e 	andpl	r0, r2, lr, asr #10
    3110:	01061005 	tsteq	r6, r5
    3114:	2f060205 	svccs	0x00060205
    3118:	01060505 	tsteq	r6, r5, lsl #10
    311c:	21060305 	tstcs	r6, r5, lsl #6
    3120:	01061a05 	tsteq	r6, r5, lsl #20
    3124:	4b060205 	blmi	183940 <__ccfg+0x163998>
    3128:	01061b05 	tsteq	r6, r5, lsl #22
    312c:	1f2f1505 	svcne	0x002f1505
    3130:	21060205 	tstcs	r6, r5, lsl #4
    3134:	06090514 			; <UNDEFINED> instruction: 0x06090514
    3138:	000c0201 	andeq	r0, ip, r1, lsl #4
    313c:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    3140:	00020500 	andeq	r0, r2, r0, lsl #10
    3144:	03000000 	movweq	r0, #0
    3148:	05010687 	streq	r0, [r1, #-1671]	; 0xfffff979
    314c:	44051602 	strmi	r1, [r5], #-1538	; 0xfffff9fe
    3150:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    3154:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    3158:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    315c:	2e7a0344 	cdpcs	3, 7, cr0, cr10, cr4, {2}
    3160:	03060205 	movweq	r0, #25093	; 0x6205
    3164:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    3168:	03050106 	movweq	r0, #20742	; 0x5106
    316c:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    3170:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3174:	05670603 	strbeq	r0, [r7, #-1539]!	; 0xfffff9fd
    3178:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    317c:	055b0602 	ldrbeq	r0, [fp, #-1538]	; 0xfffff9fe
    3180:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3184:	01010002 	tsteq	r1, r2
    3188:	05004b05 	streq	r4, [r0, #-2821]	; 0xfffff4fb
    318c:	00000002 	andeq	r0, r0, r2
    3190:	06990300 	ldreq	r0, [r9], r0, lsl #6
    3194:	16020501 	strne	r0, [r2], -r1, lsl #10
    3198:	064b0514 			; <UNDEFINED> instruction: 0x064b0514
    319c:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    31a0:	4b05261a 	blmi	14ca10 <__ccfg+0x12ca68>
    31a4:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    31a8:	09030602 	stmdbeq	r3, {r1, r9, sl}
    31ac:	0605054a 	streq	r0, [r5], -sl, asr #10
    31b0:	06030501 	streq	r0, [r3], -r1, lsl #10
    31b4:	1605672f 	strne	r6, [r5], -pc, lsr #14
    31b8:	03050106 	movweq	r0, #20742	; 0x5106
    31bc:	16056706 	strne	r6, [r5], -r6, lsl #14
    31c0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    31c4:	01055a06 	tsteq	r5, r6, lsl #20
    31c8:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    31cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    31d0:	02050031 	andeq	r0, r5, #49	; 0x31
    31d4:	00000000 	andeq	r0, r0, r0
    31d8:	0106aa03 	tsteq	r6, r3, lsl #20
    31dc:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    31e0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    31e4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    31e8:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    31ec:	01010001 	tsteq	r1, r1
    31f0:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    31f4:	00197c02 	andseq	r7, r9, r2, lsl #24
    31f8:	06d10300 	ldrbeq	r0, [r1], r0, lsl #6
    31fc:	06020501 	streq	r0, [r2], -r1, lsl #10
    3200:	1c480524 	cfstr64ne	mvdx0, [r8], {36}	; 0x24
    3204:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3208:	06480501 	strbeq	r0, [r8], -r1, lsl #10
    320c:	0205200e 	andeq	r2, r5, #14
    3210:	4a062024 	bmi	18b2a8 <__ccfg+0x16b300>
    3214:	0105134a 	tsteq	r5, sl, asr #6
    3218:	13051306 	movwne	r1, #21254	; 0x5306
    321c:	0006022d 	andeq	r0, r6, sp, lsr #4
    3220:	46050101 	strmi	r0, [r5], -r1, lsl #2
    3224:	a8020500 	stmdage	r2, {r8, sl}
    3228:	03000019 	movweq	r0, #25
    322c:	050106b2 	streq	r0, [r1, #-1714]	; 0xfffff94e
    3230:	46051702 	strmi	r1, [r5], -r2, lsl #14
    3234:	05050d06 	streq	r0, [r5, #-3334]	; 0xfffff2fa
    3238:	06030525 	streq	r0, [r3], -r5, lsr #10
    323c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3240:	06030501 	streq	r0, [r3], -r1, lsl #10
    3244:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3248:	06040501 	streq	r0, [r4], -r1, lsl #10
    324c:	0705132f 	streq	r1, [r5, -pc, lsr #6]
    3250:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3254:	0b053006 	bleq	14f274 <__ccfg+0x12f2cc>
    3258:	07050106 	streq	r0, [r5, -r6, lsl #2]
    325c:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    3260:	060c0522 	streq	r0, [ip], -r2, lsr #10
    3264:	03010501 	movweq	r0, #5377	; 0x1501
    3268:	03052009 	movweq	r2, #20489	; 0x5009
    326c:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    3270:	01060605 	tsteq	r6, r5, lsl #12
    3274:	30060305 	andcc	r0, r6, r5, lsl #6
    3278:	01061305 	tsteq	r6, r5, lsl #6
    327c:	4c060205 	sfmmi	f0, 4, [r6], {5}
    3280:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    3284:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3288:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
    328c:	09052101 	stmdbeq	r5, {r0, r8, sp}
    3290:	030b052d 	movweq	r0, #46381	; 0xb52d
    3294:	0b023c71 	bleq	92460 <__ccfg+0x724b8>
    3298:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    329c:	0205003d 	andeq	r0, r5, #61	; 0x3d
    32a0:	00000000 	andeq	r0, r0, r0
    32a4:	0106d903 	tsteq	r6, r3, lsl #18
    32a8:	01160205 	tsteq	r6, r5, lsl #4
    32ac:	1c063d05 	stcne	13, cr3, [r6], {5}
    32b0:	20240205 	eorcs	r0, r4, r5, lsl #4
    32b4:	134a4a06 	movtne	r4, #43526	; 0xaa06
    32b8:	01062505 	tsteq	r6, r5, lsl #10
    32bc:	67060205 	strvs	r0, [r6, -r5, lsl #4]
    32c0:	01064305 	tsteq	r6, r5, lsl #6
    32c4:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    32c8:	22052e43 	andcs	r2, r5, #1072	; 0x430
    32cc:	4b01052e 	blmi	4478c <__ccfg+0x247e4>
    32d0:	01000502 	tsteq	r0, r2, lsl #10
    32d4:	003d0501 	eorseq	r0, sp, r1, lsl #10
    32d8:	00000205 	andeq	r0, r0, r5, lsl #4
    32dc:	e2030000 	and	r0, r3, #0
    32e0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32e4:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    32e8:	02051c06 	andeq	r1, r5, #1536	; 0x600
    32ec:	4a062024 	bmi	18b384 <__ccfg+0x16b3dc>
    32f0:	2205134a 	andcs	r1, r5, #671088641	; 0x28000001
    32f4:	01050106 	tsteq	r5, r6, lsl #2
    32f8:	00050267 	andeq	r0, r5, r7, ror #4
    32fc:	40050101 	andmi	r0, r5, r1, lsl #2
    3300:	00020500 	andeq	r0, r2, r0, lsl #10
    3304:	03000000 	movweq	r0, #0
    3308:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    330c:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3310:	7a030640 	bvc	c4c18 <__ccfg+0xa4c70>
    3314:	0c052001 	stceq	0, cr2, [r5], {1}
    3318:	03400526 	movteq	r0, #1318	; 0x526
    331c:	0c052e7a 	stceq	14, cr2, [r5], {122}	; 0x7a
    3320:	2e050526 	cfsh32cs	mvfx0, mvfx5, #22
    3324:	33060205 	movwcc	r0, #25093	; 0x6205
    3328:	06110584 	ldreq	r0, [r1], -r4, lsl #11
    332c:	31020501 	tstcc	r2, r1, lsl #10
    3330:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
    3334:	13210602 			; <UNDEFINED> instruction: 0x13210602
    3338:	11061a05 	tstne	r6, r5, lsl #20
    333c:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    3340:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    3344:	21010501 	tstcs	r1, r1, lsl #10
    3348:	01000202 	tsteq	r0, r2, lsl #4
    334c:	003e0501 	eorseq	r0, lr, r1, lsl #10
    3350:	00000205 	andeq	r0, r0, r5, lsl #4
    3354:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3358:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    335c:	00030216 	andeq	r0, r3, r6, lsl r2
    3360:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
    3364:	08020500 	stmdaeq	r2, {r8, sl}
    3368:	0300001a 	movweq	r0, #26
    336c:	05010785 	streq	r0, [r1, #-1925]	; 0xfffff87b
    3370:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    3374:	7a030645 	bvc	c4c90 <__ccfg+0xa4ce8>
    3378:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    337c:	06030526 	streq	r0, [r3], -r6, lsr #10
    3380:	06060531 			; <UNDEFINED> instruction: 0x06060531
    3384:	06040501 	streq	r0, [r4], -r1, lsl #10
    3388:	0603052f 	streq	r0, [r3], -pc, lsr #10
    338c:	012e062f 			; <UNDEFINED> instruction: 0x012e062f
    3390:	4a062e06 	bmi	18ebb0 <__ccfg+0x16ec08>
    3394:	011d033c 	tsteq	sp, ip, lsr r3
    3398:	01060c05 	tsteq	r6, r5, lsl #24
    339c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    33a0:	0105350a 	tsteq	r5, sl, lsl #10
    33a4:	06040527 	streq	r0, [r4], -r7, lsr #10
    33a8:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    33ac:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    33b0:	12053104 	andne	r3, r5, #4, 2
    33b4:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    33b8:	061d0530 			; <UNDEFINED> instruction: 0x061d0530
    33bc:	06040501 	streq	r0, [r4], -r1, lsl #10
    33c0:	0b052f3d 	bleq	14f0bc <__ccfg+0x12f114>
    33c4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    33c8:	0b054106 	bleq	1537e8 <__ccfg+0x133840>
    33cc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    33d0:	0603052e 	streq	r0, [r3], -lr, lsr #10
    33d4:	060a052f 	streq	r0, [sl], -pc, lsr #10
    33d8:	00090201 	andeq	r0, r9, r1, lsl #4
    33dc:	48050101 	stmdami	r5, {r0, r8}
    33e0:	70020500 	andvc	r0, r2, r0, lsl #10
    33e4:	0300001a 	movweq	r0, #26
    33e8:	05010986 	streq	r0, [r1, #-2438]	; 0xfffff67a
    33ec:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
    33f0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    33f4:	20780348 	rsbscs	r0, r8, r8, asr #6
    33f8:	28050520 	stmdacs	r5, {r5, r8, sl}
    33fc:	05203105 	streq	r3, [r0, #-261]!	; 0xfffffefb
    3400:	03052025 	movweq	r2, #20517	; 0x5025
    3404:	35063d06 	strcc	r3, [r6, #-3334]	; 0xfffff2fa
    3408:	29060205 	stmdbcs	r6, {r0, r2, r9}
    340c:	01061105 	tsteq	r6, r5, lsl #2
    3410:	2f060205 	svccs	0x00060205
    3414:	01061105 	tsteq	r6, r5, lsl #2
    3418:	05222105 	streq	r2, [r2, #-261]!	; 0xfffffefb
    341c:	02051e11 	andeq	r1, r5, #272	; 0x110
    3420:	21053006 	tstcs	r5, r6
    3424:	10050106 	andne	r0, r5, r6, lsl #2
    3428:	0602052e 	streq	r0, [r2], -lr, lsr #10
    342c:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    3430:	06030501 	streq	r0, [r3], -r1, lsl #10
    3434:	3d020521 	cfstr32cc	mvfx0, [r2, #-132]	; 0xffffff7c
    3438:	06010534 			; <UNDEFINED> instruction: 0x06010534
    343c:	000b0213 	andeq	r0, fp, r3, lsl r2
    3440:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    3444:	c0020500 	andgt	r0, r2, r0, lsl #10
    3448:	0300001a 	movweq	r0, #26
    344c:	050109a0 	streq	r0, [r1, #-2464]	; 0xfffff660
    3450:	13131702 	tstne	r3, #524288	; 0x80000
    3454:	44050114 	strmi	r0, [r5], #-276	; 0xfffffeec
    3458:	01770306 	cmneq	r7, r6, lsl #6
    345c:	09030205 	stmdbeq	r3, {r0, r2, r9}
    3460:	0344052e 	movteq	r0, #17710	; 0x452e
    3464:	02052077 	andeq	r2, r5, #119	; 0x77
    3468:	204a0903 	subcs	r0, sl, r3, lsl #18
    346c:	03054a06 	movweq	r4, #23046	; 0x5a06
    3470:	200d0306 	andcs	r0, sp, r6, lsl #6
    3474:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    3478:	05470603 	strbeq	r0, [r7, #-1539]	; 0xfffff9fd
    347c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3480:	28053c06 	stmdacs	r5, {r1, r2, sl, fp, ip, sp}
    3484:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3488:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
    348c:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    3490:	2e16030a 	cdpcs	3, 1, cr0, cr6, cr10, {0}
    3494:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    3498:	06030520 	streq	r0, [r3], -r0, lsr #10
    349c:	013c6703 	teqeq	ip, r3, lsl #14
    34a0:	05132e58 	ldreq	r2, [r3, #-3672]	; 0xfffff1a8
    34a4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    34a8:	02057406 	andeq	r7, r5, #100663296	; 0x6000000
    34ac:	05054206 	streq	r4, [r5, #-518]	; 0xfffffdfa
    34b0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    34b4:	0c053606 	stceq	6, cr3, [r5], {6}
    34b8:	16050106 	strne	r0, [r5], -r6, lsl #2
    34bc:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    34c0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    34c4:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    34c8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    34cc:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    34d0:	05683206 	strbeq	r3, [r8, #-518]!	; 0xfffffdfa
    34d4:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    34d8:	0101000a 	tsteq	r1, sl
    34dc:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    34e0:	001b5c02 	andseq	r5, fp, r2, lsl #24
    34e4:	09d10300 	ldmibeq	r1, {r8, r9}^
    34e8:	17020501 	strne	r0, [r2, -r1, lsl #10]
    34ec:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    34f0:	7803063e 	stmdavc	r3, {r1, r2, r3, r4, r5, r9, sl}
    34f4:	28020520 	stmdacs	r2, {r5, r8, sl}
    34f8:	4a4a0620 	bmi	1284d80 <__ccfg+0x1264dd8>
    34fc:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3500:	06020501 	streq	r0, [r2], -r1, lsl #10
    3504:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3508:	06020501 	streq	r0, [r2], -r1, lsl #10
    350c:	06050521 	streq	r0, [r5], -r1, lsr #10
    3510:	06020501 	streq	r0, [r2], -r1, lsl #10
    3514:	060a0533 			; <UNDEFINED> instruction: 0x060a0533
    3518:	06020501 	streq	r0, [r2], -r1, lsl #10
    351c:	01012f2f 	tsteq	r1, pc, lsr #30
    3520:	06090513 			; <UNDEFINED> instruction: 0x06090513
    3524:	21010501 	tstcs	r1, r1, lsl #10
    3528:	79030a05 	stmdbvc	r3, {r0, r2, r9, fp}
    352c:	00090220 	andeq	r0, r9, r0, lsr #4
    3530:	34050101 	strcc	r0, [r5], #-257	; 0xfffffeff
    3534:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    3538:	0300001b 	movweq	r0, #27
    353c:	050109e8 	streq	r0, [r1, #-2536]	; 0xfffff618
    3540:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    3544:	06340501 	ldrteq	r0, [r4], -r1, lsl #10
    3548:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    354c:	06202702 	strteq	r2, [r0], -r2, lsl #14
    3550:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3554:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3558:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    355c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3560:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3564:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3568:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    356c:	0510060a 	ldreq	r0, [r0, #-1546]	; 0xfffff9f6
    3570:	01053009 	tsteq	r5, r9
    3574:	00070221 	andeq	r0, r7, r1, lsr #4
    3578:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    357c:	d0020500 	andle	r0, r2, r0, lsl #10
    3580:	0300001b 	movweq	r0, #27
    3584:	050109f9 	streq	r0, [r1, #-2553]	; 0xfffff607
    3588:	35051602 	strcc	r1, [r5, #-1538]	; 0xfffff9fe
    358c:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    3590:	2c0c0526 	cfstr32cs	mvfx0, [ip], {38}	; 0x26
    3594:	30060205 	andcc	r0, r6, r5, lsl #4
    3598:	4a4a0601 	bmi	1284da4 <__ccfg+0x1264dfc>
    359c:	134a2e06 	movtne	r2, #44550	; 0xae06
    35a0:	3e060105 	adfccs	f0, f6, f5
    35a4:	022c0205 	eoreq	r0, ip, #1342177280	; 0x50000000
    35a8:	01010006 	tsteq	r1, r6
    35ac:	05003205 	streq	r3, [r0, #-517]	; 0xfffffdfb
    35b0:	00000002 	andeq	r0, r0, r2
    35b4:	0a840300 	beq	fe1041bc <_estack+0xde0ff1bc>
    35b8:	16020501 	strne	r0, [r2], -r1, lsl #10
    35bc:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    35c0:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    35c4:	4a4a0620 	bmi	1284e4c <__ccfg+0x1264ea4>
    35c8:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    35cc:	0177cc03 	cmneq	r7, r3, lsl #24
    35d0:	b4030905 	strlt	r0, [r3], #-2309	; 0xfffff6fb
    35d4:	02052008 	andeq	r2, r5, #8
    35d8:	77c90306 	strbvc	r0, [r9, r6, lsl #6]
    35dc:	0514133c 	ldreq	r1, [r4, #-828]	; 0xfffffcc4
    35e0:	05051303 	streq	r1, [r5, #-771]	; 0xfffffcfd
    35e4:	03050106 	movweq	r0, #20742	; 0x5106
    35e8:	06052106 	streq	r2, [r5], -r6, lsl #2
    35ec:	03050106 	movweq	r0, #20742	; 0x5106
    35f0:	11053106 	tstne	r5, r6, lsl #2
    35f4:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    35f8:	060f0501 	streq	r0, [pc], -r1, lsl #10
    35fc:	06050520 	streq	r0, [r5], -r0, lsr #10
    3600:	03010513 	movweq	r0, #5395	; 0x1513
    3604:	022008b4 	eoreq	r0, r0, #180, 16	; 0xb40000
    3608:	01010008 	tsteq	r1, r8
    360c:	05002805 	streq	r2, [r0, #-2053]	; 0xfffff7fb
    3610:	001c0c02 	andseq	r0, ip, r2, lsl #24
    3614:	0a8c0300 	beq	fe30421c <_estack+0xde2ff21c>
    3618:	03010501 	movweq	r0, #5377	; 0x1501
    361c:	0102011a 	tsteq	r2, sl, lsl r1
    3620:	23010100 	movwcs	r0, #4352	; 0x1100
    3624:	03000001 	movweq	r0, #1
    3628:	00008900 	andeq	r8, r0, r0, lsl #18
    362c:	fb010200 	blx	43e36 <__ccfg+0x23e8e>
    3630:	01000d0e 	tsteq	r0, lr, lsl #26
    3634:	00010101 	andeq	r0, r1, r1, lsl #2
    3638:	00010000 	andeq	r0, r1, r0
    363c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3640:	2f656d6f 	svccs	0x00656d6f
    3644:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3648:	442f6e69 	strtmi	r6, [pc], #-3689	; 3650 <NOROM_SetupTrimDevice+0x78>
    364c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3650:	4f2f706f 	svcmi	0x002f706f
    3654:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3658:	502f5445 	eorpl	r5, pc, r5, asr #8
    365c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3660:	6369502f 	cmnvs	r9, #47	; 0x2f
    3664:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3668:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    366c:	752f0058 	strvc	r0, [pc, #-88]!	; 361c <NOROM_SetupTrimDevice+0x44>
    3670:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 34ac <NOROM_RFCRTrim+0xfc>
    3674:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3678:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    367c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3680:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3684:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3688:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    368c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3690:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3694:	00006564 	andeq	r6, r0, r4, ror #10
    3698:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    369c:	5f707574 	svcpl	0x00707574
    36a0:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    36a4:	00010063 	andeq	r0, r1, r3, rrx
    36a8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    36ac:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    36b0:	00020068 	andeq	r0, r2, r8, rrx
    36b4:	01050000 	mrseq	r0, (UNDEF: 5)
    36b8:	0e020500 	cfsh32eq	mvfx0, mvfx2, #0
    36bc:	0300001c 	movweq	r0, #28
    36c0:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    36c4:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    36c8:	0102100a 	tsteq	r2, sl
    36cc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    36d0:	02050001 	andeq	r0, r5, #1
    36d4:	00001c10 	andeq	r1, r0, r0, lsl ip
    36d8:	01029603 	tsteq	r2, r3, lsl #12
    36dc:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    36e0:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    36e4:	01010001 	tsteq	r1, r1
    36e8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    36ec:	001c1202 	andseq	r1, ip, r2, lsl #4
    36f0:	02a80300 	adceq	r0, r8, #0, 6
    36f4:	16050501 	strne	r0, [r5], -r1, lsl #10
    36f8:	100a0514 	andne	r0, sl, r4, lsl r5
    36fc:	01000102 	tsteq	r0, r2, lsl #2
    3700:	00010501 	andeq	r0, r1, r1, lsl #10
    3704:	1c140205 	lfmne	f0, 4, [r4], {5}
    3708:	d2030000 	andle	r0, r3, #0
    370c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3710:	01051713 	tsteq	r5, r3, lsl r7
    3714:	017a0306 	cmneq	sl, r6, lsl #6
    3718:	06260505 	strteq	r0, [r6], -r5, lsl #10
    371c:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    3720:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    3724:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    3728:	06050520 	streq	r0, [r5], -r0, lsr #10
    372c:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    3730:	900d0304 	andls	r0, sp, r4, lsl #6
    3734:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    3738:	052f0601 	streq	r0, [pc, #-1537]!	; 313f <NOROM_OSCClockSourceGet+0x2b>
    373c:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    3740:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    3744:	00100201 	andseq	r0, r0, r1, lsl #4
    3748:	01850101 	orreq	r0, r5, r1, lsl #2
    374c:	00030000 	andeq	r0, r3, r0
    3750:	0000017f 	andeq	r0, r0, pc, ror r1
    3754:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3758:	0101000d 	tsteq	r1, sp
    375c:	00000101 	andeq	r0, r0, r1, lsl #2
    3760:	00000100 	andeq	r0, r0, r0, lsl #2
    3764:	73752f01 	cmnvc	r5, #1, 30
    3768:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    376c:	63672f62 	cmnvs	r7, #392	; 0x188
    3770:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3774:	6f6e2d6d 	svcvs	0x006e2d6d
    3778:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    377c:	2f696261 	svccs	0x00696261
    3780:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3784:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3788:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    378c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3790:	2f656d6f 	svccs	0x00656d6f
    3794:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3798:	442f6e69 	strtmi	r6, [pc], #-3689	; 37a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>
    379c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    37a0:	4f2f706f 	svcmi	0x002f706f
    37a4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    37a8:	502f5445 	eorpl	r5, pc, r5, asr #8
    37ac:	534f4349 	movtpl	r4, #62281	; 0xf349
    37b0:	6369502f 	cmnvs	r9, #47	; 0x2f
    37b4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    37b8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    37bc:	43432f58 	movtmi	r2, #16216	; 0x3f58
    37c0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37c4:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    37c8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    37cc:	6f682f00 	svcvs	0x00682f00
    37d0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3624 <NOROM_SetupTrimDevice+0x4c>
    37d4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37d8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37dc:	6f746b73 	svcvs	0x00746b73
    37e0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37e4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37e8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37ec:	2f534f43 	svccs	0x00534f43
    37f0:	4f636950 	svcmi	0x00636950
    37f4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    37f8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37fc:	6f682f00 	svcvs	0x00682f00
    3800:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3654 <NOROM_SetupTrimDevice+0x7c>
    3804:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3808:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    380c:	6f746b73 	svcvs	0x00746b73
    3810:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3814:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3818:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    381c:	2f534f43 	svccs	0x00534f43
    3820:	4f636950 	svcmi	0x00636950
    3824:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    3828:	2f656d6f 	svccs	0x00656d6f
    382c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3830:	442f6e69 	strtmi	r6, [pc], #-3689	; 3838 <NOROM_SetupGetTrimForAmpcompTh1+0x10>
    3834:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3838:	4f2f706f 	svcmi	0x002f706f
    383c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3840:	502f5445 	eorpl	r5, pc, r5, asr #8
    3844:	534f4349 	movtpl	r4, #62281	; 0xf349
    3848:	6369502f 	cmnvs	r9, #47	; 0x2f
    384c:	6b2f534f 	blvs	bd8590 <__ccfg+0xbb85e8>
    3850:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3854:	7300006c 	movwvc	r0, #108	; 0x6c
    3858:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    385c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3860:	68000001 	stmdavs	r0, {r0}
    3864:	63635f77 	cmnvs	r3, #476	; 0x1dc
    3868:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    386c:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    3870:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    3874:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3878:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    387c:	72610000 	rsbvc	r0, r1, #0
    3880:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3884:	00000300 	andeq	r0, r0, r0, lsl #6
    3888:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    388c:	0300682e 	movweq	r6, #2094	; 0x82e
    3890:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3894:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3898:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    389c:	00000300 	andeq	r0, r0, r0, lsl #6
    38a0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    38a4:	5f736e6f 	svcpl	0x00736e6f
    38a8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    38ac:	00030068 	andeq	r0, r3, r8, rrx
    38b0:	73797300 	cmnvc	r9, #0, 6
    38b4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    38b8:	00000400 	andeq	r0, r0, r0, lsl #8
    38bc:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    38c0:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    38c4:	00000500 	andeq	r0, r0, r0, lsl #10
    38c8:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    38cc:	0300632e 	movweq	r6, #814	; 0x32e
    38d0:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    38d4:	03000002 	movweq	r0, #2
    38d8:	0001c000 	andeq	ip, r1, r0
    38dc:	fb010200 	blx	440e6 <__ccfg+0x2413e>
    38e0:	01000d0e 	tsteq	r0, lr, lsl #26
    38e4:	00010101 	andeq	r0, r1, r1, lsl #2
    38e8:	00010000 	andeq	r0, r1, r0
    38ec:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    38f0:	2f656d6f 	svccs	0x00656d6f
    38f4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    38f8:	442f6e69 	strtmi	r6, [pc], #-3689	; 3900 <NOROM_SetupGetTrimForXoscHfCtl+0x24>
    38fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3900:	4f2f706f 	svcmi	0x002f706f
    3904:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3908:	502f5445 	eorpl	r5, pc, r5, asr #8
    390c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3910:	6369502f 	cmnvs	r9, #47	; 0x2f
    3914:	502f534f 	eorpl	r5, pc, pc, asr #6
    3918:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    391c:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
    3920:	73726f73 	cmnvc	r2, #460	; 0x1cc
    3924:	6f682f00 	svcvs	0x00682f00
    3928:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 377c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x84>
    392c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3930:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3934:	6f746b73 	svcvs	0x00746b73
    3938:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    393c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3940:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3944:	2f534f43 	svccs	0x00534f43
    3948:	4f636950 	svcmi	0x00636950
    394c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3950:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3954:	6f682f00 	svcvs	0x00682f00
    3958:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 37ac <NOROM_SetupGetTrimForAnabypassValue1+0x8>
    395c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3960:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3964:	6f746b73 	svcvs	0x00746b73
    3968:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    396c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3970:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3974:	2f534f43 	svccs	0x00534f43
    3978:	4f636950 	svcmi	0x00636950
    397c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3980:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3984:	3143432f 	cmpcc	r3, pc, lsr #6
    3988:	57585833 	smmlarpl	r8, r3, r8, r5
    398c:	2f455241 	svccs	0x00455241
    3990:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3994:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3998:	752f0062 	strvc	r0, [pc, #-98]!	; 393e <NOROM_SetupGetTrimForRadcExtCfg+0x2a>
    399c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 37d8 <NOROM_SetupGetTrimForAnabypassValue1+0x34>
    39a0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    39a4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    39a8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    39ac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    39b0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    39b4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    39b8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    39bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    39c0:	2f006564 	svccs	0x00006564
    39c4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    39c8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    39cc:	2f6e6974 	svccs	0x006e6974
    39d0:	6b736544 	blvs	1cdcee8 <__ccfg+0x1cbcf40>
    39d4:	2f706f74 	svccs	0x00706f74
    39d8:	4f534c4f 	svcmi	0x00534c4f
    39dc:	2f54454e 	svccs	0x0054454e
    39e0:	4f434950 	svcmi	0x00434950
    39e4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    39e8:	00534f63 	subseq	r4, r3, r3, ror #30
    39ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3938 <NOROM_SetupGetTrimForRadcExtCfg+0x24>
    39f0:	616d2f65 	cmnvs	sp, r5, ror #30
    39f4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    39f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    39fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3a00:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3a04:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3a08:	4349502f 	movtmi	r5, #36911	; 0x902f
    3a0c:	502f534f 	eorpl	r5, pc, pc, asr #6
    3a10:	534f6369 	movtpl	r6, #62313	; 0xf369
    3a14:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3a18:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3a1c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3a20:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    3a24:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
    3a28:	00010063 	andeq	r0, r1, r3, rrx
    3a2c:	736d6300 	cmnvc	sp, #0, 6
    3a30:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    3a34:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    3a38:	00000200 	andeq	r0, r0, r0, lsl #4
    3a3c:	6f697067 	svcvs	0x00697067
    3a40:	0300682e 	movweq	r6, #2094	; 0x82e
    3a44:	74730000 	ldrbtvc	r0, [r3], #-0
    3a48:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3a4c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3a50:	72610000 	rsbvc	r0, r1, #0
    3a54:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3a58:	00000200 	andeq	r0, r0, r0, lsl #4
    3a5c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3a60:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3a64:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3a68:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3a6c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3a70:	00000200 	andeq	r0, r0, r0, lsl #4
    3a74:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3a78:	5f736e6f 	svcpl	0x00736e6f
    3a7c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3a80:	00020068 	andeq	r0, r2, r8, rrx
    3a84:	73797300 	cmnvc	r9, #0, 6
    3a88:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3a8c:	00000500 	andeq	r0, r0, r0, lsl #10
    3a90:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3a94:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    3a98:	00000600 	andeq	r0, r0, r0, lsl #12
    3a9c:	00190500 	andseq	r0, r9, r0, lsl #10
    3aa0:	00000205 	andeq	r0, r0, r5, lsl #4
    3aa4:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    3aa8:	011b0501 	tsteq	fp, r1, lsl #10
    3aac:	01050101 	tsteq	r5, r1, lsl #2
    3ab0:	01020106 	tsteq	r2, r6, lsl #2
    3ab4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3ab8:	0205003f 	andeq	r0, r5, #63	; 0x3f
    3abc:	00000000 	andeq	r0, r0, r0
    3ac0:	05011003 	streq	r1, [r1, #-3]
    3ac4:	13131402 	tstne	r3, #33554432	; 0x2000000
    3ac8:	063f0514 			; <UNDEFINED> instruction: 0x063f0514
    3acc:	20017a03 	andcs	r7, r1, r3, lsl #20
    3ad0:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3ad4:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    3ad8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3adc:	044d0603 	strbeq	r0, [sp], #-1539	; 0xfffff9fd
    3ae0:	00c10302 	sbceq	r0, r1, r2, lsl #6
    3ae4:	03010401 	movweq	r0, #5121	; 0x1401
    3ae8:	4b3d2040 	blmi	f4bbf0 <__ccfg+0xf2bc48>
    3aec:	33030204 	movwcc	r0, #12804	; 0x3204
    3af0:	03010401 	movweq	r0, #5121	; 0x1401
    3af4:	0205204e 	andeq	r2, r5, #78	; 0x4e
    3af8:	06070531 			; <UNDEFINED> instruction: 0x06070531
    3afc:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3b00:	018b030f 	orreq	r0, fp, pc, lsl #6
    3b04:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3b08:	7ef50307 	cdpvc	3, 15, cr0, cr5, cr7, {0}
    3b0c:	06020520 	streq	r0, [r2], -r0, lsr #10
    3b10:	130b0521 	movwne	r0, #46369	; 0xb521
    3b14:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
    3b18:	03290503 			; <UNDEFINED> instruction: 0x03290503
    3b1c:	05010183 	streq	r0, [r1, #-387]	; 0xfffffe7d
    3b20:	01041705 	tsteq	r4, r5, lsl #14
    3b24:	03060b05 	movweq	r0, #27397	; 0x6b05
    3b28:	04017ef8 	streq	r7, [r1], #-3832	; 0xfffff108
    3b2c:	030f0503 	movweq	r0, #62723	; 0xf503
    3b30:	04200188 	strteq	r0, [r0], #-392	; 0xfffffe78
    3b34:	030b0501 	movweq	r0, #46337	; 0xb501
    3b38:	04207ef8 	strteq	r7, [r0], #-3832	; 0xfffff108
    3b3c:	03330503 	teqeq	r3, #12582912	; 0xc00000
    3b40:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    3b44:	01042042 	tsteq	r4, r2, asr #32
    3b48:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3b4c:	08052e7e 	stmdaeq	r5, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    3b50:	201f052e 	andscs	r0, pc, lr, lsr #10
    3b54:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3b58:	08051e02 	stmdaeq	r5, {r1, r9, sl, fp, ip}
    3b5c:	063a0522 	ldrteq	r0, [sl], -r2, lsr #10
    3b60:	010b051f 	tsteq	fp, pc, lsl r5
    3b64:	11060205 	tstne	r6, r5, lsl #4
    3b68:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    3b6c:	01010006 	tsteq	r1, r6
    3b70:	0000033c 	andeq	r0, r0, ip, lsr r3
    3b74:	01a90003 			; <UNDEFINED> instruction: 0x01a90003
    3b78:	01020000 	mrseq	r0, (UNDEF: 2)
    3b7c:	000d0efb 	strdeq	r0, [sp], -fp
    3b80:	01010101 	tsteq	r1, r1, lsl #2
    3b84:	01000000 	mrseq	r0, (UNDEF: 0)
    3b88:	2f010000 	svccs	0x00010000
    3b8c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3b90:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3b94:	2f6e6974 	svccs	0x006e6974
    3b98:	6b736544 	blvs	1cdd0b0 <__ccfg+0x1cbd108>
    3b9c:	2f706f74 	svccs	0x00706f74
    3ba0:	4f534c4f 	svcmi	0x00534c4f
    3ba4:	2f54454e 	svccs	0x0054454e
    3ba8:	4f434950 	svcmi	0x00434950
    3bac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3bb0:	2f534f63 	svccs	0x00534f63
    3bb4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3bb8:	4f492f73 	svcmi	0x00492f73
    3bbc:	6f682f00 	svcvs	0x00682f00
    3bc0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3a14 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xac>
    3bc4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3bc8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3bcc:	6f746b73 	svcvs	0x00746b73
    3bd0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3bd4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3bd8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3bdc:	2f534f43 	svccs	0x00534f43
    3be0:	4f636950 	svcmi	0x00636950
    3be4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3be8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3bec:	3143432f 	cmpcc	r3, pc, lsr #6
    3bf0:	57585833 	smmlarpl	r8, r3, r8, r5
    3bf4:	2f455241 	svccs	0x00455241
    3bf8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3bfc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3c00:	752f0062 	strvc	r0, [pc, #-98]!	; 3ba6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa2>
    3c04:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3a40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xd8>
    3c08:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3c0c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3c10:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3c14:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3c18:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3c1c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3c20:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3c24:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3c28:	2f006564 	svccs	0x00006564
    3c2c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c30:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3c34:	2f6e6974 	svccs	0x006e6974
    3c38:	6b736544 	blvs	1cdd150 <__ccfg+0x1cbd1a8>
    3c3c:	2f706f74 	svccs	0x00706f74
    3c40:	4f534c4f 	svcmi	0x00534c4f
    3c44:	2f54454e 	svccs	0x0054454e
    3c48:	4f434950 	svcmi	0x00434950
    3c4c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3c50:	2f534f63 	svccs	0x00534f63
    3c54:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3c58:	2f005858 	svccs	0x00005858
    3c5c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c60:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3c64:	2f6e6974 	svccs	0x006e6974
    3c68:	6b736544 	blvs	1cdd180 <__ccfg+0x1cbd1d8>
    3c6c:	2f706f74 	svccs	0x00706f74
    3c70:	4f534c4f 	svcmi	0x00534c4f
    3c74:	2f54454e 	svccs	0x0054454e
    3c78:	4f434950 	svcmi	0x00434950
    3c7c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3c80:	00534f63 	subseq	r4, r3, r3, ror #30
    3c84:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3bd0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xcc>
    3c88:	616d2f65 	cmnvs	sp, r5, ror #30
    3c8c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3c90:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3c94:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3c98:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3c9c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3ca0:	4349502f 	movtmi	r5, #36911	; 0x902f
    3ca4:	502f534f 	eorpl	r5, pc, pc, asr #6
    3ca8:	534f6369 	movtpl	r6, #62313	; 0xf369
    3cac:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3cb0:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3cb4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3cb8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3cbc:	0100632e 	tsteq	r0, lr, lsr #6
    3cc0:	70670000 	rsbvc	r0, r7, r0
    3cc4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3cc8:	00000200 	andeq	r0, r0, r0, lsl #4
    3ccc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3cd0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3cd4:	00000300 	andeq	r0, r0, r0, lsl #6
    3cd8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3cdc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3ce0:	616d0000 	cmnvs	sp, r0
    3ce4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3ce8:	00000400 	andeq	r0, r0, r0, lsl #8
    3cec:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3cf0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3cf4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3cf8:	75620000 	strbvc	r0, [r2, #-0]!
    3cfc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3d00:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3d04:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3d08:	73000004 	movwvc	r0, #4
    3d0c:	6f697379 	svcvs	0x00697379
    3d10:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3d14:	656b0000 	strbvs	r0, [fp, #-0]!
    3d18:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3d1c:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3d20:	05000000 	streq	r0, [r0, #-0]
    3d24:	02050001 	andeq	r0, r5, #1
    3d28:	00000000 	andeq	r0, r0, r0
    3d2c:	01011b03 	tsteq	r1, r3, lsl #22
    3d30:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
    3d34:	0e056a06 	vmlaeq.f32	s12, s10, s12
    3d38:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3d3c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3d40:	40020531 	andmi	r0, r2, r1, lsr r5
    3d44:	01060f05 	tsteq	r6, r5, lsl #30
    3d48:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    3d4c:	01042e01 	tsteq	r4, r1, lsl #28
    3d50:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3d54:	0f05207e 	svceq	0x0005207e
    3d58:	0614051c 			; <UNDEFINED> instruction: 0x0614051c
    3d5c:	061c0520 	ldreq	r0, [ip], -r0, lsr #10
    3d60:	20020501 	andcs	r0, r2, r1, lsl #10
    3d64:	2e110306 	cdpcs	3, 1, cr0, cr1, cr6, {0}
    3d68:	03053d4b 	movweq	r3, #23883	; 0x5d4b
    3d6c:	042e7103 	strteq	r7, [lr], #-259	; 0xfffffefd
    3d70:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3d74:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    3d78:	01041705 	tsteq	r4, r5, lsl #14
    3d7c:	03060705 	movweq	r0, #26373	; 0x6705
    3d80:	04017efd 	streq	r7, [r1], #-3837	; 0xfffff103
    3d84:	030f0502 	movweq	r0, #62722	; 0xf502
    3d88:	042e0183 	strteq	r0, [lr], #-387	; 0xfffffe7d
    3d8c:	03070501 	movweq	r0, #29953	; 0x7501
    3d90:	04207efd 	strteq	r7, [r0], #-3837	; 0xfffff103
    3d94:	03330502 	teqeq	r3, #8388608	; 0x800000
    3d98:	04200183 	strteq	r0, [r0], #-387	; 0xfffffe7d
    3d9c:	03060501 	movweq	r0, #25857	; 0x6501
    3da0:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    3da4:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3da8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3dac:	05400604 	strbeq	r0, [r0, #-1540]	; 0xfffff9fc
    3db0:	12030603 	andne	r0, r3, #3145728	; 0x300000
    3db4:	052f062e 	streq	r0, [pc, #-1582]!	; 378e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x96>
    3db8:	20640306 	rsbcs	r0, r4, r6, lsl #6
    3dbc:	01060d05 	tsteq	r6, r5, lsl #26
    3dc0:	03060205 	movweq	r0, #25093	; 0x6205
    3dc4:	07053c16 	smladeq	r5, r6, ip, r3
    3dc8:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3dcc:	03062905 	movweq	r2, #26885	; 0x6905
    3dd0:	055800eb 	ldrbeq	r0, [r8, #-235]	; 0xffffff15
    3dd4:	0f051705 	svceq	0x00051705
    3dd8:	01040106 	tsteq	r4, r6, lsl #2
    3ddc:	90030705 	andls	r0, r3, r5, lsl #14
    3de0:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3de4:	f0030f05 			; <UNDEFINED> instruction: 0xf0030f05
    3de8:	33052000 	movwcc	r2, #20480	; 0x5000
    3dec:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3df0:	7f900305 	svcvc	0x00900305
    3df4:	06020520 	streq	r0, [r2], -r0, lsr #10
    3df8:	06050531 			; <UNDEFINED> instruction: 0x06050531
    3dfc:	06030501 	streq	r0, [r3], -r1, lsl #10
    3e00:	5102053e 	tstpl	r2, lr, lsr r5
    3e04:	01060705 	tsteq	r6, r5, lsl #14
    3e08:	29050204 	stmdbcs	r5, {r2, r9}
    3e0c:	00df0306 	sbcseq	r0, pc, r6, lsl #6
    3e10:	1705053c 	smladxne	r5, ip, r5, r0
    3e14:	01060f05 	tsteq	r6, r5, lsl #30
    3e18:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3e1c:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3e20:	0f050204 	svceq	0x00050204
    3e24:	2e00e403 	cdpcs	4, 0, cr14, cr0, cr3, {0}
    3e28:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3e2c:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3e30:	33050204 	movwcc	r0, #20996	; 0x5204
    3e34:	2000e403 	andcs	lr, r0, r3, lsl #8
    3e38:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3e3c:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3e40:	31060205 	tstcc	r6, r5, lsl #4
    3e44:	01060e05 	tsteq	r6, r5, lsl #28
    3e48:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3e4c:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3e50:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    3e54:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
    3e58:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    3e5c:	01052c02 	tsteq	r5, r2, lsl #24
    3e60:	0c024c06 	stceq	12, cr4, [r2], {6}
    3e64:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e68:	02050029 	andeq	r0, r5, #41	; 0x29
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	0100d703 	tsteq	r0, r3, lsl #14
    3e74:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3e78:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3e7c:	0f051c29 	svceq	0x00051c29
    3e80:	20050524 	andcs	r0, r5, r4, lsr #10
    3e84:	21060305 	tstcs	r6, r5, lsl #6
    3e88:	1a060105 	bne	1842a4 <__ccfg+0x1642fc>
    3e8c:	78030305 	stmdavc	r3, {r0, r2, r8, r9}
    3e90:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3e94:	06070540 	streq	r0, [r7], -r0, asr #10
    3e98:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    3e9c:	2f060305 	svccs	0x00060305
    3ea0:	0601052f 	streq	r0, [r1], -pc, lsr #10
    3ea4:	2c030522 	cfstr32cs	mvfx0, [r3], {34}	; 0x22
    3ea8:	023e0105 	eorseq	r0, lr, #1073741825	; 0x40000001
    3eac:	01010006 	tsteq	r1, r6
    3eb0:	00000931 	andeq	r0, r0, r1, lsr r9
    3eb4:	01cc0003 	biceq	r0, ip, r3
    3eb8:	01020000 	mrseq	r0, (UNDEF: 2)
    3ebc:	000d0efb 	strdeq	r0, [sp], -fp
    3ec0:	01010101 	tsteq	r1, r1, lsl #2
    3ec4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ec8:	2f010000 	svccs	0x00010000
    3ecc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3ed0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3ed4:	2f6e6974 	svccs	0x006e6974
    3ed8:	6b736544 	blvs	1cdd3f0 <__ccfg+0x1cbd448>
    3edc:	2f706f74 	svccs	0x00706f74
    3ee0:	4f534c4f 	svcmi	0x00534c4f
    3ee4:	2f54454e 	svccs	0x0054454e
    3ee8:	4f434950 	svcmi	0x00434950
    3eec:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3ef0:	2f534f63 	svccs	0x00534f63
    3ef4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3ef8:	74532f73 	ldrbvc	r2, [r3], #-3955	; 0xfffff08d
    3efc:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3f00:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3f04:	2f656d6f 	svccs	0x00656d6f
    3f08:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3f0c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3f14 <NOROM_ChipInfo_GetChipFamily+0x28>
    3f10:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3f14:	4f2f706f 	svcmi	0x002f706f
    3f18:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3f1c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3f20:	534f4349 	movtpl	r4, #62281	; 0xf349
    3f24:	6369502f 	cmnvs	r9, #47	; 0x2f
    3f28:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3f2c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3f30:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3f34:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3f38:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3f3c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3f40:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3f44:	2f006269 	svccs	0x00006269
    3f48:	2f727375 	svccs	0x00727375
    3f4c:	2f62696c 	svccs	0x0062696c
    3f50:	2f636367 	svccs	0x00636367
    3f54:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3f58:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3f5c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3f60:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3f64:	2f312e32 	svccs	0x00312e32
    3f68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3f6c:	00656475 	rsbeq	r6, r5, r5, ror r4
    3f70:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ebc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x48>
    3f74:	616d2f65 	cmnvs	sp, r5, ror #30
    3f78:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3f7c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3f80:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3f84:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3f88:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3f8c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3f90:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f94:	534f6369 	movtpl	r6, #62313	; 0xf369
    3f98:	3143432f 	cmpcc	r3, pc, lsr #6
    3f9c:	00585833 	subseq	r5, r8, r3, lsr r8
    3fa0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3eec <NOROM_ChipInfo_GetChipFamily>
    3fa4:	616d2f65 	cmnvs	sp, r5, ror #30
    3fa8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3fac:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3fb0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3fb4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3fb8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3fbc:	4349502f 	movtmi	r5, #36911	; 0x902f
    3fc0:	502f534f 	eorpl	r5, pc, pc, asr #6
    3fc4:	534f6369 	movtpl	r6, #62313	; 0xf369
    3fc8:	6f682f00 	svcvs	0x00682f00
    3fcc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3e20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1cc>
    3fd0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3fd4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3fd8:	6f746b73 	svcvs	0x00746b73
    3fdc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3fe0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3fe4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3fe8:	2f534f43 	svccs	0x00534f43
    3fec:	4f636950 	svcmi	0x00636950
    3ff0:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3ff4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3ff8:	74730000 	ldrbtvc	r0, [r3], #-0
    3ffc:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4000:	786d5f65 	stmdavc	sp!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    4004:	38723532 	ldmdacc	r2!, {r1, r4, r5, r8, sl, ip, sp}^
    4008:	2e353330 	mrccs	3, 1, r3, cr5, cr0, {1}
    400c:	00010063 	andeq	r0, r1, r3, rrx
    4010:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    4014:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4018:	73000002 	movwvc	r0, #2
    401c:	61726f74 	cmnvs	r2, r4, ror pc
    4020:	655f6567 	ldrbvs	r6, [pc, #-1383]	; 3ac1 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x49>
    4024:	6f727065 	svcvs	0x00727065
    4028:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    402c:	73000001 	movwvc	r0, #1
    4030:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4034:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4038:	61000003 	tstvs	r0, r3
    403c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4040:	00040068 	andeq	r0, r4, r8, rrx
    4044:	63616d00 	cmnvs	r1, #0, 26
    4048:	00682e68 	rsbeq	r2, r8, r8, ror #28
    404c:	70000004 	andvc	r0, r0, r4
    4050:	5f736e69 	svcpl	0x00736e69
    4054:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4058:	00040068 	andeq	r0, r4, r8, rrx
    405c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4060:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4064:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4068:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    406c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4070:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4074:	00050068 	andeq	r0, r5, r8, rrx
    4078:	72656b00 	rsbvc	r6, r5, #0, 22
    407c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    4080:	00060068 	andeq	r0, r6, r8, rrx
    4084:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    4088:	60020500 	andvs	r0, r2, r0, lsl #10
    408c:	0300001c 	movweq	r0, #28
    4090:	02050118 	andeq	r0, r5, #24, 2
    4094:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    4098:	19050115 	stmdbne	r5, {r0, r2, r4, r8}
    409c:	09050d06 	stmdbeq	r5, {r1, r2, r8, sl, fp}
    40a0:	05020425 	streq	r0, [r2, #-1061]	; 0xfffffbdb
    40a4:	028a032d 	addeq	r0, sl, #-1275068416	; 0xb4000000
    40a8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    40ac:	7df10319 	ldclvc	3, cr0, [r1, #100]!	; 0x64
    40b0:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    40b4:	02c5032d 	sbceq	r0, r5, #-1275068416	; 0xb4000000
    40b8:	030f0520 	movweq	r0, #62752	; 0xf520
    40bc:	05207ed0 	streq	r7, [r0, #-3792]!	; 0xfffff130
    40c0:	00fa032d 	rscseq	r0, sl, sp, lsr #6
    40c4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    40c8:	f7030603 			; <UNDEFINED> instruction: 0xf7030603
    40cc:	0204207d 	andeq	r2, r4, #125	; 0x7d
    40d0:	03060f05 	movweq	r0, #28421	; 0x6f05
    40d4:	0401018f 	streq	r0, [r1], #-399	; 0xfffffe71
    40d8:	03050501 	movweq	r0, #21761	; 0x5501
    40dc:	05207ef1 	streq	r7, [r0, #-3825]!	; 0xfffff10f
    40e0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    40e4:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    40e8:	05020421 	streq	r0, [r2, #-1057]	; 0xfffffbdf
    40ec:	01890329 	orreq	r0, r9, r9, lsr #6
    40f0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    40f4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    40f8:	017ef303 	cmneq	lr, r3, lsl #6	; <UNPREDICTABLE>
    40fc:	01060605 	tsteq	r6, r5, lsl #12
    4100:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4104:	29050204 	stmdbcs	r5, {r2, r9}
    4108:	01028103 	tsteq	r2, r3, lsl #2
    410c:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4110:	06020501 	streq	r0, [r2], -r1, lsl #10
    4114:	017df603 	cmneq	sp, r3, lsl #12	; <UNPREDICTABLE>
    4118:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    411c:	20028a03 	andcs	r8, r2, r3, lsl #20
    4120:	03050104 	movweq	r0, #20740	; 0x5104
    4124:	7dfb0306 	ldclvc	3, cr0, [fp, #24]!
    4128:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    412c:	02b60329 	adcseq	r0, r6, #-1543503872	; 0xa4000000
    4130:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4134:	01062d05 	tsteq	r6, r5, lsl #26
    4138:	1c050104 	stfnes	f0, [r5], {4}
    413c:	7dc00306 	stclvc	3, cr0, [r0, #24]
    4140:	01150520 	tsteq	r5, r0, lsr #10
    4144:	01060205 	tsteq	r6, r5, lsl #4
    4148:	09030105 	stmdbeq	r3, {r0, r2, r8}
    414c:	00070220 	andeq	r0, r7, r0, lsr #4
    4150:	1f050101 	svcne	0x00050101
    4154:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    4158:	0300001c 	movweq	r0, #28
    415c:	02050128 	andeq	r0, r5, #40, 2
    4160:	0e051414 	cfmvdlreq	mvd5, r1
    4164:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    4168:	0204200e 	andeq	r2, r4, #14
    416c:	ff032d05 			; <UNDEFINED> instruction: 0xff032d05
    4170:	01043c01 	tsteq	r4, r1, lsl #24
    4174:	03060305 	movweq	r0, #25349	; 0x6305
    4178:	054a7e86 	strbeq	r7, [sl, #-3718]	; 0xfffff17a
    417c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4180:	042f0604 	strteq	r0, [pc], #-1540	; 4188 <__aeabi_lmul+0x40>
    4184:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4188:	050101f4 	streq	r0, [r1, #-500]	; 0xfffffe0c
    418c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4190:	01040106 	tsteq	r4, r6, lsl #2
    4194:	03060405 	movweq	r0, #25605	; 0x6405
    4198:	042e7e89 	strteq	r7, [lr], #-3721	; 0xfffff177
    419c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41a0:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    41a4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    41a8:	01040106 	tsteq	r4, r6, lsl #2
    41ac:	03060305 	movweq	r0, #25349	; 0x6305
    41b0:	04207dd4 	strteq	r7, [r0], #-3540	; 0xfffff22c
    41b4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41b8:	050101f1 	streq	r0, [r1, #-497]	; 0xfffffe0f
    41bc:	01041705 	tsteq	r4, r5, lsl #14
    41c0:	7e8c0306 	cdpvc	3, 8, cr0, cr12, cr6, {0}
    41c4:	03020501 	movweq	r0, #9473	; 0x2501
    41c8:	02042079 	andeq	r2, r4, #121	; 0x79
    41cc:	fb032d05 	blx	cf5ea <__ccfg+0xaf642>
    41d0:	01042001 	tsteq	r4, r1
    41d4:	03060305 	movweq	r0, #25349	; 0x6305
    41d8:	04207e8b 	strteq	r7, [r0], #-3723	; 0xfffff175
    41dc:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41e0:	050102a6 	streq	r0, [r1, #-678]	; 0xfffffd5a
    41e4:	01041705 	tsteq	r4, r5, lsl #14
    41e8:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    41ec:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    41f0:	02aa032d 	adceq	r0, sl, #-1275068416	; 0xb4000000
    41f4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41f8:	d6030603 	strle	r0, [r3], -r3, lsl #12
    41fc:	1505207d 	strne	r2, [r5, #-125]	; 0xffffff83
    4200:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    4204:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    4208:	01050106 	tsteq	r5, r6, lsl #2
    420c:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    4210:	01010005 	tsteq	r1, r5
    4214:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    4218:	001cc402 	andseq	ip, ip, r2, lsl #8
    421c:	01390300 	teqeq	r9, r0, lsl #6
    4220:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    4224:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4228:	050103cf 	streq	r0, [r1, #-975]	; 0xfffffc31
    422c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4230:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4234:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4238:	7ca8031e 	stcvc	3, cr0, [r8], #120	; 0x78
    423c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4240:	03d80338 	bicseq	r0, r8, #56, 6	; 0xe0000000
    4244:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4248:	ab030602 	blge	c5a58 <__ccfg+0xa5ab0>
    424c:	042f2e7c 	strteq	r2, [pc], #-3708	; 4254 <_gettimeofday+0xb8>
    4250:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4254:	050103cd 	streq	r0, [r1, #-973]	; 0xfffffc33
    4258:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    425c:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4260:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4264:	7cad0301 	stcvc	3, cr0, [sp], #4
    4268:	0004022e 	andeq	r0, r4, lr, lsr #4
    426c:	27050101 	strcs	r0, [r5, -r1, lsl #2]
    4270:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    4274:	0300001c 	movweq	r0, #28
    4278:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    427c:	27051602 	strcs	r1, [r5, -r2, lsl #12]
    4280:	042e0e06 	strteq	r0, [lr], #-3590	; 0xfffff1fa
    4284:	03380502 	teqeq	r8, #8388608	; 0x800000
    4288:	042e03ba 	strteq	r0, [lr], #-954	; 0xfffffc46
    428c:	03090501 	movweq	r0, #38145	; 0x9501
    4290:	04207cca 	strteq	r7, [r0], #-3274	; 0xfffff336
    4294:	03380502 	teqeq	r8, #8388608	; 0x800000
    4298:	042e03b6 	strteq	r0, [lr], #-950	; 0xfffffc4a
    429c:	06080501 	streq	r0, [r8], -r1, lsl #10
    42a0:	207cca03 	rsbscs	ip, ip, r3, lsl #20
    42a4:	73030205 	movwvc	r0, #12805	; 0x3205
    42a8:	0204143c 	andeq	r1, r4, #60, 8	; 0x3c000000
    42ac:	ba032905 	blt	ce6c8 <__ccfg+0xae720>
    42b0:	3d050103 	stfccs	f0, [r5, #-12]
    42b4:	17050514 	smladne	r5, r4, r5, r0
    42b8:	02050104 	andeq	r0, r5, #4, 2
    42bc:	7cc00306 	stclvc	3, cr0, [r0], {6}
    42c0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    42c4:	03c00338 	biceq	r0, r0, #56, 6	; 0xe0000000
    42c8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    42cc:	c0030602 	andgt	r0, r3, r2, lsl #12
    42d0:	052f207c 	streq	r2, [pc, #-124]!	; 425c <_gettimeofday+0xc0>
    42d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    42d8:	042f0602 	strteq	r0, [pc], #-1538	; 42e0 <_gettimeofday+0x144>
    42dc:	03290502 			; <UNDEFINED> instruction: 0x03290502
    42e0:	050103b7 	streq	r0, [r1, #-951]	; 0xfffffc49
    42e4:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    42e8:	06380517 			; <UNDEFINED> instruction: 0x06380517
    42ec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    42f0:	c3030602 	movwgt	r0, #13826	; 0x3602
    42f4:	0f052e7c 	svceq	0x00052e7c
    42f8:	01051906 	tsteq	r5, r6, lsl #18
    42fc:	06030536 			; <UNDEFINED> instruction: 0x06030536
    4300:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4304:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4308:	4c4b0604 	mcrrmi	6, 0, r0, fp, cr4
    430c:	0007024b 	andeq	r0, r7, fp, asr #4
    4310:	16050101 	strne	r0, [r5], -r1, lsl #2
    4314:	30020500 	andcc	r0, r2, r0, lsl #10
    4318:	0300001d 	movweq	r0, #29
    431c:	05010181 	streq	r0, [r1, #-385]	; 0xfffffe7f
    4320:	16051602 	strne	r1, [r5], -r2, lsl #12
    4324:	06050e06 	streq	r0, [r5], -r6, lsl #28
    4328:	20050524 	andcs	r0, r5, r4, lsr #10
    432c:	30060305 	andcc	r0, r6, r5, lsl #6
    4330:	055e0205 	ldrbeq	r0, [lr, #-517]	; 0xfffffdfb
    4334:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4338:	03053d01 	movweq	r3, #23809	; 0x5d01
    433c:	02051b06 	andeq	r1, r5, #6144	; 0x1800
    4340:	01016603 	tsteq	r1, r3, lsl #12
    4344:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    4348:	99032905 	stmdbls	r3, {r0, r2, r8, fp, sp}
    434c:	3d050103 	stfccs	f0, [r5, #-12]
    4350:	17050514 	smladne	r5, r4, r5, r0
    4354:	01063805 	tsteq	r6, r5, lsl #16
    4358:	02050104 	andeq	r0, r5, #4, 2
    435c:	2e7ce103 	expcse	f6, f3
    4360:	38050204 	stmdacc	r5, {r2, r9}
    4364:	20039f03 	andcs	r9, r3, r3, lsl #30
    4368:	02050104 	andeq	r0, r5, #4, 2
    436c:	7ce10306 	stclvc	3, cr0, [r1], #24
    4370:	02042f20 	andeq	r2, r4, #32, 30	; 0x80
    4374:	97032905 	strls	r2, [r3, -r5, lsl #18]
    4378:	3d050103 	stfccs	f0, [r5, #-12]
    437c:	17050514 	smladne	r5, r4, r5, r0
    4380:	02050104 	andeq	r0, r5, #4, 2
    4384:	7ce30306 	stclvc	3, cr0, [r3], #24
    4388:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    438c:	039d0338 	orrseq	r0, sp, #56, 6	; 0xe0000000
    4390:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4394:	e3030602 	movw	r0, #13826	; 0x3602
    4398:	0305207c 	movweq	r2, #20604	; 0x507c
    439c:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    43a0:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    43a4:	01010009 	tsteq	r1, r9
    43a8:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    43ac:	001d7002 	andseq	r7, sp, r2
    43b0:	00f70300 	rscseq	r0, r7, r0, lsl #6
    43b4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    43b8:	10061705 	andne	r1, r6, r5, lsl #14
    43bc:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    43c0:	03052005 	movweq	r2, #20485	; 0x5005
    43c4:	05593d06 	ldrbeq	r3, [r9, #-3334]	; 0xfffff2fa
    43c8:	016e0302 	cmneq	lr, r2, lsl #6
    43cc:	13030305 	movwne	r0, #13061	; 0x3305
    43d0:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    43d4:	06030501 	streq	r0, [r3], -r1, lsl #10
    43d8:	0501012f 	streq	r0, [r1, #-303]	; 0xfffffed1
    43dc:	02140601 	andseq	r0, r4, #1048576	; 0x100000
    43e0:	01010003 	tsteq	r1, r3
    43e4:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    43e8:	001d9402 	andseq	r9, sp, r2, lsl #8
    43ec:	01920300 	orrseq	r0, r2, r0, lsl #6
    43f0:	16020501 	strne	r0, [r2], -r1, lsl #10
    43f4:	0e061105 	adfeqs	f1, f6, f5
    43f8:	06240205 	strteq	r0, [r4], -r5, lsl #4
    43fc:	0608052f 	streq	r0, [r8], -pc, lsr #10
    4400:	03010501 	movweq	r0, #5377	; 0x1501
    4404:	08052e0e 	stmdaeq	r5, {r1, r2, r3, r9, sl, fp, sp}
    4408:	05207203 	streq	r7, [r0, #-515]!	; 0xfffffdfd
    440c:	0d030602 	stceq	6, cr0, [r3, #-8]
    4410:	06010520 	streq	r0, [r1], -r0, lsr #10
    4414:	00030213 	andeq	r0, r3, r3, lsl r2
    4418:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    441c:	a8020500 	stmdage	r2, {r8, sl}
    4420:	0300001d 	movweq	r0, #29
    4424:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    4428:	06051402 	streq	r1, [r5], -r2, lsl #8
    442c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4430:	06030520 	streq	r0, [r3], -r0, lsr #10
    4434:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4438:	06030501 	streq	r0, [r3], -r1, lsl #10
    443c:	0601052f 	streq	r0, [r1], -pc, lsr #10
    4440:	00030230 	andeq	r0, r3, r0, lsr r2
    4444:	2b050101 	blcs	144850 <__ccfg+0x1248a8>
    4448:	00020500 	andeq	r0, r2, r0, lsl #10
    444c:	03000000 	movweq	r0, #0
    4450:	060101af 	streq	r0, [r1], -pc, lsr #3
    4454:	06020520 	streq	r0, [r2], -r0, lsr #10
    4458:	06050530 			; <UNDEFINED> instruction: 0x06050530
    445c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4460:	06050531 			; <UNDEFINED> instruction: 0x06050531
    4464:	3c180501 	cfldr32cc	mvfx0, [r8], {1}
    4468:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    446c:	303f0602 	eorscc	r0, pc, r2, lsl #12
    4470:	29050204 	stmdbcs	r5, {r2, r9}
    4474:	0102d103 	tsteq	r2, r3, lsl #2
    4478:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    447c:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4480:	01040106 	tsteq	r4, r6, lsl #2
    4484:	aa030205 	bge	c4ca0 <__ccfg+0xa4cf8>
    4488:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    448c:	d6033805 	strle	r3, [r3], -r5, lsl #16
    4490:	01042002 	tsteq	r4, r2
    4494:	03060205 	movweq	r0, #25093	; 0x6205
    4498:	2f207daa 	svccs	0x00207daa
    449c:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    44a0:	02052008 	andeq	r2, r5, #8
    44a4:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    44a8:	02c70329 	sbceq	r0, r7, #-1543503872	; 0xa4000000
    44ac:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    44b0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    44b4:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    44b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    44bc:	2e7db403 	cdpcs	4, 7, cr11, cr13, cr3, {0}
    44c0:	06010530 			; <UNDEFINED> instruction: 0x06010530
    44c4:	06030513 			; <UNDEFINED> instruction: 0x06030513
    44c8:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    44cc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    44d0:	0a052e08 	beq	14fcf8 <__ccfg+0x12fd50>
    44d4:	023c7403 	eorseq	r7, ip, #50331648	; 0x3000000
    44d8:	01010005 	tsteq	r1, r5
    44dc:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    44e0:	00000002 	andeq	r0, r0, r2
    44e4:	01ca0300 	biceq	r0, sl, r0, lsl #6
    44e8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    44ec:	10063105 	andne	r3, r6, r5, lsl #2
    44f0:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    44f4:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    44f8:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    44fc:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    4500:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4504:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4508:	06052017 			; <UNDEFINED> instruction: 0x06052017
    450c:	06030520 	streq	r0, [r3], -r0, lsr #10
    4510:	06060530 			; <UNDEFINED> instruction: 0x06060530
    4514:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    4518:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    451c:	03040530 	movweq	r0, #17712	; 0x4530
    4520:	1005010a 	andne	r0, r5, sl, lsl #2
    4524:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4528:	20100520 	andscs	r0, r0, r0, lsr #10
    452c:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    4530:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    4534:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4538:	1f052009 	svcne	0x00052009
    453c:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
    4540:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
    4544:	01060d05 	tsteq	r6, r5, lsl #26
    4548:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    454c:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    4550:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4554:	2f2f0605 	svccs	0x002f0605
    4558:	01060c05 	tsteq	r6, r5, lsl #24
    455c:	31030105 	tstcc	r3, r5, lsl #2
    4560:	06040520 	streq	r0, [r4], -r0, lsr #10
    4564:	05205203 	streq	r5, [r0, #-515]!	; 0xfffffdfd
    4568:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    456c:	25052007 	strcs	r2, [r5, #-7]
    4570:	201d0520 	andscs	r0, sp, r0, lsr #10
    4574:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4578:	01060b05 	tsteq	r6, r5, lsl #22
    457c:	05280405 	streq	r0, [r8, #-1029]!	; 0xfffffbfb
    4580:	04051e0b 	streq	r1, [r5], #-3595	; 0xfffff1f5
    4584:	042f2206 	strteq	r2, [pc], #-518	; 458c <__button_list+0x5e>
    4588:	06380502 	ldrteq	r0, [r8], -r2, lsl #10
    458c:	01029603 	tsteq	r2, r3, lsl #12
    4590:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4594:	2e7dea03 	vaddcs.f32	s29, s26, s6
    4598:	03060205 	movweq	r0, #25093	; 0x6205
    459c:	04207ec7 	strteq	r7, [r0], #-3783	; 0xfffff139
    45a0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    45a4:	050103c8 	streq	r0, [r1, #-968]	; 0xfffffc38
    45a8:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    45ac:	06380517 			; <UNDEFINED> instruction: 0x06380517
    45b0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    45b4:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
    45b8:	4b2f207c 	blmi	bcc7b0 <__ccfg+0xbac808>
    45bc:	02043d4b 	andeq	r3, r4, #4800	; 0x12c0
    45c0:	c3032905 	movwgt	r2, #14597	; 0x3905
    45c4:	3d050103 	stfccs	f0, [r5, #-12]
    45c8:	17050514 	smladne	r5, r4, r5, r0
    45cc:	01063805 	tsteq	r6, r5, lsl #16
    45d0:	02050104 	andeq	r0, r5, #4, 2
    45d4:	7dee0306 	stclvc	3, cr0, [lr, #24]!
    45d8:	060b052e 	streq	r0, [fp], -lr, lsr #10
    45dc:	05825503 	streq	r5, [r2, #1283]	; 0x503
    45e0:	1f030609 	svcne	0x00030609
    45e4:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    45e8:	2e0c0501 	cfsh32cs	mvfx0, mvfx12, #1
    45ec:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
    45f0:	05052022 	streq	r2, [r5, #-34]	; 0xffffffde
    45f4:	0b053e06 	bleq	153e14 <__ccfg+0x133e6c>
    45f8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    45fc:	0b053106 	bleq	150a1c <__ccfg+0x130a74>
    4600:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4604:	06040535 			; <UNDEFINED> instruction: 0x06040535
    4608:	592e0a03 	stmdbpl	lr!, {r0, r1, r9, fp}
    460c:	01060905 	tsteq	r6, r5, lsl #18
    4610:	054a0e03 	strbeq	r0, [sl, #-3587]	; 0xfffff1fd
    4614:	03210604 			; <UNDEFINED> instruction: 0x03210604
    4618:	0359206b 	cmpeq	r9, #107	; 0x6b
    461c:	054b200b 	strbeq	r2, [fp, #-11]
    4620:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4624:	4b5e0604 	blmi	1785e3c <__ccfg+0x1765e94>
    4628:	01060905 	tsteq	r6, r5, lsl #18
    462c:	03060305 	movweq	r0, #25349	; 0x6305
    4630:	05587fba 	ldrbeq	r7, [r8, #-4026]	; 0xfffff046
    4634:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4638:	00083b09 	andeq	r3, r8, r9, lsl #22
    463c:	3b050101 	blcc	144a48 <__ccfg+0x124aa0>
    4640:	00020500 	andeq	r0, r2, r0, lsl #10
    4644:	03000000 	movweq	r0, #0
    4648:	050102a0 	streq	r0, [r1, #-672]	; 0xfffffd60
    464c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    4650:	050e063b 	streq	r0, [lr, #-1595]	; 0xfffff9c5
    4654:	3b05320c 	blcc	150e8c <__ccfg+0x130ee4>
    4658:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    465c:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    4660:	03053205 	movweq	r3, #20997	; 0x5205
    4664:	06053206 	streq	r3, [r5], -r6, lsl #4
    4668:	1a050106 	bne	144a88 <__ccfg+0x124ae0>
    466c:	2e14053c 	mrccs	5, 0, r0, cr4, cr12, {1}
    4670:	3f060305 	svccc	0x00060305
    4674:	01060805 	tsteq	r6, r5, lsl #16
    4678:	2f060305 	svccs	0x00060305
    467c:	01060805 	tsteq	r6, r5, lsl #16
    4680:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4684:	01060805 	tsteq	r6, r5, lsl #16
    4688:	30060305 	andcc	r0, r6, r5, lsl #6
    468c:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4690:	06030501 	streq	r0, [r3], -r1, lsl #10
    4694:	060c0530 			; <UNDEFINED> instruction: 0x060c0530
    4698:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    469c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    46a0:	01060a05 	tsteq	r6, r5, lsl #20
    46a4:	21060405 	tstcs	r6, r5, lsl #8
    46a8:	0601052f 	streq	r0, [r1], -pc, lsr #10
    46ac:	05012203 	streq	r2, [r1, #-515]	; 0xfffffdfd
    46b0:	62030603 	andvs	r0, r3, #3145728	; 0x300000
    46b4:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    46b8:	20060501 	andcs	r0, r6, r1, lsl #10
    46bc:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    46c0:	4a062406 	bmi	18d6e0 <__ccfg+0x16d738>
    46c4:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    46c8:	01c80329 	biceq	r0, r8, r9, lsr #6
    46cc:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    46d0:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    46d4:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    46d8:	03030501 	movweq	r0, #13569	; 0x3501
    46dc:	043c7eb3 	ldrteq	r7, [ip], #-3763	; 0xfffff14d
    46e0:	03380502 	teqeq	r8, #8388608	; 0x800000
    46e4:	042001cd 	strteq	r0, [r0], #-461	; 0xfffffe33
    46e8:	06030501 	streq	r0, [r3], -r1, lsl #10
    46ec:	2e7eb303 	cdpcs	3, 7, cr11, cr14, cr3, {0}
    46f0:	0619052f 	ldreq	r0, [r9], -pc, lsr #10
    46f4:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
    46f8:	3e4b4b06 	vmlacc.f64	d20, d11, d6
    46fc:	31060805 	tstcc	r6, r5, lsl #16
    4700:	052b0c05 	streq	r0, [fp, #-3077]!	; 0xfffff3fb
    4704:	08052e09 	stmdaeq	r5, {r0, r3, r9, sl, fp, sp}
    4708:	06090523 	streq	r0, [r9], -r3, lsr #10
    470c:	2603051d 			; <UNDEFINED> instruction: 0x2603051d
    4710:	29050204 	stmdbcs	r5, {r2, r9}
    4714:	0101bb03 	tsteq	r1, r3, lsl #22
    4718:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    471c:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4720:	01040106 	tsteq	r4, r6, lsl #2
    4724:	03060205 	movweq	r0, #25093	; 0x6205
    4728:	053c7ec1 	ldreq	r7, [ip, #-3777]!	; 0xfffff13f
    472c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4730:	4b400602 	blmi	1005f40 <__ccfg+0xfe5f98>
    4734:	73030405 	movwvc	r0, #13317	; 0x3405
    4738:	06130520 	ldreq	r0, [r3], -r0, lsr #10
    473c:	3c040501 	cfstr32cc	mvfx0, [r4], {1}
    4740:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4744:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4748:	08055906 	stmdaeq	r5, {r1, r2, r8, fp, ip, lr}
    474c:	0b050106 	bleq	144b6c <__ccfg+0x124bc4>
    4750:	024a5d03 	subeq	r5, sl, #3, 26	; 0xc0
    4754:	0101000d 	tsteq	r1, sp
    4758:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    475c:	00000002 	andeq	r0, r0, r2
    4760:	02da0300 	sbcseq	r0, sl, #0, 6
    4764:	15010501 	strne	r0, [r1, #-1281]	; 0xfffffaff
    4768:	01000102 	tsteq	r0, r2, lsl #2
    476c:	00180501 	andseq	r0, r8, r1, lsl #10
    4770:	00000205 	andeq	r0, r0, r5, lsl #4
    4774:	df030000 	svcle	0x00030000
    4778:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    477c:	06010515 			; <UNDEFINED> instruction: 0x06010515
    4780:	00020213 	andeq	r0, r2, r3, lsl r2
    4784:	03040101 	movweq	r0, #16641	; 0x4101
    4788:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    478c:	00000002 	andeq	r0, r0, r2
    4790:	02051900 	andeq	r1, r5, #0, 18
    4794:	06050514 			; <UNDEFINED> instruction: 0x06050514
    4798:	06030501 	streq	r0, [r3], -r1, lsl #10
    479c:	06070521 	streq	r0, [r7], -r1, lsr #10
    47a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    47a4:	06050530 			; <UNDEFINED> instruction: 0x06050530
    47a8:	06030501 	streq	r0, [r3], -r1, lsl #10
    47ac:	06080521 	streq	r0, [r8], -r1, lsr #10
    47b0:	06020501 	streq	r0, [r2], -r1, lsl #10
    47b4:	0601053e 			; <UNDEFINED> instruction: 0x0601053e
    47b8:	00030213 	andeq	r0, r3, r3, lsl r2
    47bc:	03040101 	movweq	r0, #16641	; 0x4101
    47c0:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    47c4:	00000002 	andeq	r0, r0, r2
    47c8:	01120300 	tsteq	r2, r0, lsl #6
    47cc:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    47d0:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    47d4:	2f062202 	svccs	0x00062202
    47d8:	06010567 	streq	r0, [r1], -r7, ror #10
    47dc:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    47e0:	01000202 	tsteq	r0, r2, lsl #4
    47e4:	0001c101 	andeq	ip, r1, r1, lsl #2
    47e8:	21000300 	mrscs	r0, LR_irq
    47ec:	02000001 	andeq	r0, r0, #1
    47f0:	0d0efb01 	vstreq	d15, [lr, #-4]
    47f4:	01010100 	mrseq	r0, (UNDEF: 17)
    47f8:	00000001 	andeq	r0, r0, r1
    47fc:	01000001 	tsteq	r0, r1
    4800:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 474c <patchGenfskRfe+0x1a4>
    4804:	616d2f65 	cmnvs	sp, r5, ror #30
    4808:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    480c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4810:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4814:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4818:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    481c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4820:	502f534f 	eorpl	r5, pc, pc, asr #6
    4824:	534f6369 	movtpl	r6, #62313	; 0xf369
    4828:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    482c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4830:	61697265 	cmnvs	r9, r5, ror #4
    4834:	752f006c 	strvc	r0, [pc, #-108]!	; 47d0 <patchGenfskRfe+0x228>
    4838:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4674 <patchGenfskRfe+0xcc>
    483c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4840:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4844:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4848:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    484c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4850:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4854:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4858:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    485c:	2f006564 	svccs	0x00006564
    4860:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4864:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4868:	2f6e6974 	svccs	0x006e6974
    486c:	6b736544 	blvs	1cddd84 <__ccfg+0x1cbdddc>
    4870:	2f706f74 	svccs	0x00706f74
    4874:	4f534c4f 	svcmi	0x00534c4f
    4878:	2f54454e 	svccs	0x0054454e
    487c:	4f434950 	svcmi	0x00434950
    4880:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4884:	2f534f63 	svccs	0x00534f63
    4888:	33314343 	teqcc	r1, #201326593	; 0xc000001
    488c:	2f005858 	svccs	0x00005858
    4890:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4894:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4898:	2f6e6974 	svccs	0x006e6974
    489c:	6b736544 	blvs	1cdddb4 <__ccfg+0x1cbde0c>
    48a0:	2f706f74 	svccs	0x00706f74
    48a4:	4f534c4f 	svcmi	0x00534c4f
    48a8:	2f54454e 	svccs	0x0054454e
    48ac:	4f434950 	svcmi	0x00434950
    48b0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    48b4:	00534f63 	subseq	r4, r3, r3, ror #30
    48b8:	72657300 	rsbvc	r7, r5, #0, 6
    48bc:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    48c0:	00010063 	andeq	r0, r1, r3, rrx
    48c4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    48c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    48cc:	00020068 	andeq	r0, r2, r8, rrx
    48d0:	63726100 	cmnvs	r2, #0, 2
    48d4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    48d8:	6d000003 	stcvs	0, cr0, [r0, #-12]
    48dc:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    48e0:	00030068 	andeq	r0, r3, r8, rrx
    48e4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    48e8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    48ec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    48f0:	62000003 	andvs	r0, r0, #3
    48f4:	6f747475 	svcvs	0x00747475
    48f8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    48fc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4900:	00000300 	andeq	r0, r0, r0, lsl #6
    4904:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4908:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    490c:	00000004 	andeq	r0, r0, r4
    4910:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    4914:	001dbc02 	andseq	fp, sp, r2, lsl #24
    4918:	010c0300 	mrseq	r0, LR_mon
    491c:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    4920:	03062a05 	movweq	r2, #27141	; 0x6a05
    4924:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    4928:	02053405 	andeq	r3, r5, #83886080	; 0x5000000
    492c:	10053206 	andne	r3, r5, r6, lsl #4
    4930:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4934:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4938:	060f0521 	streq	r0, [pc], -r1, lsr #10
    493c:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    4940:	21060405 	tstcs	r6, r5, lsl #8
    4944:	01060b05 	tsteq	r6, r5, lsl #22
    4948:	4b060405 	blmi	185964 <__ccfg+0x1659bc>
    494c:	01060705 	tsteq	r6, r5, lsl #14
    4950:	21060505 	tstcs	r6, r5, lsl #10
    4954:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    4958:	4f02052d 	svcmi	0x0002052d
    495c:	01060505 	tsteq	r6, r5, lsl #10
    4960:	2f060305 	svccs	0x00060305
    4964:	01061305 	tsteq	r6, r5, lsl #6
    4968:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    496c:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    4970:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4974:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4978:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    497c:	593e0602 	ldmdbpl	lr!, {r1, r9, sl}
    4980:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    4984:	06020501 	streq	r0, [r2], -r1, lsl #10
    4988:	0605052f 	streq	r0, [r5], -pc, lsr #10
    498c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4990:	060e052f 	streq	r0, [lr], -pc, lsr #10
    4994:	22010501 	andcs	r0, r1, #4194304	; 0x400000
    4998:	03060305 	movweq	r0, #25349	; 0x6305
    499c:	0a052e75 	beq	150378 <__ccfg+0x1303d0>
    49a0:	6e030106 	adfvss	f0, f3, f6
    49a4:	0007024a 	andeq	r0, r7, sl, asr #4
    49a8:	019e0101 	orrseq	r0, lr, r1, lsl #2
    49ac:	00030000 	andeq	r0, r3, r0
    49b0:	0000013d 	andeq	r0, r0, sp, lsr r1
    49b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    49b8:	0101000d 	tsteq	r1, sp
    49bc:	00000101 	andeq	r0, r0, r1, lsl #2
    49c0:	00000100 	andeq	r0, r0, r0, lsl #2
    49c4:	6f682f01 	svcvs	0x00682f01
    49c8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 481c <patchGenfskRfe+0x274>
    49cc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    49d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    49d4:	6f746b73 	svcvs	0x00746b73
    49d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    49dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    49e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    49e4:	2f534f43 	svccs	0x00534f43
    49e8:	4f636950 	svcmi	0x00636950
    49ec:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    49f0:	2f736269 	svccs	0x00736269
    49f4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    49f8:	2f006c61 	svccs	0x00006c61
    49fc:	2f727375 	svccs	0x00727375
    4a00:	2f62696c 	svccs	0x0062696c
    4a04:	2f636367 	svccs	0x00636367
    4a08:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4a0c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4a10:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4a14:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4a18:	2f312e32 	svccs	0x00312e32
    4a1c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4a20:	00656475 	rsbeq	r6, r5, r5, ror r4
    4a24:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4970 <patchGenfskRfe+0x3c8>
    4a28:	616d2f65 	cmnvs	sp, r5, ror #30
    4a2c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4a30:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4a34:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a38:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a3c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a40:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a44:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a48:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a4c:	3143432f 	cmpcc	r3, pc, lsr #6
    4a50:	00585833 	subseq	r5, r8, r3, lsr r8
    4a54:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 49a0 <patchGenfskRfe+0x3f8>
    4a58:	616d2f65 	cmnvs	sp, r5, ror #30
    4a5c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4a60:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4a64:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a68:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a6c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a70:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a74:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a78:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a7c:	65730000 	ldrbvs	r0, [r3, #-0]!
    4a80:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 3b16 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    4a84:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    4a88:	00000100 	andeq	r0, r0, r0, lsl #2
    4a8c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4a90:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4a94:	00000200 	andeq	r0, r0, r0, lsl #4
    4a98:	61647473 	smcvs	18243	; 0x4743
    4a9c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4aa0:	00000200 	andeq	r0, r0, r0, lsl #4
    4aa4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4aa8:	0300682e 	movweq	r6, #2094	; 0x82e
    4aac:	616d0000 	cmnvs	sp, r0
    4ab0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4ab4:	00000300 	andeq	r0, r0, r0, lsl #6
    4ab8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4abc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4ac0:	0300682e 	movweq	r6, #2094	; 0x82e
    4ac4:	75620000 	strbvc	r0, [r2, #-0]!
    4ac8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4acc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ad0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4ad4:	73000003 	movwvc	r0, #3
    4ad8:	6f697379 	svcvs	0x00697379
    4adc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4ae0:	623c0000 	eorsvs	r0, ip, #0
    4ae4:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4ae8:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4aec:	00000000 	andeq	r0, r0, r0
    4af0:	002c0500 	eoreq	r0, ip, r0, lsl #10
    4af4:	1e340205 	cdpne	2, 3, cr0, cr4, cr5, {0}
    4af8:	0b030000 	bleq	c4b00 <__ccfg+0xa4b58>
    4afc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4b00:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    4b04:	7a03062c 	bvc	c63bc <__ccfg+0xa6414>
    4b08:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
    4b0c:	3c050526 	cfstr32cc	mvfx0, [r5], {38}	; 0x26
    4b10:	30060305 	andcc	r0, r6, r5, lsl #6
    4b14:	010a033d 	tsteq	sl, sp, lsr r3
    4b18:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4b1c:	060d052e 	streq	r0, [sp], -lr, lsr #10
    4b20:	1e020522 	cfsh32ne	mvfx0, mvfx2, #18
    4b24:	0d052206 	sfmeq	f2, 4, [r5, #-24]	; 0xffffffe8
    4b28:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4b2c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4b30:	4e020532 	mcrmi	5, 0, r0, cr2, cr2, {1}
    4b34:	01060605 	tsteq	r6, r5, lsl #12
    4b38:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    4b3c:	3d210603 	stccc	6, cr0, [r1, #-12]!
    4b40:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    4b44:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4b48:	01010009 	tsteq	r1, r9
    4b4c:	000001af 	andeq	r0, r0, pc, lsr #3
    4b50:	013c0003 	teqeq	ip, r3
    4b54:	01020000 	mrseq	r0, (UNDEF: 2)
    4b58:	000d0efb 	strdeq	r0, [sp], -fp
    4b5c:	01010101 	tsteq	r1, r1, lsl #2
    4b60:	01000000 	mrseq	r0, (UNDEF: 0)
    4b64:	2f010000 	svccs	0x00010000
    4b68:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4b6c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4b70:	2f6e6974 	svccs	0x006e6974
    4b74:	6b736544 	blvs	1cde08c <__ccfg+0x1cbe0e4>
    4b78:	2f706f74 	svccs	0x00706f74
    4b7c:	4f534c4f 	svcmi	0x00534c4f
    4b80:	2f54454e 	svccs	0x0054454e
    4b84:	4f434950 	svcmi	0x00434950
    4b88:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4b8c:	2f534f63 	svccs	0x00534f63
    4b90:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4b94:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4b98:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4b9c:	73752f00 	cmnvc	r5, #0, 30
    4ba0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4ba4:	63672f62 	cmnvs	r7, #392	; 0x188
    4ba8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4bac:	6f6e2d6d 	svcvs	0x006e2d6d
    4bb0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4bb4:	2f696261 	svccs	0x00696261
    4bb8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4bbc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4bc0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4bc4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4bc8:	2f656d6f 	svccs	0x00656d6f
    4bcc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4bd0:	442f6e69 	strtmi	r6, [pc], #-3689	; 4bd8 <patchGenfskRfe+0x630>
    4bd4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4bd8:	4f2f706f 	svcmi	0x002f706f
    4bdc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4be0:	502f5445 	eorpl	r5, pc, r5, asr #8
    4be4:	534f4349 	movtpl	r4, #62281	; 0xf349
    4be8:	6369502f 	cmnvs	r9, #47	; 0x2f
    4bec:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4bf0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4bf4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4bf8:	2f656d6f 	svccs	0x00656d6f
    4bfc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4c00:	442f6e69 	strtmi	r6, [pc], #-3689	; 4c08 <patchGenfskRfe+0x660>
    4c04:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4c08:	4f2f706f 	svcmi	0x002f706f
    4c0c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4c10:	502f5445 	eorpl	r5, pc, r5, asr #8
    4c14:	534f4349 	movtpl	r4, #62281	; 0xf349
    4c18:	6369502f 	cmnvs	r9, #47	; 0x2f
    4c1c:	0000534f 	andeq	r5, r0, pc, asr #6
    4c20:	5f726573 	svcpl	0x00726573
    4c24:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    4c28:	00010063 	andeq	r0, r1, r3, rrx
    4c2c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4c30:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4c34:	00020068 	andeq	r0, r2, r8, rrx
    4c38:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4c3c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    4c40:	00020068 	andeq	r0, r2, r8, rrx
    4c44:	63726100 	cmnvs	r2, #0, 2
    4c48:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4c4c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    4c50:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4c54:	00030068 	andeq	r0, r3, r8, rrx
    4c58:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4c5c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c60:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4c64:	62000003 	andvs	r0, r0, #3
    4c68:	6f747475 	svcvs	0x00747475
    4c6c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4c70:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4c74:	00000300 	andeq	r0, r0, r0, lsl #6
    4c78:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4c7c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4c80:	3c000004 	stccc	0, cr0, [r0], {4}
    4c84:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4c88:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    4c8c:	0000003e 	andeq	r0, r0, lr, lsr r0
    4c90:	2d050000 	stccs	0, cr0, [r5, #-0]
    4c94:	88020500 	stmdahi	r2, {r8, sl}
    4c98:	0300001e 	movweq	r0, #30
    4c9c:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    4ca0:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    4ca4:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    4ca8:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    4cac:	06020536 			; <UNDEFINED> instruction: 0x06020536
    4cb0:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    4cb4:	20050501 	andcs	r0, r5, r1, lsl #10
    4cb8:	2f060305 	svccs	0x00060305
    4cbc:	01060f05 	tsteq	r6, r5, lsl #30
    4cc0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4cc4:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4cc8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4ccc:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4cd0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4cd4:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    4cd8:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    4cdc:	304f0205 	subcc	r0, pc, r5, lsl #4
    4ce0:	01060905 	tsteq	r6, r5, lsl #18
    4ce4:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4ce8:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    4cec:	06020501 	streq	r0, [r2], -r1, lsl #10
    4cf0:	06010530 			; <UNDEFINED> instruction: 0x06010530
    4cf4:	030a0513 	movweq	r0, #42259	; 0xa513
    4cf8:	06026669 	streq	r6, [r2], -r9, ror #12
    4cfc:	a9010100 	stmdbge	r1, {r8}
    4d00:	0300000c 	movweq	r0, #12
    4d04:	00029900 	andeq	r9, r2, r0, lsl #18
    4d08:	fb010200 	blx	45512 <__ccfg+0x2556a>
    4d0c:	01000d0e 	tsteq	r0, lr, lsl #26
    4d10:	00010101 	andeq	r0, r1, r1, lsl #2
    4d14:	00010000 	andeq	r0, r1, r0
    4d18:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4d1c:	2f656d6f 	svccs	0x00656d6f
    4d20:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4d24:	442f6e69 	strtmi	r6, [pc], #-3689	; 4d2c <patchImageGenfsk+0xd0>
    4d28:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4d2c:	4f2f706f 	svcmi	0x002f706f
    4d30:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4d34:	502f5445 	eorpl	r5, pc, r5, asr #8
    4d38:	534f4349 	movtpl	r4, #62281	; 0xf349
    4d3c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4d40:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4d44:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4d48:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4d4c:	2f656d6f 	svccs	0x00656d6f
    4d50:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4d54:	442f6e69 	strtmi	r6, [pc], #-3689	; 4d5c <patchImageGenfsk+0x100>
    4d58:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4d5c:	4f2f706f 	svcmi	0x002f706f
    4d60:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4d64:	502f5445 	eorpl	r5, pc, r5, asr #8
    4d68:	534f4349 	movtpl	r4, #62281	; 0xf349
    4d6c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4d70:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4d74:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4d78:	43432f58 	movtmi	r2, #16216	; 0x3f58
    4d7c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4d80:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    4d84:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    4d88:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    4d8c:	2f006269 	svccs	0x00006269
    4d90:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4d94:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4d98:	2f6e6974 	svccs	0x006e6974
    4d9c:	6b736544 	blvs	1cde2b4 <__ccfg+0x1cbe30c>
    4da0:	2f706f74 	svccs	0x00706f74
    4da4:	4f534c4f 	svcmi	0x00534c4f
    4da8:	2f54454e 	svccs	0x0054454e
    4dac:	4f434950 	svcmi	0x00434950
    4db0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4db4:	2f534f63 	svccs	0x00534f63
    4db8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4dbc:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    4dc0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4dc4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    4dc8:	66722f45 	ldrbtvs	r2, [r2], -r5, asr #30
    4dcc:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    4dd0:	73656863 	cmnvc	r5, #6488064	; 0x630000
    4dd4:	73752f00 	cmnvc	r5, #0, 30
    4dd8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4ddc:	63672f62 	cmnvs	r7, #392	; 0x188
    4de0:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4de4:	6f6e2d6d 	svcvs	0x006e2d6d
    4de8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4dec:	2f696261 	svccs	0x00696261
    4df0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4df4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4df8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4dfc:	752f0065 	strvc	r0, [pc, #-101]!	; 4d9f <patchImageGenfsk+0x143>
    4e00:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	; <UNPREDICTABLE>
    4e04:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4e08:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4e0c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4e10:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4e14:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    4e18:	2f656d6f 	svccs	0x00656d6f
    4e1c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4e20:	442f6e69 	strtmi	r6, [pc], #-3689	; 4e28 <patchImageGenfsk+0x1cc>
    4e24:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4e28:	4f2f706f 	svcmi	0x002f706f
    4e2c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4e30:	502f5445 	eorpl	r5, pc, r5, asr #8
    4e34:	534f4349 	movtpl	r4, #62281	; 0xf349
    4e38:	6369502f 	cmnvs	r9, #47	; 0x2f
    4e3c:	2f00534f 	svccs	0x0000534f
    4e40:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4e44:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4e48:	2f6e6974 	svccs	0x006e6974
    4e4c:	6b736544 	blvs	1cde364 <__ccfg+0x1cbe3bc>
    4e50:	2f706f74 	svccs	0x00706f74
    4e54:	4f534c4f 	svcmi	0x00534c4f
    4e58:	2f54454e 	svccs	0x0054454e
    4e5c:	4f434950 	svcmi	0x00434950
    4e60:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4e64:	2f534f63 	svccs	0x00534f63
    4e68:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4e6c:	00006c65 	andeq	r6, r0, r5, ror #24
    4e70:	72706672 	rsbsvc	r6, r0, #119537664	; 0x7200000
    4e74:	632e706f 			; <UNDEFINED> instruction: 0x632e706f
    4e78:	00000100 	andeq	r0, r0, r0, lsl #2
    4e7c:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    4e80:	00020068 	andeq	r0, r2, r8, rrx
    4e84:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    4e88:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4e8c:	72000002 	andvc	r0, r0, #2
    4e90:	61705f66 	cmnvs	r0, r6, ror #30
    4e94:	5f686374 	svcpl	0x00686374
    4e98:	5f657063 	svcpl	0x00657063
    4e9c:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    4ea0:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    4ea4:	00000300 	andeq	r0, r0, r0, lsl #6
    4ea8:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    4eac:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    4eb0:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    4eb4:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    4eb8:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    4ebc:	00030068 	andeq	r0, r3, r8, rrx
    4ec0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4ec4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4ec8:	00040068 	andeq	r0, r4, r8, rrx
    4ecc:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4ed0:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4ed4:	00040068 	andeq	r0, r4, r8, rrx
    4ed8:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    4edc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    4ee0:	00050068 	andeq	r0, r5, r8, rrx
    4ee4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    4ee8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4eec:	00000500 	andeq	r0, r0, r0, lsl #10
    4ef0:	6b636f6c 	blvs	18e0ca8 <__ccfg+0x18c0d00>
    4ef4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4ef8:	66720000 	ldrbtvs	r0, [r2], -r0
    4efc:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    4f00:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4f04:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4f08:	66720000 	ldrbtvs	r0, [r2], -r0
    4f0c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 4d98 <patchImageGenfsk+0x13c>
    4f10:	5f6e6f6d 	svcpl	0x006e6f6d
    4f14:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    4f18:	00020068 	andeq	r0, r2, r8, rrx
    4f1c:	5f667200 	svcpl	0x00667200
    4f20:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    4f24:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    4f28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4f2c:	66720000 	ldrbtvs	r0, [r2], -r0
    4f30:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    4f34:	6e655f61 	cdpvs	15, 6, cr5, cr5, cr1, {3}
    4f38:	2e797274 	mrccs	2, 3, r7, cr9, cr4, {3}
    4f3c:	00020068 	andeq	r0, r2, r8, rrx
    4f40:	63726100 	cmnvs	r2, #0, 2
    4f44:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4f48:	6d000001 	stcvs	0, cr0, [r0, #-4]
    4f4c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4f50:	00010068 	andeq	r0, r1, r8, rrx
    4f54:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4f58:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4f5c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4f60:	62000001 	andvs	r0, r0, #1
    4f64:	6f747475 	svcvs	0x00747475
    4f68:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4f6c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4f70:	00000100 	andeq	r0, r0, r0, lsl #2
    4f74:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4f78:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4f7c:	6b000006 	blvs	4f9c <__exidx_end+0x70>
    4f80:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4f84:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    4f88:	73000007 	movwvc	r0, #7
    4f8c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4f90:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    4f94:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4f98:	2e73676e 	cdpcs	7, 7, cr6, cr3, cr14, {3}
    4f9c:	00010068 	andeq	r0, r1, r8, rrx
    4fa0:	17050000 	strne	r0, [r5, -r0]
    4fa4:	e8020500 	stmda	r2, {r8, sl}
    4fa8:	0300001e 	movweq	r0, #30
    4fac:	0501039f 	streq	r0, [r1, #-927]	; 0xfffffc61
    4fb0:	38051602 	stmdacc	r5, {r1, r9, sl, ip}
    4fb4:	26051406 	strcs	r1, [r5], -r6, lsl #8
    4fb8:	20380520 	eorscs	r0, r8, r0, lsr #10
    4fbc:	053c2605 	ldreq	r2, [ip, #-1541]!	; 0xfffff9fb
    4fc0:	01051e15 	tsteq	r5, r5, lsl lr
    4fc4:	00080231 	andeq	r0, r8, r1, lsr r2
    4fc8:	2a050101 	bcs	1453d4 <__ccfg+0x12542c>
    4fcc:	08020500 	stmdaeq	r2, {r8, sl}
    4fd0:	0300001f 	movweq	r0, #31
    4fd4:	050106c9 	streq	r0, [r1, #-1737]	; 0xfffff937
    4fd8:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    4fdc:	200e062a 	andcs	r0, lr, sl, lsr #12
    4fe0:	08060405 	stmdaeq	r6, {r0, r2, sl}
    4fe4:	06170544 	ldreq	r0, [r7], -r4, asr #10
    4fe8:	200c0501 	andcs	r0, ip, r1, lsl #10
    4fec:	20030805 	andcs	r0, r3, r5, lsl #16
    4ff0:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    4ff4:	20640321 	rsbcs	r0, r4, r1, lsr #6
    4ff8:	03060605 	movweq	r0, #26117	; 0x6605
    4ffc:	04055875 	streq	r5, [r5], #-2165	; 0xfffff78b
    5000:	200d0306 	andcs	r0, sp, r6, lsl #6
    5004:	2e9e0101 	fmlcse	f0, f6, f1
    5008:	01054a58 	tsteq	r5, r8, asr sl
    500c:	00fa0306 	rscseq	r0, sl, r6, lsl #6
    5010:	06040501 	streq	r0, [r4], -r1, lsl #10
    5014:	207f9003 	rsbscs	r9, pc, r3
    5018:	060b055d 			; <UNDEFINED> instruction: 0x060b055d
    501c:	05202001 	streq	r2, [r0, #-1]!
    5020:	052f0604 	streq	r0, [pc, #-1540]!	; 4a24 <patchGenfskRfe+0x47c>
    5024:	63030606 	movwvs	r0, #13830	; 0x3606
    5028:	06040501 	streq	r0, [r4], -r1, lsl #10
    502c:	052e2103 	streq	r2, [lr, #-259]!	; 0xfffffefd
    5030:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5034:	04052008 	streq	r2, [r5], #-8
    5038:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    503c:	0100e203 	tsteq	r0, r3, lsl #4
    5040:	01060505 	tsteq	r6, r5, lsl #10
    5044:	2f060305 	svccs	0x00060305
    5048:	050f0205 	streq	r0, [pc, #-517]	; 4e4b <patchImageGenfsk+0x1ef>
    504c:	05150608 	ldreq	r0, [r5, #-1544]	; 0xfffff9f8
    5050:	04051d09 	streq	r1, [r5], #-3337	; 0xfffff2f7
    5054:	7fa40306 	svcvc	0x00a40306
    5058:	06110520 	ldreq	r0, [r1], -r0, lsr #10
    505c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5060:	06050541 	streq	r0, [r5], -r1, asr #10
    5064:	1f070513 	svcne	0x00070513
    5068:	21060505 	tstcs	r6, r5, lsl #10
    506c:	5204055b 	andpl	r0, r4, #381681664	; 0x16c00000
    5070:	01060705 	tsteq	r6, r5, lsl #14
    5074:	22060505 	andcs	r0, r6, #20971520	; 0x1400000
    5078:	5a060101 	bpl	185484 <__ccfg+0x1654dc>
    507c:	0d054a06 	vstreq	s8, [r5, #-24]	; 0xffffffe8
    5080:	20053506 	andcs	r3, r5, r6, lsl #10
    5084:	06050521 	streq	r0, [r5], -r1, lsr #10
    5088:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    508c:	2d080513 	cfstr32cs	mvfx0, [r8, #-76]	; 0xffffffb4
    5090:	2d061b05 	vstrcs	d1, [r6, #-20]	; 0xffffffec
    5094:	01061e05 	tsteq	r6, r5, lsl #28
    5098:	20061205 	andcs	r1, r6, r5, lsl #4
    509c:	01060405 	tsteq	r6, r5, lsl #8
    50a0:	3c100306 	ldccc	3, cr0, [r0], {6}
    50a4:	01062e05 	tsteq	r6, r5, lsl #28
    50a8:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    50ac:	04051f2e 	streq	r1, [r5], #-3886	; 0xfffff0d2
    50b0:	2e053e06 	cdpcs	14, 0, cr3, cr5, cr6, {0}
    50b4:	24050106 	strcs	r0, [r5], #-262	; 0xfffffefa
    50b8:	06040520 	streq	r0, [r4], -r0, lsr #10
    50bc:	0524594b 	streq	r5, [r4, #-2379]!	; 0xfffff6b5
    50c0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    50c4:	200e0308 	andcs	r0, lr, r8, lsl #6
    50c8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    50cc:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    50d0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    50d4:	0c052114 	stfeqs	f2, [r5], {20}
    50d8:	04052049 	streq	r2, [r5], #-73	; 0xffffffb7
    50dc:	11033006 	tstne	r3, r6
    50e0:	75032f01 	strvc	r2, [r3, #-3841]	; 0xfffff0ff
    50e4:	060a0558 			; <UNDEFINED> instruction: 0x060a0558
    50e8:	06040501 	streq	r0, [r4], -r1, lsl #10
    50ec:	060a0536 			; <UNDEFINED> instruction: 0x060a0536
    50f0:	21060501 	tstcs	r6, r1, lsl #10
    50f4:	2e1f0a05 	vnmlscs.f32	s0, s30, s10
    50f8:	053c2020 	ldreq	r2, [ip, #-32]!	; 0xffffffe0
    50fc:	09030604 	stmdbeq	r3, {r2, r9, sl}
    5100:	060d0566 	streq	r0, [sp], -r6, ror #10
    5104:	05202001 	streq	r2, [r0, #-1]!
    5108:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    510c:	051e060d 	ldreq	r0, [lr, #-1549]	; 0xfffff9f3
    5110:	02420604 	subeq	r0, r2, #4, 12	; 0x400000
    5114:	0101001f 	tsteq	r1, pc, lsl r0
    5118:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    511c:	00209802 	eoreq	r9, r0, r2, lsl #16
    5120:	01c40300 	biceq	r0, r4, r0, lsl #6
    5124:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5128:	06230515 			; <UNDEFINED> instruction: 0x06230515
    512c:	20017803 	andcs	r7, r1, r3, lsl #16
    5130:	03060205 	movweq	r0, #25093	; 0x6205
    5134:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    5138:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    513c:	3c0c0501 	cfstr32cc	mvfx0, [ip], {1}
    5140:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5144:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    5148:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    514c:	06300604 	ldrteq	r0, [r0], -r4, lsl #12
    5150:	06030526 	streq	r0, [r3], -r6, lsr #10
    5154:	0606053a 			; <UNDEFINED> instruction: 0x0606053a
    5158:	06040501 	streq	r0, [r4], -r1, lsl #10
    515c:	03054b2f 	movweq	r4, #23343	; 0x5b2f
    5160:	03080531 	movweq	r0, #34097	; 0x8531
    5164:	06053c71 			; <UNDEFINED> instruction: 0x06053c71
    5168:	01051306 	tsteq	r5, r6, lsl #6
    516c:	02201003 	eoreq	r1, r0, #3
    5170:	01010009 	tsteq	r1, r9
    5174:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    5178:	0020e002 	eoreq	lr, r0, r2
    517c:	03940300 	orrseq	r0, r4, #0, 6
    5180:	16020501 	strne	r0, [r2], -r1, lsl #10
    5184:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    5188:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    518c:	02052005 	andeq	r2, r5, #5
    5190:	053d3f06 	ldreq	r3, [sp, #-3846]!	; 0xfffff0fa
    5194:	024b0601 	subeq	r0, fp, #1048576	; 0x100000
    5198:	01010006 	tsteq	r1, r6
    519c:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    51a0:	00210402 	eoreq	r0, r1, r2, lsl #8
    51a4:	02e00300 	rsceq	r0, r0, #0, 6
    51a8:	16020501 	strne	r0, [r2], -r1, lsl #10
    51ac:	0e061705 	cdpeq	7, 0, cr1, cr6, cr5, {0}
    51b0:	05240e05 	streq	r0, [r4, #-3589]!	; 0xfffff1fb
    51b4:	02052005 	andeq	r2, r5, #5
    51b8:	02043f06 	andeq	r3, r4, #6, 30
    51bc:	03063505 	movweq	r3, #25861	; 0x6505
    51c0:	04017eb9 	streq	r7, [r1], #-3769	; 0xfffff147
    51c4:	03020501 	movweq	r0, #9473	; 0x2501
    51c8:	062001c7 	strteq	r0, [r0], -r7, asr #3
    51cc:	04303f5a 	ldrteq	r3, [r0], #-3930	; 0xfffff0a6
    51d0:	03050502 	movweq	r0, #21762	; 0x5502
    51d4:	05017eb2 	streq	r7, [r1, #-3762]	; 0xfffff14e
    51d8:	04010635 	streq	r0, [r1], #-1589	; 0xfffff9cb
    51dc:	03020501 	movweq	r0, #9473	; 0x2501
    51e0:	042001d0 	strteq	r0, [r0], #-464	; 0xfffffe30
    51e4:	03350502 	teqeq	r5, #8388608	; 0x800000
    51e8:	04207eb0 	strteq	r7, [r0], #-3760	; 0xfffff150
    51ec:	06020501 	streq	r0, [r2], -r1, lsl #10
    51f0:	2001d003 	andcs	sp, r1, r3
    51f4:	06480531 			; <UNDEFINED> instruction: 0x06480531
    51f8:	06020501 	streq	r0, [r2], -r1, lsl #10
    51fc:	04013131 	streq	r3, [r1], #-305	; 0xfffffecf
    5200:	03290503 			; <UNDEFINED> instruction: 0x03290503
    5204:	0505015f 	streq	r0, [r5, #-351]	; 0xfffffea1
    5208:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    520c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5210:	1c030602 	stcne	6, cr0, [r3], {2}
    5214:	0503044a 	streq	r0, [r3, #-1098]	; 0xfffffbb6
    5218:	015f0329 	cmpeq	pc, r9, lsr #6
    521c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    5220:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    5224:	06020501 	streq	r0, [r2], -r1, lsl #10
    5228:	142e1c03 	strtne	r1, [lr], #-3075	; 0xfffff3fd
    522c:	0101014b 	tsteq	r1, fp, asr #2
    5230:	01050101 	tsteq	r5, r1, lsl #2
    5234:	0b021306 	bleq	89e54 <__ccfg+0x69eac>
    5238:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    523c:	0205000d 	andeq	r0, r5, #13
    5240:	00002160 	andeq	r2, r0, r0, ror #2
    5244:	0101e103 	tsteq	r1, r3, lsl #2
    5248:	02052006 	andeq	r2, r5, #6
    524c:	03054f06 	movweq	r4, #24326	; 0x5f06
    5250:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5254:	20060501 	andcs	r0, r6, r1, lsl #10
    5258:	31060305 	tstcc	r6, r5, lsl #6
    525c:	01060605 	tsteq	r6, r5, lsl #12
    5260:	30060405 	andcc	r0, r6, r5, lsl #8
    5264:	4c03055b 	cfstr32mi	mvfx0, [r3], {91}	; 0x5b
    5268:	75030805 	strvc	r0, [r3, #-2053]	; 0xfffff7fb
    526c:	0606053c 			; <UNDEFINED> instruction: 0x0606053c
    5270:	03010513 	movweq	r0, #5395	; 0x1513
    5274:	0502200c 	streq	r2, [r2, #-12]
    5278:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    527c:	0205000d 	andeq	r0, r5, #13
    5280:	00002198 	muleq	r0, r8, r1
    5284:	0101fe03 	tsteq	r1, r3, lsl #28	; <UNPREDICTABLE>
    5288:	09030205 	stmdbeq	r3, {r0, r2, r9}
    528c:	03040101 	movweq	r0, #16641	; 0x4101
    5290:	1b032905 	blne	cf6ac <__ccfg+0xaf704>
    5294:	17050501 	strne	r0, [r5, -r1, lsl #10]
    5298:	01062d05 	tsteq	r6, r5, lsl #26
    529c:	0d050104 	stfeqs	f0, [r5, #-16]
    52a0:	043c5703 	ldrteq	r5, [ip], #-1795	; 0xfffff8fd
    52a4:	032d0503 			; <UNDEFINED> instruction: 0x032d0503
    52a8:	01042e29 	tsteq	r4, r9, lsr #28
    52ac:	03060205 	movweq	r0, #25093	; 0x6205
    52b0:	03042060 	movweq	r2, #16480	; 0x4060
    52b4:	1b032905 	blne	cf6d0 <__ccfg+0xaf728>
    52b8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    52bc:	01062d05 	tsteq	r6, r5, lsl #26
    52c0:	02050104 	andeq	r0, r5, #4, 2
    52c4:	2e600306 	cdpcs	3, 6, cr0, cr0, cr6, {0}
    52c8:	07052f19 	smladeq	r5, r9, pc, r2	; <UNPREDICTABLE>
    52cc:	3c1c0501 	cfldr32cc	mvfx0, [ip], {1}
    52d0:	01061e05 	tsteq	r6, r5, lsl #28
    52d4:	062e0205 	strteq	r0, [lr], -r5, lsl #4
    52d8:	06480531 			; <UNDEFINED> instruction: 0x06480531
    52dc:	32020501 	andcc	r0, r2, #4194304	; 0x400000
    52e0:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    52e4:	31240602 			; <UNDEFINED> instruction: 0x31240602
    52e8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    52ec:	017ee403 	cmneq	lr, r3, lsl #8
    52f0:	01063505 	tsteq	r6, r5, lsl #10
    52f4:	02050104 	andeq	r0, r5, #4, 2
    52f8:	3c019f03 	stccc	15, cr9, [r1], {3}
    52fc:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    5300:	207ee103 	rsbscs	lr, lr, r3, lsl #2
    5304:	02050104 	andeq	r0, r5, #4, 2
    5308:	019f0306 	orrseq	r0, pc, r6, lsl #6
    530c:	04043220 	streq	r3, [r4], #-544	; 0xfffffde0
    5310:	10030405 	andne	r0, r3, r5, lsl #8
    5314:	01730301 	cmneq	r3, r1, lsl #6
    5318:	6b030105 	blvs	c5734 <__ccfg+0xa578c>
    531c:	03040501 	movweq	r0, #17665	; 0x4501
    5320:	61030116 	tstvs	r3, r6, lsl r1
    5324:	1d031501 	cfstr32ne	mvfx1, [r3, #-4]
    5328:	016d0366 	cmneq	sp, r6, ror #6
    532c:	12051513 	andne	r1, r5, #79691776	; 0x4c00000
    5330:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
    5334:	f1030405 			; <UNDEFINED> instruction: 0xf1030405
    5338:	04042e01 	streq	r2, [r4], #-3585	; 0xfffff1ff
    533c:	8f031205 	svchi	0x00031205
    5340:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    5344:	12052106 	andne	r2, r5, #-2147483647	; 0x80000001
    5348:	053d1306 	ldreq	r1, [sp, #-774]!	; 0xfffffcfa
    534c:	052f3d13 	streq	r3, [pc, #-3347]!	; 4641 <patchGenfskRfe+0x99>
    5350:	11052f12 	tstne	r5, r2, lsl pc
    5354:	0312053e 	tsteq	r2, #260046848	; 0xf800000
    5358:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    535c:	13132f06 	tstne	r3, #6, 30
    5360:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    5364:	04010611 	streq	r0, [r1], #-1553	; 0xfffff9ef
    5368:	031c0505 	tsteq	ip, #20971520	; 0x1400000
    536c:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
    5370:	04051f14 	streq	r1, [r5], #-3860	; 0xfffff0ec
    5374:	07052506 	streq	r2, [r5, -r6, lsl #10]
    5378:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    537c:	07051b18 	smladeq	r5, r8, fp, r1
    5380:	0a052f06 	beq	150fa0 <__ccfg+0x130ff8>
    5384:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5388:	0a052f06 	beq	150fa8 <__ccfg+0x131000>
    538c:	07051306 	streq	r1, [r5, -r6, lsl #6]
    5390:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    5394:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5398:	2f2f210d 	svccs	0x002f210d
    539c:	2121212f 			; <UNDEFINED> instruction: 0x2121212f
    53a0:	05300405 	ldreq	r0, [r0, #-1029]!	; 0xfffffbfb
    53a4:	78030607 	stmdavc	r3, {r0, r1, r2, r9, sl}
    53a8:	1313133c 	tstne	r3, #60, 6	; 0xf0000000
    53ac:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    53b0:	2e060d05 	cdpcs	13, 0, cr0, cr6, cr5, {0}
    53b4:	21060c05 	tstcs	r6, r5, lsl #24
    53b8:	01060405 	tsteq	r6, r5, lsl #8
    53bc:	13132206 	tstne	r3, #1610612736	; 0x60000000
    53c0:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    53c4:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    53c8:	03090501 	movweq	r0, #38145	; 0x9501
    53cc:	04207e95 	strteq	r7, [r0], #-3733	; 0xfffff16b
    53d0:	030a0505 	movweq	r0, #42245	; 0xa505
    53d4:	052001eb 	streq	r0, [r0, #-491]!	; 0xfffffe15
    53d8:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    53dc:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    53e0:	052f0604 	streq	r0, [pc, #-1540]!	; 4de4 <patchImageGenfsk+0x188>
    53e4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    53e8:	052f0604 	streq	r0, [pc, #-1540]!	; 4dec <patchImageGenfsk+0x190>
    53ec:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    53f0:	052f0604 	streq	r0, [pc, #-1540]!	; 4df4 <patchImageGenfsk+0x198>
    53f4:	0401060a 	streq	r0, [r1], #-1546	; 0xfffff9f6
    53f8:	06090501 	streq	r0, [r9], -r1, lsl #10
    53fc:	2e7e9103 	expcse	f1, f3
    5400:	05360205 	ldreq	r0, [r6, #-517]!	; 0xfffffdfb
    5404:	02053f09 	andeq	r3, r5, #9, 30	; 0x24
    5408:	3e3c1203 	cdpcc	2, 3, cr1, cr12, cr3, {0}
    540c:	5a3d435c 	bpl	f56184 <__ccfg+0xf361dc>
    5410:	1b250613 	blne	946c64 <__ccfg+0x926cbc>
    5414:	30056906 	andcc	r6, r5, r6, lsl #18
    5418:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    541c:	2d053d06 	stccs	13, cr3, [r5, #-24]	; 0xffffffe8
    5420:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5424:	2d052f06 	stccs	15, cr2, [r5, #-24]	; 0xffffffe8
    5428:	02051f06 	andeq	r1, r5, #6, 30
    542c:	28010521 	stmdacs	r1, {r0, r5, r8, sl}
    5430:	78030205 	stmdavc	r3, {r0, r2, r9}
    5434:	0033022e 	eorseq	r0, r3, lr, lsr #4
    5438:	1e050101 	adfnes	f0, f5, f1
    543c:	18020500 	stmdane	r2, {r8, sl}
    5440:	03000023 	movweq	r0, #35	; 0x23
    5444:	050103b4 	streq	r0, [r1, #-948]	; 0xfffffc4c
    5448:	03131402 	tsteq	r3, #33554432	; 0x2000000
    544c:	02040109 	andeq	r0, r4, #1073741826	; 0x40000002
    5450:	ee030305 	cdp	3, 0, cr0, cr3, cr5, {0}
    5454:	0104017d 	tsteq	r4, sp, ror r1
    5458:	03061e05 	movweq	r1, #28165	; 0x6e05
    545c:	04010286 	streq	r0, [r1], #-646	; 0xfffffd7a
    5460:	03300502 	teqeq	r0, #8388608	; 0x800000
    5464:	052e7dfa 	streq	r7, [lr, #-3578]!	; 0xfffff206
    5468:	03057b32 	movweq	r7, #23346	; 0x5b32
    546c:	05052906 	streq	r2, [r5, #-2310]	; 0xfffff6fa
    5470:	06320517 			; <UNDEFINED> instruction: 0x06320517
    5474:	06090501 	streq	r0, [r9], -r1, lsl #10
    5478:	060a0521 	streq	r0, [sl], -r1, lsr #10
    547c:	20030501 	andcs	r0, r3, r1, lsl #10
    5480:	01043306 	tsteq	r4, r6, lsl #6
    5484:	03060a05 	movweq	r0, #27141	; 0x6a05
    5488:	0401028b 	streq	r0, [r1], #-651	; 0xfffffd75
    548c:	03300502 	teqeq	r0, #8388608	; 0x800000
    5490:	04207df5 	strteq	r7, [r0], #-3573	; 0xfffff20b
    5494:	03050501 	movweq	r0, #21761	; 0x5501
    5498:	0420029e 	strteq	r0, [r0], #-670	; 0xfffffd62
    549c:	03300502 	teqeq	r0, #8388608	; 0x800000
    54a0:	04207de2 	strteq	r7, [r0], #-3554	; 0xfffff21e
    54a4:	032d0501 			; <UNDEFINED> instruction: 0x032d0501
    54a8:	04200291 	strteq	r0, [r0], #-657	; 0xfffffd6f
    54ac:	03300502 	teqeq	r0, #8388608	; 0x800000
    54b0:	042e7def 	strteq	r7, [lr], #-3567	; 0xfffff211
    54b4:	06020501 	streq	r0, [r2], -r1, lsl #10
    54b8:	58028b03 	stmdapl	r2, {r0, r1, r8, r9, fp, pc}
    54bc:	01062705 	tsteq	r6, r5, lsl #14
    54c0:	0f030505 	svceq	0x00030505
    54c4:	030a0520 	movweq	r0, #42272	; 0xa520
    54c8:	06052e71 			; <UNDEFINED> instruction: 0x06052e71
    54cc:	03052f06 	movweq	r2, #24326	; 0x5f06
    54d0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    54d4:	06040501 	streq	r0, [r4], -r1, lsl #10
    54d8:	1301013d 	movwne	r0, #4413	; 0x113d
    54dc:	14061905 	strne	r1, [r6], #-2309	; 0xfffff6fb
    54e0:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
    54e4:	0705201d 	smladeq	r5, sp, r0, r2
    54e8:	1e060520 	cfsh32ne	mvfx0, mvfx6, #16
    54ec:	30060405 	andcc	r0, r6, r5, lsl #8
    54f0:	01060705 	tsteq	r6, r5, lsl #14
    54f4:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    54f8:	05054a37 	streq	r4, [r5, #-2615]	; 0xfffff5c9
    54fc:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    5500:	08051606 	stmdaeq	r5, {r1, r2, r9, sl, ip}
    5504:	0605052a 	streq	r0, [r5], -sl, lsr #10
    5508:	061f0524 	ldreq	r0, [pc], -r4, lsr #10
    550c:	20130501 	andscs	r0, r3, r1, lsl #10
    5510:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    5514:	05052013 	streq	r2, [r5, #-19]	; 0xffffffed
    5518:	0f052106 	svceq	0x00052106
    551c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5520:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
    5524:	060f056e 	streq	r0, [pc], -lr, ror #10
    5528:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    552c:	052e6a03 	streq	r6, [lr, #-2563]!	; 0xfffff5fd
    5530:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5534:	1b051106 	blne	149954 <__ccfg+0x1299ac>
    5538:	0605052f 	streq	r0, [r5], -pc, lsr #10
    553c:	053c1203 	ldreq	r1, [ip, #-515]!	; 0xfffffdfd
    5540:	4a0a0302 	bmi	286150 <__ccfg+0x2661a8>
    5544:	01060505 	tsteq	r6, r5, lsl #10
    5548:	21060305 	tstcs	r6, r5, lsl #6
    554c:	01140101 	tsteq	r4, r1, lsl #2
    5550:	06010501 	streq	r0, [r1], -r1, lsl #10
    5554:	2b030531 	blcs	c6a20 <__ccfg+0xa6a78>
    5558:	02690105 	rsbeq	r0, r9, #1073741825	; 0x40000001
    555c:	01010013 	tsteq	r1, r3, lsl r0
    5560:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5564:	0023e802 	eoreq	lr, r3, r2, lsl #16
    5568:	048c0300 	streq	r0, [ip], #768	; 0x300
    556c:	2e060101 	adfcss	f0, f6, f1
    5570:	03060305 	movweq	r0, #25349	; 0x6305
    5574:	0705820a 	streq	r8, [r5, -sl, lsl #4]
    5578:	06050106 	streq	r0, [r5], -r6, lsl #2
    557c:	06040520 	streq	r0, [r4], -r0, lsr #10
    5580:	0305304c 	movweq	r3, #20556	; 0x504c
    5584:	060e054f 	streq	r0, [lr], -pc, asr #10
    5588:	20060501 	andcs	r0, r6, r1, lsl #10
    558c:	4b060405 	blmi	1865a8 <__ccfg+0x166600>
    5590:	01060705 	tsteq	r6, r5, lsl #14
    5594:	21060505 	tstcs	r6, r5, lsl #10
    5598:	05360305 	ldreq	r0, [r6, #-773]!	; 0xfffffcfb
    559c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    55a0:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    55a4:	24053d06 	strcs	r3, [r5], #-3334	; 0xfffff2fa
    55a8:	1b050106 	blne	1459c8 <__ccfg+0x125a20>
    55ac:	20070558 	andcs	r0, r7, r8, asr r5
    55b0:	33060505 	movwcc	r0, #25861	; 0x6505
    55b4:	0c051306 	stceq	3, cr1, [r5], {6}
    55b8:	2105051f 	tstcs	r5, pc, lsl r5
    55bc:	051f0c05 	ldreq	r0, [pc, #-3077]	; 49bf <patchGenfskRfe+0x417>
    55c0:	0c052105 	stfeqs	f2, [r5], {5}
    55c4:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    55c8:	20060121 	andcs	r0, r6, r1, lsr #2
    55cc:	052e062e 	streq	r0, [lr, #-1582]!	; 0xfffff9d2
    55d0:	4a72030a 	bmi	1c86200 <__ccfg+0x1c66258>
    55d4:	01060d05 	tsteq	r6, r5, lsl #26
    55d8:	30060405 	andcc	r0, r6, r5, lsl #8
    55dc:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    55e0:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    55e4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    55e8:	01880306 	orreq	r0, r8, r6, lsl #6
    55ec:	0627052e 	strteq	r0, [r7], -lr, lsr #10
    55f0:	200a0501 	andcs	r0, sl, r1, lsl #10
    55f4:	2f060605 	svccs	0x00060605
    55f8:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    55fc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5600:	052d0613 	streq	r0, [sp, #-1555]!	; 0xfffff9ed
    5604:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    5608:	05200606 	streq	r0, [r0, #-1542]!	; 0xfffff9fa
    560c:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    5610:	13050106 	movwne	r0, #20742	; 0x5106
    5614:	06051f06 	streq	r1, [r5], -r6, lsl #30
    5618:	16020501 	strne	r0, [r2], -r1, lsl #10
    561c:	74470330 	strbvc	r0, [r7], #-816	; 0xfffffcd0
    5620:	04050101 	streq	r0, [r5], #-257	; 0xfffffeff
    5624:	0101cd03 	tsteq	r1, r3, lsl #26
    5628:	de030205 	cdple	2, 0, cr0, cr3, cr5, {0}
    562c:	1413017e 	ldrne	r0, [r3], #-382	; 0xfffffe82
    5630:	01060505 	tsteq	r6, r5, lsl #10
    5634:	01aa0306 			; <UNDEFINED> instruction: 0x01aa0306
    5638:	0101154a 	tsteq	r1, sl, asr #10
    563c:	06080514 			; <UNDEFINED> instruction: 0x06080514
    5640:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    5644:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    5648:	05220606 	streq	r0, [r2, #-1542]!	; 0xfffff9fa
    564c:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    5650:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    5654:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    5658:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    565c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5660:	4b300604 	blmi	c06e78 <__ccfg+0xbe6ed0>
    5664:	01060f05 	tsteq	r6, r5, lsl #30
    5668:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    566c:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    5670:	0b053504 	bleq	152a88 <__ccfg+0x132ae0>
    5674:	060e052a 	streq	r0, [lr], -sl, lsr #10
    5678:	06050501 	streq	r0, [r5], -r1, lsl #10
    567c:	6b030530 	blvs	c6b44 <__ccfg+0xa6b9c>
    5680:	01060705 	tsteq	r6, r5, lsl #14
    5684:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5688:	59330604 	ldmdbpl	r3!, {r2, r9, sl}
    568c:	0607054b 	streq	r0, [r7], -fp, asr #10
    5690:	06030501 	streq	r0, [r3], -r1, lsl #10
    5694:	054a1003 	strbeq	r1, [sl, #-3]
    5698:	7d9e0302 	ldcvc	3, cr0, [lr, #8]
    569c:	06050501 	streq	r0, [r5], -r1, lsl #10
    56a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    56a4:	5800d603 	stmdapl	r0, {r0, r1, r9, sl, ip, lr, pc}
    56a8:	03050101 	movweq	r0, #20737	; 0x5101
    56ac:	01028d03 	tsteq	r2, r3, lsl #26
    56b0:	052e1e03 	streq	r1, [lr, #-3587]!	; 0xfffff1fd
    56b4:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    56b8:	19052131 	stmdbne	r5, {r0, r4, r5, r8, sp}
    56bc:	0603052d 	streq	r0, [r3], -sp, lsr #10
    56c0:	06310521 	ldrteq	r0, [r1], -r1, lsr #10
    56c4:	22030501 	andcs	r0, r3, #4194304	; 0x400000
    56c8:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    56cc:	32220603 	eorcc	r0, r2, #3145728	; 0x300000
    56d0:	01060705 	tsteq	r6, r5, lsl #14
    56d4:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    56d8:	055b0603 	ldrbeq	r0, [fp, #-1539]	; 0xfffff9fd
    56dc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    56e0:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    56e4:	03053106 	movweq	r3, #20742	; 0x5106
    56e8:	06130541 	ldreq	r0, [r3], -r1, asr #10
    56ec:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    56f0:	4b060405 	blmi	18670c <__ccfg+0x166764>
    56f4:	01060705 	tsteq	r6, r5, lsl #14
    56f8:	41060505 	tstmi	r6, r5, lsl #10
    56fc:	01061b05 	tsteq	r6, r5, lsl #22
    5700:	2f060505 	svccs	0x00060505
    5704:	01063305 	tsteq	r6, r5, lsl #6
    5708:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    570c:	3f04052f 	svccc	0x0004052f
    5710:	01060b05 	tsteq	r6, r5, lsl #22
    5714:	03060405 	movweq	r0, #25605	; 0x6405
    5718:	01013c09 	tsteq	r1, r9, lsl #24
    571c:	03060305 	movweq	r0, #25349	; 0x6305
    5720:	065800c3 	ldrbeq	r0, [r8], -r3, asr #1
    5724:	206d0342 	rsbcs	r0, sp, r2, asr #6
    5728:	060a053d 			; <UNDEFINED> instruction: 0x060a053d
    572c:	03030501 	movweq	r0, #13569	; 0x3501
    5730:	0a052e0c 	beq	150f68 <__ccfg+0x130fc0>
    5734:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    5738:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    573c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5740:	01220603 			; <UNDEFINED> instruction: 0x01220603
    5744:	0b031501 	bleq	cab50 <__ccfg+0xaaba8>
    5748:	06070520 	streq	r0, [r7], -r0, lsr #10
    574c:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    5750:	05581f05 	ldrbeq	r1, [r8, #-3845]	; 0xfffff0fb
    5754:	3e053d07 	cdpcc	13, 0, cr3, cr5, cr7, {0}
    5758:	06040549 	streq	r0, [r4], -r9, asr #10
    575c:	3f01053e 	svccc	0x0001053e
    5760:	00200201 	eoreq	r0, r0, r1, lsl #4
    5764:	1f050101 	svcne	0x00050101
    5768:	d8020500 	stmdale	r2, {r8, sl}
    576c:	03000025 	movweq	r0, #37	; 0x25
    5770:	050103eb 	streq	r0, [r1, #-1003]	; 0xfffffc15
    5774:	1f051702 	svcne	0x00051702
    5778:	06050d06 	streq	r0, [r5], -r6, lsl #26
    577c:	2e050525 	cfsh32cs	mvfx0, mvfx5, #21
    5780:	23060305 	movwcs	r0, #25349	; 0x6305
    5784:	30050204 	andcc	r0, r5, r4, lsl #4
    5788:	7eb00306 	cdpvc	3, 11, cr0, cr0, cr6, {0}
    578c:	06030566 	streq	r0, [r3], -r6, ror #10
    5790:	1705051b 	smladne	r5, fp, r5, r0
    5794:	01063005 	tsteq	r6, r5
    5798:	21060a05 	tstcs	r6, r5, lsl #20
    579c:	01060b05 	tsteq	r6, r5, lsl #22
    57a0:	04200305 	strteq	r0, [r0], #-773	; 0xfffffcfb
    57a4:	06020501 	streq	r0, [r2], -r1, lsl #10
    57a8:	2e01d603 	cfmadd32cs	mvax0, mvfx13, mvfx1, mvfx3
    57ac:	03050204 	movweq	r0, #20996	; 0x5204
    57b0:	017e8103 	cmneq	lr, r3, lsl #2
    57b4:	01063205 	tsteq	r6, r5, lsl #4
    57b8:	02050104 	andeq	r0, r5, #4, 2
    57bc:	20028203 	andcs	r8, r2, r3, lsl #4
    57c0:	32050204 	andcc	r0, r5, #4, 4	; 0x40000000
    57c4:	207dfe03 	rsbscs	pc, sp, r3, lsl #28
    57c8:	02050104 	andeq	r0, r5, #4, 2
    57cc:	2e028203 	cdpcs	2, 0, cr8, cr2, cr3, {0}
    57d0:	582e8206 	stmdapl	lr!, {r1, r2, r9, pc}
    57d4:	0114014a 	tsteq	r4, sl, asr #2
    57d8:	06010558 			; <UNDEFINED> instruction: 0x06010558
    57dc:	000d0213 	andeq	r0, sp, r3, lsl r2
    57e0:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    57e4:	48020500 	stmdami	r2, {r8, sl}
    57e8:	03000026 	movweq	r0, #38	; 0x26
    57ec:	050107d6 	streq	r0, [r1, #-2006]	; 0xfffff82a
    57f0:	01090302 	tsteq	r9, r2, lsl #6
    57f4:	03062505 	movweq	r2, #25861	; 0x6505
    57f8:	0d050177 	stfeqs	f0, [r5, #-476]	; 0xfffffe24
    57fc:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    5800:	20770325 	rsbscs	r0, r7, r5, lsr #6
    5804:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
    5808:	06030520 	streq	r0, [r3], -r0, lsr #10
    580c:	05360630 	ldreq	r0, [r6, #-1584]!	; 0xfffff9d0
    5810:	7a030602 	bvc	c7020 <__ccfg+0xa7078>
    5814:	0605052e 	streq	r0, [r5], -lr, lsr #10
    5818:	06020501 	streq	r0, [r2], -r1, lsl #10
    581c:	060e0524 	streq	r0, [lr], -r4, lsr #10
    5820:	20050501 	andcs	r0, r5, r1, lsl #10
    5824:	30060305 	andcc	r0, r6, r5, lsl #6
    5828:	37060705 	strcc	r0, [r6, -r5, lsl #14]
    582c:	28060205 	stmdacs	r6, {r0, r2, r9}
    5830:	03060405 	movweq	r0, #25605	; 0x6405
    5834:	05017ea1 	streq	r7, [r1, #-3745]	; 0xfffff15f
    5838:	01df0309 	bicseq	r0, pc, r9, lsl #6
    583c:	030e0520 	movweq	r0, #58656	; 0xe520
    5840:	052e7eac 	streq	r7, [lr, #-3756]!	; 0xfffff154
    5844:	0b052813 	bleq	14f898 <__ccfg+0x12f8f0>
    5848:	2e01cc03 	cdpcs	12, 0, cr12, cr1, cr3, {0}
    584c:	23060205 	movwcs	r0, #25093	; 0x6205
    5850:	017e9b03 	cmneq	lr, r3, lsl #22
    5854:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    5858:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
    585c:	03051306 	movweq	r1, #21254	; 0x5306
    5860:	06055d06 	streq	r5, [r5], -r6, lsl #26
    5864:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5868:	03052f06 	movweq	r2, #24326	; 0x5f06
    586c:	060e055a 			; <UNDEFINED> instruction: 0x060e055a
    5870:	06030501 	streq	r0, [r3], -r1, lsl #10
    5874:	06060530 			; <UNDEFINED> instruction: 0x06060530
    5878:	06040501 	streq	r0, [r4], -r1, lsl #10
    587c:	06130530 			; <UNDEFINED> instruction: 0x06130530
    5880:	06030501 	streq	r0, [r3], -r1, lsl #10
    5884:	05131332 	ldreq	r1, [r3, #-818]	; 0xfffffcce
    5888:	05140606 	ldreq	r0, [r4, #-1542]	; 0xfffff9fa
    588c:	06051f17 			; <UNDEFINED> instruction: 0x06051f17
    5890:	1f170521 	svcne	0x00170521
    5894:	052b1305 	streq	r1, [fp, #-773]!	; 0xfffffcfb
    5898:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    589c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    58a0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    58a4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    58a8:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    58ac:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    58b0:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    58b4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    58b8:	02053c09 	andeq	r3, r5, #2304	; 0x900
    58bc:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    58c0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    58c4:	15053106 	strne	r3, [r5, #-262]	; 0xfffffefa
    58c8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    58cc:	15052106 	strne	r2, [r5, #-262]	; 0xfffffefa
    58d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    58d4:	030b0520 	movweq	r0, #46368	; 0xb520
    58d8:	052001c0 	streq	r0, [r0, #-448]!	; 0xfffffe40
    58dc:	7ec00315 	mcrvc	3, 6, r0, cr0, cr5, {0}
    58e0:	06020520 	streq	r0, [r2], -r0, lsr #10
    58e4:	06190523 	ldreq	r0, [r9], -r3, lsr #10
    58e8:	030b0501 	movweq	r0, #46337	; 0xb501
    58ec:	052001bd 	streq	r0, [r0, #-445]!	; 0xfffffe43
    58f0:	7ec30319 	mcrvc	3, 6, r0, cr3, cr9, {0}
    58f4:	06020520 	streq	r0, [r2], -r0, lsr #10
    58f8:	13151323 	tstne	r5, #-1946157056	; 0x8c000000
    58fc:	06250516 			; <UNDEFINED> instruction: 0x06250516
    5900:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    5904:	0c030602 	stceq	6, cr0, [r3], {2}
    5908:	06090566 	streq	r0, [r9], -r6, ror #10
    590c:	030b0501 	movweq	r0, #46337	; 0xb501
    5910:	052001ae 	streq	r0, [r0, #-430]!	; 0xfffffe52
    5914:	7ed20309 	cdpvc	3, 13, cr0, cr2, cr9, {0}
    5918:	0602052e 	streq	r0, [r2], -lr, lsr #10
    591c:	2e01ab03 	vmlacs.f64	d10, d1, d3
    5920:	01060905 	tsteq	r6, r5, lsl #18
    5924:	31060205 	tstcc	r6, r5, lsl #4
    5928:	01060b05 	tsteq	r6, r5, lsl #22
    592c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    5930:	09052702 	stmdbeq	r5, {r1, r8, r9, sl, sp}
    5934:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    5938:	01220602 			; <UNDEFINED> instruction: 0x01220602
    593c:	01011301 	tsteq	r1, r1, lsl #6
    5940:	15010113 	strne	r0, [r1, #-275]	; 0xfffffeed
    5944:	0c053f4f 	stceq	15, cr3, [r5], {79}	; 0x4f
    5948:	0a050106 	beq	145d68 <__ccfg+0x125dc0>
    594c:	0602054a 	streq	r0, [r2], -sl, asr #10
    5950:	06050531 			; <UNDEFINED> instruction: 0x06050531
    5954:	06030501 	streq	r0, [r3], -r1, lsl #10
    5958:	60020521 	andvs	r0, r2, r1, lsr #10
    595c:	01062205 	tsteq	r6, r5, lsl #4
    5960:	a0034405 	andge	r4, r3, r5, lsl #8
    5964:	22053c7b 	andcs	r3, r5, #31488	; 0x7b00
    5968:	2004e003 	andcs	lr, r4, r3
    596c:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    5970:	017b9b03 	cmneq	fp, r3, lsl #22
    5974:	01063f05 	tsteq	r6, r5, lsl #30
    5978:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    597c:	01064405 	tsteq	r6, r5, lsl #8
    5980:	052d2e05 	streq	r2, [sp, #-3589]!	; 0xfffff1fb
    5984:	e7030602 	str	r0, [r3, -r2, lsl #12]
    5988:	32200804 	eorcc	r0, r0, #4, 16	; 0x40000
    598c:	01062805 	tsteq	r6, r5, lsl #16
    5990:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    5994:	02051d28 	andeq	r1, r5, #40, 26	; 0xa00
    5998:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    599c:	4e02052f 	cfsh32mi	mvfx0, mvfx2, #31
    59a0:	01063005 	tsteq	r6, r5
    59a4:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    59a8:	01010027 	tsteq	r1, r7, lsr #32
    59ac:	000002a8 	andeq	r0, r0, r8, lsr #5
    59b0:	014c0003 	cmpeq	ip, r3
    59b4:	01020000 	mrseq	r0, (UNDEF: 2)
    59b8:	000d0efb 	strdeq	r0, [sp], -fp
    59bc:	01010101 	tsteq	r1, r1, lsl #2
    59c0:	01000000 	mrseq	r0, (UNDEF: 0)
    59c4:	2f010000 	svccs	0x00010000
    59c8:	2f727375 	svccs	0x00727375
    59cc:	2f62696c 	svccs	0x0062696c
    59d0:	2f636367 	svccs	0x00636367
    59d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    59d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    59dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    59e0:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    59e4:	2f312e32 	svccs	0x00312e32
    59e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    59ec:	00656475 	rsbeq	r6, r5, r5, ror r4
    59f0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 593c <__exidx_end+0xa10>
    59f4:	616d2f65 	cmnvs	sp, r5, ror #30
    59f8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    59fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5a00:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5a04:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5a08:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5a0c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5a10:	502f534f 	eorpl	r5, pc, pc, asr #6
    5a14:	534f6369 	movtpl	r6, #62313	; 0xf369
    5a18:	3143432f 	cmpcc	r3, pc, lsr #6
    5a1c:	00585833 	subseq	r5, r8, r3, lsr r8
    5a20:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 596c <__exidx_end+0xa40>
    5a24:	616d2f65 	cmnvs	sp, r5, ror #30
    5a28:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5a2c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5a30:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5a34:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5a38:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5a3c:	4349502f 	movtmi	r5, #36911	; 0x902f
    5a40:	502f534f 	eorpl	r5, pc, pc, asr #6
    5a44:	534f6369 	movtpl	r6, #62313	; 0xf369
    5a48:	6f682f00 	svcvs	0x00682f00
    5a4c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 58a0 <__exidx_end+0x974>
    5a50:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5a54:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5a58:	6f746b73 	svcvs	0x00746b73
    5a5c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5a60:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5a64:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5a68:	2f534f43 	svccs	0x00534f43
    5a6c:	4f636950 	svcmi	0x00636950
    5a70:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5a74:	2f736269 	svccs	0x00736269
    5a78:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    5a7c:	70000049 	andvc	r0, r0, r9, asr #32
    5a80:	5f67756c 	svcpl	0x0067756c
    5a84:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    5a88:	0063632e 	rsbeq	r6, r3, lr, lsr #6
    5a8c:	73000000 	movwvc	r0, #0
    5a90:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5a94:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5a98:	73000001 	movwvc	r0, #1
    5a9c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    5aa0:	00682e67 	rsbeq	r2, r8, r7, ror #28
    5aa4:	61000001 	tstvs	r0, r1
    5aa8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5aac:	00020068 	andeq	r0, r2, r8, rrx
    5ab0:	63616d00 	cmnvs	r1, #0, 26
    5ab4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5ab8:	70000002 	andvc	r0, r0, r2
    5abc:	5f736e69 	svcpl	0x00736e69
    5ac0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5ac4:	00020068 	andeq	r0, r2, r8, rrx
    5ac8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5acc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5ad0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5ad4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5ad8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5adc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5ae0:	00030068 	andeq	r0, r3, r8, rrx
    5ae4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    5ae8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5aec:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5af0:	3c000004 	stccc	0, cr0, [r0], {4}
    5af4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5af8:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5afc:	0000003e 	andeq	r0, r0, lr, lsr r0
    5b00:	2b050000 	blcs	145b08 <__ccfg+0x125b60>
    5b04:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    5b08:	03000027 	movweq	r0, #39	; 0x27
    5b0c:	02050136 	andeq	r0, r5, #-2147483635	; 0x8000000d
    5b10:	062b0516 			; <UNDEFINED> instruction: 0x062b0516
    5b14:	2410050e 	ldrcs	r0, [r0], #-1294	; 0xfffffaf2
    5b18:	051c2b05 	ldreq	r2, [ip, #-2821]	; 0xfffff4fb
    5b1c:	05052410 	streq	r2, [r5, #-1040]	; 0xfffffbf0
    5b20:	2015053c 	andscs	r0, r5, ip, lsr r5
    5b24:	3f060205 	svccc	0x00060205
    5b28:	01061205 	tsteq	r6, r5, lsl #4
    5b2c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5b30:	01060905 	tsteq	r6, r5, lsl #18
    5b34:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    5b38:	01010004 	tsteq	r1, r4
    5b3c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    5b40:	0027e002 	eoreq	lr, r7, r2
    5b44:	00c20300 	sbceq	r0, r2, r0, lsl #6
    5b48:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5b4c:	01061005 	tsteq	r6, r5
    5b50:	051e1f05 	ldreq	r1, [lr, #-3845]	; 0xfffff0fb
    5b54:	05052210 	streq	r2, [r5, #-528]	; 0xfffffdf0
    5b58:	210a0520 	tstcs	sl, r0, lsr #10
    5b5c:	052d2a05 	streq	r2, [sp, #-2565]!	; 0xfffff5fb
    5b60:	15052e1e 	strne	r2, [r5, #-3614]	; 0xfffff1e2
    5b64:	06020520 	streq	r0, [r2], -r0, lsr #10
    5b68:	061e0531 			; <UNDEFINED> instruction: 0x061e0531
    5b6c:	22090501 	andcs	r0, r9, #4194304	; 0x400000
    5b70:	051e1e05 	ldreq	r1, [lr, #-3589]	; 0xfffff1fb
    5b74:	0205200f 	andeq	r2, r5, #15
    5b78:	01052206 	tsteq	r5, r6, lsl #4
    5b7c:	03021306 	movweq	r1, #8966	; 0x2306
    5b80:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5b84:	02050037 	andeq	r0, r5, #55	; 0x37
    5b88:	00002804 	andeq	r2, r0, r4, lsl #16
    5b8c:	0100cc03 	tsteq	r0, r3, lsl #24
    5b90:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    5b94:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    5b98:	01052e16 	tsteq	r5, r6, lsl lr
    5b9c:	00010221 	andeq	r0, r1, r1, lsr #4
    5ba0:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    5ba4:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    5ba8:	03000028 	movweq	r0, #40	; 0x28
    5bac:	050100d1 	streq	r0, [r1, #-209]	; 0xffffff2f
    5bb0:	01051402 	tsteq	r5, r2, lsl #8
    5bb4:	02021406 	andeq	r1, r2, #100663296	; 0x6000000
    5bb8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5bbc:	02050025 	andeq	r0, r5, #37	; 0x25
    5bc0:	00002810 	andeq	r2, r0, r0, lsl r8
    5bc4:	0100d703 	tsteq	r0, r3, lsl #14
    5bc8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    5bcc:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    5bd0:	01010002 	tsteq	r1, r2
    5bd4:	05003905 	streq	r3, [r0, #-2309]	; 0xfffff6fb
    5bd8:	00281402 	eoreq	r1, r8, r2, lsl #8
    5bdc:	01200300 			; <UNDEFINED> instruction: 0x01200300
    5be0:	26061005 	strcs	r1, [r6], -r5
    5be4:	7a033905 	bvc	d4000 <__ccfg+0xb4058>
    5be8:	06020520 	streq	r0, [r2], -r0, lsr #10
    5bec:	05051424 	streq	r1, [r5, #-1060]	; 0xfffffbdc
    5bf0:	39050106 	stmdbcc	r5, {r1, r2, r8}
    5bf4:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    5bf8:	03052605 	movweq	r2, #22021	; 0x5605
    5bfc:	20052106 	andcs	r2, r5, r6, lsl #2
    5c00:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    5c04:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    5c08:	06060521 	streq	r0, [r6], -r1, lsr #10
    5c0c:	060f0501 	streq	r0, [pc], -r1, lsl #10
    5c10:	13040522 	movwne	r0, #17698	; 0x4522
    5c14:	01061205 	tsteq	r6, r5, lsl #4
    5c18:	49061605 	stmdbmi	r6, {r0, r2, r9, sl, ip}
    5c1c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    5c20:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    5c24:	16050106 	strne	r0, [r5], -r6, lsl #2
    5c28:	0f051f06 	svceq	0x00051f06
    5c2c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5c30:	01061005 	tsteq	r6, r5
    5c34:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5c38:	053f0602 	ldreq	r0, [pc, #-1538]!	; 563e <__exidx_end+0x712>
    5c3c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    5c40:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5c44:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5c48:	01051d0a 	tsteq	r5, sl, lsl #26
    5c4c:	06040532 			; <UNDEFINED> instruction: 0x06040532
    5c50:	02207503 	eoreq	r7, r0, #12582912	; 0xc00000
    5c54:	01010009 	tsteq	r1, r9
    5c58:	000001a1 	andeq	r0, r0, r1, lsr #3
    5c5c:	01260003 			; <UNDEFINED> instruction: 0x01260003
    5c60:	01020000 	mrseq	r0, (UNDEF: 2)
    5c64:	000d0efb 	strdeq	r0, [sp], -fp
    5c68:	01010101 	tsteq	r1, r1, lsl #2
    5c6c:	01000000 	mrseq	r0, (UNDEF: 0)
    5c70:	2f010000 	svccs	0x00010000
    5c74:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5c78:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5c7c:	2f6e6974 	svccs	0x006e6974
    5c80:	6b736544 	blvs	1cdf198 <__ccfg+0x1cbf1f0>
    5c84:	2f706f74 	svccs	0x00706f74
    5c88:	4f534c4f 	svcmi	0x00534c4f
    5c8c:	2f54454e 	svccs	0x0054454e
    5c90:	4f434950 	svcmi	0x00434950
    5c94:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5c98:	2f534f63 	svccs	0x00534f63
    5c9c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5ca0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    5ca4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5ca8:	73752f00 	cmnvc	r5, #0, 30
    5cac:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5cb0:	63672f62 	cmnvs	r7, #392	; 0x188
    5cb4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    5cb8:	6f6e2d6d 	svcvs	0x006e2d6d
    5cbc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5cc0:	2f696261 	svccs	0x00696261
    5cc4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    5cc8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5ccc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5cd0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5cd4:	2f656d6f 	svccs	0x00656d6f
    5cd8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5cdc:	442f6e69 	strtmi	r6, [pc], #-3689	; 5ce4 <__exidx_end+0xdb8>
    5ce0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5ce4:	4f2f706f 	svcmi	0x002f706f
    5ce8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5cec:	502f5445 	eorpl	r5, pc, r5, asr #8
    5cf0:	534f4349 	movtpl	r4, #62281	; 0xf349
    5cf4:	6369502f 	cmnvs	r9, #47	; 0x2f
    5cf8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5cfc:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5d00:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5d04:	2f656d6f 	svccs	0x00656d6f
    5d08:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5d0c:	442f6e69 	strtmi	r6, [pc], #-3689	; 5d14 <__exidx_end+0xde8>
    5d10:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5d14:	4f2f706f 	svcmi	0x002f706f
    5d18:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5d1c:	502f5445 	eorpl	r5, pc, r5, asr #8
    5d20:	534f4349 	movtpl	r4, #62281	; 0xf349
    5d24:	6369502f 	cmnvs	r9, #47	; 0x2f
    5d28:	0000534f 	andeq	r5, r0, pc, asr #6
    5d2c:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 4dd5 <patchImageGenfsk+0x179>
    5d30:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    5d34:	2e6c6169 	powcsez	f6, f4, #1.0
    5d38:	00010063 	andeq	r0, r1, r3, rrx
    5d3c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5d40:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5d44:	00020068 	andeq	r0, r2, r8, rrx
    5d48:	63726100 	cmnvs	r2, #0, 2
    5d4c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5d50:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5d54:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5d58:	00030068 	andeq	r0, r3, r8, rrx
    5d5c:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5d60:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5d64:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5d68:	62000003 	andvs	r0, r0, #3
    5d6c:	6f747475 	svcvs	0x00747475
    5d70:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5d74:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5d78:	00000300 	andeq	r0, r0, r0, lsl #6
    5d7c:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5d80:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5d84:	00000004 	andeq	r0, r0, r4
    5d88:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5d8c:	00285c02 	eoreq	r5, r8, r2, lsl #24
    5d90:	011c0300 	tsteq	ip, r0, lsl #6
    5d94:	06200601 	strteq	r0, [r0], -r1, lsl #12
    5d98:	3c26033c 	stccc	3, cr0, [r6], #-240	; 0xffffff10
    5d9c:	03020501 	movweq	r0, #9473	; 0x2501
    5da0:	1313585f 	tstne	r3, #6225920	; 0x5f0000
    5da4:	13010115 	movwne	r0, #4373	; 0x1115
    5da8:	01060605 	tsteq	r6, r5, lsl #12
    5dac:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5db0:	01060505 	tsteq	r6, r5, lsl #10
    5db4:	2f060305 	svccs	0x00060305
    5db8:	01060905 	tsteq	r6, r5, lsl #18
    5dbc:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    5dc0:	0205280a 	andeq	r2, r5, #655360	; 0xa0000
    5dc4:	0a052e06 	beq	1515e4 <__ccfg+0x13163c>
    5dc8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5dcc:	06058306 	streq	r8, [r5], -r6, lsl #6
    5dd0:	1f210106 	svcne	0x00210106
    5dd4:	02051f21 	andeq	r1, r5, #33, 30	; 0x84
    5dd8:	06052106 	streq	r2, [r5], -r6, lsl #2
    5ddc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5de0:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    5de4:	03050106 	movweq	r0, #20742	; 0x5106
    5de8:	033d3006 	teqeq	sp, #6
    5dec:	0d054a74 	vstreq	s8, [r5, #-464]	; 0xfffffe30
    5df0:	11050106 	tstne	r5, r6, lsl #2
    5df4:	20070520 	andcs	r0, r7, r0, lsr #10
    5df8:	01000802 	tsteq	r0, r2, lsl #16
    5dfc:	00024b01 	andeq	r4, r2, r1, lsl #22
    5e00:	25000300 	strcs	r0, [r0, #-768]	; 0xfffffd00
    5e04:	02000001 	andeq	r0, r0, #1
    5e08:	0d0efb01 	vstreq	d15, [lr, #-4]
    5e0c:	01010100 	mrseq	r0, (UNDEF: 17)
    5e10:	00000001 	andeq	r0, r0, r1
    5e14:	01000001 	tsteq	r0, r1
    5e18:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5d64 <__exidx_end+0xe38>
    5e1c:	616d2f65 	cmnvs	sp, r5, ror #30
    5e20:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5e24:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5e28:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5e2c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5e30:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5e34:	4349502f 	movtmi	r5, #36911	; 0x902f
    5e38:	502f534f 	eorpl	r5, pc, pc, asr #6
    5e3c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5e40:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5e44:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5e48:	61697265 	cmnvs	r9, r5, ror #4
    5e4c:	752f006c 	strvc	r0, [pc, #-108]!	; 5de8 <__exidx_end+0xebc>
    5e50:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5c8c <__exidx_end+0xd60>
    5e54:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5e58:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5e5c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5e60:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5e64:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5e68:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5e6c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5e70:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5e74:	2f006564 	svccs	0x00006564
    5e78:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5e7c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5e80:	2f6e6974 	svccs	0x006e6974
    5e84:	6b736544 	blvs	1cdf39c <__ccfg+0x1cbf3f4>
    5e88:	2f706f74 	svccs	0x00706f74
    5e8c:	4f534c4f 	svcmi	0x00534c4f
    5e90:	2f54454e 	svccs	0x0054454e
    5e94:	4f434950 	svcmi	0x00434950
    5e98:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5e9c:	2f534f63 	svccs	0x00534f63
    5ea0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5ea4:	2f005858 	svccs	0x00005858
    5ea8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5eac:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5eb0:	2f6e6974 	svccs	0x006e6974
    5eb4:	6b736544 	blvs	1cdf3cc <__ccfg+0x1cbf424>
    5eb8:	2f706f74 	svccs	0x00706f74
    5ebc:	4f534c4f 	svcmi	0x00534c4f
    5ec0:	2f54454e 	svccs	0x0054454e
    5ec4:	4f434950 	svcmi	0x00434950
    5ec8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5ecc:	00534f63 	subseq	r4, r3, r3, ror #30
    5ed0:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    5ed4:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    5ed8:	2e6c6169 	powcsez	f6, f4, #1.0
    5edc:	00010063 	andeq	r0, r1, r3, rrx
    5ee0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5ee4:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5ee8:	00020068 	andeq	r0, r2, r8, rrx
    5eec:	63726100 	cmnvs	r2, #0, 2
    5ef0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5ef4:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5ef8:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5efc:	00030068 	andeq	r0, r3, r8, rrx
    5f00:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5f04:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5f08:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5f0c:	62000003 	andvs	r0, r0, #3
    5f10:	6f747475 	svcvs	0x00747475
    5f14:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5f18:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5f1c:	00000300 	andeq	r0, r0, r0, lsl #6
    5f20:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5f24:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5f28:	00000004 	andeq	r0, r0, r4
    5f2c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5f30:	0028cc02 	eoreq	ip, r8, r2, lsl #24
    5f34:	01220300 			; <UNDEFINED> instruction: 0x01220300
    5f38:	06200601 	strteq	r0, [r0], -r1, lsl #12
    5f3c:	6b02053c 	blvs	87434 <__ccfg+0x6748c>
    5f40:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    5f44:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    5f48:	03052005 	movweq	r2, #20485	; 0x5005
    5f4c:	02053006 	andeq	r3, r5, #6
    5f50:	061d053f 			; <UNDEFINED> instruction: 0x061d053f
    5f54:	3c0b0501 	cfstr32cc	mvfx0, [fp], {1}
    5f58:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    5f5c:	0505200b 	streq	r2, [r5, #-11]
    5f60:	06030520 	streq	r0, [r3], -r0, lsr #10
    5f64:	02052f24 	andeq	r2, r5, #36, 30	; 0x90
    5f68:	06060530 			; <UNDEFINED> instruction: 0x06060530
    5f6c:	1f020513 	svcne	0x00020513
    5f70:	06052f06 	streq	r2, [r5], -r6, lsl #30
    5f74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5f78:	01013006 	tsteq	r1, r6
    5f7c:	05058316 	streq	r8, [r5, #-790]	; 0xfffffcea
    5f80:	03050106 	movweq	r0, #20742	; 0x5106
    5f84:	06053d06 	streq	r3, [r5], -r6, lsl #26
    5f88:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5f8c:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    5f90:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5f94:	1f070521 	svcne	0x00070521
    5f98:	21060405 	tstcs	r6, r5, lsl #8
    5f9c:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
    5fa0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5fa4:	04052006 	streq	r2, [r5], #-6
    5fa8:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    5fac:	0606053e 			; <UNDEFINED> instruction: 0x0606053e
    5fb0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    5fb4:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    5fb8:	052f0603 	streq	r0, [pc, #-1539]!	; 59bd <__exidx_end+0xa91>
    5fbc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5fc0:	052f0603 	streq	r0, [pc, #-1539]!	; 59c5 <__exidx_end+0xa99>
    5fc4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5fc8:	052f0603 	streq	r0, [pc, #-1539]!	; 59cd <__exidx_end+0xaa1>
    5fcc:	06053102 	streq	r3, [r5], -r2, lsl #2
    5fd0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5fd4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5fd8:	06060521 	streq	r0, [r6], -r1, lsr #10
    5fdc:	051f2101 	ldreq	r2, [pc, #-257]	; 5ee3 <__exidx_end+0xfb7>
    5fe0:	052f0603 	streq	r0, [pc, #-1539]!	; 59e5 <__exidx_end+0xab9>
    5fe4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5fe8:	40230602 	eormi	r0, r3, r2, lsl #12
    5fec:	06060591 			; <UNDEFINED> instruction: 0x06060591
    5ff0:	06020501 	streq	r0, [r2], -r1, lsl #10
    5ff4:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    5ff8:	3c110501 	cfldr32cc	mvfx0, [r1], {1}
    5ffc:	05210705 	streq	r0, [r1, #-1797]!	; 0xfffff8fb
    6000:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    6004:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6008:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    600c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    6010:	0a059f06 	beq	16dc30 <__ccfg+0x14dc88>
    6014:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    6018:	06060521 	streq	r0, [r6], -r1, lsr #10
    601c:	06020501 	streq	r0, [r2], -r1, lsl #10
    6020:	0605052f 	streq	r0, [r5], -pc, lsr #10
    6024:	06030501 	streq	r0, [r3], -r1, lsl #10
    6028:	060d0521 	streq	r0, [sp], -r1, lsr #10
    602c:	06030501 	streq	r0, [r3], -r1, lsl #10
    6030:	3002052f 	andcc	r0, r2, pc, lsr #10
    6034:	01060605 	tsteq	r6, r5, lsl #12
    6038:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    603c:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    6040:	053a0205 	ldreq	r0, [sl, #-517]!	; 0xfffffdfb
    6044:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    6048:	0101000d 	tsteq	r1, sp
    604c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    6050:	013a0003 	teqeq	sl, r3
    6054:	01020000 	mrseq	r0, (UNDEF: 2)
    6058:	000d0efb 	strdeq	r0, [sp], -fp
    605c:	01010101 	tsteq	r1, r1, lsl #2
    6060:	01000000 	mrseq	r0, (UNDEF: 0)
    6064:	2f010000 	svccs	0x00010000
    6068:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    606c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    6070:	2f6e6974 	svccs	0x006e6974
    6074:	6b736544 	blvs	1cdf58c <__ccfg+0x1cbf5e4>
    6078:	2f706f74 	svccs	0x00706f74
    607c:	4f534c4f 	svcmi	0x00534c4f
    6080:	2f54454e 	svccs	0x0054454e
    6084:	4f434950 	svcmi	0x00434950
    6088:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    608c:	2f534f63 	svccs	0x00534f63
    6090:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    6094:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    6098:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    609c:	73752f00 	cmnvc	r5, #0, 30
    60a0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    60a4:	63672f62 	cmnvs	r7, #392	; 0x188
    60a8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    60ac:	6f6e2d6d 	svcvs	0x006e2d6d
    60b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    60b4:	2f696261 	svccs	0x00696261
    60b8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    60bc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    60c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    60c4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    60c8:	2f656d6f 	svccs	0x00656d6f
    60cc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    60d0:	442f6e69 	strtmi	r6, [pc], #-3689	; 60d8 <__exidx_end+0x11ac>
    60d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    60d8:	4f2f706f 	svcmi	0x002f706f
    60dc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    60e0:	502f5445 	eorpl	r5, pc, r5, asr #8
    60e4:	534f4349 	movtpl	r4, #62281	; 0xf349
    60e8:	6369502f 	cmnvs	r9, #47	; 0x2f
    60ec:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    60f0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    60f4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    60f8:	2f656d6f 	svccs	0x00656d6f
    60fc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    6100:	442f6e69 	strtmi	r6, [pc], #-3689	; 6108 <__exidx_end+0x11dc>
    6104:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6108:	4f2f706f 	svcmi	0x002f706f
    610c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6110:	502f5445 	eorpl	r5, pc, r5, asr #8
    6114:	534f4349 	movtpl	r4, #62281	; 0xf349
    6118:	6369502f 	cmnvs	r9, #47	; 0x2f
    611c:	0000534f 	andeq	r5, r0, pc, asr #6
    6120:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    6124:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    6128:	73000001 	movwvc	r0, #1
    612c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6130:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6134:	73000002 	movwvc	r0, #2
    6138:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    613c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    6140:	61000002 	tstvs	r0, r2
    6144:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    6148:	00030068 	andeq	r0, r3, r8, rrx
    614c:	63616d00 	cmnvs	r1, #0, 26
    6150:	00682e68 	rsbeq	r2, r8, r8, ror #28
    6154:	70000003 	andvc	r0, r0, r3
    6158:	5f736e69 	svcpl	0x00736e69
    615c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6160:	00030068 	andeq	r0, r3, r8, rrx
    6164:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    6168:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    616c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6170:	0300682e 	movweq	r6, #2094	; 0x82e
    6174:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    6178:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    617c:	00040068 	andeq	r0, r4, r8, rrx
    6180:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    6184:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    6188:	003e6e69 	eorseq	r6, lr, r9, ror #28
    618c:	00000000 	andeq	r0, r0, r0
    6190:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
    6194:	0029e802 	eoreq	lr, r9, r2, lsl #16
    6198:	010c0300 	mrseq	r0, LR_mon
    619c:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    61a0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    61a4:	0405580b 	streq	r5, [r5], #-2059	; 0xfffff7f5
    61a8:	0e053e06 	cdpeq	14, 0, cr3, cr5, cr6, {0}
    61ac:	03050106 	movweq	r0, #20742	; 0x5106
    61b0:	04053006 	streq	r3, [r5], #-6
    61b4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    61b8:	00010259 	andeq	r0, r1, r9, asr r2
    61bc:	43050101 	movwmi	r0, #20737	; 0x5101
    61c0:	08020500 	stmdaeq	r2, {r8, sl}
    61c4:	1900002a 	stmdbne	r0, {r1, r3, r5}
    61c8:	06052e06 	streq	r2, [r5], -r6, lsl #28
    61cc:	03040520 	movweq	r0, #17696	; 0x4520
    61d0:	05052e1d 	streq	r2, [r5, #-3613]	; 0xfffff1e3
    61d4:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    61d8:	20710307 	rsbscs	r0, r1, r7, lsl #6
    61dc:	4a030605 	bmi	c79f8 <__ccfg+0xa7a50>
    61e0:	06020520 	streq	r0, [r2], -r0, lsr #10
    61e4:	0514133e 	ldreq	r1, [r4, #-830]	; 0xfffffcc2
    61e8:	02051803 	andeq	r1, r5, #196608	; 0x30000
    61ec:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    61f0:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    61f4:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    61f8:	05051403 	streq	r1, [r5, #-1027]	; 0xfffffbfd
    61fc:	03050106 	movweq	r0, #20742	; 0x5106
    6200:	06053006 	streq	r3, [r5], -r6
    6204:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6208:	0b053e06 	bleq	155a28 <__ccfg+0x135a80>
    620c:	10050106 	andne	r0, r5, r6, lsl #2
    6210:	2105052e 	tstcs	r5, lr, lsr #10
    6214:	052d0705 	streq	r0, [sp, #-1797]!	; 0xfffff8fb
    6218:	3d3d0605 	ldccc	6, cr0, [sp, #-20]!	; 0xffffffec
    621c:	da030405 	ble	c7238 <__ccfg+0xa7290>
    6220:	05590100 	ldrbeq	r0, [r9, #-256]	; 0xffffff00
    6224:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    6228:	a7030604 	strge	r0, [r3, -r4, lsl #12]
    622c:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    6230:	00c20306 	sbceq	r0, r2, r6, lsl #6
    6234:	052f0620 	streq	r0, [pc, #-1568]!	; 5c1c <__exidx_end+0xcf0>
    6238:	05100612 	ldreq	r0, [r0, #-1554]	; 0xfffff9ee
    623c:	43030603 	movwmi	r0, #13827	; 0x3603
    6240:	0606052e 	streq	r0, [r6], -lr, lsr #10
    6244:	06040501 	streq	r0, [r4], -r1, lsl #10
    6248:	0606054c 	streq	r0, [r6], -ip, asr #10
    624c:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    6250:	21060405 	tstcs	r6, r5, lsl #8
    6254:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    6258:	5959e400 	ldmdbpl	r9, {sl, sp, lr, pc}^
    625c:	01060805 	tsteq	r6, r5, lsl #16
    6260:	03060505 	movweq	r0, #25861	; 0x6505
    6264:	0c053c09 	stceq	12, cr3, [r5], {9}
    6268:	01050106 	tsteq	r5, r6, lsl #2
    626c:	03040531 	movweq	r0, #17713	; 0x4531
    6270:	053c7fa9 	ldreq	r7, [ip, #-4009]!	; 0xfffff057
    6274:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    6278:	0505010f 	streq	r0, [r5, #-271]	; 0xfffffef1
    627c:	060c0513 			; <UNDEFINED> instruction: 0x060c0513
    6280:	2d120513 	cfldr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    6284:	2f060505 	svccs	0x00060505
    6288:	14060e05 	strne	r0, [r6], #-3589	; 0xfffff1fb
    628c:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    6290:	13060e05 	movwne	r0, #28165	; 0x6e05
    6294:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    6298:	5a062d06 	bpl	1916b8 <__ccfg+0x171710>
    629c:	01060905 	tsteq	r6, r5, lsl #18
    62a0:	39061405 	stmdbcc	r6, {r0, r2, sl, ip}
    62a4:	01061605 	tsteq	r6, r5, lsl #12
    62a8:	2e061205 	cdpcs	2, 0, cr1, cr6, cr5, {0}
    62ac:	13060605 	movwne	r0, #26117	; 0x6605
    62b0:	03060505 	movweq	r0, #25861	; 0x6505
    62b4:	05132009 	ldreq	r2, [r3, #-9]
    62b8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    62bc:	09052f08 	stmdbeq	r5, {r3, r8, r9, sl, fp, sp}
    62c0:	0605052d 	streq	r0, [r5], -sp, lsr #10
    62c4:	0608052f 	streq	r0, [r8], -pc, lsr #10
    62c8:	20120501 	andscs	r0, r2, r1, lsl #10
    62cc:	30060605 	andcc	r0, r6, r5, lsl #12
    62d0:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    62d4:	06050501 	streq	r0, [r5], -r1, lsl #10
    62d8:	060c054c 	streq	r0, [ip], -ip, asr #10
    62dc:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    62e0:	20110305 	andscs	r0, r1, r5, lsl #6
    62e4:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    62e8:	4a063c06 	bmi	195308 <__ccfg+0x175360>
    62ec:	20827401 	addcs	r7, r2, r1, lsl #8
    62f0:	2e204a20 	vmulcs.f32	s8, s0, s1
    62f4:	06070525 	streq	r0, [r7], -r5, lsr #10
    62f8:	06050501 	streq	r0, [r5], -r1, lsl #10
    62fc:	06080521 	streq	r0, [r8], -r1, lsr #10
    6300:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    6304:	30060605 	andcc	r0, r6, r5, lsl #12
    6308:	06090513 			; <UNDEFINED> instruction: 0x06090513
    630c:	1f0a0514 	svcne	0x000a0514
    6310:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    6314:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    6318:	01060905 	tsteq	r6, r5, lsl #18
    631c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    6320:	593f0607 	ldmdbpl	pc!, {r0, r1, r2, r9, sl}	; <UNPREDICTABLE>
    6324:	01060b05 	tsteq	r6, r5, lsl #22
    6328:	30060605 	andcc	r0, r6, r5, lsl #12
    632c:	03060505 	movweq	r0, #25861	; 0x6505
    6330:	0605016f 	streq	r0, [r5], -pc, ror #2
    6334:	06201103 	strteq	r1, [r0], -r3, lsl #2
    6338:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    633c:	014a063c 	cmpeq	sl, ip, lsr r6
    6340:	2e016666 	cfmadd32cs	mvax3, mvfx6, mvfx1, mvfx6
    6344:	052e2058 	streq	r2, [lr, #-88]!	; 0xffffffa8
    6348:	0f05210c 	svceq	0x0005210c
    634c:	06050106 	streq	r0, [r5], -r6, lsl #2
    6350:	13132f06 	tstne	r3, #6, 30
    6354:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    6358:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    635c:	06052d08 	streq	r2, [r5], -r8, lsl #26
    6360:	07052106 	streq	r2, [r5, -r6, lsl #2]
    6364:	060f0514 			; <UNDEFINED> instruction: 0x060f0514
    6368:	2e150513 	mrccs	5, 0, r0, cr5, cr3, {0}
    636c:	062d0705 	strteq	r0, [sp], -r5, lsl #14
    6370:	060a055a 			; <UNDEFINED> instruction: 0x060a055a
    6374:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    6378:	06170547 	ldreq	r0, [r7], -r7, asr #10
    637c:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    6380:	0607052e 	streq	r0, [r7], -lr, lsr #10
    6384:	06060513 			; <UNDEFINED> instruction: 0x06060513
    6388:	05055926 	streq	r5, [r5, #-2342]	; 0xfffff6da
    638c:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    6390:	05110609 	ldreq	r0, [r1, #-1545]	; 0xfffff9f7
    6394:	4f062f05 	svcmi	0x00062f05
    6398:	0b051313 	bleq	14afec <__ccfg+0x12b044>
    639c:	060c054a 	streq	r0, [ip], -sl, asr #10
    63a0:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    63a4:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
    63a8:	060a054b 	streq	r0, [sl], -fp, asr #10
    63ac:	207fad03 	rsbscs	sl, pc, r3, lsl #26
    63b0:	01000702 	tsteq	r0, r2, lsl #14
    63b4:	00350501 	eorseq	r0, r5, r1, lsl #10
    63b8:	2c380205 	lfmcs	f0, 4, [r8], #-20	; 0xffffffec
    63bc:	90030000 	andls	r0, r3, r0
    63c0:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    63c4:	35051414 	strcc	r1, [r5, #-1044]	; 0xfffffbec
    63c8:	052e0e06 	streq	r0, [lr, #-3590]!	; 0xfffff1fa
    63cc:	03053205 	movweq	r3, #20997	; 0x5205
    63d0:	05673006 	strbeq	r3, [r7, #-6]!
    63d4:	12030601 	andne	r0, r3, #1048576	; 0x100000
    63d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    63dc:	053c7203 	ldreq	r7, [ip, #-515]!	; 0xfffffdfd
    63e0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    63e4:	02053c06 	andeq	r3, r5, #1536	; 0x600
    63e8:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    63ec:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    63f0:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    63f4:	060b0540 	streq	r0, [fp], -r0, asr #10
    63f8:	58050501 	stmdapl	r5, {r0, r8, sl}
    63fc:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    6400:	03052005 	movweq	r2, #20485	; 0x5005
    6404:	133d2206 	teqne	sp, #1610612736	; 0x60000000
    6408:	01000202 	tsteq	r0, r2, lsl #4
    640c:	0002c601 	andeq	ip, r2, r1, lsl #12
    6410:	3a000300 	bcc	7018 <__exidx_end+0x20ec>
    6414:	02000001 	andeq	r0, r0, #1
    6418:	0d0efb01 	vstreq	d15, [lr, #-4]
    641c:	01010100 	mrseq	r0, (UNDEF: 17)
    6420:	00000001 	andeq	r0, r0, r1
    6424:	01000001 	tsteq	r0, r1
    6428:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6374 <__exidx_end+0x1448>
    642c:	616d2f65 	cmnvs	sp, r5, ror #30
    6430:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    6434:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6438:	706f746b 	rsbvc	r7, pc, fp, ror #8
    643c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6440:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6444:	4349502f 	movtmi	r5, #36911	; 0x902f
    6448:	502f534f 	eorpl	r5, pc, pc, asr #6
    644c:	534f6369 	movtpl	r6, #62313	; 0xf369
    6450:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    6454:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    6458:	61697265 	cmnvs	r9, r5, ror #4
    645c:	752f006c 	strvc	r0, [pc, #-108]!	; 63f8 <__exidx_end+0x14cc>
    6460:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 629c <__exidx_end+0x1370>
    6464:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    6468:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    646c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6470:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6474:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6478:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    647c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    6480:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6484:	2f006564 	svccs	0x00006564
    6488:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    648c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    6490:	2f6e6974 	svccs	0x006e6974
    6494:	6b736544 	blvs	1cdf9ac <__ccfg+0x1cbfa04>
    6498:	2f706f74 	svccs	0x00706f74
    649c:	4f534c4f 	svcmi	0x00534c4f
    64a0:	2f54454e 	svccs	0x0054454e
    64a4:	4f434950 	svcmi	0x00434950
    64a8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    64ac:	2f534f63 	svccs	0x00534f63
    64b0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    64b4:	2f005858 	svccs	0x00005858
    64b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    64bc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    64c0:	2f6e6974 	svccs	0x006e6974
    64c4:	6b736544 	blvs	1cdf9dc <__ccfg+0x1cbfa34>
    64c8:	2f706f74 	svccs	0x00706f74
    64cc:	4f534c4f 	svcmi	0x00534c4f
    64d0:	2f54454e 	svccs	0x0054454e
    64d4:	4f434950 	svcmi	0x00434950
    64d8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    64dc:	00534f63 	subseq	r4, r3, r3, ror #30
    64e0:	63737600 	cmnvs	r3, #0, 12
    64e4:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    64e8:	00000100 	andeq	r0, r0, r0, lsl #2
    64ec:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    64f0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    64f4:	00000200 	andeq	r0, r0, r0, lsl #4
    64f8:	61647473 	smcvs	18243	; 0x4743
    64fc:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    6500:	00000200 	andeq	r0, r0, r0, lsl #4
    6504:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    6508:	0300682e 	movweq	r6, #2094	; 0x82e
    650c:	616d0000 	cmnvs	sp, r0
    6510:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    6514:	00000300 	andeq	r0, r0, r0, lsl #6
    6518:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    651c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6520:	0300682e 	movweq	r6, #2094	; 0x82e
    6524:	75620000 	strbvc	r0, [r2, #-0]!
    6528:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    652c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6530:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6534:	73000003 	movwvc	r0, #3
    6538:	6f697379 	svcvs	0x00697379
    653c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6540:	623c0000 	eorsvs	r0, ip, #0
    6544:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    6548:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    654c:	00000000 	andeq	r0, r0, r0
    6550:	003a0500 	eorseq	r0, sl, r0, lsl #10
    6554:	2c880205 	sfmcs	f0, 4, [r8], {5}
    6558:	05190000 	ldreq	r0, [r9, #-0]
    655c:	3a031402 	bcc	cb56c <__ccfg+0xab5c4>
    6560:	06050501 	streq	r0, [r5], -r1, lsl #10
    6564:	033a0501 	teqeq	sl, #4194304	; 0x400000
    6568:	05052044 	streq	r2, [r5, #-68]	; 0xffffffbc
    656c:	052e3c03 	streq	r3, [lr, #-3075]!	; 0xfffff3fd
    6570:	05053c12 	streq	r3, [r5, #-3090]	; 0xfffff3ee
    6574:	03160540 	tsteq	r6, #64, 10	; 0x10000000
    6578:	0b05200e 	bleq	14e5b8 <__ccfg+0x12e610>
    657c:	052e1103 	streq	r1, [lr, #-259]!	; 0xfffffefd
    6580:	62030608 	andvs	r0, r3, #8, 12	; 0x800000
    6584:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    6588:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    658c:	21060305 	tstcs	r6, r5, lsl #6
    6590:	01060605 	tsteq	r6, r5, lsl #12
    6594:	30060305 	andcc	r0, r6, r5, lsl #6
    6598:	01060b05 	tsteq	r6, r5, lsl #22
    659c:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    65a0:	01052003 	tsteq	r5, r3
    65a4:	05ac2e03 	streq	r2, [ip, #3587]!	; 0xe03
    65a8:	3c520303 	mrrccc	3, 0, r0, r2, cr3
    65ac:	1b030b05 	blne	c91c8 <__ccfg+0xa9220>
    65b0:	060a0574 			; <UNDEFINED> instruction: 0x060a0574
    65b4:	060b052e 	streq	r0, [fp], -lr, lsr #10
    65b8:	06040501 	streq	r0, [r4], -r1, lsl #10
    65bc:	060705ad 	streq	r0, [r7], -sp, lsr #11
    65c0:	06040501 	streq	r0, [r4], -r1, lsl #10
    65c4:	06070530 			; <UNDEFINED> instruction: 0x06070530
    65c8:	1e080515 	mcrne	5, 0, r0, cr8, cr5, {0}
    65cc:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    65d0:	142f0604 	strtne	r0, [pc], #-1540	; 65d8 <__exidx_end+0x16ac>
    65d4:	01060705 	tsteq	r6, r5, lsl #14
    65d8:	2f060b05 	svccs	0x00060b05
    65dc:	01060d05 	tsteq	r6, r5, lsl #26
    65e0:	05660c05 	strbeq	r0, [r6, #-3077]!	; 0xfffff3fb
    65e4:	2b052e1c 	blcs	151e5c <__ccfg+0x131eb4>
    65e8:	4e0b052e 	cfsh32mi	mvfx0, mvfx11, #30
    65ec:	3c060a05 			; <UNDEFINED> instruction: 0x3c060a05
    65f0:	01060b05 	tsteq	r6, r5, lsl #22
    65f4:	83060405 	movwhi	r0, #25605	; 0x6405
    65f8:	01061805 	tsteq	r6, r5, lsl #16
    65fc:	4b060405 	blmi	187618 <__ccfg+0x167670>
    6600:	01060905 	tsteq	r6, r5, lsl #18
    6604:	2f060405 	svccs	0x00060405
    6608:	59031105 	stmdbpl	r3, {r0, r2, r8, ip}
    660c:	66063c20 	strvs	r3, [r6], -r0, lsr #24
    6610:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    6614:	66063c06 	strvs	r3, [r6], -r6, lsl #24
    6618:	0620013c 			; <UNDEFINED> instruction: 0x0620013c
    661c:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
    6620:	064a063c 			; <UNDEFINED> instruction: 0x064a063c
    6624:	2e21743c 	mcrcs	4, 1, r7, cr1, cr12, {1}
    6628:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    662c:	2e060106 	adfcss	f0, f6, f6
    6630:	4a219082 	bmi	86a840 <__ccfg+0x84a898>
    6634:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    6638:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    663c:	3c062e06 	stccc	14, cr2, [r6], {6}
    6640:	06668206 	strbteq	r8, [r6], -r6, lsl #4
    6644:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    6648:	05770405 	ldrbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    664c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    6650:	16052010 			; <UNDEFINED> instruction: 0x16052010
    6654:	6606ae06 	strvs	sl, [r6], -r6, lsl #28
    6658:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    665c:	3c063c06 	stccc	12, cr3, [r6], {6}
    6660:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    6664:	823c0601 	eorshi	r0, ip, #1048576	; 0x100000
    6668:	9006923c 	andls	r9, r6, ip, lsr r2
    666c:	013c5806 	teqeq	ip, r6, lsl #16
    6670:	2e06012e 	adfcssp	f0, f6, #0.5
    6674:	74063c06 	strvc	r3, [r6], #-3078	; 0xfffff3fa
    6678:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    667c:	06723c3c 			; <UNDEFINED> instruction: 0x06723c3c
    6680:	742e063c 	strtvc	r0, [lr], #-1596	; 0xfffff9c4
    6684:	3c903c21 	ldccc	12, cr3, [r0], {33}	; 0x21
    6688:	01062e01 	tsteq	r6, r1, lsl #28
    668c:	74902e06 	ldrvc	r2, [r0], #3590	; 0xe06
    6690:	4f040521 	svcmi	0x00040521
    6694:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    6698:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
    669c:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    66a0:	13060805 	movwne	r0, #26629	; 0x6805
    66a4:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    66a8:	13210604 			; <UNDEFINED> instruction: 0x13210604
    66ac:	01060905 	tsteq	r6, r5, lsl #18
    66b0:	21060405 	tstcs	r6, r5, lsl #8
    66b4:	24060b05 	strcs	r0, [r6], #-2821	; 0xfffff4fb
    66b8:	03060705 	movweq	r0, #26373	; 0x6705
    66bc:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
    66c0:	0b050106 	bleq	146ae0 <__ccfg+0x126b38>
    66c4:	030a053e 	movweq	r0, #42302	; 0xa53e
    66c8:	11056654 	tstne	r5, r4, asr r6
    66cc:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    66d0:	05025116 	streq	r5, [r2, #-278]	; 0xfffffeea
    66d4:	89010100 	stmdbhi	r1, {r8}
    66d8:	03000002 	movweq	r0, #2
    66dc:	00028300 	andeq	r8, r2, r0, lsl #6
    66e0:	fb010200 	blx	46eea <__ccfg+0x26f42>
    66e4:	01000d0e 	tsteq	r0, lr, lsl #26
    66e8:	00010101 	andeq	r0, r1, r1, lsl #2
    66ec:	00010000 	andeq	r0, r1, r0
    66f0:	752f0100 	strvc	r0, [pc, #-256]!	; 65f8 <__exidx_end+0x16cc>
    66f4:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 6530 <__exidx_end+0x1604>
    66f8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    66fc:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    6700:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6704:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6708:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    670c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    6710:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    6714:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6718:	2f006564 	svccs	0x00006564
    671c:	2f727375 	svccs	0x00727375
    6720:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6724:	2f656475 	svccs	0x00656475
    6728:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    672c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    6730:	2f007379 	svccs	0x00007379
    6734:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    6738:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    673c:	2f6e6974 	svccs	0x006e6974
    6740:	6b736544 	blvs	1cdfc58 <__ccfg+0x1cbfcb0>
    6744:	2f706f74 	svccs	0x00706f74
    6748:	4f534c4f 	svcmi	0x00534c4f
    674c:	2f54454e 	svccs	0x0054454e
    6750:	4f434950 	svcmi	0x00434950
    6754:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    6758:	2f534f63 	svccs	0x00534f63
    675c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    6760:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    6764:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    6768:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    676c:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    6770:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6774:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6778:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 66c4 <__exidx_end+0x1798>
    677c:	616d2f65 	cmnvs	sp, r5, ror #30
    6780:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    6784:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6788:	706f746b 	rsbvc	r7, pc, fp, ror #8
    678c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6790:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6794:	4349502f 	movtmi	r5, #36911	; 0x902f
    6798:	502f534f 	eorpl	r5, pc, pc, asr #6
    679c:	534f6369 	movtpl	r6, #62313	; 0xf369
    67a0:	3143432f 	cmpcc	r3, pc, lsr #6
    67a4:	2f585833 	svccs	0x00585833
    67a8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    67ac:	41575858 	cmpmi	r7, r8, asr r8
    67b0:	722f4552 	eorvc	r4, pc, #343932928	; 0x14800000
    67b4:	61705f66 	cmnvs	r0, r6, ror #30
    67b8:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    67bc:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    67c0:	2f656d6f 	svccs	0x00656d6f
    67c4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    67c8:	442f6e69 	strtmi	r6, [pc], #-3689	; 67d0 <__exidx_end+0x18a4>
    67cc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    67d0:	4f2f706f 	svcmi	0x002f706f
    67d4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    67d8:	502f5445 	eorpl	r5, pc, r5, asr #8
    67dc:	534f4349 	movtpl	r4, #62281	; 0xf349
    67e0:	6369502f 	cmnvs	r9, #47	; 0x2f
    67e4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    67e8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    67ec:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    67f0:	2f656d6f 	svccs	0x00656d6f
    67f4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    67f8:	442f6e69 	strtmi	r6, [pc], #-3689	; 6800 <__exidx_end+0x18d4>
    67fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    6800:	4f2f706f 	svcmi	0x002f706f
    6804:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6808:	502f5445 	eorpl	r5, pc, r5, asr #8
    680c:	534f4349 	movtpl	r4, #62281	; 0xf349
    6810:	6369502f 	cmnvs	r9, #47	; 0x2f
    6814:	2f00534f 	svccs	0x0000534f
    6818:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    681c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    6820:	2f6e6974 	svccs	0x006e6974
    6824:	6b736544 	blvs	1cdfd3c <__ccfg+0x1cbfd94>
    6828:	2f706f74 	svccs	0x00706f74
    682c:	4f534c4f 	svcmi	0x00534c4f
    6830:	2f54454e 	svccs	0x0054454e
    6834:	4f434950 	svcmi	0x00434950
    6838:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    683c:	2f534f63 	svccs	0x00534f63
    6840:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    6844:	00006c65 	andeq	r6, r0, r5, ror #24
    6848:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    684c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6850:	00000100 	andeq	r0, r0, r0, lsl #2
    6854:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    6858:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    685c:	00000100 	andeq	r0, r0, r0, lsl #2
    6860:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6864:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6868:	00000200 	andeq	r0, r0, r0, lsl #4
    686c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    6870:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6874:	6c000002 	stcvs	0, cr0, [r0], {2}
    6878:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    687c:	00020068 	andeq	r0, r2, r8, rrx
    6880:	5f667200 	svcpl	0x00667200
    6884:	6c69616d 	stfvse	f6, [r9], #-436	; 0xfffffe4c
    6888:	2e786f62 	cdpcs	15, 7, cr6, cr8, cr2, {3}
    688c:	00030068 	andeq	r0, r3, r8, rrx
    6890:	5f667200 	svcpl	0x00667200
    6894:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
    6898:	635f6e6f 	cmpvs	pc, #1776	; 0x6f0
    689c:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    68a0:	00000300 	andeq	r0, r0, r0, lsl #6
    68a4:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    68a8:	5f706f72 	svcpl	0x00706f72
    68ac:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    68b0:	00030068 	andeq	r0, r3, r8, rrx
    68b4:	5f667200 	svcpl	0x00667200
    68b8:	63746170 	cmnvs	r4, #112, 2
    68bc:	70635f68 	rsbvc	r5, r3, r8, ror #30
    68c0:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    68c4:	6b73666e 	blvs	1ce0284 <__ccfg+0x1cc02dc>
    68c8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    68cc:	66720000 	ldrbtvs	r0, [r2], -r0
    68d0:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    68d4:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    68d8:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    68dc:	73666e65 	cmnvc	r6, #1616	; 0x650
    68e0:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    68e4:	61000004 	tstvs	r0, r4
    68e8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    68ec:	00050068 	andeq	r0, r5, r8, rrx
    68f0:	63616d00 	cmnvs	r1, #0, 26
    68f4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    68f8:	70000005 	andvc	r0, r0, r5
    68fc:	5f736e69 	svcpl	0x00736e69
    6900:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6904:	00050068 	andeq	r0, r5, r8, rrx
    6908:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    690c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    6910:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    6914:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    6918:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    691c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    6920:	00060068 	andeq	r0, r6, r8, rrx
    6924:	72656b00 	rsbvc	r6, r5, #0, 22
    6928:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    692c:	00070068 	andeq	r0, r7, r8, rrx
    6930:	616d7300 	cmnvs	sp, r0, lsl #6
    6934:	66727472 			; <UNDEFINED> instruction: 0x66727472
    6938:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    693c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    6940:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6944:	73000005 	movwvc	r0, #5
    6948:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    694c:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    6950:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    6954:	5f73676e 	svcpl	0x0073676e
    6958:	685f706c 	ldmdavs	pc, {r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    695c:	00632e72 	rsbeq	r2, r3, r2, ror lr
    6960:	00000005 	andeq	r0, r0, r5
    6964:	0000019c 	muleq	r0, ip, r1
    6968:	015f0002 	cmpeq	pc, r2
    696c:	01020000 	mrseq	r0, (UNDEF: 2)
    6970:	000d0efb 	strdeq	r0, [sp], -fp
    6974:	01010101 	tsteq	r1, r1, lsl #2
    6978:	01000000 	mrseq	r0, (UNDEF: 0)
    697c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6980:	2f2e2e2f 	svccs	0x002e2e2f
    6984:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6988:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    698c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6990:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6994:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6998:	63635c69 	cmnvs	r3, #26880	; 0x6900
    699c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    69a0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    69a4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    69a8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    69ac:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    69b0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    69b4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    69b8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    69bc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    69c0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6858 <__exidx_end+0x192c>
    69c4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    69c8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    69cc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    69d0:	6f6e2d6d 	svcvs	0x006e2d6d
    69d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    69d8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    69dc:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    69e0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    69e4:	615c3371 	cmpvs	ip, r1, ror r3
    69e8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    69ec:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    69f0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    69f4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    69f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    69fc:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6a00:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6a04:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6a08:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6a0c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6a10:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6a14:	31303030 	teqcc	r0, r0, lsr r0
    6a18:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6a1c:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6a20:	61746562 	cmnvs	r4, r2, ror #10
    6a24:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6a28:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6a2c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6864 <__exidx_end+0x1938>
    6a30:	6f635c73 	svcvs	0x00635c73
    6a34:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6a38:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6a3c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6a40:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6a44:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6a48:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6a4c:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6a50:	3130322d 	teqcc	r0, sp, lsr #4
    6a54:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6a58:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6a5c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6a60:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6a64:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6a68:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6a6c:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6a70:	2f2e0073 	svccs	0x002e0073
    6a74:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a78:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a7c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6a80:	64610000 	strbtvs	r0, [r1], #-0
    6a84:	00632e69 	rsbeq	r2, r3, r9, ror #28
    6a88:	5f000001 	svcpl	0x00000001
    6a8c:	61666564 	cmnvs	r6, r4, ror #10
    6a90:	5f746c75 	svcpl	0x00746c75
    6a94:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6a98:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6a9c:	5f000002 	svcpl	0x00000002
    6aa0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6aa4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6aa8:	00000300 	andeq	r0, r0, r0, lsl #6
    6aac:	745f7768 	ldrbvc	r7, [pc], #-1896	; 6ab4 <__exidx_end+0x1b88>
    6ab0:	73657079 	cmnvc	r5, #121	; 0x79
    6ab4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6ab8:	6f720000 	svcvs	0x00720000
    6abc:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6ac0:	63000001 	movwvs	r0, #1
    6ac4:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    6ac8:	00000100 	andeq	r0, r0, r0, lsl #2
    6acc:	02050000 	andeq	r0, r5, #0
    6ad0:	00003018 	andeq	r3, r0, r8, lsl r0
    6ad4:	20013503 	andcs	r3, r1, r3, lsl #10
    6ad8:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6adc:	214b3d01 	cmpcs	fp, r1, lsl #26
    6ae0:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    6ae4:	01010005 	tsteq	r1, r5
    6ae8:	00020500 	andeq	r0, r2, r0, lsl #10
    6aec:	03000000 	movweq	r0, #0
    6af0:	200100c0 	andcs	r0, r1, r0, asr #1
    6af4:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    6af8:	2f4b3d01 	svccs	0x004b3d01
    6afc:	022c232f 	eoreq	r2, ip, #-1140850688	; 0xbc000000
    6b00:	01010005 	tsteq	r1, r5
    6b04:	00000167 	andeq	r0, r0, r7, ror #2
    6b08:	01470002 	cmpeq	r7, r2
    6b0c:	01020000 	mrseq	r0, (UNDEF: 2)
    6b10:	000d0efb 	strdeq	r0, [sp], -fp
    6b14:	01010101 	tsteq	r1, r1, lsl #2
    6b18:	01000000 	mrseq	r0, (UNDEF: 0)
    6b1c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6b20:	2f2e2e2f 	svccs	0x002e2e2f
    6b24:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6b28:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6b2c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6b30:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6b34:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6b38:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6b3c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6b40:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6b44:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6b48:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6b4c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6b50:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6b54:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6b58:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6b5c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6b60:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 69f8 <__exidx_end+0x1acc>
    6b64:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6b68:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6b6c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6b70:	6f6e2d6d 	svcvs	0x006e2d6d
    6b74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6b78:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6b7c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6b80:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6b84:	615c3371 	cmpvs	ip, r1, ror r3
    6b88:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b8c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b90:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b94:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6b98:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6b9c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6ba0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6ba4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6ba8:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6bac:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6bb0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6bb4:	31303030 	teqcc	r0, r0, lsr r0
    6bb8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6bbc:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6bc0:	61746562 	cmnvs	r4, r2, ror #10
    6bc4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6bc8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6bcc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6a04 <__exidx_end+0x1ad8>
    6bd0:	6f635c73 	svcvs	0x00635c73
    6bd4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6bd8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6bdc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6be0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6be4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6be8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6bec:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6bf0:	3130322d 	teqcc	r0, sp, lsr #4
    6bf4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6bf8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6bfc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6c00:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6c04:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6c08:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6c0c:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6c10:	61000073 	tstvs	r0, r3, ror r0
    6c14:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    6c18:	6f6d7461 	svcvs	0x006d7461
    6c1c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    6c20:	5f000001 	svcpl	0x00000001
    6c24:	61666564 	cmnvs	r6, r4, ror #10
    6c28:	5f746c75 	svcpl	0x00746c75
    6c2c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6c30:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6c34:	5f000002 	svcpl	0x00000002
    6c38:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6c3c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6c40:	00000300 	andeq	r0, r0, r0, lsl #6
    6c44:	5f6e6f61 	svcpl	0x006e6f61
    6c48:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6c4c:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6c50:	00000100 	andeq	r0, r0, r0, lsl #2
    6c54:	02050000 	andeq	r0, r5, #0
    6c58:	00003040 	andeq	r3, r0, r0, asr #32
    6c5c:	1a013c03 	bne	55c70 <__ccfg+0x35cc8>
    6c60:	77032f36 	smladxvc	r3, r6, pc, r2	; <UNPREDICTABLE>
    6c64:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    6c68:	09023d4c 	stmdbeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    6c6c:	a9010100 	stmdbge	r1, {r8}
    6c70:	02000001 	andeq	r0, r0, #1
    6c74:	00014100 	andeq	r4, r1, r0, lsl #2
    6c78:	fb010200 	blx	47482 <__ccfg+0x274da>
    6c7c:	01000d0e 	tsteq	r0, lr, lsl #26
    6c80:	00010101 	andeq	r0, r1, r1, lsl #2
    6c84:	00010000 	andeq	r0, r1, r0
    6c88:	2f2e0100 	svccs	0x002e0100
    6c8c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6c90:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6c94:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6c98:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6c9c:	63006269 	movwvs	r6, #617	; 0x269
    6ca0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6ca4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6ca8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6cac:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6cb0:	5f393130 	svcpl	0x00393130
    6cb4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6cb8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6cbc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6cc0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6cc4:	6f745c36 	svcvs	0x00745c36
    6cc8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6ccc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6cd0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6cd4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6cd8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6cdc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6ce0:	61652d65 	cmnvs	r5, r5, ror #26
    6ce4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6ce8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6cec:	71353130 	teqvc	r5, r0, lsr r1
    6cf0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6cf4:	6f6e2d6d 	svcvs	0x006e2d6d
    6cf8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6cfc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6d00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6d04:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6d08:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6d0c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6d10:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6d14:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6d18:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6d1c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6d20:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6d24:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6d28:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6d2c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6d30:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6d34:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6d38:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6d3c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6bd4 <__exidx_end+0x1ca8>
    6d40:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6d44:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6d48:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6d4c:	6f6e2d6d 	svcvs	0x006e2d6d
    6d50:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6d54:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6d58:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6d5c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6d60:	615c3371 	cmpvs	ip, r1, ror r3
    6d64:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6d68:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6d6c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6d70:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6d74:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6d78:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6d7c:	6f610000 	svcvs	0x00610000
    6d80:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    6d84:	00632e63 	rsbeq	r2, r3, r3, ror #28
    6d88:	5f000001 	svcpl	0x00000001
    6d8c:	61666564 	cmnvs	r6, r4, ror #10
    6d90:	5f746c75 	svcpl	0x00746c75
    6d94:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6d98:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6d9c:	5f000002 	svcpl	0x00000002
    6da0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6da4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6da8:	00000300 	andeq	r0, r0, r0, lsl #6
    6dac:	5f6e6f61 	svcpl	0x006e6f61
    6db0:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    6db4:	00010068 	andeq	r0, r1, r8, rrx
    6db8:	05000000 	streq	r0, [r0, #-0]
    6dbc:	00307002 	eorseq	r7, r0, r2
    6dc0:	013e0300 	teqeq	lr, r0, lsl #6
    6dc4:	01040200 	mrseq	r0, R12_usr
    6dc8:	00010a03 	andeq	r0, r1, r3, lsl #20
    6dcc:	21010402 	tstcs	r1, r2, lsl #8
    6dd0:	01040200 	mrseq	r0, R12_usr
    6dd4:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    6dd8:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6ddc:	00210104 	eoreq	r0, r1, r4, lsl #2
    6de0:	21010402 	tstcs	r1, r2, lsl #8
    6de4:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    6de8:	00010100 	andeq	r0, r1, r0, lsl #2
    6dec:	30900205 	addscc	r0, r0, r5, lsl #4
    6df0:	d7030000 	strle	r0, [r3, -r0]
    6df4:	02000100 	andeq	r0, r0, #0, 2
    6df8:	0c030104 	stfeqs	f0, [r3], {4}
    6dfc:	04020001 	streq	r0, [r2], #-1
    6e00:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6e04:	001f0104 	andseq	r0, pc, r4, lsl #2
    6e08:	21010402 	tstcs	r1, r2, lsl #8
    6e0c:	01040200 	mrseq	r0, R12_usr
    6e10:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6e14:	02312101 	eorseq	r2, r1, #1073741824	; 0x40000000
    6e18:	01010005 	tsteq	r1, r5
    6e1c:	0000019c 	muleq	r0, ip, r1
    6e20:	01390002 	teqeq	r9, r2
    6e24:	01020000 	mrseq	r0, (UNDEF: 2)
    6e28:	000d0efb 	strdeq	r0, [sp], -fp
    6e2c:	01010101 	tsteq	r1, r1, lsl #2
    6e30:	01000000 	mrseq	r0, (UNDEF: 0)
    6e34:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6e38:	2f2e2e2f 	svccs	0x002e2e2f
    6e3c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6e40:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6e44:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6e48:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6e4c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6e50:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6e54:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6e58:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6e5c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6e60:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6e64:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6e68:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6e6c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6e70:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6e74:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6e78:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6d10 <__exidx_end+0x1de4>
    6e7c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6e80:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6e84:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6e88:	6f6e2d6d 	svcvs	0x006e2d6d
    6e8c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6e90:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6e94:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6e98:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6e9c:	615c3371 	cmpvs	ip, r1, ror r3
    6ea0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6ea4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6ea8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6eac:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6eb0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6eb4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6eb8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6ebc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6ec0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6ec4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6ec8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6ecc:	31303030 	teqcc	r0, r0, lsr r0
    6ed0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6ed4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6ed8:	61746562 	cmnvs	r4, r2, ror #10
    6edc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6ee0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6ee4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6d1c <__exidx_end+0x1df0>
    6ee8:	6f635c73 	svcvs	0x00635c73
    6eec:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6ef0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6ef4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6ef8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6efc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6f00:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6f04:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6f08:	3130322d 	teqcc	r0, sp, lsr #4
    6f0c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6f10:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6f14:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6f18:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6f1c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6f20:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6f24:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6f28:	63000073 	movwvs	r0, #115	; 0x73
    6f2c:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
    6f30:	00000100 	andeq	r0, r0, r0, lsl #2
    6f34:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6f38:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6f3c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6f40:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6f44:	00000200 	andeq	r0, r0, r0, lsl #4
    6f48:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6f4c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6f50:	00030068 	andeq	r0, r3, r8, rrx
    6f54:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    6f58:	0100682e 	tsteq	r0, lr, lsr #16
    6f5c:	00000000 	andeq	r0, r0, r0
    6f60:	30a80205 	adccc	r0, r8, r5, lsl #4
    6f64:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    6f68:	12030100 	andne	r0, r3, #0, 2
    6f6c:	00040201 	andeq	r0, r4, r1, lsl #4
    6f70:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6f74:	00000002 	andeq	r0, r0, r2
    6f78:	01c00300 	biceq	r0, r0, r0, lsl #6
    6f7c:	01110301 	tsteq	r1, r1, lsl #6
    6f80:	01000302 	tsteq	r0, r2, lsl #6
    6f84:	02050001 	andeq	r0, r5, #1
    6f88:	000030b0 	strheq	r3, [r0], -r0
    6f8c:	01028d03 	tsteq	r2, r3, lsl #26
    6f90:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    6f94:	01010004 	tsteq	r1, r4
    6f98:	00020500 	andeq	r0, r2, r0, lsl #10
    6f9c:	03000000 	movweq	r0, #0
    6fa0:	030102d8 	movweq	r0, #4824	; 0x12d8
    6fa4:	03020111 	movweq	r0, #8465	; 0x2111
    6fa8:	00010100 	andeq	r0, r1, r0, lsl #2
    6fac:	00000205 	andeq	r0, r0, r5, lsl #4
    6fb0:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    6fb4:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
    6fb8:	01010004 	tsteq	r1, r4
    6fbc:	000002d6 	ldrdeq	r0, [r0], -r6
    6fc0:	017c0002 	cmneq	ip, r2
    6fc4:	01020000 	mrseq	r0, (UNDEF: 2)
    6fc8:	000d0efb 	strdeq	r0, [sp], -fp
    6fcc:	01010101 	tsteq	r1, r1, lsl #2
    6fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    6fd4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6fd8:	2f2e2e2f 	svccs	0x002e2e2f
    6fdc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6fe0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6fe4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6fe8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6fec:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6ff0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6ff4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6ff8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6ffc:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7000:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7004:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7008:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    700c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7010:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7014:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7018:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6eb0 <__exidx_end+0x1f84>
    701c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7020:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7024:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7028:	6f6e2d6d 	svcvs	0x006e2d6d
    702c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7030:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7034:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7038:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    703c:	615c3371 	cmpvs	ip, r1, ror r3
    7040:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7044:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7048:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    704c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7050:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7054:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7058:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    705c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7060:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7064:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7068:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    706c:	31303030 	teqcc	r0, r0, lsr r0
    7070:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7074:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7078:	61746562 	cmnvs	r4, r2, ror #10
    707c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7080:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7084:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6ebc <__exidx_end+0x1f90>
    7088:	6f635c73 	svcvs	0x00635c73
    708c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7090:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7094:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7098:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    709c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    70a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    70a4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    70a8:	3130322d 	teqcc	r0, sp, lsr #4
    70ac:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    70b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    70b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    70b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    70bc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    70c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    70c4:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    70c8:	2f2e0073 	svccs	0x002e0073
    70cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    70d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    70d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    70d8:	736f0000 	cmnvc	pc, #0
    70dc:	00632e63 	rsbeq	r2, r3, r3, ror #28
    70e0:	6f000001 	svcvs	0x00000001
    70e4:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    70e8:	00000100 	andeq	r0, r0, r0, lsl #2
    70ec:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    70f0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    70f4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    70f8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    70fc:	00000200 	andeq	r0, r0, r0, lsl #4
    7100:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7104:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7108:	00030068 	andeq	r0, r3, r8, rrx
    710c:	5f776800 	svcpl	0x00776800
    7110:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7114:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7118:	72000004 	andvc	r0, r0, #4
    711c:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7120:	00000100 	andeq	r0, r0, r0, lsl #2
    7124:	5f6e6f61 	svcpl	0x006e6f61
    7128:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    712c:	00010068 	andeq	r0, r1, r8, rrx
    7130:	6e6f6100 	powvse	f6, f7, f0
    7134:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    7138:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    713c:	00010068 	andeq	r0, r1, r8, rrx
    7140:	05000000 	streq	r0, [r0, #-0]
    7144:	0030b802 	eorseq	fp, r0, r2, lsl #16
    7148:	00e50300 	rsceq	r0, r5, r0, lsl #6
    714c:	0f032001 	svceq	0x00032001
    7150:	20710320 	rsbscs	r0, r1, r0, lsr #6
    7154:	25200f03 	strcs	r0, [r0, #-3843]!	; 0xfffff0fd
    7158:	309e0903 	addscc	r0, lr, r3, lsl #18
    715c:	339e0903 	orrscc	r0, lr, #49152	; 0xc000
    7160:	000702a3 	andeq	r0, r7, r3, lsr #5
    7164:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7168:	00311402 	eorseq	r1, r1, r2, lsl #8
    716c:	01a00300 	lsleq	r0, r0, #6
    7170:	2e0c0301 	cdpcs	3, 0, cr0, cr12, cr1, {0}
    7174:	7a038822 	bvc	e9204 <__ccfg+0xc925c>
    7178:	0225263c 	eoreq	r2, r5, #60, 12	; 0x3c00000
    717c:	01010006 	tsteq	r1, r6
    7180:	00020500 	andeq	r0, r2, r0, lsl #10
    7184:	03000000 	movweq	r0, #0
    7188:	200101c2 	andcs	r0, r1, r2, asr #3
    718c:	03349125 	teqeq	r4, #1073741833	; 0x40000009
    7190:	03272e79 			; <UNDEFINED> instruction: 0x03272e79
    7194:	00262e7a 	eoreq	r2, r6, sl, ror lr
    7198:	03010402 	movweq	r0, #5122	; 0x1402
    719c:	0200207a 	andeq	r2, r0, #122	; 0x7a
    71a0:	30500104 	subscc	r0, r0, r4, lsl #2
    71a4:	241f302d 	ldrcs	r3, [pc], #-45	; 71ac <__exidx_end+0x2280>
    71a8:	341f3d4b 	ldrcc	r3, [pc], #-3403	; 71b0 <__exidx_end+0x2284>
    71ac:	03326c3d 	teqeq	r2, #15616	; 0x3d00
    71b0:	1003666d 	andne	r6, r3, sp, ror #12
    71b4:	0902263c 	stmdbeq	r2, {r2, r3, r4, r5, r9, sl, sp}
    71b8:	00010100 	andeq	r0, r1, r0, lsl #2
    71bc:	31400205 	cmpcc	r0, r5, lsl #4
    71c0:	f3030000 	vhadd.u8	d0, d3, d0
    71c4:	4b210101 	blmi	8475d0 <__ccfg+0x827628>
    71c8:	01000702 	tsteq	r0, r2, lsl #14
    71cc:	02050001 	andeq	r0, r5, #1
    71d0:	00003158 	andeq	r3, r0, r8, asr r1
    71d4:	01028003 	tsteq	r2, r3
    71d8:	03020424 	movweq	r0, #9252	; 0x2424
    71dc:	01045822 	tsteq	r4, r2, lsr #16
    71e0:	04826203 	streq	r6, [r2], #515	; 0x203
    71e4:	203c0302 	eorscs	r0, ip, r2, lsl #6
    71e8:	4a030104 	bmi	c7600 <__ccfg+0xa7658>
    71ec:	211f3d4a 	tstcs	pc, sl, asr #26
    71f0:	30221f3d 	eorcc	r1, r2, sp, lsr pc
    71f4:	2322301f 			; <UNDEFINED> instruction: 0x2322301f
    71f8:	01000c02 	tsteq	r0, r2, lsl #24
    71fc:	02050001 	andeq	r0, r5, #1
    7200:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
    7204:	0102a303 	tsteq	r2, r3, lsl #6
    7208:	02044f25 	andeq	r4, r4, #37, 30	; 0x94
    720c:	044a1703 	strbeq	r1, [sl], #-1795	; 0xfffff8fd
    7210:	4a6d0301 	bmi	1b47e1c <__ccfg+0x1b27e74>
    7214:	0009024b 	andeq	r0, r9, fp, asr #4
    7218:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    721c:	00000002 	andeq	r0, r0, r2
    7220:	02bc0300 	adcseq	r0, ip, #0, 6
    7224:	17032201 	strne	r2, [r3, -r1, lsl #4]
    7228:	20690320 	rsbcs	r0, r9, r0, lsr #6
    722c:	3c100328 	ldccc	3, cr0, [r0], {40}	; 0x28
    7230:	032e6c03 			; <UNDEFINED> instruction: 0x032e6c03
    7234:	6d032e15 	stcvs	14, cr2, [r3, #-84]	; 0xffffffac
    7238:	20130358 	andscs	r0, r3, r8, asr r3
    723c:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    7240:	023f2011 	eorseq	r2, pc, #17
    7244:	01010006 	tsteq	r1, r6
    7248:	00020500 	andeq	r0, r2, r0, lsl #10
    724c:	03000000 	movweq	r0, #0
    7250:	030102e3 	movweq	r0, #4835	; 0x12e3
    7254:	024d0121 	subeq	r0, sp, #1073741832	; 0x40000008
    7258:	01010002 	tsteq	r1, r2
    725c:	00020500 	andeq	r0, r2, r0, lsl #10
    7260:	03000000 	movweq	r0, #0
    7264:	03010390 	movweq	r0, #5008	; 0x1390
    7268:	1f212010 	svcne	0x00212010
    726c:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
    7270:	003e0104 	eorseq	r0, lr, r4, lsl #2
    7274:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7278:	341d313d 	ldrcc	r3, [sp], #-317	; 0xfffffec3
    727c:	01000702 	tsteq	r0, r2, lsl #14
    7280:	02050001 	andeq	r0, r5, #1
    7284:	00000000 	andeq	r0, r0, r0
    7288:	0103b503 	tsteq	r3, r3, lsl #10
    728c:	332c3117 			; <UNDEFINED> instruction: 0x332c3117
    7290:	0005023d 	andeq	r0, r5, sp, lsr r2
    7294:	03a70101 			; <UNDEFINED> instruction: 0x03a70101
    7298:	00020000 	andeq	r0, r2, r0
    729c:	00000265 	andeq	r0, r0, r5, ror #4
    72a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    72a4:	0101000d 	tsteq	r1, sp
    72a8:	00000101 	andeq	r0, r0, r1, lsl #2
    72ac:	00000100 	andeq	r0, r0, r0, lsl #2
    72b0:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    72b4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    72b8:	2f2e2e2f 	svccs	0x002e2e2f
    72bc:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    72c0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    72c4:	3a630062 	bcc	18c7454 <__ccfg+0x18a74ac>
    72c8:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    72cc:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    72d0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    72d4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    72d8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    72dc:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    72e0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    72e4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    72e8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    72ec:	6f6f745c 	svcvs	0x006f745c
    72f0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    72f4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    72f8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    72fc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7300:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7304:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7308:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    730c:	5f342d69 	svcpl	0x00342d69
    7310:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7314:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7318:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    731c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7320:	61652d65 	cmnvs	r5, r5, ror #26
    7324:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7328:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    732c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7330:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7334:	6300656e 	movwvs	r6, #1390	; 0x56e
    7338:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    733c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7340:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7344:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7348:	5f393130 	svcpl	0x00393130
    734c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7350:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7354:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7358:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    735c:	6f745c36 	svcvs	0x00745c36
    7360:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7364:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7368:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    736c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7370:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7374:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7378:	61652d65 	cmnvs	r5, r5, ror #26
    737c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7380:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7384:	71353130 	teqvc	r5, r0, lsr r1
    7388:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    738c:	6f6e2d6d 	svcvs	0x006e2d6d
    7390:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7394:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7398:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    739c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    73a0:	00737973 	rsbseq	r7, r3, r3, ror r9
    73a4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    73a8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    73ac:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    73b0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    73b4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    73b8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    73bc:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    73c0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    73c4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    73c8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    73cc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    73d0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7268 <__exidx_end+0x233c>
    73d4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    73d8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    73dc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    73e0:	6f6e2d6d 	svcvs	0x006e2d6d
    73e4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    73e8:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    73ec:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    73f0:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    73f4:	6c5c3371 	mrrcvs	3, 7, r3, ip, cr1
    73f8:	675c6269 	ldrbvs	r6, [ip, -r9, ror #4]
    73fc:	615c6363 	cmpvs	ip, r3, ror #6
    7400:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7404:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7408:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    740c:	392e345c 	stmdbcc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    7410:	695c332e 	ldmdbvs	ip, {r1, r2, r3, r5, r8, r9, ip, sp}^
    7414:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7418:	63006564 	movwvs	r6, #1380	; 0x564
    741c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7420:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7424:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7428:	30302e30 	eorscc	r2, r0, r0, lsr lr
    742c:	5f393130 	svcpl	0x00393130
    7430:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7434:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7438:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    743c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7440:	6f745c36 	svcvs	0x00745c36
    7444:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7448:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    744c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7450:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7454:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7458:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    745c:	61652d65 	cmnvs	r5, r5, ror #26
    7460:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7464:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7468:	71353130 	teqvc	r5, r0, lsr r1
    746c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7470:	6f6e2d6d 	svcvs	0x006e2d6d
    7474:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7478:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    747c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7480:	00656475 	rsbeq	r6, r5, r5, ror r4
    7484:	63667200 	cmnvs	r6, #0, 4
    7488:	0100632e 	tsteq	r0, lr, lsr #6
    748c:	66720000 	ldrbtvs	r0, [r2], -r0
    7490:	00682e63 	rsbeq	r2, r8, r3, ror #28
    7494:	5f000001 	svcpl	0x00000001
    7498:	61666564 	cmnvs	r6, r4, ror #10
    749c:	5f746c75 	svcpl	0x00746c75
    74a0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    74a4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    74a8:	5f000002 	svcpl	0x00000002
    74ac:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    74b0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    74b4:	00000300 	andeq	r0, r0, r0, lsl #6
    74b8:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    74bc:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    74c0:	00000400 	andeq	r0, r0, r0, lsl #8
    74c4:	6d5f6672 	ldclvs	6, cr6, [pc, #-456]	; 7304 <__exidx_end+0x23d8>
    74c8:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    74cc:	682e786f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}
    74d0:	00000100 	andeq	r0, r0, r0, lsl #2
    74d4:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    74d8:	6f6d6d6f 	svcvs	0x006d6d6f
    74dc:	6d635f6e 	stclvs	15, cr5, [r3, #-440]!	; 0xfffffe48
    74e0:	00682e64 	rsbeq	r2, r8, r4, ror #28
    74e4:	72000001 	andvc	r0, r0, #1
    74e8:	72705f66 	rsbsvc	r5, r0, #408	; 0x198
    74ec:	635f706f 	cmpvs	pc, #111	; 0x6f
    74f0:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    74f4:	00000100 	andeq	r0, r0, r0, lsl #2
    74f8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    74fc:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    7500:	00000500 	andeq	r0, r0, r0, lsl #10
    7504:	02050000 	andeq	r0, r5, #0
    7508:	00000000 	andeq	r0, r0, r0
    750c:	0100e803 	tsteq	r0, r3, lsl #16
    7510:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    7514:	02003101 	andeq	r3, r0, #1073741824	; 0x40000000
    7518:	3f2f0104 	svccc	0x002f0104
    751c:	01000302 	tsteq	r0, r2, lsl #6
    7520:	02050001 	andeq	r0, r5, #1
    7524:	000031ec 	andeq	r3, r0, ip, ror #3
    7528:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    752c:	01040200 	mrseq	r0, R12_usr
    7530:	03020413 	movweq	r0, #9235	; 0x2413
    7534:	044a01c7 	strbeq	r0, [sl], #-455	; 0xfffffe39
    7538:	7ebd0301 	cdpvc	3, 11, cr0, cr13, cr1, {0}
    753c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7540:	02042201 	andeq	r2, r4, #268435456	; 0x10000000
    7544:	3c01c103 	stfccd	f4, [r1], {3}
    7548:	c2030104 	andgt	r0, r3, #4, 2
    754c:	022f3c7e 	eoreq	r3, pc, #32256	; 0x7e00
    7550:	01010005 	tsteq	r1, r5
    7554:	14020500 	strne	r0, [r2], #-1280	; 0xfffffb00
    7558:	03000032 	movweq	r0, #50	; 0x32
    755c:	1401018f 	strne	r0, [r1], #-399	; 0xfffffe71
    7560:	1b251d23 	blne	94e9f4 <__ccfg+0x92ea4c>
    7564:	1f2f3d76 	svcne	0x002f3d76
    7568:	2d222f21 	stccs	15, cr2, [r2, #-132]!	; 0xffffff7c
    756c:	02212121 	eoreq	r2, r1, #1073741832	; 0x40000008
    7570:	0101000c 	tsteq	r1, ip
    7574:	60020500 	andvs	r0, r2, r0, lsl #10
    7578:	03000032 	movweq	r0, #50	; 0x32
    757c:	150101a4 	strne	r0, [r1, #-420]	; 0xfffffe5c
    7580:	211c2f96 			; <UNDEFINED> instruction: 0x211c2f96
    7584:	1f212525 	svcne	0x00212525
    7588:	660a032f 	strvs	r0, [sl], -pc, lsr #6
    758c:	032f3d3d 			; <UNDEFINED> instruction: 0x032f3d3d
    7590:	18035873 	stmdane	r3, {r0, r1, r4, r5, r6, fp, ip, lr}
    7594:	2f3d3d66 	svccs	0x003d3d66
    7598:	3d586803 	ldclcc	8, cr6, [r8, #-12]
    759c:	0b032f3d 	bleq	d3298 <__ccfg+0xb32f0>
    75a0:	2f3d3d58 	svccs	0x003d3d58
    75a4:	3d580b03 	vldrcc	d16, [r8, #-12]
    75a8:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    75ac:	3d5c2f3d 	ldclcc	15, cr2, [ip, #-244]	; 0xffffff0c
    75b0:	02492f3e 	subeq	r2, r9, #62, 30	; 0xf8
    75b4:	0101002f 	tsteq	r1, pc, lsr #32
    75b8:	b0020500 	andlt	r0, r2, r0, lsl #10
    75bc:	03000033 	movweq	r0, #51	; 0x33
    75c0:	030101f3 	movweq	r0, #4595	; 0x11f3
    75c4:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    75c8:	2009032e 	andcs	r0, r9, lr, lsr #6
    75cc:	232121af 			; <UNDEFINED> instruction: 0x232121af
    75d0:	2f22221f 	svccs	0x0022221f
    75d4:	4a0b0326 	bmi	2c8274 <__ccfg+0x2a82cc>
    75d8:	335a2f2d 	cmpcc	sl, #45, 30	; 0xb4
    75dc:	02040200 	andeq	r0, r4, #0, 4
    75e0:	032e7603 			; <UNDEFINED> instruction: 0x032e7603
    75e4:	14033c11 	strne	r3, [r3], #-3089	; 0xfffff3ef
    75e8:	2e6f03f2 	mcrcs	3, 3, r0, cr15, cr2, {7}
    75ec:	034a2303 	movteq	r2, #41731	; 0xa303
    75f0:	224c3c62 	subcs	r3, ip, #25088	; 0x6200
    75f4:	4c323632 	ldcmi	6, cr3, [r2], #-200	; 0xffffff38
    75f8:	09035022 	stmdbeq	r3, {r1, r5, ip, lr}
    75fc:	26595eac 	ldrbcs	r5, [r9], -ip, lsr #29
    7600:	66620336 			; <UNDEFINED> instruction: 0x66620336
    7604:	01001602 	tsteq	r0, r2, lsl #12
    7608:	02050001 	andeq	r0, r5, #1
    760c:	000034c8 	andeq	r3, r0, r8, asr #9
    7610:	0102f703 	tsteq	r2, r3, lsl #14	; <UNPREDICTABLE>
    7614:	0302ad2f 	movweq	sl, #11567	; 0x2d2f
    7618:	00010100 	andeq	r0, r1, r0, lsl #2
    761c:	00000205 	andeq	r0, r0, r5, lsl #4
    7620:	82030000 	andhi	r0, r3, #0
    7624:	5d240103 	stfpls	f0, [r4, #-12]!
    7628:	01002a02 	tsteq	r0, r2, lsl #20
    762c:	02050001 	andeq	r0, r5, #1
    7630:	000034e8 	andeq	r3, r0, r8, ror #9
    7634:	01039603 	tsteq	r3, r3, lsl #12
    7638:	413e2321 	teqmi	lr, r1, lsr #6
    763c:	01000602 	tsteq	r0, r2, lsl #12
    7640:	0001e901 	andeq	lr, r1, r1, lsl #18
    7644:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    7648:	02000001 	andeq	r0, r0, #1
    764c:	0d0efb01 	vstreq	d15, [lr, #-4]
    7650:	01010100 	mrseq	r0, (UNDEF: 17)
    7654:	00000001 	andeq	r0, r0, r1
    7658:	01000001 	tsteq	r0, r1
    765c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7660:	2f2e2e2f 	svccs	0x002e2e2f
    7664:	642f2e2e 	strtvs	r2, [pc], #-3630	; 766c <__exidx_end+0x2740>
    7668:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    766c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7670:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7674:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7678:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    767c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7680:	31303030 	teqcc	r0, r0, lsr r0
    7684:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7688:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    768c:	61746562 	cmnvs	r4, r2, ror #10
    7690:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7694:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7698:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 74d0 <__exidx_end+0x25a4>
    769c:	6f635c73 	svcvs	0x00635c73
    76a0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    76a4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    76a8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    76ac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    76b0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    76b4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    76b8:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    76bc:	3130322d 	teqcc	r0, sp, lsr #4
    76c0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    76c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    76c8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    76cc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    76d0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    76d4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    76d8:	616d5c65 	cmnvs	sp, r5, ror #24
    76dc:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    76e0:	3a630065 	bcc	18c787c <__ccfg+0x18a78d4>
    76e4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    76e8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    76ec:	302e322e 	eorcc	r3, lr, lr, lsr #4
    76f0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    76f4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    76f8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    76fc:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7700:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7704:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7708:	6f6f745c 	svcvs	0x006f745c
    770c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7710:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7714:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7718:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    771c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7720:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7724:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7728:	5f342d69 	svcpl	0x00342d69
    772c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7730:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7734:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7738:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    773c:	61652d65 	cmnvs	r5, r5, ror #26
    7740:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7744:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7748:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    774c:	00007379 	andeq	r7, r0, r9, ror r3
    7750:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    7754:	00632e70 	rsbeq	r2, r3, r0, ror lr
    7758:	61000001 	tstvs	r0, r1
    775c:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    7760:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    7764:	00000100 	andeq	r0, r0, r0, lsl #2
    7768:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    776c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7770:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7774:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7778:	00000200 	andeq	r0, r0, r0, lsl #4
    777c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7780:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7784:	00030068 	andeq	r0, r3, r8, rrx
    7788:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    778c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    7790:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7794:	00000100 	andeq	r0, r0, r0, lsl #2
    7798:	70696863 	rsbvc	r6, r9, r3, ror #16
    779c:	6f666e69 	svcvs	0x00666e69
    77a0:	0100682e 	tsteq	r0, lr, lsr #16
    77a4:	65730000 	ldrbvs	r0, [r3, #-0]!
    77a8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    77ac:	00010068 	andeq	r0, r1, r8, rrx
    77b0:	05000000 	streq	r0, [r0, #-0]
    77b4:	00350402 	eorseq	r0, r5, r2, lsl #8
    77b8:	028d0300 	addeq	r0, sp, #0, 6
    77bc:	0a032001 	beq	cf7c8 <__ccfg+0xaf820>
    77c0:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    77c4:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    77c8:	1f212d43 	svcne	0x00212d43
    77cc:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    77d0:	01046604 	tsteq	r4, r4, lsl #12
    77d4:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    77d8:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    77dc:	2f3d2d4a 	svccs	0x003d2d4a
    77e0:	2f2f1f2f 	svccs	0x002f1f2f
    77e4:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    77e8:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    77ec:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    77f0:	0101001e 	tsteq	r1, lr, lsl r0
    77f4:	d8020500 	stmdale	r2, {r8, sl}
    77f8:	03000035 	movweq	r0, #53	; 0x35
    77fc:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    7800:	41334330 	teqmi	r3, r0, lsr r3
    7804:	333c0903 	teqcc	ip, #49152	; 0xc000
    7808:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    780c:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    7810:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    7814:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    7818:	03496742 	movteq	r6, #38722	; 0x9742
    781c:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    7820:	004b6924 	subeq	r6, fp, r4, lsr #18
    7824:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    7828:	0013024d 	andseq	r0, r3, sp, asr #4
    782c:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    7830:	00020000 	andeq	r0, r2, r0
    7834:	00000165 	andeq	r0, r0, r5, ror #2
    7838:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    783c:	0101000d 	tsteq	r1, sp
    7840:	00000101 	andeq	r0, r0, r1, lsl #2
    7844:	00000100 	andeq	r0, r0, r0, lsl #2
    7848:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    784c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7850:	2f2e2e2f 	svccs	0x002e2e2f
    7854:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    7858:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    785c:	3a630062 	bcc	18c79ec <__ccfg+0x18a7a44>
    7860:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7864:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7868:	302e322e 	eorcc	r3, lr, lr, lsr #4
    786c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7870:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7874:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7878:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    787c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7880:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7884:	6f6f745c 	svcvs	0x006f745c
    7888:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    788c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7890:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7894:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7898:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    789c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    78a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    78a4:	5f342d69 	svcpl	0x00342d69
    78a8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    78ac:	33713531 	cmncc	r1, #205520896	; 0xc400000
    78b0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    78b4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    78b8:	61652d65 	cmnvs	r5, r5, ror #26
    78bc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    78c0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    78c4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    78c8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    78cc:	6300656e 	movwvs	r6, #1390	; 0x56e
    78d0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    78d4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    78d8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    78dc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    78e0:	5f393130 	svcpl	0x00393130
    78e4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    78e8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    78ec:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    78f0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    78f4:	6f745c36 	svcvs	0x00745c36
    78f8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    78fc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7900:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7904:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7908:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    790c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7910:	61652d65 	cmnvs	r5, r5, ror #26
    7914:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7918:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    791c:	71353130 	teqvc	r5, r0, lsr r1
    7920:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7924:	6f6e2d6d 	svcvs	0x006e2d6d
    7928:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    792c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7930:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7934:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7938:	00737973 	rsbseq	r7, r3, r3, ror r9
    793c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    7940:	725f7075 	subsvc	r7, pc, #117	; 0x75
    7944:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    7948:	00000100 	andeq	r0, r0, r0, lsl #2
    794c:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    7950:	6f725f70 	svcvs	0x00725f70
    7954:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    7958:	73000001 	movwvc	r0, #1
    795c:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    7960:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    7964:	00010068 	andeq	r0, r1, r8, rrx
    7968:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    796c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    7970:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7974:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7978:	00020068 	andeq	r0, r2, r8, rrx
    797c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    7980:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    7984:	0300682e 	movweq	r6, #2094	; 0x82e
    7988:	64640000 	strbtvs	r0, [r4], #-0
    798c:	00682e69 	rsbeq	r2, r8, r9, ror #28
    7990:	6f000001 	svcvs	0x00000001
    7994:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    7998:	00000100 	andeq	r0, r0, r0, lsl #2
    799c:	02050000 	andeq	r0, r5, #0
    79a0:	0000367c 	andeq	r3, r0, ip, ror r6
    79a4:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    79a8:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    79ac:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    79b0:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    79b4:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    79b8:	01042000 	mrseq	r2, (UNDEF: 4)
    79bc:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    79c0:	d9030204 	stmdble	r3, {r2, r9}
    79c4:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    79c8:	ac030104 	stfges	f0, [r3], {4}
    79cc:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    79d0:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    79d4:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    79d8:	03587803 	cmpeq	r8, #196608	; 0x30000
    79dc:	7303200d 	movwvc	r2, #12301	; 0x300d
    79e0:	2010033c 	andscs	r0, r0, ip, lsr r3
    79e4:	21212121 			; <UNDEFINED> instruction: 0x21212121
    79e8:	01000d02 	tsteq	r0, r2, lsl #26
    79ec:	02050001 	andeq	r0, r5, #1
    79f0:	000036f8 	strdeq	r3, [r0], -r8
    79f4:	0101bf03 	tsteq	r1, r3, lsl #30
    79f8:	4a78031a 	bmi	1e08668 <__ccfg+0x1de86c0>
    79fc:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    7a00:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    7a04:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    7a08:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    7a0c:	3002042d 	andcc	r0, r2, sp, lsr #8
    7a10:	03010421 	movweq	r0, #5153	; 0x1421
    7a14:	2f3d2e0b 	svccs	0x003d2e0b
    7a18:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    7a1c:	302c4d66 	eorcc	r4, ip, r6, ror #26
    7a20:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    7a24:	01001502 	tsteq	r0, r2, lsl #10
    7a28:	02050001 	andeq	r0, r5, #1
    7a2c:	000037a4 	andeq	r3, r0, r4, lsr #15
    7a30:	01049f03 	tsteq	r4, r3, lsl #30
    7a34:	03010c03 	movweq	r0, #7171	; 0x1c03
    7a38:	77032009 	strvc	r2, [r3, -r9]
    7a3c:	33312120 	teqcc	r1, #32, 2
    7a40:	31303027 	teqcc	r0, r7, lsr #32
    7a44:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    7a48:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    7a4c:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    7a50:	03207603 			; <UNDEFINED> instruction: 0x03207603
    7a54:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    7a58:	00010100 	andeq	r0, r1, r0, lsl #2
    7a5c:	38000205 	stmdacc	r0, {r0, r2, r9}
    7a60:	e5030000 	str	r0, [r3, #-0]
    7a64:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    7a68:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    7a6c:	00050233 	andeq	r0, r5, r3, lsr r2
    7a70:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7a74:	00000002 	andeq	r0, r0, r2
    7a78:	05810300 	streq	r0, [r1, #768]	; 0x300
    7a7c:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    7a80:	01010006 	tsteq	r1, r6
    7a84:	18020500 	stmdane	r2, {r8, sl}
    7a88:	03000038 	movweq	r0, #56	; 0x38
    7a8c:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    7a90:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    7a94:	01010006 	tsteq	r1, r6
    7a98:	28020500 	stmdacs	r2, {r8, sl}
    7a9c:	03000038 	movweq	r0, #56	; 0x38
    7aa0:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    7aa4:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    7aa8:	01010008 	tsteq	r1, r8
    7aac:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    7ab0:	03000038 	movweq	r0, #56	; 0x38
    7ab4:	030105db 	movweq	r0, #5595	; 0x15db
    7ab8:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    7abc:	20770320 	rsbscs	r0, r7, r0, lsr #6
    7ac0:	03200903 			; <UNDEFINED> instruction: 0x03200903
    7ac4:	2a352079 	bcs	d4fcb0 <__ccfg+0xd2fd08>
    7ac8:	30312232 	eorscc	r2, r1, r2, lsr r2
    7acc:	30274732 	eorcc	r4, r7, r2, lsr r7
    7ad0:	17034732 	smladxne	r3, r2, r7, r4
    7ad4:	3a36372e 	bcc	d95794 <__ccfg+0xd757ec>
    7ad8:	00080227 	andeq	r0, r8, r7, lsr #4
    7adc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7ae0:	0038a002 	eorseq	sl, r8, r2
    7ae4:	06a90300 	strteq	r0, [r9], r0, lsl #6
    7ae8:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    7aec:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    7af0:	01010003 	tsteq	r1, r3
    7af4:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    7af8:	03000038 	movweq	r0, #56	; 0x38
    7afc:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    7b00:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    7b04:	00030220 	andeq	r0, r3, r0, lsr #4
    7b08:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b0c:	0038c802 	eorseq	ip, r8, r2, lsl #16
    7b10:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    7b14:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    7b18:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    7b1c:	01010003 	tsteq	r1, r3
    7b20:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    7b24:	03000038 	movweq	r0, #56	; 0x38
    7b28:	160106e2 	strne	r0, [r1], -r2, ror #13
    7b2c:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    7b30:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    7b34:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    7b38:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    7b3c:	01010003 	tsteq	r1, r3
    7b40:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    7b44:	03000039 	movweq	r0, #57	; 0x39
    7b48:	16010782 	strne	r0, [r1], -r2, lsl #15
    7b4c:	00060233 	andeq	r0, r6, r3, lsr r2
    7b50:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b54:	00391402 	eorseq	r1, r9, r2, lsl #8
    7b58:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    7b5c:	43211601 			; <UNDEFINED> instruction: 0x43211601
    7b60:	03333429 	teqeq	r3, #687865856	; 0x29000000
    7b64:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    7b68:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    7b6c:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    7b70:	00010100 	andeq	r0, r1, r0, lsl #2
    7b74:	39400205 	stmdbcc	r0, {r0, r2, r9}^
    7b78:	b4030000 	strlt	r0, [r3], #-0
    7b7c:	21150107 	tstcs	r5, r7, lsl #2
    7b80:	20090355 	andcs	r0, r9, r5, asr r3
    7b84:	01000302 	tsteq	r0, r2, lsl #6
    7b88:	02050001 	andeq	r0, r5, #1
    7b8c:	00003954 	andeq	r3, r0, r4, asr r9
    7b90:	0107c803 	tsteq	r7, r3, lsl #16
    7b94:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    7b98:	0302200a 	movweq	r2, #8202	; 0x200a
    7b9c:	00010100 	andeq	r0, r1, r0, lsl #2
    7ba0:	39680205 	stmdbcc	r8!, {r0, r2, r9}^
    7ba4:	a7030000 	strge	r0, [r3, -r0]
    7ba8:	03200102 			; <UNDEFINED> instruction: 0x03200102
    7bac:	1f3d2009 	svcne	0x003d2009
    7bb0:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    7bb4:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    7bb8:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    7bbc:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    7bc0:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    7bc4:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    7bc8:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    7bcc:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    7bd0:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    7bd4:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    7bd8:	033d3c09 	teqeq	sp, #2304	; 0x900
    7bdc:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    7be0:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    7be4:	40211f3d 	eormi	r1, r1, sp, lsr pc
    7be8:	0012024b 	andseq	r0, r2, fp, asr #4
    7bec:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7bf0:	003a7802 	eorseq	r7, sl, r2, lsl #16
    7bf4:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    7bf8:	04020001 	streq	r0, [r2], #-1
    7bfc:	200e0301 	andcs	r0, lr, r1, lsl #6
    7c00:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    7c04:	4b684d1d 	blmi	1a1b080 <__ccfg+0x19fb0d8>
    7c08:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    7c0c:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    7c10:	315b3d01 	cmpcc	fp, r1, lsl #26
    7c14:	01000b02 	tsteq	r0, r2, lsl #22
    7c18:	02050001 	andeq	r0, r5, #1
    7c1c:	00003adc 	ldrdeq	r3, [r0], -ip
    7c20:	01089303 	tsteq	r8, r3, lsl #6
    7c24:	2f010903 	svccs	0x00010903
    7c28:	0022212d 	eoreq	r2, r2, sp, lsr #2
    7c2c:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7c30:	0007024b 	andeq	r0, r7, fp, asr #4
    7c34:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7c38:	003b0402 	eorseq	r0, fp, r2, lsl #8
    7c3c:	039b0300 	orrseq	r0, fp, #0, 6
    7c40:	01090301 	tsteq	r9, r1, lsl #6
    7c44:	203c7703 	eorscs	r7, ip, r3, lsl #14
    7c48:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    7c4c:	0a033130 	beq	d4114 <__ccfg+0xb416c>
    7c50:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    7c54:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 7b3c <__exidx_end+0x2c10>
    7c58:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    7c5c:	5226501c 	eorpl	r5, r6, #28
    7c60:	2f4d4f3d 	svccs	0x004d4f3d
    7c64:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    7c68:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    7c6c:	5b4b0104 	blpl	12c8084 <__ccfg+0x12a80dc>
    7c70:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    7c74:	4a09033f 	bmi	248978 <__ccfg+0x2289d0>
    7c78:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    7c7c:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    7c80:	4a7db903 	bmi	1f76094 <__ccfg+0x1f560ec>
    7c84:	01001f02 	tsteq	r0, r2, lsl #30
    7c88:	00036501 	andeq	r6, r3, r1, lsl #10
    7c8c:	a8000200 	stmdage	r0, {r9}
    7c90:	02000001 	andeq	r0, r0, #1
    7c94:	0d0efb01 	vstreq	d15, [lr, #-4]
    7c98:	01010100 	mrseq	r0, (UNDEF: 17)
    7c9c:	00000001 	andeq	r0, r0, r1
    7ca0:	01000001 	tsteq	r0, r1
    7ca4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7ca8:	2f2e2e2f 	svccs	0x002e2e2f
    7cac:	642f2e2e 	strtvs	r2, [pc], #-3630	; 7cb4 <__exidx_end+0x2d88>
    7cb0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    7cb4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    7cb8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7cbc:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7cc0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7cc4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7cc8:	31303030 	teqcc	r0, r0, lsr r0
    7ccc:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7cd0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7cd4:	61746562 	cmnvs	r4, r2, ror #10
    7cd8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7cdc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7ce0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7b18 <__exidx_end+0x2bec>
    7ce4:	6f635c73 	svcvs	0x00635c73
    7ce8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7cec:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7cf0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7cf4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7cf8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7cfc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7d00:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7d04:	3130322d 	teqcc	r0, sp, lsr #4
    7d08:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7d0c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7d10:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7d14:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7d18:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7d1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7d20:	616d5c65 	cmnvs	sp, r5, ror #24
    7d24:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    7d28:	3a630065 	bcc	18c7ec4 <__ccfg+0x18a7f1c>
    7d2c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    7d30:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    7d34:	302e322e 	eorcc	r3, lr, lr, lsr #4
    7d38:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7d3c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7d40:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7d44:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    7d48:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7d4c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7d50:	6f6f745c 	svcvs	0x006f745c
    7d54:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7d58:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7d5c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7d60:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7d64:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7d68:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7d6c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7d70:	5f342d69 	svcpl	0x00342d69
    7d74:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7d78:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7d7c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7d80:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7d84:	61652d65 	cmnvs	r5, r5, ror #26
    7d88:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7d8c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7d90:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    7d94:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    7d98:	2f2e2e2f 	svccs	0x002e2e2f
    7d9c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7da0:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    7da4:	73000063 	movwvc	r0, #99	; 0x63
    7da8:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    7dac:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    7db0:	00010063 	andeq	r0, r1, r3, rrx
    7db4:	6e6f6100 	powvse	f6, f7, f0
    7db8:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    7dbc:	0100682e 	tsteq	r0, lr, lsr #16
    7dc0:	736f0000 	cmnvc	pc, #0
    7dc4:	00682e63 	rsbeq	r2, r8, r3, ror #28
    7dc8:	70000001 	andvc	r0, r0, r1
    7dcc:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    7dd0:	00010068 	andeq	r0, r1, r8, rrx
    7dd4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    7dd8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    7ddc:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7de0:	00000100 	andeq	r0, r0, r0, lsl #2
    7de4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    7de8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    7dec:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    7df0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    7df4:	00000200 	andeq	r0, r0, r0, lsl #4
    7df8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    7dfc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    7e00:	00030068 	andeq	r0, r3, r8, rrx
    7e04:	5f776800 	svcpl	0x00776800
    7e08:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7e0c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    7e10:	72000004 	andvc	r0, r0, #4
    7e14:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    7e18:	00000100 	andeq	r0, r0, r0, lsl #2
    7e1c:	5f737973 	svcpl	0x00737973
    7e20:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    7e24:	0100682e 	tsteq	r0, lr, lsr #16
    7e28:	6f610000 	svcvs	0x00610000
    7e2c:	61625f6e 	cmnvs	r2, lr, ror #30
    7e30:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    7e34:	0100682e 	tsteq	r0, lr, lsr #16
    7e38:	00000000 	andeq	r0, r0, r0
    7e3c:	00000205 	andeq	r0, r0, r5, lsl #4
    7e40:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    7e44:	02040100 	andeq	r0, r4, #0, 2
    7e48:	0102e903 	tsteq	r2, r3, lsl #18
    7e4c:	97030104 	strls	r0, [r3, -r4, lsl #2]
    7e50:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    7e54:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    7e58:	01040200 	mrseq	r0, R12_usr
    7e5c:	2000ce03 	andcs	ip, r0, r3, lsl #28
    7e60:	02000104 	andeq	r0, r0, #4, 2
    7e64:	d1030104 	tstle	r3, r4, lsl #2
    7e68:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    7e6c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7e70:	4b896701 	blmi	fe261a7c <_estack+0xde25ca7c>
    7e74:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    7e78:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    7e7c:	03010458 	movweq	r0, #5208	; 0x1458
    7e80:	004a7ee4 	subeq	r7, sl, r4, ror #29
    7e84:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    7e88:	81030404 	tsthi	r3, r4, lsl #8
    7e8c:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    7e90:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    7e94:	0001043c 	andeq	r0, r1, ip, lsr r4
    7e98:	03010402 	movweq	r0, #5122	; 0x1402
    7e9c:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    7ea0:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    7ea4:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    7ea8:	00204203 	eoreq	r4, r0, r3, lsl #4
    7eac:	03010402 	movweq	r0, #5122	; 0x1402
    7eb0:	01042e14 	tsteq	r4, r4, lsl lr
    7eb4:	01040200 	mrseq	r0, R12_usr
    7eb8:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    7ebc:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    7ec0:	4b83281b 	blmi	fe0d1f34 <_estack+0xde0ccf34>
    7ec4:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    7ec8:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    7ecc:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    7ed0:	3c140301 	ldccc	3, cr0, [r4], {1}
    7ed4:	02000104 	andeq	r0, r0, #4, 2
    7ed8:	8d030104 	stfhis	f0, [r3, #-16]
    7edc:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    7ee0:	01010017 	tsteq	r1, r7, lsl r0
    7ee4:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    7ee8:	0300003c 	movweq	r0, #60	; 0x3c
    7eec:	030101da 	movweq	r0, #4570	; 0x11da
    7ef0:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    7ef4:	201d0320 	andscs	r0, sp, r0, lsr #6
    7ef8:	32412f59 	subcc	r2, r1, #356	; 0x164
    7efc:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    7f00:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    7f04:	0305041b 	movweq	r0, #21531	; 0x541b
    7f08:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    7f0c:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    7f10:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    7f14:	50030504 	andpl	r0, r3, r4, lsl #10
    7f18:	01042120 	tsteq	r4, r0, lsr #2
    7f1c:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    7f20:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    7f24:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    7f28:	03050420 	movweq	r0, #21536	; 0x5420
    7f2c:	0104204d 	tsteq	r4, sp, asr #32
    7f30:	2f2e3403 	svccs	0x002e3403
    7f34:	2f692365 	svccs	0x00692365
    7f38:	213e214d 	teqcs	lr, sp, asr #2
    7f3c:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    7f40:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    7f44:	ca4a0f03 	bgt	128bb58 <__ccfg+0x126bbb0>
    7f48:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    7f4c:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    7f50:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    7f54:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    7f58:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    7f5c:	31312026 	teqcc	r1, r6, lsr #32
    7f60:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    7f64:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    7f68:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    7f6c:	03200903 			; <UNDEFINED> instruction: 0x03200903
    7f70:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    7f74:	7103213c 	tstvc	r3, ip, lsr r1
    7f78:	3c0f0320 	stccc	3, cr0, [pc], {32}
    7f7c:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    7f80:	23212265 			; <UNDEFINED> instruction: 0x23212265
    7f84:	20780328 	rsbscs	r0, r8, r8, lsr #6
    7f88:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    7f8c:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    7f90:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    7f94:	01010021 	tsteq	r1, r1, lsr #32
    7f98:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    7f9c:	0300003e 	movweq	r0, #62	; 0x3e
    7fa0:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    7fa4:	a22f2240 	eorge	r2, pc, #64, 4
    7fa8:	2a404e24 	bcs	101b840 <__ccfg+0xffb898>
    7fac:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    7fb0:	00010100 	andeq	r0, r1, r0, lsl #2
    7fb4:	00000205 	andeq	r0, r0, r5, lsl #4
    7fb8:	e5030000 	str	r0, [r3, #-0]
    7fbc:	0c030103 	stfeqs	f0, [r3], {3}
    7fc0:	30282f20 	eorcc	r2, r8, r0, lsr #30
    7fc4:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    7fc8:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    7fcc:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    7fd0:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    7fd4:	1e224b2f 	vmulne.f64	d4, d2, d31
    7fd8:	000c023e 	andeq	r0, ip, lr, lsr r2
    7fdc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7fe0:	003ed402 	eorseq	sp, lr, r2, lsl #8
    7fe4:	04a60300 	strteq	r0, [r6], #768	; 0x300
    7fe8:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    7fec:	00040226 	andeq	r0, r4, r6, lsr #4
    7ff0:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    7ff4:	00020000 	andeq	r0, r2, r0
    7ff8:	00000143 	andeq	r0, r0, r3, asr #2
    7ffc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8000:	0101000d 	tsteq	r1, sp
    8004:	00000101 	andeq	r0, r0, r1, lsl #2
    8008:	00000100 	andeq	r0, r0, r0, lsl #2
    800c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    8010:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8014:	2f2e2e2f 	svccs	0x002e2e2f
    8018:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    801c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    8020:	3a630062 	bcc	18c81b0 <__ccfg+0x18a8208>
    8024:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    8028:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    802c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    8030:	3030302e 	eorscc	r3, r0, lr, lsr #32
    8034:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    8038:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    803c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    8040:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    8044:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    8048:	6f6f745c 	svcvs	0x006f745c
    804c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    8050:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    8054:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    8058:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    805c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8060:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8064:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8068:	5f342d69 	svcpl	0x00342d69
    806c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8070:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8074:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8078:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    807c:	61652d65 	cmnvs	r5, r5, ror #26
    8080:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8084:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8088:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    808c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8090:	6300656e 	movwvs	r6, #1390	; 0x56e
    8094:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8098:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    809c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    80a0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    80a4:	5f393130 	svcpl	0x00393130
    80a8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    80ac:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    80b0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    80b4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    80b8:	6f745c36 	svcvs	0x00745c36
    80bc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    80c0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    80c4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    80c8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    80cc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    80d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    80d4:	61652d65 	cmnvs	r5, r5, ror #26
    80d8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    80dc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    80e0:	71353130 	teqvc	r5, r0, lsr r1
    80e4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    80e8:	6f6e2d6d 	svcvs	0x006e2d6d
    80ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    80f0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    80f4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    80f8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    80fc:	00737973 	rsbseq	r7, r3, r3, ror r9
    8100:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8104:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    8108:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    810c:	63000001 	movwvs	r0, #1
    8110:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    8114:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    8118:	00010068 	andeq	r0, r1, r8, rrx
    811c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8120:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8124:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8128:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    812c:	00020068 	andeq	r0, r2, r8, rrx
    8130:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    8134:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    8138:	0300682e 	movweq	r6, #2094	; 0x82e
    813c:	00000000 	andeq	r0, r0, r0
    8140:	00000205 	andeq	r0, r0, r5, lsl #4
    8144:	c4030000 	strgt	r0, [r3], #-0
    8148:	2f130100 	svccs	0x00130100
    814c:	01000602 	tsteq	r0, r2, lsl #12
    8150:	02050001 	andeq	r0, r5, #1
    8154:	00000000 	andeq	r0, r0, r0
    8158:	0100d003 	tsteq	r0, r3
    815c:	0a032f14 	beq	d3db4 <__ccfg+0xb3e0c>
    8160:	0008022e 	andeq	r0, r8, lr, lsr #4
    8164:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8168:	003eec02 	eorseq	lr, lr, r2, lsl #24
    816c:	00e60300 	rsceq	r0, r6, r0, lsl #6
    8170:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    8174:	9b030204 	blls	c898c <__ccfg+0xa89e4>
    8178:	01042e01 	tsteq	r4, r1, lsl #28
    817c:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    8180:	4b4b4c23 	blmi	12db214 <__ccfg+0x12bb26c>
    8184:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    8188:	01010005 	tsteq	r1, r5
    818c:	00020500 	andeq	r0, r2, r0, lsl #10
    8190:	03000000 	movweq	r0, #0
    8194:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    8198:	01b00302 	lslseq	r0, r2, #6
    819c:	03010420 	movweq	r0, #5152	; 0x1420
    81a0:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    81a4:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    81a8:	4a0a033c 	bmi	288ea0 <__ccfg+0x268ef8>
    81ac:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    81b0:	01000502 	tsteq	r0, r2, lsl #10
    81b4:	02050001 	andeq	r0, r5, #1
    81b8:	00003f38 	andeq	r3, r0, r8, lsr pc
    81bc:	0101a603 	tsteq	r1, r3, lsl #12
    81c0:	e3030204 	movw	r0, #12804	; 0x3204
    81c4:	11032000 	mrsne	r2, (UNDEF: 3)
    81c8:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 8118 <__exidx_end+0x31ec>
    81cc:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    81d0:	8c030104 	stfhis	f0, [r3], {4}
    81d4:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    81d8:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    81dc:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    81e0:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    81e4:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    81e8:	30032064 	andcc	r2, r3, r4, rrx
    81ec:	00040220 	andeq	r0, r4, r0, lsr #4
    81f0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    81f4:	003fa402 	eorseq	sl, pc, r2, lsl #8
    81f8:	01e00300 	mvneq	r0, r0, lsl #6
    81fc:	03020401 	movweq	r0, #9217	; 0x2401
    8200:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    8204:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    8208:	0302042e 	movweq	r0, #9262	; 0x242e
    820c:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    8210:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    8214:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    8218:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    821c:	01000202 	tsteq	r0, r2, lsl #4
    8220:	00021e01 	andeq	r1, r2, r1, lsl #28
    8224:	42000200 	andmi	r0, r0, #0, 4
    8228:	02000001 	andeq	r0, r0, #1
    822c:	0d0efb01 	vstreq	d15, [lr, #-4]
    8230:	01010100 	mrseq	r0, (UNDEF: 17)
    8234:	00000001 	andeq	r0, r0, r1
    8238:	01000001 	tsteq	r0, r1
    823c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8240:	2f2e2e2f 	svccs	0x002e2e2f
    8244:	642f2e2e 	strtvs	r2, [pc], #-3630	; 824c <__exidx_end+0x3320>
    8248:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    824c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    8250:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8254:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    8258:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    825c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    8260:	31303030 	teqcc	r0, r0, lsr r0
    8264:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    8268:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    826c:	61746562 	cmnvs	r4, r2, ror #10
    8270:	63635c32 	cmnvs	r3, #12800	; 0x3200
    8274:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    8278:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 80b0 <__exidx_end+0x3184>
    827c:	6f635c73 	svcvs	0x00635c73
    8280:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    8284:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    8288:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    828c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8290:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8294:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8298:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    829c:	3130322d 	teqcc	r0, sp, lsr #4
    82a0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    82a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    82a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    82ac:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    82b0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    82b4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    82b8:	616d5c65 	cmnvs	sp, r5, ror #24
    82bc:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    82c0:	3a630065 	bcc	18c845c <__ccfg+0x18a84b4>
    82c4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    82c8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    82cc:	302e322e 	eorcc	r3, lr, lr, lsr #4
    82d0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    82d4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    82d8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    82dc:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    82e0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    82e4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    82e8:	6f6f745c 	svcvs	0x006f745c
    82ec:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    82f0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    82f4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    82f8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    82fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8300:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8304:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8308:	5f342d69 	svcpl	0x00342d69
    830c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    8310:	33713531 	cmncc	r1, #205520896	; 0xc400000
    8314:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    8318:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    831c:	61652d65 	cmnvs	r5, r5, ror #26
    8320:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    8324:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8328:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    832c:	00007379 	andeq	r7, r0, r9, ror r3
    8330:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    8334:	00010068 	andeq	r0, r1, r8, rrx
    8338:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    833c:	0100632e 	tsteq	r0, lr, lsr #6
    8340:	645f0000 	ldrbvs	r0, [pc], #-0	; 8348 <__exidx_end+0x341c>
    8344:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8348:	745f746c 	ldrbvc	r7, [pc], #-1132	; 8350 <__exidx_end+0x3424>
    834c:	73657079 	cmnvc	r5, #121	; 0x79
    8350:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8354:	735f0000 	cmpvc	pc, #0
    8358:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    835c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8360:	63000003 	movwvs	r0, #3
    8364:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    8368:	00000100 	andeq	r0, r0, r0, lsl #2
    836c:	02050000 	andeq	r0, r5, #0
    8370:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
    8374:	01018803 	tsteq	r1, r3, lsl #16
    8378:	50303120 	eorspl	r3, r0, r0, lsr #2
    837c:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    8380:	0005022c 	andeq	r0, r5, ip, lsr #4
    8384:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    8388:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    838c:	0300003f 	movweq	r0, #63	; 0x3f
    8390:	030100c3 	movweq	r0, #4291	; 0x10c3
    8394:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    8398:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    839c:	02050002 	andeq	r0, r5, #2
    83a0:	00000000 	andeq	r0, r0, r0
    83a4:	0100d803 	tsteq	r0, r3, lsl #16
    83a8:	33010e03 	movwcc	r0, #7683	; 0x1e03
    83ac:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    83b0:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    83b4:	01010004 	tsteq	r1, r4
    83b8:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    83bc:	00000002 	andeq	r0, r0, r2
    83c0:	01850300 	orreq	r0, r5, r0, lsl #6
    83c4:	20110301 	andscs	r0, r1, r1, lsl #6
    83c8:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    83cc:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    83d0:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    83d4:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    83d8:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    83dc:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    83e0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    83e4:	02050002 	andeq	r0, r5, #2
    83e8:	00000000 	andeq	r0, r0, r0
    83ec:	0101af03 	tsteq	r1, r3, lsl #30
    83f0:	1b201103 	blne	80c804 <__ccfg+0x7ec85c>
    83f4:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    83f8:	042f2013 	strteq	r2, [pc], #-19	; 8400 <__exidx_end+0x34d4>
    83fc:	20690301 	rsbcs	r0, r9, r1, lsl #6
    8400:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8404:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8408:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    840c:	01000502 	tsteq	r0, r2, lsl #10
    8410:	00020401 	andeq	r0, r2, r1, lsl #8
    8414:	00000205 	andeq	r0, r0, r5, lsl #4
    8418:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    841c:	11030101 	tstne	r3, r1, lsl #2
    8420:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    8424:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    8428:	0104302d 	tsteq	r4, sp, lsr #32
    842c:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    8430:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    8434:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    8438:	00c80302 	sbceq	r0, r8, r2, lsl #6
    843c:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    8440:	43010100 	movwmi	r0, #4352	; 0x1100
    8444:	03000002 	movweq	r0, #2
    8448:	00019500 	andeq	r9, r1, r0, lsl #10
    844c:	fb010200 	blx	48c56 <__ccfg+0x28cae>
    8450:	01000d0e 	tsteq	r0, lr, lsl #26
    8454:	00010101 	andeq	r0, r1, r1, lsl #2
    8458:	00010000 	andeq	r0, r1, r0
    845c:	2e2e0100 	sufcse	f0, f6, f0
    8460:	2f2e2e2f 	svccs	0x002e2e2f
    8464:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8468:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    846c:	2f2e2e2f 	svccs	0x002e2e2f
    8470:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8474:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    8478:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    847c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8480:	616d2f63 	cmnvs	sp, r3, ror #30
    8484:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    8488:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    848c:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    8490:	2f2e2e2f 	svccs	0x002e2e2f
    8494:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8498:	2f00676e 	svccs	0x0000676e
    849c:	2f727375 	svccs	0x00727375
    84a0:	2f62696c 	svccs	0x0062696c
    84a4:	2f636367 	svccs	0x00636367
    84a8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    84ac:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    84b0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    84b4:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    84b8:	2f312e33 	svccs	0x00312e33
    84bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    84c0:	00656475 	rsbeq	r6, r5, r5, ror r4
    84c4:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    84c8:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    84cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    84d0:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    84d4:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    84d8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    84dc:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    84e0:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    84e4:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    84e8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    84ec:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    84f0:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    84f4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    84f8:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    84fc:	622f0073 	eorvs	r0, pc, #115	; 0x73
    8500:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8504:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8508:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    850c:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8510:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8514:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8518:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    851c:	2f302e33 	svccs	0x00302e33
    8520:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8524:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8388 <__exidx_end+0x345c>
    8528:	2f636269 	svccs	0x00636269
    852c:	61636f6c 	cmnvs	r3, ip, ror #30
    8530:	2f00656c 	svccs	0x0000656c
    8534:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8538:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    853c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8540:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8544:	2f787945 	svccs	0x00787945
    8548:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    854c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8550:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8554:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8558:	2f62696c 	svccs	0x0062696c
    855c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8560:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8564:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8568:	656d0000 	strbvs	r0, [sp, #-0]!
    856c:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    8570:	0100632e 	tsteq	r0, lr, lsr #6
    8574:	74730000 	ldrbtvc	r0, [r3], #-0
    8578:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    857c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8580:	745f0000 	ldrbvc	r0, [pc], #-0	; 8588 <__exidx_end+0x365c>
    8584:	73657079 	cmnvc	r5, #121	; 0x79
    8588:	0300682e 	movweq	r6, #2094	; 0x82e
    858c:	65720000 	ldrbvs	r0, [r2, #-0]!
    8590:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    8594:	00030068 	andeq	r0, r3, r8, rrx
    8598:	636f6c00 	cmnvs	pc, #0, 24
    859c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    85a0:	73000003 	movwvc	r0, #3
    85a4:	6f6c7465 	svcvs	0x006c7465
    85a8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    85ac:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    85b0:	74730000 	ldrbtvc	r0, [r3], #-0
    85b4:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    85b8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    85bc:	63770000 	cmnvs	r7, #0
    85c0:	2e726168 	rpwcssz	f6, f2, #0.0
    85c4:	00050068 	andeq	r0, r5, r8, rrx
    85c8:	636f6c00 	cmnvs	pc, #0, 24
    85cc:	2e656c61 	cdpcs	12, 6, cr6, cr5, cr1, {3}
    85d0:	00050068 	andeq	r0, r5, r8, rrx
    85d4:	72747300 	rsbsvc	r7, r4, #0, 6
    85d8:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    85dc:	00050068 	andeq	r0, r5, r8, rrx
    85e0:	01050000 	mrseq	r0, (UNDEF: 5)
    85e4:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    85e8:	0300003f 	movweq	r0, #63	; 0x3f
    85ec:	03050133 	movweq	r0, #20787	; 0x5133
    85f0:	13010e03 	movwne	r0, #7683	; 0x1e03
    85f4:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    85f8:	6b030601 	blvs	c9e04 <__ccfg+0xa9e5c>
    85fc:	03060501 	movweq	r0, #25857	; 0x6501
    8600:	1c053c15 	stcne	12, cr3, [r5], {21}
    8604:	01040200 	mrseq	r0, R12_usr
    8608:	0018052e 	andseq	r0, r8, lr, lsr #10
    860c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    8610:	01040200 	mrseq	r0, R12_usr
    8614:	060b059e 			; <UNDEFINED> instruction: 0x060b059e
    8618:	061a0528 	ldreq	r0, [sl], -r8, lsr #10
    861c:	05393013 	ldreq	r3, [r9, #-19]!	; 0xffffffed
    8620:	132f060b 			; <UNDEFINED> instruction: 0x132f060b
    8624:	01061a05 	tsteq	r6, r5, lsl #20
    8628:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
    862c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    8630:	207a030d 	rsbscs	r0, sl, sp, lsl #6
    8634:	204a0a03 	subcs	r0, sl, r3, lsl #20
    8638:	0520203c 	streq	r2, [r0, #-60]!	; 0xffffffc4
    863c:	0530060b 	ldreq	r0, [r0, #-1547]!	; 0xfffff9f5
    8640:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    8644:	062f060b 	strteq	r0, [pc], -fp, lsl #12
    8648:	1d0d0501 	cfstr32ne	mvfx0, [sp, #-4]
    864c:	05204a58 	streq	r4, [r0, #-2648]!	; 0xfffff5a8
    8650:	200b030e 	andcs	r0, fp, lr, lsl #6
    8654:	03200905 			; <UNDEFINED> instruction: 0x03200905
    8658:	052e2e5e 	streq	r2, [lr, #-3678]!	; 0xfffff1a2
    865c:	23030605 	movwcs	r0, #13829	; 0x3605
    8660:	060c0520 	streq	r0, [ip], -r0, lsr #10
    8664:	3b090501 	blcc	249a70 <__ccfg+0x229ac8>
    8668:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
    866c:	58590309 	ldmdapl	r9, {r0, r3, r8, r9}^
    8670:	22030e05 	andcs	r0, r3, #5, 28	; 0x50
    8674:	20090520 	andcs	r0, r9, r0, lsr #10
    8678:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
    867c:	205e0309 	subscs	r0, lr, r9, lsl #6
    8680:	17030d05 	strne	r0, [r3, -r5, lsl #26]
    8684:	0002022e 	andeq	r0, r2, lr, lsr #4
    8688:	01710101 	cmneq	r1, r1, lsl #2
    868c:	00030000 	andeq	r0, r3, r0
    8690:	00000117 	andeq	r0, r0, r7, lsl r1
    8694:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    8698:	0101000d 	tsteq	r1, sp
    869c:	00000101 	andeq	r0, r0, r1, lsl #2
    86a0:	00000100 	andeq	r0, r0, r0, lsl #2
    86a4:	2f2e2e01 	svccs	0x002e2e01
    86a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    86ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    86b0:	2f2e2e2f 	svccs	0x002e2e2f
    86b4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    86b8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    86bc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    86c0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    86c4:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    86c8:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    86cc:	73752f00 	cmnvc	r5, #0, 30
    86d0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    86d4:	63672f62 	cmnvs	r7, #392	; 0x188
    86d8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    86dc:	6f6e2d6d 	svcvs	0x006e2d6d
    86e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    86e4:	2f696261 	svccs	0x00696261
    86e8:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    86ec:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    86f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    86f4:	622f0065 	eorvs	r0, pc, #101	; 0x65
    86f8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    86fc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8700:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8704:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8708:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    870c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8710:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8714:	2f302e33 	svccs	0x00302e33
    8718:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    871c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8580 <__exidx_end+0x3654>
    8720:	2f636269 	svccs	0x00636269
    8724:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8728:	2f656475 	svccs	0x00656475
    872c:	00737973 	rsbseq	r7, r3, r3, ror r9
    8730:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8734:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8738:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    873c:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8740:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8744:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8748:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    874c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8750:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8754:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8758:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    875c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8760:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8764:	72000065 	andvc	r0, r0, #101	; 0x65
    8768:	2e646e61 	cdpcs	14, 6, cr6, cr4, cr1, {3}
    876c:	00010063 	andeq	r0, r1, r3, rrx
    8770:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    8774:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    8778:	00020068 	andeq	r0, r2, r8, rrx
    877c:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    8780:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8784:	00030068 	andeq	r0, r3, r8, rrx
    8788:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    878c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8790:	00000300 	andeq	r0, r0, r0, lsl #6
    8794:	6b636f6c 	blvs	18e454c <__ccfg+0x18c45a4>
    8798:	0300682e 	movweq	r6, #2094	; 0x82e
    879c:	74730000 	ldrbtvc	r0, [r3], #-0
    87a0:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    87a4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    87a8:	05000000 	streq	r0, [r0, #-0]
    87ac:	02050001 	andeq	r0, r5, #1
    87b0:	00004098 	muleq	r0, r8, r0
    87b4:	05013e03 	streq	r3, [r1, #-3587]	; 0xfffff1fd
    87b8:	1d051303 	stcne	3, cr1, [r5, #-12]
    87bc:	13030514 	movwne	r0, #13588	; 0x3514
    87c0:	01061b05 	tsteq	r6, r5, lsl #22
    87c4:	0520202e 	streq	r2, [r0, #-46]!	; 0xffffffd2
    87c8:	4e062f01 	cdpmi	15, 0, cr2, cr6, cr1, {0}
    87cc:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    87d0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    87d4:	12051f01 	andne	r1, r5, #1, 30
    87d8:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    87dc:	13030525 	movwne	r0, #13605	; 0x3525
    87e0:	13060605 	movwne	r0, #26117	; 0x6605
    87e4:	4a201e05 	bmi	810000 <__ccfg+0x7f0058>
    87e8:	052e4405 	streq	r4, [lr, #-1029]!	; 0xfffffbfb
    87ec:	0305491b 	movweq	r4, #22811	; 0x591b
    87f0:	0a053006 	beq	154810 <__ccfg+0x134868>
    87f4:	01050106 	tsteq	r5, r6, lsl #2
    87f8:	0a02012f 	beq	88cbc <__ccfg+0x68d14>
    87fc:	c5010100 	strgt	r0, [r1, #-256]	; 0xffffff00
    8800:	03000001 	movweq	r0, #1
    8804:	00017e00 	andeq	r7, r1, r0, lsl #28
    8808:	fb010200 	blx	49012 <__ccfg+0x2906a>
    880c:	01000d0e 	tsteq	r0, lr, lsl #26
    8810:	00010101 	andeq	r0, r1, r1, lsl #2
    8814:	00010000 	andeq	r0, r1, r0
    8818:	2e2e0100 	sufcse	f0, f6, f0
    881c:	2f2e2e2f 	svccs	0x002e2e2f
    8820:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8824:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8828:	2f2e2e2f 	svccs	0x002e2e2f
    882c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    8830:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8834:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8838:	742f6362 	strtvc	r6, [pc], #-866	; 8840 <__exidx_end+0x3914>
    883c:	00656d69 	rsbeq	r6, r5, r9, ror #26
    8840:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8844:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8848:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    884c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8850:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8854:	61652d65 	cmnvs	r5, r5, ror #26
    8858:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    885c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8860:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8864:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8868:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    886c:	2f646c69 	svccs	0x00646c69
    8870:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8874:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8878:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    887c:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8880:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8884:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8888:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    888c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8890:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8894:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8898:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    889c:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 8714 <__exidx_end+0x37e8>
    88a0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    88a4:	2f00656e 	svccs	0x0000656e
    88a8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    88ac:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    88b0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    88b4:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    88b8:	2f787945 	svccs	0x00787945
    88bc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    88c0:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    88c4:	302e332e 	eorcc	r3, lr, lr, lsr #6
    88c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    88cc:	2f62696c 	svccs	0x0062696c
    88d0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    88d4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    88d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    88dc:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    88e0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    88e4:	2f646c69 	svccs	0x00646c69
    88e8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    88ec:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    88f0:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    88f4:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    88f8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    88fc:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8900:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8904:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8908:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    890c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8910:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8914:	00006564 	andeq	r6, r0, r4, ror #10
    8918:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    891c:	0100632e 	tsteq	r0, lr, lsr #6
    8920:	74730000 	ldrbtvc	r0, [r3], #-0
    8924:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    8928:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    892c:	645f0000 	ldrbvs	r0, [pc], #-0	; 8934 <__exidx_end+0x3a08>
    8930:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    8934:	745f746c 	ldrbvc	r7, [pc], #-1132	; 893c <__exidx_end+0x3a10>
    8938:	73657079 	cmnvc	r5, #121	; 0x79
    893c:	0300682e 	movweq	r6, #2094	; 0x82e
    8940:	745f0000 	ldrbvc	r0, [pc], #-0	; 8948 <__exidx_end+0x3a1c>
    8944:	73657079 	cmnvc	r5, #121	; 0x79
    8948:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    894c:	65720000 	ldrbvs	r0, [r2, #-0]!
    8950:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    8954:	00040068 	andeq	r0, r4, r8, rrx
    8958:	636f6c00 	cmnvs	pc, #0, 24
    895c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    8960:	5f000004 	svcpl	0x00000004
    8964:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    8968:	2e6c6176 	mcrcs	1, 3, r6, cr12, cr6, {3}
    896c:	00040068 	andeq	r0, r4, r8, rrx
    8970:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    8974:	00682e65 	rsbeq	r2, r8, r5, ror #28
    8978:	72000005 	andvc	r0, r0, #5
    897c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8980:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8984:	05000000 	streq	r0, [r0, #-0]
    8988:	02050001 	andeq	r0, r5, #1
    898c:	000040e4 	andeq	r4, r0, r4, ror #1
    8990:	05012403 	streq	r2, [r1, #-1027]	; 0xfffffbfd
    8994:	05141303 	ldreq	r1, [r4, #-771]	; 0xfffffcfd
    8998:	050f0601 	streq	r0, [pc, #-1537]	; 839f <__exidx_end+0x3473>
    899c:	01052307 	tsteq	r5, r7, lsl #6
    89a0:	0705201d 	smladeq	r5, sp, r0, r2
    89a4:	06052e23 	streq	r2, [r5], -r3, lsr #28
    89a8:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    89ac:	0606054d 	streq	r0, [r6], -sp, asr #10
    89b0:	06050501 	streq	r0, [r5], -r1, lsl #10
    89b4:	0608052f 	streq	r0, [r8], -pc, lsr #10
    89b8:	06030501 	streq	r0, [r3], -r1, lsl #10
    89bc:	0601052f 	streq	r0, [r1], -pc, lsr #10
    89c0:	023c2013 	eorseq	r2, ip, #19
    89c4:	01010007 	tsteq	r1, r7
    89c8:	000001ed 	andeq	r0, r0, sp, ror #3
    89cc:	01920003 	orrseq	r0, r2, r3
    89d0:	01020000 	mrseq	r0, (UNDEF: 2)
    89d4:	000d0efb 	strdeq	r0, [sp], -fp
    89d8:	01010101 	tsteq	r1, r1, lsl #2
    89dc:	01000000 	mrseq	r0, (UNDEF: 0)
    89e0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    89e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89e8:	2f2e2e2f 	svccs	0x002e2e2f
    89ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    89f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89f4:	2f2e2e2f 	svccs	0x002e2e2f
    89f8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    89fc:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8860 <__exidx_end+0x3934>
    8a00:	2f636269 	svccs	0x00636269
    8a04:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8a08:	752f0074 	strvc	r0, [pc, #-116]!	; 899c <__exidx_end+0x3a70>
    8a0c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8848 <__exidx_end+0x391c>
    8a10:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    8a14:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    8a18:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8a1c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8a20:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8a24:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    8a28:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    8a2c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8a30:	2f006564 	svccs	0x00006564
    8a34:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8a38:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8a3c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8a40:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8a44:	2f787945 	svccs	0x00787945
    8a48:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8a4c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8a50:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8a54:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8a58:	2f62696c 	svccs	0x0062696c
    8a5c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8a60:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8a64:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8a68:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    8a6c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    8a70:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8a74:	2f646c69 	svccs	0x00646c69
    8a78:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8a7c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8a80:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8a84:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8a88:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8a8c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8a90:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8a94:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8a98:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8a9c:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8aa0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8aa4:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    8aa8:	2f007379 	svccs	0x00007379
    8aac:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8ab0:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8ab4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ab8:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8abc:	2f787945 	svccs	0x00787945
    8ac0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8ac4:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8ac8:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8acc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ad0:	2f62696c 	svccs	0x0062696c
    8ad4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8ad8:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8adc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8ae0:	65670000 	strbvs	r0, [r7, #-0]!
    8ae4:	6d697474 	cfstrdvs	mvd7, [r9, #-464]!	; 0xfffffe30
    8ae8:	64666f65 	strbtvs	r6, [r6], #-3941	; 0xfffff09b
    8aec:	2e727961 	vsubcs.f16	s15, s4, s3	; <UNPREDICTABLE>
    8af0:	00010063 	andeq	r0, r1, r3, rrx
    8af4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    8af8:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    8afc:	00020068 	andeq	r0, r2, r8, rrx
    8b00:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    8b04:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    8b08:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    8b0c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8b10:	00030068 	andeq	r0, r3, r8, rrx
    8b14:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    8b18:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8b1c:	00040068 	andeq	r0, r4, r8, rrx
    8b20:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    8b24:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8b28:	00000400 	andeq	r0, r0, r0, lsl #8
    8b2c:	6b636f6c 	blvs	18e48e4 <__ccfg+0x18c493c>
    8b30:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    8b34:	745f0000 	ldrbvc	r0, [pc], #-0	; 8b3c <__exidx_end+0x3c10>
    8b38:	76656d69 	strbtvc	r6, [r5], -r9, ror #26
    8b3c:	682e6c61 	stmdavs	lr!, {r0, r5, r6, sl, fp, sp, lr}
    8b40:	00000400 	andeq	r0, r0, r0, lsl #8
    8b44:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    8b48:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    8b4c:	65720000 	ldrbvs	r0, [r2, #-0]!
    8b50:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    8b54:	00050068 	andeq	r0, r5, r8, rrx
    8b58:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    8b5c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    8b60:	00000004 	andeq	r0, r0, r4
    8b64:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    8b68:	00411c02 	subeq	r1, r1, r2, lsl #24
    8b6c:	01390300 	teqeq	r9, r0, lsl #6
    8b70:	14130305 	ldrne	r0, [r3], #-773	; 0xfffffcfb
    8b74:	01060905 	tsteq	r6, r5, lsl #18
    8b78:	051d0105 	ldreq	r0, [sp, #-261]	; 0xfffffefb
    8b7c:	01052309 	tsteq	r5, r9, lsl #6
    8b80:	320e051d 	andcc	r0, lr, #121634816	; 0x7400000
    8b84:	051f0905 	ldreq	r0, [pc, #-2309]	; 8287 <__exidx_end+0x335b>
    8b88:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    8b8c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    8b90:	01052e06 	tsteq	r5, r6, lsl #28
    8b94:	42050131 	andmi	r0, r5, #1073741836	; 0x4000000c
    8b98:	01040200 	mrseq	r0, R12_usr
    8b9c:	00390539 	eorseq	r0, r9, r9, lsr r5
    8ba0:	20010402 	andcs	r0, r1, r2, lsl #8
    8ba4:	2f060505 	svccs	0x00060505
    8ba8:	01061105 	tsteq	r6, r5, lsl #2
    8bac:	21060305 	tstcs	r6, r5, lsl #6
    8bb0:	01060a05 	tsteq	r6, r5, lsl #20
    8bb4:	01000402 	tsteq	r0, r2, lsl #8
    8bb8:	0000dc01 	andeq	sp, r0, r1, lsl #24
    8bbc:	d6000300 	strle	r0, [r0], -r0, lsl #6
    8bc0:	02000000 	andeq	r0, r0, #0
    8bc4:	0d0efb01 	vstreq	d15, [lr, #-4]
    8bc8:	01010100 	mrseq	r0, (UNDEF: 17)
    8bcc:	00000001 	andeq	r0, r0, r1
    8bd0:	01000001 	tsteq	r0, r1
    8bd4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8bd8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8bdc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8be0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8be4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8be8:	61652d65 	cmnvs	r5, r5, ror #26
    8bec:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    8bf0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8bf4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8bf8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8bfc:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8c00:	2f646c69 	svccs	0x00646c69
    8c04:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8c08:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8c0c:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8c10:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8c14:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8c18:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8c1c:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8c20:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8c24:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8c28:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8c2c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8c30:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    8c34:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    8c38:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8c3c:	2f2e2e2f 	svccs	0x002e2e2f
    8c40:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8c44:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8c48:	2f2e2e2f 	svccs	0x002e2e2f
    8c4c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8c50:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8ab4 <__exidx_end+0x3b88>
    8c54:	2f636269 	svccs	0x00636269
    8c58:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8c5c:	73000074 	movwvc	r0, #116	; 0x74
    8c60:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8c64:	00682e66 	rsbeq	r2, r8, r6, ror #28
    8c68:	5f000001 	svcpl	0x00000001
    8c6c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8c70:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8c74:	72000002 	andvc	r0, r0, #2
    8c78:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8c7c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8c80:	6f6c0000 	svcvs	0x006c0000
    8c84:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    8c88:	00000200 	andeq	r0, r0, r0, lsl #4
    8c8c:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    8c90:	632e6572 			; <UNDEFINED> instruction: 0x632e6572
    8c94:	00000300 	andeq	r0, r0, r0, lsl #6
    8c98:	00020400 	andeq	r0, r2, r0, lsl #8
    8c9c:	17000300 	strne	r0, [r0, -r0, lsl #6]
    8ca0:	02000001 	andeq	r0, r0, #1
    8ca4:	0d0efb01 	vstreq	d15, [lr, #-4]
    8ca8:	01010100 	mrseq	r0, (UNDEF: 17)
    8cac:	00000001 	andeq	r0, r0, r1
    8cb0:	01000001 	tsteq	r0, r1
    8cb4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8cb8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8cbc:	2f2e2e2f 	svccs	0x002e2e2f
    8cc0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8cc4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8cc8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8ccc:	2f62696c 	svccs	0x0062696c
    8cd0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8cd4:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    8cd8:	2f00746e 	svccs	0x0000746e
    8cdc:	2f727375 	svccs	0x00727375
    8ce0:	2f62696c 	svccs	0x0062696c
    8ce4:	2f636367 	svccs	0x00636367
    8ce8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8cec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    8cf0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    8cf4:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    8cf8:	2f312e33 	svccs	0x00312e33
    8cfc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8d00:	00656475 	rsbeq	r6, r5, r5, ror r4
    8d04:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8d08:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8d0c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8d10:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8d14:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8d18:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8d1c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8d20:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8d24:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8d28:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8d2c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8d30:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8d34:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8d38:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    8d3c:	622f0073 	eorvs	r0, pc, #115	; 0x73
    8d40:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8d44:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8d48:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8d4c:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8d50:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8d54:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8d58:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8d5c:	2f302e33 	svccs	0x00302e33
    8d60:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8d64:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8bc8 <__exidx_end+0x3c9c>
    8d68:	2f636269 	svccs	0x00636269
    8d6c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8d70:	00656475 	rsbeq	r6, r5, r5, ror r4
    8d74:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    8d78:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
    8d7c:	00000100 	andeq	r0, r0, r0, lsl #2
    8d80:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    8d84:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    8d88:	00000200 	andeq	r0, r0, r0, lsl #4
    8d8c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8d90:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8d94:	00000300 	andeq	r0, r0, r0, lsl #6
    8d98:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8d9c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8da0:	6c000003 	stcvs	0, cr0, [r0], {3}
    8da4:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    8da8:	00030068 	andeq	r0, r3, r8, rrx
    8dac:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    8db0:	2e62696c 	vnmulcs.f16	s13, s4, s25	; <UNPREDICTABLE>
    8db4:	00040068 	andeq	r0, r4, r8, rrx
    8db8:	01050000 	mrseq	r0, (UNDEF: 5)
    8dbc:	00020500 	andeq	r0, r2, r0, lsl #10
    8dc0:	03000000 	movweq	r0, #0
    8dc4:	03050122 	movweq	r0, #20770	; 0x5122
    8dc8:	06010514 			; <UNDEFINED> instruction: 0x06010514
    8dcc:	0b052010 	bleq	150e14 <__ccfg+0x130e6c>
    8dd0:	1e010522 	cfsh32ne	mvfx0, mvfx1, #18
    8dd4:	05220605 	streq	r0, [r2, #-1541]!	; 0xfffff9fb
    8dd8:	052f0605 	streq	r0, [pc, #-1541]!	; 87db <__exidx_end+0x38af>
    8ddc:	01053003 	tsteq	r5, r3
    8de0:	06014b06 	streq	r4, [r1], -r6, lsl #22
    8de4:	1303054e 	movwne	r0, #13646	; 0x354e
    8de8:	01060b05 	tsteq	r6, r5, lsl #22
    8dec:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    8df0:	05201f01 	streq	r1, [r0, #-3841]!	; 0xfffff0ff
    8df4:	07052106 	streq	r2, [r5, -r6, lsl #2]
    8df8:	0b053506 	bleq	156218 <__ccfg+0x136270>
    8dfc:	0a050106 	beq	14921c <__ccfg+0x129274>
    8e00:	06080520 	streq	r0, [r8], -r0, lsr #10
    8e04:	10051441 	andne	r1, r5, r1, asr #8
    8e08:	08050106 	stmdaeq	r5, {r1, r2, r8}
    8e0c:	0e052106 	adfeqs	f2, f5, f6
    8e10:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    8e14:	05133006 	ldreq	r3, [r3, #-6]
    8e18:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    8e1c:	06210605 	strteq	r0, [r1], -r5, lsl #12
    8e20:	1c0e053c 	cfstr32ne	mvfx0, [lr], {60}	; 0x3c
    8e24:	0004052e 	andeq	r0, r4, lr, lsr #10
    8e28:	1b020402 	blne	89e38 <__ccfg+0x69e90>
    8e2c:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
    8e30:	053c2006 	ldreq	r2, [ip, #-6]!
    8e34:	05140607 	ldreq	r0, [r4, #-1543]	; 0xfffff9f9
    8e38:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    8e3c:	0205200a 	andeq	r2, r5, #10
    8e40:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    8e44:	053c1c03 	ldreq	r1, [ip, #-3075]!	; 0xfffff3fd
    8e48:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    8e4c:	2e053c0a 	cdpcs	12, 0, cr3, cr5, cr10, {0}
    8e50:	01040200 	mrseq	r0, R12_usr
    8e54:	001a052e 	andseq	r0, sl, lr, lsr #10
    8e58:	3c010402 	cfstrscc	mvf0, [r1], {2}
    8e5c:	33060805 	movwcc	r0, #26629	; 0x6805
    8e60:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    8e64:	06080501 	streq	r0, [r8], -r1, lsl #10
    8e68:	053c0621 	ldreq	r0, [ip, #-1569]!	; 0xfffff9df
    8e6c:	052e1c04 	streq	r1, [lr, #-3076]!	; 0xfffff3fc
    8e70:	0a030607 	beq	ca694 <__ccfg+0xaa6ec>
    8e74:	060e0501 	streq	r0, [lr], -r1, lsl #10
    8e78:	200a0501 	andcs	r0, sl, r1, lsl #10
    8e7c:	2f060205 	svccs	0x00060205
    8e80:	05430705 	strbeq	r0, [r3, #-1797]	; 0xfffff8fb
    8e84:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    8e88:	4c400604 	mcrrmi	6, 0, r0, r0, cr4
    8e8c:	01061405 	tsteq	r6, r5, lsl #8
    8e90:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    8e94:	052f0606 	streq	r0, [pc, #-1542]!	; 8896 <__exidx_end+0x396a>
    8e98:	01420601 	cmpeq	r2, r1, lsl #12
    8e9c:	01000602 	tsteq	r0, r2, lsl #12
    8ea0:	00019b01 	andeq	r9, r1, r1, lsl #22
    8ea4:	e2000300 	and	r0, r0, #0, 6
    8ea8:	02000000 	andeq	r0, r0, #0
    8eac:	0d0efb01 	vstreq	d15, [lr, #-4]
    8eb0:	01010100 	mrseq	r0, (UNDEF: 17)
    8eb4:	00000001 	andeq	r0, r0, r1
    8eb8:	01000001 	tsteq	r0, r1
    8ebc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8ec0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8ec4:	2f2e2e2f 	svccs	0x002e2e2f
    8ec8:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 8e18 <__exidx_end+0x3eec>
    8ecc:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    8ed0:	2e2e0063 	cdpcs	0, 2, cr0, cr14, cr3, {3}
    8ed4:	2f2e2e2f 	svccs	0x002e2e2f
    8ed8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8edc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8ee0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8ee4:	2f636367 	svccs	0x00636367
    8ee8:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    8eec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8ef0:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    8ef4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8ef8:	2f2e2e2f 	svccs	0x002e2e2f
    8efc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8f00:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8f04:	2f2e2e00 	svccs	0x002e2e00
    8f08:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8f0c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8f10:	2f2e2e2f 	svccs	0x002e2e2f
    8f14:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    8f18:	2e2f6363 	cdpcs	3, 2, cr6, cr15, cr3, {3}
    8f1c:	63672f2e 	cmnvs	r7, #46, 30	; 0xb8
    8f20:	6f632f63 	svcvs	0x00632f63
    8f24:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    8f28:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8f2c:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
    8f30:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    8f34:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    8f38:	68000001 	stmdavs	r0, {r0}
    8f3c:	74687361 	strbtvc	r7, [r8], #-865	; 0xfffffc9f
    8f40:	682e6261 	stmdavs	lr!, {r0, r5, r6, r9, sp, lr}
    8f44:	00000200 	andeq	r0, r0, r0, lsl #4
    8f48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    8f4c:	2e617369 	cdpcs	3, 6, cr7, cr1, cr9, {3}
    8f50:	00030068 	andeq	r0, r3, r8, rrx
    8f54:	6d726100 	ldfvse	f6, [r2, #-0]
    8f58:	7570632d 	ldrbvc	r6, [r0, #-813]!	; 0xfffffcd3
    8f5c:	0300682e 	movweq	r6, #2094	; 0x82e
    8f60:	6e690000 	cdpvs	0, 6, cr0, cr9, cr0, {0}
    8f64:	632d6e73 			; <UNDEFINED> instruction: 0x632d6e73
    8f68:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    8f6c:	73746e61 	cmnvc	r4, #1552	; 0x610
    8f70:	0300682e 	movweq	r6, #2094	; 0x82e
    8f74:	72610000 	rsbvc	r0, r1, #0
    8f78:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    8f7c:	6c000004 	stcvs	0, cr0, [r0], {4}
    8f80:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    8f84:	682e3263 	stmdavs	lr!, {r0, r1, r5, r6, r9, ip, sp}
    8f88:	00000100 	andeq	r0, r0, r0, lsl #2
    8f8c:	00010500 	andeq	r0, r1, r0, lsl #10
    8f90:	41480205 	cmpmi	r8, r5, lsl #4
    8f94:	a4030000 	strge	r0, [r3], #-0
    8f98:	03050104 	movweq	r0, #20740	; 0x5104
    8f9c:	05131313 	ldreq	r1, [r3, #-787]	; 0xfffffced
    8fa0:	01010116 	tsteq	r1, r6, lsl r1
    8fa4:	01050101 	tsteq	r5, r1, lsl #2
    8fa8:	16050f06 	strne	r0, [r5], -r6, lsl #30
    8fac:	1d010531 	cfstr32ne	mvfx0, [r1, #-196]	; 0xffffff3c
    8fb0:	2e311605 	cfmsuba32cs	mvax0, mvax1, mvfx1, mvfx5
    8fb4:	20202e06 	eorcs	r2, r0, r6, lsl #28
    8fb8:	20012e01 	andcs	r2, r1, r1, lsl #28
    8fbc:	20062006 	andcs	r2, r6, r6
    8fc0:	06200620 	strteq	r0, [r0], -r0, lsr #12
    8fc4:	06010520 	streq	r0, [r1], -r0, lsr #10
    8fc8:	2316050f 	tstcs	r6, #62914560	; 0x3c00000
    8fcc:	01040200 	mrseq	r0, R12_usr
    8fd0:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    8fd4:	004a0304 	subeq	r0, sl, r4, lsl #6
    8fd8:	06030402 	streq	r0, [r3], -r2, lsl #8
    8fdc:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    8fe0:	05200603 	streq	r0, [r0, #-1539]!	; 0xfffff9fd
    8fe4:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    8fe8:	05140603 	ldreq	r0, [r4, #-1539]	; 0xfffff9fd
    8fec:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    8ff0:	16052f03 	strne	r2, [r5], -r3, lsl #30
    8ff4:	03040200 	movweq	r0, #16896	; 0x4200
    8ff8:	000c051d 	andeq	r0, ip, sp, lsl r5
    8ffc:	22030402 	andcs	r0, r3, #33554432	; 0x2000000
    9000:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    9004:	001e0304 	andseq	r0, lr, r4, lsl #6
    9008:	20030402 	andcs	r0, r3, r2, lsl #8
    900c:	03040200 	movweq	r0, #16896	; 0x4200
    9010:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    9014:	05010304 	streq	r0, [r1, #-772]	; 0xfffffcfc
    9018:	04020003 	streq	r0, [r2], #-3
    901c:	0c051403 	cfstrseq	mvf1, [r5], {3}
    9020:	03040200 	movweq	r0, #16896	; 0x4200
    9024:	03050106 	movweq	r0, #20742	; 0x5106
    9028:	03040200 	movweq	r0, #16896	; 0x4200
    902c:	01052306 	tsteq	r5, r6, lsl #6
    9030:	03040200 	movweq	r0, #16896	; 0x4200
    9034:	02001306 	andeq	r1, r0, #402653184	; 0x18000000
    9038:	02010304 	andeq	r0, r1, #4, 6	; 0x10000000
    903c:	01010005 	tsteq	r1, r5
    9040:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    9044:	017e0003 	cmneq	lr, r3
    9048:	01020000 	mrseq	r0, (UNDEF: 2)
    904c:	000d0efb 	strdeq	r0, [sp], -fp
    9050:	01010101 	tsteq	r1, r1, lsl #2
    9054:	01000000 	mrseq	r0, (UNDEF: 0)
    9058:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    905c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9060:	2f2e2e2f 	svccs	0x002e2e2f
    9064:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9068:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    906c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9070:	736f6c67 	cmnvc	pc, #26368	; 0x6700
    9074:	696c2f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    9078:	736f6e62 	cmnvc	pc, #1568	; 0x620
    907c:	2f007379 	svccs	0x00007379
    9080:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    9084:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    9088:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    908c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    9090:	2f787945 	svccs	0x00787945
    9094:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9098:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    909c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    90a0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    90a4:	2f62696c 	svccs	0x0062696c
    90a8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    90ac:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    90b0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    90b4:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    90b8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    90bc:	73752f00 	cmnvc	r5, #0, 30
    90c0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    90c4:	63672f62 	cmnvs	r7, #392	; 0x188
    90c8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    90cc:	6f6e2d6d 	svcvs	0x006e2d6d
    90d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    90d4:	2f696261 	svccs	0x00696261
    90d8:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    90dc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    90e0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    90e4:	622f0065 	eorvs	r0, pc, #101	; 0x65
    90e8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    90ec:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    90f0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    90f4:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    90f8:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    90fc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    9100:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    9104:	2f302e33 	svccs	0x00302e33
    9108:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    910c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8f70 <__exidx_end+0x4044>
    9110:	2f636269 	svccs	0x00636269
    9114:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    9118:	2f656475 	svccs	0x00656475
    911c:	00737973 	rsbseq	r7, r3, r3, ror r9
    9120:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    9124:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    9128:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    912c:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    9130:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    9134:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9138:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    913c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    9140:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    9144:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9148:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    914c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    9150:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    9154:	67000065 	strvs	r0, [r0, -r5, rrx]
    9158:	6f747465 	svcvs	0x00747465
    915c:	00632e64 	rsbeq	r2, r3, r4, ror #28
    9160:	5f000001 	svcpl	0x00000001
    9164:	61666564 	cmnvs	r6, r4, ror #10
    9168:	5f746c75 	svcpl	0x00746c75
    916c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    9170:	00682e73 	rsbeq	r2, r8, r3, ror lr
    9174:	73000002 	movwvc	r0, #2
    9178:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    917c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    9180:	5f000003 	svcpl	0x00000003
    9184:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    9188:	00682e73 	rsbeq	r2, r8, r3, ror lr
    918c:	5f000004 	svcpl	0x00000004
    9190:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    9194:	2e6c6176 	mcrcs	1, 3, r6, cr12, cr6, {3}
    9198:	00040068 	andeq	r0, r4, r8, rrx
    919c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    91a0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    91a4:	00000400 	andeq	r0, r0, r0, lsl #8
    91a8:	6b636f6c 	blvs	18e4f60 <__ccfg+0x18c4fb8>
    91ac:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    91b0:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    91b4:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    91b8:	00000500 	andeq	r0, r0, r0, lsl #10
    91bc:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
    91c0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    91c4:	00000004 	andeq	r0, r0, r4
    91c8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    91cc:	00419c02 	subeq	r9, r1, r2, lsl #24
    91d0:	01130300 	tsteq	r3, r0, lsl #6
    91d4:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    91d8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    91dc:	0905210a 	stmdbeq	r5, {r1, r3, r8, sp}
    91e0:	2201051f 	andcs	r0, r1, #130023424	; 0x7c00000
    91e4:	051e0905 	ldreq	r0, [lr, #-2309]	; 0xfffff6fb
    91e8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    91ec:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    91f0:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6f636572 	svcvs	0x00636572
       4:	45006472 	strmi	r6, [r0, #-1138]	; 0xfffffb8e
}
       8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
       c:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      10:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
      14:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      18:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      1c:	5f62616c 	svcpl	0x0062616c
      20:	5f746547 	svcpl	0x00746547
      24:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
      28:	6e697669 	cdpvs	6, 6, cr7, cr9, cr9, {3}
      2c:	6f4e5f67 	svcvs	0x004e5f67
      30:	5f006564 	svcpl	0x00006564
      34:	5f69705f 	svcpl	0x0069705f
      38:	5f626370 	svcpl	0x00626370
      3c:	64700073 	ldrbtvs	r0, [r0], #-115	; 0xffffff8d
			i = k;
      40:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
				j->Next = k;
      44:	735f5f00 	cmpvc	pc, #0, 30
      48:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
}
      4c:	6f72505f 	svcvs	0x0072505f
      50:	5f74706d 	svcpl	0x0074706d
      54:	6f636552 	svcvs	0x00636552
		release;
      58:	495f6472 	ldmdbmi	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
      5c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
	b->u.pointers.tail =
      64:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
}
      68:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
		return NULL;
      6c:	5f007367 	svcpl	0x00007367
      70:	6f746377 	svcvs	0x00746377
      74:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
      78:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
      7c:	73656d00 	cmnvc	r5, #0, 26
      80:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
      84:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
      88:	5f5f0038 	svcpl	0x005f0038
      8c:	616c7473 	smcvs	51011	; 0xc743
      90:	69465f62 	stmdbvs	r6, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
      94:	4e5f646e 	cdpmi	4, 5, cr6, cr15, cr14, {3}
      98:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
      9c:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
      a0:	6f6e0073 	svcvs	0x006e0073
      a4:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
      a8:	735f5f00 	cmpvc	pc, #0, 30
      ac:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      b0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
      b4:	646f4e5f 	strbtvs	r4, [pc], #-3679	; bc <g_pfnVectors+0xbc>
      b8:	44495f65 	strbmi	r5, [r9], #-3941	; 0xfffff09b
      bc:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      c0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      c4:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
fsm transmitter (message * messagePtr) {
      c8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      cc:	31393130 	teqcc	r9, r0, lsr r1
      d0:	20353230 	eorscs	r3, r5, r0, lsr r2
}
      d4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      d8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	415b2029 	cmpmi	fp, r9, lsr #32
      e0:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
      e4:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
      e8:	6172622d 	cmnvs	r2, sp, lsr #4
        spkt [0] = 0;
      ec:	2068636e 	rsbcs	r6, r8, lr, ror #6
        *p = messagePtr->senderGroupId; p += 2;
      f0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
        *p = messagePtr->messageType; p++;
      f4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
        *p = messagePtr->requestNumber; p++;
      f8:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
        *p = messagePtr->receiverId; p++; // insert receiveer ID
     100:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
        tcv_endp (spkt);
     104:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
     10c:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
}
     110:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
        finish;
     114:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     118:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     11c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     120:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
char randomNumber() {
     124:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
   srand((unsigned) time(&t));
     128:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     12c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
   return (char)rand();
     130:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
}
     134:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
     138:	20672d20 	rsbcs	r2, r7, r0, lsr #26
fsm root {
     13c:	7764672d 	strbvc	r6, [r4, -sp, lsr #14]!
     140:	2d667261 	sfmcs	f7, 2, [r6, #-388]!	; 0xfffffe7c
     144:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
     148:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     14c:	642d7463 	strtvs	r7, [sp], #-1123	; 0xfffffb9d
     150:	66726177 			; <UNDEFINED> instruction: 0x66726177
     154:	734f2d20 	movtvc	r2, #64800	; 0xfd20
     158:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
     15c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     160:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
     164:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     168:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     16c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
        recordCount = 0;
     170:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
        nodeId = 1;
     174:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     178:	61746164 	cmnvs	r4, r4, ror #2
        groupId = 1;
     17c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     180:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
        messagePtr = (message *) umalloc(sizeof(message));
     184:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
     18c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     190:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
        tcv_plug(0, &plug_null);
     194:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
     198:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
        sfd = tcv_open(WNONE, 0, 0);
     19c:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
     1a0:	6d662d20 	stclvs	13, cr2, [r6, #-128]!	; 0xffffff80
     1a4:	652d7861 	strvs	r7, [sp, #-2145]!	; 0xfffff79f
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	30313d73 	eorscc	r3, r1, r3, ror sp
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	625f5f00 	subsvs	r5, pc, #0, 30
		if (sfd < 0) {
     1b4:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
			diag("Cannot open tcv interface");
     1b8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     1bc:	5f005f5f 	svcpl	0x00005f5f
			halt();
     1c0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        currentProtocol = IDLE;
     1c4:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
     1c8:	4e5f7465 	cdpmi	4, 5, cr7, cr15, cr5, {3}
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	5f65646f 	svcpl	0x0065646f
     1d0:	74004449 	strvc	r4, [r0], #-1097	; 0xfffffbb7
     1d4:	745f7663 	ldrbvc	r7, [pc], #-1635	; 1dc <root+0xa0>
     1d8:	7200746d 	andvc	r7, r0, #1828716544	; 0x6d000000
     1dc:	00746f6f 	rsbseq	r6, r4, pc, ror #30
     1e0:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
        ser_outf(Options, menu);
     1e4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     1e8:	6c665f00 	stclvs	15, cr5, [r6], #-0
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	00736761 	rsbseq	r6, r3, r1, ror #14
     1f0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     1f4:	6f727000 	svcvs	0x00727000
        switch (choice)
     1f8:	6f636f74 	svcvs	0x00636f74
     1fc:	4c5f006c 	mrrcmi	0, 6, r0, pc, cr12	; <UNPREDICTABLE>
     200:	5f4b434f 	svcpl	0x004b434f
     204:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
     208:	56495352 			; <UNDEFINED> instruction: 0x56495352
     20c:	00545f45 	subseq	r5, r4, r5, asr #30
     210:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     214:	5f62616c 	svcpl	0x0062616c
     218:	5f746547 	svcpl	0x00746547
     21c:	6f636552 	svcvs	0x00636552
     220:	495f6472 	ldmdbmi	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     224:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
        proceed Menu_Header;
     228:	626d5f00 	rsbvs	r5, sp, #0, 30
     22c:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	6174735f 	cmnvs	r4, pc, asr r3
     234:	66006574 			; <UNDEFINED> instruction: 0x66006574
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
     23c:	5f5f006b 	svcpl	0x005f006b
        proceed Menu_Header;
     240:	6f5f6970 	svcvs	0x005f6970
     244:	6900646c 	stmdbvs	r0, {r2, r3, r5, r6, sl, sp, lr}
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	6c615673 	stclvs	6, cr5, [r1], #-460	; 0xfffffe34
     24c:	6f4e6469 	svcvs	0x004e6469
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
     254:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     258:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
    if (node < 1 || node > 25) {
     25c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     260:	61745365 	cmnvs	r4, r5, ror #6
            proceed Set_Node_ID;
     264:	5f00706d 	svcpl	0x0000706d
        proceed Menu_Header;
     268:	736f7066 	cmnvc	pc, #102	; 0x66
     26c:	5f00745f 	svcpl	0x0000745f
        currentProtocol = DISCOVERY_REQUEST;
     270:	00736e66 	rsbseq	r6, r3, r6, ror #28
     274:	6f6f635f 	svcvs	0x006f635f
        receiverId = 0;
     278:	0065696b 	rsbeq	r6, r5, fp, ror #18
        proceed Transmit_Message;
     27c:	5f766374 	svcpl	0x00766374
        currentProtocol = CREATE_RECORD;
     280:	6f666e69 	svcvs	0x00666e69
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	73797300 	cmnvc	r9, #0, 6
     288:	5f746174 	svcpl	0x00746174
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	5f5f0074 	svcpl	0x005f0074
     290:	5f737362 	svcpl	0x00737362
     294:	5f646e65 	svcpl	0x00646e65
    if (node < 1 || node > 25) {
     298:	6172005f 	cmnvs	r2, pc, asr r0
     29c:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; ec <transmitter+0x24>
            proceed Create_Record;
     2a0:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     2a4:	5f007265 	svcpl	0x00007265
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
     2ac:	5f00746e 	svcpl	0x0000746e
     2b0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	495f6261 	ldmdbmi	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     2b8:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     2bc:	7a696c61 	bvc	1a5b448 <__ccfg+0x1a3b4a0>
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	5f5f0065 	svcpl	0x005f0065
        proceed Transmit_Message;
     2c4:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	00796164 	rsbseq	r6, r9, r4, ror #2
        proceed Transmit_Message;
     2cc:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
        currentProtocol = DELETE_RECORD;
     2d0:	00746c75 	rsbseq	r6, r4, r5, ror ip
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        currentProtocol = DELETE_RECORD;
     2d8:	5f62616c 	svcpl	0x0062616c
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	5f746547 	svcpl	0x00746547
        proceed Get_Receiving_Node;
     2e0:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
        currentProtocol = RETRIEVE_RECORD;
     2e4:	00656761 	rsbeq	r6, r5, r1, ror #14
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        currentProtocol = RETRIEVE_RECORD;
     2ec:	5f62616c 	svcpl	0x0062616c
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	5f746553 	svcpl	0x00746553
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	756f7247 	strbvc	r7, [pc, #-583]!	; b5 <g_pfnVectors+0xb5>
     2f8:	44495f70 	strbmi	r5, [r9], #-3952	; 0xfffff090
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 304 <root+0x1c8>
     300:	6f685f6d 	svcvs	0x00685f6d
     304:	65007275 	strvs	r7, [r0, #-629]	; 0xfffffd8b
    if (node < 1 || node > 25) {
     308:	6f72746e 	svcvs	0x0072746e
     30c:	5f007970 	svcpl	0x00007970
            proceed Prompt_Recieving_Node;
     310:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
     318:	435f7465 	cmpmi	pc, #1694498816	; 0x65000000
        char desiredRecordIndex = -1;
     31c:	63696f68 	cmnvs	r9, #104, 30	; 0x1a0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	5f5f0065 	svcpl	0x005f0065
     324:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
        char desiredRecordIndex = -1;
     328:	6f680074 	svcvs	0x00680074
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
        messagePtr->recordIndex = desiredRecordIndex;
     330:	5f5f0064 	svcpl	0x005f0064
     334:	616c7473 	smcvs	51011	; 0xc743
     338:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
        proceed Transmit_Message;
     33c:	72475f74 	subvc	r5, r7, #116, 30	; 0x1d0
        messagePtr -> senderGroupId = groupId;
     340:	5f70756f 	svcpl	0x0070756f
     344:	5f004449 	svcpl	0x00004449
     348:	706e695f 	rsbvc	r6, lr, pc, asr r9
        messagePtr -> messageType = currentProtocol;
     34c:	705f7475 	subsvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
        messagePtr -> requestNumber = randomNumber();
     350:	00736e69 	rsbseq	r6, r3, r9, ror #28
        messagePtr -> senderId = nodeId;
     354:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     358:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
     35c:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
        call transmitter(messagePtr, Menu_Header);
     360:	00667478 	rsbeq	r7, r6, r8, ror r4
        messagePtr -> receiverId = receiverId;
     364:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
        call transmitter(messagePtr, Menu_Header);
     368:	00383464 	eorseq	r3, r8, r4, ror #8
     36c:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     370:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
     374:	00657079 	rsbeq	r7, r5, r9, ror r0
            proceed Set_Node_ID;
     378:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
            break;
     37c:	5f746c75 	svcpl	0x00746c75
            proceed Set_Node_ID;
     380:	735f006b 	cmpvc	pc, #107	; 0x6b
            proceed Find_Neighbours;
     384:	616e6769 	cmnvs	lr, r9, ror #14
            proceed Create_Record;
     388:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
            proceed Delete_Record;
     38c:	6f6c0066 	svcvs	0x006c0066
            proceed Retrieve_Record;
     390:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
            diag("Reset Local Storage");
     394:	20676e6f 	rsbcs	r6, r7, pc, ror #28
            break;
     398:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
            diag("Reset Local Storage");
     39c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     3a0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     3a4:	73615f00 	cmnvc	r1, #0, 30
     3a8:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
     3ac:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
     3b0:	5f5f0066 	svcpl	0x005f0066
     3b4:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
     3b8:	775f0045 	ldrbvc	r0, [pc, -r5, asr #32]
     3bc:	5f007364 	svcpl	0x00007364
     3c0:	5f69705f 	svcpl	0x0069705f
     3c4:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     3c8:	00745f74 	rsbseq	r5, r4, r4, ror pc
     3cc:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     3d0:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     3d4:	5f00745f 	svcpl	0x0000745f
     3d8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     3dc:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
     3e0:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     3e4:	65525f65 	ldrbvs	r5, [r2, #-3941]	; 0xfffff09b
     3e8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     3ec:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
     3f0:	00454c49 	subeq	r4, r5, r9, asr #24
     3f4:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     3f8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     3fc:	5f006449 	svcpl	0x00006449
     400:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
static void devinit_uart (int devnum) {
     404:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
	adddevfunc (ioreq_uart_a, devnum);
     408:	6f5f7663 	svcvs	0x005f7663
     40c:	5f006570 	svcpl	0x00006570
void udelay (volatile word n) {
     410:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
     414:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
	while (n) {
     418:	5f5f0079 	svcpl	0x005f0079
     41c:	63756e67 	cmnvs	r5, #1648	; 0x670
}
     420:	5f61765f 	svcpl	0x0061765f
	while (n--);
     424:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     428:	6f686300 	svcvs	0x00686300
     42c:	00656369 	rsbeq	r6, r5, r9, ror #6
		n--;
     430:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     434:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     438:	4970756f 	ldmdbmi	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
void mdelay (volatile word n) {
     43c:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
     440:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
	while (n) {
     444:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     448:	5f5f0074 	svcpl	0x005f0074
}
     44c:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
		udelay (999);
     450:	5f006365 	svcpl	0x00006365
     454:	5f6d745f 	svcpl	0x006d745f
		n--;
     458:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
     45c:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
     460:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
     464:	5f00646e 	svcpl	0x0000646e
void __pi_ondomain (lword d) {
     468:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
     46c:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
		if (__pi_systat.effpdm > 1)
     470:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     474:	00657461 	rsbeq	r7, r5, r1, ror #8
			__pi_systat.effpdm = 1;
     478:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
	PRCMPowerDomainOn (d);
     47c:	72756300 	rsbsvc	r6, r5, #0, 6
     480:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     484:	746f7250 	strbtvc	r7, [pc], #-592	; 48c <__pi_ondomain+0x24>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     488:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 2d4 <root+0x198>
     48c:	6b707300 	blvs	1c1d094 <__ccfg+0x1bfd0ec>
     490:	5f5f0074 	svcpl	0x005f0074
	__pi_systat.ondmns |= d;
     494:	616c7473 	smcvs	51011	; 0xc743
     498:	65525f62 	ldrbvs	r5, [r2, #-3938]	; 0xfffff09e
}
     49c:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     4a0:	525f6576 	subspl	r6, pc, #494927872	; 0x1d800000
void __pi_offdomain (lword d) {
     4a4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     4a8:	5f5f0064 	svcpl	0x005f0064
	PRCMPowerDomainOff (d);
     4ac:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	705f0065 	subsvc	r0, pc, r5, rrx
     4b4:	5f007335 	svcpl	0x00007335
     4b8:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
	if (d & PRCM_DOMAIN_RFCORE) {
     4bc:	5f6e6f74 	svcpl	0x006e6f74
     4c0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c4:	735f5f00 	cmpvc	pc, #0, 30
     4c8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4cc:	6e654d5f 	mcrvs	13, 3, r4, cr5, cr15, {2}
     4d0:	65485f75 	strbvs	r5, [r8, #-3957]	; 0xfffff08b
	__pi_systat.ondmns &= ~d;
     4d4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     4d8:	63775f00 	cmnvs	r7, #0, 30
}
     4dc:	6f747273 	svcvs	0x00747273
     4e0:	5f73626d 	svcpl	0x0073626d
void __pi_syserror (word ec, const char *m) {
     4e4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 35c <root+0x220>
     4ec:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
  __ASM volatile ("cpsid i" : : : "memory");
     4f0:	6174735f 	cmnvs	r4, pc, asr r3
     4f4:	61006574 	tstvs	r0, r4, ror r5
     4f8:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
     4fc:	6e766500 	cdpvs	5, 7, cr6, cr6, cr0, {0}
		all_leds_blink;
     500:	006e7074 	rsbeq	r7, lr, r4, ror r0
     504:	6264656c 	rsbvs	r6, r4, #108, 10	; 0x1b000000
     508:	5f00636c 	svcpl	0x0000636c
     50c:	5f6d745f 	svcpl	0x006d745f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     510:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
     514:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     518:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     51c:	5f00636e 	svcpl	0x0000636e
     520:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     524:	5f63776f 	svcpl	0x0063776f
	while (1) {
     528:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     52c:	615f0065 	cmpvs	pc, r5, rrx
     530:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     534:	6c003074 	stcvs	0, cr3, [r0], {116}	; 0x74
void tci_run_delay_timer () {
     538:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
	setdel = __pi_mintk - __pi_old;
     53c:	5f5f006b 	svcpl	0x005f006b
     540:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     544:	61747379 	cmnvs	r4, r9, ror r3
     548:	5f5f0074 	svcpl	0x005f0074
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 474 <__pi_ondomain+0xc>	; <UNPREDICTABLE>
     550:	6b746e69 	blvs	1d1befc <__ccfg+0x1cfbf54>
     554:	6c665f00 	stclvs	15, cr5, [r6], #-0
     558:	5f6b636f 	svcpl	0x006b636f
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	5f5f0074 	svcpl	0x005f0074
	sti_tim;
     560:	616c7473 	smcvs	51011	; 0xc743
}
     564:	704f5f62 	subvc	r5, pc, r2, ror #30
     568:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     56c:	5f5f0073 	svcpl	0x005f0073
     570:	616c7473 	smcvs	51011	; 0xc743
     574:	72545f62 	subsvc	r5, r4, #392	; 0x188
	cli_aux;
     578:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     57c:	4d5f7469 	cfldrdmi	mvd7, [pc, #-420]	; 3e0 <root+0x2a4>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	61737365 	cmnvs	r3, r5, ror #6
     584:	5f006567 	svcpl	0x00006567
     588:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     58c:	6f695f00 	svcvs	0x00695f00
	sti_aux;
     590:	73007362 	movwvc	r7, #866	; 0x362
}
     594:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     598:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     59c:	745f656d 	ldrbvc	r6, [pc], #-1389	; 5a4 <AONRTCIntHandler+0x4>
void AONRTCIntHandler () {
     5a0:	735f5f00 	cmpvc	pc, #0, 30
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a4:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
     5a8:	0074696e 	rsbseq	r6, r4, lr, ror #18
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	656e776f 	strbvs	r7, [lr, #-1903]!	; 0xfffff891
		if (__pi_utims [0] == 0)
     5b0:	00644972 	rsbeq	r4, r4, r2, ror r9
     5b4:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		if (*(__pi_utims [0])) {
     5b8:	5f62616c 	svcpl	0x0062616c
     5bc:	5f746547 	svcpl	0x00746547
			(*(__pi_utims [0]))--;
     5c0:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
		if (__pi_utims [1] == 0)
     5c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
		if (*(__pi_utims [1])) {
     5c8:	646f4e5f 	strbtvs	r4, [pc], #-3679	; 5d0 <AONRTCIntHandler+0x30>
			aux_timer_inactive = 0;
     5cc:	735f0065 	cmpvc	pc, #101	; 0x65
			(*(__pi_utims [1]))--;
     5d0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
		if (__pi_utims [2] == 0)
     5d4:	61675f00 	cmnvs	r7, r0, lsl #30
		if (*(__pi_utims [2])) {
     5d8:	5f616d6d 	svcpl	0x00616d6d
			(*(__pi_utims [2]))--;
     5dc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		if (__pi_utims [3] != 0) {
     5e0:	006d6167 	rsbeq	r6, sp, r7, ror #2
			if (*(__pi_utims [3])) {
     5e4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
				aux_timer_inactive = 0;
     5e8:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
				(*(__pi_utims [3]))--;
     5ec:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
	if (__pi_systat.ledsts) {
     5f0:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     5f4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
		if (__pi_systat.ledblc++ == 0) {
     5f8:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
     5fc:	00726562 	rsbseq	r6, r2, r2, ror #10
			if (__pi_systat.ledblk) {
     600:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
     604:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     608:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     60c:	00747369 	rsbseq	r7, r4, r9, ror #6
     610:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
				if (__pi_systat.ledsts & 0x2)
     614:	00676e69 	rsbeq	r6, r7, r9, ror #28
     618:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
     61c:	544b0074 	strbpl	r0, [fp], #-116	; 0xffffff8c
				if (__pi_systat.ledsts & 0x4)
     620:	612f504d 			; <UNDEFINED> instruction: 0x612f504d
				__pi_systat.ledblk = 0;
     624:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     628:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff730 <_estack+0xdfffa730>
			if (__pi_systat.fstblk)
     62c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
     630:	735f5f00 	cmpvc	pc, #0, 30
				__pi_systat.ledblc = 200;
     634:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
	if (events & AON_RTC_EVFLAGS_CH0) {
     638:	6f72505f 	svcvs	0x0072505f
		cli_tim;
     63c:	5f74706d 	svcpl	0x0074706d
		__pi_new += setdel;
     640:	69636552 	stmdbvs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
     644:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
		setdel = 0;
     648:	6f4e5f67 	svcvs	0x004e5f67
		RISE_N_SHINE;
     64c:	5f006564 	svcpl	0x00006564
		__pi_new += setdel;
     650:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
		RISE_N_SHINE;
     654:	5f626d6f 	svcpl	0x00626d6f
     658:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		aux_timer_inactive = 1;
     65c:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     660:	00656c69 	rsbeq	r6, r5, r9, ror #24
				if (__pi_systat.ledsts & 0x1)
     664:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5b0 <AONRTCIntHandler+0x10>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     668:	616d2f65 	cmnvs	sp, r5, ror #30
     66c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				if (__pi_systat.ledsts & 0x2)
     670:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     674:	706f746b 	rsbvc	r7, pc, fp, ror #8
     678:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				if (__pi_systat.ledsts & 0x8)
     67c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
				__pi_systat.ledblk = 1;
     680:	4349502f 	movtmi	r5, #36911	; 0x902f
     684:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		if (aux_timer_inactive) {
     688:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
			cli_aux;
     68c:	415f3436 	cmpmi	pc, r6, lsr r4	; <UNPREDICTABLE>
     690:	67697373 			; <UNDEFINED> instruction: 0x67697373
     694:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
     698:	5f003274 	svcpl	0x00003274
     69c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     6a0:	70756e61 	rsbsvc	r6, r5, r1, ror #28
     6a4:	626d5f00 	rsbvs	r5, sp, #0, 30
     6a8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     6ac:	00745f65 	rsbseq	r5, r4, r5, ror #30
     6b0:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
word tci_update_delay_ticks (Boolean force) {
     6b4:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffff957 <_estack+0xdfffa957>
	cli_tim;
     6b8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     6bc:	756f635f 	strbvc	r6, [pc, #-863]!	; 365 <root+0x229>
	if (setdel) {
     6c0:	5f00746e 	svcpl	0x0000746e
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	5f6d745f 	svcpl	0x006d745f
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
     6cc:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     6d0:	6d647071 	stclvs	0, cr7, [r4, #-452]!	; 0xfffffe3c
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d4:	735f5f00 	cmpvc	pc, #0, 30
				AON_RTC_O_CH0CMP)) - gettav ());
     6d8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
	return NO;
     6dc:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
			setdel = 0;
     6e0:	6d726966 			; <UNDEFINED> instruction: 0x6d726966
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e4:	6172545f 	cmnvs	r2, pc, asr r4
     6e8:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
}
     6ec:	6f697373 	svcvs	0x00697373
		sti_tim;
     6f0:	685f006e 	ldmdavs	pc, {r1, r2, r3, r5, r6}^	; <UNPREDICTABLE>
		return YES;
     6f4:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     6f8:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
     6fc:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
     700:	6f006f6c 	svcvs	0x00006f6c
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
	UARTDisable (UART0_BASE);
     708:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	5f006d75 	svcpl	0x00006d75
	UARTDisable (UART0_BASE);
     710:	5f69705f 	svcpl	0x0069705f
	UARTConfigSetExpClk (UART0_BASE,
     714:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     718:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 720 <__pi_uart_setrate+0x1c>
     71c:	6f6d5f6d 	svcvs	0x006d5f6d
     720:	654e006e 	strbvs	r0, [lr, #-110]	; 0xffffff92
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     728:	6f5f7663 	svcvs	0x005f7663
     72c:	42007475 	andmi	r7, r0, #1962934272	; 0x75000000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	656c6f6f 	strbvs	r6, [ip, #-3951]!	; 0xfffff091
     734:	52006e61 	andpl	r6, r0, #1552	; 0x610
     738:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
	urates [0] = rate;
     73c:	5f455645 	svcpl	0x00455645
}
     740:	4f434552 	svcmi	0x00434552
     744:	44004452 	strmi	r4, [r0], #-1106	; 0xfffffbae
     748:	4f435349 	svcmi	0x00435349
     74c:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
     750:	5345525f 	movtpl	r5, #21087	; 0x525f
     754:	534e4f50 	movtpl	r4, #61264	; 0xef50
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	65730045 	ldrbvs	r0, [r3, #-69]!	; 0xffffffbb
     75c:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     760:	5f006449 	svcpl	0x00006449
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	5f69705f 	svcpl	0x0069705f
     768:	5f786568 	svcpl	0x00786568
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76c:	5f636e65 	svcpl	0x00636e65
     770:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
	__pi_uart_setrate (urates [0], __pi_uart);
     774:	5f5f0065 	svcpl	0x005f0065
     778:	5f746e69 	svcpl	0x00746e69
     77c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     780:	5f343674 	svcpl	0x00343674
     784:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
     788:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     78c:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 5c4 <AONRTCIntHandler+0x24>
	switch (operation) {
     790:	61747362 	cmnvs	r4, r2, ror #6
static int ioreq_uart_a (int operation, char *buf, int len) {
     794:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     798:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     79c:	7300746d 	movwvc	r7, #1133	; 0x46d
     7a0:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     7a4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
				*buf++ = uart_a_read;
     7a8:	73656d00 	cmnvc	r5, #0, 26
     7ac:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
			while (len && uart_a_char_available) {
     7b0:	00727450 	rsbseq	r7, r2, r0, asr r4
     7b4:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
     7b8:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
			if (len != operation) {
     7bc:	00726574 	rsbseq	r6, r2, r4, ror r5
}
     7c0:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     7c4:	5f007374 	svcpl	0x00007374
			uart_a_disable_int;
     7c8:	0066735f 	rsbeq	r7, r6, pc, asr r3
			if (uart_a_char_available) {
     7cc:	696e6970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, sp, lr}^
				*buf++ = uart_a_read;
     7d0:	745f646f 	ldrbvc	r6, [pc], #-1135	; 7d8 <ioreq_uart_a+0x48>
			uart_a_disable_int;
     7d4:	4c444900 	mcrrmi	9, 0, r4, r4, cr0	; <UNPREDICTABLE>
     7d8:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
			if (uart_a_char_available) {
     7dc:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     7e0:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
				uart_a_enable_int;
     7e4:	5f5f0078 	svcpl	0x005f0078
     7e8:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
				goto Redo_rx;
     7ec:	6c675f00 	stclvs	15, cr5, [r7], #-0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f0:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
     7f4:	706d695f 	rsbvc	r6, sp, pc, asr r9
			return -2;
     7f8:	5f657275 	svcpl	0x00657275
     7fc:	00727470 	rsbseq	r7, r2, r0, ror r4
				uart_a_write (*buf);
     800:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     804:	6165795f 	cmnvs	r5, pc, asr r9
			while (len && uart_a_room_in_tx) {
     808:	45440072 	strbmi	r0, [r4, #-114]	; 0xffffff8e
     80c:	4554454c 	ldrbmi	r4, [r4, #-1356]	; 0xfffffab4
     810:	4345525f 	movtmi	r5, #21087	; 0x525f
			if (len != operation) {
     814:	0044524f 	subeq	r5, r4, pc, asr #4
			uart_a_disable_int;
     818:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     81c:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
			if (uart_a_room_in_tx) {
     820:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     824:	5f006675 	svcpl	0x00006675
				uart_a_enable_int;
     828:	73756e75 	cmnvc	r5, #1872	; 0x750
     82c:	5f006465 	svcpl	0x00006465
				*buf++ = uart_a_read;
     830:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
			if (uart_a_room_in_tx) {
     834:	745f3874 	ldrbvc	r3, [pc], #-2164	; 83c <ioreq_uart_a+0xac>
				uart_a_write (*buf);
     838:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
     83c:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     840:	616d5f00 	cmnvs	sp, r0, lsl #30
     844:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
			uart_a_enable_int;
     848:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     84c:	625f6134 	subsvs	r6, pc, #52, 2
     850:	5f006675 	svcpl	0x00006675
			return 0;
     854:	736b6c62 	cmnvc	fp, #25088	; 0x6200
			if (len == UART_CNTRL_SETRATE) {
     858:	00657a69 	rsbeq	r7, r5, r9, ror #20
				if (__pi_uart_setrate (*((word*)buf),
     85c:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     860:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
     864:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
				syserror (EREQPAR, "uar");
     868:	5f007473 	svcpl	0x00007473
			syserror (ENOOPER, "uai");
     86c:	6b636f6c 	blvs	18dc624 <__ccfg+0x18bc67c>
			if (len == UART_CNTRL_GETRATE) {
     870:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
				return 1;
     874:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     878:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			syserror (ENOOPER, "uai");
     87c:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xfffff097
     880:	74007272 	strvc	r7, [r0], #-626	; 0xfffffd8e
     884:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
     888:	5f007663 	svcpl	0x00007663
     88c:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
     890:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     894:	745f746e 	ldrbvc	r7, [pc], #-1134	; 89c <ioreq_uart_a+0x10c>
     898:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     89c:	63705f69 	cmnvs	r0, #420	; 0x1a4
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	00745f62 	rsbseq	r5, r4, r2, ror #30
void UART0IntHandler () {
     8a4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	49440072 	stmdbmi	r4, {r1, r4, r5, r6}^
     8ac:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
     8b0:	5f595245 	svcpl	0x00595245
     8b4:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0xfffffaae
     8b8:	00545345 	subseq	r5, r4, r5, asr #6
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8bc:	6f73645f 	svcvs	0x0073645f
     8c0:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
		RISE_N_SHINE;
     8c4:	00656c64 	rsbeq	r6, r5, r4, ror #24
     8c8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		i_trigger (devevent (UART_A, READ));
     8cc:	0074735f 	rsbseq	r7, r4, pc, asr r3
     8d0:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     8d4:	00667562 	rsbeq	r7, r6, r2, ror #10
     8d8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     8dc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     8e0:	61686320 	cmnvs	r8, r0, lsr #6
     8e4:	5f5f0072 	svcpl	0x005f0072
     8e8:	6e5f6970 			; <UNDEFINED> instruction: 0x6e5f6970
     8ec:	5f007765 	svcpl	0x00007765
     8f0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     8f4:	5f323374 	svcpl	0x00323374
     8f8:	73660074 	cmnvc	r6, #116	; 0x74
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fc:	646f636d 	strbtvs	r6, [pc], #-877	; 904 <UART0IntHandler+0x64>
     900:	5f5f0065 	svcpl	0x005f0065
     904:	00424350 	subeq	r4, r2, r0, asr r3
		i_trigger (devevent (UART_A, WRITE));
     908:	756e656d 	strbvc	r6, [lr, #-1389]!	; 0xfffffa93
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     910:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
		RISE_N_SHINE;
     914:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     918:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
     91c:	65726973 	ldrbvs	r6, [r2, #-2419]!	; 0xfffff68d
		i_trigger (devevent (UART_A, WRITE));
     920:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
     924:	4964726f 	stmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     928:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     92c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     930:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
     934:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
     938:	5f5f006c 	svcpl	0x005f006c
     93c:	66756273 			; <UNDEFINED> instruction: 0x66756273
     940:	72617500 	rsbvc	r7, r1, #0, 10
     944:	00745f74 	rsbseq	r5, r4, r4, ror pc
     948:	70615f5f 	rsbvc	r5, r1, pc, asr pc
}
     94c:	735f5f00 	cmpvc	pc, #0, 30
     950:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     954:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     958:	6b6f7472 	blvs	1bddb28 <__ccfg+0x1bbdb80>
     95c:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
void __buttons_setirq (int val) {
     960:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 798 <ioreq_uart_a+0x8>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
     968:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	00657461 	rsbeq	r7, r5, r1, ror #8
     970:	616e665f 	cmnvs	lr, pc, asr r6
     974:	00736772 	rsbseq	r6, r3, r2, ror r7
		bn = BUTTON_GPIO (__button_list [i]);
     978:	70766374 	rsbsvc	r6, r6, r4, ror r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97c:	5f67756c 	svcpl	0x0067756c
     980:	5f5f0074 	svcpl	0x005f0074
     984:	616c7473 	smcvs	51011	; 0xc743
     988:	65445f62 	strbvs	r5, [r4, #-3938]	; 0xfffff09e
     98c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     990:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
}
     994:	0064726f 	rsbeq	r7, r4, pc, ror #4
     998:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     99c:	52656761 	rsbpl	r6, r5, #25427968	; 0x1840000
     9a0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
void __pinlist_setirq (int val) {
     9a4:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	2074726f 	rsbscs	r7, r4, pc, ror #4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b8:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
     9bc:	73616261 	cmnvc	r1, #268435462	; 0x10000006
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c0:	63740065 	cmnvs	r4, #101	; 0x65
     9c4:	70646176 	rsbvc	r6, r4, r6, ror r1
     9c8:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
}
     9d0:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
     9d4:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     9d8:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     9dc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
void GPIOIntHandler () {
     9e0:	6f5f0073 	svcvs	0x005f0073
if (buttons_int) {
     9e4:	745f6666 	ldrbvc	r6, [pc], #-1638	; 9ec <GPIOIntHandler+0xc>
     9e8:	626e5f00 	rsbvs	r5, lr, #0, 30
	buttons_disable ();
     9ec:	5f006675 	svcpl	0x00006675
     9f0:	73756e75 	cmnvc	r5, #1872	; 0x750
	i_trigger ((aword)&__button_list);
     9f4:	725f6465 	subsvc	r6, pc, #1694498816	; 0x65000000
     9f8:	00646e61 	rsbeq	r6, r4, r1, ror #28
     9fc:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
     a00:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
     a04:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
     a08:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     a0c:	5f656c61 	svcpl	0x00656c61
     a10:	6f666e69 	svcvs	0x00666e69
     a14:	6c665f00 	stclvs	15, cr5, [r6], #-0
     a18:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
     a1c:	73695f00 	cmnvc	r9, #0, 30
	RISE_N_SHINE;
     a20:	6178635f 	cmnvs	r8, pc, asr r3
     a24:	6f726700 	svcvs	0x00726700
     a28:	64497075 	strbvs	r7, [r9], #-117	; 0xffffff8b
if (pin_sensor_int) {
     a2c:	61725f00 	cmnvs	r2, r0, lsl #30
     a30:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
	i_trigger ((aword)(&__input_pins));
     a34:	00747865 	rsbseq	r7, r4, r5, ror #16
     a38:	6f6c5f5f 	svcvs	0x006c5f5f
     a3c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
     a40:	5f00745f 	svcpl	0x0000745f
     a44:	6b656573 	blvs	195a018 <__ccfg+0x193a070>
     a48:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     a4c:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
     a50:	6d6e5f00 	stclvs	15, cr5, [lr, #-0]
     a54:	6f6c6c61 	svcvs	0x006c6c61
     a58:	755f0063 	ldrbvc	r0, [pc, #-99]	; 9fd <GPIOIntHandler+0x1d>
     a5c:	00667562 	rsbeq	r7, r6, r2, ror #10
	__pinsen_disable_and_clear;
     a60:	41455243 	cmpmi	r5, r3, asr #4
	RISE_N_SHINE;
     a64:	525f4554 	subspl	r4, pc, #84, 10	; 0x15000000
     a68:	524f4345 	subpl	r4, pc, #335544321	; 0x14000001
     a6c:	66650044 	strbtvs	r0, [r5], -r4, asr #32
}
     a70:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
     a74:	73657200 	cmnvc	r5, #0, 4
     a78:	47007465 	strmi	r7, [r0, -r5, ror #8]
     a7c:	5f4f4950 	svcpl	0x004f4950
     a80:	4f746573 	svcmi	0x00746573
void system_init () {
     a84:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a88:	616e4574 	smcvs	58452	; 0xe454
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8c:	44656c62 	strbtmi	r6, [r5], #-3170	; 0xfffff39e
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	41006f69 	tstmi	r0, r9, ror #30
     a94:	61424e4f 	cmpvs	r2, pc, asr #28
     a98:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     aa0:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa4:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
     aa8:	0065646f 	rsbeq	r6, r5, pc, ror #8
     aac:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab0:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab4:	616d6f64 	cmnvs	sp, r4, ror #30
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ab8:	67006e69 	strvs	r6, [r0, -r9, ror #28]
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     abc:	61747465 	cmnvs	r4, r5, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac0:	72750076 	rsbsvc	r0, r5, #118	; 0x76
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac4:	73657461 	cmnvc	r5, #1627389952	; 0x61000000
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	655f5f00 	ldrbvs	r5, [pc, #-3840]	; fffffbd0 <_estack+0xdfffabd0>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
		pin = (port_confs [i] >> 19) & 0x1f;
     ad0:	72695f65 	rsbvc	r5, r9, #404	; 0x194
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad4:	68770071 	ldmdavs	r7!, {r0, r4, r5, r6}^
     ad8:	00657265 	rsbeq	r7, r5, r5, ror #4
     adc:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     ae0:	6674696e 	ldrbtvs	r6, [r4], -lr, ror #18
		if (port_confs [i] & 0x80)
     ae4:	745f6e75 	ldrbvc	r6, [pc], #-3701	; aec <system_init+0x68>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ae8:	4e4f4100 	dvfmie	f4, f7, f0
     aec:	41435557 	cmpmi	r3, r7, asr r5
		if (port_confs [i] & 0x40)
     af0:	61577875 	cmpvs	r7, r5, ror r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af4:	7075656b 	rsbsvc	r6, r5, fp, ror #10
     af8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afc:	4f410074 	svcmi	0x00410074
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b04:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
	all_leds_blink;
     b08:	61745372 	cmnvs	r4, r2, ror r3
     b0c:	47737574 			; <UNDEFINED> instruction: 0x47737574
     b10:	55007465 	strpl	r7, [r0, #-1125]	; 0xfffffb9b
     b14:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
     b18:	6c43746e 	cfstrdvs	mvd7, [r3], {110}	; 0x6e
     b1c:	00726165 	rsbseq	r6, r2, r5, ror #2
     b20:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b24:	695f6d65 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     b28:	0074696e 	rsbseq	r6, r4, lr, ror #18
     b2c:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     b30:	68534355 	ldmdavs	r3, {r0, r2, r4, r6, r8, r9, lr}^
     b34:	6f447475 	svcvs	0x00447475
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b38:	6e456e77 	mcrvs	14, 2, r6, cr5, cr7, {3}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     b40:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
	IntEnable (INT_AON_RTC_COMB);
     b44:	006c6564 	rsbeq	r6, ip, r4, ror #10
     b48:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     b4c:	5075634d 	rsbspl	r6, r5, sp, asr #6
	__pi_malloc_init ();
     b50:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
	IntEnable (INT_AON_GPIO_EDGE);
     b54:	0066664f 	rsbeq	r6, r6, pc, asr #12
     b58:	65735f5f 	ldrbvs	r5, [r3, #-3935]!	; 0xfffff0a1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5c:	534d5f74 	movtpl	r5, #57204	; 0xdf74
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	65640050 	strbvs	r0, [r4, #-80]!	; 0xffffffb0
     b64:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     b68:	00745f74 	rsbseq	r5, r4, r4, ror pc
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     b70:	646e6f5f 	strbtvs	r6, [lr], #-3935	; 0xfffff0a1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b74:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
     b78:	4155006e 	cmpmi	r5, lr, rrx
     b7c:	77485452 	smlsldvc	r5, r8, r2, r4
	urates [0] = UART_RATE / 100;
     b80:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
     b84:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
	reinit_uart ();
     b88:	446c6f72 	strbtmi	r6, [ip], #-3954	; 0xfffff08e
	EXTRA_INITIALIZERS;
     b8c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     b90:	5f00656c 	svcpl	0x0000656c
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b94:	5f69705f 	svcpl	0x0069705f
     b98:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     b9c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba0:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     ba4:	4e4f4100 	dvfmie	f4, f7, f0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	46434f49 	strbmi	r4, [r3], -r9, asr #30
     bac:	7a656572 	bvc	195a17c <__ccfg+0x193a1d4>
			devinit [i] . init (devinit [i] . param);
     bb0:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     bb8:	33697500 	cmncc	r9, #0, 10
     bbc:	4c785232 	lfmmi	f5, 2, [r8], #-200	; 0xffffff38
	IntEnable (INT_UART0_COMB);
     bc0:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
     bc4:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
}
     bc8:	78725f6f 	ldmdavc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
	tci_run_auxiliary_timer ();
     bcc:	33697500 	cmncc	r9, #0, 10
		diag ("");
     bd0:	4c785432 	cfldrdmi	mvd5, [r8], #-200	; 0xffffff38
     bd4:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bd8:	73795300 	cmnvc	r9, #0, 6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bdc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
		diag ("Leftover RAM: %d bytes",
     be0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
     be4:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
     be8:	43525000 	cmpmi	r2, #0
     bec:	6361434d 	cmnvs	r1, #872415233	; 0x34000001
     bf0:	65526568 	ldrbvs	r6, [r2, #-1384]	; 0xfffffa98
     bf4:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
     bf8:	456e6f69 	strbmi	r6, [lr, #-3945]!	; 0xfffff097
     bfc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     c00:	52500065 	subspl	r0, r0, #101	; 0x65
     c04:	6f4c4d43 	svcvs	0x004c4d43
     c08:	65536461 	ldrbvs	r6, [r3, #-1121]	; 0xfffffb9f
     c0c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
     c10:	6e453233 	mcrvs	2, 2, r3, cr5, cr3, {1}
     c14:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     c18:	616e6500 	cmnvs	lr, r0, lsl #10
     c1c:	5f656c62 	svcpl	0x00656c62
     c20:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     c24:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     c28:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
     c2c:	00737470 	rsbseq	r7, r3, r0, ror r4
     c30:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     c34:	4f464946 	svcmi	0x00464946
     c38:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
     c40:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
     c44:	6c46746e 	cfstrdvs	mvd7, [r6], {110}	; 0x6e
     c48:	00736761 	rsbseq	r6, r3, r1, ror #14
     c4c:	4e6f6964 	vnmulmi.f16	s13, s30, s9	; <UNPREDICTABLE>
     c50:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     c54:	5f5f0072 	svcpl	0x005f0072
     c58:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 2f0 <root+0x1b4>
}
     c5c:	5f747261 	svcpl	0x00747261
__attribute__ ((noreturn)) void __pi_release () {
     c60:	72746573 	rsbsvc	r6, r4, #482344960	; 0x1cc00000
     c64:	00657461 	rsbeq	r7, r5, r1, ror #8
     c68:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6c:	72744372 	rsbsvc	r4, r4, #-939524095	; 0xc8000001
	check_stack_overflow;
     c70:	464f496c 	strbmi	r4, [pc], -ip, ror #18
     c74:	7a656572 	bvc	195a244 <__ccfg+0x193a29c>
     c78:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
	update_n_wake (MAX_WORD, NO);
     c7c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     c80:	43525000 	cmpmi	r2, #0
     c84:	6361434d 	cmnvs	r1, #872415233	; 0x34000001
	for_all_tasks (__pi_curr) {
     c88:	65526568 	ldrbvs	r6, [r2, #-1384]	; 0xfffffa98
     c8c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
     c90:	446e6f69 	strbtmi	r6, [lr], #-3945	; 0xfffff097
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	__SLEEP;
     c98:	7300656c 	movwvc	r6, #1388	; 0x56c
     c9c:	6f707465 	svcvs	0x00707465
     ca0:	6d726577 	cfldr64vs	mvdx6, [r2, #-476]!	; 0xfffffe24
     ca4:	0065646f 	rsbeq	r6, r5, pc, ror #8
	system_event_count ++;
     ca8:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     cac:	6f697461 	svcvs	0x00697461
	switch (__pi_systat.effpdm) {
     cb0:	7561006e 	strbvc	r0, [r1, #-110]!	; 0xffffff92
     cb4:	69745f78 	ldmdbvs	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cb8:	5f72656d 	svcpl	0x0072656d
     cbc:	63616e69 	cmnvs	r1, #1680	; 0x690
			__WFI ();
     cc0:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
     cc4:	726f7000 	rsbvc	r7, pc, #0
     cc8:	6f635f74 	svcvs	0x00635f74
	check_stack_overflow;
     ccc:	0073666e 	rsbseq	r6, r3, lr, ror #12
     cd0:	6f646552 	svcvs	0x00646552
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd4:	0078745f 	rsbseq	r7, r8, pc, asr r4
     cd8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
			goto Redo;
     ce0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	for_all_tasks (__pi_curr) {
     ce4:	33697500 	cmncc	r9, #0, 10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ce8:	73614232 	cmnvc	r1, #536870915	; 0x20000003
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cec:	5f5f0065 	svcpl	0x005f0065
     cf0:	775f6f64 	ldrbvc	r6, [pc, -r4, ror #30]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf4:	615f6966 	cmpvs	pc, r6, ror #18
     cf8:	656e5f73 	strbvs	r5, [lr, #-3955]!	; 0xfffff08d
     cfc:	64656465 	strbtvs	r6, [r5], #-1125	; 0xfffffb9b
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d00:	4e4f4100 	dvfmie	f4, f7, f0
     d04:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	6156636e 	cmpvs	r6, lr, ror #6
     d0c:	4365756c 	cmnmi	r5, #108, 10	; 0x1b000000
			__WFI ();
     d10:	65533268 	ldrbvs	r3, [r3, #-616]	; 0xfffffd98
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d14:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     d18:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
}
     d1c:	61755f74 	cmnvs	r5, r4, ror pc
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d20:	41007472 	tstmi	r0, r2, ror r4
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d24:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d28:	746e4943 	strbtvc	r4, [lr], #-2371	; 0xfffff6bd
     d2c:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d30:	0072656c 	rsbseq	r6, r2, ip, ror #10
     d34:	61726170 	cmnvs	r2, r0, ror r1
     d38:	6374006d 	cmnvs	r4, #109	; 0x6d
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3c:	75725f69 	ldrbvc	r5, [r2, #-3945]!	; 0xfffff097
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d40:	65645f6e 	strbvs	r5, [r4, #-3950]!	; 0xfffff092
     d44:	5f79616c 	svcpl	0x0079616c
     d48:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     d4c:	5f5f0072 	svcpl	0x005f0072
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	725f6970 	subsvc	r6, pc, #112, 18	; 0x1c0000
     d54:	61656c65 	cmnvs	r5, r5, ror #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d58:	52006573 	andpl	r6, r0, #482344960	; 0x1cc00000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d5c:	006f6465 	rsbeq	r6, pc, r5, ror #8
     d60:	69657270 	stmdbvs	r5!, {r4, r5, r6, r9, ip, sp, lr}^
     d64:	5f74696e 	svcpl	0x0074696e
     d68:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     d6c:	726f6600 	rsbvc	r6, pc, #0, 12
			SysCtrlSetRechargeBeforePowerDown
     d70:	55006563 	strpl	r6, [r0, #-1379]	; 0xfffffa9d
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d74:	45545241 	ldrbmi	r5, [r4, #-577]	; 0xfffffdbf
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d78:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     d7c:	50470065 	subpl	r0, r7, r5, rrx
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	635f4f49 	cmpvs	pc, #292	; 0x124
     d84:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     d88:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8c:	6f694474 	svcvs	0x00694474
     d90:	625f5f00 	subsvs	r5, pc, #0, 30
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d94:	6f747475 	svcvs	0x00747475
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d98:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     d9c:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
     da0:	646d0071 	strbtvs	r0, [sp], #-113	; 0xffffff8f
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
			while (!(AONWUCPowerStatusGet () &
     da8:	645f5f00 	ldrbvs	r5, [pc], #-3840	; db0 <__pi_release+0x150>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dac:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     db0:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     db4:	47007172 	smlsdxmi	r0, r2, r1, r7
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     db8:	5f4f4950 	svcpl	0x004f4950
     dbc:	61656c63 	cmnvs	r5, r3, ror #24
     dc0:	6f694472 	svcvs	0x00694472
     dc4:	73795300 	cmnvc	r9, #0, 6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dc8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     dcc:	536e6f41 	cmnpl	lr, #260	; 0x104
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	00636e79 	rsbeq	r6, r3, r9, ror lr
     dd4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd8:	6174735f 	cmnvs	r4, pc, asr r3
			reinit_uart ();
     ddc:	72666b63 	rsbvc	r6, r6, #101376	; 0x18c00
     de0:	74006565 	strvc	r6, [r0], #-1381	; 0xfffffa9b
     de4:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
}
     de8:	615f6e75 	cmpvs	pc, r5, ror lr	; <UNPREDICTABLE>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dec:	6c697875 	stclvs	8, cr7, [r9], #-468	; 0xfffffe2c
     df0:	79726169 	ldmdbvc	r2!, {r0, r3, r5, r6, r8, sp, lr}^
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     df8:	5f007265 	svcpl	0x00007265
     dfc:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     e04:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     e08:	00717269 	rsbseq	r7, r1, r9, ror #4
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0c:	4f495047 	svcmi	0x00495047
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e18:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
     e1c:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e20:	4c4f4649 	mcrrmi	6, 4, r4, pc, cr9
     e24:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e28:	00746553 	rsbseq	r6, r4, r3, asr r5
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2c:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e30:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
     e34:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
			PRCMPowerDomainOff (
     e38:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
     e3c:	73007465 	movwvc	r7, #1125	; 0x465
	__SLEEP;
     e40:	61747465 	cmnvs	r4, r5, ror #8
     e44:	76650076 			; <UNDEFINED> instruction: 0x76650076
  __ASM volatile ("cpsie i" : : : "memory");
     e48:	73746e65 	cmnvc	r4, #1616	; 0x650
	goto Redo;
     e4c:	65647500 	strbvs	r7, [r4, #-1280]!	; 0xfffffb00
     e50:	0079616c 	rsbseq	r6, r9, ip, ror #2
     e54:	424e4f41 	submi	r4, lr, #260	; 0x104
     e58:	6f4d7461 	svcvs	0x004d7461
     e5c:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
     e60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     e64:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     e68:	61625f69 	cmnvs	r2, r9, ror #30
     e6c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
     e70:	4e4f4100 	dvfmie	f4, f7, f0
     e74:	46434f49 	strbmi	r4, [r3], -r9, asr #30
     e78:	7a656572 	bvc	195a448 <__ccfg+0x193a4a0>
     e7c:	616e4565 	cmnvs	lr, r5, ror #10
     e80:	00656c62 	rsbeq	r6, r5, r2, ror #24
     e84:	424e4f41 	submi	r4, lr, #260	; 0x104
     e88:	6f4d7461 	svcvs	0x004d7461
     e8c:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
     e90:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     e94:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
     e98:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
     e9c:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     ea0:	7165726f 	cmnvc	r5, pc, ror #4
     ea4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     ea8:	00615f74 	rsbeq	r5, r1, r4, ror pc
     eac:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     eb0:	6974755f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
     eb4:	7300736d 	movwvc	r7, #877	; 0x36d
	cli_tim;
     eb8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     ebc:	4f495047 	svcmi	0x00495047
     ec0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	diag ("PicOS halted");
     ec4:	006f6944 	rsbeq	r6, pc, r4, asr #18
	mdelay (500);
     ec8:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     ecc:	0074696e 	rsbseq	r6, r4, lr, ror #18
	setpowermode (2);
     ed0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	__PCB = NULL;
     ed4:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
	release;
     ed8:	6f727265 	svcvs	0x00727265
     edc:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
     ee0:	6d756e76 	ldclvs	14, cr6, [r5, #-472]!	; 0xfffffe28
     ee4:	6f682f00 	svcvs	0x00682f00
int main (void) {
     ee8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; d3c <__pi_release+0xdc>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     ef0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	6f746b73 	svcvs	0x00746b73
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	system_init ();
     efc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	tcv_init ();
     f00:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	2f534f43 	svccs	0x00534f43
     f08:	4f636950 	svcmi	0x00636950
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	43432f53 	movtmi	r2, #16211	; 0x3f53
     f10:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     f14:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f18:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     f1c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	delay (16, 0);
     f20:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     f24:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
     f28:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
	__pi_release ();
     f2c:	55007972 	strpl	r7, [r0, #-2418]	; 0xfffff68e
     f30:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
     f34:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
     f38:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     f3c:	43525000 	cmpmi	r2, #0
     f40:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
     f44:	6f646c55 	svcvs	0x00646c55
static void killev (__pi_pcb_t *pid) {
     f48:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
	wfun = (aword)(pid->code);
     f4c:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
	for_all_tasks (i) {
     f50:	756f0065 	strbvc	r0, [pc, #-101]!	; ef3 <main+0xb>
		for (j = 0; j < nevents (i); j++) {
     f54:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     f58:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     f5c:	6156656c 	cmpvs	r6, ip, ror #10
			    || i->Events [j] . Event == wfun
     f60:	0065756c 	rsbeq	r7, r5, ip, ror #10
		for (j = 0; j < nevents (i); j++) {
     f64:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
			if (i->Events [j] . Event == (aword)pid
     f68:	706f7400 	rsbvc	r7, pc, r0, lsl #8
     f6c:	614d664f 	cmpvs	sp, pc, asr #12
     f70:	74536e69 	ldrbvc	r6, [r3], #-3689	; 0xfffff197
				wakeupev (i, j);
     f74:	006b6361 	rsbeq	r6, fp, r1, ror #6
     f78:	6564675f 	strbvs	r6, [r4, #-1887]!	; 0xfffff8a1
	for_all_tasks (i) {
     f7c:	0079616c 	rsbseq	r6, r9, ip, ror #2
}
     f80:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
static void qfree (aword *ch) {
     f88:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8c:	0072656c 	rsbseq	r6, r2, ip, ror #10
	cc = (aword*)(mpools + MA_NP);
     f90:	70656544 	rsbvc	r6, r5, r4, asr #10
	m_setnextp (ch, chunk);
     f94:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
	m_setnextp (cc, ch);
     f98:	6f700070 	svcvs	0x00700070
}
     f9c:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa0:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     fa4:	63740067 	cmnvs	r4, #103	; 0x67
     fa8:	70755f69 	rsbsvc	r5, r5, r9, ror #30
			m_setnextp (cc, m_nextp (chunk));
     fac:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb0:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     fb4:	745f7961 	ldrbvc	r7, [pc], #-2401	; fbc <qfree+0x38>
     fb8:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     fbc:	61654d00 	cmnvs	r5, r0, lsl #26
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     fc8:	66716572 			; <UNDEFINED> instruction: 0x66716572
     fcc:	745f6e75 	ldrbvc	r6, [pc], #-3701	; fd4 <qfree+0x50>
			m_setnextp (cc, m_nextp (chunk));
     fd0:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	0076656c 	rsbseq	r6, r6, ip, ror #10
     fd8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     fdc:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
     fe0:	00797063 	rsbseq	r7, r9, r3, rrx
     fe4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     fe8:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
			if (m_size (chunk) >= m_size (ch))
     fec:	00636f6c 	rsbeq	r6, r3, ip, ror #30
     ff0:	61776e75 	cmnvs	r7, r5, ror lr
     ff4:	71007469 	tstvc	r0, r9, ror #8
		chunk = m_nextp (chunk))
     ff8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     ffc:	726f6900 	rsbvc	r6, pc, #0, 18
    1000:	5f007165 	svcpl	0x00007165
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1004:	5f69705f 	svcpl	0x0069705f
	diag_wait (a);
    1008:	6b726f66 	blvs	1c9cda8 <__ccfg+0x1c7ce00>
	diag_wchar (c, a);
    100c:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
    1010:	706d006c 	rsbvc	r0, sp, ip, rrx
}
    1014:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1018:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
	syserror (ESTATE, "state");
    101c:	5f72656d 	svcpl	0x0072656d
    1020:	00646461 	rsbeq	r6, r4, r1, ror #8
    1024:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
    1028:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
void utimer_add (address ut) {
    1030:	616d5f69 	cmnvs	sp, r9, ror #30
    1034:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
		if (__pi_utims [i] == NULL)
    1038:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
    1040:	2f656d6f 	svccs	0x00656d6f
		syserror (ERESOURCE, "ut a");
    1044:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	__pi_utims [i] = ut;
    1048:	442f6e69 	strtmi	r6, [pc], #-3689	; 1050 <utimer_add+0x24>
}
    104c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1050:	4f2f706f 	svcmi	0x002f706f
    1054:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	*t = v;
    1058:	502f5445 	eorpl	r5, pc, r5, asr #8
	TCI_RUN_AUXILIARY_TIMER;
    105c:	534f4349 	movtpl	r4, #62281	; 0xf349
void update_n_wake (word min, Boolean force) {
    1060:	6369502f 	cmnvs	r9, #47	; 0x2f
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	6b2f534f 	blvs	bd5da8 <__ccfg+0xbb5e00>
    1068:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    106c:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1070:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1074:	5f00632e 	svcpl	0x0000632e
    1078:	5f69705f 	svcpl	0x0069705f
    107c:	67697274 			; <UNDEFINED> instruction: 0x67697274
    1080:	00726567 	rsbseq	r6, r2, r7, ror #10
    1084:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1088:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    108c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1090:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1094:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    1098:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    109c:	75726300 	ldrbvc	r6, [r2, #-768]!	; 0xfffffd00
    10a0:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
		for_all_tasks (i) {
    10a4:	636e0067 	cmnvs	lr, #103	; 0x67
	__pi_mintk = znew + min;
    10a8:	6d006b68 	vstrvs	d6, [r0, #-416]	; 0xfffffe60
    10ac:	6572666e 	ldrbvs	r6, [r2, #-1646]!	; 0xfffff992
			if (!twaiting (i))
    10b0:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    10b4:	6565636f 	strbvs	r6, [r5, #-879]!	; 0xfffffc91
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10b8:	6c6d0064 	stclvs	0, cr0, [sp], #-400	; 0xfffffe70
    10bc:	5f006e65 	svcpl	0x00006e65
    10c0:	5f69705f 	svcpl	0x0069705f
    10c4:	69727470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, sp, lr}^
    10c8:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    10cc:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    10d0:	66766564 	ldrbtvs	r6, [r6], -r4, ror #10
    10d4:	00636e75 	rsbeq	r6, r3, r5, ror lr
    10d8:	76646970 			; <UNDEFINED> instruction: 0x76646970
    10dc:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
    10e0:	00676169 	rsbeq	r6, r7, r9, ror #2
    10e4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
				wakeuptm (i);
    10e8:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    10ec:	00746163 	rsbseq	r6, r4, r3, ror #2
		for_all_tasks (i) {
    10f0:	6576656d 	ldrbvs	r6, [r6, #-1389]!	; 0xfffffa93
				d = i->Timer - znew;
    10f4:	745f746e 	ldrbvc	r7, [pc], #-1134	; 10fc <update_n_wake+0x9c>
    10f8:	66636d00 	strbtvs	r6, [r3], -r0, lsl #26
    10fc:	00656572 	rsbeq	r6, r5, r2, ror r5
		if ((word)(__pi_mintk - znew) < min) 
    1100:	74736177 	ldrbtvc	r6, [r3], #-375	; 0xfffffe89
    1104:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    1108:	00797274 	rsbseq	r7, r9, r4, ror r2
	__pi_old = znew;
    110c:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
}
    1110:	73656d00 	cmnvc	r5, #0, 26
	TCI_RUN_DELAY_TIMER;
    1114:	656d0073 	strbvs	r0, [sp, #-115]!	; 0xffffff8d
}
    1118:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
    111c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1120:	61625f69 	cmnvs	r2, r9, ror #30
    1124:	61747364 	cmnvs	r4, r4, ror #6
    1128:	5f006574 	svcpl	0x00006574
void proceed (word state) {
    112c:	5f69705f 	svcpl	0x0069705f
	prcdstate (__pi_curr, state);
    1130:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    1134:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	release;
    1138:	61775f69 	cmnvs	r7, r9, ror #30
    113c:	656d7469 	strbvs	r7, [sp, #-1129]!	; 0xfffffb97
void __pi_wait (aword event, word state) {
    1140:	726c006d 	rsbvc	r0, ip, #109	; 0x6d
	sint j = nevents (__pi_curr);
    1144:	6b00646e 	blvs	1a304 <__exidx_end+0x153d8>
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	616c6c69 	cmnvs	ip, r9, ror #24
    114c:	5f006c6c 	svcpl	0x00006c6c
    1150:	5f69705f 	svcpl	0x0069705f
		syserror (ENEVENTS, "sw");
    1154:	666d656d 	strbtvs	r6, [sp], -sp, ror #10
    1158:	00656572 	rsbeq	r6, r5, r2, ror r5
	setestate (__pi_curr->Events [j], state, event);
    115c:	6f6f425f 	svcvs	0x006f425f
	incwait (__pi_curr);
    1160:	6863006c 	stmdavs	r3!, {r2, r3, r5, r6}^
	setestate (__pi_curr->Events [j], state, event);
    1164:	006b6e75 	rsbeq	r6, fp, r5, ror lr
}
    1168:	61647075 	smcvs	18181	; 0x4705
    116c:	6e5f6574 	mrcvs	5, 2, r6, cr15, cr4, {3}
    1170:	6b61775f 	blvs	185eef4 <__ccfg+0x183ef4c>
void __pi_trigger (aword event) {
    1174:	5f5f0065 	svcpl	0x005f0065
	for_all_tasks (i) {
    1178:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
		for (j = 0; j < nevents (i); j++) {
    117c:	00646565 	rsbeq	r6, r4, r5, ror #10
    1180:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
    1184:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1188:	66656c64 	strbtvs	r6, [r5], -r4, ror #24
			if (i->Events [j] . Event == event) {
    118c:	5f5f0074 	svcpl	0x005f0074
    1190:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 10b8 <update_n_wake+0x58>	; <UNPREDICTABLE>
    1194:	70636d65 	rsbvc	r6, r3, r5, ror #26
				wakeupev (i, j);
    1198:	67640079 			; <UNDEFINED> instruction: 0x67640079
    119c:	0074756f 	rsbseq	r7, r4, pc, ror #10
	for_all_tasks (i) {
    11a0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
}
    11a4:	6974755f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
aword __pi_join (aword pid, word st) {
    11a8:	5f72656d 	svcpl	0x0072656d
	for_all_tasks (i) {
    11ac:	00746573 	rsbseq	r6, r4, r3, ror r5
    11b0:	6e756677 	mrcvs	6, 3, r6, cr5, cr7, {3}
	return 0;
    11b4:	61666e00 	cmnvs	r6, r0, lsl #28
		if ((aword)i == pid) {
    11b8:	5f006c69 	svcpl	0x00006c69
			__pi_wait (pid, st);
    11bc:	5f69705f 	svcpl	0x0069705f
}
    11c0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
	for_all_tasks (i) {
    11c4:	5f494400 	svcpl	0x00494400
    11c8:	00474953 	subeq	r4, r7, r3, asr r9
void delay (word d, word state) {
    11cc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	settstate (__pi_curr, state);
    11d0:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    11d4:	00746573 	rsbseq	r6, r4, r3, ror r5
    11d8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    11dc:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
	update_n_wake (d, YES);
    11e0:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    11e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	__pi_curr->Timer = __pi_old + d;
    11e8:	6f6a5f69 	svcvs	0x006a5f69
    11ec:	75006e69 	strvc	r6, [r0, #-3689]	; 0xfffff197
	inctimer (__pi_curr);
    11f0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    11f4:	65645f72 	strbvs	r5, [r4, #-3954]!	; 0xfffff08e
    11f8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
}
    11fc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1200:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
	if (fun == NULL)
    1204:	61636e72 	smcvs	14050	; 0x36e2
		return (int) __pi_curr;
    1208:	63740074 	cmnvs	r4, #116	; 0x74
    120c:	73715f76 	cmnvc	r1, #472	; 0x1d8
	for_all_tasks (i)
    1210:	00657a69 	rsbeq	r7, r5, r9, ror #20
}
    1214:	76657270 			; <UNDEFINED> instruction: 0x76657270
		if (i->code == fun)
    1218:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1220 <running+0x1c>
	for_all_tasks (i)
    121c:	625f7663 	subsvs	r7, pc, #103809024	; 0x6300000
    1220:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    1224:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
int __pi_strlen (const char *s) {
    1228:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	for (i = 0; *(s+i) != '\0'; i++);
    122c:	6f745f79 	svcvs	0x00745f79
}
    1230:	63740070 	cmnvs	r4, #112	; 0x70
	for (i = 0; *(s+i) != '\0'; i++);
    1234:	6f635f76 	svcvs	0x00635f76
	while (n--)
    1238:	6f72746e 	svcvs	0x0072746e
    123c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
		*dest++ = *src++;
    1240:	2f656d6f 	svccs	0x00656d6f
    1244:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1248:	442f6e69 	strtmi	r6, [pc], #-3689	; 1250 <__pi_memset+0x6>
	while (n--)
    124c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
}
    1250:	4f2f706f 	svcmi	0x002f706f
		*dest++ = c;
    1254:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
void adddevfunc (devreqfun_t rf, int loc) {
    1258:	502f5445 	eorpl	r5, pc, r5, asr #8
		syserror (EREQPAR, "addv");
    125c:	534f4349 	movtpl	r4, #62281	; 0xf349
		syserror (ERESOURCE, "addv");
    1260:	6369502f 	cmnvs	r9, #47	; 0x2f
	if (ioreq [loc] != NULL)
    1264:	502f534f 	eorpl	r5, pc, pc, asr #6
    1268:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		syserror (ERESOURCE, "addv");
    126c:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
	ioreq [loc] = rf;
    1270:	742f4974 	strtvc	r4, [pc], #-2420	; 1278 <adddevfunc+0x20>
}
    1274:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
    1278:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	69645f70 	stmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1280:	736f7073 	cmnvc	pc, #115	; 0x73
    1284:	63740065 	cmnvs	r4, #101	; 0x65
    1288:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    1290:	72746300 	rsbsvc	r6, r4, #0, 6
    1294:	6e75666c 	cdpvs	6, 7, cr6, cr5, cr12, {3}
		syserror (ENODEVICE, "io");
    1298:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    129c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	if (len == 0)
    12a0:	65675f79 	strbvs	r5, [r7, #-3961]!	; 0xfffff087
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	63740074 	cmnvs	r4, #116	; 0x74
    12a8:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
	if (ret >= 0)
    12ac:	74006e65 	strvc	r6, [r0], #-3685	; 0xfffff19b
	if (ret == -1) {
    12b0:	645f7663 	ldrbvs	r7, [pc], #-1635	; 12b8 <io+0x3c>
    12b4:	00706f72 	rsbseq	r6, r0, r2, ror pc
		if (retry == WNONE)
    12b8:	73796870 	cmnvc	r9, #112, 16	; 0x700000
		iowait (dev, operation, retry);
    12bc:	6f666e69 	svcvs	0x00666e69
    12c0:	706d6500 	rsbvc	r6, sp, r0, lsl #10
    12c4:	74007974 	strvc	r7, [r0], #-2420	; 0xfffff68c
			release;
    12c8:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	if (ret == -2) {
    12cc:	72655f79 	rsbvc	r5, r5, #484	; 0x1e4
		if (retry != WNONE) {
    12d0:	00657361 	rsbeq	r7, r5, r1, ror #6
    12d4:	70766374 	rsbsvc	r6, r6, r4, ror r3
			iowait (dev, operation, retry);
    12d8:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    12dc:	00686361 	rsbeq	r6, r8, r1, ror #6
			(ioreq [dev]) (NONE, buf, len);
    12e0:	6575716f 	ldrbvs	r7, [r5, #-367]!	; 0xfffffe91
    12e4:	00736575 	rsbseq	r6, r3, r5, ror r5
    12e8:	63745f5f 	cmnvs	r4, #380	; 0x17c
		(ioreq [dev]) (NONE, buf, len);
    12ec:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    12f0:	5f6d6574 	svcpl	0x006d6574
    12f4:	5f5f0073 	svcpl	0x005f0073
}
    12f8:	5f766374 	svcpl	0x00766374
	if (retry != WNONE) {
    12fc:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
		delay (-ret - 2, retry);
    1300:	00745f6d 	rsbseq	r5, r4, sp, ror #30
    1304:	63745f5f 	cmnvs	r4, #380	; 0x17c
    1308:	62685f76 	rsbvs	r5, r8, #472	; 0x1d8
    130c:	6b636f6c 	blvs	18dd0c4 <__ccfg+0x18bd11c>
		release;
    1310:	6100745f 	tstvs	r0, pc, asr r4
    1314:	00707474 	rsbseq	r7, r0, r4, ror r4
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1318:	65677275 	strbvs	r7, [r7, #-629]!	; 0xfffffd8b
    131c:	4500746e 	strmi	r7, [r0, #-1134]	; 0xfffffb92
    1320:	74725f72 	ldrbtvc	r5, [r2], #-3954	; 0xfffff08e
    1324:	73656400 	cmnvc	r5, #0, 8
    1328:	70697263 	rsbvc	r7, r9, r3, ror #4
		syserror (ERESOURCE, "mal1");
    132c:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
    1330:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1334:	6172655f 	cmnvs	r2, pc, asr r5
    1338:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133c:	655f7663 	ldrbvs	r7, [pc, #-1635]	; ce1 <__pi_release+0x81>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1340:	0070646e 	rsbseq	r6, r0, lr, ror #8
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1344:	70766374 	rsbsvc	r6, r6, r4, ror r3
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1348:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
    134c:	75717200 	ldrbvc	r7, [r1, #-512]!	; 0xfffffe00
}
    1350:	00657565 	rsbeq	r7, r5, r5, ror #10
    1354:	73727470 	cmnvc	r2, #112, 8	; 0x70000000
    1358:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
    135c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1360:	63740073 	cmnvs	r4, #115	; 0x73
    1364:	6e775f76 	mrcvs	15, 3, r5, cr7, cr6, {3}
void __pi_free (aword *ch) {
    1368:	74007370 	strvc	r7, [r0], #-880	; 0xfffffc90
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    136c:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
    1370:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
		syserror (EMALLOC, "malg");
    1374:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1378:	6f6c635f 	svcvs	0x006c635f
	mcfree [MA_NP] += m_size (ch);
    137c:	5f006573 	svcpl	0x00006573
		m_size (ch) ^= MALLOC_UMASK;
    1380:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    1384:	7365735f 	cmnvc	r5, #2080374785	; 0x7c000001
	mcfree [MA_NP] += m_size (ch);
    1388:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
	QFREE;
    138c:	7000745f 	andvc	r7, r0, pc, asr r4
	if (mevent [MA_NP] . nwait) {
    1390:	00737968 	rsbseq	r7, r3, r8, ror #18
    1394:	73796870 	cmnvc	r9, #112, 16	; 0x700000
		trigger ((aword)(&(mevent [MA_NP])));
    1398:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
		mevent [MA_NP] . nwait --;
    139c:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
}
    13a0:	00646575 	rsbeq	r6, r4, r5, ror r5
    13a4:	5f766374 	svcpl	0x00766374
    13a8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    13ac:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
void kill (aword pid) {
    13b0:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
		pid = (aword) __pi_curr;
    13b4:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
	j = NULL;
    13b8:	6f697373 	svcvs	0x00697373
	for_all_tasks (i) {
    13bc:	6374006e 	cmnvs	r4, #110	; 0x6e
	syserror (EREQPAR, "kpi");
    13c0:	635f7076 	cmpvs	pc, #118	; 0x76
    13c4:	656e6f6c 	strbvs	r6, [lr, #-3948]!	; 0xfffff094
		if ((aword)i == pid) {
    13c8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    13cc:	73615f70 	cmnvc	r1, #112, 30	; 0x1c0
				__PCB = i->Next;
    13d0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
			killev (i);
    13d4:	696c7000 	stmdbvs	ip!, {ip, sp, lr}^
			ufree (i);
    13d8:	63740064 	cmnvs	r4, #100	; 0x64
			if (i == __pi_curr)
    13dc:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    13e0:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
				release;
    13e4:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
				j->Next = i->Next;
    13e8:	74746170 	ldrbtvc	r6, [r4], #-368	; 0xfffffe90
    13ec:	006e7265 	rsbeq	r7, lr, r5, ror #4
    13f0:	5f766374 	svcpl	0x00766374
}
    13f4:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    13f8:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    13fc:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
	if (size < 8)
    1400:	00736574 	rsbseq	r6, r3, r4, ror r5
		_size = 2;
    1404:	63745f5f 	cmnvs	r4, #380	; 0x17c
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1408:	68715f76 	ldmdavs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
		_size = (((aword)size) + 3) >> 2;
    140c:	5f646165 	svcpl	0x00646165
		if (m_magic (chunk) != MALLOC_MAGIC)
    1410:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
		_size = (((aword)size) + 3) >> 2;
    1414:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
		if (mevent [MA_NP] . nfail != 255)
    1418:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    141c:	00687467 	rsbeq	r7, r8, r7, ror #8
			mevent [MA_NP] . nfail ++;
    1420:	70736964 	rsbsvc	r6, r3, r4, ror #18
		mnfree [MA_NP] = 0;
    1424:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1428:	706e725f 	rsbvc	r7, lr, pc, asr r2
		if (m_magic (chunk) != MALLOC_MAGIC)
    142c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    1430:	5f796870 	svcpl	0x00796870
			syserror (EMALLOC, "malc");
    1434:	00766372 	rsbseq	r6, r6, r2, ror r3
    1438:	65757162 	ldrbvs	r7, [r5, #-354]!	; 0xfffffe9e
		if (m_size (chunk) >= _size)
    143c:	70006575 	andvc	r6, r0, r5, ror r5
    1440:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
		chunk = m_nextp (chunk)) {
    1444:	5f00736e 	svcpl	0x0000736e
		m_setnextp (cc, m_nextp (chunk));
    1448:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144c:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
    1450:	5f6b636f 	svcpl	0x006b636f
			m_size (chunk) = _size;
    1454:	756f0073 	strbvc	r0, [pc, #-115]!	; 13e9 <kill+0x39>
			cc = chunk + _size + m_hdrlen;
    1458:	696f6774 	stmdbvs	pc!, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
    145c:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
			m_size (cc) = waste - m_hdrlen;
    1460:	5f707663 	svcpl	0x00707663
			QFREE;
    1464:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
		mevent [MA_NP] . nfail = 0;
    1468:	006c6f72 	rsbeq	r6, ip, r2, ror pc
		mcfree [MA_NP] -= m_size (chunk);
    146c:	7473655f 	ldrbtvc	r6, [r3], #-1375	; 0xfffffaa1
    1470:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1474:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    1478:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
		m_size (chunk) |= MALLOC_UMASK;
    147c:	75614600 	strbvc	r4, [r1, #-1536]!	; 0xfffffa00
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1480:	5349746c 	movtpl	r7, #37996	; 0x946c
		m_size (chunk) |= MALLOC_UMASK;
    1484:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
			mnfree [MA_NP] = mcfree [MA_NP];
    1488:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
}
    148c:	696d4e00 	stmdbvs	sp!, {r9, sl, fp, lr}^
    1490:	61485253 	cmpvs	r8, r3, asr r2
    1494:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1498:	655f0072 	ldrbvs	r0, [pc, #-114]	; 142e <__pi_malloc+0x2e>
    149c:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
    14a0:	62655f00 	rsbvs	r5, r5, #0, 30
    14a4:	2f007373 	svccs	0x00007373
aword __pi_fork (fsmcode func, aword data) {
    14a8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14ac:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    14b0:	2f6e6974 	svccs	0x006e6974
    14b4:	6b736544 	blvs	1cda9cc <__ccfg+0x1cbaa24>
		if ((j = __PCB) == NULL)
    14b8:	2f706f74 	svccs	0x00706f74
	i->Next = NULL;
    14bc:	4f534c4f 	svcmi	0x00534c4f
	i->data = data;
    14c0:	2f54454e 	svccs	0x0054454e
		if ((j = __PCB) == NULL)
    14c4:	4f434950 	svcmi	0x00434950
}
    14c8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			for (; j->Next != NULL; j = j->Next);
    14cc:	2f534f63 	svccs	0x00534f63
    14d0:	33314343 	teqcc	r1, #201326593	; 0xc000001
	return (aword) i;
    14d4:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
    14d8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
	if (mevent [MA_NP] . nwait != 255)
    14dc:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    14e0:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    14e4:	73625f00 	cmnvc	r2, #0, 30
		mevent [MA_NP] . nwait ++;
    14e8:	655f0073 	ldrbvs	r0, [pc, #-115]	; 147d <__pi_malloc+0x7d>
	wait ((aword)(&(mevent [MA_NP])), state);
    14ec:	61746164 	cmnvs	r4, r4, ror #2
    14f0:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
void diag (const char *mess, ...) {
    14f4:	61666544 	cmnvs	r6, r4, asr #10
    14f8:	48746c75 	ldmdami	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    14fc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
	diag_disable_int (a, is);
    1500:	67007265 	strvs	r7, [r0, -r5, ror #4]
    1504:	6e66705f 	mcrvs	0, 3, r7, cr6, cr15, {2}
    1508:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
				d = (bc == 16) ? 10000 : 1000000000;
    150c:	0073726f 	rsbseq	r7, r3, pc, ror #4
	diag_disable_int (a, is);
    1510:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
	while (*mess != '\0') {
    1514:	73654432 	cmnvc	r5, #838860800	; 0x32000000
	dgout ('\r');
    1518:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
	dgout ('\n');
    151c:	49746573 	ldmdbmi	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    1520:	43005253 	movwmi	r5, #595	; 0x253
    1524:	5f474643 	svcpl	0x00474643
	diag_wait (a);
    1528:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
	diag_enable_int (a, is);
    152c:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
    1530:	00305f44 	eorseq	r5, r0, r4, asr #30
}
    1534:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1538:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    153c:	4f4c5f54 	svcmi	0x004c5f54
		if (*mess == '%') {
    1540:	315f4441 	cmpcc	pc, r1, asr #8
    1544:	46434300 	strbmi	r4, [r3], -r0, lsl #6
			if (*mess == 'l') {
    1548:	4c425f47 	mcrrmi	15, 4, r5, r2, cr7
    154c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
				mess++;
    1550:	00474946 	subeq	r4, r7, r6, asr #18
				val = va_arg (ap, lword);
    1554:	47464343 	strbmi	r4, [r6, -r3, asr #6]
				bc = 32;
    1558:	4354525f 	cmpmi	r4, #-268435451	; 0xf0000005
				bc = 16;
    155c:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
			switch (*mess) {
    1560:	00544553 	subseq	r4, r4, r3, asr r5
    1564:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1568:	444f4d5f 	strbmi	r4, [pc], #-3423	; 1570 <diag+0x7c>
				dgout ('%');
    156c:	4f435f45 	svcmi	0x00435f45
    1570:	5f00464e 	svcpl	0x0000464e
				dgout (*mess);
    1574:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    1578:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	; <UNPREDICTABLE>
			switch (*mess) {
    157c:	2f656d6f 	svccs	0x00656d6f
					v = __pi_hex_enc_table [
    1580:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
					i += 4;
    1584:	442f6e69 	strtmi	r6, [pc], #-3689	; 158c <diag+0x98>
					(val >> (bc - i)) & 0xf];
    1588:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    158c:	4f2f706f 	svcmi	0x002f706f
					dgout (v);
    1590:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1594:	502f5445 	eorpl	r5, pc, r5, asr #8
				while (i < bc) {
    1598:	534f4349 	movtpl	r4, #62281	; 0xf349
			mess++;
    159c:	6369502f 	cmnvs	r9, #47	; 0x2f
					d /= 10;
    15a0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
				if ((val >> (bc - 1)) & 1) {
    15a4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    15a8:	63632f58 	cmnvs	r3, #88, 30	; 0x160
					dgout ('-');
    15ac:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
    15b0:	46434300 	strbmi	r4, [r3], -r0, lsl #6
						val |= 0xffff0000;
    15b4:	49535f47 	ldmdbmi	r3, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    15b8:	415f455a 	cmpmi	pc, sl, asr r5	; <UNPREDICTABLE>
    15bc:	445f444e 	ldrbmi	r4, [pc], #-1102	; 15c4 <diag+0xd0>
				d = (bc == 16) ? 10000 : 1000000000;
    15c0:	465f5349 	ldrbmi	r5, [pc], -r9, asr #6
    15c4:	5347414c 	movtpl	r4, #29004	; 0x714c
    15c8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
					v = (word) (val / d);
    15cc:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
					if (v || d == 1) break;
    15d0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 14c4 <__pi_fork+0x1c>
    15d4:	305f4341 	subscc	r4, pc, r1, asr #6
					d /= 10;
    15d8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
				d = (bc == 16) ? 10000 : 1000000000;
    15dc:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
					dgout (v + '0');
    15e0:	4d5f4545 	cfldr64mi	mvdx4, [pc, #-276]	; 14d4 <__pi_fork+0x2c>
    15e4:	315f4341 	cmpcc	pc, r1, asr #6
    15e8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
					d /= 10;
    15ec:	4f4d5f47 	svcmi	0x004d5f47
					val = val - (v * d);
    15f0:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
					if (d == 0) break;
    15f4:	5f464e4f 	svcpl	0x00464e4f
					v = (word) (val / d);
    15f8:	43430031 	movtmi	r0, #12337	; 0x3031
    15fc:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
				if (bc == 16)
    1600:	5f474643 	svcpl	0x00474643
				d = (bc == 16) ? 10000 : 1000000000;
    1604:	5f504154 	svcpl	0x00504154
					val &= 0xffff;
    1608:	5f504144 	svcpl	0x00504144
					dgout (*s);
    160c:	43430030 	movtmi	r0, #12336	; 0x3030
					s++;
    1610:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
				while (*s != '\0') {
    1614:	5f474643 	svcpl	0x00474643
    1618:	5f504154 	svcpl	0x00504154
			dgout (*mess++);
    161c:	5f504144 	svcpl	0x00504144
    1620:	63630031 	cmnvs	r3, #49	; 0x31
    1624:	745f6766 	ldrbvc	r6, [pc], #-1894	; 162c <diag+0x138>
    1628:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    162c:	43435f47 	movtmi	r5, #16199	; 0x3f47
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1630:	505f4746 	subspl	r4, pc, r6, asr #14
    1634:	5f544f52 	svcpl	0x00544f52
    1638:	5f373231 	svcpl	0x00373231
    163c:	43003639 	movwmi	r3, #1593	; 0x639
	^ entropy
    1640:	5f474643 	svcpl	0x00474643
}
    1644:	53415245 	movtpl	r5, #4677	; 0x1245
    1648:	4f435f45 	svcmi	0x00435f45
    164c:	4300464e 	movwmi	r4, #1614	; 0x64e
    1650:	5f474643 	svcpl	0x00474643
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1654:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	word cs = size + hblenb;
    1658:	4f52505f 	svcmi	0x0052505f
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165c:	31335f54 	teqcc	r3, r4, asr pc
    1660:	4300305f 	movwmi	r3, #95	; 0x5f
	p -> length = size;
    1664:	5f474643 	svcpl	0x00474643
}
    1668:	47414d49 	strbmi	r4, [r1, -r9, asr #26]
	if (p->attributes.b.queued) {
    166c:	41565f45 	cmpmi	r6, r5, asr #30
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1670:	5f44494c 	svcpl	0x0044494c
    1674:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1678:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		p->attributes.b.queued = 0;
    167c:	52465f47 	subpl	r5, r6, #284	; 0x11c
    1680:	4f5f5145 	svcmi	0x005f5145
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1684:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
	deq (p);	// Remove from queue
    1688:	43430054 	movtmi	r0, #12372	; 0x3054
}
    168c:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
	tfree ((address)p);
    1690:	5f474643 	svcpl	0x00474643
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1694:	544f5250 	strbpl	r5, [pc], #-592	; 169c <enq+0x8>
    1698:	5f33365f 	svcpl	0x0033365f
    169c:	43003233 	movwmi	r3, #563	; 0x233
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a0:	5f474643 	svcpl	0x00474643
    16a4:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
	if (q_empty (q))
    16a8:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    16ac:	4300305f 	movwmi	r3, #95	; 0x5f
		trigger (q);
    16b0:	5f474643 	svcpl	0x00474643
	if (p->attributes.b.urgent) {
    16b4:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
		p->u.bqueue.next = q->next;
    16b8:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
		p->u.bqueue.prev = q;
    16bc:	4300315f 	movwmi	r3, #351	; 0x15f
		q->next->prev = (qitem_t*) p;
    16c0:	5f474643 	svcpl	0x00474643
	p->attributes.b.queued = 1;
    16c4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    16c8:	4f52505f 	svcmi	0x0052505f
}
    16cc:	35395f54 	ldrcc	r5, [r9, #-3924]!	; 0xfffff0ac
		p->u.bqueue.prev = q->prev;
    16d0:	0034365f 	eorseq	r3, r4, pc, asr r6
		q->prev->next = (qitem_t*) p;
    16d4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		q->prev = (qitem_t*) p;
    16d8:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0xfffffaa1
    16dc:	5f464c5f 	svcpl	0x00464c5f
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e0:	004b4c43 	subeq	r4, fp, r3, asr #24
	deq (p);	// Soft dequeue, timer and hook left intact
    16e4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	switch (dv) {
    16e8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    16ec:	49545f47 	ldmdbmi	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    16f0:	54504f5f 	ldrbpl	r4, [r0], #-3935	; 0xfffff0a1
    16f4:	534e4f49 	movtpl	r4, #61257	; 0xef49
			p->attributes.b.urgent = 1;
    16f8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    16fc:	65725f4f 	ldrbvs	r5, [r2, #-3919]!	; 0xfffff0b1
			verify_ses (p, "dispose ses");
    1700:	69446461 	stmdbvs	r4, {r0, r5, r6, sl, sp, lr}^
    1704:	756a006f 	strbvc	r0, [sl, #-111]!	; 0xffffff91
    1708:	70006b6e 	andvc	r6, r0, lr, ror #22
    170c:	735f6e69 	cmpvc	pc, #1680	; 0x690
    1710:	6f736e65 	svcvs	0x00736e65
			verify_phy (p, "dispose phy");
    1714:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
    1718:	70006461 	andvc	r6, r0, r1, ror #8
}
    171c:	735f6e69 	cmpvc	pc, #1680	; 0x690
			enq (oqueues [p->attributes.b.phys], p);
    1720:	6f736e65 	svcvs	0x00736e65
			p->attributes.b.urgent = 1;
    1724:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    1728:	2f007469 	svccs	0x00007469
			verify_phy (p, "dispose phy");
    172c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1730:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1734:	2f6e6974 	svccs	0x006e6974
    1738:	6b736544 	blvs	1cdac50 <__ccfg+0x1cbaca8>
    173c:	2f706f74 	svccs	0x00706f74
    1740:	4f534c4f 	svcmi	0x00534c4f
			enq (oqueues [p->attributes.b.phys], p);
    1744:	2f54454e 	svccs	0x0054454e
    1748:	4f434950 	svcmi	0x00434950
}
    174c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			rlp (p);
    1750:	2f534f63 	svccs	0x00534f63
}
    1754:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1758:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    175c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    1760:	69702f73 	ldmdbvs	r0!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1764:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    1768:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    176c:	5400632e 	strpl	r6, [r0], #-814	; 0xfffffcd2
	if (b->attributes.b.outgoing) {
    1770:	006d7265 	rsbeq	r7, sp, r5, ror #4
	b = header (p);
    1774:	74636162 	strbtvc	r6, [r3], #-354	; 0xfffffe9e
	if (b->attributes.b.outgoing) {
    1778:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		verify_ses (b, "tcv02");
    177c:	6f626544 	svcvs	0x00626544
    1780:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
    1784:	6f682f00 	svcvs	0x00682f00
    1788:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 15dc <diag+0xe8>
    178c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		verify_plg (b, tcv_out, "tcv03");
    1790:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1794:	6f746b73 	svcvs	0x00746b73
    1798:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    179c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    17a0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    17a4:	2f534f43 	svccs	0x00534f43
    17a8:	4f636950 	svcmi	0x00636950
    17ac:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    17b0:	2f736269 	svccs	0x00736269
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b4:	622f4f49 	eorvs	r4, pc, #292	; 0x124
}
    17b8:	6f747475 	svcvs	0x00747475
		dispose (b, plugins [b->attributes.b.plugin] ->
    17bc:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
		rlp (b);
    17c0:	75627000 	strbvc	r7, [r2, #-0]!
}
    17c4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
		rlp (b);
    17c8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    17cc:	75625f69 	strbvc	r5, [r2, #-3945]!	; 0xfffff097
    17d0:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    17d4:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
    17d8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17dc:	63615f73 	cmnvs	r1, #460	; 0x1cc
    17e0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    17e4:	6f434500 	svcvs	0x00434500
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17e8:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
	va_start (ap, plid);
    17ec:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f0:	655f7469 	ldrbvs	r7, [pc, #-1129]	; 138f <__pi_free+0x27>
    17f4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17f8:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
    17fc:	6d63006f 	stclvs	0, cr0, [r3, #-444]!	; 0xfffffe44
    1800:	00305f64 	eorseq	r5, r0, r4, ror #30
    1804:	635f6565 	cmpvs	pc, #423624704	; 0x19400000
			syserror (ENODEVICE, "tcv04");
    1808:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
		syserror (EMALLOC, "tcv05");
    180c:	5f656500 	svcpl	0x00656500
	attp.b.outgoing = 1;
    1810:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    1814:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
    1818:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    181c:	64006574 	strvs	r6, [r0], #-1396	; 0xfffffa8c
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1820:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		if (descriptors [fd] == NULL)
    1824:	5f656500 	svcpl	0x00656500
    1828:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    182c:	6f435700 	svcvs	0x00435700
		return ERROR;
    1830:	6300746e 	movwvs	r7, #1134	; 0x46e
}
    1834:	335f646d 	cmpcc	pc, #1828716544	; 0x6d000000
    1838:	5f656500 	svcpl	0x00656500
    183c:	696e6170 	stmdbvs	lr!, {r4, r5, r6, r8, sp, lr}^
	s->attpattern.b.session = fd;
    1840:	65650063 	strbvs	r0, [r5, #-99]!	; 0xffffff9d
    1844:	6e79735f 	mrcvs	3, 3, r7, cr9, cr15, {2}
	descriptors [fd] = s;
    1848:	72660063 	rsbvc	r0, r6, #99	; 0x63
	q_init (&(s->rqueue));
    184c:	65006d6f 	strvs	r6, [r0, #-3439]	; 0xfffff291
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1850:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
    1854:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
    1858:	00727364 	rsbseq	r7, r2, r4, ror #6
    185c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 17a8 <tcv_endp+0x3c>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1860:	616d2f65 	cmnvs	sp, r5, ror #30
    1864:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1868:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	descriptors [fd] = s;
    186c:	706f746b 	rsbvc	r7, pc, fp, ror #8
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1870:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1874:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (s == NULL)
    1878:	4349502f 	movtmi	r5, #36911	; 0x902f
		syserror (EMALLOC, "tcv05");
    187c:	502f534f 	eorpl	r5, pc, pc, asr #6
    1880:	534f6369 	movtpl	r6, #62313	; 0xf369
    1884:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1888:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    188c:	61726f74 	cmnvs	r2, r4, ror pc
    1890:	732f6567 			; <UNDEFINED> instruction: 0x732f6567
    1894:	61726f74 	cmnvs	r2, r4, ror pc
    1898:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 1704 <dispose+0x24>
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    189c:	72353278 	eorsvc	r3, r5, #120, 4	; 0x80000007
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a0:	35333038 	ldrcc	r3, [r3, #-56]!	; 0xffffffc8
    18a4:	6300632e 	movwvs	r6, #814	; 0x32e
    18a8:	736f6c63 	cmnvc	pc, #25344	; 0x6300
	plugins [ord] = pl;
    18ac:	73640065 	cmnvc	r4, #101	; 0x65
	return 0;
    18b0:	00746174 	rsbseq	r6, r4, r4, ror r1
		return ERROR;
    18b4:	65706f63 	ldrbvs	r6, [r0, #-3939]!	; 0xfffff09d
}
    18b8:	7063006e 	rsbvc	r0, r3, lr, rrx
    18bc:	65007274 	strvs	r7, [r0, #-628]	; 0xfffffd8c
	verify_fds (fd, "tcv16");
    18c0:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
								Boolean urg) {
    18c4:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
    18c8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
	verify_fds (fd, "tcv16");
    18cc:	6f444500 	svcvs	0x00444500
    18d0:	7000656e 	andvc	r6, r0, lr, ror #10
    18d4:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
	verify_pld (s, tcv_frm, "tcv17");
    18d8:	61777700 	cmnvs	r7, r0, lsl #14
    18dc:	67007469 	strvs	r7, [r0, -r9, ror #8]
    18e0:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    18e4:	00657479 	rsbeq	r7, r5, r9, ror r4
    18e8:	5f747570 	svcpl	0x00747570
    18ec:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    18f0:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    18f4:	696c706e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, ip, sp, lr}^
	ptrs.head = (word) fd;
    18f8:	2f00656e 	svccs	0x0000656e
	ptrs.tail = (word) urg;
    18fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1900:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1904:	2f6e6974 	svccs	0x006e6974
		if (state != WNONE) {
    1908:	6b736544 	blvs	1cdae20 <__ccfg+0x1cbae78>
    190c:	2f706f74 	svccs	0x00706f74
}
    1910:	4f534c4f 	svcmi	0x00534c4f
			when (eid, state);
    1914:	2f54454e 	svccs	0x0054454e
    1918:	4f434950 	svcmi	0x00434950
			release;
    191c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1920:	2f534f63 	svccs	0x00534f63
    1924:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    1928:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    192c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1930:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    1934:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    1938:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    193c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
		if (state != WNONE) {
    1940:	72657300 	rsbvc	r7, r5, #0, 6
    1944:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
			tmwait (state);
    1948:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
    194c:	2f656d6f 	svccs	0x00656d6f
	b->attributes = s->attpattern;
    1950:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
		b->attributes.b.urgent = 1;
    1954:	442f6e69 	strtmi	r6, [pc], #-3689	; 195c <tcv_wnps+0x9c>
    1958:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	b->u.pointers.head = ptrs.head;
    195c:	4f2f706f 	svcmi	0x002f706f
	b->u.pointers.tail = length;
    1960:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	return (address) (b + 1);
    1964:	502f5445 	eorpl	r5, pc, r5, asr #8
    1968:	534f4349 	movtpl	r4, #62281	; 0xf349
    196c:	6369502f 	cmnvs	r9, #47	; 0x2f
    1970:	502f534f 	eorpl	r5, pc, pc, asr #6
    1974:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1978:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    197c:	2f6c6169 	svccs	0x006c6169
    1980:	5f726573 	svcpl	0x00726573
    1984:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
	verify_fph (phy, "tcv23");
    1988:	2f00632e 	svccs	0x0000632e
    198c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1990:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1994:	2f6e6974 	svccs	0x006e6974
}
    1998:	6b736544 	blvs	1cdaeb0 <__ccfg+0x1cbaf08>
	return (physical [phy]) (opt, arg);
    199c:	2f706f74 	svccs	0x00706f74
    19a0:	4f534c4f 	svcmi	0x00534c4f
    19a4:	2f54454e 	svccs	0x0054454e
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19a8:	4f434950 	svcmi	0x00434950
	if (opt < 0) {
    19ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		if (fd < 0)
    19b0:	2f534f63 	svccs	0x00534f63
		if (opt == PHYSOPT_PLUGINFO) {
    19b4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
			if (fd >= TCV_MAX_PLUGS)
    19b8:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
			if ((p = plugins [fd]) == NULL)
    19bc:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    19c0:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
}
    19c4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
		if (fd >= TCV_MAX_PHYS)
    19c8:	7300632e 	movwvc	r6, #814	; 0x32e
		return physinfo [fd];
    19cc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    19d0:	6900666e 	stmdbvs	r0, {r1, r2, r3, r5, r6, r9, sl, sp, lr}
	verify_fds (fd, "tcv22");
    19d4:	65757373 	ldrbvs	r7, [r5, #-883]!	; 0xfffffc8d
    19d8:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    19dc:	646f6d00 	strbtvs	r6, [pc], #-3328	; 19e4 <tcv_control+0x3c>
    19e0:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    19e4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
}
    19e8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19ec:	4e646e61 	cdpmi	14, 6, cr6, cr4, cr1, {3}
    19f0:	4162006f 	cmnmi	r2, pc, rrx
			return 0;
    19f4:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    19f8:	61745364 	cmnvs	r4, r4, ror #6
    19fc:	00737574 	rsbseq	r7, r3, r4, ror r5
    1a00:	6f5f6672 	svcvs	0x005f6672
    1a04:	6672006e 	ldrbtvs	r0, [r2], -lr, rrx
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a08:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1a0c:	61566200 	cmpvs	r6, r0, lsl #4
	if (dsp != TCV_DSP_PASS) {
    1a10:	6e654c72 	mcrvs	12, 3, r4, cr5, cr2, {3}
		if (ses == NONE)
    1a14:	6b507000 	blvs	141da1c <__ccfg+0x13fda74>
			syserror (EREQPAR, "tcv26");
    1a18:	65630074 	strbvs	r0, [r3, #-116]!	; 0xffffff8c
		verify_fds (ses, "tcv27");
    1a1c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1a20:	71657246 	cmnvc	r5, r6, asr #4
    1a24:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1a28:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
    1a2c:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
		if ((p = apb (size)) != NULL) {
    1a30:	6b73666e 	blvs	1cdb3f0 <__ccfg+0x1cbb448>
    1a34:	63746150 	cmnvs	r4, #80, 2
		return NULL;
    1a38:	68770068 	ldmdavs	r7!, {r3, r5, r6}^
			p->attributes = descriptors [ses] -> attpattern;
    1a3c:	6e657469 	cdpvs	4, 6, cr7, cr5, cr9, {3}
			dispose (p, dsp);
    1a40:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
			p->attributes = descriptors [ses] -> attpattern;
    1a44:	63667200 	cmnvs	r6, #0, 4
			p->attributes.b.outgoing = 0;
    1a48:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
			dispose (p, dsp);
    1a4c:	4f52505f 	svcmi	0x0052505f
			return (address)(p + 1);
    1a50:	53435f50 	movtpl	r5, #16208	; 0x3f50
    1a54:	7000735f 	andvc	r7, r0, pc, asr r3
	if ((p = apb (size)) != NULL)
    1a58:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
    1a5c:	00676972 	rsbeq	r6, r7, r2, ror r9
		return (address)(p + 1);
    1a60:	72546672 	subsvc	r6, r4, #119537664	; 0x7200000
    1a64:	745f6d69 	ldrbvc	r6, [pc], #-3433	; 1a6c <tcvp_new+0x64>
    1a68:	75627200 	strbvc	r7, [r2, #-512]!	; 0xfffffe00
    1a6c:	006c6666 	rsbeq	r6, ip, r6, ror #12
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a70:	4c5f5244 	lfmmi	f5, 2, [pc], {68}	; 0x44
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a74:	5f504f4f 	svcpl	0x00504f4f
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a78:	4f70005f 	svcmi	0x0070005f
    1a7c:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
		syserror (EREQPAR, "tcv28");
    1a80:	52620074 	rsbpl	r0, r2, #116	; 0x74
		syserror (EMALLOC, "tcv29");
    1a84:	61657065 	cmnvs	r5, r5, rrx
	physical [phy] = ps;
    1a88:	006b4f74 	rsbeq	r4, fp, r4, ror pc
	physinfo [phy] = info;
    1a8c:	4978526e 	ldmdbmi	r8!, {r1, r2, r3, r5, r6, r9, ip, lr}^
    1a90:	726f6e67 	rsbvc	r6, pc, #1648	; 0x670
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a94:	66006465 	strvs	r6, [r0], -r5, ror #8
    1a98:	6f4d6365 	svcvs	0x004d6365
    1a9c:	6e006564 	cfsh32vs	mvfx6, mvfx0, #52
		syserror (EMALLOC, "tcv29");
    1aa0:	6f4e7852 	svcvs	0x004e7852
    1aa4:	666f006b 	strbtvs	r0, [pc], -fp, rrx
	q_init (q);
    1aa8:	6c656466 	cfstrdvs	mvd6, [r5], #-408	; 0xfffffe68
}
    1aac:	70007961 	andvc	r7, r0, r1, ror #18
    1ab0:	6d616572 	cfstr64vs	mvdx6, [r1, #-456]!	; 0xfffffe38
    1ab4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1ab8:	75437000 	strbvc	r7, [r3, #-0]
    1abc:	6e457272 	mcrvs	2, 2, r7, cr5, cr2, {3}
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac0:	00797274 	rsbseq	r7, r9, r4, ror r2
	verify_fph (phy, "tcv30");
    1ac4:	49717269 	ldmdbmi	r1!, {r0, r3, r5, r6, r9, ip, sp, lr}^
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac8:	0076746e 	rsbseq	r7, r6, lr, ror #8
    1acc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
	verify_fph (phy, "tcv30");
    1ad0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    1ad4:	726f6600 	rsbvc	r6, pc, #0, 12
    1ad8:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1adc:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    1ae0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae4:	6d695474 	cfstrdvs	mvd5, [r9, #-464]!	; 0xfffffe30
    1ae8:	41620065 	cmnmi	r2, r5, rrx
		if (plugins [plg] == NULL)
    1aec:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    1af0:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af4:	61747365 	cmnvs	r4, r5, ror #6
}
    1af8:	7000706d 	andvc	r7, r0, sp, rrx
    1afc:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b00:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    1b04:	46520079 			; <UNDEFINED> instruction: 0x46520079
    1b08:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b0c:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    1b10:	69646152 	stmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    1b14:	7669446f 	strbtvc	r4, [r9], -pc, ror #8
    1b18:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1b1c:	65710070 	ldrbvs	r0, [r1, #-112]!	; 0xffffff90
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b20:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
	len -= (ap.head + ap.tail);
    1b24:	746b7000 	strbtvc	r7, [fp], #-0
    1b28:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1b2c:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b30:	63635f73 	cmnvs	r3, #460	; 0x1cc
    1b34:	30353331 	eorscc	r3, r5, r1, lsr r3
    1b38:	31636300 	cmncc	r3, r0, lsl #6
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b3c:	5f303533 	svcpl	0x00303533
    1b40:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1b44:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
	return 1;
    1b48:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1b4c:	465f444d 	ldrbmi	r4, [pc], -sp, asr #8
    1b50:	00735f53 	rsbseq	r5, r3, r3, asr pc
    1b54:	5f636672 	svcpl	0x00636672
    1b58:	5f444d43 	svcpl	0x00444d43
	verify_fph (phy, "tcv32");
    1b5c:	745f5346 	ldrbvc	r5, [pc], #-838	; 1b64 <tcvphy_get+0x8>
    1b60:	50787400 	rsbspl	r7, r8, r0, lsl #8
    1b64:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1b68:	42787200 	rsbsmi	r7, r8, #0, 4
    1b6c:	70610077 	rsbvc	r0, r1, r7, ror r0
    1b70:	47796c70 			; <UNDEFINED> instruction: 0x47796c70
	oq = oqueues [phy];
    1b74:	73666e65 	cmnvc	r6, #1616	; 0x650
	b = q_first (oq);
    1b78:	7461506b 	strbtvc	r5, [r1], #-107	; 0xffffff95
	if (q_end (b, oq)) {
    1b7c:	63006863 	movwvs	r6, #2147	; 0x863
	*len = b->length;
    1b80:	6e6e6168 	powvsez	f6, f6, #0.0
	deq (b);	// Dequeue the packet ...
    1b84:	73006c65 	movwvc	r6, #3173	; 0xc65
}
    1b88:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
		return NULL;
    1b8c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1b90:	75416200 	strbvc	r6, [r1, #-512]	; 0xfffffe00
    1b94:	6c466f74 	mcrrvs	15, 7, r6, r6, cr4
    1b98:	43687375 	cmnmi	r8, #-738197503	; 0xd4000001
	verify_fph (phy, "tcv33");
    1b9c:	72456372 	subvc	r6, r5, #-939524095	; 0xc8000001
    1ba0:	6f630072 	svcvs	0x00630072
    1ba4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    1ba8:	72466652 	subvc	r6, r6, #85983232	; 0x5200000
    1bac:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
    1bb0:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
	oq = oqueues [phy];
    1bb4:	6f4d7854 	svcvs	0x004d7854
	b = q_first (oq);
    1bb8:	61006564 	tstvs	r0, r4, ror #10
		return NULL;
    1bbc:	6f6c616e 	svcvs	0x006c616e
	return (address)(b + 1);
    1bc0:	67664367 	strbvs	r4, [r6, -r7, ror #6]!
}
    1bc4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1bc8:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    1bcc:	646d4361 	strbtvs	r4, [sp], #-865	; 0xfffffc9f
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
	verify_plg (b, tcv_xmt, "tcv34");
    1bd4:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
	hblock_t *b = header (pkt);
    1bd8:	00766e49 	rsbseq	r6, r6, r9, asr #28
	verify_plg (b, tcv_xmt, "tcv34");
    1bdc:	71724970 	cmnvc	r2, r0, ror r9
    1be0:	63746150 	cmnvs	r4, #80, 2
    1be4:	50700068 	rsbspl	r0, r0, r8, rrx
    1be8:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1bec:	00636556 	rsbeq	r6, r3, r6, asr r5
    1bf0:	43434652 	movtmi	r4, #13906	; 0x3652
    1bf4:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bf8:	73694474 	cmnvc	r9, #116, 8	; 0x74000000
}
    1bfc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c00:	78616d00 	stmdavc	r1!, {r8, sl, fp, sp, lr}^
    1c04:	4c746b50 			; <UNDEFINED> instruction: 0x4c746b50
    1c08:	63006e65 	movwvs	r6, #3685	; 0xe65
}
    1c0c:	4372726f 	cmnmi	r2, #-268435450	; 0xf0000006
    while(1)
    1c10:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
{
    1c14:	61720067 	cmnvs	r2, r7, rrx
    SetupTrimDevice();
    1c18:	62003074 	andvs	r3, r0, #116	; 0x74
    pui32Src = &_etext;
    1c1c:	4d736169 	ldfmie	f6, [r3, #-420]!	; 0xfffffe5c
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c20:	0065646f 	rsbeq	r6, r5, pc, ror #8
    __asm("    ldr     r0, =_bss\n"
    1c24:	43434652 	movtmi	r4, #13906	; 0x3652
    1c28:	49306570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, sp, lr}
    1c2c:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
    1c30:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1c34:	6e496200 	cdpvs	2, 4, cr6, cr9, cr0, {0}
   main();
    1c38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    FaultISR();
    1c3c:	63724365 	cmnvs	r2, #-1811939327	; 0x94000001
        *pui32Dest++ = *pui32Src++;
    1c40:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1c44:	49676966 	stmdbmi	r7!, {r1, r2, r5, r6, r8, fp, sp, lr}^
    1c48:	63644166 	cmnvs	r4, #-2147483623	; 0x80000019
    1c4c:	63667200 	cmnvs	r6, #0, 4
    1c50:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    1c54:	4f52505f 	svcmi	0x0052505f
    1c58:	58525f50 	ldmdapl	r2, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1c5c:	6500735f 	strvs	r7, [r0, #-863]	; 0xfffffca1
static byte get_byte () {
    1c60:	7254646e 	subsvc	r6, r4, #1845493760	; 0x6e000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c64:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    1c68:	66720072 			; <UNDEFINED> instruction: 0x66720072
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c6c:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1c70:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
		if (ee_inp)
    1c74:	435f504f 	cmpmi	pc, #79	; 0x4f
			b |= 1;
    1c78:	00745f53 	rsbseq	r5, r4, r3, asr pc
    1c7c:	6e6f7266 	cdpvs	2, 6, cr7, cr15, cr6, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c80:	646e4574 	strbtvs	r4, [lr], #-1396	; 0xfffffa8c
	for (b = 0, i = 0; i < 8; i++) {
    1c84:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
}
    1c88:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1c8c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1c90:	70006f4e 	andvc	r6, r0, lr, asr #30
static void put_byte (byte b) {
    1c94:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
    1c98:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    1c9c:	70795464 	rsbsvc	r5, r9, r4, ror #8
    1ca0:	6d630065 	stclvs	0, cr0, [r3, #-404]!	; 0xfffffe6c
		if (b & 0x80)
    1ca4:	73635f64 	cmnvc	r3, #100, 30	; 0x190
    1ca8:	73737200 	cmnvc	r3, #0, 4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cac:	72685469 	rsbvc	r5, r8, #1761607680	; 0x69000000
	for (i = 0; i < 8; i++) {
    1cb0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
		b <<= 1;
    1cb4:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
	for (i = 0; i < 8; i++) {
    1cb8:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
}
    1cbc:	61565200 	cmpvs	r6, r0, lsl #4
    1cc0:	6f63006c 	svcvs	0x0063006c
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc4:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    1cc8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	put_byte (cmd);
    1ccc:	636e4962 	cmnvs	lr, #1605632	; 0x188000
    1cd0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
}
    1cd4:	00726448 	rsbseq	r6, r2, r8, asr #8
    1cd8:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
static void wwait (word st, word del) {
    1cdc:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
    1ce0:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1ce8 <wwait+0xc>
    1ce4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
	while (dopen && (rdsr () & 1)) {
    1ce8:	614c7000 	mrsvs	r7, (UNDEF: 76)
    1cec:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
    1cf0:	00797274 	rsbseq	r7, r9, r4, ror r2
    1cf4:	4278526e 	rsbsmi	r5, r8, #-536870906	; 0xe0000006
	put_byte (CMD_RDSR);
    1cf8:	75466675 	strbvc	r6, [r6, #-1653]	; 0xfffff98b
	r = get_byte ();
    1cfc:	72006c6c 	andvc	r6, r0, #108, 24	; 0x6c00
    1d00:	63615f78 	cmnvs	r1, #120, 30	; 0x1e0
	while (dopen && (rdsr () & 1)) {
    1d04:	33697500 	cmncc	r9, #0, 10
}
    1d08:	73614d32 	cmnvc	r1, #3200	; 0xc80
		if (st == WNONE)
    1d0c:	7363006b 	cmnvc	r3, #107	; 0x6b
    1d10:	54646e45 	strbtpl	r6, [r4], #-3653	; 0xfffff1bb
			mdelay (1);
    1d14:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1d18:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
			delay (del, st);
    1d1c:	52746942 	rsbspl	r6, r4, #1081344	; 0x108000
    1d20:	72657665 	rsbvc	r7, r5, #105906176	; 0x6500000
			release;
    1d24:	006c6173 	rsbeq	r6, ip, r3, ror r1
    1d28:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    1d2c:	30796d6d 	rsbscc	r6, r9, sp, ror #26
static void ready () {
    1d30:	6d797300 	ldclvs	3, cr7, [r9, #-0]
	if (dopen) {
    1d34:	526c6f62 	rsbpl	r6, ip, #392	; 0x188
		wwait (WNONE, 1);
    1d38:	00657461 	rsbeq	r7, r5, r1, ror #8
    1d3c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1d40:	7562725f 	strbvc	r7, [r2, #-607]!	; 0xfffffda1
	dstat = 0;
    1d44:	00736666 	rsbseq	r6, r3, r6, ror #12
}
    1d48:	78654e70 	stmdavc	r5!, {r4, r5, r6, r9, sl, fp, lr}^
    1d4c:	00704f74 	rsbseq	r4, r0, r4, ror pc
    1d50:	46746e69 	ldrbtmi	r6, [r4], -r9, ror #28
	udelay (1);
    1d54:	00716572 	rsbseq	r6, r1, r2, ror r5
    1d58:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
	udelay (1);
    1d5c:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
		dopen = DOPEN_TEMP;
    1d60:	67496873 	smlsldxvs	r6, r9, r3, r8
    1d64:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
    1d68:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
    1d6c:	61725f63 	cmnvs	r2, r3, ror #30
static void cclose () {
    1d70:	4f6f6964 	svcmi	0x006f6964
	if (dopen == DOPEN_TEMP) {
    1d74:	00745f70 	rsbseq	r5, r4, r0, ror pc
    1d78:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
		wwait (WNONE, 1);
    1d7c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1d80:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
	cmd_0 (CMD_DP);
    1d84:	74617000 	strbtvc	r7, [r1], #-0
    1d88:	6d496863 	stclvs	8, cr6, [r9, #-396]	; 0xfffffe74
		dopen = 0;
    1d8c:	47656761 	strbmi	r6, [r5, -r1, ror #14]!
}
    1d90:	73666e65 	cmnvc	r6, #1616	; 0x650
word ee_open () {
    1d94:	6672006b 	ldrbtvs	r0, [r2], -fp, rrx
	ready ();
    1d98:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
	dopen = DOPEN_PERM;
    1d9c:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    1da0:	726f4361 	rsbvc	r4, pc, #-2080374783	; 0x84000001
}
    1da4:	46620072 			; <UNDEFINED> instruction: 0x46620072
	if (dopen) {
    1da8:	66664f73 	uqsub16vs	r4, r6, r3
    1dac:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
		dopen = DOPEN_TEMP;
    1db0:	5f465200 	svcpl	0x00465200
		cclose ();
    1db4:	46646d63 	strbtmi	r6, [r4], -r3, ror #26
}
    1db8:	72700073 	rsbsvc	r0, r0, #115	; 0x73
int ser_in (word st, char *buf, int len) {
    1dbc:	436d6165 	cmnmi	sp, #1073741849	; 0x40000019
    1dc0:	00666e6f 	rsbeq	r6, r6, pc, ror #28
	if (len == 0)
    1dc4:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
	if (__inpline == NULL) {
    1dc8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xfffff0a9
		if ((prcs = running (__inserial)) == 0) {
    1dcc:	74706f00 	ldrbtvc	r6, [r0], #-3840	; 0xfffff100
    1dd0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
			prcs = runthread (__inserial);
    1dd4:	63746170 	cmnvs	r4, #112, 2
    1dd8:	6e654768 	cdpvs	7, 6, cr4, cr5, cr8, {3}
			if (prcs == 0) {
    1ddc:	526b7366 	rsbpl	r7, fp, #-1744830463	; 0x98000001
				npwait (st);
    1de0:	2f006566 	svccs	0x00006566
		release;
    1de4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		join (prcs, st);
    1de8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1dec:	2f6e6974 	svccs	0x006e6974
	if (*__inpline == NULL) // bin cmd
    1df0:	6b736544 	blvs	1cdb308 <__ccfg+0x1cbb360>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df4:	2f706f74 	svccs	0x00706f74
	if (prcs >= len)
    1df8:	4f534c4f 	svcmi	0x00534c4f
		prcs = len-1;
    1dfc:	2f54454e 	svccs	0x0054454e
	memcpy (buf, __inpline, prcs);
    1e00:	4f434950 	svcmi	0x00434950
    1e04:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1e08:	2f534f63 	svccs	0x00534f63
	ufree (__inpline);
    1e0c:	33314343 	teqcc	r1, #201326593	; 0xc000001
	__inpline = NULL;
    1e10:	722f5858 	eorvc	r5, pc, #88, 16	; 0x580000
	if (*buf) // if it's NULL, it's a bin cmd
    1e14:	6f727066 	svcvs	0x00727066
		buf [prcs] = '\0';
    1e18:	00632e70 	rsbeq	r2, r3, r0, ror lr
}
    1e1c:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
		prcs = strlen (__inpline);
    1e20:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    1e24:	61720065 	cmnvs	r2, r5, rrx
		return 0;
    1e28:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    1e2c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    1e30:	72726f63 	rsbsvc	r6, r2, #396	; 0x18c
int ser_outf (word st, const char *m, ...) {
    1e34:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    1e38:	7000646f 	andvc	r6, r0, pc, ror #8
	if ((prcs = running (__outserial)) != 0) {
    1e3c:	7267756c 	rsbvc	r7, r7, #108, 10	; 0x1b000000
    1e40:	46520074 			; <UNDEFINED> instruction: 0x46520074
		join (prcs, st);
    1e44:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    1e48:	43746e49 	cmnmi	r4, #1168	; 0x490
		release;
    1e4c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e50:	756c7000 	strbvc	r7, [ip, #-0]!
    1e54:	00686367 	rsbeq	r6, r8, r7, ror #6
    1e58:	61746172 	cmnvs	r4, r2, ror r1
		umwait (st);
    1e5c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1e60:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	if (runstrand (__outserial, buf) == 0) {
    1e64:	5274756f 	rsbspl	r7, r4, #465567744	; 0x1bc00000
    1e68:	66007365 	strvs	r7, [r0], -r5, ror #6
    1e6c:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
		ufree (buf);
    1e70:	71657246 	cmnvc	r5, r6, asr #4
		npwait (st);
    1e74:	65727000 	ldrbvs	r7, [r2, #-0]!
}
    1e78:	6c616353 	stclvs	3, cr6, [r1], #-332	; 0xfffffeb4
    1e7c:	536e0065 	cmnpl	lr, #101	; 0x65
    1e80:	74694277 	strbtvc	r4, [r9], #-631	; 0xfffffd89
    1e84:	75620073 	strbvc	r0, [r2, #-115]!	; 0xffffff8d
int ser_inf (word st, const char *fmt, ...) {
    1e88:	704f7973 	subvc	r7, pc, r3, ror r9	; <UNPREDICTABLE>
    1e8c:	446f6c00 	strbtmi	r6, [pc], #-3072	; 1e94 <ser_inf+0xc>
	if (fmt == NULL)
    1e90:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
	if (__inpline == NULL) {
    1e94:	73007265 	movwvc	r7, #613	; 0x265
		if ((prcs = running (__inserial)) == 0) {
    1e98:	69746174 	ldmdbvs	r4!, {r2, r4, r5, r6, r8, sp, lr}^
    1e9c:	66720064 	ldrbtvs	r0, [r2], -r4, rrx
			prcs = runthread (__inserial);
    1ea0:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    1ea4:	635f6863 	cmpvs	pc, #6488064	; 0x630000
			if (prcs == 0) {
    1ea8:	675f6570 			; <UNDEFINED> instruction: 0x675f6570
				npwait (st);
    1eac:	73666e65 	cmnvc	r6, #1616	; 0x650
		release;
    1eb0:	7872006b 	ldmdavc	r2!, {r0, r1, r3, r5, r6}^
		join (prcs, st);
    1eb4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1eb8:	6f4e6200 	svcvs	0x004e6200
	va_start (ap, fmt);
    1ebc:	6f507346 	svcvs	0x00507346
	prcs = vscan (__inpline, fmt, ap);
    1ec0:	55726577 	ldrbpl	r6, [r2, #-1399]!	; 0xfffffa89
    1ec4:	524f0070 	subpl	r0, pc, #112	; 0x70
	ufree (__inpline);
    1ec8:	746e7645 	strbtvc	r7, [lr], #-1605	; 0xfffff9bb
	__inpline = NULL;
    1ecc:	73466200 	movtvc	r6, #25088	; 0x6200
}
    1ed0:	4266664f 	rsbmi	r6, r6, #82837504	; 0x4f00000
    1ed4:	00797375 	rsbseq	r7, r9, r5, ror r3
    1ed8:	74617276 	strbtvc	r7, [r1], #-630	; 0xfffffd8a
		return 0;
    1edc:	78740065 	ldmdavc	r4!, {r0, r2, r5, r6}^
    1ee0:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
    1ee4:	4d620073 	stclmi	0, cr0, [r2, #-460]!	; 0xfffffe34
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1ee8:	69466273 	stmdbvs	r6, {r0, r1, r4, r5, r6, r9, sp, lr}^
    1eec:	00747372 	rsbseq	r7, r4, r2, ror r3
    1ef0:	645f7872 	ldrbvs	r7, [pc], #-2162	; 1ef8 <plugch+0x10>
	RF_cmdFs.frequency = 
    1ef4:	78720065 	ldmdavc	r2!, {r0, r2, r5, r6}^
}
    1ef8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    1efc:	616e655f 	cmnvs	lr, pc, asr r5
    1f00:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1f04:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
static int option (int opt, address val) {
    1f08:	30737365 	rsbscc	r7, r3, r5, ror #6
    1f0c:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    1f10:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1f14:	66720031 			; <UNDEFINED> instruction: 0x66720031
    1f18:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1f1c:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1f20:	525f504f 	subspl	r5, pc, #79	; 0x4f
    1f24:	4f494441 	svcmi	0x00494441
    1f28:	5649445f 			; <UNDEFINED> instruction: 0x5649445f
    1f2c:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    1f30:	735f5055 	cmpvc	pc, #85	; 0x55
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f34:	63667200 	cmnvs	r6, #0, 4
    1f38:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
			goto RVal;
    1f3c:	4f52505f 	svcmi	0x0052505f
			_BIS (dstate, DSTATE_RXON);
    1f40:	41525f50 	cmpmi	r2, r0, asr pc
    1f44:	5f4f4944 	svcpl	0x004f4944
	int ret = 0;
    1f48:	5f564944 	svcpl	0x00564944
			p_trigger (drvprcs, qevent);
    1f4c:	55544553 	ldrbpl	r4, [r4, #-1363]	; 0xfffffaad
    1f50:	00745f50 	rsbseq	r5, r4, r0, asr pc
    1f54:	5f636672 	svcpl	0x00636672
    1f58:	5f444d43 	svcpl	0x00444d43
    1f5c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1f60:	5f58525f 	svcpl	0x0058525f
    1f64:	61700074 	cmnvs	r0, r4, ror r0
    1f68:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    1f6c:	526e0065 	rsbpl	r0, lr, #101	; 0x65
    1f70:	6f745378 	svcvs	0x00745378
}
    1f74:	64657070 	strbtvs	r7, [r5], #-112	; 0xffffff90
			_BIC (dstate, DSTATE_RXON);
    1f78:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
    1f7c:	69737352 	ldmdbvs	r3!, {r1, r4, r6, r8, r9, ip, sp, lr}^
			statid = (val == NULL) ? 0 : *val;
    1f80:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
    1f84:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
	int ret = 0;
    1f88:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
			ret = (int) statid;
    1f8c:	78720064 	ldmdavc	r2!, {r2, r5, r6}^
	if (val != NULL)
    1f90:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		*val = ret;
    1f94:	65527000 	ldrbvs	r7, [r2, #-0]
			ret = rbuffl + 2;
    1f98:	65764f67 	ldrbvs	r4, [r6, #-3943]!	; 0xfffff099
    1f9c:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
			if (val != NULL) {
    1fa0:	61720065 	cmnvs	r2, r5, rrx
				memcpy (val, &rxstat,
    1fa4:	5f726d74 	svcpl	0x00726d74
    1fa8:	41620074 	smcmi	8196	; 0x2004
				memset (&rxstat, 0, 
    1fac:	6e657070 	mcrvs	0, 3, r7, cr5, cr0, {3}
    1fb0:	73735264 	cmnvc	r3, #100, 4	; 0x40000006
			if (val == NULL)
    1fb4:	66720069 	ldrbtvs	r0, [r2], -r9, rrx
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fb8:	72705f63 	rsbsvc	r5, r0, #396	; 0x18c
    1fbc:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
				utimer_set (bckf_timer, *val);
    1fc0:	7074754f 	rsbsvc	r7, r4, pc, asr #10
    1fc4:	735f7475 	cmpvc	pc, #1962934272	; 0x75000000
    1fc8:	63667200 	cmnvs	r6, #0, 4
			for (ret = 0; ret < 8; ret++)
    1fcc:	6f72705f 	svcvs	0x0072705f
				if (RF_cmdPropRadioDivSetup.txPower
    1fd0:	4f785270 	svcmi	0x00785270
					== patable [ret])
    1fd4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
				if (RF_cmdPropRadioDivSetup.txPower
    1fd8:	00745f74 	rsbseq	r5, r4, r4, ror pc
			for (ret = 0; ret < 8; ret++)
    1fdc:	43434652 	movtmi	r4, #13906	; 0x3652
    1fe0:	6b636f6c 	blvs	18ddd98 <__ccfg+0x18bddf0>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe4:	61736944 	cmnvs	r3, r4, asr #18
    1fe8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1fec:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff0:	79536769 	ldmdbvc	r3, {r0, r3, r5, r6, r8, r9, sl, sp, lr}^
    1ff4:	0068746e 	rsbeq	r7, r8, lr, ror #8
			_BIS (dstate, DSTATE_IRST);
    1ff8:	6f637874 	svcvs	0x00637874
    1ffc:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
    2000:	656c0072 	strbvs	r0, [ip, #-114]!	; 0xffffff8e
			ret = (int) channel;
    2004:	007a536e 	rsbseq	r5, sl, lr, ror #6
			goto RVal;
    2008:	5f636672 	svcpl	0x00636672
				(*val > 7) ? 7 : *val;
    200c:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2010:	5f704f6f 	svcpl	0x00704f6f
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2014:	52620073 	rsbpl	r0, r2, #115	; 0x73
    2018:	61657065 	cmnvs	r5, r5, rrx
			plugch ();
    201c:	6b6f4e74 	blvs	1bd59f4 <__ccfg+0x1bb5a4c>
			_BIS (dstate, DSTATE_IRST);
    2020:	6c696600 	stclvs	6, cr6, [r9], #-0
    2024:	4f726574 	svcmi	0x00726574
			ret = (int) vrate;
    2028:	66720070 			; <UNDEFINED> instruction: 0x66720070
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    202c:	61645f63 	cmnvs	r4, r3, ror #30
    2030:	6e456174 	mcrvs	1, 2, r6, cr5, cr4, {3}
    2034:	47797274 			; <UNDEFINED> instruction: 0x47797274
    2038:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
    203c:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    2040:	63667200 	cmnvs	r6, #0, 4
    2044:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2048:	746e4561 	strbtvc	r4, [lr], #-1377	; 0xfffffa9f
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204c:	65477972 	strbvs	r7, [r7, #-2418]	; 0xfffff68e
    2050:	6172656e 	cmnvs	r2, lr, ror #10
    2054:	00745f6c 	rsbseq	r5, r4, ip, ror #30
    2058:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
			syserror (EREQPAR, "cc13 op");
    205c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2060:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    2064:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    2068:	006b7366 	rsbeq	r7, fp, r6, ror #6
    206c:	4f78526e 	svcmi	0x0078526e
    2070:	5252006b 	subspl	r0, r2, #107	; 0x6b
    2074:	5f007465 	svcpl	0x00007465
    2078:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
    207c:	0031796d 	eorseq	r7, r1, sp, ror #18
    2080:	75645f5f 	strbvc	r5, [r4, #-3935]!	; 0xfffff0a1
    2084:	32796d6d 	rsbscc	r6, r9, #6976	; 0x1b40
    2088:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 2090 <option+0x188>
    208c:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    2090:	496e0033 	stmdbmi	lr!, {r0, r1, r4, r5}^
    2094:	61726574 	cmnvs	r2, r4, ror r5
static void issue_cmd (lword cmd) {
    2098:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    209c:	6b700073 	blvs	1c02270 <__ccfg+0x1be22c8>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a0:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
    20a4:	6c757200 	lfmvs	f7, 2, [r5], #-0
    20a8:	46520065 	ldrbmi	r0, [r2], -r5, rrx
		if (res != 0x86)
    20ac:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
			syserror (EHARDWARE, "hang ic0");
    20b0:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
    20b4:	52007852 	andpl	r7, r0, #5373952	; 0x520000
		if (cnt-- == 0) {
    20b8:	50434346 	subpl	r4, r3, r6, asr #6
			diag ("HUP %lx %lx", cmd, res);
    20bc:	6e493045 	cdpvs	0, 4, cr3, cr9, cr5, {2}
    20c0:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
			syserror (EHARDWARE, "hang ic0");
    20c4:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
		udelay (1);
    20c8:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20cc:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xfffff09b
}
    20d0:	76726400 	ldrbtvc	r6, [r2], -r0, lsl #8
    20d4:	73637270 	cmnvc	r3, #112, 4
    20d8:	72506e00 	subsvc	r6, r0, #0, 28
    20dc:	426d6165 	rsbmi	r6, sp, #1073741849	; 0x40000019
static void rx_de () {
    20e0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
	if ((dstate & DSTATE_RXAC) == 0)
    20e4:	6b636200 	blvs	18da8ec <__ccfg+0x18ba944>
    20e8:	69745f66 	ldmdbvs	r4!, {r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ec:	0072656d 	rsbseq	r6, r2, sp, ror #10
	_BIC (dstate, DSTATE_RXAC);
    20f0:	5f636672 	svcpl	0x00636672
    20f4:	5f444d43 	svcpl	0x00444d43
}
    20f8:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    20fc:	5f58545f 	svcpl	0x0058545f
    2100:	66720074 			; <UNDEFINED> instruction: 0x66720074
static void rf_off () {
    2104:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
	if ((dstate & DSTATE_RFON) == 0)
    2108:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    210c:	545f504f 	ldrbpl	r5, [pc], #-79	; 2114 <rf_off+0x10>
	IntDisable (INT_RFC_CPE_0);
    2110:	00735f58 	rsbseq	r5, r3, r8, asr pc
    2114:	656c6469 	strbvs	r6, [ip, #-1129]!	; 0xfffffb97
    2118:	6600704f 	strvs	r7, [r0], -pc, asr #32
	RFCAdi3VcoLdoVoltageMode (false);
    211c:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
	RFCSynthPowerDown ();
    2120:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2124:	61507000 	cmpvs	r0, r0
    2128:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    212c:	63006261 	movwvs	r6, #609	; 0x261
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2130:	43734673 	cmnmi	r3, #120586240	; 0x7300000
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2134:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2138:	5f646d63 	svcpl	0x00646d63
    213c:	00747273 	rsbseq	r7, r4, r3, ror r2
    2140:	4f734662 	svcmi	0x00734662
	_BIC (dstate, DSTATE_RFON);
    2144:	63006666 	movwvs	r6, #1638	; 0x666
    2148:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
}
    214c:	73694d67 	cmnvc	r9, #6592	; 0x19c0
    2150:	63644163 	cmnvs	r4, #-1073741800	; 0xc0000018
    2154:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
    2158:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    215c:	68436200 	stmdavs	r3, {r9, sp, lr}^
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2160:	6464416b 	strbtvs	r4, [r4], #-363	; 0xfffffe95
    2164:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    2168:	746e6500 	strbtvc	r6, [lr], #-1280	; 0xfffffb00
		if (cmd->status == tstat)
    216c:	65477265 	strbvs	r7, [r7, #-613]	; 0xfffffd9b
		if (timeout-- == 0) {
    2170:	6b73666e 	blvs	1cdbb30 <__ccfg+0x1cbbb88>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2174:	50657043 	rsbpl	r7, r5, r3, asr #32
    2178:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    217c:	63667200 	cmnvs	r6, #0, 4
			syserror (EHARDWARE, "rt2");
    2180:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2184:	4e59535f 	mrcmi	3, 2, r5, cr9, cr15, {2}
		udelay (1);
    2188:	54535f43 	ldrbpl	r5, [r3], #-3907	; 0xfffff0bd
		if (cmd->status == tstat)
    218c:	5f545241 	svcpl	0x00545241
}
    2190:	5f544152 	svcpl	0x00544152
    2194:	66720073 			; <UNDEFINED> instruction: 0x66720073
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    2198:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    219c:	59535f44 	ldmdbpl	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
static void rf_on () {
    21a0:	535f434e 	cmppl	pc, #939524097	; 0x38000001
    21a4:	54524154 	ldrbpl	r4, [r2], #-340	; 0xfffffeac
	OSCHF_TurnOnXosc();
    21a8:	5441525f 	strbpl	r5, [r1], #-607	; 0xfffffda1
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21ac:	7000745f 	andvc	r7, r0, pc, asr r4
    21b0:	656c7961 	strbvs	r7, [ip, #-2401]!	; 0xfffff69f
    21b4:	756e006e 	strbvc	r0, [lr, #-110]!	; 0xffffff92
    21b8:	7373526d 	cmnvc	r3, #-805306362	; 0xd0000006
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21bc:	73754269 	cmnvc	r5, #-1879048186	; 0x90000006
    21c0:	73740079 	cmnvc	r4, #121	; 0x79
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c4:	00746174 	rsbseq	r6, r4, r4, ror r1
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21c8:	65735562 	ldrbvs	r5, [r3, #-1378]!	; 0xfffffa9e
	issue_cmd (
    21cc:	00637243 	rsbeq	r7, r3, r3, asr #4
    21d0:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d4:	6e654772 	mcrvs	7, 3, r4, cr5, cr2, {3}
    21d8:	536b7366 	cmnpl	fp, #-1744830463	; 0x98000001
    21dc:	61507379 	cmpvs	r0, r9, ror r3
   pPatchTab[80] = 0;
    21e0:	00686374 	rsbeq	r6, r8, r4, ror r3
   } while (--nIterations);
    21e4:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
   pPatchTab[53] = 2;
    21e8:	6f697461 	svcvs	0x00697461
    21ec:	7363006e 	cmnvc	r3, #110	; 0x6e
   pPatchTab[55] = 3;
    21f0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
   pPatchTab[110] = 4;
    21f4:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
   pPatchTab[107] = 5;
    21f8:	65755161 	ldrbvs	r5, [r5, #-353]!	; 0xfffffe9f
   pPatchTab[65] = 6;
    21fc:	745f6575 	ldrbvc	r6, [pc], #-1397	; 2204 <rf_on.part.0+0x6c>
    2200:	6b536e00 	blvs	14dda08 <__ccfg+0x14bda60>
   pPatchTab[57] = 1;
    2204:	62007069 	andvs	r7, r0, #105	; 0x69
   pIrqPatch[1] = _IRQ_PATCH_0;
    2208:	52616e45 	rsbpl	r6, r1, #1104	; 0x450
   const uint32_t *pS = patchGenfskRfe;
    220c:	00697373 	rsbeq	r7, r9, r3, ror r3
      t2 = *pS++;
    2210:	73796870 	cmnvc	r9, #112, 16	; 0x700000
      t4 = *pS++;
    2214:	52006469 	andpl	r6, r0, #1761607680	; 0x69000000
      t6 = *pS++;
    2218:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
      t8 = *pS++;
    221c:	6f725064 	svcvs	0x00725064
      *pD++ = t1;
    2220:	00785470 	rsbseq	r5, r8, r0, ror r4
      *pD++ = t2;
    2224:	46666572 			; <UNDEFINED> instruction: 0x46666572
      *pD++ = t3;
    2228:	00716572 	rsbseq	r6, r1, r2, ror r5
      *pD++ = t5;
    222c:	43434652 	movtmi	r4, #13906	; 0x3652
      *pD++ = t7;
    2230:	6b636f6c 	blvs	18ddfe8 <__ccfg+0x18be040>
   } while (--nIterations);
    2234:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2238:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
      *pD++ = t8;
    223c:	67676972 			; <UNDEFINED> instruction: 0x67676972
   } while (--nIterations);
    2240:	79547265 	ldmdbvc	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2244:	4b006570 	blmi	1b80c <__exidx_end+0x168e0>
   *pD++ = t2;
    2248:	2f504d54 	svccs	0x00504d54
   *pD++ = t3;
    224c:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
   *pD++ = t4;
    2250:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
   *pD++ = t5;
    2254:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    2258:	5f766374 	svcpl	0x00766374
	RFCAdi3VcoLdoVoltageMode (true);
    225c:	5f74756f 	svcpl	0x0074756f
    2260:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
       	RFCRfTrimSet (&rfTrim);
    2264:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    2268:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
    226c:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2270:	6374006c 	cmnvs	r4, #108	; 0x6c
    2274:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
	issue_cmd ((lword)&cmd_srt);
    2278:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    227c:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
	issue_cmd ((lword)&RF_cmdFs);
    2280:	665f7663 	ldrbvs	r7, [pc], -r3, ror #12
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2284:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    2288:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    228c:	5f766374 	svcpl	0x00766374
	IntEnable (INT_RFC_CPE_0);
    2290:	5f6f6c63 	svcpl	0x006f6c63
	_BIC (dstate, DSTATE_IRST);
    2294:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    2298:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    229c:	746d785f 	strbtvc	r7, [sp], #-2143	; 0xfffff7a1
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a0:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a4:	6f62006c 	svcvs	0x0062006c
	IntEnable (INT_RFC_CPE_0);
    22a8:	73646e75 	cmnvc	r4, #1872	; 0x750
    22ac:	73646e00 	cmnvc	r4, #0, 28
}
    22b0:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
	IntEnable (INT_RFC_CPE_0);
    22b4:	2f006c6c 	svccs	0x00006c6c
    22b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    22bc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    22c0:	2f6e6974 	svccs	0x006e6974
    22c4:	6b736544 	blvs	1cdb7dc <__ccfg+0x1cbb834>
    22c8:	2f706f74 	svccs	0x00706f74
    22cc:	4f534c4f 	svcmi	0x00534c4f
    22d0:	2f54454e 	svccs	0x0054454e
    22d4:	4f434950 	svcmi	0x00434950
    22d8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    22dc:	2f534f63 	svccs	0x00534f63
    22e0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    22e4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    22e8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    22ec:	6f5f5f2f 	svcvs	0x005f5f2f
    22f0:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
    22f4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    22f8:	7100632e 	tstvc	r0, lr, lsr #6
    22fc:	746e6175 	strbtvc	r6, [lr], #-373	; 0xfffffe8b
    2300:	6f5f5f00 	svcvs	0x005f5f00
    2304:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
    2308:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    230c:	4f5f5f00 	svcmi	0x005f5f00
    2310:	52575f4d 	subspl	r5, r7, #308	; 0x134
    2314:	00455449 	subeq	r5, r5, r9, asr #8
static void rx_int_enable () {
    2318:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    231c:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2320:	2f006c61 	svccs	0x00006c61
    2324:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2328:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    232c:	2f6e6974 	svccs	0x006e6974
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2330:	6b736544 	blvs	1cdb848 <__ccfg+0x1cbb8a0>
    2334:	2f706f74 	svccs	0x00706f74
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    2338:	4f534c4f 	svcmi	0x00534c4f
    233c:	2f54454e 	svccs	0x0054454e
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2340:	4f434950 	svcmi	0x00434950
    2344:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2348:	2f534f63 	svccs	0x00534f63
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    234c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2350:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2354:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
		if (db->status == DATA_ENTRY_FINISHED) {
    2358:	695f5f2f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    235c:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    2360:	2e6c6169 	powcsez	f6, f4, #1.0
			nr++;
    2364:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2368:	2f656d6f 	svccs	0x00656d6f
    236c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2370:	442f6e69 	strtmi	r6, [pc], #-3689	; 2378 <rx_int_enable+0x60>
    2374:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				__dp [pl + 1] = __dp [pl] - 128;
    2378:	4f2f706f 	svcmi	0x002f706f
				pl = __dp [1] + 2;
    237c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				__dp [pl + 1] = __dp [pl] - 128;
    2380:	502f5445 	eorpl	r5, pc, r5, asr #8
    2384:	534f4349 	movtpl	r4, #62281	; 0xf349
				__dp [pl] = 0;
    2388:	6369502f 	cmnvs	r9, #47	; 0x2f
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    238c:	502f534f 	eorpl	r5, pc, pc, asr #6
    2390:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    2394:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
			db->status = DATA_ENTRY_PENDING;
    2398:	2f6c6169 	svccs	0x006c6169
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    239c:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a0:	00632e6d 	rsbeq	r2, r3, sp, ror #28
				diag ("BAD RX");
    23a4:	69616741 	stmdbvs	r1!, {r0, r6, r8, r9, sl, sp, lr}^
    23a8:	756f006e 	strbvc	r0, [pc, #-110]!	; 2342 <rx_int_enable+0x2a>
	if (nr) {
    23ac:	5f006374 	svcpl	0x00006374
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b0:	5f69705f 	svcpl	0x0069705f
}
    23b4:	61706676 	cmnvs	r0, r6, ror r6
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b8:	00657372 	rsbeq	r7, r5, r2, ror r3
    23bc:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    23c0:	6552006d 	ldrbvs	r0, [r2, #-109]	; 0xffffff93
}
    23c4:	5f797274 	svcpl	0x00797274
    23c8:	6f775f64 	svcvs	0x00775f64
    23cc:	2f006472 	svccs	0x00006472
    23d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    23d4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    23d8:	2f6e6974 	svccs	0x006e6974
    23dc:	6b736544 	blvs	1cdb8f4 <__ccfg+0x1cbb94c>
    23e0:	2f706f74 	svccs	0x00706f74
    23e4:	4f534c4f 	svcmi	0x00534c4f
thread (cc1350_driver)
    23e8:	2f54454e 	svccs	0x0054454e
    23ec:	4f434950 	svcmi	0x00434950
    23f0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    23f4:	2f534f63 	svccs	0x00534f63
    23f8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		if (dstate & DSTATE_IRST) {
    23fc:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    2400:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    2404:	6373762f 	cmnvs	r3, #49283072	; 0x2f00000
			rf_off ();
    2408:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
			_BIC (dstate,
    240c:	63737600 	cmnvs	r3, #0, 12
    2410:	52006e61 	andpl	r6, r0, #1552	; 0x610
		if (dstate & DSTATE_RXAC) {
    2414:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2418:	6c5f645f 	cfldrdvs	mvd6, [pc], {95}	; 0x5f
			if ((dstate & DSTATE_RXON) == 0)
    241c:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
				rx_de ();
    2420:	6f682f00 	svcvs	0x00682f00
		if (paylen == 0) {
    2424:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2278 <rf_on.part.0+0xe0>
    2428:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    242c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2430:	6f746b73 	svcvs	0x00746b73
    2434:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2438:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				sysassert (paylen <= rbuffl && paylen > 0 &&
    243c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2440:	2f534f43 	svccs	0x00534f43
    2444:	4f636950 	svcmi	0x00636950
    2448:	43432f53 	movtmi	r2, #16211	; 0x3f53
    244c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    2450:	616d732f 	cmnvs	sp, pc, lsr #6
    2454:	66727472 			; <UNDEFINED> instruction: 0x66727472
    2458:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
		} else if (dstate & DSTATE_RXON) {
    245c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
	if (dstate & DSTATE_RFON)
    2460:	706c5f73 	rsbvc	r5, ip, r3, ror pc
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2464:	2e72685f 	mrccs	8, 3, r6, cr2, cr15, {2}
		re->status = DATA_ENTRY_PENDING;
    2468:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    246c:	7470746e 	ldrbtvc	r7, [r0], #-1134	; 0xfffffb92
	issue_cmd ((lword)&RF_cmdPropRx);
    2470:	00745f72 	rsbseq	r5, r4, r2, ror pc
	_BIS (dstate, DSTATE_RXAC);
    2474:	65764f70 	ldrbvs	r4, [r6, #-3952]!	; 0xfffff090
    2478:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    247c:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
    2480:	45717249 	ldrbmi	r7, [r1, #-585]!	; 0xfffffdb7
	if (dstate & DSTATE_RXAC)
    2484:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    2488:	53006465 	movwpl	r6, #1125	; 0x465
				if (statid != 0xffff)
    248c:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    2490:	41697061 	cmnmi	r9, r1, rrx
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2494:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
				RF_cmdPropTx.pktLen = (byte) paylen;
    2498:	6c655369 	stclvs	3, cr5, [r5], #-420	; 0xfffffe5c
		if (paylen == 0) {
    249c:	00746365 	rsbseq	r6, r4, r5, ror #6
			wait (qevent, DR_LOOP);
    24a0:	52545046 	subspl	r5, r4, #70	; 0x46
    24a4:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
			if (dstate & DSTATE_RXAC) {
    24a8:	4f565f44 	svcmi	0x00565f44
    24ac:	545f4449 	ldrbpl	r4, [pc], #-1097	; 24b4 <cc1350_driver+0xcc>
				rx_int_enable ();
    24b0:	524f4e00 	subpl	r4, pc, #0, 28
			release;
    24b4:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
			} else if (dstate & DSTATE_RFON) {
    24b8:	70635550 	rsbvc	r5, r3, r0, asr r5
				delay (offdelay, DR_GOOF);
    24bc:	00646973 	rsbeq	r6, r4, r3, ror r9
    24c0:	4f524f4e 	svcmi	0x00524f4e
    24c4:	50435f4d 	subpl	r5, r3, sp, asr #30
		if (bckf_timer) {
    24c8:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
			wait (qevent, DR_LOOP);
    24cc:	53006569 	movwpl	r6, #1385	; 0x569
    24d0:	48656661 	stmdami	r5!, {r0, r5, r6, r9, sl, sp, lr}^
    24d4:	56697061 	strbtpl	r7, [r9], -r1, rrx
			delay (bckf_timer, DR_LOOP);
    24d8:	0064696f 	rsbeq	r6, r4, pc, ror #18
    24dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
			if (dstate & DSTATE_RXAC)
    24e0:	2f2e2e2f 	svccs	0x002e2e2f
    24e4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 24ec <cc1350_driver+0x104>
	if (dstate & DSTATE_RFON)
    24e8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    24ec:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
		rx_de ();
    24f0:	6964612f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r8, sp, lr}^
		RF_cmdPropTx . status = 0;
    24f4:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24f8:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    24fc:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
    2500:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
		issue_cmd ((lword)&cmd_cs);
    2504:	30353130 	eorscc	r3, r5, r0, lsr r1
		if (dstate & DSTATE_IRST)
    2508:	20393235 	eorscs	r3, r9, r5, lsr r2
    250c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
    2510:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2514:	415b2029 	cmpmi	fp, r9, lsr #32
    2518:	652f4d52 	strvs	r4, [pc, #-3410]!	; 17ce <tcv_endp+0x62>
			delay (1, DR_XMIT);
    251c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2520:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
    2524:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    2528:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    252c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    2530:	73697665 	cmnvc	r9, #105906176	; 0x6500000
				RF_cmdPropTx . status = 0;
    2534:	206e6f69 	rsbcs	r6, lr, r9, ror #30
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2538:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
				issue_cmd ((lword)&RF_cmdPropTx);
    253c:	205d3737 	subscs	r3, sp, r7, lsr r7
				proceed (DR_XMIT);
    2540:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    2544:	20626d75 	rsbcs	r6, r2, r5, ror sp
			txtries++;
    2548:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    254c:	6f633d75 	svcvs	0x00633d75
    2550:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    2554:	20336d2d 	eorscs	r6, r3, sp, lsr #26
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2558:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
		goto DR_LOOP__;
    255c:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2560:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
		paylen = 0;
    2564:	20393963 	eorscs	r3, r9, r3, ror #18
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2568:	6f6e662d 	svcvs	0x006e662d
		txtries = 0;
    256c:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2570:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
    2574:	61696c61 	cmnvs	r9, r1, ror #24
    2578:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    257c:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
    2580:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
		    tcvphy_top (physid) == NULL)
    2584:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
    2588:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    258c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2590:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
			rf_off ();
    2594:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
endthread
    2598:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    259c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    25a0:	61662d20 	cmnvs	r6, r0, lsr #26
    25a4:	66006d73 			; <UNDEFINED> instruction: 0x66006d73
    25a8:	00727450 	rsbseq	r7, r2, r0, asr r4
    25ac:	52545046 	subspl	r5, r4, #70	; 0x46
    25b0:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    25b4:	49555f44 	ldmdbmi	r5, {r2, r6, r8, r9, sl, fp, ip, lr}^
    25b8:	5f38544e 	svcpl	0x0038544e
    25bc:	3a430054 	bcc	10c2714 <__ccfg+0x10a276c>
    25c0:	6e654a5c 			; <UNDEFINED> instruction: 0x6e654a5c
    25c4:	736e696b 	cmnvc	lr, #1753088	; 0x1ac000
    25c8:	626f6a5c 	rsbvs	r6, pc, #92, 20	; 0x5c000
    25cc:	57465c73 	smlsldxpl	r5, r6, r3, ip
    25d0:	756f7247 	strbvc	r7, [pc, #-583]!	; 2391 <rx_int_enable+0x79>
    25d4:	72442d70 	subvc	r2, r4, #112, 26	; 0x1c00
void RFCCPE0IntHandler (void) {
    25d8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25dc:	5c62694c 			; <UNDEFINED> instruction: 0x5c62694c
		_BIS (dstate, DSTATE_IRST);
    25e0:	6b726f77 	blvs	1c9e3c4 <__ccfg+0x1c7e41c>
    25e4:	63617073 	cmnvs	r1, #115	; 0x73
    25e8:	6f6d5c65 	svcvs	0x006d5c65
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25ec:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f0:	756f5c73 	strbvc	r5, [pc, #-3187]!	; 1985 <tcvp_control+0x9>
    25f4:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
	p_trigger (drvprcs, qevent);
    25f8:	3163635c 	cmncc	r3, ip, asr r3
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    25fc:	5f787833 	svcpl	0x00787833
    2600:	5f616863 	svcpl	0x00616863
    2604:	5f305f32 	svcpl	0x00305f32
    2608:	5c747865 	ldclpl	8, cr7, [r4], #-404	; 0xfffffe6c
    260c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2610:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2614:	69625c62 	stmdbvs	r2!, {r1, r5, r6, sl, fp, ip, lr}^
    2618:	63675c6e 	cmnvs	r7, #28160	; 0x6e00
    261c:	74750063 	ldrbtvc	r0, [r5], #-99	; 0xffffff9d
    2620:	67695338 			; <UNDEFINED> instruction: 0x67695338
	RISE_N_SHINE;
    2624:	006c616e 	rsbeq	r6, ip, lr, ror #2
    2628:	4f524f4e 	svcmi	0x00524f4e
    262c:	4f415f4d 	svcmi	0x00415f4d
}
    2630:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
    2634:	546e6f4d 	strbtpl	r6, [lr], #-3917	; 0xfffff0b3
    2638:	65706d65 	ldrbvs	r6, [r0, #-3429]!	; 0xfffff29b
    263c:	75746172 	ldrbvc	r6, [r4, #-370]!	; 0xfffffe8e
    2640:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
    2644:	67654474 			; <UNDEFINED> instruction: 0x67654474
void phys_cc1350 (int phy, int mbs) {
    2648:	6f760043 	svcvs	0x00760043
	if (rbuffl != 0)
    264c:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    2650:	6f6c5365 	svcvs	0x006c5365
		syserror (ETOOMANY, "cc13");
    2654:	5f006570 	svcpl	0x00006570
		syserror (EREQPAR, "cc13 mb");
    2658:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	if (mbs == 0)
    265c:	745f3233 	ldrbvc	r3, [pc], #-563	; 2664 <phys_cc1350+0x1c>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2660:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
		syserror (EREQPAR, "cc13 mb");
    2664:	5f38746e 	svcpl	0x0038746e
    2668:	2f2e0074 	svccs	0x002e0074
	i = 0;
    266c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	rbuffl = (byte) mbs;
    2670:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		db->config.type = 0;	// General (data in structure)
    2674:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
	rbuffl = (byte) mbs;
    2678:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    267c:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2680:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
		if (db == NULL)
    2684:	6f6d7461 	svcvs	0x006d7461
			syserror (EMALLOC, "cc13");
    2688:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    268c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2690:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
		db->status = DATA_ENTRY_PENDING;
    2694:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
		if (i)
    2698:	73006e6f 	movwvc	r6, #3695	; 0xe6f
			da->pNextEntry = (byte*) db;
    269c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
		db->length = rbuffl + 2;
    26a0:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    26a4:	65720070 	ldrbvs	r0, [r2, #-112]!	; 0xffffff90
		db->config.type = 0;	// General (data in structure)
    26a8:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
		db->length = rbuffl + 2;
    26ac:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
	db->pNextEntry = (byte*) re;
    26b0:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b4:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    26b8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
	if (rbuffs == NULL)
    26bc:	63655374 	cmnvs	r5, #116, 6	; 0xd0000001
	rbuffs->pCurrEntry = (byte*) re;
    26c0:	524f4e00 	subpl	r4, pc, #0, 28
	rbuffs->pLastEntry = NULL;
    26c4:	415f4d4f 	cmpmi	pc, pc, asr #26
    26c8:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26cc:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d0:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    26d4:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    26d8:	56657261 	strbtpl	r7, [r5], -r1, ror #4
	rbuffl -= 2;
    26dc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e0:	00746547 	rsbseq	r6, r4, r7, asr #10
	rbuffl -= 2;
    26e4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	physid = phy;
    26e8:	6f636553 	svcvs	0x00636553
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ec:	6553646e 	ldrbvs	r6, [r3, #-1134]	; 0xfffffb92
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f0:	61655263 	cmnvs	r5, r3, ror #4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f4:	5f5f0064 	svcpl	0x005f0064
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    26fc:	745f3436 	ldrbvc	r3, [pc], #-1078	; 2704 <phys_cc1350+0xbc>
	utimer_add (&bckf_timer);
    2700:	33697500 	cmncc	r9, #0, 10
	drvprcs = runthread (cc1350_driver);
    2704:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
    2708:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    270c:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
	if (drvprcs == 0)
    2710:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
		syserror (ERESOURCE, "cc13");
    2714:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 25e0 <RFCCPE0IntHandler+0x8>
    2718:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    271c:	43435452 	movtmi	r5, #13394	; 0x3452
    2720:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2724:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2728:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    272c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2730:	00746547 	rsbseq	r6, r4, r7, asr #10
    2734:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    2738:	52746e65 	rsbspl	r6, r4, #1616	; 0x650
    273c:	73006374 	movwvc	r6, #884	; 0x374
    2740:	6e416365 	cdpvs	3, 4, cr6, cr1, cr5, {3}
    2744:	62755364 	rsbsvs	r5, r5, #100, 6	; 0x90000001
    2748:	00636553 	rsbeq	r6, r3, r3, asr r5
    274c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2750:	2f2e2e2f 	svccs	0x002e2e2f
	plugch ();
    2754:	642f2e2e 	strtvs	r2, [pc], #-3630	; 275c <phys_cc1350+0x114>
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2758:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    275c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2760:	6e6f612f 	powvsep	f6, f7, #10.0
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2764:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    2768:	7300632e 	movwvc	r6, #814	; 0x32e
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    276c:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
}
    2770:	00657079 	rsbeq	r7, r5, r9, ror r0
    2774:	4f524f4e 	svcmi	0x00524f4e
    2778:	50435f4d 	subpl	r5, r3, sp, asr #30
    277c:	73616255 	cmnvc	r1, #1342177285	; 0x50000005
    2780:	69727065 	ldmdbvs	r2!, {r0, r2, r5, r6, ip, sp, lr}^
    2784:	00746547 	rsbseq	r6, r4, r7, asr #10
    2788:	4f524f4e 	svcmi	0x00524f4e
    278c:	50435f4d 	subpl	r5, r3, sp, asr #30
    2790:	6c656455 	cfstrdvs	mvd6, [r5], #-340	; 0xfffffeac
    2794:	75007961 	strvc	r7, [r0, #-2401]	; 0xfffff69f
    2798:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    279c:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    27a0:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    27a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    27a8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    27ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    27b0:	2f2e2e2f 	svccs	0x002e2e2f
    27b4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    27b8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    27bc:	70632f62 	rsbvc	r2, r3, r2, ror #30
    27c0:	00632e75 	rsbeq	r2, r3, r5, ror lr
    27c4:	4f524f4e 	svcmi	0x00524f4e
    27c8:	50435f4d 	subpl	r5, r3, sp, asr #30
    27cc:	69727055 	ldmdbvs	r2!, {r0, r2, r4, r6, ip, sp, lr}^
    27d0:	6b73616d 	blvs	1cdad8c <__ccfg+0x1cbade4>
    27d4:	524f4e00 	subpl	r4, pc, #0, 28
    27d8:	4f5f4d4f 	svcmi	0x005f4d4f
    27dc:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    27e0:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    27e4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    27e8:	74655365 	strbtvc	r5, [r5], #-869	; 0xfffffc9b
    27ec:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    27f0:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    27f4:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    27f8:	32335245 	eorscc	r5, r3, #1342177284	; 0x50000004
    27fc:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2800:	5f525450 	svcpl	0x00525450
    2804:	44445453 	strbmi	r5, [r4], #-1107	; 0xfffffbad
    2808:	5f4c4156 	svcpl	0x004c4156
    280c:	4f4e0054 	svcmi	0x004e0054
    2810:	5f4d4f52 	svcpl	0x004d4f52
    2814:	4343534f 	movtmi	r5, #13135	; 0x334f
    2818:	6b636f6c 	blvs	18de5d0 <__ccfg+0x18be628>
    281c:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2820:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    2824:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2828:	734f3233 	movtvc	r3, #62003	; 0xf233
    282c:	65530063 	ldrbvs	r0, [r3, #-99]	; 0xffffff9d
    2830:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2834:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2838:	66655242 	strbtvs	r5, [r5], -r2, asr #4
    283c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2840:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2844:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2848:	5f344445 	svcpl	0x00344445
    284c:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
    2850:	6f58656d 	svcvs	0x0058656d
    2854:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2858:	0056435f 	subseq	r4, r6, pc, asr r3
strand (__outserial, const char*)
    285c:	4f524f4e 	svcmi	0x00524f4e
    2860:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2864:	5f464843 	svcpl	0x00464843
    2868:	65747441 	ldrbvs	r7, [r4, #-1089]!	; 0xfffffbbf
endstrand
    286c:	5474706d 	ldrbtpl	r7, [r4], #-109	; 0xffffff93
    2870:	6977536f 	ldmdbvs	r7!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, lr}^
	ptr = data;
    2874:	54686374 	strbtpl	r6, [r8], #-884	; 0xfffffc8c
    2878:	736f586f 	cmnvc	pc, #7274496	; 0x6f0000
	if (*ptr)
    287c:	46480063 	strbmi	r0, [r8], -r3, rrx
		len = strlen (ptr);
    2880:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2884:	61536563 	cmpvs	r3, r3, ror #10
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    2888:	77536566 	ldrbvc	r6, [r3, -r6, ror #10]
    288c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2890:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2894:	736f5870 	cmnvc	pc, #112, 16	; 0x700000
    2898:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
	len -= quant;
    289c:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    28a0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    28a4:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
	if (len == 0) {
    28a8:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
		ufree (data);
    28ac:	0073556e 	rsbseq	r5, r3, lr, ror #10
		finish;
    28b0:	61726170 	cmnvs	r2, r0, ror r1
    28b4:	0031506d 	eorseq	r5, r1, sp, rrx
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28b8:	61726170 	cmnvs	r2, r0, ror r1
    28bc:	0032506d 	eorseq	r5, r2, sp, rrx
    28c0:	61726170 	cmnvs	r2, r0, ror r1
    28c4:	0033506d 	eorseq	r5, r3, sp, rrx
    28c8:	52545046 	subspl	r5, r4, #70	; 0x46
strand (__inserial, address)
    28cc:	5345525f 	movtpl	r5, #21087	; 0x525f
    28d0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    28d4:	545f3344 	ldrbpl	r3, [pc], #-836	; 28dc <__inserial+0x10>
    28d8:	65727000 	ldrbvs	r7, [r2, #-0]!
    28dc:	756f6976 	strbvc	r6, [pc, #-2422]!	; 1f6e <option+0x66>
	if (__inpline != NULL)
    28e0:	61745373 	cmnvs	r4, r3, ror r3
    28e4:	70757472 	rsbsvc	r7, r5, r2, ror r4
		finish;
    28e8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28ec:	73556e49 	cmpvc	r5, #1168	; 0x490
    28f0:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    28f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    28f8:	2f2e2e2f 	svccs	0x002e2e2f
		umwait (IM_INIT);
    28fc:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		release;
    2900:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
	savedata (data);
    2904:	736f2f62 	cmnvc	pc, #392	; 0x188
	len = MAX_LINE_LENGTH;
    2908:	00632e63 	rsbeq	r2, r3, r3, ror #28
	io (IM_READ, __cport, READ, ptr, 1);
    290c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2910:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2914:	62617453 	rsbvs	r7, r1, #1392508928	; 0x53000000
    2918:	435f656c 	cmpmi	pc, #108, 10	; 0x1b000000
	if (ptr == (char*) data) { // new line
    291c:	65740056 	ldrbvs	r0, [r4, #-86]!	; 0xffffffaa
    2920:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
		if (*ptr == '\0') { // bin cmd
    2924:	0061746c 	rsbeq	r7, r1, ip, ror #8
			proceed (IM_BIN);
    2928:	54776f6c 	ldrbtpl	r6, [r7], #-3948	; 0xfffff094
    292c:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
		if (*ptr < 0x20)
    2930:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2934:	73655200 	cmnvc	r5, #0, 4
			proceed (IM_READ);
    2938:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    293c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	if (*ptr == '\n' || *ptr == '\r') {
    2940:	524f4e00 	subpl	r4, pc, #0, 28
    2944:	4f5f4d4f 	svcmi	0x005f4d4f
    2948:	46484353 			; <UNDEFINED> instruction: 0x46484353
		*ptr = '\0';
    294c:	7275545f 	rsbsvc	r5, r5, #1593835520	; 0x5f000000
		__inpline = (char*)data;
    2950:	586e4f6e 	stmdapl	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, lr}^
		finish;
    2954:	0063736f 	rsbeq	r7, r3, pc, ror #6
	if (len) {
    2958:	52545046 	subspl	r5, r4, #70	; 0x46
		ptr++;
    295c:	5345525f 	movtpl	r5, #21087	; 0x525f
    2960:	45445445 	strbmi	r5, [r4, #-1093]	; 0xfffffbbb
		len--;
    2964:	00545f56 	subseq	r5, r4, r6, asr pc
	proceed (IM_READ);
    2968:	52545046 	subspl	r5, r4, #70	; 0x46
	io (IM_BIN, __cport, READ, ptr, 1);
    296c:	5345525f 	movtpl	r5, #21087	; 0x525f
    2970:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2974:	545f3244 	ldrbpl	r3, [pc], #-580	; 297c <__inserial+0xb0>
    2978:	73655200 	cmnvc	r5, #0, 4
    297c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
	len -= 2;
    2980:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
	if (len > *ptr + 1) // 1 for 0x04
    2984:	6f697461 	svcvs	0x00697461
    2988:	6100336e 	tstvs	r0, lr, ror #6
		len = *ptr + 1;
    298c:	6156706d 	cmpvs	r6, sp, rrx
    2990:	0065756c 	rsbeq	r7, r5, ip, ror #10
	ptr++;
    2994:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
	quant = io (IM_BINL, __cport, READ, ptr, len);
    2998:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    299c:	61636f4c 	cmnvs	r3, ip, asr #30
    29a0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    29a4:	4f4e0034 	svcmi	0x004e0034
    29a8:	5f4d4f52 	svcpl	0x004d4f52
    29ac:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
	len -= quant;
    29b0:	77535f46 	ldrbvc	r5, [r3, -r6, asr #30]
		__inpline = (char*)data;
    29b4:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
		finish;
    29b8:	63526f54 	cmpvs	r2, #84, 30	; 0x150
	ptr += quant;
    29bc:	5463734f 	strbtpl	r7, [r3], #-847	; 0xfffffcb1
    29c0:	4f6e7275 	svcmi	0x006e7275
endstrand
    29c4:	6f586666 	svcvs	0x00586666
    29c8:	46006373 			; <UNDEFINED> instruction: 0x46006373
	proceed (IM_BINL);
    29cc:	5f525450 	svcpl	0x00525450
endstrand
    29d0:	5658414d 	ldrbpl	r4, [r8], -sp, asr #2
    29d4:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 29dc <__inserial+0x110>
    29d8:	6c655300 	stclvs	3, cr5, [r5], #-0
    29dc:	41746365 	cmnmi	r4, r5, ror #6
    29e0:	6f434344 	svcvs	0x00434344
    29e4:	4942706d 	stmdbmi	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
		if (res && (d < n))
    29e8:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    29ec:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    29f0:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
    29f4:	4d00656d 	cfstr32mi	mvfx6, [r0, #-436]	; 0xfffffe4c
			res [d] = (char) c;
    29f8:	61567861 	cmpvs	r6, r1, ror #16
		d++;
    29fc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2a00:	4f524f4e 	svcmi	0x00524f4e
    2a04:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a08:	50485f43 	subpl	r5, r8, r3, asr #30
    2a0c:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
    2a10:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
				enci (10000);
    2a14:	46657669 	strbtmi	r7, [r5], -r9, ror #12
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a18:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2a1c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
	d = 0;
    2a20:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
		c = *fm++;
    2a24:	65477465 	strbvs	r7, [r7, #-1125]	; 0xfffffb9b
		if (c == '\\') {
    2a28:	4f4e0074 	svcmi	0x004e0074
			if ((c = *fm++) == '\0') {
    2a2c:	5f4d4f52 	svcpl	0x004d4f52
    2a30:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
				outc ('\\');
    2a34:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
			if ((c = *fm++) == '\0') {
    2a38:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
				outc ('\\');
    2a3c:	72437465 	subvc	r7, r3, #1694498816	; 0x65000000
    2a40:	61747379 	cmnvs	r4, r9, ror r3
			outc (c);
    2a44:	706d416c 	rsbvc	r4, sp, ip, ror #2
    2a48:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
			if (c == '\0')
    2a4c:	4d006564 	cfstr32mi	mvfx6, [r0, #-400]	; 0xfffffe70
    2a50:	566e6165 	strbtpl	r6, [lr], -r5, ror #2
			outc (c);
    2a54:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
				outc (val);
    2a58:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
				val = (word) va_arg (ap, aword);
    2a5c:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
		if (c == '%') {
    2a60:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2a64:	5f314445 	svcpl	0x00314445
			c = *fm++;
    2a68:	72430054 	subvc	r0, r3, #84	; 0x54
			switch (c) {
    2a6c:	00323363 	eorseq	r3, r2, r3, ror #6
    2a70:	74656c46 	strbtvc	r6, [r5], #-3142	; 0xfffff3ba
    2a74:	72656863 	rsbvc	r6, r5, #6488064	; 0x630000
    2a78:	47003233 	smladxmi	r0, r3, r2, r3
    2a7c:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2a80:	64497069 	strbvs	r7, [r9], #-105	; 0xffffff97
    2a84:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2a88:	454d5f52 	strbmi	r5, [sp, #-3922]	; 0xfffff0ae
				outc ('%');
    2a8c:	41564e41 	cmpmi	r6, r1, asr #28
    2a90:	00545f4c 	subseq	r5, r4, ip, asr #30
				outc (c);
    2a94:	52545046 	subspl	r5, r4, #70	; 0x46
    2a98:	4344415f 	movtmi	r4, #16735	; 0x415f
    2a9c:	504d4f43 	subpl	r4, sp, r3, asr #30
				if (c == '\0')
    2aa0:	5f4e4942 	svcpl	0x004e4942
				return d;
    2aa4:	50460054 	subpl	r0, r6, r4, asr r0
}
    2aa8:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    2aac:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
			switch (c) {
    2ab0:	5f464552 	svcpl	0x00464552
    2ab4:	65530054 	ldrbvs	r0, [r3, #-84]	; 0xffffffac
    2ab8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
				for (i = 12; ; i -= 4) {
    2abc:	706d6f43 	rsbvc	r6, sp, r3, asr #30
				val = (word) va_arg (ap, aword);
    2ac0:	706e4941 	rsbvc	r4, lr, r1, asr #18
						[ (val >> i) & 0xf ]);
    2ac4:	46007475 			; <UNDEFINED> instruction: 0x46007475
    2ac8:	5f525450 	svcpl	0x00525450
    2acc:	504d4f43 	subpl	r4, sp, r3, asr #30
					outc (__pi_hex_enc_table
    2ad0:	5f4e4941 	svcpl	0x004e4941
    2ad4:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
					if (i == 0)
    2ad8:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2adc:	5861746c 	stmdapl	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
				for (i = 12; ; i -= 4) {
    2ae0:	736f0032 	cmnvc	pc, #50	; 0x32
				val = (word) va_arg (ap, aword);
    2ae4:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
				if (c == 'd' && (val & 0x8000) != 0) {
    2ae8:	61626f6c 	cmnvs	r2, ip, ror #30
				val = (word) va_arg (ap, aword);
    2aec:	4800736c 	stmdami	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
				if (c == 'd' && (val & 0x8000) != 0) {
    2af0:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    2af4:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
					outc ('-');
    2af8:	71657246 	cmnvc	r5, r6, asr #4
    2afc:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
					val = (~val) + 1;
    2b00:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    2b04:	61746c65 	cmnvs	r4, r5, ror #24
				for (i = 12; ; i -= 4) {
    2b08:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
				enci (10000);
    2b0c:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2b10:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2b14:	496e4f63 	stmdbmi	lr!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    2b18:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2b1c:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2b20:	6d655461 	cfstrdvs	mvd5, [r5, #-388]!	; 0xfffffe7c
    2b24:	6e695370 	mcrvs	3, 3, r5, cr9, cr0, {3}
    2b28:	6f586563 	svcvs	0x00586563
    2b2c:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2b30:	74696600 	strbtvc	r6, [r9], #-1536	; 0xfffffa00
    2b34:	61726150 	cmnvs	r2, r0, asr r1
    2b38:	7300736d 	movwvc	r7, #877	; 0x36d
    2b3c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2b40:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2b44:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    2b48:	74007355 	strvc	r7, [r0], #-853	; 0xfffffcab
    2b4c:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2b50:	4f63736f 	svcmi	0x0063736f
				if (c == 'd' || c == 'u') {
    2b54:	435f6666 	cmpmi	pc, #106954752	; 0x6600000
    2b58:	534f0056 	movtpl	r0, #61526	; 0xf056
					if (c == 'd' &&
    2b5c:	53664843 	cmnpl	r6, #4390912	; 0x430000
					val = va_arg (ap, lword);
    2b60:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
					fm++;
    2b64:	61655265 	cmnvs	r5, r5, ror #4
					if (c == 'd' &&
    2b68:	61007964 	tstvs	r0, r4, ror #18
    2b6c:	6f43706d 	svcvs	0x0043706d
						outc ('-');
    2b70:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2b74:	734f0031 	movtvc	r0, #61489	; 0xf031
						val = (~val) + 1;
    2b78:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
				enci (10000);
    2b7c:	61626f6c 	cmnvs	r2, ip, ror #30
					enci (1000000000UL);
    2b80:	745f736c 	ldrbvc	r7, [pc], #-876	; 2b88 <__pi_vfparse+0x180>
    2b84:	52414800 	subpl	r4, r1, #0, 16
    2b88:	50415f44 	subpl	r5, r1, r4, asr #30
    2b8c:	00545f49 	subseq	r5, r4, r9, asr #30
    2b90:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2b94:	69746e55 	ldmdbvs	r4!, {r0, r2, r4, r6, r9, sl, fp, sp, lr}^
    2b98:	6b61576c 	blvs	1858950 <__ccfg+0x18389a8>
    2b9c:	49707565 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
    2ba0:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2ba4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2ba8:	43637253 	cmnmi	r3, #805306373	; 0x30000005
    2bac:	4f006b6c 	svcmi	0x00006b6c
    2bb0:	66484353 			; <UNDEFINED> instruction: 0x66484353
    2bb4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2bb8:	77536563 	ldrbvc	r6, [r3, -r3, ror #10]
    2bbc:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2bc0:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
				} else if (c == 'x') {
    2bc4:	52435f52 	subpl	r5, r3, #328	; 0x148
					for (i = 28; ; i -= 4) {
    2bc8:	5f323343 	svcpl	0x00323343
					val = va_arg (ap, lword);
    2bcc:	65740054 	ldrbvs	r0, [r4, #-84]!	; 0xffffffac
							[ (val >> i) & 0xf ]);
    2bd0:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2bd4:	46004367 	strmi	r4, [r0], -r7, ror #6
						outc (__pi_hex_enc_table
    2bd8:	5f525450 	svcpl	0x00525450
    2bdc:	564e494d 	strbpl	r4, [lr], -sp, asr #18
    2be0:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2be8 <__pi_vfparse+0x1e0>
						if (i == 0)
    2be4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2be8:	46485f52 			; <UNDEFINED> instruction: 0x46485f52
					for (i = 28; ; i -= 4) {
    2bec:	52554f53 	subspl	r4, r5, #332	; 0x14c
					outc ('%');
    2bf0:	41534543 	cmpmi	r3, r3, asr #10
    2bf4:	57534546 	ldrbpl	r4, [r3, -r6, asr #10]
    2bf8:	48435449 	stmdami	r3, {r0, r3, r6, sl, ip, lr}^
					outc ('l');
    2bfc:	4d00545f 	cfstrsmi	mvf5, [r0, #-380]	; 0xfffffe84
    2c00:	61566e69 	cmpvs	r6, r9, ror #28
				val = (word) va_arg (ap, aword);
    2c04:	0065756c 	rsbeq	r7, r5, ip, ror #10
				outc (val);
    2c08:	76657270 			; <UNDEFINED> instruction: 0x76657270
    2c0c:	6d6d694c 			; <UNDEFINED> instruction: 0x6d6d694c
				while (*st != '\0') {
    2c10:	35327469 	ldrcc	r7, [r2, #-1129]!	; 0xfffffb97
    2c14:	73556e49 	cmpvc	r5, #1168	; 0x490
    2c18:	524f4e00 	subpl	r4, pc, #0, 28
    2c1c:	4f5f4d4f 	svcmi	0x005f4d4f
					outc (*st);
    2c20:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2c24:	43534f50 	cmpmi	r3, #80, 30	; 0x140
					st++;
    2c28:	616c6552 	cmnvs	ip, r2, asr r5
		c = *fm++;
    2c2c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    2c30:	71657246 	cmnvc	r5, r6, asr #4
    2c34:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
char *vform (char *res, const char *fm, va_list aq) {
    2c38:	66664f79 	uqsub16vs	r4, r6, r9
    2c3c:	54746573 	ldrbtpl	r6, [r4], #-1395	; 0xfffffa8d
	if (res != NULL) {
    2c40:	4346526f 	movtmi	r5, #25199	; 0x626f
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c44:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2c48:	616d726f 	cmnvs	sp, pc, ror #4
    2c4c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
}
    2c50:	74726576 	ldrbtvc	r6, [r2], #-1398	; 0xfffffa8a
    2c54:	6c655300 	stclvs	3, cr5, [r5], #-0
	fml = strlen (fm) + 17;
    2c58:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    2c5c:	41706d6f 	cmnmi	r0, pc, ror #26
    2c60:	00666552 	rsbeq	r6, r6, r2, asr r5
	if ((res = (char*) umalloc (fml)) == NULL)
    2c64:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2c68:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2c6c:	756f536b 	strbvc	r5, [pc, #-875]!	; 2909 <__inserial+0x3d>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c70:	00656372 	rsbeq	r6, r5, r2, ror r3
    2c74:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2c78:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2c7c:	61636f4c 	cmnvs	r3, ip, asr #30
		ufree (res);
    2c80:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
		goto Again;
    2c84:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
	if (buf == NULL || fmt == NULL)
    2c88:	76726573 			; <UNDEFINED> instruction: 0x76726573
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c8c:	6f4c6465 	svcvs	0x004c6465
	if (buf == NULL || fmt == NULL)
    2c90:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2c94:	00326e6f 	eorseq	r6, r2, pc, ror #28
    2c98:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
		    	    case 'u': scanu (lword); break;
    2c9c:	5f363174 	svcpl	0x00363174
			while (isspace (*buf)) buf++;
    2ca0:	65520074 	ldrbvs	r0, [r2, #-116]	; 0xffffff8c
    2ca4:	76726573 			; <UNDEFINED> instruction: 0x76726573
	while (*fmt != '\0') {
    2ca8:	6f4c6465 	svcvs	0x004c6465
		if (*fmt++ != '%')
    2cac:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
		switch (*fmt++) {
    2cb0:	00356e6f 	eorseq	r6, r5, pc, ror #28
    2cb4:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2cb8:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    2cbc:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
    2cc0:	61566e6f 	cmpvs	r6, pc, ror #28
    2cc4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2cc8:	6f436672 	svcvs	0x00436672
}
    2ccc:	72466572 	subvc	r6, r6, #478150656	; 0x1c800000
		switch (*fmt++) {
    2cd0:	664f7165 	strbvs	r7, [pc], -r5, ror #2
    2cd4:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2cd8:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
    2cdc:	72685468 	rsbvc	r5, r8, #104, 8	; 0x68000000
			while (isspace (*buf)) buf++;
    2ce0:	6f687365 	svcvs	0x00687365
    2ce4:	4e00646c 	cdpmi	4, 0, cr6, cr0, cr12, {3}
    2ce8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2bb4 <__pi_vfparse+0x1ac>
    2cec:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2cf0:	445f4648 	ldrbmi	r4, [pc], #-1608	; 2cf8 <vscan+0x70>
    2cf4:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
			if (*buf == '\0')
    2cf8:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
			if (*buf != ',') {
    2cfc:	63657078 	cmnvs	r5, #120	; 0x78
			sap = va_arg (ap, char*);
    2d00:	41646574 	smcmi	18004	; 0x4654
			nc++;
    2d04:	61726576 	cmnvs	r2, r6, ror r5
			if (*buf != ',') {
    2d08:	72436567 	subvc	r6, r3, #432013312	; 0x19c00000
				while (!isspace (*buf) && *buf != ',' &&
    2d0c:	61747379 	cmnvs	r4, r9, ror r3
    2d10:	706d416c 	rsbvc	r4, sp, ip, ror #2
    2d14:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
    2d18:	6f006564 	svcvs	0x00006564
    2d1c:	66436373 			; <UNDEFINED> instruction: 0x66436373
    2d20:	67655267 	strbvs	r5, [r5, -r7, ror #4]!
    2d24:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
			while (isspace (*buf)) buf++;
    2d28:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d2c:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
    2d30:	534c4654 	movtpl	r4, #50772	; 0xc654
    2d34:	5f455a49 	svcpl	0x00455a49
    2d38:	4f4e0054 	svcmi	0x004e0054
			if (*buf == ',') buf++;
    2d3c:	5f4d4f52 	svcpl	0x004d4f52
    2d40:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
			*sap = '\0';
    2d44:	65475f46 	strbvs	r5, [r7, #-3910]	; 0xfffff0ba
			break;
    2d48:	61745374 	cmnvs	r4, r4, ror r3
		    case 'd': scani (word); break;
    2d4c:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2d50:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2d54:	616c4600 	cmnvs	ip, r0, lsl #12
    2d58:	65476873 	strbvs	r6, [r7, #-2163]	; 0xfffff78d
    2d5c:	7a695374 	bvc	1a57b34 <__ccfg+0x1a37b8c>
    2d60:	50460065 	subpl	r0, r6, r5, rrx
    2d64:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    2d68:	41504d4f 	cmpmi	r0, pc, asr #26
    2d6c:	5f464552 	svcpl	0x00464552
    2d70:	50460054 	subpl	r0, r6, r4, asr r0
    2d74:	475f5254 			; <UNDEFINED> instruction: 0x475f5254
    2d78:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    2d7c:	44495049 	strbmi	r5, [r9], #-73	; 0xffffffb7
    2d80:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2d84:	5f525450 	svcpl	0x00525450
    2d88:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2d8c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2d90:	00545f35 	subseq	r5, r4, r5, lsr pc
    2d94:	61726170 	cmnvs	r2, r0, ror r1
    2d98:	0030506d 	eorseq	r5, r0, sp, rrx
    2d9c:	4f524f4e 	svcmi	0x00524f4e
    2da0:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    2da4:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    2da8:	47746e49 	ldrbmi	r6, [r4, -r9, asr #28]!
    2dac:	6e417465 	cdpvs	4, 4, cr7, cr1, cr5, {3}
    2db0:	656c4364 	strbvs	r4, [ip, #-868]!	; 0xfffffc9c
    2db4:	70007261 	andvc	r7, r0, r1, ror #4
    2db8:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
		    case 'u': scanu (word); break;
    2dbc:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2dc0:	7a697300 	bvc	1a5f9c8 <__ccfg+0x1a3fa20>
    2dc4:	00745f65 	rsbseq	r5, r4, r5, ror #30
    2dc8:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    2dcc:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2dd0:	646e695f 	strbtvs	r6, [lr], #-2399	; 0xfffff6a1
    2dd4:	4e007865 	cdpmi	8, 0, cr7, cr0, cr5, {3}
    2dd8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ca4 <vscan+0x1c>
    2ddc:	4346525f 	movtmi	r5, #25183	; 0x625f
    2de0:	33696441 	cmncc	r9, #1090519040	; 0x41000000
    2de4:	4c6f6356 	stclmi	3, cr6, [pc], #-344	; 2c94 <vscan+0xc>
    2de8:	6f566f64 	svcvs	0x00566f64
    2dec:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    2df0:	646f4d65 	strbtvs	r4, [pc], #-3429	; 2df8 <vscan+0x170>
    2df4:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
    2df8:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2dfc:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2e00:	525f504f 	subspl	r5, pc, #79	; 0x4f
		    case 'x': scanx (word); break;
    2e04:	4f494441 	svcmi	0x00494441
    2e08:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2e0c:	745f5055 	ldrbvc	r5, [pc], #-85	; 2e14 <vscan+0x18c>
    2e10:	524f4e00 	subpl	r4, pc, #0, 28
    2e14:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2e18:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
    2e1c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2e20:	00746553 	rsbseq	r6, r4, r3, asr r5
    2e24:	4f524f4e 	svcmi	0x00524f4e
    2e28:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    2e2c:	6e795343 	cdpvs	3, 7, cr5, cr9, cr3, {2}
    2e30:	6f506874 	svcvs	0x00506874
    2e34:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    2e38:	006e776f 	rsbeq	r7, lr, pc, ror #14
    2e3c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    2e40:	65646972 	strbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2e44:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
    2e48:	70006d69 	andvc	r6, r0, r9, ror #26
    2e4c:	6553704f 	ldrbvs	r7, [r3, #-79]	; 0xffffffb1
    2e50:	00707574 	rsbseq	r7, r0, r4, ror r5
    2e54:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2e58:	00676649 	rsbeq	r6, r7, r9, asr #12
    2e5c:	5f636672 	svcpl	0x00636672
    2e60:	61666564 	cmnvs	r6, r4, ror #10
    2e64:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    2e68:	64417172 	strbvs	r7, [r1], #-370	; 0xfffffe8e
    2e6c:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    2e70:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2d3c <vscan+0xb4>
    2e74:	4346525f 	movtmi	r5, #25183	; 0x625f
    2e78:	50455043 	subpl	r5, r5, r3, asr #32
			switch (*fmt++) {
    2e7c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    2e80:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2e84:	66720074 			; <UNDEFINED> instruction: 0x66720074
    2e88:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2e8c:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    2e90:	525f504f 	subspl	r5, pc, #79	; 0x4f
		    	    case 'd': scani (lword); break;
    2e94:	4f494441 	svcmi	0x00494441
    2e98:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2e9c:	735f5055 	cmpvc	pc, #85	; 0x55
    2ea0:	66527000 	ldrbvs	r7, [r2], -r0
    2ea4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2ea8:	65766f00 	ldrbvs	r6, [r6, #-3840]!	; 0xfffff100
    2eac:	64697272 	strbtvs	r7, [r9], #-626	; 0xfffffd8e
    2eb0:	61765f65 	cmnvs	r6, r5, ror #30
    2eb4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2eb8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2ebc:	2f2e2e2f 	svccs	0x002e2e2f
    2ec0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2ec8 <vscan+0x240>
    2ec4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2ec8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2ecc:	6366722f 	cmnvs	r6, #-268435454	; 0xf0000002
    2ed0:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
    2ed4:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2ed8:	525f444d 	subspl	r4, pc, #1291845632	; 0x4d000000
    2edc:	4f494441 	svcmi	0x00494441
    2ee0:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2ee4:	735f5055 	cmpvc	pc, #85	; 0x55
    2ee8:	63667200 	cmnvs	r6, #0, 4
    2eec:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
		    	    case 'x': scanx (lword); break;
    2ef0:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2ef4:	535f4f49 	cmppl	pc, #292	; 0x124
    2ef8:	50555445 	subspl	r5, r5, r5, asr #8
    2efc:	6200745f 	andvs	r7, r0, #1593835520	; 0x5f000000
    2f00:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    2f04:	6600656c 	strvs	r6, [r0], -ip, ror #10
    2f08:	31676663 	cmncc	r7, r3, ror #12
    2f0c:	7274725f 	rsbsvc	r7, r4, #-268435451	; 0xf0000005
    2f10:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    2f14:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2de0 <vscan+0x158>
    2f18:	4346525f 	movtmi	r5, #25183	; 0x625f
    2f1c:	69725452 	ldmdbvs	r2!, {r1, r4, r6, sl, ip, lr}^
    2f20:	4f4e006d 	svcmi	0x004e006d
    2f24:	5f4d4f52 	svcpl	0x004d4f52
    2f28:	44434652 	strbmi	r4, [r3], #-1618	; 0xfffff9ae
    2f2c:	62726f6f 	rsbsvs	r6, r2, #444	; 0x1bc
    2f30:	536c6c65 	cmnpl	ip, #25856	; 0x6500
    2f34:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
    2f38:	4652006f 	ldrbmi	r0, [r2], -pc, rrx
    2f3c:	6b634143 	blvs	18d3450 <__ccfg+0x18b34a8>
    2f40:	43746e49 	cmnmi	r4, #1168	; 0x490
    2f44:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2f48:	76696400 	strbtvc	r6, [r9], -r0, lsl #8
    2f4c:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    2f50:	524f4e00 	subpl	r4, pc, #0, 28
    2f54:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2f58:	66524346 	ldrbvs	r4, [r2], -r6, asr #6
    2f5c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
		    	    case 'd': scani (lword); break;
    2f60:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2f64:	31706d00 	cmncc	r0, r0, lsl #26
    2f68:	00766572 	rsbseq	r6, r6, r2, ror r5
    2f6c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2f70:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    2f74:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2db4 <vscan+0x12c>
    2f78:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
		    	    case 'u': scanu (lword); break;
    2f7c:	61577465 	cmpvs	r7, r5, ror #8
    2f80:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    2f84:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2e74 <vscan+0x1ec>
    2f88:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    2f8c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    2f90:	524f4e00 	subpl	r4, pc, #0, 28
    2f94:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2f98:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2f9c:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    2fa0:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2de0 <vscan+0x158>
    2fa4:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    2fa8:	61577465 	cmpvs	r7, r5, ror #8
    2fac:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    2fb0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2ea0 <vscan+0x218>
    2fb4:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    2fb8:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    2fbc:	31676643 	cmncc	r7, r3, asr #12
    2fc0:	524f4e00 	subpl	r4, pc, #0, 28
		    	    case 'x': scanx (lword); break;
    2fc4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2fc8:	70757465 	rsbsvc	r7, r5, r5, ror #8
			if ((c = *buf++) == '\0')
    2fcc:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    2fd0:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2e10 <vscan+0x188>
			sap = va_arg (ap, char*);
    2fd4:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
			nc++;
    2fd8:	61577465 	cmpvs	r7, r5, ror #8
			break;
    2fdc:	7075656b 	rsbsvc	r6, r5, fp, ror #10
			while (isspace (*buf)) buf++;
    2fe0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2ed0 <vscan+0x248>
    2fe4:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    2fe8:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
						*sap++ = *buf++;
    2fec:	32676643 	rsbcc	r6, r7, #70254592	; 0x4300000
    2ff0:	524f4e00 	subpl	r4, pc, #0, 28
			while (isspace (*buf)) buf++;
    2ff4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2ff8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2ffc:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
		return 0;
    3000:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 2e40 <vscan+0x1b8>
    3004:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
		    case 'x': scanx (word); break;
    3008:	61577465 	cmpvs	r7, r5, ror #8
    300c:	7075656b 	rsbsvc	r6, r5, fp, ror #10
		    	    case 'x': scanx (lword); break;
    3010:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 2f00 <vscan+0x278>
    3014:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
    3018:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    301c:	33676643 	cmncc	r7, #70254592	; 0x4300000
    3020:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3024:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3028:	2f2e2e2f 	svccs	0x002e2e2f
    302c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3030:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3034:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    3038:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    303c:	4f4e0063 	svcmi	0x004e0063
    3040:	5f4d4f52 	svcpl	0x004d4f52
    3044:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3048:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    304c:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
    3050:	646f4d65 	strbtvs	r4, [pc], #-3429	; 3058 <NOROM_AONBatMonTemperatureGetDegC+0x18>
    3054:	63634165 	cmnvs	r3, #1073741849	; 0x40000019
    3058:	6964726f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    305c:	6f54676e 	svcvs	0x0054676e
    3060:	67666343 	strbvs	r6, [r6, -r3, asr #6]!
    3064:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0xfffffaad
    3068:	00676e69 	rsbeq	r6, r7, r9, ror #28
    306c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3070:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    3074:	76655231 			; <UNDEFINED> instruction: 0x76655231
    3078:	6f697369 	svcvs	0x00697369
    307c:	4f41006e 	svcmi	0x0041006e
    3080:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
    3084:	6761744a 	strbvs	r7, [r1, -sl, asr #8]!
    3088:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    308c:	66664f72 	uqsub16vs	r4, r6, r2
    3090:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    3094:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    3098:	6f437265 	svcvs	0x00437265
    309c:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    30a0:	00746573 	rsbseq	r6, r4, r3, ror r5
    30a4:	4f524f4e 	svcmi	0x00524f4e
    30a8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    30ac:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    30b0:	446d6972 	strbtmi	r6, [sp], #-2418	; 0xfffff68e
    30b4:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    30b8:	74760065 	ldrbtvc	r0, [r6], #-101	; 0xffffff9b
    30bc:	5f6d6972 	svcpl	0x006d6972
    30c0:	67696475 			; <UNDEFINED> instruction: 0x67696475
    30c4:	33697500 	cmncc	r9, #0, 10
    30c8:	6e6f4132 	mcrvs	1, 3, r4, cr15, cr2, {1}
    30cc:	52737953 	rsbspl	r7, r3, #1359872	; 0x14c000
    30d0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    30d4:	006c7463 	rsbeq	r7, ip, r3, ror #8
    30d8:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    30dc:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 30e4 <NOROM_OSCClockSourceSet+0x2c>
    30e0:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    30e4:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    30e8:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    30ec:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
    30f0:	6f437265 	svcvs	0x00437265
    30f4:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    30f8:	57746573 			; <UNDEFINED> instruction: 0x57746573
    30fc:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3100:	6f724670 	svcvs	0x00724670
    3104:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    3108:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    310c:	6b61576e 	blvs	1858ecc <__ccfg+0x1838f24>
    3110:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3114:	506d6f72 	rsbpl	r6, sp, r2, ror pc
    3118:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    311c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    3120:	524f4e00 	subpl	r4, pc, #0, 28
    3124:	545f4d4f 	ldrbpl	r4, [pc], #-3407	; 312c <NOROM_OSCClockSourceGet+0x18>
    3128:	43736968 	cmnmi	r3, #104, 18	; 0x1a0000
    312c:	4965646f 	stmdbmi	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    3130:	69754273 	ldmdbvs	r5!, {r0, r1, r4, r5, r6, r9, lr}^
    3134:	6f46746c 	svcvs	0x0046746c
    3138:	31434372 	hvccc	13362	; 0x3432
    313c:	48787833 	ldmdami	r8!, {r0, r1, r4, r5, fp, ip, sp, lr}^
    3140:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3144:	6e413032 	mcrvs	0, 2, r3, cr1, cr2, {1}
    3148:	74614c64 	strbtvc	r4, [r1], #-3172	; 0xfffff39c
    314c:	485f7265 	ldmdami	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    3150:	49746c61 	ldmdbmi	r4!, {r0, r5, r6, sl, fp, sp, lr}^
    3154:	6f695666 	svcvs	0x00695666
    3158:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0xfffffe94
    315c:	74760064 	ldrbtvc	r0, [r6], #-100	; 0xffffff9c
    3160:	5f6d6972 	svcpl	0x006d6972
    3164:	00646f62 	rsbeq	r6, r4, r2, ror #30
    3168:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    316c:	4c747845 	ldclmi	8, cr7, [r4], #-276	; 0xfffffeec
    3170:	6b6c4366 	blvs	1b13f10 <__ccfg+0x1af3f68>
    3174:	72756300 	rsbsvc	r6, r5, #0, 6
    3178:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    317c:	6c436648 	mcrrvs	6, 4, r6, r3, cr8
    3180:	006b636f 	rsbeq	r6, fp, pc, ror #6
    3184:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3188:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    318c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3190:	006c6156 	rsbeq	r6, ip, r6, asr r1
    3194:	4f524f4e 	svcmi	0x00524f4e
    3198:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    319c:	47707574 			; <UNDEFINED> instruction: 0x47707574
    31a0:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    31a4:	6f466d69 	svcvs	0x00466d69
    31a8:	616e4172 	smcvs	58386	; 0xe412
    31ac:	61707962 	cmnvs	r0, r2, ror #18
    31b0:	61567373 	cmpvs	r6, r3, ror r3
    31b4:	3165756c 	cmncc	r5, ip, ror #10
    31b8:	524f4e00 	subpl	r4, pc, #0, 28
    31bc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    31c0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    31c4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    31c8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    31cc:	6244726f 	subvs	r7, r4, #-268435450	; 0xf0000006
    31d0:	6f4c726c 	svcvs	0x004c726c
    31d4:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    31d8:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    31dc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    31e0:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 3018 <SafeHapiVoid>
    31e4:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    31e8:	72756300 	rsbsvc	r6, r5, #0, 6
    31ec:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    31f0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    31f4:	6d697600 	stclvs	6, cr7, [r9, #-0]
    31f8:	6c744373 	ldclvs	3, cr4, [r4], #-460	; 0xfffffe34
    31fc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3200:	62690030 	rsbvs	r0, r9, #48	; 0x30
    3204:	4f736169 	svcmi	0x00736169
    3208:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    320c:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    3210:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3214:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3218:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    321c:	74436668 	strbvc	r6, [r3], #-1640	; 0xfffff998
    3220:	6c61566c 	stclvs	6, cr5, [r1], #-432	; 0xfffffe50
    3224:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    3228:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 30f4 <NOROM_OSCClockSourceSet+0x3c>
    322c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3230:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3234:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3238:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    323c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3240:	61466648 	cmpvs	r6, r8, asr #12
    3244:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    3248:	00747261 	rsbseq	r7, r4, r1, ror #4
    324c:	4f524f4e 	svcmi	0x00524f4e
    3250:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3254:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3258:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    325c:	6f466d69 	svcvs	0x00466d69
    3260:	4f635272 	svcmi	0x00635272
    3264:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    3268:	61694249 	cmnvs	r9, r9, asr #4
    326c:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
    3270:	6564006d 	strbvs	r0, [r4, #-109]!	; 0xffffff93
    3274:	4161746c 	cmnmi	r1, ip, ror #8
    3278:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    327c:	4f4e0074 	svcmi	0x004e0074
    3280:	5f4d4f52 	svcpl	0x004d4f52
    3284:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3288:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    328c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3290:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    3294:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    3298:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    329c:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    32a0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    32a4:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    32a8:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    32ac:	66437478 			; <UNDEFINED> instruction: 0x66437478
    32b0:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    32b4:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
    32b8:	61746c65 	cmnvs	r4, r5, ror #24
    32bc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    32c0:	33697500 	cmncc	r9, #0, 10
    32c4:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    32c8:	46664863 	strbtmi	r4, [r6], -r3, ror #16
    32cc:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
    32d0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    32d4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    32d8:	4f4e0065 	svcmi	0x004e0065
    32dc:	5f4d4f52 	svcpl	0x004d4f52
    32e0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    32e4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    32e8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    32ec:	41726f46 	cmnmi	r2, r6, asr #30
    32f0:	6f63706d 	svcvs	0x0063706d
    32f4:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    32f8:	4f4e0031 	svcmi	0x004e0031
    32fc:	5f4d4f52 	svcpl	0x004d4f52
    3300:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3304:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3308:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    330c:	41726f46 	cmnmi	r2, r6, asr #30
    3310:	6f63706d 	svcvs	0x0063706d
    3314:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    3318:	4f4e0032 	svcmi	0x004e0032
    331c:	5f4d4f52 	svcpl	0x004d4f52
    3320:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3324:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3328:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    332c:	41726f46 	cmnmi	r2, r6, asr #30
    3330:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3334:	66756256 			; <UNDEFINED> instruction: 0x66756256
    3338:	4e006e45 	cdpmi	14, 0, cr6, cr0, cr5, {2}
    333c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3208 <NOROM_RFCDoorbellSendTo+0x1c>
    3340:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3344:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    3348:	69725767 	ldmdbvs	r2!, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}^
    334c:	66006574 			; <UNDEFINED> instruction: 0x66006574
    3350:	31676663 	cmncc	r7, r3, ror #12
    3354:	61746144 	cmnvs	r4, r4, asr #2
    3358:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    335c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3360:	734f6352 	movtvc	r6, #62290	; 0xf352
    3364:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    3368:	73616942 	cmnvc	r1, #1081344	; 0x108000
    336c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3370:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3374:	61740065 	cmnvs	r4, r5, rrx
    3378:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    337c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3380:	524f4e00 	subpl	r4, pc, #0, 28
    3384:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3388:	70757465 	rsbsvc	r7, r5, r5, ror #8
    338c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3390:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3394:	6152726f 	cmpvs	r2, pc, ror #4
    3398:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    339c:	67664374 			; <UNDEFINED> instruction: 0x67664374
    33a0:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    33a4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    33a8:	2f2e2e2f 	svccs	0x002e2e2f
    33ac:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    33b0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    33b4:	65732f62 	ldrbvs	r2, [r3, #-3938]!	; 0xfffff09e
    33b8:	5f707574 	svcpl	0x00707574
    33bc:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    33c0:	75730063 	ldrbvc	r0, [r3, #-99]!	; 0xffffff9d
    33c4:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    33c8:	00636e49 	rsbeq	r6, r3, r9, asr #28
    33cc:	4f524f4e 	svcmi	0x00524f4e
    33d0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    33d4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    33d8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    33dc:	6f466d69 	svcvs	0x00466d69
    33e0:	4f635272 	svcmi	0x00635272
    33e4:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    33e8:	6e757452 	mrcvs	4, 3, r7, cr5, cr2, {2}
    33ec:	75744365 	ldrbvc	r4, [r4, #-869]!	; 0xfffffc9b
    33f0:	7254656e 	subsvc	r6, r4, #461373440	; 0x1b800000
    33f4:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    33f8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 32c4 <NOROM_RFCRfTrimRead+0x64>
    33fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3400:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3404:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    3408:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    340c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3410:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    3414:	616c7567 	cmnvs	ip, r7, ror #10
    3418:	41726f74 	cmnmi	r2, r4, ror pc
    341c:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    3420:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    3424:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    3428:	75006f69 	strvc	r6, [r0, #-3945]	; 0xfffff097
    342c:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    3430:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3434:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3438:	67695370 			; <UNDEFINED> instruction: 0x67695370
    343c:	7478456e 	ldrbtvc	r4, [r8], #-1390	; 0xfffffa92
    3440:	56646e65 	strbtpl	r6, [r4], -r5, ror #28
    3444:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    3448:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    344c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3450:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    3454:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3458:	41726f46 	cmnmi	r2, r6, asr #30
    345c:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3460:	66756256 			; <UNDEFINED> instruction: 0x66756256
    3464:	61566e45 	cmpvs	r6, r5, asr #28
    3468:	0065756c 	rsbeq	r7, r5, ip, ror #10
    346c:	4f524f4e 	svcmi	0x00524f4e
    3470:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3474:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3478:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    347c:	6f466d69 	svcvs	0x00466d69
    3480:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    3484:	6f4d6853 	svcvs	0x004d6853
    3488:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    348c:	32336900 	eorscc	r6, r3, #0, 18
    3490:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    3494:	64566465 	ldrbvs	r6, [r6], #-1125	; 0xfffffb9b
    3498:	61567264 	cmpvs	r6, r4, ror #4
    349c:	6f6d006c 	svcvs	0x006d006c
    34a0:	6f436564 	svcvs	0x00436564
    34a4:	0031666e 	eorseq	r6, r1, lr, ror #12
    34a8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    34ac:	67666346 	strbvs	r6, [r6, -r6, asr #6]!
    34b0:	6c615631 	stclvs	6, cr5, [r1], #-196	; 0xffffff3c
    34b4:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    34b8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3384 <NOROM_RFCRfTrimRead+0x124>
    34bc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    34c0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    34c4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    34c8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    34cc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    34d0:	62496648 	subvs	r6, r9, #72, 12	; 0x4800000
    34d4:	74736169 	ldrbtvc	r6, [r3], #-361	; 0xfffffe97
    34d8:	6d726568 	cfldr64vs	mvdx6, [r2, #-416]!	; 0xfffffe60
    34dc:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    34e0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    34e4:	41726f46 	cmnmi	r2, r6, asr #30
    34e8:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    34ec:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    34f0:	61566e45 	cmpvs	r6, r5, asr #28
    34f4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    34f8:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    34fc:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3500:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3504:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3508:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    350c:	734f3167 	movtvc	r3, #61799	; 0xf167
    3510:	6e6f4363 	cdpvs	3, 6, cr4, cr15, cr3, {3}
    3514:	62640066 	rsbvs	r0, r4, #102	; 0x66
    3518:	6f4c726c 	svcvs	0x004c726c
    351c:	6946706f 	stmdbvs	r6, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    3520:	7265746c 	rsbvc	r7, r5, #108, 8	; 0x6c000000
    3524:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3528:	6c6f5674 	stclvs	6, cr5, [pc], #-464	; 3360 <NOROM_RFCRfTrimRead+0x100>
    352c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    3530:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3534:	72740065 	rsbsvc	r0, r4, #101	; 0x65
    3538:	6f466d69 	svcvs	0x00466d69
    353c:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    3540:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    3544:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    3548:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
    354c:	43646e41 	cmnmi	r4, #1040	; 0x410
    3550:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
    3554:	61527277 	cmpvs	r2, r7, ror r2
    3558:	566f6974 			; <UNDEFINED> instruction: 0x566f6974
    355c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3560:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    3564:	6e497361 	cdpvs	3, 4, cr7, cr9, cr1, {3}
    3568:	4e007469 	cdpmi	4, 0, cr7, cr0, cr9, {3}
    356c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3438 <NOROM_RFCRTrim+0x88>
    3570:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3574:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    3578:	6e6f4174 	mcrvs	1, 3, r4, cr15, cr4, {3}
    357c:	53637452 	cmnpl	r3, #1375731712	; 0x52000000
    3580:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    3584:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    3588:	524f4e00 	subpl	r4, pc, #0, 28
    358c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3590:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3594:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3598:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    359c:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    35a0:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 33e8 <NOROM_RFCRTrim+0x38>
    35a4:	72744370 	rsbsvc	r4, r4, #112, 6	; 0xc0000001
    35a8:	6975006c 	ldmdbvs	r5!, {r2, r3, r5, r6}^
    35ac:	6f583233 	svcvs	0x00583233
    35b0:	66486373 			; <UNDEFINED> instruction: 0x66486373
    35b4:	00776f52 	rsbseq	r6, r7, r2, asr pc
    35b8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    35bc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    35c0:	6f436648 	svcvs	0x00436648
    35c4:	4f4e006c 	svcmi	0x004e006c
    35c8:	5f4d4f52 	svcpl	0x004d4f52
    35cc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    35d0:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    35d4:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    35d8:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
    35dc:	656e006c 	strbvs	r0, [lr, #-108]!	; 0xffffff94
    35e0:	69725477 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, sl, ip, lr}^
    35e4:	7761526d 	strbvc	r5, [r1, -sp, ror #4]!
    35e8:	33697500 	cmncc	r9, #0, 10
    35ec:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    35f0:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    35f4:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    35f8:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    35fc:	6d6f7473 	cfstrdvs	mvd7, [pc, #-460]!	; 3438 <NOROM_RFCRTrim+0x88>
    3600:	65447265 	strbvs	r7, [r4, #-613]	; 0xfffffd9b
    3604:	4161746c 	cmnmi	r1, ip, ror #8
    3608:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    360c:	33690074 	cmncc	r9, #116	; 0x74
    3610:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    3614:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    3618:	65447065 	strbvs	r7, [r4, #-101]	; 0xffffff9b
    361c:	0061746c 	rsbeq	r7, r1, ip, ror #8
    3620:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3624:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3628:	76746341 	ldrbtvc	r6, [r4], -r1, asr #6
    362c:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    3630:	6d655472 	cfstrdvs	mvd5, [r5, #-456]!	; 0xfffffe38
    3634:	69640070 	stmdbvs	r4!, {r4, r5, r6}^
    3638:	64566666 	ldrbvs	r6, [r6], #-1638	; 0xfffff99a
    363c:	63417264 	movtvs	r7, #4708	; 0x1264
    3640:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    3644:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    3648:	72700070 	rsbsvc	r0, r0, #112	; 0x70
    364c:	61526d63 	cmpvs	r2, r3, ror #26
    3650:	7465526d 	strbtvc	r5, [r5], #-621	; 0xfffffd93
    3654:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3658:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
    365c:	0064616f 	rsbeq	r6, r4, pc, ror #2
    3660:	4f524f4e 	svcmi	0x00524f4e
    3664:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3668:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    366c:	6a64416c 	bvs	1913c24 <__ccfg+0x18f3c7c>
    3670:	52747375 	rsbspl	r7, r4, #-738197503	; 0xd4000001
    3674:	61686365 	cmnvs	r8, r5, ror #6
    3678:	41656772 	smcmi	22130	; 0x5672
    367c:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    3680:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3684:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    3688:	4f4e006e 	svcmi	0x004e006e
    368c:	5f4d4f52 	svcpl	0x004d4f52
    3690:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3694:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
    3698:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0xfffffb9b
    369c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    36a0:	65426567 	strbvs	r6, [r2, #-1383]	; 0xfffffa99
    36a4:	65726f66 	ldrbvs	r6, [r2, #-3942]!	; 0xfffff09a
    36a8:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    36ac:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    36b0:	2f2e006e 	svccs	0x002e006e
    36b4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    36b8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    36bc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    36c0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    36c4:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    36c8:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    36cc:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    36d0:	4f4e0063 	svcmi	0x004e0063
    36d4:	5f4d4f52 	svcpl	0x004d4f52
    36d8:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    36dc:	526c7274 	rsbpl	r7, ip, #116, 4	; 0x40000007
    36e0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    36e4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    36e8:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    36ec:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    36f0:	6f443233 	svcvs	0x00443233
    36f4:	6e69616d 	powvsez	f6, f1, #5.0
    36f8:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
    36fc:	70004572 	andvc	r4, r0, r2, ror r5
    3700:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    3704:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    3708:	75413233 	strbvc	r3, [r1, #-563]	; 0xfffffdcd
    370c:	6f6c4378 	svcvs	0x006c4378
    3710:	00736b63 	rsbseq	r6, r3, r3, ror #22
    3714:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    3718:	616d6f44 	cmnvs	sp, r4, asr #30
    371c:	6e456e69 	cdpvs	14, 4, cr6, cr5, cr9, {3}
    3720:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    3724:	72657000 	rsbvc	r7, r5, #0
    3728:	656e004d 	strbvs	r0, [lr, #-77]!	; 0xffffffb3
    372c:	63655277 	cmnvs	r5, #1879048199	; 0x70000007
    3730:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3734:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3738:	00646f69 	rsbeq	r6, r4, r9, ror #30
    373c:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3740:	00706143 	rsbseq	r6, r0, r3, asr #2
    3744:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3748:	00786449 	rsbseq	r6, r8, r9, asr #8
    374c:	74536470 	ldrbvc	r6, [r3], #-1136	; 0xfffffb90
    3750:	00657461 	rsbeq	r7, r5, r1, ror #8
    3754:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    3758:	52747365 	rsbspl	r7, r4, #-1811939327	; 0x94000001
    375c:	61686365 	cmnvs	r8, r5, ror #6
    3760:	50656772 	rsbpl	r6, r5, r2, ror r7
    3764:	6f697265 	svcvs	0x00697265
    3768:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
    376c:	5661746c 	strbtpl	r7, [r1], -ip, ror #8
    3770:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3774:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3778:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    377c:	74616200 	strbtvc	r6, [r1], #-512	; 0xfffffe00
    3780:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    3784:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 35c0 <TrimAfterColdResetWakeupFromShutDown+0xbc>
    3788:	6f780064 	svcvs	0x00780064
    378c:	6f506373 	svcvs	0x00506373
    3790:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    3794:	0065646f 	rsbeq	r6, r5, pc, ror #8
    3798:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    379c:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xfffff0b4
    37a0:	00746547 	rsbseq	r6, r4, r7, asr #10
    37a4:	66696873 			; <UNDEFINED> instruction: 0x66696873
    37a8:	54646574 	strbtpl	r6, [r4], #-1396	; 0xfffffa8c
    37ac:	00706d65 	rsbseq	r6, r0, r5, ror #26
    37b0:	65446374 	strbvs	r6, [r4, #-884]	; 0xfffffc8c
    37b4:	0061746c 	rsbeq	r7, r1, ip, ror #8
    37b8:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    37bc:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    37c0:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    37c4:	00474365 	subeq	r4, r7, r5, ror #6
    37c8:	53727563 	cmnpl	r2, #415236096	; 0x18c00000
    37cc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    37d0:	6e6f6100 	powvse	f6, f7, f0
    37d4:	63737953 	cmnvs	r3, #1359872	; 0x14c000
    37d8:	77506c74 			; <UNDEFINED> instruction: 0x77506c74
    37dc:	6c746372 	ldclvs	3, cr6, [r4], #-456	; 0xfffffe38
    37e0:	54647000 	strbtpl	r7, [r4], #-0
    37e4:	00656d69 	rsbeq	r6, r5, r9, ror #26
    37e8:	4f524f4e 	svcmi	0x00524f4e
    37ec:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    37f0:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    37f4:	776f506c 	strbvc	r5, [pc, -ip, rrx]!
    37f8:	76457265 	strbvc	r7, [r5], -r5, ror #4
    37fc:	74797265 	ldrbtvc	r7, [r9], #-613	; 0xfffffd9b
    3800:	676e6968 	strbvs	r6, [lr, -r8, ror #18]!
    3804:	6f4c7000 	svcvs	0x004c7000
    3808:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
    380c:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    3810:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    3814:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3818:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    381c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    3820:	6100646f 	tstvs	r0, pc, ror #8
    3824:	61426e6f 	cmpvs	r2, pc, ror #28
    3828:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    382c:	00746142 	rsbseq	r6, r4, r2, asr #2
    3830:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    3834:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3838:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    383c:	6f500070 	svcvs	0x00500070
    3840:	51726577 	cmnpl	r2, r7, ror r5
    3844:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    3848:	61626f6c 	cmnvs	r2, ip, ror #30
    384c:	745f736c 	ldrbvc	r7, [pc], #-876	; 3854 <NOROM_SetupGetTrimForAmpcompCtrl+0x18>
    3850:	524f4e00 	subpl	r4, pc, #0, 28
    3854:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3858:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    385c:	445f6c72 	ldrbmi	r6, [pc], #-3186	; 3864 <NOROM_SetupGetTrimForAmpcompCtrl+0x28>
    3860:	5f434443 	svcpl	0x00434443
    3864:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    3868:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    386c:	69646e6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3870:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    3874:	6f436c61 	svcvs	0x00436c61
    3878:	6f72746e 	svcvs	0x0072746e
    387c:	6f70006c 	svcvs	0x0070006c
    3880:	51726577 	cmnpl	r2, r7, ror r5
    3884:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    3888:	61626f6c 	cmnvs	r2, ip, ror #30
    388c:	5000736c 	andpl	r7, r0, ip, ror #6
    3890:	4f544f52 	svcmi	0x00544f52
    3894:	424c4f43 	submi	r4, ip, #268	; 0x10c
    3898:	505f5449 	subspl	r5, pc, r9, asr #8
    389c:	72706f72 	rsbsvc	r6, r0, #456	; 0x1c8
    38a0:	61746569 	cmnvs	r4, r9, ror #10
    38a4:	50007972 	andpl	r7, r0, r2, ror r9
    38a8:	414b4341 	cmpmi	fp, r1, asr #6
    38ac:	345f4547 	ldrbcc	r4, [pc], #-1351	; 38b4 <NOROM_SetupGetTrimForAdcShModeEn>
    38b0:	43003478 	movwmi	r3, #1144	; 0x478
    38b4:	5f504948 	svcpl	0x00504948
    38b8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    38bc:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    38c0:	00303436 	eorseq	r3, r0, r6, lsr r4
    38c4:	65666177 	strbvs	r6, [r6, #-375]!	; 0xfffffe89
    38c8:	00644972 	rsbeq	r4, r4, r2, ror r9
    38cc:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    38d0:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    38d4:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    38d8:	694c5f78 	stmdbvs	ip, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    38dc:	4f4e007a 	svcmi	0x004e007a
    38e0:	5f4d4f52 	svcpl	0x004d4f52
    38e4:	70696843 	rsbvc	r6, r9, r3, asr #16
    38e8:	6f666e49 	svcvs	0x00666e49
    38ec:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    38f0:	70696843 	rsbvc	r6, r9, r3, asr #16
    38f4:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    38f8:	4e00796c 	vmlsmi.f16	s14, s0, s25	; <UNPREDICTABLE>
    38fc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 37c8 <NOROM_SetupGetTrimForAnabypassValue1+0x24>
    3900:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3904:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3908:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    390c:	63615074 	cmnvs	r1, #116	; 0x74
    3910:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    3914:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3918:	524f4e00 	subpl	r4, pc, #0, 28
    391c:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3920:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3924:	5f6f666e 	svcpl	0x006f666e
    3928:	48746547 	ldmdami	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    392c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3930:	6f697369 	svcvs	0x00697369
    3934:	6170006e 	cmnvs	r0, lr, rrx
    3938:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    393c:	43006570 	movwmi	r6, #1392	; 0x570
    3940:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    3944:	5f657079 	svcpl	0x00657079
    3948:	77480074 	smlsldxvc	r0, r8, r4, r0
    394c:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    3950:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    3954:	4300745f 	movwmi	r7, #1119	; 0x45f
    3958:	5f504948 	svcpl	0x00504948
    395c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3960:	3143435f 	cmpcc	r3, pc, asr r3
    3964:	00303133 	eorseq	r3, r0, r3, lsr r1
    3968:	70696843 	rsbvc	r6, r9, r3, asr #16
    396c:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    3970:	745f796c 	ldrbvc	r7, [pc], #-2412	; 3978 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10>
    3974:	52776800 	rsbspl	r6, r7, #0, 16
    3978:	43007665 	movwmi	r7, #1637	; 0x665
    397c:	5f504948 	svcpl	0x00504948
    3980:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3984:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3988:	00303536 	eorseq	r3, r0, r6, lsr r5
    398c:	4b434150 	blmi	10d3ed4 <__ccfg+0x10b3f2c>
    3990:	5f454741 	svcpl	0x00454741
    3994:	50534357 	subspl	r4, r3, r7, asr r3
    3998:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    399c:	6552726f 	ldrbvs	r7, [r2, #-623]	; 0xfffffd91
    39a0:	41460076 	hvcmi	24582	; 0x6006
    39a4:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    39a8:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    39ac:	5f787836 	svcpl	0x00787836
    39b0:	43003252 	movwmi	r3, #594	; 0x252
    39b4:	5f504948 	svcpl	0x00504948
    39b8:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    39bc:	3143435f 	cmpcc	r3, pc, asr r3
    39c0:	00303533 	eorseq	r3, r0, r3, lsr r5
    39c4:	70696843 	rsbvc	r6, r9, r3, asr #16
    39c8:	6f666e49 	svcvs	0x00666e49
    39cc:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    39d0:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    39d4:	49796c69 	ldmdbmi	r9!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    39d8:	31434373 	hvccc	13363	; 0x3433
    39dc:	00787833 	rsbseq	r7, r8, r3, lsr r8
    39e0:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    39e4:	555f594c 	ldrbpl	r5, [pc, #-2380]	; 30a0 <NOROM_AONRTCCurrent64BitValueGet+0x10>
    39e8:	6f6e6b6e 	svcvs	0x006e6b6e
    39ec:	43006e77 	movwmi	r6, #3703	; 0xe77
    39f0:	5f504948 	svcpl	0x00504948
    39f4:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    39f8:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    39fc:	00303236 	eorseq	r3, r0, r6, lsr r2
    3a00:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    3a04:	76655231 			; <UNDEFINED> instruction: 0x76655231
    3a08:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3a0c:	5f594c49 	svcpl	0x00594c49
    3a10:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3a14:	63007878 	movwvs	r7, #2168	; 0x878
    3a18:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3a1c:	48006d61 	stmdami	r0, {r0, r5, r6, r8, sl, fp, sp, lr}
    3a20:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3a24:	6b6e555f 	blvs	1b98fa8 <__ccfg+0x1b79000>
    3a28:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3a2c:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3a30:	72503167 	subsvc	r3, r0, #-1073741799	; 0xc0000019
    3a34:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    3a38:	50006c6f 	andpl	r6, r0, pc, ror #24
    3a3c:	6f746f72 	svcvs	0x00746f72
    3a40:	426c6f63 	rsbmi	r6, ip, #396	; 0x18c
    3a44:	65567469 	ldrbvs	r7, [r6, #-1129]	; 0xfffffb97
    3a48:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    3a4c:	5000745f 	andpl	r7, r0, pc, asr r4
    3a50:	4f544f52 	svcmi	0x00544f52
    3a54:	424c4f43 	submi	r4, ip, #268	; 0x10c
    3a58:	495f5449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    3a5c:	5f454545 	svcpl	0x00454545
    3a60:	5f323038 	svcpl	0x00323038
    3a64:	345f3531 	ldrbcc	r3, [pc], #-1329	; 3a6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>
    3a68:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3a6c:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3a70:	555f4550 	ldrbpl	r4, [pc, #-1360]	; 3528 <TrimAfterColdResetWakeupFromShutDown+0x24>
    3a74:	6f6e6b6e 	svcvs	0x006e6b6e
    3a78:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    3a7c:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3a80:	325f325f 	subscc	r3, pc, #-268435451	; 0xf0000005
    3a84:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3a88:	5f594c49 	svcpl	0x00594c49
    3a8c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3a90:	50007878 	andpl	r7, r0, r8, ror r8
    3a94:	414b4341 	cmpmi	fp, r1, asr #6
    3a98:	375f4547 	ldrbcc	r4, [pc, -r7, asr #10]
    3a9c:	50003778 	andpl	r3, r0, r8, ror r7
    3aa0:	4f544f52 	svcmi	0x00544f52
    3aa4:	5f4c4f43 	svcpl	0x004c4f43
    3aa8:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    3aac:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3ab0:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    3ab4:	5f325f56 	svcpl	0x00325f56
    3ab8:	4f4e0030 	svcmi	0x004e0030
    3abc:	5f4d4f52 	svcpl	0x004d4f52
    3ac0:	70696843 	rsbvc	r6, r9, r3, asr #16
    3ac4:	6f666e49 	svcvs	0x00666e49
    3ac8:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    3acc:	70696843 	rsbvc	r6, r9, r3, asr #16
    3ad0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    3ad4:	52574800 	subspl	r4, r7, #0, 16
    3ad8:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3adc:	5000315f 	andpl	r3, r0, pc, asr r1
    3ae0:	4f544f52 	svcmi	0x00544f52
    3ae4:	424c4f43 	submi	r4, ip, #268	; 0x10c
    3ae8:	425f5449 	subsmi	r5, pc, #1224736768	; 0x49000000
    3aec:	4600454c 	strmi	r4, [r0], -ip, asr #10
    3af0:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3af4:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3af8:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3afc:	6167415f 	cmnvs	r7, pc, asr r1
    3b00:	52574800 	subspl	r4, r7, #0, 16
    3b04:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3b08:	6300335f 	movwvs	r3, #863	; 0x35f
    3b0c:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    3b10:	00657079 	rsbeq	r7, r5, r9, ror r0
    3b14:	50494843 	subpl	r4, r9, r3, asr #16
    3b18:	5059545f 	subspl	r5, r9, pc, asr r4
    3b1c:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    3b20:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 39dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x74>
    3b24:	4300305f 	movwmi	r3, #95	; 0x5f
    3b28:	5f504948 	svcpl	0x00504948
    3b2c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3b30:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    3b34:	5f4d4f54 	svcpl	0x004d4f54
    3b38:	48430031 	stmdami	r3, {r0, r4, r5}^
    3b3c:	545f5049 	ldrbpl	r5, [pc], #-73	; 3b44 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x40>
    3b40:	5f455059 	svcpl	0x00455059
    3b44:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3b48:	48003033 	stmdami	r0, {r0, r1, r4, r5, ip, sp}
    3b4c:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3b50:	305f315f 	subscc	r3, pc, pc, asr r1	; <UNPREDICTABLE>
    3b54:	43415000 	movtmi	r5, #4096	; 0x1000
    3b58:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3b5c:	6b6e555f 	blvs	1b990e0 <__ccfg+0x1b79138>
    3b60:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3b64:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3b68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3b6c:	2f2e2e2f 	svccs	0x002e2e2f
    3b70:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3b74:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3b78:	68632f62 	stmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3b7c:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    3b80:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    3b84:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3b88:	73553167 	cmpvc	r5, #-1073741799	; 0xc0000019
    3b8c:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    3b90:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3b94:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3b98:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3b9c:	76654474 			; <UNDEFINED> instruction: 0x76654474
    3ba0:	49656369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    3ba4:	52774864 	rsbspl	r4, r7, #100, 16	; 0x640000
    3ba8:	6f437665 	svcvs	0x00437665
    3bac:	43006564 	movwmi	r6, #1380	; 0x564
    3bb0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3bb4:	5f6f666e 	svcpl	0x006f666e
    3bb8:	4d746547 	cfldr64mi	mvdx6, [r4, #-284]!	; 0xfffffee4
    3bbc:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    3bc0:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3bc4:	696d0076 	stmdbvs	sp!, {r1, r2, r4, r5, r6}^
    3bc8:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3bcc:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3bd0:	524f4e00 	subpl	r4, pc, #0, 28
    3bd4:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3bd8:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3bdc:	5f6f666e 	svcpl	0x006f666e
    3be0:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    3be4:	6f707075 	svcvs	0x00707075
    3be8:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
    3bec:	746f7250 	strbtvc	r7, [pc], #-592	; 3bf4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    3bf0:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3a3c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xd4>
    3bf4:	0056425f 	subseq	r4, r6, pc, asr r2
    3bf8:	4b434150 	blmi	10d4140 <__ccfg+0x10b4198>
    3bfc:	5f454741 	svcpl	0x00454741
    3c00:	45464157 	strbmi	r4, [r6, #-343]	; 0xfffffea9
    3c04:	41500052 	cmpmi	r0, r2, asr r0
    3c08:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3c0c:	78355f45 	ldmdavc	r5!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    3c10:	61500035 	cmpvs	r0, r5, lsr r0
    3c14:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    3c18:	70795465 	rsbsvc	r5, r9, r5, ror #8
    3c1c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    3c20:	70696843 	rsbvc	r6, r9, r3, asr #16
    3c24:	6f666e49 	svcvs	0x00666e49
    3c28:	5277485f 	rsbspl	r4, r7, #6225920	; 0x5f0000
    3c2c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3c30:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    3c34:	54475f73 	strbpl	r5, [r7], #-3955	; 0xfffff08d
    3c38:	325f5145 	subscc	r5, pc, #1073741841	; 0x40000011
    3c3c:	4300305f 	movwmi	r3, #95	; 0x5f
    3c40:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3c44:	5f6f666e 	svcpl	0x006f666e
    3c48:	55746547 	ldrbpl	r6, [r4, #-1351]!	; 0xfffffab9
    3c4c:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    3c50:	69750064 	ldmdbvs	r5!, {r2, r5, r6}^
    3c54:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    3c58:	4f4e0067 	svcmi	0x004e0067
    3c5c:	5f4d4f52 	svcpl	0x004d4f52
    3c60:	31494444 	cmpcc	r9, r4, asr #8
    3c64:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    3c68:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    3c6c:	61655264 	cmnvs	r5, r4, ror #4
    3c70:	416e0064 	cmnmi	lr, r4, rrx
    3c74:	00726464 	rsbseq	r6, r2, r4, ror #8
    3c78:	4f524f4e 	svcmi	0x00524f4e
    3c7c:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3c80:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3c84:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    3c88:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    3c8c:	00746552 	rsbseq	r6, r4, r2, asr r5
    3c90:	41787541 	cmnmi	r8, r1, asr #10
    3c94:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    3c98:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    3c9c:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    3ca0:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    3ca4:	44363169 	ldrtmi	r3, [r6], #-361	; 0xfffffe97
    3ca8:	00617461 	rsbeq	r7, r1, r1, ror #8
    3cac:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3cb0:	61447257 	cmpvs	r4, r7, asr r2
    3cb4:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    3cb8:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    3cbc:	00617461 	rsbeq	r7, r1, r1, ror #8
    3cc0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3cc4:	66696853 			; <UNDEFINED> instruction: 0x66696853
    3cc8:	4f4e0074 	svcmi	0x004e0074
    3ccc:	5f4d4f52 	svcpl	0x004d4f52
    3cd0:	31494444 	cmpcc	r9, r4, asr #8
    3cd4:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    3cd8:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    3cdc:	69725764 	ldmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, lr}^
    3ce0:	6e006574 	cfrshl64vs	mvdx0, mvdx4, r6
    3ce4:	61746144 	cmnvs	r4, r4, asr #2
    3ce8:	33697500 	cmncc	r9, #0, 10
    3cec:	6c615632 	stclvs	6, cr5, [r1], #-200	; 0xffffff38
    3cf0:	78754100 	ldmdavc	r5!, {r8, lr}^
    3cf4:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    3cf8:	61536964 	cmpvs	r3, r4, ror #18
    3cfc:	65526566 	ldrbvs	r6, [r2, #-1382]	; 0xfffffa9a
    3d00:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    3d04:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3bd0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xcc>
    3d08:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    3d0c:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    3d10:	69725774 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, ip, lr}^
    3d14:	2e006574 	cfrshl64cs	mvdx0, mvdx4, r6
    3d18:	2f2e2e2f 	svccs	0x002e2e2f
    3d1c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3d20:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3d24:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3d28:	2f62696c 	svccs	0x0062696c
    3d2c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    3d30:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
    3d34:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    3d38:	64644167 	strbtvs	r4, [r4], #-359	; 0xfffffe99
    3d3c:	536e0072 	cmnpl	lr, #114	; 0x72
    3d40:	00657a69 	rsbeq	r7, r5, r9, ror #20
    3d44:	6e5f435f 	mrcvs	3, 2, r4, cr15, cr15, {2}
    3d48:	72656d75 	rsbvc	r6, r5, #7488	; 0x1d40
    3d4c:	6c5f6369 	mrrcvs	3, 6, r6, pc, cr9	; <UNPREDICTABLE>
    3d50:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    3d54:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
    3d58:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    3d5c:	735f7963 	cmpvc	pc, #1622016	; 0x18c000
    3d60:	6f626d79 	svcvs	0x00626d79
    3d64:	7463006c 	strbtvc	r0, [r3], #-108	; 0xffffff94
    3d68:	5f657079 	svcpl	0x00657079
    3d6c:	00727470 	rsbseq	r7, r2, r0, ror r4
    3d70:	30747364 	rsbscc	r7, r4, r4, ror #6
    3d74:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    3d78:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    3d7c:	7473645f 	ldrbtvc	r6, [r3], #-1119	; 0xfffffba1
    3d80:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    3d84:	735f6e5f 	cmpvc	pc, #1520	; 0x5f0
    3d88:	625f7065 	subsvs	r7, pc, #101	; 0x65
    3d8c:	70735f79 	rsbsvc	r5, r3, r9, ror pc
    3d90:	00656361 	rsbeq	r6, r5, r1, ror #6
    3d94:	6e6f636c 	cdpvs	3, 6, cr6, cr15, cr12, {3}
    3d98:	6a630076 	bvs	18c3f78 <__ccfg+0x18a3fd0>
    3d9c:	616c5f6b 	cmnvs	ip, fp, ror #30
    3da0:	6c00676e 	stcvs	7, cr6, [r0], {110}	; 0x6e
    3da4:	756e5f63 	strbvc	r5, [lr, #-3939]!	; 0xfffff09d
    3da8:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    3dac:	00545f63 	subseq	r5, r4, r3, ror #30
    3db0:	745f435f 	ldrbvc	r4, [pc], #-863	; 3db8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    3db4:	5f656d69 	svcpl	0x00656d69
    3db8:	61636f6c 	cmnvs	r3, ip, ror #30
    3dbc:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    3dc0:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
    3dc4:	5f727275 	svcpl	0x00727275
    3dc8:	626d7973 	rsbvs	r7, sp, #1884160	; 0x1cc000
    3dcc:	6c006c6f 	stcvs	12, cr6, [r0], {111}	; 0x6f
    3dd0:	69745f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3dd4:	545f656d 	ldrbpl	r6, [pc], #-1389	; 3ddc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x188>
    3dd8:	746c6100 	strbtvc	r6, [ip], #-256	; 0xffffff00
    3ddc:	6769645f 			; <UNDEFINED> instruction: 0x6769645f
    3de0:	00737469 	rsbseq	r7, r3, r9, ror #8
    3de4:	635f435f 	cmpvs	pc, #2080374785	; 0x7c000001
    3de8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3dec:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3df0:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3df4:	705f6d61 	subsvc	r6, pc, r1, ror #26
    3df8:	7265006d 	rsbvc	r0, r5, #109	; 0x6d
    3dfc:	5f645f61 	svcpl	0x00645f61
    3e00:	6d665f74 	stclvs	15, cr5, [r6, #-464]!	; 0xfffffe30
    3e04:	6f6e0074 	svcvs	0x006e0074
    3e08:	00727473 	rsbseq	r7, r2, r3, ror r4
    3e0c:	6d5f636c 	ldclvs	3, cr6, [pc, #-432]	; 3c64 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x10>
    3e10:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    3e14:	5f797261 	svcpl	0x00797261
    3e18:	656d0054 	strbvs	r0, [sp, #-84]!	; 0xffffffac
    3e1c:	67617373 			; <UNDEFINED> instruction: 0x67617373
    3e20:	6f635f65 	svcvs	0x00635f65
    3e24:	65736564 	ldrbvs	r6, [r3, #-1380]!	; 0xfffffa9c
    3e28:	626d0074 	rsbvs	r0, sp, #116	; 0x74
    3e2c:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
    3e30:	5f435f00 	svcpl	0x00435f00
    3e34:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    3e38:	73656761 	cmnvc	r5, #25427968	; 0x1840000
    3e3c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3e40:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3e44:	5f746e69 	svcpl	0x00746e69
    3e48:	69735f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3e4c:	705f6e67 	subsvc	r6, pc, r7, ror #28
    3e50:	006e736f 	rsbeq	r7, lr, pc, ror #6
    3e54:	5f6e6f6d 	svcpl	0x006e6f6d
    3e58:	756f7267 	strbvc	r7, [pc, #-615]!	; 3bf9 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf5>
    3e5c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
    3e60:	665f5800 	ldrbvs	r5, [pc], -r0, lsl #16
    3e64:	6900746d 	stmdbvs	r0, {r0, r2, r3, r5, r6, sl, ip, sp, lr}
    3e68:	705f746e 	subsvc	r7, pc, lr, ror #8
    3e6c:	5f73635f 	svcpl	0x0073635f
    3e70:	63657270 	cmnvs	r5, #112, 4
    3e74:	73656465 	cmnvc	r5, #1694498816	; 0x65000000
    3e78:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    3e7c:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
    3e80:	6c616d69 	stclvs	13, cr6, [r1], #-420	; 0xfffffe5c
    3e84:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    3e88:	6300746e 	movwvs	r7, #1134	; 0x46e
    3e8c:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    3e90:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
    3e94:	6d665f65 	stclvs	15, cr5, [r6, #-404]!	; 0xfffffe6c
    3e98:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
    3e9c:	69746167 	ldmdbvs	r4!, {r0, r1, r2, r5, r6, r8, sp, lr}^
    3ea0:	735f6576 	cmpvc	pc, #494927872	; 0x1d800000
    3ea4:	006e6769 	rsbeq	r6, lr, r9, ror #14
    3ea8:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    3eac:	6d5f7275 	lfmvs	f7, 2, [pc, #-468]	; 3ce0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8c>
    3eb0:	77007861 	strvc	r7, [r0, -r1, ror #16]
    3eb4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3eb8:	7000745f 	andvc	r7, r0, pc, asr r4
    3ebc:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
    3ec0:	5f657669 	svcpl	0x00657669
    3ec4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    3ec8:	79746300 	ldmdbvc	r4!, {r8, r9, sp, lr}^
    3ecc:	635f6570 	cmpvs	pc, #112, 10	; 0x1c000000
    3ed0:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
    3ed4:	6c007465 	cfstrsvs	mvf7, [r0], {101}	; 0x65
    3ed8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
    3edc:	62756f64 	rsbsvs	r6, r5, #100, 30	; 0x190
    3ee0:	6e00656c 	cfsh32vs	mvfx6, mvfx0, #60
    3ee4:	7078656f 	rsbsvc	r6, r8, pc, ror #10
    3ee8:	5f780072 	svcpl	0x00780072
    3eec:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3ef0:	6f627573 	svcvs	0x00627573
    3ef4:	72617470 	rsbvc	r7, r1, #112, 8	; 0x70000000
    3ef8:	6e690067 	cdpvs	0, 6, cr0, cr9, cr7, {3}
    3efc:	5f705f74 	svcpl	0x00705f74
    3f00:	5f706573 	svcpl	0x00706573
    3f04:	735f7962 	cmpvc	pc, #1605632	; 0x188000
    3f08:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    3f0c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    3f10:	635f6e5f 	cmpvs	pc, #1520	; 0x5f0
    3f14:	72705f73 	rsbsvc	r5, r0, #460	; 0x1cc
    3f18:	64656365 	strbtvs	r6, [r5], #-869	; 0xfffffc9b
    3f1c:	2e007365 	cdpcs	3, 0, cr7, cr0, cr5, {3}
    3f20:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3f24:	2f2e2e2f 	svccs	0x002e2e2f
    3f28:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3f2c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3f30:	2f2e2e2f 	svccs	0x002e2e2f
    3f34:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    3f38:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    3f3c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    3f40:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 3dc0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x16c>
    3f44:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    3f48:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    3f4c:	6d2f6d72 	stcvs	13, cr6, [pc, #-456]!	; 3d8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3f50:	70636d65 	rsbvc	r6, r3, r5, ror #26
    3f54:	74732d79 	ldrbtvc	r2, [r3], #-3449	; 0xfffff287
    3f58:	632e6275 			; <UNDEFINED> instruction: 0x632e6275
    3f5c:	5f646d00 	svcpl	0x00646d00
    3f60:	6564726f 	strbvs	r7, [r4, #-623]!	; 0xfffffd91
    3f64:	65790072 	ldrbvs	r0, [r9, #-114]!	; 0xffffff8e
    3f68:	72747373 	rsbsvc	r7, r4, #-872415231	; 0xcc000001
    3f6c:	73657900 	cmnvc	r5, #0, 18
    3f70:	72707865 	rsbsvc	r7, r0, #6619136	; 0x650000
    3f74:	61726500 	cmnvs	r2, r0, lsl #10
    3f78:	665f645f 			; <UNDEFINED> instruction: 0x665f645f
    3f7c:	6c00746d 	cfstrsvs	mvf7, [r0], {109}	; 0x6d
    3f80:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
    3f84:	5f657079 	svcpl	0x00657079
    3f88:	72650054 	rsbvc	r0, r5, #84	; 0x54
    3f8c:	5f745f61 	svcpl	0x00745f61
    3f90:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3f94:	6f746377 	svcvs	0x00746377
    3f98:	6d00626d 	sfmvs	f6, 4, [r0, #-436]	; 0xfffffe4c
    3f9c:	745f6e6f 	ldrbvc	r6, [pc], #-3695	; 3fa4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    3fa0:	73756f68 	cmnvc	r5, #104, 30	; 0x1a0
    3fa4:	73646e61 	cmnvc	r4, #1552	; 0x610
    3fa8:	7065735f 	rsbvc	r7, r5, pc, asr r3
    3fac:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    3fb0:	6d665f6d 	stclvs	15, cr5, [r6, #-436]!	; 0xfffffe4c
    3fb4:	636c0074 	cmnvs	ip, #116	; 0x74
    3fb8:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    3fbc:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
    3fc0:	00545f73 	subseq	r5, r4, r3, ror pc
    3fc4:	6b656577 	blvs	195d5a8 <__ccfg+0x193d600>
    3fc8:	00796164 	rsbseq	r6, r9, r4, ror #2
    3fcc:	6d5f435f 	ldclvs	3, cr4, [pc, #-380]	; 3e58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>
    3fd0:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    3fd4:	5f797261 	svcpl	0x00797261
    3fd8:	61636f6c 	cmnvs	r3, ip, ror #30
    3fdc:	6300656c 	movwvs	r6, #1388	; 0x56c
    3fe0:	67657461 	strbvs	r7, [r5, -r1, ror #8]!
    3fe4:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
    3fe8:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
    3fec:	5f6e5f74 	svcpl	0x006e5f74
    3ff0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    3ff4:	736f705f 	cmnvc	pc, #95	; 0x5f
    3ff8:	6c61006e 	stclvs	0, cr0, [r1], #-440	; 0xfffffe48
    3ffc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    4000:	72735f64 	rsbsvc	r5, r3, #100, 30	; 0x190
    4004:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
    4008:	31432055 	qdaddcc	r2, r5, r3
    400c:	2e382037 	mrccs	0, 1, r2, cr8, cr7, {1}
    4010:	20312e33 	eorscs	r2, r1, r3, lsr lr
    4014:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    4018:	33303730 	teqcc	r0, #48, 14	; 0xc00000
    401c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    4020:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    4024:	5b202965 	blpl	80e5c0 <__ccfg+0x7ee618>
    4028:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    402c:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
    4030:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    4034:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    4038:	6f697369 	svcvs	0x00697369
    403c:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    4040:	37323033 			; <UNDEFINED> instruction: 0x37323033
    4044:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    4048:	616f6c66 	cmnvs	pc, r6, ror #24
    404c:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4050:	6f733d69 	svcvs	0x00733d69
    4054:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    4058:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
    405c:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    4060:	6f6c666d 	svcvs	0x006c666d
    4064:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
    4068:	733d6962 	teqvc	sp, #1605632	; 0x188000
    406c:	2074666f 	rsbscs	r6, r4, pc, ror #12
    4070:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
    4074:	72613d75 	rsbvc	r3, r1, #7488	; 0x1d40
    4078:	6474376d 	ldrbtvs	r3, [r4], #-1901	; 0xfffff893
    407c:	2d20696d 			; <UNDEFINED> instruction: 0x2d20696d
    4080:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    4084:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    4088:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    408c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4090:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    4094:	6f6e662d 	svcvs	0x006e662d
    4098:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    409c:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
    40a0:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    40a4:	2f646c69 	svccs	0x00646c69
    40a8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    40ac:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    40b0:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    40b4:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    40b8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    40bc:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    40c0:	622f302e 	eorvs	r3, pc, #46	; 0x2e
    40c4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    40c8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    40cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    40d0:	61652d65 	cmnvs	r5, r5, ror #26
    40d4:	742f6962 	strtvc	r6, [pc], #-2402	; 40dc <rand+0x30>
    40d8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    40dc:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    40e0:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xfffff090
    40e4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    40e8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    40ec:	616d2f63 	cmnvs	sp, r3, ror #30
    40f0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    40f4:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    40f8:	656c006d 	strbvs	r0, [ip, #-109]!	; 0xffffff93
    40fc:	6900306e 	stmdbvs	r0, {r1, r2, r3, r5, r6, ip, sp}
    4100:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
    4104:	5f636172 	svcpl	0x00636172
    4108:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
    410c:	73007374 	movwvc	r7, #884	; 0x374
    4110:	00306372 	eorseq	r6, r0, r2, ror r3
    4114:	5f746c61 	svcpl	0x00746c61
    4118:	746e6f6d 	strbtvc	r6, [lr], #-3949	; 0xfffff093
    411c:	2e2e0068 	cdpcs	0, 2, cr0, cr14, cr8, {3}
    4120:	2f2e2e2f 	svccs	0x002e2e2f
    4124:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4128:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    412c:	2f2e2e2f 	svccs	0x002e2e2f
    4130:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4134:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4138:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    413c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    4140:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    4144:	61722f62 	cmnvs	r2, r2, ror #30
    4148:	632e646e 			; <UNDEFINED> instruction: 0x632e646e
    414c:	61727300 	cmnvs	r2, r0, lsl #6
    4150:	2f00646e 	svccs	0x0000646e
    4154:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4158:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    415c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4160:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    4164:	2f787945 	svccs	0x00787945
    4168:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    416c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    4170:	302e332e 	eorcc	r3, lr, lr, lsr #6
    4174:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4178:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    417c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4180:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4184:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4188:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    418c:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    4190:	2f70666f 	svccs	0x0070666f
    4194:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4198:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 3ffc <memcpy+0x10>
    419c:	2f636269 	svccs	0x00636269
    41a0:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    41a4:	5f006269 	svcpl	0x00006269
    41a8:	6c796164 	ldfvse	f6, [r9], #-400	; 0xfffffe70
    41ac:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
    41b0:	7a745f00 	bvc	1d1bdb8 <__ccfg+0x1cfbe10>
    41b4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    41b8:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
    41bc:	6d697474 	cfstrdvs	mvd7, [r9, #-464]!	; 0xfffffe30
    41c0:	64666f65 	strbtvs	r6, [r6], #-3941	; 0xfffff09b
    41c4:	725f7961 	subsvc	r7, pc, #1589248	; 0x184000
    41c8:	735f5f00 	cmpvc	pc, #0, 30
    41cc:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
    41d0:	73646e6f 	cmnvc	r4, #1776	; 0x6f0
    41d4:	2e00745f 	cfmvsrcs	mvf0, r7
    41d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    41dc:	2f2e2e2f 	svccs	0x002e2e2f
    41e0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    41e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    41e8:	2f2e2e2f 	svccs	0x002e2e2f
    41ec:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    41f0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4054 <memcpy+0x68>
    41f4:	2f636269 	svccs	0x00636269
    41f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    41fc:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
    4200:	00632e65 	rsbeq	r2, r3, r5, ror #28
    4204:	735f7674 	cmpvc	pc, #116, 12	; 0x7400000
    4208:	2f006365 	svccs	0x00006365
    420c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4210:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    4214:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4218:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    421c:	2f787945 	svccs	0x00787945
    4220:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4224:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    4228:	302e332e 	eorcc	r3, lr, lr, lsr #6
    422c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4230:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    4234:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4238:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    423c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4240:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    4244:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    4248:	2f70666f 	svccs	0x0070666f
    424c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4250:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 40b4 <rand+0x8>
    4254:	2f636269 	svccs	0x00636269
    4258:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    425c:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    4260:	6f7a656d 	svcvs	0x007a656d
    4264:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
    4268:	73755f76 	cmnvc	r5, #472	; 0x1d8
    426c:	2e006365 	cdpcs	3, 0, cr6, cr0, cr5, {3}
    4270:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4274:	2f2e2e2f 	svccs	0x002e2e2f
    4278:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    427c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4280:	2f2e2e2f 	svccs	0x002e2e2f
    4284:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4288:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 40ec <time+0x8>
    428c:	2f636269 	svccs	0x00636269
    4290:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    4294:	65672f74 	strbvs	r2, [r7, #-3956]!	; 0xfffff08c
    4298:	6d697474 	cfstrdvs	mvd7, [r9, #-464]!	; 0xfffffe30
    429c:	64666f65 	strbtvs	r6, [r6], #-3941	; 0xfffff09b
    42a0:	2e727961 	vsubcs.f16	s15, s4, s3	; <UNPREDICTABLE>
    42a4:	74700063 	ldrbtvc	r0, [r0], #-99	; 0xffffff9d
    42a8:	7a656d69 	bvc	195f854 <__ccfg+0x193f8ac>
    42ac:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    42b0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    42b4:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    42b8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    42bc:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    42c0:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    42c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    42c8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    42cc:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    42d0:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    42d4:	2f646c69 	svccs	0x00646c69
    42d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    42dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    42e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    42e4:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    42e8:	2f626d75 	svccs	0x00626d75
    42ec:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    42f0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    42f4:	2f62696c 	svccs	0x0062696c
    42f8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    42fc:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    4300:	7000746e 	andvc	r7, r0, lr, ror #8
    4304:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    4308:	006c6176 	rsbeq	r6, ip, r6, ror r1
    430c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
    4310:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    4314:	6164666f 	cmnvs	r4, pc, ror #12
    4318:	6d690079 	stclvs	0, cr0, [r9, #-484]!	; 0xfffffe1c
    431c:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    4320:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    4324:	2e2e0061 	cdpcs	0, 2, cr0, cr14, cr1, {3}
    4328:	2f2e2e2f 	svccs	0x002e2e2f
    432c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4330:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4334:	2f2e2e2f 	svccs	0x002e2e2f
    4338:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    433c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4340:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4344:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    4348:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    434c:	706d692f 	rsbvc	r6, sp, pc, lsr #18
    4350:	2e657275 	mcrcs	2, 3, r7, cr5, cr5, {3}
    4354:	725f0063 	subsvc	r0, pc, #99	; 0x63
    4358:	616c6365 	cmnvs	ip, r5, ror #6
    435c:	725f6d69 	subsvc	r6, pc, #6720	; 0x1a40
    4360:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4364:	69687400 	stmdbvs	r8!, {sl, ip, sp, lr}^
    4368:	656e6f73 	strbvs	r6, [lr, #-3955]!	; 0xfffff08d
    436c:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
    4370:	70756e61 	rsbsvc	r6, r5, r1, ror #28
    4374:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
    4378:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    437c:	2f2e2e2f 	svccs	0x002e2e2f
    4380:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4384:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4388:	2f2e2e2f 	svccs	0x002e2e2f
    438c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4390:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4394:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4398:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    439c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    43a0:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    43a4:	632e746e 			; <UNDEFINED> instruction: 0x632e746e
    43a8:	72665f00 	rsbvc	r5, r6, #0, 30
    43ac:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
    43b0:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
    43b4:	656e6f74 	strbvs	r6, [lr, #-3956]!	; 0xfffff08c
    43b8:	52415400 	subpl	r5, r1, #0, 8
    43bc:	5f544547 	svcpl	0x00544547
    43c0:	5f555043 	svcpl	0x00555043
    43c4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    43c8:	31617865 	cmncc	r1, r5, ror #16
    43cc:	726f6337 	rsbvc	r6, pc, #-603979776	; 0xdc000000
    43d0:	61786574 	cmnvs	r8, r4, ror r5
    43d4:	73690037 	cmnvc	r9, #55	; 0x37
    43d8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    43dc:	70665f74 	rsbvc	r5, r6, r4, ror pc
    43e0:	6c62645f 	cfstrdvs	mvd6, [r2], #-380	; 0xfffffe84
    43e4:	6d726100 	ldfvse	f6, [r2, #-0]
    43e8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    43ec:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    43f0:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    43f4:	52415400 	subpl	r5, r1, #0, 8
    43f8:	5f544547 	svcpl	0x00544547
    43fc:	5f555043 	svcpl	0x00555043
    4400:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4404:	326d7865 	rsbcc	r7, sp, #6619136	; 0x650000
    4408:	52410033 	subpl	r0, r1, #51	; 0x33
    440c:	51455f4d 	cmppl	r5, sp, asr #30
    4410:	52415400 	subpl	r5, r1, #0, 8
    4414:	5f544547 	svcpl	0x00544547
    4418:	5f555043 	svcpl	0x00555043
    441c:	316d7261 	cmncc	sp, r1, ror #4
    4420:	74363531 	ldrtvc	r3, [r6], #-1329	; 0xfffffacf
    4424:	00736632 	rsbseq	r6, r3, r2, lsr r6
    4428:	5f617369 	svcpl	0x00617369
    442c:	5f746962 	svcpl	0x00746962
    4430:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4434:	41540062 	cmpmi	r4, r2, rrx
    4438:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    443c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4440:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4444:	61786574 	cmnvs	r8, r4, ror r5
    4448:	6f633735 	svcvs	0x00633735
    444c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4450:	00333561 	eorseq	r3, r3, r1, ror #10
    4454:	756d5f5f 	strbvc	r5, [sp, #-3935]!	; 0xfffff0a1
    4458:	3369646c 	cmncc	r9, #108, 8	; 0x6c000000
    445c:	53414200 	movtpl	r4, #4608	; 0x1200
    4460:	52415f45 	subpl	r5, r1, #276	; 0x114
    4464:	385f4843 	ldmdacc	pc, {r0, r1, r6, fp, lr}^	; <UNPREDICTABLE>
    4468:	41425f4d 	cmpmi	r2, sp, asr #30
    446c:	54004553 	strpl	r4, [r0], #-1363	; 0xfffffaad
    4470:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4474:	50435f54 	subpl	r5, r3, r4, asr pc
    4478:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    447c:	3031386d 	eorscc	r3, r1, sp, ror #16
    4480:	52415400 	subpl	r5, r1, #0, 8
    4484:	5f544547 	svcpl	0x00544547
    4488:	5f555043 	svcpl	0x00555043
    448c:	6e656778 	mcrvs	7, 3, r6, cr5, cr8, {3}
    4490:	41003165 	tstmi	r0, r5, ror #2
    4494:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4498:	415f5343 	cmpmi	pc, r3, asr #6
    449c:	53435041 	movtpl	r5, #12353	; 0x3041
    44a0:	4d57495f 	vldrmi.16	s9, [r7, #-190]	; 0xffffff42	; <UNPREDICTABLE>
    44a4:	0054584d 	subseq	r5, r4, sp, asr #16
    44a8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    44ac:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    44b0:	00305f48 	eorseq	r5, r0, r8, asr #30
    44b4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    44b8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    44bc:	00325f48 	eorseq	r5, r2, r8, asr #30
    44c0:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    44c4:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    44c8:	00335f48 	eorseq	r5, r3, r8, asr #30
    44cc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    44d0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    44d4:	00345f48 	eorseq	r5, r4, r8, asr #30
    44d8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    44dc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    44e0:	00365f48 	eorseq	r5, r6, r8, asr #30
    44e4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    44e8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    44ec:	00375f48 	eorseq	r5, r7, r8, asr #30
    44f0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    44f4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    44f8:	785f5550 	ldmdavc	pc, {r4, r6, r8, sl, ip, lr}^	; <UNPREDICTABLE>
    44fc:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    4500:	69680065 	stmdbvs	r8!, {r0, r2, r5, r6}^
    4504:	69006867 	stmdbvs	r0, {r0, r1, r2, r5, r6, fp, sp, lr}
    4508:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    450c:	705f7469 	subsvc	r7, pc, r9, ror #8
    4510:	72646572 	rsbvc	r6, r4, #478150656	; 0x1c800000
    4514:	54007365 	strpl	r7, [r0], #-869	; 0xfffffc9b
    4518:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    451c:	50435f54 	subpl	r5, r3, r4, asr pc
    4520:	6f635f55 	svcvs	0x00635f55
    4524:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4528:	0033336d 	eorseq	r3, r3, sp, ror #6
    452c:	74495355 	strbvc	r5, [r9], #-853	; 0xfffffcab
    4530:	00657079 	rsbeq	r7, r5, r9, ror r0
    4534:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4538:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    453c:	2f2e2e2f 	svccs	0x002e2e2f
    4540:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 4490 <__pi_hex_enc_table+0x7>
    4544:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    4548:	696c2f63 	stmdbvs	ip!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    454c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4550:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    4554:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4558:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    455c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4560:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4564:	00696d64 	rsbeq	r6, r9, r4, ror #26
    4568:	5f617369 	svcpl	0x00617369
    456c:	69626f6e 	stmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    4570:	41540074 	cmpmi	r4, r4, ror r0
    4574:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4578:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    457c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4580:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4584:	73667a6a 	cmnvc	r6, #434176	; 0x6a000
    4588:	61736900 	cmnvs	r3, r0, lsl #18
    458c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4590:	7066765f 	rsbvc	r7, r6, pc, asr r6
    4594:	41003276 	tstmi	r0, r6, ror r2
    4598:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    459c:	555f5343 	ldrbpl	r5, [pc, #-835]	; 4261 <_gettimeofday+0xc5>
    45a0:	4f4e4b4e 	svcmi	0x004e4b4e
    45a4:	54004e57 	strpl	r4, [r0], #-3671	; 0xfffff1a9
    45a8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    45ac:	50435f54 	subpl	r5, r3, r4, asr pc
    45b0:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    45b4:	0065396d 	rsbeq	r3, r5, sp, ror #18
    45b8:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    45bc:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    45c0:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    45c4:	61004a45 	tstvs	r0, r5, asr #20
    45c8:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    45cc:	6d736663 	ldclvs	6, cr6, [r3, #-396]!	; 0xfffffe74
    45d0:	6174735f 	cmnvs	r4, pc, asr r3
    45d4:	61006574 	tstvs	r0, r4, ror r5
    45d8:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    45dc:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    45e0:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    45e4:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
    45e8:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
    45ec:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    45f0:	73690073 	cmnvc	r9, #115	; 0x73
    45f4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    45f8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
    45fc:	5f5f0063 	svcpl	0x005f0063
    4600:	5f7a6c63 	svcpl	0x007a6c63
    4604:	00626174 	rsbeq	r6, r2, r4, ror r1
    4608:	5f4d5241 	svcpl	0x004d5241
    460c:	61004356 	tstvs	r0, r6, asr r3
    4610:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4614:	5f686372 	svcpl	0x00686372
    4618:	61637378 	smcvs	14136	; 0x3738
    461c:	4100656c 	tstmi	r0, ip, ror #10
    4620:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    4624:	57440045 	strbpl	r0, [r4, -r5, asr #32]
    4628:	6f696e75 	svcvs	0x00696e75
    462c:	5241006e 	subpl	r0, r1, #110	; 0x6e
    4630:	53565f4d 	cmppl	r6, #308	; 0x134
    4634:	4d524100 	ldfmie	f4, [r2, #-0]
    4638:	0045475f 	subeq	r4, r5, pc, asr r7
    463c:	5f6d7261 	svcpl	0x006d7261
    4640:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4644:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    4648:	61676e6f 	cmnvs	r7, pc, ror #28
    464c:	63006d72 	movwvs	r6, #3442	; 0xd72
    4650:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    4654:	66207865 	strtvs	r7, [r0], -r5, ror #16
    4658:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    465c:	52415400 	subpl	r5, r1, #0, 8
    4660:	5f544547 	svcpl	0x00544547
    4664:	5f555043 	svcpl	0x00555043
    4668:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    466c:	31617865 	cmncc	r1, r5, ror #16
    4670:	41540035 	cmpmi	r4, r5, lsr r0
    4674:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4678:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    467c:	3761665f 			; <UNDEFINED> instruction: 0x3761665f
    4680:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    4684:	52415400 	subpl	r5, r1, #0, 8
    4688:	5f544547 	svcpl	0x00544547
    468c:	5f555043 	svcpl	0x00555043
    4690:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4694:	31617865 	cmncc	r1, r5, ror #16
    4698:	52410037 	subpl	r0, r1, #55	; 0x37
    469c:	54475f4d 	strbpl	r5, [r7], #-3917	; 0xfffff0b3
    46a0:	52415400 	subpl	r5, r1, #0, 8
    46a4:	5f544547 	svcpl	0x00544547
    46a8:	5f555043 	svcpl	0x00555043
    46ac:	766f656e 	strbtvc	r6, [pc], -lr, ror #10
    46b0:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
    46b4:	5400316e 	strpl	r3, [r0], #-366	; 0xfffffe92
    46b8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    46bc:	50435f54 	subpl	r5, r3, r4, asr pc
    46c0:	6f635f55 	svcvs	0x00635f55
    46c4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    46c8:	00663472 	rsbeq	r3, r6, r2, ror r4
    46cc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    46d0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    46d4:	45375f48 	ldrmi	r5, [r7, #-3912]!	; 0xfffff0b8
    46d8:	4e47004d 	cdpmi	0, 4, cr0, cr7, cr13, {2}
    46dc:	31432055 	qdaddcc	r2, r5, r3
    46e0:	2e392037 	mrccs	0, 1, r2, cr9, cr7, {1}
    46e4:	20312e32 	eorscs	r2, r1, r2, lsr lr
    46e8:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    46ec:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
    46f0:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    46f4:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    46f8:	5b202965 	blpl	80ec94 <__ccfg+0x7eecec>
    46fc:	2f4d5241 	svccs	0x004d5241
    4700:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4704:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    4708:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    470c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    4710:	6f697369 	svcvs	0x00697369
    4714:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    4718:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
    471c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    4720:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    4724:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    4728:	616f6c66 	cmnvs	pc, r6, ror #24
    472c:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    4730:	6f733d69 	svcvs	0x00733d69
    4734:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    4738:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    473c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4740:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4744:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    4748:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    474c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    4750:	20743476 	rsbscs	r3, r4, r6, ror r4
    4754:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    4758:	672d2067 	strvs	r2, [sp, -r7, rrx]!
    475c:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4760:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4764:	324f2d20 	subcc	r2, pc, #32, 26	; 0x800
    4768:	62662d20 	rsbvs	r2, r6, #32, 26	; 0x800
    476c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4770:	2d676e69 	stclcs	14, cr6, [r7, #-420]!	; 0xfffffe5c
    4774:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4778:	2d206363 	stccs	3, cr6, [r0, #-396]!	; 0xfffffe74
    477c:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 45ec <patchGenfskRfe+0x44>
    4780:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
    4784:	72702d6b 	rsbsvc	r2, r0, #6848	; 0x1ac0
    4788:	6365746f 	cmnvs	r5, #1862270976	; 0x6f000000
    478c:	20726f74 	rsbscs	r6, r2, r4, ror pc
    4790:	6f6e662d 	svcvs	0x006e662d
    4794:	6c6e692d 			; <UNDEFINED> instruction: 0x6c6e692d
    4798:	20656e69 	rsbcs	r6, r5, r9, ror #28
    479c:	6976662d 	ldmdbvs	r6!, {r0, r2, r3, r5, r9, sl, sp, lr}^
    47a0:	69626973 	stmdbvs	r2!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
    47a4:	7974696c 	ldmdbvc	r4!, {r2, r3, r5, r6, r8, fp, sp, lr}^
    47a8:	6469683d 	strbtvs	r6, [r9], #-2109	; 0xfffff7c3
    47ac:	006e6564 	rsbeq	r6, lr, r4, ror #10
    47b0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    47b4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    47b8:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    47bc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    47c0:	32316178 	eorscc	r6, r1, #120, 2
    47c4:	73616800 	cmnvc	r1, #0, 16
    47c8:	6c617668 	stclvs	6, cr7, [r1], #-416	; 0xfffffe60
    47cc:	4200745f 	andmi	r7, r0, #1593835520	; 0x5f000000
    47d0:	5f455341 	svcpl	0x00455341
    47d4:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    47d8:	5a4b365f 	bpl	12d215c <__ccfg+0x12b21b4>
    47dc:	61736900 	cmnvs	r3, r0, lsl #18
    47e0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    47e4:	72610073 	rsbvc	r0, r1, #115	; 0x73
    47e8:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    47ec:	615f6863 	cmpvs	pc, r3, ror #16
    47f0:	685f6d72 	ldmdavs	pc, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    47f4:	76696477 			; <UNDEFINED> instruction: 0x76696477
    47f8:	6d726100 	ldfvse	f6, [r2, #-0]
    47fc:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4800:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
    4804:	73690063 	cmnvc	r9, #99	; 0x63
    4808:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    480c:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4810:	41003631 	tstmi	r0, r1, lsr r6
    4814:	485f4d52 	ldmdami	pc, {r1, r4, r6, r8, sl, fp, lr}^	; <UNPREDICTABLE>
    4818:	73690049 	cmnvc	r9, #73	; 0x49
    481c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4820:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
    4824:	54007669 	strpl	r7, [r0], #-1641	; 0xfffff997
    4828:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    482c:	50435f54 	subpl	r5, r3, r4, asr pc
    4830:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4834:	3331316d 	teqcc	r1, #1073741851	; 0x4000001b
    4838:	00736a36 	rsbseq	r6, r3, r6, lsr sl
    483c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4840:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4844:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4848:	00386d72 	eorseq	r6, r8, r2, ror sp
    484c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4850:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4854:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4858:	00396d72 	eorseq	r6, r9, r2, ror sp
    485c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4860:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4864:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4868:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    486c:	6d726100 	ldfvse	f6, [r2, #-0]
    4870:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4874:	6d635f68 	stclvs	15, cr5, [r3, #-416]!	; 0xfffffe60
    4878:	54006573 	strpl	r6, [r0], #-1395	; 0xfffffa8d
    487c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4880:	50435f54 	subpl	r5, r3, r4, asr pc
    4884:	6f635f55 	svcvs	0x00635f55
    4888:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    488c:	5400346d 	strpl	r3, [r0], #-1133	; 0xfffffb93
    4890:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4894:	50435f54 	subpl	r5, r3, r4, asr pc
    4898:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    489c:	6530316d 	ldrvs	r3, [r0, #-365]!	; 0xfffffe93
    48a0:	52415400 	subpl	r5, r1, #0, 8
    48a4:	5f544547 	svcpl	0x00544547
    48a8:	5f555043 	svcpl	0x00555043
    48ac:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    48b0:	376d7865 	strbcc	r7, [sp, -r5, ror #16]!
    48b4:	6d726100 	ldfvse	f6, [r2, #-0]
    48b8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    48bc:	6f635f64 	svcvs	0x00635f64
    48c0:	41006564 	tstmi	r0, r4, ror #10
    48c4:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    48c8:	415f5343 	cmpmi	pc, r3, asr #6
    48cc:	53435041 	movtpl	r5, #12353	; 0x3041
    48d0:	61736900 	cmnvs	r3, r0, lsl #18
    48d4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    48d8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    48dc:	325f3876 	subscc	r3, pc, #7733248	; 0x760000
    48e0:	53414200 	movtpl	r4, #4608	; 0x1200
    48e4:	52415f45 	subpl	r5, r1, #276	; 0x114
    48e8:	335f4843 	cmpcc	pc, #4390912	; 0x430000
    48ec:	4154004d 	cmpmi	r4, sp, asr #32
    48f0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    48f4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    48f8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    48fc:	74303137 	ldrtvc	r3, [r0], #-311	; 0xfffffec9
    4900:	6d726100 	ldfvse	f6, [r2, #-0]
    4904:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4908:	77695f68 	strbvc	r5, [r9, -r8, ror #30]!
    490c:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    4910:	73690032 	cmnvc	r9, #50	; 0x32
    4914:	756e5f61 	strbvc	r5, [lr, #-3937]!	; 0xfffff09f
    4918:	69625f6d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    491c:	54007374 	strpl	r7, [r0], #-884	; 0xfffffc8c
    4920:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4924:	50435f54 	subpl	r5, r3, r4, asr pc
    4928:	6f635f55 	svcvs	0x00635f55
    492c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4930:	6c70306d 	ldclvs	0, cr3, [r0], #-436	; 0xfffffe4c
    4934:	6d737375 	ldclvs	3, cr7, [r3, #-468]!	; 0xfffffe2c
    4938:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    493c:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    4940:	00796c70 	rsbseq	r6, r9, r0, ror ip
    4944:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4948:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    494c:	655f5550 	ldrbvs	r5, [pc, #-1360]	; 4404 <_gettimeofday+0x268>
    4950:	6f6e7978 	svcvs	0x006e7978
    4954:	00316d73 	eorseq	r6, r1, r3, ror sp
    4958:	47524154 			; <UNDEFINED> instruction: 0x47524154
    495c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4960:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4964:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4968:	32357278 	eorscc	r7, r5, #120, 4	; 0x80000007
    496c:	61736900 	cmnvs	r3, r0, lsl #18
    4970:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4974:	6964745f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
    4978:	72700076 	rsbsvc	r0, r0, #118	; 0x76
    497c:	72656665 	rsbvc	r6, r5, #105906176	; 0x6500000
    4980:	6f656e5f 	svcvs	0x00656e5f
    4984:	6f665f6e 	svcvs	0x00665f6e
    4988:	34365f72 	ldrtcc	r5, [r6], #-3954	; 0xfffff08e
    498c:	73746962 	cmnvc	r4, #1605632	; 0x188000
    4990:	61736900 	cmnvs	r3, r0, lsl #18
    4994:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4998:	3170665f 	cmncc	r0, pc, asr r6
    499c:	6c6d6636 	stclvs	6, cr6, [sp], #-216	; 0xffffff28
    49a0:	52415400 	subpl	r5, r1, #0, 8
    49a4:	5f544547 	svcpl	0x00544547
    49a8:	5f555043 	svcpl	0x00555043
    49ac:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    49b0:	33617865 	cmncc	r1, #6619136	; 0x650000
    49b4:	41540032 	cmpmi	r4, r2, lsr r0
    49b8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    49bc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    49c0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    49c4:	61786574 	cmnvs	r8, r4, ror r5
    49c8:	69003533 	stmdbvs	r0, {r0, r1, r4, r5, r8, sl, ip, sp}
    49cc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    49d0:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    49d4:	63363170 	teqvs	r6, #112, 2
    49d8:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    49dc:	70736e75 	rsbsvc	r6, r3, r5, ror lr
    49e0:	5f766365 	svcpl	0x00766365
    49e4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    49e8:	0073676e 	rsbseq	r6, r3, lr, ror #14
    49ec:	47524154 			; <UNDEFINED> instruction: 0x47524154
    49f0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    49f4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    49f8:	31316d72 	teqcc	r1, r2, ror sp
    49fc:	32743635 	rsbscc	r3, r4, #55574528	; 0x3500000
    4a00:	41540073 	cmpmi	r4, r3, ror r0
    4a04:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a08:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a0c:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4a10:	61786574 	cmnvs	r8, r4, ror r5
    4a14:	6f633537 	svcvs	0x00633537
    4a18:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4a1c:	00353561 	eorseq	r3, r5, r1, ror #10
    4a20:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a24:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a28:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4a2c:	36303661 	ldrtcc	r3, [r0], -r1, ror #12
    4a30:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4a34:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4a38:	50435f54 	subpl	r5, r3, r4, asr pc
    4a3c:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    4a40:	3632396d 	ldrtcc	r3, [r2], -sp, ror #18
    4a44:	00736a65 	rsbseq	r6, r3, r5, ror #20
    4a48:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4a4c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4a50:	54345f48 	ldrtpl	r5, [r4], #-3912	; 0xfffff0b8
    4a54:	61736900 	cmnvs	r3, r0, lsl #18
    4a58:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4a5c:	7972635f 	ldmdbvc	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    4a60:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
    4a64:	5f6d7261 	svcpl	0x006d7261
    4a68:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    4a6c:	5f6e695f 	svcpl	0x006e695f
    4a70:	75716573 	ldrbvc	r6, [r1, #-1395]!	; 0xfffffa8d
    4a74:	65636e65 	strbvs	r6, [r3, #-3685]!	; 0xfffff19b
    4a78:	61736900 	cmnvs	r3, r0, lsl #18
    4a7c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4a80:	0062735f 	rsbeq	r7, r2, pc, asr r3
    4a84:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4a88:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4a8c:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4a90:	73690045 	cmnvc	r9, #69	; 0x45
    4a94:	65665f61 	strbvs	r5, [r6, #-3937]!	; 0xfffff09f
    4a98:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    4a9c:	73690065 	cmnvc	r9, #101	; 0x65
    4aa0:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4aa4:	6d735f74 	ldclvs	15, cr5, [r3, #-464]!	; 0xfffffe30
    4aa8:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    4aac:	61006c75 	tstvs	r0, r5, ror ip
    4ab0:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    4ab4:	5f676e61 	svcpl	0x00676e61
    4ab8:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    4abc:	6f5f7475 	svcvs	0x005f7475
    4ac0:	63656a62 	cmnvs	r5, #401408	; 0x62000
    4ac4:	74615f74 	strbtvc	r5, [r1], #-3956	; 0xfffff08c
    4ac8:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    4acc:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
    4ad0:	6f6f685f 	svcvs	0x006f685f
    4ad4:	7369006b 	cmnvc	r9, #107	; 0x6b
    4ad8:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4adc:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4ae0:	3233645f 	eorscc	r6, r3, #1593835520	; 0x5f000000
    4ae4:	4d524100 	ldfmie	f4, [r2, #-0]
    4ae8:	00454e5f 	subeq	r4, r5, pc, asr lr
    4aec:	5f617369 	svcpl	0x00617369
    4af0:	5f746962 	svcpl	0x00746962
    4af4:	00386562 	eorseq	r6, r8, r2, ror #10
    4af8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4afc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4b00:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4b04:	31316d72 	teqcc	r1, r2, ror sp
    4b08:	7a6a3637 	bvc	1a923ec <__ccfg+0x1a72444>
    4b0c:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    4b10:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    4b14:	5f726f73 	svcpl	0x00726f73
    4b18:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4b1c:	6c6c6100 	stfvse	f6, [ip], #-0
    4b20:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4b24:	72610073 	rsbvc	r0, r1, #115	; 0x73
    4b28:	63705f6d 	cmnvs	r0, #436	; 0x1b4
    4b2c:	41420073 	hvcmi	8195	; 0x2003
    4b30:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4b34:	5f484352 	svcpl	0x00484352
    4b38:	61005435 	tstvs	r0, r5, lsr r4
    4b3c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4b40:	34686372 	strbtcc	r6, [r8], #-882	; 0xfffffc8e
    4b44:	41540074 	cmpmi	r4, r4, ror r0
    4b48:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4b4c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4b50:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4b54:	61786574 	cmnvs	r8, r4, ror r5
    4b58:	6f633637 	svcvs	0x00633637
    4b5c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4b60:	00353561 	eorseq	r3, r5, r1, ror #10
    4b64:	5f6d7261 	svcpl	0x006d7261
    4b68:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4b6c:	7562775f 	strbvc	r7, [r2, #-1887]!	; 0xfffff8a1
    4b70:	74680066 	strbtvc	r0, [r8], #-102	; 0xffffff9a
    4b74:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4b78:	00687361 	rsbeq	r7, r8, r1, ror #6
    4b7c:	5f617369 	svcpl	0x00617369
    4b80:	5f746962 	svcpl	0x00746962
    4b84:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    4b88:	6f6e5f6b 	svcvs	0x006e5f6b
    4b8c:	6c6f765f 	stclvs	6, cr7, [pc], #-380	; 4a18 <patchGenfskRfe+0x470>
    4b90:	6c697461 	cfstrdvs	mvd7, [r9], #-388	; 0xfffffe7c
    4b94:	65635f65 	strbvs	r5, [r3, #-3941]!	; 0xfffff09b
    4b98:	52415400 	subpl	r5, r1, #0, 8
    4b9c:	5f544547 	svcpl	0x00544547
    4ba0:	5f555043 	svcpl	0x00555043
    4ba4:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4ba8:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4bac:	52415400 	subpl	r5, r1, #0, 8
    4bb0:	5f544547 	svcpl	0x00544547
    4bb4:	5f555043 	svcpl	0x00555043
    4bb8:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4bbc:	316d7865 	cmncc	sp, r5, ror #16
    4bc0:	52415400 	subpl	r5, r1, #0, 8
    4bc4:	5f544547 	svcpl	0x00544547
    4bc8:	5f555043 	svcpl	0x00555043
    4bcc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4bd0:	336d7865 	cmncc	sp, #6619136	; 0x650000
    4bd4:	61736900 	cmnvs	r3, r0, lsl #18
    4bd8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4bdc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4be0:	315f3876 	cmpcc	pc, r6, ror r8	; <UNPREDICTABLE>
    4be4:	6d726100 	ldfvse	f6, [r2, #-0]
    4be8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4bec:	616e5f68 	cmnvs	lr, r8, ror #30
    4bf0:	6900656d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    4bf4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4bf8:	615f7469 	cmpvs	pc, r9, ror #8
    4bfc:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4c00:	6900335f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp}
    4c04:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4c08:	615f7469 	cmpvs	pc, r9, ror #8
    4c0c:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4c10:	6900345f 	stmdbvs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp}
    4c14:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4c18:	615f7469 	cmpvs	pc, r9, ror #8
    4c1c:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4c20:	5400355f 	strpl	r3, [r0], #-1375	; 0xfffffaa1
    4c24:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c28:	50435f54 	subpl	r5, r3, r4, asr pc
    4c2c:	6f635f55 	svcvs	0x00635f55
    4c30:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c34:	00333561 	eorseq	r3, r3, r1, ror #10
    4c38:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c3c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c40:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4c44:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4c48:	35356178 	ldrcc	r6, [r5, #-376]!	; 0xfffffe88
    4c4c:	52415400 	subpl	r5, r1, #0, 8
    4c50:	5f544547 	svcpl	0x00544547
    4c54:	5f555043 	svcpl	0x00555043
    4c58:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c5c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4c60:	41540037 	cmpmi	r4, r7, lsr r0
    4c64:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c68:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c6c:	63706d5f 	cmnvs	r0, #6080	; 0x17c0
    4c70:	0065726f 	rsbeq	r7, r5, pc, ror #4
    4c74:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c78:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c7c:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4c80:	6e5f6d72 	mrcvs	13, 2, r6, cr15, cr2, {3}
    4c84:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    4c88:	5f6d7261 	svcpl	0x006d7261
    4c8c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4c90:	746f6e5f 	strbtvc	r6, [pc], #-3679	; 4c98 <patchImageGenfsk+0x3c>
    4c94:	4154006d 	cmpmi	r4, sp, rrx
    4c98:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c9c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ca0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4ca4:	36323031 			; <UNDEFINED> instruction: 0x36323031
    4ca8:	00736a65 	rsbseq	r6, r3, r5, ror #20
    4cac:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4cb0:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4cb4:	4a365f48 	bmi	d9c9dc <__ccfg+0xd7ca34>
    4cb8:	53414200 	movtpl	r4, #4608	; 0x1200
    4cbc:	52415f45 	subpl	r5, r1, #276	; 0x114
    4cc0:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    4cc4:	4142004b 	cmpmi	r2, fp, asr #32
    4cc8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4ccc:	5f484352 	svcpl	0x00484352
    4cd0:	69004d36 	stmdbvs	r0, {r1, r2, r4, r5, r8, sl, fp, lr}
    4cd4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4cd8:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    4cdc:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4ce0:	41540074 	cmpmi	r4, r4, ror r0
    4ce4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4ce8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4cec:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4cf0:	36333131 			; <UNDEFINED> instruction: 0x36333131
    4cf4:	0073666a 	rsbseq	r6, r3, sl, ror #12
    4cf8:	5f4d5241 	svcpl	0x004d5241
    4cfc:	4100534c 	tstmi	r0, ip, asr #6
    4d00:	4c5f4d52 	mrrcmi	13, 5, r4, pc, cr2	; <UNPREDICTABLE>
    4d04:	41420054 	qdaddmi	r0, r4, r2
    4d08:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4d0c:	5f484352 	svcpl	0x00484352
    4d10:	41005a36 	tstmi	r0, r6, lsr sl
    4d14:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    4d18:	415f5343 	cmpmi	pc, r3, asr #6
    4d1c:	53435041 	movtpl	r5, #12353	; 0x3041
    4d20:	5046565f 	subpl	r5, r6, pc, asr r6
    4d24:	52415400 	subpl	r5, r1, #0, 8
    4d28:	5f544547 	svcpl	0x00544547
    4d2c:	5f555043 	svcpl	0x00555043
    4d30:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    4d34:	00327478 	eorseq	r7, r2, r8, ror r4
    4d38:	5f617369 	svcpl	0x00617369
    4d3c:	5f746962 	svcpl	0x00746962
    4d40:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
    4d44:	6d726100 	ldfvse	f6, [r2, #-0]
    4d48:	7570665f 	ldrbvc	r6, [r0, #-1631]!	; 0xfffff9a1
    4d4c:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
    4d50:	73690072 	cmnvc	r9, #114	; 0x72
    4d54:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4d58:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
    4d5c:	6537766d 	ldrvs	r7, [r7, #-1645]!	; 0xfffff993
    4d60:	4154006d 	cmpmi	r4, sp, rrx
    4d64:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4d68:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4d6c:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4d70:	65743632 	ldrbvs	r3, [r4, #-1586]!	; 0xfffff9ce
    4d74:	52415400 	subpl	r5, r1, #0, 8
    4d78:	5f544547 	svcpl	0x00544547
    4d7c:	5f555043 	svcpl	0x00555043
    4d80:	7672616d 	ldrbtvc	r6, [r2], -sp, ror #2
    4d84:	5f6c6c65 	svcpl	0x006c6c65
    4d88:	00346a70 	eorseq	r6, r4, r0, ror sl
    4d8c:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    4d90:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    4d94:	6f705f68 	svcvs	0x00705f68
    4d98:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    4d9c:	72610072 	rsbvc	r0, r1, #114	; 0x72
    4da0:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4da4:	635f656e 	cmpvs	pc, #461373440	; 0x1b800000
    4da8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4dac:	39615f78 	stmdbcc	r1!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4db0:	61736900 	cmnvs	r3, r0, lsl #18
    4db4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4db8:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    4dbc:	3274786d 	rsbscc	r7, r4, #7143424	; 0x6d0000
    4dc0:	52415400 	subpl	r5, r1, #0, 8
    4dc4:	5f544547 	svcpl	0x00544547
    4dc8:	5f555043 	svcpl	0x00555043
    4dcc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4dd0:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    4dd4:	726f6332 	rsbvc	r6, pc, #-939524096	; 0xc8000000
    4dd8:	61786574 	cmnvs	r8, r4, ror r5
    4ddc:	69003335 	stmdbvs	r0, {r0, r2, r4, r5, r8, r9, ip, sp}
    4de0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4de4:	745f7469 	ldrbvc	r7, [pc], #-1129	; 4dec <patchImageGenfsk+0x190>
    4de8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    4dec:	41420032 	cmpmi	r2, r2, lsr r0
    4df0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4df4:	5f484352 	svcpl	0x00484352
    4df8:	69004137 	stmdbvs	r0, {r0, r1, r2, r4, r5, r8, lr}
    4dfc:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4e00:	645f7469 	ldrbvs	r7, [pc], #-1129	; 4e08 <patchImageGenfsk+0x1ac>
    4e04:	7270746f 	rsbsvc	r7, r0, #1862270976	; 0x6f000000
    4e08:	6100646f 	tstvs	r0, pc, ror #8
    4e0c:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    4e10:	5f363170 	svcpl	0x00363170
    4e14:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4e18:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 4e20 <patchImageGenfsk+0x1c4>
    4e1c:	52410065 	subpl	r0, r1, #101	; 0x65
    4e20:	494d5f4d 	stmdbmi	sp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    4e24:	6d726100 	ldfvse	f6, [r2, #-0]
    4e28:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4e2c:	006b3668 	rsbeq	r3, fp, r8, ror #12
    4e30:	5f6d7261 	svcpl	0x006d7261
    4e34:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4e38:	42006d36 	andmi	r6, r0, #3456	; 0xd80
    4e3c:	5f455341 	svcpl	0x00455341
    4e40:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4e44:	0052375f 	subseq	r3, r2, pc, asr r7
    4e48:	6f705f5f 	svcvs	0x00705f5f
    4e4c:	756f6370 	strbvc	r6, [pc, #-880]!	; 4ae4 <patchGenfskRfe+0x53c>
    4e50:	745f746e 	ldrbvc	r7, [pc], #-1134	; 4e58 <patchImageGenfsk+0x1fc>
    4e54:	2f006261 	svccs	0x00006261
    4e58:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4e5c:	63672f64 	cmnvs	r7, #100, 30	; 0x190
    4e60:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    4e64:	6f6e2d6d 	svcvs	0x006e2d6d
    4e68:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4e6c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4e70:	6b396c47 	blvs	e5ff94 <__ccfg+0xe3ffec>
    4e74:	672f3954 			; <UNDEFINED> instruction: 0x672f3954
    4e78:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    4e7c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4e80:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4e84:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4e88:	322d392d 	eorcc	r3, sp, #737280	; 0xb4000
    4e8c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
    4e90:	622f3471 	eorvs	r3, pc, #1895825408	; 0x71000000
    4e94:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4e98:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4e9c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4ea0:	61652d65 	cmnvs	r5, r5, ror #26
    4ea4:	742f6962 	strtvc	r6, [pc], #-2402	; 4eac <patchImageGenfsk+0x250>
    4ea8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    4eac:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    4eb0:	696c2f70 	stmdbvs	ip!, {r4, r5, r6, r8, r9, sl, fp, sp}^
    4eb4:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4eb8:	61736900 	cmnvs	r3, r0, lsl #18
    4ebc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4ec0:	736d635f 	cmnvc	sp, #2080374785	; 0x7c000001
    4ec4:	41540065 	cmpmi	r4, r5, rrx
    4ec8:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4ecc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4ed0:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4ed4:	61786574 	cmnvs	r8, r4, ror r5
    4ed8:	54003337 	strpl	r3, [r0], #-823	; 0xfffffcc9
    4edc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4ee0:	50435f54 	subpl	r5, r3, r4, asr pc
    4ee4:	65675f55 	strbvs	r5, [r7, #-3925]!	; 0xfffff0ab
    4ee8:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
    4eec:	61377663 	teqvs	r7, r3, ror #12
    4ef0:	52415400 	subpl	r5, r1, #0, 8
    4ef4:	5f544547 	svcpl	0x00544547
    4ef8:	5f555043 	svcpl	0x00555043
    4efc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f00:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    4f04:	72610036 	rsbvc	r0, r1, #54	; 0x36
    4f08:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4f0c:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    4f10:	6f765f6f 	svcvs	0x00765f6f
    4f14:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    4f18:	635f656c 	cmpvs	pc, #108, 10	; 0x1b000000
    4f1c:	41420065 	cmpmi	r2, r5, rrx
    4f20:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4f24:	5f484352 	svcpl	0x00484352
    4f28:	69004138 	stmdbvs	r0, {r3, r4, r5, r8, lr}
    4f2c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4f30:	615f7469 	cmpvs	pc, r9, ror #8
    4f34:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    4f38:	41420074 	hvcmi	8196	; 0x2004
    4f3c:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4f40:	5f484352 	svcpl	0x00484352
    4f44:	54005238 	strpl	r5, [r0], #-568	; 0xfffffdc8
    4f48:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f4c:	50435f54 	subpl	r5, r3, r4, asr pc
    4f50:	6f635f55 	svcvs	0x00635f55
    4f54:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f58:	63333761 	teqvs	r3, #25427968	; 0x1840000
    4f5c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4f60:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    4f64:	4d524100 	ldfmie	f4, [r2, #-0]
    4f68:	00564e5f 	subseq	r4, r6, pc, asr lr
    4f6c:	5f6d7261 	svcpl	0x006d7261
    4f70:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4f74:	72610034 	rsbvc	r0, r1, #52	; 0x34
    4f78:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4f7c:	00366863 	eorseq	r6, r6, r3, ror #16
    4f80:	5f6d7261 	svcpl	0x006d7261
    4f84:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4f88:	72610037 	rsbvc	r0, r1, #55	; 0x37
    4f8c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4f90:	00386863 	eorseq	r6, r8, r3, ror #16
    4f94:	79744944 	ldmdbvc	r4!, {r2, r6, r8, fp, lr}^
    4f98:	61006570 	tstvs	r0, r0, ror r5
    4f9c:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 4fa4 <__exidx_end+0x78>
    4fa0:	5f656e75 	svcpl	0x00656e75
    4fa4:	61637378 	smcvs	14136	; 0x3738
    4fa8:	4400656c 	strmi	r6, [r0], #-1388	; 0xfffffa94
    4fac:	72747357 	rsbsvc	r7, r4, #1543503873	; 0x5c000001
    4fb0:	00746375 	rsbseq	r6, r4, r5, ror r3
    4fb4:	696b616d 	stmdbvs	fp!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4fb8:	635f676e 	cmpvs	pc, #28835840	; 0x1b80000
    4fbc:	74736e6f 	ldrbtvc	r6, [r3], #-3695	; 0xfffff191
    4fc0:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    4fc4:	7400656c 	strvc	r6, [r0], #-1388	; 0xfffffa94
    4fc8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    4fcc:	6c61635f 	stclvs	3, cr6, [r1], #-380	; 0xfffffe84
    4fd0:	69765f6c 	ldmdbvs	r6!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4fd4:	616c5f61 	cmnvs	ip, r1, ror #30
    4fd8:	006c6562 	rsbeq	r6, ip, r2, ror #10
    4fdc:	5f617369 	svcpl	0x00617369
    4fe0:	5f746962 	svcpl	0x00746962
    4fe4:	35767066 	ldrbcc	r7, [r6, #-102]!	; 0xffffff9a
    4fe8:	61736900 	cmnvs	r3, r0, lsl #18
    4fec:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4ff0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4ff4:	006b3676 	rsbeq	r3, fp, r6, ror r6
    4ff8:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ffc:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5000:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5004:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5008:	00376178 	eorseq	r6, r7, r8, ror r1
    500c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5010:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5014:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5018:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    501c:	00386178 	eorseq	r6, r8, r8, ror r1
    5020:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5024:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5028:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    502c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5030:	00396178 	eorseq	r6, r9, r8, ror r1
    5034:	5f4d5241 	svcpl	0x004d5241
    5038:	5f534350 	svcpl	0x00534350
    503c:	53435041 	movtpl	r5, #12353	; 0x3041
    5040:	4d524100 	ldfmie	f4, [r2, #-0]
    5044:	5343505f 	movtpl	r5, #12383	; 0x305f
    5048:	5054415f 	subspl	r4, r4, pc, asr r1
    504c:	63005343 	movwvs	r5, #835	; 0x343
    5050:	6c706d6f 	ldclvs	13, cr6, [r0], #-444	; 0xfffffe44
    5054:	64207865 	strtvs	r7, [r0], #-2149	; 0xfffff79b
    5058:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    505c:	41540065 	cmpmi	r4, r5, rrx
    5060:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5064:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5068:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    506c:	61786574 	cmnvs	r8, r4, ror r5
    5070:	6f633337 	svcvs	0x00633337
    5074:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5078:	00333561 	eorseq	r3, r3, r1, ror #10
    507c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5080:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5084:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5088:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    508c:	70306d78 	eorsvc	r6, r0, r8, ror sp
    5090:	0073756c 	rsbseq	r7, r3, ip, ror #10
    5094:	5f6d7261 	svcpl	0x006d7261
    5098:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    509c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    50a0:	785f7469 	ldmdavc	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    50a4:	6c616373 	stclvs	3, cr6, [r1], #-460	; 0xfffffe34
    50a8:	645f0065 	ldrbvs	r0, [pc], #-101	; 50b0 <__exidx_end+0x184>
    50ac:	5f746e6f 	svcpl	0x00746e6f
    50b0:	5f657375 	svcpl	0x00657375
    50b4:	65657274 	strbvs	r7, [r5, #-628]!	; 0xfffffd8c
    50b8:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    50bc:	54005f65 	strpl	r5, [r0], #-3941	; 0xfffff09b
    50c0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    50c4:	50435f54 	subpl	r5, r3, r4, asr pc
    50c8:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    50cc:	7430316d 	ldrtvc	r3, [r0], #-365	; 0xfffffe93
    50d0:	00696d64 	rsbeq	r6, r9, r4, ror #26
    50d4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    50d8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    50dc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    50e0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    50e4:	00356178 	eorseq	r6, r5, r8, ror r1
    50e8:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    50ec:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    50f0:	65746968 	ldrbvs	r6, [r4, #-2408]!	; 0xfffff698
    50f4:	72757463 	rsbsvc	r7, r5, #1660944384	; 0x63000000
    50f8:	72610065 	rsbvc	r0, r1, #101	; 0x65
    50fc:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5100:	635f6863 	cmpvs	pc, #6488064	; 0x630000
    5104:	54006372 	strpl	r6, [r0], #-882	; 0xfffffc8e
    5108:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    510c:	50435f54 	subpl	r5, r3, r4, asr pc
    5110:	6f635f55 	svcvs	0x00635f55
    5114:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5118:	6d73316d 	ldfvse	f3, [r3, #-436]!	; 0xfffffe4c
    511c:	6d6c6c61 	stclvs	12, cr6, [ip, #-388]!	; 0xfffffe7c
    5120:	69746c75 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
    5124:	00796c70 	rsbseq	r6, r9, r0, ror ip
    5128:	5f6d7261 	svcpl	0x006d7261
    512c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    5130:	5f746e65 	svcpl	0x00746e65
    5134:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    5138:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    513c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    5140:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    5144:	4d524100 	ldfmie	f4, [r2, #-0]
    5148:	004c505f 	subeq	r5, ip, pc, asr r0
    514c:	5f617369 	svcpl	0x00617369
    5150:	5f746962 	svcpl	0x00746962
    5154:	76706676 			; <UNDEFINED> instruction: 0x76706676
    5158:	73690033 	cmnvc	r9, #51	; 0x33
    515c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5160:	66765f74 	uhsub16vs	r5, r6, r4
    5164:	00347670 	eorseq	r7, r4, r0, ror r6
    5168:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    516c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    5170:	54365f48 	ldrtpl	r5, [r6], #-3912	; 0xfffff0b8
    5174:	41420032 	cmpmi	r2, r2, lsr r0
    5178:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    517c:	5f484352 	svcpl	0x00484352
    5180:	4d5f4d38 	ldclmi	13, cr4, [pc, #-224]	; 50a8 <__exidx_end+0x17c>
    5184:	004e4941 	subeq	r4, lr, r1, asr #18
    5188:	47524154 			; <UNDEFINED> instruction: 0x47524154
    518c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5190:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    5194:	74396d72 	ldrtvc	r6, [r9], #-3442	; 0xfffff28e
    5198:	00696d64 	rsbeq	r6, r9, r4, ror #26
    519c:	5f4d5241 	svcpl	0x004d5241
    51a0:	42004c41 	andmi	r4, r0, #16640	; 0x4100
    51a4:	5f455341 	svcpl	0x00455341
    51a8:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    51ac:	004d375f 	subeq	r3, sp, pc, asr r7
    51b0:	5f6d7261 	svcpl	0x006d7261
    51b4:	67726174 			; <UNDEFINED> instruction: 0x67726174
    51b8:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    51bc:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
    51c0:	6d726100 	ldfvse	f6, [r2, #-0]
    51c4:	7261745f 	rsbvc	r7, r1, #1593835520	; 0x5f000000
    51c8:	5f746567 	svcpl	0x00746567
    51cc:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    51d0:	52415400 	subpl	r5, r1, #0, 8
    51d4:	5f544547 	svcpl	0x00544547
    51d8:	5f555043 	svcpl	0x00555043
    51dc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    51e0:	35727865 	ldrbcc	r7, [r2, #-2149]!	; 0xfffff79b
    51e4:	52415400 	subpl	r5, r1, #0, 8
    51e8:	5f544547 	svcpl	0x00544547
    51ec:	5f555043 	svcpl	0x00555043
    51f0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    51f4:	37727865 	ldrbcc	r7, [r2, -r5, ror #16]!
    51f8:	52415400 	subpl	r5, r1, #0, 8
    51fc:	5f544547 	svcpl	0x00544547
    5200:	5f555043 	svcpl	0x00555043
    5204:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5208:	38727865 	ldmdacc	r2!, {r0, r2, r5, r6, fp, ip, sp, lr}^
    520c:	61736900 	cmnvs	r3, r0, lsl #18
    5210:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5214:	61706c5f 	cmnvs	r0, pc, asr ip
    5218:	73690065 	cmnvc	r9, #101	; 0x65
    521c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5220:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    5224:	5f6b7269 	svcpl	0x006b7269
    5228:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    522c:	007a6b36 	rsbseq	r6, sl, r6, lsr fp
    5230:	5f617369 	svcpl	0x00617369
    5234:	5f746962 	svcpl	0x00746962
    5238:	6d746f6e 	ldclvs	15, cr6, [r4, #-440]!	; 0xfffffe48
    523c:	61736900 	cmnvs	r3, r0, lsl #18
    5240:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5244:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5248:	69003476 	stmdbvs	r0, {r1, r2, r4, r5, r6, sl, ip, sp}
    524c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5250:	615f7469 	cmpvs	pc, r9, ror #8
    5254:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    5258:	61736900 	cmnvs	r3, r0, lsl #18
    525c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5260:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5264:	69003776 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, r9, sl, ip, sp}
    5268:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    526c:	615f7469 	cmpvs	pc, r9, ror #8
    5270:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    5274:	6f645f00 	svcvs	0x00645f00
    5278:	755f746e 	ldrbvc	r7, [pc, #-1134]	; 4e12 <patchImageGenfsk+0x1b6>
    527c:	725f6573 	subsvc	r6, pc, #482344960	; 0x1cc00000
    5280:	685f7874 	ldmdavs	pc, {r2, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    5284:	5f657265 	svcpl	0x00657265
    5288:	49515500 	ldmdbmi	r1, {r8, sl, ip, lr}^
    528c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5290:	61736900 	cmnvs	r3, r0, lsl #18
    5294:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5298:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    529c:	65743576 	ldrbvs	r3, [r4, #-1398]!	; 0xfffffa8a
    52a0:	6d726100 	ldfvse	f6, [r2, #-0]
    52a4:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    52a8:	72610065 	rsbvc	r0, r1, #101	; 0x65
    52ac:	70635f6d 	rsbvc	r5, r3, sp, ror #30
    52b0:	6e695f70 	mcrvs	15, 3, r5, cr9, cr0, {3}
    52b4:	77726574 			; <UNDEFINED> instruction: 0x77726574
    52b8:	006b726f 	rsbeq	r7, fp, pc, ror #4
    52bc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    52c0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    52c4:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    52c8:	32396d72 	eorscc	r6, r9, #7296	; 0x1c80
    52cc:	5f007430 	svcpl	0x00007430
    52d0:	0068755f 	rsbeq	r7, r8, pc, asr r5
    52d4:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    52d8:	0071655f 	rsbseq	r6, r1, pc, asr r5
    52dc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    52e0:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    52e4:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    52e8:	36323561 	ldrtcc	r3, [r2], -r1, ror #10
    52ec:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 43f4 <_gettimeofday+0x258>
    52f0:	7261006c 	rsbvc	r0, r1, #108	; 0x6c
    52f4:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    52f8:	745f6863 	ldrbvc	r6, [pc], #-2147	; 5300 <__exidx_end+0x3d4>
    52fc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    5300:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    5304:	68007669 	stmdavs	r0, {r0, r3, r5, r6, r9, sl, ip, sp, lr}
    5308:	5f626174 	svcpl	0x00626174
    530c:	705f7165 	subsvc	r7, pc, r5, ror #2
    5310:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    5314:	61007265 	tstvs	r0, r5, ror #4
    5318:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    531c:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
    5320:	73696765 	cmnvc	r9, #26476544	; 0x1940000
    5324:	00726574 	rsbseq	r6, r2, r4, ror r5
    5328:	47524154 			; <UNDEFINED> instruction: 0x47524154
    532c:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5330:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5334:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    5338:	73306d78 	teqvc	r0, #120, 26	; 0x1e00
    533c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    5340:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
    5344:	796c7069 	stmdbvc	ip!, {r0, r3, r5, r6, ip, sp, lr}^
    5348:	52415400 	subpl	r5, r1, #0, 8
    534c:	5f544547 	svcpl	0x00544547
    5350:	5f555043 	svcpl	0x00555043
    5354:	6f63706d 	svcvs	0x0063706d
    5358:	6f6e6572 	svcvs	0x006e6572
    535c:	00706676 	rsbseq	r6, r0, r6, ror r6
    5360:	5f617369 	svcpl	0x00617369
    5364:	5f746962 	svcpl	0x00746962
    5368:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    536c:	6d635f6b 	stclvs	15, cr5, [r3, #-428]!	; 0xfffffe54
    5370:	646c5f33 	strbtvs	r5, [ip], #-3891	; 0xfffff0cd
    5374:	41006472 	tstmi	r0, r2, ror r4
    5378:	435f4d52 	cmpmi	pc, #5248	; 0x1480
    537c:	72610043 	rsbvc	r0, r1, #67	; 0x43
    5380:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5384:	5f386863 	svcpl	0x00386863
    5388:	72610032 	rsbvc	r0, r1, #50	; 0x32
    538c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5390:	5f386863 	svcpl	0x00386863
    5394:	72610033 	rsbvc	r0, r1, #51	; 0x33
    5398:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    539c:	5f386863 	svcpl	0x00386863
    53a0:	41540034 	cmpmi	r4, r4, lsr r0
    53a4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    53a8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    53ac:	706d665f 	rsbvc	r6, sp, pc, asr r6
    53b0:	00363236 	eorseq	r3, r6, r6, lsr r2
    53b4:	5f4d5241 	svcpl	0x004d5241
    53b8:	61005343 	tstvs	r0, r3, asr #6
    53bc:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    53c0:	5f363170 	svcpl	0x00363170
    53c4:	74736e69 	ldrbtvc	r6, [r3], #-3689	; 0xfffff197
    53c8:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    53cc:	72610068 	rsbvc	r0, r1, #104	; 0x68
    53d0:	61625f6d 	cmnvs	r2, sp, ror #30
    53d4:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    53d8:	00686372 	rsbeq	r6, r8, r2, ror r3
    53dc:	6c765f5f 	ldclvs	15, cr5, [r6], #-380	; 0xfffffe84
    53e0:	52415400 	subpl	r5, r1, #0, 8
    53e4:	5f544547 	svcpl	0x00544547
    53e8:	5f555043 	svcpl	0x00555043
    53ec:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    53f0:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    53f4:	52415400 	subpl	r5, r1, #0, 8
    53f8:	5f544547 	svcpl	0x00544547
    53fc:	5f555043 	svcpl	0x00555043
    5400:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5404:	31617865 	cmncc	r1, r5, ror #16
    5408:	726f6335 	rsbvc	r6, pc, #-738197504	; 0xd4000000
    540c:	61786574 	cmnvs	r8, r4, ror r5
    5410:	72610037 	rsbvc	r0, r1, #55	; 0x37
    5414:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    5418:	65376863 	ldrvs	r6, [r7, #-2147]!	; 0xfffff79d
    541c:	4154006d 	cmpmi	r4, sp, rrx
    5420:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5424:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5428:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    542c:	61786574 	cmnvs	r8, r4, ror r5
    5430:	61003237 	tstvs	r0, r7, lsr r2
    5434:	705f6d72 	subsvc	r6, pc, r2, ror sp	; <UNPREDICTABLE>
    5438:	645f7363 	ldrbvs	r7, [pc], #-867	; 5440 <__exidx_end+0x514>
    543c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5440:	4100746c 	tstmi	r0, ip, ror #8
    5444:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5448:	415f5343 	cmpmi	pc, r3, asr #6
    544c:	53435041 	movtpl	r5, #12353	; 0x3041
    5450:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    5454:	54004c41 	strpl	r4, [r0], #-3137	; 0xfffff3bf
    5458:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    545c:	50435f54 	subpl	r5, r3, r4, asr pc
    5460:	6f635f55 	svcvs	0x00635f55
    5464:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5468:	00353761 	eorseq	r3, r5, r1, ror #14
    546c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5470:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5474:	735f5550 	cmpvc	pc, #80, 10	; 0x14000000
    5478:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    547c:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    5480:	6d726100 	ldfvse	f6, [r2, #-0]
    5484:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5488:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    548c:	31626d75 	smccc	9941	; 0x26d5
    5490:	6d726100 	ldfvse	f6, [r2, #-0]
    5494:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    5498:	68745f68 	ldmdavs	r4!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    549c:	32626d75 	rsbcc	r6, r2, #7488	; 0x1d40
    54a0:	52415400 	subpl	r5, r1, #0, 8
    54a4:	5f544547 	svcpl	0x00544547
    54a8:	5f555043 	svcpl	0x00555043
    54ac:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    54b0:	61007478 	tstvs	r0, r8, ror r4
    54b4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    54b8:	35686372 	strbcc	r6, [r8, #-882]!	; 0xfffffc8e
    54bc:	5f5f0074 	svcpl	0x005f0074
    54c0:	5f003078 	svcpl	0x00003078
    54c4:	0031785f 	eorseq	r7, r1, pc, asr r8
    54c8:	32785f5f 	rsbscc	r5, r8, #380	; 0x17c
    54cc:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    54d0:	73690033 	cmnvc	r9, #51	; 0x33
    54d4:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    54d8:	706d5f74 	rsbvc	r5, sp, r4, ror pc
    54dc:	6d726100 	ldfvse	f6, [r2, #-0]
    54e0:	5f646c5f 	svcpl	0x00646c5f
    54e4:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
    54e8:	72610064 	rsbvc	r0, r1, #100	; 0x64
    54ec:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    54f0:	5f386863 	svcpl	0x00386863
    54f4:	622f0031 	eorvs	r0, pc, #49	; 0x31
    54f8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    54fc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    5500:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    5504:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    5508:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    550c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5510:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    5514:	2f302e33 	svccs	0x00302e33
    5518:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    551c:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    5520:	6f6e2d6d 	svcvs	0x006e2d6d
    5524:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5528:	2f696261 	svccs	0x00696261
    552c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    5530:	6f6e2f62 	svcvs	0x006e2f62
    5534:	6c2f7066 	stcvs	0, cr7, [pc], #-408	; 53a4 <__exidx_end+0x478>
    5538:	6c676269 	sfmvs	f6, 2, [r7], #-420	; 0xfffffe5c
    553c:	2f73736f 	svccs	0x0073736f
    5540:	6e62696c 	vnmulvs.f16	s13, s4, s25	; <UNPREDICTABLE>
    5544:	7379736f 	cmnvc	r9, #-1140850687	; 0xbc000001
    5548:	79735f00 	ldmdbvc	r3!, {r8, r9, sl, fp, ip, lr}^
    554c:	72655f73 	rsbvc	r5, r5, #460	; 0x1cc
    5550:	73696c72 	cmnvc	r9, #29184	; 0x7200
    5554:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
    5558:	31432055 	qdaddcc	r2, r5, r3
    555c:	2e382037 	mrccs	0, 1, r2, cr8, cr7, {1}
    5560:	20312e33 	eorscs	r2, r1, r3, lsr lr
    5564:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
    5568:	33303730 	teqcc	r0, #48, 14	; 0xc00000
    556c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    5570:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    5574:	5b202965 	blpl	80fb10 <__ccfg+0x7efb68>
    5578:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    557c:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
    5580:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
    5584:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
    5588:	6f697369 	svcvs	0x00697369
    558c:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
    5590:	37323033 			; <UNDEFINED> instruction: 0x37323033
    5594:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    5598:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    559c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    55a0:	616f6c66 	cmnvs	pc, r6, ror #24
    55a4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    55a8:	6f733d69 	svcvs	0x00733d69
    55ac:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    55b0:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    55b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    55b8:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    55bc:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    55c0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    55c4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    55c8:	20743476 	rsbscs	r3, r4, r6, ror r4
    55cc:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    55d0:	4f2d2067 	svcmi	0x002d2067
    55d4:	4f2d2032 	svcmi	0x002d2032
    55d8:	4f2d2032 	svcmi	0x002d2032
    55dc:	735f0032 	cmpvc	pc, #50	; 0x32
    55e0:	6e5f7379 	mrcvs	3, 2, r7, cr15, cr9, {3}
    55e4:	00727265 	rsbseq	r7, r2, r5, ror #4
    55e8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    55ec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    55f0:	2f2e2e2f 	svccs	0x002e2e2f
    55f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    55f8:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    55fc:	6f6c6762 	svcvs	0x006c6762
    5600:	6c2f7373 	stcvs	3, cr7, [pc], #-460	; 543c <__exidx_end+0x510>
    5604:	6f6e6269 	svcvs	0x006e6269
    5608:	2f737973 	svccs	0x00737973
    560c:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    5610:	632e646f 			; <UNDEFINED> instruction: 0x632e646f
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
}
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
		b->length - b->u.pointers.head - b->u.pointers.tail;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	b->u.pointers.tail =
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
}
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
		return NULL;
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm transmitter (message * messagePtr) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
        spkt [0] = 0;
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
        *p = messagePtr->senderGroupId; p += 2;
  f0:	61656c65 	cmnvs	r5, r5, ror #24
        *p = messagePtr->messageType; p++;
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
        *p = messagePtr->requestNumber; p++;
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
        *p = messagePtr->senderId; p++; // insert sender ID
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
        *p = messagePtr->receiverId; p++; // insert receiveer ID
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
        tcv_endp (spkt);
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
        ser_outf(Transmit_Message, "Message Sent\n\r");
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
}
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
        finish;
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
}
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000028 	andeq	r0, r0, r8, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	0000005c 	andeq	r0, r0, ip, asr r0
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      2c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
      30:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
      34:	c5ce5c0b 	strbgt	r5, [lr, #3083]	; 0xc0b
      38:	000ec3c4 	andeq	ip, lr, r4, asr #7
      3c:	0000000c 	andeq	r0, r0, ip
	...
				j->Next = k;
      48:	0000000c 	andeq	r0, r0, ip
}
      4c:	00000014 	andeq	r0, r0, r4, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	00000124 	andeq	r0, r0, r4, lsr #2
      58:	00000018 	andeq	r0, r0, r8, lsl r0
      5c:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	040e4901 	streq	r4, [lr], #-2305	; 0xfffff6ff
	b->u.pointers.tail =
      64:	00000020 	andeq	r0, r0, r0, lsr #32
}
      68:	00000000 	andeq	r0, r0, r0
		return NULL;
      6c:	0000013c 	andeq	r0, r0, ip, lsr r1
      70:	000002c8 	andeq	r0, r0, r8, asr #5
      74:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
      78:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      7c:	200e4101 	andcs	r4, lr, r1, lsl #2
      80:	0e013203 	cdpeq	2, 0, cr3, cr1, cr3, {0}
      84:	0000000c 	andeq	r0, r0, ip
      88:	0000000c 	andeq	r0, r0, ip
      8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      90:	7c020001 	stcvc	0, cr0, [r2], {1}
      94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      98:	0000000c 	andeq	r0, r0, ip
      9c:	00000088 	andeq	r0, r0, r8, lsl #1
      a0:	00000404 	andeq	r0, r0, r4, lsl #8
      a4:	0000000c 	andeq	r0, r0, ip
      a8:	00000018 	andeq	r0, r0, r8, lsl r0
      ac:	00000088 	andeq	r0, r0, r8, lsl #1
      b0:	00000410 	andeq	r0, r0, r0, lsl r4
      b4:	0000002c 	andeq	r0, r0, ip, lsr #32
      b8:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      bc:	41000e0a 	tstmi	r0, sl, lsl #28
      c0:	0000000b 	andeq	r0, r0, fp
      c4:	00000018 	andeq	r0, r0, r8, lsl r0
fsm transmitter (message * messagePtr) {
      c8:	00000088 	andeq	r0, r0, r8, lsl #1
      cc:	0000043c 	andeq	r0, r0, ip, lsr r4
      d0:	0000002a 	andeq	r0, r0, sl, lsr #32
}
      d4:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      d8:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	000b4204 	andeq	r4, fp, r4, lsl #4
      e0:	00000018 	andeq	r0, r0, r8, lsl r0
      e4:	00000088 	andeq	r0, r0, r8, lsl #1
      e8:	00000468 	andeq	r0, r0, r8, ror #8
        spkt [0] = 0;
      ec:	0000003c 	andeq	r0, r0, ip, lsr r0
        *p = messagePtr->senderGroupId; p += 2;
      f0:	83100e41 	tsthi	r0, #1040	; 0x410
        *p = messagePtr->messageType; p++;
      f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        *p = messagePtr->requestNumber; p++;
      f8:	00018e02 	andeq	r8, r1, r2, lsl #28
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	00000018 	andeq	r0, r0, r8, lsl r0
        *p = messagePtr->receiverId; p++; // insert receiveer ID
     100:	00000088 	andeq	r0, r0, r8, lsl #1
        tcv_endp (spkt);
     104:	000004a4 	andeq	r0, r0, r4, lsr #9
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	00000040 	andeq	r0, r0, r0, asr #32
     10c:	83100e41 	tsthi	r0, #1040	; 0x410
}
     110:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        finish;
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000014 	andeq	r0, r0, r4, lsl r0
     11c:	00000088 	andeq	r0, r0, r8, lsl #1
     120:	00000000 	andeq	r0, r0, r0
char randomNumber() {
     124:	00000020 	andeq	r0, r0, r0, lsr #32
   srand((unsigned) time(&t));
     128:	83080e42 	movwhi	r0, #36418	; 0x8e42
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
   return (char)rand();
     130:	00000014 	andeq	r0, r0, r4, lsl r0
}
     134:	00000088 	andeq	r0, r0, r8, lsl #1
     138:	000004e4 	andeq	r0, r0, r4, ror #9
fsm root {
     13c:	00000054 	andeq	r0, r0, r4, asr r0
     140:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     144:	00018e02 	andeq	r8, r1, r2, lsl #28
     148:	00000014 	andeq	r0, r0, r4, lsl r0
     14c:	00000088 	andeq	r0, r0, r8, lsl #1
     150:	00000538 	andeq	r0, r0, r8, lsr r5
     154:	00000040 	andeq	r0, r0, r0, asr #32
     158:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     15c:	00018e02 	andeq	r8, r1, r2, lsl #28
     160:	00000014 	andeq	r0, r0, r4, lsl r0
     164:	00000088 	andeq	r0, r0, r8, lsl #1
     168:	00000578 	andeq	r0, r0, r8, ror r5
     16c:	00000028 	andeq	r0, r0, r8, lsr #32
        recordCount = 0;
     170:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
        nodeId = 1;
     174:	00018e02 	andeq	r8, r1, r2, lsl #28
     178:	00000014 	andeq	r0, r0, r4, lsl r0
        groupId = 1;
     17c:	00000088 	andeq	r0, r0, r8, lsl #1
     180:	000005a0 	andeq	r0, r0, r0, lsr #11
        messagePtr = (message *) umalloc(sizeof(message));
     184:	00000114 	andeq	r0, r0, r4, lsl r1
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     18c:	00018e02 	andeq	r8, r1, r2, lsl #28
     190:	0000001c 	andeq	r0, r0, ip, lsl r0
        tcv_plug(0, &plug_null);
     194:	00000088 	andeq	r0, r0, r8, lsl #1
     198:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
        sfd = tcv_open(WNONE, 0, 0);
     19c:	00000050 	andeq	r0, r0, r0, asr r0
     1a0:	83180e41 	tsthi	r8, #1040	; 0x410
     1a4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	00018e02 	andeq	r8, r1, r2, lsl #28
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	00000018 	andeq	r0, r0, r8, lsl r0
		if (sfd < 0) {
     1b4:	00000088 	andeq	r0, r0, r8, lsl #1
			diag("Cannot open tcv interface");
     1b8:	00000704 	andeq	r0, r0, r4, lsl #14
     1bc:	00000054 	andeq	r0, r0, r4, asr r0
			halt();
     1c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        currentProtocol = IDLE;
     1c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1c8:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	0000000c 	andeq	r0, r0, ip
     1d0:	00000088 	andeq	r0, r0, r8, lsl #1
     1d4:	00000758 	andeq	r0, r0, r8, asr r7
     1d8:	00000038 	andeq	r0, r0, r8, lsr r0
     1dc:	00000020 	andeq	r0, r0, r0, lsr #32
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_outf(Options, menu);
     1e4:	00000790 	muleq	r0, r0, r7
     1e8:	00000110 	andeq	r0, r0, r0, lsl r1
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     1f0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1f4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
        switch (choice)
     1f8:	89038804 	stmdbhi	r3, {r2, fp, pc}
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     200:	0000000c 	andeq	r0, r0, ip
     204:	00000088 	andeq	r0, r0, r8, lsl #1
     208:	00000000 	andeq	r0, r0, r0
     20c:	0000000c 	andeq	r0, r0, ip
     210:	00000018 	andeq	r0, r0, r8, lsl r0
     214:	00000088 	andeq	r0, r0, r8, lsl #1
     218:	000008a0 	andeq	r0, r0, r0, lsr #17
     21c:	000000c0 	andeq	r0, r0, r0, asr #1
     220:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     224:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
        proceed Menu_Header;
     228:	00000001 	andeq	r0, r0, r1
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	00000088 	andeq	r0, r0, r8, lsl #1
     234:	00000960 	andeq	r0, r0, r0, ror #18
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	00000044 	andeq	r0, r0, r4, asr #32
     23c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        proceed Menu_Header;
     240:	86038504 	strhi	r8, [r3], -r4, lsl #10
     244:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	0000001c 	andeq	r0, r0, ip, lsl r0
     24c:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	000009a4 	andeq	r0, r0, r4, lsr #19
     254:	0000003c 	andeq	r0, r0, ip, lsr r0
     258:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    if (node < 1 || node > 25) {
     25c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     260:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
            proceed Set_Node_ID;
     264:	00000001 	andeq	r0, r0, r1
        proceed Menu_Header;
     268:	00000018 	andeq	r0, r0, r8, lsl r0
     26c:	00000088 	andeq	r0, r0, r8, lsl #1
        currentProtocol = DISCOVERY_REQUEST;
     270:	000009e0 	andeq	r0, r0, r0, ror #19
     274:	000000a4 	andeq	r0, r0, r4, lsr #1
        receiverId = 0;
     278:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        proceed Transmit_Message;
     27c:	86038504 	strhi	r8, [r3], -r4, lsl #10
        currentProtocol = CREATE_RECORD;
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	00000030 	andeq	r0, r0, r0, lsr r0
     288:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	00000a84 	andeq	r0, r0, r4, lsl #21
     290:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     294:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    if (node < 1 || node > 25) {
     298:	86078508 	strhi	r8, [r7], -r8, lsl #10
     29c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
            proceed Create_Record;
     2a0:	8a038904 	bhi	e26b8 <__ccfg+0xc2710>
     2a4:	02018e02 	andeq	r8, r1, #2, 28
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	cace0aa2 	bgt	ff382d38 <_estack+0xdf37dd38>
     2ac:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     2b0:	000ec4c5 	andeq	ip, lr, r5, asr #9
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	00000b42 	andeq	r0, r0, r2, asr #22
     2b8:	0000000c 	andeq	r0, r0, ip
     2bc:	00000088 	andeq	r0, r0, r8, lsl #1
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	00000c3c 	andeq	r0, r0, ip, lsr ip
        proceed Transmit_Message;
     2c4:	00000024 	andeq	r0, r0, r4, lsr #32
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	0000000c 	andeq	r0, r0, ip
        proceed Transmit_Message;
     2cc:	00000088 	andeq	r0, r0, r8, lsl #1
        currentProtocol = DELETE_RECORD;
     2d0:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	00000028 	andeq	r0, r0, r8, lsr #32
        currentProtocol = DELETE_RECORD;
     2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	00000088 	andeq	r0, r0, r8, lsl #1
        proceed Get_Receiving_Node;
     2e0:	00000c60 	andeq	r0, r0, r0, ror #24
        currentProtocol = RETRIEVE_RECORD;
     2e4:	00000258 	andeq	r0, r0, r8, asr r2
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
        currentProtocol = RETRIEVE_RECORD;
     2ec:	8e028b03 	vmlahi.f64	d8, d2, d3
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	180e4101 	stmdane	lr, {r0, r8, lr}
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	00070d42 	andeq	r0, r7, r2, asr #26
     2f8:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	00000088 	andeq	r0, r0, r8, lsl #1
     300:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     304:	00000030 	andeq	r0, r0, r0, lsr r0
    if (node < 1 || node > 25) {
     308:	83080e42 	movwhi	r0, #36418	; 0x8e42
     30c:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Prompt_Recieving_Node;
     310:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00000088 	andeq	r0, r0, r8, lsl #1
     318:	00000000 	andeq	r0, r0, r0
        char desiredRecordIndex = -1;
     31c:	0000005c 	andeq	r0, r0, ip, asr r0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     324:	86038504 	strhi	r8, [r3], -r4, lsl #10
        char desiredRecordIndex = -1;
     328:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	00000014 	andeq	r0, r0, r4, lsl r0
        messagePtr->recordIndex = desiredRecordIndex;
     330:	00000088 	andeq	r0, r0, r8, lsl #1
     334:	00000ee8 	andeq	r0, r0, r8, ror #29
     338:	00000060 	andeq	r0, r0, r0, rrx
        proceed Transmit_Message;
     33c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        messagePtr -> senderGroupId = groupId;
     340:	00018e02 	andeq	r8, r1, r2, lsl #28
     344:	0000000c 	andeq	r0, r0, ip
     348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
        messagePtr -> messageType = currentProtocol;
     34c:	7c020001 	stcvc	0, cr0, [r2], {1}
        messagePtr -> requestNumber = randomNumber();
     350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
        messagePtr -> senderId = nodeId;
     354:	00000018 	andeq	r0, r0, r8, lsl r0
     358:	00000344 	andeq	r0, r0, r4, asr #6
     35c:	00000f48 	andeq	r0, r0, r8, asr #30
        call transmitter(messagePtr, Menu_Header);
     360:	0000003c 	andeq	r0, r0, ip, lsr r0
        messagePtr -> receiverId = receiverId;
     364:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        call transmitter(messagePtr, Menu_Header);
     368:	86038504 	strhi	r8, [r3], -r4, lsl #10
     36c:	00018e02 	andeq	r8, r1, r2, lsl #28
     370:	00000018 	andeq	r0, r0, r8, lsl r0
     374:	00000344 	andeq	r0, r0, r4, asr #6
            proceed Set_Node_ID;
     378:	00000f84 	andeq	r0, r0, r4, lsl #31
            break;
     37c:	00000080 	andeq	r0, r0, r0, lsl #1
            proceed Set_Node_ID;
     380:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
            proceed Find_Neighbours;
     384:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
            proceed Create_Record;
     388:	00000001 	andeq	r0, r0, r1
            proceed Delete_Record;
     38c:	0000000c 	andeq	r0, r0, ip
            proceed Retrieve_Record;
     390:	00000344 	andeq	r0, r0, r4, asr #6
            diag("Reset Local Storage");
     394:	00001004 	andeq	r1, r0, r4
            break;
     398:	00000018 	andeq	r0, r0, r8, lsl r0
            diag("Reset Local Storage");
     39c:	00000014 	andeq	r0, r0, r4, lsl r0
     3a0:	00000344 	andeq	r0, r0, r4, asr #6
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	00000024 	andeq	r0, r0, r4, lsr #32
     3ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
     3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3b4:	00000014 	andeq	r0, r0, r4, lsl r0
     3b8:	00000344 	andeq	r0, r0, r4, asr #6
     3bc:	0000101c 	andeq	r1, r0, ip, lsl r0
     3c0:	00000010 	andeq	r0, r0, r0, lsl r0
     3c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
     3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3cc:	00000014 	andeq	r0, r0, r4, lsl r0
     3d0:	00000344 	andeq	r0, r0, r4, asr #6
     3d4:	0000102c 	andeq	r1, r0, ip, lsr #32
     3d8:	0000002c 	andeq	r0, r0, ip, lsr #32
     3dc:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e4:	00000014 	andeq	r0, r0, r4, lsl r0
     3e8:	00000344 	andeq	r0, r0, r4, asr #6
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	0000004c 	andeq	r0, r0, ip, asr #32
     3f4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3fc:	0000000c 	andeq	r0, r0, ip
     400:	00000344 	andeq	r0, r0, r4, asr #6
static void devinit_uart (int devnum) {
     404:	00001058 	andeq	r1, r0, r8, asr r0
	adddevfunc (ioreq_uart_a, devnum);
     408:	00000006 	andeq	r0, r0, r6
     40c:	00000028 	andeq	r0, r0, r8, lsr #32
void udelay (volatile word n) {
     410:	00000344 	andeq	r0, r0, r4, asr #6
     414:	00001060 	andeq	r1, r0, r0, rrx
	while (n) {
     418:	000000cc 	andeq	r0, r0, ip, asr #1
     41c:	83180e41 	tsthi	r8, #1040	; 0x410
}
     420:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	while (n--);
     424:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     428:	02018e02 	andeq	r8, r1, #2, 28
     42c:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
		n--;
     430:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     434:	0b42000e 	bleq	1080474 <__ccfg+0x10604cc>
     438:	00000014 	andeq	r0, r0, r4, lsl r0
void mdelay (volatile word n) {
     43c:	00000344 	andeq	r0, r0, r4, asr #6
     440:	0000112c 	andeq	r1, r0, ip, lsr #2
	while (n) {
     444:	00000014 	andeq	r0, r0, r4, lsl r0
     448:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
		udelay (999);
     450:	00000014 	andeq	r0, r0, r4, lsl r0
     454:	00000344 	andeq	r0, r0, r4, asr #6
		n--;
     458:	00001140 	andeq	r1, r0, r0, asr #2
     45c:	00000034 	andeq	r0, r0, r4, lsr r0
     460:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     464:	00018e02 	andeq	r8, r1, r2, lsl #28
void __pi_ondomain (lword d) {
     468:	00000018 	andeq	r0, r0, r8, lsl r0
     46c:	00000344 	andeq	r0, r0, r4, asr #6
		if (__pi_systat.effpdm > 1)
     470:	00001174 	andeq	r1, r0, r4, ror r1
     474:	00000034 	andeq	r0, r0, r4, lsr r0
			__pi_systat.effpdm = 1;
     478:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	PRCMPowerDomainOn (d);
     47c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     480:	00000001 	andeq	r0, r0, r1
     484:	00000018 	andeq	r0, r0, r8, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     488:	00000344 	andeq	r0, r0, r4, asr #6
     48c:	00000000 	andeq	r0, r0, r0
     490:	0000002c 	andeq	r0, r0, ip, lsr #32
	__pi_systat.ondmns |= d;
     494:	83100e41 	tsthi	r0, #1040	; 0x410
     498:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
     49c:	00018e02 	andeq	r8, r1, r2, lsl #28
     4a0:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_offdomain (lword d) {
     4a4:	00000344 	andeq	r0, r0, r4, asr #6
     4a8:	000011a8 	andeq	r1, r0, r8, lsr #3
	PRCMPowerDomainOff (d);
     4ac:	00000024 	andeq	r0, r0, r4, lsr #32
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b8:	00000018 	andeq	r0, r0, r8, lsl r0
	if (d & PRCM_DOMAIN_RFCORE) {
     4bc:	00000344 	andeq	r0, r0, r4, asr #6
     4c0:	000011cc 	andeq	r1, r0, ip, asr #3
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c4:	00000038 	andeq	r0, r0, r8, lsr r0
     4c8:	83100e41 	tsthi	r0, #1040	; 0x410
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4d0:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_systat.ondmns &= ~d;
     4d4:	0000000c 	andeq	r0, r0, ip
     4d8:	00000344 	andeq	r0, r0, r4, asr #6
}
     4dc:	00000000 	andeq	r0, r0, r0
     4e0:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_syserror (word ec, const char *m) {
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
	diag ("SYSERR: %x, %s", ec, m);
     4e8:	00000344 	andeq	r0, r0, r4, asr #6
     4ec:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
     4f0:	00000040 	andeq	r0, r0, r0, asr #32
     4f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
		all_leds_blink;
     500:	00000344 	andeq	r0, r0, r4, asr #6
     504:	00000000 	andeq	r0, r0, r0
     508:	00000018 	andeq	r0, r0, r8, lsl r0
     50c:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     510:	00018e02 	andeq	r8, r1, r2, lsl #28
     514:	0000000c 	andeq	r0, r0, ip
     518:	00000344 	andeq	r0, r0, r4, asr #6
     51c:	00001204 	andeq	r1, r0, r4, lsl #4
     520:	00000024 	andeq	r0, r0, r4, lsr #32
     524:	0000000c 	andeq	r0, r0, ip
	while (1) {
     528:	00000344 	andeq	r0, r0, r4, asr #6
     52c:	00000000 	andeq	r0, r0, r0
     530:	00000020 	andeq	r0, r0, r0, lsr #32
     534:	0000000c 	andeq	r0, r0, ip
void tci_run_delay_timer () {
     538:	00000344 	andeq	r0, r0, r4, asr #6
	setdel = __pi_mintk - __pi_old;
     53c:	00001228 	andeq	r1, r0, r8, lsr #4
     540:	0000000e 	andeq	r0, r0, lr
     544:	0000000c 	andeq	r0, r0, ip
     548:	00000344 	andeq	r0, r0, r4, asr #6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	00000000 	andeq	r0, r0, r0
     550:	00000010 	andeq	r0, r0, r0, lsl r0
     554:	0000000c 	andeq	r0, r0, ip
     558:	00000344 	andeq	r0, r0, r4, asr #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     55c:	00000000 	andeq	r0, r0, r0
	sti_tim;
     560:	0000001c 	andeq	r0, r0, ip, lsl r0
}
     564:	0000000c 	andeq	r0, r0, ip
     568:	00000344 	andeq	r0, r0, r4, asr #6
     56c:	00000000 	andeq	r0, r0, r0
     570:	00000010 	andeq	r0, r0, r0, lsl r0
     574:	0000000c 	andeq	r0, r0, ip
	cli_aux;
     578:	00000344 	andeq	r0, r0, r4, asr #6
     57c:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     580:	00000006 	andeq	r0, r0, r6
     584:	0000000c 	andeq	r0, r0, ip
     588:	00000344 	andeq	r0, r0, r4, asr #6
     58c:	00001236 	andeq	r1, r0, r6, lsr r2
	sti_aux;
     590:	00000014 	andeq	r0, r0, r4, lsl r0
}
     594:	0000000c 	andeq	r0, r0, ip
     598:	00000344 	andeq	r0, r0, r4, asr #6
     59c:	0000124a 	andeq	r1, r0, sl, asr #4
void AONRTCIntHandler () {
     5a0:	0000000e 	andeq	r0, r0, lr
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a4:	00000014 	andeq	r0, r0, r4, lsl r0
     5a8:	00000344 	andeq	r0, r0, r4, asr #6
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5ac:	00001258 	andeq	r1, r0, r8, asr r2
		if (__pi_utims [0] == 0)
     5b0:	00000024 	andeq	r0, r0, r4, lsr #32
     5b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
		if (*(__pi_utims [0])) {
     5b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5bc:	00000020 	andeq	r0, r0, r0, lsr #32
			(*(__pi_utims [0]))--;
     5c0:	00000344 	andeq	r0, r0, r4, asr #6
		if (__pi_utims [1] == 0)
     5c4:	0000127c 	andeq	r1, r0, ip, ror r2
		if (*(__pi_utims [1])) {
     5c8:	0000009c 	muleq	r0, ip, r0
			aux_timer_inactive = 0;
     5cc:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			(*(__pi_utims [1]))--;
     5d0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		if (__pi_utims [2] == 0)
     5d4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		if (*(__pi_utims [2])) {
     5d8:	89038804 	stmdbhi	r3, {r2, fp, pc}
			(*(__pi_utims [2]))--;
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [3] != 0) {
     5e0:	00000014 	andeq	r0, r0, r4, lsl r0
			if (*(__pi_utims [3])) {
     5e4:	00000344 	andeq	r0, r0, r4, asr #6
				aux_timer_inactive = 0;
     5e8:	00001318 	andeq	r1, r0, r8, lsl r3
				(*(__pi_utims [3]))--;
     5ec:	00000050 	andeq	r0, r0, r0, asr r0
	if (__pi_systat.ledsts) {
     5f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_systat.ledblc++ == 0) {
     5f8:	00000014 	andeq	r0, r0, r4, lsl r0
     5fc:	00000344 	andeq	r0, r0, r4, asr #6
			if (__pi_systat.ledblk) {
     600:	00001368 	andeq	r1, r0, r8, ror #6
     604:	00000048 	andeq	r0, r0, r8, asr #32
     608:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     60c:	00018e02 	andeq	r8, r1, r2, lsl #28
     610:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x2)
     614:	00000344 	andeq	r0, r0, r4, asr #6
     618:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     61c:	00000050 	andeq	r0, r0, r0, asr r0
				if (__pi_systat.ledsts & 0x4)
     620:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				__pi_systat.ledblk = 0;
     624:	00018e02 	andeq	r8, r1, r2, lsl #28
     628:	00000020 	andeq	r0, r0, r0, lsr #32
			if (__pi_systat.fstblk)
     62c:	00000344 	andeq	r0, r0, r4, asr #6
     630:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
     634:	00000058 	andeq	r0, r0, r8, asr r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     638:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
		cli_tim;
     63c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		__pi_new += setdel;
     640:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     644:	89038804 	stmdbhi	r3, {r2, fp, pc}
		setdel = 0;
     648:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     64c:	00000018 	andeq	r0, r0, r8, lsl r0
		__pi_new += setdel;
     650:	00000344 	andeq	r0, r0, r4, asr #6
		RISE_N_SHINE;
     654:	00001400 	andeq	r1, r0, r0, lsl #8
     658:	000000a8 	andeq	r0, r0, r8, lsr #1
		aux_timer_inactive = 1;
     65c:	83100e44 	tsthi	r0, #68, 28	; 0x440
     660:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				if (__pi_systat.ledsts & 0x1)
     664:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     668:	00000018 	andeq	r0, r0, r8, lsl r0
     66c:	00000344 	andeq	r0, r0, r4, asr #6
				if (__pi_systat.ledsts & 0x2)
     670:	000014a8 	andeq	r1, r0, r8, lsr #9
     674:	00000034 	andeq	r0, r0, r4, lsr r0
     678:	83100e41 	tsthi	r0, #1040	; 0x410
				if (__pi_systat.ledsts & 0x8)
     67c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				__pi_systat.ledblk = 1;
     680:	00018e02 	andeq	r8, r1, r2, lsl #28
     684:	0000000c 	andeq	r0, r0, ip
		if (aux_timer_inactive) {
     688:	00000344 	andeq	r0, r0, r4, asr #6
			cli_aux;
     68c:	000014dc 	ldrdeq	r1, [r0], -ip
     690:	00000018 	andeq	r0, r0, r8, lsl r0
     694:	00000014 	andeq	r0, r0, r4, lsl r0
     698:	00000344 	andeq	r0, r0, r4, asr #6
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	00000030 	andeq	r0, r0, r0, lsr r0
     6a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ac:	00000014 	andeq	r0, r0, r4, lsl r0
     6b0:	00000344 	andeq	r0, r0, r4, asr #6
word tci_update_delay_ticks (Boolean force) {
     6b4:	00000000 	andeq	r0, r0, r0
	cli_tim;
     6b8:	00000038 	andeq	r0, r0, r8, lsr r0
     6bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (setdel) {
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c4:	00000040 	andeq	r0, r0, r0, asr #32
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6c8:	00000344 	andeq	r0, r0, r4, asr #6
     6cc:	000014f4 	strdeq	r1, [r0], -r4
     6d0:	0000013c 	andeq	r0, r0, ip, lsr r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d4:	80100e41 	andshi	r0, r0, r1, asr #28
				AON_RTC_O_CH0CMP)) - gettav ());
     6d8:	82038104 	andhi	r8, r3, #4, 2
	return NO;
     6dc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
			setdel = 0;
     6e0:	0b84380e 	bleq	fe10e720 <_estack+0xde109720>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e4:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6e8:	07880887 	streq	r0, [r8, r7, lsl #17]
}
     6ec:	058e0689 	streq	r0, [lr, #1673]	; 0x689
		sti_tim;
     6f0:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
		return YES;
     6f4:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     6f8:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     6fc:	c341100e 	movtgt	r1, #4110	; 0x100e
     700:	0ec0c1c2 	acseqdm	f4, f2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     704:	000b4100 	andeq	r4, fp, r0, lsl #2
	UARTDisable (UART0_BASE);
     708:	0000000c 	andeq	r0, r0, ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     70c:	00000344 	andeq	r0, r0, r4, asr #6
	UARTDisable (UART0_BASE);
     710:	00001630 	andeq	r1, r0, r0, lsr r6
	UARTConfigSetExpClk (UART0_BASE,
     714:	00000024 	andeq	r0, r0, r4, lsr #32
     718:	0000000c 	andeq	r0, r0, ip
     71c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     720:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     724:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     728:	00000014 	andeq	r0, r0, r4, lsl r0
     72c:	00000718 	andeq	r0, r0, r8, lsl r7
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     730:	00001654 	andeq	r1, r0, r4, asr r6
     734:	00000016 	andeq	r0, r0, r6, lsl r0
     738:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	urates [0] = rate;
     73c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     740:	0000000c 	andeq	r0, r0, ip
     744:	00000718 	andeq	r0, r0, r8, lsl r7
     748:	0000166a 	andeq	r1, r0, sl, ror #12
     74c:	0000001a 	andeq	r0, r0, sl, lsl r0
     750:	00000018 	andeq	r0, r0, r8, lsl r0
     754:	00000718 	andeq	r0, r0, r8, lsl r7
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     758:	00001684 	andeq	r1, r0, r4, lsl #13
     75c:	0000000e 	andeq	r0, r0, lr
     760:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     764:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     768:	000ec3ce 	andeq	ip, lr, lr, asr #7
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76c:	00000018 	andeq	r0, r0, r8, lsl r0
     770:	00000718 	andeq	r0, r0, r8, lsl r7
	__pi_uart_setrate (urates [0], __pi_uart);
     774:	00001694 	muleq	r0, r4, r6
     778:	0000004c 	andeq	r0, r0, ip, asr #32
     77c:	83100e41 	tsthi	r0, #1040	; 0x410
     780:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     784:	00018e02 	andeq	r8, r1, r2, lsl #28
     788:	00000020 	andeq	r0, r0, r0, lsr #32
     78c:	00000718 	andeq	r0, r0, r8, lsl r7
	switch (operation) {
     790:	000016e0 	andeq	r1, r0, r0, ror #13
static int ioreq_uart_a (int operation, char *buf, int len) {
     794:	0000008c 	andeq	r0, r0, ip, lsl #1
     798:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     79c:	5f018e02 	svcpl	0x00018e02
     7a0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7a4:	560b4200 	strpl	r4, [fp], -r0, lsl #4
				*buf++ = uart_a_read;
     7a8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7ac:	00000020 	andeq	r0, r0, r0, lsr #32
			while (len && uart_a_char_available) {
     7b0:	00000718 	andeq	r0, r0, r8, lsl r7
     7b4:	0000176c 	andeq	r1, r0, ip, ror #14
     7b8:	00000070 	andeq	r0, r0, r0, ror r0
			if (len != operation) {
     7bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
     7c0:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     7c4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			uart_a_disable_int;
     7c8:	430b4200 	movwmi	r4, #45568	; 0xb200
			if (uart_a_char_available) {
     7cc:	000ec4ce 	andeq	ip, lr, lr, asr #9
				*buf++ = uart_a_read;
     7d0:	0000003c 	andeq	r0, r0, ip, lsr r0
			uart_a_disable_int;
     7d4:	00000718 	andeq	r0, r0, r8, lsl r7
     7d8:	000017dc 	ldrdeq	r1, [r0], -ip
			if (uart_a_char_available) {
     7dc:	000000c0 	andeq	r0, r0, r0, asr #1
     7e0:	82080e41 	andhi	r0, r8, #1040	; 0x410
				uart_a_enable_int;
     7e4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7e8:	0a84300e 	beq	fe10c828 <_estack+0xde107828>
				goto Redo_rx;
     7ec:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f0:	06880787 	streq	r0, [r8], r7, lsl #15
     7f4:	048a0589 	streq	r0, [sl], #1417	; 0x589
			return -2;
     7f8:	0a6b038e 	beq	1ac1638 <__ccfg+0x1aa1690>
     7fc:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
				uart_a_write (*buf);
     800:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     804:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
			while (len && uart_a_room_in_tx) {
     808:	c2c34108 	sbcgt	r4, r3, #8, 2
     80c:	0b41000e 	bleq	104084c <__ccfg+0x10208a4>
     810:	0000001c 	andeq	r0, r0, ip, lsl r0
			if (len != operation) {
     814:	00000718 	andeq	r0, r0, r8, lsl r7
			uart_a_disable_int;
     818:	00000000 	andeq	r0, r0, r0
     81c:	0000006c 	andeq	r0, r0, ip, rrx
			if (uart_a_room_in_tx) {
     820:	83180e42 	tsthi	r8, #1056	; 0x420
     824:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
				uart_a_enable_int;
     828:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     82c:	00018e02 	andeq	r8, r1, r2, lsl #28
				*buf++ = uart_a_read;
     830:	0000000c 	andeq	r0, r0, ip
			if (uart_a_room_in_tx) {
     834:	00000718 	andeq	r0, r0, r8, lsl r7
				uart_a_write (*buf);
     838:	0000189c 	muleq	r0, ip, r8
     83c:	00000024 	andeq	r0, r0, r4, lsr #32
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     840:	00000018 	andeq	r0, r0, r8, lsl r0
     844:	00000718 	andeq	r0, r0, r8, lsl r7
			uart_a_enable_int;
     848:	00000000 	andeq	r0, r0, r0
     84c:	00000080 	andeq	r0, r0, r0, lsl #1
     850:	83100e42 	tsthi	r0, #1056	; 0x420
			return 0;
     854:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (len == UART_CNTRL_SETRATE) {
     858:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_uart_setrate (*((word*)buf),
     85c:	00000014 	andeq	r0, r0, r4, lsl r0
     860:	00000718 	andeq	r0, r0, r8, lsl r7
     864:	00000000 	andeq	r0, r0, r0
				syserror (EREQPAR, "uar");
     868:	00000070 	andeq	r0, r0, r0, ror r0
			syserror (ENOOPER, "uai");
     86c:	83080e42 	movwhi	r0, #36418	; 0x8e42
			if (len == UART_CNTRL_GETRATE) {
     870:	00018e02 	andeq	r8, r1, r2, lsl #28
				return 1;
     874:	00000018 	andeq	r0, r0, r8, lsl r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     878:	00000718 	andeq	r0, r0, r8, lsl r7
			syserror (ENOOPER, "uai");
     87c:	00000000 	andeq	r0, r0, r0
     880:	00000078 	andeq	r0, r0, r8, ror r0
     884:	83100e42 	tsthi	r0, #1056	; 0x420
     888:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     88c:	00018e02 	andeq	r8, r1, r2, lsl #28
     890:	00000020 	andeq	r0, r0, r0, lsr #32
     894:	00000718 	andeq	r0, r0, r8, lsl r7
     898:	000018c0 	andeq	r1, r0, r0, asr #17
     89c:	000000bc 	strheq	r0, [r0], -ip
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
void UART0IntHandler () {
     8a4:	86048505 	strhi	r8, [r4], -r5, lsl #10
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     8ac:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     8b0:	000b4114 	andeq	r4, fp, r4, lsl r1
     8b4:	00000018 	andeq	r0, r0, r8, lsl r0
     8b8:	00000718 	andeq	r0, r0, r8, lsl r7
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8bc:	00000000 	andeq	r0, r0, r0
     8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
		RISE_N_SHINE;
     8c4:	83100e41 	tsthi	r0, #1040	; 0x410
     8c8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		i_trigger (devevent (UART_A, READ));
     8cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     8d0:	00000018 	andeq	r0, r0, r8, lsl r0
     8d4:	00000718 	andeq	r0, r0, r8, lsl r7
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	00000038 	andeq	r0, r0, r8, lsr r0
     8e0:	83100e41 	tsthi	r0, #1040	; 0x410
     8e4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8ec:	0000000c 	andeq	r0, r0, ip
     8f0:	00000718 	andeq	r0, r0, r8, lsl r7
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	0000000a 	andeq	r0, r0, sl
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fc:	00000018 	andeq	r0, r0, r8, lsl r0
     900:	00000718 	andeq	r0, r0, r8, lsl r7
     904:	0000197c 	andeq	r1, r0, ip, ror r9
		i_trigger (devevent (UART_A, WRITE));
     908:	0000002c 	andeq	r0, r0, ip, lsr #32
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     90c:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     910:	4c018e02 	stcmi	14, cr8, [r1], {2}
		RISE_N_SHINE;
     914:	000ec4ce 	andeq	ip, lr, lr, asr #9
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000718 	andeq	r0, r0, r8, lsl r7
		i_trigger (devevent (UART_A, WRITE));
     920:	000019a8 	andeq	r1, r0, r8, lsr #19
     924:	00000060 	andeq	r0, r0, r0, rrx
     928:	83080e41 	movwhi	r0, #36417	; 0x8e41
     92c:	61018e02 	tstvs	r1, r2, lsl #28
     930:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     934:	000b4300 	andeq	r4, fp, r0, lsl #6
     938:	00000014 	andeq	r0, r0, r4, lsl r0
     93c:	00000718 	andeq	r0, r0, r8, lsl r7
     940:	00000000 	andeq	r0, r0, r0
     944:	00000040 	andeq	r0, r0, r0, asr #32
     948:	83080e42 	movwhi	r0, #36418	; 0x8e42
}
     94c:	00018e02 	andeq	r8, r1, r2, lsl #28
     950:	00000014 	andeq	r0, r0, r4, lsl r0
     954:	00000718 	andeq	r0, r0, r8, lsl r7
     958:	00000000 	andeq	r0, r0, r0
     95c:	0000002c 	andeq	r0, r0, ip, lsr #32
void __buttons_setirq (int val) {
     960:	83080e42 	movwhi	r0, #36418	; 0x8e42
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
     968:	0000001c 	andeq	r0, r0, ip, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     96c:	00000718 	andeq	r0, r0, r8, lsl r7
     970:	00000000 	andeq	r0, r0, r0
     974:	0000003c 	andeq	r0, r0, ip, lsr r0
		bn = BUTTON_GPIO (__button_list [i]);
     978:	83180e41 	tsthi	r8, #1040	; 0x410
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     980:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     984:	00018e02 	andeq	r8, r1, r2, lsl #28
     988:	0000000c 	andeq	r0, r0, ip
     98c:	00000718 	andeq	r0, r0, r8, lsl r7
     990:	00000000 	andeq	r0, r0, r0
}
     994:	00000006 	andeq	r0, r0, r6
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	00000718 	andeq	r0, r0, r8, lsl r7
     9a0:	00001a08 	andeq	r1, r0, r8, lsl #20
void __pinlist_setirq (int val) {
     9a4:	00000068 	andeq	r0, r0, r8, rrx
	for (i = 0; i < N_PINLIST; i++) {
     9a8:	83180e41 	tsthi	r8, #1040	; 0x410
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	for (i = 0; i < N_PINLIST; i++) {
     9b4:	00018e02 	andeq	r8, r1, r2, lsl #28
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b8:	00000014 	andeq	r0, r0, r4, lsl r0
     9bc:	00000718 	andeq	r0, r0, r8, lsl r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c0:	00001a70 	andeq	r1, r0, r0, ror sl
     9c4:	00000050 	andeq	r0, r0, r0, asr r0
     9c8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	for (i = 0; i < N_PINLIST; i++) {
     9cc:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
     9d4:	00000718 	andeq	r0, r0, r8, lsl r7
     9d8:	00001ac0 	andeq	r1, r0, r0, asr #21
     9dc:	0000009c 	muleq	r0, ip, r0
void GPIOIntHandler () {
     9e0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
if (buttons_int) {
     9e4:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9e8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
	buttons_disable ();
     9ec:	8a048905 	bhi	122e08 <__ccfg+0x102e60>
     9f0:	8e028b03 	vmlahi.f64	d8, d2, d3
	i_trigger ((aword)&__button_list);
     9f4:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     9f8:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     9fc:	00000b42 	andeq	r0, r0, r2, asr #22
     a00:	00000014 	andeq	r0, r0, r4, lsl r0
     a04:	00000718 	andeq	r0, r0, r8, lsl r7
     a08:	00001b5c 	andeq	r1, r0, ip, asr fp
     a0c:	00000040 	andeq	r0, r0, r0, asr #32
     a10:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a14:	00018e02 	andeq	r8, r1, r2, lsl #28
     a18:	00000014 	andeq	r0, r0, r4, lsl r0
     a1c:	00000718 	andeq	r0, r0, r8, lsl r7
	RISE_N_SHINE;
     a20:	00001b9c 	muleq	r0, ip, fp
     a24:	00000034 	andeq	r0, r0, r4, lsr r0
     a28:	83080e42 	movwhi	r0, #36418	; 0x8e42
if (pin_sensor_int) {
     a2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a30:	00000018 	andeq	r0, r0, r8, lsl r0
	i_trigger ((aword)(&__input_pins));
     a34:	00000718 	andeq	r0, r0, r8, lsl r7
     a38:	00001bd0 	ldrdeq	r1, [r0], -r0
     a3c:	0000003c 	andeq	r0, r0, ip, lsr r0
     a40:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a44:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a48:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a4c:	00000018 	andeq	r0, r0, r8, lsl r0
     a50:	00000718 	andeq	r0, r0, r8, lsl r7
     a54:	00000000 	andeq	r0, r0, r0
     a58:	0000003c 	andeq	r0, r0, ip, lsr r0
     a5c:	83100e42 	tsthi	r0, #1056	; 0x420
	__pinsen_disable_and_clear;
     a60:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	RISE_N_SHINE;
     a64:	00018e02 	andeq	r8, r1, r2, lsl #28
     a68:	0000000c 	andeq	r0, r0, ip
     a6c:	00000718 	andeq	r0, r0, r8, lsl r7
}
     a70:	00001c0c 	andeq	r1, r0, ip, lsl #24
     a74:	00000002 	andeq	r0, r0, r2
     a78:	0000000c 	andeq	r0, r0, ip
     a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a80:	7c020001 	stcvc	0, cr0, [r2], {1}
void system_init () {
     a84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a88:	0000000c 	andeq	r0, r0, ip
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8c:	00000a78 	andeq	r0, r0, r8, ror sl
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a90:	00001c0e 	andeq	r1, r0, lr, lsl #24
     a94:	00000002 	andeq	r0, r0, r2
     a98:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9c:	00000a78 	andeq	r0, r0, r8, ror sl
     aa0:	00001c10 	andeq	r1, r0, r0, lsl ip
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa4:	00000002 	andeq	r0, r0, r2
     aa8:	0000000c 	andeq	r0, r0, ip
     aac:	00000a78 	andeq	r0, r0, r8, ror sl
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab0:	00001c12 	andeq	r1, r0, r2, lsl ip
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab4:	00000002 	andeq	r0, r0, r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ab8:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     abc:	00000a78 	andeq	r0, r0, r8, ror sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac0:	00001c14 	andeq	r1, r0, r4, lsl ip
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac4:	00000044 	andeq	r0, r0, r4, asr #32
		pin = (port_confs [i] >> 19) & 0x1f;
     ac8:	83080e41 	movwhi	r0, #36417	; 0x8e41
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     acc:	00018e02 	andeq	r8, r1, r2, lsl #28
		pin = (port_confs [i] >> 19) & 0x1f;
     ad0:	0000000c 	andeq	r0, r0, ip
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ad8:	7c020001 	stcvc	0, cr0, [r2], {1}
     adc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ae0:	0000000c 	andeq	r0, r0, ip
		if (port_confs [i] & 0x80)
     ae4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	00000002 	andeq	r0, r0, r2
		if (port_confs [i] & 0x40)
     af0:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     af8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afc:	00000058 	andeq	r0, r0, r8, asr r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b04:	86038504 	strhi	r8, [r3], -r4, lsl #10
	all_leds_blink;
     b08:	00018e02 	andeq	r8, r1, r2, lsl #28
     b0c:	0000000c 	andeq	r0, r0, ip
     b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b14:	7c020001 	stcvc	0, cr0, [r2], {1}
     b18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     b20:	00000b0c 	andeq	r0, r0, ip, lsl #22
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b24:	00000000 	andeq	r0, r0, r0
     b28:	000000cc 	andeq	r0, r0, ip, asr #1
     b2c:	83100e42 	tsthi	r0, #1056	; 0x420
     b30:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b34:	02018e02 	andeq	r8, r1, #2, 28
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b38:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b3c:	000ec3c4 	andeq	ip, lr, r4, asr #7
     b40:	ce420b44 	vmlsgt.f64	d16, d2, d4
	IntEnable (INT_AON_RTC_COMB);
     b44:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	00000024 	andeq	r0, r0, r4, lsr #32
	__pi_malloc_init ();
     b50:	00000b0c 	andeq	r0, r0, ip, lsl #22
	IntEnable (INT_AON_GPIO_EDGE);
     b54:	00000000 	andeq	r0, r0, r0
     b58:	00000038 	andeq	r0, r0, r8, lsr r0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b60:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     b64:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b68:	4a0b4300 	bmi	2d1770 <__ccfg+0x2b17c8>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b70:	000b4300 	andeq	r4, fp, r0, lsl #6
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b74:	0000000c 	andeq	r0, r0, ip
     b78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b7c:	7c020001 	stcvc	0, cr0, [r2], {1}
	urates [0] = UART_RATE / 100;
     b80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b84:	00000018 	andeq	r0, r0, r8, lsl r0
	reinit_uart ();
     b88:	00000b74 	andeq	r0, r0, r4, ror fp
	EXTRA_INITIALIZERS;
     b8c:	00001c60 	andeq	r1, r0, r0, ror #24
     b90:	00000034 	andeq	r0, r0, r4, lsr r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b94:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     b98:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b9c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba0:	00000018 	andeq	r0, r0, r8, lsl r0
     ba4:	00000b74 	andeq	r0, r0, r4, ror fp
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba8:	00001c94 	muleq	r0, r4, ip
     bac:	00000030 	andeq	r0, r0, r0, lsr r0
			devinit [i] . init (devinit [i] . param);
     bb0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000014 	andeq	r0, r0, r4, lsl r0
	IntEnable (INT_UART0_COMB);
     bc0:	00000b74 	andeq	r0, r0, r4, ror fp
     bc4:	00001cc4 	andeq	r1, r0, r4, asr #25
}
     bc8:	00000018 	andeq	r0, r0, r8, lsl r0
	tci_run_auxiliary_timer ();
     bcc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
		diag ("");
     bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bd4:	0000001c 	andeq	r0, r0, ip, lsl r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bd8:	00000b74 	andeq	r0, r0, r4, ror fp
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     bdc:	00001cdc 	ldrdeq	r1, [r0], -ip
		diag ("Leftover RAM: %d bytes",
     be0:	00000054 	andeq	r0, r0, r4, asr r0
     be4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     be8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     bf0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf8:	00000b74 	andeq	r0, r0, r4, ror fp
     bfc:	00001d30 	andeq	r1, r0, r0, lsr sp
     c00:	00000040 	andeq	r0, r0, r0, asr #32
     c04:	83180e41 	tsthi	r8, #1040	; 0x410
     c08:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c0c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c10:	00018e02 	andeq	r8, r1, r2, lsl #28
     c14:	00000014 	andeq	r0, r0, r4, lsl r0
     c18:	00000b74 	andeq	r0, r0, r4, ror fp
     c1c:	00001d70 	andeq	r1, r0, r0, ror sp
     c20:	00000024 	andeq	r0, r0, r4, lsr #32
     c24:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
     c2c:	00000014 	andeq	r0, r0, r4, lsl r0
     c30:	00000b74 	andeq	r0, r0, r4, ror fp
     c34:	00001d94 	muleq	r0, r4, sp
     c38:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c3c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c40:	00018e02 	andeq	r8, r1, r2, lsl #28
     c44:	0000000c 	andeq	r0, r0, ip
     c48:	00000b74 	andeq	r0, r0, r4, ror fp
     c4c:	00001da8 	andeq	r1, r0, r8, lsr #27
     c50:	00000014 	andeq	r0, r0, r4, lsl r0
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	00000b74 	andeq	r0, r0, r4, ror fp
}
     c5c:	00000000 	andeq	r0, r0, r0
__attribute__ ((noreturn)) void __pi_release () {
     c60:	00000064 	andeq	r0, r0, r4, rrx
     c64:	83180e41 	tsthi	r8, #1040	; 0x410
     c68:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	check_stack_overflow;
     c70:	00018e02 	andeq	r8, r1, r2, lsl #28
     c74:	0000001c 	andeq	r0, r0, ip, lsl r0
     c78:	00000b74 	andeq	r0, r0, r4, ror fp
	update_n_wake (MAX_WORD, NO);
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	00000128 	andeq	r0, r0, r8, lsr #2
     c84:	83180e41 	tsthi	r8, #1040	; 0x410
	for_all_tasks (__pi_curr) {
     c88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c90:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("cpsid i" : : : "memory");
     c94:	00000024 	andeq	r0, r0, r4, lsr #32
	__SLEEP;
     c98:	00000b74 	andeq	r0, r0, r4, ror fp
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	000000ec 	andeq	r0, r0, ip, ror #1
     ca4:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
	system_event_count ++;
     ca8:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     cac:	87078608 	strhi	r8, [r7, -r8, lsl #12]
	switch (__pi_systat.effpdm) {
     cb0:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     cb4:	8b038a04 	blhi	e34cc <__ccfg+0xc3524>
     cb8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cbc:	0000000c 	andeq	r0, r0, ip
			__WFI ();
     cc0:	00000b74 	andeq	r0, r0, r4, ror fp
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	00000002 	andeq	r0, r0, r2
	check_stack_overflow;
     ccc:	0000000c 	andeq	r0, r0, ip
     cd0:	00000b74 	andeq	r0, r0, r4, ror fp
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd4:	00000000 	andeq	r0, r0, r0
     cd8:	00000004 	andeq	r0, r0, r4
			(__pi_curr->code) (tstate (__pi_curr));
     cdc:	0000000c 	andeq	r0, r0, ip
			goto Redo;
     ce0:	00000b74 	andeq	r0, r0, r4, ror fp
	for_all_tasks (__pi_curr) {
     ce4:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ce8:	00000014 	andeq	r0, r0, r4, lsl r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cec:	00000018 	andeq	r0, r0, r8, lsl r0
     cf0:	00000b74 	andeq	r0, r0, r4, ror fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf4:	00000000 	andeq	r0, r0, r0
     cf8:	0000001a 	andeq	r0, r0, sl, lsl r0
     cfc:	83080e41 	movwhi	r0, #36417	; 0x8e41
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d00:	4a018e02 	bmi	64510 <__ccfg+0x44568>
     d04:	000ec3ce 	andeq	ip, lr, lr, asr #7
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d08:	0000000c 	andeq	r0, r0, ip
     d0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			__WFI ();
     d10:	7c020001 	stcvc	0, cr0, [r2], {1}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d18:	0000001c 	andeq	r0, r0, ip, lsl r0
}
     d1c:	00000d08 	andeq	r0, r0, r8, lsl #26
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d20:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d24:	00000078 	andeq	r0, r0, r8, ror r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d28:	83180e41 	tsthi	r8, #1040	; 0x410
     d2c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d30:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d40:	7c020001 	stcvc	0, cr0, [r2], {1}
     d44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d48:	00000030 	andeq	r0, r0, r0, lsr r0
     d4c:	00000d38 	andeq	r0, r0, r8, lsr sp
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d50:	00001e34 	andeq	r1, r0, r4, lsr lr
     d54:	00000054 	andeq	r0, r0, r4, asr r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d58:	810c0e41 	tsthi	ip, r1, asr #28
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d5c:	83028203 	movwhi	r8, #8707	; 0x2203
     d60:	280e4101 	stmdacs	lr, {r0, r8, lr}
     d64:	06850784 	streq	r0, [r5], r4, lsl #15
     d68:	048e0586 	streq	r0, [lr], #1414	; 0x586
     d6c:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
			SysCtrlSetRechargeBeforePowerDown
     d70:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d74:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d78:	000ec1c2 	andeq	ip, lr, r2, asr #3
     d7c:	0000000c 	andeq	r0, r0, ip
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d84:	7c020001 	stcvc	0, cr0, [r2], {1}
     d88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8c:	00000030 	andeq	r0, r0, r0, lsr r0
     d90:	00000d7c 	andeq	r0, r0, ip, ror sp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d94:	00001e88 	andeq	r1, r0, r8, lsl #29
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d98:	00000060 	andeq	r0, r0, r0, rrx
     d9c:	810c0e41 	tsthi	ip, r1, asr #28
     da0:	83028203 	movwhi	r8, #8707	; 0x2203
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da4:	200e4101 	andcs	r4, lr, r1, lsl #2
			while (!(AONWUCPowerStatusGet () &
     da8:	05850684 	streq	r0, [r5, #1668]	; 0x684
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dac:	0a64048e 	beq	1901fec <__ccfg+0x18e2044>
     db0:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     db4:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     db8:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     dbc:	0b41000e 	bleq	1040dfc <__ccfg+0x1020e54>
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dc8:	7c020001 	stcvc	0, cr0, [r2], {1}
     dcc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd0:	0000000c 	andeq	r0, r0, ip
     dd4:	00000dc0 	andeq	r0, r0, r0, asr #27
			SysCtrlAdjustRechargeAfterPowerDown ();
     dd8:	00001ee8 	andeq	r1, r0, r8, ror #29
			reinit_uart ();
     ddc:	00000020 	andeq	r0, r0, r0, lsr #32
     de0:	00000018 	andeq	r0, r0, r8, lsl r0
     de4:	00000dc0 	andeq	r0, r0, r0, asr #27
}
     de8:	00001f08 	andeq	r1, r0, r8, lsl #30
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dec:	00000190 	muleq	r0, r0, r1
     df0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df4:	86038504 	strhi	r8, [r3], -r4, lsl #10
     df8:	00018e02 	andeq	r8, r1, r2, lsl #28
     dfc:	00000018 	andeq	r0, r0, r8, lsl r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e00:	00000dc0 	andeq	r0, r0, r0, asr #27
     e04:	00002098 	muleq	r0, r8, r0
     e08:	00000048 	andeq	r0, r0, r8, asr #32
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0c:	83100e41 	tsthi	r0, #1040	; 0x410
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e10:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e14:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e18:	00000014 	andeq	r0, r0, r4, lsl r0
     e1c:	00000dc0 	andeq	r0, r0, r0, asr #27
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e20:	000020e0 	andeq	r2, r0, r0, ror #1
     e24:	00000024 	andeq	r0, r0, r4, lsr #32
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e28:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e30:	00000018 	andeq	r0, r0, r8, lsl r0
     e34:	00000dc0 	andeq	r0, r0, r0, asr #27
			PRCMPowerDomainOff (
     e38:	00002104 	andeq	r2, r0, r4, lsl #2
     e3c:	0000005c 	andeq	r0, r0, ip, asr r0
	__SLEEP;
     e40:	83100e41 	tsthi	r0, #1040	; 0x410
     e44:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
  __ASM volatile ("cpsie i" : : : "memory");
     e48:	00018e02 	andeq	r8, r1, r2, lsl #28
	goto Redo;
     e4c:	00000018 	andeq	r0, r0, r8, lsl r0
     e50:	00000dc0 	andeq	r0, r0, r0, asr #27
     e54:	00002160 	andeq	r2, r0, r0, ror #2
     e58:	00000038 	andeq	r0, r0, r8, lsr r0
     e5c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     e60:	86038504 	strhi	r8, [r3], -r4, lsl #10
     e64:	00018e02 	andeq	r8, r1, r2, lsl #28
     e68:	00000028 	andeq	r0, r0, r8, lsr #32
     e6c:	00000dc0 	andeq	r0, r0, r0, asr #27
     e70:	00002198 	muleq	r0, r8, r1
     e74:	00000180 	andeq	r0, r0, r0, lsl #3
     e78:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
     e7c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     e80:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     e84:	02018e02 	andeq	r8, r1, #2, 28
     e88:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     e8c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e90:	00000000 	andeq	r0, r0, r0
     e94:	00000030 	andeq	r0, r0, r0, lsr r0
     e98:	00000dc0 	andeq	r0, r0, r0, asr #27
     e9c:	00002318 	andeq	r2, r0, r8, lsl r3
     ea0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ea4:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     ea8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     eac:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     eb0:	89038804 	stmdbhi	r3, {r2, fp, pc}
     eb4:	02018e02 	andeq	r8, r1, #2, 28
	cli_tim;
     eb8:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
     ebc:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
     ec0:	000ec3c4 	andeq	ip, lr, r4, asr #7
	diag ("PicOS halted");
     ec4:	00000b46 	andeq	r0, r0, r6, asr #22
	mdelay (500);
     ec8:	00000020 	andeq	r0, r0, r0, lsr #32
     ecc:	00000dc0 	andeq	r0, r0, r0, asr #27
	setpowermode (2);
     ed0:	000023e8 	andeq	r2, r0, r8, ror #7
	__PCB = NULL;
     ed4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	release;
     ed8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     edc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ee0:	02018e02 	andeq	r8, r1, #2, 28
     ee4:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
int main (void) {
     ee8:	00000ec4 	andeq	r0, r0, r4, asr #29
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	00000018 	andeq	r0, r0, r8, lsl r0
     ef0:	00000dc0 	andeq	r0, r0, r0, asr #27
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef4:	000025d8 	ldrdeq	r2, [r0], -r8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef8:	00000070 	andeq	r0, r0, r0, ror r0
	system_init ();
     efc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	tcv_init ();
     f00:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	00000001 	andeq	r0, r0, r1
     f08:	00000024 	andeq	r0, r0, r4, lsr #32
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f0c:	00000dc0 	andeq	r0, r0, r0, asr #27
     f10:	00002648 	andeq	r2, r0, r8, asr #12
     f14:	00000174 	andeq	r0, r0, r4, ror r1
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f18:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     f1c:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
	delay (16, 0);
     f20:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     f24:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     f28:	8b038a04 	blhi	e3740 <__ccfg+0xc3798>
	__pi_release ();
     f2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     f30:	0000000c 	andeq	r0, r0, ip
     f34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f38:	7c020001 	stcvc	0, cr0, [r2], {1}
     f3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f40:	00000014 	andeq	r0, r0, r4, lsl r0
     f44:	00000f30 	andeq	r0, r0, r0, lsr pc
static void killev (__pi_pcb_t *pid) {
     f48:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
	wfun = (aword)(pid->code);
     f4c:	00000024 	andeq	r0, r0, r4, lsr #32
	for_all_tasks (i) {
     f50:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		for (j = 0; j < nevents (i); j++) {
     f54:	00018e02 	andeq	r8, r1, r2, lsl #28
     f58:	0000000c 	andeq	r0, r0, ip
     f5c:	00000f30 	andeq	r0, r0, r0, lsr pc
			    || i->Events [j] . Event == wfun
     f60:	000027e0 	andeq	r2, r0, r0, ror #15
		for (j = 0; j < nevents (i); j++) {
     f64:	00000024 	andeq	r0, r0, r4, lsr #32
			if (i->Events [j] . Event == (aword)pid
     f68:	0000000c 	andeq	r0, r0, ip
     f6c:	00000f30 	andeq	r0, r0, r0, lsr pc
     f70:	00002804 	andeq	r2, r0, r4, lsl #16
				wakeupev (i, j);
     f74:	00000008 	andeq	r0, r0, r8
     f78:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
     f7c:	00000f30 	andeq	r0, r0, r0, lsr pc
}
     f80:	0000280c 	andeq	r2, r0, ip, lsl #16
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f84:	00000004 	andeq	r0, r0, r4
static void qfree (aword *ch) {
     f88:	0000000c 	andeq	r0, r0, ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8c:	00000f30 	andeq	r0, r0, r0, lsr pc
	cc = (aword*)(mpools + MA_NP);
     f90:	00002810 	andeq	r2, r0, r0, lsl r8
	m_setnextp (ch, chunk);
     f94:	00000004 	andeq	r0, r0, r4
	m_setnextp (cc, ch);
     f98:	00000018 	andeq	r0, r0, r8, lsl r0
}
     f9c:	00000f30 	andeq	r0, r0, r0, lsr pc
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa0:	00002814 	andeq	r2, r0, r4, lsl r8
     fa4:	00000048 	andeq	r0, r0, r8, asr #32
     fa8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			m_setnextp (cc, m_nextp (chunk));
     fac:	86038504 	strhi	r8, [r3], -r4, lsl #10
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb0:	00018e02 	andeq	r8, r1, r2, lsl #28
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fbc:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc4:	00000028 	andeq	r0, r0, r8, lsr #32
     fc8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
     fcc:	0000285c 	andeq	r2, r0, ip, asr r8
			m_setnextp (cc, m_nextp (chunk));
     fd0:	00000070 	andeq	r0, r0, r0, ror r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd4:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     fd8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     fdc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     fe0:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     fe4:	c7ce4214 	bfigt	r4, r4, #4, #11
     fe8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
			if (m_size (chunk) >= m_size (ch))
     fec:	000b4200 	andeq	r4, fp, r0, lsl #4
     ff0:	0000000c 	andeq	r0, r0, ip
     ff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		chunk = m_nextp (chunk))
     ff8:	7c020001 	stcvc	0, cr0, [r2], {1}
     ffc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1000:	00000028 	andeq	r0, r0, r8, lsr #32
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1004:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	diag_wait (a);
    1008:	000028cc 	andeq	r2, r0, ip, asr #17
	diag_wchar (c, a);
    100c:	0000011c 	andeq	r0, r0, ip, lsl r1
    1010:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
}
    1014:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1018:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	syserror (ESTATE, "state");
    101c:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    1020:	c7ce4214 	bfigt	r4, r4, #4, #11
    1024:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1028:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    102c:	0000000c 	andeq	r0, r0, ip
void utimer_add (address ut) {
    1030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1034:	7c020001 	stcvc	0, cr0, [r2], {1}
		if (__pi_utims [i] == NULL)
    1038:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (i = 0; i < MAX_UTIMERS; i++)
    103c:	0000000c 	andeq	r0, r0, ip
    1040:	0000102c 	andeq	r1, r0, ip, lsr #32
		syserror (ERESOURCE, "ut a");
    1044:	000029e8 	andeq	r2, r0, r8, ror #19
	__pi_utims [i] = ut;
    1048:	00000020 	andeq	r0, r0, r0, lsr #32
}
    104c:	00000028 	andeq	r0, r0, r8, lsr #32
    1050:	0000102c 	andeq	r1, r0, ip, lsr #32
    1054:	00002a08 	andeq	r2, r0, r8, lsl #20
	*t = v;
    1058:	00000230 	andeq	r0, r0, r0, lsr r2
	TCI_RUN_AUXILIARY_TIMER;
    105c:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
void update_n_wake (word min, Boolean force) {
    1060:	86078508 	strhi	r8, [r7], -r8, lsl #10
	if (TCI_UPDATE_DELAY_TICKS (force))
    1064:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1068:	8a038904 	bhi	e3480 <__ccfg+0xc34d8>
    106c:	02018e02 	andeq	r8, r1, #2, 28
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1070:	200e0a4f 	andcs	r0, lr, pc, asr #20
    1074:	00000b42 	andeq	r0, r0, r2, asr #22
    1078:	0000001c 	andeq	r0, r0, ip, lsl r0
    107c:	0000102c 	andeq	r1, r0, ip, lsr #32
    1080:	00002c38 	andeq	r2, r0, r8, lsr ip
    1084:	00000050 	andeq	r0, r0, r0, asr r0
    1088:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    108c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1090:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1094:	00018e02 	andeq	r8, r1, r2, lsl #28
    1098:	0000000c 	andeq	r0, r0, ip
    109c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10a0:	7c020001 	stcvc	0, cr0, [r2], {1}
		for_all_tasks (i) {
    10a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	__pi_mintk = znew + min;
    10a8:	00000020 	andeq	r0, r0, r0, lsr #32
    10ac:	00001098 	muleq	r0, r8, r0
			if (!twaiting (i))
    10b0:	00002c88 	andeq	r2, r0, r8, lsl #25
    10b4:	00000390 	muleq	r0, r0, r3
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10b8:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
    10bc:	86068507 	strhi	r8, [r6], -r7, lsl #10
    10c0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    10c4:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    10c8:	00000001 	andeq	r0, r0, r1
    10cc:	0000000c 	andeq	r0, r0, ip
    10d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    10d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10dc:	00000024 	andeq	r0, r0, r4, lsr #32
    10e0:	000010cc 	andeq	r1, r0, ip, asr #1
    10e4:	00003018 	andeq	r3, r0, r8, lsl r0
				wakeuptm (i);
    10e8:	00000028 	andeq	r0, r0, r8, lsr #32
    10ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		for_all_tasks (i) {
    10f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
				d = i->Timer - znew;
    10f4:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    10f8:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    10fc:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
		if ((word)(__pi_mintk - znew) < min) 
    1100:	0000000b 	andeq	r0, r0, fp
    1104:	00000028 	andeq	r0, r0, r8, lsr #32
    1108:	000010cc 	andeq	r1, r0, ip, asr #1
	__pi_old = znew;
    110c:	00000000 	andeq	r0, r0, r0
}
    1110:	0000002c 	andeq	r0, r0, ip, lsr #32
	TCI_RUN_DELAY_TIMER;
    1114:	83180e41 	tsthi	r8, #1040	; 0x410
}
    1118:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
    111c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1120:	50018e02 	andpl	r8, r1, r2, lsl #28
    1124:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1128:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
void proceed (word state) {
    112c:	000b4200 	andeq	r4, fp, r0, lsl #4
	prcdstate (__pi_curr, state);
    1130:	0000000c 	andeq	r0, r0, ip
    1134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	release;
    1138:	7c020001 	stcvc	0, cr0, [r2], {1}
    113c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1140:	0000000c 	andeq	r0, r0, ip
	sint j = nevents (__pi_curr);
    1144:	00001130 	andeq	r1, r0, r0, lsr r1
	if (j >= MAX_EVENTS_PER_TASK)
    1148:	00003040 	andeq	r3, r0, r0, asr #32
    114c:	00000030 	andeq	r0, r0, r0, lsr r0
    1150:	0000000c 	andeq	r0, r0, ip
		syserror (ENEVENTS, "sw");
    1154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1158:	7c020001 	stcvc	0, cr0, [r2], {1}
	setestate (__pi_curr->Events [j], state, event);
    115c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	00001150 	andeq	r1, r0, r0, asr r1
}
    1168:	00003070 	andeq	r3, r0, r0, ror r0
    116c:	00000020 	andeq	r0, r0, r0, lsr #32
    1170:	0000000c 	andeq	r0, r0, ip
void __pi_trigger (aword event) {
    1174:	00001150 	andeq	r1, r0, r0, asr r1
	for_all_tasks (i) {
    1178:	00003090 	muleq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
    117c:	00000018 	andeq	r0, r0, r8, lsl r0
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1188:	7c020001 	stcvc	0, cr0, [r2], {1}
			if (i->Events [j] . Event == event) {
    118c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00001180 	andeq	r1, r0, r0, lsl #3
				wakeupev (i, j);
    1198:	000030a8 	andeq	r3, r0, r8, lsr #1
    119c:	00000008 	andeq	r0, r0, r8
	for_all_tasks (i) {
    11a0:	0000000c 	andeq	r0, r0, ip
}
    11a4:	00001180 	andeq	r1, r0, r0, lsl #3
aword __pi_join (aword pid, word st) {
    11a8:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    11ac:	00000006 	andeq	r0, r0, r6
    11b0:	0000000c 	andeq	r0, r0, ip
	return 0;
    11b4:	00001180 	andeq	r1, r0, r0, lsl #3
		if ((aword)i == pid) {
    11b8:	000030b0 	strheq	r3, [r0], -r0
			__pi_wait (pid, st);
    11bc:	00000008 	andeq	r0, r0, r8
}
    11c0:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    11c4:	00001180 	andeq	r1, r0, r0, lsl #3
    11c8:	00000000 	andeq	r0, r0, r0
void delay (word d, word state) {
    11cc:	00000006 	andeq	r0, r0, r6
	settstate (__pi_curr, state);
    11d0:	0000000c 	andeq	r0, r0, ip
    11d4:	00001180 	andeq	r1, r0, r0, lsl #3
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	00000008 	andeq	r0, r0, r8
	update_n_wake (d, YES);
    11e0:	0000000c 	andeq	r0, r0, ip
    11e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	__pi_curr->Timer = __pi_old + d;
    11e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    11ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f0:	0000001c 	andeq	r0, r0, ip, lsl r0
	inctimer (__pi_curr);
    11f4:	000011e0 	andeq	r1, r0, r0, ror #3
    11f8:	000030b8 	strheq	r3, [r0], -r8
}
    11fc:	0000005c 	andeq	r0, r0, ip, asr r0
    1200:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	if (fun == NULL)
    1204:	86038504 	strhi	r8, [r3], -r4, lsl #10
		return (int) __pi_curr;
    1208:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    120c:	0000100e 	andeq	r1, r0, lr
	for_all_tasks (i)
    1210:	00000014 	andeq	r0, r0, r4, lsl r0
}
    1214:	000011e0 	andeq	r1, r0, r0, ror #3
		if (i->code == fun)
    1218:	00003114 	andeq	r3, r0, r4, lsl r1
	for_all_tasks (i)
    121c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1220:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1224:	00018e02 	andeq	r8, r1, r2, lsl #28
int __pi_strlen (const char *s) {
    1228:	00000018 	andeq	r0, r0, r8, lsl r0
	for (i = 0; *(s+i) != '\0'; i++);
    122c:	000011e0 	andeq	r1, r0, r0, ror #3
}
    1230:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1234:	00000090 	muleq	r0, r0, r0
	while (n--)
    1238:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    123c:	86038504 	strhi	r8, [r3], -r4, lsl #10
		*dest++ = *src++;
    1240:	00018e02 	andeq	r8, r1, r2, lsl #28
    1244:	00000014 	andeq	r0, r0, r4, lsl r0
    1248:	000011e0 	andeq	r1, r0, r0, ror #3
	while (n--)
    124c:	00003140 	andeq	r3, r0, r0, asr #2
}
    1250:	00000018 	andeq	r0, r0, r8, lsl r0
		*dest++ = c;
    1254:	83080e41 	movwhi	r0, #36417	; 0x8e41
void adddevfunc (devreqfun_t rf, int loc) {
    1258:	00018e02 	andeq	r8, r1, r2, lsl #28
		syserror (EREQPAR, "addv");
    125c:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (ERESOURCE, "addv");
    1260:	000011e0 	andeq	r1, r0, r0, ror #3
	if (ioreq [loc] != NULL)
    1264:	00003158 	andeq	r3, r0, r8, asr r1
    1268:	00000060 	andeq	r0, r0, r0, rrx
		syserror (ERESOURCE, "addv");
    126c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	ioreq [loc] = rf;
    1270:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    1274:	00000014 	andeq	r0, r0, r4, lsl r0
    1278:	000011e0 	andeq	r1, r0, r0, ror #3
sint io (word retry, word dev, word operation, char *buf, word len) {
    127c:	000031b8 			; <UNDEFINED> instruction: 0x000031b8
    1280:	00000034 	andeq	r0, r0, r4, lsr r0
    1284:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1288:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128c:	00000018 	andeq	r0, r0, r8, lsl r0
    1290:	000011e0 	andeq	r1, r0, r0, ror #3
    1294:	00000000 	andeq	r0, r0, r0
		syserror (ENODEVICE, "io");
    1298:	00000038 	andeq	r0, r0, r8, lsr r0
    129c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	if (len == 0)
    12a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	ret = (ioreq [dev]) (operation, buf, len);
    12a4:	00000001 	andeq	r0, r0, r1
    12a8:	0000000c 	andeq	r0, r0, ip
	if (ret >= 0)
    12ac:	000011e0 	andeq	r1, r0, r0, ror #3
	if (ret == -1) {
    12b0:	00000000 	andeq	r0, r0, r0
    12b4:	0000000c 	andeq	r0, r0, ip
		if (retry == WNONE)
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
		iowait (dev, operation, retry);
    12bc:	000011e0 	andeq	r1, r0, r0, ror #3
    12c0:	00000000 	andeq	r0, r0, r0
    12c4:	00000034 	andeq	r0, r0, r4, lsr r0
			release;
    12c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	if (ret == -2) {
    12cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if (retry != WNONE) {
    12d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    12d4:	0000000c 	andeq	r0, r0, ip
			iowait (dev, operation, retry);
    12d8:	000011e0 	andeq	r1, r0, r0, ror #3
    12dc:	00000000 	andeq	r0, r0, r0
			(ioreq [dev]) (NONE, buf, len);
    12e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    12e4:	0000000c 	andeq	r0, r0, ip
    12e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		(ioreq [dev]) (NONE, buf, len);
    12ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    12f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12f4:	0000000c 	andeq	r0, r0, ip
}
    12f8:	000012e4 	andeq	r1, r0, r4, ror #5
	if (retry != WNONE) {
    12fc:	00000000 	andeq	r0, r0, r0
		delay (-ret - 2, retry);
    1300:	00000014 	andeq	r0, r0, r4, lsl r0
    1304:	0000000c 	andeq	r0, r0, ip
    1308:	000012e4 	andeq	r1, r0, r4, ror #5
    130c:	000031ec 	andeq	r3, r0, ip, ror #3
		release;
    1310:	00000028 	andeq	r0, r0, r8, lsr #32
    1314:	0000000c 	andeq	r0, r0, ip
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1318:	000012e4 	andeq	r1, r0, r4, ror #5
    131c:	00003214 	andeq	r3, r0, r4, lsl r2
    1320:	0000004c 	andeq	r0, r0, ip, asr #32
    1324:	0000000c 	andeq	r0, r0, ip
    1328:	000012e4 	andeq	r1, r0, r4, ror #5
		syserror (ERESOURCE, "mal1");
    132c:	00003260 	andeq	r3, r0, r0, ror #4
    1330:	00000150 	andeq	r0, r0, r0, asr r1
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1334:	00000018 	andeq	r0, r0, r8, lsl r0
    1338:	000012e4 	andeq	r1, r0, r4, ror #5
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133c:	000033b0 			; <UNDEFINED> instruction: 0x000033b0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1340:	00000118 	andeq	r0, r0, r8, lsl r1
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1344:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1348:	86038504 	strhi	r8, [r3], -r4, lsl #10
    134c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
    1350:	00000018 	andeq	r0, r0, r8, lsl r0
    1354:	000012e4 	andeq	r1, r0, r4, ror #5
    1358:	000034c8 	andeq	r3, r0, r8, asr #9
    135c:	00000020 	andeq	r0, r0, r0, lsr #32
    1360:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1364:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
void __pi_free (aword *ch) {
    1368:	00000001 	andeq	r0, r0, r1
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    136c:	00000014 	andeq	r0, r0, r4, lsl r0
    1370:	000012e4 	andeq	r1, r0, r4, ror #5
		syserror (EMALLOC, "malg");
    1374:	00000000 	andeq	r0, r0, r0
    1378:	00000060 	andeq	r0, r0, r0, rrx
	mcfree [MA_NP] += m_size (ch);
    137c:	83080e41 	movwhi	r0, #36417	; 0x8e41
		m_size (ch) ^= MALLOC_UMASK;
    1380:	00018e02 	andeq	r8, r1, r2, lsl #28
    1384:	0000000c 	andeq	r0, r0, ip
	mcfree [MA_NP] += m_size (ch);
    1388:	000012e4 	andeq	r1, r0, r4, ror #5
	QFREE;
    138c:	000034e8 	andeq	r3, r0, r8, ror #9
	if (mevent [MA_NP] . nwait) {
    1390:	0000001c 	andeq	r0, r0, ip, lsl r0
    1394:	0000000c 	andeq	r0, r0, ip
		trigger ((aword)(&(mevent [MA_NP])));
    1398:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		mevent [MA_NP] . nwait --;
    139c:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    13a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13a4:	00000018 	andeq	r0, r0, r8, lsl r0
    13a8:	00001394 	muleq	r0, r4, r3
    13ac:	00003504 	andeq	r3, r0, r4, lsl #10
void kill (aword pid) {
    13b0:	000000d4 	ldrdeq	r0, [r0], -r4
		pid = (aword) __pi_curr;
    13b4:	83100e41 	tsthi	r0, #1040	; 0x410
	j = NULL;
    13b8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	for_all_tasks (i) {
    13bc:	00018e02 	andeq	r8, r1, r2, lsl #28
	syserror (EREQPAR, "kpi");
    13c0:	00000014 	andeq	r0, r0, r4, lsl r0
    13c4:	00001394 	muleq	r0, r4, r3
		if ((aword)i == pid) {
    13c8:	000035d8 	ldrdeq	r3, [r0], -r8
    13cc:	000000a4 	andeq	r0, r0, r4, lsr #1
				__PCB = i->Next;
    13d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			killev (i);
    13d4:	00018e02 	andeq	r8, r1, r2, lsl #28
			ufree (i);
    13d8:	0000000c 	andeq	r0, r0, ip
			if (i == __pi_curr)
    13dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13e0:	7c020001 	stcvc	0, cr0, [r2], {1}
				release;
    13e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13e8:	00000018 	andeq	r0, r0, r8, lsl r0
				j->Next = i->Next;
    13ec:	000013d8 	ldrdeq	r1, [r0], -r8
    13f0:	0000367c 	andeq	r3, r0, ip, ror r6
}
    13f4:	0000007c 	andeq	r0, r0, ip, ror r0
    13f8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13fc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	if (size < 8)
    1400:	00000001 	andeq	r0, r0, r1
		_size = 2;
    1404:	00000014 	andeq	r0, r0, r4, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1408:	000013d8 	ldrdeq	r1, [r0], -r8
		_size = (((aword)size) + 3) >> 2;
    140c:	000036f8 	strdeq	r3, [r0], -r8
		if (m_magic (chunk) != MALLOC_MAGIC)
    1410:	000000ac 	andeq	r0, r0, ip, lsr #1
		_size = (((aword)size) + 3) >> 2;
    1414:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
		if (mevent [MA_NP] . nfail != 255)
    1418:	00018e02 	andeq	r8, r1, r2, lsl #28
    141c:	0000000c 	andeq	r0, r0, ip
			mevent [MA_NP] . nfail ++;
    1420:	000013d8 	ldrdeq	r1, [r0], -r8
		mnfree [MA_NP] = 0;
    1424:	000037a4 	andeq	r3, r0, r4, lsr #15
    1428:	0000005c 	andeq	r0, r0, ip, asr r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    142c:	0000000c 	andeq	r0, r0, ip
    1430:	000013d8 	ldrdeq	r1, [r0], -r8
			syserror (EMALLOC, "malc");
    1434:	00003800 	andeq	r3, r0, r0, lsl #16
    1438:	00000018 	andeq	r0, r0, r8, lsl r0
		if (m_size (chunk) >= _size)
    143c:	0000000c 	andeq	r0, r0, ip
    1440:	000013d8 	ldrdeq	r1, [r0], -r8
		chunk = m_nextp (chunk)) {
    1444:	00000000 	andeq	r0, r0, r0
		m_setnextp (cc, m_nextp (chunk));
    1448:	00000010 	andeq	r0, r0, r0, lsl r0
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144c:	0000000c 	andeq	r0, r0, ip
    1450:	000013d8 	ldrdeq	r1, [r0], -r8
			m_size (chunk) = _size;
    1454:	00003818 	andeq	r3, r0, r8, lsl r8
			cc = chunk + _size + m_hdrlen;
    1458:	00000010 	andeq	r0, r0, r0, lsl r0
    145c:	0000000c 	andeq	r0, r0, ip
			m_size (cc) = waste - m_hdrlen;
    1460:	000013d8 	ldrdeq	r1, [r0], -r8
			QFREE;
    1464:	00003828 	andeq	r3, r0, r8, lsr #16
		mevent [MA_NP] . nfail = 0;
    1468:	00000014 	andeq	r0, r0, r4, lsl r0
		mcfree [MA_NP] -= m_size (chunk);
    146c:	00000018 	andeq	r0, r0, r8, lsl r0
    1470:	000013d8 	ldrdeq	r1, [r0], -r8
    1474:	0000383c 	andeq	r3, r0, ip, lsr r8
    1478:	00000064 	andeq	r0, r0, r4, rrx
		m_size (chunk) |= MALLOC_UMASK;
    147c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1480:	86038504 	strhi	r8, [r3], -r4, lsl #10
		m_size (chunk) |= MALLOC_UMASK;
    1484:	00018e02 	andeq	r8, r1, r2, lsl #28
			mnfree [MA_NP] = mcfree [MA_NP];
    1488:	0000000c 	andeq	r0, r0, ip
}
    148c:	000013d8 	ldrdeq	r1, [r0], -r8
    1490:	000038a0 	andeq	r3, r0, r0, lsr #17
    1494:	00000014 	andeq	r0, r0, r4, lsl r0
    1498:	0000000c 	andeq	r0, r0, ip
    149c:	000013d8 	ldrdeq	r1, [r0], -r8
    14a0:	000038b4 			; <UNDEFINED> instruction: 0x000038b4
    14a4:	00000014 	andeq	r0, r0, r4, lsl r0
aword __pi_fork (fsmcode func, aword data) {
    14a8:	0000000c 	andeq	r0, r0, ip
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14ac:	000013d8 	ldrdeq	r1, [r0], -r8
    14b0:	000038c8 	andeq	r3, r0, r8, asr #17
    14b4:	00000014 	andeq	r0, r0, r4, lsl r0
		if ((j = __PCB) == NULL)
    14b8:	0000000c 	andeq	r0, r0, ip
	i->Next = NULL;
    14bc:	000013d8 	ldrdeq	r1, [r0], -r8
	i->data = data;
    14c0:	000038dc 	ldrdeq	r3, [r0], -ip
		if ((j = __PCB) == NULL)
    14c4:	00000028 	andeq	r0, r0, r8, lsr #32
}
    14c8:	0000000c 	andeq	r0, r0, ip
			for (; j->Next != NULL; j = j->Next);
    14cc:	000013d8 	ldrdeq	r1, [r0], -r8
    14d0:	00003904 	andeq	r3, r0, r4, lsl #18
	return (aword) i;
    14d4:	00000010 	andeq	r0, r0, r0, lsl r0
    14d8:	0000000c 	andeq	r0, r0, ip
	if (mevent [MA_NP] . nwait != 255)
    14dc:	000013d8 	ldrdeq	r1, [r0], -r8
    14e0:	00003914 	andeq	r3, r0, r4, lsl r9
    14e4:	0000002c 	andeq	r0, r0, ip, lsr #32
		mevent [MA_NP] . nwait ++;
    14e8:	0000000c 	andeq	r0, r0, ip
	wait ((aword)(&(mevent [MA_NP])), state);
    14ec:	000013d8 	ldrdeq	r1, [r0], -r8
    14f0:	00003940 	andeq	r3, r0, r0, asr #18
void diag (const char *mess, ...) {
    14f4:	00000014 	andeq	r0, r0, r4, lsl r0
    14f8:	0000000c 	andeq	r0, r0, ip
    14fc:	000013d8 	ldrdeq	r1, [r0], -r8
	diag_disable_int (a, is);
    1500:	00003954 	andeq	r3, r0, r4, asr r9
    1504:	00000014 	andeq	r0, r0, r4, lsl r0
    1508:	0000001c 	andeq	r0, r0, ip, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    150c:	000013d8 	ldrdeq	r1, [r0], -r8
	diag_disable_int (a, is);
    1510:	00003968 	andeq	r3, r0, r8, ror #18
	while (*mess != '\0') {
    1514:	00000110 	andeq	r0, r0, r0, lsl r1
	dgout ('\r');
    1518:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	dgout ('\n');
    151c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1520:	02018e02 	andeq	r8, r1, #2, 28
    1524:	00100e76 	andseq	r0, r0, r6, ror lr
	diag_wait (a);
    1528:	00000018 	andeq	r0, r0, r8, lsl r0
	diag_enable_int (a, is);
    152c:	000013d8 	ldrdeq	r1, [r0], -r8
    1530:	00003a78 	andeq	r3, r0, r8, ror sl
}
    1534:	00000064 	andeq	r0, r0, r4, rrx
    1538:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    153c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
		if (*mess == '%') {
    1540:	00000001 	andeq	r0, r0, r1
    1544:	0000000c 	andeq	r0, r0, ip
			if (*mess == 'l') {
    1548:	000013d8 	ldrdeq	r1, [r0], -r8
    154c:	00003adc 	ldrdeq	r3, [r0], -ip
				mess++;
    1550:	00000028 	andeq	r0, r0, r8, lsr #32
				val = va_arg (ap, lword);
    1554:	00000014 	andeq	r0, r0, r4, lsl r0
				bc = 32;
    1558:	000013d8 	ldrdeq	r1, [r0], -r8
				bc = 16;
    155c:	00003b04 	andeq	r3, r0, r4, lsl #22
			switch (*mess) {
    1560:	00000150 	andeq	r0, r0, r0, asr r1
    1564:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1568:	00018e02 	andeq	r8, r1, r2, lsl #28
				dgout ('%');
    156c:	0000000c 	andeq	r0, r0, ip
    1570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				dgout (*mess);
    1574:	7c020001 	stcvc	0, cr0, [r2], {1}
    1578:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    157c:	0000001c 	andeq	r0, r0, ip, lsl r0
					v = __pi_hex_enc_table [
    1580:	0000156c 	andeq	r1, r0, ip, ror #10
					i += 4;
    1584:	00000000 	andeq	r0, r0, r0
					(val >> (bc - i)) & 0xf];
    1588:	000000f4 	strdeq	r0, [r0], -r4
    158c:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
					dgout (v);
    1590:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1594:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
				while (i < bc) {
    1598:	00018e02 	andeq	r8, r1, r2, lsl #28
			mess++;
    159c:	00000028 	andeq	r0, r0, r8, lsr #32
					d /= 10;
    15a0:	0000156c 	andeq	r1, r0, ip, ror #10
				if ((val >> (bc - 1)) & 1) {
    15a4:	00003c54 	andeq	r3, r0, r4, asr ip
    15a8:	00000220 	andeq	r0, r0, r0, lsr #4
					dgout ('-');
    15ac:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    15b0:	86088509 	strhi	r8, [r8], -r9, lsl #10
						val |= 0xffff0000;
    15b4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    15b8:	8a048905 	bhi	1239d4 <__ccfg+0x103a2c>
    15bc:	8e028b03 	vmlahi.f64	d8, d2, d3
				d = (bc == 16) ? 10000 : 1000000000;
    15c0:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    15c4:	00000024 	andeq	r0, r0, r4, lsr #32
    15c8:	00000014 	andeq	r0, r0, r4, lsl r0
					v = (word) (val / d);
    15cc:	0000156c 	andeq	r1, r0, ip, ror #10
					if (v || d == 1) break;
    15d0:	00003e74 	andeq	r3, r0, r4, ror lr
    15d4:	00000060 	andeq	r0, r0, r0, rrx
					d /= 10;
    15d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				d = (bc == 16) ? 10000 : 1000000000;
    15dc:	00018e02 	andeq	r8, r1, r2, lsl #28
					dgout (v + '0');
    15e0:	00000014 	andeq	r0, r0, r4, lsl r0
    15e4:	0000156c 	andeq	r1, r0, ip, ror #10
    15e8:	00000000 	andeq	r0, r0, r0
					d /= 10;
    15ec:	00000078 	andeq	r0, r0, r8, ror r0
					val = val - (v * d);
    15f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					if (d == 0) break;
    15f4:	00018e02 	andeq	r8, r1, r2, lsl #28
					v = (word) (val / d);
    15f8:	0000000c 	andeq	r0, r0, ip
    15fc:	0000156c 	andeq	r1, r0, ip, ror #10
				if (bc == 16)
    1600:	00003ed4 	ldrdeq	r3, [r0], -r4
				d = (bc == 16) ? 10000 : 1000000000;
    1604:	00000018 	andeq	r0, r0, r8, lsl r0
					val &= 0xffff;
    1608:	0000000c 	andeq	r0, r0, ip
					dgout (*s);
    160c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
					s++;
    1610:	7c020001 	stcvc	0, cr0, [r2], {1}
				while (*s != '\0') {
    1614:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1618:	0000000c 	andeq	r0, r0, ip
			dgout (*mess++);
    161c:	00001608 	andeq	r1, r0, r8, lsl #12
    1620:	00000000 	andeq	r0, r0, r0
    1624:	00000010 	andeq	r0, r0, r0, lsl r0
    1628:	0000000c 	andeq	r0, r0, ip
    162c:	00001608 	andeq	r1, r0, r8, lsl #12
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1630:	00000000 	andeq	r0, r0, r0
    1634:	00000018 	andeq	r0, r0, r8, lsl r0
    1638:	0000000c 	andeq	r0, r0, ip
    163c:	00001608 	andeq	r1, r0, r8, lsl #12
	^ entropy
    1640:	00003eec 	andeq	r3, r0, ip, ror #29
}
    1644:	0000004c 	andeq	r0, r0, ip, asr #32
    1648:	00000014 	andeq	r0, r0, r4, lsl r0
    164c:	00001608 	andeq	r1, r0, r8, lsl #12
    1650:	00000000 	andeq	r0, r0, r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1654:	00000030 	andeq	r0, r0, r0, lsr r0
	word cs = size + hblenb;
    1658:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1660:	00000018 	andeq	r0, r0, r8, lsl r0
	p -> length = size;
    1664:	00001608 	andeq	r1, r0, r8, lsl #12
}
    1668:	00003f38 	andeq	r3, r0, r8, lsr pc
	if (p->attributes.b.queued) {
    166c:	0000006c 	andeq	r0, r0, ip, rrx
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1670:	83100e41 	tsthi	r0, #1040	; 0x410
    1674:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    1678:	00018e02 	andeq	r8, r1, r2, lsl #28
		p->attributes.b.queued = 0;
    167c:	00000014 	andeq	r0, r0, r4, lsl r0
    1680:	00001608 	andeq	r1, r0, r8, lsl #12
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1684:	00003fa4 	andeq	r3, r0, r4, lsr #31
	deq (p);	// Remove from queue
    1688:	00000016 	andeq	r0, r0, r6, lsl r0
}
    168c:	83080e41 	movwhi	r0, #36417	; 0x8e41
	tfree ((address)p);
    1690:	00018e02 	andeq	r8, r1, r2, lsl #28
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1694:	0000000c 	andeq	r0, r0, ip
    1698:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    169c:	7c020001 	stcvc	0, cr0, [r2], {1}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16a4:	00000024 	andeq	r0, r0, r4, lsr #32
	if (q_empty (q))
    16a8:	00001694 	muleq	r0, r4, r6
    16ac:	00003fbc 			; <UNDEFINED> instruction: 0x00003fbc
		trigger (q);
    16b0:	00000028 	andeq	r0, r0, r8, lsr #32
	if (p->attributes.b.urgent) {
    16b4:	83100e41 	tsthi	r0, #1040	; 0x410
		p->u.bqueue.next = q->next;
    16b8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		p->u.bqueue.prev = q;
    16bc:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
		q->next->prev = (qitem_t*) p;
    16c0:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
	p->attributes.b.queued = 1;
    16c4:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    16c8:	0000000b 	andeq	r0, r0, fp
}
    16cc:	0000000c 	andeq	r0, r0, ip
		p->u.bqueue.prev = q->prev;
    16d0:	00001694 	muleq	r0, r4, r6
		q->prev->next = (qitem_t*) p;
    16d4:	00003fe4 	andeq	r3, r0, r4, ror #31
		q->prev = (qitem_t*) p;
    16d8:	00000008 	andeq	r0, r0, r8
    16dc:	0000000c 	andeq	r0, r0, ip
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e0:	00001694 	muleq	r0, r4, r6
	deq (p);	// Soft dequeue, timer and hook left intact
    16e4:	00000000 	andeq	r0, r0, r0
	switch (dv) {
    16e8:	00000022 	andeq	r0, r0, r2, lsr #32
    16ec:	00000018 	andeq	r0, r0, r8, lsl r0
    16f0:	00001694 	muleq	r0, r4, r6
    16f4:	00000000 	andeq	r0, r0, r0
			p->attributes.b.urgent = 1;
    16f8:	0000002e 	andeq	r0, r0, lr, lsr #32
    16fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			verify_ses (p, "dispose ses");
    1700:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
    1704:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1708:	00000018 	andeq	r0, r0, r8, lsl r0
    170c:	00001694 	muleq	r0, r4, r6
    1710:	00000000 	andeq	r0, r0, r0
			verify_phy (p, "dispose phy");
    1714:	00000034 	andeq	r0, r0, r4, lsr r0
    1718:	83100e41 	tsthi	r0, #1040	; 0x410
}
    171c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			enq (oqueues [p->attributes.b.phys], p);
    1720:	00018e02 	andeq	r8, r1, r2, lsl #28
			p->attributes.b.urgent = 1;
    1724:	00000018 	andeq	r0, r0, r8, lsl r0
    1728:	00001694 	muleq	r0, r4, r6
			verify_phy (p, "dispose phy");
    172c:	00000000 	andeq	r0, r0, r0
    1730:	00000040 	andeq	r0, r0, r0, asr #32
    1734:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1738:	86038504 	strhi	r8, [r3], -r4, lsl #10
    173c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1740:	0000000c 	andeq	r0, r0, ip
			enq (oqueues [p->attributes.b.phys], p);
    1744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1748:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    174c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			rlp (p);
    1750:	00000020 	andeq	r0, r0, r0, lsr #32
}
    1754:	00001740 	andeq	r1, r0, r0, asr #14
    1758:	00003fec 	andeq	r3, r0, ip, ror #31
    175c:	000000aa 	andeq	r0, r0, sl, lsr #1
    1760:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1764:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1768:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    176c:	180e4201 	stmdane	lr, {r0, r9, lr}
	if (b->attributes.b.outgoing) {
    1770:	00000688 	andeq	r0, r0, r8, lsl #13
	b = header (p);
    1774:	0000000c 	andeq	r0, r0, ip
	if (b->attributes.b.outgoing) {
    1778:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		verify_ses (b, "tcv02");
    177c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1780:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1784:	0000000c 	andeq	r0, r0, ip
    1788:	00001774 	andeq	r1, r0, r4, ror r7
    178c:	00004098 	muleq	r0, r8, r0
		verify_plg (b, tcv_out, "tcv03");
    1790:	00000014 	andeq	r0, r0, r4, lsl r0
    1794:	00000014 	andeq	r0, r0, r4, lsl r0
    1798:	00001774 	andeq	r1, r0, r4, ror r7
    179c:	000040ac 	andeq	r4, r0, ip, lsr #1
    17a0:	00000038 	andeq	r0, r0, r8, lsr r0
    17a4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    17a8:	00018e02 	andeq	r8, r1, r2, lsl #28
    17ac:	0000000c 	andeq	r0, r0, ip
    17b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b4:	7c020001 	stcvc	0, cr0, [r2], {1}
}
    17b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		dispose (b, plugins [b->attributes.b.plugin] ->
    17bc:	00000018 	andeq	r0, r0, r8, lsl r0
		rlp (b);
    17c0:	000017ac 	andeq	r1, r0, ip, lsr #15
}
    17c4:	000040e4 	andeq	r4, r0, r4, ror #1
		rlp (b);
    17c8:	00000038 	andeq	r0, r0, r8, lsr r0
    17cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    17d0:	42018e02 	andmi	r8, r1, #2, 28
    17d4:	0000180e 	andeq	r1, r0, lr, lsl #16
    17d8:	0000000c 	andeq	r0, r0, ip
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    17e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17e8:	00000018 	andeq	r0, r0, r8, lsl r0
	va_start (ap, plid);
    17ec:	000017d8 	ldrdeq	r1, [r0], -r8
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f0:	0000411c 	andeq	r4, r0, ip, lsl r1
    17f4:	0000002c 	andeq	r0, r0, ip, lsr #32
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17f8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
    17fc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1800:	00018e02 	andeq	r8, r1, r2, lsl #28
    1804:	0000000c 	andeq	r0, r0, ip
			syserror (ENODEVICE, "tcv04");
    1808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		syserror (EMALLOC, "tcv05");
    180c:	7c020001 	stcvc	0, cr0, [r2], {1}
	attp.b.outgoing = 1;
    1810:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1814:	00000018 	andeq	r0, r0, r8, lsl r0
    1818:	00001804 	andeq	r1, r0, r4, lsl #16
    181c:	00000000 	andeq	r0, r0, r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1820:	0000001e 	andeq	r0, r0, lr, lsl r0
		if (descriptors [fd] == NULL)
    1824:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1828:	86038504 	strhi	r8, [r3], -r4, lsl #10
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    182c:	00018e02 	andeq	r8, r1, r2, lsl #28
		return ERROR;
    1830:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1834:	00001804 	andeq	r1, r0, r4, lsl #16
    1838:	00000000 	andeq	r0, r0, r0
    183c:	00000098 	muleq	r0, r8, r0
	s->attpattern.b.session = fd;
    1840:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
    1844:	86038504 	strhi	r8, [r3], -r4, lsl #10
	descriptors [fd] = s;
    1848:	00018e02 	andeq	r8, r1, r2, lsl #28
	q_init (&(s->rqueue));
    184c:	0000000c 	andeq	r0, r0, ip
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1854:	7c020001 	stcvc	0, cr0, [r2], {1}
    1858:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    185c:	00000020 	andeq	r0, r0, r0, lsr #32
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1860:	0000184c 	andeq	r1, r0, ip, asr #16
    1864:	00004148 	andeq	r4, r0, r8, asr #2
    1868:	00000054 	andeq	r0, r0, r4, asr r0
	descriptors [fd] = s;
    186c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1870:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1874:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	if (s == NULL)
    1878:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
		syserror (EMALLOC, "tcv05");
    187c:	00000688 	andeq	r0, r0, r8, lsl #13
    1880:	0000000c 	andeq	r0, r0, ip
    1884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1888:	7c020001 	stcvc	0, cr0, [r2], {1}
    188c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1890:	0000000c 	andeq	r0, r0, ip
    1894:	00001880 	andeq	r1, r0, r0, lsl #17
    1898:	0000419c 	muleq	r0, ip, r1
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    189c:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .stab:

00000000 <.stab>:
   0:	00000001 	andeq	r0, r0, r1
   4:	00020000 	andeq	r0, r2, r0
}
   8:	0000004e 	andeq	r0, r0, lr, asr #32
   c:	0000000a 	andeq	r0, r0, sl
  10:	0000001e 	andeq	r0, r0, lr, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00000040 	andeq	r0, r0, r0, asr #32
  1c:	00000001 	andeq	r0, r0, r1
  20:	00000000 	andeq	r0, r0, r0

Disassembly of section .stabstr:

00000000 <.stabstr>:
   0:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
   4:	2e646f74 	mcrcs	15, 3, r6, cr4, cr4, {3}
   8:	675f0063 	ldrbvs	r0, [pc, -r3, rrx]
   c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  10:	666f656d 	strbtvs	r6, [pc], -sp, ror #10
  14:	20796164 	rsbscs	r6, r9, r4, ror #2
  18:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
  1c:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
  20:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
  24:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  28:	61206465 			; <UNDEFINED> instruction: 0x61206465
  2c:	7720646e 	strvc	r6, [r0, -lr, ror #8]!
  30:	206c6c69 	rsbcs	r6, ip, r9, ror #24
  34:	61776c61 	cmnvs	r7, r1, ror #24
  38:	66207379 			; <UNDEFINED> instruction: 0x66207379
  3c:	006c6961 	rsbeq	r6, ip, r1, ror #18
			i = k;
  40:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
				j->Next = k;
  44:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
  48:	6164666f 	cmnvs	r4, pc, ror #12
}
  4c:	Address 0x000000000000004c is out of bounds.

