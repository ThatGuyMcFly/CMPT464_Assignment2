
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	00001c19 	andeq	r1, r0, r9, lsl ip
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001c13 	andeq	r1, r0, r3, lsl ip
       c:	00001c15 	andeq	r1, r0, r5, lsl ip
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	00001c17 	andeq	r1, r0, r7, lsl ip
      14:	00001c17 	andeq	r1, r0, r7, lsl ip
		when (&__input_pins, st);
      18:	00001c17 	andeq	r1, r0, r7, lsl ip
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	00001c17 	andeq	r1, r0, r7, lsl ip
      30:	00001c17 	andeq	r1, r0, r7, lsl ip
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	00001c17 	andeq	r1, r0, r7, lsl ip
      3c:	00001c17 	andeq	r1, r0, r7, lsl ip
      40:	000009e5 	andeq	r0, r0, r5, ror #19
      44:	00001c17 	andeq	r1, r0, r7, lsl ip
      48:	00001c17 	andeq	r1, r0, r7, lsl ip
}
      4c:	00001c17 	andeq	r1, r0, r7, lsl ip
      50:	000005a5 	andeq	r0, r0, r5, lsr #11
      54:	000008a5 	andeq	r0, r0, r5, lsr #17
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	00001c17 	andeq	r1, r0, r7, lsl ip
	    pbutton++) {
      5c:	00001c17 	andeq	r1, r0, r7, lsl ip
      60:	00001c17 	andeq	r1, r0, r7, lsl ip
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000025dd 	ldrdeq	r2, [r0], -sp
      68:	00001c17 	andeq	r1, r0, r7, lsl ip
      6c:	00001c17 	andeq	r1, r0, r7, lsl ip
      70:	00001c17 	andeq	r1, r0, r7, lsl ip
      74:	00001c17 	andeq	r1, r0, r7, lsl ip
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	00001c17 	andeq	r1, r0, r7, lsl ip
      7c:	00001c17 	andeq	r1, r0, r7, lsl ip
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	00001c17 	andeq	r1, r0, r7, lsl ip
      84:	00001c17 	andeq	r1, r0, r7, lsl ip
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	00001c17 	andeq	r1, r0, r7, lsl ip
      8c:	00001c17 	andeq	r1, r0, r7, lsl ip
      90:	00001c17 	andeq	r1, r0, r7, lsl ip
      94:	00001c17 	andeq	r1, r0, r7, lsl ip
      98:	00001c17 	andeq	r1, r0, r7, lsl ip
		goto Done;

	if (baction == NULL)
      9c:	00001c17 	andeq	r1, r0, r7, lsl ip
      a0:	00001c17 	andeq	r1, r0, r7, lsl ip
		goto Term;

	(*baction) (pbutton);
      a4:	00001c17 	andeq	r1, r0, r7, lsl ip

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	00001c17 	andeq	r1, r0, r7, lsl ip
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	00001c17 	andeq	r1, r0, r7, lsl ip
      b0:	00001c17 	andeq	r1, r0, r7, lsl ip
endthread
      b4:	00001c17 	andeq	r1, r0, r7, lsl ip
      b8:	00001c17 	andeq	r1, r0, r7, lsl ip
      bc:	00001c17 	andeq	r1, r0, r7, lsl ip
      c0:	00001c17 	andeq	r1, r0, r7, lsl ip
      c4:	00001c17 	andeq	r1, r0, r7, lsl ip

000000c8 <transmitter>:

int sfd = -1;
/**
 * State machine for handling transmitting messages
*/
fsm transmitter (message * messagePtr) {
      c8:	b538      	push	{r3, r4, r5, lr}
      ca:	4604      	mov	r4, r0
      cc:	b128      	cbz	r0, da <transmitter+0x12>
      ce:	2801      	cmp	r0, #1
      d0:	d019      	beq.n	106 <_Min_Stack_Size+0x6>
        tcv_endp (spkt);

    state Confirm_Transmission:
        ser_outf(Transmit_Message, "Message Sent\n\r");
        finish;
}
      d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d6:	f000 bfa3 	b.w	1020 <__pi_badstate>
fsm transmitter (message * messagePtr) {
      da:	4b0f      	ldr	r3, [pc, #60]	; (118 <_Min_Stack_Size+0x18>)
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	490f      	ldr	r1, [pc, #60]	; (11c <_Min_Stack_Size+0x1c>)
fsm transmitter (message * messagePtr) {
      de:	681b      	ldr	r3, [r3, #0]
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      e0:	2222      	movs	r2, #34	; 0x22
fsm transmitter (message * messagePtr) {
      e2:	689d      	ldr	r5, [r3, #8]
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      e4:	6809      	ldr	r1, [r1, #0]
      e6:	4603      	mov	r3, r0
      e8:	f001 fbec 	bl	18c4 <tcv_wnps>
        spkt [0] = 0;
      ec:	8004      	strh	r4, [r0, #0]
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      ee:	882b      	ldrh	r3, [r5, #0]
      f0:	7083      	strb	r3, [r0, #2]
        *p = messagePtr->messageType; p++; // insert message type
      f2:	78ab      	ldrb	r3, [r5, #2]
      f4:	7103      	strb	r3, [r0, #4]
        *p = messagePtr->requestNumber; p++; // insert request number
      f6:	78eb      	ldrb	r3, [r5, #3]
      f8:	7143      	strb	r3, [r0, #5]
        *p = messagePtr->senderId; p++; // insert sender ID
      fa:	792b      	ldrb	r3, [r5, #4]
      fc:	7183      	strb	r3, [r0, #6]
        *p = messagePtr->destinationId; p++; // insert receiver ID
      fe:	796b      	ldrb	r3, [r5, #5]
     100:	71c3      	strb	r3, [r0, #7]
        tcv_endp (spkt);
     102:	f001 fb35 	bl	1770 <tcv_endp>
        ser_outf(Transmit_Message, "Message Sent\n\r");
     106:	2000      	movs	r0, #0
     108:	4905      	ldr	r1, [pc, #20]	; (120 <_Min_Stack_Size+0x20>)
     10a:	f001 fe95 	bl	1e38 <ser_outf>
}
     10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        finish;
     112:	2000      	movs	r0, #0
     114:	f001 b94e 	b.w	13b4 <kill>
     118:	20000b6c 	andcs	r0, r0, ip, ror #22
     11c:	20000000 	andcs	r0, r0, r0
     120:	000041b0 			; <UNDEFINED> instruction: 0x000041b0

00000124 <randomNumber>:
 * Generates a random number
 * 
 *  Return:
 *      returns a random 1 byte number
*/
char randomNumber() {
     124:	b507      	push	{r0, r1, r2, lr}
   time_t t;
   
   /* Intializes random number generator */
   srand((unsigned) time(&t));
     126:	4668      	mov	r0, sp
     128:	f003 ffde 	bl	40e8 <time>
     12c:	f003 ffb6 	bl	409c <srand>

   return (char)rand();
     130:	f003 ffbe 	bl	40b0 <rand>
}
     134:	b2c0      	uxtb	r0, r0
     136:	b003      	add	sp, #12
     138:	f85d fb04 	ldr.w	pc, [sp], #4

0000013c <root>:

fsm root {
     13c:	b530      	push	{r4, r5, lr}
     13e:	b085      	sub	sp, #20
     140:	2812      	cmp	r0, #18
     142:	f200 812e 	bhi.w	3a2 <root+0x266>
     146:	e8df f010 	tbh	[pc, r0, lsl #1]
     14a:	003c0013 	eorseq	r0, ip, r3, lsl r0
     14e:	0051004d 	subseq	r0, r1, sp, asr #32
     152:	00760072 	rsbseq	r0, r6, r2, ror r0
     156:	0082007e 	addeq	r0, r2, lr, ror r0
     15a:	009a0092 	umullseq	r0, sl, r2, r0
     15e:	00ae00a1 	adceq	r0, lr, r1, lsr #1
     162:	00cd00c3 	sbceq	r0, sp, r3, asr #1
     166:	00d800d4 	ldrsbeq	r0, [r8], #4
     16a:	00e900e5 	rsceq	r0, r9, r5, ror #1
     16e:	240000fa 	strcs	r0, [r0], #-250	; 0xffffff06
"Selection: ";

    char receiverId;

    state Initialize:
        recordCount = 0;
     172:	4b8e      	ldr	r3, [pc, #568]	; (3ac <root+0x270>)

        nodeId = 1;
     174:	4a8e      	ldr	r2, [pc, #568]	; (3b0 <root+0x274>)
        recordCount = 0;
     176:	601c      	str	r4, [r3, #0]
        nodeId = 1;
     178:	2301      	movs	r3, #1
     17a:	7013      	strb	r3, [r2, #0]
        groupId = 1;
     17c:	4a8d      	ldr	r2, [pc, #564]	; (3b4 <root+0x278>)

        messagePtr = (message *) umalloc(sizeof(message));
     17e:	201e      	movs	r0, #30
        groupId = 1;
     180:	8013      	strh	r3, [r2, #0]
        messagePtr = (message *) umalloc(sizeof(message));
     182:	f001 f93f 	bl	1404 <__pi_malloc>
     186:	4b8c      	ldr	r3, [pc, #560]	; (3b8 <root+0x27c>)

        // Set up cc1350 board
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	21fa      	movs	r1, #250	; 0xfa
        messagePtr = (message *) umalloc(sizeof(message));
     18a:	6018      	str	r0, [r3, #0]
        phys_cc1350(0, MAX_PACKET_LENGTH);
     18c:	4620      	mov	r0, r4
     18e:	f002 fa5d 	bl	264c <phys_cc1350>

        // Load null plug in
        tcv_plug(0, &plug_null);
     192:	498a      	ldr	r1, [pc, #552]	; (3bc <root+0x280>)
     194:	4620      	mov	r0, r4
     196:	f001 fb83 	bl	18a0 <tcv_plug>

        // Open the session
        sfd = tcv_open(WNONE, 0, 0);
     19a:	4622      	mov	r2, r4
     19c:	4621      	mov	r1, r4
     19e:	f64f 70ff 	movw	r0, #65535	; 0xffff
     1a2:	f001 fb1d 	bl	17e0 <tcv_open>
     1a6:	4d86      	ldr	r5, [pc, #536]	; (3c0 <root+0x284>)
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	4622      	mov	r2, r4
     1aa:	2104      	movs	r1, #4
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	6028      	str	r0, [r5, #0]
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1ae:	f001 fbfd 	bl	19ac <tcv_control>

        // Ensure session opened properly
		if (sfd < 0) {
     1b2:	682b      	ldr	r3, [r5, #0]
     1b4:	42a3      	cmp	r3, r4
     1b6:	da04      	bge.n	1c2 <root+0x86>
			diag("Cannot open tcv interface");
     1b8:	4882      	ldr	r0, [pc, #520]	; (3c4 <root+0x288>)
     1ba:	f001 f99d 	bl	14f8 <diag>
			halt();
     1be:	f000 fe7d 	bl	ebc <halt>
		}

    state Menu_Header:
        currentProtocol = IDLE;
     1c2:	22ff      	movs	r2, #255	; 0xff
     1c4:	4b80      	ldr	r3, [pc, #512]	; (3c8 <root+0x28c>)
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1c6:	2001      	movs	r0, #1
        currentProtocol = IDLE;
     1c8:	701a      	strb	r2, [r3, #0]
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1ca:	2328      	movs	r3, #40	; 0x28
     1cc:	9301      	str	r3, [sp, #4]
     1ce:	4b77      	ldr	r3, [pc, #476]	; (3ac <root+0x270>)
     1d0:	4a78      	ldr	r2, [pc, #480]	; (3b4 <root+0x278>)
     1d2:	681b      	ldr	r3, [r3, #0]
     1d4:	497d      	ldr	r1, [pc, #500]	; (3cc <root+0x290>)
     1d6:	9300      	str	r3, [sp, #0]
     1d8:	4b75      	ldr	r3, [pc, #468]	; (3b0 <root+0x274>)
     1da:	f9b2 2000 	ldrsh.w	r2, [r2]
     1de:	781b      	ldrb	r3, [r3, #0]
     1e0:	f001 fe2a 	bl	1e38 <ser_outf>
    
    state Options:
        ser_outf(Options, menu);
     1e4:	2002      	movs	r0, #2
     1e6:	497a      	ldr	r1, [pc, #488]	; (3d0 <root+0x294>)
     1e8:	f001 fe26 	bl	1e38 <ser_outf>

    state Get_Choice:
        char choice;

        ser_inf(Get_Choice, "%c", &choice);
     1ec:	2003      	movs	r0, #3
     1ee:	4979      	ldr	r1, [pc, #484]	; (3d4 <root+0x298>)
     1f0:	f10d 020f 	add.w	r2, sp, #15
     1f4:	f001 fe4a 	bl	1e8c <ser_inf>

        switch (choice)
     1f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     1fc:	2b53      	cmp	r3, #83	; 0x53
     1fe:	d80f      	bhi.n	220 <root+0xe4>
     200:	2b42      	cmp	r3, #66	; 0x42
     202:	d911      	bls.n	228 <root+0xec>
     204:	3b43      	subs	r3, #67	; 0x43
     206:	2b10      	cmp	r3, #16
     208:	d80e      	bhi.n	228 <root+0xec>
     20a:	e8df f003 	tbb	[pc, r3]
     20e:	bcc8c0be 	stcllt	0, cr12, [r8], {190}	; 0xbe
     212:	0d0d0db6 	stceq	13, cr0, [sp, #-728]	; 0xfffffd28
     216:	ba0d0d0d 	blt	343652 <__ccfg+0x3236aa>
     21a:	c20d0d0d 	andgt	r0, sp, #832	; 0x340
     21e:	3b6300c4 	blcc	18c0536 <__ccfg+0x18a058e>
     222:	b2da      	uxtb	r2, r3
     224:	2a10      	cmp	r2, #16
     226:	d9ee      	bls.n	206 <root+0xca>
            diag("Reset Local Storage");
            break;

        }
        
        proceed Menu_Header;
     228:	2001      	movs	r0, #1
     22a:	f000 ff81 	bl	1130 <proceed>

// - - - - - - - - - - - Set Group ID - - - - - - - - - - - - //
    state Set_Group_ID:
        ser_outf(Set_Group_ID, "New Group ID: ");
     22e:	2004      	movs	r0, #4
     230:	4969      	ldr	r1, [pc, #420]	; (3d8 <root+0x29c>)
     232:	f001 fe01 	bl	1e38 <ser_outf>
    state Get_Group_ID:
        ser_inf(Get_Group_ID, "%d", &groupId);
     236:	2005      	movs	r0, #5
     238:	4a5e      	ldr	r2, [pc, #376]	; (3b4 <root+0x278>)
     23a:	4968      	ldr	r1, [pc, #416]	; (3dc <root+0x2a0>)
     23c:	f001 fe26 	bl	1e8c <ser_inf>

        proceed Menu_Header;
     240:	2001      	movs	r0, #1
     242:	f000 ff75 	bl	1130 <proceed>

// - - - - - - - - - - - Set Node ID - - - - - - - - - - - - //    
    state Set_Node_ID:
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     246:	2006      	movs	r0, #6
     248:	4965      	ldr	r1, [pc, #404]	; (3e0 <root+0x2a4>)
     24a:	f001 fdf5 	bl	1e38 <ser_outf>
    
    state Get_Node_ID:
        ser_inf(Get_Node_ID, "%d", &nodeId);
     24e:	4c58      	ldr	r4, [pc, #352]	; (3b0 <root+0x274>)
     250:	2007      	movs	r0, #7
     252:	4622      	mov	r2, r4
     254:	4961      	ldr	r1, [pc, #388]	; (3dc <root+0x2a0>)
     256:	f001 fe19 	bl	1e8c <ser_inf>
    if (node < 1 || node > 25) {
     25a:	7823      	ldrb	r3, [r4, #0]
     25c:	3b01      	subs	r3, #1
     25e:	2b18      	cmp	r3, #24
     260:	d902      	bls.n	268 <root+0x12c>

        if (!isValidNodeId(nodeId)) {
            proceed Set_Node_ID;
     262:	2006      	movs	r0, #6
     264:	f000 ff64 	bl	1130 <proceed>
        }

        proceed Menu_Header;
     268:	2001      	movs	r0, #1
     26a:	f000 ff61 	bl	1130 <proceed>

// - - - - - - - - - - - - Find Neighbour - - - - - - - - - - - - - //
    state Find_Neighbours:
        currentProtocol = DISCOVERY_REQUEST;
     26e:	2300      	movs	r3, #0
     270:	4a55      	ldr	r2, [pc, #340]	; (3c8 <root+0x28c>)
        receiverId = 0;
        proceed Transmit_Message;
     272:	2012      	movs	r0, #18
        currentProtocol = DISCOVERY_REQUEST;
     274:	7013      	strb	r3, [r2, #0]
        receiverId = 0;
     276:	4a5b      	ldr	r2, [pc, #364]	; (3e4 <root+0x2a8>)
     278:	7013      	strb	r3, [r2, #0]
        proceed Transmit_Message;
     27a:	f000 ff59 	bl	1130 <proceed>

// - - - - - - - - - - - - Create Recrods - - - - - - - - - - - - - //    
    state Create_Record:
        currentProtocol = CREATE_RECORD;
     27e:	2202      	movs	r2, #2
     280:	4b51      	ldr	r3, [pc, #324]	; (3c8 <root+0x28c>)
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     282:	2009      	movs	r0, #9
     284:	4958      	ldr	r1, [pc, #352]	; (3e8 <root+0x2ac>)
        currentProtocol = CREATE_RECORD;
     286:	701a      	strb	r2, [r3, #0]
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     288:	f001 fdd6 	bl	1e38 <ser_outf>
    
    state Get_Receiver_Node:
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	4c55      	ldr	r4, [pc, #340]	; (3e4 <root+0x2a8>)
     28e:	200a      	movs	r0, #10
     290:	4622      	mov	r2, r4
     292:	4952      	ldr	r1, [pc, #328]	; (3dc <root+0x2a0>)
     294:	f001 fdfa 	bl	1e8c <ser_inf>
    if (node < 1 || node > 25) {
     298:	7823      	ldrb	r3, [r4, #0]
     29a:	3b01      	subs	r3, #1
     29c:	2b18      	cmp	r3, #24
     29e:	d902      	bls.n	2a6 <root+0x16a>

        if(!isValidNodeId(receiverId)) {
            proceed Create_Record;
     2a0:	2009      	movs	r0, #9
     2a2:	f000 ff45 	bl	1130 <proceed>
        }

    state Get_Message:
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a6:	4c44      	ldr	r4, [pc, #272]	; (3b8 <root+0x27c>)
     2a8:	2214      	movs	r2, #20
     2aa:	6821      	ldr	r1, [r4, #0]
     2ac:	200b      	movs	r0, #11
     2ae:	3106      	adds	r1, #6
     2b0:	f001 fd86 	bl	1dc0 <ser_in>

        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	6820      	ldr	r0, [r4, #0]
     2b6:	3006      	adds	r0, #6
     2b8:	f000 ffb8 	bl	122c <__pi_strlen>
     2bc:	2813      	cmp	r0, #19
            // ensures that the last byte in the payload message is a null character
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2be:	bfc4      	itt	gt
     2c0:	2230      	movgt	r2, #48	; 0x30
     2c2:	6823      	ldrgt	r3, [r4, #0]
        }

        proceed Transmit_Message;
     2c4:	f04f 0012 	mov.w	r0, #18
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	bfc8      	it	gt
     2ca:	765a      	strbgt	r2, [r3, #25]
        proceed Transmit_Message;
     2cc:	f000 ff30 	bl	1130 <proceed>

// - - - - - - - - Deleting and Retreiving Records - - - - - - - - //

    state Delete_Record:
        currentProtocol = DELETE_RECORD;
     2d0:	2203      	movs	r2, #3
     2d2:	4b3d      	ldr	r3, [pc, #244]	; (3c8 <root+0x28c>)
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	200d      	movs	r0, #13
     2d6:	4945      	ldr	r1, [pc, #276]	; (3ec <root+0x2b0>)
        currentProtocol = DELETE_RECORD;
     2d8:	701a      	strb	r2, [r3, #0]
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2da:	f001 fdad 	bl	1e38 <ser_outf>
        proceed Get_Receiving_Node;
     2de:	200f      	movs	r0, #15
     2e0:	f000 ff26 	bl	1130 <proceed>

    state Retrieve_Record:
        currentProtocol = RETRIEVE_RECORD;
     2e4:	2204      	movs	r2, #4
     2e6:	4b38      	ldr	r3, [pc, #224]	; (3c8 <root+0x28c>)
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	200d      	movs	r0, #13
     2ea:	4941      	ldr	r1, [pc, #260]	; (3f0 <root+0x2b4>)
        currentProtocol = RETRIEVE_RECORD;
     2ec:	701a      	strb	r2, [r3, #0]
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2ee:	f001 fda3 	bl	1e38 <ser_outf>

    state Prompt_Recieving_Node:
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f2:	200e      	movs	r0, #14
     2f4:	493f      	ldr	r1, [pc, #252]	; (3f4 <root+0x2b8>)
     2f6:	f001 fd9f 	bl	1e38 <ser_outf>
    
    state Get_Receiving_Node:
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fa:	4c3a      	ldr	r4, [pc, #232]	; (3e4 <root+0x2a8>)
     2fc:	200f      	movs	r0, #15
     2fe:	4622      	mov	r2, r4
     300:	4936      	ldr	r1, [pc, #216]	; (3dc <root+0x2a0>)
     302:	f001 fdc3 	bl	1e8c <ser_inf>
    if (node < 1 || node > 25) {
     306:	7823      	ldrb	r3, [r4, #0]
     308:	3b01      	subs	r3, #1
     30a:	2b18      	cmp	r3, #24
     30c:	d902      	bls.n	314 <root+0x1d8>

        if(!isValidNodeId(receiverId)) {
            proceed Prompt_Recieving_Node;
     30e:	200e      	movs	r0, #14
     310:	f000 ff0e 	bl	1130 <proceed>
        }
    
    state Prompt_Record_Index:
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	2010      	movs	r0, #16
     316:	4938      	ldr	r1, [pc, #224]	; (3f8 <root+0x2bc>)
     318:	f001 fd8e 	bl	1e38 <ser_outf>
    
    state Get_Record_Index:
        char desiredRecordIndex = -1;
     31c:	23ff      	movs	r3, #255	; 0xff
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     31e:	f10d 020f 	add.w	r2, sp, #15
     322:	2011      	movs	r0, #17
     324:	492d      	ldr	r1, [pc, #180]	; (3dc <root+0x2a0>)
        char desiredRecordIndex = -1;
     326:	f88d 300f 	strb.w	r3, [sp, #15]
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32a:	f001 fdaf 	bl	1e8c <ser_inf>
        messagePtr->recordIndex = desiredRecordIndex;
     32e:	4b22      	ldr	r3, [pc, #136]	; (3b8 <root+0x27c>)
     330:	f89d 200f 	ldrb.w	r2, [sp, #15]
     334:	681b      	ldr	r3, [r3, #0]

        proceed Transmit_Message;
     336:	2012      	movs	r0, #18
        messagePtr->recordIndex = desiredRecordIndex;
     338:	769a      	strb	r2, [r3, #26]
        proceed Transmit_Message;
     33a:	f000 fef9 	bl	1130 <proceed>

// - - - - - - Assemble Common Parts and Send Message - - - - - - - //
    state Transmit_Message:
        messagePtr -> senderGroupId = groupId;
     33e:	4c1e      	ldr	r4, [pc, #120]	; (3b8 <root+0x27c>)
     340:	4a1c      	ldr	r2, [pc, #112]	; (3b4 <root+0x278>)
     342:	6823      	ldr	r3, [r4, #0]
     344:	f9b2 2000 	ldrsh.w	r2, [r2]
     348:	801a      	strh	r2, [r3, #0]
        messagePtr -> messageType = currentProtocol;
     34a:	4a1f      	ldr	r2, [pc, #124]	; (3c8 <root+0x28c>)
     34c:	6823      	ldr	r3, [r4, #0]
     34e:	7812      	ldrb	r2, [r2, #0]
     350:	709a      	strb	r2, [r3, #2]
        messagePtr -> requestNumber = randomNumber();
     352:	6825      	ldr	r5, [r4, #0]
     354:	f7ff fee6 	bl	124 <randomNumber>
        messagePtr -> senderId = nodeId;
     358:	4b15      	ldr	r3, [pc, #84]	; (3b0 <root+0x274>)
        messagePtr -> requestNumber = randomNumber();
     35a:	70e8      	strb	r0, [r5, #3]
        messagePtr -> senderId = nodeId;
     35c:	6821      	ldr	r1, [r4, #0]
     35e:	781b      	ldrb	r3, [r3, #0]
        messagePtr -> destinationId = receiverId;

        call transmitter(messagePtr, Menu_Header);
     360:	4826      	ldr	r0, [pc, #152]	; (3fc <root+0x2c0>)
        messagePtr -> senderId = nodeId;
     362:	710b      	strb	r3, [r1, #4]
        messagePtr -> destinationId = receiverId;
     364:	4b1f      	ldr	r3, [pc, #124]	; (3e4 <root+0x2a8>)
     366:	781b      	ldrb	r3, [r3, #0]
     368:	714b      	strb	r3, [r1, #5]
        call transmitter(messagePtr, Menu_Header);
     36a:	f001 f89f 	bl	14ac <__pi_fork>
     36e:	2101      	movs	r1, #1
     370:	f000 ff1c 	bl	11ac <__pi_join>
     374:	b1b8      	cbz	r0, 3a6 <root+0x26a>
     376:	f000 fc75 	bl	c64 <__pi_release>
            proceed Set_Group_ID;
     37a:	2004      	movs	r0, #4
            proceed Set_Node_ID;
     37c:	f000 fed8 	bl	1130 <proceed>
            break;
     380:	e752      	b.n	228 <root+0xec>
            proceed Set_Node_ID;
     382:	2006      	movs	r0, #6
     384:	e7fa      	b.n	37c <root+0x240>
            proceed Find_Neighbours;
     386:	2008      	movs	r0, #8
     388:	e7f8      	b.n	37c <root+0x240>
            proceed Create_Record;
     38a:	2009      	movs	r0, #9
     38c:	e7f6      	b.n	37c <root+0x240>
            proceed Delete_Record;
     38e:	200c      	movs	r0, #12
     390:	e7f4      	b.n	37c <root+0x240>
            proceed Retrieve_Record;
     392:	200d      	movs	r0, #13
     394:	e7f2      	b.n	37c <root+0x240>
            diag("Show Local Records");
     396:	481a      	ldr	r0, [pc, #104]	; (400 <root+0x2c4>)
            diag("Reset Local Storage");
     398:	f001 f8ae 	bl	14f8 <diag>
            break;
     39c:	e744      	b.n	228 <root+0xec>
            diag("Reset Local Storage");
     39e:	4819      	ldr	r0, [pc, #100]	; (404 <root+0x2c8>)
     3a0:	e7fa      	b.n	398 <root+0x25c>
     3a2:	f000 fe3d 	bl	1020 <__pi_badstate>
     3a6:	b005      	add	sp, #20
     3a8:	bd30      	pop	{r4, r5, pc}
     3aa:	bf00      	nop
     3ac:	20000b38 	andcs	r0, r0, r8, lsr fp
     3b0:	20000628 	andcs	r0, r0, r8, lsr #12
     3b4:	20000b36 	andcs	r0, r0, r6, lsr fp
     3b8:	20000b30 	andcs	r0, r0, r0, lsr fp
     3bc:	00004f10 	andeq	r4, r0, r0, lsl pc
     3c0:	20000000 	andcs	r0, r0, r0
     3c4:	000041bf 			; <UNDEFINED> instruction: 0x000041bf
     3c8:	20000b34 	andcs	r0, r0, r4, lsr fp
     3cc:	000041d9 	ldrdeq	r4, [r0], -r9
     3d0:	00004201 	andeq	r4, r0, r1, lsl #4
     3d4:	000042c6 	andeq	r4, r0, r6, asr #5
     3d8:	000042f0 	strdeq	r4, [r0], -r0
     3dc:	00004597 	muleq	r0, r7, r5
     3e0:	000042ff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
     3e4:	20000540 	andcs	r0, r0, r0, asr #10
     3e8:	00004313 	andeq	r4, r0, r3, lsl r3
     3ec:	0000432c 	andeq	r4, r0, ip, lsr #6
     3f0:	0000434c 	andeq	r4, r0, ip, asr #6
     3f4:	0000436e 	andeq	r4, r0, lr, ror #6
     3f8:	00004388 	andeq	r4, r0, r8, lsl #7
     3fc:	000000c9 	andeq	r0, r0, r9, asr #1
     400:	000042c9 	andeq	r4, r0, r9, asr #5
     404:	000042dc 	ldrdeq	r4, [r0], -ip

00000408 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     408:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     40a:	4801      	ldr	r0, [pc, #4]	; (410 <devinit_uart+0x8>)
     40c:	f000 bf26 	b.w	125c <adddevfunc>
     410:	00000795 	muleq	r0, r5, r7

00000414 <udelay>:
void udelay (volatile word n) {
     414:	b082      	sub	sp, #8
     416:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     41a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     41e:	b29b      	uxth	r3, r3
     420:	b90b      	cbnz	r3, 426 <udelay+0x12>
}
     422:	b002      	add	sp, #8
     424:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     426:	2304      	movs	r3, #4
	while (n--);
     428:	461a      	mov	r2, r3
     42a:	3b01      	subs	r3, #1
     42c:	b29b      	uxth	r3, r3
     42e:	2a00      	cmp	r2, #0
     430:	d1fa      	bne.n	428 <udelay+0x14>
		n--;
     432:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     436:	3b01      	subs	r3, #1
     438:	b29b      	uxth	r3, r3
     43a:	f8ad 3006 	strh.w	r3, [sp, #6]
     43e:	e7ec      	b.n	41a <udelay+0x6>

00000440 <mdelay>:
void mdelay (volatile word n) {
     440:	b507      	push	{r0, r1, r2, lr}
     442:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     446:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     44a:	b29b      	uxth	r3, r3
     44c:	b913      	cbnz	r3, 454 <mdelay+0x14>
}
     44e:	b003      	add	sp, #12
     450:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     454:	f240 30e7 	movw	r0, #999	; 0x3e7
     458:	f7ff ffdc 	bl	414 <udelay>
		n--;
     45c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     460:	3b01      	subs	r3, #1
     462:	b29b      	uxth	r3, r3
     464:	f8ad 3006 	strh.w	r3, [sp, #6]
     468:	e7ed      	b.n	446 <mdelay+0x6>
	...

0000046c <__pi_ondomain>:
void __pi_ondomain (lword d) {
     46c:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     46e:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     470:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     472:	d505      	bpl.n	480 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     474:	4b0a      	ldr	r3, [pc, #40]	; (4a0 <__pi_ondomain+0x34>)
     476:	78da      	ldrb	r2, [r3, #3]
     478:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     47a:	bf84      	itt	hi
     47c:	2201      	movhi	r2, #1
     47e:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     480:	4d08      	ldr	r5, [pc, #32]	; (4a4 <__pi_ondomain+0x38>)
     482:	4620      	mov	r0, r4
     484:	682b      	ldr	r3, [r5, #0]
     486:	695b      	ldr	r3, [r3, #20]
     488:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48a:	682b      	ldr	r3, [r5, #0]
     48c:	4620      	mov	r0, r4
     48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     490:	4798      	blx	r3
     492:	2801      	cmp	r0, #1
     494:	d1f9      	bne.n	48a <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     496:	4b02      	ldr	r3, [pc, #8]	; (4a0 <__pi_ondomain+0x34>)
     498:	6858      	ldr	r0, [r3, #4]
     49a:	4304      	orrs	r4, r0
     49c:	605c      	str	r4, [r3, #4]
}
     49e:	bd38      	pop	{r3, r4, r5, pc}
     4a0:	20000b50 	andcs	r0, r0, r0, asr fp
     4a4:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

000004a8 <__pi_offdomain>:
void __pi_offdomain (lword d) {
     4a8:	b538      	push	{r3, r4, r5, lr}
	PRCMPowerDomainOff (d);
     4aa:	4d0d      	ldr	r5, [pc, #52]	; (4e0 <__pi_offdomain+0x38>)
void __pi_offdomain (lword d) {
     4ac:	4604      	mov	r4, r0
	PRCMPowerDomainOff (d);
     4ae:	682b      	ldr	r3, [r5, #0]
     4b0:	699b      	ldr	r3, [r3, #24]
     4b2:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	682b      	ldr	r3, [r5, #0]
     4b6:	4620      	mov	r0, r4
     4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     4ba:	4798      	blx	r3
     4bc:	2802      	cmp	r0, #2
     4be:	d1f9      	bne.n	4b4 <__pi_offdomain+0xc>
	if (d & PRCM_DOMAIN_RFCORE) {
     4c0:	f014 0f01 	tst.w	r4, #1
     4c4:	4b07      	ldr	r3, [pc, #28]	; (4e4 <__pi_offdomain+0x3c>)
     4c6:	d006      	beq.n	4d6 <__pi_offdomain+0x2e>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	7899      	ldrb	r1, [r3, #2]
     4ca:	78da      	ldrb	r2, [r3, #3]
     4cc:	4291      	cmp	r1, r2
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4ce:	bf82      	ittt	hi
     4d0:	789a      	ldrbhi	r2, [r3, #2]
     4d2:	b2d2      	uxtbhi	r2, r2
     4d4:	70da      	strbhi	r2, [r3, #3]
	__pi_systat.ondmns &= ~d;
     4d6:	6858      	ldr	r0, [r3, #4]
     4d8:	ea20 0404 	bic.w	r4, r0, r4
     4dc:	605c      	str	r4, [r3, #4]
}
     4de:	bd38      	pop	{r3, r4, r5, pc}
     4e0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     4e4:	20000b50 	andcs	r0, r0, r0, asr fp

000004e8 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     4e8:	460a      	mov	r2, r1
     4ea:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	4601      	mov	r1, r0
     4ee:	480f      	ldr	r0, [pc, #60]	; (52c <__pi_syserror+0x44>)
     4f0:	f001 f802 	bl	14f8 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     4f4:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4f6:	2540      	movs	r5, #64	; 0x40
     4f8:	462f      	mov	r7, r5
     4fa:	4e0d      	ldr	r6, [pc, #52]	; (530 <__pi_syserror+0x48>)
     4fc:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     4fe:	490d      	ldr	r1, [pc, #52]	; (534 <__pi_syserror+0x4c>)
     500:	6037      	str	r7, [r6, #0]
     502:	6034      	str	r4, [r6, #0]
     504:	780b      	ldrb	r3, [r1, #0]
     506:	780b      	ldrb	r3, [r1, #0]
     508:	20c8      	movs	r0, #200	; 0xc8
     50a:	f36f 1307 	bfc	r3, #4, #4
     50e:	700b      	strb	r3, [r1, #0]
     510:	f7ff ff96 	bl	440 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     514:	4b08      	ldr	r3, [pc, #32]	; (538 <__pi_syserror+0x50>)
     516:	20c8      	movs	r0, #200	; 0xc8
     518:	601d      	str	r5, [r3, #0]
     51a:	601c      	str	r4, [r3, #0]
     51c:	780b      	ldrb	r3, [r1, #0]
     51e:	780b      	ldrb	r3, [r1, #0]
     520:	f36f 1307 	bfc	r3, #4, #4
     524:	700b      	strb	r3, [r1, #0]
     526:	f7ff ff8b 	bl	440 <mdelay>
	while (1) {
     52a:	e7e7      	b.n	4fc <__pi_syserror+0x14>
     52c:	00004396 	muleq	r0, r6, r3
     530:	40022090 	mulmi	r2, r0, r0
     534:	20000b50 	andcs	r0, r0, r0, asr fp
     538:	400220a0 	andmi	r2, r2, r0, lsr #1

0000053c <tci_run_delay_timer>:
void tci_run_delay_timer () {
     53c:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     53e:	4b0a      	ldr	r3, [pc, #40]	; (568 <tci_run_delay_timer+0x2c>)
     540:	881c      	ldrh	r4, [r3, #0]
     542:	4b0a      	ldr	r3, [pc, #40]	; (56c <tci_run_delay_timer+0x30>)
     544:	8818      	ldrh	r0, [r3, #0]
     546:	4b0a      	ldr	r3, [pc, #40]	; (570 <tci_run_delay_timer+0x34>)
     548:	1b00      	subs	r0, r0, r4
     54a:	b284      	uxth	r4, r0
     54c:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54e:	f002 fda1 	bl	3094 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     552:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     554:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     556:	4b07      	ldr	r3, [pc, #28]	; (574 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     558:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     55c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	6018      	str	r0, [r3, #0]
	sti_tim;
     562:	4b05      	ldr	r3, [pc, #20]	; (578 <tci_run_delay_timer+0x3c>)
     564:	601a      	str	r2, [r3, #0]
}
     566:	bd10      	pop	{r4, pc}
     568:	20000b4e 	andcs	r0, r0, lr, asr #22
     56c:	20000b4c 	andcs	r0, r0, ip, asr #22
     570:	20000542 	andcs	r0, r0, r2, asr #10
     574:	40092018 	andmi	r2, r9, r8, lsl r0
     578:	43240280 			; <UNDEFINED> instruction: 0x43240280

0000057c <tci_run_auxiliary_timer>:
	cli_aux;
     57c:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     57e:	b510      	push	{r4, lr}
	cli_aux;
     580:	4c06      	ldr	r4, [pc, #24]	; (59c <tci_run_auxiliary_timer+0x20>)
     582:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	f002 fd86 	bl	3094 <NOROM_AONRTCCurrent64BitValueGet>
     588:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     58a:	4b05      	ldr	r3, [pc, #20]	; (5a0 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     58c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     590:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     592:	6018      	str	r0, [r3, #0]
	sti_aux;
     594:	2301      	movs	r3, #1
     596:	6023      	str	r3, [r4, #0]
}
     598:	bd10      	pop	{r4, pc}
     59a:	bf00      	nop
     59c:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     5a0:	40092020 	andmi	r2, r9, r0, lsr #32

000005a4 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     5a4:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a6:	4b3b      	ldr	r3, [pc, #236]	; (694 <AONRTCIntHandler+0xf0>)
     5a8:	6818      	ldr	r0, [r3, #0]
     5aa:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     5ae:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5b0:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     5b2:	d542      	bpl.n	63a <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     5b4:	4b38      	ldr	r3, [pc, #224]	; (698 <AONRTCIntHandler+0xf4>)
     5b6:	6819      	ldr	r1, [r3, #0]
     5b8:	2900      	cmp	r1, #0
     5ba:	d053      	beq.n	664 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     5bc:	880a      	ldrh	r2, [r1, #0]
     5be:	2a00      	cmp	r2, #0
     5c0:	d04e      	beq.n	660 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     5c2:	3a01      	subs	r2, #1
     5c4:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     5c6:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     5c8:	685c      	ldr	r4, [r3, #4]
     5ca:	b194      	cbz	r4, 5f2 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     5cc:	8821      	ldrh	r1, [r4, #0]
     5ce:	b111      	cbz	r1, 5d6 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     5d0:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     5d2:	3901      	subs	r1, #1
     5d4:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     5d6:	689c      	ldr	r4, [r3, #8]
     5d8:	b15c      	cbz	r4, 5f2 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     5da:	8821      	ldrh	r1, [r4, #0]
     5dc:	b111      	cbz	r1, 5e4 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     5de:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     5e0:	3901      	subs	r1, #1
     5e2:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     5e4:	68d9      	ldr	r1, [r3, #12]
     5e6:	b121      	cbz	r1, 5f2 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     5e8:	880b      	ldrh	r3, [r1, #0]
     5ea:	b113      	cbz	r3, 5f2 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     5ec:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     5ee:	3b01      	subs	r3, #1
     5f0:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     5f2:	4b2a      	ldr	r3, [pc, #168]	; (69c <AONRTCIntHandler+0xf8>)
     5f4:	7819      	ldrb	r1, [r3, #0]
     5f6:	0909      	lsrs	r1, r1, #4
     5f8:	d047      	beq.n	68a <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     5fa:	7859      	ldrb	r1, [r3, #1]
     5fc:	1c4a      	adds	r2, r1, #1
     5fe:	b2d2      	uxtb	r2, r2
     600:	705a      	strb	r2, [r3, #1]
     602:	b9d1      	cbnz	r1, 63a <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     604:	781a      	ldrb	r2, [r3, #0]
     606:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     60a:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     60c:	d02c      	beq.n	668 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     60e:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	bf42      	ittt	mi
     612:	2140      	movmi	r1, #64	; 0x40
     614:	4a22      	ldrmi	r2, [pc, #136]	; (6a0 <AONRTCIntHandler+0xfc>)
     616:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     618:	781a      	ldrb	r2, [r3, #0]
     61a:	0692      	lsls	r2, r2, #26
     61c:	bf42      	ittt	mi
     61e:	2180      	movmi	r1, #128	; 0x80
     620:	4a1f      	ldrmi	r2, [pc, #124]	; (6a0 <AONRTCIntHandler+0xfc>)
     622:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     624:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     626:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     628:	781a      	ldrb	r2, [r3, #0]
     62a:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     62e:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     630:	781a      	ldrb	r2, [r3, #0]
     632:	0752      	lsls	r2, r2, #29
     634:	d501      	bpl.n	63a <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     636:	22c8      	movs	r2, #200	; 0xc8
     638:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     63a:	07c3      	lsls	r3, r0, #31
     63c:	d50f      	bpl.n	65e <AONRTCIntHandler+0xba>
		cli_tim;
     63e:	2100      	movs	r1, #0
     640:	4b18      	ldr	r3, [pc, #96]	; (6a4 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     642:	4a19      	ldr	r2, [pc, #100]	; (6a8 <AONRTCIntHandler+0x104>)
     644:	4819      	ldr	r0, [pc, #100]	; (6ac <AONRTCIntHandler+0x108>)
		cli_tim;
     646:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     648:	8803      	ldrh	r3, [r0, #0]
     64a:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     64c:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     64e:	4423      	add	r3, r4
		RISE_N_SHINE;
     650:	4a12      	ldr	r2, [pc, #72]	; (69c <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     652:	b29b      	uxth	r3, r3
     654:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     656:	7813      	ldrb	r3, [r2, #0]
     658:	f043 0302 	orr.w	r3, r3, #2
     65c:	7013      	strb	r3, [r2, #0]
}
     65e:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     660:	2201      	movs	r2, #1
     662:	e7b1      	b.n	5c8 <AONRTCIntHandler+0x24>
     664:	2201      	movs	r2, #1
     666:	e7c4      	b.n	5f2 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     668:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66a:	bf42      	ittt	mi
     66c:	2140      	movmi	r1, #64	; 0x40
     66e:	4a10      	ldrmi	r2, [pc, #64]	; (6b0 <AONRTCIntHandler+0x10c>)
     670:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     672:	781a      	ldrb	r2, [r3, #0]
     674:	0691      	lsls	r1, r2, #26
     676:	bf42      	ittt	mi
     678:	2180      	movmi	r1, #128	; 0x80
     67a:	4a0d      	ldrmi	r2, [pc, #52]	; (6b0 <AONRTCIntHandler+0x10c>)
     67c:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     67e:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     680:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     682:	781a      	ldrb	r2, [r3, #0]
     684:	f042 0208 	orr.w	r2, r2, #8
     688:	e7d1      	b.n	62e <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     68a:	2a00      	cmp	r2, #0
     68c:	d0d5      	beq.n	63a <AONRTCIntHandler+0x96>
			cli_aux;
     68e:	4b09      	ldr	r3, [pc, #36]	; (6b4 <AONRTCIntHandler+0x110>)
     690:	6019      	str	r1, [r3, #0]
     692:	e7d2      	b.n	63a <AONRTCIntHandler+0x96>
     694:	40092004 	andmi	r2, r9, r4
     698:	20000b5c 	andcs	r0, r0, ip, asr fp
     69c:	20000b50 	andcs	r0, r0, r0, asr fp
     6a0:	40022090 	mulmi	r2, r0, r0
     6a4:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6a8:	20000542 	andcs	r0, r0, r2, asr #10
     6ac:	20000b58 	andcs	r0, r0, r8, asr fp
     6b0:	400220a0 	andmi	r2, r2, r0, lsr #1
     6b4:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

000006b8 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     6ba:	2600      	movs	r6, #0
     6bc:	4b0e      	ldr	r3, [pc, #56]	; (6f8 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     6be:	4f0f      	ldr	r7, [pc, #60]	; (6fc <tci_update_delay_ticks+0x44>)
	cli_tim;
     6c0:	601e      	str	r6, [r3, #0]
	if (setdel) {
     6c2:	883d      	ldrh	r5, [r7, #0]
     6c4:	b19d      	cbz	r5, 6ee <tci_update_delay_ticks+0x36>
		if (force) {
     6c6:	b1a0      	cbz	r0, 6f2 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	4b0d      	ldr	r3, [pc, #52]	; (700 <tci_update_delay_ticks+0x48>)
     6ca:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	f002 fce2 	bl	3094 <NOROM_AONRTCCurrent64BitValueGet>
     6d0:	0d80      	lsrs	r0, r0, #22
     6d2:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d6:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     6da:	b280      	uxth	r0, r0
     6dc:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6de:	1b2c      	subs	r4, r5, r4
	return NO;
     6e0:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e2:	4b08      	ldr	r3, [pc, #32]	; (704 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     6e4:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e6:	881a      	ldrh	r2, [r3, #0]
     6e8:	4414      	add	r4, r2
     6ea:	b2a4      	uxth	r4, r4
     6ec:	801c      	strh	r4, [r3, #0]
}
     6ee:	4628      	mov	r0, r5
     6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     6f2:	2501      	movs	r5, #1
     6f4:	601d      	str	r5, [r3, #0]
		return YES;
     6f6:	e7fa      	b.n	6ee <tci_update_delay_ticks+0x36>
     6f8:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6fc:	20000542 	andcs	r0, r0, r2, asr #10
     700:	40092018 	andmi	r2, r9, r8, lsl r0
     704:	20000b58 	andcs	r0, r0, r8, asr fp

00000708 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     70a:	4e0f      	ldr	r6, [pc, #60]	; (748 <__pi_uart_setrate+0x40>)
     70c:	4d0f      	ldr	r5, [pc, #60]	; (74c <__pi_uart_setrate+0x44>)
     70e:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     712:	68db      	ldr	r3, [r3, #12]
     714:	4628      	mov	r0, r5
     716:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     718:	2264      	movs	r2, #100	; 0x64
     71a:	6833      	ldr	r3, [r6, #0]
     71c:	4628      	mov	r0, r5
     71e:	4362      	muls	r2, r4
     720:	685e      	ldr	r6, [r3, #4]
     722:	490b      	ldr	r1, [pc, #44]	; (750 <__pi_uart_setrate+0x48>)
     724:	2360      	movs	r3, #96	; 0x60
     726:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	4a0a      	ldr	r2, [pc, #40]	; (754 <__pi_uart_setrate+0x4c>)
}
     72a:	2001      	movs	r0, #1
     72c:	6813      	ldr	r3, [r2, #0]
     72e:	f043 0310 	orr.w	r3, r3, #16
     732:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	6853      	ldr	r3, [r2, #4]
     736:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     73a:	f043 0301 	orr.w	r3, r3, #1
     73e:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     740:	4b05      	ldr	r3, [pc, #20]	; (758 <__pi_uart_setrate+0x50>)
     742:	801c      	strh	r4, [r3, #0]
}
     744:	bd70      	pop	{r4, r5, r6, pc}
     746:	bf00      	nop
     748:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     74c:	40001000 	andmi	r1, r0, r0
     750:	02dc6c00 	sbcseq	r6, ip, #0, 24
     754:	4000102c 	andmi	r1, r0, ip, lsr #32
     758:	20000544 	andcs	r0, r0, r4, asr #10

0000075c <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	4a08      	ldr	r2, [pc, #32]	; (780 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     75e:	4909      	ldr	r1, [pc, #36]	; (784 <reinit_uart+0x28>)
     760:	6813      	ldr	r3, [r2, #0]
     762:	f043 0310 	orr.w	r3, r3, #16
     766:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	2212      	movs	r2, #18
     76a:	4b07      	ldr	r3, [pc, #28]	; (788 <reinit_uart+0x2c>)
     76c:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     76e:	4a07      	ldr	r2, [pc, #28]	; (78c <reinit_uart+0x30>)
     770:	6813      	ldr	r3, [r2, #0]
     772:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     776:	6013      	str	r3, [r2, #0]
     778:	4b05      	ldr	r3, [pc, #20]	; (790 <reinit_uart+0x34>)
     77a:	8818      	ldrh	r0, [r3, #0]
     77c:	f7ff bfc4 	b.w	708 <__pi_uart_setrate>
     780:	4000102c 	andmi	r1, r0, ip, lsr #32
     784:	20000b3c 	andcs	r0, r0, ip, lsr fp
     788:	40001034 	andmi	r1, r0, r4, lsr r0
     78c:	40001030 	andmi	r1, r0, r0, lsr r0
     790:	20000544 	andcs	r0, r0, r4, asr #10

00000794 <ioreq_uart_a>:
	switch (operation) {
     794:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     796:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     79a:	460d      	mov	r5, r1
     79c:	4614      	mov	r4, r2
     79e:	2803      	cmp	r0, #3
     7a0:	d86e      	bhi.n	880 <ioreq_uart_a+0xec>
     7a2:	e8df f000 	tbb	[pc, r0]
     7a6:	5a471253 	bpl	11c50fa <__ccfg+0x11a5152>
				*buf++ = uart_a_read;
     7aa:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     7ae:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     7b0:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     7b4:	b11e      	cbz	r6, 7be <ioreq_uart_a+0x2a>
     7b6:	f8d8 3000 	ldr.w	r3, [r8]
     7ba:	06d8      	lsls	r0, r3, #27
     7bc:	d5f5      	bpl.n	7aa <ioreq_uart_a+0x16>
			if (len != operation) {
     7be:	42a6      	cmp	r6, r4
     7c0:	d00a      	beq.n	7d8 <ioreq_uart_a+0x44>
				return operation - len;
     7c2:	1ba4      	subs	r4, r4, r6
}
     7c4:	4620      	mov	r0, r4
     7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     7ca:	4616      	mov	r6, r2
			uart_a_disable_int;
     7cc:	4f2e      	ldr	r7, [pc, #184]	; (888 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     7ce:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 89c <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     7d2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8a0 <ioreq_uart_a+0x10c>
     7d6:	e7ed      	b.n	7b4 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     7d8:	683b      	ldr	r3, [r7, #0]
     7da:	2015      	movs	r0, #21
     7dc:	695b      	ldr	r3, [r3, #20]
     7de:	4798      	blx	r3
			if (uart_a_char_available) {
     7e0:	f8d8 3000 	ldr.w	r3, [r8]
     7e4:	06d9      	lsls	r1, r3, #27
     7e6:	d404      	bmi.n	7f2 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     7e8:	683b      	ldr	r3, [r7, #0]
     7ea:	2015      	movs	r0, #21
     7ec:	691b      	ldr	r3, [r3, #16]
     7ee:	4798      	blx	r3
				goto Redo_rx;
     7f0:	e7e0      	b.n	7b4 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f2:	4a26      	ldr	r2, [pc, #152]	; (88c <ioreq_uart_a+0xf8>)
     7f4:	7993      	ldrb	r3, [r2, #6]
     7f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     7fa:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7fe:	7193      	strb	r3, [r2, #6]
			return -2;
     800:	e7e0      	b.n	7c4 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     802:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     806:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     808:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     80c:	b11e      	cbz	r6, 816 <ioreq_uart_a+0x82>
     80e:	f8d8 3000 	ldr.w	r3, [r8]
     812:	069a      	lsls	r2, r3, #26
     814:	d5f5      	bpl.n	802 <ioreq_uart_a+0x6e>
			if (len != operation) {
     816:	42a6      	cmp	r6, r4
     818:	d1d3      	bne.n	7c2 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     81a:	683b      	ldr	r3, [r7, #0]
     81c:	2015      	movs	r0, #21
     81e:	695b      	ldr	r3, [r3, #20]
     820:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     822:	f8d8 3000 	ldr.w	r3, [r8]
     826:	069b      	lsls	r3, r3, #26
     828:	d40b      	bmi.n	842 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     82a:	683b      	ldr	r3, [r7, #0]
     82c:	2015      	movs	r0, #21
     82e:	691b      	ldr	r3, [r3, #16]
     830:	4798      	blx	r3
				goto Redo_tx;
     832:	e7eb      	b.n	80c <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     834:	4616      	mov	r6, r2
			uart_a_disable_int;
     836:	4f14      	ldr	r7, [pc, #80]	; (888 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     838:	f8df 8060 	ldr.w	r8, [pc, #96]	; 89c <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     83c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8a0 <ioreq_uart_a+0x10c>
     840:	e7e4      	b.n	80c <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     842:	4a12      	ldr	r2, [pc, #72]	; (88c <ioreq_uart_a+0xf8>)
     844:	7993      	ldrb	r3, [r2, #6]
     846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     84a:	e7d6      	b.n	7fa <ioreq_uart_a+0x66>
			uart_a_enable_int;
     84c:	4b0e      	ldr	r3, [pc, #56]	; (888 <ioreq_uart_a+0xf4>)
     84e:	2015      	movs	r0, #21
     850:	681b      	ldr	r3, [r3, #0]
			return 0;
     852:	2400      	movs	r4, #0
			uart_a_enable_int;
     854:	691b      	ldr	r3, [r3, #16]
     856:	4798      	blx	r3
			return 0;
     858:	e7b4      	b.n	7c4 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     85a:	2a01      	cmp	r2, #1
     85c:	d109      	bne.n	872 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     85e:	490b      	ldr	r1, [pc, #44]	; (88c <ioreq_uart_a+0xf8>)
     860:	8828      	ldrh	r0, [r5, #0]
     862:	f7ff ff51 	bl	708 <__pi_uart_setrate>
     866:	2800      	cmp	r0, #0
     868:	d1ac      	bne.n	7c4 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     86a:	2003      	movs	r0, #3
     86c:	4908      	ldr	r1, [pc, #32]	; (890 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     86e:	f7ff fe3b 	bl	4e8 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     872:	2a02      	cmp	r2, #2
     874:	d104      	bne.n	880 <ioreq_uart_a+0xec>
	return urates [0];
     876:	4b07      	ldr	r3, [pc, #28]	; (894 <ioreq_uart_a+0x100>)
				return 1;
     878:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87a:	881b      	ldrh	r3, [r3, #0]
     87c:	800b      	strh	r3, [r1, #0]
				return 1;
     87e:	e7a1      	b.n	7c4 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     880:	2002      	movs	r0, #2
     882:	4905      	ldr	r1, [pc, #20]	; (898 <ioreq_uart_a+0x104>)
     884:	e7f3      	b.n	86e <ioreq_uart_a+0xda>
     886:	bf00      	nop
     888:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     88c:	20000b3c 	andcs	r0, r0, ip, lsr fp
     890:	000043a5 	andeq	r4, r0, r5, lsr #7
     894:	20000544 	andcs	r0, r0, r4, asr #10
     898:	000043a9 	andeq	r4, r0, r9, lsr #7
     89c:	40001018 	andmi	r1, r0, r8, lsl r0
     8a0:	40001000 	andmi	r1, r0, r0

000008a4 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     8a8:	b530      	push	{r4, r5, lr}
     8aa:	4b29      	ldr	r3, [pc, #164]	; (950 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	4c29      	ldr	r4, [pc, #164]	; (954 <UART0IntHandler+0xb0>)
     8ae:	601a      	str	r2, [r3, #0]
     8b0:	6822      	ldr	r2, [r4, #0]
     8b2:	06d5      	lsls	r5, r2, #27
     8b4:	d423      	bmi.n	8fe <UART0IntHandler+0x5a>
     8b6:	4b28      	ldr	r3, [pc, #160]	; (958 <UART0IntHandler+0xb4>)
     8b8:	799a      	ldrb	r2, [r3, #6]
     8ba:	0610      	lsls	r0, r2, #24
     8bc:	d51f      	bpl.n	8fe <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8be:	799a      	ldrb	r2, [r3, #6]
     8c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     8c4:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     8c6:	4a25      	ldr	r2, [pc, #148]	; (95c <UART0IntHandler+0xb8>)
     8c8:	7813      	ldrb	r3, [r2, #0]
     8ca:	f043 0302 	orr.w	r3, r3, #2
     8ce:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     8d0:	4b23      	ldr	r3, [pc, #140]	; (960 <UART0IntHandler+0xbc>)
     8d2:	681a      	ldr	r2, [r3, #0]
     8d4:	b19a      	cbz	r2, 8fe <UART0IntHandler+0x5a>
     8d6:	4610      	mov	r0, r2
     8d8:	2300      	movs	r3, #0
     8da:	f830 1b10 	ldrh.w	r1, [r0], #16
     8de:	f001 0107 	and.w	r1, r1, #7
     8e2:	4299      	cmp	r1, r3
     8e4:	dd09      	ble.n	8fa <UART0IntHandler+0x56>
     8e6:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     8ea:	3301      	adds	r3, #1
     8ec:	f515 7f81 	cmn.w	r5, #258	; 0x102
     8f0:	d1f7      	bne.n	8e2 <UART0IntHandler+0x3e>
     8f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8f6:	889b      	ldrh	r3, [r3, #4]
     8f8:	8013      	strh	r3, [r2, #0]
     8fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8fc:	e7ea      	b.n	8d4 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8fe:	6823      	ldr	r3, [r4, #0]
     900:	0699      	lsls	r1, r3, #26
     902:	d424      	bmi.n	94e <UART0IntHandler+0xaa>
     904:	4b14      	ldr	r3, [pc, #80]	; (958 <UART0IntHandler+0xb4>)
     906:	799a      	ldrb	r2, [r3, #6]
     908:	0652      	lsls	r2, r2, #25
     90a:	d520      	bpl.n	94e <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     90c:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	799a      	ldrb	r2, [r3, #6]
     912:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     916:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     918:	4a10      	ldr	r2, [pc, #64]	; (95c <UART0IntHandler+0xb8>)
     91a:	7813      	ldrb	r3, [r2, #0]
     91c:	f043 0302 	orr.w	r3, r3, #2
     920:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     922:	4b0f      	ldr	r3, [pc, #60]	; (960 <UART0IntHandler+0xbc>)
     924:	681a      	ldr	r2, [r3, #0]
     926:	b192      	cbz	r2, 94e <UART0IntHandler+0xaa>
     928:	4610      	mov	r0, r2
     92a:	2300      	movs	r3, #0
     92c:	f830 1b10 	ldrh.w	r1, [r0], #16
     930:	f001 0107 	and.w	r1, r1, #7
     934:	4299      	cmp	r1, r3
     936:	dd08      	ble.n	94a <UART0IntHandler+0xa6>
     938:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     93c:	3301      	adds	r3, #1
     93e:	42a5      	cmp	r5, r4
     940:	d1f8      	bne.n	934 <UART0IntHandler+0x90>
     942:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     946:	889b      	ldrh	r3, [r3, #4]
     948:	8013      	strh	r3, [r2, #0]
     94a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     94c:	e7eb      	b.n	926 <UART0IntHandler+0x82>
	}

	RTNI;
}
     94e:	bd30      	pop	{r4, r5, pc}
     950:	40001044 	andmi	r1, r0, r4, asr #32
     954:	40001018 	andmi	r1, r0, r8, lsl r0
     958:	20000b3c 	andcs	r0, r0, ip, lsr fp
     95c:	20000b50 	andcs	r0, r0, r0, asr fp
     960:	20000548 	andcs	r0, r0, r8, asr #10

00000964 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     964:	b570      	push	{r4, r5, r6, lr}
     966:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     96a:	4e0c      	ldr	r6, [pc, #48]	; (99c <__buttons_setirq+0x38>)
     96c:	4d0c      	ldr	r5, [pc, #48]	; (9a0 <__buttons_setirq+0x3c>)
     96e:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	4c0c      	ldr	r4, [pc, #48]	; (9a4 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     972:	0a1b      	lsrs	r3, r3, #8
     974:	fa01 f203 	lsl.w	r2, r1, r3
     978:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97a:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     97e:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     982:	0a1b      	lsrs	r3, r3, #8
     984:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     986:	01db      	lsls	r3, r3, #7
     988:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     98c:	4322      	orrs	r2, r4
     98e:	4323      	orrs	r3, r4
     990:	6010      	str	r0, [r2, #0]
     992:	6029      	str	r1, [r5, #0]
     994:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     996:	b662      	cpsie	i
			val;
	}
	sti;
}
     998:	bd70      	pop	{r4, r5, r6, pc}
     99a:	bf00      	nop
     99c:	00004532 	andeq	r4, r0, r2, lsr r5
     9a0:	400220e0 	andmi	r2, r2, r0, ror #1
     9a4:	42000048 	andmi	r0, r0, #72	; 0x48

000009a8 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     9aa:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     9ac:	2200      	movs	r2, #0
     9ae:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	4f09      	ldr	r7, [pc, #36]	; (9d8 <__pinlist_setirq+0x30>)
     9b2:	4c0a      	ldr	r4, [pc, #40]	; (9dc <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	490a      	ldr	r1, [pc, #40]	; (9e0 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b6:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9be:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c2:	01db      	lsls	r3, r3, #7
     9c4:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     9c8:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     9ca:	2a04      	cmp	r2, #4
     9cc:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ce:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     9d0:	d1f1      	bne.n	9b6 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     9d2:	b662      	cpsie	i
			val;
	}
	sti;
}
     9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d6:	bf00      	nop
     9d8:	0000452d 	andeq	r4, r0, sp, lsr #10
     9dc:	400220e0 	andmi	r2, r2, r0, ror #1
     9e0:	42000048 	andmi	r0, r0, #72	; 0x48

000009e4 <GPIOIntHandler>:
void GPIOIntHandler () {
     9e4:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     9e6:	4c23      	ldr	r4, [pc, #140]	; (a74 <GPIOIntHandler+0x90>)
     9e8:	6822      	ldr	r2, [r4, #0]
     9ea:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     9ee:	d01e      	beq.n	a2e <GPIOIntHandler+0x4a>
	buttons_disable ();
     9f0:	2000      	movs	r0, #0
     9f2:	f7ff ffb7 	bl	964 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     9f6:	4b20      	ldr	r3, [pc, #128]	; (a78 <GPIOIntHandler+0x94>)
     9f8:	4d20      	ldr	r5, [pc, #128]	; (a7c <GPIOIntHandler+0x98>)
     9fa:	681a      	ldr	r2, [r3, #0]
     9fc:	b192      	cbz	r2, a24 <GPIOIntHandler+0x40>
     9fe:	4610      	mov	r0, r2
     a00:	2300      	movs	r3, #0
     a02:	f830 1b10 	ldrh.w	r1, [r0], #16
     a06:	f001 0107 	and.w	r1, r1, #7
     a0a:	4299      	cmp	r1, r3
     a0c:	dd08      	ble.n	a20 <GPIOIntHandler+0x3c>
     a0e:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     a12:	3301      	adds	r3, #1
     a14:	42ae      	cmp	r6, r5
     a16:	d1f8      	bne.n	a0a <GPIOIntHandler+0x26>
     a18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     a1c:	889b      	ldrh	r3, [r3, #4]
     a1e:	8013      	strh	r3, [r2, #0]
     a20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a22:	e7eb      	b.n	9fc <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     a24:	4a16      	ldr	r2, [pc, #88]	; (a80 <GPIOIntHandler+0x9c>)
     a26:	7813      	ldrb	r3, [r2, #0]
     a28:	f043 0302 	orr.w	r3, r3, #2
     a2c:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     a2e:	6823      	ldr	r3, [r4, #0]
     a30:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     a34:	d01d      	beq.n	a72 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     a36:	4b10      	ldr	r3, [pc, #64]	; (a78 <GPIOIntHandler+0x94>)
     a38:	4c12      	ldr	r4, [pc, #72]	; (a84 <GPIOIntHandler+0xa0>)
     a3a:	6818      	ldr	r0, [r3, #0]
     a3c:	b190      	cbz	r0, a64 <GPIOIntHandler+0x80>
     a3e:	4601      	mov	r1, r0
     a40:	2300      	movs	r3, #0
     a42:	f831 2b10 	ldrh.w	r2, [r1], #16
     a46:	f002 0207 	and.w	r2, r2, #7
     a4a:	429a      	cmp	r2, r3
     a4c:	dd08      	ble.n	a60 <GPIOIntHandler+0x7c>
     a4e:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     a52:	3301      	adds	r3, #1
     a54:	42a5      	cmp	r5, r4
     a56:	d1f8      	bne.n	a4a <GPIOIntHandler+0x66>
     a58:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     a5c:	889b      	ldrh	r3, [r3, #4]
     a5e:	8003      	strh	r3, [r0, #0]
     a60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     a62:	e7eb      	b.n	a3c <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     a64:	f7ff ffa0 	bl	9a8 <__pinlist_setirq>
	RISE_N_SHINE;
     a68:	4a05      	ldr	r2, [pc, #20]	; (a80 <GPIOIntHandler+0x9c>)
     a6a:	7813      	ldrb	r3, [r2, #0]
     a6c:	f043 0302 	orr.w	r3, r3, #2
     a70:	7013      	strb	r3, [r2, #0]
}
     a72:	bd70      	pop	{r4, r5, r6, pc}
     a74:	400220e0 	andmi	r2, r2, r0, ror #1
     a78:	20000548 	andcs	r0, r0, r8, asr #10
     a7c:	00004532 	andeq	r4, r0, r2, lsr r5
     a80:	20000b50 	andcs	r0, r0, r0, asr fp
     a84:	0000452d 	andeq	r4, r0, sp, lsr #10

00000a88 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	4c58      	ldr	r4, [pc, #352]	; (bf0 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a8e:	2004      	movs	r0, #4
     a90:	f7ff fcec 	bl	46c <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a94:	6823      	ldr	r3, [r4, #0]
     a96:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a9a:	69db      	ldr	r3, [r3, #28]
     a9c:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a9e:	6823      	ldr	r3, [r4, #0]
     aa0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     aa6:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	6823      	ldr	r3, [r4, #0]
     aaa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ab0:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab2:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	2600      	movs	r6, #0
     ab6:	4c4f      	ldr	r4, [pc, #316]	; (bf4 <system_init+0x16c>)
     ab8:	4f4f      	ldr	r7, [pc, #316]	; (bf8 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aba:	f8df c17c 	ldr.w	ip, [pc, #380]	; c38 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     abe:	f8df e17c 	ldr.w	lr, [pc, #380]	; c3c <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac2:	f8df 8140 	ldr.w	r8, [pc, #320]	; c04 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac6:	f8df 9134 	ldr.w	r9, [pc, #308]	; bfc <system_init+0x174>
     aca:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ad0:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     ad2:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad6:	0091      	lsls	r1, r2, #2
     ad8:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     adc:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     ae0:	ea05 0a0c 	and.w	sl, r5, ip
     ae4:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     ae8:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aea:	bf44      	itt	mi
     aec:	ea41 010e 	orrmi.w	r1, r1, lr
     af0:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     af2:	fa03 f202 	lsl.w	r2, r3, r2
     af6:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	bf4c      	ite	mi
     afa:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     afe:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b02:	2e11      	cmp	r6, #17
     b04:	d1e2      	bne.n	acc <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b06:	2540      	movs	r5, #64	; 0x40
     b08:	2680      	movs	r6, #128	; 0x80
     b0a:	4b3c      	ldr	r3, [pc, #240]	; (bfc <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     b0c:	493c      	ldr	r1, [pc, #240]	; (c00 <system_init+0x178>)
     b0e:	601d      	str	r5, [r3, #0]
     b10:	601e      	str	r6, [r3, #0]
     b12:	780b      	ldrb	r3, [r1, #0]
     b14:	780b      	ldrb	r3, [r1, #0]
     b16:	20c8      	movs	r0, #200	; 0xc8
     b18:	f36f 1307 	bfc	r3, #4, #4
     b1c:	700b      	strb	r3, [r1, #0]
     b1e:	f7ff fc8f 	bl	440 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b22:	4b38      	ldr	r3, [pc, #224]	; (c04 <system_init+0x17c>)
     b24:	20c8      	movs	r0, #200	; 0xc8
     b26:	601d      	str	r5, [r3, #0]
     b28:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b2a:	2601      	movs	r6, #1
	all_leds_blink;
     b2c:	780b      	ldrb	r3, [r1, #0]
     b2e:	780b      	ldrb	r3, [r1, #0]
     b30:	f36f 1307 	bfc	r3, #4, #4
     b34:	700b      	strb	r3, [r1, #0]
     b36:	f7ff fc83 	bl	440 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     b3a:	4b33      	ldr	r3, [pc, #204]	; (c08 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	4a33      	ldr	r2, [pc, #204]	; (c0c <system_init+0x184>)
     b3e:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	4b33      	ldr	r3, [pc, #204]	; (c10 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     b42:	4d34      	ldr	r5, [pc, #208]	; (c14 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b44:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b46:	4b34      	ldr	r3, [pc, #208]	; (c18 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     b48:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b4a:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     b4c:	682b      	ldr	r3, [r5, #0]
     b4e:	691b      	ldr	r3, [r3, #16]
     b50:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     b52:	f000 fbe3 	bl	131c <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     b56:	682b      	ldr	r3, [r5, #0]
     b58:	2010      	movs	r0, #16
     b5a:	691b      	ldr	r3, [r3, #16]
     b5c:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b5e:	2002      	movs	r0, #2
     b60:	f7ff fc84 	bl	46c <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	68ab      	ldr	r3, [r5, #8]
     b66:	f44f 7000 	mov.w	r0, #512	; 0x200
     b6a:	69db      	ldr	r3, [r3, #28]
     b6c:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b6e:	68ab      	ldr	r3, [r5, #8]
     b70:	f44f 7000 	mov.w	r0, #512	; 0x200
     b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b76:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	68ab      	ldr	r3, [r5, #8]
     b7a:	f44f 7000 	mov.w	r0, #512	; 0x200
     b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b80:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     b82:	2260      	movs	r2, #96	; 0x60
     b84:	4b25      	ldr	r3, [pc, #148]	; (c1c <system_init+0x194>)
     b86:	6026      	str	r6, [r4, #0]
     b88:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     b8a:	f7ff fde7 	bl	75c <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     b8e:	f001 f903 	bl	1d98 <ee_open>
     b92:	f001 f90b 	bl	1dac <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b96:	f003 f99f 	bl	3ed8 <NOROM_SysCtrlResetSourceGet>
     b9a:	2808      	cmp	r0, #8
     b9c:	d11a      	bne.n	bd4 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b9e:	4b20      	ldr	r3, [pc, #128]	; (c20 <system_init+0x198>)
     ba0:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     ba6:	3b04      	subs	r3, #4
     ba8:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     baa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     bae:	3324      	adds	r3, #36	; 0x24
     bb0:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     bb2:	2000      	movs	r0, #0
     bb4:	f7ff fc28 	bl	408 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	4a1a      	ldr	r2, [pc, #104]	; (c24 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     bba:	2015      	movs	r0, #21
     bbc:	6813      	ldr	r3, [r2, #0]
     bbe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     bc2:	6013      	str	r3, [r2, #0]
     bc4:	4b13      	ldr	r3, [pc, #76]	; (c14 <system_init+0x18c>)
     bc6:	681b      	ldr	r3, [r3, #0]
     bc8:	691b      	ldr	r3, [r3, #16]
     bca:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     bcc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     bd0:	f7ff bcd4 	b.w	57c <tci_run_auxiliary_timer>
		diag ("");
     bd4:	4814      	ldr	r0, [pc, #80]	; (c28 <system_init+0x1a0>)
     bd6:	f000 fc8f 	bl	14f8 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bda:	4814      	ldr	r0, [pc, #80]	; (c2c <system_init+0x1a4>)
     bdc:	f000 fc8c 	bl	14f8 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     be0:	4913      	ldr	r1, [pc, #76]	; (c30 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     be2:	4814      	ldr	r0, [pc, #80]	; (c34 <system_init+0x1ac>)
     be4:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     be8:	b289      	uxth	r1, r1
     bea:	f000 fc85 	bl	14f8 <diag>
     bee:	e7e0      	b.n	bb2 <system_init+0x12a>
     bf0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     bf4:	60082028 	andvs	r2, r8, r8, lsr #32
     bf8:	00004420 	andeq	r4, r0, r0, lsr #8
     bfc:	40022090 	mulmi	r2, r0, r0
     c00:	20000b50 	andcs	r0, r0, r0, asr fp
     c04:	400220a0 	andmi	r2, r2, r0, lsr #1
     c08:	40092024 	andmi	r2, r9, r4, lsr #32
     c0c:	00050003 	andeq	r0, r5, r3
     c10:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     c14:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     c18:	40092000 	andmi	r2, r9, r0
     c1c:	20000544 	andcs	r0, r0, r4, asr #10
     c20:	4009400c 	andmi	r4, r9, ip
     c24:	40001038 	andmi	r1, r0, r8, lsr r0
     c28:	00004200 	andeq	r4, r0, r0, lsl #4
     c2c:	000043ad 	andeq	r4, r0, sp, lsr #7
     c30:	20000b74 	andcs	r0, r0, r4, ror fp
     c34:	000043f9 	strdeq	r4, [r0], -r9
     c38:	7f077f3f 	svcvc	0x00077f3f
     c3c:	42441a00 	submi	r1, r4, #0, 20

00000c40 <setpowermode>:
//
	if (mode > 3)
		// This is the maximum
		mode = 3;

	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	2803      	cmp	r0, #3
     c42:	4603      	mov	r3, r0
     c44:	bf28      	it	cs
     c46:	2303      	movcs	r3, #3
     c48:	4a05      	ldr	r2, [pc, #20]	; (c60 <setpowermode+0x20>)
     c4a:	b2db      	uxtb	r3, r3
     c4c:	2801      	cmp	r0, #1
     c4e:	7093      	strb	r3, [r2, #2]
     c50:	d904      	bls.n	c5c <setpowermode+0x1c>
	    (__pi_systat.ondmns & PRCM_DOMAIN_RFCORE) == 0) ?
     c52:	6851      	ldr	r1, [r2, #4]
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c54:	f011 0f01 	tst.w	r1, #1
     c58:	bf18      	it	ne
     c5a:	2301      	movne	r3, #1
     c5c:	70d3      	strb	r3, [r2, #3]
		mode : 1;
}
     c5e:	4770      	bx	lr
     c60:	20000b50 	andcs	r0, r0, r0, asr fp

00000c64 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     c64:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     c68:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c6a:	4b79      	ldr	r3, [pc, #484]	; (e50 <__pi_release+0x1ec>)
     c6c:	af00      	add	r7, sp, #0
     c6e:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     c72:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     c76:	681a      	ldr	r2, [r3, #0]
     c78:	4b76      	ldr	r3, [pc, #472]	; (e54 <__pi_release+0x1f0>)
     c7a:	429a      	cmp	r2, r3
     c7c:	d127      	bne.n	cce <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c7e:	4e76      	ldr	r6, [pc, #472]	; (e58 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     c80:	2100      	movs	r1, #0
     c82:	f64f 70ff 	movw	r0, #65535	; 0xffff
     c86:	f000 f9ed 	bl	1064 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     c8a:	4a74      	ldr	r2, [pc, #464]	; (e5c <__pi_release+0x1f8>)
     c8c:	4b74      	ldr	r3, [pc, #464]	; (e60 <__pi_release+0x1fc>)
     c8e:	6812      	ldr	r2, [r2, #0]
     c90:	601a      	str	r2, [r3, #0]
     c92:	681a      	ldr	r2, [r3, #0]
     c94:	b9fa      	cbnz	r2, cd6 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c96:	4c73      	ldr	r4, [pc, #460]	; (e64 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     c98:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     c9a:	4d73      	ldr	r5, [pc, #460]	; (e68 <__pi_release+0x204>)
     c9c:	782b      	ldrb	r3, [r5, #0]
     c9e:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ca2:	0798      	lsls	r0, r3, #30
     ca4:	607a      	str	r2, [r7, #4]
     ca6:	f100 80cd 	bmi.w	e44 <__pi_release+0x1e0>
	system_event_count ++;
     caa:	4a70      	ldr	r2, [pc, #448]	; (e6c <__pi_release+0x208>)
     cac:	6813      	ldr	r3, [r2, #0]
     cae:	3301      	adds	r3, #1
     cb0:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     cb2:	78ea      	ldrb	r2, [r5, #3]
     cb4:	2a01      	cmp	r2, #1
     cb6:	b2d3      	uxtb	r3, r2
     cb8:	d017      	beq.n	cea <__pi_release+0x86>
     cba:	2b02      	cmp	r3, #2
     cbc:	d031      	beq.n	d22 <__pi_release+0xbe>
     cbe:	2b00      	cmp	r3, #0
     cc0:	f040 8095 	bne.w	dee <__pi_release+0x18a>
			__WFI ();
     cc4:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     cc6:	b662      	cpsie	i
     cc8:	bf00      	nop
     cca:	bf00      	nop
     ccc:	e7e4      	b.n	c98 <__pi_release+0x34>
	check_stack_overflow;
     cce:	200b      	movs	r0, #11
     cd0:	4967      	ldr	r1, [pc, #412]	; (e70 <__pi_release+0x20c>)
     cd2:	f7ff fc09 	bl	4e8 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd6:	6851      	ldr	r1, [r2, #4]
     cd8:	b129      	cbz	r1, ce6 <__pi_release+0x82>
     cda:	8810      	ldrh	r0, [r2, #0]
     cdc:	0704      	lsls	r4, r0, #28
     cde:	d102      	bne.n	ce6 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	0900      	lsrs	r0, r0, #4
     ce2:	4788      	blx	r1
			goto Redo;
     ce4:	e7cc      	b.n	c80 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     ce6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     ce8:	e7d2      	b.n	c90 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cea:	4a62      	ldr	r2, [pc, #392]	; (e74 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cec:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cee:	6813      	ldr	r3, [r2, #0]
     cf0:	f043 0301 	orr.w	r3, r3, #1
     cf4:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     cfa:	f043 0303 	orr.w	r3, r3, #3
     cfe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d02:	4b5d      	ldr	r3, [pc, #372]	; (e78 <__pi_release+0x214>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	699b      	ldr	r3, [r3, #24]
     d08:	4798      	blx	r3
     d0a:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	6823      	ldr	r3, [r4, #0]
     d0e:	f043 0304 	orr.w	r3, r3, #4
     d12:	6023      	str	r3, [r4, #0]
			__WFI ();
     d14:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d16:	6823      	ldr	r3, [r4, #0]
     d18:	f023 0304 	bic.w	r3, r3, #4
     d1c:	6023      	str	r3, [r4, #0]
     d1e:	6833      	ldr	r3, [r6, #0]
}
     d20:	e7d1      	b.n	cc6 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d22:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d26:	687a      	ldr	r2, [r7, #4]
     d28:	4b54      	ldr	r3, [pc, #336]	; (e7c <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2a:	f8df b188 	ldr.w	fp, [pc, #392]	; eb4 <__pi_release+0x250>
     d2e:	601a      	str	r2, [r3, #0]
     d30:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d32:	f8df a144 	ldr.w	sl, [pc, #324]	; e78 <__pi_release+0x214>
     d36:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d3a:	6833      	ldr	r3, [r6, #0]
     d3c:	4b50      	ldr	r3, [pc, #320]	; (e80 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; eb8 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d42:	f8c3 8000 	str.w	r8, [r3]
     d46:	6868      	ldr	r0, [r5, #4]
     d48:	f8da 3000 	ldr.w	r3, [sl]
     d4c:	f040 0020 	orr.w	r0, r0, #32
     d50:	699b      	ldr	r3, [r3, #24]
     d52:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	4b4b      	ldr	r3, [pc, #300]	; (e84 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d56:	2103      	movs	r1, #3
     d58:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d5c:	f8d9 3000 	ldr.w	r3, [r9]
     d60:	4849      	ldr	r0, [pc, #292]	; (e88 <__pi_release+0x224>)
     d62:	f023 0303 	bic.w	r3, r3, #3
     d66:	f8c9 3000 	str.w	r3, [r9]
     d6a:	4b48      	ldr	r3, [pc, #288]	; (e8c <__pi_release+0x228>)
     d6c:	681a      	ldr	r2, [r3, #0]
     d6e:	6852      	ldr	r2, [r2, #4]
     d70:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     d72:	6878      	ldr	r0, [r7, #4]
     d74:	f002 ff70 	bl	3c58 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     d78:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7a:	6822      	ldr	r2, [r4, #0]
     d7c:	f042 0204 	orr.w	r2, r2, #4
     d80:	6022      	str	r2, [r4, #0]
			__WFI ();
     d82:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d86:	4b41      	ldr	r3, [pc, #260]	; (e8c <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d88:	f022 0204 	bic.w	r2, r2, #4
     d8c:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	4641      	mov	r1, r8
     d92:	685b      	ldr	r3, [r3, #4]
     d94:	483c      	ldr	r0, [pc, #240]	; (e88 <__pi_release+0x224>)
     d96:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d98:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d9c:	4a3c      	ldr	r2, [pc, #240]	; (e90 <__pi_release+0x22c>)
     d9e:	f043 0303 	orr.w	r3, r3, #3
     da2:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da6:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     daa:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     dac:	0699      	lsls	r1, r3, #26
     dae:	d5fc      	bpl.n	daa <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db0:	f8da 3000 	ldr.w	r3, [sl]
     db4:	6868      	ldr	r0, [r5, #4]
     db6:	695b      	ldr	r3, [r3, #20]
     db8:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dba:	4d2f      	ldr	r5, [pc, #188]	; (e78 <__pi_release+0x214>)
     dbc:	4b2a      	ldr	r3, [pc, #168]	; (e68 <__pi_release+0x204>)
     dbe:	6858      	ldr	r0, [r3, #4]
     dc0:	682b      	ldr	r3, [r5, #0]
     dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     dc4:	4798      	blx	r3
     dc6:	2801      	cmp	r0, #1
     dc8:	d1f8      	bne.n	dbc <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     dca:	4b2d      	ldr	r3, [pc, #180]	; (e80 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	4a2d      	ldr	r2, [pc, #180]	; (e84 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     dce:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dd0:	2300      	movs	r3, #0
     dd2:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	4b29      	ldr	r3, [pc, #164]	; (e7c <__pi_release+0x218>)
     dd6:	6018      	str	r0, [r3, #0]
     dd8:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     dda:	f003 f84d 	bl	3e78 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     dde:	f7ff fcbd 	bl	75c <reinit_uart>
     de2:	4a2c      	ldr	r2, [pc, #176]	; (e94 <__pi_release+0x230>)
     de4:	6813      	ldr	r3, [r2, #0]
     de6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     dea:	6013      	str	r3, [r2, #0]
}
     dec:	e76b      	b.n	cc6 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     dee:	4b2a      	ldr	r3, [pc, #168]	; (e98 <__pi_release+0x234>)
     df0:	2001      	movs	r0, #1
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	68db      	ldr	r3, [r3, #12]
     df6:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	4a28      	ldr	r2, [pc, #160]	; (e9c <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dfa:	4929      	ldr	r1, [pc, #164]	; (ea0 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dfc:	6813      	ldr	r3, [r2, #0]
     dfe:	f023 0301 	bic.w	r3, r3, #1
     e02:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	4b27      	ldr	r3, [pc, #156]	; (ea4 <__pi_release+0x240>)
     e06:	681a      	ldr	r2, [r3, #0]
     e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     e0c:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e0e:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     e12:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	604a      	str	r2, [r1, #4]
     e16:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e18:	687a      	ldr	r2, [r7, #4]
     e1a:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e1c:	687a      	ldr	r2, [r7, #4]
     e1e:	4b22      	ldr	r3, [pc, #136]	; (ea8 <__pi_release+0x244>)
     e20:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e22:	2201      	movs	r2, #1
     e24:	4b21      	ldr	r3, [pc, #132]	; (eac <__pi_release+0x248>)
     e26:	601a      	str	r2, [r3, #0]
     e28:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2a:	4a19      	ldr	r2, [pc, #100]	; (e90 <__pi_release+0x22c>)
     e2c:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e2e:	069b      	lsls	r3, r3, #26
     e30:	d4fc      	bmi.n	e2c <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e32:	2201      	movs	r2, #1
     e34:	4b1e      	ldr	r3, [pc, #120]	; (eb0 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     e36:	2037      	movs	r0, #55	; 0x37
     e38:	601a      	str	r2, [r3, #0]
     e3a:	4b0f      	ldr	r3, [pc, #60]	; (e78 <__pi_release+0x214>)
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	699b      	ldr	r3, [r3, #24]
     e40:	4798      	blx	r3
			goto DeepSleep;
     e42:	e763      	b.n	d0c <__pi_release+0xa8>
	__SLEEP;
     e44:	782b      	ldrb	r3, [r5, #0]
     e46:	f36f 0341 	bfc	r3, #1, #1
     e4a:	702b      	strb	r3, [r5, #0]
     e4c:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     e4e:	e717      	b.n	c80 <__pi_release+0x1c>
     e50:	20005000 	andcs	r5, r0, r0
     e54:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e58:	4009202c 	andmi	r2, r9, ip, lsr #32
     e5c:	20000548 	andcs	r0, r0, r8, asr #10
     e60:	20000b6c 	andcs	r0, r0, ip, ror #22
     e64:	e000ed10 	and	lr, r0, r0, lsl sp
     e68:	20000b50 	andcs	r0, r0, r0, asr fp
     e6c:	20000b44 	andcs	r0, r0, r4, asr #22
     e70:	00004410 	andeq	r4, r0, r0, lsl r4
     e74:	4008218c 	andmi	r2, r8, ip, lsl #3
     e78:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     e7c:	4009400c 	andmi	r4, r9, ip
     e80:	60082028 	andvs	r2, r8, r8, lsr #32
     e84:	43040180 	movwmi	r0, #16768	; 0x4180
     e88:	40034000 	andmi	r4, r3, r0
     e8c:	100001d8 	ldrdne	r0, [r0], -r8
     e90:	40091014 	andmi	r1, r9, r4, lsl r0
     e94:	40001038 	andmi	r1, r0, r8, lsr r0
     e98:	100001a0 	andne	r0, r0, r0, lsr #3
     e9c:	40091010 	andmi	r1, r9, r0, lsl r0
     ea0:	40093000 	andmi	r3, r9, r0
     ea4:	40091040 	andmi	r1, r9, r0, asr #32
     ea8:	43220420 			; <UNDEFINED> instruction: 0x43220420
     eac:	40091018 	andmi	r1, r9, r8, lsl r0
     eb0:	43040188 	movwmi	r0, #16776	; 0x4188
     eb4:	43220200 			; <UNDEFINED> instruction: 0x43220200
     eb8:	40082224 	andmi	r2, r8, r4, lsr #4

00000ebc <halt>:
	cli_tim;
     ebc:	2400      	movs	r4, #0
void halt (void) {
     ebe:	b508      	push	{r3, lr}
	cli_tim;
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <halt+0x24>)
	diag ("PicOS halted");
     ec2:	4808      	ldr	r0, [pc, #32]	; (ee4 <halt+0x28>)
	cli_tim;
     ec4:	601c      	str	r4, [r3, #0]
	diag ("PicOS halted");
     ec6:	f000 fb17 	bl	14f8 <diag>
	mdelay (500);
     eca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ece:	f7ff fab7 	bl	440 <mdelay>
	setpowermode (2);
     ed2:	2002      	movs	r0, #2
     ed4:	f7ff feb4 	bl	c40 <setpowermode>
	__PCB = NULL;
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <halt+0x2c>)
     eda:	601c      	str	r4, [r3, #0]
	release;
     edc:	f7ff fec2 	bl	c64 <__pi_release>
     ee0:	43240280 			; <UNDEFINED> instruction: 0x43240280
     ee4:	00004413 	andeq	r4, r0, r3, lsl r4
     ee8:	20000548 	andcs	r0, r0, r8, asr #10

00000eec <main>:

#include "scheduler.h"

}

int main (void) {
     eec:	b510      	push	{r4, lr}
     eee:	4b11      	ldr	r3, [pc, #68]	; (f34 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	4911      	ldr	r1, [pc, #68]	; (f38 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef2:	4a12      	ldr	r2, [pc, #72]	; (f3c <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef4:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef8:	4293      	cmp	r3, r2
     efa:	d1fb      	bne.n	ef4 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efc:	4c10      	ldr	r4, [pc, #64]	; (f40 <main+0x54>)
	system_init ();
     efe:	f7ff fdc3 	bl	a88 <system_init>
	tcv_init ();
     f02:	f000 fe85 	bl	1c10 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f06:	6823      	ldr	r3, [r4, #0]
     f08:	2129      	movs	r1, #41	; 0x29
     f0a:	2000      	movs	r0, #0
     f0c:	681b      	ldr	r3, [r3, #0]
     f0e:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	6823      	ldr	r3, [r4, #0]
     f12:	2120      	movs	r1, #32
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	2001      	movs	r0, #1
     f18:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f1a:	2100      	movs	r1, #0
     f1c:	4809      	ldr	r0, [pc, #36]	; (f44 <main+0x58>)
     f1e:	f000 fac5 	bl	14ac <__pi_fork>
     f22:	4b09      	ldr	r3, [pc, #36]	; (f48 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     f24:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f26:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     f28:	2010      	movs	r0, #16
     f2a:	f000 f951 	bl	11d0 <delay>
     f2e:	b662      	cpsie	i

	sti;

	__pi_release ();
     f30:	f7ff fe98 	bl	c64 <__pi_release>
     f34:	20004bfc 	strdcs	r4, [r0], -ip
     f38:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     f3c:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     f40:	10000184 	andne	r0, r0, r4, lsl #3
     f44:	0000013d 	andeq	r0, r0, sp, lsr r1
     f48:	20000b6c 	andcs	r0, r0, ip, ror #22

00000f4c <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     f4c:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     f4e:	4b0d      	ldr	r3, [pc, #52]	; (f84 <killev+0x38>)
	wfun = (aword)(pid->code);
     f50:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     f52:	681a      	ldr	r2, [r3, #0]
     f54:	b1aa      	cbz	r2, f82 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     f56:	4614      	mov	r4, r2
     f58:	f834 1b10 	ldrh.w	r1, [r4], #16
     f5c:	2300      	movs	r3, #0
     f5e:	f001 0107 	and.w	r1, r1, #7
     f62:	e001      	b.n	f68 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     f64:	42b5      	cmp	r5, r6
     f66:	d006      	beq.n	f76 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     f68:	4299      	cmp	r1, r3
     f6a:	dd08      	ble.n	f7e <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     f6c:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f70:	3301      	adds	r3, #1
     f72:	42a8      	cmp	r0, r5
     f74:	d1f6      	bne.n	f64 <killev+0x18>
			    ) {
				wakeupev (i, j);
     f76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f7a:	889b      	ldrh	r3, [r3, #4]
     f7c:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f80:	e7e8      	b.n	f54 <killev+0x8>
				break;
			}
		}
	}
}
     f82:	bd70      	pop	{r4, r5, r6, pc}
     f84:	20000548 	andcs	r0, r0, r8, asr #10

00000f88 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	4a1d      	ldr	r2, [pc, #116]	; (1000 <qfree+0x78>)
static void qfree (aword *ch) {
     f8a:	b530      	push	{r4, r5, lr}
     f8c:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f8e:	6813      	ldr	r3, [r2, #0]
     f90:	b93b      	cbnz	r3, fa2 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f92:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     f94:	4a1a      	ldr	r2, [pc, #104]	; (1000 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f96:	bb53      	cbnz	r3, fee <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     f98:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     f9a:	4b1a      	ldr	r3, [pc, #104]	; (1004 <qfree+0x7c>)
	m_setnextp (cc, ch);
     f9c:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     f9e:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     fa0:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa2:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     fa6:	3101      	adds	r1, #1
     fa8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     fac:	4288      	cmp	r0, r1
     fae:	d10b      	bne.n	fc8 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     fb0:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb2:	f850 0c04 	ldr.w	r0, [r0, #-4]
     fb6:	f853 1c04 	ldr.w	r1, [r3, #-4]
     fba:	4401      	add	r1, r0
     fbc:	4618      	mov	r0, r3
     fbe:	3101      	adds	r1, #1
     fc0:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	e7e3      	b.n	f90 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	f850 1c04 	ldr.w	r1, [r0, #-4]
     fcc:	3101      	adds	r1, #1
     fce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     fd2:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     fd4:	bf03      	ittte	eq
     fd6:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     fdc:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     fe0:	461a      	movne	r2, r3
     fe2:	bf02      	ittt	eq
     fe4:	1949      	addeq	r1, r1, r5
     fe6:	3101      	addeq	r1, #1
     fe8:	f840 1c04 	streq.w	r1, [r0, #-4]
     fec:	e7ea      	b.n	fc4 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     fee:	f853 4c04 	ldr.w	r4, [r3, #-4]
     ff2:	f850 1c04 	ldr.w	r1, [r0, #-4]
     ff6:	428c      	cmp	r4, r1
     ff8:	d2ce      	bcs.n	f98 <qfree+0x10>
		chunk = m_nextp (chunk))
     ffa:	461a      	mov	r2, r3
     ffc:	681b      	ldr	r3, [r3, #0]
     ffe:	e7ca      	b.n	f96 <qfree+0xe>
    1000:	2000055c 	andcs	r0, r0, ip, asr r5
    1004:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00001008 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	4a03      	ldr	r2, [pc, #12]	; (1018 <dgout+0x10>)
    100a:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    100c:	071b      	lsls	r3, r3, #28
    100e:	d4fc      	bmi.n	100a <dgout+0x2>
	diag_wchar (c, a);
    1010:	4b02      	ldr	r3, [pc, #8]	; (101c <dgout+0x14>)
    1012:	b2c0      	uxtb	r0, r0
    1014:	6018      	str	r0, [r3, #0]
}
    1016:	4770      	bx	lr
    1018:	40001018 	andmi	r1, r0, r8, lsl r0
    101c:	40001000 	andmi	r1, r0, r0

00001020 <__pi_badstate>:
	syserror (ESTATE, "state");
    1020:	2007      	movs	r0, #7
void __pi_badstate (void) {
    1022:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    1024:	4901      	ldr	r1, [pc, #4]	; (102c <__pi_badstate+0xc>)
    1026:	f7ff fa5f 	bl	4e8 <__pi_syserror>
    102a:	bf00      	nop
    102c:	00004464 	andeq	r4, r0, r4, ror #8

00001030 <utimer_add>:
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	4a08      	ldr	r2, [pc, #32]	; (1054 <utimer_add+0x24>)
void utimer_add (address ut) {
    1032:	4603      	mov	r3, r0
    1034:	4611      	mov	r1, r2
	for (i = 0; i < MAX_UTIMERS; i++)
    1036:	2000      	movs	r0, #0
void utimer_add (address ut) {
    1038:	b510      	push	{r4, lr}
		if (__pi_utims [i] == NULL)
    103a:	f852 4b04 	ldr.w	r4, [r2], #4
    103e:	b12c      	cbz	r4, 104c <utimer_add+0x1c>
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	3001      	adds	r0, #1
    1042:	2804      	cmp	r0, #4
    1044:	d1f9      	bne.n	103a <utimer_add+0xa>
		syserror (ERESOURCE, "ut a");
    1046:	4904      	ldr	r1, [pc, #16]	; (1058 <utimer_add+0x28>)
    1048:	f7ff fa4e 	bl	4e8 <__pi_syserror>
	__pi_utims [i] = ut;
    104c:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
    1050:	bd10      	pop	{r4, pc}
    1052:	bf00      	nop
    1054:	20000b5c 	andcs	r0, r0, ip, asr fp
    1058:	0000446a 	andeq	r4, r0, sl, ror #8

0000105c <__pi_utimer_set>:
	*t = v;
    105c:	8001      	strh	r1, [r0, #0]
	TCI_RUN_AUXILIARY_TIMER;
    105e:	f7ff ba8d 	b.w	57c <tci_run_auxiliary_timer>
	...

00001064 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1066:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	4608      	mov	r0, r1
    106a:	f7ff fb25 	bl	6b8 <tci_update_delay_ticks>
    106e:	2800      	cmp	r0, #0
    1070:	d154      	bne.n	111c <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1072:	4b2b      	ldr	r3, [pc, #172]	; (1120 <update_n_wake+0xbc>)
    1074:	4d2b      	ldr	r5, [pc, #172]	; (1124 <update_n_wake+0xc0>)
    1076:	8819      	ldrh	r1, [r3, #0]
    1078:	882a      	ldrh	r2, [r5, #0]
    107a:	b289      	uxth	r1, r1
    107c:	428a      	cmp	r2, r1
    107e:	492a      	ldr	r1, [pc, #168]	; (1128 <update_n_wake+0xc4>)
    1080:	d803      	bhi.n	108a <update_n_wake+0x26>
    1082:	8808      	ldrh	r0, [r1, #0]
    1084:	b280      	uxth	r0, r0
    1086:	4282      	cmp	r2, r0
    1088:	d20d      	bcs.n	10a6 <update_n_wake+0x42>
    108a:	881e      	ldrh	r6, [r3, #0]
    108c:	8808      	ldrh	r0, [r1, #0]
    108e:	b2b6      	uxth	r6, r6
    1090:	b280      	uxth	r0, r0
    1092:	4286      	cmp	r6, r0
    1094:	d236      	bcs.n	1104 <update_n_wake+0xa0>
    1096:	8818      	ldrh	r0, [r3, #0]
    1098:	b280      	uxth	r0, r0
    109a:	4282      	cmp	r2, r0
    109c:	d903      	bls.n	10a6 <update_n_wake+0x42>
    109e:	8808      	ldrh	r0, [r1, #0]
    10a0:	b280      	uxth	r0, r0
    10a2:	4282      	cmp	r2, r0
    10a4:	d32e      	bcc.n	1104 <update_n_wake+0xa0>
		for_all_tasks (i) {
    10a6:	4a21      	ldr	r2, [pc, #132]	; (112c <update_n_wake+0xc8>)
    10a8:	6810      	ldr	r0, [r2, #0]
    10aa:	b918      	cbnz	r0, 10b4 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    10ac:	8818      	ldrh	r0, [r3, #0]
    10ae:	4404      	add	r4, r0
    10b0:	802c      	strh	r4, [r5, #0]
    10b2:	e02c      	b.n	110e <update_n_wake+0xaa>
			if (!twaiting (i))
    10b4:	8806      	ldrh	r6, [r0, #0]
    10b6:	0732      	lsls	r2, r6, #28
    10b8:	d51b      	bpl.n	10f2 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10ba:	881f      	ldrh	r7, [r3, #0]
    10bc:	8842      	ldrh	r2, [r0, #2]
    10be:	b2bf      	uxth	r7, r7
    10c0:	42ba      	cmp	r2, r7
    10c2:	d803      	bhi.n	10cc <update_n_wake+0x68>
    10c4:	880f      	ldrh	r7, [r1, #0]
    10c6:	b2bf      	uxth	r7, r7
    10c8:	42ba      	cmp	r2, r7
    10ca:	d20f      	bcs.n	10ec <update_n_wake+0x88>
    10cc:	f8b3 c000 	ldrh.w	ip, [r3]
    10d0:	880f      	ldrh	r7, [r1, #0]
    10d2:	fa1f fc8c 	uxth.w	ip, ip
    10d6:	b2bf      	uxth	r7, r7
    10d8:	45bc      	cmp	ip, r7
    10da:	d20c      	bcs.n	10f6 <update_n_wake+0x92>
    10dc:	881f      	ldrh	r7, [r3, #0]
    10de:	b2bf      	uxth	r7, r7
    10e0:	42ba      	cmp	r2, r7
    10e2:	d903      	bls.n	10ec <update_n_wake+0x88>
    10e4:	880f      	ldrh	r7, [r1, #0]
    10e6:	b2bf      	uxth	r7, r7
    10e8:	42ba      	cmp	r2, r7
    10ea:	d304      	bcc.n	10f6 <update_n_wake+0x92>
				wakeuptm (i);
    10ec:	f026 060f 	bic.w	r6, r6, #15
    10f0:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    10f2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    10f4:	e7d9      	b.n	10aa <update_n_wake+0x46>
				d = i->Timer - znew;
    10f6:	881e      	ldrh	r6, [r3, #0]
    10f8:	1b92      	subs	r2, r2, r6
    10fa:	b292      	uxth	r2, r2
    10fc:	4294      	cmp	r4, r2
    10fe:	bf28      	it	cs
    1100:	4614      	movcs	r4, r2
    1102:	e7f6      	b.n	10f2 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    1104:	8818      	ldrh	r0, [r3, #0]
    1106:	1a12      	subs	r2, r2, r0
    1108:	b292      	uxth	r2, r2
    110a:	4294      	cmp	r4, r2
    110c:	d9ce      	bls.n	10ac <update_n_wake+0x48>
	__pi_old = znew;
    110e:	881b      	ldrh	r3, [r3, #0]
    1110:	b29b      	uxth	r3, r3
    1112:	800b      	strh	r3, [r1, #0]
}
    1114:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1118:	f7ff ba10 	b.w	53c <tci_run_delay_timer>
}
    111c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    111e:	bf00      	nop
    1120:	20000b58 	andcs	r0, r0, r8, asr fp
    1124:	20000b4c 	andcs	r0, r0, ip, asr #22
    1128:	20000b4e 	andcs	r0, r0, lr, asr #22
    112c:	20000548 	andcs	r0, r0, r8, asr #10

00001130 <proceed>:
void proceed (word state) {
    1130:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    1132:	4b03      	ldr	r3, [pc, #12]	; (1140 <proceed+0x10>)
    1134:	0100      	lsls	r0, r0, #4
    1136:	681b      	ldr	r3, [r3, #0]
    1138:	8018      	strh	r0, [r3, #0]
	release;
    113a:	f7ff fd93 	bl	c64 <__pi_release>
    113e:	bf00      	nop
    1140:	20000b6c 	andcs	r0, r0, ip, ror #22

00001144 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1144:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    1146:	4b0a      	ldr	r3, [pc, #40]	; (1170 <__pi_wait+0x2c>)
    1148:	681c      	ldr	r4, [r3, #0]
    114a:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	f013 0f04 	tst.w	r3, #4
    1150:	f003 0207 	and.w	r2, r3, #7
    1154:	d003      	beq.n	115e <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    1156:	2005      	movs	r0, #5
    1158:	4906      	ldr	r1, [pc, #24]	; (1174 <__pi_wait+0x30>)
    115a:	f7ff f9c5 	bl	4e8 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    115e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    1162:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1164:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    1166:	8191      	strh	r1, [r2, #12]
    1168:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    116a:	8023      	strh	r3, [r4, #0]
}
    116c:	bd10      	pop	{r4, pc}
    116e:	bf00      	nop
    1170:	20000b6c 	andcs	r0, r0, ip, ror #22
    1174:	0000446f 	andeq	r4, r0, pc, ror #8

00001178 <__pi_trigger>:
void __pi_trigger (aword event) {
    1178:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    117a:	4b0b      	ldr	r3, [pc, #44]	; (11a8 <__pi_trigger+0x30>)
    117c:	681a      	ldr	r2, [r3, #0]
    117e:	b192      	cbz	r2, 11a6 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1180:	4614      	mov	r4, r2
    1182:	2300      	movs	r3, #0
    1184:	f834 1b10 	ldrh.w	r1, [r4], #16
    1188:	f001 0107 	and.w	r1, r1, #7
    118c:	4299      	cmp	r1, r3
    118e:	dd08      	ble.n	11a2 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1190:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1194:	3301      	adds	r3, #1
    1196:	4285      	cmp	r5, r0
    1198:	d1f8      	bne.n	118c <__pi_trigger+0x14>
				wakeupev (i, j);
    119a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    119e:	889b      	ldrh	r3, [r3, #4]
    11a0:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    11a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    11a4:	e7eb      	b.n	117e <__pi_trigger+0x6>
}
    11a6:	bd30      	pop	{r4, r5, pc}
    11a8:	20000548 	andcs	r0, r0, r8, asr #10

000011ac <__pi_join>:
aword __pi_join (aword pid, word st) {
    11ac:	b510      	push	{r4, lr}
    11ae:	4604      	mov	r4, r0
	for_all_tasks (i) {
    11b0:	4b06      	ldr	r3, [pc, #24]	; (11cc <__pi_join+0x20>)
    11b2:	681b      	ldr	r3, [r3, #0]
    11b4:	b90b      	cbnz	r3, 11ba <__pi_join+0xe>
	return 0;
    11b6:	461c      	mov	r4, r3
    11b8:	e004      	b.n	11c4 <__pi_join+0x18>
		if ((aword)i == pid) {
    11ba:	42a3      	cmp	r3, r4
    11bc:	d104      	bne.n	11c8 <__pi_join+0x1c>
			__pi_wait (pid, st);
    11be:	4620      	mov	r0, r4
    11c0:	f7ff ffc0 	bl	1144 <__pi_wait>
}
    11c4:	4620      	mov	r0, r4
    11c6:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    11c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11ca:	e7f3      	b.n	11b4 <__pi_join+0x8>
    11cc:	20000548 	andcs	r0, r0, r8, asr #10

000011d0 <delay>:
void delay (word d, word state) {
    11d0:	b538      	push	{r3, r4, r5, lr}
    11d2:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    11d4:	4d0a      	ldr	r5, [pc, #40]	; (1200 <delay+0x30>)
    11d6:	682a      	ldr	r2, [r5, #0]
    11d8:	8813      	ldrh	r3, [r2, #0]
    11da:	f003 0307 	and.w	r3, r3, #7
    11de:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    11e2:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    11e4:	2101      	movs	r1, #1
    11e6:	f7ff ff3d 	bl	1064 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    11ea:	4b06      	ldr	r3, [pc, #24]	; (1204 <delay+0x34>)
    11ec:	8818      	ldrh	r0, [r3, #0]
    11ee:	682b      	ldr	r3, [r5, #0]
    11f0:	4404      	add	r4, r0
    11f2:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    11f4:	682a      	ldr	r2, [r5, #0]
    11f6:	8813      	ldrh	r3, [r2, #0]
    11f8:	f043 0308 	orr.w	r3, r3, #8
    11fc:	8013      	strh	r3, [r2, #0]
}
    11fe:	bd38      	pop	{r3, r4, r5, pc}
    1200:	20000b6c 	andcs	r0, r0, ip, ror #22
    1204:	20000b4e 	andcs	r0, r0, lr, asr #22

00001208 <running>:
	if (fun == NULL)
    1208:	4603      	mov	r3, r0
    120a:	b910      	cbnz	r0, 1212 <running+0xa>
		return (int) __pi_curr;
    120c:	4b05      	ldr	r3, [pc, #20]	; (1224 <running+0x1c>)
    120e:	6818      	ldr	r0, [r3, #0]
    1210:	4770      	bx	lr
	for_all_tasks (i)
    1212:	4a05      	ldr	r2, [pc, #20]	; (1228 <running+0x20>)
    1214:	6810      	ldr	r0, [r2, #0]
    1216:	b900      	cbnz	r0, 121a <running+0x12>
}
    1218:	4770      	bx	lr
		if (i->code == fun)
    121a:	6842      	ldr	r2, [r0, #4]
    121c:	429a      	cmp	r2, r3
    121e:	d0fb      	beq.n	1218 <running+0x10>
	for_all_tasks (i)
    1220:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1222:	e7f8      	b.n	1216 <running+0xe>
    1224:	20000b6c 	andcs	r0, r0, ip, ror #22
    1228:	20000548 	andcs	r0, r0, r8, asr #10

0000122c <__pi_strlen>:
int __pi_strlen (const char *s) {
    122c:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    122e:	2000      	movs	r0, #0
    1230:	5c1a      	ldrb	r2, [r3, r0]
    1232:	b902      	cbnz	r2, 1236 <__pi_strlen+0xa>
}
    1234:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1236:	3001      	adds	r0, #1
    1238:	e7fa      	b.n	1230 <__pi_strlen+0x4>

0000123a <__pi_memcpy>:
	while (n--)
    123a:	3801      	subs	r0, #1
    123c:	440a      	add	r2, r1
    123e:	4291      	cmp	r1, r2
    1240:	d100      	bne.n	1244 <__pi_memcpy+0xa>
}
    1242:	4770      	bx	lr
		*dest++ = *src++;
    1244:	f811 3b01 	ldrb.w	r3, [r1], #1
    1248:	f800 3f01 	strb.w	r3, [r0, #1]!
    124c:	e7f7      	b.n	123e <__pi_memcpy+0x4>

0000124e <__pi_memset>:
	while (n--)
    124e:	4402      	add	r2, r0
    1250:	4290      	cmp	r0, r2
    1252:	d100      	bne.n	1256 <__pi_memset+0x8>
}
    1254:	4770      	bx	lr
		*dest++ = c;
    1256:	f800 1b01 	strb.w	r1, [r0], #1
    125a:	e7f9      	b.n	1250 <__pi_memset+0x2>

0000125c <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    125c:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    125e:	b119      	cbz	r1, 1268 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1260:	2003      	movs	r0, #3
    1262:	4905      	ldr	r1, [pc, #20]	; (1278 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1264:	f7ff f940 	bl	4e8 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <adddevfunc+0x20>)
    126a:	681a      	ldr	r2, [r3, #0]
    126c:	b112      	cbz	r2, 1274 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    126e:	2004      	movs	r0, #4
    1270:	4901      	ldr	r1, [pc, #4]	; (1278 <adddevfunc+0x1c>)
    1272:	e7f7      	b.n	1264 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1274:	6018      	str	r0, [r3, #0]
}
    1276:	bd08      	pop	{r3, pc}
    1278:	00004472 	andeq	r4, r0, r2, ror r4
    127c:	2000054c 	andcs	r0, r0, ip, asr #10

00001280 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1284:	4604      	mov	r4, r0
    1286:	4616      	mov	r6, r2
    1288:	461d      	mov	r5, r3
    128a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    128e:	b921      	cbnz	r1, 129a <io+0x1a>
    1290:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1318 <io+0x98>
    1294:	f8d9 3000 	ldr.w	r3, [r9]
    1298:	b91b      	cbnz	r3, 12a2 <io+0x22>
		syserror (ENODEVICE, "io");
    129a:	2001      	movs	r0, #1
    129c:	491d      	ldr	r1, [pc, #116]	; (1314 <io+0x94>)
    129e:	f7ff f923 	bl	4e8 <__pi_syserror>
	if (len == 0)
    12a2:	f1b8 0f00 	cmp.w	r8, #0
    12a6:	d028      	beq.n	12fa <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	4642      	mov	r2, r8
    12aa:	4629      	mov	r1, r5
    12ac:	4630      	mov	r0, r6
    12ae:	4798      	blx	r3
	if (ret >= 0)
    12b0:	2800      	cmp	r0, #0
    12b2:	da23      	bge.n	12fc <io+0x7c>
	if (ret == -1) {
    12b4:	1c41      	adds	r1, r0, #1
    12b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12ba:	d108      	bne.n	12ce <io+0x4e>
		if (retry == WNONE)
    12bc:	429c      	cmp	r4, r3
    12be:	d01c      	beq.n	12fa <io+0x7a>
		iowait (dev, operation, retry);
    12c0:	4621      	mov	r1, r4
    12c2:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    12c6:	f7ff ff3d 	bl	1144 <__pi_wait>
			release;
    12ca:	f7ff fccb 	bl	c64 <__pi_release>
	if (ret == -2) {
    12ce:	1c82      	adds	r2, r0, #2
    12d0:	d116      	bne.n	1300 <io+0x80>
		if (retry != WNONE) {
    12d2:	429c      	cmp	r4, r3
    12d4:	f8d9 9000 	ldr.w	r9, [r9]
    12d8:	d00a      	beq.n	12f0 <io+0x70>
			iowait (dev, operation, retry);
    12da:	4621      	mov	r1, r4
    12dc:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    12e0:	f7ff ff30 	bl	1144 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    12e4:	4642      	mov	r2, r8
    12e6:	4629      	mov	r1, r5
    12e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12ec:	47c8      	blx	r9
    12ee:	e7ec      	b.n	12ca <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    12f0:	4642      	mov	r2, r8
    12f2:	4629      	mov	r1, r5
    12f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12f8:	47c8      	blx	r9
		return 0;
    12fa:	2000      	movs	r0, #0
}
    12fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1300:	429c      	cmp	r4, r3
    1302:	d0fa      	beq.n	12fa <io+0x7a>
		delay (-ret - 2, retry);
    1304:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1308:	30fe      	adds	r0, #254	; 0xfe
    130a:	4621      	mov	r1, r4
    130c:	b280      	uxth	r0, r0
    130e:	f7ff ff5f 	bl	11d0 <delay>
		release;
    1312:	e7da      	b.n	12ca <io+0x4a>
    1314:	00004477 	andeq	r4, r0, r7, ror r4
    1318:	2000054c 	andcs	r0, r0, ip, asr #10

0000131c <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	4a0d      	ldr	r2, [pc, #52]	; (1354 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    131e:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1320:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1324:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1328:	089b      	lsrs	r3, r3, #2
    132a:	1e59      	subs	r1, r3, #1
    132c:	29ff      	cmp	r1, #255	; 0xff
    132e:	d803      	bhi.n	1338 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1330:	2004      	movs	r0, #4
    1332:	4909      	ldr	r1, [pc, #36]	; (1358 <__pi_malloc_init+0x3c>)
    1334:	f7ff f8d8 	bl	4e8 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1338:	4908      	ldr	r1, [pc, #32]	; (135c <__pi_malloc_init+0x40>)
    133a:	1d10      	adds	r0, r2, #4
    133c:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    133e:	2000      	movs	r0, #0
    1340:	4907      	ldr	r1, [pc, #28]	; (1360 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1342:	3b02      	subs	r3, #2
    1344:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1346:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    134a:	4a06      	ldr	r2, [pc, #24]	; (1364 <__pi_malloc_init+0x48>)
    134c:	6013      	str	r3, [r2, #0]
    134e:	4a06      	ldr	r2, [pc, #24]	; (1368 <__pi_malloc_init+0x4c>)
    1350:	6013      	str	r3, [r2, #0]
}
    1352:	bd08      	pop	{r3, pc}
    1354:	20000b74 	andcs	r0, r0, r4, ror fp
    1358:	0000447a 	andeq	r4, r0, sl, ror r4
    135c:	2000055c 	andcs	r0, r0, ip, asr r5
    1360:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1364:	20000550 	andcs	r0, r0, r0, asr r5
    1368:	20000558 	andcs	r0, r0, r8, asr r5

0000136c <__pi_free>:
void __pi_free (aword *ch) {
    136c:	b508      	push	{r3, lr}
	if (ch == NULL)
    136e:	b1c8      	cbz	r0, 13a4 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1374:	2b00      	cmp	r3, #0
    1376:	db03      	blt.n	1380 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1378:	2006      	movs	r0, #6
    137a:	490b      	ldr	r1, [pc, #44]	; (13a8 <__pi_free+0x3c>)
    137c:	f7ff f8b4 	bl	4e8 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1380:	490a      	ldr	r1, [pc, #40]	; (13ac <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1382:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1386:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1388:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    138c:	4413      	add	r3, r2
    138e:	600b      	str	r3, [r1, #0]
	QFREE;
    1390:	f7ff fdfa 	bl	f88 <qfree>
	if (mevent [MA_NP] . nwait) {
    1394:	4806      	ldr	r0, [pc, #24]	; (13b0 <__pi_free+0x44>)
    1396:	7803      	ldrb	r3, [r0, #0]
    1398:	b123      	cbz	r3, 13a4 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    139a:	f7ff feed 	bl	1178 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    139e:	7803      	ldrb	r3, [r0, #0]
    13a0:	3b01      	subs	r3, #1
    13a2:	7003      	strb	r3, [r0, #0]
}
    13a4:	bd08      	pop	{r3, pc}
    13a6:	bf00      	nop
    13a8:	0000447f 	andeq	r4, r0, pc, ror r4
    13ac:	20000550 	andcs	r0, r0, r0, asr r5
    13b0:	20000554 	andcs	r0, r0, r4, asr r5

000013b4 <kill>:
void kill (aword pid) {
    13b4:	b510      	push	{r4, lr}
	if (pid == 0)
    13b6:	b908      	cbnz	r0, 13bc <kill+0x8>
		pid = (aword) __pi_curr;
    13b8:	4b0f      	ldr	r3, [pc, #60]	; (13f8 <kill+0x44>)
    13ba:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    13bc:	2200      	movs	r2, #0
	for_all_tasks (i) {
    13be:	4b0f      	ldr	r3, [pc, #60]	; (13fc <kill+0x48>)
    13c0:	681c      	ldr	r4, [r3, #0]
    13c2:	b91c      	cbnz	r4, 13cc <kill+0x18>
	syserror (EREQPAR, "kpi");
    13c4:	2003      	movs	r0, #3
    13c6:	490e      	ldr	r1, [pc, #56]	; (1400 <kill+0x4c>)
    13c8:	f7ff f88e 	bl	4e8 <__pi_syserror>
		if ((aword)i == pid) {
    13cc:	4284      	cmp	r4, r0
    13ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    13d0:	d10e      	bne.n	13f0 <kill+0x3c>
			if (j == NULL)
    13d2:	b95a      	cbnz	r2, 13ec <kill+0x38>
				__PCB = i->Next;
    13d4:	6019      	str	r1, [r3, #0]
			killev (i);
    13d6:	4620      	mov	r0, r4
    13d8:	f7ff fdb8 	bl	f4c <killev>
			ufree (i);
    13dc:	f7ff ffc6 	bl	136c <__pi_free>
			if (i == __pi_curr)
    13e0:	4b05      	ldr	r3, [pc, #20]	; (13f8 <kill+0x44>)
    13e2:	681b      	ldr	r3, [r3, #0]
    13e4:	42a3      	cmp	r3, r4
    13e6:	d106      	bne.n	13f6 <kill+0x42>
				release;
    13e8:	f7ff fc3c 	bl	c64 <__pi_release>
				j->Next = i->Next;
    13ec:	62d1      	str	r1, [r2, #44]	; 0x2c
    13ee:	e7f2      	b.n	13d6 <kill+0x22>
    13f0:	4622      	mov	r2, r4
    13f2:	460c      	mov	r4, r1
    13f4:	e7e5      	b.n	13c2 <kill+0xe>
}
    13f6:	bd10      	pop	{r4, pc}
    13f8:	20000b6c 	andcs	r0, r0, ip, ror #22
    13fc:	20000548 	andcs	r0, r0, r8, asr #10
    1400:	00004484 	andeq	r4, r0, r4, lsl #9

00001404 <__pi_malloc>:
	if (size < 8)
    1404:	2807      	cmp	r0, #7
		_size = 2;
    1406:	bf98      	it	ls
    1408:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    140a:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    140c:	4b21      	ldr	r3, [pc, #132]	; (1494 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    140e:	bf88      	it	hi
    1410:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1412:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1414:	4920      	ldr	r1, [pc, #128]	; (1498 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1416:	bf88      	it	hi
    1418:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    141a:	b94c      	cbnz	r4, 1430 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    141c:	4a1f      	ldr	r2, [pc, #124]	; (149c <__pi_malloc+0x98>)
    141e:	7853      	ldrb	r3, [r2, #1]
    1420:	2bff      	cmp	r3, #255	; 0xff
    1422:	d001      	beq.n	1428 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1424:	3301      	adds	r3, #1
    1426:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1428:	2200      	movs	r2, #0
    142a:	4b1d      	ldr	r3, [pc, #116]	; (14a0 <__pi_malloc+0x9c>)
    142c:	601a      	str	r2, [r3, #0]
	return chunk;
    142e:	e02f      	b.n	1490 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1430:	6862      	ldr	r2, [r4, #4]
    1432:	428a      	cmp	r2, r1
    1434:	d003      	beq.n	143e <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1436:	2006      	movs	r0, #6
    1438:	491a      	ldr	r1, [pc, #104]	; (14a4 <__pi_malloc+0xa0>)
    143a:	f7ff f855 	bl	4e8 <__pi_syserror>
		if (m_size (chunk) >= _size)
    143e:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1442:	4285      	cmp	r5, r0
    1444:	d202      	bcs.n	144c <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1446:	4623      	mov	r3, r4
    1448:	4614      	mov	r4, r2
    144a:	e7e6      	b.n	141a <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    144c:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    144e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1452:	1a1b      	subs	r3, r3, r0
    1454:	2b08      	cmp	r3, #8
    1456:	d909      	bls.n	146c <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1458:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    145c:	3001      	adds	r0, #1
    145e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1462:	3b01      	subs	r3, #1
    1464:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1468:	f7ff fd8e 	bl	f88 <qfree>
		mevent [MA_NP] . nfail = 0;
    146c:	2200      	movs	r2, #0
    146e:	4b0b      	ldr	r3, [pc, #44]	; (149c <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1470:	490d      	ldr	r1, [pc, #52]	; (14a8 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1472:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1474:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1478:	680b      	ldr	r3, [r1, #0]
    147a:	1a9b      	subs	r3, r3, r2
    147c:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    147e:	4908      	ldr	r1, [pc, #32]	; (14a0 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1480:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1484:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1486:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    148a:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    148c:	bf38      	it	cc
    148e:	600b      	strcc	r3, [r1, #0]
}
    1490:	4620      	mov	r0, r4
    1492:	bd38      	pop	{r3, r4, r5, pc}
    1494:	2000055c 	andcs	r0, r0, ip, asr r5
    1498:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    149c:	20000554 	andcs	r0, r0, r4, asr r5
    14a0:	20000558 	andcs	r0, r0, r8, asr r5
    14a4:	00004488 	andeq	r4, r0, r8, lsl #9
    14a8:	20000550 	andcs	r0, r0, r0, asr r5

000014ac <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    14ac:	b538      	push	{r3, r4, r5, lr}
    14ae:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    14b2:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b4:	f7ff ffa6 	bl	1404 <__pi_malloc>
    14b8:	2300      	movs	r3, #0
    14ba:	b138      	cbz	r0, 14cc <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    14bc:	4a07      	ldr	r2, [pc, #28]	; (14dc <__pi_fork+0x30>)
	i->Status = 0;
    14be:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    14c0:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    14c2:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    14c4:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    14c8:	b90b      	cbnz	r3, 14ce <__pi_fork+0x22>
			__PCB = i;
    14ca:	6010      	str	r0, [r2, #0]
}
    14cc:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    14ce:	461a      	mov	r2, r3
    14d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14d2:	2b00      	cmp	r3, #0
    14d4:	d1fb      	bne.n	14ce <__pi_fork+0x22>
			j->Next = i;
    14d6:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    14d8:	e7f8      	b.n	14cc <__pi_fork+0x20>
    14da:	bf00      	nop
    14dc:	20000548 	andcs	r0, r0, r8, asr #10

000014e0 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    14e0:	4a04      	ldr	r2, [pc, #16]	; (14f4 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    14e2:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    14e4:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    14e6:	4803      	ldr	r0, [pc, #12]	; (14f4 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    14e8:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    14ea:	bf1c      	itt	ne
    14ec:	3301      	addne	r3, #1
    14ee:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    14f0:	f7ff be28 	b.w	1144 <__pi_wait>
    14f4:	20000554 	andcs	r0, r0, r4, asr r5

000014f8 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    14f8:	b40f      	push	{r0, r1, r2, r3}
    14fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    14fe:	ab0a      	add	r3, sp, #40	; 0x28
    1500:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1504:	2015      	movs	r0, #21
	va_start (ap, mess);
    1506:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1508:	4b46      	ldr	r3, [pc, #280]	; (1624 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    150a:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    150c:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    150e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 162c <diag+0x134>
	diag_disable_int (a, is);
    1512:	695b      	ldr	r3, [r3, #20]
    1514:	4798      	blx	r3
	while (*mess != '\0') {
    1516:	7820      	ldrb	r0, [r4, #0]
    1518:	b998      	cbnz	r0, 1542 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    151a:	200d      	movs	r0, #13
    151c:	f7ff fd74 	bl	1008 <dgout>
	dgout ('\n');
    1520:	200a      	movs	r0, #10
    1522:	f7ff fd71 	bl	1008 <dgout>
    1526:	4a40      	ldr	r2, [pc, #256]	; (1628 <diag+0x130>)
    1528:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    152a:	071b      	lsls	r3, r3, #28
    152c:	d4fc      	bmi.n	1528 <diag+0x30>
	diag_enable_int (a, is);
    152e:	4b3d      	ldr	r3, [pc, #244]	; (1624 <diag+0x12c>)
    1530:	2015      	movs	r0, #21
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	691b      	ldr	r3, [r3, #16]
    1536:	4798      	blx	r3
}
    1538:	b003      	add	sp, #12
    153a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    153e:	b004      	add	sp, #16
    1540:	4770      	bx	lr
		if (*mess == '%') {
    1542:	2825      	cmp	r0, #37	; 0x25
    1544:	f104 0601 	add.w	r6, r4, #1
    1548:	d169      	bne.n	161e <diag+0x126>
			if (*mess == 'l') {
    154a:	9b01      	ldr	r3, [sp, #4]
    154c:	7862      	ldrb	r2, [r4, #1]
    154e:	f853 1b04 	ldr.w	r1, [r3], #4
    1552:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1554:	bf08      	it	eq
    1556:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1558:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    155a:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    155c:	bf0c      	ite	eq
    155e:	2520      	moveq	r5, #32
				bc = 16;
    1560:	2510      	movne	r5, #16
			switch (*mess) {
    1562:	2b75      	cmp	r3, #117	; 0x75
    1564:	d04e      	beq.n	1604 <diag+0x10c>
    1566:	d80a      	bhi.n	157e <diag+0x86>
    1568:	2b64      	cmp	r3, #100	; 0x64
    156a:	d01c      	beq.n	15a6 <diag+0xae>
    156c:	2b73      	cmp	r3, #115	; 0x73
    156e:	d052      	beq.n	1616 <diag+0x11e>
				dgout ('%');
    1570:	2025      	movs	r0, #37	; 0x25
    1572:	f7ff fd49 	bl	1008 <dgout>
				dgout (*mess);
    1576:	7830      	ldrb	r0, [r6, #0]
    1578:	f7ff fd46 	bl	1008 <dgout>
    157c:	e010      	b.n	15a0 <diag+0xa8>
			switch (*mess) {
    157e:	2b78      	cmp	r3, #120	; 0x78
    1580:	d1f6      	bne.n	1570 <diag+0x78>
    1582:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1584:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1630 <diag+0x138>
					i += 4;
    1588:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    158a:	1b2b      	subs	r3, r5, r4
    158c:	fa21 f303 	lsr.w	r3, r1, r3
    1590:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1594:	f819 0003 	ldrb.w	r0, [r9, r3]
    1598:	f7ff fd36 	bl	1008 <dgout>
				while (i < bc) {
    159c:	42a5      	cmp	r5, r4
    159e:	dcf3      	bgt.n	1588 <diag+0x90>
			mess++;
    15a0:	3601      	adds	r6, #1
					d /= 10;
    15a2:	4634      	mov	r4, r6
    15a4:	e7b7      	b.n	1516 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    15a6:	1e6b      	subs	r3, r5, #1
    15a8:	fa21 f303 	lsr.w	r3, r1, r3
    15ac:	07da      	lsls	r2, r3, #31
    15ae:	d509      	bpl.n	15c4 <diag+0xcc>
					dgout ('-');
    15b0:	202d      	movs	r0, #45	; 0x2d
    15b2:	f7ff fd29 	bl	1008 <dgout>
					if (bc == 16)
    15b6:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    15b8:	bf04      	itt	eq
    15ba:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    15be:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    15c2:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    15c4:	f242 7410 	movw	r4, #10000	; 0x2710
    15c8:	2d10      	cmp	r5, #16
    15ca:	bf18      	it	ne
    15cc:	4644      	movne	r4, r8
					v = (word) (val / d);
    15ce:	fbb1 f5f4 	udiv	r5, r1, r4
    15d2:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    15d4:	b935      	cbnz	r5, 15e4 <diag+0xec>
    15d6:	2c01      	cmp	r4, #1
    15d8:	d004      	beq.n	15e4 <diag+0xec>
					d /= 10;
    15da:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    15de:	e7f6      	b.n	15ce <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    15e0:	4c12      	ldr	r4, [pc, #72]	; (162c <diag+0x134>)
    15e2:	e7f4      	b.n	15ce <diag+0xd6>
					dgout (v + '0');
    15e4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    15e8:	b280      	uxth	r0, r0
    15ea:	f7ff fd0d 	bl	1008 <dgout>
					if (d == 0) break;
    15ee:	2c09      	cmp	r4, #9
					d /= 10;
    15f0:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    15f4:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    15f8:	d9d2      	bls.n	15a0 <diag+0xa8>
					v = (word) (val / d);
    15fa:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    15fe:	461c      	mov	r4, r3
					v = (word) (val / d);
    1600:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1602:	e7ef      	b.n	15e4 <diag+0xec>
				if (bc == 16)
    1604:	2d10      	cmp	r5, #16
    1606:	d1eb      	bne.n	15e0 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1608:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    160c:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    160e:	e7de      	b.n	15ce <diag+0xd6>
					dgout (*s);
    1610:	f7ff fcfa 	bl	1008 <dgout>
					s++;
    1614:	3101      	adds	r1, #1
				while (*s != '\0') {
    1616:	7808      	ldrb	r0, [r1, #0]
    1618:	2800      	cmp	r0, #0
    161a:	d1f9      	bne.n	1610 <diag+0x118>
    161c:	e7c0      	b.n	15a0 <diag+0xa8>
			dgout (*mess++);
    161e:	f7ff fcf3 	bl	1008 <dgout>
    1622:	e7be      	b.n	15a2 <diag+0xaa>
    1624:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1628:	40001018 	andmi	r1, r0, r8, lsl r0
    162c:	3b9aca00 	blcc	fe6b3e34 <_estack+0xde6aee34>
    1630:	0000448d 	andeq	r4, r0, sp, lsl #9

00001634 <lrnd>:
// ============================================================================
// High-quality RNG (oh, well, as high as we can afford) ======================
// ============================================================================
#if RANDOM_NUMBER_GENERATOR > 1
lword lrnd () {
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1634:	f243 0039 	movw	r0, #12345	; 0x3039
    1638:	4a04      	ldr	r2, [pc, #16]	; (164c <lrnd+0x18>)
    163a:	4905      	ldr	r1, [pc, #20]	; (1650 <lrnd+0x1c>)
    163c:	6813      	ldr	r3, [r2, #0]
    163e:	fb01 0303 	mla	r3, r1, r3, r0
    1642:	6013      	str	r3, [r2, #0]
	return __pi_seed
#if ENTROPY_COLLECTION
	^ entropy
    1644:	4a03      	ldr	r2, [pc, #12]	; (1654 <lrnd+0x20>)
    1646:	6810      	ldr	r0, [r2, #0]
#endif
	;
}
    1648:	4058      	eors	r0, r3
    164a:	4770      	bx	lr
    164c:	20000004 	andcs	r0, r0, r4
    1650:	41c64e6d 	bicmi	r4, r6, sp, ror #28
    1654:	20000b48 	andcs	r0, r0, r8, asr #22

00001658 <apb>:
/*
 * Forced implicit packet dropping removed. Plugins will have to drop
 * packets explicitly (if they really want to).
 */

__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1658:	b510      	push	{r4, lr}
    165a:	4604      	mov	r4, r0
/* ========================================= */
/* Allocates a packet buffer size bytes long */
/* ========================================= */

	hblock_t *p;
	word cs = size + hblenb;
    165c:	300c      	adds	r0, #12

	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    165e:	b280      	uxth	r0, r0
    1660:	f7ff fed0 	bl	1404 <__pi_malloc>
    1664:	b110      	cbz	r0, 166c <apb+0x14>

#if	TCV_HOOKS
	p -> hptr = NULL;
#endif
	p -> length = size;
	p -> attributes . value = 0;
    1666:	2300      	movs	r3, #0
	p -> length = size;
    1668:	8104      	strh	r4, [r0, #8]
	p -> attributes . value = 0;
    166a:	8143      	strh	r3, [r0, #10]
#endif
	return p;
	/*
	 * Note that this doesn't initialize the plugin/phys/session stuff.
	 */
}
    166c:	bd10      	pop	{r4, pc}

0000166e <deq>:
	if (p->attributes.b.queued) {
    166e:	7a83      	ldrb	r3, [r0, #10]
    1670:	07db      	lsls	r3, r3, #31
    1672:	d508      	bpl.n	1686 <deq+0x18>
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1674:	e9d0 2300 	ldrd	r2, r3, [r0]
    1678:	6053      	str	r3, [r2, #4]
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    167a:	6802      	ldr	r2, [r0, #0]
    167c:	601a      	str	r2, [r3, #0]
		p->attributes.b.queued = 0;
    167e:	7a83      	ldrb	r3, [r0, #10]
    1680:	f36f 0300 	bfc	r3, #0, #1
    1684:	7283      	strb	r3, [r0, #10]
}
    1686:	4770      	bx	lr

00001688 <rlp>:
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1688:	b508      	push	{r3, lr}
	deq (p);	// Remove from queue
    168a:	f7ff fff0 	bl	166e <deq>
}
    168e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tfree ((address)p);
    1692:	f7ff be6b 	b.w	136c <__pi_free>
	...

00001698 <enq>:
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	b538      	push	{r3, r4, r5, lr}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    169a:	7a8b      	ldrb	r3, [r1, #10]
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    169c:	4605      	mov	r5, r0
	sysassert (p->attributes.b.queued == 0, "tcv01");
    169e:	07da      	lsls	r2, r3, #31
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    16a0:	460c      	mov	r4, r1
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a2:	d503      	bpl.n	16ac <enq+0x14>
    16a4:	200a      	movs	r0, #10
    16a6:	490e      	ldr	r1, [pc, #56]	; (16e0 <enq+0x48>)
    16a8:	f7fe ff1e 	bl	4e8 <__pi_syserror>
	if (q_empty (q))
    16ac:	6803      	ldr	r3, [r0, #0]
    16ae:	4283      	cmp	r3, r0
    16b0:	d101      	bne.n	16b6 <enq+0x1e>
		trigger (q);
    16b2:	f7ff fd61 	bl	1178 <__pi_trigger>
	if (p->attributes.b.urgent) {
    16b6:	7aa3      	ldrb	r3, [r4, #10]
    16b8:	075b      	lsls	r3, r3, #29
    16ba:	d50a      	bpl.n	16d2 <enq+0x3a>
		p->u.bqueue.next = q->next;
    16bc:	682b      	ldr	r3, [r5, #0]
		p->u.bqueue.prev = q;
    16be:	e9c4 3500 	strd	r3, r5, [r4]
		q->next->prev = (qitem_t*) p;
    16c2:	682b      	ldr	r3, [r5, #0]
    16c4:	605c      	str	r4, [r3, #4]
		q->next = (qitem_t*) p;
    16c6:	602c      	str	r4, [r5, #0]
	p->attributes.b.queued = 1;
    16c8:	7aa3      	ldrb	r3, [r4, #10]
    16ca:	f043 0301 	orr.w	r3, r3, #1
    16ce:	72a3      	strb	r3, [r4, #10]
}
    16d0:	bd38      	pop	{r3, r4, r5, pc}
		p->u.bqueue.next = q;
    16d2:	6025      	str	r5, [r4, #0]
		p->u.bqueue.prev = q->prev;
    16d4:	686b      	ldr	r3, [r5, #4]
    16d6:	6063      	str	r3, [r4, #4]
		q->prev->next = (qitem_t*) p;
    16d8:	601c      	str	r4, [r3, #0]
		q->prev = (qitem_t*) p;
    16da:	606c      	str	r4, [r5, #4]
    16dc:	e7f4      	b.n	16c8 <enq+0x30>
    16de:	bf00      	nop
    16e0:	0000449d 	muleq	r0, sp, r4

000016e4 <dispose>:
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e4:	b510      	push	{r4, lr}
    16e6:	4604      	mov	r4, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    16e8:	f7ff ffc1 	bl	166e <deq>
	switch (dv) {
    16ec:	3901      	subs	r1, #1
    16ee:	2904      	cmp	r1, #4
    16f0:	d832      	bhi.n	1758 <dispose+0x74>
    16f2:	e8df f001 	tbb	[pc, r1]
    16f6:	1d03072d 	stcne	7, cr0, [r3, #-180]	; 0xffffff4c
    16fa:	7a830019 	bvc	fe0c1766 <_estack+0xde0bc766>
			p->attributes.b.urgent = 1;
    16fe:	f043 0304 	orr.w	r3, r3, #4
    1702:	7283      	strb	r3, [r0, #10]
			verify_ses (p, "dispose ses");
    1704:	8963      	ldrh	r3, [r4, #10]
    1706:	f3c3 03c6 	ubfx	r3, r3, #3, #7
    170a:	2b07      	cmp	r3, #7
    170c:	d803      	bhi.n	1716 <dispose+0x32>
    170e:	4a13      	ldr	r2, [pc, #76]	; (175c <dispose+0x78>)
    1710:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    1714:	b918      	cbnz	r0, 171e <dispose+0x3a>
    1716:	4912      	ldr	r1, [pc, #72]	; (1760 <dispose+0x7c>)
			verify_phy (p, "dispose phy");
    1718:	200a      	movs	r0, #10
    171a:	f7fe fee5 	bl	4e8 <__pi_syserror>
			enq (&(descriptors [p->attributes.b.session]->rqueue),
    171e:	4621      	mov	r1, r4
}
    1720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			enq (oqueues [p->attributes.b.phys], p);
    1724:	f7ff bfb8 	b.w	1698 <enq>
			p->attributes.b.urgent = 1;
    1728:	7a83      	ldrb	r3, [r0, #10]
    172a:	f043 0304 	orr.w	r3, r3, #4
    172e:	7283      	strb	r3, [r0, #10]
			verify_phy (p, "dispose phy");
    1730:	7ae2      	ldrb	r2, [r4, #11]
    1732:	2a5f      	cmp	r2, #95	; 0x5f
    1734:	ea4f 1352 	mov.w	r3, r2, lsr #5
    1738:	d803      	bhi.n	1742 <dispose+0x5e>
    173a:	4a0a      	ldr	r2, [pc, #40]	; (1764 <dispose+0x80>)
    173c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1740:	b90a      	cbnz	r2, 1746 <dispose+0x62>
    1742:	4909      	ldr	r1, [pc, #36]	; (1768 <dispose+0x84>)
    1744:	e7e8      	b.n	1718 <dispose+0x34>
			enq (oqueues [p->attributes.b.phys], p);
    1746:	4a09      	ldr	r2, [pc, #36]	; (176c <dispose+0x88>)
    1748:	4621      	mov	r1, r4
    174a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    174e:	e7e7      	b.n	1720 <dispose+0x3c>
}
    1750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			rlp (p);
    1754:	f7ff bf98 	b.w	1688 <rlp>
}
    1758:	bd10      	pop	{r4, pc}
    175a:	bf00      	nop
    175c:	20000560 	andcs	r0, r0, r0, ror #10
    1760:	000044a3 	andeq	r4, r0, r3, lsr #9
    1764:	2000058c 	andcs	r0, r0, ip, lsl #11
    1768:	000044af 	andeq	r4, r0, pc, lsr #9
    176c:	20000580 	andcs	r0, r0, r0, lsl #11

00001770 <tcv_endp>:
		/* ===================================== */
		/* Functions callable by the application */
		/* ===================================== */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1770:	b510      	push	{r4, lr}
 * somewhere or deallocated.
 */
	hblock_t *b;

	b = header (p);
	if (b->attributes.b.outgoing) {
    1772:	f810 2c02 	ldrb.w	r2, [r0, #-2]
	b = header (p);
    1776:	f1a0 040c 	sub.w	r4, r0, #12
	if (b->attributes.b.outgoing) {
    177a:	0792      	lsls	r2, r2, #30
    177c:	d522      	bpl.n	17c4 <tcv_endp+0x54>
		verify_ses (b, "tcv02");
    177e:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    1782:	f3c2 02c6 	ubfx	r2, r2, #3, #7
    1786:	2a07      	cmp	r2, #7
    1788:	d803      	bhi.n	1792 <tcv_endp+0x22>
    178a:	4911      	ldr	r1, [pc, #68]	; (17d0 <tcv_endp+0x60>)
    178c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1790:	b91a      	cbnz	r2, 179a <tcv_endp+0x2a>
    1792:	4910      	ldr	r1, [pc, #64]	; (17d4 <tcv_endp+0x64>)
		verify_plg (b, tcv_out, "tcv03");
    1794:	200a      	movs	r0, #10
    1796:	f7fe fea7 	bl	4e8 <__pi_syserror>
    179a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    179e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    17a2:	2b02      	cmp	r3, #2
    17a4:	d805      	bhi.n	17b2 <tcv_endp+0x42>
    17a6:	4a0c      	ldr	r2, [pc, #48]	; (17d8 <tcv_endp+0x68>)
    17a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    17ac:	b10b      	cbz	r3, 17b2 <tcv_endp+0x42>
    17ae:	691b      	ldr	r3, [r3, #16]
    17b0:	b90b      	cbnz	r3, 17b6 <tcv_endp+0x46>
    17b2:	490a      	ldr	r1, [pc, #40]	; (17dc <tcv_endp+0x6c>)
    17b4:	e7ee      	b.n	1794 <tcv_endp+0x24>
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b6:	4798      	blx	r3
    17b8:	4601      	mov	r1, r0
    17ba:	4620      	mov	r0, r4
		 * This is a received packet - just drop it, no need to verify
		 * session, can be legitimately invoked after the session has
		 * been closed,
		 */
		rlp (b);
}
    17bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dispose (b, plugins [b->attributes.b.plugin] ->
    17c0:	f7ff bf90 	b.w	16e4 <dispose>
		rlp (b);
    17c4:	4620      	mov	r0, r4
}
    17c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rlp (b);
    17ca:	f7ff bf5d 	b.w	1688 <rlp>
    17ce:	bf00      	nop
    17d0:	20000560 	andcs	r0, r0, r0, ror #10
    17d4:	000044bb 			; <UNDEFINED> instruction: 0x000044bb
    17d8:	200005a4 	andcs	r0, r0, r4, lsr #11
    17dc:	000044c1 	andeq	r4, r0, r1, asr #9

000017e0 <tcv_open>:
#else
// ============================================================================

// Non-blocking open and close

__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17e0:	b40c      	push	{r2, r3}
    17e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    17e6:	ab0a      	add	r3, sp, #40	; 0x28
    17e8:	f853 8b04 	ldr.w	r8, [r3], #4
	va_list		ap;
	va_start (ap, plid);

#if DIAG_MESSAGES > 1
	/* Check if we have the plugin and the phy */
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17ec:	2902      	cmp	r1, #2
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17ee:	460f      	mov	r7, r1
	va_start (ap, plid);
    17f0:	9301      	str	r3, [sp, #4]
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f2:	d80b      	bhi.n	180c <tcv_open+0x2c>
    17f4:	4b24      	ldr	r3, [pc, #144]	; (1888 <tcv_open+0xa8>)
    17f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    17fa:	b13b      	cbz	r3, 180c <tcv_open+0x2c>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17fc:	f1b8 0f02 	cmp.w	r8, #2
    1800:	d804      	bhi.n	180c <tcv_open+0x2c>
    1802:	4b22      	ldr	r3, [pc, #136]	; (188c <tcv_open+0xac>)
    1804:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    1808:	4699      	mov	r9, r3
    180a:	b91a      	cbnz	r2, 1814 <tcv_open+0x34>
			syserror (ENODEVICE, "tcv04");
    180c:	2001      	movs	r0, #1
    180e:	4920      	ldr	r1, [pc, #128]	; (1890 <tcv_open+0xb0>)
	if (fd == TCV_MAX_DESC)
		return ERROR;

	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
	if (s == NULL)
		syserror (EMALLOC, "tcv05");
    1810:	f7fe fe6a 	bl	4e8 <__pi_syserror>
	attp.b.outgoing = 1;
    1814:	f008 0307 	and.w	r3, r8, #7
    1818:	029b      	lsls	r3, r3, #10
    181a:	f043 0302 	orr.w	r3, r3, #2
    181e:	ea43 3541 	orr.w	r5, r3, r1, lsl #13
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1822:	4b1c      	ldr	r3, [pc, #112]	; (1894 <tcv_open+0xb4>)
    1824:	2600      	movs	r6, #0
    1826:	469a      	mov	sl, r3
		if (descriptors [fd] == NULL)
    1828:	f853 2b04 	ldr.w	r2, [r3], #4
    182c:	b312      	cbz	r2, 1874 <tcv_open+0x94>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    182e:	3601      	adds	r6, #1
    1830:	2e08      	cmp	r6, #8
    1832:	d1f9      	bne.n	1828 <tcv_open+0x48>
		return ERROR;
    1834:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		return ERROR;
	}

	descriptors [fd] = s;
	return fd;
}
    1838:	4630      	mov	r0, r6
    183a:	b002      	add	sp, #8
    183c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1840:	b002      	add	sp, #8
    1842:	4770      	bx	lr
	s->attpattern.b.session = fd;
    1844:	462b      	mov	r3, r5
    1846:	f366 03c9 	bfi	r3, r6, #3, #7
	descriptors [fd] = s;
    184a:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	s->attpattern.b.session = fd;
    184e:	8123      	strh	r3, [r4, #8]
	q_init (&(s->rqueue));
    1850:	e9c4 4400 	strd	r4, r4, [r4]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1854:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
    1858:	681b      	ldr	r3, [r3, #0]
    185a:	b913      	cbnz	r3, 1862 <tcv_open+0x82>
    185c:	200a      	movs	r0, #10
    185e:	490e      	ldr	r1, [pc, #56]	; (1898 <tcv_open+0xb8>)
    1860:	e7d6      	b.n	1810 <tcv_open+0x30>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1862:	4631      	mov	r1, r6
    1864:	4638      	mov	r0, r7
    1866:	9a01      	ldr	r2, [sp, #4]
    1868:	4798      	blx	r3
    186a:	2800      	cmp	r0, #0
    186c:	d1e2      	bne.n	1834 <tcv_open+0x54>
	descriptors [fd] = s;
    186e:	f84a 4026 	str.w	r4, [sl, r6, lsl #2]
	return fd;
    1872:	e7e1      	b.n	1838 <tcv_open+0x58>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1874:	200c      	movs	r0, #12
    1876:	f7ff fdc5 	bl	1404 <__pi_malloc>
	if (s == NULL)
    187a:	4604      	mov	r4, r0
    187c:	2800      	cmp	r0, #0
    187e:	d1e1      	bne.n	1844 <tcv_open+0x64>
		syserror (EMALLOC, "tcv05");
    1880:	2006      	movs	r0, #6
    1882:	4906      	ldr	r1, [pc, #24]	; (189c <tcv_open+0xbc>)
    1884:	e7c4      	b.n	1810 <tcv_open+0x30>
    1886:	bf00      	nop
    1888:	20000580 	andcs	r0, r0, r0, lsl #11
    188c:	200005a4 	andcs	r0, r0, r4, lsr #11
    1890:	000044c7 	andeq	r4, r0, r7, asr #9
    1894:	20000560 	andcs	r0, r0, r0, ror #10
    1898:	000044d3 	ldrdeq	r4, [r0], -r3
    189c:	000044cd 	andeq	r4, r0, sp, asr #9

000018a0 <tcv_plug>:

__PUBLF (PicOSNode, int, tcv_plug) (int ord, const tcvplug_t *pl) {
/*
 * This is one way now. Later we may implement switching plugs on the fly.
 */
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18a0:	2802      	cmp	r0, #2
    18a2:	d809      	bhi.n	18b8 <tcv_plug+0x18>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a4:	4b06      	ldr	r3, [pc, #24]	; (18c0 <tcv_plug+0x20>)
    18a6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18aa:	b10a      	cbz	r2, 18b0 <tcv_plug+0x10>
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18ac:	428a      	cmp	r2, r1
    18ae:	d103      	bne.n	18b8 <tcv_plug+0x18>
		return ERROR;

	plugins [ord] = pl;
    18b0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return 0;
    18b4:	2000      	movs	r0, #0
    18b6:	4770      	bx	lr
		return ERROR;
    18b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    18bc:	4770      	bx	lr
    18be:	bf00      	nop
    18c0:	200005a4 	andcs	r0, r0, r4, lsr #11

000018c4 <tcv_wnps>:
	hblock_t *b;
	tcvadp_t ptrs;
	sesdesc_t *s;
	int eid;

	verify_fds (fd, "tcv16");
    18c4:	2908      	cmp	r1, #8
								Boolean urg) {
    18c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18c8:	4605      	mov	r5, r0
    18ca:	4614      	mov	r4, r2
    18cc:	461e      	mov	r6, r3
	verify_fds (fd, "tcv16");
    18ce:	d803      	bhi.n	18d8 <tcv_wnps+0x14>
    18d0:	4b26      	ldr	r3, [pc, #152]	; (196c <tcv_wnps+0xa8>)
    18d2:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    18d6:	b91f      	cbnz	r7, 18e0 <tcv_wnps+0x1c>
    18d8:	4925      	ldr	r1, [pc, #148]	; (1970 <tcv_wnps+0xac>)

	s = descriptors [fd];

	verify_pld (s, tcv_frm, "tcv17");
    18da:	200a      	movs	r0, #10
    18dc:	f7fe fe04 	bl	4e8 <__pi_syserror>
    18e0:	7a7b      	ldrb	r3, [r7, #9]
    18e2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    18e6:	2b02      	cmp	r3, #2
    18e8:	d805      	bhi.n	18f6 <tcv_wnps+0x32>
    18ea:	4a22      	ldr	r2, [pc, #136]	; (1974 <tcv_wnps+0xb0>)
    18ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    18f0:	b10b      	cbz	r3, 18f6 <tcv_wnps+0x32>
    18f2:	68db      	ldr	r3, [r3, #12]
    18f4:	b90b      	cbnz	r3, 18fa <tcv_wnps+0x36>
    18f6:	4920      	ldr	r1, [pc, #128]	; (1978 <tcv_wnps+0xb4>)
    18f8:	e7ef      	b.n	18da <tcv_wnps+0x16>

	// tcv_frm invoked with packet == NULL, pass in the frame parameters
	// the session and urgent flag
	ptrs.head = (word) fd;
    18fa:	f8ad 1004 	strh.w	r1, [sp, #4]
	ptrs.tail = (word) urg;

	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    18fe:	2000      	movs	r0, #0
	ptrs.tail = (word) urg;
    1900:	f8ad 6006 	strh.w	r6, [sp, #6]
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1904:	a901      	add	r1, sp, #4
    1906:	4798      	blx	r3
    1908:	b158      	cbz	r0, 1922 <tcv_wnps+0x5e>
		// Blocked by the plugin
		if (state != WNONE) {
    190a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    190e:	429d      	cmp	r5, r3
    1910:	d102      	bne.n	1918 <tcv_wnps+0x54>
			when (eid, state);
			release;
		}
		return NULL;
    1912:	2000      	movs	r0, #0
		b->attributes.b.urgent = 1;
	b->u.pointers.head = ptrs.head;
	b->u.pointers.tail = length;

	return (address) (b + 1);
}
    1914:	b003      	add	sp, #12
    1916:	bdf0      	pop	{r4, r5, r6, r7, pc}
			when (eid, state);
    1918:	4629      	mov	r1, r5
    191a:	f7ff fc13 	bl	1144 <__pi_wait>
			release;
    191e:	f7ff f9a1 	bl	c64 <__pi_release>
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1922:	7a3b      	ldrb	r3, [r7, #8]
    1924:	07db      	lsls	r3, r3, #31
    1926:	d501      	bpl.n	192c <tcv_wnps+0x68>
    1928:	4914      	ldr	r1, [pc, #80]	; (197c <tcv_wnps+0xb8>)
    192a:	e7d6      	b.n	18da <tcv_wnps+0x16>
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    192c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    1930:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    1934:	b2a4      	uxth	r4, r4
    1936:	4418      	add	r0, r3
    1938:	4420      	add	r0, r4
    193a:	b280      	uxth	r0, r0
    193c:	f7ff fe8c 	bl	1658 <apb>
    1940:	b938      	cbnz	r0, 1952 <tcv_wnps+0x8e>
		if (state != WNONE) {
    1942:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1946:	429d      	cmp	r5, r3
    1948:	d0e3      	beq.n	1912 <tcv_wnps+0x4e>
			tmwait (state);
    194a:	4628      	mov	r0, r5
    194c:	f7ff fdc8 	bl	14e0 <__pi_waitmem>
    1950:	e7e5      	b.n	191e <tcv_wnps+0x5a>
	b->attributes = s->attpattern;
    1952:	893b      	ldrh	r3, [r7, #8]
    1954:	8143      	strh	r3, [r0, #10]
	if (urg)
    1956:	b11e      	cbz	r6, 1960 <tcv_wnps+0x9c>
		b->attributes.b.urgent = 1;
    1958:	7a83      	ldrb	r3, [r0, #10]
    195a:	f043 0304 	orr.w	r3, r3, #4
    195e:	7283      	strb	r3, [r0, #10]
	b->u.pointers.head = ptrs.head;
    1960:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	b->u.pointers.tail = length;
    1964:	8044      	strh	r4, [r0, #2]
	b->u.pointers.head = ptrs.head;
    1966:	8003      	strh	r3, [r0, #0]
	return (address) (b + 1);
    1968:	300c      	adds	r0, #12
    196a:	e7d3      	b.n	1914 <tcv_wnps+0x50>
    196c:	20000560 	andcs	r0, r0, r0, ror #10
    1970:	000044d9 	ldrdeq	r4, [r0], -r9
    1974:	200005a4 	andcs	r0, r0, r4, lsr #11
    1978:	000044df 	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    197c:	000044e5 	andeq	r4, r0, r5, ror #9

00001980 <tcvp_control>:
	           /* ================================ */
	           /* Functions callable by the plugin */
	           /* ================================ */
/* ---------------------------------------------------------------------- */

__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	4603      	mov	r3, r0
/*
 * Plugin version of interface control
 */
	verify_fph (phy, "tcv23");
    1982:	2b03      	cmp	r3, #3
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1984:	4608      	mov	r0, r1
    1986:	b510      	push	{r4, lr}
    1988:	4611      	mov	r1, r2
	verify_fph (phy, "tcv23");
    198a:	d803      	bhi.n	1994 <tcvp_control+0x14>
    198c:	4a05      	ldr	r2, [pc, #20]	; (19a4 <tcvp_control+0x24>)
    198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1992:	b91b      	cbnz	r3, 199c <tcvp_control+0x1c>
    1994:	200a      	movs	r0, #10
    1996:	4904      	ldr	r1, [pc, #16]	; (19a8 <tcvp_control+0x28>)
    1998:	f7fe fda6 	bl	4e8 <__pi_syserror>
	return (physical [phy]) (opt, arg);
}
    199c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return (physical [phy]) (opt, arg);
    19a0:	4718      	bx	r3
    19a2:	bf00      	nop
    19a4:	2000058c 	andcs	r0, r0, ip, lsl #11
    19a8:	000044eb 	andeq	r4, r0, fp, ror #9

000019ac <tcv_control>:
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19ac:	b508      	push	{r3, lr}
	if (opt < 0) {
    19ae:	1e0b      	subs	r3, r1, #0
    19b0:	da11      	bge.n	19d6 <tcv_control+0x2a>
		if (fd < 0)
    19b2:	2800      	cmp	r0, #0
    19b4:	db1f      	blt.n	19f6 <tcv_control+0x4a>
		if (opt == PHYSOPT_PLUGINFO) {
    19b6:	3301      	adds	r3, #1
    19b8:	d107      	bne.n	19ca <tcv_control+0x1e>
			if (fd >= TCV_MAX_PLUGS)
    19ba:	2802      	cmp	r0, #2
    19bc:	dc1b      	bgt.n	19f6 <tcv_control+0x4a>
			if ((p = plugins [fd]) == NULL)
    19be:	4b0f      	ldr	r3, [pc, #60]	; (19fc <tcv_control+0x50>)
    19c0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19c4:	b100      	cbz	r0, 19c8 <tcv_control+0x1c>
			return p->tcv_info;
    19c6:	69c0      	ldr	r0, [r0, #28]
}
    19c8:	bd08      	pop	{r3, pc}
		if (fd >= TCV_MAX_PHYS)
    19ca:	2802      	cmp	r0, #2
    19cc:	dc13      	bgt.n	19f6 <tcv_control+0x4a>
		return physinfo [fd];
    19ce:	4b0c      	ldr	r3, [pc, #48]	; (1a00 <tcv_control+0x54>)
    19d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    19d4:	e7f8      	b.n	19c8 <tcv_control+0x1c>
	verify_fds (fd, "tcv22");
    19d6:	2808      	cmp	r0, #8
    19d8:	d803      	bhi.n	19e2 <tcv_control+0x36>
    19da:	4b0a      	ldr	r3, [pc, #40]	; (1a04 <tcv_control+0x58>)
    19dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    19e0:	b91b      	cbnz	r3, 19ea <tcv_control+0x3e>
    19e2:	200a      	movs	r0, #10
    19e4:	4908      	ldr	r1, [pc, #32]	; (1a08 <tcv_control+0x5c>)
    19e6:	f7fe fd7f 	bl	4e8 <__pi_syserror>
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19ea:	7a58      	ldrb	r0, [r3, #9]
}
    19ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19f0:	0940      	lsrs	r0, r0, #5
    19f2:	f7ff bfc5 	b.w	1980 <tcvp_control>
			return 0;
    19f6:	2000      	movs	r0, #0
    19f8:	e7e6      	b.n	19c8 <tcv_control+0x1c>
    19fa:	bf00      	nop
    19fc:	200005a4 	andcs	r0, r0, r4, lsr #11
    1a00:	20000598 	mulcs	r0, r8, r5
    1a04:	20000560 	andcs	r0, r0, r0, ror #10
    1a08:	000044f1 	strdeq	r4, [r0], -r1

00001a0c <tcvp_new>:
 * Plugin-visible dispose
 */
	dispose (header (p), dsp);
}

__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a0e:	b280      	uxth	r0, r0
    1a10:	4615      	mov	r5, r2
/*
 * Create a new packet with attributes inherited from the session
 */
	hblock_t *p;

	if (dsp != TCV_DSP_PASS) {
    1a12:	460e      	mov	r6, r1
    1a14:	b309      	cbz	r1, 1a5a <tcvp_new+0x4e>

		/* Session must be defined for that */
		if (ses == NONE)
    1a16:	1c53      	adds	r3, r2, #1
    1a18:	d103      	bne.n	1a22 <tcvp_new+0x16>
			syserror (EREQPAR, "tcv26");
    1a1a:	2003      	movs	r0, #3
    1a1c:	4912      	ldr	r1, [pc, #72]	; (1a68 <tcvp_new+0x5c>)
		verify_fds (ses, "tcv27");
    1a1e:	f7fe fd63 	bl	4e8 <__pi_syserror>
    1a22:	2a08      	cmp	r2, #8
    1a24:	d803      	bhi.n	1a2e <tcvp_new+0x22>
    1a26:	4f11      	ldr	r7, [pc, #68]	; (1a6c <tcvp_new+0x60>)
    1a28:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    1a2c:	b913      	cbnz	r3, 1a34 <tcvp_new+0x28>
    1a2e:	200a      	movs	r0, #10
    1a30:	490f      	ldr	r1, [pc, #60]	; (1a70 <tcvp_new+0x64>)
    1a32:	e7f4      	b.n	1a1e <tcvp_new+0x12>
			TCV_LIMIT_XMT)) {
		       		// Drop
		    	   	return NULL;
		}
#endif
		if ((p = apb (size)) != NULL) {
    1a34:	f7ff fe10 	bl	1658 <apb>
    1a38:	4604      	mov	r4, r0
    1a3a:	b908      	cbnz	r0, 1a40 <tcvp_new+0x34>
			/* If you accidentally call tcv_endp on it */
			p->attributes.b.outgoing = 0;
			dispose (p, dsp);
			return (address)(p + 1);
		}
		return NULL;
    1a3c:	2000      	movs	r0, #0

	if ((p = apb (size)) != NULL)
		return (address)(p + 1);
	else
		return NULL;
}
    1a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			p->attributes = descriptors [ses] -> attpattern;
    1a40:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
			dispose (p, dsp);
    1a44:	4631      	mov	r1, r6
			p->attributes = descriptors [ses] -> attpattern;
    1a46:	891b      	ldrh	r3, [r3, #8]
    1a48:	8143      	strh	r3, [r0, #10]
			p->attributes.b.outgoing = 0;
    1a4a:	f36f 0341 	bfc	r3, #1, #1
    1a4e:	7283      	strb	r3, [r0, #10]
			dispose (p, dsp);
    1a50:	f7ff fe48 	bl	16e4 <dispose>
			return (address)(p + 1);
    1a54:	f104 000c 	add.w	r0, r4, #12
    1a58:	e7f1      	b.n	1a3e <tcvp_new+0x32>
	if ((p = apb (size)) != NULL)
    1a5a:	f7ff fdfd 	bl	1658 <apb>
    1a5e:	2800      	cmp	r0, #0
    1a60:	d0ec      	beq.n	1a3c <tcvp_new+0x30>
		return (address)(p + 1);
    1a62:	300c      	adds	r0, #12
    1a64:	e7eb      	b.n	1a3e <tcvp_new+0x32>
    1a66:	bf00      	nop
    1a68:	000044f7 	strdeq	r4, [r0], -r7
    1a6c:	20000560 	andcs	r0, r0, r0, ror #10
    1a70:	000044fd 	strdeq	r4, [r0], -sp

00001a74 <tcvphy_reg>:
 * points to a function that controls (i.e., changes the options of) the
 * interface.
 */
	qhead_t *q;

	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a74:	2802      	cmp	r0, #2
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a76:	b510      	push	{r4, lr}
    1a78:	4604      	mov	r4, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a7a:	d803      	bhi.n	1a84 <tcvphy_reg+0x10>
    1a7c:	4b0c      	ldr	r3, [pc, #48]	; (1ab0 <tcvphy_reg+0x3c>)
    1a7e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1a82:	b118      	cbz	r0, 1a8c <tcvphy_reg+0x18>
		syserror (EREQPAR, "tcv28");
    1a84:	2003      	movs	r0, #3
    1a86:	490b      	ldr	r1, [pc, #44]	; (1ab4 <tcvphy_reg+0x40>)
	physical [phy] = ps;
	physinfo [phy] = info;

	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
	if (q == NULL)
		syserror (EMALLOC, "tcv29");
    1a88:	f7fe fd2e 	bl	4e8 <__pi_syserror>
	physical [phy] = ps;
    1a8c:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	physinfo [phy] = info;
    1a90:	4b09      	ldr	r3, [pc, #36]	; (1ab8 <tcvphy_reg+0x44>)
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a92:	2008      	movs	r0, #8
	physinfo [phy] = info;
    1a94:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a98:	f7ff fcb4 	bl	1404 <__pi_malloc>
    1a9c:	4a07      	ldr	r2, [pc, #28]	; (1abc <tcvphy_reg+0x48>)
    1a9e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
	if (q == NULL)
    1aa2:	b910      	cbnz	r0, 1aaa <tcvphy_reg+0x36>
		syserror (EMALLOC, "tcv29");
    1aa4:	2006      	movs	r0, #6
    1aa6:	4906      	ldr	r1, [pc, #24]	; (1ac0 <tcvphy_reg+0x4c>)
    1aa8:	e7ee      	b.n	1a88 <tcvphy_reg+0x14>
	q_init (q);
    1aaa:	e9c0 0000 	strd	r0, r0, [r0]
	/*
	 * Queue event identifier (which happens to be the queue pointer
	 * in disguise).
	 */
	return ptrtoint (q);
}
    1aae:	bd10      	pop	{r4, pc}
    1ab0:	2000058c 	andcs	r0, r0, ip, lsl #11
    1ab4:	00004503 	andeq	r4, r0, r3, lsl #10
    1ab8:	20000598 	mulcs	r0, r8, r5
    1abc:	20000580 	andcs	r0, r0, r0, lsl #11
    1ac0:	00004509 	andeq	r4, r0, r9, lsl #10

00001ac4 <tcvphy_rcv>:

__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
	int plg, dsp, ses;
	tcvadp_t ap;
	address c;

	verify_fph (phy, "tcv30");
    1ac8:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1aca:	4605      	mov	r5, r0
    1acc:	460f      	mov	r7, r1
    1ace:	4614      	mov	r4, r2
    1ad0:	b085      	sub	sp, #20
	verify_fph (phy, "tcv30");
    1ad2:	d803      	bhi.n	1adc <tcvphy_rcv+0x18>
    1ad4:	4b1e      	ldr	r3, [pc, #120]	; (1b50 <tcvphy_rcv+0x8c>)
    1ad6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1ada:	b91b      	cbnz	r3, 1ae4 <tcvphy_rcv+0x20>
    1adc:	491d      	ldr	r1, [pc, #116]	; (1b54 <tcvphy_rcv+0x90>)
		 * (or fall back) plugins to be used when none of the
		 * "specific" plugins claims the packet.
		 */
		if (plugins [plg] == NULL)
			continue;
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ade:	200a      	movs	r0, #10
    1ae0:	f7fe fd02 	bl	4e8 <__pi_syserror>
    1ae4:	4e1c      	ldr	r6, [pc, #112]	; (1b58 <tcvphy_rcv+0x94>)
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae6:	f10d 080c 	add.w	r8, sp, #12
    1aea:	f1a6 0a08 	sub.w	sl, r6, #8
		if (plugins [plg] == NULL)
    1aee:	6833      	ldr	r3, [r6, #0]
    1af0:	46b1      	mov	r9, r6
    1af2:	3e04      	subs	r6, #4
    1af4:	b92b      	cbnz	r3, 1b02 <tcvphy_rcv+0x3e>
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af6:	45ca      	cmp	sl, r9
    1af8:	d1f9      	bne.n	1aee <tcvphy_rcv+0x2a>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
		/*
		 * Either no one is claiming the packet or the claimant says
		 * we should drop it.
		 */
		return 0;
    1afa:	2000      	movs	r0, #0
		return 0;

	memcpy ((char*)c, ((char*)p) + ap.head, len);

	return 1;
}
    1afc:	b005      	add	sp, #20
    1afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b02:	f8d3 b008 	ldr.w	fp, [r3, #8]
    1b06:	f1bb 0f00 	cmp.w	fp, #0
    1b0a:	d101      	bne.n	1b10 <tcvphy_rcv+0x4c>
    1b0c:	4913      	ldr	r1, [pc, #76]	; (1b5c <tcvphy_rcv+0x98>)
    1b0e:	e7e6      	b.n	1ade <tcvphy_rcv+0x1a>
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b10:	4639      	mov	r1, r7
    1b12:	4622      	mov	r2, r4
    1b14:	4628      	mov	r0, r5
    1b16:	f8cd 8000 	str.w	r8, [sp]
    1b1a:	ab02      	add	r3, sp, #8
    1b1c:	47d8      	blx	fp
    1b1e:	4601      	mov	r1, r0
    1b20:	2800      	cmp	r0, #0
    1b22:	d0e8      	beq.n	1af6 <tcvphy_rcv+0x32>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b24:	2801      	cmp	r0, #1
    1b26:	d0e8      	beq.n	1afa <tcvphy_rcv+0x36>
	len -= (ap.head + ap.tail);
    1b28:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    1b2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1b30:	441a      	add	r2, r3
    1b32:	1aa4      	subs	r4, r4, r2
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b34:	4620      	mov	r0, r4
    1b36:	9a02      	ldr	r2, [sp, #8]
    1b38:	f7ff ff68 	bl	1a0c <tcvp_new>
    1b3c:	2800      	cmp	r0, #0
    1b3e:	d0dc      	beq.n	1afa <tcvphy_rcv+0x36>
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b40:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    1b44:	4622      	mov	r2, r4
    1b46:	4439      	add	r1, r7
    1b48:	f7ff fb77 	bl	123a <__pi_memcpy>
	return 1;
    1b4c:	2001      	movs	r0, #1
    1b4e:	e7d5      	b.n	1afc <tcvphy_rcv+0x38>
    1b50:	2000058c 	andcs	r0, r0, ip, lsl #11
    1b54:	0000450f 	andeq	r4, r0, pc, lsl #10
    1b58:	200005ac 	andcs	r0, r0, ip, lsr #11
    1b5c:	00004515 	andeq	r4, r0, r5, lsl r5

00001b60 <tcvphy_get>:
 * Returns the packet pointer and its length.
 */
	qhead_t	*oq;
	hblock_t *b;

	verify_fph (phy, "tcv32");
    1b60:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_get) (int phy, int *len) {
    1b62:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv32");
    1b64:	d803      	bhi.n	1b6e <tcvphy_get+0xe>
    1b66:	4b0b      	ldr	r3, [pc, #44]	; (1b94 <tcvphy_get+0x34>)
    1b68:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b6c:	b91b      	cbnz	r3, 1b76 <tcvphy_get+0x16>
    1b6e:	200a      	movs	r0, #10
    1b70:	4909      	ldr	r1, [pc, #36]	; (1b98 <tcvphy_get+0x38>)
    1b72:	f7fe fcb9 	bl	4e8 <__pi_syserror>

	oq = oqueues [phy];
    1b76:	4b09      	ldr	r3, [pc, #36]	; (1b9c <tcvphy_get+0x3c>)
    1b78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1b7c:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq)) {
    1b7e:	4283      	cmp	r3, r0
    1b80:	d005      	beq.n	1b8e <tcvphy_get+0x2e>
		/* The queue is empty */
		return NULL;
	}

	*len = b->length;
    1b82:	8903      	ldrh	r3, [r0, #8]
    1b84:	600b      	str	r3, [r1, #0]
	deq (b);	// Dequeue the packet ...
    1b86:	f7ff fd72 	bl	166e <deq>
	deqtm (b);	// ... and clear its timer
	return (address) (b + 1);
    1b8a:	300c      	adds	r0, #12
}
    1b8c:	bd08      	pop	{r3, pc}
		return NULL;
    1b8e:	2000      	movs	r0, #0
    1b90:	e7fc      	b.n	1b8c <tcvphy_get+0x2c>
    1b92:	bf00      	nop
    1b94:	2000058c 	andcs	r0, r0, ip, lsl #11
    1b98:	0000451b 	andeq	r4, r0, fp, lsl r5
    1b9c:	20000580 	andcs	r0, r0, r0, lsl #11

00001ba0 <tcvphy_top>:
 * Returns the pointer to the first outgoing packet.
 */
	qhead_t *oq;
	hblock_t *b;

	verify_fph (phy, "tcv33");
    1ba0:	2803      	cmp	r0, #3
__PUBLF (PicOSNode, address, tcvphy_top) (int phy) {
    1ba2:	b508      	push	{r3, lr}
	verify_fph (phy, "tcv33");
    1ba4:	d803      	bhi.n	1bae <tcvphy_top+0xe>
    1ba6:	4b08      	ldr	r3, [pc, #32]	; (1bc8 <tcvphy_top+0x28>)
    1ba8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1bac:	b91b      	cbnz	r3, 1bb6 <tcvphy_top+0x16>
    1bae:	200a      	movs	r0, #10
    1bb0:	4906      	ldr	r1, [pc, #24]	; (1bcc <tcvphy_top+0x2c>)
    1bb2:	f7fe fc99 	bl	4e8 <__pi_syserror>

	oq = oqueues [phy];
    1bb6:	4b06      	ldr	r3, [pc, #24]	; (1bd0 <tcvphy_top+0x30>)
    1bb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	b = q_first (oq);
    1bbc:	6818      	ldr	r0, [r3, #0]
	if (q_end (b, oq))
    1bbe:	4283      	cmp	r3, r0
		return NULL;
    1bc0:	bf0c      	ite	eq
    1bc2:	2000      	moveq	r0, #0

	return (address)(b + 1);
    1bc4:	300c      	addne	r0, #12
}
    1bc6:	bd08      	pop	{r3, pc}
    1bc8:	2000058c 	andcs	r0, r0, ip, lsl #11
    1bcc:	00004521 	andeq	r4, r0, r1, lsr #10
    1bd0:	20000580 	andcs	r0, r0, r0, lsl #11

00001bd4 <tcvphy_end>:

__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd4:	b510      	push	{r4, lr}
/*
 * Marks the end of packet transmission
 */
	hblock_t *b = header (pkt);

	verify_plg (b, tcv_xmt, "tcv34");
    1bd6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
	hblock_t *b = header (pkt);
    1bda:	f1a0 040c 	sub.w	r4, r0, #12
	verify_plg (b, tcv_xmt, "tcv34");
    1bde:	f3c3 0382 	ubfx	r3, r3, #2, #3
    1be2:	2b02      	cmp	r3, #2
    1be4:	d805      	bhi.n	1bf2 <tcvphy_end+0x1e>
    1be6:	4a08      	ldr	r2, [pc, #32]	; (1c08 <tcvphy_end+0x34>)
    1be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1bec:	b10b      	cbz	r3, 1bf2 <tcvphy_end+0x1e>
    1bee:	695b      	ldr	r3, [r3, #20]
    1bf0:	b91b      	cbnz	r3, 1bfa <tcvphy_end+0x26>
    1bf2:	200a      	movs	r0, #10
    1bf4:	4905      	ldr	r1, [pc, #20]	; (1c0c <tcvphy_end+0x38>)
    1bf6:	f7fe fc77 	bl	4e8 <__pi_syserror>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bfa:	4798      	blx	r3
    1bfc:	4601      	mov	r1, r0
    1bfe:	4620      	mov	r0, r4
		tcv_xmt (pkt));
}
    1c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c04:	f7ff bd6e 	b.w	16e4 <dispose>
    1c08:	200005a4 	andcs	r0, r0, r4, lsr #11
    1c0c:	00004527 	andeq	r4, r0, r7, lsr #10

00001c10 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1c10:	4770      	bx	lr

00001c12 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1c12:	e7fe      	b.n	1c12 <NmiSR>

00001c14 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1c14:	e7fe      	b.n	1c14 <FaultISR>

00001c16 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    1c16:	e7fe      	b.n	1c16 <AONIntHandler>

00001c18 <ResetISR>:
{
    1c18:	b508      	push	{r3, lr}
    SetupTrimDevice();
    1c1a:	f001 fcdf 	bl	35dc <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c1e:	4b0c      	ldr	r3, [pc, #48]	; (1c50 <zero_loop+0x20>)
    pui32Src = &_etext;
    1c20:	4a0c      	ldr	r2, [pc, #48]	; (1c54 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c22:	490d      	ldr	r1, [pc, #52]	; (1c58 <zero_loop+0x28>)
    1c24:	428b      	cmp	r3, r1
    1c26:	d30d      	bcc.n	1c44 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    1c28:	480c      	ldr	r0, [pc, #48]	; (1c5c <zero_loop+0x2c>)
    1c2a:	490d      	ldr	r1, [pc, #52]	; (1c60 <zero_loop+0x30>)
    1c2c:	f04f 0200 	mov.w	r2, #0

00001c30 <zero_loop>:
    1c30:	4288      	cmp	r0, r1
    1c32:	bfb8      	it	lt
    1c34:	f840 2b04 	strlt.w	r2, [r0], #4
    1c38:	dbfa      	blt.n	1c30 <zero_loop>
   main();
    1c3a:	f7ff f957 	bl	eec <main>
    FaultISR();
    1c3e:	f7ff ffe9 	bl	1c14 <FaultISR>
}
    1c42:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1c44:	f852 0b04 	ldr.w	r0, [r2], #4
    1c48:	f843 0b04 	str.w	r0, [r3], #4
    1c4c:	e7ea      	b.n	1c24 <ResetISR+0xc>
    1c4e:	bf00      	nop
    1c50:	20000000 	andcs	r0, r0, r0
    1c54:	00004f30 	andeq	r4, r0, r0, lsr pc
    1c58:	20000540 	andcs	r0, r0, r0, asr #10
    1c5c:	20000540 	andcs	r0, r0, r0, asr #10
    1c60:	20000b74 	andcs	r0, r0, r4, ror fp

00001c64 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1c64:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1c66:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    1c6c:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c6e:	4907      	ldr	r1, [pc, #28]	; (1c8c <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c70:	4d07      	ldr	r5, [pc, #28]	; (1c90 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c72:	4c08      	ldr	r4, [pc, #32]	; (1c94 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c74:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    1c76:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1c78:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    1c7a:	b2c0      	uxtb	r0, r0
			b |= 1;
    1c7c:	bf48      	it	mi
    1c7e:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1c82:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c84:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1c86:	600a      	str	r2, [r1, #0]
    1c88:	d1f4      	bne.n	1c74 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    1c8a:	bd70      	pop	{r4, r5, r6, pc}
    1c8c:	400220a0 	andmi	r2, r2, r0, lsr #1
    1c90:	400220c0 	andmi	r2, r2, r0, asr #1
    1c94:	40022090 	mulmi	r2, r0, r0

00001c98 <put_byte>:

static void put_byte (byte b) {
    1c98:	b530      	push	{r4, r5, lr}
    1c9a:	2308      	movs	r3, #8
    1c9c:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1ca4:	4c06      	ldr	r4, [pc, #24]	; (1cc0 <put_byte+0x28>)
    1ca6:	4a07      	ldr	r2, [pc, #28]	; (1cc4 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1ca8:	f010 0f80 	tst.w	r0, #128	; 0x80
    1cac:	bf14      	ite	ne
    1cae:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cb0:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1cb2:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1cb4:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1cb6:	6021      	str	r1, [r4, #0]
		b <<= 1;
    1cb8:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cba:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1cbc:	d1f4      	bne.n	1ca8 <put_byte+0x10>
	}
}
    1cbe:	bd30      	pop	{r4, r5, pc}
    1cc0:	40022090 	mulmi	r2, r0, r0
    1cc4:	400220a0 	andmi	r2, r2, r0, lsr #1

00001cc8 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc8:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    1cca:	b510      	push	{r4, lr}
    1ccc:	4c03      	ldr	r4, [pc, #12]	; (1cdc <cmd_0+0x14>)
    1cce:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    1cd0:	f7ff ffe2 	bl	1c98 <put_byte>
    1cd4:	2300      	movs	r3, #0
    1cd6:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    1cd8:	bd10      	pop	{r4, pc}
    1cda:	bf00      	nop
    1cdc:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001ce0 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ce4:	4604      	mov	r4, r0
    1ce6:	460d      	mov	r5, r1
    1ce8:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    1cea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d30 <wwait+0x50>
    1cee:	4e0f      	ldr	r6, [pc, #60]	; (1d2c <wwait+0x4c>)
    1cf0:	f898 3000 	ldrb.w	r3, [r8]
    1cf4:	b14b      	cbz	r3, 1d0a <wwait+0x2a>
	put_byte (CMD_RDSR);
    1cf6:	2005      	movs	r0, #5
    1cf8:	6037      	str	r7, [r6, #0]
    1cfa:	f7ff ffcd 	bl	1c98 <put_byte>
	r = get_byte ();
    1cfe:	f7ff ffb1 	bl	1c64 <get_byte>
    1d02:	2300      	movs	r3, #0
    1d04:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    1d06:	07c3      	lsls	r3, r0, #31
    1d08:	d401      	bmi.n	1d0e <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    1d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1d0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d12:	429c      	cmp	r4, r3
    1d14:	d103      	bne.n	1d1e <wwait+0x3e>
			mdelay (1);
    1d16:	2001      	movs	r0, #1
    1d18:	f7fe fb92 	bl	440 <mdelay>
    1d1c:	e7e8      	b.n	1cf0 <wwait+0x10>
			delay (del, st);
    1d1e:	4621      	mov	r1, r4
    1d20:	4628      	mov	r0, r5
    1d22:	f7ff fa55 	bl	11d0 <delay>
			release;
    1d26:	f7fe ff9d 	bl	c64 <__pi_release>
    1d2a:	bf00      	nop
    1d2c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1d30:	200005b0 			; <UNDEFINED> instruction: 0x200005b0

00001d34 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1d36:	4d0c      	ldr	r5, [pc, #48]	; (1d68 <ready+0x34>)
    1d38:	782f      	ldrb	r7, [r5, #0]
    1d3a:	b147      	cbz	r7, 1d4e <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1d3c:	2101      	movs	r1, #1
    1d3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d42:	f7ff ffcd 	bl	1ce0 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1d46:	2200      	movs	r2, #0
    1d48:	4b08      	ldr	r3, [pc, #32]	; (1d6c <ready+0x38>)
    1d4a:	701a      	strb	r2, [r3, #0]
}
    1d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d4e:	2401      	movs	r4, #1
    1d50:	4e07      	ldr	r6, [pc, #28]	; (1d70 <ready+0x3c>)
	udelay (1);
    1d52:	4620      	mov	r0, r4
    1d54:	6034      	str	r4, [r6, #0]
    1d56:	f7fe fb5d 	bl	414 <udelay>
	udelay (1);
    1d5a:	4620      	mov	r0, r4
    1d5c:	6037      	str	r7, [r6, #0]
    1d5e:	f7fe fb59 	bl	414 <udelay>
		dopen = DOPEN_TEMP;
    1d62:	2302      	movs	r3, #2
    1d64:	702b      	strb	r3, [r5, #0]
    1d66:	e7ee      	b.n	1d46 <ready+0x12>
    1d68:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
    1d6c:	200005b1 			; <UNDEFINED> instruction: 0x200005b1
    1d70:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001d74 <cclose>:
static void cclose () {
    1d74:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1d76:	4c07      	ldr	r4, [pc, #28]	; (1d94 <cclose+0x20>)
    1d78:	7823      	ldrb	r3, [r4, #0]
    1d7a:	2b02      	cmp	r3, #2
    1d7c:	d109      	bne.n	1d92 <cclose+0x1e>
		wwait (WNONE, 1);
    1d7e:	2101      	movs	r1, #1
    1d80:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1d84:	f7ff ffac 	bl	1ce0 <wwait>
	cmd_0 (CMD_DP);
    1d88:	20b9      	movs	r0, #185	; 0xb9
    1d8a:	f7ff ff9d 	bl	1cc8 <cmd_0>
		dopen = 0;
    1d8e:	2300      	movs	r3, #0
    1d90:	7023      	strb	r3, [r4, #0]
}
    1d92:	bd10      	pop	{r4, pc}
    1d94:	200005b0 			; <UNDEFINED> instruction: 0x200005b0

00001d98 <ee_open>:

// ============================================================================

word ee_open () {
    1d98:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    1d9a:	f7ff ffcb 	bl	1d34 <ready>
	dopen = DOPEN_PERM;
    1d9e:	2201      	movs	r2, #1
    1da0:	4b01      	ldr	r3, [pc, #4]	; (1da8 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1da2:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1da4:	701a      	strb	r2, [r3, #0]
}
    1da6:	bd08      	pop	{r3, pc}
    1da8:	200005b0 			; <UNDEFINED> instruction: 0x200005b0

00001dac <ee_close>:

void ee_close () {

	if (dopen) {
    1dac:	4b03      	ldr	r3, [pc, #12]	; (1dbc <ee_close+0x10>)
    1dae:	781a      	ldrb	r2, [r3, #0]
    1db0:	b11a      	cbz	r2, 1dba <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1db2:	2202      	movs	r2, #2
    1db4:	701a      	strb	r2, [r3, #0]
		cclose ();
    1db6:	f7ff bfdd 	b.w	1d74 <cclose>
	}
}
    1dba:	4770      	bx	lr
    1dbc:	200005b0 			; <UNDEFINED> instruction: 0x200005b0

00001dc0 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dc2:	4604      	mov	r4, r0
    1dc4:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    1dc6:	4615      	mov	r5, r2
    1dc8:	b37a      	cbz	r2, 1e2a <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    1dca:	4e19      	ldr	r6, [pc, #100]	; (1e30 <ser_in+0x70>)
    1dcc:	6830      	ldr	r0, [r6, #0]
    1dce:	b988      	cbnz	r0, 1df4 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1dd0:	4818      	ldr	r0, [pc, #96]	; (1e34 <ser_in+0x74>)
    1dd2:	f7ff fa19 	bl	1208 <running>
    1dd6:	b948      	cbnz	r0, 1dec <ser_in+0x2c>
			prcs = runthread (__inserial);
    1dd8:	4601      	mov	r1, r0
    1dda:	4816      	ldr	r0, [pc, #88]	; (1e34 <ser_in+0x74>)
    1ddc:	f7ff fb66 	bl	14ac <__pi_fork>
			if (prcs == 0) {
    1de0:	b920      	cbnz	r0, 1dec <ser_in+0x2c>
				npwait (st);
    1de2:	4620      	mov	r0, r4
    1de4:	f7ff fb7c 	bl	14e0 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1de8:	f7fe ff3c 	bl	c64 <__pi_release>
		join (prcs, st);
    1dec:	4621      	mov	r1, r4
    1dee:	f7ff f9dd 	bl	11ac <__pi_join>
    1df2:	e7f9      	b.n	1de8 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    1df4:	7803      	ldrb	r3, [r0, #0]
    1df6:	b9a3      	cbnz	r3, 1e22 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df8:	7844      	ldrb	r4, [r0, #1]
    1dfa:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    1dfc:	42ac      	cmp	r4, r5
		prcs = len-1;
    1dfe:	bfa8      	it	ge
    1e00:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    1e04:	4622      	mov	r2, r4
    1e06:	4638      	mov	r0, r7
    1e08:	6831      	ldr	r1, [r6, #0]
    1e0a:	f7ff fa16 	bl	123a <__pi_memcpy>
	ufree (__inpline);
    1e0e:	6830      	ldr	r0, [r6, #0]
    1e10:	f7ff faac 	bl	136c <__pi_free>
	__inpline = NULL;
    1e14:	2300      	movs	r3, #0
    1e16:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    1e18:	783a      	ldrb	r2, [r7, #0]
    1e1a:	b102      	cbz	r2, 1e1e <ser_in+0x5e>
		buf [prcs] = '\0';
    1e1c:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    1e1e:	4620      	mov	r0, r4
    1e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1e22:	f7ff fa03 	bl	122c <__pi_strlen>
    1e26:	4604      	mov	r4, r0
    1e28:	e7e8      	b.n	1dfc <ser_in+0x3c>
		return 0;
    1e2a:	4614      	mov	r4, r2
    1e2c:	e7f7      	b.n	1e1e <ser_in+0x5e>
    1e2e:	bf00      	nop
    1e30:	200005fc 	strdcs	r0, [r0], -ip
    1e34:	000028d1 	ldrdeq	r2, [r0], -r1

00001e38 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1e38:	b40e      	push	{r1, r2, r3}
    1e3a:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1e3c:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1e3e:	4812      	ldr	r0, [pc, #72]	; (1e88 <ser_outf+0x50>)
    1e40:	f7ff f9e2 	bl	1208 <running>
    1e44:	4606      	mov	r6, r0
    1e46:	b120      	cbz	r0, 1e52 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1e48:	4621      	mov	r1, r4
    1e4a:	f7ff f9af 	bl	11ac <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    1e4e:	f7fe ff09 	bl	c64 <__pi_release>
	va_start (ap, m);
    1e52:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e54:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1e56:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e58:	f000 fef0 	bl	2c3c <vform>
    1e5c:	4605      	mov	r5, r0
    1e5e:	b918      	cbnz	r0, 1e68 <ser_outf+0x30>
		umwait (st);
    1e60:	4620      	mov	r0, r4
    1e62:	f7ff fb3d 	bl	14e0 <__pi_waitmem>
    1e66:	e7f2      	b.n	1e4e <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1e68:	4601      	mov	r1, r0
    1e6a:	4807      	ldr	r0, [pc, #28]	; (1e88 <ser_outf+0x50>)
    1e6c:	f7ff fb1e 	bl	14ac <__pi_fork>
    1e70:	b918      	cbnz	r0, 1e7a <ser_outf+0x42>
		ufree (buf);
    1e72:	4628      	mov	r0, r5
    1e74:	f7ff fa7a 	bl	136c <__pi_free>
		npwait (st);
    1e78:	e7f2      	b.n	1e60 <ser_outf+0x28>
		release;
	}

	return 0;
}
    1e7a:	4630      	mov	r0, r6
    1e7c:	b003      	add	sp, #12
    1e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e82:	b003      	add	sp, #12
    1e84:	4770      	bx	lr
    1e86:	bf00      	nop
    1e88:	00002861 	andeq	r2, r0, r1, ror #16

00001e8c <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1e8c:	b40e      	push	{r1, r2, r3}
    1e8e:	b533      	push	{r0, r1, r4, r5, lr}
    1e90:	9905      	ldr	r1, [sp, #20]
    1e92:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1e94:	b321      	cbz	r1, 1ee0 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1e96:	4d13      	ldr	r5, [pc, #76]	; (1ee4 <ser_inf+0x58>)
    1e98:	6828      	ldr	r0, [r5, #0]
    1e9a:	b988      	cbnz	r0, 1ec0 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1e9c:	4812      	ldr	r0, [pc, #72]	; (1ee8 <ser_inf+0x5c>)
    1e9e:	f7ff f9b3 	bl	1208 <running>
    1ea2:	b948      	cbnz	r0, 1eb8 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1ea4:	4601      	mov	r1, r0
    1ea6:	4810      	ldr	r0, [pc, #64]	; (1ee8 <ser_inf+0x5c>)
    1ea8:	f7ff fb00 	bl	14ac <__pi_fork>
			if (prcs == 0) {
    1eac:	b920      	cbnz	r0, 1eb8 <ser_inf+0x2c>
				npwait (st);
    1eae:	4620      	mov	r0, r4
    1eb0:	f7ff fb16 	bl	14e0 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1eb4:	f7fe fed6 	bl	c64 <__pi_release>
		join (prcs, st);
    1eb8:	4621      	mov	r1, r4
    1eba:	f7ff f977 	bl	11ac <__pi_join>
    1ebe:	e7f9      	b.n	1eb4 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1ec0:	aa06      	add	r2, sp, #24
    1ec2:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1ec4:	f000 fee2 	bl	2c8c <vscan>
    1ec8:	4604      	mov	r4, r0

	ufree (__inpline);
    1eca:	6828      	ldr	r0, [r5, #0]
    1ecc:	f7ff fa4e 	bl	136c <__pi_free>
	__inpline = NULL;
    1ed0:	2300      	movs	r3, #0
    1ed2:	602b      	str	r3, [r5, #0]

	return prcs;
}
    1ed4:	4620      	mov	r0, r4
    1ed6:	b002      	add	sp, #8
    1ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1edc:	b003      	add	sp, #12
    1ede:	4770      	bx	lr
		return 0;
    1ee0:	460c      	mov	r4, r1
    1ee2:	e7f7      	b.n	1ed4 <ser_inf+0x48>
    1ee4:	200005fc 	strdcs	r0, [r0], -ip
    1ee8:	000028d1 	ldrdeq	r2, [r0], -r1

00001eec <plugch>:
//
// Insert the channel number as the right frequency in the proper place
//
	RF_cmdFs.frequency = 
		// Channel number is just the megahertz increment
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1eec:	4b04      	ldr	r3, [pc, #16]	; (1f00 <plugch+0x14>)
    1eee:	4a05      	ldr	r2, [pc, #20]	; (1f04 <plugch+0x18>)
    1ef0:	781b      	ldrb	r3, [r3, #0]
    1ef2:	f503 7359 	add.w	r3, r3, #868	; 0x364
    1ef6:	8413      	strh	r3, [r2, #32]
	RF_cmdFs.frequency = 
    1ef8:	4a03      	ldr	r2, [pc, #12]	; (1f08 <plugch+0x1c>)
    1efa:	81d3      	strh	r3, [r2, #14]
}
    1efc:	4770      	bx	lr
    1efe:	bf00      	nop
    1f00:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
    1f04:	20000054 	andcs	r0, r0, r4, asr r0
    1f08:	2000003c 	andcs	r0, r0, ip, lsr r0

00001f0c <option>:

	// Make rbuffl exactly equal to max payload length
	rbuffl -= 2;
}

static int option (int opt, address val) {
    1f0c:	b570      	push	{r4, r5, r6, lr}
    1f0e:	460c      	mov	r4, r1
    1f10:	281a      	cmp	r0, #26
    1f12:	f200 80a4 	bhi.w	205e <option+0x152>
    1f16:	e8df f000 	tbb	[pc, r0]
    1f1a:	3939390e 	ldmdbcc	r9!, {r1, r2, r3, r8, fp, ip, sp}
    1f1e:	674f3014 	smlaldvs	r3, pc, r4, r0	; <UNPREDICTABLE>
    1f22:	3b35445b 	blcc	d53096 <__ccfg+0xd330ee>
    1f26:	a2a2a2a2 	adcge	sl, r2, #536870922	; 0x2000000a
    1f2a:	777aa2a2 	ldrbvc	sl, [sl, -r2, lsr #5]!
    1f2e:	898ba2a2 	stmibhi	fp, {r1, r5, r7, r9, sp, pc}
    1f32:	009aa241 	addseq	sl, sl, r1, asr #4

	switch (opt) {

		case PHYSOPT_STATUS:

			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f36:	4b4c      	ldr	r3, [pc, #304]	; (2068 <option+0x15c>)
    1f38:	7818      	ldrb	r0, [r3, #0]
    1f3a:	f000 0001 	and.w	r0, r0, #1
			ret = (int) statid;
			goto RVal;

		case PHYSOPT_GETMAXPL:

			ret = rbuffl + 2;
    1f3e:	3002      	adds	r0, #2
			goto RVal;
    1f40:	e028      	b.n	1f94 <option+0x88>
			_BIS (dstate, DSTATE_RXON);
    1f42:	4a49      	ldr	r2, [pc, #292]	; (2068 <option+0x15c>)
    1f44:	7813      	ldrb	r3, [r2, #0]
    1f46:	f043 0301 	orr.w	r3, r3, #1
    1f4a:	7013      	strb	r3, [r2, #0]
	int ret = 0;
    1f4c:	2000      	movs	r0, #0
			p_trigger (drvprcs, qevent);
    1f4e:	4b47      	ldr	r3, [pc, #284]	; (206c <option+0x160>)
    1f50:	6819      	ldr	r1, [r3, #0]
    1f52:	4b47      	ldr	r3, [pc, #284]	; (2070 <option+0x164>)
    1f54:	460c      	mov	r4, r1
    1f56:	681d      	ldr	r5, [r3, #0]
    1f58:	2300      	movs	r3, #0
    1f5a:	f834 2b10 	ldrh.w	r2, [r4], #16
    1f5e:	f002 0207 	and.w	r2, r2, #7
    1f62:	429a      	cmp	r2, r3
    1f64:	dd08      	ble.n	1f78 <option+0x6c>
    1f66:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
    1f6a:	3301      	adds	r3, #1
    1f6c:	42ae      	cmp	r6, r5
    1f6e:	d1f8      	bne.n	1f62 <option+0x56>
    1f70:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1f74:	889b      	ldrh	r3, [r3, #4]
    1f76:	800b      	strh	r3, [r1, #0]
	return ret;
RVal:
	if (val != NULL)
		*val = ret;
	goto RRet;
}
    1f78:	bd70      	pop	{r4, r5, r6, pc}
			_BIC (dstate, DSTATE_RXON);
    1f7a:	4a3b      	ldr	r2, [pc, #236]	; (2068 <option+0x15c>)
    1f7c:	7813      	ldrb	r3, [r2, #0]
    1f7e:	f023 0301 	bic.w	r3, r3, #1
    1f82:	e7e2      	b.n	1f4a <option+0x3e>
			statid = (val == NULL) ? 0 : *val;
    1f84:	b101      	cbz	r1, 1f88 <option+0x7c>
    1f86:	880c      	ldrh	r4, [r1, #0]
    1f88:	4b3a      	ldr	r3, [pc, #232]	; (2074 <option+0x168>)
    1f8a:	801c      	strh	r4, [r3, #0]
	int ret = 0;
    1f8c:	2000      	movs	r0, #0
    1f8e:	e7f3      	b.n	1f78 <option+0x6c>
			ret = (int) statid;
    1f90:	4b38      	ldr	r3, [pc, #224]	; (2074 <option+0x168>)
    1f92:	8818      	ldrh	r0, [r3, #0]
	if (val != NULL)
    1f94:	2c00      	cmp	r4, #0
    1f96:	d0ef      	beq.n	1f78 <option+0x6c>
		*val = ret;
    1f98:	8020      	strh	r0, [r4, #0]
	return ret;
    1f9a:	e7ed      	b.n	1f78 <option+0x6c>
			ret = rbuffl + 2;
    1f9c:	4b36      	ldr	r3, [pc, #216]	; (2078 <option+0x16c>)
    1f9e:	7818      	ldrb	r0, [r3, #0]
    1fa0:	e7cd      	b.n	1f3e <option+0x32>
				memcpy (val, &rxstat,
    1fa2:	220c      	movs	r2, #12
			if (val != NULL) {
    1fa4:	b121      	cbz	r1, 1fb0 <option+0xa4>
				memcpy (val, &rxstat,
    1fa6:	4620      	mov	r0, r4
    1fa8:	4934      	ldr	r1, [pc, #208]	; (207c <option+0x170>)
    1faa:	f7ff f946 	bl	123a <__pi_memcpy>
    1fae:	e7ed      	b.n	1f8c <option+0x80>
				memset (&rxstat, 0, 
    1fb0:	4832      	ldr	r0, [pc, #200]	; (207c <option+0x170>)
    1fb2:	f7ff f94c 	bl	124e <__pi_memset>
    1fb6:	e7e9      	b.n	1f8c <option+0x80>
			if (val == NULL)
    1fb8:	b941      	cbnz	r1, 1fcc <option+0xc0>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fba:	f7ff fb3b 	bl	1634 <lrnd>
    1fbe:	f3c0 4105 	ubfx	r1, r0, #16, #6
    1fc2:	3102      	adds	r1, #2
				utimer_set (bckf_timer, *val);
    1fc4:	482e      	ldr	r0, [pc, #184]	; (2080 <option+0x174>)
    1fc6:	f7ff f849 	bl	105c <__pi_utimer_set>
    1fca:	e7bf      	b.n	1f4c <option+0x40>
    1fcc:	8809      	ldrh	r1, [r1, #0]
    1fce:	e7f9      	b.n	1fc4 <option+0xb8>
			for (ret = 0; ret < 8; ret++)
    1fd0:	2000      	movs	r0, #0
				if (RF_cmdPropRadioDivSetup.txPower
    1fd2:	4b2c      	ldr	r3, [pc, #176]	; (2084 <option+0x178>)
    1fd4:	8b5a      	ldrh	r2, [r3, #26]
    1fd6:	4b2c      	ldr	r3, [pc, #176]	; (2088 <option+0x17c>)
					== patable [ret])
    1fd8:	f833 1b02 	ldrh.w	r1, [r3], #2
				if (RF_cmdPropRadioDivSetup.txPower
    1fdc:	428a      	cmp	r2, r1
    1fde:	d0d9      	beq.n	1f94 <option+0x88>
			for (ret = 0; ret < 8; ret++)
    1fe0:	3001      	adds	r0, #1
    1fe2:	2808      	cmp	r0, #8
    1fe4:	d1f8      	bne.n	1fd8 <option+0xcc>
    1fe6:	e7d5      	b.n	1f94 <option+0x88>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	b119      	cbz	r1, 1ff2 <option+0xe6>
				(*val > 7) ? 7 : *val;
    1fea:	8808      	ldrh	r0, [r1, #0]
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fec:	2807      	cmp	r0, #7
    1fee:	bf28      	it	cs
    1ff0:	2007      	movcs	r0, #7
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff2:	4b25      	ldr	r3, [pc, #148]	; (2088 <option+0x17c>)
    1ff4:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    1ff8:	4b22      	ldr	r3, [pc, #136]	; (2084 <option+0x178>)
    1ffa:	835a      	strh	r2, [r3, #26]
			_BIS (dstate, DSTATE_IRST);
    1ffc:	4a1a      	ldr	r2, [pc, #104]	; (2068 <option+0x15c>)
    1ffe:	7813      	ldrb	r3, [r2, #0]
    2000:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2004:	7013      	strb	r3, [r2, #0]
			goto OREvnt;
    2006:	e7a2      	b.n	1f4e <option+0x42>
			ret = (int) channel;
    2008:	4b20      	ldr	r3, [pc, #128]	; (208c <option+0x180>)
			ret = (int) vrate;
    200a:	7818      	ldrb	r0, [r3, #0]
			goto RVal;
    200c:	e7c2      	b.n	1f94 <option+0x88>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    200e:	b121      	cbz	r1, 201a <option+0x10e>
				(*val > 7) ? 7 : *val;
    2010:	880c      	ldrh	r4, [r1, #0]
    2012:	2c07      	cmp	r4, #7
    2014:	bf28      	it	cs
    2016:	2407      	movcs	r4, #7
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2018:	b2e4      	uxtb	r4, r4
    201a:	4b1c      	ldr	r3, [pc, #112]	; (208c <option+0x180>)
    201c:	701c      	strb	r4, [r3, #0]
			plugch ();
    201e:	f7ff ff65 	bl	1eec <plugch>
			_BIS (dstate, DSTATE_IRST);
    2022:	4a11      	ldr	r2, [pc, #68]	; (2068 <option+0x15c>)
    2024:	7813      	ldrb	r3, [r2, #0]
    2026:	f063 037f 	orn	r3, r3, #127	; 0x7f
    202a:	e78e      	b.n	1f4a <option+0x3e>
			ret = (int) vrate;
    202c:	4b18      	ldr	r3, [pc, #96]	; (2090 <option+0x184>)
    202e:	e7ec      	b.n	200a <option+0xfe>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	b139      	cbz	r1, 2042 <option+0x136>
				(*val > 3) ? 3 : (*val < 1) ? 1 : *val;
    2032:	880b      	ldrh	r3, [r1, #0]
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2034:	2b03      	cmp	r3, #3
    2036:	d806      	bhi.n	2046 <option+0x13a>
    2038:	b13b      	cbz	r3, 204a <option+0x13e>
    203a:	b2db      	uxtb	r3, r3
    203c:	4a14      	ldr	r2, [pc, #80]	; (2090 <option+0x184>)
    203e:	7013      	strb	r3, [r2, #0]
    2040:	e7ed      	b.n	201e <option+0x112>
    2042:	2302      	movs	r3, #2
    2044:	e7fa      	b.n	203c <option+0x130>
    2046:	2303      	movs	r3, #3
    2048:	e7f8      	b.n	203c <option+0x130>
    204a:	2301      	movs	r3, #1
    204c:	e7f6      	b.n	203c <option+0x130>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    204e:	b119      	cbz	r1, 2058 <option+0x14c>
    2050:	880b      	ldrh	r3, [r1, #0]
    2052:	4a10      	ldr	r2, [pc, #64]	; (2094 <option+0x188>)
    2054:	8013      	strh	r3, [r2, #0]
			goto RRet;
    2056:	e799      	b.n	1f8c <option+0x80>
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2058:	f44f 7380 	mov.w	r3, #256	; 0x100
    205c:	e7f9      	b.n	2052 <option+0x146>
			syserror (EREQPAR, "cc13 op");
    205e:	2003      	movs	r0, #3
    2060:	490d      	ldr	r1, [pc, #52]	; (2098 <option+0x18c>)
    2062:	f7fe fa41 	bl	4e8 <__pi_syserror>
    2066:	bf00      	nop
    2068:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    206c:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    2070:	200005c8 	andcs	r0, r0, r8, asr #11
    2074:	200005ec 	andcs	r0, r0, ip, ror #11
    2078:	200005cc 	andcs	r0, r0, ip, asr #11
    207c:	200005e0 	andcs	r0, r0, r0, ror #11
    2080:	200005b2 			; <UNDEFINED> instruction: 0x200005b2
    2084:	20000054 	andcs	r0, r0, r4, asr r0
    2088:	0000459a 	muleq	r0, sl, r5
    208c:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
    2090:	2000003a 	andcs	r0, r0, sl, lsr r0
    2094:	20000038 	andcs	r0, r0, r8, lsr r0
    2098:	00004536 	andeq	r4, r0, r6, lsr r5

0000209c <issue_cmd>:
static void issue_cmd (lword cmd) {
    209c:	b538      	push	{r3, r4, r5, lr}
    209e:	4604      	mov	r4, r0
    20a0:	4d0c      	ldr	r5, [pc, #48]	; (20d4 <issue_cmd+0x38>)
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a2:	4620      	mov	r0, r4
    20a4:	f001 f8a4 	bl	31f0 <NOROM_RFCDoorbellSendTo>
    20a8:	b2c2      	uxtb	r2, r0
    20aa:	2a01      	cmp	r2, #1
    20ac:	d011      	beq.n	20d2 <issue_cmd+0x36>
		if (res != 0x86)
    20ae:	2a86      	cmp	r2, #134	; 0x86
    20b0:	d003      	beq.n	20ba <issue_cmd+0x1e>
			syserror (EHARDWARE, "rt1");
    20b2:	4909      	ldr	r1, [pc, #36]	; (20d8 <issue_cmd+0x3c>)
			syserror (EHARDWARE, "hang ic0");
    20b4:	2008      	movs	r0, #8
    20b6:	f7fe fa17 	bl	4e8 <__pi_syserror>
		if (cnt-- == 0) {
    20ba:	3d01      	subs	r5, #1
    20bc:	d105      	bne.n	20ca <issue_cmd+0x2e>
			diag ("HUP %lx %lx", cmd, res);
    20be:	4621      	mov	r1, r4
    20c0:	4806      	ldr	r0, [pc, #24]	; (20dc <issue_cmd+0x40>)
    20c2:	f7ff fa19 	bl	14f8 <diag>
			syserror (EHARDWARE, "hang ic0");
    20c6:	4906      	ldr	r1, [pc, #24]	; (20e0 <issue_cmd+0x44>)
    20c8:	e7f4      	b.n	20b4 <issue_cmd+0x18>
		udelay (1);
    20ca:	2001      	movs	r0, #1
    20cc:	f7fe f9a2 	bl	414 <udelay>
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20d0:	e7e7      	b.n	20a2 <issue_cmd+0x6>
}
    20d2:	bd38      	pop	{r3, r4, r5, pc}
    20d4:	00015f91 	muleq	r1, r1, pc	; <UNPREDICTABLE>
    20d8:	0000453e 	andeq	r4, r0, lr, lsr r5
    20dc:	00004542 	andeq	r4, r0, r2, asr #10
    20e0:	0000454e 	andeq	r4, r0, lr, asr #10

000020e4 <rx_de>:
static void rx_de () {
    20e4:	b510      	push	{r4, lr}
	if ((dstate & DSTATE_RXAC) == 0)
    20e6:	4c06      	ldr	r4, [pc, #24]	; (2100 <rx_de+0x1c>)
    20e8:	7823      	ldrb	r3, [r4, #0]
    20ea:	079b      	lsls	r3, r3, #30
    20ec:	d506      	bpl.n	20fc <rx_de+0x18>
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20ee:	4805      	ldr	r0, [pc, #20]	; (2104 <rx_de+0x20>)
    20f0:	f7ff ffd4 	bl	209c <issue_cmd>
	_BIC (dstate, DSTATE_RXAC);
    20f4:	7823      	ldrb	r3, [r4, #0]
    20f6:	f023 0302 	bic.w	r3, r3, #2
    20fa:	7023      	strb	r3, [r4, #0]
}
    20fc:	bd10      	pop	{r4, pc}
    20fe:	bf00      	nop
    2100:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2104:	04010001 	streq	r0, [r1], #-1

00002108 <rf_off>:
static void rf_off () {
    2108:	b538      	push	{r3, r4, r5, lr}
	if ((dstate & DSTATE_RFON) == 0)
    210a:	4c11      	ldr	r4, [pc, #68]	; (2150 <rf_off+0x48>)
    210c:	7823      	ldrb	r3, [r4, #0]
    210e:	06db      	lsls	r3, r3, #27
    2110:	d51d      	bpl.n	214e <rf_off+0x46>
RFCClockDisable(void)
{
    //
    // Disable all clocks
    //
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2112:	2500      	movs	r5, #0
	IntDisable (INT_RFC_CPE_0);
    2114:	4b0f      	ldr	r3, [pc, #60]	; (2154 <rf_off+0x4c>)
    2116:	2019      	movs	r0, #25
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	695b      	ldr	r3, [r3, #20]
    211c:	4798      	blx	r3
	RFCAdi3VcoLdoVoltageMode (false);
    211e:	2000      	movs	r0, #0
    2120:	f001 f9e4 	bl	34ec <NOROM_RFCAdi3VcoLdoVoltageMode>
	RFCSynthPowerDown ();
    2124:	f001 f878 	bl	3218 <NOROM_RFCSynthPowerDown>
    2128:	4b0b      	ldr	r3, [pc, #44]	; (2158 <rf_off+0x50>)
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    212a:	2001      	movs	r0, #1
    212c:	601d      	str	r5, [r3, #0]
    212e:	f7fe f9bb 	bl	4a8 <__pi_offdomain>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2132:	4b0a      	ldr	r3, [pc, #40]	; (215c <rf_off+0x54>)
    2134:	601d      	str	r5, [r3, #0]
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2136:	f001 f841 	bl	31bc <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    213e:	4b08      	ldr	r3, [pc, #32]	; (2160 <rf_off+0x58>)
    2140:	601a      	str	r2, [r3, #0]
    2142:	2202      	movs	r2, #2
    2144:	601a      	str	r2, [r3, #0]
	_BIC (dstate, DSTATE_RFON);
    2146:	7823      	ldrb	r3, [r4, #0]
    2148:	f023 0310 	bic.w	r3, r3, #16
    214c:	7023      	strb	r3, [r4, #0]
}
    214e:	bd38      	pop	{r3, r4, r5, pc}
    2150:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2154:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    2158:	60040000 	andvs	r0, r4, r0
    215c:	43240004 			; <UNDEFINED> instruction: 0x43240004
    2160:	400220a0 	andmi	r2, r2, r0, lsr #1

00002164 <wait_cmd.constprop.0>:
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	b570      	push	{r4, r5, r6, lr}
    2166:	4604      	mov	r4, r0
    2168:	460d      	mov	r5, r1
    216a:	f242 7611 	movw	r6, #10001	; 0x2711
		if (cmd->status == tstat)
    216e:	8862      	ldrh	r2, [r4, #2]
    2170:	42aa      	cmp	r2, r5
    2172:	d00e      	beq.n	2192 <wait_cmd.constprop.0+0x2e>
		if (timeout-- == 0) {
    2174:	3e01      	subs	r6, #1
    2176:	d108      	bne.n	218a <wait_cmd.constprop.0+0x26>
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	8821      	ldrh	r1, [r4, #0]
    217a:	4806      	ldr	r0, [pc, #24]	; (2194 <wait_cmd.constprop.0+0x30>)
    217c:	462b      	mov	r3, r5
    217e:	f7ff f9bb 	bl	14f8 <diag>
			syserror (EHARDWARE, "rt2");
    2182:	2008      	movs	r0, #8
    2184:	4904      	ldr	r1, [pc, #16]	; (2198 <wait_cmd.constprop.0+0x34>)
    2186:	f7fe f9af 	bl	4e8 <__pi_syserror>
		udelay (1);
    218a:	2001      	movs	r0, #1
    218c:	f7fe f942 	bl	414 <udelay>
		if (cmd->status == tstat)
    2190:	e7ed      	b.n	216e <wait_cmd.constprop.0+0xa>
}
    2192:	bd70      	pop	{r4, r5, r6, pc}
    2194:	00004557 	andeq	r4, r0, r7, asr r5
    2198:	00004567 	andeq	r4, r0, r7, ror #10

0000219c <rf_on.part.0>:
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    219c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    21a0:	4b46      	ldr	r3, [pc, #280]	; (22bc <rf_on.part.0+0x120>)
static void rf_on () {
    21a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21a6:	601a      	str	r2, [r3, #0]
    21a8:	2202      	movs	r2, #2
    21aa:	601a      	str	r2, [r3, #0]
	OSCHF_TurnOnXosc();
    21ac:	f000 ffca 	bl	3144 <NOROM_OSCHF_TurnOnXosc>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21b0:	200a      	movs	r0, #10
    21b2:	f7fe f92f 	bl	414 <udelay>
    21b6:	f000 ffd1 	bl	315c <NOROM_OSCHF_AttemptToSwitchToXosc>
    21ba:	2800      	cmp	r0, #0
    21bc:	d0f8      	beq.n	21b0 <rf_on.part.0+0x14>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21be:	2401      	movs	r4, #1
    21c0:	4b3f      	ldr	r3, [pc, #252]	; (22c0 <rf_on.part.0+0x124>)
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c2:	4620      	mov	r0, r4
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21c4:	601c      	str	r4, [r3, #0]
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c6:	f7fe f951 	bl	46c <__pi_ondomain>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
    21ce:	4b3d      	ldr	r3, [pc, #244]	; (22c4 <rf_on.part.0+0x128>)
	issue_cmd (
    21d0:	483d      	ldr	r0, [pc, #244]	; (22c8 <rf_on.part.0+0x12c>)
    21d2:	601a      	str	r2, [r3, #0]
    21d4:	f7ff ff62 	bl	209c <issue_cmd>
PATCH_FUN_SPEC void enterGenfskCpePatch(void)
{
   uint32_t *pPatchVec = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_VEC_OFFSET);

#if (_NWORD_PATCHIMAGE_GENFSK > 0)
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d8:	f44f 7223 	mov.w	r2, #652	; 0x28c
    21dc:	493b      	ldr	r1, [pc, #236]	; (22cc <rf_on.part.0+0x130>)
    21de:	483c      	ldr	r0, [pc, #240]	; (22d0 <rf_on.part.0+0x134>)
    21e0:	f001 ff06 	bl	3ff0 <memcpy>
{
   uint8_t *pPatchTab = (uint8_t *) (_GENFSK_CPERAM_START + _GENFSK_PATCH_TAB_OFFSET);
   uint32_t *pIrqPatch = (uint32_t *) (_GENFSK_CPERAM_START + _GENFSK_IRQPATCH_OFFSET);


   pPatchTab[80] = 0;
    21e4:	2200      	movs	r2, #0
    21e6:	4b3b      	ldr	r3, [pc, #236]	; (22d4 <rf_on.part.0+0x138>)
      *pD++ = t4;
      *pD++ = t5;
      *pD++ = t6;
      *pD++ = t7;
      *pD++ = t8;
   } while (--nIterations);
    21e8:	493b      	ldr	r1, [pc, #236]	; (22d8 <rf_on.part.0+0x13c>)
    21ea:	701a      	strb	r2, [r3, #0]
   pPatchTab[57] = 1;
   pPatchTab[53] = 2;
    21ec:	2202      	movs	r2, #2
    21ee:	f803 2c1b 	strb.w	r2, [r3, #-27]
   pPatchTab[55] = 3;
    21f2:	2203      	movs	r2, #3
    21f4:	f803 2c19 	strb.w	r2, [r3, #-25]
   pPatchTab[110] = 4;
    21f8:	2204      	movs	r2, #4
    21fa:	779a      	strb	r2, [r3, #30]
   pPatchTab[107] = 5;
    21fc:	2205      	movs	r2, #5
    21fe:	76da      	strb	r2, [r3, #27]
   pPatchTab[65] = 6;
    2200:	2206      	movs	r2, #6
    2202:	f803 2c0f 	strb.w	r2, [r3, #-15]

   pIrqPatch[1] = _IRQ_PATCH_0;
    2206:	4a35      	ldr	r2, [pc, #212]	; (22dc <rf_on.part.0+0x140>)
   pPatchTab[57] = 1;
    2208:	f803 4c17 	strb.w	r4, [r3, #-23]
   pIrqPatch[1] = _IRQ_PATCH_0;
    220c:	631a      	str	r2, [r3, #48]	; 0x30
   volatile unsigned long *pD = &HWREG(RFC_RFERAM_BASE);
    220e:	4b34      	ldr	r3, [pc, #208]	; (22e0 <rf_on.part.0+0x144>)
   const uint32_t *pS = patchGenfskRfe;
    2210:	4a34      	ldr	r2, [pc, #208]	; (22e4 <rf_on.part.0+0x148>)
      t7 = *pS++;
    2212:	6990      	ldr	r0, [r2, #24]
      t2 = *pS++;
    2214:	e9d2 8e00 	ldrd	r8, lr, [r2]
      t4 = *pS++;
    2218:	e9d2 c702 	ldrd	ip, r7, [r2, #8]
      t6 = *pS++;
    221c:	e9d2 6504 	ldrd	r6, r5, [r2, #16]
      t8 = *pS++;
    2220:	69d4      	ldr	r4, [r2, #28]
      *pD++ = t1;
    2222:	f8c3 8000 	str.w	r8, [r3]
      *pD++ = t2;
    2226:	f8c3 e004 	str.w	lr, [r3, #4]
      *pD++ = t3;
    222a:	f8c3 c008 	str.w	ip, [r3, #8]
      *pD++ = t4;
    222e:	60df      	str	r7, [r3, #12]
      *pD++ = t5;
    2230:	611e      	str	r6, [r3, #16]
      *pD++ = t6;
    2232:	615d      	str	r5, [r3, #20]
      *pD++ = t7;
    2234:	6198      	str	r0, [r3, #24]
    2236:	4618      	mov	r0, r3
   } while (--nIterations);
    2238:	4288      	cmp	r0, r1
    223a:	f102 0220 	add.w	r2, r2, #32
      *pD++ = t8;
    223e:	f103 0320 	add.w	r3, r3, #32
    2242:	61c4      	str	r4, [r0, #28]
   } while (--nIterations);
    2244:	d1e5      	bne.n	2212 <rf_on.part.0+0x76>
   t1 = *pS++;
   t2 = *pS++;
   t3 = *pS++;
   t4 = *pS++;
   t5 = *pS++;
   *pD++ = t1;
    2246:	4b28      	ldr	r3, [pc, #160]	; (22e8 <rf_on.part.0+0x14c>)
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2248:	4828      	ldr	r0, [pc, #160]	; (22ec <rf_on.part.0+0x150>)
    224a:	620b      	str	r3, [r1, #32]
   *pD++ = t2;
    224c:	4b28      	ldr	r3, [pc, #160]	; (22f0 <rf_on.part.0+0x154>)
    224e:	624b      	str	r3, [r1, #36]	; 0x24
   *pD++ = t3;
    2250:	4b28      	ldr	r3, [pc, #160]	; (22f4 <rf_on.part.0+0x158>)
    2252:	628b      	str	r3, [r1, #40]	; 0x28
   *pD++ = t4;
    2254:	4b28      	ldr	r3, [pc, #160]	; (22f8 <rf_on.part.0+0x15c>)
    2256:	62cb      	str	r3, [r1, #44]	; 0x2c
   *pD++ = t5;
    2258:	4b28      	ldr	r3, [pc, #160]	; (22fc <rf_on.part.0+0x160>)
    225a:	630b      	str	r3, [r1, #48]	; 0x30
    225c:	f7ff ff1e 	bl	209c <issue_cmd>
	RFCAdi3VcoLdoVoltageMode (true);
    2260:	2001      	movs	r0, #1
    2262:	f001 f943 	bl	34ec <NOROM_RFCAdi3VcoLdoVoltageMode>
       	RFCRfTrimSet (&rfTrim);
    2266:	4826      	ldr	r0, [pc, #152]	; (2300 <rf_on.part.0+0x164>)
    2268:	f001 f930 	bl	34cc <NOROM_RFCRfTrimSet>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    226c:	4825      	ldr	r0, [pc, #148]	; (2304 <rf_on.part.0+0x168>)
    226e:	f7ff ff15 	bl	209c <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2272:	f44f 5150 	mov.w	r1, #13312	; 0x3400
    2276:	4823      	ldr	r0, [pc, #140]	; (2304 <rf_on.part.0+0x168>)
    2278:	f7ff ff74 	bl	2164 <wait_cmd.constprop.0>
	issue_cmd ((lword)&cmd_srt);
    227c:	4822      	ldr	r0, [pc, #136]	; (2308 <rf_on.part.0+0x16c>)
    227e:	f7ff ff0d 	bl	209c <issue_cmd>
	issue_cmd ((lword)&RF_cmdFs);
    2282:	4822      	ldr	r0, [pc, #136]	; (230c <rf_on.part.0+0x170>)
    2284:	f7ff ff0a 	bl	209c <issue_cmd>
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2288:	4820      	ldr	r0, [pc, #128]	; (230c <rf_on.part.0+0x170>)
    228a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    228e:	f7ff ff69 	bl	2164 <wait_cmd.constprop.0>
	_BIC (dstate, DSTATE_IRST);
    2292:	4a1f      	ldr	r2, [pc, #124]	; (2310 <rf_on.part.0+0x174>)
	IntEnable (INT_RFC_CPE_0);
    2294:	2019      	movs	r0, #25
	_BIC (dstate, DSTATE_IRST);
    2296:	7813      	ldrb	r3, [r2, #0]
    2298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    229c:	f043 0310 	orr.w	r3, r3, #16
    22a0:	7013      	strb	r3, [r2, #0]
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a2:	2300      	movs	r3, #0
    22a4:	4a1b      	ldr	r2, [pc, #108]	; (2314 <rf_on.part.0+0x178>)
    22a6:	6013      	str	r3, [r2, #0]
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a8:	f842 3c04 	str.w	r3, [r2, #-4]
	IntEnable (INT_RFC_CPE_0);
    22ac:	4b1a      	ldr	r3, [pc, #104]	; (2318 <rf_on.part.0+0x17c>)
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22ae:	3a04      	subs	r2, #4
	IntEnable (INT_RFC_CPE_0);
    22b0:	681b      	ldr	r3, [r3, #0]
}
    22b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	IntEnable (INT_RFC_CPE_0);
    22b6:	691b      	ldr	r3, [r3, #16]
    22b8:	4718      	bx	r3
    22ba:	bf00      	nop
    22bc:	40022090 	mulmi	r2, r0, r0
    22c0:	43240004 			; <UNDEFINED> instruction: 0x43240004
    22c4:	60040000 	andvs	r0, r4, r0
    22c8:	06070051 			; <UNDEFINED> instruction: 0x06070051
    22cc:	00004c60 	andeq	r4, r0, r0, ror #24
    22d0:	2100041c 	tstcs	r0, ip, lsl r4
    22d4:	21000390 			; <UNDEFINED> instruction: 0x21000390
    22d8:	2100c680 	smlabbcs	r0, r0, r6, ip
    22dc:	210005bd 			; <UNDEFINED> instruction: 0x210005bd
    22e0:	2100c000 	mrscs	ip, (UNDEF: 0)
    22e4:	000045ac 	andeq	r4, r0, ip, lsr #11
    22e8:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    22ec:	06070001 	streq	r0, [r7], -r1
    22f0:	1a101020 	bne	406378 <__ccfg+0x3e63d0>
    22f4:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    22f8:	16121611 			; <UNDEFINED> instruction: 0x16121611
    22fc:	70006b54 	andvc	r6, r0, r4, asr fp
    2300:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    2304:	20000054 	andcs	r0, r0, r4, asr r0
    2308:	20000024 	andcs	r0, r0, r4, lsr #32
    230c:	2000003c 	andcs	r0, r0, ip, lsr r0
    2310:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    2314:	40041014 	andmi	r1, r4, r4, lsl r0
    2318:	100001b0 			; <UNDEFINED> instruction: 0x100001b0

0000231c <rx_int_enable>:
static void rx_int_enable () {
    231c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
RFCCpe0IntEnable(uint32_t ui32Mask)
{
  //
  // Multiplex RF Core interrupts to CPE0 IRQ.
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2320:	4a2a      	ldr	r2, [pc, #168]	; (23cc <rx_int_enable+0xb0>)
    2322:	6813      	ldr	r3, [r2, #0]
    2324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    232c:	6013      	str	r3, [r2, #0]
  do
  {
    //
    // Clear any pending interrupts.
    //
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    232e:	2200      	movs	r2, #0
    2330:	4b27      	ldr	r3, [pc, #156]	; (23d0 <rx_int_enable+0xb4>)
    2332:	601a      	str	r2, [r3, #0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2334:	681d      	ldr	r5, [r3, #0]
    2336:	2d00      	cmp	r5, #0
    2338:	d1fb      	bne.n	2332 <rx_int_enable+0x16>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    233a:	2602      	movs	r6, #2

  //
  //  Enable the masked interrupts
  //
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    233c:	4a25      	ldr	r2, [pc, #148]	; (23d4 <rx_int_enable+0xb8>)
				diag ("BAD RX");
    233e:	4f26      	ldr	r7, [pc, #152]	; (23d8 <rx_int_enable+0xbc>)
    2340:	6813      	ldr	r3, [r2, #0]
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2342:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 23e4 <rx_int_enable+0xc8>
    2346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    234e:	6013      	str	r3, [r2, #0]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2350:	4b22      	ldr	r3, [pc, #136]	; (23dc <rx_int_enable+0xc0>)
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2352:	f8df 9094 	ldr.w	r9, [pc, #148]	; 23e8 <rx_int_enable+0xcc>
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2356:	69db      	ldr	r3, [r3, #28]
    2358:	681c      	ldr	r4, [r3, #0]
		if (db->status == DATA_ENTRY_FINISHED) {
    235a:	7923      	ldrb	r3, [r4, #4]
    235c:	2b03      	cmp	r3, #3
    235e:	d11e      	bne.n	239e <rx_int_enable+0x82>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2360:	7a63      	ldrb	r3, [r4, #9]
    2362:	7a21      	ldrb	r1, [r4, #8]
    2364:	1cda      	adds	r2, r3, #3
    2366:	4291      	cmp	r1, r2
			nr++;
    2368:	f105 0501 	add.w	r5, r5, #1
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    236c:	d11c      	bne.n	23a8 <rx_int_enable+0x8c>
    236e:	f898 2000 	ldrb.w	r2, [r8]
    2372:	429a      	cmp	r2, r3
    2374:	d318      	bcc.n	23a8 <rx_int_enable+0x8c>
    2376:	f013 0c01 	ands.w	ip, r3, #1
    237a:	d115      	bne.n	23a8 <rx_int_enable+0x8c>
				__dp [pl + 1] = __dp [pl] - 128;
    237c:	f104 0108 	add.w	r1, r4, #8
				pl = __dp [1] + 2;
    2380:	1c9a      	adds	r2, r3, #2
				__dp [pl + 1] = __dp [pl] - 128;
    2382:	5c88      	ldrb	r0, [r1, r2]
    2384:	440b      	add	r3, r1
    2386:	3880      	subs	r0, #128	; 0x80
    2388:	70d8      	strb	r0, [r3, #3]
				__dp [pl] = 0;
    238a:	f801 c002 	strb.w	ip, [r1, r2]
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    238e:	f8b9 0000 	ldrh.w	r0, [r9]
    2392:	f104 010a 	add.w	r1, r4, #10
    2396:	f7ff fb95 	bl	1ac4 <tcvphy_rcv>
			db->status = DATA_ENTRY_PENDING;
    239a:	2300      	movs	r3, #0
    239c:	7123      	strb	r3, [r4, #4]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    239e:	2e01      	cmp	r6, #1
    23a0:	d006      	beq.n	23b0 <rx_int_enable+0x94>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a2:	2601      	movs	r6, #1
    23a4:	6824      	ldr	r4, [r4, #0]
    23a6:	e7d8      	b.n	235a <rx_int_enable+0x3e>
				diag ("BAD RX");
    23a8:	4638      	mov	r0, r7
    23aa:	f7ff f8a5 	bl	14f8 <diag>
    23ae:	e7f4      	b.n	239a <rx_int_enable+0x7e>
	if (nr) {
    23b0:	b14d      	cbz	r5, 23c6 <rx_int_enable+0xaa>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b2:	f7ff f93f 	bl	1634 <lrnd>
}
    23b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23ba:	f3c0 4102 	ubfx	r1, r0, #16, #3
    23be:	3102      	adds	r1, #2
    23c0:	4807      	ldr	r0, [pc, #28]	; (23e0 <rx_int_enable+0xc4>)
    23c2:	f7fe be4b 	b.w	105c <__pi_utimer_set>
}
    23c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    23ca:	bf00      	nop
    23cc:	40041018 	andmi	r1, r4, r8, lsl r0
    23d0:	40041010 	andmi	r1, r4, r0, lsl r0
    23d4:	40041014 	andmi	r1, r4, r4, lsl r0
    23d8:	0000456b 	andeq	r4, r0, fp, ror #10
    23dc:	2000007c 	andcs	r0, r0, ip, ror r0
    23e0:	200005b2 			; <UNDEFINED> instruction: 0x200005b2
    23e4:	200005cc 	andcs	r0, r0, ip, asr #11
    23e8:	200005c4 	andcs	r0, r0, r4, asr #11

000023ec <cc1350_driver>:
thread (cc1350_driver)
    23ec:	2801      	cmp	r0, #1
    23ee:	b570      	push	{r4, r5, r6, lr}
    23f0:	f000 808b 	beq.w	250a <cc1350_driver+0x11e>
    23f4:	2802      	cmp	r0, #2
    23f6:	f000 80bd 	beq.w	2574 <cc1350_driver+0x188>
    23fa:	2800      	cmp	r0, #0
    23fc:	f040 80ce 	bne.w	259c <cc1350_driver+0x1b0>
		if (dstate & DSTATE_IRST) {
    2400:	4c68      	ldr	r4, [pc, #416]	; (25a4 <cc1350_driver+0x1b8>)
    2402:	f994 3000 	ldrsb.w	r3, [r4]
    2406:	2b00      	cmp	r3, #0
    2408:	da05      	bge.n	2416 <cc1350_driver+0x2a>
			rf_off ();
    240a:	f7ff fe7d 	bl	2108 <rf_off>
			_BIC (dstate,
    240e:	7823      	ldrb	r3, [r4, #0]
    2410:	f003 0369 	and.w	r3, r3, #105	; 0x69
    2414:	7023      	strb	r3, [r4, #0]
		if (dstate & DSTATE_RXAC) {
    2416:	7823      	ldrb	r3, [r4, #0]
    2418:	0798      	lsls	r0, r3, #30
    241a:	f003 0201 	and.w	r2, r3, #1
    241e:	d51e      	bpl.n	245e <cc1350_driver+0x72>
			if ((dstate & DSTATE_RXON) == 0)
    2420:	b90a      	cbnz	r2, 2426 <cc1350_driver+0x3a>
				rx_de ();
    2422:	f7ff fe5f 	bl	20e4 <rx_de>
		if (paylen == 0) {
    2426:	4d60      	ldr	r5, [pc, #384]	; (25a8 <cc1350_driver+0x1bc>)
    2428:	4e60      	ldr	r6, [pc, #384]	; (25ac <cc1350_driver+0x1c0>)
    242a:	682b      	ldr	r3, [r5, #0]
    242c:	2b00      	cmp	r3, #0
    242e:	d14c      	bne.n	24ca <cc1350_driver+0xde>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2430:	4b5f      	ldr	r3, [pc, #380]	; (25b0 <cc1350_driver+0x1c4>)
    2432:	4629      	mov	r1, r5
    2434:	8818      	ldrh	r0, [r3, #0]
    2436:	f7ff fb93 	bl	1b60 <tcvphy_get>
    243a:	6170      	str	r0, [r6, #20]
    243c:	2800      	cmp	r0, #0
    243e:	d02f      	beq.n	24a0 <cc1350_driver+0xb4>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2440:	4a5c      	ldr	r2, [pc, #368]	; (25b4 <cc1350_driver+0x1c8>)
				paylen -= 2;
    2442:	682b      	ldr	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2444:	7812      	ldrb	r2, [r2, #0]
				paylen -= 2;
    2446:	3b02      	subs	r3, #2
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2448:	4293      	cmp	r3, r2
				paylen -= 2;
    244a:	602b      	str	r3, [r5, #0]
				sysassert (paylen <= rbuffl && paylen > 0 &&
    244c:	dc03      	bgt.n	2456 <cc1350_driver+0x6a>
    244e:	2b00      	cmp	r3, #0
    2450:	dd01      	ble.n	2456 <cc1350_driver+0x6a>
    2452:	07db      	lsls	r3, r3, #31
    2454:	d51b      	bpl.n	248e <cc1350_driver+0xa2>
    2456:	200a      	movs	r0, #10
    2458:	4957      	ldr	r1, [pc, #348]	; (25b8 <cc1350_driver+0x1cc>)
    245a:	f7fe f845 	bl	4e8 <__pi_syserror>
		} else if (dstate & DSTATE_RXON) {
    245e:	2a00      	cmp	r2, #0
    2460:	d0e1      	beq.n	2426 <cc1350_driver+0x3a>
	if (dstate & DSTATE_RFON)
    2462:	06d9      	lsls	r1, r3, #27
    2464:	d50d      	bpl.n	2482 <cc1350_driver+0x96>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2466:	4855      	ldr	r0, [pc, #340]	; (25bc <cc1350_driver+0x1d0>)
    2468:	69c3      	ldr	r3, [r0, #28]
    246a:	681a      	ldr	r2, [r3, #0]
		re->status = DATA_ENTRY_PENDING;
    246c:	2300      	movs	r3, #0
    246e:	7113      	strb	r3, [r2, #4]
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2470:	6812      	ldr	r2, [r2, #0]
		re->status = DATA_ENTRY_PENDING;
    2472:	7113      	strb	r3, [r2, #4]
	issue_cmd ((lword)&RF_cmdPropRx);
    2474:	f7ff fe12 	bl	209c <issue_cmd>
	_BIS (dstate, DSTATE_RXAC);
    2478:	7823      	ldrb	r3, [r4, #0]
    247a:	f043 0302 	orr.w	r3, r3, #2
    247e:	7023      	strb	r3, [r4, #0]
    2480:	e7d1      	b.n	2426 <cc1350_driver+0x3a>
    2482:	f7ff fe8b 	bl	219c <rf_on.part.0>
	if (dstate & DSTATE_RXAC)
    2486:	7823      	ldrb	r3, [r4, #0]
    2488:	079a      	lsls	r2, r3, #30
    248a:	d5ec      	bpl.n	2466 <cc1350_driver+0x7a>
    248c:	e7cb      	b.n	2426 <cc1350_driver+0x3a>
				if (statid != 0xffff)
    248e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2492:	4b4b      	ldr	r3, [pc, #300]	; (25c0 <cc1350_driver+0x1d4>)
    2494:	881b      	ldrh	r3, [r3, #0]
    2496:	4293      	cmp	r3, r2
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2498:	bf18      	it	ne
    249a:	8003      	strhne	r3, [r0, #0]
				RF_cmdPropTx.pktLen = (byte) paylen;
    249c:	682b      	ldr	r3, [r5, #0]
    249e:	73f3      	strb	r3, [r6, #15]
		if (paylen == 0) {
    24a0:	6829      	ldr	r1, [r5, #0]
    24a2:	b991      	cbnz	r1, 24ca <cc1350_driver+0xde>
			wait (qevent, DR_LOOP);
    24a4:	4b47      	ldr	r3, [pc, #284]	; (25c4 <cc1350_driver+0x1d8>)
    24a6:	6818      	ldr	r0, [r3, #0]
    24a8:	f7fe fe4c 	bl	1144 <__pi_wait>
			if (dstate & DSTATE_RXAC) {
    24ac:	7823      	ldrb	r3, [r4, #0]
    24ae:	079d      	lsls	r5, r3, #30
    24b0:	d503      	bpl.n	24ba <cc1350_driver+0xce>
				rx_int_enable ();
    24b2:	f7ff ff33 	bl	231c <rx_int_enable>
			release;
    24b6:	f7fe fbd5 	bl	c64 <__pi_release>
			} else if (dstate & DSTATE_RFON) {
    24ba:	06dc      	lsls	r4, r3, #27
    24bc:	d5fb      	bpl.n	24b6 <cc1350_driver+0xca>
				delay (offdelay, DR_GOOF);
    24be:	2102      	movs	r1, #2
    24c0:	4b41      	ldr	r3, [pc, #260]	; (25c8 <cc1350_driver+0x1dc>)
    24c2:	8818      	ldrh	r0, [r3, #0]
    24c4:	f7fe fe84 	bl	11d0 <delay>
    24c8:	e7f5      	b.n	24b6 <cc1350_driver+0xca>
		if (bckf_timer) {
    24ca:	4d40      	ldr	r5, [pc, #256]	; (25cc <cc1350_driver+0x1e0>)
    24cc:	882b      	ldrh	r3, [r5, #0]
    24ce:	b163      	cbz	r3, 24ea <cc1350_driver+0xfe>
			wait (qevent, DR_LOOP);
    24d0:	4b3c      	ldr	r3, [pc, #240]	; (25c4 <cc1350_driver+0x1d8>)
    24d2:	2100      	movs	r1, #0
    24d4:	6818      	ldr	r0, [r3, #0]
    24d6:	f7fe fe35 	bl	1144 <__pi_wait>
			delay (bckf_timer, DR_LOOP);
    24da:	8828      	ldrh	r0, [r5, #0]
    24dc:	2100      	movs	r1, #0
    24de:	f7fe fe77 	bl	11d0 <delay>
			if (dstate & DSTATE_RXAC)
    24e2:	7823      	ldrb	r3, [r4, #0]
    24e4:	0798      	lsls	r0, r3, #30
    24e6:	d5e6      	bpl.n	24b6 <cc1350_driver+0xca>
    24e8:	e7e3      	b.n	24b2 <cc1350_driver+0xc6>
	if (dstate & DSTATE_RFON)
    24ea:	7823      	ldrb	r3, [r4, #0]
    24ec:	06d9      	lsls	r1, r3, #27
    24ee:	d401      	bmi.n	24f4 <cc1350_driver+0x108>
    24f0:	f7ff fe54 	bl	219c <rf_on.part.0>
		rx_de ();
    24f4:	f7ff fdf6 	bl	20e4 <rx_de>
		RF_cmdPropTx . status = 0;
    24f8:	2300      	movs	r3, #0
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24fa:	f06f 0202 	mvn.w	r2, #2
		RF_cmdPropTx . status = 0;
    24fe:	8073      	strh	r3, [r6, #2]
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2500:	4b33      	ldr	r3, [pc, #204]	; (25d0 <cc1350_driver+0x1e4>)
		issue_cmd ((lword)&cmd_cs);
    2502:	4834      	ldr	r0, [pc, #208]	; (25d4 <cc1350_driver+0x1e8>)
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    2504:	601a      	str	r2, [r3, #0]
		issue_cmd ((lword)&cmd_cs);
    2506:	f7ff fdc9 	bl	209c <issue_cmd>
		if (dstate & DSTATE_IRST)
    250a:	4b26      	ldr	r3, [pc, #152]	; (25a4 <cc1350_driver+0x1b8>)
    250c:	f993 3000 	ldrsb.w	r3, [r3]
    2510:	2b00      	cmp	r3, #0
    2512:	f6ff af75 	blt.w	2400 <cc1350_driver+0x14>
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2516:	4b2e      	ldr	r3, [pc, #184]	; (25d0 <cc1350_driver+0x1e4>)
    2518:	681a      	ldr	r2, [r3, #0]
    251a:	0792      	lsls	r2, r2, #30
    251c:	d402      	bmi.n	2524 <cc1350_driver+0x138>
			delay (1, DR_XMIT);
    251e:	2101      	movs	r1, #1
    2520:	4608      	mov	r0, r1
    2522:	e7cf      	b.n	24c4 <cc1350_driver+0xd8>
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2524:	4821      	ldr	r0, [pc, #132]	; (25ac <cc1350_driver+0x1c0>)
    2526:	4c2c      	ldr	r4, [pc, #176]	; (25d8 <cc1350_driver+0x1ec>)
    2528:	8842      	ldrh	r2, [r0, #2]
    252a:	f5b2 5f50 	cmp.w	r2, #13312	; 0x3400
    252e:	d018      	beq.n	2562 <cc1350_driver+0x176>
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2530:	7822      	ldrb	r2, [r4, #0]
    2532:	2a0f      	cmp	r2, #15
    2534:	d909      	bls.n	254a <cc1350_driver+0x15e>
				RF_cmdPropTx . status = 0;
    2536:	2200      	movs	r2, #0
    2538:	8042      	strh	r2, [r0, #2]
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    253a:	f06f 0202 	mvn.w	r2, #2
    253e:	601a      	str	r2, [r3, #0]
				issue_cmd ((lword)&RF_cmdPropTx);
    2540:	f7ff fdac 	bl	209c <issue_cmd>
				proceed (DR_XMIT);
    2544:	2001      	movs	r0, #1
    2546:	f7fe fdf3 	bl	1130 <proceed>
			txtries++;
    254a:	7823      	ldrb	r3, [r4, #0]
    254c:	3301      	adds	r3, #1
    254e:	7023      	strb	r3, [r4, #0]
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2550:	f7ff f870 	bl	1634 <lrnd>
    2554:	f3c0 4105 	ubfx	r1, r0, #16, #6
    2558:	3102      	adds	r1, #2
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    255a:	481c      	ldr	r0, [pc, #112]	; (25cc <cc1350_driver+0x1e0>)
    255c:	f7fe fd7e 	bl	105c <__pi_utimer_set>
		goto DR_LOOP__;
    2560:	e74e      	b.n	2400 <cc1350_driver+0x14>
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2562:	6940      	ldr	r0, [r0, #20]
    2564:	f7ff fb36 	bl	1bd4 <tcvphy_end>
		paylen = 0;
    2568:	2300      	movs	r3, #0
    256a:	4a0f      	ldr	r2, [pc, #60]	; (25a8 <cc1350_driver+0x1bc>)
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    256c:	2102      	movs	r1, #2
		paylen = 0;
    256e:	6013      	str	r3, [r2, #0]
		txtries = 0;
    2570:	7023      	strb	r3, [r4, #0]
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    2572:	e7f2      	b.n	255a <cc1350_driver+0x16e>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2574:	4b0b      	ldr	r3, [pc, #44]	; (25a4 <cc1350_driver+0x1b8>)
    2576:	781a      	ldrb	r2, [r3, #0]
    2578:	f993 3000 	ldrsb.w	r3, [r3]
    257c:	2b00      	cmp	r3, #0
    257e:	f6ff af3f 	blt.w	2400 <cc1350_driver+0x14>
    2582:	07d3      	lsls	r3, r2, #31
    2584:	f53f af3c 	bmi.w	2400 <cc1350_driver+0x14>
		    tcvphy_top (physid) == NULL)
    2588:	4b09      	ldr	r3, [pc, #36]	; (25b0 <cc1350_driver+0x1c4>)
    258a:	8818      	ldrh	r0, [r3, #0]
    258c:	f7ff fb08 	bl	1ba0 <tcvphy_top>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2590:	2800      	cmp	r0, #0
    2592:	f47f af35 	bne.w	2400 <cc1350_driver+0x14>
			rf_off ();
    2596:	f7ff fdb7 	bl	2108 <rf_off>
    259a:	e731      	b.n	2400 <cc1350_driver+0x14>
endthread
    259c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    25a0:	f7fe bd3e 	b.w	1020 <__pi_badstate>
    25a4:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    25a8:	200005c0 	andcs	r0, r0, r0, asr #11
    25ac:	200000a0 	andcs	r0, r0, r0, lsr #1
    25b0:	200005c4 	andcs	r0, r0, r4, asr #11
    25b4:	200005cc 	andcs	r0, r0, ip, asr #11
    25b8:	00004572 	andeq	r4, r0, r2, ror r5
    25bc:	2000007c 	andcs	r0, r0, ip, ror r0
    25c0:	200005ec 	andcs	r0, r0, ip, ror #11
    25c4:	200005c8 	andcs	r0, r0, r8, asr #11
    25c8:	20000038 	andcs	r0, r0, r8, lsr r0
    25cc:	200005b2 			; <UNDEFINED> instruction: 0x200005b2
    25d0:	40041010 	andmi	r1, r4, r0, lsl r0
    25d4:	20000008 	andcs	r0, r0, r8
    25d8:	200005ee 	andcs	r0, r0, lr, ror #11

000025dc <RFCCPE0IntHandler>:
void RFCCPE0IntHandler (void) {
    25dc:	b530      	push	{r4, r5, lr}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25de:	4a15      	ldr	r2, [pc, #84]	; (2634 <RFCCPE0IntHandler+0x58>)
    25e0:	6813      	ldr	r3, [r2, #0]
    25e2:	2b00      	cmp	r3, #0
		_BIS (dstate, DSTATE_IRST);
    25e4:	bfbf      	itttt	lt
    25e6:	4914      	ldrlt	r1, [pc, #80]	; (2638 <RFCCPE0IntHandler+0x5c>)
    25e8:	780b      	ldrblt	r3, [r1, #0]
    25ea:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    25ee:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25f0:	2100      	movs	r1, #0
    25f2:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f4:	6813      	ldr	r3, [r2, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1fb      	bne.n	25f2 <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    25fa:	4a10      	ldr	r2, [pc, #64]	; (263c <RFCCPE0IntHandler+0x60>)
	p_trigger (drvprcs, qevent);
    25fc:	4c10      	ldr	r4, [pc, #64]	; (2640 <RFCCPE0IntHandler+0x64>)
    25fe:	6811      	ldr	r1, [r2, #0]
    2600:	6013      	str	r3, [r2, #0]
    2602:	4a10      	ldr	r2, [pc, #64]	; (2644 <RFCCPE0IntHandler+0x68>)
    2604:	6824      	ldr	r4, [r4, #0]
    2606:	6811      	ldr	r1, [r2, #0]
    2608:	4608      	mov	r0, r1
    260a:	f830 2b10 	ldrh.w	r2, [r0], #16
    260e:	f002 0207 	and.w	r2, r2, #7
    2612:	429a      	cmp	r2, r3
    2614:	dd08      	ble.n	2628 <RFCCPE0IntHandler+0x4c>
    2616:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    261a:	3301      	adds	r3, #1
    261c:	42a5      	cmp	r5, r4
    261e:	d1f8      	bne.n	2612 <RFCCPE0IntHandler+0x36>
    2620:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2624:	889b      	ldrh	r3, [r3, #4]
    2626:	800b      	strh	r3, [r1, #0]
	RISE_N_SHINE;
    2628:	4a07      	ldr	r2, [pc, #28]	; (2648 <RFCCPE0IntHandler+0x6c>)
    262a:	7813      	ldrb	r3, [r2, #0]
    262c:	f043 0302 	orr.w	r3, r3, #2
    2630:	7013      	strb	r3, [r2, #0]
}
    2632:	bd30      	pop	{r4, r5, pc}
    2634:	40041010 	andmi	r1, r4, r0, lsl r0
    2638:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    263c:	40041014 	andmi	r1, r4, r4, lsl r0
    2640:	200005c8 	andcs	r0, r0, r8, asr #11
    2644:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    2648:	20000b50 	andcs	r0, r0, r0, asr fp

0000264c <phys_cc1350>:

// ============================================================================

void phys_cc1350 (int phy, int mbs) {
    264c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// packet length is (and I have reasons not to trust the manual), so let me
// assume it is 255 - 4 - 1 = 250. We shall be careful.
//

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (rbuffl != 0)
    2650:	4c49      	ldr	r4, [pc, #292]	; (2778 <phys_cc1350+0x12c>)
void phys_cc1350 (int phy, int mbs) {
    2652:	4606      	mov	r6, r0
	if (rbuffl != 0)
    2654:	7822      	ldrb	r2, [r4, #0]
    2656:	b11a      	cbz	r2, 2660 <phys_cc1350+0x14>
		/* We are allowed to do it only once */
		syserror (ETOOMANY, "cc13");
    2658:	2009      	movs	r0, #9
    265a:	4948      	ldr	r1, [pc, #288]	; (277c <phys_cc1350+0x130>)
		mbs = CC1350_MAXPLEN;

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
		/* We are allowed to do it only once */
		syserror (EREQPAR, "cc13 mb");
    265c:	f7fd ff44 	bl	4e8 <__pi_syserror>
	if (mbs == 0)
    2660:	b129      	cbz	r1, 266e <phys_cc1350+0x22>
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2662:	1f8a      	subs	r2, r1, #6
    2664:	2af4      	cmp	r2, #244	; 0xf4
    2666:	d903      	bls.n	2670 <phys_cc1350+0x24>
		syserror (EREQPAR, "cc13 mb");
    2668:	2003      	movs	r0, #3
    266a:	4945      	ldr	r1, [pc, #276]	; (2780 <phys_cc1350+0x134>)
    266c:	e7f6      	b.n	265c <phys_cc1350+0x10>
		mbs = CC1350_MAXPLEN;
    266e:	21fa      	movs	r1, #250	; 0xfa
	i = 0;
    2670:	2700      	movs	r7, #0
#endif

	rbuffl = (byte) mbs;
    2672:	f04f 0802 	mov.w	r8, #2
		db->status = DATA_ENTRY_PENDING;
    2676:	46ba      	mov	sl, r7
		db->config.type = 0;	// General (data in structure)
    2678:	f04f 0904 	mov.w	r9, #4
	rbuffl = (byte) mbs;
    267c:	7021      	strb	r1, [r4, #0]
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    267e:	7820      	ldrb	r0, [r4, #0]
    2680:	469b      	mov	fp, r3
    2682:	300d      	adds	r0, #13
    2684:	f7fe febe 	bl	1404 <__pi_malloc>
		if (db == NULL)
    2688:	4603      	mov	r3, r0
    268a:	b920      	cbnz	r0, 2696 <phys_cc1350+0x4a>
			syserror (EMALLOC, "cc13");
    268c:	2006      	movs	r0, #6
    268e:	493b      	ldr	r1, [pc, #236]	; (277c <phys_cc1350+0x130>)
    2690:	e7e4      	b.n	265c <phys_cc1350+0x10>
    2692:	46b8      	mov	r8, r7
    2694:	e7f3      	b.n	267e <phys_cc1350+0x32>
		db->status = DATA_ENTRY_PENDING;
    2696:	f880 a004 	strb.w	sl, [r0, #4]
		if (i)
    269a:	2f00      	cmp	r7, #0
    269c:	d03e      	beq.n	271c <phys_cc1350+0xd0>
			da->pNextEntry = (byte*) db;
    269e:	f8cb 0000 	str.w	r0, [fp]
		if (++i == NRBUFFS)
    26a2:	2701      	movs	r7, #1
		db->length = rbuffl + 2;
    26a4:	7822      	ldrb	r2, [r4, #0]
		if (++i == NRBUFFS)
    26a6:	45b8      	cmp	r8, r7
		db->length = rbuffl + 2;
    26a8:	f102 0202 	add.w	r2, r2, #2
		db->config.type = 0;	// General (data in structure)
    26ac:	f883 9005 	strb.w	r9, [r3, #5]
		db->length = rbuffl + 2;
    26b0:	80da      	strh	r2, [r3, #6]
		if (++i == NRBUFFS)
    26b2:	d1ee      	bne.n	2692 <phys_cc1350+0x46>
	db->pNextEntry = (byte*) re;
    26b4:	601d      	str	r5, [r3, #0]
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b6:	2008      	movs	r0, #8
    26b8:	f7fe fea4 	bl	1404 <__pi_malloc>
    26bc:	4b31      	ldr	r3, [pc, #196]	; (2784 <phys_cc1350+0x138>)
    26be:	61d8      	str	r0, [r3, #28]
	if (rbuffs == NULL)
    26c0:	2800      	cmp	r0, #0
    26c2:	d0e3      	beq.n	268c <phys_cc1350+0x40>
	rbuffs->pCurrEntry = (byte*) re;
    26c4:	6005      	str	r5, [r0, #0]
	rbuffs->pLastEntry = NULL;
    26c6:	2500      	movs	r5, #0
    26c8:	69da      	ldr	r2, [r3, #28]
	init_rbuffs ();

	physid = phy;

	// Register the phy
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ca:	492f      	ldr	r1, [pc, #188]	; (2788 <phys_cc1350+0x13c>)
	rbuffs->pLastEntry = NULL;
    26cc:	6055      	str	r5, [r2, #4]
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26ce:	4a2f      	ldr	r2, [pc, #188]	; (278c <phys_cc1350+0x140>)
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d0:	4630      	mov	r0, r6
	RF_cmdPropRx . pOutput = (byte*) &rxstat;
    26d2:	621a      	str	r2, [r3, #32]
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d4:	89da      	ldrh	r2, [r3, #14]
    26d6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
    26da:	f042 0206 	orr.w	r2, r2, #6
    26de:	81da      	strh	r2, [r3, #14]
	rbuffl -= 2;
    26e0:	7823      	ldrb	r3, [r4, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e2:	f44f 6210 	mov.w	r2, #2304	; 0x900
	rbuffl -= 2;
    26e6:	3b02      	subs	r3, #2
    26e8:	7023      	strb	r3, [r4, #0]
	physid = phy;
    26ea:	4b29      	ldr	r3, [pc, #164]	; (2790 <phys_cc1350+0x144>)
    26ec:	801e      	strh	r6, [r3, #0]
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26ee:	f7ff f9c1 	bl	1a74 <tcvphy_reg>
    26f2:	4b28      	ldr	r3, [pc, #160]	; (2794 <phys_cc1350+0x148>)
	LEDI (0, 0);
	LEDI (1, 0);
	LEDI (2, 0);

#if DIAG_MESSAGES
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f4:	2207      	movs	r2, #7
    26f6:	2102      	movs	r1, #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	6018      	str	r0, [r3, #0]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fa:	462b      	mov	r3, r5
    26fc:	4826      	ldr	r0, [pc, #152]	; (2798 <phys_cc1350+0x14c>)
    26fe:	f7fe fefb 	bl	14f8 <diag>
		RADIO_DEFAULT_CHANNEL);
#endif

	// Install the backoff timer
	utimer_add (&bckf_timer);
    2702:	4826      	ldr	r0, [pc, #152]	; (279c <phys_cc1350+0x150>)
    2704:	f7fe fc94 	bl	1030 <utimer_add>

	// Start the driver process
	drvprcs = runthread (cc1350_driver);
    2708:	4629      	mov	r1, r5
    270a:	4825      	ldr	r0, [pc, #148]	; (27a0 <phys_cc1350+0x154>)
    270c:	f7fe fece 	bl	14ac <__pi_fork>
    2710:	4b24      	ldr	r3, [pc, #144]	; (27a4 <phys_cc1350+0x158>)
    2712:	6018      	str	r0, [r3, #0]

#if (RADIO_OPTIONS & RADIO_OPTION_NOCHECKS) == 0
	if (drvprcs == 0)
    2714:	b920      	cbnz	r0, 2720 <phys_cc1350+0xd4>
		syserror (ERESOURCE, "cc13");
    2716:	2004      	movs	r0, #4
    2718:	4918      	ldr	r1, [pc, #96]	; (277c <phys_cc1350+0x130>)
    271a:	e79f      	b.n	265c <phys_cc1350+0x10>
    271c:	4605      	mov	r5, r0
    271e:	e7c0      	b.n	26a2 <phys_cc1350+0x56>

#if RADIO_DEFAULT_POWER <= 7
#if (RADIO_OPTIONS & RADIO_OPTION_PXOPTIONS)
	cmd_sp.txPower =
#endif
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2720:	f64b 432b 	movw	r3, #48171	; 0xbc2b
    2724:	4c20      	ldr	r4, [pc, #128]	; (27a8 <phys_cc1350+0x15c>)
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2726:	4921      	ldr	r1, [pc, #132]	; (27ac <phys_cc1350+0x160>)
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2728:	8363      	strh	r3, [r4, #26]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    272a:	4b21      	ldr	r3, [pc, #132]	; (27b0 <phys_cc1350+0x164>)
    272c:	781a      	ldrb	r2, [r3, #0]
    272e:	3a01      	subs	r2, #1
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2730:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	8858      	ldrh	r0, [r3, #2]
    2736:	f831 3022 	ldrh.w	r3, [r1, r2, lsl #2]
    273a:	6922      	ldr	r2, [r4, #16]
    273c:	f003 030f 	and.w	r3, r3, #15
    2740:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
    2744:	f422 12ff 	bic.w	r2, r2, #2088960	; 0x1fe000
    2748:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    274c:	f022 020f 	bic.w	r2, r2, #15
    2750:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    2754:	4313      	orrs	r3, r2
    2756:	6123      	str	r3, [r4, #16]
#endif

#if RADIO_BITRATE_INDEX > 0
	plugrt ();
#endif
	plugch ();
    2758:	f7ff fbc8 	bl	1eec <plugch>

	// Make sure, prop mode is selected in PRCM (this is supposed to be
	// the default)
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	4b15      	ldr	r3, [pc, #84]	; (27b4 <phys_cc1350+0x168>)

	// Precompute the Trim
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    275e:	4620      	mov	r0, r4
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    2760:	601d      	str	r5, [r3, #0]
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2762:	f000 fe27 	bl	33b4 <NOROM_RFCRTrim>
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2766:	4620      	mov	r0, r4
    2768:	4913      	ldr	r1, [pc, #76]	; (27b8 <phys_cc1350+0x16c>)
    276a:	f000 fd7b 	bl	3264 <NOROM_RFCRfTrimRead>
			(rfTrim_t*)&rfTrim);

	// Direct all doorbell interrupts permanently to CPE0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    276e:	4b13      	ldr	r3, [pc, #76]	; (27bc <phys_cc1350+0x170>)
    2770:	601d      	str	r5, [r3, #0]
}
    2772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2776:	bf00      	nop
    2778:	200005cc 	andcs	r0, r0, ip, asr #11
    277c:	0000457a 	andeq	r4, r0, sl, ror r5
    2780:	0000457f 	andeq	r4, r0, pc, ror r5
    2784:	2000007c 	andcs	r0, r0, ip, ror r0
    2788:	00001f0d 	andeq	r1, r0, sp, lsl #30
    278c:	200005e0 	andcs	r0, r0, r0, ror #11
    2790:	200005c4 	andcs	r0, r0, r4, asr #11
    2794:	200005c8 	andcs	r0, r0, r8, asr #11
    2798:	00004587 	andeq	r4, r0, r7, lsl #11
    279c:	200005b2 			; <UNDEFINED> instruction: 0x200005b2
    27a0:	000023ed 	andeq	r2, r0, sp, ror #7
    27a4:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
    27a8:	20000054 	andcs	r0, r0, r4, asr r0
    27ac:	00004eec 	andeq	r4, r0, ip, ror #29
    27b0:	2000003a 	andcs	r0, r0, sl, lsr r0
    27b4:	400821d0 	ldrdmi	r2, [r8], -r0
    27b8:	200005d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    27bc:	40041018 	andmi	r1, r4, r8, lsl r0

000027c0 <tcv_clo_null>:
    27c0:	b510      	push	{r4, lr}
    27c2:	4a07      	ldr	r2, [pc, #28]	; (27e0 <tcv_clo_null+0x20>)
    27c4:	4603      	mov	r3, r0
    27c6:	6812      	ldr	r2, [r2, #0]
    27c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    27cc:	b132      	cbz	r2, 27dc <tcv_clo_null+0x1c>
    27ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    27d2:	428c      	cmp	r4, r1
    27d4:	bf04      	itt	eq
    27d6:	f842 0023 	streq.w	r0, [r2, r3, lsl #2]
    27da:	2000      	moveq	r0, #0
    27dc:	bd10      	pop	{r4, pc}
    27de:	bf00      	nop
    27e0:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

000027e4 <tcv_rcv_null>:
    27e4:	4907      	ldr	r1, [pc, #28]	; (2804 <tcv_rcv_null+0x20>)
    27e6:	9a00      	ldr	r2, [sp, #0]
    27e8:	6809      	ldr	r1, [r1, #0]
    27ea:	b909      	cbnz	r1, 27f0 <tcv_rcv_null+0xc>
    27ec:	2000      	movs	r0, #0
    27ee:	4770      	bx	lr
    27f0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    27f4:	6019      	str	r1, [r3, #0]
    27f6:	3101      	adds	r1, #1
    27f8:	d0f8      	beq.n	27ec <tcv_rcv_null+0x8>
    27fa:	2300      	movs	r3, #0
    27fc:	2002      	movs	r0, #2
    27fe:	8053      	strh	r3, [r2, #2]
    2800:	8013      	strh	r3, [r2, #0]
    2802:	4770      	bx	lr
    2804:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

00002808 <tcv_frm_null>:
    2808:	2000      	movs	r0, #0
    280a:	8048      	strh	r0, [r1, #2]
    280c:	8008      	strh	r0, [r1, #0]
    280e:	4770      	bx	lr

00002810 <tcv_out_null>:
    2810:	2004      	movs	r0, #4
    2812:	4770      	bx	lr

00002814 <tcv_xmt_null>:
    2814:	2001      	movs	r0, #1
    2816:	4770      	bx	lr

00002818 <tcv_ope_null>:
    2818:	b570      	push	{r4, r5, r6, lr}
    281a:	4c0f      	ldr	r4, [pc, #60]	; (2858 <tcv_ope_null+0x40>)
    281c:	4605      	mov	r5, r0
    281e:	6823      	ldr	r3, [r4, #0]
    2820:	460e      	mov	r6, r1
    2822:	b94b      	cbnz	r3, 2838 <tcv_ope_null+0x20>
    2824:	200c      	movs	r0, #12
    2826:	f7fe fded 	bl	1404 <__pi_malloc>
    282a:	6020      	str	r0, [r4, #0]
    282c:	b178      	cbz	r0, 284e <tcv_ope_null+0x36>
    282e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2832:	e9c0 3300 	strd	r3, r3, [r0]
    2836:	6083      	str	r3, [r0, #8]
    2838:	6823      	ldr	r3, [r4, #0]
    283a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    283e:	3201      	adds	r2, #1
    2840:	bf06      	itte	eq
    2842:	f843 6025 	streq.w	r6, [r3, r5, lsl #2]
    2846:	2000      	moveq	r0, #0
    2848:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    284c:	bd70      	pop	{r4, r5, r6, pc}
    284e:	2006      	movs	r0, #6
    2850:	4902      	ldr	r1, [pc, #8]	; (285c <tcv_ope_null+0x44>)
    2852:	f7fd fe49 	bl	4e8 <__pi_syserror>
    2856:	bf00      	nop
    2858:	200005f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    285c:	00004ef8 	strdeq	r4, [r0], -r8

00002860 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    2860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2862:	4b18      	ldr	r3, [pc, #96]	; (28c4 <__outserial+0x64>)
    2864:	681b      	ldr	r3, [r3, #0]
    2866:	689d      	ldr	r5, [r3, #8]
    2868:	b130      	cbz	r0, 2878 <__outserial+0x18>
    286a:	280a      	cmp	r0, #10
    286c:	d00d      	beq.n	288a <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    286e:	b003      	add	sp, #12
    2870:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2874:	f7fe bbd4 	b.w	1020 <__pi_badstate>
	ptr = data;
    2878:	4b13      	ldr	r3, [pc, #76]	; (28c8 <__outserial+0x68>)
    287a:	4c14      	ldr	r4, [pc, #80]	; (28cc <__outserial+0x6c>)
    287c:	601d      	str	r5, [r3, #0]
	if (*ptr)
    287e:	782b      	ldrb	r3, [r5, #0]
    2880:	b1e3      	cbz	r3, 28bc <__outserial+0x5c>
		len = strlen (ptr);
    2882:	4628      	mov	r0, r5
    2884:	f7fe fcd2 	bl	122c <__pi_strlen>
    2888:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    288a:	4e0f      	ldr	r6, [pc, #60]	; (28c8 <__outserial+0x68>)
    288c:	4f0f      	ldr	r7, [pc, #60]	; (28cc <__outserial+0x6c>)
    288e:	883b      	ldrh	r3, [r7, #0]
    2890:	2201      	movs	r2, #1
    2892:	9300      	str	r3, [sp, #0]
    2894:	2100      	movs	r1, #0
    2896:	6833      	ldr	r3, [r6, #0]
    2898:	200a      	movs	r0, #10
    289a:	f7fe fcf1 	bl	1280 <io>
	ptr += quant;
    289e:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    28a0:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    28a2:	4403      	add	r3, r0
	len -= quant;
    28a4:	1a24      	subs	r4, r4, r0
	ptr += quant;
    28a6:	6033      	str	r3, [r6, #0]
	len -= quant;
    28a8:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    28aa:	2c00      	cmp	r4, #0
    28ac:	d1ef      	bne.n	288e <__outserial+0x2e>
		ufree (data);
    28ae:	4628      	mov	r0, r5
    28b0:	f7fe fd5c 	bl	136c <__pi_free>
		finish;
    28b4:	4620      	mov	r0, r4
    28b6:	f7fe fd7d 	bl	13b4 <kill>
    28ba:	e7e8      	b.n	288e <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28bc:	786b      	ldrb	r3, [r5, #1]
    28be:	3303      	adds	r3, #3
    28c0:	6023      	str	r3, [r4, #0]
    28c2:	e7e2      	b.n	288a <__outserial+0x2a>
    28c4:	20000b6c 	andcs	r0, r0, ip, ror #22
    28c8:	200005f8 	strdcs	r0, [r0], -r8
    28cc:	200005f4 	strdcs	r0, [r0], -r4

000028d0 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    28d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28d2:	4d42      	ldr	r5, [pc, #264]	; (29dc <__inserial+0x10c>)
    28d4:	682a      	ldr	r2, [r5, #0]
    28d6:	6894      	ldr	r4, [r2, #8]
    28d8:	2803      	cmp	r0, #3
    28da:	d87a      	bhi.n	29d2 <__inserial+0x102>
    28dc:	e8df f000 	tbb	[pc, r0]
    28e0:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    28e4:	4b3e      	ldr	r3, [pc, #248]	; (29e0 <__inserial+0x110>)
    28e6:	681b      	ldr	r3, [r3, #0]
    28e8:	b113      	cbz	r3, 28f0 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    28ea:	2000      	movs	r0, #0
    28ec:	f7fe fd62 	bl	13b4 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28f0:	2040      	movs	r0, #64	; 0x40
    28f2:	f7fe fd87 	bl	1404 <__pi_malloc>
    28f6:	4b3b      	ldr	r3, [pc, #236]	; (29e4 <__inserial+0x114>)
    28f8:	4604      	mov	r4, r0
    28fa:	6018      	str	r0, [r3, #0]
    28fc:	b918      	cbnz	r0, 2906 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    28fe:	f7fe fdef 	bl	14e0 <__pi_waitmem>
		release;
    2902:	f7fe f9af 	bl	c64 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    2906:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    2908:	682b      	ldr	r3, [r5, #0]
    290a:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    290c:	4b36      	ldr	r3, [pc, #216]	; (29e8 <__inserial+0x118>)
    290e:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    2910:	2001      	movs	r0, #1
    2912:	2200      	movs	r2, #0
    2914:	4d33      	ldr	r5, [pc, #204]	; (29e4 <__inserial+0x114>)
    2916:	9000      	str	r0, [sp, #0]
    2918:	682b      	ldr	r3, [r5, #0]
    291a:	4611      	mov	r1, r2
    291c:	f7fe fcb0 	bl	1280 <io>
	if (ptr == (char*) data) { // new line
    2920:	682b      	ldr	r3, [r5, #0]
    2922:	42a3      	cmp	r3, r4
    2924:	d10d      	bne.n	2942 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    2926:	7823      	ldrb	r3, [r4, #0]
    2928:	b923      	cbnz	r3, 2934 <__inserial+0x64>
			ptr++;
    292a:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    292c:	2002      	movs	r0, #2
			ptr++;
    292e:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    2930:	f7fe fbfe 	bl	1130 <proceed>
		}

		if (*ptr < 0x20)
    2934:	682b      	ldr	r3, [r5, #0]
    2936:	781b      	ldrb	r3, [r3, #0]
    2938:	2b1f      	cmp	r3, #31
    293a:	d802      	bhi.n	2942 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    293c:	2001      	movs	r0, #1
    293e:	f7fe fbf7 	bl	1130 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    2942:	682b      	ldr	r3, [r5, #0]
    2944:	781a      	ldrb	r2, [r3, #0]
    2946:	2a0a      	cmp	r2, #10
    2948:	d001      	beq.n	294e <__inserial+0x7e>
    294a:	2a0d      	cmp	r2, #13
    294c:	d105      	bne.n	295a <__inserial+0x8a>
		*ptr = '\0';
    294e:	2000      	movs	r0, #0
    2950:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    2952:	4b23      	ldr	r3, [pc, #140]	; (29e0 <__inserial+0x110>)
    2954:	601c      	str	r4, [r3, #0]
		finish;
    2956:	f7fe fd2d 	bl	13b4 <kill>
	}

	if (len) {
    295a:	4923      	ldr	r1, [pc, #140]	; (29e8 <__inserial+0x118>)
    295c:	680b      	ldr	r3, [r1, #0]
    295e:	b123      	cbz	r3, 296a <__inserial+0x9a>
		ptr++;
    2960:	682a      	ldr	r2, [r5, #0]
		len--;
    2962:	3b01      	subs	r3, #1
		ptr++;
    2964:	3201      	adds	r2, #1
    2966:	602a      	str	r2, [r5, #0]
		len--;
    2968:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    296a:	2001      	movs	r0, #1
    296c:	f7fe fbe0 	bl	1130 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    2970:	2301      	movs	r3, #1
    2972:	2200      	movs	r2, #0
    2974:	4d1b      	ldr	r5, [pc, #108]	; (29e4 <__inserial+0x114>)
    2976:	9300      	str	r3, [sp, #0]
    2978:	4611      	mov	r1, r2
    297a:	682b      	ldr	r3, [r5, #0]
    297c:	2002      	movs	r0, #2
    297e:	f7fe fc7f 	bl	1280 <io>
	len -= 2;
    2982:	4819      	ldr	r0, [pc, #100]	; (29e8 <__inserial+0x118>)
    2984:	6803      	ldr	r3, [r0, #0]
    2986:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    2988:	682b      	ldr	r3, [r5, #0]
    298a:	f813 1b01 	ldrb.w	r1, [r3], #1
    298e:	3101      	adds	r1, #1
		len = *ptr + 1;
    2990:	4291      	cmp	r1, r2
    2992:	bfd4      	ite	le
    2994:	6001      	strle	r1, [r0, #0]
    2996:	6002      	strgt	r2, [r0, #0]
	ptr++;
    2998:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    299a:	2200      	movs	r2, #0
    299c:	4f12      	ldr	r7, [pc, #72]	; (29e8 <__inserial+0x118>)
    299e:	4d11      	ldr	r5, [pc, #68]	; (29e4 <__inserial+0x114>)
    29a0:	883b      	ldrh	r3, [r7, #0]
    29a2:	4611      	mov	r1, r2
    29a4:	9300      	str	r3, [sp, #0]
    29a6:	682b      	ldr	r3, [r5, #0]
    29a8:	2003      	movs	r0, #3
    29aa:	f7fe fc69 	bl	1280 <io>
	len -= quant;
    29ae:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    29b0:	4606      	mov	r6, r0
	len -= quant;
    29b2:	1a18      	subs	r0, r3, r0
    29b4:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    29b6:	b918      	cbnz	r0, 29c0 <__inserial+0xf0>
		__inpline = (char*)data;
    29b8:	4b09      	ldr	r3, [pc, #36]	; (29e0 <__inserial+0x110>)
    29ba:	601c      	str	r4, [r3, #0]
		finish;
    29bc:	f7fe fcfa 	bl	13b4 <kill>
	}
	ptr += quant;
    29c0:	6828      	ldr	r0, [r5, #0]
    29c2:	4430      	add	r0, r6
    29c4:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    29c6:	2003      	movs	r0, #3

endstrand
    29c8:	b003      	add	sp, #12
    29ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    29ce:	f7fe bbaf 	b.w	1130 <proceed>
endstrand
    29d2:	b003      	add	sp, #12
    29d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    29d8:	f7fe bb22 	b.w	1020 <__pi_badstate>
    29dc:	20000b6c 	andcs	r0, r0, ip, ror #22
    29e0:	200005fc 	strdcs	r0, [r0], -ip
    29e4:	20000604 	andcs	r0, r0, r4, lsl #12
    29e8:	20000600 	andcs	r0, r0, r0, lsl #12

000029ec <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    29ec:	f8dc 2000 	ldr.w	r2, [ip]
    29f0:	b132      	cbz	r2, 2a00 <outc.5724+0x14>
    29f2:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    29f6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    29fa:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    29fc:	bf88      	it	hi
    29fe:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    2a00:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    2a04:	3301      	adds	r3, #1
    2a06:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    2a0a:	4770      	bx	lr

00002a0c <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2a10:	461c      	mov	r4, r3
    2a12:	ab0c      	add	r3, sp, #48	; 0x30
    2a14:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    2a16:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    2a18:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    2a1a:	4f86      	ldr	r7, [pc, #536]	; (2c34 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a1c:	9001      	str	r0, [sp, #4]
    2a1e:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    2a22:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    2a26:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    2a2a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    2a2e:	d118      	bne.n	2a62 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    2a30:	f892 9001 	ldrb.w	r9, [r2, #1]
    2a34:	1c95      	adds	r5, r2, #2
				outc ('\\');
    2a36:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    2a3a:	f1b9 0f00 	cmp.w	r9, #0
    2a3e:	d10b      	bne.n	2a58 <__pi_vfparse+0x4c>
				outc ('\\');
    2a40:	205c      	movs	r0, #92	; 0x5c
    2a42:	f7ff ffd3 	bl	29ec <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    2a46:	4648      	mov	r0, r9
    2a48:	f10d 0c04 	add.w	ip, sp, #4
    2a4c:	f7ff ffce 	bl	29ec <outc.5724>
			if (c == '\0')
    2a50:	f1b9 0f00 	cmp.w	r9, #0
    2a54:	d103      	bne.n	2a5e <__pi_vfparse+0x52>
    2a56:	e027      	b.n	2aa8 <__pi_vfparse+0x9c>
			outc (c);
    2a58:	4648      	mov	r0, r9
				outc (val);
    2a5a:	f7ff ffc7 	bl	29ec <outc.5724>
				val = (word) va_arg (ap, aword);
    2a5e:	462a      	mov	r2, r5
    2a60:	e7e1      	b.n	2a26 <__pi_vfparse+0x1a>
		if (c == '%') {
    2a62:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    2a66:	f040 80e2 	bne.w	2c2e <__pi_vfparse+0x222>
			c = *fm++;
    2a6a:	f892 8001 	ldrb.w	r8, [r2, #1]
    2a6e:	1c95      	adds	r5, r2, #2
			switch (c) {
    2a70:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    2a74:	f000 80cd 	beq.w	2c12 <__pi_vfparse+0x206>
    2a78:	d81b      	bhi.n	2ab2 <__pi_vfparse+0xa6>
    2a7a:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    2a7e:	d033      	beq.n	2ae8 <__pi_vfparse+0xdc>
    2a80:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    2a84:	d067      	beq.n	2b56 <__pi_vfparse+0x14a>
    2a86:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    2a8a:	f000 80bc 	beq.w	2c06 <__pi_vfparse+0x1fa>
				outc ('%');
    2a8e:	2025      	movs	r0, #37	; 0x25
    2a90:	f10d 0c04 	add.w	ip, sp, #4
    2a94:	f7ff ffaa 	bl	29ec <outc.5724>
				outc (c);
    2a98:	4640      	mov	r0, r8
    2a9a:	f10d 0c04 	add.w	ip, sp, #4
    2a9e:	f7ff ffa5 	bl	29ec <outc.5724>
				if (c == '\0')
    2aa2:	f1b8 0f00 	cmp.w	r8, #0
    2aa6:	d1da      	bne.n	2a5e <__pi_vfparse+0x52>
Ret:
				return d;
    2aa8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    2aac:	b004      	add	sp, #16
    2aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    2ab2:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    2ab6:	d017      	beq.n	2ae8 <__pi_vfparse+0xdc>
    2ab8:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    2abc:	d1e7      	bne.n	2a8e <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    2abe:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    2ac2:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    2ac6:	fa1f f983 	uxth.w	r9, r3
    2aca:	fa49 f308 	asr.w	r3, r9, r8
    2ace:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    2ad2:	5cf8      	ldrb	r0, [r7, r3]
    2ad4:	f10d 0c04 	add.w	ip, sp, #4
    2ad8:	f7ff ff88 	bl	29ec <outc.5724>
					if (i == 0)
    2adc:	f1b8 0f00 	cmp.w	r8, #0
    2ae0:	d0bd      	beq.n	2a5e <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    2ae2:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    2ae6:	e7f0      	b.n	2aca <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    2ae8:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    2aec:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    2af0:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    2af4:	d10a      	bne.n	2b0c <__pi_vfparse+0x100>
    2af6:	041b      	lsls	r3, r3, #16
    2af8:	d508      	bpl.n	2b0c <__pi_vfparse+0x100>
					outc ('-');
    2afa:	202d      	movs	r0, #45	; 0x2d
    2afc:	f10d 0c04 	add.w	ip, sp, #4
    2b00:	f7ff ff74 	bl	29ec <outc.5724>
					val = (~val) + 1;
    2b04:	f1c9 0900 	rsb	r9, r9, #0
    2b08:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    2b0c:	2305      	movs	r3, #5
				enci (10000);
    2b0e:	f242 7810 	movw	r8, #10000	; 0x2710
    2b12:	fbb9 f0f8 	udiv	r0, r9, r8
    2b16:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    2b1a:	d103      	bne.n	2b24 <__pi_vfparse+0x118>
    2b1c:	3b01      	subs	r3, #1
    2b1e:	d117      	bne.n	2b50 <__pi_vfparse+0x144>
    2b20:	f04f 0801 	mov.w	r8, #1
    2b24:	fa1f fa80 	uxth.w	sl, r0
    2b28:	f10d 0c04 	add.w	ip, sp, #4
    2b2c:	3030      	adds	r0, #48	; 0x30
    2b2e:	f7ff ff5d 	bl	29ec <outc.5724>
    2b32:	fbb8 f3f6 	udiv	r3, r8, r6
    2b36:	fb08 991a 	mls	r9, r8, sl, r9
    2b3a:	f1b8 0f09 	cmp.w	r8, #9
    2b3e:	fa1f f989 	uxth.w	r9, r9
    2b42:	b29b      	uxth	r3, r3
    2b44:	d98b      	bls.n	2a5e <__pi_vfparse+0x52>
    2b46:	fbb9 f0f3 	udiv	r0, r9, r3
    2b4a:	4698      	mov	r8, r3
    2b4c:	b2c0      	uxtb	r0, r0
    2b4e:	e7e9      	b.n	2b24 <__pi_vfparse+0x118>
    2b50:	fbb8 f8f6 	udiv	r8, r8, r6
    2b54:	e7dd      	b.n	2b12 <__pi_vfparse+0x106>
				c = *fm;
    2b56:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    2b58:	2b64      	cmp	r3, #100	; 0x64
    2b5a:	d001      	beq.n	2b60 <__pi_vfparse+0x154>
    2b5c:	2b75      	cmp	r3, #117	; 0x75
    2b5e:	d132      	bne.n	2bc6 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    2b60:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    2b62:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    2b66:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    2b6a:	d109      	bne.n	2b80 <__pi_vfparse+0x174>
    2b6c:	f1ba 0f00 	cmp.w	sl, #0
    2b70:	da06      	bge.n	2b80 <__pi_vfparse+0x174>
						outc ('-');
    2b72:	202d      	movs	r0, #45	; 0x2d
    2b74:	f10d 0c04 	add.w	ip, sp, #4
    2b78:	f7ff ff38 	bl	29ec <outc.5724>
						val = (~val) + 1;
    2b7c:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    2b80:	230a      	movs	r3, #10
					enci (1000000000UL);
    2b82:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2c38 <__pi_vfparse+0x22c>
    2b86:	fbba f9f8 	udiv	r9, sl, r8
    2b8a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    2b8e:	d103      	bne.n	2b98 <__pi_vfparse+0x18c>
    2b90:	3b01      	subs	r3, #1
    2b92:	d115      	bne.n	2bc0 <__pi_vfparse+0x1b4>
    2b94:	f04f 0801 	mov.w	r8, #1
    2b98:	f10d 0c04 	add.w	ip, sp, #4
    2b9c:	f109 0030 	add.w	r0, r9, #48	; 0x30
    2ba0:	f7ff ff24 	bl	29ec <outc.5724>
    2ba4:	f1b8 0f09 	cmp.w	r8, #9
    2ba8:	fbb8 f3f6 	udiv	r3, r8, r6
    2bac:	fb08 aa19 	mls	sl, r8, r9, sl
    2bb0:	f67f af55 	bls.w	2a5e <__pi_vfparse+0x52>
    2bb4:	fbba f9f3 	udiv	r9, sl, r3
    2bb8:	4698      	mov	r8, r3
    2bba:	fa5f f989 	uxtb.w	r9, r9
    2bbe:	e7eb      	b.n	2b98 <__pi_vfparse+0x18c>
    2bc0:	fbb8 f8f6 	udiv	r8, r8, r6
    2bc4:	e7df      	b.n	2b86 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    2bc6:	2b78      	cmp	r3, #120	; 0x78
    2bc8:	d114      	bne.n	2bf4 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    2bca:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    2bce:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    2bd2:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    2bd4:	fa29 f308 	lsr.w	r3, r9, r8
    2bd8:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    2bdc:	5cf8      	ldrb	r0, [r7, r3]
    2bde:	f10d 0c04 	add.w	ip, sp, #4
    2be2:	f7ff ff03 	bl	29ec <outc.5724>
						if (i == 0)
    2be6:	f1b8 0f00 	cmp.w	r8, #0
    2bea:	f43f af38 	beq.w	2a5e <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    2bee:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    2bf2:	e7ef      	b.n	2bd4 <__pi_vfparse+0x1c8>
					outc ('%');
    2bf4:	4648      	mov	r0, r9
    2bf6:	f10d 0c04 	add.w	ip, sp, #4
    2bfa:	f7ff fef7 	bl	29ec <outc.5724>
					outc ('l');
    2bfe:	4640      	mov	r0, r8
    2c00:	f10d 0c04 	add.w	ip, sp, #4
    2c04:	e729      	b.n	2a5a <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    2c06:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    2c0a:	f10d 0c04 	add.w	ip, sp, #4
    2c0e:	b280      	uxth	r0, r0
    2c10:	e723      	b.n	2a5a <__pi_vfparse+0x4e>
				while (*st != '\0') {
    2c12:	f854 3b04 	ldr.w	r3, [r4], #4
    2c16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    2c1a:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    2c1e:	2800      	cmp	r0, #0
    2c20:	f43f af1d 	beq.w	2a5e <__pi_vfparse+0x52>
					outc (*st);
    2c24:	f10d 0c04 	add.w	ip, sp, #4
    2c28:	f7ff fee0 	bl	29ec <outc.5724>
					st++;
    2c2c:	e7f5      	b.n	2c1a <__pi_vfparse+0x20e>
		c = *fm++;
    2c2e:	1c55      	adds	r5, r2, #1
    2c30:	e709      	b.n	2a46 <__pi_vfparse+0x3a>
    2c32:	bf00      	nop
    2c34:	0000448d 	andeq	r4, r0, sp, lsl #9
    2c38:	3b9aca00 	blcc	fe6b5440 <_estack+0xde6b0440>

00002c3c <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    2c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c40:	460e      	mov	r6, r1
    2c42:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    2c44:	4604      	mov	r4, r0
    2c46:	b140      	cbz	r0, 2c5a <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c48:	4613      	mov	r3, r2
    2c4a:	460a      	mov	r2, r1
    2c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2c50:	f7ff fedc 	bl	2a0c <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    2c54:	4620      	mov	r0, r4
    2c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    2c5a:	4608      	mov	r0, r1
    2c5c:	f7fe fae6 	bl	122c <__pi_strlen>
    2c60:	f100 0511 	add.w	r5, r0, #17
    2c64:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    2c66:	4628      	mov	r0, r5
    2c68:	f7fe fbcc 	bl	1404 <__pi_malloc>
    2c6c:	4604      	mov	r4, r0
    2c6e:	2800      	cmp	r0, #0
    2c70:	d0f0      	beq.n	2c54 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c72:	463b      	mov	r3, r7
    2c74:	4632      	mov	r2, r6
    2c76:	4629      	mov	r1, r5
    2c78:	f7ff fec8 	bl	2a0c <__pi_vfparse>
    2c7c:	4285      	cmp	r5, r0
    2c7e:	4680      	mov	r8, r0
    2c80:	d2e8      	bcs.n	2c54 <vform+0x18>
		ufree (res);
    2c82:	4620      	mov	r0, r4
    2c84:	f7fe fb72 	bl	136c <__pi_free>
		goto Again;
    2c88:	4645      	mov	r5, r8
    2c8a:	e7ec      	b.n	2c66 <vform+0x2a>

00002c8c <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    2c8c:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    2c92:	2800      	cmp	r0, #0
    2c94:	f000 81b5 	beq.w	3002 <vscan+0x376>
    2c98:	2900      	cmp	r1, #0
    2c9a:	f000 81b4 	beq.w	3006 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    2c9e:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    2ca0:	270a      	movs	r7, #10
    2ca2:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    2ca4:	f8df c370 	ldr.w	ip, [pc, #880]	; 3018 <vscan+0x38c>
    2ca8:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    2caa:	f811 0b01 	ldrb.w	r0, [r1], #1
    2cae:	b170      	cbz	r0, 2cce <vscan+0x42>
		if (*fmt++ != '%')
    2cb0:	2825      	cmp	r0, #37	; 0x25
    2cb2:	d1f9      	bne.n	2ca8 <vscan+0x1c>
		switch (*fmt++) {
    2cb4:	7870      	ldrb	r0, [r6, #1]
    2cb6:	1cb1      	adds	r1, r6, #2
    2cb8:	286c      	cmp	r0, #108	; 0x6c
    2cba:	f000 80e1 	beq.w	2e80 <vscan+0x1f4>
    2cbe:	d809      	bhi.n	2cd4 <vscan+0x48>
    2cc0:	2863      	cmp	r0, #99	; 0x63
    2cc2:	f000 8184 	beq.w	2fce <vscan+0x342>
    2cc6:	2864      	cmp	r0, #100	; 0x64
    2cc8:	d043      	beq.n	2d52 <vscan+0xc6>
    2cca:	2800      	cmp	r0, #0
    2ccc:	d1ec      	bne.n	2ca8 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    2cce:	4620      	mov	r0, r4
    2cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    2cd4:	2875      	cmp	r0, #117	; 0x75
    2cd6:	d074      	beq.n	2dc2 <vscan+0x136>
    2cd8:	2878      	cmp	r0, #120	; 0x78
    2cda:	f000 8098 	beq.w	2e0e <vscan+0x182>
    2cde:	2873      	cmp	r0, #115	; 0x73
    2ce0:	d1e2      	bne.n	2ca8 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2ce2:	7818      	ldrb	r0, [r3, #0]
    2ce4:	461e      	mov	r6, r3
    2ce6:	f1a0 0e09 	sub.w	lr, r0, #9
    2cea:	fa5f fe8e 	uxtb.w	lr, lr
    2cee:	f1be 0f17 	cmp.w	lr, #23
    2cf2:	4698      	mov	r8, r3
    2cf4:	f103 0301 	add.w	r3, r3, #1
    2cf8:	f240 8173 	bls.w	2fe2 <vscan+0x356>
			if (*buf == '\0')
    2cfc:	2800      	cmp	r0, #0
    2cfe:	d0e6      	beq.n	2cce <vscan+0x42>
			if (*buf != ',') {
    2d00:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    2d02:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    2d06:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    2d0a:	d00e      	beq.n	2d2a <vscan+0x9e>
    2d0c:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    2d0e:	f818 3b01 	ldrb.w	r3, [r8], #1
    2d12:	f1a3 0009 	sub.w	r0, r3, #9
    2d16:	2801      	cmp	r0, #1
    2d18:	d907      	bls.n	2d2a <vscan+0x9e>
    2d1a:	2b0d      	cmp	r3, #13
    2d1c:	d005      	beq.n	2d2a <vscan+0x9e>
    2d1e:	2b2c      	cmp	r3, #44	; 0x2c
    2d20:	d003      	beq.n	2d2a <vscan+0x9e>
    2d22:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    2d26:	f040 8163 	bne.w	2ff0 <vscan+0x364>
			while (isspace (*buf)) buf++;
    2d2a:	f896 8000 	ldrb.w	r8, [r6]
    2d2e:	4633      	mov	r3, r6
    2d30:	f1a8 0009 	sub.w	r0, r8, #9
    2d34:	b2c0      	uxtb	r0, r0
    2d36:	2817      	cmp	r0, #23
    2d38:	f106 0601 	add.w	r6, r6, #1
    2d3c:	f240 815b 	bls.w	2ff6 <vscan+0x36a>
			if (*buf == ',') buf++;
    2d40:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    2d44:	bf08      	it	eq
    2d46:	4633      	moveq	r3, r6
			*sap = '\0';
    2d48:	f88e 5000 	strb.w	r5, [lr]
			break;
    2d4c:	e7ac      	b.n	2ca8 <vscan+0x1c>
		    case 'd': scani (word); break;
    2d4e:	2e00      	cmp	r6, #0
    2d50:	d0bd      	beq.n	2cce <vscan+0x42>
    2d52:	469e      	mov	lr, r3
    2d54:	f813 6b01 	ldrb.w	r6, [r3], #1
    2d58:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2d5c:	2809      	cmp	r0, #9
    2d5e:	d923      	bls.n	2da8 <vscan+0x11c>
    2d60:	2e2d      	cmp	r6, #45	; 0x2d
    2d62:	d001      	beq.n	2d68 <vscan+0xdc>
    2d64:	2e2b      	cmp	r6, #43	; 0x2b
    2d66:	d1f2      	bne.n	2d4e <vscan+0xc2>
    2d68:	7818      	ldrb	r0, [r3, #0]
    2d6a:	469e      	mov	lr, r3
    2d6c:	3830      	subs	r0, #48	; 0x30
    2d6e:	2809      	cmp	r0, #9
    2d70:	d8ef      	bhi.n	2d52 <vscan+0xc6>
    2d72:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    2d76:	f1d9 0800 	rsbs	r8, r9, #0
    2d7a:	eb48 0809 	adc.w	r8, r8, r9
    2d7e:	f852 6b04 	ldr.w	r6, [r2], #4
    2d82:	3401      	adds	r4, #1
    2d84:	8035      	strh	r5, [r6, #0]
    2d86:	f89e 0000 	ldrb.w	r0, [lr]
    2d8a:	4673      	mov	r3, lr
    2d8c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    2d90:	f1b9 0f09 	cmp.w	r9, #9
    2d94:	f10e 0e01 	add.w	lr, lr, #1
    2d98:	d909      	bls.n	2dae <vscan+0x122>
    2d9a:	f1b8 0f00 	cmp.w	r8, #0
    2d9e:	d183      	bne.n	2ca8 <vscan+0x1c>
    2da0:	8830      	ldrh	r0, [r6, #0]
    2da2:	4240      	negs	r0, r0
    2da4:	8030      	strh	r0, [r6, #0]
    2da6:	e77f      	b.n	2ca8 <vscan+0x1c>
    2da8:	f04f 0800 	mov.w	r8, #0
    2dac:	e7e7      	b.n	2d7e <vscan+0xf2>
    2dae:	8833      	ldrh	r3, [r6, #0]
    2db0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2db4:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    2db8:	3030      	adds	r0, #48	; 0x30
    2dba:	8030      	strh	r0, [r6, #0]
    2dbc:	e7e3      	b.n	2d86 <vscan+0xfa>
		    case 'u': scanu (word); break;
    2dbe:	2800      	cmp	r0, #0
    2dc0:	d085      	beq.n	2cce <vscan+0x42>
    2dc2:	7818      	ldrb	r0, [r3, #0]
    2dc4:	461e      	mov	r6, r3
    2dc6:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2dca:	f1be 0f09 	cmp.w	lr, #9
    2dce:	f103 0301 	add.w	r3, r3, #1
    2dd2:	d8f4      	bhi.n	2dbe <vscan+0x132>
    2dd4:	f852 eb04 	ldr.w	lr, [r2], #4
    2dd8:	3401      	adds	r4, #1
    2dda:	f8ae 5000 	strh.w	r5, [lr]
    2dde:	7830      	ldrb	r0, [r6, #0]
    2de0:	4633      	mov	r3, r6
    2de2:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    2de6:	f1b8 0f09 	cmp.w	r8, #9
    2dea:	f106 0601 	add.w	r6, r6, #1
    2dee:	f63f af5b 	bhi.w	2ca8 <vscan+0x1c>
    2df2:	f8be 3000 	ldrh.w	r3, [lr]
    2df6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dfa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    2dfe:	3830      	subs	r0, #48	; 0x30
    2e00:	f8ae 0000 	strh.w	r0, [lr]
    2e04:	e7eb      	b.n	2dde <vscan+0x152>
		    case 'x': scanx (word); break;
    2e06:	f1be 0f00 	cmp.w	lr, #0
    2e0a:	f43f af60 	beq.w	2cce <vscan+0x42>
    2e0e:	f893 e000 	ldrb.w	lr, [r3]
    2e12:	461e      	mov	r6, r3
    2e14:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2e18:	2809      	cmp	r0, #9
    2e1a:	f103 0301 	add.w	r3, r3, #1
    2e1e:	d904      	bls.n	2e2a <vscan+0x19e>
    2e20:	f02e 0020 	bic.w	r0, lr, #32
    2e24:	3841      	subs	r0, #65	; 0x41
    2e26:	2805      	cmp	r0, #5
    2e28:	d8ed      	bhi.n	2e06 <vscan+0x17a>
    2e2a:	f852 eb04 	ldr.w	lr, [r2], #4
    2e2e:	3401      	adds	r4, #1
    2e30:	f8ae 5000 	strh.w	r5, [lr]
    2e34:	f106 0805 	add.w	r8, r6, #5
    2e38:	f896 9000 	ldrb.w	r9, [r6]
    2e3c:	4633      	mov	r3, r6
    2e3e:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2e42:	b2c0      	uxtb	r0, r0
    2e44:	2809      	cmp	r0, #9
    2e46:	f106 0601 	add.w	r6, r6, #1
    2e4a:	f240 80de 	bls.w	300a <vscan+0x37e>
    2e4e:	f029 0020 	bic.w	r0, r9, #32
    2e52:	3841      	subs	r0, #65	; 0x41
    2e54:	2805      	cmp	r0, #5
    2e56:	f63f af27 	bhi.w	2ca8 <vscan+0x1c>
    2e5a:	4546      	cmp	r6, r8
    2e5c:	f43f af24 	beq.w	2ca8 <vscan+0x1c>
    2e60:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2e64:	2b05      	cmp	r3, #5
    2e66:	bf94      	ite	ls
    2e68:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2e6c:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2e70:	b2c0      	uxtb	r0, r0
    2e72:	f8be 3000 	ldrh.w	r3, [lr]
    2e76:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2e7a:	f8ae 0000 	strh.w	r0, [lr]
    2e7e:	e7db      	b.n	2e38 <vscan+0x1ac>
			switch (*fmt++) {
    2e80:	78b0      	ldrb	r0, [r6, #2]
    2e82:	1cf1      	adds	r1, r6, #3
    2e84:	2875      	cmp	r0, #117	; 0x75
    2e86:	d07d      	beq.n	2f84 <vscan+0x2f8>
    2e88:	d831      	bhi.n	2eee <vscan+0x262>
    2e8a:	2800      	cmp	r0, #0
    2e8c:	f43f af1f 	beq.w	2cce <vscan+0x42>
    2e90:	2864      	cmp	r0, #100	; 0x64
    2e92:	f47f af09 	bne.w	2ca8 <vscan+0x1c>
    2e96:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    2e98:	f813 6b01 	ldrb.w	r6, [r3], #1
    2e9c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    2ea0:	2809      	cmp	r0, #9
    2ea2:	d962      	bls.n	2f6a <vscan+0x2de>
    2ea4:	2e2d      	cmp	r6, #45	; 0x2d
    2ea6:	d001      	beq.n	2eac <vscan+0x220>
    2ea8:	2e2b      	cmp	r6, #43	; 0x2b
    2eaa:	d15b      	bne.n	2f64 <vscan+0x2d8>
    2eac:	7818      	ldrb	r0, [r3, #0]
    2eae:	4698      	mov	r8, r3
    2eb0:	3830      	subs	r0, #48	; 0x30
    2eb2:	2809      	cmp	r0, #9
    2eb4:	d8ef      	bhi.n	2e96 <vscan+0x20a>
    2eb6:	3e2d      	subs	r6, #45	; 0x2d
    2eb8:	4270      	negs	r0, r6
    2eba:	4170      	adcs	r0, r6
    2ebc:	f852 eb04 	ldr.w	lr, [r2], #4
    2ec0:	3401      	adds	r4, #1
    2ec2:	f8ce 5000 	str.w	r5, [lr]
    2ec6:	f898 6000 	ldrb.w	r6, [r8]
    2eca:	4643      	mov	r3, r8
    2ecc:	3e30      	subs	r6, #48	; 0x30
    2ece:	fa5f f986 	uxtb.w	r9, r6
    2ed2:	f1b9 0f09 	cmp.w	r9, #9
    2ed6:	f108 0801 	add.w	r8, r8, #1
    2eda:	d948      	bls.n	2f6e <vscan+0x2e2>
    2edc:	2800      	cmp	r0, #0
    2ede:	f47f aee3 	bne.w	2ca8 <vscan+0x1c>
    2ee2:	f8de 0000 	ldr.w	r0, [lr]
    2ee6:	4240      	negs	r0, r0
    2ee8:	f8ce 0000 	str.w	r0, [lr]
    2eec:	e6dc      	b.n	2ca8 <vscan+0x1c>
    2eee:	2878      	cmp	r0, #120	; 0x78
    2ef0:	f47f aeda 	bne.w	2ca8 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    2ef4:	f893 e000 	ldrb.w	lr, [r3]
    2ef8:	461e      	mov	r6, r3
    2efa:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    2efe:	2809      	cmp	r0, #9
    2f00:	f103 0301 	add.w	r3, r3, #1
    2f04:	d904      	bls.n	2f10 <vscan+0x284>
    2f06:	f02e 0020 	bic.w	r0, lr, #32
    2f0a:	3841      	subs	r0, #65	; 0x41
    2f0c:	2805      	cmp	r0, #5
    2f0e:	d85a      	bhi.n	2fc6 <vscan+0x33a>
    2f10:	f852 eb04 	ldr.w	lr, [r2], #4
    2f14:	3401      	adds	r4, #1
    2f16:	f8ce 5000 	str.w	r5, [lr]
    2f1a:	f106 0809 	add.w	r8, r6, #9
    2f1e:	f896 9000 	ldrb.w	r9, [r6]
    2f22:	4633      	mov	r3, r6
    2f24:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2f28:	b2c0      	uxtb	r0, r0
    2f2a:	2809      	cmp	r0, #9
    2f2c:	f106 0601 	add.w	r6, r6, #1
    2f30:	d96f      	bls.n	3012 <vscan+0x386>
    2f32:	f029 0020 	bic.w	r0, r9, #32
    2f36:	3841      	subs	r0, #65	; 0x41
    2f38:	2805      	cmp	r0, #5
    2f3a:	f63f aeb5 	bhi.w	2ca8 <vscan+0x1c>
    2f3e:	4546      	cmp	r6, r8
    2f40:	f43f aeb2 	beq.w	2ca8 <vscan+0x1c>
    2f44:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2f48:	2b05      	cmp	r3, #5
    2f4a:	bf94      	ite	ls
    2f4c:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2f50:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2f54:	b2c0      	uxtb	r0, r0
    2f56:	f8de 3000 	ldr.w	r3, [lr]
    2f5a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    2f5e:	f8ce 0000 	str.w	r0, [lr]
    2f62:	e7dc      	b.n	2f1e <vscan+0x292>
		    	    case 'd': scani (lword); break;
    2f64:	2e00      	cmp	r6, #0
    2f66:	d196      	bne.n	2e96 <vscan+0x20a>
    2f68:	e6b1      	b.n	2cce <vscan+0x42>
    2f6a:	2000      	movs	r0, #0
    2f6c:	e7a6      	b.n	2ebc <vscan+0x230>
    2f6e:	f8de 3000 	ldr.w	r3, [lr]
    2f72:	b2b6      	uxth	r6, r6
    2f74:	437b      	muls	r3, r7
    2f76:	1b9e      	subs	r6, r3, r6
    2f78:	f8ce 6000 	str.w	r6, [lr]
    2f7c:	e7a3      	b.n	2ec6 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    2f7e:	2800      	cmp	r0, #0
    2f80:	f43f aea5 	beq.w	2cce <vscan+0x42>
    2f84:	7818      	ldrb	r0, [r3, #0]
    2f86:	461e      	mov	r6, r3
    2f88:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    2f8c:	f1be 0f09 	cmp.w	lr, #9
    2f90:	f103 0301 	add.w	r3, r3, #1
    2f94:	d8f3      	bhi.n	2f7e <vscan+0x2f2>
    2f96:	f852 eb04 	ldr.w	lr, [r2], #4
    2f9a:	3401      	adds	r4, #1
    2f9c:	f8ce 5000 	str.w	r5, [lr]
    2fa0:	7830      	ldrb	r0, [r6, #0]
    2fa2:	4633      	mov	r3, r6
    2fa4:	3830      	subs	r0, #48	; 0x30
    2fa6:	fa5f f880 	uxtb.w	r8, r0
    2faa:	f1b8 0f09 	cmp.w	r8, #9
    2fae:	f106 0601 	add.w	r6, r6, #1
    2fb2:	f63f ae79 	bhi.w	2ca8 <vscan+0x1c>
    2fb6:	f8de 3000 	ldr.w	r3, [lr]
    2fba:	b280      	uxth	r0, r0
    2fbc:	fb07 0003 	mla	r0, r7, r3, r0
    2fc0:	f8ce 0000 	str.w	r0, [lr]
    2fc4:	e7ec      	b.n	2fa0 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    2fc6:	f1be 0f00 	cmp.w	lr, #0
    2fca:	d193      	bne.n	2ef4 <vscan+0x268>
    2fcc:	e67f      	b.n	2cce <vscan+0x42>
			if ((c = *buf++) == '\0')
    2fce:	f813 0b01 	ldrb.w	r0, [r3], #1
    2fd2:	2800      	cmp	r0, #0
    2fd4:	f43f ae7b 	beq.w	2cce <vscan+0x42>
			sap = va_arg (ap, char*);
    2fd8:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    2fdc:	3401      	adds	r4, #1
			*sap = c;
    2fde:	7030      	strb	r0, [r6, #0]
			break;
    2fe0:	e662      	b.n	2ca8 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    2fe2:	fa2c fe0e 	lsr.w	lr, ip, lr
    2fe6:	f01e 0f01 	tst.w	lr, #1
    2fea:	f47f ae7a 	bne.w	2ce2 <vscan+0x56>
    2fee:	e687      	b.n	2d00 <vscan+0x74>
						*sap++ = *buf++;
    2ff0:	f80e 3b01 	strb.w	r3, [lr], #1
    2ff4:	e68a      	b.n	2d0c <vscan+0x80>
			while (isspace (*buf)) buf++;
    2ff6:	fa2c f000 	lsr.w	r0, ip, r0
    2ffa:	07c0      	lsls	r0, r0, #31
    2ffc:	f53f ae95 	bmi.w	2d2a <vscan+0x9e>
    3000:	e6a2      	b.n	2d48 <vscan+0xbc>
		return 0;
    3002:	4604      	mov	r4, r0
    3004:	e663      	b.n	2cce <vscan+0x42>
    3006:	460c      	mov	r4, r1
    3008:	e661      	b.n	2cce <vscan+0x42>
		    case 'x': scanx (word); break;
    300a:	4546      	cmp	r6, r8
    300c:	f47f af31 	bne.w	2e72 <vscan+0x1e6>
    3010:	e64a      	b.n	2ca8 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    3012:	4546      	cmp	r6, r8
    3014:	d19f      	bne.n	2f56 <vscan+0x2ca>
    3016:	e647      	b.n	2ca8 <vscan+0x1c>
    3018:	00800013 	addeq	r0, r0, r3, lsl r0

0000301c <SafeHapiVoid>:
    301c:	b570      	push	{r4, r5, r6, lr}
    301e:	4606      	mov	r6, r0
    3020:	f000 f844 	bl	30ac <NOROM_CPUcpsid>
    3024:	4605      	mov	r5, r0
    3026:	4c06      	ldr	r4, [pc, #24]	; (3040 <SafeHapiVoid+0x24>)
    3028:	6823      	ldr	r3, [r4, #0]
    302a:	2b00      	cmp	r3, #0
    302c:	d0fb      	beq.n	3026 <SafeHapiVoid+0xa>
    302e:	47b0      	blx	r6
    3030:	2301      	movs	r3, #1
    3032:	6023      	str	r3, [r4, #0]
    3034:	b91d      	cbnz	r5, 303e <SafeHapiVoid+0x22>
    3036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    303a:	f000 b83b 	b.w	30b4 <NOROM_CPUcpsie>
    303e:	bd70      	pop	{r4, r5, r6, pc}
    3040:	400c8000 	andmi	r8, ip, r0

00003044 <NOROM_AONBatMonTemperatureGetDegC>:
    3044:	4b08      	ldr	r3, [pc, #32]	; (3068 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    3046:	6818      	ldr	r0, [r3, #0]
    3048:	4b08      	ldr	r3, [pc, #32]	; (306c <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    304a:	7819      	ldrb	r1, [r3, #0]
    304c:	4b08      	ldr	r3, [pc, #32]	; (3070 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    304e:	681a      	ldr	r2, [r3, #0]
    3050:	f340 0310 	sbfx	r3, r0, #0, #17
    3054:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    3058:	b248      	sxtb	r0, r1
    305a:	4350      	muls	r0, r2
    305c:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    3060:	3080      	adds	r0, #128	; 0x80
    3062:	1200      	asrs	r0, r0, #8
    3064:	4770      	bx	lr
    3066:	bf00      	nop
    3068:	40095030 	andmi	r5, r9, r0, lsr r0
    306c:	5000130c 	andpl	r1, r0, ip, lsl #6
    3070:	40095028 	andmi	r5, r9, r8, lsr #32

00003074 <NOROM_AONRTCCurrentCompareValueGet>:
    3074:	4a05      	ldr	r2, [pc, #20]	; (308c <NOROM_AONRTCCurrentCompareValueGet+0x18>)
    3076:	4906      	ldr	r1, [pc, #24]	; (3090 <NOROM_AONRTCCurrentCompareValueGet+0x1c>)
    3078:	6813      	ldr	r3, [r2, #0]
    307a:	6808      	ldr	r0, [r1, #0]
    307c:	6812      	ldr	r2, [r2, #0]
    307e:	4293      	cmp	r3, r2
    3080:	d1f8      	bne.n	3074 <NOROM_AONRTCCurrentCompareValueGet>
    3082:	041b      	lsls	r3, r3, #16
    3084:	ea43 4010 	orr.w	r0, r3, r0, lsr #16
    3088:	4770      	bx	lr
    308a:	bf00      	nop
    308c:	40092008 	andmi	r2, r9, r8
    3090:	4009200c 	andmi	r2, r9, ip

00003094 <NOROM_AONRTCCurrent64BitValueGet>:
    3094:	4b03      	ldr	r3, [pc, #12]	; (30a4 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    3096:	4904      	ldr	r1, [pc, #16]	; (30a8 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    3098:	681a      	ldr	r2, [r3, #0]
    309a:	6808      	ldr	r0, [r1, #0]
    309c:	6819      	ldr	r1, [r3, #0]
    309e:	4291      	cmp	r1, r2
    30a0:	d1f8      	bne.n	3094 <NOROM_AONRTCCurrent64BitValueGet>
    30a2:	4770      	bx	lr
    30a4:	40092008 	andmi	r2, r9, r8
    30a8:	4009200c 	andmi	r2, r9, ip

000030ac <NOROM_CPUcpsid>:
    30ac:	f3ef 8010 	mrs	r0, PRIMASK
    30b0:	b672      	cpsid	i
    30b2:	4770      	bx	lr

000030b4 <NOROM_CPUcpsie>:
    30b4:	f3ef 8010 	mrs	r0, PRIMASK
    30b8:	b662      	cpsie	i
    30ba:	4770      	bx	lr

000030bc <NOROM_OSCClockSourceSet>:
    30bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    30be:	460c      	mov	r4, r1
    30c0:	07c1      	lsls	r1, r0, #31
    30c2:	4605      	mov	r5, r0
    30c4:	d509      	bpl.n	30da <NOROM_OSCClockSourceSet+0x1e>
    30c6:	4b12      	ldr	r3, [pc, #72]	; (3110 <NOROM_OSCClockSourceSet+0x54>)
    30c8:	b2a2      	uxth	r2, r4
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	2100      	movs	r1, #0
    30ce:	9200      	str	r2, [sp, #0]
    30d0:	685e      	ldr	r6, [r3, #4]
    30d2:	4810      	ldr	r0, [pc, #64]	; (3114 <NOROM_OSCClockSourceSet+0x58>)
    30d4:	2201      	movs	r2, #1
    30d6:	460b      	mov	r3, r1
    30d8:	47b0      	blx	r6
    30da:	07aa      	lsls	r2, r5, #30
    30dc:	d509      	bpl.n	30f2 <NOROM_OSCClockSourceSet+0x36>
    30de:	4b0c      	ldr	r3, [pc, #48]	; (3110 <NOROM_OSCClockSourceSet+0x54>)
    30e0:	b2a2      	uxth	r2, r4
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	9200      	str	r2, [sp, #0]
    30e6:	685e      	ldr	r6, [r3, #4]
    30e8:	480a      	ldr	r0, [pc, #40]	; (3114 <NOROM_OSCClockSourceSet+0x58>)
    30ea:	2100      	movs	r1, #0
    30ec:	2202      	movs	r2, #2
    30ee:	2301      	movs	r3, #1
    30f0:	47b0      	blx	r6
    30f2:	076b      	lsls	r3, r5, #29
    30f4:	d509      	bpl.n	310a <NOROM_OSCClockSourceSet+0x4e>
    30f6:	4b06      	ldr	r3, [pc, #24]	; (3110 <NOROM_OSCClockSourceSet+0x54>)
    30f8:	b2a4      	uxth	r4, r4
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	9400      	str	r4, [sp, #0]
    30fe:	685c      	ldr	r4, [r3, #4]
    3100:	4804      	ldr	r0, [pc, #16]	; (3114 <NOROM_OSCClockSourceSet+0x58>)
    3102:	2100      	movs	r1, #0
    3104:	220c      	movs	r2, #12
    3106:	2302      	movs	r3, #2
    3108:	47a0      	blx	r4
    310a:	b002      	add	sp, #8
    310c:	bd70      	pop	{r4, r5, r6, pc}
    310e:	bf00      	nop
    3110:	100001a4 	andne	r0, r0, r4, lsr #3
    3114:	400ca000 	andmi	sl, ip, r0

00003118 <NOROM_OSCClockSourceGet>:
    3118:	b510      	push	{r4, lr}
    311a:	4b08      	ldr	r3, [pc, #32]	; (313c <NOROM_OSCClockSourceGet+0x24>)
    311c:	2804      	cmp	r0, #4
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	f04f 0134 	mov.w	r1, #52	; 0x34
    3124:	68dc      	ldr	r4, [r3, #12]
    3126:	bf07      	ittee	eq
    3128:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    312c:	231d      	moveq	r3, #29
    312e:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    3132:	231c      	movne	r3, #28
    3134:	4802      	ldr	r0, [pc, #8]	; (3140 <NOROM_OSCClockSourceGet+0x28>)
    3136:	47a0      	blx	r4
    3138:	bd10      	pop	{r4, pc}
    313a:	bf00      	nop
    313c:	100001a4 	andne	r0, r0, r4, lsr #3
    3140:	400ca000 	andmi	sl, ip, r0

00003144 <NOROM_OSCHF_TurnOnXosc>:
    3144:	b508      	push	{r3, lr}
    3146:	2003      	movs	r0, #3
    3148:	2101      	movs	r1, #1
    314a:	f7ff ffb7 	bl	30bc <NOROM_OSCClockSourceSet>
    314e:	f7ff ff91 	bl	3074 <NOROM_AONRTCCurrentCompareValueGet>
    3152:	4b01      	ldr	r3, [pc, #4]	; (3158 <NOROM_OSCHF_TurnOnXosc+0x14>)
    3154:	6098      	str	r0, [r3, #8]
    3156:	bd08      	pop	{r3, pc}
    3158:	20000608 	andcs	r0, r0, r8, lsl #12

0000315c <NOROM_OSCHF_AttemptToSwitchToXosc>:
    315c:	b510      	push	{r4, lr}
    315e:	2001      	movs	r0, #1
    3160:	f7ff ffda 	bl	3118 <NOROM_OSCClockSourceGet>
    3164:	2801      	cmp	r0, #1
    3166:	d01c      	beq.n	31a2 <NOROM_OSCHF_AttemptToSwitchToXosc+0x46>
    3168:	4b0f      	ldr	r3, [pc, #60]	; (31a8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x4c>)
    316a:	4810      	ldr	r0, [pc, #64]	; (31ac <NOROM_OSCHF_AttemptToSwitchToXosc+0x50>)
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	2134      	movs	r1, #52	; 0x34
    3170:	68dc      	ldr	r4, [r3, #12]
    3172:	2201      	movs	r2, #1
    3174:	2300      	movs	r3, #0
    3176:	47a0      	blx	r4
    3178:	b1a0      	cbz	r0, 31a4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x48>
    317a:	4b0d      	ldr	r3, [pc, #52]	; (31b0 <NOROM_OSCHF_AttemptToSwitchToXosc+0x54>)
    317c:	6b98      	ldr	r0, [r3, #56]	; 0x38
    317e:	f7ff ff4d 	bl	301c <SafeHapiVoid>
    3182:	f7ff ff77 	bl	3074 <NOROM_AONRTCCurrentCompareValueGet>
    3186:	4a0b      	ldr	r2, [pc, #44]	; (31b4 <NOROM_OSCHF_AttemptToSwitchToXosc+0x58>)
    3188:	6893      	ldr	r3, [r2, #8]
    318a:	60d0      	str	r0, [r2, #12]
    318c:	1ac0      	subs	r0, r0, r3
    318e:	4b0a      	ldr	r3, [pc, #40]	; (31b8 <NOROM_OSCHF_AttemptToSwitchToXosc+0x5c>)
    3190:	4358      	muls	r0, r3
    3192:	6813      	ldr	r3, [r2, #0]
    3194:	0c00      	lsrs	r0, r0, #16
    3196:	eba3 0393 	sub.w	r3, r3, r3, lsr #2
    319a:	4283      	cmp	r3, r0
    319c:	bf94      	ite	ls
    319e:	6010      	strls	r0, [r2, #0]
    31a0:	6013      	strhi	r3, [r2, #0]
    31a2:	2001      	movs	r0, #1
    31a4:	bd10      	pop	{r4, pc}
    31a6:	bf00      	nop
    31a8:	100001a4 	andne	r0, r0, r4, lsr #3
    31ac:	400ca000 	andmi	sl, ip, r0
    31b0:	10000048 	andne	r0, r0, r8, asr #32
    31b4:	20000608 	andcs	r0, r0, r8, lsl #12
    31b8:	000f4240 	andeq	r4, pc, r0, asr #4

000031bc <NOROM_OSCHF_SwitchToRcOscTurnOffXosc>:
    31bc:	b510      	push	{r4, lr}
    31be:	2003      	movs	r0, #3
    31c0:	2100      	movs	r1, #0
    31c2:	f7ff ff7b 	bl	30bc <NOROM_OSCClockSourceSet>
    31c6:	2001      	movs	r0, #1
    31c8:	f7ff ffa6 	bl	3118 <NOROM_OSCClockSourceGet>
    31cc:	b118      	cbz	r0, 31d6 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x1a>
    31ce:	4b06      	ldr	r3, [pc, #24]	; (31e8 <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x2c>)
    31d0:	6b98      	ldr	r0, [r3, #56]	; 0x38
    31d2:	f7ff ff23 	bl	301c <SafeHapiVoid>
    31d6:	f7ff ff4d 	bl	3074 <NOROM_AONRTCCurrentCompareValueGet>
    31da:	4c04      	ldr	r4, [pc, #16]	; (31ec <NOROM_OSCHF_SwitchToRcOscTurnOffXosc+0x30>)
    31dc:	6060      	str	r0, [r4, #4]
    31de:	f7ff ff31 	bl	3044 <NOROM_AONBatMonTemperatureGetDegC>
    31e2:	6120      	str	r0, [r4, #16]
    31e4:	bd10      	pop	{r4, pc}
    31e6:	bf00      	nop
    31e8:	10000048 	andne	r0, r0, r8, asr #32
    31ec:	20000608 	andcs	r0, r0, r8, lsl #12

000031f0 <NOROM_RFCDoorbellSendTo>:
    31f0:	4a07      	ldr	r2, [pc, #28]	; (3210 <NOROM_RFCDoorbellSendTo+0x20>)
    31f2:	6811      	ldr	r1, [r2, #0]
    31f4:	2900      	cmp	r1, #0
    31f6:	d1fb      	bne.n	31f0 <NOROM_RFCDoorbellSendTo>
    31f8:	4b06      	ldr	r3, [pc, #24]	; (3214 <NOROM_RFCDoorbellSendTo+0x24>)
    31fa:	6019      	str	r1, [r3, #0]
    31fc:	6010      	str	r0, [r2, #0]
    31fe:	681a      	ldr	r2, [r3, #0]
    3200:	2a00      	cmp	r2, #0
    3202:	d0fc      	beq.n	31fe <NOROM_RFCDoorbellSendTo+0xe>
    3204:	4b03      	ldr	r3, [pc, #12]	; (3214 <NOROM_RFCDoorbellSendTo+0x24>)
    3206:	2200      	movs	r2, #0
    3208:	601a      	str	r2, [r3, #0]
    320a:	f853 0c18 	ldr.w	r0, [r3, #-24]
    320e:	4770      	bx	lr
    3210:	40041000 	andmi	r1, r4, r0
    3214:	4004101c 	andmi	r1, r4, ip, lsl r0

00003218 <NOROM_RFCSynthPowerDown>:
    3218:	4a0e      	ldr	r2, [pc, #56]	; (3254 <NOROM_RFCSynthPowerDown+0x3c>)
    321a:	490f      	ldr	r1, [pc, #60]	; (3258 <NOROM_RFCSynthPowerDown+0x40>)
    321c:	6813      	ldr	r3, [r2, #0]
    321e:	2050      	movs	r0, #80	; 0x50
    3220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3224:	f023 0302 	bic.w	r3, r3, #2
    3228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    322c:	6013      	str	r3, [r2, #0]
    322e:	4b0b      	ldr	r3, [pc, #44]	; (325c <NOROM_RFCSynthPowerDown+0x44>)
    3230:	2203      	movs	r2, #3
    3232:	601a      	str	r2, [r3, #0]
    3234:	f241 0330 	movw	r3, #4144	; 0x1030
    3238:	4a09      	ldr	r2, [pc, #36]	; (3260 <NOROM_RFCSynthPowerDown+0x48>)
    323a:	600b      	str	r3, [r1, #0]
    323c:	2301      	movs	r3, #1
    323e:	6013      	str	r3, [r2, #0]
    3240:	6008      	str	r0, [r1, #0]
    3242:	f44f 60ca 	mov.w	r0, #1616	; 0x650
    3246:	6013      	str	r3, [r2, #0]
    3248:	6008      	str	r0, [r1, #0]
    324a:	6013      	str	r3, [r2, #0]
    324c:	f842 3c0c 	str.w	r3, [r2, #-12]
    3250:	4770      	bx	lr
    3252:	bf00      	nop
    3254:	60040000 	andvs	r0, r4, r0
    3258:	40044114 	andmi	r4, r4, r4, lsl r1
    325c:	40044108 	andmi	r4, r4, r8, lsl #2
    3260:	4004410c 	andmi	r4, r4, ip, lsl #2

00003264 <NOROM_RFCRfTrimRead>:
    3264:	f640 0202 	movw	r2, #2050	; 0x802
    3268:	8803      	ldrh	r3, [r0, #0]
    326a:	4293      	cmp	r3, r2
    326c:	d006      	beq.n	327c <NOROM_RFCRfTrimRead+0x18>
    326e:	f643 0207 	movw	r2, #14343	; 0x3807
    3272:	4293      	cmp	r3, r2
    3274:	d104      	bne.n	3280 <NOROM_RFCRfTrimRead+0x1c>
    3276:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    327a:	e002      	b.n	3282 <NOROM_RFCRfTrimRead+0x1e>
    327c:	7bc3      	ldrb	r3, [r0, #15]
    327e:	e000      	b.n	3282 <NOROM_RFCRfTrimRead+0x1e>
    3280:	2300      	movs	r3, #0
    3282:	4a36      	ldr	r2, [pc, #216]	; (335c <NOROM_RFCRfTrimRead+0xf8>)
    3284:	2b0a      	cmp	r3, #10
    3286:	6812      	ldr	r2, [r2, #0]
    3288:	600a      	str	r2, [r1, #0]
    328a:	d031      	beq.n	32f0 <NOROM_RFCRfTrimRead+0x8c>
    328c:	dc10      	bgt.n	32b0 <NOROM_RFCRfTrimRead+0x4c>
    328e:	2b05      	cmp	r3, #5
    3290:	d021      	beq.n	32d6 <NOROM_RFCRfTrimRead+0x72>
    3292:	2b06      	cmp	r3, #6
    3294:	d153      	bne.n	333e <NOROM_RFCRfTrimRead+0xda>
    3296:	4b32      	ldr	r3, [pc, #200]	; (3360 <NOROM_RFCRfTrimRead+0xfc>)
    3298:	681b      	ldr	r3, [r3, #0]
    329a:	604b      	str	r3, [r1, #4]
    329c:	4b31      	ldr	r3, [pc, #196]	; (3364 <NOROM_RFCRfTrimRead+0x100>)
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	608b      	str	r3, [r1, #8]
    32a2:	4b31      	ldr	r3, [pc, #196]	; (3368 <NOROM_RFCRfTrimRead+0x104>)
    32a4:	681b      	ldr	r3, [r3, #0]
    32a6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32aa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    32ae:	e052      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    32b0:	2b0f      	cmp	r3, #15
    32b2:	d02a      	beq.n	330a <NOROM_RFCRfTrimRead+0xa6>
    32b4:	2b1e      	cmp	r3, #30
    32b6:	d035      	beq.n	3324 <NOROM_RFCRfTrimRead+0xc0>
    32b8:	2b0c      	cmp	r3, #12
    32ba:	d140      	bne.n	333e <NOROM_RFCRfTrimRead+0xda>
    32bc:	4b2b      	ldr	r3, [pc, #172]	; (336c <NOROM_RFCRfTrimRead+0x108>)
    32be:	681b      	ldr	r3, [r3, #0]
    32c0:	604b      	str	r3, [r1, #4]
    32c2:	4b2b      	ldr	r3, [pc, #172]	; (3370 <NOROM_RFCRfTrimRead+0x10c>)
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	608b      	str	r3, [r1, #8]
    32c8:	4b2a      	ldr	r3, [pc, #168]	; (3374 <NOROM_RFCRfTrimRead+0x110>)
    32ca:	681b      	ldr	r3, [r3, #0]
    32cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    32d4:	e03f      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    32d6:	4b28      	ldr	r3, [pc, #160]	; (3378 <NOROM_RFCRfTrimRead+0x114>)
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	604b      	str	r3, [r1, #4]
    32dc:	4b27      	ldr	r3, [pc, #156]	; (337c <NOROM_RFCRfTrimRead+0x118>)
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	608b      	str	r3, [r1, #8]
    32e2:	4b27      	ldr	r3, [pc, #156]	; (3380 <NOROM_RFCRfTrimRead+0x11c>)
    32e4:	681b      	ldr	r3, [r3, #0]
    32e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    32ea:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
    32ee:	e032      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    32f0:	4b24      	ldr	r3, [pc, #144]	; (3384 <NOROM_RFCRfTrimRead+0x120>)
    32f2:	681b      	ldr	r3, [r3, #0]
    32f4:	604b      	str	r3, [r1, #4]
    32f6:	4b24      	ldr	r3, [pc, #144]	; (3388 <NOROM_RFCRfTrimRead+0x124>)
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	608b      	str	r3, [r1, #8]
    32fc:	4b23      	ldr	r3, [pc, #140]	; (338c <NOROM_RFCRfTrimRead+0x128>)
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3304:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3308:	e025      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    330a:	4b21      	ldr	r3, [pc, #132]	; (3390 <NOROM_RFCRfTrimRead+0x12c>)
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	604b      	str	r3, [r1, #4]
    3310:	4b20      	ldr	r3, [pc, #128]	; (3394 <NOROM_RFCRfTrimRead+0x130>)
    3312:	681b      	ldr	r3, [r3, #0]
    3314:	608b      	str	r3, [r1, #8]
    3316:	4b20      	ldr	r3, [pc, #128]	; (3398 <NOROM_RFCRfTrimRead+0x134>)
    3318:	681b      	ldr	r3, [r3, #0]
    331a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    331e:	f043 43f0 	orr.w	r3, r3, #2013265920	; 0x78000000
    3322:	e018      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    3324:	4b1d      	ldr	r3, [pc, #116]	; (339c <NOROM_RFCRfTrimRead+0x138>)
    3326:	681b      	ldr	r3, [r3, #0]
    3328:	604b      	str	r3, [r1, #4]
    332a:	4b1d      	ldr	r3, [pc, #116]	; (33a0 <NOROM_RFCRfTrimRead+0x13c>)
    332c:	681b      	ldr	r3, [r3, #0]
    332e:	608b      	str	r3, [r1, #8]
    3330:	4b1c      	ldr	r3, [pc, #112]	; (33a4 <NOROM_RFCRfTrimRead+0x140>)
    3332:	681b      	ldr	r3, [r3, #0]
    3334:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    333c:	e00b      	b.n	3356 <NOROM_RFCRfTrimRead+0xf2>
    333e:	4b1a      	ldr	r3, [pc, #104]	; (33a8 <NOROM_RFCRfTrimRead+0x144>)
    3340:	681b      	ldr	r3, [r3, #0]
    3342:	604b      	str	r3, [r1, #4]
    3344:	4b19      	ldr	r3, [pc, #100]	; (33ac <NOROM_RFCRfTrimRead+0x148>)
    3346:	681b      	ldr	r3, [r3, #0]
    3348:	608b      	str	r3, [r1, #8]
    334a:	4b19      	ldr	r3, [pc, #100]	; (33b0 <NOROM_RFCRfTrimRead+0x14c>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
    3352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3356:	60cb      	str	r3, [r1, #12]
    3358:	4770      	bx	lr
    335a:	bf00      	nop
    335c:	5000134c 	andpl	r1, r0, ip, asr #6
    3360:	500010c8 	andpl	r1, r0, r8, asr #1
    3364:	500010e0 	andpl	r1, r0, r0, ror #1
    3368:	500010f8 	strdpl	r1, [r0], -r8
    336c:	500010d0 	ldrdpl	r1, [r0], -r0
    3370:	500010e8 	andpl	r1, r0, r8, ror #1
    3374:	50001100 	andpl	r1, r0, r0, lsl #2
    3378:	500010c4 	andpl	r1, r0, r4, asr #1
    337c:	500010dc 	ldrdpl	r1, [r0], -ip
    3380:	500010f4 	strdpl	r1, [r0], -r4
    3384:	500010cc 	andpl	r1, r0, ip, asr #1
    3388:	500010e4 	andpl	r1, r0, r4, ror #1
    338c:	500010fc 	strdpl	r1, [r0], -ip
    3390:	500010d4 	ldrdpl	r1, [r0], -r4
    3394:	500010ec 	andpl	r1, r0, ip, ror #1
    3398:	50001104 	andpl	r1, r0, r4, lsl #2
    339c:	500010d8 	ldrdpl	r1, [r0], -r8
    33a0:	500010f0 	strdpl	r1, [r0], -r0
    33a4:	50001108 	andpl	r1, r0, r8, lsl #2
    33a8:	50001354 	andpl	r1, r0, r4, asr r3
    33ac:	50001358 	andpl	r1, r0, r8, asr r3
    33b0:	50001380 	andpl	r1, r0, r0, lsl #7

000033b4 <NOROM_RFCRTrim>:
    33b4:	f643 0206 	movw	r2, #14342	; 0x3806
    33b8:	b570      	push	{r4, r5, r6, lr}
    33ba:	8803      	ldrh	r3, [r0, #0]
    33bc:	4293      	cmp	r3, r2
    33be:	d00a      	beq.n	33d6 <NOROM_RFCRTrim+0x22>
    33c0:	f643 0207 	movw	r2, #14343	; 0x3807
    33c4:	4293      	cmp	r3, r2
    33c6:	d009      	beq.n	33dc <NOROM_RFCRTrim+0x28>
    33c8:	f640 0202 	movw	r2, #2050	; 0x802
    33cc:	4293      	cmp	r3, r2
    33ce:	d16b      	bne.n	34a8 <NOROM_RFCRTrim+0xf4>
    33d0:	7bc1      	ldrb	r1, [r0, #15]
    33d2:	6943      	ldr	r3, [r0, #20]
    33d4:	e005      	b.n	33e2 <NOROM_RFCRTrim+0x2e>
    33d6:	69c3      	ldr	r3, [r0, #28]
    33d8:	2102      	movs	r1, #2
    33da:	e002      	b.n	33e2 <NOROM_RFCRTrim+0x2e>
    33dc:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
    33e0:	69c3      	ldr	r3, [r0, #28]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d060      	beq.n	34a8 <NOROM_RFCRTrim+0xf4>
    33e6:	f103 0414 	add.w	r4, r3, #20
    33ea:	f244 0538 	movw	r5, #16440	; 0x4038
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	4618      	mov	r0, r3
    33f2:	b296      	uxth	r6, r2
    33f4:	42ae      	cmp	r6, r5
    33f6:	f103 0304 	add.w	r3, r3, #4
    33fa:	d103      	bne.n	3404 <NOROM_RFCRTrim+0x50>
    33fc:	f3c2 4403 	ubfx	r4, r2, #16, #4
    3400:	b91c      	cbnz	r4, 340a <NOROM_RFCRTrim+0x56>
    3402:	bd70      	pop	{r4, r5, r6, pc}
    3404:	42a3      	cmp	r3, r4
    3406:	d1f0      	bne.n	33ea <NOROM_RFCRTrim+0x36>
    3408:	bd70      	pop	{r4, r5, r6, pc}
    340a:	290a      	cmp	r1, #10
    340c:	d01d      	beq.n	344a <NOROM_RFCRTrim+0x96>
    340e:	dc06      	bgt.n	341e <NOROM_RFCRTrim+0x6a>
    3410:	2905      	cmp	r1, #5
    3412:	d013      	beq.n	343c <NOROM_RFCRTrim+0x88>
    3414:	2906      	cmp	r1, #6
    3416:	d016      	beq.n	3446 <NOROM_RFCRTrim+0x92>
    3418:	2902      	cmp	r1, #2
    341a:	d11f      	bne.n	345c <NOROM_RFCRTrim+0xa8>
    341c:	e007      	b.n	342e <NOROM_RFCRTrim+0x7a>
    341e:	290f      	cmp	r1, #15
    3420:	d015      	beq.n	344e <NOROM_RFCRTrim+0x9a>
    3422:	291e      	cmp	r1, #30
    3424:	d015      	beq.n	3452 <NOROM_RFCRTrim+0x9e>
    3426:	290c      	cmp	r1, #12
    3428:	d118      	bne.n	345c <NOROM_RFCRTrim+0xa8>
    342a:	4b20      	ldr	r3, [pc, #128]	; (34ac <NOROM_RFCRTrim+0xf8>)
    342c:	e012      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    342e:	4b20      	ldr	r3, [pc, #128]	; (34b0 <NOROM_RFCRTrim+0xfc>)
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3436:	2b0f      	cmp	r3, #15
    3438:	d12a      	bne.n	3490 <NOROM_RFCRTrim+0xdc>
    343a:	e023      	b.n	3484 <NOROM_RFCRTrim+0xd0>
    343c:	4b1d      	ldr	r3, [pc, #116]	; (34b4 <NOROM_RFCRTrim+0x100>)
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	f3c3 2303 	ubfx	r3, r3, #8, #4
    3444:	e02c      	b.n	34a0 <NOROM_RFCRTrim+0xec>
    3446:	4b1c      	ldr	r3, [pc, #112]	; (34b8 <NOROM_RFCRTrim+0x104>)
    3448:	e004      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    344a:	4b1c      	ldr	r3, [pc, #112]	; (34bc <NOROM_RFCRTrim+0x108>)
    344c:	e002      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    344e:	4b1c      	ldr	r3, [pc, #112]	; (34c0 <NOROM_RFCRTrim+0x10c>)
    3450:	e000      	b.n	3454 <NOROM_RFCRTrim+0xa0>
    3452:	4b1c      	ldr	r3, [pc, #112]	; (34c4 <NOROM_RFCRTrim+0x110>)
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	f3c3 4383 	ubfx	r3, r3, #18, #4
    345a:	e021      	b.n	34a0 <NOROM_RFCRTrim+0xec>
    345c:	4b14      	ldr	r3, [pc, #80]	; (34b0 <NOROM_RFCRTrim+0xfc>)
    345e:	681b      	ldr	r3, [r3, #0]
    3460:	f3c3 4383 	ubfx	r3, r3, #18, #4
    3464:	2b0f      	cmp	r3, #15
    3466:	d113      	bne.n	3490 <NOROM_RFCRTrim+0xdc>
    3468:	3905      	subs	r1, #5
    346a:	2919      	cmp	r1, #25
    346c:	d80a      	bhi.n	3484 <NOROM_RFCRTrim+0xd0>
    346e:	2301      	movs	r3, #1
    3470:	fa03 f101 	lsl.w	r1, r3, r1
    3474:	4b14      	ldr	r3, [pc, #80]	; (34c8 <NOROM_RFCRTrim+0x114>)
    3476:	400b      	ands	r3, r1
    3478:	b123      	cbz	r3, 3484 <NOROM_RFCRTrim+0xd0>
    347a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    347e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
    3482:	e003      	b.n	348c <NOROM_RFCRTrim+0xd8>
    3484:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3488:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    348c:	6002      	str	r2, [r0, #0]
    348e:	bd70      	pop	{r4, r5, r6, pc}
    3490:	429c      	cmp	r4, r3
    3492:	d209      	bcs.n	34a8 <NOROM_RFCRTrim+0xf4>
    3494:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    3498:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    349c:	6003      	str	r3, [r0, #0]
    349e:	bd70      	pop	{r4, r5, r6, pc}
    34a0:	2b0f      	cmp	r3, #15
    34a2:	d1f5      	bne.n	3490 <NOROM_RFCRTrim+0xdc>
    34a4:	3905      	subs	r1, #5
    34a6:	e7e2      	b.n	346e <NOROM_RFCRTrim+0xba>
    34a8:	bd70      	pop	{r4, r5, r6, pc}
    34aa:	bf00      	nop
    34ac:	50001100 	andpl	r1, r0, r0, lsl #2
    34b0:	50001380 	andpl	r1, r0, r0, lsl #7
    34b4:	50001320 	andpl	r1, r0, r0, lsr #6
    34b8:	500010f8 	strdpl	r1, [r0], -r8
    34bc:	500010fc 	strdpl	r1, [r0], -ip
    34c0:	50001104 	andpl	r1, r0, r4, lsl #2
    34c4:	50001108 	andpl	r1, r0, r8, lsl #2
    34c8:	02000421 	andeq	r0, r0, #553648128	; 0x21000000

000034cc <NOROM_RFCRfTrimSet>:
    34cc:	4603      	mov	r3, r0
    34ce:	b530      	push	{r4, r5, lr}
    34d0:	4c05      	ldr	r4, [pc, #20]	; (34e8 <NOROM_RFCRfTrimSet+0x1c>)
    34d2:	f100 0510 	add.w	r5, r0, #16
    34d6:	4622      	mov	r2, r4
    34d8:	6818      	ldr	r0, [r3, #0]
    34da:	6859      	ldr	r1, [r3, #4]
    34dc:	3308      	adds	r3, #8
    34de:	c203      	stmia	r2!, {r0, r1}
    34e0:	42ab      	cmp	r3, r5
    34e2:	4614      	mov	r4, r2
    34e4:	d1f7      	bne.n	34d6 <NOROM_RFCRfTrimSet+0xa>
    34e6:	bd30      	pop	{r4, r5, pc}
    34e8:	21000018 	tstcs	r0, r8, lsl r0

000034ec <NOROM_RFCAdi3VcoLdoVoltageMode>:
    34ec:	4b04      	ldr	r3, [pc, #16]	; (3500 <NOROM_RFCAdi3VcoLdoVoltageMode+0x14>)
    34ee:	b128      	cbz	r0, 34fc <NOROM_RFCAdi3VcoLdoVoltageMode+0x10>
    34f0:	4a04      	ldr	r2, [pc, #16]	; (3504 <NOROM_RFCAdi3VcoLdoVoltageMode+0x18>)
    34f2:	2100      	movs	r1, #0
    34f4:	7011      	strb	r1, [r2, #0]
    34f6:	2220      	movs	r2, #32
    34f8:	701a      	strb	r2, [r3, #0]
    34fa:	4770      	bx	lr
    34fc:	7018      	strb	r0, [r3, #0]
    34fe:	4770      	bx	lr
    3500:	40086202 	andmi	r6, r8, r2, lsl #4
    3504:	40086200 	andmi	r6, r8, r0, lsl #4

00003508 <TrimAfterColdResetWakeupFromShutDown>:
    3508:	b538      	push	{r3, r4, r5, lr}
    350a:	4605      	mov	r5, r0
    350c:	4b26      	ldr	r3, [pc, #152]	; (35a8 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    350e:	2201      	movs	r2, #1
    3510:	601a      	str	r2, [r3, #0]
    3512:	4b26      	ldr	r3, [pc, #152]	; (35ac <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    3514:	681b      	ldr	r3, [r3, #0]
    3516:	2b00      	cmp	r3, #0
    3518:	d0fb      	beq.n	3512 <TrimAfterColdResetWakeupFromShutDown+0xa>
    351a:	4b25      	ldr	r3, [pc, #148]	; (35b0 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    351c:	22c0      	movs	r2, #192	; 0xc0
    351e:	601a      	str	r2, [r3, #0]
    3520:	4b24      	ldr	r3, [pc, #144]	; (35b4 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    3522:	681b      	ldr	r3, [r3, #0]
    3524:	079b      	lsls	r3, r3, #30
    3526:	bf5f      	itttt	pl
    3528:	4b23      	ldrpl	r3, [pc, #140]	; (35b8 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    352a:	4a24      	ldrpl	r2, [pc, #144]	; (35bc <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    352c:	681b      	ldrpl	r3, [r3, #0]
    352e:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    3532:	bf5c      	itt	pl
    3534:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    3538:	7013      	strbpl	r3, [r2, #0]
    353a:	4b21      	ldr	r3, [pc, #132]	; (35c0 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    353c:	2200      	movs	r2, #0
    353e:	601a      	str	r2, [r3, #0]
    3540:	4b20      	ldr	r3, [pc, #128]	; (35c4 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    3542:	681c      	ldr	r4, [r3, #0]
    3544:	4620      	mov	r0, r4
    3546:	f000 f8d9 	bl	36fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    354a:	4628      	mov	r0, r5
    354c:	4621      	mov	r1, r4
    354e:	f000 fa0d 	bl	396c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    3552:	f240 221d 	movw	r2, #541	; 0x21d
    3556:	4b1c      	ldr	r3, [pc, #112]	; (35c8 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    3558:	681b      	ldr	r3, [r3, #0]
    355a:	b29b      	uxth	r3, r3
    355c:	4293      	cmp	r3, r2
    355e:	d814      	bhi.n	358a <TrimAfterColdResetWakeupFromShutDown+0x82>
    3560:	4a1a      	ldr	r2, [pc, #104]	; (35cc <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    3562:	6813      	ldr	r3, [r2, #0]
    3564:	6812      	ldr	r2, [r2, #0]
    3566:	f3c3 6303 	ubfx	r3, r3, #24, #4
    356a:	f3c2 4203 	ubfx	r2, r2, #16, #4
    356e:	b103      	cbz	r3, 3572 <TrimAfterColdResetWakeupFromShutDown+0x6a>
    3570:	3b01      	subs	r3, #1
    3572:	1f91      	subs	r1, r2, #6
    3574:	2901      	cmp	r1, #1
    3576:	bf86      	itte	hi
    3578:	3202      	addhi	r2, #2
    357a:	f002 020f 	andhi.w	r2, r2, #15
    357e:	2207      	movls	r2, #7
    3580:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    3584:	4a12      	ldr	r2, [pc, #72]	; (35d0 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    3586:	b2db      	uxtb	r3, r3
    3588:	7013      	strb	r3, [r2, #0]
    358a:	4620      	mov	r0, r4
    358c:	f000 fabc 	bl	3b08 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    3590:	4b10      	ldr	r3, [pc, #64]	; (35d4 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    3592:	2002      	movs	r0, #2
    3594:	681b      	ldr	r3, [r3, #0]
    3596:	68db      	ldr	r3, [r3, #12]
    3598:	4798      	blx	r3
    359a:	4b05      	ldr	r3, [pc, #20]	; (35b0 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    359c:	2240      	movs	r2, #64	; 0x40
    359e:	601a      	str	r2, [r3, #0]
    35a0:	4b0d      	ldr	r3, [pc, #52]	; (35d8 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    35a2:	2201      	movs	r2, #1
    35a4:	601a      	str	r2, [r3, #0]
    35a6:	bd38      	pop	{r3, r4, r5, pc}
    35a8:	40091010 	andmi	r1, r9, r0, lsl r0
    35ac:	43220294 			; <UNDEFINED> instruction: 0x43220294
    35b0:	400c6000 	andmi	r6, ip, r0
    35b4:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    35b8:	50003fac 	andpl	r3, r0, ip, lsr #31
    35bc:	40086256 	andmi	r6, r8, r6, asr r2
    35c0:	40091040 	andmi	r1, r9, r0, asr #32
    35c4:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    35c8:	50001314 	andpl	r1, r0, r4, lsl r3
    35cc:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    35d0:	40086002 	andmi	r6, r8, r2
    35d4:	100001a0 	andne	r0, r0, r0, lsr #3
    35d8:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

000035dc <NOROM_SetupTrimDevice>:
    35dc:	b510      	push	{r4, lr}
    35de:	4b1f      	ldr	r3, [pc, #124]	; (365c <NOROM_SetupTrimDevice+0x80>)
    35e0:	681c      	ldr	r4, [r3, #0]
    35e2:	1c63      	adds	r3, r4, #1
    35e4:	bf08      	it	eq
    35e6:	2400      	moveq	r4, #0
    35e8:	f000 fcde 	bl	3fa8 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    35ec:	4b1c      	ldr	r3, [pc, #112]	; (3660 <NOROM_SetupTrimDevice+0x84>)
    35ee:	2200      	movs	r2, #0
    35f0:	601a      	str	r2, [r3, #0]
    35f2:	4a1c      	ldr	r2, [pc, #112]	; (3664 <NOROM_SetupTrimDevice+0x88>)
    35f4:	2301      	movs	r3, #1
    35f6:	6013      	str	r3, [r2, #0]
    35f8:	4a1b      	ldr	r2, [pc, #108]	; (3668 <NOROM_SetupTrimDevice+0x8c>)
    35fa:	6013      	str	r3, [r2, #0]
    35fc:	f000 fa3e 	bl	3a7c <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    3600:	4b1a      	ldr	r3, [pc, #104]	; (366c <NOROM_SetupTrimDevice+0x90>)
    3602:	681b      	ldr	r3, [r3, #0]
    3604:	b123      	cbz	r3, 3610 <NOROM_SetupTrimDevice+0x34>
    3606:	4b1a      	ldr	r3, [pc, #104]	; (3670 <NOROM_SetupTrimDevice+0x94>)
    3608:	4620      	mov	r0, r4
    360a:	681b      	ldr	r3, [r3, #0]
    360c:	f7ff ff7c 	bl	3508 <TrimAfterColdResetWakeupFromShutDown>
    3610:	4b18      	ldr	r3, [pc, #96]	; (3674 <NOROM_SetupTrimDevice+0x98>)
    3612:	2200      	movs	r2, #0
    3614:	601a      	str	r2, [r3, #0]
    3616:	4a18      	ldr	r2, [pc, #96]	; (3678 <NOROM_SetupTrimDevice+0x9c>)
    3618:	6813      	ldr	r3, [r2, #0]
    361a:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    361e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3622:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    3626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    362a:	6013      	str	r3, [r2, #0]
    362c:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    3630:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    3634:	6813      	ldr	r3, [r2, #0]
    3636:	f3c3 3301 	ubfx	r3, r3, #12, #2
    363a:	2b01      	cmp	r3, #1
    363c:	bf01      	itttt	eq
    363e:	6813      	ldreq	r3, [r2, #0]
    3640:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    3644:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    3648:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    364c:	bf04      	itt	eq
    364e:	6011      	streq	r1, [r2, #0]
    3650:	6013      	streq	r3, [r2, #0]
    3652:	4b0a      	ldr	r3, [pc, #40]	; (367c <NOROM_SetupTrimDevice+0xa0>)
    3654:	681b      	ldr	r3, [r3, #0]
    3656:	2b00      	cmp	r3, #0
    3658:	d1fb      	bne.n	3652 <NOROM_SetupTrimDevice+0x76>
    365a:	bd10      	pop	{r4, pc}
    365c:	5000131c 	andpl	r1, r0, ip, lsl r3
    3660:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    3664:	400c605c 	andmi	r6, ip, ip, asr r0
    3668:	43042208 	movwmi	r2, #16904	; 0x4208
    366c:	43280180 			; <UNDEFINED> instruction: 0x43280180
    3670:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    3674:	4008218c 	andmi	r2, r8, ip, lsl #3
    3678:	40032048 	andmi	r2, r3, r8, asr #32
    367c:	4268000c 	rsbmi	r0, r8, #12

00003680 <NOROM_SetupSetVddrLevel>:
    3680:	b530      	push	{r4, r5, lr}
    3682:	4b19      	ldr	r3, [pc, #100]	; (36e8 <NOROM_SetupSetVddrLevel+0x68>)
    3684:	681a      	ldr	r2, [r3, #0]
    3686:	4b19      	ldr	r3, [pc, #100]	; (36ec <NOROM_SetupSetVddrLevel+0x6c>)
    3688:	f3c2 6204 	ubfx	r2, r2, #24, #5
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	2a15      	cmp	r2, #21
    3690:	f003 031f 	and.w	r3, r3, #31
    3694:	bf88      	it	hi
    3696:	3a20      	subhi	r2, #32
    3698:	2b15      	cmp	r3, #21
    369a:	bf88      	it	hi
    369c:	3b20      	subhi	r3, #32
    369e:	4293      	cmp	r3, r2
    36a0:	d020      	beq.n	36e4 <NOROM_SetupSetVddrLevel+0x64>
    36a2:	4913      	ldr	r1, [pc, #76]	; (36f0 <NOROM_SetupSetVddrLevel+0x70>)
    36a4:	2000      	movs	r0, #0
    36a6:	6008      	str	r0, [r1, #0]
    36a8:	4608      	mov	r0, r1
    36aa:	1ad1      	subs	r1, r2, r3
    36ac:	2902      	cmp	r1, #2
    36ae:	dc05      	bgt.n	36bc <NOROM_SetupSetVddrLevel+0x3c>
    36b0:	f06f 0401 	mvn.w	r4, #1
    36b4:	42a1      	cmp	r1, r4
    36b6:	bfb8      	it	lt
    36b8:	4621      	movlt	r1, r4
    36ba:	e000      	b.n	36be <NOROM_SetupSetVddrLevel+0x3e>
    36bc:	2102      	movs	r1, #2
    36be:	440b      	add	r3, r1
    36c0:	490c      	ldr	r1, [pc, #48]	; (36f4 <NOROM_SetupSetVddrLevel+0x74>)
    36c2:	4d0d      	ldr	r5, [pc, #52]	; (36f8 <NOROM_SetupSetVddrLevel+0x78>)
    36c4:	680c      	ldr	r4, [r1, #0]
    36c6:	f003 041f 	and.w	r4, r3, #31
    36ca:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    36ce:	802c      	strh	r4, [r5, #0]
    36d0:	4293      	cmp	r3, r2
    36d2:	f04f 0401 	mov.w	r4, #1
    36d6:	600c      	str	r4, [r1, #0]
    36d8:	d1e7      	bne.n	36aa <NOROM_SetupSetVddrLevel+0x2a>
    36da:	680b      	ldr	r3, [r1, #0]
    36dc:	600c      	str	r4, [r1, #0]
    36de:	680b      	ldr	r3, [r1, #0]
    36e0:	6004      	str	r4, [r0, #0]
    36e2:	680b      	ldr	r3, [r1, #0]
    36e4:	bd30      	pop	{r4, r5, pc}
    36e6:	bf00      	nop
    36e8:	50001388 	andpl	r1, r0, r8, lsl #7
    36ec:	40086206 	andmi	r6, r8, r6, lsl #4
    36f0:	43200098 			; <UNDEFINED> instruction: 0x43200098
    36f4:	4009202c 	andmi	r2, r9, ip, lsr #32
    36f8:	4008626c 	andmi	r6, r8, ip, ror #4

000036fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    36fc:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    3700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3704:	b510      	push	{r4, lr}
    3706:	4604      	mov	r4, r0
    3708:	d10f      	bne.n	372a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    370a:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    370e:	4a1e      	ldr	r2, [pc, #120]	; (3788 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    3710:	2380      	movs	r3, #128	; 0x80
    3712:	7013      	strb	r3, [r2, #0]
    3714:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    3718:	f802 3c10 	strb.w	r3, [r2, #-16]
    371c:	f7ff ffb0 	bl	3680 <NOROM_SetupSetVddrLevel>
    3720:	4b1a      	ldr	r3, [pc, #104]	; (378c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    3722:	681b      	ldr	r3, [r3, #0]
    3724:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3728:	e003      	b.n	3732 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    372a:	4b19      	ldr	r3, [pc, #100]	; (3790 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    372c:	681b      	ldr	r3, [r3, #0]
    372e:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3732:	2b15      	cmp	r3, #21
    3734:	bf88      	it	hi
    3736:	3b20      	subhi	r3, #32
    3738:	eb03 7324 	add.w	r3, r3, r4, asr #28
    373c:	3301      	adds	r3, #1
    373e:	2b15      	cmp	r3, #21
    3740:	dc05      	bgt.n	374e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    3742:	f06f 0209 	mvn.w	r2, #9
    3746:	4293      	cmp	r3, r2
    3748:	bfb8      	it	lt
    374a:	4613      	movlt	r3, r2
    374c:	e000      	b.n	3750 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    374e:	2315      	movs	r3, #21
    3750:	4a10      	ldr	r2, [pc, #64]	; (3794 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    3752:	f003 031f 	and.w	r3, r3, #31
    3756:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    375a:	8013      	strh	r3, [r2, #0]
    375c:	4b0e      	ldr	r3, [pc, #56]	; (3798 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    375e:	681b      	ldr	r3, [r3, #0]
    3760:	f013 0302 	ands.w	r3, r3, #2
    3764:	bf0a      	itet	eq
    3766:	4a0d      	ldreq	r2, [pc, #52]	; (379c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    3768:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    376c:	6013      	streq	r3, [r2, #0]
    376e:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    3772:	4a0b      	ldr	r2, [pc, #44]	; (37a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    3774:	f083 0301 	eor.w	r3, r3, #1
    3778:	6013      	str	r3, [r2, #0]
    377a:	f3c4 6480 	ubfx	r4, r4, #26, #1
    377e:	4b09      	ldr	r3, [pc, #36]	; (37a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    3780:	f084 0401 	eor.w	r4, r4, #1
    3784:	601c      	str	r4, [r3, #0]
    3786:	bd10      	pop	{r4, pc}
    3788:	40086225 	andmi	r6, r8, r5, lsr #4
    378c:	50001388 	andpl	r1, r0, r8, lsl #7
    3790:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3794:	4008626e 	andmi	r6, r8, lr, ror #4
    3798:	40090000 	andmi	r0, r9, r0
    379c:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    37a0:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    37a4:	43200008 			; <UNDEFINED> instruction: 0x43200008

000037a8 <NOROM_SetupGetTrimForAnabypassValue1>:
    37a8:	4b15      	ldr	r3, [pc, #84]	; (3800 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    37aa:	0381      	lsls	r1, r0, #14
    37ac:	681b      	ldr	r3, [r3, #0]
    37ae:	f3c3 6283 	ubfx	r2, r3, #26, #4
    37b2:	f3c3 238f 	ubfx	r3, r3, #10, #16
    37b6:	d41f      	bmi.n	37f8 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    37b8:	f340 2007 	sbfx	r0, r0, #8, #8
    37bc:	2800      	cmp	r0, #0
    37be:	da19      	bge.n	37f4 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    37c0:	085b      	lsrs	r3, r3, #1
    37c2:	d105      	bne.n	37d0 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    37c4:	0852      	lsrs	r2, r2, #1
    37c6:	bf06      	itte	eq
    37c8:	2301      	moveq	r3, #1
    37ca:	461a      	moveq	r2, r3
    37cc:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    37d0:	3001      	adds	r0, #1
    37d2:	e7f3      	b.n	37bc <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    37d4:	005b      	lsls	r3, r3, #1
    37d6:	f043 0301 	orr.w	r3, r3, #1
    37da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    37de:	d308      	bcc.n	37f2 <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    37e0:	0052      	lsls	r2, r2, #1
    37e2:	f042 0201 	orr.w	r2, r2, #1
    37e6:	2a0f      	cmp	r2, #15
    37e8:	bf86      	itte	hi
    37ea:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    37ee:	220f      	movhi	r2, #15
    37f0:	2301      	movls	r3, #1
    37f2:	3801      	subs	r0, #1
    37f4:	2800      	cmp	r0, #0
    37f6:	d1ed      	bne.n	37d4 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    37f8:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    37fc:	4770      	bx	lr
    37fe:	bf00      	nop
    3800:	50001350 	andpl	r1, r0, r0, asr r3

00003804 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    3804:	4a04      	ldr	r2, [pc, #16]	; (3818 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    3806:	6813      	ldr	r3, [r2, #0]
    3808:	6810      	ldr	r0, [r2, #0]
    380a:	f3c3 0387 	ubfx	r3, r3, #2, #8
    380e:	f000 0003 	and.w	r0, r0, #3
    3812:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3816:	4770      	bx	lr
    3818:	50001350 	andpl	r1, r0, r0, asr r3

0000381c <NOROM_SetupGetTrimForAmpcompTh2>:
    381c:	4b02      	ldr	r3, [pc, #8]	; (3828 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    381e:	6818      	ldr	r0, [r3, #0]
    3820:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    3824:	4770      	bx	lr
    3826:	bf00      	nop
    3828:	50001374 	andpl	r1, r0, r4, ror r3

0000382c <NOROM_SetupGetTrimForAmpcompTh1>:
    382c:	4b03      	ldr	r3, [pc, #12]	; (383c <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    382e:	6818      	ldr	r0, [r3, #0]
    3830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3834:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    3838:	4770      	bx	lr
    383a:	bf00      	nop
    383c:	50001370 	andpl	r1, r0, r0, ror r3

00003840 <NOROM_SetupGetTrimForAmpcompCtrl>:
    3840:	b570      	push	{r4, r5, r6, lr}
    3842:	4b15      	ldr	r3, [pc, #84]	; (3898 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    3844:	4915      	ldr	r1, [pc, #84]	; (389c <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    3846:	681c      	ldr	r4, [r3, #0]
    3848:	6809      	ldr	r1, [r1, #0]
    384a:	f3c4 5203 	ubfx	r2, r4, #20, #4
    384e:	f011 0501 	ands.w	r5, r1, #1
    3852:	f3c4 4303 	ubfx	r3, r4, #16, #4
    3856:	d113      	bne.n	3880 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    3858:	4911      	ldr	r1, [pc, #68]	; (38a0 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    385a:	6809      	ldr	r1, [r1, #0]
    385c:	f341 2603 	sbfx	r6, r1, #8, #4
    3860:	18b2      	adds	r2, r6, r2
    3862:	d403      	bmi.n	386c <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    3864:	2a0f      	cmp	r2, #15
    3866:	bfa8      	it	ge
    3868:	220f      	movge	r2, #15
    386a:	e000      	b.n	386e <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    386c:	462a      	mov	r2, r5
    386e:	f341 3103 	sbfx	r1, r1, #12, #4
    3872:	18cb      	adds	r3, r1, r3
    3874:	d403      	bmi.n	387e <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    3876:	2b0f      	cmp	r3, #15
    3878:	bfa8      	it	ge
    387a:	230f      	movge	r3, #15
    387c:	e000      	b.n	3880 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    387e:	2300      	movs	r3, #0
    3880:	b2a1      	uxth	r1, r4
    3882:	2821      	cmp	r0, #33	; 0x21
    3884:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    3888:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    388c:	bf84      	itt	hi
    388e:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    3892:	4323      	orrhi	r3, r4
    3894:	4618      	mov	r0, r3
    3896:	bd70      	pop	{r4, r5, r6, pc}
    3898:	50001378 	andpl	r1, r0, r8, ror r3
    389c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    38a0:	50003fac 	andpl	r3, r0, ip, lsr #31

000038a4 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    38a4:	281f      	cmp	r0, #31
    38a6:	bf83      	ittte	hi
    38a8:	4b02      	ldrhi	r3, [pc, #8]	; (38b4 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    38aa:	6818      	ldrhi	r0, [r3, #0]
    38ac:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    38b0:	2000      	movls	r0, #0
    38b2:	4770      	bx	lr
    38b4:	50001398 	mulpl	r0, r8, r3

000038b8 <NOROM_SetupGetTrimForAdcShModeEn>:
    38b8:	2821      	cmp	r0, #33	; 0x21
    38ba:	bf83      	ittte	hi
    38bc:	4b02      	ldrhi	r3, [pc, #8]	; (38c8 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    38be:	6818      	ldrhi	r0, [r3, #0]
    38c0:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    38c4:	2001      	movls	r0, #1
    38c6:	4770      	bx	lr
    38c8:	5000138c 	andpl	r1, r0, ip, lsl #7

000038cc <NOROM_SetupGetTrimForAdcShVbufEn>:
    38cc:	2821      	cmp	r0, #33	; 0x21
    38ce:	bf83      	ittte	hi
    38d0:	4b02      	ldrhi	r3, [pc, #8]	; (38dc <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    38d2:	6818      	ldrhi	r0, [r3, #0]
    38d4:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    38d8:	2001      	movls	r0, #1
    38da:	4770      	bx	lr
    38dc:	5000138c 	andpl	r1, r0, ip, lsl #7

000038e0 <NOROM_SetupGetTrimForXoscHfCtl>:
    38e0:	281f      	cmp	r0, #31
    38e2:	bf81      	itttt	hi
    38e4:	4b07      	ldrhi	r3, [pc, #28]	; (3904 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    38e6:	681b      	ldrhi	r3, [r3, #0]
    38e8:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    38ec:	0080      	lslhi	r0, r0, #2
    38ee:	bf81      	itttt	hi
    38f0:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    38f4:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    38f8:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    38fc:	4318      	orrhi	r0, r3
    38fe:	bf98      	it	ls
    3900:	2000      	movls	r0, #0
    3902:	4770      	bx	lr
    3904:	50001398 	mulpl	r0, r8, r3

00003908 <NOROM_SetupGetTrimForXoscHfFastStart>:
    3908:	4b02      	ldr	r3, [pc, #8]	; (3914 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    390a:	6818      	ldr	r0, [r3, #0]
    390c:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    3910:	4770      	bx	lr
    3912:	bf00      	nop
    3914:	5000138c 	andpl	r1, r0, ip, lsl #7

00003918 <NOROM_SetupGetTrimForRadcExtCfg>:
    3918:	281f      	cmp	r0, #31
    391a:	bf81      	itttt	hi
    391c:	4b07      	ldrhi	r3, [pc, #28]	; (393c <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    391e:	681b      	ldrhi	r3, [r3, #0]
    3920:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    3924:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    3928:	bf81      	itttt	hi
    392a:	0400      	lslhi	r0, r0, #16
    392c:	031b      	lslhi	r3, r3, #12
    392e:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    3932:	b29b      	uxthhi	r3, r3
    3934:	bf8c      	ite	hi
    3936:	4318      	orrhi	r0, r3
    3938:	4801      	ldrls	r0, [pc, #4]	; (3940 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    393a:	4770      	bx	lr
    393c:	50001398 	mulpl	r0, r8, r3
    3940:	403f8000 	eorsmi	r8, pc, r0

00003944 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    3944:	2821      	cmp	r0, #33	; 0x21
    3946:	bf83      	ittte	hi
    3948:	4b02      	ldrhi	r3, [pc, #8]	; (3954 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    394a:	6818      	ldrhi	r0, [r3, #0]
    394c:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    3950:	2000      	movls	r0, #0
    3952:	4770      	bx	lr
    3954:	5000138c 	andpl	r1, r0, ip, lsl #7

00003958 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    3958:	2821      	cmp	r0, #33	; 0x21
    395a:	bf83      	ittte	hi
    395c:	4b02      	ldrhi	r3, [pc, #8]	; (3968 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    395e:	6818      	ldrhi	r0, [r3, #0]
    3960:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    3964:	2000      	movls	r0, #0
    3966:	4770      	bx	lr
    3968:	5000138c 	andpl	r1, r0, ip, lsl #7

0000396c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    396c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    396e:	4605      	mov	r5, r0
    3970:	4608      	mov	r0, r1
    3972:	f7ff ff19 	bl	37a8 <NOROM_SetupGetTrimForAnabypassValue1>
    3976:	4c39      	ldr	r4, [pc, #228]	; (3a5c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    3978:	4602      	mov	r2, r0
    397a:	2118      	movs	r1, #24
    397c:	4620      	mov	r0, r4
    397e:	f000 fb33 	bl	3fe8 <NOROM_DDI32RegWrite>
    3982:	f7ff ff3f 	bl	3804 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    3986:	4b36      	ldr	r3, [pc, #216]	; (3a60 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    3988:	b280      	uxth	r0, r0
    398a:	681b      	ldr	r3, [r3, #0]
    398c:	9000      	str	r0, [sp, #0]
    398e:	685e      	ldr	r6, [r3, #4]
    3990:	4620      	mov	r0, r4
    3992:	212c      	movs	r1, #44	; 0x2c
    3994:	f240 32ff 	movw	r2, #1023	; 0x3ff
    3998:	2300      	movs	r3, #0
    399a:	47b0      	blx	r6
    399c:	4b31      	ldr	r3, [pc, #196]	; (3a64 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    399e:	4620      	mov	r0, r4
    39a0:	681a      	ldr	r2, [r3, #0]
    39a2:	211c      	movs	r1, #28
    39a4:	f3c2 020d 	ubfx	r2, r2, #0, #14
    39a8:	f000 fb1e 	bl	3fe8 <NOROM_DDI32RegWrite>
    39ac:	f7ff ff36 	bl	381c <NOROM_SetupGetTrimForAmpcompTh2>
    39b0:	2114      	movs	r1, #20
    39b2:	4602      	mov	r2, r0
    39b4:	4620      	mov	r0, r4
    39b6:	f000 fb17 	bl	3fe8 <NOROM_DDI32RegWrite>
    39ba:	f7ff ff37 	bl	382c <NOROM_SetupGetTrimForAmpcompTh1>
    39be:	2110      	movs	r1, #16
    39c0:	4602      	mov	r2, r0
    39c2:	4620      	mov	r0, r4
    39c4:	f000 fb10 	bl	3fe8 <NOROM_DDI32RegWrite>
    39c8:	4628      	mov	r0, r5
    39ca:	f7ff ff39 	bl	3840 <NOROM_SetupGetTrimForAmpcompCtrl>
    39ce:	210c      	movs	r1, #12
    39d0:	4602      	mov	r2, r0
    39d2:	4620      	mov	r0, r4
    39d4:	f000 fb08 	bl	3fe8 <NOROM_DDI32RegWrite>
    39d8:	4628      	mov	r0, r5
    39da:	f7ff ff6d 	bl	38b8 <NOROM_SetupGetTrimForAdcShModeEn>
    39de:	0040      	lsls	r0, r0, #1
    39e0:	4e21      	ldr	r6, [pc, #132]	; (3a68 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    39e2:	f040 0020 	orr.w	r0, r0, #32
    39e6:	b2c0      	uxtb	r0, r0
    39e8:	7030      	strb	r0, [r6, #0]
    39ea:	4628      	mov	r0, r5
    39ec:	f7ff ff6e 	bl	38cc <NOROM_SetupGetTrimForAdcShVbufEn>
    39f0:	f040 0010 	orr.w	r0, r0, #16
    39f4:	b2c0      	uxtb	r0, r0
    39f6:	7030      	strb	r0, [r6, #0]
    39f8:	4628      	mov	r0, r5
    39fa:	f7ff ff71 	bl	38e0 <NOROM_SetupGetTrimForXoscHfCtl>
    39fe:	2128      	movs	r1, #40	; 0x28
    3a00:	4602      	mov	r2, r0
    3a02:	4620      	mov	r0, r4
    3a04:	f000 faf0 	bl	3fe8 <NOROM_DDI32RegWrite>
    3a08:	4628      	mov	r0, r5
    3a0a:	f7ff ff4b 	bl	38a4 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    3a0e:	0040      	lsls	r0, r0, #1
    3a10:	4b16      	ldr	r3, [pc, #88]	; (3a6c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    3a12:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    3a16:	b2c0      	uxtb	r0, r0
    3a18:	7018      	strb	r0, [r3, #0]
    3a1a:	4628      	mov	r0, r5
    3a1c:	f7ff ff92 	bl	3944 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    3a20:	00c0      	lsls	r0, r0, #3
    3a22:	4b13      	ldr	r3, [pc, #76]	; (3a70 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    3a24:	f060 007f 	orn	r0, r0, #127	; 0x7f
    3a28:	b2c0      	uxtb	r0, r0
    3a2a:	7018      	strb	r0, [r3, #0]
    3a2c:	4628      	mov	r0, r5
    3a2e:	f7ff ff93 	bl	3958 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    3a32:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    3a36:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    3a3a:	4b0e      	ldr	r3, [pc, #56]	; (3a74 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    3a3c:	b280      	uxth	r0, r0
    3a3e:	8018      	strh	r0, [r3, #0]
    3a40:	4628      	mov	r0, r5
    3a42:	f7ff ff69 	bl	3918 <NOROM_SetupGetTrimForRadcExtCfg>
    3a46:	2108      	movs	r1, #8
    3a48:	4602      	mov	r2, r0
    3a4a:	4620      	mov	r0, r4
    3a4c:	f000 facc 	bl	3fe8 <NOROM_DDI32RegWrite>
    3a50:	4b09      	ldr	r3, [pc, #36]	; (3a78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    3a52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3a56:	601a      	str	r2, [r3, #0]
    3a58:	b002      	add	sp, #8
    3a5a:	bd70      	pop	{r4, r5, r6, pc}
    3a5c:	400ca000 	andmi	sl, ip, r0
    3a60:	100001a4 	andne	r0, r0, r4, lsr #3
    3a64:	5000137c 	andpl	r1, r0, ip, ror r3
    3a68:	400ca149 	andmi	sl, ip, r9, asr #2
    3a6c:	400ca14c 	andmi	sl, ip, ip, asr #2
    3a70:	400ca141 	andmi	sl, ip, r1, asr #2
    3a74:	400ca1dc 	ldrdmi	sl, [ip], -ip
    3a78:	400ca040 	andmi	sl, ip, r0, asr #32

00003a7c <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    3a7c:	b530      	push	{r4, r5, lr}
    3a7e:	4b14      	ldr	r3, [pc, #80]	; (3ad0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	2b00      	cmp	r3, #0
    3a84:	d1fb      	bne.n	3a7e <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    3a86:	4a13      	ldr	r2, [pc, #76]	; (3ad4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    3a88:	4913      	ldr	r1, [pc, #76]	; (3ad8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    3a8a:	6813      	ldr	r3, [r2, #0]
    3a8c:	6809      	ldr	r1, [r1, #0]
    3a8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3a92:	f023 0307 	bic.w	r3, r3, #7
    3a96:	f011 0f04 	tst.w	r1, #4
    3a9a:	4614      	mov	r4, r2
    3a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    3aa0:	d003      	beq.n	3aaa <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    3aa2:	f043 0305 	orr.w	r3, r3, #5
    3aa6:	6013      	str	r3, [r2, #0]
    3aa8:	bd30      	pop	{r4, r5, pc}
    3aaa:	490c      	ldr	r1, [pc, #48]	; (3adc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    3aac:	f043 0004 	orr.w	r0, r3, #4
    3ab0:	680d      	ldr	r5, [r1, #0]
    3ab2:	07ad      	lsls	r5, r5, #30
    3ab4:	d009      	beq.n	3aca <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    3ab6:	f043 0307 	orr.w	r3, r3, #7
    3aba:	6013      	str	r3, [r2, #0]
    3abc:	680b      	ldr	r3, [r1, #0]
    3abe:	f003 0303 	and.w	r3, r3, #3
    3ac2:	2b03      	cmp	r3, #3
    3ac4:	d1fa      	bne.n	3abc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    3ac6:	6020      	str	r0, [r4, #0]
    3ac8:	bd30      	pop	{r4, r5, pc}
    3aca:	6010      	str	r0, [r2, #0]
    3acc:	bd30      	pop	{r4, r5, pc}
    3ace:	bf00      	nop
    3ad0:	4268000c 	rsbmi	r0, r8, #12
    3ad4:	40034004 	andmi	r4, r3, r4
    3ad8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3adc:	40034000 	andmi	r4, r3, r0

00003ae0 <NOROM_SetupSetAonRtcSubSecInc>:
    3ae0:	4b07      	ldr	r3, [pc, #28]	; (3b00 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    3ae2:	b282      	uxth	r2, r0
    3ae4:	f3c0 4007 	ubfx	r0, r0, #16, #8
    3ae8:	601a      	str	r2, [r3, #0]
    3aea:	6058      	str	r0, [r3, #4]
    3aec:	2201      	movs	r2, #1
    3aee:	3308      	adds	r3, #8
    3af0:	601a      	str	r2, [r3, #0]
    3af2:	4a04      	ldr	r2, [pc, #16]	; (3b04 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    3af4:	6812      	ldr	r2, [r2, #0]
    3af6:	2a00      	cmp	r2, #0
    3af8:	d0fb      	beq.n	3af2 <NOROM_SetupSetAonRtcSubSecInc+0x12>
    3afa:	2200      	movs	r2, #0
    3afc:	601a      	str	r2, [r3, #0]
    3afe:	4770      	bx	lr
    3b00:	400c603c 	andmi	r6, ip, ip, lsr r0
    3b04:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00003b08 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    3b08:	f3c0 4381 	ubfx	r3, r0, #18, #2
    3b0c:	2b01      	cmp	r3, #1
    3b0e:	b510      	push	{r4, lr}
    3b10:	4604      	mov	r4, r0
    3b12:	d002      	beq.n	3b1a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    3b14:	2b02      	cmp	r3, #2
    3b16:	d02f      	beq.n	3b78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b18:	e02a      	b.n	3b70 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b1a:	4b42      	ldr	r3, [pc, #264]	; (3c24 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	039a      	lsls	r2, r3, #14
    3b20:	d426      	bmi.n	3b70 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    3b22:	4a41      	ldr	r2, [pc, #260]	; (3c28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3b28:	6011      	str	r1, [r2, #0]
    3b2a:	4940      	ldr	r1, [pc, #256]	; (3c2c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    3b2c:	f3c3 3003 	ubfx	r0, r3, #12, #4
    3b30:	680a      	ldr	r2, [r1, #0]
    3b32:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    3b36:	4302      	orrs	r2, r0
    3b38:	f3c3 4000 	ubfx	r0, r3, #16, #1
    3b3c:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    3b40:	600a      	str	r2, [r1, #0]
    3b42:	f851 2c01 	ldr.w	r2, [r1, #-1]
    3b46:	f3c3 2003 	ubfx	r0, r3, #8, #4
    3b4a:	f022 020f 	bic.w	r2, r2, #15
    3b4e:	4302      	orrs	r2, r0
    3b50:	f851 0c01 	ldr.w	r0, [r1, #-1]
    3b54:	f841 2c01 	str.w	r2, [r1, #-1]
    3b58:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b5c:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    3b60:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    3b64:	4313      	orrs	r3, r2
    3b66:	f851 2c02 	ldr.w	r2, [r1, #-2]
    3b6a:	f841 3c02 	str.w	r3, [r1, #-2]
    3b6e:	e003      	b.n	3b78 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    3b70:	4b2d      	ldr	r3, [pc, #180]	; (3c28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3b72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3b76:	601a      	str	r2, [r3, #0]
    3b78:	4b2d      	ldr	r3, [pc, #180]	; (3c30 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	071b      	lsls	r3, r3, #28
    3b7e:	bf5e      	ittt	pl
    3b80:	4b2c      	ldrpl	r3, [pc, #176]	; (3c34 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    3b82:	2240      	movpl	r2, #64	; 0x40
    3b84:	601a      	strpl	r2, [r3, #0]
    3b86:	4b2c      	ldr	r3, [pc, #176]	; (3c38 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    3b88:	f44f 7200 	mov.w	r2, #512	; 0x200
    3b8c:	601a      	str	r2, [r3, #0]
    3b8e:	f7ff febb 	bl	3908 <NOROM_SetupGetTrimForXoscHfFastStart>
    3b92:	4b2a      	ldr	r3, [pc, #168]	; (3c3c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    3b94:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    3b98:	b2c0      	uxtb	r0, r0
    3b9a:	7018      	strb	r0, [r3, #0]
    3b9c:	f3c4 5081 	ubfx	r0, r4, #22, #2
    3ba0:	2801      	cmp	r0, #1
    3ba2:	d00b      	beq.n	3bbc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    3ba4:	d302      	bcc.n	3bac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    3ba6:	2802      	cmp	r0, #2
    3ba8:	d026      	beq.n	3bf8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    3baa:	e028      	b.n	3bfe <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    3bac:	2004      	movs	r0, #4
    3bae:	2101      	movs	r1, #1
    3bb0:	f7ff fa84 	bl	30bc <NOROM_OSCClockSourceSet>
    3bb4:	4822      	ldr	r0, [pc, #136]	; (3c40 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    3bb6:	f7ff ff93 	bl	3ae0 <NOROM_SetupSetAonRtcSubSecInc>
    3bba:	e024      	b.n	3c06 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    3bbc:	f7ff faac 	bl	3118 <NOROM_OSCClockSourceGet>
    3bc0:	4604      	mov	r4, r0
    3bc2:	2004      	movs	r0, #4
    3bc4:	4621      	mov	r1, r4
    3bc6:	f7ff fa79 	bl	30bc <NOROM_OSCClockSourceSet>
    3bca:	2004      	movs	r0, #4
    3bcc:	f7ff faa4 	bl	3118 <NOROM_OSCClockSourceGet>
    3bd0:	42a0      	cmp	r0, r4
    3bd2:	d1fa      	bne.n	3bca <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    3bd4:	4b1b      	ldr	r3, [pc, #108]	; (3c44 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    3bd6:	681c      	ldr	r4, [r3, #0]
    3bd8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    3bdc:	f7ff ff80 	bl	3ae0 <NOROM_SetupSetAonRtcSubSecInc>
    3be0:	4b19      	ldr	r3, [pc, #100]	; (3c48 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    3be2:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    3be6:	681b      	ldr	r3, [r3, #0]
    3be8:	0e20      	lsrs	r0, r4, #24
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	2107      	movs	r1, #7
    3bee:	4798      	blx	r3
    3bf0:	4b0d      	ldr	r3, [pc, #52]	; (3c28 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    3bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bf6:	601a      	str	r2, [r3, #0]
    3bf8:	2004      	movs	r0, #4
    3bfa:	2103      	movs	r1, #3
    3bfc:	e001      	b.n	3c02 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    3bfe:	2004      	movs	r0, #4
    3c00:	2102      	movs	r1, #2
    3c02:	f7ff fa5b 	bl	30bc <NOROM_OSCClockSourceSet>
    3c06:	4b11      	ldr	r3, [pc, #68]	; (3c4c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    3c08:	4a11      	ldr	r2, [pc, #68]	; (3c50 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    3c0a:	681b      	ldr	r3, [r3, #0]
    3c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c10:	7013      	strb	r3, [r2, #0]
    3c12:	f647 0218 	movw	r2, #30744	; 0x7818
    3c16:	4b0f      	ldr	r3, [pc, #60]	; (3c54 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    3c18:	801a      	strh	r2, [r3, #0]
    3c1a:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    3c1e:	3b44      	subs	r3, #68	; 0x44
    3c20:	681b      	ldr	r3, [r3, #0]
    3c22:	bd10      	pop	{r4, pc}
    3c24:	5000138c 	andpl	r1, r0, ip, lsl #7
    3c28:	400ca040 	andmi	sl, ip, r0, asr #32
    3c2c:	4008600c 	andmi	r6, r8, ip
    3c30:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    3c34:	400ca068 	andmi	sl, ip, r8, rrx
    3c38:	400ca080 	andmi	sl, ip, r0, lsl #1
    3c3c:	400ca108 	andmi	sl, ip, r8, lsl #2
    3c40:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    3c44:	50003fa8 	andpl	r3, r0, r8, lsr #31
    3c48:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    3c4c:	5000136c 	andpl	r1, r0, ip, ror #6
    3c50:	400cb00b 	andmi	fp, ip, fp
    3c54:	400cb070 	andmi	fp, ip, r0, ror r0

00003c58 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    3c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c5c:	4b77      	ldr	r3, [pc, #476]	; (3e3c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    3c5e:	4607      	mov	r7, r0
    3c60:	681b      	ldr	r3, [r3, #0]
    3c62:	4e77      	ldr	r6, [pc, #476]	; (3e40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3c64:	f013 0f02 	tst.w	r3, #2
    3c68:	d004      	beq.n	3c74 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    3c6a:	2308      	movs	r3, #8
    3c6c:	71b3      	strb	r3, [r6, #6]
    3c6e:	4a75      	ldr	r2, [pc, #468]	; (3e44 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    3c70:	4b75      	ldr	r3, [pc, #468]	; (3e48 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3c72:	e0df      	b.n	3e34 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    3c74:	f7ff f9e6 	bl	3044 <NOROM_AONBatMonTemperatureGetDegC>
    3c78:	4b74      	ldr	r3, [pc, #464]	; (3e4c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    3c7a:	681d      	ldr	r5, [r3, #0]
    3c7c:	172a      	asrs	r2, r5, #28
    3c7e:	02ac      	lsls	r4, r5, #10
    3c80:	f102 0101 	add.w	r1, r2, #1
    3c84:	d408      	bmi.n	3c98 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    3c86:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    3c8a:	10db      	asrs	r3, r3, #3
    3c8c:	2b08      	cmp	r3, #8
    3c8e:	bfa8      	it	ge
    3c90:	2308      	movge	r3, #8
    3c92:	4299      	cmp	r1, r3
    3c94:	bfb8      	it	lt
    3c96:	4619      	movlt	r1, r3
    3c98:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    3c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3ca0:	d10a      	bne.n	3cb8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    3ca2:	4b6b      	ldr	r3, [pc, #428]	; (3e50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    3ca4:	681a      	ldr	r2, [r3, #0]
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	f3c2 2204 	ubfx	r2, r2, #8, #5
    3cac:	2a15      	cmp	r2, #21
    3cae:	bf88      	it	hi
    3cb0:	3a20      	subhi	r2, #32
    3cb2:	f3c3 6304 	ubfx	r3, r3, #24, #5
    3cb6:	e00a      	b.n	3cce <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    3cb8:	4b66      	ldr	r3, [pc, #408]	; (3e54 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    3cba:	681a      	ldr	r2, [r3, #0]
    3cbc:	4b66      	ldr	r3, [pc, #408]	; (3e58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    3cbe:	f3c2 6204 	ubfx	r2, r2, #24, #5
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	2a15      	cmp	r2, #21
    3cc6:	bf88      	it	hi
    3cc8:	3a20      	subhi	r2, #32
    3cca:	f3c3 4304 	ubfx	r3, r3, #16, #5
    3cce:	2b15      	cmp	r3, #21
    3cd0:	440a      	add	r2, r1
    3cd2:	bf88      	it	hi
    3cd4:	3b20      	subhi	r3, #32
    3cd6:	2a15      	cmp	r2, #21
    3cd8:	dc05      	bgt.n	3ce6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    3cda:	f06f 0109 	mvn.w	r1, #9
    3cde:	428a      	cmp	r2, r1
    3ce0:	bfb8      	it	lt
    3ce2:	460a      	movlt	r2, r1
    3ce4:	e000      	b.n	3ce8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    3ce6:	2215      	movs	r2, #21
    3ce8:	4c5c      	ldr	r4, [pc, #368]	; (3e5c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    3cea:	f002 011f 	and.w	r1, r2, #31
    3cee:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    3cf2:	8021      	strh	r1, [r4, #0]
    3cf4:	495a      	ldr	r1, [pc, #360]	; (3e60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    3cf6:	6809      	ldr	r1, [r1, #0]
    3cf8:	f011 0403 	ands.w	r4, r1, #3
    3cfc:	bf18      	it	ne
    3cfe:	2401      	movne	r4, #1
    3d00:	0749      	lsls	r1, r1, #29
    3d02:	bf48      	it	mi
    3d04:	f044 0402 	orrmi.w	r4, r4, #2
    3d08:	b10f      	cbz	r7, 3d0e <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    3d0a:	f044 0404 	orr.w	r4, r4, #4
    3d0e:	f996 1007 	ldrsb.w	r1, [r6, #7]
    3d12:	1a41      	subs	r1, r0, r1
    3d14:	2904      	cmp	r1, #4
    3d16:	dc03      	bgt.n	3d20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    3d18:	4949      	ldr	r1, [pc, #292]	; (3e40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3d1a:	7989      	ldrb	r1, [r1, #6]
    3d1c:	428c      	cmp	r4, r1
    3d1e:	d06f      	beq.n	3e00 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    3d20:	f1b0 010f 	subs.w	r1, r0, #15
    3d24:	9101      	str	r1, [sp, #4]
    3d26:	f004 0101 	and.w	r1, r4, #1
    3d2a:	f8df a144 	ldr.w	sl, [pc, #324]	; 3e70 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    3d2e:	f004 0904 	and.w	r9, r4, #4
    3d32:	f004 0802 	and.w	r8, r4, #2
    3d36:	460f      	mov	r7, r1
    3d38:	d42a      	bmi.n	3d90 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3d3a:	9901      	ldr	r1, [sp, #4]
    3d3c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    3d40:	ea4f 2e21 	mov.w	lr, r1, asr #8
    3d44:	f1be 0f07 	cmp.w	lr, #7
    3d48:	9101      	str	r1, [sp, #4]
    3d4a:	d801      	bhi.n	3d50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    3d4c:	d104      	bne.n	3d58 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    3d4e:	e001      	b.n	3d54 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    3d50:	f04f 0e07 	mov.w	lr, #7
    3d54:	2106      	movs	r1, #6
    3d56:	e000      	b.n	3d5a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    3d58:	4671      	mov	r1, lr
    3d5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 3e74 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    3d5e:	3101      	adds	r1, #1
    3d60:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    3d64:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    3d68:	ebc1 0c0c 	rsb	ip, r1, ip
    3d6c:	fa5f f18c 	uxtb.w	r1, ip
    3d70:	f1b9 0f00 	cmp.w	r9, #0
    3d74:	d002      	beq.n	3d7c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    3d76:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    3d7a:	4459      	add	r1, fp
    3d7c:	f1b8 0f00 	cmp.w	r8, #0
    3d80:	d002      	beq.n	3d88 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    3d82:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    3d86:	4459      	add	r1, fp
    3d88:	b12f      	cbz	r7, 3d96 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3d8a:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    3d8e:	e002      	b.n	3d96 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    3d90:	f04f 0e00 	mov.w	lr, #0
    3d94:	4671      	mov	r1, lr
    3d96:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    3d9a:	fa5f fc8a 	uxtb.w	ip, sl
    3d9e:	f1b9 0f00 	cmp.w	r9, #0
    3da2:	d002      	beq.n	3daa <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    3da4:	f3ca 2907 	ubfx	r9, sl, #8, #8
    3da8:	44cc      	add	ip, r9
    3daa:	f1b8 0f00 	cmp.w	r8, #0
    3dae:	d002      	beq.n	3db6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    3db0:	f3ca 4807 	ubfx	r8, sl, #16, #8
    3db4:	44c4      	add	ip, r8
    3db6:	b10f      	cbz	r7, 3dbc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    3db8:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    3dbc:	1a9b      	subs	r3, r3, r2
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	bfb8      	it	lt
    3dc2:	2301      	movlt	r3, #1
    3dc4:	9f01      	ldr	r7, [sp, #4]
    3dc6:	2234      	movs	r2, #52	; 0x34
    3dc8:	4353      	muls	r3, r2
    3dca:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    3dce:	4379      	muls	r1, r7
    3dd0:	b2ed      	uxtb	r5, r5
    3dd2:	436b      	muls	r3, r5
    3dd4:	3180      	adds	r1, #128	; 0x80
    3dd6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    3dda:	fbb3 f1f1 	udiv	r1, r3, r1
    3dde:	f64f 7cff 	movw	ip, #65535	; 0xffff
    3de2:	4561      	cmp	r1, ip
    3de4:	bf28      	it	cs
    3de6:	4661      	movcs	r1, ip
    3de8:	287f      	cmp	r0, #127	; 0x7f
    3dea:	80b1      	strh	r1, [r6, #4]
    3dec:	dc05      	bgt.n	3dfa <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    3dee:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    3df2:	4298      	cmp	r0, r3
    3df4:	bfb8      	it	lt
    3df6:	4618      	movlt	r0, r3
    3df8:	e000      	b.n	3dfc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    3dfa:	207f      	movs	r0, #127	; 0x7f
    3dfc:	71f0      	strb	r0, [r6, #7]
    3dfe:	71b4      	strb	r4, [r6, #6]
    3e00:	4b18      	ldr	r3, [pc, #96]	; (3e64 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    3e02:	2100      	movs	r1, #0
    3e04:	681b      	ldr	r3, [r3, #0]
    3e06:	6033      	str	r3, [r6, #0]
    3e08:	88b3      	ldrh	r3, [r6, #4]
    3e0a:	2b1e      	cmp	r3, #30
    3e0c:	bf9e      	ittt	ls
    3e0e:	4a0c      	ldrls	r2, [pc, #48]	; (3e40 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    3e10:	231f      	movls	r3, #31
    3e12:	8093      	strhls	r3, [r2, #4]
    3e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3e18:	d302      	bcc.n	3e20 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    3e1a:	085b      	lsrs	r3, r3, #1
    3e1c:	3101      	adds	r1, #1
    3e1e:	e7f9      	b.n	3e14 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    3e20:	4a11      	ldr	r2, [pc, #68]	; (3e68 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    3e22:	3b0f      	subs	r3, #15
    3e24:	430a      	orrs	r2, r1
    3e26:	091b      	lsrs	r3, r3, #4
    3e28:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    3e2c:	4a06      	ldr	r2, [pc, #24]	; (3e48 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    3e2e:	6013      	str	r3, [r2, #0]
    3e30:	4b0e      	ldr	r3, [pc, #56]	; (3e6c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    3e32:	2200      	movs	r2, #0
    3e34:	601a      	str	r2, [r3, #0]
    3e36:	b003      	add	sp, #12
    3e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e3c:	40090000 	andmi	r0, r9, r0
    3e40:	2000061c 	andcs	r0, r0, ip, lsl r6
    3e44:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    3e48:	40091030 	andmi	r1, r9, r0, lsr r0
    3e4c:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    3e50:	50001388 	andpl	r1, r0, r8, lsl #7
    3e54:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    3e58:	5000113c 	andpl	r1, r0, ip, lsr r1
    3e5c:	4008626e 	andmi	r6, r8, lr, ror #4
    3e60:	40082224 	andmi	r2, r8, r4, lsr #4
    3e64:	40092008 	andmi	r2, r9, r8
    3e68:	80a4e700 	adchi	lr, r4, r0, lsl #14
    3e6c:	40091034 	andmi	r1, r9, r4, lsr r0
    3e70:	5000139c 	mulpl	r0, ip, r3
    3e74:	50001398 	mulpl	r0, r8, r3

00003e78 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    3e78:	b510      	push	{r4, lr}
    3e7a:	4b14      	ldr	r3, [pc, #80]	; (3ecc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    3e7c:	681c      	ldr	r4, [r3, #0]
    3e7e:	b2a4      	uxth	r4, r4
    3e80:	b314      	cbz	r4, 3ec8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    3e82:	f7ff f8df 	bl	3044 <NOROM_AONBatMonTemperatureGetDegC>
    3e86:	4b12      	ldr	r3, [pc, #72]	; (3ed0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3e88:	f993 2007 	ldrsb.w	r2, [r3, #7]
    3e8c:	4290      	cmp	r0, r2
    3e8e:	da05      	bge.n	3e9c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    3e90:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    3e94:	4290      	cmp	r0, r2
    3e96:	bfb8      	it	lt
    3e98:	4610      	movlt	r0, r2
    3e9a:	71d8      	strb	r0, [r3, #7]
    3e9c:	889a      	ldrh	r2, [r3, #4]
    3e9e:	490c      	ldr	r1, [pc, #48]	; (3ed0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    3ea0:	4294      	cmp	r4, r2
    3ea2:	d310      	bcc.n	3ec6 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    3ea4:	4b0b      	ldr	r3, [pc, #44]	; (3ed4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    3ea6:	6808      	ldr	r0, [r1, #0]
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	1aa4      	subs	r4, r4, r2
    3eac:	3302      	adds	r3, #2
    3eae:	1a1b      	subs	r3, r3, r0
    3eb0:	2b1f      	cmp	r3, #31
    3eb2:	bf28      	it	cs
    3eb4:	231f      	movcs	r3, #31
    3eb6:	085b      	lsrs	r3, r3, #1
    3eb8:	40dc      	lsrs	r4, r3
    3eba:	4414      	add	r4, r2
    3ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3ec0:	4294      	cmp	r4, r2
    3ec2:	bf28      	it	cs
    3ec4:	4614      	movcs	r4, r2
    3ec6:	808c      	strh	r4, [r1, #4]
    3ec8:	bd10      	pop	{r4, pc}
    3eca:	bf00      	nop
    3ecc:	40091034 	andmi	r1, r9, r4, lsr r0
    3ed0:	2000061c 	andcs	r0, r0, ip, lsl r6
    3ed4:	40092008 	andmi	r2, r9, r8

00003ed8 <NOROM_SysCtrlResetSourceGet>:
    3ed8:	4b04      	ldr	r3, [pc, #16]	; (3eec <NOROM_SysCtrlResetSourceGet+0x14>)
    3eda:	681a      	ldr	r2, [r3, #0]
    3edc:	0412      	lsls	r2, r2, #16
    3ede:	bf5a      	itte	pl
    3ee0:	6818      	ldrpl	r0, [r3, #0]
    3ee2:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    3ee6:	2008      	movmi	r0, #8
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop
    3eec:	40090004 	andmi	r0, r9, r4

00003ef0 <NOROM_ChipInfo_GetChipFamily>:
    3ef0:	f64b 129a 	movw	r2, #47514	; 0xb99a
    3ef4:	4b10      	ldr	r3, [pc, #64]	; (3f38 <NOROM_ChipInfo_GetChipFamily+0x48>)
    3ef6:	6818      	ldr	r0, [r3, #0]
    3ef8:	f3c0 300f 	ubfx	r0, r0, #12, #16
    3efc:	4290      	cmp	r0, r2
    3efe:	d106      	bne.n	3f0e <NOROM_ChipInfo_GetChipFamily+0x1e>
    3f00:	681b      	ldr	r3, [r3, #0]
    3f02:	0f1b      	lsrs	r3, r3, #28
    3f04:	2b0b      	cmp	r3, #11
    3f06:	bf0c      	ite	eq
    3f08:	2004      	moveq	r0, #4
    3f0a:	2000      	movne	r0, #0
    3f0c:	e011      	b.n	3f32 <NOROM_ChipInfo_GetChipFamily+0x42>
    3f0e:	f64b 13be 	movw	r3, #47550	; 0xb9be
    3f12:	4298      	cmp	r0, r3
    3f14:	d00a      	beq.n	3f2c <NOROM_ChipInfo_GetChipFamily+0x3c>
    3f16:	f64b 3341 	movw	r3, #47937	; 0xbb41
    3f1a:	4298      	cmp	r0, r3
    3f1c:	d008      	beq.n	3f30 <NOROM_ChipInfo_GetChipFamily+0x40>
    3f1e:	f64b 3320 	movw	r3, #47904	; 0xbb20
    3f22:	4298      	cmp	r0, r3
    3f24:	bf14      	ite	ne
    3f26:	20ff      	movne	r0, #255	; 0xff
    3f28:	2002      	moveq	r0, #2
    3f2a:	e002      	b.n	3f32 <NOROM_ChipInfo_GetChipFamily+0x42>
    3f2c:	2001      	movs	r0, #1
    3f2e:	e000      	b.n	3f32 <NOROM_ChipInfo_GetChipFamily+0x42>
    3f30:	2003      	movs	r0, #3
    3f32:	b240      	sxtb	r0, r0
    3f34:	4770      	bx	lr
    3f36:	bf00      	nop
    3f38:	50001318 	andpl	r1, r0, r8, lsl r3

00003f3c <NOROM_ChipInfo_GetHwRevision>:
    3f3c:	b538      	push	{r3, r4, r5, lr}
    3f3e:	4b19      	ldr	r3, [pc, #100]	; (3fa4 <NOROM_ChipInfo_GetHwRevision+0x68>)
    3f40:	681d      	ldr	r5, [r3, #0]
    3f42:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    3f46:	6818      	ldr	r0, [r3, #0]
    3f48:	0f2d      	lsrs	r5, r5, #28
    3f4a:	b2c4      	uxtb	r4, r0
    3f4c:	2c80      	cmp	r4, #128	; 0x80
    3f4e:	bf28      	it	cs
    3f50:	2400      	movcs	r4, #0
    3f52:	f7ff ffcd 	bl	3ef0 <NOROM_ChipInfo_GetChipFamily>
    3f56:	2804      	cmp	r0, #4
    3f58:	d821      	bhi.n	3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f5a:	e8df f000 	tbb	[pc, r0]
    3f5e:	1b1b1303 	blne	6c8b72 <__ccfg+0x6a8bca>
    3f62:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    3f66:	2d07      	cmp	r5, #7
    3f68:	d819      	bhi.n	3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f6a:	e8df f005 	tbb	[pc, r5]
    3f6e:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    3f72:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    3f76:	2014      	movs	r0, #20
    3f78:	e012      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f7a:	2015      	movs	r0, #21
    3f7c:	e010      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f7e:	f104 0016 	add.w	r0, r4, #22
    3f82:	e00a      	b.n	3f9a <NOROM_ChipInfo_GetHwRevision+0x5e>
    3f84:	b125      	cbz	r5, 3f90 <NOROM_ChipInfo_GetHwRevision+0x54>
    3f86:	2d02      	cmp	r5, #2
    3f88:	d109      	bne.n	3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f8a:	f104 0014 	add.w	r0, r4, #20
    3f8e:	e004      	b.n	3f9a <NOROM_ChipInfo_GetHwRevision+0x5e>
    3f90:	200a      	movs	r0, #10
    3f92:	e005      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f94:	b91d      	cbnz	r5, 3f9e <NOROM_ChipInfo_GetHwRevision+0x62>
    3f96:	f104 000a 	add.w	r0, r4, #10
    3f9a:	b2c0      	uxtb	r0, r0
    3f9c:	e000      	b.n	3fa0 <NOROM_ChipInfo_GetHwRevision+0x64>
    3f9e:	20ff      	movs	r0, #255	; 0xff
    3fa0:	b240      	sxtb	r0, r0
    3fa2:	bd38      	pop	{r3, r4, r5, pc}
    3fa4:	50001318 	andpl	r1, r0, r8, lsl r3

00003fa8 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    3fa8:	b508      	push	{r3, lr}
    3faa:	f7ff ffa1 	bl	3ef0 <NOROM_ChipInfo_GetChipFamily>
    3fae:	2801      	cmp	r0, #1
    3fb0:	d103      	bne.n	3fba <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fb2:	f7ff ffc3 	bl	3f3c <NOROM_ChipInfo_GetHwRevision>
    3fb6:	2813      	cmp	r0, #19
    3fb8:	dc00      	bgt.n	3fbc <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    3fba:	e7fe      	b.n	3fba <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    3fbc:	bd08      	pop	{r3, pc}
	...

00003fc0 <AuxAdiDdiSafeWrite.constprop.1>:
    3fc0:	b538      	push	{r3, r4, r5, lr}
    3fc2:	4604      	mov	r4, r0
    3fc4:	460d      	mov	r5, r1
    3fc6:	f7ff f871 	bl	30ac <NOROM_CPUcpsid>
    3fca:	4b06      	ldr	r3, [pc, #24]	; (3fe4 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    3fcc:	681a      	ldr	r2, [r3, #0]
    3fce:	2a00      	cmp	r2, #0
    3fd0:	d0fb      	beq.n	3fca <AuxAdiDdiSafeWrite.constprop.1+0xa>
    3fd2:	2201      	movs	r2, #1
    3fd4:	6025      	str	r5, [r4, #0]
    3fd6:	601a      	str	r2, [r3, #0]
    3fd8:	b918      	cbnz	r0, 3fe2 <AuxAdiDdiSafeWrite.constprop.1+0x22>
    3fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3fde:	f7ff b869 	b.w	30b4 <NOROM_CPUcpsie>
    3fe2:	bd38      	pop	{r3, r4, r5, pc}
    3fe4:	400c8000 	andmi	r8, ip, r0

00003fe8 <NOROM_DDI32RegWrite>:
    3fe8:	4408      	add	r0, r1
    3fea:	4611      	mov	r1, r2
    3fec:	f7ff bfe8 	b.w	3fc0 <AuxAdiDdiSafeWrite.constprop.1>

00003ff0 <memcpy>:
    3ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ff2:	46c6      	mov	lr, r8
    3ff4:	b500      	push	{lr}
    3ff6:	2a0f      	cmp	r2, #15
    3ff8:	d945      	bls.n	4086 <memcpy+0x96>
    3ffa:	000b      	movs	r3, r1
    3ffc:	2603      	movs	r6, #3
    3ffe:	4303      	orrs	r3, r0
    4000:	401e      	ands	r6, r3
    4002:	000c      	movs	r4, r1
    4004:	0003      	movs	r3, r0
    4006:	2e00      	cmp	r6, #0
    4008:	d142      	bne.n	4090 <memcpy+0xa0>
    400a:	0015      	movs	r5, r2
    400c:	3d10      	subs	r5, #16
    400e:	092d      	lsrs	r5, r5, #4
    4010:	46ac      	mov	ip, r5
    4012:	012d      	lsls	r5, r5, #4
    4014:	46a8      	mov	r8, r5
    4016:	4480      	add	r8, r0
    4018:	e000      	b.n	401c <memcpy+0x2c>
    401a:	003b      	movs	r3, r7
    401c:	6867      	ldr	r7, [r4, #4]
    401e:	605f      	str	r7, [r3, #4]
    4020:	68e7      	ldr	r7, [r4, #12]
    4022:	60df      	str	r7, [r3, #12]
    4024:	001f      	movs	r7, r3
    4026:	6825      	ldr	r5, [r4, #0]
    4028:	601d      	str	r5, [r3, #0]
    402a:	68a5      	ldr	r5, [r4, #8]
    402c:	3710      	adds	r7, #16
    402e:	609d      	str	r5, [r3, #8]
    4030:	3410      	adds	r4, #16
    4032:	4543      	cmp	r3, r8
    4034:	d1f1      	bne.n	401a <memcpy+0x2a>
    4036:	4665      	mov	r5, ip
    4038:	230f      	movs	r3, #15
    403a:	240c      	movs	r4, #12
    403c:	3501      	adds	r5, #1
    403e:	012d      	lsls	r5, r5, #4
    4040:	1949      	adds	r1, r1, r5
    4042:	4013      	ands	r3, r2
    4044:	1945      	adds	r5, r0, r5
    4046:	4214      	tst	r4, r2
    4048:	d025      	beq.n	4096 <memcpy+0xa6>
    404a:	598c      	ldr	r4, [r1, r6]
    404c:	51ac      	str	r4, [r5, r6]
    404e:	3604      	adds	r6, #4
    4050:	1b9c      	subs	r4, r3, r6
    4052:	2c03      	cmp	r4, #3
    4054:	d8f9      	bhi.n	404a <memcpy+0x5a>
    4056:	2403      	movs	r4, #3
    4058:	3b04      	subs	r3, #4
    405a:	089b      	lsrs	r3, r3, #2
    405c:	3301      	adds	r3, #1
    405e:	009b      	lsls	r3, r3, #2
    4060:	4022      	ands	r2, r4
    4062:	18ed      	adds	r5, r5, r3
    4064:	18c9      	adds	r1, r1, r3
    4066:	1e56      	subs	r6, r2, #1
    4068:	2a00      	cmp	r2, #0
    406a:	d007      	beq.n	407c <memcpy+0x8c>
    406c:	2300      	movs	r3, #0
    406e:	e000      	b.n	4072 <memcpy+0x82>
    4070:	0023      	movs	r3, r4
    4072:	5cca      	ldrb	r2, [r1, r3]
    4074:	1c5c      	adds	r4, r3, #1
    4076:	54ea      	strb	r2, [r5, r3]
    4078:	429e      	cmp	r6, r3
    407a:	d1f9      	bne.n	4070 <memcpy+0x80>
    407c:	bc04      	pop	{r2}
    407e:	4690      	mov	r8, r2
    4080:	bcf0      	pop	{r4, r5, r6, r7}
    4082:	bc02      	pop	{r1}
    4084:	4708      	bx	r1
    4086:	0005      	movs	r5, r0
    4088:	1e56      	subs	r6, r2, #1
    408a:	2a00      	cmp	r2, #0
    408c:	d1ee      	bne.n	406c <memcpy+0x7c>
    408e:	e7f5      	b.n	407c <memcpy+0x8c>
    4090:	1e56      	subs	r6, r2, #1
    4092:	0005      	movs	r5, r0
    4094:	e7ea      	b.n	406c <memcpy+0x7c>
    4096:	001a      	movs	r2, r3
    4098:	e7f6      	b.n	4088 <memcpy+0x98>
    409a:	46c0      	nop			; (mov r8, r8)

0000409c <srand>:
    409c:	2200      	movs	r2, #0
    409e:	4b03      	ldr	r3, [pc, #12]	; (40ac <srand+0x10>)
    40a0:	681b      	ldr	r3, [r3, #0]
    40a2:	33a8      	adds	r3, #168	; 0xa8
    40a4:	6018      	str	r0, [r3, #0]
    40a6:	605a      	str	r2, [r3, #4]
    40a8:	4770      	bx	lr
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	20000110 	andcs	r0, r0, r0, lsl r1

000040b0 <rand>:
    40b0:	4b0a      	ldr	r3, [pc, #40]	; (40dc <rand+0x2c>)
    40b2:	b510      	push	{r4, lr}
    40b4:	681c      	ldr	r4, [r3, #0]
    40b6:	34a8      	adds	r4, #168	; 0xa8
    40b8:	6820      	ldr	r0, [r4, #0]
    40ba:	6861      	ldr	r1, [r4, #4]
    40bc:	4a08      	ldr	r2, [pc, #32]	; (40e0 <rand+0x30>)
    40be:	4b09      	ldr	r3, [pc, #36]	; (40e4 <rand+0x34>)
    40c0:	f000 f844 	bl	414c <__aeabi_lmul>
    40c4:	2201      	movs	r2, #1
    40c6:	2300      	movs	r3, #0
    40c8:	1880      	adds	r0, r0, r2
    40ca:	4159      	adcs	r1, r3
    40cc:	6020      	str	r0, [r4, #0]
    40ce:	6061      	str	r1, [r4, #4]
    40d0:	0048      	lsls	r0, r1, #1
    40d2:	0840      	lsrs	r0, r0, #1
    40d4:	bc10      	pop	{r4}
    40d6:	bc02      	pop	{r1}
    40d8:	4708      	bx	r1
    40da:	46c0      	nop			; (mov r8, r8)
    40dc:	20000110 	andcs	r0, r0, r0, lsl r1
    40e0:	4c957f2d 	ldcmi	15, cr7, [r5], {45}	; 0x2d
    40e4:	5851f42d 	ldmdapl	r1, {r0, r2, r3, r5, sl, ip, sp, lr, pc}^

000040e8 <time>:
    40e8:	b510      	push	{r4, lr}
    40ea:	4b0c      	ldr	r3, [pc, #48]	; (411c <time+0x34>)
    40ec:	b084      	sub	sp, #16
    40ee:	0004      	movs	r4, r0
    40f0:	2200      	movs	r2, #0
    40f2:	6818      	ldr	r0, [r3, #0]
    40f4:	4669      	mov	r1, sp
    40f6:	f000 f813 	bl	4120 <_gettimeofday_r>
    40fa:	2800      	cmp	r0, #0
    40fc:	db09      	blt.n	4112 <time+0x2a>
    40fe:	9800      	ldr	r0, [sp, #0]
    4100:	9901      	ldr	r1, [sp, #4]
    4102:	2c00      	cmp	r4, #0
    4104:	d001      	beq.n	410a <time+0x22>
    4106:	6020      	str	r0, [r4, #0]
    4108:	6061      	str	r1, [r4, #4]
    410a:	b004      	add	sp, #16
    410c:	bc10      	pop	{r4}
    410e:	bc04      	pop	{r2}
    4110:	4710      	bx	r2
    4112:	2001      	movs	r0, #1
    4114:	4240      	negs	r0, r0
    4116:	17c1      	asrs	r1, r0, #31
    4118:	e7f3      	b.n	4102 <time+0x1a>
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	20000110 	andcs	r0, r0, r0, lsl r1

00004120 <_gettimeofday_r>:
    4120:	2300      	movs	r3, #0
    4122:	b570      	push	{r4, r5, r6, lr}
    4124:	4c08      	ldr	r4, [pc, #32]	; (4148 <_gettimeofday_r+0x28>)
    4126:	0005      	movs	r5, r0
    4128:	0008      	movs	r0, r1
    412a:	0011      	movs	r1, r2
    412c:	6023      	str	r3, [r4, #0]
    412e:	f000 f837 	bl	41a0 <_gettimeofday>
    4132:	1c43      	adds	r3, r0, #1
    4134:	d002      	beq.n	413c <_gettimeofday_r+0x1c>
    4136:	bc70      	pop	{r4, r5, r6}
    4138:	bc02      	pop	{r1}
    413a:	4708      	bx	r1
    413c:	6823      	ldr	r3, [r4, #0]
    413e:	2b00      	cmp	r3, #0
    4140:	d0f9      	beq.n	4136 <_gettimeofday_r+0x16>
    4142:	602b      	str	r3, [r5, #0]
    4144:	e7f7      	b.n	4136 <_gettimeofday_r+0x16>
    4146:	46c0      	nop			; (mov r8, r8)
    4148:	20000b70 	andcs	r0, r0, r0, ror fp

0000414c <__aeabi_lmul>:
    414c:	b5f0      	push	{r4, r5, r6, r7, lr}
    414e:	000f      	movs	r7, r1
    4150:	0001      	movs	r1, r0
    4152:	46c6      	mov	lr, r8
    4154:	4684      	mov	ip, r0
    4156:	0415      	lsls	r5, r2, #16
    4158:	0400      	lsls	r0, r0, #16
    415a:	0c14      	lsrs	r4, r2, #16
    415c:	0c00      	lsrs	r0, r0, #16
    415e:	0c09      	lsrs	r1, r1, #16
    4160:	0c2d      	lsrs	r5, r5, #16
    4162:	002e      	movs	r6, r5
    4164:	4346      	muls	r6, r0
    4166:	434d      	muls	r5, r1
    4168:	4360      	muls	r0, r4
    416a:	4361      	muls	r1, r4
    416c:	1940      	adds	r0, r0, r5
    416e:	0c34      	lsrs	r4, r6, #16
    4170:	1824      	adds	r4, r4, r0
    4172:	b500      	push	{lr}
    4174:	42a5      	cmp	r5, r4
    4176:	d903      	bls.n	4180 <__aeabi_lmul+0x34>
    4178:	2080      	movs	r0, #128	; 0x80
    417a:	0240      	lsls	r0, r0, #9
    417c:	4680      	mov	r8, r0
    417e:	4441      	add	r1, r8
    4180:	0c25      	lsrs	r5, r4, #16
    4182:	186d      	adds	r5, r5, r1
    4184:	4661      	mov	r1, ip
    4186:	4359      	muls	r1, r3
    4188:	437a      	muls	r2, r7
    418a:	0430      	lsls	r0, r6, #16
    418c:	1949      	adds	r1, r1, r5
    418e:	0424      	lsls	r4, r4, #16
    4190:	0c00      	lsrs	r0, r0, #16
    4192:	1820      	adds	r0, r4, r0
    4194:	1889      	adds	r1, r1, r2
    4196:	bc04      	pop	{r2}
    4198:	4690      	mov	r8, r2
    419a:	bcf0      	pop	{r4, r5, r6, r7}
    419c:	bc04      	pop	{r2}
    419e:	4710      	bx	r2

000041a0 <_gettimeofday>:
    41a0:	2258      	movs	r2, #88	; 0x58
    41a2:	2001      	movs	r0, #1
    41a4:	4b01      	ldr	r3, [pc, #4]	; (41ac <_gettimeofday+0xc>)
    41a6:	4240      	negs	r0, r0
    41a8:	601a      	str	r2, [r3, #0]
    41aa:	4770      	bx	lr
    41ac:	20000b70 	andcs	r0, r0, r0, ror fp
    41b0:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
    41b4:	20656761 	rsbcs	r6, r5, r1, ror #14
    41b8:	746e6553 	strbtvc	r6, [lr], #-1363	; 0xfffffaad
    41bc:	43000d0a 	movwmi	r0, #3338	; 0xd0a
    41c0:	6f6e6e61 	svcvs	0x006e6e61
    41c4:	706f2074 	rsbvc	r2, pc, r4, ror r0	; <UNPREDICTABLE>
    41c8:	74206e65 	strtvc	r6, [r0], #-3685	; 0xfffff19b
    41cc:	69207663 	stmdbvs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}
    41d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    41d4:	65636166 	strbvs	r6, [r3, #-358]!	; 0xfffffe9a
    41d8:	470a0d00 	strmi	r0, [sl, -r0, lsl #26]
    41dc:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    41e0:	20642520 	rsbcs	r2, r4, r0, lsr #10
    41e4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    41e8:	23206563 			; <UNDEFINED> instruction: 0x23206563
    41ec:	28206425 	stmdacs	r0!, {r0, r2, r5, sl, sp, lr}
    41f0:	252f6425 	strcs	r6, [pc, #-1061]!	; 3dd3 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x17b>
    41f4:	65722064 	ldrbvs	r2, [r2, #-100]!	; 0xffffff9c
    41f8:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    41fc:	0a0d2973 	beq	34e7d0 <__ccfg+0x32e828>
    4200:	29472800 	stmdbcs	r7, {fp, sp}^
    4204:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    4208:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    420c:	294e280a 	stmdbcs	lr, {r1, r3, fp, sp}^
    4210:	64207765 	strtvs	r7, [r0], #-1893	; 0xfffff89b
    4214:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    4218:	44492065 	strbmi	r2, [r9], #-101	; 0xffffff9b
    421c:	46280a0d 	strtmi	r0, [r8], -sp, lsl #20
    4220:	646e6929 	strbtvs	r6, [lr], #-2345	; 0xfffff6d7
    4224:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4228:	6f626867 	svcvs	0x00626867
    422c:	0a0d7372 	beq	360ffc <__ccfg+0x341054>
    4230:	72294328 	eorvc	r4, r9, #40, 6	; 0xa0000000
    4234:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    4238:	63657220 	cmnvs	r5, #32, 4
    423c:	2064726f 	rsbcs	r7, r4, pc, ror #4
    4240:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    4244:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4248:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    424c:	2944280a 	stmdbcs	r4, {r1, r3, fp, sp}^
    4250:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
    4254:	65722065 	ldrbvs	r2, [r2, #-101]!	; 0xffffff9b
    4258:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    425c:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    4260:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    4264:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    4268:	52280a0d 	eorpl	r0, r8, #53248	; 0xd000
    426c:	72746529 	rsbsvc	r6, r4, #171966464	; 0xa400000
    4270:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
    4274:	63657220 	cmnvs	r5, #32, 4
    4278:	2064726f 	rsbcs	r7, r4, pc, ror #4
    427c:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 40ec <time+0x4>
    4280:	69656e20 	stmdbvs	r5!, {r5, r9, sl, fp, sp, lr}^
    4284:	6f626867 	svcvs	0x00626867
    4288:	280a0d72 	stmdacs	sl, {r1, r4, r5, r6, r8, sl, fp}
    428c:	6f682953 	svcvs	0x00682953
    4290:	6f6c2077 	svcvs	0x006c2077
    4294:	206c6163 	rsbcs	r6, ip, r3, ror #2
    4298:	6f636572 	svcvs	0x00636572
    429c:	0d736472 	cfldrdeq	mvd6, [r3, #-456]!	; 0xfffffe38
    42a0:	6528520a 	strvs	r5, [r8, #-522]!	; 0xfffffdf6
    42a4:	74657329 	strbtvc	r7, [r5], #-809	; 0xfffffcd7
    42a8:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    42ac:	73206c61 			; <UNDEFINED> instruction: 0x73206c61
    42b0:	61726f74 	cmnvs	r2, r4, ror pc
    42b4:	0a0d6567 	beq	35d858 <__ccfg+0x33d8b0>
    42b8:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
    42bc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    42c0:	3a6e6f69 	bcc	1ba006c <__ccfg+0x1b800c4>
    42c4:	63250020 			; <UNDEFINED> instruction: 0x63250020
    42c8:	6f685300 	svcvs	0x00685300
    42cc:	6f4c2077 	svcvs	0x004c2077
    42d0:	206c6163 	rsbcs	r6, ip, r3, ror #2
    42d4:	6f636552 	svcvs	0x00636552
    42d8:	00736472 	rsbseq	r6, r3, r2, ror r4
    42dc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    42e0:	6f4c2074 	svcvs	0x004c2074
    42e4:	206c6163 	rsbcs	r6, ip, r3, ror #2
    42e8:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    42ec:	00656761 	rsbeq	r6, r5, r1, ror #14
    42f0:	2077654e 	rsbscs	r6, r7, lr, asr #10
    42f4:	756f7247 	strbvc	r7, [pc, #-583]!	; 40b5 <rand+0x5>
    42f8:	44492070 	strbmi	r2, [r9], #-112	; 0xffffff90
    42fc:	4e00203a 	mcrmi	0, 0, r2, cr0, cr10, {1}
    4300:	6e207765 	cdpvs	7, 2, cr7, cr0, cr5, {3}
    4304:	2065646f 	rsbcs	r6, r5, pc, ror #8
    4308:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
    430c:	35322d31 	ldrcc	r2, [r2, #-3377]!	; 0xfffff2cf
    4310:	52003a29 	andpl	r3, r0, #167936	; 0x29000
    4314:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    4318:	20726576 	rsbscs	r6, r2, r6, ror r5
    431c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    4320:	20444920 	subcs	r4, r4, r0, lsr #18
    4324:	322d3128 	eorcc	r3, sp, #40, 2
    4328:	003a2935 	eorseq	r2, sl, r5, lsr r9
    432c:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
    4330:	52206574 	eorpl	r6, r0, #116, 10	; 0x1d000000
    4334:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    4338:	72662064 	rsbvc	r2, r6, #100	; 0x64
    433c:	4e206d6f 	cdpmi	13, 2, cr6, cr0, cr15, {3}
    4340:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    4344:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
    4348:	000d0a3a 	andeq	r0, sp, sl, lsr sl
    434c:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
    4350:	65766569 	ldrbvs	r6, [r6, #-1385]!	; 0xfffffa97
    4354:	63655220 	cmnvs	r5, #32, 4
    4358:	2064726f 	rsbcs	r7, r4, pc, ror #4
    435c:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 41cc <_gettimeofday+0x2c>
    4360:	69654e20 	stmdbvs	r5!, {r5, r9, sl, fp, lr}^
    4364:	6f626867 	svcvs	0x00626867
    4368:	0a3a7275 	beq	ea0d44 <__ccfg+0xe80d9c>
    436c:	654e000d 	strbvs	r0, [lr, #-13]
    4370:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    4374:	2072756f 	rsbscs	r7, r2, pc, ror #10
    4378:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    437c:	20444920 	subcs	r4, r4, r0, lsr #18
    4380:	322d3128 	eorcc	r3, sp, #40, 2
    4384:	003a2935 	eorseq	r2, sl, r5, lsr r9
    4388:	6f636552 	svcvs	0x00636552
    438c:	69206472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, sp, lr}
    4390:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    4394:	5953003a 	ldmdbpl	r3, {r1, r3, r4, r5}^
    4398:	52524553 	subspl	r4, r2, #348127232	; 0x14c00000
    439c:	7825203a 	stmdavc	r5!, {r1, r3, r4, r5, sp}
    43a0:	7325202c 			; <UNDEFINED> instruction: 0x7325202c
    43a4:	72617500 	rsbvc	r7, r1, #0, 10
    43a8:	69617500 	stmdbvs	r1!, {r8, sl, ip, sp, lr}^
    43ac:	63695000 	cmnvs	r9, #0
    43b0:	7620534f 	strtvc	r5, [r0], -pc, asr #6
    43b4:	2f342e35 	svccs	0x00342e35
    43b8:	38314750 	ldmdacc	r1!, {r4, r6, r8, r9, sl, lr}
    43bc:	32323230 	eorscc	r3, r2, #48, 4
    43c0:	43432d41 	movtmi	r2, #15681	; 0x3d41
    43c4:	30353331 	eorscc	r3, r5, r1, lsr r3
    43c8:	55414c5f 	strbpl	r4, [r1, #-3167]	; 0xfffff3a1
    43cc:	5848434e 	stmdapl	r8, {r1, r2, r3, r6, r8, r9, lr}^
    43d0:	28202c4c 	stmdacs	r0!, {r2, r3, r6, sl, fp, sp}
    43d4:	4f202943 	svcmi	0x00202943
    43d8:	6e6f736c 	cdpvs	3, 6, cr7, cr15, cr12, {3}
    43dc:	43207465 			; <UNDEFINED> instruction: 0x43207465
    43e0:	756d6d6f 	strbvc	r6, [sp, #-3439]!	; 0xfffff291
    43e4:	6163696e 	cmnvs	r3, lr, ror #18
    43e8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    43ec:	32202c73 	eorcc	r2, r0, #29440	; 0x7300
    43f0:	2d323030 	ldccs	0, cr3, [r2, #-192]!	; 0xffffff40
    43f4:	38313032 	ldmdacc	r1!, {r1, r4, r5, ip, sp}
    43f8:	66654c00 	strbtvs	r4, [r5], -r0, lsl #24
    43fc:	65766f74 	ldrbvs	r6, [r6, #-3956]!	; 0xfffff08c
    4400:	41522072 	cmpmi	r2, r2, ror r0
    4404:	25203a4d 	strcs	r3, [r0, #-2637]!	; 0xfffff5b3
    4408:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
    440c:	00736574 	rsbseq	r6, r3, r4, ror r5
    4410:	50007473 	andpl	r7, r0, r3, ror r4
    4414:	534f6369 	movtpl	r6, #62313	; 0xf369
    4418:	6c616820 	stclvs	8, cr6, [r1], #-128	; 0xffffff80
    441c:	00646574 	rsbeq	r6, r4, r4, ror r5

00004420 <port_confs>:
    4420:	00306080 	eorseq	r6, r0, r0, lsl #1
    4424:	00386080 	eorseq	r6, r8, r0, lsl #1
    4428:	00186010 	andseq	r6, r8, r0, lsl r0
    442c:	2010400f 	andscs	r4, r0, pc
    4430:	30694000 	rsbcc	r4, r9, r0
    4434:	30714000 	rsbscc	r4, r1, r0
    4438:	00b86008 	adcseq	r6, r8, r8
    443c:	60c94000 	sbcvs	r4, r9, r0
    4440:	60d14000 	sbcsvs	r4, r1, r0
    4444:	60d94000 	sbcsvs	r4, r9, r0
    4448:	60e14000 	rscvs	r4, r1, r0
    444c:	00096380 	andeq	r6, r9, r0, lsl #7
    4450:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    4454:	20402000 	subcs	r2, r0, r0
    4458:	00486080 	subeq	r6, r8, r0, lsl #1
    445c:	00506080 	subseq	r6, r0, r0, lsl #1
    4460:	00a06000 	adceq	r6, r0, r0
    4464:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    4468:	74750065 	ldrbtvc	r0, [r5], #-101	; 0xffffff9b
    446c:	73006120 	movwvc	r6, #288	; 0x120
    4470:	64610077 	strbtvs	r0, [r1], #-119	; 0xffffff89
    4474:	69007664 	stmdbvs	r0, {r2, r5, r6, r9, sl, ip, sp, lr}
    4478:	616d006f 	cmnvs	sp, pc, rrx
    447c:	6d00316c 	stfvss	f3, [r0, #-432]	; 0xfffffe50
    4480:	00676c61 	rsbeq	r6, r7, r1, ror #24
    4484:	0069706b 	rsbeq	r7, r9, fp, rrx
    4488:	636c616d 	cmnvs	ip, #1073741851	; 0x4000001b
	...

0000448d <__pi_hex_enc_table>:
    448d:	33323130 	teqcc	r2, #48, 2
    4491:	37363534 			; <UNDEFINED> instruction: 0x37363534
    4495:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    4499:	46454443 	strbmi	r4, [r5], -r3, asr #8
    449d:	30766374 	rsbscc	r6, r6, r4, ror r3
    44a1:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
    44a5:	736f7073 	cmnvc	pc, #115	; 0x73
    44a9:	65732065 	ldrbvs	r2, [r3, #-101]!	; 0xffffff9b
    44ad:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
    44b1:	736f7073 	cmnvc	pc, #115	; 0x73
    44b5:	68702065 	ldmdavs	r0!, {r0, r2, r5, r6, sp}^
    44b9:	63740079 	cmnvs	r4, #121	; 0x79
    44bd:	00323076 	eorseq	r3, r2, r6, ror r0
    44c1:	30766374 	rsbscc	r6, r6, r4, ror r3
    44c5:	63740033 	cmnvs	r4, #51	; 0x33
    44c9:	00343076 	eorseq	r3, r4, r6, ror r0
    44cd:	30766374 	rsbscc	r6, r6, r4, ror r3
    44d1:	63740035 	cmnvs	r4, #53	; 0x35
    44d5:	00363076 	eorseq	r3, r6, r6, ror r0
    44d9:	31766374 	cmncc	r6, r4, ror r3
    44dd:	63740036 	cmnvs	r4, #54	; 0x36
    44e1:	00373176 	eorseq	r3, r7, r6, ror r1
    44e5:	31766374 	cmncc	r6, r4, ror r3
    44e9:	63740038 	cmnvs	r4, #56	; 0x38
    44ed:	00333276 	eorseq	r3, r3, r6, ror r2
    44f1:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    44f5:	63740032 	cmnvs	r4, #50	; 0x32
    44f9:	00363276 	eorseq	r3, r6, r6, ror r2
    44fd:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    4501:	63740037 	cmnvs	r4, #55	; 0x37
    4505:	00383276 	eorseq	r3, r8, r6, ror r2
    4509:	32766374 	rsbscc	r6, r6, #116, 6	; 0xd0000001
    450d:	63740039 	cmnvs	r4, #57	; 0x39
    4511:	00303376 	eorseq	r3, r0, r6, ror r3
    4515:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4519:	63740031 	cmnvs	r4, #49	; 0x31
    451d:	00323376 	eorseq	r3, r2, r6, ror r3
    4521:	33766374 	cmncc	r6, #116, 6	; 0xd0000001
    4525:	63740033 	cmnvs	r4, #51	; 0x33
    4529:	00343376 	eorseq	r3, r4, r6, ror r3

0000452d <__input_pins>:
    452d:	9c9b9a99 	vldmials	fp, {s18-s170}
	...

00004532 <__button_list>:
    4532:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}
    4536:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    453a:	00706f20 	rsbseq	r6, r0, r0, lsr #30
    453e:	00317472 	eorseq	r7, r1, r2, ror r4
    4542:	20505548 	subscs	r5, r0, r8, asr #10
    4546:	20786c25 	rsbscs	r6, r8, r5, lsr #24
    454a:	00786c25 	rsbseq	r6, r8, r5, lsr #24
    454e:	676e6168 	strbvs	r6, [lr, -r8, ror #2]!
    4552:	30636920 	rsbcc	r6, r3, r0, lsr #18
    4556:	50554800 	subspl	r4, r5, r0, lsl #16
    455a:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    455e:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4562:	786c2520 	stmdavc	ip!, {r5, r8, sl, sp}^
    4566:	32747200 	rsbscc	r7, r4, #0, 4
    456a:	44414200 	strbmi	r4, [r1], #-512	; 0xfffffe00
    456e:	00585220 	subseq	r5, r8, r0, lsr #4
    4572:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    4576:	00797020 	rsbseq	r7, r9, r0, lsr #32
    457a:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    457e:	31636300 	cmncc	r3, r0, lsl #6
    4582:	626d2033 	rsbvs	r2, sp, #51	; 0x33
    4586:	31434300 	mrscc	r4, (UNDEF: 115)
    458a:	3a303533 	bcc	c11a5e <__ccfg+0xbf1ab6>
    458e:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    4592:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    4596:	00642520 	rsbeq	r2, r4, r0, lsr #10

0000459a <patable>:
    459a:	12c304c0 	sbcne	r0, r3, #192, 8	; 0xc0000000
    459e:	184418c5 	stmdane	r4, {r0, r2, r6, r7, fp, ip}^
    45a2:	32ce24c9 	sbccc	r2, lr, #-922746880	; 0xc9000000
    45a6:	bc2b58d8 	stclt	8, cr5, [fp], #-864	; 0xfffffca0
	...

000045ac <patchGenfskRfe>:
    45ac:	000061a3 	andeq	r6, r0, r3, lsr #3
    45b0:	1307147f 	movwne	r1, #29823	; 0x747f
    45b4:	24f1004d 	ldrbtcs	r0, [r1], #77	; 0x4d
    45b8:	3f131f2e 	svccc	0x00131f2e
    45bc:	003f0ab0 	ldrhteq	r0, [pc], -r0
    45c0:	0000ff07 	andeq	pc, r0, r7, lsl #30
    45c4:	40004030 	andmi	r4, r0, r0, lsr r0
    45c8:	40034001 	andmi	r4, r3, r1
    45cc:	400f4007 	andmi	r4, pc, r7
    45d0:	40cf404f 	sbcmi	r4, pc, pc, asr #32
    45d4:	43cf41cf 	bicmi	r4, pc, #-1073741773	; 0xc0000033
    45d8:	4fcf47cf 	svcmi	0x00cf47cf
    45dc:	2fcf3fcf 	svccs	0x00cf3fcf
    45e0:	0fcf1fcf 	svceq	0x00cf1fcf
    45e4:	00000000 	andeq	r0, r0, r0
    45e8:	0008000f 	andeq	r0, r8, pc
    45ec:	003f0000 	eorseq	r0, pc, r0
    45f0:	00400000 	subeq	r0, r0, r0
    45f4:	0000003f 	andeq	r0, r0, pc, lsr r0
    45f8:	00680004 	rsbeq	r0, r8, r4
    45fc:	00dc000e 	sbcseq	r0, ip, lr
    4600:	00430006 	subeq	r0, r3, r6
    4604:	0005001a 	andeq	r0, r5, sl, lsl r0
    4608:	00000000 	andeq	r0, r0, r0
    460c:	00000002 	andeq	r0, r0, r2
    4610:	0000003f 	andeq	r0, r0, pc, lsr r0
    4614:	00040000 	andeq	r0, r4, r0
    4618:	000000c0 	andeq	r0, r0, r0, asr #1
    461c:	00c00004 	sbceq	r0, r0, r4
    4620:	00070000 	andeq	r0, r7, r0
    4624:	9100c050 	qaddls	ip, r0, r0
    4628:	c0707000 	rsbsgt	r7, r0, r0
    462c:	70009100 	andvc	r9, r0, r0, lsl #2
    4630:	00213182 	eoreq	r3, r1, r2, lsl #3
    4634:	b1109131 	tstlt	r0, r1, lsr r1
    4638:	81017000 	mrshi	r7, (UNDEF: 1)
    463c:	a100b101 	tstge	r0, r1, lsl #2
    4640:	91323182 	teqls	r2, r2, lsl #3
    4644:	9101b110 	tstls	r1, r0, lsl r1
    4648:	81411011 	cmphi	r1, r1, lsl r0
    464c:	404f2241 	submi	r2, pc, r1, asr #4
    4650:	700006f1 	strdvc	r0, [r0], -r1
    4654:	9101c051 	qaddls	ip, r1, r1
    4658:	39101830 	ldmdbcc	r0, {r4, r5, fp, ip}
    465c:	d0083183 	andle	r3, r8, r3, lsl #3
    4660:	6f413118 	svcvs	0x00413118
    4664:	91310031 	teqls	r1, r1, lsr r0
    4668:	1483b110 	strne	fp, [r3], #272	; 0x110
    466c:	685b1614 	ldmdavs	fp, {r2, r4, r9, sl, ip}^
    4670:	10257000 	eorne	r7, r5, r0
    4674:	9100c050 	qaddls	ip, r0, r0
    4678:	c0c0c3f4 	strdgt	ip, [r0], #52	; 0x34
    467c:	6f031420 	svcvs	0x00031420
    4680:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    4684:	3182c022 	orrcc	ip, r2, r2, lsr #32
    4688:	91310021 	teqls	r1, r1, lsr #32
    468c:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    4690:	04411031 	strbeq	r1, [r1], #-49	; 0xffffffcf
    4694:	3182c082 	orrcc	ip, r2, r2, lsl #1
    4698:	91310021 	teqls	r1, r1, lsr #32
    469c:	3963b110 	stmdbcc	r3!, {r4, r8, ip, sp, pc}^
    46a0:	c0a21031 	adcgt	r1, r2, r1, lsr r0
    46a4:	00213182 	eoreq	r3, r1, r2, lsl #3
    46a8:	b1109131 	tstlt	r0, r1, lsr r1
    46ac:	31151050 	tstcc	r5, r0, asr r0
    46b0:	92051405 	andls	r1, r5, #83886080	; 0x5000000
    46b4:	643f7000 	ldrtvs	r7, [pc], #-0	; 46bc <patchGenfskRfe+0x110>
    46b8:	1031c052 	eorsne	ip, r1, r2, asr r0
    46bc:	31610631 	cmncc	r1, r1, lsr r6
    46c0:	644202c1 	strbvs	r0, [r2], #-705	; 0xfffffd3f
    46c4:	1031c112 	eorsne	ip, r1, r2, lsl r1
    46c8:	06713921 	ldrbteq	r3, [r1], -r1, lsr #18
    46cc:	02e13151 	rsceq	r3, r1, #1073741844	; 0x40000014
    46d0:	70006442 	andvc	r6, r0, r2, asr #8
    46d4:	6599658a 	ldrvs	r6, [r9, #1418]	; 0x58a
    46d8:	8220c088 	eorhi	ip, r0, #136	; 0x88
    46dc:	39803950 	stmibcc	r0, {r4, r6, r8, fp, ip, sp}
    46e0:	409f1e00 	addsmi	r1, pc, r0, lsl #28
    46e4:	3001c041 	andcc	ip, r1, r1, asr #32
    46e8:	1a181418 	bne	609750 <__ccfg+0x5e97a8>
    46ec:	8230c089 	eorshi	ip, r0, #137	; 0x89
    46f0:	39803960 	stmibcc	r0, {r5, r6, r8, fp, ip, sp}
    46f4:	40a91e00 	adcmi	r1, r9, r0, lsl #28
    46f8:	3001c041 	andcc	ip, r1, r1, asr #32
    46fc:	1a191419 	bne	649768 <__ccfg+0x6297c0>
    4700:	9136643c 	teqls	r6, ip, lsr r4
    4704:	9134b110 	teqls	r4, r0, lsl r1
    4708:	b054b110 	subslt	fp, r4, r0, lsl r1
    470c:	a0547100 	subsge	r7, r4, r0, lsl #2
    4710:	80f0b064 	rscshi	fp, r0, r4, rrx
    4714:	40af2200 	adcmi	r2, pc, r0, lsl #4
    4718:	90b01240 	adcsls	r1, r0, r0, asr #4
    471c:	8253b032 	subshi	fp, r3, #50	; 0x32
    4720:	39533953 	ldmdbcc	r3, {r0, r1, r4, r6, r8, fp, ip, sp}^
    4724:	643f6485 	ldrtvs	r6, [pc], #-1157	; 472c <patchGenfskRfe+0x180>
    4728:	c122c111 			; <UNDEFINED> instruction: 0xc122c111
    472c:	c1706442 	cmngt	r0, r2, asr #8
    4730:	c11168c2 	tstgt	r1, r2, asr #17
    4734:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    4738:	68c7c170 	stmiavs	r7, {r4, r5, r6, r8, lr, pc}^
    473c:	9100c050 	qaddls	ip, r0, r0
    4740:	92987227 	addsls	r7, r8, #1879048194	; 0x70000002
    4744:	16141615 			; <UNDEFINED> instruction: 0x16141615
    4748:	10531042 	subsne	r1, r3, r2, asr #32
    474c:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    4750:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    4754:	31313981 	teqcc	r1, r1, lsl #19
    4758:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    475c:	72276572 	eorvc	r6, r7, #478150656	; 0x1c800000
    4760:	b2709299 	rsbslt	r9, r0, #-1879048183	; 0x90000009
    4764:	10731062 	rsbsne	r1, r3, r2, rrx
    4768:	8231c3f0 	eorshi	ip, r1, #240, 6	; 0xc0000003
    476c:	39213121 	stmdbcc	r1!, {r0, r5, r8, ip, sp}
    4770:	101b3981 	andsne	r3, fp, r1, lsl #19
    4774:	c0e26572 	rscgt	r6, r2, r2, ror r5
    4778:	82603182 	rsbhi	r3, r0, #-2147483616	; 0x80000020
    477c:	39803180 	stmibcc	r0, {r7, r8, ip, sp}
    4780:	b0610002 	rsblt	r0, r1, r2
    4784:	91327100 	teqls	r2, r0, lsl #2
    4788:	a051b110 	subsge	fp, r1, r0, lsl r1
    478c:	7227b061 	eorvc	fp, r7, #97	; 0x61
    4790:	68f3c230 	ldmvs	r3!, {r4, r5, r9, lr, pc}^
    4794:	12800000 	addne	r0, r0, #0
    4798:	b03290b0 	ldrhtlt	r9, [r2], -r0
    479c:	c0507000 	subsgt	r7, r0, r0
    47a0:	72279100 	eorvc	r9, r7, #0, 2
    47a4:	10629299 	mlsne	r2, r9, r2, r9
    47a8:	c3f01073 	mvnsgt	r1, #115	; 0x73
    47ac:	31218231 			; <UNDEFINED> instruction: 0x31218231
    47b0:	39813921 	stmibcc	r1, {r0, r5, r8, fp, ip, sp}
    47b4:	b270b051 	rsbslt	fp, r0, #81	; 0x51
    47b8:	7227657e 	eorvc	r6, r7, #528482304	; 0x1f800000
    47bc:	b2709298 	rsbslt	r9, r0, #152, 4	; 0x80000009
    47c0:	10531042 	subsne	r1, r3, r2, asr #32
    47c4:	8221c1f0 	eorhi	ip, r1, #240, 2	; 0x3c
    47c8:	39313131 	ldmdbcc	r1!, {r0, r4, r5, r8, ip, sp}
    47cc:	31313981 	teqcc	r1, r1, lsl #19
    47d0:	657e101a 	ldrbvs	r1, [lr, #-26]!	; 0xffffffe6
    47d4:	b061a051 	rsblt	sl, r1, r1, asr r0
    47d8:	c0b07227 	adcsgt	r7, r0, r7, lsr #4
    47dc:	643f6918 	ldrtvs	r6, [pc], #-2328	; 47e4 <patchGenfskRfe+0x238>
    47e0:	c122c101 			; <UNDEFINED> instruction: 0xc122c101
    47e4:	c1016442 	tstgt	r1, r2, asr #8
    47e8:	6442c0c2 	strbvs	ip, [r2], #-194	; 0xffffff3e
    47ec:	643c1a15 	ldrtvs	r1, [ip], #-2581	; 0xfffff5eb
    47f0:	b1109135 	tstlt	r0, r5, lsr r1
    47f4:	64858253 	strvs	r8, [r5], #595	; 0x253
    47f8:	90b012c0 	adcsls	r1, r0, r0, asr #5
    47fc:	7000b032 	andvc	fp, r0, r2, lsr r0
    4800:	c272643f 	rsbsgt	r6, r2, #1056964608	; 0x3f000000
    4804:	6442c081 	strbvs	ip, [r2], #-129	; 0xffffff7f
    4808:	c111c122 	tstgt	r1, r2, lsr #2
    480c:	c0026442 	andgt	r6, r2, r2, asr #8
    4810:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4814:	c331c062 	teqgt	r1, #98	; 0x62
    4818:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    481c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4820:	c111c302 	tstgt	r1, r2, lsl #6
    4824:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    4828:	64853953 	strvs	r3, [r5], #2387	; 0x953
    482c:	6447c3e2 	strbvs	ip, [r7], #-994	; 0xfffffc1e
    4830:	41402211 	cmpmi	r0, r1, lsl r2
    4834:	c881c242 	stmgt	r1, {r1, r6, r9, lr, pc}
    4838:	c2526442 	subsgt	r6, r2, #1107296256	; 0x42000000
    483c:	6442c111 	strbvs	ip, [r2], #-273	; 0xfffffeef
    4840:	cee1c272 	mcrgt	2, 7, ip, cr1, cr2, {3}
    4844:	c2026442 	andgt	r6, r2, #1107296256	; 0x42000000
    4848:	6442c881 	strbvs	ip, [r2], #-2177	; 0xfffff77f
    484c:	c801c202 	stmdagt	r1, {r1, r9, lr, pc}
    4850:	c0b06442 	adcsgt	r6, r0, r2, asr #8
    4854:	70006954 	andvc	r6, r0, r4, asr r9
    4858:	c242643f 	subgt	r6, r2, #1056964608	; 0x3f000000
    485c:	6442c801 	strbvs	ip, [r2], #-2049	; 0xfffff7ff
    4860:	c011c252 	andsgt	ip, r1, r2, asr r2
    4864:	c2726442 	rsbsgt	r6, r2, #1107296256	; 0x42000000
    4868:	6442c0e1 	strbvs	ip, [r2], #-225	; 0xffffff1f
    486c:	c101c002 	tstgt	r1, r2
    4870:	c0626442 	rsbgt	r6, r2, r2, asr #8
    4874:	6442c301 	strbvs	ip, [r2], #-769	; 0xfffffcff
    4878:	c101c122 	tstgt	r1, r2, lsr #2
    487c:	c3626442 	cmngt	r2, #1107296256	; 0x42000000
    4880:	6442c101 	strbvs	ip, [r2], #-257	; 0xfffffeff
    4884:	c101c302 	tstgt	r1, r2, lsl #6
    4888:	82536442 	subshi	r6, r3, #1107296256	; 0x42000000
    488c:	70006485 	andvc	r6, r0, r5, lsl #9
    4890:	7100b061 	tstvc	r0, r1, rrx
    4894:	1c231412 	cfstrsne	mvf1, [r3], #-72	; 0xffffffb8
    4898:	91334d7a 	teqls	r3, sl, ror sp
    489c:	7000b110 	andvc	fp, r0, r0, lsl r1
    48a0:	b1109132 	tstlt	r0, r2, lsr r1
    48a4:	70006972 	andvc	r6, r0, r2, ror r9
    48a8:	7100b061 	tstvc	r0, r1, rrx
    48ac:	1c321813 	ldcne	8, cr1, [r2], #-76	; 0xffffffb4
    48b0:	91324986 	teqls	r2, r6, lsl #19
    48b4:	7000b110 	andvc	fp, r0, r0, lsl r1
    48b8:	b1109133 	tstlt	r0, r3, lsr r1
    48bc:	7000697e 	andvc	r6, r0, lr, ror r9
    48c0:	6447c0c2 	strbvs	ip, [r7], #-194	; 0xffffff3e
    48c4:	c0c21015 	sbcgt	r1, r2, r5, lsl r0
    48c8:	64471612 	strbvs	r1, [r7], #-1554	; 0xfffff9ee
    48cc:	14153141 	ldrne	r3, [r5], #-321	; 0xfffffebf
    48d0:	3180c0c0 	orrcc	ip, r0, r0, asr #1
    48d4:	10541405 	subsne	r1, r4, r5, lsl #8
    48d8:	040478a0 	streq	r7, [r4], #-2208	; 0xfffff760
    48dc:	c0e67000 	rscgt	r7, r6, r0
    48e0:	cc013186 	stfgts	f3, [r1], {134}	; 0x86
    48e4:	10671416 	rsbne	r1, r7, r6, lsl r4
    48e8:	c3f08261 	mvnsgt	r8, #268435462	; 0x10000006
    48ec:	14170401 	ldrne	r0, [r7], #-1025	; 0xfffffbff
    48f0:	73067000 	movwvc	r7, #24576	; 0x6000
    48f4:	720b7205 	andvc	r7, fp, #1342177280	; 0x50000000
    48f8:	b050720e 	subslt	r7, r0, lr, lsl #4
    48fc:	80817100 	addhi	r7, r1, r0, lsl #2
    4900:	a050b060 	subsge	fp, r0, r0, rrx
    4904:	22418092 	subcs	r8, r1, #146	; 0x92
    4908:	808045c3 	addhi	r4, r0, r3, asr #11
    490c:	0410c1f1 	ldreq	ip, [r0], #-497	; 0xfffffe0f
    4910:	11011630 	tstne	r1, r0, lsr r6
    4914:	6c011401 	cfstrsvs	mvf1, [r1], {1}
    4918:	61d761d6 	ldrsbvs	r6, [r7, #22]
    491c:	61d961d8 	ldrsbvs	r6, [r9, #24]
    4920:	61db61da 	ldrsbvs	r6, [fp, #26]
    4924:	61de61dc 	ldrsbvs	r6, [lr, #28]
    4928:	61e261e0 	mvnvs	r6, r0, ror #3
    492c:	633661e4 	teqvs	r6, #228, 2	; 0x39
    4930:	80916339 	addshi	r6, r1, r9, lsr r3
    4934:	0421c0f2 	strteq	ip, [r1], #-242	; 0xffffff0e
    4938:	80823121 	addhi	r3, r2, r1, lsr #2
    493c:	14122a42 	ldrne	r2, [r2], #-2626	; 0xfffff5be
    4940:	11011632 	tstne	r1, r2, lsr r6
    4944:	6c011421 	cfstrsvs	mvf1, [r1], {33}	; 0x21
    4948:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    494c:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    4950:	620b61ee 	andvs	r6, fp, #-2147483589	; 0x8000003b
    4954:	633961f4 	teqvs	r9, #244, 2	; 0x3d
    4958:	61e661e6 	mvnvs	r6, r6, ror #3
    495c:	61e661e6 	mvnvs	r6, r6, ror #3
    4960:	61e661e6 	mvnvs	r6, r6, ror #3
    4964:	61e66494 			; <UNDEFINED> instruction: 0x61e66494
    4968:	61e664f9 	strdvs	r6, [r6, #73]!	; 0x49
    496c:	61e6652a 	mvnvs	r6, sl, lsr #10
    4970:	61e66556 	mvnvs	r6, r6, asr r5
    4974:	61e66746 	mvnvs	r6, r6, asr #14
    4978:	90b01210 	adcsls	r1, r0, r0, lsl r2
    497c:	7306720e 	movwvc	r7, #25102	; 0x620e
    4980:	12107205 	andsne	r7, r0, #1342177280	; 0x50000000
    4984:	61a79030 			; <UNDEFINED> instruction: 0x61a79030
    4988:	673ccff0 			; <UNDEFINED> instruction: 0x673ccff0
    498c:	c003c1d4 	ldrdgt	ip, [r3], -r4
    4990:	6454c3c0 	ldrbvs	ip, [r4], #-960	; 0xfffffc40
    4994:	91507840 	cmpls	r0, r0, asr #16
    4998:	92107850 	andsls	r7, r0, #80, 16	; 0x500000
    499c:	92207860 	eorls	r7, r0, #96, 16	; 0x600000
    49a0:	92307870 	eorsls	r7, r0, #112, 16	; 0x700000
    49a4:	92407880 	subls	r7, r0, #128, 16	; 0x800000
    49a8:	92607890 	rsbls	r7, r0, #144, 16	; 0x900000
    49ac:	91907830 	orrsls	r7, r0, r0, lsr r8
    49b0:	39408210 	stmdbcc	r0, {r4, r9, pc}^
    49b4:	100106f0 	strdne	r0, [r1], -r0	; <UNPREDICTABLE>
    49b8:	14103110 	ldrne	r3, [r0], #-272	; 0xfffffef0
    49bc:	67429200 	strbvs	r9, [r2, -r0, lsl #4]
    49c0:	a0bc61e6 	adcsge	r6, ip, r6, ror #3
    49c4:	a054a0e2 	subsge	sl, r4, r2, ror #1
    49c8:	225080f0 	subscs	r8, r0, #240	; 0xf0
    49cc:	80404615 	subhi	r4, r0, r5, lsl r6
    49d0:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    49d4:	a040620d 	subge	r6, r0, sp, lsl #4
    49d8:	318d822d 	orrcc	r8, sp, sp, lsr #4
    49dc:	8210398d 	andshi	r3, r0, #2310144	; 0x234000
    49e0:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    49e4:	821a1009 	andshi	r1, sl, #9
    49e8:	041a394a 	ldreq	r3, [sl], #-2378	; 0xfffff6b6
    49ec:	39808210 	stmibcc	r0, {r4, r9, pc}
    49f0:	100e0410 	andne	r0, lr, r0, lsl r4
    49f4:	10bc10ab 	adcsne	r1, ip, fp, lsr #1
    49f8:	646310c2 	strbtvs	r1, [r3], #-194	; 0xffffff3e
    49fc:	cfe07229 	svcgt	0x00e07229
    4a00:	b013673c 	andslt	r6, r3, ip, lsr r7
    4a04:	66c8b003 	strbvs	fp, [r8], r3
    4a08:	b050b053 	subslt	fp, r0, r3, asr r0
    4a0c:	b064b054 	rsblt	fp, r4, r4, asr r0
    4a10:	66a5b013 	ssatvs	fp, #6, r3
    4a14:	22e08210 	rsccs	r8, r0, #16, 4
    4a18:	66ae4638 			; <UNDEFINED> instruction: 0x66ae4638
    4a1c:	80417100 	subhi	r7, r1, r0, lsl #2
    4a20:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4a24:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4a28:	22f0464b 	rscscs	r4, r0, #78643200	; 0x4b00000
    4a2c:	b0644718 	rsblt	r4, r4, r8, lsl r7
    4a30:	42382231 	eorsmi	r2, r8, #268435459	; 0x10000003
    4a34:	66ceb063 	strbvs	fp, [lr], r3, rrx
    4a38:	22e08210 	rsccs	r8, r0, #16, 4
    4a3c:	66704638 			; <UNDEFINED> instruction: 0x66704638
    4a40:	b0646238 	rsblt	r6, r4, r8, lsr r2
    4a44:	318f816f 	orrcc	r8, pc, pc, ror #2
    4a48:	dfd03d8f 	svcle	0x00d03d8f
    4a4c:	673c92ff 			; <UNDEFINED> instruction: 0x673c92ff
    4a50:	80417100 	subhi	r7, r1, r0, lsl #2
    4a54:	472b2201 	strmi	r2, [fp, -r1, lsl #4]!
    4a58:	80f0b064 	rscshi	fp, r0, r4, rrx
    4a5c:	42652250 	rsbmi	r2, r5, #80, 4
    4a60:	8211b063 	andshi	fp, r1, #99	; 0x63
    4a64:	466022c1 	strbtmi	r2, [r0], -r1, asr #5
    4a68:	670566ce 	strvs	r6, [r5, -lr, asr #13]
    4a6c:	22d18211 	sbcscs	r8, r1, #268435457	; 0x10000001
    4a70:	66704652 			; <UNDEFINED> instruction: 0x66704652
    4a74:	81616252 	cmnhi	r1, r2, asr r2
    4a78:	31818172 	orrcc	r8, r1, r2, ror r1
    4a7c:	31823d81 	orrcc	r3, r2, r1, lsl #27
    4a80:	efc03d82 	svc	0x00c03d82
    4a84:	930292f1 	movwls	r9, #8945	; 0x22f1
    4a88:	620b673c 	andvs	r6, fp, #60, 14	; 0xf00000
    4a8c:	91c081b0 	strhls	r8, [r0, #16]
    4a90:	829781d3 	addshi	r8, r7, #-1073741772	; 0xc0000034
    4a94:	18d3a290 	ldmne	r3, {r4, r7, r9, sp, pc}^
    4a98:	0bf34e7f 	bleq	ffcd849c <_estack+0xdfcd349c>
    4a9c:	1ce31613 	stclne	6, cr1, [r3], #76	; 0x4c
    4aa0:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    4aa4:	143b81e3 	ldrtne	r8, [fp], #-483	; 0xfffffe1d
    4aa8:	1cba6290 	lfmne	f6, 4, [sl], #576	; 0x240
    4aac:	1e23468b 	cfmadda32ne	mvax4, mvax4, mvfx3, mvfx11
    4ab0:	1ce34a8b 	vstmiane	r3!, {s9-s147}
    4ab4:	b2904e8b 	addslt	r4, r0, #2224	; 0x8b0
    4ab8:	428b2207 	addmi	r2, fp, #1879048192	; 0x70000000
    4abc:	1a1ba290 	bne	6ed504 <__ccfg+0x6cd55c>
    4ac0:	1ce36296 	sfmne	f6, 2, [r3], #600	; 0x258
    4ac4:	91c34aa4 	bicls	r4, r3, r4, lsr #21
    4ac8:	183b81e3 	ldmdane	fp!, {r0, r1, r5, r6, r7, r8, pc}
    4acc:	4ea01cab 	cdpmi	12, 10, cr1, cr0, cr11, {5}
    4ad0:	4aa21c9b 	bmi	fe88bd44 <_estack+0xde886d44>
    4ad4:	42a41cbc 	adcmi	r1, r4, #188, 24	; 0xbc00
    4ad8:	821010b2 	andshi	r1, r0, #178	; 0xb2
    4adc:	429d22d0 	addsmi	r2, sp, #208, 4
    4ae0:	221080f0 	andscs	r8, r0, #240	; 0xf0
    4ae4:	646346a4 	strbtvs	r4, [r3], #-1700	; 0xfffff95c
    4ae8:	62a466a5 	adcvs	r6, r4, #173015040	; 0xa500000
    4aec:	629410ab 	addsvs	r1, r4, #171	; 0xab
    4af0:	6294109b 	addsvs	r1, r4, #155	; 0x9b
    4af4:	82307000 	eorshi	r7, r0, #0
    4af8:	0410c0f1 	ldreq	ip, [r0], #-241	; 0xffffff0f
    4afc:	7100b063 	tstvc	r0, r3, rrx
    4b00:	10bc6aa8 	adcsne	r6, ip, r8, lsr #21
    4b04:	7000b0e0 	andvc	fp, r0, r0, ror #1
    4b08:	91c281b2 	strhls	r8, [r2, #18]
    4b0c:	820181d2 	andhi	r8, r1, #-2147483596	; 0x80000034
    4b10:	81511812 	cmphi	r1, r2, lsl r8
    4b14:	82411812 	subhi	r1, r1, #1179648	; 0x120000
    4b18:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4b1c:	4abf1c12 	bmi	fefcbb6c <_estack+0xdefc6b6c>
    4b20:	b032b0e2 	eorslt	fp, r2, r2, ror #1
    4b24:	92f2dfb0 	rscsls	sp, r2, #176, 30	; 0x2c0
    4b28:	c7f1673c 			; <UNDEFINED> instruction: 0xc7f1673c
    4b2c:	4ec31421 	cdpmi	4, 12, cr1, cr3, cr1, {1}
    4b30:	9162c812 	cmnls	r2, r2, lsl r8
    4b34:	b0319172 	eorslt	r9, r1, r2, ror r1
    4b38:	7000b0e1 	andvc	fp, r0, r1, ror #1
    4b3c:	c006c008 	andgt	ip, r6, r8
    4b40:	9160c800 	cmnls	r0, r0, lsl #16
    4b44:	70009170 	andvc	r9, r0, r0, ror r1
    4b48:	81b08201 	lslshi	r8, r1, #4
    4b4c:	81d091c0 	bicshi	r9, r0, r0, asr #3
    4b50:	81511810 	cmphi	r1, r0, lsl r8
    4b54:	14061810 	strne	r1, [r6], #-2064	; 0xfffff7f0
    4b58:	824280e1 	subhi	r8, r2, #225	; 0xe1
    4b5c:	3d823182 	stfccs	f3, [r2, #520]	; 0x208
    4b60:	4ae41c20 	bmi	ff90bbe8 <_estack+0xdf906be8>
    4b64:	2221b0e2 	eorcs	fp, r1, #226	; 0xe2
    4b68:	b03246e8 	eorslt	r4, r2, r8, ror #13
    4b6c:	dfa01005 	svcle	0x00a01005
    4b70:	673c92f5 			; <UNDEFINED> instruction: 0x673c92f5
    4b74:	42e82221 	rscmi	r2, r8, #268435458	; 0x10000002
    4b78:	b032a0e2 	eorslt	sl, r2, r2, ror #1
    4b7c:	39418231 	stmdbcc	r1, {r0, r4, r5, r9, pc}^
    4b80:	0401c0f0 	streq	ip, [r1], #-240	; 0xffffff10
    4b84:	42f61e01 	rscsmi	r1, r6, #1, 28
    4b88:	c0101618 	andsgt	r1, r0, r8, lsl r6
    4b8c:	1c083010 	stcne	0, cr3, [r8], {16}
    4b90:	10604704 	rsbne	r4, r0, r4, lsl #14
    4b94:	10063c10 	andne	r3, r6, r0, lsl ip
    4b98:	1461c7f1 	strbtne	ip, [r1], #-2033	; 0xfffff80f
    4b9c:	c8164efa 	ldmdagt	r6, {r1, r3, r4, r5, r6, r7, r9, sl, fp, lr}
    4ba0:	81719166 	cmnhi	r1, r6, ror #2
    4ba4:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4ba8:	4b011c16 	blmi	4bc08 <__ccfg+0x2bc60>
    4bac:	b0319176 	eorslt	r9, r1, r6, ror r1
    4bb0:	c008c006 	andgt	ip, r8, r6
    4bb4:	81617000 	cmnhi	r1, r0
    4bb8:	3d813181 	stfccs	f3, [r1, #516]	; 0x204
    4bbc:	39808240 	stmibcc	r0, {r6, r9, pc}
    4bc0:	1cf11801 	ldclne	8, cr1, [r1], #4
    4bc4:	14014b17 	strne	r4, [r1], #-2839	; 0xfffff4e9
    4bc8:	22c080b0 	sbccs	r8, r0, #176	; 0xb0
    4bcc:	b0bc4717 	adcslt	r4, ip, r7, lsl r7
    4bd0:	ef90b033 	svc	0x0090b033
    4bd4:	930f92f1 	movwls	r9, #62193	; 0xf2f1
    4bd8:	7000673c 	andvc	r6, r0, ip, lsr r7
    4bdc:	b063a003 	rsblt	sl, r3, r3
    4be0:	b0efb064 	rsclt	fp, pc, r4, rrx
    4be4:	71006556 	tstvc	r0, r6, asr r5
    4be8:	22008040 	andcs	r8, r0, #64	; 0x40
    4bec:	b064472b 	rsblt	r4, r4, fp, lsr #14
    4bf0:	a0ef652a 	rscge	r6, pc, sl, lsr #10
    4bf4:	80407100 	subhi	r7, r0, r0, lsl #2
    4bf8:	472b2200 	strmi	r2, [fp, -r0, lsl #4]!
    4bfc:	b003b064 	andlt	fp, r3, r4, rrx
    4c00:	82016238 	andhi	r6, r1, #56, 4	; 0x80000003
    4c04:	31828162 	orrcc	r8, r2, r2, ror #2
    4c08:	ef803d82 	svc	0x00803d82
    4c0c:	930292f1 	movwls	r9, #8945	; 0x22f1
    4c10:	a003673c 	andge	r6, r3, ip, lsr r7
    4c14:	61e66556 	mvnvs	r6, r6, asr r5
    4c18:	646380a2 	strbtvs	r8, [r3], #-162	; 0xffffff5e
    4c1c:	b05061e6 	subslt	r6, r0, r6, ror #3
    4c20:	61e67100 	mvnvs	r7, r0, lsl #2
    4c24:	82d092e0 	sbcshi	r9, r0, #224, 4
    4c28:	473d2200 	ldrmi	r2, [sp, -r0, lsl #4]!
    4c2c:	7000b2c0 	andvc	fp, r0, r0, asr #5
    4c30:	22f080a0 	rscscs	r8, r0, #160	; 0xa0
    4c34:	b0304359 	eorslt	r4, r0, r9, asr r3
    4c38:	3162c102 	cmncc	r2, r2, lsl #2
    4c3c:	80a0c001 	adchi	ip, r0, r1
    4c40:	43521e00 	cmpmi	r2, #0, 28
    4c44:	435322f0 	cmpmi	r3, #240, 4
    4c48:	3160f5a0 	msrcc	SPSR_, r0, lsr #11
    4c4c:	63533960 	cmpvs	r3, #96, 18	; 0x180000
    4c50:	1a101020 	bne	408cd8 <__ccfg+0x3e8d30>
    4c54:	6e236f13 	mcrvs	15, 1, r6, cr3, cr3, {0}
    4c58:	16121611 			; <UNDEFINED> instruction: 0x16121611
    4c5c:	70006b54 	andvc	r6, r0, r4, asr fp

00004c60 <patchImageGenfsk>:
    4c60:	210004ad 	smlatbcs	r0, sp, r4, r0
    4c64:	21000449 	tstcs	r0, r9, asr #8
    4c68:	2100047d 	tstcs	r0, sp, ror r4
    4c6c:	21000481 	smlabbcs	r0, r1, r4, r0
    4c70:	21000511 	tstcs	r0, r1, lsl r5
    4c74:	21000591 			; <UNDEFINED> instruction: 0x21000591
    4c78:	21000641 	tstcs	r0, r1, asr #12
    4c7c:	4710b5f8 			; <UNDEFINED> instruction: 0x4710b5f8
    4c80:	460eb5f8 			; <UNDEFINED> instruction: 0x460eb5f8
    4c84:	25012100 	strcs	r2, [r1, #-256]	; 0xffffff00
    4c88:	473004ad 	ldrmi	r0, [r0, -sp, lsr #9]!
    4c8c:	7803480a 	stmdavc	r3, {r1, r3, fp, lr}
    4c90:	f80ff000 			; <UNDEFINED> instruction: 0xf80ff000
    4c94:	d00b079b 	mulle	fp, fp, r7
    4c98:	78204c12 	stmdavc	r0!, {r1, r4, sl, fp, lr}
    4c9c:	d00728ff 	strdle	r2, [r7], -pc	; <UNPREDICTABLE>
    4ca0:	702121ff 	strdvc	r2, [r1], -pc	; <UNPREDICTABLE>
    4ca4:	240f490e 	strcs	r4, [pc], #-2318	; 4cac <patchImageGenfsk+0x4c>
    4ca8:	43200224 			; <UNDEFINED> instruction: 0x43200224
    4cac:	82c83160 	sbchi	r3, r8, #96, 2
    4cb0:	b5f8bdf8 	ldrblt	fp, [r8, #3576]!	; 0xdf8
    4cb4:	47004801 	strmi	r4, [r0, -r1, lsl #16]
    4cb8:	2100026b 	tstcs	r0, fp, ror #4
    4cbc:	00004ce5 	andeq	r4, r0, r5, ror #25
    4cc0:	e0014809 	and	r4, r1, r9, lsl #16
    4cc4:	0c004808 	stceq	8, cr4, [r0], {8}
    4cc8:	49054c06 	stmdbmi	r5, {r1, r2, sl, fp, lr}
    4ccc:	2aff7822 	bcs	fffe2d5c <_estack+0xdffddd5c>
    4cd0:	7acad101 	bvc	ff2b90dc <_estack+0xdf2b40dc>
    4cd4:	31607022 	cmncc	r0, r2, lsr #32
    4cd8:	467082c8 	ldrbtmi	r8, [r0], -r8, asr #5
    4cdc:	47001c80 	strmi	r1, [r0, -r0, lsl #25]
    4ce0:	40086200 	andmi	r6, r8, r0, lsl #4
    4ce4:	210006a4 	smlatbcs	r0, r4, r6, r0
    4ce8:	08080f07 	stmdaeq	r8, {r0, r1, r2, r8, r9, sl, fp}
    4cec:	4708b4f0 			; <UNDEFINED> instruction: 0x4708b4f0
    4cf0:	4603b570 			; <UNDEFINED> instruction: 0x4603b570
    4cf4:	29014615 	stmdbcs	r1, {r0, r2, r4, r9, sl, lr}
    4cf8:	2900d006 	stmdbcs	r0, {r1, r2, ip, lr, pc}
    4cfc:	4a11d006 	bmi	478d1c <__ccfg+0x458d74>
    4d00:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4d04:	bd70ffbb 	ldcllt	15, cr15, [r0, #-748]!	; 0xfffffd14
    4d08:	e000480f 	and	r4, r0, pc, lsl #16
    4d0c:	2405480f 	strcs	r4, [r5], #-2063	; 0xfffff7f1
    4d10:	d8034283 	stmdale	r3, {r0, r1, r7, r9, lr}
    4d14:	1e640840 	cdpne	8, 6, cr0, cr4, cr0, {2}
    4d18:	dcf92c00 	ldclle	12, cr2, [r9]
    4d1c:	200140e3 	andcs	r4, r1, r3, ror #1
    4d20:	18180340 	ldmdane	r8, {r6, r8, r9}
    4d24:	29010b82 	stmdbcs	r1, {r1, r7, r8, r9, fp}
    4d28:	4906d007 	stmdbmi	r6, {r0, r1, r2, ip, lr, pc}
    4d2c:	31802300 	orrcc	r2, r0, r0, lsl #6
    4d30:	f7ff4628 			; <UNDEFINED> instruction: 0xf7ff4628
    4d34:	b2e0ffa5 	rsclt	pc, r0, #660	; 0x294
    4d38:	4902bd70 	stmdbmi	r2, {r4, r5, r6, r8, sl, fp, ip, sp, pc}
    4d3c:	316c4b04 	cmncc	ip, r4, lsl #22
    4d40:	0000e7f6 	strdeq	lr, [r0], -r6
    4d44:	00005c83 	andeq	r5, r0, r3, lsl #25
    4d48:	2386bca0 	orrcs	fp, r6, #160, 24	; 0xa000
    4d4c:	230d8300 	movwcs	r8, #54016	; 0xd300
    4d50:	21000674 	tstcs	r0, r4, ror r6
    4d54:	4e1ab5f8 	mrcmi	5, 0, fp, cr10, cr8, {7}
    4d58:	6b714605 	blvs	1c56574 <__ccfg+0x1c365cc>
    4d5c:	09cc4819 	stmibeq	ip, {r0, r3, r4, fp, lr}^
    4d60:	2d0001e4 	stfcss	f0, [r0, #-912]	; 0xfffffc70
    4d64:	4918d011 	ldmdbmi	r8, {r0, r4, ip, lr, pc}
    4d68:	29027809 	stmdbcs	r2, {r0, r3, fp, ip, sp, lr}
    4d6c:	7b00d00f 	blvc	38db0 <__ccfg+0x18e08>
    4d70:	b6724304 	ldrbtlt	r4, [r2], -r4, lsl #6
    4d74:	4f152001 	svcmi	0x00152001
    4d78:	47b80240 	ldrmi	r0, [r8, r0, asr #4]!
    4d7c:	38204811 	stmdacc	r0!, {r0, r4, fp, lr}
    4d80:	09c18800 	stmibeq	r1, {fp, pc}^
    4d84:	d00407c9 	andle	r0, r4, r9, asr #15
    4d88:	7ac0e016 	bvc	ff03cde8 <_estack+0xdf037de8>
    4d8c:	7b40e7f0 	blvc	103ed54 <__ccfg+0x101edac>
    4d90:	490fe7ee 	stmdbmi	pc, {r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}	; <UNPREDICTABLE>
    4d94:	61cc6374 	bicvs	r6, ip, r4, ror r3
    4d98:	07c00a40 	strbeq	r0, [r0, r0, asr #20]
    4d9c:	2001d00c 	andcs	sp, r1, ip
    4da0:	6b310380 	blvs	c45ba8 <__ccfg+0xc25c00>
    4da4:	d0012d00 	andle	r2, r1, r0, lsl #26
    4da8:	e0004301 	and	r4, r0, r1, lsl #6
    4dac:	46084381 	strmi	r4, [r8], -r1, lsl #7
    4db0:	49076331 	stmdbmi	r7, {r0, r4, r5, r8, r9, sp, lr}
    4db4:	63483940 	movtvs	r3, #35136	; 0x8940
    4db8:	47b82000 	ldrmi	r2, [r8, r0]!
    4dbc:	bdf8b662 	ldcllt	6, cr11, [r8, #392]!	; 0x188
    4dc0:	21000280 	smlabbcs	r0, r0, r2, r0
    4dc4:	21000088 	smlabbcs	r0, r8, r0, r0
    4dc8:	2100029b 			; <UNDEFINED> instruction: 0x2100029b
    4dcc:	00003f7b 	andeq	r3, r0, fp, ror pc
    4dd0:	40044040 	andmi	r4, r4, r0, asr #32
    4dd4:	4a22b510 	bmi	8b221c <__ccfg+0x892274>
    4dd8:	61512100 	cmpvs	r1, r0, lsl #2
    4ddc:	68894921 	stmvs	r9, {r0, r5, r8, fp, lr}
    4de0:	d40900c9 	strle	r0, [r9], #-201	; 0xffffff37
    4de4:	4b204921 	blmi	817270 <__ccfg+0x7f72c8>
    4de8:	429805ca 	addsmi	r0, r8, #847249408	; 0x32800000
    4dec:	d8016b4b 	stmdale	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}
    4df0:	e0004313 	and	r4, r0, r3, lsl r3
    4df4:	634b4393 	movtvs	r4, #45971	; 0xb393
    4df8:	f7ff491d 			; <UNDEFINED> instruction: 0xf7ff491d
    4dfc:	bd10ff77 	ldclt	15, cr15, [r0, #-476]	; 0xfffffe24
    4e00:	4d1ab538 	cfldr32mi	mvfx11, [sl, #-224]	; 0xffffff20
    4e04:	28007f28 	stmdacs	r0, {r3, r5, r8, r9, sl, fp, ip, sp, lr}
    4e08:	481ad127 	ldmdami	sl, {r0, r1, r2, r5, r8, ip, lr, pc}
    4e0c:	09c08800 	stmibeq	r0, {fp, pc}^
    4e10:	d12207c0 	smlawtle	r2, r0, r7, r0
    4e14:	69604c12 	stmdbvs	r0!, {r1, r4, sl, fp, lr}^
    4e18:	d11e2800 	tstle	lr, r0, lsl #16
    4e1c:	f0004668 			; <UNDEFINED> instruction: 0xf0004668
    4e20:	4668f845 	strbtmi	pc, [r8], -r5, asr #16	; <UNPREDICTABLE>
    4e24:	28017800 	stmdacs	r1, {fp, ip, sp, lr}
    4e28:	4668d117 			; <UNDEFINED> instruction: 0x4668d117
    4e2c:	28107840 	ldmdacs	r0, {r6, fp, ip, sp, lr}
    4e30:	2008d213 	andcs	sp, r8, r3, lsl r2
    4e34:	6a686160 	bvs	1a1d3bc <__ccfg+0x19fd414>
    4e38:	01400940 	cmpeq	r0, r0, asr #18
    4e3c:	4a0e6020 	bmi	39cec4 <__ccfg+0x37cf1c>
    4e40:	62d12100 	sbcsvs	r2, r1, #0, 2
    4e44:	21024a0d 	tstcs	r2, sp, lsl #20
    4e48:	21016011 	tstcs	r1, r1, lsl r0
    4e4c:	60204308 	eorvs	r4, r0, r8, lsl #6
    4e50:	43082103 	movwmi	r2, #33027	; 0x8103
    4e54:	60206268 	eorvs	r6, r0, r8, ror #4
    4e58:	4809bd38 	stmdami	r9, {r3, r4, r5, r8, sl, fp, ip, sp, pc}
    4e5c:	bd384780 	ldclt	7, cr4, [r8, #-512]!	; 0xfffffe00
    4e60:	40044000 	andmi	r4, r4, r0
    4e64:	21000018 	tstcs	r0, r8, lsl r0
    4e68:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    4e6c:	21000280 	smlabbcs	r0, r0, r2, r0
    4e70:	000068cf 	andeq	r6, r0, pc, asr #17
    4e74:	21000068 	tstcs	r0, r8, rrx
    4e78:	40041100 	andmi	r1, r4, r0, lsl #2
    4e7c:	e000e280 	and	lr, r0, r0, lsl #5
    4e80:	00003bc3 	andeq	r3, r0, r3, asr #23
    4e84:	28004907 	stmdacs	r0, {r0, r1, r2, r8, fp, lr}
    4e88:	2004d000 	andcs	sp, r4, r0
    4e8c:	b6724a06 	ldrbtlt	r4, [r2], -r6, lsl #20
    4e90:	07c97809 	strbeq	r7, [r9, r9, lsl #16]
    4e94:	5810d001 	ldmdapl	r0, {r0, ip, lr, pc}
    4e98:	2080e000 	addcs	lr, r0, r0
    4e9c:	b240b662 	sublt	fp, r0, #102760448	; 0x6200000
    4ea0:	00004770 	andeq	r4, r0, r0, ror r7
    4ea4:	2100026b 	tstcs	r0, fp, ror #4
    4ea8:	40046058 	andmi	r6, r4, r8, asr r0
    4eac:	4801b403 	stmdami	r1, {r0, r1, sl, ip, sp, pc}
    4eb0:	bd019001 	stclt	0, cr9, [r1, #-4]
    4eb4:	00006fa5 	andeq	r6, r0, r5, lsr #31
    4eb8:	00000000 	andeq	r0, r0, r0
    4ebc:	00030001 	andeq	r0, r3, r1
    4ec0:	001f000a 	andseq	r0, pc, sl
    4ec4:	00eb0059 	rsceq	r0, fp, r9, asr r0
    4ec8:	04ea0239 	strbteq	r0, [sl], #569	; 0x239
    4ecc:	129709f9 	addsne	r0, r7, #4079616	; 0x3e4000
    4ed0:	32a11feb 	adccc	r1, r1, #940	; 0x3ac
    4ed4:	660a4a78 			; <UNDEFINED> instruction: 0x660a4a78
    4ed8:	9e8c82fa 	mcrls	2, 4, r8, cr12, cr10, {7}
    4edc:	c917b663 	ldmdbgt	r7, {r0, r1, r5, r6, r9, sl, ip, sp, pc}
    4ee0:	deedd664 	cdple	6, 14, cr13, cr13, cr4, {3}
    4ee4:	e5e0e3c1 	strb	lr, [r0, #961]!	; 0x3c1
    4ee8:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00004eec <ratable>:
    4eec:	12c5000b 	sbcne	r0, r5, #11
    4ef0:	2de00007 	stclcs	0, cr0, [r0, #28]!
    4ef4:	8000000f 	andhi	r0, r0, pc
    4ef8:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
    4efc:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
    4f00:	6374206c 	cmnvs	r4, #108	; 0x6c
    4f04:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
    4f08:	756e5f65 	strbvc	r5, [lr, #-3941]!	; 0xfffff09b
    4f0c:	00006c6c 	andeq	r6, r0, ip, ror #24

00004f10 <plug_null>:
    4f10:	00002819 	andeq	r2, r0, r9, lsl r8
    4f14:	000027c1 	andeq	r2, r0, r1, asr #15
    4f18:	000027e5 	andeq	r2, r0, r5, ror #15
    4f1c:	00002809 	andeq	r2, r0, r9, lsl #16
    4f20:	00002811 	andeq	r2, r0, r1, lsl r8
    4f24:	00002815 	andeq	r2, r0, r5, lsl r8
    4f28:	00000000 	andeq	r0, r0, r0
    4f2c:	00000001 	andeq	r0, r0, r1

Disassembly of section .data:

20000000 <sfd>:
int sfd = -1;
20000000:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000004 <__pi_seed>:
lword	__pi_seed = 327672838L;
20000004:	1387e406 	orrne	lr, r7, #100663296	; 0x6000000

20000008 <cmd_cs>:
static rfc_CMD_PROP_CS_t cmd_cs = {
20000008:	00003805 	andeq	r3, r0, r5, lsl #16
2000000c:	200000a0 	andcs	r0, r0, r0, lsr #1
20000010:	00000000 	andeq	r0, r0, r0
20000014:	00000300 	andeq	r0, r0, r0, lsl #6
20000018:	0404c60b 	streq	ip, [r4], #-1547	; 0xfffff9f5
2000001c:	04330080 	ldrteq	r0, [r3], #-128	; 0xffffff80
20000020:	00002000 	andeq	r2, r0, r0

20000024 <cmd_srt>:
static rfc_CMD_SYNC_START_RAT_t	cmd_srt = { .commandNo = CMD_SYNC_START_RAT };
20000024:	0000080a 	andeq	r0, r0, sl, lsl #16
	...

20000038 <offdelay>:
		offdelay = RADIO_DEFAULT_OFFDELAY;
20000038:	 	andeq	r0, r2, r0, lsl #2

2000003a <vrate>:
2000003a:	 	stmdaeq	r3, {r1}

2000003c <RF_cmdFs>:
2000003c:	00000803 	andeq	r0, r0, r3, lsl #16
	...
20000048:	03640100 	cmneq	r4, #0, 2
	...

20000054 <RF_cmdPropRadioDivSetup>:
20000054:	00003807 	andeq	r3, r0, r7, lsl #16
	...
20000060:	03210100 			; <UNDEFINED> instruction: 0x03210100
20000064:	0080000f 	addeq	r0, r0, pc
20000068:	00a00424 	adceq	r0, r0, r4, lsr #8
2000006c:	bc2b0008 	stclt	0, cr0, [fp], #-32	; 0xffffffe0
20000070:	200000b8 	strhcs	r0, [r0], -r8
20000074:	80000364 	andhi	r0, r0, r4, ror #6
20000078:	00000005 	andeq	r0, r0, r5

2000007c <RF_cmdPropRx>:
2000007c:	00003802 	andeq	r3, r0, r2, lsl #16
	...
20000088:	88180100 	ldmdahi	r8, {r8}
2000008c:	930b51de 	movwls	r5, #45534	; 0xb1de
20000090:	01bbaa7d 			; <UNDEFINED> instruction: 0x01bbaa7d
	...

200000a0 <RF_cmdPropTx>:
200000a0:	00003801 	andeq	r3, r0, r1, lsl #16
	...
200000ac:	1e180100 	mufnee	f0, f0, f0
200000b0:	930b51de 	movwls	r5, #45534	; 0xb1de
200000b4:	00000000 	andeq	r0, r0, r0

200000b8 <pOverrides>:
200000b8:	00001807 	andeq	r1, r0, r7, lsl #16
200000bc:	00374038 	eorseq	r4, r7, r8, lsr r0
200000c0:	000684a3 	andeq	r8, r6, r3, lsr #9
200000c4:	7f004020 	svcvc	0x00004020
200000c8:	00404064 	subeq	r4, r0, r4, rrx
200000cc:	b1070503 	tstlt	r7, r3, lsl #10
200000d0:	05330523 	ldreq	r0, [r3, #-1315]!	; 0xfffffadd
200000d4:	0a480583 	beq	212016e8 <_estack+0x11fc6e8>
200000d8:	7ab80603 	bvc	1ee018ec <__ccfg+0x1ede1944>
200000dc:	849f0002 	ldrhi	r0, [pc], #2	; 200000e4 <pOverrides+0x2c>
200000e0:	c7440002 	strbgt	r0, [r4, -r2]
200000e4:	02010403 	andeq	r0, r1, #50331648	; 0x3000000
200000e8:	00108463 	andseq	r8, r0, r3, ror #8
200000ec:	04b00243 	ldrteq	r0, [r0], #579	; 0x243
200000f0:	7ddf0002 	ldclvc	0, cr0, [pc, #8]	; 20000100 <pOverrides+0x48>
200000f4:	00038883 	andeq	r8, r3, r3, lsl #17
200000f8:	35f16084 	ldrbcc	r6, [r1, #132]!	; 0x84
200000fc:	411a6088 	tstmi	sl, r8, lsl #1
20000100:	8213608c 	andshi	r6, r3, #140	; 0x8c
20000104:	00fb88a3 	rscseq	r8, fp, r3, lsr #17
20000108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
2000010c:	00000000 	andeq	r0, r0, r0

20000110 <_impure_ptr>:
20000110:	20000118 	andcs	r0, r0, r8, lsl r1
20000114:	00000000 	andeq	r0, r0, r0

20000118 <impure_data>:
20000118:	00000000 	andeq	r0, r0, r0
2000011c:	20000404 	andcs	r0, r0, r4, lsl #8
20000120:	2000046c 	andcs	r0, r0, ip, ror #8
20000124:	200004d4 	ldrdcs	r0, [r0], -r4
	...
200001c0:	00000001 	andeq	r0, r0, r1
200001c4:	00000000 	andeq	r0, r0, r0
200001c8:	abcd330e 	blge	1f34ce08 <__ccfg+0x1f32ce60>
200001cc:	e66d1234 			; <UNDEFINED> instruction: 0xe66d1234
200001d0:	0005deec 	andeq	sp, r5, ip, ror #29
200001d4:	0000000b 	andeq	r0, r0, fp
	...

Disassembly of section .bss:

20000540 <receiverId.6917>:
	...

20000542 <setdel>:
	...

20000544 <urates>:
static word urates [N_UARTS];
20000544:	00000000 	andeq	r0, r0, r0

20000548 <__PCB>:
20000548:	00000000 	andeq	r0, r0, r0

2000054c <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
2000054c:	00000000 	andeq	r0, r0, r0

20000550 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000550:	00000000 	andeq	r0, r0, r0

20000554 <mevent>:
20000554:	00000000 	andeq	r0, r0, r0

20000558 <mnfree>:
20000558:	00000000 	andeq	r0, r0, r0

2000055c <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
2000055c:	00000000 	andeq	r0, r0, r0

20000560 <descriptors>:
	...

20000580 <oqueues>:
	...

2000058c <physical>:
	...

20000598 <physinfo>:
	...

200005a4 <plugins>:
	...

200005b0 <dopen>:
	...

200005b1 <dstat>:
	...

200005b2 <bckf_timer>:
	...

200005b4 <channel>:
200005b4:	00000000 	andeq	r0, r0, r0

200005b8 <drvprcs>:
static aword drvprcs, qevent;
200005b8:	00000000 	andeq	r0, r0, r0

200005bc <dstate>:
200005bc:	00000000 	andeq	r0, r0, r0

200005c0 <paylen>:
static	int paylen = 0;			// Current TX payload length
200005c0:	00000000 	andeq	r0, r0, r0

200005c4 <physid>:
static word	physid,
200005c4:	00000000 	andeq	r0, r0, r0

200005c8 <qevent>:
static aword drvprcs, qevent;
200005c8:	00000000 	andeq	r0, r0, r0

200005cc <rbuffl>:
200005cc:	00000000 	andeq	r0, r0, r0

200005d0 <rfTrim>:
	...

200005e0 <rxstat>:
	...

200005ec <statid>:
	...

200005ee <txtries>:
	...

200005f0 <ndsc_null>:
200005f0:	00000000 	andeq	r0, r0, r0

200005f4 <len.5699>:
200005f4:	00000000 	andeq	r0, r0, r0

200005f8 <ptr.5698>:
200005f8:	00000000 	andeq	r0, r0, r0

200005fc <__inpline>:
char *__inpline = NULL;
200005fc:	00000000 	andeq	r0, r0, r0

20000600 <len.5700>:
20000600:	00000000 	andeq	r0, r0, r0

20000604 <ptr.5699>:
20000604:	00000000 	andeq	r0, r0, r0

20000608 <oscHfGlobals>:
	...

2000061c <powerQualGlobals>:
	...

20000628 <nodeId>:
	...

20000630 <database>:
	...

20000b30 <messagePtr>:
message * messagePtr;
20000b30:	00000000 	andeq	r0, r0, r0

20000b34 <currentProtocol>:
	...

20000b36 <groupId>:
	...

20000b38 <recordCount>:
int recordCount;
20000b38:	00000000 	andeq	r0, r0, r0

20000b3c <__pi_uart>:
	...

20000b44 <system_event_count>:
20000b44:	00000000 	andeq	r0, r0, r0

20000b48 <entropy>:
20000b48:	00000000 	andeq	r0, r0, r0

20000b4c <__pi_mintk>:
	...

20000b4e <__pi_old>:
	...

20000b50 <__pi_systat>:
	...

20000b58 <__pi_new>:
20000b58:	00000000 	andeq	r0, r0, r0

20000b5c <__pi_utims>:
	...

20000b6c <__pi_curr>:
20000b6c:	00000000 	andeq	r0, r0, r0

20000b70 <errno>:
20000b70:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

20000b74 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000131c 	andeq	r1, r0, ip, lsl r3
       4:	00000003 	andeq	r0, r0, r3
}
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	000000bd 	strheq	r0, [r0], -sp
      10:	0006220c 	andeq	r2, r6, ip, lsl #4
      14:	00066800 	andeq	r6, r6, r0, lsl #16
      18:	00005000 	andeq	r5, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000008de 	ldrdeq	r0, [r0], -lr
      2c:	00083303 	andeq	r3, r8, r3, lsl #6
      30:	172b0200 	strne	r0, [fp, -r0, lsl #4]!
      34:	00000038 	andeq	r0, r0, r8, lsr r0
      38:	dc080102 	stfles	f0, [r8], {2}
      3c:	02000008 	andeq	r0, r0, #8
			i = k;
      40:	07a30502 	streq	r0, [r3, r2, lsl #10]!
				j->Next = k;
      44:	d0030000 	andle	r0, r3, r0
      48:	02000003 	andeq	r0, r0, #3
}
      4c:	00521c39 	subseq	r1, r2, r9, lsr ip
      50:	02020000 	andeq	r0, r2, #0
      54:	0009aa07 	andeq	sl, r9, r7, lsl #20
		release;
      58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      5c:	000005ed 	andeq	r0, r0, sp, ror #11
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	0008f303 	andeq	pc, r8, r3, lsl #6
	b->u.pointers.tail =
      64:	1b4f0200 	blne	13c086c <__ccfg+0x13a08c4>
}
      68:	0000006c 	andeq	r0, r0, ip, rrx
		return NULL;
      6c:	97070402 	strls	r0, [r7, -r2, lsl #8]
      70:	02000003 	andeq	r0, r0, #3
      74:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00039207 	andeq	r9, r3, r7, lsl #4
      80:	077a0300 	ldrbeq	r0, [sl, -r0, lsl #6]!
      84:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
      88:	00007317 	andeq	r7, r0, r7, lsl r3
      8c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      90:	00746e69 	rsbseq	r6, r4, r9, ror #28
      94:	9c070402 	cfstrsls	mvf0, [r7], {2}
      98:	05000003 	streq	r0, [r0, #-3]
      9c:	00000896 	muleq	r0, r6, r8
      a0:	16015e03 	strne	r5, [r1], -r3, lsl #28
      a4:	00000094 	muleq	r0, r4, r0
      a8:	0009e603 	andeq	lr, r9, r3, lsl #12
      ac:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
      b0:	00000059 	andeq	r0, r0, r9, asr r0
      b4:	00026b03 	andeq	r6, r2, r3, lsl #22
      b8:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
      bc:	00000059 	andeq	r0, r0, r9, asr r0
      c0:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
      c4:	0000e203 	andeq	lr, r0, r3, lsl #4
fsm transmitter (message * messagePtr) {
      c8:	058b0700 	streq	r0, [fp, #1792]	; 0x700
      cc:	a7040000 	strge	r0, [r4, -r0]
      d0:	00009b0c 	andeq	r9, r0, ip, lsl #22
}
      d4:	07ea0700 	strbeq	r0, [sl, r0, lsl #14]!
      d8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	0000e213 	andeq	lr, r0, r3, lsl r2
      e0:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
      e4:	f2000000 	vhadd.s8	d0, d0, d0
      e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
        spkt [0] = 0;
      ec:	00000094 	muleq	r0, r4, r0
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      f0:	080a0003 	stmdaeq	sl, {r0, r1}
        *p = messagePtr->messageType; p++; // insert message type
      f4:	1609a204 	strne	sl, [r9], -r4, lsl #4
        *p = messagePtr->requestNumber; p++; // insert request number
      f8:	0b000001 	bleq	104 <_Min_Stack_Size+0x4>
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	00000326 	andeq	r0, r0, r6, lsr #6
        *p = messagePtr->destinationId; p++; // insert receiver ID
     100:	8d07a404 	cfstrshi	mvf10, [r7, #-16]
        tcv_endp (spkt);
     104:	00000000 	andeq	r0, r0, r0
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	0004ae0b 	andeq	sl, r4, fp, lsl #28
     10c:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
}
     110:	000000c0 	andeq	r0, r0, r0, asr #1
        finish;
     114:	a9030004 	stmdbge	r3, {r2}
     118:	04000006 	streq	r0, [r0], #-6
     11c:	00f203aa 	rscseq	r0, r2, sl, lsr #7
     120:	040c0000 	streq	r0, [ip], #-0
char randomNumber() {
     124:	0008650d 	andeq	r6, r8, sp, lsl #10
   srand((unsigned) time(&t));
     128:	00120400 	andseq	r0, r2, r0, lsl #8
     12c:	0000013c 	andeq	r0, r0, ip, lsr r1
   return (char)rand();
     130:	00094c0e 	andeq	r4, r9, lr, lsl #24
}
     134:	00012200 	andeq	r2, r1, r0, lsl #4
     138:	00010000 	andeq	r0, r1, r0
fsm root {
     13c:	00062d03 	andeq	r2, r6, r3, lsl #26
     140:	17160500 	ldrne	r0, [r6, -r0, lsl #10]
     144:	0000006c 	andeq	r0, r0, ip, rrx
     148:	0001fe03 	andeq	pc, r1, r3, lsl #28
     14c:	0d0c0600 	stceq	6, cr0, [ip, #-0]
     150:	0000008d 	andeq	r0, r0, sp, lsl #1
     154:	00055903 	andeq	r5, r5, r3, lsl #18
     158:	1b230500 	blne	8c1560 <__ccfg+0x8a15b8>
     15c:	00000148 	andeq	r0, r0, r8, asr #2
     160:	0002ab0f 	andeq	sl, r2, pc, lsl #22
     164:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
     168:	0001ba08 	andeq	fp, r1, r8, lsl #20
     16c:	0a400b00 	beq	1002d74 <__ccfg+0xfe2dcc>
        recordCount = 0;
     170:	36050000 	strcc	r0, [r5], -r0
        nodeId = 1;
     174:	0001ba13 	andeq	fp, r1, r3, lsl sl
     178:	5f100000 	svcpl	0x00100000
        groupId = 1;
     17c:	3705006b 	strcc	r0, [r5, -fp, rrx]
     180:	00008d07 	andeq	r8, r0, r7, lsl #26
        messagePtr = (message *) umalloc(sizeof(message));
     184:	450b0400 	strmi	r0, [fp, #-1024]	; 0xfffffc00
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	05000008 	streq	r0, [r0, #-8]
     18c:	008d0b37 	addeq	r0, sp, r7, lsr fp
     190:	0b080000 	bleq	200198 <__ccfg+0x1e01f0>
        tcv_plug(0, &plug_null);
     194:	00003eb0 			; <UNDEFINED> instruction: 0x00003eb0
     198:	8d143705 	ldchi	7, cr3, [r4, #-20]	; 0xffffffec
        sfd = tcv_open(WNONE, 0, 0);
     19c:	0c000000 	stceq	0, cr0, [r0], {-0}
     1a0:	0003be0b 	andeq	fp, r3, fp, lsl #28
     1a4:	1b370500 	blne	dc15ac <__ccfg+0xda1604>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	0000008d 	andeq	r0, r0, sp, lsl #1
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	0b380500 	bleq	e015b8 <__ccfg+0xde1610>
		if (sfd < 0) {
     1b4:	000001c0 	andeq	r0, r0, r0, asr #3
			diag("Cannot open tcv interface");
     1b8:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
     1bc:	00000160 	andeq	r0, r0, r0, ror #2
			halt();
     1c0:	00013c08 	andeq	r3, r1, r8, lsl #24
        currentProtocol = IDLE;
     1c4:	0001d000 	andeq	sp, r1, r0
     1c8:	00940900 	addseq	r0, r4, r0, lsl #18
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	0008600f 	andeq	r6, r8, pc
     1d4:	3c052400 	cfstrscc	mvf2, [r5], {-0}
     1d8:	00025308 	andeq	r5, r2, r8, lsl #6
     1dc:	044e0b00 	strbeq	r0, [lr], #-2816	; 0xfffff500
     1e0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
        ser_outf(Options, menu);
     1e4:	00008d07 	andeq	r8, r0, r7, lsl #26
     1e8:	580b0000 	stmdapl	fp, {}	; <UNPREDICTABLE>
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	05000003 	streq	r0, [r0, #-3]
     1f0:	008d073f 	addeq	r0, sp, pc, lsr r7
     1f4:	0b040000 	bleq	1001fc <__ccfg+0xe0254>
        switch (choice)
     1f8:	00000301 	andeq	r0, r0, r1, lsl #6
     1fc:	8d074005 	stchi	0, cr4, [r7, #-20]	; 0xffffffec
     200:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     204:	00050f0b 	andeq	r0, r5, fp, lsl #30
     208:	07410500 	strbeq	r0, [r1, -r0, lsl #10]
     20c:	0000008d 	andeq	r0, r0, sp, lsl #1
     210:	071d0b0c 	ldreq	r0, [sp, -ip, lsl #22]
     214:	42050000 	andmi	r0, r5, #0
     218:	00008d07 	andeq	r8, r0, r7, lsl #26
     21c:	040b1000 	streq	r1, [fp], #-0
     220:	05000008 	streq	r0, [r0, #-8]
     224:	008d0743 	addeq	r0, sp, r3, asr #14
        proceed Menu_Header;
     228:	0b140000 	bleq	500230 <__ccfg+0x4e0288>
     22c:	000002c6 	andeq	r0, r0, r6, asr #5
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	8d074405 	cfstrshi	mvf4, [r7, #-20]	; 0xffffffec
     234:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	0004570b 	andeq	r5, r4, fp, lsl #14
     23c:	07450500 	strbeq	r0, [r5, -r0, lsl #10]
        proceed Menu_Header;
     240:	0000008d 	andeq	r0, r0, sp, lsl #1
     244:	06c70b1c 			; <UNDEFINED> instruction: 0x06c70b1c
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	46050000 	strmi	r0, [r5], -r0
     24c:	00008d07 	andeq	r8, r0, r7, lsl #26
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	12002000 	andne	r2, r0, #0
     254:	00000061 	andeq	r0, r0, r1, rrx
     258:	4f050108 	svcmi	0x00050108
    if (node < 1 || node > 25) {
     25c:	00029808 	andeq	r9, r2, r8, lsl #16
     260:	09740b00 	ldmdbeq	r4!, {r8, r9, fp}^
            proceed Set_Node_ID;
     264:	50050000 	andpl	r0, r5, r0
        proceed Menu_Header;
     268:	00029809 	andeq	r9, r2, r9, lsl #16
     26c:	c00b0000 	andgt	r0, fp, r0
        currentProtocol = DISCOVERY_REQUEST;
     270:	05000008 	streq	r0, [r0, #-8]
     274:	02980951 	addseq	r0, r8, #1327104	; 0x144000
        receiverId = 0;
     278:	13800000 	orrne	r0, r0, #0
        proceed Transmit_Message;
     27c:	000009dd 	ldrdeq	r0, [r0], -sp
        currentProtocol = CREATE_RECORD;
     280:	3c0a5305 	stccc	3, cr5, [sl], {5}
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	00000001 	andeq	r0, r0, r1
     288:	0a2b1301 	beq	ac4e94 <__ccfg+0xaa4eec>
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	56050000 	strpl	r0, [r5], -r0
     290:	00013c0a 	andeq	r3, r1, sl, lsl #24
     294:	00010400 	andeq	r0, r1, r0, lsl #8
    if (node < 1 || node > 25) {
     298:	00012208 	andeq	r2, r1, r8, lsl #4
     29c:	0002a800 	andeq	sl, r2, r0, lsl #16
            proceed Create_Record;
     2a0:	00940900 	addseq	r0, r4, r0, lsl #18
     2a4:	001f0000 	andseq	r0, pc, r0
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	00078a12 	andeq	r8, r7, r2, lsl sl
     2ac:	05019000 	streq	r9, [r1, #-0]
     2b0:	02eb0862 	rsceq	r0, fp, #6422528	; 0x620000
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	400b0000 	andmi	r0, fp, r0
     2b8:	0500000a 	streq	r0, [r0, #-10]
     2bc:	02eb1263 	rsceq	r1, fp, #805306374	; 0x30000006
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	0b000000 	bleq	2c8 <root+0x18c>
        proceed Transmit_Message;
     2c4:	00000466 	andeq	r0, r0, r6, ror #8
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	8d066405 	cfstrshi	mvf6, [r6, #-20]	; 0xffffffec
        proceed Transmit_Message;
     2cc:	04000000 	streq	r0, [r0], #-0
        currentProtocol = DELETE_RECORD;
     2d0:	0002730b 	andeq	r7, r2, fp, lsl #6
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	09660500 	stmdbeq	r6!, {r8, sl}^
        currentProtocol = DELETE_RECORD;
     2d8:	000002f1 	strdeq	r0, [r0], -r1
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	00610b08 	rsbeq	r0, r1, r8, lsl #22
        proceed Get_Receiving_Node;
     2e0:	67050000 	strvs	r0, [r5, -r0]
        currentProtocol = RETRIEVE_RECORD;
     2e4:	0002531e 	andeq	r5, r2, lr, lsl r3
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	11008800 	tstne	r0, r0, lsl #16
        currentProtocol = RETRIEVE_RECORD;
     2ec:	0002a804 	andeq	sl, r2, r4, lsl #16
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	03010800 	movweq	r0, #6144	; 0x1800
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	03010000 	movweq	r0, #4096	; 0x1000
     2f8:	94090000 	strls	r0, [r9], #-0
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	1f000000 	svcne	0x00000000
     300:	07041100 	streq	r1, [r4, -r0, lsl #2]
     304:	14000003 	strne	r0, [r0], #-3
    if (node < 1 || node > 25) {
     308:	093e0f01 	ldmdbeq	lr!, {r0, r8, r9, sl, fp}
     30c:	05080000 	streq	r0, [r8, #-0]
            proceed Prompt_Recieving_Node;
     310:	0331087a 	teqeq	r1, #7995392	; 0x7a0000
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	040b0000 	streq	r0, [fp], #-0
     318:	05000006 	streq	r0, [r0, #-6]
        char desiredRecordIndex = -1;
     31c:	0331117b 	teqeq	r1, #-1073741794	; 0xc000001e
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	0b000000 	bleq	328 <root+0x1ec>
     324:	000018cf 	andeq	r1, r0, pc, asr #17
        char desiredRecordIndex = -1;
     328:	8d067c05 	stchi	12, cr7, [r6, #-20]	; 0xffffffec
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	04000000 	streq	r0, [r0], #-0
        messagePtr->recordIndex = desiredRecordIndex;
     330:	38041100 	stmdacc	r4, {r8, ip}
     334:	0f000000 	svceq	0x00000000
     338:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
        proceed Transmit_Message;
     33c:	08ba0568 	ldmeq	sl!, {r3, r5, r6, r8, sl}
        messagePtr -> senderGroupId = groupId;
     340:	0000047a 	andeq	r0, r0, sl, ror r4
     344:	00705f10 	rsbseq	r5, r0, r0, lsl pc
     348:	3112bb05 	tstcc	r2, r5, lsl #22
        messagePtr -> messageType = currentProtocol;
     34c:	00000003 	andeq	r0, r0, r3
     350:	00725f10 	rsbseq	r5, r2, r0, lsl pc
        messagePtr -> requestNumber = randomNumber();
     354:	8d07bc05 	stchi	12, cr11, [r7, #-20]	; 0xffffffec
        messagePtr -> senderId = nodeId;
     358:	04000000 	streq	r0, [r0], #-0
     35c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
        call transmitter(messagePtr, Menu_Header);
     360:	8d07bd05 	stchi	13, cr11, [r7, #-20]	; 0xffffffec
        messagePtr -> destinationId = receiverId;
     364:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     368:	0001e90b 	andeq	lr, r1, fp, lsl #18
        call transmitter(messagePtr, Menu_Header);
     36c:	09be0500 	ldmibeq	lr!, {r8, sl}
     370:	0000003f 	andeq	r0, r0, pc, lsr r0
     374:	06620b0c 	strbteq	r0, [r2], -ip, lsl #22
     378:	bf050000 	svclt	0x00050000
            proceed Set_Node_ID;
     37c:	00003f09 	andeq	r3, r0, r9, lsl #30
            break;
     380:	5f100e00 	svcpl	0x00100e00
            proceed Set_Node_ID;
     384:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
            proceed Find_Neighbours;
     388:	030911c0 	movweq	r1, #37312	; 0x91c0
            proceed Create_Record;
     38c:	0b100000 	bleq	400394 <__ccfg+0x3e03ec>
            proceed Delete_Record;
     390:	000001e0 	andeq	r0, r0, r0, ror #3
            proceed Retrieve_Record;
     394:	8d07c105 	stfhid	f4, [r7, #-20]	; 0xffffffec
            diag("Reset Local Storage");
     398:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
            break;
     39c:	0002780b 	andeq	r7, r2, fp, lsl #16
            diag("Reset Local Storage");
     3a0:	0ac80500 	beq	ff2017a8 <_estack+0xdf1fc7a8>
     3a4:	00000122 	andeq	r0, r0, r2, lsr #2
     3a8:	185f0b1c 	ldmdane	pc, {r2, r3, r4, r8, r9, fp}^	; <UNPREDICTABLE>
     3ac:	ca050000 	bgt	1403b4 <__ccfg+0x12040c>
     3b0:	0005ff09 	andeq	pc, r5, r9, lsl #30
     3b4:	260b2000 	strcs	r2, [fp], -r0
     3b8:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
     3bc:	062a09cc 	strteq	r0, [sl], -ip, asr #19
     3c0:	0b240000 	bleq	9003c8 <__ccfg+0x8e0420>
     3c4:	00000a51 	andeq	r0, r0, r1, asr sl
     3c8:	4f0dcf05 	svcmi	0x000dcf05
     3cc:	28000006 	stmdacs	r0, {r1, r2}
     3d0:	0018140b 	andseq	r1, r8, fp, lsl #8
     3d4:	09d00500 	ldmibeq	r0, {r8, sl}^
     3d8:	0000066a 	andeq	r0, r0, sl, ror #12
     3dc:	755f102c 	ldrbvc	r1, [pc, #-44]	; 3b8 <root+0x27c>
     3e0:	d3050062 	movwle	r0, #20578	; 0x5062
     3e4:	00030911 	andeq	r0, r3, r1, lsl r9
     3e8:	5f103000 	svcpl	0x00103000
     3ec:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
     3f0:	033112d4 	teqeq	r1, #212, 4	; 0x4000000d
     3f4:	10380000 	eorsne	r0, r8, r0
     3f8:	0072755f 	rsbseq	r7, r2, pc, asr r5
     3fc:	8d07d505 	cfstr32hi	mvfx13, [r7, #-20]	; 0xffffffec
     400:	3c000000 	stccc	0, cr0, [r0], {-0}
     404:	000a680b 	andeq	r6, sl, fp, lsl #16
static void devinit_uart (int devnum) {
     408:	11d80500 	bicsne	r0, r8, r0, lsl #10
	adddevfunc (ioreq_uart_a, devnum);
     40c:	00000670 	andeq	r0, r0, r0, ror r6
     410:	09f70b40 	ldmibeq	r7!, {r6, r8, r9, fp}^
void udelay (volatile word n) {
     414:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
     418:	00068011 	andeq	r8, r6, r1, lsl r0
	while (n) {
     41c:	5f104300 	svcpl	0x00104300
     420:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
}
     424:	030911dc 	movweq	r1, #37340	; 0x91dc
	while (n--);
     428:	0b440000 	bleq	1100430 <__ccfg+0x10e0488>
     42c:	00000857 	andeq	r0, r0, r7, asr r8
     430:	8d07df05 	stchi	15, cr13, [r7, #-20]	; 0xffffffec
		n--;
     434:	4c000000 	stcmi	0, cr0, [r0], {-0}
     438:	0004030b 	andeq	r0, r4, fp, lsl #6
     43c:	0ae00500 	beq	ff801844 <_estack+0xdf7fc844>
void mdelay (volatile word n) {
     440:	000000a8 	andeq	r0, r0, r8, lsr #1
     444:	432e0b50 			; <UNDEFINED> instruction: 0x432e0b50
	while (n) {
     448:	e3050000 	movw	r0, #20480	; 0x5000
     44c:	00049912 	andeq	r9, r4, r2, lsl r9
}
     450:	6f0b5400 	svcvs	0x000b5400
		udelay (999);
     454:	05000008 	streq	r0, [r0, #-8]
     458:	01540ce7 	cmpeq	r4, r7, ror #25
		n--;
     45c:	0b580000 	bleq	1600464 <__ccfg+0x15e04bc>
     460:	00000792 	muleq	r0, r2, r7
     464:	160ee905 	strne	lr, [lr], -r5, lsl #18
     468:	5c000001 	stcpl	0, cr0, [r0], {1}
void __pi_ondomain (lword d) {
     46c:	000a230b 	andeq	r2, sl, fp, lsl #6
     470:	07ea0500 	strbeq	r0, [sl, r0, lsl #10]!
		if (__pi_systat.effpdm > 1)
     474:	0000008d 	andeq	r0, r0, sp, lsl #1
     478:	01150064 	tsteq	r5, r4, rrx
			__pi_systat.effpdm = 1;
     47c:	0000008d 	andeq	r0, r0, sp, lsl #1
	PRCMPowerDomainOn (d);
     480:	00000499 	muleq	r0, r9, r4
     484:	00049916 	andeq	r9, r4, r6, lsl r9
     488:	01221600 			; <UNDEFINED> instruction: 0x01221600
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48c:	ed160000 	ldc	0, cr0, [r6, #-0]
     490:	16000005 	strne	r0, [r0], -r5
     494:	0000008d 	andeq	r0, r0, sp, lsl #1
	__pi_systat.ondmns |= d;
     498:	a4041100 	strge	r1, [r4], #-256	; 0xffffff00
     49c:	17000004 	strne	r0, [r0, -r4]
}
     4a0:	00000499 	muleq	r0, r9, r4
     4a4:	00436c18 	subeq	r6, r3, r8, lsl ip
void __pi_offdomain (lword d) {
     4a8:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
     4ac:	ed080265 	sfm	f0, 4, [r8, #-404]	; 0xfffffe6c
	PRCMPowerDomainOff (d);
     4b0:	19000005 	stmdbne	r0, {r0, r2}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	000006f8 	strdeq	r0, [r0], -r8
     4b8:	07026705 	streq	r6, [r2, -r5, lsl #14]
     4bc:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (d & PRCM_DOMAIN_RFCORE) {
     4c0:	05d21900 	ldrbeq	r1, [r2, #2304]	; 0x900
     4c4:	6c050000 	stcvs	0, cr0, [r5], {-0}
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	06dc0b02 	ldrbeq	r0, [ip], r2, lsl #22
     4cc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4d0:	00000255 	andeq	r0, r0, r5, asr r2
     4d4:	14026c05 	strne	r6, [r2], #-3077	; 0xfffff3fb
	__pi_systat.ondmns &= ~d;
     4d8:	000006dc 	ldrdeq	r0, [r0], -ip
     4dc:	0a571908 	beq	15c6904 <__ccfg+0x15a695c>
}
     4e0:	6c050000 	stcvs	0, cr0, [r5], {-0}
     4e4:	06dc1e02 	ldrbeq	r1, [ip], r2, lsl #28
void __pi_syserror (word ec, const char *m) {
     4e8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	00000461 	andeq	r0, r0, r1, ror #8
     4f0:	07026e05 	streq	r6, [r2, -r5, lsl #28]
  __ASM volatile ("cpsid i" : : : "memory");
     4f4:	0000008d 	andeq	r0, r0, sp, lsl #1
     4f8:	04131910 	ldreq	r1, [r3], #-2320	; 0xfffff6f0
     4fc:	6f050000 	svcvs	0x00050000
     500:	08dc0802 	ldmeq	ip, {r1, fp}^
		all_leds_blink;
     504:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     508:	00000a0a 	andeq	r0, r0, sl, lsl #20
     50c:	07027205 	streq	r7, [r2, -r5, lsl #4]
     510:	0000008d 	andeq	r0, r0, sp, lsl #1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     514:	3d5c1930 	vldrcc.16	s3, [ip, #-96]	; 0xffffffa0	; <UNPREDICTABLE>
     518:	73050000 	movwvc	r0, #20480	; 0x5000
     51c:	08f21602 	ldmeq	r2!, {r1, r9, sl, ip}^
     520:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     524:	000005a5 	andeq	r0, r0, r5, lsr #11
     528:	07027505 	streq	r7, [r2, -r5, lsl #10]
	while (1) {
     52c:	0000008d 	andeq	r0, r0, sp, lsl #1
     530:	069f1938 			; <UNDEFINED> instruction: 0x069f1938
     534:	77050000 	strvc	r0, [r5, -r0]
     538:	09040a02 	stmdbeq	r4, {r1, r9, fp}
void tci_run_delay_timer () {
     53c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
	setdel = __pi_mintk - __pi_old;
     540:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     544:	13027a05 	movwne	r7, #10757	; 0x2a05
     548:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     54c:	037c1940 	cmneq	ip, #64, 18	; 0x100000
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	7b050000 	blvc	140558 <__ccfg+0x1205b0>
     554:	008d0702 	addeq	r0, sp, r2, lsl #14
     558:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     55c:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	13027c05 	movwne	r7, #11269	; 0x2c05
	sti_tim;
     564:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
}
     568:	060a1948 	streq	r1, [sl], -r8, asr #18
     56c:	7d050000 	stcvc	0, cr0, [r5, #-0]
     570:	090a1402 	stmdbeq	sl, {r1, sl, ip}
     574:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
     578:	0000083d 	andeq	r0, r0, sp, lsr r8
	cli_aux;
     57c:	07028005 	streq	r8, [r2, -r5]
     580:	0000008d 	andeq	r0, r0, sp, lsl #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	08d41950 	ldmeq	r4, {r4, r6, r8, fp, ip}^
     588:	81050000 	mrshi	r0, (UNDEF: 5)
     58c:	05ed0902 	strbeq	r0, [sp, #2306]!	; 0x902
     590:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
	sti_aux;
     594:	000008ee 	andeq	r0, r0, lr, ror #17
}
     598:	0702a405 	streq	sl, [r2, -r5, lsl #8]
     59c:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
     5a0:	078a1a58 			; <UNDEFINED> instruction: 0x078a1a58
void AONRTCIntHandler () {
     5a4:	a8050000 	stmdage	r5, {}	; <UNPREDICTABLE>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a8:	02eb1302 	rsceq	r1, fp, #134217728	; 0x8000000
     5ac:	01480000 	mrseq	r0, (UNDEF: 72)
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5b0:	0005321a 	andeq	r3, r5, sl, lsl r2
		if (__pi_utims [0] == 0)
     5b4:	02a90500 	adceq	r0, r9, #0, 10
     5b8:	0002a812 	andeq	sl, r2, r2, lsl r8
		if (*(__pi_utims [0])) {
     5bc:	1a014c00 	bne	535c4 <__ccfg+0x3361c>
     5c0:	00000519 	andeq	r0, r0, r9, lsl r5
			(*(__pi_utims [0]))--;
     5c4:	0c02ad05 	stceq	13, cr10, [r2], {5}
		if (__pi_utims [1] == 0)
     5c8:	0000091c 	andeq	r0, r0, ip, lsl r9
		if (*(__pi_utims [1])) {
     5cc:	511a02dc 			; <UNDEFINED> instruction: 0x511a02dc
			aux_timer_inactive = 0;
     5d0:	05000009 	streq	r0, [r0, #-9]
			(*(__pi_utims [1]))--;
     5d4:	9d1002b2 	lfmls	f0, 4, [r0, #-712]	; 0xfffffd38
		if (__pi_utims [2] == 0)
     5d8:	e0000006 	and	r0, r0, r6
		if (*(__pi_utims [2])) {
     5dc:	07cb1a02 	strbeq	r1, [fp, r2, lsl #20]
			(*(__pi_utims [2]))--;
     5e0:	b4050000 	strlt	r0, [r5], #-0
		if (__pi_utims [3] != 0) {
     5e4:	09280a02 	stmdbeq	r8!, {r1, r9, fp}
			if (*(__pi_utims [3])) {
     5e8:	02ec0000 	rsceq	r0, ip, #0
				aux_timer_inactive = 0;
     5ec:	f3041100 	vrhadd.u8	d1, d4, d0
				(*(__pi_utims [3]))--;
     5f0:	02000005 	andeq	r0, r0, #5
	if (__pi_systat.ledsts) {
     5f4:	08e50801 	stmiaeq	r5!, {r0, fp}^
     5f8:	f3170000 	vhadd.u16	d0, d7, d0
		if (__pi_systat.ledblc++ == 0) {
     5fc:	11000005 	tstne	r0, r5
     600:	00047a04 	andeq	r7, r4, r4, lsl #20
			if (__pi_systat.ledblk) {
     604:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
     608:	24000000 	strcs	r0, [r0], #-0
     60c:	16000006 	strne	r0, [r0], -r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	00000499 	muleq	r0, r9, r4
     614:	00012216 	andeq	r2, r1, r6, lsl r2
				if (__pi_systat.ledsts & 0x2)
     618:	06241600 	strteq	r1, [r4], -r0, lsl #12
     61c:	8d160000 	ldchi	0, cr0, [r6, #-0]
     620:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
     624:	05fa0411 	ldrbeq	r0, [sl, #1041]!	; 0x411
				__pi_systat.ledblk = 0;
     628:	04110000 	ldreq	r0, [r1], #-0
     62c:	00000605 	andeq	r0, r0, r5, lsl #12
			if (__pi_systat.fstblk)
     630:	00b40115 	adcseq	r0, r4, r5, lsl r1
     634:	064f0000 	strbeq	r0, [pc], -r0
				__pi_systat.ledblc = 200;
     638:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
	if (events & AON_RTC_EVFLAGS_CH0) {
     63c:	16000004 	strne	r0, [r0], -r4
		cli_tim;
     640:	00000122 	andeq	r0, r0, r2, lsr #2
		__pi_new += setdel;
     644:	0000b416 	andeq	fp, r0, r6, lsl r4
     648:	008d1600 	addeq	r1, sp, r0, lsl #12
		setdel = 0;
     64c:	11000000 	mrsne	r0, (UNDEF: 0)
		RISE_N_SHINE;
     650:	00063004 	andeq	r3, r6, r4
		__pi_new += setdel;
     654:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
		RISE_N_SHINE;
     658:	6a000000 	bvs	660 <AONRTCIntHandler+0xbc>
     65c:	16000006 	strne	r0, [r0], -r6
		aux_timer_inactive = 1;
     660:	00000499 	muleq	r0, r9, r4
     664:	00012216 	andeq	r2, r1, r6, lsl r2
				if (__pi_systat.ledsts & 0x1)
     668:	04110000 	ldreq	r0, [r1], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	00000655 	andeq	r0, r0, r5, asr r6
     670:	00003808 	andeq	r3, r0, r8, lsl #16
				if (__pi_systat.ledsts & 0x2)
     674:	00068000 	andeq	r8, r6, r0
     678:	00940900 	addseq	r0, r4, r0, lsl #18
     67c:	00020000 	andeq	r0, r2, r0
				if (__pi_systat.ledsts & 0x8)
     680:	00003808 	andeq	r3, r0, r8, lsl #16
				__pi_systat.ledblk = 1;
     684:	00069000 	andeq	r9, r6, r0
     688:	00940900 	addseq	r0, r4, r0, lsl #18
		if (aux_timer_inactive) {
     68c:	00000000 	andeq	r0, r0, r0
			cli_aux;
     690:	0003f105 	andeq	pc, r3, r5, lsl #2
     694:	01240500 			; <UNDEFINED> instruction: 0x01240500
     698:	00033718 	andeq	r3, r3, r8, lsl r7
     69c:	43821b00 	orrmi	r1, r2, #0, 22
     6a0:	050c0000 	streq	r0, [ip, #-0]
     6a4:	d6080128 	strle	r0, [r8], -r8, lsr #2
     6a8:	19000006 	stmdbne	r0, {r1, r2}
     6ac:	00000a40 	andeq	r0, r0, r0, asr #20
     6b0:	11012a05 	tstne	r1, r5, lsl #20
     6b4:	000006d6 	ldrdeq	r0, [r0], -r6
word tci_update_delay_ticks (Boolean force) {
     6b8:	088f1900 	stmeq	pc, {r8, fp, ip}	; <UNPREDICTABLE>
	cli_tim;
     6bc:	2b050000 	blcs	1406c4 <__ccfg+0x12071c>
     6c0:	008d0701 	addeq	r0, sp, r1, lsl #14
	if (setdel) {
     6c4:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00000591 	muleq	r0, r1, r5
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	0b012c05 	bleq	4b6e8 <__ccfg+0x2b740>
     6d0:	000006dc 	ldrdeq	r0, [r0], -ip
     6d4:	04110008 	ldreq	r0, [r1], #-8
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	0000069d 	muleq	r0, sp, r6
				AON_RTC_O_CH0CMP)) - gettav ());
     6dc:	06900411 			; <UNDEFINED> instruction: 0x06900411
	return NO;
     6e0:	681b0000 	ldmdavs	fp, {}	; <UNPREDICTABLE>
			setdel = 0;
     6e4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e8:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
     6ec:	0000071b 	andeq	r0, r0, fp, lsl r7
}
     6f0:	00118819 	andseq	r8, r1, r9, lsl r8
		sti_tim;
     6f4:	01450500 	cmpeq	r5, r0, lsl #10
		return YES;
     6f8:	00071b12 	andeq	r1, r7, r2, lsl fp
     6fc:	1c190000 	ldcne	0, cr0, [r9], {-0}
     700:	05000006 	streq	r0, [r0, #-6]
     704:	1b120146 	blne	480c24 <__ccfg+0x460c7c>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	06000007 	streq	r0, [r0], -r7
	UARTDisable (UART0_BASE);
     70c:	00102d19 	andseq	r2, r0, r9, lsl sp
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	01470500 	cmpeq	r7, r0, lsl #10
	UARTDisable (UART0_BASE);
     714:	00005212 	andeq	r5, r0, r2, lsl r2
	UARTConfigSetExpClk (UART0_BASE,
     718:	08000c00 	stmdaeq	r0, {sl, fp}
     71c:	00000052 	andeq	r0, r0, r2, asr r0
     720:	0000072b 	andeq	r0, r0, fp, lsr #14
     724:	00009409 	andeq	r9, r0, r9, lsl #8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	1c000200 	sfmne	f0, 4, [r0], {-0}
     72c:	028505d0 	addeq	r0, r5, #208, 10	; 0x34000000
     730:	00084007 	andeq	r4, r8, r7
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	09fd1900 	ldmibeq	sp!, {r8, fp, ip}^
     738:	87050000 	strhi	r0, [r5, -r0]
     73c:	00941802 	addseq	r1, r4, r2, lsl #16
	urates [0] = rate;
     740:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
}
     744:	00000959 	andeq	r0, r0, r9, asr r9
     748:	12028805 	andne	r8, r2, #327680	; 0x50000
     74c:	000005ed 	andeq	r0, r0, sp, ror #11
     750:	03a91904 			; <UNDEFINED> instruction: 0x03a91904
     754:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
     758:	08401002 	stmdaeq	r0, {r1, ip}^
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     760:	0000081c 	andeq	r0, r0, ip, lsl r8
     764:	17028a05 	strne	r8, [r2, -r5, lsl #20]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     76c:	05d91924 	ldrbeq	r1, [r9, #2340]	; 0x924
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     770:	8b050000 	blhi	140778 <__ccfg+0x1207d0>
     774:	008d0f02 	addeq	r0, sp, r2, lsl #30
	__pi_uart_setrate (urates [0], __pi_uart);
     778:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
     77c:	00000a3b 	andeq	r0, r0, fp, lsr sl
     780:	2c028c05 	stccs	12, cr8, [r2], {5}
     784:	0000007a 	andeq	r0, r0, sl, ror r0
     788:	00851950 	addeq	r1, r5, r0, asr r9
     78c:	8d050000 	stchi	0, cr0, [r5, #-0]
     790:	06e21a02 	strbteq	r1, [r2], r2, lsl #20
	switch (operation) {
     794:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
static int ioreq_uart_a (int operation, char *buf, int len) {
     798:	000004ee 	andeq	r0, r0, lr, ror #9
     79c:	16028e05 	strne	r8, [r2], -r5, lsl #28
     7a0:	00000116 	andeq	r0, r0, r6, lsl r1
     7a4:	09661968 	stmdbeq	r6!, {r3, r5, r6, r8, fp, ip}^
     7a8:	8f050000 	svchi	0x00050000
				*buf++ = uart_a_read;
     7ac:	01161602 	tsteq	r6, r2, lsl #12
     7b0:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
			while (len && uart_a_char_available) {
     7b4:	0000006f 	andeq	r0, r0, pc, rrx
     7b8:	16029005 	strne	r9, [r2], -r5
     7bc:	00000116 	andeq	r0, r0, r6, lsl r1
			if (len != operation) {
     7c0:	084d1978 	stmdaeq	sp, {r3, r4, r5, r6, r8, fp, ip}^
}
     7c4:	91050000 	mrsls	r0, (UNDEF: 5)
     7c8:	08501002 	ldmdaeq	r0, {r1, ip}^
			uart_a_disable_int;
     7cc:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
			if (uart_a_char_available) {
     7d0:	00000386 	andeq	r0, r0, r6, lsl #7
				*buf++ = uart_a_read;
     7d4:	10029205 	andne	r9, r2, r5, lsl #4
			uart_a_disable_int;
     7d8:	00000860 	andeq	r0, r0, r0, ror #16
     7dc:	09111988 	ldmdbeq	r1, {r3, r7, r8, fp, ip}
			if (uart_a_char_available) {
     7e0:	93050000 	movwls	r0, #20480	; 0x5000
     7e4:	008d0f02 	addeq	r0, sp, r2, lsl #30
				uart_a_enable_int;
     7e8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
     7ec:	00000229 	andeq	r0, r0, r9, lsr #4
				goto Redo_rx;
     7f0:	16029405 	strne	r9, [r2], -r5, lsl #8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f4:	00000116 	andeq	r0, r0, r6, lsl r1
     7f8:	052319a4 	streq	r1, [r3, #-2468]!	; 0xfffff65c
			return -2;
     7fc:	95050000 	strls	r0, [r5, #-0]
     800:	01161602 	tsteq	r6, r2, lsl #12
				uart_a_write (*buf);
     804:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     808:	0000046b 	andeq	r0, r0, fp, ror #8
			while (len && uart_a_room_in_tx) {
     80c:	16029605 	strne	r9, [r2], -r5, lsl #12
     810:	00000116 	andeq	r0, r0, r6, lsl r1
     814:	065319b4 			; <UNDEFINED> instruction: 0x065319b4
			if (len != operation) {
     818:	97050000 	strls	r0, [r5, -r0]
			uart_a_disable_int;
     81c:	01161602 	tsteq	r6, r2, lsl #12
     820:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
			if (uart_a_room_in_tx) {
     824:	000004dd 	ldrdeq	r0, [r0], -sp
     828:	16029805 	strne	r9, [r2], -r5, lsl #16
				uart_a_enable_int;
     82c:	00000116 	andeq	r0, r0, r6, lsl r1
     830:	06f619c4 	ldrbteq	r1, [r6], r4, asr #19
				*buf++ = uart_a_read;
     834:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
			if (uart_a_room_in_tx) {
     838:	008d0802 	addeq	r0, sp, r2, lsl #16
				uart_a_write (*buf);
     83c:	00cc0000 	sbceq	r0, ip, r0
     840:	0005f308 	andeq	pc, r5, r8, lsl #6
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     844:	00085000 	andeq	r5, r8, r0
     848:	00940900 	addseq	r0, r4, r0, lsl #18
			uart_a_enable_int;
     84c:	00190000 	andseq	r0, r9, r0
     850:	0005f308 	andeq	pc, r5, r8, lsl #6
     854:	00086000 	andeq	r6, r8, r0
			return 0;
     858:	00940900 	addseq	r0, r4, r0, lsl #18
			if (len == UART_CNTRL_SETRATE) {
     85c:	00070000 	andeq	r0, r7, r0
				if (__pi_uart_setrate (*((word*)buf),
     860:	0005f308 	andeq	pc, r5, r8, lsl #6
     864:	00087000 	andeq	r7, r8, r0
     868:	00940900 	addseq	r0, r4, r0, lsl #18
				syserror (EREQPAR, "uar");
     86c:	00170000 	andseq	r0, r7, r0
			syserror (ENOOPER, "uai");
     870:	9e05f01c 	mcrls	0, 0, pc, cr5, cr12, {0}	; <UNPREDICTABLE>
			if (len == UART_CNTRL_GETRATE) {
     874:	08970702 	ldmeq	r7, {r1, r8, r9, sl}
				return 1;
     878:	61190000 	tstvs	r9, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87c:	05000003 	streq	r0, [r0, #-3]
			syserror (ENOOPER, "uai");
     880:	971b02a1 	ldrls	r0, [fp, -r1, lsr #5]
     884:	00000008 	andeq	r0, r0, r8
     888:	000a5f19 	andeq	r5, sl, r9, lsl pc
     88c:	02a20500 	adceq	r0, r2, #0, 10
     890:	0008a718 	andeq	sl, r8, r8, lsl r7
     894:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
     898:	00000331 	andeq	r0, r0, r1, lsr r3
     89c:	000008a7 	andeq	r0, r0, r7, lsr #17
     8a0:	00009409 	andeq	r9, r0, r9, lsl #8
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
void UART0IntHandler () {
     8a8:	00000094 	muleq	r0, r4, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
     8b0:	00009409 	andeq	r9, r0, r9, lsl #8
     8b4:	1d001d00 	stcne	13, cr1, [r0, #-0]
     8b8:	028305f0 	addeq	r0, r3, #240, 10	; 0x3c000000
     8bc:	0008dc03 	andeq	sp, r8, r3, lsl #24
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8c0:	436c1e00 	cmnmi	ip, #0, 28
     8c4:	9a050000 	bls	1408cc <__ccfg+0x120924>
		RISE_N_SHINE;
     8c8:	072b0b02 	streq	r0, [fp, -r2, lsl #22]!
     8cc:	2b1e0000 	blcs	7808d4 <__ccfg+0x76092c>
		i_trigger (devevent (UART_A, READ));
     8d0:	05000008 	streq	r0, [r0, #-8]
     8d4:	700b02a3 	andvc	r0, fp, r3, lsr #5
     8d8:	00000008 	andeq	r0, r0, r8
     8dc:	0005f308 	andeq	pc, r5, r8, lsl #6
     8e0:	0008ec00 	andeq	lr, r8, r0, lsl #24
     8e4:	00940900 	addseq	r0, r4, r0, lsl #18
     8e8:	00180000 	andseq	r0, r8, r0
     8ec:	000a461f 	andeq	r4, sl, pc, lsl r6
     8f0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
     8f4:	000008ec 	andeq	r0, r0, ip, ror #17
     8f8:	09040120 	stmdbeq	r4, {r5, r8}
     8fc:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     900:	00000004 	andeq	r0, r0, r4
     904:	08f80411 	ldmeq	r8!, {r0, r4, sl}^
     908:	04110000 	ldreq	r0, [r1], #-0
		i_trigger (devevent (UART_A, WRITE));
     90c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	091c0120 	ldmdbeq	ip, {r5, r8}
     914:	8d160000 	ldchi	0, cr0, [r6, #-0]
		RISE_N_SHINE;
     918:	00000000 	andeq	r0, r0, r0
     91c:	09220411 	stmdbeq	r2!, {r0, r4, sl}
     920:	04110000 	ldreq	r0, [r1], #-0
		i_trigger (devevent (UART_A, WRITE));
     924:	00000910 	andeq	r0, r0, r0, lsl r9
     928:	00069008 	andeq	r9, r6, r8
     92c:	00093800 	andeq	r3, r9, r0, lsl #16
     930:	00940900 	addseq	r0, r4, r0, lsl #18
     934:	00020000 	andeq	r0, r2, r0
     938:	0007f821 	andeq	pc, r7, r1, lsr #16
     93c:	03330500 	teqeq	r3, #0, 10
     940:	00049917 	andeq	r9, r4, r7, lsl r9
     944:	21010100 	mrscs	r0, (UNDEF: 17)
     948:	000007f1 	strdeq	r0, [r0], -r1
     94c:	1d033405 	cfstrsne	mvf3, [r3, #-20]	; 0xffffffec
}
     950:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     954:	35030101 	strcc	r0, [r3, #-257]	; 0xfffffeff
     958:	07000008 	streq	r0, [r0, -r8]
     95c:	002c1318 	eoreq	r1, ip, r8, lsl r3
     960:	d2030000 	andle	r0, r3, #0
void __buttons_setirq (int val) {
     964:	07000003 	streq	r0, [r0, -r3]
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	00461424 	subeq	r1, r6, r4, lsr #8
     96c:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	07000008 	streq	r0, [r0, -r8]
     974:	00601430 	rsbeq	r1, r0, r0, lsr r4
     978:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	08000005 	stmdaeq	r0, {r0, r2}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     980:	00811971 	addeq	r1, r1, r1, ror r9
     984:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
     988:	09000004 	stmdbeq	r0, {r2}
     98c:	01241b28 			; <UNDEFINED> instruction: 0x01241b28
     990:	67030000 	strvs	r0, [r3, -r0]
     994:	09000008 	stmdbeq	r0, {r3}
}
     998:	09861863 	stmibeq	r6, {r0, r1, r5, r6, fp, ip}
     99c:	33030000 	movwcc	r0, #12288	; 0x3000
     9a0:	0a000007 	beq	9c4 <__pinlist_setirq+0x1c>
     9a4:	09561126 	ldmdbeq	r6, {r1, r2, r5, r8, ip}^
void __pinlist_setirq (int val) {
     9a8:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
	for (i = 0; i < N_PINLIST; i++) {
     9ac:	0a000023 	beq	a40 <GPIOIntHandler+0x5c>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	09621227 	stmdbeq	r2!, {r0, r1, r2, r5, r9, ip}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	aa170000 	bge	5c09bc <__ccfg+0x5a0a14>
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	22000009 	andcs	r0, r0, #9
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9bc:	000009aa 	andeq	r0, r0, sl, lsr #19
     9c0:	0018f103 	andseq	pc, r8, r3, lsl #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c4:	112b0a00 			; <UNDEFINED> instruction: 0x112b0a00
     9c8:	00000956 	andeq	r0, r0, r6, asr r9
     9cc:	0009c022 	andeq	ip, r9, r2, lsr #32
	for (i = 0; i < N_PINLIST; i++) {
     9d0:	24290300 	strtcs	r0, [r9], #-768	; 0xfffffd00
}
     9d4:	2c0a0000 	stccs	0, cr0, [sl], {-0}
     9d8:	00096e12 	andeq	r6, r9, r2, lsl lr
     9dc:	09d11700 	ldmibeq	r1, {r8, r9, sl, ip}^
     9e0:	fb030000 	blx	c09ea <__ccfg+0xa0a42>
void GPIOIntHandler () {
     9e4:	0a000004 	beq	9fc <GPIOIntHandler+0x18>
if (buttons_int) {
     9e8:	096e122d 	stmdbeq	lr!, {r0, r2, r3, r5, r9, ip}^
     9ec:	75030000 	strvc	r0, [r3, #-0]
	buttons_disable ();
     9f0:	0a000008 	beq	a18 <GPIOIntHandler+0x34>
     9f4:	09fa0f2e 	ldmibeq	sl!, {r1, r2, r3, r5, r8, r9, sl, fp}^
	i_trigger ((aword)&__button_list);
     9f8:	04110000 	ldreq	r0, [r1], #-0
     9fc:	000009aa 	andeq	r0, r0, sl, lsr #19
     a00:	320a080a 	andcc	r0, sl, #655360	; 0xa0000
     a04:	000a8e09 	andeq	r8, sl, r9, lsl #28
     a08:	003e2300 	eorseq	r2, lr, r0, lsl #6
     a0c:	340a0000 	strcc	r0, [sl], #-0
     a10:	0009c007 	andeq	ip, r9, r7
     a14:	07010100 	streq	r0, [r1, -r0, lsl #2]
     a18:	05012300 	streq	r2, [r1, #-768]	; 0xfffffd00
     a1c:	350a0000 	strcc	r0, [sl, #-0]
     a20:	0009c003 	andeq	ip, r9, r3
	RISE_N_SHINE;
     a24:	06010100 	streq	r0, [r1], -r0, lsl #2
     a28:	02372300 	eorseq	r2, r7, #0, 6
     a2c:	360a0000 	strcc	r0, [sl], -r0
if (pin_sensor_int) {
     a30:	0009c003 	andeq	ip, r9, r3
     a34:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	i_trigger ((aword)(&__input_pins));
     a38:	053b2300 	ldreq	r2, [fp, #-768]!	; 0xfffffd00
     a3c:	370a0000 	strcc	r0, [sl, -r0]
     a40:	0009c003 	andeq	ip, r9, r3
     a44:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
     a48:	07c42300 	strbeq	r2, [r4, r0, lsl #6]
     a4c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
     a50:	0009c003 	andeq	ip, r9, r3
     a54:	00040100 	andeq	r0, r4, r0, lsl #2
     a58:	05080b00 	streq	r0, [r8, #-2816]	; 0xfffff500
     a5c:	3a0a0000 	bcc	280a64 <__ccfg+0x260abc>
     a60:	0009c007 	andeq	ip, r9, r7
	__pinsen_disable_and_clear;
     a64:	d20b0100 	andle	r0, fp, #0, 2
	RISE_N_SHINE;
     a68:	0a000006 	beq	a88 <system_init>
     a6c:	09c0033c 	stmibeq	r0, {r2, r3, r4, r5, r8, r9}^
     a70:	0b020000 	bleq	80a78 <__ccfg+0x60ad0>
}
     a74:	00000a7c 	andeq	r0, r0, ip, ror sl
     a78:	c0033d0a 	andgt	r3, r3, sl, lsl #26
     a7c:	03000009 	movweq	r0, #9
     a80:	0007070b 	andeq	r0, r7, fp, lsl #14
     a84:	083f0a00 	ldmdaeq	pc!, {r9, fp}	; <UNPREDICTABLE>
void system_init () {
     a88:	000009d1 	ldrdeq	r0, [r0], -r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	89030004 	stmdbhi	r3, {r2}
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a90:	0a000002 	beq	aa0 <system_init+0x18>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a94:	0a000341 	beq	17a0 <tcv_endp+0x30>
     a98:	8e220000 	cdphi	0, 2, cr0, cr2, cr0, {0}
     a9c:	2400000a 	strcs	r0, [r0], #-10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	00000542 	andeq	r0, r0, r2, asr #10
     aa4:	9a1a430a 	bls	6916d4 <__ccfg+0x67172c>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	0100000a 	tsteq	r0, sl
     aac:	01b12401 			; <UNDEFINED> instruction: 0x01b12401
     ab0:	450a0000 	strmi	r0, [sl, #-0]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	0005ed0e 	andeq	lr, r5, lr, lsl #26
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     abc:	00000292 	muleq	r0, r2, r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ac0:	ed1e450a 	cfldr32	mvfx4, [lr, #-40]	; 0xffffffd8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	01000005 	tsteq	r0, r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac8:	0b080a01 	bleq	2032d4 <__ccfg+0x1e332c>
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	0afa098f 	beq	ffe83110 <_estack+0xdfe7e110>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ad0:	050b0000 	streq	r0, [fp, #-0]
		pin = (port_confs [i] >> 19) & 0x1f;
     ad4:	0b000006 	bleq	af4 <system_init+0x6c>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	096e0b90 	stmdbeq	lr!, {r4, r7, r8, r9, fp}^
     adc:	0b000000 	bleq	ae4 <system_init+0x5c>
     ae0:	00000bae 	andeq	r0, r0, lr, lsr #23
     ae4:	aa07910b 	bge	1e4f18 <__ccfg+0x1c4f70>
		if (port_confs [i] & 0x80)
     ae8:	04000009 	streq	r0, [r0], #-9
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aec:	0001ea0b 	andeq	lr, r1, fp, lsl #20
     af0:	10920b00 	addsne	r0, r2, r0, lsl #22
		if (port_confs [i] & 0x40)
     af4:	000009cc 	andeq	r0, r0, ip, asr #19
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	45030006 	strmi	r0, [r3, #-6]
     afc:	0b000009 	bleq	b28 <system_init+0xa0>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b00:	0ac90393 	beq	ff241954 <_estack+0xdf23c954>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b04:	fa080000 	blx	200b0c <__ccfg+0x1e0b64>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b08:	1100000a 	tstne	r0, sl
	all_leds_blink;
     b0c:	2500000b 	strcs	r0, [r0, #-11]
     b10:	07132400 	ldreq	r2, [r3, -r0, lsl #8]
     b14:	990b0000 	stmdbls	fp, {}	; <UNPREDICTABLE>
     b18:	000b060f 	andeq	r0, fp, pc, lsl #12
     b1c:	0a010100 	beq	40f24 <__ccfg+0x20f7c>
     b20:	09910c01 	ldmibeq	r1, {r0, sl, fp}
     b24:	00000b49 	andeq	r0, r0, r9, asr #22
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b28:	00070e23 	andeq	r0, r7, r3, lsr #28
     b2c:	07930c00 	ldreq	r0, [r3, r0, lsl #24]
     b30:	000009c0 	andeq	r0, r0, r0, asr #19
     b34:	00010701 	andeq	r0, r1, r1, lsl #14
     b38:	00047c23 	andeq	r7, r4, r3, lsr #24
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	03940c00 	orrseq	r0, r4, #0, 24
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	000009c0 	andeq	r0, r0, r0, asr #19
     b44:	00000101 	andeq	r0, r0, r1, lsl #2
	IntEnable (INT_AON_RTC_COMB);
     b48:	07d00300 	ldrbeq	r0, [r0, r0, lsl #6]
     b4c:	960c0000 	strls	r0, [ip], -r0
     b50:	000b1f03 	andeq	r1, fp, r3, lsl #30
	__pi_malloc_init ();
     b54:	0b491700 	bleq	124675c <__ccfg+0x12267b4>
	IntEnable (INT_AON_GPIO_EDGE);
     b58:	55080000 	strpl	r0, [r8, #-0]
     b5c:	6500000b 	strvs	r0, [r0, #-11]
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b60:	2500000b 	strcs	r0, [r0, #-11]
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	0b5a1700 	bleq	168676c <__ccfg+0x16667c4>
     b68:	4b240000 	blmi	900b70 <__ccfg+0x8e0bc8>
     b6c:	0c000003 	stceq	0, cr0, [r0], {3}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b70:	0b65179c 	bleq	19469e8 <__ccfg+0x1926a40>
     b74:	01010000 	mrseq	r0, (UNDEF: 1)
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	0009b608 	andeq	fp, r9, r8, lsl #12
     b7c:	000b8300 	andeq	r8, fp, r0, lsl #6
     b80:	17002500 	strne	r2, [r0, -r0, lsl #10]
	urates [0] = UART_RATE / 100;
     b84:	00000b78 	andeq	r0, r0, r8, ror fp
     b88:	0004bb24 	andeq	fp, r4, r4, lsr #22
	reinit_uart ();
     b8c:	13060d00 	movwne	r0, #27904	; 0x6d00
	EXTRA_INITIALIZERS;
     b90:	00000b83 	andeq	r0, r0, r3, lsl #23
     b94:	b4240101 	strtlt	r0, [r4], #-257	; 0xfffffeff
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	0b000006 	bleq	bb8 <system_init+0x130>
     b9c:	09d10ec3 	ldmibeq	r1, {r0, r1, r6, r7, r9, sl, fp}^
     ba0:	01010000 	mrseq	r0, (UNDEF: 1)
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba4:	0008fe05 	andeq	pc, r8, r5, lsl #28
     ba8:	016e0e00 	cmneq	lr, r0, lsl #28
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bac:	000bb110 	andeq	fp, fp, r0, lsl r1
     bb0:	b7041100 	strlt	r1, [r4, -r0, lsl #2]
			devinit [i] . init (devinit [i] . param);
     bb4:	2000000b 	andcs	r0, r0, fp
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	000bc301 	andeq	ip, fp, r1, lsl #6
     bbc:	09aa1600 	stmibeq	sl!, {r9, sl, ip}
     bc0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	IntEnable (INT_UART0_COMB);
     bc4:	000005fa 	strdeq	r0, [r0], -sl
     bc8:	00000bce 	andeq	r0, r0, lr, asr #23
}
     bcc:	c3170025 	tstgt	r7, #37	; 0x25
	tci_run_auxiliary_timer ();
     bd0:	2100000b 	tstcs	r0, fp
		diag ("");
     bd4:	00000767 	andeq	r0, r0, r7, ror #14
     bd8:	13017f0e 	movwne	r7, #7950	; 0x1f0e
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bdc:	00000bce 	andeq	r0, r0, lr, asr #23
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     be0:	2e210101 	sufcss	f0, f1, f1
		diag ("Leftover RAM: %d bytes",
     be4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     be8:	dd140182 	ldfles	f0, [r4, #-520]	; 0xfffffdf8
     bec:	01000009 	tsteq	r0, r9
     bf0:	0f040a01 	svceq	0x00040a01
     bf4:	0c150908 			; <UNDEFINED> instruction: 0x0c150908
     bf8:	f00b0000 			; <UNDEFINED> instruction: 0xf00b0000
     bfc:	0f000001 	svceq	0x00000001
     c00:	09aa070f 	stmibeq	sl!, {r0, r1, r2, r3, r8, r9, sl}
     c04:	0b000000 	bleq	c0c <system_init+0x184>
     c08:	00000939 	andeq	r0, r0, r9, lsr r9
     c0c:	aa03100f 	bge	c4c50 <__ccfg+0xa4ca8>
     c10:	02000009 	andeq	r0, r0, #9
     c14:	09c60300 	stmibeq	r6, {r8, r9}^
     c18:	110f0000 	mrsne	r0, CPSR
     c1c:	000bf103 	andeq	pc, fp, r3, lsl #2
     c20:	0f200a00 	svceq	0x00200a00
     c24:	0c930916 			; <UNDEFINED> instruction: 0x0c930916
     c28:	0b0b0000 	bleq	2c0c30 <__ccfg+0x2a0c88>
     c2c:	0f000004 	svceq	0x00000004
     c30:	0cad0817 	stceq	8, cr0, [sp], #92	; 0x5c
     c34:	0b000000 	bleq	c3c <system_init+0x1b4>
     c38:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     c3c:	c808180f 	stmdagt	r8, {r0, r1, r2, r3, fp, ip}
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	0400000c 	streq	r0, [r0], #-12
     c44:	0008870b 	andeq	r8, r8, fp, lsl #14
     c48:	08190f00 	ldmdaeq	r9, {r8, r9, sl, fp}
     c4c:	00000cfe 	strdeq	r0, [r0], -lr
     c50:	09310b08 	ldmdbeq	r1!, {r3, r8, r9, fp}
     c54:	1a0f0000 	bne	3c0c5c <__ccfg+0x3a0cb4>
     c58:	000d1908 	andeq	r1, sp, r8, lsl #18
     c5c:	2b0b0c00 	blcs	2c3c64 <__ccfg+0x2a3cbc>
}
     c60:	0f000007 	svceq	0x00000007
__attribute__ ((noreturn)) void __pi_release () {
     c64:	0d2f081b 	stceq	8, cr0, [pc, #-108]!	; c00 <system_init+0x178>
     c68:	0b100000 	bleq	400c70 <__ccfg+0x3e0cc8>
     c6c:	0000079b 	muleq	r0, fp, r7
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c70:	2f081c0f 	svccs	0x00081c0f
	check_stack_overflow;
     c74:	1400000d 	strne	r0, [r0], #-13
     c78:	0001d30b 	andeq	sp, r1, fp, lsl #6
     c7c:	081d0f00 	ldmdaeq	sp, {r8, r9, sl, fp}
	update_n_wake (MAX_WORD, NO);
     c80:	00000d2f 	andeq	r0, r0, pc, lsr #26
     c84:	02800b18 	addeq	r0, r0, #24, 22	; 0x6000
     c88:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
	for_all_tasks (__pi_curr) {
     c8c:	00008d06 	andeq	r8, r0, r6, lsl #26
     c90:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
     c94:	00008d01 	andeq	r8, r0, r1, lsl #26
  __ASM volatile ("cpsid i" : : : "memory");
     c98:	000cad00 	andeq	sl, ip, r0, lsl #26
	__SLEEP;
     c9c:	008d1600 	addeq	r1, sp, r0, lsl #12
     ca0:	8d160000 	ldchi	0, cr0, [r6, #-0]
     ca4:	16000000 	strne	r0, [r0], -r0
     ca8:	00000992 	muleq	r0, r2, r9
	system_event_count ++;
     cac:	93041100 	movwls	r1, #16640	; 0x4100
     cb0:	1500000c 	strne	r0, [r0, #-12]
	switch (__pi_systat.effpdm) {
     cb4:	00008d01 	andeq	r8, r0, r1, lsl #26
     cb8:	000cc800 	andeq	ip, ip, r0, lsl #16
     cbc:	008d1600 	addeq	r1, sp, r0, lsl #12
     cc0:	8d160000 	ldchi	0, cr0, [r6, #-0]
			__WFI ();
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	0cb30411 	cfldrseq	mvf0, [r3], #68	; 0x44
     ccc:	01150000 	tsteq	r5, r0
	check_stack_overflow;
     cd0:	0000008d 	andeq	r0, r0, sp, lsl #1
     cd4:	00000cf2 	strdeq	r0, [r0], -r2
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	00008d16 	andeq	r8, r0, r6, lsl sp
     cdc:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	8d160000 	ldchi	0, cr0, [r6, #-0]
			goto Redo;
     ce4:	16000000 	strne	r0, [r0], -r0
	for_all_tasks (__pi_curr) {
     ce8:	00000cf2 	strdeq	r0, [r0], -r2
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cec:	000cf816 	andeq	pc, ip, r6, lsl r8	; <UNPREDICTABLE>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cf0:	04110000 	ldreq	r0, [r1], #-0
     cf4:	0000008d 	andeq	r0, r0, sp, lsl #1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	0c150411 	cfldrseq	mvf0, [r5], {17}
     cfc:	04110000 	ldreq	r0, [r1], #-0
     d00:	00000cce 	andeq	r0, r0, lr, asr #25
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d04:	008d0115 	addeq	r0, sp, r5, lsl r1
     d08:	0d190000 	ldceq	0, cr0, [r9, #-0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	ee160000 	cdp	0, 1, cr0, cr6, cr0, {0}
     d10:	16000009 	strne	r0, [r0], -r9
			__WFI ();
     d14:	00000cf8 	strdeq	r0, [r0], -r8
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d18:	04041100 	streq	r1, [r4], #-256	; 0xffffff00
     d1c:	1500000d 	strne	r0, [r0, #-13]
}
     d20:	00008d01 	andeq	r8, r0, r1, lsl #26
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d24:	000d2f00 	andeq	r2, sp, r0, lsl #30
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d28:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2c:	11000000 	mrsne	r0, (UNDEF: 0)
     d30:	000d1f04 	andeq	r1, sp, r4, lsl #30
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d34:	097c0300 	ldmdbeq	ip!, {r8, r9}^
     d38:	1f0f0000 	svcne	0x000f0000
     d3c:	000c2103 	andeq	r2, ip, r3, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d40:	0d351700 	ldceq	7, cr1, [r5, #-0]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d44:	0b210000 	bleq	840d4c <__ccfg+0x820da4>
     d48:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     d4c:	d10e02d8 	ldrdle	r0, [lr, -r8]
     d50:	01000009 	tsteq	r0, r9
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	0e081c01 	cdpeq	12, 0, cr1, cr8, cr1, {0}
     d58:	7c090303 	stcvc	3, cr0, [r9], {3}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d5c:	1900000d 	stmdbne	r0, {r0, r2, r3}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d60:	0000375c 	andeq	r3, r0, ip, asr r7
     d64:	0703070e 	streq	r0, [r3, -lr, lsl #14]
     d68:	000009aa 	andeq	r0, r0, sl, lsr #19
     d6c:	0b061900 	bleq	187174 <__ccfg+0x1671cc>
     d70:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
			SysCtrlSetRechargeBeforePowerDown
     d74:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d78:	00040000 	andeq	r0, r4, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	0003c305 	andeq	ip, r3, r5, lsl #6
     d80:	03090e00 	movweq	r0, #40448	; 0x9e00
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	000d5503 	andeq	r5, sp, r3, lsl #10
     d88:	00331b00 	eorseq	r1, r3, r0, lsl #22
     d8c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d90:	ec08030b 	stc	3, cr0, [r8], {11}
     d94:	1900000d 	stmdbne	r0, {r0, r2, r3}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d98:	00001a07 	andeq	r1, r0, r7, lsl #20
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d9c:	0703140e 	streq	r1, [r3, -lr, lsl #8]
     da0:	000009aa 	andeq	r0, r0, sl, lsr #19
     da4:	08a81900 	stmiaeq	r8!, {r8, fp, ip}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da8:	150e0000 	strne	r0, [lr, #-0]
			while (!(AONWUCPowerStatusGet () &
     dac:	09aa0703 	stmibeq	sl!, {r0, r1, r8, r9, sl}
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db0:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     db4:	000048cc 	andeq	r4, r0, ip, asr #17
     db8:	0a03160e 	beq	c65f8 <__ccfg+0xa6650>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dbc:	00000ba4 	andeq	r0, r0, r4, lsr #23
     dc0:	432f1904 			; <UNDEFINED> instruction: 0x432f1904
     dc4:	170e0000 	strne	r0, [lr, -r0]
     dc8:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     dd0:	00000007 	andeq	r0, r0, r7
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	0f03180e 	svceq	0x0003180e
     dd8:	00000dec 	andeq	r0, r0, ip, ror #27
			SysCtrlAdjustRechargeAfterPowerDown ();
     ddc:	0726190c 	streq	r1, [r6, -ip, lsl #18]!
			reinit_uart ();
     de0:	190e0000 	stmdbne	lr, {}	; <UNPREDICTABLE>
     de4:	0dfc1503 	cfldr64eq	mvdx1, [ip, #12]!
     de8:	002c0000 	eoreq	r0, ip, r0
}
     dec:	000d7c08 	andeq	r7, sp, r8, lsl #24
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     df0:	000dfc00 	andeq	pc, sp, r0, lsl #24
     df4:	00940900 	addseq	r0, r4, r0, lsl #18
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	00030000 	andeq	r0, r3, r0
     dfc:	0d890411 	cfstrseq	mvf0, [r9, #68]	; 0x44
     e00:	9d050000 	stcls	0, cr0, [r5, #-0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
     e08:	891b031c 	ldmdbhi	fp, {r2, r3, r4, r8, r9}
     e0c:	2100000d 	tstcs	r0, sp
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e10:	0000087d 	andeq	r0, r0, sp, ror r8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	14031e0e 	strne	r1, [r3], #-3598	; 0xfffff1f2
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e18:	00000e1e 	andeq	r0, r0, lr, lsl lr
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e1c:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
     e20:	00000e02 	andeq	r0, r0, r2, lsl #28
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e24:	00054e24 	andeq	r4, r5, r4, lsr #28
     e28:	0d1d1000 	ldceq	0, cr1, [sp, #-0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2c:	000009aa 	andeq	r0, r0, sl, lsr #19
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e30:	3e240101 	sufccs	f0, f4, f1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e34:	10000002 	andne	r0, r0, r2
     e38:	09bb161e 	ldmibeq	fp!, {r1, r2, r3, r4, r9, sl, ip}
			PRCMPowerDomainOff (
     e3c:	01010000 	mrseq	r0, (UNDEF: 1)
     e40:	0008ea24 	andeq	lr, r8, r4, lsr #20
	__SLEEP;
     e44:	201e1000 	andscs	r1, lr, r0
     e48:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
  __ASM volatile ("cpsie i" : : : "memory");
     e4c:	06240101 	strteq	r0, [r4], -r1, lsl #2
	goto Redo;
     e50:	10000009 	andne	r0, r0, r9
     e54:	0e1e1422 	cfmuldeq	mvd1, mvd14, mvd2
     e58:	01010000 	mrseq	r0, (UNDEF: 1)
     e5c:	00000e24 	andeq	r0, r0, r4, lsr #28
     e60:	180c1100 	stmdane	ip, {r8, ip}
     e64:	00000d41 	andeq	r0, r0, r1, asr #26
     e68:	01260101 			; <UNDEFINED> instruction: 0x01260101
     e6c:	00000025 	andeq	r0, r0, r5, lsr #32
     e70:	a20e1101 	andge	r1, lr, #1073741824	; 0x40000000
     e74:	2700000e 	strcs	r0, [r0, -lr]
     e78:	000008ae 	andeq	r0, r0, lr, lsr #17
     e7c:	074b2700 	strbeq	r2, [fp, -r0, lsl #14]
     e80:	27010000 	strcs	r0, [r1, -r0]
     e84:	00000a6e 	andeq	r0, r0, lr, ror #20
     e88:	080e2702 	stmdaeq	lr, {r1, r8, r9, sl, sp}
     e8c:	27030000 	strcs	r0, [r3, -r0]
     e90:	0000073b 	andeq	r0, r0, fp, lsr r7
     e94:	07552704 	ldrbeq	r2, [r5, -r4, lsl #14]
     e98:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
     e9c:	000007d9 	ldrdeq	r0, [r0], -r9
     ea0:	f503007f 			; <UNDEFINED> instruction: 0xf503007f
     ea4:	01000001 	tsteq	r0, r1
     ea8:	0e6a7a11 			; <UNDEFINED> instruction: 0x0e6a7a11
     eac:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
     eb0:	2d091301 	stccs	3, cr1, [r9, #-4]
     eb4:	0b00000f 	bleq	ef8 <main+0xc>
     eb8:	00000434 	andeq	r0, r0, r4, lsr r4
	cli_tim;
     ebc:	3f0b1401 	svccc	0x000b1401
     ec0:	00000000 	andeq	r0, r0, r0
     ec4:	0003700b 	andeq	r7, r3, fp
	diag ("PicOS halted");
     ec8:	0a150100 	beq	5412d0 <__ccfg+0x521328>
	mdelay (500);
     ecc:	000005f3 	strdeq	r0, [r0], -r3
     ed0:	05f60b02 	ldrbeq	r0, [r6, #2818]!	; 0xb02
	setpowermode (2);
     ed4:	16010000 	strne	r0, [r1], -r0
	__PCB = NULL;
     ed8:	0005f30a 	andeq	pc, r5, sl, lsl #6
	release;
     edc:	5e0b0300 	cdppl	3, 0, cr0, cr11, cr0, {0}
     ee0:	01000007 	tsteq	r0, r7
     ee4:	05f30a17 	ldrbeq	r0, [r3, #2583]!	; 0xa17
     ee8:	0b040000 	bleq	100ef0 <__ccfg+0xe0f48>
int main (void) {
     eec:	0000025d 	andeq	r0, r0, sp, asr r2
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	f30a1801 	vsub.i8	d1, d10, d1
     ef4:	05000005 	streq	r0, [r0, #-5]
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef8:	00099c0b 	andeq	r9, r9, fp, lsl #24
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efc:	0a190100 	beq	641304 <__ccfg+0x62135c>
	system_init ();
     f00:	00000f2d 	andeq	r0, r0, sp, lsr #30
	tcv_init ();
     f04:	07de0b06 	ldrbeq	r0, [lr, r6, lsl #22]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f08:	1a010000 	bne	40f10 <__ccfg+0x20f68>
     f0c:	0005f30a 	andeq	pc, r5, sl, lsl #6
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	970b1a00 	strls	r1, [fp, -r0, lsl #20]
     f14:	01000005 	tsteq	r0, r5
     f18:	05f30a1b 	ldrbeq	r0, [r3, #2587]!	; 0xa1b
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f1c:	0b1b0000 	bleq	6c0f24 <__ccfg+0x6a0f7c>
     f20:	00000614 	andeq	r0, r0, r4, lsl r6
	delay (16, 0);
     f24:	f30a1c01 			; <UNDEFINED> instruction: 0xf30a1c01
     f28:	1c000005 	stcne	0, cr0, [r0], {5}
     f2c:	05f30800 	ldrbeq	r0, [r3, #2048]!	; 0x800
	__pi_release ();
     f30:	0f3d0000 	svceq	0x003d0000
     f34:	94090000 	strls	r0, [r9], #-0
     f38:	13000000 	movwne	r0, #0
     f3c:	007d0300 	rsbseq	r0, sp, r0, lsl #6
     f40:	1d010000 	stcne	0, cr0, [r1, #-0]
     f44:	000eae03 	andeq	sl, lr, r3, lsl #28
     f48:	01200a00 			; <UNDEFINED> instruction: 0x01200a00
static void killev (__pi_pcb_t *pid) {
     f4c:	0f7a091f 	svceq	0x007a091f
	wfun = (aword)(pid->code);
     f50:	ed0b0000 	stc	0, cr0, [fp, #-0]
	for_all_tasks (i) {
     f54:	01000009 	tsteq	r0, r9
		for (j = 0; j < nevents (i); j++) {
     f58:	097a0c20 	ldmdbeq	sl!, {r5, sl, fp}^
     f5c:	0b000000 	bleq	f64 <killev+0x18>
     f60:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
			    || i->Events [j] . Event == wfun
     f64:	f30a2101 	vrhadd.u8	d2, d10, d1
		for (j = 0; j < nevents (i); j++) {
     f68:	08000005 	stmdaeq	r0, {r0, r2}
			if (i->Events [j] . Event == (aword)pid
     f6c:	0009cf0b 	andeq	ip, r9, fp, lsl #30
     f70:	0a220100 	beq	881378 <__ccfg+0x8613d0>
     f74:	00000f2d 	andeq	r0, r0, sp, lsr #30
				wakeupev (i, j);
     f78:	00030009 	andeq	r0, r3, r9
     f7c:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i) {
     f80:	0f490323 	svceq	0x00490323
}
     f84:	7a080000 	bvc	200f8c <__ccfg+0x1e0fe4>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	9600000f 	strls	r0, [r0], -pc
static void qfree (aword *ch) {
     f8c:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f90:	00000094 	muleq	r0, r4, r0
	cc = (aword*)(mpools + MA_NP);
     f94:	bd290027 	stclt	0, cr0, [r9, #-156]!	; 0xffffff64
	m_setnextp (ch, chunk);
     f98:	01000009 	tsteq	r0, r9
	m_setnextp (cc, ch);
     f9c:	0f860825 	svceq	0x00860825
}
     fa0:	05010000 	streq	r0, [r1, #-0]
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa4:	00063003 	andeq	r3, r6, r3
     fa8:	00a22920 	adceq	r2, r2, r0, lsr #18
     fac:	27010000 	strcs	r0, [r1, -r0]
			m_setnextp (cc, m_nextp (chunk));
     fb0:	0005f306 	andeq	pc, r5, r6, lsl #6
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb4:	03050100 	movweq	r0, #20736	; 0x5100
     fb8:	20000628 	andcs	r0, r0, r8, lsr #12
     fbc:	000a3329 	andeq	r3, sl, r9, lsr #6
     fc0:	07280100 	streq	r0, [r8, -r0, lsl #2]!
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	0000003f 	andeq	r0, r0, pc, lsr r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	36030501 	strcc	r0, [r3], -r1, lsl #10
     fcc:	2920000b 	stmdbcs	r0!, {r0, r1, r3}
     fd0:	00000442 	andeq	r0, r0, r2, asr #8
			m_setnextp (cc, m_nextp (chunk));
     fd4:	8d052a01 	vstrhi	s4, [r5, #-4]
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	01000000 	mrseq	r0, (UNDEF: 0)
     fdc:	0b380305 	bleq	e01bf8 <__ccfg+0xde1c50>
     fe0:	81292000 			; <UNDEFINED> instruction: 0x81292000
     fe4:	01000004 	tsteq	r0, r4
     fe8:	0ea20a2c 	vfmaeq.f32	s0, s4, s25
     fec:	05010000 	streq	r0, [r1, #-0]
			if (m_size (chunk) >= m_size (ch))
     ff0:	000b3403 	andeq	r3, fp, r3, lsl #8
     ff4:	07ad2920 	streq	r2, [sp, r0, lsr #18]!
     ff8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
		chunk = m_nextp (chunk))
     ffc:	0010080b 	andseq	r0, r0, fp, lsl #16
    1000:	03050100 	movweq	r0, #20736	; 0x5100
    1004:	20000b30 	andcs	r0, r0, r0, lsr fp
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	0f3d0411 	svceq	0x003d0411
	diag_wait (a);
    100c:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
	diag_wchar (c, a);
    1010:	01006466 	tsteq	r0, r6, ror #8
    1014:	008d0530 	addeq	r0, sp, r0, lsr r5
}
    1018:	05010000 	streq	r0, [r1, #-0]
    101c:	00000003 	andeq	r0, r0, r3
	syserror (ESTATE, "state");
    1020:	db012b20 	blle	4bca8 <__ccfg+0x2bd00>
    1024:	01000001 	tsteq	r0, r1
    1028:	3c01066a 	stccc	6, cr0, [r1], {106}	; 0x6a
    102c:	08000001 	stmdaeq	r0, {r0}
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	01000004 	tsteq	r0, r4
void utimer_add (address ut) {
    1034:	0011ea9c 	mulseq	r1, ip, sl
    1038:	08cc2c00 	stmiaeq	ip, {sl, fp, sp}^
		if (__pi_utims [i] == NULL)
    103c:	6a010000 	bvs	41044 <__ccfg+0x2109c>
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	0009aa11 	andeq	sl, r9, r1, lsl sl
    1044:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "ut a");
    1048:	02b32d00 	adcseq	r2, r3, #0, 26
	__pi_utims [i] = ut;
    104c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
}
    1050:	00017017 	andeq	r7, r1, r7, lsl r0
    1054:	04c92d00 	strbeq	r2, [r9], #3328	; 0xd00
    1058:	90010000 	andls	r0, r1, r0
	*t = v;
    105c:	0001c21a 	andeq	ip, r1, sl, lsl r2
	TCI_RUN_AUXILIARY_TIMER;
    1060:	05622d00 	strbeq	r2, [r2, #-3328]!	; 0xfffff300
void update_n_wake (word min, Boolean force) {
    1064:	94010000 	strls	r0, [r1], #-0
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	0001e416 	andeq	lr, r1, r6, lsl r4
    106c:	03132d00 	tsteq	r3, #0, 26
    1070:	97010000 	strls	r0, [r1, -r0]
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1074:	0001ec19 	andeq	lr, r1, r9, lsl ip
    1078:	02ec2d00 	rsceq	r2, ip, #0, 26
    107c:	cb010000 	blgt	41084 <__ccfg+0x210dc>
    1080:	00022e1b 	andeq	r2, r2, fp, lsl lr
    1084:	03362d00 	teqeq	r6, #0, 26
    1088:	cd010000 	stcgt	0, cr0, [r1, #-0]
    108c:	0002361b 	andeq	r3, r2, fp, lsl r6
    1090:	00a92d00 	adceq	r2, r9, r0, lsl #26
    1094:	d3010000 	movwle	r0, #4096	; 0x1000
    1098:	0002461a 	andeq	r4, r2, sl, lsl r6
    109c:	01bf2d00 			; <UNDEFINED> instruction: 0x01bf2d00
    10a0:	d6010000 	strle	r0, [r1], -r0
    10a4:	00024e1a 	andeq	r4, r2, sl, lsl lr
		for_all_tasks (i) {
    10a8:	008a2d00 	addeq	r2, sl, r0, lsl #26
	__pi_mintk = znew + min;
    10ac:	e0010000 	and	r0, r1, r0
    10b0:	00026e1e 	andeq	r6, r2, lr, lsl lr
			if (!twaiting (i))
    10b4:	03db2d00 	bicseq	r2, fp, #0, 26
    10b8:	e6010000 	str	r0, [r1], -r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10bc:	00027e1c 	andeq	r7, r2, ip, lsl lr
    10c0:	05b82d00 	ldreq	r2, [r8, #3328]!	; 0xd00
    10c4:	ea010000 	b	410cc <__ccfg+0x21124>
    10c8:	00028c20 	andeq	r8, r2, r0, lsr #24
    10cc:	02d82d00 	sbcseq	r2, r8, #0, 26
    10d0:	f1010000 	setend	le
    10d4:	0002a61a 	andeq	sl, r2, sl, lsl r6
    10d8:	09862d00 	stmibeq	r6, {r8, sl, fp, sp}
    10dc:	fd010000 	stc2	0, cr0, [r1, #-0]
    10e0:	0002d01c 	andeq	sp, r2, ip, lsl r0
    10e4:	04962e00 	ldreq	r2, [r6], #3584	; 0xe00
    10e8:	02010000 	andeq	r0, r1, #0
				wakeuptm (i);
    10ec:	02e41e01 	rsceq	r1, r4, #1, 28
    10f0:	352e0000 	strcc	r0, [lr, #-0]!
		for_all_tasks (i) {
    10f4:	01000006 	tsteq	r0, r6
				d = i->Timer - znew;
    10f8:	f2240106 	vrhadd.s32	d0, d4, d6
    10fc:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
    1100:	00000018 	andeq	r0, r0, r8, lsl r0
		if ((word)(__pi_mintk - znew) < min) 
    1104:	21010901 	tstcs	r1, r1, lsl #18
    1108:	000002fa 	strdeq	r0, [r0], -sl
    110c:	0000452e 	andeq	r4, r0, lr, lsr #10
	__pi_old = znew;
    1110:	01100100 	tsteq	r0, r0, lsl #2
}
    1114:	00031422 	andeq	r1, r3, r2, lsr #8
	TCI_RUN_DELAY_TIMER;
    1118:	02102e00 	andseq	r2, r0, #0, 28
}
    111c:	13010000 	movwne	r0, #4096	; 0x1000
    1120:	031c1f01 	tsteq	ip, #1, 30
    1124:	722e0000 	eorvc	r0, lr, #0
    1128:	01000005 	tsteq	r0, r5
    112c:	3e1f011b 	mrccc	1, 0, r0, cr15, cr11, {0}
void proceed (word state) {
    1130:	2f000003 	svccs	0x00000003
	prcdstate (__pi_curr, state);
    1134:	00000170 	andeq	r0, r0, r0, ror r1
    1138:	000003a6 	andeq	r0, r0, r6, lsr #7
	release;
    113c:	00090c30 	andeq	r0, r9, r0, lsr ip
    1140:	126c0100 	rsbne	r0, ip, #0, 2
void __pi_wait (aword event, word state) {
    1144:	000005ed 	andeq	r0, r0, sp, ror #11
	sint j = nevents (__pi_curr);
    1148:	0003f831 	andeq	pc, r3, r1, lsr r8	; <UNPREDICTABLE>
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	11760100 	cmnne	r6, r0, lsl #2
    1150:	000005f3 	strdeq	r0, [r0], -r3
    1154:	05400305 	strbeq	r0, [r0, #-773]	; 0xfffffcfb
		syserror (ENEVENTS, "sw");
    1158:	38322000 	ldmdacc	r2!, {sp}
    115c:	73000000 	movwvc	r0, #0
	setestate (__pi_curr->Events [j], state, event);
    1160:	31000011 	tstcc	r0, r1, lsl r0
	incwait (__pi_curr);
    1164:	0000042d 	andeq	r0, r0, sp, lsr #8
	setestate (__pi_curr->Events [j], state, event);
    1168:	f30e9801 	vsub.i8	d9, d14, d1
}
    116c:	02000005 	andeq	r0, r0, #5
    1170:	33006f91 	movwcc	r6, #3985	; 0xf91
    1174:	0000031c 	andeq	r0, r0, ip, lsl r3
void __pi_trigger (aword event) {
    1178:	0000033e 	andeq	r0, r0, lr, lsr r3
	for_all_tasks (i) {
    117c:	00001191 	muleq	r0, r1, r1
		for (j = 0; j < nevents (i); j++) {
    1180:	00091e34 	andeq	r1, r9, r4, lsr lr
    1184:	01140100 	tsteq	r4, r0, lsl #2
    1188:	0005f30e 	andeq	pc, r5, lr, lsl #6
    118c:	6f910200 	svcvs	0x00910200
			if (i->Events [j] . Event == event) {
    1190:	12133500 	andsne	r3, r3, #0, 10
    1194:	025a0000 	subseq	r0, sl, #0
    1198:	02620000 	rsbeq	r0, r2, #0
				wakeupev (i, j);
    119c:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    11a0:	0011af0e 	andseq	sl, r1, lr, lsl #30
	for_all_tasks (i) {
    11a4:	12263600 	eorne	r3, r6, #0, 12
}
    11a8:	001e0000 	andseq	r0, lr, r0
aword __pi_join (aword pid, word st) {
    11ac:	35000000 	strcc	r0, [r0, #-0]
	for_all_tasks (i) {
    11b0:	00001213 	andeq	r1, r0, r3, lsl r2
    11b4:	00000298 	muleq	r0, r8, r2
	return 0;
    11b8:	000002a0 	andeq	r0, r0, r0, lsr #5
		if ((aword)i == pid) {
    11bc:	cd0ded01 	stcgt	13, cr14, [sp, #-4]
			__pi_wait (pid, st);
    11c0:	36000011 			; <UNDEFINED> instruction: 0x36000011
}
    11c4:	00001226 	andeq	r1, r0, r6, lsr #4
	for_all_tasks (i) {
    11c8:	00000035 	andeq	r0, r0, r5, lsr r0
    11cc:	12133700 	andsne	r3, r3, #0, 14
void delay (word d, word state) {
    11d0:	03060000 	movweq	r0, #24576	; 0x6000
	settstate (__pi_curr, state);
    11d4:	030e0000 	movweq	r0, #57344	; 0xe000
    11d8:	0c010000 	stceq	0, cr0, [r1], {-0}
    11dc:	26360d01 	ldrtcs	r0, [r6], -r1, lsl #26
    11e0:	4c000012 	stcmi	0, cr0, [r0], {18}
	update_n_wake (d, YES);
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	01380000 	teqeq	r8, r0
	__pi_curr->Timer = __pi_old + d;
    11ec:	0000029e 	muleq	r0, lr, r2
    11f0:	f3066101 	vrhadd.u8	d6, d6, d1
	inctimer (__pi_curr);
    11f4:	24000005 	strcs	r0, [r0], #-5
    11f8:	3c000001 	stccc	0, cr0, [r0], {1}
    11fc:	01000001 	tsteq	r0, r1
}
    1200:	0012139c 	mulseq	r2, ip, r3
    1204:	00743900 	rsbseq	r3, r4, r0, lsl #18
	if (fun == NULL)
    1208:	7a0b6201 	bvc	2d9a14 <__ccfg+0x2b9a6c>
		return (int) __pi_curr;
    120c:	02000009 	andeq	r0, r0, #9
    1210:	3a007091 	bcc	1d45c <__exidx_end+0x1852c>
	for_all_tasks (i)
    1214:	00024701 	andeq	r4, r2, r1, lsl #14
}
    1218:	09530100 	ldmdbeq	r3, {r8}^
		if (i->code == fun)
    121c:	00099e01 	andeq	r9, r9, r1, lsl #28
	for_all_tasks (i)
    1220:	12330100 	eorsne	r0, r3, #0, 2
    1224:	273b0000 	ldrcs	r0, [fp, -r0]!
    1228:	0100004e 	tsteq	r0, lr, asr #32
int __pi_strlen (const char *s) {
    122c:	09c01c53 	stmibeq	r0, {r0, r1, r4, r6, sl, fp, ip}^
	for (i = 0; *(s+i) != '\0'; i++);
    1230:	3c000000 	stccc	0, cr0, [r0], {-0}
}
    1234:	0007b801 	andeq	fp, r7, r1, lsl #16
	for (i = 0; *(s+i) != '\0'; i++);
    1238:	06340100 	ldrteq	r0, [r4], -r0, lsl #2
	while (n--)
    123c:	128b0101 	addne	r0, fp, #1073741824	; 0x40000000
    1240:	cc3b0000 	ldcgt	0, cr0, [fp], #-0
		*dest++ = *src++;
    1244:	01000008 	tsteq	r0, r8
    1248:	09aa1834 	stmibeq	sl!, {r2, r4, r5, fp, ip}
    124c:	ad300000 	ldcge	0, cr0, [r0, #-0]
	while (n--)
    1250:	01000007 	tsteq	r0, r7
}
    1254:	10082d34 	andne	r2, r8, r4, lsr sp
		*dest++ = c;
    1258:	722d0000 	eorvc	r0, sp, #0
void adddevfunc (devreqfun_t rf, int loc) {
    125c:	01000005 	tsteq	r0, r5
		syserror (EREQPAR, "addv");
    1260:	00da1d35 	sbcseq	r1, sl, r5, lsr sp
		syserror (ERESOURCE, "addv");
    1264:	d92d0000 	pushle	{}	; <UNPREDICTABLE>
	if (ioreq [loc] != NULL)
    1268:	01000006 	tsteq	r0, r6
    126c:	01062345 	tsteq	r6, r5, asr #6
		syserror (ERESOURCE, "addv");
    1270:	303d0000 	eorscc	r0, sp, r0
	ioreq [loc] = rf;
    1274:	00000491 	muleq	r0, r1, r4
}
    1278:	ee113701 	cdp	7, 1, cr3, cr1, cr1, {0}
    127c:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    1284:	00128b10 	andseq	r8, r2, r0, lsl fp
    1288:	11000000 	mrsne	r0, (UNDEF: 0)
    128c:	0009c004 	andeq	ip, r9, r4
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1290:	12333f00 	eorsne	r3, r3, #0, 30
    1294:	00c80000 	sbceq	r0, r8, r0
    1298:	01240000 			; <UNDEFINED> instruction: 0x01240000
		syserror (ENODEVICE, "io");
    129c:	9c010000 	stcls	0, cr0, [r1], {-0}
    12a0:	00001306 	andeq	r1, r0, r6, lsl #6
	if (len == 0)
    12a4:	00124236 	andseq	r4, r2, r6, lsr r2
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	00006300 	andeq	r6, r0, r0, lsl #6
    12ac:	124e4000 	subne	r4, lr, #0
	if (ret >= 0)
    12b0:	00810000 	addeq	r0, r1, r0
	if (ret == -1) {
    12b4:	72410000 	subvc	r0, r1, #0
    12b8:	00000012 	andeq	r0, r0, r2, lsl r0
		if (retry == WNONE)
    12bc:	d2000000 	andle	r0, r0, #0
		iowait (dev, operation, retry);
    12c0:	40000012 	andmi	r0, r0, r2, lsl r0
    12c4:	00001273 	andeq	r1, r0, r3, ror r2
    12c8:	00000098 	muleq	r0, r8, r0
			release;
    12cc:	00127f42 	andseq	r7, r2, r2, asr #30
	if (ret == -2) {
    12d0:	33430000 	movtcc	r0, #12288	; 0x3000
		if (retry != WNONE) {
    12d4:	06000012 			; <UNDEFINED> instruction: 0x06000012
    12d8:	20000001 	andcs	r0, r0, r1
			iowait (dev, operation, retry);
    12dc:	01000000 	mrseq	r0, (UNDEF: 0)
    12e0:	42360634 	eorsmi	r0, r6, #52, 12	; 0x3400000
			(ioreq [dev]) (NONE, buf, len);
    12e4:	ab000012 	blge	1334 <__pi_malloc_init+0x18>
    12e8:	44000000 	strmi	r0, [r0], #-0
    12ec:	00000020 	andeq	r0, r0, r0, lsr #32
		(ioreq [dev]) (NONE, buf, len);
    12f0:	00124e42 	andseq	r4, r2, r2, asr #28
    12f4:	125a4500 	subsne	r4, sl, #0, 10
    12f8:	66460000 	strbvs	r0, [r6], -r0
}
    12fc:	06000012 			; <UNDEFINED> instruction: 0x06000012
	if (retry != WNONE) {
    1300:	00000001 	andeq	r0, r0, r1
		delay (-ret - 2, retry);
    1304:	13470000 	movtne	r0, #28672	; 0x7000
    1308:	00000012 	andeq	r0, r0, r2, lsl r0
    130c:	00000000 	andeq	r0, r0, r0
    1310:	01000000 	mrseq	r0, (UNDEF: 0)
		release;
    1314:	1226369c 	eorne	r3, r6, #156, 12	; 0x9c00000
    1318:	00be0000 	adcseq	r0, lr, r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	00000000 	andeq	r0, r0, r0
    1320:	0000148c 	andeq	r1, r0, ip, lsl #9
    1324:	03d80003 	bicseq	r0, r8, #3
    1328:	01040000 	mrseq	r0, (UNDEF: 4)
    132c:	000000bd 	strheq	r0, [r0], -sp
		syserror (ERESOURCE, "mal1");
    1330:	000ef30c 	andeq	pc, lr, ip, lsl #6
    1334:	00066800 	andeq	r6, r6, r0, lsl #16
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1338:	0004e000 	andeq	lr, r4, r0
    133c:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1340:	00052600 	andeq	r2, r5, r0, lsl #12
	m_size (mpools [0]) = mlen - m_hdrlen;
    1344:	06010200 	streq	r0, [r1], -r0, lsl #4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1348:	000008de 	ldrdeq	r0, [r0], -lr
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    134c:	a3050202 	movwge	r0, #20994	; 0x5202
    1350:	03000007 	movweq	r0, #7
}
    1354:	00002667 	andeq	r2, r0, r7, ror #12
    1358:	3f182810 	svccc	0x00182810
    135c:	02000000 	andeq	r0, r0, #0
    1360:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    1364:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1368:	0005e805 	andeq	lr, r5, r5, lsl #16
void __pi_free (aword *ch) {
    136c:	08350300 	ldmdaeq	r5!, {r8, r9}
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    1374:	00005918 	andeq	r5, r0, r8, lsl r9
		syserror (EMALLOC, "malg");
    1378:	08010200 	stmdaeq	r1, {r9}
    137c:	000008dc 	ldrdeq	r0, [r0], -ip
	mcfree [MA_NP] += m_size (ch);
    1380:	0003d203 	andeq	sp, r3, r3, lsl #4
		m_size (ch) ^= MALLOC_UMASK;
    1384:	19311000 	ldmdbne	r1!, {ip}
    1388:	0000006c 	andeq	r0, r0, ip, rrx
	mcfree [MA_NP] += m_size (ch);
    138c:	aa070202 	bge	1c1b9c <__ccfg+0x1a1bf4>
	QFREE;
    1390:	03000009 	movweq	r0, #9
	if (mevent [MA_NP] . nwait) {
    1394:	000008f5 	strdeq	r0, [r0], -r5
    1398:	7f193410 	svcvc	0x00193410
		trigger ((aword)(&(mevent [MA_NP])));
    139c:	02000000 	andeq	r0, r0, #0
		mevent [MA_NP] . nwait --;
    13a0:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
}
    13a4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    13a8:	00039207 	andeq	r9, r3, r7, lsl #4
    13ac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    13b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
void kill (aword pid) {
    13b4:	9c070402 	cfstrsls	mvf0, [r7], {2}
		pid = (aword) __pi_curr;
    13b8:	03000003 	movweq	r0, #3
	j = NULL;
    13bc:	00000733 	andeq	r0, r0, r3, lsr r7
	for_all_tasks (i) {
    13c0:	4d122611 	ldcmi	6, cr2, [r2, #-68]	; 0xffffffbc
	syserror (EREQPAR, "kpi");
    13c4:	03000000 	movweq	r0, #0
    13c8:	000023d8 	ldrdeq	r2, [r0], -r8
		if ((aword)i == pid) {
    13cc:	60122711 	andsvs	r2, r2, r1, lsl r7
    13d0:	05000000 	streq	r0, [r0, #-0]
				__PCB = i->Next;
    13d4:	000000a7 	andeq	r0, r0, r7, lsr #1
			killev (i);
    13d8:	0000a706 	andeq	sl, r0, r6, lsl #14
			ufree (i);
    13dc:	0ec50300 	cdpeq	3, 12, cr0, cr5, cr0, {0}
			if (i == __pi_curr)
    13e0:	28110000 	ldmdacs	r1, {}	; <UNPREDICTABLE>
    13e4:	00003312 	andeq	r3, r0, r2, lsl r3
				release;
    13e8:	18f10300 	ldmne	r1!, {r8, r9}^
				j->Next = i->Next;
    13ec:	2b110000 	blcs	4413f4 <__ccfg+0x42144c>
    13f0:	00004d12 	andeq	r4, r0, r2, lsl sp
    13f4:	00c90600 	sbceq	r0, r9, r0, lsl #12
}
    13f8:	c9050000 	stmdbgt	r5, {}	; <UNPREDICTABLE>
    13fc:	03000000 	movweq	r0, #0
    1400:	00002429 	andeq	r2, r0, r9, lsr #8
	if (size < 8)
    1404:	73122c11 	tstvc	r2, #4352	; 0x1100
		_size = 2;
    1408:	05000000 	streq	r0, [r0, #-0]
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    140c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
		_size = (((aword)size) + 3) >> 2;
    1410:	0004fb03 	andeq	pc, r4, r3, lsl #22
		if (m_magic (chunk) != MALLOC_MAGIC)
    1414:	122d1100 	eorne	r1, sp, #0, 2
		_size = (((aword)size) + 3) >> 2;
    1418:	00000073 	andeq	r0, r0, r3, ror r0
		if (mevent [MA_NP] . nfail != 255)
    141c:	00087503 	andeq	r7, r8, r3, lsl #10
    1420:	102e1100 	eorne	r1, lr, r0, lsl #2
			mevent [MA_NP] . nfail ++;
    1424:	00000108 	andeq	r0, r0, r8, lsl #2
		mnfree [MA_NP] = 0;
    1428:	00a70407 	adceq	r0, r7, r7, lsl #8
    142c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1430:	9c093211 	sfmls	f3, 4, [r9], {17}
    1434:	09000001 	stmdbeq	r0, {r0}
			syserror (EMALLOC, "malc");
    1438:	0000003e 	andeq	r0, r0, lr, lsr r0
    143c:	c9073411 	stmdbgt	r7, {r0, r4, sl, ip, sp}
		if (m_size (chunk) >= _size)
    1440:	01000000 	mrseq	r0, (UNDEF: 0)
    1444:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
		chunk = m_nextp (chunk)) {
    1448:	00000501 	andeq	r0, r0, r1, lsl #10
		m_setnextp (cc, m_nextp (chunk));
    144c:	c9033511 	stmdbgt	r3, {r0, r4, r8, sl, ip, sp}
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1450:	01000000 	mrseq	r0, (UNDEF: 0)
    1454:	09000601 	stmdbeq	r0, {r0, r9, sl}
			m_size (chunk) = _size;
    1458:	00000237 	andeq	r0, r0, r7, lsr r2
			cc = chunk + _size + m_hdrlen;
    145c:	c9033611 	stmdbgt	r3, {r0, r4, r9, sl, ip, sp}
    1460:	01000000 	mrseq	r0, (UNDEF: 0)
			m_size (cc) = waste - m_hdrlen;
    1464:	09000501 	stmdbeq	r0, {r0, r8, sl}
			QFREE;
    1468:	0000053b 	andeq	r0, r0, fp, lsr r5
		mevent [MA_NP] . nfail = 0;
    146c:	c9033711 	stmdbgt	r3, {r0, r4, r8, r9, sl, ip, sp}
		mcfree [MA_NP] -= m_size (chunk);
    1470:	01000000 	mrseq	r0, (UNDEF: 0)
    1474:	09000401 	stmdbeq	r0, {r0, sl}
    1478:	000007c4 	andeq	r0, r0, r4, asr #15
    147c:	c9033811 	stmdbgt	r3, {r0, r4, fp, ip, sp}
		m_size (chunk) |= MALLOC_UMASK;
    1480:	01000000 	mrseq	r0, (UNDEF: 0)
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1484:	0a000004 	beq	149c <__pi_malloc+0x98>
		m_size (chunk) |= MALLOC_UMASK;
    1488:	00000508 	andeq	r0, r0, r8, lsl #10
			mnfree [MA_NP] = mcfree [MA_NP];
    148c:	c9073a11 	stmdbgt	r7, {r0, r4, r9, fp, ip, sp}
}
    1490:	01000000 	mrseq	r0, (UNDEF: 0)
    1494:	0006d20a 	andeq	sp, r6, sl, lsl #4
    1498:	033c1100 	teqeq	ip, #0, 2
    149c:	000000c9 	andeq	r0, r0, r9, asr #1
    14a0:	0a7c0a02 	beq	1f03cb0 <__ccfg+0x1ee3d08>
    14a4:	3d110000 	ldccc	0, cr0, [r1, #-0]
    14a8:	0000c903 	andeq	ip, r0, r3, lsl #18
aword __pi_fork (fsmcode func, aword data) {
    14ac:	070a0300 	streq	r0, [sl, -r0, lsl #6]
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	11000007 	tstne	r0, r7
    14b4:	00df083f 	sbcseq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    14b8:	00040000 	andeq	r0, r4, r0
		if ((j = __PCB) == NULL)
    14bc:	00028903 	andeq	r8, r2, r3, lsl #18
	i->Next = NULL;
    14c0:	03411100 	movteq	r1, #4352	; 0x1100
	i->data = data;
    14c4:	0000010e 	andeq	r0, r0, lr, lsl #2
		if ((j = __PCB) == NULL)
    14c8:	00019c06 	andeq	r9, r1, r6, lsl #24
}
    14cc:	05420b00 	strbeq	r0, [r2, #-2816]	; 0xfffff500
			for (; j->Next != NULL; j = j->Next);
    14d0:	43110000 	tstmi	r1, #0
    14d4:	0001a81a 	andeq	sl, r1, sl, lsl r8
	return (aword) i;
    14d8:	0b010100 	bleq	418e0 <__ccfg+0x21938>
    14dc:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
	if (mevent [MA_NP] . nwait != 255)
    14e0:	c90e4511 	stmdbgt	lr, {r0, r4, r8, sl, lr}
    14e4:	01000001 	tsteq	r0, r1
    14e8:	cf040701 	svcgt	0x00040701
		mevent [MA_NP] . nwait ++;
    14ec:	02000001 	andeq	r0, r0, #1
	wait ((aword)(&(mevent [MA_NP])), state);
    14f0:	08e50801 	stmiaeq	r5!, {r0, fp}^
    14f4:	cf050000 	svcgt	0x00050000
void diag (const char *mess, ...) {
    14f8:	0b000001 	bleq	1504 <diag+0xc>
    14fc:	00000292 	muleq	r0, r2, r2
    1500:	c91e4511 	ldmdbgt	lr, {r0, r4, r8, sl, lr}
	diag_disable_int (a, is);
    1504:	01000001 	tsteq	r0, r1
    1508:	12080801 	andne	r0, r8, #65536	; 0x10000
    150c:	021a098f 	andseq	r0, sl, #2342912	; 0x23c000
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	050a0000 	streq	r0, [sl, #-0]
	diag_disable_int (a, is);
    1514:	12000006 	andne	r0, r0, #6
	while (*mess != '\0') {
    1518:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
	dgout ('\r');
    151c:	0a000000 	beq	1524 <diag+0x2c>
	dgout ('\n');
    1520:	00000bae 	andeq	r0, r0, lr, lsr #23
    1524:	a7089112 	smladge	r8, r2, r1, r9
    1528:	04000000 	streq	r0, [r0], #-0
	diag_wait (a);
    152c:	0001ea0a 	andeq	lr, r1, sl, lsl #20
	diag_enable_int (a, is);
    1530:	10921200 	addsne	r1, r2, r0, lsl #4
    1534:	000000d5 	ldrdeq	r0, [r0], -r5
}
    1538:	45030006 	strmi	r0, [r3, #-6]
    153c:	12000009 	andne	r0, r0, #9
    1540:	01e90393 			; <UNDEFINED> instruction: 0x01e90393
		if (*mess == '%') {
    1544:	1a050000 	bne	14154c <__ccfg+0x1215a4>
    1548:	0c000002 	stceq	0, cr0, [r0], {2}
			if (*mess == 'l') {
    154c:	0000021a 	andeq	r0, r0, sl, lsl r2
    1550:	00000236 	andeq	r0, r0, r6, lsr r2
				mess++;
    1554:	130b000d 	movwne	r0, #45069	; 0xb00d
				val = va_arg (ap, lword);
    1558:	12000007 	andne	r0, r0, #7
				bc = 32;
    155c:	022b0f99 	eoreq	r0, fp, #612	; 0x264
				bc = 16;
    1560:	01010000 	mrseq	r0, (UNDEF: 1)
			switch (*mess) {
    1564:	00da0407 	sbcseq	r0, sl, r7, lsl #8
    1568:	01080000 	mrseq	r0, (UNDEF: 8)
    156c:	74099113 	strvc	r9, [r9], #-275	; 0xfffffeed
				dgout ('%');
    1570:	09000002 	stmdbeq	r0, {r1}
    1574:	0000070e 	andeq	r0, r0, lr, lsl #14
				dgout (*mess);
    1578:	c9079313 	stmdbgt	r7, {r0, r1, r4, r8, r9, ip, pc}
    157c:	01000000 	mrseq	r0, (UNDEF: 0)
			switch (*mess) {
    1580:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
					v = __pi_hex_enc_table [
    1584:	0000047c 	andeq	r0, r0, ip, ror r4
					i += 4;
    1588:	c9039413 	stmdbgt	r3, {r0, r1, r4, sl, ip, pc}
					(val >> (bc - i)) & 0xf];
    158c:	01000000 	mrseq	r0, (UNDEF: 0)
    1590:	00000001 	andeq	r0, r0, r1
					dgout (v);
    1594:	0007d003 	andeq	sp, r7, r3
    1598:	03961300 	orrseq	r1, r6, #0, 6
				while (i < bc) {
    159c:	0000024a 	andeq	r0, r0, sl, asr #4
			mess++;
    15a0:	00027405 	andeq	r7, r2, r5, lsl #8
					d /= 10;
    15a4:	02800c00 	addeq	r0, r0, #0, 24
				if ((val >> (bc - 1)) & 1) {
    15a8:	02900000 	addseq	r0, r0, #0
    15ac:	000d0000 	andeq	r0, sp, r0
					dgout ('-');
    15b0:	00028505 	andeq	r8, r2, r5, lsl #10
    15b4:	034b0b00 	movteq	r0, #47872	; 0xbb00
						val |= 0xffff0000;
    15b8:	9c130000 	ldcls	0, cr0, [r3], {-0}
    15bc:	00029017 	andeq	r9, r2, r7, lsl r0
    15c0:	0c010100 	stfeqs	f0, [r1], {-0}
				d = (bc == 16) ? 10000 : 1000000000;
    15c4:	000000b3 	strheq	r0, [r0], -r3
    15c8:	000002ae 	andeq	r0, r0, lr, lsr #5
    15cc:	a305000d 	movwge	r0, #20493	; 0x500d
					v = (word) (val / d);
    15d0:	0b000002 	bleq	15e0 <diag+0xe8>
					if (v || d == 1) break;
    15d4:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    15d8:	ae130614 	mrcge	6, 0, r0, cr3, cr4, {0}
					d /= 10;
    15dc:	01000002 	tsteq	r0, r2
				d = (bc == 16) ? 10000 : 1000000000;
    15e0:	06b40b01 	ldrteq	r0, [r4], r1, lsl #22
					dgout (v + '0');
    15e4:	c3120000 	tstgt	r2, #0
    15e8:	0000df0e 	andeq	sp, r0, lr, lsl #30
    15ec:	0e010100 	adfeqs	f0, f1, f0
					d /= 10;
    15f0:	000008fe 	strdeq	r0, [r0], -lr
					val = val - (v * d);
    15f4:	10016e15 	andne	r6, r1, r5, lsl lr
					if (d == 0) break;
    15f8:	000002dc 	ldrdeq	r0, [r0], -ip
					v = (word) (val / d);
    15fc:	02e20407 	rsceq	r0, r2, #117440512	; 0x7000000
    1600:	010f0000 	mrseq	r0, CPSR
				if (bc == 16)
    1604:	000002ee 	andeq	r0, r0, lr, ror #5
				d = (bc == 16) ? 10000 : 1000000000;
    1608:	0000a710 	andeq	sl, r0, r0, lsl r7
					val &= 0xffff;
    160c:	d60c0000 	strle	r0, [ip], -r0
					dgout (*s);
    1610:	f9000001 			; <UNDEFINED> instruction: 0xf9000001
					s++;
    1614:	0d000002 	stceq	0, cr0, [r0, #-8]
				while (*s != '\0') {
    1618:	02ee0500 	rsceq	r0, lr, #0, 10
    161c:	67110000 	ldrvs	r0, [r1, -r0]
			dgout (*mess++);
    1620:	15000007 	strne	r0, [r0, #-7]
    1624:	f916017f 			; <UNDEFINED> instruction: 0xf916017f
    1628:	01000002 	tsteq	r0, r2
    162c:	032e1101 			; <UNDEFINED> instruction: 0x032e1101
    1630:	82150000 	andshi	r0, r5, #0
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1634:	00eb1401 	rsceq	r1, fp, r1, lsl #8
    1638:	01010000 	mrseq	r0, (UNDEF: 1)
    163c:	00030b11 	andeq	r0, r3, r1, lsl fp
    1640:	02d81500 	sbcseq	r1, r8, #0, 10
	^ entropy
    1644:	0000df0e 	andeq	sp, r0, lr, lsl #30
}
    1648:	12010100 	andne	r0, r1, #0, 2
    164c:	03031508 	movweq	r1, #13576	; 0x3508
    1650:	00035209 	andeq	r5, r3, r9, lsl #4
    1654:	375c1300 	ldrbcc	r1, [ip, -r0, lsl #6]
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1658:	07150000 	ldreq	r0, [r5, -r0]
	word cs = size + hblenb;
    165c:	00a70703 	adceq	r0, r7, r3, lsl #14
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1660:	13000000 	movwne	r0, #0
    1664:	00000b06 	andeq	r0, r0, r6, lsl #22
	p -> length = size;
    1668:	08030815 	stmdaeq	r3, {r0, r2, r4, fp}
}
    166c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	if (p->attributes.b.queued) {
    1670:	c30e0004 	movwgt	r0, #57348	; 0xe004
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1674:	15000003 	strne	r0, [r0, #-3]
    1678:	2b030309 	blcs	c22a4 <__ccfg+0xa22fc>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    167c:	14000003 	strne	r0, [r0], #-3
		p->attributes.b.queued = 0;
    1680:	00000033 	andeq	r0, r0, r3, lsr r0
    1684:	030b1530 	movweq	r1, #46384	; 0xb530
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1688:	0003c208 	andeq	ip, r3, r8, lsl #4
	deq (p);	// Remove from queue
    168c:	1a071300 	bne	1c6294 <__ccfg+0x1a62ec>
}
    1690:	14150000 	ldrne	r0, [r5], #-0
	tfree ((address)p);
    1694:	00a70803 	adceq	r0, r7, r3, lsl #16
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	13000000 	movwne	r0, #0
    169c:	000008a8 	andeq	r0, r0, r8, lsr #17
    16a0:	08031515 	stmdaeq	r3, {r0, r2, r4, r8, sl, ip}
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a4:	000000a7 	andeq	r0, r0, r7, lsr #1
    16a8:	48cc1302 	stmiami	ip, {r1, r8, r9, ip}^
	if (q_empty (q))
    16ac:	16150000 	ldrne	r0, [r5], -r0
    16b0:	02cf0b03 	sbceq	r0, pc, #3072	; 0xc00
		trigger (q);
    16b4:	13040000 	movwne	r0, #16384	; 0x4000
	if (p->attributes.b.urgent) {
    16b8:	0000432f 	andeq	r4, r0, pc, lsr #6
		p->u.bqueue.next = q->next;
    16bc:	09031715 	stmdbeq	r3, {r0, r2, r4, r8, r9, sl, ip}
		p->u.bqueue.prev = q;
    16c0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		q->next->prev = (qitem_t*) p;
    16c4:	00071308 	andeq	r1, r7, r8, lsl #6
	p->attributes.b.queued = 1;
    16c8:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    16cc:	03c20f03 	biceq	r0, r2, #3, 30
}
    16d0:	130c0000 	movwne	r0, #49152	; 0xc000
		p->u.bqueue.prev = q->prev;
    16d4:	00000726 	andeq	r0, r0, r6, lsr #14
		q->prev->next = (qitem_t*) p;
    16d8:	15031915 	strne	r1, [r3, #-2325]	; 0xfffff6eb
		q->prev = (qitem_t*) p;
    16dc:	000003d2 	ldrdeq	r0, [r0], -r2
    16e0:	520c002c 	andpl	r0, ip, #44	; 0x2c
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e4:	d2000003 	andle	r0, r0, #3
	deq (p);	// Soft dequeue, timer and hook left intact
    16e8:	15000003 	strne	r0, [r0, #-3]
	switch (dv) {
    16ec:	00000094 	muleq	r0, r4, r0
    16f0:	04070003 	streq	r0, [r7], #-3
    16f4:	0000035f 	andeq	r0, r0, pc, asr r3
    16f8:	00089d0e 	andeq	r9, r8, lr, lsl #26
			p->attributes.b.urgent = 1;
    16fc:	031c1500 	tsteq	ip, #0, 10
    1700:	00035f1b 	andeq	r5, r3, fp, lsl pc
			verify_ses (p, "dispose ses");
    1704:	087d1100 	ldmdaeq	sp!, {r8, ip}^
    1708:	1e150000 	cdpne	0, 1, cr0, cr5, cr0, {0}
    170c:	03f41403 	mvnseq	r1, #50331648	; 0x3000000
    1710:	01010000 	mrseq	r0, (UNDEF: 1)
    1714:	03d80407 	bicseq	r0, r8, #117440512	; 0x7000000
			verify_phy (p, "dispose phy");
    1718:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
    171c:	16000005 	strne	r0, [r0], -r5
}
    1720:	00a7131d 	adceq	r1, r7, sp, lsl r3
			enq (oqueues [p->attributes.b.phys], p);
    1724:	01010000 	mrseq	r0, (UNDEF: 1)
			p->attributes.b.urgent = 1;
    1728:	00023e0b 	andeq	r3, r2, fp, lsl #28
    172c:	1a1e1600 	bne	786f34 <__ccfg+0x766f8c>
			verify_phy (p, "dispose phy");
    1730:	000000b8 	strheq	r0, [r0], -r8
    1734:	ea0b0101 	b	2c1b40 <__ccfg+0x2a1b98>
    1738:	16000008 	strne	r0, [r0], -r8
    173c:	00b8241e 	adcseq	r2, r8, lr, lsl r4
    1740:	01010000 	mrseq	r0, (UNDEF: 1)
    1744:	0009060b 	andeq	r0, r9, fp, lsl #12
			enq (oqueues [p->attributes.b.phys], p);
    1748:	14221600 	strtne	r1, [r2], #-1536	; 0xfffffa00
    174c:	000003f4 	strdeq	r0, [r0], -r4
}
    1750:	ea030101 	b	c1b5c <__ccfg+0xa1bb4>
			rlp (p);
    1754:	1600000a 	strne	r0, [r0], -sl
}
    1758:	043e1043 	ldrteq	r1, [lr], #-67	; 0xffffffbd
    175c:	04070000 	streq	r0, [r7], #-0
    1760:	00000444 	andeq	r0, r0, r4, asr #8
    1764:	0450010f 	ldrbeq	r0, [r0], #-271	; 0xfffffef1
    1768:	8d100000 	ldchi	0, cr0, [r0, #-0]
    176c:	00000000 	andeq	r0, r0, r0
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1770:	46160808 	ldrmi	r0, [r6], -r8, lsl #16
	if (b->attributes.b.outgoing) {
    1774:	00047409 	andeq	r7, r4, r9, lsl #8
	b = header (p);
    1778:	10470a00 	subne	r0, r7, r0, lsl #20
	if (b->attributes.b.outgoing) {
    177c:	4a160000 	bmi	581784 <__ccfg+0x5617dc>
		verify_ses (b, "tcv02");
    1780:	0004320f 	andeq	r3, r4, pc, lsl #4
    1784:	420a0000 	andmi	r0, sl, #0
    1788:	1600000d 	strne	r0, [r0], -sp
    178c:	008d074b 	addeq	r0, sp, fp, asr #14
    1790:	00040000 	andeq	r0, r4, r0
		verify_plg (b, tcv_out, "tcv03");
    1794:	000b7003 	andeq	r7, fp, r3
    1798:	034c1600 	movteq	r1, #50688	; 0xc600
    179c:	00000450 	andeq	r0, r0, r0, asr r4
    17a0:	00047405 	andeq	r7, r4, r5, lsl #8
    17a4:	00fc0c00 	rscseq	r0, ip, r0, lsl #24
    17a8:	04950000 	ldreq	r0, [r5], #0
    17ac:	94150000 	ldrls	r0, [r5], #-0
    17b0:	03000000 	movweq	r0, #0
    17b4:	0eba0b00 	vmoveq.f64	d0, #160	; 0xc1000000 -8.0
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b8:	0d010000 	stceq	0, cr0, [r1, #-0]
}
    17bc:	00048512 	andeq	r8, r4, r2, lsl r5
		dispose (b, plugins [b->attributes.b.plugin] ->
    17c0:	0c010100 	stfeqs	f0, [r1], {-0}
		rlp (b);
    17c4:	00000480 	andeq	r0, r0, r0, lsl #9
}
    17c8:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
		rlp (b);
    17cc:	00009415 	andeq	r9, r0, r5, lsl r4
    17d0:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    17d4:	000004a3 	andeq	r0, r0, r3, lsr #9
    17d8:	000ed616 	andeq	sp, lr, r6, lsl r6
    17dc:	18cf0100 	stmiane	pc, {r8}^	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17e0:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    17e4:	0000eb0c 	andeq	lr, r0, ip, lsl #22
    17e8:	0004d400 	andeq	sp, r4, r0, lsl #8
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17ec:	00941500 	addseq	r1, r4, r0, lsl #10
	va_start (ap, plid);
    17f0:	00100000 	andseq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f4:	0004c405 	andeq	ip, r4, r5, lsl #8
    17f8:	0cd31700 	ldcleq	7, cr1, [r3], {0}
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17fc:	ec010000 	stc	0, cr0, [r1], {-0}
    1800:	0004d40d 	andeq	sp, r4, sp, lsl #8
    1804:	03050100 	movweq	r0, #20736	; 0x5100
    1808:	00004420 	andeq	r4, r0, r0, lsr #8
			syserror (ENODEVICE, "tcv04");
    180c:	000b4f18 	andeq	r4, fp, r8, lsl pc
		syserror (EMALLOC, "tcv05");
    1810:	010c0100 	mrseq	r0, (UNDEF: 28)
	attp.b.outgoing = 1;
    1814:	0000a70d 	andeq	sl, r0, sp, lsl #14
    1818:	42030500 	andmi	r0, r3, #0, 10
    181c:	19200005 	stmdbne	r0!, {r0, r2}
    1820:	00000236 	andeq	r0, r0, r6, lsr r2
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1824:	0802d001 	stmdaeq	r2, {r0, ip, lr, pc}
		if (descriptors [fd] == NULL)
    1828:	0b3c0305 	bleq	f02444 <__ccfg+0xee249c>
    182c:	a70c2000 	strge	r2, [ip, -r0]
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1830:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
		return ERROR;
    1834:	15000005 	strne	r0, [r0, #-5]
}
    1838:	00000094 	muleq	r0, r4, r0
    183c:	d0180000 	andsle	r0, r8, r0
    1840:	0100000a 	tsteq	r0, sl
	s->attpattern.b.session = fd;
    1844:	0e0d02d2 	mcreq	2, 0, r0, cr13, cr2, {6}
    1848:	05000005 	streq	r0, [r0, #-5]
	descriptors [fd] = s;
    184c:	00054403 	andeq	r4, r5, r3, lsl #8
	q_init (&(s->rqueue));
    1850:	02c11920 	sbceq	r1, r1, #32, 18	; 0x80000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1854:	8c010000 	stchi	0, cr0, [r1], {-0}
    1858:	03050704 	movweq	r0, #22276	; 0x5704
    185c:	20000b44 	andcs	r0, r0, r4, asr #22
    1860:	0ac4011a 	beq	ff101cd0 <_estack+0xdf0fccd0>
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1864:	72010000 	andvc	r0, r1, #0
    1868:	8d010505 	cfstr32hi	mvfx0, [r1, #-20]	; 0xffffffec
    186c:	ec000000 	stc	0, cr0, [r0], {-0}
	descriptors [fd] = s;
    1870:	4c00000e 	stcmi	0, cr0, [r0], {14}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1874:	0100000f 	tsteq	r0, pc
    1878:	0005849c 	muleq	r5, ip, r4
	if (s == NULL)
    187c:	04c81b00 	strbeq	r1, [r8], #2816	; 0xb00
		syserror (EMALLOC, "tcv05");
    1880:	05720000 	ldrbeq	r0, [r2, #-0]!
    1884:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
    1888:	05760100 	ldrbeq	r0, [r6, #-256]!	; 0xffffff00
    188c:	0000bd11 	andeq	fp, r0, r1, lsl sp
    1890:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    1894:	2e000011 	mcrcs	0, 0, r0, cr0, cr1, {0}
    1898:	3000000f 	andcc	r0, r0, pc
    189c:	0100000f 	tsteq	r0, pc
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18a0:	0002058d 	andeq	r0, r2, sp, lsl #11
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a4:	0d5c011e 	ldfeqe	f0, [ip, #-120]	; 0xffffff88
    18a8:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    18ac:	0c642105 	stfeqe	f2, [r4], #-20	; 0xffffffec
	plugins [ord] = pl;
    18b0:	0ebc0000 	cdpeq	0, 11, cr0, cr12, cr0, {0}
	return 0;
    18b4:	9c010000 	stcls	0, cr0, [r1], {-0}
		return ERROR;
    18b8:	000007e4 	andeq	r0, r0, r4, ror #15
}
    18bc:	000d691f 	andeq	r6, sp, pc, lsl r9
    18c0:	01080d00 	tsteq	r8, r0, lsl #26
	verify_fds (fd, "tcv16");
    18c4:	0011d020 	andseq	sp, r1, r0, lsr #32
								Boolean urg) {
    18c8:	000c6400 	andeq	r6, ip, r0, lsl #8
    18cc:	00032800 	andeq	r2, r3, r0, lsl #16
	verify_fds (fd, "tcv16");
    18d0:	056a0100 	strbeq	r0, [sl, #-256]!	; 0xffffff00
    18d4:	0005bf02 	andeq	fp, r5, r2, lsl #30
    18d8:	11df2100 	bicsne	r2, pc, r0, lsl #2
	verify_pld (s, tcv_frm, "tcv17");
    18dc:	22000000 	andcs	r0, r0, #0
    18e0:	00000812 	andeq	r0, r0, r2, lsl r8
    18e4:	00000c7e 	andeq	r0, r0, lr, ror ip
    18e8:	00000348 	andeq	r0, r0, r8, asr #6
    18ec:	b302270d 	movwlt	r2, #9997	; 0x270d
    18f0:	23000007 	movwcs	r0, #7
    18f4:	00000348 	andeq	r0, r0, r8, asr #6
    18f8:	00082024 	andeq	r2, r8, r4, lsr #32
	ptrs.head = (word) fd;
    18fc:	000d0c00 	andeq	r0, sp, r0, lsl #24
	ptrs.tail = (word) urg;
    1900:	125c2500 	subsne	r2, ip, #0, 10
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1904:	0c7e0000 	ldcleq	0, cr0, [lr], #-0
    1908:	03700000 	cmneq	r0, #0
		if (state != WNONE) {
    190c:	b3010000 	movwlt	r0, #4096	; 0x1000
    1910:	381d0404 	ldmdacc	sp, {r2, sl}
}
    1914:	f6000014 			; <UNDEFINED> instruction: 0xf6000014
			when (eid, state);
    1918:	0200000c 	andeq	r0, r0, #12
    191c:	0100000d 	tsteq	r0, sp
			release;
    1920:	1d0404a4 	cfstrsne	mvf0, [r4, #-656]	; 0xfffffd70
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1924:	0000125c 	andeq	r1, r0, ip, asr r2
    1928:	00000d0a 	andeq	r0, r0, sl, lsl #26
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    192c:	00000d0c 	andeq	r0, r0, ip, lsl #26
    1930:	0404aa01 	streq	sl, [r4], #-2561	; 0xfffff5ff
    1934:	0012c025 	andseq	ip, r2, r5, lsr #32
    1938:	000d2200 	andeq	r2, sp, r0, lsl #4
    193c:	00038800 	andeq	r8, r3, r0, lsl #16
    1940:	04bb0100 	ldrteq	r0, [fp], #256	; 0x100
		if (state != WNONE) {
    1944:	14432504 	strbne	r2, [r3], #-1284	; 0xfffffafc
    1948:	0d220000 	stceq	0, cr0, [r2, #-0]
			tmwait (state);
    194c:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    1950:	c5010000 	strgt	r0, [r1, #-0]
	b->attributes = s->attpattern;
    1954:	8e200404 	cdphi	4, 2, cr0, cr0, cr4, {0}
		b->attributes.b.urgent = 1;
    1958:	2a000012 	bcs	19a8 <tcvp_control+0x28>
    195c:	c800000d 	stmdagt	r0, {r0, r2, r3}
	b->u.pointers.head = ptrs.head;
    1960:	01000003 	tsteq	r0, r3
	b->u.pointers.tail = length;
    1964:	510404c0 	smlabtpl	r4, r0, r4, r0
	return (address) (b + 1);
    1968:	21000006 	tstcs	r0, r6
    196c:	0000129d 	muleq	r0, sp, r2
    1970:	125c1d00 	subsne	r1, ip, #0, 26
    1974:	0d3a0000 	ldceq	0, cr0, [sl, #-0]
    1978:	0d3c0000 	ldceq	0, cr0, [ip, #-0]
    197c:	c3010000 	movwgt	r0, #4096	; 0x1000
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	2d250404 	cfstrscs	mvf0, [r5, #-16]!
    1984:	3e000014 	mcrcc	0, 0, r0, cr0, cr4, {0}
    1988:	e800000d 	stmda	r0, {r0, r2, r3}
	verify_fph (phy, "tcv23");
    198c:	01000003 	tsteq	r0, r3
    1990:	200404d5 	ldrdcs	r0, [r4], -r5
    1994:	0000144e 	andeq	r1, r0, lr, asr #8
    1998:	00000d54 	andeq	r0, r0, r4, asr sp
}
    199c:	00000408 	andeq	r0, r0, r8, lsl #8
	return (physical [phy]) (opt, arg);
    19a0:	0404cc01 	streq	ip, [r4], #-3073	; 0xfffff3ff
    19a4:	0000068e 	andeq	r0, r0, lr, lsl #13
    19a8:	00145d21 	andseq	r5, r4, r1, lsr #26
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19ac:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
	if (opt < 0) {
    19b0:	78000012 	stmdavc	r0, {r1, r4}
		if (fd < 0)
    19b4:	7a00000d 	bvc	19f0 <tcv_control+0x44>
		if (opt == PHYSOPT_PLUGINFO) {
    19b8:	0100000d 	tsteq	r0, sp
			if (fd >= TCV_MAX_PLUGS)
    19bc:	250404df 	strcs	r0, [r4, #-1247]	; 0xfffffb21
			if ((p = plugins [fd]) == NULL)
    19c0:	00001438 	andeq	r1, r0, r8, lsr r4
    19c4:	00000d98 	muleq	r0, r8, sp
}
    19c8:	00000420 	andeq	r0, r0, r0, lsr #8
		if (fd >= TCV_MAX_PHYS)
    19cc:	0404e801 	streq	lr, [r4], #-2049	; 0xfffff7ff
		return physinfo [fd];
    19d0:	00127f25 	andseq	r7, r2, r5, lsr #30
    19d4:	000d9c00 	andeq	r9, sp, r0, lsl #24
	verify_fds (fd, "tcv22");
    19d8:	00043800 	andeq	r3, r4, r0, lsl #16
    19dc:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    19e0:	128e260d 	addne	r2, lr, #13631488	; 0xd00000
    19e4:	0da60000 	stceq	0, cr0, [r6]
    19e8:	0daa0000 	stceq	0, cr0, [sl]
}
    19ec:	ed010000 	stc	0, cr0, [r1, #-0]
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19f0:	06dc0404 	ldrbeq	r0, [ip], r4, lsl #8
    19f4:	9d210000 	stcls	0, cr0, [r1, #-0]
			return 0;
    19f8:	00000012 	andeq	r0, r0, r2, lsl r0
    19fc:	00144325 	andseq	r4, r4, r5, lsr #6
    1a00:	000dca00 	andeq	ip, sp, r0, lsl #20
    1a04:	00045000 	andeq	r5, r4, r0
    1a08:	04f70100 	ldrbteq	r0, [r7], #256	; 0x100
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a0c:	144e2004 	strbne	r2, [lr], #-4
    1a10:	0dcc0000 	stcleq	0, cr0, [ip]
	if (dsp != TCV_DSP_PASS) {
    1a14:	04680000 	strbteq	r0, [r8], #-0
		if (ses == NONE)
    1a18:	fa010000 	blx	41a20 <__ccfg+0x21a78>
			syserror (EREQPAR, "tcv26");
    1a1c:	07080404 	streq	r0, [r8, -r4, lsl #8]
		verify_fds (ses, "tcv27");
    1a20:	5d210000 	stcpl	0, cr0, [r1, #-0]
    1a24:	00000014 	andeq	r0, r0, r4, lsl r0
    1a28:	0012b61d 	andseq	fp, r2, sp, lsl r6
    1a2c:	000dd400 	andeq	sp, sp, r0, lsl #8
    1a30:	000dd800 	andeq	sp, sp, r0, lsl #16
		if ((p = apb (size)) != NULL) {
    1a34:	04fd0100 	ldrbteq	r0, [sp], #256	; 0x100
    1a38:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
		return NULL;
    1a3c:	0dd80000 	ldcleq	0, cr0, [r8]
			p->attributes = descriptors [ses] -> attpattern;
    1a40:	0dda0000 	ldcleq	0, cr0, [sl]
			dispose (p, dsp);
    1a44:	00010000 	andeq	r0, r1, r0
			p->attributes = descriptors [ses] -> attpattern;
    1a48:	95260405 	strls	r0, [r6, #-1029]!	; 0xfffffbfb
			p->attributes.b.outgoing = 0;
    1a4c:	e200000b 	and	r0, r0, #11
			dispose (p, dsp);
    1a50:	ee00000d 	cdp	0, 0, cr0, cr0, cr13, {0}
			return (address)(p + 1);
    1a54:	0100000d 	tsteq	r0, sp
    1a58:	5c04050d 	cfstr32pl	mvfx0, [r4], {13}
	if ((p = apb (size)) != NULL)
    1a5c:	27000007 	strcs	r0, [r0, -r7]
    1a60:	00001311 	andeq	r1, r0, r1, lsl r3
		return (address)(p + 1);
    1a64:	00000de2 	andeq	r0, r0, r2, ror #27
    1a68:	00000dec 	andeq	r0, r0, ip, ror #27
    1a6c:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
    1a70:	00132d21 	andseq	r2, r3, r1, lsr #26
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a74:	13202100 	nopne	{0}	; <UNPREDICTABLE>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a78:	00000000 	andeq	r0, r0, r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a7c:	00125c1d 	andseq	r5, r2, sp, lsl ip
    1a80:	000e1600 	andeq	r1, lr, r0, lsl #12
		syserror (EREQPAR, "tcv28");
    1a84:	000e1800 	andeq	r1, lr, r0, lsl #16
		syserror (EMALLOC, "tcv29");
    1a88:	053e0100 	ldreq	r0, [lr, #-256]!	; 0xffffff00
	physical [phy] = ps;
    1a8c:	12741d04 	rsbsne	r1, r4, #4, 26	; 0x100
	physinfo [phy] = info;
    1a90:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
    1a94:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a98:	41010000 	mrsmi	r0, (UNDEF: 1)
    1a9c:	5c1d0405 	cfldrspl	mvf0, [sp], {5}
    1aa0:	28000012 	stmdacs	r0, {r1, r4}
		syserror (EMALLOC, "tcv29");
    1aa4:	2a00000e 	bcs	1ae4 <tcvphy_rcv+0x20>
    1aa8:	0100000e 	tsteq	r0, lr
	q_init (q);
    1aac:	25040544 	strcs	r0, [r4, #-1348]	; 0xfffffabc
}
    1ab0:	0000127f 	andeq	r1, r0, pc, ror r2
    1ab4:	00000e2a 	andeq	r0, r0, sl, lsr #28
    1ab8:	00000480 	andeq	r0, r0, r0, lsl #9
    1abc:	0b054701 	bleq	1536c8 <__ccfg+0x133720>
    1ac0:	00146b25 	andseq	r6, r4, r5, lsr #22
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac4:	000e3200 	andeq	r3, lr, r0, lsl #4
	verify_fph (phy, "tcv30");
    1ac8:	00049800 	andeq	r9, r4, r0, lsl #16
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1acc:	054b0100 	strbeq	r0, [fp, #-256]	; 0xffffff00
    1ad0:	28000004 	stmdacs	r0, {r2}
	verify_fph (phy, "tcv30");
    1ad4:	000011ed 	andeq	r1, r0, sp, ror #3
    1ad8:	00000c98 	muleq	r0, r8, ip
    1adc:	00000c9a 	muleq	r0, sl, ip
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ae0:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
    1ae4:	000011f7 	strdeq	r1, [r0], -r7
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae8:	00000cc6 	andeq	r0, r0, r6, asr #25
    1aec:	00000cc8 	andeq	r0, r0, r8, asr #25
		if (plugins [plg] == NULL)
    1af0:	2802270d 	stmdacs	r2, {r0, r2, r3, r8, r9, sl, sp}
    1af4:	000011f7 	strdeq	r1, [r0], -r7
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af8:	00000e4c 	andeq	r0, r0, ip, asr #28
}
    1afc:	00000e4e 	andeq	r0, r0, lr, asr #28
    1b00:	0002270d 	andeq	r2, r2, sp, lsl #14
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b04:	0de2011a 	stfeqe	f0, [r2, #104]!	; 0x68
    1b08:	5c010000 	stcpl	0, cr0, [r1], {-0}
    1b0c:	a7010605 	strge	r0, [r1, -r5, lsl #12]
	...
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b18:	01000000 	mrseq	r0, (UNDEF: 0)
    1b1c:	0008129c 	muleq	r8, ip, r2
    1b20:	63732900 	cmnvs	r3, #0, 18
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b24:	055e0100 	ldrbeq	r0, [lr, #-256]	; 0xffffff00
	len -= (ap.head + ap.tail);
    1b28:	0000a707 	andeq	sl, r0, r7, lsl #14
    1b2c:	0000d100 	andeq	sp, r0, r0, lsl #2
    1b30:	fc2a0000 	stc2	0, cr0, [sl], #-0
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b34:	0100000c 	tsteq	r0, ip
    1b38:	0314048e 	tsteq	r4, #-1912602624	; 0x8e000000
    1b3c:	0000082a 	andeq	r0, r0, sl, lsr #16
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b40:	000f9e2b 	andeq	r9, pc, fp, lsr #28
    1b44:	04ad0100 	strteq	r0, [sp], #256	; 0x100
    1b48:	012c0001 			; <UNDEFINED> instruction: 0x012c0001
	return 1;
    1b4c:	00000ca9 	andeq	r0, r0, r9, lsr #25
    1b50:	06047e01 	streq	r7, [r4], -r1, lsl #28
    1b54:	000c4001 	andeq	r4, ip, r1
    1b58:	000c6400 	andeq	r6, ip, r0, lsl #8
    1b5c:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
	verify_fph (phy, "tcv32");
    1b60:	2d000008 	stccs	0, cr0, [r0, #-32]	; 0xffffffe0
    1b64:	00000040 	andeq	r0, r0, r0, asr #32
    1b68:	19047e01 	stmdbne	r4, {r0, r9, sl, fp, ip, sp, lr}
    1b6c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1b70:	000000e4 	andeq	r0, r0, r4, ror #1
    1b74:	2e011e00 	cdpcs	14, 0, cr1, cr1, cr0, {0}
	oq = oqueues [phy];
    1b78:	0100000b 	tsteq	r0, fp
	b = q_first (oq);
    1b7c:	88060401 	stmdahi	r6, {r0, sl}
	if (q_end (b, oq)) {
    1b80:	4000000a 	andmi	r0, r0, sl
	*len = b->length;
    1b84:	0100000c 	tsteq	r0, ip
	deq (b);	// Dequeue the packet ...
    1b88:	000a1e9c 	muleq	sl, ip, lr
}
    1b8c:	0bb22e00 	bleq	fec8d394 <_estack+0xdec88394>
		return NULL;
    1b90:	0bb80000 	bleq	fee01b98 <_estack+0xdedfcb98>
    1b94:	08860000 	stmeq	r6, {}	; <UNPREDICTABLE>
    1b98:	691c0000 	ldmdbvs	ip, {}	; <UNPREDICTABLE>
    1b9c:	046b0100 	strbteq	r0, [fp], #-256	; 0xffffff00
	verify_fph (phy, "tcv33");
    1ba0:	00008d0b 	andeq	r8, r0, fp, lsl #26
    1ba4:	43250000 			; <UNDEFINED> instruction: 0x43250000
    1ba8:	b2000014 	andlt	r0, r0, #20
    1bac:	0800000a 	stmdaeq	r0, {r1, r3}
    1bb0:	01000002 	tsteq	r0, r2
    1bb4:	20020408 	andcs	r0, r2, r8, lsl #8
	oq = oqueues [phy];
    1bb8:	00000f54 	andeq	r0, r0, r4, asr pc
	b = q_first (oq);
    1bbc:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
		return NULL;
    1bc0:	00000228 	andeq	r0, r0, r8, lsr #4
	return (address)(b + 1);
    1bc4:	02040b01 	andeq	r0, r4, #1024	; 0x400
}
    1bc8:	0000091a 	andeq	r0, r0, sl, lsl r9
    1bcc:	00022823 	andeq	r2, r2, r3, lsr #16
    1bd0:	0f612f00 	svceq	0x00612f00
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd4:	6d300000 	ldcvs	0, cr0, [r0, #-0]
	verify_plg (b, tcv_xmt, "tcv34");
    1bd8:	2800000f 	stmdacs	r0, {r0, r1, r2, r3}
	hblock_t *b = header (pkt);
    1bdc:	31000002 	tstcc	r0, r2
	verify_plg (b, tcv_xmt, "tcv34");
    1be0:	00000f6e 	andeq	r0, r0, lr, ror #30
    1be4:	000000f7 	strdeq	r0, [r0], -r7
    1be8:	0013c922 	andseq	ip, r3, r2, lsr #18
    1bec:	000abe00 	andeq	fp, sl, r0, lsl #28
    1bf0:	00024800 	andeq	r4, r2, r0, lsl #16
    1bf4:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    1bf8:	000008e7 	andeq	r0, r0, r7, ror #17
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bfc:	0013e521 	andseq	lr, r3, r1, lsr #10
}
    1c00:	13d82100 	bicsne	r2, r8, #0, 2
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c04:	22000000 	andcs	r0, r0, #0
    1c08:	000013f3 	strdeq	r1, [r0], -r3
    1c0c:	00000ac2 	andeq	r0, r0, r2, asr #21
}
    1c10:	00000260 	andeq	r0, r0, r0, ror #4
    while(1)
    1c14:	0104fe01 	tsteq	r4, r1, lsl #28	; <UNPREDICTABLE>
{
    1c18:	21000009 	tstcs	r0, r9
    SetupTrimDevice();
    1c1c:	00001402 	andeq	r1, r0, r2, lsl #8
    pui32Src = &_etext;
    1c20:	14103200 	ldrne	r3, [r0], #-512	; 0xfffffe00
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c24:	0ac60000 	beq	ff181c2c <_estack+0xdf17cc2c>
    __asm("    ldr     r0, =_bss\n"
    1c28:	02780000 	rsbseq	r0, r8, #0
    1c2c:	fc010000 	stc2	0, cr0, [r1], {-0}
    1c30:	141f2104 	ldrne	r2, [pc], #-260	; 1c38 <zero_loop+0x8>
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	10200000 	eorne	r0, r0, r0
   main();
    1c3c:	06000014 			; <UNDEFINED> instruction: 0x06000014
    FaultISR();
    1c40:	9000000b 	andls	r0, r0, fp
        *pui32Dest++ = *pui32Src++;
    1c44:	01000002 	tsteq	r0, r2
    1c48:	3502040e 	strcc	r0, [r2, #-1038]	; 0xfffffbf2
    1c4c:	21000009 	tstcs	r0, r9
    1c50:	0000141f 	andeq	r1, r0, pc, lsl r4
    1c54:	14102000 	ldrne	r2, [r0], #-0
    1c58:	0b080000 	bleq	201c60 <__ccfg+0x1e1cb8>
    1c5c:	02b00000 	adcseq	r0, r0, #0
    1c60:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
static byte get_byte () {
    1c64:	09500204 	ldmdbeq	r0, {r2, r9}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c68:	1f210000 	svcne	0x00210000
    1c6c:	00000014 	andeq	r0, r0, r4, lsl r0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c70:	0013f320 	andseq	pc, r3, r0, lsr #6
    1c74:	000b2200 	andeq	r2, fp, r0, lsl #4
		if (ee_inp)
    1c78:	0002c800 	andeq	ip, r2, r0, lsl #16
			b |= 1;
    1c7c:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    1c80:	00096b02 	andeq	r6, r9, r2, lsl #22
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c84:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
	for (b = 0, i = 0; i < 8; i++) {
    1c88:	26000000 	strcs	r0, [r0], -r0
}
    1c8c:	000013f3 	strdeq	r1, [r0], -r3
    1c90:	00000b28 	andeq	r0, r0, r8, lsr #22
    1c94:	00000b2a 	andeq	r0, r0, sl, lsr #22
static void put_byte (byte b) {
    1c98:	02040e01 	andeq	r0, r4, #1, 28
    1c9c:	00000986 	andeq	r0, r0, r6, lsl #19
    1ca0:	00140221 	andseq	r0, r4, r1, lsr #4
    1ca4:	34200000 	strtcc	r0, [r0], #-0
		if (b & 0x80)
    1ca8:	3a000012 	bcc	1cf8 <wwait+0x18>
    1cac:	e000000b 	and	r0, r0, fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cb0:	01000002 	tsteq	r0, r2
	for (i = 0; i < 8; i++) {
    1cb4:	a102041b 	tstge	r2, fp, lsl r4
		b <<= 1;
    1cb8:	21000009 	tstcs	r0, r9
	for (i = 0; i < 8; i++) {
    1cbc:	00001243 	andeq	r1, r0, r3, asr #4
}
    1cc0:	0ccb2600 	stcleq	6, cr2, [fp], {0}
    1cc4:	0b640000 	bleq	1901ccc <__ccfg+0x18e1d24>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc8:	0b8e0000 	bleq	fe381cd0 <_estack+0xde37ccd0>
    1ccc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
	put_byte (cmd);
    1cd0:	09c80204 	stmibeq	r8, {r2, r9}^
    1cd4:	43250000 			; <UNDEFINED> instruction: 0x43250000
}
    1cd8:	82000014 	andhi	r0, r0, #20
    1cdc:	f800000b 			; <UNDEFINED> instruction: 0xf800000b
static void wwait (word st, word del) {
    1ce0:	01000002 	tsteq	r0, r2
    1ce4:	00020301 	andeq	r0, r2, r1, lsl #6
    1ce8:	0012ab26 	andseq	sl, r2, r6, lsr #22
	while (dopen && (rdsr () & 1)) {
    1cec:	000b9e00 	andeq	r9, fp, r0, lsl #28
    1cf0:	000bb200 	andeq	fp, fp, r0, lsl #4
    1cf4:	04510100 	ldrbeq	r0, [r1], #-256	; 0xffffff00
    1cf8:	0009ef03 	andeq	lr, r9, r3, lsl #30
	put_byte (CMD_RDSR);
    1cfc:	12b61d00 	adcsne	r1, r6, #0, 26
	r = get_byte ();
    1d00:	0b9e0000 	bleq	fe781d08 <_estack+0xde77cd08>
    1d04:	0ba20000 	bleq	fe881d0c <_estack+0xde87cd0c>
	while (dopen && (rdsr () & 1)) {
    1d08:	140b0000 	strne	r0, [fp], #-0
}
    1d0c:	33000501 	movwcc	r0, #1281	; 0x501
		if (st == WNONE)
    1d10:	00000b95 	muleq	r0, r5, fp
    1d14:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
			mdelay (1);
    1d18:	00000310 	andeq	r0, r0, r0, lsl r3
    1d1c:	02047201 	andeq	r7, r4, #268435456	; 0x10000000
			delay (del, st);
    1d20:	00131133 	andseq	r1, r3, r3, lsr r1
    1d24:	000bb800 	andeq	fp, fp, r0, lsl #16
			release;
    1d28:	00031000 	andeq	r1, r3, r0
    1d2c:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
    1d30:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
static void ready () {
    1d34:	20210000 	eorcs	r0, r1, r0
	if (dopen) {
    1d38:	00000013 	andeq	r0, r0, r3, lsl r0
		wwait (WNONE, 1);
    1d3c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    1d40:	00000e09 	andeq	r0, r0, r9, lsl #28
    1d44:	0603ed01 	streq	lr, [r3], -r1, lsl #26
	dstat = 0;
    1d48:	0009a801 	andeq	sl, r9, r1, lsl #16
}
    1d4c:	0009e400 	andeq	lr, r9, r0, lsl #8
    1d50:	a79c0100 	ldrge	r0, [ip, r0, lsl #2]
    1d54:	3400000a 	strcc	r0, [r0], #-10
	udelay (1);
    1d58:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1d5c:	1c03ed01 	stcne	13, cr14, [r3], {1}
	udelay (1);
    1d60:	0000008d 	andeq	r0, r0, sp, lsl #1
		dopen = DOPEN_TEMP;
    1d64:	69295001 	stmdbvs	r9!, {r0, ip, lr}
    1d68:	03ef0100 	mvneq	r0, #0, 2
    1d6c:	00008d06 	andeq	r8, r0, r6, lsl #26
    1d70:	00011500 	andeq	r1, r1, r0, lsl #10
static void cclose () {
    1d74:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
	if (dopen == DOPEN_TEMP) {
    1d78:	03f00100 	mvnseq	r0, #0, 2
    1d7c:	0000df08 	andeq	sp, r0, r8, lsl #30
		wwait (WNONE, 1);
    1d80:	00013300 	andeq	r3, r1, r0, lsl #6
    1d84:	11ed2500 	mvnne	r2, r0, lsl #10
	cmd_0 (CMD_DP);
    1d88:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    1d8c:	01c80000 	biceq	r0, r8, r0
		dopen = 0;
    1d90:	f2010000 	vhadd.s8	d0, d1, d0
}
    1d94:	ac200203 	sfmge	f0, 4, [r0], #-12
word ee_open () {
    1d98:	ae000013 	mcrge	0, 0, r0, cr0, cr3, {0}
	ready ();
    1d9c:	e0000009 	and	r0, r0, r9
	dopen = DOPEN_PERM;
    1da0:	01000001 	tsteq	r0, r1
    1da4:	950303f5 	strls	r0, [r3, #-1013]	; 0xfffffc0b
}
    1da8:	3500000a 	strcc	r0, [r0, #-10]
	if (dopen) {
    1dac:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    1db0:	00000133 	andeq	r0, r0, r3, lsr r1
		dopen = DOPEN_TEMP;
    1db4:	11f71d00 	mvnsne	r1, r0, lsl #26
		cclose ();
    1db8:	09d20000 	ldmibeq	r2, {}^	; <UNPREDICTABLE>
}
    1dbc:	09d40000 	ldmibeq	r4, {}^	; <UNPREDICTABLE>
int ser_in (word st, char *buf, int len) {
    1dc0:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    1dc4:	2c000203 	sfmcs	f0, 4, [r0], {3}
	if (len == 0)
    1dc8:	000d9f01 	andeq	r9, sp, r1, lsl #30
	if (__inpline == NULL) {
    1dcc:	03da0100 	bicseq	r0, sl, #0, 2
		if ((prcs = running (__inserial)) == 0) {
    1dd0:	09640106 	stmdbeq	r4!, {r1, r2, r8}^
    1dd4:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
			prcs = runthread (__inserial);
    1dd8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ddc:	00000b2c 	andeq	r0, r0, ip, lsr #22
			if (prcs == 0) {
    1de0:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
				npwait (st);
    1de4:	03da0100 	bicseq	r0, sl, #0, 2
		release;
    1de8:	00008d1c 	andeq	r8, r0, ip, lsl sp
		join (prcs, st);
    1dec:	1c500100 	ldfnee	f0, [r0], {-0}
    1df0:	dc010069 	stcle	0, cr0, [r1], {105}	; 0x69
	if (*__inpline == NULL) // bin cmd
    1df4:	008d0603 	addeq	r0, sp, r3, lsl #12
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df8:	62290000 	eorvs	r0, r9, #0
	if (prcs >= len)
    1dfc:	dd01006e 	stcle	0, cr0, [r1, #-440]	; 0xfffffe48
		prcs = len-1;
    1e00:	00df0803 	sbcseq	r0, pc, r3, lsl #16
	memcpy (buf, __inpline, prcs);
    1e04:	01460000 	mrseq	r0, (UNDEF: 70)
    1e08:	ed250000 	stc	0, cr0, [r5, #-0]
    1e0c:	64000011 	strvs	r0, [r0], #-17	; 0xffffffef
	ufree (__inpline);
    1e10:	80000009 	andhi	r0, r0, r9
	__inpline = NULL;
    1e14:	01000001 	tsteq	r0, r1
	if (*buf) // if it's NULL, it's a bin cmd
    1e18:	200203df 	ldrdcs	r0, [r2], -pc	; <UNPREDICTABLE>
		buf [prcs] = '\0';
    1e1c:	000013ac 	andeq	r1, r0, ip, lsr #7
}
    1e20:	00000968 	andeq	r0, r0, r8, ror #18
		prcs = strlen (__inpline);
    1e24:	00000198 	muleq	r0, r8, r1
    1e28:	0303e201 	movweq	lr, #12801	; 0x3201
		return 0;
    1e2c:	00000b1a 	andeq	r0, r0, sl, lsl fp
    1e30:	0013bb35 	andseq	fp, r3, r5, lsr fp
    1e34:	00015900 	andeq	r5, r1, r0, lsl #18
int ser_outf (word st, const char *m, ...) {
    1e38:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    1e3c:	96000011 			; <UNDEFINED> instruction: 0x96000011
	if ((prcs = running (__outserial)) != 0) {
    1e40:	98000009 	stmdals	r0, {r0, r3}
    1e44:	01000009 	tsteq	r0, r9
		join (prcs, st);
    1e48:	000203e6 	andeq	r0, r2, r6, ror #7
    1e4c:	0e1a011e 	mrceq	1, 0, r0, cr10, cr14, {0}
		release;
    1e50:	c6010000 	strgt	r0, [r1], -r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e54:	09e40603 	stmibeq	r4!, {r0, r1, r9, sl}^
    1e58:	0a880000 	beq	fe201e60 <_estack+0xde1fce60>
    1e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
		umwait (st);
    1e60:	00000b95 	muleq	r0, r5, fp
    1e64:	0009f62e 	andeq	pc, r9, lr, lsr #12
	if (runstrand (__outserial, buf) == 0) {
    1e68:	000a2400 	andeq	r2, sl, r0, lsl #8
    1e6c:	000b6e00 	andeq	r6, fp, r0, lsl #28
    1e70:	006a3600 	rsbeq	r3, sl, r0, lsl #12
		ufree (buf);
    1e74:	8d020307 	stchi	3, cr0, [r2, #-28]	; 0xffffffe4
		npwait (st);
    1e78:	6c000000 	stcvs	0, cr0, [r0], {-0}
}
    1e7c:	36000001 	strcc	r0, [r0], -r1
    1e80:	03070069 	movweq	r0, #28777	; 0x7069
    1e84:	0003f402 	andeq	pc, r3, r2, lsl #8
    1e88:	00017f00 	andeq	r7, r1, r0, lsl #30
int ser_inf (word st, const char *fmt, ...) {
    1e8c:	36370000 	ldrtcc	r0, [r7], -r0
    1e90:	6400000a 	strvs	r0, [r0], #-10
	if (fmt == NULL)
    1e94:	3600000a 	strcc	r0, [r0], -sl
	if (__inpline == NULL) {
    1e98:	0208006a 	andeq	r0, r8, #106	; 0x6a
		if ((prcs = running (__inserial)) == 0) {
    1e9c:	00008d02 	andeq	r8, r0, r2, lsl #26
    1ea0:	00019200 	andeq	r9, r1, r0, lsl #4
			prcs = runthread (__inserial);
    1ea4:	00693600 	rsbeq	r3, r9, r0, lsl #12
    1ea8:	f4020208 	vst1.8	{d0-d3}, [r2], r8
			if (prcs == 0) {
    1eac:	a5000003 	strge	r0, [r0, #-3]
				npwait (st);
    1eb0:	00000001 	andeq	r0, r0, r1
		release;
    1eb4:	0c273800 	stceq	8, cr3, [r7], #-0
		join (prcs, st);
    1eb8:	bb010000 	bllt	41ec0 <__ccfg+0x21f18>
    1ebc:	1e031403 	cdpne	4, 0, cr1, cr3, cr3, {0}
	va_start (ap, fmt);
    1ec0:	000f8e01 	andeq	r8, pc, r1, lsl #28
	prcs = vscan (__inpline, fmt, ap);
    1ec4:	03820100 	orreq	r0, r2, #0, 2
    1ec8:	0008a406 	andeq	sl, r8, r6, lsl #8
	ufree (__inpline);
    1ecc:	00096400 	andeq	r6, r9, r0, lsl #8
	__inpline = NULL;
    1ed0:	289c0100 	ldmcs	ip, {r8}
}
    1ed4:	2e00000c 	cdpcs	0, 0, cr0, cr0, cr12, {0}
    1ed8:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1edc:	000008fe 	strdeq	r0, [r0], -lr
		return 0;
    1ee0:	00000be3 	andeq	r0, r0, r3, ror #23
    1ee4:	01006a29 	tsteq	r0, r9, lsr #20
    1ee8:	8d030389 	stchi	3, cr0, [r3, #-548]	; 0xfffffddc
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1eec:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1ef0:	29000001 	stmdbcs	r0, {r0}
    1ef4:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
	RF_cmdFs.frequency = 
    1ef8:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
}
    1efc:	01cb0000 	biceq	r0, fp, r0
    1f00:	1b000000 	blne	1f08 <plugch+0x1c>
    1f04:	00000168 	andeq	r0, r0, r8, ror #2
    1f08:	00000c0b 	andeq	r0, r0, fp, lsl #24
static int option (int opt, address val) {
    1f0c:	01006a29 	tsteq	r0, r9, lsr #20
    1f10:	8d03038f 	stchi	3, cr0, [r3, #-572]	; 0xfffffdc4
    1f14:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    1f18:	29000001 	stmdbcs	r0, {r0}
    1f1c:	8f010069 	svchi	0x00010069
    1f20:	03f40303 	mvnseq	r0, #201326592	; 0xc000000
    1f24:	01f10000 	mvnseq	r0, r0
    1f28:	33000000 	movwcc	r0, #0
    1f2c:	000012e7 	andeq	r1, r0, r7, ror #5
    1f30:	000008a4 	andeq	r0, r0, r4, lsr #17
    1f34:	00000148 	andeq	r0, r0, r8, asr #2
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f38:	02038401 	andeq	r8, r3, #16777216	; 0x1000000
    1f3c:	00130321 	andseq	r0, r3, r1, lsr #6
			goto RVal;
    1f40:	12f62100 	rscsne	r2, r6, #0, 2
			_BIS (dstate, DSTATE_RXON);
    1f44:	00000000 	andeq	r0, r0, r0
    1f48:	000d2439 	andeq	r2, sp, r9, lsr r4
	int ret = 0;
    1f4c:	037d0100 	cmneq	sp, #0, 2
			p_trigger (drvprcs, qevent);
    1f50:	0408010d 	streq	r0, [r8], #-269	; 0xfffffef3
    1f54:	04140000 	ldreq	r0, [r4], #-0
    1f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f5c:	00000c52 	andeq	r0, r0, r2, asr ip
    1f60:	000eec2d 	andeq	lr, lr, sp, lsr #24
    1f64:	037d0100 	cmneq	sp, #0, 2
    1f68:	00008d1f 	andeq	r8, r0, pc, lsl sp
    1f6c:	00020400 	andeq	r0, r2, r0, lsl #8
    1f70:	ad3a0000 	ldcge	0, cr0, [sl, #-0]
    1f74:	0100000e 	tsteq	r0, lr
}
    1f78:	010c0310 	tsteq	ip, r0, lsl r3
			_BIC (dstate, DSTATE_RXON);
    1f7c:	0000008d 	andeq	r0, r0, sp, lsl #1
    1f80:	00000794 	muleq	r0, r4, r7
			statid = (val == NULL) ? 0 : *val;
    1f84:	000008a4 	andeq	r0, r0, r4, lsr #17
    1f88:	0ccb9c01 	stcleq	12, cr9, [fp], {1}
	int ret = 0;
    1f8c:	b62d0000 	strtlt	r0, [sp], -r0
			ret = (int) statid;
    1f90:	0100000c 	tsteq	r0, ip
	if (val != NULL)
    1f94:	8d1e0310 	ldchi	3, cr0, [lr, #-64]	; 0xffffffc0
		*val = ret;
    1f98:	22000000 	andcs	r0, r0, #0
			ret = rbuffl + 2;
    1f9c:	3b000002 	blcc	1fac <option+0xa0>
    1fa0:	00667562 	rsbeq	r7, r6, r2, ror #10
			if (val != NULL) {
    1fa4:	2f031001 	svccs	0x00031001
				memcpy (val, &rxstat,
    1fa8:	000001c9 	andeq	r0, r0, r9, asr #3
    1fac:	00000235 	andeq	r0, r0, r5, lsr r2
				memset (&rxstat, 0, 
    1fb0:	6e656c3b 	mcrvs	12, 3, r6, cr5, cr11, {1}
    1fb4:	03100100 	tsteq	r0, #0, 2
			if (val == NULL)
    1fb8:	00008d38 	andeq	r8, r0, r8, lsr sp
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fbc:	0002d700 	andeq	sp, r2, r0, lsl #14
    1fc0:	0bd32b00 	bleq	ff4ccbc8 <_estack+0xdf4c7bc8>
				utimer_set (bckf_timer, *val);
    1fc4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
    1fc8:	de2b0103 	suflee	f0, f3, f3
    1fcc:	0100000c 	tsteq	r0, ip
			for (ret = 0; ret < 8; ret++)
    1fd0:	2701033d 	smladxcs	r1, sp, r3, r0
				if (RF_cmdPropRadioDivSetup.txPower
    1fd4:	00000d44 	andeq	r0, r0, r4, asr #26
					== patable [ret])
    1fd8:	00000876 	andeq	r0, r0, r6, ror r8
				if (RF_cmdPropRadioDivSetup.txPower
    1fdc:	00000878 	andeq	r0, r0, r8, ror r8
			for (ret = 0; ret < 8; ret++)
    1fe0:	15036501 	strne	r6, [r3, #-1281]	; 0xfffffaff
    1fe4:	000d5821 	andeq	r5, sp, r1, lsr #16
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1fec:	00000d6e 	andeq	r0, r0, lr, ror #26
    1ff0:	0d02fc01 	stceq	12, cr15, [r2, #-4]
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff4:	0d6f3c01 	stcleq	12, cr3, [pc, #-4]!	; 1ff8 <option+0xec>
    1ff8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
			_BIS (dstate, DSTATE_IRST);
    1ffc:	075c0d02 	ldrbeq	r0, [ip, -r2, lsl #26]
    2000:	07940000 	ldreq	r0, [r4, r0]
    2004:	9c010000 	stcls	0, cr0, [r1], {-0}
			ret = (int) channel;
    2008:	00000d44 	andeq	r0, r0, r4, asr #26
			goto RVal;
    200c:	00133b20 	andseq	r3, r3, r0, lsr #22
				(*val > 7) ? 7 : *val;
    2010:	00075c00 	andeq	r5, r7, r0, lsl #24
    2014:	00013000 	andeq	r3, r1, r0
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2018:	02f50100 	rscseq	r0, r5, #0, 2
    201c:	000d0702 	andeq	r0, sp, r2, lsl #14
			plugch ();
    2020:	134a2100 	movtne	r2, #41216	; 0xa100
			_BIS (dstate, DSTATE_IRST);
    2024:	26000000 	strcs	r0, [r0], -r0
    2028:	00001375 	andeq	r1, r0, r5, ror r3
			ret = (int) vrate;
    202c:	00000768 	andeq	r0, r0, r8, ror #14
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	0000076e 	andeq	r0, r0, lr, ror #14
    2034:	0202f601 	andeq	pc, r2, #1048576	; 0x100000
    2038:	00000d2c 	andeq	r0, r0, ip, lsr #26
    203c:	00139e21 	andseq	r9, r3, r1, lsr #28
    2040:	13912100 	orrsne	r2, r1, #0, 2
    2044:	84210000 	strthi	r0, [r1], #-0
    2048:	00000013 	andeq	r0, r0, r3, lsl r0
    204c:	0012ca27 	andseq	ip, r2, r7, lsr #20
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2050:	00076e00 	andeq	r6, r7, r0, lsl #28
    2054:	00077800 	andeq	r7, r7, r0, lsl #16
    2058:	02f70100 	rscseq	r0, r7, #0, 2
    205c:	12d92102 	sbcsne	r2, r9, #-2147483648	; 0x80000000
			syserror (EREQPAR, "cc13 op");
    2060:	00000000 	andeq	r0, r0, r0
    2064:	0ba1013d 	bleq	fe842560 <_estack+0xde83d560>
    2068:	eb010000 	bl	42070 <__ccfg+0x220c8>
    206c:	a7010602 	strge	r0, [r1, -r2, lsl #12]
    2070:	01000000 	mrseq	r0, (UNDEF: 0)
    2074:	00000d65 	andeq	r0, r0, r5, ror #26
    2078:	0061753e 	rsbeq	r7, r1, lr, lsr r5
    207c:	2702eb01 	strcs	lr, [r2, -r1, lsl #22]
    2080:	00000d65 	andeq	r0, r0, r5, ror #26
    2084:	26040700 	strcs	r0, [r4], -r0, lsl #14
    2088:	1a000002 	bne	2098 <option+0x18c>
    208c:	000c6401 	andeq	r6, ip, r1, lsl #8
    2090:	02d40100 	sbcseq	r0, r4, #0, 2
    2094:	009b0109 	addseq	r0, fp, r9, lsl #2
    2098:	07080000 	streq	r0, [r8, -r0]
static void issue_cmd (lword cmd) {
    209c:	075c0000 	ldrbeq	r0, [ip, -r0]
    20a0:	9c010000 	stcls	0, cr0, [r1], {-0}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a4:	00000dc1 	andeq	r0, r0, r1, asr #27
    20a8:	000bae2d 	andeq	sl, fp, sp, lsr #28
    20ac:	02d40100 	sbcseq	r0, r4, #0, 2
		if (res != 0x86)
    20b0:	0000a721 	andeq	sl, r0, r1, lsr #14
			syserror (EHARDWARE, "hang ic0");
    20b4:	00036300 	andeq	r6, r3, r0, lsl #6
    20b8:	61753b00 	cmnvs	r5, r0, lsl #22
		if (cnt-- == 0) {
    20bc:	02d40100 	sbcseq	r0, r4, #0, 2
			diag ("HUP %lx %lx", cmd, res);
    20c0:	000dc12f 	andeq	ip, sp, pc, lsr #2
    20c4:	00037600 	andeq	r7, r3, r0, lsl #12
			syserror (EHARDWARE, "hang ic0");
    20c8:	13583300 	cmpne	r8, #0, 6
		udelay (1);
    20cc:	07280000 	streq	r0, [r8, -r0]!
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20d0:	01180000 	tsteq	r8, r0
}
    20d4:	e6010000 	str	r0, [r1], -r0
    20d8:	67210202 	strvs	r0, [r1, -r2, lsl #4]!
    20dc:	00000013 	andeq	r0, r0, r3, lsl r0
    20e0:	1a040700 	bne	103ce8 <__ccfg+0xe3d40>
static void rx_de () {
    20e4:	1a000002 	bne	20f4 <rx_de+0x10>
	if ((dstate & DSTATE_RXAC) == 0)
    20e8:	000fb401 	andeq	fp, pc, r1, lsl #8
    20ec:	018a0100 	orreq	r0, sl, r0, lsl #2
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20f0:	00a70106 	adceq	r0, r7, r6, lsl #2
	_BIC (dstate, DSTATE_RXAC);
    20f4:	06b80000 	ldrteq	r0, [r8], r0
    20f8:	07080000 	streq	r0, [r8, -r0]
}
    20fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2100:	00000e0f 	andeq	r0, r0, pc, lsl #28
    2104:	000d7b2d 	andeq	r7, sp, sp, lsr #22
static void rf_off () {
    2108:	018a0100 	orreq	r0, sl, r0, lsl #2
	if ((dstate & DSTATE_RFON) == 0)
    210c:	00009b26 	andeq	r9, r0, r6, lsr #22
    2110:	00038900 	andeq	r8, r3, r0, lsl #18
	IntDisable (INT_RFC_CPE_0);
    2114:	58453f00 	stmdapl	r5, {r8, r9, sl, fp, ip, sp}^
    2118:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
    211c:	0f461d01 	svceq	0x00461d01
	RFCAdi3VcoLdoVoltageMode (false);
    2120:	06cc0000 	strbeq	r0, [ip], r0
	RFCSynthPowerDown ();
    2124:	06d60000 	ldrbeq	r0, [r6], r0
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	9c010000 	stcls	0, cr0, [r1], {-0}
    212c:	1e001a01 	vmlane.f32	s2, s0, s2
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	000d3101 	andeq	r3, sp, r1, lsl #2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	01380100 	teqeq	r8, r0, lsl #2
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	0005a406 	andeq	sl, r5, r6, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	0006b800 	andeq	fp, r6, r0, lsl #16
    2140:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    2144:	4000000e 	andmi	r0, r0, lr
	_BIC (dstate, DSTATE_RFON);
    2148:	00000e54 	andeq	r0, r0, r4, asr lr
    214c:	08013a01 	stmdaeq	r1, {r0, r9, fp, ip, sp}
}
    2150:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2154:	000003a7 	andeq	r0, r0, r7, lsr #7
    2158:	54554541 	ldrbpl	r4, [r5], #-1345	; 0xfffffabf
    215c:	01680100 	cmneq	r8, r0, lsl #2
    2160:	0005f201 	andeq	pc, r5, r1, lsl #4
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	01002300 	mrseq	r2, LR_irq
    2168:	c0400000 	subgt	r0, r0, r0
    216c:	0100000c 	tsteq	r0, ip
		if (cmd->status == tstat)
    2170:	9b0b0147 	blls	2c2694 <__ccfg+0x2a26ec>
		if (timeout-- == 0) {
    2174:	f2000000 	vhadd.s8	d0, d0, d0
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	42000003 	andmi	r0, r0, #3
    217c:	00001410 	andeq	r1, r0, r0, lsl r4
    2180:	00000610 	andeq	r0, r0, r0, lsl r6
			syserror (EHARDWARE, "rt2");
    2184:	00000618 	andeq	r0, r0, r8, lsl r6
    2188:	75060d05 	strvc	r0, [r6, #-3333]	; 0xfffff2fb
		udelay (1);
    218c:	2100000e 	tstcs	r0, lr
		if (cmd->status == tstat)
    2190:	0000141f 	andeq	r1, r0, pc, lsl r4
}
    2194:	14104200 	ldrne	r4, [r0], #-512	; 0xfffffe00
    2198:	061c0000 	ldreq	r0, [ip], -r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    219c:	06240000 	strteq	r0, [r4], -r0
    21a0:	0f050000 	svceq	0x00050000
static void rf_on () {
    21a4:	000e8f06 	andeq	r8, lr, r6, lsl #30
    21a8:	141f2100 	ldrne	r2, [pc], #-256	; 21b0 <rf_on.part.0+0x14>
	OSCHF_TurnOnXosc();
    21ac:	42000000 	andmi	r0, r0, #0
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21b0:	000013f3 	strdeq	r1, [r0], -r3
    21b4:	0000066a 	andeq	r0, r0, sl, ror #12
    21b8:	00000672 	andeq	r0, r0, r2, ror r6
    21bc:	a9061705 	stmdbge	r6, {r0, r2, r8, r9, sl, ip}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21c0:	2100000e 	tstcs	r0, lr
    21c4:	00001402 	andeq	r1, r0, r2, lsl #8
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c8:	13f34300 	mvnsne	r4, #0, 6
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21cc:	06760000 	ldrbteq	r0, [r6], -r0
	issue_cmd (
    21d0:	067e0000 	ldrbteq	r0, [lr], -r0
    21d4:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d8:	14022106 	strne	r2, [r2], #-262	; 0xfffffefa
    21dc:	00000000 	andeq	r0, r0, r0
    21e0:	f1011e00 			; <UNDEFINED> instruction: 0xf1011e00
   pPatchTab[80] = 0;
    21e4:	0100000d 	tsteq	r0, sp
   } while (--nIterations);
    21e8:	7c06012b 	stfvcs	f0, [r6], {43}	; 0x2b
   pPatchTab[53] = 2;
    21ec:	a4000005 	strge	r0, [r0], #-5
    21f0:	01000005 	tsteq	r0, r5
   pPatchTab[55] = 3;
    21f4:	000ef19c 	muleq	lr, ip, r1
   pPatchTab[110] = 4;
    21f8:	0f253300 	svceq	0x00253300
   pPatchTab[107] = 5;
    21fc:	05840000 	streq	r0, [r4]
   pPatchTab[65] = 6;
    2200:	00e80000 	rsceq	r0, r8, r0
    2204:	32010000 	andcc	r0, r1, #0
   pPatchTab[57] = 1;
    2208:	38212c01 	stmdacc	r1!, {r0, sl, fp, sp}
   pIrqPatch[1] = _IRQ_PATCH_0;
    220c:	0000000f 	andeq	r0, r0, pc
   const uint32_t *pS = patchGenfskRfe;
    2210:	48011e00 	stmdami	r1, {r9, sl, fp, ip}
      t2 = *pS++;
    2214:	0100000d 	tsteq	r0, sp
      t4 = *pS++;
    2218:	3c06011e 	stfccs	f0, [r6], {30}
      t6 = *pS++;
    221c:	7c000005 	stcvc	0, cr0, [r0], {5}
      t8 = *pS++;
    2220:	01000005 	tsteq	r0, r5
      *pD++ = t1;
    2224:	000f259c 	muleq	pc, ip, r5	; <UNPREDICTABLE>
      *pD++ = t2;
    2228:	0f253300 	svceq	0x00253300
      *pD++ = t3;
    222c:	054e0000 	strbeq	r0, [lr, #-0]
      *pD++ = t5;
    2230:	00c80000 	sbceq	r0, r8, r0
      *pD++ = t7;
    2234:	25010000 	strcs	r0, [r1, #-0]
   } while (--nIterations);
    2238:	38352c01 	ldmdacc	r5!, {r0, sl, fp, sp}
    223c:	3100000f 	tstcc	r0, pc
      *pD++ = t8;
    2240:	00000004 	andeq	r0, r0, r4
   } while (--nIterations);
    2244:	0e4d4400 	cdpeq	4, 4, cr4, cr13, cr0, {0}
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2248:	17010000 	strne	r0, [r1, -r0]
   *pD++ = t2;
    224c:	df011501 	svcle	0x00011501
   *pD++ = t3;
    2250:	03000000 	movweq	r0, #0
   *pD++ = t4;
    2254:	00000f46 	andeq	r0, r0, r6, asr #30
   *pD++ = t5;
    2258:	6c65643e 	cfstrdvs	mvd6, [r5], #-248	; 0xffffff08
    225c:	01170100 	tsteq	r7, r0, lsl #2
	RFCAdi3VcoLdoVoltageMode (true);
    2260:	0000a722 	andeq	sl, r0, r2, lsr #14
    2264:	c9450000 	stmdbgt	r5, {}^	; <UNPREDICTABLE>
       	RFCRfTrimSet (&rfTrim);
    2268:	0100000a 	tsteq	r0, sl
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    226c:	a714010e 	ldrge	r0, [r4, -lr, lsl #2]
    2270:	03000000 	movweq	r0, #0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2274:	000fa846 	andeq	sl, pc, r6, asr #16
    2278:	14ee0100 	strbtne	r0, [lr], #256	; 0x100
	issue_cmd ((lword)&cmd_srt);
    227c:	000f7a03 	andeq	r7, pc, r3, lsl #20
    2280:	69704700 	ldmdbvs	r0!, {r8, r9, sl, lr}^
	issue_cmd ((lword)&RF_cmdFs);
    2284:	f201006e 	vhadd.s8	q0, <illegal reg q0.5>, q15
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2288:	00008d06 	andeq	r8, r0, r6, lsl #26
    228c:	69474800 	stmdbvs	r7, {fp, lr}^
    2290:	0bf40100 	bleq	ffd02698 <_estack+0xdfcfd698>
	IntEnable (INT_RFC_CPE_0);
    2294:	0000008d 	andeq	r0, r0, sp, lsl #1
	_BIC (dstate, DSTATE_IRST);
    2298:	01490000 	mrseq	r0, (UNDEF: 73)
    229c:	00000ede 	ldrdeq	r0, [r0], -lr
    22a0:	01069801 	tsteq	r6, r1, lsl #16
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a4:	000004e8 	andeq	r0, r0, r8, ror #9
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a8:	0000053c 	andeq	r0, r0, ip, lsr r5
	IntEnable (INT_RFC_CPE_0);
    22ac:	10249c01 	eorne	r9, r4, r1, lsl #24
    22b0:	654a0000 	strbvs	r0, [sl, #-0]
}
    22b4:	98010063 	stmdals	r1, {r0, r1, r5, r6}
	IntEnable (INT_RFC_CPE_0);
    22b8:	0000a71a 	andeq	sl, r0, sl, lsl r7
    22bc:	00044400 	andeq	r4, r4, r0, lsl #8
    22c0:	006d4a00 	rsbeq	r4, sp, r0, lsl #20
    22c4:	242a9801 	strtcs	r9, [sl], #-2049	; 0xfffff7ff
    22c8:	57000010 	smladpl	r0, r0, r0, r0
    22cc:	28000004 	stmdacs	r0, {r2}
    22d0:	000011ed 	andeq	r1, r0, sp, ror #3
    22d4:	000004f4 	strdeq	r0, [r0], -r4
    22d8:	000004f6 	strdeq	r0, [r0], -r6
    22dc:	2202a801 	andcs	sl, r2, #65536	; 0x10000
    22e0:	00001410 	andeq	r1, r0, r0, lsl r4
    22e4:	000004f6 	strdeq	r0, [r0], -r6
    22e8:	00000078 	andeq	r0, r0, r8, ror r0
    22ec:	d903b801 	stmdble	r3, {r0, fp, ip, sp, pc}
    22f0:	2100000f 	tstcs	r0, pc
    22f4:	0000141f 	andeq	r1, r0, pc, lsl r4
    22f8:	14102200 	ldrne	r2, [r0], #-512	; 0xfffffe00
    22fc:	04fc0000 	ldrbteq	r0, [ip], #0
    2300:	00980000 	addseq	r0, r8, r0
    2304:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2308:	000ff303 	andeq	pc, pc, r3, lsl #6
    230c:	141f2100 	ldrne	r2, [pc], #-256	; 2314 <rf_on.part.0+0x178>
    2310:	22000000 	andcs	r0, r0, #0
    2314:	000013f3 	strdeq	r1, [r0], -r3
    2318:	00000514 	andeq	r0, r0, r4, lsl r5
static void rx_int_enable () {
    231c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2320:	0d03b801 	stceq	8, cr11, [r3, #-4]
    2324:	21000010 	tstcs	r0, r0, lsl r0
    2328:	00001402 	andeq	r1, r0, r2, lsl #8
    232c:	13f34300 	mvnsne	r4, #0, 6
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2330:	051a0000 	ldreq	r0, [sl, #-0]
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2334:	051c0000 	ldreq	r0, [ip, #-0]
    2338:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    233c:	14022103 	strne	r2, [r2], #-259	; 0xfffffefd
    2340:	00000000 	andeq	r0, r0, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2344:	01d60407 	bicseq	r0, r6, r7, lsl #8
    2348:	01490000 	mrseq	r0, (UNDEF: 73)
    234c:	00000e73 	andeq	r0, r0, r3, ror lr
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2350:	01067201 	tsteq	r6, r1, lsl #4
	...
		if (db->status == DATA_ENTRY_FINISHED) {
    235c:	10ca9c01 	sbcne	r9, sl, r1, lsl #24
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2360:	734a0000 	movtvc	r0, #40960	; 0xa000
    2364:	72010074 	andvc	r0, r1, #116	; 0x74
			nr++;
    2368:	0000a718 	andeq	sl, r0, r8, lsl r7
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    236c:	00047500 	andeq	r7, r4, r0, lsl #10
    2370:	65734a00 	ldrbvs	r4, [r3, #-2560]!	; 0xfffff600
    2374:	7201006e 	andvc	r0, r1, #110	; 0x6e
    2378:	00024428 	andeq	r4, r2, r8, lsr #8
				__dp [pl + 1] = __dp [pl] - 128;
    237c:	00048800 	andeq	r8, r4, r0, lsl #16
				pl = __dp [1] + 2;
    2380:	61764a00 	cmnvs	r6, r0, lsl #20
				__dp [pl + 1] = __dp [pl] - 128;
    2384:	7201006c 	andvc	r0, r1, #108	; 0x6c
    2388:	0000fc35 	andeq	pc, r0, r5, lsr ip	; <UNPREDICTABLE>
				__dp [pl] = 0;
    238c:	0004a600 	andeq	sl, r4, r0, lsl #12
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2390:	0ae44b00 	beq	ff914f98 <_estack+0xdf90ff98>
    2394:	74010000 	strvc	r0, [r1], #-0
    2398:	0000c90e 	andeq	ip, r0, lr, lsl #18
			db->status = DATA_ENTRY_PENDING;
    239c:	00030500 	andeq	r0, r3, r0, lsl #10
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23a0:	4c000000 	stcmi	0, cr0, [r0], {-0}
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a4:	00000fcb 	andeq	r0, r0, fp, asr #31
				diag ("BAD RX");
    23a8:	00017801 	andeq	r7, r1, r1, lsl #16
    23ac:	4d000000 	stcmi	0, cr0, [r0, #-0]
	if (nr) {
    23b0:	00001220 	andeq	r1, r0, r0, lsr #4
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b4:	00000000 	andeq	r0, r0, r0
}
    23b8:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23bc:	42038101 	andmi	r8, r3, #1073741824	; 0x40000000
    23c0:	00001201 	andeq	r1, r0, r1, lsl #4
	...
}
    23cc:	b9127e01 	ldmdblt	r2, {r0, r9, sl, fp, ip, sp, lr}
    23d0:	2f000010 	svccs	0x00000010
    23d4:	00001213 	andeq	r1, r0, r3, lsl r2
    23d8:	122a2800 	eorne	r2, sl, #0, 16
	...
    23e4:	84010000 	strhi	r0, [r1], #-0
    23e8:	014e0003 	cmpeq	lr, r3
thread (cc1350_driver)
    23ec:	00000f72 	andeq	r0, r0, r2, ror pc
    23f0:	01066201 	tsteq	r6, r1, lsl #4
    23f4:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
    23f8:	00000eec 	andeq	r0, r0, ip, ror #29
    23fc:	01499c01 	cmpeq	r9, r1, lsl #24
		if (dstate & DSTATE_IRST) {
    2400:	00000a83 	andeq	r0, r0, r3, lsl #21
    2404:	01064f01 	tsteq	r6, r1, lsl #30
	...
			_BIC (dstate,
    2410:	11079c01 	tstne	r7, r1, lsl #24
    2414:	51280000 			; <UNDEFINED> instruction: 0x51280000
		if (dstate & DSTATE_RXAC) {
    2418:	00000012 	andeq	r0, r0, r2, lsl r0
    241c:	00000000 	andeq	r0, r0, r0
			if ((dstate & DSTATE_RXON) == 0)
    2420:	01000000 	mrseq	r0, (UNDEF: 0)
				rx_de ();
    2424:	4900035f 	stmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, r9}
		if (paylen == 0) {
    2428:	000aba01 	andeq	fp, sl, r1, lsl #20
    242c:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2430:	0004a801 	andeq	sl, r4, r1, lsl #16
    2434:	0004e800 	andeq	lr, r4, r0, lsl #16
    2438:	2e9c0100 	fmlcse	f0, f4, f0
    243c:	4a000011 	bmi	2488 <cc1350_driver+0x9c>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2440:	3b010064 	blcc	425d8 <__ccfg+0x22630>
    2444:	0000df1c 	andeq	sp, r0, ip, lsl pc
    2448:	0004c400 	andeq	ip, r4, r0, lsl #8
    244c:	01490000 	mrseq	r0, (UNDEF: 73)
    2450:	00000b7a 	andeq	r0, r0, sl, ror fp
    2454:	01062b01 	tsteq	r6, r1, lsl #22
    2458:	0000046c 	andeq	r0, r0, ip, ror #8
    245c:	000004a8 	andeq	r0, r0, r8, lsr #9
		} else if (dstate & DSTATE_RXON) {
    2460:	11559c01 	cmpne	r5, r1, lsl #24
	if (dstate & DSTATE_RFON)
    2464:	644a0000 	strbvs	r0, [sl], #-0
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2468:	1b2b0100 	blne	ac2870 <__ccfg+0xaa28c8>
		re->status = DATA_ENTRY_PENDING;
    246c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2470:	000004e2 	andeq	r0, r0, r2, ror #9
	issue_cmd ((lword)&RF_cmdPropRx);
    2474:	b0014900 	andlt	r4, r1, r0, lsl #18
	_BIS (dstate, DSTATE_RXAC);
    2478:	0100000d 	tsteq	r0, sp
    247c:	40010620 	andmi	r0, r1, r0, lsr #12
    2480:	6a000004 	bvs	2498 <cc1350_driver+0xac>
    2484:	01000004 	tsteq	r0, r4
	if (dstate & DSTATE_RXAC)
    2488:	00117c9c 	mulseq	r1, ip, ip
    248c:	006e4a00 	rsbeq	r4, lr, r0, lsl #20
				if (statid != 0xffff)
    2490:	b81c2001 	ldmdalt	ip, {r0, sp}
    2494:	00000000 	andeq	r0, r0, r0
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2498:	00000005 	andeq	r0, r0, r5
				RF_cmdPropTx.pktLen = (byte) paylen;
    249c:	0e5b0149 	rdfeqem	f0, f3, #1.0
		if (paylen == 0) {
    24a0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
			wait (qevent, DR_LOOP);
    24a4:	04140106 	ldreq	r0, [r4], #-262	; 0xfffffefa
    24a8:	04400000 	strbeq	r0, [r0], #-0
			if (dstate & DSTATE_RXAC) {
    24ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    24b0:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
				rx_int_enable ();
    24b4:	01006e4f 	tsteq	r0, pc, asr #28
			release;
    24b8:	00b81c19 	adcseq	r1, r8, r9, lsl ip
			} else if (dstate & DSTATE_RFON) {
    24bc:	50010000 	andpl	r0, r1, r0
				delay (offdelay, DR_GOOF);
    24c0:	0011b743 	andseq	fp, r1, r3, asr #14
    24c4:	00042800 	andeq	r2, r4, r0, lsl #16
    24c8:	00043200 	andeq	r3, r4, r0, lsl #4
		if (bckf_timer) {
    24cc:	031b0100 	tsteq	fp, #0, 2
			wait (qevent, DR_LOOP);
    24d0:	0011c521 	andseq	ip, r1, r1, lsr #10
    24d4:	50000000 	andpl	r0, r0, r0
    24d8:	00000f86 	andeq	r0, r0, r6, lsl #31
			delay (bckf_timer, DR_LOOP);
    24dc:	01141501 	tsteq	r4, r1, lsl #10
    24e0:	0011d003 	andseq	sp, r1, r3
			if (dstate & DSTATE_RXAC)
    24e4:	006e5100 	rsbeq	r5, lr, r0, lsl #2
    24e8:	b82b1501 	stmdalt	fp!, {r0, r8, sl, ip}
	if (dstate & DSTATE_RFON)
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	000b6652 	andeq	r6, fp, r2, asr r6
		rx_de ();
    24f4:	011a0300 	tsteq	sl, r0, lsl #6
		RF_cmdPropTx . status = 0;
    24f8:	ed030135 	stfs	f0, [r3, #-212]	; 0xffffff2c
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24fc:	53000011 	movwpl	r0, #17
    2500:	00000f77 	andeq	r0, r0, r7, ror pc
    2504:	48011a03 	stmdami	r1, {r0, r1, r9, fp, ip}
		issue_cmd ((lword)&cmd_cs);
    2508:	00000073 	andeq	r0, r0, r3, ror r0
		if (dstate & DSTATE_IRST)
    250c:	0db75400 	cfldrseq	mvf5, [r7]
    2510:	5b030000 	blpl	c2518 <__ccfg+0xa2570>
    2514:	54030135 	strpl	r0, [r3], #-309	; 0xfffffecb
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2518:	00000ad7 	ldrdeq	r0, [r0], -r7
    251c:	01355003 	teqeq	r5, r3
			delay (1, DR_XMIT);
    2520:	0e925503 	cdpeq	5, 9, cr5, cr2, cr3, {0}
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2524:	bf0f0000 	svclt	0x000f0000
    2528:	00730101 	rsbseq	r0, r3, r1, lsl #2
    252c:	20030000 	andcs	r0, r3, r0
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2530:	16000012 			; <UNDEFINED> instruction: 0x16000012
    2534:	00000f2a 	andeq	r0, r0, sl, lsr #30
				RF_cmdPropTx . status = 0;
    2538:	730ec10f 	movwvc	ip, #57615	; 0xe10f
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    253c:	00000000 	andeq	r0, r0, r0
				issue_cmd ((lword)&RF_cmdPropTx);
    2540:	000e6254 	andeq	r6, lr, r4, asr r2
				proceed (DR_XMIT);
    2544:	01900f00 	orrseq	r0, r0, r0, lsl #30
    2548:	a1540301 	cmpge	r4, r1, lsl #6
			txtries++;
    254c:	0f00000a 	svceq	0x0000000a
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2550:	0301017b 	movweq	r0, #4475	; 0x117b
    2554:	000d0f52 	andeq	r0, sp, r2, asr pc
    2558:	03660a00 	cmneq	r6, #0, 20
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    255c:	51030101 	tstpl	r3, r1, lsl #2
		goto DR_LOOP__;
    2560:	53000012 	movwpl	r0, #18
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2564:	00000ce6 	andeq	r0, r0, r6, ror #25
		paylen = 0;
    2568:	1f03660a 	svcne	0x0003660a
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    256c:	00000073 	andeq	r0, r0, r3, ror r0
		txtries = 0;
    2570:	0e3a5600 	cfmsuba32eq	mvax0, mvax5, mvfx10, mvfx0
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2574:	4c020000 	stcmi	0, cr0, [r2], {-0}
    2578:	03010101 	movweq	r0, #4353	; 0x1101
    257c:	000dd354 	andeq	sp, sp, r4, asr r3
    2580:	01c40200 	biceq	r0, r4, r0, lsl #4
    2584:	e7570301 	ldrb	r0, [r7, -r1, lsl #6]
		    tcvphy_top (physid) == NULL)
    2588:	0200000b 	andeq	r0, r0, #11
    258c:	730101ad 	movwvc	r0, #4525	; 0x11ad
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2590:	03000000 	movweq	r0, #0
    2594:	000b3a56 	andeq	r3, fp, r6, asr sl
			rf_off ();
    2598:	02450e00 	subeq	r0, r5, #0, 28
endthread
    259c:	58030101 	stmdapl	r3, {r0, r8}
    25a0:	00000b0c 	andeq	r0, r0, ip, lsl #22
    25a4:	01022c0e 	tsteq	r2, lr, lsl #24
    25a8:	00007301 	andeq	r7, r0, r1, lsl #6
    25ac:	f7520300 			; <UNDEFINED> instruction: 0xf7520300
    25b0:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    25b4:	010101dc 	ldrdeq	r0, [r1, -ip]
    25b8:	0012ab03 	andseq	sl, r2, r3, lsl #22
    25bc:	0ab15300 	beq	fec571c4 <_estack+0xdec521c4>
    25c0:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    25c4:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    25c8:	56000000 	strpl	r0, [r0], -r0
    25cc:	00000c76 	andeq	r0, r0, r6, ror ip
    25d0:	01010f0b 	tsteq	r1, fp, lsl #30
    25d4:	b3540301 	cmplt	r4, #67108864	; 0x4000000
    25d8:	0c00000b 	stceq	0, cr0, [r0], {11}
void RFCCPE0IntHandler (void) {
    25dc:	030101ed 	movweq	r0, #4589	; 0x11ed
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25e0:	000e7f54 	andeq	r7, lr, r4, asr pc
		_BIS (dstate, DSTATE_IRST);
    25e4:	01d60c00 	bicseq	r0, r6, r0, lsl #24
    25e8:	88520301 	ldmdahi	r2, {r0, r8, r9}^
    25ec:	0600000b 	streq	r0, [r0], -fp
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25f0:	01010440 	tsteq	r1, r0, asr #8
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f4:	0012e703 	andseq	lr, r2, r3, lsl #14
    25f8:	0cf35300 	ldcleq	3, cr5, [r3]
	p_trigger (drvprcs, qevent);
    25fc:	40060000 	andmi	r0, r6, r0
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2600:	00732404 	rsbseq	r2, r3, r4, lsl #8
    2604:	52000000 	andpl	r0, r0, #0
    2608:	00000b21 	andeq	r0, r0, r1, lsr #22
    260c:	01039106 	tsteq	r3, r6, lsl #2
    2610:	13110301 	tstne	r1, #67108864	; 0x4000000
    2614:	f3530000 	vhadd.u16	d16, d3, d0
    2618:	0600000c 	streq	r0, [r0], -ip
    261c:	73170391 	tstvc	r7, #1140850690	; 0x44000002
    2620:	53000000 	movwpl	r0, #0
    2624:	00000c4d 	andeq	r0, r0, sp, asr #24
	RISE_N_SHINE;
    2628:	2a039106 	bcs	e6a48 <__ccfg+0xc6aa0>
    262c:	00000073 	andeq	r0, r0, r3, ror r0
    2630:	0f3d5200 	svceq	0x003d5200
}
    2634:	0c060000 	stceq	0, cr0, [r6], {-0}
    2638:	03010103 	movweq	r0, #4355	; 0x1103
    263c:	0000133b 	andeq	r1, r0, fp, lsr r3
    2640:	000cf353 	andeq	pc, ip, r3, asr r3	; <UNPREDICTABLE>
    2644:	030c0600 	movweq	r0, #50688	; 0xc600
    2648:	00007318 	andeq	r7, r0, r8, lsl r3
void phys_cc1350 (int phy, int mbs) {
    264c:	0c4d5300 	mcrreq	3, 0, r5, sp, cr0
	if (rbuffl != 0)
    2650:	0c060000 	stceq	0, cr0, [r6], {-0}
    2654:	00732b03 	rsbseq	r2, r3, r3, lsl #22
		syserror (ETOOMANY, "cc13");
    2658:	52000000 	andpl	r0, r0, #0
		syserror (EREQPAR, "cc13 mb");
    265c:	00000c3e 	andeq	r0, r0, lr, lsr ip
	if (mbs == 0)
    2660:	0101e706 	tsteq	r1, r6, lsl #14
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2664:	13580301 	cmpne	r8, #67108864	; 0x4000000
		syserror (EREQPAR, "cc13 mb");
    2668:	f3530000 	vhadd.u16	d16, d3, d0
    266c:	0600000c 	streq	r0, [r0], -ip
	i = 0;
    2670:	731901e7 	tstvc	r9, #-1073741767	; 0xc0000039
	rbuffl = (byte) mbs;
    2674:	00000000 	andeq	r0, r0, r0
		db->config.type = 0;	// General (data in structure)
    2678:	000d8152 	andeq	r8, sp, r2, asr r1
	rbuffl = (byte) mbs;
    267c:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2680:	75030101 	strvc	r0, [r3, #-257]	; 0xfffffeff
    2684:	53000013 	movwpl	r0, #19
		if (db == NULL)
    2688:	00000cf3 	strdeq	r0, [r0], -r3
			syserror (EMALLOC, "cc13");
    268c:	1501ba06 	strne	fp, [r1, #-2566]	; 0xfffff5fa
    2690:	00000073 	andeq	r0, r0, r3, ror r0
    2694:	0e295200 	cdpeq	2, 2, cr5, cr9, cr0, {0}
		db->status = DATA_ENTRY_PENDING;
    2698:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
		if (i)
    269c:	03010101 	movweq	r0, #4353	; 0x1101
			da->pNextEntry = (byte*) db;
    26a0:	000013ac 	andeq	r1, r0, ip, lsr #7
		db->length = rbuffl + 2;
    26a4:	000cf353 	andeq	pc, ip, r3, asr r3	; <UNPREDICTABLE>
    26a8:	01390600 	teqeq	r9, r0, lsl #12
		db->config.type = 0;	// General (data in structure)
    26ac:	0000731b 	andeq	r7, r0, fp, lsl r3
		db->length = rbuffl + 2;
    26b0:	0bdb5300 	bleq	ff6d72b8 <_estack+0xdf6d22b8>
	db->pNextEntry = (byte*) re;
    26b4:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b8:	00732e01 	rsbseq	r2, r3, r1, lsl #28
    26bc:	c7530000 	ldrbgt	r0, [r3, -r0]
	if (rbuffs == NULL)
    26c0:	0600000b 	streq	r0, [r0], -fp
	rbuffs->pCurrEntry = (byte*) re;
    26c4:	731b013a 	tstvc	fp, #-2147483634	; 0x8000000e
	rbuffs->pLastEntry = NULL;
    26c8:	00000000 	andeq	r0, r0, r0
    26cc:	000d8c52 	andeq	r8, sp, r2, asr ip
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d0:	02840400 	addeq	r0, r4, #0, 8
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d4:	c9030101 	stmdbgt	r3, {r0, r8}
    26d8:	53000013 	movwpl	r0, #19
    26dc:	00000c5a 	andeq	r0, r0, sl, asr ip
	rbuffl -= 2;
    26e0:	1e028404 	cdpne	4, 0, cr8, cr2, cr4, {0}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e4:	00000073 	andeq	r0, r0, r3, ror r0
	rbuffl -= 2;
    26e8:	0a895200 	beq	fe256ef0 <_estack+0xde251ef0>
	physid = phy;
    26ec:	06040000 	streq	r0, [r4], -r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f0:	03010102 	movweq	r0, #4354	; 0x1102
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f4:	000013f3 	strdeq	r1, [r0], -r3
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	000c5a53 	andeq	r5, ip, r3, asr sl
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	02060400 	andeq	r0, r6, #0, 8
    2700:	00007323 	andeq	r7, r0, r3, lsr #6
	utimer_add (&bckf_timer);
    2704:	0f605300 	svceq	0x00605300
	drvprcs = runthread (cc1350_driver);
    2708:	06040000 	streq	r0, [r4], -r0
    270c:	00733702 	rsbseq	r3, r3, r2, lsl #14
    2710:	52000000 	andpl	r0, r0, #0
	if (drvprcs == 0)
    2714:	00000dc5 	andeq	r0, r0, r5, asr #27
		syserror (ERESOURCE, "cc13");
    2718:	01015404 	tsteq	r1, r4, lsl #8
    271c:	14100301 	ldrne	r0, [r0], #-769	; 0xfffffcff
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2720:	5a530000 	bpl	14c2728 <__ccfg+0x14a2780>
    2724:	0400000c 	streq	r0, [r0], #-12
    2728:	73190154 	tstvc	r9, #84, 2
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    272c:	00000000 	andeq	r0, r0, r0
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2730:	000eca52 	andeq	ip, lr, r2, asr sl
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	011e0400 	tsteq	lr, r0, lsl #8
    2738:	2d030101 	stfcss	f0, [r3, #-4]
    273c:	53000014 	movwpl	r0, #20
    2740:	00000c5a 	andeq	r0, r0, sl, asr ip
    2744:	17011e04 	strne	r1, [r1, -r4, lsl #28]
    2748:	00000073 	andeq	r0, r0, r3, ror r0
    274c:	0c8f5600 	stceq	6, cr5, [pc], {0}
    2750:	63090000 	movwvs	r0, #36864	; 0x9000
    2754:	03010104 	movweq	r0, #4356	; 0x1104
	plugch ();
    2758:	000bf756 	andeq	pc, fp, r6, asr r7	; <UNPREDICTABLE>
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	04540900 	ldrbeq	r0, [r4], #-2304	; 0xfffff700
    2760:	56030101 	strpl	r0, [r3], -r1, lsl #2
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2764:	00000c10 	andeq	r0, r0, r0, lsl ip
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2768:	01022a09 	tsteq	r2, r9, lsl #20
    276c:	4b520301 	blmi	1483378 <__ccfg+0x14633d0>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2770:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
}
    2774:	01010168 	tsteq	r1, r8, ror #2
    2778:	00146b03 	andseq	r6, r4, r3, lsl #22
    277c:	0c1c5300 	ldceq	3, cr5, [ip], {-0}
    2780:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    2784:	00731f01 	rsbseq	r1, r3, r1, lsl #30
    2788:	56000000 	strpl	r0, [r0], -r0
    278c:	00000b56 	andeq	r0, r0, r6, asr fp
    2790:	01013209 	tsteq	r1, r9, lsl #4
    2794:	44590301 	ldrbmi	r0, [r9], #-769	; 0xfffffcff
    2798:	0000000d 	andeq	r0, r0, sp
    279c:	00000000 	andeq	r0, r0, r0
    27a0:	01000000 	mrseq	r0, (UNDEF: 0)
    27a4:	0d58359c 	cfldr64eq	mvdx3, [r8, #-624]	; 0xfffffd90
    27a8:	05130000 	ldreq	r0, [r3, #-0]
    27ac:	00000000 	andeq	r0, r0, r0
    27b0:	0000121f 	andeq	r1, r0, pc, lsl r2
    27b4:	09440003 	stmdbeq	r4, {r0, r1}^
    27b8:	01040000 	mrseq	r0, (UNDEF: 4)
    27bc:	000000bd 	strheq	r0, [r0], -sp
    27c0:	00104c0c 	andseq	r4, r0, ip, lsl #24
    27c4:	00066800 	andeq	r6, r6, r0, lsl #16
    27c8:	00065800 	andeq	r5, r6, r0, lsl #16
    27cc:	00000000 	andeq	r0, r0, r0
    27d0:	001a8600 	andseq	r8, sl, r0, lsl #12
    27d4:	06010200 	streq	r0, [r1], -r0, lsl #4
    27d8:	000008de 	ldrdeq	r0, [r0], -lr
    27dc:	a3050202 	movwge	r0, #20994	; 0x5202
    27e0:	03000007 	movweq	r0, #7
    27e4:	00002667 	andeq	r2, r0, r7, ror #12
    27e8:	3f182803 	svccc	0x00182803
    27ec:	02000000 	andeq	r0, r0, #0
    27f0:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    27f4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    27f8:	0005e805 	andeq	lr, r5, r5, lsl #16
    27fc:	08350300 	ldmdaeq	r5!, {r8, r9}
    2800:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    2804:	00005918 	andeq	r5, r0, r8, lsl r9
    2808:	08010200 	stmdaeq	r1, {r9}
    280c:	000008dc 	ldrdeq	r0, [r0], -ip
    2810:	0003d203 	andeq	sp, r3, r3, lsl #4
    2814:	19310300 	ldmdbne	r1!, {r8, r9}
    2818:	0000006c 	andeq	r0, r0, ip, rrx
    281c:	aa070202 	bge	1c302c <__ccfg+0x1a3084>
    2820:	03000009 	movweq	r0, #9
    2824:	000008f5 	strdeq	r0, [r0], -r5
    2828:	7f193403 	svcvc	0x00193403
    282c:	02000000 	andeq	r0, r0, #0
    2830:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
    2834:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2838:	00039207 	andeq	r9, r3, r7, lsl #4
    283c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2840:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2844:	9c070402 	cfstrsls	mvf0, [r7], {2}
    2848:	03000003 	movweq	r0, #3
    284c:	0000041e 	andeq	r0, r0, lr, lsl r4
    2850:	a71b2804 	ldrge	r2, [fp, -r4, lsl #16]
    2854:	05000000 	streq	r0, [r0, #-0]
    2858:	00000865 	andeq	r0, r0, r5, ror #16
    285c:	bf000b04 	svclt	0x00000b04
strand (__outserial, const char*)
    2860:	06000000 	streq	r0, [r0], -r0
    2864:	0000094c 	andeq	r0, r0, ip, asr #18
    2868:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    286c:	07000100 	streq	r0, [r0, -r0, lsl #2]
endstrand
    2870:	08670304 	stmdaeq	r7!, {r2, r8, r9}^
    2874:	63040000 	movwvs	r0, #16384	; 0x4000
	ptr = data;
    2878:	00009b18 	andeq	r9, r0, r8, lsl fp
    287c:	07330300 	ldreq	r0, [r3, -r0, lsl #6]!
	if (*ptr)
    2880:	26050000 	strcs	r0, [r5], -r0
		len = strlen (ptr);
    2884:	00004d12 	andeq	r4, r0, r2, lsl sp
    2888:	23d80300 	bicscs	r0, r8, #0, 6
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    288c:	27050000 	strcs	r0, [r5, -r0]
    2890:	00006012 	andeq	r6, r0, r2, lsl r0
    2894:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    2898:	d9090000 	stmdble	r9, {}	; <UNPREDICTABLE>
    289c:	03000000 	movweq	r0, #0
	len -= quant;
    28a0:	00000ec5 	andeq	r0, r0, r5, asr #29
    28a4:	33122805 	tstcc	r2, #327680	; 0x50000
    28a8:	03000000 	movweq	r0, #0
	if (len == 0) {
    28ac:	000018f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
		ufree (data);
    28b0:	4d122b05 	vldrmi	d2, [r2, #-20]	; 0xffffffec
		finish;
    28b4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    28b8:	000000fb 	strdeq	r0, [r0], -fp
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28bc:	00242903 	eoreq	r2, r4, r3, lsl #18
    28c0:	122c0500 	eorne	r0, ip, #0, 10
    28c4:	00000073 	andeq	r0, r0, r3, ror r0
    28c8:	00010c08 	andeq	r0, r1, r8, lsl #24
    28cc:	04fb0300 	ldrbteq	r0, [fp], #768	; 0x300
strand (__inserial, address)
    28d0:	2d050000 	stccs	0, cr0, [r5, #-0]
    28d4:	00007312 	andeq	r7, r0, r2, lsl r3
    28d8:	08750300 	ldmdaeq	r5!, {r8, r9}^
    28dc:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    28e0:	00013510 	andeq	r3, r1, r0, lsl r5
	if (__inpline != NULL)
    28e4:	d9040a00 	stmdble	r4, {r9, fp}
    28e8:	0b000000 	bleq	28f0 <__inserial+0x20>
		finish;
    28ec:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28f0:	000001c9 	andeq	r0, r0, r9, asr #3
    28f4:	00003e0c 	andeq	r3, r0, ip, lsl #28
    28f8:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    28fc:	000000fb 	strdeq	r0, [r0], -fp
		umwait (IM_INIT);
    2900:	00070101 	andeq	r0, r7, r1, lsl #2
		release;
    2904:	0005010c 	andeq	r0, r5, ip, lsl #2
	savedata (data);
    2908:	03350500 	teqeq	r5, #0, 10
	len = MAX_LINE_LENGTH;
    290c:	000000fb 	strdeq	r0, [r0], -fp
	io (IM_READ, __cport, READ, ptr, 1);
    2910:	00060101 	andeq	r0, r6, r1, lsl #2
    2914:	0002370c 	andeq	r3, r2, ip, lsl #14
    2918:	03360500 	teqeq	r6, #0, 10
    291c:	000000fb 	strdeq	r0, [r0], -fp
	if (ptr == (char*) data) { // new line
    2920:	00050101 	andeq	r0, r5, r1, lsl #2
    2924:	00053b0c 	andeq	r3, r5, ip, lsl #22
		if (*ptr == '\0') { // bin cmd
    2928:	03370500 	teqeq	r7, #0, 10
			proceed (IM_BIN);
    292c:	000000fb 	strdeq	r0, [r0], -fp
    2930:	00040101 	andeq	r0, r4, r1, lsl #2
		if (*ptr < 0x20)
    2934:	0007c40c 	andeq	ip, r7, ip, lsl #8
    2938:	03380500 	teqeq	r8, #0, 10
			proceed (IM_READ);
    293c:	000000fb 	strdeq	r0, [r0], -fp
    2940:	00000401 	andeq	r0, r0, r1, lsl #8
	if (*ptr == '\n' || *ptr == '\r') {
    2944:	0005080d 	andeq	r0, r5, sp, lsl #16
    2948:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    294c:	000000fb 	strdeq	r0, [r0], -fp
		*ptr = '\0';
    2950:	06d20d01 	ldrbeq	r0, [r2], r1, lsl #26
		__inpline = (char*)data;
    2954:	3c050000 	stccc	0, cr0, [r5], {-0}
		finish;
    2958:	0000fb03 	andeq	pc, r0, r3, lsl #22
	if (len) {
    295c:	7c0d0200 	sfmvc	f0, 4, [sp], {-0}
		ptr++;
    2960:	0500000a 	streq	r0, [r0, #-10]
    2964:	00fb033d 	rscseq	r0, fp, sp, lsr r3
		len--;
    2968:	0d030000 	stceq	0, cr0, [r3, #-0]
	proceed (IM_READ);
    296c:	00000707 	andeq	r0, r0, r7, lsl #14
	io (IM_BIN, __cport, READ, ptr, 1);
    2970:	0c083f05 	stceq	15, cr3, [r8], {5}
    2974:	04000001 	streq	r0, [r0], #-1
    2978:	02890300 	addeq	r0, r9, #0, 6
    297c:	41050000 	mrsmi	r0, (UNDEF: 5)
    2980:	00013b03 	andeq	r3, r1, r3, lsl #22
	len -= 2;
    2984:	01c90900 	biceq	r0, r9, r0, lsl #18
	if (len > *ptr + 1) // 1 for 0x04
    2988:	420e0000 	andmi	r0, lr, #0
    298c:	05000005 	streq	r0, [r0, #-5]
		len = *ptr + 1;
    2990:	01d51a43 	bicseq	r1, r5, r3, asr #20
    2994:	01010000 	mrseq	r0, (UNDEF: 1)
	ptr++;
    2998:	0001b10e 	andeq	fp, r1, lr, lsl #2
	quant = io (IM_BINL, __cport, READ, ptr, len);
    299c:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    29a0:	000001f6 	strdeq	r0, [r0], -r6
    29a4:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    29a8:	000001fc 	strdeq	r0, [r0], -ip
    29ac:	e5080102 	str	r0, [r8, #-258]	; 0xfffffefe
    29b0:	08000008 	stmdaeq	r0, {r3}
	len -= quant;
    29b4:	000001fc 	strdeq	r0, [r0], -ip
		__inpline = (char*)data;
    29b8:	0002920e 	andeq	r9, r2, lr, lsl #4
		finish;
    29bc:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
	ptr += quant;
    29c0:	000001f6 	strdeq	r0, [r0], -r6
    29c4:	080b0101 	stmdaeq	fp, {r0, r8}
endstrand
    29c8:	47098f06 	strmi	r8, [r9, -r6, lsl #30]
    29cc:	0d000002 	stceq	0, cr0, [r0, #-8]
	proceed (IM_BINL);
    29d0:	00000605 	andeq	r0, r0, r5, lsl #12
endstrand
    29d4:	730b9006 	movwvc	r9, #45062	; 0xb006
    29d8:	00000000 	andeq	r0, r0, r0
    29dc:	000bae0d 	andeq	sl, fp, sp, lsl #28
    29e0:	08910600 	ldmeq	r1, {r9, sl}
    29e4:	000000d9 	ldrdeq	r0, [r0], -r9
    29e8:	01ea0d04 	mvneq	r0, r4, lsl #26
		if (res && (d < n))
    29ec:	92060000 	andls	r0, r6, #0
    29f0:	00010710 	andeq	r0, r1, r0, lsl r7
    29f4:	03000600 	movweq	r0, #1536	; 0x600
    29f8:	00000945 	andeq	r0, r0, r5, asr #18
			res [d] = (char) c;
    29fc:	16039306 	strne	r9, [r3], -r6, lsl #6
		d++;
    2a00:	0f000002 	svceq	0x00000002
    2a04:	00000247 	andeq	r0, r0, r7, asr #4
    2a08:	0000025e 	andeq	r0, r0, lr, asr r2
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a0c:	130e0010 	movwne	r0, #57360	; 0xe010
    2a10:	06000007 	streq	r0, [r0], -r7
    2a14:	02530f99 	subseq	r0, r3, #612	; 0x264
				enci (10000);
    2a18:	01010000 	mrseq	r0, (UNDEF: 1)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a1c:	9107010b 	tstls	r7, fp, lsl #2
    2a20:	00029609 	andeq	r9, r2, r9, lsl #12
	d = 0;
    2a24:	070e0c00 	streq	r0, [lr, -r0, lsl #24]
		c = *fm++;
    2a28:	93070000 	movwls	r0, #28672	; 0x7000
		if (c == '\\') {
    2a2c:	0000fb07 	andeq	pc, r0, r7, lsl #22
			if ((c = *fm++) == '\0') {
    2a30:	01070100 	mrseq	r0, (UNDEF: 23)
    2a34:	047c0c00 	ldrbteq	r0, [ip], #-3072	; 0xfffff400
				outc ('\\');
    2a38:	94070000 	strls	r0, [r7], #-0
			if ((c = *fm++) == '\0') {
    2a3c:	0000fb03 	andeq	pc, r0, r3, lsl #22
				outc ('\\');
    2a40:	00010100 	andeq	r0, r1, r0, lsl #2
    2a44:	d0030000 	andle	r0, r3, r0
			outc (c);
    2a48:	07000007 	streq	r0, [r0, -r7]
    2a4c:	026c0396 	rsbeq	r0, ip, #1476395010	; 0x58000002
			if (c == '\0')
    2a50:	96080000 	strls	r0, [r8], -r0
    2a54:	0f000002 	svceq	0x00000002
			outc (c);
    2a58:	000002a2 	andeq	r0, r0, r2, lsr #5
				outc (val);
    2a5c:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
				val = (word) va_arg (ap, aword);
    2a60:	a7080010 	smladge	r8, r0, r0, r0
		if (c == '%') {
    2a64:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    2a68:	0000034b 	andeq	r0, r0, fp, asr #6
			c = *fm++;
    2a6c:	b2179c07 	andslt	r9, r7, #1792	; 0x700
			switch (c) {
    2a70:	01000002 	tsteq	r0, r2
    2a74:	00e50f01 	rsceq	r0, r5, r1, lsl #30
    2a78:	02d00000 	sbcseq	r0, r0, #0
    2a7c:	00100000 	andseq	r0, r0, r0
    2a80:	0002c508 	andeq	ip, r2, r8, lsl #10
    2a84:	04bb0e00 	ldrteq	r0, [fp], #3584	; 0xe00
    2a88:	06080000 	streq	r0, [r8], -r0
    2a8c:	0002d013 	andeq	sp, r2, r3, lsl r0
				outc ('%');
    2a90:	0e010100 	adfeqs	f0, f1, f0
    2a94:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
				outc (c);
    2a98:	0c0ec306 	stceq	3, cr12, [lr], {6}
    2a9c:	01000001 	tsteq	r0, r1
    2aa0:	08fe1101 	ldmeq	lr!, {r0, r8, ip}^
				if (c == '\0')
    2aa4:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
				return d;
    2aa8:	02fe1001 	rscseq	r1, lr, #1
}
    2aac:	040a0000 	streq	r0, [sl], #-0
    2ab0:	00000304 	andeq	r0, r0, r4, lsl #6
			switch (c) {
    2ab4:	03100112 	tsteq	r0, #-2147483644	; 0x80000004
    2ab8:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    2abc:	00000000 	andeq	r0, r0, r0
				for (i = 12; ; i -= 4) {
    2ac0:	0002030f 	andeq	r0, r2, pc, lsl #6
				val = (word) va_arg (ap, aword);
    2ac4:	00031b00 	andeq	r1, r3, r0, lsl #22
						[ (val >> i) & 0xf ]);
    2ac8:	08001000 	stmdaeq	r0, {ip}
    2acc:	00000310 	andeq	r0, r0, r0, lsl r3
    2ad0:	00076714 	andeq	r6, r7, r4, lsl r7
					outc (__pi_hex_enc_table
    2ad4:	017f0900 	cmneq	pc, r0, lsl #18
    2ad8:	00031b16 	andeq	r1, r3, r6, lsl fp
					if (i == 0)
    2adc:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    2ae0:	0000032e 	andeq	r0, r0, lr, lsr #6
				for (i = 12; ; i -= 4) {
    2ae4:	14018209 	strne	r8, [r1], #-521	; 0xfffffdf7
				val = (word) va_arg (ap, aword);
    2ae8:	00000118 	andeq	r0, r0, r8, lsl r1
				if (c == 'd' && (val & 0x8000) != 0) {
    2aec:	0b140101 	bleq	502ef8 <__ccfg+0x4e2f50>
				val = (word) va_arg (ap, aword);
    2af0:	09000003 	stmdbeq	r0, {r0, r1}
				if (c == 'd' && (val & 0x8000) != 0) {
    2af4:	0c0e02d8 	sfmeq	f0, 4, [lr], {216}	; 0xd8
    2af8:	01000001 	tsteq	r0, r1
					outc ('-');
    2afc:	09081501 	stmdbeq	r8, {r0, r8, sl, ip}
    2b00:	74090303 	strvc	r0, [r9], #-771	; 0xfffffcfd
					val = (~val) + 1;
    2b04:	16000003 	strne	r0, [r0], -r3
    2b08:	0000375c 	andeq	r3, r0, ip, asr r7
				for (i = 12; ; i -= 4) {
    2b0c:	07030709 	streq	r0, [r3, -r9, lsl #14]
				enci (10000);
    2b10:	000000d9 	ldrdeq	r0, [r0], -r9
    2b14:	0b061600 	bleq	18831c <__ccfg+0x168374>
    2b18:	08090000 	stmdaeq	r9, {}	; <UNPREDICTABLE>
    2b1c:	011d0803 	tsteq	sp, r3, lsl #16
    2b20:	00040000 	andeq	r0, r4, r0
    2b24:	0003c311 	andeq	ip, r3, r1, lsl r3
    2b28:	03090900 	movweq	r0, #39168	; 0x9900
    2b2c:	00034d03 	andeq	r4, r3, r3, lsl #26
    2b30:	00331700 	eorseq	r1, r3, r0, lsl #14
    2b34:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    2b38:	e408030b 	str	r0, [r8], #-779	; 0xfffffcf5
    2b3c:	16000003 	strne	r0, [r0], -r3
    2b40:	00001a07 	andeq	r1, r0, r7, lsl #20
    2b44:	08031409 	stmdaeq	r3, {r0, r3, sl, ip}
    2b48:	000000d9 	ldrdeq	r0, [r0], -r9
    2b4c:	08a81600 	stmiaeq	r8!, {r9, sl, ip}
    2b50:	15090000 	strne	r0, [r9, #-0]
    2b54:	00d90803 	sbcseq	r0, r9, r3, lsl #16
				if (c == 'd' || c == 'u') {
    2b58:	16020000 	strne	r0, [r2], -r0
    2b5c:	000048cc 	andeq	r4, r0, ip, asr #17
					if (c == 'd' &&
    2b60:	0b031609 	bleq	c838c <__ccfg+0xa83e4>
					val = va_arg (ap, lword);
    2b64:	000002f1 	strdeq	r0, [r0], -r1
					fm++;
    2b68:	432f1604 			; <UNDEFINED> instruction: 0x432f1604
					if (c == 'd' &&
    2b6c:	17090000 	strne	r0, [r9, -r0]
    2b70:	011d0903 	tsteq	sp, r3, lsl #18
						outc ('-');
    2b74:	16080000 	strne	r0, [r8], -r0
    2b78:	00000007 	andeq	r0, r0, r7
						val = (~val) + 1;
    2b7c:	0f031809 	svceq	0x00031809
				enci (10000);
    2b80:	000003e4 	andeq	r0, r0, r4, ror #7
					enci (1000000000UL);
    2b84:	0726160c 	streq	r1, [r6, -ip, lsl #12]!
    2b88:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    2b8c:	03f41503 	mvnseq	r1, #12582912	; 0xc00000
    2b90:	002c0000 	eoreq	r0, ip, r0
    2b94:	0003740f 	andeq	r7, r3, pc, lsl #8
    2b98:	0003f400 	andeq	pc, r3, r0, lsl #8
    2b9c:	00941800 	addseq	r1, r4, r0, lsl #16
    2ba0:	00030000 	andeq	r0, r3, r0
    2ba4:	0381040a 	orreq	r0, r1, #167772160	; 0xa000000
    2ba8:	9d110000 	ldcls	0, cr0, [r1, #-0]
    2bac:	09000008 	stmdbeq	r0, {r3}
    2bb0:	811b031c 	tsthi	fp, ip, lsl r3
    2bb4:	14000003 	strne	r0, [r0], #-3
    2bb8:	0000087d 	andeq	r0, r0, sp, ror r8
    2bbc:	14031e09 	strne	r1, [r3], #-3593	; 0xfffff1f7
    2bc0:	00000416 	andeq	r0, r0, r6, lsl r4
    2bc4:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
				} else if (c == 'x') {
    2bc8:	000003fa 	strdeq	r0, [r0], -sl
					for (i = 28; ; i -= 4) {
    2bcc:	00054e0e 	andeq	r4, r5, lr, lsl #28
					val = va_arg (ap, lword);
    2bd0:	131d0a00 	tstne	sp, #0, 20
							[ (val >> i) & 0xf ]);
    2bd4:	000000d9 	ldrdeq	r0, [r0], -r9
    2bd8:	3e0e0101 	adfcce	f0, f6, f1
						outc (__pi_hex_enc_table
    2bdc:	0a000002 	beq	2bec <__pi_vfparse+0x1e0>
    2be0:	00ea1a1e 	rsceq	r1, sl, lr, lsl sl
    2be4:	01010000 	mrseq	r0, (UNDEF: 1)
						if (i == 0)
    2be8:	0008ea0e 	andeq	lr, r8, lr, lsl #20
    2bec:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
					for (i = 28; ; i -= 4) {
    2bf0:	000000ea 	andeq	r0, r0, sl, ror #1
					outc ('%');
    2bf4:	060e0101 	streq	r0, [lr], -r1, lsl #2
    2bf8:	0a000009 	beq	2c24 <__pi_vfparse+0x218>
    2bfc:	04161422 	ldreq	r1, [r6], #-1058	; 0xfffffbde
					outc ('l');
    2c00:	01010000 	mrseq	r0, (UNDEF: 1)
    2c04:	000fd303 	andeq	sp, pc, r3, lsl #6
				val = (word) va_arg (ap, aword);
    2c08:	0f440a00 	svceq	0x00440a00
				outc (val);
    2c0c:	00000460 	andeq	r0, r0, r0, ror #8
    2c10:	0466040a 	strbteq	r0, [r6], #-1034	; 0xfffffbf6
				while (*st != '\0') {
    2c14:	01190000 	tsteq	r9, r0
    2c18:	0000008d 	andeq	r0, r0, sp, lsl #1
    2c1c:	00000480 	andeq	r0, r0, r0, lsl #9
    2c20:	00008d13 	andeq	r8, r0, r3, lsl sp
					outc (*st);
    2c24:	01f61300 	mvnseq	r1, r0, lsl #6
    2c28:	8d130000 	ldchi	0, cr0, [r3, #-0]
					st++;
    2c2c:	00000000 	andeq	r0, r0, r0
		c = *fm++;
    2c30:	00033e1a 	andeq	r3, r3, sl, lsl lr
    2c34:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    2c38:	0b480305 	bleq	1203854 <__ccfg+0x11e38ac>
char *vform (char *res, const char *fm, va_list aq) {
    2c3c:	841b2000 	ldrhi	r2, [fp], #-0
    2c40:	01000011 	tsteq	r0, r1, lsl r0
	if (res != NULL) {
    2c44:	010c0710 	tsteq	ip, r0, lsl r7
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c48:	05010000 	streq	r0, [r1, #-0]
    2c4c:	00000403 	andeq	r0, r0, r3, lsl #8
    2c50:	04461a20 	strbeq	r1, [r6], #-2592	; 0xfffff5e0
}
    2c54:	1a010000 	bne	42c5c <__ccfg+0x22cb4>
    2c58:	4803050d 	stmdami	r3, {r0, r2, r3, r8, sl}
	fml = strlen (fm) + 17;
    2c5c:	0f200005 	svceq	0x00200005
    2c60:	00000454 	andeq	r0, r0, r4, asr r4
    2c64:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
	if ((res = (char*) umalloc (fml)) == NULL)
    2c68:	00009418 	andeq	r9, r0, r8, lsl r4
    2c6c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2c70:	0000100b 	andeq	r1, r0, fp
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c74:	af141e01 	svcge	0x00141e01
    2c78:	05000004 	streq	r0, [r0, #-4]
    2c7c:	00054c03 	andeq	r4, r5, r3, lsl #24
    2c80:	01da1a20 	bicseq	r1, sl, r0, lsr #20
		ufree (res);
    2c84:	22010000 	andcs	r0, r1, #0
		goto Again;
    2c88:	50030513 	andpl	r0, r3, r3, lsl r5
	if (buf == NULL || fmt == NULL)
    2c8c:	1a20000b 	bne	802cc0 <__ccfg+0x7e2d18>
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c90:	00000407 	andeq	r0, r0, r7, lsl #8
	if (buf == NULL || fmt == NULL)
    2c94:	050d2701 	streq	r2, [sp, #-1793]	; 0xfffff8ff
    2c98:	000b6c03 	andeq	r6, fp, r3, lsl #24
    2c9c:	041c1a20 	ldreq	r1, [ip], #-2592	; 0xfffff5e0
		    	    case 'u': scanu (lword); break;
    2ca0:	30010000 	andcc	r0, r1, r0
			while (isspace (*buf)) buf++;
    2ca4:	4c030507 	cfstr32mi	mvfx0, [r3], {7}
    2ca8:	1a20000b 	bne	802cdc <__ccfg+0x7e2d34>
	while (*fmt != '\0') {
    2cac:	0000042a 	andeq	r0, r0, sl, lsr #8
		if (*fmt++ != '%')
    2cb0:	050f3101 	streq	r3, [pc, #-257]	; 2bb7 <__pi_vfparse+0x1ab>
		switch (*fmt++) {
    2cb4:	000b4e03 	andeq	r4, fp, r3, lsl #28
    2cb8:	04381a20 	ldrteq	r1, [r8], #-2592	; 0xfffff5e0
    2cbc:	31010000 	mrscc	r0, (UNDEF: 1)
    2cc0:	58030519 	stmdapl	r3, {r0, r3, r4, r8, sl}
    2cc4:	0f20000b 	svceq	0x0020000b
    2cc8:	00000129 	andeq	r0, r0, r9, lsr #2
    2ccc:	00000527 	andeq	r0, r0, r7, lsr #10
}
    2cd0:	00009418 	andeq	r9, r0, r8, lsl r4
		switch (*fmt++) {
    2cd4:	1b000300 	blne	38dc <NOROM_SetupGetTrimForAdcShVbufEn+0x10>
    2cd8:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
    2cdc:	170a3601 	strne	r3, [sl, -r1, lsl #12]
    2ce0:	01000005 	tsteq	r0, r5
			while (isspace (*buf)) buf++;
    2ce4:	0b5c0305 	bleq	1703900 <__ccfg+0x16e3958>
    2ce8:	201a2000 	andscs	r2, sl, r0
    2cec:	01000003 	tsteq	r0, r3
    2cf0:	03050c3f 	movweq	r0, #23615	; 0x5c3f
    2cf4:	0000448d 	andeq	r4, r0, sp, lsl #9
    2cf8:	00032f1a 	andeq	r2, r3, sl, lsl pc
			if (*buf == '\0')
    2cfc:	0d450100 	stfeqe	f0, [r5, #-0]
			if (*buf != ',') {
    2d00:	00000305 	andeq	r0, r0, r5, lsl #6
			sap = va_arg (ap, char*);
    2d04:	020b0000 	andeq	r0, fp, #0
			nc++;
    2d08:	7a094901 	bvc	255114 <__ccfg+0x23516c>
			if (*buf != ',') {
    2d0c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
				while (!isspace (*buf) && *buf != ',' &&
    2d10:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2d14:	fb074a01 	blx	1d5522 <__ccfg+0x1b557a>
    2d18:	00000000 	andeq	r0, r0, r0
    2d1c:	0011c30d 	andseq	ip, r1, sp, lsl #6
    2d20:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
    2d24:	000000fb 	strdeq	r0, [r0], -fp
    2d28:	fe030001 	cdp2	0, 0, cr0, cr3, cr1, {0}
			while (isspace (*buf)) buf++;
    2d2c:	01000010 	tsteq	r0, r0, lsl r0
    2d30:	0556034c 	ldrbeq	r0, [r6, #-844]	; 0xfffffcb4
    2d34:	7a0f0000 	bvc	3c2d3c <__ccfg+0x3a2d94>
    2d38:	96000005 	strls	r0, [r0], -r5
    2d3c:	18000005 	stmdane	r0, {r0, r2}
			if (*buf == ',') buf++;
    2d40:	00000094 	muleq	r0, r4, r0
    2d44:	241c0000 	ldrcs	r0, [ip], #-0
			*sap = '\0';
    2d48:	01000011 	tsteq	r0, r1, lsl r0
			break;
    2d4c:	0586114e 	streq	r1, [r6, #334]	; 0x14e
		    case 'd': scani (word); break;
    2d50:	03050000 	movweq	r0, #20480	; 0x5000
    2d54:	20000554 	andcs	r0, r0, r4, asr r5
    2d58:	0005b80f 	andeq	fp, r5, pc, lsl #16
    2d5c:	0005b800 	andeq	fp, r5, r0, lsl #16
    2d60:	00941800 	addseq	r1, r4, r0, lsl #16
    2d64:	00000000 	andeq	r0, r0, r0
    2d68:	011d040a 	tsteq	sp, sl, lsl #8
    2d6c:	201d0000 	andscs	r0, sp, r0
    2d70:	01000010 	tsteq	r0, r0, lsl r0
    2d74:	a80f02bd 	stmdage	pc, {r0, r2, r3, r4, r5, r7, r9}	; <UNPREDICTABLE>
    2d78:	05000005 	streq	r0, [r0, #-5]
    2d7c:	00055c03 	andeq	r5, r5, r3, lsl #24
    2d80:	011d0f20 	tsteq	sp, r0, lsr #30
    2d84:	05e10000 	strbeq	r0, [r1, #0]!
    2d88:	94180000 	ldrls	r0, [r8], #-0
    2d8c:	00000000 	andeq	r0, r0, r0
    2d90:	10b91d00 	adcsne	r1, r9, r0, lsl #26
    2d94:	c2010000 	andgt	r0, r1, #0
    2d98:	05d10e02 	ldrbeq	r0, [r1, #3586]	; 0xe02
    2d9c:	03050000 	movweq	r0, #20480	; 0x5000
    2da0:	20000558 	andcs	r0, r0, r8, asr r5
    2da4:	0011071d 	andseq	r0, r1, sp, lsl r7
    2da8:	02c20100 	sbceq	r0, r2, #0, 2
    2dac:	0005d126 	andeq	sp, r5, r6, lsr #2
    2db0:	50030500 	andpl	r0, r3, r0, lsl #10
    2db4:	1e200005 	cdpne	0, 2, cr0, cr0, cr5, {0}
    2db8:	00115001 	andseq	r5, r1, r1
    2dbc:	052f0100 	streq	r0, [pc, #-256]!	; 2cc4 <vscan+0x38>
		    case 'u': scanu (word); break;
    2dc0:	010c0107 	tsteq	ip, r7, lsl #2
    2dc4:	16340000 	ldrtne	r0, [r4], -r0
    2dc8:	16580000 	ldrbne	r0, [r8], -r0
    2dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dd0:	10ed011f 	rscne	r0, sp, pc, lsl r1
    2dd4:	82010000 	andhi	r0, r1, #0
    2dd8:	f8010604 			; <UNDEFINED> instruction: 0xf8010604
    2ddc:	34000014 	strcc	r0, [r0], #-20	; 0xffffffec
    2de0:	01000016 	tsteq	r0, r6, lsl r0
    2de4:	00070e9c 	muleq	r7, ip, lr
    2de8:	111f2000 	tstne	pc, r0
    2dec:	82010000 	andhi	r0, r1, #0
    2df0:	070e1804 	streq	r1, [lr, -r4, lsl #16]
    2df4:	05260000 	streq	r0, [r6, #-0]!
    2df8:	22210000 	eorcs	r0, r1, #0
    2dfc:	006c6176 	rsbeq	r6, ip, r6, ror r1
    2e00:	08048701 	stmdaeq	r4, {r0, r8, r9, sl, pc}
    2e04:	0000010c 	andeq	r0, r0, ip, lsl #2
		    case 'x': scanx (word); break;
    2e08:	00000566 	andeq	r0, r0, r6, ror #10
    2e0c:	00706123 	rsbseq	r6, r0, r3, lsr #2
    2e10:	0a048801 	beq	124e1c <__ccfg+0x104e74>
    2e14:	000000c1 	andeq	r0, r0, r1, asr #1
    2e18:	224c9102 	subcs	r9, ip, #-2147483648	; 0x80000000
    2e1c:	01006362 	tsteq	r0, r2, ror #6
    2e20:	ef070489 	svc	0x00070489
    2e24:	a5000000 	strge	r0, [r0, #-0]
    2e28:	22000005 	andcs	r0, r0, #5
    2e2c:	8a010076 	bhi	4300c <__ccfg+0x23064>
    2e30:	00d90704 	sbcseq	r0, r9, r4, lsl #14
    2e34:	05d90000 	ldrbeq	r0, [r9]
    2e38:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
    2e3c:	8b010073 	blhi	43010 <__ccfg+0x23068>
    2e40:	00fb0704 	rscseq	r0, fp, r4, lsl #14
    2e44:	d3250000 			; <UNDEFINED> instruction: 0xd3250000
    2e48:	01000011 	tsteq	r0, r1, lsl r0
    2e4c:	c40104b0 	strgt	r0, [r1], #-1200	; 0xfffffb50
    2e50:	26000015 			; <UNDEFINED> instruction: 0x26000015
    2e54:	00001584 	andeq	r1, r0, r4, lsl #11
    2e58:	000015a0 	andeq	r1, r0, r0, lsr #11
    2e5c:	000006c0 	andeq	r0, r0, r0, asr #13
    2e60:	01006922 	tsteq	r0, r2, lsr #18
    2e64:	ef0a049f 	svc	0x000a049f
    2e68:	02000000 	andeq	r0, r0, #0
    2e6c:	00000006 	andeq	r0, r0, r6
    2e70:	00061027 	andeq	r1, r6, r7, lsr #32
    2e74:	0006d900 	andeq	sp, r6, r0, lsl #18
    2e78:	00642200 	rsbeq	r2, r4, r0, lsl #4
    2e7c:	0b04a901 	bleq	12d288 <__ccfg+0x10d2e0>
			switch (*fmt++) {
    2e80:	0000010c 	andeq	r0, r0, ip, lsl #2
    2e84:	00000615 	andeq	r0, r0, r5, lsl r6
    2e88:	16102600 	ldrne	r2, [r0], -r0, lsl #12
    2e8c:	161e0000 	ldrne	r0, [lr], -r0
    2e90:	06f60000 	ldrbteq	r0, [r6], r0
    2e94:	73220000 			; <UNDEFINED> instruction: 0x73220000
		    	    case 'd': scani (lword); break;
    2e98:	04c60100 	strbeq	r0, [r6], #256	; 0x100
    2e9c:	0001f60b 	andeq	pc, r1, fp, lsl #12
    2ea0:	00063e00 	andeq	r3, r6, r0, lsl #28
    2ea4:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2ea8:	26000010 			; <UNDEFINED> instruction: 0x26000010
    2eac:	40000015 	andmi	r0, r0, r5, lsl r0
    2eb0:	01000006 	tsteq	r0, r6
    2eb4:	290204d9 	stmdbcs	r2, {r0, r3, r4, r6, r7, sl}
    2eb8:	000010d4 	ldrdeq	r1, [r0], -r4
    2ebc:	040a0000 	streq	r0, [sl], #-0
    2ec0:	00000203 	andeq	r0, r0, r3, lsl #4
    2ec4:	0011a82a 	andseq	sl, r1, sl, lsr #16
    2ec8:	04470100 	strbeq	r0, [r7], #-256	; 0xffffff00
    2ecc:	1008010d 	andne	r0, r8, sp, lsl #2
    2ed0:	10200000 	eorne	r0, r0, r0
    2ed4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ed8:	00000753 	andeq	r0, r0, r3, asr r7
    2edc:	0100632b 	tsteq	r0, fp, lsr #6
    2ee0:	d9190447 	ldmdble	r9, {r0, r1, r2, r6, sl}
    2ee4:	51000000 	mrspl	r0, (UNDEF: 0)
    2ee8:	28000006 	stmdacs	r0, {r1, r2}
    2eec:	000010c1 	andeq	r1, r0, r1, asr #1
    2ef0:	00001008 	andeq	r1, r0, r8
		    	    case 'x': scanx (lword); break;
    2ef4:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2ef8:	02044901 	andeq	r4, r4, #16384	; 0x4000
    2efc:	0010d429 	andseq	sp, r0, r9, lsr #8
    2f00:	2c000000 	stccs	0, cr0, [r0], {-0}
    2f04:	00109e01 	andseq	r9, r0, r1, lsl #28
    2f08:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    2f0c:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    2f18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f1c:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    2f20:	00636e2b 	rsbeq	r6, r3, fp, lsr #28
    2f24:	1c042801 	stcne	8, cr2, [r4], {1}
    2f28:	00000129 	andeq	r0, r0, r9, lsr #2
    2f2c:	00000664 	andeq	r0, r0, r4, ror #12
    2f30:	0011702d 	andseq	r7, r1, sp, lsr #32
    2f34:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    2f38:	0005b809 	andeq	fp, r5, r9, lsl #16
    2f3c:	00068200 	andeq	r8, r6, r0, lsl #4
    2f40:	616d2200 	cmnvs	sp, r0, lsl #4
    2f44:	32010078 	andcc	r0, r1, #120	; 0x78
    2f48:	011d0804 	tsteq	sp, r4, lsl #16
    2f4c:	06a00000 	strteq	r0, [r0], r0
    2f50:	b42d0000 	strtlt	r0, [sp], #-0
    2f54:	01000010 	tsteq	r0, r0, lsl r0
    2f58:	1d0d0432 	cfstrsne	mvf0, [sp, #-200]	; 0xffffff38
    2f5c:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    2f60:	00000006 	andeq	r0, r0, r6
		    	    case 'd': scani (lword); break;
    2f64:	115d012c 	cmpne	sp, ip, lsr #2
    2f68:	15010000 	strne	r0, [r1, #-0]
    2f6c:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    2f78:	01000000 	mrseq	r0, (UNDEF: 0)
    2f7c:	0007e39c 	muleq	r7, ip, r3
		    	    case 'u': scanu (lword); break;
    2f80:	696d2b00 	stmdbvs	sp!, {r8, r9, fp, sp}^
    2f84:	1501006e 	strne	r0, [r1, #-110]	; 0xffffff92
    2f88:	01291c04 			; <UNDEFINED> instruction: 0x01291c04
    2f8c:	06e70000 	strbteq	r0, [r7], r0
    2f90:	1f000000 	svcne	0x00000000
    2f94:	00114301 	andseq	r4, r1, r1, lsl #6
    2f98:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    2f9c:	14e00106 	strbtne	r0, [r0], #262	; 0x106
    2fa0:	14f80000 	ldrbtne	r0, [r8], #0
    2fa4:	9c010000 	stcls	0, cr0, [r1], {-0}
    2fa8:	0000080e 	andeq	r0, r0, lr, lsl #16
    2fac:	00007720 	andeq	r7, r0, r0, lsr #14
    2fb0:	04020100 	streq	r0, [r2], #-256	; 0xffffff00
    2fb4:	0000d919 	andeq	sp, r0, r9, lsl r9
    2fb8:	0006fa00 	andeq	pc, r6, r0, lsl #20
    2fbc:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2fc0:	00000ff2 	strdeq	r0, [r0], -r2
    2fc4:	0803a301 	stmdaeq	r3, {r0, r8, r9, sp, pc}
		    	    case 'x': scanx (lword); break;
    2fc8:	0005b801 	andeq	fp, r5, r1, lsl #16
    2fcc:	00140400 	andseq	r0, r4, r0, lsl #8
			if ((c = *buf++) == '\0')
    2fd0:	0014ac00 	andseq	sl, r4, r0, lsl #24
    2fd4:	809c0100 	addshi	r0, ip, r0, lsl #2
			sap = va_arg (ap, char*);
    2fd8:	20000008 	andcs	r0, r0, r8
			nc++;
    2fdc:	000018d0 	ldrdeq	r1, [r0], -r0
			break;
    2fe0:	1a03a301 	bne	ebbec <__ccfg+0xcbc44>
			while (isspace (*buf)) buf++;
    2fe4:	000000d9 	ldrdeq	r0, [r0], -r9
    2fe8:	0000070d 	andeq	r0, r0, sp, lsl #14
    2fec:	0011702d 	andseq	r7, r1, sp, lsr #32
						*sap++ = *buf++;
    2ff0:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2ff4:	0005b809 	andeq	fp, r5, r9, lsl #16
			while (isspace (*buf)) buf++;
    2ff8:	00072000 	andeq	r2, r7, r0
    2ffc:	63632200 	cmnvs	r3, #0, 4
    3000:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
		return 0;
    3004:	0005b811 	andeq	fp, r5, r1, lsl r8
    3008:	00075400 	andeq	r5, r7, r0, lsl #8
		    case 'x': scanx (word); break;
    300c:	110e2d00 	tstne	lr, r0, lsl #26
    3010:	ab010000 	blge	43018 <__ccfg+0x23070>
		    	    case 'x': scanx (lword); break;
    3014:	011d1503 	tsteq	sp, r3, lsl #10
    3018:	077d0000 	ldrbeq	r0, [sp, -r0]!
    301c:	cf2d0000 	svcgt	0x002d0000
    3020:	01000018 	tsteq	r0, r8, lsl r0
    3024:	1d0803af 	stcne	3, cr0, [r8, #-700]	; 0xfffffd44
    3028:	90000001 	andls	r0, r0, r1
    302c:	00000007 	andeq	r0, r0, r7
    3030:	11c9012e 	bicne	r0, r9, lr, lsr #2
    3034:	7c010000 	stcvc	0, cr0, [r1], {-0}
    3038:	01010603 	tsteq	r1, r3, lsl #12
    303c:	0000089d 	muleq	r0, sp, r8
    3040:	0068632f 	rsbeq	r6, r8, pc, lsr #6
    3044:	18037c01 	stmdane	r3, {r0, sl, fp, ip, sp, lr}
    3048:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    304c:	10052a00 	andne	r2, r5, r0, lsl #20
    3050:	4a010000 	bmi	43058 <__ccfg+0x230b0>
    3054:	88010d03 	stmdahi	r1, {r0, r1, r8, sl, fp}
    3058:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    305c:	01000010 	tsteq	r0, r0, lsl r0
    3060:	0008e79c 	muleq	r8, ip, r7
    3064:	68632b00 	stmdavs	r3!, {r8, r9, fp, sp}^
    3068:	034a0100 	movteq	r0, #41216	; 0xa100
    306c:	0005b81b 	andeq	fp, r5, fp, lsl r8
    3070:	0007ba00 	andeq	fp, r7, r0, lsl #20
    3074:	11702d00 	cmnne	r0, r0, lsl #26
    3078:	57010000 	strpl	r0, [r1, -r0]
    307c:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    3080:	07d80000 	ldrbeq	r0, [r8, r0]
    3084:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3088:	57010063 	strpl	r0, [r1, -r3, rrx]
    308c:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    3090:	08190000 	ldmdaeq	r9, {}	; <UNPREDICTABLE>
    3094:	30000000 	andcc	r0, r0, r0
    3098:	00103b01 	andseq	r3, r0, r1, lsl #22
    309c:	02f00100 	rscseq	r0, r0, #0, 2
    30a0:	00131c06 	andseq	r1, r3, r6, lsl #24
    30a4:	00136c00 	andseq	r6, r3, r0, lsl #24
    30a8:	119c0100 	orrsne	r0, ip, r0, lsl #2
    30ac:	2d000009 	stccs	0, cr0, [r0, #-36]	; 0xffffffdc
    30b0:	000010c8 	andeq	r1, r0, r8, asr #1
    30b4:	0802f501 	stmdaeq	r2, {r0, r8, sl, ip, sp, lr, pc}
    30b8:	0000011d 	andeq	r0, r0, sp, lsl r1
    30bc:	0000084d 	andeq	r0, r0, sp, asr #16
    30c0:	69013100 	stmdbvs	r1, {r8, ip, sp}
    30c4:	7901006f 	stmdbvc	r1, {r0, r1, r2, r3, r5, r6}
    30c8:	ef010602 	svc	0x00010602
    30cc:	80000000 	andhi	r0, r0, r0
    30d0:	1c000012 	stcne	0, cr0, [r0], {18}
    30d4:	01000013 	tsteq	r0, r3, lsl r0
    30d8:	0009949c 	muleq	r9, ip, r4
    30dc:	11142000 	tstne	r4, r0
    30e0:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    30e4:	00d90f02 	sbcseq	r0, r9, r2, lsl #30
    30e8:	086b0000 	stmdaeq	fp!, {}^	; <UNPREDICTABLE>
    30ec:	642b0000 	strtvs	r0, [fp], #-0
    30f0:	01007665 	tsteq	r0, r5, ror #12
    30f4:	d91b0279 	ldmdble	fp, {r0, r3, r4, r5, r6, r9}
    30f8:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
    30fc:	20000008 	andcs	r0, r0, r8
    3100:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
    3104:	25027901 	strcs	r7, [r2, #-2305]	; 0xfffff6ff
    3108:	000000d9 	ldrdeq	r0, [r0], -r9
    310c:	000008a7 	andeq	r0, r0, r7, lsr #17
    3110:	6675622b 	ldrbtvs	r6, [r5], -fp, lsr #4
    3114:	02790100 	rsbseq	r0, r9, #0, 2
    3118:	0001f636 	andeq	pc, r1, r6, lsr r6	; <UNPREDICTABLE>
    311c:	0008c500 	andeq	ip, r8, r0, lsl #10
    3120:	656c2b00 	strbvs	r2, [ip, #-2816]!	; 0xfffff500
    3124:	7901006e 	stmdbvc	r1, {r1, r2, r3, r5, r6}
    3128:	00d94002 	sbcseq	r4, r9, r2
    312c:	08e30000 	stmiaeq	r3!, {}^	; <UNPREDICTABLE>
    3130:	72220000 	eorvc	r0, r2, #0
    3134:	01007465 	tsteq	r0, r5, ror #8
    3138:	ef07027b 	svc	0x0007027b
    313c:	03000000 	movweq	r0, #0
    3140:	00000009 	andeq	r0, r0, r9
    3144:	10db011f 	sbcsne	r0, fp, pc, lsl r1
    3148:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    314c:	5c010602 	stcpl	6, cr0, [r1], {2}
    3150:	80000012 	andhi	r0, r0, r2, lsl r0
    3154:	01000012 	tsteq	r0, r2, lsl r0
    3158:	0009cf9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
    315c:	66722b00 	ldrbtvs	r2, [r2], -r0, lsl #22
    3160:	02690100 	rsbeq	r0, r9, #0, 2
    3164:	0004541e 	andeq	r5, r4, lr, lsl r4
    3168:	00093700 	andeq	r3, r9, r0, lsl #14
    316c:	6f6c2b00 	svcvs	0x006c2b00
    3170:	69010063 	stmdbvs	r1, {r0, r1, r5, r6}
    3174:	008d2602 	addeq	r2, sp, r2, lsl #12
    3178:	09600000 	stmdbeq	r0!, {}^	; <UNPREDICTABLE>
    317c:	1f000000 	svcne	0x00000000
    3180:	0011da01 	andseq	sp, r1, r1, lsl #20
    3184:	025f0100 	subseq	r0, pc, #0, 2
    3188:	124e0106 	subne	r0, lr, #-2147483647	; 0x80000001
    318c:	125c0000 	subsne	r0, ip, #0
    3190:	9c010000 	stcls	0, cr0, [r1], {-0}
    3194:	00000a16 	andeq	r0, r0, r6, lsl sl
    3198:	00111a20 	andseq	r1, r1, r0, lsr #20
    319c:	025f0100 	subseq	r0, pc, #0, 2
    31a0:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    31a4:	00098900 	andeq	r8, r9, r0, lsl #18
    31a8:	00633200 	rsbeq	r3, r3, r0, lsl #4
    31ac:	24025f01 	strcs	r5, [r2], #-3841	; 0xfffff0ff
    31b0:	000001fc 	strdeq	r0, [r0], -ip
    31b4:	6e2b5101 	sufvse	f5, f3, f1
    31b8:	025f0100 	subseq	r0, pc, #0, 2
    31bc:	00008d2b 	andeq	r8, r0, fp, lsr #26
    31c0:	0009a700 	andeq	sl, r9, r0, lsl #14
    31c4:	011f0000 	tsteq	pc, r0
    31c8:	0000119c 	muleq	r0, ip, r1
    31cc:	06025901 	streq	r5, [r2], -r1, lsl #18
    31d0:	00123a01 	andseq	r3, r2, r1, lsl #20
    31d4:	00124e00 	andseq	r4, r2, r0, lsl #28
    31d8:	619c0100 	orrsvs	r0, ip, r0, lsl #2
    31dc:	2000000a 	andcs	r0, r0, sl
    31e0:	0000111a 	andeq	r1, r0, sl, lsl r1
    31e4:	19025901 	stmdbne	r2, {r0, r8, fp, ip, lr}
    31e8:	000001f6 	strdeq	r0, [r0], -r6
    31ec:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    31f0:	6372732b 	cmnvs	r2, #-1409286144	; 0xac000000
    31f4:	02590100 	subseq	r0, r9, #0, 2
    31f8:	00070e2b 	andeq	r0, r7, fp, lsr #28
    31fc:	0009cd00 	andeq	ip, r9, r0, lsl #26
    3200:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    3204:	34025901 	strcc	r5, [r2], #-2305	; 0xfffff6ff
    3208:	0000008d 	andeq	r0, r0, sp, lsl #1
    320c:	000009eb 	andeq	r0, r0, fp, ror #19
    3210:	0b011f00 	bleq	4ae18 <__ccfg+0x2ae70>
    3214:	01000012 	tsteq	r0, r2, lsl r0
    3218:	01060254 	tsteq	r6, r4, asr r2
	...
    3224:	0aa69c01 	beq	fe9aa230 <_estack+0xde9a5230>
    3228:	642b0000 	strtvs	r0, [fp], #-0
    322c:	02540100 	subseq	r0, r4, #0, 2
    3230:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    3234:	0009fe00 	andeq	pc, r9, r0, lsl #28
    3238:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    323c:	29025401 	stmdbcs	r2, {r0, sl, ip, lr}
    3240:	0000070e 	andeq	r0, r0, lr, lsl #14
    3244:	00000a11 	andeq	r0, r0, r1, lsl sl
    3248:	01006e32 	tsteq	r0, r2, lsr lr
    324c:	8d300254 	lfmhi	f0, 4, [r0, #-336]!	; 0xfffffeb0
    3250:	01000000 	mrseq	r0, (UNDEF: 0)
    3254:	011f0052 	tsteq	pc, r2, asr r0	; <UNPREDICTABLE>
    3258:	000010f2 	strdeq	r1, [r0], -r2
    325c:	06024e01 	streq	r4, [r2], -r1, lsl #28
    3260:	00000001 	andeq	r0, r0, r1
    3264:	00000000 	andeq	r0, r0, r0
    3268:	de9c0100 	fmllee	f0, f4, f0
    326c:	2b00000a 	blcs	329c <NOROM_RFCRfTrimRead+0x38>
    3270:	4e010064 	cdpmi	0, 0, cr0, cr1, cr4, {3}
    3274:	01f61902 	mvnseq	r1, r2, lsl #18
    3278:	0a240000 	beq	903280 <__ccfg+0x8e32d8>
    327c:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    3280:	024e0100 	subeq	r0, lr, #0, 2
    3284:	00070e28 	andeq	r0, r7, r8, lsr #28
    3288:	000a4200 	andeq	r4, sl, r0, lsl #4
    328c:	011f0000 	tsteq	pc, r0
    3290:	000011e6 	andeq	r1, r0, r6, ror #3
    3294:	06024701 	streq	r4, [r2], -r1, lsl #14
    3298:	00000001 	andeq	r0, r0, r1
    329c:	00000000 	andeq	r0, r0, r0
    32a0:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    32a4:	2b00000b 	blcs	32d8 <NOROM_RFCRfTrimRead+0x74>
    32a8:	47010064 	strmi	r0, [r1, -r4, rrx]
    32ac:	01f61a02 	mvnseq	r1, r2, lsl #20
    32b0:	0a550000 	beq	15432b8 <__ccfg+0x1523310>
    32b4:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    32b8:	02470100 	subeq	r0, r7, #0, 2
    32bc:	00070e29 	andeq	r0, r7, r9, lsr #28
    32c0:	000a7300 	andeq	r7, sl, r0, lsl #6
    32c4:	006e2b00 	rsbeq	r2, lr, r0, lsl #22
    32c8:	30024701 	andcc	r4, r2, r1, lsl #14
    32cc:	0000008d 	andeq	r0, r0, sp, lsl #1
    32d0:	00000a86 	andeq	r0, r0, r6, lsl #21
    32d4:	e6011f00 	str	r1, [r1], -r0, lsl #30
    32d8:	0100000f 	tsteq	r0, pc
    32dc:	01060242 	tsteq	r6, r2, asr #4
	...
    32e8:	0b5d9c01 	bleq	176a2f4 <__ccfg+0x174a34c>
    32ec:	642b0000 	strtvs	r0, [fp], #-0
    32f0:	02420100 	subeq	r0, r2, #0, 2
    32f4:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    32f8:	000a9900 	andeq	r9, sl, r0, lsl #18
    32fc:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3300:	28024201 	stmdacs	r2, {r0, r9, lr}
    3304:	0000070e 	andeq	r0, r0, lr, lsl #14
    3308:	00000aac 	andeq	r0, r0, ip, lsr #21
    330c:	92012c00 	andls	r2, r1, #0, 24
    3310:	01000010 	tsteq	r0, r0, lsl r0
    3314:	01050239 	tsteq	r5, r9, lsr r2
    3318:	0000008d 	andeq	r0, r0, sp, lsl #1
    331c:	0000122c 	andeq	r1, r0, ip, lsr #4
    3320:	0000123a 	andeq	r1, r0, sl, lsr r2
    3324:	0b999c01 	bleq	fe66a330 <_estack+0xde665330>
    3328:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    332c:	02390100 	eorseq	r0, r9, #0, 2
    3330:	00070e1e 	andeq	r0, r7, lr, lsl lr
    3334:	000aca00 	andeq	ip, sl, r0, lsl #20
    3338:	00692200 	rsbeq	r2, r9, r0, lsl #4
    333c:	06023b01 	streq	r3, [r2], -r1, lsl #22
    3340:	0000008d 	andeq	r0, r0, sp, lsl #1
    3344:	00000ae8 	andeq	r0, r0, r8, ror #21
    3348:	ab012c00 	blge	4e350 <__ccfg+0x2e3a8>
    334c:	01000010 	tsteq	r0, r0, lsl r0
    3350:	0106022d 	tsteq	r6, sp, lsr #4
    3354:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    3360:	0be69c01 	bleq	ff9aa36c <_estack+0xdf9a536c>
    3364:	662b0000 	strtvs	r0, [fp], -r0
    3368:	01006e75 	tsteq	r0, r5, ror lr
    336c:	f118022d 			; <UNDEFINED> instruction: 0xf118022d
    3370:	fb000002 	blx	3382 <NOROM_RFCRfTrimRead+0x11e>
    3374:	2200000a 	andcs	r0, r0, #10
    3378:	2f010069 	svccs	0x00010069
    337c:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    3380:	0b190000 	bleq	643388 <__ccfg+0x6233e0>
    3384:	63220000 			; <UNDEFINED> instruction: 0x63220000
    3388:	02300100 	eorseq	r0, r0, #0, 2
    338c:	0000d907 	andeq	sp, r0, r7, lsl #18
    3390:	000b3700 	andeq	r3, fp, r0, lsl #14
    3394:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3398:	000010ac 	andeq	r1, r0, ip, lsr #1
    339c:	07021f01 	streq	r1, [r2, -r1, lsl #30]
    33a0:	00011d01 	andeq	r1, r1, r1, lsl #26
    33a4:	00120800 	andseq	r0, r2, r0, lsl #16
    33a8:	00122c00 	andseq	r2, r2, r0, lsl #24
    33ac:	229c0100 	addscs	r0, ip, #0, 2
    33b0:	2b00000c 	blcs	33e8 <NOROM_RFCRTrim+0x34>
    33b4:	006e7566 	rsbeq	r7, lr, r6, ror #10
    33b8:	18021f01 	stmdane	r2, {r0, r8, r9, sl, fp, ip}
    33bc:	000002f1 	strdeq	r0, [r0], -r1
    33c0:	00000b4a 	andeq	r0, r0, sl, asr #22
    33c4:	01006923 	tsteq	r0, r3, lsr #18
    33c8:	160e0221 	strne	r0, [lr], -r1, lsr #4
    33cc:	01000004 	tsteq	r0, r4
    33d0:	012c0050 	qsubeq	r0, r0, ip
    33d4:	0000118e 	andeq	r1, r0, lr, lsl #3
    33d8:	09021301 	stmdbeq	r2, {r0, r8, r9, ip}
    33dc:	0002f101 	andeq	pc, r2, r1, lsl #2
	...
    33e8:	609c0100 	addsvs	r0, ip, r0, lsl #2
    33ec:	2b00000c 	blcs	3424 <NOROM_RFCRTrim+0x70>
    33f0:	00646970 	rsbeq	r6, r4, r0, ror r9
    33f4:	18021301 	stmdane	r2, {r0, r8, r9, ip}
    33f8:	0000011d 	andeq	r0, r0, sp, lsl r1
    33fc:	00000b73 	andeq	r0, r0, r3, ror fp
    3400:	01006922 	tsteq	r0, r2, lsr #18
    3404:	160e0215 			; <UNDEFINED> instruction: 0x160e0215
    3408:	91000004 	tstls	r0, r4
    340c:	0000000b 	andeq	r0, r0, fp
    3410:	1155011f 	cmpne	r5, pc, lsl r1
    3414:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    3418:	00010601 	andeq	r0, r1, r1, lsl #12
    341c:	00000000 	andeq	r0, r0, r0
    3420:	01000000 	mrseq	r0, (UNDEF: 0)
    3424:	000cc99c 	muleq	ip, ip, r9
    3428:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    342c:	f501006e 			; <UNDEFINED> instruction: 0xf501006e
    3430:	02f11701 	rscseq	r1, r1, #262144	; 0x40000
    3434:	0baf0000 	bleq	febc343c <_estack+0xdebbe43c>
    3438:	72220000 	eorvc	r0, r2, #0
    343c:	01006c65 	tsteq	r0, r5, ror #24
    3440:	cd0a01f9 	stfgts	f0, [sl, #-996]	; 0xfffffc1c
    3444:	cd000000 	stcgt	0, cr0, [r0, #-0]
    3448:	2200000b 	andcs	r0, r0, #11
    344c:	fa010069 	blx	435f8 <__ccfg+0x23650>
    3450:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3454:	0be00000 	bleq	ff80345c <_estack+0xdf7fe45c>
    3458:	6a220000 	bvs	883460 <__ccfg+0x8634b8>
    345c:	01fa0100 	mvnseq	r0, r0, lsl #2
    3460:	00041612 	andeq	r1, r4, r2, lsl r6
    3464:	000c1400 	andeq	r1, ip, r0, lsl #8
    3468:	006b2200 	rsbeq	r2, fp, r0, lsl #4
    346c:	1601fa01 	strne	pc, [r1], -r1, lsl #20
    3470:	00000416 	andeq	r0, r0, r6, lsl r4
    3474:	00000c32 	andeq	r0, r0, r2, lsr ip
    3478:	1b011f00 	blne	4b080 <__ccfg+0x2b0d8>
    347c:	01000010 	tsteq	r0, r0, lsl r0
    3480:	010601d9 	ldrdeq	r0, [r6, -r9]
    3484:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    3488:	00001404 	andeq	r1, r0, r4, lsl #8
    348c:	0d0e9c01 	stceq	12, cr9, [lr, #-4]
    3490:	702b0000 	eorvc	r0, fp, r0
    3494:	01006469 	tsteq	r0, r9, ror #8
    3498:	1d1201d9 	ldfnes	f0, [r2, #-868]	; 0xfffffc9c
    349c:	50000001 	andpl	r0, r0, r1
    34a0:	2200000c 	andcs	r0, r0, #12
    34a4:	dd010069 	stcle	0, cr0, [r1, #-420]	; 0xfffffe5c
    34a8:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    34ac:	0c840000 	stceq	0, cr0, [r4], {0}
    34b0:	6a240000 	bvs	9034b8 <__ccfg+0x8e3510>
    34b4:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    34b8:	00041612 	andeq	r1, r4, r2, lsl r6
    34bc:	df2a0000 	svcle	0x002a0000
    34c0:	0100000f 	tsteq	r0, pc
    34c4:	010d01c4 	smlabteq	sp, r4, r1, r0
    34c8:	00000f4c 	andeq	r0, r0, ip, asr #30
    34cc:	00000f88 	andeq	r0, r0, r8, lsl #31
    34d0:	0d639c01 	stcleq	12, cr9, [r3, #-4]!
    34d4:	70320000 	eorsvc	r0, r2, r0
    34d8:	01006469 	tsteq	r0, r9, ror #8
    34dc:	162101c4 	strtne	r0, [r1], -r4, asr #3
    34e0:	01000004 	tsteq	r0, r4
    34e4:	11be2d50 			; <UNDEFINED> instruction: 0x11be2d50
    34e8:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    34ec:	011d0801 	tsteq	sp, r1, lsl #16
    34f0:	0cad0000 	stceq	0, cr0, [sp]
    34f4:	6a220000 	bvs	8834fc <__ccfg+0x863554>
    34f8:	01c90100 	biceq	r0, r9, r0, lsl #2
    34fc:	00008d06 	andeq	r8, r0, r6, lsl #26
    3500:	000cc000 	andeq	ip, ip, r0
    3504:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3508:	0e01ca01 	vmlaeq.f32	s24, s2, s2
    350c:	00000416 	andeq	r0, r0, r6, lsl r4
    3510:	2c005201 	sfmcs	f5, 4, [r0], {1}
    3514:	00119601 	andseq	r9, r1, r1, lsl #12
    3518:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    351c:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    3528:	9c010000 	stcls	0, cr0, [r1], {-0}
    352c:	00000da1 	andeq	r0, r0, r1, lsr #27
    3530:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    3534:	01b30100 			; <UNDEFINED> instruction: 0x01b30100
    3538:	00011d13 	andeq	r1, r1, r3, lsl sp
    353c:	000cd300 	andeq	sp, ip, r0, lsl #6
    3540:	00692200 	rsbeq	r2, r9, r0, lsl #4
    3544:	0e01b501 	cfsh32eq	mvfx11, mvfx1, #1
    3548:	00000416 	andeq	r0, r0, r6, lsl r4
    354c:	00000cf1 	strdeq	r0, [r0], -r1
    3550:	fe013300 	cdp2	3, 0, cr3, cr1, cr0, {0}
    3554:	0100000f 	tsteq	r0, pc
    3558:	010601a8 	smlatbeq	r6, r8, r1, r0
	...
    3564:	011f9c01 	tsteq	pc, r1, lsl #24
    3568:	0000279f 	muleq	r0, pc, r7	; <UNPREDICTABLE>
    356c:	06019a01 	streq	r9, [r1], -r1, lsl #20
    3570:	0011d001 	andseq	sp, r1, r1
    3574:	00120800 	andseq	r0, r2, r0, lsl #16
    3578:	f09c0100 			; <UNDEFINED> instruction: 0xf09c0100
    357c:	2b00000d 	blcs	35b8 <TrimAfterColdResetWakeupFromShutDown+0xb0>
    3580:	9a010064 	bls	43718 <__ccfg+0x23770>
    3584:	00d91201 	sbcseq	r1, r9, r1, lsl #4
    3588:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 3590 <TrimAfterColdResetWakeupFromShutDown+0x88>
    358c:	77200000 	strvc	r0, [r0, -r0]!
    3590:	01000000 	mrseq	r0, (UNDEF: 0)
    3594:	d91a019a 	ldmdble	sl, {r1, r3, r4, r7, r8}
    3598:	22000000 	andcs	r0, r0, #0
    359c:	0000000d 	andeq	r0, r0, sp
    35a0:	11f3012c 	mvnsne	r0, ip, lsr #2
    35a4:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    35a8:	1d010701 	stcne	7, cr0, [r1, #-4]
    35ac:	ac000001 	stcge	0, cr0, [r0], {1}
    35b0:	d0000011 	andle	r0, r0, r1, lsl r0
    35b4:	01000011 	tsteq	r0, r1, lsl r0
    35b8:	000e3e9c 	muleq	lr, ip, lr
    35bc:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    35c0:	88010064 	stmdahi	r1, {r2, r5, r6}
    35c4:	011d1801 	tsteq	sp, r1, lsl #16
    35c8:	0d350000 	ldceq	0, cr0, [r5, #-0]
    35cc:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    35d0:	88010074 	stmdahi	r1, {r2, r4, r5, r6}
    35d4:	00d92201 	sbcseq	r2, r9, r1, lsl #4
    35d8:	0d5e0000 	ldcleq	0, cr0, [lr, #-0]
    35dc:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    35e0:	018a0100 	orreq	r0, sl, r0, lsl #2
    35e4:	0004160e 	andeq	r1, r4, lr, lsl #12
    35e8:	000d7c00 	andeq	r7, sp, r0, lsl #24
    35ec:	011f0000 	tsteq	pc, r0
    35f0:	000010cd 	andeq	r1, r0, sp, asr #1
    35f4:	06017801 	streq	r7, [r1], -r1, lsl #16
    35f8:	00000001 	andeq	r0, r0, r1
    35fc:	00000000 	andeq	r0, r0, r0
    3600:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    3604:	2b00000e 	blcs	3644 <NOROM_SetupTrimDevice+0x68>
    3608:	00646970 	rsbeq	r6, r4, r0, ror r9
    360c:	1b017801 	blne	61618 <__ccfg+0x41670>
    3610:	0000011d 	andeq	r0, r0, sp, lsl r1
    3614:	00000d9a 	muleq	r0, sl, sp
    3618:	00112520 	andseq	r2, r1, r0, lsr #10
    361c:	01780100 	cmneq	r8, r0, lsl #2
    3620:	00011d26 	andeq	r1, r1, r6, lsr #26
    3624:	000dad00 	andeq	sl, sp, r0, lsl #26
    3628:	00692300 	rsbeq	r2, r9, r0, lsl #6
    362c:	0e017c01 	cdpeq	12, 0, cr7, cr1, cr1, {0}
    3630:	00000416 	andeq	r0, r0, r6, lsl r4
    3634:	6a225001 	bvs	897640 <__ccfg+0x877698>
    3638:	017d0100 	cmneq	sp, r0, lsl #2
    363c:	00008d07 	andeq	r8, r0, r7, lsl #26
    3640:	000dcb00 	andeq	ip, sp, r0, lsl #22
    3644:	011f0000 	tsteq	pc, r0
    3648:	00001085 	andeq	r1, r0, r5, lsl #1
    364c:	06016601 	streq	r6, [r1], -r1, lsl #12
    3650:	00117801 	andseq	r7, r1, r1, lsl #16
    3654:	0011ac00 	andseq	sl, r1, r0, lsl #24
    3658:	db9c0100 	blle	fe703a60 <_estack+0xde6fea60>
    365c:	3400000e 	strcc	r0, [r0], #-14
    3660:	00001125 	andeq	r1, r0, r5, lsr #2
    3664:	1a016601 	bne	5ce70 <__ccfg+0x3cec8>
    3668:	0000011d 	andeq	r0, r0, sp, lsl r1
    366c:	6a225001 	bvs	897678 <__ccfg+0x8776d0>
    3670:	016a0100 	cmneq	sl, r0, lsl #2
    3674:	00008d06 	andeq	r8, r0, r6, lsl #26
    3678:	000de900 	andeq	lr, sp, r0, lsl #18
    367c:	00692300 	rsbeq	r2, r9, r0, lsl #6
    3680:	0e016b01 	vmlaeq.f64	d6, d1, d1
    3684:	00000416 	andeq	r0, r0, r6, lsl r4
    3688:	2e005201 	cdpcs	2, 0, cr5, cr0, cr1, {0}
    368c:	00113901 	andseq	r3, r1, r1, lsl #18
    3690:	01590100 	cmpeq	r9, r0, lsl #2
    3694:	11010106 	tstne	r1, r6, lsl #2
    3698:	3500000f 	strcc	r0, [r0, #-15]
    369c:	00001125 	andeq	r1, r0, r5, lsr #2
    36a0:	17015901 	strne	r5, [r1, -r1, lsl #18]
    36a4:	0000011d 	andeq	r0, r0, sp, lsl r1
    36a8:	00007735 	andeq	r7, r0, r5, lsr r7
    36ac:	01590100 	cmpeq	r9, r0, lsl #2
    36b0:	0000d923 	andeq	sp, r0, r3, lsr #18
    36b4:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    36b8:	07015d01 	streq	r5, [r1, -r1, lsl #26]
    36bc:	000000ef 	andeq	r0, r0, pc, ror #1
    36c0:	c0011f00 	andgt	r1, r1, r0, lsl #30
    36c4:	01000010 	tsteq	r0, r0, lsl r0
    36c8:	01060153 	tsteq	r6, r3, asr r1
    36cc:	00001130 	andeq	r1, r0, r0, lsr r1
    36d0:	00001144 	andeq	r1, r0, r4, asr #2
    36d4:	0f3c9c01 	svceq	0x003c9c01
    36d8:	77200000 	strvc	r0, [r0, -r0]!
    36dc:	01000000 	mrseq	r0, (UNDEF: 0)
    36e0:	d9140153 	ldmdble	r4, {r0, r1, r4, r6, r8}
    36e4:	fc000000 	stc2	0, cr0, [r0], {-0}
    36e8:	0000000d 	andeq	r0, r0, sp
    36ec:	1011012c 	andsne	r0, r1, ip, lsr #2
    36f0:	2c010000 	stccs	0, cr0, [r1], {-0}
    36f4:	1d010701 	stcne	7, cr0, [r1, #-4]
    36f8:	ac000001 	stcge	0, cr0, [r0], {1}
    36fc:	e0000014 	and	r0, r0, r4, lsl r0
    3700:	01000014 	tsteq	r0, r4, lsl r0
    3704:	000f9e9c 	muleq	pc, ip, lr	; <UNPREDICTABLE>
    3708:	051e2000 	ldreq	r2, [lr, #-0]
    370c:	2c010000 	stccs	0, cr0, [r1], {-0}
    3710:	02f11a01 	rscseq	r1, r1, #4096	; 0x1000
    3714:	0e0f0000 	cdpeq	0, 0, cr0, cr15, cr0, {0}
    3718:	2f200000 	svccs	0x00200000
    371c:	01000043 	tsteq	r0, r3, asr #32
    3720:	1d26012c 	stfnes	f0, [r6, #-176]!	; 0xffffff50
    3724:	2d000001 	stccs	0, cr0, [r0, #-4]
    3728:	2300000e 	movwcs	r0, #14
    372c:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
    3730:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    3734:	50010000 	andpl	r0, r1, r0
    3738:	0005e836 	andeq	lr, r5, r6, lsr r8
    373c:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    3740:	0f013d01 	svceq	0x00013d01
    3744:	00000416 	andeq	r0, r0, r6, lsl r4
    3748:	00000e4b 	andeq	r0, r0, fp, asr #28
    374c:	01370000 	teqeq	r7, r0
    3750:	00001176 	andeq	r1, r0, r6, ror r1
    3754:	0106af01 	tsteq	r6, r1, lsl #30
    3758:	000fe301 	andeq	lr, pc, r1, lsl #6
    375c:	696d3800 	stmdbvs	sp!, {fp, ip, sp}^
    3760:	af01006e 	svcge	0x0001006e
    3764:	0000d91a 	andeq	sp, r0, sl, lsl r9
    3768:	0d7b3900 			; <UNDEFINED> instruction: 0x0d7b3900
    376c:	af010000 	svcge	0x00010000
    3770:	0000cd27 	andeq	ip, r0, r7, lsr #26
    3774:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    3778:	160ebd01 	strne	fp, [lr], -r1, lsl #26
    377c:	3a000004 	bcc	3794 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>
    3780:	be010064 	cdplt	0, 0, cr0, cr1, cr4, {3}
    3784:	0000d907 	andeq	sp, r0, r7, lsl #18
    3788:	4f4d3b00 	svcmi	0x004d3b00
    378c:	0901004b 	stmdbeq	r1, {r0, r1, r3, r6}
    3790:	3c000101 	stfccs	f0, [r0], {1}
    3794:	0011ae01 	andseq	sl, r1, r1, lsl #28
    3798:	06a70100 	strteq	r0, [r7], r0, lsl #2
    379c:	00105c01 	andseq	r5, r0, r1, lsl #24
    37a0:	00106200 	andseq	r6, r0, r0, lsl #4
    37a4:	189c0100 	ldmne	ip, {r8}
    37a8:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    37ac:	a7010074 	smlsdxge	r1, r4, r0, r0
    37b0:	0001291f 	andeq	r2, r1, pc, lsl r9
    37b4:	000e7400 	andeq	r7, lr, r0, lsl #8
    37b8:	00763d00 	rsbseq	r3, r6, r0, lsl #26
    37bc:	d927a701 	stmdble	r7!, {r0, r8, r9, sl, sp, pc}
    37c0:	87000000 	strhi	r0, [r0, -r0]
    37c4:	0000000e 	andeq	r0, r0, lr
    37c8:	11fd013c 	mvnsne	r0, ip, lsr r1
    37cc:	8f010000 	svchi	0x00010000
    37d0:	00000106 	andeq	r0, r0, r6, lsl #2
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    37dc:	0000104e 	andeq	r1, r0, lr, asr #32
    37e0:	0074753d 	rsbseq	r7, r4, sp, lsr r5
    37e4:	291d8f01 	ldmdbcs	sp, {r0, r8, r9, sl, fp, pc}
    37e8:	9a000001 	bls	37f4 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    37ec:	3e00000e 	cdpcc	0, 0, cr0, cr0, cr14, {0}
    37f0:	93010069 	movwls	r0, #4201	; 0x1069
    37f4:	00008d06 	andeq	r8, r0, r6, lsl #26
    37f8:	000eb800 	andeq	fp, lr, r0, lsl #16
    37fc:	013c0000 	teqeq	ip, r0
    3800:	00001027 	andeq	r1, r0, r7, lsr #32
    3804:	01067f01 	tsteq	r6, r1, lsl #30
    3808:	00001030 	andeq	r1, r0, r0, lsr r0
    380c:	0000105c 	andeq	r1, r0, ip, asr r0
    3810:	10849c01 	addne	r9, r4, r1, lsl #24
    3814:	753d0000 	ldrvc	r0, [sp, #-0]!
    3818:	7f010074 	svcvc	0x00010074
    381c:	0001291a 	andeq	r2, r1, sl, lsl r9
    3820:	000ed600 	andeq	sp, lr, r0, lsl #12
    3824:	00693e00 	rsbeq	r3, r9, r0, lsl #28
    3828:	8d068301 	stchi	3, cr8, [r6, #-4]
    382c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    3830:	0000000e 	andeq	r0, r0, lr
    3834:	112b013f 			; <UNDEFINED> instruction: 0x112b013f
    3838:	7b010000 	blvc	43840 <__ccfg+0x23898>
    383c:	10200106 	eorne	r0, r0, r6, lsl #2
    3840:	10300000 	eorsne	r0, r0, r0
    3844:	9c010000 	stcls	0, cr0, [r1], {-0}
    3848:	0010e640 	andseq	lr, r0, r0, asr #12
    384c:	145f0100 	ldrbne	r0, [pc], #-256	; 3854 <NOROM_SetupGetTrimForAmpcompCtrl+0x14>
    3850:	00041601 	andeq	r1, r4, r1, lsl #12
    3854:	10c10100 	sbcne	r0, r1, r0, lsl #2
    3858:	70380000 	eorsvc	r0, r8, r0
    385c:	01006469 	tsteq	r0, r9, ror #8
    3860:	011d225f 	tsteq	sp, pc, asr r2
    3864:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    3868:	17610100 	strbne	r0, [r1, -r0, lsl #2]!
    386c:	00000416 	andeq	r0, r0, r6, lsl r4
    3870:	10324100 	eorsne	r4, r2, r0, lsl #2
    3874:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    3878:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    387c:	03000010 	movweq	r0, #16
    3880:	000010e2 	andeq	r1, r0, r2, ror #1
    3884:	000cf335 	andeq	pc, ip, r5, lsr r3	; <UNPREDICTABLE>
    3888:	029e0200 	addseq	r0, lr, #0, 4
    388c:	00007313 	andeq	r7, r0, r3, lsl r3
    3890:	01020000 	mrseq	r0, (UNDEF: 2)
    3894:	00116a02 	andseq	r6, r1, r2, lsl #20
    3898:	10984200 	addsne	r4, r8, r0, lsl #4
	...
    38a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    38a8:	0000112e 	andeq	r1, r0, lr, lsr #2
    38ac:	0010aa43 	andseq	sl, r0, r3, asr #20
    38b0:	000f1d00 	andeq	r1, pc, r0, lsl #26
    38b4:	10b64400 	adcsne	r4, r6, r0, lsl #8
    38b8:	0f460000 	svceq	0x00460000
    38bc:	98450000 	stmdals	r5, {}^	; <UNPREDICTABLE>
    38c0:	00000010 	andeq	r0, r0, r0, lsl r0
    38c4:	00000000 	andeq	r0, r0, r0
    38c8:	01000000 	mrseq	r0, (UNDEF: 0)
    38cc:	aa43145f 	bge	10c8a50 <__ccfg+0x10a8aa8>
    38d0:	64000010 	strvs	r0, [r0], #-16
    38d4:	4600000f 	strmi	r0, [r0], -pc
    38d8:	000010b6 	strheq	r1, [r0], -r6
    38dc:	9e420000 	cdpls	0, 4, cr0, cr2, cr0, {0}
    38e0:	6400000f 	strvs	r0, [r0], #-15
    38e4:	30000010 	andcc	r0, r0, r0, lsl r0
    38e8:	01000011 	tsteq	r0, r1, lsl r0
    38ec:	00119a9c 	mulseq	r1, ip, sl
    38f0:	0fad4300 	svceq	0x00ad4300
    38f4:	0f770000 	svceq	0x00770000
    38f8:	b9430000 	stmdblt	r3, {}^	; <UNPREDICTABLE>
    38fc:	8a00000f 	bhi	3940 <NOROM_SetupGetTrimForRadcExtCfg+0x28>
    3900:	4600000f 	strmi	r0, [r0], -pc
    3904:	00000fc5 	andeq	r0, r0, r5, asr #31
    3908:	000fcf46 	andeq	ip, pc, r6, asr #30
    390c:	0f9e4700 	svceq	0x009e4700
    3910:	10720000 	rsbsne	r0, r2, r0
    3914:	05d00000 	ldrbeq	r0, [r0]
    3918:	af010000 	svcge	0x00010000
    391c:	0fb92906 	svceq	0x00b92906
    3920:	ad430000 	stclge	0, cr0, [r3, #-0]
    3924:	9d00000f 	stcls	0, cr0, [r0, #-60]	; 0xffffffc4
    3928:	3600000f 	strcc	r0, [r0], -pc
    392c:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3930:	000fc544 	andeq	ip, pc, r4, asr #10
    3934:	000fc600 	andeq	ip, pc, r0, lsl #12
    3938:	0fcf4600 	svceq	0x00cf4600
    393c:	d9480000 	stmdble	r8, {}^	; <UNPREDICTABLE>
    3940:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    3944:	00000011 	andeq	r0, r0, r1, lsl r0
    3948:	db420000 	blle	1083950 <__ccfg+0x10639a8>
    394c:	4400000e 	strmi	r0, [r0], #-14
    3950:	78000011 	stmdavc	r0, {r0, r4}
    3954:	01000011 	tsteq	r0, r1, lsl r0
    3958:	0011ee9c 	mulseq	r1, ip, lr
    395c:	0eeb4300 	cdpeq	3, 14, cr4, cr11, cr0, {0}
    3960:	0fe40000 	svceq	0x00e40000
    3964:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    3968:	0200000e 	andeq	r0, r0, #14
    396c:	46000010 			; <UNDEFINED> instruction: 0x46000010
    3970:	00000f05 	andeq	r0, r0, r5, lsl #30
    3974:	000edb49 	andeq	sp, lr, r9, asr #22
    3978:	00115600 	andseq	r5, r1, r0, lsl #12
    397c:	00115e00 	andseq	r5, r1, r0, lsl #28
    3980:	01590100 	cmpeq	r9, r0, lsl #2
    3984:	0eeb4306 	cdpeq	3, 14, cr4, cr11, cr6, {0}
    3988:	10200000 	eorne	r0, r0, r0
    398c:	f8430000 			; <UNDEFINED> instruction: 0xf8430000
    3990:	3300000e 	movwcc	r0, #14
    3994:	46000010 			; <UNDEFINED> instruction: 0x46000010
    3998:	00000f05 	andeq	r0, r0, r5, lsl #30
    399c:	804a0000 	subhi	r0, sl, r0
    39a0:	6c000008 	stcvs	0, cr0, [r0], {8}
    39a4:	b4000013 	strlt	r0, [r0], #-19	; 0xffffffed
    39a8:	01000013 	tsteq	r0, r3, lsl r0
    39ac:	0890439c 	ldmeq	r0, {r2, r3, r4, r7, r8, r9, lr}
    39b0:	10460000 	subne	r0, r6, r0
    39b4:	80490000 	subhi	r0, r9, r0
    39b8:	78000008 	stmdavc	r0, {r3}
    39bc:	80000013 	andhi	r0, r0, r3, lsl r0
    39c0:	01000013 	tsteq	r0, r3, lsl r0
    39c4:	4306037c 	movwmi	r0, #25468	; 0x637c
    39c8:	00000890 	muleq	r0, r0, r8
    39cc:	00001064 	andeq	r1, r0, r4, rrx
    39d0:	33000000 	movwcc	r0, #0
    39d4:	03000013 	movweq	r0, #19
    39d8:	000db300 	andeq	fp, sp, r0, lsl #6
    39dc:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    39e0:	0c000000 	stceq	0, cr0, [r0], {-0}
    39e4:	0000124c 	andeq	r1, r0, ip, asr #4
    39e8:	00000668 	andeq	r0, r0, r8, ror #12
    39ec:	000007d8 	ldrdeq	r0, [r0], -r8
    39f0:	00000000 	andeq	r0, r0, r0
    39f4:	0000296a 	andeq	r2, r0, sl, ror #18
    39f8:	de060102 	adfles	f0, f6, f2
    39fc:	02000008 	andeq	r0, r0, #8
    3a00:	07a30502 	streq	r0, [r3, r2, lsl #10]!
    3a04:	04020000 	streq	r0, [r2], #-0
    3a08:	0005ed05 	andeq	lr, r5, r5, lsl #26
    3a0c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    3a10:	000005e8 	andeq	r0, r0, r8, ror #11
    3a14:	00083503 	andeq	r3, r8, r3, lsl #10
    3a18:	182e0200 	stmdane	lr!, {r9}
    3a1c:	0000004d 	andeq	r0, r0, sp, asr #32
    3a20:	dc080102 	stfles	f0, [r8], {2}
    3a24:	03000008 	movweq	r0, #8
    3a28:	000003d2 	ldrdeq	r0, [r0], -r2
    3a2c:	60193102 	andsvs	r3, r9, r2, lsl #2
    3a30:	02000000 	andeq	r0, r0, #0
    3a34:	09aa0702 	stmibeq	sl!, {r1, r8, r9, sl}
    3a38:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    3a3c:	02000008 	andeq	r0, r0, #8
    3a40:	00731934 	rsbseq	r1, r3, r4, lsr r9
    3a44:	04020000 	streq	r0, [r2], #-0
    3a48:	00039707 	andeq	r9, r3, r7, lsl #14
    3a4c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    3a50:	00000392 	muleq	r0, r2, r3
    3a54:	69050404 	stmdbvs	r5, {r2, sl}
    3a58:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3a5c:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    3a60:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    3a64:	03000004 	movweq	r0, #4
    3a68:	009b1b28 	addseq	r1, fp, r8, lsr #22
    3a6c:	65050000 	strvs	r0, [r5, #-0]
    3a70:	04000008 	streq	r0, [r0], #-8
    3a74:	00b3000d 	adcseq	r0, r3, sp
    3a78:	4c060000 	stcmi	0, cr0, [r6], {-0}
    3a7c:	b3000009 	movwlt	r0, #9
    3a80:	00000000 	andeq	r0, r0, r0
    3a84:	04070001 	streq	r0, [r7], #-1
    3a88:	00086703 	andeq	r6, r8, r3, lsl #14
    3a8c:	18630300 	stmdane	r3!, {r8, r9}^
    3a90:	0000008f 	andeq	r0, r0, pc, lsl #1
    3a94:	00073303 	andeq	r3, r7, r3, lsl #6
    3a98:	12260400 	eorne	r0, r6, #0, 8
    3a9c:	00000041 	andeq	r0, r0, r1, asr #32
    3aa0:	0023d803 	eoreq	sp, r3, r3, lsl #16
    3aa4:	12270400 	eorne	r0, r7, #0, 8
    3aa8:	00000054 	andeq	r0, r0, r4, asr r0
    3aac:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3ab0:	00cd0900 	sbceq	r0, sp, r0, lsl #18
    3ab4:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    3ab8:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    3abc:	0041122b 	subeq	r1, r1, fp, lsr #4
    3ac0:	e3090000 	movw	r0, #36864	; 0x9000
    3ac4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ac8:	000000e3 	andeq	r0, r0, r3, ror #1
    3acc:	00242903 	eoreq	r2, r4, r3, lsl #18
    3ad0:	122c0400 	eorne	r0, ip, #0, 8
    3ad4:	00000067 	andeq	r0, r0, r7, rrx
    3ad8:	0000f908 	andeq	pc, r0, r8, lsl #18
    3adc:	04fb0300 	ldrbteq	r0, [fp], #768	; 0x300
    3ae0:	2d040000 	stccs	0, cr0, [r4, #-0]
    3ae4:	00006712 	andeq	r6, r0, r2, lsl r7
    3ae8:	08750300 	ldmdaeq	r5!, {r8, r9}^
    3aec:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    3af0:	00012210 	andeq	r2, r1, r0, lsl r2
    3af4:	cd040a00 	vstrgt	s0, [r4, #-0]
    3af8:	0b000000 	bleq	3b00 <NOROM_SetupSetAonRtcSubSecInc+0x20>
    3afc:	09320408 	ldmdbeq	r2!, {r3, sl}
    3b00:	000001b6 			; <UNDEFINED> instruction: 0x000001b6
    3b04:	00003e0c 	andeq	r3, r0, ip, lsl #28
    3b08:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    3b0c:	000000e3 	andeq	r0, r0, r3, ror #1
    3b10:	00070101 	andeq	r0, r7, r1, lsl #2
    3b14:	0005010c 	andeq	r0, r5, ip, lsl #2
    3b18:	03350400 	teqeq	r5, #0, 8
    3b1c:	000000e3 	andeq	r0, r0, r3, ror #1
    3b20:	00060101 	andeq	r0, r6, r1, lsl #2
    3b24:	0002370c 	andeq	r3, r2, ip, lsl #14
    3b28:	03360400 	teqeq	r6, #0, 8
    3b2c:	000000e3 	andeq	r0, r0, r3, ror #1
    3b30:	00050101 	andeq	r0, r5, r1, lsl #2
    3b34:	00053b0c 	andeq	r3, r5, ip, lsl #22
    3b38:	03370400 	teqeq	r7, #0, 8
    3b3c:	000000e3 	andeq	r0, r0, r3, ror #1
    3b40:	00040101 	andeq	r0, r4, r1, lsl #2
    3b44:	0007c40c 	andeq	ip, r7, ip, lsl #8
    3b48:	03380400 	teqeq	r8, #0, 8
    3b4c:	000000e3 	andeq	r0, r0, r3, ror #1
    3b50:	00000401 	andeq	r0, r0, r1, lsl #8
    3b54:	0005080d 	andeq	r0, r5, sp, lsl #16
    3b58:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    3b5c:	000000e3 	andeq	r0, r0, r3, ror #1
    3b60:	06d20d01 	ldrbeq	r0, [r2], r1, lsl #26
    3b64:	3c040000 	stccc	0, cr0, [r4], {-0}
    3b68:	0000e303 	andeq	lr, r0, r3, lsl #6
    3b6c:	7c0d0200 	sfmvc	f0, 4, [sp], {-0}
    3b70:	0400000a 	streq	r0, [r0], #-10
    3b74:	00e3033d 	rsceq	r0, r3, sp, lsr r3
    3b78:	0d030000 	stceq	0, cr0, [r3, #-0]
    3b7c:	00000707 	andeq	r0, r0, r7, lsl #14
    3b80:	f9083f04 			; <UNDEFINED> instruction: 0xf9083f04
    3b84:	04000000 	streq	r0, [r0], #-0
    3b88:	02890300 	addeq	r0, r9, #0, 6
    3b8c:	41040000 	mrsmi	r0, (UNDEF: 4)
    3b90:	00012803 	andeq	r2, r1, r3, lsl #16
    3b94:	01b60900 			; <UNDEFINED> instruction: 0x01b60900
    3b98:	420e0000 	andmi	r0, lr, #0
    3b9c:	04000005 	streq	r0, [r0], #-5
    3ba0:	01c21a43 	biceq	r1, r2, r3, asr #20
    3ba4:	01010000 	mrseq	r0, (UNDEF: 1)
    3ba8:	0001b10e 	andeq	fp, r1, lr, lsl #2
    3bac:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    3bb0:	000001e3 	andeq	r0, r0, r3, ror #3
    3bb4:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    3bb8:	000001e9 	andeq	r0, r0, r9, ror #3
    3bbc:	e5080102 	str	r0, [r8, #-258]	; 0xfffffefe
    3bc0:	08000008 	stmdaeq	r0, {r3}
    3bc4:	000001e9 	andeq	r0, r0, r9, ror #3
    3bc8:	0002920e 	andeq	r9, r2, lr, lsl #4
    3bcc:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    3bd0:	000001e3 	andeq	r0, r0, r3, ror #3
    3bd4:	080b0101 	stmdaeq	fp, {r0, r8}
    3bd8:	34098f05 	strcc	r8, [r9], #-3845	; 0xfffff0fb
    3bdc:	0d000002 	stceq	0, cr0, [r0, #-8]
    3be0:	00000605 	andeq	r0, r0, r5, lsl #12
    3be4:	670b9005 	strvs	r9, [fp, -r5]
    3be8:	00000000 	andeq	r0, r0, r0
    3bec:	000bae0d 	andeq	sl, fp, sp, lsl #28
    3bf0:	08910500 	ldmeq	r1, {r8, sl}
    3bf4:	000000cd 	andeq	r0, r0, sp, asr #1
    3bf8:	01ea0d04 	mvneq	r0, r4, lsl #26
    3bfc:	92050000 	andls	r0, r5, #0
    3c00:	0000ef10 	andeq	lr, r0, r0, lsl pc
    3c04:	03000600 	movweq	r0, #1536	; 0x600
    3c08:	00000945 	andeq	r0, r0, r5, asr #18
    3c0c:	03039305 	movweq	r9, #13061	; 0x3305
    3c10:	0f000002 	svceq	0x00000002
    3c14:	00000234 	andeq	r0, r0, r4, lsr r2
    3c18:	0000024b 	andeq	r0, r0, fp, asr #4
    3c1c:	130e0010 	movwne	r0, #57360	; 0xe010
    3c20:	05000007 	streq	r0, [r0, #-7]
    3c24:	02400f99 	subeq	r0, r0, #612	; 0x264
    3c28:	01010000 	mrseq	r0, (UNDEF: 1)
    3c2c:	00f4040a 	rscseq	r0, r4, sl, lsl #8
    3c30:	010b0000 	mrseq	r0, (UNDEF: 11)
    3c34:	89099106 	stmdbhi	r9, {r1, r2, r8, ip, pc}
    3c38:	0c000002 	stceq	0, cr0, [r0], {2}
    3c3c:	0000070e 	andeq	r0, r0, lr, lsl #14
    3c40:	e3079306 	movw	r9, #29446	; 0x7306
    3c44:	01000000 	mrseq	r0, (UNDEF: 0)
    3c48:	0c000107 	stfeqs	f0, [r0], {7}
    3c4c:	0000047c 	andeq	r0, r0, ip, ror r4
    3c50:	e3039406 	movw	r9, #13318	; 0x3406
    3c54:	01000000 	mrseq	r0, (UNDEF: 0)
    3c58:	00000001 	andeq	r0, r0, r1
    3c5c:	0007d003 	andeq	sp, r7, r3
    3c60:	03960600 	orrseq	r0, r6, #0, 12
    3c64:	0000025f 	andeq	r0, r0, pc, asr r2
    3c68:	00028908 	andeq	r8, r2, r8, lsl #18
    3c6c:	02950f00 	addseq	r0, r5, #0, 30
    3c70:	02a50000 	adceq	r0, r5, #0
    3c74:	00100000 	andseq	r0, r0, r0
    3c78:	00029a08 	andeq	r9, r2, r8, lsl #20
    3c7c:	034b0e00 	movteq	r0, #48640	; 0xbe00
    3c80:	9c060000 	stcls	0, cr0, [r6], {-0}
    3c84:	0002a517 	andeq	sl, r2, r7, lsl r5
    3c88:	0f010100 	svceq	0x00010100
    3c8c:	000000d9 	ldrdeq	r0, [r0], -r9
    3c90:	000002c3 	andeq	r0, r0, r3, asr #5
    3c94:	b8080010 	stmdalt	r8, {r4}
    3c98:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    3c9c:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    3ca0:	c3130607 	tstgt	r3, #7340032	; 0x700000
    3ca4:	01000002 	tsteq	r0, r2
    3ca8:	06b40e01 	ldrteq	r0, [r4], r1, lsl #28
    3cac:	c3050000 	movwgt	r0, #20480	; 0x5000
    3cb0:	0000f90e 	andeq	pc, r0, lr, lsl #18
    3cb4:	11010100 	mrsne	r0, (UNDEF: 17)
    3cb8:	000008fe 	strdeq	r0, [r0], -lr
    3cbc:	10016e08 	andne	r6, r1, r8, lsl #28
    3cc0:	000002f1 	strdeq	r0, [r0], -r1
    3cc4:	02f7040a 	rscseq	r0, r7, #167772160	; 0xa000000
    3cc8:	01120000 	tsteq	r2, r0
    3ccc:	00000303 	andeq	r0, r0, r3, lsl #6
    3cd0:	0000cd13 	andeq	ip, r0, r3, lsl sp
    3cd4:	f00f0000 			; <UNDEFINED> instruction: 0xf00f0000
    3cd8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    3cdc:	10000003 	andne	r0, r0, r3
    3ce0:	03030800 	movweq	r0, #14336	; 0x3800
    3ce4:	67140000 	ldrvs	r0, [r4, -r0]
    3ce8:	08000007 	stmdaeq	r0, {r0, r1, r2}
    3cec:	0e16017f 	mrceq	1, 0, r0, cr6, cr15, {3}
    3cf0:	01000003 	tsteq	r0, r3
    3cf4:	032e1401 			; <UNDEFINED> instruction: 0x032e1401
    3cf8:	82080000 	andhi	r0, r8, #0
    3cfc:	01051401 	tsteq	r5, r1, lsl #8
    3d00:	01010000 	mrseq	r0, (UNDEF: 1)
    3d04:	0809040b 	stmdaeq	r9, {r0, r1, r3, sl}
    3d08:	00035509 	andeq	r5, r3, r9, lsl #10
    3d0c:	01f00d00 	mvnseq	r0, r0, lsl #26
    3d10:	0f090000 	svceq	0x00090000
    3d14:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3d18:	390d0000 	stmdbcc	sp, {}	; <UNPREDICTABLE>
    3d1c:	09000009 	stmdbeq	r0, {r0, r3}
    3d20:	00cd0310 	sbceq	r0, sp, r0, lsl r3
    3d24:	00020000 	andeq	r0, r2, r0
    3d28:	0009c603 	andeq	ip, r9, r3, lsl #12
    3d2c:	03110900 	tsteq	r1, #0, 18
    3d30:	00000331 	andeq	r0, r0, r1, lsr r3
    3d34:	1609200b 	strne	r2, [r9], -fp
    3d38:	0003d309 	andeq	sp, r3, r9, lsl #6
    3d3c:	040b0d00 	streq	r0, [fp], #-3328	; 0xfffff300
    3d40:	17090000 	strne	r0, [r9, -r0]
    3d44:	0003ed08 	andeq	lr, r3, r8, lsl #26
    3d48:	ff0d0000 			; <UNDEFINED> instruction: 0xff0d0000
    3d4c:	09000006 	stmdbeq	r0, {r1, r2}
    3d50:	04080818 	streq	r0, [r8], #-2072	; 0xfffff7e8
    3d54:	0d040000 	stceq	0, cr0, [r4, #-0]
    3d58:	00000887 	andeq	r0, r0, r7, lsl #17
    3d5c:	3e081909 	vmlacc.f16	s2, s16, s18	; <UNPREDICTABLE>
    3d60:	08000004 	stmdaeq	r0, {r2}
    3d64:	0009310d 	andeq	r3, r9, sp, lsl #2
    3d68:	081a0900 	ldmdaeq	sl, {r8, fp}
    3d6c:	00000459 	andeq	r0, r0, r9, asr r4
    3d70:	072b0d0c 	streq	r0, [fp, -ip, lsl #26]!
    3d74:	1b090000 	blne	243d7c <__ccfg+0x223dd4>
    3d78:	00046f08 	andeq	r6, r4, r8, lsl #30
    3d7c:	9b0d1000 	blls	347d84 <__ccfg+0x327ddc>
    3d80:	09000007 	stmdbeq	r0, {r0, r1, r2}
    3d84:	046f081c 	strbteq	r0, [pc], #-2076	; 3d8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x134>
    3d88:	0d140000 	ldceq	0, cr0, [r4, #-0]
    3d8c:	000001d3 	ldrdeq	r0, [r0], -r3
    3d90:	6f081d09 	svcvs	0x00081d09
    3d94:	18000004 	stmdane	r0, {r2}
    3d98:	0002800d 	andeq	r8, r2, sp
    3d9c:	061e0900 	ldreq	r0, [lr], -r0, lsl #18
    3da0:	00000081 	andeq	r0, r0, r1, lsl #1
    3da4:	0115001c 	tsteq	r5, ip, lsl r0
    3da8:	00000081 	andeq	r0, r0, r1, lsl #1
    3dac:	000003ed 	andeq	r0, r0, sp, ror #7
    3db0:	00008113 	andeq	r8, r0, r3, lsl r1
    3db4:	00811300 	addeq	r1, r1, r0, lsl #6
    3db8:	b5130000 	ldrlt	r0, [r3, #-0]
    3dbc:	00000000 	andeq	r0, r0, r0
    3dc0:	03d3040a 	bicseq	r0, r3, #167772160	; 0xa000000
    3dc4:	01150000 	tsteq	r5, r0
    3dc8:	00000081 	andeq	r0, r0, r1, lsl #1
    3dcc:	00000408 	andeq	r0, r0, r8, lsl #8
    3dd0:	00008113 	andeq	r8, r0, r3, lsl r1
    3dd4:	00811300 	addeq	r1, r1, r0, lsl #6
    3dd8:	0a000000 	beq	3de0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x188>
    3ddc:	0003f304 	andeq	pc, r3, r4, lsl #6
    3de0:	81011500 	tsthi	r1, r0, lsl #10
    3de4:	32000000 	andcc	r0, r0, #0
    3de8:	13000004 	movwne	r0, #4
    3dec:	00000081 	andeq	r0, r0, r1, lsl #1
    3df0:	00011613 	andeq	r1, r1, r3, lsl r6
    3df4:	00811300 	addeq	r1, r1, r0, lsl #6
    3df8:	32130000 	andscc	r0, r3, #0
    3dfc:	13000004 	movwne	r0, #4
    3e00:	00000438 	andeq	r0, r0, r8, lsr r4
    3e04:	81040a00 	tsthi	r4, r0, lsl #20
    3e08:	0a000000 	beq	3e10 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b8>
    3e0c:	00035504 	andeq	r5, r3, r4, lsl #10
    3e10:	0e040a00 	vmlaeq.f32	s0, s8, s0
    3e14:	15000004 	strne	r0, [r0, #-4]
    3e18:	00008101 	andeq	r8, r0, r1, lsl #2
    3e1c:	00045900 	andeq	r5, r4, r0, lsl #18
    3e20:	01161300 	tsteq	r6, r0, lsl #6
    3e24:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3e28:	00000004 	andeq	r0, r0, r4
    3e2c:	0444040a 	strbeq	r0, [r4], #-1034	; 0xfffffbf6
    3e30:	01150000 	tsteq	r5, r0
    3e34:	00000081 	andeq	r0, r0, r1, lsl #1
    3e38:	0000046f 	andeq	r0, r0, pc, ror #8
    3e3c:	00011613 	andeq	r1, r1, r3, lsl r6
    3e40:	040a0000 	streq	r0, [sl], #-0
    3e44:	0000045f 	andeq	r0, r0, pc, asr r4
    3e48:	00097c03 	andeq	r7, r9, r3, lsl #24
    3e4c:	031f0900 	tsteq	pc, #0, 18
    3e50:	00000361 	andeq	r0, r0, r1, ror #6
    3e54:	00047508 	andeq	r7, r4, r8, lsl #10
    3e58:	12f61600 	rscsne	r1, r6, #0, 12
    3e5c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3e60:	04ae0824 	strteq	r0, [lr], #2084	; 0x824
    3e64:	410d0000 	mrsmi	r0, (UNDEF: 13)
    3e68:	0900000a 	stmdbeq	r0, {r1, r3}
    3e6c:	04ae1825 	strteq	r1, [lr], #2085	; 0x825
    3e70:	0d000000 	stceq	0, cr0, [r0, #-0]
    3e74:	00001222 	andeq	r1, r0, r2, lsr #4
    3e78:	ae062609 	cfmadd32ge	mvax0, mvfx2, mvfx6, mvfx9
    3e7c:	04000004 	streq	r0, [r0], #-4
    3e80:	86040a00 	strhi	r0, [r4], -r0, lsl #20
    3e84:	03000004 	movweq	r0, #4
    3e88:	00001304 	andeq	r1, r0, r4, lsl #6
    3e8c:	861e2909 	ldrhi	r2, [lr], -r9, lsl #18
    3e90:	03000004 	movweq	r0, #4
    3e94:	00001412 	andeq	r1, r0, r2, lsl r4
    3e98:	861e2a09 	ldrhi	r2, [lr], -r9, lsl #20
    3e9c:	0b000004 	bleq	3eb4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x3c>
    3ea0:	023f0902 	eorseq	r0, pc, #32768	; 0x8000
    3ea4:	00000536 	andeq	r0, r0, r6, lsr r5
    3ea8:	0013ab0c 	andseq	sl, r3, ip, lsl #22
    3eac:	09400900 	stmdbeq	r0, {r8, fp}^
    3eb0:	000000cd 	andeq	r0, r0, sp, asr #1
    3eb4:	000f0102 	andeq	r0, pc, r2, lsl #2
    3eb8:	0014640c 	andseq	r6, r4, ip, lsl #8
    3ebc:	04410900 	strbeq	r0, [r1], #-2304	; 0xfffff700
    3ec0:	000000cd 	andeq	r0, r0, sp, asr #1
    3ec4:	000e0102 	andeq	r0, lr, r2, lsl #2
    3ec8:	0013260c 	andseq	r2, r3, ip, lsl #12
    3ecc:	04420900 	strbeq	r0, [r2], #-2304	; 0xfffff700
    3ed0:	000000cd 	andeq	r0, r0, sp, asr #1
    3ed4:	000d0102 	andeq	r0, sp, r2, lsl #2
    3ed8:	0013c40c 	andseq	ip, r3, ip, lsl #8
    3edc:	04430900 	strbeq	r0, [r3], #-2304	; 0xfffff700
    3ee0:	000000cd 	andeq	r0, r0, sp, asr #1
    3ee4:	00060702 	andeq	r0, r6, r2, lsl #14
    3ee8:	0014200c 	andseq	r2, r4, ip
    3eec:	04440900 	strbeq	r0, [r4], #-2304	; 0xfffff700
    3ef0:	000000cd 	andeq	r0, r0, sp, asr #1
    3ef4:	00030302 	andeq	r0, r3, r2, lsl #6
    3ef8:	00139d0c 	andseq	r9, r3, ip, lsl #26
    3efc:	04450900 	strbeq	r0, [r5], #-2304	; 0xfffff700
    3f00:	000000cd 	andeq	r0, r0, sp, asr #1
    3f04:	00000302 	andeq	r0, r0, r2, lsl #6
    3f08:	09021700 	stmdbeq	r2, {r8, r9, sl, ip}
    3f0c:	0556093d 	ldrbeq	r0, [r6, #-2365]	; 0xfffff6c3
    3f10:	b0180000 	andslt	r0, r8, r0
    3f14:	09000004 	stmdbeq	r0, {r2}
    3f18:	00cd073e 	sbceq	r0, sp, lr, lsr r7
    3f1c:	62190000 	andsvs	r0, r9, #0
    3f20:	04460900 	strbeq	r0, [r6], #-2304	; 0xfffff700
    3f24:	000004cc 	andeq	r0, r0, ip, asr #9
    3f28:	12270300 	eorne	r0, r7, #0, 6
    3f2c:	47090000 	strmi	r0, [r9, -r0]
    3f30:	00053603 	andeq	r3, r5, r3, lsl #12
    3f34:	09081700 	stmdbeq	r8, {r8, r9, sl, ip}
    3f38:	05840550 	streq	r0, [r4, #1360]	; 0x550
    3f3c:	46180000 	ldrmi	r0, [r8], -r0
    3f40:	09000014 	stmdbeq	r0, {r2, r4}
    3f44:	04b41051 	ldrteq	r1, [r4], #81	; 0x51
    3f48:	67180000 	ldrvs	r0, [r8, -r0]
    3f4c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3f50:	03550b52 	cmpeq	r5, #83968	; 0x14800
    3f54:	16000000 	strne	r0, [r0], -r0
    3f58:	00001455 	andeq	r1, r0, r5, asr r4
    3f5c:	084c090c 	stmdaeq	ip, {r2, r3, r8, fp}^
    3f60:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    3f64:	0900751a 	stmdbeq	r0, {r1, r3, r4, r8, sl, ip, sp, lr}
    3f68:	05620758 	strbeq	r0, [r2, #-1880]!	; 0xfffff8a8
    3f6c:	0d000000 	stceq	0, cr0, [r0, #-0]
    3f70:	00001427 	andeq	r1, r0, r7, lsr #8
    3f74:	cd076309 	stcgt	3, cr6, [r7, #-36]	; 0xffffffdc
    3f78:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3f7c:	0014070d 	andseq	r0, r4, sp, lsl #14
    3f80:	10680900 	rsbne	r0, r8, r0, lsl #18
    3f84:	00000556 	andeq	r0, r0, r6, asr r5
    3f88:	1203000a 	andne	r0, r3, #10
    3f8c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3f90:	05841f79 	streq	r1, [r4, #3961]	; 0xf79
    3f94:	0c0b0000 	stceq	0, cr0, [fp], {-0}
    3f98:	e7097b09 	str	r7, [r9, -r9, lsl #22]
    3f9c:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    3fa0:	0000135b 	andeq	r1, r0, fp, asr r3
    3fa4:	c0117f09 	andsgt	r7, r1, r9, lsl #30
    3fa8:	00000004 	andeq	r0, r0, r4
    3fac:	0013f30d 	andseq	pc, r3, sp, lsl #6
    3fb0:	11830900 	orrne	r0, r3, r0, lsl #18
    3fb4:	00000556 	andeq	r0, r0, r6, asr r5
    3fb8:	8d030008 	stchi	0, cr0, [r3, #-32]	; 0xffffffe0
    3fbc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    3fc0:	05c30392 	strbeq	r0, [r3, #914]	; 0x392
    3fc4:	0b140000 	bleq	503fcc <__ccfg+0x4e4024>
    3fc8:	08000003 	stmdaeq	r0, {r0, r1}
    3fcc:	f90e02d8 			; <UNDEFINED> instruction: 0xf90e02d8
    3fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    3fd4:	08081b01 	stmdaeq	r8, {r0, r8, r9, fp, ip}
    3fd8:	29090303 	stmdbcs	r9, {r0, r1, r8, r9}
    3fdc:	1c000006 	stcne	0, cr0, [r0], {6}
    3fe0:	0000375c 	andeq	r3, r0, ip, asr r7
    3fe4:	07030708 	streq	r0, [r3, -r8, lsl #14]
    3fe8:	000000cd 	andeq	r0, r0, sp, asr #1
    3fec:	0b061c00 	bleq	18aff4 <__ccfg+0x16b04c>
    3ff0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    3ff4:	010a0803 	tsteq	sl, r3, lsl #16
    3ff8:	00040000 	andeq	r0, r4, r0
    3ffc:	0003c311 	andeq	ip, r3, r1, lsl r3
    4000:	03090800 	movweq	r0, #38912	; 0x9800
    4004:	00060203 	andeq	r0, r6, r3, lsl #4
    4008:	00331d00 	eorseq	r1, r3, r0, lsl #26
    400c:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    4010:	9908030b 	stmdbls	r8, {r0, r1, r3, r8, r9}
    4014:	1c000006 	stcne	0, cr0, [r0], {6}
    4018:	00001a07 	andeq	r1, r0, r7, lsl #20
    401c:	08031408 	stmdaeq	r3, {r3, sl, ip}
    4020:	000000cd 	andeq	r0, r0, sp, asr #1
    4024:	08a81c00 	stmiaeq	r8!, {sl, fp, ip}
    4028:	15080000 	strne	r0, [r8, #-0]
    402c:	00cd0803 	sbceq	r0, sp, r3, lsl #16
    4030:	1c020000 	stcne	0, cr0, [r2], {-0}
    4034:	000048cc 	andeq	r4, r0, ip, asr #17
    4038:	0b031608 	bleq	c9860 <__ccfg+0xa98b8>
    403c:	000002e4 	andeq	r0, r0, r4, ror #5
    4040:	432f1c04 			; <UNDEFINED> instruction: 0x432f1c04
    4044:	17080000 	strne	r0, [r8, -r0]
    4048:	010a0903 	tsteq	sl, r3, lsl #18
    404c:	1c080000 	stcne	0, cr0, [r8], {-0}
    4050:	00000007 	andeq	r0, r0, r7
    4054:	0f031808 	svceq	0x00031808
    4058:	00000699 	muleq	r0, r9, r6
    405c:	07261c0c 	streq	r1, [r6, -ip, lsl #24]!
    4060:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    4064:	06a91503 	strteq	r1, [r9], r3, lsl #10
    4068:	002c0000 	eoreq	r0, ip, r0
    406c:	0006290f 	andeq	r2, r6, pc, lsl #18
    4070:	0006a900 	andeq	sl, r6, r0, lsl #18
    4074:	00881e00 	addeq	r1, r8, r0, lsl #28
    4078:	00030000 	andeq	r0, r3, r0
    407c:	0636040a 	ldrteq	r0, [r6], -sl, lsl #8
    4080:	9d110000 	ldcls	0, cr0, [r1, #-0]
    4084:	08000008 	stmdaeq	r0, {r3}
    4088:	361b031c 			; <UNDEFINED> instruction: 0x361b031c
    408c:	14000006 	strne	r0, [r0], #-6
    4090:	0000087d 	andeq	r0, r0, sp, ror r8
    4094:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    4098:	000006cb 	andeq	r0, r0, fp, asr #13
    409c:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    40a0:	000006af 	andeq	r0, r0, pc, lsr #13
    40a4:	00054e0e 	andeq	r4, r5, lr, lsl #28
    40a8:	131d0a00 	tstne	sp, #0, 20
    40ac:	000000cd 	andeq	r0, r0, sp, asr #1
    40b0:	3e0e0101 	adfcce	f0, f6, f1
    40b4:	0a000002 	beq	40c4 <rand+0x14>
    40b8:	00de1a1e 	sbcseq	r1, lr, lr, lsl sl
    40bc:	01010000 	mrseq	r0, (UNDEF: 1)
    40c0:	0008ea0e 	andeq	lr, r8, lr, lsl #20
    40c4:	241e0a00 	ldrcs	r0, [lr], #-2560	; 0xfffff600
    40c8:	000000de 	ldrdeq	r0, [r0], -lr
    40cc:	060e0101 	streq	r0, [lr], -r1, lsl #2
    40d0:	0a000009 	beq	40fc <time+0x14>
    40d4:	06cb1422 	strbeq	r1, [fp], r2, lsr #8
    40d8:	01010000 	mrseq	r0, (UNDEF: 1)
    40dc:	00129f03 	andseq	r9, r2, r3, lsl #30
    40e0:	0f0e0b00 	svceq	0x000e0b00
    40e4:	00000715 	andeq	r0, r0, r5, lsl r7
    40e8:	071b040a 	ldreq	r0, [fp, -sl, lsl #8]
    40ec:	01150000 	tsteq	r5, r0
    40f0:	00000081 	andeq	r0, r0, r1, lsl #1
    40f4:	00000730 	andeq	r0, r0, r0, lsr r7
    40f8:	00008113 	andeq	r8, r0, r3, lsl r1
    40fc:	01161300 	tsteq	r6, r0, lsl #6
    4100:	0f000000 	svceq	0x00000000
    4104:	00000740 	andeq	r0, r0, r0, asr #14
    4108:	00000740 	andeq	r0, r0, r0, asr #14
    410c:	0000881e 	andeq	r8, r0, lr, lsl r8
    4110:	0a000700 	beq	5d18 <__exidx_end+0xde8>
    4114:	0005e704 	andeq	lr, r5, r4, lsl #14
    4118:	13331f00 	teqne	r3, #0, 30
    411c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    4120:	00073015 	andeq	r3, r7, r5, lsl r0
    4124:	60030500 	andvs	r0, r3, r0, lsl #10
    4128:	0f200005 	svceq	0x00200005
    412c:	00000709 	andeq	r0, r0, r9, lsl #14
    4130:	00000768 	andeq	r0, r0, r8, ror #14
    4134:	0000881e 	andeq	r8, r0, lr, lsl r8
    4138:	1f000200 	svcne	0x00000200
    413c:	000013a2 	andeq	r1, r0, r2, lsr #7
    4140:	5814130c 	ldmdapl	r4, {r2, r3, r8, r9, ip}
    4144:	05000007 	streq	r0, [r0, #-7]
    4148:	00058c03 	andeq	r8, r5, r3, lsl #24
    414c:	078a0f20 	streq	r0, [sl, r0, lsr #30]
    4150:	078a0000 	streq	r0, [sl, r0]
    4154:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4158:	02000000 	andeq	r0, r0, #0
    415c:	c0040a00 	andgt	r0, r4, r0, lsl #20
    4160:	1f000004 	svcne	0x00000004
    4164:	000012ee 	andeq	r1, r0, lr, ror #5
    4168:	7a13190c 	bvc	4ca5a0 <__ccfg+0x4aa5f8>
    416c:	05000007 	streq	r0, [r0, #-7]
    4170:	00058003 	andeq	r8, r5, r3
    4174:	00810f20 	addeq	r0, r1, r0, lsr #30
    4178:	07b20000 	ldreq	r0, [r2, r0]!
    417c:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    4180:	02000000 	andeq	r0, r0, #0
    4184:	12c61f00 	sbcne	r1, r6, #0, 30
    4188:	1e0c0000 	cdpne	0, 0, cr0, cr12, cr0, {0}
    418c:	0007a20f 	andeq	sl, r7, pc, lsl #4
    4190:	98030500 	stmdals	r3, {r8, sl}
    4194:	0f200005 	svceq	0x00200005
    4198:	000007d4 	ldrdeq	r0, [r0], -r4
    419c:	000007d4 	ldrdeq	r0, [r0], -r4
    41a0:	0000881e 	andeq	r8, r0, lr, lsl r8
    41a4:	0a000200 	beq	49ac <patchGenfskRfe+0x400>
    41a8:	00048104 	andeq	r8, r4, r4, lsl #2
    41ac:	144d1f00 	strbne	r1, [sp], #-3840	; 0xfffff100
    41b0:	230c0000 	movwcs	r0, #49152	; 0xc000
    41b4:	0007c41b 	andeq	ip, r7, fp, lsl r4
    41b8:	a4030500 	strge	r0, [r3], #-1280	; 0xfffffb00
    41bc:	20200005 	eorcs	r0, r0, r5
    41c0:	0013bb01 	andseq	fp, r3, r1, lsl #22
    41c4:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    41c8:	1c100101 	ldfnes	f0, [r0], {1}
    41cc:	1c120000 	ldcne	0, cr0, [r2], {-0}
    41d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    41d4:	12d50121 	sbcsne	r0, r5, #1073741832	; 0x40000008
    41d8:	05010000 	streq	r0, [r1, #-0]
    41dc:	81010105 	tsthi	r1, r5, lsl #2
	...
    41e8:	01000000 	mrseq	r0, (UNDEF: 0)
    41ec:	0008639c 	muleq	r8, ip, r3
    41f0:	68702200 	ldmdavs	r0!, {r9, sp}^
    41f4:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
    41f8:	00812d05 	addeq	r2, r1, r5, lsl #26
    41fc:	10770000 	rsbsne	r0, r7, r0
    4200:	4e230000 	cdpmi	0, 2, cr0, cr3, cr0, {0}
    4204:	00000011 	andeq	r0, r0, r1, lsl r0
    4208:	c0000000 	andgt	r0, r0, r0
    420c:	01000007 	tsteq	r0, r7
    4210:	2409050a 	strcs	r0, [r9], #-1290	; 0xfffffaf6
    4214:	00001160 	andeq	r1, r0, r0, ror #2
    4218:	00001095 	muleq	r0, r5, r0
    421c:	0007c025 	andeq	ip, r7, r5, lsr #32
    4220:	116b2600 	cmnne	fp, r0, lsl #12
    4224:	10a80000 	adcne	r0, r8, r0
    4228:	76260000 	strtvc	r0, [r6], -r0
    422c:	c6000011 			; <UNDEFINED> instruction: 0xc6000011
    4230:	00000010 	andeq	r0, r0, r0, lsl r0
    4234:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4238:	000013e8 	andeq	r1, r0, r8, ror #7
    423c:	0104fa01 	tsteq	r4, r1, lsl #20	; <UNPREDICTABLE>
    4240:	001bd401 	andseq	sp, fp, r1, lsl #8
    4244:	001c1000 	andseq	r1, ip, r0
    4248:	9d9c0100 	ldflss	f0, [ip]
    424c:	22000008 	andcs	r0, r0, #8
    4250:	00746b70 	rsbseq	r6, r4, r0, ror fp
    4254:	3004fa01 	andcc	pc, r4, r1, lsl #20
    4258:	00000116 	andeq	r0, r0, r6, lsl r1
    425c:	000010f0 	strdeq	r1, [r0], -r0
    4260:	01006228 	tsteq	r0, r8, lsr #4
    4264:	9d0c04fe 	cfstrsls	mvf0, [ip, #-1016]	; 0xfffffc08
    4268:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    426c:	00000011 	andeq	r0, r0, r1, lsl r0
    4270:	05b7040a 	ldreq	r0, [r7, #1034]!	; 0x40a
    4274:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4278:	00001235 	andeq	r1, r0, r5, lsr r2
    427c:	0104e901 	tsteq	r4, r1, lsl #18
    4280:	00011601 	andeq	r1, r1, r1, lsl #12
    4284:	001ba000 	andseq	sl, fp, r0
    4288:	001bd400 	andseq	sp, fp, r0, lsl #8
    428c:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    4290:	22000008 	andcs	r0, r0, #8
    4294:	00796870 	rsbseq	r6, r9, r0, ror r8
    4298:	2f04e901 	svccs	0x0004e901
    429c:	00000081 	andeq	r0, r0, r1, lsl #1
    42a0:	0000112c 	andeq	r1, r0, ip, lsr #2
    42a4:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    42a8:	0b04ed01 	bleq	13f6b4 <__ccfg+0x11f70c>
    42ac:	0000078a 	andeq	r0, r0, sl, lsl #15
    42b0:	0000114a 	andeq	r1, r0, sl, asr #2
    42b4:	01006228 	tsteq	r0, r8, lsr #4
    42b8:	9d0c04ee 	cfstrsls	mvf0, [ip, #-952]	; 0xfffffc48
    42bc:	5d000008 	stcpl	0, cr0, [r0, #-32]	; 0xffffffe0
    42c0:	00000011 	andeq	r0, r0, r1, lsl r0
    42c4:	12a90121 	adcne	r0, r9, #1073741832	; 0x40000008
    42c8:	d2010000 	andle	r0, r1, #0
    42cc:	16010104 	strne	r0, [r1], -r4, lsl #2
    42d0:	60000001 	andvs	r0, r0, r1
    42d4:	a000001b 	andge	r0, r0, fp, lsl r0
    42d8:	0100001b 	tsteq	r0, fp, lsl r0
    42dc:	0009509c 	muleq	r9, ip, r0
    42e0:	68702200 	ldmdavs	r0!, {r9, sp}^
    42e4:	d2010079 	andle	r0, r1, #121	; 0x79
    42e8:	00812f04 	addeq	r2, r1, r4, lsl #30
    42ec:	117c0000 	cmnne	ip, r0
    42f0:	6c220000 	stcvs	0, cr0, [r2], #-0
    42f4:	01006e65 	tsteq	r0, r5, ror #28
    42f8:	323904d2 	eorscc	r0, r9, #-771751936	; 0xd2000000
    42fc:	9a000004 	bls	4314 <_gettimeofday+0x174>
    4300:	28000011 	stmdacs	r0, {r0, r4}
    4304:	0100716f 	tsteq	r0, pc, ror #2
    4308:	8a0b04d7 	bhi	2c566c <__ccfg+0x2a56c4>
    430c:	b8000007 	stmdalt	r0, {r0, r1, r2}
    4310:	28000011 	stmdacs	r0, {r0, r4}
    4314:	d8010062 	stmdale	r1, {r1, r5, r6}
    4318:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    431c:	11d60000 	bicsne	r0, r6, r0
    4320:	21000000 	mrscs	r0, (UNDEF: 0)
    4324:	00143b01 	andseq	r3, r4, r1, lsl #22
    4328:	04a10100 	strteq	r0, [r1], #256	; 0x100
    432c:	00810101 	addeq	r0, r1, r1, lsl #2
    4330:	1ac40000 	bne	ff104338 <_estack+0xdf0ff338>
    4334:	1b600000 	blne	180433c <__ccfg+0x17e4394>
    4338:	9c010000 	stcls	0, cr0, [r1], {-0}
    433c:	000009eb 	andeq	r0, r0, fp, ror #19
    4340:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4344:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4348:	0000812b 	andeq	r8, r0, fp, lsr #2
    434c:	00120000 	andseq	r0, r2, r0
    4350:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4354:	3804a101 	stmdacc	r4, {r0, r8, sp, pc}
    4358:	00000116 	andeq	r0, r0, r6, lsl r1
    435c:	00001234 	andeq	r1, r0, r4, lsr r2
    4360:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    4364:	04a10100 	strteq	r0, [r1], #256	; 0x100
    4368:	0000813f 	andeq	r8, r0, pc, lsr r1
    436c:	00126800 	andseq	r6, r2, r0, lsl #16
    4370:	6c702900 			; <UNDEFINED> instruction: 0x6c702900
    4374:	a6010067 	strge	r0, [r1], -r7, rrx
    4378:	00810604 	addeq	r0, r1, r4, lsl #12
    437c:	64280000 	strtvs	r0, [r8], #-0
    4380:	01007073 	tsteq	r0, r3, ror r0
    4384:	810b04a6 	smlatbhi	fp, r6, r4, r0
    4388:	9c000000 	stcls	0, cr0, [r0], {-0}
    438c:	2a000012 	bcs	43dc <_gettimeofday+0x23c>
    4390:	00736573 	rsbseq	r6, r3, r3, ror r5
    4394:	1004a601 	andne	sl, r4, r1, lsl #12
    4398:	00000081 	andeq	r0, r0, r1, lsl #1
    439c:	2a509102 	bcs	14287ac <__ccfg+0x1408804>
    43a0:	01007061 	tsteq	r0, r1, rrx
    43a4:	550b04a7 	strpl	r0, [fp, #-1191]	; 0xfffffb59
    43a8:	02000003 	andeq	r0, r0, #3
    43ac:	63285491 			; <UNDEFINED> instruction: 0x63285491
    43b0:	04a80100 	strteq	r0, [r8], #256	; 0x100
    43b4:	0001160a 	andeq	r1, r1, sl, lsl #12
    43b8:	0012ba00 	andseq	fp, r2, r0, lsl #20
    43bc:	01210000 			; <UNDEFINED> instruction: 0x01210000
    43c0:	00001294 	muleq	r0, r4, r2
    43c4:	01048701 	tsteq	r4, r1, lsl #14
    43c8:	00008101 	andeq	r8, r0, r1, lsl #2
    43cc:	001a7400 	andseq	r7, sl, r0, lsl #8
    43d0:	001ac400 	andseq	ip, sl, r0, lsl #8
    43d4:	4a9c0100 	bmi	fe7047dc <_estack+0xde6ff7dc>
    43d8:	2200000a 	andcs	r0, r0, #10
    43dc:	00796870 	rsbseq	r6, r9, r0, ror r8
    43e0:	2b048701 	blcs	125fec <__ccfg+0x106044>
    43e4:	00000081 	andeq	r0, r0, r1, lsl #1
    43e8:	000012cd 	andeq	r1, r0, sp, asr #5
    43ec:	00737022 	rsbseq	r7, r3, r2, lsr #32
    43f0:	3a048701 	bcc	125ffc <__ccfg+0x106054>
    43f4:	00000709 	andeq	r0, r0, r9, lsl #14
    43f8:	000012eb 	andeq	r1, r0, fp, ror #5
    43fc:	000a1e2b 	andeq	r1, sl, fp, lsr #28
    4400:	04870100 	streq	r0, [r7], #256	; 0x100
    4404:	00008142 	andeq	r8, r0, r2, asr #2
    4408:	00130900 	andseq	r0, r3, r0, lsl #18
    440c:	00712800 	rsbseq	r2, r1, r0, lsl #16
    4410:	0b048d01 	bleq	12781c <__ccfg+0x107874>
    4414:	0000078a 	andeq	r0, r0, sl, lsl #15
    4418:	00001327 	andeq	r1, r0, r7, lsr #6
    441c:	52012c00 	andpl	r2, r1, #0, 24
    4420:	01000013 	tsteq	r0, r3, lsl r0
    4424:	01010386 	smlabbeq	r1, r6, r3, r0
    4428:	00000116 	andeq	r0, r0, r6, lsl r1
    442c:	000a9101 	andeq	r9, sl, r1, lsl #2
    4430:	18d02d00 	ldmne	r0, {r8, sl, fp, sp}^
    4434:	86010000 	strhi	r0, [r1], -r0
    4438:	00812d03 	addeq	r2, r1, r3, lsl #26
    443c:	642e0000 	strtvs	r0, [lr], #-0
    4440:	01007073 	tsteq	r0, r3, ror r0
    4444:	81370386 	teqhi	r7, r6, lsl #7
    4448:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    444c:	00736573 	rsbseq	r6, r3, r3, ror r5
    4450:	40038601 	andmi	r8, r3, r1, lsl #12
    4454:	00000081 	andeq	r0, r0, r1, lsl #1
    4458:	01007029 	tsteq	r0, r9, lsr #32
    445c:	9d0c038a 	stcls	3, cr0, [ip, #-552]	; 0xfffffdd8
    4460:	00000008 	andeq	r0, r0, r8
    4464:	12870127 	addne	r0, r7, #-1073741815	; 0xc0000009
    4468:	7f010000 	svcvc	0x00010000
    446c:	00010103 	andeq	r0, r1, r3, lsl #2
    4470:	00000000 	andeq	r0, r0, r0
    4474:	01000000 	mrseq	r0, (UNDEF: 0)
    4478:	000acb9c 	muleq	sl, ip, fp
    447c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4480:	32037f01 	andcc	r7, r3, #1, 30
    4484:	00000116 	andeq	r0, r0, r6, lsl r1
    4488:	00001356 	andeq	r1, r0, r6, asr r3
    448c:	70736422 	rsbsvc	r6, r3, r2, lsr #8
    4490:	037f0100 	cmneq	pc, #0, 2
    4494:	00008139 	andeq	r8, r0, r9, lsr r1
    4498:	00136900 	andseq	r6, r3, r0, lsl #18
    449c:	01210000 			; <UNDEFINED> instruction: 0x01210000
    44a0:	000013cc 	andeq	r1, r0, ip, asr #7
    44a4:	01036b01 	tsteq	r3, r1, lsl #22
    44a8:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    44b4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    44b8:	2200000b 	andcs	r0, r0, #11
    44bc:	6b010070 	blvs	44684 <__ccfg+0x246dc>
    44c0:	01163303 	tsteq	r6, r3, lsl #6
    44c4:	137c0000 	cmnne	ip, #0
    44c8:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    44cc:	01000014 	tsteq	r0, r4, lsl r0
    44d0:	813a036b 	teqhi	sl, fp, ror #6
    44d4:	9a000000 	bls	44dc <__pi_hex_enc_table+0x4f>
    44d8:	28000013 	stmdacs	r0, {r0, r1, r4}
    44dc:	01006370 	tsteq	r0, r0, ror r3
    44e0:	9d0c036f 	stcls	3, cr0, [ip, #-444]	; 0xfffffe44
    44e4:	b8000008 	stmdalt	r0, {r3}
    44e8:	29000013 	stmdbcs	r0, {r0, r1, r4}
    44ec:	01007070 	tsteq	r0, r0, ror r0
    44f0:	9d11036f 	ldcls	3, cr0, [r1, #-444]	; 0xfffffe44
    44f4:	00000008 	andeq	r0, r0, r8
    44f8:	12e20127 	rscne	r0, r2, #-1073741815	; 0xc0000009
    44fc:	63010000 	movwvs	r0, #4096	; 0x1000
    4500:	00010103 	andeq	r0, r1, r3, lsl #2
    4504:	00000000 	andeq	r0, r0, r0
    4508:	01000000 	mrseq	r0, (UNDEF: 0)
    450c:	000b5f9c 	muleq	fp, ip, pc	; <UNPREDICTABLE>
    4510:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4514:	31036301 	tstcc	r3, r1, lsl #6
    4518:	00000116 	andeq	r0, r0, r6, lsl r1
    451c:	000013d6 	ldrdeq	r1, [r0], -r6
    4520:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    4524:	03630100 	cmneq	r3, #0, 2
    4528:	00008138 	andeq	r8, r0, r8, lsr r1
    452c:	0013f400 	andseq	pc, r3, r0, lsl #8
    4530:	01270000 			; <UNDEFINED> instruction: 0x01270000
    4534:	000013d7 	ldrdeq	r1, [r0], -r7
    4538:	01035a01 	tsteq	r3, r1, lsl #20
    453c:	00000001 	andeq	r0, r0, r1
    4540:	00000000 	andeq	r0, r0, r0
    4544:	999c0100 	ldmibls	ip, {r8}
    4548:	2200000b 	andcs	r0, r0, #11
    454c:	5a010070 	bpl	44714 <__ccfg+0x2476c>
    4550:	01163103 	tsteq	r6, r3, lsl #2
    4554:	14120000 	ldrne	r0, [r2], #-0
    4558:	73220000 			; <UNDEFINED> instruction: 0x73220000
    455c:	01007365 	tsteq	r0, r5, ror #6
    4560:	8138035a 	teqhi	r8, sl, asr r3
    4564:	30000000 	andcc	r0, r0, r0
    4568:	00000014 	andeq	r0, r0, r4, lsl r0
    456c:	146d012c 	strbtne	r0, [sp], #-300	; 0xfffffed4
    4570:	52010000 	andpl	r0, r1, #0
    4574:	81010103 	tsthi	r1, r3, lsl #2
    4578:	01000000 	mrseq	r0, (UNDEF: 0)
    457c:	00000bd5 	ldrdeq	r0, [r0], -r5
    4580:	7968702e 	stmdbvc	r8!, {r1, r2, r3, r5, ip, sp, lr}^
    4584:	03520100 	cmpeq	r2, #0, 2
    4588:	0000812d 	andeq	r8, r0, sp, lsr #2
    458c:	706f2e00 	rsbvc	r2, pc, r0, lsl #28
    4590:	52010074 	andpl	r0, r1, #116	; 0x74
    4594:	00813603 	addeq	r3, r1, r3, lsl #12
    4598:	612e0000 			; <UNDEFINED> instruction: 0x612e0000
    459c:	01006772 	tsteq	r0, r2, ror r7
    45a0:	16430352 			; <UNDEFINED> instruction: 0x16430352
    45a4:	00000001 	andeq	r0, r0, r1
    45a8:	12400121 	subne	r0, r0, #1073741832	; 0x40000008
    45ac:	33010000 	movwcc	r0, #4096	; 0x1000
    45b0:	81010103 	tsthi	r1, r3, lsl #2
    45b4:	ac000000 	stcge	0, cr0, [r0], {-0}
    45b8:	0c000019 	stceq	0, cr0, [r0], {25}
    45bc:	0100001a 	tsteq	r0, sl, lsl r0
    45c0:	000c3e9c 	muleq	ip, ip, lr
    45c4:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    45c8:	03330100 	teqeq	r3, #0, 2
    45cc:	0000812c 	andeq	r8, r0, ip, lsr #2
    45d0:	00144e00 	andseq	r4, r4, r0, lsl #28
    45d4:	706f2200 	rsbvc	r2, pc, r0, lsl #4
    45d8:	33010074 	movwcc	r0, #4212	; 0x1074
    45dc:	00813403 	addeq	r3, r1, r3, lsl #8
    45e0:	148d0000 	strne	r0, [sp], #0
    45e4:	61220000 			; <UNDEFINED> instruction: 0x61220000
    45e8:	01006772 	tsteq	r0, r2, ror r7
    45ec:	16410333 			; <UNDEFINED> instruction: 0x16410333
    45f0:	b6000001 	strlt	r0, [r0], -r1
    45f4:	2f000014 	svccs	0x00000014
    45f8:	000019ba 			; <UNDEFINED> instruction: 0x000019ba
    45fc:	000019c8 	andeq	r1, r0, r8, asr #19
    4600:	01007028 	tsteq	r0, r8, lsr #32
    4604:	d415033c 	ldrle	r0, [r5], #-828	; 0xfffffcc4
    4608:	df000007 	svcle	0x00000007
    460c:	00000014 	andeq	r0, r0, r4, lsl r0
    4610:	bd012700 	stclt	7, cr2, [r1, #-0]
    4614:	01000012 	tsteq	r0, r2, lsl r0
    4618:	0101032b 	tsteq	r1, fp, lsr #6
	...
    4624:	0c679c01 	stcleq	12, cr9, [r7], #-4
    4628:	70220000 	eorvc	r0, r2, r0
    462c:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    4630:	0001162e 	andeq	r1, r1, lr, lsr #12
    4634:	0014f200 	andseq	pc, r4, r0, lsl #4
    4638:	01210000 			; <UNDEFINED> instruction: 0x01210000
    463c:	00001379 	andeq	r1, r0, r9, ror r3
    4640:	01031a01 	tsteq	r3, r1, lsl #20
    4644:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4650:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    4654:	2200000c 	andcs	r0, r0, #12
    4658:	1a010070 	bne	44820 <__ccfg+0x24878>
    465c:	01162e03 	tsteq	r6, r3, lsl #28
    4660:	15100000 	ldrne	r0, [r0, #-0]
    4664:	62220000 	eorvs	r0, r2, #0
    4668:	01006675 	tsteq	r0, r5, ror r6
    466c:	593d031a 	ldmdbpl	sp!, {r1, r3, r4, r8, r9}
    4670:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
    4674:	22000015 	andcs	r0, r0, #21
    4678:	006e656c 	rsbeq	r6, lr, ip, ror #10
    467c:	46031a01 	strmi	r1, [r3], -r1, lsl #20
    4680:	00000081 	andeq	r0, r0, r1, lsl #1
    4684:	00001541 	andeq	r1, r0, r1, asr #10
    4688:	01006229 	tsteq	r0, r9, lsr #4
    468c:	9d0c031e 	stcls	3, cr0, [ip, #-120]	; 0xffffff88
    4690:	00000008 	andeq	r0, r0, r8
    4694:	13b20121 			; <UNDEFINED> instruction: 0x13b20121
    4698:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    469c:	81010103 	tsthi	r1, r3, lsl #2
	...
    46a8:	01000000 	mrseq	r0, (UNDEF: 0)
    46ac:	000d1b9c 	muleq	sp, ip, fp
    46b0:	00702200 	rsbseq	r2, r0, r0, lsl #4
    46b4:	2d030801 	stccs	8, cr0, [r3, #-4]
    46b8:	00000116 	andeq	r0, r0, r6, lsl r1
    46bc:	0000155f 	andeq	r1, r0, pc, asr r5
    46c0:	66756222 	ldrbtvs	r6, [r5], -r2, lsr #4
    46c4:	03080100 	movweq	r0, #33024	; 0x8100
    46c8:	000d1b36 	andeq	r1, sp, r6, lsr fp
    46cc:	00157d00 	andseq	r7, r5, r0, lsl #26
    46d0:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    46d4:	0801006e 	stmdaeq	r1, {r1, r2, r3, r5, r6}
    46d8:	00813f03 	addeq	r3, r1, r3, lsl #30
    46dc:	159b0000 	ldrne	r0, [fp]
    46e0:	62290000 	eorvs	r0, r9, #0
    46e4:	030c0100 	movweq	r0, #49408	; 0xc100
    46e8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    46ec:	040a0000 	streq	r0, [sl], #-0
    46f0:	000000e3 	andeq	r0, r0, r3, ror #1
    46f4:	13700121 	cmnne	r0, #1073741832	; 0x40000008
    46f8:	cd010000 	stcgt	0, cr0, [r1, #-0]
    46fc:	16010102 	strne	r0, [r1], -r2, lsl #2
    4700:	c4000001 	strgt	r0, [r0], #-1
    4704:	80000018 	andhi	r0, r0, r8, lsl r0
    4708:	01000019 	tsteq	r0, r9, lsl r0
    470c:	000dbf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    4710:	00772b00 	rsbseq	r2, r7, r0, lsl #22
    4714:	cd010000 	stcgt	0, cr0, [r1, #-0]
    4718:	00cd2e02 	sbceq	r2, sp, r2, lsl #28
    471c:	15b90000 	ldrne	r0, [r9, #0]!
    4720:	66220000 	strtvs	r0, [r2], -r0
    4724:	cd010064 	stcgt	0, cr0, [r1, #-400]	; 0xfffffe70
    4728:	00813902 	addeq	r3, r1, r2, lsl #18
    472c:	15d70000 	ldrbne	r0, [r7]
    4730:	272b0000 	strcs	r0, [fp, -r0]!
    4734:	01000014 	tsteq	r0, r4, lsl r0
    4738:	814102cd 	smlalbthi	r0, r1, sp, r2
    473c:	00000000 	andeq	r0, r0, r0
    4740:	22000016 	andcs	r0, r0, #22
    4744:	00677275 	rsbeq	r7, r7, r5, ror r2
    4748:	1102ce01 	tstne	r2, r1, lsl #28
    474c:	000000c1 	andeq	r0, r0, r1, asr #1
    4750:	0000164a 	andeq	r1, r0, sl, asr #12
    4754:	01006228 	tsteq	r0, r8, lsr #4
    4758:	9d0c02cf 	sfmls	f0, 4, [ip, #-828]	; 0xfffffcc4
    475c:	5d000008 	stcpl	0, cr0, [r0, #-32]	; 0xffffffe0
    4760:	30000016 	andcc	r0, r0, r6, lsl r0
    4764:	00001362 	andeq	r1, r0, r2, ror #6
    4768:	0b02d001 	bleq	b8774 <__ccfg+0x987cc>
    476c:	00000355 	andeq	r0, r0, r5, asr r3
    4770:	2a649102 	bcs	1928b80 <__ccfg+0x1908bd8>
    4774:	d1010073 	tstle	r1, r3, ror r0
    4778:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    477c:	57010000 	strpl	r0, [r1, -r0]
    4780:	64696528 	strbtvs	r6, [r9], #-1320	; 0xfffffad8
    4784:	02d20100 	sbcseq	r0, r2, #0, 2
    4788:	00008106 	andeq	r8, r0, r6, lsl #2
    478c:	00167b00 	andseq	r7, r6, r0, lsl #22
    4790:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4794:	0000133f 	andeq	r1, r0, pc, lsr r3
    4798:	0102a401 	tsteq	r2, r1, lsl #8
    479c:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    47a8:	729c0100 	addsvc	r0, ip, #0, 2
    47ac:	2200000e 	andcs	r0, r0, #14
    47b0:	01006466 	tsteq	r0, r6, ror #8
    47b4:	812a02a4 	smulwbhi	sl, r4, r2
    47b8:	a4000000 	strge	r0, [r0], #-0
    47bc:	2b000016 	blcs	481c <patchGenfskRfe+0x270>
    47c0:	0000142e 	andeq	r1, r0, lr, lsr #8
    47c4:	3202a401 	andcc	sl, r2, #16777216	; 0x1000000
    47c8:	00000081 	andeq	r0, r0, r1, lsl #1
    47cc:	000016d8 	ldrdeq	r1, [r0], -r8
    47d0:	01007328 	tsteq	r0, r8, lsr #6
    47d4:	400d02a8 	andmi	r0, sp, r8, lsr #5
    47d8:	0c000007 	stceq	0, cr0, [r0], {7}
    47dc:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    47e0:	0100716e 	tsteq	r0, lr, ror #2
    47e4:	810602a9 	smlatbhi	r6, r9, r2, r0
    47e8:	71000000 	mrsvc	r0, (UNDEF: 0)
    47ec:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    47f0:	01007172 	tsteq	r0, r2, ror r1
    47f4:	8a0b02aa 	bhi	2c52a4 <__ccfg+0x2a52fc>
    47f8:	8f000007 	svchi	0x00000007
    47fc:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    4800:	ab010062 	blge	44990 <__ccfg+0x249e8>
    4804:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    4808:	17ad0000 	strne	r0, [sp, r0]!
    480c:	2d310000 	ldccs	0, cr0, [r1, #-0]
    4810:	01000013 	tsteq	r0, r3, lsl r0
    4814:	000102c0 	andeq	r0, r1, r0, asr #5
    4818:	32000000 	andcc	r0, r0, #0
    481c:	0000114e 	andeq	r1, r0, lr, asr #2
	...
    4828:	0a02bb01 	beq	b3434 <__ccfg+0x9348c>
    482c:	00116033 	andseq	r6, r1, r3, lsr r0
    4830:	116b2600 	cmnne	fp, r0, lsl #12
    4834:	17d60000 	ldrbne	r0, [r6, r0]
    4838:	76260000 	strtvc	r0, [r6], -r0
    483c:	e9000011 	stmdb	r0, {r0, r4}
    4840:	00000017 	andeq	r0, r0, r7, lsl r0
    4844:	18012100 	stmdane	r1, {r8, sp}
    4848:	01000012 	tsteq	r0, r2, lsl r0
    484c:	0101027d 	tsteq	r1, sp, ror r2
    4850:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    485c:	0eef9c01 	cdpeq	12, 14, cr9, cr15, cr1, {0}
    4860:	66220000 	strtvs	r0, [r2], -r0
    4864:	7d010064 	stcvc	0, cr0, [r1, #-400]	; 0xfffffe70
    4868:	00812a02 	addeq	r2, r1, r2, lsl #20
    486c:	17fc0000 	ldrbne	r0, [ip, r0]!
    4870:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    4874:	01000014 	tsteq	r0, r4, lsl r0
    4878:	8132027d 	teqhi	r2, sp, ror r2
    487c:	30000000 	andcc	r0, r0, r0
    4880:	28000018 	stmdacs	r0, {r3, r4}
    4884:	81010073 	tsthi	r1, r3, ror r0
    4888:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    488c:	18590000 	ldmdane	r9, {}^	; <UNPREDICTABLE>
    4890:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    4894:	82010071 	andhi	r0, r1, #113	; 0x71
    4898:	00810602 	addeq	r0, r1, r2, lsl #12
    489c:	18be0000 	ldmne	lr!, {}	; <UNPREDICTABLE>
    48a0:	72280000 	eorvc	r0, r8, #0
    48a4:	83010071 	movwhi	r0, #4209	; 0x1071
    48a8:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    48ac:	18dc0000 	ldmne	ip, {}^	; <UNPREDICTABLE>
    48b0:	62280000 	eorvs	r0, r8, #0
    48b4:	02840100 	addeq	r0, r4, #0, 2
    48b8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    48bc:	00190500 	andseq	r0, r9, r0, lsl #10
    48c0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    48c4:	00001433 	andeq	r1, r0, r3, lsr r4
    48c8:	01025601 	tsteq	r2, r1, lsl #12
    48cc:	00011601 	andeq	r1, r1, r1, lsl #12
	...
    48d8:	5c9c0100 	ldfpls	f0, [ip], {0}
    48dc:	2b00000f 	blcs	4920 <patchGenfskRfe+0x374>
    48e0:	00000077 	andeq	r0, r0, r7, ror r0
    48e4:	2d025601 	stccs	6, cr5, [r2, #-4]
    48e8:	000000cd 	andeq	r0, r0, sp, asr #1
    48ec:	00001939 	andeq	r1, r0, r9, lsr r9
    48f0:	00646622 	rsbeq	r6, r4, r2, lsr #12
    48f4:	38025601 	stmdacc	r2, {r0, r9, sl, ip, lr}
    48f8:	00000081 	andeq	r0, r0, r1, lsl #1
    48fc:	0000194c 	andeq	r1, r0, ip, asr #18
    4900:	01007028 	tsteq	r0, r8, lsr #32
    4904:	160a025d 			; <UNDEFINED> instruction: 0x160a025d
    4908:	8b000001 	blhi	4914 <patchGenfskRfe+0x368>
    490c:	28000019 	stmdacs	r0, {r0, r3, r4}
    4910:	5e010062 	cdppl	0, 0, cr0, cr1, cr2, {3}
    4914:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    4918:	199e0000 	ldmibne	lr, {}	; <UNPREDICTABLE>
    491c:	72280000 	eorvc	r0, r8, #0
    4920:	5f010071 	svcpl	0x00010071
    4924:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    4928:	19c70000 	stmibne	r7, {}^	; <UNPREDICTABLE>
    492c:	21000000 	mrscs	r0, (UNDEF: 0)
    4930:	0013fe01 	andseq	pc, r3, r1, lsl #28
    4934:	024a0100 	subeq	r0, sl, #0, 2
    4938:	00810101 	addeq	r0, r1, r1, lsl #2
    493c:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    4940:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    4944:	9c010000 	stcls	0, cr0, [r1], {-0}
    4948:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    494c:	64726f22 	ldrbtvs	r6, [r2], #-3874	; 0xfffff0de
    4950:	024a0100 	subeq	r0, sl, #0, 2
    4954:	00008129 	andeq	r8, r0, r9, lsr #2
    4958:	001a0100 	andseq	r0, sl, r0, lsl #2
    495c:	6c703400 	cfldrdvs	mvd3, [r0], #-0
    4960:	024a0100 	subeq	r0, sl, #0, 2
    4964:	0007d43f 	andeq	sp, r7, pc, lsr r4
    4968:	00510100 	subseq	r0, r1, r0, lsl #2
    496c:	13830121 	orrne	r0, r3, #1073741832	; 0x40000008
    4970:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    4974:	81010102 	tsthi	r1, r2, lsl #2
	...
    4980:	01000000 	mrseq	r0, (UNDEF: 0)
    4984:	000ff69c 	muleq	pc, ip, r6	; <UNPREDICTABLE>
    4988:	00772b00 	rsbseq	r2, r7, r0, lsl #22
    498c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    4990:	00cd2b02 	sbceq	r2, sp, r2, lsl #22
    4994:	1a1f0000 	bne	7c499c <__ccfg+0x7a49f4>
    4998:	66220000 	strtvs	r0, [r2], -r0
    499c:	29010064 	stmdbcs	r1, {r2, r5, r6}
    49a0:	00813602 	addeq	r3, r1, r2, lsl #12
    49a4:	1a3d0000 	bne	f449ac <__ccfg+0xf24a04>
    49a8:	73280000 			; <UNDEFINED> instruction: 0x73280000
    49ac:	022b0100 	eoreq	r0, fp, #0, 2
    49b0:	0007400d 	andeq	r4, r7, sp
    49b4:	001a8700 	andseq	r8, sl, r0, lsl #14
    49b8:	00622800 	rsbeq	r2, r2, r0, lsl #16
    49bc:	0c022c01 	stceq	12, cr2, [r2], {1}
    49c0:	0000089d 	muleq	r0, sp, r8
    49c4:	00001a9a 	muleq	r0, sl, sl
    49c8:	b4012100 	strlt	r2, [r1], #-256	; 0xffffff00
    49cc:	01000012 	tsteq	r0, r2, lsl r0
    49d0:	010101f6 	strdeq	r0, [r1, -r6]
    49d4:	00000081 	andeq	r0, r0, r1, lsl #1
    49d8:	000017e0 	andeq	r1, r0, r0, ror #15
    49dc:	000018a0 	andeq	r1, r0, r0, lsr #17
    49e0:	10839c01 	addne	r9, r3, r1, lsl #24
    49e4:	772b0000 	strvc	r0, [fp, -r0]!
    49e8:	01000000 	mrseq	r0, (UNDEF: 0)
    49ec:	cd2a01f6 	stfgts	f0, [sl, #-984]!	; 0xfffffc28
    49f0:	ad000000 	stcge	0, cr0, [r0, #-0]
    49f4:	2200001a 	andcs	r0, r0, #26
    49f8:	00796870 	rsbseq	r6, r9, r0, ror r8
    49fc:	3501f601 	strcc	pc, [r1, #-1537]	; 0xfffff9ff
    4a00:	00000081 	andeq	r0, r0, r1, lsl #1
    4a04:	00001ad6 	ldrdeq	r1, [r0], -r6
    4a08:	0013e32b 	andseq	lr, r3, fp, lsr #6
    4a0c:	01f60100 	mvnseq	r0, r0, lsl #2
    4a10:	0000813e 	andeq	r8, r0, lr, lsr r1
    4a14:	001b2b00 	andseq	r2, fp, r0, lsl #22
    4a18:	66283500 	strtvs	r3, [r8], -r0, lsl #10
    4a1c:	f8010064 			; <UNDEFINED> instruction: 0xf8010064
    4a20:	00810601 	addeq	r0, r1, r1, lsl #12
    4a24:	1b630000 	blne	18c4a2c <__ccfg+0x18a4a84>
    4a28:	21360000 	teqcs	r6, r0
    4a2c:	01000013 	tsteq	r0, r3, lsl r0
    4a30:	560a01f9 			; <UNDEFINED> instruction: 0x560a01f9
    4a34:	28000005 	stmdacs	r0, {r0, r2}
    4a38:	fa010073 	blx	44c0c <__ccfg+0x24c64>
    4a3c:	07400d01 	strbeq	r0, [r0, -r1, lsl #26]
    4a40:	1b810000 	blne	fe044a48 <_estack+0xde03fa48>
    4a44:	612a0000 			; <UNDEFINED> instruction: 0x612a0000
    4a48:	fc010070 	stc2	0, cr0, [r1], {112}	; 0x70
    4a4c:	00b50b01 	adcseq	r0, r5, r1, lsl #22
    4a50:	91020000 	mrsls	r0, (UNDEF: 2)
    4a54:	01270054 	qsubeq	r0, r4, r7
    4a58:	00001349 	andeq	r1, r0, r9, asr #6
    4a5c:	01013b01 	tsteq	r1, r1, lsl #22
    4a60:	00177001 	andseq	r7, r7, r1
    4a64:	0017e000 	andseq	lr, r7, r0
    4a68:	bb9c0100 	bllt	fe704e70 <_estack+0xde6ffe70>
    4a6c:	22000010 	andcs	r0, r0, #16
    4a70:	3b010070 	blcc	44c38 <__ccfg+0x24c90>
    4a74:	01162e01 	tsteq	r6, r1, lsl #28
    4a78:	1bcb0000 	blne	ff2c4a80 <_estack+0xdf2bfa80>
    4a7c:	62280000 	eorvs	r0, r8, #0
    4a80:	01410100 	mrseq	r0, (UNDEF: 81)
    4a84:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4a88:	001bf400 	andseq	pc, fp, r0, lsl #8
    4a8c:	61370000 	teqvs	r7, r0
    4a90:	01006270 	tsteq	r0, r0, ror r2
    4a94:	01010114 	tsteq	r1, r4, lsl r1
    4a98:	0000089d 	muleq	r0, sp, r8
    4a9c:	00001658 	andeq	r1, r0, r8, asr r6
    4aa0:	0000166e 	andeq	r1, r0, lr, ror #12
    4aa4:	11029c01 	tstne	r2, r1, lsl #24
    4aa8:	d02b0000 	eorle	r0, fp, r0
    4aac:	01000018 	tsteq	r0, r8, lsl r0
    4ab0:	cd2b0114 	stfgts	f0, [fp, #-80]!	; 0xffffffb0
    4ab4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4ab8:	2a00001c 	bcs	4b30 <patchGenfskRfe+0x584>
    4abc:	19010070 	stmdbne	r1, {r4, r5, r6}
    4ac0:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    4ac4:	50010000 	andpl	r0, r1, r0
    4ac8:	00736329 	rsbseq	r6, r3, r9, lsr #6
    4acc:	07011a01 	streq	r1, [r1, -r1, lsl #20]
    4ad0:	000000cd 	andeq	r0, r0, sp, asr #1
    4ad4:	6c723800 	ldclvs	8, cr3, [r2], #-0
    4ad8:	04010070 	streq	r0, [r1], #-112	; 0xffffff90
    4adc:	88010101 	stmdahi	r1, {r0, r8}
    4ae0:	96000016 			; <UNDEFINED> instruction: 0x96000016
    4ae4:	01000016 	tsteq	r0, r6, lsl r0
    4ae8:	00112a9c 	mulseq	r1, ip, sl
    4aec:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4af0:	2b010401 	blcs	45afc <__ccfg+0x25b54>
    4af4:	0000089d 	muleq	r0, sp, r8
    4af8:	00001c3b 	andeq	r1, r0, fp, lsr ip
    4afc:	128c3900 	addne	r3, ip, #0, 18
    4b00:	e0010000 	and	r0, r1, r0
    4b04:	4e010101 	adfmis	f0, f1, f1
    4b08:	3a000011 	bcc	4b54 <patchGenfskRfe+0x5a8>
    4b0c:	e0010070 	and	r0, r1, r0, ror r0
    4b10:	00089d2f 	andeq	r9, r8, pc, lsr #26
    4b14:	76643a00 	strbtvc	r3, [r4], -r0, lsl #20
    4b18:	36e00100 	strbtcc	r0, [r0], r0, lsl #2
    4b1c:	00000081 	andeq	r0, r0, r1, lsl #1
    4b20:	12cf3b00 	sbcne	r3, pc, #0, 22
    4b24:	cf010000 	svcgt	0x00010000
    4b28:	00810101 	addeq	r0, r1, r1, lsl #2
    4b2c:	81010000 	mrshi	r0, (UNDEF: 1)
    4b30:	3a000011 	bcc	4b7c <patchGenfskRfe+0x5d0>
    4b34:	0100716f 	tsteq	r0, pc, ror #2
    4b38:	078a2bcf 	streq	r2, [sl, pc, asr #23]
    4b3c:	6e3c0000 	cdpvs	0, 3, cr0, cr12, cr0, {0}
    4b40:	d3010071 	movwle	r0, #4209	; 0x1071
    4b44:	00008106 	andeq	r8, r0, r6, lsl #2
    4b48:	00623c00 	rsbeq	r3, r2, r0, lsl #24
    4b4c:	9d0cd401 	cfstrsls	mvf13, [ip, #-4]
    4b50:	00000008 	andeq	r0, r0, r8
    4b54:	716e653d 	cmnvc	lr, sp, lsr r5
    4b58:	01a80100 			; <UNDEFINED> instruction: 0x01a80100
    4b5c:	11a40101 			; <UNDEFINED> instruction: 0x11a40101
    4b60:	713a0000 	teqvc	sl, r0
    4b64:	2aa80100 	bcs	fea04f6c <_estack+0xde9fff6c>
    4b68:	0000078a 	andeq	r0, r0, sl, lsl #15
    4b6c:	0100703a 	tsteq	r0, sl, lsr r0
    4b70:	089d37a8 	ldmeq	sp, {r3, r5, r7, r8, r9, sl, ip, sp}
    4b74:	3d000000 	stccc	0, cr0, [r0, #-0]
    4b78:	00716564 	rsbseq	r6, r1, r4, ror #10
    4b7c:	01017f01 	tsteq	r1, r1, lsl #30
    4b80:	0011bd01 	andseq	fp, r1, r1, lsl #26
    4b84:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    4b88:	9d2b7f01 	stcls	15, cr7, [fp, #-4]!
    4b8c:	00000008 	andeq	r0, r0, r8
    4b90:	0011a43e 	andseq	sl, r1, lr, lsr r4
    4b94:	00166e00 	andseq	r6, r6, r0, lsl #28
    4b98:	00168800 	andseq	r8, r6, r0, lsl #16
    4b9c:	f29c0100 	vaddw.s16	q0, q6, d0
    4ba0:	3f000011 	svccc	0x00000011
    4ba4:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    4ba8:	a4405001 	strbge	r5, [r0], #-1
    4bac:	74000011 	strvc	r0, [r0], #-17	; 0xffffffef
    4bb0:	86000016 			; <UNDEFINED> instruction: 0x86000016
    4bb4:	01000016 	tsteq	r0, r6, lsl r0
    4bb8:	b224017f 	eorlt	r0, r4, #-1073741793	; 0xc000001f
    4bbc:	4e000011 	mcrmi	0, 0, r0, cr0, cr1, {0}
    4bc0:	0000001c 	andeq	r0, r0, ip, lsl r0
    4bc4:	11813e00 	orrne	r3, r1, r0, lsl #28
    4bc8:	16980000 	ldrne	r0, [r8], r0
    4bcc:	16e40000 	strbtne	r0, [r4], r0
    4bd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    4bd4:	0000123b 	andeq	r1, r0, fp, lsr r2
    4bd8:	00118f24 	andseq	r8, r1, r4, lsr #30
    4bdc:	001c6100 	andseq	r6, ip, r0, lsl #2
    4be0:	11992400 	orrsne	r2, r9, r0, lsl #8
    4be4:	1c950000 	ldcne	0, cr0, [r5], {0}
    4be8:	81400000 	mrshi	r0, (UNDEF: 64)
    4bec:	a4000011 	strge	r0, [r0], #-17	; 0xffffffef
    4bf0:	ac000016 	stcge	0, cr0, [r0], {22}
    4bf4:	01000016 	tsteq	r0, r6, lsl r0
    4bf8:	8f2401a8 	svchi	0x002401a8
    4bfc:	c9000011 	stmdbgt	r0, {r0, r4}
    4c00:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    4c04:	00001199 	muleq	r0, r9, r1
    4c08:	00001ce7 	andeq	r1, r0, r7, ror #25
    4c0c:	2a3e0000 	bcs	f84c14 <__ccfg+0xf64c6c>
    4c10:	e4000011 	str	r0, [r0], #-17	; 0xffffffef
    4c14:	70000016 	andvc	r0, r0, r6, lsl r0
    4c18:	01000017 	tsteq	r0, r7, lsl r0
    4c1c:	0012809c 	mulseq	r2, ip, r0
    4c20:	11382400 	teqne	r8, r0, lsl #8
    4c24:	1d050000 	stcne	0, cr0, [r5, #-0]
    4c28:	42240000 	eormi	r0, r4, #0
    4c2c:	5a000011 	bpl	4c78 <patchImageGenfsk+0x18>
    4c30:	4100001d 	tstmi	r0, sp, lsl r0
    4c34:	0000112a 	andeq	r1, r0, sl, lsr #2
    4c38:	00001718 	andeq	r1, r0, r8, lsl r7
    4c3c:	000007a0 	andeq	r0, r0, r0, lsr #15
    4c40:	3301e001 	movwcc	lr, #4097	; 0x1001
    4c44:	00001142 	andeq	r1, r0, r2, asr #2
    4c48:	00113824 	andseq	r3, r1, r4, lsr #16
    4c4c:	001d6d00 	andseq	r6, sp, r0, lsl #26
    4c50:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4c54:	00000b99 	muleq	r0, r9, fp
    4c58:	00001980 	andeq	r1, r0, r0, lsl #19
    4c5c:	000019ac 	andeq	r1, r0, ip, lsr #19
    4c60:	12d89c01 	sbcsne	r9, r8, #256	; 0x100
    4c64:	ad240000 	stcge	0, cr0, [r4, #-0]
    4c68:	8b00000b 	blhi	4c9c <patchImageGenfsk+0x3c>
    4c6c:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4c70:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    4c74:	00001da9 	andeq	r1, r0, r9, lsr #27
    4c78:	000bc724 	andeq	ip, fp, r4, lsr #14
    4c7c:	001dd200 	andseq	sp, sp, r0, lsl #4
    4c80:	0b993200 	bleq	fe651488 <_estack+0xde64c488>
    4c84:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    4c88:	199c0000 	ldmibne	ip, {}	; <UNPREDICTABLE>
    4c8c:	52010000 	andpl	r0, r1, #0
    4c90:	ad330103 	ldfges	f0, [r3, #-12]!
    4c94:	2400000b 	strcs	r0, [r0], #-11
    4c98:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
    4c9c:	00001dfb 	strdeq	r1, [r0], -fp
    4ca0:	000bc724 	andeq	ip, fp, r4, lsr #14
    4ca4:	001e0e00 	andseq	r0, lr, r0, lsl #28
    4ca8:	42000000 	andmi	r0, r0, #0
    4cac:	00000a4a 	andeq	r0, r0, sl, asr #20
    4cb0:	00001a0c 	andeq	r1, r0, ip, lsl #20
    4cb4:	00001a74 	andeq	r1, r0, r4, ror sl
    4cb8:	5e249c01 	cdppl	12, 2, cr9, cr4, cr1, {0}
    4cbc:	2100000a 	tstcs	r0, sl
    4cc0:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    4cc4:	00000a6b 	andeq	r0, r0, fp, ror #20
    4cc8:	00001e34 	andeq	r1, r0, r4, lsr lr
    4ccc:	000a7824 	andeq	r7, sl, r4, lsr #16
    4cd0:	001e9400 	andseq	r9, lr, r0, lsl #8
    4cd4:	0a852600 	beq	fe14e4dc <_estack+0xde1494dc>
    4cd8:	1ede0000 	cdpne	0, 13, cr0, cr14, cr0, {0}
    4cdc:	4a320000 	bmi	c84ce4 <__ccfg+0xc64d3c>
    4ce0:	1a00000a 	bne	4d10 <patchImageGenfsk+0xb0>
    4ce4:	1e00001a 	mcrne	0, 0, r0, cr0, cr10, {0}
    4ce8:	0100001a 	tsteq	r0, sl, lsl r0
    4cec:	33010386 	movwcc	r0, #4998	; 0x1386
    4cf0:	00000a5e 	andeq	r0, r0, lr, asr sl
    4cf4:	000a6b24 	andeq	r6, sl, r4, lsr #22
    4cf8:	001f1200 	andseq	r1, pc, r0, lsl #4
    4cfc:	0a783300 	beq	1e11904 <__ccfg+0x1df195c>
    4d00:	85430000 	strbhi	r0, [r3, #-0]
    4d04:	0000000a 	andeq	r0, r0, sl
    4d08:	01740000 	cmneq	r4, r0
    4d0c:	00030000 	andeq	r0, r3, r0
    4d10:	0000118f 	andeq	r1, r0, pc, lsl #3
    4d14:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    4d18:	b50c0000 	strlt	r0, [ip, #-0]
    4d1c:	68000014 	stmdavs	r0, {r2, r4}
    4d20:	d0000006 	andle	r0, r0, r6
    4d24:	00000008 	andeq	r0, r0, r8
    4d28:	25000000 	strcs	r0, [r0, #-0]
    4d2c:	02000036 	andeq	r0, r0, #54	; 0x36
    4d30:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    4d34:	02020000 	andeq	r0, r2, #0
    4d38:	0007a305 	andeq	sl, r7, r5, lsl #6
    4d3c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4d40:	000005ed 	andeq	r0, r0, sp, ror #11
    4d44:	e8050802 	stmda	r5, {r1, fp}
    4d48:	02000005 	andeq	r0, r0, #5
    4d4c:	08dc0801 	ldmeq	ip, {r0, fp}^
    4d50:	02020000 	andeq	r0, r2, #0
    4d54:	0009aa07 	andeq	sl, r9, r7, lsl #20
    4d58:	08f50300 	ldmeq	r5!, {r8, r9}^
    4d5c:	34020000 	strcc	r0, [r2], #-0
    4d60:	00005b19 	andeq	r5, r0, r9, lsl fp
    4d64:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4d68:	00000397 	muleq	r0, r7, r3
    4d6c:	92070802 	andls	r0, r7, #131072	; 0x20000
    4d70:	04000003 	streq	r0, [r0], #-3
    4d74:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4d78:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4d7c:	00039c07 	andeq	r9, r3, r7, lsl #24
    4d80:	82040500 	andhi	r0, r4, #0, 10
    4d84:	06000000 	streq	r0, [r0], -r0
    4d88:	00000077 	andeq	r0, r0, r7, ror r0
    4d8c:	04050107 	streq	r0, [r5], #-263	; 0xfffffef9
    4d90:	0000004f 	andeq	r0, r0, pc, asr #32
    4d94:	0014a808 	andseq	sl, r4, r8, lsl #16
    4d98:	117f0100 	cmnne	pc, r0, lsl #2
    4d9c:	0000004f 	andeq	r0, r0, pc, asr #32
    4da0:	2e080101 	adfcse	f0, f0, f1
    4da4:	01000043 	tsteq	r0, r3, asr #32
    4da8:	004f1180 	subeq	r1, pc, r0, lsl #3
    4dac:	01010000 	mrseq	r0, (UNDEF: 1)
    4db0:	0014f808 	andseq	pc, r4, r8, lsl #16
    4db4:	11810100 	orrne	r0, r1, r0, lsl #2
    4db8:	0000004f 	andeq	r0, r0, pc, asr #32
    4dbc:	f3080101 	vrhadd.u8	d0, d8, d1
    4dc0:	01000014 	tsteq	r0, r4, lsl r0
    4dc4:	004f1182 	subeq	r1, pc, r2, lsl #3
    4dc8:	01010000 	mrseq	r0, (UNDEF: 1)
    4dcc:	0014af08 	andseq	sl, r4, r8, lsl #30
    4dd0:	11830100 	orrne	r0, r3, r0, lsl #2
    4dd4:	0000004f 	andeq	r0, r0, pc, asr #32
    4dd8:	7a080101 	bvc	2051e4 <__ccfg+0x1e523c>
    4ddc:	01000014 	tsteq	r0, r4, lsl r0
    4de0:	004f1184 	subeq	r1, pc, r4, lsl #3
    4de4:	01010000 	mrseq	r0, (UNDEF: 1)
    4de8:	00007d09 	andeq	r7, r0, r9, lsl #26
    4dec:	0000ee00 	andeq	lr, r0, r0, lsl #28
    4df0:	00700a00 	rsbseq	r0, r0, r0, lsl #20
    4df4:	00310000 	eorseq	r0, r1, r0
    4df8:	0000de06 	andeq	sp, r0, r6, lsl #28
    4dfc:	15110b00 	ldrne	r0, [r1, #-2816]	; 0xfffff500
    4e00:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    4e04:	0000ee0f 	andeq	lr, r0, pc, lsl #28
    4e08:	03050100 	movweq	r0, #20736	; 0x5100
    4e0c:	00000000 	andeq	r0, r0, r0
    4e10:	0014ff0c 	andseq	pc, r4, ip, lsl #30
    4e14:	01280100 			; <UNDEFINED> instruction: 0x01280100
    4e18:	1c160101 	ldfnes	f0, [r6], {1}
    4e1c:	1c180000 	ldcne	0, cr0, [r8], {-0}
    4e20:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e24:	00148b0c 	andseq	r8, r4, ip, lsl #22
    4e28:	01160100 	tsteq	r6, r0, lsl #2
    4e2c:	1c140101 	ldfnes	f0, [r4], {1}
    4e30:	1c160000 	ldcne	0, cr0, [r6], {-0}
    4e34:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e38:	00149b0c 	andseq	r9, r4, ip, lsl #22
    4e3c:	01040100 	mrseq	r0, (UNDEF: 20)
    4e40:	1c120101 	ldfnes	f0, [r2], {1}
    4e44:	1c140000 	ldcne	0, cr0, [r4], {-0}
    4e48:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e4c:	1528010d 	strne	r0, [r8, #-269]!	; 0xfffffef3
    4e50:	d2010000 	andle	r0, r1, #0
    4e54:	1c180101 	ldfnes	f0, [r8], {1}
    4e58:	1c5c0000 	mrane	r0, ip, acc0
    4e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e60:	0014820e 	andseq	r8, r4, lr, lsl #4
    4e64:	0fd40100 	svceq	0x00d40100
    4e68:	00000084 	andeq	r0, r0, r4, lsl #1
    4e6c:	00001f25 	andeq	r1, r0, r5, lsr #30
    4e70:	00151e0e 	andseq	r1, r5, lr, lsl #28
    4e74:	1ad40100 	bne	ff50527c <_estack+0xdf50027c>
    4e78:	00000084 	andeq	r0, r0, r4, lsl #1
    4e7c:	00001f43 	andeq	r1, r0, r3, asr #30
    4e80:	05370000 	ldreq	r0, [r7, #-0]!
    4e84:	00030000 	andeq	r0, r3, r0
    4e88:	00001254 	andeq	r1, r0, r4, asr r2
    4e8c:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    4e90:	880c0000 	stmdahi	ip, {}	; <UNPREDICTABLE>
    4e94:	68000015 	stmdavs	r0, {r0, r2, r4}
    4e98:	4c000006 	stcmi	0, cr0, [r0], {6}
    4e9c:	02000037 	andeq	r0, r0, #55	; 0x37
    4ea0:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    4ea4:	02020000 	andeq	r0, r2, #0
    4ea8:	0007a305 	andeq	sl, r7, r5, lsl #6
    4eac:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4eb0:	000005ed 	andeq	r0, r0, sp, ror #11
    4eb4:	e8050802 	stmda	r5, {r1, fp}
    4eb8:	03000005 	movweq	r0, #5
    4ebc:	00000835 	andeq	r0, r0, r5, lsr r8
    4ec0:	45182e01 	ldrmi	r2, [r8, #-3585]	; 0xfffff1ff
    4ec4:	02000000 	andeq	r0, r0, #0
    4ec8:	08dc0801 	ldmeq	ip, {r0, fp}^
    4ecc:	d2030000 	andle	r0, r3, #0
    4ed0:	01000003 	tsteq	r0, r3
    4ed4:	00581931 	subseq	r1, r8, r1, lsr r9
    4ed8:	02020000 	andeq	r0, r2, #0
    4edc:	0009aa07 	andeq	sl, r9, r7, lsl #20
    4ee0:	08f50300 	ldmeq	r5!, {r8, r9}^
    4ee4:	34010000 	strcc	r0, [r1], #-0
    4ee8:	00006b19 	andeq	r6, r0, r9, lsl fp
    4eec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4ef0:	00000397 	muleq	r0, r7, r3
    4ef4:	92070802 	andls	r0, r7, #131072	; 0x20000
    4ef8:	04000003 	streq	r0, [r0], #-3
    4efc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4f00:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4f04:	00039c07 	andeq	r9, r3, r7, lsl #24
    4f08:	02580500 	subseq	r0, r8, #0, 10
    4f0c:	01af092f 			; <UNDEFINED> instruction: 0x01af092f
    4f10:	e2060000 	and	r0, r6, #0
    4f14:	02000016 	andeq	r0, r0, #22
    4f18:	005f1031 	subseq	r1, pc, r1, lsr r0	; <UNPREDICTABLE>
    4f1c:	06000000 	streq	r0, [r0], -r0
    4f20:	000015f7 	strdeq	r1, [r0], -r7
    4f24:	5f103202 	svcpl	0x00103202
    4f28:	04000000 	streq	r0, [r0], #-0
    4f2c:	0015bf06 	andseq	fp, r5, r6, lsl #30
    4f30:	10330200 	eorsne	r0, r3, r0, lsl #4
    4f34:	0000005f 	andeq	r0, r0, pc, asr r0
    4f38:	15720608 	ldrbne	r0, [r2, #-1544]!	; 0xfffff9f8
    4f3c:	34020000 	strcc	r0, [r2], #-0
    4f40:	00005f10 	andeq	r5, r0, r0, lsl pc
    4f44:	31060c00 	tstcc	r6, r0, lsl #24
    4f48:	02000015 	andeq	r0, r0, #21
    4f4c:	005f1035 	subseq	r1, pc, r5, lsr r0	; <UNPREDICTABLE>
    4f50:	06100000 	ldreq	r0, [r0], -r0
    4f54:	00001542 	andeq	r1, r0, r2, asr #10
    4f58:	5f103602 	svcpl	0x00103602
    4f5c:	14000000 	strne	r0, [r0], #-0
    4f60:	00156206 	andseq	r6, r5, r6, lsl #4
    4f64:	10370200 	eorsne	r0, r7, r0, lsl #4
    4f68:	0000005f 	andeq	r0, r0, pc, asr r0
    4f6c:	16870618 	pkhbtne	r0, r7, r8, lsl #12
    4f70:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    4f74:	00005f10 	andeq	r5, r0, r0, lsl pc
    4f78:	d7061c00 	strle	r1, [r6, -r0, lsl #24]
    4f7c:	02000015 	andeq	r0, r0, #21
    4f80:	005f1039 	subseq	r1, pc, r9, lsr r0	; <UNPREDICTABLE>
    4f84:	06200000 	strteq	r0, [r0], -r0
    4f88:	000015e7 	andeq	r1, r0, r7, ror #11
    4f8c:	5f103a02 	svcpl	0x00103a02
    4f90:	24000000 	strcs	r0, [r0], #-0
    4f94:	0016ad06 	andseq	sl, r6, r6, lsl #26
    4f98:	103b0200 	eorsne	r0, fp, r0, lsl #4
    4f9c:	0000005f 	andeq	r0, r0, pc, asr r0
    4fa0:	16bd0628 	ldrtne	r0, [sp], r8, lsr #12
    4fa4:	3c020000 	stccc	0, cr0, [r2], {-0}
    4fa8:	00005f10 	andeq	r5, r0, r0, lsl pc
    4fac:	53062c00 	movwpl	r2, #27648	; 0x6c00
    4fb0:	02000015 	andeq	r0, r0, #21
    4fb4:	005f103d 	subseq	r1, pc, sp, lsr r0	; <UNPREDICTABLE>
    4fb8:	06300000 	ldrteq	r0, [r0], -r0
    4fbc:	0000164d 	andeq	r1, r0, sp, asr #12
    4fc0:	5f103e02 	svcpl	0x00103e02
    4fc4:	34000000 	strcc	r0, [r0], #-0
    4fc8:	0016f206 	andseq	pc, r6, r6, lsl #4
    4fcc:	103f0200 	eorsne	r0, pc, r0, lsl #4
    4fd0:	0000005f 	andeq	r0, r0, pc, asr r0
    4fd4:	16080638 			; <UNDEFINED> instruction: 0x16080638
    4fd8:	40020000 	andmi	r0, r2, r0
    4fdc:	00005f10 	andeq	r5, r0, r0, lsl pc
    4fe0:	1c063c00 	stcne	12, cr3, [r6], {-0}
    4fe4:	02000016 	andeq	r0, r0, #22
    4fe8:	005f1041 	subseq	r1, pc, r1, asr #32
    4fec:	06400000 	strbeq	r0, [r0], -r0
    4ff0:	00001671 	andeq	r1, r0, r1, ror r6
    4ff4:	5f104202 	svcpl	0x00104202
    4ff8:	44000000 	strmi	r0, [r0], #-0
    4ffc:	00165d06 	andseq	r5, r6, r6, lsl #26
    5000:	10430200 	subne	r0, r3, r0, lsl #4
    5004:	0000005f 	andeq	r0, r0, pc, asr r0
    5008:	16980648 	ldrne	r0, [r8], r8, asr #12
    500c:	44020000 	strmi	r0, [r2], #-0
    5010:	00005f10 	andeq	r5, r0, r0, lsl pc
    5014:	cd064c00 	stcgt	12, cr4, [r6, #-0]
    5018:	02000016 	andeq	r0, r0, #22
    501c:	005f1045 	subseq	r1, pc, r5, asr #32
    5020:	06500000 	ldrbeq	r0, [r0], -r0
    5024:	00001637 	andeq	r1, r0, r7, lsr r6
    5028:	5f104602 	svcpl	0x00104602
    502c:	54000000 	strpl	r0, [r0], #-0
    5030:	16300300 	ldrtne	r0, [r0], -r0, lsl #6
    5034:	47020000 	strmi	r0, [r2, -r0]
    5038:	00008703 	andeq	r8, r0, r3, lsl #14
    503c:	01af0700 			; <UNDEFINED> instruction: 0x01af0700
    5040:	81080000 	mrshi	r0, (UNDEF: 8)
    5044:	02000015 	andeq	r0, r0, #21
    5048:	01bb154e 			; <UNDEFINED> instruction: 0x01bb154e
    504c:	01010000 	mrseq	r0, (UNDEF: 1)
    5050:	0023d803 	eoreq	sp, r3, r3, lsl #16
    5054:	12270300 	eorne	r0, r7, #0, 6
    5058:	0000004c 	andeq	r0, r0, ip, asr #32
    505c:	0001ce07 	andeq	ip, r1, r7, lsl #28
    5060:	01ce0900 	biceq	r0, lr, r0, lsl #18
    5064:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    5068:	03000018 	movweq	r0, #24
    506c:	0039122b 	eorseq	r1, r9, fp, lsr #4
    5070:	e4090000 	str	r0, [r9], #-0
    5074:	03000001 	movweq	r0, #1
    5078:	00002429 	andeq	r2, r0, r9, lsr #8
    507c:	5f122c03 	svcpl	0x00122c03
    5080:	07000000 	streq	r0, [r0, -r0]
    5084:	000001f5 	strdeq	r0, [r0], -r5
    5088:	0004fb03 	andeq	pc, r4, r3, lsl #22
    508c:	122d0300 	eorne	r0, sp, #0, 6
    5090:	0000005f 	andeq	r0, r0, pc, asr r0
    5094:	32030805 	andcc	r0, r3, #327680	; 0x50000
    5098:	0002a009 	andeq	sl, r2, r9
    509c:	003e0a00 	eorseq	r0, lr, r0, lsl #20
    50a0:	34030000 	strcc	r0, [r3], #-0
    50a4:	0001e407 	andeq	lr, r1, r7, lsl #8
    50a8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    50ac:	05010a00 	streq	r0, [r1, #-2560]	; 0xfffff600
    50b0:	35030000 	strcc	r0, [r3, #-0]
    50b4:	0001e403 	andeq	lr, r1, r3, lsl #8
    50b8:	06010100 	streq	r0, [r1], -r0, lsl #2
    50bc:	02370a00 	eorseq	r0, r7, #0, 20
    50c0:	36030000 	strcc	r0, [r3], -r0
    50c4:	0001e403 	andeq	lr, r1, r3, lsl #8
    50c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    50cc:	053b0a00 	ldreq	r0, [fp, #-2560]!	; 0xfffff600
    50d0:	37030000 	strcc	r0, [r3, -r0]
    50d4:	0001e403 	andeq	lr, r1, r3, lsl #8
    50d8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    50dc:	07c40a00 	strbeq	r0, [r4, r0, lsl #20]
    50e0:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    50e4:	0001e403 	andeq	lr, r1, r3, lsl #8
    50e8:	00040100 	andeq	r0, r4, r0, lsl #2
    50ec:	05080600 	streq	r0, [r8, #-1536]	; 0xfffffa00
    50f0:	3a030000 	bcc	c50f8 <__ccfg+0xa5150>
    50f4:	0001e407 	andeq	lr, r1, r7, lsl #8
    50f8:	d2060100 	andle	r0, r6, #0, 2
    50fc:	03000006 	movweq	r0, #6
    5100:	01e4033c 	mvneq	r0, ip, lsr r3
    5104:	06020000 	streq	r0, [r2], -r0
    5108:	00000a7c 	andeq	r0, r0, ip, ror sl
    510c:	e4033d03 	str	r3, [r3], #-3331	; 0xfffff2fd
    5110:	03000001 	movweq	r0, #1
    5114:	00070706 	andeq	r0, r7, r6, lsl #14
    5118:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    511c:	000001f5 	strdeq	r0, [r0], -r5
    5120:	89030004 	stmdbhi	r3, {r2}
    5124:	03000002 	movweq	r0, #2
    5128:	02120341 	andseq	r0, r2, #67108865	; 0x4000001
    512c:	a0090000 	andge	r0, r9, r0
    5130:	08000002 	stmdaeq	r0, {r1}
    5134:	00000542 	andeq	r0, r0, r2, asr #10
    5138:	ac1a4303 	ldcge	3, cr4, [sl], {3}
    513c:	01000002 	tsteq	r0, r2
    5140:	01b10801 			; <UNDEFINED> instruction: 0x01b10801
    5144:	45030000 	strmi	r0, [r3, #-0]
    5148:	0002cd0e 	andeq	ip, r2, lr, lsl #26
    514c:	0b010100 	bleq	45554 <__ccfg+0x255ac>
    5150:	0002d304 	andeq	sp, r2, r4, lsl #6
    5154:	08010200 	stmdaeq	r1, {r9}
    5158:	000008e5 	andeq	r0, r0, r5, ror #17
    515c:	0002d307 	andeq	sp, r2, r7, lsl #6
    5160:	02920800 	addseq	r0, r2, #0, 16
    5164:	45030000 	strmi	r0, [r3, #-0]
    5168:	0002cd1e 	andeq	ip, r2, lr, lsl sp
    516c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5170:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    5174:	0000031e 	andeq	r0, r0, lr, lsl r3
    5178:	00060506 	andeq	r0, r6, r6, lsl #10
    517c:	0b900400 	bleq	fe406184 <_estack+0xde401184>
    5180:	0000005f 	andeq	r0, r0, pc, asr r0
    5184:	0bae0600 	bleq	feb8698c <_estack+0xdeb8198c>
    5188:	91040000 	mrsls	r0, (UNDEF: 4)
    518c:	0001ce08 	andeq	ip, r1, r8, lsl #28
    5190:	ea060400 	b	186198 <__ccfg+0x1661f0>
    5194:	04000001 	streq	r0, [r0], #-1
    5198:	01f01092 			; <UNDEFINED> instruction: 0x01f01092
    519c:	00060000 	andeq	r0, r6, r0
    51a0:	00094503 	andeq	r4, r9, r3, lsl #10
    51a4:	03930400 	orrseq	r0, r3, #0, 8
    51a8:	000002ed 	andeq	r0, r0, sp, ror #5
    51ac:	00031e0c 	andeq	r1, r3, ip, lsl #28
    51b0:	00033500 	andeq	r3, r3, r0, lsl #10
    51b4:	08000d00 	stmdaeq	r0, {r8, sl, fp}
    51b8:	00000713 	andeq	r0, r0, r3, lsl r7
    51bc:	2a0f9904 	bcs	3eb5d4 <__ccfg+0x3cb62c>
    51c0:	01000003 	tsteq	r0, r3
    51c4:	05010501 	streq	r0, [r1, #-1281]	; 0xfffffaff
    51c8:	036d0991 	cmneq	sp, #2375680	; 0x244000
    51cc:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
    51d0:	05000007 	streq	r0, [r0, #-7]
    51d4:	01e40793 			; <UNDEFINED> instruction: 0x01e40793
    51d8:	07010000 	streq	r0, [r1, -r0]
    51dc:	7c0a0001 	stcvc	0, cr0, [sl], {1}
    51e0:	05000004 	streq	r0, [r0, #-4]
    51e4:	01e40394 			; <UNDEFINED> instruction: 0x01e40394
    51e8:	01010000 	mrseq	r0, (UNDEF: 1)
    51ec:	03000000 	movweq	r0, #0
    51f0:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    51f4:	43039605 	movwmi	r9, #13829	; 0x3605
    51f8:	07000003 	streq	r0, [r0, -r3]
    51fc:	0000036d 	andeq	r0, r0, sp, ror #6
    5200:	0003790c 	andeq	r7, r3, ip, lsl #18
    5204:	00038900 	andeq	r8, r3, r0, lsl #18
    5208:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    520c:	0000037e 	andeq	r0, r0, lr, ror r3
    5210:	00034b08 	andeq	r4, r3, r8, lsl #22
    5214:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    5218:	00000389 	andeq	r0, r0, r9, lsl #7
    521c:	da0c0101 	ble	305628 <__ccfg+0x2e5680>
    5220:	a7000001 	strge	r0, [r0, -r1]
    5224:	0d000003 	stceq	0, cr0, [r0, #-12]
    5228:	039c0700 	orrseq	r0, ip, #0, 14
    522c:	bb080000 	bllt	205234 <__ccfg+0x1e528c>
    5230:	06000004 	streq	r0, [r0], -r4
    5234:	03a71306 			; <UNDEFINED> instruction: 0x03a71306
    5238:	01010000 	mrseq	r0, (UNDEF: 1)
    523c:	0006b408 	andeq	fp, r6, r8, lsl #8
    5240:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    5244:	000001f5 	strdeq	r0, [r0], -r5
    5248:	fe0e0101 	cdp2	1, 0, cr0, cr14, cr1, {0}
    524c:	07000008 	streq	r0, [r0, -r8]
    5250:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    5254:	0b000003 	bleq	5268 <__exidx_end+0x338>
    5258:	0003db04 	andeq	sp, r3, r4, lsl #22
    525c:	e7010f00 	str	r0, [r1, -r0, lsl #30]
    5260:	10000003 	andne	r0, r0, r3
    5264:	000001ce 	andeq	r0, r0, lr, asr #3
    5268:	02da0c00 	sbcseq	r0, sl, #0, 24
    526c:	03f20000 	mvnseq	r0, #0
    5270:	000d0000 	andeq	r0, sp, r0
    5274:	0003e707 	andeq	lr, r3, r7, lsl #14
    5278:	07671100 	strbeq	r1, [r7, -r0, lsl #2]!
    527c:	7f070000 	svcvc	0x00070000
    5280:	03f21601 	mvnseq	r1, #1048576	; 0x100000
    5284:	01010000 	mrseq	r0, (UNDEF: 1)
    5288:	00032e11 	andeq	r2, r3, r1, lsl lr
    528c:	01820700 	orreq	r0, r2, r0, lsl #14
    5290:	00020114 	andeq	r0, r2, r4, lsl r1
    5294:	11010100 	mrsne	r0, (UNDEF: 17)
    5298:	0000030b 	andeq	r0, r0, fp, lsl #6
    529c:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    52a0:	000001f5 	strdeq	r0, [r0], -r5
    52a4:	08120101 	ldmdaeq	r2, {r0, r8}
    52a8:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    52ac:	0000044b 	andeq	r0, r0, fp, asr #8
    52b0:	00375c13 	eorseq	r5, r7, r3, lsl ip
    52b4:	03070700 	movweq	r0, #30464	; 0x7700
    52b8:	0001ce07 	andeq	ip, r1, r7, lsl #28
    52bc:	06130000 	ldreq	r0, [r3], -r0
    52c0:	0700000b 	streq	r0, [r0, -fp]
    52c4:	06080308 	streq	r0, [r8], -r8, lsl #6
    52c8:	04000002 	streq	r0, [r0], #-2
    52cc:	03c30e00 	biceq	r0, r3, #0, 28
    52d0:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    52d4:	04240303 	strteq	r0, [r4], #-771	; 0xfffffcfd
    52d8:	33140000 	tstcc	r4, #0
    52dc:	30000000 	andcc	r0, r0, r0
    52e0:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    52e4:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    52e8:	001a0713 	andseq	r0, sl, r3, lsl r7
    52ec:	03140700 	tsteq	r4, #0, 14
    52f0:	0001ce08 	andeq	ip, r1, r8, lsl #28
    52f4:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    52f8:	07000008 	streq	r0, [r0, -r8]
    52fc:	ce080315 	mcrgt	3, 0, r0, cr8, cr5, {0}
    5300:	02000001 	andeq	r0, r0, #1
    5304:	0048cc13 	subeq	ip, r8, r3, lsl ip
    5308:	03160700 	tsteq	r6, #0, 14
    530c:	0003c80b 	andeq	ip, r3, fp, lsl #16
    5310:	2f130400 	svccs	0x00130400
    5314:	07000043 	streq	r0, [r0, -r3, asr #32]
    5318:	06090317 			; <UNDEFINED> instruction: 0x06090317
    531c:	08000002 	stmdaeq	r0, {r1}
    5320:	00000713 	andeq	r0, r0, r3, lsl r7
    5324:	03180700 	tsteq	r8, #0, 14
    5328:	0004bb0f 	andeq	fp, r4, pc, lsl #22
    532c:	26130c00 	ldrcs	r0, [r3], -r0, lsl #24
    5330:	07000007 	streq	r0, [r0, -r7]
    5334:	cb150319 	blgt	545fa0 <__ccfg+0x525ff8>
    5338:	2c000004 	stccs	0, cr0, [r0], {4}
    533c:	044b0c00 	strbeq	r0, [fp], #-3072	; 0xfffff400
    5340:	04cb0000 	strbeq	r0, [fp], #0
    5344:	80150000 	andshi	r0, r5, r0
    5348:	03000000 	movweq	r0, #0
    534c:	58040b00 	stmdapl	r4, {r8, r9, fp}
    5350:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    5354:	0000089d 	muleq	r0, sp, r8
    5358:	1b031c07 	blne	cc37c <__ccfg+0xac3d4>
    535c:	00000458 	andeq	r0, r0, r8, asr r4
    5360:	00087d11 	andeq	r7, r8, r1, lsl sp
    5364:	031e0700 	tsteq	lr, #0, 14
    5368:	0004ed14 	andeq	lr, r4, r4, lsl sp
    536c:	0b010100 	bleq	45774 <__ccfg+0x257cc>
    5370:	0004d104 	andeq	sp, r4, r4, lsl #2
    5374:	054e0800 	strbeq	r0, [lr, #-2048]	; 0xfffff800
    5378:	1d080000 	stcne	0, cr0, [r8, #-0]
    537c:	0001ce13 	andeq	ip, r1, r3, lsl lr
    5380:	08010100 	stmdaeq	r1, {r8}
    5384:	0000023e 	andeq	r0, r0, lr, lsr r2
    5388:	df1a1e08 	svcle	0x001a1e08
    538c:	01000001 	tsteq	r0, r1
    5390:	08ea0801 	stmiaeq	sl!, {r0, fp}^
    5394:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    5398:	0001df24 	andeq	sp, r1, r4, lsr #30
    539c:	08010100 	stmdaeq	r1, {r8}
    53a0:	00000906 	andeq	r0, r0, r6, lsl #18
    53a4:	ed142208 	lfm	f2, 4, [r4, #-32]	; 0xffffffe0
    53a8:	01000004 	tsteq	r0, r4
    53ac:	01c01601 	biceq	r1, r0, r1, lsl #12
    53b0:	17090000 	strne	r0, [r9, -r0]
    53b4:	03050e02 	movweq	r0, #24066	; 0x5e02
    53b8:	0001ffa8 	andeq	pc, r1, r8, lsr #31
    53bc:	00050000 	andeq	r0, r5, r0
    53c0:	73000300 	movwvc	r0, #768	; 0x300
    53c4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    53c8:	0000bd01 	andeq	fp, r0, r1, lsl #26
    53cc:	17390c00 	ldrne	r0, [r9, -r0, lsl #24]!
    53d0:	06680000 	strbteq	r0, [r8], -r0
    53d4:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    53d8:	00000000 	andeq	r0, r0, r0
    53dc:	38d50000 	ldmcc	r5, {}^	; <UNPREDICTABLE>
    53e0:	01020000 	mrseq	r0, (UNDEF: 2)
    53e4:	0008de06 	andeq	sp, r8, r6, lsl #28
    53e8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    53ec:	000007a3 	andeq	r0, r0, r3, lsr #15
    53f0:	ed050402 	cfstrs	mvf0, [r5, #-8]
    53f4:	02000005 	andeq	r0, r0, #5
    53f8:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
    53fc:	35030000 	strcc	r0, [r3, #-0]
    5400:	04000008 	streq	r0, [r0], #-8
    5404:	004d182e 	subeq	r1, sp, lr, lsr #16
    5408:	01020000 	mrseq	r0, (UNDEF: 2)
    540c:	0008dc08 	andeq	sp, r8, r8, lsl #24
    5410:	03d20300 	bicseq	r0, r2, #0, 6
    5414:	31040000 	mrscc	r0, (UNDEF: 4)
    5418:	00006019 	andeq	r6, r0, r9, lsl r0
    541c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5420:	000009aa 	andeq	r0, r0, sl, lsr #19
    5424:	0008f503 	andeq	pc, r8, r3, lsl #10
    5428:	19340400 	ldmdbne	r4!, {sl}
    542c:	00000073 	andeq	r0, r0, r3, ror r0
    5430:	97070402 	strls	r0, [r7, -r2, lsl #8]
    5434:	02000003 	andeq	r0, r0, #3
    5438:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
    543c:	04040000 	streq	r0, [r4], #-0
    5440:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5444:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5448:	0000039c 	muleq	r0, ip, r3
    544c:	0023d803 	eoreq	sp, r3, r3, lsl #16
    5450:	12270500 	eorne	r0, r7, #0, 10
    5454:	00000054 	andeq	r0, r0, r4, asr r0
    5458:	00008f05 	andeq	r8, r0, r5, lsl #30
    545c:	008f0600 	addeq	r0, pc, r0, lsl #12
    5460:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    5464:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    5468:	0041122b 	subeq	r1, r1, fp, lsr #4
    546c:	a5060000 	strge	r0, [r6, #-0]
    5470:	05000000 	streq	r0, [r0, #-0]
    5474:	000000a5 	andeq	r0, r0, r5, lsr #1
    5478:	00242903 	eoreq	r2, r4, r3, lsl #18
    547c:	122c0500 	eorne	r0, ip, #0, 10
    5480:	00000067 	andeq	r0, r0, r7, rrx
    5484:	0000bb05 	andeq	fp, r0, r5, lsl #22
    5488:	04fb0300 	ldrbteq	r0, [fp], #768	; 0x300
    548c:	2d050000 	stccs	0, cr0, [r5, #-0]
    5490:	00006712 	andeq	r6, r0, r2, lsl r7
    5494:	08750300 	ldmdaeq	r5!, {r8, r9}^
    5498:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    549c:	0000e410 	andeq	lr, r0, r0, lsl r4
    54a0:	8f040700 	svchi	0x00040700
    54a4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    54a8:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    54ac:	00000178 	andeq	r0, r0, r8, ror r1
    54b0:	00003e09 	andeq	r3, r0, r9, lsl #28
    54b4:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    54b8:	000000a5 	andeq	r0, r0, r5, lsr #1
    54bc:	00070101 	andeq	r0, r7, r1, lsl #2
    54c0:	00050109 	andeq	r0, r5, r9, lsl #2
    54c4:	03350500 	teqeq	r5, #0, 10
    54c8:	000000a5 	andeq	r0, r0, r5, lsr #1
    54cc:	00060101 	andeq	r0, r6, r1, lsl #2
    54d0:	00023709 	andeq	r3, r2, r9, lsl #14
    54d4:	03360500 	teqeq	r6, #0, 10
    54d8:	000000a5 	andeq	r0, r0, r5, lsr #1
    54dc:	00050101 	andeq	r0, r5, r1, lsl #2
    54e0:	00053b09 	andeq	r3, r5, r9, lsl #22
    54e4:	03370500 	teqeq	r7, #0, 10
    54e8:	000000a5 	andeq	r0, r0, r5, lsr #1
    54ec:	00040101 	andeq	r0, r4, r1, lsl #2
    54f0:	0007c409 	andeq	ip, r7, r9, lsl #8
    54f4:	03380500 	teqeq	r8, #0, 10
    54f8:	000000a5 	andeq	r0, r0, r5, lsr #1
    54fc:	00000401 	andeq	r0, r0, r1, lsl #8
    5500:	0005080a 	andeq	r0, r5, sl, lsl #16
    5504:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    5508:	000000a5 	andeq	r0, r0, r5, lsr #1
    550c:	06d20a01 	ldrbeq	r0, [r2], r1, lsl #20
    5510:	3c050000 	stccc	0, cr0, [r5], {-0}
    5514:	0000a503 	andeq	sl, r0, r3, lsl #10
    5518:	7c0a0200 	sfmvc	f0, 4, [sl], {-0}
    551c:	0500000a 	streq	r0, [r0, #-10]
    5520:	00a5033d 	adceq	r0, r5, sp, lsr r3
    5524:	0a030000 	beq	c552c <__ccfg+0xa5584>
    5528:	00000707 	andeq	r0, r0, r7, lsl #14
    552c:	bb083f05 	bllt	215148 <__ccfg+0x1f51a0>
    5530:	04000000 	streq	r0, [r0], #-0
    5534:	02890300 	addeq	r0, r9, #0, 6
    5538:	41050000 	mrsmi	r0, (UNDEF: 5)
    553c:	0000ea03 	andeq	lr, r0, r3, lsl #20
    5540:	01780600 	cmneq	r8, r0, lsl #12
    5544:	420b0000 	andmi	r0, fp, #0
    5548:	05000005 	streq	r0, [r0, #-5]
    554c:	01841a43 	orreq	r1, r4, r3, asr #20
    5550:	01010000 	mrseq	r0, (UNDEF: 1)
    5554:	0001b10b 	andeq	fp, r1, fp, lsl #2
    5558:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    555c:	000001a5 	andeq	r0, r0, r5, lsr #3
    5560:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
    5564:	000001ab 	andeq	r0, r0, fp, lsr #3
    5568:	e5080102 	str	r0, [r8, #-258]	; 0xfffffefe
    556c:	05000008 	streq	r0, [r0, #-8]
    5570:	000001ab 	andeq	r0, r0, fp, lsr #3
    5574:	0002920b 	andeq	r9, r2, fp, lsl #4
    5578:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    557c:	000001a5 	andeq	r0, r0, r5, lsr #3
    5580:	08080101 	stmdaeq	r8, {r0, r8}
    5584:	f6098f06 			; <UNDEFINED> instruction: 0xf6098f06
    5588:	0a000001 	beq	5594 <__exidx_end+0x664>
    558c:	00000605 	andeq	r0, r0, r5, lsl #12
    5590:	670b9006 	strvs	r9, [fp, -r6]
    5594:	00000000 	andeq	r0, r0, r0
    5598:	000bae0a 	andeq	sl, fp, sl, lsl #28
    559c:	08910600 	ldmeq	r1, {r9, sl}
    55a0:	0000008f 	andeq	r0, r0, pc, lsl #1
    55a4:	01ea0a04 	mvneq	r0, r4, lsl #20
    55a8:	92060000 	andls	r0, r6, #0
    55ac:	0000b110 	andeq	fp, r0, r0, lsl r1
    55b0:	03000600 	movweq	r0, #1536	; 0x600
    55b4:	00000945 	andeq	r0, r0, r5, asr #18
    55b8:	c5039306 	strgt	r9, [r3, #-774]	; 0xfffffcfa
    55bc:	0c000001 	stceq	0, cr0, [r0], {1}
    55c0:	000001f6 	strdeq	r0, [r0], -r6
    55c4:	0000020d 	andeq	r0, r0, sp, lsl #4
    55c8:	130b000d 	movwne	r0, #45069	; 0xb00d
    55cc:	06000007 	streq	r0, [r0], -r7
    55d0:	02020f99 	andeq	r0, r2, #612	; 0x264
    55d4:	01010000 	mrseq	r0, (UNDEF: 1)
    55d8:	00b60407 	adcseq	r0, r6, r7, lsl #8
    55dc:	01080000 	mrseq	r0, (UNDEF: 8)
    55e0:	4b099107 	blmi	269a04 <__ccfg+0x249a5c>
    55e4:	09000002 	stmdbeq	r0, {r1}
    55e8:	0000070e 	andeq	r0, r0, lr, lsl #14
    55ec:	a5079307 	strge	r9, [r7, #-775]	; 0xfffffcf9
    55f0:	01000000 	mrseq	r0, (UNDEF: 0)
    55f4:	09000107 	stmdbeq	r0, {r0, r1, r2, r8}
    55f8:	0000047c 	andeq	r0, r0, ip, ror r4
    55fc:	a5039407 	strge	r9, [r3, #-1031]	; 0xfffffbf9
    5600:	01000000 	mrseq	r0, (UNDEF: 0)
    5604:	00000001 	andeq	r0, r0, r1
    5608:	0007d003 	andeq	sp, r7, r3
    560c:	03960700 	orrseq	r0, r6, #0, 14
    5610:	00000221 	andeq	r0, r0, r1, lsr #4
    5614:	00024b05 	andeq	r4, r2, r5, lsl #22
    5618:	02570c00 	subseq	r0, r7, #0, 24
    561c:	02670000 	rsbeq	r0, r7, #0
    5620:	000d0000 	andeq	r0, sp, r0
    5624:	00025c05 	andeq	r5, r2, r5, lsl #24
    5628:	034b0b00 	movteq	r0, #47872	; 0xbb00
    562c:	9c070000 	stcls	0, cr0, [r7], {-0}
    5630:	00026717 	andeq	r6, r2, r7, lsl r7
    5634:	0c010100 	stfeqs	f0, [r1], {-0}
    5638:	0000009b 	muleq	r0, fp, r0
    563c:	00000285 	andeq	r0, r0, r5, lsl #5
    5640:	7a05000d 	bvc	14567c <__ccfg+0x1256d4>
    5644:	0b000002 	bleq	5654 <__exidx_end+0x724>
    5648:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    564c:	85130608 	ldrhi	r0, [r3, #-1544]	; 0xfffff9f8
    5650:	01000002 	tsteq	r0, r2
    5654:	06b40b01 	ldrteq	r0, [r4], r1, lsl #22
    5658:	c3060000 	movwgt	r0, #24576	; 0x6000
    565c:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    5660:	0e010100 	adfeqs	f0, f1, f0
    5664:	000008fe 	strdeq	r0, [r0], -lr
    5668:	10016e09 	andne	r6, r1, r9, lsl #28
    566c:	000002b3 			; <UNDEFINED> instruction: 0x000002b3
    5670:	02b90407 	adcseq	r0, r9, #117440512	; 0x7000000
    5674:	010f0000 	mrseq	r0, CPSR
    5678:	000002c5 	andeq	r0, r0, r5, asr #5
    567c:	00008f10 	andeq	r8, r0, r0, lsl pc
    5680:	b20c0000 	andlt	r0, ip, #0
    5684:	d0000001 	andle	r0, r0, r1
    5688:	0d000002 	stceq	0, cr0, [r0, #-8]
    568c:	02c50500 	sbceq	r0, r5, #0, 10
    5690:	67110000 	ldrvs	r0, [r1, -r0]
    5694:	09000007 	stmdbeq	r0, {r0, r1, r2}
    5698:	d016017f 	andsle	r0, r6, pc, ror r1
    569c:	01000002 	tsteq	r0, r2
    56a0:	032e1101 			; <UNDEFINED> instruction: 0x032e1101
    56a4:	82090000 	andhi	r0, r9, #0
    56a8:	00c71401 	sbceq	r1, r7, r1, lsl #8
    56ac:	01010000 	mrseq	r0, (UNDEF: 1)
    56b0:	00030b11 	andeq	r0, r3, r1, lsl fp
    56b4:	02d80900 	sbcseq	r0, r8, #0, 18
    56b8:	0000bb0e 	andeq	fp, r0, lr, lsl #22
    56bc:	12010100 	andne	r0, r1, #0, 2
    56c0:	03030908 	movweq	r0, #14600	; 0x3908
    56c4:	00032909 	andeq	r2, r3, r9, lsl #18
    56c8:	375c1300 	ldrbcc	r1, [ip, -r0, lsl #6]
    56cc:	07090000 	streq	r0, [r9, -r0]
    56d0:	008f0703 	addeq	r0, pc, r3, lsl #14
    56d4:	13000000 	movwne	r0, #0
    56d8:	00000b06 	andeq	r0, r0, r6, lsl #22
    56dc:	08030809 	stmdaeq	r3, {r0, r3, fp}
    56e0:	000000cc 	andeq	r0, r0, ip, asr #1
    56e4:	c30e0004 	movwgt	r0, #57348	; 0xe004
    56e8:	09000003 	stmdbeq	r0, {r0, r1}
    56ec:	02030309 	andeq	r0, r3, #603979776	; 0x24000000
    56f0:	14000003 	strne	r0, [r0], #-3
    56f4:	00000033 	andeq	r0, r0, r3, lsr r0
    56f8:	030b0930 	movweq	r0, #47408	; 0xb930
    56fc:	00039908 	andeq	r9, r3, r8, lsl #18
    5700:	1a071300 	bne	1ca308 <__ccfg+0x1aa360>
    5704:	14090000 	strne	r0, [r9], #-0
    5708:	008f0803 	addeq	r0, pc, r3, lsl #16
    570c:	13000000 	movwne	r0, #0
    5710:	000008a8 	andeq	r0, r0, r8, lsr #17
    5714:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    5718:	0000008f 	andeq	r0, r0, pc, lsl #1
    571c:	48cc1302 	stmiami	ip, {r1, r8, r9, ip}^
    5720:	16090000 	strne	r0, [r9], -r0
    5724:	02a60b03 	adceq	r0, r6, #3072	; 0xc00
    5728:	13040000 	movwne	r0, #16384	; 0x4000
    572c:	0000432f 	andeq	r4, r0, pc, lsr #6
    5730:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    5734:	000000cc 	andeq	r0, r0, ip, asr #1
    5738:	00071308 	andeq	r1, r7, r8, lsl #6
    573c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    5740:	03990f03 	orrseq	r0, r9, #3, 30
    5744:	130c0000 	movwne	r0, #49152	; 0xc000
    5748:	00000726 	andeq	r0, r0, r6, lsr #14
    574c:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    5750:	000003a9 	andeq	r0, r0, r9, lsr #7
    5754:	290c002c 	stmdbcs	ip, {r2, r3, r5}
    5758:	a9000003 	stmdbge	r0, {r0, r1}
    575c:	15000003 	strne	r0, [r0, #-3]
    5760:	00000088 	andeq	r0, r0, r8, lsl #1
    5764:	04070003 	streq	r0, [r7], #-3
    5768:	00000336 	andeq	r0, r0, r6, lsr r3
    576c:	00089d0e 	andeq	r9, r8, lr, lsl #26
    5770:	031c0900 	tsteq	ip, #0, 18
    5774:	0003361b 	andeq	r3, r3, fp, lsl r6
    5778:	087d1100 	ldmdaeq	sp!, {r8, ip}^
    577c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5780:	03cb1403 	biceq	r1, fp, #50331648	; 0x3000000
    5784:	01010000 	mrseq	r0, (UNDEF: 1)
    5788:	03af0407 			; <UNDEFINED> instruction: 0x03af0407
    578c:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
    5790:	0a000005 	beq	57ac <__exidx_end+0x87c>
    5794:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    5798:	01010000 	mrseq	r0, (UNDEF: 1)
    579c:	00023e0b 	andeq	r3, r2, fp, lsl #28
    57a0:	1a1e0a00 	bne	787fa8 <__ccfg+0x768000>
    57a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    57a8:	ea0b0101 	b	2c5bb4 <__ccfg+0x2a5c0c>
    57ac:	0a000008 	beq	57d4 <__exidx_end+0x8a4>
    57b0:	00a0241e 	adceq	r2, r0, lr, lsl r4
    57b4:	01010000 	mrseq	r0, (UNDEF: 1)
    57b8:	0009060b 	andeq	r0, r9, fp, lsl #12
    57bc:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    57c0:	000003cb 	andeq	r0, r0, fp, asr #7
    57c4:	6c160101 	ldfvss	f0, [r6], {1}
    57c8:	01000002 	tsteq	r0, r2
    57cc:	0305100d 	movweq	r1, #20493	; 0x500d
    57d0:	0000452d 	andeq	r4, r0, sp, lsr #10
    57d4:	17190117 			; <UNDEFINED> instruction: 0x17190117
    57d8:	11010000 	mrsne	r0, (UNDEF: 1)
    57dc:	00000106 	andeq	r0, r0, r6, lsl #2
    57e0:	00000000 	andeq	r0, r0, r0
    57e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    57e8:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    57ec:	00747318 	rsbseq	r7, r4, r8, lsl r3
    57f0:	8f1c1101 	svchi	0x001c1101
    57f4:	61000000 	mrsvs	r0, (UNDEF: 0)
    57f8:	1900001f 	stmdbne	r0, {r0, r1, r2, r3, r4}
    57fc:	00001714 	andeq	r1, r0, r4, lsl r7
    5800:	1b2c1101 	blne	b09c0c <__ccfg+0xae9c64>
    5804:	7f000002 	svcvc	0x00000002
    5808:	1800001f 	stmdane	r0, {r0, r1, r2, r3, r4}
    580c:	006c6176 	rsbeq	r6, ip, r6, ror r1
    5810:	d83a1101 	ldmdale	sl!, {r0, r8, ip}
    5814:	9d000000 	stcls	0, cr0, [r0, #-0]
    5818:	1a00001f 	bne	589c <__exidx_end+0x96c>
    581c:	13010070 	movwne	r0, #4208	; 0x1070
    5820:	0004bb12 	andeq	fp, r4, r2, lsl fp
    5824:	00691b00 	rsbeq	r1, r9, r0, lsl #22
    5828:	8f071401 	svchi	0x00071401
    582c:	bb000000 	bllt	5834 <__exidx_end+0x904>
    5830:	1a00001f 	bne	58b4 <__exidx_end+0x984>
    5834:	15010076 	strne	r0, [r1, #-118]	; 0xffffff8a
    5838:	0000a507 	andeq	sl, r0, r7, lsl #10
    583c:	04d41c00 	ldrbeq	r1, [r4], #3072	; 0xc00
	...
    5848:	1c010000 	stcne	0, cr0, [r1], {-0}
    584c:	04de1c03 	ldrbeq	r1, [lr], #3075	; 0xc03
	...
    5858:	1f010000 	svcne	0x00010000
    585c:	04e81d03 	strbteq	r1, [r8], #3331	; 0xd03
    5860:	00000000 	andeq	r0, r0, r0
    5864:	08f80000 	ldmeq	r8!, {}^	; <UNPREDICTABLE>
    5868:	26010000 	strcs	r0, [r1], -r0
    586c:	04f61e0b 	ldrbteq	r1, [r6], #3595	; 0xe0b
    5870:	1fce0000 	svcne	0x00ce0000
    5874:	00000000 	andeq	r0, r0, r0
    5878:	02570407 	subseq	r0, r7, #117440512	; 0x7000000
    587c:	011f0000 	tsteq	pc, r0
    5880:	00001729 	andeq	r1, r0, r9, lsr #14
    5884:	00060f01 	andeq	r0, r6, r1, lsl #30
    5888:	00000000 	andeq	r0, r0, r0
    588c:	01000000 	mrseq	r0, (UNDEF: 0)
    5890:	0db7209c 	ldceq	0, cr2, [r7, #624]!	; 0x270
    5894:	5b020000 	blpl	8589c <__ccfg+0x658f4>
    5898:	20030135 	andcs	r0, r3, r5, lsr r1
    589c:	00000ad7 	ldrdeq	r0, [r0], -r7
    58a0:	01355002 	teqeq	r5, r2
    58a4:	17072103 	strne	r2, [r7, -r3, lsl #2]
    58a8:	a4030000 	strge	r0, [r3], #-0
    58ac:	00670101 	rsbeq	r0, r7, r1, lsl #2
    58b0:	22030000 	andcs	r0, r3, #0
    58b4:	00000c5a 	andeq	r0, r0, sl, asr ip
    58b8:	6718a403 	ldrvs	sl, [r8, -r3, lsl #8]
    58bc:	00000000 	andeq	r0, r0, r0
    58c0:	0004f600 	andeq	pc, r4, r0, lsl #12
    58c4:	64000300 	strvs	r0, [r0], #-768	; 0xfffffd00
    58c8:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    58cc:	0000bd01 	andeq	fp, r0, r1, lsl #26
    58d0:	17930c00 	ldrne	r0, [r3, r0, lsl #24]
    58d4:	06680000 	strbteq	r0, [r8], -r0
    58d8:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
    58dc:	00000000 	andeq	r0, r0, r0
    58e0:	3b720000 	blcc	1c858e8 <__ccfg+0x1c65940>
    58e4:	01020000 	mrseq	r0, (UNDEF: 2)
    58e8:	0008de06 	andeq	sp, r8, r6, lsl #28
    58ec:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    58f0:	000007a3 	andeq	r0, r0, r3, lsr #15
    58f4:	ed050402 	cfstrs	mvf0, [r5, #-8]
    58f8:	02000005 	andeq	r0, r0, #5
    58fc:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
    5900:	35030000 	strcc	r0, [r3, #-0]
    5904:	03000008 	movweq	r0, #8
    5908:	004d182e 	subeq	r1, sp, lr, lsr #16
    590c:	01020000 	mrseq	r0, (UNDEF: 2)
    5910:	0008dc08 	andeq	sp, r8, r8, lsl #24
    5914:	03d20300 	bicseq	r0, r2, #0, 6
    5918:	31030000 	mrscc	r0, (UNDEF: 3)
    591c:	00006019 	andeq	r6, r0, r9, lsl r0
    5920:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5924:	000009aa 	andeq	r0, r0, sl, lsr #19
    5928:	0008f503 	andeq	pc, r8, r3, lsl #10
    592c:	19340300 	ldmdbne	r4!, {r8, r9}
    5930:	00000073 	andeq	r0, r0, r3, ror r0
    5934:	97070402 	strls	r0, [r7, -r2, lsl #8]
    5938:	02000003 	andeq	r0, r0, #3
    593c:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
    5940:	04040000 	streq	r0, [r4], #-0
    5944:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5948:	07040200 	streq	r0, [r4, -r0, lsl #4]
    594c:	0000039c 	muleq	r0, ip, r3
    5950:	0023d803 	eoreq	sp, r3, r3, lsl #16
    5954:	12270400 	eorne	r0, r7, #0, 8
    5958:	00000054 	andeq	r0, r0, r4, asr r0
    595c:	00008f05 	andeq	r8, r0, r5, lsl #30
    5960:	008f0600 	addeq	r0, pc, r0, lsl #12
    5964:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    5968:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    596c:	0041122b 	subeq	r1, r1, fp, lsr #4
    5970:	a5060000 	strge	r0, [r6, #-0]
    5974:	03000000 	movweq	r0, #0
    5978:	00002429 	andeq	r2, r0, r9, lsr #8
    597c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    5980:	05000000 	streq	r0, [r0, #-0]
    5984:	000000b6 	strheq	r0, [r0], -r6
    5988:	0004fb03 	andeq	pc, r4, r3, lsl #22
    598c:	122d0400 	eorne	r0, sp, #0, 8
    5990:	00000067 	andeq	r0, r0, r7, rrx
    5994:	32040807 	andcc	r0, r4, #458752	; 0x70000
    5998:	00016109 	andeq	r6, r1, r9, lsl #2
    599c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    59a0:	34040000 	strcc	r0, [r4], #-0
    59a4:	0000a507 	andeq	sl, r0, r7, lsl #10
    59a8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    59ac:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    59b0:	35040000 	strcc	r0, [r4, #-0]
    59b4:	0000a503 	andeq	sl, r0, r3, lsl #10
    59b8:	06010100 	streq	r0, [r1], -r0, lsl #2
    59bc:	02370800 	eorseq	r0, r7, #0, 16
    59c0:	36040000 	strcc	r0, [r4], -r0
    59c4:	0000a503 	andeq	sl, r0, r3, lsl #10
    59c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    59cc:	053b0800 	ldreq	r0, [fp, #-2048]!	; 0xfffff800
    59d0:	37040000 	strcc	r0, [r4, -r0]
    59d4:	0000a503 	andeq	sl, r0, r3, lsl #10
    59d8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    59dc:	07c40800 	strbeq	r0, [r4, r0, lsl #16]
    59e0:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    59e4:	0000a503 	andeq	sl, r0, r3, lsl #10
    59e8:	00040100 	andeq	r0, r4, r0, lsl #2
    59ec:	05080900 	streq	r0, [r8, #-2304]	; 0xfffff700
    59f0:	3a040000 	bcc	1059f8 <__ccfg+0xe5a50>
    59f4:	0000a507 	andeq	sl, r0, r7, lsl #10
    59f8:	d2090100 	andle	r0, r9, #0, 2
    59fc:	04000006 	streq	r0, [r0], #-6
    5a00:	00a5033c 	adceq	r0, r5, ip, lsr r3
    5a04:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5a08:	00000a7c 	andeq	r0, r0, ip, ror sl
    5a0c:	a5033d04 	strge	r3, [r3, #-3332]	; 0xfffff2fc
    5a10:	03000000 	movweq	r0, #0
    5a14:	00070709 	andeq	r0, r7, r9, lsl #14
    5a18:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    5a1c:	000000b6 	strheq	r0, [r0], -r6
    5a20:	89030004 	stmdbhi	r3, {r2}
    5a24:	04000002 	streq	r0, [r0], #-2
    5a28:	00d30341 	sbcseq	r0, r3, r1, asr #6
    5a2c:	61060000 	mrsvs	r0, (UNDEF: 6)
    5a30:	0a000001 	beq	5a3c <__exidx_end+0xb0c>
    5a34:	00000542 	andeq	r0, r0, r2, asr #10
    5a38:	6d1a4304 	ldcvs	3, cr4, [sl, #-16]
    5a3c:	01000001 	tsteq	r0, r1
    5a40:	01b10a01 			; <UNDEFINED> instruction: 0x01b10a01
    5a44:	45040000 	strmi	r0, [r4, #-0]
    5a48:	00018e0e 	andeq	r8, r1, lr, lsl #28
    5a4c:	0b010100 	bleq	45e54 <__ccfg+0x25eac>
    5a50:	00019404 	andeq	r9, r1, r4, lsl #8
    5a54:	08010200 	stmdaeq	r1, {r9}
    5a58:	000008e5 	andeq	r0, r0, r5, ror #17
    5a5c:	00019405 	andeq	r9, r1, r5, lsl #8
    5a60:	02920a00 	addseq	r0, r2, #0, 20
    5a64:	45040000 	strmi	r0, [r4, #-0]
    5a68:	00018e1e 	andeq	r8, r1, lr, lsl lr
    5a6c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5a70:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    5a74:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5a78:	00060509 	andeq	r0, r6, r9, lsl #10
    5a7c:	0b900500 	bleq	fe406e84 <_estack+0xde401e84>
    5a80:	00000067 	andeq	r0, r0, r7, rrx
    5a84:	0bae0900 	bleq	feb87e8c <_estack+0xdeb82e8c>
    5a88:	91050000 	mrsls	r0, (UNDEF: 5)
    5a8c:	00008f08 	andeq	r8, r0, r8, lsl #30
    5a90:	ea090400 	b	246a98 <__ccfg+0x226af0>
    5a94:	05000001 	streq	r0, [r0, #-1]
    5a98:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    5a9c:	00060000 	andeq	r0, r6, r0
    5aa0:	00094503 	andeq	r4, r9, r3, lsl #10
    5aa4:	03930500 	orrseq	r0, r3, #0, 10
    5aa8:	000001ae 	andeq	r0, r0, lr, lsr #3
    5aac:	0001df0c 	andeq	sp, r1, ip, lsl #30
    5ab0:	0001f600 	andeq	pc, r1, r0, lsl #12
    5ab4:	0a000d00 	beq	8ebc <__exidx_end+0x3f8c>
    5ab8:	00000713 	andeq	r0, r0, r3, lsl r7
    5abc:	eb0f9905 	bl	3ebed8 <__ccfg+0x3cbf30>
    5ac0:	01000001 	tsteq	r0, r1
    5ac4:	06010701 	streq	r0, [r1], -r1, lsl #14
    5ac8:	022e0991 	eoreq	r0, lr, #2375680	; 0x244000
    5acc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    5ad0:	06000007 	streq	r0, [r0], -r7
    5ad4:	00a50793 	umlaleq	r0, r5, r3, r7
    5ad8:	07010000 	streq	r0, [r1, -r0]
    5adc:	7c080001 	stcvc	0, cr0, [r8], {1}
    5ae0:	06000004 	streq	r0, [r0], -r4
    5ae4:	00a50394 	umlaleq	r0, r5, r4, r3
    5ae8:	01010000 	mrseq	r0, (UNDEF: 1)
    5aec:	03000000 	movweq	r0, #0
    5af0:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5af4:	04039606 	streq	r9, [r3], #-1542	; 0xfffff9fa
    5af8:	05000002 	streq	r0, [r0, #-2]
    5afc:	0000022e 	andeq	r0, r0, lr, lsr #4
    5b00:	00023a0c 	andeq	r3, r2, ip, lsl #20
    5b04:	00024a00 	andeq	r4, r2, r0, lsl #20
    5b08:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5b0c:	0000023f 	andeq	r0, r0, pc, lsr r2
    5b10:	00034b0a 	andeq	r4, r3, sl, lsl #22
    5b14:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    5b18:	0000024a 	andeq	r0, r0, sl, asr #4
    5b1c:	9b0c0101 	blls	305f28 <__ccfg+0x2e5f80>
    5b20:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    5b24:	0d000002 	stceq	0, cr0, [r0, #-8]
    5b28:	025d0500 	subseq	r0, sp, #0, 10
    5b2c:	bb0a0000 	bllt	285b34 <__ccfg+0x265b8c>
    5b30:	07000004 	streq	r0, [r0, -r4]
    5b34:	02681306 	rsbeq	r1, r8, #402653184	; 0x18000000
    5b38:	01010000 	mrseq	r0, (UNDEF: 1)
    5b3c:	0006b40a 	andeq	fp, r6, sl, lsl #8
    5b40:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    5b44:	000000b6 	strheq	r0, [r0], -r6
    5b48:	fe0e0101 	cdp2	1, 0, cr0, cr14, cr1, {0}
    5b4c:	08000008 	stmdaeq	r0, {r3}
    5b50:	9610016e 	ldrls	r0, [r0], -lr, ror #2
    5b54:	0b000002 	bleq	5b64 <__exidx_end+0xc34>
    5b58:	00029c04 	andeq	r9, r2, r4, lsl #24
    5b5c:	a8010f00 	stmdage	r1, {r8, r9, sl, fp}
    5b60:	10000002 	andne	r0, r0, r2
    5b64:	0000008f 	andeq	r0, r0, pc, lsl #1
    5b68:	019b0c00 	orrseq	r0, fp, r0, lsl #24
    5b6c:	02b30000 	adcseq	r0, r3, #0
    5b70:	000d0000 	andeq	r0, sp, r0
    5b74:	0002a805 	andeq	sl, r2, r5, lsl #16
    5b78:	07671100 	strbeq	r1, [r7, -r0, lsl #2]!
    5b7c:	7f080000 	svcvc	0x00080000
    5b80:	02b31601 	adcseq	r1, r3, #1048576	; 0x100000
    5b84:	01010000 	mrseq	r0, (UNDEF: 1)
    5b88:	00032e11 	andeq	r2, r3, r1, lsl lr
    5b8c:	01820800 	orreq	r0, r2, r0, lsl #16
    5b90:	0000c214 	andeq	ip, r0, r4, lsl r2
    5b94:	11010100 	mrsne	r0, (UNDEF: 17)
    5b98:	0000030b 	andeq	r0, r0, fp, lsl #6
    5b9c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    5ba0:	000000b6 	strheq	r0, [r0], -r6
    5ba4:	08120101 	ldmdaeq	r2, {r0, r8}
    5ba8:	09030308 	stmdbeq	r3, {r3, r8, r9}
    5bac:	0000030c 	andeq	r0, r0, ip, lsl #6
    5bb0:	00375c13 	eorseq	r5, r7, r3, lsl ip
    5bb4:	03070800 	movweq	r0, #30720	; 0x7800
    5bb8:	00008f07 	andeq	r8, r0, r7, lsl #30
    5bbc:	06130000 	ldreq	r0, [r3], -r0
    5bc0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    5bc4:	c7080308 	strgt	r0, [r8, -r8, lsl #6]
    5bc8:	04000000 	streq	r0, [r0], #-0
    5bcc:	03c30e00 	biceq	r0, r3, #0, 28
    5bd0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    5bd4:	02e50303 	rsceq	r0, r5, #201326592	; 0xc000000
    5bd8:	33140000 	tstcc	r4, #0
    5bdc:	30000000 	andcc	r0, r0, r0
    5be0:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    5be4:	0000037c 	andeq	r0, r0, ip, ror r3
    5be8:	001a0713 	andseq	r0, sl, r3, lsl r7
    5bec:	03140800 	tsteq	r4, #0, 16
    5bf0:	00008f08 	andeq	r8, r0, r8, lsl #30
    5bf4:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    5bf8:	08000008 	stmdaeq	r0, {r3}
    5bfc:	8f080315 	svchi	0x00080315
    5c00:	02000000 	andeq	r0, r0, #0
    5c04:	0048cc13 	subeq	ip, r8, r3, lsl ip
    5c08:	03160800 	tsteq	r6, #0, 16
    5c0c:	0002890b 	andeq	r8, r2, fp, lsl #18
    5c10:	2f130400 	svccs	0x00130400
    5c14:	08000043 	stmdaeq	r0, {r0, r1, r6}
    5c18:	c7090317 	smladgt	r9, r7, r3, r0
    5c1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5c20:	00000713 	andeq	r0, r0, r3, lsl r7
    5c24:	03180800 	tsteq	r8, #0, 16
    5c28:	00037c0f 	andeq	r7, r3, pc, lsl #24
    5c2c:	26130c00 	ldrcs	r0, [r3], -r0, lsl #24
    5c30:	08000007 	stmdaeq	r0, {r0, r1, r2}
    5c34:	8c150319 	ldchi	3, cr0, [r5], {25}
    5c38:	2c000003 	stccs	0, cr0, [r0], {3}
    5c3c:	030c0c00 	movweq	r0, #52224	; 0xcc00
    5c40:	038c0000 	orreq	r0, ip, #0
    5c44:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5c48:	03000000 	movweq	r0, #0
    5c4c:	19040b00 	stmdbne	r4, {r8, r9, fp}
    5c50:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    5c54:	0000089d 	muleq	r0, sp, r8
    5c58:	1b031c08 	blne	ccc80 <__ccfg+0xaccd8>
    5c5c:	00000319 	andeq	r0, r0, r9, lsl r3
    5c60:	00087d11 	andeq	r7, r8, r1, lsl sp
    5c64:	031e0800 	tsteq	lr, #0, 16
    5c68:	0003ae14 	andeq	sl, r3, r4, lsl lr
    5c6c:	0b010100 	bleq	46074 <__ccfg+0x260cc>
    5c70:	00039204 	andeq	r9, r3, r4, lsl #4
    5c74:	054e0a00 	strbeq	r0, [lr, #-2560]	; 0xfffff600
    5c78:	1d090000 	stcne	0, cr0, [r9, #-0]
    5c7c:	00008f13 	andeq	r8, r0, r3, lsl pc
    5c80:	0a010100 	beq	46088 <__ccfg+0x260e0>
    5c84:	0000023e 	andeq	r0, r0, lr, lsr r2
    5c88:	a01a1e09 	andsge	r1, sl, r9, lsl #28
    5c8c:	01000000 	mrseq	r0, (UNDEF: 0)
    5c90:	08ea0a01 	stmiaeq	sl!, {r0, r9, fp}^
    5c94:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    5c98:	0000a024 	andeq	sl, r0, r4, lsr #32
    5c9c:	0a010100 	beq	460a4 <__ccfg+0x260fc>
    5ca0:	00000906 	andeq	r0, r0, r6, lsl #18
    5ca4:	ae142209 	cdpge	2, 1, cr2, cr4, cr9, {0}
    5ca8:	01000003 	tsteq	r0, r3
    5cac:	17821601 	strne	r1, [r2, r1, lsl #12]
    5cb0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    5cb4:	0002960f 	andeq	r9, r2, pc, lsl #12
    5cb8:	00030500 	andeq	r0, r3, r0, lsl #10
    5cbc:	16000000 	strne	r0, [r0], -r0
    5cc0:	000017cf 	andeq	r1, r0, pc, asr #15
    5cc4:	8f0d0901 	svchi	0x000d0901
    5cc8:	05000000 	streq	r0, [r0, #-0]
    5ccc:	00000003 	andeq	r0, r0, r3
    5cd0:	026d1700 	rsbeq	r1, sp, #0, 14
    5cd4:	0a010000 	beq	45cdc <__ccfg+0x25d34>
    5cd8:	3203050c 	andcc	r0, r3, #12, 10	; 0x3000000
    5cdc:	18000045 	stmdane	r0, {r0, r2, r6}
    5ce0:	0017e401 	andseq	lr, r7, r1, lsl #8
    5ce4:	06580100 	ldrbeq	r0, [r8], -r0, lsl #2
    5ce8:	00000001 	andeq	r0, r0, r1
    5cec:	00000000 	andeq	r0, r0, r0
    5cf0:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    5cf4:	19000004 	stmdbne	r0, {r2}
    5cf8:	00746361 	rsbseq	r6, r4, r1, ror #6
    5cfc:	961d5801 	ldrls	r5, [sp], -r1, lsl #16
    5d00:	e1000002 	tst	r0, r2
    5d04:	0000001f 	andeq	r0, r0, pc, lsl r0
    5d08:	17d70118 	bfine	r0, r8, #2, #22
    5d0c:	1c010000 	stcne	0, cr0, [r1], {-0}
    5d10:	00000101 	andeq	r0, r0, r1, lsl #2
    5d14:	00000000 	andeq	r0, r0, r0
    5d18:	9c010000 	stcls	0, cr0, [r1], {-0}
    5d1c:	000004de 	ldrdeq	r0, [r0], -lr
    5d20:	0008cc1a 	andeq	ip, r8, sl, lsl ip
    5d24:	011c0100 	tsteq	ip, r0, lsl #2
    5d28:	0000008f 	andeq	r0, r0, pc, lsl #1
    5d2c:	0000201d 	andeq	r2, r0, sp, lsl r0
    5d30:	00177d1b 	andseq	r7, r7, fp, lsl sp
    5d34:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5d38:	00000000 	andeq	r0, r0, r0
    5d3c:	00178a1b 	andseq	r8, r7, fp, lsl sl
    5d40:	01300100 	teqeq	r0, r0, lsl #2
    5d44:	00000000 	andeq	r0, r0, r0
    5d48:	0018dc1b 	andseq	sp, r8, fp, lsl ip
    5d4c:	01370100 	teqeq	r7, r0, lsl #2
    5d50:	00000000 	andeq	r0, r0, r0
    5d54:	0004de1c 	andeq	sp, r4, ip, lsl lr
    5d58:	00000000 	andeq	r0, r0, r0
    5d5c:	00093800 	andeq	r3, r9, r0, lsl #16
    5d60:	072b0100 	streq	r0, [fp, -r0, lsl #2]!
    5d64:	000004ad 	andeq	r0, r0, sp, lsr #9
    5d68:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5d6c:	de1c0000 	cdple	0, 1, cr0, cr12, cr0, {0}
    5d70:	00000004 	andeq	r0, r0, r4
    5d74:	60000000 	andvs	r0, r0, r0
    5d78:	01000009 	tsteq	r0, r9
    5d7c:	04c7073e 	strbeq	r0, [r7], #1854	; 0x73e
    5d80:	ec1d0000 	ldc	0, cr0, [sp], {-0}
    5d84:	00000004 	andeq	r0, r0, r4
    5d88:	0004de1e 	andeq	sp, r4, lr, lsl lr
    5d8c:	00000000 	andeq	r0, r0, r0
    5d90:	00097800 	andeq	r7, r9, r0, lsl #16
    5d94:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    5d98:	0004ec1d 	andeq	lr, r4, sp, lsl ip
    5d9c:	1f000000 	svcne	0x00000000
    5da0:	00001707 	andeq	r1, r0, r7, lsl #14
    5da4:	0101a402 	tsteq	r1, r2, lsl #8
    5da8:	00000067 	andeq	r0, r0, r7, rrx
    5dac:	0c5a2003 	mrrceq	0, 0, r2, sl, cr3
    5db0:	a4020000 	strge	r0, [r2], #-0
    5db4:	00006718 	andeq	r6, r0, r8, lsl r7
    5db8:	a7000000 	strge	r0, [r0, -r0]
    5dbc:	0300000a 	movweq	r0, #10
    5dc0:	00172f00 	andseq	r2, r7, r0, lsl #30
    5dc4:	bd010400 	cfstrslt	mvf0, [r1, #-0]
    5dc8:	0c000000 	stceq	0, cr0, [r0], {-0}
    5dcc:	0000186a 	andeq	r1, r0, sl, ror #16
    5dd0:	00000668 	andeq	r0, r0, r8, ror #12
    5dd4:	00000b38 	andeq	r0, r0, r8, lsr fp
    5dd8:	00000000 	andeq	r0, r0, r0
    5ddc:	00003eb2 			; <UNDEFINED> instruction: 0x00003eb2
    5de0:	de060102 	adfles	f0, f6, f2
    5de4:	02000008 	andeq	r0, r0, #8
    5de8:	07a30502 	streq	r0, [r3, r2, lsl #10]!
    5dec:	04020000 	streq	r0, [r2], #-0
    5df0:	0005ed05 	andeq	lr, r5, r5, lsl #26
    5df4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5df8:	000005e8 	andeq	r0, r0, r8, ror #11
    5dfc:	00083503 	andeq	r3, r8, r3, lsl #10
    5e00:	182e0400 	stmdane	lr!, {sl}
    5e04:	0000004d 	andeq	r0, r0, sp, asr #32
    5e08:	dc080102 	stfles	f0, [r8], {2}
    5e0c:	03000008 	movweq	r0, #8
    5e10:	000003d2 	ldrdeq	r0, [r0], -r2
    5e14:	60193104 	andsvs	r3, r9, r4, lsl #2
    5e18:	02000000 	andeq	r0, r0, #0
    5e1c:	09aa0702 	stmibeq	sl!, {r1, r8, r9, sl}
    5e20:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    5e24:	04000008 	streq	r0, [r0], #-8
    5e28:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5e2c:	04020000 	streq	r0, [r2], #-0
    5e30:	00039707 	andeq	r9, r3, r7, lsl #14
    5e34:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5e38:	00000392 	muleq	r0, r2, r3
    5e3c:	69050404 	stmdbvs	r5, {r2, sl}
    5e40:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5e44:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    5e48:	33030000 	movwcc	r0, #12288	; 0x3000
    5e4c:	05000007 	streq	r0, [r0, #-7]
    5e50:	00411226 	subeq	r1, r1, r6, lsr #4
    5e54:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    5e58:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
    5e5c:	00541227 	subseq	r1, r4, r7, lsr #4
    5e60:	9b050000 	blls	145e68 <__ccfg+0x125ec0>
    5e64:	06000000 	streq	r0, [r0], -r0
    5e68:	0000009b 	muleq	r0, fp, r0
    5e6c:	0018f103 	andseq	pc, r8, r3, lsl #2
    5e70:	122b0500 	eorne	r0, fp, #0, 10
    5e74:	00000041 	andeq	r0, r0, r1, asr #32
    5e78:	0000b106 	andeq	fp, r0, r6, lsl #2
    5e7c:	00b10500 	adcseq	r0, r1, r0, lsl #10
    5e80:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    5e84:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    5e88:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5e8c:	c7050000 	strgt	r0, [r5, -r0]
    5e90:	03000000 	movweq	r0, #0
    5e94:	000004fb 	strdeq	r0, [r0], -fp
    5e98:	67122d05 	ldrvs	r2, [r2, -r5, lsl #26]
    5e9c:	07000000 	streq	r0, [r0, -r0]
    5ea0:	09320508 	ldmdbeq	r2!, {r3, r8, sl}
    5ea4:	00000172 	andeq	r0, r0, r2, ror r1
    5ea8:	00003e08 	andeq	r3, r0, r8, lsl #28
    5eac:	07340500 	ldreq	r0, [r4, -r0, lsl #10]!
    5eb0:	000000b1 	strheq	r0, [r0], -r1
    5eb4:	00070101 	andeq	r0, r7, r1, lsl #2
    5eb8:	00050108 	andeq	r0, r5, r8, lsl #2
    5ebc:	03350500 	teqeq	r5, #0, 10
    5ec0:	000000b1 	strheq	r0, [r0], -r1
    5ec4:	00060101 	andeq	r0, r6, r1, lsl #2
    5ec8:	00023708 	andeq	r3, r2, r8, lsl #14
    5ecc:	03360500 	teqeq	r6, #0, 10
    5ed0:	000000b1 	strheq	r0, [r0], -r1
    5ed4:	00050101 	andeq	r0, r5, r1, lsl #2
    5ed8:	00053b08 	andeq	r3, r5, r8, lsl #22
    5edc:	03370500 	teqeq	r7, #0, 10
    5ee0:	000000b1 	strheq	r0, [r0], -r1
    5ee4:	00040101 	andeq	r0, r4, r1, lsl #2
    5ee8:	0007c408 	andeq	ip, r7, r8, lsl #8
    5eec:	03380500 	teqeq	r8, #0, 10
    5ef0:	000000b1 	strheq	r0, [r0], -r1
    5ef4:	00000401 	andeq	r0, r0, r1, lsl #8
    5ef8:	00050809 	andeq	r0, r5, r9, lsl #16
    5efc:	073a0500 	ldreq	r0, [sl, -r0, lsl #10]!
    5f00:	000000b1 	strheq	r0, [r0], -r1
    5f04:	06d20901 	ldrbeq	r0, [r2], r1, lsl #18
    5f08:	3c050000 	stccc	0, cr0, [r5], {-0}
    5f0c:	0000b103 	andeq	fp, r0, r3, lsl #2
    5f10:	7c090200 	sfmvc	f0, 4, [r9], {-0}
    5f14:	0500000a 	streq	r0, [r0, #-10]
    5f18:	00b1033d 	adcseq	r0, r1, sp, lsr r3
    5f1c:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    5f20:	00000707 	andeq	r0, r0, r7, lsl #14
    5f24:	c7083f05 	strgt	r3, [r8, -r5, lsl #30]
    5f28:	04000000 	streq	r0, [r0], #-0
    5f2c:	02890300 	addeq	r0, r9, #0, 6
    5f30:	41050000 	mrsmi	r0, (UNDEF: 5)
    5f34:	0000e403 	andeq	lr, r0, r3, lsl #8
    5f38:	01720600 	cmneq	r2, r0, lsl #12
    5f3c:	420a0000 	andmi	r0, sl, #0
    5f40:	05000005 	streq	r0, [r0, #-5]
    5f44:	017e1a43 	cmneq	lr, r3, asr #20
    5f48:	01010000 	mrseq	r0, (UNDEF: 1)
    5f4c:	0001b10a 	andeq	fp, r1, sl, lsl #2
    5f50:	0e450500 	cdpeq	5, 4, cr0, cr5, cr0, {0}
    5f54:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5f58:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5f5c:	000001a5 	andeq	r0, r0, r5, lsr #3
    5f60:	e5080102 	str	r0, [r8, #-258]	; 0xfffffefe
    5f64:	05000008 	streq	r0, [r0, #-8]
    5f68:	000001a5 	andeq	r0, r0, r5, lsr #3
    5f6c:	0002920a 	andeq	r9, r2, sl, lsl #4
    5f70:	1e450500 	cdpne	5, 4, cr0, cr5, cr0, {0}
    5f74:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    5f78:	08070101 	stmdaeq	r7, {r0, r8}
    5f7c:	f0098f06 			; <UNDEFINED> instruction: 0xf0098f06
    5f80:	09000001 	stmdbeq	r0, {r0}
    5f84:	00000605 	andeq	r0, r0, r5, lsl #12
    5f88:	670b9006 	strvs	r9, [fp, -r6]
    5f8c:	00000000 	andeq	r0, r0, r0
    5f90:	000bae09 	andeq	sl, fp, r9, lsl #28
    5f94:	08910600 	ldmeq	r1, {r9, sl}
    5f98:	0000009b 	muleq	r0, fp, r0
    5f9c:	01ea0904 	mvneq	r0, r4, lsl #18
    5fa0:	92060000 	andls	r0, r6, #0
    5fa4:	0000bd10 	andeq	fp, r0, r0, lsl sp
    5fa8:	03000600 	movweq	r0, #1536	; 0x600
    5fac:	00000945 	andeq	r0, r0, r5, asr #18
    5fb0:	bf039306 	svclt	0x00039306
    5fb4:	0c000001 	stceq	0, cr0, [r0], {1}
    5fb8:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5fbc:	00000207 	andeq	r0, r0, r7, lsl #4
    5fc0:	130a000d 	movwne	r0, #40973	; 0xa00d
    5fc4:	06000007 	streq	r0, [r0], -r7
    5fc8:	01fc0f99 			; <UNDEFINED> instruction: 0x01fc0f99
    5fcc:	01010000 	mrseq	r0, (UNDEF: 1)
    5fd0:	00c2040b 	sbceq	r0, r2, fp, lsl #8
    5fd4:	01070000 	mrseq	r0, (UNDEF: 7)
    5fd8:	45099107 	strmi	r9, [r9, #-263]	; 0xfffffef9
    5fdc:	08000002 	stmdaeq	r0, {r1}
    5fe0:	0000070e 	andeq	r0, r0, lr, lsl #14
    5fe4:	b1079307 	tstlt	r7, r7, lsl #6
    5fe8:	01000000 	mrseq	r0, (UNDEF: 0)
    5fec:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    5ff0:	0000047c 	andeq	r0, r0, ip, ror r4
    5ff4:	b1039407 	tstlt	r3, r7, lsl #8
    5ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    5ffc:	00000001 	andeq	r0, r0, r1
    6000:	0007d003 	andeq	sp, r7, r3
    6004:	03960700 	orrseq	r0, r6, #0, 14
    6008:	0000021b 	andeq	r0, r0, fp, lsl r2
    600c:	00024505 	andeq	r4, r2, r5, lsl #10
    6010:	02510c00 	subseq	r0, r1, #0, 24
    6014:	02610000 	rsbeq	r0, r1, #0
    6018:	000d0000 	andeq	r0, sp, r0
    601c:	00025605 	andeq	r5, r2, r5, lsl #12
    6020:	034b0a00 	movteq	r0, #47616	; 0xba00
    6024:	9c070000 	stcls	0, cr0, [r7], {-0}
    6028:	00026117 	andeq	r6, r2, r7, lsl r1
    602c:	0c010100 	stfeqs	f0, [r1], {-0}
    6030:	000000a7 	andeq	r0, r0, r7, lsr #1
    6034:	0000027f 	andeq	r0, r0, pc, ror r2
    6038:	7405000d 	strvc	r0, [r5], #-13
    603c:	0a000002 	beq	604c <__exidx_end+0x111c>
    6040:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    6044:	7f130608 	svcvc	0x00130608
    6048:	01000002 	tsteq	r0, r2
    604c:	06b40a01 	ldrteq	r0, [r4], r1, lsl #20
    6050:	c3060000 	movwgt	r0, #24576	; 0x6000
    6054:	0000c70e 	andeq	ip, r0, lr, lsl #14
    6058:	0e010100 	adfeqs	f0, f1, f0
    605c:	000008fe 	strdeq	r0, [r0], -lr
    6060:	10016e09 	andne	r6, r1, r9, lsl #28
    6064:	000002ad 	andeq	r0, r0, sp, lsr #5
    6068:	02b3040b 	adcseq	r0, r3, #184549376	; 0xb000000
    606c:	010f0000 	mrseq	r0, CPSR
    6070:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    6074:	00009b10 	andeq	r9, r0, r0, lsl fp
    6078:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    607c:	ca000001 	bgt	6088 <__exidx_end+0x1158>
    6080:	0d000002 	stceq	0, cr0, [r0, #-8]
    6084:	02bf0500 	adcseq	r0, pc, #0, 10
    6088:	67110000 	ldrvs	r0, [r1, -r0]
    608c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    6090:	ca16017f 	bgt	586694 <__ccfg+0x5666ec>
    6094:	01000002 	tsteq	r0, r2
    6098:	032e1101 			; <UNDEFINED> instruction: 0x032e1101
    609c:	82090000 	andhi	r0, r9, #0
    60a0:	00d31401 	sbcseq	r1, r3, r1, lsl #8
    60a4:	01010000 	mrseq	r0, (UNDEF: 1)
    60a8:	00030b11 	andeq	r0, r3, r1, lsl fp
    60ac:	02d80900 	sbcseq	r0, r8, #0, 18
    60b0:	0000c70e 	andeq	ip, r0, lr, lsl #14
    60b4:	12010100 	andne	r0, r1, #0, 2
    60b8:	03030908 	movweq	r0, #14600	; 0x3908
    60bc:	00032309 	andeq	r2, r3, r9, lsl #6
    60c0:	375c1300 	ldrbcc	r1, [ip, -r0, lsl #6]
    60c4:	07090000 	streq	r0, [r9, -r0]
    60c8:	009b0703 	addseq	r0, fp, r3, lsl #14
    60cc:	13000000 	movwne	r0, #0
    60d0:	00000b06 	andeq	r0, r0, r6, lsl #22
    60d4:	08030809 	stmdaeq	r3, {r0, r3, fp}
    60d8:	000000d8 	ldrdeq	r0, [r0], -r8
    60dc:	c30e0004 	movwgt	r0, #57348	; 0xe004
    60e0:	09000003 	stmdbeq	r0, {r0, r1}
    60e4:	fc030309 	stc2	3, cr0, [r3], {9}
    60e8:	14000002 	strne	r0, [r0], #-2
    60ec:	00000033 	andeq	r0, r0, r3, lsr r0
    60f0:	030b0930 	movweq	r0, #47408	; 0xb930
    60f4:	00039308 	andeq	r9, r3, r8, lsl #6
    60f8:	1a071300 	bne	1cad00 <__ccfg+0x1aad58>
    60fc:	14090000 	strne	r0, [r9], #-0
    6100:	009b0803 	addseq	r0, fp, r3, lsl #16
    6104:	13000000 	movwne	r0, #0
    6108:	000008a8 	andeq	r0, r0, r8, lsr #17
    610c:	08031509 	stmdaeq	r3, {r0, r3, r8, sl, ip}
    6110:	0000009b 	muleq	r0, fp, r0
    6114:	48cc1302 	stmiami	ip, {r1, r8, r9, ip}^
    6118:	16090000 	strne	r0, [r9], -r0
    611c:	02a00b03 	adceq	r0, r0, #3072	; 0xc00
    6120:	13040000 	movwne	r0, #16384	; 0x4000
    6124:	0000432f 	andeq	r4, r0, pc, lsr #6
    6128:	09031709 	stmdbeq	r3, {r0, r3, r8, r9, sl, ip}
    612c:	000000d8 	ldrdeq	r0, [r0], -r8
    6130:	00071308 	andeq	r1, r7, r8, lsl #6
    6134:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    6138:	03930f03 	orrseq	r0, r3, #3, 30
    613c:	130c0000 	movwne	r0, #49152	; 0xc000
    6140:	00000726 	andeq	r0, r0, r6, lsr #14
    6144:	15031909 	strne	r1, [r3, #-2313]	; 0xfffff6f7
    6148:	000003a3 	andeq	r0, r0, r3, lsr #7
    614c:	230c002c 	movwcs	r0, #49196	; 0xc02c
    6150:	a3000003 	movwge	r0, #3
    6154:	15000003 	strne	r0, [r0, #-3]
    6158:	00000088 	andeq	r0, r0, r8, lsl #1
    615c:	040b0003 	streq	r0, [fp], #-3
    6160:	00000330 	andeq	r0, r0, r0, lsr r3
    6164:	00089d0e 	andeq	r9, r8, lr, lsl #26
    6168:	031c0900 	tsteq	ip, #0, 18
    616c:	0003301b 	andeq	r3, r3, fp, lsl r0
    6170:	087d1100 	ldmdaeq	sp!, {r8, ip}^
    6174:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    6178:	03c51403 	biceq	r1, r5, #50331648	; 0x3000000
    617c:	01010000 	mrseq	r0, (UNDEF: 1)
    6180:	03a9040b 			; <UNDEFINED> instruction: 0x03a9040b
    6184:	4e0a0000 	cdpmi	0, 0, cr0, cr10, cr0, {0}
    6188:	0a000005 	beq	61a4 <__exidx_end+0x1274>
    618c:	009b131d 	addseq	r1, fp, sp, lsl r3
    6190:	01010000 	mrseq	r0, (UNDEF: 1)
    6194:	00023e0a 	andeq	r3, r2, sl, lsl #28
    6198:	1a1e0a00 	bne	7889a0 <__ccfg+0x7689f8>
    619c:	000000ac 	andeq	r0, r0, ip, lsr #1
    61a0:	ea0a0101 	b	2865ac <__ccfg+0x266604>
    61a4:	0a000008 	beq	61cc <__exidx_end+0x129c>
    61a8:	00ac241e 	adceq	r2, ip, lr, lsl r4
    61ac:	01010000 	mrseq	r0, (UNDEF: 1)
    61b0:	0009060a 	andeq	r0, r9, sl, lsl #12
    61b4:	14220a00 	strtne	r0, [r2], #-2560	; 0xfffff600
    61b8:	000003c5 	andeq	r0, r0, r5, asr #7
    61bc:	82160101 	andshi	r0, r6, #1073741824	; 0x40000000
    61c0:	01000008 	tsteq	r0, r8
    61c4:	00c70f0f 	sbceq	r0, r7, pc, lsl #30
    61c8:	03050000 	movweq	r0, #20480	; 0x5000
    61cc:	00000000 	andeq	r0, r0, r0
    61d0:	00096116 	andeq	r6, r9, r6, lsl r1
    61d4:	150f0100 	strne	r0, [pc, #-256]	; 60dc <__exidx_end+0x11ac>
    61d8:	000000c7 	andeq	r0, r0, r7, asr #1
    61dc:	00000305 	andeq	r0, r0, r5, lsl #6
    61e0:	c8160000 	ldmdagt	r6, {}	; <UNPREDICTABLE>
    61e4:	01000018 	tsteq	r0, r8, lsl r0
    61e8:	02151410 	andseq	r1, r5, #16, 8	; 0x10000000
    61ec:	03050000 	movweq	r0, #20480	; 0x5000
    61f0:	00000000 	andeq	r0, r0, r0
    61f4:	00182d16 	andseq	r2, r8, r6, lsl sp
    61f8:	0d120100 	ldfeqs	f0, [r2, #-0]
    61fc:	000000b1 	strheq	r0, [r0], -r1
    6200:	05b00305 	ldreq	r0, [r0, #773]!	; 0x305
    6204:	bc162000 	ldclt	0, cr2, [r6], {-0}
    6208:	01000018 	tsteq	r0, r8, lsl r0
    620c:	00b10313 	adcseq	r0, r1, r3, lsl r3
    6210:	03050000 	movweq	r0, #20480	; 0x5000
    6214:	200005b1 			; <UNDEFINED> instruction: 0x200005b1
    6218:	00119716 	andseq	r9, r1, r6, lsl r7
    621c:	0d150100 	ldfeqs	f0, [r5, #-0]
    6220:	0000009b 	muleq	r0, fp, r0
    6224:	00000305 	andeq	r0, r0, r5, lsl #6
    6228:	01170000 	tsteq	r7, r0
    622c:	000017f9 	strdeq	r1, [r0], -r9
    6230:	00061303 	andeq	r1, r6, r3, lsl #6
    6234:	00000000 	andeq	r0, r0, r0
    6238:	01000000 	mrseq	r0, (UNDEF: 0)
    623c:	cd01189c 	stcgt	8, cr1, [r1, #-624]	; 0xfffffd90
    6240:	03000018 	movweq	r0, #24
    6244:	c7010708 	strgt	r0, [r1, -r8, lsl #14]
	...
    6250:	01000000 	mrseq	r0, (UNDEF: 0)
    6254:	0004bc9c 	muleq	r4, ip, ip
    6258:	72651900 	rsbvc	r1, r5, #0, 18
    625c:	19080300 	stmdbne	r8, {r8, r9}
    6260:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    6264:	00002051 	andeq	r2, r0, r1, asr r0
    6268:	7572651a 	ldrbvc	r6, [r2, #-1306]!	; 0xfffffae6
    626c:	24080300 	strcs	r0, [r8], #-768	; 0xfffffd00
    6270:	000004c2 	andeq	r0, r0, r2, asr #9
    6274:	0b005101 	bleq	1a680 <__exidx_end+0x15750>
    6278:	00008f04 	andeq	r8, r0, r4, lsl #30
    627c:	c7040b00 	strgt	r0, [r4, -r0, lsl #22]
    6280:	1b000000 	blne	6288 <__exidx_end+0x1358>
    6284:	00185001 	andseq	r5, r8, r1
    6288:	01600100 	cmneq	r0, r0, lsl #2
    628c:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6298:	9c010000 	stcls	0, cr0, [r1], {-0}
    629c:	000004f6 	strdeq	r0, [r0], -r6
    62a0:	0074731c 	rsbseq	r7, r4, ip, lsl r3
    62a4:	14016001 	strne	r6, [r1], #-1
    62a8:	0000009b 	muleq	r0, fp, r0
    62ac:	00002064 	andeq	r2, r0, r4, rrx
    62b0:	47011d00 	strmi	r1, [r1, -r0, lsl #26]
    62b4:	01000018 	tsteq	r0, r8, lsl r0
    62b8:	0006015b 	andeq	r0, r6, fp, asr r1
    62bc:	00000000 	andeq	r0, r0, r0
    62c0:	01000000 	mrseq	r0, (UNDEF: 0)
    62c4:	24011b9c 	strcs	r1, [r1], #-2972	; 0xfffff464
    62c8:	01000018 	tsteq	r0, r8, lsl r0
    62cc:	01060121 	tsteq	r6, r1, lsr #2
    62d0:	0000009b 	muleq	r0, fp, r0
	...
    62dc:	05c09c01 	strbeq	r9, [r0, #3073]	; 0xc01
    62e0:	731c0000 	tstvc	ip, #0
    62e4:	21010074 	tstcs	r1, r4, ror r0
    62e8:	009b1501 	addseq	r1, fp, r1, lsl #10
    62ec:	20770000 	rsbscs	r0, r7, r0
    62f0:	611c0000 	tstvs	ip, r0
    62f4:	01210100 			; <UNDEFINED> instruction: 0x01210100
    62f8:	0000c71f 	andeq	ip, r0, pc, lsl r7
    62fc:	00208a00 	eoreq	r8, r0, r0, lsl #20
    6300:	00731c00 	rsbseq	r1, r3, r0, lsl #24
    6304:	2e012101 	adfcss	f2, f1, f1
    6308:	00000215 	andeq	r0, r0, r5, lsl r2
    630c:	000020a8 	andeq	r2, r0, r8, lsr #1
    6310:	6e656c1c 	mcrvs	12, 3, r6, cr5, cr12, {0}
    6314:	01210100 			; <UNDEFINED> instruction: 0x01210100
    6318:	00009b36 	andeq	r9, r0, r6, lsr fp
    631c:	0020bb00 	eoreq	fp, r0, r0, lsl #22
    6320:	6c621e00 	stclvs	14, cr1, [r2], #-0
    6324:	01230100 			; <UNDEFINED> instruction: 0x01230100
    6328:	00009b07 	andeq	r9, r0, r7, lsl #22
    632c:	0020ce00 	eoreq	ip, r0, r0, lsl #28
    6330:	183b1f00 	ldmdane	fp!, {r8, r9, sl, fp, ip}
    6334:	32010000 	andcc	r0, r1, #0
    6338:	00000101 	andeq	r0, r0, r1, lsl #2
    633c:	f6200000 			; <UNDEFINED> instruction: 0xf6200000
    6340:	00000009 	andeq	r0, r0, r9
    6344:	20000000 	andcs	r0, r0, r0
    6348:	0100000b 	tsteq	r0, fp
    634c:	a3030143 	movwge	r0, #12611	; 0x3143
    6350:	21000005 	tstcs	r0, r5
    6354:	00000a12 	andeq	r0, r0, r2, lsl sl
    6358:	000a0521 	andeq	r0, sl, r1, lsr #10
    635c:	f6220000 			; <UNDEFINED> instruction: 0xf6220000
    6360:	00000009 	andeq	r0, r0, r9
    6364:	00000000 	andeq	r0, r0, r0
    6368:	01000000 	mrseq	r0, (UNDEF: 0)
    636c:	21030150 	tstcs	r3, r0, asr r1
    6370:	00000a12 	andeq	r0, r0, r2, lsl sl
    6374:	000a0521 	andeq	r0, sl, r1, lsr #10
    6378:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    637c:	00181b01 	andseq	r1, r8, r1, lsl #22
    6380:	06cb0100 	strbeq	r0, [fp], r0, lsl #2
    6384:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6390:	819c0100 	orrshi	r0, ip, r0, lsl #2
    6394:	19000006 	stmdbne	r0, {r1, r2}
    6398:	01007473 	tsteq	r0, r3, ror r4
    639c:	009b15cb 	addseq	r1, fp, fp, asr #11
    63a0:	20f70000 	rscscs	r0, r7, r0
    63a4:	58230000 	stmdapl	r3!, {}	; <UNPREDICTABLE>
    63a8:	01000018 	tsteq	r0, r8, lsl r0
    63ac:	00c71fcb 	sbceq	r1, r7, fp, asr #31
    63b0:	21150000 	tstcs	r5, r0
    63b4:	07230000 	streq	r0, [r3, -r0]!
    63b8:	01000018 	tsteq	r0, r8, lsl r0
    63bc:	00c72bcb 	sbceq	r2, r7, fp, asr #23
    63c0:	213e0000 	teqcs	lr, r0
    63c4:	f3240000 	vhadd.u32	d0, d4, d0
    63c8:	01000017 	tsteq	r0, r7, lsl r0
    63cc:	000001e6 	andeq	r0, r0, r6, ror #3
    63d0:	db240000 	blle	9063d8 <__ccfg+0x8e6430>
    63d4:	01000018 	tsteq	r0, r8, lsl r0
    63d8:	000001ea 	andeq	r0, r0, sl, ror #3
    63dc:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    63e0:	00000008 	andeq	r0, r0, r8
    63e4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    63e8:	0100000a 	tsteq	r0, sl
    63ec:	782604fc 	stmdavc	r6!, {r2, r3, r4, r5, r6, r7, sl}
    63f0:	5c000008 	stcpl	0, cr0, [r0], {8}
    63f4:	26000021 	strcs	r0, [r0], -r1, lsr #32
    63f8:	0000086c 	andeq	r0, r0, ip, ror #16
    63fc:	0000216f 	andeq	r2, r0, pc, ror #2
    6400:	0009f627 	andeq	pc, r9, r7, lsr #12
    6404:	00000000 	andeq	r0, r0, r0
    6408:	000b0800 	andeq	r0, fp, r0, lsl #16
    640c:	02430100 	subeq	r0, r3, #0, 2
    6410:	00000664 	andeq	r0, r0, r4, ror #12
    6414:	000a1221 	andeq	r1, sl, r1, lsr #4
    6418:	0a052100 	beq	14e820 <__ccfg+0x12e878>
    641c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6420:	000009f6 	strdeq	r0, [r0], -r6
	...
    642c:	21024801 	tstcs	r2, r1, lsl #16
    6430:	00000a12 	andeq	r0, r0, r2, lsl sl
    6434:	000a0521 	andeq	r0, sl, r1, lsr #10
    6438:	00000000 	andeq	r0, r0, r0
    643c:	185d0118 	ldmdane	sp, {r3, r4, r8}^
    6440:	b0010000 	andlt	r0, r1, r0
    6444:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    6450:	9c010000 	stcls	0, cr0, [r1], {-0}
    6454:	00000704 	andeq	r0, r0, r4, lsl #14
    6458:	01006119 	tsteq	r0, r9, lsl r1
    645c:	00c715b0 	strheq	r1, [r7], #80	; 0x50
    6460:	21820000 	orrcs	r0, r2, r0
    6464:	73190000 	tstvc	r9, #0
    6468:	1eb00100 	frdnes	f0, f0, f0
    646c:	00000704 	andeq	r0, r0, r4, lsl #14
    6470:	000021ab 	andeq	r2, r0, fp, lsr #3
    6474:	6e656c19 	mcrvs	12, 3, r6, cr5, cr9, {0}
    6478:	26b00100 	ldrtcs	r0, [r0], r0, lsl #2
    647c:	0000009b 	muleq	r0, fp, r0
    6480:	000021df 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    6484:	0009f627 	andeq	pc, r9, r7, lsr #12
    6488:	00000000 	andeq	r0, r0, r0
    648c:	000ad800 	andeq	sp, sl, r0, lsl #16
    6490:	02ba0100 	adcseq	r0, sl, #0, 2
    6494:	000006e8 	andeq	r0, r0, r8, ror #13
    6498:	000a1221 	andeq	r1, sl, r1, lsr #4
    649c:	0a052100 	beq	14e8a4 <__ccfg+0x12e8fc>
    64a0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    64a4:	000009f6 	strdeq	r0, [r0], -r6
	...
    64b0:	2102c401 	tstcs	r2, r1, lsl #8
    64b4:	00000a12 	andeq	r0, r0, r2, lsl sl
    64b8:	000a0521 	andeq	r0, sl, r1, lsr #10
    64bc:	0b000000 	bleq	64c4 <__exidx_end+0x1594>
    64c0:	0000b104 	andeq	fp, r0, r4, lsl #2
    64c4:	12011700 	andne	r1, r1, #0, 14
    64c8:	01000018 	tsteq	r0, r8, lsl r0
    64cc:	1dac06a8 	stcne	6, cr0, [ip, #672]!	; 0x2a0
    64d0:	1dc00000 	stclne	0, cr0, [r0]
    64d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    64d8:	18330129 	ldmdane	r3!, {r0, r3, r5, r8}
    64dc:	93010000 	movwls	r0, #4096	; 0x1000
    64e0:	00009b06 	andeq	r9, r0, r6, lsl #22
    64e4:	001d9800 	andseq	r9, sp, r0, lsl #16
    64e8:	001dac00 	andseq	sl, sp, r0, lsl #24
    64ec:	2a9c0100 	bcs	fe7068f4 <_estack+0xde7018f4>
    64f0:	000018d5 	ldrdeq	r1, [r0], -r5
    64f4:	340d8201 	strcc	r8, [sp], #-513	; 0xfffffdff
    64f8:	7400001d 	strvc	r0, [r0], #-29	; 0xffffffe3
    64fc:	0100001d 	tsteq	r0, sp, lsl r0
    6500:	0007969c 	muleq	r7, ip, r6
    6504:	079f2800 	ldreq	r2, [pc, r0, lsl #16]
    6508:	1d4e0000 	stclne	0, cr0, [lr, #-0]
    650c:	1d620000 	stclne	0, cr0, [r2, #-0]
    6510:	8a010000 	bhi	46518 <__ccfg+0x26570>
    6514:	09f62703 	ldmibeq	r6!, {r0, r1, r8, r9, sl, sp}^
    6518:	1d4e0000 	stclne	0, cr0, [lr, #-0]
    651c:	0aa80000 	beq	fea06524 <_estack+0xdea01524>
    6520:	72010000 	andvc	r0, r1, #0
    6524:	00077902 	andeq	r7, r7, r2, lsl #18
    6528:	0a122100 	beq	48e930 <__ccfg+0x46e988>
    652c:	05210000 	streq	r0, [r1, #-0]!
    6530:	0000000a 	andeq	r0, r0, sl
    6534:	0009f625 	andeq	pc, r9, r5, lsr #12
    6538:	001d5a00 	andseq	r5, sp, r0, lsl #20
    653c:	000ac000 	andeq	ip, sl, r0
    6540:	02740100 	rsbseq	r0, r4, #0, 2
    6544:	000a1221 	andeq	r1, sl, r1, lsr #4
    6548:	0a052100 	beq	14e950 <__ccfg+0x12e9a8>
    654c:	00000000 	andeq	r0, r0, r0
    6550:	18b52b00 	ldmne	r5!, {r8, r9, fp, sp}
    6554:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    6558:	c22b010d 	eorgt	r0, fp, #1073741827	; 0x40000003
    655c:	01000018 	tsteq	r0, r8, lsl r0
    6560:	2b010d6d 	blcs	49b1c <__ccfg+0x29b74>
    6564:	000018e1 	andeq	r1, r0, r1, ror #17
    6568:	010d6601 	tsteq	sp, r1, lsl #12
    656c:	0018e72c 	andseq	lr, r8, ip, lsr #14
    6570:	0d580100 	ldfeqe	f0, [r8, #-0]
    6574:	001ce001 	andseq	lr, ip, r1
    6578:	001d3400 	andseq	r3, sp, r0, lsl #8
    657c:	429c0100 	addsmi	r0, ip, #0, 2
    6580:	19000008 	stmdbne	r0, {r3}
    6584:	01007473 	tsteq	r0, r3, ror r4
    6588:	009b1958 	addseq	r1, fp, r8, asr r9
    658c:	21fd0000 	mvnscs	r0, r0
    6590:	64190000 	ldrvs	r0, [r9], #-0
    6594:	01006c65 	tsteq	r0, r5, ror #24
    6598:	009b2258 	addseq	r2, fp, r8, asr r2
    659c:	22100000 	andscs	r0, r0, #0
    65a0:	42250000 	eormi	r0, r5, #0
    65a4:	e8000008 	stmda	r0, {r3}
    65a8:	6000001c 	andvs	r0, r0, ip, lsl r0
    65ac:	0100000a 	tsteq	r0, sl
    65b0:	602d135c 	eorvs	r1, sp, ip, asr r3
    65b4:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
    65b8:	00000853 	andeq	r0, r0, r3, asr r8
    65bc:	00002223 	andeq	r2, r0, r3, lsr #4
    65c0:	0009f627 	andeq	pc, r9, r7, lsr #12
    65c4:	001ce800 	andseq	lr, ip, r0, lsl #16
    65c8:	000a8000 	andeq	r8, sl, r0
    65cc:	02510100 	subseq	r0, r1, #0, 2
    65d0:	00000824 	andeq	r0, r0, r4, lsr #16
    65d4:	000a1221 	andeq	r1, sl, r1, lsr #4
    65d8:	0a052100 	beq	14e9e0 <__ccfg+0x12ea38>
    65dc:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    65e0:	000009f6 	strdeq	r0, [r0], -r6
    65e4:	00001d02 	andeq	r1, r0, r2, lsl #26
    65e8:	00001d06 	andeq	r1, r0, r6, lsl #26
    65ec:	21025401 	tstcs	r2, r1, lsl #8
    65f0:	00000a12 	andeq	r0, r0, r2, lsl sl
    65f4:	000a0521 	andeq	r0, sl, r1, lsr #10
    65f8:	00000000 	andeq	r0, r0, r0
    65fc:	18652f00 	stmdane	r5!, {r8, r9, sl, fp, sp}^
    6600:	4b010000 	blmi	46608 <__ccfg+0x26660>
    6604:	0000b10d 	andeq	fp, r0, sp, lsl #2
    6608:	085e0100 	ldmdaeq	lr, {r8}^
    660c:	72300000 	eorsvc	r0, r0, #0
    6610:	074f0100 	strbeq	r0, [pc, -r0, lsl #2]
    6614:	000000b1 	strheq	r0, [r0], -r1
    6618:	18413100 	stmdane	r1, {r8, ip, sp}^
    661c:	41010000 	mrsmi	r0, (UNDEF: 1)
    6620:	8301010d 	movwhi	r0, #4365	; 0x110d
    6624:	32000008 	andcc	r0, r0, #8
    6628:	00646d63 	rsbeq	r6, r4, r3, ror #26
    662c:	b1194101 	tstlt	r9, r1, lsl #2
    6630:	32000000 	andcc	r0, r0, #0
    6634:	41010061 	tstmi	r1, r1, rrx
    6638:	0000c724 	andeq	ip, r0, r4, lsr #14
    663c:	0c2c0000 	stceq	0, cr0, [ip], #-0
    6640:	01000018 	tsteq	r0, r8, lsl r0
    6644:	c8010d3a 	stmdagt	r1, {r1, r3, r4, r5, r8, sl, fp}
    6648:	e000001c 	and	r0, r0, ip, lsl r0
    664c:	0100001c 	tsteq	r0, ip, lsl r0
    6650:	0008e59c 	muleq	r8, ip, r5
    6654:	6d631900 			; <UNDEFINED> instruction: 0x6d631900
    6658:	3a010064 	bcc	467f0 <__ccfg+0x26848>
    665c:	0000b119 	andeq	fp, r0, r9, lsl r1
    6660:	00223600 	eoreq	r3, r2, r0, lsl #12
    6664:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    6668:	1cc80000 	stclne	0, cr0, [r8], {0}
    666c:	0a480000 	beq	1206674 <__ccfg+0x11e66cc>
    6670:	3c010000 	stccc	0, cr0, [r1], {-0}
    6674:	0008c902 	andeq	ip, r8, r2, lsl #18
    6678:	0a122100 	beq	48ea80 <__ccfg+0x46ead8>
    667c:	05210000 	streq	r0, [r1, #-0]!
    6680:	0000000a 	andeq	r0, r0, sl
    6684:	0009f628 	andeq	pc, r9, r8, lsr #12
    6688:	001cd400 	andseq	sp, ip, r0, lsl #8
    668c:	001cd800 	andseq	sp, ip, r0, lsl #16
    6690:	023e0100 	eorseq	r0, lr, #0, 2
    6694:	000a1221 	andeq	r1, sl, r1, lsr #4
    6698:	0a052100 	beq	14eaa0 <__ccfg+0x12eaf8>
    669c:	00000000 	andeq	r0, r0, r0
    66a0:	0018f62c 	andseq	pc, r8, ip, lsr #12
    66a4:	0d290100 	stfeqs	f0, [r9, #-0]
    66a8:	001c9801 	andseq	r9, ip, r1, lsl #16
    66ac:	001cc800 	andseq	ip, ip, r0, lsl #16
    66b0:	799c0100 	ldmibvc	ip, {r8}
    66b4:	19000009 	stmdbne	r0, {r0, r3}
    66b8:	29010062 	stmdbcs	r1, {r1, r5, r6}
    66bc:	0000b11c 	andeq	fp, r0, ip, lsl r1
    66c0:	00224900 	eoreq	r4, r2, r0, lsl #18
    66c4:	00693000 	rsbeq	r3, r9, r0
    66c8:	81062b01 	tsthi	r6, r1, lsl #22
    66cc:	27000000 	strcs	r0, [r0, -r0]
    66d0:	00000a3d 	andeq	r0, r0, sp, lsr sl
    66d4:	00001ca0 	andeq	r1, r0, r0, lsr #25
    66d8:	00000a10 	andeq	r0, r0, r0, lsl sl
    66dc:	2e033201 	cdpcs	2, 0, cr3, cr3, cr1, {0}
    66e0:	21000009 	tstcs	r0, r9
    66e4:	00000a4c 	andeq	r0, r0, ip, asr #20
    66e8:	0a3d3300 	beq	f532f0 <__ccfg+0xf33348>
    66ec:	1cac0000 	stcne	0, cr0, [ip]
    66f0:	1cb00000 	ldcne	0, cr0, [r0]
    66f4:	2f010000 	svccs	0x00010000
    66f8:	00094804 	andeq	r4, r9, r4, lsl #16
    66fc:	0a4c2100 	beq	130eb04 <__ccfg+0x12eeb5c>
    6700:	33000000 	movwcc	r0, #0
    6704:	00000a20 	andeq	r0, r0, r0, lsr #20
    6708:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
    670c:	00001cb2 			; <UNDEFINED> instruction: 0x00001cb2
    6710:	62043101 	andvs	r3, r4, #1073741824	; 0x40000000
    6714:	21000009 	tstcs	r0, r9
    6718:	00000a2f 	andeq	r0, r0, pc, lsr #20
    671c:	0a202500 	beq	80fb24 <__ccfg+0x7efb7c>
    6720:	1cb80000 	ldcne	0, cr0, [r8]
    6724:	0a300000 	beq	c0672c <__ccfg+0xbe6784>
    6728:	33010000 	movwcc	r0, #4096	; 0x1000
    672c:	0a2f2103 	beq	bceb40 <__ccfg+0xbaeb98>
    6730:	00000000 	andeq	r0, r0, r0
    6734:	0018ed34 	andseq	lr, r8, r4, lsr sp
    6738:	0d190100 	ldfeqs	f0, [r9, #-0]
    673c:	000000b1 	strheq	r0, [r0], -r1
    6740:	00001c64 	andeq	r1, r0, r4, ror #24
    6744:	00001c98 	muleq	r0, r8, ip
    6748:	09f69c01 	ldmibeq	r6!, {r0, sl, fp, ip, pc}^
    674c:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    6750:	061b0100 	ldreq	r0, [fp], -r0, lsl #2
    6754:	00000081 	andeq	r0, r0, r1, lsl #1
    6758:	01006235 	tsteq	r0, r5, lsr r2
    675c:	00b1071c 	adcseq	r0, r1, ip, lsl r7
    6760:	22670000 	rsbcs	r0, r7, #0
    6764:	3d270000 	stccc	0, cr0, [r7, #-0]
    6768:	6800000a 	stmdavs	r0, {r1, r3}
    676c:	b000001c 	andlt	r0, r0, ip, lsl r0
    6770:	01000009 	tsteq	r0, r9
    6774:	09c50322 	stmibeq	r5, {r1, r5, r8, r9}^
    6778:	4c210000 	stcmi	0, cr0, [r1], #-0
    677c:	0000000a 	andeq	r0, r0, sl
    6780:	000a2027 	andeq	r2, sl, r7, lsr #32
    6784:	001c6e00 	andseq	r6, ip, r0, lsl #28
    6788:	0009d800 	andeq	sp, r9, r0, lsl #16
    678c:	03230100 			; <UNDEFINED> instruction: 0x03230100
    6790:	000009df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6794:	000a2f21 	andeq	r2, sl, r1, lsr #30
    6798:	5a250000 	bpl	9467a0 <__ccfg+0x9267f8>
    679c:	7000000a 	andvc	r0, r0, sl
    67a0:	f000001c 			; <UNDEFINED> instruction: 0xf000001c
    67a4:	01000009 	tsteq	r0, r9
    67a8:	6c210720 	stcvs	7, cr0, [r1], #-128	; 0xffffff80
    67ac:	0000000a 	andeq	r0, r0, sl
    67b0:	0a893600 	beq	fe253fb8 <_estack+0xde24efb8>
    67b4:	06020000 	streq	r0, [r2], -r0
    67b8:	03010102 	movweq	r0, #4354	; 0x1102
    67bc:	00000a20 	andeq	r0, r0, r0, lsr #20
    67c0:	000c5a37 	andeq	r5, ip, r7, lsr sl
    67c4:	02060200 	andeq	r0, r6, #0, 4
    67c8:	00006723 	andeq	r6, r0, r3, lsr #14
    67cc:	0f603700 	svceq	0x00603700
    67d0:	06020000 	streq	r0, [r2], -r0
    67d4:	00673702 	rsbeq	r3, r7, r2, lsl #14
    67d8:	36000000 	strcc	r0, [r0], -r0
    67dc:	00000dc5 	andeq	r0, r0, r5, asr #27
    67e0:	01015402 	tsteq	r1, r2, lsl #8
    67e4:	0a3d0301 	beq	f473f0 <__ccfg+0xf27448>
    67e8:	5a370000 	bpl	dc67f0 <__ccfg+0xda6848>
    67ec:	0200000c 	andeq	r0, r0, #12
    67f0:	67190154 			; <UNDEFINED> instruction: 0x67190154
    67f4:	00000000 	andeq	r0, r0, r0
    67f8:	000eca36 	andeq	ip, lr, r6, lsr sl
    67fc:	011e0200 	tsteq	lr, r0, lsl #4
    6800:	5a030101 	bpl	c6c0c <__ccfg+0xa6c64>
    6804:	3700000a 	strcc	r0, [r0, -sl]
    6808:	00000c5a 	andeq	r0, r0, sl, asr ip
    680c:	17011e02 	strne	r1, [r1, -r2, lsl #28]
    6810:	00000067 	andeq	r0, r0, r7, rrx
    6814:	17073800 	strne	r3, [r7, -r0, lsl #16]
    6818:	a4020000 	strge	r0, [r2], #-0
    681c:	00670101 	rsbeq	r0, r7, r1, lsl #2
    6820:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    6824:	3900000a 	stmdbcc	r0, {r1, r3}
    6828:	00000c5a 	andeq	r0, r0, sl, asr ip
    682c:	6718a402 	ldrvs	sl, [r8, -r2, lsl #8]
    6830:	00000000 	andeq	r0, r0, r0
    6834:	0007963a 	andeq	r9, r7, sl, lsr r6
    6838:	001d7400 	andseq	r7, sp, r0, lsl #8
    683c:	001d9800 	andseq	r9, sp, r0, lsl #16
    6840:	289c0100 	ldmcs	ip, {r8}
    6844:	00000796 	muleq	r0, r6, r7
    6848:	00001d7e 	andeq	r1, r0, lr, ror sp
    684c:	00001d92 	muleq	r0, r2, sp
    6850:	3b0d7801 	blcc	36485c <__ccfg+0x3448b4>
    6854:	000007a8 	andeq	r0, r0, r8, lsr #15
    6858:	00001d88 	andeq	r1, r0, r8, lsl #27
    685c:	00001d8e 	andeq	r1, r0, lr, lsl #27
    6860:	00037c01 	andeq	r7, r3, r1, lsl #24
    6864:	04120000 	ldreq	r0, [r2], #-0
    6868:	00030000 	andeq	r0, r3, r0
    686c:	00001ad5 	ldrdeq	r1, [r0], -r5
    6870:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    6874:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    6878:	68000019 	stmdavs	r0, {r0, r3, r4}
    687c:	b8000006 	stmdalt	r0, {r1, r2}
    6880:	0000000b 	andeq	r0, r0, fp
    6884:	e7000000 	str	r0, [r0, -r0]
    6888:	02000047 	andeq	r0, r0, #71	; 0x47
    688c:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    6890:	02020000 	andeq	r0, r2, #0
    6894:	0007a305 	andeq	sl, r7, r5, lsl #6
    6898:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    689c:	000005ed 	andeq	r0, r0, sp, ror #11
    68a0:	e8050802 	stmda	r5, {r1, fp}
    68a4:	03000005 	movweq	r0, #5
    68a8:	00000835 	andeq	r0, r0, r5, lsr r8
    68ac:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    68b0:	02000000 	andeq	r0, r0, #0
    68b4:	08dc0801 	ldmeq	ip, {r0, fp}^
    68b8:	d2030000 	andle	r0, r3, #0
    68bc:	02000003 	andeq	r0, r0, #3
    68c0:	00601931 	rsbeq	r1, r0, r1, lsr r9
    68c4:	02020000 	andeq	r0, r2, #0
    68c8:	0009aa07 	andeq	sl, r9, r7, lsl #20
    68cc:	08f50300 	ldmeq	r5!, {r8, r9}^
    68d0:	34020000 	strcc	r0, [r2], #-0
    68d4:	00007319 	andeq	r7, r0, r9, lsl r3
    68d8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    68dc:	00000397 	muleq	r0, r7, r3
    68e0:	92070802 	andls	r0, r7, #131072	; 0x20000
    68e4:	04000003 	streq	r0, [r0], #-3
    68e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    68ec:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    68f0:	00039c07 	andeq	r9, r3, r7, lsl #24
    68f4:	23d80300 	bicscs	r0, r8, #0, 6
    68f8:	27030000 	strcs	r0, [r3, -r0]
    68fc:	00005412 	andeq	r5, r0, r2, lsl r4
    6900:	008f0500 	addeq	r0, pc, r0, lsl #10
    6904:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    6908:	03000018 	movweq	r0, #24
    690c:	0041122b 	subeq	r1, r1, fp, lsr #4
    6910:	a0060000 	andge	r0, r6, r0
    6914:	03000000 	movweq	r0, #0
    6918:	00002429 	andeq	r2, r0, r9, lsr #8
    691c:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    6920:	05000000 	streq	r0, [r0, #-0]
    6924:	000000b1 	strheq	r0, [r0], -r1
    6928:	0004fb03 	andeq	pc, r4, r3, lsl #22
    692c:	122d0300 	eorne	r0, sp, #0, 6
    6930:	00000067 	andeq	r0, r0, r7, rrx
    6934:	32030807 	andcc	r0, r3, #458752	; 0x70000
    6938:	00015c09 	andeq	r5, r1, r9, lsl #24
    693c:	003e0800 	eorseq	r0, lr, r0, lsl #16
    6940:	34030000 	strcc	r0, [r3], #-0
    6944:	0000a007 	andeq	sl, r0, r7
    6948:	07010100 	streq	r0, [r1, -r0, lsl #2]
    694c:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
    6950:	35030000 	strcc	r0, [r3, #-0]
    6954:	0000a003 	andeq	sl, r0, r3
    6958:	06010100 	streq	r0, [r1], -r0, lsl #2
    695c:	02370800 	eorseq	r0, r7, #0, 16
    6960:	36030000 	strcc	r0, [r3], -r0
    6964:	0000a003 	andeq	sl, r0, r3
    6968:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    696c:	053b0800 	ldreq	r0, [fp, #-2048]!	; 0xfffff800
    6970:	37030000 	strcc	r0, [r3, -r0]
    6974:	0000a003 	andeq	sl, r0, r3
    6978:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    697c:	07c40800 	strbeq	r0, [r4, r0, lsl #16]
    6980:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    6984:	0000a003 	andeq	sl, r0, r3
    6988:	00040100 	andeq	r0, r4, r0, lsl #2
    698c:	05080900 	streq	r0, [r8, #-2304]	; 0xfffff700
    6990:	3a030000 	bcc	c6998 <__ccfg+0xa69f0>
    6994:	0000a007 	andeq	sl, r0, r7
    6998:	d2090100 	andle	r0, r9, #0, 2
    699c:	03000006 	movweq	r0, #6
    69a0:	00a0033c 	adceq	r0, r0, ip, lsr r3
    69a4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    69a8:	00000a7c 	andeq	r0, r0, ip, ror sl
    69ac:	a0033d03 	andge	r3, r3, r3, lsl #26
    69b0:	03000000 	movweq	r0, #0
    69b4:	00070709 	andeq	r0, r7, r9, lsl #14
    69b8:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    69bc:	000000b1 	strheq	r0, [r0], -r1
    69c0:	89030004 	stmdbhi	r3, {r2}
    69c4:	03000002 	movweq	r0, #2
    69c8:	00ce0341 	sbceq	r0, lr, r1, asr #6
    69cc:	5c060000 	stcpl	0, cr0, [r6], {-0}
    69d0:	0a000001 	beq	69dc <__exidx_end+0x1aac>
    69d4:	00000542 	andeq	r0, r0, r2, asr #10
    69d8:	681a4303 	ldmdavs	sl, {r0, r1, r8, r9, lr}
    69dc:	01000001 	tsteq	r0, r1
    69e0:	01b10a01 			; <UNDEFINED> instruction: 0x01b10a01
    69e4:	45030000 	strmi	r0, [r3, #-0]
    69e8:	0001890e 	andeq	r8, r1, lr, lsl #18
    69ec:	0b010100 	bleq	46df4 <__ccfg+0x26e4c>
    69f0:	00018f04 	andeq	r8, r1, r4, lsl #30
    69f4:	08010200 	stmdaeq	r1, {r9}
    69f8:	000008e5 	andeq	r0, r0, r5, ror #17
    69fc:	00018f05 	andeq	r8, r1, r5, lsl #30
    6a00:	02920a00 	addseq	r0, r2, #0, 20
    6a04:	45030000 	strmi	r0, [r3, #-0]
    6a08:	0001891e 	andeq	r8, r1, lr, lsl r9
    6a0c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6a10:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    6a14:	000001da 	ldrdeq	r0, [r0], -sl
    6a18:	00060509 	andeq	r0, r6, r9, lsl #10
    6a1c:	0b900400 	bleq	fe407a24 <_estack+0xde402a24>
    6a20:	00000067 	andeq	r0, r0, r7, rrx
    6a24:	0bae0900 	bleq	feb88e2c <_estack+0xdeb83e2c>
    6a28:	91040000 	mrsls	r0, (UNDEF: 4)
    6a2c:	00008f08 	andeq	r8, r0, r8, lsl #30
    6a30:	ea090400 	b	247a38 <__ccfg+0x227a90>
    6a34:	04000001 	streq	r0, [r0], #-1
    6a38:	00ac1092 	umlaleq	r1, ip, r2, r0
    6a3c:	00060000 	andeq	r0, r6, r0
    6a40:	00094503 	andeq	r4, r9, r3, lsl #10
    6a44:	03930400 	orrseq	r0, r3, #0, 8
    6a48:	000001a9 	andeq	r0, r0, r9, lsr #3
    6a4c:	0001da0c 	andeq	sp, r1, ip, lsl #20
    6a50:	0001f100 	andeq	pc, r1, r0, lsl #2
    6a54:	0a000d00 	beq	9e5c <__exidx_end+0x4f2c>
    6a58:	00000713 	andeq	r0, r0, r3, lsl r7
    6a5c:	e60f9904 	str	r9, [pc], -r4, lsl #18
    6a60:	01000001 	tsteq	r0, r1
    6a64:	05010701 	streq	r0, [r1, #-1793]	; 0xfffff8ff
    6a68:	02290991 	eoreq	r0, r9, #2375680	; 0x244000
    6a6c:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    6a70:	05000007 	streq	r0, [r0, #-7]
    6a74:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    6a78:	07010000 	streq	r0, [r1, -r0]
    6a7c:	7c080001 	stcvc	0, cr0, [r8], {1}
    6a80:	05000004 	streq	r0, [r0, #-4]
    6a84:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    6a88:	01010000 	mrseq	r0, (UNDEF: 1)
    6a8c:	03000000 	movweq	r0, #0
    6a90:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6a94:	ff039605 			; <UNDEFINED> instruction: 0xff039605
    6a98:	05000001 	streq	r0, [r0, #-1]
    6a9c:	00000229 	andeq	r0, r0, r9, lsr #4
    6aa0:	0002350c 	andeq	r3, r2, ip, lsl #10
    6aa4:	00024500 	andeq	r4, r2, r0, lsl #10
    6aa8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6aac:	0000023a 	andeq	r0, r0, sl, lsr r2
    6ab0:	00034b0a 	andeq	r4, r3, sl, lsl #22
    6ab4:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    6ab8:	00000245 	andeq	r0, r0, r5, asr #4
    6abc:	9b0c0101 	blls	306ec8 <__ccfg+0x2e6f20>
    6ac0:	63000000 	movwvs	r0, #0
    6ac4:	0d000002 	stceq	0, cr0, [r0, #-8]
    6ac8:	02580500 	subseq	r0, r8, #0, 10
    6acc:	bb0a0000 	bllt	286ad4 <__ccfg+0x266b2c>
    6ad0:	06000004 	streq	r0, [r0], -r4
    6ad4:	02631306 	rsbeq	r1, r3, #402653184	; 0x18000000
    6ad8:	01010000 	mrseq	r0, (UNDEF: 1)
    6adc:	0006b40a 	andeq	fp, r6, sl, lsl #8
    6ae0:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    6ae4:	000000b1 	strheq	r0, [r0], -r1
    6ae8:	fe0e0101 	cdp2	1, 0, cr0, cr14, cr1, {0}
    6aec:	07000008 	streq	r0, [r0, -r8]
    6af0:	9110016e 	tstls	r0, lr, ror #2
    6af4:	0b000002 	bleq	6b04 <__exidx_end+0x1bd4>
    6af8:	00029704 	andeq	r9, r2, r4, lsl #14
    6afc:	a3010f00 	movwge	r0, #7936	; 0x1f00
    6b00:	10000002 	andne	r0, r0, r2
    6b04:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b08:	01960c00 	orrseq	r0, r6, r0, lsl #24
    6b0c:	02ae0000 	adceq	r0, lr, #0
    6b10:	000d0000 	andeq	r0, sp, r0
    6b14:	0002a305 	andeq	sl, r2, r5, lsl #6
    6b18:	07671100 	strbeq	r1, [r7, -r0, lsl #2]!
    6b1c:	7f070000 	svcvc	0x00070000
    6b20:	02ae1601 	adceq	r1, lr, #1048576	; 0x100000
    6b24:	01010000 	mrseq	r0, (UNDEF: 1)
    6b28:	00032e11 	andeq	r2, r3, r1, lsl lr
    6b2c:	01820700 	orreq	r0, r2, r0, lsl #14
    6b30:	0000bd14 	andeq	fp, r0, r4, lsl sp
    6b34:	11010100 	mrsne	r0, (UNDEF: 17)
    6b38:	0000030b 	andeq	r0, r0, fp, lsl #6
    6b3c:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    6b40:	000000b1 	strheq	r0, [r0], -r1
    6b44:	08120101 	ldmdaeq	r2, {r0, r8}
    6b48:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    6b4c:	00000307 	andeq	r0, r0, r7, lsl #6
    6b50:	00375c13 	eorseq	r5, r7, r3, lsl ip
    6b54:	03070700 	movweq	r0, #30464	; 0x7700
    6b58:	00008f07 	andeq	r8, r0, r7, lsl #30
    6b5c:	06130000 	ldreq	r0, [r3], -r0
    6b60:	0700000b 	streq	r0, [r0, -fp]
    6b64:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    6b68:	04000000 	streq	r0, [r0], #-0
    6b6c:	03c30e00 	biceq	r0, r3, #0, 28
    6b70:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    6b74:	02e00303 	rsceq	r0, r0, #201326592	; 0xc000000
    6b78:	33140000 	tstcc	r4, #0
    6b7c:	30000000 	andcc	r0, r0, r0
    6b80:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    6b84:	00000377 	andeq	r0, r0, r7, ror r3
    6b88:	001a0713 	andseq	r0, sl, r3, lsl r7
    6b8c:	03140700 	tsteq	r4, #0, 14
    6b90:	00008f08 	andeq	r8, r0, r8, lsl #30
    6b94:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    6b98:	07000008 	streq	r0, [r0, -r8]
    6b9c:	8f080315 	svchi	0x00080315
    6ba0:	02000000 	andeq	r0, r0, #0
    6ba4:	0048cc13 	subeq	ip, r8, r3, lsl ip
    6ba8:	03160700 	tsteq	r6, #0, 14
    6bac:	0002840b 	andeq	r8, r2, fp, lsl #8
    6bb0:	2f130400 	svccs	0x00130400
    6bb4:	07000043 	streq	r0, [r0, -r3, asr #32]
    6bb8:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    6bbc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6bc0:	00000713 	andeq	r0, r0, r3, lsl r7
    6bc4:	03180700 	tsteq	r8, #0, 14
    6bc8:	0003770f 	andeq	r7, r3, pc, lsl #14
    6bcc:	26130c00 	ldrcs	r0, [r3], -r0, lsl #24
    6bd0:	07000007 	streq	r0, [r0, -r7]
    6bd4:	87150319 			; <UNDEFINED> instruction: 0x87150319
    6bd8:	2c000003 	stccs	0, cr0, [r0], {3}
    6bdc:	03070c00 	movweq	r0, #31744	; 0x7c00
    6be0:	03870000 	orreq	r0, r7, #0
    6be4:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    6be8:	03000000 	movweq	r0, #0
    6bec:	14040b00 	strne	r0, [r4], #-2816	; 0xfffff500
    6bf0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    6bf4:	0000089d 	muleq	r0, sp, r8
    6bf8:	1b031c07 	blne	cdc1c <__ccfg+0xadc74>
    6bfc:	00000314 	andeq	r0, r0, r4, lsl r3
    6c00:	00087d11 	andeq	r7, r8, r1, lsl sp
    6c04:	031e0700 	tsteq	lr, #0, 14
    6c08:	0003a914 	andeq	sl, r3, r4, lsl r9
    6c0c:	0b010100 	bleq	47014 <__ccfg+0x2706c>
    6c10:	00038d04 	andeq	r8, r3, r4, lsl #26
    6c14:	18ff0a00 	ldmne	pc!, {r9, fp}^	; <UNPREDICTABLE>
    6c18:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6c1c:	0001890e 	andeq	r8, r1, lr, lsl #18
    6c20:	16010100 	strne	r0, [r1], -r0, lsl #2
    6c24:	00194801 	andseq	r4, r9, r1, lsl #16
    6c28:	050d0100 	streq	r0, [sp, #-256]	; 0xffffff00
    6c2c:	00008101 	andeq	r8, r0, r1, lsl #2
    6c30:	001dc000 	andseq	ip, sp, r0
    6c34:	001e3800 	andseq	r3, lr, r0, lsl #16
    6c38:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    6c3c:	01007473 	tsteq	r0, r3, ror r4
    6c40:	008f120d 	addeq	r1, pc, sp, lsl #4
    6c44:	22850000 	addcs	r0, r5, #0
    6c48:	62170000 	andsvs	r0, r7, #0
    6c4c:	01006675 	tsteq	r0, r5, ror r6
    6c50:	01891c0d 	orreq	r1, r9, sp, lsl #24
    6c54:	22a30000 	adccs	r0, r3, #0
    6c58:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    6c5c:	01006e65 	tsteq	r0, r5, ror #28
    6c60:	0081250d 	addeq	r2, r1, sp, lsl #10
    6c64:	22f80000 	rscscs	r0, r8, #0
    6c68:	e2180000 	ands	r0, r8, #0
    6c6c:	01000020 	tsteq	r0, r0, lsr #32
    6c70:	00810611 	addeq	r0, r1, r1, lsl r6
    6c74:	234d0000 	movtcs	r0, #53248	; 0xd000
    6c78:	00000000 	andeq	r0, r0, r0
    6c7c:	0000044c 	andeq	r0, r0, ip, asr #8
    6c80:	1c240003 	stcne	0, cr0, [r4], #-12
    6c84:	01040000 	mrseq	r0, (UNDEF: 4)
    6c88:	000000bd 	strheq	r0, [r0], -sp
    6c8c:	0019580c 	andseq	r5, r9, ip, lsl #16
    6c90:	00066800 	andeq	r6, r6, r0, lsl #16
    6c94:	000bc800 	andeq	ip, fp, r0, lsl #16
    6c98:	00000000 	andeq	r0, r0, r0
    6c9c:	0049ac00 	subeq	sl, r9, r0, lsl #24
    6ca0:	06010200 	streq	r0, [r1], -r0, lsl #4
    6ca4:	000008de 	ldrdeq	r0, [r0], -lr
    6ca8:	a3050202 	movwge	r0, #20994	; 0x5202
    6cac:	02000007 	andeq	r0, r0, #7
    6cb0:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    6cb4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6cb8:	0005e805 	andeq	lr, r5, r5, lsl #16
    6cbc:	08350300 	ldmdaeq	r5!, {r8, r9}
    6cc0:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6cc4:	00004d18 	andeq	r4, r0, r8, lsl sp
    6cc8:	08010200 	stmdaeq	r1, {r9}
    6ccc:	000008dc 	ldrdeq	r0, [r0], -ip
    6cd0:	0003d203 	andeq	sp, r3, r3, lsl #4
    6cd4:	19310200 	ldmdbne	r1!, {r9}
    6cd8:	00000060 	andeq	r0, r0, r0, rrx
    6cdc:	aa070202 	bge	1c74ec <__ccfg+0x1a7544>
    6ce0:	03000009 	movweq	r0, #9
    6ce4:	000008f5 	strdeq	r0, [r0], -r5
    6ce8:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6cec:	02000000 	andeq	r0, r0, #0
    6cf0:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
    6cf4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6cf8:	00039207 	andeq	r9, r3, r7, lsl #4
    6cfc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6d00:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6d04:	9c070402 	cfstrsls	mvf0, [r7], {2}
    6d08:	03000003 	movweq	r0, #3
    6d0c:	0000041e 	andeq	r0, r0, lr, lsl r4
    6d10:	9b1b2803 	blls	6d0d24 <__ccfg+0x6b0d7c>
    6d14:	05000000 	streq	r0, [r0, #-0]
    6d18:	00000865 	andeq	r0, r0, r5, ror #16
    6d1c:	b3000904 	movwlt	r0, #2308	; 0x904
    6d20:	06000000 	streq	r0, [r0], -r0
    6d24:	0000094c 	andeq	r0, r0, ip, asr #18
    6d28:	000000b3 	strheq	r0, [r0], -r3
    6d2c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    6d30:	08670304 	stmdaeq	r7!, {r2, r8, r9}^
    6d34:	63030000 	movwvs	r0, #12288	; 0x3000
    6d38:	00008f18 	andeq	r8, r0, r8, lsl pc
    6d3c:	23d80300 	bicscs	r0, r8, #0, 6
    6d40:	27040000 	strcs	r0, [r4, -r0]
    6d44:	00005412 	andeq	r5, r0, r2, lsl r4
    6d48:	00c10800 	sbceq	r0, r1, r0, lsl #16
    6d4c:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    6d50:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    6d54:	0041122b 	subeq	r1, r1, fp, lsr #4
    6d58:	d2090000 	andle	r0, r9, #0
    6d5c:	03000000 	movweq	r0, #0
    6d60:	00002429 	andeq	r2, r0, r9, lsr #8
    6d64:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    6d68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6d6c:	000000e3 	andeq	r0, r0, r3, ror #1
    6d70:	0004fb03 	andeq	pc, r4, r3, lsl #22
    6d74:	122d0400 	eorne	r0, sp, #0, 8
    6d78:	00000067 	andeq	r0, r0, r7, rrx
    6d7c:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    6d80:	00018e09 	andeq	r8, r1, r9, lsl #28
    6d84:	003e0b00 	eorseq	r0, lr, r0, lsl #22
    6d88:	34040000 	strcc	r0, [r4], #-0
    6d8c:	0000d207 	andeq	sp, r0, r7, lsl #4
    6d90:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6d94:	05010b00 	streq	r0, [r1, #-2816]	; 0xfffff500
    6d98:	35040000 	strcc	r0, [r4, #-0]
    6d9c:	0000d203 	andeq	sp, r0, r3, lsl #4
    6da0:	06010100 	streq	r0, [r1], -r0, lsl #2
    6da4:	02370b00 	eorseq	r0, r7, #0, 22
    6da8:	36040000 	strcc	r0, [r4], -r0
    6dac:	0000d203 	andeq	sp, r0, r3, lsl #4
    6db0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6db4:	053b0b00 	ldreq	r0, [fp, #-2816]!	; 0xfffff500
    6db8:	37040000 	strcc	r0, [r4, -r0]
    6dbc:	0000d203 	andeq	sp, r0, r3, lsl #4
    6dc0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6dc4:	07c40b00 	strbeq	r0, [r4, r0, lsl #22]
    6dc8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    6dcc:	0000d203 	andeq	sp, r0, r3, lsl #4
    6dd0:	00040100 	andeq	r0, r4, r0, lsl #2
    6dd4:	05080c00 	streq	r0, [r8, #-3072]	; 0xfffff400
    6dd8:	3a040000 	bcc	106de0 <__ccfg+0xe6e38>
    6ddc:	0000d207 	andeq	sp, r0, r7, lsl #4
    6de0:	d20c0100 	andle	r0, ip, #0, 2
    6de4:	04000006 	streq	r0, [r0], #-6
    6de8:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    6dec:	0c020000 	stceq	0, cr0, [r2], {-0}
    6df0:	00000a7c 	andeq	r0, r0, ip, ror sl
    6df4:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    6df8:	03000000 	movweq	r0, #0
    6dfc:	0007070c 	andeq	r0, r7, ip, lsl #14
    6e00:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    6e04:	000000e3 	andeq	r0, r0, r3, ror #1
    6e08:	89030004 	stmdbhi	r3, {r2}
    6e0c:	04000002 	streq	r0, [r0], #-2
    6e10:	01000341 	tsteq	r0, r1, asr #6
    6e14:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    6e18:	0d000001 	stceq	0, cr0, [r0, #-4]
    6e1c:	00000542 	andeq	r0, r0, r2, asr #10
    6e20:	9a1a4304 	bls	697a38 <__ccfg+0x677a90>
    6e24:	01000001 	tsteq	r0, r1
    6e28:	01b10d01 			; <UNDEFINED> instruction: 0x01b10d01
    6e2c:	45040000 	strmi	r0, [r4, #-0]
    6e30:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    6e34:	0e010100 	adfeqs	f0, f1, f0
    6e38:	0001c104 	andeq	ip, r1, r4, lsl #2
    6e3c:	08010200 	stmdaeq	r1, {r9}
    6e40:	000008e5 	andeq	r0, r0, r5, ror #17
    6e44:	0001c108 	andeq	ip, r1, r8, lsl #2
    6e48:	02920d00 	addseq	r0, r2, #0, 26
    6e4c:	45040000 	strmi	r0, [r4, #-0]
    6e50:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    6e54:	0a010100 	beq	4725c <__ccfg+0x272b4>
    6e58:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    6e5c:	0000020c 	andeq	r0, r0, ip, lsl #4
    6e60:	0006050c 	andeq	r0, r6, ip, lsl #10
    6e64:	0b900500 	bleq	fe40826c <_estack+0xde40326c>
    6e68:	00000067 	andeq	r0, r0, r7, rrx
    6e6c:	0bae0c00 	bleq	feb89e74 <_estack+0xdeb84e74>
    6e70:	91050000 	mrsls	r0, (UNDEF: 5)
    6e74:	0000c108 	andeq	ip, r0, r8, lsl #2
    6e78:	ea0c0400 	b	307e80 <__ccfg+0x2e7ed8>
    6e7c:	05000001 	streq	r0, [r0, #-1]
    6e80:	00de1092 	smullseq	r1, lr, r2, r0
    6e84:	00060000 	andeq	r0, r6, r0
    6e88:	00094503 	andeq	r4, r9, r3, lsl #10
    6e8c:	03930500 	orrseq	r0, r3, #0, 10
    6e90:	000001db 	ldrdeq	r0, [r0], -fp
    6e94:	00020c0f 	andeq	r0, r2, pc, lsl #24
    6e98:	00022300 	andeq	r2, r2, r0, lsl #6
    6e9c:	0d001000 	stceq	0, cr1, [r0, #-0]
    6ea0:	00000713 	andeq	r0, r0, r3, lsl r7
    6ea4:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    6ea8:	01000002 	tsteq	r0, r2
    6eac:	06010a01 	streq	r0, [r1], -r1, lsl #20
    6eb0:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    6eb4:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    6eb8:	06000007 	streq	r0, [r0], -r7
    6ebc:	00d20793 	smullseq	r0, r2, r3, r7
    6ec0:	07010000 	streq	r0, [r1, -r0]
    6ec4:	7c0b0001 	stcvc	0, cr0, [fp], {1}
    6ec8:	06000004 	streq	r0, [r0], -r4
    6ecc:	00d20394 	smullseq	r0, r2, r4, r3
    6ed0:	01010000 	mrseq	r0, (UNDEF: 1)
    6ed4:	03000000 	movweq	r0, #0
    6ed8:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6edc:	31039606 	tstcc	r3, r6, lsl #12
    6ee0:	08000002 	stmdaeq	r0, {r1}
    6ee4:	0000025b 	andeq	r0, r0, fp, asr r2
    6ee8:	0002670f 	andeq	r6, r2, pc, lsl #14
    6eec:	00027700 	andeq	r7, r2, r0, lsl #14
    6ef0:	08001000 	stmdaeq	r0, {ip}
    6ef4:	0000026c 	andeq	r0, r0, ip, ror #4
    6ef8:	00034b0d 	andeq	r4, r3, sp, lsl #22
    6efc:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    6f00:	00000277 	andeq	r0, r0, r7, ror r2
    6f04:	cd0f0101 	stfgts	f0, [pc, #-4]	; 6f08 <__exidx_end+0x1fd8>
    6f08:	95000000 	strls	r0, [r0, #-0]
    6f0c:	10000002 	andne	r0, r0, r2
    6f10:	028a0800 	addeq	r0, sl, #0, 16
    6f14:	bb0d0000 	bllt	346f1c <__ccfg+0x326f74>
    6f18:	07000004 	streq	r0, [r0, -r4]
    6f1c:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    6f20:	01010000 	mrseq	r0, (UNDEF: 1)
    6f24:	0006b40d 	andeq	fp, r6, sp, lsl #8
    6f28:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    6f2c:	000000e3 	andeq	r0, r0, r3, ror #1
    6f30:	fe110101 	cdp2	1, 1, cr0, cr1, cr1, {0}
    6f34:	08000008 	stmdaeq	r0, {r3}
    6f38:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    6f3c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    6f40:	0002c904 	andeq	ip, r2, r4, lsl #18
    6f44:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    6f48:	13000002 	movwne	r0, #2
    6f4c:	000000c1 	andeq	r0, r0, r1, asr #1
    6f50:	01c80f00 	biceq	r0, r8, r0, lsl #30
    6f54:	02e00000 	rsceq	r0, r0, #0
    6f58:	00100000 	andseq	r0, r0, r0
    6f5c:	0002d508 	andeq	sp, r2, r8, lsl #10
    6f60:	07671400 	strbeq	r1, [r7, -r0, lsl #8]!
    6f64:	7f080000 	svcvc	0x00080000
    6f68:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    6f6c:	01010000 	mrseq	r0, (UNDEF: 1)
    6f70:	00032e14 	andeq	r2, r3, r4, lsl lr
    6f74:	01820800 	orreq	r0, r2, r0, lsl #16
    6f78:	0000ef14 	andeq	lr, r0, r4, lsl pc
    6f7c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6f80:	0000030b 	andeq	r0, r0, fp, lsl #6
    6f84:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    6f88:	000000e3 	andeq	r0, r0, r3, ror #1
    6f8c:	08150101 	ldmdaeq	r5, {r0, r8}
    6f90:	09030308 	stmdbeq	r3, {r3, r8, r9}
    6f94:	00000339 	andeq	r0, r0, r9, lsr r3
    6f98:	00375c16 	eorseq	r5, r7, r6, lsl ip
    6f9c:	03070800 	movweq	r0, #30720	; 0x7800
    6fa0:	0000c107 	andeq	ip, r0, r7, lsl #2
    6fa4:	06160000 	ldreq	r0, [r6], -r0
    6fa8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    6fac:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    6fb0:	04000000 	streq	r0, [r0], #-0
    6fb4:	03c31100 	biceq	r1, r3, #0, 2
    6fb8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    6fbc:	03120303 	tsteq	r2, #201326592	; 0xc000000
    6fc0:	33170000 	tstcc	r7, #0
    6fc4:	30000000 	andcc	r0, r0, r0
    6fc8:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    6fcc:	000003a9 	andeq	r0, r0, r9, lsr #7
    6fd0:	001a0716 	andseq	r0, sl, r6, lsl r7
    6fd4:	03140800 	tsteq	r4, #0, 16
    6fd8:	0000c108 	andeq	ip, r0, r8, lsl #2
    6fdc:	a8160000 	ldmdage	r6, {}	; <UNPREDICTABLE>
    6fe0:	08000008 	stmdaeq	r0, {r3}
    6fe4:	c1080315 	tstgt	r8, r5, lsl r3
    6fe8:	02000000 	andeq	r0, r0, #0
    6fec:	0048cc16 	subeq	ip, r8, r6, lsl ip
    6ff0:	03160800 	tsteq	r6, #0, 16
    6ff4:	0002b60b 	andeq	fp, r2, fp, lsl #12
    6ff8:	2f160400 	svccs	0x00160400
    6ffc:	08000043 	stmdaeq	r0, {r0, r1, r6}
    7000:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    7004:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7008:	00000716 	andeq	r0, r0, r6, lsl r7
    700c:	03180800 	tsteq	r8, #0, 16
    7010:	0003a90f 	andeq	sl, r3, pc, lsl #18
    7014:	26160c00 	ldrcs	r0, [r6], -r0, lsl #24
    7018:	08000007 	stmdaeq	r0, {r0, r1, r2}
    701c:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    7020:	2c000003 	stccs	0, cr0, [r0], {3}
    7024:	03390f00 	teqeq	r9, #0, 30
    7028:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    702c:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7030:	03000000 	movweq	r0, #0
    7034:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    7038:	11000003 	tstne	r0, r3
    703c:	0000089d 	muleq	r0, sp, r8
    7040:	1b031c08 	blne	ce068 <__ccfg+0xae0c0>
    7044:	00000346 	andeq	r0, r0, r6, asr #6
    7048:	00087d14 	andeq	r7, r8, r4, lsl sp
    704c:	031e0800 	tsteq	lr, #0, 16
    7050:	0003db14 	andeq	sp, r3, r4, lsl fp
    7054:	0e010100 	adfeqs	f0, f1, f0
    7058:	0003bf04 	andeq	fp, r3, r4, lsl #30
    705c:	4f011900 	svcmi	0x00011900
    7060:	01000019 	tsteq	r0, r9, lsl r0
    7064:	8101050c 	tsthi	r1, ip, lsl #10
    7068:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    706c:	8c00001e 	stchi	0, cr0, [r0], {30}
    7070:	0100001e 	tsteq	r0, lr, lsl r0
    7074:	0004499c 	muleq	r4, ip, r9
    7078:	74731a00 	ldrbtvc	r1, [r3], #-2560	; 0xfffff600
    707c:	140c0100 	strne	r0, [ip], #-256	; 0xffffff00
    7080:	000000c1 	andeq	r0, r0, r1, asr #1
    7084:	00002397 	muleq	r0, r7, r3
    7088:	01006d1b 	tsteq	r0, fp, lsl sp
    708c:	0449240c 	strbeq	r2, [r9], #-1036	; 0xfffffbf4
    7090:	91020000 	mrsls	r0, (UNDEF: 2)
    7094:	e21d1c74 	ands	r1, sp, #116, 24	; 0x7400
    7098:	01000020 	tsteq	r0, r0, lsr #32
    709c:	0081060e 	addeq	r0, r1, lr, lsl #12
    70a0:	23aa0000 			; <UNDEFINED> instruction: 0x23aa0000
    70a4:	621e0000 	andsvs	r0, lr, #0
    70a8:	01006675 	tsteq	r0, r5, ror r6
    70ac:	01bb080f 			; <UNDEFINED> instruction: 0x01bb080f
    70b0:	23e90000 	mvncs	r0, #0
    70b4:	611f0000 	tstvs	pc, r0
    70b8:	10010070 	andne	r0, r1, r0, ror r0
    70bc:	0000b50a 	andeq	fp, r0, sl, lsl #10
    70c0:	5c910200 	lfmpl	f0, 4, [r1], {0}
    70c4:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    70c8:	00000001 	andeq	r0, r0, r1
    70cc:	0000044c 	andeq	r0, r0, ip, asr #8
    70d0:	1dd00003 	ldclne	0, cr0, [r0, #12]
    70d4:	01040000 	mrseq	r0, (UNDEF: 4)
    70d8:	000000bd 	strheq	r0, [r0], -sp
    70dc:	0019990c 	andseq	r9, r9, ip, lsl #18
    70e0:	00066800 	andeq	r6, r6, r0, lsl #16
    70e4:	000bd800 	andeq	sp, fp, r0, lsl #16
    70e8:	00000000 	andeq	r0, r0, r0
    70ec:	004b4e00 	subeq	r4, fp, r0, lsl #28
    70f0:	06010200 	streq	r0, [r1], -r0, lsl #4
    70f4:	000008de 	ldrdeq	r0, [r0], -lr
    70f8:	a3050202 	movwge	r0, #20994	; 0x5202
    70fc:	02000007 	andeq	r0, r0, #7
    7100:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    7104:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7108:	0005e805 	andeq	lr, r5, r5, lsl #16
    710c:	08350300 	ldmdaeq	r5!, {r8, r9}
    7110:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7114:	00004d18 	andeq	r4, r0, r8, lsl sp
    7118:	08010200 	stmdaeq	r1, {r9}
    711c:	000008dc 	ldrdeq	r0, [r0], -ip
    7120:	0003d203 	andeq	sp, r3, r3, lsl #4
    7124:	19310200 	ldmdbne	r1!, {r9}
    7128:	00000060 	andeq	r0, r0, r0, rrx
    712c:	aa070202 	bge	1c793c <__ccfg+0x1a7994>
    7130:	03000009 	movweq	r0, #9
    7134:	000008f5 	strdeq	r0, [r0], -r5
    7138:	73193402 	tstvc	r9, #33554432	; 0x2000000
    713c:	02000000 	andeq	r0, r0, #0
    7140:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
    7144:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7148:	00039207 	andeq	r9, r3, r7, lsl #4
    714c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7150:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7154:	9c070402 	cfstrsls	mvf0, [r7], {2}
    7158:	03000003 	movweq	r0, #3
    715c:	0000041e 	andeq	r0, r0, lr, lsl r4
    7160:	9b1b2803 	blls	6d1174 <__ccfg+0x6b11cc>
    7164:	05000000 	streq	r0, [r0, #-0]
    7168:	00000865 	andeq	r0, r0, r5, ror #16
    716c:	b3000904 	movwlt	r0, #2308	; 0x904
    7170:	06000000 	streq	r0, [r0], -r0
    7174:	0000094c 	andeq	r0, r0, ip, asr #18
    7178:	000000b3 	strheq	r0, [r0], -r3
    717c:	07000100 	streq	r0, [r0, -r0, lsl #2]
    7180:	08670304 	stmdaeq	r7!, {r2, r8, r9}^
    7184:	63030000 	movwvs	r0, #12288	; 0x3000
    7188:	00008f18 	andeq	r8, r0, r8, lsl pc
    718c:	23d80300 	bicscs	r0, r8, #0, 6
    7190:	27040000 	strcs	r0, [r4, -r0]
    7194:	00005412 	andeq	r5, r0, r2, lsl r4
    7198:	00c10800 	sbceq	r0, r1, r0, lsl #16
    719c:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    71a0:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    71a4:	0041122b 	subeq	r1, r1, fp, lsr #4
    71a8:	d2090000 	andle	r0, r9, #0
    71ac:	03000000 	movweq	r0, #0
    71b0:	00002429 	andeq	r2, r0, r9, lsr #8
    71b4:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    71b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    71bc:	000000e3 	andeq	r0, r0, r3, ror #1
    71c0:	0004fb03 	andeq	pc, r4, r3, lsl #22
    71c4:	122d0400 	eorne	r0, sp, #0, 8
    71c8:	00000067 	andeq	r0, r0, r7, rrx
    71cc:	3204080a 	andcc	r0, r4, #655360	; 0xa0000
    71d0:	00018e09 	andeq	r8, r1, r9, lsl #28
    71d4:	003e0b00 	eorseq	r0, lr, r0, lsl #22
    71d8:	34040000 	strcc	r0, [r4], #-0
    71dc:	0000d207 	andeq	sp, r0, r7, lsl #4
    71e0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    71e4:	05010b00 	streq	r0, [r1, #-2816]	; 0xfffff500
    71e8:	35040000 	strcc	r0, [r4, #-0]
    71ec:	0000d203 	andeq	sp, r0, r3, lsl #4
    71f0:	06010100 	streq	r0, [r1], -r0, lsl #2
    71f4:	02370b00 	eorseq	r0, r7, #0, 22
    71f8:	36040000 	strcc	r0, [r4], -r0
    71fc:	0000d203 	andeq	sp, r0, r3, lsl #4
    7200:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7204:	053b0b00 	ldreq	r0, [fp, #-2816]!	; 0xfffff500
    7208:	37040000 	strcc	r0, [r4, -r0]
    720c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7210:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7214:	07c40b00 	strbeq	r0, [r4, r0, lsl #22]
    7218:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    721c:	0000d203 	andeq	sp, r0, r3, lsl #4
    7220:	00040100 	andeq	r0, r4, r0, lsl #2
    7224:	05080c00 	streq	r0, [r8, #-3072]	; 0xfffff400
    7228:	3a040000 	bcc	107230 <__ccfg+0xe7288>
    722c:	0000d207 	andeq	sp, r0, r7, lsl #4
    7230:	d20c0100 	andle	r0, ip, #0, 2
    7234:	04000006 	streq	r0, [r0], #-6
    7238:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    723c:	0c020000 	stceq	0, cr0, [r2], {-0}
    7240:	00000a7c 	andeq	r0, r0, ip, ror sl
    7244:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7248:	03000000 	movweq	r0, #0
    724c:	0007070c 	andeq	r0, r7, ip, lsl #14
    7250:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7254:	000000e3 	andeq	r0, r0, r3, ror #1
    7258:	89030004 	stmdbhi	r3, {r2}
    725c:	04000002 	streq	r0, [r0], #-2
    7260:	01000341 	tsteq	r0, r1, asr #6
    7264:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    7268:	0d000001 	stceq	0, cr0, [r0, #-4]
    726c:	00000542 	andeq	r0, r0, r2, asr #10
    7270:	9a1a4304 	bls	697e88 <__ccfg+0x677ee0>
    7274:	01000001 	tsteq	r0, r1
    7278:	01b10d01 			; <UNDEFINED> instruction: 0x01b10d01
    727c:	45040000 	strmi	r0, [r4, #-0]
    7280:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    7284:	0e010100 	adfeqs	f0, f1, f0
    7288:	0001c104 	andeq	ip, r1, r4, lsl #2
    728c:	08010200 	stmdaeq	r1, {r9}
    7290:	000008e5 	andeq	r0, r0, r5, ror #17
    7294:	0001c108 	andeq	ip, r1, r8, lsl #2
    7298:	02920d00 	addseq	r0, r2, #0, 26
    729c:	45040000 	strmi	r0, [r4, #-0]
    72a0:	0001bb1e 	andeq	fp, r1, lr, lsl fp
    72a4:	0a010100 	beq	476ac <__ccfg+0x27704>
    72a8:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    72ac:	0000020c 	andeq	r0, r0, ip, lsl #4
    72b0:	0006050c 	andeq	r0, r6, ip, lsl #10
    72b4:	0b900500 	bleq	fe4086bc <_estack+0xde4036bc>
    72b8:	00000067 	andeq	r0, r0, r7, rrx
    72bc:	0bae0c00 	bleq	feb8a2c4 <_estack+0xdeb852c4>
    72c0:	91050000 	mrsls	r0, (UNDEF: 5)
    72c4:	0000c108 	andeq	ip, r0, r8, lsl #2
    72c8:	ea0c0400 	b	3082d0 <__ccfg+0x2e8328>
    72cc:	05000001 	streq	r0, [r0, #-1]
    72d0:	00de1092 	smullseq	r1, lr, r2, r0
    72d4:	00060000 	andeq	r0, r6, r0
    72d8:	00094503 	andeq	r4, r9, r3, lsl #10
    72dc:	03930500 	orrseq	r0, r3, #0, 10
    72e0:	000001db 	ldrdeq	r0, [r0], -fp
    72e4:	00020c0f 	andeq	r0, r2, pc, lsl #24
    72e8:	00022300 	andeq	r2, r2, r0, lsl #6
    72ec:	0d001000 	stceq	0, cr1, [r0, #-0]
    72f0:	00000713 	andeq	r0, r0, r3, lsl r7
    72f4:	180f9905 	stmdane	pc, {r0, r2, r8, fp, ip, pc}	; <UNPREDICTABLE>
    72f8:	01000002 	tsteq	r0, r2
    72fc:	06010a01 	streq	r0, [r1], -r1, lsl #20
    7300:	025b0991 	subseq	r0, fp, #2375680	; 0x244000
    7304:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    7308:	06000007 	streq	r0, [r0], -r7
    730c:	00d20793 	smullseq	r0, r2, r3, r7
    7310:	07010000 	streq	r0, [r1, -r0]
    7314:	7c0b0001 	stcvc	0, cr0, [fp], {1}
    7318:	06000004 	streq	r0, [r0], -r4
    731c:	00d20394 	smullseq	r0, r2, r4, r3
    7320:	01010000 	mrseq	r0, (UNDEF: 1)
    7324:	03000000 	movweq	r0, #0
    7328:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    732c:	31039606 	tstcc	r3, r6, lsl #12
    7330:	08000002 	stmdaeq	r0, {r1}
    7334:	0000025b 	andeq	r0, r0, fp, asr r2
    7338:	0002670f 	andeq	r6, r2, pc, lsl #14
    733c:	00027700 	andeq	r7, r2, r0, lsl #14
    7340:	08001000 	stmdaeq	r0, {ip}
    7344:	0000026c 	andeq	r0, r0, ip, ror #4
    7348:	00034b0d 	andeq	r4, r3, sp, lsl #22
    734c:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7350:	00000277 	andeq	r0, r0, r7, ror r2
    7354:	cd0f0101 	stfgts	f0, [pc, #-4]	; 7358 <__exidx_end+0x2428>
    7358:	95000000 	strls	r0, [r0, #-0]
    735c:	10000002 	andne	r0, r0, r2
    7360:	028a0800 	addeq	r0, sl, #0, 16
    7364:	bb0d0000 	bllt	34736c <__ccfg+0x3273c4>
    7368:	07000004 	streq	r0, [r0, -r4]
    736c:	02951306 	addseq	r1, r5, #402653184	; 0x18000000
    7370:	01010000 	mrseq	r0, (UNDEF: 1)
    7374:	0006b40d 	andeq	fp, r6, sp, lsl #8
    7378:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    737c:	000000e3 	andeq	r0, r0, r3, ror #1
    7380:	fe110101 	cdp2	1, 1, cr0, cr1, cr1, {0}
    7384:	08000008 	stmdaeq	r0, {r3}
    7388:	c310016e 	tstgt	r0, #-2147483621	; 0x8000001b
    738c:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    7390:	0002c904 	andeq	ip, r2, r4, lsl #18
    7394:	d5011200 	strle	r1, [r1, #-512]	; 0xfffffe00
    7398:	13000002 	movwne	r0, #2
    739c:	000000c1 	andeq	r0, r0, r1, asr #1
    73a0:	01c80f00 	biceq	r0, r8, r0, lsl #30
    73a4:	02e00000 	rsceq	r0, r0, #0
    73a8:	00100000 	andseq	r0, r0, r0
    73ac:	0002d508 	andeq	sp, r2, r8, lsl #10
    73b0:	07671400 	strbeq	r1, [r7, -r0, lsl #8]!
    73b4:	7f080000 	svcvc	0x00080000
    73b8:	02e01601 	rsceq	r1, r0, #1048576	; 0x100000
    73bc:	01010000 	mrseq	r0, (UNDEF: 1)
    73c0:	00032e14 	andeq	r2, r3, r4, lsl lr
    73c4:	01820800 	orreq	r0, r2, r0, lsl #16
    73c8:	0000ef14 	andeq	lr, r0, r4, lsl pc
    73cc:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    73d0:	0000030b 	andeq	r0, r0, fp, lsl #6
    73d4:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    73d8:	000000e3 	andeq	r0, r0, r3, ror #1
    73dc:	08150101 	ldmdaeq	r5, {r0, r8}
    73e0:	09030308 	stmdbeq	r3, {r3, r8, r9}
    73e4:	00000339 	andeq	r0, r0, r9, lsr r3
    73e8:	00375c16 	eorseq	r5, r7, r6, lsl ip
    73ec:	03070800 	movweq	r0, #30720	; 0x7800
    73f0:	0000c107 	andeq	ip, r0, r7, lsl #2
    73f4:	06160000 	ldreq	r0, [r6], -r0
    73f8:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    73fc:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7400:	04000000 	streq	r0, [r0], #-0
    7404:	03c31100 	biceq	r1, r3, #0, 2
    7408:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    740c:	03120303 	tsteq	r2, #201326592	; 0xc000000
    7410:	33170000 	tstcc	r7, #0
    7414:	30000000 	andcc	r0, r0, r0
    7418:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    741c:	000003a9 	andeq	r0, r0, r9, lsr #7
    7420:	001a0716 	andseq	r0, sl, r6, lsl r7
    7424:	03140800 	tsteq	r4, #0, 16
    7428:	0000c108 	andeq	ip, r0, r8, lsl #2
    742c:	a8160000 	ldmdage	r6, {}	; <UNPREDICTABLE>
    7430:	08000008 	stmdaeq	r0, {r3}
    7434:	c1080315 	tstgt	r8, r5, lsl r3
    7438:	02000000 	andeq	r0, r0, #0
    743c:	0048cc16 	subeq	ip, r8, r6, lsl ip
    7440:	03160800 	tsteq	r6, #0, 16
    7444:	0002b60b 	andeq	fp, r2, fp, lsl #12
    7448:	2f160400 	svccs	0x00160400
    744c:	08000043 	stmdaeq	r0, {r0, r1, r6}
    7450:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    7454:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7458:	00000716 	andeq	r0, r0, r6, lsl r7
    745c:	03180800 	tsteq	r8, #0, 16
    7460:	0003a90f 	andeq	sl, r3, pc, lsl #18
    7464:	26160c00 	ldrcs	r0, [r6], -r0, lsl #24
    7468:	08000007 	stmdaeq	r0, {r0, r1, r2}
    746c:	b9150319 	ldmdblt	r5, {r0, r3, r4, r8, r9}
    7470:	2c000003 	stccs	0, cr0, [r0], {3}
    7474:	03390f00 	teqeq	r9, #0, 30
    7478:	03b90000 			; <UNDEFINED> instruction: 0x03b90000
    747c:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7480:	03000000 	movweq	r0, #0
    7484:	46040e00 	strmi	r0, [r4], -r0, lsl #28
    7488:	11000003 	tstne	r0, r3
    748c:	0000089d 	muleq	r0, sp, r8
    7490:	1b031c08 	blne	ce4b8 <__ccfg+0xae510>
    7494:	00000346 	andeq	r0, r0, r6, asr #6
    7498:	00087d14 	andeq	r7, r8, r4, lsl sp
    749c:	031e0800 	tsteq	lr, #0, 16
    74a0:	0003db14 	andeq	sp, r3, r4, lsl fp
    74a4:	0e010100 	adfeqs	f0, f1, f0
    74a8:	0003bf04 	andeq	fp, r3, r4, lsl #30
    74ac:	18ff0d00 	ldmne	pc!, {r8, sl, fp}^	; <UNPREDICTABLE>
    74b0:	0a010000 	beq	474b8 <__ccfg+0x27510>
    74b4:	0001bb0e 	andeq	fp, r1, lr, lsl #22
    74b8:	19010100 	stmdbne	r1, {r8}
    74bc:	0019d901 	andseq	sp, r9, r1, lsl #18
    74c0:	050e0100 	streq	r0, [lr, #-256]	; 0xffffff00
    74c4:	00008101 	andeq	r8, r0, r1, lsl #2
    74c8:	001e8c00 	andseq	r8, lr, r0, lsl #24
    74cc:	001eec00 	andseq	lr, lr, r0, lsl #24
    74d0:	499c0100 	ldmibmi	ip, {r8}
    74d4:	1a000004 	bne	74ec <__exidx_end+0x25bc>
    74d8:	01007473 	tsteq	r0, r3, ror r4
    74dc:	00c1130e 	sbceq	r1, r1, lr, lsl #6
    74e0:	241d0000 	ldrcs	r0, [sp], #-0
    74e4:	661b0000 	ldrvs	r0, [fp], -r0
    74e8:	0100746d 	tsteq	r0, sp, ror #8
    74ec:	0449230e 	strbeq	r2, [r9], #-782	; 0xfffffcf2
    74f0:	91020000 	mrsls	r0, (UNDEF: 2)
    74f4:	e21d1c74 	ands	r1, sp, #116, 24	; 0x7400
    74f8:	01000020 	tsteq	r0, r0, lsr #32
    74fc:	00810613 	addeq	r0, r1, r3, lsl r6
    7500:	243b0000 	ldrtcs	r0, [fp], #-0
    7504:	611e0000 	tstvs	lr, r0
    7508:	14010070 	strne	r0, [r1], #-112	; 0xffffff90
    750c:	0000b50a 	andeq	fp, r0, sl, lsl #10
    7510:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    7514:	c8040e00 	stmdagt	r4, {r9, sl, fp}
    7518:	00000001 	andeq	r0, r0, r1
    751c:	00002474 	andeq	r2, r0, r4, ror r4
    7520:	1f6b0003 	svcne	0x006b0003
    7524:	01040000 	mrseq	r0, (UNDEF: 4)
    7528:	000000bd 	strheq	r0, [r0], -sp
    752c:	001df10c 	andseq	pc, sp, ip, lsl #2
    7530:	00066800 	andeq	r6, r6, r0, lsl #16
    7534:	000d6000 	andeq	r6, sp, r0
    7538:	00000000 	andeq	r0, r0, r0
    753c:	004d0100 	subeq	r0, sp, r0, lsl #2
    7540:	26710200 	ldrbtcs	r0, [r1], -r0, lsl #4
    7544:	22060000 	andcs	r0, r6, #0
    7548:	00003117 	andeq	r3, r0, r7, lsl r1
    754c:	06010300 	streq	r0, [r1], -r0, lsl #6
    7550:	000008de 	ldrdeq	r0, [r0], -lr
    7554:	002ca802 	eoreq	sl, ip, r2, lsl #16
    7558:	18250600 	stmdane	r5!, {r9, sl}
    755c:	00000044 	andeq	r0, r0, r4, asr #32
    7560:	a3050203 	movwge	r0, #20995	; 0x5203
    7564:	03000007 	movweq	r0, #7
    7568:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    756c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    7570:	0005e805 	andeq	lr, r5, r5, lsl #16
    7574:	08350200 	ldmdaeq	r5!, {r9}
    7578:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    757c:	00006518 	andeq	r6, r0, r8, lsl r5
    7580:	08010300 	stmdaeq	r1, {r8, r9}
    7584:	000008dc 	ldrdeq	r0, [r0], -ip
    7588:	0003d202 	andeq	sp, r3, r2, lsl #4
    758c:	19310600 	ldmdbne	r1!, {r9, sl}
    7590:	00000078 	andeq	r0, r0, r8, ror r0
    7594:	aa070203 	bge	1c7da8 <__ccfg+0x1a7e00>
    7598:	02000009 	andeq	r0, r0, #9
    759c:	000008f5 	strdeq	r0, [r0], -r5
    75a0:	90193406 	andsls	r3, r9, r6, lsl #8
    75a4:	04000000 	streq	r0, [r0], #-0
    75a8:	0000007f 	andeq	r0, r0, pc, ror r0
    75ac:	97070403 	strls	r0, [r7, -r3, lsl #8]
    75b0:	05000003 	streq	r0, [r0, #-3]
    75b4:	00000090 	muleq	r0, r0, r0
    75b8:	92070803 	andls	r0, r7, #196608	; 0x30000
    75bc:	06000003 	streq	r0, [r0], -r3
    75c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    75c4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    75c8:	00039c07 	andeq	r9, r3, r7, lsl #24
    75cc:	08960700 	ldmeq	r6, {r8, r9, sl}
    75d0:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    75d4:	00aa1701 	adceq	r1, sl, r1, lsl #14
    75d8:	e6020000 	str	r0, [r2], -r0
    75dc:	08000009 	stmdaeq	r0, {r0, r3}
    75e0:	004b0e2e 	subeq	r0, fp, lr, lsr #28
    75e4:	6b020000 	blvs	875ec <__ccfg+0x67644>
    75e8:	08000002 	stmdaeq	r0, {r1}
    75ec:	004b0e74 	subeq	r0, fp, r4, ror lr
    75f0:	04080000 	streq	r0, [r8], #-0
    75f4:	f803a508 			; <UNDEFINED> instruction: 0xf803a508
    75f8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    75fc:	0000058b 	andeq	r0, r0, fp, lsl #11
    7600:	b10ca708 	tstlt	ip, r8, lsl #14
    7604:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    7608:	000007ea 	andeq	r0, r0, sl, ror #15
    760c:	f813a808 			; <UNDEFINED> instruction: 0xf813a808
    7610:	00000000 	andeq	r0, r0, r0
    7614:	0000650a 	andeq	r6, r0, sl, lsl #10
    7618:	00010800 	andeq	r0, r1, r0, lsl #16
    761c:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    7620:	00030000 	andeq	r0, r3, r0
    7624:	a208080c 	andge	r0, r8, #12, 16	; 0xc0000
    7628:	00012c09 	andeq	r2, r1, r9, lsl #24
    762c:	03260d00 			; <UNDEFINED> instruction: 0x03260d00
    7630:	a4080000 	strge	r0, [r8], #-0
    7634:	0000a307 	andeq	sl, r0, r7, lsl #6
    7638:	ae0d0000 	cdpge	0, 0, cr0, cr13, cr0, {0}
    763c:	08000004 	stmdaeq	r0, {r2}
    7640:	00d605a9 	sbcseq	r0, r6, r9, lsr #11
    7644:	00040000 	andeq	r0, r4, r0
    7648:	0006a902 	andeq	sl, r6, r2, lsl #18
    764c:	03aa0800 			; <UNDEFINED> instruction: 0x03aa0800
    7650:	00000108 	andeq	r0, r0, r8, lsl #2
    7654:	2d02040e 	cfstrscs	mvf0, [r2, #-56]	; 0xffffffc8
    7658:	09000006 	stmdbeq	r0, {r1, r2}
    765c:	00901916 	addseq	r1, r0, r6, lsl r9
    7660:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
    7664:	0a000001 	beq	7670 <__exidx_end+0x2740>
    7668:	00a30d0c 	adceq	r0, r3, ip, lsl #26
    766c:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
    7670:	09000005 	stmdbeq	r0, {r0, r2}
    7674:	01461b23 	cmpeq	r6, r3, lsr #22
    7678:	ab0f0000 	blge	3c7680 <__ccfg+0x3a76d8>
    767c:	18000002 	stmdane	r0, {r1}
    7680:	b8083409 	stmdalt	r8, {r0, r3, sl, ip, sp}
    7684:	0d000001 	stceq	0, cr0, [r0, #-4]
    7688:	00000a40 	andeq	r0, r0, r0, asr #20
    768c:	b8133609 	ldmdalt	r3, {r0, r3, r9, sl, ip, sp}
    7690:	00000001 	andeq	r0, r0, r1
    7694:	006b5f10 	rsbeq	r5, fp, r0, lsl pc
    7698:	a3073709 	movwge	r3, #30473	; 0x7709
    769c:	04000000 	streq	r0, [r0], #-0
    76a0:	0008450d 	andeq	r4, r8, sp, lsl #10
    76a4:	0b370900 	bleq	dc9aac <__ccfg+0xda9b04>
    76a8:	000000a3 	andeq	r0, r0, r3, lsr #1
    76ac:	3eb00d08 	cdpcc	13, 11, cr0, cr0, cr8, {0}
    76b0:	37090000 	strcc	r0, [r9, -r0]
    76b4:	0000a314 	andeq	sl, r0, r4, lsl r3
    76b8:	be0d0c00 	cdplt	12, 0, cr0, cr13, cr0, {0}
    76bc:	09000003 	stmdbeq	r0, {r0, r1}
    76c0:	00a31b37 	adceq	r1, r3, r7, lsr fp
    76c4:	10100000 	andsne	r0, r0, r0
    76c8:	0900785f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
    76cc:	01be0b38 			; <UNDEFINED> instruction: 0x01be0b38
    76d0:	00140000 	andseq	r0, r4, r0
    76d4:	015e0411 	cmpeq	lr, r1, lsl r4
    76d8:	3a0a0000 	bcc	2876e0 <__ccfg+0x267738>
    76dc:	ce000001 	cdpgt	0, 0, cr0, cr0, cr1, {0}
    76e0:	0b000001 	bleq	76ec <__exidx_end+0x27bc>
    76e4:	000000aa 	andeq	r0, r0, sl, lsr #1
    76e8:	600f0000 	andvs	r0, pc, r0
    76ec:	24000008 	strcs	r0, [r0], #-8
    76f0:	51083c09 	tstpl	r8, r9, lsl #24
    76f4:	0d000002 	stceq	0, cr0, [r0, #-8]
    76f8:	0000044e 	andeq	r0, r0, lr, asr #8
    76fc:	a3093e09 	movwge	r3, #40457	; 0x9e09
    7700:	00000000 	andeq	r0, r0, r0
    7704:	0003580d 	andeq	r5, r3, sp, lsl #16
    7708:	093f0900 	ldmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    770c:	000000a3 	andeq	r0, r0, r3, lsr #1
    7710:	03010d04 	movweq	r0, #7428	; 0x1d04
    7714:	40090000 	andmi	r0, r9, r0
    7718:	0000a309 	andeq	sl, r0, r9, lsl #6
    771c:	0f0d0800 	svceq	0x000d0800
    7720:	09000005 	stmdbeq	r0, {r0, r2}
    7724:	00a30941 	adceq	r0, r3, r1, asr #18
    7728:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    772c:	0000071d 	andeq	r0, r0, sp, lsl r7
    7730:	a3094209 	movwge	r4, #37385	; 0x9209
    7734:	10000000 	andne	r0, r0, r0
    7738:	0008040d 	andeq	r0, r8, sp, lsl #8
    773c:	09430900 	stmdbeq	r3, {r8, fp}^
    7740:	000000a3 	andeq	r0, r0, r3, lsr #1
    7744:	02c60d14 	sbceq	r0, r6, #20, 26	; 0x500
    7748:	44090000 	strmi	r0, [r9], #-0
    774c:	0000a309 	andeq	sl, r0, r9, lsl #6
    7750:	570d1800 	strpl	r1, [sp, -r0, lsl #16]
    7754:	09000004 	stmdbeq	r0, {r2}
    7758:	00a30945 	adceq	r0, r3, r5, asr #18
    775c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    7760:	000006c7 	andeq	r0, r0, r7, asr #13
    7764:	a3094609 	movwge	r4, #38409	; 0x9609
    7768:	20000000 	andcs	r0, r0, r0
    776c:	00611200 	rsbeq	r1, r1, r0, lsl #4
    7770:	01080000 	mrseq	r0, (UNDEF: 8)
    7774:	96084f09 	strls	r4, [r8], -r9, lsl #30
    7778:	0d000002 	stceq	0, cr0, [r0, #-8]
    777c:	00000974 	andeq	r0, r0, r4, ror r9
    7780:	960a5009 	strls	r5, [sl], -r9
    7784:	00000002 	andeq	r0, r0, r2
    7788:	0008c00d 	andeq	ip, r8, sp
    778c:	09510900 	ldmdbeq	r1, {r8, fp}^
    7790:	00000296 	muleq	r0, r6, r2
    7794:	09dd1380 	ldmibeq	sp, {r7, r8, r9, ip}^
    7798:	53090000 	movwpl	r0, #36864	; 0x9000
    779c:	00013a0a 	andeq	r3, r1, sl, lsl #20
    77a0:	13010000 	movwne	r0, #4096	; 0x1000
    77a4:	00000a2b 	andeq	r0, r0, fp, lsr #20
    77a8:	3a0a5609 	bcc	29cfd4 <__ccfg+0x27d02c>
    77ac:	04000001 	streq	r0, [r0], #-1
    77b0:	380a0001 	stmdacc	sl, {r0}
    77b4:	a6000001 	strge	r0, [r0], -r1
    77b8:	0b000002 	bleq	77c8 <__exidx_end+0x2898>
    77bc:	000000aa 	andeq	r0, r0, sl, lsr #1
    77c0:	8a12001f 	bhi	487844 <__ccfg+0x46789c>
    77c4:	90000007 	andls	r0, r0, r7
    77c8:	08620901 	stmdaeq	r2!, {r0, r8, fp}^
    77cc:	000002e9 	andeq	r0, r0, r9, ror #5
    77d0:	000a400d 	andeq	r4, sl, sp
    77d4:	12630900 	rsbne	r0, r3, #0, 18
    77d8:	000002e9 	andeq	r0, r0, r9, ror #5
    77dc:	04660d00 	strbteq	r0, [r6], #-3328	; 0xfffff300
    77e0:	64090000 	strvs	r0, [r9], #-0
    77e4:	0000a306 	andeq	sl, r0, r6, lsl #6
    77e8:	730d0400 	movwvc	r0, #54272	; 0xd400
    77ec:	09000002 	stmdbeq	r0, {r1}
    77f0:	02ef0966 	rsceq	r0, pc, #1671168	; 0x198000
    77f4:	0d080000 	stceq	0, cr0, [r8, #-0]
    77f8:	00000061 	andeq	r0, r0, r1, rrx
    77fc:	511e6709 	tstpl	lr, r9, lsl #14
    7800:	88000002 	stmdahi	r0, {r1}
    7804:	a6041100 	strge	r1, [r4], -r0, lsl #2
    7808:	0a000002 	beq	7818 <__exidx_end+0x28e8>
    780c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7810:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7814:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7818:	11001f00 	tstne	r0, r0, lsl #30
    781c:	00030504 	andeq	r0, r3, r4, lsl #10
    7820:	0f011400 	svceq	0x00011400
    7824:	0000093e 	andeq	r0, r0, lr, lsr r9
    7828:	087a0908 	ldmdaeq	sl!, {r3, r8, fp}^
    782c:	0000032f 	andeq	r0, r0, pc, lsr #6
    7830:	0006040d 	andeq	r0, r6, sp, lsl #8
    7834:	117b0900 	cmnne	fp, r0, lsl #18
    7838:	0000032f 	andeq	r0, r0, pc, lsr #6
    783c:	18cf0d00 	stmiane	pc, {r8, sl, fp}^	; <UNPREDICTABLE>
    7840:	7c090000 	stcvc	0, cr0, [r9], {-0}
    7844:	0000a306 	andeq	sl, r0, r6, lsl #6
    7848:	11000400 	tstne	r0, r0, lsl #8
    784c:	00006504 	andeq	r6, r0, r4, lsl #10
    7850:	03b60f00 			; <UNDEFINED> instruction: 0x03b60f00
    7854:	09680000 	stmdbeq	r8!, {}^	; <UNPREDICTABLE>
    7858:	047808ba 	ldrbteq	r0, [r8], #-2234	; 0xfffff746
    785c:	5f100000 	svcpl	0x00100000
    7860:	bb090070 	bllt	247a28 <__ccfg+0x227a80>
    7864:	00032f12 	andeq	r2, r3, r2, lsl pc
    7868:	5f100000 	svcpl	0x00100000
    786c:	bc090072 	stclt	0, cr0, [r9], {114}	; 0x72
    7870:	0000a307 	andeq	sl, r0, r7, lsl #6
    7874:	5f100400 	svcpl	0x00100400
    7878:	bd090077 	stclt	0, cr0, [r9, #-476]	; 0xfffffe24
    787c:	0000a307 	andeq	sl, r0, r7, lsl #6
    7880:	e90d0800 	stmdb	sp, {fp}
    7884:	09000001 	stmdbeq	r0, {r0}
    7888:	004409be 	strheq	r0, [r4], #-158	; 0xffffff62
    788c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7890:	00000662 	andeq	r0, r0, r2, ror #12
    7894:	4409bf09 	strmi	fp, [r9], #-3849	; 0xfffff0f7
    7898:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    789c:	66625f10 	uqadd16vs	r5, r2, r0
    78a0:	11c00900 	bicne	r0, r0, r0, lsl #18
    78a4:	00000307 	andeq	r0, r0, r7, lsl #6
    78a8:	01e00d10 	mvneq	r0, r0, lsl sp
    78ac:	c1090000 	mrsgt	r0, (UNDEF: 9)
    78b0:	0000a307 	andeq	sl, r0, r7, lsl #6
    78b4:	780d1800 	stmdavc	sp, {fp, ip}
    78b8:	09000002 	stmdbeq	r0, {r1}
    78bc:	01380ac8 	teqeq	r8, r8, asr #21
    78c0:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    78c4:	0000185f 	andeq	r1, r0, pc, asr r8
    78c8:	fd1dca09 	ldc2	10, cr12, [sp, #-36]	; 0xffffffdc	; <UNPREDICTABLE>
    78cc:	20000005 	andcs	r0, r0, r5
    78d0:	0018260d 	andseq	r2, r8, sp, lsl #12
    78d4:	1dcc0900 	vstrne.16	s1, [ip]	; <UNPREDICTABLE>
    78d8:	00000628 	andeq	r0, r0, r8, lsr #12
    78dc:	0a510d24 	beq	144ad74 <__ccfg+0x142adcc>
    78e0:	cf090000 	svcgt	0x00090000
    78e4:	00064d0d 	andeq	r4, r6, sp, lsl #26
    78e8:	140d2800 	strne	r2, [sp], #-2048	; 0xfffff800
    78ec:	09000018 	stmdbeq	r0, {r3, r4}
    78f0:	066809d0 			; <UNDEFINED> instruction: 0x066809d0
    78f4:	102c0000 	eorne	r0, ip, r0
    78f8:	0062755f 	rsbeq	r7, r2, pc, asr r5
    78fc:	0711d309 	ldreq	sp, [r1, -r9, lsl #6]
    7900:	30000003 	andcc	r0, r0, r3
    7904:	70755f10 	rsbsvc	r5, r5, r0, lsl pc
    7908:	12d40900 	sbcsne	r0, r4, #0, 18
    790c:	0000032f 	andeq	r0, r0, pc, lsr #6
    7910:	755f1038 	ldrbvc	r1, [pc, #-56]	; 78e0 <__exidx_end+0x29b0>
    7914:	d5090072 	strle	r0, [r9, #-114]	; 0xffffff8e
    7918:	0000a307 	andeq	sl, r0, r7, lsl #6
    791c:	680d3c00 	stmdavs	sp, {sl, fp, ip, sp}
    7920:	0900000a 	stmdbeq	r0, {r1, r3}
    7924:	066e11d8 			; <UNDEFINED> instruction: 0x066e11d8
    7928:	0d400000 	stcleq	0, cr0, [r0, #-0]
    792c:	000009f7 	strdeq	r0, [r0], -r7
    7930:	7e11d909 	vnmlsvc.f16	s26, s2, s18	; <UNPREDICTABLE>
    7934:	43000006 	movwmi	r0, #6
    7938:	626c5f10 	rsbvs	r5, ip, #16, 30	; 0x40
    793c:	11dc0900 	bicsne	r0, ip, r0, lsl #18
    7940:	00000307 	andeq	r0, r0, r7, lsl #6
    7944:	08570d44 	ldmdaeq	r7, {r2, r6, r8, sl, fp}^
    7948:	df090000 	svcle	0x00090000
    794c:	0000a307 	andeq	sl, r0, r7, lsl #6
    7950:	030d4c00 	movweq	r4, #56320	; 0xdc00
    7954:	09000004 	stmdbeq	r0, {r2}
    7958:	00be0ae0 	adcseq	r0, lr, r0, ror #21
    795c:	0d500000 	ldcleq	0, cr0, [r0, #-0]
    7960:	0000432e 	andeq	r4, r0, lr, lsr #6
    7964:	9712e309 	ldrls	lr, [r2, -r9, lsl #6]
    7968:	54000004 	strpl	r0, [r0], #-4
    796c:	00086f0d 	andeq	r6, r8, sp, lsl #30
    7970:	0ce70900 			; <UNDEFINED> instruction: 0x0ce70900
    7974:	00000152 	andeq	r0, r0, r2, asr r1
    7978:	07920d58 			; <UNDEFINED> instruction: 0x07920d58
    797c:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    7980:	00012c0e 	andeq	r2, r1, lr, lsl #24
    7984:	230d5c00 	movwcs	r5, #56320	; 0xdc00
    7988:	0900000a 	stmdbeq	r0, {r1, r3}
    798c:	00a309ea 	adceq	r0, r3, sl, ror #19
    7990:	00640000 	rsbeq	r0, r4, r0
    7994:	00a30115 	adceq	r0, r3, r5, lsl r1
    7998:	04970000 	ldreq	r0, [r7], #0
    799c:	97160000 	ldrls	r0, [r6, -r0]
    79a0:	16000004 	strne	r0, [r0], -r4
    79a4:	00000138 	andeq	r0, r0, r8, lsr r1
    79a8:	0005eb16 	andeq	lr, r5, r6, lsl fp
    79ac:	00a31600 	adceq	r1, r3, r0, lsl #12
    79b0:	11000000 	mrsne	r0, (UNDEF: 0)
    79b4:	0004a204 	andeq	sl, r4, r4, lsl #4
    79b8:	04970400 	ldreq	r0, [r7], #1024	; 0x400
    79bc:	6c170000 	ldcvs	0, cr0, [r7], {-0}
    79c0:	28000043 	stmdacs	r0, {r0, r1, r6}
    79c4:	02650904 	rsbeq	r0, r5, #4, 18	; 0x10000
    79c8:	0005eb08 	andeq	lr, r5, r8, lsl #22
    79cc:	06f81800 	ldrbteq	r1, [r8], r0, lsl #16
    79d0:	67090000 	strvs	r0, [r9, -r0]
    79d4:	00a30702 	adceq	r0, r3, r2, lsl #14
    79d8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    79dc:	000005d2 	ldrdeq	r0, [r0], -r2
    79e0:	0b026c09 	bleq	a2a0c <__ccfg+0x82a64>
    79e4:	000006da 	ldrdeq	r0, [r0], -sl
    79e8:	02551804 	subseq	r1, r5, #4, 16	; 0x40000
    79ec:	6c090000 	stcvs	0, cr0, [r9], {-0}
    79f0:	06da1402 	ldrbeq	r1, [sl], r2, lsl #8
    79f4:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    79f8:	00000a57 	andeq	r0, r0, r7, asr sl
    79fc:	1e026c09 	cdpne	12, 0, cr6, cr2, cr9, {0}
    7a00:	000006da 	ldrdeq	r0, [r0], -sl
    7a04:	0461180c 	strbteq	r1, [r1], #-2060	; 0xfffff7f4
    7a08:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    7a0c:	00a30802 	adceq	r0, r3, r2, lsl #16
    7a10:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    7a14:	00000413 	andeq	r0, r0, r3, lsl r4
    7a18:	08026f09 	stmdaeq	r2, {r0, r3, r8, r9, sl, fp, sp, lr}
    7a1c:	000008da 	ldrdeq	r0, [r0], -sl
    7a20:	0a0a1814 	beq	28da78 <__ccfg+0x26dad0>
    7a24:	72090000 	andvc	r0, r9, #0
    7a28:	00a30702 	adceq	r0, r3, r2, lsl #14
    7a2c:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    7a30:	00003d5c 	andeq	r3, r0, ip, asr sp
    7a34:	16027309 	strne	r7, [r2], -r9, lsl #6
    7a38:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7a3c:	05a51834 	streq	r1, [r5, #2100]!	; 0x834
    7a40:	75090000 	strvc	r0, [r9, #-0]
    7a44:	00a30702 	adceq	r0, r3, r2, lsl #14
    7a48:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
    7a4c:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    7a50:	0a027709 	beq	a567c <__ccfg+0x856d4>
    7a54:	00000902 	andeq	r0, r0, r2, lsl #18
    7a58:	02d0183c 	sbcseq	r1, r0, #60, 16	; 0x3c0000
    7a5c:	7a090000 	bvc	247a64 <__ccfg+0x227abc>
    7a60:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    7a64:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    7a68:	0000037c 	andeq	r0, r0, ip, ror r3
    7a6c:	07027b09 	streq	r7, [r2, -r9, lsl #22]
    7a70:	000000a3 	andeq	r0, r0, r3, lsr #1
    7a74:	04b61844 	ldrteq	r1, [r6], #2116	; 0x844
    7a78:	7c090000 	stcvc	0, cr0, [r9], {-0}
    7a7c:	01b81302 			; <UNDEFINED> instruction: 0x01b81302
    7a80:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
    7a84:	0000060a 	andeq	r0, r0, sl, lsl #12
    7a88:	14027d09 	strne	r7, [r2], #-3337	; 0xfffff2f7
    7a8c:	00000908 	andeq	r0, r0, r8, lsl #18
    7a90:	083d184c 	ldmdaeq	sp!, {r2, r3, r6, fp, ip}
    7a94:	80090000 	andhi	r0, r9, r0
    7a98:	00a30702 	adceq	r0, r3, r2, lsl #14
    7a9c:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    7aa0:	000008d4 	ldrdeq	r0, [r0], -r4
    7aa4:	09028109 	stmdbeq	r2, {r0, r3, r8, pc}
    7aa8:	000005eb 	andeq	r0, r0, fp, ror #11
    7aac:	08ee1854 	stmiaeq	lr!, {r2, r4, r6, fp, ip}^
    7ab0:	a4090000 	strge	r0, [r9], #-0
    7ab4:	08b50702 	ldmeq	r5!, {r1, r8, r9, sl}
    7ab8:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
    7abc:	0000078a 	andeq	r0, r0, sl, lsl #15
    7ac0:	1302a809 	movwne	sl, #10249	; 0x2809
    7ac4:	000002e9 	andeq	r0, r0, r9, ror #5
    7ac8:	32190148 	andscc	r0, r9, #72, 2
    7acc:	09000005 	stmdbeq	r0, {r0, r2}
    7ad0:	a61202a9 	ldrge	r0, [r2], -r9, lsr #5
    7ad4:	4c000002 	stcmi	0, cr0, [r0], {2}
    7ad8:	05191901 	ldreq	r1, [r9, #-2305]	; 0xfffff6ff
    7adc:	ad090000 	stcge	0, cr0, [r9, #-0]
    7ae0:	091a0c02 	ldmdbeq	sl, {r1, sl, fp}
    7ae4:	02dc0000 	sbcseq	r0, ip, #0
    7ae8:	00095119 	andeq	r5, r9, r9, lsl r1
    7aec:	02b20900 	adcseq	r0, r2, #0, 18
    7af0:	00069b10 	andeq	r9, r6, r0, lsl fp
    7af4:	1902e000 	stmdbne	r2, {sp, lr, pc}
    7af8:	000007cb 	andeq	r0, r0, fp, asr #15
    7afc:	0a02b409 	beq	b4b28 <__ccfg+0x94b80>
    7b00:	00000926 	andeq	r0, r0, r6, lsr #18
    7b04:	110002ec 	smlattne	r0, ip, r2, r0
    7b08:	0005f104 	andeq	pc, r5, r4, lsl #2
    7b0c:	08010300 	stmdaeq	r1, {r8, r9}
    7b10:	000008e5 	andeq	r0, r0, r5, ror #17
    7b14:	0005f104 	andeq	pc, r5, r4, lsl #2
    7b18:	78041100 	stmdavc	r4, {r8, ip}
    7b1c:	15000004 	strne	r0, [r0, #-4]
    7b20:	0000a301 	andeq	sl, r0, r1, lsl #6
    7b24:	00062200 	andeq	r2, r6, r0, lsl #4
    7b28:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    7b2c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    7b30:	16000001 	strne	r0, [r0], -r1
    7b34:	00000622 	andeq	r0, r0, r2, lsr #12
    7b38:	0000a316 	andeq	sl, r0, r6, lsl r3
    7b3c:	04110000 	ldreq	r0, [r1], #-0
    7b40:	000005f8 	strdeq	r0, [r0], -r8
    7b44:	06030411 			; <UNDEFINED> instruction: 0x06030411
    7b48:	01150000 	tsteq	r5, r0
    7b4c:	000000ca 	andeq	r0, r0, sl, asr #1
    7b50:	0000064d 	andeq	r0, r0, sp, asr #12
    7b54:	00049716 	andeq	r9, r4, r6, lsl r7
    7b58:	01381600 	teqeq	r8, r0, lsl #12
    7b5c:	ca160000 	bgt	587b64 <__ccfg+0x567bbc>
    7b60:	16000000 	strne	r0, [r0], -r0
    7b64:	000000a3 	andeq	r0, r0, r3, lsr #1
    7b68:	2e041100 	adfcss	f1, f4, f0
    7b6c:	15000006 	strne	r0, [r0, #-6]
    7b70:	0000a301 	andeq	sl, r0, r1, lsl #6
    7b74:	00066800 	andeq	r6, r6, r0, lsl #16
    7b78:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    7b7c:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    7b80:	00000001 	andeq	r0, r0, r1
    7b84:	06530411 			; <UNDEFINED> instruction: 0x06530411
    7b88:	650a0000 	strvs	r0, [sl, #-0]
    7b8c:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    7b90:	0b000006 	bleq	7bb0 <__exidx_end+0x2c80>
    7b94:	000000aa 	andeq	r0, r0, sl, lsr #1
    7b98:	650a0002 	strvs	r0, [sl, #-2]
    7b9c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    7ba0:	0b000006 	bleq	7bc0 <__exidx_end+0x2c90>
    7ba4:	000000aa 	andeq	r0, r0, sl, lsr #1
    7ba8:	f1070000 			; <UNDEFINED> instruction: 0xf1070000
    7bac:	09000003 	stmdbeq	r0, {r0, r1}
    7bb0:	351a0124 	ldrcc	r0, [sl, #-292]	; 0xfffffedc
    7bb4:	1a000003 	bne	7bc8 <__exidx_end+0x2c98>
    7bb8:	00004382 	andeq	r4, r0, r2, lsl #7
    7bbc:	0128090c 			; <UNDEFINED> instruction: 0x0128090c
    7bc0:	0006d408 	andeq	sp, r6, r8, lsl #8
    7bc4:	0a401800 	beq	100dbcc <__ccfg+0xfedc24>
    7bc8:	2a090000 	bcs	247bd0 <__ccfg+0x227c28>
    7bcc:	06d41101 	ldrbeq	r1, [r4], r1, lsl #2
    7bd0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7bd4:	0000088f 	andeq	r0, r0, pc, lsl #17
    7bd8:	07012b09 	streq	r2, [r1, -r9, lsl #22]
    7bdc:	000000a3 	andeq	r0, r0, r3, lsr #1
    7be0:	05911804 	ldreq	r1, [r1, #2052]	; 0x804
    7be4:	2c090000 	stccs	0, cr0, [r9], {-0}
    7be8:	06da0b01 	ldrbeq	r0, [sl], r1, lsl #22
    7bec:	00080000 	andeq	r0, r8, r0
    7bf0:	069b0411 			; <UNDEFINED> instruction: 0x069b0411
    7bf4:	04110000 	ldreq	r0, [r1], #-0
    7bf8:	0000068e 	andeq	r0, r0, lr, lsl #13
    7bfc:	0003681a 	andeq	r6, r3, sl, lsl r8
    7c00:	44090e00 	strmi	r0, [r9], #-3584	; 0xfffff200
    7c04:	07190801 	ldreq	r0, [r9, -r1, lsl #16]
    7c08:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7c0c:	09000011 	stmdbeq	r0, {r0, r4}
    7c10:	19120145 	ldmdbne	r2, {r0, r2, r6, r8}
    7c14:	00000007 	andeq	r0, r0, r7
    7c18:	00061c18 	andeq	r1, r6, r8, lsl ip
    7c1c:	01460900 	cmpeq	r6, r0, lsl #18
    7c20:	00071912 	andeq	r1, r7, r2, lsl r9
    7c24:	2d180600 	ldccs	6, cr0, [r8, #-0]
    7c28:	09000010 	stmdbeq	r0, {r4}
    7c2c:	78120147 	ldmdavc	r2, {r0, r1, r2, r6, r8}
    7c30:	0c000000 	stceq	0, cr0, [r0], {-0}
    7c34:	00780a00 	rsbseq	r0, r8, r0, lsl #20
    7c38:	07290000 	streq	r0, [r9, -r0]!
    7c3c:	aa0b0000 	bge	2c7c44 <__ccfg+0x2a7c9c>
    7c40:	02000000 	andeq	r0, r0, #0
    7c44:	09d01b00 	ldmibeq	r0, {r8, r9, fp, ip}^
    7c48:	3e070285 	cdpcc	2, 0, cr0, cr7, cr5, {4}
    7c4c:	18000008 	stmdane	r0, {r3}
    7c50:	000009fd 	strdeq	r0, [r0], -sp
    7c54:	18028709 	stmdane	r2, {r0, r3, r8, r9, sl, pc}
    7c58:	000000aa 	andeq	r0, r0, sl, lsr #1
    7c5c:	09591800 	ldmdbeq	r9, {fp, ip}^
    7c60:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    7c64:	05eb1202 	strbeq	r1, [fp, #514]!	; 0x202
    7c68:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    7c6c:	000003a9 	andeq	r0, r0, r9, lsr #7
    7c70:	10028909 	andne	r8, r2, r9, lsl #18
    7c74:	0000083e 	andeq	r0, r0, lr, lsr r8
    7c78:	081c1808 	ldmdaeq	ip, {r3, fp, ip}
    7c7c:	8a090000 	bhi	247c84 <__ccfg+0x227cdc>
    7c80:	01ce1702 	biceq	r1, lr, r2, lsl #14
    7c84:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    7c88:	000005d9 	ldrdeq	r0, [r0], -r9
    7c8c:	0f028b09 	svceq	0x00028b09
    7c90:	000000a3 	andeq	r0, r0, r3, lsr #1
    7c94:	0a3b1848 	beq	ecddbc <__ccfg+0xeade14>
    7c98:	8c090000 	stchi	0, cr0, [r9], {-0}
    7c9c:	009c2c02 	addseq	r2, ip, r2, lsl #24
    7ca0:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    7ca4:	00000085 	andeq	r0, r0, r5, lsl #1
    7ca8:	1a028d09 	bne	ab0d4 <__ccfg+0x8b12c>
    7cac:	000006e0 	andeq	r0, r0, r0, ror #13
    7cb0:	04ee1858 	strbteq	r1, [lr], #2136	; 0x858
    7cb4:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    7cb8:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7cbc:	18680000 	stmdane	r8!, {}^	; <UNPREDICTABLE>
    7cc0:	00000966 	andeq	r0, r0, r6, ror #18
    7cc4:	16028f09 	strne	r8, [r2], -r9, lsl #30
    7cc8:	0000012c 	andeq	r0, r0, ip, lsr #2
    7ccc:	006f1870 	rsbeq	r1, pc, r0, ror r8	; <UNPREDICTABLE>
    7cd0:	90090000 	andls	r0, r9, r0
    7cd4:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7cd8:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    7cdc:	0000084d 	andeq	r0, r0, sp, asr #16
    7ce0:	10029109 	andne	r9, r2, r9, lsl #2
    7ce4:	0000084e 	andeq	r0, r0, lr, asr #16
    7ce8:	03861880 	orreq	r1, r6, #128, 16	; 0x800000
    7cec:	92090000 	andls	r0, r9, #0
    7cf0:	085e1002 	ldmdaeq	lr, {r1, ip}^
    7cf4:	18880000 	stmne	r8, {}	; <UNPREDICTABLE>
    7cf8:	00000911 	andeq	r0, r0, r1, lsl r9
    7cfc:	0f029309 	svceq	0x00029309
    7d00:	000000a3 	andeq	r0, r0, r3, lsr #1
    7d04:	022918a0 	eoreq	r1, r9, #160, 16	; 0xa00000
    7d08:	94090000 	strls	r0, [r9], #-0
    7d0c:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7d10:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
    7d14:	00000523 	andeq	r0, r0, r3, lsr #10
    7d18:	16029509 	strne	r9, [r2], -r9, lsl #10
    7d1c:	0000012c 	andeq	r0, r0, ip, lsr #2
    7d20:	046b18ac 	strbteq	r1, [fp], #-2220	; 0xfffff754
    7d24:	96090000 	strls	r0, [r9], -r0
    7d28:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7d2c:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    7d30:	00000653 	andeq	r0, r0, r3, asr r6
    7d34:	16029709 	strne	r9, [r2], -r9, lsl #14
    7d38:	0000012c 	andeq	r0, r0, ip, lsr #2
    7d3c:	04dd18bc 	ldrbeq	r1, [sp], #2236	; 0x8bc
    7d40:	98090000 	stmdals	r9, {}	; <UNPREDICTABLE>
    7d44:	012c1602 			; <UNDEFINED> instruction: 0x012c1602
    7d48:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    7d4c:	000006f6 	strdeq	r0, [r0], -r6
    7d50:	08029909 	stmdaeq	r2, {r0, r3, r8, fp, ip, pc}
    7d54:	000000a3 	andeq	r0, r0, r3, lsr #1
    7d58:	f10a00cc 	cpsie	if,#12
    7d5c:	4e000005 	cdpmi	0, 0, cr0, cr0, cr5, {0}
    7d60:	0b000008 	bleq	7d88 <__exidx_end+0x2e58>
    7d64:	000000aa 	andeq	r0, r0, sl, lsr #1
    7d68:	f10a0019 	cpsie	,#25
    7d6c:	5e000005 	cdppl	0, 0, cr0, cr0, cr5, {0}
    7d70:	0b000008 	bleq	7d98 <__exidx_end+0x2e68>
    7d74:	000000aa 	andeq	r0, r0, sl, lsr #1
    7d78:	f10a0007 	cpsie	,#7
    7d7c:	6e000005 	cdpvs	0, 0, cr0, cr0, cr5, {0}
    7d80:	0b000008 	bleq	7da8 <__exidx_end+0x2e78>
    7d84:	000000aa 	andeq	r0, r0, sl, lsr #1
    7d88:	f01b0017 			; <UNDEFINED> instruction: 0xf01b0017
    7d8c:	07029e09 	streq	r9, [r2, -r9, lsl #28]
    7d90:	00000895 	muleq	r0, r5, r8
    7d94:	00036118 	andeq	r6, r3, r8, lsl r1
    7d98:	02a10900 	adceq	r0, r1, #0, 18
    7d9c:	0008951b 	andeq	r9, r8, fp, lsl r5
    7da0:	5f180000 	svcpl	0x00180000
    7da4:	0900000a 	stmdbeq	r0, {r1, r3}
    7da8:	a51802a2 	ldrge	r0, [r8, #-674]	; 0xfffffd5e
    7dac:	78000008 	stmdavc	r0, {r3}
    7db0:	032f0a00 			; <UNDEFINED> instruction: 0x032f0a00
    7db4:	08a50000 	stmiaeq	r5!, {}	; <UNPREDICTABLE>
    7db8:	aa0b0000 	bge	2c7dc0 <__ccfg+0x2a7e18>
    7dbc:	1d000000 	stcne	0, cr0, [r0, #-0]
    7dc0:	00aa0a00 	adceq	r0, sl, r0, lsl #20
    7dc4:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    7dc8:	aa0b0000 	bge	2c7dd0 <__ccfg+0x2a7e28>
    7dcc:	1d000000 	stcne	0, cr0, [r0, #-0]
    7dd0:	09f01c00 	ldmibeq	r0!, {sl, fp, ip}^
    7dd4:	da030283 	ble	c87e8 <__ccfg+0xa8840>
    7dd8:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    7ddc:	0000436c 	andeq	r4, r0, ip, ror #6
    7de0:	0b029a09 	bleq	ae60c <__ccfg+0x8e664>
    7de4:	00000729 	andeq	r0, r0, r9, lsr #14
    7de8:	00082b1d 	andeq	r2, r8, sp, lsl fp
    7dec:	02a30900 	adceq	r0, r3, #0, 18
    7df0:	00086e0b 	andeq	r6, r8, fp, lsl #28
    7df4:	f10a0000 	cpsie	,#0
    7df8:	ea000005 	b	7e14 <__exidx_end+0x2ee4>
    7dfc:	0b000008 	bleq	7e24 <__exidx_end+0x2ef4>
    7e00:	000000aa 	andeq	r0, r0, sl, lsr #1
    7e04:	461e0018 			; <UNDEFINED> instruction: 0x461e0018
    7e08:	0100000a 	tsteq	r0, sl
    7e0c:	08ea0411 	stmiaeq	sl!, {r0, r4, sl}^
    7e10:	011f0000 	tsteq	pc, r0
    7e14:	00000902 	andeq	r0, r0, r2, lsl #18
    7e18:	00049716 	andeq	r9, r4, r6, lsl r7
    7e1c:	04110000 	ldreq	r0, [r1], #-0
    7e20:	000008f6 	strdeq	r0, [r0], -r6
    7e24:	01b80411 			; <UNDEFINED> instruction: 0x01b80411
    7e28:	011f0000 	tsteq	pc, r0
    7e2c:	0000091a 	andeq	r0, r0, sl, lsl r9
    7e30:	0000a316 	andeq	sl, r0, r6, lsl r3
    7e34:	04110000 	ldreq	r0, [r1], #-0
    7e38:	00000920 	andeq	r0, r0, r0, lsr #18
    7e3c:	090e0411 	stmdbeq	lr, {r0, r4, sl}
    7e40:	8e0a0000 	cdphi	0, 0, cr0, cr10, cr0, {0}
    7e44:	36000006 	strcc	r0, [r0], -r6
    7e48:	0b000009 	bleq	7e74 <__exidx_end+0x2f44>
    7e4c:	000000aa 	andeq	r0, r0, sl, lsr #1
    7e50:	f8200002 			; <UNDEFINED> instruction: 0xf8200002
    7e54:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7e58:	97170333 			; <UNDEFINED> instruction: 0x97170333
    7e5c:	01000004 	tsteq	r0, r4
    7e60:	07f12001 	ldrbeq	r2, [r1, r1]!
    7e64:	34090000 	strcc	r0, [r9], #-0
    7e68:	049d1d03 	ldreq	r1, [sp], #3331	; 0xd03
    7e6c:	01010000 	mrseq	r0, (UNDEF: 1)
    7e70:	001fb002 	andseq	fp, pc, r2
    7e74:	123b0b00 	eorsne	r0, fp, #0, 22
    7e78:	0000007f 	andeq	r0, r0, pc, ror r0
    7e7c:	400b080c 	andmi	r0, fp, ip, lsl #16
    7e80:	00098409 	andeq	r8, r9, r9, lsl #8
    7e84:	1ac70d00 	bne	ff1cb28c <_estack+0xdf1c628c>
    7e88:	410b0000 	mrsmi	r0, (UNDEF: 11)
    7e8c:	0009840d 	andeq	r8, r9, sp, lsl #8
    7e90:	f70d0000 			; <UNDEFINED> instruction: 0xf70d0000
    7e94:	0b00001c 	bleq	7f0c <__exidx_end+0x2fdc>
    7e98:	09840d42 	stmibeq	r4, {r1, r6, r8, sl, fp}
    7e9c:	00040000 	andeq	r0, r4, r0
    7ea0:	00590411 	subseq	r0, r9, r1, lsl r4
    7ea4:	03020000 	movweq	r0, #8192	; 0x2000
    7ea8:	0b000022 	bleq	7f38 <__exidx_end+0x3008>
    7eac:	09600343 	stmdbeq	r0!, {r0, r1, r6, r8, r9}^
    7eb0:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
    7eb4:	0c00001d 	stceq	0, cr0, [r0], {29}
    7eb8:	09a22b3c 	stmibeq	r2!, {r2, r3, r4, r5, r8, r9, fp, sp}
    7ebc:	160f0000 	strne	r0, [pc], -r0
    7ec0:	10000020 	andne	r0, r0, r0, lsr #32
    7ec4:	fe156f0c 	cdp2	15, 1, cr6, cr5, cr12, {0}
    7ec8:	0d000009 	stceq	0, cr0, [r0, #-36]	; 0xffffffdc
    7ecc:	000019f6 	strdeq	r1, [r0], -r6
    7ed0:	6c0d700c 	stcvs	0, cr7, [sp], {12}
    7ed4:	00000000 	andeq	r0, r0, r0
    7ed8:	0005970d 	andeq	r9, r5, sp, lsl #14
    7edc:	0d710c00 	ldcleq	12, cr0, [r1, #-0]
    7ee0:	0000006c 	andeq	r0, r0, ip, rrx
    7ee4:	1d560d02 	ldclne	13, cr0, [r6, #-8]
    7ee8:	740c0000 	strvc	r0, [ip], #-0
    7eec:	000bc013 	andeq	ip, fp, r3, lsl r0
    7ef0:	ee0d0400 	cfcpys	mvf0, mvf13
    7ef4:	0c00001a 	stceq	0, cr0, [r0], {26}
    7ef8:	09540c75 	ldmdbeq	r4, {r0, r2, r4, r5, r6, sl, fp}^
    7efc:	0d080000 	stceq	0, cr0, [r8, #-0]
    7f00:	00001d86 	andeq	r1, r0, r6, lsl #27
    7f04:	4c067d0c 	stcmi	13, cr7, [r6], {12}
    7f08:	0c00000b 	stceq	0, cr0, [r0], {11}
    7f0c:	001cd00d 	andseq	sp, ip, sp
    7f10:	06810c00 	streq	r0, [r1], r0, lsl #24
    7f14:	00000b96 	muleq	r0, r6, fp
    7f18:	6202000d 	andvs	r0, r2, #13
    7f1c:	0c00001b 	stceq	0, cr0, [r0], {27}
    7f20:	0a0a2a3f 	beq	292824 <__ccfg+0x27287c>
    7f24:	550f0000 	strpl	r0, [pc, #-0]	; 7f2c <__exidx_end+0x2ffc>
    7f28:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    7f2c:	c115e00c 	tstgt	r5, ip
    7f30:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
    7f34:	000019f6 	strdeq	r1, [r0], -r6
    7f38:	6c0de10c 	stfvsd	f6, [sp], {12}
    7f3c:	00000000 	andeq	r0, r0, r0
    7f40:	0005970d 	andeq	r9, r5, sp, lsl #14
    7f44:	0de20c00 	stcleq	12, cr0, [r2]
    7f48:	0000006c 	andeq	r0, r0, ip, rrx
    7f4c:	1d560d02 	ldclne	13, cr0, [r6, #-8]
    7f50:	e50c0000 	str	r0, [ip, #-0]
    7f54:	000bc013 	andeq	ip, fp, r3, lsl r0
    7f58:	ee0d0400 	cfcpys	mvf0, mvf13
    7f5c:	0c00001a 	stceq	0, cr0, [r0], {26}
    7f60:	09540ce6 	ldmdbeq	r4, {r1, r2, r5, r6, r7, sl, fp}^
    7f64:	0d080000 	stceq	0, cr0, [r8, #-0]
    7f68:	00001d86 	andeq	r1, r0, r6, lsl #27
    7f6c:	cc06ee0c 	stcgt	14, cr14, [r6], {12}
    7f70:	0c00000b 	stceq	0, cr0, [r0], {11}
    7f74:	001cd00d 	andseq	sp, ip, sp
    7f78:	06f20c00 	ldrbteq	r0, [r2], r0, lsl #24
    7f7c:	00000c16 	andeq	r0, r0, r6, lsl ip
    7f80:	21290d0d 			; <UNDEFINED> instruction: 0x21290d0d
    7f84:	f30c0000 	vhadd.u8	d0, d12, d0
    7f88:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7f8c:	790d0e00 	stmdbvc	sp, {r9, sl, fp}
    7f90:	0c00001e 	stceq	0, cr0, [r0], {30}
    7f94:	006c0df4 	strdeq	r0, [ip], #-212	; 0xffffff2c	; <UNPREDICTABLE>
    7f98:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7f9c:	00001b95 	muleq	r0, r5, fp
    7fa0:	4006fa0c 	andmi	pc, r6, ip, lsl #20
    7fa4:	1200000c 	andne	r0, r0, #12
    7fa8:	001d360d 	andseq	r3, sp, sp, lsl #12
    7fac:	0cfb0c00 	ldcleq	12, cr0, [fp]
    7fb0:	00000059 	andeq	r0, r0, r9, asr r0
    7fb4:	20850d13 	addcs	r0, r5, r3, lsl sp
    7fb8:	fc0c0000 	stc2	0, cr0, [ip], {-0}
    7fbc:	0000590c 	andeq	r5, r0, ip, lsl #18
    7fc0:	8e0d1400 	cfcpyshi	mvf1, mvf13
    7fc4:	0c000020 	stceq	0, cr0, [r0], {32}
    7fc8:	00590cfd 	ldrsheq	r0, [r9], #-205	; 0xffffff33
    7fcc:	0d150000 	ldceq	0, cr0, [r5, #-0]
    7fd0:	00002097 	muleq	r0, r7, r0
    7fd4:	6c0dfe0c 	stcvs	14, cr15, [sp], {12}
    7fd8:	16000000 	strne	r0, [r0], -r0
    7fdc:	21a40200 			; <UNDEFINED> instruction: 0x21a40200
    7fe0:	440c0000 	strmi	r0, [ip], #-0
    7fe4:	000acd36 	andeq	ip, sl, r6, lsr sp
    7fe8:	218b1a00 	orrcs	r1, fp, r0, lsl #20
    7fec:	0c140000 	ldceq	0, cr0, [r4], {-0}
    7ff0:	4c15019f 	ldfmis	f0, [r5], {159}	; 0x9f
    7ff4:	1800000b 	stmdane	r0, {r0, r1, r3}
    7ff8:	000019f6 	strdeq	r1, [r0], -r6
    7ffc:	0d01a00c 	stceq	0, cr10, [r1, #-48]	; 0xffffffd0
    8000:	0000006c 	andeq	r0, r0, ip, rrx
    8004:	05971800 	ldreq	r1, [r7, #2048]	; 0x800
    8008:	a10c0000 	mrsge	r0, (UNDEF: 12)
    800c:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    8010:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    8014:	00001d56 	andeq	r1, r0, r6, asr sp
    8018:	1301a40c 	movwne	sl, #5132	; 0x140c
    801c:	00000bc0 	andeq	r0, r0, r0, asr #23
    8020:	1aee1804 	bne	ffb8e038 <_estack+0xdfb89038>
    8024:	a50c0000 	strge	r0, [ip, #-0]
    8028:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    802c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    8030:	00001d86 	andeq	r1, r0, r6, lsl #27
    8034:	0601ad0c 	streq	sl, [r1], -ip, lsl #26
    8038:	00000c6a 	andeq	r0, r0, sl, ror #24
    803c:	1cd0180c 	ldclne	8, cr1, [r0], {12}
    8040:	b10c0000 	mrslt	r0, (UNDEF: 12)
    8044:	0cb90601 	ldceq	6, cr0, [r9], #4
    8048:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    804c:	00001d36 	andeq	r1, r0, r6, lsr sp
    8050:	0d01b20c 	sfmeq	f3, 1, [r1, #-48]	; 0xffffffd0
    8054:	0000006c 	andeq	r0, r0, ip, rrx
    8058:	1c24180e 	stcne	8, cr1, [r4], #-56	; 0xffffffc8
    805c:	b30c0000 	movwlt	r0, #49152	; 0xc000
    8060:	09540c01 	ldmdbeq	r4, {r0, sl, fp}^
    8064:	00100000 	andseq	r0, r0, r0
    8068:	760c010c 	strvc	r0, [ip], -ip, lsl #2
    806c:	000b9604 	andeq	r9, fp, r4, lsl #12
    8070:	22492100 	subcs	r2, r9, #0, 2
    8074:	770c0000 	strvc	r0, [ip, -r0]
    8078:	0000590f 	andeq	r5, r0, pc, lsl #18
    807c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8080:	1bd72100 	blne	ff5d0488 <_estack+0xdf5cb488>
    8084:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
    8088:	0000590f 	andeq	r5, r0, pc, lsl #18
    808c:	03010100 	movweq	r0, #4352	; 0x1100
    8090:	1c972100 	ldfnes	f2, [r7], {0}
    8094:	7a0c0000 	bvc	30809c <__ccfg+0x2e80f4>
    8098:	0000590f 	andeq	r5, r0, pc, lsl #18
    809c:	01020100 	mrseq	r0, (UNDEF: 18)
    80a0:	1a652100 	bne	19504a8 <__ccfg+0x1930500>
    80a4:	7b0c0000 	blvc	3080ac <__ccfg+0x2e8104>
    80a8:	0000590f 	andeq	r5, r0, pc, lsl #18
    80ac:	00010100 	andeq	r0, r1, r0, lsl #2
    80b0:	010c0000 	mrseq	r0, (UNDEF: 12)
    80b4:	c0047e0c 	andgt	r7, r4, ip, lsl #28
    80b8:	2100000b 	tstcs	r0, fp
    80bc:	000020b3 	strheq	r2, [r0], -r3
    80c0:	590f7f0c 	stmdbpl	pc, {r2, r3, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    80c4:	01000000 	mrseq	r0, (UNDEF: 0)
    80c8:	21000404 	tstcs	r0, r4, lsl #8
    80cc:	0000220f 	andeq	r2, r0, pc, lsl #4
    80d0:	590f800c 	stmdbpl	pc, {r2, r3, pc}	; <UNPREDICTABLE>
    80d4:	01000000 	mrseq	r0, (UNDEF: 0)
    80d8:	00000004 	andeq	r0, r0, r4
    80dc:	09960411 	ldmibeq	r6, {r0, r4, sl}
    80e0:	04110000 	ldreq	r0, [r1], #-0
    80e4:	0000007f 	andeq	r0, r0, pc, ror r0
    80e8:	e70c010c 	str	r0, [ip, -ip, lsl #2]
    80ec:	000c1604 	andeq	r1, ip, r4, lsl #12
    80f0:	22492100 	subcs	r2, r9, #0, 2
    80f4:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    80f8:	0000590f 	andeq	r5, r0, pc, lsl #18
    80fc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8100:	1bd72100 	blne	ff5d0508 <_estack+0xdf5cb508>
    8104:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
    8108:	0000590f 	andeq	r5, r0, pc, lsl #18
    810c:	03010100 	movweq	r0, #4352	; 0x1100
    8110:	1c972100 	ldfnes	f2, [r7], {0}
    8114:	eb0c0000 	bl	30811c <__ccfg+0x2e8174>
    8118:	0000590f 	andeq	r5, r0, pc, lsl #18
    811c:	01020100 	mrseq	r0, (UNDEF: 18)
    8120:	1a652100 	bne	1950528 <__ccfg+0x1930580>
    8124:	ec0c0000 	stc	0, cr0, [ip], {-0}
    8128:	0000590f 	andeq	r5, r0, pc, lsl #18
    812c:	00010100 	andeq	r0, r1, r0, lsl #2
    8130:	010c0000 	mrseq	r0, (UNDEF: 12)
    8134:	4004ef0c 	andmi	lr, r4, ip, lsl #30
    8138:	2100000c 	tstcs	r0, ip
    813c:	000020b3 	strheq	r2, [r0], -r3
    8140:	590ff00c 	stmdbpl	pc, {r2, r3, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8144:	01000000 	mrseq	r0, (UNDEF: 0)
    8148:	21000404 	tstcs	r0, r4, lsl #8
    814c:	0000220f 	andeq	r2, r0, pc, lsl #4
    8150:	590ff10c 	stmdbpl	pc, {r2, r3, r8, ip, sp, lr, pc}	; <UNPREDICTABLE>
    8154:	01000000 	mrseq	r0, (UNDEF: 0)
    8158:	00000004 	andeq	r0, r0, r4
    815c:	f50c010c 			; <UNDEFINED> instruction: 0xf50c010c
    8160:	000c6a04 	andeq	r6, ip, r4, lsl #20
    8164:	1bc12100 	blne	ff05056c <_estack+0xdf04b56c>
    8168:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    816c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8170:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8174:	22322100 	eorscs	r2, r2, #0, 2
    8178:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
    817c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8180:	01060100 	mrseq	r0, (UNDEF: 22)
    8184:	011b0000 	tsteq	fp, r0
    8188:	0401a60c 	streq	sl, [r1], #-1548	; 0xfffff9f4
    818c:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    8190:	00224922 	eoreq	r4, r2, r2, lsr #18
    8194:	01a70c00 			; <UNDEFINED> instruction: 0x01a70c00
    8198:	0000590f 	andeq	r5, r0, pc, lsl #18
    819c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    81a0:	1bd72200 	blne	ff5d09a8 <_estack+0xdf5cb9a8>
    81a4:	a80c0000 	stmdage	ip, {}	; <UNPREDICTABLE>
    81a8:	00590f01 	subseq	r0, r9, r1, lsl #30
    81ac:	01010000 	mrseq	r0, (UNDEF: 1)
    81b0:	97220003 	strls	r0, [r2, -r3]!
    81b4:	0c00001c 	stceq	0, cr0, [r0], {28}
    81b8:	590f01aa 	stmdbpl	pc, {r1, r3, r5, r7, r8}	; <UNPREDICTABLE>
    81bc:	01000000 	mrseq	r0, (UNDEF: 0)
    81c0:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    81c4:	00001a65 	andeq	r1, r0, r5, ror #20
    81c8:	0f01ab0c 	svceq	0x0001ab0c
    81cc:	00000059 	andeq	r0, r0, r9, asr r0
    81d0:	00000101 	andeq	r0, r0, r1, lsl #2
    81d4:	0c011b00 			; <UNDEFINED> instruction: 0x0c011b00
    81d8:	e60401ae 	str	r0, [r4], -lr, lsr #3
    81dc:	2200000c 	andcs	r0, r0, #12
    81e0:	000020b3 	strheq	r2, [r0], -r3
    81e4:	0f01af0c 	svceq	0x0001af0c
    81e8:	00000059 	andeq	r0, r0, r9, asr r0
    81ec:	00040401 	andeq	r0, r4, r1, lsl #8
    81f0:	00220f22 	eoreq	r0, r2, r2, lsr #30
    81f4:	01b00c00 	lslseq	r0, r0, #24
    81f8:	0000590f 	andeq	r5, r0, pc, lsl #18
    81fc:	00040100 	andeq	r0, r4, r0, lsl #2
    8200:	04110000 	ldreq	r0, [r1], #-0
    8204:	0000098a 	andeq	r0, r0, sl, lsl #19
    8208:	0020fe02 	eoreq	pc, r0, r2, lsl #28
    820c:	2f3d0d00 	svccs	0x003d0d00
    8210:	00000cf8 	strdeq	r0, [r0], -r8
    8214:	0021100f 	eoreq	r1, r1, pc
    8218:	780d1800 	stmdavc	sp, {fp, ip}
    821c:	000d8815 	andeq	r8, sp, r5, lsl r8
    8220:	19f60d00 	ldmibne	r6!, {r8, sl, fp}^
    8224:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    8228:	00006c0d 	andeq	r6, r0, sp, lsl #24
    822c:	970d0000 	strls	r0, [sp, -r0]
    8230:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    8234:	006c0d7a 	rsbeq	r0, ip, sl, ror sp
    8238:	0d020000 	stceq	0, cr0, [r2, #-0]
    823c:	00001d56 	andeq	r1, r0, r6, asr sp
    8240:	c0137d0d 	andsgt	r7, r3, sp, lsl #26
    8244:	0400000b 	streq	r0, [r0], #-11
    8248:	001aee0d 	andseq	lr, sl, sp, lsl #28
    824c:	0c7e0d00 	ldcleq	13, cr0, [lr], #-0
    8250:	00000954 	andeq	r0, r0, r4, asr r9
    8254:	1d860d08 	stcne	13, cr0, [r6, #32]
    8258:	860d0000 	strhi	r0, [sp], -r0
    825c:	0010f306 	andseq	pc, r0, r6, lsl #6
    8260:	d00d0c00 	andle	r0, sp, r0, lsl #24
    8264:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8268:	113d068a 	teqne	sp, sl, lsl #13
    826c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    8270:	00001b33 	andeq	r1, r0, r3, lsr fp
    8274:	6706930d 	strvs	r9, [r6, -sp, lsl #6]
    8278:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
    827c:	0020ac0d 	eoreq	sl, r0, sp, lsl #24
    8280:	0c940d00 	ldceq	13, cr0, [r4], {0}
    8284:	00000059 	andeq	r0, r0, r9, asr r0
    8288:	1dd20d0f 	ldclne	13, cr0, [r2, #60]	; 0x3c
    828c:	950d0000 	strls	r0, [sp, #-0]
    8290:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8294:	230d1000 	movwcs	r1, #53248	; 0xd000
    8298:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    829c:	09840d96 	stmibeq	r4, {r1, r2, r4, r7, r8, sl, fp}
    82a0:	00140000 	andseq	r0, r4, r0
    82a4:	001f6202 	andseq	r6, pc, r2, lsl #4
    82a8:	2f3e0d00 	svccs	0x003e0d00
    82ac:	00000d94 	muleq	r0, r4, sp
    82b0:	001c5b0f 	andseq	r5, ip, pc, lsl #22
    82b4:	9f0d2400 	svcls	0x000d2400
    82b8:	000e7215 	andeq	r7, lr, r5, lsl r2
    82bc:	19f60d00 	ldmibne	r6!, {r8, sl, fp}^
    82c0:	a00d0000 	andge	r0, sp, r0
    82c4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    82c8:	970d0000 	strls	r0, [sp, -r0]
    82cc:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    82d0:	006c0da1 	rsbeq	r0, ip, r1, lsr #27
    82d4:	0d020000 	stceq	0, cr0, [r2, #-0]
    82d8:	00001d56 	andeq	r1, r0, r6, asr sp
    82dc:	c013a40d 	andsgt	sl, r3, sp, lsl #8
    82e0:	0400000b 	streq	r0, [r0], #-11
    82e4:	001aee0d 	andseq	lr, sl, sp, lsl #28
    82e8:	0ca50d00 	stceq	13, cr0, [r5]
    82ec:	00000954 	andeq	r0, r0, r4, asr r9
    82f0:	1d860d08 	stcne	13, cr0, [r6, #32]
    82f4:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    82f8:	0011a106 	andseq	sl, r1, r6, lsl #2
    82fc:	d00d0c00 	andle	r0, sp, r0, lsl #24
    8300:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8304:	11eb06b1 	strhne	r0, [fp, #97]!	; 0x61
    8308:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    830c:	00001b33 	andeq	r1, r0, r3, lsr fp
    8310:	1506c30d 	strne	ip, [r6, #-781]	; 0xfffffcf3
    8314:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
    8318:	001ec00d 	andseq	ip, lr, sp
    831c:	06cd0d00 	strbeq	r0, [sp], r0, lsl #26
    8320:	0000129f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    8324:	1dd20d0f 	ldclne	13, cr0, [r2, #60]	; 0x3c
    8328:	ce0d0000 	cdpgt	0, 0, cr0, cr13, cr0, {0}
    832c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8330:	0f0d1000 	svceq	0x000d1000
    8334:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8338:	00590ccf 	subseq	r0, r9, pc, asr #25
    833c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    8340:	00001f12 	andeq	r1, r0, r2, lsl pc
    8344:	590cd10d 	stmdbpl	ip, {r0, r2, r3, r8, ip, lr, pc}
    8348:	15000000 	strne	r0, [r0, #-0]
    834c:	001f1b0d 	andseq	r1, pc, sp, lsl #22
    8350:	0cd20d00 	ldcleq	13, cr0, [r2], {0}
    8354:	00000059 	andeq	r0, r0, r9, asr r0
    8358:	1c6d0d16 	stclne	13, cr0, [sp], #-88	; 0xffffffa8
    835c:	db0d0000 	blle	348364 <__ccfg+0x3283bc>
    8360:	00131906 	andseq	r1, r3, r6, lsl #18
    8364:	630d1700 	movwvs	r1, #55040	; 0xd700
    8368:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    836c:	09540cdc 	ldmdbeq	r4, {r2, r3, r4, r6, r7, sl, fp}^
    8370:	0d180000 	ldceq	0, cr0, [r8, #-0]
    8374:	00001ca1 	andeq	r1, r0, r1, lsr #25
    8378:	e611dd0d 	ldr	sp, [r1], -sp, lsl #26
    837c:	1c00000c 	stcne	0, cr0, [r0], {12}
    8380:	001a880d 	andseq	r8, sl, sp, lsl #16
    8384:	0dde0d00 	ldcleq	13, cr0, [lr]
    8388:	00000984 	andeq	r0, r0, r4, lsl #19
    838c:	78020020 	stmdavc	r2, {r5}
    8390:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8394:	0e7e2f41 	cdpeq	15, 7, cr2, cr14, cr1, {2}
    8398:	531a0000 	tstpl	sl, #0
    839c:	1c00001a 	stcne	0, cr0, [r0], {26}
    83a0:	15017d0d 	strne	r7, [r1, #-3341]	; 0xfffff2f3
    83a4:	00000f6d 	andeq	r0, r0, sp, ror #30
    83a8:	0019f618 	andseq	pc, r9, r8, lsl r6	; <UNPREDICTABLE>
    83ac:	017e0d00 	cmneq	lr, r0, lsl #26
    83b0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    83b4:	97180000 	ldrls	r0, [r8, -r0]
    83b8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    83bc:	6c0d017f 	stfvss	f0, [sp], {127}	; 0x7f
    83c0:	02000000 	andeq	r0, r0, #0
    83c4:	001d5618 	andseq	r5, sp, r8, lsl r6
    83c8:	01820d00 	orreq	r0, r2, r0, lsl #26
    83cc:	000bc013 	andeq	ip, fp, r3, lsl r0
    83d0:	ee180400 	cfmuls	mvf0, mvf8, mvf0
    83d4:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    83d8:	540c0183 	strpl	r0, [ip], #-387	; 0xfffffe7d
    83dc:	08000009 	stmdaeq	r0, {r0, r3}
    83e0:	001d8618 	andseq	r8, sp, r8, lsl r6
    83e4:	018b0d00 	orreq	r0, fp, r0, lsl #26
    83e8:	00136306 	andseq	r6, r3, r6, lsl #6
    83ec:	d0180c00 	andsle	r0, r8, r0, lsl #24
    83f0:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    83f4:	b206018f 	andlt	r0, r6, #-1073741789	; 0xc0000023
    83f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    83fc:	00213d18 	eoreq	r3, r1, r8, lsl sp
    8400:	01950d00 	orrseq	r0, r5, r0, lsl #26
    8404:	0013df06 	andseq	sp, r3, r6, lsl #30
    8408:	36180e00 	ldrcc	r0, [r8], -r0, lsl #28
    840c:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    8410:	590c0196 	stmdbpl	ip, {r1, r2, r4, r7, r8}
    8414:	0f000000 	svceq	0x00000000
    8418:	0021fc18 	eoreq	pc, r1, r8, lsl ip	; <UNPREDICTABLE>
    841c:	01a30d00 			; <UNDEFINED> instruction: 0x01a30d00
    8420:	00140c06 	andseq	r0, r4, r6, lsl #24
    8424:	b7181000 	ldrlt	r1, [r8, -r0]
    8428:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    842c:	250b01a4 	strcs	r0, [fp, #-420]	; 0xfffffe5c
    8430:	11000000 	mrsne	r0, (UNDEF: 0)
    8434:	001f8718 	andseq	r8, pc, r8, lsl r7	; <UNPREDICTABLE>
    8438:	01a50d00 			; <UNDEFINED> instruction: 0x01a50d00
    843c:	0000590c 	andeq	r5, r0, ip, lsl #18
    8440:	c4181200 	ldrgt	r1, [r8], #-512	; 0xfffffe00
    8444:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8448:	590c01a7 	stmdbpl	ip, {r0, r1, r2, r5, r7, r8}
    844c:	13000000 	movwne	r0, #0
    8450:	001e3e18 	andseq	r3, lr, r8, lsl lr
    8454:	01a90d00 			; <UNDEFINED> instruction: 0x01a90d00
    8458:	00006c0d 	andeq	r6, r0, sp, lsl #24
    845c:	19181400 	ldmdbne	r8, {sl, ip}
    8460:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8464:	7d0601af 	stfvcs	f0, [r6, #-700]	; 0xfffffd44
    8468:	16000014 			; <UNDEFINED> instruction: 0x16000014
    846c:	001d1c18 	andseq	r1, sp, r8, lsl ip
    8470:	01b70d00 			; <UNDEFINED> instruction: 0x01b70d00
    8474:	0014aa06 	andseq	sl, r4, r6, lsl #20
    8478:	2a181700 	bcs	60e080 <__ccfg+0x5ee0d8>
    847c:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    8480:	540c01b8 	strpl	r0, [ip], #-440	; 0xfffffe48
    8484:	18000009 	stmdane	r0, {r0, r3}
    8488:	1f430200 	svcne	0x00430200
    848c:	430d0000 	movwmi	r0, #53248	; 0xd000
    8490:	000f793c 	andeq	r7, pc, ip, lsr r9	; <UNPREDICTABLE>
    8494:	1f241a00 	svcne	0x00241a00
    8498:	0d280000 	stceq	0, cr0, [r8, #-0]
    849c:	7615021a 			; <UNDEFINED> instruction: 0x7615021a
    84a0:	18000010 	stmdane	r0, {r4}
    84a4:	000019f6 	strdeq	r1, [r0], -r6
    84a8:	0d021b0d 	vstreq	d1, [r2, #-52]	; 0xffffffcc
    84ac:	0000006c 	andeq	r0, r0, ip, rrx
    84b0:	05971800 	ldreq	r1, [r7, #2048]	; 0x800
    84b4:	1d0d0000 	stcne	0, cr0, [sp, #-0]
    84b8:	006c0d02 	rsbeq	r0, ip, r2, lsl #26
    84bc:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    84c0:	00001d56 	andeq	r1, r0, r6, asr sp
    84c4:	1302200d 	movwne	r2, #8205	; 0x200d
    84c8:	00000bc0 	andeq	r0, r0, r0, asr #23
    84cc:	1aee1804 	bne	ffb8e4e4 <_estack+0xdfb894e4>
    84d0:	210d0000 	mrscs	r0, (UNDEF: 13)
    84d4:	09540c02 	ldmdbeq	r4, {r1, sl, fp}^
    84d8:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    84dc:	00001d86 	andeq	r1, r0, r6, lsl #27
    84e0:	0602290d 	streq	r2, [r2], -sp, lsl #18
    84e4:	000014f9 	strdeq	r1, [r0], -r9
    84e8:	1cd0180c 	ldclne	8, cr1, [r0], {12}
    84ec:	2d0d0000 	stccs	0, cr0, [sp, #-0]
    84f0:	15480602 	strbne	r0, [r8, #-1538]	; 0xfffff9fe
    84f4:	180d0000 	stmdane	sp, {}	; <UNPREDICTABLE>
    84f8:	000019eb 	andeq	r1, r0, fp, ror #19
    84fc:	0602330d 	streq	r3, [r2], -sp, lsl #6
    8500:	00001575 	andeq	r1, r0, r5, ror r5
    8504:	1d3f180e 	ldcne	8, cr1, [pc, #-56]!	; 84d4 <__exidx_end+0x35a4>
    8508:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    850c:	15a20602 	strne	r0, [r2, #1538]!	; 0x602
    8510:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    8514:	00001b77 	andeq	r1, r0, r7, ror fp
    8518:	0c02390d 			; <UNDEFINED> instruction: 0x0c02390d
    851c:	00000059 	andeq	r0, r0, r9, asr r0
    8520:	1dc81814 	stclne	8, cr1, [r8, #80]	; 0x50
    8524:	410d0000 	mrsmi	r0, (UNDEF: 13)
    8528:	15cf0602 	strbne	r0, [pc, #1538]	; 8b32 <__exidx_end+0x3c02>
    852c:	18150000 	ldmdane	r5, {}	; <UNPREDICTABLE>
    8530:	00001ae3 	andeq	r1, r0, r3, ror #21
    8534:	0602550d 	streq	r5, [r2], -sp, lsl #10
    8538:	000015fc 	strdeq	r1, [r0], -ip
    853c:	0fad1816 	svceq	0x00ad1816
    8540:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
    8544:	165c0602 	ldrbne	r0, [ip], -r2, lsl #12
    8548:	18180000 	ldmdane	r8, {}	; <UNPREDICTABLE>
    854c:	00001b6f 	andeq	r1, r0, pc, ror #22
    8550:	0d02690d 	vstreq.16	s12, [r2, #-26]	; 0xffffffe6	; <UNPREDICTABLE>
    8554:	0000006c 	andeq	r0, r0, ip, rrx
    8558:	1fa3181a 	svcne	0x00a3181a
    855c:	6a0d0000 	bvs	348564 <__ccfg+0x3285bc>
    8560:	0bc60e02 	bleq	ff18bd70 <_estack+0xdf186d70>
    8564:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    8568:	00001a28 	andeq	r1, r0, r8, lsr #20
    856c:	0d026c0d 	stceq	12, cr6, [r2, #-52]	; 0xffffffcc
    8570:	0000006c 	andeq	r0, r0, ip, rrx
    8574:	1d5e1820 	ldclne	8, cr1, [lr, #-128]	; 0xffffff80
    8578:	700d0000 	andvc	r0, sp, r0
    857c:	00380c02 	eorseq	r0, r8, r2, lsl #24
    8580:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    8584:	00001e9b 	muleq	r0, fp, lr
    8588:	0c02730d 	stceq	3, cr7, [r2], {13}
    858c:	00000059 	andeq	r0, r0, r9, asr r0
    8590:	d7020024 	strle	r0, [r2, -r4, lsr #32]
    8594:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8598:	10823048 	addne	r3, r2, r8, asr #32
    859c:	c41a0000 	ldrgt	r0, [sl], #-0
    85a0:	0c00001f 	stceq	0, cr0, [r0], {31}
    85a4:	1503750d 	strne	r7, [r3, #-1293]	; 0xfffffaf3
    85a8:	000010f3 	strdeq	r1, [r0], -r3
    85ac:	00207a18 	eoreq	r7, r0, r8, lsl sl
    85b0:	03760d00 	cmneq	r6, #0, 26
    85b4:	00006c0d 	andeq	r6, r0, sp, lsl #24
    85b8:	ad180000 	ldcge	0, cr0, [r8, #-0]
    85bc:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    85c0:	6c0d0377 	stcvs	3, cr0, [sp], {119}	; 0x77
    85c4:	02000000 	andeq	r0, r0, #0
    85c8:	001a9a18 	andseq	r9, sl, r8, lsl sl
    85cc:	03780d00 	cmneq	r8, #0, 26
    85d0:	0000590c 	andeq	r5, r0, ip, lsl #18
    85d4:	7c180400 	cfldrsvc	mvf0, [r8], {-0}
    85d8:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    85dc:	590c0379 	stmdbpl	ip, {r0, r3, r4, r5, r6, r8, r9}
    85e0:	05000000 	streq	r0, [r0, #-0]
    85e4:	001d0218 	andseq	r0, sp, r8, lsl r2
    85e8:	037a0d00 	cmneq	sl, #0, 26
    85ec:	0000590c 	andeq	r5, r0, ip, lsl #18
    85f0:	e6180600 	ldr	r0, [r8], -r0, lsl #12
    85f4:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    85f8:	250b037b 	strcs	r0, [fp, #-891]	; 0xfffffc85
    85fc:	07000000 	streq	r0, [r0, -r0]
    8600:	0009ed18 	andeq	lr, r9, r8, lsl sp
    8604:	037c0d00 	cmneq	ip, #0, 26
    8608:	0009540c 	andeq	r5, r9, ip, lsl #8
    860c:	0c000800 	stceq	8, cr0, [r0], {-0}
    8610:	047f0d01 	ldrbteq	r0, [pc], #-3329	; 8618 <__exidx_end+0x36e8>
    8614:	0000113d 	andeq	r1, r0, sp, lsr r1
    8618:	00224921 	eoreq	r4, r2, r1, lsr #18
    861c:	0f800d00 	svceq	0x00800d00
    8620:	00000059 	andeq	r0, r0, r9, asr r0
    8624:	00040401 	andeq	r0, r4, r1, lsl #8
    8628:	001bd721 	andseq	sp, fp, r1, lsr #14
    862c:	0f810d00 	svceq	0x00810d00
    8630:	00000059 	andeq	r0, r0, r9, asr r0
    8634:	00030101 	andeq	r0, r3, r1, lsl #2
    8638:	001c9721 	andseq	r9, ip, r1, lsr #14
    863c:	0f830d00 	svceq	0x00830d00
    8640:	00000059 	andeq	r0, r0, r9, asr r0
    8644:	00010201 	andeq	r0, r1, r1, lsl #4
    8648:	001a6521 	andseq	r6, sl, r1, lsr #10
    864c:	0f840d00 	svceq	0x00840d00
    8650:	00000059 	andeq	r0, r0, r9, asr r0
    8654:	00000101 	andeq	r0, r0, r1, lsl #2
    8658:	0d010c00 	stceq	12, cr0, [r1, #-0]
    865c:	11670487 	smulbbne	r7, r7, r4
    8660:	b3210000 			; <UNDEFINED> instruction: 0xb3210000
    8664:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8668:	00590f88 	subseq	r0, r9, r8, lsl #31
    866c:	04010000 	streq	r0, [r1], #-0
    8670:	0f210004 	svceq	0x00210004
    8674:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8678:	00590f89 	subseq	r0, r9, r9, lsl #31
    867c:	04010000 	streq	r0, [r1], #-0
    8680:	0c000000 	stceq	0, cr0, [r0], {-0}
    8684:	048b0d01 	streq	r0, [fp], #3329	; 0xd01
    8688:	000011a1 	andeq	r1, r0, r1, lsr #3
    868c:	00214e21 	eoreq	r4, r1, r1, lsr #28
    8690:	0f8c0d00 	svceq	0x008c0d00
    8694:	00000059 	andeq	r0, r0, r9, asr r0
    8698:	00070101 	andeq	r0, r7, r1, lsl #2
    869c:	0021d621 	eoreq	sp, r1, r1, lsr #12
    86a0:	0f8f0d00 	svceq	0x008f0d00
    86a4:	00000059 	andeq	r0, r0, r9, asr r0
    86a8:	00040101 	andeq	r0, r4, r1, lsl #2
    86ac:	001a1b21 	andseq	r1, sl, r1, lsr #22
    86b0:	0f910d00 	svceq	0x00910d00
    86b4:	00000059 	andeq	r0, r0, r9, asr r0
    86b8:	00030101 	andeq	r0, r3, r1, lsl #2
    86bc:	0d010c00 	stceq	12, cr0, [r1, #-0]
    86c0:	11eb04a6 	mvnne	r0, r6, lsr #9
    86c4:	49210000 	stmdbmi	r1!, {}	; <UNPREDICTABLE>
    86c8:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    86cc:	00590fa7 	subseq	r0, r9, r7, lsr #31
    86d0:	04010000 	streq	r0, [r1], #-0
    86d4:	d7210004 	strle	r0, [r1, -r4]!
    86d8:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    86dc:	00590fa8 	subseq	r0, r9, r8, lsr #31
    86e0:	01010000 	mrseq	r0, (UNDEF: 1)
    86e4:	97210003 	strls	r0, [r1, -r3]!
    86e8:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    86ec:	00590faa 	subseq	r0, r9, sl, lsr #31
    86f0:	02010000 	andeq	r0, r1, #0
    86f4:	65210001 	strvs	r0, [r1, #-1]!
    86f8:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    86fc:	00590fab 	subseq	r0, r9, fp, lsr #31
    8700:	01010000 	mrseq	r0, (UNDEF: 1)
    8704:	0c000000 	stceq	0, cr0, [r0], {-0}
    8708:	04ae0d01 	strteq	r0, [lr], #3329	; 0xd01
    870c:	00001215 	andeq	r1, r0, r5, lsl r2
    8710:	0020b321 	eoreq	fp, r0, r1, lsr #6
    8714:	0faf0d00 	svceq	0x00af0d00
    8718:	00000059 	andeq	r0, r0, r9, asr r0
    871c:	00040401 	andeq	r0, r4, r1, lsl #8
    8720:	00220f21 	eoreq	r0, r2, r1, lsr #30
    8724:	0fb00d00 	svceq	0x00b00d00
    8728:	00000059 	andeq	r0, r0, r9, asr r0
    872c:	00000401 	andeq	r0, r0, r1, lsl #8
    8730:	0d010c00 	stceq	12, cr0, [r1, #-0]
    8734:	129f04b2 	addsne	r0, pc, #-1308622848	; 0xb2000000
    8738:	4e210000 	cdpmi	0, 2, cr0, cr1, cr0, {0}
    873c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8740:	00590fb3 	ldrheq	r0, [r9], #-243	; 0xffffff0d
    8744:	01010000 	mrseq	r0, (UNDEF: 1)
    8748:	90210007 	eorls	r0, r1, r7
    874c:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8750:	00590fb5 	ldrheq	r0, [r9], #-245	; 0xffffff0b
    8754:	01010000 	mrseq	r0, (UNDEF: 1)
    8758:	24210006 	strtcs	r0, [r1], #-6
    875c:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8760:	00590fb7 	ldrheq	r0, [r9], #-247	; 0xffffff09
    8764:	01010000 	mrseq	r0, (UNDEF: 1)
    8768:	d6210005 	strtle	r0, [r1], -r5
    876c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8770:	00590fb9 	ldrheq	r0, [r9], #-249	; 0xffffff07
    8774:	01010000 	mrseq	r0, (UNDEF: 1)
    8778:	1b210004 	blne	848790 <__ccfg+0x8287e8>
    877c:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8780:	00590fbb 	ldrheq	r0, [r9], #-251	; 0xffffff05
    8784:	01010000 	mrseq	r0, (UNDEF: 1)
    8788:	6b210003 	blvs	84879c <__ccfg+0x8287f4>
    878c:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    8790:	00590fbd 	ldrheq	r0, [r9], #-253	; 0xffffff03
    8794:	01010000 	mrseq	r0, (UNDEF: 1)
    8798:	a8210002 	stmdage	r1!, {r1}
    879c:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    87a0:	00590fbf 	ldrheq	r0, [r9], #-255	; 0xffffff01
    87a4:	01010000 	mrseq	r0, (UNDEF: 1)
    87a8:	2f210001 	svccs	0x00210001
    87ac:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    87b0:	00590fc1 	subseq	r0, r9, r1, asr #31
    87b4:	01010000 	mrseq	r0, (UNDEF: 1)
    87b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    87bc:	04c40d01 	strbeq	r0, [r4], #3329	; 0xd01
    87c0:	00001319 	andeq	r1, r0, r9, lsl r3
    87c4:	001d6621 	andseq	r6, sp, r1, lsr #12
    87c8:	0fc50d00 	svceq	0x00c50d00
    87cc:	00000059 	andeq	r0, r0, r9, asr r0
    87d0:	00070101 	andeq	r0, r7, r1, lsl #2
    87d4:	001b9f21 	andseq	r9, fp, r1, lsr #30
    87d8:	0fc60d00 	svceq	0x00c60d00
    87dc:	00000059 	andeq	r0, r0, r9, asr r0
    87e0:	00060101 	andeq	r0, r6, r1, lsl #2
    87e4:	001cda21 	andseq	sp, ip, r1, lsr #20
    87e8:	0fc80d00 	svceq	0x00c80d00
    87ec:	00000059 	andeq	r0, r0, r9, asr r0
    87f0:	00040101 	andeq	r0, r4, r1, lsl #2
    87f4:	001c4321 	andseq	r4, ip, r1, lsr #6
    87f8:	0fc90d00 	svceq	0x00c90d00
    87fc:	00000059 	andeq	r0, r0, r9, asr r0
    8800:	00030101 	andeq	r0, r3, r1, lsl #2
    8804:	001fb821 	andseq	fp, pc, r1, lsr #16
    8808:	0fca0d00 	svceq	0x00ca0d00
    880c:	00000059 	andeq	r0, r0, r9, asr r0
    8810:	00020101 	andeq	r0, r2, r1, lsl #2
    8814:	001af821 	andseq	pc, sl, r1, lsr #16
    8818:	0fcb0d00 	svceq	0x00cb0d00
    881c:	00000059 	andeq	r0, r0, r9, asr r0
    8820:	00010101 	andeq	r0, r1, r1, lsl #2
    8824:	001a0021 	andseq	r0, sl, r1, lsr #32
    8828:	0fcc0d00 	svceq	0x00cc0d00
    882c:	00000059 	andeq	r0, r0, r9, asr r0
    8830:	00000101 	andeq	r0, r0, r1, lsl #2
    8834:	0d010c00 	stceq	12, cr0, [r1, #-0]
    8838:	136304d4 	cmnne	r3, #212, 8	; 0xd4000000
    883c:	49210000 	stmdbmi	r1!, {}	; <UNPREDICTABLE>
    8840:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8844:	00590fd5 	ldrsbeq	r0, [r9], #-245	; 0xffffff0b
    8848:	04010000 	streq	r0, [r1], #-0
    884c:	d7210004 	strle	r0, [r1, -r4]!
    8850:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    8854:	00590fd6 	ldrsbeq	r0, [r9], #-246	; 0xffffff0a
    8858:	01010000 	mrseq	r0, (UNDEF: 1)
    885c:	97210003 	strls	r0, [r1, -r3]!
    8860:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8864:	00590fd8 	ldrsbeq	r0, [r9], #-248	; 0xffffff08
    8868:	02010000 	andeq	r0, r1, #0
    886c:	65210001 	strvs	r0, [r1, #-1]!
    8870:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8874:	00590fd9 	ldrsbeq	r0, [r9], #-249	; 0xffffff07
    8878:	01010000 	mrseq	r0, (UNDEF: 1)
    887c:	1b000000 	blne	8884 <__exidx_end+0x3954>
    8880:	01840d01 	orreq	r0, r4, r1, lsl #26
    8884:	0013b204 	andseq	fp, r3, r4, lsl #4
    8888:	22492200 	subcs	r2, r9, #0, 4
    888c:	850d0000 	strhi	r0, [sp, #-0]
    8890:	00590f01 	subseq	r0, r9, r1, lsl #30
    8894:	04010000 	streq	r0, [r1], #-0
    8898:	d7220004 	strle	r0, [r2, -r4]!
    889c:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    88a0:	590f0186 	stmdbpl	pc, {r1, r2, r7, r8}	; <UNPREDICTABLE>
    88a4:	01000000 	mrseq	r0, (UNDEF: 0)
    88a8:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    88ac:	00001c97 	muleq	r0, r7, ip
    88b0:	0f01880d 	svceq	0x0001880d
    88b4:	00000059 	andeq	r0, r0, r9, asr r0
    88b8:	00010201 	andeq	r0, r1, r1, lsl #4
    88bc:	001a6522 	andseq	r6, sl, r2, lsr #10
    88c0:	01890d00 	orreq	r0, r9, r0, lsl #26
    88c4:	0000590f 	andeq	r5, r0, pc, lsl #18
    88c8:	00010100 	andeq	r0, r1, r0, lsl #2
    88cc:	011b0000 	tsteq	fp, r0
    88d0:	04018c0d 	streq	r8, [r1], #-3085	; 0xfffff3f3
    88d4:	000013df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    88d8:	0020b322 	eoreq	fp, r0, r2, lsr #6
    88dc:	018d0d00 	orreq	r0, sp, r0, lsl #26
    88e0:	0000590f 	andeq	r5, r0, pc, lsl #18
    88e4:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    88e8:	220f2200 	andcs	r2, pc, #0, 4
    88ec:	8e0d0000 	cdphi	0, 0, cr0, cr13, cr0, {0}
    88f0:	00590f01 	subseq	r0, r9, r1, lsl #30
    88f4:	04010000 	streq	r0, [r1], #-0
    88f8:	1b000000 	blne	8900 <__exidx_end+0x39d0>
    88fc:	01900d01 	orrseq	r0, r0, r1, lsl #26
    8900:	00140c04 	andseq	r0, r4, r4, lsl #24
    8904:	1db42200 	lfmne	f2, 4, [r4]
    8908:	910d0000 	mrsls	r0, (UNDEF: 13)
    890c:	00590f01 	subseq	r0, r9, r1, lsl #30
    8910:	01010000 	mrseq	r0, (UNDEF: 1)
    8914:	db220007 	blle	888938 <__ccfg+0x868990>
    8918:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    891c:	590f0193 	stmdbpl	pc, {r0, r1, r4, r7, r8}	; <UNPREDICTABLE>
    8920:	01000000 	mrseq	r0, (UNDEF: 0)
    8924:	00000601 	andeq	r0, r0, r1, lsl #12
    8928:	970d011b 	smladls	sp, fp, r1, r0
    892c:	147d0401 	ldrbtne	r0, [sp], #-1025	; 0xfffffbff
    8930:	15220000 	strne	r0, [r2, #-0]!
    8934:	0d000022 	stceq	0, cr0, [r0, #-136]	; 0xffffff78
    8938:	590f0198 	stmdbpl	pc, {r3, r4, r7, r8}	; <UNPREDICTABLE>
    893c:	01000000 	mrseq	r0, (UNDEF: 0)
    8940:	22000701 	andcs	r0, r0, #262144	; 0x40000
    8944:	00001dab 	andeq	r1, r0, fp, lsr #27
    8948:	0f01990d 	svceq	0x0001990d
    894c:	00000059 	andeq	r0, r0, r9, asr r0
    8950:	00060101 	andeq	r0, r6, r1, lsl #2
    8954:	000cb622 	andeq	fp, ip, r2, lsr #12
    8958:	019a0d00 	orrseq	r0, sl, r0, lsl #26
    895c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8960:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    8964:	1e942200 	cdpne	2, 9, cr2, cr4, cr0, {0}
    8968:	9c0d0000 	stcls	0, cr0, [sp], {-0}
    896c:	00590f01 	subseq	r0, r9, r1, lsl #30
    8970:	01010000 	mrseq	r0, (UNDEF: 1)
    8974:	22220004 	eorcs	r0, r2, #4
    8978:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    897c:	590f019f 	stmdbpl	pc, {r0, r1, r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    8980:	01000000 	mrseq	r0, (UNDEF: 0)
    8984:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    8988:	00001e6e 	andeq	r1, r0, lr, ror #28
    898c:	0f01a10d 	svceq	0x0001a10d
    8990:	00000059 	andeq	r0, r0, r9, asr r0
    8994:	00020101 	andeq	r0, r2, r1, lsl #2
    8998:	0d011b00 	vstreq	d1, [r1, #-0]
    899c:	aa0401aa 	bge	10904c <__ccfg+0xe90a4>
    89a0:	22000014 	andcs	r0, r0, #20
    89a4:	00001bdf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    89a8:	0f01ab0d 	svceq	0x0001ab0d
    89ac:	00000059 	andeq	r0, r0, r9, asr r0
    89b0:	00040401 	andeq	r0, r4, r1, lsl #8
    89b4:	001cbf22 	andseq	fp, ip, r2, lsr #30
    89b8:	01ad0d00 			; <UNDEFINED> instruction: 0x01ad0d00
    89bc:	0000590f 	andeq	r5, r0, pc, lsl #18
    89c0:	00040100 	andeq	r0, r4, r0, lsl #2
    89c4:	011b0000 	tsteq	fp, r0
    89c8:	0401b00d 	streq	fp, [r1], #-13
    89cc:	000014f9 	strdeq	r1, [r0], -r9
    89d0:	00224922 	eoreq	r4, r2, r2, lsr #18
    89d4:	01b10d00 			; <UNDEFINED> instruction: 0x01b10d00
    89d8:	0000590f 	andeq	r5, r0, pc, lsl #18
    89dc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    89e0:	1bd72200 	blne	ff5d11e8 <_estack+0xdf5cc1e8>
    89e4:	b20d0000 	andlt	r0, sp, #0
    89e8:	00590f01 	subseq	r0, r9, r1, lsl #30
    89ec:	01010000 	mrseq	r0, (UNDEF: 1)
    89f0:	97220003 	strls	r0, [r2, -r3]!
    89f4:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    89f8:	590f01b4 	stmdbpl	pc, {r2, r4, r5, r7, r8}	; <UNPREDICTABLE>
    89fc:	01000000 	mrseq	r0, (UNDEF: 0)
    8a00:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    8a04:	00001a65 	andeq	r1, r0, r5, ror #20
    8a08:	0f01b50d 	svceq	0x0001b50d
    8a0c:	00000059 	andeq	r0, r0, r9, asr r0
    8a10:	00000101 	andeq	r0, r0, r1, lsl #2
    8a14:	0d011b00 	vstreq	d1, [r1, #-0]
    8a18:	48040222 	stmdami	r4, {r1, r5, r9}
    8a1c:	22000015 	andcs	r0, r0, #21
    8a20:	00002249 	andeq	r2, r0, r9, asr #4
    8a24:	0f02230d 	svceq	0x0002230d
    8a28:	00000059 	andeq	r0, r0, r9, asr r0
    8a2c:	00040401 	andeq	r0, r4, r1, lsl #8
    8a30:	001bd722 	andseq	sp, fp, r2, lsr #14
    8a34:	02240d00 	eoreq	r0, r4, #0, 26
    8a38:	0000590f 	andeq	r5, r0, pc, lsl #18
    8a3c:	03010100 	movweq	r0, #4352	; 0x1100
    8a40:	1c972200 	lfmne	f2, 4, [r7], {0}
    8a44:	260d0000 	strcs	r0, [sp], -r0
    8a48:	00590f02 	subseq	r0, r9, r2, lsl #30
    8a4c:	02010000 	andeq	r0, r1, #0
    8a50:	65220001 	strvs	r0, [r2, #-1]!
    8a54:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8a58:	590f0227 	stmdbpl	pc, {r0, r1, r2, r5, r9}	; <UNPREDICTABLE>
    8a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    8a60:	00000001 	andeq	r0, r0, r1
    8a64:	2a0d011b 	bcs	348ed8 <__ccfg+0x328f30>
    8a68:	15750402 	ldrbne	r0, [r5, #-1026]!	; 0xfffffbfe
    8a6c:	b3220000 			; <UNDEFINED> instruction: 0xb3220000
    8a70:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    8a74:	590f022b 	stmdbpl	pc, {r0, r1, r3, r5, r9}	; <UNPREDICTABLE>
    8a78:	01000000 	mrseq	r0, (UNDEF: 0)
    8a7c:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    8a80:	0000220f 	andeq	r2, r0, pc, lsl #4
    8a84:	0f022c0d 	svceq	0x00022c0d
    8a88:	00000059 	andeq	r0, r0, r9, asr r0
    8a8c:	00000401 	andeq	r0, r0, r1, lsl #8
    8a90:	0d021b00 	vstreq	d1, [r2, #-0]
    8a94:	a204022e 	andge	r0, r4, #-536870910	; 0xe0000002
    8a98:	22000015 	andcs	r0, r0, #21
    8a9c:	00001cef 	andeq	r1, r0, pc, ror #25
    8aa0:	10022f0d 	andne	r2, r2, sp, lsl #30
    8aa4:	0000006c 	andeq	r0, r0, ip, rrx
    8aa8:	000d0302 	andeq	r0, sp, r2, lsl #6
    8aac:	0021f222 	eoreq	pc, r1, r2, lsr #4
    8ab0:	02320d00 	eorseq	r0, r2, #0, 26
    8ab4:	00006c10 	andeq	r6, r0, r0, lsl ip
    8ab8:	000d0200 	andeq	r0, sp, r0, lsl #4
    8abc:	041b0000 	ldreq	r0, [fp], #-0
    8ac0:	0402340d 	streq	r3, [r2], #-1037	; 0xfffffbf3
    8ac4:	000015cf 	andeq	r1, r0, pc, asr #11
    8ac8:	001e8322 	andseq	r8, lr, r2, lsr #6
    8acc:	02350d00 	eorseq	r0, r5, #0, 26
    8ad0:	00007f10 	andeq	r7, r0, r0, lsl pc
    8ad4:	1c040400 	cfstrsne	mvf0, [r4], {-0}
    8ad8:	1f932200 	svcne	0x00932200
    8adc:	370d0000 	strcc	r0, [sp, -r0]
    8ae0:	007f1002 	rsbseq	r1, pc, r2
    8ae4:	15040000 	strne	r0, [r4, #-0]
    8ae8:	1b000003 	blne	8afc <__exidx_end+0x3bcc>
    8aec:	023a0d01 	eorseq	r0, sl, #1, 26	; 0x40
    8af0:	0015fc04 	andseq	pc, r5, r4, lsl #24
    8af4:	20e72200 	rsccs	r2, r7, r0, lsl #4
    8af8:	3b0d0000 	blcc	348b00 <__ccfg+0x328b58>
    8afc:	00590f02 	subseq	r0, r9, r2, lsl #30
    8b00:	06010000 	streq	r0, [r1], -r0
    8b04:	bd220002 	stclt	0, cr0, [r2, #-8]!
    8b08:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8b0c:	590f023d 	stmdbpl	pc, {r0, r2, r3, r4, r5, r9}	; <UNPREDICTABLE>
    8b10:	01000000 	mrseq	r0, (UNDEF: 0)
    8b14:	00000002 	andeq	r0, r0, r2
    8b18:	420d021b 	andmi	r0, sp, #-1342177279	; 0xb0000001
    8b1c:	165c0402 	ldrbne	r0, [ip], -r2, lsl #8
    8b20:	8c220000 	stchi	0, cr0, [r2], #-0
    8b24:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    8b28:	6c100243 	lfmvs	f0, 4, [r0], {67}	; 0x43
    8b2c:	02000000 	andeq	r0, r0, #0
    8b30:	22000a06 	andcs	r0, r0, #24576	; 0x6000
    8b34:	00001d29 	andeq	r1, r0, r9, lsr #26
    8b38:	1002440d 	andne	r4, r2, sp, lsl #8
    8b3c:	0000006c 	andeq	r0, r0, ip, rrx
    8b40:	00090102 	andeq	r0, r9, r2, lsl #2
    8b44:	001ef422 	andseq	pc, lr, r2, lsr #8
    8b48:	02460d00 	subeq	r0, r6, #0, 26
    8b4c:	00006c10 	andeq	r6, r0, r0, lsl ip
    8b50:	08010200 	stmdaeq	r1, {r9}
    8b54:	1aa52200 	bne	fe95135c <_estack+0xde94c35c>
    8b58:	480d0000 	stmdami	sp, {}	; <UNPREDICTABLE>
    8b5c:	006c1002 	rsbeq	r1, ip, r2
    8b60:	04020000 	streq	r0, [r2], #-0
    8b64:	48220004 	stmdami	r2!, {r2}
    8b68:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8b6c:	6c10024d 	lfmvs	f0, 4, [r0], {77}	; 0x4d
    8b70:	02000000 	andeq	r0, r0, #0
    8b74:	00000003 	andeq	r0, r0, r3
    8b78:	560d021b 			; <UNDEFINED> instruction: 0x560d021b
    8b7c:	16ab0402 	strtne	r0, [fp], r2, lsl #8
    8b80:	8a220000 	bhi	888b88 <__ccfg+0x868be0>
    8b84:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    8b88:	6c100257 	lfmvs	f0, 4, [r0], {87}	; 0x57
    8b8c:	02000000 	andeq	r0, r0, #0
    8b90:	22000d03 	andcs	r0, r0, #3, 26	; 0xc0
    8b94:	00001c29 	andeq	r1, r0, r9, lsr #24
    8b98:	10025d0d 	andne	r5, r2, sp, lsl #26
    8b9c:	0000006c 	andeq	r0, r0, ip, rrx
    8ba0:	000c0102 	andeq	r0, ip, r2, lsl #2
    8ba4:	001bc922 	andseq	ip, fp, r2, lsr #18
    8ba8:	025f0d00 	subseq	r0, pc, #0, 26
    8bac:	00006c10 	andeq	r6, r0, r0, lsl ip
    8bb0:	06060200 	streq	r0, [r6], -r0, lsl #4
    8bb4:	1ec72200 	cdpne	2, 12, cr2, cr7, cr0, {0}
    8bb8:	660d0000 	strvs	r0, [sp], -r0
    8bbc:	006c1002 	rsbeq	r1, ip, r2
    8bc0:	01020000 	mrseq	r0, (UNDEF: 2)
    8bc4:	02000005 	andeq	r0, r0, #5
    8bc8:	0000204f 	andeq	r2, r0, pc, asr #32
    8bcc:	b7343c0e 	ldrlt	r3, [r4, -lr, lsl #24]!
    8bd0:	0f000016 	svceq	0x00000016
    8bd4:	00002038 	andeq	r2, r0, r8, lsr r0
    8bd8:	155e0e0c 	ldrbne	r0, [lr, #-3596]	; 0xfffff1f4
    8bdc:	00001706 	andeq	r1, r0, r6, lsl #14
    8be0:	001b090d 	andseq	r0, fp, sp, lsl #18
    8be4:	0d5f0e00 	ldcleq	14, cr0, [pc, #-0]	; 8bec <__exidx_end+0x3cbc>
    8be8:	00000984 	andeq	r0, r0, r4, lsl #19
    8bec:	05970d00 	ldreq	r0, [r7, #3328]	; 0xd00
    8bf0:	600e0000 	andvs	r0, lr, r0
    8bf4:	0000590c 	andeq	r5, r0, ip, lsl #18
    8bf8:	ad0d0400 	cfstrsge	mvf0, [sp, #-0]
    8bfc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    8c00:	1706066e 	strne	r0, [r6, -lr, ror #12]
    8c04:	0d050000 	stceq	0, cr0, [r5, #-0]
    8c08:	00001427 	andeq	r1, r0, r7, lsr #8
    8c0c:	6c0d6f0e 	stcvs	15, cr6, [sp], {14}
    8c10:	06000000 	streq	r0, [r0], -r0
    8c14:	00432f0d 	subeq	r2, r3, sp, lsl #30
    8c18:	0c710e00 	ldcleq	14, cr0, [r1], #-0
    8c1c:	00000059 	andeq	r0, r0, r9, asr r0
    8c20:	010c0008 	tsteq	ip, r8
    8c24:	4004610e 	andmi	r6, r4, lr, lsl #2
    8c28:	21000017 	tstcs	r0, r7, lsl r0
    8c2c:	00004fa4 	andeq	r4, r0, r4, lsr #31
    8c30:	590f620e 	stmdbpl	pc, {r1, r2, r3, r9, sp, lr}	; <UNPREDICTABLE>
    8c34:	01000000 	mrseq	r0, (UNDEF: 0)
    8c38:	21000602 	tstcs	r0, r2, lsl #12
    8c3c:	00002010 	andeq	r2, r0, r0, lsl r0
    8c40:	590f670e 	stmdbpl	pc, {r1, r2, r3, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    8c44:	01000000 	mrseq	r0, (UNDEF: 0)
    8c48:	21000402 	tstcs	r0, r2, lsl #8
    8c4c:	00001ad2 	ldrdeq	r1, [r0], -r2
    8c50:	590f6c0e 	stmdbpl	pc, {r1, r2, r3, sl, fp, sp, lr}	; <UNPREDICTABLE>
    8c54:	01000000 	mrseq	r0, (UNDEF: 0)
    8c58:	00000004 	andeq	r0, r0, r4
    8c5c:	4802100c 	stmdami	r2, {r2, r3, ip}
    8c60:	00177e09 	andseq	r7, r7, r9, lsl #28
    8c64:	1c4f0d00 	mcrrne	13, 0, r0, pc, cr0
    8c68:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    8c6c:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8c70:	b00d0000 	andlt	r0, sp, r0
    8c74:	0200001b 	andeq	r0, r0, #27
    8c78:	007f0d4a 	rsbseq	r0, pc, sl, asr #26
    8c7c:	0d040000 	stceq	0, cr0, [r4, #-0]
    8c80:	00001ffa 	strdeq	r1, [r0], -sl
    8c84:	7f0d4b02 	svcvc	0x000d4b02
    8c88:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8c8c:	0021550d 	eoreq	r5, r1, sp, lsl #10
    8c90:	0d4c0200 	sfmeq	f0, 2, [ip, #-0]
    8c94:	0000007f 	andeq	r0, r0, pc, ror r0
    8c98:	6e02000c 	cdpvs	0, 0, cr0, cr2, cr12, {0}
    8c9c:	0200001a 	andeq	r0, r0, #26
    8ca0:	1740034d 	strbne	r0, [r0, -sp, asr #6]
    8ca4:	8b0a0000 	blhi	288cac <__ccfg+0x268d04>
    8ca8:	9a000000 	bls	8cb0 <__exidx_end+0x3d80>
    8cac:	0b000017 	bleq	8d10 <__exidx_end+0x3de0>
    8cb0:	000000aa 	andeq	r0, r0, sl, lsr #1
    8cb4:	8a0400a2 	bhi	108f44 <__ccfg+0xe8f9c>
    8cb8:	23000017 	movwcs	r0, #23
    8cbc:	00001d93 	muleq	r0, r3, sp
    8cc0:	9a104904 	bls	41b0d8 <__ccfg+0x3fb130>
    8cc4:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8cc8:	004c6003 	subeq	r6, ip, r3
    8ccc:	008b0a00 	addeq	r0, fp, r0, lsl #20
    8cd0:	17c20000 	strbne	r0, [r2, r0]
    8cd4:	aa240000 	bge	908cdc <__ccfg+0x8e8d34>
    8cd8:	ac000000 	stcge	0, cr0, [r0], {-0}
    8cdc:	b1040001 	tstlt	r4, r1
    8ce0:	23000017 	movwcs	r0, #23
    8ce4:	00001de2 	andeq	r1, r0, r2, ror #27
    8ce8:	c2103a05 	andsgt	r3, r0, #20480	; 0x5000
    8cec:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8cf0:	0045ac03 	subeq	sl, r5, r3, lsl #24
    8cf4:	23d80200 	bicscs	r0, r8, #0, 4
    8cf8:	270f0000 	strcs	r0, [pc, -r0]
    8cfc:	00006c12 	andeq	r6, r0, r2, lsl ip
    8d00:	17d90400 	ldrbne	r0, [r9, r0, lsl #8]
    8d04:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
    8d08:	02000017 	andeq	r0, r0, #23
    8d0c:	000018f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    8d10:	59122b0f 	ldmdbpl	r2, {r0, r1, r2, r3, r8, r9, fp, sp}
    8d14:	05000000 	streq	r0, [r0, #-0]
    8d18:	000017ef 	andeq	r1, r0, pc, ror #15
    8d1c:	00242902 	eoreq	r2, r4, r2, lsl #18
    8d20:	122c0f00 	eorne	r0, ip, #0, 30
    8d24:	0000007f 	andeq	r0, r0, pc, ror r0
    8d28:	00180004 	andseq	r0, r8, r4
    8d2c:	04fb0200 	ldrbteq	r0, [fp], #512	; 0x200
    8d30:	2d0f0000 	stccs	0, cr0, [pc, #-0]	; 8d38 <__exidx_end+0x3e08>
    8d34:	00007f12 	andeq	r7, r0, r2, lsl pc
    8d38:	08750200 	ldmdaeq	r5!, {r9}^
    8d3c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    8d40:	00182910 	andseq	r2, r8, r0, lsl r9
    8d44:	d9041100 	stmdble	r4, {r8, ip}
    8d48:	0c000017 	stceq	0, cr0, [r0], {23}
    8d4c:	09320f08 	ldmdbeq	r2!, {r3, r8, r9, sl, fp}
    8d50:	000018bd 			; <UNDEFINED> instruction: 0x000018bd
    8d54:	00003e21 	andeq	r3, r0, r1, lsr #28
    8d58:	07340f00 	ldreq	r0, [r4, -r0, lsl #30]!
    8d5c:	000017ef 	andeq	r1, r0, pc, ror #15
    8d60:	00070101 	andeq	r0, r7, r1, lsl #2
    8d64:	00050121 	andeq	r0, r5, r1, lsr #2
    8d68:	03350f00 	teqeq	r5, #0, 30
    8d6c:	000017ef 	andeq	r1, r0, pc, ror #15
    8d70:	00060101 	andeq	r0, r6, r1, lsl #2
    8d74:	00023721 	andeq	r3, r2, r1, lsr #14
    8d78:	03360f00 	teqeq	r6, #0, 30
    8d7c:	000017ef 	andeq	r1, r0, pc, ror #15
    8d80:	00050101 	andeq	r0, r5, r1, lsl #2
    8d84:	00053b21 	andeq	r3, r5, r1, lsr #22
    8d88:	03370f00 	teqeq	r7, #0, 30
    8d8c:	000017ef 	andeq	r1, r0, pc, ror #15
    8d90:	00040101 	andeq	r0, r4, r1, lsl #2
    8d94:	0007c421 	andeq	ip, r7, r1, lsr #8
    8d98:	03380f00 	teqeq	r8, #0, 30
    8d9c:	000017ef 	andeq	r1, r0, pc, ror #15
    8da0:	00000401 	andeq	r0, r0, r1, lsl #8
    8da4:	0005080d 	andeq	r0, r5, sp, lsl #16
    8da8:	073a0f00 	ldreq	r0, [sl, -r0, lsl #30]!
    8dac:	000017ef 	andeq	r1, r0, pc, ror #15
    8db0:	06d20d01 	ldrbeq	r0, [r2], r1, lsl #26
    8db4:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    8db8:	0017ef03 	andseq	lr, r7, r3, lsl #30
    8dbc:	7c0d0200 	sfmvc	f0, 4, [sp], {-0}
    8dc0:	0f00000a 	svceq	0x0000000a
    8dc4:	17ef033d 			; <UNDEFINED> instruction: 0x17ef033d
    8dc8:	0d030000 	stceq	0, cr0, [r3, #-0]
    8dcc:	00000707 	andeq	r0, r0, r7, lsl #14
    8dd0:	00083f0f 	andeq	r3, r8, pc, lsl #30
    8dd4:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    8dd8:	02890200 	addeq	r0, r9, #0, 4
    8ddc:	410f0000 	mrsmi	r0, CPSR
    8de0:	00182f03 	andseq	r2, r8, r3, lsl #30
    8de4:	18bd0500 	popne	{r8, sl}
    8de8:	42250000 	eormi	r0, r5, #0
    8dec:	0f000005 	svceq	0x00000005
    8df0:	18c91a43 	stmiane	r9, {r0, r1, r6, r9, fp, ip}^
    8df4:	01010000 	mrseq	r0, (UNDEF: 1)
    8df8:	0001b125 	andeq	fp, r1, r5, lsr #2
    8dfc:	0e450f00 	cdpeq	15, 4, cr0, cr5, cr0, {0}
    8e00:	000005eb 	andeq	r0, r0, fp, ror #11
    8e04:	92250101 	eorls	r0, r5, #1073741824	; 0x40000000
    8e08:	0f000002 	svceq	0x00000002
    8e0c:	05eb1e45 	strbeq	r1, [fp, #3653]!	; 0xe45
    8e10:	01010000 	mrseq	r0, (UNDEF: 1)
    8e14:	8f10080c 	svchi	0x0010080c
    8e18:	00192909 	andseq	r2, r9, r9, lsl #18
    8e1c:	06050d00 	streq	r0, [r5], -r0, lsl #26
    8e20:	90100000 	andsls	r0, r0, r0
    8e24:	00007f0b 	andeq	r7, r0, fp, lsl #30
    8e28:	ae0d0000 	cdpge	0, 0, cr0, cr13, cr0, {0}
    8e2c:	1000000b 	andne	r0, r0, fp
    8e30:	17d90891 	bfine	r0, r1, #17, #9
    8e34:	0d040000 	stceq	0, cr0, [r4, #-0]
    8e38:	000001ea 	andeq	r0, r0, sl, ror #3
    8e3c:	fb109210 	blx	42d686 <__ccfg+0x40d6de>
    8e40:	06000017 			; <UNDEFINED> instruction: 0x06000017
    8e44:	09450200 	stmdbeq	r5, {r9}^
    8e48:	93100000 	tstls	r0, #0
    8e4c:	0018f803 	andseq	pc, r8, r3, lsl #16
    8e50:	19290a00 	stmdbne	r9!, {r9, fp}
    8e54:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    8e58:	00260000 	eoreq	r0, r6, r0
    8e5c:	00071325 	andeq	r1, r7, r5, lsr #6
    8e60:	0f991000 	svceq	0x00991000
    8e64:	00001935 	andeq	r1, r0, r5, lsr r9
    8e68:	010c0101 	tsteq	ip, r1, lsl #2
    8e6c:	78099111 	stmdavc	r9, {r0, r4, r8, ip, pc}
    8e70:	21000019 	tstcs	r0, r9, lsl r0
    8e74:	0000070e 	andeq	r0, r0, lr, lsl #14
    8e78:	ef079311 	svc	0x00079311
    8e7c:	01000017 	tsteq	r0, r7, lsl r0
    8e80:	21000107 	tstcs	r0, r7, lsl #2
    8e84:	0000047c 	andeq	r0, r0, ip, ror r4
    8e88:	ef039411 	svc	0x00039411
    8e8c:	01000017 	tsteq	r0, r7, lsl r0
    8e90:	00000001 	andeq	r0, r0, r1
    8e94:	0007d002 	andeq	sp, r7, r2
    8e98:	03961100 	orrseq	r1, r6, #0, 2
    8e9c:	0000194e 	andeq	r1, r0, lr, asr #18
    8ea0:	00197804 	andseq	r7, r9, r4, lsl #16
    8ea4:	19840a00 	stmibne	r4, {r9, fp}
    8ea8:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
    8eac:	00260000 	eoreq	r0, r6, r0
    8eb0:	00198904 	andseq	r8, r9, r4, lsl #18
    8eb4:	034b2500 	movteq	r2, #46336	; 0xb500
    8eb8:	9c110000 	ldcls	0, cr0, [r1], {-0}
    8ebc:	00199417 	andseq	r9, r9, r7, lsl r4
    8ec0:	0a010100 	beq	492c8 <__ccfg+0x29320>
    8ec4:	000017e5 	andeq	r1, r0, r5, ror #15
    8ec8:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    8ecc:	a7040026 	strge	r0, [r4, -r6, lsr #32]
    8ed0:	25000019 	strcs	r0, [r0, #-25]	; 0xffffffe7
    8ed4:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    8ed8:	b2130612 	andslt	r0, r3, #18874368	; 0x1200000
    8edc:	01000019 	tsteq	r0, r9, lsl r0
    8ee0:	06b42501 	ldrteq	r2, [r4], r1, lsl #10
    8ee4:	c3100000 	tstgt	r0, #0
    8ee8:	0018000e 	andseq	r0, r8, lr
    8eec:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8ef0:	000008fe 	strdeq	r0, [r0], -lr
    8ef4:	10016e13 	andne	r6, r1, r3, lsl lr
    8ef8:	000019e0 	andeq	r1, r0, r0, ror #19
    8efc:	19e60411 	stmibne	r6!, {r0, r4, sl}^
    8f00:	011f0000 	tsteq	pc, r0
    8f04:	000019f2 	strdeq	r1, [r0], -r2
    8f08:	0017d916 	andseq	sp, r7, r6, lsl r9
    8f0c:	f80a0000 			; <UNDEFINED> instruction: 0xf80a0000
    8f10:	fd000005 	stc2	0, cr0, [r0, #-20]	; 0xffffffec
    8f14:	26000019 			; <UNDEFINED> instruction: 0x26000019
    8f18:	19f20400 	ldmibne	r2!, {sl}^
    8f1c:	67200000 	strvs	r0, [r0, -r0]!
    8f20:	13000007 	movwne	r0, #7
    8f24:	fd16017f 	ldc2	1, cr0, [r6, #-508]	; 0xfffffe04
    8f28:	01000019 	tsteq	r0, r9, lsl r0
    8f2c:	032e2001 			; <UNDEFINED> instruction: 0x032e2001
    8f30:	82130000 	andshi	r0, r3, #0
    8f34:	180c1401 	stmdane	ip, {r0, sl, ip}
    8f38:	01010000 	mrseq	r0, (UNDEF: 1)
    8f3c:	00030b20 	andeq	r0, r3, r0, lsr #22
    8f40:	02d81300 	sbcseq	r1, r8, #0, 6
    8f44:	0018000e 	andseq	r0, r8, lr
    8f48:	1b010100 	blne	49350 <__ccfg+0x293a8>
    8f4c:	03031308 	movweq	r1, #13064	; 0x3308
    8f50:	001a5609 	andseq	r5, sl, r9, lsl #12
    8f54:	375c1800 	ldrbcc	r1, [ip, -r0, lsl #16]
    8f58:	07130000 	ldreq	r0, [r3, -r0]
    8f5c:	17d90703 	ldrbne	r0, [r9, r3, lsl #14]
    8f60:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8f64:	00000b06 	andeq	r0, r0, r6, lsl #22
    8f68:	08030813 	stmdaeq	r3, {r0, r1, r4, fp}
    8f6c:	00001811 	andeq	r1, r0, r1, lsl r8
    8f70:	c3070004 	movwgt	r0, #28676	; 0x7004
    8f74:	13000003 	movwne	r0, #3
    8f78:	2f030309 	svccs	0x00030309
    8f7c:	1a00001a 	bne	8fec <__exidx_end+0x40bc>
    8f80:	00000033 	andeq	r0, r0, r3, lsr r0
    8f84:	030b1330 	movweq	r1, #45872	; 0xb330
    8f88:	001ac608 	andseq	ip, sl, r8, lsl #12
    8f8c:	1a071800 	bne	1cef94 <__ccfg+0x1aefec>
    8f90:	14130000 	ldrne	r0, [r3], #-0
    8f94:	17d90803 	ldrbne	r0, [r9, r3, lsl #16]
    8f98:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    8f9c:	000008a8 	andeq	r0, r0, r8, lsr #17
    8fa0:	08031513 	stmdaeq	r3, {r0, r1, r4, r8, sl, ip}
    8fa4:	000017d9 	ldrdeq	r1, [r0], -r9
    8fa8:	48cc1802 	stmiami	ip, {r1, fp, ip}^
    8fac:	16130000 	ldrne	r0, [r3], -r0
    8fb0:	19d30b03 	ldmibne	r3, {r0, r1, r8, r9, fp}^
    8fb4:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    8fb8:	0000432f 	andeq	r4, r0, pc, lsr #6
    8fbc:	09031713 	stmdbeq	r3, {r0, r1, r4, r8, r9, sl, ip}
    8fc0:	00001811 	andeq	r1, r0, r1, lsl r8
    8fc4:	00071808 	andeq	r1, r7, r8, lsl #16
    8fc8:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    8fcc:	1ac60f03 	bne	ff18cbe0 <_estack+0xdf187be0>
    8fd0:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    8fd4:	00000726 	andeq	r0, r0, r6, lsr #14
    8fd8:	15031913 	strne	r1, [r3, #-2323]	; 0xfffff6ed
    8fdc:	00001ad6 	ldrdeq	r1, [r0], -r6
    8fe0:	560a002c 	strpl	r0, [sl], -ip, lsr #32
    8fe4:	d600001a 			; <UNDEFINED> instruction: 0xd600001a
    8fe8:	0b00001a 	bleq	9058 <__exidx_end+0x4128>
    8fec:	000000aa 	andeq	r0, r0, sl, lsr #1
    8ff0:	04110003 	ldreq	r0, [r1], #-3
    8ff4:	00001a63 	andeq	r1, r0, r3, ror #20
    8ff8:	00089d07 	andeq	r9, r8, r7, lsl #26
    8ffc:	031c1300 	tsteq	ip, #0, 6
    9000:	001a631b 	andseq	r6, sl, fp, lsl r3
    9004:	087d2000 	ldmdaeq	sp!, {sp}^
    9008:	1e130000 	cdpne	0, 1, cr0, cr3, cr0, {0}
    900c:	1af81403 	bne	ffe0e020 <_estack+0xdfe09020>
    9010:	01010000 	mrseq	r0, (UNDEF: 1)
    9014:	1adc0411 	bne	ff70a060 <_estack+0xdf705060>
    9018:	4e250000 	cdpmi	0, 2, cr0, cr5, cr0, {0}
    901c:	14000005 	strne	r0, [r0], #-5
    9020:	17d9131d 	bfine	r1, sp, #6, #20
    9024:	01010000 	mrseq	r0, (UNDEF: 1)
    9028:	00023e25 	andeq	r3, r2, r5, lsr #28
    902c:	1a1e1400 	bne	78e034 <__ccfg+0x76e08c>
    9030:	000017ea 	andeq	r1, r0, sl, ror #15
    9034:	ea250101 	b	949440 <__ccfg+0x929498>
    9038:	14000008 	strne	r0, [r0], #-8
    903c:	17ea241e 			; <UNDEFINED> instruction: 0x17ea241e
    9040:	01010000 	mrseq	r0, (UNDEF: 1)
    9044:	00090625 	andeq	r0, r9, r5, lsr #12
    9048:	14221400 	strtne	r1, [r2], #-1024	; 0xfffffc00
    904c:	00001af8 	strdeq	r1, [r0], -r8
    9050:	14250101 	strtne	r0, [r5], #-257	; 0xfffffeff
    9054:	1500001b 	strne	r0, [r0, #-27]	; 0xffffffe5
    9058:	0f6d2739 	svceq	0x006d2739
    905c:	01010000 	mrseq	r0, (UNDEF: 1)
    9060:	001dbf25 	andseq	fp, sp, r5, lsr #30
    9064:	153a1500 	ldrne	r1, [sl, #-1280]!	; 0xfffffb00
    9068:	000009fe 	strdeq	r0, [r0], -lr
    906c:	25250101 	strcs	r0, [r5, #-257]!	; 0xfffffeff
    9070:	15000022 	strne	r0, [r0, #-34]	; 0xffffffde
    9074:	0cec1a3b 	vstmiaeq	ip!, {s3-s61}
    9078:	01010000 	mrseq	r0, (UNDEF: 1)
    907c:	0020b825 	eoreq	fp, r0, r5, lsr #16
    9080:	1a3c1500 	bne	f0e488 <__ccfg+0xeee4e0>
    9084:	00000d88 	andeq	r0, r0, r8, lsl #27
    9088:	bd230101 	stflts	f0, [r3, #-4]!
    908c:	01000021 	tsteq	r0, r1, lsr #32
    9090:	00a30c24 	adceq	r0, r3, r4, lsr #24
    9094:	03050000 	movweq	r0, #20480	; 0x5000
    9098:	200005c0 	andcs	r0, r0, r0, asr #11
    909c:	001a7723 	andseq	r7, sl, r3, lsr #14
    90a0:	0d260100 	stfeqs	f0, [r6, #-0]
    90a4:	000017ef 	andeq	r1, r0, pc, ror #15
    90a8:	05cc0305 	strbeq	r0, [ip, #773]	; 0x305
    90ac:	32232000 	eorcc	r2, r3, #0
    90b0:	01000011 	tsteq	r0, r1, lsl r0
    90b4:	17ef0327 	strbne	r0, [pc, r7, lsr #6]!
    90b8:	03050000 	movweq	r0, #20480	; 0x5000
    90bc:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
    90c0:	001eec23 	andseq	lr, lr, r3, lsr #24
    90c4:	0d2a0100 	stfeqs	f0, [sl, #-0]
    90c8:	000017ef 	andeq	r1, r0, pc, ror #15
    90cc:	05ee0305 	strbeq	r0, [lr, #773]!	; 0x305
    90d0:	e6232000 	strt	r2, [r3], -r0
    90d4:	0100001e 	tsteq	r0, lr, lsl r0
    90d8:	17ef0d43 	strbne	r0, [pc, r3, asr #26]!
    90dc:	03050000 	movweq	r0, #20480	; 0x5000
    90e0:	2000003a 	andcs	r0, r0, sl, lsr r0
    90e4:	001b8d23 	andseq	r8, fp, r3, lsr #26
    90e8:	0d470100 	stfeqe	f0, [r7, #-0]
    90ec:	000017ef 	andeq	r1, r0, pc, ror #15
    90f0:	05b40305 	ldreq	r0, [r4, #773]!	; 0x305
    90f4:	e50a2000 	str	r2, [sl, #-0]
    90f8:	ea000017 	b	915c <__exidx_end+0x422c>
    90fc:	0b00001b 	bleq	9170 <__exidx_end+0x4240>
    9100:	000000aa 	andeq	r0, r0, sl, lsr #1
    9104:	da040007 	ble	109128 <__ccfg+0xe9180>
    9108:	2300001b 	movwcs	r0, #27
    910c:	00001f74 	andeq	r1, r0, r4, ror pc
    9110:	ea134e01 	b	4dc91c <__ccfg+0x4bc974>
    9114:	0500001b 	streq	r0, [r0, #-27]	; 0xffffffe5
    9118:	00459a03 	subeq	r9, r5, r3, lsl #20
    911c:	221e2300 	andscs	r2, lr, #0, 6
    9120:	52010000 	andpl	r0, r1, #0
    9124:	0017d90d 	andseq	sp, r7, sp, lsl #18
    9128:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
    912c:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9130:	00001ea5 	andeq	r1, r0, r5, lsr #29
    9134:	d9035301 	stmdble	r3, {r0, r8, r9, ip, lr}
    9138:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    913c:	0005ec03 	andeq	lr, r5, r3, lsl #24
    9140:	20f32320 	rscscs	r2, r3, r0, lsr #6
    9144:	54010000 	strpl	r0, [r1], #-0
    9148:	0017d903 	andseq	sp, r7, r3, lsl #18
    914c:	b2030500 	andlt	r0, r3, #0, 10
    9150:	23200005 			; <UNDEFINED> instruction: 0x23200005
    9154:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    9158:	d9035501 	stmdble	r3, {r0, r8, sl, ip, lr}
    915c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    9160:	00003803 	andeq	r3, r0, r3, lsl #16
    9164:	01040c20 	tsteq	r4, r0, lsr #24
    9168:	1c6b0959 			; <UNDEFINED> instruction: 0x1c6b0959
    916c:	70100000 	andsvc	r0, r0, r0
    9170:	5a010073 	bpl	49344 <__ccfg+0x2939c>
    9174:	0017d908 	andseq	sp, r7, r8, lsl #18
    9178:	72100000 	andsvc	r0, r0, #0
    917c:	5b010077 	blpl	49360 <__ccfg+0x293b8>
    9180:	0017d904 	andseq	sp, r7, r4, lsl #18
    9184:	02000200 	andeq	r0, r0, #0, 4
    9188:	00001e34 	andeq	r1, r0, r4, lsr lr
    918c:	49035c01 	stmdbmi	r3, {r0, sl, fp, ip, lr}
    9190:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    9194:	00001c6b 	andeq	r1, r0, fp, ror #24
    9198:	001c770a 	andseq	r7, ip, sl, lsl #14
    919c:	001c8c00 	andseq	r8, ip, r0, lsl #24
    91a0:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    91a4:	00020000 	andeq	r0, r2, r0
    91a8:	001c7c04 	andseq	r7, ip, r4, lsl #24
    91ac:	1e662300 	cdpne	3, 6, cr2, cr6, cr0, {0}
    91b0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    91b4:	001c8c18 	andseq	r8, ip, r8, lsl ip
    91b8:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    91bc:	2300004e 	movwcs	r0, #78	; 0x4e
    91c0:	00001f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    91c4:	761b6601 	ldrvc	r6, [fp], -r1, lsl #12
    91c8:	05000010 	streq	r0, [r0, #-16]
    91cc:	0005e003 	andeq	lr, r5, r3
    91d0:	20df2320 	sbcscs	r2, pc, r0, lsr #6
    91d4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    91d8:	0018110e 	andseq	r1, r8, lr, lsl #2
    91dc:	b8030500 	stmdalt	r3, {r8, sl}
    91e0:	23200005 			; <UNDEFINED> instruction: 0x23200005
    91e4:	00001b2c 	andeq	r1, r0, ip, lsr #22
    91e8:	11176901 	tstne	r7, r1, lsl #18
    91ec:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    91f0:	0005c803 	andeq	ip, r5, r3, lsl #16
    91f4:	21462320 	cmpcs	r6, r0, lsr #6
    91f8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    91fc:	000ac121 	andeq	ip, sl, r1, lsr #2
    9200:	24030500 	strcs	r0, [r3], #-1280	; 0xfffffb00
    9204:	23200000 	nopcs	{0}	; <UNPREDICTABLE>
    9208:	00001cb0 			; <UNDEFINED> instruction: 0x00001cb0
    920c:	721a8301 	andsvc	r8, sl, #67108864	; 0x4000000
    9210:	0500000e 	streq	r0, [r0, #-14]
    9214:	00000803 	andeq	r0, r0, r3, lsl #16
    9218:	1a142320 	bne	511ea0 <__ccfg+0x4f1ef8>
    921c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    9220:	00177e11 	andseq	r7, r7, r1, lsl lr
    9224:	d0030500 	andle	r0, r3, r0, lsl #10
    9228:	27200005 	strcs	r0, [r0, -r5]!
    922c:	00002006 	andeq	r2, r0, r6
    9230:	0c020a01 			; <UNDEFINED> instruction: 0x0c020a01
    9234:	000000a3 	andeq	r0, r0, r3, lsr #1
    9238:	1b3b0128 	blne	ec96e0 <__ccfg+0xea9738>
    923c:	d7010000 	strle	r0, [r1, -r0]
    9240:	4c010603 	stcmi	6, cr0, [r1], {3}
    9244:	c0000026 	andgt	r0, r0, r6, lsr #32
    9248:	01000027 	tsteq	r0, r7, lsr #32
    924c:	001da59c 	mulseq	sp, ip, r5
    9250:	68702900 	ldmdavs	r0!, {r8, fp, sp}^
    9254:	d7010079 	smlsdxle	r1, r9, r0, r0
    9258:	00a31703 	adceq	r1, r3, r3, lsl #14
    925c:	24850000 	strcs	r0, [r5], #0
    9260:	6d290000 	stcvs	0, cr0, [r9, #-0]
    9264:	01007362 	tsteq	r0, r2, ror #6
    9268:	a32003d7 			; <UNDEFINED> instruction: 0xa32003d7
    926c:	cf000000 	svcgt	0x00000000
    9270:	2a000024 	bcs	9308 <__exidx_end+0x43d8>
    9274:	00001e35 	andeq	r1, r0, r5, lsr lr
    9278:	00002670 	andeq	r2, r0, r0, ror r6
    927c:	00000d08 	andeq	r0, r0, r8, lsl #26
    9280:	0203f001 	andeq	pc, r3, #1
    9284:	00001d93 	muleq	r0, r3, sp
    9288:	000d082b 	andeq	r0, sp, fp, lsr #16
    928c:	1e432c00 	cdpne	12, 4, cr2, cr3, cr0, {0}
    9290:	4e2d0000 	cdpmi	0, 2, cr0, cr13, cr0, {0}
    9294:	f800001e 			; <UNDEFINED> instruction: 0xf800001e
    9298:	2d000024 	stccs	0, cr0, [r0, #-144]	; 0xffffff70
    929c:	00001e5a 	andeq	r1, r0, sl, asr lr
    92a0:	00002517 	andeq	r2, r0, r7, lsl r5
    92a4:	001e662d 	andseq	r6, lr, sp, lsr #12
    92a8:	00254000 	eoreq	r4, r5, r0
    92ac:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    92b0:	00001fcc 	andeq	r1, r0, ip, asr #31
    92b4:	00002726 	andeq	r2, r0, r6, lsr #14
    92b8:	00000d48 	andeq	r0, r0, r8, asr #26
    92bc:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    92c0:	1ddb2f00 	ldclne	15, cr2, [fp]
    92c4:	4a010000 	bmi	492cc <__ccfg+0x29324>
    92c8:	a3010c03 	movwge	r0, #7171	; 0x1c03
    92cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    92d0:	9c00001f 	stcls	0, cr0, [r0], {31}
    92d4:	01000020 	tsteq	r0, r0, lsr #32
    92d8:	001e359c 	mulseq	lr, ip, r5
    92dc:	706f2900 	rsbvc	r2, pc, r0, lsl #18
    92e0:	4a010074 	bmi	494b8 <__ccfg+0x29510>
    92e4:	00a31803 	adceq	r1, r3, r3, lsl #16
    92e8:	25740000 	ldrbcs	r0, [r4, #-0]!
    92ec:	76290000 	strtvc	r0, [r9], -r0
    92f0:	01006c61 	tsteq	r0, r1, ror #24
    92f4:	1d25034a 	stcne	3, cr0, [r5, #-296]!	; 0xfffffed8
    92f8:	00000018 	andeq	r0, r0, r8, lsl r0
    92fc:	30000026 	andcc	r0, r0, r6, lsr #32
    9300:	00746572 	rsbseq	r6, r4, r2, ror r5
    9304:	06034c01 	streq	r4, [r3], -r1, lsl #24
    9308:	000000a3 	andeq	r0, r0, r3, lsr #1
    930c:	000026b8 			; <UNDEFINED> instruction: 0x000026b8
    9310:	001ccb31 	andseq	ip, ip, r1, lsr fp
    9314:	03cf0100 	biceq	r0, pc, #0, 2
    9318:	001f9401 	andseq	r9, pc, r1, lsl #8
    931c:	1ed43100 	cdpne	1, 13, cr3, cr4, cr0, {0}
    9320:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    9324:	1f4e0103 	svcne	0x004e0103
    9328:	80310000 	eorshi	r0, r1, r0
    932c:	01000020 	tsteq	r0, r0, lsr #32
    9330:	980103cd 	stmdals	r1, {r0, r2, r3, r6, r7, r8, r9}
    9334:	3200001f 	andcc	r0, r0, #31
    9338:	00001f4e 	andeq	r1, r0, lr, asr #30
    933c:	00001f78 	andeq	r1, r0, r8, ror pc
    9340:	01006a30 	tsteq	r0, r0, lsr sl
    9344:	a3040359 	movwge	r0, #17241	; 0x4359
    9348:	02000000 	andeq	r0, r0, #0
    934c:	00000027 	andeq	r0, r0, r7, lsr #32
    9350:	1d4a3300 	stclne	3, cr3, [sl, #-0]
    9354:	07010000 	streq	r0, [r1, -r0]
    9358:	73010d03 	movwvc	r0, #7427	; 0x1d03
    935c:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    9360:	0b010069 	bleq	4950c <__ccfg+0x29564>
    9364:	00a30603 	adceq	r0, r3, r3, lsl #12
    9368:	72340000 	eorsvc	r0, r4, #0
    936c:	0c010065 	stceq	0, cr0, [r1], {101}	; 0x65
    9370:	1e731a03 	vaddne.f32	s3, s6, s6
    9374:	64340000 	ldrtvs	r0, [r4], #-0
    9378:	0c010061 	stceq	0, cr0, [r1], {97}	; 0x61
    937c:	1e731f03 	cdpne	15, 7, cr1, cr3, cr3, {0}
    9380:	64340000 	ldrtvs	r0, [r4], #-0
    9384:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    9388:	1e732403 	cdpne	4, 7, cr2, cr3, cr3, {0}
    938c:	11000000 	mrsne	r0, (UNDEF: 0)
    9390:	0016ab04 	andseq	sl, r6, r4, lsl #22
    9394:	47012800 	strmi	r2, [r1, -r0, lsl #16]
    9398:	0100001b 	tsteq	r0, fp, lsl r0
    939c:	0101020d 	tsteq	r1, sp, lsl #4
    93a0:	000023ec 	andeq	r2, r0, ip, ror #7
    93a4:	000025dc 	ldrdeq	r2, [r0], -ip
    93a8:	1efd9c01 	cdpne	12, 15, cr9, cr13, cr1, {0}
    93ac:	cc350000 	ldcgt	0, cr0, [r5], #-0
    93b0:	01000008 	tsteq	r0, r8
    93b4:	d901020d 	stmdble	r1, {r0, r2, r3, r9}
    93b8:	15000017 	strne	r0, [r0, #-23]	; 0xffffffe9
    93bc:	31000027 	tstcc	r0, r7, lsr #32
    93c0:	00001a7e 	andeq	r1, r0, lr, ror sl
    93c4:	01021601 	tsteq	r2, r1, lsl #12
    93c8:	00002400 	andeq	r2, r0, r0, lsl #8
    93cc:	0020232e 	eoreq	r2, r0, lr, lsr #6
    93d0:	00246200 	eoreq	r6, r4, r0, lsl #4
    93d4:	000ca800 	andeq	sl, ip, r0, lsl #16
    93d8:	02250100 	eoreq	r0, r5, #0, 2
    93dc:	1ff32a04 	svcne	0x00f32a04
    93e0:	24660000 	strbtcs	r0, [r6], #-0
    93e4:	0cc00000 	stcleq	0, cr0, [r0], {0}
    93e8:	26010000 	strcs	r0, [r1], -r0
    93ec:	1eeb0402 	cdpne	4, 14, cr0, cr11, cr2, {0}
    93f0:	c02b0000 	eorgt	r0, fp, r0
    93f4:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    93f8:	00002001 	andeq	r2, r0, r1
    93fc:	0000273e 	andeq	r2, r0, lr, lsr r7
    9400:	00200d2c 	eoreq	r0, r0, ip, lsr #26
    9404:	36000000 	strcc	r0, [r0], -r0
    9408:	00002023 	andeq	r2, r0, r3, lsr #32
    940c:	000024ea 	andeq	r2, r0, sl, ror #9
    9410:	000024f4 	strdeq	r2, [r0], -r4
    9414:	03026501 	movweq	r6, #9473	; 0x2501
    9418:	c5012800 	strgt	r2, [r1, #-2048]	; 0xfffff800
    941c:	01000020 	tsteq	r0, r0, lsr #32
    9420:	010601ec 	smlatteq	r6, ip, r1, r0
    9424:	000025dc 	ldrdeq	r2, [r0], -ip
    9428:	0000264c 	andeq	r2, r0, ip, asr #12
    942c:	1f629c01 	svcne	0x00629c01
    9430:	f0370000 			; <UNDEFINED> instruction: 0xf0370000
    9434:	2f00000c 	svccs	0x0000000c
    9438:	3000001f 	andcc	r0, r0, pc, lsl r0
    943c:	fe01006a 	cdp2	0, 0, cr0, cr1, cr10, {3}
    9440:	00a30201 	adceq	r0, r3, r1, lsl #4
    9444:	275d0000 	ldrbcs	r0, [sp, -r0]
    9448:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    944c:	000021d5 	ldrdeq	r2, [r0], -r5
    9450:	000025f0 	strdeq	r2, [r0], -r0
    9454:	000025fa 	strdeq	r2, [r0], -sl
    9458:	0201f801 	andeq	pc, r1, #65536	; 0x10000
    945c:	00001f4a 	andeq	r1, r0, sl, asr #30
    9460:	0021e439 	eoreq	lr, r1, r9, lsr r4
    9464:	f23a0000 	vhadd.s<illegal width 64>	d0, d10, d0
    9468:	fa000021 	blx	94f4 <__exidx_end+0x45c4>
    946c:	d8000025 	stmdale	r0, {r0, r2, r5}
    9470:	0100000c 	tsteq	r0, ip
    9474:	390201fb 	stmdbcc	r2, {r0, r1, r3, r4, r5, r6, r7, r8}
    9478:	00002200 	andeq	r2, r0, r0, lsl #4
    947c:	043b0000 	ldrteq	r0, [fp], #-0
    9480:	0100001f 	tsteq	r0, pc, lsl r0
    9484:	1c0d01b5 	stfnes	f0, [sp], {181}	; 0xb5
    9488:	ec000023 	stc	0, cr0, [r0], {35}	; 0x23
    948c:	01000023 	tsteq	r0, r3, lsr #32
    9490:	001fcc9c 	mulseq	pc, ip, ip	; <UNPREDICTABLE>
    9494:	62643000 	rsbvs	r3, r4, #0
    9498:	01b70100 			; <UNDEFINED> instruction: 0x01b70100
    949c:	001e731a 	andseq	r7, lr, sl, lsl r3
    94a0:	00277000 	eoreq	r7, r7, r0
    94a4:	00693400 	rsbeq	r3, r9, r0, lsl #8
    94a8:	0601b801 	streq	fp, [r1], -r1, lsl #16
    94ac:	000000a3 	andeq	r0, r0, r3, lsr #1
    94b0:	006c7030 	rsbeq	r7, ip, r0, lsr r0
    94b4:	0901b801 	stmdbeq	r1, {r0, fp, ip, sp, pc}
    94b8:	000000a3 	andeq	r0, r0, r3, lsr #1
    94bc:	000027b2 			; <UNDEFINED> instruction: 0x000027b2
    94c0:	00726e30 	rsbseq	r6, r2, r0, lsr lr
    94c4:	0d01b801 	stceq	8, cr11, [r1, #-4]
    94c8:	000000a3 	andeq	r0, r0, r3, lsr #1
    94cc:	000027c5 	andeq	r2, r0, r5, asr #15
    94d0:	00220d3a 	eoreq	r0, r2, sl, lsr sp
    94d4:	00231c00 	eoreq	r1, r3, r0, lsl #24
    94d8:	000c7800 	andeq	r7, ip, r0, lsl #16
    94dc:	01c10100 	biceq	r0, r1, r0, lsl #2
    94e0:	221b3902 	andscs	r3, fp, #32768	; 0x8000
    94e4:	00000000 	andeq	r0, r0, r0
    94e8:	001e493c 	andseq	r4, lr, ip, lsr r9
    94ec:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    94f0:	5f3d010d 	svcpl	0x003d010d
    94f4:	0100001e 	tsteq	r0, lr, lsl r0
    94f8:	ec0d01a0 	stfs	f0, [sp], {160}	; 0xa0
    94fc:	0c00001e 	stceq	0, cr0, [r0], {30}
    9500:	0100001f 	tsteq	r0, pc, lsl r0
    9504:	1efe3c9c 	mrcne	12, 7, r3, cr14, cr12, {4}
    9508:	95010000 	strls	r0, [r1, #-0]
    950c:	33010d01 	movwcc	r0, #7425	; 0x1d01
    9510:	00001d0d 	andeq	r1, r0, sp, lsl #26
    9514:	0d018001 	stceq	0, cr8, [r1, #-4]
    9518:	00201901 	eoreq	r1, r0, r1, lsl #18
    951c:	65723400 	ldrbvs	r3, [r2, #-1024]!	; 0xfffffc00
    9520:	01840100 	orreq	r0, r4, r0, lsl #2
    9524:	001e731a 	andseq	r7, lr, sl, lsl r3
    9528:	00693400 	rsbeq	r3, r9, r0, lsl #8
    952c:	06018501 	streq	r8, [r1], -r1, lsl #10
    9530:	000000a3 	andeq	r0, r0, r3, lsr #1
    9534:	1da43c00 	stcne	12, cr3, [r4]
    9538:	61010000 	mrsvs	r0, (UNDEF: 1)
    953c:	3e010d01 	cdpcc	13, 0, cr0, cr1, cr1, {0}
    9540:	00001a0e 	andeq	r1, r0, lr, lsl #20
    9544:	010dff01 	tsteq	sp, r1, lsl #30	; <UNPREDICTABLE>
    9548:	001ada3f 	andseq	sp, sl, pc, lsr sl
    954c:	0de20100 	stfeqe	f0, [r2]
    9550:	205f0101 	subscs	r0, pc, r1, lsl #2
    9554:	63400000 	movtvs	r0, #0
    9558:	0100646d 	tsteq	r0, sp, ror #8
    955c:	0bc026e2 	bleq	ff0130ec <_estack+0xdf00e0ec>
    9560:	d0410000 	suble	r0, r1, r0
    9564:	01000021 	tsteq	r0, r1, lsr #32
    9568:	180031e2 	stmdane	r0, {r1, r5, r6, r7, r8, ip, sp}
    956c:	d7410000 	strble	r0, [r1, -r0]
    9570:	01000020 	tsteq	r0, r0, lsr #32
    9574:	18003ee2 	stmdane	r0, {r1, r5, r6, r7, r9, sl, fp, ip, sp}
    9578:	3f000000 	svccc	0x00000000
    957c:	000019e1 	andeq	r1, r0, r1, ror #19
    9580:	010dc501 	tsteq	sp, r1, lsl #10
    9584:	00209201 	eoreq	r9, r0, r1, lsl #4
    9588:	6d634000 	stclvs	0, cr4, [r3, #-0]
    958c:	c5010064 	strgt	r0, [r1, #-100]	; 0xffffff9c
    9590:	0018001e 	andseq	r0, r8, lr, lsl r0
    9594:	65724200 	ldrbvs	r4, [r2, #-512]!	; 0xfffffe00
    9598:	ca010073 	bgt	4976c <__ccfg+0x297c4>
    959c:	0000a306 	andeq	sl, r0, r6, lsl #6
    95a0:	6e634200 	cdpvs	2, 6, cr4, cr3, cr0, {0}
    95a4:	cd010074 	stcgt	0, cr0, [r1, #-464]	; 0xfffffe30
    95a8:	0000a306 	andeq	sl, r0, r6, lsl #6
    95ac:	c5430000 	strbgt	r0, [r3, #-0]
    95b0:	0300000d 	movweq	r0, #13
    95b4:	01010154 	tsteq	r1, r4, asr r1
    95b8:	0020af03 	eoreq	sl, r0, r3, lsl #30
    95bc:	0c5a4400 	cfldrdeq	mvd4, [sl], {-0}
    95c0:	54030000 	strpl	r0, [r3], #-0
    95c4:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    95c8:	43000000 	movwmi	r0, #0
    95cc:	00000eca 	andeq	r0, r0, sl, asr #29
    95d0:	01011e03 	tsteq	r1, r3, lsl #28
    95d4:	20cc0301 	sbccs	r0, ip, r1, lsl #6
    95d8:	5a440000 	bpl	11095e0 <__ccfg+0x10e9638>
    95dc:	0300000c 	movweq	r0, #12
    95e0:	7f17011e 	svcvc	0x0017011e
    95e4:	00000000 	andeq	r0, r0, r0
    95e8:	00206643 	eoreq	r6, r0, r3, asr #12
    95ec:	01ea0500 	mvneq	r0, r0, lsl #10
    95f0:	61030115 	tstvs	r3, r5, lsl r1
    95f4:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    95f8:	05005370 	streq	r5, [r0, #-880]	; 0xfffffc90
    95fc:	611401f2 			; <UNDEFINED> instruction: 0x611401f2
    9600:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    9604:	05004470 	streq	r4, [r0, #-1136]	; 0xfffffb90
    9608:	671c01f3 			; <UNDEFINED> instruction: 0x671c01f3
    960c:	34000021 	strcc	r0, [r0], #-33	; 0xffffffdf
    9610:	05003174 	streq	r3, [r0, #-372]	; 0xfffffe8c
    9614:	7f0d01f4 	svcvc	0x000d01f4
    9618:	34000000 	strcc	r0, [r0], #-0
    961c:	05003274 	streq	r3, [r0, #-628]	; 0xfffffd8c
    9620:	7f1101f4 	svcvc	0x001101f4
    9624:	34000000 	strcc	r0, [r0], #-0
    9628:	05003374 	streq	r3, [r0, #-884]	; 0xfffffc8c
    962c:	7f1501f4 	svcvc	0x001501f4
    9630:	34000000 	strcc	r0, [r0], #-0
    9634:	05003474 	streq	r3, [r0, #-1140]	; 0xfffffb8c
    9638:	7f1901f4 	svcvc	0x001901f4
    963c:	34000000 	strcc	r0, [r0], #-0
    9640:	05003574 	streq	r3, [r0, #-1396]	; 0xfffffa8c
    9644:	7f1d01f4 	svcvc	0x001d01f4
    9648:	34000000 	strcc	r0, [r0], #-0
    964c:	05003674 	streq	r3, [r0, #-1652]	; 0xfffff98c
    9650:	7f2101f4 	svcvc	0x002101f4
    9654:	34000000 	strcc	r0, [r0], #-0
    9658:	05003774 	streq	r3, [r0, #-1908]	; 0xfffff88c
    965c:	7f2501f4 	svcvc	0x002501f4
    9660:	34000000 	strcc	r0, [r0], #-0
    9664:	05003874 	streq	r3, [r0, #-2164]	; 0xfffff78c
    9668:	7f2901f4 	svcvc	0x002901f4
    966c:	27000000 	strcs	r0, [r0, -r0]
    9670:	000020a0 	andeq	r2, r0, r0, lsr #1
    9674:	0d01f505 	cfstr32eq	mvfx15, [r1, #-20]	; 0xffffffec
    9678:	0000007f 	andeq	r0, r0, pc, ror r0
    967c:	8b041100 	blhi	10da84 <__ccfg+0xedadc>
    9680:	11000000 	mrsne	r0, (UNDEF: 0)
    9684:	00009704 	andeq	r9, r0, r4, lsl #14
    9688:	1eac4500 	cdpne	5, 10, cr4, cr12, cr0, {0}
    968c:	2f040000 	svccs	0x00040000
    9690:	03011501 	movweq	r1, #5377	; 0x1501
    9694:	001b7c45 	andseq	r7, fp, r5, asr #24
    9698:	01220400 			; <UNDEFINED> instruction: 0x01220400
    969c:	43030115 	movwmi	r0, #12565	; 0x3115
    96a0:	00001a33 	andeq	r1, r0, r3, lsr sl
    96a4:	15011104 	strne	r1, [r1, #-260]	; 0xfffffefc
    96a8:	21ad0301 			; <UNDEFINED> instruction: 0x21ad0301
    96ac:	33270000 			; <UNDEFINED> instruction: 0x33270000
    96b0:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    96b4:	840d0113 	strhi	r0, [sp], #-275	; 0xfffffeed
    96b8:	27000009 	strcs	r0, [r0, -r9]
    96bc:	00001bea 	andeq	r1, r0, sl, ror #23
    96c0:	0e011404 	cdpeq	4, 0, cr1, cr1, cr4, {0}
    96c4:	00000bc6 	andeq	r0, r0, r6, asr #23
    96c8:	21de4500 	bicscs	r4, lr, r0, lsl #10
    96cc:	0d040000 	stceq	0, cr0, [r4, #-0]
    96d0:	03011501 	movweq	r1, #5377	; 0x1501
    96d4:	00217743 	eoreq	r7, r1, r3, asr #14
    96d8:	01040400 	tsteq	r4, r0, lsl #8
    96dc:	d5030115 	strle	r0, [r3, #-277]	; 0xfffffeeb
    96e0:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    96e4:	00001bf4 	strdeq	r1, [r0], -r4
    96e8:	0e010604 	cfmadd32eq	mvax0, mvfx0, mvfx1, mvfx4
    96ec:	00000bc6 	andeq	r0, r0, r6, asr #23
    96f0:	1e504300 	cdpne	3, 5, cr4, cr0, cr0, {0}
    96f4:	1d020000 	stcne	0, cr0, [r2, #-0]
    96f8:	03010101 	movweq	r0, #4353	; 0x1101
    96fc:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    9700:	001d1344 	andseq	r1, sp, r4, asr #6
    9704:	011d0200 	tsteq	sp, r0, lsl #4
    9708:	00007f19 	andeq	r7, r0, r9, lsl pc
    970c:	fe3f0000 	cdp2	0, 3, cr0, cr15, cr0, {0}
    9710:	0200001b 	andeq	r0, r0, #27
    9714:	030101f7 	movweq	r0, #4599	; 0x11f7
    9718:	0000220d 	andeq	r2, r0, sp, lsl #4
    971c:	001d1341 	andseq	r1, sp, r1, asr #6
    9720:	1bf70200 	blne	ffdc9f28 <_estack+0xdfdc4f28>
    9724:	0000007f 	andeq	r0, r0, pc, ror r0
    9728:	1c323f00 	ldcne	15, cr3, [r2], #-0
    972c:	aa020000 	bge	89734 <__ccfg+0x6978c>
    9730:	28030101 	stmdacs	r3, {r0, r8}
    9734:	41000022 	tstmi	r0, r2, lsr #32
    9738:	00001d13 	andeq	r1, r0, r3, lsl sp
    973c:	7f1baa02 	svcvc	0x001baa02
    9740:	00000000 	andeq	r0, r0, r0
    9744:	001fea46 	andseq	lr, pc, r6, asr #20
    9748:	019c0200 	orrseq	r0, ip, r0, lsl #4
    974c:	3a460301 	bcc	118a358 <__ccfg+0x116a3b0>
    9750:	02000022 	andeq	r0, r0, #34	; 0x22
    9754:	03010179 	movweq	r0, #4473	; 0x1179
    9758:	00205f47 	eoreq	r5, r0, r7, asr #30
    975c:	00209c00 	eoreq	r9, r0, r0, lsl #24
    9760:	0020e400 	eoreq	lr, r0, r0, lsl #8
    9764:	8b9c0100 	blhi	fe709b6c <_estack+0xde704b6c>
    9768:	48000022 	stmdami	r0, {r1, r5}
    976c:	0000206d 	andeq	r2, r0, sp, rrx
    9770:	000027e3 	andeq	r2, r0, r3, ror #15
    9774:	0020792d 	eoreq	r7, r0, sp, lsr #18
    9778:	00280100 	eoreq	r0, r8, r0, lsl #2
    977c:	20852c00 	addcs	r2, r5, r0, lsl #24
    9780:	5f490000 	svcpl	0x00490000
    9784:	b2000020 	andlt	r0, r0, #32
    9788:	b4000020 	strlt	r0, [r0], #-32	; 0xffffffe0
    978c:	01000020 	tsteq	r0, r0, lsr #32
    9790:	6d480dc5 	stclvs	13, cr0, [r8, #-788]	; 0xfffffcec
    9794:	35000020 	strcc	r0, [r0, #-32]	; 0xffffffe0
    9798:	2c000028 	stccs	0, cr0, [r0], {40}	; 0x28
    979c:	00002079 	andeq	r2, r0, r9, ror r0
    97a0:	0020852c 	eoreq	r8, r0, ip, lsr #10
    97a4:	47000000 	strmi	r0, [r0, -r0]
    97a8:	00001fe9 	andeq	r1, r0, r9, ror #31
    97ac:	000020e4 	andeq	r2, r0, r4, ror #1
    97b0:	00002108 	andeq	r2, r0, r8, lsl #2
    97b4:	22b09c01 	adcscs	r9, r0, #256	; 0x100
    97b8:	e9360000 	ldmdb	r6!, {}	; <UNPREDICTABLE>
    97bc:	ee00001f 	mcr	0, 0, r0, cr0, cr15, {0}
    97c0:	fc000020 	stc2	0, cr0, [r0], {32}
    97c4:	01000020 	tsteq	r0, r0, lsr #32
    97c8:	000d0195 	muleq	sp, r5, r1
    97cc:	00201947 	eoreq	r1, r0, r7, asr #18
    97d0:	00210800 	eoreq	r0, r1, r0, lsl #16
    97d4:	00216400 	eoreq	r6, r1, r0, lsl #8
    97d8:	199c0100 	ldmibne	ip, {r8}
    97dc:	4a000023 	bmi	9870 <__exidx_end+0x4940>
    97e0:	00002019 	andeq	r2, r0, r9, lsl r0
    97e4:	00002112 	andeq	r2, r0, r2, lsl r1
    97e8:	0000214e 	andeq	r2, r0, lr, asr #2
    97ec:	0d016101 	stfeqs	f6, [r1, #-4]
    97f0:	0022282e 	eoreq	r2, r2, lr, lsr #16
    97f4:	00211200 	eoreq	r1, r1, r0, lsl #4
    97f8:	000be800 	andeq	lr, fp, r0, lsl #16
    97fc:	016f0100 	cmneq	pc, r0, lsl #2
    9800:	20923802 	addscs	r3, r2, r2, lsl #16
    9804:	213a0000 	teqcs	sl, r0
    9808:	21420000 	mrscs	r0, (UNDEF: 66)
    980c:	7a010000 	bvc	49814 <__ccfg+0x2986c>
    9810:	23000201 	movwcs	r0, #513	; 0x201
    9814:	a1390000 	teqge	r9, r0
    9818:	00000020 	andeq	r0, r0, r0, lsr #32
    981c:	0020924a 	eoreq	r9, r0, sl, asr #4
    9820:	00214200 	eoreq	r4, r1, r0, lsl #4
    9824:	00214600 	eoreq	r4, r1, r0, lsl #12
    9828:	017a0100 	cmneq	sl, r0, lsl #2
    982c:	20a13902 	adccs	r3, r1, r2, lsl #18
    9830:	00000000 	andeq	r0, r0, r0
    9834:	202c4700 	eorcs	r4, ip, r0, lsl #14
    9838:	21640000 	cmncs	r4, r0
    983c:	219c0000 	orrscs	r0, ip, r0
    9840:	9c010000 	stcls	0, cr0, [r1], {-0}
    9844:	00002344 	andeq	r2, r0, r4, asr #6
    9848:	00203a48 	eoreq	r3, r0, r8, asr #20
    984c:	00284800 	eoreq	r4, r8, r0, lsl #16
    9850:	20464800 	subcs	r4, r6, r0, lsl #16
    9854:	28660000 	stmdacs	r6!, {}^	; <UNPREDICTABLE>
    9858:	52390000 	eorspl	r0, r9, #0
    985c:	00000020 	andeq	r0, r0, r0, lsr #32
    9860:	0020234b 	eoreq	r2, r0, fp, asr #6
    9864:	00219c00 	eoreq	r9, r1, r0, lsl #24
    9868:	00231c00 	eoreq	r1, r3, r0, lsl #24
    986c:	2a9c0100 	bcs	fe709c74 <_estack+0xde704c74>
    9870:	000020af 	andeq	r2, r0, pc, lsr #1
    9874:	0000219c 	muleq	r0, ip, r1
    9878:	00000c08 	andeq	r0, r0, r8, lsl #24
    987c:	02010801 	andeq	r0, r1, #65536	; 0x10000
    9880:	0000236e 	andeq	r2, r0, lr, ror #6
    9884:	0020be39 	eoreq	fp, r0, r9, lsr lr
    9888:	af380000 	svcge	0x00380000
    988c:	a8000020 	stmdage	r0, {r5}
    9890:	ac000021 	stcge	0, cr0, [r0], {33}	; 0x21
    9894:	01000021 	tsteq	r0, r1, lsr #32
    9898:	89020108 	stmdbhi	r2, {r3, r8}
    989c:	39000023 	stmdbcc	r0, {r0, r1, r5}
    98a0:	000020be 	strheq	r2, [r0], -lr
    98a4:	22322e00 	eorscs	r2, r2, #0, 28
    98a8:	21ca0000 	biccs	r0, sl, r0
    98ac:	0c200000 	stceq	0, cr0, [r0], #-0
    98b0:	1a010000 	bne	498b8 <__ccfg+0x29910>
    98b4:	6d2a0201 	sfmvs	f0, 4, [sl, #-4]!
    98b8:	d8000021 	stmdale	r0, {r0, r5}
    98bc:	38000021 	stmdacc	r0, {r0, r5}
    98c0:	0100000c 	tsteq	r0, ip
    98c4:	0b020121 	bleq	89d50 <__ccfg+0x69da8>
    98c8:	3a000024 	bcc	9960 <__exidx_end+0x4a30>
    98cc:	00002178 	andeq	r2, r0, r8, ror r1
    98d0:	000021d8 	ldrdeq	r2, [r0], -r8
    98d4:	00000c38 	andeq	r0, r0, r8, lsr ip
    98d8:	04013104 	streq	r3, [r1], #-260	; 0xfffffefc
    98dc:	0021b838 	eoreq	fp, r1, r8, lsr r8
    98e0:	0021d800 	eoreq	sp, r1, r0, lsl #16
    98e4:	0021e400 	eoreq	lr, r1, r0, lsl #8
    98e8:	01250400 			; <UNDEFINED> instruction: 0x01250400
    98ec:	0023df04 	eoreq	sp, r3, r4, lsl #30
    98f0:	21c74c00 	biccs	r4, r7, r0, lsl #24
    98f4:	041c0000 	ldreq	r0, [ip], #-0
    98f8:	3a002100 	bcc	11d00 <__exidx_end+0xcdd0>
    98fc:	00002183 	andeq	r2, r0, r3, lsl #3
    9900:	000021e4 	andeq	r2, r0, r4, ror #3
    9904:	00000c40 	andeq	r0, r0, r0, asr #24
    9908:	04012604 	streq	r2, [r1], #-1540	; 0xfffff9fc
    990c:	000c402b 	andeq	r4, ip, fp, lsr #32
    9910:	21924c00 	orrscs	r4, r2, r0, lsl #24
    9914:	03400000 	movteq	r0, #0
    9918:	9f4c2100 	svcls	0x004c2100
    991c:	bc000021 	stclt	0, cr0, [r0], {33}	; 0x21
    9920:	00210003 	eoreq	r0, r1, r3
    9924:	3a000000 	bcc	992c <__exidx_end+0x49fc>
    9928:	000020cc 	andeq	r2, r0, ip, asr #1
    992c:	000021e8 	andeq	r2, r0, r8, ror #3
    9930:	00000c58 	andeq	r0, r0, r8, asr ip
    9934:	02012201 	andeq	r2, r1, #268435456	; 0x10000000
    9938:	000c582b 	andeq	r5, ip, fp, lsr #16
    993c:	20db2d00 	sbcscs	r2, fp, r0, lsl #26
    9940:	28840000 	stmcs	r4, {}	; <UNPREDICTABLE>
    9944:	e72d0000 	str	r0, [sp, -r0]!
    9948:	97000020 	strls	r0, [r0, -r0, lsr #32]
    994c:	2c000028 	stccs	0, cr0, [r0], {40}	; 0x28
    9950:	000020f3 	strdeq	r2, [r0], -r3
    9954:	0020ff2d 	eoreq	pc, r0, sp, lsr #30
    9958:	0028b500 	eoreq	fp, r8, r0, lsl #10
    995c:	210b2c00 	tstcs	fp, r0, lsl #24
    9960:	172d0000 	strne	r0, [sp, -r0]!
    9964:	c8000021 	stmdagt	r0, {r0, r5}
    9968:	2c000028 	stccs	0, cr0, [r0], {40}	; 0x28
    996c:	00002123 	andeq	r2, r0, r3, lsr #2
    9970:	00212f2d 	eoreq	r2, r1, sp, lsr #30
    9974:	0028db00 	eoreq	sp, r8, r0, lsl #22
    9978:	213b2d00 	teqcs	fp, r0, lsl #26
    997c:	28ee0000 	stmiacs	lr!, {}^	; <UNPREDICTABLE>
    9980:	472d0000 	strmi	r0, [sp, -r0]!
    9984:	19000021 	stmdbne	r0, {r0, r5}
    9988:	2c000029 	stccs	0, cr0, [r0], {41}	; 0x29
    998c:	00002153 	andeq	r2, r0, r3, asr r1
    9990:	00000000 	andeq	r0, r0, r0
    9994:	00000731 	andeq	r0, r0, r1, lsr r7
    9998:	23ba0003 			; <UNDEFINED> instruction: 0x23ba0003
    999c:	01040000 	mrseq	r0, (UNDEF: 4)
    99a0:	000000bd 	strheq	r0, [r0], -sp
    99a4:	0022550c 	eoreq	r5, r2, ip, lsl #10
    99a8:	00066800 	andeq	r6, r6, r0, lsl #16
    99ac:	000dc000 	andeq	ip, sp, r0
    99b0:	00000000 	andeq	r0, r0, r0
    99b4:	0059ae00 	subseq	sl, r9, r0, lsl #28
    99b8:	06010200 	streq	r0, [r1], -r0, lsl #4
    99bc:	000008de 	ldrdeq	r0, [r0], -lr
    99c0:	a3050202 	movwge	r0, #20994	; 0x5202
    99c4:	02000007 	andeq	r0, r0, #7
    99c8:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    99cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    99d0:	0005e805 	andeq	lr, r5, r5, lsl #16
    99d4:	08350300 	ldmdaeq	r5!, {r8, r9}
    99d8:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    99dc:	00004d17 	andeq	r4, r0, r7, lsl sp
    99e0:	08010200 	stmdaeq	r1, {r9}
    99e4:	000008dc 	ldrdeq	r0, [r0], -ip
    99e8:	0003d203 	andeq	sp, r3, r3, lsl #4
    99ec:	1c310200 	lfmne	f0, 4, [r1], #-0
    99f0:	00000060 	andeq	r0, r0, r0, rrx
    99f4:	aa070202 	bge	1ca204 <__ccfg+0x1aa25c>
    99f8:	03000009 	movweq	r0, #9
    99fc:	000008f5 	strdeq	r0, [r0], -r5
    9a00:	731b3402 	tstvc	fp, #33554432	; 0x2000000
    9a04:	02000000 	andeq	r0, r0, #0
    9a08:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
    9a0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9a10:	00039207 	andeq	r9, r3, r7, lsl #4
    9a14:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    9a18:	00746e69 	rsbseq	r6, r4, r9, ror #28
    9a1c:	9c070402 	cfstrsls	mvf0, [r7], {2}
    9a20:	03000003 	movweq	r0, #3
    9a24:	0000041e 	andeq	r0, r0, lr, lsl r4
    9a28:	9b1b2803 	blls	6d3a3c <__ccfg+0x6b3a94>
    9a2c:	05000000 	streq	r0, [r0, #-0]
    9a30:	00000865 	andeq	r0, r0, r5, ror #16
    9a34:	b3000a04 	movwlt	r0, #2564	; 0xa04
    9a38:	06000000 	streq	r0, [r0], -r0
    9a3c:	0000094c 	andeq	r0, r0, ip, asr #18
    9a40:	000000b3 	strheq	r0, [r0], -r3
    9a44:	07000100 	streq	r0, [r0, -r0, lsl #2]
    9a48:	08670304 	stmdaeq	r7!, {r2, r8, r9}^
    9a4c:	63030000 	movwvs	r0, #12288	; 0x3000
    9a50:	00008f18 	andeq	r8, r0, r8, lsl pc
    9a54:	23d80300 	bicscs	r0, r8, #0, 6
    9a58:	27040000 	strcs	r0, [r4, -r0]
    9a5c:	00005412 	andeq	r5, r0, r2, lsl r4
    9a60:	00c10800 	sbceq	r0, r1, r0, lsl #16
    9a64:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    9a68:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    9a6c:	0041112b 	subeq	r1, r1, fp, lsr #2
    9a70:	d2090000 	andle	r0, r9, #0
    9a74:	03000000 	movweq	r0, #0
    9a78:	00002429 	andeq	r2, r0, r9, lsr #8
    9a7c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    9a80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9a84:	000000e3 	andeq	r0, r0, r3, ror #1
    9a88:	0004fb03 	andeq	pc, r4, r3, lsl #22
    9a8c:	122d0400 	eorne	r0, sp, #0, 8
    9a90:	00000067 	andeq	r0, r0, r7, rrx
    9a94:	00087503 	andeq	r7, r8, r3, lsl #10
    9a98:	0f2e0400 	svceq	0x002e0400
    9a9c:	0000010c 	andeq	r0, r0, ip, lsl #2
    9aa0:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    9aa4:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    9aa8:	a0093204 	andge	r3, r9, r4, lsl #4
    9aac:	0c000001 	stceq	0, cr0, [r0], {1}
    9ab0:	0000003e 	andeq	r0, r0, lr, lsr r0
    9ab4:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    9ab8:	01000000 	mrseq	r0, (UNDEF: 0)
    9abc:	0c000701 	stceq	7, cr0, [r0], {1}
    9ac0:	00000501 	andeq	r0, r0, r1, lsl #10
    9ac4:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    9ac8:	01000000 	mrseq	r0, (UNDEF: 0)
    9acc:	0c000601 	stceq	6, cr0, [r0], {1}
    9ad0:	00000237 	andeq	r0, r0, r7, lsr r2
    9ad4:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    9ad8:	01000000 	mrseq	r0, (UNDEF: 0)
    9adc:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    9ae0:	0000053b 	andeq	r0, r0, fp, lsr r5
    9ae4:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    9ae8:	01000000 	mrseq	r0, (UNDEF: 0)
    9aec:	0c000401 	cfstrseq	mvf0, [r0], {1}
    9af0:	000007c4 	andeq	r0, r0, r4, asr #15
    9af4:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    9af8:	01000000 	mrseq	r0, (UNDEF: 0)
    9afc:	0d000004 	stceq	0, cr0, [r0, #-16]
    9b00:	00000508 	andeq	r0, r0, r8, lsl #10
    9b04:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    9b08:	01000000 	mrseq	r0, (UNDEF: 0)
    9b0c:	0006d20d 	andeq	sp, r6, sp, lsl #4
    9b10:	033c0400 	teqeq	ip, #0, 8
    9b14:	000000d2 	ldrdeq	r0, [r0], -r2
    9b18:	0a7c0d02 	beq	1f0cf28 <__ccfg+0x1eecf80>
    9b1c:	3d040000 	stccc	0, cr0, [r4, #-0]
    9b20:	0000d203 	andeq	sp, r0, r3, lsl #4
    9b24:	070d0300 	streq	r0, [sp, -r0, lsl #6]
    9b28:	04000007 	streq	r0, [r0], #-7
    9b2c:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    9b30:	00040000 	andeq	r0, r4, r0
    9b34:	00028903 	andeq	r8, r2, r3, lsl #18
    9b38:	03410400 	movteq	r0, #5120	; 0x1400
    9b3c:	00000112 	andeq	r0, r0, r2, lsl r1
    9b40:	0001a009 	andeq	sl, r1, r9
    9b44:	05420e00 	strbeq	r0, [r2, #-3584]	; 0xfffff200
    9b48:	43040000 	movwmi	r0, #16384	; 0x4000
    9b4c:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    9b50:	0e010100 	adfeqs	f0, f1, f0
    9b54:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    9b58:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    9b5c:	01000001 	tsteq	r0, r1
    9b60:	d3040a01 	movwle	r0, #18945	; 0x4a01
    9b64:	02000001 	andeq	r0, r0, #1
    9b68:	08e50801 	stmiaeq	r5!, {r0, fp}^
    9b6c:	d3080000 	movwle	r0, #32768	; 0x8000
    9b70:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9b74:	00000292 	muleq	r0, r2, r2
    9b78:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    9b7c:	01000001 	tsteq	r0, r1
    9b80:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    9b84:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    9b88:	050d0000 	streq	r0, [sp, #-0]
    9b8c:	05000006 	streq	r0, [r0, #-6]
    9b90:	00670b90 	mlseq	r7, r0, fp, r0
    9b94:	0d000000 	stceq	0, cr0, [r0, #-0]
    9b98:	00000bae 	andeq	r0, r0, lr, lsr #23
    9b9c:	c1079105 	tstgt	r7, r5, lsl #2
    9ba0:	04000000 	streq	r0, [r0], #-0
    9ba4:	0001ea0d 	andeq	lr, r1, sp, lsl #20
    9ba8:	10920500 	addsne	r0, r2, r0, lsl #10
    9bac:	000000de 	ldrdeq	r0, [r0], -lr
    9bb0:	45030006 	strmi	r0, [r3, #-6]
    9bb4:	05000009 	streq	r0, [r0, #-9]
    9bb8:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    9bbc:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    9bc0:	35000002 	strcc	r0, [r0, #-2]
    9bc4:	10000002 	andne	r0, r0, r2
    9bc8:	07130e00 	ldreq	r0, [r3, -r0, lsl #28]
    9bcc:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    9bd0:	00022a0f 	andeq	r2, r2, pc, lsl #20
    9bd4:	0b010100 	bleq	49fdc <__ccfg+0x2a034>
    9bd8:	09910601 	ldmibeq	r1, {r0, r9, sl}
    9bdc:	0000026d 	andeq	r0, r0, sp, ror #4
    9be0:	00070e0c 	andeq	r0, r7, ip, lsl #28
    9be4:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    9be8:	000000d2 	ldrdeq	r0, [r0], -r2
    9bec:	00010701 	andeq	r0, r1, r1, lsl #14
    9bf0:	00047c0c 	andeq	r7, r4, ip, lsl #24
    9bf4:	03940600 	orrseq	r0, r4, #0, 12
    9bf8:	000000d2 	ldrdeq	r0, [r0], -r2
    9bfc:	00000101 	andeq	r0, r0, r1, lsl #2
    9c00:	07d00300 	ldrbeq	r0, [r0, r0, lsl #6]
    9c04:	96060000 	strls	r0, [r6], -r0
    9c08:	00024303 	andeq	r4, r2, r3, lsl #6
    9c0c:	026d0800 	rsbeq	r0, sp, #0, 16
    9c10:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    9c14:	89000002 	stmdbhi	r0, {r1}
    9c18:	10000002 	andne	r0, r0, r2
    9c1c:	027e0800 	rsbseq	r0, lr, #0, 16
    9c20:	4b0e0000 	blmi	389c28 <__ccfg+0x369c80>
    9c24:	06000003 	streq	r0, [r0], -r3
    9c28:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    9c2c:	01010000 	mrseq	r0, (UNDEF: 1)
    9c30:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    9c34:	0002a700 	andeq	sl, r2, r0, lsl #14
    9c38:	08001000 	stmdaeq	r0, {ip}
    9c3c:	0000029c 	muleq	r0, ip, r2
    9c40:	0004bb0e 	andeq	fp, r4, lr, lsl #22
    9c44:	13060700 	movwne	r0, #26368	; 0x6700
    9c48:	000002a7 	andeq	r0, r0, r7, lsr #5
    9c4c:	b40e0101 	strlt	r0, [lr], #-257	; 0xfffffeff
    9c50:	05000006 	streq	r0, [r0, #-6]
    9c54:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    9c58:	01010000 	mrseq	r0, (UNDEF: 1)
    9c5c:	0008fe11 	andeq	pc, r8, r1, lsl lr	; <UNPREDICTABLE>
    9c60:	016e0800 	cmneq	lr, r0, lsl #16
    9c64:	0002d510 	andeq	sp, r2, r0, lsl r5
    9c68:	db040a00 	blle	10c470 <__ccfg+0xec4c8>
    9c6c:	12000002 	andne	r0, r0, #2
    9c70:	0002e701 	andeq	lr, r2, r1, lsl #14
    9c74:	00c11300 	sbceq	r1, r1, r0, lsl #6
    9c78:	0f000000 	svceq	0x00000000
    9c7c:	000001da 	ldrdeq	r0, [r0], -sl
    9c80:	000002f2 	strdeq	r0, [r0], -r2
    9c84:	e7080010 	smlad	r8, r0, r0, r0
    9c88:	14000002 	strne	r0, [r0], #-2
    9c8c:	00000767 	andeq	r0, r0, r7, ror #14
    9c90:	13017f08 	movwne	r7, #7944	; 0x1f08
    9c94:	000002f2 	strdeq	r0, [r0], -r2
    9c98:	2e140101 	mufcss	f0, f4, f1
    9c9c:	08000003 	stmdaeq	r0, {r0, r1}
    9ca0:	ef140182 	svc	0x00140182
    9ca4:	01000000 	mrseq	r0, (UNDEF: 0)
    9ca8:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    9cac:	03390908 	teqeq	r9, #8, 18	; 0x20000
    9cb0:	f00d0000 			; <UNDEFINED> instruction: 0xf00d0000
    9cb4:	09000001 	stmdbeq	r0, {r0}
    9cb8:	00c1070f 	sbceq	r0, r1, pc, lsl #14
    9cbc:	0d000000 	stceq	0, cr0, [r0, #-0]
    9cc0:	00000939 	andeq	r0, r0, r9, lsr r9
    9cc4:	c1031009 	tstgt	r3, r9
    9cc8:	02000000 	andeq	r0, r0, #0
    9ccc:	09c60300 	stmibeq	r6, {r8, r9}^
    9cd0:	11090000 	mrsne	r0, (UNDEF: 9)
    9cd4:	00031503 	andeq	r1, r3, r3, lsl #10
    9cd8:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    9cdc:	03b70916 			; <UNDEFINED> instruction: 0x03b70916
    9ce0:	0b0d0000 	bleq	349ce8 <__ccfg+0x329d40>
    9ce4:	09000004 	stmdbeq	r0, {r2}
    9ce8:	03d10817 	bicseq	r0, r1, #1507328	; 0x170000
    9cec:	0d000000 	stceq	0, cr0, [r0, #-0]
    9cf0:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9cf4:	ec081809 	stc	8, cr1, [r8], {9}
    9cf8:	04000003 	streq	r0, [r0], #-3
    9cfc:	0008870d 	andeq	r8, r8, sp, lsl #14
    9d00:	08190900 	ldmdaeq	r9, {r8, fp}
    9d04:	00000422 	andeq	r0, r0, r2, lsr #8
    9d08:	09310d08 	ldmdbeq	r1!, {r3, r8, sl, fp}
    9d0c:	1a090000 	bne	249d14 <__ccfg+0x229d6c>
    9d10:	00043d08 	andeq	r3, r4, r8, lsl #26
    9d14:	2b0d0c00 	blcs	34cd1c <__ccfg+0x32cd74>
    9d18:	09000007 	stmdbeq	r0, {r0, r1, r2}
    9d1c:	0453081b 	ldrbeq	r0, [r3], #-2075	; 0xfffff7e5
    9d20:	0d100000 	ldceq	0, cr0, [r0, #-0]
    9d24:	0000079b 	muleq	r0, fp, r7
    9d28:	53081c09 	movwpl	r1, #35849	; 0x8c09
    9d2c:	14000004 	strne	r0, [r0], #-4
    9d30:	0001d30d 	andeq	sp, r1, sp, lsl #6
    9d34:	081d0900 	ldmdaeq	sp, {r8, fp}
    9d38:	00000453 	andeq	r0, r0, r3, asr r4
    9d3c:	02800d18 	addeq	r0, r0, #24, 26	; 0x600
    9d40:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    9d44:	00008106 	andeq	r8, r0, r6, lsl #2
    9d48:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    9d4c:	00008101 	andeq	r8, r0, r1, lsl #2
    9d50:	0003d100 	andeq	sp, r3, r0, lsl #2
    9d54:	00811300 	addeq	r1, r1, r0, lsl #6
    9d58:	81130000 	tsthi	r3, r0
    9d5c:	13000000 	movwne	r0, #0
    9d60:	000000b5 	strheq	r0, [r0], -r5
    9d64:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    9d68:	15000003 	strne	r0, [r0, #-3]
    9d6c:	00008101 	andeq	r8, r0, r1, lsl #2
    9d70:	0003ec00 	andeq	lr, r3, r0, lsl #24
    9d74:	00811300 	addeq	r1, r1, r0, lsl #6
    9d78:	81130000 	tsthi	r3, r0
    9d7c:	00000000 	andeq	r0, r0, r0
    9d80:	03d7040a 	bicseq	r0, r7, #167772160	; 0xa000000
    9d84:	01150000 	tsteq	r5, r0
    9d88:	00000081 	andeq	r0, r0, r1, lsl #1
    9d8c:	00000416 	andeq	r0, r0, r6, lsl r4
    9d90:	00008113 	andeq	r8, r0, r3, lsl r1
    9d94:	01001300 	mrseq	r1, LR_irq
    9d98:	81130000 	tsthi	r3, r0
    9d9c:	13000000 	movwne	r0, #0
    9da0:	00000416 	andeq	r0, r0, r6, lsl r4
    9da4:	00041c13 	andeq	r1, r4, r3, lsl ip
    9da8:	040a0000 	streq	r0, [sl], #-0
    9dac:	00000081 	andeq	r0, r0, r1, lsl #1
    9db0:	0339040a 	teqeq	r9, #167772160	; 0xa000000
    9db4:	040a0000 	streq	r0, [sl], #-0
    9db8:	000003f2 	strdeq	r0, [r0], -r2
    9dbc:	00810115 	addeq	r0, r1, r5, lsl r1
    9dc0:	043d0000 	ldrteq	r0, [sp], #-0
    9dc4:	00130000 	andseq	r0, r3, r0
    9dc8:	13000001 	movwne	r0, #1
    9dcc:	0000041c 	andeq	r0, r0, ip, lsl r4
    9dd0:	28040a00 	stmdacs	r4, {r9, fp}
    9dd4:	15000004 	strne	r0, [r0, #-4]
    9dd8:	00008101 	andeq	r8, r0, r1, lsl #2
    9ddc:	00045300 	andeq	r5, r4, r0, lsl #6
    9de0:	01001300 	mrseq	r1, LR_irq
    9de4:	0a000000 	beq	9dec <__exidx_end+0x4ebc>
    9de8:	00044304 	andeq	r4, r4, r4, lsl #6
    9dec:	097c0300 	ldmdbeq	ip!, {r8, r9}^
    9df0:	1f090000 	svcne	0x00090000
    9df4:	00034503 	andeq	r4, r3, r3, lsl #10
    9df8:	04590800 	ldrbeq	r0, [r9], #-2048	; 0xfffff800
    9dfc:	0b140000 	bleq	509e04 <__ccfg+0x4e9e5c>
    9e00:	08000003 	stmdaeq	r0, {r0, r1}
    9e04:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    9e08:	01000000 	mrseq	r0, (UNDEF: 0)
    9e0c:	08081601 	stmdaeq	r8, {r0, r9, sl, ip}
    9e10:	a0090303 	andge	r0, r9, r3, lsl #6
    9e14:	17000004 	strne	r0, [r0, -r4]
    9e18:	0000375c 	andeq	r3, r0, ip, asr r7
    9e1c:	07030708 	streq	r0, [r3, -r8, lsl #14]
    9e20:	000000c1 	andeq	r0, r0, r1, asr #1
    9e24:	0b061700 	bleq	18fa2c <__ccfg+0x16fa84>
    9e28:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    9e2c:	00f40803 	rscseq	r0, r4, r3, lsl #16
    9e30:	00040000 	andeq	r0, r4, r0
    9e34:	0003c311 	andeq	ip, r3, r1, lsl r3
    9e38:	03090800 	movweq	r0, #38912	; 0x9800
    9e3c:	00047903 	andeq	r7, r4, r3, lsl #18
    9e40:	00331800 	eorseq	r1, r3, r0, lsl #16
    9e44:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    9e48:	1008030b 	andne	r0, r8, fp, lsl #6
    9e4c:	17000005 	strne	r0, [r0, -r5]
    9e50:	00001a07 	andeq	r1, r0, r7, lsl #20
    9e54:	07031408 	streq	r1, [r3, -r8, lsl #8]
    9e58:	000000c1 	andeq	r0, r0, r1, asr #1
    9e5c:	08a81700 	stmiaeq	r8!, {r8, r9, sl, ip}
    9e60:	15080000 	strne	r0, [r8, #-0]
    9e64:	00c10703 	sbceq	r0, r1, r3, lsl #14
    9e68:	17020000 	strne	r0, [r2, -r0]
    9e6c:	000048cc 	andeq	r4, r0, ip, asr #17
    9e70:	0a031608 	beq	cf698 <__ccfg+0xaf6f0>
    9e74:	000002c8 	andeq	r0, r0, r8, asr #5
    9e78:	432f1704 			; <UNDEFINED> instruction: 0x432f1704
    9e7c:	17080000 	strne	r0, [r8, -r0]
    9e80:	00f40803 	rscseq	r0, r4, r3, lsl #16
    9e84:	17080000 	strne	r0, [r8, -r0]
    9e88:	00000007 	andeq	r0, r0, r7
    9e8c:	0f031808 	svceq	0x00031808
    9e90:	00000510 	andeq	r0, r0, r0, lsl r5
    9e94:	0726170c 	streq	r1, [r6, -ip, lsl #14]!
    9e98:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    9e9c:	05201503 	streq	r1, [r0, #-1283]!	; 0xfffffafd
    9ea0:	002c0000 	eoreq	r0, ip, r0
    9ea4:	0004a00f 	andeq	sl, r4, pc
    9ea8:	00052000 	andeq	r2, r5, r0
    9eac:	00881900 	addeq	r1, r8, r0, lsl #18
    9eb0:	00030000 	andeq	r0, r3, r0
    9eb4:	04ad040a 	strteq	r0, [sp], #1034	; 0x40a
    9eb8:	9d110000 	ldcls	0, cr0, [r1, #-0]
    9ebc:	08000008 	stmdaeq	r0, {r3}
    9ec0:	ad1b031c 	ldcge	3, cr0, [fp, #-112]	; 0xffffff90
    9ec4:	14000004 	strne	r0, [r0], #-4
    9ec8:	0000087d 	andeq	r0, r0, sp, ror r8
    9ecc:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    9ed0:	00000542 	andeq	r0, r0, r2, asr #10
    9ed4:	040a0101 	streq	r0, [sl], #-257	; 0xfffffeff
    9ed8:	00000526 	andeq	r0, r0, r6, lsr #10
    9edc:	00000e1a 	andeq	r0, r0, sl, lsl lr
    9ee0:	111a0100 	tstne	sl, r0, lsl #2
    9ee4:	00000465 	andeq	r0, r0, r5, ror #8
    9ee8:	10030501 	andne	r0, r3, r1, lsl #10
    9eec:	1b00004f 	blne	a030 <__exidx_end+0x5100>
    9ef0:	000022bb 			; <UNDEFINED> instruction: 0x000022bb
    9ef4:	160d1f01 	strne	r1, [sp], -r1, lsl #30
    9ef8:	05000004 	streq	r0, [r0, #-4]
    9efc:	0005f003 	andeq	pc, r5, r3
    9f00:	22a71c20 	adccs	r1, r7, #32, 24	; 0x2000
    9f04:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    9f08:	0081010c 	addeq	r0, r1, ip, lsl #2
    9f0c:	28140000 	ldmdacs	r4, {}	; <UNPREDICTABLE>
    9f10:	28180000 	ldmdacs	r8, {}	; <UNPREDICTABLE>
    9f14:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f18:	00000597 	muleq	r0, r7, r5
    9f1c:	0100701d 	tsteq	r0, sp, lsl r0
    9f20:	01002258 	tsteq	r0, r8, asr r2
    9f24:	292c0000 	stmdbcs	ip!, {}	; <UNPREDICTABLE>
    9f28:	1c000000 	stcne	0, cr0, [r0], {-0}
    9f2c:	00002266 	andeq	r2, r0, r6, ror #4
    9f30:	010c5201 	tsteq	ip, r1, lsl #4
    9f34:	00000081 	andeq	r0, r0, r1, lsl #1
    9f38:	00002810 	andeq	r2, r0, r0, lsl r8
    9f3c:	00002814 	andeq	r2, r0, r4, lsl r8
    9f40:	05c19c01 	strbeq	r9, [r1, #3073]	; 0xc01
    9f44:	701d0000 	andsvc	r0, sp, r0
    9f48:	22520100 	subscs	r0, r2, #0, 2
    9f4c:	00000100 	andeq	r0, r0, r0, lsl #2
    9f50:	0000293f 	andeq	r2, r0, pc, lsr r9
    9f54:	228d1c00 	addcs	r1, sp, #0, 24
    9f58:	4d010000 	stcmi	0, cr0, [r1, #-0]
    9f5c:	0081010c 	addeq	r0, r1, ip, lsl #2
    9f60:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    9f64:	28100000 	ldmdacs	r0, {}	; <UNPREDICTABLE>
    9f68:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f6c:	000005f9 	strdeq	r0, [r0], -r9
    9f70:	0100701d 	tsteq	r0, sp, lsl r0
    9f74:	0100224d 	tsteq	r0, sp, asr #4
    9f78:	29520000 	ldmdbcs	r2, {}^	; <UNPREDICTABLE>
    9f7c:	b41e0000 	ldrlt	r0, [lr], #-0
    9f80:	01000022 	tsteq	r0, r2, lsr #32
    9f84:	041c2f4d 	ldreq	r2, [ip], #-3917	; 0xfffff0b3
    9f88:	51010000 	mrspl	r0, (UNDEF: 1)
    9f8c:	22731c00 	rsbscs	r1, r3, #0, 24
    9f90:	42010000 	andmi	r0, r1, #0
    9f94:	0081010c 	addeq	r0, r1, ip, lsl #2
    9f98:	27e40000 	strbcs	r0, [r4, r0]!
    9f9c:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    9fa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fa4:	00000662 	andeq	r0, r0, r2, ror #12
    9fa8:	7968701d 	stmdbvc	r8!, {r0, r2, r3, r4, ip, sp, lr}^
    9fac:	1e420100 	dvfnes	f0, f2, f0
    9fb0:	00000081 	andeq	r0, r0, r1, lsl #1
    9fb4:	00002965 	andeq	r2, r0, r5, ror #18
    9fb8:	0100701d 	tsteq	r0, sp, lsl r0
    9fbc:	01002b42 	tsteq	r0, r2, asr #22
    9fc0:	29830000 	stmibcs	r3, {}	; <UNPREDICTABLE>
    9fc4:	6c1d0000 	ldcvs	0, cr0, [sp], {-0}
    9fc8:	01006e65 	tsteq	r0, r5, ror #28
    9fcc:	00813242 	addeq	r3, r1, r2, asr #4
    9fd0:	29960000 	ldmibcs	r6, {}	; <UNPREDICTABLE>
    9fd4:	731d0000 	tstvc	sp, #0
    9fd8:	01007365 	tsteq	r0, r5, ror #6
    9fdc:	04163c42 	ldreq	r3, [r6], #-3138	; 0xfffff3be
    9fe0:	29a90000 	stmibcs	r9!, {}	; <UNPREDICTABLE>
    9fe4:	b41e0000 	ldrlt	r0, [lr], #-0
    9fe8:	01000022 	tsteq	r0, r2, lsr #32
    9fec:	041c1743 	ldreq	r1, [ip], #-1859	; 0xfffff8bd
    9ff0:	91020000 	mrsls	r0, (UNDEF: 2)
    9ff4:	9a1c0000 	bls	709ffc <__ccfg+0x6ea054>
    9ff8:	01000022 	tsteq	r0, r2, lsr #32
    9ffc:	81010c37 	tsthi	r1, r7, lsr ip
    a000:	c0000000 	andgt	r0, r0, r0
    a004:	e4000027 	str	r0, [r0], #-39	; 0xffffffd9
    a008:	01000027 	tsteq	r0, r7, lsr #32
    a00c:	00069b9c 	muleq	r6, ip, fp
    a010:	68701d00 	ldmdavs	r0!, {r8, sl, fp, ip}^
    a014:	37010079 	smlsdxcc	r1, r9, r0, r0
    a018:	0000811e 	andeq	r8, r0, lr, lsl r1
    a01c:	0029bc00 	eoreq	fp, r9, r0, lsl #24
    a020:	64661f00 	strbtvs	r1, [r6], #-3840	; 0xfffff100
    a024:	27370100 	ldrcs	r0, [r7, -r0, lsl #2]!
    a028:	00000081 	andeq	r0, r0, r1, lsl #1
    a02c:	20005101 	andcs	r5, r0, r1, lsl #2
    a030:	00002280 	andeq	r2, r0, r0, lsl #5
    a034:	010c2101 	tsteq	ip, r1, lsl #2
    a038:	00000081 	andeq	r0, r0, r1, lsl #1
    a03c:	0006db01 	andeq	sp, r6, r1, lsl #22
    a040:	68702100 	ldmdavs	r0!, {r8, sp}^
    a044:	21010079 	tstcs	r1, r9, ror r0
    a048:	0000811e 	andeq	r8, r0, lr, lsl r1
    a04c:	64662100 	strbtvs	r2, [r6], #-256	; 0xffffff00
    a050:	27210100 	strcs	r0, [r1, -r0, lsl #2]!
    a054:	00000081 	andeq	r0, r0, r1, lsl #1
    a058:	0013e322 	andseq	lr, r3, r2, lsr #6
    a05c:	33210100 			; <UNDEFINED> instruction: 0x33210100
    a060:	000000b5 	strheq	r0, [r0], -r5
    a064:	01006923 	tsteq	r0, r3, lsr #18
    a068:	00810625 	addeq	r0, r1, r5, lsr #12
    a06c:	24000000 	strcs	r0, [r0], #-0
    a070:	0000069b 	muleq	r0, fp, r6
    a074:	00002818 	andeq	r2, r0, r8, lsl r8
    a078:	00002860 	andeq	r2, r0, r0, ror #16
    a07c:	ad259c01 	stcge	12, cr9, [r5, #-4]!
    a080:	da000006 	ble	a0a0 <__exidx_end+0x5170>
    a084:	25000029 	strcs	r0, [r0, #-41]	; 0xffffffd7
    a088:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
    a08c:	000029f8 	strdeq	r2, [r0], -r8
    a090:	0006c425 	andeq	ip, r6, r5, lsr #8
    a094:	002a1600 	eoreq	r1, sl, r0, lsl #12
    a098:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    a09c:	9b270000 	blls	9ca0a4 <__ccfg+0x9aa0fc>
    a0a0:	4e000006 	cdpmi	0, 0, cr0, cr0, cr6, {0}
    a0a4:	60000028 	andvs	r0, r0, r8, lsr #32
    a0a8:	01000028 	tsteq	r0, r8, lsr #32
    a0ac:	ad280c21 	stcge	12, cr0, [r8, #-132]!	; 0xffffff7c
    a0b0:	01000006 	tsteq	r0, r6
    a0b4:	06b92855 	ssateq	r2, #26, r5, asr #16
    a0b8:	56010000 	strpl	r0, [r1], -r0
    a0bc:	0006c429 	andeq	ip, r6, r9, lsr #8
    a0c0:	06d02600 	ldrbeq	r2, [r0], r0, lsl #12
    a0c4:	00000000 	andeq	r0, r0, r0
    a0c8:	00042d00 	andeq	r2, r4, r0, lsl #26
    a0cc:	ec000300 	stc	3, cr0, [r0], {-0}
    a0d0:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    a0d4:	0000bd01 	andeq	fp, r0, r1, lsl #26
    a0d8:	22c50c00 	sbccs	r0, r5, #0, 24
    a0dc:	06680000 	strbteq	r0, [r8], -r0
    a0e0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
    a0e4:	00000000 	andeq	r0, r0, r0
    a0e8:	5c5a0000 	mrapl	r0, sl, acc0
    a0ec:	01020000 	mrseq	r0, (UNDEF: 2)
    a0f0:	0008de06 	andeq	sp, r8, r6, lsl #28
    a0f4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a0f8:	000007a3 	andeq	r0, r0, r3, lsr #15
    a0fc:	ed050402 	cfstrs	mvf0, [r5, #-8]
    a100:	02000005 	andeq	r0, r0, #5
    a104:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
    a108:	35030000 	strcc	r0, [r3, #-0]
    a10c:	02000008 	andeq	r0, r0, #8
    a110:	004d182e 	subeq	r1, sp, lr, lsr #16
    a114:	01020000 	mrseq	r0, (UNDEF: 2)
    a118:	0008dc08 	andeq	sp, r8, r8, lsl #24
    a11c:	03d20300 	bicseq	r0, r2, #0, 6
    a120:	31020000 	mrscc	r0, (UNDEF: 2)
    a124:	00006019 	andeq	r6, r0, r9, lsl r0
    a128:	07020200 	streq	r0, [r2, -r0, lsl #4]
    a12c:	000009aa 	andeq	r0, r0, sl, lsr #19
    a130:	0008f503 	andeq	pc, r8, r3, lsl #10
    a134:	19340200 	ldmdbne	r4!, {r9}
    a138:	00000073 	andeq	r0, r0, r3, ror r0
    a13c:	97070402 	strls	r0, [r7, -r2, lsl #8]
    a140:	02000003 	andeq	r0, r0, #3
    a144:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
    a148:	04040000 	streq	r0, [r4], #-0
    a14c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    a150:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a154:	0000039c 	muleq	r0, ip, r3
    a158:	0023d803 	eoreq	sp, r3, r3, lsl #16
    a15c:	12270300 	eorne	r0, r7, #0, 6
    a160:	00000054 	andeq	r0, r0, r4, asr r0
    a164:	00008f05 	andeq	r8, r0, r5, lsl #30
    a168:	18f10300 	ldmne	r1!, {r8, r9}^
    a16c:	2b030000 	blcs	ca174 <__ccfg+0xaa1cc>
    a170:	00004112 	andeq	r4, r0, r2, lsl r1
    a174:	00a00600 	adceq	r0, r0, r0, lsl #12
    a178:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    a17c:	03000024 	movweq	r0, #36	; 0x24
    a180:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    a184:	b1050000 	mrslt	r0, (UNDEF: 5)
    a188:	03000000 	movweq	r0, #0
    a18c:	000004fb 	strdeq	r0, [r0], -fp
    a190:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    a194:	07000000 	streq	r0, [r0, -r0]
    a198:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    a19c:	0000015c 	andeq	r0, r0, ip, asr r1
    a1a0:	00003e08 	andeq	r3, r0, r8, lsl #28
    a1a4:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    a1a8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1ac:	00070101 	andeq	r0, r7, r1, lsl #2
    a1b0:	00050108 	andeq	r0, r5, r8, lsl #2
    a1b4:	03350300 	teqeq	r5, #0, 6
    a1b8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1bc:	00060101 	andeq	r0, r6, r1, lsl #2
    a1c0:	00023708 	andeq	r3, r2, r8, lsl #14
    a1c4:	03360300 	teqeq	r6, #0, 6
    a1c8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1cc:	00050101 	andeq	r0, r5, r1, lsl #2
    a1d0:	00053b08 	andeq	r3, r5, r8, lsl #22
    a1d4:	03370300 	teqeq	r7, #0, 6
    a1d8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1dc:	00040101 	andeq	r0, r4, r1, lsl #2
    a1e0:	0007c408 	andeq	ip, r7, r8, lsl #8
    a1e4:	03380300 	teqeq	r8, #0, 6
    a1e8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1ec:	00000401 	andeq	r0, r0, r1, lsl #8
    a1f0:	00050809 	andeq	r0, r5, r9, lsl #16
    a1f4:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    a1f8:	000000a0 	andeq	r0, r0, r0, lsr #1
    a1fc:	06d20901 	ldrbeq	r0, [r2], r1, lsl #18
    a200:	3c030000 	stccc	0, cr0, [r3], {-0}
    a204:	0000a003 	andeq	sl, r0, r3
    a208:	7c090200 	sfmvc	f0, 4, [r9], {-0}
    a20c:	0300000a 	movweq	r0, #10
    a210:	00a0033d 	adceq	r0, r0, sp, lsr r3
    a214:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    a218:	00000707 	andeq	r0, r0, r7, lsl #14
    a21c:	b1083f03 	tstlt	r8, r3, lsl #30
    a220:	04000000 	streq	r0, [r0], #-0
    a224:	02890300 	addeq	r0, r9, #0, 6
    a228:	41030000 	mrsmi	r0, (UNDEF: 3)
    a22c:	0000ce03 	andeq	ip, r0, r3, lsl #28
    a230:	015c0600 	cmpeq	ip, r0, lsl #12
    a234:	420a0000 	andmi	r0, sl, #0
    a238:	03000005 	movweq	r0, #5
    a23c:	01681a43 	cmneq	r8, r3, asr #20
    a240:	01010000 	mrseq	r0, (UNDEF: 1)
    a244:	0001b10a 	andeq	fp, r1, sl, lsl #2
    a248:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    a24c:	00000189 	andeq	r0, r0, r9, lsl #3
    a250:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    a254:	0000018f 	andeq	r0, r0, pc, lsl #3
    a258:	e5080102 	str	r0, [r8, #-258]	; 0xfffffefe
    a25c:	05000008 	streq	r0, [r0, #-8]
    a260:	0000018f 	andeq	r0, r0, pc, lsl #3
    a264:	0002920a 	andeq	r9, r2, sl, lsl #4
    a268:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    a26c:	00000189 	andeq	r0, r0, r9, lsl #3
    a270:	08070101 	stmdaeq	r7, {r0, r8}
    a274:	da098f04 	ble	26de8c <__ccfg+0x24dee4>
    a278:	09000001 	stmdbeq	r0, {r0}
    a27c:	00000605 	andeq	r0, r0, r5, lsl #12
    a280:	670b9004 	strvs	r9, [fp, -r4]
    a284:	00000000 	andeq	r0, r0, r0
    a288:	000bae09 	andeq	sl, fp, r9, lsl #28
    a28c:	08910400 	ldmeq	r1, {sl}
    a290:	0000008f 	andeq	r0, r0, pc, lsl #1
    a294:	01ea0904 	mvneq	r0, r4, lsl #18
    a298:	92040000 	andls	r0, r4, #0
    a29c:	0000ac10 	andeq	sl, r0, r0, lsl ip
    a2a0:	03000600 	movweq	r0, #1536	; 0x600
    a2a4:	00000945 	andeq	r0, r0, r5, asr #18
    a2a8:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    a2ac:	0c000001 	stceq	0, cr0, [r0], {1}
    a2b0:	000001da 	ldrdeq	r0, [r0], -sl
    a2b4:	000001f1 	strdeq	r0, [r0], -r1
    a2b8:	130a000d 	movwne	r0, #40973	; 0xa00d
    a2bc:	04000007 	streq	r0, [r0], #-7
    a2c0:	01e60f99 	strexheq	r0, r9, [r6]
    a2c4:	01010000 	mrseq	r0, (UNDEF: 1)
    a2c8:	91050107 	tstls	r5, r7, lsl #2
    a2cc:	00022909 	andeq	r2, r2, r9, lsl #18
    a2d0:	070e0800 	streq	r0, [lr, -r0, lsl #16]
    a2d4:	93050000 	movwls	r0, #20480	; 0x5000
    a2d8:	0000a007 	andeq	sl, r0, r7
    a2dc:	01070100 	mrseq	r0, (UNDEF: 23)
    a2e0:	047c0800 	ldrbteq	r0, [ip], #-2048	; 0xfffff800
    a2e4:	94050000 	strls	r0, [r5], #-0
    a2e8:	0000a003 	andeq	sl, r0, r3
    a2ec:	00010100 	andeq	r0, r1, r0, lsl #2
    a2f0:	d0030000 	andle	r0, r3, r0
    a2f4:	05000007 	streq	r0, [r0, #-7]
    a2f8:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    a2fc:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    a300:	0c000002 	stceq	0, cr0, [r0], {2}
    a304:	00000235 	andeq	r0, r0, r5, lsr r2
    a308:	00000245 	andeq	r0, r0, r5, asr #4
    a30c:	3a05000d 	bcc	14a348 <__ccfg+0x12a3a0>
    a310:	0a000002 	beq	a320 <__exidx_end+0x53f0>
    a314:	0000034b 	andeq	r0, r0, fp, asr #6
    a318:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    a31c:	01000002 	tsteq	r0, r2
    a320:	009b0c01 	addseq	r0, fp, r1, lsl #24
    a324:	02630000 	rsbeq	r0, r3, #0
    a328:	000d0000 	andeq	r0, sp, r0
    a32c:	00025805 	andeq	r5, r2, r5, lsl #16
    a330:	04bb0a00 	ldrteq	r0, [fp], #2560	; 0xa00
    a334:	06060000 	streq	r0, [r6], -r0
    a338:	00026313 	andeq	r6, r2, r3, lsl r3
    a33c:	0a010100 	beq	4a744 <__ccfg+0x2a79c>
    a340:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    a344:	b10ec304 	tstlt	lr, r4, lsl #6
    a348:	01000000 	mrseq	r0, (UNDEF: 0)
    a34c:	08fe0e01 	ldmeq	lr!, {r0, r9, sl, fp}^
    a350:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    a354:	02911001 	addseq	r1, r1, #1
    a358:	040b0000 	streq	r0, [fp], #-0
    a35c:	00000297 	muleq	r0, r7, r2
    a360:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    a364:	8f100000 	svchi	0x00100000
    a368:	00000000 	andeq	r0, r0, r0
    a36c:	0001960c 	andeq	r9, r1, ip, lsl #12
    a370:	0002ae00 	andeq	sl, r2, r0, lsl #28
    a374:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    a378:	000002a3 	andeq	r0, r0, r3, lsr #5
    a37c:	00076711 	andeq	r6, r7, r1, lsl r7
    a380:	017f0700 	cmneq	pc, r0, lsl #14
    a384:	0002ae16 	andeq	sl, r2, r6, lsl lr
    a388:	11010100 	mrsne	r0, (UNDEF: 17)
    a38c:	0000032e 	andeq	r0, r0, lr, lsr #6
    a390:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    a394:	000000bd 	strheq	r0, [r0], -sp
    a398:	0b110101 	bleq	44a7a4 <__ccfg+0x42a7fc>
    a39c:	07000003 	streq	r0, [r0, -r3]
    a3a0:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    a3a4:	01000000 	mrseq	r0, (UNDEF: 0)
    a3a8:	07081201 	streq	r1, [r8, -r1, lsl #4]
    a3ac:	07090303 	streq	r0, [r9, -r3, lsl #6]
    a3b0:	13000003 	movwne	r0, #3
    a3b4:	0000375c 	andeq	r3, r0, ip, asr r7
    a3b8:	07030707 	streq	r0, [r3, -r7, lsl #14]
    a3bc:	0000008f 	andeq	r0, r0, pc, lsl #1
    a3c0:	0b061300 	bleq	18efc8 <__ccfg+0x16f020>
    a3c4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    a3c8:	00c20803 	sbceq	r0, r2, r3, lsl #16
    a3cc:	00040000 	andeq	r0, r4, r0
    a3d0:	0003c30e 	andeq	ip, r3, lr, lsl #6
    a3d4:	03090700 	movweq	r0, #38656	; 0x9700
    a3d8:	0002e003 	andeq	lr, r2, r3
    a3dc:	00331400 	eorseq	r1, r3, r0, lsl #8
    a3e0:	07300000 	ldreq	r0, [r0, -r0]!
    a3e4:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    a3e8:	13000003 	movwne	r0, #3
    a3ec:	00001a07 	andeq	r1, r0, r7, lsl #20
    a3f0:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    a3f4:	0000008f 	andeq	r0, r0, pc, lsl #1
    a3f8:	08a81300 	stmiaeq	r8!, {r8, r9, ip}
    a3fc:	15070000 	strne	r0, [r7, #-0]
    a400:	008f0803 	addeq	r0, pc, r3, lsl #16
    a404:	13020000 	movwne	r0, #8192	; 0x2000
    a408:	000048cc 	andeq	r4, r0, ip, asr #17
    a40c:	0b031607 	bleq	cfc30 <__ccfg+0xafc88>
    a410:	00000284 	andeq	r0, r0, r4, lsl #5
    a414:	432f1304 			; <UNDEFINED> instruction: 0x432f1304
    a418:	17070000 	strne	r0, [r7, -r0]
    a41c:	00c20903 	sbceq	r0, r2, r3, lsl #18
    a420:	13080000 	movwne	r0, #32768	; 0x8000
    a424:	00000007 	andeq	r0, r0, r7
    a428:	0f031807 	svceq	0x00031807
    a42c:	00000377 	andeq	r0, r0, r7, ror r3
    a430:	0726130c 	streq	r1, [r6, -ip, lsl #6]!
    a434:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    a438:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    a43c:	002c0000 	eoreq	r0, ip, r0
    a440:	0003070c 	andeq	r0, r3, ip, lsl #14
    a444:	00038700 	andeq	r8, r3, r0, lsl #14
    a448:	00881500 	addeq	r1, r8, r0, lsl #10
    a44c:	00030000 	andeq	r0, r3, r0
    a450:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    a454:	9d0e0000 	stcls	0, cr0, [lr, #-0]
    a458:	07000008 	streq	r0, [r0, -r8]
    a45c:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    a460:	11000003 	tstne	r0, r3
    a464:	0000087d 	andeq	r0, r0, sp, ror r8
    a468:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    a46c:	000003a9 	andeq	r0, r0, r9, lsr #7
    a470:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    a474:	0000038d 	andeq	r0, r0, sp, lsl #7
    a478:	230f0116 	movwcs	r0, #61718	; 0xf116
    a47c:	1d010000 	stcne	0, cr0, [r1, #-0]
    a480:	28600101 	stmdacs	r0!, {r0, r8}^
    a484:	28d00000 	ldmcs	r0, {}^	; <UNPREDICTABLE>
    a488:	9c010000 	stcls	0, cr0, [r1], {-0}
    a48c:	0000042a 	andeq	r0, r0, sl, lsr #8
    a490:	0008cc17 	andeq	ip, r8, r7, lsl ip
    a494:	011d0100 	tsteq	sp, r0, lsl #2
    a498:	0000008f 	andeq	r0, r0, pc, lsl #1
    a49c:	00002a34 	andeq	r2, r0, r4, lsr sl
    a4a0:	00432f18 	subeq	r2, r3, r8, lsl pc
    a4a4:	011d0100 	tsteq	sp, r0, lsl #2
    a4a8:	0000042a 	andeq	r0, r0, sl, lsr #8
    a4ac:	00002a5d 	andeq	r2, r0, sp, asr sl
    a4b0:	00231b19 	eoreq	r1, r3, r9, lsl fp
    a4b4:	01300100 	teqeq	r0, r0, lsl #2
    a4b8:	000df81a 	andeq	pc, sp, sl, lsl r8	; <UNPREDICTABLE>
    a4bc:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    a4c0:	22010072 	andcs	r0, r1, #114	; 0x72
    a4c4:	00042a15 	andeq	r2, r4, r5, lsl sl
    a4c8:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
    a4cc:	1b200005 	blne	80a4e8 <__ccfg+0x7ea540>
    a4d0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    a4d4:	810d2301 	tsthi	sp, r1, lsl #6
    a4d8:	05000000 	streq	r0, [r0, #-0]
    a4dc:	0005f403 	andeq	pc, r5, r3, lsl #8
    a4e0:	23091820 	movwcs	r1, #38944	; 0x9820
    a4e4:	24010000 	strcs	r0, [r1], #-0
    a4e8:	00008106 	andeq	r8, r0, r6, lsl #2
    a4ec:	002a8700 	eoreq	r8, sl, r0, lsl #14
    a4f0:	0b000000 	bleq	a4f8 <__exidx_end+0x55c8>
    a4f4:	00019604 	andeq	r9, r1, r4, lsl #12
    a4f8:	04400000 	strbeq	r0, [r0], #-0
    a4fc:	00030000 	andeq	r0, r3, r0
    a500:	00002760 	andeq	r2, r0, r0, ror #14
    a504:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    a508:	310c0000 	mrscc	r0, (UNDEF: 12)
    a50c:	68000023 	stmdavs	r0, {r0, r1, r5}
    a510:	40000006 	andmi	r0, r0, r6
    a514:	0000000e 	andeq	r0, r0, lr
    a518:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    a51c:	0200005d 	andeq	r0, r0, #93	; 0x5d
    a520:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    a524:	02020000 	andeq	r0, r2, #0
    a528:	0007a305 	andeq	sl, r7, r5, lsl #6
    a52c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a530:	000005ed 	andeq	r0, r0, sp, ror #11
    a534:	e8050802 	stmda	r5, {r1, fp}
    a538:	03000005 	movweq	r0, #5
    a53c:	00000835 	andeq	r0, r0, r5, lsr r8
    a540:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    a544:	02000000 	andeq	r0, r0, #0
    a548:	08dc0801 	ldmeq	ip, {r0, fp}^
    a54c:	d2030000 	andle	r0, r3, #0
    a550:	02000003 	andeq	r0, r0, #3
    a554:	00601931 	rsbeq	r1, r0, r1, lsr r9
    a558:	02020000 	andeq	r0, r2, #0
    a55c:	0009aa07 	andeq	sl, r9, r7, lsl #20
    a560:	08f50300 	ldmeq	r5!, {r8, r9}^
    a564:	34020000 	strcc	r0, [r2], #-0
    a568:	00007319 	andeq	r7, r0, r9, lsl r3
    a56c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a570:	00000397 	muleq	r0, r7, r3
    a574:	92070802 	andls	r0, r7, #131072	; 0x20000
    a578:	04000003 	streq	r0, [r0], #-3
    a57c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a580:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a584:	00039c07 	andeq	r9, r3, r7, lsl #24
    a588:	23d80300 	bicscs	r0, r8, #0, 6
    a58c:	27030000 	strcs	r0, [r3, -r0]
    a590:	00005412 	andeq	r5, r0, r2, lsl r4
    a594:	008f0500 	addeq	r0, pc, r0, lsl #10
    a598:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    a59c:	03000018 	movweq	r0, #24
    a5a0:	0041122b 	subeq	r1, r1, fp, lsr #4
    a5a4:	a0060000 	andge	r0, r6, r0
    a5a8:	03000000 	movweq	r0, #0
    a5ac:	00002429 	andeq	r2, r0, r9, lsr #8
    a5b0:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    a5b4:	05000000 	streq	r0, [r0, #-0]
    a5b8:	000000b1 	strheq	r0, [r0], -r1
    a5bc:	0004fb03 	andeq	pc, r4, r3, lsl #22
    a5c0:	122d0300 	eorne	r0, sp, #0, 6
    a5c4:	00000067 	andeq	r0, r0, r7, rrx
    a5c8:	00087503 	andeq	r7, r8, r3, lsl #10
    a5cc:	102e0300 	eorne	r0, lr, r0, lsl #6
    a5d0:	000000da 	ldrdeq	r0, [r0], -sl
    a5d4:	008f0407 	addeq	r0, pc, r7, lsl #8
    a5d8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    a5dc:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    a5e0:	09000001 	stmdbeq	r0, {r0}
    a5e4:	0000003e 	andeq	r0, r0, lr, lsr r0
    a5e8:	a0073403 	andge	r3, r7, r3, lsl #8
    a5ec:	01000000 	mrseq	r0, (UNDEF: 0)
    a5f0:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    a5f4:	00000501 	andeq	r0, r0, r1, lsl #10
    a5f8:	a0033503 	andge	r3, r3, r3, lsl #10
    a5fc:	01000000 	mrseq	r0, (UNDEF: 0)
    a600:	09000601 	stmdbeq	r0, {r0, r9, sl}
    a604:	00000237 	andeq	r0, r0, r7, lsr r2
    a608:	a0033603 	andge	r3, r3, r3, lsl #12
    a60c:	01000000 	mrseq	r0, (UNDEF: 0)
    a610:	09000501 	stmdbeq	r0, {r0, r8, sl}
    a614:	0000053b 	andeq	r0, r0, fp, lsr r5
    a618:	a0033703 	andge	r3, r3, r3, lsl #14
    a61c:	01000000 	mrseq	r0, (UNDEF: 0)
    a620:	09000401 	stmdbeq	r0, {r0, sl}
    a624:	000007c4 	andeq	r0, r0, r4, asr #15
    a628:	a0033803 	andge	r3, r3, r3, lsl #16
    a62c:	01000000 	mrseq	r0, (UNDEF: 0)
    a630:	0a000004 	beq	a648 <__exidx_end+0x5718>
    a634:	00000508 	andeq	r0, r0, r8, lsl #10
    a638:	a0073a03 	andge	r3, r7, r3, lsl #20
    a63c:	01000000 	mrseq	r0, (UNDEF: 0)
    a640:	0006d20a 	andeq	sp, r6, sl, lsl #4
    a644:	033c0300 	teqeq	ip, #0, 6
    a648:	000000a0 	andeq	r0, r0, r0, lsr #1
    a64c:	0a7c0a02 	beq	1f0ce5c <__ccfg+0x1eeceb4>
    a650:	3d030000 	stccc	0, cr0, [r3, #-0]
    a654:	0000a003 	andeq	sl, r0, r3
    a658:	070a0300 	streq	r0, [sl, -r0, lsl #6]
    a65c:	03000007 	movweq	r0, #7
    a660:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    a664:	00040000 	andeq	r0, r4, r0
    a668:	00028903 	andeq	r8, r2, r3, lsl #18
    a66c:	03410300 	movteq	r0, #4864	; 0x1300
    a670:	000000e0 	andeq	r0, r0, r0, ror #1
    a674:	00016e06 	andeq	r6, r1, r6, lsl #28
    a678:	05420b00 	strbeq	r0, [r2, #-2816]	; 0xfffff500
    a67c:	43030000 	movwmi	r0, #12288	; 0x3000
    a680:	00017a1a 	andeq	r7, r1, sl, lsl sl
    a684:	0b010100 	bleq	4aa8c <__ccfg+0x2aae4>
    a688:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
    a68c:	9b0e4503 	blls	39baa0 <__ccfg+0x37baf8>
    a690:	01000001 	tsteq	r0, r1
    a694:	a1040701 	tstge	r4, r1, lsl #14
    a698:	02000001 	andeq	r0, r0, #1
    a69c:	08e50801 	stmiaeq	r5!, {r0, fp}^
    a6a0:	a1050000 	mrsge	r0, (UNDEF: 5)
    a6a4:	0b000001 	bleq	a6b0 <__exidx_end+0x5780>
    a6a8:	00000292 	muleq	r0, r2, r2
    a6ac:	9b1e4503 	blls	79bac0 <__ccfg+0x77bb18>
    a6b0:	01000001 	tsteq	r0, r1
    a6b4:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    a6b8:	01ec098f 	mvneq	r0, pc, lsl #19
    a6bc:	050a0000 	streq	r0, [sl, #-0]
    a6c0:	04000006 	streq	r0, [r0], #-6
    a6c4:	00670b90 	mlseq	r7, r0, fp, r0
    a6c8:	0a000000 	beq	a6d0 <__exidx_end+0x57a0>
    a6cc:	00000bae 	andeq	r0, r0, lr, lsr #23
    a6d0:	8f089104 	svchi	0x00089104
    a6d4:	04000000 	streq	r0, [r0], #-0
    a6d8:	0001ea0a 	andeq	lr, r1, sl, lsl #20
    a6dc:	10920400 	addsne	r0, r2, r0, lsl #8
    a6e0:	000000ac 	andeq	r0, r0, ip, lsr #1
    a6e4:	45030006 	strmi	r0, [r3, #-6]
    a6e8:	04000009 	streq	r0, [r0], #-9
    a6ec:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    a6f0:	ec0c0000 	stc	0, cr0, [ip], {-0}
    a6f4:	03000001 	movweq	r0, #1
    a6f8:	0d000002 	stceq	0, cr0, [r0, #-8]
    a6fc:	07130b00 	ldreq	r0, [r3, -r0, lsl #22]
    a700:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    a704:	0001f80f 	andeq	pc, r1, pc, lsl #16
    a708:	08010100 	stmdaeq	r1, {r8}
    a70c:	09910501 	ldmibeq	r1, {r0, r8, sl}
    a710:	0000023b 	andeq	r0, r0, fp, lsr r2
    a714:	00070e09 	andeq	r0, r7, r9, lsl #28
    a718:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    a71c:	000000a0 	andeq	r0, r0, r0, lsr #1
    a720:	00010701 	andeq	r0, r1, r1, lsl #14
    a724:	00047c09 	andeq	r7, r4, r9, lsl #24
    a728:	03940500 	orrseq	r0, r4, #0, 10
    a72c:	000000a0 	andeq	r0, r0, r0, lsr #1
    a730:	00000101 	andeq	r0, r0, r1, lsl #2
    a734:	07d00300 	ldrbeq	r0, [r0, r0, lsl #6]
    a738:	96050000 	strls	r0, [r5], -r0
    a73c:	00021103 	andeq	r1, r2, r3, lsl #2
    a740:	023b0500 	eorseq	r0, fp, #0, 10
    a744:	470c0000 	strmi	r0, [ip, -r0]
    a748:	57000002 	strpl	r0, [r0, -r2]
    a74c:	0d000002 	stceq	0, cr0, [r0, #-8]
    a750:	024c0500 	subeq	r0, ip, #0, 10
    a754:	4b0b0000 	blmi	2ca75c <__ccfg+0x2aa7b4>
    a758:	05000003 	streq	r0, [r0, #-3]
    a75c:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    a760:	01010000 	mrseq	r0, (UNDEF: 1)
    a764:	00009b0c 	andeq	r9, r0, ip, lsl #22
    a768:	00027500 	andeq	r7, r2, r0, lsl #10
    a76c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    a770:	0000026a 	andeq	r0, r0, sl, ror #4
    a774:	0004bb0b 	andeq	fp, r4, fp, lsl #22
    a778:	13060600 	movwne	r0, #26112	; 0x6600
    a77c:	00000275 	andeq	r0, r0, r5, ror r2
    a780:	b40b0101 	strlt	r0, [fp], #-257	; 0xfffffeff
    a784:	04000006 	streq	r0, [r0], #-6
    a788:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    a78c:	01010000 	mrseq	r0, (UNDEF: 1)
    a790:	0008fe0e 	andeq	pc, r8, lr, lsl #28
    a794:	016e0700 	cmneq	lr, r0, lsl #14
    a798:	0002a310 	andeq	sl, r2, r0, lsl r3
    a79c:	a9040700 	stmdbge	r4, {r8, r9, sl}
    a7a0:	0f000002 	svceq	0x00000002
    a7a4:	0002b501 	andeq	fp, r2, r1, lsl #10
    a7a8:	008f1000 	addeq	r1, pc, r0
    a7ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    a7b0:	000001a8 	andeq	r0, r0, r8, lsr #3
    a7b4:	000002c0 	andeq	r0, r0, r0, asr #5
    a7b8:	b505000d 	strlt	r0, [r5, #-13]
    a7bc:	11000002 	tstne	r0, r2
    a7c0:	00000767 	andeq	r0, r0, r7, ror #14
    a7c4:	16017f07 	strne	r7, [r1], -r7, lsl #30
    a7c8:	000002c0 	andeq	r0, r0, r0, asr #5
    a7cc:	2e110101 	mufcss	f0, f1, f1
    a7d0:	07000003 	streq	r0, [r0, -r3]
    a7d4:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    a7d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a7dc:	030b1101 	movweq	r1, #45313	; 0xb101
    a7e0:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    a7e4:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    a7e8:	01010000 	mrseq	r0, (UNDEF: 1)
    a7ec:	03070812 	movweq	r0, #30738	; 0x7812
    a7f0:	03190903 	tsteq	r9, #49152	; 0xc000
    a7f4:	5c130000 	ldcpl	0, cr0, [r3], {-0}
    a7f8:	07000037 	smladxeq	r0, r7, r0, r0
    a7fc:	8f070307 	svchi	0x00070307
    a800:	00000000 	andeq	r0, r0, r0
    a804:	000b0613 	andeq	r0, fp, r3, lsl r6
    a808:	03080700 	movweq	r0, #34560	; 0x8700
    a80c:	0000c208 	andeq	ip, r0, r8, lsl #4
    a810:	0e000400 	cfcpyseq	mvf0, mvf0
    a814:	000003c3 	andeq	r0, r0, r3, asr #7
    a818:	03030907 	movweq	r0, #14599	; 0x3907
    a81c:	000002f2 	strdeq	r0, [r0], -r2
    a820:	00003314 	andeq	r3, r0, r4, lsl r3
    a824:	0b073000 	bleq	1d682c <__ccfg+0x1b6884>
    a828:	03890803 	orreq	r0, r9, #196608	; 0x30000
    a82c:	07130000 	ldreq	r0, [r3, -r0]
    a830:	0700001a 	smladeq	r0, sl, r0, r0
    a834:	8f080314 	svchi	0x00080314
    a838:	00000000 	andeq	r0, r0, r0
    a83c:	0008a813 	andeq	sl, r8, r3, lsl r8
    a840:	03150700 	tsteq	r5, #0, 14
    a844:	00008f08 	andeq	r8, r0, r8, lsl #30
    a848:	cc130200 	lfmgt	f0, 4, [r3], {-0}
    a84c:	07000048 	streq	r0, [r0, -r8, asr #32]
    a850:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    a854:	04000002 	streq	r0, [r0], #-2
    a858:	00432f13 	subeq	r2, r3, r3, lsl pc
    a85c:	03170700 	tsteq	r7, #0, 14
    a860:	0000c209 	andeq	ip, r0, r9, lsl #4
    a864:	07130800 	ldreq	r0, [r3, -r0, lsl #16]
    a868:	07000000 	streq	r0, [r0, -r0]
    a86c:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    a870:	0c000003 	stceq	0, cr0, [r0], {3}
    a874:	00072613 	andeq	r2, r7, r3, lsl r6
    a878:	03190700 	tsteq	r9, #0, 14
    a87c:	00039915 	andeq	r9, r3, r5, lsl r9
    a880:	0c002c00 	stceq	12, cr2, [r0], {-0}
    a884:	00000319 	andeq	r0, r0, r9, lsl r3
    a888:	00000399 	muleq	r0, r9, r3
    a88c:	00008815 	andeq	r8, r0, r5, lsl r8
    a890:	07000300 	streq	r0, [r0, -r0, lsl #6]
    a894:	00032604 	andeq	r2, r3, r4, lsl #12
    a898:	089d0e00 	ldmeq	sp, {r9, sl, fp}
    a89c:	1c070000 	stcne	0, cr0, [r7], {-0}
    a8a0:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    a8a4:	7d110000 	ldcvc	0, cr0, [r1, #-0]
    a8a8:	07000008 	streq	r0, [r0, -r8]
    a8ac:	bb14031e 	bllt	50b52c <__ccfg+0x4eb584>
    a8b0:	01000003 	tsteq	r0, r3
    a8b4:	9f040701 	svcls	0x00040701
    a8b8:	16000003 	strne	r0, [r0], -r3
    a8bc:	000018ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    a8c0:	9b070d01 	blls	1cdccc <__ccfg+0x1add24>
    a8c4:	01000001 	tsteq	r0, r1
    a8c8:	05fc0305 	ldrbeq	r0, [ip, #773]!	; 0x305
    a8cc:	01172000 	tsteq	r7, r0
    a8d0:	00002326 	andeq	r2, r0, r6, lsr #6
    a8d4:	01012301 	tsteq	r1, r1, lsl #6
    a8d8:	000028d0 	ldrdeq	r2, [r0], -r0
    a8dc:	000029ec 	andeq	r2, r0, ip, ror #19
    a8e0:	cc189c01 	ldcgt	12, cr9, [r8], {1}
    a8e4:	01000008 	tsteq	r0, r8
    a8e8:	008f0123 	addeq	r0, pc, r3, lsr #2
    a8ec:	2a9a0000 	bcs	fe68a8f4 <_estack+0xde6858f4>
    a8f0:	2f190000 	svccs	0x00190000
    a8f4:	01000043 	tsteq	r0, r3, asr #32
    a8f8:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    a8fc:	2ab80000 	bcs	fee0a904 <_estack+0xdee05904>
    a900:	201a0000 	andscs	r0, sl, r0
    a904:	1b00000e 	blne	a944 <__exidx_end+0x5a14>
    a908:	00727470 	rsbseq	r7, r2, r0, ror r4
    a90c:	9b0f2801 	blls	3d4918 <__ccfg+0x3b4970>
    a910:	05000001 	streq	r0, [r0, #-1]
    a914:	00060403 	andeq	r0, r6, r3, lsl #8
    a918:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    a91c:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    a920:	0000810d 	andeq	r8, r0, sp, lsl #2
    a924:	00030500 	andeq	r0, r3, r0, lsl #10
    a928:	19200006 	stmdbne	r0!, {r1, r2}
    a92c:	00002309 	andeq	r2, r0, r9, lsl #6
    a930:	81062a01 	tsthi	r6, r1, lsl #20
    a934:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    a938:	0000002b 	andeq	r0, r0, fp, lsr #32
    a93c:	05f00000 	ldrbeq	r0, [r0, #0]!
    a940:	00030000 	andeq	r0, r3, r0
    a944:	000028d8 	ldrdeq	r2, [r0], -r8
    a948:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    a94c:	740c0000 	strvc	r0, [ip], #-0
    a950:	68000023 	stmdavs	r0, {r0, r1, r5}
    a954:	c8000006 	stmdagt	r0, {r1, r2}
    a958:	0000000e 	andeq	r0, r0, lr
    a95c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    a960:	02000060 	andeq	r0, r0, #96	; 0x60
    a964:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    a968:	02020000 	andeq	r0, r2, #0
    a96c:	0007a305 	andeq	sl, r7, r5, lsl #6
    a970:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a974:	000005ed 	andeq	r0, r0, sp, ror #11
    a978:	e8050802 	stmda	r5, {r1, fp}
    a97c:	03000005 	movweq	r0, #5
    a980:	00000835 	andeq	r0, r0, r5, lsr r8
    a984:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    a988:	02000000 	andeq	r0, r0, #0
    a98c:	08dc0801 	ldmeq	ip, {r0, fp}^
    a990:	d2030000 	andle	r0, r3, #0
    a994:	02000003 	andeq	r0, r0, #3
    a998:	00601931 	rsbeq	r1, r0, r1, lsr r9
    a99c:	02020000 	andeq	r0, r2, #0
    a9a0:	0009aa07 	andeq	sl, r9, r7, lsl #20
    a9a4:	08f50300 	ldmeq	r5!, {r8, r9}^
    a9a8:	34020000 	strcc	r0, [r2], #-0
    a9ac:	00007319 	andeq	r7, r0, r9, lsl r3
    a9b0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a9b4:	00000397 	muleq	r0, r7, r3
    a9b8:	92070802 	andls	r0, r7, #131072	; 0x20000
    a9bc:	04000003 	streq	r0, [r0], #-3
    a9c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a9c4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a9c8:	00039c07 	andeq	r9, r3, r7, lsl #24
    a9cc:	041e0300 	ldreq	r0, [lr], #-768	; 0xfffffd00
    a9d0:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    a9d4:	00009b1b 	andeq	r9, r0, fp, lsl fp
    a9d8:	08650500 	stmdaeq	r5!, {r8, sl}^
    a9dc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    a9e0:	0000b300 	andeq	fp, r0, r0, lsl #6
    a9e4:	094c0600 	stmdbeq	ip, {r9, sl}^
    a9e8:	00b30000 	adcseq	r0, r3, r0
    a9ec:	01000000 	mrseq	r0, (UNDEF: 0)
    a9f0:	03040700 	movweq	r0, #18176	; 0x4700
    a9f4:	00000867 	andeq	r0, r0, r7, ror #16
    a9f8:	8f186303 	svchi	0x00186303
    a9fc:	03000000 	movweq	r0, #0
    aa00:	000023d8 	ldrdeq	r2, [r0], -r8
    aa04:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    aa08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    aa0c:	000000c1 	andeq	r0, r0, r1, asr #1
    aa10:	0018f103 	andseq	pc, r8, r3, lsl #2
    aa14:	122b0400 	eorne	r0, fp, #0, 8
    aa18:	00000041 	andeq	r0, r0, r1, asr #32
    aa1c:	0000d209 	andeq	sp, r0, r9, lsl #4
    aa20:	24290300 	strtcs	r0, [r9], #-768	; 0xfffffd00
    aa24:	2c040000 	stccs	0, cr0, [r4], {-0}
    aa28:	00006712 	andeq	r6, r0, r2, lsl r7
    aa2c:	00e30800 	rsceq	r0, r3, r0, lsl #16
    aa30:	fb030000 	blx	caa3a <__ccfg+0xaaa92>
    aa34:	04000004 	streq	r0, [r0], #-4
    aa38:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    aa3c:	75030000 	strvc	r0, [r3, #-0]
    aa40:	04000008 	streq	r0, [r0], #-8
    aa44:	010c102e 	tsteq	ip, lr, lsr #32
    aa48:	040a0000 	streq	r0, [sl], #-0
    aa4c:	000000c1 	andeq	r0, r0, r1, asr #1
    aa50:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    aa54:	0001a009 	andeq	sl, r1, r9
    aa58:	003e0c00 	eorseq	r0, lr, r0, lsl #24
    aa5c:	34040000 	strcc	r0, [r4], #-0
    aa60:	0000d207 	andeq	sp, r0, r7, lsl #4
    aa64:	07010100 	streq	r0, [r1, -r0, lsl #2]
    aa68:	05010c00 	streq	r0, [r1, #-3072]	; 0xfffff400
    aa6c:	35040000 	strcc	r0, [r4, #-0]
    aa70:	0000d203 	andeq	sp, r0, r3, lsl #4
    aa74:	06010100 	streq	r0, [r1], -r0, lsl #2
    aa78:	02370c00 	eorseq	r0, r7, #0, 24
    aa7c:	36040000 	strcc	r0, [r4], -r0
    aa80:	0000d203 	andeq	sp, r0, r3, lsl #4
    aa84:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    aa88:	053b0c00 	ldreq	r0, [fp, #-3072]!	; 0xfffff400
    aa8c:	37040000 	strcc	r0, [r4, -r0]
    aa90:	0000d203 	andeq	sp, r0, r3, lsl #4
    aa94:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    aa98:	07c40c00 	strbeq	r0, [r4, r0, lsl #24]
    aa9c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    aaa0:	0000d203 	andeq	sp, r0, r3, lsl #4
    aaa4:	00040100 	andeq	r0, r4, r0, lsl #2
    aaa8:	05080d00 	streq	r0, [r8, #-3328]	; 0xfffff300
    aaac:	3a040000 	bcc	10aab4 <__ccfg+0xeab0c>
    aab0:	0000d207 	andeq	sp, r0, r7, lsl #4
    aab4:	d20d0100 	andle	r0, sp, #0, 2
    aab8:	04000006 	streq	r0, [r0], #-6
    aabc:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    aac0:	0d020000 	stceq	0, cr0, [r2, #-0]
    aac4:	00000a7c 	andeq	r0, r0, ip, ror sl
    aac8:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    aacc:	03000000 	movweq	r0, #0
    aad0:	0007070d 	andeq	r0, r7, sp, lsl #14
    aad4:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    aad8:	000000e3 	andeq	r0, r0, r3, ror #1
    aadc:	89030004 	stmdbhi	r3, {r2}
    aae0:	04000002 	streq	r0, [r0], #-2
    aae4:	01120341 	tsteq	r2, r1, asr #6
    aae8:	a0090000 	andge	r0, r9, r0
    aaec:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    aaf0:	00000542 	andeq	r0, r0, r2, asr #10
    aaf4:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    aaf8:	01000001 	tsteq	r0, r1
    aafc:	01b10e01 			; <UNDEFINED> instruction: 0x01b10e01
    ab00:	45040000 	strmi	r0, [r4, #-0]
    ab04:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    ab08:	0a010100 	beq	4af10 <__ccfg+0x2af68>
    ab0c:	0001d304 	andeq	sp, r1, r4, lsl #6
    ab10:	08010200 	stmdaeq	r1, {r9}
    ab14:	000008e5 	andeq	r0, r0, r5, ror #17
    ab18:	0001d308 	andeq	sp, r1, r8, lsl #6
    ab1c:	02920e00 	addseq	r0, r2, #0, 28
    ab20:	45040000 	strmi	r0, [r4, #-0]
    ab24:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    ab28:	0b010100 	bleq	4af30 <__ccfg+0x2af88>
    ab2c:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    ab30:	0000021e 	andeq	r0, r0, lr, lsl r2
    ab34:	0006050d 	andeq	r0, r6, sp, lsl #10
    ab38:	0b900500 	bleq	fe40bf40 <_estack+0xde406f40>
    ab3c:	00000067 	andeq	r0, r0, r7, rrx
    ab40:	0bae0d00 	bleq	feb8df48 <_estack+0xdeb88f48>
    ab44:	91050000 	mrsls	r0, (UNDEF: 5)
    ab48:	0000c108 	andeq	ip, r0, r8, lsl #2
    ab4c:	ea0d0400 	b	34bb54 <__ccfg+0x32bbac>
    ab50:	05000001 	streq	r0, [r0, #-1]
    ab54:	00de1092 	smullseq	r1, lr, r2, r0
    ab58:	00060000 	andeq	r0, r6, r0
    ab5c:	00094503 	andeq	r4, r9, r3, lsl #10
    ab60:	03930500 	orrseq	r0, r3, #0, 10
    ab64:	000001ed 	andeq	r0, r0, sp, ror #3
    ab68:	00021e0f 	andeq	r1, r2, pc, lsl #28
    ab6c:	00023500 	andeq	r3, r2, r0, lsl #10
    ab70:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    ab74:	00000713 	andeq	r0, r0, r3, lsl r7
    ab78:	2a0f9905 	bcs	3f0f94 <__ccfg+0x3d0fec>
    ab7c:	01000002 	tsteq	r0, r2
    ab80:	06010b01 	streq	r0, [r1], -r1, lsl #22
    ab84:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    ab88:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    ab8c:	06000007 	streq	r0, [r0], -r7
    ab90:	00d20793 	smullseq	r0, r2, r3, r7
    ab94:	07010000 	streq	r0, [r1, -r0]
    ab98:	7c0c0001 	stcvc	0, cr0, [ip], {1}
    ab9c:	06000004 	streq	r0, [r0], -r4
    aba0:	00d20394 	smullseq	r0, r2, r4, r3
    aba4:	01010000 	mrseq	r0, (UNDEF: 1)
    aba8:	03000000 	movweq	r0, #0
    abac:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    abb0:	43039606 	movwmi	r9, #13830	; 0x3606
    abb4:	08000002 	stmdaeq	r0, {r1}
    abb8:	0000026d 	andeq	r0, r0, sp, ror #4
    abbc:	0002790f 	andeq	r7, r2, pc, lsl #18
    abc0:	00028900 	andeq	r8, r2, r0, lsl #18
    abc4:	08001000 	stmdaeq	r0, {ip}
    abc8:	0000027e 	andeq	r0, r0, lr, ror r2
    abcc:	00034b0e 	andeq	r4, r3, lr, lsl #22
    abd0:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    abd4:	00000289 	andeq	r0, r0, r9, lsl #5
    abd8:	cd0f0101 	stfgts	f0, [pc, #-4]	; abdc <__exidx_end+0x5cac>
    abdc:	a7000000 	strge	r0, [r0, -r0]
    abe0:	10000002 	andne	r0, r0, r2
    abe4:	029c0800 	addseq	r0, ip, #0, 16
    abe8:	bb0e0000 	bllt	38abf0 <__ccfg+0x36ac48>
    abec:	07000004 	streq	r0, [r0, -r4]
    abf0:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    abf4:	01010000 	mrseq	r0, (UNDEF: 1)
    abf8:	0006b40e 	andeq	fp, r6, lr, lsl #8
    abfc:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    ac00:	000000e3 	andeq	r0, r0, r3, ror #1
    ac04:	fe110101 	cdp2	1, 1, cr0, cr1, cr1, {0}
    ac08:	08000008 	stmdaeq	r0, {r3}
    ac0c:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    ac10:	0a000002 	beq	ac20 <__exidx_end+0x5cf0>
    ac14:	0002db04 	andeq	sp, r2, r4, lsl #22
    ac18:	e7011200 	str	r1, [r1, -r0, lsl #4]
    ac1c:	13000002 	movwne	r0, #2
    ac20:	000000c1 	andeq	r0, r0, r1, asr #1
    ac24:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    ac28:	02f20000 	rscseq	r0, r2, #0
    ac2c:	00100000 	andseq	r0, r0, r0
    ac30:	0002e708 	andeq	lr, r2, r8, lsl #14
    ac34:	07671400 	strbeq	r1, [r7, -r0, lsl #8]!
    ac38:	7f080000 	svcvc	0x00080000
    ac3c:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    ac40:	01010000 	mrseq	r0, (UNDEF: 1)
    ac44:	00032e14 	andeq	r2, r3, r4, lsl lr
    ac48:	01820800 	orreq	r0, r2, r0, lsl #16
    ac4c:	0000ef14 	andeq	lr, r0, r4, lsl pc
    ac50:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    ac54:	0000030b 	andeq	r0, r0, fp, lsl #6
    ac58:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    ac5c:	000000e3 	andeq	r0, r0, r3, ror #1
    ac60:	08150101 	ldmdaeq	r5, {r0, r8}
    ac64:	09030308 	stmdbeq	r3, {r3, r8, r9}
    ac68:	0000034b 	andeq	r0, r0, fp, asr #6
    ac6c:	00375c16 	eorseq	r5, r7, r6, lsl ip
    ac70:	03070800 	movweq	r0, #30720	; 0x7800
    ac74:	0000c107 	andeq	ip, r0, r7, lsl #2
    ac78:	06160000 	ldreq	r0, [r6], -r0
    ac7c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    ac80:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    ac84:	04000000 	streq	r0, [r0], #-0
    ac88:	03c31100 	biceq	r1, r3, #0, 2
    ac8c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    ac90:	03240303 			; <UNDEFINED> instruction: 0x03240303
    ac94:	33170000 	tstcc	r7, #0
    ac98:	30000000 	andcc	r0, r0, r0
    ac9c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    aca0:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    aca4:	001a0716 	andseq	r0, sl, r6, lsl r7
    aca8:	03140800 	tsteq	r4, #0, 16
    acac:	0000c108 	andeq	ip, r0, r8, lsl #2
    acb0:	a8160000 	ldmdage	r6, {}	; <UNPREDICTABLE>
    acb4:	08000008 	stmdaeq	r0, {r3}
    acb8:	c1080315 	tstgt	r8, r5, lsl r3
    acbc:	02000000 	andeq	r0, r0, #0
    acc0:	0048cc16 	subeq	ip, r8, r6, lsl ip
    acc4:	03160800 	tsteq	r6, #0, 16
    acc8:	0002c80b 	andeq	ip, r2, fp, lsl #16
    accc:	2f160400 	svccs	0x00160400
    acd0:	08000043 	stmdaeq	r0, {r0, r1, r6}
    acd4:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    acd8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    acdc:	00000716 	andeq	r0, r0, r6, lsl r7
    ace0:	03180800 	tsteq	r8, #0, 16
    ace4:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    ace8:	26160c00 	ldrcs	r0, [r6], -r0, lsl #24
    acec:	08000007 	stmdaeq	r0, {r0, r1, r2}
    acf0:	cb150319 	blgt	54b95c <__ccfg+0x52b9b4>
    acf4:	2c000003 	stccs	0, cr0, [r0], {3}
    acf8:	034b0f00 	movteq	r0, #48896	; 0xbf00
    acfc:	03cb0000 	biceq	r0, fp, #0
    ad00:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    ad04:	03000000 	movweq	r0, #0
    ad08:	58040a00 	stmdapl	r4, {r9, fp}
    ad0c:	11000003 	tstne	r0, r3
    ad10:	0000089d 	muleq	r0, sp, r8
    ad14:	1b031c08 	blne	d1d3c <__ccfg+0xb1d94>
    ad18:	00000358 	andeq	r0, r0, r8, asr r3
    ad1c:	00087d14 	andeq	r7, r8, r4, lsl sp
    ad20:	031e0800 	tsteq	lr, #0, 16
    ad24:	0003ed14 	andeq	lr, r3, r4, lsl sp
    ad28:	0a010100 	beq	4b130 <__ccfg+0x2b188>
    ad2c:	0003d104 	andeq	sp, r3, r4, lsl #2
    ad30:	ca011900 	bgt	51138 <__ccfg+0x31190>
    ad34:	01000023 	tsteq	r0, r3, lsr #32
    ad38:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    ad3c:	3c000001 	stccc	0, cr0, [r0], {1}
    ad40:	8c00002c 	stchi	0, cr0, [r0], {44}	; 0x2c
    ad44:	0100002c 	tsteq	r0, ip, lsr #32
    ad48:	0004689c 	muleq	r4, ip, r8
    ad4c:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    ad50:	91010073 	tstls	r1, r3, ror r0
    ad54:	0001cd14 	andeq	ip, r1, r4, lsl sp
    ad58:	002b2c00 	eoreq	r2, fp, r0, lsl #24
    ad5c:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    ad60:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    ad64:	00000468 	andeq	r0, r0, r8, ror #8
    ad68:	00002b76 	andeq	r2, r0, r6, ror fp
    ad6c:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    ad70:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    ad74:	b5000000 	strlt	r0, [r0, #-0]
    ad78:	1b00002b 	blne	ae2c <__exidx_end+0x5efc>
    ad7c:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    ad80:	c1079301 	tstgt	r7, r1, lsl #6
    ad84:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    ad88:	1b00002b 	blne	ae3c <__exidx_end+0x5f0c>
    ad8c:	93010064 	movwls	r0, #4196	; 0x1064
    ad90:	0000c10c 	andeq	ip, r0, ip, lsl #2
    ad94:	002c0700 	eoreq	r0, ip, r0, lsl #14
    ad98:	23b21c00 			; <UNDEFINED> instruction: 0x23b21c00
    ad9c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    ada0:	002c6601 	eoreq	r6, ip, r1, lsl #12
    ada4:	040a0000 	streq	r0, [sl], #-0
    ada8:	000001da 	ldrdeq	r0, [r0], -sl
    adac:	23bd011d 			; <UNDEFINED> instruction: 0x23bd011d
    adb0:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    adb4:	00c10106 	sbceq	r0, r1, r6, lsl #2
    adb8:	2a0c0000 	bcs	30adc0 <__ccfg+0x2eae18>
    adbc:	2c3c0000 	ldccs	0, cr0, [ip], #-0
    adc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    adc4:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    adc8:	1a080100 	bne	20b1d0 <__ccfg+0x1eb228>
    adcc:	000001cd 	andeq	r0, r0, sp, asr #3
    add0:	00002c1a 	andeq	r2, r0, sl, lsl ip
    add4:	01006e1a 	tsteq	r0, sl, lsl lr
    add8:	00c12408 	sbceq	r2, r1, r8, lsl #8
    addc:	2c2d0000 	stccs	0, cr0, [sp], #-0
    ade0:	661a0000 	ldrvs	r0, [sl], -r0
    ade4:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    ade8:	00046833 	andeq	r6, r4, r3, lsr r8
    adec:	002c4000 	eoreq	r4, ip, r0
    adf0:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    adf4:	3f080100 	svccc	0x00080100
    adf8:	000000b5 	strheq	r0, [r0], -r5
    adfc:	00002c69 	andeq	r2, r0, r9, ror #24
    ae00:	0100631b 	tsteq	r0, fp, lsl r3
    ae04:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    ae08:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    ae0c:	641e0000 	ldrvs	r0, [lr], #-0
    ae10:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    ae14:	000000c1 	andeq	r0, r0, r1, asr #1
    ae18:	23549104 	cmpcs	r4, #4, 2
    ae1c:	23b81f06 			; <UNDEFINED> instruction: 0x23b81f06
    ae20:	0d010000 	stceq	0, cr0, [r1, #-0]
    ae24:	29ec0107 	stmibcs	ip!, {r0, r1, r2, r8}^
    ae28:	2a0c0000 	bcs	30ae30 <__ccfg+0x2eae88>
    ae2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    ae30:	23007c05 	movwcs	r7, #3077	; 0xc05
    ae34:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    ae38:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    ae3c:	120d0100 	andne	r0, sp, #0, 2
    ae40:	000000c1 	andeq	r0, r0, r1, asr #1
    ae44:	21005001 	tstcs	r0, r1
    ae48:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    ae4c:	46018801 	strmi	r8, [r1], -r1, lsl #16
    ae50:	2100002a 	tstcs	r0, sl, lsr #32
    ae54:	00746552 	rsbseq	r6, r4, r2, asr r5
    ae58:	a8018b01 	stmdage	r1, {r0, r8, r9, fp, pc}
    ae5c:	2200002a 	andcs	r0, r0, #42	; 0x2a
    ae60:	00000e78 	andeq	r0, r0, r8, ror lr
    ae64:	00000545 	andeq	r0, r0, r5, asr #10
    ae68:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    ae6c:	0a3a0100 	beq	e8b274 <__ccfg+0xe6b2cc>
    ae70:	000000c1 	andeq	r0, r0, r1, asr #1
    ae74:	0100691b 	tsteq	r0, fp, lsl r9
    ae78:	0081133a 	addeq	r1, r1, sl, lsr r3
    ae7c:	2df10000 	ldclcs	0, cr0, [r1]
    ae80:	22000000 	andcs	r0, r0, #0
    ae84:	00000e50 	andeq	r0, r0, r0, asr lr
    ae88:	0000056d 	andeq	r0, r0, sp, ror #10
    ae8c:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    ae90:	0a460100 	beq	118b298 <__ccfg+0x116b2f0>
    ae94:	000000c1 	andeq	r0, r0, r1, asr #1
    ae98:	00002e04 	andeq	r2, r0, r4, lsl #28
    ae9c:	0100691b 	tsteq	r0, fp, lsl r9
    aea0:	00c10f46 	sbceq	r0, r1, r6, asr #30
    aea4:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
    aea8:	22000000 	andcs	r0, r0, #0
    aeac:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
    aeb0:	00000595 	muleq	r0, r5, r5
    aeb4:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    aeb8:	0c550100 	ldfeqe	f0, [r5], {-0}
    aebc:	000000e3 	andeq	r0, r0, r3, ror #1
    aec0:	00002e56 	andeq	r2, r0, r6, asr lr
    aec4:	0100691b 	tsteq	r0, fp, lsl r9
    aec8:	00e31155 	rsceq	r1, r3, r5, asr r1
    aecc:	2e690000 	cdpcs	0, 6, cr0, cr9, cr0, {0}
    aed0:	24000000 	strcs	r0, [r0], #-0
    aed4:	00002bca 	andeq	r2, r0, sl, asr #23
    aed8:	00002bf4 	strdeq	r2, [r0], -r4
    aedc:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    aee0:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    aee4:	0c600100 	stfeqe	f0, [r0], #-0
    aee8:	000000e3 	andeq	r0, r0, r3, ror #1
    aeec:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    aef0:	0a610100 	beq	184b2f8 <__ccfg+0x182b350>
    aef4:	00000081 	andeq	r0, r0, r1, lsl #1
    aef8:	00002e92 	muleq	r0, r2, lr
    aefc:	0e982200 	cdpeq	2, 9, cr2, cr8, cr0, {0}
    af00:	05d90000 	ldrbeq	r0, [r9]
    af04:	761b0000 	ldrvc	r0, [fp], -r0
    af08:	01006c61 	tsteq	r0, r1, ror #24
    af0c:	00c10a71 	sbceq	r0, r1, r1, ror sl
    af10:	2ea50000 	cdpcs	0, 10, cr0, cr5, cr0, {0}
    af14:	25000000 	strcs	r0, [r0, #-0]
    af18:	00002c12 	andeq	r2, r0, r2, lsl ip
    af1c:	00002c2e 	andeq	r2, r0, lr, lsr #24
    af20:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    af24:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    af28:	c5000001 	strgt	r0, [r0, #-1]
    af2c:	0000002e 	andeq	r0, r0, lr, lsr #32
    af30:	058f0000 	streq	r0, [pc]	; af38 <__exidx_end+0x6008>
    af34:	00030000 	andeq	r0, r3, r0
    af38:	00002aea 	andeq	r2, r0, sl, ror #21
    af3c:	00bd0104 	adcseq	r0, sp, r4, lsl #2
    af40:	dd0c0000 	stcle	0, cr0, [ip, #-0]
    af44:	68000023 	stmdavs	r0, {r0, r1, r5}
    af48:	70000006 	andvc	r0, r0, r6
    af4c:	0000000f 	andeq	r0, r0, pc
    af50:	0f000000 	svceq	0x00000000
    af54:	02000064 	andeq	r0, r0, #100	; 0x64
    af58:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    af5c:	02020000 	andeq	r0, r2, #0
    af60:	0007a305 	andeq	sl, r7, r5, lsl #6
    af64:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    af68:	000005ed 	andeq	r0, r0, sp, ror #11
    af6c:	e8050802 	stmda	r5, {r1, fp}
    af70:	03000005 	movweq	r0, #5
    af74:	00000835 	andeq	r0, r0, r5, lsr r8
    af78:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    af7c:	02000000 	andeq	r0, r0, #0
    af80:	08dc0801 	ldmeq	ip, {r0, fp}^
    af84:	d2030000 	andle	r0, r3, #0
    af88:	02000003 	andeq	r0, r0, #3
    af8c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    af90:	02020000 	andeq	r0, r2, #0
    af94:	0009aa07 	andeq	sl, r9, r7, lsl #20
    af98:	08f50300 	ldmeq	r5!, {r8, r9}^
    af9c:	34020000 	strcc	r0, [r2], #-0
    afa0:	00007319 	andeq	r7, r0, r9, lsl r3
    afa4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    afa8:	00000397 	muleq	r0, r7, r3
    afac:	92070802 	andls	r0, r7, #131072	; 0x20000
    afb0:	04000003 	streq	r0, [r0], #-3
    afb4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    afb8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    afbc:	00039c07 	andeq	r9, r3, r7, lsl #24
    afc0:	041e0300 	ldreq	r0, [lr], #-768	; 0xfffffd00
    afc4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    afc8:	00009b1b 	andeq	r9, r0, fp, lsl fp
    afcc:	08650500 	stmdaeq	r5!, {r8, sl}^
    afd0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    afd4:	0000b300 	andeq	fp, r0, r0, lsl #6
    afd8:	094c0600 	stmdbeq	ip, {r9, sl}^
    afdc:	00b30000 	adcseq	r0, r3, r0
    afe0:	01000000 	mrseq	r0, (UNDEF: 0)
    afe4:	03040700 	movweq	r0, #18176	; 0x4700
    afe8:	00000867 	andeq	r0, r0, r7, ror #16
    afec:	8f186303 	svchi	0x00186303
    aff0:	03000000 	movweq	r0, #0
    aff4:	00000733 	andeq	r0, r0, r3, lsr r7
    aff8:	41122604 	tstmi	r2, r4, lsl #12
    affc:	03000000 	movweq	r0, #0
    b000:	000023d8 	ldrdeq	r2, [r0], -r8
    b004:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    b008:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b00c:	000000cd 	andeq	r0, r0, sp, asr #1
    b010:	0018f103 	andseq	pc, r8, r3, lsl #2
    b014:	122b0400 	eorne	r0, fp, #0, 8
    b018:	00000041 	andeq	r0, r0, r1, asr #32
    b01c:	0000de09 	andeq	sp, r0, r9, lsl #28
    b020:	24290300 	strtcs	r0, [r9], #-768	; 0xfffffd00
    b024:	2c040000 	stccs	0, cr0, [r4], {-0}
    b028:	00006712 	andeq	r6, r0, r2, lsl r7
    b02c:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    b030:	fb030000 	blx	cb03a <__ccfg+0xab092>
    b034:	04000004 	streq	r0, [r0], #-4
    b038:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    b03c:	040a0000 	streq	r0, [sl], #-0
    b040:	000000cd 	andeq	r0, r0, sp, asr #1
    b044:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    b048:	0001a009 	andeq	sl, r1, r9
    b04c:	003e0c00 	eorseq	r0, lr, r0, lsl #24
    b050:	34040000 	strcc	r0, [r4], #-0
    b054:	0000de07 	andeq	sp, r0, r7, lsl #28
    b058:	07010100 	streq	r0, [r1, -r0, lsl #2]
    b05c:	05010c00 	streq	r0, [r1, #-3072]	; 0xfffff400
    b060:	35040000 	strcc	r0, [r4, #-0]
    b064:	0000de03 	andeq	sp, r0, r3, lsl #28
    b068:	06010100 	streq	r0, [r1], -r0, lsl #2
    b06c:	02370c00 	eorseq	r0, r7, #0, 24
    b070:	36040000 	strcc	r0, [r4], -r0
    b074:	0000de03 	andeq	sp, r0, r3, lsl #28
    b078:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    b07c:	053b0c00 	ldreq	r0, [fp, #-3072]!	; 0xfffff400
    b080:	37040000 	strcc	r0, [r4, -r0]
    b084:	0000de03 	andeq	sp, r0, r3, lsl #28
    b088:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    b08c:	07c40c00 	strbeq	r0, [r4, r0, lsl #24]
    b090:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    b094:	0000de03 	andeq	sp, r0, r3, lsl #28
    b098:	00040100 	andeq	r0, r4, r0, lsl #2
    b09c:	05080d00 	streq	r0, [r8, #-3328]	; 0xfffff300
    b0a0:	3a040000 	bcc	10b0a8 <__ccfg+0xeb100>
    b0a4:	0000de07 	andeq	sp, r0, r7, lsl #28
    b0a8:	d20d0100 	andle	r0, sp, #0, 2
    b0ac:	04000006 	streq	r0, [r0], #-6
    b0b0:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    b0b4:	0d020000 	stceq	0, cr0, [r2, #-0]
    b0b8:	00000a7c 	andeq	r0, r0, ip, ror sl
    b0bc:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    b0c0:	03000000 	movweq	r0, #0
    b0c4:	0007070d 	andeq	r0, r7, sp, lsl #14
    b0c8:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    b0cc:	000000ef 	andeq	r0, r0, pc, ror #1
    b0d0:	89030004 	stmdbhi	r3, {r2}
    b0d4:	04000002 	streq	r0, [r0], #-2
    b0d8:	01120341 	tsteq	r2, r1, asr #6
    b0dc:	a0090000 	andge	r0, r9, r0
    b0e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    b0e4:	00000542 	andeq	r0, r0, r2, asr #10
    b0e8:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    b0ec:	01000001 	tsteq	r0, r1
    b0f0:	01b10e01 			; <UNDEFINED> instruction: 0x01b10e01
    b0f4:	45040000 	strmi	r0, [r4, #-0]
    b0f8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    b0fc:	0a010100 	beq	4b504 <__ccfg+0x2b55c>
    b100:	0001d304 	andeq	sp, r1, r4, lsl #6
    b104:	08010200 	stmdaeq	r1, {r9}
    b108:	000008e5 	andeq	r0, r0, r5, ror #17
    b10c:	0001d308 	andeq	sp, r1, r8, lsl #6
    b110:	02920e00 	addseq	r0, r2, #0, 28
    b114:	45040000 	strmi	r0, [r4, #-0]
    b118:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    b11c:	0b010100 	bleq	4b524 <__ccfg+0x2b57c>
    b120:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    b124:	0000021e 	andeq	r0, r0, lr, lsl r2
    b128:	0006050d 	andeq	r0, r6, sp, lsl #10
    b12c:	0b900500 	bleq	fe40c534 <_estack+0xde407534>
    b130:	00000067 	andeq	r0, r0, r7, rrx
    b134:	0bae0d00 	bleq	feb8e53c <_estack+0xdeb8953c>
    b138:	91050000 	mrsls	r0, (UNDEF: 5)
    b13c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    b140:	ea0d0400 	b	34c148 <__ccfg+0x32c1a0>
    b144:	05000001 	streq	r0, [r0, #-1]
    b148:	00ea1092 	smlaleq	r1, sl, r2, r0
    b14c:	00060000 	andeq	r0, r6, r0
    b150:	00094503 	andeq	r4, r9, r3, lsl #10
    b154:	03930500 	orrseq	r0, r3, #0, 10
    b158:	000001ed 	andeq	r0, r0, sp, ror #3
    b15c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    b160:	00023500 	andeq	r3, r2, r0, lsl #10
    b164:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    b168:	00000713 	andeq	r0, r0, r3, lsl r7
    b16c:	2a0f9905 	bcs	3f1588 <__ccfg+0x3d15e0>
    b170:	01000002 	tsteq	r0, r2
    b174:	06010b01 	streq	r0, [r1], -r1, lsl #22
    b178:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    b17c:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
    b180:	06000007 	streq	r0, [r0], -r7
    b184:	00de0793 	smullseq	r0, lr, r3, r7
    b188:	07010000 	streq	r0, [r1, -r0]
    b18c:	7c0c0001 	stcvc	0, cr0, [ip], {1}
    b190:	06000004 	streq	r0, [r0], -r4
    b194:	00de0394 	smullseq	r0, lr, r4, r3
    b198:	01010000 	mrseq	r0, (UNDEF: 1)
    b19c:	03000000 	movweq	r0, #0
    b1a0:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    b1a4:	43039606 	movwmi	r9, #13830	; 0x3606
    b1a8:	08000002 	stmdaeq	r0, {r1}
    b1ac:	0000026d 	andeq	r0, r0, sp, ror #4
    b1b0:	0002790f 	andeq	r7, r2, pc, lsl #18
    b1b4:	00028900 	andeq	r8, r2, r0, lsl #18
    b1b8:	08001000 	stmdaeq	r0, {ip}
    b1bc:	0000027e 	andeq	r0, r0, lr, ror r2
    b1c0:	00034b0e 	andeq	r4, r3, lr, lsl #22
    b1c4:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    b1c8:	00000289 	andeq	r0, r0, r9, lsl #5
    b1cc:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    b1d0:	a7000000 	strge	r0, [r0, -r0]
    b1d4:	10000002 	andne	r0, r0, r2
    b1d8:	029c0800 	addseq	r0, ip, #0, 16
    b1dc:	bb0e0000 	bllt	38b1e4 <__ccfg+0x36b23c>
    b1e0:	07000004 	streq	r0, [r0, -r4]
    b1e4:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    b1e8:	01010000 	mrseq	r0, (UNDEF: 1)
    b1ec:	0006b40e 	andeq	fp, r6, lr, lsl #8
    b1f0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    b1f4:	000000ef 	andeq	r0, r0, pc, ror #1
    b1f8:	fe110101 	cdp2	1, 1, cr0, cr1, cr1, {0}
    b1fc:	08000008 	stmdaeq	r0, {r3}
    b200:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    b204:	0a000002 	beq	b214 <__exidx_end+0x62e4>
    b208:	0002db04 	andeq	sp, r2, r4, lsl #22
    b20c:	e7011200 	str	r1, [r1, -r0, lsl #4]
    b210:	13000002 	movwne	r0, #2
    b214:	000000cd 	andeq	r0, r0, sp, asr #1
    b218:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    b21c:	02f20000 	rscseq	r0, r2, #0
    b220:	00100000 	andseq	r0, r0, r0
    b224:	0002e708 	andeq	lr, r2, r8, lsl #14
    b228:	07671400 	strbeq	r1, [r7, -r0, lsl #8]!
    b22c:	7f080000 	svcvc	0x00080000
    b230:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    b234:	01010000 	mrseq	r0, (UNDEF: 1)
    b238:	00032e14 	andeq	r2, r3, r4, lsl lr
    b23c:	01820800 	orreq	r0, r2, r0, lsl #16
    b240:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    b244:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    b248:	0000030b 	andeq	r0, r0, fp, lsl #6
    b24c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    b250:	000000ef 	andeq	r0, r0, pc, ror #1
    b254:	08150101 	ldmdaeq	r5, {r0, r8}
    b258:	09030308 	stmdbeq	r3, {r3, r8, r9}
    b25c:	0000034b 	andeq	r0, r0, fp, asr #6
    b260:	00375c16 	eorseq	r5, r7, r6, lsl ip
    b264:	03070800 	movweq	r0, #30720	; 0x7800
    b268:	0000cd07 	andeq	ip, r0, r7, lsl #26
    b26c:	06160000 	ldreq	r0, [r6], -r0
    b270:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    b274:	00080308 	andeq	r0, r8, r8, lsl #6
    b278:	04000001 	streq	r0, [r0], #-1
    b27c:	03c31100 	biceq	r1, r3, #0, 2
    b280:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    b284:	03240303 			; <UNDEFINED> instruction: 0x03240303
    b288:	33170000 	tstcc	r7, #0
    b28c:	30000000 	andcc	r0, r0, r0
    b290:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    b294:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    b298:	001a0716 	andseq	r0, sl, r6, lsl r7
    b29c:	03140800 	tsteq	r4, #0, 16
    b2a0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    b2a4:	a8160000 	ldmdage	r6, {}	; <UNPREDICTABLE>
    b2a8:	08000008 	stmdaeq	r0, {r3}
    b2ac:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    b2b0:	02000000 	andeq	r0, r0, #0
    b2b4:	0048cc16 	subeq	ip, r8, r6, lsl ip
    b2b8:	03160800 	tsteq	r6, #0, 16
    b2bc:	0002c80b 	andeq	ip, r2, fp, lsl #16
    b2c0:	2f160400 	svccs	0x00160400
    b2c4:	08000043 	stmdaeq	r0, {r0, r1, r6}
    b2c8:	00090317 	andeq	r0, r9, r7, lsl r3
    b2cc:	08000001 	stmdaeq	r0, {r0}
    b2d0:	00000716 	andeq	r0, r0, r6, lsl r7
    b2d4:	03180800 	tsteq	r8, #0, 16
    b2d8:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    b2dc:	26160c00 	ldrcs	r0, [r6], -r0, lsl #24
    b2e0:	08000007 	stmdaeq	r0, {r0, r1, r2}
    b2e4:	cb150319 	blgt	54bf50 <__ccfg+0x52bfa8>
    b2e8:	2c000003 	stccs	0, cr0, [r0], {3}
    b2ec:	034b0f00 	movteq	r0, #48896	; 0xbf00
    b2f0:	03cb0000 	biceq	r0, fp, #0
    b2f4:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    b2f8:	03000000 	movweq	r0, #0
    b2fc:	58040a00 	stmdapl	r4, {r9, fp}
    b300:	11000003 	tstne	r0, r3
    b304:	0000089d 	muleq	r0, sp, r8
    b308:	1b031c08 	blne	d2330 <__ccfg+0xb2388>
    b30c:	00000358 	andeq	r0, r0, r8, asr r3
    b310:	00087d14 	andeq	r7, r8, r4, lsl sp
    b314:	031e0800 	tsteq	lr, #0, 16
    b318:	0003ed14 	andeq	lr, r3, r4, lsl sp
    b31c:	0a010100 	beq	4b724 <__ccfg+0x2b77c>
    b320:	0003d104 	andeq	sp, r3, r4, lsl #2
    b324:	1b011900 	blne	5172c <__ccfg+0x31784>
    b328:	01000024 	tsteq	r0, r4, lsr #32
    b32c:	81010508 	tsthi	r1, r8, lsl #10
    b330:	8c000000 	stchi	0, cr0, [r0], {-0}
    b334:	1c00002c 	stcne	0, cr0, [r0], {44}	; 0x2c
    b338:	01000030 	tsteq	r0, r0, lsr r0
    b33c:	0005869c 	muleq	r5, ip, r6
    b340:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    b344:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    b348:	00058618 	andeq	r8, r5, r8, lsl r6
    b34c:	002ed800 	eoreq	sp, lr, r0, lsl #16
    b350:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    b354:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    b358:	00058629 	andeq	r8, r5, r9, lsr #12
    b35c:	0030cf00 	eorseq	ip, r0, r0, lsl #30
    b360:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    b364:	36080100 	strcc	r0, [r8], -r0, lsl #2
    b368:	000000b5 	strheq	r0, [r0], -r5
    b36c:	00003103 	andeq	r3, r0, r3, lsl #2
    b370:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    b374:	81060a01 	tsthi	r6, r1, lsl #20
    b378:	9c000000 	stcls	0, cr0, [r0], {-0}
    b37c:	1c000031 	stcne	0, cr0, [r0], {49}	; 0x31
    b380:	000023d0 	ldrdeq	r2, [r0], -r0
    b384:	1c114e01 	ldcne	14, cr4, [r1], {1}
    b388:	00002421 	andeq	r2, r0, r1, lsr #8
    b38c:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    b390:	00002d4e 	andeq	r2, r0, lr, asr #26
    b394:	00002dbe 			; <UNDEFINED> instruction: 0x00002dbe
    b398:	00000488 	andeq	r0, r0, r8, lsl #9
    b39c:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    b3a0:	114e0100 	mrsne	r0, (UNDEF: 94)
    b3a4:	0000010c 	andeq	r0, r0, ip, lsl #2
    b3a8:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    b3ac:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    b3b0:	0000c111 	andeq	ip, r0, r1, lsl r1
    b3b4:	00321d00 	eorseq	r1, r2, r0, lsl #26
    b3b8:	be1d0000 	cdplt	0, 1, cr0, cr13, cr0, {0}
    b3bc:	0600002d 	streq	r0, [r0], -sp, lsr #32
    b3c0:	a400002e 	strge	r0, [r0], #-46	; 0xffffffd2
    b3c4:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    b3c8:	00706176 	rsbseq	r6, r0, r6, ror r1
    b3cc:	0c114f01 	ldceq	15, cr4, [r1], {1}
    b3d0:	01000001 	tsteq	r0, r1
    b3d4:	201f005e 	andscs	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    b3d8:	d500000f 	strle	r0, [r0, #-15]
    b3dc:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    b3e0:	00706176 	rsbseq	r6, r0, r6, ror r1
    b3e4:	0c115001 	ldceq	0, cr5, [r1], {1}
    b3e8:	01000001 	tsteq	r0, r1
    b3ec:	6364205e 	cmnvs	r4, #94	; 0x5e
    b3f0:	11500100 	cmpne	r0, r0, lsl #2
    b3f4:	00000081 	andeq	r0, r0, r1, lsl #1
    b3f8:	0100631b 	tsteq	r0, fp, lsl r3
    b3fc:	01d31150 	bicseq	r1, r3, r0, asr r1
    b400:	323b0000 	eorscc	r0, fp, #0
    b404:	1f000000 	svcne	0x00000000
    b408:	00000f38 	andeq	r0, r0, r8, lsr pc
    b40c:	000004fc 	strdeq	r0, [r0], -ip
    b410:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    b414:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    b418:	0000058c 	andeq	r0, r0, ip, lsl #11
    b41c:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    b420:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    b424:	0000c116 	andeq	ip, r0, r6, lsl r1
    b428:	00325900 	eorseq	r5, r2, r0, lsl #18
    b42c:	e81f0000 	ldmda	pc, {}	; <UNPREDICTABLE>
    b430:	1400000e 	strne	r0, [r0], #-14
    b434:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    b438:	00706176 	rsbseq	r6, r0, r6, ror r1
    b43c:	8c165601 	ldchi	6, cr5, [r6], {1}
    b440:	01000005 	tsteq	r0, r5
    b444:	501f005e 	andspl	r0, pc, lr, asr r0	; <UNPREDICTABLE>
    b448:	4500000f 	strmi	r0, [r0, #-15]
    b44c:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    b450:	00706176 	rsbseq	r6, r0, r6, ror r1
    b454:	8c165701 	ldchi	7, cr5, [r6], {1}
    b458:	01000005 	tsteq	r0, r5
    b45c:	6364205e 	cmnvs	r4, #94	; 0x5e
    b460:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    b464:	00000081 	andeq	r0, r0, r1, lsl #1
    b468:	0100631b 	tsteq	r0, fp, lsl r3
    b46c:	01d31657 	bicseq	r1, r3, r7, asr r6
    b470:	32770000 	rsbscc	r0, r7, #0
    b474:	1d000000 	stcne	0, cr0, [r0, #-0]
    b478:	00002fce 	andeq	r2, r0, lr, asr #31
    b47c:	00002fe2 	andeq	r2, r0, r2, ror #31
    b480:	0000056f 	andeq	r0, r0, pc, ror #10
    b484:	0100631b 	tsteq	r0, fp, lsl r3
    b488:	01d3095c 	bicseq	r0, r3, ip, asr r9
    b48c:	32950000 	addscc	r0, r5, #0
    b490:	731e0000 	tstvc	lr, #0
    b494:	01007061 	tsteq	r0, r1, rrx
    b498:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    b49c:	56010000 	strpl	r0, [r1], -r0
    b4a0:	0f002100 	svceq	0x00002100
    b4a4:	731b0000 	tstvc	fp, #0
    b4a8:	01007061 	tsteq	r0, r1, rrx
    b4ac:	01cd0a66 	biceq	r0, sp, r6, ror #20
    b4b0:	32a80000 	adccc	r0, r8, #0
    b4b4:	00000000 	andeq	r0, r0, r0
    b4b8:	01da040a 	bicseq	r0, sl, sl, lsl #8
    b4bc:	040a0000 	streq	r0, [sl], #-0
    b4c0:	000000ef 	andeq	r0, r0, pc, ror #1
    b4c4:	001fea00 	andseq	lr, pc, r0, lsl #20
    b4c8:	a6000300 	strge	r0, [r0], -r0, lsl #6
    b4cc:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    b4d0:	0000bd01 	andeq	fp, r0, r1, lsl #26
    b4d4:	242f0c00 	strtcs	r0, [pc], #-3072	; b4dc <__exidx_end+0x65ac>
    b4d8:	06680000 	strbteq	r0, [r8], -r0
    b4dc:	66d90000 	ldrbvs	r0, [r9], r0
    b4e0:	01020000 	mrseq	r0, (UNDEF: 2)
    b4e4:	0008de06 	andeq	sp, r8, r6, lsl #28
    b4e8:	2ca80300 	stccs	3, cr0, [r8]
    b4ec:	25010000 	strcs	r0, [r1, #-0]
    b4f0:	00003018 	andeq	r3, r0, r8, lsl r0
    b4f4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    b4f8:	000007a3 	andeq	r0, r0, r3, lsr #15
    b4fc:	ed050402 	cfstrs	mvf0, [r5, #-8]
    b500:	02000005 	andeq	r0, r0, #5
    b504:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
    b508:	35030000 	strcc	r0, [r3, #-0]
    b50c:	01000008 	tsteq	r0, r8
    b510:	0051182e 	subseq	r1, r1, lr, lsr #16
    b514:	01020000 	mrseq	r0, (UNDEF: 2)
    b518:	0008dc08 	andeq	sp, r8, r8, lsl #24
    b51c:	03d20300 	bicseq	r0, r2, #0, 6
    b520:	31010000 	mrscc	r0, (UNDEF: 1)
    b524:	00006419 	andeq	r6, r0, r9, lsl r4
    b528:	07020200 	streq	r0, [r2, -r0, lsl #4]
    b52c:	000009aa 	andeq	r0, r0, sl, lsr #19
    b530:	0008f503 	andeq	pc, r8, r3, lsl #10
    b534:	19340100 	ldmdbne	r4!, {r8}
    b538:	0000007c 	andeq	r0, r0, ip, ror r0
    b53c:	00006b04 	andeq	r6, r0, r4, lsl #22
    b540:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b544:	00000397 	muleq	r0, r7, r3
    b548:	92070802 	andls	r0, r7, #131072	; 0x20000
    b54c:	05000003 	streq	r0, [r0, #-3]
    b550:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    b554:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    b558:	00039c07 	andeq	r9, r3, r7, lsl #24
    b55c:	24780300 	ldrbtcs	r0, [r8], #-768	; 0xfffffd00
    b560:	56010000 	strpl	r0, [r1], -r0
    b564:	0000911a 	andeq	r9, r0, sl, lsl r1
    b568:	08960600 	ldmeq	r6, {r9, sl}
    b56c:	5e020000 	cdppl	0, 0, cr0, cr2, cr0, {0}
    b570:	00911701 	addseq	r1, r1, r1, lsl #14
    b574:	e6030000 	str	r0, [r3], -r0
    b578:	03000009 	movweq	r0, #9
    b57c:	00370e2e 	eorseq	r0, r7, lr, lsr #28
    b580:	6b030000 	blvs	cb588 <__ccfg+0xab5e0>
    b584:	03000002 	movweq	r0, #2
    b588:	00370e74 	eorseq	r0, r7, r4, ror lr
    b58c:	04070000 	streq	r0, [r7], #-0
    b590:	eb03a503 	bl	f49a4 <__ccfg+0xd49fc>
    b594:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b598:	0000058b 	andeq	r0, r0, fp, lsl #11
    b59c:	a40ca703 	strge	sl, [ip], #-1795	; 0xfffff8fd
    b5a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b5a4:	000007ea 	andeq	r0, r0, sl, ror #15
    b5a8:	eb13a803 	bl	4f55bc <__ccfg+0x4d5614>
    b5ac:	00000000 	andeq	r0, r0, r0
    b5b0:	00005109 	andeq	r5, r0, r9, lsl #2
    b5b4:	0000fb00 	andeq	pc, r0, r0, lsl #22
    b5b8:	00910a00 	addseq	r0, r1, r0, lsl #20
    b5bc:	00030000 	andeq	r0, r3, r0
    b5c0:	a203080b 	andge	r0, r3, #720896	; 0xb0000
    b5c4:	00011f09 	andeq	r1, r1, r9, lsl #30
    b5c8:	03260c00 			; <UNDEFINED> instruction: 0x03260c00
    b5cc:	a4030000 	strge	r0, [r3], #-0
    b5d0:	00008a07 	andeq	r8, r0, r7, lsl #20
    b5d4:	ae0c0000 	cdpge	0, 0, cr0, cr12, cr0, {0}
    b5d8:	03000004 	movweq	r0, #4
    b5dc:	00c905a9 	sbceq	r0, r9, r9, lsr #11
    b5e0:	00040000 	andeq	r0, r4, r0
    b5e4:	0006a903 	andeq	sl, r6, r3, lsl #18
    b5e8:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
    b5ec:	000000fb 	strdeq	r0, [r0], -fp
    b5f0:	2d03040d 	cfstrscs	mvf0, [r3, #-52]	; 0xffffffcc
    b5f4:	04000006 	streq	r0, [r0], #-6
    b5f8:	007c1916 	rsbseq	r1, ip, r6, lsl r9
    b5fc:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    b600:	05000001 	streq	r0, [r0, #-1]
    b604:	008a0d0c 	addeq	r0, sl, ip, lsl #26
    b608:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    b60c:	04000005 	streq	r0, [r0], #-5
    b610:	01391b23 	teqeq	r9, r3, lsr #22
    b614:	ab0e0000 	blge	38b61c <__ccfg+0x36b674>
    b618:	18000002 	stmdane	r0, {r1}
    b61c:	ab083404 	blge	218634 <__ccfg+0x1f868c>
    b620:	0c000001 	stceq	0, cr0, [r0], {1}
    b624:	00000a40 	andeq	r0, r0, r0, asr #20
    b628:	ab133604 	blge	4d8e40 <__ccfg+0x4b8e98>
    b62c:	00000001 	andeq	r0, r0, r1
    b630:	006b5f0f 	rsbeq	r5, fp, pc, lsl #30
    b634:	8a073704 	bhi	1d924c <__ccfg+0x1b92a4>
    b638:	04000000 	streq	r0, [r0], #-0
    b63c:	0008450c 	andeq	r4, r8, ip, lsl #10
    b640:	0b370400 	bleq	dcc648 <__ccfg+0xdac6a0>
    b644:	0000008a 	andeq	r0, r0, sl, lsl #1
    b648:	3eb00c08 	cdpcc	12, 11, cr0, cr0, cr8, {0}
    b64c:	37040000 	strcc	r0, [r4, -r0]
    b650:	00008a14 	andeq	r8, r0, r4, lsl sl
    b654:	be0c0c00 	cdplt	12, 0, cr0, cr12, cr0, {0}
    b658:	04000003 	streq	r0, [r0], #-3
    b65c:	008a1b37 	addeq	r1, sl, r7, lsr fp
    b660:	0f100000 	svceq	0x00100000
    b664:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
    b668:	01b10b38 			; <UNDEFINED> instruction: 0x01b10b38
    b66c:	00140000 	andseq	r0, r4, r0
    b670:	01510410 	cmpeq	r1, r0, lsl r4
    b674:	2d090000 	stccs	0, cr0, [r9, #-0]
    b678:	c1000001 	tstgt	r0, r1
    b67c:	0a000001 	beq	b688 <__exidx_end+0x6758>
    b680:	00000091 	muleq	r0, r1, r0
    b684:	600e0000 	andvs	r0, lr, r0
    b688:	24000008 	strcs	r0, [r0], #-8
    b68c:	44083c04 	strmi	r3, [r8], #-3076	; 0xfffff3fc
    b690:	0c000002 	stceq	0, cr0, [r0], {2}
    b694:	0000044e 	andeq	r0, r0, lr, asr #8
    b698:	8a093e04 	bhi	25aeb0 <__ccfg+0x23af08>
    b69c:	00000000 	andeq	r0, r0, r0
    b6a0:	0003580c 	andeq	r5, r3, ip, lsl #16
    b6a4:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
    b6a8:	0000008a 	andeq	r0, r0, sl, lsl #1
    b6ac:	03010c04 	movweq	r0, #7172	; 0x1c04
    b6b0:	40040000 	andmi	r0, r4, r0
    b6b4:	00008a09 	andeq	r8, r0, r9, lsl #20
    b6b8:	0f0c0800 	svceq	0x000c0800
    b6bc:	04000005 	streq	r0, [r0], #-5
    b6c0:	008a0941 	addeq	r0, sl, r1, asr #18
    b6c4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    b6c8:	0000071d 	andeq	r0, r0, sp, lsl r7
    b6cc:	8a094204 	bhi	25bee4 <__ccfg+0x23bf3c>
    b6d0:	10000000 	andne	r0, r0, r0
    b6d4:	0008040c 	andeq	r0, r8, ip, lsl #8
    b6d8:	09430400 	stmdbeq	r3, {sl}^
    b6dc:	0000008a 	andeq	r0, r0, sl, lsl #1
    b6e0:	02c60c14 	sbceq	r0, r6, #20, 24	; 0x1400
    b6e4:	44040000 	strmi	r0, [r4], #-0
    b6e8:	00008a09 	andeq	r8, r0, r9, lsl #20
    b6ec:	570c1800 	strpl	r1, [ip, -r0, lsl #16]
    b6f0:	04000004 	streq	r0, [r0], #-4
    b6f4:	008a0945 	addeq	r0, sl, r5, asr #18
    b6f8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    b6fc:	000006c7 	andeq	r0, r0, r7, asr #13
    b700:	8a094604 	bhi	25cf18 <__ccfg+0x23cf70>
    b704:	20000000 	andcs	r0, r0, r0
    b708:	00611100 	rsbeq	r1, r1, r0, lsl #2
    b70c:	01080000 	mrseq	r0, (UNDEF: 8)
    b710:	89084f04 	stmdbhi	r8, {r2, r8, r9, sl, fp, lr}
    b714:	0c000002 	stceq	0, cr0, [r0], {2}
    b718:	00000974 	andeq	r0, r0, r4, ror r9
    b71c:	890a5004 	stmdbhi	sl, {r2, ip, lr}
    b720:	00000002 	andeq	r0, r0, r2
    b724:	0008c00c 	andeq	ip, r8, ip
    b728:	09510400 	ldmdbeq	r1, {sl}^
    b72c:	00000289 	andeq	r0, r0, r9, lsl #5
    b730:	09dd1280 	ldmibeq	sp, {r7, r9, ip}^
    b734:	53040000 	movwpl	r0, #16384	; 0x4000
    b738:	00012d0a 	andeq	r2, r1, sl, lsl #26
    b73c:	12010000 	andne	r0, r1, #0
    b740:	00000a2b 	andeq	r0, r0, fp, lsr #20
    b744:	2d0a5604 	stccs	6, cr5, [sl, #-16]
    b748:	04000001 	streq	r0, [r0], #-1
    b74c:	2b090001 	blcs	24b758 <__ccfg+0x22b7b0>
    b750:	99000001 	stmdbls	r0, {r0}
    b754:	0a000002 	beq	b764 <__exidx_end+0x6834>
    b758:	00000091 	muleq	r0, r1, r0
    b75c:	8a11001f 	bhi	44b7e0 <__ccfg+0x42b838>
    b760:	90000007 	andls	r0, r0, r7
    b764:	08620401 	stmdaeq	r2!, {r0, sl}^
    b768:	000002dc 	ldrdeq	r0, [r0], -ip
    b76c:	000a400c 	andeq	r4, sl, ip
    b770:	12630400 	rsbne	r0, r3, #0, 8
    b774:	000002dc 	ldrdeq	r0, [r0], -ip
    b778:	04660c00 	strbteq	r0, [r6], #-3072	; 0xfffff400
    b77c:	64040000 	strvs	r0, [r4], #-0
    b780:	00008a06 	andeq	r8, r0, r6, lsl #20
    b784:	730c0400 	movwvc	r0, #50176	; 0xc400
    b788:	04000002 	streq	r0, [r0], #-2
    b78c:	02e20966 	rsceq	r0, r2, #1671168	; 0x198000
    b790:	0c080000 	stceq	0, cr0, [r8], {-0}
    b794:	00000061 	andeq	r0, r0, r1, rrx
    b798:	441e6704 	ldrmi	r6, [lr], #-1796	; 0xfffff8fc
    b79c:	88000002 	stmdahi	r0, {r1}
    b7a0:	99041000 	stmdbls	r4, {ip}
    b7a4:	09000002 	stmdbeq	r0, {r1}
    b7a8:	000002f2 	strdeq	r0, [r0], -r2
    b7ac:	000002f2 	strdeq	r0, [r0], -r2
    b7b0:	0000910a 	andeq	r9, r0, sl, lsl #2
    b7b4:	10001f00 	andne	r1, r0, r0, lsl #30
    b7b8:	0002f804 	andeq	pc, r2, r4, lsl #16
    b7bc:	0e011300 	cdpeq	3, 0, cr1, cr1, cr0, {0}
    b7c0:	0000093e 	andeq	r0, r0, lr, lsr r9
    b7c4:	087a0408 	ldmdaeq	sl!, {r3, sl}^
    b7c8:	00000322 	andeq	r0, r0, r2, lsr #6
    b7cc:	0006040c 	andeq	r0, r6, ip, lsl #8
    b7d0:	117b0400 	cmnne	fp, r0, lsl #8
    b7d4:	00000322 	andeq	r0, r0, r2, lsr #6
    b7d8:	18cf0c00 	stmiane	pc, {sl, fp}^	; <UNPREDICTABLE>
    b7dc:	7c040000 	stcvc	0, cr0, [r4], {-0}
    b7e0:	00008a06 	andeq	r8, r0, r6, lsl #20
    b7e4:	10000400 	andne	r0, r0, r0, lsl #8
    b7e8:	00005104 	andeq	r5, r0, r4, lsl #2
    b7ec:	03b60e00 			; <UNDEFINED> instruction: 0x03b60e00
    b7f0:	04680000 	strbteq	r0, [r8], #-0
    b7f4:	046b08ba 	strbteq	r0, [fp], #-2234	; 0xfffff746
    b7f8:	5f0f0000 	svcpl	0x000f0000
    b7fc:	bb040070 	bllt	10b9c4 <__ccfg+0xeba1c>
    b800:	00032212 	andeq	r2, r3, r2, lsl r2
    b804:	5f0f0000 	svcpl	0x000f0000
    b808:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
    b80c:	00008a07 	andeq	r8, r0, r7, lsl #20
    b810:	5f0f0400 	svcpl	0x000f0400
    b814:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
    b818:	00008a07 	andeq	r8, r0, r7, lsl #20
    b81c:	e90c0800 	stmdb	ip, {fp}
    b820:	04000001 	streq	r0, [r0], #-1
    b824:	003009be 	ldrhteq	r0, [r0], -lr
    b828:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    b82c:	00000662 	andeq	r0, r0, r2, ror #12
    b830:	3009bf04 	andcc	fp, r9, r4, lsl #30
    b834:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    b838:	66625f0f 	strbtvs	r5, [r2], -pc, lsl #30
    b83c:	11c00400 	bicne	r0, r0, r0, lsl #8
    b840:	000002fa 	strdeq	r0, [r0], -sl
    b844:	01e00c10 	mvneq	r0, r0, lsl ip
    b848:	c1040000 	mrsgt	r0, (UNDEF: 4)
    b84c:	00008a07 	andeq	r8, r0, r7, lsl #20
    b850:	780c1800 	stmdavc	ip, {fp, ip}
    b854:	04000002 	streq	r0, [r0], #-2
    b858:	012b0ac8 	smlawteq	fp, r8, sl, r0
    b85c:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    b860:	0000185f 	andeq	r1, r0, pc, asr r8
    b864:	f01dca04 			; <UNDEFINED> instruction: 0xf01dca04
    b868:	20000005 	andcs	r0, r0, r5
    b86c:	0018260c 	andseq	r2, r8, ip, lsl #12
    b870:	1dcc0400 	cfstrdne	mvd0, [ip]
    b874:	0000061b 	andeq	r0, r0, fp, lsl r6
    b878:	0a510c24 	beq	144e910 <__ccfg+0x142e968>
    b87c:	cf040000 	svcgt	0x00040000
    b880:	0006400d 	andeq	r4, r6, sp
    b884:	140c2800 	strne	r2, [ip], #-2048	; 0xfffff800
    b888:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    b88c:	065b09d0 			; <UNDEFINED> instruction: 0x065b09d0
    b890:	0f2c0000 	svceq	0x002c0000
    b894:	0062755f 	rsbeq	r7, r2, pc, asr r5
    b898:	fa11d304 	blx	4804b0 <__ccfg+0x460508>
    b89c:	30000002 	andcc	r0, r0, r2
    b8a0:	70755f0f 	rsbsvc	r5, r5, pc, lsl #30
    b8a4:	12d40400 	sbcsne	r0, r4, #0, 8
    b8a8:	00000322 	andeq	r0, r0, r2, lsr #6
    b8ac:	755f0f38 	ldrbvc	r0, [pc, #-3896]	; a97c <__exidx_end+0x5a4c>
    b8b0:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
    b8b4:	00008a07 	andeq	r8, r0, r7, lsl #20
    b8b8:	680c3c00 	stmdavs	ip, {sl, fp, ip, sp}
    b8bc:	0400000a 	streq	r0, [r0], #-10
    b8c0:	066111d8 			; <UNDEFINED> instruction: 0x066111d8
    b8c4:	0c400000 	mareq	acc0, r0, r0
    b8c8:	000009f7 	strdeq	r0, [r0], -r7
    b8cc:	7111d904 	tstvc	r1, r4, lsl #18
    b8d0:	43000006 	movwmi	r0, #6
    b8d4:	626c5f0f 	rsbvs	r5, ip, #15, 30	; 0x3c
    b8d8:	11dc0400 	bicsne	r0, ip, r0, lsl #8
    b8dc:	000002fa 	strdeq	r0, [r0], -sl
    b8e0:	08570c44 	ldmdaeq	r7, {r2, r6, sl, fp}^
    b8e4:	df040000 	svcle	0x00040000
    b8e8:	00008a07 	andeq	r8, r0, r7, lsl #20
    b8ec:	030c4c00 	movweq	r4, #52224	; 0xcc00
    b8f0:	04000004 	streq	r0, [r0], #-4
    b8f4:	00b10ae0 	adcseq	r0, r1, r0, ror #21
    b8f8:	0c500000 	mraeq	r0, r0, acc0
    b8fc:	0000432e 	andeq	r4, r0, lr, lsr #6
    b900:	8a12e304 	bhi	4c4518 <__ccfg+0x4a4570>
    b904:	54000004 	strpl	r0, [r0], #-4
    b908:	00086f0c 	andeq	r6, r8, ip, lsl #30
    b90c:	0ce70400 	cfstrdeq	mvd0, [r7]
    b910:	00000145 	andeq	r0, r0, r5, asr #2
    b914:	07920c58 			; <UNDEFINED> instruction: 0x07920c58
    b918:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
    b91c:	00011f0e 	andeq	r1, r1, lr, lsl #30
    b920:	230c5c00 	movwcs	r5, #52224	; 0xcc00
    b924:	0400000a 	streq	r0, [r0], #-10
    b928:	008a09ea 	addeq	r0, sl, sl, ror #19
    b92c:	00640000 	rsbeq	r0, r4, r0
    b930:	008a0114 	addeq	r0, sl, r4, lsl r1
    b934:	048a0000 	streq	r0, [sl], #0
    b938:	8a150000 	bhi	54b940 <__ccfg+0x52b998>
    b93c:	15000004 	strne	r0, [r0, #-4]
    b940:	0000012b 	andeq	r0, r0, fp, lsr #2
    b944:	0005de15 	andeq	sp, r5, r5, lsl lr
    b948:	008a1500 	addeq	r1, sl, r0, lsl #10
    b94c:	10000000 	andne	r0, r0, r0
    b950:	00049504 	andeq	r9, r4, r4, lsl #10
    b954:	048a0400 	streq	r0, [sl], #1024	; 0x400
    b958:	6c160000 	ldcvs	0, cr0, [r6], {-0}
    b95c:	28000043 	stmdacs	r0, {r0, r1, r6}
    b960:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
    b964:	0005de08 	andeq	sp, r5, r8, lsl #28
    b968:	06f81700 	ldrbteq	r1, [r8], r0, lsl #14
    b96c:	67040000 	strvs	r0, [r4, -r0]
    b970:	008a0702 	addeq	r0, sl, r2, lsl #14
    b974:	17000000 	strne	r0, [r0, -r0]
    b978:	000005d2 	ldrdeq	r0, [r0], -r2
    b97c:	0b026c04 	bleq	a6994 <__ccfg+0x869ec>
    b980:	000006cd 	andeq	r0, r0, sp, asr #13
    b984:	02551704 	subseq	r1, r5, #4, 14	; 0x100000
    b988:	6c040000 	stcvs	0, cr0, [r4], {-0}
    b98c:	06cd1402 	strbeq	r1, [sp], r2, lsl #8
    b990:	17080000 	strne	r0, [r8, -r0]
    b994:	00000a57 	andeq	r0, r0, r7, asr sl
    b998:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
    b99c:	000006cd 	andeq	r0, r0, sp, asr #13
    b9a0:	0461170c 	strbteq	r1, [r1], #-1804	; 0xfffff8f4
    b9a4:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    b9a8:	008a0802 	addeq	r0, sl, r2, lsl #16
    b9ac:	17100000 	ldrne	r0, [r0, -r0]
    b9b0:	00000413 	andeq	r0, r0, r3, lsl r4
    b9b4:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
    b9b8:	000008cd 	andeq	r0, r0, sp, asr #17
    b9bc:	0a0a1714 	beq	291614 <__ccfg+0x27166c>
    b9c0:	72040000 	andvc	r0, r4, #0
    b9c4:	008a0702 	addeq	r0, sl, r2, lsl #14
    b9c8:	17300000 	ldrne	r0, [r0, -r0]!
    b9cc:	00003d5c 	andeq	r3, r0, ip, asr sp
    b9d0:	16027304 	strne	r7, [r2], -r4, lsl #6
    b9d4:	000008e3 	andeq	r0, r0, r3, ror #17
    b9d8:	05a51734 	streq	r1, [r5, #1844]!	; 0x734
    b9dc:	75040000 	strvc	r0, [r4, #-0]
    b9e0:	008a0702 	addeq	r0, sl, r2, lsl #14
    b9e4:	17380000 	ldrne	r0, [r8, -r0]!
    b9e8:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    b9ec:	0a027704 	beq	a9604 <__ccfg+0x8965c>
    b9f0:	000008f5 	strdeq	r0, [r0], -r5
    b9f4:	02d0173c 	sbcseq	r1, r0, #60, 14	; 0xf00000
    b9f8:	7a040000 	bvc	10ba00 <__ccfg+0xeba58>
    b9fc:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    ba00:	17400000 	strbne	r0, [r0, -r0]
    ba04:	0000037c 	andeq	r0, r0, ip, ror r3
    ba08:	07027b04 	streq	r7, [r2, -r4, lsl #22]
    ba0c:	0000008a 	andeq	r0, r0, sl, lsl #1
    ba10:	04b61744 	ldrteq	r1, [r6], #1860	; 0x744
    ba14:	7c040000 	stcvc	0, cr0, [r4], {-0}
    ba18:	01ab1302 			; <UNDEFINED> instruction: 0x01ab1302
    ba1c:	17480000 	strbne	r0, [r8, -r0]
    ba20:	0000060a 	andeq	r0, r0, sl, lsl #12
    ba24:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
    ba28:	000008fb 	strdeq	r0, [r0], -fp
    ba2c:	083d174c 	ldmdaeq	sp!, {r2, r3, r6, r8, r9, sl, ip}
    ba30:	80040000 	andhi	r0, r4, r0
    ba34:	008a0702 	addeq	r0, sl, r2, lsl #14
    ba38:	17500000 	ldrbne	r0, [r0, -r0]
    ba3c:	000008d4 	ldrdeq	r0, [r0], -r4
    ba40:	09028104 	stmdbeq	r2, {r2, r8, pc}
    ba44:	000005de 	ldrdeq	r0, [r0], -lr
    ba48:	08ee1754 	stmiaeq	lr!, {r2, r4, r6, r8, r9, sl, ip}^
    ba4c:	a4040000 	strge	r0, [r4], #-0
    ba50:	08a80702 	stmiaeq	r8!, {r1, r8, r9, sl}
    ba54:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
    ba58:	0000078a 	andeq	r0, r0, sl, lsl #15
    ba5c:	1302a804 	movwne	sl, #10244	; 0x2804
    ba60:	000002dc 	ldrdeq	r0, [r0], -ip
    ba64:	32180148 	andscc	r0, r8, #72, 2
    ba68:	04000005 	streq	r0, [r0], #-5
    ba6c:	991202a9 	ldmdbls	r2, {r0, r3, r5, r7, r9}
    ba70:	4c000002 	stcmi	0, cr0, [r0], {2}
    ba74:	05191801 	ldreq	r1, [r9, #-2049]	; 0xfffff7ff
    ba78:	ad040000 	stcge	0, cr0, [r4, #-0]
    ba7c:	090d0c02 	stmdbeq	sp, {r1, sl, fp}
    ba80:	02dc0000 	sbcseq	r0, ip, #0
    ba84:	00095118 	andeq	r5, r9, r8, lsl r1
    ba88:	02b20400 	adcseq	r0, r2, #0, 8
    ba8c:	00068e10 	andeq	r8, r6, r0, lsl lr
    ba90:	1802e000 	stmdane	r2, {sp, lr, pc}
    ba94:	000007cb 	andeq	r0, r0, fp, asr #15
    ba98:	0a02b404 	beq	b8ab0 <__ccfg+0x98b08>
    ba9c:	00000919 	andeq	r0, r0, r9, lsl r9
    baa0:	100002ec 	andne	r0, r0, ip, ror #5
    baa4:	0005e404 	andeq	lr, r5, r4, lsl #8
    baa8:	08010200 	stmdaeq	r1, {r9}
    baac:	000008e5 	andeq	r0, r0, r5, ror #17
    bab0:	0005e404 	andeq	lr, r5, r4, lsl #8
    bab4:	6b041000 	blvs	10fabc <__ccfg+0xefb14>
    bab8:	14000004 	strne	r0, [r0], #-4
    babc:	00008a01 	andeq	r8, r0, r1, lsl #20
    bac0:	00061500 	andeq	r1, r6, r0, lsl #10
    bac4:	048a1500 	streq	r1, [sl], #1280	; 0x500
    bac8:	2b150000 	blcs	54bad0 <__ccfg+0x52bb28>
    bacc:	15000001 	strne	r0, [r0, #-1]
    bad0:	00000615 	andeq	r0, r0, r5, lsl r6
    bad4:	00008a15 	andeq	r8, r0, r5, lsl sl
    bad8:	04100000 	ldreq	r0, [r0], #-0
    badc:	000005eb 	andeq	r0, r0, fp, ror #11
    bae0:	05f60410 	ldrbeq	r0, [r6, #1040]!	; 0x410
    bae4:	01140000 	tsteq	r4, r0
    bae8:	000000bd 	strheq	r0, [r0], -sp
    baec:	00000640 	andeq	r0, r0, r0, asr #12
    baf0:	00048a15 	andeq	r8, r4, r5, lsl sl
    baf4:	012b1500 			; <UNDEFINED> instruction: 0x012b1500
    baf8:	bd150000 	ldclt	0, cr0, [r5, #-0]
    bafc:	15000000 	strne	r0, [r0, #-0]
    bb00:	0000008a 	andeq	r0, r0, sl, lsl #1
    bb04:	21041000 	mrscs	r1, (UNDEF: 4)
    bb08:	14000006 	strne	r0, [r0], #-6
    bb0c:	00008a01 	andeq	r8, r0, r1, lsl #20
    bb10:	00065b00 	andeq	r5, r6, r0, lsl #22
    bb14:	048a1500 	streq	r1, [sl], #1280	; 0x500
    bb18:	2b150000 	blcs	54bb20 <__ccfg+0x52bb78>
    bb1c:	00000001 	andeq	r0, r0, r1
    bb20:	06460410 			; <UNDEFINED> instruction: 0x06460410
    bb24:	51090000 	mrspl	r0, (UNDEF: 9)
    bb28:	71000000 	mrsvc	r0, (UNDEF: 0)
    bb2c:	0a000006 	beq	bb4c <__exidx_end+0x6c1c>
    bb30:	00000091 	muleq	r0, r1, r0
    bb34:	51090002 	tstpl	r9, r2
    bb38:	81000000 	mrshi	r0, (UNDEF: 0)
    bb3c:	0a000006 	beq	bb5c <__exidx_end+0x6c2c>
    bb40:	00000091 	muleq	r0, r1, r0
    bb44:	f1060000 	cps	#0
    bb48:	04000003 	streq	r0, [r0], #-3
    bb4c:	281a0124 	ldmdacs	sl, {r2, r5, r8}
    bb50:	19000003 	stmdbne	r0, {r0, r1}
    bb54:	00004382 	andeq	r4, r0, r2, lsl #7
    bb58:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
    bb5c:	0006c708 	andeq	ip, r6, r8, lsl #14
    bb60:	0a401700 	beq	1011768 <__ccfg+0xff17c0>
    bb64:	2a040000 	bcs	10bb6c <__ccfg+0xebbc4>
    bb68:	06c71101 	strbeq	r1, [r7], r1, lsl #2
    bb6c:	17000000 	strne	r0, [r0, -r0]
    bb70:	0000088f 	andeq	r0, r0, pc, lsl #17
    bb74:	07012b04 	streq	r2, [r1, -r4, lsl #22]
    bb78:	0000008a 	andeq	r0, r0, sl, lsl #1
    bb7c:	05911704 	ldreq	r1, [r1, #1796]	; 0x704
    bb80:	2c040000 	stccs	0, cr0, [r4], {-0}
    bb84:	06cd0b01 	strbeq	r0, [sp], r1, lsl #22
    bb88:	00080000 	andeq	r0, r8, r0
    bb8c:	068e0410 	pkhbteq	r0, lr, r0, lsl #8
    bb90:	04100000 	ldreq	r0, [r0], #-0
    bb94:	00000681 	andeq	r0, r0, r1, lsl #13
    bb98:	00036819 	andeq	r6, r3, r9, lsl r8
    bb9c:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
    bba0:	070c0801 	streq	r0, [ip, -r1, lsl #16]
    bba4:	88170000 	ldmdahi	r7, {}	; <UNPREDICTABLE>
    bba8:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    bbac:	0c120145 	ldfeqs	f0, [r2], {69}	; 0x45
    bbb0:	00000007 	andeq	r0, r0, r7
    bbb4:	00061c17 	andeq	r1, r6, r7, lsl ip
    bbb8:	01460400 	cmpeq	r6, r0, lsl #8
    bbbc:	00070c12 	andeq	r0, r7, r2, lsl ip
    bbc0:	2d170600 	ldccs	6, cr0, [r7, #-0]
    bbc4:	04000010 	streq	r0, [r0], #-16
    bbc8:	64120147 	ldrvs	r0, [r2], #-327	; 0xfffffeb9
    bbcc:	0c000000 	stceq	0, cr0, [r0], {-0}
    bbd0:	00640900 	rsbeq	r0, r4, r0, lsl #18
    bbd4:	071c0000 	ldreq	r0, [ip, -r0]
    bbd8:	910a0000 	mrsls	r0, (UNDEF: 10)
    bbdc:	02000000 	andeq	r0, r0, #0
    bbe0:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
    bbe4:	31070285 	smlabbcc	r7, r5, r2, r0
    bbe8:	17000008 	strne	r0, [r0, -r8]
    bbec:	000009fd 	strdeq	r0, [r0], -sp
    bbf0:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
    bbf4:	00000091 	muleq	r0, r1, r0
    bbf8:	09591700 	ldmdbeq	r9, {r8, r9, sl, ip}^
    bbfc:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    bc00:	05de1202 	ldrbeq	r1, [lr, #514]	; 0x202
    bc04:	17040000 	strne	r0, [r4, -r0]
    bc08:	000003a9 	andeq	r0, r0, r9, lsr #7
    bc0c:	10028904 	andne	r8, r2, r4, lsl #18
    bc10:	00000831 	andeq	r0, r0, r1, lsr r8
    bc14:	081c1708 	ldmdaeq	ip, {r3, r8, r9, sl, ip}
    bc18:	8a040000 	bhi	10bc20 <__ccfg+0xebc78>
    bc1c:	01c11702 	biceq	r1, r1, r2, lsl #14
    bc20:	17240000 	strne	r0, [r4, -r0]!
    bc24:	000005d9 	ldrdeq	r0, [r0], -r9
    bc28:	0f028b04 	svceq	0x00028b04
    bc2c:	0000008a 	andeq	r0, r0, sl, lsl #1
    bc30:	0a3b1748 	beq	ed1958 <__ccfg+0xeb19b0>
    bc34:	8c040000 	stchi	0, cr0, [r4], {-0}
    bc38:	00832c02 	addeq	r2, r3, r2, lsl #24
    bc3c:	17500000 	ldrbne	r0, [r0, -r0]
    bc40:	00000085 	andeq	r0, r0, r5, lsl #1
    bc44:	1a028d04 	bne	af05c <__ccfg+0x8f0b4>
    bc48:	000006d3 	ldrdeq	r0, [r0], -r3
    bc4c:	04ee1758 	strbteq	r1, [lr], #1880	; 0x758
    bc50:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
    bc54:	011f1602 	tsteq	pc, r2, lsl #12
    bc58:	17680000 	strbne	r0, [r8, -r0]!
    bc5c:	00000966 	andeq	r0, r0, r6, ror #18
    bc60:	16028f04 	strne	r8, [r2], -r4, lsl #30
    bc64:	0000011f 	andeq	r0, r0, pc, lsl r1
    bc68:	006f1770 	rsbeq	r1, pc, r0, ror r7	; <UNPREDICTABLE>
    bc6c:	90040000 	andls	r0, r4, r0
    bc70:	011f1602 	tsteq	pc, r2, lsl #12
    bc74:	17780000 	ldrbne	r0, [r8, -r0]!
    bc78:	0000084d 	andeq	r0, r0, sp, asr #16
    bc7c:	10029104 	andne	r9, r2, r4, lsl #2
    bc80:	00000841 	andeq	r0, r0, r1, asr #16
    bc84:	03861780 	orreq	r1, r6, #128, 14	; 0x2000000
    bc88:	92040000 	andls	r0, r4, #0
    bc8c:	08511002 	ldmdaeq	r1, {r1, ip}^
    bc90:	17880000 	strne	r0, [r8, r0]
    bc94:	00000911 	andeq	r0, r0, r1, lsl r9
    bc98:	0f029304 	svceq	0x00029304
    bc9c:	0000008a 	andeq	r0, r0, sl, lsl #1
    bca0:	022917a0 	eoreq	r1, r9, #160, 14	; 0x2800000
    bca4:	94040000 	strls	r0, [r4], #-0
    bca8:	011f1602 	tsteq	pc, r2, lsl #12
    bcac:	17a40000 	strne	r0, [r4, r0]!
    bcb0:	00000523 	andeq	r0, r0, r3, lsr #10
    bcb4:	16029504 	strne	r9, [r2], -r4, lsl #10
    bcb8:	0000011f 	andeq	r0, r0, pc, lsl r1
    bcbc:	046b17ac 	strbteq	r1, [fp], #-1964	; 0xfffff854
    bcc0:	96040000 	strls	r0, [r4], -r0
    bcc4:	011f1602 	tsteq	pc, r2, lsl #12
    bcc8:	17b40000 	ldrne	r0, [r4, r0]!
    bccc:	00000653 	andeq	r0, r0, r3, asr r6
    bcd0:	16029704 	strne	r9, [r2], -r4, lsl #14
    bcd4:	0000011f 	andeq	r0, r0, pc, lsl r1
    bcd8:	04dd17bc 	ldrbeq	r1, [sp], #1980	; 0x7bc
    bcdc:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    bce0:	011f1602 	tsteq	pc, r2, lsl #12
    bce4:	17c40000 	strbne	r0, [r4, r0]
    bce8:	000006f6 	strdeq	r0, [r0], -r6
    bcec:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
    bcf0:	0000008a 	andeq	r0, r0, sl, lsl #1
    bcf4:	e40900cc 	str	r0, [r9], #-204	; 0xffffff34
    bcf8:	41000005 	tstmi	r0, r5
    bcfc:	0a000008 	beq	bd24 <__exidx_end+0x6df4>
    bd00:	00000091 	muleq	r0, r1, r0
    bd04:	e4090019 	str	r0, [r9], #-25	; 0xffffffe7
    bd08:	51000005 	tstpl	r0, r5
    bd0c:	0a000008 	beq	bd34 <__exidx_end+0x6e04>
    bd10:	00000091 	muleq	r0, r1, r0
    bd14:	e4090007 	str	r0, [r9], #-7
    bd18:	61000005 	tstvs	r0, r5
    bd1c:	0a000008 	beq	bd44 <__exidx_end+0x6e14>
    bd20:	00000091 	muleq	r0, r1, r0
    bd24:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
    bd28:	07029e04 	streq	r9, [r2, -r4, lsl #28]
    bd2c:	00000888 	andeq	r0, r0, r8, lsl #17
    bd30:	00036117 	andeq	r6, r3, r7, lsl r1
    bd34:	02a10400 	adceq	r0, r1, #0, 8
    bd38:	0008881b 	andeq	r8, r8, fp, lsl r8
    bd3c:	5f170000 	svcpl	0x00170000
    bd40:	0400000a 	streq	r0, [r0], #-10
    bd44:	981802a2 	ldmdals	r8, {r1, r5, r7, r9}
    bd48:	78000008 	stmdavc	r0, {r3}
    bd4c:	03220900 			; <UNDEFINED> instruction: 0x03220900
    bd50:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    bd54:	910a0000 	mrsls	r0, (UNDEF: 10)
    bd58:	1d000000 	stcne	0, cr0, [r0, #-0]
    bd5c:	00910900 	addseq	r0, r1, r0, lsl #18
    bd60:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
    bd64:	910a0000 	mrsls	r0, (UNDEF: 10)
    bd68:	1d000000 	stcne	0, cr0, [r0, #-0]
    bd6c:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
    bd70:	cd030283 	sfmgt	f0, 4, [r3, #-524]	; 0xfffffdf4
    bd74:	1c000008 	stcne	0, cr0, [r0], {8}
    bd78:	0000436c 	andeq	r4, r0, ip, ror #6
    bd7c:	0b029a04 	bleq	b2594 <__ccfg+0x925ec>
    bd80:	0000071c 	andeq	r0, r0, ip, lsl r7
    bd84:	00082b1c 	andeq	r2, r8, ip, lsl fp
    bd88:	02a30400 	adceq	r0, r3, #0, 8
    bd8c:	0008610b 	andeq	r6, r8, fp, lsl #2
    bd90:	e4090000 	str	r0, [r9], #-0
    bd94:	dd000005 	stcle	0, cr0, [r0, #-20]	; 0xffffffec
    bd98:	0a000008 	beq	bdc0 <__exidx_end+0x6e90>
    bd9c:	00000091 	muleq	r0, r1, r0
    bda0:	461d0018 			; <UNDEFINED> instruction: 0x461d0018
    bda4:	0100000a 	tsteq	r0, sl
    bda8:	08dd0410 	ldmeq	sp, {r4, sl}^
    bdac:	011e0000 	tsteq	lr, r0
    bdb0:	000008f5 	strdeq	r0, [r0], -r5
    bdb4:	00048a15 	andeq	r8, r4, r5, lsl sl
    bdb8:	04100000 	ldreq	r0, [r0], #-0
    bdbc:	000008e9 	andeq	r0, r0, r9, ror #17
    bdc0:	01ab0410 			; <UNDEFINED> instruction: 0x01ab0410
    bdc4:	011e0000 	tsteq	lr, r0
    bdc8:	0000090d 	andeq	r0, r0, sp, lsl #18
    bdcc:	00008a15 	andeq	r8, r0, r5, lsl sl
    bdd0:	04100000 	ldreq	r0, [r0], #-0
    bdd4:	00000913 	andeq	r0, r0, r3, lsl r9
    bdd8:	09010410 	stmdbeq	r1, {r4, sl}
    bddc:	81090000 	mrshi	r0, (UNDEF: 9)
    bde0:	29000006 	stmdbcs	r0, {r1, r2}
    bde4:	0a000009 	beq	be10 <__exidx_end+0x6ee0>
    bde8:	00000091 	muleq	r0, r1, r0
    bdec:	f81f0002 			; <UNDEFINED> instruction: 0xf81f0002
    bdf0:	04000007 	streq	r0, [r0], #-7
    bdf4:	8a170333 	bhi	5ccac8 <__ccfg+0x5acb20>
    bdf8:	01000004 	tsteq	r0, r4
    bdfc:	07f11f01 	ldrbeq	r1, [r1, r1, lsl #30]!
    be00:	34040000 	strcc	r0, [r4], #-0
    be04:	04901d03 	ldreq	r1, [r0], #3331	; 0xd03
    be08:	01010000 	mrseq	r0, (UNDEF: 1)
    be0c:	001fb003 	andseq	fp, pc, r3
    be10:	123b0600 	eorsne	r0, fp, #0, 12
    be14:	0000006b 	andeq	r0, r0, fp, rrx
    be18:	4006080b 	andmi	r0, r6, fp, lsl #16
    be1c:	00097709 	andeq	r7, r9, r9, lsl #14
    be20:	1ac70c00 	bne	ff1cee28 <_estack+0xdf1c9e28>
    be24:	41060000 	mrsmi	r0, (UNDEF: 6)
    be28:	0009770d 	andeq	r7, r9, sp, lsl #14
    be2c:	f70c0000 			; <UNDEFINED> instruction: 0xf70c0000
    be30:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    be34:	09770d42 	ldmdbeq	r7!, {r1, r6, r8, sl, fp}^
    be38:	00040000 	andeq	r0, r4, r0
    be3c:	00450410 	subeq	r0, r5, r0, lsl r4
    be40:	03030000 	movweq	r0, #12288	; 0x3000
    be44:	06000022 	streq	r0, [r0], -r2, lsr #32
    be48:	09530343 	ldmdbeq	r3, {r0, r1, r6, r8, r9}^
    be4c:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
    be50:	0700001d 	smladeq	r0, sp, r0, r0
    be54:	09952b3c 	ldmibeq	r5, {r2, r3, r4, r5, r8, r9, fp, sp}
    be58:	160e0000 	strne	r0, [lr], -r0
    be5c:	10000020 	andne	r0, r0, r0, lsr #32
    be60:	f1156f07 			; <UNDEFINED> instruction: 0xf1156f07
    be64:	0c000009 	stceq	0, cr0, [r0], {9}
    be68:	000019f6 	strdeq	r1, [r0], -r6
    be6c:	580d7007 	stmdapl	sp, {r0, r1, r2, ip, sp, lr}
    be70:	00000000 	andeq	r0, r0, r0
    be74:	0005970c 	andeq	r9, r5, ip, lsl #14
    be78:	0d710700 	ldcleq	7, cr0, [r1, #-0]
    be7c:	00000058 	andeq	r0, r0, r8, asr r0
    be80:	1d560c02 	ldclne	12, cr0, [r6, #-8]
    be84:	74070000 	strvc	r0, [r7], #-0
    be88:	000b2813 	andeq	r2, fp, r3, lsl r8
    be8c:	ee0c0400 	cfcpys	mvf0, mvf12
    be90:	0700001a 	smladeq	r0, sl, r0, r0
    be94:	09470c75 	stmdbeq	r7, {r0, r2, r4, r5, r6, sl, fp}^
    be98:	0c080000 	stceq	0, cr0, [r8], {-0}
    be9c:	00001d86 	andeq	r1, r0, r6, lsl #27
    bea0:	b4067d07 	strlt	r7, [r6], #-3335	; 0xfffff2f9
    bea4:	0c00000a 	stceq	0, cr0, [r0], {10}
    bea8:	001cd00c 	andseq	sp, ip, ip
    beac:	06810700 	streq	r0, [r1], r0, lsl #14
    beb0:	00000afe 	strdeq	r0, [r0], -lr
    beb4:	6203000d 	andvs	r0, r3, #13
    beb8:	0700001b 	smladeq	r0, fp, r0, r0
    bebc:	09fd2a3f 	ldmibeq	sp!, {r0, r1, r2, r3, r4, r5, r9, fp, sp}^
    bec0:	550e0000 	strpl	r0, [lr, #-0]
    bec4:	1800001b 	stmdane	r0, {r0, r1, r3, r4}
    bec8:	b415e007 	ldrlt	lr, [r5], #-7
    becc:	0c00000a 	stceq	0, cr0, [r0], {10}
    bed0:	000019f6 	strdeq	r1, [r0], -r6
    bed4:	580de107 	stmdapl	sp, {r0, r1, r2, r8, sp, lr, pc}
    bed8:	00000000 	andeq	r0, r0, r0
    bedc:	0005970c 	andeq	r9, r5, ip, lsl #14
    bee0:	0de20700 	stcleq	7, cr0, [r2]
    bee4:	00000058 	andeq	r0, r0, r8, asr r0
    bee8:	1d560c02 	ldclne	12, cr0, [r6, #-8]
    beec:	e5070000 	str	r0, [r7, #-0]
    bef0:	000b2813 	andeq	r2, fp, r3, lsl r8
    bef4:	ee0c0400 	cfcpys	mvf0, mvf12
    bef8:	0700001a 	smladeq	r0, sl, r0, r0
    befc:	09470ce6 	stmdbeq	r7, {r1, r2, r5, r6, r7, sl, fp}^
    bf00:	0c080000 	stceq	0, cr0, [r8], {-0}
    bf04:	00001d86 	andeq	r1, r0, r6, lsl #27
    bf08:	3406ee07 	strcc	lr, [r6], #-3591	; 0xfffff1f9
    bf0c:	0c00000b 	stceq	0, cr0, [r0], {11}
    bf10:	001cd00c 	andseq	sp, ip, ip
    bf14:	06f20700 	ldrbteq	r0, [r2], r0, lsl #14
    bf18:	00000b7e 	andeq	r0, r0, lr, ror fp
    bf1c:	21290c0d 			; <UNDEFINED> instruction: 0x21290c0d
    bf20:	f3070000 	vhadd.u8	d0, d7, d0
    bf24:	0000580d 	andeq	r5, r0, sp, lsl #16
    bf28:	790c0e00 	stmdbvc	ip, {r9, sl, fp}
    bf2c:	0700001e 	smladeq	r0, lr, r0, r0
    bf30:	00580df4 	ldrsheq	r0, [r8], #-212	; 0xffffff2c
    bf34:	0c100000 	ldceq	0, cr0, [r0], {-0}
    bf38:	00001b95 	muleq	r0, r5, fp
    bf3c:	a806fa07 	stmdage	r6, {r0, r1, r2, r9, fp, ip, sp, lr, pc}
    bf40:	1200000b 	andne	r0, r0, #11
    bf44:	001d360c 	andseq	r3, sp, ip, lsl #12
    bf48:	0cfb0700 	ldcleq	7, cr0, [fp]
    bf4c:	00000045 	andeq	r0, r0, r5, asr #32
    bf50:	20850c13 	addcs	r0, r5, r3, lsl ip
    bf54:	fc070000 	stc2	0, cr0, [r7], {-0}
    bf58:	0000450c 	andeq	r4, r0, ip, lsl #10
    bf5c:	8e0c1400 	cfcpyshi	mvf1, mvf12
    bf60:	07000020 	streq	r0, [r0, -r0, lsr #32]
    bf64:	00450cfd 	strdeq	r0, [r5], #-205	; 0xffffff33
    bf68:	0c150000 	ldceq	0, cr0, [r5], {-0}
    bf6c:	00002097 	muleq	r0, r7, r0
    bf70:	580dfe07 	stmdapl	sp, {r0, r1, r2, r9, sl, fp, ip, sp, lr, pc}
    bf74:	16000000 	strne	r0, [r0], -r0
    bf78:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    bf7c:	0afe0476 	beq	fff8d15c <_estack+0xdff8815c>
    bf80:	49200000 	stmdbmi	r0!, {}	; <UNPREDICTABLE>
    bf84:	07000022 	streq	r0, [r0, -r2, lsr #32]
    bf88:	00450f77 	subeq	r0, r5, r7, ror pc
    bf8c:	04010000 	streq	r0, [r1], #-0
    bf90:	d7200004 	strle	r0, [r0, -r4]!
    bf94:	0700001b 	smladeq	r0, fp, r0, r0
    bf98:	00450f78 	subeq	r0, r5, r8, ror pc
    bf9c:	01010000 	mrseq	r0, (UNDEF: 1)
    bfa0:	97200003 	strls	r0, [r0, -r3]!
    bfa4:	0700001c 	smladeq	r0, ip, r0, r0
    bfa8:	00450f7a 	subeq	r0, r5, sl, ror pc
    bfac:	02010000 	andeq	r0, r1, #0
    bfb0:	65200001 	strvs	r0, [r0, #-1]!
    bfb4:	0700001a 	smladeq	r0, sl, r0, r0
    bfb8:	00450f7b 	subeq	r0, r5, fp, ror pc
    bfbc:	01010000 	mrseq	r0, (UNDEF: 1)
    bfc0:	0b000000 	bleq	bfc8 <__exidx_end+0x7098>
    bfc4:	047e0701 	ldrbteq	r0, [lr], #-1793	; 0xfffff8ff
    bfc8:	00000b28 	andeq	r0, r0, r8, lsr #22
    bfcc:	0020b320 	eoreq	fp, r0, r0, lsr #6
    bfd0:	0f7f0700 	svceq	0x007f0700
    bfd4:	00000045 	andeq	r0, r0, r5, asr #32
    bfd8:	00040401 	andeq	r0, r4, r1, lsl #8
    bfdc:	00220f20 	eoreq	r0, r2, r0, lsr #30
    bfe0:	0f800700 	svceq	0x00800700
    bfe4:	00000045 	andeq	r0, r0, r5, asr #32
    bfe8:	00000401 	andeq	r0, r0, r1, lsl #8
    bfec:	89041000 	stmdbhi	r4, {ip}
    bff0:	10000009 	andne	r0, r0, r9
    bff4:	00006b04 	andeq	r6, r0, r4, lsl #22
    bff8:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    bffc:	0b7e04e7 	bleq	1f8d3a0 <__ccfg+0x1f6d3f8>
    c000:	49200000 	stmdbmi	r0!, {}	; <UNPREDICTABLE>
    c004:	07000022 	streq	r0, [r0, -r2, lsr #32]
    c008:	00450fe8 	subeq	r0, r5, r8, ror #31
    c00c:	04010000 	streq	r0, [r1], #-0
    c010:	d7200004 	strle	r0, [r0, -r4]!
    c014:	0700001b 	smladeq	r0, fp, r0, r0
    c018:	00450fe9 	subeq	r0, r5, r9, ror #31
    c01c:	01010000 	mrseq	r0, (UNDEF: 1)
    c020:	97200003 	strls	r0, [r0, -r3]!
    c024:	0700001c 	smladeq	r0, ip, r0, r0
    c028:	00450feb 	subeq	r0, r5, fp, ror #31
    c02c:	02010000 	andeq	r0, r1, #0
    c030:	65200001 	strvs	r0, [r0, #-1]!
    c034:	0700001a 	smladeq	r0, sl, r0, r0
    c038:	00450fec 	subeq	r0, r5, ip, ror #31
    c03c:	01010000 	mrseq	r0, (UNDEF: 1)
    c040:	0b000000 	bleq	c048 <__exidx_end+0x7118>
    c044:	04ef0701 	strbteq	r0, [pc], #1793	; c04c <__exidx_end+0x711c>
    c048:	00000ba8 	andeq	r0, r0, r8, lsr #23
    c04c:	0020b320 	eoreq	fp, r0, r0, lsr #6
    c050:	0ff00700 	svceq	0x00f00700
    c054:	00000045 	andeq	r0, r0, r5, asr #32
    c058:	00040401 	andeq	r0, r4, r1, lsl #8
    c05c:	00220f20 	eoreq	r0, r2, r0, lsr #30
    c060:	0ff10700 	svceq	0x00f10700
    c064:	00000045 	andeq	r0, r0, r5, asr #32
    c068:	00000401 	andeq	r0, r0, r1, lsl #8
    c06c:	07010b00 	streq	r0, [r1, -r0, lsl #22]
    c070:	0bd204f5 	bleq	ff48d44c <_estack+0xdf48844c>
    c074:	c1200000 			; <UNDEFINED> instruction: 0xc1200000
    c078:	0700001b 	smladeq	r0, fp, r0, r0
    c07c:	00450ff6 	strdeq	r0, [r5], #-246	; 0xffffff0a
    c080:	01010000 	mrseq	r0, (UNDEF: 1)
    c084:	32200007 	eorcc	r0, r0, #7
    c088:	07000022 	streq	r0, [r0, -r2, lsr #32]
    c08c:	00450ff8 	strdeq	r0, [r5], #-248	; 0xffffff08
    c090:	06010000 	streq	r0, [r1], -r0
    c094:	10000001 	andne	r0, r0, r1
    c098:	00097d04 	andeq	r7, r9, r4, lsl #26
    c09c:	20fe0300 	rscscs	r0, lr, r0, lsl #6
    c0a0:	3d080000 	stccc	0, cr0, [r8, #-0]
    c0a4:	000be42f 	andeq	lr, fp, pc, lsr #8
    c0a8:	21100e00 	tstcs	r0, r0, lsl #28
    c0ac:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    c0b0:	0c741578 	cfldr64eq	mvdx1, [r4], #-480	; 0xfffffe20
    c0b4:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    c0b8:	08000019 	stmdaeq	r0, {r0, r3, r4}
    c0bc:	00580d79 	subseq	r0, r8, r9, ror sp
    c0c0:	0c000000 	stceq	0, cr0, [r0], {-0}
    c0c4:	00000597 	muleq	r0, r7, r5
    c0c8:	580d7a08 	stmdapl	sp, {r3, r9, fp, ip, sp, lr}
    c0cc:	02000000 	andeq	r0, r0, #0
    c0d0:	001d560c 	andseq	r5, sp, ip, lsl #12
    c0d4:	137d0800 	cmnne	sp, #0, 16
    c0d8:	00000b28 	andeq	r0, r0, r8, lsr #22
    c0dc:	1aee0c04 	bne	ffb8f0f4 <_estack+0xdfb8a0f4>
    c0e0:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    c0e4:	0009470c 	andeq	r4, r9, ip, lsl #14
    c0e8:	860c0800 	strhi	r0, [ip], -r0, lsl #16
    c0ec:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c0f0:	0e670686 	cdpeq	6, 6, cr0, cr7, cr6, {4}
    c0f4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c0f8:	00001cd0 	ldrdeq	r1, [r0], -r0
    c0fc:	b1068a08 	tstlt	r6, r8, lsl #20
    c100:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    c104:	001b330c 	andseq	r3, fp, ip, lsl #6
    c108:	06930800 	ldreq	r0, [r3], r0, lsl #16
    c10c:	00000edb 	ldrdeq	r0, [r0], -fp
    c110:	20ac0c0e 	adccs	r0, ip, lr, lsl #24
    c114:	94080000 	strls	r0, [r8], #-0
    c118:	0000450c 	andeq	r4, r0, ip, lsl #10
    c11c:	d20c0f00 	andle	r0, ip, #0, 30
    c120:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c124:	006b0d95 	mlseq	fp, r5, sp, r0
    c128:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c12c:	00001a23 	andeq	r1, r0, r3, lsr #20
    c130:	770d9608 	strvc	r9, [sp, -r8, lsl #12]
    c134:	14000009 	strne	r0, [r0], #-9
    c138:	1f620300 	svcne	0x00620300
    c13c:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
    c140:	000c802f 	andeq	r8, ip, pc, lsr #32
    c144:	1c5b0e00 	mrrcne	14, 0, r0, fp, cr0
    c148:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    c14c:	0d5e159f 	cfldr64eq	mvdx1, [lr, #-636]	; 0xfffffd84
    c150:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    c154:	08000019 	stmdaeq	r0, {r0, r3, r4}
    c158:	00580da0 	subseq	r0, r8, r0, lsr #27
    c15c:	0c000000 	stceq	0, cr0, [r0], {-0}
    c160:	00000597 	muleq	r0, r7, r5
    c164:	580da108 	stmdapl	sp, {r3, r8, sp, pc}
    c168:	02000000 	andeq	r0, r0, #0
    c16c:	001d560c 	andseq	r5, sp, ip, lsl #12
    c170:	13a40800 			; <UNDEFINED> instruction: 0x13a40800
    c174:	00000b28 	andeq	r0, r0, r8, lsr #22
    c178:	1aee0c04 	bne	ffb8f190 <_estack+0xdfb8a190>
    c17c:	a5080000 	strge	r0, [r8, #-0]
    c180:	0009470c 	andeq	r4, r9, ip, lsl #14
    c184:	860c0800 	strhi	r0, [ip], -r0, lsl #16
    c188:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c18c:	0f1506ad 	svceq	0x001506ad
    c190:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    c194:	00001cd0 	ldrdeq	r1, [r0], -r0
    c198:	5f06b108 	svcpl	0x0006b108
    c19c:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    c1a0:	001b330c 	andseq	r3, fp, ip, lsl #6
    c1a4:	06c30800 	strbeq	r0, [r3], r0, lsl #16
    c1a8:	00000f89 	andeq	r0, r0, r9, lsl #31
    c1ac:	1ec00c0e 	cdpne	12, 12, cr0, cr0, cr14, {0}
    c1b0:	cd080000 	stcgt	0, cr0, [r8, #-0]
    c1b4:	00101306 	andseq	r1, r0, r6, lsl #6
    c1b8:	d20c0f00 	andle	r0, ip, #0, 30
    c1bc:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c1c0:	006b0dce 	rsbeq	r0, fp, lr, asr #27
    c1c4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    c1c8:	00001c0f 	andeq	r1, r0, pc, lsl #24
    c1cc:	450ccf08 	strmi	ip, [ip, #-3848]	; 0xfffff0f8
    c1d0:	14000000 	strne	r0, [r0], #-0
    c1d4:	001f120c 	andseq	r1, pc, ip, lsl #4
    c1d8:	0cd10800 	ldcleq	8, cr0, [r1], {0}
    c1dc:	00000045 	andeq	r0, r0, r5, asr #32
    c1e0:	1f1b0c15 	svcne	0x001b0c15
    c1e4:	d2080000 	andle	r0, r8, #0
    c1e8:	0000450c 	andeq	r4, r0, ip, lsl #10
    c1ec:	6d0c1600 	stcvs	6, cr1, [ip, #-0]
    c1f0:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c1f4:	108d06db 	ldrdne	r0, [sp], fp
    c1f8:	0c170000 	ldceq	0, cr0, [r7], {-0}
    c1fc:	00002163 	andeq	r2, r0, r3, ror #2
    c200:	470cdc08 	strmi	sp, [ip, -r8, lsl #24]
    c204:	18000009 	stmdane	r0, {r0, r3}
    c208:	001ca10c 	andseq	sl, ip, ip, lsl #2
    c20c:	11dd0800 	bicsne	r0, sp, r0, lsl #16
    c210:	00000bd2 	ldrdeq	r0, [r0], -r2
    c214:	1a880c1c 	bne	fe20f28c <_estack+0xde20a28c>
    c218:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
    c21c:	0009770d 	andeq	r7, r9, sp, lsl #14
    c220:	03002000 	movweq	r2, #0
    c224:	00001f43 	andeq	r1, r0, r3, asr #30
    c228:	6a3c4308 	bvs	f1ce50 <__ccfg+0xefcea8>
    c22c:	1900000d 	stmdbne	r0, {r0, r2, r3}
    c230:	00001f24 	andeq	r1, r0, r4, lsr #30
    c234:	021a0828 	andseq	r0, sl, #40, 16	; 0x280000
    c238:	000e6715 	andeq	r6, lr, r5, lsl r7
    c23c:	19f61700 	ldmibne	r6!, {r8, r9, sl, ip}^
    c240:	1b080000 	blne	20c248 <__ccfg+0x1ec2a0>
    c244:	00580d02 	subseq	r0, r8, r2, lsl #26
    c248:	17000000 	strne	r0, [r0, -r0]
    c24c:	00000597 	muleq	r0, r7, r5
    c250:	0d021d08 	stceq	13, cr1, [r2, #-32]	; 0xffffffe0
    c254:	00000058 	andeq	r0, r0, r8, asr r0
    c258:	1d561702 	ldclne	7, cr1, [r6, #-8]
    c25c:	20080000 	andcs	r0, r8, r0
    c260:	0b281302 	bleq	a10e70 <__ccfg+0x9f0ec8>
    c264:	17040000 	strne	r0, [r4, -r0]
    c268:	00001aee 	andeq	r1, r0, lr, ror #21
    c26c:	0c022108 	stfeqs	f2, [r2], {8}
    c270:	00000947 	andeq	r0, r0, r7, asr #18
    c274:	1d861708 	stcne	7, cr1, [r6, #32]
    c278:	29080000 	stmdbcs	r8, {}	; <UNPREDICTABLE>
    c27c:	10d70602 	sbcsne	r0, r7, r2, lsl #12
    c280:	170c0000 	strne	r0, [ip, -r0]
    c284:	00001cd0 	ldrdeq	r1, [r0], -r0
    c288:	06022d08 	streq	r2, [r2], -r8, lsl #26
    c28c:	00001126 	andeq	r1, r0, r6, lsr #2
    c290:	19eb170d 	stmibne	fp!, {r0, r2, r3, r8, r9, sl, ip}^
    c294:	33080000 	movwcc	r0, #32768	; 0x8000
    c298:	11530602 	cmpne	r3, r2, lsl #12
    c29c:	170e0000 	strne	r0, [lr, -r0]
    c2a0:	00001d3f 	andeq	r1, r0, pc, lsr sp
    c2a4:	06023808 	streq	r3, [r2], -r8, lsl #16
    c2a8:	00001180 	andeq	r1, r0, r0, lsl #3
    c2ac:	1b771710 	blne	1dd1ef4 <__ccfg+0x1db1f4c>
    c2b0:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    c2b4:	00450c02 	subeq	r0, r5, r2, lsl #24
    c2b8:	17140000 	ldrne	r0, [r4, -r0]
    c2bc:	00001dc8 	andeq	r1, r0, r8, asr #27
    c2c0:	06024108 	streq	r4, [r2], -r8, lsl #2
    c2c4:	000011ad 	andeq	r1, r0, sp, lsr #3
    c2c8:	1ae31715 	bne	ff8d1f24 <_estack+0xdf8ccf24>
    c2cc:	55080000 	strpl	r0, [r8, #-0]
    c2d0:	11da0602 	bicsne	r0, sl, r2, lsl #12
    c2d4:	17160000 	ldrne	r0, [r6, -r0]
    c2d8:	00000fad 	andeq	r0, r0, sp, lsr #31
    c2dc:	06026808 	streq	r6, [r2], -r8, lsl #16
    c2e0:	0000123a 	andeq	r1, r0, sl, lsr r2
    c2e4:	1b6f1718 	blne	1bd1f4c <__ccfg+0x1bb1fa4>
    c2e8:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    c2ec:	00580d02 	subseq	r0, r8, r2, lsl #26
    c2f0:	171a0000 	ldrne	r0, [sl, -r0]
    c2f4:	00001fa3 	andeq	r1, r0, r3, lsr #31
    c2f8:	0e026a08 	vmlaeq.f32	s12, s4, s16
    c2fc:	00000b2e 	andeq	r0, r0, lr, lsr #22
    c300:	1a28171c 	bne	a11f78 <__ccfg+0x9f1fd0>
    c304:	6c080000 	stcvs	0, cr0, [r8], {-0}
    c308:	00580d02 	subseq	r0, r8, r2, lsl #26
    c30c:	17200000 	strne	r0, [r0, -r0]!
    c310:	00001d5e 	andeq	r1, r0, lr, asr sp
    c314:	0c027008 	stceq	0, cr7, [r2], {8}
    c318:	00000024 	andeq	r0, r0, r4, lsr #32
    c31c:	1e9b1722 	cdpne	7, 9, cr1, cr11, cr2, {1}
    c320:	73080000 	movwvc	r0, #32768	; 0x8000
    c324:	00450c02 	subeq	r0, r5, r2, lsl #24
    c328:	00240000 	eoreq	r0, r4, r0
    c32c:	7f08010b 	svcvc	0x0008010b
    c330:	000eb104 	andeq	fp, lr, r4, lsl #2
    c334:	22492000 	subcs	r2, r9, #0
    c338:	80080000 	andhi	r0, r8, r0
    c33c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c340:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    c344:	1bd72000 	blne	ff5d434c <_estack+0xdf5cf34c>
    c348:	81080000 	mrshi	r0, (UNDEF: 8)
    c34c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c350:	03010100 	movweq	r0, #4352	; 0x1100
    c354:	1c972000 	ldcne	0, cr2, [r7], {0}
    c358:	83080000 	movwhi	r0, #32768	; 0x8000
    c35c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c360:	01020100 	mrseq	r0, (UNDEF: 18)
    c364:	1a652000 	bne	195436c <__ccfg+0x19343c4>
    c368:	84080000 	strhi	r0, [r8], #-0
    c36c:	0000450f 	andeq	r4, r0, pc, lsl #10
    c370:	00010100 	andeq	r0, r1, r0, lsl #2
    c374:	010b0000 	mrseq	r0, (UNDEF: 11)
    c378:	db048708 	blle	12dfa0 <__ccfg+0x10dff8>
    c37c:	2000000e 	andcs	r0, r0, lr
    c380:	000020b3 	strheq	r2, [r0], -r3
    c384:	450f8808 	strmi	r8, [pc, #-2056]	; bb84 <__exidx_end+0x6c54>
    c388:	01000000 	mrseq	r0, (UNDEF: 0)
    c38c:	20000404 	andcs	r0, r0, r4, lsl #8
    c390:	0000220f 	andeq	r2, r0, pc, lsl #4
    c394:	450f8908 	strmi	r8, [pc, #-2312]	; ba94 <__exidx_end+0x6b64>
    c398:	01000000 	mrseq	r0, (UNDEF: 0)
    c39c:	00000004 	andeq	r0, r0, r4
    c3a0:	8b08010b 	blhi	20c7d4 <__ccfg+0x1ec82c>
    c3a4:	000f1504 	andeq	r1, pc, r4, lsl #10
    c3a8:	214e2000 	mrscs	r2, (UNDEF: 78)
    c3ac:	8c080000 	stchi	0, cr0, [r8], {-0}
    c3b0:	0000450f 	andeq	r4, r0, pc, lsl #10
    c3b4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    c3b8:	21d62000 	bicscs	r2, r6, r0
    c3bc:	8f080000 	svchi	0x00080000
    c3c0:	0000450f 	andeq	r4, r0, pc, lsl #10
    c3c4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    c3c8:	1a1b2000 	bne	6d43d0 <__ccfg+0x6b4428>
    c3cc:	91080000 	mrsls	r0, (UNDEF: 8)
    c3d0:	0000450f 	andeq	r4, r0, pc, lsl #10
    c3d4:	03010100 	movweq	r0, #4352	; 0x1100
    c3d8:	010b0000 	mrseq	r0, (UNDEF: 11)
    c3dc:	5f04a608 	svcpl	0x0004a608
    c3e0:	2000000f 	andcs	r0, r0, pc
    c3e4:	00002249 	andeq	r2, r0, r9, asr #4
    c3e8:	450fa708 	strmi	sl, [pc, #-1800]	; bce8 <__exidx_end+0x6db8>
    c3ec:	01000000 	mrseq	r0, (UNDEF: 0)
    c3f0:	20000404 	andcs	r0, r0, r4, lsl #8
    c3f4:	00001bd7 	ldrdeq	r1, [r0], -r7
    c3f8:	450fa808 	strmi	sl, [pc, #-2056]	; bbf8 <__exidx_end+0x6cc8>
    c3fc:	01000000 	mrseq	r0, (UNDEF: 0)
    c400:	20000301 	andcs	r0, r0, r1, lsl #6
    c404:	00001c97 	muleq	r0, r7, ip
    c408:	450faa08 	strmi	sl, [pc, #-2568]	; ba08 <__exidx_end+0x6ad8>
    c40c:	01000000 	mrseq	r0, (UNDEF: 0)
    c410:	20000102 	andcs	r0, r0, r2, lsl #2
    c414:	00001a65 	andeq	r1, r0, r5, ror #20
    c418:	450fab08 	strmi	sl, [pc, #-2824]	; b918 <__exidx_end+0x69e8>
    c41c:	01000000 	mrseq	r0, (UNDEF: 0)
    c420:	00000001 	andeq	r0, r0, r1
    c424:	ae08010b 	adfgee	f0, f0, #3.0
    c428:	000f8904 	andeq	r8, pc, r4, lsl #18
    c42c:	20b32000 	adcscs	r2, r3, r0
    c430:	af080000 	svcge	0x00080000
    c434:	0000450f 	andeq	r4, r0, pc, lsl #10
    c438:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    c43c:	220f2000 	andcs	r2, pc, #0
    c440:	b0080000 	andlt	r0, r8, r0
    c444:	0000450f 	andeq	r4, r0, pc, lsl #10
    c448:	00040100 	andeq	r0, r4, r0, lsl #2
    c44c:	010b0000 	mrseq	r0, (UNDEF: 11)
    c450:	1304b208 	movwne	fp, #16904	; 0x4208
    c454:	20000010 	andcs	r0, r0, r0, lsl r0
    c458:	0000214e 	andeq	r2, r0, lr, asr #2
    c45c:	450fb308 	strmi	fp, [pc, #-776]	; c15c <__exidx_end+0x722c>
    c460:	01000000 	mrseq	r0, (UNDEF: 0)
    c464:	20000701 	andcs	r0, r0, r1, lsl #14
    c468:	00001a90 	muleq	r0, r0, sl
    c46c:	450fb508 	strmi	fp, [pc, #-1288]	; bf6c <__exidx_end+0x703c>
    c470:	01000000 	mrseq	r0, (UNDEF: 0)
    c474:	20000601 	andcs	r0, r0, r1, lsl #12
    c478:	00002024 	andeq	r2, r0, r4, lsr #32
    c47c:	450fb708 	strmi	fp, [pc, #-1800]	; bd7c <__exidx_end+0x6e4c>
    c480:	01000000 	mrseq	r0, (UNDEF: 0)
    c484:	20000501 	andcs	r0, r0, r1, lsl #10
    c488:	000021d6 	ldrdeq	r2, [r0], -r6
    c48c:	450fb908 	strmi	fp, [pc, #-2312]	; bb8c <__exidx_end+0x6c5c>
    c490:	01000000 	mrseq	r0, (UNDEF: 0)
    c494:	20000401 	andcs	r0, r0, r1, lsl #8
    c498:	00001a1b 	andeq	r1, r0, fp, lsl sl
    c49c:	450fbb08 	strmi	fp, [pc, #-2824]	; b99c <__exidx_end+0x6a6c>
    c4a0:	01000000 	mrseq	r0, (UNDEF: 0)
    c4a4:	20000301 	andcs	r0, r0, r1, lsl #6
    c4a8:	0000216b 	andeq	r2, r0, fp, ror #2
    c4ac:	450fbd08 	strmi	fp, [pc, #-3336]	; b7ac <__exidx_end+0x687c>
    c4b0:	01000000 	mrseq	r0, (UNDEF: 0)
    c4b4:	20000201 	andcs	r0, r0, r1, lsl #4
    c4b8:	00001ca8 	andeq	r1, r0, r8, lsr #25
    c4bc:	450fbf08 	strmi	fp, [pc, #-3848]	; b5bc <__exidx_end+0x668c>
    c4c0:	01000000 	mrseq	r0, (UNDEF: 0)
    c4c4:	20000101 	andcs	r0, r0, r1, lsl #2
    c4c8:	0000202f 	andeq	r2, r0, pc, lsr #32
    c4cc:	450fc108 	strmi	ip, [pc, #-264]	; c3cc <__exidx_end+0x749c>
    c4d0:	01000000 	mrseq	r0, (UNDEF: 0)
    c4d4:	00000001 	andeq	r0, r0, r1
    c4d8:	c408010b 	strgt	r0, [r8], #-267	; 0xfffffef5
    c4dc:	00108d04 	andseq	r8, r0, r4, lsl #26
    c4e0:	1d662000 	stclne	0, cr2, [r6, #-0]
    c4e4:	c5080000 	strgt	r0, [r8, #-0]
    c4e8:	0000450f 	andeq	r4, r0, pc, lsl #10
    c4ec:	07010100 	streq	r0, [r1, -r0, lsl #2]
    c4f0:	1b9f2000 	blne	fe7d44f8 <_estack+0xde7cf4f8>
    c4f4:	c6080000 	strgt	r0, [r8], -r0
    c4f8:	0000450f 	andeq	r4, r0, pc, lsl #10
    c4fc:	06010100 	streq	r0, [r1], -r0, lsl #2
    c500:	1cda2000 	ldclne	0, cr2, [sl], {0}
    c504:	c8080000 	stmdagt	r8, {}	; <UNPREDICTABLE>
    c508:	0000450f 	andeq	r4, r0, pc, lsl #10
    c50c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    c510:	1c432000 	marne	acc0, r2, r3
    c514:	c9080000 	stmdbgt	r8, {}	; <UNPREDICTABLE>
    c518:	0000450f 	andeq	r4, r0, pc, lsl #10
    c51c:	03010100 	movweq	r0, #4352	; 0x1100
    c520:	1fb82000 	svcne	0x00b82000
    c524:	ca080000 	bgt	20c52c <__ccfg+0x1ec584>
    c528:	0000450f 	andeq	r4, r0, pc, lsl #10
    c52c:	02010100 	andeq	r0, r1, #0, 2
    c530:	1af82000 	bne	ffe14538 <_estack+0xdfe0f538>
    c534:	cb080000 	blgt	20c53c <__ccfg+0x1ec594>
    c538:	0000450f 	andeq	r4, r0, pc, lsl #10
    c53c:	01010100 	mrseq	r0, (UNDEF: 17)
    c540:	1a002000 	bne	14548 <__exidx_end+0xf618>
    c544:	cc080000 	stcgt	0, cr0, [r8], {-0}
    c548:	0000450f 	andeq	r4, r0, pc, lsl #10
    c54c:	00010100 	andeq	r0, r1, r0, lsl #2
    c550:	010b0000 	mrseq	r0, (UNDEF: 11)
    c554:	d704d408 	strle	sp, [r4, -r8, lsl #8]
    c558:	20000010 	andcs	r0, r0, r0, lsl r0
    c55c:	00002249 	andeq	r2, r0, r9, asr #4
    c560:	450fd508 	strmi	sp, [pc, #-1288]	; c060 <__exidx_end+0x7130>
    c564:	01000000 	mrseq	r0, (UNDEF: 0)
    c568:	20000404 	andcs	r0, r0, r4, lsl #8
    c56c:	00001bd7 	ldrdeq	r1, [r0], -r7
    c570:	450fd608 	strmi	sp, [pc, #-1544]	; bf70 <__exidx_end+0x7040>
    c574:	01000000 	mrseq	r0, (UNDEF: 0)
    c578:	20000301 	andcs	r0, r0, r1, lsl #6
    c57c:	00001c97 	muleq	r0, r7, ip
    c580:	450fd808 	strmi	sp, [pc, #-2056]	; bd80 <__exidx_end+0x6e50>
    c584:	01000000 	mrseq	r0, (UNDEF: 0)
    c588:	20000102 	andcs	r0, r0, r2, lsl #2
    c58c:	00001a65 	andeq	r1, r0, r5, ror #20
    c590:	450fd908 	strmi	sp, [pc, #-2312]	; bc90 <__exidx_end+0x6d60>
    c594:	01000000 	mrseq	r0, (UNDEF: 0)
    c598:	00000001 	andeq	r0, r0, r1
    c59c:	2208011a 	andcs	r0, r8, #-2147483642	; 0x80000006
    c5a0:	11260402 			; <UNDEFINED> instruction: 0x11260402
    c5a4:	49210000 	stmdbmi	r1!, {}	; <UNPREDICTABLE>
    c5a8:	08000022 	stmdaeq	r0, {r1, r5}
    c5ac:	450f0223 	strmi	r0, [pc, #-547]	; c391 <__exidx_end+0x7461>
    c5b0:	01000000 	mrseq	r0, (UNDEF: 0)
    c5b4:	21000404 	tstcs	r0, r4, lsl #8
    c5b8:	00001bd7 	ldrdeq	r1, [r0], -r7
    c5bc:	0f022408 	svceq	0x00022408
    c5c0:	00000045 	andeq	r0, r0, r5, asr #32
    c5c4:	00030101 	andeq	r0, r3, r1, lsl #2
    c5c8:	001c9721 	andseq	r9, ip, r1, lsr #14
    c5cc:	02260800 	eoreq	r0, r6, #0, 16
    c5d0:	0000450f 	andeq	r4, r0, pc, lsl #10
    c5d4:	01020100 	mrseq	r0, (UNDEF: 18)
    c5d8:	1a652100 	bne	19549e0 <__ccfg+0x1934a38>
    c5dc:	27080000 	strcs	r0, [r8, -r0]
    c5e0:	00450f02 	subeq	r0, r5, r2, lsl #30
    c5e4:	01010000 	mrseq	r0, (UNDEF: 1)
    c5e8:	1a000000 	bne	c5f0 <__exidx_end+0x76c0>
    c5ec:	022a0801 	eoreq	r0, sl, #65536	; 0x10000
    c5f0:	00115304 	andseq	r5, r1, r4, lsl #6
    c5f4:	20b32100 	adcscs	r2, r3, r0, lsl #2
    c5f8:	2b080000 	blcs	20c600 <__ccfg+0x1ec658>
    c5fc:	00450f02 	subeq	r0, r5, r2, lsl #30
    c600:	04010000 	streq	r0, [r1], #-0
    c604:	0f210004 	svceq	0x00210004
    c608:	08000022 	stmdaeq	r0, {r1, r5}
    c60c:	450f022c 	strmi	r0, [pc, #-556]	; c3e8 <__exidx_end+0x74b8>
    c610:	01000000 	mrseq	r0, (UNDEF: 0)
    c614:	00000004 	andeq	r0, r0, r4
    c618:	2e08021a 	mcrcs	2, 0, r0, cr8, cr10, {0}
    c61c:	11800402 	orrne	r0, r0, r2, lsl #8
    c620:	ef210000 	svc	0x00210000
    c624:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c628:	5810022f 	ldmdapl	r0, {r0, r1, r2, r3, r5, r9}
    c62c:	02000000 	andeq	r0, r0, #0
    c630:	21000d03 	tstcs	r0, r3, lsl #26
    c634:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    c638:	10023208 	andne	r3, r2, r8, lsl #4
    c63c:	00000058 	andeq	r0, r0, r8, asr r0
    c640:	00000d02 	andeq	r0, r0, r2, lsl #26
    c644:	08041a00 	stmdaeq	r4, {r9, fp, ip}
    c648:	ad040234 	sfmge	f0, 4, [r4, #-208]	; 0xffffff30
    c64c:	21000011 	tstcs	r0, r1, lsl r0
    c650:	00001e83 	andeq	r1, r0, r3, lsl #29
    c654:	10023508 	andne	r3, r2, r8, lsl #10
    c658:	0000006b 	andeq	r0, r0, fp, rrx
    c65c:	001c0404 	andseq	r0, ip, r4, lsl #8
    c660:	001f9321 	andseq	r9, pc, r1, lsr #6
    c664:	02370800 	eorseq	r0, r7, #0, 16
    c668:	00006b10 	andeq	r6, r0, r0, lsl fp
    c66c:	03150400 	tsteq	r5, #0, 8
    c670:	011a0000 	tsteq	sl, r0
    c674:	04023a08 	streq	r3, [r2], #-2568	; 0xfffff5f8
    c678:	000011da 	ldrdeq	r1, [r0], -sl
    c67c:	0020e721 	eoreq	lr, r0, r1, lsr #14
    c680:	023b0800 	eorseq	r0, fp, #0, 16
    c684:	0000450f 	andeq	r4, r0, pc, lsl #10
    c688:	02060100 	andeq	r0, r6, #0, 2
    c68c:	1abd2100 	bne	fef54a94 <_estack+0xdef4fa94>
    c690:	3d080000 	stccc	0, cr0, [r8, #-0]
    c694:	00450f02 	subeq	r0, r5, r2, lsl #30
    c698:	02010000 	andeq	r0, r1, #0
    c69c:	1a000000 	bne	c6a4 <__exidx_end+0x7774>
    c6a0:	02420802 	subeq	r0, r2, #131072	; 0x20000
    c6a4:	00123a04 	andseq	r3, r2, r4, lsl #20
    c6a8:	1e8c2100 	rmfnee	f2, f4, f0
    c6ac:	43080000 	movwmi	r0, #32768	; 0x8000
    c6b0:	00581002 	subseq	r1, r8, r2
    c6b4:	06020000 	streq	r0, [r2], -r0
    c6b8:	2921000a 	stmdbcs	r1!, {r1, r3}
    c6bc:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    c6c0:	58100244 	ldmdapl	r0, {r2, r6, r9}
    c6c4:	02000000 	andeq	r0, r0, #0
    c6c8:	21000901 	tstcs	r0, r1, lsl #18
    c6cc:	00001ef4 	strdeq	r1, [r0], -r4
    c6d0:	10024608 	andne	r4, r2, r8, lsl #12
    c6d4:	00000058 	andeq	r0, r0, r8, asr r0
    c6d8:	00080102 	andeq	r0, r8, r2, lsl #2
    c6dc:	001aa521 	andseq	sl, sl, r1, lsr #10
    c6e0:	02480800 	subeq	r0, r8, #0, 16
    c6e4:	00005810 	andeq	r5, r0, r0, lsl r8
    c6e8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    c6ec:	1a482100 	bne	1214af4 <__ccfg+0x11f4b4c>
    c6f0:	4d080000 	stcmi	0, cr0, [r8, #-0]
    c6f4:	00581002 	subseq	r1, r8, r2
    c6f8:	03020000 	movweq	r0, #8192	; 0x2000
    c6fc:	1a000000 	bne	c704 <__exidx_end+0x77d4>
    c700:	02560802 	subseq	r0, r6, #131072	; 0x20000
    c704:	00128904 	andseq	r8, r2, r4, lsl #18
    c708:	1c8a2100 	stfnes	f2, [sl], {0}
    c70c:	57080000 	strpl	r0, [r8, -r0]
    c710:	00581002 	subseq	r1, r8, r2
    c714:	03020000 	movweq	r0, #8192	; 0x2000
    c718:	2921000d 	stmdbcs	r1!, {r0, r2, r3}
    c71c:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    c720:	5810025d 	ldmdapl	r0, {r0, r2, r3, r4, r6, r9}
    c724:	02000000 	andeq	r0, r0, #0
    c728:	21000c01 	tstcs	r0, r1, lsl #24
    c72c:	00001bc9 	andeq	r1, r0, r9, asr #23
    c730:	10025f08 	andne	r5, r2, r8, lsl #30
    c734:	00000058 	andeq	r0, r0, r8, asr r0
    c738:	00060602 	andeq	r0, r6, r2, lsl #12
    c73c:	001ec721 	andseq	ip, lr, r1, lsr #14
    c740:	02660800 	rsbeq	r0, r6, #0, 16
    c744:	00005810 	andeq	r5, r0, r0, lsl r8
    c748:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    c74c:	77090000 	strvc	r0, [r9, -r0]
    c750:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    c754:	0a000012 	beq	c7a4 <__exidx_end+0x7874>
    c758:	00000091 	muleq	r0, r1, r0
    c75c:	890400a2 	stmdbhi	r4, {r1, r5, r7}
    c760:	22000012 	andcs	r0, r0, #18
    c764:	00001d93 	muleq	r0, r3, sp
    c768:	99104909 	ldmdbls	r0, {r0, r3, r8, fp, lr}
    c76c:	8c000012 	stchi	0, cr0, [r0], {18}
    c770:	0004ad02 	andeq	sl, r4, r2, lsl #26
    c774:	00044921 	andeq	r4, r4, r1, lsr #18
    c778:	00047d21 	andeq	r7, r4, r1, lsr #26
    c77c:	00048121 	andeq	r8, r4, r1, lsr #2
    c780:	00051121 	andeq	r1, r5, r1, lsr #2
    c784:	00059121 	andeq	r9, r5, r1, lsr #2
    c788:	00064121 	andeq	r4, r6, r1, lsr #2
    c78c:	10b5f821 	adcsne	pc, r5, r1, lsr #16
    c790:	0eb5f847 	cdpeq	8, 11, cr15, cr5, cr7, {2}
    c794:	01210046 			; <UNDEFINED> instruction: 0x01210046
    c798:	3004ad25 	andcc	sl, r4, r5, lsr #26
    c79c:	03480a47 	movteq	r0, #35399	; 0x8a47
    c7a0:	0ff00078 	svceq	0x00f00078
    c7a4:	0b079bf8 	bleq	1f378c <__ccfg+0x1d37e4>
    c7a8:	204c12d0 	ldrdcs	r1, [ip], #-32	; 0xffffffe0
    c7ac:	0728ff78 			; <UNDEFINED> instruction: 0x0728ff78
    c7b0:	2121ffd0 	ldrdcs	pc, [r1, -r0]!
    c7b4:	0f490e70 	svceq	0x00490e70
    c7b8:	20022424 	andcs	r2, r2, r4, lsr #8
    c7bc:	c8316043 	ldmdagt	r1!, {r0, r1, r6, sp, lr}
    c7c0:	f8bdf882 			; <UNDEFINED> instruction: 0xf8bdf882
    c7c4:	004801b5 	strheq	r0, [r8], #-21	; 0xffffffeb
    c7c8:	00026b47 	andeq	r6, r2, r7, asr #22
    c7cc:	004ce521 	subeq	lr, ip, r1, lsr #10
    c7d0:	01480900 	cmpeq	r8, r0, lsl #18
    c7d4:	004808e0 	subeq	r0, r8, r0, ror #17
    c7d8:	054c060c 	strbeq	r0, [ip, #-1548]	; 0xfffff9f4
    c7dc:	ff782249 			; <UNDEFINED> instruction: 0xff782249
    c7e0:	cad1012a 	bgt	ff44cc90 <_estack+0xdf447c90>
    c7e4:	6070227a 	rsbsvs	r2, r0, sl, ror r2
    c7e8:	7082c831 	addvc	ip, r2, r1, lsr r8
    c7ec:	001c8046 	andseq	r8, ip, r6, asr #32
    c7f0:	08620047 	stmdaeq	r2!, {r0, r1, r2, r6}^
    c7f4:	0006a440 	andeq	sl, r6, r0, asr #8
    c7f8:	080f0721 	stmdaeq	pc, {r0, r5, r8, r9, sl}	; <UNPREDICTABLE>
    c7fc:	08b4f008 	ldmeq	r4!, {r3, ip, sp, lr, pc}
    c800:	03b57047 			; <UNDEFINED> instruction: 0x03b57047
    c804:	01461546 	cmpeq	r6, r6, asr #10
    c808:	00d00629 	sbcseq	r0, r0, r9, lsr #12
    c80c:	11d00629 	bicsne	r0, r0, r9, lsr #12
    c810:	ff46284a 			; <UNDEFINED> instruction: 0xff46284a
    c814:	70ffbbf7 	ldrshtvc	fp, [pc], #183
    c818:	00480fbd 	strheq	r0, [r8], #-253	; 0xffffff03
    c81c:	05480fe0 	strbeq	r0, [r8, #-4064]	; 0xfffff020
    c820:	03428324 	movteq	r8, #8996	; 0x2324
    c824:	640840d8 	strvs	r4, [r8], #-216	; 0xffffff28
    c828:	f92c001e 			; <UNDEFINED> instruction: 0xf92c001e
    c82c:	0140e3dc 	ldrdeq	lr, [r0, #-60]	; 0xffffffc4
    c830:	18034020 	stmdane	r3, {r5, lr}
    c834:	010b8218 	tsteq	fp, r8, lsl r2
    c838:	06d00729 	ldrbeq	r0, [r0], r9, lsr #14
    c83c:	80230049 	eorhi	r0, r3, r9, asr #32
    c840:	ff462831 			; <UNDEFINED> instruction: 0xff462831
    c844:	e0ffa5f7 	ldrsht	sl, [pc], #87
    c848:	02bd70b2 	adcseq	r7, sp, #178	; 0xb2
    c84c:	6c4b0449 	cfstrdvs	mvd0, [fp], {73}	; 0x49
    c850:	00e7f631 	rsceq	pc, r7, r1, lsr r6	; <UNPREDICTABLE>
    c854:	005c8300 	subseq	r8, ip, r0, lsl #6
    c858:	86bca000 	ldrthi	sl, [ip], r0
    c85c:	0d830023 	stceq	0, cr0, [r3, #140]	; 0x8c
    c860:	00067423 	andeq	r7, r6, r3, lsr #8
    c864:	1ab5f821 	bne	fed8a8f0 <_estack+0xded858f0>
    c868:	7146054e 	cmpvc	r6, lr, asr #10
    c86c:	cc48196b 	mcrrgt	9, 6, r1, r8, cr11	; <UNPREDICTABLE>
    c870:	0001e409 	andeq	lr, r1, r9, lsl #8
    c874:	18d0112d 	ldmne	r0, {r0, r2, r3, r5, r8, ip}^
    c878:	02780949 	rsbseq	r0, r8, #1196032	; 0x124000
    c87c:	00d00f29 	sbcseq	r0, r0, r9, lsr #30
    c880:	7243047b 	subvc	r0, r3, #2063597568	; 0x7b000000
    c884:	152001b6 	strne	r0, [r0, #-438]!	; 0xfffffe4a
    c888:	b802404f 	stmdalt	r2, {r0, r1, r2, r3, r6, lr}
    c88c:	20481147 	subcs	r1, r8, r7, asr #2
    c890:	c1880038 	orrgt	r0, r8, r8, lsr r0
    c894:	0407c909 	streq	ip, [r7], #-2313	; 0xfffff6f7
    c898:	c0e016d0 	ldrdgt	r1, [r0], #96	; 0x60	; <UNPREDICTABLE>
    c89c:	40e7f07a 	rscmi	pc, r7, sl, ror r0	; <UNPREDICTABLE>
    c8a0:	0fe7ee7b 	svceq	0x00e7ee7b
    c8a4:	cc637449 	cfstrdgt	mvd7, [r3], #-292	; 0xfffffedc
    c8a8:	c00a4061 	andgt	r4, sl, r1, rrx
    c8ac:	01d00c07 	bicseq	r0, r0, r7, lsl #24
    c8b0:	31038020 	tstcc	r3, r0, lsr #32
    c8b4:	012d006b 			; <UNDEFINED> instruction: 0x012d006b
    c8b8:	004301d0 	ldrdeq	r0, [r3], #-16
    c8bc:	084381e0 	stmdaeq	r3, {r5, r6, r7, r8, pc}^
    c8c0:	07633146 	strbeq	r3, [r3, -r6, asr #2]!
    c8c4:	48394049 	ldmdami	r9!, {r0, r3, r6, lr}
    c8c8:	b8200063 	stmdalt	r0!, {r0, r1, r5, r6}
    c8cc:	f8b66247 			; <UNDEFINED> instruction: 0xf8b66247
    c8d0:	000280bd 	strheq	r8, [r2], -sp
    c8d4:	00008821 	andeq	r8, r0, r1, lsr #16
    c8d8:	00029b21 	andeq	r9, r2, r1, lsr #22
    c8dc:	003f7b21 	eorseq	r7, pc, r1, lsr #22
    c8e0:	04404000 	strbeq	r4, [r0], #-0
    c8e4:	22b51040 	adcscs	r1, r5, #64	; 0x40
    c8e8:	5121004a 			; <UNDEFINED> instruction: 0x5121004a
    c8ec:	89492161 	stmdbhi	r9, {r0, r5, r6, r8, sp}^
    c8f0:	0900c968 	stmdbeq	r0, {r3, r5, r6, r8, fp, lr, pc}
    c8f4:	204921d4 	ldrdcs	r2, [r9], #-20	; 0xffffffec
    c8f8:	9805ca4b 	stmdals	r5, {r0, r1, r3, r6, r9, fp, lr, pc}
    c8fc:	016b4b42 	cmneq	fp, r2, asr #22
    c900:	004313d8 	ldrdeq	r1, [r3], #-56	; 0xffffffc8
    c904:	4b4393e0 	blmi	10f188c <__ccfg+0x10d18e4>
    c908:	ff491d63 			; <UNDEFINED> instruction: 0xff491d63
    c90c:	10ff77f7 	ldrshtne	r7, [pc], #119
    c910:	1ab538bd 	bne	fed5ac0c <_estack+0xded55c0c>
    c914:	007f284d 	rsbseq	r2, pc, sp, asr #16
    c918:	1ad12728 	bne	ff4565c0 <_estack+0xdf4515c0>
    c91c:	c0880048 	addgt	r0, r8, r8, asr #32
    c920:	2207c009 	andcs	ip, r7, #9
    c924:	604c12d1 	ldrdvs	r1, [ip], #-33	; 0xffffffdf
    c928:	1e280069 	cdpne	0, 2, cr0, cr8, cr9, {3}
    c92c:	004668d1 	ldrdeq	r6, [r6], #-129	; 0xffffff7f
    c930:	68f845f0 	ldmvs	r8!, {r4, r5, r6, r7, r8, sl, lr}^
    c934:	01780046 	cmneq	r8, r6, asr #32
    c938:	68d11728 	ldmvs	r1, {r3, r5, r8, r9, sl, ip}^
    c93c:	10784046 	rsbsne	r4, r8, r6, asr #32
    c940:	08d21328 	ldmeq	r2, {r3, r5, r8, r9, ip}^
    c944:	68616020 	stmdavs	r1!, {r5, sp, lr}^
    c948:	4009406a 	andmi	r4, r9, sl, rrx
    c94c:	0e602001 	cdpeq	0, 6, cr2, cr0, cr1, {0}
    c950:	d121004a 			; <UNDEFINED> instruction: 0xd121004a
    c954:	024a0d62 	subeq	r0, sl, #6272	; 0x1880
    c958:	01601121 	cmneq	r0, r1, lsr #2
    c95c:	20430821 	subcs	r0, r3, r1, lsr #16
    c960:	08210360 	stmdaeq	r1!, {r5, r6, r8, r9}
    c964:	20626843 	rsbcs	r6, r2, r3, asr #16
    c968:	09bd3860 	ldmibeq	sp!, {r5, r6, fp, ip, sp}
    c96c:	38478048 	stmdacc	r7, {r3, r6, pc}^
    c970:	044000bd 	strbeq	r0, [r0], #-189	; 0xffffff43
    c974:	00001840 	andeq	r1, r0, r0, asr #16
    c978:	93000021 	movwls	r0, #33	; 0x21
    c97c:	00028008 	andeq	r8, r2, r8
    c980:	0068cf21 	rsbeq	ip, r8, r1, lsr #30
    c984:	00006800 	andeq	r6, r0, r0, lsl #16
    c988:	04110021 	ldreq	r0, [r1], #-33	; 0xffffffdf
    c98c:	00e28040 	rsceq	r8, r2, r0, asr #32
    c990:	003bc3e0 	eorseq	ip, fp, r0, ror #7
    c994:	00490700 	subeq	r0, r9, r0, lsl #14
    c998:	04d00028 	ldrbeq	r0, [r0], #40	; 0x28
    c99c:	724a0620 	subvc	r0, sl, #32, 12	; 0x2000000
    c9a0:	c97809b6 	ldmdbgt	r8!, {r1, r2, r4, r5, r7, r8, fp}^
    c9a4:	10d00107 	sbcsne	r0, r0, r7, lsl #2
    c9a8:	80e00058 	rschi	r0, r0, r8, asr r0
    c9ac:	40b66220 	adcsmi	r6, r6, r0, lsr #4
    c9b0:	004770b2 	strheq	r7, [r7], #-2
    c9b4:	00026b00 	andeq	r6, r2, r0, lsl #22
    c9b8:	04605821 	strbteq	r5, [r0], #-2081	; 0xfffff7df
    c9bc:	01b40340 			; <UNDEFINED> instruction: 0x01b40340
    c9c0:	01900148 	orrseq	r0, r0, r8, asr #2
    c9c4:	006fa5bd 	strhteq	sl, [pc], #-93
    c9c8:	00000000 	andeq	r0, r0, r0
    c9cc:	03000100 	movweq	r0, #256	; 0x100
    c9d0:	1f000a00 	svcne	0x00000a00
    c9d4:	eb005900 	bl	22ddc <__ccfg+0x2e34>
    c9d8:	ea023900 	b	9ade0 <__ccfg+0x7ae38>
    c9dc:	9709f904 	strls	pc, [r9, -r4, lsl #18]
    c9e0:	a11feb12 	tstge	pc, r2, lsl fp	; <UNPREDICTABLE>
    c9e4:	0a4a7832 	beq	12aaab4 <__ccfg+0x128ab0c>
    c9e8:	8c82fa66 	vstmiahi	r2, {s30-s131}
    c9ec:	17b6639e 			; <UNDEFINED> instruction: 0x17b6639e
    c9f0:	edd664c9 	cfldrd	mvd6, [r6, #804]	; 0x324
    c9f4:	e0e3c1de 	ldrd	ip, [r3], #30	; <UNPREDICTABLE>
    c9f8:	0000ffe5 	andeq	pc, r0, r5, ror #31
    c9fc:	00770900 	rsbseq	r0, r7, r0, lsl #18
    ca00:	15490000 	strbne	r0, [r9, #-0]
    ca04:	91230000 			; <UNDEFINED> instruction: 0x91230000
    ca08:	ac000000 	stcge	0, cr0, [r0], {-0}
    ca0c:	38040001 	stmdacc	r4, {r0}
    ca10:	22000015 	andcs	r0, r0, #21
    ca14:	00001de2 	andeq	r1, r0, r2, ror #27
    ca18:	49103a0a 	ldmdbmi	r0, {r1, r3, r9, fp, ip, sp}
    ca1c:	b4000015 	strlt	r0, [r0], #-21	; 0xffffffeb
    ca20:	0061a306 	rsbeq	sl, r1, r6, lsl #6
    ca24:	07147f00 	ldreq	r7, [r4, -r0, lsl #30]
    ca28:	f1004d13 			; <UNDEFINED> instruction: 0xf1004d13
    ca2c:	131f2e24 	tstne	pc, #36, 28	; 0x240
    ca30:	3f0ab03f 	svccc	0x000ab03f
    ca34:	00ff0700 	rscseq	r0, pc, r0, lsl #14
    ca38:	00403000 	subeq	r3, r0, r0
    ca3c:	03400140 	movteq	r0, #320	; 0x140
    ca40:	0f400740 	svceq	0x00400740
    ca44:	cf404f40 	svcgt	0x00404f40
    ca48:	cf41cf40 	svcgt	0x0041cf40
    ca4c:	cf47cf43 	svcgt	0x0047cf43
    ca50:	cf3fcf4f 	svcgt	0x003fcf4f
    ca54:	cf1fcf2f 	svcgt	0x001fcf2f
    ca58:	0000000f 	andeq	r0, r0, pc
    ca5c:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    ca60:	3f000000 	svccc	0x00000000
    ca64:	40000000 	andmi	r0, r0, r0
    ca68:	00003f00 	andeq	r3, r0, r0, lsl #30
    ca6c:	68000400 	stmdavs	r0, {sl}
    ca70:	dc000e00 	stcle	14, cr0, [r0], {-0}
    ca74:	43000600 	movwmi	r0, #1536	; 0x600
    ca78:	05001a00 	streq	r1, [r0, #-2560]	; 0xfffff600
    ca7c:	00000000 	andeq	r0, r0, r0
    ca80:	00000200 	andeq	r0, r0, r0, lsl #4
    ca84:	00003f00 	andeq	r3, r0, r0, lsl #30
    ca88:	04000000 	streq	r0, [r0], #-0
    ca8c:	0000c000 	andeq	ip, r0, r0
    ca90:	c0000400 	andgt	r0, r0, r0, lsl #8
    ca94:	07000000 	streq	r0, [r0, -r0]
    ca98:	00c05000 	sbceq	r5, r0, r0
    ca9c:	70700091 			; <UNDEFINED> instruction: 0x70700091
    caa0:	009100c0 	addseq	r0, r1, r0, asr #1
    caa4:	21318270 	teqcs	r1, r0, ror r2
    caa8:	10913100 	addsne	r3, r1, r0, lsl #2
    caac:	017000b1 	ldrheq	r0, [r0, #-1]!
    cab0:	00b10181 	adcseq	r0, r1, r1, lsl #3
    cab4:	323182a1 	eorscc	r8, r1, #268435466	; 0x1000000a
    cab8:	01b11091 			; <UNDEFINED> instruction: 0x01b11091
    cabc:	41101191 			; <UNDEFINED> instruction: 0x41101191
    cac0:	4f224181 	svcmi	0x00224181
    cac4:	0006f140 	andeq	pc, r6, r0, asr #2
    cac8:	01c05170 	biceq	r5, r0, r0, ror r1
    cacc:	10183091 	mulsne	r8, r1, r0
    cad0:	08318339 	ldmdaeq	r1!, {r0, r3, r4, r5, r8, r9, pc}
    cad4:	413118d0 	teqmi	r1, r0	; <illegal shifter operand>
    cad8:	3100316f 	tstcc	r0, pc, ror #2
    cadc:	83b11091 			; <UNDEFINED> instruction: 0x83b11091
    cae0:	5b161414 	blpl	591b38 <__ccfg+0x571b90>
    cae4:	25700068 	ldrbcs	r0, [r0, #-104]!	; 0xffffff98
    cae8:	00c05010 	sbceq	r5, r0, r0, lsl r0
    caec:	c0c3f491 	smullgt	pc, r3, r1, r4	; <UNPREDICTABLE>
    caf0:	031420c0 	tsteq	r4, #192	; 0xc0
    caf4:	4110316f 	tstmi	r0, pc, ror #2
    caf8:	82c02204 	sbchi	r2, r0, #4, 4	; 0x40000000
    cafc:	31002131 	tstcc	r0, r1, lsr r1
    cb00:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    cb04:	41103139 	tstmi	r0, r9, lsr r1
    cb08:	82c08204 	sbchi	r8, r0, #4, 4	; 0x40000000
    cb0c:	31002131 	tstcc	r0, r1, lsr r1
    cb10:	63b11091 			; <UNDEFINED> instruction: 0x63b11091
    cb14:	a2103139 	andsge	r3, r0, #1073741838	; 0x4000000e
    cb18:	213182c0 	teqcs	r1, r0, asr #5
    cb1c:	10913100 	addsne	r3, r1, r0, lsl #2
    cb20:	151050b1 	ldrne	r5, [r0, #-177]	; 0xffffff4f
    cb24:	05140531 	ldreq	r0, [r4, #-1329]	; 0xfffffacf
    cb28:	3f700092 	svccc	0x00700092
    cb2c:	31c05264 	biccc	r5, r0, r4, ror #4
    cb30:	61063110 	tstvs	r6, r0, lsl r1
    cb34:	4202c131 	andmi	ip, r2, #1073741836	; 0x4000000c
    cb38:	31c11264 	biccc	r1, r1, r4, ror #4
    cb3c:	71392110 	teqvc	r9, r0, lsl r1
    cb40:	e1315106 	teq	r1, r6, lsl #2
    cb44:	00644202 	rsbeq	r4, r4, r2, lsl #4
    cb48:	99658a70 	stmdbls	r5!, {r4, r5, r6, r9, fp, pc}^
    cb4c:	20c08865 	sbccs	r8, r0, r5, ror #16
    cb50:	80395082 	eorshi	r5, r9, r2, lsl #1
    cb54:	9f1e0039 	svcls	0x001e0039
    cb58:	01c04140 	biceq	r4, r0, r0, asr #2
    cb5c:	18141830 	ldmdane	r4, {r4, r5, fp, ip}
    cb60:	30c0891a 	sbccc	r8, r0, sl, lsl r9
    cb64:	80396082 	eorshi	r6, r9, r2, lsl #1
    cb68:	a91e0039 	ldmdbge	lr, {r0, r3, r4, r5}
    cb6c:	01c04140 	biceq	r4, r0, r0, asr #2
    cb70:	19141930 	ldmdbne	r4, {r4, r5, r8, fp, ip}
    cb74:	36643c1a 			; <UNDEFINED> instruction: 0x36643c1a
    cb78:	34b11091 	ldrtcc	r1, [r1], #145	; 0x91
    cb7c:	54b11091 	ldrtpl	r1, [r1], #145	; 0x91
    cb80:	547100b0 	ldrbtpl	r0, [r1], #-176	; 0xffffff50
    cb84:	f0b064a0 			; <UNDEFINED> instruction: 0xf0b064a0
    cb88:	af220080 	svcge	0x00220080
    cb8c:	b0124040 	andslt	r4, r2, r0, asr #32
    cb90:	53b03290 	movspl	r3, #144, 4
    cb94:	53395382 	teqpl	r9, #134217730	; 0x8000002
    cb98:	3f648539 	svccc	0x00648539
    cb9c:	22c11164 	sbccs	r1, r1, #100, 2
    cba0:	706442c1 	rsbvc	r4, r4, r1, asr #5
    cba4:	1168c2c1 	cmnne	r8, r1, asr #5
    cba8:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    cbac:	c7c17064 	strbgt	r7, [r1, r4, rrx]
    cbb0:	00c05068 	sbceq	r5, r0, r8, rrx
    cbb4:	98722791 	ldmdals	r2!, {r0, r4, r7, r8, r9, sl, sp}^
    cbb8:	14161592 	ldrne	r1, [r6], #-1426	; 0xfffffa6e
    cbbc:	53104216 	tstpl	r0, #1610612737	; 0x60000001
    cbc0:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    cbc4:	31313182 	teqcc	r1, r2, lsl #3
    cbc8:	31398139 	teqcc	r9, r9, lsr r1
    cbcc:	70b05131 	adcsvc	r5, r0, r1, lsr r1
    cbd0:	276572b2 			; <UNDEFINED> instruction: 0x276572b2
    cbd4:	70929972 	addsvc	r9, r2, r2, ror r9
    cbd8:	731062b2 	tstvc	r0, #536870923	; 0x2000000b
    cbdc:	31c3f010 	biccc	pc, r3, r0, lsl r0	; <UNPREDICTABLE>
    cbe0:	21312182 	teqcs	r1, r2, lsl #3
    cbe4:	1b398139 	blne	e6d0d0 <__ccfg+0xe4d128>
    cbe8:	e2657210 	rsb	r7, r5, #16, 4
    cbec:	603182c0 	eorsvs	r8, r1, r0, asr #5
    cbf0:	80318082 	eorshi	r8, r1, r2, lsl #1
    cbf4:	61000239 	tstvs	r0, r9, lsr r2
    cbf8:	327100b0 	rsbscc	r0, r1, #176	; 0xb0
    cbfc:	51b11091 			; <UNDEFINED> instruction: 0x51b11091
    cc00:	27b061a0 	ldrcs	r6, [r0, r0, lsr #3]!
    cc04:	f3c23072 	vmvn.i32	<illegal reg q9.5>, #162	; 0x000000a2
    cc08:	80000068 	andhi	r0, r0, r8, rrx
    cc0c:	3290b012 	addscc	fp, r0, #18
    cc10:	507000b0 	ldrhtpl	r0, [r0], #-0
    cc14:	279100c0 	ldrcs	r0, [r1, r0, asr #1]
    cc18:	62929972 	addsvs	r9, r2, #1867776	; 0x1c8000
    cc1c:	f0107310 			; <UNDEFINED> instruction: 0xf0107310
    cc20:	218231c3 	orrcs	r3, r2, r3, asr #3
    cc24:	81392131 	teqhi	r9, r1, lsr r1
    cc28:	70b05139 	adcsvc	r5, r0, r9, lsr r1
    cc2c:	27657eb2 			; <UNDEFINED> instruction: 0x27657eb2
    cc30:	70929872 	addsvc	r9, r2, r2, ror r8
    cc34:	531042b2 	tstpl	r0, #536870923	; 0x2000000b
    cc38:	21c1f010 	biccs	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    cc3c:	31313182 	teqcc	r1, r2, lsl #3
    cc40:	31398139 	teqcc	r9, r9, lsr r1
    cc44:	7e101a31 			; <UNDEFINED> instruction: 0x7e101a31
    cc48:	61a05165 	rorvs	r5, r5, #2
    cc4c:	b07227b0 	ldrhtlt	r2, [r2], #-112	; 0xffffff90
    cc50:	3f6918c0 	svccc	0x006918c0
    cc54:	22c10164 	sbccs	r0, r1, #100, 2
    cc58:	016442c1 	cmneq	r4, r1, asr #5
    cc5c:	42c0c2c1 	sbcmi	ip, r0, #268435468	; 0x1000000c
    cc60:	3c1a1564 	cfldr32cc	mvfx1, [sl], {100}	; 0x64
    cc64:	10913564 	addsne	r3, r1, r4, ror #10
    cc68:	858253b1 	strhi	r5, [r2, #945]	; 0x3b1
    cc6c:	b012c064 	andslt	ip, r2, r4, rrx
    cc70:	00b03290 	umlalseq	r3, r0, r0, r2
    cc74:	72643f70 	rsbvc	r3, r4, #112, 30	; 0x1c0
    cc78:	42c081c2 	sbcmi	r8, r0, #-2147483600	; 0x80000030
    cc7c:	11c12264 	bicne	r2, r1, r4, ror #4
    cc80:	026442c1 	rsbeq	r4, r4, #268435468	; 0x1000000c
    cc84:	42c111c0 	sbcmi	r1, r1, #192, 2	; 0x30
    cc88:	31c06264 	biccc	r6, r0, r4, ror #4
    cc8c:	626442c3 	rsbvs	r4, r4, #805306380	; 0x3000000c
    cc90:	42c111c3 	sbcmi	r1, r1, #-1073741776	; 0xc0000030
    cc94:	11c30264 	bicne	r0, r3, r4, ror #4
    cc98:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    cc9c:	85395382 	ldrhi	r5, [r9, #-898]!	; 0xfffffc7e
    cca0:	47c3e264 	strbmi	lr, [r3, r4, ror #4]
    cca4:	40221164 	eormi	r1, r2, r4, ror #2
    cca8:	81c24241 	bichi	r4, r2, r1, asr #4
    ccac:	526442c8 	rsbpl	r4, r4, #200, 4	; 0x8000000c
    ccb0:	42c111c2 	sbcmi	r1, r1, #-2147483600	; 0x80000030
    ccb4:	e1c27264 	bic	r7, r2, r4, ror #4
    ccb8:	026442ce 	rsbeq	r4, r4, #-536870900	; 0xe000000c
    ccbc:	42c881c2 	sbcmi	r8, r8, #-2147483600	; 0x80000030
    ccc0:	01c20264 	biceq	r0, r2, r4, ror #4
    ccc4:	b06442c8 	rsblt	r4, r4, r8, asr #5
    ccc8:	006954c0 	rsbeq	r5, r9, r0, asr #9
    cccc:	42643f70 	rsbmi	r3, r4, #112, 30	; 0x1c0
    ccd0:	42c801c2 	sbcmi	r0, r8, #-2147483600	; 0x80000030
    ccd4:	11c25264 	bicne	r5, r2, r4, ror #4
    ccd8:	726442c0 	rsbvc	r4, r4, #192, 4
    ccdc:	42c0e1c2 	sbcmi	lr, r0, #-2147483600	; 0x80000030
    cce0:	01c00264 	biceq	r0, r0, r4, ror #4
    cce4:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    cce8:	42c301c0 	sbcmi	r0, r3, #192, 2	; 0x30
    ccec:	01c12264 	biceq	r2, r1, r4, ror #4
    ccf0:	626442c1 	rsbvs	r4, r4, #268435468	; 0x1000000c
    ccf4:	42c101c3 	sbcmi	r0, r1, #-1073741776	; 0xc0000030
    ccf8:	01c30264 	biceq	r0, r3, r4, ror #4
    ccfc:	536442c1 	cmnpl	r4, #268435468	; 0x1000000c
    cd00:	00648582 	rsbeq	r8, r4, r2, lsl #11
    cd04:	00b06170 	adcseq	r6, r0, r0, ror r1
    cd08:	23141271 	tstcs	r4, #268435463	; 0x10000007
    cd0c:	334d7a1c 	movtcc	r7, #55836	; 0xda1c
    cd10:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    cd14:	10913270 	addsne	r3, r1, r0, ror r2
    cd18:	006972b1 	strhteq	r7, [r9], #-33	; 0xffffffdf
    cd1c:	00b06170 	adcseq	r6, r0, r0, ror r1
    cd20:	32181371 	andscc	r1, r8, #-1006632959	; 0xc4000001
    cd24:	3249861c 	subcc	r8, r9, #28, 12	; 0x1c00000
    cd28:	00b11091 	umlalseq	r1, r1, r1, r0	; <UNPREDICTABLE>
    cd2c:	10913370 	addsne	r3, r1, r0, ror r3
    cd30:	00697eb1 	strhteq	r7, [r9], #-225	; 0xffffff1f
    cd34:	47c0c270 			; <UNDEFINED> instruction: 0x47c0c270
    cd38:	c2101564 	andsgt	r1, r0, #100, 10	; 0x19000000
    cd3c:	471612c0 	ldrmi	r1, [r6, -r0, asr #5]
    cd40:	15314164 	ldrne	r4, [r1, #-356]!	; 0xfffffe9c
    cd44:	80c0c014 	sbchi	ip, r0, r4, lsl r0
    cd48:	54140531 	ldrpl	r0, [r4], #-1329	; 0xfffffacf
    cd4c:	0478a010 	ldrbteq	sl, [r8], #-16
    cd50:	e6700004 	ldrbt	r0, [r0], -r4
    cd54:	013186c0 	teqeq	r1, r0, asr #13
    cd58:	671416cc 	ldrvs	r1, [r4, -ip, asr #13]
    cd5c:	f0826110 			; <UNDEFINED> instruction: 0xf0826110
    cd60:	170401c3 	strne	r0, [r4, -r3, asr #3]
    cd64:	06700014 			; <UNDEFINED> instruction: 0x06700014
    cd68:	0b720573 	bleq	1c8e33c <__ccfg+0x1c6e394>
    cd6c:	50720e72 	rsbspl	r0, r2, r2, ror lr
    cd70:	817100b0 	ldrhhi	r0, [r1, #-0]!
    cd74:	50b06080 	adcspl	r6, r0, r0, lsl #1
    cd78:	418092a0 	orrmi	r9, r0, r0, lsr #5
    cd7c:	8045c322 	subhi	ip, r5, r2, lsr #6
    cd80:	10c1f180 	sbcne	pc, r1, r0, lsl #3
    cd84:	01163004 	tsteq	r6, r4
    cd88:	01140111 	tsteq	r4, r1, lsl r1
    cd8c:	d761d66c 	strble	sp, [r1, -ip, ror #12]!
    cd90:	d961d861 	stmdble	r1!, {r0, r5, r6, fp, ip, lr, pc}^
    cd94:	db61da61 	blle	1883720 <__ccfg+0x1863778>
    cd98:	de61dc61 	cdple	12, 6, cr13, cr1, cr1, {3}
    cd9c:	e261e061 	rsb	lr, r1, #97	; 0x61
    cda0:	3661e461 	strbtcc	lr, [r1], -r1, ror #8
    cda4:	91633963 	cmnls	r3, r3, ror #18
    cda8:	21c0f280 	biccs	pc, r0, r0, lsl #5
    cdac:	82312104 	eorshi	r2, r1, #4, 2
    cdb0:	122a4280 	eorne	r4, sl, #128, 4
    cdb4:	01163214 	tsteq	r6, r4, lsl r2
    cdb8:	01142111 	tsteq	r4, r1, lsl r1
    cdbc:	0b61ee6c 	bleq	1888774 <__ccfg+0x18687cc>
    cdc0:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    cdc4:	0b61ee63 	bleq	1888758 <__ccfg+0x18687b0>
    cdc8:	3961f462 	stmdbcc	r1!, {r1, r5, r6, sl, ip, sp, lr, pc}^
    cdcc:	e661e663 	strbt	lr, [r1], -r3, ror #12
    cdd0:	e661e661 	strbt	lr, [r1], -r1, ror #12
    cdd4:	e661e661 	strbt	lr, [r1], -r1, ror #12
    cdd8:	e6649461 	strbt	r9, [r4], -r1, ror #8
    cddc:	e664f961 	strbt	pc, [r4], -r1, ror #18	; <UNPREDICTABLE>
    cde0:	e6652a61 	strbt	r2, [r5], -r1, ror #20
    cde4:	e6655661 	strbt	r5, [r5], -r1, ror #12
    cde8:	e6674661 	strbt	r4, [r7], -r1, ror #12
    cdec:	b0121061 	andslt	r1, r2, r1, rrx
    cdf0:	06720e90 			; <UNDEFINED> instruction: 0x06720e90
    cdf4:	10720573 	rsbsne	r0, r2, r3, ror r5
    cdf8:	a7903012 			; <UNDEFINED> instruction: 0xa7903012
    cdfc:	3ccff061 	stclcc	0, cr15, [pc], {97}	; 0x61
    ce00:	03c1d467 	biceq	sp, r1, #1728053248	; 0x67000000
    ce04:	54c3c0c0 	strbpl	ip, [r3], #192	; 0xc0
    ce08:	50784064 	rsbspl	r4, r8, r4, rrx
    ce0c:	10785091 			; <UNDEFINED> instruction: 0x10785091
    ce10:	20786092 			; <UNDEFINED> instruction: 0x20786092
    ce14:	30787092 			; <UNDEFINED> instruction: 0x30787092
    ce18:	40788092 			; <UNDEFINED> instruction: 0x40788092
    ce1c:	60789092 			; <UNDEFINED> instruction: 0x60789092
    ce20:	90783092 			; <UNDEFINED> instruction: 0x90783092
    ce24:	40821091 	umullmi	r1, r2, r1, r0
    ce28:	0106f039 	tsteq	r6, r9, lsr r0	; <UNPREDICTABLE>
    ce2c:	10311010 	eorsne	r1, r1, r0, lsl r0
    ce30:	42920014 	addsmi	r0, r2, #20
    ce34:	bc61e667 	stcllt	6, cr14, [r1], #-412	; 0xfffffe64
    ce38:	54a0e2a0 	strtpl	lr, [r0], #672	; 0x2a0
    ce3c:	5080f0a0 	addpl	pc, r0, r0, lsr #1
    ce40:	40461522 	submi	r1, r6, r2, lsr #10
    ce44:	2b220080 	blcs	88d04c <__ccfg+0x86d0a4>
    ce48:	40620d47 	rsbmi	r0, r2, r7, asr #26
    ce4c:	8d822da0 	stchi	13, cr2, [r2, #640]	; 0x280
    ce50:	10398d31 	eorsne	r8, r9, r1, lsr sp
    ce54:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    ce58:	1a100904 	bne	40f270 <__ccfg+0x3ef2c8>
    ce5c:	1a394a82 	bne	e5f86c <__ccfg+0xe3f8c4>
    ce60:	80821004 	addhi	r1, r2, r4
    ce64:	0e041039 	mcreq	0, 0, r1, cr4, cr9, {1}
    ce68:	bc10ab10 			; <UNDEFINED> instruction: 0xbc10ab10
    ce6c:	6310c210 	tstvs	r0, #16, 4
    ce70:	e0722964 	rsbs	r2, r2, r4, ror #18
    ce74:	13673ccf 	cmnne	r7, #52992	; 0xcf00
    ce78:	c8b003b0 	ldmgt	r0!, {r4, r5, r7, r8, r9}
    ce7c:	50b05366 	adcspl	r5, r0, r6, ror #6
    ce80:	64b054b0 	ldrtvs	r5, [r0], #1200	; 0x4b0
    ce84:	a5b013b0 	ldrge	r1, [r0, #944]!	; 0x3b0
    ce88:	e0821066 	add	r1, r2, r6, rrx
    ce8c:	ae463822 	cdpge	8, 4, cr3, cr6, cr2, {1}
    ce90:	41710066 	cmnmi	r1, r6, rrx
    ce94:	2b220180 	blcs	88d49c <__ccfg+0x86d4f4>
    ce98:	1080f047 	addne	pc, r0, r7, asr #32
    ce9c:	f0464b22 			; <UNDEFINED> instruction: 0xf0464b22
    cea0:	64471822 	strbvs	r1, [r7], #-2082	; 0xfffff7de
    cea4:	382231b0 	stmdacc	r2!, {r4, r5, r7, r8, ip, sp}
    cea8:	ceb06342 	cdpgt	3, 11, cr6, cr0, cr2, {2}
    ceac:	e0821066 	add	r1, r2, r6, rrx
    ceb0:	70463822 	subvc	r3, r6, r2, lsr #16
    ceb4:	64623866 	strbtvs	r3, [r2], #-2150	; 0xfffff79a
    ceb8:	8f816fb0 	svchi	0x00816fb0
    cebc:	d03d8f31 	eorsle	r8, sp, r1, lsr pc
    cec0:	3c92ffdf 	ldccc	15, cr15, [r2], {223}	; 0xdf
    cec4:	41710067 	cmnmi	r1, r7, rrx
    cec8:	2b220180 	blcs	88d4d0 <__ccfg+0x86d528>
    cecc:	f0b06447 			; <UNDEFINED> instruction: 0xf0b06447
    ced0:	65225080 	strvs	r5, [r2, #-128]!	; 0xffffff80
    ced4:	11b06342 	asrsne	r6, r2, #6
    ced8:	6022c182 	eorvs	ip, r2, r2, lsl #3
    cedc:	0566ce46 	strbeq	ip, [r6, #-3654]!	; 0xfffff1ba
    cee0:	d1821167 	orrle	r1, r2, r7, ror #2
    cee4:	70465222 	subvc	r5, r6, r2, lsr #4
    cee8:	61625266 	cmnvs	r2, r6, ror #4
    ceec:	81817281 	orrhi	r7, r1, r1, lsl #5
    cef0:	823d8131 	eorshi	r8, sp, #1073741836	; 0x4000000c
    cef4:	c03d8231 	eorsgt	r8, sp, r1, lsr r2
    cef8:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    cefc:	0b673c93 	bleq	19dc150 <__ccfg+0x19bc1a8>
    cf00:	c081b062 	addgt	fp, r1, r2, rrx
    cf04:	9781d391 			; <UNDEFINED> instruction: 0x9781d391
    cf08:	d3a29082 			; <UNDEFINED> instruction: 0xd3a29082
    cf0c:	f34e7f18 	vmaxnm.f32	d23, d14, d8
    cf10:	e316130b 	tst	r6, #738197504	; 0x2c000000
    cf14:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    cf18:	3b81e391 	blcc	fe085d64 <_estack+0xde080d64>
    cf1c:	ba629014 	blt	18b0f74 <__ccfg+0x1890fcc>
    cf20:	23468b1c 	movtcs	r8, #27420	; 0x6b1c
    cf24:	e34a8b1e 	movt	r8, #43806	; 0xab1e
    cf28:	904e8b1c 	subls	r8, lr, ip, lsl fp
    cf2c:	8b2207b2 	blhi	88edfc <__ccfg+0x86ee54>
    cf30:	1ba29042 	blne	fe8b1040 <_estack+0xde8ac040>
    cf34:	e362961a 	cmn	r2, #27262976	; 0x1a00000
    cf38:	c34aa41c 	movtgt	sl, #42012	; 0xa41c
    cf3c:	3b81e391 	blcc	fe085d88 <_estack+0xde080d88>
    cf40:	a01cab18 	andsge	sl, ip, r8, lsl fp
    cf44:	a21c9b4e 	andsge	r9, ip, #79872	; 0x13800
    cf48:	a41cbc4a 	ldrge	fp, [ip], #-3146	; 0xfffff3b6
    cf4c:	1010b242 	andsne	fp, r0, r2, asr #4
    cf50:	9d22d082 	stcls	0, cr13, [r2, #-520]!	; 0xfffffdf8
    cf54:	1080f042 	addne	pc, r0, r2, asr #32
    cf58:	6346a422 	movtvs	sl, #25634	; 0x6422
    cf5c:	a466a564 	strbtge	sl, [r6], #-1380	; 0xfffffa9c
    cf60:	9410ab62 	ldrls	sl, [r0], #-2914	; 0xfffff49e
    cf64:	94109b62 	ldrls	r9, [r0], #-2914	; 0xfffff49e
    cf68:	30700062 	rsbscc	r0, r0, r2, rrx
    cf6c:	10c0f182 	sbcne	pc, r0, r2, lsl #3
    cf70:	00b06304 	adcseq	r6, r0, r4, lsl #6
    cf74:	bc6aa871 	stcllt	8, cr10, [sl], #-452	; 0xfffffe3c
    cf78:	00b0e010 	adcseq	lr, r0, r0, lsl r0
    cf7c:	c281b270 	addgt	fp, r1, #112, 4
    cf80:	0181d291 			; <UNDEFINED> instruction: 0x0181d291
    cf84:	51181282 	tstpl	r8, r2, lsl #5
    cf88:	41181281 	tstmi	r8, r1, lsl #5
    cf8c:	81318182 	teqhi	r1, r2, lsl #3
    cf90:	bf1c123d 	svclt	0x001c123d
    cf94:	32b0e24a 	adcscc	lr, r0, #-1610612732	; 0xa0000004
    cf98:	f2dfb0b0 	vshr.s64	d27, d16, #33
    cf9c:	f1673c92 			; <UNDEFINED> instruction: 0xf1673c92
    cfa0:	c31421c7 	tstgt	r4, #-1073741775	; 0xc0000031
    cfa4:	62c8124e 	sbcvs	r1, r8, #-536870908	; 0xe0000004
    cfa8:	31917291 			; <UNDEFINED> instruction: 0x31917291
    cfac:	00b0e1b0 	ldrhteq	lr, [r0], r0
    cfb0:	06c00870 	uxtab16eq	r0, r0, r0, ror #16
    cfb4:	60c800c0 	sbcvs	r0, r8, r0, asr #1
    cfb8:	00917091 	umullseq	r7, r1, r1, r0
    cfbc:	b0820170 	addlt	r0, r2, r0, ror r1
    cfc0:	d091c081 	addsle	ip, r1, r1, lsl #1
    cfc4:	51181081 	tstpl	r8, r1, lsl #1
    cfc8:	06181081 	ldreq	r1, [r8], -r1, lsl #1
    cfcc:	4280e114 	addmi	lr, r0, #20, 2
    cfd0:	82318282 	eorshi	r8, r1, #536870920	; 0x20000008
    cfd4:	e41c203d 	ldr	r2, [ip], #-61	; 0xffffffc3
    cfd8:	21b0e24a 	asrscs	lr, sl, #4
    cfdc:	3246e822 	subcc	lr, r6, #2228224	; 0x220000
    cfe0:	a01005b0 			; <UNDEFINED> instruction: 0xa01005b0
    cfe4:	3c92f5df 	cfldr32cc	mvfx15, [r2], {223}	; 0xdf
    cfe8:	e8222167 	stmda	r2!, {r0, r1, r2, r5, r6, r8, sp}
    cfec:	32a0e242 	adccc	lr, r0, #536870916	; 0x20000004
    cff0:	418231b0 			; <UNDEFINED> instruction: 0x418231b0
    cff4:	01c0f039 	biceq	pc, r0, r9, lsr r0	; <UNPREDICTABLE>
    cff8:	f61e0104 			; <UNDEFINED> instruction: 0xf61e0104
    cffc:	10161842 	andsne	r1, r6, r2, asr #16
    d000:	083010c0 	ldmdaeq	r0!, {r6, r7, ip}
    d004:	6047041c 	subvs	r0, r7, ip, lsl r4
    d008:	063c1010 			; <UNDEFINED> instruction: 0x063c1010
    d00c:	61c7f110 	bicvs	pc, r7, r0, lsl r1	; <UNPREDICTABLE>
    d010:	164efa14 			; <UNDEFINED> instruction: 0x164efa14
    d014:	719166c8 	orrsvc	r6, r1, r8, asr #13
    d018:	81318181 	teqhi	r1, r1, lsl #3
    d01c:	011c163d 	tsteq	ip, sp, lsr r6
    d020:	3191764b 	orrscc	r7, r1, fp, asr #12
    d024:	08c006b0 	stmiaeq	r0, {r4, r5, r7, r9, sl}^
    d028:	617000c0 	cmnvs	r0, r0, asr #1
    d02c:	81318181 	teqhi	r1, r1, lsl #3
    d030:	8082403d 	addhi	r4, r2, sp, lsr r0
    d034:	f1180139 			; <UNDEFINED> instruction: 0xf1180139
    d038:	014b171c 	cmpeq	fp, ip, lsl r7
    d03c:	c080b014 	addgt	fp, r0, r4, lsl r0
    d040:	bc471722 	mcrrlt	7, 2, r1, r7, cr2
    d044:	90b033b0 	ldrhtls	r3, [r0], r0
    d048:	0f92f1ef 	svceq	0x0092f1ef
    d04c:	00673c93 	mlseq	r7, r3, ip, r3
    d050:	63a00370 	movvs	r0, #112, 6	; 0xc0000001
    d054:	efb064b0 	svc	0x00b064b0
    d058:	006556b0 	strhteq	r5, [r5], #-96	; 0xffffffa0
    d05c:	00804071 	addeq	r4, r0, r1, ror r0
    d060:	64472b22 	strbvs	r2, [r7], #-2850	; 0xfffff4de
    d064:	ef652ab0 	svc	0x00652ab0
    d068:	407100a0 	rsbsmi	r0, r1, r0, lsr #1
    d06c:	2b220080 	blcs	88d274 <__ccfg+0x86d2cc>
    d070:	03b06447 	movseq	r6, #1191182336	; 0x47000000
    d074:	016238b0 	strheq	r3, [r2, #-128]!	; 0xffffff80
    d078:	82816282 	addhi	r6, r1, #536870920	; 0x20000008
    d07c:	803d8231 	eorshi	r8, sp, r1, lsr r2
    d080:	0292f1ef 	addseq	pc, r2, #-1073741765	; 0xc000003b
    d084:	03673c93 	cmneq	r7, #37632	; 0x9300
    d088:	e66556a0 	strbt	r5, [r5], -r0, lsr #13
    d08c:	6380a261 	orrvs	sl, r0, #268435462	; 0x10000006
    d090:	5061e664 	rsbpl	lr, r1, r4, ror #12
    d094:	e67100b0 			; <UNDEFINED> instruction: 0xe67100b0
    d098:	d092e061 	addsle	lr, r2, r1, rrx
    d09c:	3d220082 	stccc	0, cr0, [r2, #-520]!	; 0xfffffdf8
    d0a0:	00b2c047 	adcseq	ip, r2, r7, asr #32
    d0a4:	f080a070 			; <UNDEFINED> instruction: 0xf080a070
    d0a8:	30435922 	subcc	r5, r3, r2, lsr #18
    d0ac:	62c102b0 	sbcvs	r0, r1, #176, 4
    d0b0:	a0c00131 	sbcge	r0, r0, r1, lsr r1
    d0b4:	521e0080 	andspl	r0, lr, #128	; 0x80
    d0b8:	5322f043 	msrpl	CPSR_x, #67	; 0x43
    d0bc:	60f5a043 	rscsvs	sl, r5, r3, asr #32
    d0c0:	53396031 	teqpl	r9, #49	; 0x31
    d0c4:	10102063 	andsne	r2, r0, r3, rrx
    d0c8:	236f131a 	cmncs	pc, #1744830464	; 0x68000000
    d0cc:	1216116e 	andsne	r1, r6, #-2147483621	; 0x8000001b
    d0d0:	006b5416 	rsbeq	r5, fp, r6, lsl r4
    d0d4:	23d80370 	bicscs	r0, r8, #112, 6	; 0xc0000001
    d0d8:	270b0000 	strcs	r0, [fp, -r0]
    d0dc:	00005812 	andeq	r5, r0, r2, lsl r8
    d0e0:	1c100400 	cfldrsne	mvf0, [r0], {-0}
    d0e4:	10240000 	eorne	r0, r4, r0
    d0e8:	0300001c 	movweq	r0, #28
    d0ec:	000018f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    d0f0:	45122b0b 	ldrmi	r2, [r2, #-2827]	; 0xfffff4f5
    d0f4:	24000000 	strcs	r0, [r0], #-0
    d0f8:	00001c26 	andeq	r1, r0, r6, lsr #24
    d0fc:	00242903 	eoreq	r2, r4, r3, lsl #18
    d100:	122c0b00 	eorne	r0, ip, #0, 22
    d104:	0000006b 	andeq	r0, r0, fp, rrx
    d108:	001c3704 	andseq	r3, ip, r4, lsl #14
    d10c:	04fb0300 	ldrbteq	r0, [fp], #768	; 0x300
    d110:	2d0b0000 	stccs	0, cr0, [fp, #-0]
    d114:	00006b12 	andeq	r6, r0, r2, lsl fp
    d118:	0b080b00 	bleq	20fd20 <__ccfg+0x1efd78>
    d11c:	1ce20932 			; <UNDEFINED> instruction: 0x1ce20932
    d120:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
    d124:	0b000000 	bleq	d12c <__exidx_end+0x81fc>
    d128:	1c260734 	stcne	7, cr0, [r6], #-208	; 0xffffff30
    d12c:	01010000 	mrseq	r0, (UNDEF: 1)
    d130:	01200007 			; <UNDEFINED> instruction: 0x01200007
    d134:	0b000005 	bleq	d150 <__exidx_end+0x8220>
    d138:	1c260335 	stcne	3, cr0, [r6], #-212	; 0xffffff2c
    d13c:	01010000 	mrseq	r0, (UNDEF: 1)
    d140:	37200006 	strcc	r0, [r0, -r6]!
    d144:	0b000002 	bleq	d154 <__exidx_end+0x8224>
    d148:	1c260336 	stcne	3, cr0, [r6], #-216	; 0xffffff28
    d14c:	01010000 	mrseq	r0, (UNDEF: 1)
    d150:	3b200005 	blcc	80d16c <__ccfg+0x7ed1c4>
    d154:	0b000005 	bleq	d170 <__exidx_end+0x8240>
    d158:	1c260337 	stcne	3, cr0, [r6], #-220	; 0xffffff24
    d15c:	01010000 	mrseq	r0, (UNDEF: 1)
    d160:	c4200004 	strtgt	r0, [r0], #-4
    d164:	0b000007 	bleq	d188 <__exidx_end+0x8258>
    d168:	1c260338 	stcne	3, cr0, [r6], #-224	; 0xffffff20
    d16c:	04010000 	streq	r0, [r1], #-0
    d170:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    d174:	0b000005 	bleq	d190 <__exidx_end+0x8260>
    d178:	1c26073a 	stcne	7, cr0, [r6], #-232	; 0xffffff18
    d17c:	0c010000 	stceq	0, cr0, [r1], {-0}
    d180:	000006d2 	ldrdeq	r0, [r0], -r2
    d184:	26033c0b 	strcs	r3, [r3], -fp, lsl #24
    d188:	0200001c 	andeq	r0, r0, #28
    d18c:	000a7c0c 	andeq	r7, sl, ip, lsl #24
    d190:	033d0b00 	teqeq	sp, #0, 22
    d194:	00001c26 	andeq	r1, r0, r6, lsr #24
    d198:	07070c03 	streq	r0, [r7, -r3, lsl #24]
    d19c:	3f0b0000 	svccc	0x000b0000
    d1a0:	001c3708 	andseq	r3, ip, r8, lsl #14
    d1a4:	03000400 	movweq	r0, #1024	; 0x400
    d1a8:	00000289 	andeq	r0, r0, r9, lsl #5
    d1ac:	5403410b 	strpl	r4, [r3], #-267	; 0xfffffef5
    d1b0:	2400001c 	strcs	r0, [r0], #-28	; 0xffffffe4
    d1b4:	00001ce2 	andeq	r1, r0, r2, ror #25
    d1b8:	00054225 	andeq	r4, r5, r5, lsr #4
    d1bc:	1a430b00 	bne	10cfdc4 <__ccfg+0x10afe1c>
    d1c0:	00001cee 	andeq	r1, r0, lr, ror #25
    d1c4:	b1250101 			; <UNDEFINED> instruction: 0xb1250101
    d1c8:	0b000001 	bleq	d1d4 <__exidx_end+0x82a4>
    d1cc:	05de0e45 	ldrbeq	r0, [lr, #3653]	; 0xe45
    d1d0:	01010000 	mrseq	r0, (UNDEF: 1)
    d1d4:	00029225 	andeq	r9, r2, r5, lsr #4
    d1d8:	1e450b00 	vmlane.f64	d16, d5, d0
    d1dc:	000005de 	ldrdeq	r0, [r0], -lr
    d1e0:	080b0101 	stmdaeq	fp, {r0, r8}
    d1e4:	4e098f0c 	cdpmi	15, 0, cr8, cr9, cr12, {0}
    d1e8:	0c00001d 	stceq	0, cr0, [r0], {29}
    d1ec:	00000605 	andeq	r0, r0, r5, lsl #12
    d1f0:	6b0b900c 	blvs	2f1228 <__ccfg+0x2d1280>
    d1f4:	00000000 	andeq	r0, r0, r0
    d1f8:	000bae0c 	andeq	sl, fp, ip, lsl #28
    d1fc:	08910c00 	ldmeq	r1, {sl, fp}
    d200:	00001c10 	andeq	r1, r0, r0, lsl ip
    d204:	01ea0c04 	mvneq	r0, r4, lsl #24
    d208:	920c0000 	andls	r0, ip, #0
    d20c:	001c3210 	andseq	r3, ip, r0, lsl r2
    d210:	03000600 	movweq	r0, #1536	; 0x600
    d214:	00000945 	andeq	r0, r0, r5, asr #18
    d218:	1d03930c 	stcne	3, cr9, [r3, #-48]	; 0xffffffd0
    d21c:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    d220:	00001d4e 	andeq	r1, r0, lr, asr #26
    d224:	00001d65 	andeq	r1, r0, r5, ror #26
    d228:	13250026 			; <UNDEFINED> instruction: 0x13250026
    d22c:	0c000007 	stceq	0, cr0, [r0], {7}
    d230:	1d5a0f99 	ldclne	15, cr0, [sl, #-612]	; 0xfffffd9c
    d234:	01010000 	mrseq	r0, (UNDEF: 1)
    d238:	910d010b 	tstls	sp, fp, lsl #2
    d23c:	001d9d09 	andseq	r9, sp, r9, lsl #26
    d240:	070e2000 	streq	r2, [lr, -r0]
    d244:	930d0000 	movwls	r0, #53248	; 0xd000
    d248:	001c2607 	andseq	r2, ip, r7, lsl #12
    d24c:	01070100 	mrseq	r0, (UNDEF: 23)
    d250:	047c2000 	ldrbteq	r2, [ip], #-0
    d254:	940d0000 	strls	r0, [sp], #-0
    d258:	001c2603 	andseq	r2, ip, r3, lsl #12
    d25c:	00010100 	andeq	r0, r1, r0, lsl #2
    d260:	d0030000 	andle	r0, r3, r0
    d264:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    d268:	1d730396 	ldclne	3, cr0, [r3, #-600]!	; 0xfffffda8
    d26c:	9d040000 	stcls	0, cr0, [r4, #-0]
    d270:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    d274:	00001da9 	andeq	r1, r0, r9, lsr #27
    d278:	00001db9 			; <UNDEFINED> instruction: 0x00001db9
    d27c:	ae040026 	cdpge	0, 0, cr0, cr4, cr6, {1}
    d280:	2500001d 	strcs	r0, [r0, #-29]	; 0xffffffe3
    d284:	0000034b 	andeq	r0, r0, fp, asr #6
    d288:	b9179c0d 	ldmdblt	r7, {r0, r2, r3, sl, fp, ip, pc}
    d28c:	0100001d 	tsteq	r0, sp, lsl r0
    d290:	1c1c0901 			; <UNDEFINED> instruction: 0x1c1c0901
    d294:	1dd70000 	ldclne	0, cr0, [r7]
    d298:	00260000 	eoreq	r0, r6, r0
    d29c:	001dcc04 	andseq	ip, sp, r4, lsl #24
    d2a0:	04bb2500 	ldrteq	r2, [fp], #1280	; 0x500
    d2a4:	060e0000 	streq	r0, [lr], -r0
    d2a8:	001dd713 	andseq	sp, sp, r3, lsl r7
    d2ac:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    d2b0:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
    d2b4:	370ec30c 	strcc	ip, [lr, -ip, lsl #6]
    d2b8:	0100001c 	tsteq	r0, ip, lsl r0
    d2bc:	08fe0601 	ldmeq	lr!, {r0, r9, sl}^
    d2c0:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    d2c4:	1e051001 	cdpne	0, 0, cr1, cr5, cr1, {0}
    d2c8:	04100000 	ldreq	r0, [r0], #-0
    d2cc:	00001e0b 	andeq	r1, r0, fp, lsl #28
    d2d0:	1e17011e 	mrcne	1, 0, r0, cr7, cr14, {0}
    d2d4:	10150000 	andsne	r0, r5, r0
    d2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    d2dc:	0005eb09 	andeq	lr, r5, r9, lsl #22
    d2e0:	001e2200 	andseq	r2, lr, r0, lsl #4
    d2e4:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    d2e8:	00001e17 	andeq	r1, r0, r7, lsl lr
    d2ec:	0007671f 	andeq	r6, r7, pc, lsl r7
    d2f0:	017f0f00 	cmneq	pc, r0, lsl #30
    d2f4:	001e2216 	andseq	r2, lr, r6, lsl r2
    d2f8:	1f010100 	svcne	0x00010100
    d2fc:	0000032e 	andeq	r0, r0, lr, lsr #6
    d300:	1401820f 	strne	r8, [r1], #-527	; 0xfffffdf1
    d304:	00001c43 	andeq	r1, r0, r3, asr #24
    d308:	0b1f0101 	bleq	7cd714 <__ccfg+0x7ad76c>
    d30c:	0f000003 	svceq	0x00000003
    d310:	370e02d8 			; <UNDEFINED> instruction: 0x370e02d8
    d314:	0100001c 	tsteq	r0, ip, lsl r0
    d318:	0f081a01 	svceq	0x00081a01
    d31c:	7b090303 	blvc	24df30 <__ccfg+0x22df88>
    d320:	1700001e 	smladne	r0, lr, r0, r0
    d324:	0000375c 	andeq	r3, r0, ip, asr r7
    d328:	0703070f 	streq	r0, [r3, -pc, lsl #14]
    d32c:	00001c10 	andeq	r1, r0, r0, lsl ip
    d330:	0b061700 	bleq	192f38 <__ccfg+0x172f90>
    d334:	080f0000 	stmdaeq	pc, {}	; <UNPREDICTABLE>
    d338:	1c480803 	mcrrne	8, 0, r0, r8, cr3
    d33c:	00040000 	andeq	r0, r4, r0
    d340:	0003c306 	andeq	ip, r3, r6, lsl #6
    d344:	03090f00 	movweq	r0, #40704	; 0x9f00
    d348:	001e5403 	andseq	r5, lr, r3, lsl #8
    d34c:	00331900 	eorseq	r1, r3, r0, lsl #18
    d350:	0f300000 	svceq	0x00300000
    d354:	eb08030b 	bl	20df88 <__ccfg+0x1edfe0>
    d358:	1700001e 	smladne	r0, lr, r0, r0
    d35c:	00001a07 	andeq	r1, r0, r7, lsl #20
    d360:	0803140f 	stmdaeq	r3, {r0, r1, r2, r3, sl, ip}
    d364:	00001c10 	andeq	r1, r0, r0, lsl ip
    d368:	08a81700 	stmiaeq	r8!, {r8, r9, sl, ip}
    d36c:	150f0000 	strne	r0, [pc, #-0]	; d374 <__exidx_end+0x8444>
    d370:	1c100803 	ldcne	8, cr0, [r0], {3}
    d374:	17020000 	strne	r0, [r2, -r0]
    d378:	000048cc 	andeq	r4, r0, ip, asr #17
    d37c:	0b03160f 	bleq	d2bc0 <__ccfg+0xb2c18>
    d380:	00001df8 	strdeq	r1, [r0], -r8
    d384:	432f1704 			; <UNDEFINED> instruction: 0x432f1704
    d388:	170f0000 	strne	r0, [pc, -r0]
    d38c:	1c480903 	mcrrne	9, 0, r0, r8, cr3	; <UNPREDICTABLE>
    d390:	17080000 	strne	r0, [r8, -r0]
    d394:	00000007 	andeq	r0, r0, r7
    d398:	0f03180f 	svceq	0x0003180f
    d39c:	00001eeb 	andeq	r1, r0, fp, ror #29
    d3a0:	0726170c 	streq	r1, [r6, -ip, lsl #14]!
    d3a4:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    d3a8:	1efb1503 	cdpne	5, 15, cr1, cr11, cr3, {0}
    d3ac:	002c0000 	eoreq	r0, ip, r0
    d3b0:	001e7b09 	andseq	r7, lr, r9, lsl #22
    d3b4:	001efb00 	andseq	pc, lr, r0, lsl #22
    d3b8:	00910a00 	addseq	r0, r1, r0, lsl #20
    d3bc:	00030000 	andeq	r0, r3, r0
    d3c0:	1e880410 	mcrne	4, 4, r0, cr8, cr0, {0}
    d3c4:	9d060000 	stcls	0, cr0, [r6, #-0]
    d3c8:	0f000008 	svceq	0x00000008
    d3cc:	881b031c 	ldmdahi	fp, {r2, r3, r4, r8, r9}
    d3d0:	1f00001e 	svcne	0x0000001e
    d3d4:	0000087d 	andeq	r0, r0, sp, ror r8
    d3d8:	14031e0f 	strne	r1, [r3], #-3599	; 0xfffff1f1
    d3dc:	00001f1d 	andeq	r1, r0, sp, lsl pc
    d3e0:	04100101 	ldreq	r0, [r0], #-257	; 0xfffffeff
    d3e4:	00001f01 	andeq	r1, r0, r1, lsl #30
    d3e8:	00054e25 	andeq	r4, r5, r5, lsr #28
    d3ec:	131d1000 	tstne	sp, #0
    d3f0:	00001c10 	andeq	r1, r0, r0, lsl ip
    d3f4:	3e250101 	sufccs	f0, f5, f1
    d3f8:	10000002 	andne	r0, r0, r2
    d3fc:	1c211a1e 			; <UNDEFINED> instruction: 0x1c211a1e
    d400:	01010000 	mrseq	r0, (UNDEF: 1)
    d404:	0008ea25 	andeq	lr, r8, r5, lsr #20
    d408:	241e1000 	ldrcs	r1, [lr], #-0
    d40c:	00001c21 	andeq	r1, r0, r1, lsr #24
    d410:	06250101 	strteq	r0, [r5], -r1, lsl #2
    d414:	10000009 	andne	r0, r0, r9
    d418:	1f1d1422 	svcne	0x001d1422
    d41c:	01010000 	mrseq	r0, (UNDEF: 1)
    d420:	001b1425 	andseq	r1, fp, r5, lsr #8
    d424:	27391100 	ldrcs	r1, [r9, -r0, lsl #2]!
    d428:	00000d5e 	andeq	r0, r0, lr, asr sp
    d42c:	bf250101 	svclt	0x00250101
    d430:	1100001d 	tstne	r0, sp, lsl r0
    d434:	09f1153a 	ldmibeq	r1!, {r1, r3, r4, r5, r8, sl, ip}^
    d438:	01010000 	mrseq	r0, (UNDEF: 1)
    d43c:	00222525 	eoreq	r2, r2, r5, lsr #10
    d440:	1a3b1100 	bne	ed1848 <__ccfg+0xeb18a0>
    d444:	00000bd8 	ldrdeq	r0, [r0], -r8
    d448:	b8250101 	stmdalt	r5!, {r0, r8}
    d44c:	11000020 	tstne	r0, r0, lsr #32
    d450:	0c741a3c 			; <UNDEFINED> instruction: 0x0c741a3c
    d454:	01010000 	mrseq	r0, (UNDEF: 1)
    d458:	00006b09 	andeq	r6, r0, r9, lsl #22
    d45c:	001fa300 	andseq	sl, pc, r0, lsl #6
    d460:	00910a00 	addseq	r0, r1, r0, lsl #20
    d464:	00140000 	andseq	r0, r4, r0
    d468:	00248227 	eoreq	r8, r4, r7, lsr #4
    d46c:	113d1200 	teqne	sp, r0, lsl #4
    d470:	00001f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    d474:	00b80305 	adcseq	r0, r8, r5, lsl #6
    d478:	5b282000 	blpl	a15480 <__ccfg+0x9f54d8>
    d47c:	1200001f 	andne	r0, r0, #31
    d480:	03052072 	movweq	r2, #20594	; 0x5072
    d484:	20000054 	andcs	r0, r0, r4, asr r0
    d488:	001f6928 	andseq	r6, pc, r8, lsr #18
    d48c:	0e961200 	cdpeq	2, 9, cr1, cr6, cr0, {0}
    d490:	003c0305 	eorseq	r0, ip, r5, lsl #6
    d494:	77282000 	strvc	r2, [r8, -r0]!
    d498:	1200001f 	andne	r0, r0, #31
    d49c:	030513ad 	movweq	r1, #21421	; 0x53ad
    d4a0:	200000a0 	andcs	r0, r0, r0, lsr #1
    d4a4:	001f8528 	andseq	r8, pc, r8, lsr #10
    d4a8:	13c21200 	bicne	r1, r2, #0, 4
    d4ac:	007c0305 	rsbseq	r0, ip, r5, lsl #6
    d4b0:	8a002000 	bhi	154b8 <__exidx_end+0x10588>
    d4b4:	04000001 	streq	r0, [r0], #-1
    d4b8:	002ecb00 	eoreq	ip, lr, r0, lsl #22
    d4bc:	05010400 	streq	r0, [r1, #-1024]	; 0xfffffc00
    d4c0:	01000025 	tsteq	r0, r5, lsr #32
    d4c4:	000024ea 	andeq	r2, r0, sl, ror #9
    d4c8:	000025cc 	andeq	r2, r0, ip, asr #11
    d4cc:	00000f80 	andeq	r0, r0, r0, lsl #31
    d4d0:	00000000 	andeq	r0, r0, r0
    d4d4:	00006966 	andeq	r6, r0, r6, ror #18
    d4d8:	de060102 	adfles	f0, f6, f2
    d4dc:	03000008 	movweq	r0, #8
    d4e0:	00000833 	andeq	r0, r0, r3, lsr r8
    d4e4:	00371d02 	eorseq	r1, r7, r2, lsl #26
    d4e8:	01020000 	mrseq	r0, (UNDEF: 2)
    d4ec:	0008dc08 	andeq	sp, r8, r8, lsl #24
    d4f0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    d4f4:	000007a3 	andeq	r0, r0, r3, lsr #15
    d4f8:	aa070202 	bge	1cdd08 <__ccfg+0x1add60>
    d4fc:	02000009 	andeq	r0, r0, #9
    d500:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    d504:	f3030000 	vhadd.u8	d0, d3, d0
    d508:	02000008 	andeq	r0, r0, #8
    d50c:	00005e41 	andeq	r5, r0, r1, asr #28
    d510:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d514:	00000397 	muleq	r0, r7, r3
    d518:	e8050802 	stmda	r5, {r1, fp}
    d51c:	02000005 	andeq	r0, r0, #5
    d520:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
    d524:	04040000 	streq	r0, [r4], #-0
    d528:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    d52c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d530:	0000039c 	muleq	r0, ip, r3
    d534:	00083503 	andeq	r3, r8, r3, lsl #10
    d538:	2c140300 	ldccs	3, cr0, [r4], {-0}
    d53c:	03000000 	movweq	r0, #0
    d540:	000008f5 	strdeq	r0, [r0], -r5
    d544:	00532003 	subseq	r2, r3, r3
    d548:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    d54c:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    d550:	0000a233 	andeq	sl, r0, r3, lsr r2
    d554:	a8040500 	stmdage	r4, {r8, sl}
    d558:	06000000 	streq	r0, [r0], -r0
    d55c:	0025ba03 	eoreq	fp, r5, r3, lsl #20
    d560:	b4340400 	ldrtlt	r0, [r4], #-1024	; 0xfffffc00
    d564:	05000000 	streq	r0, [r0, #-0]
    d568:	0000ba04 	andeq	fp, r0, r4, lsl #20
    d56c:	00c50700 	sbceq	r0, r5, r0, lsl #14
    d570:	81080000 	mrshi	r0, (UNDEF: 8)
    d574:	00000000 	andeq	r0, r0, r0
    d578:	0024dd09 	eoreq	sp, r4, r9, lsl #26
    d57c:	1c990500 	cfldr32ne	mvfx0, [r9], {0}
    d580:	28000030 	stmdacs	r0, {r4, r5}
    d584:	01000000 	mrseq	r0, (UNDEF: 0)
    d588:	00010b9c 	muleq	r1, ip, fp
    d58c:	25b50a00 	ldrcs	r0, [r5, #2560]!	; 0xa00
    d590:	35010000 	strcc	r0, [r1, #-0]
    d594:	00000097 	muleq	r0, r7, r0
    d598:	000032c6 	andeq	r3, r0, r6, asr #5
    d59c:	00248d0b 	eoreq	r8, r4, fp, lsl #26
    d5a0:	0b370100 	bleq	dcd9a8 <__ccfg+0xdada00>
    d5a4:	0b000001 	bleq	d5b0 <__exidx_end+0x8680>
    d5a8:	0c000033 	stceq	0, cr0, [r0], {51}	; 0x33
    d5ac:	00003024 	andeq	r3, r0, r4, lsr #32
    d5b0:	00000177 	andeq	r0, r0, r7, ror r1
    d5b4:	00303e0d 	eorseq	r3, r0, sp, lsl #28
    d5b8:	00018200 	andeq	r8, r1, r0, lsl #4
    d5bc:	01020000 	mrseq	r0, (UNDEF: 2)
    d5c0:	00116a02 	andseq	r6, r1, r2, lsl #20
    d5c4:	24990e00 	ldrcs	r0, [r9], #3584	; 0xe00
    d5c8:	9a050000 	bls	14d5d0 <__ccfg+0x12d628>
    d5cc:	00000000 	andeq	r0, r0, r0
    d5d0:	0000002c 	andeq	r0, r0, ip, lsr #32
    d5d4:	01779c01 	cmneq	r7, r1, lsl #24
    d5d8:	b50a0000 	strlt	r0, [sl, #-0]
    d5dc:	01000025 	tsteq	r0, r5, lsr #32
    d5e0:	0000a940 	andeq	sl, r0, r0, asr #18
    d5e4:	00334000 	eorseq	r4, r3, r0
    d5e8:	262c0a00 	strtcs	r0, [ip], -r0, lsl #20
    d5ec:	40010000 	andmi	r0, r1, r0
    d5f0:	00000081 	andeq	r0, r0, r1, lsl #1
    d5f4:	00003385 	andeq	r3, r0, r5, lsl #7
    d5f8:	00248d0b 	eoreq	r8, r4, fp, lsl #26
    d5fc:	0b420100 	bleq	108da04 <__ccfg+0x106da5c>
    d600:	a6000001 	strge	r0, [r0], -r1
    d604:	0c000033 	stceq	0, cr0, [r0], {51}	; 0x33
    d608:	00000000 	andeq	r0, r0, r0
    d60c:	00000177 	andeq	r0, r0, r7, ror r1
    d610:	0000000f 	andeq	r0, r0, pc
    d614:	00016d00 	andeq	r6, r1, r0, lsl #26
    d618:	50011000 	andpl	r1, r1, r0
    d61c:	00007702 	andeq	r7, r0, r2, lsl #14
    d620:	0000000d 	andeq	r0, r0, sp
    d624:	00018200 	andeq	r8, r1, r0, lsl #4
    d628:	bf110000 	svclt	0x00110000
    d62c:	06000024 	streq	r0, [r0], -r4, lsr #32
    d630:	00008c6a 	andeq	r8, r0, sl, ror #24
    d634:	24ce1100 	strbcs	r1, [lr], #256	; 0x100
    d638:	84060000 	strhi	r0, [r6], #-0
    d63c:	0000008c 	andeq	r0, r0, ip, lsl #1
    d640:	0000d500 	andeq	sp, r0, r0, lsl #10
    d644:	b7000400 	strlt	r0, [r0, -r0, lsl #8]
    d648:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    d64c:	00250501 	eoreq	r0, r5, r1, lsl #10
    d650:	26780100 	ldrbtcs	r0, [r8], -r0, lsl #2
    d654:	25cc0000 	strbcs	r0, [ip]
    d658:	0f980000 	svceq	0x00980000
    d65c:	00000000 	andeq	r0, r0, r0
    d660:	6b060000 	blvs	18d668 <__ccfg+0x16d6c0>
    d664:	6f020000 	svcvs	0x00020000
    d668:	02000026 	andeq	r0, r0, #38	; 0x26
    d66c:	0000301b 	andeq	r3, r0, fp, lsl r0
    d670:	06010300 	streq	r0, [r1], -r0, lsl #6
    d674:	000008de 	ldrdeq	r0, [r0], -lr
    d678:	dc080103 	stfles	f0, [r8], {3}
    d67c:	03000008 	movweq	r0, #8
    d680:	07a30502 	streq	r0, [r3, r2, lsl #10]!
    d684:	02030000 	andeq	r0, r3, #0
    d688:	0009aa07 	andeq	sl, r9, r7, lsl #20
    d68c:	26650200 	strbtcs	r0, [r5], -r0, lsl #4
    d690:	3f020000 	svccc	0x00020000
    d694:	00000057 	andeq	r0, r0, r7, asr r0
    d698:	ed050403 	cfstrs	mvf0, [r5, #-12]
    d69c:	03000005 	movweq	r0, #5
    d6a0:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
    d6a4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    d6a8:	0005e805 	andeq	lr, r5, r5, lsl #16
    d6ac:	07080300 	streq	r0, [r8, -r0, lsl #6]
    d6b0:	00000392 	muleq	r0, r2, r3
    d6b4:	69050404 	stmdbvs	r5, {r2, sl}
    d6b8:	0300746e 	movweq	r7, #1134	; 0x46e
    d6bc:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    d6c0:	71020000 	mrsvc	r0, (UNDEF: 2)
    d6c4:	03000026 	movweq	r0, #38	; 0x26
    d6c8:	00002513 	andeq	r2, r0, r3, lsl r5
    d6cc:	26670200 	strbtcs	r0, [r7], -r0, lsl #4
    d6d0:	1f030000 	svcne	0x00030000
    d6d4:	0000004c 	andeq	r0, r0, ip, asr #32
    d6d8:	00263605 	eoreq	r3, r6, r5, lsl #12
    d6dc:	8caa0400 	cfstrshi	mvf0, [sl]
    d6e0:	44000000 	strmi	r0, [r0], #-0
    d6e4:	30000030 	andcc	r0, r0, r0, lsr r0
    d6e8:	01000000 	mrseq	r0, (UNDEF: 0)
    d6ec:	26a9069c 	ssatcs	r0, #10, ip, lsl #13
    d6f0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    d6f4:	0000008c 	andeq	r0, r0, ip, lsl #1
    d6f8:	000033db 	ldrdeq	r3, [r0], -fp
    d6fc:	00269a06 	eoreq	r9, r6, r6, lsl #20
    d700:	8c3f0100 	ldfhis	f0, [pc], #-0	; d708 <__exidx_end+0x87d8>
    d704:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    d708:	07000033 	smladxeq	r0, r3, r0, r0
    d70c:	00002658 	andeq	r2, r0, r8, asr r6
    d710:	00814001 	addeq	r4, r1, r1
    d714:	51010000 	mrspl	r0, (UNDEF: 1)
    d718:	01430000 	mrseq	r0, (UNDEF: 67)
    d71c:	00040000 	andeq	r0, r4, r0
    d720:	00003026 	andeq	r3, r0, r6, lsr #32
    d724:	25050104 	strcs	r0, [r5, #-260]	; 0xfffffefc
    d728:	5a010000 	bpl	4d730 <__ccfg+0x2d788>
    d72c:	cc000027 	stcgt	0, cr0, [r0], {39}	; 0x27
    d730:	a8000025 	stmdage	r0, {r0, r2, r5}
    d734:	0000000f 	andeq	r0, r0, pc
    d738:	71000000 	mrsvc	r0, (UNDEF: 0)
    d73c:	0200006c 	andeq	r0, r0, #108	; 0x6c
    d740:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    d744:	01020000 	mrseq	r0, (UNDEF: 2)
    d748:	0008dc08 	andeq	sp, r8, r8, lsl #24
    d74c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    d750:	000007a3 	andeq	r0, r0, r3, lsr #15
    d754:	aa070202 	bge	1cdf64 <__ccfg+0x1adfbc>
    d758:	02000009 	andeq	r0, r0, #9
    d75c:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    d760:	f3030000 	vhadd.u8	d0, d3, d0
    d764:	02000008 	andeq	r0, r0, #8
    d768:	00005341 	andeq	r5, r0, r1, asr #6
    d76c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d770:	00000397 	muleq	r0, r7, r3
    d774:	e8050802 	stmda	r5, {r1, fp}
    d778:	03000005 	movweq	r0, #5
    d77c:	00002704 	andeq	r2, r0, r4, lsl #14
    d780:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    d784:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d788:	00039207 	andeq	r9, r3, r7, lsl #4
    d78c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    d790:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d794:	9c070402 	cfstrsls	mvf0, [r7], {2}
    d798:	03000003 	movweq	r0, #3
    d79c:	000008f5 	strdeq	r0, [r0], -r5
    d7a0:	00482003 	subeq	r2, r8, r3
    d7a4:	06030000 	streq	r0, [r3], -r0
    d7a8:	03000027 	movweq	r0, #39	; 0x27
    d7ac:	00006126 	andeq	r6, r0, r6, lsr #2
    d7b0:	26cf0500 	strbcs	r0, [pc], r0, lsl #10
    d7b4:	45040000 	strmi	r0, [r4, #-0]
    d7b8:	00008103 	andeq	r8, r0, r3, lsl #2
    d7bc:	00307400 	eorseq	r7, r0, r0, lsl #8
    d7c0:	00002000 	andeq	r2, r0, r0
    d7c4:	dd9c0100 	ldfles	f0, [ip]
    d7c8:	06000000 	streq	r0, [r0], -r0
    d7cc:	000026c0 	andeq	r2, r0, r0, asr #13
    d7d0:	00814001 	addeq	r4, r1, r1
    d7d4:	34290000 	strtcc	r0, [r9], #-0
    d7d8:	0f060000 	svceq	0x00060000
    d7dc:	01000027 	tsteq	r0, r7, lsr #32
    d7e0:	00008141 	andeq	r8, r0, r1, asr #2
    d7e4:	00343c00 	eorseq	r3, r4, r0, lsl #24
    d7e8:	26f20700 	ldrbtcs	r0, [r2], r0, lsl #14
    d7ec:	42010000 	andmi	r0, r1, #0
    d7f0:	00000081 	andeq	r0, r0, r1, lsl #1
    d7f4:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    d7f8:	00002721 	andeq	r2, r0, r1, lsr #14
    d7fc:	8c035304 	stchi	3, cr5, [r3], {4}
    d800:	94000000 	strls	r0, [r0], #-0
    d804:	18000030 	stmdane	r0, {r4, r5}
    d808:	01000000 	mrseq	r0, (UNDEF: 0)
    d80c:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    d810:	01080800 	tsteq	r8, r0, lsl #16
    d814:	00011659 	andeq	r1, r1, r9, asr r6
    d818:	26b40900 	ldrtcs	r0, [r4], r0, lsl #18
    d81c:	5a010000 	bpl	4d824 <__ccfg+0x2d87c>
    d820:	0000008c 	andeq	r0, r0, ip, lsl #1
    d824:	00274d09 	eoreq	r4, r7, r9, lsl #26
    d828:	2f5b0100 	svccs	0x005b0100
    d82c:	00000001 	andeq	r0, r0, r1
    d830:	0027420a 	eoreq	r4, r7, sl, lsl #4
    d834:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    d838:	07000000 	streq	r0, [r0, -r0]
    d83c:	000026f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    d840:	00815d01 	addeq	r5, r1, r1, lsl #26
    d844:	51010000 	mrspl	r0, (UNDEF: 1)
    d848:	00810b00 	addeq	r0, r1, r0, lsl #22
    d84c:	013f0000 	teqeq	pc, r0
    d850:	3f0c0000 	svccc	0x000c0000
    d854:	01000001 	tsteq	r0, r1
    d858:	07040200 	streq	r0, [r4, -r0, lsl #4]
    d85c:	00002779 	andeq	r2, r0, r9, ror r7
    d860:	00013600 	andeq	r3, r1, r0, lsl #12
    d864:	d0000400 	andle	r0, r0, r0, lsl #8
    d868:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    d86c:	00250501 	eoreq	r0, r5, r1, lsl #10
    d870:	27b70100 	ldrcs	r0, [r7, r0, lsl #2]!
    d874:	25cc0000 	strbcs	r0, [ip]
    d878:	0fc00000 	svceq	0x00c00000
    d87c:	00000000 	andeq	r0, r0, r0
    d880:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    d884:	01020000 	mrseq	r0, (UNDEF: 2)
    d888:	0008de06 	andeq	sp, r8, r6, lsl #28
    d88c:	08010200 	stmdaeq	r1, {r9}
    d890:	000008dc 	ldrdeq	r0, [r0], -ip
    d894:	a3050202 	movwge	r0, #20994	; 0x5202
    d898:	02000007 	andeq	r0, r0, #7
    d89c:	09aa0702 	stmibeq	sl!, {r1, r8, r9, sl}
    d8a0:	04020000 	streq	r0, [r2], #-0
    d8a4:	0005ed05 	andeq	lr, r5, r5, lsl #26
    d8a8:	08f30300 	ldmeq	r3!, {r8, r9}^
    d8ac:	41020000 	mrsmi	r0, (UNDEF: 2)
    d8b0:	00000053 	andeq	r0, r0, r3, asr r0
    d8b4:	97070402 	strls	r0, [r7, -r2, lsl #8]
    d8b8:	02000003 	andeq	r0, r0, #3
    d8bc:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
    d8c0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    d8c4:	00039207 	andeq	r9, r3, r7, lsl #4
    d8c8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    d8cc:	00746e69 	rsbseq	r6, r4, r9, ror #28
    d8d0:	9c070402 	cfstrsls	mvf0, [r7], {2}
    d8d4:	03000003 	movweq	r0, #3
    d8d8:	000008f5 	strdeq	r0, [r0], -r5
    d8dc:	00482003 	subeq	r2, r8, r3
    d8e0:	bf050000 	svclt	0x00050000
    d8e4:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    d8e8:	0000766a 	andeq	r7, r0, sl, ror #12
    d8ec:	0030ac00 	eorseq	sl, r0, r0, lsl #24
    d8f0:	00000800 	andeq	r0, r0, r0, lsl #16
    d8f4:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    d8f8:	06000000 	streq	r0, [r0], -r0
    d8fc:	000027a5 	andeq	r2, r0, r5, lsr #15
    d900:	00767701 	rsbseq	r7, r6, r1, lsl #14
    d904:	05000000 	streq	r0, [r0, #-0]
    d908:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    d90c:	00767804 	rsbseq	r7, r6, r4, lsl #16
    d910:	00000000 	andeq	r0, r0, r0
    d914:	00060000 	andeq	r0, r6, r0
    d918:	9c010000 	stcls	0, cr0, [r1], {-0}
    d91c:	000000cb 	andeq	r0, r0, fp, asr #1
    d920:	0027a506 	eoreq	sl, r7, r6, lsl #10
    d924:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    d928:	00000000 	andeq	r0, r0, r0
    d92c:	0024ce05 	eoreq	ip, r4, r5, lsl #28
    d930:	76840400 	strvc	r0, [r4], r0, lsl #8
    d934:	b4000000 	strlt	r0, [r0], #-0
    d938:	08000030 	stmdaeq	r0, {r4, r5}
    d93c:	01000000 	mrseq	r0, (UNDEF: 0)
    d940:	0000f19c 	muleq	r0, ip, r1
    d944:	27a50700 	strcs	r0, [r5, r0, lsl #14]!
    d948:	0f010000 	svceq	0x00010000
    d94c:	00007601 	andeq	r7, r0, r1, lsl #12
    d950:	82080000 	andhi	r0, r8, #0
    d954:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    d958:	0076015b 	rsbseq	r0, r6, fp, asr r1
    d95c:	00000000 	andeq	r0, r0, r0
    d960:	00060000 	andeq	r0, r6, r0
    d964:	9c010000 	stcls	0, cr0, [r1], {-0}
    d968:	00000118 	andeq	r0, r0, r8, lsl r1
    d96c:	0027a507 	eoreq	sl, r7, r7, lsl #10
    d970:	015a0100 	cmpeq	sl, r0, lsl #2
    d974:	00000076 	andeq	r0, r0, r6, ror r0
    d978:	27960900 	ldrcs	r0, [r6, r0, lsl #18]
    d97c:	6c040000 	stcvs	0, cr0, [r4], {-0}
    d980:	00000001 	andeq	r0, r0, r1
    d984:	00000800 	andeq	r0, r0, r0, lsl #16
    d988:	0a9c0100 	beq	fe70dd90 <_estack+0xde708d90>
    d98c:	000027ad 	andeq	r2, r0, sp, lsr #15
    d990:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    d994:	01000000 	mrseq	r0, (UNDEF: 0)
    d998:	bf000050 	svclt	0x00000050
    d99c:	04000008 	streq	r0, [r0], #-8
    d9a0:	00318000 	eorseq	r8, r1, r0
    d9a4:	05010400 	streq	r0, [r1, #-1024]	; 0xfffffc00
    d9a8:	01000025 	tsteq	r0, r5, lsr #32
    d9ac:	000028ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    d9b0:	000025cc 	andeq	r2, r0, ip, asr #11
    d9b4:	00001008 	andeq	r1, r0, r8
    d9b8:	00000000 	andeq	r0, r0, r0
    d9bc:	00006fbe 			; <UNDEFINED> instruction: 0x00006fbe
    d9c0:	de060102 	adfles	f0, f6, f2
    d9c4:	03000008 	movweq	r0, #8
    d9c8:	00000833 	andeq	r0, r0, r3, lsr r8
    d9cc:	00371d03 	eorseq	r1, r7, r3, lsl #26
    d9d0:	01020000 	mrseq	r0, (UNDEF: 2)
    d9d4:	0008dc08 	andeq	sp, r8, r8, lsl #24
    d9d8:	2ca60300 	stccs	3, cr0, [r6]
    d9dc:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    d9e0:	00000049 	andeq	r0, r0, r9, asr #32
    d9e4:	a3050202 	movwge	r0, #20994	; 0x5202
    d9e8:	03000007 	movweq	r0, #7
    d9ec:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    d9f0:	005b2b03 	subseq	r2, fp, r3, lsl #22
    d9f4:	02020000 	andeq	r0, r2, #0
    d9f8:	0009aa07 	andeq	sl, r9, r7, lsl #20
    d9fc:	26650300 	strbtcs	r0, [r5], -r0, lsl #6
    da00:	3f030000 	svccc	0x00030000
    da04:	0000006d 	andeq	r0, r0, sp, rrx
    da08:	ed050402 	cfstrs	mvf0, [r5, #-8]
    da0c:	03000005 	movweq	r0, #5
    da10:	000008f3 	strdeq	r0, [r0], -r3
    da14:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    da18:	04020000 	streq	r0, [r2], #-0
    da1c:	00039707 	andeq	r9, r3, r7, lsl #14
    da20:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    da24:	000005e8 	andeq	r0, r0, r8, ror #11
    da28:	92070802 	andls	r0, r7, #131072	; 0x20000
    da2c:	04000003 	streq	r0, [r0], #-3
    da30:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    da34:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    da38:	00039c07 	andeq	r9, r3, r7, lsl #24
    da3c:	08350300 	ldmdaeq	r5!, {r8, r9}
    da40:	14040000 	strne	r0, [r4], #-0
    da44:	0000002c 	andeq	r0, r0, ip, lsr #32
    da48:	002ca803 	eoreq	sl, ip, r3, lsl #16
    da4c:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    da50:	03000000 	movweq	r0, #0
    da54:	000003d2 	ldrdeq	r0, [r0], -r2
    da58:	00501a04 	subseq	r1, r0, r4, lsl #20
    da5c:	67030000 	strvs	r0, [r3, -r0]
    da60:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    da64:	0000621f 	andeq	r6, r0, pc, lsl r2
    da68:	08f50300 	ldmeq	r5!, {r8, r9}^
    da6c:	20040000 	andcs	r0, r4, r0
    da70:	00000074 	andeq	r0, r0, r4, ror r0
    da74:	0024ae03 	eoreq	sl, r4, r3, lsl #28
    da78:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    da7c:	05000000 	streq	r0, [r0, #-0]
    da80:	0000ea04 	andeq	lr, r0, r4, lsl #20
    da84:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    da88:	000000f1 	strdeq	r0, [r0], -r1
    da8c:	0000fc07 	andeq	pc, r0, r7, lsl #24
    da90:	00a20800 	adceq	r0, r2, r0, lsl #16
    da94:	03000000 	movweq	r0, #0
    da98:	00002bcf 	andeq	r2, r0, pc, asr #23
    da9c:	01074206 	tsteq	r7, r6, lsl #4
    daa0:	04050000 	streq	r0, [r5], #-0
    daa4:	0000010d 	andeq	r0, r0, sp, lsl #2
    daa8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    daac:	00012600 	andeq	r2, r1, r0, lsl #12
    dab0:	01260800 			; <UNDEFINED> instruction: 0x01260800
    dab4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    dab8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    dabc:	000000ce 	andeq	r0, r0, lr, asr #1
    dac0:	a2040500 	andge	r0, r4, #0, 10
    dac4:	03000000 	movweq	r0, #0
    dac8:	00002d37 	andeq	r2, r0, r7, lsr sp
    dacc:	01374606 	teqeq	r7, r6, lsl #12
    dad0:	04050000 	streq	r0, [r5], #-0
    dad4:	0000013d 	andeq	r0, r0, sp, lsr r1
    dad8:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    dadc:	2d800300 	stccs	3, cr0, [r0]
    dae0:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    dae4:	00000137 	andeq	r0, r0, r7, lsr r1
    dae8:	002a6703 	eoreq	r6, sl, r3, lsl #14
    daec:	584a0600 	stmdapl	sl, {r9, sl}^
    daf0:	05000001 	streq	r0, [r0, #-1]
    daf4:	00015e04 	andeq	r5, r1, r4, lsl #28
    daf8:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    dafc:	016d0000 	cmneq	sp, r0
    db00:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    db04:	00000000 	andeq	r0, r0, r0
    db08:	00297603 	eoreq	r7, r9, r3, lsl #12
    db0c:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    db10:	03000001 	movweq	r0, #1
    db14:	000028d6 	ldrdeq	r2, [r0], -r6
    db18:	01074e06 	tsteq	r7, r6, lsl #28
    db1c:	66030000 	strvs	r0, [r3], -r0
    db20:	06000029 	streq	r0, [r0], -r9, lsr #32
    db24:	0000e451 	andeq	lr, r0, r1, asr r4
    db28:	27fb0300 	ldrbcs	r0, [fp, r0, lsl #6]!
    db2c:	53060000 	movwpl	r0, #24576	; 0x6000
    db30:	00000199 	muleq	r0, r9, r1
    db34:	019f0405 	orrseq	r0, pc, r5, lsl #8
    db38:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    db3c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    db40:	08000001 	stmdaeq	r0, {r0}
    db44:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    db48:	0000b808 	andeq	fp, r0, r8, lsl #16
    db4c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    db50:	05000000 	streq	r0, [r0, #-0]
    db54:	0000b804 	andeq	fp, r0, r4, lsl #16
    db58:	2be50300 	blcs	ff94e760 <_estack+0xdf949760>
    db5c:	57060000 	strpl	r0, [r6, -r0]
    db60:	000001c9 	andeq	r0, r0, r9, asr #3
    db64:	01cf0405 	biceq	r0, pc, r5, lsl #8
    db68:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    db6c:	e3000000 	movw	r0, #0
    db70:	08000001 	stmdaeq	r0, {r0}
    db74:	000001e3 	andeq	r0, r0, r3, ror #3
    db78:	0000ce08 	andeq	ip, r0, r8, lsl #28
    db7c:	04050000 	streq	r0, [r5], #-0
    db80:	000000ce 	andeq	r0, r0, lr, asr #1
    db84:	0029d903 	eoreq	sp, r9, r3, lsl #18
    db88:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    db8c:	03000001 	movweq	r0, #1
    db90:	00002a93 	muleq	r0, r3, sl
    db94:	01c95d06 	biceq	r5, r9, r6, lsl #26
    db98:	0d030000 	stceq	0, cr0, [r3, #-0]
    db9c:	06000028 	streq	r0, [r0], -r8, lsr #32
    dba0:	0001c960 	andeq	ip, r1, r0, ror #18
    dba4:	2bf30300 	blcs	ffcce7ac <_estack+0xdfcc97ac>
    dba8:	63060000 	movwvs	r0, #24576	; 0x6000
    dbac:	000000e4 	andeq	r0, r0, r4, ror #1
    dbb0:	00284b03 	eoreq	r4, r8, r3, lsl #22
    dbb4:	20650600 	rsbcs	r0, r5, r0, lsl #12
    dbb8:	05000002 	streq	r0, [r0, #-2]
    dbbc:	00022604 	andeq	r2, r2, r4, lsl #12
    dbc0:	02310700 	eorseq	r0, r1, #0, 14
    dbc4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    dbc8:	00000000 	andeq	r0, r0, r0
    dbcc:	002d9103 	eoreq	r9, sp, r3, lsl #2
    dbd0:	20670600 	rsbcs	r0, r7, r0, lsl #12
    dbd4:	03000002 	movweq	r0, #2
    dbd8:	00002ad5 	ldrdeq	r2, [r0], -r5
    dbdc:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    dbe0:	70030000 	andvc	r0, r3, r0
    dbe4:	0600002d 	streq	r0, [r0], -sp, lsr #32
    dbe8:	0000eb6b 	andeq	lr, r0, fp, ror #22
    dbec:	2aa20300 	bcs	fe88e7f4 <_estack+0xde8897f4>
    dbf0:	6d060000 	stcvs	0, cr0, [r6, #-0]
    dbf4:	000000eb 	andeq	r0, r0, fp, ror #1
    dbf8:	002ab403 	eoreq	fp, sl, r3, lsl #8
    dbfc:	eb6f0600 	bl	1bcf404 <__ccfg+0x1baf45c>
    dc00:	0b000000 	bleq	dc08 <__exidx_end+0x8cd8>
    dc04:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    dc08:	0c000003 	stceq	0, cr0, [r0], {3}
    dc0c:	00002a78 	andeq	r2, r0, r8, ror sl
    dc10:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    dc14:	0c000000 	stceq	0, cr0, [r0], {-0}
    dc18:	00002d63 	andeq	r2, r0, r3, ror #26
    dc1c:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    dc20:	0c040000 	stceq	0, cr0, [r4], {-0}
    dc24:	00002a89 	andeq	r2, r0, r9, lsl #21
    dc28:	01427e06 	cmpeq	r2, r6, lsl #28
    dc2c:	0c080000 	stceq	0, cr0, [r8], {-0}
    dc30:	00002c82 	andeq	r2, r0, r2, lsl #25
    dc34:	014d7f06 	cmpeq	sp, r6, lsl #30
    dc38:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    dc3c:	00002c94 	muleq	r0, r4, ip
    dc40:	016d8006 	cmneq	sp, r6
    dc44:	0c100000 	ldceq	0, cr0, [r0], {-0}
    dc48:	00002987 	andeq	r2, r0, r7, lsl #19
    dc4c:	01788106 	cmneq	r8, r6, lsl #2
    dc50:	0c140000 	ldceq	0, cr0, [r4], {-0}
    dc54:	00002943 	andeq	r2, r0, r3, asr #18
    dc58:	01838206 	orreq	r8, r3, r6, lsl #4
    dc5c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    dc60:	00002a7e 	andeq	r2, r0, lr, ror sl
    dc64:	018e8306 	orreq	r8, lr, r6, lsl #6
    dc68:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    dc6c:	00002c0d 	andeq	r2, r0, sp, lsl #24
    dc70:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    dc74:	0c200000 	stceq	0, cr0, [r0], #-0
    dc78:	00002a05 	andeq	r2, r0, r5, lsl #20
    dc7c:	01e98506 	mvneq	r8, r6, lsl #10
    dc80:	0c240000 	stceq	0, cr0, [r4], #-0
    dc84:	00002a5d 	andeq	r2, r0, sp, asr sl
    dc88:	01f48606 	mvnseq	r8, r6, lsl #12
    dc8c:	0c280000 	stceq	0, cr0, [r8], #-0
    dc90:	00002cc2 	andeq	r2, r0, r2, asr #25
    dc94:	01ff8706 	mvnseq	r8, r6, lsl #14
    dc98:	0c2c0000 	stceq	0, cr0, [ip], #-0
    dc9c:	000029a2 	andeq	r2, r0, r2, lsr #19
    dca0:	02158806 	andseq	r8, r5, #393216	; 0x60000
    dca4:	0c300000 	ldceq	0, cr0, [r0], #-0
    dca8:	00002cb0 			; <UNDEFINED> instruction: 0x00002cb0
    dcac:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    dcb0:	0c340000 	ldceq	0, cr0, [r4], #-0
    dcb4:	0000288c 	andeq	r2, r0, ip, lsl #17
    dcb8:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    dcbc:	0c380000 	ldceq	0, cr0, [r8], #-0
    dcc0:	00002ac4 	andeq	r2, r0, r4, asr #21
    dcc4:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    dcc8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    dccc:	00002c63 	andeq	r2, r0, r3, ror #24
    dcd0:	02478c06 	subeq	r8, r7, #1536	; 0x600
    dcd4:	0c400000 	mareq	acc0, r0, r0
    dcd8:	000029e7 	andeq	r2, r0, r7, ror #19
    dcdc:	02528d06 	subseq	r8, r2, #384	; 0x180
    dce0:	0c440000 	mareq	acc0, r0, r4
    dce4:	0000283c 	andeq	r2, r0, ip, lsr r8
    dce8:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    dcec:	00480000 	subeq	r0, r8, r0
    dcf0:	002b9303 	eoreq	r9, fp, r3, lsl #6
    dcf4:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    dcf8:	0b000002 	bleq	dd08 <__exidx_end+0x8dd8>
    dcfc:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    dd00:	0c000003 	stceq	0, cr0, [r0], {3}
    dd04:	000028e7 	andeq	r2, r0, r7, ror #17
    dd08:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    dd0c:	0c000000 	stceq	0, cr0, [r0], {-0}
    dd10:	00002b59 	andeq	r2, r0, r9, asr fp
    dd14:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    dd18:	0c040000 	stceq	0, cr0, [r4], {-0}
    dd1c:	0000285c 	andeq	r2, r0, ip, asr r8
    dd20:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    dd24:	0c080000 	stceq	0, cr0, [r8], {-0}
    dd28:	0000291a 	andeq	r2, r0, sl, lsl r9
    dd2c:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    dd30:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    dd34:	0000289f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    dd38:	00c35901 	sbceq	r5, r3, r1, lsl #18
    dd3c:	00100000 	andseq	r0, r0, r0
    dd40:	002b8403 	eoreq	r8, fp, r3, lsl #8
    dd44:	605a0100 	subsvs	r0, sl, r0, lsl #2
    dd48:	0d000003 	stceq	0, cr0, [r0, #-12]
    dd4c:	000027e3 	andeq	r2, r0, r3, ror #15
    dd50:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    dd54:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    dd58:	00002bb2 			; <UNDEFINED> instruction: 0x00002bb2
    dd5c:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    dd60:	340e0000 	strcc	r0, [lr], #-0
    dd64:	01000028 	tsteq	r0, r8, lsr #32
    dd68:	0000ce65 	andeq	ip, r0, r5, ror #28
    dd6c:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    dd70:	02000028 	andeq	r0, r0, #40	; 0x28
    dd74:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    dd78:	fb010000 	blx	4dd82 <__ccfg+0x2ddda>
    dd7c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    dd80:	00002bb2 			; <UNDEFINED> instruction: 0x00002bb2
    dd84:	00cea001 	sbceq	sl, lr, r1
    dd88:	72100000 	andsvc	r0, r0, #0
    dd8c:	0100002c 	tsteq	r0, ip, lsr #32
    dd90:	0000cea2 	andeq	ip, r0, r2, lsr #29
    dd94:	b0110000 	andslt	r0, r1, r0
    dd98:	bc000003 	stclt	0, cr0, [r0], {3}
    dd9c:	5c000030 	stcpl	0, cr0, [r0], {48}	; 0x30
    dda0:	01000000 	mrseq	r0, (UNDEF: 0)
    dda4:	0004b69c 	muleq	r4, ip, r6
    dda8:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    ddac:	344f0000 	strbcc	r0, [pc], #-0	; ddb4 <__exidx_end+0x8e84>
    ddb0:	c7120000 	ldrgt	r0, [r2, -r0]
    ddb4:	7b000003 	blvc	ddc8 <__exidx_end+0x8e98>
    ddb8:	13000034 	movwne	r0, #52	; 0x34
    ddbc:	000030f6 	strdeq	r3, [r0], -r6
    ddc0:	00000014 	andeq	r0, r0, r4, lsl r0
    ddc4:	00000461 	andeq	r0, r0, r1, ror #8
    ddc8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    ddcc:	0034a700 	eorseq	sl, r4, r0, lsl #14
    ddd0:	03c71200 	biceq	r1, r7, #0, 4
    ddd4:	34ba0000 	ldrtcc	r0, [sl], #0
    ddd8:	0a140000 	beq	50dde0 <__ccfg+0x4ede38>
    dddc:	02000031 	andeq	r0, r0, #49	; 0x31
    dde0:	01150074 	tsteq	r5, r4, ror r0
    dde4:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    dde8:	3c015201 	sfmcc	f5, 4, [r1], {1}
    ddec:	01510115 	cmpeq	r1, r5, lsl r1
    ddf0:	50011530 	andpl	r1, r1, r0, lsr r5
    ddf4:	a0000c05 	andge	r0, r0, r5, lsl #24
    ddf8:	0000400c 	andeq	r4, r0, ip
    ddfc:	0030da16 	eorseq	sp, r0, r6, lsl sl
    de00:	00760200 	rsbseq	r0, r6, r0, lsl #4
    de04:	0000048d 	andeq	r0, r0, sp, lsl #9
    de08:	01530115 	cmpeq	r3, r5, lsl r1
    de0c:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    de10:	01153101 	tsteq	r5, r1, lsl #2
    de14:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    de18:	0c055001 	stceq	0, cr5, [r5], {1}
    de1c:	400ca000 	andmi	sl, ip, r0
    de20:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    de24:	00007402 	andeq	r7, r0, r2, lsl #8
    de28:	0030f214 	eorseq	pc, r0, r4, lsl r2	; <UNPREDICTABLE>
    de2c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    de30:	01530115 	cmpeq	r3, r5, lsl r1
    de34:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    de38:	01153201 	tsteq	r5, r1, lsl #4
    de3c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    de40:	0c055001 	stceq	0, cr5, [r5], {1}
    de44:	400ca000 	andmi	sl, ip, r0
    de48:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    de4c:	00007402 	andeq	r7, r0, r2, lsl #8
    de50:	03d31100 	bicseq	r1, r3, #0, 2
    de54:	31180000 	tstcc	r8, r0
    de58:	002c0000 	eoreq	r0, ip, r0
    de5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    de60:	0000050d 	andeq	r0, r0, sp, lsl #10
    de64:	0003e412 	andeq	lr, r3, r2, lsl r4
    de68:	0034db00 	eorseq	sp, r4, r0, lsl #22
    de6c:	03ef1700 	mvneq	r1, #0, 14
    de70:	50010000 	andpl	r0, r1, r0
    de74:	000ff018 	andeq	pc, pc, r8, lsl r0	; <UNPREDICTABLE>
    de78:	0004f400 	andeq	pc, r4, r0, lsl #8
    de7c:	03e41900 	mvneq	r1, #0, 18
    de80:	1a040000 	bne	10de88 <__ccfg+0xedee0>
    de84:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    de88:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    de8c:	14000000 	strne	r0, [r0], #-0
    de90:	00003138 	andeq	r3, r0, r8, lsr r1
    de94:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    de98:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    de9c:	50011534 	andpl	r1, r1, r4, lsr r5
    dea0:	a0000c05 	andge	r0, r0, r5, lsl #24
    dea4:	0000400c 	andeq	r4, r0, ip
    dea8:	002d481c 	eoreq	r4, sp, ip, lsl r8
    deac:	01840200 	orreq	r0, r4, r0, lsl #4
    deb0:	000000ce 	andeq	r0, r0, lr, asr #1
    deb4:	00000000 	andeq	r0, r0, r0
    deb8:	00000090 	muleq	r0, r0, r0
    debc:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    dec0:	9e1d0000 	cdpls	0, 1, cr0, cr13, cr0, {0}
    dec4:	0100002b 	tsteq	r0, fp, lsr #32
    dec8:	0000cec2 	andeq	ip, r0, r2, asr #29
    decc:	0034fc00 	eorseq	pc, r4, r0, lsl #24
    ded0:	2b111e00 	blcs	4556d8 <__ccfg+0x435730>
    ded4:	c4010000 	strgt	r0, [r1], #-0
    ded8:	000000ce 	andeq	r0, r0, lr, asr #1
    dedc:	00003528 	andeq	r3, r0, r8, lsr #10
    dee0:	002b2a1e 	eoreq	r2, fp, lr, lsl sl
    dee4:	c3c50100 	bicgt	r0, r5, #0, 2
    dee8:	3b000000 	blcc	def0 <__exidx_end+0x8fc0>
    deec:	1e000035 	mcrne	0, 0, r0, cr0, cr5, {1}
    def0:	000028ab 	andeq	r2, r0, fp, lsr #17
    def4:	00cec601 	sbceq	ip, lr, r1, lsl #12
    def8:	35620000 	strbcc	r0, [r2, #-0]!
    defc:	001f0000 	andseq	r0, pc, r0
    df00:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    df04:	1f000008 	svcne	0x00000008
    df08:	00000000 	andeq	r0, r0, r0
    df0c:	000008aa 	andeq	r0, r0, sl, lsr #17
    df10:	294f2000 	stmdbcs	pc, {sp}^	; <UNPREDICTABLE>
    df14:	91020000 	mrsls	r0, (UNDEF: 2)
    df18:	00314401 	eorseq	r4, r1, r1, lsl #8
    df1c:	00001800 	andeq	r1, r0, r0, lsl #16
    df20:	ae9c0100 	fmlgee	f0, f4, f0
    df24:	21000005 	tstcs	r0, r5
    df28:	0000314e 	andeq	r3, r0, lr, asr #2
    df2c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    df30:	000005a4 	andeq	r0, r0, r4, lsr #11
    df34:	01510115 	cmpeq	r1, r5, lsl r1
    df38:	50011531 	andpl	r1, r1, r1, lsr r5
    df3c:	1f003301 	svcne	0x00003301
    df40:	00003152 	andeq	r3, r0, r2, asr r1
    df44:	0000089e 	muleq	r0, lr, r8
    df48:	2b682200 	blcs	1a16750 <__ccfg+0x19f67a8>
    df4c:	22020000 	andcs	r0, r2, #0
    df50:	0005bb01 	andeq	fp, r5, r1, lsl #22
    df54:	01020300 	mrseq	r0, LR_svc
    df58:	00116a02 	andseq	r6, r1, r2, lsl #20
    df5c:	2bbd2300 	blcs	fef56b64 <_estack+0xdef51b64>
    df60:	40020000 	andmi	r0, r2, r0
    df64:	6a1c0301 	bvs	70eb70 <__ccfg+0x6eebc8>
    df68:	02000028 	andeq	r0, r0, #40	; 0x28
    df6c:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    df70:	315c0000 	cmpcc	ip, r0
    df74:	00600000 	rsbeq	r0, r0, r0
    df78:	9c010000 	stcls	0, cr0, [r1], {-0}
    df7c:	00000677 	andeq	r0, r0, r7, ror r6
    df80:	002b4924 	eoreq	r4, fp, r4, lsr #18
    df84:	01020100 	mrseq	r0, (UNDEF: 18)
    df88:	000000ce 	andeq	r0, r0, lr, asr #1
    df8c:	000035b6 			; <UNDEFINED> instruction: 0x000035b6
    df90:	002c1624 	eoreq	r1, ip, r4, lsr #12
    df94:	01030100 	mrseq	r0, (UNDEF: 19)
    df98:	000000ce 	andeq	r0, r0, lr, asr #1
    df9c:	000035c9 	andeq	r3, r0, r9, asr #11
    dfa0:	0005ae25 	andeq	sl, r5, r5, lsr #28
    dfa4:	00316800 	eorseq	r6, r1, r0, lsl #16
    dfa8:	00001000 	andeq	r1, r0, r0
    dfac:	01090100 	mrseq	r0, (UNDEF: 25)
    dfb0:	0000063c 	andeq	r0, r0, ip, lsr r6
    dfb4:	00317814 	eorseq	r7, r1, r4, lsl r8
    dfb8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    dfbc:	01530115 	cmpeq	r3, r5, lsl r1
    dfc0:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    dfc4:	01153101 	tsteq	r5, r1, lsl #2
    dfc8:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    dfcc:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    dfd0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    dfd4:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    dfd8:	000005c2 	andeq	r0, r0, r2, asr #11
    dfdc:	0000317a 	andeq	r3, r0, sl, ror r1
    dfe0:	00000008 	andeq	r0, r0, r8
    dfe4:	5a010a01 	bpl	507f0 <__ccfg+0x30848>
    dfe8:	1f000006 	svcne	0x00000006
    dfec:	00003182 	andeq	r3, r0, r2, lsl #3
    dff0:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    dff4:	31642100 	cmncc	r4, r0, lsl #2
    dff8:	03d30000 	bicseq	r0, r3, #0
    dffc:	066d0000 	strbteq	r0, [sp], -r0
    e000:	01150000 	tsteq	r5, r0
    e004:	00310150 	eorseq	r0, r1, r0, asr r1
    e008:	0031861f 	eorseq	r8, r1, pc, lsl r6
    e00c:	00089e00 	andeq	r9, r8, r0, lsl #28
    e010:	b4200000 	strtlt	r0, [r0], #-0
    e014:	02000029 	andeq	r0, r0, #41	; 0x29
    e018:	31bc01ae 			; <UNDEFINED> instruction: 0x31bc01ae
    e01c:	00340000 	eorseq	r0, r4, r0
    e020:	9c010000 	stcls	0, cr0, [r1], {-0}
    e024:	000006e9 	andeq	r0, r0, r9, ror #13
    e028:	0005c225 	andeq	ip, r5, r5, lsr #4
    e02c:	0031ce00 	eorseq	ip, r1, r0, lsl #28
    e030:	00000800 	andeq	r0, r0, r0, lsl #16
    e034:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    e038:	000006ab 	andeq	r0, r0, fp, lsr #13
    e03c:	0031d61f 	eorseq	sp, r1, pc, lsl r6
    e040:	0008b500 	andeq	fp, r8, r0, lsl #10
    e044:	c6210000 	strtgt	r0, [r1], -r0
    e048:	b0000031 	andlt	r0, r0, r1, lsr r0
    e04c:	c3000003 	movwgt	r0, #3
    e050:	15000006 	strne	r0, [r0, #-6]
    e054:	30015101 	andcc	r5, r1, r1, lsl #2
    e058:	01500115 	cmpeq	r0, r5, lsl r1
    e05c:	cc210033 	stcgt	0, cr0, [r1], #-204	; 0xffffff34
    e060:	d3000031 	movwle	r0, #49	; 0x31
    e064:	d6000003 	strle	r0, [r0], -r3
    e068:	15000006 	strne	r0, [r0, #-6]
    e06c:	31015001 	tstcc	r1, r1
    e070:	31da1f00 	bicscc	r1, sl, r0, lsl #30
    e074:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    e078:	e21f0000 	ands	r0, pc, #0
    e07c:	aa000031 	bge	e148 <__exidx_end+0x9218>
    e080:	00000008 	andeq	r0, r0, r8
    e084:	002a0e1c 	eoreq	r0, sl, ip, lsl lr
    e088:	01f20200 	mvnseq	r0, r0, lsl #4
    e08c:	000000c3 	andeq	r0, r0, r3, asr #1
    e090:	00000000 	andeq	r0, r0, r0
    e094:	00000038 	andeq	r0, r0, r8, lsr r0
    e098:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    e09c:	dc260000 	stcle	0, cr0, [r6], #-0
    e0a0:	0100002b 	tsteq	r0, fp, lsr #32
    e0a4:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    e0a8:	35dc0000 	ldrbcc	r0, [ip]
    e0ac:	3f270000 	svccc	0x00270000
    e0b0:	0100002b 	tsteq	r0, fp, lsr #32
    e0b4:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    e0b8:	51010000 	mrspl	r0, (UNDEF: 1)
    e0bc:	002da227 	eoreq	sl, sp, r7, lsr #4
    e0c0:	01410100 	mrseq	r0, (UNDEF: 81)
    e0c4:	000000c3 	andeq	r0, r0, r3, asr #1
    e0c8:	40007105 	andmi	r7, r0, r5, lsl #2
    e0cc:	be279f26 	cdplt	15, 2, cr9, cr7, cr6, {1}
    e0d0:	01000028 	tsteq	r0, r8, lsr #32
    e0d4:	00c30143 	sbceq	r0, r3, r3, asr #2
    e0d8:	71070000 	mrsvc	r0, (UNDEF: 7)
    e0dc:	48244000 	stmdami	r4!, {lr}
    e0e0:	c6279f26 	strtgt	r9, [r7], -r6, lsr #30
    e0e4:	01000028 	tsteq	r0, r8, lsr #32
    e0e8:	00c30145 	sbceq	r0, r3, r5, asr #2
    e0ec:	71070000 	mrsvc	r0, (UNDEF: 7)
    e0f0:	48244800 	stmdami	r4!, {fp, lr}
    e0f4:	ce249f26 	cdpgt	15, 2, cr9, cr4, cr6, {1}
    e0f8:	01000028 	tsteq	r0, r8, lsr #32
    e0fc:	00c30147 	sbceq	r0, r3, r7, asr #2
    e100:	360a0000 	strcc	r0, [sl], -r0
    e104:	2c240000 	stccs	0, cr0, [r4], #-0
    e108:	01000029 	tsteq	r0, r9, lsr #32
    e10c:	00c30156 	sbceq	r0, r3, r6, asr r1
    e110:	36230000 	strtcc	r0, [r3], -r0
    e114:	e4240000 	strt	r0, [r4], #-0
    e118:	0100002a 	tsteq	r0, sl, lsr #32
    e11c:	00c30157 	sbceq	r0, r3, r7, asr r1
    e120:	36460000 	strbcc	r0, [r6], -r0
    e124:	64280000 	strtvs	r0, [r8], #-0
    e128:	01580100 	cmpeq	r8, r0, lsl #2
    e12c:	000000c3 	andeq	r0, r0, r3, asr #1
    e130:	0000366f 	andeq	r3, r0, pc, ror #12
    e134:	2c271c00 	stccs	12, cr1, [r7], #-0
    e138:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    e13c:	0000ad02 	andeq	sl, r0, r2, lsl #26
    e140:	00000000 	andeq	r0, r0, r0
    e144:	00000c00 	andeq	r0, r0, r0, lsl #24
    e148:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    e14c:	26000007 	strcs	r0, [r0], -r7
    e150:	00002afd 	strdeq	r2, [r0], -sp
    e154:	c3016301 	movwgt	r6, #4865	; 0x1301
    e158:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    e15c:	24000036 	strcs	r0, [r0], #-54	; 0xffffffca
    e160:	00002cd6 	ldrdeq	r2, [r0], -r6
    e164:	c3018501 	movwgt	r8, #5377	; 0x1501
    e168:	0a000000 	beq	e170 <__exidx_end+0x9240>
    e16c:	00000037 	andeq	r0, r0, r7, lsr r0
    e170:	002a381c 	eoreq	r3, sl, ip, lsl r8
    e174:	01c20200 	biceq	r0, r2, r0, lsl #4
    e178:	000000ce 	andeq	r0, r0, lr, asr #1
    e17c:	00000000 	andeq	r0, r0, r0
    e180:	00000034 	andeq	r0, r0, r4, lsr r0
    e184:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    e188:	29240000 	stmdbcs	r4!, {}	; <UNPREDICTABLE>
    e18c:	0100002d 	tsteq	r0, sp, lsr #32
    e190:	00ce0192 	smulleq	r0, lr, r2, r1
    e194:	374a0000 	strbcc	r0, [sl, -r0]
    e198:	ee240000 	cdp	0, 2, cr0, cr4, cr0, {0}
    e19c:	0100001a 	tsteq	r0, sl, lsl r0
    e1a0:	00ce0193 	smulleq	r0, lr, r3, r1
    e1a4:	376c0000 	strbcc	r0, [ip, -r0]!
    e1a8:	fb240000 	blx	90e1b2 <__ccfg+0x8ee20a>
    e1ac:	01000029 	tsteq	r0, r9, lsr #32
    e1b0:	00ce0194 	smulleq	r0, lr, r4, r1
    e1b4:	377f0000 	ldrbcc	r0, [pc, -r0]!
    e1b8:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    e1bc:	01000029 	tsteq	r0, r9, lsr #32
    e1c0:	00ce0195 	smulleq	r0, lr, r5, r1
    e1c4:	37a20000 	strcc	r0, [r2, r0]!
    e1c8:	001f0000 	andseq	r0, pc, r0
    e1cc:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    e1d0:	1f000008 	svcne	0x00000008
    e1d4:	00000000 	andeq	r0, r0, r0
    e1d8:	0000089e 	muleq	r0, lr, r8
    e1dc:	2cf51c00 	ldclcs	12, cr1, [r5]
    e1e0:	d3020000 	movwle	r0, #8192	; 0x2000
    e1e4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    e1e8:	00000000 	andeq	r0, r0, r0
    e1ec:	00001c00 	andeq	r1, r0, r0, lsl #24
    e1f0:	8d9c0100 	ldfhis	f0, [ip]
    e1f4:	24000008 	strcs	r0, [r0], #-8
    e1f8:	00002b79 	andeq	r2, r0, r9, ror fp
    e1fc:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    e200:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    e204:	24000037 	strcs	r0, [r0], #-55	; 0xffffffc9
    e208:	00002ce7 	andeq	r2, r0, r7, ror #25
    e20c:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    e210:	d1000000 	mrsle	r0, (UNDEF: 0)
    e214:	24000037 	strcs	r0, [r0], #-55	; 0xffffffc9
    e218:	00002936 	andeq	r2, r0, r6, lsr r9
    e21c:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    e220:	ec000000 	stc	0, cr0, [r0], {-0}
    e224:	00000037 	andeq	r0, r0, r7, lsr r0
    e228:	002af029 	eoreq	pc, sl, r9, lsr #32
    e22c:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    e230:	05000003 	streq	r0, [r0, #-3]
    e234:	00060803 	andeq	r0, r6, r3, lsl #16
    e238:	26cf2a20 	strbcs	r2, [pc], r0, lsr #20
    e23c:	45070000 	strmi	r0, [r7, #-0]
    e240:	0000ce03 	andeq	ip, r0, r3, lsl #28
    e244:	26362b00 	ldrtcs	r2, [r6], -r0, lsl #22
    e248:	aa080000 	bge	20e250 <__ccfg+0x1ee2a8>
    e24c:	000000c3 	andeq	r0, r0, r3, asr #1
    e250:	0024dd2c 	eoreq	sp, r4, ip, lsr #26
    e254:	08990600 	ldmeq	r9, {r9, sl}
    e258:	000000d9 	ldrdeq	r0, [r0], -r9
    e25c:	0ab40000 	beq	fed0e264 <_estack+0xded09264>
    e260:	00040000 	andeq	r0, r4, r0
    e264:	000033dd 	ldrdeq	r3, [r0], -sp
    e268:	25050104 	strcs	r0, [r5, #-260]	; 0xfffffefc
    e26c:	c6010000 	strgt	r0, [r1], -r0
    e270:	cc00002e 	stcgt	0, cr0, [r0], {46}	; 0x2e
    e274:	60000025 	andvs	r0, r0, r5, lsr #32
    e278:	00000010 	andeq	r0, r0, r0, lsl r0
    e27c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    e280:	02000072 	andeq	r0, r0, #114	; 0x72
    e284:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    e288:	33030000 	movwcc	r0, #12288	; 0x3000
    e28c:	03000008 	movweq	r0, #8
    e290:	0000371d 	andeq	r3, r0, sp, lsl r7
    e294:	08010200 	stmdaeq	r1, {r9}
    e298:	000008dc 	ldrdeq	r0, [r0], -ip
    e29c:	002ca603 	eoreq	sl, ip, r3, lsl #12
    e2a0:	49290300 	stmdbmi	r9!, {r8, r9}
    e2a4:	02000000 	andeq	r0, r0, #0
    e2a8:	07a30502 	streq	r0, [r3, r2, lsl #10]!
    e2ac:	d0030000 	andle	r0, r3, r0
    e2b0:	03000003 	movweq	r0, #3
    e2b4:	00005b2b 	andeq	r5, r0, fp, lsr #22
    e2b8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    e2bc:	000009aa 	andeq	r0, r0, sl, lsr #19
    e2c0:	00266503 	eoreq	r6, r6, r3, lsl #10
    e2c4:	6d3f0300 	ldcvs	3, cr0, [pc, #-0]	; e2cc <__exidx_end+0x939c>
    e2c8:	02000000 	andeq	r0, r0, #0
    e2cc:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    e2d0:	f3030000 	vhadd.u8	d0, d3, d0
    e2d4:	03000008 	movweq	r0, #8
    e2d8:	00007f41 	andeq	r7, r0, r1, asr #30
    e2dc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e2e0:	00000397 	muleq	r0, r7, r3
    e2e4:	e8050802 	stmda	r5, {r1, fp}
    e2e8:	02000005 	andeq	r0, r0, #5
    e2ec:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
    e2f0:	04040000 	streq	r0, [r4], #-0
    e2f4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    e2f8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    e2fc:	0000039c 	muleq	r0, ip, r3
    e300:	00083503 	andeq	r3, r8, r3, lsl #10
    e304:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    e308:	03000000 	movweq	r0, #0
    e30c:	00002ca8 	andeq	r2, r0, r8, lsr #25
    e310:	003e1904 	eorseq	r1, lr, r4, lsl #18
    e314:	d2030000 	andle	r0, r3, #0
    e318:	04000003 	streq	r0, [r0], #-3
    e31c:	0000501a 	andeq	r5, r0, sl, lsl r0
    e320:	26670300 	strbtcs	r0, [r7], -r0, lsl #6
    e324:	1f040000 	svcne	0x00040000
    e328:	00000062 	andeq	r0, r0, r2, rrx
    e32c:	0008f503 	andeq	pc, r8, r3, lsl #10
    e330:	74200400 	strtvc	r0, [r0], #-1024	; 0xfffffc00
    e334:	03000000 	movweq	r0, #0
    e338:	00002dcf 	andeq	r2, r0, pc, asr #27
    e33c:	009bd405 	addseq	sp, fp, r5, lsl #8
    e340:	04020000 	streq	r0, [r2], #-0
    e344:	00277907 	eoreq	r7, r7, r7, lsl #18
    e348:	02040500 	andeq	r0, r4, #0, 10
    e34c:	08e50801 	stmiaeq	r5!, {r0, fp}^
    e350:	b0030000 	andlt	r0, r3, r0
    e354:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    e358:	0000ce3b 	andeq	ip, r0, fp, lsr lr
    e35c:	a2040600 	andge	r0, r4, #0, 12
    e360:	03000000 	movweq	r0, #0
    e364:	00001d78 	andeq	r1, r0, r8, ror sp
    e368:	01103c07 	tsteq	r0, r7, lsl #24
    e36c:	16070000 	strne	r0, [r7], -r0
    e370:	10000020 	andne	r0, r0, r0, lsr #32
    e374:	01656f07 	cmneq	r5, r7, lsl #30
    e378:	f6080000 			; <UNDEFINED> instruction: 0xf6080000
    e37c:	07000019 	smladeq	r0, r9, r0, r0
    e380:	0000b870 	andeq	fp, r0, r0, ror r8
    e384:	97080000 	strls	r0, [r8, -r0]
    e388:	07000005 	streq	r0, [r0, -r5]
    e38c:	0000b871 	andeq	fp, r0, r1, ror r8
    e390:	56080200 	strpl	r0, [r8], -r0, lsl #4
    e394:	0700001d 	smladeq	r0, sp, r0, r0
    e398:	00026d74 	andeq	r6, r2, r4, ror sp
    e39c:	ee080400 	cfcpys	mvf0, mvf8
    e3a0:	0700001a 	smladeq	r0, sl, r0, r0
    e3a4:	0000f475 	andeq	pc, r0, r5, ror r4	; <UNPREDICTABLE>
    e3a8:	86080800 	strhi	r0, [r8], -r0, lsl #16
    e3ac:	0700001d 	smladeq	r0, sp, r0, r0
    e3b0:	0002017d 	andeq	r0, r2, sp, ror r1
    e3b4:	d0080c00 	andle	r0, r8, r0, lsl #24
    e3b8:	0700001c 	smladeq	r0, ip, r0, r0
    e3bc:	00024681 	andeq	r4, r2, r1, lsl #13
    e3c0:	03000d00 	movweq	r0, #3328	; 0xd00
    e3c4:	00002ef7 	strdeq	r2, [r0], -r7
    e3c8:	01703e07 	cmneq	r0, r7, lsl #28
    e3cc:	e1070000 	mrs	r0, (UNDEF: 7)
    e3d0:	1800002e 	stmdane	r0, {r1, r2, r3, r5}
    e3d4:	0201a507 	andeq	sl, r1, #29360128	; 0x1c00000
    e3d8:	f6080000 			; <UNDEFINED> instruction: 0xf6080000
    e3dc:	07000019 	smladeq	r0, r9, r0, r0
    e3e0:	0000b8a6 	andeq	fp, r0, r6, lsr #17
    e3e4:	97080000 	strls	r0, [r8, -r0]
    e3e8:	07000005 	streq	r0, [r0, -r5]
    e3ec:	0000b8a7 	andeq	fp, r0, r7, lsr #17
    e3f0:	56080200 	strpl	r0, [r8], -r0, lsl #4
    e3f4:	0700001d 	smladeq	r0, sp, r0, r0
    e3f8:	00026daa 	andeq	r6, r2, sl, lsr #27
    e3fc:	ee080400 	cfcpys	mvf0, mvf8
    e400:	0700001a 	smladeq	r0, sl, r0, r0
    e404:	0000f4ab 	andeq	pc, r0, fp, lsr #9
    e408:	86080800 	strhi	r0, [r8], -r0, lsl #16
    e40c:	0700001d 	smladeq	r0, sp, r0, r0
    e410:	000273b3 			; <UNDEFINED> instruction: 0x000273b3
    e414:	d0080c00 	andle	r0, r8, r0, lsl #24
    e418:	0700001c 	smladeq	r0, ip, r0, r0
    e41c:	0002b8b7 			; <UNDEFINED> instruction: 0x0002b8b7
    e420:	40080d00 	andmi	r0, r8, r0, lsl #26
    e424:	07000000 	streq	r0, [r0, -r0]
    e428:	0000a2b8 			; <UNDEFINED> instruction: 0x0000a2b8
    e42c:	9b080e00 	blls	211c34 <__ccfg+0x1f1c8c>
    e430:	0700001e 	smladeq	r0, lr, r0, r0
    e434:	0000a2bf 			; <UNDEFINED> instruction: 0x0000a2bf
    e438:	ad080f00 	stcge	15, cr0, [r8, #-0]
    e43c:	0700000f 	streq	r0, [r0, -pc]
    e440:	0002dfd4 	ldrdeq	sp, [r2], -r4
    e444:	6f081000 	svcvs	0x00081000
    e448:	0700001b 	smladeq	r0, fp, r0, r0
    e44c:	0000b8d5 	ldrdeq	fp, [r0], -r5
    e450:	a3081200 	movwge	r1, #33280	; 0x8200
    e454:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    e458:	000324d6 	ldrdeq	r2, [r3], -r6
    e45c:	09001400 	stmdbeq	r0, {sl, ip}
    e460:	46760701 	ldrbtmi	r0, [r6], -r1, lsl #14
    e464:	0a000002 	beq	e474 <__exidx_end+0x9544>
    e468:	00002249 	andeq	r2, r0, r9, asr #4
    e46c:	00a27707 	adceq	r7, r2, r7, lsl #14
    e470:	04010000 	streq	r0, [r1], #-0
    e474:	d70a0004 	strle	r0, [sl, -r4]
    e478:	0700001b 	smladeq	r0, fp, r0, r0
    e47c:	0000a278 	andeq	sl, r0, r8, ror r2
    e480:	03010100 	movweq	r0, #4352	; 0x1100
    e484:	1c970a00 	vldmiane	r7, {s0-s-1}
    e488:	7a070000 	bvc	1ce490 <__ccfg+0x1ae4e8>
    e48c:	000000a2 	andeq	r0, r0, r2, lsr #1
    e490:	00010201 	andeq	r0, r1, r1, lsl #4
    e494:	001a650a 	andseq	r6, sl, sl, lsl #10
    e498:	a27b0700 	rsbsge	r0, fp, #0, 14
    e49c:	01000000 	mrseq	r0, (UNDEF: 0)
    e4a0:	00000001 	andeq	r0, r0, r1
    e4a4:	7e070109 	adfvcs	f0, f7, #1.0
    e4a8:	0000026d 	andeq	r0, r0, sp, ror #4
    e4ac:	0020b30a 	eoreq	fp, r0, sl, lsl #6
    e4b0:	a27f0700 	rsbsge	r0, pc, #0, 14
    e4b4:	01000000 	mrseq	r0, (UNDEF: 0)
    e4b8:	0a000404 	beq	f4d0 <__exidx_end+0xa5a0>
    e4bc:	0000220f 	andeq	r2, r0, pc, lsl #4
    e4c0:	00a28007 	adceq	r8, r2, r7
    e4c4:	04010000 	streq	r0, [r1], #-0
    e4c8:	06000000 	streq	r0, [r0], -r0
    e4cc:	00010504 	andeq	r0, r1, r4, lsl #10
    e4d0:	07010900 	streq	r0, [r1, -r0, lsl #18]
    e4d4:	0002b8ac 	andeq	fp, r2, ip, lsr #17
    e4d8:	22490a00 	subcs	r0, r9, #0, 20
    e4dc:	ad070000 	stcge	0, cr0, [r7, #-0]
    e4e0:	000000a2 	andeq	r0, r0, r2, lsr #1
    e4e4:	00040401 	andeq	r0, r4, r1, lsl #8
    e4e8:	001bd70a 	andseq	sp, fp, sl, lsl #14
    e4ec:	a2ae0700 	adcge	r0, lr, #0, 14
    e4f0:	01000000 	mrseq	r0, (UNDEF: 0)
    e4f4:	0a000301 	beq	f100 <__exidx_end+0xa1d0>
    e4f8:	00001c97 	muleq	r0, r7, ip
    e4fc:	00a2b007 	adceq	fp, r2, r7
    e500:	02010000 	andeq	r0, r1, #0
    e504:	650a0001 	strvs	r0, [sl, #-1]
    e508:	0700001a 	smladeq	r0, sl, r0, r0
    e50c:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    e510:	00010100 	andeq	r0, r1, r0, lsl #2
    e514:	01090000 	mrseq	r0, (UNDEF: 9)
    e518:	02dfb407 	sbcseq	fp, pc, #117440512	; 0x7000000
    e51c:	b30a0000 	movwlt	r0, #40960	; 0xa000
    e520:	07000020 	streq	r0, [r0, -r0, lsr #32]
    e524:	0000a2b5 			; <UNDEFINED> instruction: 0x0000a2b5
    e528:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    e52c:	220f0a00 	andcs	r0, pc, #0, 20
    e530:	b6070000 	strlt	r0, [r7], -r0
    e534:	000000a2 	andeq	r0, r0, r2, lsr #1
    e538:	00000401 	andeq	r0, r0, r1, lsl #8
    e53c:	07020900 	streq	r0, [r2, -r0, lsl #18]
    e540:	000324c2 	andeq	r2, r3, r2, asr #9
    e544:	1c8a0a00 	vstmiane	sl, {s0-s-1}
    e548:	c3070000 	movwgt	r0, #28672	; 0x7000
    e54c:	000000b8 	strheq	r0, [r0], -r8
    e550:	000d0302 	andeq	r0, sp, r2, lsl #6
    e554:	001c290a 	andseq	r2, ip, sl, lsl #18
    e558:	b8c90700 	stmialt	r9, {r8, r9, sl}^
    e55c:	02000000 	andeq	r0, r0, #0
    e560:	0a000c01 	beq	1156c <__exidx_end+0xc63c>
    e564:	00001bc9 	andeq	r1, r0, r9, asr #23
    e568:	00b8cb07 	adcseq	ip, r8, r7, lsl #22
    e56c:	06020000 	streq	r0, [r2], -r0
    e570:	c70a0006 	strgt	r0, [sl, -r6]
    e574:	0700001e 	smladeq	r0, lr, r0, r0
    e578:	0000b8d2 	ldrdeq	fp, [r0], -r2
    e57c:	05010200 	streq	r0, [r1, #-512]	; 0xfffffe00
    e580:	04060000 	streq	r0, [r6], #-0
    e584:	000000ce 	andeq	r0, r0, lr, asr #1
    e588:	002e0403 	eoreq	r0, lr, r3, lsl #8
    e58c:	35420800 	strbcc	r0, [r2, #-2048]	; 0xfffff800
    e590:	0b000003 	bleq	e5a4 <__exidx_end+0x9674>
    e594:	00002e94 	muleq	r0, r4, lr
    e598:	01c10820 	biceq	r0, r1, r0, lsr #16
    e59c:	000003f9 	strdeq	r0, [r0], -r9
    e5a0:	0019f60c 	andseq	pc, r9, ip, lsl #12
    e5a4:	01c20800 	biceq	r0, r2, r0, lsl #16
    e5a8:	000000b8 	strheq	r0, [r0], -r8
    e5ac:	05970c00 	ldreq	r0, [r7, #3072]	; 0xc00
    e5b0:	c3080000 	movwgt	r0, #32768	; 0x8000
    e5b4:	0000b801 	andeq	fp, r0, r1, lsl #16
    e5b8:	560c0200 	strpl	r0, [ip], -r0, lsl #4
    e5bc:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e5c0:	026d01c6 	rsbeq	r0, sp, #-2147483599	; 0x80000031
    e5c4:	0c040000 	stceq	0, cr0, [r4], {-0}
    e5c8:	00001aee 	andeq	r1, r0, lr, ror #21
    e5cc:	f401c708 	vst1.8	{d12}, [r1], r8
    e5d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    e5d4:	001d860c 	andseq	r8, sp, ip, lsl #12
    e5d8:	01cf0800 	biceq	r0, pc, r0, lsl #16
    e5dc:	000004ef 	andeq	r0, r0, pc, ror #9
    e5e0:	1cd00c0c 	ldclne	12, cr0, [r0], {12}
    e5e4:	d3080000 	movwle	r0, #32768	; 0x8000
    e5e8:	00053901 	andeq	r3, r5, r1, lsl #18
    e5ec:	eb0c0d00 	bl	3119f4 <__ccfg+0x2f1a4c>
    e5f0:	08000019 	stmdaeq	r0, {r0, r3, r4}
    e5f4:	056301d9 	strbeq	r0, [r3, #-473]!	; 0xfffffe27
    e5f8:	0c0e0000 	stceq	0, cr0, [lr], {-0}
    e5fc:	00001d3f 	andeq	r1, r0, pc, lsr sp
    e600:	8d01de08 	stchi	14, cr13, [r1, #-32]	; 0xffffffe0
    e604:	10000005 	andne	r0, r0, r5
    e608:	001b770c 	andseq	r7, fp, ip, lsl #14
    e60c:	01df0800 	bicseq	r0, pc, r0, lsl #16
    e610:	000000a2 	andeq	r0, r0, r2, lsr #1
    e614:	1dc80c14 	stclne	12, cr0, [r8, #80]	; 0x50
    e618:	e7080000 	str	r0, [r8, -r0]
    e61c:	0005b701 	andeq	fp, r5, r1, lsl #14
    e620:	e30c1500 	movw	r1, #50432	; 0xc500
    e624:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    e628:	05e101fb 	strbeq	r0, [r1, #507]!	; 0x1fb
    e62c:	0c160000 	ldceq	0, cr0, [r6], {-0}
    e630:	00000fad 	andeq	r0, r0, sp, lsr #31
    e634:	3b020e08 	blcc	91e5c <__ccfg+0x71eb4>
    e638:	18000006 	stmdane	r0, {r1, r2}
    e63c:	001b6f0c 	andseq	r6, fp, ip, lsl #30
    e640:	020f0800 	andeq	r0, pc, #0, 16
    e644:	000000b8 	strheq	r0, [r0], -r8
    e648:	1fa30c1a 	svcne	0x00a30c1a
    e64c:	10080000 	andne	r0, r8, r0
    e650:	00032402 	andeq	r2, r3, r2, lsl #8
    e654:	03001c00 	movweq	r1, #3072	; 0xc00
    e658:	00001f43 	andeq	r1, r0, r3, asr #30
    e65c:	04044308 	streq	r4, [r4], #-776	; 0xfffffcf8
    e660:	240b0000 	strcs	r0, [fp], #-0
    e664:	2800001f 	stmdacs	r0, {r0, r1, r2, r3, r4}
    e668:	ef021a08 	svc	0x00021a08
    e66c:	0c000004 	stceq	0, cr0, [r0], {4}
    e670:	000019f6 	strdeq	r1, [r0], -r6
    e674:	b8021b08 	stmdalt	r2, {r3, r8, r9, fp, ip}
    e678:	00000000 	andeq	r0, r0, r0
    e67c:	0005970c 	andeq	r9, r5, ip, lsl #14
    e680:	021d0800 	andseq	r0, sp, #0, 16
    e684:	000000b8 	strheq	r0, [r0], -r8
    e688:	1d560c02 	ldclne	12, cr0, [r6, #-8]
    e68c:	20080000 	andcs	r0, r8, r0
    e690:	00026d02 	andeq	r6, r2, r2, lsl #26
    e694:	ee0c0400 	cfcpys	mvf0, mvf12
    e698:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    e69c:	00f40221 	rscseq	r0, r4, r1, lsr #4
    e6a0:	0c080000 	stceq	0, cr0, [r8], {-0}
    e6a4:	00001d86 	andeq	r1, r0, r6, lsl #27
    e6a8:	85022908 	strhi	r2, [r2, #-2312]	; 0xfffff6f8
    e6ac:	0c000006 	stceq	0, cr0, [r0], {6}
    e6b0:	001cd00c 	andseq	sp, ip, ip
    e6b4:	022d0800 	eoreq	r0, sp, #0, 16
    e6b8:	000006cf 	andeq	r0, r0, pc, asr #13
    e6bc:	19eb0c0d 	stmibne	fp!, {r0, r2, r3, sl, fp}^
    e6c0:	33080000 	movwcc	r0, #32768	; 0x8000
    e6c4:	0006f902 	andeq	pc, r6, r2, lsl #18
    e6c8:	3f0c0e00 	svccc	0x000c0e00
    e6cc:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e6d0:	07230238 			; <UNDEFINED> instruction: 0x07230238
    e6d4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    e6d8:	00001b77 	andeq	r1, r0, r7, ror fp
    e6dc:	a2023908 	andge	r3, r2, #8, 18	; 0x20000
    e6e0:	14000000 	strne	r0, [r0], #-0
    e6e4:	001dc80c 	andseq	ip, sp, ip, lsl #16
    e6e8:	02410800 	subeq	r0, r1, #0, 16
    e6ec:	0000074d 	andeq	r0, r0, sp, asr #14
    e6f0:	1ae30c15 	bne	ff8d174c <_estack+0xdf8cc74c>
    e6f4:	55080000 	strpl	r0, [r8, #-0]
    e6f8:	00077702 	andeq	r7, r7, r2, lsl #14
    e6fc:	ad0c1600 	stcge	6, cr1, [ip, #-0]
    e700:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    e704:	07d10268 	ldrbeq	r0, [r1, r8, ror #4]
    e708:	0c180000 	ldceq	0, cr0, [r8], {-0}
    e70c:	00001b6f 	andeq	r1, r0, pc, ror #22
    e710:	b8026908 	stmdalt	r2, {r3, r8, fp, sp, lr}
    e714:	1a000000 	bne	e71c <__exidx_end+0x97ec>
    e718:	001fa30c 	andseq	sl, pc, ip, lsl #6
    e71c:	026a0800 	rsbeq	r0, sl, #0, 16
    e720:	00000324 	andeq	r0, r0, r4, lsr #6
    e724:	1a280c1c 	bne	a1179c <__ccfg+0x9f17f4>
    e728:	6c080000 	stcvs	0, cr0, [r8], {-0}
    e72c:	0000b802 	andeq	fp, r0, r2, lsl #16
    e730:	5e0c2000 	cdppl	0, 0, cr2, cr12, cr0, {0}
    e734:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e738:	00ad0270 	adceq	r0, sp, r0, ror r2
    e73c:	0c220000 	stceq	0, cr0, [r2], #-0
    e740:	00001e9b 	muleq	r0, fp, lr
    e744:	a2027308 	andge	r7, r2, #8, 6	; 0x20000000
    e748:	24000000 	strcs	r0, [r0], #-0
    e74c:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    e750:	053901c8 	ldreq	r0, [r9, #-456]!	; 0xfffffe38
    e754:	490e0000 	stmdbmi	lr, {}	; <UNPREDICTABLE>
    e758:	08000022 	stmdaeq	r0, {r1, r5}
    e75c:	00a201c9 	adceq	r0, r2, r9, asr #3
    e760:	04010000 	streq	r0, [r1], #-0
    e764:	d70e0004 	strle	r0, [lr, -r4]
    e768:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e76c:	00a201ca 	adceq	r0, r2, sl, asr #3
    e770:	01010000 	mrseq	r0, (UNDEF: 1)
    e774:	970e0003 	strls	r0, [lr, -r3]
    e778:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e77c:	00a201cc 	adceq	r0, r2, ip, asr #3
    e780:	02010000 	andeq	r0, r1, #0
    e784:	650e0001 	strvs	r0, [lr, #-1]
    e788:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    e78c:	00a201cd 	adceq	r0, r2, sp, asr #3
    e790:	01010000 	mrseq	r0, (UNDEF: 1)
    e794:	0d000000 	stceq	0, cr0, [r0, #-0]
    e798:	01d00801 	bicseq	r0, r0, r1, lsl #16
    e79c:	00000563 	andeq	r0, r0, r3, ror #10
    e7a0:	0020b30e 	eoreq	fp, r0, lr, lsl #6
    e7a4:	01d10800 	bicseq	r0, r1, r0, lsl #16
    e7a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    e7ac:	00040401 	andeq	r0, r4, r1, lsl #8
    e7b0:	00220f0e 	eoreq	r0, r2, lr, lsl #30
    e7b4:	01d20800 	bicseq	r0, r2, r0, lsl #16
    e7b8:	000000a2 	andeq	r0, r0, r2, lsr #1
    e7bc:	00000401 	andeq	r0, r0, r1, lsl #8
    e7c0:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    e7c4:	058d01d4 	streq	r0, [sp, #468]	; 0x1d4
    e7c8:	ef0e0000 	svc	0x000e0000
    e7cc:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e7d0:	00b801d5 	ldrsbteq	r0, [r8], r5
    e7d4:	03020000 	movweq	r0, #8192	; 0x2000
    e7d8:	f20e000d 	vhadd.s8	d0, d14, d13
    e7dc:	08000021 	stmdaeq	r0, {r0, r5}
    e7e0:	00b801d8 	ldrsbteq	r0, [r8], r8
    e7e4:	0d020000 	stceq	0, cr0, [r2, #-0]
    e7e8:	0d000000 	stceq	0, cr0, [r0, #-0]
    e7ec:	01da0804 	bicseq	r0, sl, r4, lsl #16
    e7f0:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
    e7f4:	001e830e 	andseq	r8, lr, lr, lsl #6
    e7f8:	01db0800 	bicseq	r0, fp, r0, lsl #16
    e7fc:	000000ce 	andeq	r0, r0, lr, asr #1
    e800:	001c0404 	andseq	r0, ip, r4, lsl #8
    e804:	001f930e 	andseq	r9, pc, lr, lsl #6
    e808:	01dd0800 	bicseq	r0, sp, r0, lsl #16
    e80c:	000000ce 	andeq	r0, r0, lr, asr #1
    e810:	00031504 	andeq	r1, r3, r4, lsl #10
    e814:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    e818:	05e101e0 	strbeq	r0, [r1, #480]!	; 0x1e0
    e81c:	e70e0000 	str	r0, [lr, -r0]
    e820:	08000020 	stmdaeq	r0, {r5}
    e824:	00a201e1 	adceq	r0, r2, r1, ror #3
    e828:	06010000 	streq	r0, [r1], -r0
    e82c:	bd0e0002 	stclt	0, cr0, [lr, #-8]
    e830:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    e834:	00a201e3 	adceq	r0, r2, r3, ror #3
    e838:	02010000 	andeq	r0, r1, #0
    e83c:	0d000000 	stceq	0, cr0, [r0, #-0]
    e840:	01e80802 	mvneq	r0, r2, lsl #16
    e844:	0000063b 	andeq	r0, r0, fp, lsr r6
    e848:	001e8c0e 	andseq	r8, lr, lr, lsl #24
    e84c:	01e90800 	mvneq	r0, r0, lsl #16
    e850:	000000b8 	strheq	r0, [r0], -r8
    e854:	000a0602 	andeq	r0, sl, r2, lsl #12
    e858:	001d290e 	andseq	r2, sp, lr, lsl #18
    e85c:	01ea0800 	mvneq	r0, r0, lsl #16
    e860:	000000b8 	strheq	r0, [r0], -r8
    e864:	00090102 	andeq	r0, r9, r2, lsl #2
    e868:	001ef40e 	andseq	pc, lr, lr, lsl #8
    e86c:	01ec0800 	mvneq	r0, r0, lsl #16
    e870:	000000b8 	strheq	r0, [r0], -r8
    e874:	00080102 	andeq	r0, r8, r2, lsl #2
    e878:	001aa50e 	andseq	sl, sl, lr, lsl #10
    e87c:	01ee0800 	mvneq	r0, r0, lsl #16
    e880:	000000b8 	strheq	r0, [r0], -r8
    e884:	00040402 	andeq	r0, r4, r2, lsl #8
    e888:	001a480e 	andseq	r4, sl, lr, lsl #16
    e88c:	01f30800 	mvnseq	r0, r0, lsl #16
    e890:	000000b8 	strheq	r0, [r0], -r8
    e894:	00000302 	andeq	r0, r0, r2, lsl #6
    e898:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    e89c:	068501fc 			; <UNDEFINED> instruction: 0x068501fc
    e8a0:	8a0e0000 	bhi	38e8a8 <__ccfg+0x36e900>
    e8a4:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e8a8:	00b801fd 	ldrshteq	r0, [r8], sp
    e8ac:	03020000 	movweq	r0, #8192	; 0x2000
    e8b0:	290e000d 	stmdbcs	lr, {r0, r2, r3}
    e8b4:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    e8b8:	00b80203 	adcseq	r0, r8, r3, lsl #4
    e8bc:	01020000 	mrseq	r0, (UNDEF: 2)
    e8c0:	c90e000c 	stmdbgt	lr, {r2, r3}
    e8c4:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    e8c8:	00b80205 	adcseq	r0, r8, r5, lsl #4
    e8cc:	06020000 	streq	r0, [r2], -r0
    e8d0:	c70e0006 	strgt	r0, [lr, -r6]
    e8d4:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    e8d8:	00b8020c 	adcseq	r0, r8, ip, lsl #4
    e8dc:	01020000 	mrseq	r0, (UNDEF: 2)
    e8e0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    e8e4:	02220801 	eoreq	r0, r2, #65536	; 0x10000
    e8e8:	000006cf 	andeq	r0, r0, pc, asr #13
    e8ec:	0022490e 	eoreq	r4, r2, lr, lsl #18
    e8f0:	02230800 	eoreq	r0, r3, #0, 16
    e8f4:	000000a2 	andeq	r0, r0, r2, lsr #1
    e8f8:	00040401 	andeq	r0, r4, r1, lsl #8
    e8fc:	001bd70e 	andseq	sp, fp, lr, lsl #14
    e900:	02240800 	eoreq	r0, r4, #0, 16
    e904:	000000a2 	andeq	r0, r0, r2, lsr #1
    e908:	00030101 	andeq	r0, r3, r1, lsl #2
    e90c:	001c970e 	andseq	r9, ip, lr, lsl #14
    e910:	02260800 	eoreq	r0, r6, #0, 16
    e914:	000000a2 	andeq	r0, r0, r2, lsr #1
    e918:	00010201 	andeq	r0, r1, r1, lsl #4
    e91c:	001a650e 	andseq	r6, sl, lr, lsl #10
    e920:	02270800 	eoreq	r0, r7, #0, 16
    e924:	000000a2 	andeq	r0, r0, r2, lsr #1
    e928:	00000101 	andeq	r0, r0, r1, lsl #2
    e92c:	08010d00 	stmdaeq	r1, {r8, sl, fp}
    e930:	06f9022a 	ldrbteq	r0, [r9], sl, lsr #4
    e934:	b30e0000 	movwlt	r0, #57344	; 0xe000
    e938:	08000020 	stmdaeq	r0, {r5}
    e93c:	00a2022b 	adceq	r0, r2, fp, lsr #4
    e940:	04010000 	streq	r0, [r1], #-0
    e944:	0f0e0004 	svceq	0x000e0004
    e948:	08000022 	stmdaeq	r0, {r1, r5}
    e94c:	00a2022c 	adceq	r0, r2, ip, lsr #4
    e950:	04010000 	streq	r0, [r1], #-0
    e954:	0d000000 	stceq	0, cr0, [r0, #-0]
    e958:	022e0802 	eoreq	r0, lr, #131072	; 0x20000
    e95c:	00000723 	andeq	r0, r0, r3, lsr #14
    e960:	001cef0e 	andseq	lr, ip, lr, lsl #30
    e964:	022f0800 	eoreq	r0, pc, #0, 16
    e968:	000000b8 	strheq	r0, [r0], -r8
    e96c:	000d0302 	andeq	r0, sp, r2, lsl #6
    e970:	0021f20e 	eoreq	pc, r1, lr, lsl #4
    e974:	02320800 	eorseq	r0, r2, #0, 16
    e978:	000000b8 	strheq	r0, [r0], -r8
    e97c:	00000d02 	andeq	r0, r0, r2, lsl #26
    e980:	08040d00 	stmdaeq	r4, {r8, sl, fp}
    e984:	074d0234 	smlaldxeq	r0, sp, r4, r2
    e988:	830e0000 	movwhi	r0, #57344	; 0xe000
    e98c:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    e990:	00ce0235 	sbceq	r0, lr, r5, lsr r2
    e994:	04040000 	streq	r0, [r4], #-0
    e998:	930e001c 	movwls	r0, #57372	; 0xe01c
    e99c:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    e9a0:	00ce0237 	sbceq	r0, lr, r7, lsr r2
    e9a4:	15040000 	strne	r0, [r4, #-0]
    e9a8:	0d000003 	stceq	0, cr0, [r0, #-12]
    e9ac:	023a0801 	eorseq	r0, sl, #65536	; 0x10000
    e9b0:	00000777 	andeq	r0, r0, r7, ror r7
    e9b4:	0020e70e 	eoreq	lr, r0, lr, lsl #14
    e9b8:	023b0800 	eorseq	r0, fp, #0, 16
    e9bc:	000000a2 	andeq	r0, r0, r2, lsr #1
    e9c0:	00020601 	andeq	r0, r2, r1, lsl #12
    e9c4:	001abd0e 	andseq	fp, sl, lr, lsl #26
    e9c8:	023d0800 	eorseq	r0, sp, #0, 16
    e9cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    e9d0:	00000201 	andeq	r0, r0, r1, lsl #4
    e9d4:	08020d00 	stmdaeq	r2, {r8, sl, fp}
    e9d8:	07d10242 	ldrbeq	r0, [r1, r2, asr #4]
    e9dc:	8c0e0000 	stchi	0, cr0, [lr], {-0}
    e9e0:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    e9e4:	00b80243 	adcseq	r0, r8, r3, asr #4
    e9e8:	06020000 	streq	r0, [r2], -r0
    e9ec:	290e000a 	stmdbcs	lr, {r1, r3}
    e9f0:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    e9f4:	00b80244 	adcseq	r0, r8, r4, asr #4
    e9f8:	01020000 	mrseq	r0, (UNDEF: 2)
    e9fc:	f40e0009 	vst4.8	{d0-d3}, [lr], r9
    ea00:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    ea04:	00b80246 	adcseq	r0, r8, r6, asr #4
    ea08:	01020000 	mrseq	r0, (UNDEF: 2)
    ea0c:	a50e0008 	strge	r0, [lr, #-8]
    ea10:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    ea14:	00b80248 	adcseq	r0, r8, r8, asr #4
    ea18:	04020000 	streq	r0, [r2], #-0
    ea1c:	480e0004 	stmdami	lr, {r2}
    ea20:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    ea24:	00b8024d 	adcseq	r0, r8, sp, asr #4
    ea28:	03020000 	movweq	r0, #8192	; 0x2000
    ea2c:	0d000000 	stceq	0, cr0, [r0, #-0]
    ea30:	02560802 	subseq	r0, r6, #131072	; 0x20000
    ea34:	0000081b 	andeq	r0, r0, fp, lsl r8
    ea38:	001c8a0e 	andseq	r8, ip, lr, lsl #20
    ea3c:	02570800 	subseq	r0, r7, #0, 16
    ea40:	000000b8 	strheq	r0, [r0], -r8
    ea44:	000d0302 	andeq	r0, sp, r2, lsl #6
    ea48:	001c290e 	andseq	r2, ip, lr, lsl #18
    ea4c:	025d0800 	subseq	r0, sp, #0, 16
    ea50:	000000b8 	strheq	r0, [r0], -r8
    ea54:	000c0102 	andeq	r0, ip, r2, lsl #2
    ea58:	001bc90e 	andseq	ip, fp, lr, lsl #18
    ea5c:	025f0800 	subseq	r0, pc, #0, 16
    ea60:	000000b8 	strheq	r0, [r0], -r8
    ea64:	00060602 	andeq	r0, r6, r2, lsl #12
    ea68:	001ec70e 	andseq	ip, lr, lr, lsl #14
    ea6c:	02660800 	rsbeq	r0, r6, #0, 16
    ea70:	000000b8 	strheq	r0, [r0], -r8
    ea74:	00050102 	andeq	r0, r5, r2, lsl #2
    ea78:	02100900 	andseq	r0, r0, #0, 18
    ea7c:	00085448 	andeq	r5, r8, r8, asr #8
    ea80:	1c4f0800 	mcrrne	8, 0, r0, pc, cr0
    ea84:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
    ea88:	000000ce 	andeq	r0, r0, lr, asr #1
    ea8c:	1bb00800 	blne	fec10a94 <_estack+0xdec0ba94>
    ea90:	4a020000 	bmi	8ea98 <__ccfg+0x6eaf0>
    ea94:	000000ce 	andeq	r0, r0, lr, asr #1
    ea98:	1ffa0804 	svcne	0x00fa0804
    ea9c:	4b020000 	blmi	8eaa4 <__ccfg+0x6eafc>
    eaa0:	000000ce 	andeq	r0, r0, lr, asr #1
    eaa4:	21550808 	cmpcs	r5, r8, lsl #16
    eaa8:	4c020000 	stcmi	0, cr0, [r2], {-0}
    eaac:	000000ce 	andeq	r0, r0, lr, asr #1
    eab0:	6e03000c 	cdpvs	0, 0, cr0, cr3, cr12, {0}
    eab4:	0200001a 	andeq	r0, r0, #26
    eab8:	00081b4d 	andeq	r1, r8, sp, asr #22
    eabc:	2f480f00 	svccs	0x00480f00
    eac0:	3e020000 	cdpcc	0, 0, cr0, cr2, cr0, {0}
    eac4:	aa100301 	bge	40f6d0 <__ccfg+0x3ef728>
    eac8:	0200002d 	andeq	r0, r0, #45	; 0x2d
    eacc:	00ce0114 	sbceq	r0, lr, r4, lsl r1
    ead0:	00000000 	andeq	r0, r0, r0
    ead4:	00140000 	andseq	r0, r4, r0
    ead8:	9c010000 	stcls	0, cr0, [r1], {-0}
    eadc:	00000890 	muleq	r0, r0, r8
    eae0:	002e6211 	eoreq	r6, lr, r1, lsl r2
    eae4:	ce6a0100 	powgte	f0, f2, f0
    eae8:	01000000 	mrseq	r0, (UNDEF: 0)
    eaec:	30100050 	andscc	r0, r0, r0, asr r0
    eaf0:	0200002f 	andeq	r0, r0, #47	; 0x2f
    eaf4:	00ce014c 	sbceq	r0, lr, ip, asr #2
    eaf8:	31f00000 	mvnscc	r0, r0
    eafc:	00280000 	eoreq	r0, r8, r0
    eb00:	9c010000 	stcls	0, cr0, [r1], {-0}
    eb04:	000008d8 	ldrdeq	r0, [r0], -r8
    eb08:	704f7012 	subvc	r7, pc, r2, lsl r0	; <UNPREDICTABLE>
    eb0c:	ce7a0100 	rpwgte	f0, f2, f0
    eb10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    eb14:	13000038 	movwne	r0, #56	; 0x38
    eb18:	0000085f 	andeq	r0, r0, pc, asr r8
    eb1c:	000031f8 	strdeq	r3, [r0], -r8
    eb20:	00000004 	andeq	r0, r0, r4
    eb24:	5f137e01 	svcpl	0x00137e01
    eb28:	04000008 	streq	r0, [r0], #-8
    eb2c:	06000032 			; <UNDEFINED> instruction: 0x06000032
    eb30:	01000000 	mrseq	r0, (UNDEF: 0)
    eb34:	32140083 	andscc	r0, r4, #131	; 0x83
    eb38:	0200002e 	andeq	r0, r0, #46	; 0x2e
    eb3c:	32180154 	andscc	r0, r8, #84, 2
    eb40:	004c0000 	subeq	r0, ip, r0
    eb44:	9c010000 	stcls	0, cr0, [r1], {-0}
    eb48:	002f5f15 	eoreq	r5, pc, r5, lsl pc	; <UNPREDICTABLE>
    eb4c:	015c0200 	cmpeq	ip, r0, lsl #4
    eb50:	00003264 	andeq	r3, r0, r4, ror #4
    eb54:	00000150 	andeq	r0, r0, r0, asr r1
    eb58:	092a9c01 	stmdbeq	sl!, {r0, sl, fp, ip, pc}
    eb5c:	59160000 	ldmdbpl	r6, {}	; <UNPREDICTABLE>
    eb60:	0100002e 	tsteq	r0, lr, lsr #32
    eb64:	00026da4 	andeq	r6, r2, r4, lsr #27
    eb68:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    eb6c:	00002eaf 	andeq	r2, r0, pc, lsr #29
    eb70:	092aa401 	stmdbeq	sl!, {r0, sl, sp, pc}
    eb74:	51010000 	mrspl	r0, (UNDEF: 1)
    eb78:	002f5717 	eoreq	r5, pc, r7, lsl r7	; <UNPREDICTABLE>
    eb7c:	94a60100 	strtls	r0, [r6], #256	; 0x100
    eb80:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    eb84:	00000038 	andeq	r0, r0, r8, lsr r0
    eb88:	08540406 	ldmdaeq	r4, {r1, r2, sl}^
    eb8c:	21150000 	tstcs	r5, r0
    eb90:	0200002f 	andeq	r0, r0, #47	; 0x2f
    eb94:	33b4016c 			; <UNDEFINED> instruction: 0x33b4016c
    eb98:	01180000 	tsteq	r8, r0
    eb9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    eba0:	000009ac 	andeq	r0, r0, ip, lsr #19
    eba4:	002e5918 	eoreq	r5, lr, r8, lsl r9
    eba8:	6df30100 	ldfvse	f0, [r3]
    ebac:	47000002 	strmi	r0, [r0, -r2]
    ebb0:	17000038 	smladxne	r0, r8, r0, r0
    ebb4:	00002f57 	andeq	r2, r0, r7, asr pc
    ebb8:	00c3f501 	sbceq	pc, r3, r1, lsl #10
    ebbc:	38680000 	stmdacc	r8!, {}^	; <UNPREDICTABLE>
    ebc0:	15170000 	ldrne	r0, [r7, #-0]
    ebc4:	0100002f 	tsteq	r0, pc, lsr #32
    ebc8:	0000cef6 	strdeq	ip, [r0], -r6
    ebcc:	0038b700 	eorseq	fp, r8, r0, lsl #14
    ebd0:	2dc51700 	stclcs	7, cr1, [r5]
    ebd4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    ebd8:	00000324 	andeq	r0, r0, r4, lsr #6
    ebdc:	00003901 	andeq	r3, r0, r1, lsl #18
    ebe0:	002dd619 	eoreq	sp, sp, r9, lsl r6
    ebe4:	c3f80100 	mvnsgt	r0, #0, 2
    ebe8:	17000000 	strne	r0, [r0, -r0]
    ebec:	00002eb7 			; <UNDEFINED> instruction: 0x00002eb7
    ebf0:	00cef901 	sbceq	pc, lr, r1, lsl #18
    ebf4:	39440000 	stmdbcc	r4, {}^	; <UNPREDICTABLE>
    ebf8:	4a170000 	bmi	5cec00 <__ccfg+0x5aec58>
    ebfc:	0100002e 	tsteq	r0, lr, lsr #32
    ec00:	0000cefa 	strdeq	ip, [r0], -sl
    ec04:	00399c00 	eorseq	r9, r9, r0, lsl #24
    ec08:	1f150000 	svcne	0x00150000
    ec0c:	0200002e 	andeq	r0, r0, #46	; 0x2e
    ec10:	34cc0164 	strbcc	r0, [ip], #356	; 0x164
    ec14:	00200000 	eoreq	r0, r0, r0
    ec18:	9c010000 	stcls	0, cr0, [r1], {-0}
    ec1c:	000009d3 	ldrdeq	r0, [r0], -r3
    ec20:	002eaf1a 	eoreq	sl, lr, sl, lsl pc
    ec24:	01770100 	cmneq	r7, r0, lsl #2
    ec28:	0000092a 	andeq	r0, r0, sl, lsr #18
    ec2c:	000039d2 	ldrdeq	r3, [r0], -r2
    ec30:	2e7d1500 	cdpcs	5, 7, cr1, cr13, cr0, {0}
    ec34:	74020000 	strvc	r0, [r2], #-0
    ec38:	00000001 	andeq	r0, r0, r1
    ec3c:	00006000 	andeq	r6, r0, r0
    ec40:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
    ec44:	1b00000a 	blne	ec74 <__exidx_end+0x9d44>
    ec48:	00002133 	andeq	r2, r0, r3, lsr r1
    ec4c:	ff018401 			; <UNDEFINED> instruction: 0xff018401
    ec50:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    ec54:	1b210003 	blne	84ec68 <__ccfg+0x82ecc0>
    ec58:	00001bea 	andeq	r1, r0, sl, ror #23
    ec5c:	24018501 	strcs	r8, [r1], #-1281	; 0xfffffaff
    ec60:	bc000003 	stclt	0, cr0, [r0], {3}
    ec64:	1c210003 	stcne	0, cr0, [r1], #-12
    ec68:	89010069 	stmdbhi	r1, {r0, r3, r5, r6}
    ec6c:	00009401 	andeq	r9, r0, r1, lsl #8
    ec70:	003a0000 	eorseq	r0, sl, r0
    ec74:	00001d00 	andeq	r1, r0, r0, lsl #26
    ec78:	0a9c0000 	beq	fe70ec80 <_estack+0xde709c80>
    ec7c:	011e0000 	tsteq	lr, r0
    ec80:	84080252 	strhi	r0, [r8], #-594	; 0xfffffdae
    ec84:	0251011e 	subseq	r0, r1, #-2147483641	; 0x80000007
    ec88:	011eff08 	tsteq	lr, r8, lsl #30	; <UNPREDICTABLE>
    ec8c:	380c0550 	stmdacc	ip, {r4, r6, r8, sl}
    ec90:	00210003 	eoreq	r0, r1, r3
    ec94:	2de51500 	cfstr64cs	mvdx1, [r5]
    ec98:	7c020000 	stcvc	0, cr0, [r2], {-0}
    ec9c:	0034ec01 	eorseq	lr, r4, r1, lsl #24
    eca0:	00001c00 	andeq	r1, r0, r0, lsl #24
    eca4:	5c9c0100 	ldfpls	f0, [ip], {0}
    eca8:	1f00000a 	svcne	0x0000000a
    ecac:	00002f0d 	andeq	r2, r0, sp, lsl #30
    ecb0:	5c019601 	stcpl	6, cr9, [r1], {1}
    ecb4:	0100000a 	tsteq	r0, sl
    ecb8:	01020050 	qaddeq	r0, r0, r2
    ecbc:	00116a02 	andseq	r6, r1, r2, lsl #20
    ecc0:	00b82000 	adcseq	r2, r8, r0
    ecc4:	0a730000 	beq	1cceccc <__ccfg+0x1caed24>
    ecc8:	e4210000 	strt	r0, [r1], #-0
    eccc:	0b000000 	bleq	ecd4 <__exidx_end+0x9da4>
    ecd0:	2e6a2200 	cdpcs	2, 6, cr2, cr10, cr0, {0}
    ecd4:	52010000 	andpl	r0, r1, #0
    ecd8:	00000a97 	muleq	r0, r7, sl
    ecdc:	3d3bc318 	ldccc	3, cr12, [fp, #-96]!	; 0xffffffa0
    ece0:	713a5d3a 	teqvc	sl, sl, lsr sp
    ece4:	8f0aa13a 	svchi	0x000aa13a
    ece8:	b33b0f3a 	teqlt	fp, #58, 30	; 0xe8
    ecec:	855e4909 	ldrbhi	r4, [lr, #-2313]	; 0xfffff6f7
    ecf0:	853b2f0a 	ldrhi	r2, [fp, #-3850]!	; 0xfffff0f6
    ecf4:	0a63233b 	beq	18d79e8 <__ccfg+0x18b7a40>
    ecf8:	df240000 	svcle	0x00240000
    ecfc:	09000011 	stmdbeq	r0, {r0, r4}
    ed00:	0000eb19 	andeq	lr, r0, r9, lsl fp
    ed04:	00eb2500 	rsceq	r2, fp, r0, lsl #10
    ed08:	94250000 	strtls	r0, [r5], #-0
    ed0c:	25000000 	strcs	r0, [r0, #-0]
    ed10:	000000d9 	ldrdeq	r0, [r0], -r9
    ed14:	02070000 	andeq	r0, r7, #0
    ed18:	00040000 	andeq	r0, r4, r0
    ed1c:	000035fd 	strdeq	r3, [r0], -sp
    ed20:	25050104 	strcs	r0, [r5, #-260]	; 0xfffffefc
    ed24:	2f010000 	svccs	0x00010000
    ed28:	cc000030 	stcgt	0, cr0, [r0], {48}	; 0x30
    ed2c:	a8000025 	stmdage	r0, {r0, r2, r5}
    ed30:	00000010 	andeq	r0, r0, r0, lsl r0
    ed34:	43000000 	movwmi	r0, #0
    ed38:	02000076 	andeq	r0, r0, #118	; 0x76
    ed3c:	08de0601 	ldmeq	lr, {r0, r9, sl}^
    ed40:	01020000 	mrseq	r0, (UNDEF: 2)
    ed44:	0008dc08 	andeq	sp, r8, r8, lsl #24
    ed48:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    ed4c:	000007a3 	andeq	r0, r0, r3, lsr #15
    ed50:	aa070202 	bge	1cf560 <__ccfg+0x1af5b8>
    ed54:	02000009 	andeq	r0, r0, #9
    ed58:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
    ed5c:	f3030000 	vhadd.u8	d0, d3, d0
    ed60:	03000008 	movweq	r0, #8
    ed64:	00005341 	andeq	r5, r0, r1, asr #6
    ed68:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ed6c:	00000397 	muleq	r0, r7, r3
    ed70:	e8050802 	stmda	r5, {r1, fp}
    ed74:	02000005 	andeq	r0, r0, #5
    ed78:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
    ed7c:	04040000 	streq	r0, [r4], #-0
    ed80:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    ed84:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ed88:	0000039c 	muleq	r0, ip, r3
    ed8c:	0008f503 	andeq	pc, r8, r3, lsl #10
    ed90:	48200400 	stmdami	r0!, {sl}
    ed94:	05000000 	streq	r0, [r0, #-0]
    ed98:	0000308c 	andeq	r3, r0, ip, lsl #1
    ed9c:	03033002 	movweq	r3, #12290	; 0x3002
    eda0:	0030f706 	eorseq	pc, r0, r6, lsl #14
    eda4:	01fd0100 	mvnseq	r0, r0, lsl #2
    eda8:	00309f05 	eorseq	r9, r0, r5, lsl #30
    edac:	01820100 	orreq	r0, r2, r0, lsl #2
    edb0:	2f7a0701 	svccs	0x007a0701
    edb4:	0d010000 	stceq	0, cr0, [r1, #-0]
    edb8:	00350801 	eorseq	r0, r5, r1, lsl #16
    edbc:	0000d400 	andeq	sp, r0, r0, lsl #8
    edc0:	6d9c0100 	ldfvss	f0, [ip]
    edc4:	08000001 	stmdaeq	r0, {r0}
    edc8:	0000307a 	andeq	r3, r0, sl, ror r0
    edcc:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    edd0:	a4000000 	strge	r0, [r0], #-0
    edd4:	0900003a 	stmdbeq	r0, {r1, r3, r4, r5}
    edd8:	000030e6 	andeq	r3, r0, r6, ror #1
    eddc:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    ede0:	d0000000 	andle	r0, r0, r0
    ede4:	0900003a 	stmdbeq	r0, {r1, r3, r4, r5}
    ede8:	00002f73 	andeq	r2, r0, r3, ror pc
    edec:	76011001 	strvc	r1, [r1], -r1
    edf0:	e3000000 	movw	r0, #0
    edf4:	0a00003a 	beq	eee4 <__exidx_end+0x9fb4>
    edf8:	00000081 	andeq	r0, r0, r1, lsl #1
    edfc:	0000353a 	andeq	r3, r0, sl, lsr r5
    ee00:	00000006 	andeq	r0, r0, r6
    ee04:	0b013601 	bleq	5c610 <__ccfg+0x3c668>
    ee08:	00003560 	andeq	r3, r0, r0, ror #10
    ee0c:	0000002a 	andeq	r0, r0, sl, lsr #32
    ee10:	0000011f 	andeq	r0, r0, pc, lsl r1
    ee14:	00316c09 	eorseq	r6, r1, r9, lsl #24
    ee18:	01530100 	cmpeq	r3, r0, lsl #2
    ee1c:	00000076 	andeq	r0, r0, r6, ror r0
    ee20:	00003afc 	strdeq	r3, [r0], -ip
    ee24:	0030c809 	eorseq	ip, r0, r9, lsl #16
    ee28:	01540100 	cmpeq	r4, r0, lsl #2
    ee2c:	00000076 	andeq	r0, r0, r6, ror r0
    ee30:	00003b0f 	andeq	r3, r0, pc, lsl #22
    ee34:	354a0c00 	strbcc	r0, [sl, #-3072]	; 0xfffff400
    ee38:	01c30000 	biceq	r0, r3, r0
    ee3c:	01330000 	teqeq	r3, r0
    ee40:	010d0000 	mrseq	r0, (UNDEF: 13)
    ee44:	00740250 	rsbseq	r0, r4, r0, asr r2
    ee48:	35520c00 	ldrbcc	r0, [r2, #-3072]	; 0xfffff400
    ee4c:	01d40000 	bicseq	r0, r4, r0
    ee50:	014d0000 	mrseq	r0, (UNDEF: 77)
    ee54:	010d0000 	mrseq	r0, (UNDEF: 13)
    ee58:	00740251 	rsbseq	r0, r4, r1, asr r2
    ee5c:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    ee60:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    ee64:	00003590 	muleq	r0, r0, r5
    ee68:	000001ea 	andeq	r0, r0, sl, ror #3
    ee6c:	00000161 	andeq	r0, r0, r1, ror #2
    ee70:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    ee74:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    ee78:	0000359a 	muleq	r0, sl, r5
    ee7c:	0150010d 	cmpeq	r0, sp, lsl #2
    ee80:	0f000032 	svceq	0x00000032
    ee84:	000030b2 	strheq	r3, [r0], -r2
    ee88:	35dc5f07 	ldrbcc	r5, [ip, #3847]	; 0xf07
    ee8c:	00a40000 	adceq	r0, r4, r0
    ee90:	9c010000 	stcls	0, cr0, [r1], {-0}
    ee94:	000001c3 	andeq	r0, r0, r3, asr #3
    ee98:	00307a10 	eorseq	r7, r0, r0, lsl sl
    ee9c:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    eea0:	3a000000 	bcc	eea8 <__exidx_end+0x9f78>
    eea4:	1000003b 	andne	r0, r0, fp, lsr r0
    eea8:	000030d3 	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
    eeac:	00767301 	rsbseq	r7, r6, r1, lsl #6
    eeb0:	3b4d0000 	blcc	134eeb8 <__ccfg+0x132ef10>
    eeb4:	ec110000 	ldc	0, cr0, [r1], {-0}
    eeb8:	fb000035 	blx	ef96 <__exidx_end+0xa066>
    eebc:	11000001 	tstne	r0, r1
    eec0:	00003600 	andeq	r3, r0, r0, lsl #12
    eec4:	00000203 	andeq	r0, r0, r3, lsl #4
    eec8:	00361012 	eorseq	r1, r6, r2, lsl r0
    eecc:	00009b00 	andeq	r9, r0, r0, lsl #22
    eed0:	50010d00 	andpl	r0, r1, r0, lsl #26
    eed4:	00007402 	andeq	r7, r0, r2, lsl #8
    eed8:	2f9f1300 	svccs	0x009f1300
    eedc:	6c050000 	stcvs	0, cr0, [r5], {-0}
    eee0:	000001d4 	ldrdeq	r0, [r0], -r4
    eee4:	00007614 	andeq	r7, r0, r4, lsl r6
    eee8:	cf130000 	svcgt	0x00130000
    eeec:	0500002f 	streq	r0, [r0, #-47]	; 0xffffffd1
    eef0:	0001ea73 	andeq	lr, r1, r3, ror sl
    eef4:	00761400 	rsbseq	r1, r6, r0, lsl #8
    eef8:	76140000 	ldrvc	r0, [r4], -r0
    eefc:	00000000 	andeq	r0, r0, r0
    ef00:	002fff13 	eoreq	pc, pc, r3, lsl pc	; <UNPREDICTABLE>
    ef04:	fb7a0500 	blx	1e9030e <__ccfg+0x1e70366>
    ef08:	14000001 	strne	r0, [r0], #-1
    ef0c:	00000076 	andeq	r0, r0, r6, ror r0
    ef10:	312f1500 			; <UNDEFINED> instruction: 0x312f1500
    ef14:	43060000 	movwmi	r0, #24576	; 0x6000
    ef18:	304c1602 	subcc	r1, ip, r2, lsl #12
    ef1c:	fd050000 	stc2	0, cr0, [r5, #-0]
    ef20:	000b1700 	andeq	r1, fp, r0, lsl #14
    ef24:	3f000400 	svccc	0x00000400
    ef28:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    ef2c:	00250501 	eoreq	r0, r5, r1, lsl #10
    ef30:	33af0100 			; <UNDEFINED> instruction: 0x33af0100
    ef34:	25cc0000 	strbcs	r0, [ip]
    ef38:	10f00000 	rscsne	r0, r0, r0
    ef3c:	00000000 	andeq	r0, r0, r0
    ef40:	78300000 	ldmdavc	r0!, {}	; <UNPREDICTABLE>
    ef44:	01020000 	mrseq	r0, (UNDEF: 2)
    ef48:	0008de06 	andeq	sp, r8, r6, lsl #28
    ef4c:	08010200 	stmdaeq	r1, {r9}
    ef50:	000008dc 	ldrdeq	r0, [r0], -ip
    ef54:	a3050202 	movwge	r0, #20994	; 0x5202
    ef58:	02000007 	andeq	r0, r0, #7
    ef5c:	09aa0702 	stmibeq	sl!, {r1, r8, r9, sl}
    ef60:	65030000 	strvs	r0, [r3, #-0]
    ef64:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    ef68:	00004c3f 	andeq	r4, r0, pc, lsr ip
    ef6c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    ef70:	000005ed 	andeq	r0, r0, sp, ror #11
    ef74:	0008f303 	andeq	pc, r8, r3, lsl #6
    ef78:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    ef7c:	02000000 	andeq	r0, r0, #0
    ef80:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
    ef84:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    ef88:	0005e805 	andeq	lr, r5, r5, lsl #16
    ef8c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    ef90:	00000392 	muleq	r0, r2, r3
    ef94:	69050404 	stmdbvs	r5, {r2, sl}
    ef98:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    ef9c:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    efa0:	67030000 	strvs	r0, [r3, -r0]
    efa4:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
    efa8:	0000411f 	andeq	r4, r0, pc, lsl r1
    efac:	08f50300 	ldmeq	r5!, {r8, r9}^
    efb0:	20050000 	andcs	r0, r5, r0
    efb4:	00000053 	andeq	r0, r0, r3, asr r0
    efb8:	00344205 	eorseq	r4, r4, r5, lsl #4
    efbc:	81e90200 	mvnhi	r0, r0, lsl #4
    efc0:	03000000 	movweq	r0, #0
    efc4:	000000be 	strheq	r0, [r0], -lr
    efc8:	00319206 	eorseq	r9, r1, r6, lsl #4
    efcc:	8ce90200 	sfmhi	f0, 2, [r9]
    efd0:	07000000 	streq	r0, [r0, -r0]
    efd4:	0000349b 	muleq	r0, fp, r4
    efd8:	0081ef02 	addeq	lr, r1, r2, lsl #30
    efdc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    efe0:	000031c7 	andeq	r3, r0, r7, asr #3
    efe4:	008cab02 	addeq	sl, ip, r2, lsl #22
    efe8:	e7010000 	str	r0, [r1, -r0]
    efec:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    eff0:	0000307a 	andeq	r3, r0, sl, ror r0
    eff4:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    eff8:	0a000000 	beq	f000 <__exidx_end+0xa0d0>
    effc:	00003524 	andeq	r3, r0, r4, lsr #10
    f000:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    f004:	00000000 	andeq	r0, r0, r0
    f008:	00347a08 	eorseq	r7, r4, r8, lsl #20
    f00c:	8c810200 	sfmhi	f0, 4, [r1], {0}
    f010:	01000000 	mrseq	r0, (UNDEF: 0)
    f014:	00000110 	andeq	r0, r0, r0, lsl r1
    f018:	00307a09 	eorseq	r7, r0, r9, lsl #20
    f01c:	033c0100 	teqeq	ip, #0, 2
    f020:	0000008c 	andeq	r0, r0, ip, lsl #1
    f024:	0034eb0a 	eorseq	lr, r4, sl, lsl #22
    f028:	033e0100 	teqeq	lr, #0, 2
    f02c:	0000008c 	andeq	r0, r0, ip, lsl #1
    f030:	33280800 			; <UNDEFINED> instruction: 0x33280800
    f034:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    f038:	0000008c 	andeq	r0, r0, ip, lsl #1
    f03c:	00013901 	andeq	r3, r1, r1, lsl #18
    f040:	307a0900 	rsbscc	r0, sl, r0, lsl #18
    f044:	4f010000 	svcmi	0x00010000
    f048:	00008c03 	andeq	r8, r0, r3, lsl #24
    f04c:	345f0a00 	ldrbcc	r0, [pc], #-2560	; f054 <__exidx_end+0xa124>
    f050:	51010000 	mrspl	r0, (UNDEF: 1)
    f054:	00008c03 	andeq	r8, r0, r3, lsl #24
    f058:	8c080000 	stchi	0, cr0, [r8], {-0}
    f05c:	02000032 	andeq	r0, r0, #50	; 0x32
    f060:	00008cc8 	andeq	r8, r0, r8, asr #25
    f064:	016e0100 	cmneq	lr, r0, lsl #2
    f068:	7a090000 	bvc	24f070 <__ccfg+0x22f0c8>
    f06c:	01000030 	tsteq	r0, r0, lsr r0
    f070:	008c0362 	addeq	r0, ip, r2, ror #6
    f074:	1c0a0000 	stcne	0, cr0, [sl], {-0}
    f078:	01000032 	tsteq	r0, r2, lsr r0
    f07c:	008c0364 	addeq	r0, ip, r4, ror #6
    f080:	5d0a0000 	stcpl	0, cr0, [sl, #-0]
    f084:	01000033 	tsteq	r0, r3, lsr r0
    f088:	008c0365 	addeq	r0, ip, r5, ror #6
    f08c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    f090:	0000338f 	andeq	r3, r0, pc, lsl #7
    f094:	008cb202 	addeq	fp, ip, r2, lsl #4
    f098:	a3010000 	movwge	r0, #4096	; 0x1000
    f09c:	09000001 	stmdbeq	r0, {r0}
    f0a0:	0000307a 	andeq	r3, r0, sl, ror r0
    f0a4:	8c039401 	cfstrshi	mvf9, [r3], {1}
    f0a8:	0a000000 	beq	f0b0 <__exidx_end+0xa180>
    f0ac:	000032ab 	andeq	r3, r0, fp, lsr #5
    f0b0:	8c039601 	stchi	6, cr9, [r3], {1}
    f0b4:	0a000000 	beq	f0bc <__exidx_end+0xa18c>
    f0b8:	0000335d 	andeq	r3, r0, sp, asr r3
    f0bc:	8c039701 	stchi	7, cr9, [r3], {1}
    f0c0:	00000000 	andeq	r0, r0, r0
    f0c4:	00325a08 	eorseq	r5, r2, r8, lsl #20
    f0c8:	8cb90200 	lfmhi	f0, 4, [r9]
    f0cc:	01000000 	mrseq	r0, (UNDEF: 0)
    f0d0:	000001cc 	andeq	r0, r0, ip, asr #3
    f0d4:	00307a09 	eorseq	r7, r0, r9, lsl #20
    f0d8:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    f0dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    f0e0:	0033670a 	eorseq	r6, r3, sl, lsl #14
    f0e4:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    f0e8:	0000008c 	andeq	r0, r0, ip, lsl #1
    f0ec:	34050800 	strcc	r0, [r5], #-2048	; 0xfffff800
    f0f0:	df020000 	svcle	0x00020000
    f0f4:	0000008c 	andeq	r0, r0, ip, lsl #1
    f0f8:	0001f501 	andeq	pc, r1, r1, lsl #10
    f0fc:	307a0900 	rsbscc	r0, sl, r0, lsl #18
    f100:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    f104:	00008c03 	andeq	r8, r0, r3, lsl #24
    f108:	35440a00 	strbcc	r0, [r4, #-2560]	; 0xfffff600
    f10c:	ca010000 	bgt	4f114 <__ccfg+0x2f16c>
    f110:	00008c03 	andeq	r8, r0, r3, lsl #24
    f114:	c5080000 	strgt	r0, [r8, #-0]
    f118:	02000034 	andeq	r0, r0, #52	; 0x34
    f11c:	00008cd7 	ldrdeq	r8, [r0], -r7
    f120:	02120100 	andseq	r0, r2, #0, 2
    f124:	f70a0000 			; <UNDEFINED> instruction: 0xf70a0000
    f128:	01000035 	tsteq	r0, r5, lsr r0
    f12c:	008c0283 	addeq	r0, ip, r3, lsl #5
    f130:	0b000000 	bleq	f138 <__exidx_end+0xa208>
    f134:	00000dd3 	ldrdeq	r0, [r0], -r3
    f138:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    f13c:	000035d4 	ldrdeq	r3, [r0], -r4
    f140:	80010f02 	andhi	r0, r1, r2, lsl #30
    f144:	7c000036 	stcvc	0, cr0, [r0], {54}	; 0x36
    f148:	01000000 	mrseq	r0, (UNDEF: 0)
    f14c:	0002c49c 	muleq	r2, ip, r4
    f150:	30e60d00 	rsccc	r0, r6, r0, lsl #26
    f154:	7f010000 	svcvc	0x00010000
    f158:	0000008c 	andeq	r0, r0, ip, lsl #1
    f15c:	00003b60 	andeq	r3, r0, r0, ror #22
    f160:	0035ec07 	eorseq	lr, r5, r7, lsl #24
    f164:	8c810100 	stfhis	f0, [r1], {0}
    f168:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    f16c:	00003384 	andeq	r3, r0, r4, lsl #7
    f170:	00818201 	addeq	r8, r1, r1, lsl #4
    f174:	52010000 	andpl	r0, r1, #0
    f178:	0031f70f 	eorseq	pc, r1, pc, lsl #14
    f17c:	81830100 	orrhi	r0, r3, r0, lsl #2
    f180:	81000000 	mrshi	r0, (UNDEF: 0)
    f184:	0f00003b 	svceq	0x0000003b
    f188:	000032c5 	andeq	r3, r0, r5, asr #5
    f18c:	00818401 	addeq	r8, r1, r1, lsl #8
    f190:	3b940000 	blcc	fe50f198 <_estack+0xde50a198>
    f194:	97100000 	ldrls	r0, [r0, -r0]
    f198:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    f19c:	c0000036 	andgt	r0, r0, r6, lsr r0
    f1a0:	01000010 	tsteq	r0, r0, lsl r0
    f1a4:	00029b97 	muleq	r2, r7, fp
    f1a8:	00a71100 	adceq	r1, r7, r0, lsl #2
    f1ac:	c0120000 	andsgt	r0, r2, r0
    f1b0:	13000010 	movwne	r0, #16
    f1b4:	000000b2 	strheq	r0, [r0], -r2
    f1b8:	00005201 	andeq	r5, r0, r1, lsl #4
    f1bc:	00009714 	andeq	r9, r0, r4, lsl r7
    f1c0:	00369800 	eorseq	r9, r6, r0, lsl #16
    f1c4:	00000600 	andeq	r0, r0, r0, lsl #12
    f1c8:	11980100 	orrsne	r0, r8, r0, lsl #2
    f1cc:	000000a7 	andeq	r0, r0, r7, lsr #1
    f1d0:	00369815 	eorseq	r9, r6, r5, lsl r8
    f1d4:	00000600 	andeq	r0, r0, r0, lsl #12
    f1d8:	00b21600 	adcseq	r1, r2, r0, lsl #12
    f1dc:	3bc20000 	blcc	ff08f1e4 <_estack+0xdf08a1e4>
    f1e0:	00000000 	andeq	r0, r0, r0
    f1e4:	2f9f1700 	svccs	0x009f1700
    f1e8:	6c020000 	stcvs	0, cr0, [r2], {-0}
    f1ec:	000036fc 	strdeq	r3, [r0], -ip
    f1f0:	000000ac 	andeq	r0, r0, ip, lsr #1
    f1f4:	03439c01 	movteq	r9, #15361	; 0x3c01
    f1f8:	e60d0000 	str	r0, [sp], -r0
    f1fc:	01000030 	tsteq	r0, r0, lsr r0
    f200:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    f204:	003bd500 	eorseq	sp, fp, r0, lsl #10
    f208:	35060f00 	strcc	r0, [r6, #-3840]	; 0xfffff100
    f20c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    f210:	00000081 	andeq	r0, r0, r1, lsl #1
    f214:	00003c09 	andeq	r3, r0, r9, lsl #24
    f218:	00361c0f 	eorseq	r1, r6, pc, lsl #24
    f21c:	81c20100 	bichi	r0, r2, r0, lsl #2
    f220:	32000000 	andcc	r0, r0, #0
    f224:	1800003c 	stmdane	r0, {r2, r3, r4, r5}
    f228:	00000097 	muleq	r0, r7, r0
    f22c:	00003732 	andeq	r3, r0, r2, lsr r7
    f230:	00000006 	andeq	r0, r0, r6
    f234:	0332ee01 	teqeq	r2, #1, 28
    f238:	a7110000 	ldrge	r0, [r1, -r0]
    f23c:	15000000 	strne	r0, [r0, #-0]
    f240:	00003732 	andeq	r3, r0, r2, lsr r7
    f244:	00000006 	andeq	r0, r0, r6
    f248:	0000b216 	andeq	fp, r0, r6, lsl r2
    f24c:	003c5900 	eorseq	r5, ip, r0, lsl #18
    f250:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    f254:	00003720 	andeq	r3, r0, r0, lsr #14
    f258:	0000021a 	andeq	r0, r0, sl, lsl r2
    f25c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f260:	00000074 	andeq	r0, r0, r4, ror r0
    f264:	0031a21b 	eorseq	sl, r1, fp, lsl r2
    f268:	8ca40200 	sfmhi	f0, 4, [r4]
    f26c:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    f270:	5c000037 	stcpl	0, cr0, [r0], {55}	; 0x37
    f274:	01000000 	mrseq	r0, (UNDEF: 0)
    f278:	0003bd9c 	muleq	r3, ip, sp
    f27c:	30e61c00 	rsccc	r1, r6, r0, lsl #24
    f280:	1f010000 	svcne	0x00010000
    f284:	00008c02 	andeq	r8, r0, r2, lsl #24
    f288:	003c6c00 	eorseq	r6, ip, r0, lsl #24
    f28c:	34b61d00 	ldrtcc	r1, [r6], #3328	; 0xd00
    f290:	21010000 	mrscs	r0, (UNDEF: 1)
    f294:	00008c02 	andeq	r8, r0, r2, lsl #24
    f298:	003c8d00 	eorseq	r8, ip, r0, lsl #26
    f29c:	35b81d00 	ldrcc	r1, [r8, #3328]!	; 0xd00
    f2a0:	22010000 	andcs	r0, r1, #0
    f2a4:	00008c02 	andeq	r8, r0, r2, lsl #24
    f2a8:	003ca000 	eorseq	sl, ip, r0
    f2ac:	35c61d00 	strbcc	r1, [r6, #3328]	; 0xd00
    f2b0:	23010000 	movwcs	r0, #4096	; 0x1000
    f2b4:	00008c02 	andeq	r8, r0, r2, lsl #24
    f2b8:	003cee00 	eorseq	lr, ip, r0, lsl #28
    f2bc:	36051d00 	strcc	r1, [r5], -r0, lsl #26
    f2c0:	24010000 	strcs	r0, [r1], #-0
    f2c4:	00008102 	andeq	r8, r0, r2, lsl #2
    f2c8:	003d5600 	eorseq	r5, sp, r0, lsl #12
    f2cc:	35f71d00 	ldrbcc	r1, [r7, #3328]!	; 0xd00
    f2d0:	25010000 	strcs	r0, [r1, #-0]
    f2d4:	00008c02 	andeq	r8, r0, r2, lsl #24
    f2d8:	003d7500 	eorseq	r7, sp, r0, lsl #10
    f2dc:	da1b0000 	ble	6cf2e4 <__ccfg+0x6af33c>
    f2e0:	02000033 	andeq	r0, r0, #51	; 0x33
    f2e4:	00008cc1 	andeq	r8, r0, r1, asr #25
    f2e8:	00380400 	eorseq	r0, r8, r0, lsl #8
    f2ec:	00001800 	andeq	r1, r0, r0, lsl #16
    f2f0:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    f2f4:	1d000003 	stcne	0, cr0, [r0, #-12]
    f2f8:	000035f7 	strdeq	r3, [r0], -r7
    f2fc:	8c026701 	stchi	7, cr6, [r2], {1}
    f300:	9a000000 	bls	f308 <__exidx_end+0xa3d8>
    f304:	0000003d 	andeq	r0, r0, sp, lsr r0
    f308:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
    f30c:	00000000 	andeq	r0, r0, r0
    f310:	00001000 	andeq	r1, r0, r0
    f314:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    f318:	16000004 	strne	r0, [r0], -r4
    f31c:	00000205 	andeq	r0, r0, r5, lsl #4
    f320:	00003dc1 	andeq	r3, r0, r1, asr #27
    f324:	33081b00 	movwcc	r1, #35584	; 0x8b00
    f328:	9d020000 	stcls	0, cr0, [r2, #-0]
    f32c:	0000008c 	andeq	r0, r0, ip, lsl #1
    f330:	0000381c 	andeq	r3, r0, ip, lsl r8
    f334:	00000010 	andeq	r0, r0, r0, lsl r0
    f338:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
    f33c:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    f340:	01000035 	tsteq	r0, r5, lsr r0
    f344:	008c0297 	umulleq	r0, ip, r7, r2
    f348:	3dda0000 	ldclcc	0, cr0, [sl]
    f34c:	b61d0000 	ldrlt	r0, [sp], -r0
    f350:	01000034 	tsteq	r0, r4, lsr r0
    f354:	008c0298 	umulleq	r0, ip, r8, r2
    f358:	3dfb0000 	ldclcc	0, cr0, [fp]
    f35c:	1b000000 	blne	f364 <__exidx_end+0xa434>
    f360:	000032e8 	andeq	r3, r0, r8, ror #5
    f364:	008c9602 	addeq	r9, ip, r2, lsl #12
    f368:	382c0000 	stmdacc	ip!, {}	; <UNPREDICTABLE>
    f36c:	00140000 	andseq	r0, r4, r0
    f370:	9c010000 	stcls	0, cr0, [r1], {-0}
    f374:	00000478 	andeq	r0, r0, r8, ror r4
    f378:	0035f71d 	eorseq	pc, r5, sp, lsl r7	; <UNPREDICTABLE>
    f37c:	02ba0100 	adcseq	r0, sl, #0, 2
    f380:	0000008c 	andeq	r0, r0, ip, lsl #1
    f384:	00003e0e 	andeq	r3, r0, lr, lsl #28
    f388:	0034b61d 	eorseq	fp, r4, sp, lsl r6
    f38c:	02bb0100 	adcseq	r0, fp, #0, 2
    f390:	0000008c 	andeq	r0, r0, ip, lsl #1
    f394:	00003e2f 	andeq	r3, r0, pc, lsr #28
    f398:	35971b00 	ldrcc	r1, [r7, #2816]	; 0xb00
    f39c:	8f020000 	svchi	0x00020000
    f3a0:	0000008c 	andeq	r0, r0, ip, lsl #1
    f3a4:	00003840 	andeq	r3, r0, r0, asr #16
    f3a8:	00000064 	andeq	r0, r0, r4, rrx
    f3ac:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
    f3b0:	7a1c0000 	bvc	70f3b8 <__ccfg+0x6ef410>
    f3b4:	01000030 	tsteq	r0, r0, lsr r0
    f3b8:	008c02db 	ldrdeq	r0, [ip], fp
    f3bc:	3e420000 	cdpcc	0, 4, cr0, cr2, cr0, {0}
    f3c0:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
    f3c4:	01000035 	tsteq	r0, r5, lsr r0
    f3c8:	008c02dd 	ldrdeq	r0, [ip], sp
    f3cc:	3e630000 	cdpcc	0, 6, cr0, cr3, cr0, {0}
    f3d0:	b61d0000 	ldrlt	r0, [sp], -r0
    f3d4:	01000034 	tsteq	r0, r4, lsr r0
    f3d8:	008c02de 	ldrdeq	r0, [ip], lr
    f3dc:	3e970000 	cdpcc	0, 9, cr0, cr7, cr0, {0}
    f3e0:	101d0000 	andsne	r0, sp, r0
    f3e4:	01000032 	tsteq	r0, r2, lsr r0
    f3e8:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
    f3ec:	3eaa0000 	cdpcc	0, 10, cr0, cr10, cr0, {0}
    f3f0:	6f1d0000 	svcvs	0x001d0000
    f3f4:	01000035 	tsteq	r0, r5, lsr r0
    f3f8:	008c02e0 	addeq	r0, ip, r0, ror #5
    f3fc:	3ed80000 	cdpcc	0, 13, cr0, cr8, cr0, {0}
    f400:	ac0a0000 	stcge	0, cr0, [sl], {-0}
    f404:	01000034 	tsteq	r0, r4, lsr r0
    f408:	008c02e1 	addeq	r0, ip, r1, ror #5
    f40c:	801d0000 	andshi	r0, sp, r0
    f410:	01000032 	tsteq	r0, r2, lsr r0
    f414:	008102e2 	addeq	r0, r1, r2, ror #5
    f418:	3f060000 	svccc	0x00060000
    f41c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f420:	000000be 	strheq	r0, [r0], -lr
    f424:	000038a4 	andeq	r3, r0, r4, lsr #17
    f428:	00000014 	andeq	r0, r0, r4, lsl r0
    f42c:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
    f430:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    f434:	81000000 	mrshi	r0, (UNDEF: 0)
    f438:	1600003f 			; <UNDEFINED> instruction: 0x1600003f
    f43c:	000000da 	ldrdeq	r0, [r0], -sl
    f440:	00003fa2 	andeq	r3, r0, r2, lsr #31
    f444:	0038a615 	eorseq	sl, r8, r5, lsl r6
    f448:	00000a00 	andeq	r0, r0, r0, lsl #20
    f44c:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    f450:	3fc10000 	svccc	0x00c10000
    f454:	a6150000 	ldrge	r0, [r5], -r0
    f458:	0a000038 	beq	f540 <__exidx_end+0xa610>
    f45c:	16000000 	strne	r0, [r0], -r0
    f460:	000000da 	ldrdeq	r0, [r0], -sl
    f464:	00003fe2 	andeq	r3, r0, r2, ror #31
    f468:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f46c:	000000e7 	andeq	r0, r0, r7, ror #1
    f470:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    f474:	00000014 	andeq	r0, r0, r4, lsl r0
    f478:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
    f47c:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    f480:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    f484:	1600003f 			; <UNDEFINED> instruction: 0x1600003f
    f488:	00000103 	andeq	r0, r0, r3, lsl #2
    f48c:	00004016 	andeq	r4, r0, r6, lsl r0
    f490:	0038ba15 	eorseq	fp, r8, r5, lsl sl
    f494:	00000a00 	andeq	r0, r0, r0, lsl #20
    f498:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    f49c:	40350000 	eorsmi	r0, r5, r0
    f4a0:	ba150000 	blt	54f4a8 <__ccfg+0x52f500>
    f4a4:	0a000038 	beq	f58c <__exidx_end+0xa65c>
    f4a8:	16000000 	strne	r0, [r0], -r0
    f4ac:	00000103 	andeq	r0, r0, r3, lsl #2
    f4b0:	00004056 	andeq	r4, r0, r6, asr r0
    f4b4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f4b8:	00000110 	andeq	r0, r0, r0, lsl r1
    f4bc:	000038cc 	andeq	r3, r0, ip, asr #17
    f4c0:	00000014 	andeq	r0, r0, r4, lsl r0
    f4c4:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
    f4c8:	201f0000 	andscs	r0, pc, r0
    f4cc:	69000001 	stmdbvs	r0, {r0}
    f4d0:	16000040 	strne	r0, [r0], -r0, asr #32
    f4d4:	0000012c 	andeq	r0, r0, ip, lsr #2
    f4d8:	0000408a 	andeq	r4, r0, sl, lsl #1
    f4dc:	0038ce15 	eorseq	ip, r8, r5, lsl lr
    f4e0:	00000a00 	andeq	r0, r0, r0, lsl #20
    f4e4:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    f4e8:	40a90000 	adcmi	r0, r9, r0
    f4ec:	ce150000 	cdpgt	0, 1, cr0, cr5, cr0, {0}
    f4f0:	0a000038 	beq	f5d8 <__exidx_end+0xa6a8>
    f4f4:	16000000 	strne	r0, [r0], -r0
    f4f8:	0000012c 	andeq	r0, r0, ip, lsr #2
    f4fc:	000040ca 	andeq	r4, r0, sl, asr #1
    f500:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f504:	00000139 	andeq	r0, r0, r9, lsr r1
    f508:	000038e0 	andeq	r3, r0, r0, ror #17
    f50c:	00000028 	andeq	r0, r0, r8, lsr #32
    f510:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    f514:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    f518:	dd000001 	stcle	0, cr0, [r0, #-4]
    f51c:	16000040 	strne	r0, [r0], -r0, asr #32
    f520:	00000155 	andeq	r0, r0, r5, asr r1
    f524:	000040fe 	strdeq	r4, [r0], -lr
    f528:	00016120 	andeq	r6, r1, r0, lsr #2
    f52c:	38e21500 	stmiacc	r2!, {r8, sl, ip}^
    f530:	001c0000 	andseq	r0, ip, r0
    f534:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    f538:	1d000001 	stcne	0, cr0, [r0, #-4]
    f53c:	15000041 	strne	r0, [r0, #-65]	; 0xffffffbf
    f540:	000038e2 	andeq	r3, r0, r2, ror #17
    f544:	0000001c 	andeq	r0, r0, ip, lsl r0
    f548:	00015516 	andeq	r5, r1, r6, lsl r5
    f54c:	00413e00 	subeq	r3, r1, r0, lsl #28
    f550:	01611600 	cmneq	r1, r0, lsl #12
    f554:	416b0000 	cmnmi	fp, r0
    f558:	00000000 	andeq	r0, r0, r0
    f55c:	32351b00 	eorscc	r1, r5, #0, 22
    f560:	cf020000 	svcgt	0x00020000
    f564:	0000008c 	andeq	r0, r0, ip, lsl #1
    f568:	00003908 	andeq	r3, r0, r8, lsl #18
    f56c:	00000010 	andeq	r0, r0, r0, lsl r0
    f570:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
    f574:	cf1d0000 	svcgt	0x001d0000
    f578:	01000032 	tsteq	r0, r2, lsr r0
    f57c:	008c0384 	addeq	r0, ip, r4, lsl #7
    f580:	417e0000 	cmnmi	lr, r0
    f584:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    f588:	0000016e 	andeq	r0, r0, lr, ror #2
    f58c:	00003918 	andeq	r3, r0, r8, lsl r9
    f590:	0000002c 	andeq	r0, r0, ip, lsr #32
    f594:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
    f598:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    f59c:	99000001 	stmdbls	r0, {r0}
    f5a0:	16000041 	strne	r0, [r0], -r1, asr #32
    f5a4:	0000018a 	andeq	r0, r0, sl, lsl #3
    f5a8:	000041ba 			; <UNDEFINED> instruction: 0x000041ba
    f5ac:	00019620 	andeq	r9, r1, r0, lsr #12
    f5b0:	391a1500 	ldmdbcc	sl, {r8, sl, ip}
    f5b4:	001e0000 	andseq	r0, lr, r0
    f5b8:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    f5bc:	dd000001 	stcle	0, cr0, [r0, #-4]
    f5c0:	15000041 	strne	r0, [r0, #-65]	; 0xffffffbf
    f5c4:	0000391a 	andeq	r3, r0, sl, lsl r9
    f5c8:	0000001e 	andeq	r0, r0, lr, lsl r0
    f5cc:	00018a16 	andeq	r8, r1, r6, lsl sl
    f5d0:	0041fe00 	subeq	pc, r1, r0, lsl #28
    f5d4:	01961600 	orrseq	r1, r6, r0, lsl #12
    f5d8:	422b0000 	eormi	r0, fp, #0
    f5dc:	00000000 	andeq	r0, r0, r0
    f5e0:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
    f5e4:	39440000 	stmdbcc	r4, {}^	; <UNPREDICTABLE>
    f5e8:	00140000 	andseq	r0, r4, r0
    f5ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    f5f0:	0000070c 	andeq	r0, r0, ip, lsl #14
    f5f4:	0001b31f 	andeq	fp, r1, pc, lsl r3
    f5f8:	00423e00 	subeq	r3, r2, r0, lsl #28
    f5fc:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    f600:	425f0000 	subsmi	r0, pc, #0
    f604:	46150000 	ldrmi	r0, [r5], -r0
    f608:	0a000039 	beq	f6f4 <__exidx_end+0xa7c4>
    f60c:	1f000000 	svcne	0x00000000
    f610:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    f614:	0000427e 	andeq	r4, r0, lr, ror r2
    f618:	00394615 	eorseq	r4, r9, r5, lsl r6
    f61c:	00000a00 	andeq	r0, r0, r0, lsl #20
    f620:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    f624:	429f0000 	addsmi	r0, pc, #0
    f628:	00000000 	andeq	r0, r0, r0
    f62c:	01cc1e00 	biceq	r1, ip, r0, lsl #28
    f630:	39580000 	ldmdbcc	r8, {}^	; <UNPREDICTABLE>
    f634:	00140000 	andseq	r0, r4, r0
    f638:	9c010000 	stcls	0, cr0, [r1], {-0}
    f63c:	00000758 	andeq	r0, r0, r8, asr r7
    f640:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    f644:	0042b200 	subeq	fp, r2, r0, lsl #4
    f648:	01e81600 	mvneq	r1, r0, lsl #12
    f64c:	42d30000 	sbcsmi	r0, r3, #0
    f650:	5a150000 	bpl	54f658 <__ccfg+0x52f6b0>
    f654:	0a000039 	beq	f740 <__exidx_end+0xa810>
    f658:	1f000000 	svcne	0x00000000
    f65c:	000001dc 	ldrdeq	r0, [r0], -ip
    f660:	000042f2 	strdeq	r4, [r0], -r2
    f664:	00395a15 	eorseq	r5, r9, r5, lsl sl
    f668:	00000a00 	andeq	r0, r0, r0, lsl #20
    f66c:	01e81600 	mvneq	r1, r0, lsl #12
    f670:	43130000 	tstmi	r3, #0
    f674:	00000000 	andeq	r0, r0, r0
    f678:	2fcf1700 	svccs	0x00cf1700
    f67c:	73020000 	movwvc	r0, #8192	; 0x2000
    f680:	0000396c 	andeq	r3, r0, ip, ror #18
    f684:	00000110 	andeq	r0, r0, r0, lsl r1
    f688:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
    f68c:	7a1c0000 	bvc	70f694 <__ccfg+0x6ef6ec>
    f690:	01000030 	tsteq	r0, r0, lsr r0
    f694:	008c0127 	addeq	r0, ip, r7, lsr #2
    f698:	43260000 			; <UNDEFINED> instruction: 0x43260000
    f69c:	e61c0000 	ldr	r0, [ip], -r0
    f6a0:	01000030 	tsteq	r0, r0, lsr r0
    f6a4:	008c0127 	addeq	r0, ip, r7, lsr #2
    f6a8:	43520000 	cmpmi	r2, #0
    f6ac:	391d0000 	ldmdbcc	sp, {}	; <UNPREDICTABLE>
    f6b0:	01000034 	tsteq	r0, r4, lsr r0
    f6b4:	008c0129 	addeq	r0, ip, r9, lsr #2
    f6b8:	43730000 	cmnmi	r3, #0
    f6bc:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
    f6c0:	9c000001 	stcls	0, cr0, [r0], {1}
    f6c4:	d8000039 	stmdale	r0, {r0, r3, r4, r5}
    f6c8:	01000010 	tsteq	r0, r0, lsl r0
    f6cc:	07c10140 	strbeq	r0, [r1, r0, asr #2]
    f6d0:	d8120000 	ldmdale	r2, {}	; <UNPREDICTABLE>
    f6d4:	16000010 			; <UNDEFINED> instruction: 0x16000010
    f6d8:	00000205 	andeq	r0, r0, r5, lsl #4
    f6dc:	00004441 	andeq	r4, r0, r1, asr #8
    f6e0:	76220000 	strtvc	r0, [r2], -r0
    f6e4:	43000039 	movwmi	r0, #57	; 0x39
    f6e8:	d6000003 	strle	r0, [r0], -r3
    f6ec:	1a000007 	bne	f710 <__exidx_end+0xa7e0>
    f6f0:	f3035001 	vhadd.u8	d5, d3, d1
    f6f4:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    f6f8:	00003982 	andeq	r3, r0, r2, lsl #19
    f6fc:	00000ad6 	ldrdeq	r0, [r0], -r6
    f700:	000007ef 	andeq	r0, r0, pc, ror #15
    f704:	0151011a 	cmpeq	r1, sl, lsl r1
    f708:	50011a48 	andpl	r1, r1, r8, asr #20
    f70c:	00007402 	andeq	r7, r0, r2, lsl #8
    f710:	00398623 	eorseq	r8, r9, r3, lsr #12
    f714:	0003bd00 	andeq	fp, r3, r0, lsl #26
    f718:	399c2400 	ldmibcc	ip, {sl, sp}
    f71c:	76020000 	strvc	r0, [r2], -r0
    f720:	00081d00 	andeq	r1, r8, r0, lsl #26
    f724:	53011a00 	movwpl	r1, #6656	; 0x1a00
    f728:	011a3001 	tsteq	sl, r1
    f72c:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
    f730:	51011a03 	tstpl	r1, r3, lsl #20
    f734:	1a2c0802 	bne	b11744 <__ccfg+0xaf179c>
    f738:	74025001 	strvc	r5, [r2], #-1
    f73c:	ac220000 	stcge	0, cr0, [r2], #-0
    f740:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    f744:	3600000a 	strcc	r0, [r0], -sl
    f748:	1a000008 	bne	f770 <__exidx_end+0xa840>
    f74c:	4c015101 	stfmis	f5, [r1], {1}
    f750:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f754:	23000074 	movwcs	r0, #116	; 0x74
    f758:	000039b0 			; <UNDEFINED> instruction: 0x000039b0
    f75c:	00000404 	andeq	r0, r0, r4, lsl #8
    f760:	0039ba22 	eorseq	fp, r9, r2, lsr #20
    f764:	000ad600 	andeq	sp, sl, r0, lsl #12
    f768:	00085800 	andeq	r5, r8, r0, lsl #16
    f76c:	51011a00 	tstpl	r1, r0, lsl #20
    f770:	011a4401 	tsteq	sl, r1, lsl #8
    f774:	00740250 	rsbseq	r0, r4, r0, asr r2
    f778:	39be2300 	ldmibcc	lr!, {r8, r9, sp}
    f77c:	043e0000 	ldrteq	r0, [lr], #-0
    f780:	c8220000 	stmdagt	r2!, {}	; <UNPREDICTABLE>
    f784:	d6000039 			; <UNDEFINED> instruction: 0xd6000039
    f788:	7a00000a 	bvc	f7b8 <__exidx_end+0xa888>
    f78c:	1a000008 	bne	f7b4 <__exidx_end+0xa884>
    f790:	40015101 	andmi	r5, r1, r1, lsl #2
    f794:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f798:	22000074 	andcs	r0, r0, #116	; 0x74
    f79c:	000039ce 	andeq	r3, r0, lr, asr #19
    f7a0:	00000478 	andeq	r0, r0, r8, ror r4
    f7a4:	0000088e 	andeq	r0, r0, lr, lsl #17
    f7a8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f7ac:	22000075 	andcs	r0, r0, #117	; 0x75
    f7b0:	000039d8 	ldrdeq	r3, [r0], -r8
    f7b4:	00000ad6 	ldrdeq	r0, [r0], -r6
    f7b8:	000008a7 	andeq	r0, r0, r7, lsr #17
    f7bc:	0151011a 	cmpeq	r1, sl, lsl r1
    f7c0:	50011a3c 	andpl	r1, r1, ip, lsr sl
    f7c4:	00007402 	andeq	r7, r0, r2, lsl #8
    f7c8:	0039de22 	eorseq	sp, r9, r2, lsr #28
    f7cc:	0000e700 	andeq	lr, r0, r0, lsl #14
    f7d0:	0008bb00 	andeq	fp, r8, r0, lsl #22
    f7d4:	50011a00 	andpl	r1, r1, r0, lsl #20
    f7d8:	00007502 	andeq	r7, r0, r2, lsl #10
    f7dc:	0039f022 	eorseq	pc, r9, r2, lsr #32
    f7e0:	00011000 	andeq	r1, r1, r0
    f7e4:	0008cf00 	andeq	ip, r8, r0, lsl #30
    f7e8:	50011a00 	andpl	r1, r1, r0, lsl #20
    f7ec:	00007502 	andeq	r7, r0, r2, lsl #10
    f7f0:	0039fe22 	eorseq	pc, r9, r2, lsr #28
    f7f4:	00013900 	andeq	r3, r1, r0, lsl #18
    f7f8:	0008e300 	andeq	lr, r8, r0, lsl #6
    f7fc:	50011a00 	andpl	r1, r1, r0, lsl #20
    f800:	00007502 	andeq	r7, r0, r2, lsl #10
    f804:	003a0822 	eorseq	r0, sl, r2, lsr #16
    f808:	000ad600 	andeq	sp, sl, r0, lsl #12
    f80c:	0008fd00 	andeq	pc, r8, r0, lsl #26
    f810:	51011a00 	tstpl	r1, r0, lsl #20
    f814:	1a280802 	bne	a11824 <__ccfg+0x9f187c>
    f818:	74025001 	strvc	r5, [r2], #-1
    f81c:	0e220000 	cdpeq	0, 2, cr0, cr2, cr0, {0}
    f820:	be00003a 	mcrlt	0, 0, r0, cr0, cr10, {1}
    f824:	11000000 	mrsne	r0, (UNDEF: 0)
    f828:	1a000009 	bne	f854 <__exidx_end+0xa924>
    f82c:	75025001 	strvc	r5, [r2, #-1]
    f830:	20220000 	eorcs	r0, r2, r0
    f834:	a300003a 	movwge	r0, #58	; 0x3a
    f838:	25000001 	strcs	r0, [r0, #-1]
    f83c:	1a000009 	bne	f868 <__exidx_end+0xa938>
    f840:	75025001 	strvc	r5, [r2, #-1]
    f844:	32220000 	eorcc	r0, r2, #0
    f848:	cc00003a 	stcgt	0, cr0, [r0], {58}	; 0x3a
    f84c:	39000001 	stmdbcc	r0, {r0}
    f850:	1a000009 	bne	f87c <__exidx_end+0xa94c>
    f854:	75025001 	strvc	r5, [r2, #-1]
    f858:	46220000 	strtmi	r0, [r2], -r0
    f85c:	6e00003a 	mcrvs	0, 0, r0, cr0, cr10, {1}
    f860:	4d000001 	stcmi	0, cr0, [r0, #-4]
    f864:	1a000009 	bne	f890 <__exidx_end+0xa960>
    f868:	75025001 	strvc	r5, [r2, #-1]
    f86c:	50190000 	andspl	r0, r9, r0
    f870:	d600003a 			; <UNDEFINED> instruction: 0xd600003a
    f874:	1a00000a 	bne	f8a4 <__exidx_end+0xa974>
    f878:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    f87c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    f880:	00000074 	andeq	r0, r0, r4, ror r0
    f884:	00304c17 	eorseq	r4, r0, r7, lsl ip
    f888:	7cfd0200 	lfmvc	f0, 2, [sp]
    f88c:	6400003a 	strvs	r0, [r0], #-58	; 0xffffffc6
    f890:	01000000 	mrseq	r0, (UNDEF: 0)
    f894:	0009899c 	muleq	r9, ip, r9
    f898:	32031d00 	andcc	r1, r3, #0, 26
    f89c:	eb010000 	bl	4f8a4 <__ccfg+0x2f8fc>
    f8a0:	00008c03 	andeq	r8, r0, r3, lsl #24
    f8a4:	00445a00 	subeq	r5, r4, r0, lsl #20
    f8a8:	790c0000 	stmdbvc	ip, {}	; <UNPREDICTABLE>
    f8ac:	02000035 	andeq	r0, r0, #53	; 0x35
    f8b0:	3ae00106 	bcc	ff80fcd0 <_estack+0xdf80acd0>
    f8b4:	00280000 	eoreq	r0, r8, r0
    f8b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    f8bc:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    f8c0:	0033d01c 	eorseq	sp, r3, ip, lsl r0
    f8c4:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
    f8c8:	0000008c 	andeq	r0, r0, ip, lsl #1
    f8cc:	00004475 	andeq	r4, r0, r5, ror r4
    f8d0:	2fff1700 	svccs	0x00ff1700
    f8d4:	7a020000 	bvc	8f8dc <__ccfg+0x6f934>
    f8d8:	00003b08 	andeq	r3, r0, r8, lsl #22
    f8dc:	00000150 	andeq	r0, r0, r0, asr r1
    f8e0:	0ad69c01 	beq	ff5b68ec <_estack+0xdf5b18ec>
    f8e4:	e61c0000 	ldr	r0, [ip], -r0
    f8e8:	01000030 	tsteq	r0, r0, lsr r0
    f8ec:	008c019b 	umulleq	r0, ip, fp, r1
    f8f0:	44960000 	ldrmi	r0, [r6], #0
    f8f4:	171d0000 	ldrne	r0, [sp, -r0]
    f8f8:	01000035 	tsteq	r0, r5, lsr r0
    f8fc:	008c019d 	umulleq	r0, ip, sp, r1
    f900:	44f10000 	ldrbtmi	r0, [r1], #0
    f904:	391d0000 	ldmdbcc	sp, {}	; <UNPREDICTABLE>
    f908:	01000034 	tsteq	r0, r4, lsr r0
    f90c:	008c019e 	umulleq	r0, ip, lr, r1
    f910:	45040000 	strmi	r0, [r4, #-0]
    f914:	831d0000 	tsthi	sp, #0
    f918:	01000031 	tsteq	r0, r1, lsr r0
    f91c:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
    f920:	45170000 	ldrmi	r0, [r7, #-0]
    f924:	761d0000 	ldrvc	r0, [sp], -r0
    f928:	01000031 	tsteq	r0, r1, lsr r0
    f92c:	008c01a0 	addeq	r0, ip, r0, lsr #3
    f930:	45350000 	ldrmi	r0, [r5, #-0]!
    f934:	12250000 	eorne	r0, r5, #0
    f938:	1a000002 	bne	f948 <__exidx_end+0xaa18>
    f93c:	3e00003c 	mcrcc	0, 0, r0, cr0, cr12, {1}
    f940:	01000000 	mrseq	r0, (UNDEF: 0)
    f944:	92230216 	eorls	r0, r3, #1610612737	; 0x60000001
    f948:	3c00003b 	stccc	0, cr0, [r0], {59}	; 0x3b
    f94c:	22000006 	andcs	r0, r0, #6
    f950:	00003bb4 			; <UNDEFINED> instruction: 0x00003bb4
    f954:	00000af2 	strdeq	r0, [r0], -r2
    f958:	00000a46 	andeq	r0, r0, r6, asr #20
    f95c:	0151011a 	cmpeq	r1, sl, lsl r1
    f960:	50011a31 	andpl	r1, r1, r1, lsr sl
    f964:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    f968:	00003bba 			; <UNDEFINED> instruction: 0x00003bba
    f96c:	00000989 	andeq	r0, r0, r9, lsl #19
    f970:	00000a5d 	andeq	r0, r0, sp, asr sl
    f974:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    f978:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
    f97c:	c0230000 	eorgt	r0, r3, r0
    f980:	0800003b 	stmdaeq	r0, {r0, r1, r3, r4, r5}
    f984:	2200000b 	andcs	r0, r0, #11
    f988:	00003bca 	andeq	r3, r0, sl, asr #23
    f98c:	00000af2 	strdeq	r0, [r0], -r2
    f990:	00000a7f 	andeq	r0, r0, pc, ror sl
    f994:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    f998:	011a0074 	tsteq	sl, r4, ror r0
    f99c:	00340150 	eorseq	r0, r4, r0, asr r1
    f9a0:	003bd022 	eorseq	sp, fp, r2, lsr #32
    f9a4:	000b0800 	andeq	r0, fp, r0, lsl #16
    f9a8:	000a9200 	andeq	r9, sl, r0, lsl #4
    f9ac:	50011a00 	andpl	r1, r1, r0, lsl #20
    f9b0:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    f9b4:	00003be0 	andeq	r3, r0, r0, ror #23
    f9b8:	00000989 	andeq	r0, r0, r9, lsl #19
    f9bc:	00000aac 	andeq	r0, r0, ip, lsr #21
    f9c0:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
    f9c4:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
    f9c8:	1a00ffff 	bne	4f9cc <__ccfg+0x2fa24>
    f9cc:	3bf02600 	blcc	ffc191d4 <_estack+0xdfc141d4>
    f9d0:	0acc0000 	beq	ff30f9d8 <_estack+0xdf30a9d8>
    f9d4:	011a0000 	tsteq	sl, r0
    f9d8:	000c0552 	andeq	r0, ip, r2, asr r5
    f9dc:	1a600060 	bne	180fb64 <__ccfg+0x17efbbc>
    f9e0:	37015101 	strcc	r5, [r1, -r1, lsl #2]
    f9e4:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
    f9e8:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
    f9ec:	3c062300 	stccc	3, cr2, [r6], {-0}
    f9f0:	0af20000 	beq	ffc8f9f8 <_estack+0xdfc8a9f8>
    f9f4:	27000000 	strcs	r0, [r0, -r0]
    f9f8:	00003349 	andeq	r3, r0, r9, asr #6
    f9fc:	f201ca06 	vpmax.s8	d12, d1, d6
    fa00:	2800000a 	stmdacs	r0, {r1, r3}
    fa04:	0000008c 	andeq	r0, r0, ip, lsl #1
    fa08:	00008c28 	andeq	r8, r0, r8, lsr #24
    fa0c:	008c2800 	addeq	r2, ip, r0, lsl #16
    fa10:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    fa14:	000027e3 	andeq	r2, r0, r3, ror #15
    fa18:	0b08f907 	bleq	24de3c <__ccfg+0x22de94>
    fa1c:	8c280000 	stchi	0, cr0, [r8], #-0
    fa20:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    fa24:	0000008c 	andeq	r0, r0, ip, lsl #1
    fa28:	281c2a00 	ldmdacs	ip, {r9, fp, sp}
    fa2c:	10070000 	andne	r0, r7, r0
    fa30:	00008c01 	andeq	r8, r0, r1, lsl #24
    fa34:	008c2800 	addeq	r2, ip, r0, lsl #16
    fa38:	00000000 	andeq	r0, r0, r0
    fa3c:	00000923 	andeq	r0, r0, r3, lsr #18
    fa40:	39a00004 	stmibcc	r0!, {r2}
    fa44:	01040000 	mrseq	r0, (UNDEF: 4)
    fa48:	00002505 	andeq	r2, r0, r5, lsl #10
    fa4c:	0036c001 	eorseq	ip, r6, r1
    fa50:	0025cc00 	eoreq	ip, r5, r0, lsl #24
    fa54:	0011c800 	andseq	ip, r1, r0, lsl #16
    fa58:	00000000 	andeq	r0, r0, r0
    fa5c:	007c8b00 	rsbseq	r8, ip, r0, lsl #22
    fa60:	266f0200 	strbtcs	r0, [pc], -r0, lsl #4
    fa64:	1b060000 	blne	18fa6c <__ccfg+0x16fac4>
    fa68:	00000030 	andeq	r0, r0, r0, lsr r0
    fa6c:	de060103 	adfles	f0, f6, f3
    fa70:	02000008 	andeq	r0, r0, #8
    fa74:	00000833 	andeq	r0, r0, r3, lsr r8
    fa78:	00421d06 	subeq	r1, r2, r6, lsl #26
    fa7c:	01030000 	mrseq	r0, (UNDEF: 3)
    fa80:	0008dc08 	andeq	sp, r8, r8, lsl #24
    fa84:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    fa88:	000007a3 	andeq	r0, r0, r3, lsr #15
    fa8c:	0003d002 	andeq	sp, r3, r2
    fa90:	5b2b0600 	blpl	ad1298 <__ccfg+0xab12f0>
    fa94:	03000000 	movweq	r0, #0
    fa98:	09aa0702 	stmibeq	sl!, {r1, r8, r9, sl}
    fa9c:	65020000 	strvs	r0, [r2, #-0]
    faa0:	06000026 	streq	r0, [r0], -r6, lsr #32
    faa4:	00006d3f 	andeq	r6, r0, pc, lsr sp
    faa8:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    faac:	000005ed 	andeq	r0, r0, sp, ror #11
    fab0:	0008f302 	andeq	pc, r8, r2, lsl #6
    fab4:	7f410600 	svcvc	0x00410600
    fab8:	03000000 	movweq	r0, #0
    fabc:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
    fac0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    fac4:	0005e805 	andeq	lr, r5, r5, lsl #16
    fac8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    facc:	00000392 	muleq	r0, r2, r3
    fad0:	69050404 	stmdbvs	r5, {r2, sl}
    fad4:	0300746e 	movweq	r7, #1134	; 0x46e
    fad8:	039c0704 	orrseq	r0, ip, #4, 14	; 0x100000
    fadc:	71020000 	mrsvc	r0, (UNDEF: 2)
    fae0:	07000026 	streq	r0, [r0, -r6, lsr #32]
    fae4:	00002513 	andeq	r2, r0, r3, lsl r5
    fae8:	08350200 	ldmdaeq	r5!, {r9}
    faec:	14070000 	strne	r0, [r7], #-0
    faf0:	00000037 	andeq	r0, r0, r7, lsr r0
    faf4:	0003d202 	andeq	sp, r3, r2, lsl #4
    faf8:	501a0700 	andspl	r0, sl, r0, lsl #14
    fafc:	02000000 	andeq	r0, r0, #0
    fb00:	00002667 	andeq	r2, r0, r7, ror #12
    fb04:	00621f07 	rsbeq	r1, r2, r7, lsl #30
    fb08:	f5020000 			; <UNDEFINED> instruction: 0xf5020000
    fb0c:	07000008 	streq	r0, [r0, -r8]
    fb10:	00007420 	andeq	r7, r0, r0, lsr #8
    fb14:	24ae0200 	strtcs	r0, [lr], #512	; 0x200
    fb18:	33080000 	movwcc	r0, #32768	; 0x8000
    fb1c:	000000e4 	andeq	r0, r0, r4, ror #1
    fb20:	00ea0405 	rsceq	r0, sl, r5, lsl #8
    fb24:	05060000 	streq	r0, [r6, #-0]
    fb28:	0000f104 	andeq	pc, r0, r4, lsl #2
    fb2c:	00fc0700 	rscseq	r0, ip, r0, lsl #14
    fb30:	ad080000 	stcge	0, cr0, [r8, #-0]
    fb34:	00000000 	andeq	r0, r0, r0
    fb38:	002bcf02 	eoreq	ip, fp, r2, lsl #30
    fb3c:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
    fb40:	05000001 	streq	r0, [r0, #-1]
    fb44:	00010d04 	andeq	r0, r1, r4, lsl #26
    fb48:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    fb4c:	01260000 			; <UNDEFINED> instruction: 0x01260000
    fb50:	26080000 	strcs	r0, [r8], -r0
    fb54:	08000001 	stmdaeq	r0, {r0}
    fb58:	000000ce 	andeq	r0, r0, lr, asr #1
    fb5c:	0000ce08 	andeq	ip, r0, r8, lsl #28
    fb60:	04050000 	streq	r0, [r5], #-0
    fb64:	000000ad 	andeq	r0, r0, sp, lsr #1
    fb68:	002d3702 	eoreq	r3, sp, r2, lsl #14
    fb6c:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
    fb70:	05000001 	streq	r0, [r0, #-1]
    fb74:	00013d04 	andeq	r3, r1, r4, lsl #26
    fb78:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
    fb7c:	80020000 	andhi	r0, r2, r0
    fb80:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    fb84:	00013748 	andeq	r3, r1, r8, asr #14
    fb88:	2a670200 	bcs	19d0390 <__ccfg+0x19b03e8>
    fb8c:	4a090000 	bmi	24fb94 <__ccfg+0x22fbec>
    fb90:	00000158 	andeq	r0, r0, r8, asr r1
    fb94:	015e0405 	cmpeq	lr, r5, lsl #8
    fb98:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    fb9c:	6d000000 	stcvs	0, cr0, [r0, #-0]
    fba0:	08000001 	stmdaeq	r0, {r0}
    fba4:	000000ce 	andeq	r0, r0, lr, asr #1
    fba8:	29760200 	ldmdbcs	r6!, {r9}^
    fbac:	4c090000 	stcmi	0, cr0, [r9], {-0}
    fbb0:	00000137 	andeq	r0, r0, r7, lsr r1
    fbb4:	0028d602 	eoreq	sp, r8, r2, lsl #12
    fbb8:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
    fbbc:	02000001 	andeq	r0, r0, #1
    fbc0:	00002966 	andeq	r2, r0, r6, ror #18
    fbc4:	00e45109 	rsceq	r5, r4, r9, lsl #2
    fbc8:	fb020000 	blx	8fbd2 <__ccfg+0x6fc2a>
    fbcc:	09000027 	stmdbeq	r0, {r0, r1, r2, r5}
    fbd0:	00019953 	andeq	r9, r1, r3, asr r9
    fbd4:	9f040500 	svcls	0x00040500
    fbd8:	09000001 	stmdbeq	r0, {r0}
    fbdc:	000000ce 	andeq	r0, r0, lr, asr #1
    fbe0:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    fbe4:	0001b808 	andeq	fp, r1, r8, lsl #16
    fbe8:	00b80800 	adcseq	r0, r8, r0, lsl #16
    fbec:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    fbf0:	00000000 	andeq	r0, r0, r0
    fbf4:	00b80405 	adcseq	r0, r8, r5, lsl #8
    fbf8:	e5020000 	str	r0, [r2, #-0]
    fbfc:	0900002b 	stmdbeq	r0, {r0, r1, r3, r5}
    fc00:	0001c957 	andeq	ip, r1, r7, asr r9
    fc04:	cf040500 	svcgt	0x00040500
    fc08:	09000001 	stmdbeq	r0, {r0}
    fc0c:	000000ce 	andeq	r0, r0, lr, asr #1
    fc10:	000001e3 	andeq	r0, r0, r3, ror #3
    fc14:	0001e308 	andeq	lr, r1, r8, lsl #6
    fc18:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    fc1c:	05000000 	streq	r0, [r0, #-0]
    fc20:	0000ce04 	andeq	ip, r0, r4, lsl #28
    fc24:	29d90200 	ldmibcs	r9, {r9}^
    fc28:	5a090000 	bpl	24fc30 <__ccfg+0x22fc88>
    fc2c:	000001c9 	andeq	r0, r0, r9, asr #3
    fc30:	002a9302 	eoreq	r9, sl, r2, lsl #6
    fc34:	c95d0900 	ldmdbgt	sp, {r8, fp}^
    fc38:	02000001 	andeq	r0, r0, #1
    fc3c:	0000280d 	andeq	r2, r0, sp, lsl #16
    fc40:	01c96009 	biceq	r6, r9, r9
    fc44:	f3020000 	vhadd.u8	d0, d2, d0
    fc48:	0900002b 	stmdbeq	r0, {r0, r1, r3, r5}
    fc4c:	0000e463 	andeq	lr, r0, r3, ror #8
    fc50:	284b0200 	stmdacs	fp, {r9}^
    fc54:	65090000 	strvs	r0, [r9, #-0]
    fc58:	00000220 	andeq	r0, r0, r0, lsr #4
    fc5c:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
    fc60:	31070000 	mrscc	r0, (UNDEF: 7)
    fc64:	08000002 	stmdaeq	r0, {r1}
    fc68:	000000ce 	andeq	r0, r0, lr, asr #1
    fc6c:	2d910200 	lfmcs	f0, 4, [r1]
    fc70:	67090000 	strvs	r0, [r9, -r0]
    fc74:	00000220 	andeq	r0, r0, r0, lsr #4
    fc78:	002ad502 	eoreq	sp, sl, r2, lsl #10
    fc7c:	eb690900 	bl	1a52084 <__ccfg+0x1a320dc>
    fc80:	02000000 	andeq	r0, r0, #0
    fc84:	00002d70 	andeq	r2, r0, r0, ror sp
    fc88:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
    fc8c:	a2020000 	andge	r0, r2, #0
    fc90:	0900002a 	stmdbeq	r0, {r1, r3, r5}
    fc94:	0000eb6d 	andeq	lr, r0, sp, ror #22
    fc98:	2ab40200 	bcs	fed104a0 <_estack+0xded0b4a0>
    fc9c:	6f090000 	svcvs	0x00090000
    fca0:	000000eb 	andeq	r0, r0, fp, ror #1
    fca4:	7a094c0b 	bvc	262cd8 <__ccfg+0x242d30>
    fca8:	00000355 	andeq	r0, r0, r5, asr r3
    fcac:	002a780c 	eoreq	r7, sl, ip, lsl #16
    fcb0:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
    fcb4:	00000000 	andeq	r0, r0, r0
    fcb8:	002d630c 	eoreq	r6, sp, ip, lsl #6
    fcbc:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
    fcc0:	04000001 	streq	r0, [r0], #-1
    fcc4:	002a890c 	eoreq	r8, sl, ip, lsl #18
    fcc8:	427e0900 	rsbsmi	r0, lr, #0, 18
    fccc:	08000001 	stmdaeq	r0, {r0}
    fcd0:	002c820c 	eoreq	r8, ip, ip, lsl #4
    fcd4:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
    fcd8:	0c000001 	stceq	0, cr0, [r0], {1}
    fcdc:	002c940c 	eoreq	r9, ip, ip, lsl #8
    fce0:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
    fce4:	10000001 	andne	r0, r0, r1
    fce8:	0029870c 	eoreq	r8, r9, ip, lsl #14
    fcec:	78810900 	stmvc	r1, {r8, fp}
    fcf0:	14000001 	strne	r0, [r0], #-1
    fcf4:	0029430c 	eoreq	r4, r9, ip, lsl #6
    fcf8:	83820900 	orrhi	r0, r2, #0, 18
    fcfc:	18000001 	stmdane	r0, {r0}
    fd00:	002a7e0c 	eoreq	r7, sl, ip, lsl #28
    fd04:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
    fd08:	1c000001 	stcne	0, cr0, [r0], {1}
    fd0c:	002c0d0c 	eoreq	r0, ip, ip, lsl #26
    fd10:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
    fd14:	20000001 	andcs	r0, r0, r1
    fd18:	002a050c 	eoreq	r0, sl, ip, lsl #10
    fd1c:	e9850900 	stmib	r5, {r8, fp}
    fd20:	24000001 	strcs	r0, [r0], #-1
    fd24:	002a5d0c 	eoreq	r5, sl, ip, lsl #26
    fd28:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
    fd2c:	28000001 	stmdacs	r0, {r0}
    fd30:	002cc20c 	eoreq	ip, ip, ip, lsl #4
    fd34:	ff870900 			; <UNDEFINED> instruction: 0xff870900
    fd38:	2c000001 	stccs	0, cr0, [r0], {1}
    fd3c:	0029a20c 	eoreq	sl, r9, ip, lsl #4
    fd40:	15880900 	strne	r0, [r8, #2304]	; 0x900
    fd44:	30000002 	andcc	r0, r0, r2
    fd48:	002cb00c 	eoreq	fp, ip, ip
    fd4c:	31890900 	orrcc	r0, r9, r0, lsl #18
    fd50:	34000002 	strcc	r0, [r0], #-2
    fd54:	00288c0c 	eoreq	r8, r8, ip, lsl #24
    fd58:	0a8a0900 	beq	fe292160 <_estack+0xde28d160>
    fd5c:	38000002 	stmdacc	r0, {r1}
    fd60:	002ac40c 	eoreq	ip, sl, ip, lsl #8
    fd64:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
    fd68:	3c000002 	stccc	0, cr0, [r0], {2}
    fd6c:	002c630c 	eoreq	r6, ip, ip, lsl #6
    fd70:	478c0900 	strmi	r0, [ip, r0, lsl #18]
    fd74:	40000002 	andmi	r0, r0, r2
    fd78:	0029e70c 	eoreq	lr, r9, ip, lsl #14
    fd7c:	528d0900 	addpl	r0, sp, #0, 18
    fd80:	44000002 	strmi	r0, [r0], #-2
    fd84:	00283c0c 	eoreq	r3, r8, ip, lsl #24
    fd88:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
    fd8c:	48000002 	stmdami	r0, {r1}
    fd90:	2b930200 	blcs	fe4d0598 <_estack+0xde4cb598>
    fd94:	8f090000 	svchi	0x00090000
    fd98:	00000268 	andeq	r0, r0, r8, ror #4
    fd9c:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
    fda0:	00000399 	muleq	r0, r9, r3
    fda4:	0037ef0c 	eorseq	lr, r7, ip, lsl #30
    fda8:	ce4f0100 	dvfgte	f0, f7, f0
    fdac:	00000000 	andeq	r0, r0, r0
    fdb0:	0038200c 	eorseq	r2, r8, ip
    fdb4:	b8500100 	ldmdalt	r0, {r8}^
    fdb8:	04000000 	streq	r0, [r0], #-0
    fdbc:	00375a0c 	eorseq	r5, r7, ip, lsl #20
    fdc0:	ad510100 	ldfgee	f0, [r1, #-0]
    fdc4:	06000000 	streq	r0, [r0], -r0
    fdc8:	00370d0c 	eorseq	r0, r7, ip, lsl #26
    fdcc:	a2520100 	subsge	r0, r2, #0, 2
    fdd0:	07000000 	streq	r0, [r0, -r0]
    fdd4:	384c0200 	stmdacc	ip, {r9}^
    fdd8:	53010000 	movwpl	r0, #4096	; 0x1000
    fddc:	00000360 	andeq	r0, r0, r0, ror #6
    fde0:	000af70d 	andeq	pc, sl, sp, lsl #14
    fde4:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    fde8:	0003be03 	andeq	fp, r3, r3, lsl #28
    fdec:	0ab10e00 	beq	fec535f4 <_estack+0xdec4e5f4>
    fdf0:	dc020000 	stcle	0, cr0, [r2], {-0}
    fdf4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    fdf8:	0c0f0000 	stceq	0, cr0, [pc], {-0}
    fdfc:	0200000b 	andeq	r0, r0, #11
    fe00:	00ce022c 	sbceq	r0, lr, ip, lsr #4
    fe04:	10030000 	andne	r0, r3, r0
    fe08:	00000c10 	andeq	r0, r0, r0, lsl ip
    fe0c:	03022a04 	movweq	r2, #10756	; 0x2a04
    fe10:	00344211 	eorseq	r4, r4, r1, lsl r2
    fe14:	c3e90500 	mvngt	r0, #0, 10
    fe18:	03000000 	movweq	r0, #0
    fe1c:	000003fb 	strdeq	r0, [r0], -fp
    fe20:	00319212 	eorseq	r9, r1, r2, lsl r2
    fe24:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
    fe28:	13000000 	movwne	r0, #0
    fe2c:	0000349b 	muleq	r0, fp, r4
    fe30:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
    fe34:	0d000000 	stceq	0, cr0, [r0, #-0]
    fe38:	00003722 	andeq	r3, r0, r2, lsr #14
    fe3c:	03025c04 	movweq	r5, #11268	; 0x2c04
    fe40:	00000415 	andeq	r0, r0, r5, lsl r4
    fe44:	0036fc0e 	eorseq	pc, r6, lr, lsl #24
    fe48:	025c0400 	subseq	r0, ip, #0, 8
    fe4c:	000000ce 	andeq	r0, r0, lr, asr #1
    fe50:	2bbd1000 	blcs	fef53e58 <_estack+0xdef4ee58>
    fe54:	40030000 	andmi	r0, r3, r0
    fe58:	a60f0301 	strge	r0, [pc], -r1, lsl #6
    fe5c:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    fe60:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
    fe64:	03030000 	movweq	r0, #12288	; 0x3000
    fe68:	116a0201 	cmnne	sl, r1, lsl #4
    fe6c:	f6140000 			; <UNDEFINED> instruction: 0xf6140000
    fe70:	0a000037 	beq	ff54 <__exidx_end+0xb024>
    fe74:	0000009e 	muleq	r0, lr, r0
    fe78:	0000f400 	andeq	pc, r0, r0, lsl #8
    fe7c:	cd9c0100 	ldfgts	f0, [ip]
    fe80:	15000005 	strne	r0, [r0, #-5]
    fe84:	00003752 	andeq	r3, r0, r2, asr r7
    fe88:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
    fe8c:	45480000 	strbmi	r0, [r8, #-0]
    fe90:	14160000 	ldrne	r0, [r6], #-0
    fe94:	01000037 	tsteq	r0, r7, lsr r0
    fe98:	0000ce7c 	andeq	ip, r0, ip, ror lr
    fe9c:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
    fea0:	000003a4 	andeq	r0, r0, r4, lsr #7
    fea4:	00000000 	andeq	r0, r0, r0
    fea8:	00001198 	muleq	r0, r8, r1
    feac:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
    feb0:	b1180000 	tstlt	r8, r0
    feb4:	01000003 	tsteq	r0, r3
    feb8:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
    febc:	00000000 	andeq	r0, r0, r0
    fec0:	00040000 	andeq	r0, r4, r0
    fec4:	82010000 	andhi	r0, r1, #0
    fec8:	0004151a 	andeq	r1, r4, sl, lsl r5
    fecc:	00000000 	andeq	r0, r0, r0
    fed0:	00000800 	andeq	r0, r0, r0, lsl #16
    fed4:	a9a10100 	stmibge	r1!, {r8}
    fed8:	1b000004 	blne	fef0 <__exidx_end+0xafc0>
    fedc:	00000000 	andeq	r0, r0, r0
    fee0:	000008de 	ldrdeq	r0, [r0], -lr
    fee4:	03cb1900 	biceq	r1, fp, #0, 18
    fee8:	00000000 	andeq	r0, r0, r0
    feec:	00060000 	andeq	r0, r6, r0
    fef0:	b1010000 	mrslt	r0, (UNDEF: 1)
    fef4:	00041e19 	andeq	r1, r4, r9, lsl lr
    fef8:	00000000 	andeq	r0, r0, r0
    fefc:	00000400 	andeq	r0, r0, r0, lsl #8
    ff00:	1ab20100 	bne	fec90308 <_estack+0xdec8b308>
    ff04:	000003fb 	strdeq	r0, [r0], -fp
    ff08:	00000000 	andeq	r0, r0, r0
    ff0c:	0000000a 	andeq	r0, r0, sl
    ff10:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
    ff14:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    ff18:	11000004 	tstne	r0, r4
    ff1c:	03cb1900 	biceq	r1, fp, #0, 18
    ff20:	00000000 	andeq	r0, r0, r0
    ff24:	00040000 	andeq	r0, r4, r0
    ff28:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    ff2c:	00041e19 	andeq	r1, r4, r9, lsl lr
    ff30:	00000000 	andeq	r0, r0, r0
    ff34:	00000200 	andeq	r0, r0, r0, lsl #4
    ff38:	19ba0100 	ldmibne	sl!, {r8}
    ff3c:	000003cb 	andeq	r0, r0, fp, asr #7
    ff40:	00000000 	andeq	r0, r0, r0
    ff44:	00000006 	andeq	r0, r0, r6
    ff48:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
    ff4c:	00000004 	andeq	r0, r0, r4
    ff50:	02000000 	andeq	r0, r0, #0
    ff54:	01000000 	mrseq	r0, (UNDEF: 0)
    ff58:	00001cd0 	ldrdeq	r1, [r0], -r0
    ff5c:	052e0000 	streq	r0, [lr, #-0]!
    ff60:	011d0000 	tsteq	sp, r0
    ff64:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    ff68:	001c0007 	andseq	r0, ip, r7
    ff6c:	3f000000 	svccc	0x00000000
    ff70:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ff74:	0a035001 	beq	e3f80 <__ccfg+0xc3fd8>
    ff78:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
    ff7c:	00000000 	andeq	r0, r0, r0
    ff80:	000008ef 	andeq	r0, r0, pc, ror #17
    ff84:	00000557 	andeq	r0, r0, r7, asr r5
    ff88:	0151011d 	cmpeq	r1, sp, lsl r1
    ff8c:	50011d31 	andpl	r1, r1, r1, lsr sp
    ff90:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
    ff94:	00000000 	andeq	r0, r0, r0
    ff98:	000008ef 	andeq	r0, r0, pc, ror #17
    ff9c:	0000056f 	andeq	r0, r0, pc, ror #10
    ffa0:	0151011d 	cmpeq	r1, sp, lsl r1
    ffa4:	50011d33 	andpl	r1, r1, r3, lsr sp
    ffa8:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
    ffac:	00000000 	andeq	r0, r0, r0
    ffb0:	00000905 	andeq	r0, r0, r5, lsl #18
    ffb4:	00000582 	andeq	r0, r0, r2, lsl #11
    ffb8:	0150011d 	cmpeq	r0, sp, lsl r1
    ffbc:	001c0031 	andseq	r0, ip, r1, lsr r0
    ffc0:	91000000 	mrsls	r0, (UNDEF: 0)
    ffc4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    ffc8:	37015001 	strcc	r5, [r1, -r1]
    ffcc:	00001c00 	andeq	r1, r0, r0, lsl #24
    ffd0:	05a00000 	streq	r0, [r0, #0]!
    ffd4:	011d0000 	tsteq	sp, r0
    ffd8:	00370150 	eorseq	r0, r7, r0, asr r1
    ffdc:	0000001c 	andeq	r0, r0, ip, lsl r0
    ffe0:	0005b000 	andeq	fp, r5, r0
    ffe4:	50011d00 	andpl	r1, r1, r0, lsl #26
    ffe8:	00007602 	andeq	r7, r0, r2, lsl #12
    ffec:	0000001c 	andeq	r0, r0, ip, lsl r0
    fff0:	0005c000 	andeq	ip, r5, r0
    fff4:	50011d00 	andpl	r1, r1, r0, lsl #26
    fff8:	00007602 	andeq	r7, r0, r2, lsl #12
    fffc:	0000001f 	andeq	r0, r0, pc, lsl r0
   10000:	50011d00 	andpl	r1, r1, r0, lsl #26
   10004:	00007602 	andeq	r7, r0, r2, lsl #12
   10008:	36982000 	ldrcc	r2, [r8], r0
   1000c:	010a0000 	mrseq	r0, (UNDEF: 10)
   10010:	003c5801 	eorseq	r5, ip, r1, lsl #16
   10014:	00022000 	andeq	r2, r2, r0
   10018:	c89c0100 	ldmgt	ip, {r8}
   1001c:	21000007 	tstcs	r0, r7
   10020:	00003798 	muleq	r0, r8, r7
   10024:	00ceda01 	sbceq	sp, lr, r1, lsl #20
   10028:	45730000 	ldrbmi	r0, [r3, #-0]!
   1002c:	3c150000 	ldccc	0, cr0, [r5], {-0}
   10030:	01000036 	tsteq	r0, r6, lsr r0
   10034:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   10038:	00459f00 	subeq	r9, r5, r0, lsl #30
   1003c:	37b21500 	ldrcc	r1, [r2, r0, lsl #10]!
   10040:	dd010000 	stcle	0, cr0, [r1, #-0]
   10044:	000000c3 	andeq	r0, r0, r3, asr #1
   10048:	000045bd 			; <UNDEFINED> instruction: 0x000045bd
   1004c:	00377815 	eorseq	r7, r7, r5, lsl r8
   10050:	c3de0100 	bicsgt	r0, lr, #0, 2
   10054:	17000000 	strne	r0, [r0, -r0]
   10058:	15000046 	strne	r0, [r0, #-70]	; 0xffffffba
   1005c:	0000383e 	andeq	r3, r0, lr, lsr r8
   10060:	00c3df01 	sbceq	sp, r3, r1, lsl #30
   10064:	46350000 	ldrtmi	r0, [r5], -r0
   10068:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
   1006c:	01000036 	tsteq	r0, r6, lsr r0
   10070:	0000c3e0 	andeq	ip, r0, r0, ror #7
   10074:	00465300 	subeq	r5, r6, r0, lsl #6
   10078:	36442200 	strbcc	r2, [r4], -r0, lsl #4
   1007c:	e1010000 	mrs	r0, (UNDEF: 1)
   10080:	000000c3 	andeq	r0, r0, r3, asr #1
   10084:	e6155301 	ldr	r5, [r5], -r1, lsl #6
   10088:	01000030 	tsteq	r0, r0, lsr r0
   1008c:	0000cee2 	andeq	ip, r0, r2, ror #29
   10090:	00466600 	subeq	r6, r6, r0, lsl #12
   10094:	37d61500 	ldrbcc	r1, [r6, r0, lsl #10]
   10098:	e3010000 	movw	r0, #4096	; 0x1000
   1009c:	000000ce 	andeq	r0, r0, lr, asr #1
   100a0:	00004679 	andeq	r4, r0, r9, ror r6
   100a4:	00365815 	eorseq	r5, r6, r5, lsl r8
   100a8:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
   100ac:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
   100b0:	23000046 	movwcs	r0, #70	; 0x46
   100b4:	01006964 	tsteq	r0, r4, ror #18
   100b8:	0000cee5 	andeq	ip, r0, r5, ror #29
   100bc:	0046ab00 	subeq	sl, r6, r0, lsl #22
   100c0:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
   100c4:	e6010069 	str	r0, [r1], -r9, rrx
   100c8:	000000ce 	andeq	r0, r0, lr, asr #1
   100cc:	000046e1 	andeq	r4, r0, r1, ror #13
   100d0:	00697423 	rsbeq	r7, r9, r3, lsr #8
   100d4:	00cee701 	sbceq	lr, lr, r1, lsl #14
   100d8:	47170000 	ldrmi	r0, [r7, -r0]
   100dc:	63230000 			; <UNDEFINED> instruction: 0x63230000
   100e0:	e8010064 	stmda	r1, {r2, r5, r6}
   100e4:	000000ce 	andeq	r0, r0, lr, asr #1
   100e8:	00004787 	andeq	r4, r0, r7, lsl #15
   100ec:	006c6323 	rsbeq	r6, ip, r3, lsr #6
   100f0:	00cee901 	sbceq	lr, lr, r1, lsl #18
   100f4:	479a0000 	ldrmi	r0, [sl, r0]
   100f8:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
   100fc:	01000036 	tsteq	r0, r6, lsr r0
   10100:	0000ceea 	andeq	ip, r0, sl, ror #29
   10104:	0047ad00 	subeq	sl, r7, r0, lsl #26
   10108:	006b2400 	rsbeq	r2, fp, r0, lsl #8
   1010c:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
   10110:	4a130000 	bmi	4d0118 <__ccfg+0x4b0170>
   10114:	01000037 	tsteq	r0, r7, lsr r0
   10118:	0000ceec 	andeq	ip, r0, ip, ror #29
   1011c:	37381500 	ldrcc	r1, [r8, -r0, lsl #10]!
   10120:	ed010000 	stc	0, cr0, [r1, #-0]
   10124:	000000ce 	andeq	r0, r0, lr, asr #1
   10128:	000047cb 	andeq	r4, r0, fp, asr #15
   1012c:	00370815 	eorseq	r0, r7, r5, lsl r8
   10130:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
   10134:	f4000000 	vst4.8	{d0-d3}, [r0], r0
   10138:	15000047 	strne	r0, [r0, #-71]	; 0xffffffb9
   1013c:	00003733 	andeq	r3, r0, r3, lsr r7
   10140:	00ceef01 	sbceq	lr, lr, r1, lsl #30
   10144:	48130000 	ldmdami	r3, {}	; <UNPREDICTABLE>
   10148:	13150000 	tstne	r5, #0
   1014c:	01000038 	tsteq	r0, r8, lsr r0
   10150:	0007c8f0 	strdeq	ip, [r7], -r0
   10154:	00485700 	subeq	r5, r8, r0, lsl #14
   10158:	3c862500 	cfstr32cc	mvfx2, [r6], {0}
   1015c:	00120000 	andseq	r0, r2, r0
   10160:	073b0000 	ldreq	r0, [fp, -r0]!
   10164:	be260000 	cdplt	0, 2, cr0, cr6, cr0, {0}
   10168:	01000037 	tsteq	r0, r7, lsr r0
   1016c:	00c3010a 	sbceq	r0, r3, sl, lsl #2
   10170:	486f0000 	stmdami	pc!, {}^	; <UNPREDICTABLE>
   10174:	27000000 	strcs	r0, [r0, -r0]
   10178:	000003d4 	ldrdeq	r0, [r0], -r4
   1017c:	00003cac 	andeq	r3, r0, ip, lsr #25
   10180:	00000006 	andeq	r0, r0, r6
   10184:	68011101 	stmdavs	r1, {r0, r8, ip}
   10188:	28000007 	stmdacs	r0, {r0, r1, r2}
   1018c:	000003e4 	andeq	r0, r0, r4, ror #7
   10190:	003cac29 	eorseq	sl, ip, r9, lsr #24
   10194:	00000600 	andeq	r0, r0, r0, lsl #12
   10198:	03ef2a00 	mvneq	r2, #0, 20
   1019c:	48820000 	stmmi	r2, {}	; <UNPREDICTABLE>
   101a0:	00000000 	andeq	r0, r0, r0
   101a4:	0003d427 	andeq	sp, r3, r7, lsr #8
   101a8:	003cc400 	eorseq	ip, ip, r0, lsl #8
   101ac:	00000600 	andeq	r0, r0, r0, lsl #12
   101b0:	011b0100 	tsteq	fp, r0, lsl #2
   101b4:	00000795 	muleq	r0, r5, r7
   101b8:	0003e428 	andeq	lr, r3, r8, lsr #8
   101bc:	3cc42900 			; <UNDEFINED> instruction: 0x3cc42900
   101c0:	00060000 	andeq	r0, r6, r0
   101c4:	ef2a0000 	svc	0x002a0000
   101c8:	95000003 	strls	r0, [r0, #-3]
   101cc:	00000048 	andeq	r0, r0, r8, asr #32
   101d0:	03d42b00 	bicseq	r2, r4, #0, 22
   101d4:	3cce0000 	stclcc	0, cr0, [lr], {0}
   101d8:	11b00000 	movsne	r0, r0
   101dc:	1f010000 	svcne	0x00010000
   101e0:	0007be01 	andeq	fp, r7, r1, lsl #28
   101e4:	03e42800 	mvneq	r2, #0, 16
   101e8:	b02c0000 	eorlt	r0, ip, r0
   101ec:	2a000011 	bcs	10238 <__exidx_end+0xb308>
   101f0:	000003ef 	andeq	r0, r0, pc, ror #7
   101f4:	000048a8 	andeq	r4, r0, r8, lsr #17
   101f8:	781b0000 	ldmdavc	fp, {}	; <UNPREDICTABLE>
   101fc:	1b00003c 	blne	102f4 <__exidx_end+0xb3c4>
   10200:	00000009 	andeq	r0, r0, r9
   10204:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
   10208:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
   1020c:	20000000 	andcs	r0, r0, r0
   10210:	0000366e 	andeq	r3, r0, lr, ror #12
   10214:	7801170a 	stmdavc	r1, {r1, r3, r8, r9, sl, ip}
   10218:	6000003e 	andvs	r0, r0, lr, lsr r0
   1021c:	01000000 	mrseq	r0, (UNDEF: 0)
   10220:	0008339c 	muleq	r8, ip, r3
   10224:	363c2600 	ldrtcc	r2, [ip], -r0, lsl #12
   10228:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
   1022c:	0000c301 	andeq	ip, r0, r1, lsl #6
   10230:	0048bb00 	subeq	fp, r8, r0, lsl #22
   10234:	37622600 	strbcc	r2, [r2, -r0, lsl #12]!
   10238:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
   1023c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10240:	0048e600 	subeq	lr, r8, r0, lsl #12
   10244:	29fb2600 	ldmibcs	fp!, {r9, sl, sp}^
   10248:	ba010000 	blt	50250 <__ccfg+0x302a8>
   1024c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10250:	0048f900 	subeq	pc, r8, r0, lsl #18
   10254:	37382600 	ldrcc	r2, [r8, -r0, lsl #12]!
   10258:	bb010000 	bllt	50260 <__ccfg+0x302b8>
   1025c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10260:	00492000 	subeq	r2, r9, r0
   10264:	3e861b00 	vdivcc.f64	d1, d6, d0
   10268:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
   1026c:	20000000 	andcs	r0, r0, r0
   10270:	0000385f 	andeq	r3, r0, pc, asr r8
   10274:	0001290a 	andeq	r2, r1, sl, lsl #18
   10278:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   1027c:	01000000 	mrseq	r0, (UNDEF: 0)
   10280:	00088a9c 	muleq	r8, ip, sl
   10284:	378b2600 	strcc	r2, [fp, r0, lsl #12]
   10288:	e7010000 	str	r0, [r1, -r0]
   1028c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   10290:	00494900 	subeq	r4, r9, r0, lsl #18
   10294:	38312600 	ldmdacc	r1!, {r9, sl, sp}
   10298:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
   1029c:	0000ce01 	andeq	ip, r0, r1, lsl #28
   102a0:	00495c00 	subeq	r5, r9, r0, lsl #24
   102a4:	30e62600 	rsccc	r2, r6, r0, lsl #12
   102a8:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
   102ac:	0000ce01 	andeq	ip, r0, r1, lsl #28
   102b0:	00496f00 	subeq	r6, r9, r0, lsl #30
   102b4:	37df2600 	ldrbcc	r2, [pc, r0, lsl #12]
   102b8:	ea010000 	b	502c0 <__ccfg+0x30318>
   102bc:	0000ce01 	andeq	ip, r0, r1, lsl #28
   102c0:	00498200 	subeq	r8, r9, r0, lsl #4
   102c4:	e02e0000 	eor	r0, lr, r0
   102c8:	0a000036 	beq	103a8 <__exidx_end+0xb478>
   102cc:	00ce0142 	sbceq	r0, lr, r2, asr #2
   102d0:	3ed80000 	cdpcc	0, 13, cr0, cr8, cr0, {0}
   102d4:	00180000 	andseq	r0, r8, r0
   102d8:	9c010000 	stcls	0, cr0, [r1], {-0}
   102dc:	00388c22 	eorseq	r8, r8, r2, lsr #24
   102e0:	99550100 	ldmdbls	r5, {r8}^
   102e4:	05000003 	streq	r0, [r0, #-3]
   102e8:	00061c03 	andeq	r1, r6, r3, lsl #24
   102ec:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
   102f0:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
   102f4:	c1300000 	teqgt	r0, r0
   102f8:	0c000008 	stceq	0, cr0, [r0], {8}
   102fc:	07040300 	streq	r0, [r4, -r0, lsl #6]
   10300:	00002779 	andeq	r2, r0, r9, ror r7
   10304:	0037c622 	eorseq	ip, r7, r2, lsr #12
   10308:	d9610100 	stmdble	r1!, {r8}^
   1030c:	05000008 	streq	r0, [r0, #-8]
   10310:	00000003 	andeq	r0, r0, r3
   10314:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
   10318:	dd310000 	ldcle	0, cr0, [r1, #-0]
   1031c:	09000024 	stmdbeq	r0, {r2, r5}
   10320:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
   10324:	00d90800 	sbcseq	r0, r9, r0, lsl #16
   10328:	31000000 	mrscc	r0, (UNDEF: 0)
   1032c:	000027e3 	andeq	r2, r0, r3, ror #15
   10330:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
   10334:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
   10338:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1033c:	000000ce 	andeq	r0, r0, lr, asr #1
   10340:	281c3200 	ldmdacs	ip, {r9, ip, sp}
   10344:	10030000 	andne	r0, r3, r0
   10348:	0000ce01 	andeq	ip, r0, r1, lsl #28
   1034c:	00091b00 	andeq	r1, r9, r0, lsl #22
   10350:	00ce0800 	sbceq	r0, lr, r0, lsl #16
   10354:	33000000 	movwcc	r0, #0
   10358:	00002636 	andeq	r2, r0, r6, lsr r6
   1035c:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
   10360:	cc000000 	stcgt	0, cr0, [r0], {-0}
   10364:	04000003 	streq	r0, [r0], #-3
   10368:	003c5a00 	eorseq	r5, ip, r0, lsl #20
   1036c:	05010400 	streq	r0, [r1, #-1024]	; 0xfffffc00
   10370:	01000025 	tsteq	r0, r5, lsr #32
   10374:	00003b73 	andeq	r3, r0, r3, ror fp
   10378:	000025cc 	andeq	r2, r0, ip, asr #11
   1037c:	00001228 	andeq	r1, r0, r8, lsr #4
   10380:	00000000 	andeq	r0, r0, r0
   10384:	00007ff4 	strdeq	r7, [r0], -r4
   10388:	de060102 	adfles	f0, f6, f2
   1038c:	02000008 	andeq	r0, r0, #8
   10390:	08dc0801 	ldmeq	ip, {r0, fp}^
   10394:	02020000 	andeq	r0, r2, #0
   10398:	0007a305 	andeq	sl, r7, r5, lsl #6
   1039c:	07020200 	streq	r0, [r2, -r0, lsl #4]
   103a0:	000009aa 	andeq	r0, r0, sl, lsr #19
   103a4:	ed050402 	cfstrs	mvf0, [r5, #-8]
   103a8:	03000005 	movweq	r0, #5
   103ac:	000008f3 	strdeq	r0, [r0], -r3
   103b0:	00534103 	subseq	r4, r3, r3, lsl #2
   103b4:	04020000 	streq	r0, [r2], #-0
   103b8:	00039707 	andeq	r9, r3, r7, lsl #14
   103bc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
   103c0:	000005e8 	andeq	r0, r0, r8, ror #11
   103c4:	92070802 	andls	r0, r7, #131072	; 0x20000
   103c8:	04000003 	streq	r0, [r0], #-3
   103cc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   103d0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
   103d4:	00039c07 	andeq	r9, r3, r7, lsl #24
   103d8:	08f50300 	ldmeq	r5!, {r8, r9}^
   103dc:	20040000 	andcs	r0, r4, r0
   103e0:	00000048 	andeq	r0, r0, r8, asr #32
   103e4:	63020105 	movwvs	r0, #8453	; 0x2105
   103e8:	000000a2 	andeq	r0, r0, r2, lsr #1
   103ec:	003aad06 	eorseq	sl, sl, r6, lsl #26
   103f0:	ed060000 	stc	0, cr0, [r6, #-0]
   103f4:	0200003a 	andeq	r0, r0, #58	; 0x3a
   103f8:	003a5d06 	eorseq	r5, sl, r6, lsl #26
   103fc:	9d060400 	cfstrsls	mvf0, [r6, #-0]
   10400:	08000038 	stmdaeq	r0, {r3, r4, r5}
   10404:	3a490300 	bcc	125100c <__ccfg+0x1231064>
   10408:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
   1040c:	00000081 	andeq	r0, r0, r1, lsl #1
   10410:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
   10414:	000000da 	ldrdeq	r0, [r0], -sl
   10418:	003b6306 	eorseq	r6, fp, r6, lsl #6
   1041c:	b5067f00 	strlt	r7, [r6, #-3840]	; 0xfffff100
   10420:	00000038 	andeq	r0, r0, r8, lsr r0
   10424:	003c1406 	eorseq	r1, ip, r6, lsl #8
   10428:	a1060100 	mrsge	r0, (UNDEF: 22)
   1042c:	0200003a 	andeq	r0, r0, #58	; 0x3a
   10430:	003c0606 	eorseq	r0, ip, r6, lsl #12
   10434:	9a060300 	bls	19103c <__ccfg+0x171094>
   10438:	04000039 	streq	r0, [r0], #-57	; 0xffffffc7
   1043c:	3c200300 	stccc	3, cr0, [r0], #-0
   10440:	ac020000 	stcge	0, cr0, [r2], {-0}
   10444:	000000ad 	andeq	r0, r0, sp, lsr #1
   10448:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
   1044c:	00012501 	andeq	r2, r1, r1, lsl #10
   10450:	3a770600 	bcc	1dd1c58 <__ccfg+0x1db1cb0>
   10454:	067f0000 	ldrbteq	r0, [pc], -r0
   10458:	00003965 	andeq	r3, r0, r5, ror #18
   1045c:	39c10600 	stmibcc	r1, {r9, sl}^
   10460:	06010000 	streq	r0, [r1], -r0
   10464:	000039fd 	strdeq	r3, [r0], -sp
   10468:	3b480602 	blcc	1211c78 <__ccfg+0x11f1cd0>
   1046c:	06030000 	streq	r0, [r3], -r0
   10470:	000038c1 	andeq	r3, r0, r1, asr #17
   10474:	39890604 	stmibcc	r9, {r2, r9, sl}
   10478:	06050000 	streq	r0, [r5], -r0
   1047c:	00003b22 	andeq	r3, r0, r2, lsr #22
   10480:	3b350606 	blcc	d51ca0 <__ccfg+0xd31cf8>
   10484:	00070000 	andeq	r0, r7, r0
   10488:	00394d08 	eorseq	r4, r9, r8, lsl #26
   1048c:	01470200 	mrseq	r0, (UNDEF: 103)
   10490:	000000e5 	andeq	r0, r0, r5, ror #1
   10494:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
   10498:	00015f01 	andeq	r5, r1, r1, lsl #30
   1049c:	39ee0600 	stmibcc	lr!, {r9, sl}^
   104a0:	067f0000 	ldrbteq	r0, [pc], -r0
   104a4:	00003a17 	andeq	r3, r0, r7, lsl sl
   104a8:	3a930600 	bcc	fe4d1cb0 <_estack+0xde4cccb0>
   104ac:	06010000 	streq	r0, [r1], -r0
   104b0:	000038da 	ldrdeq	r3, [r0], -sl
   104b4:	3afd0602 	bcc	fff51cc4 <_estack+0xdff4ccc4>
   104b8:	06030000 	streq	r0, [r3], -r0
   104bc:	000039b0 			; <UNDEFINED> instruction: 0x000039b0
   104c0:	76080004 	strvc	r0, [r8], -r4
   104c4:	02000039 	andeq	r0, r0, #57	; 0x39
   104c8:	01310160 	teqeq	r1, r0, ror #2
   104cc:	01070000 	mrseq	r0, (UNDEF: 7)
   104d0:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
   104d4:	06000001 	streq	r0, [r0], -r1
   104d8:	00003a2d 	andeq	r3, r0, sp, lsr #20
   104dc:	3b59067f 	blcc	1651ee0 <__ccfg+0x1631f38>
   104e0:	060a0000 	streq	r0, [sl], -r0
   104e4:	00003abe 			; <UNDEFINED> instruction: 0x00003abe
   104e8:	3ae30614 	bcc	ff8d1d40 <_estack+0xdf8ccd40>
   104ec:	06150000 	ldreq	r0, [r5], -r0
   104f0:	00003a89 	andeq	r3, r0, r9, lsl #21
   104f4:	3b0f0616 	blcc	3d1d54 <__ccfg+0x3b1dac>
   104f8:	00170000 	andseq	r0, r7, r0
   104fc:	00395808 	eorseq	r5, r9, r8, lsl #16
   10500:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
   10504:	0000016b 	andeq	r0, r0, fp, ror #2
   10508:	003b9f09 	eorseq	r9, fp, r9, lsl #30
   1050c:	01070200 	mrseq	r0, (UNDEF: 39)
   10510:	00000076 	andeq	r0, r0, r6, ror r0
   10514:	38ec0a03 	stmiacc	ip!, {r0, r1, r9, fp}^
   10518:	6a020000 	bvs	90520 <__ccfg+0x70578>
   1051c:	00015f01 	andeq	r5, r1, r1, lsl #30
   10520:	01da0100 	bicseq	r0, sl, r0, lsl #2
   10524:	250b0000 	strcs	r0, [fp, #-0]
   10528:	0100003a 	tsteq	r0, sl, lsr r0
   1052c:	00015f68 	andeq	r5, r1, r8, ror #30
   10530:	38d20b00 	ldmcc	r2, {r8, r9, fp}^
   10534:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
   10538:	00000076 	andeq	r0, r0, r6, ror r0
   1053c:	3c4d0900 	mcrrcc	9, 0, r0, sp, cr0	; <UNPREDICTABLE>
   10540:	32020000 	andcc	r0, r2, #0
   10544:	00007601 	andeq	r7, r0, r1, lsl #12
   10548:	df0c0300 	svcle	0x000c0300
   1054c:	0200003b 	andeq	r0, r0, #59	; 0x3b
   10550:	0000a272 	andeq	sl, r0, r2, ror r2
   10554:	00000000 	andeq	r0, r0, r0
   10558:	00001000 	andeq	r1, r0, r0
   1055c:	0d9c0100 	ldfeqs	f0, [ip]
   10560:	00003909 	andeq	r3, r0, r9, lsl #18
   10564:	00dab602 	sbcseq	fp, sl, r2, lsl #12
   10568:	00000000 	andeq	r0, r0, r0
   1056c:	00180000 	andseq	r0, r8, r0
   10570:	9c010000 	stcls	0, cr0, [r1], {-0}
   10574:	00000225 	andeq	r0, r0, r5, lsr #4
   10578:	0039440e 	eorseq	r4, r9, lr, lsl #8
   1057c:	da520100 	ble	1490984 <__ccfg+0x14709dc>
   10580:	95000000 	strls	r0, [r0, #-0]
   10584:	00000049 	andeq	r0, r0, r9, asr #32
   10588:	0001b20f 	andeq	fp, r1, pc, lsl #4
   1058c:	003ef000 	eorseq	pc, lr, r0
   10590:	00004c00 	andeq	r4, r0, r0, lsl #24
   10594:	6e9c0100 	fmlvse	f0, f4, f0
   10598:	10000002 	andne	r0, r0, r2
   1059c:	000001c3 	andeq	r0, r0, r3, asr #3
   105a0:	000049bd 			; <UNDEFINED> instruction: 0x000049bd
   105a4:	0001ce10 	andeq	ip, r1, r0, lsl lr
   105a8:	0049dd00 	subeq	sp, r9, r0, lsl #26
   105ac:	3f001100 	svccc	0x00001100
   105b0:	000e0000 	andeq	r0, lr, r0
   105b4:	c3120000 	tstgt	r2, #0
   105b8:	12000001 	andne	r0, r0, #1
   105bc:	000001ce 	andeq	r0, r0, lr, asr #3
   105c0:	0001a513 	andeq	sl, r1, r3, lsl r5
   105c4:	003f0000 	eorseq	r0, pc, r0
   105c8:	00000400 	andeq	r0, r0, r0, lsl #8
   105cc:	00700100 	rsbseq	r0, r0, r0, lsl #2
   105d0:	3ac81400 	bcc	ff2155d8 <_estack+0xdf2105d8>
   105d4:	51020000 	mrspl	r0, (UNDEF: 2)
   105d8:	00012501 	andeq	r2, r1, r1, lsl #10
   105dc:	00000000 	andeq	r0, r0, r0
   105e0:	00003000 	andeq	r3, r0, r0
   105e4:	ca9c0100 	bgt	fe7109ec <_estack+0xde70b9ec>
   105e8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
   105ec:	00003b19 	andeq	r3, r0, r9, lsl fp
   105f0:	01258501 			; <UNDEFINED> instruction: 0x01258501
   105f4:	4a110000 	bmi	4505fc <__ccfg+0x430654>
   105f8:	930b0000 	movwls	r0, #45056	; 0xb000
   105fc:	0100003b 	tsteq	r0, fp, lsr r0
   10600:	00007686 	andeq	r7, r0, r6, lsl #13
   10604:	3a3b0e00 	bcc	ed3e0c <__ccfg+0xeb3e64>
   10608:	87010000 	strhi	r0, [r1, -r0]
   1060c:	00000076 	andeq	r0, r0, r6, ror r0
   10610:	00004a31 	andeq	r4, r0, r1, lsr sl
   10614:	0001da13 	andeq	sp, r1, r3, lsl sl
   10618:	00000000 	andeq	r0, r0, r0
   1061c:	00000400 	andeq	r0, r0, r0, lsl #8
   10620:	15860100 	strne	r0, [r6, #256]	; 0x100
   10624:	00000000 	andeq	r0, r0, r0
   10628:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
   1062c:	3bbd1600 	blcc	fef55e34 <_estack+0xdef50e34>
   10630:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
   10634:	00007601 	andeq	r7, r0, r1, lsl #12
   10638:	02e80300 	rsceq	r0, r8, #0, 6
   1063c:	a7170000 	ldrge	r0, [r7, -r0]
   10640:	02000039 	andeq	r0, r0, #57	; 0x39
   10644:	0076011b 	rsbseq	r0, r6, fp, lsl r1
   10648:	14000000 	strne	r0, [r0], #-0
   1064c:	00003927 	andeq	r3, r0, r7, lsr #18
   10650:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
   10654:	3c000001 	stccc	0, cr0, [r0], {1}
   10658:	6c00003f 	stcvs	0, cr0, [r0], {63}	; 0x3f
   1065c:	01000000 	mrseq	r0, (UNDEF: 0)
   10660:	0003659c 	muleq	r3, ip, r5
   10664:	39830e00 	stmibcc	r3, {r9, sl, fp}
   10668:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
   1066c:	00000199 	muleq	r0, r9, r1
   10670:	00004a44 	andeq	r4, r0, r4, asr #20
   10674:	003a0e0b 	eorseq	r0, sl, fp, lsl #28
   10678:	76a90100 	strtvc	r0, [r9], r0, lsl #2
   1067c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   10680:	00003bd4 	ldrdeq	r3, [r0], -r4
   10684:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
   10688:	54010000 	strpl	r0, [r1], #-0
   1068c:	0001a519 	andeq	sl, r1, r9, lsl r5
   10690:	003f3e00 	eorseq	r3, pc, r0, lsl #28
   10694:	0011f800 	andseq	pc, r1, r0, lsl #16
   10698:	1aa90100 	bne	fea50aa0 <_estack+0xdea4baa0>
   1069c:	000002ca 	andeq	r0, r0, sl, asr #5
   106a0:	00003f42 	andeq	r3, r0, r2, asr #30
   106a4:	00001210 	andeq	r1, r0, r0, lsl r2
   106a8:	035baa01 	cmpeq	fp, #4096	; 0x1000
   106ac:	101b0000 	andsne	r0, fp, r0
   106b0:	10000012 	andne	r0, r0, r2, lsl r0
   106b4:	000002db 	ldrdeq	r0, [r0], -fp
   106b8:	00004aa1 	andeq	r4, r0, r1, lsr #21
   106bc:	56150000 	ldrpl	r0, [r5], -r0
   106c0:	b200003f 	andlt	r0, r0, #63	; 0x3f
   106c4:	00000001 	andeq	r0, r0, r1
   106c8:	0039d209 	eorseq	sp, r9, r9, lsl #4
   106cc:	01830200 	orreq	r0, r3, r0, lsl #4
   106d0:	00000372 	andeq	r0, r0, r2, ror r3
   106d4:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
   106d8:	0000116a 	andeq	r1, r0, sl, ror #2
   106dc:	003c2e09 	eorseq	r2, ip, r9, lsl #28
   106e0:	01f00200 	mvnseq	r0, r0, lsl #4
   106e4:	00000372 	andeq	r0, r0, r2, ror r3
   106e8:	312f1c03 			; <UNDEFINED> instruction: 0x312f1c03
   106ec:	43020000 	movwmi	r0, #8192	; 0x2000
   106f0:	003fa802 	eorseq	sl, pc, r2, lsl #16
   106f4:	00001600 	andeq	r1, r0, r0, lsl #12
   106f8:	1d9c0100 	ldfnes	f0, [ip]
   106fc:	00000365 	andeq	r0, r0, r5, ror #6
   10700:	00003faa 	andeq	r3, r0, sl, lsr #31
   10704:	00000004 	andeq	r0, r0, r4
   10708:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
   1070c:	ae150000 	cdpge	0, 1, cr0, cr5, cr0, {0}
   10710:	b200003f 	andlt	r0, r0, #63	; 0x3f
   10714:	00000001 	andeq	r0, r0, r1
   10718:	0003791e 	andeq	r7, r3, lr, lsl r9
   1071c:	003fb200 	eorseq	fp, pc, r0, lsl #4
   10720:	00000400 	andeq	r0, r0, r0, lsl #8
   10724:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
   10728:	00003fb6 			; <UNDEFINED> instruction: 0x00003fb6
   1072c:	000002e8 	andeq	r0, r0, r8, ror #5
   10730:	a7000000 	strge	r0, [r0, -r0]
   10734:	04000005 	streq	r0, [r0], #-5
   10738:	003e2800 	eorseq	r2, lr, r0, lsl #16
   1073c:	05010400 	streq	r0, [r1, #-1024]	; 0xfffffc00
   10740:	01000025 	tsteq	r0, r5, lsr #32
   10744:	00003d25 	andeq	r3, r0, r5, lsr #26
   10748:	000025cc 	andeq	r2, r0, ip, asr #11
   1074c:	00001260 	andeq	r1, r0, r0, ror #4
   10750:	00000000 	andeq	r0, r0, r0
   10754:	00008223 	andeq	r8, r0, r3, lsr #4
   10758:	de060102 	adfles	f0, f6, f2
   1075c:	03000008 	movweq	r0, #8
   10760:	00000833 	andeq	r0, r0, r3, lsr r8
   10764:	00371d03 	eorseq	r1, r7, r3, lsl #26
   10768:	01020000 	mrseq	r0, (UNDEF: 2)
   1076c:	0008dc08 	andeq	sp, r8, r8, lsl #24
   10770:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
   10774:	000007a3 	andeq	r0, r0, r3, lsr #15
   10778:	0003d003 	andeq	sp, r3, r3
   1077c:	502b0300 	eorpl	r0, fp, r0, lsl #6
   10780:	02000000 	andeq	r0, r0, #0
   10784:	09aa0702 	stmibeq	sl!, {r1, r8, r9, sl}
   10788:	04020000 	streq	r0, [r2], #-0
   1078c:	0005ed05 	andeq	lr, r5, r5, lsl #26
   10790:	08f30300 	ldmeq	r3!, {r8, r9}^
   10794:	41030000 	mrsmi	r0, (UNDEF: 3)
   10798:	00000069 	andeq	r0, r0, r9, rrx
   1079c:	97070402 	strls	r0, [r7, -r2, lsl #8]
   107a0:	02000003 	andeq	r0, r0, #3
   107a4:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
   107a8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   107ac:	00039207 	andeq	r9, r3, r7, lsl #4
   107b0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   107b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
   107b8:	9c070402 	cfstrsls	mvf0, [r7], {2}
   107bc:	03000003 	movweq	r0, #3
   107c0:	00000835 	andeq	r0, r0, r5, lsr r8
   107c4:	002c1404 	eoreq	r1, ip, r4, lsl #8
   107c8:	d2030000 	andle	r0, r3, #0
   107cc:	04000003 	streq	r0, [r0], #-3
   107d0:	0000451a 	andeq	r4, r0, sl, lsl r5
   107d4:	08f50300 	ldmeq	r5!, {r8, r9}^
   107d8:	20040000 	andcs	r0, r4, r0
   107dc:	0000005e 	andeq	r0, r0, lr, asr r0
   107e0:	003c9e05 	eorseq	r9, ip, r5, lsl #28
   107e4:	03890100 	orreq	r0, r9, #0, 2
   107e8:	000000e6 	andeq	r0, r0, r6, ror #1
   107ec:	003c8006 	eorseq	r8, ip, r6
   107f0:	a2890100 	addge	r0, r9, #0, 2
   107f4:	06000000 	streq	r0, [r0], -r0
   107f8:	00003cf1 	strdeq	r3, [r0], -r1
   107fc:	00a28901 	adceq	r8, r2, r1, lsl #18
   10800:	4c060000 	stcmi	0, cr0, [r6], {-0}
   10804:	0100003d 	tsteq	r0, sp, lsr r0
   10808:	0000a289 	andeq	sl, r0, r9, lsl #5
   1080c:	248d0700 	strcs	r0, [sp], #1792	; 0x700
   10810:	8c010000 	stchi	0, cr0, [r1], {-0}
   10814:	000000e6 	andeq	r0, r0, r6, ror #1
   10818:	02010200 	andeq	r0, r1, #0, 4
   1081c:	0000116a 	andeq	r1, r0, sl, ror #2
   10820:	003cff08 	eorseq	pc, ip, r8, lsl #30
   10824:	a2a90100 	adcge	r0, r9, #0, 2
   10828:	03000000 	movweq	r0, #0
   1082c:	0000012a 	andeq	r0, r0, sl, lsr #2
   10830:	003c8006 	eorseq	r8, ip, r6
   10834:	a2a90100 	adcge	r0, r9, #0, 2
   10838:	06000000 	streq	r0, [r0], -r0
   1083c:	00003d4c 	andeq	r3, r0, ip, asr #26
   10840:	00a2a901 	adceq	sl, r2, r1, lsl #18
   10844:	99070000 	stmdbls	r7, {}	; <UNPREDICTABLE>
   10848:	0100003c 	tsteq	r0, ip, lsr r0
   1084c:	0000a2ab 	andeq	sl, r0, fp, lsr #5
   10850:	248d0700 	strcs	r0, [sp], #1792	; 0x700
   10854:	ad010000 	stcge	0, cr0, [r1, #-0]
   10858:	000000e6 	andeq	r0, r0, r6, ror #1
   1085c:	00ad0900 	adceq	r0, sp, r0, lsl #18
   10860:	3fc00000 	svccc	0x00c00000
   10864:	00280000 	eoreq	r0, r8, r0
   10868:	9c010000 	stcls	0, cr0, [r1], {-0}
   1086c:	00000171 	andeq	r0, r0, r1, ror r1
   10870:	0000b90a 	andeq	fp, r0, sl, lsl #18
   10874:	004ab400 	subeq	fp, sl, r0, lsl #8
   10878:	00c40a00 	sbceq	r0, r4, r0, lsl #20
   1087c:	4af90000 	bmi	ffe50884 <_estack+0xdfe4b884>
   10880:	da0b0000 	ble	2d0888 <__ccfg+0x2b08e0>
   10884:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
   10888:	0c00004b 	stceq	0, cr0, [r0], {75}	; 0x4b
   1088c:	000000cf 	andeq	r0, r0, pc, asr #1
   10890:	3fca0d04 	svccc	0x00ca0d04
   10894:	05940000 	ldreq	r0, [r4]
   10898:	e20e0000 	and	r0, lr, #0
   1089c:	9f00003f 	svcls	0x0000003f
   108a0:	00000005 	andeq	r0, r0, r5
   108a4:	0033490f 	eorseq	r4, r3, pc, lsl #18
   108a8:	01ca0100 	biceq	r0, sl, r0, lsl #2
   108ac:	00003fe8 	andeq	r3, r0, r8, ror #31
   108b0:	00000008 	andeq	r0, r0, r8
   108b4:	01d19c01 	bicseq	r9, r1, r1, lsl #24
   108b8:	f3100000 	vhadd.u16	d0, d0, d0
   108bc:	0200000c 	andeq	r0, r0, #12
   108c0:	0000a242 	andeq	sl, r0, r2, asr #4
   108c4:	004b6400 	subeq	r6, fp, r0, lsl #8
   108c8:	3c601000 	stclcc	0, cr1, [r0], #-0
   108cc:	42020000 	andmi	r0, r2, #0
   108d0:	000000a2 	andeq	r0, r0, r2, lsr #1
   108d4:	00004b85 	andeq	r4, r0, r5, lsl #23
   108d8:	003cf710 	eorseq	pc, ip, r0, lsl r7	; <UNPREDICTABLE>
   108dc:	a2430200 	subge	r0, r3, #0, 4
   108e0:	a6000000 	strge	r0, [r0], -r0
   108e4:	1100004b 	tstne	r0, fp, asr #32
   108e8:	00003ff0 	strdeq	r3, [r0], -r0
   108ec:	0000012a 	andeq	r0, r0, sl, lsr #2
   108f0:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
   108f4:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
   108f8:	f3075001 	vhadd.u8	d5, d7, d1
   108fc:	01f35001 	mvnseq	r5, r1
   10900:	00002251 	andeq	r2, r0, r1, asr r2
   10904:	003d110f 	eorseq	r1, sp, pc, lsl #2
   10908:	01df0100 	bicseq	r0, pc, r0, lsl #2
   1090c:	00000000 	andeq	r0, r0, r0
   10910:	00000022 	andeq	r0, r0, r2, lsr #32
   10914:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
   10918:	f3100000 	vhadd.u16	d0, d0, d0
   1091c:	0200000c 	andeq	r0, r0, #12
   10920:	0000a257 	andeq	sl, r0, r7, asr r2
   10924:	004bc700 	subeq	ip, fp, r0, lsl #14
   10928:	3c601000 	stclcc	0, cr1, [r0], #-0
   1092c:	57020000 	strpl	r0, [r2, -r0]
   10930:	000000a2 	andeq	r0, r0, r2, lsr #1
   10934:	00004be8 	andeq	r4, r0, r8, ror #23
   10938:	001d1310 	andseq	r1, sp, r0, lsl r3
   1093c:	a2580200 	subsge	r0, r8, #0, 4
   10940:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   10944:	1000004c 	andne	r0, r0, ip, asr #32
   10948:	00003cba 			; <UNDEFINED> instruction: 0x00003cba
   1094c:	00a25802 	adceq	r5, r2, r2, lsl #16
   10950:	4c540000 	mrami	r0, r4, acc0
   10954:	40130000 	andsmi	r0, r3, r0
   10958:	0200003d 	andeq	r0, r0, #61	; 0x3d
   1095c:	0000a25a 	andeq	sl, r0, sl, asr r2
   10960:	004c7500 	subeq	r7, ip, r0, lsl #10
   10964:	3cc51300 	stclcc	3, cr1, [r5], {0}
   10968:	5b020000 	blpl	90970 <__ccfg+0x709c8>
   1096c:	000000a2 	andeq	r0, r0, r2, lsr #1
   10970:	00004d09 	andeq	r4, r0, r9, lsl #26
   10974:	00000011 	andeq	r0, r0, r1, lsl r0
   10978:	00012a00 	andeq	r2, r1, r0, lsl #20
   1097c:	51011200 	mrspl	r1, R9_usr
   10980:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
   10984:	01f32540 	mvnseq	r2, r0, asr #10
   10988:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
   1098c:	2e302540 	cfneg32cs	mvfx2, mvfx0
   10990:	16000128 	strne	r0, [r0], -r8, lsr #2
   10994:	30244013 	eorcc	r4, r4, r3, lsl r0
   10998:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   1099c:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
   109a0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   109a4:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
   109a8:	13160001 	tstne	r6, #1
   109ac:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
   109b0:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
   109b4:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   109b8:	f3131600 	vmax.u16	d1, d3, d0
   109bc:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
   109c0:	16000128 	strne	r0, [r0], -r8, lsr #2
   109c4:	01122113 	tsteq	r2, r3, lsl r1
   109c8:	01f35150 	mvnseq	r5, r0, asr r1
   109cc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   109d0:	23225001 			; <UNDEFINED> instruction: 0x23225001
   109d4:	01f30480 	mvnseq	r0, r0, lsl #9
   109d8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   109dc:	f3225001 	vhadd.u32	d5, d2, d1
   109e0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   109e4:	01282930 			; <UNDEFINED> instruction: 0x01282930
   109e8:	23131600 	tstcs	r3, #0, 12
   109ec:	01f30484 	mvnseq	r0, r4, lsl #9
   109f0:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   109f4:	23225001 			; <UNDEFINED> instruction: 0x23225001
   109f8:	01f30480 	mvnseq	r0, r0, lsl #9
   109fc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
   10a00:	f3225001 	vhadd.u32	d5, d2, d1
   10a04:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   10a08:	01282930 			; <UNDEFINED> instruction: 0x01282930
   10a0c:	f3131600 	vmax.u16	d1, d3, d0
   10a10:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
   10a14:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
   10a18:	00131600 	andseq	r1, r3, r0, lsl #12
   10a1c:	3cd80f00 	ldclcc	15, cr0, [r8], {0}
   10a20:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
   10a24:	00000001 	andeq	r0, r0, r1
   10a28:	00002e00 	andeq	r2, r0, r0, lsl #28
   10a2c:	1f9c0100 	svcne	0x009c0100
   10a30:	10000004 	andne	r0, r0, r4
   10a34:	00000cf3 	strdeq	r0, [r0], -r3
   10a38:	00a28302 	adceq	r8, r2, r2, lsl #6
   10a3c:	4d550000 	ldclmi	0, cr0, [r5, #-0]
   10a40:	60100000 	andsvs	r0, r0, r0
   10a44:	0200003c 	andeq	r0, r0, #60	; 0x3c
   10a48:	0000a283 	andeq	sl, r0, r3, lsl #5
   10a4c:	004d7600 	subeq	r7, sp, r0, lsl #12
   10a50:	1d131000 	ldcne	0, cr1, [r3, #-0]
   10a54:	84020000 	strhi	r0, [r2], #-0
   10a58:	000000a2 	andeq	r0, r0, r2, lsr #1
   10a5c:	00004d97 	muleq	r0, r7, sp
   10a60:	003cce10 	eorseq	ip, ip, r0, lsl lr
   10a64:	a2840200 	addge	r0, r4, #0, 4
   10a68:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
   10a6c:	1000004d 	andne	r0, r0, sp, asr #32
   10a70:	00003cc5 	andeq	r3, r0, r5, asr #25
   10a74:	00978502 	addseq	r8, r7, r2, lsl #10
   10a78:	4e390000 	cdpmi	0, 3, cr0, cr9, cr0, {0}
   10a7c:	40130000 	andsmi	r0, r3, r0
   10a80:	0200003d 	andeq	r0, r0, #61	; 0x3d
   10a84:	0000a287 	andeq	sl, r0, r7, lsl #5
   10a88:	004e5900 	subeq	r5, lr, r0, lsl #18
   10a8c:	3cba1300 	ldccc	3, cr1, [sl]
   10a90:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
   10a94:	000000a2 	andeq	r0, r0, r2, lsr #1
   10a98:	00004eff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
   10a9c:	00000011 	andeq	r0, r0, r1, lsl r0
   10aa0:	00012a00 	andeq	r2, r1, r0, lsl #20
   10aa4:	51011200 	mrspl	r1, R9_usr
   10aa8:	5201f340 	andpl	pc, r1, #64, 6
   10aac:	01f32540 	mvnseq	r2, r0, asr #10
   10ab0:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
   10ab4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   10ab8:	00000f0c 	andeq	r0, r0, ip, lsl #30
   10abc:	01282b80 	smlawbeq	r8, r0, fp, r2
   10ac0:	40131600 	andsmi	r1, r3, r0, lsl #12
   10ac4:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
   10ac8:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
   10acc:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
   10ad0:	01f31c40 	mvnseq	r1, r0, asr #24
   10ad4:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
   10ad8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
   10adc:	00000f0c 	andeq	r0, r0, ip, lsl #30
   10ae0:	01282b80 	smlawbeq	r8, r0, fp, r2
   10ae4:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
   10ae8:	50011221 	andpl	r1, r1, r1, lsr #4
   10aec:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
   10af0:	01f32431 	mvnseq	r2, r1, lsr r4
   10af4:	80232250 	eorhi	r2, r3, r0, asr r2
   10af8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
   10afc:	01f32431 	mvnseq	r2, r1, lsr r4
   10b00:	01f32250 	mvnseq	r2, r0, asr r2
   10b04:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   10b08:	000f0c22 	andeq	r0, pc, r2, lsr #24
   10b0c:	282c8000 	stmdacs	ip!, {pc}
   10b10:	13160001 	tstne	r6, #1
   10b14:	f3048423 	vshl.u8	d8, d19, d4
   10b18:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   10b1c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   10b20:	f3048023 	vhadd.u8	d8, d4, d19
   10b24:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
   10b28:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
   10b2c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
   10b30:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
   10b34:	8000000f 	andhi	r0, r0, pc
   10b38:	0001282c 	andeq	r2, r1, ip, lsr #16
   10b3c:	01f31316 	mvnseq	r1, r6, lsl r3
   10b40:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
   10b44:	000f0c22 	andeq	r0, pc, r2, lsr #24
   10b48:	282b8000 	stmdacs	fp!, {pc}
   10b4c:	13160001 	tstne	r6, #1
   10b50:	86140000 	ldrhi	r0, [r4], -r0
   10b54:	0100003c 	tsteq	r0, ip, lsr r0
   10b58:	00970208 	addseq	r0, r7, r8, lsl #4
   10b5c:	00000000 	andeq	r0, r0, r0
   10b60:	00340000 	eorseq	r0, r4, r0
   10b64:	9c010000 	stcls	0, cr0, [r1], {-0}
   10b68:	000004d2 	ldrdeq	r0, [r0], -r2
   10b6c:	000cf310 	andeq	pc, ip, r0, lsl r3	; <UNPREDICTABLE>
   10b70:	a2af0200 	adcge	r0, pc, #0, 4
   10b74:	5f000000 	svcpl	0x00000000
   10b78:	1000004f 	andne	r0, r0, pc, asr #32
   10b7c:	00003c60 	andeq	r3, r0, r0, ror #24
   10b80:	00a2af02 	adceq	sl, r2, r2, lsl #30
   10b84:	4f800000 	svcmi	0x00800000
   10b88:	13100000 	tstne	r0, #0
   10b8c:	0200001d 	andeq	r0, r0, #29
   10b90:	0000a2af 	andeq	sl, r0, pc, lsr #5
   10b94:	004fa100 	subeq	sl, pc, r0, lsl #2
   10b98:	3d401300 	stclcc	3, cr1, [r0, #-0]
   10b9c:	b1020000 	mrslt	r0, (UNDEF: 2)
   10ba0:	000000a2 	andeq	r0, r0, r2, lsr #1
   10ba4:	00004fde 	ldrdeq	r4, [r0], -lr
   10ba8:	003cb113 	eorseq	fp, ip, r3, lsl r1
   10bac:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
   10bb0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   10bb4:	15000050 	strne	r0, [r0, #-80]	; 0xffffffb0
   10bb8:	000000ed 	andeq	r0, r0, sp, ror #1
   10bbc:	00000000 	andeq	r0, r0, r0
   10bc0:	0000001a 	andeq	r0, r0, sl, lsl r0
   10bc4:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
   10bc8:	02000001 	andeq	r0, r0, #1
   10bcc:	0000fd0a 	andeq	pc, r0, sl, lsl #26
   10bd0:	00503000 	subseq	r3, r0, r0
   10bd4:	00001600 	andeq	r1, r0, r0, lsl #12
   10bd8:	001a0000 	andseq	r0, sl, r0
   10bdc:	130b0000 	movwne	r0, #45056	; 0xb000
   10be0:	6a000001 	bvs	10bec <__exidx_end+0xbcbc>
   10be4:	0b000050 	bleq	10d2c <__exidx_end+0xbdfc>
   10be8:	0000011e 	andeq	r0, r0, lr, lsl r1
   10bec:	00005083 	andeq	r5, r0, r3, lsl #1
   10bf0:	0000000d 	andeq	r0, r0, sp
   10bf4:	00059400 	andeq	r9, r5, r0, lsl #8
   10bf8:	00000d00 	andeq	r0, r0, r0, lsl #26
   10bfc:	059f0000 	ldreq	r0, [pc]	; 10c04 <__exidx_end+0xbcd4>
   10c00:	00000000 	andeq	r0, r0, r0
   10c04:	3c681400 	cfstrdcc	mvd1, [r8], #-0
   10c08:	1d010000 	stcne	0, cr0, [r1, #-0]
   10c0c:	00009702 	andeq	r9, r0, r2, lsl #14
   10c10:	00000000 	andeq	r0, r0, r0
   10c14:	00004000 	andeq	r4, r0, r0
   10c18:	949c0100 	ldrls	r0, [ip], #256	; 0x100
   10c1c:	10000005 	andne	r0, r0, r5
   10c20:	00000cf3 	strdeq	r0, [r0], -r3
   10c24:	00a2dd02 	adceq	sp, r2, r2, lsl #26
   10c28:	509a0000 	addspl	r0, sl, r0
   10c2c:	60100000 	andsvs	r0, r0, r0
   10c30:	0200003c 	andeq	r0, r0, #60	; 0x3c
   10c34:	0000a2dd 	ldrdeq	sl, [r0], -sp
   10c38:	0050bb00 	subseq	fp, r0, r0, lsl #22
   10c3c:	1d131000 	ldcne	0, cr1, [r3, #-0]
   10c40:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
   10c44:	000000a2 	andeq	r0, r0, r2, lsr #1
   10c48:	000050dc 	ldrdeq	r5, [r0], -ip
   10c4c:	003cce10 	eorseq	ip, ip, r0, lsl lr
   10c50:	a2de0200 	sbcsge	r0, lr, #0, 4
   10c54:	1f000000 	svcne	0x00000000
   10c58:	13000051 	movwne	r0, #81	; 0x51
   10c5c:	00003d40 	andeq	r3, r0, r0, asr #26
   10c60:	00a2e002 	adceq	lr, r2, r2
   10c64:	51620000 	cmnpl	r2, r0
   10c68:	b1130000 	tstlt	r3, r0
   10c6c:	0200003c 	andeq	r0, r0, #60	; 0x3c
   10c70:	000097e1 	andeq	r9, r0, r1, ror #15
   10c74:	0051bd00 	subseq	fp, r1, r0, lsl #26
   10c78:	00ed1500 	rsceq	r1, sp, r0, lsl #10
   10c7c:	00000000 	andeq	r0, r0, r0
   10c80:	001a0000 	andseq	r0, sl, r0
   10c84:	fa020000 	blx	90c8c <__ccfg+0x70ce4>
   10c88:	0001080c 	andeq	r0, r1, ip, lsl #16
   10c8c:	fd0a0200 	stc2	2, cr0, [sl, #-0]
   10c90:	e0000000 	and	r0, r0, r0
   10c94:	16000051 			; <UNDEFINED> instruction: 0x16000051
   10c98:	00000000 	andeq	r0, r0, r0
   10c9c:	0000001a 	andeq	r0, r0, sl, lsl r0
   10ca0:	0001130b 	andeq	r1, r1, fp, lsl #6
   10ca4:	00522000 	subseq	r2, r2, r0
   10ca8:	011e0b00 	tsteq	lr, r0, lsl #22
   10cac:	52390000 	eorspl	r0, r9, #0
   10cb0:	000d0000 	andeq	r0, sp, r0
   10cb4:	94000000 	strls	r0, [r0], #-0
   10cb8:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
   10cbc:	00000000 	andeq	r0, r0, r0
   10cc0:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
   10cc4:	17000000 	strne	r0, [r0, -r0]
   10cc8:	000024bf 			; <UNDEFINED> instruction: 0x000024bf
   10ccc:	00a26a05 	adceq	r6, r2, r5, lsl #20
   10cd0:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
   10cd4:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
   10cd8:	0000a284 	andeq	sl, r0, r4, lsl #5
   10cdc:	0f310000 	svceq	0x00310000
   10ce0:	00040000 	andeq	r0, r4, r0
   10ce4:	00003f7c 	andeq	r3, r0, ip, ror pc
   10ce8:	40140104 	andsmi	r0, r4, r4, lsl #2
   10cec:	2d0c0000 	stccs	0, cr0, [ip, #-0]
   10cf0:	af00003f 	svcge	0x0000003f
   10cf4:	f0000040 			; <UNDEFINED> instruction: 0xf0000040
   10cf8:	aa00003f 	bge	10dfc <__exidx_end+0xbecc>
   10cfc:	45000000 	strmi	r0, [r0, #-0]
   10d00:	02000084 	andeq	r0, r0, #132	; 0x84
   10d04:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   10d08:	cf030074 	svcgt	0x00030074
   10d0c:	0200002d 	andeq	r0, r0, #45	; 0x2d
   10d10:	003817d8 	ldrsbteq	r1, [r8], -r8
   10d14:	04040000 	streq	r0, [r4], #-0
   10d18:	00039c07 	andeq	r9, r3, r7, lsl #24
   10d1c:	3ec10500 	cdpcc	5, 12, cr0, cr1, cr0, {0}
   10d20:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
   10d24:	00381801 	eorseq	r1, r8, r1, lsl #16
   10d28:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
   10d2c:	0005e805 	andeq	lr, r5, r5, lsl #16
   10d30:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
   10d34:	00003ee5 	andeq	r3, r0, r5, ror #29
   10d38:	00089605 	andeq	r9, r8, r5, lsl #12
   10d3c:	01650200 	cmneq	r5, r0, lsl #4
   10d40:	00003817 	andeq	r3, r0, r7, lsl r8
   10d44:	06010400 	streq	r0, [r1], -r0, lsl #8
   10d48:	000008de 	ldrdeq	r0, [r0], -lr
   10d4c:	dc080104 	stfles	f0, [r8], {4}
   10d50:	04000008 	streq	r0, [r0], #-8
   10d54:	07a30502 	streq	r0, [r3, r2, lsl #10]!
   10d58:	02040000 	andeq	r0, r4, #0
   10d5c:	0009aa07 	andeq	sl, r9, r7, lsl #20
   10d60:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   10d64:	000005ed 	andeq	r0, r0, sp, ror #11
   10d68:	00008306 	andeq	r8, r0, r6, lsl #6
   10d6c:	07040400 	streq	r0, [r4, -r0, lsl #8]
   10d70:	00000397 	muleq	r0, r7, r3
   10d74:	92070804 	andls	r0, r7, #4, 16	; 0x40000
   10d78:	03000003 	movweq	r0, #3
   10d7c:	000009e6 	andeq	r0, r0, r6, ror #19
   10d80:	830e2e03 	movwhi	r2, #60931	; 0xee03
   10d84:	03000000 	movweq	r0, #0
   10d88:	0000026b 	andeq	r0, r0, fp, ror #4
   10d8c:	830e7403 	movwhi	r7, #58371	; 0xe403
   10d90:	07000000 	streq	r0, [r0, -r0]
   10d94:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   10d98:	000000d7 	ldrdeq	r0, [r0], -r7
   10d9c:	00058b08 	andeq	r8, r5, r8, lsl #22
   10da0:	0ca70300 	stceq	3, cr0, [r7]
   10da4:	0000005a 	andeq	r0, r0, sl, asr r0
   10da8:	0007ea08 	andeq	lr, r7, r8, lsl #20
   10dac:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   10db0:	000000d7 	ldrdeq	r0, [r0], -r7
   10db4:	006e0900 	rsbeq	r0, lr, r0, lsl #18
   10db8:	00e70000 	rsceq	r0, r7, r0
   10dbc:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   10dc0:	03000000 	movweq	r0, #0
   10dc4:	03080b00 	movweq	r0, #35584	; 0x8b00
   10dc8:	010b09a2 	smlatbeq	fp, r2, r9, r0
   10dcc:	260c0000 	strcs	r0, [ip], -r0
   10dd0:	03000003 	movweq	r0, #3
   10dd4:	002507a4 	eoreq	r0, r5, r4, lsr #15
   10dd8:	0c000000 	stceq	0, cr0, [r0], {-0}
   10ddc:	000004ae 	andeq	r0, r0, lr, lsr #9
   10de0:	b505a903 	strlt	sl, [r5, #-2307]	; 0xfffff6fd
   10de4:	04000000 	streq	r0, [r0], #-0
   10de8:	06a90300 	strteq	r0, [r9], r0, lsl #6
   10dec:	aa030000 	bge	d0df4 <__ccfg+0xb0e4c>
   10df0:	0000e703 	andeq	lr, r0, r3, lsl #14
   10df4:	0e040d00 	cdpeq	13, 0, cr0, cr4, cr0, {0}
   10df8:	00000117 	andeq	r0, r0, r7, lsl r1
   10dfc:	00062d03 	andeq	r2, r6, r3, lsl #26
   10e00:	19160400 	ldmdbne	r6, {sl}
   10e04:	0000008f 	andeq	r0, r0, pc, lsl #1
   10e08:	0001fe03 	andeq	pc, r1, r3, lsl #28
   10e0c:	0d0c0500 	cfstr32eq	mvfx0, [ip, #-0]
   10e10:	00000025 	andeq	r0, r0, r5, lsr #32
   10e14:	00055903 	andeq	r5, r5, r3, lsl #18
   10e18:	1b230400 	blne	8d1e20 <__ccfg+0x8b1e78>
   10e1c:	0000012a 	andeq	r0, r0, sl, lsr #2
   10e20:	0002ab0f 	andeq	sl, r2, pc, lsl #22
   10e24:	34041800 	strcc	r1, [r4], #-2048	; 0xfffff800
   10e28:	00019c08 	andeq	r9, r1, r8, lsl #24
   10e2c:	0a400c00 	beq	1013e34 <__ccfg+0xff3e8c>
   10e30:	36040000 	strcc	r0, [r4], -r0
   10e34:	00019c13 	andeq	r9, r1, r3, lsl ip
   10e38:	5f100000 	svcpl	0x00100000
   10e3c:	3704006b 	strcc	r0, [r4, -fp, rrx]
   10e40:	00002507 	andeq	r2, r0, r7, lsl #10
   10e44:	450c0400 	strmi	r0, [ip, #-1024]	; 0xfffffc00
   10e48:	04000008 	streq	r0, [r0], #-8
   10e4c:	00250b37 	eoreq	r0, r5, r7, lsr fp
   10e50:	0c080000 	stceq	0, cr0, [r8], {-0}
   10e54:	00003eb0 			; <UNDEFINED> instruction: 0x00003eb0
   10e58:	25143704 	ldrcs	r3, [r4, #-1796]	; 0xfffff8fc
   10e5c:	0c000000 	stceq	0, cr0, [r0], {-0}
   10e60:	0003be0c 	andeq	fp, r3, ip, lsl #28
   10e64:	1b370400 	blne	dd1e6c <__ccfg+0xdb1ec4>
   10e68:	00000025 	andeq	r0, r0, r5, lsr #32
   10e6c:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
   10e70:	0b380400 	bleq	e11e78 <__ccfg+0xdf1ed0>
   10e74:	000001a2 	andeq	r0, r0, r2, lsr #3
   10e78:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
   10e7c:	00000142 	andeq	r0, r0, r2, asr #2
   10e80:	00011e09 	andeq	r1, r1, r9, lsl #28
   10e84:	0001b200 	andeq	fp, r1, r0, lsl #4
   10e88:	00380a00 	eorseq	r0, r8, r0, lsl #20
   10e8c:	00000000 	andeq	r0, r0, r0
   10e90:	0008600f 	andeq	r6, r8, pc
   10e94:	3c042400 	cfstrscc	mvf2, [r4], {-0}
   10e98:	00023508 	andeq	r3, r2, r8, lsl #10
   10e9c:	044e0c00 	strbeq	r0, [lr], #-3072	; 0xfffff400
   10ea0:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
   10ea4:	00002509 	andeq	r2, r0, r9, lsl #10
   10ea8:	580c0000 	stmdapl	ip, {}	; <UNPREDICTABLE>
   10eac:	04000003 	streq	r0, [r0], #-3
   10eb0:	0025093f 	eoreq	r0, r5, pc, lsr r9
   10eb4:	0c040000 	stceq	0, cr0, [r4], {-0}
   10eb8:	00000301 	andeq	r0, r0, r1, lsl #6
   10ebc:	25094004 	strcs	r4, [r9, #-4]
   10ec0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   10ec4:	00050f0c 	andeq	r0, r5, ip, lsl #30
   10ec8:	09410400 	stmdbeq	r1, {sl}^
   10ecc:	00000025 	andeq	r0, r0, r5, lsr #32
   10ed0:	071d0c0c 	ldreq	r0, [sp, -ip, lsl #24]
   10ed4:	42040000 	andmi	r0, r4, #0
   10ed8:	00002509 	andeq	r2, r0, r9, lsl #10
   10edc:	040c1000 	streq	r1, [ip], #-0
   10ee0:	04000008 	streq	r0, [r0], #-8
   10ee4:	00250943 	eoreq	r0, r5, r3, asr #18
   10ee8:	0c140000 	ldceq	0, cr0, [r4], {-0}
   10eec:	000002c6 	andeq	r0, r0, r6, asr #5
   10ef0:	25094404 	strcs	r4, [r9, #-1028]	; 0xfffffbfc
   10ef4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   10ef8:	0004570c 	andeq	r5, r4, ip, lsl #14
   10efc:	09450400 	stmdbeq	r5, {sl}^
   10f00:	00000025 	andeq	r0, r0, r5, lsr #32
   10f04:	06c70c1c 			; <UNDEFINED> instruction: 0x06c70c1c
   10f08:	46040000 	strmi	r0, [r4], -r0
   10f0c:	00002509 	andeq	r2, r0, r9, lsl #10
   10f10:	12002000 	andne	r2, r0, #0
   10f14:	00000061 	andeq	r0, r0, r1, rrx
   10f18:	4f040108 	svcmi	0x00040108
   10f1c:	00027a08 	andeq	r7, r2, r8, lsl #20
   10f20:	09740c00 	ldmdbeq	r4!, {sl, fp}^
   10f24:	50040000 	andpl	r0, r4, r0
   10f28:	00027a0a 	andeq	r7, r2, sl, lsl #20
   10f2c:	c00c0000 	andgt	r0, ip, r0
   10f30:	04000008 	streq	r0, [r0], #-8
   10f34:	027a0951 	rsbseq	r0, sl, #1327104	; 0x144000
   10f38:	13800000 	orrne	r0, r0, #0
   10f3c:	000009dd 	ldrdeq	r0, [r0], -sp
   10f40:	1e0a5304 	cdpne	3, 0, cr5, cr10, cr4, {0}
   10f44:	00000001 	andeq	r0, r0, r1
   10f48:	0a2b1301 	beq	ad5b54 <__ccfg+0xab5bac>
   10f4c:	56040000 	strpl	r0, [r4], -r0
   10f50:	00011e0a 	andeq	r1, r1, sl, lsl #28
   10f54:	00010400 	andeq	r0, r1, r0, lsl #8
   10f58:	00011709 	andeq	r1, r1, r9, lsl #14
   10f5c:	00028a00 	andeq	r8, r2, r0, lsl #20
   10f60:	00380a00 	eorseq	r0, r8, r0, lsl #20
   10f64:	001f0000 	andseq	r0, pc, r0
   10f68:	00078a12 	andeq	r8, r7, r2, lsl sl
   10f6c:	04019000 	streq	r9, [r1], #-0
   10f70:	02cd0862 	sbceq	r0, sp, #6422528	; 0x620000
   10f74:	400c0000 	andmi	r0, ip, r0
   10f78:	0400000a 	streq	r0, [r0], #-10
   10f7c:	02cd1263 	sbceq	r1, sp, #805306374	; 0x30000006
   10f80:	0c000000 	stceq	0, cr0, [r0], {-0}
   10f84:	00000466 	andeq	r0, r0, r6, ror #8
   10f88:	25066404 	strcs	r6, [r6, #-1028]	; 0xfffffbfc
   10f8c:	04000000 	streq	r0, [r0], #-0
   10f90:	0002730c 	andeq	r7, r2, ip, lsl #6
   10f94:	09660400 	stmdbeq	r6!, {sl}^
   10f98:	000002d3 	ldrdeq	r0, [r0], -r3
   10f9c:	00610c08 	rsbeq	r0, r1, r8, lsl #24
   10fa0:	67040000 	strvs	r0, [r4, -r0]
   10fa4:	0002351e 	andeq	r3, r2, lr, lsl r5
   10fa8:	11008800 	tstne	r0, r0, lsl #16
   10fac:	00028a04 	andeq	r8, r2, r4, lsl #20
   10fb0:	02e30900 	rsceq	r0, r3, #0, 18
   10fb4:	02e30000 	rsceq	r0, r3, #0
   10fb8:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   10fbc:	1f000000 	svcne	0x00000000
   10fc0:	e9041100 	stmdb	r4, {r8, ip}
   10fc4:	14000002 	strne	r0, [r0], #-2
   10fc8:	00093e0f 	andeq	r3, r9, pc, lsl #28
   10fcc:	7a040800 	bvc	112fd4 <__ccfg+0xf302c>
   10fd0:	00031208 	andeq	r1, r3, r8, lsl #4
   10fd4:	06040c00 	streq	r0, [r4], -r0, lsl #24
   10fd8:	7b040000 	blvc	110fe0 <__ccfg+0xf1038>
   10fdc:	00031211 	andeq	r1, r3, r1, lsl r2
   10fe0:	cf0c0000 	svcgt	0x000c0000
   10fe4:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   10fe8:	0025067c 	eoreq	r0, r5, ip, ror r6
   10fec:	00040000 	andeq	r0, r4, r0
   10ff0:	006e0411 	rsbeq	r0, lr, r1, lsl r4
   10ff4:	b60f0000 	strlt	r0, [pc], -r0
   10ff8:	68000003 	stmdavs	r0, {r0, r1}
   10ffc:	5b08ba04 	blpl	23f814 <__ccfg+0x21f86c>
   11000:	10000004 	andne	r0, r0, r4
   11004:	0400705f 	streq	r7, [r0], #-95	; 0xffffffa1
   11008:	031212bb 	tsteq	r2, #-1342177269	; 0xb000000b
   1100c:	10000000 	andne	r0, r0, r0
   11010:	0400725f 	streq	r7, [r0], #-607	; 0xfffffda1
   11014:	002507bc 	strhteq	r0, [r5], -ip
   11018:	10040000 	andne	r0, r4, r0
   1101c:	0400775f 	streq	r7, [r0], #-1887	; 0xfffff8a1
   11020:	002507bd 	strhteq	r0, [r5], -sp
   11024:	0c080000 	stceq	0, cr0, [r8], {-0}
   11028:	000001e9 	andeq	r0, r0, r9, ror #3
   1102c:	7509be04 	strvc	fp, [r9, #-3588]	; 0xfffff1fc
   11030:	0c000000 	stceq	0, cr0, [r0], {-0}
   11034:	0006620c 	andeq	r6, r6, ip, lsl #4
   11038:	09bf0400 	ldmibeq	pc!, {sl}	; <UNPREDICTABLE>
   1103c:	00000075 	andeq	r0, r0, r5, ror r0
   11040:	625f100e 	subsvs	r1, pc, #14
   11044:	c0040066 	andgt	r0, r4, r6, rrx
   11048:	0002ea11 	andeq	lr, r2, r1, lsl sl
   1104c:	e00c1000 	and	r1, ip, r0
   11050:	04000001 	streq	r0, [r0], #-1
   11054:	002507c1 	eoreq	r0, r5, r1, asr #15
   11058:	0c180000 	ldceq	0, cr0, [r8], {-0}
   1105c:	00000278 	andeq	r0, r0, r8, ror r2
   11060:	170ac804 	strne	ip, [sl, -r4, lsl #16]
   11064:	1c000001 	stcne	0, cr0, [r0], {1}
   11068:	00185f0c 	andseq	r5, r8, ip, lsl #30
   1106c:	1dca0400 	cfstrdne	mvd0, [sl]
   11070:	000005df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11074:	18260c20 	stmdane	r6!, {r5, sl, fp}
   11078:	cc040000 	stcgt	0, cr0, [r4], {-0}
   1107c:	0006091d 	andeq	r0, r6, sp, lsl r9
   11080:	510c2400 	tstpl	ip, r0, lsl #8
   11084:	0400000a 	streq	r0, [r0], #-10
   11088:	062d0dcf 	strteq	r0, [sp], -pc, asr #27
   1108c:	0c280000 	stceq	0, cr0, [r8], #-0
   11090:	00001814 	andeq	r1, r0, r4, lsl r8
   11094:	4709d004 	strmi	sp, [r9, -r4]
   11098:	2c000006 	stccs	0, cr0, [r0], {6}
   1109c:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
   110a0:	11d30400 	bicsne	r0, r3, r0, lsl #8
   110a4:	000002ea 	andeq	r0, r0, sl, ror #5
   110a8:	755f1030 	ldrbvc	r1, [pc, #-48]	; 11080 <__exidx_end+0xc150>
   110ac:	d4040070 	strle	r0, [r4], #-112	; 0xffffff90
   110b0:	00031212 	andeq	r1, r3, r2, lsl r2
   110b4:	5f103800 	svcpl	0x00103800
   110b8:	04007275 	streq	r7, [r0], #-629	; 0xfffffd8b
   110bc:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   110c0:	0c3c0000 	ldceq	0, cr0, [ip], #-0
   110c4:	00000a68 	andeq	r0, r0, r8, ror #20
   110c8:	4d11d804 	ldcmi	8, cr13, [r1, #-16]
   110cc:	40000006 	andmi	r0, r0, r6
   110d0:	0009f70c 	andeq	pc, r9, ip, lsl #14
   110d4:	11d90400 	bicsne	r0, r9, r0, lsl #8
   110d8:	0000065d 	andeq	r0, r0, sp, asr r6
   110dc:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
   110e0:	dc040062 	stcle	0, cr0, [r4], {98}	; 0x62
   110e4:	0002ea11 	andeq	lr, r2, r1, lsl sl
   110e8:	570c4400 	strpl	r4, [ip, -r0, lsl #8]
   110ec:	04000008 	streq	r0, [r0], #-8
   110f0:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   110f4:	0c4c0000 	mareq	acc0, r0, ip
   110f8:	00000403 	andeq	r0, r0, r3, lsl #8
   110fc:	9d0ae004 	stcls	0, cr14, [sl, #-16]
   11100:	50000000 	andpl	r0, r0, r0
   11104:	00432e0c 	subeq	r2, r3, ip, lsl #28
   11108:	12e30400 	rscne	r0, r3, #0, 8
   1110c:	00000479 	andeq	r0, r0, r9, ror r4
   11110:	086f0c54 	stmdaeq	pc!, {r2, r4, r6, sl, fp}^	; <UNPREDICTABLE>
   11114:	e7040000 	str	r0, [r4, -r0]
   11118:	0001360c 	andeq	r3, r1, ip, lsl #12
   1111c:	920c5800 	andls	r5, ip, #0, 16
   11120:	04000007 	streq	r0, [r0], #-7
   11124:	010b0ee9 	smlatteq	fp, r9, lr, r0
   11128:	0c5c0000 	mraeq	r0, ip, acc0
   1112c:	00000a23 	andeq	r0, r0, r3, lsr #20
   11130:	2509ea04 	strcs	lr, [r9, #-2564]	; 0xfffff5fc
   11134:	64000000 	strvs	r0, [r0], #-0
   11138:	00251500 	eoreq	r1, r5, r0, lsl #10
   1113c:	04790000 	ldrbteq	r0, [r9], #-0
   11140:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   11144:	16000004 	strne	r0, [r0], -r4
   11148:	00000117 	andeq	r0, r0, r7, lsl r1
   1114c:	0005cd16 	andeq	ip, r5, r6, lsl sp
   11150:	00251600 	eoreq	r1, r5, r0, lsl #12
   11154:	11000000 	mrsne	r0, (UNDEF: 0)
   11158:	00048404 	andeq	r8, r4, r4, lsl #8
   1115c:	04790600 	ldrbteq	r0, [r9], #-1536	; 0xfffffa00
   11160:	6c170000 	ldcvs	0, cr0, [r7], {-0}
   11164:	28000043 	stmdacs	r0, {r0, r1, r6}
   11168:	02650404 	rsbeq	r0, r5, #4, 8	; 0x4000000
   1116c:	0005cd08 	andeq	ip, r5, r8, lsl #26
   11170:	06f81800 	ldrbteq	r1, [r8], r0, lsl #16
   11174:	67040000 	strvs	r0, [r4, -r0]
   11178:	00250702 	eoreq	r0, r5, r2, lsl #14
   1117c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11180:	000005d2 	ldrdeq	r0, [r0], -r2
   11184:	0b026c04 	bleq	ac19c <__ccfg+0x8c1f4>
   11188:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   1118c:	02551804 	subseq	r1, r5, #4, 16	; 0x40000
   11190:	6c040000 	stcvs	0, cr0, [r4], {-0}
   11194:	06b91402 	ldrteq	r1, [r9], r2, lsl #8
   11198:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
   1119c:	00000a57 	andeq	r0, r0, r7, asr sl
   111a0:	1e026c04 	cdpne	12, 0, cr6, cr2, cr4, {0}
   111a4:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
   111a8:	0461180c 	strbteq	r1, [r1], #-2060	; 0xfffff7f4
   111ac:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
   111b0:	00250802 	eoreq	r0, r5, r2, lsl #16
   111b4:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
   111b8:	00000413 	andeq	r0, r0, r3, lsl r4
   111bc:	08026f04 	stmdaeq	r2, {r2, r8, r9, sl, fp, sp, lr}
   111c0:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   111c4:	0a0a1814 	beq	29721c <__ccfg+0x277274>
   111c8:	72040000 	andvc	r0, r4, #0
   111cc:	00250702 	eoreq	r0, r5, r2, lsl #14
   111d0:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
   111d4:	00003d5c 	andeq	r3, r0, ip, asr sp
   111d8:	16027304 	strne	r7, [r2], -r4, lsl #6
   111dc:	00000950 	andeq	r0, r0, r0, asr r9
   111e0:	05a51834 	streq	r1, [r5, #2100]!	; 0x834
   111e4:	75040000 	strvc	r0, [r4, #-0]
   111e8:	00250702 	eoreq	r0, r5, r2, lsl #14
   111ec:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
   111f0:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
   111f4:	0a027704 	beq	aee0c <__ccfg+0x8ee64>
   111f8:	00000961 	andeq	r0, r0, r1, ror #18
   111fc:	02d0183c 	sbcseq	r1, r0, #60, 16	; 0x3c0000
   11200:	7a040000 	bvc	111208 <__ccfg+0xf1260>
   11204:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11208:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
   1120c:	0000037c 	andeq	r0, r0, ip, ror r3
   11210:	07027b04 	streq	r7, [r2, -r4, lsl #22]
   11214:	00000025 	andeq	r0, r0, r5, lsr #32
   11218:	04b61844 	ldrteq	r1, [r6], #2116	; 0x844
   1121c:	7c040000 	stcvc	0, cr0, [r4], {-0}
   11220:	019c1302 	orrseq	r1, ip, r2, lsl #6
   11224:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
   11228:	0000060a 	andeq	r0, r0, sl, lsl #12
   1122c:	14027d04 	strne	r7, [r2], #-3332	; 0xfffff2fc
   11230:	00000967 	andeq	r0, r0, r7, ror #18
   11234:	083d184c 	ldmdaeq	sp!, {r2, r3, r6, fp, ip}
   11238:	80040000 	andhi	r0, r4, r0
   1123c:	00250702 	eoreq	r0, r5, r2, lsl #14
   11240:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
   11244:	000008d4 	ldrdeq	r0, [r0], -r4
   11248:	09028104 	stmdbeq	r2, {r2, r8, pc}
   1124c:	000005cd 	andeq	r0, r0, sp, asr #11
   11250:	08ee1854 	stmiaeq	lr!, {r2, r4, r6, fp, ip}^
   11254:	a4040000 	strge	r0, [r4], #-0
   11258:	08940702 	ldmeq	r4, {r1, r8, r9, sl}
   1125c:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
   11260:	0000078a 	andeq	r0, r0, sl, lsl #15
   11264:	1302a804 	movwne	sl, #10244	; 0x2804
   11268:	000002cd 	andeq	r0, r0, sp, asr #5
   1126c:	32190148 	andscc	r0, r9, #72, 2
   11270:	04000005 	streq	r0, [r0], #-5
   11274:	8a1202a9 	bhi	491d20 <__ccfg+0x471d78>
   11278:	4c000002 	stcmi	0, cr0, [r0], {2}
   1127c:	05191901 	ldreq	r1, [r9, #-2305]	; 0xfffff6ff
   11280:	ad040000 	stcge	0, cr0, [r4, #-0]
   11284:	09780c02 	ldmdbeq	r8!, {r1, sl, fp}^
   11288:	02dc0000 	sbcseq	r0, ip, #0
   1128c:	00095119 	andeq	r5, r9, r9, lsl r1
   11290:	02b20400 	adcseq	r0, r2, #0, 8
   11294:	00067a10 	andeq	r7, r6, r0, lsl sl
   11298:	1902e000 	stmdbne	r2, {sp, lr, pc}
   1129c:	000007cb 	andeq	r0, r0, fp, asr #15
   112a0:	0a02b404 	beq	be2b8 <__ccfg+0x9e310>
   112a4:	00000984 	andeq	r0, r0, r4, lsl #19
   112a8:	110002ec 	smlattne	r0, ip, r2, r0
   112ac:	0005d304 	andeq	sp, r5, r4, lsl #6
   112b0:	08010400 	stmdaeq	r1, {sl}
   112b4:	000008e5 	andeq	r0, r0, r5, ror #17
   112b8:	0005d306 	andeq	sp, r5, r6, lsl #6
   112bc:	5b041100 	blpl	1156c4 <__ccfg+0xf571c>
   112c0:	15000004 	strne	r0, [r0, #-4]
   112c4:	00000025 	andeq	r0, r0, r5, lsr #32
   112c8:	00000603 	andeq	r0, r0, r3, lsl #12
   112cc:	00047916 	andeq	r7, r4, r6, lsl r9
   112d0:	01171600 	tsteq	r7, r0, lsl #12
   112d4:	03160000 	tsteq	r6, #0
   112d8:	16000006 	strne	r0, [r0], -r6
   112dc:	00000025 	andeq	r0, r0, r5, lsr #32
   112e0:	da041100 	ble	1156e8 <__ccfg+0xf5740>
   112e4:	11000005 	tstne	r0, r5
   112e8:	0005e504 	andeq	lr, r5, r4, lsl #10
   112ec:	00a91500 	adceq	r1, r9, r0, lsl #10
   112f0:	062d0000 	strteq	r0, [sp], -r0
   112f4:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   112f8:	16000004 	strne	r0, [r0], -r4
   112fc:	00000117 	andeq	r0, r0, r7, lsl r1
   11300:	0000a916 	andeq	sl, r0, r6, lsl r9
   11304:	00251600 	eoreq	r1, r5, r0, lsl #12
   11308:	11000000 	mrsne	r0, (UNDEF: 0)
   1130c:	00060f04 	andeq	r0, r6, r4, lsl #30
   11310:	00251500 	eoreq	r1, r5, r0, lsl #10
   11314:	06470000 	strbeq	r0, [r7], -r0
   11318:	79160000 	ldmdbvc	r6, {}	; <UNPREDICTABLE>
   1131c:	16000004 	strne	r0, [r0], -r4
   11320:	00000117 	andeq	r0, r0, r7, lsl r1
   11324:	33041100 	movwcc	r1, #16640	; 0x4100
   11328:	09000006 	stmdbeq	r0, {r1, r2}
   1132c:	0000006e 	andeq	r0, r0, lr, rrx
   11330:	0000065d 	andeq	r0, r0, sp, asr r6
   11334:	0000380a 	andeq	r3, r0, sl, lsl #16
   11338:	09000200 	stmdbeq	r0, {r9}
   1133c:	0000006e 	andeq	r0, r0, lr, rrx
   11340:	0000066d 	andeq	r0, r0, sp, ror #12
   11344:	0000380a 	andeq	r3, r0, sl, lsl #16
   11348:	05000000 	streq	r0, [r0, #-0]
   1134c:	000003f1 	strdeq	r0, [r0], -r1
   11350:	1a012404 	bne	5a368 <__ccfg+0x3a3c0>
   11354:	00000318 	andeq	r0, r0, r8, lsl r3
   11358:	0043821a 	subeq	r8, r3, sl, lsl r2
   1135c:	28040c00 	stmdacs	r4, {sl, fp}
   11360:	06b30801 	ldrteq	r0, [r3], r1, lsl #16
   11364:	40180000 	andsmi	r0, r8, r0
   11368:	0400000a 	streq	r0, [r0], #-10
   1136c:	b311012a 	tstlt	r1, #-2147483638	; 0x8000000a
   11370:	00000006 	andeq	r0, r0, r6
   11374:	00088f18 	andeq	r8, r8, r8, lsl pc
   11378:	012b0400 			; <UNDEFINED> instruction: 0x012b0400
   1137c:	00002507 	andeq	r2, r0, r7, lsl #10
   11380:	91180400 	tstls	r8, r0, lsl #8
   11384:	04000005 	streq	r0, [r0], #-5
   11388:	b90b012c 	stmdblt	fp, {r2, r3, r5, r8}
   1138c:	08000006 	stmdaeq	r0, {r1, r2}
   11390:	7a041100 	bvc	115798 <__ccfg+0xf57f0>
   11394:	11000006 	tstne	r0, r6
   11398:	00066d04 	andeq	r6, r6, r4, lsl #26
   1139c:	03681a00 	cmneq	r8, #0, 20
   113a0:	040e0000 	streq	r0, [lr], #-0
   113a4:	f8080144 			; <UNDEFINED> instruction: 0xf8080144
   113a8:	18000006 	stmdane	r0, {r1, r2}
   113ac:	00001188 	andeq	r1, r0, r8, lsl #3
   113b0:	12014504 	andne	r4, r1, #4, 10	; 0x1000000
   113b4:	000006f8 	strdeq	r0, [r0], -r8
   113b8:	061c1800 	ldreq	r1, [ip], -r0, lsl #16
   113bc:	46040000 	strmi	r0, [r4], -r0
   113c0:	06f81201 	ldrbteq	r1, [r8], r1, lsl #4
   113c4:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
   113c8:	0000102d 	andeq	r1, r0, sp, lsr #32
   113cc:	12014704 	andne	r4, r1, #4, 14	; 0x100000
   113d0:	0000007c 	andeq	r0, r0, ip, ror r0
   113d4:	7c09000c 	stcvc	0, cr0, [r9], {12}
   113d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   113dc:	0a000007 	beq	11400 <__exidx_end+0xc4d0>
   113e0:	00000038 	andeq	r0, r0, r8, lsr r0
   113e4:	d01b0002 	andsle	r0, fp, r2
   113e8:	07028504 	streq	r8, [r2, -r4, lsl #10]
   113ec:	0000081d 	andeq	r0, r0, sp, lsl r8
   113f0:	0009fd18 	andeq	pc, r9, r8, lsl sp	; <UNPREDICTABLE>
   113f4:	02870400 	addeq	r0, r7, #0, 8
   113f8:	00003818 	andeq	r3, r0, r8, lsl r8
   113fc:	59180000 	ldmdbpl	r8, {}	; <UNPREDICTABLE>
   11400:	04000009 	streq	r0, [r0], #-9
   11404:	cd120288 	lfmgt	f0, 4, [r2, #-544]	; 0xfffffde0
   11408:	04000005 	streq	r0, [r0], #-5
   1140c:	0003a918 	andeq	sl, r3, r8, lsl r9
   11410:	02890400 	addeq	r0, r9, #0, 8
   11414:	00081d10 	andeq	r1, r8, r0, lsl sp
   11418:	1c180800 	ldcne	8, cr0, [r8], {-0}
   1141c:	04000008 	streq	r0, [r0], #-8
   11420:	b217028a 	andslt	r0, r7, #-1610612728	; 0xa0000008
   11424:	24000001 	strcs	r0, [r0], #-1
   11428:	0005d918 	andeq	sp, r5, r8, lsl r9
   1142c:	028b0400 	addeq	r0, fp, #0, 8
   11430:	0000250f 	andeq	r2, r0, pc, lsl #10
   11434:	3b184800 	blcc	62343c <__ccfg+0x603494>
   11438:	0400000a 	streq	r0, [r0], #-10
   1143c:	962c028c 	strtls	r0, [ip], -ip, lsl #5
   11440:	50000000 	andpl	r0, r0, r0
   11444:	00008518 	andeq	r8, r0, r8, lsl r5
   11448:	028d0400 	addeq	r0, sp, #0, 8
   1144c:	0006bf1a 	andeq	fp, r6, sl, lsl pc
   11450:	ee185800 	cdp	8, 1, cr5, cr8, cr0, {0}
   11454:	04000004 	streq	r0, [r0], #-4
   11458:	0b16028e 	bleq	591e98 <__ccfg+0x571ef0>
   1145c:	68000001 	stmdavs	r0, {r0}
   11460:	00096618 	andeq	r6, r9, r8, lsl r6
   11464:	028f0400 	addeq	r0, pc, #0, 8
   11468:	00010b16 	andeq	r0, r1, r6, lsl fp
   1146c:	6f187000 	svcvs	0x00187000
   11470:	04000000 	streq	r0, [r0], #-0
   11474:	0b160290 	bleq	591ebc <__ccfg+0x571f14>
   11478:	78000001 	stmdavc	r0, {r0}
   1147c:	00084d18 	andeq	r4, r8, r8, lsl sp
   11480:	02910400 	addseq	r0, r1, #0, 8
   11484:	00082d10 	andeq	r2, r8, r0, lsl sp
   11488:	86188000 	ldrhi	r8, [r8], -r0
   1148c:	04000003 	streq	r0, [r0], #-3
   11490:	3d100292 	lfmcc	f0, 4, [r0, #-584]	; 0xfffffdb8
   11494:	88000008 	stmdahi	r0, {r3}
   11498:	00091118 	andeq	r1, r9, r8, lsl r1
   1149c:	02930400 	addseq	r0, r3, #0, 8
   114a0:	0000250f 	andeq	r2, r0, pc, lsl #10
   114a4:	2918a000 	ldmdbcs	r8, {sp, pc}
   114a8:	04000002 	streq	r0, [r0], #-2
   114ac:	0b160294 	bleq	591f04 <__ccfg+0x571f5c>
   114b0:	a4000001 	strge	r0, [r0], #-1
   114b4:	00052318 	andeq	r2, r5, r8, lsl r3
   114b8:	02950400 	addseq	r0, r5, #0, 8
   114bc:	00010b16 	andeq	r0, r1, r6, lsl fp
   114c0:	6b18ac00 	blvs	63c4c8 <__ccfg+0x61c520>
   114c4:	04000004 	streq	r0, [r0], #-4
   114c8:	0b160296 	bleq	591f28 <__ccfg+0x571f80>
   114cc:	b4000001 	strlt	r0, [r0], #-1
   114d0:	00065318 	andeq	r5, r6, r8, lsl r3
   114d4:	02970400 	addseq	r0, r7, #0, 8
   114d8:	00010b16 	andeq	r0, r1, r6, lsl fp
   114dc:	dd18bc00 	ldcle	12, cr11, [r8, #-0]
   114e0:	04000004 	streq	r0, [r0], #-4
   114e4:	0b160298 	bleq	591f4c <__ccfg+0x571fa4>
   114e8:	c4000001 	strgt	r0, [r0], #-1
   114ec:	0006f618 	andeq	pc, r6, r8, lsl r6	; <UNPREDICTABLE>
   114f0:	02990400 	addseq	r0, r9, #0, 8
   114f4:	00002508 	andeq	r2, r0, r8, lsl #10
   114f8:	0900cc00 	stmdbeq	r0, {sl, fp, lr, pc}
   114fc:	000005d3 	ldrdeq	r0, [r0], -r3
   11500:	0000082d 	andeq	r0, r0, sp, lsr #16
   11504:	0000380a 	andeq	r3, r0, sl, lsl #16
   11508:	09001900 	stmdbeq	r0, {r8, fp, ip}
   1150c:	000005d3 	ldrdeq	r0, [r0], -r3
   11510:	0000083d 	andeq	r0, r0, sp, lsr r8
   11514:	0000380a 	andeq	r3, r0, sl, lsl #16
   11518:	09000700 	stmdbeq	r0, {r8, r9, sl}
   1151c:	000005d3 	ldrdeq	r0, [r0], -r3
   11520:	0000084d 	andeq	r0, r0, sp, asr #16
   11524:	0000380a 	andeq	r3, r0, sl, lsl #16
   11528:	1b001700 	blne	17130 <__exidx_end+0x12200>
   1152c:	029e04f0 	addseq	r0, lr, #240, 8	; 0xf0000000
   11530:	00087407 	andeq	r7, r8, r7, lsl #8
   11534:	03611800 	cmneq	r1, #0, 16
   11538:	a1040000 	mrsge	r0, (UNDEF: 4)
   1153c:	08741b02 	ldmdaeq	r4!, {r1, r8, r9, fp, ip}^
   11540:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   11544:	00000a5f 	andeq	r0, r0, pc, asr sl
   11548:	1802a204 	stmdane	r2, {r2, r9, sp, pc}
   1154c:	00000884 	andeq	r0, r0, r4, lsl #17
   11550:	12090078 	andne	r0, r9, #120	; 0x78
   11554:	84000003 	strhi	r0, [r0], #-3
   11558:	0a000008 	beq	11580 <__exidx_end+0xc650>
   1155c:	00000038 	andeq	r0, r0, r8, lsr r0
   11560:	3809001d 	stmdacc	r9, {r0, r2, r3, r4}
   11564:	94000000 	strls	r0, [r0], #-0
   11568:	0a000008 	beq	11590 <__exidx_end+0xc660>
   1156c:	00000038 	andeq	r0, r0, r8, lsr r0
   11570:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
   11574:	03028304 	movweq	r8, #8964	; 0x2304
   11578:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
   1157c:	00436c1d 	subeq	r6, r3, sp, lsl ip
   11580:	029a0400 	addseq	r0, sl, #0, 8
   11584:	0007080b 	andeq	r0, r7, fp, lsl #16
   11588:	082b1d00 	stmdaeq	fp!, {r8, sl, fp, ip}
   1158c:	a3040000 	movwge	r0, #16384	; 0x4000
   11590:	084d0b02 	stmdaeq	sp, {r1, r8, r9, fp}^
   11594:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   11598:	000005d3 	ldrdeq	r0, [r0], -r3
   1159c:	000008c9 	andeq	r0, r0, r9, asr #17
   115a0:	0000380a 	andeq	r3, r0, sl, lsl #16
   115a4:	12001800 	andne	r1, r0, #0, 16
   115a8:	00000a46 	andeq	r0, r0, r6, asr #20
   115ac:	b206016c 	andlt	r0, r6, #108, 2
   115b0:	00095008 	andeq	r5, r9, r8
   115b4:	3fed0c00 	svccc	0x00ed0c00
   115b8:	b4060000 	strlt	r0, [r6], #-0
   115bc:	000df80b 	andeq	pc, sp, fp, lsl #16
   115c0:	a20c0000 	andge	r0, ip, #0
   115c4:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   115c8:	0e320bb5 	vmoveq.s16	r0, d18[2]
   115cc:	0ce00000 	stcleq	0, cr0, [r0]
   115d0:	00003e38 	andeq	r3, r0, r8, lsr lr
   115d4:	610bb706 	tstvs	fp, r6, lsl #14
   115d8:	e400000e 	str	r0, [r0], #-14
   115dc:	003da80c 	eorseq	sl, sp, ip, lsl #16
   115e0:	0ab90600 	beq	fee52de8 <_estack+0xdee4dde8>
   115e4:	00000025 	andeq	r0, r0, r5, lsr #32
   115e8:	3d740ce8 	ldclcc	12, cr0, [r4, #-928]!	; 0xfffffc60
   115ec:	ba060000 	blt	1915f4 <__ccfg+0x17164c>
   115f0:	0005cd0b 	andeq	ip, r5, fp, lsl #26
   115f4:	a20cec00 	andge	lr, ip, #0, 24
   115f8:	0600003d 			; <UNDEFINED> instruction: 0x0600003d
   115fc:	09d212bb 	ldmibeq	r2, {r0, r1, r3, r4, r5, r7, r9, ip}^
   11600:	13f00000 	mvnsne	r0, #0
   11604:	00003eb6 			; <UNDEFINED> instruction: 0x00003eb6
   11608:	670bbd06 	strvs	fp, [fp, -r6, lsl #26]
   1160c:	2800000e 	stmdacs	r0, {r1, r2, r3}
   11610:	3ed71301 	cdpcc	3, 13, cr1, cr7, cr1, {0}
   11614:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
   11618:	000e770b 	andeq	r7, lr, fp, lsl #14
   1161c:	13012a00 	movwne	r2, #6656	; 0x1a00
   11620:	00003e28 	andeq	r3, r0, r8, lsr #28
   11624:	770bbf06 	strvc	fp, [fp, -r6, lsl #30]
   11628:	4a00000e 	bmi	11668 <__exidx_end+0xc738>
   1162c:	04110001 	ldreq	r0, [r1], #-1
   11630:	000008c9 	andeq	r0, r0, r9, asr #17
   11634:	0009611e 	andeq	r6, r9, lr, lsl r1
   11638:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   1163c:	11000000 	mrsne	r0, (UNDEF: 0)
   11640:	00095604 	andeq	r5, r9, r4, lsl #12
   11644:	9c041100 	stflss	f1, [r4], {-0}
   11648:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   1164c:	00000978 	andeq	r0, r0, r8, ror r9
   11650:	00002516 	andeq	r2, r0, r6, lsl r5
   11654:	04110000 	ldreq	r0, [r1], #-0
   11658:	0000097e 	andeq	r0, r0, lr, ror r9
   1165c:	096d0411 	stmdbeq	sp!, {r0, r4, sl}^
   11660:	6d090000 	stcvs	0, cr0, [r9, #-0]
   11664:	94000006 	strls	r0, [r0], #-6
   11668:	0a000009 	beq	11694 <__exidx_end+0xc764>
   1166c:	00000038 	andeq	r0, r0, r8, lsr r0
   11670:	f81f0002 			; <UNDEFINED> instruction: 0xf81f0002
   11674:	04000007 	streq	r0, [r0], #-7
   11678:	79170333 	ldmdbvc	r7, {r0, r1, r4, r5, r8, r9}
   1167c:	1f000004 	svcne	0x00000004
   11680:	000007f1 	strdeq	r0, [r0], -r1
   11684:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   11688:	0000047f 	andeq	r0, r0, pc, ror r4
   1168c:	09b90411 	ldmibeq	r9!, {r0, r4, sl}
   11690:	ae0e0000 	cdpge	0, 0, cr0, cr14, cr0, {0}
   11694:	20000009 	andcs	r0, r0, r9
   11698:	003efe21 	eorseq	pc, lr, r1, lsr #28
   1169c:	0e670700 	cdpeq	7, 6, cr0, cr7, cr0, {0}
   116a0:	000005cd 	andeq	r0, r0, sp, asr #11
   116a4:	0006aa03 	andeq	sl, r6, r3, lsl #20
   116a8:	14560800 	ldrbne	r0, [r6], #-2048	; 0xfffff800
   116ac:	0000010b 	andeq	r0, r0, fp, lsl #2
   116b0:	003da20f 	eorseq	sl, sp, pc, lsl #4
   116b4:	2a093800 	bcs	25f6bc <__ccfg+0x23f714>
   116b8:	000b1808 	andeq	r1, fp, r8, lsl #16
   116bc:	3e8b0c00 	cdpcc	12, 8, cr0, cr11, cr0, {0}
   116c0:	2c090000 	stccs	0, cr0, [r9], {-0}
   116c4:	0005cd09 	andeq	ip, r5, r9, lsl #26
   116c8:	ad0c0000 	stcge	0, cr0, [ip, #-0]
   116cc:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   116d0:	05cd092d 	strbeq	r0, [sp, #2349]	; 0x92d
   116d4:	0c040000 	stceq	0, cr0, [r4], {-0}
   116d8:	00003e66 	andeq	r3, r0, r6, ror #28
   116dc:	cd092e09 	stcgt	14, cr2, [r9, #-36]	; 0xffffffdc
   116e0:	08000005 	stmdaeq	r0, {r0, r2}
   116e4:	003dcd0c 	eorseq	ip, sp, ip, lsl #26
   116e8:	092f0900 	stmdbeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   116ec:	000005cd 	andeq	r0, r0, sp, asr #11
   116f0:	3d640c0c 	stclcc	12, cr0, [r4, #-48]!	; 0xffffffd0
   116f4:	30090000 	andcc	r0, r9, r0
   116f8:	0005cd09 	andeq	ip, r5, r9, lsl #26
   116fc:	870c1000 	strhi	r1, [ip, -r0]
   11700:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
   11704:	05cd0931 	strbeq	r0, [sp, #2353]	; 0x931
   11708:	0c140000 	ldceq	0, cr0, [r4], {-0}
   1170c:	00003fa9 	andeq	r3, r0, r9, lsr #31
   11710:	cd093209 	sfmgt	f3, 4, [r9, #-36]	; 0xffffffdc
   11714:	18000005 	stmdane	r0, {r0, r2}
   11718:	003e620c 	eorseq	r6, lr, ip, lsl #4
   1171c:	09330900 	ldmdbeq	r3!, {r8, fp}
   11720:	000005cd 	andeq	r0, r0, sp, asr #11
   11724:	3ec90c1c 	mcrcc	12, 6, r0, cr9, cr12, {0}
   11728:	34090000 	strcc	r0, [r9], #-0
   1172c:	0005cd09 	andeq	ip, r5, r9, lsl #26
   11730:	a80c2000 	stmdage	ip, {sp}
   11734:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
   11738:	05cd0935 	strbeq	r0, [sp, #2357]	; 0x935
   1173c:	0c240000 	stceq	0, cr0, [r4], #-0
   11740:	0000410d 	andeq	r4, r0, sp, lsl #2
   11744:	d3083609 	movwle	r3, #34313	; 0x8609
   11748:	28000005 	stmdacs	r0, {r0, r2}
   1174c:	0041110c 	subeq	r1, r1, ip, lsl #2
   11750:	08370900 	ldmdaeq	r7!, {r8, fp}
   11754:	000005d3 	ldrdeq	r0, [r0], -r3
   11758:	3e790c29 	cdpcc	12, 7, cr0, cr9, cr9, {1}
   1175c:	38090000 	stmdacc	r9, {}	; <UNPREDICTABLE>
   11760:	0005d308 	andeq	sp, r5, r8, lsl #6
   11764:	0c0c2a00 			; <UNDEFINED> instruction: 0x0c0c2a00
   11768:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   1176c:	05d30839 	ldrbeq	r0, [r3, #2105]	; 0x839
   11770:	0c2b0000 	stceq	0, cr0, [fp], #-0
   11774:	00003f1f 	andeq	r3, r0, pc, lsl pc
   11778:	d3083a09 	movwle	r3, #35337	; 0x8a09
   1177c:	2c000005 	stccs	0, cr0, [r0], {5}
   11780:	003d930c 	eorseq	r9, sp, ip, lsl #6
   11784:	083b0900 	ldmdaeq	fp!, {r8, fp}
   11788:	000005d3 	ldrdeq	r0, [r0], -r3
   1178c:	3e560c2d 	cdpcc	12, 5, cr0, cr6, cr13, {1}
   11790:	3c090000 	stccc	0, cr0, [r9], {-0}
   11794:	0005d308 	andeq	sp, r5, r8, lsl #6
   11798:	fc0c2e00 	stc2	14, cr2, [ip], {-0}
   1179c:	0900003f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r5}
   117a0:	05d3083d 	ldrbeq	r0, [r3, #2109]	; 0x83d
   117a4:	0c2f0000 	stceq	0, cr0, [pc], #-0	; 117ac <__exidx_end+0xc87c>
   117a8:	00003f1b 	andeq	r3, r0, fp, lsl pc
   117ac:	d3083e09 	movwle	r3, #36361	; 0x8e09
   117b0:	30000005 	andcc	r0, r0, r5
   117b4:	003d8f0c 	eorseq	r8, sp, ip, lsl #30
   117b8:	083f0900 	ldmdaeq	pc!, {r8, fp}	; <UNPREDICTABLE>
   117bc:	000005d3 	ldrdeq	r0, [r0], -r3
   117c0:	3ff80c31 	svccc	0x00f80c31
   117c4:	40090000 	andmi	r0, r9, r0
   117c8:	0005d308 	andeq	sp, r5, r8, lsl #6
   117cc:	750c3200 	strvc	r3, [ip, #-512]	; 0xfffffe00
   117d0:	0900003e 	stmdbeq	r0, {r1, r2, r3, r4, r5}
   117d4:	05d30841 	ldrbeq	r0, [r3, #2113]	; 0x841
   117d8:	0c330000 	ldceq	0, cr0, [r3], #-0
   117dc:	00003f08 	andeq	r3, r0, r8, lsl #30
   117e0:	d3084209 	movwle	r4, #33289	; 0x8209
   117e4:	34000005 	strcc	r0, [r0], #-5
   117e8:	003e520c 	eorseq	r5, lr, ip, lsl #4
   117ec:	08430900 	stmdaeq	r3, {r8, fp}^
   117f0:	000005d3 	ldrdeq	r0, [r0], -r3
   117f4:	8d0f0035 	stchi	0, cr0, [pc, #-212]	; 11728 <__exidx_end+0xc7f8>
   117f8:	0800003f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5}
   117fc:	40083906 	andmi	r3, r8, r6, lsl #18
   11800:	0c00000b 	stceq	0, cr0, [r0], {11}
   11804:	00003e30 	andeq	r3, r0, r0, lsr lr
   11808:	030f3b06 	movweq	r3, #64262	; 0xfb06
   1180c:	00000006 	andeq	r0, r0, r6
   11810:	003eb60c 	eorseq	fp, lr, ip, lsl #12
   11814:	0f3c0600 	svceq	0x003c0600
   11818:	00000603 	andeq	r0, r0, r3, lsl #12
   1181c:	18060004 	stmdane	r6, {r2}
   11820:	2100000b 	tstcs	r0, fp
   11824:	00003df2 	strdeq	r3, [r0], -r2
   11828:	40204206 	eormi	r4, r0, r6, lsl #4
   1182c:	0f00000b 	svceq	0x0000000b
   11830:	00003e1a 	andeq	r3, r0, sl, lsl lr
   11834:	0844063c 	stmdaeq	r4, {r2, r3, r4, r5, r9, sl}^
   11838:	00000c22 	andeq	r0, r0, r2, lsr #24
   1183c:	003dcd0c 	eorseq	ip, sp, ip, lsl #26
   11840:	0f460600 	svceq	0x00460600
   11844:	00000603 	andeq	r0, r0, r3, lsl #12
   11848:	3d640c00 	stclcc	12, cr0, [r4, #-0]
   1184c:	47060000 	strmi	r0, [r6, -r0]
   11850:	0006030f 	andeq	r0, r6, pc, lsl #6
   11854:	870c0400 	strhi	r0, [ip, -r0, lsl #8]
   11858:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   1185c:	06030f48 	streq	r0, [r3], -r8, asr #30
   11860:	0c080000 	stceq	0, cr0, [r8], {-0}
   11864:	00003fa9 	andeq	r3, r0, r9, lsr #31
   11868:	030f4906 	movweq	r4, #63750	; 0xf906
   1186c:	0c000006 	stceq	0, cr0, [r0], {6}
   11870:	003e620c 	eorseq	r6, lr, ip, lsl #4
   11874:	0f4a0600 	svceq	0x004a0600
   11878:	00000603 	andeq	r0, r0, r3, lsl #12
   1187c:	3ec90c10 	mcrcc	12, 6, r0, cr9, cr0, {0}
   11880:	4b060000 	blmi	191888 <__ccfg+0x1718e0>
   11884:	0006030f 	andeq	r0, r6, pc, lsl #6
   11888:	a80c1400 	stmdage	ip, {sl, ip}
   1188c:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11890:	06030f4c 	streq	r0, [r3], -ip, asr #30
   11894:	0c180000 	ldceq	0, cr0, [r8], {-0}
   11898:	0000410d 	andeq	r4, r0, sp, lsl #2
   1189c:	030f4d06 	movweq	r4, #64774	; 0xfd06
   118a0:	1c000006 	stcne	0, cr0, [r0], {6}
   118a4:	0041110c 	subeq	r1, r1, ip, lsl #2
   118a8:	0f4e0600 	svceq	0x004e0600
   118ac:	00000603 	andeq	r0, r0, r3, lsl #12
   118b0:	3e790c20 	cdpcc	12, 7, cr0, cr9, cr0, {1}
   118b4:	4f060000 	svcmi	0x00060000
   118b8:	0006030f 	andeq	r0, r6, pc, lsl #6
   118bc:	0c0c2400 	cfstrseq	mvf2, [ip], {-0}
   118c0:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   118c4:	06030f50 			; <UNDEFINED> instruction: 0x06030f50
   118c8:	0c280000 	stceq	0, cr0, [r8], #-0
   118cc:	00003f1f 	andeq	r3, r0, pc, lsl pc
   118d0:	030f5106 	movweq	r5, #61702	; 0xf106
   118d4:	2c000006 	stccs	0, cr0, [r0], {6}
   118d8:	003d930c 	eorseq	r9, sp, ip, lsl #6
   118dc:	0f520600 	svceq	0x00520600
   118e0:	00000603 	andeq	r0, r0, r3, lsl #12
   118e4:	3e560c30 	mrccc	12, 2, r0, cr6, cr0, {1}
   118e8:	53060000 	movwpl	r0, #24576	; 0x6000
   118ec:	0006030f 	andeq	r0, r6, pc, lsl #6
   118f0:	fc0c3400 	stc2	4, cr3, [ip], {-0}
   118f4:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   118f8:	06030f54 			; <UNDEFINED> instruction: 0x06030f54
   118fc:	00380000 	eorseq	r0, r8, r0
   11900:	000b5106 	andeq	r5, fp, r6, lsl #2
   11904:	3fda2100 	svccc	0x00da2100
   11908:	65060000 	strvs	r0, [r6, #-0]
   1190c:	000c2223 	andeq	r2, ip, r3, lsr #4
   11910:	3db10f00 	ldccc	15, cr0, [r1]
   11914:	060c0000 	streq	r0, [ip], -r0
   11918:	0c680867 	stcleq	8, cr0, [r8], #-412	; 0xfffffe64
   1191c:	8b0c0000 	blhi	311924 <__ccfg+0x2f197c>
   11920:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11924:	06030f69 	streq	r0, [r3], -r9, ror #30
   11928:	0c000000 	stceq	0, cr0, [r0], {-0}
   1192c:	00003fad 	andeq	r3, r0, sp, lsr #31
   11930:	030f6a06 	movweq	r6, #64006	; 0xfa06
   11934:	04000006 	streq	r0, [r0], #-6
   11938:	003e660c 	eorseq	r6, lr, ip, lsl #12
   1193c:	0f6b0600 	svceq	0x006b0600
   11940:	00000603 	andeq	r0, r0, r3, lsl #12
   11944:	33060008 	movwcc	r0, #24584	; 0x6008
   11948:	2100000c 	tstcs	r0, ip
   1194c:	00003d52 	andeq	r3, r0, r2, asr sp
   11950:	68227206 	stmdavs	r2!, {r1, r2, r9, ip, sp, lr}
   11954:	0f00000c 	svceq	0x0000000c
   11958:	00003ddd 	ldrdeq	r3, [r0], -sp
   1195c:	087406fc 	ldmdaeq	r4!, {r2, r3, r4, r5, r6, r7, r9, sl}^
   11960:	00000d64 	andeq	r0, r0, r4, ror #26
   11964:	6e6f6d10 	mcrvs	13, 3, r6, cr15, cr0, {0}
   11968:	0f760600 	svceq	0x00760600
   1196c:	00000d69 	andeq	r0, r0, r9, ror #26
   11970:	41260c00 			; <UNDEFINED> instruction: 0x41260c00
   11974:	77060000 	strvc	r0, [r6, -r0]
   11978:	000d690f 	andeq	r6, sp, pc, lsl #18
   1197c:	cb0c3000 	blgt	31d984 <__ccfg+0x2fd9dc>
   11980:	06000002 	streq	r0, [r0], -r2
   11984:	0d790f78 	ldcleq	15, cr0, [r9, #-480]!	; 0xfffffe20
   11988:	0c600000 	stcleq	0, cr0, [r0], #-0
   1198c:	00003fd2 	ldrdeq	r3, [r0], -r2
   11990:	790f7906 	stmdbvc	pc, {r1, r2, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
   11994:	7c00000d 	stcvc	0, cr0, [r0], {13}
   11998:	003e6f0c 	eorseq	r6, lr, ip, lsl #30
   1199c:	0f7a0600 	svceq	0x007a0600
   119a0:	00000603 	andeq	r0, r0, r3, lsl #12
   119a4:	3ef80c98 	mrccc	12, 7, r0, cr8, cr8, {4}
   119a8:	7b060000 	blvc	1919b0 <__ccfg+0x171a08>
   119ac:	0006030f 	andeq	r0, r6, pc, lsl #6
   119b0:	990c9c00 	stmdbls	ip, {sl, fp, ip, pc}
   119b4:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   119b8:	06030f7c 			; <UNDEFINED> instruction: 0x06030f7c
   119bc:	0ca00000 	stceq	0, cr0, [r0]
   119c0:	00003e02 	andeq	r3, r0, r2, lsl #28
   119c4:	890f7d06 	stmdbhi	pc, {r1, r2, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
   119c8:	a400000d 	strge	r0, [r0], #-13
   119cc:	003e9f0c 	eorseq	r9, lr, ip, lsl #30
   119d0:	0f7e0600 	svceq	0x007e0600
   119d4:	00000603 	andeq	r0, r0, r3, lsl #12
   119d8:	41220cac 	smulwbmi	r2, ip, ip
   119dc:	7f060000 	svcvc	0x00060000
   119e0:	000d690f 	andeq	r6, sp, pc, lsl #18
   119e4:	6b0cb000 	blvs	33d9ec <__ccfg+0x31da44>
   119e8:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   119ec:	06030f80 	streq	r0, [r3], -r0, lsl #31
   119f0:	0ce00000 	stcleq	0, cr0, [r0]
   119f4:	00003fbb 			; <UNDEFINED> instruction: 0x00003fbb
   119f8:	030f8106 	movweq	r8, #61702	; 0xf106
   119fc:	e4000006 	str	r0, [r0], #-6
   11a00:	61726510 	cmnvs	r2, r0, lsl r5
   11a04:	0f820600 	svceq	0x00820600
   11a08:	00000603 	andeq	r0, r0, r3, lsl #12
   11a0c:	3f830ce8 	svccc	0x00830ce8
   11a10:	83060000 	movwhi	r0, #24576	; 0x6000
   11a14:	0006030f 	andeq	r0, r6, pc, lsl #6
   11a18:	080cec00 	stmdaeq	ip, {sl, fp, sp, lr, pc}
   11a1c:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11a20:	06030f84 	streq	r0, [r3], -r4, lsl #31
   11a24:	0cf00000 	ldcleq	0, cr0, [r0]
   11a28:	00003f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
   11a2c:	030f8506 	movweq	r8, #62726	; 0xf506
   11a30:	f4000006 	vst4.8	{d0-d3}, [r0], r6
   11a34:	003de70c 	eorseq	lr, sp, ip, lsl #14
   11a38:	0f860600 	svceq	0x00860600
   11a3c:	00000603 	andeq	r0, r0, r3, lsl #12
   11a40:	790600f8 	stmdbvc	r6, {r3, r4, r5, r6, r7}
   11a44:	0900000c 	stmdbeq	r0, {r2, r3}
   11a48:	00000603 	andeq	r0, r0, r3, lsl #12
   11a4c:	00000d79 	andeq	r0, r0, r9, ror sp
   11a50:	0000380a 	andeq	r3, r0, sl, lsl #16
   11a54:	09000b00 	stmdbeq	r0, {r8, r9, fp}
   11a58:	00000603 	andeq	r0, r0, r3, lsl #12
   11a5c:	00000d89 	andeq	r0, r0, r9, lsl #27
   11a60:	0000380a 	andeq	r3, r0, sl, lsl #16
   11a64:	09000600 	stmdbeq	r0, {r9, sl}
   11a68:	00000603 	andeq	r0, r0, r3, lsl #12
   11a6c:	00000d99 	muleq	r0, r9, sp
   11a70:	0000380a 	andeq	r3, r0, sl, lsl #16
   11a74:	21000100 	mrscs	r0, (UNDEF: 16)
   11a78:	00003dbe 			; <UNDEFINED> instruction: 0x00003dbe
   11a7c:	641f9a06 	ldrvs	r9, [pc], #-2566	; 11a84 <__exidx_end+0xcb54>
   11a80:	0f00000d 	svceq	0x0000000d
   11a84:	00003fc4 	andeq	r3, r0, r4, asr #31
   11a88:	089c0610 	ldmeq	ip, {r4, r9, sl}
   11a8c:	00000de7 	andeq	r0, r0, r7, ror #27
   11a90:	003f7b0c 	eorseq	r7, pc, ip, lsl #22
   11a94:	0f9e0600 	svceq	0x009e0600
   11a98:	00000603 	andeq	r0, r0, r3, lsl #12
   11a9c:	3ef10c00 	cdpcc	12, 15, cr0, cr1, cr0, {0}
   11aa0:	9f060000 	svcls	0x00060000
   11aa4:	0006030f 	andeq	r0, r6, pc, lsl #6
   11aa8:	740c0400 	strvc	r0, [ip], #-1024	; 0xfffffc00
   11aac:	0600003f 			; <UNDEFINED> instruction: 0x0600003f
   11ab0:	06030fa0 	streq	r0, [r3], -r0, lsr #31
   11ab4:	0c080000 	stceq	0, cr0, [r8], {-0}
   11ab8:	00003e14 	andeq	r3, r0, r4, lsl lr
   11abc:	030fa106 	movweq	sl, #61702	; 0xf106
   11ac0:	0c000006 	stceq	0, cr0, [r0], {6}
   11ac4:	0da50600 	stceq	6, cr0, [r5]
   11ac8:	3f210000 	svccc	0x00210000
   11acc:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
   11ad0:	0de723aa 	stcleq	3, cr2, [r7, #680]!	; 0x2a8
   11ad4:	d3090000 	movwle	r0, #36864	; 0x9000
   11ad8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
   11adc:	0a00000e 	beq	11b1c <__exidx_end+0xcbec>
   11ae0:	00000038 	andeq	r0, r0, r8, lsr r0
   11ae4:	00380a06 	eorseq	r0, r8, r6, lsl #20
   11ae8:	001f0000 	andseq	r0, pc, r0
   11aec:	00002515 	andeq	r2, r0, r5, lsl r5
   11af0:	000e2c00 	andeq	r2, lr, r0, lsl #24
   11af4:	04791600 	ldrbteq	r1, [r9], #-1536	; 0xfffffa00
   11af8:	cd160000 	ldcgt	0, cr0, [r6, #-0]
   11afc:	16000005 	strne	r0, [r0], -r5
   11b00:	0000003f 	andeq	r0, r0, pc, lsr r0
   11b04:	000e2c16 	andeq	r2, lr, r6, lsl ip
   11b08:	04110000 	ldreq	r0, [r1], #-0
   11b0c:	000009c6 	andeq	r0, r0, r6, asr #19
   11b10:	0e0e0411 	cfmvdlreq	mvd14, r0
   11b14:	25150000 	ldrcs	r0, [r5, #-0]
   11b18:	5b000000 	blpl	11b20 <__exidx_end+0xcbf0>
   11b1c:	1600000e 	strne	r0, [r0], -lr
   11b20:	00000479 	andeq	r0, r0, r9, ror r4
   11b24:	000e5b16 	andeq	r5, lr, r6, lsl fp
   11b28:	06031600 	streq	r1, [r3], -r0, lsl #12
   11b2c:	2c160000 	ldccs	0, cr0, [r6], {-0}
   11b30:	16000000 	strne	r0, [r0], -r0
   11b34:	00000e2c 	andeq	r0, r0, ip, lsr #28
   11b38:	3f041100 	svccc	0x00041100
   11b3c:	11000000 	mrsne	r0, (UNDEF: 0)
   11b40:	000e3804 	andeq	r3, lr, r4, lsl #16
   11b44:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   11b48:	0e770000 	cdpeq	0, 7, cr0, cr7, cr0, {0}
   11b4c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11b50:	01000000 	mrseq	r0, (UNDEF: 0)
   11b54:	05d30900 	ldrbeq	r0, [r3, #2304]	; 0x900
   11b58:	0e870000 	cdpeq	0, 8, cr0, cr7, cr0, {0}
   11b5c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
   11b60:	1f000000 	svcne	0x00000000
   11b64:	11a12200 			; <UNDEFINED> instruction: 0x11a12200
   11b68:	1f0a0000 	svcne	0x000a0000
   11b6c:	00011709 	andeq	r1, r1, r9, lsl #14
   11b70:	003ff000 	eorseq	pc, pc, r0
   11b74:	0000aa00 	andeq	sl, r0, r0, lsl #20
   11b78:	289c0100 	ldmcs	ip, {r8}
   11b7c:	2300000f 	movwcs	r0, #15
   11b80:	00003d7e 	andeq	r3, r0, lr, ror sp
   11b84:	191a3101 	ldmdbne	sl, {r0, r8, ip, sp}
   11b88:	01000001 	tsteq	r0, r1
   11b8c:	411d2450 	tstmi	sp, r0, asr r4
   11b90:	32010000 	andcc	r0, r1, #0
   11b94:	0009b419 	andeq	fp, r9, r9, lsl r4
   11b98:	00525c00 	subseq	r5, r2, r0, lsl #24
   11b9c:	00525000 	subseq	r5, r2, r0
   11ba0:	41082400 	tstmi	r8, r0, lsl #8
   11ba4:	33010000 	movwcc	r0, #4096	; 0x1000
   11ba8:	00002c09 	andeq	r2, r0, r9, lsl #24
   11bac:	0052d700 	subseq	sp, r2, r0, lsl #14
   11bb0:	0052af00 	subseq	sl, r2, r0, lsl #30
   11bb4:	73642500 	cmnvc	r4, #0, 10
   11bb8:	42010074 	andmi	r0, r1, #116	; 0x74
   11bbc:	0005cd09 	andeq	ip, r5, r9, lsl #26
   11bc0:	00541600 	subseq	r1, r4, r0, lsl #12
   11bc4:	00540600 	subseq	r0, r4, r0, lsl #12
   11bc8:	72732500 	rsbsvc	r2, r3, #0, 10
   11bcc:	43010063 	movwmi	r0, #4195	; 0x1063
   11bd0:	0006030f 	andeq	r0, r6, pc, lsl #6
   11bd4:	00549900 	subseq	r9, r4, r0, lsl #18
   11bd8:	00548900 	subseq	r8, r4, r0, lsl #18
   11bdc:	3d832600 	stccc	6, cr2, [r3]
   11be0:	44010000 	strmi	r0, [r1], #-0
   11be4:	000f2809 	andeq	r2, pc, r9, lsl #16
   11be8:	00552a00 	subseq	r2, r5, r0, lsl #20
   11bec:	00551200 	subseq	r1, r5, r0, lsl #4
   11bf0:	40082600 	andmi	r2, r8, r0, lsl #12
   11bf4:	45010000 	strmi	r0, [r1, #-0]
   11bf8:	000f2e0f 	andeq	r2, pc, pc, lsl #28
   11bfc:	00562100 	subseq	r2, r6, r0, lsl #2
   11c00:	00560900 	subseq	r0, r6, r0, lsl #18
   11c04:	04110000 	ldreq	r0, [r1], #-0
   11c08:	00000083 	andeq	r0, r0, r3, lsl #1
   11c0c:	008a0411 	addeq	r0, sl, r1, lsl r4
   11c10:	76000000 	strvc	r0, [r0], -r0
   11c14:	04000009 	streq	r0, [r0], #-9
   11c18:	00419f00 	subeq	r9, r1, r0, lsl #30
   11c1c:	14010400 	strne	r0, [r1], #-1024	; 0xfffffc00
   11c20:	0c000040 	stceq	0, cr0, [r0], {64}	; 0x40
   11c24:	0000412c 	andeq	r4, r0, ip, lsr #2
   11c28:	00004161 	andeq	r4, r0, r1, ror #2
   11c2c:	0000409c 	muleq	r0, ip, r0
   11c30:	0000004c 	andeq	r0, r0, ip, asr #32
   11c34:	0000868c 	andeq	r8, r0, ip, lsl #13
   11c38:	9c070402 	cfstrsls	mvf0, [r7], {2}
   11c3c:	03000003 	movweq	r0, #3
   11c40:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   11c44:	08020074 	stmdaeq	r2, {r2, r4, r5, r6}
   11c48:	0005e805 	andeq	lr, r5, r5, lsl #16
   11c4c:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   11c50:	00003ee5 	andeq	r3, r0, r5, ror #29
   11c54:	00089604 	andeq	r9, r8, r4, lsl #12
   11c58:	01650200 	cmneq	r5, r0, lsl #4
   11c5c:	00002517 	andeq	r2, r0, r7, lsl r5
   11c60:	06010200 	streq	r0, [r1], -r0, lsl #4
   11c64:	000008de 	ldrdeq	r0, [r0], -lr
   11c68:	dc080102 	stfles	f0, [r8], {2}
   11c6c:	02000008 	andeq	r0, r0, #8
   11c70:	07a30502 	streq	r0, [r3, r2, lsl #10]!
   11c74:	02020000 	andeq	r0, r2, #0
   11c78:	0009aa07 	andeq	sl, r9, r7, lsl #20
   11c7c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   11c80:	000005ed 	andeq	r0, r0, sp, ror #11
   11c84:	97070402 	strls	r0, [r7, -r2, lsl #8]
   11c88:	02000003 	andeq	r0, r0, #3
   11c8c:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
   11c90:	e6050000 	str	r0, [r5], -r0
   11c94:	03000009 	movweq	r0, #9
   11c98:	006a0e2e 	rsbeq	r0, sl, lr, lsr #28
   11c9c:	6b050000 	blvs	151ca4 <__ccfg+0x131cfc>
   11ca0:	03000002 	movweq	r0, #2
   11ca4:	006a0e74 	rsbeq	r0, sl, r4, ror lr
   11ca8:	04060000 	streq	r0, [r6], #-0
   11cac:	b903a503 	stmdblt	r3, {r0, r1, r8, sl, sp, pc}
   11cb0:	07000000 	streq	r0, [r0, -r0]
   11cb4:	0000058b 	andeq	r0, r0, fp, lsl #11
   11cb8:	410ca703 	tstmi	ip, r3, lsl #14
   11cbc:	07000000 	streq	r0, [r0, -r0]
   11cc0:	000007ea 	andeq	r0, r0, sl, ror #15
   11cc4:	b913a803 	ldmdblt	r3, {r0, r1, fp, sp, pc}
   11cc8:	00000000 	andeq	r0, r0, r0
   11ccc:	00005508 	andeq	r5, r0, r8, lsl #10
   11cd0:	0000c900 	andeq	ip, r0, r0, lsl #18
   11cd4:	00250900 	eoreq	r0, r5, r0, lsl #18
   11cd8:	00030000 	andeq	r0, r3, r0
   11cdc:	a203080a 	andge	r0, r3, #655360	; 0xa0000
   11ce0:	0000ed09 	andeq	lr, r0, r9, lsl #26
   11ce4:	03260b00 			; <UNDEFINED> instruction: 0x03260b00
   11ce8:	a4030000 	strge	r0, [r3], #-0
   11cec:	00002c07 	andeq	r2, r0, r7, lsl #24
   11cf0:	ae0b0000 	cdpge	0, 0, cr0, cr11, cr0, {0}
   11cf4:	03000004 	movweq	r0, #4
   11cf8:	009705a9 	addseq	r0, r7, r9, lsr #11
   11cfc:	00040000 	andeq	r0, r4, r0
   11d00:	0006a905 	andeq	sl, r6, r5, lsl #18
   11d04:	03aa0300 			; <UNDEFINED> instruction: 0x03aa0300
   11d08:	000000c9 	andeq	r0, r0, r9, asr #1
   11d0c:	2d05040c 	cfstrscs	mvf0, [r5, #-48]	; 0xffffffd0
   11d10:	04000006 	streq	r0, [r0], #-6
   11d14:	00711916 	rsbseq	r1, r1, r6, lsl r9
   11d18:	fe050000 	cdp2	0, 0, cr0, cr5, cr0, {0}
   11d1c:	05000001 	streq	r0, [r0, #-1]
   11d20:	002c0d0c 	eoreq	r0, ip, ip, lsl #26
   11d24:	59050000 	stmdbpl	r5, {}	; <UNPREDICTABLE>
   11d28:	04000005 	streq	r0, [r0], #-5
   11d2c:	01071b23 	tsteq	r7, r3, lsr #22
   11d30:	ab0d0000 	blge	351d38 <__ccfg+0x331d90>
   11d34:	18000002 	stmdane	r0, {r1}
   11d38:	79083404 	stmdbvc	r8, {r2, sl, ip, sp}
   11d3c:	0b000001 	bleq	11d48 <__exidx_end+0xce18>
   11d40:	00000a40 	andeq	r0, r0, r0, asr #20
   11d44:	79133604 	ldmdbvc	r3, {r2, r9, sl, ip, sp}
   11d48:	00000001 	andeq	r0, r0, r1
   11d4c:	006b5f0e 	rsbeq	r5, fp, lr, lsl #30
   11d50:	2c073704 	stccs	7, cr3, [r7], {4}
   11d54:	04000000 	streq	r0, [r0], #-0
   11d58:	0008450b 	andeq	r4, r8, fp, lsl #10
   11d5c:	0b370400 	bleq	dd2d64 <__ccfg+0xdb2dbc>
   11d60:	0000002c 	andeq	r0, r0, ip, lsr #32
   11d64:	3eb00b08 	vmovcc.f64	d0, #8	; 0x40400000  3.0
   11d68:	37040000 	strcc	r0, [r4, -r0]
   11d6c:	00002c14 	andeq	r2, r0, r4, lsl ip
   11d70:	be0b0c00 	cdplt	12, 0, cr0, cr11, cr0, {0}
   11d74:	04000003 	streq	r0, [r0], #-3
   11d78:	002c1b37 	eoreq	r1, ip, r7, lsr fp
   11d7c:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
   11d80:	0400785f 	streq	r7, [r0], #-2143	; 0xfffff7a1
   11d84:	017f0b38 	cmneq	pc, r8, lsr fp	; <UNPREDICTABLE>
   11d88:	00140000 	andseq	r0, r4, r0
   11d8c:	011f040f 	tsteq	pc, pc, lsl #8
   11d90:	fb080000 	blx	211d9a <__ccfg+0x1f1df2>
   11d94:	8f000000 	svchi	0x00000000
   11d98:	09000001 	stmdbeq	r0, {r0}
   11d9c:	00000025 	andeq	r0, r0, r5, lsr #32
   11da0:	600d0000 	andvs	r0, sp, r0
   11da4:	24000008 	strcs	r0, [r0], #-8
   11da8:	12083c04 	andne	r3, r8, #4, 24	; 0x400
   11dac:	0b000002 	bleq	11dbc <__exidx_end+0xce8c>
   11db0:	0000044e 	andeq	r0, r0, lr, asr #8
   11db4:	2c093e04 	stccs	14, cr3, [r9], {4}
   11db8:	00000000 	andeq	r0, r0, r0
   11dbc:	0003580b 	andeq	r5, r3, fp, lsl #16
   11dc0:	093f0400 	ldmdbeq	pc!, {sl}	; <UNPREDICTABLE>
   11dc4:	0000002c 	andeq	r0, r0, ip, lsr #32
   11dc8:	03010b04 	movweq	r0, #6916	; 0x1b04
   11dcc:	40040000 	andmi	r0, r4, r0
   11dd0:	00002c09 	andeq	r2, r0, r9, lsl #24
   11dd4:	0f0b0800 	svceq	0x000b0800
   11dd8:	04000005 	streq	r0, [r0], #-5
   11ddc:	002c0941 	eoreq	r0, ip, r1, asr #18
   11de0:	0b0c0000 	bleq	311de8 <__ccfg+0x2f1e40>
   11de4:	0000071d 	andeq	r0, r0, sp, lsl r7
   11de8:	2c094204 	sfmcs	f4, 4, [r9], {4}
   11dec:	10000000 	andne	r0, r0, r0
   11df0:	0008040b 	andeq	r0, r8, fp, lsl #8
   11df4:	09430400 	stmdbeq	r3, {sl}^
   11df8:	0000002c 	andeq	r0, r0, ip, lsr #32
   11dfc:	02c60b14 	sbceq	r0, r6, #20, 22	; 0x5000
   11e00:	44040000 	strmi	r0, [r4], #-0
   11e04:	00002c09 	andeq	r2, r0, r9, lsl #24
   11e08:	570b1800 	strpl	r1, [fp, -r0, lsl #16]
   11e0c:	04000004 	streq	r0, [r0], #-4
   11e10:	002c0945 	eoreq	r0, ip, r5, asr #18
   11e14:	0b1c0000 	bleq	711e1c <__ccfg+0x6f1e74>
   11e18:	000006c7 	andeq	r0, r0, r7, asr #13
   11e1c:	2c094604 	stccs	6, cr4, [r9], {4}
   11e20:	20000000 	andcs	r0, r0, r0
   11e24:	00611000 	rsbeq	r1, r1, r0
   11e28:	01080000 	mrseq	r0, (UNDEF: 8)
   11e2c:	57084f04 	strpl	r4, [r8, -r4, lsl #30]
   11e30:	0b000002 	bleq	11e40 <__exidx_end+0xcf10>
   11e34:	00000974 	andeq	r0, r0, r4, ror r9
   11e38:	570a5004 	strpl	r5, [sl, -r4]
   11e3c:	00000002 	andeq	r0, r0, r2
   11e40:	0008c00b 	andeq	ip, r8, fp
   11e44:	09510400 	ldmdbeq	r1, {sl}^
   11e48:	00000257 	andeq	r0, r0, r7, asr r2
   11e4c:	09dd1180 	ldmibeq	sp, {r7, r8, ip}^
   11e50:	53040000 	movwpl	r0, #16384	; 0x4000
   11e54:	0000fb0a 	andeq	pc, r0, sl, lsl #22
   11e58:	11010000 	mrsne	r0, (UNDEF: 1)
   11e5c:	00000a2b 	andeq	r0, r0, fp, lsr #20
   11e60:	fb0a5604 	blx	2a767a <__ccfg+0x2876d2>
   11e64:	04000000 	streq	r0, [r0], #-0
   11e68:	f9080001 			; <UNDEFINED> instruction: 0xf9080001
   11e6c:	67000000 	strvs	r0, [r0, -r0]
   11e70:	09000002 	stmdbeq	r0, {r1}
   11e74:	00000025 	andeq	r0, r0, r5, lsr #32
   11e78:	8a10001f 	bhi	411efc <__ccfg+0x3f1f54>
   11e7c:	90000007 	andls	r0, r0, r7
   11e80:	08620401 	stmdaeq	r2!, {r0, sl}^
   11e84:	000002aa 	andeq	r0, r0, sl, lsr #5
   11e88:	000a400b 	andeq	r4, sl, fp
   11e8c:	12630400 	rsbne	r0, r3, #0, 8
   11e90:	000002aa 	andeq	r0, r0, sl, lsr #5
   11e94:	04660b00 	strbteq	r0, [r6], #-2816	; 0xfffff500
   11e98:	64040000 	strvs	r0, [r4], #-0
   11e9c:	00002c06 	andeq	r2, r0, r6, lsl #24
   11ea0:	730b0400 	movwvc	r0, #46080	; 0xb400
   11ea4:	04000002 	streq	r0, [r0], #-2
   11ea8:	02b00966 	adcseq	r0, r0, #1671168	; 0x198000
   11eac:	0b080000 	bleq	211eb4 <__ccfg+0x1f1f0c>
   11eb0:	00000061 	andeq	r0, r0, r1, rrx
   11eb4:	121e6704 	andsne	r6, lr, #4, 14	; 0x100000
   11eb8:	88000002 	stmdahi	r0, {r1}
   11ebc:	67040f00 	strvs	r0, [r4, -r0, lsl #30]
   11ec0:	08000002 	stmdaeq	r0, {r1}
   11ec4:	000002c0 	andeq	r0, r0, r0, asr #5
   11ec8:	000002c0 	andeq	r0, r0, r0, asr #5
   11ecc:	00002509 	andeq	r2, r0, r9, lsl #10
   11ed0:	0f001f00 	svceq	0x00001f00
   11ed4:	0002c604 	andeq	ip, r2, r4, lsl #12
   11ed8:	3e0d1200 	cdpcc	2, 0, cr1, cr13, cr0, {0}
   11edc:	08000009 	stmdaeq	r0, {r0, r3}
   11ee0:	ef087a04 	svc	0x00087a04
   11ee4:	0b000002 	bleq	11ef4 <__exidx_end+0xcfc4>
   11ee8:	00000604 	andeq	r0, r0, r4, lsl #12
   11eec:	ef117b04 	svc	0x00117b04
   11ef0:	00000002 	andeq	r0, r0, r2
   11ef4:	0018cf0b 	andseq	ip, r8, fp, lsl #30
   11ef8:	067c0400 	ldrbteq	r0, [ip], -r0, lsl #8
   11efc:	0000002c 	andeq	r0, r0, ip, lsr #32
   11f00:	040f0004 	streq	r0, [pc], #-4	; 11f08 <__exidx_end+0xcfd8>
   11f04:	00000055 	andeq	r0, r0, r5, asr r0
   11f08:	0003b60d 	andeq	fp, r3, sp, lsl #12
   11f0c:	ba046800 	blt	12bf14 <__ccfg+0x10bf6c>
   11f10:	00043808 	andeq	r3, r4, r8, lsl #16
   11f14:	705f0e00 	subsvc	r0, pc, r0, lsl #28
   11f18:	12bb0400 	adcsne	r0, fp, #0, 8
   11f1c:	000002ef 	andeq	r0, r0, pc, ror #5
   11f20:	725f0e00 	subsvc	r0, pc, #0, 28
   11f24:	07bc0400 	ldreq	r0, [ip, r0, lsl #8]!
   11f28:	0000002c 	andeq	r0, r0, ip, lsr #32
   11f2c:	775f0e04 	ldrbvc	r0, [pc, -r4, lsl #28]
   11f30:	07bd0400 	ldreq	r0, [sp, r0, lsl #8]!
   11f34:	0000002c 	andeq	r0, r0, ip, lsr #32
   11f38:	01e90b08 	mvneq	r0, r8, lsl #22
   11f3c:	be040000 	cdplt	0, 0, cr0, cr4, cr0, {0}
   11f40:	00005c09 	andeq	r5, r0, r9, lsl #24
   11f44:	620b0c00 	andvs	r0, fp, #0, 24
   11f48:	04000006 	streq	r0, [r0], #-6
   11f4c:	005c09bf 	ldrheq	r0, [ip], #-159	; 0xffffff61
   11f50:	0e0e0000 	cdpeq	0, 0, cr0, cr14, cr0, {0}
   11f54:	0066625f 	rsbeq	r6, r6, pc, asr r2
   11f58:	c711c004 	ldrgt	ip, [r1, -r4]
   11f5c:	10000002 	andne	r0, r0, r2
   11f60:	0001e00b 	andeq	lr, r1, fp
   11f64:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
   11f68:	0000002c 	andeq	r0, r0, ip, lsr #32
   11f6c:	02780b18 	rsbseq	r0, r8, #24, 22	; 0x6000
   11f70:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
   11f74:	0000f90a 	andeq	pc, r0, sl, lsl #18
   11f78:	5f0b1c00 	svcpl	0x000b1c00
   11f7c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   11f80:	05bc1dca 	ldreq	r1, [ip, #3530]!	; 0xdca
   11f84:	0b200000 	bleq	811f8c <__ccfg+0x7f1fe4>
   11f88:	00001826 	andeq	r1, r0, r6, lsr #16
   11f8c:	e61dcc04 	ldr	ip, [sp], -r4, lsl #24
   11f90:	24000005 	strcs	r0, [r0], #-5
   11f94:	000a510b 	andeq	r5, sl, fp, lsl #2
   11f98:	0dcf0400 	cfstrdeq	mvd0, [pc]	; 11fa0 <__exidx_end+0xd070>
   11f9c:	0000060a 	andeq	r0, r0, sl, lsl #12
   11fa0:	18140b28 	ldmdane	r4, {r3, r5, r8, r9, fp}
   11fa4:	d0040000 	andle	r0, r4, r0
   11fa8:	00062409 	andeq	r2, r6, r9, lsl #8
   11fac:	5f0e2c00 	svcpl	0x000e2c00
   11fb0:	04006275 	streq	r6, [r0], #-629	; 0xfffffd8b
   11fb4:	02c711d3 	sbceq	r1, r7, #-1073741772	; 0xc0000034
   11fb8:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
   11fbc:	0070755f 	rsbseq	r7, r0, pc, asr r5
   11fc0:	ef12d404 	svc	0x0012d404
   11fc4:	38000002 	stmdacc	r0, {r1}
   11fc8:	72755f0e 	rsbsvc	r5, r5, #14, 30	; 0x38
   11fcc:	07d50400 	ldrbeq	r0, [r5, r0, lsl #8]
   11fd0:	0000002c 	andeq	r0, r0, ip, lsr #32
   11fd4:	0a680b3c 	beq	1a14ccc <__ccfg+0x19f4d24>
   11fd8:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
   11fdc:	00062a11 	andeq	r2, r6, r1, lsl sl
   11fe0:	f70b4000 			; <UNDEFINED> instruction: 0xf70b4000
   11fe4:	04000009 	streq	r0, [r0], #-9
   11fe8:	063a11d9 			; <UNDEFINED> instruction: 0x063a11d9
   11fec:	0e430000 	cdpeq	0, 4, cr0, cr3, cr0, {0}
   11ff0:	00626c5f 	rsbeq	r6, r2, pc, asr ip
   11ff4:	c711dc04 	ldrgt	sp, [r1, -r4, lsl #24]
   11ff8:	44000002 	strmi	r0, [r0], #-2
   11ffc:	0008570b 	andeq	r5, r8, fp, lsl #14
   12000:	07df0400 	ldrbeq	r0, [pc, r0, lsl #8]
   12004:	0000002c 	andeq	r0, r0, ip, lsr #32
   12008:	04030b4c 	streq	r0, [r3], #-2892	; 0xfffff4b4
   1200c:	e0040000 	and	r0, r4, r0
   12010:	00007f0a 	andeq	r7, r0, sl, lsl #30
   12014:	2e0b5000 	cdpcs	0, 0, cr5, cr11, cr0, {0}
   12018:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   1201c:	045612e3 	ldrbeq	r1, [r6], #-739	; 0xfffffd1d
   12020:	0b540000 	bleq	1512028 <__ccfg+0x14f2080>
   12024:	0000086f 	andeq	r0, r0, pc, ror #16
   12028:	130ce704 	movwne	lr, #50948	; 0xc704
   1202c:	58000001 	stmdapl	r0, {r0}
   12030:	0007920b 	andeq	r9, r7, fp, lsl #4
   12034:	0ee90400 	cdpeq	4, 14, cr0, cr9, cr0, {0}
   12038:	000000ed 	andeq	r0, r0, sp, ror #1
   1203c:	0a230b5c 	beq	8d4db4 <__ccfg+0x8b4e0c>
   12040:	ea040000 	b	112048 <__ccfg+0xf20a0>
   12044:	00002c09 	andeq	r2, r0, r9, lsl #24
   12048:	13006400 	movwne	r6, #1024	; 0x400
   1204c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12050:	00000456 	andeq	r0, r0, r6, asr r4
   12054:	00045614 	andeq	r5, r4, r4, lsl r6
   12058:	00f91400 	rscseq	r1, r9, r0, lsl #8
   1205c:	aa140000 	bge	512064 <__ccfg+0x4f20bc>
   12060:	14000005 	strne	r0, [r0], #-5
   12064:	0000002c 	andeq	r0, r0, ip, lsr #32
   12068:	61040f00 	tstvs	r4, r0, lsl #30
   1206c:	15000004 	strne	r0, [r0, #-4]
   12070:	00000456 	andeq	r0, r0, r6, asr r4
   12074:	00436c16 	subeq	r6, r3, r6, lsl ip
   12078:	04042800 	streq	r2, [r4], #-2048	; 0xfffff800
   1207c:	aa080265 	bge	212a18 <__ccfg+0x1f2a70>
   12080:	17000005 	strne	r0, [r0, -r5]
   12084:	000006f8 	strdeq	r0, [r0], -r8
   12088:	07026704 	streq	r6, [r2, -r4, lsl #14]
   1208c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12090:	05d21700 	ldrbeq	r1, [r2, #1792]	; 0x700
   12094:	6c040000 	stcvs	0, cr0, [r4], {-0}
   12098:	06960b02 	ldreq	r0, [r6], r2, lsl #22
   1209c:	17040000 	strne	r0, [r4, -r0]
   120a0:	00000255 	andeq	r0, r0, r5, asr r2
   120a4:	14026c04 	strne	r6, [r2], #-3076	; 0xfffff3fc
   120a8:	00000696 	muleq	r0, r6, r6
   120ac:	0a571708 	beq	15d7cd4 <__ccfg+0x15b7d2c>
   120b0:	6c040000 	stcvs	0, cr0, [r4], {-0}
   120b4:	06961e02 	ldreq	r1, [r6], r2, lsl #28
   120b8:	170c0000 	strne	r0, [ip, -r0]
   120bc:	00000461 	andeq	r0, r0, r1, ror #8
   120c0:	08026e04 	stmdaeq	r2, {r2, r9, sl, fp, sp, lr}
   120c4:	0000002c 	andeq	r0, r0, ip, lsr #32
   120c8:	04131710 	ldreq	r1, [r3], #-1808	; 0xfffff8f0
   120cc:	6f040000 	svcvs	0x00040000
   120d0:	08960802 	ldmeq	r6, {r1, fp}
   120d4:	17140000 	ldrne	r0, [r4, -r0]
   120d8:	00000a0a 	andeq	r0, r0, sl, lsl #20
   120dc:	07027204 	streq	r7, [r2, -r4, lsl #4]
   120e0:	0000002c 	andeq	r0, r0, ip, lsr #32
   120e4:	3d5c1730 	ldclcc	7, cr1, [ip, #-192]	; 0xffffff40
   120e8:	73040000 	movwvc	r0, #16384	; 0x4000
   120ec:	08ab1602 	stmiaeq	fp!, {r1, r9, sl, ip}
   120f0:	17340000 	ldrne	r0, [r4, -r0]!
   120f4:	000005a5 	andeq	r0, r0, r5, lsr #11
   120f8:	07027504 	streq	r7, [r2, -r4, lsl #10]
   120fc:	0000002c 	andeq	r0, r0, ip, lsr #32
   12100:	069f1738 			; <UNDEFINED> instruction: 0x069f1738
   12104:	77040000 	strvc	r0, [r4, -r0]
   12108:	08bc0a02 	ldmeq	ip!, {r1, r9, fp}
   1210c:	173c0000 	ldrne	r0, [ip, -r0]!
   12110:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12114:	13027a04 	movwne	r7, #10756	; 0x2a04
   12118:	00000179 	andeq	r0, r0, r9, ror r1
   1211c:	037c1740 	cmneq	ip, #64, 14	; 0x1000000
   12120:	7b040000 	blvc	112128 <__ccfg+0xf2180>
   12124:	002c0702 	eoreq	r0, ip, r2, lsl #14
   12128:	17440000 	strbne	r0, [r4, -r0]
   1212c:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
   12130:	13027c04 	movwne	r7, #11268	; 0x2c04
   12134:	00000179 	andeq	r0, r0, r9, ror r1
   12138:	060a1748 	streq	r1, [sl], -r8, asr #14
   1213c:	7d040000 	stcvc	0, cr0, [r4, #-0]
   12140:	08c21402 	stmiaeq	r2, {r1, sl, ip}^
   12144:	174c0000 	strbne	r0, [ip, -r0]
   12148:	0000083d 	andeq	r0, r0, sp, lsr r8
   1214c:	07028004 	streq	r8, [r2, -r4]
   12150:	0000002c 	andeq	r0, r0, ip, lsr #32
   12154:	08d41750 	ldmeq	r4, {r4, r6, r8, r9, sl, ip}^
   12158:	81040000 	mrshi	r0, (UNDEF: 4)
   1215c:	05aa0902 	streq	r0, [sl, #2306]!	; 0x902
   12160:	17540000 	ldrbne	r0, [r4, -r0]
   12164:	000008ee 	andeq	r0, r0, lr, ror #17
   12168:	0702a404 	streq	sl, [r2, -r4, lsl #8]
   1216c:	00000871 	andeq	r0, r0, r1, ror r8
   12170:	078a1858 			; <UNDEFINED> instruction: 0x078a1858
   12174:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   12178:	02aa1302 	adceq	r1, sl, #134217728	; 0x8000000
   1217c:	01480000 	mrseq	r0, (UNDEF: 72)
   12180:	00053218 	andeq	r3, r5, r8, lsl r2
   12184:	02a90400 	adceq	r0, r9, #0, 8
   12188:	00026712 	andeq	r6, r2, r2, lsl r7
   1218c:	18014c00 	stmdane	r1, {sl, fp, lr}
   12190:	00000519 	andeq	r0, r0, r9, lsl r5
   12194:	0c02ad04 	stceq	13, cr10, [r2], {4}
   12198:	000008d3 	ldrdeq	r0, [r0], -r3
   1219c:	511802dc 			; <UNDEFINED> instruction: 0x511802dc
   121a0:	04000009 	streq	r0, [r0], #-9
   121a4:	571002b2 			; <UNDEFINED> instruction: 0x571002b2
   121a8:	e0000006 	and	r0, r0, r6
   121ac:	07cb1802 	strbeq	r1, [fp, r2, lsl #16]
   121b0:	b4040000 	strlt	r0, [r4], #-0
   121b4:	08df0a02 	ldmeq	pc, {r1, r9, fp}^	; <UNPREDICTABLE>
   121b8:	02ec0000 	rsceq	r0, ip, #0
   121bc:	b0040f00 	andlt	r0, r4, r0, lsl #30
   121c0:	02000005 	andeq	r0, r0, #5
   121c4:	08e50801 	stmiaeq	r5!, {r0, fp}^
   121c8:	b0150000 	andslt	r0, r5, r0
   121cc:	0f000005 	svceq	0x00000005
   121d0:	00043804 	andeq	r3, r4, r4, lsl #16
   121d4:	002c1300 	eoreq	r1, ip, r0, lsl #6
   121d8:	05e00000 	strbeq	r0, [r0, #0]!
   121dc:	56140000 	ldrpl	r0, [r4], -r0
   121e0:	14000004 	strne	r0, [r0], #-4
   121e4:	000000f9 	strdeq	r0, [r0], -r9
   121e8:	0005e014 	andeq	lr, r5, r4, lsl r0
   121ec:	002c1400 	eoreq	r1, ip, r0, lsl #8
   121f0:	0f000000 	svceq	0x00000000
   121f4:	0005b704 	andeq	fp, r5, r4, lsl #14
   121f8:	c2040f00 	andgt	r0, r4, #0, 30
   121fc:	13000005 	movwne	r0, #5
   12200:	0000008b 	andeq	r0, r0, fp, lsl #1
   12204:	0000060a 	andeq	r0, r0, sl, lsl #12
   12208:	00045614 	andeq	r5, r4, r4, lsl r6
   1220c:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12210:	8b140000 	blhi	512218 <__ccfg+0x4f2270>
   12214:	14000000 	strne	r0, [r0], #-0
   12218:	0000002c 	andeq	r0, r0, ip, lsr #32
   1221c:	ec040f00 	stc	15, cr0, [r4], {-0}
   12220:	13000005 	movwne	r0, #5
   12224:	0000002c 	andeq	r0, r0, ip, lsr #32
   12228:	00000624 	andeq	r0, r0, r4, lsr #12
   1222c:	00045614 	andeq	r5, r4, r4, lsl r6
   12230:	00f91400 	rscseq	r1, r9, r0, lsl #8
   12234:	0f000000 	svceq	0x00000000
   12238:	00061004 	andeq	r1, r6, r4
   1223c:	00550800 	subseq	r0, r5, r0, lsl #16
   12240:	063a0000 	ldrteq	r0, [sl], -r0
   12244:	25090000 	strcs	r0, [r9, #-0]
   12248:	02000000 	andeq	r0, r0, #0
   1224c:	00550800 	subseq	r0, r5, r0, lsl #16
   12250:	064a0000 	strbeq	r0, [sl], -r0
   12254:	25090000 	strcs	r0, [r9, #-0]
   12258:	00000000 	andeq	r0, r0, r0
   1225c:	03f10400 	mvnseq	r0, #0, 8
   12260:	24040000 	strcs	r0, [r4], #-0
   12264:	02f51a01 	rscseq	r1, r5, #4096	; 0x1000
   12268:	82190000 	andshi	r0, r9, #0
   1226c:	0c000043 	stceq	0, cr0, [r0], {67}	; 0x43
   12270:	08012804 	stmdaeq	r1, {r2, fp, sp}
   12274:	00000690 	muleq	r0, r0, r6
   12278:	000a4017 	andeq	r4, sl, r7, lsl r0
   1227c:	012a0400 			; <UNDEFINED> instruction: 0x012a0400
   12280:	00069011 	andeq	r9, r6, r1, lsl r0
   12284:	8f170000 	svchi	0x00170000
   12288:	04000008 	streq	r0, [r0], #-8
   1228c:	2c07012b 	stfcss	f0, [r7], {43}	; 0x2b
   12290:	04000000 	streq	r0, [r0], #-0
   12294:	00059117 	andeq	r9, r5, r7, lsl r1
   12298:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
   1229c:	0006960b 	andeq	r9, r6, fp, lsl #12
   122a0:	0f000800 	svceq	0x00000800
   122a4:	00065704 	andeq	r5, r6, r4, lsl #14
   122a8:	4a040f00 	bmi	115eb0 <__ccfg+0xf5f08>
   122ac:	19000006 	stmdbne	r0, {r1, r2}
   122b0:	00000368 	andeq	r0, r0, r8, ror #6
   122b4:	0144040e 	cmpeq	r4, lr, lsl #8
   122b8:	0006d508 	andeq	sp, r6, r8, lsl #10
   122bc:	11881700 	orrne	r1, r8, r0, lsl #14
   122c0:	45040000 	strmi	r0, [r4, #-0]
   122c4:	06d51201 	ldrbeq	r1, [r5], r1, lsl #4
   122c8:	17000000 	strne	r0, [r0, -r0]
   122cc:	0000061c 	andeq	r0, r0, ip, lsl r6
   122d0:	12014604 	andne	r4, r1, #4, 12	; 0x400000
   122d4:	000006d5 	ldrdeq	r0, [r0], -r5
   122d8:	102d1706 	eorne	r1, sp, r6, lsl #14
   122dc:	47040000 	strmi	r0, [r4, -r0]
   122e0:	00631201 	rsbeq	r1, r3, r1, lsl #4
   122e4:	000c0000 	andeq	r0, ip, r0
   122e8:	00006308 	andeq	r6, r0, r8, lsl #6
   122ec:	0006e500 	andeq	lr, r6, r0, lsl #10
   122f0:	00250900 	eoreq	r0, r5, r0, lsl #18
   122f4:	00020000 	andeq	r0, r2, r0
   122f8:	8504d01a 	strhi	sp, [r4, #-26]	; 0xffffffe6
   122fc:	07fa0702 	ldrbeq	r0, [sl, r2, lsl #14]!
   12300:	fd170000 	ldc2	0, cr0, [r7, #-0]
   12304:	04000009 	streq	r0, [r0], #-9
   12308:	25180287 	ldrcs	r0, [r8, #-647]	; 0xfffffd79
   1230c:	00000000 	andeq	r0, r0, r0
   12310:	00095917 	andeq	r5, r9, r7, lsl r9
   12314:	02880400 	addeq	r0, r8, #0, 8
   12318:	0005aa12 	andeq	sl, r5, r2, lsl sl
   1231c:	a9170400 	ldmdbge	r7, {sl}
   12320:	04000003 	streq	r0, [r0], #-3
   12324:	fa100289 	blx	412d50 <__ccfg+0x3f2da8>
   12328:	08000007 	stmdaeq	r0, {r0, r1, r2}
   1232c:	00081c17 	andeq	r1, r8, r7, lsl ip
   12330:	028a0400 	addeq	r0, sl, #0, 8
   12334:	00018f17 	andeq	r8, r1, r7, lsl pc
   12338:	d9172400 	ldmdble	r7, {sl, sp}
   1233c:	04000005 	streq	r0, [r0], #-5
   12340:	2c0f028b 	sfmcs	f0, 4, [pc], {139}	; 0x8b
   12344:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
   12348:	000a3b17 	andeq	r3, sl, r7, lsl fp
   1234c:	028c0400 	addeq	r0, ip, #0, 8
   12350:	0000782c 	andeq	r7, r0, ip, lsr #16
   12354:	85175000 	ldrhi	r5, [r7, #-0]
   12358:	04000000 	streq	r0, [r0], #-0
   1235c:	9c1a028d 	lfmls	f0, 4, [sl], {141}	; 0x8d
   12360:	58000006 	stmdapl	r0, {r1, r2}
   12364:	0004ee17 	andeq	lr, r4, r7, lsl lr
   12368:	028e0400 	addeq	r0, lr, #0, 8
   1236c:	0000ed16 	andeq	lr, r0, r6, lsl sp
   12370:	66176800 	ldrvs	r6, [r7], -r0, lsl #16
   12374:	04000009 	streq	r0, [r0], #-9
   12378:	ed16028f 	lfm	f0, 4, [r6, #-572]	; 0xfffffdc4
   1237c:	70000000 	andvc	r0, r0, r0
   12380:	00006f17 	andeq	r6, r0, r7, lsl pc
   12384:	02900400 	addseq	r0, r0, #0, 8
   12388:	0000ed16 	andeq	lr, r0, r6, lsl sp
   1238c:	4d177800 	ldcmi	8, cr7, [r7, #-0]
   12390:	04000008 	streq	r0, [r0], #-8
   12394:	0a100291 	beq	412de0 <__ccfg+0x3f2e38>
   12398:	80000008 	andhi	r0, r0, r8
   1239c:	00038617 	andeq	r8, r3, r7, lsl r6
   123a0:	02920400 	addseq	r0, r2, #0, 8
   123a4:	00081a10 	andeq	r1, r8, r0, lsl sl
   123a8:	11178800 	tstne	r7, r0, lsl #16
   123ac:	04000009 	streq	r0, [r0], #-9
   123b0:	2c0f0293 	sfmcs	f0, 4, [pc], {147}	; 0x93
   123b4:	a0000000 	andge	r0, r0, r0
   123b8:	00022917 	andeq	r2, r2, r7, lsl r9
   123bc:	02940400 	addseq	r0, r4, #0, 8
   123c0:	0000ed16 	andeq	lr, r0, r6, lsl sp
   123c4:	2317a400 	tstcs	r7, #0, 8
   123c8:	04000005 	streq	r0, [r0], #-5
   123cc:	ed160295 	lfm	f0, 4, [r6, #-596]	; 0xfffffdac
   123d0:	ac000000 	stcge	0, cr0, [r0], {-0}
   123d4:	00046b17 	andeq	r6, r4, r7, lsl fp
   123d8:	02960400 	addseq	r0, r6, #0, 8
   123dc:	0000ed16 	andeq	lr, r0, r6, lsl sp
   123e0:	5317b400 	tstpl	r7, #0, 8
   123e4:	04000006 	streq	r0, [r0], #-6
   123e8:	ed160297 	lfm	f0, 4, [r6, #-604]	; 0xfffffda4
   123ec:	bc000000 	stclt	0, cr0, [r0], {-0}
   123f0:	0004dd17 	andeq	sp, r4, r7, lsl sp
   123f4:	02980400 	addseq	r0, r8, #0, 8
   123f8:	0000ed16 	andeq	lr, r0, r6, lsl sp
   123fc:	f617c400 			; <UNDEFINED> instruction: 0xf617c400
   12400:	04000006 	streq	r0, [r0], #-6
   12404:	2c080299 	sfmcs	f0, 4, [r8], {153}	; 0x99
   12408:	cc000000 	stcgt	0, cr0, [r0], {-0}
   1240c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   12410:	080a0000 	stmdaeq	sl, {}	; <UNPREDICTABLE>
   12414:	25090000 	strcs	r0, [r9, #-0]
   12418:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
   1241c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   12420:	081a0000 	ldmdaeq	sl, {}	; <UNPREDICTABLE>
   12424:	25090000 	strcs	r0, [r9, #-0]
   12428:	07000000 	streq	r0, [r0, -r0]
   1242c:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   12430:	082a0000 	stmdaeq	sl!, {}	; <UNPREDICTABLE>
   12434:	25090000 	strcs	r0, [r9, #-0]
   12438:	17000000 	strne	r0, [r0, -r0]
   1243c:	04f01a00 	ldrbteq	r1, [r0], #2560	; 0xa00
   12440:	5107029e 			; <UNDEFINED> instruction: 0x5107029e
   12444:	17000008 	strne	r0, [r0, -r8]
   12448:	00000361 	andeq	r0, r0, r1, ror #6
   1244c:	1b02a104 	blne	ba864 <__ccfg+0x9a8bc>
   12450:	00000851 	andeq	r0, r0, r1, asr r8
   12454:	0a5f1700 	beq	17d805c <__ccfg+0x17b80b4>
   12458:	a2040000 	andge	r0, r4, #0
   1245c:	08611802 	stmdaeq	r1!, {r1, fp, ip}^
   12460:	00780000 	rsbseq	r0, r8, r0
   12464:	0002ef08 	andeq	lr, r2, r8, lsl #30
   12468:	00086100 	andeq	r6, r8, r0, lsl #2
   1246c:	00250900 	eoreq	r0, r5, r0, lsl #18
   12470:	001d0000 	andseq	r0, sp, r0
   12474:	00002508 	andeq	r2, r0, r8, lsl #10
   12478:	00087100 	andeq	r7, r8, r0, lsl #2
   1247c:	00250900 	eoreq	r0, r5, r0, lsl #18
   12480:	001d0000 	andseq	r0, sp, r0
   12484:	8304f01b 	movwhi	pc, #16411	; 0x401b	; <UNPREDICTABLE>
   12488:	08960302 	ldmeq	r6, {r1, r8, r9}
   1248c:	6c1c0000 	ldcvs	0, cr0, [ip], {-0}
   12490:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   12494:	e50b029a 	str	r0, [fp, #-666]	; 0xfffffd66
   12498:	1c000006 	stcne	0, cr0, [r0], {6}
   1249c:	0000082b 	andeq	r0, r0, fp, lsr #16
   124a0:	0b02a304 	bleq	bb0b8 <__ccfg+0x9b110>
   124a4:	0000082a 	andeq	r0, r0, sl, lsr #16
   124a8:	05b00800 	ldreq	r0, [r0, #2048]!	; 0x800
   124ac:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
   124b0:	25090000 	strcs	r0, [r9, #-0]
   124b4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   124b8:	0a461d00 	beq	11998c0 <__ccfg+0x1179918>
   124bc:	040f0000 	streq	r0, [pc], #-0	; 124c4 <__exidx_end+0xd594>
   124c0:	000008a6 	andeq	r0, r0, r6, lsr #17
   124c4:	0008bc1e 	andeq	fp, r8, lr, lsl ip
   124c8:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   124cc:	0f000000 	svceq	0x00000000
   124d0:	0008b104 	andeq	fp, r8, r4, lsl #2
   124d4:	79040f00 	stmdbvc	r4, {r8, r9, sl, fp}
   124d8:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
   124dc:	000008d3 	ldrdeq	r0, [r0], -r3
   124e0:	00002c14 	andeq	r2, r0, r4, lsl ip
   124e4:	040f0000 	streq	r0, [pc], #-0	; 124ec <__exidx_end+0xd5bc>
   124e8:	000008d9 	ldrdeq	r0, [r0], -r9
   124ec:	08c8040f 	stmiaeq	r8, {r0, r1, r2, r3, sl}^
   124f0:	4a080000 	bmi	2124f8 <__ccfg+0x1f2550>
   124f4:	ef000006 	svc	0x00000006
   124f8:	09000008 	stmdbeq	r0, {r3}
   124fc:	00000025 	andeq	r0, r0, r5, lsr #32
   12500:	f81f0002 			; <UNDEFINED> instruction: 0xf81f0002
   12504:	04000007 	streq	r0, [r0], #-7
   12508:	56170333 			; <UNDEFINED> instruction: 0x56170333
   1250c:	1f000004 	svcne	0x00000004
   12510:	000007f1 	strdeq	r0, [r0], -r1
   12514:	1d033404 	cfstrsne	mvf3, [r3, #-16]
   12518:	0000045c 	andeq	r0, r0, ip, asr r4
   1251c:	003efe20 	eorseq	pc, lr, r0, lsr #28
   12520:	0e670600 	cdpeq	6, 6, cr0, cr7, cr0, {0}
   12524:	000005aa 	andeq	r0, r0, sl, lsr #11
   12528:	000a0521 	andeq	r0, sl, r1, lsr #10
   1252c:	05900600 	ldreq	r0, [r0, #1536]	; 0x600
   12530:	0000002c 	andeq	r0, r0, ip, lsr #32
   12534:	000040b0 	strheq	r4, [r0], -r0
   12538:	00000038 	andeq	r0, r0, r8, lsr r0
   1253c:	09449c01 	stmdbeq	r4, {r0, sl, fp, ip, pc}^
   12540:	0b220000 	bleq	892548 <__ccfg+0x8725a0>
   12544:	01000043 	tsteq	r0, r3, asr #32
   12548:	04561249 	ldrbeq	r1, [r6], #-585	; 0xfffffdb7
   1254c:	56d70000 	ldrbpl	r0, [r7], r0
   12550:	56d10000 	ldrbpl	r0, [r1], r0
   12554:	23000000 	movwcs	r0, #0
   12558:	0000415b 	andeq	r4, r0, fp, asr r1
   1255c:	9c069f06 	stcls	15, cr9, [r6], {6}
   12560:	14000040 	strne	r0, [r0], #-64	; 0xffffffc0
   12564:	01000000 	mrseq	r0, (UNDEF: 0)
   12568:	1189249c 			; <UNDEFINED> instruction: 0x1189249c
   1256c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
   12570:	00002515 	andeq	r2, r0, r5, lsl r5
   12574:	22500100 	subscs	r0, r0, #0, 2
   12578:	0000430b 	andeq	r4, r0, fp, lsl #6
   1257c:	56124001 	ldrpl	r4, [r2], -r1
   12580:	08000004 	stmdaeq	r0, {r2}
   12584:	04000057 	streq	r0, [r0], #-87	; 0xffffffa9
   12588:	00000057 	andeq	r0, r0, r7, asr r0
   1258c:	0009f500 	andeq	pc, r9, r0, lsl #10
   12590:	b1000400 	tstlt	r0, r0, lsl #8
   12594:	04000043 	streq	r0, [r0], #-67	; 0xffffffbd
   12598:	00401401 	subeq	r1, r0, r1, lsl #8
   1259c:	41e50c00 	mvnmi	r0, r0, lsl #24
   125a0:	42190000 	andsmi	r0, r9, #0
   125a4:	40e80000 	rscmi	r0, r8, r0
   125a8:	00380000 	eorseq	r0, r8, r0
   125ac:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
   125b0:	04020000 	streq	r0, [r2], #-0
   125b4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   125b8:	07040300 	streq	r0, [r4, -r0, lsl #6]
   125bc:	0000039c 	muleq	r0, ip, r3
   125c0:	e8050803 	stmda	r5, {r0, r1, fp}
   125c4:	03000005 	movweq	r0, #5
   125c8:	3ee50408 	cdpcc	4, 14, cr0, cr5, cr8, {0}
   125cc:	96040000 	strls	r0, [r4], -r0
   125d0:	02000008 	andeq	r0, r0, #8
   125d4:	2c170165 	ldfcss	f0, [r7], {101}	; 0x65
   125d8:	03000000 	movweq	r0, #0
   125dc:	08de0601 	ldmeq	lr, {r0, r9, sl}^
   125e0:	01030000 	mrseq	r0, (UNDEF: 3)
   125e4:	0008dc08 	andeq	sp, r8, r8, lsl #24
   125e8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
   125ec:	000007a3 	andeq	r0, r0, r3, lsr #15
   125f0:	aa070203 	bge	1d2e04 <__ccfg+0x1b2e5c>
   125f4:	03000009 	movweq	r0, #9
   125f8:	05ed0504 	strbeq	r0, [sp, #1284]!	; 0x504
   125fc:	04030000 	streq	r0, [r3], #-0
   12600:	00039707 	andeq	r9, r3, r7, lsl #14
   12604:	07080300 	streq	r0, [r8, -r0, lsl #6]
   12608:	00000392 	muleq	r0, r2, r3
   1260c:	00077a05 	andeq	r7, r7, r5, lsl #20
   12610:	1ec80300 	cdpne	3, 12, cr0, cr8, cr0, {0}
   12614:	00000033 	andeq	r0, r0, r3, lsr r0
   12618:	0009e605 	andeq	lr, r9, r5, lsl #12
   1261c:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
   12620:	0000006a 	andeq	r0, r0, sl, rrx
   12624:	00026b05 	andeq	r6, r2, r5, lsl #22
   12628:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
   1262c:	0000006a 	andeq	r0, r0, sl, rrx
   12630:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
   12634:	0000c503 	andeq	ip, r0, r3, lsl #10
   12638:	058b0700 	streq	r0, [fp, #1792]	; 0x700
   1263c:	a7040000 	strge	r0, [r4, -r0]
   12640:	0000410c 	andeq	r4, r0, ip, lsl #2
   12644:	07ea0700 	strbeq	r0, [sl, r0, lsl #14]!
   12648:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
   1264c:	0000c513 	andeq	ip, r0, r3, lsl r5
   12650:	55080000 	strpl	r0, [r8, #-0]
   12654:	d5000000 	strle	r0, [r0, #-0]
   12658:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   1265c:	0000002c 	andeq	r0, r0, ip, lsr #32
   12660:	080a0003 	stmdaeq	sl, {r0, r1}
   12664:	f909a204 			; <UNDEFINED> instruction: 0xf909a204
   12668:	0b000000 	bleq	12670 <__exidx_end+0xd740>
   1266c:	00000326 	andeq	r0, r0, r6, lsr #6
   12670:	2507a404 	strcs	sl, [r7, #-1028]	; 0xfffffbfc
   12674:	00000000 	andeq	r0, r0, r0
   12678:	0004ae0b 	andeq	sl, r4, fp, lsl #28
   1267c:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
   12680:	000000a3 	andeq	r0, r0, r3, lsr #1
   12684:	a9050004 	stmdbge	r5, {r2}
   12688:	04000006 	streq	r0, [r0], #-6
   1268c:	00d503aa 	sbcseq	r0, r5, sl, lsr #7
   12690:	040c0000 	streq	r0, [ip], #-0
   12694:	0041d705 	subeq	sp, r1, r5, lsl #14
   12698:	0fd20400 	svceq	0x00d20400
   1269c:	0000006a 	andeq	r0, r0, sl, rrx
   126a0:	00062d05 	andeq	r2, r6, r5, lsl #26
   126a4:	19160500 	ldmdbne	r6, {r8, sl}
   126a8:	00000071 	andeq	r0, r0, r1, ror r0
   126ac:	0001fe05 	andeq	pc, r1, r5, lsl #28
   126b0:	0d0c0600 	stceq	6, cr0, [ip, #-0]
   126b4:	00000025 	andeq	r0, r0, r5, lsr #32
   126b8:	00055905 	andeq	r5, r5, r5, lsl #18
   126bc:	1b230500 	blne	8d3ac4 <__ccfg+0x8b3b1c>
   126c0:	0000011f 	andeq	r0, r0, pc, lsl r1
   126c4:	0002ab0d 	andeq	sl, r2, sp, lsl #22
   126c8:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
   126cc:	00019108 	andeq	r9, r1, r8, lsl #2
   126d0:	0a400b00 	beq	10152d8 <__ccfg+0xff5330>
   126d4:	36050000 	strcc	r0, [r5], -r0
   126d8:	00019113 	andeq	r9, r1, r3, lsl r1
   126dc:	5f0e0000 	svcpl	0x000e0000
   126e0:	3705006b 	strcc	r0, [r5, -fp, rrx]
   126e4:	00002507 	andeq	r2, r0, r7, lsl #10
   126e8:	450b0400 	strmi	r0, [fp, #-1024]	; 0xfffffc00
   126ec:	05000008 	streq	r0, [r0, #-8]
   126f0:	00250b37 	eoreq	r0, r5, r7, lsr fp
   126f4:	0b080000 	bleq	2126fc <__ccfg+0x1f2754>
   126f8:	00003eb0 			; <UNDEFINED> instruction: 0x00003eb0
   126fc:	25143705 	ldrcs	r3, [r4, #-1797]	; 0xfffff8fb
   12700:	0c000000 	stceq	0, cr0, [r0], {-0}
   12704:	0003be0b 	andeq	fp, r3, fp, lsl #28
   12708:	1b370500 	blne	dd3b10 <__ccfg+0xdb3b68>
   1270c:	00000025 	andeq	r0, r0, r5, lsr #32
   12710:	785f0e10 	ldmdavc	pc, {r4, r9, sl, fp}^	; <UNPREDICTABLE>
   12714:	0b380500 	bleq	e13b1c <__ccfg+0xdf3b74>
   12718:	00000197 	muleq	r0, r7, r1
   1271c:	040f0014 	streq	r0, [pc], #-20	; 12724 <__exidx_end+0xd7f4>
   12720:	00000137 	andeq	r0, r0, r7, lsr r1
   12724:	00011308 	andeq	r1, r1, r8, lsl #6
   12728:	0001a700 	andeq	sl, r1, r0, lsl #14
   1272c:	002c0900 	eoreq	r0, ip, r0, lsl #18
   12730:	00000000 	andeq	r0, r0, r0
   12734:	0008600d 	andeq	r6, r8, sp
   12738:	3c052400 	cfstrscc	mvf2, [r5], {-0}
   1273c:	00022a08 	andeq	r2, r2, r8, lsl #20
   12740:	044e0b00 	strbeq	r0, [lr], #-2816	; 0xfffff500
   12744:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
   12748:	00002509 	andeq	r2, r0, r9, lsl #10
   1274c:	580b0000 	stmdapl	fp, {}	; <UNPREDICTABLE>
   12750:	05000003 	streq	r0, [r0, #-3]
   12754:	0025093f 	eoreq	r0, r5, pc, lsr r9
   12758:	0b040000 	bleq	112760 <__ccfg+0xf27b8>
   1275c:	00000301 	andeq	r0, r0, r1, lsl #6
   12760:	25094005 	strcs	r4, [r9, #-5]
   12764:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12768:	00050f0b 	andeq	r0, r5, fp, lsl #30
   1276c:	09410500 	stmdbeq	r1, {r8, sl}^
   12770:	00000025 	andeq	r0, r0, r5, lsr #32
   12774:	071d0b0c 	ldreq	r0, [sp, -ip, lsl #22]
   12778:	42050000 	andmi	r0, r5, #0
   1277c:	00002509 	andeq	r2, r0, r9, lsl #10
   12780:	040b1000 	streq	r1, [fp], #-0
   12784:	05000008 	streq	r0, [r0, #-8]
   12788:	00250943 	eoreq	r0, r5, r3, asr #18
   1278c:	0b140000 	bleq	512794 <__ccfg+0x4f27ec>
   12790:	000002c6 	andeq	r0, r0, r6, asr #5
   12794:	25094405 	strcs	r4, [r9, #-1029]	; 0xfffffbfb
   12798:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   1279c:	0004570b 	andeq	r5, r4, fp, lsl #14
   127a0:	09450500 	stmdbeq	r5, {r8, sl}^
   127a4:	00000025 	andeq	r0, r0, r5, lsr #32
   127a8:	06c70b1c 			; <UNDEFINED> instruction: 0x06c70b1c
   127ac:	46050000 	strmi	r0, [r5], -r0
   127b0:	00002509 	andeq	r2, r0, r9, lsl #10
   127b4:	10002000 	andne	r2, r0, r0
   127b8:	00000061 	andeq	r0, r0, r1, rrx
   127bc:	4f050108 	svcmi	0x00050108
   127c0:	00026f08 	andeq	r6, r2, r8, lsl #30
   127c4:	09740b00 	ldmdbeq	r4!, {r8, r9, fp}^
   127c8:	50050000 	andpl	r0, r5, r0
   127cc:	00026f0a 	andeq	r6, r2, sl, lsl #30
   127d0:	c00b0000 	andgt	r0, fp, r0
   127d4:	05000008 	streq	r0, [r0, #-8]
   127d8:	026f0951 	rsbeq	r0, pc, #1327104	; 0x144000
   127dc:	11800000 	orrne	r0, r0, r0
   127e0:	000009dd 	ldrdeq	r0, [r0], -sp
   127e4:	130a5305 	movwne	r5, #41733	; 0xa305
   127e8:	00000001 	andeq	r0, r0, r1
   127ec:	0a2b1101 	beq	ad6bf8 <__ccfg+0xab6c50>
   127f0:	56050000 	strpl	r0, [r5], -r0
   127f4:	0001130a 	andeq	r1, r1, sl, lsl #6
   127f8:	00010400 	andeq	r0, r1, r0, lsl #8
   127fc:	00010508 	andeq	r0, r1, r8, lsl #10
   12800:	00027f00 	andeq	r7, r2, r0, lsl #30
   12804:	002c0900 	eoreq	r0, ip, r0, lsl #18
   12808:	001f0000 	andseq	r0, pc, r0
   1280c:	00078a10 	andeq	r8, r7, r0, lsl sl
   12810:	05019000 	streq	r9, [r1, #-0]
   12814:	02c20862 	sbceq	r0, r2, #6422528	; 0x620000
   12818:	400b0000 	andmi	r0, fp, r0
   1281c:	0500000a 	streq	r0, [r0, #-10]
   12820:	02c21263 	sbceq	r1, r2, #805306374	; 0x30000006
   12824:	0b000000 	bleq	1282c <__exidx_end+0xd8fc>
   12828:	00000466 	andeq	r0, r0, r6, ror #8
   1282c:	25066405 	strcs	r6, [r6, #-1029]	; 0xfffffbfb
   12830:	04000000 	streq	r0, [r0], #-0
   12834:	0002730b 	andeq	r7, r2, fp, lsl #6
   12838:	09660500 	stmdbeq	r6!, {r8, sl}^
   1283c:	000002c8 	andeq	r0, r0, r8, asr #5
   12840:	00610b08 	rsbeq	r0, r1, r8, lsl #22
   12844:	67050000 	strvs	r0, [r5, -r0]
   12848:	00022a1e 	andeq	r2, r2, lr, lsl sl
   1284c:	0f008800 	svceq	0x00008800
   12850:	00027f04 	andeq	r7, r2, r4, lsl #30
   12854:	02d80800 	sbcseq	r0, r8, #0, 16
   12858:	02d80000 	sbcseq	r0, r8, #0
   1285c:	2c090000 	stccs	0, cr0, [r9], {-0}
   12860:	1f000000 	svcne	0x00000000
   12864:	de040f00 	cdple	15, 0, cr0, cr4, cr0, {0}
   12868:	12000002 	andne	r0, r0, #2
   1286c:	00093e0d 	andeq	r3, r9, sp, lsl #28
   12870:	7a050800 	bvc	154878 <__ccfg+0x1348d0>
   12874:	00030708 	andeq	r0, r3, r8, lsl #14
   12878:	06040b00 	streq	r0, [r4], -r0, lsl #22
   1287c:	7b050000 	blvc	152884 <__ccfg+0x1328dc>
   12880:	00030711 	andeq	r0, r3, r1, lsl r7
   12884:	cf0b0000 	svcgt	0x000b0000
   12888:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
   1288c:	0025067c 	eoreq	r0, r5, ip, ror r6
   12890:	00040000 	andeq	r0, r4, r0
   12894:	0055040f 	subseq	r0, r5, pc, lsl #8
   12898:	b60d0000 	strlt	r0, [sp], -r0
   1289c:	68000003 	stmdavs	r0, {r0, r1}
   128a0:	5008ba05 	andpl	fp, r8, r5, lsl #20
   128a4:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
   128a8:	0500705f 	streq	r7, [r0, #-95]	; 0xffffffa1
   128ac:	030712bb 	movweq	r1, #29371	; 0x72bb
   128b0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   128b4:	0500725f 	streq	r7, [r0, #-607]	; 0xfffffda1
   128b8:	002507bc 	strhteq	r0, [r5], -ip
   128bc:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
   128c0:	0500775f 	streq	r7, [r0, #-1887]	; 0xfffff8a1
   128c4:	002507bd 	strhteq	r0, [r5], -sp
   128c8:	0b080000 	bleq	2128d0 <__ccfg+0x1f2928>
   128cc:	000001e9 	andeq	r0, r0, r9, ror #3
   128d0:	5c09be05 	stcpl	14, cr11, [r9], {5}
   128d4:	0c000000 	stceq	0, cr0, [r0], {-0}
   128d8:	0006620b 	andeq	r6, r6, fp, lsl #4
   128dc:	09bf0500 	ldmibeq	pc!, {r8, sl}	; <UNPREDICTABLE>
   128e0:	0000005c 	andeq	r0, r0, ip, asr r0
   128e4:	625f0e0e 	subsvs	r0, pc, #14, 28	; 0xe0
   128e8:	c0050066 	andgt	r0, r5, r6, rrx
   128ec:	0002df11 	andeq	sp, r2, r1, lsl pc
   128f0:	e00b1000 	and	r1, fp, r0
   128f4:	05000001 	streq	r0, [r0, #-1]
   128f8:	002507c1 	eoreq	r0, r5, r1, asr #15
   128fc:	0b180000 	bleq	612904 <__ccfg+0x5f295c>
   12900:	00000278 	andeq	r0, r0, r8, ror r2
   12904:	050ac805 	streq	ip, [sl, #-2053]	; 0xfffff7fb
   12908:	1c000001 	stcne	0, cr0, [r0], {1}
   1290c:	00185f0b 	andseq	r5, r8, fp, lsl #30
   12910:	1dca0500 	cfstr64ne	mvdx0, [sl]
   12914:	000005d4 	ldrdeq	r0, [r0], -r4
   12918:	18260b20 	stmdane	r6!, {r5, r8, r9, fp}
   1291c:	cc050000 	stcgt	0, cr0, [r5], {-0}
   12920:	0005fe1d 	andeq	pc, r5, sp, lsl lr	; <UNPREDICTABLE>
   12924:	510b2400 	tstpl	fp, r0, lsl #8
   12928:	0500000a 	streq	r0, [r0, #-10]
   1292c:	06220dcf 	strteq	r0, [r2], -pc, asr #27
   12930:	0b280000 	bleq	a12938 <__ccfg+0x9f2990>
   12934:	00001814 	andeq	r1, r0, r4, lsl r8
   12938:	3c09d005 	stccc	0, cr13, [r9], {5}
   1293c:	2c000006 	stccs	0, cr0, [r0], {6}
   12940:	62755f0e 	rsbsvs	r5, r5, #14, 30	; 0x38
   12944:	11d30500 	bicsne	r0, r3, r0, lsl #10
   12948:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1294c:	755f0e30 	ldrbvc	r0, [pc, #-3632]	; 11b24 <__exidx_end+0xcbf4>
   12950:	d4050070 	strle	r0, [r5], #-112	; 0xffffff90
   12954:	00030712 	andeq	r0, r3, r2, lsl r7
   12958:	5f0e3800 	svcpl	0x000e3800
   1295c:	05007275 	streq	r7, [r0, #-629]	; 0xfffffd8b
   12960:	002507d5 	ldrdeq	r0, [r5], -r5	; <UNPREDICTABLE>
   12964:	0b3c0000 	bleq	f1296c <__ccfg+0xef29c4>
   12968:	00000a68 	andeq	r0, r0, r8, ror #20
   1296c:	4211d805 	andsmi	sp, r1, #327680	; 0x50000
   12970:	40000006 	andmi	r0, r0, r6
   12974:	0009f70b 	andeq	pc, r9, fp, lsl #14
   12978:	11d90500 	bicsne	r0, r9, r0, lsl #10
   1297c:	00000652 	andeq	r0, r0, r2, asr r6
   12980:	6c5f0e43 	mrrcvs	14, 4, r0, pc, cr3	; <UNPREDICTABLE>
   12984:	dc050062 	stcle	0, cr0, [r5], {98}	; 0x62
   12988:	0002df11 	andeq	sp, r2, r1, lsl pc
   1298c:	570b4400 	strpl	r4, [fp, -r0, lsl #8]
   12990:	05000008 	streq	r0, [r0, #-8]
   12994:	002507df 	ldrdeq	r0, [r5], -pc	; <UNPREDICTABLE>
   12998:	0b4c0000 	bleq	13129a0 <__ccfg+0x12f29f8>
   1299c:	00000403 	andeq	r0, r0, r3, lsl #8
   129a0:	8b0ae005 	blhi	2ca9bc <__ccfg+0x2aaa14>
   129a4:	50000000 	andpl	r0, r0, r0
   129a8:	00432e0b 	subeq	r2, r3, fp, lsl #28
   129ac:	12e30500 	rscne	r0, r3, #0, 10
   129b0:	0000046e 	andeq	r0, r0, lr, ror #8
   129b4:	086f0b54 	stmdaeq	pc!, {r2, r4, r6, r8, r9, fp}^	; <UNPREDICTABLE>
   129b8:	e7050000 	str	r0, [r5, -r0]
   129bc:	00012b0c 	andeq	r2, r1, ip, lsl #22
   129c0:	920b5800 	andls	r5, fp, #0, 16
   129c4:	05000007 	streq	r0, [r0, #-7]
   129c8:	00f90ee9 	rscseq	r0, r9, r9, ror #29
   129cc:	0b5c0000 	bleq	17129d4 <__ccfg+0x16f2a2c>
   129d0:	00000a23 	andeq	r0, r0, r3, lsr #20
   129d4:	2509ea05 	strcs	lr, [r9, #-2565]	; 0xfffff5fb
   129d8:	64000000 	strvs	r0, [r0], #-0
   129dc:	00251300 	eoreq	r1, r5, r0, lsl #6
   129e0:	046e0000 	strbteq	r0, [lr], #-0
   129e4:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   129e8:	14000004 	strne	r0, [r0], #-4
   129ec:	00000105 	andeq	r0, r0, r5, lsl #2
   129f0:	0005c214 	andeq	ip, r5, r4, lsl r2
   129f4:	00251400 	eoreq	r1, r5, r0, lsl #8
   129f8:	0f000000 	svceq	0x00000000
   129fc:	00047904 	andeq	r7, r4, r4, lsl #18
   12a00:	046e1500 	strbteq	r1, [lr], #-1280	; 0xfffffb00
   12a04:	6c160000 	ldcvs	0, cr0, [r6], {-0}
   12a08:	28000043 	stmdacs	r0, {r0, r1, r6}
   12a0c:	02650504 	rsbeq	r0, r5, #4, 10	; 0x1000000
   12a10:	0005c208 	andeq	ip, r5, r8, lsl #4
   12a14:	06f81700 	ldrbteq	r1, [r8], r0, lsl #14
   12a18:	67050000 	strvs	r0, [r5, -r0]
   12a1c:	00250702 	eoreq	r0, r5, r2, lsl #14
   12a20:	17000000 	strne	r0, [r0, -r0]
   12a24:	000005d2 	ldrdeq	r0, [r0], -r2
   12a28:	0b026c05 	bleq	ada44 <__ccfg+0x8da9c>
   12a2c:	000006ae 	andeq	r0, r0, lr, lsr #13
   12a30:	02551704 	subseq	r1, r5, #4, 14	; 0x100000
   12a34:	6c050000 	stcvs	0, cr0, [r5], {-0}
   12a38:	06ae1402 	strteq	r1, [lr], r2, lsl #8
   12a3c:	17080000 	strne	r0, [r8, -r0]
   12a40:	00000a57 	andeq	r0, r0, r7, asr sl
   12a44:	1e026c05 	cdpne	12, 0, cr6, cr2, cr5, {0}
   12a48:	000006ae 	andeq	r0, r0, lr, lsr #13
   12a4c:	0461170c 	strbteq	r1, [r1], #-1804	; 0xfffff8f4
   12a50:	6e050000 	cdpvs	0, 0, cr0, cr5, cr0, {0}
   12a54:	00250802 	eoreq	r0, r5, r2, lsl #16
   12a58:	17100000 	ldrne	r0, [r0, -r0]
   12a5c:	00000413 	andeq	r0, r0, r3, lsl r4
   12a60:	08026f05 	stmdaeq	r2, {r0, r2, r8, r9, sl, fp, sp, lr}
   12a64:	000008ae 	andeq	r0, r0, lr, lsr #17
   12a68:	0a0a1714 	beq	2986c0 <__ccfg+0x278718>
   12a6c:	72050000 	andvc	r0, r5, #0
   12a70:	00250702 	eoreq	r0, r5, r2, lsl #14
   12a74:	17300000 	ldrne	r0, [r0, -r0]!
   12a78:	00003d5c 	andeq	r3, r0, ip, asr sp
   12a7c:	16027305 	strne	r7, [r2], -r5, lsl #6
   12a80:	000008c3 	andeq	r0, r0, r3, asr #17
   12a84:	05a51734 	streq	r1, [r5, #1844]!	; 0x734
   12a88:	75050000 	strvc	r0, [r5, #-0]
   12a8c:	00250702 	eoreq	r0, r5, r2, lsl #14
   12a90:	17380000 	ldrne	r0, [r8, -r0]!
   12a94:	0000069f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
   12a98:	0a027705 	beq	b06b4 <__ccfg+0x9070c>
   12a9c:	000008d4 	ldrdeq	r0, [r0], -r4
   12aa0:	02d0173c 	sbcseq	r1, r0, #60, 14	; 0xf00000
   12aa4:	7a050000 	bvc	152aac <__ccfg+0x132b04>
   12aa8:	01911302 	orrseq	r1, r1, r2, lsl #6
   12aac:	17400000 	strbne	r0, [r0, -r0]
   12ab0:	0000037c 	andeq	r0, r0, ip, ror r3
   12ab4:	07027b05 	streq	r7, [r2, -r5, lsl #22]
   12ab8:	00000025 	andeq	r0, r0, r5, lsr #32
   12abc:	04b61744 	ldrteq	r1, [r6], #1860	; 0x744
   12ac0:	7c050000 	stcvc	0, cr0, [r5], {-0}
   12ac4:	01911302 	orrseq	r1, r1, r2, lsl #6
   12ac8:	17480000 	strbne	r0, [r8, -r0]
   12acc:	0000060a 	andeq	r0, r0, sl, lsl #12
   12ad0:	14027d05 	strne	r7, [r2], #-3333	; 0xfffff2fb
   12ad4:	000008da 	ldrdeq	r0, [r0], -sl
   12ad8:	083d174c 	ldmdaeq	sp!, {r2, r3, r6, r8, r9, sl, ip}
   12adc:	80050000 	andhi	r0, r5, r0
   12ae0:	00250702 	eoreq	r0, r5, r2, lsl #14
   12ae4:	17500000 	ldrbne	r0, [r0, -r0]
   12ae8:	000008d4 	ldrdeq	r0, [r0], -r4
   12aec:	09028105 	stmdbeq	r2, {r0, r2, r8, pc}
   12af0:	000005c2 	andeq	r0, r0, r2, asr #11
   12af4:	08ee1754 	stmiaeq	lr!, {r2, r4, r6, r8, r9, sl, ip}^
   12af8:	a4050000 	strge	r0, [r5], #-0
   12afc:	08890702 	stmeq	r9, {r1, r8, r9, sl}
   12b00:	18580000 	ldmdane	r8, {}^	; <UNPREDICTABLE>
   12b04:	0000078a 	andeq	r0, r0, sl, lsl #15
   12b08:	1302a805 	movwne	sl, #10245	; 0x2805
   12b0c:	000002c2 	andeq	r0, r0, r2, asr #5
   12b10:	32180148 	andscc	r0, r8, #72, 2
   12b14:	05000005 	streq	r0, [r0, #-5]
   12b18:	7f1202a9 	svcvc	0x001202a9
   12b1c:	4c000002 	stcmi	0, cr0, [r0], {2}
   12b20:	05191801 	ldreq	r1, [r9, #-2049]	; 0xfffff7ff
   12b24:	ad050000 	stcge	0, cr0, [r5, #-0]
   12b28:	08eb0c02 	stmiaeq	fp!, {r1, sl, fp}^
   12b2c:	02dc0000 	sbcseq	r0, ip, #0
   12b30:	00095118 	andeq	r5, r9, r8, lsl r1
   12b34:	02b20500 	adcseq	r0, r2, #0, 10
   12b38:	00066f10 	andeq	r6, r6, r0, lsl pc
   12b3c:	1802e000 	stmdane	r2, {sp, lr, pc}
   12b40:	000007cb 	andeq	r0, r0, fp, asr #15
   12b44:	0a02b405 	beq	bfb60 <__ccfg+0x9fbb8>
   12b48:	000008f7 	strdeq	r0, [r0], -r7
   12b4c:	0f0002ec 	svceq	0x000002ec
   12b50:	0005c804 	andeq	ip, r5, r4, lsl #16
   12b54:	08010300 	stmdaeq	r1, {r8, r9}
   12b58:	000008e5 	andeq	r0, r0, r5, ror #17
   12b5c:	0005c815 	andeq	ip, r5, r5, lsl r8
   12b60:	50040f00 	andpl	r0, r4, r0, lsl #30
   12b64:	13000004 	movwne	r0, #4
   12b68:	00000025 	andeq	r0, r0, r5, lsr #32
   12b6c:	000005f8 	strdeq	r0, [r0], -r8
   12b70:	00046e14 	andeq	r6, r4, r4, lsl lr
   12b74:	01051400 	tsteq	r5, r0, lsl #8
   12b78:	f8140000 			; <UNDEFINED> instruction: 0xf8140000
   12b7c:	14000005 	strne	r0, [r0], #-5
   12b80:	00000025 	andeq	r0, r0, r5, lsr #32
   12b84:	cf040f00 	svcgt	0x00040f00
   12b88:	0f000005 	svceq	0x00000005
   12b8c:	0005da04 	andeq	sp, r5, r4, lsl #20
   12b90:	00971300 	addseq	r1, r7, r0, lsl #6
   12b94:	06220000 	strteq	r0, [r2], -r0
   12b98:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   12b9c:	14000004 	strne	r0, [r0], #-4
   12ba0:	00000105 	andeq	r0, r0, r5, lsl #2
   12ba4:	00009714 	andeq	r9, r0, r4, lsl r7
   12ba8:	00251400 	eoreq	r1, r5, r0, lsl #8
   12bac:	0f000000 	svceq	0x00000000
   12bb0:	00060404 	andeq	r0, r6, r4, lsl #8
   12bb4:	00251300 	eoreq	r1, r5, r0, lsl #6
   12bb8:	063c0000 	ldrteq	r0, [ip], -r0
   12bbc:	6e140000 	cdpvs	0, 1, cr0, cr4, cr0, {0}
   12bc0:	14000004 	strne	r0, [r0], #-4
   12bc4:	00000105 	andeq	r0, r0, r5, lsl #2
   12bc8:	28040f00 	stmdacs	r4, {r8, r9, sl, fp}
   12bcc:	08000006 	stmdaeq	r0, {r1, r2}
   12bd0:	00000055 	andeq	r0, r0, r5, asr r0
   12bd4:	00000652 	andeq	r0, r0, r2, asr r6
   12bd8:	00002c09 	andeq	r2, r0, r9, lsl #24
   12bdc:	08000200 	stmdaeq	r0, {r9}
   12be0:	00000055 	andeq	r0, r0, r5, asr r0
   12be4:	00000662 	andeq	r0, r0, r2, ror #12
   12be8:	00002c09 	andeq	r2, r0, r9, lsl #24
   12bec:	04000000 	streq	r0, [r0], #-0
   12bf0:	000003f1 	strdeq	r0, [r0], -r1
   12bf4:	1a012405 	bne	5bc10 <__ccfg+0x3bc68>
   12bf8:	0000030d 	andeq	r0, r0, sp, lsl #6
   12bfc:	00438219 	subeq	r8, r3, r9, lsl r2
   12c00:	28050c00 	stmdacs	r5, {sl, fp}
   12c04:	06a80801 	strteq	r0, [r8], r1, lsl #16
   12c08:	40170000 	andsmi	r0, r7, r0
   12c0c:	0500000a 	streq	r0, [r0, #-10]
   12c10:	a811012a 	ldmdage	r1, {r1, r3, r5, r8}
   12c14:	00000006 	andeq	r0, r0, r6
   12c18:	00088f17 	andeq	r8, r8, r7, lsl pc
   12c1c:	012b0500 			; <UNDEFINED> instruction: 0x012b0500
   12c20:	00002507 	andeq	r2, r0, r7, lsl #10
   12c24:	91170400 	tstls	r7, r0, lsl #8
   12c28:	05000005 	streq	r0, [r0, #-5]
   12c2c:	ae0b012c 	adfgeep	f0, f3, #4.0
   12c30:	08000006 	stmdaeq	r0, {r1, r2}
   12c34:	6f040f00 	svcvs	0x00040f00
   12c38:	0f000006 	svceq	0x00000006
   12c3c:	00066204 	andeq	r6, r6, r4, lsl #4
   12c40:	03681900 	cmneq	r8, #0, 18
   12c44:	050e0000 	streq	r0, [lr, #-0]
   12c48:	ed080144 	stfs	f0, [r8, #-272]	; 0xfffffef0
   12c4c:	17000006 	strne	r0, [r0, -r6]
   12c50:	00001188 	andeq	r1, r0, r8, lsl #3
   12c54:	12014505 	andne	r4, r1, #20971520	; 0x1400000
   12c58:	000006ed 	andeq	r0, r0, sp, ror #13
   12c5c:	061c1700 	ldreq	r1, [ip], -r0, lsl #14
   12c60:	46050000 	strmi	r0, [r5], -r0
   12c64:	06ed1201 	strbteq	r1, [sp], r1, lsl #4
   12c68:	17060000 	strne	r0, [r6, -r0]
   12c6c:	0000102d 	andeq	r1, r0, sp, lsr #32
   12c70:	12014705 	andne	r4, r1, #1310720	; 0x140000
   12c74:	00000063 	andeq	r0, r0, r3, rrx
   12c78:	6308000c 	movwvs	r0, #32780	; 0x800c
   12c7c:	fd000000 	stc2	0, cr0, [r0, #-0]
   12c80:	09000006 	stmdbeq	r0, {r1, r2}
   12c84:	0000002c 	andeq	r0, r0, ip, lsr #32
   12c88:	d01a0002 	andsle	r0, sl, r2
   12c8c:	07028505 	streq	r8, [r2, -r5, lsl #10]
   12c90:	00000812 	andeq	r0, r0, r2, lsl r8
   12c94:	0009fd17 	andeq	pc, r9, r7, lsl sp	; <UNPREDICTABLE>
   12c98:	02870500 	addeq	r0, r7, #0, 10
   12c9c:	00002c18 	andeq	r2, r0, r8, lsl ip
   12ca0:	59170000 	ldmdbpl	r7, {}	; <UNPREDICTABLE>
   12ca4:	05000009 	streq	r0, [r0, #-9]
   12ca8:	c2120288 	andsgt	r0, r2, #136, 4	; 0x80000008
   12cac:	04000005 	streq	r0, [r0], #-5
   12cb0:	0003a917 	andeq	sl, r3, r7, lsl r9
   12cb4:	02890500 	addeq	r0, r9, #0, 10
   12cb8:	00081210 	andeq	r1, r8, r0, lsl r2
   12cbc:	1c170800 	ldcne	8, cr0, [r7], {-0}
   12cc0:	05000008 	streq	r0, [r0, #-8]
   12cc4:	a717028a 	ldrge	r0, [r7, -sl, lsl #5]
   12cc8:	24000001 	strcs	r0, [r0], #-1
   12ccc:	0005d917 	andeq	sp, r5, r7, lsl r9
   12cd0:	028b0500 	addeq	r0, fp, #0, 10
   12cd4:	0000250f 	andeq	r2, r0, pc, lsl #10
   12cd8:	3b174800 	blcc	5e4ce0 <__ccfg+0x5c4d38>
   12cdc:	0500000a 	streq	r0, [r0, #-10]
   12ce0:	782c028c 	stmdavc	ip!, {r2, r3, r7, r9}
   12ce4:	50000000 	andpl	r0, r0, r0
   12ce8:	00008517 	andeq	r8, r0, r7, lsl r5
   12cec:	028d0500 	addeq	r0, sp, #0, 10
   12cf0:	0006b41a 	andeq	fp, r6, sl, lsl r4
   12cf4:	ee175800 	cdp	8, 1, cr5, cr7, cr0, {0}
   12cf8:	05000004 	streq	r0, [r0, #-4]
   12cfc:	f916028e 			; <UNDEFINED> instruction: 0xf916028e
   12d00:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   12d04:	00096617 	andeq	r6, r9, r7, lsl r6
   12d08:	028f0500 	addeq	r0, pc, #0, 10
   12d0c:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   12d10:	6f177000 	svcvs	0x00177000
   12d14:	05000000 	streq	r0, [r0, #-0]
   12d18:	f9160290 			; <UNDEFINED> instruction: 0xf9160290
   12d1c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   12d20:	00084d17 	andeq	r4, r8, r7, lsl sp
   12d24:	02910500 	addseq	r0, r1, #0, 10
   12d28:	00082210 	andeq	r2, r8, r0, lsl r2
   12d2c:	86178000 	ldrhi	r8, [r7], -r0
   12d30:	05000003 	streq	r0, [r0, #-3]
   12d34:	32100292 	andscc	r0, r0, #536870921	; 0x20000009
   12d38:	88000008 	stmdahi	r0, {r3}
   12d3c:	00091117 	andeq	r1, r9, r7, lsl r1
   12d40:	02930500 	addseq	r0, r3, #0, 10
   12d44:	0000250f 	andeq	r2, r0, pc, lsl #10
   12d48:	2917a000 	ldmdbcs	r7, {sp, pc}
   12d4c:	05000002 	streq	r0, [r0, #-2]
   12d50:	f9160294 			; <UNDEFINED> instruction: 0xf9160294
   12d54:	a4000000 	strge	r0, [r0], #-0
   12d58:	00052317 	andeq	r2, r5, r7, lsl r3
   12d5c:	02950500 	addseq	r0, r5, #0, 10
   12d60:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   12d64:	6b17ac00 	blvs	5fdd6c <__ccfg+0x5dddc4>
   12d68:	05000004 	streq	r0, [r0, #-4]
   12d6c:	f9160296 			; <UNDEFINED> instruction: 0xf9160296
   12d70:	b4000000 	strlt	r0, [r0], #-0
   12d74:	00065317 	andeq	r5, r6, r7, lsl r3
   12d78:	02970500 	addseq	r0, r7, #0, 10
   12d7c:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   12d80:	dd17bc00 	ldcle	12, cr11, [r7, #-0]
   12d84:	05000004 	streq	r0, [r0, #-4]
   12d88:	f9160298 			; <UNDEFINED> instruction: 0xf9160298
   12d8c:	c4000000 	strgt	r0, [r0], #-0
   12d90:	0006f617 	andeq	pc, r6, r7, lsl r6	; <UNPREDICTABLE>
   12d94:	02990500 	addseq	r0, r9, #0, 10
   12d98:	00002508 	andeq	r2, r0, r8, lsl #10
   12d9c:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   12da0:	000005c8 	andeq	r0, r0, r8, asr #11
   12da4:	00000822 	andeq	r0, r0, r2, lsr #16
   12da8:	00002c09 	andeq	r2, r0, r9, lsl #24
   12dac:	08001900 	stmdaeq	r0, {r8, fp, ip}
   12db0:	000005c8 	andeq	r0, r0, r8, asr #11
   12db4:	00000832 	andeq	r0, r0, r2, lsr r8
   12db8:	00002c09 	andeq	r2, r0, r9, lsl #24
   12dbc:	08000700 	stmdaeq	r0, {r8, r9, sl}
   12dc0:	000005c8 	andeq	r0, r0, r8, asr #11
   12dc4:	00000842 	andeq	r0, r0, r2, asr #16
   12dc8:	00002c09 	andeq	r2, r0, r9, lsl #24
   12dcc:	1a001700 	bne	189d4 <__exidx_end+0x13aa4>
   12dd0:	029e05f0 	addseq	r0, lr, #240, 10	; 0x3c000000
   12dd4:	00086907 	andeq	r6, r8, r7, lsl #18
   12dd8:	03611700 	cmneq	r1, #0, 14
   12ddc:	a1050000 	mrsge	r0, (UNDEF: 5)
   12de0:	08691b02 	stmdaeq	r9!, {r1, r8, r9, fp, ip}^
   12de4:	17000000 	strne	r0, [r0, -r0]
   12de8:	00000a5f 	andeq	r0, r0, pc, asr sl
   12dec:	1802a205 	stmdane	r2, {r0, r2, r9, sp, pc}
   12df0:	00000879 	andeq	r0, r0, r9, ror r8
   12df4:	07080078 	smlsdxeq	r8, r8, r0, r0
   12df8:	79000003 	stmdbvc	r0, {r0, r1}
   12dfc:	09000008 	stmdbeq	r0, {r3}
   12e00:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e04:	2c08001d 	stccs	0, cr0, [r8], {29}
   12e08:	89000000 	stmdbhi	r0, {}	; <UNPREDICTABLE>
   12e0c:	09000008 	stmdbeq	r0, {r3}
   12e10:	0000002c 	andeq	r0, r0, ip, lsr #32
   12e14:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   12e18:	03028305 	movweq	r8, #8965	; 0x2305
   12e1c:	000008ae 	andeq	r0, r0, lr, lsr #17
   12e20:	00436c1c 	subeq	r6, r3, ip, lsl ip
   12e24:	029a0500 	addseq	r0, sl, #0, 10
   12e28:	0006fd0b 	andeq	pc, r6, fp, lsl #26
   12e2c:	082b1c00 	stmdaeq	fp!, {sl, fp, ip}
   12e30:	a3050000 	movwge	r0, #20480	; 0x5000
   12e34:	08420b02 	stmdaeq	r2, {r1, r8, r9, fp}^
   12e38:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   12e3c:	000005c8 	andeq	r0, r0, r8, asr #11
   12e40:	000008be 			; <UNDEFINED> instruction: 0x000008be
   12e44:	00002c09 	andeq	r2, r0, r9, lsl #24
   12e48:	1d001800 	stcne	8, cr1, [r0, #-0]
   12e4c:	00000a46 	andeq	r0, r0, r6, asr #20
   12e50:	08be040f 	ldmeq	lr!, {r0, r1, r2, r3, sl}
   12e54:	d41e0000 	ldrle	r0, [lr], #-0
   12e58:	14000008 	strne	r0, [r0], #-8
   12e5c:	0000046e 	andeq	r0, r0, lr, ror #8
   12e60:	c9040f00 	stmdbgt	r4, {r8, r9, sl, fp}
   12e64:	0f000008 	svceq	0x00000008
   12e68:	00019104 	andeq	r9, r1, r4, lsl #2
   12e6c:	08eb1e00 	stmiaeq	fp!, {r9, sl, fp, ip}^
   12e70:	25140000 	ldrcs	r0, [r4, #-0]
   12e74:	00000000 	andeq	r0, r0, r0
   12e78:	08f1040f 	ldmeq	r1!, {r0, r1, r2, r3, sl}^
   12e7c:	040f0000 	streq	r0, [pc], #-0	; 12e84 <__exidx_end+0xdf54>
   12e80:	000008e0 	andeq	r0, r0, r0, ror #17
   12e84:	00066208 	andeq	r6, r6, r8, lsl #4
   12e88:	00090700 	andeq	r0, r9, r0, lsl #14
   12e8c:	002c0900 	eoreq	r0, ip, r0, lsl #18
   12e90:	00020000 	andeq	r0, r2, r0
   12e94:	0007f81f 	andeq	pc, r7, pc, lsl r8	; <UNPREDICTABLE>
   12e98:	03330500 	teqeq	r3, #0, 10
   12e9c:	00046e17 	andeq	r6, r4, r7, lsl lr
   12ea0:	07f11f00 	ldrbeq	r1, [r1, r0, lsl #30]!
   12ea4:	34050000 	strcc	r0, [r5], #-0
   12ea8:	04741d03 	ldrbteq	r1, [r4], #-3331	; 0xfffff2fd
   12eac:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
   12eb0:	07000041 	streq	r0, [r0, -r1, asr #32]
   12eb4:	01071725 	tsteq	r7, r5, lsr #14
   12eb8:	9e050000 	cdpls	0, 0, cr0, cr5, cr0, {0}
   12ebc:	07000005 	streq	r0, [r0, -r5]
   12ec0:	007f122a 	rsbseq	r1, pc, sl, lsr #4
   12ec4:	120d0000 	andne	r0, sp, #0
   12ec8:	10000043 	andne	r0, r0, r3, asr #32
   12ecc:	61083607 	tstvs	r8, r7, lsl #12
   12ed0:	0b000009 	bleq	12efc <__exidx_end+0xdfcc>
   12ed4:	00004212 	andeq	r4, r0, r2, lsl r2
   12ed8:	2d0a3707 	stccs	7, cr3, [sl, #-28]	; 0xffffffe4
   12edc:	00000009 	andeq	r0, r0, r9
   12ee0:	0042750b 	subeq	r7, r2, fp, lsl #10
   12ee4:	0e380700 	cdpeq	7, 3, cr0, cr8, cr0, {0}
   12ee8:	00000921 	andeq	r0, r0, r1, lsr #18
   12eec:	6b200008 	blvs	812f14 <__ccfg+0x7f2f6c>
   12ef0:	08000042 	stmdaeq	r0, {r1, r6}
   12ef4:	006a169a 	mlseq	sl, sl, r6, r1
   12ef8:	b5200000 	strlt	r0, [r0, #-0]!
   12efc:	08000041 	stmdaeq	r0, {r0, r6}
   12f00:	0025159b 	mlaeq	r5, fp, r5, r1
   12f04:	c2080000 	andgt	r0, r8, #0
   12f08:	89000005 	stmdbhi	r0, {r0, r2}
   12f0c:	09000009 	stmdbeq	r0, {r0, r3}
   12f10:	0000002c 	andeq	r0, r0, ip, lsr #32
   12f14:	bf200001 	svclt	0x00200001
   12f18:	08000041 	stmdaeq	r0, {r0, r6}
   12f1c:	0979179e 	ldmdbeq	r9!, {r1, r2, r3, r4, r7, r8, r9, sl, ip}^
   12f20:	66210000 	strtvs	r0, [r1], -r0
   12f24:	08000042 	stmdaeq	r0, {r1, r6}
   12f28:	092d0b3b 	pusheq	{r0, r1, r3, r4, r5, r8, r9, fp}
   12f2c:	40e80000 	rscmi	r0, r8, r0
   12f30:	00380000 	eorseq	r0, r8, r0
   12f34:	9c010000 	stcls	0, cr0, [r1], {-0}
   12f38:	000009e6 	andeq	r0, r0, r6, ror #19
   12f3c:	01007422 	tsteq	r0, r2, lsr #8
   12f40:	09e61024 	stmibeq	r6!, {r2, r5, ip}^
   12f44:	572f0000 	strpl	r0, [pc, -r0]!
   12f48:	57270000 	strpl	r0, [r7, -r0]!
   12f4c:	6e230000 	cdpvs	0, 2, cr0, cr3, cr0, {0}
   12f50:	0100776f 	tsteq	r0, pc, ror #14
   12f54:	09391226 	ldmdbeq	r9!, {r1, r2, r5, r9, ip}
   12f58:	91020000 	mrsls	r0, (UNDEF: 2)
   12f5c:	40fa2468 	rscsmi	r2, sl, r8, ror #8
   12f60:	09ec0000 	stmibeq	ip!, {}^	; <UNPREDICTABLE>
   12f64:	01250000 			; <UNDEFINED> instruction: 0x01250000
   12f68:	007d0251 	rsbseq	r0, sp, r1, asr r2
   12f6c:	01520125 	cmpeq	r2, r5, lsr #2
   12f70:	0f000030 	svceq	0x00000030
   12f74:	00092d04 	andeq	r2, r9, r4, lsl #26
   12f78:	41c72600 	bicmi	r2, r7, r0, lsl #12
   12f7c:	41c70000 	bicmi	r0, r7, r0
   12f80:	a1090000 	mrsge	r0, (UNDEF: 9)
   12f84:	0a34000c 	beq	d12fbc <__ccfg+0xcf3014>
   12f88:	00040000 	andeq	r0, r4, r0
   12f8c:	000045d3 	ldrdeq	r4, [r0], -r3
   12f90:	40140104 	andsmi	r0, r4, r4, lsl #2
   12f94:	7d0c0000 	stcvc	0, cr0, [ip, #-0]
   12f98:	be000042 	cdplt	0, 0, cr0, cr0, cr2, {2}
   12f9c:	20000042 	andcs	r0, r0, r2, asr #32
   12fa0:	2c000041 	stccs	0, cr0, [r0], {65}	; 0x41
   12fa4:	ca000000 	bgt	12fac <__exidx_end+0xe07c>
   12fa8:	02000089 	andeq	r0, r0, #137	; 0x89
   12fac:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   12fb0:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
   12fb4:	00039c07 	andeq	r9, r3, r7, lsl #24
   12fb8:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
   12fbc:	000005e8 	andeq	r0, r0, r8, ror #11
   12fc0:	e5040803 	str	r0, [r4, #-2051]	; 0xfffff7fd
   12fc4:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   12fc8:	00000896 	muleq	r0, r6, r8
   12fcc:	17016502 	strne	r6, [r1, -r2, lsl #10]
   12fd0:	0000002c 	andeq	r0, r0, ip, lsr #32
   12fd4:	de060103 	adfles	f0, f6, f3
   12fd8:	03000008 	movweq	r0, #8
   12fdc:	08dc0801 	ldmeq	ip, {r0, fp}^
   12fe0:	02030000 	andeq	r0, r3, #0
   12fe4:	0007a305 	andeq	sl, r7, r5, lsl #6
   12fe8:	07020300 	streq	r0, [r2, -r0, lsl #6]
   12fec:	000009aa 	andeq	r0, r0, sl, lsr #19
   12ff0:	ed050403 	cfstrs	mvf0, [r5, #-12]
   12ff4:	03000005 	movweq	r0, #5
   12ff8:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
   12ffc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13000:	00039207 	andeq	r9, r3, r7, lsl #4
   13004:	077a0500 	ldrbeq	r0, [sl, -r0, lsl #10]!
   13008:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
   1300c:	0000331e 	andeq	r3, r0, lr, lsl r3
   13010:	09e60500 	stmibeq	r6!, {r8, sl}^
   13014:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
   13018:	00006a0e 	andeq	r6, r0, lr, lsl #20
   1301c:	026b0500 	rsbeq	r0, fp, #0, 10
   13020:	74040000 	strvc	r0, [r4], #-0
   13024:	00006a0e 	andeq	r6, r0, lr, lsl #20
   13028:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
   1302c:	00c503a5 	sbceq	r0, r5, r5, lsr #7
   13030:	8b070000 	blhi	1d3038 <__ccfg+0x1b3090>
   13034:	04000005 	streq	r0, [r0], #-5
   13038:	00410ca7 	subeq	r0, r1, r7, lsr #25
   1303c:	ea070000 	b	1d3044 <__ccfg+0x1b309c>
   13040:	04000007 	streq	r0, [r0], #-7
   13044:	00c513a8 	sbceq	r1, r5, r8, lsr #7
   13048:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   1304c:	00000055 	andeq	r0, r0, r5, asr r0
   13050:	000000d5 	ldrdeq	r0, [r0], -r5
   13054:	00002c09 	andeq	r2, r0, r9, lsl #24
   13058:	0a000300 	beq	13c60 <__exidx_end+0xed30>
   1305c:	09a20408 	stmibeq	r2!, {r3, sl}
   13060:	000000f9 	strdeq	r0, [r0], -r9
   13064:	0003260b 	andeq	r2, r3, fp, lsl #12
   13068:	07a40400 	streq	r0, [r4, r0, lsl #8]!
   1306c:	00000025 	andeq	r0, r0, r5, lsr #32
   13070:	04ae0b00 	strteq	r0, [lr], #2816	; 0xb00
   13074:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   13078:	0000a305 	andeq	sl, r0, r5, lsl #6
   1307c:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
   13080:	000006a9 	andeq	r0, r0, r9, lsr #13
   13084:	d503aa04 	strle	sl, [r3, #-2564]	; 0xfffff5fc
   13088:	0c000000 	stceq	0, cr0, [r0], {-0}
   1308c:	41d70504 	bicsmi	r0, r7, r4, lsl #10
   13090:	d2040000 	andle	r0, r4, #0
   13094:	00006a0f 	andeq	r6, r0, pc, lsl #20
   13098:	062d0500 	strteq	r0, [sp], -r0, lsl #10
   1309c:	16050000 	strne	r0, [r5], -r0
   130a0:	00007119 	andeq	r7, r0, r9, lsl r1
   130a4:	01fe0500 	mvnseq	r0, r0, lsl #10
   130a8:	0c060000 	stceq	0, cr0, [r6], {-0}
   130ac:	0000250d 	andeq	r2, r0, sp, lsl #10
   130b0:	05590500 	ldrbeq	r0, [r9, #-1280]	; 0xfffffb00
   130b4:	23050000 	movwcs	r0, #20480	; 0x5000
   130b8:	00011f1b 	andeq	r1, r1, fp, lsl pc
   130bc:	02ab0d00 	adceq	r0, fp, #0, 26
   130c0:	05180000 	ldreq	r0, [r8, #-0]
   130c4:	01910834 	orrseq	r0, r1, r4, lsr r8
   130c8:	400b0000 	andmi	r0, fp, r0
   130cc:	0500000a 	streq	r0, [r0, #-10]
   130d0:	01911336 	orrseq	r1, r1, r6, lsr r3
   130d4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   130d8:	05006b5f 	streq	r6, [r0, #-2911]	; 0xfffff4a1
   130dc:	00250737 	eoreq	r0, r5, r7, lsr r7
   130e0:	0b040000 	bleq	1130e8 <__ccfg+0xf3140>
   130e4:	00000845 	andeq	r0, r0, r5, asr #16
   130e8:	250b3705 	strcs	r3, [fp, #-1797]	; 0xfffff8fb
   130ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   130f0:	003eb00b 	eorseq	fp, lr, fp
   130f4:	14370500 	ldrtne	r0, [r7], #-1280	; 0xfffffb00
   130f8:	00000025 	andeq	r0, r0, r5, lsr #32
   130fc:	03be0b0c 			; <UNDEFINED> instruction: 0x03be0b0c
   13100:	37050000 	strcc	r0, [r5, -r0]
   13104:	0000251b 	andeq	r2, r0, fp, lsl r5
   13108:	5f0e1000 	svcpl	0x000e1000
   1310c:	38050078 	stmdacc	r5, {r3, r4, r5, r6}
   13110:	0001970b 	andeq	r9, r1, fp, lsl #14
   13114:	0f001400 	svceq	0x00001400
   13118:	00013704 	andeq	r3, r1, r4, lsl #14
   1311c:	01130800 	tsteq	r3, r0, lsl #16
   13120:	01a70000 			; <UNDEFINED> instruction: 0x01a70000
   13124:	2c090000 	stccs	0, cr0, [r9], {-0}
   13128:	00000000 	andeq	r0, r0, r0
   1312c:	08600d00 	stmdaeq	r0!, {r8, sl, fp}^
   13130:	05240000 	streq	r0, [r4, #-0]!
   13134:	022a083c 	eoreq	r0, sl, #60, 16	; 0x3c0000
   13138:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
   1313c:	05000004 	streq	r0, [r0, #-4]
   13140:	0025093e 	eoreq	r0, r5, lr, lsr r9
   13144:	0b000000 	bleq	1314c <__exidx_end+0xe21c>
   13148:	00000358 	andeq	r0, r0, r8, asr r3
   1314c:	25093f05 	strcs	r3, [r9, #-3845]	; 0xfffff0fb
   13150:	04000000 	streq	r0, [r0], #-0
   13154:	0003010b 	andeq	r0, r3, fp, lsl #2
   13158:	09400500 	stmdbeq	r0, {r8, sl}^
   1315c:	00000025 	andeq	r0, r0, r5, lsr #32
   13160:	050f0b08 	streq	r0, [pc, #-2824]	; 12660 <__exidx_end+0xd730>
   13164:	41050000 	mrsmi	r0, (UNDEF: 5)
   13168:	00002509 	andeq	r2, r0, r9, lsl #10
   1316c:	1d0b0c00 	stcne	12, cr0, [fp, #-0]
   13170:	05000007 	streq	r0, [r0, #-7]
   13174:	00250942 	eoreq	r0, r5, r2, asr #18
   13178:	0b100000 	bleq	413180 <__ccfg+0x3f31d8>
   1317c:	00000804 	andeq	r0, r0, r4, lsl #16
   13180:	25094305 	strcs	r4, [r9, #-773]	; 0xfffffcfb
   13184:	14000000 	strne	r0, [r0], #-0
   13188:	0002c60b 	andeq	ip, r2, fp, lsl #12
   1318c:	09440500 	stmdbeq	r4, {r8, sl}^
   13190:	00000025 	andeq	r0, r0, r5, lsr #32
   13194:	04570b18 	ldrbeq	r0, [r7], #-2840	; 0xfffff4e8
   13198:	45050000 	strmi	r0, [r5, #-0]
   1319c:	00002509 	andeq	r2, r0, r9, lsl #10
   131a0:	c70b1c00 	strgt	r1, [fp, -r0, lsl #24]
   131a4:	05000006 	streq	r0, [r0, #-6]
   131a8:	00250946 	eoreq	r0, r5, r6, asr #18
   131ac:	00200000 	eoreq	r0, r0, r0
   131b0:	00006110 	andeq	r6, r0, r0, lsl r1
   131b4:	05010800 	streq	r0, [r1, #-2048]	; 0xfffff800
   131b8:	026f084f 	rsbeq	r0, pc, #5177344	; 0x4f0000
   131bc:	740b0000 	strvc	r0, [fp], #-0
   131c0:	05000009 	streq	r0, [r0, #-9]
   131c4:	026f0a50 	rsbeq	r0, pc, #80, 20	; 0x50000
   131c8:	0b000000 	bleq	131d0 <__exidx_end+0xe2a0>
   131cc:	000008c0 	andeq	r0, r0, r0, asr #17
   131d0:	6f095105 	svcvs	0x00095105
   131d4:	80000002 	andhi	r0, r0, r2
   131d8:	0009dd11 	andeq	sp, r9, r1, lsl sp
   131dc:	0a530500 	beq	14d45e4 <__ccfg+0x14b463c>
   131e0:	00000113 	andeq	r0, r0, r3, lsl r1
   131e4:	2b110100 	blcs	4535ec <__ccfg+0x433644>
   131e8:	0500000a 	streq	r0, [r0, #-10]
   131ec:	01130a56 	tsteq	r3, r6, asr sl
   131f0:	01040000 	mrseq	r0, (UNDEF: 4)
   131f4:	01050800 	tsteq	r5, r0, lsl #16
   131f8:	027f0000 	rsbseq	r0, pc, #0
   131fc:	2c090000 	stccs	0, cr0, [r9], {-0}
   13200:	1f000000 	svcne	0x00000000
   13204:	078a1000 	streq	r1, [sl, r0]
   13208:	01900000 	orrseq	r0, r0, r0
   1320c:	c2086205 	andgt	r6, r8, #1342177280	; 0x50000000
   13210:	0b000002 	bleq	13220 <__exidx_end+0xe2f0>
   13214:	00000a40 	andeq	r0, r0, r0, asr #20
   13218:	c2126305 	andsgt	r6, r2, #335544320	; 0x14000000
   1321c:	00000002 	andeq	r0, r0, r2
   13220:	0004660b 	andeq	r6, r4, fp, lsl #12
   13224:	06640500 	strbteq	r0, [r4], -r0, lsl #10
   13228:	00000025 	andeq	r0, r0, r5, lsr #32
   1322c:	02730b04 	rsbseq	r0, r3, #4, 22	; 0x1000
   13230:	66050000 	strvs	r0, [r5], -r0
   13234:	0002c809 	andeq	ip, r2, r9, lsl #16
   13238:	610b0800 	tstvs	fp, r0, lsl #16
   1323c:	05000000 	streq	r0, [r0, #-0]
   13240:	022a1e67 	eoreq	r1, sl, #1648	; 0x670
   13244:	00880000 	addeq	r0, r8, r0
   13248:	027f040f 	rsbseq	r0, pc, #251658240	; 0xf000000
   1324c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
   13250:	d8000002 	stmdale	r0, {r1}
   13254:	09000002 	stmdbeq	r0, {r1}
   13258:	0000002c 	andeq	r0, r0, ip, lsr #32
   1325c:	040f001f 	streq	r0, [pc], #-31	; 13264 <__exidx_end+0xe334>
   13260:	000002de 	ldrdeq	r0, [r0], -lr
   13264:	093e0d12 	ldmdbeq	lr!, {r1, r4, r8, sl, fp}
   13268:	05080000 	streq	r0, [r8, #-0]
   1326c:	0307087a 	movweq	r0, #30842	; 0x787a
   13270:	040b0000 	streq	r0, [fp], #-0
   13274:	05000006 	streq	r0, [r0, #-6]
   13278:	0307117b 	movweq	r1, #29051	; 0x717b
   1327c:	0b000000 	bleq	13284 <__exidx_end+0xe354>
   13280:	000018cf 	andeq	r1, r0, pc, asr #17
   13284:	25067c05 	strcs	r7, [r6, #-3077]	; 0xfffff3fb
   13288:	04000000 	streq	r0, [r0], #-0
   1328c:	55040f00 	strpl	r0, [r4, #-3840]	; 0xfffff100
   13290:	0d000000 	stceq	0, cr0, [r0, #-0]
   13294:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
   13298:	08ba0568 	ldmeq	sl!, {r3, r5, r6, r8, sl}
   1329c:	00000450 	andeq	r0, r0, r0, asr r4
   132a0:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   132a4:	0712bb05 	ldreq	fp, [r2, -r5, lsl #22]
   132a8:	00000003 	andeq	r0, r0, r3
   132ac:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   132b0:	2507bc05 	strcs	fp, [r7, #-3077]	; 0xfffff3fb
   132b4:	04000000 	streq	r0, [r0], #-0
   132b8:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   132bc:	2507bd05 	strcs	fp, [r7, #-3333]	; 0xfffff2fb
   132c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   132c4:	0001e90b 	andeq	lr, r1, fp, lsl #18
   132c8:	09be0500 	ldmibeq	lr!, {r8, sl}
   132cc:	0000005c 	andeq	r0, r0, ip, asr r0
   132d0:	06620b0c 	strbteq	r0, [r2], -ip, lsl #22
   132d4:	bf050000 	svclt	0x00050000
   132d8:	00005c09 	andeq	r5, r0, r9, lsl #24
   132dc:	5f0e0e00 	svcpl	0x000e0e00
   132e0:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
   132e4:	02df11c0 	sbcseq	r1, pc, #192, 2	; 0x30
   132e8:	0b100000 	bleq	4132f0 <__ccfg+0x3f3348>
   132ec:	000001e0 	andeq	r0, r0, r0, ror #3
   132f0:	2507c105 	strcs	ip, [r7, #-261]	; 0xfffffefb
   132f4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   132f8:	0002780b 	andeq	r7, r2, fp, lsl #16
   132fc:	0ac80500 	beq	ff214704 <_estack+0xdf20f704>
   13300:	00000105 	andeq	r0, r0, r5, lsl #2
   13304:	185f0b1c 	ldmdane	pc, {r2, r3, r4, r8, r9, fp}^	; <UNPREDICTABLE>
   13308:	ca050000 	bgt	153310 <__ccfg+0x133368>
   1330c:	0005d41d 	andeq	sp, r5, sp, lsl r4
   13310:	260b2000 	strcs	r2, [fp], -r0
   13314:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
   13318:	05fe1dcc 	ldrbeq	r1, [lr, #3532]!	; 0xdcc
   1331c:	0b240000 	bleq	913324 <__ccfg+0x8f337c>
   13320:	00000a51 	andeq	r0, r0, r1, asr sl
   13324:	220dcf05 	andcs	ip, sp, #5, 30
   13328:	28000006 	stmdacs	r0, {r1, r2}
   1332c:	0018140b 	andseq	r1, r8, fp, lsl #8
   13330:	09d00500 	ldmibeq	r0, {r8, sl}^
   13334:	0000063c 	andeq	r0, r0, ip, lsr r6
   13338:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; 12514 <__exidx_end+0xd5e4>
   1333c:	d3050062 	movwle	r0, #20578	; 0x5062
   13340:	0002df11 	andeq	sp, r2, r1, lsl pc
   13344:	5f0e3000 	svcpl	0x000e3000
   13348:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
   1334c:	030712d4 	movweq	r1, #29396	; 0x72d4
   13350:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
   13354:	0072755f 	rsbseq	r7, r2, pc, asr r5
   13358:	2507d505 	strcs	sp, [r7, #-1285]	; 0xfffffafb
   1335c:	3c000000 	stccc	0, cr0, [r0], {-0}
   13360:	000a680b 	andeq	r6, sl, fp, lsl #16
   13364:	11d80500 	bicsne	r0, r8, r0, lsl #10
   13368:	00000642 	andeq	r0, r0, r2, asr #12
   1336c:	09f70b40 	ldmibeq	r7!, {r6, r8, r9, fp}^
   13370:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
   13374:	00065211 	andeq	r5, r6, r1, lsl r2
   13378:	5f0e4300 	svcpl	0x000e4300
   1337c:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
   13380:	02df11dc 	sbcseq	r1, pc, #220, 2	; 0x37
   13384:	0b440000 	bleq	111338c <__ccfg+0x10f33e4>
   13388:	00000857 	andeq	r0, r0, r7, asr r8
   1338c:	2507df05 	strcs	sp, [r7, #-3845]	; 0xfffff0fb
   13390:	4c000000 	stcmi	0, cr0, [r0], {-0}
   13394:	0004030b 	andeq	r0, r4, fp, lsl #6
   13398:	0ae00500 	beq	ff8147a0 <_estack+0xdf80f7a0>
   1339c:	0000008b 	andeq	r0, r0, fp, lsl #1
   133a0:	432e0b50 			; <UNDEFINED> instruction: 0x432e0b50
   133a4:	e3050000 	movw	r0, #20480	; 0x5000
   133a8:	00046e12 	andeq	r6, r4, r2, lsl lr
   133ac:	6f0b5400 	svcvs	0x000b5400
   133b0:	05000008 	streq	r0, [r0, #-8]
   133b4:	012b0ce7 	smulwteq	fp, r7, ip
   133b8:	0b580000 	bleq	16133c0 <__ccfg+0x15f3418>
   133bc:	00000792 	muleq	r0, r2, r7
   133c0:	f90ee905 			; <UNDEFINED> instruction: 0xf90ee905
   133c4:	5c000000 	stcpl	0, cr0, [r0], {-0}
   133c8:	000a230b 	andeq	r2, sl, fp, lsl #6
   133cc:	09ea0500 	stmibeq	sl!, {r8, sl}^
   133d0:	00000025 	andeq	r0, r0, r5, lsr #32
   133d4:	25130064 	ldrcs	r0, [r3, #-100]	; 0xffffff9c
   133d8:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
   133dc:	14000004 	strne	r0, [r0], #-4
   133e0:	0000046e 	andeq	r0, r0, lr, ror #8
   133e4:	00010514 	andeq	r0, r1, r4, lsl r5
   133e8:	05c21400 	strbeq	r1, [r2, #1024]	; 0x400
   133ec:	25140000 	ldrcs	r0, [r4, #-0]
   133f0:	00000000 	andeq	r0, r0, r0
   133f4:	0479040f 	ldrbteq	r0, [r9], #-1039	; 0xfffffbf1
   133f8:	6e150000 	cdpvs	0, 1, cr0, cr5, cr0, {0}
   133fc:	16000004 	strne	r0, [r0], -r4
   13400:	0000436c 	andeq	r4, r0, ip, ror #6
   13404:	65050428 	strvs	r0, [r5, #-1064]	; 0xfffffbd8
   13408:	05c20802 	strbeq	r0, [r2, #2050]	; 0x802
   1340c:	f8170000 			; <UNDEFINED> instruction: 0xf8170000
   13410:	05000006 	streq	r0, [r0, #-6]
   13414:	25070267 	strcs	r0, [r7, #-615]	; 0xfffffd99
   13418:	00000000 	andeq	r0, r0, r0
   1341c:	0005d217 	andeq	sp, r5, r7, lsl r2
   13420:	026c0500 	rsbeq	r0, ip, #0, 10
   13424:	0006ae0b 	andeq	sl, r6, fp, lsl #28
   13428:	55170400 	ldrpl	r0, [r7, #-1024]	; 0xfffffc00
   1342c:	05000002 	streq	r0, [r0, #-2]
   13430:	ae14026c 	cdpge	2, 1, cr0, cr4, cr12, {3}
   13434:	08000006 	stmdaeq	r0, {r1, r2}
   13438:	000a5717 	andeq	r5, sl, r7, lsl r7
   1343c:	026c0500 	rsbeq	r0, ip, #0, 10
   13440:	0006ae1e 	andeq	sl, r6, lr, lsl lr
   13444:	61170c00 	tstvs	r7, r0, lsl #24
   13448:	05000004 	streq	r0, [r0, #-4]
   1344c:	2508026e 	strcs	r0, [r8, #-622]	; 0xfffffd92
   13450:	10000000 	andne	r0, r0, r0
   13454:	00041317 	andeq	r1, r4, r7, lsl r3
   13458:	026f0500 	rsbeq	r0, pc, #0, 10
   1345c:	0008ae08 	andeq	sl, r8, r8, lsl #28
   13460:	0a171400 	beq	5d8468 <__ccfg+0x5b84c0>
   13464:	0500000a 	streq	r0, [r0, #-10]
   13468:	25070272 	strcs	r0, [r7, #-626]	; 0xfffffd8e
   1346c:	30000000 	andcc	r0, r0, r0
   13470:	003d5c17 	eorseq	r5, sp, r7, lsl ip
   13474:	02730500 	rsbseq	r0, r3, #0, 10
   13478:	0008c316 	andeq	ip, r8, r6, lsl r3
   1347c:	a5173400 	ldrge	r3, [r7, #-1024]	; 0xfffffc00
   13480:	05000005 	streq	r0, [r0, #-5]
   13484:	25070275 	strcs	r0, [r7, #-629]	; 0xfffffd8b
   13488:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   1348c:	00069f17 	andeq	r9, r6, r7, lsl pc
   13490:	02770500 	rsbseq	r0, r7, #0, 10
   13494:	0008d40a 	andeq	sp, r8, sl, lsl #8
   13498:	d0173c00 	andsle	r3, r7, r0, lsl #24
   1349c:	05000002 	streq	r0, [r0, #-2]
   134a0:	9113027a 	tstls	r3, sl, ror r2
   134a4:	40000001 	andmi	r0, r0, r1
   134a8:	00037c17 	andeq	r7, r3, r7, lsl ip
   134ac:	027b0500 	rsbseq	r0, fp, #0, 10
   134b0:	00002507 	andeq	r2, r0, r7, lsl #10
   134b4:	b6174400 	ldrlt	r4, [r7], -r0, lsl #8
   134b8:	05000004 	streq	r0, [r0, #-4]
   134bc:	9113027c 	tstls	r3, ip, ror r2
   134c0:	48000001 	stmdami	r0, {r0}
   134c4:	00060a17 	andeq	r0, r6, r7, lsl sl
   134c8:	027d0500 	rsbseq	r0, sp, #0, 10
   134cc:	0008da14 	andeq	sp, r8, r4, lsl sl
   134d0:	3d174c00 	ldccc	12, cr4, [r7, #-0]
   134d4:	05000008 	streq	r0, [r0, #-8]
   134d8:	25070280 	strcs	r0, [r7, #-640]	; 0xfffffd80
   134dc:	50000000 	andpl	r0, r0, r0
   134e0:	0008d417 	andeq	sp, r8, r7, lsl r4
   134e4:	02810500 	addeq	r0, r1, #0, 10
   134e8:	0005c209 	andeq	ip, r5, r9, lsl #4
   134ec:	ee175400 	cfmuls	mvf5, mvf7, mvf0
   134f0:	05000008 	streq	r0, [r0, #-8]
   134f4:	890702a4 	stmdbhi	r7, {r2, r5, r7, r9}
   134f8:	58000008 	stmdapl	r0, {r3}
   134fc:	00078a18 	andeq	r8, r7, r8, lsl sl
   13500:	02a80500 	adceq	r0, r8, #0, 10
   13504:	0002c213 	andeq	ip, r2, r3, lsl r2
   13508:	18014800 	stmdane	r1, {fp, lr}
   1350c:	00000532 	andeq	r0, r0, r2, lsr r5
   13510:	1202a905 	andne	sl, r2, #81920	; 0x14000
   13514:	0000027f 	andeq	r0, r0, pc, ror r2
   13518:	1918014c 	ldmdbne	r8, {r2, r3, r6, r8}
   1351c:	05000005 	streq	r0, [r0, #-5]
   13520:	eb0c02ad 	bl	313fdc <__ccfg+0x2f4034>
   13524:	dc000008 	stcle	0, cr0, [r0], {8}
   13528:	09511802 	ldmdbeq	r1, {r1, fp, ip}^
   1352c:	b2050000 	andlt	r0, r5, #0
   13530:	066f1002 	strbteq	r1, [pc], -r2
   13534:	02e00000 	rsceq	r0, r0, #0
   13538:	0007cb18 	andeq	ip, r7, r8, lsl fp
   1353c:	02b40500 	adcseq	r0, r4, #0, 10
   13540:	0008f70a 	andeq	pc, r8, sl, lsl #14
   13544:	0002ec00 	andeq	lr, r2, r0, lsl #24
   13548:	05c8040f 	strbeq	r0, [r8, #1039]	; 0x40f
   1354c:	01030000 	mrseq	r0, (UNDEF: 3)
   13550:	0008e508 	andeq	lr, r8, r8, lsl #10
   13554:	05c81500 	strbeq	r1, [r8, #1280]	; 0x500
   13558:	040f0000 	streq	r0, [pc], #-0	; 13560 <__exidx_end+0xe630>
   1355c:	00000450 	andeq	r0, r0, r0, asr r4
   13560:	00002513 	andeq	r2, r0, r3, lsl r5
   13564:	0005f800 	andeq	pc, r5, r0, lsl #16
   13568:	046e1400 	strbteq	r1, [lr], #-1024	; 0xfffffc00
   1356c:	05140000 	ldreq	r0, [r4, #-0]
   13570:	14000001 	strne	r0, [r0], #-1
   13574:	000005f8 	strdeq	r0, [r0], -r8
   13578:	00002514 	andeq	r2, r0, r4, lsl r5
   1357c:	040f0000 	streq	r0, [pc], #-0	; 13584 <__exidx_end+0xe654>
   13580:	000005cf 	andeq	r0, r0, pc, asr #11
   13584:	05da040f 	ldrbeq	r0, [sl, #1039]	; 0x40f
   13588:	97130000 	ldrls	r0, [r3, -r0]
   1358c:	22000000 	andcs	r0, r0, #0
   13590:	14000006 	strne	r0, [r0], #-6
   13594:	0000046e 	andeq	r0, r0, lr, ror #8
   13598:	00010514 	andeq	r0, r1, r4, lsl r5
   1359c:	00971400 	addseq	r1, r7, r0, lsl #8
   135a0:	25140000 	ldrcs	r0, [r4, #-0]
   135a4:	00000000 	andeq	r0, r0, r0
   135a8:	0604040f 	streq	r0, [r4], -pc, lsl #8
   135ac:	25130000 	ldrcs	r0, [r3, #-0]
   135b0:	3c000000 	stccc	0, cr0, [r0], {-0}
   135b4:	14000006 	strne	r0, [r0], #-6
   135b8:	0000046e 	andeq	r0, r0, lr, ror #8
   135bc:	00010514 	andeq	r0, r1, r4, lsl r5
   135c0:	040f0000 	streq	r0, [pc], #-0	; 135c8 <__exidx_end+0xe698>
   135c4:	00000628 	andeq	r0, r0, r8, lsr #12
   135c8:	00005508 	andeq	r5, r0, r8, lsl #10
   135cc:	00065200 	andeq	r5, r6, r0, lsl #4
   135d0:	002c0900 	eoreq	r0, ip, r0, lsl #18
   135d4:	00020000 	andeq	r0, r2, r0
   135d8:	00005508 	andeq	r5, r0, r8, lsl #10
   135dc:	00066200 	andeq	r6, r6, r0, lsl #4
   135e0:	002c0900 	eoreq	r0, ip, r0, lsl #18
   135e4:	00000000 	andeq	r0, r0, r0
   135e8:	0003f104 	andeq	pc, r3, r4, lsl #2
   135ec:	01240500 			; <UNDEFINED> instruction: 0x01240500
   135f0:	00030d1a 	andeq	r0, r3, sl, lsl sp
   135f4:	43821900 	orrmi	r1, r2, #0, 18
   135f8:	050c0000 	streq	r0, [ip, #-0]
   135fc:	a8080128 	stmdage	r8, {r3, r5, r8}
   13600:	17000006 	strne	r0, [r0, -r6]
   13604:	00000a40 	andeq	r0, r0, r0, asr #20
   13608:	11012a05 	tstne	r1, r5, lsl #20
   1360c:	000006a8 	andeq	r0, r0, r8, lsr #13
   13610:	088f1700 	stmeq	pc, {r8, r9, sl, ip}	; <UNPREDICTABLE>
   13614:	2b050000 	blcs	15361c <__ccfg+0x133674>
   13618:	00250701 	eoreq	r0, r5, r1, lsl #14
   1361c:	17040000 	strne	r0, [r4, -r0]
   13620:	00000591 	muleq	r0, r1, r5
   13624:	0b012c05 	bleq	5e640 <__ccfg+0x3e698>
   13628:	000006ae 	andeq	r0, r0, lr, lsr #13
   1362c:	040f0008 	streq	r0, [pc], #-8	; 13634 <__exidx_end+0xe704>
   13630:	0000066f 	andeq	r0, r0, pc, ror #12
   13634:	0662040f 	strbteq	r0, [r2], -pc, lsl #8
   13638:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
   1363c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   13640:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
   13644:	000006ed 	andeq	r0, r0, sp, ror #13
   13648:	00118817 	andseq	r8, r1, r7, lsl r8
   1364c:	01450500 	cmpeq	r5, r0, lsl #10
   13650:	0006ed12 	andeq	lr, r6, r2, lsl sp
   13654:	1c170000 	ldcne	0, cr0, [r7], {-0}
   13658:	05000006 	streq	r0, [r0, #-6]
   1365c:	ed120146 	ldfs	f0, [r2, #-280]	; 0xfffffee8
   13660:	06000006 	streq	r0, [r0], -r6
   13664:	00102d17 	andseq	r2, r0, r7, lsl sp
   13668:	01470500 	cmpeq	r7, r0, lsl #10
   1366c:	00006312 	andeq	r6, r0, r2, lsl r3
   13670:	08000c00 	stmdaeq	r0, {sl, fp}
   13674:	00000063 	andeq	r0, r0, r3, rrx
   13678:	000006fd 	strdeq	r0, [r0], -sp
   1367c:	00002c09 	andeq	r2, r0, r9, lsl #24
   13680:	1a000200 	bne	13e88 <__exidx_end+0xef58>
   13684:	028505d0 	addeq	r0, r5, #208, 10	; 0x34000000
   13688:	00081207 	andeq	r1, r8, r7, lsl #4
   1368c:	09fd1700 	ldmibeq	sp!, {r8, r9, sl, ip}^
   13690:	87050000 	strhi	r0, [r5, -r0]
   13694:	002c1802 	eoreq	r1, ip, r2, lsl #16
   13698:	17000000 	strne	r0, [r0, -r0]
   1369c:	00000959 	andeq	r0, r0, r9, asr r9
   136a0:	12028805 	andne	r8, r2, #327680	; 0x50000
   136a4:	000005c2 	andeq	r0, r0, r2, asr #11
   136a8:	03a91704 			; <UNDEFINED> instruction: 0x03a91704
   136ac:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
   136b0:	08121002 	ldmdaeq	r2, {r1, ip}
   136b4:	17080000 	strne	r0, [r8, -r0]
   136b8:	0000081c 	andeq	r0, r0, ip, lsl r8
   136bc:	17028a05 	strne	r8, [r2, -r5, lsl #20]
   136c0:	000001a7 	andeq	r0, r0, r7, lsr #3
   136c4:	05d91724 	ldrbeq	r1, [r9, #1828]	; 0x724
   136c8:	8b050000 	blhi	1536d0 <__ccfg+0x133728>
   136cc:	00250f02 	eoreq	r0, r5, r2, lsl #30
   136d0:	17480000 	strbne	r0, [r8, -r0]
   136d4:	00000a3b 	andeq	r0, r0, fp, lsr sl
   136d8:	2c028c05 	stccs	12, cr8, [r2], {5}
   136dc:	00000078 	andeq	r0, r0, r8, ror r0
   136e0:	00851750 	addeq	r1, r5, r0, asr r7
   136e4:	8d050000 	stchi	0, cr0, [r5, #-0]
   136e8:	06b41a02 	ldrteq	r1, [r4], r2, lsl #20
   136ec:	17580000 	ldrbne	r0, [r8, -r0]
   136f0:	000004ee 	andeq	r0, r0, lr, ror #9
   136f4:	16028e05 	strne	r8, [r2], -r5, lsl #28
   136f8:	000000f9 	strdeq	r0, [r0], -r9
   136fc:	09661768 	stmdbeq	r6!, {r3, r5, r6, r8, r9, sl, ip}^
   13700:	8f050000 	svchi	0x00050000
   13704:	00f91602 	rscseq	r1, r9, r2, lsl #12
   13708:	17700000 	ldrbne	r0, [r0, -r0]!
   1370c:	0000006f 	andeq	r0, r0, pc, rrx
   13710:	16029005 	strne	r9, [r2], -r5
   13714:	000000f9 	strdeq	r0, [r0], -r9
   13718:	084d1778 	stmdaeq	sp, {r3, r4, r5, r6, r8, r9, sl, ip}^
   1371c:	91050000 	mrsls	r0, (UNDEF: 5)
   13720:	08221002 	stmdaeq	r2!, {r1, ip}
   13724:	17800000 	strne	r0, [r0, r0]
   13728:	00000386 	andeq	r0, r0, r6, lsl #7
   1372c:	10029205 	andne	r9, r2, r5, lsl #4
   13730:	00000832 	andeq	r0, r0, r2, lsr r8
   13734:	09111788 	ldmdbeq	r1, {r3, r7, r8, r9, sl, ip}
   13738:	93050000 	movwls	r0, #20480	; 0x5000
   1373c:	00250f02 	eoreq	r0, r5, r2, lsl #30
   13740:	17a00000 	strne	r0, [r0, r0]!
   13744:	00000229 	andeq	r0, r0, r9, lsr #4
   13748:	16029405 	strne	r9, [r2], -r5, lsl #8
   1374c:	000000f9 	strdeq	r0, [r0], -r9
   13750:	052317a4 	streq	r1, [r3, #-1956]!	; 0xfffff85c
   13754:	95050000 	strls	r0, [r5, #-0]
   13758:	00f91602 	rscseq	r1, r9, r2, lsl #12
   1375c:	17ac0000 	strne	r0, [ip, r0]!
   13760:	0000046b 	andeq	r0, r0, fp, ror #8
   13764:	16029605 	strne	r9, [r2], -r5, lsl #12
   13768:	000000f9 	strdeq	r0, [r0], -r9
   1376c:	065317b4 			; <UNDEFINED> instruction: 0x065317b4
   13770:	97050000 	strls	r0, [r5, -r0]
   13774:	00f91602 	rscseq	r1, r9, r2, lsl #12
   13778:	17bc0000 	ldrne	r0, [ip, r0]!
   1377c:	000004dd 	ldrdeq	r0, [r0], -sp
   13780:	16029805 	strne	r9, [r2], -r5, lsl #16
   13784:	000000f9 	strdeq	r0, [r0], -r9
   13788:	06f617c4 	ldrbteq	r1, [r6], r4, asr #15
   1378c:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
   13790:	00250802 	eoreq	r0, r5, r2, lsl #16
   13794:	00cc0000 	sbceq	r0, ip, r0
   13798:	0005c808 	andeq	ip, r5, r8, lsl #16
   1379c:	00082200 	andeq	r2, r8, r0, lsl #4
   137a0:	002c0900 	eoreq	r0, ip, r0, lsl #18
   137a4:	00190000 	andseq	r0, r9, r0
   137a8:	0005c808 	andeq	ip, r5, r8, lsl #16
   137ac:	00083200 	andeq	r3, r8, r0, lsl #4
   137b0:	002c0900 	eoreq	r0, ip, r0, lsl #18
   137b4:	00070000 	andeq	r0, r7, r0
   137b8:	0005c808 	andeq	ip, r5, r8, lsl #16
   137bc:	00084200 	andeq	r4, r8, r0, lsl #4
   137c0:	002c0900 	eoreq	r0, ip, r0, lsl #18
   137c4:	00170000 	andseq	r0, r7, r0
   137c8:	9e05f01a 	mcrls	0, 0, pc, cr5, cr10, {0}	; <UNPREDICTABLE>
   137cc:	08690702 	stmdaeq	r9!, {r1, r8, r9, sl}^
   137d0:	61170000 	tstvs	r7, r0
   137d4:	05000003 	streq	r0, [r0, #-3]
   137d8:	691b02a1 	ldmdbvs	fp, {r0, r5, r7, r9}
   137dc:	00000008 	andeq	r0, r0, r8
   137e0:	000a5f17 	andeq	r5, sl, r7, lsl pc
   137e4:	02a20500 	adceq	r0, r2, #0, 10
   137e8:	00087918 	andeq	r7, r8, r8, lsl r9
   137ec:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
   137f0:	00000307 	andeq	r0, r0, r7, lsl #6
   137f4:	00000879 	andeq	r0, r0, r9, ror r8
   137f8:	00002c09 	andeq	r2, r0, r9, lsl #24
   137fc:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
   13800:	0000002c 	andeq	r0, r0, ip, lsr #32
   13804:	00000889 	andeq	r0, r0, r9, lsl #17
   13808:	00002c09 	andeq	r2, r0, r9, lsl #24
   1380c:	1b001d00 	blne	1ac14 <__exidx_end+0x15ce4>
   13810:	028305f0 	addeq	r0, r3, #240, 10	; 0x3c000000
   13814:	0008ae03 	andeq	sl, r8, r3, lsl #28
   13818:	436c1c00 	cmnmi	ip, #0, 24
   1381c:	9a050000 	bls	153824 <__ccfg+0x13387c>
   13820:	06fd0b02 	ldrbteq	r0, [sp], r2, lsl #22
   13824:	2b1c0000 	blcs	71382c <__ccfg+0x6f3884>
   13828:	05000008 	streq	r0, [r0, #-8]
   1382c:	420b02a3 	andmi	r0, fp, #805306378	; 0x3000000a
   13830:	00000008 	andeq	r0, r0, r8
   13834:	0005c808 	andeq	ip, r5, r8, lsl #16
   13838:	0008be00 	andeq	fp, r8, r0, lsl #28
   1383c:	002c0900 	eoreq	r0, ip, r0, lsl #18
   13840:	00180000 	andseq	r0, r8, r0
   13844:	000a461d 	andeq	r4, sl, sp, lsl r6
   13848:	be040f00 	cdplt	15, 0, cr0, cr4, cr0, {0}
   1384c:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   13850:	000008d4 	ldrdeq	r0, [r0], -r4
   13854:	00046e14 	andeq	r6, r4, r4, lsl lr
   13858:	040f0000 	streq	r0, [pc], #-0	; 13860 <__exidx_end+0xe930>
   1385c:	000008c9 	andeq	r0, r0, r9, asr #17
   13860:	0191040f 	orrseq	r0, r1, pc, lsl #8
   13864:	eb1e0000 	bl	79386c <__ccfg+0x7738c4>
   13868:	14000008 	strne	r0, [r0], #-8
   1386c:	00000025 	andeq	r0, r0, r5, lsr #32
   13870:	f1040f00 			; <UNDEFINED> instruction: 0xf1040f00
   13874:	0f000008 	svceq	0x00000008
   13878:	0008e004 	andeq	lr, r8, r4
   1387c:	06620800 	strbteq	r0, [r2], -r0, lsl #16
   13880:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
   13884:	2c090000 	stccs	0, cr0, [r9], {-0}
   13888:	02000000 	andeq	r0, r0, #0
   1388c:	07f81f00 	ldrbeq	r1, [r8, r0, lsl #30]!
   13890:	33050000 	movwcc	r0, #20480	; 0x5000
   13894:	046e1703 	strbteq	r1, [lr], #-1795	; 0xfffff8fd
   13898:	f11f0000 			; <UNDEFINED> instruction: 0xf11f0000
   1389c:	05000007 	streq	r0, [r0, #-7]
   138a0:	741d0334 	ldrvc	r0, [sp], #-820	; 0xfffffccc
   138a4:	05000004 	streq	r0, [r0, #-4]
   138a8:	000041d9 	ldrdeq	r4, [r0], -r9
   138ac:	07172507 	ldreq	r2, [r7, -r7, lsl #10]
   138b0:	05000001 	streq	r0, [r0, #-1]
   138b4:	0000059e 	muleq	r0, lr, r5
   138b8:	7f122a07 	svcvc	0x00122a07
   138bc:	0d000000 	stceq	0, cr0, [r0, #-0]
   138c0:	00004312 	andeq	r4, r0, r2, lsl r3
   138c4:	08360710 	ldmdaeq	r6!, {r4, r8, r9, sl}
   138c8:	00000961 	andeq	r0, r0, r1, ror #18
   138cc:	0042120b 	subeq	r1, r2, fp, lsl #4
   138d0:	0a370700 	beq	dd54d8 <__ccfg+0xdb5530>
   138d4:	0000092d 	andeq	r0, r0, sp, lsr #18
   138d8:	42750b00 	rsbsmi	r0, r5, #0, 22
   138dc:	38070000 	stmdacc	r7, {}	; <UNPREDICTABLE>
   138e0:	0009210e 	andeq	r2, r9, lr, lsl #2
   138e4:	20000800 	andcs	r0, r0, r0, lsl #16
   138e8:	0000426b 	andeq	r4, r0, fp, ror #4
   138ec:	6a169a08 	bvs	5ba114 <__ccfg+0x59a16c>
   138f0:	20000000 	andcs	r0, r0, r0
   138f4:	000041b5 			; <UNDEFINED> instruction: 0x000041b5
   138f8:	25159b08 	ldrcs	r9, [r5, #-2824]	; 0xfffff4f8
   138fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13900:	000005c2 	andeq	r0, r0, r2, asr #11
   13904:	00000989 	andeq	r0, r0, r9, lsl #19
   13908:	00002c09 	andeq	r2, r0, r9, lsl #24
   1390c:	20000100 	andcs	r0, r0, r0, lsl #2
   13910:	000041bf 			; <UNDEFINED> instruction: 0x000041bf
   13914:	79179e08 	ldmdbvc	r7, {r3, r9, sl, fp, ip, pc}
   13918:	20000009 	andcs	r0, r0, r9
   1391c:	000006f9 	strdeq	r0, [r0], -r9
   13920:	250c1d01 	strcs	r1, [ip, #-3329]	; 0xfffff2ff
   13924:	21000000 	mrscs	r0, (UNDEF: 0)
   13928:	000041c7 	andeq	r4, r0, r7, asr #3
   1392c:	250ca109 	strcs	sl, [ip, #-265]	; 0xfffffef7
   13930:	20000000 	andcs	r0, r0, r0
   13934:	2c000041 	stccs	0, cr0, [r0], {65}	; 0x41
   13938:	01000000 	mrseq	r0, (UNDEF: 0)
   1393c:	000a249c 	muleq	sl, ip, r4
   13940:	74702200 	ldrbtvc	r2, [r0], #-512	; 0xfffffe00
   13944:	37010072 	smlsdxcc	r1, r2, r0, r0
   13948:	00046e21 	andeq	r6, r4, r1, lsr #28
   1394c:	00576e00 	subseq	r6, r7, r0, lsl #28
   13950:	00576600 	subseq	r6, r7, r0, lsl #12
   13954:	43112300 	tstmi	r1, #0, 6
   13958:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
   1395c:	000a2416 	andeq	r2, sl, r6, lsl r4
   13960:	0057ab00 	subseq	sl, r7, r0, lsl #22
   13964:	0057a500 	subseq	sl, r7, r0, lsl #10
   13968:	42b42300 	adcsmi	r2, r4, #0, 6
   1396c:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
   13970:	0001050c 	andeq	r0, r1, ip, lsl #10
   13974:	0057db00 	subseq	sp, r7, r0, lsl #22
   13978:	0057d700 	subseq	sp, r7, r0, lsl #14
   1397c:	65722400 	ldrbvs	r2, [r2, #-1024]!	; 0xfffffc00
   13980:	3b010074 	blcc	53b58 <__ccfg+0x33bb0>
   13984:	00002507 	andeq	r2, r0, r7, lsl #10
   13988:	0057fe00 	subseq	pc, r7, r0, lsl #28
   1398c:	0057fc00 	subseq	pc, r7, r0, lsl #24
   13990:	41322500 	teqmi	r2, r0, lsl #10
   13994:	0a2a0000 	beq	a9399c <__ccfg+0xa739f4>
   13998:	01260000 			; <UNDEFINED> instruction: 0x01260000
   1399c:	01f30350 	mvnseq	r0, r0, asr r3
   139a0:	51012651 	tstpl	r1, r1, asr r6
   139a4:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
   139a8:	040f0000 	streq	r0, [pc], #-0	; 139b0 <__exidx_end+0xea80>
   139ac:	00000939 	andeq	r0, r0, r9, lsr r9
   139b0:	00431a27 	subeq	r1, r3, r7, lsr #20
   139b4:	00431a00 	subeq	r1, r3, r0, lsl #20
   139b8:	01b80a00 			; <UNDEFINED> instruction: 0x01b80a00
   139bc:	09260005 	stmdbeq	r6!, {r0, r2}
   139c0:	00040000 	andeq	r0, r4, r0
   139c4:	0000480c 	andeq	r4, r0, ip, lsl #16
   139c8:	40140104 	andsmi	r0, r4, r4, lsl #2
   139cc:	340c0000 	strcc	r0, [ip], #-0
   139d0:	be000043 	cdplt	0, 0, cr0, cr0, cr3, {2}
   139d4:	bb000042 	bllt	13ae4 <__exidx_end+0xebb4>
   139d8:	0200008b 	andeq	r0, r0, #139	; 0x8b
   139dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
   139e0:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
   139e4:	00039c07 	andeq	r9, r3, r7, lsl #24
   139e8:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
   139ec:	000005e8 	andeq	r0, r0, r8, ror #11
   139f0:	e5040803 	str	r0, [r4, #-2051]	; 0xfffff7fd
   139f4:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   139f8:	00000896 	muleq	r0, r6, r8
   139fc:	17016501 	strne	r6, [r1, -r1, lsl #10]
   13a00:	00000024 	andeq	r0, r0, r4, lsr #32
   13a04:	de060103 	adfles	f0, f6, f3
   13a08:	03000008 	movweq	r0, #8
   13a0c:	08dc0801 	ldmeq	ip, {r0, fp}^
   13a10:	02030000 	andeq	r0, r3, #0
   13a14:	0007a305 	andeq	sl, r7, r5, lsl #6
   13a18:	07020300 	streq	r0, [r2, -r0, lsl #6]
   13a1c:	000009aa 	andeq	r0, r0, sl, lsr #19
   13a20:	ed050403 	cfstrs	mvf0, [r5, #-12]
   13a24:	03000005 	movweq	r0, #5
   13a28:	03970704 	orrseq	r0, r7, #4, 14	; 0x100000
   13a2c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
   13a30:	00039207 	andeq	r9, r3, r7, lsl #4
   13a34:	09e60500 	stmibeq	r6!, {r8, sl}^
   13a38:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
   13a3c:	0000620e 	andeq	r6, r0, lr, lsl #4
   13a40:	026b0500 	rsbeq	r0, fp, #0, 10
   13a44:	74020000 	strvc	r0, [r2], #-0
   13a48:	0000620e 	andeq	r6, r0, lr, lsl #4
   13a4c:	02040600 	andeq	r0, r4, #0, 12
   13a50:	00b103a5 	adcseq	r0, r1, r5, lsr #7
   13a54:	8b070000 	blhi	1d3a5c <__ccfg+0x1b3ab4>
   13a58:	02000005 	andeq	r0, r0, #5
   13a5c:	00390ca7 	eorseq	r0, r9, r7, lsr #25
   13a60:	ea070000 	b	1d3a68 <__ccfg+0x1b3ac0>
   13a64:	02000007 	andeq	r0, r0, #7
   13a68:	00b113a8 	adcseq	r1, r1, r8, lsr #7
   13a6c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13a70:	0000004d 	andeq	r0, r0, sp, asr #32
   13a74:	000000c1 	andeq	r0, r0, r1, asr #1
   13a78:	00002409 	andeq	r2, r0, r9, lsl #8
   13a7c:	0a000300 	beq	14684 <__exidx_end+0xf754>
   13a80:	09a20208 	stmibeq	r2!, {r3, r9}
   13a84:	000000e5 	andeq	r0, r0, r5, ror #1
   13a88:	0003260b 	andeq	r2, r3, fp, lsl #12
   13a8c:	07a40200 	streq	r0, [r4, r0, lsl #4]!
   13a90:	0000001d 	andeq	r0, r0, sp, lsl r0
   13a94:	04ae0b00 	strteq	r0, [lr], #2816	; 0xb00
   13a98:	a9020000 	stmdbge	r2, {}	; <UNPREDICTABLE>
   13a9c:	00008f05 	andeq	r8, r0, r5, lsl #30
   13aa0:	05000400 	streq	r0, [r0, #-1024]	; 0xfffffc00
   13aa4:	000006a9 	andeq	r0, r0, r9, lsr #13
   13aa8:	c103aa02 	tstgt	r3, r2, lsl #20
   13aac:	0c000000 	stceq	0, cr0, [r0], {-0}
   13ab0:	062d0504 	strteq	r0, [sp], -r4, lsl #10
   13ab4:	16030000 	strne	r0, [r3], -r0
   13ab8:	00006919 	andeq	r6, r0, r9, lsl r9
   13abc:	01fe0500 	mvnseq	r0, r0, lsl #10
   13ac0:	0c040000 	stceq	0, cr0, [r4], {-0}
   13ac4:	00001d0d 	andeq	r1, r0, sp, lsl #26
   13ac8:	05590500 	ldrbeq	r0, [r9, #-1280]	; 0xfffffb00
   13acc:	23030000 	movwcs	r0, #12288	; 0x3000
   13ad0:	0000ff1b 	andeq	pc, r0, fp, lsl pc	; <UNPREDICTABLE>
   13ad4:	02ab0d00 	adceq	r0, fp, #0, 26
   13ad8:	03180000 	tsteq	r8, #0
   13adc:	01710834 	cmneq	r1, r4, lsr r8
   13ae0:	400b0000 	andmi	r0, fp, r0
   13ae4:	0300000a 	movweq	r0, #10
   13ae8:	01711336 	cmneq	r1, r6, lsr r3
   13aec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   13af0:	03006b5f 	movweq	r6, #2911	; 0xb5f
   13af4:	001d0737 	andseq	r0, sp, r7, lsr r7
   13af8:	0b040000 	bleq	113b00 <__ccfg+0xf3b58>
   13afc:	00000845 	andeq	r0, r0, r5, asr #16
   13b00:	1d0b3703 	stcne	7, cr3, [fp, #-12]
   13b04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13b08:	003eb00b 	eorseq	fp, lr, fp
   13b0c:	14370300 	ldrtne	r0, [r7], #-768	; 0xfffffd00
   13b10:	0000001d 	andeq	r0, r0, sp, lsl r0
   13b14:	03be0b0c 			; <UNDEFINED> instruction: 0x03be0b0c
   13b18:	37030000 	strcc	r0, [r3, -r0]
   13b1c:	00001d1b 	andeq	r1, r0, fp, lsl sp
   13b20:	5f0e1000 	svcpl	0x000e1000
   13b24:	38030078 	stmdacc	r3, {r3, r4, r5, r6}
   13b28:	0001770b 	andeq	r7, r1, fp, lsl #14
   13b2c:	0f001400 	svceq	0x00001400
   13b30:	00011704 	andeq	r1, r1, r4, lsl #14
   13b34:	00f30800 	rscseq	r0, r3, r0, lsl #16
   13b38:	01870000 	orreq	r0, r7, r0
   13b3c:	24090000 	strcs	r0, [r9], #-0
   13b40:	00000000 	andeq	r0, r0, r0
   13b44:	08600d00 	stmdaeq	r0!, {r8, sl, fp}^
   13b48:	03240000 			; <UNDEFINED> instruction: 0x03240000
   13b4c:	020a083c 	andeq	r0, sl, #60, 16	; 0x3c0000
   13b50:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
   13b54:	03000004 	movweq	r0, #4
   13b58:	001d093e 	andseq	r0, sp, lr, lsr r9
   13b5c:	0b000000 	bleq	13b64 <__exidx_end+0xec34>
   13b60:	00000358 	andeq	r0, r0, r8, asr r3
   13b64:	1d093f03 	stcne	15, cr3, [r9, #-12]
   13b68:	04000000 	streq	r0, [r0], #-0
   13b6c:	0003010b 	andeq	r0, r3, fp, lsl #2
   13b70:	09400300 	stmdbeq	r0, {r8, r9}^
   13b74:	0000001d 	andeq	r0, r0, sp, lsl r0
   13b78:	050f0b08 	streq	r0, [pc, #-2824]	; 13078 <__exidx_end+0xe148>
   13b7c:	41030000 	mrsmi	r0, (UNDEF: 3)
   13b80:	00001d09 	andeq	r1, r0, r9, lsl #26
   13b84:	1d0b0c00 	stcne	12, cr0, [fp, #-0]
   13b88:	03000007 	movweq	r0, #7
   13b8c:	001d0942 	andseq	r0, sp, r2, asr #18
   13b90:	0b100000 	bleq	413b98 <__ccfg+0x3f3bf0>
   13b94:	00000804 	andeq	r0, r0, r4, lsl #16
   13b98:	1d094303 	stcne	3, cr4, [r9, #-12]
   13b9c:	14000000 	strne	r0, [r0], #-0
   13ba0:	0002c60b 	andeq	ip, r2, fp, lsl #12
   13ba4:	09440300 	stmdbeq	r4, {r8, r9}^
   13ba8:	0000001d 	andeq	r0, r0, sp, lsl r0
   13bac:	04570b18 	ldrbeq	r0, [r7], #-2840	; 0xfffff4e8
   13bb0:	45030000 	strmi	r0, [r3, #-0]
   13bb4:	00001d09 	andeq	r1, r0, r9, lsl #26
   13bb8:	c70b1c00 	strgt	r1, [fp, -r0, lsl #24]
   13bbc:	03000006 	movweq	r0, #6
   13bc0:	001d0946 	andseq	r0, sp, r6, asr #18
   13bc4:	00200000 	eoreq	r0, r0, r0
   13bc8:	00006110 	andeq	r6, r0, r0, lsl r1
   13bcc:	03010800 	movweq	r0, #6144	; 0x1800
   13bd0:	024f084f 	subeq	r0, pc, #5177344	; 0x4f0000
   13bd4:	740b0000 	strvc	r0, [fp], #-0
   13bd8:	03000009 	movweq	r0, #9
   13bdc:	024f0a50 	subeq	r0, pc, #80, 20	; 0x50000
   13be0:	0b000000 	bleq	13be8 <__exidx_end+0xecb8>
   13be4:	000008c0 	andeq	r0, r0, r0, asr #17
   13be8:	4f095103 	svcmi	0x00095103
   13bec:	80000002 	andhi	r0, r0, r2
   13bf0:	0009dd11 	andeq	sp, r9, r1, lsl sp
   13bf4:	0a530300 	beq	14d47fc <__ccfg+0x14b4854>
   13bf8:	000000f3 	strdeq	r0, [r0], -r3
   13bfc:	2b110100 	blcs	454004 <__ccfg+0x43405c>
   13c00:	0300000a 	movweq	r0, #10
   13c04:	00f30a56 	rscseq	r0, r3, r6, asr sl
   13c08:	01040000 	mrseq	r0, (UNDEF: 4)
   13c0c:	00f10800 	rscseq	r0, r1, r0, lsl #16
   13c10:	025f0000 	subseq	r0, pc, #0
   13c14:	24090000 	strcs	r0, [r9], #-0
   13c18:	1f000000 	svcne	0x00000000
   13c1c:	078a1000 	streq	r1, [sl, r0]
   13c20:	01900000 	orrseq	r0, r0, r0
   13c24:	a2086203 	andge	r6, r8, #805306368	; 0x30000000
   13c28:	0b000002 	bleq	13c38 <__exidx_end+0xed08>
   13c2c:	00000a40 	andeq	r0, r0, r0, asr #20
   13c30:	a2126303 	andsge	r6, r2, #201326592	; 0xc000000
   13c34:	00000002 	andeq	r0, r0, r2
   13c38:	0004660b 	andeq	r6, r4, fp, lsl #12
   13c3c:	06640300 	strbteq	r0, [r4], -r0, lsl #6
   13c40:	0000001d 	andeq	r0, r0, sp, lsl r0
   13c44:	02730b04 	rsbseq	r0, r3, #4, 22	; 0x1000
   13c48:	66030000 	strvs	r0, [r3], -r0
   13c4c:	0002a809 	andeq	sl, r2, r9, lsl #16
   13c50:	610b0800 	tstvs	fp, r0, lsl #16
   13c54:	03000000 	movweq	r0, #0
   13c58:	020a1e67 	andeq	r1, sl, #1648	; 0x670
   13c5c:	00880000 	addeq	r0, r8, r0
   13c60:	025f040f 	subseq	r0, pc, #251658240	; 0xf000000
   13c64:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
   13c68:	b8000002 	stmdalt	r0, {r1}
   13c6c:	09000002 	stmdbeq	r0, {r1}
   13c70:	00000024 	andeq	r0, r0, r4, lsr #32
   13c74:	040f001f 	streq	r0, [pc], #-31	; 13c7c <__exidx_end+0xed4c>
   13c78:	000002be 			; <UNDEFINED> instruction: 0x000002be
   13c7c:	093e0d12 	ldmdbeq	lr!, {r1, r4, r8, sl, fp}
   13c80:	03080000 	movweq	r0, #32768	; 0x8000
   13c84:	02e7087a 	rsceq	r0, r7, #7995392	; 0x7a0000
   13c88:	040b0000 	streq	r0, [fp], #-0
   13c8c:	03000006 	movweq	r0, #6
   13c90:	02e7117b 	rsceq	r1, r7, #-1073741794	; 0xc000001e
   13c94:	0b000000 	bleq	13c9c <__exidx_end+0xed6c>
   13c98:	000018cf 	andeq	r1, r0, pc, asr #17
   13c9c:	1d067c03 	stcne	12, cr7, [r6, #-12]
   13ca0:	04000000 	streq	r0, [r0], #-0
   13ca4:	4d040f00 	stcmi	15, cr0, [r4, #-0]
   13ca8:	0d000000 	stceq	0, cr0, [r0, #-0]
   13cac:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
   13cb0:	08ba0368 	ldmeq	sl!, {r3, r5, r6, r8, r9}
   13cb4:	00000430 	andeq	r0, r0, r0, lsr r4
   13cb8:	00705f0e 	rsbseq	r5, r0, lr, lsl #30
   13cbc:	e712bb03 	ldr	fp, [r2, -r3, lsl #22]
   13cc0:	00000002 	andeq	r0, r0, r2
   13cc4:	00725f0e 	rsbseq	r5, r2, lr, lsl #30
   13cc8:	1d07bc03 	stcne	12, cr11, [r7, #-12]
   13ccc:	04000000 	streq	r0, [r0], #-0
   13cd0:	00775f0e 	rsbseq	r5, r7, lr, lsl #30
   13cd4:	1d07bd03 	stcne	13, cr11, [r7, #-12]
   13cd8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   13cdc:	0001e90b 	andeq	lr, r1, fp, lsl #18
   13ce0:	09be0300 	ldmibeq	lr!, {r8, r9}
   13ce4:	00000054 	andeq	r0, r0, r4, asr r0
   13ce8:	06620b0c 	strbteq	r0, [r2], -ip, lsl #22
   13cec:	bf030000 	svclt	0x00030000
   13cf0:	00005409 	andeq	r5, r0, r9, lsl #8
   13cf4:	5f0e0e00 	svcpl	0x000e0e00
   13cf8:	03006662 	movweq	r6, #1634	; 0x662
   13cfc:	02bf11c0 	adcseq	r1, pc, #192, 2	; 0x30
   13d00:	0b100000 	bleq	413d08 <__ccfg+0x3f3d60>
   13d04:	000001e0 	andeq	r0, r0, r0, ror #3
   13d08:	1d07c103 	stfned	f4, [r7, #-12]
   13d0c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   13d10:	0002780b 	andeq	r7, r2, fp, lsl #16
   13d14:	0ac80300 	beq	ff21491c <_estack+0xdf20f91c>
   13d18:	000000f1 	strdeq	r0, [r0], -r1
   13d1c:	185f0b1c 	ldmdane	pc, {r2, r3, r4, r8, r9, fp}^	; <UNPREDICTABLE>
   13d20:	ca030000 	bgt	d3d28 <__ccfg+0xb3d80>
   13d24:	0005b41d 	andeq	fp, r5, sp, lsl r4
   13d28:	260b2000 	strcs	r2, [fp], -r0
   13d2c:	03000018 	movweq	r0, #24
   13d30:	05de1dcc 	ldrbeq	r1, [lr, #3532]	; 0xdcc
   13d34:	0b240000 	bleq	913d3c <__ccfg+0x8f3d94>
   13d38:	00000a51 	andeq	r0, r0, r1, asr sl
   13d3c:	020dcf03 	andeq	ip, sp, #3, 30
   13d40:	28000006 	stmdacs	r0, {r1, r2}
   13d44:	0018140b 	andseq	r1, r8, fp, lsl #8
   13d48:	09d00300 	ldmibeq	r0, {r8, r9}^
   13d4c:	0000061c 	andeq	r0, r0, ip, lsl r6
   13d50:	755f0e2c 	ldrbvc	r0, [pc, #-3628]	; 12f2c <__exidx_end+0xdffc>
   13d54:	d3030062 	movwle	r0, #12386	; 0x3062
   13d58:	0002bf11 	andeq	fp, r2, r1, lsl pc
   13d5c:	5f0e3000 	svcpl	0x000e3000
   13d60:	03007075 	movweq	r7, #117	; 0x75
   13d64:	02e712d4 	rsceq	r1, r7, #212, 4	; 0x4000000d
   13d68:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
   13d6c:	0072755f 	rsbseq	r7, r2, pc, asr r5
   13d70:	1d07d503 	cfstr32ne	mvfx13, [r7, #-12]
   13d74:	3c000000 	stccc	0, cr0, [r0], {-0}
   13d78:	000a680b 	andeq	r6, sl, fp, lsl #16
   13d7c:	11d80300 	bicsne	r0, r8, r0, lsl #6
   13d80:	00000622 	andeq	r0, r0, r2, lsr #12
   13d84:	09f70b40 	ldmibeq	r7!, {r6, r8, r9, fp}^
   13d88:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
   13d8c:	00063211 	andeq	r3, r6, r1, lsl r2
   13d90:	5f0e4300 	svcpl	0x000e4300
   13d94:	0300626c 	movweq	r6, #620	; 0x26c
   13d98:	02bf11dc 	adcseq	r1, pc, #220, 2	; 0x37
   13d9c:	0b440000 	bleq	1113da4 <__ccfg+0x10f3dfc>
   13da0:	00000857 	andeq	r0, r0, r7, asr r8
   13da4:	1d07df03 	stcne	15, cr13, [r7, #-12]
   13da8:	4c000000 	stcmi	0, cr0, [r0], {-0}
   13dac:	0004030b 	andeq	r0, r4, fp, lsl #6
   13db0:	0ae00300 	beq	ff8149b8 <_estack+0xdf80f9b8>
   13db4:	00000077 	andeq	r0, r0, r7, ror r0
   13db8:	432e0b50 			; <UNDEFINED> instruction: 0x432e0b50
   13dbc:	e3030000 	movw	r0, #12288	; 0x3000
   13dc0:	00044e12 	andeq	r4, r4, r2, lsl lr
   13dc4:	6f0b5400 	svcvs	0x000b5400
   13dc8:	03000008 	movweq	r0, #8
   13dcc:	010b0ce7 	smlatteq	fp, r7, ip, r0
   13dd0:	0b580000 	bleq	1613dd8 <__ccfg+0x15f3e30>
   13dd4:	00000792 	muleq	r0, r2, r7
   13dd8:	e50ee903 	str	lr, [lr, #-2307]	; 0xfffff6fd
   13ddc:	5c000000 	stcpl	0, cr0, [r0], {-0}
   13de0:	000a230b 	andeq	r2, sl, fp, lsl #6
   13de4:	09ea0300 	stmibeq	sl!, {r8, r9}^
   13de8:	0000001d 	andeq	r0, r0, sp, lsl r0
   13dec:	1d130064 	ldcne	0, cr0, [r3, #-400]	; 0xfffffe70
   13df0:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
   13df4:	14000004 	strne	r0, [r0], #-4
   13df8:	0000044e 	andeq	r0, r0, lr, asr #8
   13dfc:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   13e00:	05a21400 	streq	r1, [r2, #1024]!	; 0x400
   13e04:	1d140000 	ldcne	0, cr0, [r4, #-0]
   13e08:	00000000 	andeq	r0, r0, r0
   13e0c:	0459040f 	ldrbeq	r0, [r9], #-1039	; 0xfffffbf1
   13e10:	4e150000 	cdpmi	0, 1, cr0, cr5, cr0, {0}
   13e14:	16000004 	strne	r0, [r0], -r4
   13e18:	0000436c 	andeq	r4, r0, ip, ror #6
   13e1c:	65030428 	strvs	r0, [r3, #-1064]	; 0xfffffbd8
   13e20:	05a20802 	streq	r0, [r2, #2050]!	; 0x802
   13e24:	f8170000 			; <UNDEFINED> instruction: 0xf8170000
   13e28:	03000006 	movweq	r0, #6
   13e2c:	1d070267 	sfmne	f0, 4, [r7, #-412]	; 0xfffffe64
   13e30:	00000000 	andeq	r0, r0, r0
   13e34:	0005d217 	andeq	sp, r5, r7, lsl r2
   13e38:	026c0300 	rsbeq	r0, ip, #0, 6
   13e3c:	00068e0b 	andeq	r8, r6, fp, lsl #28
   13e40:	55170400 	ldrpl	r0, [r7, #-1024]	; 0xfffffc00
   13e44:	03000002 	movweq	r0, #2
   13e48:	8e14026c 	cdphi	2, 1, cr0, cr4, cr12, {3}
   13e4c:	08000006 	stmdaeq	r0, {r1, r2}
   13e50:	000a5717 	andeq	r5, sl, r7, lsl r7
   13e54:	026c0300 	rsbeq	r0, ip, #0, 6
   13e58:	00068e1e 	andeq	r8, r6, lr, lsl lr
   13e5c:	61170c00 	tstvs	r7, r0, lsl #24
   13e60:	03000004 	movweq	r0, #4
   13e64:	1d08026e 	sfmne	f0, 4, [r8, #-440]	; 0xfffffe48
   13e68:	10000000 	andne	r0, r0, r0
   13e6c:	00041317 	andeq	r1, r4, r7, lsl r3
   13e70:	026f0300 	rsbeq	r0, pc, #0, 6
   13e74:	00088e08 	andeq	r8, r8, r8, lsl #28
   13e78:	0a171400 	beq	5d8e80 <__ccfg+0x5b8ed8>
   13e7c:	0300000a 	movweq	r0, #10
   13e80:	1d070272 	sfmne	f0, 4, [r7, #-456]	; 0xfffffe38
   13e84:	30000000 	andcc	r0, r0, r0
   13e88:	003d5c17 	eorseq	r5, sp, r7, lsl ip
   13e8c:	02730300 	rsbseq	r0, r3, #0, 6
   13e90:	0008a316 	andeq	sl, r8, r6, lsl r3
   13e94:	a5173400 	ldrge	r3, [r7, #-1024]	; 0xfffffc00
   13e98:	03000005 	movweq	r0, #5
   13e9c:	1d070275 	sfmne	f0, 4, [r7, #-468]	; 0xfffffe2c
   13ea0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   13ea4:	00069f17 	andeq	r9, r6, r7, lsl pc
   13ea8:	02770300 	rsbseq	r0, r7, #0, 6
   13eac:	0008b40a 	andeq	fp, r8, sl, lsl #8
   13eb0:	d0173c00 	andsle	r3, r7, r0, lsl #24
   13eb4:	03000002 	movweq	r0, #2
   13eb8:	7113027a 	tstvc	r3, sl, ror r2
   13ebc:	40000001 	andmi	r0, r0, r1
   13ec0:	00037c17 	andeq	r7, r3, r7, lsl ip
   13ec4:	027b0300 	rsbseq	r0, fp, #0, 6
   13ec8:	00001d07 	andeq	r1, r0, r7, lsl #26
   13ecc:	b6174400 	ldrlt	r4, [r7], -r0, lsl #8
   13ed0:	03000004 	movweq	r0, #4
   13ed4:	7113027c 	tstvc	r3, ip, ror r2
   13ed8:	48000001 	stmdami	r0, {r0}
   13edc:	00060a17 	andeq	r0, r6, r7, lsl sl
   13ee0:	027d0300 	rsbseq	r0, sp, #0, 6
   13ee4:	0008ba14 	andeq	fp, r8, r4, lsl sl
   13ee8:	3d174c00 	ldccc	12, cr4, [r7, #-0]
   13eec:	03000008 	movweq	r0, #8
   13ef0:	1d070280 	sfmne	f0, 4, [r7, #-512]	; 0xfffffe00
   13ef4:	50000000 	andpl	r0, r0, r0
   13ef8:	0008d417 	andeq	sp, r8, r7, lsl r4
   13efc:	02810300 	addeq	r0, r1, #0, 6
   13f00:	0005a209 	andeq	sl, r5, r9, lsl #4
   13f04:	ee175400 	cfmuls	mvf5, mvf7, mvf0
   13f08:	03000008 	movweq	r0, #8
   13f0c:	690702a4 	stmdbvs	r7, {r2, r5, r7, r9}
   13f10:	58000008 	stmdapl	r0, {r3}
   13f14:	00078a18 	andeq	r8, r7, r8, lsl sl
   13f18:	02a80300 	adceq	r0, r8, #0, 6
   13f1c:	0002a213 	andeq	sl, r2, r3, lsl r2
   13f20:	18014800 	stmdane	r1, {fp, lr}
   13f24:	00000532 	andeq	r0, r0, r2, lsr r5
   13f28:	1202a903 	andne	sl, r2, #49152	; 0xc000
   13f2c:	0000025f 	andeq	r0, r0, pc, asr r2
   13f30:	1918014c 	ldmdbne	r8, {r2, r3, r6, r8}
   13f34:	03000005 	movweq	r0, #5
   13f38:	cb0c02ad 	blgt	3149f4 <__ccfg+0x2f4a4c>
   13f3c:	dc000008 	stcle	0, cr0, [r0], {8}
   13f40:	09511802 	ldmdbeq	r1, {r1, fp, ip}^
   13f44:	b2030000 	andlt	r0, r3, #0
   13f48:	064f1002 	strbeq	r1, [pc], -r2
   13f4c:	02e00000 	rsceq	r0, r0, #0
   13f50:	0007cb18 	andeq	ip, r7, r8, lsl fp
   13f54:	02b40300 	adcseq	r0, r4, #0, 6
   13f58:	0008d70a 	andeq	sp, r8, sl, lsl #14
   13f5c:	0002ec00 	andeq	lr, r2, r0, lsl #24
   13f60:	05a8040f 	streq	r0, [r8, #1039]!	; 0x40f
   13f64:	01030000 	mrseq	r0, (UNDEF: 3)
   13f68:	0008e508 	andeq	lr, r8, r8, lsl #10
   13f6c:	05a81500 	streq	r1, [r8, #1280]!	; 0x500
   13f70:	040f0000 	streq	r0, [pc], #-0	; 13f78 <__exidx_end+0xf048>
   13f74:	00000430 	andeq	r0, r0, r0, lsr r4
   13f78:	00001d13 	andeq	r1, r0, r3, lsl sp
   13f7c:	0005d800 	andeq	sp, r5, r0, lsl #16
   13f80:	044e1400 	strbeq	r1, [lr], #-1024	; 0xfffffc00
   13f84:	f1140000 			; <UNDEFINED> instruction: 0xf1140000
   13f88:	14000000 	strne	r0, [r0], #-0
   13f8c:	000005d8 	ldrdeq	r0, [r0], -r8
   13f90:	00001d14 	andeq	r1, r0, r4, lsl sp
   13f94:	040f0000 	streq	r0, [pc], #-0	; 13f9c <__exidx_end+0xf06c>
   13f98:	000005af 	andeq	r0, r0, pc, lsr #11
   13f9c:	05ba040f 	ldreq	r0, [sl, #1039]!	; 0x40f
   13fa0:	83130000 	tsthi	r3, #0
   13fa4:	02000000 	andeq	r0, r0, #0
   13fa8:	14000006 	strne	r0, [r0], #-6
   13fac:	0000044e 	andeq	r0, r0, lr, asr #8
   13fb0:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   13fb4:	00831400 	addeq	r1, r3, r0, lsl #8
   13fb8:	1d140000 	ldcne	0, cr0, [r4, #-0]
   13fbc:	00000000 	andeq	r0, r0, r0
   13fc0:	05e4040f 	strbeq	r0, [r4, #1039]!	; 0x40f
   13fc4:	1d130000 	ldcne	0, cr0, [r3, #-0]
   13fc8:	1c000000 	stcne	0, cr0, [r0], {-0}
   13fcc:	14000006 	strne	r0, [r0], #-6
   13fd0:	0000044e 	andeq	r0, r0, lr, asr #8
   13fd4:	0000f114 	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   13fd8:	040f0000 	streq	r0, [pc], #-0	; 13fe0 <__exidx_end+0xf0b0>
   13fdc:	00000608 	andeq	r0, r0, r8, lsl #12
   13fe0:	00004d08 	andeq	r4, r0, r8, lsl #26
   13fe4:	00063200 	andeq	r3, r6, r0, lsl #4
   13fe8:	00240900 	eoreq	r0, r4, r0, lsl #18
   13fec:	00020000 	andeq	r0, r2, r0
   13ff0:	00004d08 	andeq	r4, r0, r8, lsl #26
   13ff4:	00064200 	andeq	r4, r6, r0, lsl #4
   13ff8:	00240900 	eoreq	r0, r4, r0, lsl #18
   13ffc:	00000000 	andeq	r0, r0, r0
   14000:	0003f104 	andeq	pc, r3, r4, lsl #2
   14004:	01240300 			; <UNDEFINED> instruction: 0x01240300
   14008:	0002ed1a 	andeq	lr, r2, sl, lsl sp
   1400c:	43821900 	orrmi	r1, r2, #0, 18
   14010:	030c0000 	movweq	r0, #49152	; 0xc000
   14014:	88080128 	stmdahi	r8, {r3, r5, r8}
   14018:	17000006 	strne	r0, [r0, -r6]
   1401c:	00000a40 	andeq	r0, r0, r0, asr #20
   14020:	11012a03 	tstne	r1, r3, lsl #20
   14024:	00000688 	andeq	r0, r0, r8, lsl #13
   14028:	088f1700 	stmeq	pc, {r8, r9, sl, ip}	; <UNPREDICTABLE>
   1402c:	2b030000 	blcs	d4034 <__ccfg+0xb408c>
   14030:	001d0701 	andseq	r0, sp, r1, lsl #14
   14034:	17040000 	strne	r0, [r4, -r0]
   14038:	00000591 	muleq	r0, r1, r5
   1403c:	0b012c03 	bleq	5f050 <__ccfg+0x3f0a8>
   14040:	0000068e 	andeq	r0, r0, lr, lsl #13
   14044:	040f0008 	streq	r0, [pc], #-8	; 1404c <__exidx_end+0xf11c>
   14048:	0000064f 	andeq	r0, r0, pc, asr #12
   1404c:	0642040f 	strbeq	r0, [r2], -pc, lsl #8
   14050:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
   14054:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
   14058:	08014403 	stmdaeq	r1, {r0, r1, sl, lr}
   1405c:	000006cd 	andeq	r0, r0, sp, asr #13
   14060:	00118817 	andseq	r8, r1, r7, lsl r8
   14064:	01450300 	mrseq	r0, (UNDEF: 117)
   14068:	0006cd12 	andeq	ip, r6, r2, lsl sp
   1406c:	1c170000 	ldcne	0, cr0, [r7], {-0}
   14070:	03000006 	movweq	r0, #6
   14074:	cd120146 	ldfgts	f0, [r2, #-280]	; 0xfffffee8
   14078:	06000006 	streq	r0, [r0], -r6
   1407c:	00102d17 	andseq	r2, r0, r7, lsl sp
   14080:	01470300 	mrseq	r0, (UNDEF: 119)
   14084:	00005b12 	andeq	r5, r0, r2, lsl fp
   14088:	08000c00 	stmdaeq	r0, {sl, fp}
   1408c:	0000005b 	andeq	r0, r0, fp, asr r0
   14090:	000006dd 	ldrdeq	r0, [r0], -sp
   14094:	00002409 	andeq	r2, r0, r9, lsl #8
   14098:	1a000200 	bne	148a0 <__exidx_end+0xf970>
   1409c:	028503d0 	addeq	r0, r5, #208, 6	; 0x40000003
   140a0:	0007f207 	andeq	pc, r7, r7, lsl #4
   140a4:	09fd1700 	ldmibeq	sp!, {r8, r9, sl, ip}^
   140a8:	87030000 	strhi	r0, [r3, -r0]
   140ac:	00241802 	eoreq	r1, r4, r2, lsl #16
   140b0:	17000000 	strne	r0, [r0, -r0]
   140b4:	00000959 	andeq	r0, r0, r9, asr r9
   140b8:	12028803 	andne	r8, r2, #196608	; 0x30000
   140bc:	000005a2 	andeq	r0, r0, r2, lsr #11
   140c0:	03a91704 			; <UNDEFINED> instruction: 0x03a91704
   140c4:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
   140c8:	07f21002 	ldrbeq	r1, [r2, r2]!
   140cc:	17080000 	strne	r0, [r8, -r0]
   140d0:	0000081c 	andeq	r0, r0, ip, lsl r8
   140d4:	17028a03 	strne	r8, [r2, -r3, lsl #20]
   140d8:	00000187 	andeq	r0, r0, r7, lsl #3
   140dc:	05d91724 	ldrbeq	r1, [r9, #1828]	; 0x724
   140e0:	8b030000 	blhi	d40e8 <__ccfg+0xb4140>
   140e4:	001d0f02 	andseq	r0, sp, r2, lsl #30
   140e8:	17480000 	strbne	r0, [r8, -r0]
   140ec:	00000a3b 	andeq	r0, r0, fp, lsr sl
   140f0:	2c028c03 	stccs	12, cr8, [r2], {3}
   140f4:	00000070 	andeq	r0, r0, r0, ror r0
   140f8:	00851750 	addeq	r1, r5, r0, asr r7
   140fc:	8d030000 	stchi	0, cr0, [r3, #-0]
   14100:	06941a02 	ldreq	r1, [r4], r2, lsl #20
   14104:	17580000 	ldrbne	r0, [r8, -r0]
   14108:	000004ee 	andeq	r0, r0, lr, ror #9
   1410c:	16028e03 	strne	r8, [r2], -r3, lsl #28
   14110:	000000e5 	andeq	r0, r0, r5, ror #1
   14114:	09661768 	stmdbeq	r6!, {r3, r5, r6, r8, r9, sl, ip}^
   14118:	8f030000 	svchi	0x00030000
   1411c:	00e51602 	rsceq	r1, r5, r2, lsl #12
   14120:	17700000 	ldrbne	r0, [r0, -r0]!
   14124:	0000006f 	andeq	r0, r0, pc, rrx
   14128:	16029003 	strne	r9, [r2], -r3
   1412c:	000000e5 	andeq	r0, r0, r5, ror #1
   14130:	084d1778 	stmdaeq	sp, {r3, r4, r5, r6, r8, r9, sl, ip}^
   14134:	91030000 	mrsls	r0, (UNDEF: 3)
   14138:	08021002 	stmdaeq	r2, {r1, ip}
   1413c:	17800000 	strne	r0, [r0, r0]
   14140:	00000386 	andeq	r0, r0, r6, lsl #7
   14144:	10029203 	andne	r9, r2, r3, lsl #4
   14148:	00000812 	andeq	r0, r0, r2, lsl r8
   1414c:	09111788 	ldmdbeq	r1, {r3, r7, r8, r9, sl, ip}
   14150:	93030000 	movwls	r0, #12288	; 0x3000
   14154:	001d0f02 	andseq	r0, sp, r2, lsl #30
   14158:	17a00000 	strne	r0, [r0, r0]!
   1415c:	00000229 	andeq	r0, r0, r9, lsr #4
   14160:	16029403 	strne	r9, [r2], -r3, lsl #8
   14164:	000000e5 	andeq	r0, r0, r5, ror #1
   14168:	052317a4 	streq	r1, [r3, #-1956]!	; 0xfffff85c
   1416c:	95030000 	strls	r0, [r3, #-0]
   14170:	00e51602 	rsceq	r1, r5, r2, lsl #12
   14174:	17ac0000 	strne	r0, [ip, r0]!
   14178:	0000046b 	andeq	r0, r0, fp, ror #8
   1417c:	16029603 	strne	r9, [r2], -r3, lsl #12
   14180:	000000e5 	andeq	r0, r0, r5, ror #1
   14184:	065317b4 			; <UNDEFINED> instruction: 0x065317b4
   14188:	97030000 	strls	r0, [r3, -r0]
   1418c:	00e51602 	rsceq	r1, r5, r2, lsl #12
   14190:	17bc0000 	ldrne	r0, [ip, r0]!
   14194:	000004dd 	ldrdeq	r0, [r0], -sp
   14198:	16029803 	strne	r9, [r2], -r3, lsl #16
   1419c:	000000e5 	andeq	r0, r0, r5, ror #1
   141a0:	06f617c4 	ldrbteq	r1, [r6], r4, asr #15
   141a4:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
   141a8:	001d0802 	andseq	r0, sp, r2, lsl #16
   141ac:	00cc0000 	sbceq	r0, ip, r0
   141b0:	0005a808 	andeq	sl, r5, r8, lsl #16
   141b4:	00080200 	andeq	r0, r8, r0, lsl #4
   141b8:	00240900 	eoreq	r0, r4, r0, lsl #18
   141bc:	00190000 	andseq	r0, r9, r0
   141c0:	0005a808 	andeq	sl, r5, r8, lsl #16
   141c4:	00081200 	andeq	r1, r8, r0, lsl #4
   141c8:	00240900 	eoreq	r0, r4, r0, lsl #18
   141cc:	00070000 	andeq	r0, r7, r0
   141d0:	0005a808 	andeq	sl, r5, r8, lsl #16
   141d4:	00082200 	andeq	r2, r8, r0, lsl #4
   141d8:	00240900 	eoreq	r0, r4, r0, lsl #18
   141dc:	00170000 	andseq	r0, r7, r0
   141e0:	9e03f01a 	mcrls	0, 0, pc, cr3, cr10, {0}	; <UNPREDICTABLE>
   141e4:	08490702 	stmdaeq	r9, {r1, r8, r9, sl}^
   141e8:	61170000 	tstvs	r7, r0
   141ec:	03000003 	movweq	r0, #3
   141f0:	491b02a1 	ldmdbmi	fp, {r0, r5, r7, r9}
   141f4:	00000008 	andeq	r0, r0, r8
   141f8:	000a5f17 	andeq	r5, sl, r7, lsl pc
   141fc:	02a20300 	adceq	r0, r2, #0, 6
   14200:	00085918 	andeq	r5, r8, r8, lsl r9
   14204:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
   14208:	000002e7 	andeq	r0, r0, r7, ror #5
   1420c:	00000859 	andeq	r0, r0, r9, asr r8
   14210:	00002409 	andeq	r2, r0, r9, lsl #8
   14214:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
   14218:	00000024 	andeq	r0, r0, r4, lsr #32
   1421c:	00000869 	andeq	r0, r0, r9, ror #16
   14220:	00002409 	andeq	r2, r0, r9, lsl #8
   14224:	1b001d00 	blne	1b62c <__exidx_end+0x166fc>
   14228:	028303f0 	addeq	r0, r3, #240, 6	; 0xc0000003
   1422c:	00088e03 	andeq	r8, r8, r3, lsl #28
   14230:	436c1c00 	cmnmi	ip, #0, 24
   14234:	9a030000 	bls	d423c <__ccfg+0xb4294>
   14238:	06dd0b02 	ldrbeq	r0, [sp], r2, lsl #22
   1423c:	2b1c0000 	blcs	714244 <__ccfg+0x6f429c>
   14240:	03000008 	movweq	r0, #8
   14244:	220b02a3 	andcs	r0, fp, #805306378	; 0x3000000a
   14248:	00000008 	andeq	r0, r0, r8
   1424c:	0005a808 	andeq	sl, r5, r8, lsl #16
   14250:	00089e00 	andeq	r9, r8, r0, lsl #28
   14254:	00240900 	eoreq	r0, r4, r0, lsl #18
   14258:	00180000 	andseq	r0, r8, r0
   1425c:	000a461d 	andeq	r4, sl, sp, lsl r6
   14260:	9e040f00 	cdpls	15, 0, cr0, cr4, cr0, {0}
   14264:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
   14268:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
   1426c:	00044e14 	andeq	r4, r4, r4, lsl lr
   14270:	040f0000 	streq	r0, [pc], #-0	; 14278 <__exidx_end+0xf348>
   14274:	000008a9 	andeq	r0, r0, r9, lsr #17
   14278:	0171040f 	cmneq	r1, pc, lsl #8
   1427c:	cb1e0000 	blgt	794284 <__ccfg+0x7742dc>
   14280:	14000008 	strne	r0, [r0], #-8
   14284:	0000001d 	andeq	r0, r0, sp, lsl r0
   14288:	d1040f00 	tstle	r4, r0, lsl #30
   1428c:	0f000008 	svceq	0x00000008
   14290:	0008c004 	andeq	ip, r8, r4
   14294:	06420800 	strbeq	r0, [r2], -r0, lsl #16
   14298:	08e70000 	stmiaeq	r7!, {}^	; <UNPREDICTABLE>
   1429c:	24090000 	strcs	r0, [r9], #-0
   142a0:	02000000 	andeq	r0, r0, #0
   142a4:	07f81f00 	ldrbeq	r1, [r8, r0, lsl #30]!
   142a8:	33030000 	movwcc	r0, #12288	; 0x3000
   142ac:	044e1703 	strbeq	r1, [lr], #-1795	; 0xfffff8fd
   142b0:	f11f0000 			; <UNDEFINED> instruction: 0xf11f0000
   142b4:	03000007 	movweq	r0, #7
   142b8:	541d0334 	ldrpl	r0, [sp], #-820	; 0xfffffccc
   142bc:	20000004 	andcs	r0, r0, r4
   142c0:	00004328 	andeq	r4, r0, r8, lsr #6
   142c4:	59301705 	ldmdbpl	r0!, {r0, r2, r8, r9, sl, ip}
   142c8:	05000004 	streq	r0, [r0, #-4]
   142cc:	00011803 	andeq	r1, r1, r3, lsl #16
   142d0:	08e72120 	stmiaeq	r7!, {r5, r8, sp}^
   142d4:	03050000 	movweq	r0, #20480	; 0x5000
   142d8:	20000110 	andcs	r0, r0, r0, lsl r1
   142dc:	0008f421 	andeq	pc, r8, r1, lsr #8
   142e0:	00030500 	andeq	r0, r3, r0, lsl #10
   142e4:	00000000 	andeq	r0, r0, r0
   142e8:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
   142ec:	49c40004 	stmibmi	r4, {r2}^
   142f0:	01040000 	mrseq	r0, (UNDEF: 4)
   142f4:	00004014 	andeq	r4, r0, r4, lsl r0
   142f8:	0043880c 	subeq	r8, r3, ip, lsl #16
   142fc:	0042be00 	subeq	fp, r2, r0, lsl #28
   14300:	00000000 	andeq	r0, r0, r0
   14304:	0000b800 	andeq	fp, r0, r0, lsl #16
   14308:	008c9b00 	addeq	r9, ip, r0, lsl #22
   1430c:	07040200 	streq	r0, [r4, -r0, lsl #4]
   14310:	0000039c 	muleq	r0, ip, r3
   14314:	69050403 	stmdbvs	r5, {r0, r1, sl}
   14318:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
   1431c:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
   14320:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   14324:	003ee504 	eorseq	lr, lr, r4, lsl #10
   14328:	08960400 	ldmeq	r6, {sl}
   1432c:	65020000 	strvs	r0, [r2, #-0]
   14330:	00251701 	eoreq	r1, r5, r1, lsl #14
   14334:	01020000 	mrseq	r0, (UNDEF: 2)
   14338:	0008de06 	andeq	sp, r8, r6, lsl #28
   1433c:	08010200 	stmdaeq	r1, {r9}
   14340:	000008dc 	ldrdeq	r0, [r0], -ip
   14344:	a3050202 	movwge	r0, #20994	; 0x5202
   14348:	02000007 	andeq	r0, r0, #7
   1434c:	09aa0702 	stmibeq	sl!, {r1, r8, r9, sl}
   14350:	04020000 	streq	r0, [r2], #-0
   14354:	0005ed05 	andeq	lr, r5, r5, lsl #26
   14358:	07040200 	streq	r0, [r4, -r0, lsl #4]
   1435c:	00000397 	muleq	r0, r7, r3
   14360:	92070802 	andls	r0, r7, #131072	; 0x20000
   14364:	05000003 	streq	r0, [r0, #-3]
   14368:	000009e6 	andeq	r0, r0, r6, ror #19
   1436c:	6a0e2e03 	bvs	39fb80 <__ccfg+0x37fbd8>
   14370:	05000000 	streq	r0, [r0, #-0]
   14374:	0000026b 	andeq	r0, r0, fp, ror #4
   14378:	6a0e7403 	bvs	3b138c <__ccfg+0x3913e4>
   1437c:	06000000 	streq	r0, [r0], -r0
   14380:	03a50304 			; <UNDEFINED> instruction: 0x03a50304
   14384:	000000b9 	strheq	r0, [r0], -r9
   14388:	00058b07 	andeq	r8, r5, r7, lsl #22
   1438c:	0ca70300 	stceq	3, cr0, [r7]
   14390:	00000041 	andeq	r0, r0, r1, asr #32
   14394:	0007ea07 	andeq	lr, r7, r7, lsl #20
   14398:	13a80300 			; <UNDEFINED> instruction: 0x13a80300
   1439c:	000000b9 	strheq	r0, [r0], -r9
   143a0:	00550800 	subseq	r0, r5, r0, lsl #16
   143a4:	00c90000 	sbceq	r0, r9, r0
   143a8:	25090000 	strcs	r0, [r9, #-0]
   143ac:	03000000 	movweq	r0, #0
   143b0:	03080a00 	movweq	r0, #35328	; 0x8a00
   143b4:	00ed09a2 	rsceq	r0, sp, r2, lsr #19
   143b8:	260b0000 	strcs	r0, [fp], -r0
   143bc:	03000003 	movweq	r0, #3
   143c0:	002c07a4 	eoreq	r0, ip, r4, lsr #15
   143c4:	0b000000 	bleq	143cc <__exidx_end+0xf49c>
   143c8:	000004ae 	andeq	r0, r0, lr, lsr #9
   143cc:	9705a903 	strls	sl, [r5, -r3, lsl #18]
   143d0:	04000000 	streq	r0, [r0], #-0
   143d4:	06a90500 	strteq	r0, [r9], r0, lsl #10
   143d8:	aa030000 	bge	d43e0 <__ccfg+0xb4438>
   143dc:	0000c903 	andeq	ip, r0, r3, lsl #18
   143e0:	05040c00 	streq	r0, [r4, #-3072]	; 0xfffff400
   143e4:	0000062d 	andeq	r0, r0, sp, lsr #12
   143e8:	71191604 	tstvc	r9, r4, lsl #12
   143ec:	05000000 	streq	r0, [r0, #-0]
   143f0:	000001fe 	strdeq	r0, [r0], -lr
   143f4:	2c0d0c05 	stccs	12, cr0, [sp], {5}
   143f8:	05000000 	streq	r0, [r0, #-0]
   143fc:	00000559 	andeq	r0, r0, r9, asr r5
   14400:	071b2304 	ldreq	r2, [fp, -r4, lsl #6]
   14404:	0d000001 	stceq	0, cr0, [r0, #-4]
   14408:	000002ab 	andeq	r0, r0, fp, lsr #5
   1440c:	08340418 	ldmdaeq	r4!, {r3, r4, sl}
   14410:	00000179 	andeq	r0, r0, r9, ror r1
   14414:	000a400b 	andeq	r4, sl, fp
   14418:	13360400 	teqne	r6, #0, 8
   1441c:	00000179 	andeq	r0, r0, r9, ror r1
   14420:	6b5f0e00 	blvs	17d7c28 <__ccfg+0x17b7c80>
   14424:	07370400 	ldreq	r0, [r7, -r0, lsl #8]!
   14428:	0000002c 	andeq	r0, r0, ip, lsr #32
   1442c:	08450b04 	stmdaeq	r5, {r2, r8, r9, fp}^
   14430:	37040000 	strcc	r0, [r4, -r0]
   14434:	00002c0b 	andeq	r2, r0, fp, lsl #24
   14438:	b00b0800 	andlt	r0, fp, r0, lsl #16
   1443c:	0400003e 	streq	r0, [r0], #-62	; 0xffffffc2
   14440:	002c1437 	eoreq	r1, ip, r7, lsr r4
   14444:	0b0c0000 	bleq	31444c <__ccfg+0x2f44a4>
   14448:	000003be 			; <UNDEFINED> instruction: 0x000003be
   1444c:	2c1b3704 	ldccs	7, cr3, [fp], {4}
   14450:	10000000 	andne	r0, r0, r0
   14454:	00785f0e 	rsbseq	r5, r8, lr, lsl #30
   14458:	7f0b3804 	svcvc	0x000b3804
   1445c:	14000001 	strne	r0, [r0], #-1
   14460:	1f040f00 	svcne	0x00040f00
   14464:	08000001 	stmdaeq	r0, {r0}
   14468:	000000fb 	strdeq	r0, [r0], -fp
   1446c:	0000018f 	andeq	r0, r0, pc, lsl #3
   14470:	00002509 	andeq	r2, r0, r9, lsl #10
   14474:	0d000000 	stceq	0, cr0, [r0, #-0]
   14478:	00000860 	andeq	r0, r0, r0, ror #16
   1447c:	083c0424 	ldmdaeq	ip!, {r2, r5, sl}
   14480:	00000212 	andeq	r0, r0, r2, lsl r2
   14484:	00044e0b 	andeq	r4, r4, fp, lsl #28
   14488:	093e0400 	ldmdbeq	lr!, {sl}
   1448c:	0000002c 	andeq	r0, r0, ip, lsr #32
   14490:	03580b00 	cmpeq	r8, #0, 22
   14494:	3f040000 	svccc	0x00040000
   14498:	00002c09 	andeq	r2, r0, r9, lsl #24
   1449c:	010b0400 	tsteq	fp, r0, lsl #8
   144a0:	04000003 	streq	r0, [r0], #-3
   144a4:	002c0940 	eoreq	r0, ip, r0, asr #18
   144a8:	0b080000 	bleq	2144b0 <__ccfg+0x1f4508>
   144ac:	0000050f 	andeq	r0, r0, pc, lsl #10
   144b0:	2c094104 	stfcss	f4, [r9], {4}
   144b4:	0c000000 	stceq	0, cr0, [r0], {-0}
   144b8:	00071d0b 	andeq	r1, r7, fp, lsl #26
   144bc:	09420400 	stmdbeq	r2, {sl}^
   144c0:	0000002c 	andeq	r0, r0, ip, lsr #32
   144c4:	08040b10 	stmdaeq	r4, {r4, r8, r9, fp}
   144c8:	43040000 	movwmi	r0, #16384	; 0x4000
   144cc:	00002c09 	andeq	r2, r0, r9, lsl #24
   144d0:	c60b1400 	strgt	r1, [fp], -r0, lsl #8
   144d4:	04000002 	streq	r0, [r0], #-2
   144d8:	002c0944 	eoreq	r0, ip, r4, asr #18
   144dc:	0b180000 	bleq	6144e4 <__ccfg+0x5f453c>
   144e0:	00000457 	andeq	r0, r0, r7, asr r4
   144e4:	2c094504 	cfstr32cs	mvfx4, [r9], {4}
   144e8:	1c000000 	stcne	0, cr0, [r0], {-0}
   144ec:	0006c70b 	andeq	ip, r6, fp, lsl #14
   144f0:	09460400 	stmdbeq	r6, {sl}^
   144f4:	0000002c 	andeq	r0, r0, ip, lsr #32
   144f8:	61100020 	tstvs	r0, r0, lsr #32
   144fc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   14500:	084f0401 	stmdaeq	pc, {r0, sl}^	; <UNPREDICTABLE>
   14504:	00000257 	andeq	r0, r0, r7, asr r2
   14508:	0009740b 	andeq	r7, r9, fp, lsl #8
   1450c:	0a500400 	beq	1415514 <__ccfg+0x13f556c>
   14510:	00000257 	andeq	r0, r0, r7, asr r2
   14514:	08c00b00 	stmiaeq	r0, {r8, r9, fp}^
   14518:	51040000 	mrspl	r0, (UNDEF: 4)
   1451c:	00025709 	andeq	r5, r2, r9, lsl #14
   14520:	dd118000 	ldcle	0, cr8, [r1, #-0]
   14524:	04000009 	streq	r0, [r0], #-9
   14528:	00fb0a53 	rscseq	r0, fp, r3, asr sl
   1452c:	01000000 	mrseq	r0, (UNDEF: 0)
   14530:	000a2b11 	andeq	r2, sl, r1, lsl fp
   14534:	0a560400 	beq	159553c <__ccfg+0x1575594>
   14538:	000000fb 	strdeq	r0, [r0], -fp
   1453c:	08000104 	stmdaeq	r0, {r2, r8}
   14540:	000000f9 	strdeq	r0, [r0], -r9
   14544:	00000267 	andeq	r0, r0, r7, ror #4
   14548:	00002509 	andeq	r2, r0, r9, lsl #10
   1454c:	10001f00 	andne	r1, r0, r0, lsl #30
   14550:	0000078a 	andeq	r0, r0, sl, lsl #15
   14554:	62040190 	andvs	r0, r4, #144, 2	; 0x24
   14558:	0002aa08 	andeq	sl, r2, r8, lsl #20
   1455c:	0a400b00 	beq	1017164 <__ccfg+0xff71bc>
   14560:	63040000 	movwvs	r0, #16384	; 0x4000
   14564:	0002aa12 	andeq	sl, r2, r2, lsl sl
   14568:	660b0000 	strvs	r0, [fp], -r0
   1456c:	04000004 	streq	r0, [r0], #-4
   14570:	002c0664 	eoreq	r0, ip, r4, ror #12
   14574:	0b040000 	bleq	11457c <__ccfg+0xf45d4>
   14578:	00000273 	andeq	r0, r0, r3, ror r2
   1457c:	b0096604 	andlt	r6, r9, r4, lsl #12
   14580:	08000002 	stmdaeq	r0, {r1}
   14584:	0000610b 	andeq	r6, r0, fp, lsl #2
   14588:	1e670400 	cdpne	4, 6, cr0, cr7, cr0, {0}
   1458c:	00000212 	andeq	r0, r0, r2, lsl r2
   14590:	040f0088 	streq	r0, [pc], #-136	; 14598 <__exidx_end+0xf668>
   14594:	00000267 	andeq	r0, r0, r7, ror #4
   14598:	0002c008 	andeq	ip, r2, r8
   1459c:	0002c000 	andeq	ip, r2, r0
   145a0:	00250900 	eoreq	r0, r5, r0, lsl #18
   145a4:	001f0000 	andseq	r0, pc, r0
   145a8:	02c6040f 	sbceq	r0, r6, #251658240	; 0xf000000
   145ac:	0d120000 	ldceq	0, cr0, [r2, #-0]
   145b0:	0000093e 	andeq	r0, r0, lr, lsr r9
   145b4:	087a0408 	ldmdaeq	sl!, {r3, sl}^
   145b8:	000002ef 	andeq	r0, r0, pc, ror #5
   145bc:	0006040b 	andeq	r0, r6, fp, lsl #8
   145c0:	117b0400 	cmnne	fp, r0, lsl #8
   145c4:	000002ef 	andeq	r0, r0, pc, ror #5
   145c8:	18cf0b00 	stmiane	pc, {r8, r9, fp}^	; <UNPREDICTABLE>
   145cc:	7c040000 	stcvc	0, cr0, [r4], {-0}
   145d0:	00002c06 	andeq	r2, r0, r6, lsl #24
   145d4:	0f000400 	svceq	0x00000400
   145d8:	00005504 	andeq	r5, r0, r4, lsl #10
   145dc:	03b60d00 			; <UNDEFINED> instruction: 0x03b60d00
   145e0:	04680000 	strbteq	r0, [r8], #-0
   145e4:	043808ba 	ldrteq	r0, [r8], #-2234	; 0xfffff746
   145e8:	5f0e0000 	svcpl	0x000e0000
   145ec:	bb040070 	bllt	1147b4 <__ccfg+0xf480c>
   145f0:	0002ef12 	andeq	lr, r2, r2, lsl pc
   145f4:	5f0e0000 	svcpl	0x000e0000
   145f8:	bc040072 	stclt	0, cr0, [r4], {114}	; 0x72
   145fc:	00002c07 	andeq	r2, r0, r7, lsl #24
   14600:	5f0e0400 	svcpl	0x000e0400
   14604:	bd040077 	stclt	0, cr0, [r4, #-476]	; 0xfffffe24
   14608:	00002c07 	andeq	r2, r0, r7, lsl #24
   1460c:	e90b0800 	stmdb	fp, {fp}
   14610:	04000001 	streq	r0, [r0], #-1
   14614:	005c09be 	ldrheq	r0, [ip], #-158	; 0xffffff62
   14618:	0b0c0000 	bleq	314620 <__ccfg+0x2f4678>
   1461c:	00000662 	andeq	r0, r0, r2, ror #12
   14620:	5c09bf04 	stcpl	15, cr11, [r9], {4}
   14624:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   14628:	66625f0e 	strbtvs	r5, [r2], -lr, lsl #30
   1462c:	11c00400 	bicne	r0, r0, r0, lsl #8
   14630:	000002c7 	andeq	r0, r0, r7, asr #5
   14634:	01e00b10 	mvneq	r0, r0, lsl fp
   14638:	c1040000 	mrsgt	r0, (UNDEF: 4)
   1463c:	00002c07 	andeq	r2, r0, r7, lsl #24
   14640:	780b1800 	stmdavc	fp, {fp, ip}
   14644:	04000002 	streq	r0, [r0], #-2
   14648:	00f90ac8 	rscseq	r0, r9, r8, asr #21
   1464c:	0b1c0000 	bleq	714654 <__ccfg+0x6f46ac>
   14650:	0000185f 	andeq	r1, r0, pc, asr r8
   14654:	bc1dca04 			; <UNDEFINED> instruction: 0xbc1dca04
   14658:	20000005 	andcs	r0, r0, r5
   1465c:	0018260b 	andseq	r2, r8, fp, lsl #12
   14660:	1dcc0400 	cfstrdne	mvd0, [ip]
   14664:	000005e6 	andeq	r0, r0, r6, ror #11
   14668:	0a510b24 	beq	1457300 <__ccfg+0x1437358>
   1466c:	cf040000 	svcgt	0x00040000
   14670:	00060a0d 	andeq	r0, r6, sp, lsl #20
   14674:	140b2800 	strne	r2, [fp], #-2048	; 0xfffff800
   14678:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
   1467c:	062409d0 			; <UNDEFINED> instruction: 0x062409d0
   14680:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
   14684:	0062755f 	rsbeq	r7, r2, pc, asr r5
   14688:	c711d304 	ldrgt	sp, [r1, -r4, lsl #6]
   1468c:	30000002 	andcc	r0, r0, r2
   14690:	70755f0e 	rsbsvc	r5, r5, lr, lsl #30
   14694:	12d40400 	sbcsne	r0, r4, #0, 8
   14698:	000002ef 	andeq	r0, r0, pc, ror #5
   1469c:	755f0e38 	ldrbvc	r0, [pc, #-3640]	; 1386c <__exidx_end+0xe93c>
   146a0:	d5040072 	strle	r0, [r4, #-114]	; 0xffffff8e
   146a4:	00002c07 	andeq	r2, r0, r7, lsl #24
   146a8:	680b3c00 	stmdavs	fp, {sl, fp, ip, sp}
   146ac:	0400000a 	streq	r0, [r0], #-10
   146b0:	062a11d8 			; <UNDEFINED> instruction: 0x062a11d8
   146b4:	0b400000 	bleq	10146bc <__ccfg+0xff4714>
   146b8:	000009f7 	strdeq	r0, [r0], -r7
   146bc:	3a11d904 	bcc	48aad4 <__ccfg+0x46ab2c>
   146c0:	43000006 	movwmi	r0, #6
   146c4:	626c5f0e 	rsbvs	r5, ip, #14, 30	; 0x38
   146c8:	11dc0400 	bicsne	r0, ip, r0, lsl #8
   146cc:	000002c7 	andeq	r0, r0, r7, asr #5
   146d0:	08570b44 	ldmdaeq	r7, {r2, r6, r8, r9, fp}^
   146d4:	df040000 	svcle	0x00040000
   146d8:	00002c07 	andeq	r2, r0, r7, lsl #24
   146dc:	030b4c00 	movweq	r4, #48128	; 0xbc00
   146e0:	04000004 	streq	r0, [r0], #-4
   146e4:	007f0ae0 	rsbseq	r0, pc, r0, ror #21
   146e8:	0b500000 	bleq	14146f0 <__ccfg+0x13f4748>
   146ec:	0000432e 	andeq	r4, r0, lr, lsr #6
   146f0:	5612e304 	ldrpl	lr, [r2], -r4, lsl #6
   146f4:	54000004 	strpl	r0, [r0], #-4
   146f8:	00086f0b 	andeq	r6, r8, fp, lsl #30
   146fc:	0ce70400 	cfstrdeq	mvd0, [r7]
   14700:	00000113 	andeq	r0, r0, r3, lsl r1
   14704:	07920b58 			; <UNDEFINED> instruction: 0x07920b58
   14708:	e9040000 	stmdb	r4, {}	; <UNPREDICTABLE>
   1470c:	0000ed0e 	andeq	lr, r0, lr, lsl #26
   14710:	230b5c00 	movwcs	r5, #48128	; 0xbc00
   14714:	0400000a 	streq	r0, [r0], #-10
   14718:	002c09ea 	eoreq	r0, ip, sl, ror #19
   1471c:	00640000 	rsbeq	r0, r4, r0
   14720:	00002c13 	andeq	r2, r0, r3, lsl ip
   14724:	00045600 	andeq	r5, r4, r0, lsl #12
   14728:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   1472c:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   14730:	14000000 	strne	r0, [r0], #-0
   14734:	000005aa 	andeq	r0, r0, sl, lsr #11
   14738:	00002c14 	andeq	r2, r0, r4, lsl ip
   1473c:	040f0000 	streq	r0, [pc], #-0	; 14744 <__exidx_end+0xf814>
   14740:	00000461 	andeq	r0, r0, r1, ror #8
   14744:	00045615 	andeq	r5, r4, r5, lsl r6
   14748:	436c1600 	cmnmi	ip, #0, 12
   1474c:	04280000 	strteq	r0, [r8], #-0
   14750:	08026504 	stmdaeq	r2, {r2, r8, sl, sp, lr}
   14754:	000005aa 	andeq	r0, r0, sl, lsr #11
   14758:	0006f817 	andeq	pc, r6, r7, lsl r8	; <UNPREDICTABLE>
   1475c:	02670400 	rsbeq	r0, r7, #0, 8
   14760:	00002c07 	andeq	r2, r0, r7, lsl #24
   14764:	d2170000 	andsle	r0, r7, #0
   14768:	04000005 	streq	r0, [r0], #-5
   1476c:	960b026c 	strls	r0, [fp], -ip, ror #4
   14770:	04000006 	streq	r0, [r0], #-6
   14774:	00025517 	andeq	r5, r2, r7, lsl r5
   14778:	026c0400 	rsbeq	r0, ip, #0, 8
   1477c:	00069614 	andeq	r9, r6, r4, lsl r6
   14780:	57170800 	ldrpl	r0, [r7, -r0, lsl #16]
   14784:	0400000a 	streq	r0, [r0], #-10
   14788:	961e026c 	ldrls	r0, [lr], -ip, ror #4
   1478c:	0c000006 	stceq	0, cr0, [r0], {6}
   14790:	00046117 	andeq	r6, r4, r7, lsl r1
   14794:	026e0400 	rsbeq	r0, lr, #0, 8
   14798:	00002c08 	andeq	r2, r0, r8, lsl #24
   1479c:	13171000 	tstne	r7, #0
   147a0:	04000004 	streq	r0, [r0], #-4
   147a4:	9608026f 	strls	r0, [r8], -pc, ror #4
   147a8:	14000008 	strne	r0, [r0], #-8
   147ac:	000a0a17 	andeq	r0, sl, r7, lsl sl
   147b0:	02720400 	rsbseq	r0, r2, #0, 8
   147b4:	00002c07 	andeq	r2, r0, r7, lsl #24
   147b8:	5c173000 	ldcpl	0, cr3, [r7], {-0}
   147bc:	0400003d 	streq	r0, [r0], #-61	; 0xffffffc3
   147c0:	ab160273 	blge	595194 <__ccfg+0x5751ec>
   147c4:	34000008 	strcc	r0, [r0], #-8
   147c8:	0005a517 	andeq	sl, r5, r7, lsl r5
   147cc:	02750400 	rsbseq	r0, r5, #0, 8
   147d0:	00002c07 	andeq	r2, r0, r7, lsl #24
   147d4:	9f173800 	svcls	0x00173800
   147d8:	04000006 	streq	r0, [r0], #-6
   147dc:	bc0a0277 	sfmlt	f0, 4, [sl], {119}	; 0x77
   147e0:	3c000008 	stccc	0, cr0, [r0], {8}
   147e4:	0002d017 	andeq	sp, r2, r7, lsl r0
   147e8:	027a0400 	rsbseq	r0, sl, #0, 8
   147ec:	00017913 	andeq	r7, r1, r3, lsl r9
   147f0:	7c174000 	ldcvc	0, cr4, [r7], {-0}
   147f4:	04000003 	streq	r0, [r0], #-3
   147f8:	2c07027b 	sfmcs	f0, 4, [r7], {123}	; 0x7b
   147fc:	44000000 	strmi	r0, [r0], #-0
   14800:	0004b617 	andeq	fp, r4, r7, lsl r6
   14804:	027c0400 	rsbseq	r0, ip, #0, 8
   14808:	00017913 	andeq	r7, r1, r3, lsl r9
   1480c:	0a174800 	beq	5e6814 <__ccfg+0x5c686c>
   14810:	04000006 	streq	r0, [r0], #-6
   14814:	c214027d 	andsgt	r0, r4, #-805306361	; 0xd0000007
   14818:	4c000008 	stcmi	0, cr0, [r0], {8}
   1481c:	00083d17 	andeq	r3, r8, r7, lsl sp
   14820:	02800400 	addeq	r0, r0, #0, 8
   14824:	00002c07 	andeq	r2, r0, r7, lsl #24
   14828:	d4175000 	ldrle	r5, [r7], #-0
   1482c:	04000008 	streq	r0, [r0], #-8
   14830:	aa090281 	bge	25523c <__ccfg+0x235294>
   14834:	54000005 	strpl	r0, [r0], #-5
   14838:	0008ee17 	andeq	lr, r8, r7, lsl lr
   1483c:	02a40400 	adceq	r0, r4, #0, 8
   14840:	00087107 	andeq	r7, r8, r7, lsl #2
   14844:	8a185800 	bhi	62a84c <__ccfg+0x60a8a4>
   14848:	04000007 	streq	r0, [r0], #-7
   1484c:	aa1302a8 	bge	4d52f4 <__ccfg+0x4b534c>
   14850:	48000002 	stmdami	r0, {r1}
   14854:	05321801 	ldreq	r1, [r2, #-2049]!	; 0xfffff7ff
   14858:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
   1485c:	02671202 	rsbeq	r1, r7, #536870912	; 0x20000000
   14860:	014c0000 	mrseq	r0, (UNDEF: 76)
   14864:	00051918 	andeq	r1, r5, r8, lsl r9
   14868:	02ad0400 	adceq	r0, sp, #0, 8
   1486c:	0008d30c 	andeq	sp, r8, ip, lsl #6
   14870:	1802dc00 	stmdane	r2, {sl, fp, ip, lr, pc}
   14874:	00000951 	andeq	r0, r0, r1, asr r9
   14878:	1002b204 	andne	fp, r2, r4, lsl #4
   1487c:	00000657 	andeq	r0, r0, r7, asr r6
   14880:	cb1802e0 	blgt	615408 <__ccfg+0x5f5460>
   14884:	04000007 	streq	r0, [r0], #-7
   14888:	df0a02b4 	svcle	0x000a02b4
   1488c:	ec000008 	stc	0, cr0, [r0], {8}
   14890:	040f0002 	streq	r0, [pc], #-2	; 14898 <__exidx_end+0xf968>
   14894:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   14898:	e5080102 	str	r0, [r8, #-258]	; 0xfffffefe
   1489c:	15000008 	strne	r0, [r0, #-8]
   148a0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
   148a4:	0438040f 	ldrteq	r0, [r8], #-1039	; 0xfffffbf1
   148a8:	2c130000 	ldccs	0, cr0, [r3], {-0}
   148ac:	e0000000 	and	r0, r0, r0
   148b0:	14000005 	strne	r0, [r0], #-5
   148b4:	00000456 	andeq	r0, r0, r6, asr r4
   148b8:	0000f914 	andeq	pc, r0, r4, lsl r9	; <UNPREDICTABLE>
   148bc:	05e01400 	strbeq	r1, [r0, #1024]!	; 0x400
   148c0:	2c140000 	ldccs	0, cr0, [r4], {-0}
   148c4:	00000000 	andeq	r0, r0, r0
   148c8:	05b7040f 	ldreq	r0, [r7, #1039]!	; 0x40f
   148cc:	040f0000 	streq	r0, [pc], #-0	; 148d4 <__exidx_end+0xf9a4>
   148d0:	000005c2 	andeq	r0, r0, r2, asr #11
   148d4:	00008b13 	andeq	r8, r0, r3, lsl fp
   148d8:	00060a00 	andeq	r0, r6, r0, lsl #20
   148dc:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   148e0:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   148e4:	14000000 	strne	r0, [r0], #-0
   148e8:	0000008b 	andeq	r0, r0, fp, lsl #1
   148ec:	00002c14 	andeq	r2, r0, r4, lsl ip
   148f0:	040f0000 	streq	r0, [pc], #-0	; 148f8 <__exidx_end+0xf9c8>
   148f4:	000005ec 	andeq	r0, r0, ip, ror #11
   148f8:	00002c13 	andeq	r2, r0, r3, lsl ip
   148fc:	00062400 	andeq	r2, r6, r0, lsl #8
   14900:	04561400 	ldrbeq	r1, [r6], #-1024	; 0xfffffc00
   14904:	f9140000 			; <UNDEFINED> instruction: 0xf9140000
   14908:	00000000 	andeq	r0, r0, r0
   1490c:	0610040f 	ldreq	r0, [r0], -pc, lsl #8
   14910:	55080000 	strpl	r0, [r8, #-0]
   14914:	3a000000 	bcc	1491c <__exidx_end+0xf9ec>
   14918:	09000006 	stmdbeq	r0, {r1, r2}
   1491c:	00000025 	andeq	r0, r0, r5, lsr #32
   14920:	55080002 	strpl	r0, [r8, #-2]
   14924:	4a000000 	bmi	1492c <__exidx_end+0xf9fc>
   14928:	09000006 	stmdbeq	r0, {r1, r2}
   1492c:	00000025 	andeq	r0, r0, r5, lsr #32
   14930:	f1040000 	cps	#0
   14934:	04000003 	streq	r0, [r0], #-3
   14938:	f51a0124 			; <UNDEFINED> instruction: 0xf51a0124
   1493c:	19000002 	stmdbne	r0, {r1}
   14940:	00004382 	andeq	r4, r0, r2, lsl #7
   14944:	0128040c 			; <UNDEFINED> instruction: 0x0128040c
   14948:	00069008 	andeq	r9, r6, r8
   1494c:	0a401700 	beq	101a554 <__ccfg+0xffa5ac>
   14950:	2a040000 	bcs	114958 <__ccfg+0xf49b0>
   14954:	06901101 	ldreq	r1, [r0], r1, lsl #2
   14958:	17000000 	strne	r0, [r0, -r0]
   1495c:	0000088f 	andeq	r0, r0, pc, lsl #17
   14960:	07012b04 	streq	r2, [r1, -r4, lsl #22]
   14964:	0000002c 	andeq	r0, r0, ip, lsr #32
   14968:	05911704 	ldreq	r1, [r1, #1796]	; 0x704
   1496c:	2c040000 	stccs	0, cr0, [r4], {-0}
   14970:	06960b01 	ldreq	r0, [r6], r1, lsl #22
   14974:	00080000 	andeq	r0, r8, r0
   14978:	0657040f 	ldrbeq	r0, [r7], -pc, lsl #8
   1497c:	040f0000 	streq	r0, [pc], #-0	; 14984 <__exidx_end+0xfa54>
   14980:	0000064a 	andeq	r0, r0, sl, asr #12
   14984:	00036819 	andeq	r6, r3, r9, lsl r8
   14988:	44040e00 	strmi	r0, [r4], #-3584	; 0xfffff200
   1498c:	06d50801 	ldrbeq	r0, [r5], r1, lsl #16
   14990:	88170000 	ldmdahi	r7, {}	; <UNPREDICTABLE>
   14994:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
   14998:	d5120145 	ldrle	r0, [r2, #-325]	; 0xfffffebb
   1499c:	00000006 	andeq	r0, r0, r6
   149a0:	00061c17 	andeq	r1, r6, r7, lsl ip
   149a4:	01460400 	cmpeq	r6, r0, lsl #8
   149a8:	0006d512 	andeq	sp, r6, r2, lsl r5
   149ac:	2d170600 	ldccs	6, cr0, [r7, #-0]
   149b0:	04000010 	streq	r0, [r0], #-16
   149b4:	63120147 	tstvs	r2, #-1073741807	; 0xc0000011
   149b8:	0c000000 	stceq	0, cr0, [r0], {-0}
   149bc:	00630800 	rsbeq	r0, r3, r0, lsl #16
   149c0:	06e50000 	strbteq	r0, [r5], r0
   149c4:	25090000 	strcs	r0, [r9, #-0]
   149c8:	02000000 	andeq	r0, r0, #0
   149cc:	04d01a00 	ldrbeq	r1, [r0], #2560	; 0xa00
   149d0:	fa070285 	blx	1d53ec <__ccfg+0x1b5444>
   149d4:	17000007 	strne	r0, [r0, -r7]
   149d8:	000009fd 	strdeq	r0, [r0], -sp
   149dc:	18028704 	stmdane	r2, {r2, r8, r9, sl, pc}
   149e0:	00000025 	andeq	r0, r0, r5, lsr #32
   149e4:	09591700 	ldmdbeq	r9, {r8, r9, sl, ip}^
   149e8:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
   149ec:	05aa1202 	streq	r1, [sl, #514]!	; 0x202
   149f0:	17040000 	strne	r0, [r4, -r0]
   149f4:	000003a9 	andeq	r0, r0, r9, lsr #7
   149f8:	10028904 	andne	r8, r2, r4, lsl #18
   149fc:	000007fa 	strdeq	r0, [r0], -sl
   14a00:	081c1708 	ldmdaeq	ip, {r3, r8, r9, sl, ip}
   14a04:	8a040000 	bhi	114a0c <__ccfg+0xf4a64>
   14a08:	018f1702 	orreq	r1, pc, r2, lsl #14
   14a0c:	17240000 	strne	r0, [r4, -r0]!
   14a10:	000005d9 	ldrdeq	r0, [r0], -r9
   14a14:	0f028b04 	svceq	0x00028b04
   14a18:	0000002c 	andeq	r0, r0, ip, lsr #32
   14a1c:	0a3b1748 	beq	eda744 <__ccfg+0xeba79c>
   14a20:	8c040000 	stchi	0, cr0, [r4], {-0}
   14a24:	00782c02 	rsbseq	r2, r8, r2, lsl #24
   14a28:	17500000 	ldrbne	r0, [r0, -r0]
   14a2c:	00000085 	andeq	r0, r0, r5, lsl #1
   14a30:	1a028d04 	bne	b7e48 <__ccfg+0x97ea0>
   14a34:	0000069c 	muleq	r0, ip, r6
   14a38:	04ee1758 	strbteq	r1, [lr], #1880	; 0x758
   14a3c:	8e040000 	cdphi	0, 0, cr0, cr4, cr0, {0}
   14a40:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14a44:	17680000 	strbne	r0, [r8, -r0]!
   14a48:	00000966 	andeq	r0, r0, r6, ror #18
   14a4c:	16028f04 	strne	r8, [r2], -r4, lsl #30
   14a50:	000000ed 	andeq	r0, r0, sp, ror #1
   14a54:	006f1770 	rsbeq	r1, pc, r0, ror r7	; <UNPREDICTABLE>
   14a58:	90040000 	andls	r0, r4, r0
   14a5c:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14a60:	17780000 	ldrbne	r0, [r8, -r0]!
   14a64:	0000084d 	andeq	r0, r0, sp, asr #16
   14a68:	10029104 	andne	r9, r2, r4, lsl #2
   14a6c:	0000080a 	andeq	r0, r0, sl, lsl #16
   14a70:	03861780 	orreq	r1, r6, #128, 14	; 0x2000000
   14a74:	92040000 	andls	r0, r4, #0
   14a78:	081a1002 	ldmdaeq	sl, {r1, ip}
   14a7c:	17880000 	strne	r0, [r8, r0]
   14a80:	00000911 	andeq	r0, r0, r1, lsl r9
   14a84:	0f029304 	svceq	0x00029304
   14a88:	0000002c 	andeq	r0, r0, ip, lsr #32
   14a8c:	022917a0 	eoreq	r1, r9, #160, 14	; 0x2800000
   14a90:	94040000 	strls	r0, [r4], #-0
   14a94:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14a98:	17a40000 	strne	r0, [r4, r0]!
   14a9c:	00000523 	andeq	r0, r0, r3, lsr #10
   14aa0:	16029504 	strne	r9, [r2], -r4, lsl #10
   14aa4:	000000ed 	andeq	r0, r0, sp, ror #1
   14aa8:	046b17ac 	strbteq	r1, [fp], #-1964	; 0xfffff854
   14aac:	96040000 	strls	r0, [r4], -r0
   14ab0:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14ab4:	17b40000 	ldrne	r0, [r4, r0]!
   14ab8:	00000653 	andeq	r0, r0, r3, asr r6
   14abc:	16029704 	strne	r9, [r2], -r4, lsl #14
   14ac0:	000000ed 	andeq	r0, r0, sp, ror #1
   14ac4:	04dd17bc 	ldrbeq	r1, [sp], #1980	; 0x7bc
   14ac8:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
   14acc:	00ed1602 	rsceq	r1, sp, r2, lsl #12
   14ad0:	17c40000 	strbne	r0, [r4, r0]
   14ad4:	000006f6 	strdeq	r0, [r0], -r6
   14ad8:	08029904 	stmdaeq	r2, {r2, r8, fp, ip, pc}
   14adc:	0000002c 	andeq	r0, r0, ip, lsr #32
   14ae0:	b00800cc 	andlt	r0, r8, ip, asr #1
   14ae4:	0a000005 	beq	14b00 <__exidx_end+0xfbd0>
   14ae8:	09000008 	stmdbeq	r0, {r3}
   14aec:	00000025 	andeq	r0, r0, r5, lsr #32
   14af0:	b0080019 	andlt	r0, r8, r9, lsl r0
   14af4:	1a000005 	bne	14b10 <__exidx_end+0xfbe0>
   14af8:	09000008 	stmdbeq	r0, {r3}
   14afc:	00000025 	andeq	r0, r0, r5, lsr #32
   14b00:	b0080007 	andlt	r0, r8, r7
   14b04:	2a000005 	bcs	14b20 <__exidx_end+0xfbf0>
   14b08:	09000008 	stmdbeq	r0, {r3}
   14b0c:	00000025 	andeq	r0, r0, r5, lsr #32
   14b10:	f01a0017 			; <UNDEFINED> instruction: 0xf01a0017
   14b14:	07029e04 	streq	r9, [r2, -r4, lsl #28]
   14b18:	00000851 	andeq	r0, r0, r1, asr r8
   14b1c:	00036117 	andeq	r6, r3, r7, lsl r1
   14b20:	02a10400 	adceq	r0, r1, #0, 8
   14b24:	0008511b 	andeq	r5, r8, fp, lsl r1
   14b28:	5f170000 	svcpl	0x00170000
   14b2c:	0400000a 	streq	r0, [r0], #-10
   14b30:	611802a2 	tstvs	r8, r2, lsr #5
   14b34:	78000008 	stmdavc	r0, {r3}
   14b38:	02ef0800 	rsceq	r0, pc, #0, 16
   14b3c:	08610000 	stmdaeq	r1!, {}^	; <UNPREDICTABLE>
   14b40:	25090000 	strcs	r0, [r9, #-0]
   14b44:	1d000000 	stcne	0, cr0, [r0, #-0]
   14b48:	00250800 	eoreq	r0, r5, r0, lsl #16
   14b4c:	08710000 	ldmdaeq	r1!, {}^	; <UNPREDICTABLE>
   14b50:	25090000 	strcs	r0, [r9, #-0]
   14b54:	1d000000 	stcne	0, cr0, [r0, #-0]
   14b58:	04f01b00 	ldrbteq	r1, [r0], #2816	; 0xb00
   14b5c:	96030283 	strls	r0, [r3], -r3, lsl #5
   14b60:	1c000008 	stcne	0, cr0, [r0], {8}
   14b64:	0000436c 	andeq	r4, r0, ip, ror #6
   14b68:	0b029a04 	bleq	bb380 <__ccfg+0x9b3d8>
   14b6c:	000006e5 	andeq	r0, r0, r5, ror #13
   14b70:	00082b1c 	andeq	r2, r8, ip, lsl fp
   14b74:	02a30400 	adceq	r0, r3, #0, 8
   14b78:	00082a0b 	andeq	r2, r8, fp, lsl #20
   14b7c:	b0080000 	andlt	r0, r8, r0
   14b80:	a6000005 	strge	r0, [r0], -r5
   14b84:	09000008 	stmdbeq	r0, {r3}
   14b88:	00000025 	andeq	r0, r0, r5, lsr #32
   14b8c:	461d0018 			; <UNDEFINED> instruction: 0x461d0018
   14b90:	0f00000a 	svceq	0x0000000a
   14b94:	0008a604 	andeq	sl, r8, r4, lsl #12
   14b98:	08bc1e00 	ldmeq	ip!, {r9, sl, fp, ip}
   14b9c:	56140000 	ldrpl	r0, [r4], -r0
   14ba0:	00000004 	andeq	r0, r0, r4
   14ba4:	08b1040f 	ldmeq	r1!, {r0, r1, r2, r3, sl}
   14ba8:	040f0000 	streq	r0, [pc], #-0	; 14bb0 <__exidx_end+0xfc80>
   14bac:	00000179 	andeq	r0, r0, r9, ror r1
   14bb0:	0008d31e 	andeq	sp, r8, lr, lsl r3
   14bb4:	002c1400 	eoreq	r1, ip, r0, lsl #8
   14bb8:	0f000000 	svceq	0x00000000
   14bbc:	0008d904 	andeq	sp, r8, r4, lsl #18
   14bc0:	c8040f00 	stmdagt	r4, {r8, r9, sl, fp}
   14bc4:	08000008 	stmdaeq	r0, {r3}
   14bc8:	0000064a 	andeq	r0, r0, sl, asr #12
   14bcc:	000008ef 	andeq	r0, r0, pc, ror #17
   14bd0:	00002509 	andeq	r2, r0, r9, lsl #10
   14bd4:	1f000200 	svcne	0x00000200
   14bd8:	000007f8 	strdeq	r0, [r0], -r8
   14bdc:	17033304 	strne	r3, [r3, -r4, lsl #6]
   14be0:	00000456 	andeq	r0, r0, r6, asr r4
   14be4:	0007f11f 	andeq	pc, r7, pc, lsl r1	; <UNPREDICTABLE>
   14be8:	03340400 	teqeq	r4, #0, 8
   14bec:	00045c1d 	andeq	r5, r4, sp, lsl ip
   14bf0:	3efe2000 	cdpcc	0, 15, cr2, cr14, cr0, {0}
   14bf4:	67060000 	strvs	r0, [r6, -r0]
   14bf8:	0005aa0e 	andeq	sl, r5, lr, lsl #20
   14bfc:	06f92100 	ldrbteq	r2, [r9], r0, lsl #2
   14c00:	1a010000 	bne	54c08 <__ccfg+0x34c60>
   14c04:	00002c05 	andeq	r2, r0, r5, lsl #24
   14c08:	70030500 	andvc	r0, r3, r0, lsl #10
   14c0c:	2220000b 	eorcs	r0, r0, #11
   14c10:	00004364 	andeq	r4, r0, r4, ror #6
   14c14:	06033604 	streq	r3, [r3], -r4, lsl #12
   14c18:	00000000 	andeq	r0, r0, r0
   14c1c:	00000098 	muleq	r0, r8, r0
   14c20:	0a4b9c01 	beq	12fbc2c <__ccfg+0x12dbc84>
   14c24:	70230000 	eorvc	r0, r3, r0
   14c28:	01007274 	tsteq	r0, r4, ror r2
   14c2c:	0456202c 	ldrbeq	r2, [r6], #-44	; 0xffffffd4
   14c30:	58170000 	ldmdapl	r7, {}	; <UNPREDICTABLE>
   14c34:	58110000 	ldmdapl	r1, {}	; <UNPREDICTABLE>
   14c38:	00240000 	eoreq	r0, r4, r0
   14c3c:	22000000 	andcs	r0, r0, #0
   14c40:	c0000000 	andgt	r0, r0, r0
   14c44:	25000009 	strcs	r0, [r0, #-9]
   14c48:	37010069 	strcc	r0, [r1, -r9, rrx]
   14c4c:	00002c08 	andeq	r2, r0, r8, lsl #24
   14c50:	00002400 	andeq	r2, r0, r0, lsl #8
   14c54:	00160000 	andseq	r0, r6, r0
   14c58:	09af0000 	stmibeq	pc!, {}	; <UNPREDICTABLE>
   14c5c:	73260000 			; <UNDEFINED> instruction: 0x73260000
   14c60:	01000043 	tsteq	r0, r3, asr #32
   14c64:	0179183a 	cmneq	r9, sl, lsr r8
   14c68:	58450000 	stmdapl	r5, {}^	; <UNPREDICTABLE>
   14c6c:	58430000 	stmdapl	r3, {}^	; <UNPREDICTABLE>
   14c70:	bf260000 	svclt	0x00260000
   14c74:	01000043 	tsteq	r0, r3, asr #32
   14c78:	0179223a 	cmneq	r9, sl, lsr r2
   14c7c:	585e0000 	ldmdapl	lr, {}^	; <UNPREDICTABLE>
   14c80:	58580000 	ldmdapl	r8, {}^	; <UNPREDICTABLE>
   14c84:	00270000 	eoreq	r0, r7, r0
   14c88:	b4000000 	strlt	r0, [r0], #-0
   14c8c:	2800000a 	stmdacs	r0, {r1, r3}
   14c90:	75025001 	strvc	r5, [r2, #-1]
   14c94:	27000000 	strcs	r0, [r0, -r0]
   14c98:	00000000 	andeq	r0, r0, r0
   14c9c:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
   14ca0:	02500128 	subseq	r0, r0, #40, 2
   14ca4:	00000075 	andeq	r0, r0, r5, ror r0
   14ca8:	00000024 	andeq	r0, r0, r4, lsr #32
   14cac:	00000e00 	andeq	r0, r0, r0, lsl #28
   14cb0:	000a0200 	andeq	r0, sl, r0, lsl #4
   14cb4:	00702900 	rsbseq	r2, r0, r0, lsl #18
   14cb8:	aa146601 	bge	52e4c4 <__ccfg+0x50e51c>
   14cbc:	8b000002 	blhi	14ccc <__exidx_end+0xfd9c>
   14cc0:	87000058 	smlsdhi	r0, r8, r0, r0
   14cc4:	29000058 	stmdbcs	r0, {r3, r4, r6}
   14cc8:	66010071 			; <UNDEFINED> instruction: 0x66010071
   14ccc:	0002aa18 	andeq	sl, r2, r8, lsl sl
   14cd0:	0058ab00 	subseq	sl, r8, r0, lsl #22
   14cd4:	0058a900 	subseq	sl, r8, r0, lsl #18
   14cd8:	00002700 	andeq	r2, r0, r0, lsl #14
   14cdc:	0ab40000 	beq	fed14ce4 <_estack+0xded0fce4>
   14ce0:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14ce4:	00750250 	rsbseq	r0, r5, r0, asr r2
   14ce8:	002a0000 	eoreq	r0, sl, r0
   14cec:	b4000000 	strlt	r0, [r0], #-0
   14cf0:	1600000a 	strne	r0, [r0], -sl
   14cf4:	2800000a 	stmdacs	r0, {r1, r3}
   14cf8:	75025001 	strvc	r5, [r2, #-1]
   14cfc:	002a0000 	eoreq	r0, sl, r0
   14d00:	b4000000 	strlt	r0, [r0], #-0
   14d04:	2a00000a 	bcs	14d34 <__exidx_end+0xfe04>
   14d08:	2800000a 	stmdacs	r0, {r1, r3}
   14d0c:	75025001 	strvc	r5, [r2, #-1]
   14d10:	002b0000 	eoreq	r0, fp, r0
   14d14:	3a000000 	bcc	14d1c <__exidx_end+0xfdec>
   14d18:	2800000a 	stmdacs	r0, {r1, r3}
   14d1c:	75025001 	strvc	r5, [r2, #-1]
   14d20:	00270000 	eoreq	r0, r7, r0
   14d24:	4b000000 	blmi	14d2c <__exidx_end+0xfdfc>
   14d28:	2800000a 	stmdacs	r0, {r1, r3}
   14d2c:	75025001 	strvc	r5, [r2, #-1]
   14d30:	2c000000 	stccs	0, cr0, [r0], {-0}
   14d34:	0000437b 	andeq	r4, r0, fp, ror r3
   14d38:	00012101 	andeq	r2, r1, r1, lsl #2
   14d3c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
   14d40:	01000000 	mrseq	r0, (UNDEF: 0)
   14d44:	000ab49c 	muleq	sl, ip, r4
   14d48:	74702300 	ldrbtvc	r2, [r0], #-768	; 0xfffffd00
   14d4c:	21010072 	tstcs	r1, r2, ror r0
   14d50:	0004561e 	andeq	r5, r4, lr, lsl r6
   14d54:	0058c400 	subseq	ip, r8, r0, lsl #8
   14d58:	0058be00 	subseq	fp, r8, r0, lsl #28
   14d5c:	43832d00 	orrmi	r2, r3, #0, 26
   14d60:	22010000 	andcs	r0, r1, #0
   14d64:	00069014 	andeq	r9, r6, r4, lsl r0
   14d68:	0058f600 	subseq	pc, r8, r0, lsl #12
   14d6c:	0058f000 	subseq	pc, r8, r0
   14d70:	00002a00 	andeq	r2, r0, r0, lsl #20
   14d74:	0a4b0000 	beq	12d4d7c <__ccfg+0x12b4dd4>
   14d78:	0a9d0000 	beq	fe754d80 <_estack+0xde74fd80>
   14d7c:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14d80:	00750250 	rsbseq	r0, r5, r0, asr r2
   14d84:	00002700 	andeq	r2, r0, r0, lsl #14
   14d88:	0ab40000 	beq	fed14d90 <_estack+0xded0fd90>
   14d8c:	01280000 			; <UNDEFINED> instruction: 0x01280000
   14d90:	00750250 	rsbseq	r0, r5, r0, asr r2
   14d94:	02510128 	subseq	r0, r1, #40, 2
   14d98:	00000074 	andeq	r0, r0, r4, ror r0
   14d9c:	0043b72e 	subeq	fp, r3, lr, lsr #14
   14da0:	0043b700 	subeq	fp, r3, r0, lsl #14
   14da4:	01280600 			; <UNDEFINED> instruction: 0x01280600
   14da8:	0a920006 	beq	fe494dc8 <_estack+0xde48fdc8>
   14dac:	00040000 	andeq	r0, r4, r0
   14db0:	00004c70 	andeq	r4, r0, r0, ror ip
   14db4:	46e80104 	strbtmi	r0, [r8], r4, lsl #2
   14db8:	420c0000 	andmi	r0, ip, #0
   14dbc:	65000045 	strvs	r0, [r0, #-69]	; 0xffffffbb
   14dc0:	4c00004e 	stcmi	0, cr0, [r0], {78}	; 0x4e
   14dc4:	54000041 	strpl	r0, [r0], #-65	; 0xffffffbf
   14dc8:	a3000000 	movwge	r0, #0
   14dcc:	0200008e 	andeq	r0, r0, #142	; 0x8e
   14dd0:	03920708 	orrseq	r0, r2, #8, 14	; 0x200000
   14dd4:	04030000 	streq	r0, [r3], #-0
   14dd8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
   14ddc:	07040200 	streq	r0, [r4, -r0, lsl #4]
   14de0:	0000039c 	muleq	r0, ip, r3
   14de4:	e8050802 	stmda	r5, {r1, fp}
   14de8:	02000005 	andeq	r0, r0, #5
   14dec:	3ee50408 	cdpcc	4, 14, cr0, cr5, cr8, {0}
   14df0:	d3040000 	movwle	r0, #16384	; 0x4000
   14df4:	02000047 	andeq	r0, r0, #71	; 0x47
   14df8:	0033162a 	eorseq	r1, r3, sl, lsr #12
   14dfc:	80040000 	andhi	r0, r4, r0
   14e00:	0200004b 	andeq	r0, r0, #75	; 0x4b
   14e04:	0060152f 	rsbeq	r1, r0, pc, lsr #10
   14e08:	04050000 	streq	r0, [r5], #-0
   14e0c:	00000066 	andeq	r0, r0, r6, rrx
   14e10:	00004806 	andeq	r4, r0, r6, lsl #16
   14e14:	00007500 	andeq	r7, r0, r0, lsl #10
   14e18:	00750700 	rsbseq	r0, r5, r0, lsl #14
   14e1c:	05000000 	streq	r0, [r0, #-0]
   14e20:	00007b04 	andeq	r7, r0, r4, lsl #22
   14e24:	e2040800 	and	r0, r4, #0, 16
   14e28:	02000052 	andeq	r0, r0, #82	; 0x52
   14e2c:	00880f36 	addeq	r0, r8, r6, lsr pc
   14e30:	04050000 	streq	r0, [r5], #-0
   14e34:	0000008e 	andeq	r0, r0, lr, lsl #1
   14e38:	00002c06 	andeq	r2, r0, r6, lsl #24
   14e3c:	0000a200 	andeq	sl, r0, r0, lsl #4
   14e40:	00750700 	rsbseq	r0, r5, r0, lsl #14
   14e44:	75070000 	strvc	r0, [r7, #-0]
   14e48:	00000000 	andeq	r0, r0, r0
   14e4c:	dc080102 	stfles	f0, [r8], {2}
   14e50:	09000008 	stmdbeq	r0, {r3}
   14e54:	00004d9a 	muleq	r0, sl, sp
   14e58:	5412bb02 	ldrpl	fp, [r2], #-2818	; 0xfffff4fe
   14e5c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
   14e60:	00005315 	andeq	r5, r0, r5, lsl r3
   14e64:	7c10be02 	ldcvc	14, cr11, [r0], {2}
   14e68:	02000000 	andeq	r0, r0, #0
   14e6c:	08de0601 	ldmeq	lr, {r0, r9, sl}^
   14e70:	a00a0000 	andge	r0, sl, r0
   14e74:	0700004a 	streq	r0, [r0, -sl, asr #32]
   14e78:	0000a201 	andeq	sl, r0, r1, lsl #4
   14e7c:	06170300 	ldreq	r0, [r7], -r0, lsl #6
   14e80:	000001f5 	strdeq	r0, [r0], -r5
   14e84:	0045760b 	subeq	r7, r5, fp, lsl #12
   14e88:	9f0b0000 	svcls	0x000b0000
   14e8c:	01000049 	tsteq	r0, r9, asr #32
   14e90:	004ec70b 	subeq	ip, lr, fp, lsl #14
   14e94:	280b0200 	stmdacs	fp, {r9}
   14e98:	03000052 	movweq	r0, #82	; 0x52
   14e9c:	004e090b 	subeq	r0, lr, fp, lsl #18
   14ea0:	450b0400 	strmi	r0, [fp, #-1024]	; 0xfffffc00
   14ea4:	05000051 	streq	r0, [r0, #-81]	; 0xffffffaf
   14ea8:	0050a90b 	subseq	sl, r0, fp, lsl #18
   14eac:	970b0600 	strls	r0, [fp, -r0, lsl #12]
   14eb0:	07000045 	streq	r0, [r0, -r5, asr #32]
   14eb4:	00515a0b 	subseq	r5, r1, fp, lsl #20
   14eb8:	680b0800 	stmdavs	fp, {fp}
   14ebc:	09000051 	stmdbeq	r0, {r0, r4, r6}
   14ec0:	00521b0b 	subseq	r1, r2, fp, lsl #22
   14ec4:	600b0a00 	andvs	r0, fp, r0, lsl #20
   14ec8:	0b00004d 	bleq	15004 <__exidx_end+0x100d4>
   14ecc:	0048140b 	subeq	r1, r8, fp, lsl #8
   14ed0:	280b0c00 	stmdacs	fp, {sl, fp}
   14ed4:	0d000048 	stceq	0, cr0, [r0, #-288]	; 0xfffffee0
   14ed8:	004ae40b 	subeq	lr, sl, fp, lsl #8
   14edc:	fa0b0e00 	blx	2d86e4 <__ccfg+0x2b873c>
   14ee0:	0f00004a 	svceq	0x0000004a
   14ee4:	0049d90b 	subeq	sp, r9, fp, lsl #18
   14ee8:	ed0b1000 	stc	0, cr1, [fp, #-0]
   14eec:	1100004d 	tstne	r0, sp, asr #32
   14ef0:	004a630b 	subeq	r6, sl, fp, lsl #6
   14ef4:	e00b1200 	and	r1, fp, r0, lsl #4
   14ef8:	13000054 	movwne	r0, #84	; 0x54
   14efc:	0046000b 	subeq	r0, r6, fp
   14f00:	870b1400 	strhi	r1, [fp, -r0, lsl #8]
   14f04:	1500004a 	strne	r0, [r0, #-74]	; 0xffffffb6
   14f08:	0045150b 	subeq	r1, r5, fp, lsl #10
   14f0c:	4b0b1600 	blmi	2da714 <__ccfg+0x2ba76c>
   14f10:	17000052 	smlsdne	r0, r2, r0, r0
   14f14:	00536e0b 	subseq	r6, r3, fp, lsl #28
   14f18:	ac0b1800 	stcge	8, cr1, [fp], {-0}
   14f1c:	1900004a 	stmdbne	r0, {r1, r3, r6}
   14f20:	004f390b 	subeq	r3, pc, fp, lsl #18
   14f24:	590b1a00 	stmdbpl	fp, {r9, fp, ip}
   14f28:	1b000052 	blne	15078 <__exidx_end+0x10148>
   14f2c:	0044360b 	subeq	r3, r4, fp, lsl #12
   14f30:	670b1c00 	strvs	r1, [fp, -r0, lsl #24]
   14f34:	1d000052 	stcne	0, cr0, [r0, #-328]	; 0xfffffeb8
   14f38:	0052750b 	subseq	r7, r2, fp, lsl #10
   14f3c:	e40b1e00 	str	r1, [fp], #-3584	; 0xfffff200
   14f40:	1f000043 	svcne	0x00000043
   14f44:	00529f0b 	subseq	r9, r2, fp, lsl #30
   14f48:	ea0b2000 	b	2dcf50 <__ccfg+0x2bcfa8>
   14f4c:	2100004f 	tstcs	r0, pc, asr #32
   14f50:	004dbf0b 	subeq	fp, sp, fp, lsl #30
   14f54:	3e0b2200 	cdpcc	2, 0, cr2, cr11, cr0, {0}
   14f58:	23000052 	movwcs	r0, #82	; 0x52
   14f5c:	004ce10b 	subeq	lr, ip, fp, lsl #2
   14f60:	e30b2400 	movw	r2, #46080	; 0xb400
   14f64:	2500004b 	strcs	r0, [r0, #-75]	; 0xffffffb5
   14f68:	0048df0b 	subeq	sp, r8, fp, lsl #30
   14f6c:	010b2600 	tsteq	fp, r0, lsl #12
   14f70:	2700004c 	strcs	r0, [r0, -ip, asr #32]
   14f74:	00497b0b 	subeq	r7, r9, fp, lsl #22
   14f78:	110b2800 	tstne	fp, r0, lsl #16
   14f7c:	2900004c 	stmdbcs	r0, {r2, r3, r6}
   14f80:	004c210b 	subeq	r2, ip, fp, lsl #2
   14f84:	460b2a00 	strmi	r2, [fp], -r0, lsl #20
   14f88:	2b00004d 	blcs	150c4 <__exidx_end+0x10194>
   14f8c:	004b8a0b 	subeq	r8, fp, fp, lsl #20
   14f90:	f70b2c00 			; <UNDEFINED> instruction: 0xf70b2c00
   14f94:	2d00004f 	stccs	0, cr0, [r0, #-316]	; 0xfffffec4
   14f98:	0049200b 	subeq	r2, r9, fp
   14f9c:	0a002e00 	beq	207a4 <__ccfg+0x7fc>
   14fa0:	00004b1c 	andeq	r4, r0, ip, lsl fp
   14fa4:	00a20107 	adceq	r0, r2, r7, lsl #2
   14fa8:	17040000 	strne	r0, [r4, -r0]
   14fac:	0003d606 	andeq	sp, r3, r6, lsl #12
   14fb0:	484a0b00 	stmdami	sl, {r8, r9, fp}^
   14fb4:	0b000000 	bleq	14fbc <__exidx_end+0x1008c>
   14fb8:	0000447d 	andeq	r4, r0, sp, ror r4
   14fbc:	547a0b01 	ldrbtpl	r0, [sl], #-2817	; 0xfffff4ff
   14fc0:	0b020000 	bleq	94fc8 <__ccfg+0x75020>
   14fc4:	000052ea 	andeq	r5, r0, sl, ror #5
   14fc8:	486a0b03 	stmdami	sl!, {r0, r1, r8, r9, fp}^
   14fcc:	0b040000 	bleq	114fd4 <__ccfg+0xf502c>
   14fd0:	00004562 	andeq	r4, r0, r2, ror #10
   14fd4:	48fc0b05 	ldmmi	ip!, {r0, r2, r8, r9, fp}^
   14fd8:	0b060000 	bleq	194fe0 <__ccfg+0x175038>
   14fdc:	0000485a 	andeq	r4, r0, sl, asr r8
   14fe0:	51960b07 	orrspl	r0, r6, r7, lsl #22
   14fe4:	0b080000 	bleq	214fec <__ccfg+0x1f5044>
   14fe8:	000052ca 	andeq	r5, r0, sl, asr #5
   14fec:	50cd0b09 	sbcpl	r0, sp, r9, lsl #22
   14ff0:	0b0a0000 	bleq	294ff8 <__ccfg+0x275050>
   14ff4:	000045b5 			; <UNDEFINED> instruction: 0x000045b5
   14ff8:	489d0b0b 	ldmmi	sp, {r0, r1, r3, r8, r9, fp}
   14ffc:	0b0c0000 	bleq	315004 <__ccfg+0x2f505c>
   15000:	000044fe 	strdeq	r4, [r0], -lr
   15004:	54af0b0d 	strtpl	r0, [pc], #2829	; 1500c <__exidx_end+0x100dc>
   15008:	0b0e0000 	bleq	395010 <__ccfg+0x375068>
   1500c:	00004d33 	andeq	r4, r0, r3, lsr sp
   15010:	4a2e0b0f 	bmi	b97c54 <__ccfg+0xb77cac>
   15014:	0b100000 	bleq	41501c <__ccfg+0x3f5074>
   15018:	00004d70 	andeq	r4, r0, r0, ror sp
   1501c:	53b00b11 	movspl	r0, #17408	; 0x4400
   15020:	0b120000 	bleq	495028 <__ccfg+0x475080>
   15024:	00004680 	andeq	r4, r0, r0, lsl #13
   15028:	4a410b13 	bmi	1057c7c <__ccfg+0x1037cd4>
   1502c:	0b140000 	bleq	515034 <__ccfg+0x4f508c>
   15030:	00004ca4 	andeq	r4, r0, r4, lsr #25
   15034:	48350b15 	ldmdami	r5!, {r0, r2, r4, r8, r9, fp}
   15038:	0b160000 	bleq	595040 <__ccfg+0x575098>
   1503c:	00004cf0 	strdeq	r4, [r0], -r0
   15040:	4b060b17 	blmi	197ca4 <__ccfg+0x177cfc>
   15044:	0b180000 	bleq	61504c <__ccfg+0x5f50a4>
   15048:	00004580 	andeq	r4, r0, r0, lsl #11
   1504c:	53570b19 	cmppl	r7, #25600	; 0x6400
   15050:	0b1a0000 	bleq	695058 <__ccfg+0x6750b0>
   15054:	00004c70 	andeq	r4, r0, r0, ror ip
   15058:	49fa0b1b 	ldmibmi	sl!, {r0, r1, r3, r4, r8, r9, fp}^
   1505c:	0b1c0000 	bleq	715064 <__ccfg+0x6f50bc>
   15060:	0000441f 	andeq	r4, r0, pc, lsl r4
   15064:	4bbb0b1d 	blmi	feed7ce0 <_estack+0xdeed2ce0>
   15068:	0b1e0000 	bleq	795070 <__ccfg+0x7750c8>
   1506c:	00004ba7 	andeq	r4, r0, r7, lsr #23
   15070:	508a0b1f 	addpl	r0, sl, pc, lsl fp
   15074:	0b200000 	bleq	81507c <__ccfg+0x7f50d4>
   15078:	00005115 	andeq	r5, r0, r5, lsl r1
   1507c:	53360b21 	teqpl	r6, #33792	; 0x8400
   15080:	0b220000 	bleq	895088 <__ccfg+0x8750e0>
   15084:	0000492d 	andeq	r4, r0, sp, lsr #18
   15088:	4ee90b23 	vfmami.f64	d16, d9, d19
   1508c:	0b240000 	bleq	915094 <__ccfg+0x8f50ec>
   15090:	000050e2 	andeq	r5, r0, r2, ror #1
   15094:	50060b25 	andpl	r0, r6, r5, lsr #22
   15098:	0b260000 	bleq	9950a0 <__ccfg+0x9750f8>
   1509c:	0000501a 	andeq	r5, r0, sl, lsl r0
   150a0:	502e0b27 	eorpl	r0, lr, r7, lsr #22
   150a4:	0b280000 	bleq	a150ac <__ccfg+0x9f5104>
   150a8:	000047be 			; <UNDEFINED> instruction: 0x000047be
   150ac:	466b0b29 	strbtmi	r0, [fp], -r9, lsr #22
   150b0:	0b2a0000 	bleq	a950b8 <__ccfg+0xa75110>
   150b4:	00004693 	muleq	r0, r3, r6
   150b8:	53ef0b2b 	mvnpl	r0, #44032	; 0xac00
   150bc:	0b2c0000 	bleq	b150c4 <__ccfg+0xaf511c>
   150c0:	000046c5 	andeq	r4, r0, r5, asr #13
   150c4:	51df0b2d 	bicspl	r0, pc, sp, lsr #22
   150c8:	0b2e0000 	bleq	b950d0 <__ccfg+0xb75128>
   150cc:	000051f3 	strdeq	r5, [r0], -r3
   150d0:	52070b2f 	andpl	r0, r7, #48128	; 0xbc00
   150d4:	0b300000 	bleq	c150dc <__ccfg+0xbf5134>
   150d8:	000048af 	andeq	r4, r0, pc, lsr #17
   150dc:	48890b31 	stmmi	r9, {r0, r4, r5, r8, r9, fp}
   150e0:	0b320000 	bleq	c950e8 <__ccfg+0xc75140>
   150e4:	00004bcf 	andeq	r4, r0, pc, asr #23
   150e8:	4d830b33 	vstrmi	d0, [r3, #204]	; 0xcc
   150ec:	0b340000 	bleq	d150f4 <__ccfg+0xcf514c>
   150f0:	00005403 	andeq	r5, r0, r3, lsl #8
   150f4:	43c70b35 	bicmi	r0, r7, #54272	; 0xd400
   150f8:	0b360000 	bleq	d95100 <__ccfg+0xd75158>
   150fc:	000049af 	andeq	r4, r0, pc, lsr #19
   15100:	49c40b37 	stmibmi	r4, {r0, r1, r2, r4, r5, r8, r9, fp}^
   15104:	0b380000 	bleq	e1510c <__ccfg+0xdf5164>
   15108:	00004c31 	andeq	r4, r0, r1, lsr ip
   1510c:	4c5b0b39 	vmovmi	r0, fp, d25
   15110:	0b3a0000 	bleq	e95118 <__ccfg+0xe75170>
   15114:	0000542c 	andeq	r5, r0, ip, lsr #8
   15118:	4ed40b3b 	vmovmi.u8	r0, d4[1]
   1511c:	0b3c0000 	bleq	f15124 <__ccfg+0xef517c>
   15120:	00004952 	andeq	r4, r0, r2, asr r9
   15124:	448f0b3d 	strmi	r0, [pc], #2877	; 1512c <__exidx_end+0x101fc>
   15128:	0b3e0000 	bleq	f95130 <__ccfg+0xf75188>
   1512c:	00004444 	andeq	r4, r0, r4, asr #8
   15130:	4dcf0b3f 	vstrmi	d16, [pc, #252]	; 15234 <__exidx_end+0x10304>
   15134:	0b400000 	bleq	101513c <__ccfg+0xff5194>
   15138:	00004f55 	andeq	r4, r0, r5, asr pc
   1513c:	506c0b41 	rsbpl	r0, ip, r1, asr #22
   15140:	0b420000 	bleq	1095148 <__ccfg+0x10751a0>
   15144:	00004c46 	andeq	r4, r0, r6, asr #24
   15148:	54650b43 	strbtpl	r0, [r5], #-2883	; 0xfffff4bd
   1514c:	0b440000 	bleq	1115154 <__ccfg+0x10f51ac>
   15150:	00004eff 	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
   15154:	46af0b45 	strtmi	r0, [pc], r5, asr #22
   15158:	0b460000 	bleq	1195160 <__ccfg+0x11751b8>
   1515c:	00004a10 	andeq	r4, r0, r0, lsl sl
   15160:	4b540b47 	blmi	1517e84 <__ccfg+0x14f7edc>
   15164:	0b480000 	bleq	121516c <__ccfg+0x11f51c4>
   15168:	00004403 	andeq	r4, r0, r3, lsl #8
   1516c:	45250b49 	strmi	r0, [r5, #-2889]!	; 0xfffff4b7
   15170:	0b4a0000 	bleq	1295178 <__ccfg+0x12751d0>
   15174:	00004966 	andeq	r4, r0, r6, ror #18
   15178:	4c820b4b 	fstmiaxmi	r2, {d0-d36}	;@ Deprecated
   1517c:	004c0000 	subeq	r0, ip, r0
   15180:	aa070202 	bge	1d5990 <__ccfg+0x1b59e8>
   15184:	0c000009 	stceq	0, cr0, [r0], {9}
   15188:	000003f3 	strdeq	r0, [r0], -r3
   1518c:	000003e8 	andeq	r0, r0, r8, ror #7
   15190:	dd0e000d 	stcle	0, cr0, [lr, #-52]	; 0xffffffcc
   15194:	05000003 	streq	r0, [r0, #-3]
   15198:	0003ff04 	andeq	pc, r3, r4, lsl #30
   1519c:	03ed0e00 	mvneq	r0, #0, 28
   151a0:	01020000 	mrseq	r0, (UNDEF: 2)
   151a4:	0008e508 	andeq	lr, r8, r8, lsl #10
   151a8:	03f80e00 	mvnseq	r0, #0, 28
   151ac:	f10f0000 			; <UNDEFINED> instruction: 0xf10f0000
   151b0:	05000045 	streq	r0, [r0, #-69]	; 0xffffffbb
   151b4:	e81a014c 	ldmda	sl, {r2, r3, r6, r8}
   151b8:	0f000003 	svceq	0x00000003
   151bc:	000049ea 	andeq	r4, r0, sl, ror #19
   151c0:	1a018205 	bne	759dc <__ccfg+0x55a34>
   151c4:	000003e8 	andeq	r0, r0, r8, ror #7
   151c8:	0003f80c 	andeq	pc, r3, ip, lsl #16
   151cc:	00042900 	andeq	r2, r4, r0, lsl #18
   151d0:	09000d00 	stmdbeq	r0, {r8, sl, fp}
   151d4:	00004bf3 	strdeq	r4, [r0], -r3
   151d8:	1e0d2d06 	cdpne	13, 0, cr2, cr13, cr6, {0}
   151dc:	09000004 	stmdbeq	r0, {r2}
   151e0:	000052af 	andeq	r5, r0, pc, lsr #5
   151e4:	f51c3806 			; <UNDEFINED> instruction: 0xf51c3806
   151e8:	0a000001 	beq	151f4 <__exidx_end+0x102c4>
   151ec:	000048c3 	andeq	r4, r0, r3, asr #17
   151f0:	00a20107 	adceq	r0, r2, r7, lsl #2
   151f4:	3a060000 	bcc	1951fc <__ccfg+0x175254>
   151f8:	0004b40e 	andeq	fp, r4, lr, lsl #8
   151fc:	44180b00 	ldrmi	r0, [r8], #-2816	; 0xfffff500
   15200:	0b000000 	bleq	15208 <__exidx_end+0x102d8>
   15204:	00004af3 	strdeq	r4, [r0], -r3
   15208:	53c20b01 	bicpl	r0, r2, #1024	; 0x400
   1520c:	0b020000 	bleq	95214 <__ccfg+0x7526c>
   15210:	00005385 	andeq	r5, r0, r5, lsl #7
   15214:	4e2c0b03 	vmulmi.f64	d0, d12, d3
   15218:	0b040000 	bleq	115220 <__ccfg+0xf5278>
   1521c:	00005153 	andeq	r5, r0, r3, asr r1
   15220:	463c0b05 	ldrtmi	r0, [ip], -r5, lsl #22
   15224:	0b060000 	bleq	19522c <__ccfg+0x175284>
   15228:	00004616 	andeq	r4, r0, r6, lsl r6
   1522c:	48210b07 	stmdami	r1!, {r0, r1, r2, r8, r9, fp}
   15230:	0b080000 	bleq	215238 <__ccfg+0x1f5290>
   15234:	00004d06 	andeq	r4, r0, r6, lsl #26
   15238:	46430b09 	strbmi	r0, [r3], -r9, lsl #22
   1523c:	0b0a0000 	bleq	295244 <__ccfg+0x27529c>
   15240:	00004d0d 	andeq	r4, r0, sp, lsl #26
   15244:	46a80b0b 	strtmi	r0, [r8], fp, lsl #22
   15248:	0b0c0000 	bleq	315250 <__ccfg+0x2f52a8>
   1524c:	0000462d 	andeq	r4, r0, sp, lsr #12
   15250:	51aa0b0d 			; <UNDEFINED> instruction: 0x51aa0b0d
   15254:	0b0e0000 	bleq	39525c <__ccfg+0x3752b4>
   15258:	00004f73 	andeq	r4, r0, r3, ror pc
   1525c:	a204000f 	andge	r0, r4, #15
   15260:	06000050 			; <UNDEFINED> instruction: 0x06000050
   15264:	0441013f 	strbeq	r0, [r1], #-319	; 0xfffffec1
   15268:	36090000 	strcc	r0, [r9], -r0
   1526c:	06000051 			; <UNDEFINED> instruction: 0x06000051
   15270:	04b40f41 	ldrteq	r0, [r4], #3905	; 0xf41
   15274:	be090000 	cdplt	0, 0, cr0, cr9, cr0, {0}
   15278:	06000051 			; <UNDEFINED> instruction: 0x06000051
   1527c:	002c0c4a 	eoreq	r0, ip, sl, asr #24
   15280:	d5090000 	strle	r0, [r9, #-0]
   15284:	06000045 	streq	r0, [r0], -r5, asr #32
   15288:	002c0c4b 	eoreq	r0, ip, fp, asr #24
   1528c:	83100000 	tsthi	r0, #0
   15290:	09000052 	stmdbeq	r0, {r1, r4, r6}
   15294:	000051cf 	andeq	r5, r0, pc, asr #3
   15298:	f5144c06 			; <UNDEFINED> instruction: 0xf5144c06
   1529c:	05000004 	streq	r0, [r0, #-4]
   152a0:	0004e404 	andeq	lr, r4, r4, lsl #8
   152a4:	bd091100 	stflts	f1, [r9, #-0]
   152a8:	0600004a 	streq	r0, [r0], -sl, asr #32
   152ac:	05080f4e 	streq	r0, [r8, #-3918]	; 0xfffff0b2
   152b0:	04050000 	streq	r0, [r5], #-0
   152b4:	000004fb 	strdeq	r0, [r0], -fp
   152b8:	0050b812 	subseq	fp, r0, r2, lsl r8
   152bc:	4e190900 	vnmlsmi.f16	s0, s18, s0	; <UNPREDICTABLE>
   152c0:	52060000 	andpl	r0, r6, #0
   152c4:	00051f0d 	andeq	r1, r5, sp, lsl #30
   152c8:	0e040500 	cfsh32eq	mvfx0, mvfx4, #0
   152cc:	13000005 	movwne	r0, #5
   152d0:	00004807 	andeq	r4, r0, r7, lsl #16
   152d4:	01670634 	cmneq	r7, r4, lsr r6
   152d8:	00055015 	andeq	r5, r5, r5, lsl r0
   152dc:	4bfc1400 	blmi	fff1a2e4 <_estack+0xdff152e4>
   152e0:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
   152e4:	03ed0f01 	mvneq	r0, #1, 30
   152e8:	14000000 	strne	r0, [r0], #-0
   152ec:	000047eb 	andeq	r4, r0, fp, ror #15
   152f0:	14016a06 	strne	r6, [r1], #-2566	; 0xfffff5fa
   152f4:	00000555 	andeq	r0, r0, r5, asr r5
   152f8:	250e0004 	strcs	r0, [lr, #-4]
   152fc:	0c000005 	stceq	0, cr0, [r0], {5}
   15300:	000000c8 	andeq	r0, r0, r8, asr #1
   15304:	00000565 	andeq	r0, r0, r5, ror #10
   15308:	00003315 	andeq	r3, r0, r5, lsl r3
   1530c:	0c002d00 	stceq	13, cr2, [r0], {-0}
   15310:	00000550 	andeq	r0, r0, r0, asr r5
   15314:	00000570 	andeq	r0, r0, r0, ror r5
   15318:	650e000d 	strvs	r0, [lr, #-13]
   1531c:	0f000005 	svceq	0x00000005
   15320:	00004b2b 	andeq	r4, r0, fp, lsr #22
   15324:	03016b06 	movweq	r6, #6918	; 0x1b06
   15328:	00000570 	andeq	r0, r0, r0, ror r5
   1532c:	004d530f 	subeq	r5, sp, pc, lsl #6
   15330:	016e0600 	cmneq	lr, r0, lsl #12
   15334:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15338:	50f61600 	rscspl	r1, r6, r0, lsl #12
   1533c:	01070000 	mrseq	r0, (UNDEF: 7)
   15340:	000000a2 	andeq	r0, r0, r2, lsr #1
   15344:	06018106 	streq	r8, [r1], -r6, lsl #2
   15348:	00000639 	andeq	r0, r0, r9, lsr r6
   1534c:	0044b60b 	subeq	fp, r4, fp, lsl #12
   15350:	c20b0000 	andgt	r0, fp, #0
   15354:	02000044 	andeq	r0, r0, #68	; 0x44
   15358:	0044ce0b 	subeq	ip, r4, fp, lsl #28
   1535c:	ef0b0300 	svc	0x000b0300
   15360:	03000048 	movweq	r0, #72	; 0x48
   15364:	0044da0b 	subeq	sp, r4, fp, lsl #20
   15368:	560b0400 	strpl	r0, [fp], -r0, lsl #8
   1536c:	0400004a 	streq	r0, [r0], #-74	; 0xffffffb6
   15370:	004b3c0b 	subeq	r3, fp, fp, lsl #24
   15374:	920b0500 	andls	r0, fp, #0, 10
   15378:	0500004a 	streq	r0, [r0, #-74]	; 0xffffffb6
   1537c:	0045c60b 	subeq	ip, r5, fp, lsl #12
   15380:	e60b0500 	str	r0, [fp], -r0, lsl #10
   15384:	06000044 	streq	r0, [r0], -r4, asr #32
   15388:	004cba0b 	subeq	fp, ip, fp, lsl #20
   1538c:	dd0b0600 	stcle	6, cr0, [fp, #-0]
   15390:	06000047 	streq	r0, [r0], -r7, asr #32
   15394:	004cc70b 	subeq	ip, ip, fp, lsl #14
   15398:	760b0600 	strvc	r0, [fp], -r0, lsl #12
   1539c:	06000051 			; <UNDEFINED> instruction: 0x06000051
   153a0:	004cd40b 	subeq	sp, ip, fp, lsl #8
   153a4:	140b0600 	strne	r0, [fp], #-1536	; 0xfffffa00
   153a8:	0600004d 	streq	r0, [r0], -sp, asr #32
   153ac:	0044f20b 	subeq	pc, r4, fp, lsl #4
   153b0:	fc0b0700 	stc2	7, cr0, [fp], {-0}
   153b4:	0700004d 	streq	r0, [r0, -sp, asr #32]
   153b8:	004e490b 	subeq	r4, lr, fp, lsl #18
   153bc:	b10b0700 	tstlt	fp, r0, lsl #14
   153c0:	07000051 	smlsdeq	r0, r1, r0, r0
   153c4:	0046da0b 	subeq	sp, r6, fp, lsl #20
   153c8:	2c0b0700 	stccs	7, cr0, [fp], {-0}
   153cc:	0800004f 	stmdaeq	r0, {r0, r1, r2, r3, r6}
   153d0:	00446b0b 	subeq	r6, r4, fp, lsl #22
   153d4:	840b0800 	strhi	r0, [fp], #-2048	; 0xfffff800
   153d8:	08000051 	stmdaeq	r0, {r0, r4, r6}
   153dc:	004f480b 	subeq	r4, pc, fp, lsl #16
   153e0:	0f000800 	svceq	0x00000800
   153e4:	000053dc 	ldrdeq	r5, [r0], -ip
   153e8:	1f019f06 	svcne	0x00019f06
   153ec:	0000058f 	andeq	r0, r0, pc, lsl #11
   153f0:	004f7a0f 	subeq	r7, pc, pc, lsl #20
   153f4:	01a20600 			; <UNDEFINED> instruction: 0x01a20600
   153f8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   153fc:	4b490f00 	blmi	1259004 <__ccfg+0x123905c>
   15400:	a5060000 	strge	r0, [r6, #-0]
   15404:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15408:	c10f0000 	mrsgt	r0, CPSR
   1540c:	06000054 			; <UNDEFINED> instruction: 0x06000054
   15410:	2c0c01a8 	stfcss	f0, [ip], {168}	; 0xa8
   15414:	0f000000 	svceq	0x00000000
   15418:	000045e5 	andeq	r4, r0, r5, ror #11
   1541c:	0c01ab06 			; <UNDEFINED> instruction: 0x0c01ab06
   15420:	0000002c 	andeq	r0, r0, ip, lsr #32
   15424:	004f840f 	subeq	r8, pc, pc, lsl #8
   15428:	01ae0600 			; <UNDEFINED> instruction: 0x01ae0600
   1542c:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15430:	4e330f00 	cdpmi	15, 3, cr0, cr3, cr0, {0}
   15434:	b1060000 	mrslt	r0, (UNDEF: 6)
   15438:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1543c:	3e0f0000 	cdpcc	0, 0, cr0, cr15, cr0, {0}
   15440:	0600004e 	streq	r0, [r0], -lr, asr #32
   15444:	2c0c01b4 	stfcss	f0, [ip], {180}	; 0xb4
   15448:	0f000000 	svceq	0x00000000
   1544c:	00004f8e 	andeq	r4, r0, lr, lsl #31
   15450:	0c01b706 	stceq	7, cr11, [r1], {6}
   15454:	0000002c 	andeq	r0, r0, ip, lsr #32
   15458:	004c960f 	subeq	r9, ip, pc, lsl #12
   1545c:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
   15460:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15464:	54200f00 	strtpl	r0, [r0], #-3840	; 0xfffff100
   15468:	bd060000 	stclt	0, cr0, [r6, #-0]
   1546c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15470:	980f0000 	stmdals	pc, {}	; <UNPREDICTABLE>
   15474:	0600004f 	streq	r0, [r0], -pc, asr #32
   15478:	2c0c01c0 	stfcss	f0, [ip], {192}	; 0xc0
   1547c:	0f000000 	svceq	0x00000000
   15480:	000054f8 	strdeq	r5, [r0], -r8
   15484:	0c01c306 	stceq	3, cr12, [r1], {6}
   15488:	0000002c 	andeq	r0, r0, ip, lsr #32
   1548c:	00538c0f 	subseq	r8, r3, pc, lsl #24
   15490:	01c60600 	biceq	r0, r6, r0, lsl #12
   15494:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15498:	53980f00 	orrspl	r0, r8, #0, 30
   1549c:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
   154a0:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   154a4:	a40f0000 	strge	r0, [pc], #-0	; 154ac <__exidx_end+0x1057c>
   154a8:	06000053 			; <UNDEFINED> instruction: 0x06000053
   154ac:	2c0c01cc 	stfcss	f0, [ip], {204}	; 0xcc
   154b0:	0f000000 	svceq	0x00000000
   154b4:	000053c9 	andeq	r5, r0, r9, asr #7
   154b8:	0c01d006 	stceq	0, cr13, [r1], {6}
   154bc:	0000002c 	andeq	r0, r0, ip, lsr #32
   154c0:	0054eb0f 	subseq	lr, r4, pc, lsl #22
   154c4:	01d30600 	bicseq	r0, r3, r0, lsl #12
   154c8:	00002c0c 	andeq	r2, r0, ip, lsl #24
   154cc:	464a0f00 	strbmi	r0, [sl], -r0, lsl #30
   154d0:	d6060000 	strle	r0, [r6], -r0
   154d4:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   154d8:	f30f0000 	vhadd.u8	d0, d15, d0
   154dc:	06000043 	streq	r0, [r0], -r3, asr #32
   154e0:	2c0c01d9 	stfcss	f0, [ip], {217}	; 0xd9
   154e4:	0f000000 	svceq	0x00000000
   154e8:	0000490f 	andeq	r4, r0, pc, lsl #18
   154ec:	0c01dc06 	stceq	12, cr13, [r1], {6}
   154f0:	0000002c 	andeq	r0, r0, ip, lsr #32
   154f4:	00461d0f 	subeq	r1, r6, pc, lsl #26
   154f8:	01df0600 	bicseq	r0, pc, r0, lsl #12
   154fc:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15500:	4fa90f00 	svcmi	0x00a90f00
   15504:	e2060000 	and	r0, r6, #0
   15508:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   1550c:	720f0000 	andvc	r0, pc, #0
   15510:	0600004b 	streq	r0, [r0], -fp, asr #32
   15514:	2c0c01e5 	stfcss	f0, [ip], {229}	; 0xe5
   15518:	0f000000 	svceq	0x00000000
   1551c:	00004dac 	andeq	r4, r0, ip, lsr #27
   15520:	0c01e806 	stceq	8, cr14, [r1], {6}
   15524:	0000002c 	andeq	r0, r0, ip, lsr #32
   15528:	0052b80f 	subseq	fp, r2, pc, lsl #16
   1552c:	01ef0600 	mvneq	r0, r0, lsl #12
   15530:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15534:	548f0f00 	strpl	r0, [pc], #3840	; 1553c <__exidx_end+0x1060c>
   15538:	f2060000 	vhadd.s8	d0, d6, d0
   1553c:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15540:	9f0f0000 	svcls	0x000f0000
   15544:	06000054 			; <UNDEFINED> instruction: 0x06000054
   15548:	2c0c01f5 	stfcss	f0, [ip], {245}	; 0xf5
   1554c:	0f000000 	svceq	0x00000000
   15550:	000047f4 	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   15554:	0c01f806 	stceq	8, cr15, [r1], {6}
   15558:	0000002c 	andeq	r0, r0, ip, lsr #32
   1555c:	0053000f 	subseq	r0, r3, pc
   15560:	01fb0600 	mvnseq	r0, r0, lsl #12
   15564:	00002c0c 	andeq	r2, r0, ip, lsl #24
   15568:	4f140f00 	svcmi	0x00140f00
   1556c:	fe060000 	cdp2	0, 0, cr0, cr6, cr0, {0}
   15570:	002c0c01 	eoreq	r0, ip, r1, lsl #24
   15574:	880f0000 	stmdahi	pc, {}	; <UNPREDICTABLE>
   15578:	06000049 	streq	r0, [r0], -r9, asr #32
   1557c:	2c0c0202 	sfmcs	f0, 4, [ip], {2}
   15580:	0f000000 	svceq	0x00000000
   15584:	00005108 	andeq	r5, r0, r8, lsl #2
   15588:	0c020a06 			; <UNDEFINED> instruction: 0x0c020a06
   1558c:	0000002c 	andeq	r0, r0, ip, lsr #32
   15590:	00487b0f 	subeq	r7, r8, pc, lsl #22
   15594:	020d0600 	andeq	r0, sp, #0, 12
   15598:	00002c0c 	andeq	r2, r0, ip, lsl #24
   1559c:	002c0c00 	eoreq	r0, ip, r0, lsl #24
   155a0:	07fe0000 	ldrbeq	r0, [lr, r0]!
   155a4:	000d0000 	andeq	r0, sp, r0
   155a8:	004a720f 	subeq	r7, sl, pc, lsl #4
   155ac:	03fb0600 	mvnseq	r0, #0, 12
   155b0:	0007f30c 	andeq	pc, r7, ip, lsl #6
   155b4:	04f50c00 	ldrbteq	r0, [r5], #3072	; 0xc00
   155b8:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
   155bc:	33150000 	tstcc	r5, #0
   155c0:	0d000000 	stceq	0, cr0, [r0, #-0]
   155c4:	4fd50f00 	svcmi	0x00d50f00
   155c8:	84060000 	strhi	r0, [r6], #-0
   155cc:	080b1405 	stmdaeq	fp, {r0, r2, sl, ip}
   155d0:	34160000 	ldrcc	r0, [r6], #-0
   155d4:	0700004b 	streq	r0, [r0, -fp, asr #32]
   155d8:	0000a201 	andeq	sl, r0, r1, lsl #4
   155dc:	058b0600 	streq	r0, [fp, #1536]	; 0x600
   155e0:	00086606 	andeq	r6, r8, r6, lsl #12
   155e4:	48d10b00 	ldmmi	r1, {r8, r9, fp}^
   155e8:	0b000000 	bleq	155f0 <__exidx_end+0x106c0>
   155ec:	00004d21 	andeq	r4, r0, r1, lsr #26
   155f0:	44a10b01 	strtmi	r0, [r1], #2817	; 0xb01
   155f4:	0b020000 	bleq	955fc <__ccfg+0x75654>
   155f8:	00005451 	andeq	r5, r0, r1, asr r4
   155fc:	504f0b03 	subpl	r0, pc, r3, lsl #22
   15600:	0b040000 	bleq	115608 <__ccfg+0xf5660>
   15604:	00005042 	andeq	r5, r0, r2, asr #32
   15608:	45a50b05 	strmi	r0, [r5, #2821]!	; 0xb05
   1560c:	00060000 	andeq	r0, r6, r0
   15610:	0054410f 	subseq	r4, r4, pc, lsl #2
   15614:	05980600 	ldreq	r0, [r8, #1536]	; 0x600
   15618:	00082815 	andeq	r2, r8, r5, lsl r8
   1561c:	53250f00 			; <UNDEFINED> instruction: 0x53250f00
   15620:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
   15624:	00331107 	eorseq	r1, r3, r7, lsl #2
   15628:	c20f0000 	andgt	r0, pc, #0
   1562c:	0600004f 	streq	r0, [r0], -pc, asr #32
   15630:	2c0c07ae 	stccs	7, cr0, [ip], {174}	; 0xae
   15634:	04000000 	streq	r0, [r0], #-0
   15638:	00005297 	muleq	r0, r7, r2
   1563c:	a2167b07 	andsge	r7, r6, #7168	; 0x1c00
   15640:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   15644:	0000088d 	andeq	r0, r0, sp, lsl #17
   15648:	a3050202 	movwge	r0, #20994	; 0x5202
   1564c:	04000007 	streq	r0, [r0], #-7
   15650:	0000453b 	andeq	r4, r0, fp, lsr r5
   15654:	2c0f8007 	stccs	0, cr8, [pc], {7}
   15658:	04000000 	streq	r0, [r0], #-0
   1565c:	0000453a 	andeq	r4, r0, sl, lsr r5
   15660:	33168107 	tstcc	r6, #-1073741823	; 0xc0000001
   15664:	04000000 	streq	r0, [r0], #-0
   15668:	00004fa2 	andeq	r4, r0, r2, lsr #31
   1566c:	3a0f8407 	bcc	3f6690 <__ccfg+0x3d66e8>
   15670:	02000000 	andeq	r0, r0, #0
   15674:	46650404 	strbtmi	r0, [r5], -r4, lsl #8
   15678:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   1567c:	00465d03 	subeq	r5, r6, r3, lsl #26
   15680:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
   15684:	00003eea 	andeq	r3, r0, sl, ror #29
   15688:	5d031002 	stcpl	0, cr1, [r3, #-8]
   1568c:	13000050 	movwne	r0, #80	; 0x50
   15690:	00004fb9 			; <UNDEFINED> instruction: 0x00004fb9
   15694:	01ed0708 	mvneq	r0, r8, lsl #14
   15698:	0009100a 	andeq	r1, r9, sl
   1569c:	6f6c1700 	svcvs	0x006c1700
   156a0:	ed070077 	stc	0, cr0, [r7, #-476]	; 0xfffffe24
   156a4:	08a51a01 	stmiaeq	r5!, {r0, r9, fp, ip}
   156a8:	14000000 	strne	r0, [r0], #-0
   156ac:	00004510 	andeq	r4, r0, r0, lsl r5
   156b0:	1f01ed07 	svcne	0x0001ed07
   156b4:	000008a5 	andeq	r0, r0, r5, lsr #17
   156b8:	08180004 	ldmdaeq	r8, {r2}
   156bc:	0901f407 	stmdbeq	r1, {r0, r1, r2, sl, ip, sp, lr, pc}
   156c0:	00000932 	andeq	r0, r0, r2, lsr r9
   156c4:	07007319 	smladeq	r0, r9, r3, r7
   156c8:	e51301f6 	ldr	r0, [r3, #-502]	; 0xfffffe0a
   156cc:	19000008 	stmdbne	r0, {r3}
   156d0:	07006c6c 	streq	r6, [r0, -ip, ror #24]
   156d4:	bd0a01f7 	stflts	f0, [sl, #-988]	; 0xfffffc24
   156d8:	00000008 	andeq	r0, r0, r8
   156dc:	0046341a 	subeq	r3, r6, sl, lsl r4
   156e0:	01f80700 	mvnseq	r0, r0, lsl #14
   156e4:	00091003 	andeq	r1, r9, r3
   156e8:	09320e00 	ldmdbeq	r2!, {r9, sl, fp}
   156ec:	990c0000 	stmdbls	ip, {}	; <UNPREDICTABLE>
   156f0:	54000008 	strpl	r0, [r0], #-8
   156f4:	15000009 	strne	r0, [r0, #-9]
   156f8:	00000033 	andeq	r0, r0, r3, lsr r0
   156fc:	440e00ff 	strmi	r0, [lr], #-255	; 0xffffff01
   15700:	0f000009 	svceq	0x00000009
   15704:	00004e56 	andeq	r4, r0, r6, asr lr
   15708:	1601fc07 	strne	pc, [r1], -r7, lsl #24
   1570c:	00000954 	andeq	r0, r0, r4, asr r9
   15710:	00460c0f 	subeq	r0, r6, pc, lsl #24
   15714:	02020700 	andeq	r0, r2, #0, 14
   15718:	00095416 	andeq	r5, r9, r6, lsl r4
   1571c:	44621b00 	strbtmi	r1, [r2], #-2816	; 0xfffff500
   15720:	24010000 	strcs	r0, [r1], #-0
   15724:	08bd0102 	popeq	{r1, r8}
   15728:	414c0000 	mrsmi	r0, (UNDEF: 76)
   1572c:	00540000 	subseq	r0, r4, r0
   15730:	9c010000 	stcls	0, cr0, [r1], {-0}
   15734:	0100751c 	tsteq	r0, ip, lsl r5
   15738:	bd120224 	lfmlt	f0, 4, [r2, #-144]	; 0xffffff70
   1573c:	26000008 	strcs	r0, [r0], -r8
   15740:	22000059 	andcs	r0, r0, #89	; 0x59
   15744:	1c000059 	stcne	0, cr0, [r0], {89}	; 0x59
   15748:	24010076 	strcs	r0, [r1], #-118	; 0xffffff8a
   1574c:	08bd1c02 	popeq	{r1, sl, fp, ip}
   15750:	59520000 	ldmdbpl	r2, {}^	; <UNPREDICTABLE>
   15754:	594e0000 	stmdbpl	lr, {}^	; <UNPREDICTABLE>
   15758:	751d0000 	ldrvc	r0, [sp, #-0]
   1575c:	26010075 			; <UNDEFINED> instruction: 0x26010075
   15760:	093f1102 	ldmdbeq	pc!, {r1, r8, ip}	; <UNPREDICTABLE>
   15764:	761d0000 	ldrvc	r0, [sp], -r0
   15768:	27010076 	smlsdxcs	r1, r6, r0, r0
   1576c:	093f1102 	ldmdbeq	pc!, {r1, r8, ip}	; <UNPREDICTABLE>
   15770:	771d0000 	ldrvc	r0, [sp, -r0]
   15774:	02280100 	eoreq	r0, r8, #0, 2
   15778:	0009320b 	andeq	r3, r9, fp, lsl #4
   1577c:	12981e00 	addsne	r1, r8, #0, 28
   15780:	5f1d0000 	svcpl	0x001d0000
   15784:	0100775f 	tsteq	r0, pc, asr r7
   15788:	32160228 	andscc	r0, r6, #40, 4	; 0x80000002
   1578c:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
   15790:	00001298 	muleq	r0, r8, r2
   15794:	0054cc1f 	subseq	ip, r4, pc, lsl ip
   15798:	02280100 	eoreq	r0, r8, #0, 2
   1579c:	0008b116 	andeq	fp, r8, r6, lsl r1
   157a0:	00597c00 	subseq	r7, r9, r0, lsl #24
   157a4:	00597a00 	subseq	r7, r9, r0, lsl #20
   157a8:	54d11f00 	ldrbpl	r1, [r1], #3840	; 0xf00
   157ac:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   157b0:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   157b4:	59950000 	ldmibpl	r5, {}	; <UNPREDICTABLE>
   157b8:	598f0000 	stmibpl	pc, {}	; <UNPREDICTABLE>
   157bc:	d61f0000 	ldrle	r0, [pc], -r0
   157c0:	01000054 	qaddeq	r0, r4, r0
   157c4:	b1160228 	tstlt	r6, r8, lsr #4
   157c8:	c7000008 	strgt	r0, [r0, -r8]
   157cc:	c3000059 	movwgt	r0, #89	; 0x59
   157d0:	1f000059 	svcne	0x00000059
   157d4:	000054db 	ldrdeq	r5, [r0], -fp
   157d8:	16022801 	strne	r2, [r2], -r1, lsl #16
   157dc:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   157e0:	000059f2 	strdeq	r5, [r0], -r2
   157e4:	000059f0 	strdeq	r5, [r0], -r0
   157e8:	0052fb1f 	subseq	pc, r2, pc, lsl fp	; <UNPREDICTABLE>
   157ec:	02280100 	eoreq	r0, r8, #0, 2
   157f0:	0008b116 	andeq	fp, r8, r6, lsl r1
   157f4:	005a0900 	subseq	r0, sl, r0, lsl #18
   157f8:	005a0500 	subseq	r0, sl, r0, lsl #10
   157fc:	53ea1f00 	mvnpl	r1, #0, 30
   15800:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
   15804:	08b11602 	ldmeq	r1!, {r1, r9, sl, ip}
   15808:	5a310000 	bpl	c55810 <__ccfg+0xc35868>
   1580c:	5a2d0000 	bpl	b55814 <__ccfg+0xb3586c>
   15810:	dd1f0000 	ldcle	0, cr0, [pc, #-0]	; 15818 <__exidx_end+0x108e8>
   15814:	01000052 	qaddeq	r0, r2, r0
   15818:	b1160228 	tstlt	r6, r8, lsr #4
   1581c:	59000008 	stmdbpl	r0, {r3}
   15820:	5500005a 	strpl	r0, [r0, #-90]	; 0xffffffa6
   15824:	1f00005a 	svcne	0x0000005a
   15828:	000053d7 	ldrdeq	r5, [r0], -r7
   1582c:	16022801 	strne	r2, [r2], -r1, lsl #16
   15830:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
   15834:	00005a7f 	andeq	r5, r0, pc, ror sl
   15838:	00005a7b 	andeq	r5, r0, fp, ror sl
   1583c:	00000000 	andeq	r0, r0, r0
   15840:	00000a0e 	andeq	r0, r0, lr, lsl #20
   15844:	4e130004 	cdpmi	0, 1, cr0, cr3, cr4, {0}
   15848:	01040000 	mrseq	r0, (UNDEF: 4)
   1584c:	00005564 	andeq	r5, r0, r4, ror #10
   15850:	0055f60c 	subseq	pc, r5, ip, lsl #12
   15854:	00550400 	subseq	r0, r5, r0, lsl #8
   15858:	0041a000 	subeq	sl, r1, r0
   1585c:	00001000 	andeq	r1, r0, r0
   15860:	00904200 	addseq	r4, r0, r0, lsl #4
   15864:	06010200 	streq	r0, [r1], -r0, lsl #4
   15868:	000008de 	ldrdeq	r0, [r0], -lr
   1586c:	dc080102 	stfles	f0, [r8], {2}
   15870:	02000008 	andeq	r0, r0, #8
   15874:	07a30502 	streq	r0, [r3, r2, lsl #10]!
   15878:	02020000 	andeq	r0, r2, #0
   1587c:	0009aa07 	andeq	sl, r9, r7, lsl #20
   15880:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
   15884:	000005ed 	andeq	r0, r0, sp, ror #11
   15888:	97070402 	strls	r0, [r7, -r2, lsl #8]
   1588c:	02000003 	andeq	r0, r0, #3
   15890:	05e80508 	strbeq	r0, [r8, #1288]!	; 0x508
   15894:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
   15898:	00039207 	andeq	r9, r3, r7, lsl #4
   1589c:	077a0300 	ldrbeq	r0, [sl, -r0, lsl #6]!
   158a0:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
   158a4:	00004f1e 	andeq	r4, r0, lr, lsl pc
   158a8:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
   158ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
   158b0:	9c070402 	cfstrsls	mvf0, [r7], {2}
   158b4:	02000003 	andeq	r0, r0, #3
   158b8:	3ee50408 	cdpcc	4, 14, cr0, cr5, cr8, {0}
   158bc:	96050000 	strls	r0, [r5], -r0
   158c0:	03000008 	movweq	r0, #8
   158c4:	70170165 	andsvc	r0, r7, r5, ror #2
   158c8:	03000000 	movweq	r0, #0
   158cc:	000009e6 	andeq	r0, r0, r6, ror #19
   158d0:	410e2e04 	tstmi	lr, r4, lsl #28
   158d4:	03000000 	movweq	r0, #0
   158d8:	0000026b 	andeq	r0, r0, fp, ror #4
   158dc:	410e7404 	tstmi	lr, r4, lsl #8
   158e0:	06000000 	streq	r0, [r0], -r0
   158e4:	03a50404 			; <UNDEFINED> instruction: 0x03a50404
   158e8:	000000c5 	andeq	r0, r0, r5, asr #1
   158ec:	00058b07 	andeq	r8, r5, r7, lsl #22
   158f0:	0ca70400 	cfstrseq	mvf0, [r7]
   158f4:	0000007e 	andeq	r0, r0, lr, ror r0
   158f8:	0007ea07 	andeq	lr, r7, r7, lsl #20
   158fc:	13a80400 			; <UNDEFINED> instruction: 0x13a80400
   15900:	000000c5 	andeq	r0, r0, r5, asr #1
   15904:	002c0800 	eoreq	r0, ip, r0, lsl #16
   15908:	00d50000 	sbcseq	r0, r5, r0
   1590c:	70090000 	andvc	r0, r9, r0
   15910:	03000000 	movweq	r0, #0
   15914:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
   15918:	00f909a2 	rscseq	r0, r9, r2, lsr #19
   1591c:	260b0000 	strcs	r0, [fp], -r0
   15920:	04000003 	streq	r0, [r0], #-3
   15924:	006907a4 	rsbeq	r0, r9, r4, lsr #15
   15928:	0b000000 	bleq	15930 <__exidx_end+0x10a00>
   1592c:	000004ae 	andeq	r0, r0, lr, lsr #9
   15930:	a305a904 	movwge	sl, #22788	; 0x5904
   15934:	04000000 	streq	r0, [r0], #-0
   15938:	06a90300 	strteq	r0, [r9], r0, lsl #6
   1593c:	aa040000 	bge	115944 <__ccfg+0xf599c>
   15940:	0000d503 	andeq	sp, r0, r3, lsl #10
   15944:	03040c00 	movweq	r0, #19456	; 0x4c00
   15948:	000041d7 	ldrdeq	r4, [r0], -r7
   1594c:	410fd204 	tstmi	pc, r4, lsl #4
   15950:	03000000 	movweq	r0, #0
   15954:	000041d9 	ldrdeq	r4, [r0], -r9
   15958:	07172505 	ldreq	r2, [r7, -r5, lsl #10]
   1595c:	03000001 	movweq	r0, #1
   15960:	0000059e 	muleq	r0, lr, r5
   15964:	5d122a05 	vldrpl	s4, [r2, #-20]	; 0xffffffec
   15968:	0d000000 	stceq	0, cr0, [r0, #-0]
   1596c:	00004312 	andeq	r4, r0, r2, lsl r3
   15970:	08360510 	ldmdaeq	r6!, {r4, r8, sl}
   15974:	00000153 	andeq	r0, r0, r3, asr r1
   15978:	0042120b 	subeq	r1, r2, fp, lsl #4
   1597c:	0a370500 	beq	dd6d84 <__ccfg+0xdb6ddc>
   15980:	0000011f 	andeq	r0, r0, pc, lsl r1
   15984:	42750b00 	rsbsmi	r0, r5, #0, 22
   15988:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
   1598c:	0001130e 	andeq	r1, r1, lr, lsl #6
   15990:	0e000800 	cdpeq	8, 0, cr0, cr0, cr0, {0}
   15994:	00015904 	andeq	r5, r1, r4, lsl #18
   15998:	08010200 	stmdaeq	r1, {r9}
   1599c:	000008e5 	andeq	r0, r0, r5, ror #17
   159a0:	0001590f 	andeq	r5, r1, pc, lsl #18
   159a4:	062d0300 	strteq	r0, [sp], -r0, lsl #6
   159a8:	16060000 	strne	r0, [r6], -r0
   159ac:	00004819 	andeq	r4, r0, r9, lsl r8
   159b0:	01fe0300 	mvnseq	r0, r0, lsl #6
   159b4:	0c070000 	stceq	0, cr0, [r7], {-0}
   159b8:	0000690d 	andeq	r6, r0, sp, lsl #18
   159bc:	05590300 	ldrbeq	r0, [r9, #-768]	; 0xfffffd00
   159c0:	23060000 	movwcs	r0, #24576	; 0x6000
   159c4:	0001711b 	andeq	r7, r1, fp, lsl r1
   159c8:	02ab0d00 	adceq	r0, fp, #0, 26
   159cc:	06180000 	ldreq	r0, [r8], -r0
   159d0:	01e30834 	mvneq	r0, r4, lsr r8
   159d4:	400b0000 	andmi	r0, fp, r0
   159d8:	0600000a 	streq	r0, [r0], -sl
   159dc:	01e31336 	mvneq	r1, r6, lsr r3
   159e0:	10000000 	andne	r0, r0, r0
   159e4:	06006b5f 			; <UNDEFINED> instruction: 0x06006b5f
   159e8:	00690737 	rsbeq	r0, r9, r7, lsr r7
   159ec:	0b040000 	bleq	1159f4 <__ccfg+0xf5a4c>
   159f0:	00000845 	andeq	r0, r0, r5, asr #16
   159f4:	690b3706 	stmdbvs	fp, {r1, r2, r8, r9, sl, ip, sp}
   159f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   159fc:	003eb00b 	eorseq	fp, lr, fp
   15a00:	14370600 	ldrtne	r0, [r7], #-1536	; 0xfffffa00
   15a04:	00000069 	andeq	r0, r0, r9, rrx
   15a08:	03be0b0c 			; <UNDEFINED> instruction: 0x03be0b0c
   15a0c:	37060000 	strcc	r0, [r6, -r0]
   15a10:	0000691b 	andeq	r6, r0, fp, lsl r9
   15a14:	5f101000 	svcpl	0x00101000
   15a18:	38060078 	stmdacc	r6, {r3, r4, r5, r6}
   15a1c:	0001e90b 	andeq	lr, r1, fp, lsl #18
   15a20:	0e001400 	cfcpyseq	mvf1, mvf0
   15a24:	00018904 	andeq	r8, r1, r4, lsl #18
   15a28:	01650800 	cmneq	r5, r0, lsl #16
   15a2c:	01f90000 	mvnseq	r0, r0
   15a30:	70090000 	andvc	r0, r9, r0
   15a34:	00000000 	andeq	r0, r0, r0
   15a38:	08600d00 	stmdaeq	r0!, {r8, sl, fp}^
   15a3c:	06240000 	strteq	r0, [r4], -r0
   15a40:	027c083c 	rsbseq	r0, ip, #60, 16	; 0x3c0000
   15a44:	4e0b0000 	cdpmi	0, 0, cr0, cr11, cr0, {0}
   15a48:	06000004 	streq	r0, [r0], -r4
   15a4c:	0069093e 	rsbeq	r0, r9, lr, lsr r9
   15a50:	0b000000 	bleq	15a58 <__exidx_end+0x10b28>
   15a54:	00000358 	andeq	r0, r0, r8, asr r3
   15a58:	69093f06 	stmdbvs	r9, {r1, r2, r8, r9, sl, fp, ip, sp}
   15a5c:	04000000 	streq	r0, [r0], #-0
   15a60:	0003010b 	andeq	r0, r3, fp, lsl #2
   15a64:	09400600 	stmdbeq	r0, {r9, sl}^
   15a68:	00000069 	andeq	r0, r0, r9, rrx
   15a6c:	050f0b08 	streq	r0, [pc, #-2824]	; 14f6c <__exidx_end+0x1003c>
   15a70:	41060000 	mrsmi	r0, (UNDEF: 6)
   15a74:	00006909 	andeq	r6, r0, r9, lsl #18
   15a78:	1d0b0c00 	stcne	12, cr0, [fp, #-0]
   15a7c:	06000007 	streq	r0, [r0], -r7
   15a80:	00690942 	rsbeq	r0, r9, r2, asr #18
   15a84:	0b100000 	bleq	415a8c <__ccfg+0x3f5ae4>
   15a88:	00000804 	andeq	r0, r0, r4, lsl #16
   15a8c:	69094306 	stmdbvs	r9, {r1, r2, r8, r9, lr}
   15a90:	14000000 	strne	r0, [r0], #-0
   15a94:	0002c60b 	andeq	ip, r2, fp, lsl #12
   15a98:	09440600 	stmdbeq	r4, {r9, sl}^
   15a9c:	00000069 	andeq	r0, r0, r9, rrx
   15aa0:	04570b18 	ldrbeq	r0, [r7], #-2840	; 0xfffff4e8
   15aa4:	45060000 	strmi	r0, [r6, #-0]
   15aa8:	00006909 	andeq	r6, r0, r9, lsl #18
   15aac:	c70b1c00 	strgt	r1, [fp, -r0, lsl #24]
   15ab0:	06000006 	streq	r0, [r0], -r6
   15ab4:	00690946 	rsbeq	r0, r9, r6, asr #18
   15ab8:	00200000 	eoreq	r0, r0, r0
   15abc:	00006111 	andeq	r6, r0, r1, lsl r1
   15ac0:	06010800 	streq	r0, [r1], -r0, lsl #16
   15ac4:	02c1084f 	sbceq	r0, r1, #5177344	; 0x4f0000
   15ac8:	740b0000 	strvc	r0, [fp], #-0
   15acc:	06000009 	streq	r0, [r0], -r9
   15ad0:	02c10a50 	sbceq	r0, r1, #80, 20	; 0x50000
   15ad4:	0b000000 	bleq	15adc <__exidx_end+0x10bac>
   15ad8:	000008c0 	andeq	r0, r0, r0, asr #17
   15adc:	c1095106 	tstgt	r9, r6, lsl #2
   15ae0:	80000002 	andhi	r0, r0, r2
   15ae4:	0009dd12 	andeq	sp, r9, r2, lsl sp
   15ae8:	0a530600 	beq	14d72f0 <__ccfg+0x14b7348>
   15aec:	00000165 	andeq	r0, r0, r5, ror #2
   15af0:	2b120100 	blcs	495ef8 <__ccfg+0x475f50>
   15af4:	0600000a 	streq	r0, [r0], -sl
   15af8:	01650a56 	cmneq	r5, r6, asr sl
   15afc:	01040000 	mrseq	r0, (UNDEF: 4)
   15b00:	01050800 	tsteq	r5, r0, lsl #16
   15b04:	02d10000 	sbcseq	r0, r1, #0
   15b08:	70090000 	andvc	r0, r9, r0
   15b0c:	1f000000 	svcne	0x00000000
   15b10:	078a1100 	streq	r1, [sl, r0, lsl #2]
   15b14:	01900000 	orrseq	r0, r0, r0
   15b18:	14086206 	strne	r6, [r8], #-518	; 0xfffffdfa
   15b1c:	0b000003 	bleq	15b30 <__exidx_end+0x10c00>
   15b20:	00000a40 	andeq	r0, r0, r0, asr #20
   15b24:	14126306 	ldrne	r6, [r2], #-774	; 0xfffffcfa
   15b28:	00000003 	andeq	r0, r0, r3
   15b2c:	0004660b 	andeq	r6, r4, fp, lsl #12
   15b30:	06640600 	strbteq	r0, [r4], -r0, lsl #12
   15b34:	00000069 	andeq	r0, r0, r9, rrx
   15b38:	02730b04 	rsbseq	r0, r3, #4, 22	; 0x1000
   15b3c:	66060000 	strvs	r0, [r6], -r0
   15b40:	00031a09 	andeq	r1, r3, r9, lsl #20
   15b44:	610b0800 	tstvs	fp, r0, lsl #16
   15b48:	06000000 	streq	r0, [r0], -r0
   15b4c:	027c1e67 	rsbseq	r1, ip, #1648	; 0x670
   15b50:	00880000 	addeq	r0, r8, r0
   15b54:	02d1040e 	sbcseq	r0, r1, #234881024	; 0xe000000
   15b58:	2a080000 	bcs	215b60 <__ccfg+0x1f5bb8>
   15b5c:	2a000003 	bcs	15b70 <__exidx_end+0x10c40>
   15b60:	09000003 	stmdbeq	r0, {r0, r1}
   15b64:	00000070 	andeq	r0, r0, r0, ror r0
   15b68:	040e001f 	streq	r0, [lr], #-31	; 0xffffffe1
   15b6c:	00000330 	andeq	r0, r0, r0, lsr r3
   15b70:	093e0d13 	ldmdbeq	lr!, {r0, r1, r4, r8, sl, fp}
   15b74:	06080000 	streq	r0, [r8], -r0
   15b78:	0359087a 	cmpeq	r9, #7995392	; 0x7a0000
   15b7c:	040b0000 	streq	r0, [fp], #-0
   15b80:	06000006 	streq	r0, [r0], -r6
   15b84:	0359117b 	cmpeq	r9, #-1073741794	; 0xc000001e
   15b88:	0b000000 	bleq	15b90 <__exidx_end+0x10c60>
   15b8c:	000018cf 	andeq	r1, r0, pc, asr #17
   15b90:	69067c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp, lr}
   15b94:	04000000 	streq	r0, [r0], #-0
   15b98:	2c040e00 	stccs	14, cr0, [r4], {-0}
   15b9c:	0d000000 	stceq	0, cr0, [r0, #-0]
   15ba0:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
   15ba4:	08ba0668 	ldmeq	sl!, {r3, r5, r6, r9, sl}
   15ba8:	000004a2 	andeq	r0, r0, r2, lsr #9
   15bac:	00705f10 	rsbseq	r5, r0, r0, lsl pc
   15bb0:	5912bb06 	ldmdbpl	r2, {r1, r2, r8, r9, fp, ip, sp, pc}
   15bb4:	00000003 	andeq	r0, r0, r3
   15bb8:	00725f10 	rsbseq	r5, r2, r0, lsl pc
   15bbc:	6907bc06 	stmdbvs	r7, {r1, r2, sl, fp, ip, sp, pc}
   15bc0:	04000000 	streq	r0, [r0], #-0
   15bc4:	00775f10 	rsbseq	r5, r7, r0, lsl pc
   15bc8:	6907bd06 	stmdbvs	r7, {r1, r2, r8, sl, fp, ip, sp, pc}
   15bcc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   15bd0:	0001e90b 	andeq	lr, r1, fp, lsl #18
   15bd4:	09be0600 	ldmibeq	lr!, {r9, sl}
   15bd8:	00000033 	andeq	r0, r0, r3, lsr r0
   15bdc:	06620b0c 	strbteq	r0, [r2], -ip, lsl #22
   15be0:	bf060000 	svclt	0x00060000
   15be4:	00003309 	andeq	r3, r0, r9, lsl #6
   15be8:	5f100e00 	svcpl	0x00100e00
   15bec:	06006662 	streq	r6, [r0], -r2, ror #12
   15bf0:	033111c0 	teqeq	r1, #192, 2	; 0x30
   15bf4:	0b100000 	bleq	415bfc <__ccfg+0x3f5c54>
   15bf8:	000001e0 	andeq	r0, r0, r0, ror #3
   15bfc:	6907c106 	stmdbvs	r7, {r1, r2, r8, lr, pc}
   15c00:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
   15c04:	0002780b 	andeq	r7, r2, fp, lsl #16
   15c08:	0ac80600 	beq	ff217410 <_estack+0xdf212410>
   15c0c:	00000105 	andeq	r0, r0, r5, lsl #2
   15c10:	185f0b1c 	ldmdane	pc, {r2, r3, r4, r8, r9, fp}^	; <UNPREDICTABLE>
   15c14:	ca060000 	bgt	195c1c <__ccfg+0x175c74>
   15c18:	0006141d 	andeq	r1, r6, sp, lsl r4
   15c1c:	260b2000 	strcs	r2, [fp], -r0
   15c20:	06000018 			; <UNDEFINED> instruction: 0x06000018
   15c24:	06431dcc 	strbeq	r1, [r3], -ip, asr #27
   15c28:	0b240000 	bleq	915c30 <__ccfg+0x8f5c88>
   15c2c:	00000a51 	andeq	r0, r0, r1, asr sl
   15c30:	670dcf06 	strvs	ip, [sp, -r6, lsl #30]
   15c34:	28000006 	stmdacs	r0, {r1, r2}
   15c38:	0018140b 	andseq	r1, r8, fp, lsl #8
   15c3c:	09d00600 	ldmibeq	r0, {r9, sl}^
   15c40:	00000681 	andeq	r0, r0, r1, lsl #13
   15c44:	755f102c 	ldrbvc	r1, [pc, #-44]	; 15c20 <__exidx_end+0x10cf0>
   15c48:	d3060062 	movwle	r0, #24674	; 0x6062
   15c4c:	00033111 	andeq	r3, r3, r1, lsl r1
   15c50:	5f103000 	svcpl	0x00103000
   15c54:	06007075 			; <UNDEFINED> instruction: 0x06007075
   15c58:	035912d4 	cmpeq	r9, #212, 4	; 0x4000000d
   15c5c:	10380000 	eorsne	r0, r8, r0
   15c60:	0072755f 	rsbseq	r7, r2, pc, asr r5
   15c64:	6907d506 	stmdbvs	r7, {r1, r2, r8, sl, ip, lr, pc}
   15c68:	3c000000 	stccc	0, cr0, [r0], {-0}
   15c6c:	000a680b 	andeq	r6, sl, fp, lsl #16
   15c70:	11d80600 	bicsne	r0, r8, r0, lsl #12
   15c74:	00000687 	andeq	r0, r0, r7, lsl #13
   15c78:	09f70b40 	ldmibeq	r7!, {r6, r8, r9, fp}^
   15c7c:	d9060000 	stmdble	r6, {}	; <UNPREDICTABLE>
   15c80:	00069711 	andeq	r9, r6, r1, lsl r7
   15c84:	5f104300 	svcpl	0x00104300
   15c88:	0600626c 	streq	r6, [r0], -ip, ror #4
   15c8c:	033111dc 	teqeq	r1, #220, 2	; 0x37
   15c90:	0b440000 	bleq	1115c98 <__ccfg+0x10f5cf0>
   15c94:	00000857 	andeq	r0, r0, r7, asr r8
   15c98:	6907df06 	stmdbvs	r7, {r1, r2, r8, r9, sl, fp, ip, lr, pc}
   15c9c:	4c000000 	stcmi	0, cr0, [r0], {-0}
   15ca0:	0004030b 	andeq	r0, r4, fp, lsl #6
   15ca4:	0ae00600 	beq	ff8174ac <_estack+0xdf8124ac>
   15ca8:	0000008b 	andeq	r0, r0, fp, lsl #1
   15cac:	432e0b50 			; <UNDEFINED> instruction: 0x432e0b50
   15cb0:	e3060000 	movw	r0, #24576	; 0x6000
   15cb4:	0004c012 	andeq	ip, r4, r2, lsl r0
   15cb8:	6f0b5400 	svcvs	0x000b5400
   15cbc:	06000008 	streq	r0, [r0], -r8
   15cc0:	017d0ce7 	cmneq	sp, r7, ror #25
   15cc4:	0b580000 	bleq	1615ccc <__ccfg+0x15f5d24>
   15cc8:	00000792 	muleq	r0, r2, r7
   15ccc:	f90ee906 			; <UNDEFINED> instruction: 0xf90ee906
   15cd0:	5c000000 	stcpl	0, cr0, [r0], {-0}
   15cd4:	000a230b 	andeq	r2, sl, fp, lsl #6
   15cd8:	09ea0600 	stmibeq	sl!, {r9, sl}^
   15cdc:	00000069 	andeq	r0, r0, r9, rrx
   15ce0:	69140064 	ldmdbvs	r4, {r2, r5, r6}
   15ce4:	c0000000 	andgt	r0, r0, r0
   15ce8:	15000004 	strne	r0, [r0, #-4]
   15cec:	000004c0 	andeq	r0, r0, r0, asr #9
   15cf0:	00010515 	andeq	r0, r1, r5, lsl r5
   15cf4:	01531500 	cmpeq	r3, r0, lsl #10
   15cf8:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
   15cfc:	00000000 	andeq	r0, r0, r0
   15d00:	04cb040e 	strbeq	r0, [fp], #1038	; 0x40e
   15d04:	c00f0000 	andgt	r0, pc, r0
   15d08:	16000004 	strne	r0, [r0], -r4
   15d0c:	0000436c 	andeq	r4, r0, ip, ror #6
   15d10:	65060428 	strvs	r0, [r6, #-1064]	; 0xfffffbd8
   15d14:	06140802 	ldreq	r0, [r4], -r2, lsl #16
   15d18:	f8170000 			; <UNDEFINED> instruction: 0xf8170000
   15d1c:	06000006 	streq	r0, [r0], -r6
   15d20:	69070267 	stmdbvs	r7, {r0, r1, r2, r5, r6, r9}
   15d24:	00000000 	andeq	r0, r0, r0
   15d28:	0005d217 	andeq	sp, r5, r7, lsl r2
   15d2c:	026c0600 	rsbeq	r0, ip, #0, 12
   15d30:	0006f30b 	andeq	pc, r6, fp, lsl #6
   15d34:	55170400 	ldrpl	r0, [r7, #-1024]	; 0xfffffc00
   15d38:	06000002 	streq	r0, [r0], -r2
   15d3c:	f314026c 	vhsub.u16	q0, q2, q14
   15d40:	08000006 	stmdaeq	r0, {r1, r2}
   15d44:	000a5717 	andeq	r5, sl, r7, lsl r7
   15d48:	026c0600 	rsbeq	r0, ip, #0, 12
   15d4c:	0006f31e 	andeq	pc, r6, lr, lsl r3	; <UNPREDICTABLE>
   15d50:	61170c00 	tstvs	r7, r0, lsl #24
   15d54:	06000004 	streq	r0, [r0], -r4
   15d58:	6908026e 	stmdbvs	r8, {r1, r2, r3, r5, r6, r9}
   15d5c:	10000000 	andne	r0, r0, r0
   15d60:	00041317 	andeq	r1, r4, r7, lsl r3
   15d64:	026f0600 	rsbeq	r0, pc, #0, 12
   15d68:	0008f308 	andeq	pc, r8, r8, lsl #6
   15d6c:	0a171400 	beq	5dad74 <__ccfg+0x5badcc>
   15d70:	0600000a 	streq	r0, [r0], -sl
   15d74:	69070272 	stmdbvs	r7, {r1, r4, r5, r6, r9}
   15d78:	30000000 	andcc	r0, r0, r0
   15d7c:	003d5c17 	eorseq	r5, sp, r7, lsl ip
   15d80:	02730600 	rsbseq	r0, r3, #0, 12
   15d84:	00090816 	andeq	r0, r9, r6, lsl r8
   15d88:	a5173400 	ldrge	r3, [r7, #-1024]	; 0xfffffc00
   15d8c:	06000005 	streq	r0, [r0], -r5
   15d90:	69070275 	stmdbvs	r7, {r0, r2, r4, r5, r6, r9}
   15d94:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   15d98:	00069f17 	andeq	r9, r6, r7, lsl pc
   15d9c:	02770600 	rsbseq	r0, r7, #0, 12
   15da0:	0009190a 	andeq	r1, r9, sl, lsl #18
   15da4:	d0173c00 	andsle	r3, r7, r0, lsl #24
   15da8:	06000002 	streq	r0, [r0], -r2
   15dac:	e313027a 	tst	r3, #-1610612729	; 0xa0000007
   15db0:	40000001 	andmi	r0, r0, r1
   15db4:	00037c17 	andeq	r7, r3, r7, lsl ip
   15db8:	027b0600 	rsbseq	r0, fp, #0, 12
   15dbc:	00006907 	andeq	r6, r0, r7, lsl #18
   15dc0:	b6174400 	ldrlt	r4, [r7], -r0, lsl #8
   15dc4:	06000004 	streq	r0, [r0], -r4
   15dc8:	e313027c 	tst	r3, #124, 4	; 0xc0000007
   15dcc:	48000001 	stmdami	r0, {r0}
   15dd0:	00060a17 	andeq	r0, r6, r7, lsl sl
   15dd4:	027d0600 	rsbseq	r0, sp, #0, 12
   15dd8:	00091f14 	andeq	r1, r9, r4, lsl pc
   15ddc:	3d174c00 	ldccc	12, cr4, [r7, #-0]
   15de0:	06000008 	streq	r0, [r0], -r8
   15de4:	69070280 	stmdbvs	r7, {r7, r9}
   15de8:	50000000 	andpl	r0, r0, r0
   15dec:	0008d417 	andeq	sp, r8, r7, lsl r4
   15df0:	02810600 	addeq	r0, r1, #0, 12
   15df4:	00015309 	andeq	r5, r1, r9, lsl #6
   15df8:	ee175400 	cfmuls	mvf5, mvf7, mvf0
   15dfc:	06000008 	streq	r0, [r0], -r8
   15e00:	ce0702a4 	cdpgt	2, 0, cr0, cr7, cr4, {5}
   15e04:	58000008 	stmdapl	r0, {r3}
   15e08:	00078a18 	andeq	r8, r7, r8, lsl sl
   15e0c:	02a80600 	adceq	r0, r8, #0, 12
   15e10:	00031413 	andeq	r1, r3, r3, lsl r4
   15e14:	18014800 	stmdane	r1, {fp, lr}
   15e18:	00000532 	andeq	r0, r0, r2, lsr r5
   15e1c:	1202a906 	andne	sl, r2, #98304	; 0x18000
   15e20:	000002d1 	ldrdeq	r0, [r0], -r1
   15e24:	1918014c 	ldmdbne	r8, {r2, r3, r6, r8}
   15e28:	06000005 	streq	r0, [r0], -r5
   15e2c:	300c02ad 	andcc	r0, ip, sp, lsr #5
   15e30:	dc000009 	stcle	0, cr0, [r0], {9}
   15e34:	09511802 	ldmdbeq	r1, {r1, fp, ip}^
   15e38:	b2060000 	andlt	r0, r6, #0
   15e3c:	06b41002 	ldrteq	r1, [r4], r2
   15e40:	02e00000 	rsceq	r0, r0, #0
   15e44:	0007cb18 	andeq	ip, r7, r8, lsl fp
   15e48:	02b40600 	adcseq	r0, r4, #0, 12
   15e4c:	00093c0a 	andeq	r3, r9, sl, lsl #24
   15e50:	0002ec00 	andeq	lr, r2, r0, lsl #24
   15e54:	04a2040e 	strteq	r0, [r2], #1038	; 0x40e
   15e58:	69140000 	ldmdbvs	r4, {}	; <UNPREDICTABLE>
   15e5c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
   15e60:	15000006 	strne	r0, [r0, #-6]
   15e64:	000004c0 	andeq	r0, r0, r0, asr #9
   15e68:	00010515 	andeq	r0, r1, r5, lsl r5
   15e6c:	06381500 	ldrteq	r1, [r8], -r0, lsl #10
   15e70:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
   15e74:	00000000 	andeq	r0, r0, r0
   15e78:	0160040e 	cmneq	r0, lr, lsl #8
   15e7c:	380f0000 	stmdacc	pc, {}	; <UNPREDICTABLE>
   15e80:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
   15e84:	00061a04 	andeq	r1, r6, r4, lsl #20
   15e88:	00971400 	addseq	r1, r7, r0, lsl #8
   15e8c:	06670000 	strbteq	r0, [r7], -r0
   15e90:	c0150000 	andsgt	r0, r5, r0
   15e94:	15000004 	strne	r0, [r0, #-4]
   15e98:	00000105 	andeq	r0, r0, r5, lsl #2
   15e9c:	00009715 	andeq	r9, r0, r5, lsl r7
   15ea0:	00691500 	rsbeq	r1, r9, r0, lsl #10
   15ea4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
   15ea8:	00064904 	andeq	r4, r6, r4, lsl #18
   15eac:	00691400 	rsbeq	r1, r9, r0, lsl #8
   15eb0:	06810000 	streq	r0, [r1], r0
   15eb4:	c0150000 	andsgt	r0, r5, r0
   15eb8:	15000004 	strne	r0, [r0, #-4]
   15ebc:	00000105 	andeq	r0, r0, r5, lsl #2
   15ec0:	6d040e00 	stcvs	14, cr0, [r4, #-0]
   15ec4:	08000006 	stmdaeq	r0, {r1, r2}
   15ec8:	0000002c 	andeq	r0, r0, ip, lsr #32
   15ecc:	00000697 	muleq	r0, r7, r6
   15ed0:	00007009 	andeq	r7, r0, r9
   15ed4:	08000200 	stmdaeq	r0, {r9}
   15ed8:	0000002c 	andeq	r0, r0, ip, lsr #32
   15edc:	000006a7 	andeq	r0, r0, r7, lsr #13
   15ee0:	00007009 	andeq	r7, r0, r9
   15ee4:	05000000 	streq	r0, [r0, #-0]
   15ee8:	000003f1 	strdeq	r0, [r0], -r1
   15eec:	1a012406 	bne	5ef0c <__ccfg+0x3ef64>
   15ef0:	0000035f 	andeq	r0, r0, pc, asr r3
   15ef4:	00438219 	subeq	r8, r3, r9, lsl r2
   15ef8:	28060c00 	stmdacs	r6, {sl, fp}
   15efc:	06ed0801 	strbteq	r0, [sp], r1, lsl #16
   15f00:	40170000 	andsmi	r0, r7, r0
   15f04:	0600000a 	streq	r0, [r0], -sl
   15f08:	ed11012a 	ldfs	f0, [r1, #-168]	; 0xffffff58
   15f0c:	00000006 	andeq	r0, r0, r6
   15f10:	00088f17 	andeq	r8, r8, r7, lsl pc
   15f14:	012b0600 			; <UNDEFINED> instruction: 0x012b0600
   15f18:	00006907 	andeq	r6, r0, r7, lsl #18
   15f1c:	91170400 	tstls	r7, r0, lsl #8
   15f20:	06000005 	streq	r0, [r0], -r5
   15f24:	f30b012c 	vrhadd.u8	d0, d11, d28
   15f28:	08000006 	stmdaeq	r0, {r1, r2}
   15f2c:	b4040e00 	strlt	r0, [r4], #-3584	; 0xfffff200
   15f30:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
   15f34:	0006a704 	andeq	sl, r6, r4, lsl #14
   15f38:	03681900 	cmneq	r8, #0, 18
   15f3c:	060e0000 	streq	r0, [lr], -r0
   15f40:	32080144 	andcc	r0, r8, #68, 2
   15f44:	17000007 	strne	r0, [r0, -r7]
   15f48:	00001188 	andeq	r1, r0, r8, lsl #3
   15f4c:	12014506 	andne	r4, r1, #25165824	; 0x1800000
   15f50:	00000732 	andeq	r0, r0, r2, lsr r7
   15f54:	061c1700 	ldreq	r1, [ip], -r0, lsl #14
   15f58:	46060000 	strmi	r0, [r6], -r0
   15f5c:	07321201 	ldreq	r1, [r2, -r1, lsl #4]!
   15f60:	17060000 	strne	r0, [r6, -r0]
   15f64:	0000102d 	andeq	r1, r0, sp, lsr #32
   15f68:	12014706 	andne	r4, r1, #1572864	; 0x180000
   15f6c:	0000003a 	andeq	r0, r0, sl, lsr r0
   15f70:	3a08000c 	bcc	215fa8 <__ccfg+0x1f6000>
   15f74:	42000000 	andmi	r0, r0, #0
   15f78:	09000007 	stmdbeq	r0, {r0, r1, r2}
   15f7c:	00000070 	andeq	r0, r0, r0, ror r0
   15f80:	d01a0002 	andsle	r0, sl, r2
   15f84:	07028506 	streq	r8, [r2, -r6, lsl #10]
   15f88:	00000857 	andeq	r0, r0, r7, asr r8
   15f8c:	0009fd17 	andeq	pc, r9, r7, lsl sp	; <UNPREDICTABLE>
   15f90:	02870600 	addeq	r0, r7, #0, 12
   15f94:	00007018 	andeq	r7, r0, r8, lsl r0
   15f98:	59170000 	ldmdbpl	r7, {}	; <UNPREDICTABLE>
   15f9c:	06000009 	streq	r0, [r0], -r9
   15fa0:	53120288 	tstpl	r2, #136, 4	; 0x80000008
   15fa4:	04000001 	streq	r0, [r0], #-1
   15fa8:	0003a917 	andeq	sl, r3, r7, lsl r9
   15fac:	02890600 	addeq	r0, r9, #0, 12
   15fb0:	00085710 	andeq	r5, r8, r0, lsl r7
   15fb4:	1c170800 	ldcne	8, cr0, [r7], {-0}
   15fb8:	06000008 	streq	r0, [r0], -r8
   15fbc:	f917028a 			; <UNDEFINED> instruction: 0xf917028a
   15fc0:	24000001 	strcs	r0, [r0], #-1
   15fc4:	0005d917 	andeq	sp, r5, r7, lsl r9
   15fc8:	028b0600 	addeq	r0, fp, #0, 12
   15fcc:	0000690f 	andeq	r6, r0, pc, lsl #18
   15fd0:	3b174800 	blcc	5e7fd8 <__ccfg+0x5c8030>
   15fd4:	0600000a 	streq	r0, [r0], -sl
   15fd8:	562c028c 	strtpl	r0, [ip], -ip, lsl #5
   15fdc:	50000000 	andpl	r0, r0, r0
   15fe0:	00008517 	andeq	r8, r0, r7, lsl r5
   15fe4:	028d0600 	addeq	r0, sp, #0, 12
   15fe8:	0006f91a 	andeq	pc, r6, sl, lsl r9	; <UNPREDICTABLE>
   15fec:	ee175800 	cdp	8, 1, cr5, cr7, cr0, {0}
   15ff0:	06000004 	streq	r0, [r0], -r4
   15ff4:	f916028e 			; <UNDEFINED> instruction: 0xf916028e
   15ff8:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
   15ffc:	00096617 	andeq	r6, r9, r7, lsl r6
   16000:	028f0600 	addeq	r0, pc, #0, 12
   16004:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   16008:	6f177000 	svcvs	0x00177000
   1600c:	06000000 	streq	r0, [r0], -r0
   16010:	f9160290 			; <UNDEFINED> instruction: 0xf9160290
   16014:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
   16018:	00084d17 	andeq	r4, r8, r7, lsl sp
   1601c:	02910600 	addseq	r0, r1, #0, 12
   16020:	00086710 	andeq	r6, r8, r0, lsl r7
   16024:	86178000 	ldrhi	r8, [r7], -r0
   16028:	06000003 	streq	r0, [r0], -r3
   1602c:	77100292 			; <UNDEFINED> instruction: 0x77100292
   16030:	88000008 	stmdahi	r0, {r3}
   16034:	00091117 	andeq	r1, r9, r7, lsl r1
   16038:	02930600 	addseq	r0, r3, #0, 12
   1603c:	0000690f 	andeq	r6, r0, pc, lsl #18
   16040:	2917a000 	ldmdbcs	r7, {sp, pc}
   16044:	06000002 	streq	r0, [r0], -r2
   16048:	f9160294 			; <UNDEFINED> instruction: 0xf9160294
   1604c:	a4000000 	strge	r0, [r0], #-0
   16050:	00052317 	andeq	r2, r5, r7, lsl r3
   16054:	02950600 	addseq	r0, r5, #0, 12
   16058:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   1605c:	6b17ac00 	blvs	601064 <__ccfg+0x5e10bc>
   16060:	06000004 	streq	r0, [r0], -r4
   16064:	f9160296 			; <UNDEFINED> instruction: 0xf9160296
   16068:	b4000000 	strlt	r0, [r0], #-0
   1606c:	00065317 	andeq	r5, r6, r7, lsl r3
   16070:	02970600 	addseq	r0, r7, #0, 12
   16074:	0000f916 	andeq	pc, r0, r6, lsl r9	; <UNPREDICTABLE>
   16078:	dd17bc00 	ldcle	12, cr11, [r7, #-0]
   1607c:	06000004 	streq	r0, [r0], -r4
   16080:	f9160298 			; <UNDEFINED> instruction: 0xf9160298
   16084:	c4000000 	strgt	r0, [r0], #-0
   16088:	0006f617 	andeq	pc, r6, r7, lsl r6	; <UNPREDICTABLE>
   1608c:	02990600 	addseq	r0, r9, #0, 12
   16090:	00006908 	andeq	r6, r0, r8, lsl #18
   16094:	0800cc00 	stmdaeq	r0, {sl, fp, lr, pc}
   16098:	00000159 	andeq	r0, r0, r9, asr r1
   1609c:	00000867 	andeq	r0, r0, r7, ror #16
   160a0:	00007009 	andeq	r7, r0, r9
   160a4:	08001900 	stmdaeq	r0, {r8, fp, ip}
   160a8:	00000159 	andeq	r0, r0, r9, asr r1
   160ac:	00000877 	andeq	r0, r0, r7, ror r8
   160b0:	00007009 	andeq	r7, r0, r9
   160b4:	08000700 	stmdaeq	r0, {r8, r9, sl}
   160b8:	00000159 	andeq	r0, r0, r9, asr r1
   160bc:	00000887 	andeq	r0, r0, r7, lsl #17
   160c0:	00007009 	andeq	r7, r0, r9
   160c4:	1a001700 	bne	1bccc <__exidx_end+0x16d9c>
   160c8:	029e06f0 	addseq	r0, lr, #240, 12	; 0xf000000
   160cc:	0008ae07 	andeq	sl, r8, r7, lsl #28
   160d0:	03611700 	cmneq	r1, #0, 14
   160d4:	a1060000 	mrsge	r0, (UNDEF: 6)
   160d8:	08ae1b02 	stmiaeq	lr!, {r1, r8, r9, fp, ip}
   160dc:	17000000 	strne	r0, [r0, -r0]
   160e0:	00000a5f 	andeq	r0, r0, pc, asr sl
   160e4:	1802a206 	stmdane	r2, {r1, r2, r9, sp, pc}
   160e8:	000008be 			; <UNDEFINED> instruction: 0x000008be
   160ec:	59080078 	stmdbpl	r8, {r3, r4, r5, r6}
   160f0:	be000003 	cdplt	0, 0, cr0, cr0, cr3, {0}
   160f4:	09000008 	stmdbeq	r0, {r3}
   160f8:	00000070 	andeq	r0, r0, r0, ror r0
   160fc:	7008001d 	andvc	r0, r8, sp, lsl r0
   16100:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
   16104:	09000008 	stmdbeq	r0, {r3}
   16108:	00000070 	andeq	r0, r0, r0, ror r0
   1610c:	f01b001d 			; <UNDEFINED> instruction: 0xf01b001d
   16110:	03028306 	movweq	r8, #8966	; 0x2306
   16114:	000008f3 	strdeq	r0, [r0], -r3
   16118:	00436c1c 	subeq	r6, r3, ip, lsl ip
   1611c:	029a0600 	addseq	r0, sl, #0, 12
   16120:	0007420b 	andeq	r4, r7, fp, lsl #4
   16124:	082b1c00 	stmdaeq	fp!, {sl, fp, ip}
   16128:	a3060000 	movwge	r0, #24576	; 0x6000
   1612c:	08870b02 	stmeq	r7, {r1, r8, r9, fp}
   16130:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
   16134:	00000159 	andeq	r0, r0, r9, asr r1
   16138:	00000903 	andeq	r0, r0, r3, lsl #18
   1613c:	00007009 	andeq	r7, r0, r9
   16140:	1d001800 	stcne	8, cr1, [r0, #-0]
   16144:	00000a46 	andeq	r0, r0, r6, asr #20
   16148:	0903040e 	stmdbeq	r3, {r1, r2, r3, sl}
   1614c:	191e0000 	ldmdbne	lr, {}	; <UNPREDICTABLE>
   16150:	15000009 	strne	r0, [r0, #-9]
   16154:	000004c0 	andeq	r0, r0, r0, asr #9
   16158:	0e040e00 	cdpeq	14, 0, cr0, cr4, cr0, {0}
   1615c:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
   16160:	0001e304 	andeq	lr, r1, r4, lsl #6
   16164:	09301e00 	ldmdbeq	r0!, {r9, sl, fp, ip}
   16168:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
   1616c:	00000000 	andeq	r0, r0, r0
   16170:	0936040e 	ldmdbeq	r6!, {r1, r2, r3, sl}
   16174:	040e0000 	streq	r0, [lr], #-0
   16178:	00000925 	andeq	r0, r0, r5, lsr #18
   1617c:	0006a708 	andeq	sl, r6, r8, lsl #14
   16180:	00094c00 	andeq	r4, r9, r0, lsl #24
   16184:	00700900 	rsbseq	r0, r0, r0, lsl #18
   16188:	00020000 	andeq	r0, r2, r0
   1618c:	0007f81f 	andeq	pc, r7, pc, lsl r8	; <UNPREDICTABLE>
   16190:	03330600 	teqeq	r3, #0, 12
   16194:	0004c017 	andeq	ip, r4, r7, lsl r0
   16198:	07f11f00 	ldrbeq	r1, [r1, r0, lsl #30]!
   1619c:	34060000 	strcc	r0, [r6], #-0
   161a0:	04c61d03 	strbeq	r1, [r6], #3331	; 0xd03
   161a4:	6b200000 	blvs	8161ac <__ccfg+0x7f6204>
   161a8:	08000042 	stmdaeq	r0, {r1, r6}
   161ac:	0041169a 	umaaleq	r1, r1, sl, r6
   161b0:	b5200000 	strlt	r0, [r0, #-0]!
   161b4:	08000041 	stmdaeq	r0, {r0, r6}
   161b8:	0069159b 	mlseq	r9, fp, r5, r1
   161bc:	53080000 	movwpl	r0, #32768	; 0x8000
   161c0:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
   161c4:	09000009 	stmdbeq	r0, {r0, r3}
   161c8:	00000070 	andeq	r0, r0, r0, ror r0
   161cc:	bf200001 	svclt	0x00200001
   161d0:	08000041 	stmdaeq	r0, {r0, r6}
   161d4:	097e179e 	ldmdbeq	lr!, {r1, r2, r3, r4, r7, r8, r9, sl, ip}^
   161d8:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
   161dc:	a5000006 	strge	r0, [r0, #-6]
   161e0:	21000009 	tstcs	r0, r9
   161e4:	099a0f00 	ldmibeq	sl, {r8, r9, sl, fp}
   161e8:	57200000 	strpl	r0, [r0, -r0]!
   161ec:	09000055 	stmdbeq	r0, {r0, r2, r4, r6}
   161f0:	09a52414 	stmibeq	r5!, {r2, r4, sl, sp}
   161f4:	ec200000 	stc	0, cr0, [r0], #-0
   161f8:	09000055 	stmdbeq	r0, {r0, r2, r4, r6}
   161fc:	00691515 	rsbeq	r1, r9, r5, lsl r5
   16200:	f9200000 			; <UNDEFINED> instruction: 0xf9200000
   16204:	01000006 	tsteq	r0, r6
   16208:	00690c0c 	rsbeq	r0, r9, ip, lsl #24
   1620c:	1a220000 	bne	896214 <__ccfg+0x87626c>
   16210:	01000043 	tsteq	r0, r3, asr #32
   16214:	00690112 	rsbeq	r0, r9, r2, lsl r1
   16218:	41a00000 	movmi	r0, r0
   1621c:	00100000 	andseq	r0, r0, r0
   16220:	9c010000 	stcls	0, cr0, [r1], {-0}
   16224:	00000a0b 	andeq	r0, r0, fp, lsl #20
   16228:	00431123 	subeq	r1, r3, r3, lsr #2
   1622c:	21120100 	tstcs	r2, r0, lsl #2
   16230:	00000a0b 	andeq	r0, r0, fp, lsl #20
   16234:	00005aa5 	andeq	r5, r0, r5, lsr #21
   16238:	00005aa1 	andeq	r5, r0, r1, lsr #21
   1623c:	0042b424 	subeq	fp, r2, r4, lsr #8
   16240:	0f130100 	svceq	0x00130100
   16244:	00000105 	andeq	r0, r0, r5, lsl #2
   16248:	0e005101 	adfeqs	f5, f0, f1
   1624c:	00012b04 	andeq	r2, r1, r4, lsl #22
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
	b->u.pointers.tail =
      64:	01010800 	tsteq	r1, r0, lsl #16
}
      68:	13011349 	movwne	r1, #4937	; 0x1349
		return NULL;
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
fsm transmitter (message * messagePtr) {
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
}
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	0b000f11 	bleq	3d28 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xd0>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
        spkt [0] = 0;
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
        *p = messagePtr->messageType; p++; // insert message type
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
        *p = messagePtr->requestNumber; p++; // insert request number
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        *p = messagePtr->destinationId; p++; // insert receiver ID
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
        tcv_endp (spkt);
     104:	14000005 	strne	r0, [r0], #-5
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
     10c:	15150000 	ldrne	r0, [r5, #-0]
}
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
        finish;
     114:	00130113 	andseq	r0, r3, r3, lsl r1
     118:	00051600 	andeq	r1, r5, r0, lsl #12
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
char randomNumber() {
     124:	18000013 	stmdane	r0, {r0, r1, r4}
   srand((unsigned) time(&t));
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
   return (char)rand();
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
}
     134:	00001301 	andeq	r1, r0, r1, lsl #6
     138:	03000d19 	movweq	r0, #3353	; 0xd19
fsm root {
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
     158:	131b0000 	tstne	fp, #0
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
     164:	010b3905 	tsteq	fp, r5, lsl #18
     168:	1c000013 	stcne	0, cr0, [r0], {19}
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
        recordCount = 0;
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        nodeId = 1;
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
        groupId = 1;
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        messagePtr = (message *) umalloc(sizeof(message));
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
        tcv_plug(0, &plug_null);
     194:	00001349 	andeq	r1, r0, r9, asr #6
     198:	0300131f 	movweq	r1, #799	; 0x31f
        sfd = tcv_open(WNONE, 0, 0);
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
     1a0:	01152000 	tsteq	r5, r0
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	34210000 	strtcc	r0, [r1], #-0
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (sfd < 0) {
     1b4:	3f13490b 	svccc	0x0013490b
			diag("Cannot open tcv interface");
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
			halt();
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
        currentProtocol = IDLE;
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
        ser_outf(Options, menu);
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0b0b0104 	bleq	2c060c <__ccfg+0x2a0664>
        switch (choice)
     1f8:	0b3a1349 	bleq	e84f24 <__ccfg+0xe64f7c>
     1fc:	0b390b3b 	bleq	e42ef0 <__ccfg+0xe22f48>
     200:	00001301 	andeq	r1, r0, r1, lsl #6
     204:	03002827 	movweq	r2, #2087	; 0x827
     208:	000b1c0e 	andeq	r1, fp, lr, lsl #24
     20c:	00282800 	eoreq	r2, r8, r0, lsl #16
     210:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     214:	34290000 	strtcc	r0, [r9], #-0
     218:	3a0e0300 	bcc	380e20 <__ccfg+0x360e78>
     21c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     220:	3f13490b 	svccc	0x0013490b
     224:	000a020c 	andeq	r0, sl, ip, lsl #4
        proceed Menu_Header;
     228:	00342a00 	eorseq	r2, r4, r0, lsl #20
     22c:	0b3a0803 	bleq	e82240 <__ccfg+0xe62298>
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	0b390b3b 	bleq	e42f24 <__ccfg+0xe22f7c>
     234:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 118 <_Min_Stack_Size+0x18>
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	00000a02 	andeq	r0, r0, r2, lsl #20
     23c:	3f012e2b 	svccc	0x00012e2b
        proceed Menu_Header;
     240:	3a0e030c 	bcc	380e78 <__ccfg+0x360ed0>
     244:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	110c270b 	tstne	ip, fp, lsl #14
     24c:	40011201 	andmi	r1, r1, r1, lsl #4
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	0013010a 	andseq	r0, r3, sl, lsl #2
     254:	00052c00 	andeq	r2, r5, r0, lsl #24
     258:	0b3a0e03 	bleq	e83a6c <__ccfg+0xe63ac4>
    if (node < 1 || node > 25) {
     25c:	0b390b3b 	bleq	e42f50 <__ccfg+0xe22fa8>
     260:	06021349 	streq	r1, [r2], -r9, asr #6
            proceed Set_Node_ID;
     264:	0a2d0000 	beq	b4026c <__ccfg+0xb202c4>
        proceed Menu_Header;
     268:	3a0e0300 	bcc	380e70 <__ccfg+0x360ec8>
     26c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
        currentProtocol = DISCOVERY_REQUEST;
     270:	0001110b 	andeq	r1, r1, fp, lsl #2
     274:	000a2e00 	andeq	r2, sl, r0, lsl #28
        receiverId = 0;
     278:	0b3a0e03 	bleq	e83a8c <__ccfg+0xe63ae4>
        proceed Transmit_Message;
     27c:	0b39053b 	bleq	e41770 <__ccfg+0xe217c8>
        currentProtocol = CREATE_RECORD;
     280:	00000111 	andeq	r0, r0, r1, lsl r1
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	11010b2f 	tstne	r1, pc, lsr #22
     288:	00011201 	andeq	r1, r1, r1, lsl #4
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	00343000 	eorseq	r3, r4, r0
     290:	0b3a0e03 	bleq	e83aa4 <__ccfg+0xe63afc>
     294:	0b390b3b 	bleq	e42f88 <__ccfg+0xe22fe0>
    if (node < 1 || node > 25) {
     298:	00001349 	andeq	r1, r0, r9, asr #6
     29c:	03003431 	movweq	r3, #1073	; 0x431
            proceed Create_Record;
     2a0:	3b0b3a0e 	blcc	2ceae0 <__ccfg+0x2aeb38>
     2a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	000a0213 	andeq	r0, sl, r3, lsl r2
     2ac:	010b3200 	mrseq	r3, R11_fiq
     2b0:	13010655 	movwne	r0, #5717	; 0x1655
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	0b330000 	bleq	cc02bc <__ccfg+0xca0314>
     2b8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     2bc:	00130101 	andseq	r0, r3, r1, lsl #2
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	00343400 	eorseq	r3, r4, r0, lsl #8
        proceed Transmit_Message;
     2c4:	0b3a0e03 	bleq	e83ad8 <__ccfg+0xe63b30>
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	0b39053b 	bleq	e417bc <__ccfg+0xe21814>
        proceed Transmit_Message;
     2cc:	0a021349 	beq	84ff8 <__ccfg+0x65050>
        currentProtocol = DELETE_RECORD;
     2d0:	1d350000 	ldcne	0, cr0, [r5, #-0]
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	11133101 	tstne	r3, r1, lsl #2
        currentProtocol = DELETE_RECORD;
     2d8:	58011201 	stmdapl	r1, {r0, r9, ip}
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
        proceed Get_Receiving_Node;
     2e0:	0013010b 	andseq	r0, r3, fp, lsl #2
        currentProtocol = RETRIEVE_RECORD;
     2e4:	00053600 	andeq	r3, r5, r0, lsl #12
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	06021331 			; <UNDEFINED> instruction: 0x06021331
        currentProtocol = RETRIEVE_RECORD;
     2ec:	1d370000 	ldcne	0, cr0, [r7, #-0]
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	11133101 	tstne	r3, r1, lsl #2
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	58011201 	stmdapl	r1, {r0, r9, ip}
     2f8:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	3800000b 	stmdacc	r0, {r0, r1, r3}
     300:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 250 <root+0x114>
     304:	0b3a0e03 	bleq	e83b18 <__ccfg+0xe63b70>
    if (node < 1 || node > 25) {
     308:	0b390b3b 	bleq	e42ffc <__ccfg+0xe23054>
     30c:	01111349 	tsteq	r1, r9, asr #6
            proceed Prompt_Recieving_Node;
     310:	0a400112 	beq	1000760 <__ccfg+0xfe07b8>
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00001301 	andeq	r1, r0, r1, lsl #6
     318:	03003439 	movweq	r3, #1081	; 0x439
        char desiredRecordIndex = -1;
     31c:	3b0b3a08 	blcc	2ceb44 <__ccfg+0x2aeb9c>
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     324:	000a0213 	andeq	r0, sl, r3, lsl r2
        char desiredRecordIndex = -1;
     328:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
        messagePtr->recordIndex = desiredRecordIndex;
     330:	0b3b0b3a 	bleq	ec3020 <__ccfg+0xea3078>
     334:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     338:	0b201349 	bleq	805064 <__ccfg+0x7e50bc>
        proceed Transmit_Message;
     33c:	00001301 	andeq	r1, r0, r1, lsl #6
        messagePtr -> senderGroupId = groupId;
     340:	0300053b 	movweq	r0, #1339	; 0x53b
     344:	3b0b3a0e 	blcc	2ceb84 <__ccfg+0x2aebdc>
     348:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        messagePtr -> messageType = currentProtocol;
     34c:	3c000013 	stccc	0, cr0, [r0], {19}
     350:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2a0 <root+0x164>
        messagePtr -> requestNumber = randomNumber();
     354:	0b3a0e03 	bleq	e83b68 <__ccfg+0xe63bc0>
        messagePtr -> senderId = nodeId;
     358:	0b390b3b 	bleq	e4304c <__ccfg+0xe230a4>
     35c:	0b200c27 	bleq	803400 <__ccfg+0x7e3458>
        call transmitter(messagePtr, Menu_Header);
     360:	00001301 	andeq	r1, r0, r1, lsl #6
        messagePtr -> destinationId = receiverId;
     364:	00010b3d 	andeq	r0, r1, sp, lsr fp
     368:	00343e00 	eorseq	r3, r4, r0, lsl #28
        call transmitter(messagePtr, Menu_Header);
     36c:	0b3a0803 	bleq	e82380 <__ccfg+0xe623d8>
     370:	0b390b3b 	bleq	e43064 <__ccfg+0xe230bc>
     374:	00001349 	andeq	r1, r0, r9, asr #6
     378:	31012e3f 	tstcc	r1, pc, lsr lr
            proceed Set_Node_ID;
     37c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
            break;
     380:	010a4001 	tsteq	sl, r1
            proceed Set_Node_ID;
     384:	40000013 	andmi	r0, r0, r3, lsl r0
            proceed Find_Neighbours;
     388:	13310034 	teqne	r1, #52	; 0x34
            proceed Create_Record;
     38c:	00000602 	andeq	r0, r0, r2, lsl #12
            proceed Delete_Record;
     390:	31010b41 	tstcc	r1, r1, asr #22
            proceed Retrieve_Record;
     394:	01065513 	tsteq	r6, r3, lsl r5
            diag("Reset Local Storage");
     398:	42000013 	andmi	r0, r0, #19
            break;
     39c:	13310034 	teqne	r1, #52	; 0x34
            diag("Reset Local Storage");
     3a0:	1d430000 	stclne	0, cr0, [r3, #-0]
     3a4:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     3a8:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     3ac:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     3b0:	4400000b 	strmi	r0, [r0], #-11
     3b4:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     3b8:	0a450000 	beq	11403c0 <__ccfg+0x1120418>
     3bc:	00133100 	andseq	r3, r3, r0, lsl #2
     3c0:	000a4600 	andeq	r4, sl, r0, lsl #12
     3c4:	01111331 	tsteq	r1, r1, lsr r3
     3c8:	2e470000 	cdpcs	0, 4, cr0, cr7, cr0, {0}
     3cc:	11133101 	tstne	r3, r1, lsl #2
     3d0:	40011201 	andmi	r1, r1, r1, lsl #4
     3d4:	0000000a 	andeq	r0, r0, sl
     3d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     3dc:	030b130e 	movweq	r1, #45838	; 0xb30e
     3e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     3e4:	10011106 	andne	r1, r1, r6, lsl #2
     3e8:	02000006 	andeq	r0, r0, #6
     3ec:	0b0b0024 	bleq	2c0484 <__ccfg+0x2a04dc>
     3f0:	0e030b3e 	vmoveq.16	d3[0], r0
     3f4:	16030000 	strne	r0, [r3], -r0
     3f8:	3a0e0300 	bcc	381000 <__ccfg+0x361058>
     3fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     400:	0013490b 	andseq	r4, r3, fp, lsl #18
     404:	00240400 	eoreq	r0, r4, r0, lsl #8
static void devinit_uart (int devnum) {
     408:	0b3e0b0b 	bleq	f8303c <__ccfg+0xf63094>
	adddevfunc (ioreq_uart_a, devnum);
     40c:	00000803 	andeq	r0, r0, r3, lsl #16
     410:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
void udelay (volatile word n) {
     414:	06000013 			; <UNDEFINED> instruction: 0x06000013
     418:	13490035 	movtne	r0, #36917	; 0x9035
	while (n) {
     41c:	0f070000 	svceq	0x00070000
     420:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
     424:	08000013 	stmdaeq	r0, {r0, r1, r4}
	while (n--);
     428:	0b0b0113 	bleq	2c087c <__ccfg+0x2a08d4>
     42c:	0b3b0b3a 	bleq	ec311c <__ccfg+0xea3174>
     430:	13010b39 	movwne	r0, #6969	; 0x1b39
		n--;
     434:	0d090000 	stceq	0, cr0, [r9, #-0]
     438:	3a0e0300 	bcc	381040 <__ccfg+0x361098>
     43c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void mdelay (volatile word n) {
     440:	0b13490b 	bleq	4d2874 <__ccfg+0x4b28cc>
     444:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	while (n) {
     448:	000b380b 	andeq	r3, fp, fp, lsl #16
     44c:	000d0a00 	andeq	r0, sp, r0, lsl #20
}
     450:	0b3a0e03 	bleq	e83c64 <__ccfg+0xe63cbc>
		udelay (999);
     454:	0b390b3b 	bleq	e43148 <__ccfg+0xe231a0>
     458:	0b381349 	bleq	e05184 <__ccfg+0xde51dc>
		n--;
     45c:	340b0000 	strcc	r0, [fp], #-0
     460:	3a0e0300 	bcc	381068 <__ccfg+0x3610c0>
     464:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     468:	3f13490b 	svccc	0x0013490b
void __pi_ondomain (lword d) {
     46c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     470:	01010c00 	tsteq	r1, r0, lsl #24
		if (__pi_systat.effpdm > 1)
     474:	13011349 	movwne	r1, #4937	; 0x1349
     478:	210d0000 	mrscs	r0, (UNDEF: 13)
			__pi_systat.effpdm = 1;
     47c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
	PRCMPowerDomainOn (d);
     480:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     484:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     488:	13490b39 	movtne	r0, #39737	; 0x9b39
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48c:	150f0000 	strne	r0, [pc, #-0]	; 494 <__pi_ondomain+0x28>
     490:	010c2701 	tsteq	ip, r1, lsl #14
     494:	10000013 	andne	r0, r0, r3, lsl r0
	__pi_systat.ondmns |= d;
     498:	13490005 	movtne	r0, #36869	; 0x9005
     49c:	34110000 	ldrcc	r0, [r1], #-0
}
     4a0:	3a0e0300 	bcc	3810a8 <__ccfg+0x361100>
     4a4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
void __pi_offdomain (lword d) {
     4a8:	3f13490b 	svccc	0x0013490b
     4ac:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	PRCMPowerDomainOff (d);
     4b0:	01131200 	tsteq	r3, r0, lsl #4
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	0b3a0b0b 	bleq	e830e8 <__ccfg+0xe63140>
     4b8:	0b39053b 	bleq	e419ac <__ccfg+0xe21a04>
     4bc:	00001301 	andeq	r1, r0, r1, lsl #6
	if (d & PRCM_DOMAIN_RFCORE) {
     4c0:	03000d13 	movweq	r0, #3347	; 0xd13
     4c4:	3b0b3a0e 	blcc	2ced04 <__ccfg+0x2aed5c>
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     4cc:	000b3813 	andeq	r3, fp, r3, lsl r8
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4d0:	01131400 	tsteq	r3, r0, lsl #8
     4d4:	0b0b0e03 	bleq	2c3ce8 <__ccfg+0x2a3d40>
	__pi_systat.ondmns &= ~d;
     4d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4dc:	13010b39 	movwne	r0, #6969	; 0x1b39
}
     4e0:	21150000 	tstcs	r5, r0
     4e4:	2f134900 	svccs	0x00134900
void __pi_syserror (word ec, const char *m) {
     4e8:	1600000b 	strne	r0, [r0], -fp
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4f0:	0b3b0b3a 	bleq	ec31e0 <__ccfg+0xea3238>
  __ASM volatile ("cpsid i" : : : "memory");
     4f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     4f8:	34170000 	ldrcc	r0, [r7], #-0
     4fc:	3a0e0300 	bcc	381104 <__ccfg+0x36115c>
     500:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		all_leds_blink;
     504:	3f13490b 	svccc	0x0013490b
     508:	000a020c 	andeq	r0, sl, ip, lsl #4
     50c:	00341800 	eorseq	r1, r4, r0, lsl #16
     510:	0b3a0e03 	bleq	e83d24 <__ccfg+0xe63d7c>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     514:	0b39053b 	bleq	e41a08 <__ccfg+0xe21a60>
     518:	0a021349 	beq	85244 <__ccfg+0x6529c>
     51c:	34190000 	ldrcc	r0, [r9], #-0
     520:	3a134700 	bcc	4d2128 <__ccfg+0x4b2180>
     524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     528:	000a020b 	andeq	r0, sl, fp, lsl #4
	while (1) {
     52c:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     530:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     534:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     538:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
void tci_run_delay_timer () {
     53c:	01111349 	tsteq	r1, r9, asr #6
	setdel = __pi_mintk - __pi_old;
     540:	0a400112 	beq	1000990 <__ccfg+0xfe09e8>
     544:	00001301 	andeq	r1, r0, r1, lsl #6
     548:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
     54c:	00130106 	andseq	r0, r3, r6, lsl #2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	00341c00 	eorseq	r1, r4, r0, lsl #24
     554:	0b3a0803 	bleq	e82568 <__ccfg+0xe625c0>
     558:	0b39053b 	bleq	e41a4c <__ccfg+0xe21aa4>
     55c:	00001349 	andeq	r1, r0, r9, asr #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	31001d1d 	tstcc	r0, sp, lsl sp
	sti_tim;
     564:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
}
     568:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     56c:	000b5705 	andeq	r5, fp, r5, lsl #14
     570:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
     574:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     578:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	cli_aux;
     57c:	01110b39 	tsteq	r1, r9, lsr fp
     580:	0a400112 	beq	10009d0 <__ccfg+0xfe0a28>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	00001301 	andeq	r1, r0, r1, lsl #6
     588:	03000a1f 	movweq	r0, #2591	; 0xa1f
     58c:	3b0b3a0e 	blcc	2cedcc <__ccfg+0x2aee24>
     590:	000b390b 	andeq	r3, fp, fp, lsl #18
	sti_aux;
     594:	011d2000 	tsteq	sp, r0
}
     598:	01521331 	cmpeq	r2, r1, lsr r3
     59c:	0b580655 	bleq	1601ef8 <__ccfg+0x15e1f50>
     5a0:	0b570559 	bleq	15c1b0c <__ccfg+0x15a1b64>
void AONRTCIntHandler () {
     5a4:	00001301 	andeq	r1, r0, r1, lsl #6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a8:	31000521 	tstcc	r0, r1, lsr #10
     5ac:	22000013 	andcs	r0, r0, #19
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		if (__pi_utims [0] == 0)
     5b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
     5b8:	0b590b58 	bleq	1643320 <__ccfg+0x1623378>
		if (*(__pi_utims [0])) {
     5bc:	13010b57 	movwne	r0, #6999	; 0x1b57
     5c0:	0b230000 	bleq	8c05c8 <__ccfg+0x8a0620>
			(*(__pi_utims [0]))--;
     5c4:	00065501 	andeq	r5, r6, r1, lsl #10
		if (__pi_utims [1] == 0)
     5c8:	000a2400 	andeq	r2, sl, r0, lsl #8
		if (*(__pi_utims [1])) {
     5cc:	01111331 	tsteq	r1, r1, lsr r3
			aux_timer_inactive = 0;
     5d0:	1d250000 	stcne	0, cr0, [r5, #-0]
			(*(__pi_utims [1]))--;
     5d4:	52133100 	andspl	r3, r3, #0, 2
		if (__pi_utims [2] == 0)
     5d8:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
		if (*(__pi_utims [2])) {
     5dc:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			(*(__pi_utims [2]))--;
     5e0:	2600000b 	strcs	r0, [r0], -fp
		if (__pi_utims [3] != 0) {
     5e4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			if (*(__pi_utims [3])) {
     5e8:	01120111 	tsteq	r2, r1, lsl r1
				aux_timer_inactive = 0;
     5ec:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
				(*(__pi_utims [3]))--;
     5f0:	13010b57 	movwne	r0, #6999	; 0x1b57
	if (__pi_systat.ledsts) {
     5f4:	1d270000 	stcne	0, cr0, [r7, #-0]
     5f8:	11133101 	tstne	r3, r1, lsl #2
		if (__pi_systat.ledblc++ == 0) {
     5fc:	58011201 	stmdapl	r1, {r0, r9, ip}
     600:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			if (__pi_systat.ledblk) {
     604:	2800000b 	stmdacs	r0, {r0, r1, r3}
     608:	1331001d 	teqne	r1, #29
     60c:	01120111 	tsteq	r2, r1, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	0b590b58 	bleq	1643378 <__ccfg+0x16233d0>
     614:	00000b57 	andeq	r0, r0, r7, asr fp
				if (__pi_systat.ledsts & 0x2)
     618:	03003429 	movweq	r3, #1065	; 0x429
     61c:	3b0b3a08 	blcc	2cee44 <__ccfg+0x2aee9c>
     620:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				if (__pi_systat.ledsts & 0x4)
     624:	00060213 	andeq	r0, r6, r3, lsl r2
				__pi_systat.ledblk = 0;
     628:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     62c:	0b3a0e03 	bleq	e83e40 <__ccfg+0xe63e98>
			if (__pi_systat.fstblk)
     630:	0b39053b 	bleq	e41b24 <__ccfg+0xe21b7c>
     634:	13010b20 	movwne	r0, #6944	; 0x1b20
				__pi_systat.ledblc = 200;
     638:	0a2b0000 	beq	ac0640 <__ccfg+0xaa0698>
	if (events & AON_RTC_EVFLAGS_CH0) {
     63c:	3a0e0300 	bcc	381244 <__ccfg+0x36129c>
		cli_tim;
     640:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		__pi_new += setdel;
     644:	2c00000b 	stccs	0, cr0, [r0], {11}
     648:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 598 <tci_run_auxiliary_timer+0x1c>
		setdel = 0;
     64c:	0b3a0e03 	bleq	e83e60 <__ccfg+0xe63eb8>
		RISE_N_SHINE;
     650:	0b39053b 	bleq	e41b44 <__ccfg+0xe21b9c>
		__pi_new += setdel;
     654:	01110c27 	tsteq	r1, r7, lsr #24
		RISE_N_SHINE;
     658:	0a400112 	beq	1000aa8 <__ccfg+0xfe0b00>
     65c:	00001301 	andeq	r1, r0, r1, lsl #6
		aux_timer_inactive = 1;
     660:	0300052d 	movweq	r0, #1325	; 0x52d
     664:	3b0b3a0e 	blcc	2ceea4 <__ccfg+0x2aeefc>
				if (__pi_systat.ledsts & 0x1)
     668:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	00060213 	andeq	r0, r6, r3, lsl r2
     670:	010b2e00 	tsteq	fp, r0, lsl #28
				if (__pi_systat.ledsts & 0x2)
     674:	01120111 	tsteq	r2, r1, lsl r1
     678:	00001301 	andeq	r1, r0, r1, lsl #6
     67c:	3100342f 	tstcc	r0, pc, lsr #8
				if (__pi_systat.ledsts & 0x8)
     680:	30000013 	andcc	r0, r0, r3, lsl r0
				__pi_systat.ledblk = 1;
     684:	1331010b 	teqne	r1, #-1073741822	; 0xc0000002
     688:	00000655 	andeq	r0, r0, r5, asr r6
		if (aux_timer_inactive) {
     68c:	31003431 	tstcc	r0, r1, lsr r4
			cli_aux;
     690:	00060213 	andeq	r0, r6, r3, lsl r2
     694:	011d3200 	tsteq	sp, r0, lsl #4
     698:	01521331 	cmpeq	r2, r1, lsr r3
     69c:	0b580655 	bleq	1601ff8 <__ccfg+0x15e2050>
     6a0:	0b570b59 	bleq	15c340c <__ccfg+0x15a3464>
     6a4:	1d330000 	ldcne	0, cr0, [r3, #-0]
     6a8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     6ac:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     6b0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     6b4:	3400000b 	strcc	r0, [r0], #-11
word tci_update_delay_ticks (Boolean force) {
     6b8:	08030005 	stmdaeq	r3, {r0, r2}
	cli_tim;
     6bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     6c0:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (setdel) {
     6c4:	00000a02 	andeq	r0, r0, r2, lsl #20
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	31000535 	tstcc	r0, r5, lsr r5
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	00060213 	andeq	r0, r6, r3, lsl r2
     6d0:	00343600 	eorseq	r3, r4, r0, lsl #12
     6d4:	0b3a0803 	bleq	e826e8 <__ccfg+0xe62740>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	0b390b3b 	bleq	e433cc <__ccfg+0xe23424>
				AON_RTC_O_CH0CMP)) - gettav ());
     6dc:	06021349 	streq	r1, [r2], -r9, asr #6
	return NO;
     6e0:	0b370000 	bleq	dc06e8 <__ccfg+0xda0740>
			setdel = 0;
     6e4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e8:	38000001 	stmdacc	r0, {r0}
     6ec:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
}
     6f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		sti_tim;
     6f4:	0b200b39 	bleq	8033e0 <__ccfg+0x7e3438>
		return YES;
     6f8:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
     6fc:	3a0e0301 	bcc	381308 <__ccfg+0x361360>
     700:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     704:	110c270b 	tstne	ip, fp, lsl #14
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	40011201 	andmi	r1, r1, r1, lsl #4
	UARTDisable (UART0_BASE);
     70c:	0013010a 	andseq	r0, r3, sl, lsl #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
	UARTDisable (UART0_BASE);
     714:	0b3a0e03 	bleq	e83f28 <__ccfg+0xe63f80>
	UARTConfigSetExpClk (UART0_BASE,
     718:	0b39053b 	bleq	e41c0c <__ccfg+0xe21c64>
     71c:	13490c27 	movtne	r0, #39975	; 0x9c27
     720:	01120111 	tsteq	r2, r1, lsl r1
     724:	13010a40 	movwne	r0, #6720	; 0x1a40
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	053b0000 	ldreq	r0, [fp, #-0]!
     72c:	3a080300 	bcc	201334 <__ccfg+0x1e138c>
     730:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     738:	3c000006 	stccc	0, cr0, [r0], {6}
     73c:	0e03012e 	adfeqsp	f0, f3, #0.5
	urates [0] = rate;
     740:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     744:	01110b39 	tsteq	r1, r9, lsr fp
     748:	0a400112 	beq	1000b98 <__ccfg+0xfe0bf0>
     74c:	00001301 	andeq	r1, r0, r1, lsl #6
     750:	3f012e3d 	svccc	0x00012e3d
     754:	3a0e030c 	bcc	38138c <__ccfg+0x3613e4>
     758:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     760:	010b2013 	tsteq	fp, r3, lsl r0
     764:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	08030005 	stmdaeq	r3, {r0, r2}
     76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     770:	13490b39 	movtne	r0, #39737	; 0x9b39
     774:	0a3f0000 	beq	fc077c <__ccfg+0xfa07d4>
	__pi_uart_setrate (urates [0], __pi_uart);
     778:	3a080300 	bcc	201380 <__ccfg+0x1e13d8>
     77c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     780:	4000000b 	andmi	r0, r0, fp
     784:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     788:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     78c:	13490b39 	movtne	r0, #39737	; 0x9b39
     790:	00000602 	andeq	r0, r0, r2, lsl #12
	switch (operation) {
     794:	03000a41 	movweq	r0, #2625	; 0xa41
static int ioreq_uart_a (int operation, char *buf, int len) {
     798:	3b0b3a08 	blcc	2cefc0 <__ccfg+0x2af018>
     79c:	110b3905 	tstne	fp, r5, lsl #18
     7a0:	42000001 	andmi	r0, r0, #1
     7a4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     7a8:	01120111 	tsteq	r2, r1, lsl r1
				*buf++ = uart_a_read;
     7ac:	0b590b58 	bleq	1643514 <__ccfg+0x162356c>
     7b0:	13010b57 	movwne	r0, #6999	; 0x1b57
			while (len && uart_a_char_available) {
     7b4:	1d430000 	stclne	0, cr0, [r3, #-0]
     7b8:	11133101 	tstne	r3, r1, lsl #2
     7bc:	58011201 	stmdapl	r1, {r0, r9, ip}
			if (len != operation) {
     7c0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
}
     7c4:	4400000b 	strmi	r0, [r0], #-11
     7c8:	0e03012e 	adfeqsp	f0, f3, #0.5
			uart_a_disable_int;
     7cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (uart_a_char_available) {
     7d0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*buf++ = uart_a_read;
     7d4:	0b201349 	bleq	805500 <__ccfg+0x7e5558>
			uart_a_disable_int;
     7d8:	00001301 	andeq	r1, r0, r1, lsl #6
     7dc:	03002e45 	movweq	r2, #3653	; 0xe45
			if (uart_a_char_available) {
     7e0:	3b0b3a0e 	blcc	2cf020 <__ccfg+0x2af078>
     7e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				uart_a_enable_int;
     7e8:	000b2013 	andeq	r2, fp, r3, lsl r0
     7ec:	012e4600 			; <UNDEFINED> instruction: 0x012e4600
				goto Redo_rx;
     7f0:	0b3a0e03 	bleq	e84004 <__ccfg+0xe6405c>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f4:	0b390b3b 	bleq	e434e8 <__ccfg+0xe23540>
     7f8:	13010b20 	movwne	r0, #6944	; 0x1b20
			return -2;
     7fc:	34470000 	strbcc	r0, [r7], #-0
     800:	3a080300 	bcc	201408 <__ccfg+0x1e1460>
				uart_a_write (*buf);
     804:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     808:	0013490b 	andseq	r4, r3, fp, lsl #18
			while (len && uart_a_room_in_tx) {
     80c:	010b4800 	tsteq	fp, r0, lsl #16
     810:	2e490000 	cdpcs	0, 4, cr0, cr9, cr0, {0}
     814:	030c3f01 	movweq	r3, #52993	; 0xcf01
			if (len != operation) {
     818:	3b0b3a0e 	blcc	2cf058 <__ccfg+0x2af0b0>
			uart_a_disable_int;
     81c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     820:	1201110c 	andne	r1, r1, #12, 2
			if (uart_a_room_in_tx) {
     824:	010a4001 	tsteq	sl, r1
     828:	4a000013 	bmi	87c <ioreq_uart_a+0xe8>
				uart_a_enable_int;
     82c:	08030005 	stmdaeq	r3, {r0, r2}
     830:	0b3b0b3a 	bleq	ec3520 <__ccfg+0xea3578>
				*buf++ = uart_a_read;
     834:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (uart_a_room_in_tx) {
     838:	00000602 	andeq	r0, r0, r2, lsl #12
				uart_a_write (*buf);
     83c:	0300344b 	movweq	r3, #1099	; 0x44b
     840:	3b0b3a0e 	blcc	2cf080 <__ccfg+0x2af0d8>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     844:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     848:	000a0213 	andeq	r0, sl, r3, lsl r2
			uart_a_enable_int;
     84c:	000a4c00 	andeq	r4, sl, r0, lsl #24
     850:	0b3a0e03 	bleq	e84064 <__ccfg+0xe640bc>
     854:	0b390b3b 	bleq	e43548 <__ccfg+0xe235a0>
			return 0;
     858:	00000111 	andeq	r0, r0, r1, lsl r1
			if (len == UART_CNTRL_SETRATE) {
     85c:	31001d4d 	tstcc	r0, sp, asr #26
				if (__pi_uart_setrate (*((word*)buf),
     860:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     864:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     868:	000b570b 	andeq	r5, fp, fp, lsl #14
				syserror (EREQPAR, "uar");
     86c:	002e4e00 	eoreq	r4, lr, r0, lsl #28
			syserror (ENOOPER, "uai");
     870:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			if (len == UART_CNTRL_GETRATE) {
     874:	0b3b0b3a 	bleq	ec3564 <__ccfg+0xea35bc>
				return 1;
     878:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87c:	01120111 	tsteq	r2, r1, lsl r1
			syserror (ENOOPER, "uai");
     880:	00000a40 	andeq	r0, r0, r0, asr #20
     884:	0300054f 	movweq	r0, #1359	; 0x54f
     888:	3b0b3a08 	blcc	2cf0b0 <__ccfg+0x2af108>
     88c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     890:	000a0213 	andeq	r0, sl, r3, lsl r2
     894:	012e5000 			; <UNDEFINED> instruction: 0x012e5000
     898:	0b3a0e03 	bleq	e840ac <__ccfg+0xe64104>
     89c:	0b390b3b 	bleq	e43590 <__ccfg+0xe235e8>
     8a0:	0b200c27 	bleq	803944 <__ccfg+0x7e399c>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	00001301 	andeq	r1, r0, r1, lsl #6
void UART0IntHandler () {
     8a8:	03000551 	movweq	r0, #1361	; 0x551
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	3b0b3a08 	blcc	2cf0d4 <__ccfg+0x2af12c>
     8b0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     8b4:	52000013 	andpl	r0, r0, #19
     8b8:	0e03012e 	adfeqsp	f0, f3, #0.5
     8bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     8c4:	13010b20 	movwne	r0, #6944	; 0x1b20
		RISE_N_SHINE;
     8c8:	05530000 	ldrbeq	r0, [r3, #-0]
     8cc:	3a0e0300 	bcc	3814d4 <__ccfg+0x36152c>
		i_trigger (devevent (UART_A, READ));
     8d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     8d8:	002e5400 	eoreq	r5, lr, r0, lsl #8
     8dc:	0b3a0e03 	bleq	e840f0 <__ccfg+0xe64148>
     8e0:	0b390b3b 	bleq	e435d4 <__ccfg+0xe2362c>
     8e4:	0b200c27 	bleq	803988 <__ccfg+0x7e39e0>
     8e8:	2e550000 	cdpcs	0, 5, cr0, cr5, cr0, {0}
     8ec:	3a0e0301 	bcc	3814f8 <__ccfg+0x361550>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     8f8:	010b2013 	tsteq	fp, r3, lsl r0
     8fc:	56000013 			; <UNDEFINED> instruction: 0x56000013
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     900:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     904:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     908:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		i_trigger (devevent (UART_A, WRITE));
     90c:	00000b20 	andeq	r0, r0, r0, lsr #22
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	03002e57 	movweq	r2, #3671	; 0xe57
     914:	3b0b3a0e 	blcc	2cf154 <__ccfg+0x2af1ac>
		RISE_N_SHINE;
     918:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     91c:	2013490c 	andscs	r4, r3, ip, lsl #18
     920:	5800000b 	stmdapl	r0, {r0, r1, r3}
		i_trigger (devevent (UART_A, WRITE));
     924:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     928:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     92c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     930:	0b201349 	bleq	80565c <__ccfg+0x7e56b4>
     934:	2e590000 	cdpcs	0, 5, cr0, cr9, cr0, {0}
     938:	11133101 	tstne	r3, r1, lsl #2
     93c:	40011201 	andmi	r1, r1, r1, lsl #4
     940:	0000000a 	andeq	r0, r0, sl
     944:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     948:	030b130e 	movweq	r1, #45838	; 0xb30e
     94c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
}
     950:	10011106 	andne	r1, r1, r6, lsl #2
     954:	02000006 	andeq	r0, r0, #6
     958:	0b0b0024 	bleq	2c09f0 <__ccfg+0x2a0a48>
     95c:	0e030b3e 	vmoveq.16	d3[0], r0
     960:	16030000 	strne	r0, [r3], -r0
void __buttons_setirq (int val) {
     964:	3a0e0300 	bcc	38156c <__ccfg+0x3615c4>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     96c:	0013490b 	andseq	r4, r3, fp, lsl #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	00240400 	eoreq	r0, r4, r0, lsl #8
     974:	0b3e0b0b 	bleq	f835a8 <__ccfg+0xf63600>
     978:	00000803 	andeq	r0, r0, r3, lsl #16
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	03011305 	movweq	r1, #4869	; 0x1305
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     980:	3a0b0b0e 	bcc	2c35c0 <__ccfg+0x2a3618>
     984:	010b3b0b 	tsteq	fp, fp, lsl #22
     988:	06000013 			; <UNDEFINED> instruction: 0x06000013
     98c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     990:	0b381349 	bleq	e056bc <__ccfg+0xde5714>
     994:	00000c34 	andeq	r0, r0, r4, lsr ip
}
     998:	0b000f07 	bleq	45bc <patchGenfskRfe+0x10>
     99c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     9a0:	13490026 	movtne	r0, #36902	; 0x9026
     9a4:	35090000 	strcc	r0, [r9, #-0]
void __pinlist_setirq (int val) {
     9a8:	00134900 	andseq	r4, r3, r0, lsl #18
	for (i = 0; i < N_PINLIST; i++) {
     9ac:	000f0a00 	andeq	r0, pc, r0, lsl #20
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	130b0000 	movwne	r0, #45056	; 0xb000
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	3a0b0b01 	bcc	2c35c4 <__ccfg+0x2a361c>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9c0:	0013010b 	andseq	r0, r3, fp, lsl #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c4:	000d0c00 	andeq	r0, sp, r0, lsl #24
     9c8:	0b3a0e03 	bleq	e841dc <__ccfg+0xe64234>
     9cc:	0b390b3b 	bleq	e436c0 <__ccfg+0xe23718>
	for (i = 0; i < N_PINLIST; i++) {
     9d0:	0b0b1349 	bleq	2c56fc <__ccfg+0x2a5754>
}
     9d4:	0b0c0b0d 	bleq	303610 <__ccfg+0x2e3668>
     9d8:	00000b38 	andeq	r0, r0, r8, lsr fp
     9dc:	03000d0d 	movweq	r0, #3341	; 0xd0d
     9e0:	3b0b3a0e 	blcc	2cf220 <__ccfg+0x2af278>
void GPIOIntHandler () {
     9e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
if (buttons_int) {
     9e8:	000b3813 	andeq	r3, fp, r3, lsl r8
     9ec:	00340e00 	eorseq	r0, r4, r0, lsl #28
	buttons_disable ();
     9f0:	0b3a0e03 	bleq	e84204 <__ccfg+0xe6425c>
     9f4:	0b390b3b 	bleq	e436e8 <__ccfg+0xe23740>
	i_trigger ((aword)&__button_list);
     9f8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 8dc <UART0IntHandler+0x38>
     9fc:	00000c3c 	andeq	r0, r0, ip, lsr ip
     a00:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     a04:	00130113 	andseq	r0, r3, r3, lsl r1
     a08:	00211000 	eoreq	r1, r1, r0
     a0c:	16110000 	ldrne	r0, [r1], -r0
     a10:	3a0e0300 	bcc	381618 <__ccfg+0x361670>
     a14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a18:	0013490b 	andseq	r4, r3, fp, lsl #18
     a1c:	01151200 	tsteq	r5, r0, lsl #4
     a20:	13010c27 	movwne	r0, #7207	; 0x1c27
	RISE_N_SHINE;
     a24:	05130000 	ldreq	r0, [r3, #-0]
     a28:	00134900 	andseq	r4, r3, r0, lsl #18
     a2c:	00341400 	eorseq	r1, r4, r0, lsl #8
if (pin_sensor_int) {
     a30:	0b3a0e03 	bleq	e84244 <__ccfg+0xe6429c>
     a34:	0b39053b 	bleq	e41f28 <__ccfg+0xe21f80>
	i_trigger ((aword)(&__input_pins));
     a38:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 91c <UART0IntHandler+0x78>
     a3c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     a40:	0b011315 	bleq	4569c <__ccfg+0x256f4>
     a44:	3b0b3a0b 	blcc	2cf278 <__ccfg+0x2af2d0>
     a48:	010b3905 	tsteq	fp, r5, lsl #18
     a4c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     a50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a58:	13490b39 	movtne	r0, #39737	; 0x9b39
     a5c:	00000b38 	andeq	r0, r0, r8, lsr fp
     a60:	03011317 	movweq	r1, #4887	; 0x1317
	__pinsen_disable_and_clear;
     a64:	3a0b0b0e 	bcc	2c36a4 <__ccfg+0x2a36fc>
	RISE_N_SHINE;
     a68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a6c:	0013010b 	andseq	r0, r3, fp, lsl #2
     a70:	00211800 	eoreq	r1, r1, r0, lsl #16
}
     a74:	0b2f1349 	bleq	bc57a0 <__ccfg+0xba57f8>
     a78:	15190000 	ldrne	r0, [r9, #-0]
     a7c:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     a80:	00130113 	andseq	r0, r3, r3, lsl r1
     a84:	00341a00 	eorseq	r1, r4, r0, lsl #20
void system_init () {
     a88:	0b3a1347 	bleq	e857ac <__ccfg+0xe65804>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	0b390b3b 	bleq	e43780 <__ccfg+0xe237d8>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a90:	00000a02 	andeq	r0, r0, r2, lsl #20
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a94:	0300341b 	movweq	r3, #1051	; 0x41b
     a98:	3b0b3a0e 	blcc	2cf2d8 <__ccfg+0x2af330>
     a9c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     aa4:	1c00000a 	stcne	0, cr0, [r0], {10}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     aac:	0b3b0b3a 	bleq	ec379c <__ccfg+0xea37f4>
     ab0:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	00000a02 	andeq	r0, r0, r2, lsl #20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	0300341d 	movweq	r3, #1053	; 0x41d
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     abc:	3b0b3a0e 	blcc	2cf2fc <__ccfg+0x2af354>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ac0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	000a0213 	andeq	r0, sl, r3, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac8:	002e1e00 	eoreq	r1, lr, r0, lsl #28
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ad0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		pin = (port_confs [i] >> 19) & 0x1f;
     ad4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	01111349 	tsteq	r1, r9, asr #6
     adc:	0a400112 	beq	1000f2c <__ccfg+0xfe0f84>
     ae0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     ae4:	030c3f01 	movweq	r3, #52993	; 0xcf01
		if (port_confs [i] & 0x80)
     ae8:	3b0b3a0e 	blcc	2cf328 <__ccfg+0x2af380>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aec:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     af0:	1201110c 	andne	r1, r1, #12, 2
		if (port_confs [i] & 0x40)
     af4:	010a4001 	tsteq	sl, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	20000013 	andcs	r0, r0, r3, lsl r0
     afc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b04:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b08:	00000602 	andeq	r0, r0, r2, lsl #12
	all_leds_blink;
     b0c:	00001821 	andeq	r1, r0, r1, lsr #16
     b10:	00342200 	eorseq	r2, r4, r0, lsl #4
     b14:	0b3a0803 	bleq	e82b28 <__ccfg+0xe62b80>
     b18:	0b39053b 	bleq	e4200c <__ccfg+0xe22064>
     b1c:	06021349 	streq	r1, [r2], -r9, asr #6
     b20:	34230000 	strtcc	r0, [r3], #-0
     b24:	3a080300 	bcc	20172c <__ccfg+0x1e1784>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b30:	2400000a 	strcs	r0, [r0], #-10
     b34:	08030034 	stmdaeq	r3, {r2, r4, r5}
     b38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	13490b39 	movtne	r0, #39737	; 0x9b39
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	0a250000 	beq	940b48 <__ccfg+0x920ba0>
     b44:	3a0e0300 	bcc	38174c <__ccfg+0x3617a4>
	IntEnable (INT_AON_RTC_COMB);
     b48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b4c:	0001110b 	andeq	r1, r1, fp, lsl #2
     b50:	010b2600 	tsteq	fp, r0, lsl #12
	__pi_malloc_init ();
     b54:	01120111 	tsteq	r2, r1, lsl r1
	IntEnable (INT_AON_GPIO_EDGE);
     b58:	00001301 	andeq	r1, r0, r1, lsl #6
     b5c:	55010b27 	strpl	r0, [r1, #-2855]	; 0xfffff4d9
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b60:	00130106 	andseq	r0, r3, r6, lsl #2
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	011d2800 	tsteq	sp, r0, lsl #16
     b68:	01521331 	cmpeq	r2, r1, lsr r3
     b6c:	0b580655 	bleq	16024c8 <__ccfg+0x15e2520>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b70:	0b570559 	bleq	15c20dc <__ccfg+0x15a2134>
     b74:	05290000 	streq	r0, [r9, #-0]!
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	00133100 	andseq	r3, r3, r0, lsl #2
     b7c:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
     b80:	0b3a0e03 	bleq	e84394 <__ccfg+0xe643ec>
	urates [0] = UART_RATE / 100;
     b84:	0b39053b 	bleq	e42078 <__ccfg+0xe220d0>
     b88:	01110c27 	tsteq	r1, r7, lsr #24
	reinit_uart ();
     b8c:	0a400112 	beq	1000fdc <__ccfg+0xfe1034>
	EXTRA_INITIALIZERS;
     b90:	00001301 	andeq	r1, r0, r1, lsl #6
     b94:	0300052b 	movweq	r0, #1323	; 0x52b
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	3b0b3a08 	blcc	2cf3c0 <__ccfg+0x2af418>
     b9c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ba0:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba4:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     ba8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bb0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			devinit [i] . init (devinit [i] . param);
     bb4:	01111349 	tsteq	r1, r9, asr #6
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	0a400112 	beq	1001008 <__ccfg+0xfe1060>
     bbc:	00001301 	andeq	r1, r0, r1, lsl #6
     bc0:	0300342d 	movweq	r3, #1069	; 0x42d
	IntEnable (INT_UART0_COMB);
     bc4:	3b0b3a0e 	blcc	2cf404 <__ccfg+0x2af45c>
     bc8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
     bcc:	00060213 	andeq	r0, r6, r3, lsl r2
	tci_run_auxiliary_timer ();
     bd0:	012e2e00 			; <UNDEFINED> instruction: 0x012e2e00
		diag ("");
     bd4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bdc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     be0:	13010b20 	movwne	r0, #6944	; 0x1b20
		diag ("Leftover RAM: %d bytes",
     be4:	052f0000 	streq	r0, [pc, #-0]!	; bec <system_init+0x164>
     be8:	3a080300 	bcc	2017f0 <__ccfg+0x1e1848>
     bec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bf0:	0013490b 	andseq	r4, r3, fp, lsl #18
     bf4:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
     bf8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c00:	01110b39 	tsteq	r1, r9, lsr fp
     c04:	0a400112 	beq	1001054 <__ccfg+0xfe10ac>
     c08:	00001301 	andeq	r1, r0, r1, lsl #6
     c0c:	3f012e31 	svccc	0x00012e31
     c10:	3a08030c 	bcc	201848 <__ccfg+0x1e18a0>
     c14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c18:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     c1c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     c20:	010a4001 	tsteq	sl, r1
     c24:	32000013 	andcc	r0, r0, #19
     c28:	08030005 	stmdaeq	r3, {r0, r2}
     c2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c30:	13490b39 	movtne	r0, #39737	; 0x9b39
     c34:	00000a02 	andeq	r0, r0, r2, lsl #20
     c38:	3f002e33 	svccc	0x00002e33
     c3c:	3a0e030c 	bcc	381874 <__ccfg+0x3618cc>
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     c44:	110c270b 	tstne	ip, fp, lsl #14
     c48:	40011201 	andmi	r1, r1, r1, lsl #4
     c4c:	3400000a 	strcc	r0, [r0], #-10
     c50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     c58:	13490b39 	movtne	r0, #39737	; 0x9b39
     c5c:	00000a02 	andeq	r0, r0, r2, lsl #20
}
     c60:	03000535 	movweq	r0, #1333	; 0x535
__attribute__ ((noreturn)) void __pi_release () {
     c64:	3b0b3a0e 	blcc	2cf4a4 <__ccfg+0x2af4fc>
     c68:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     c6c:	36000013 			; <UNDEFINED> instruction: 0x36000013
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c70:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	check_stack_overflow;
     c74:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     c78:	030c3f01 	movweq	r3, #52993	; 0xcf01
     c7c:	3b0b3a0e 	blcc	2cf4bc <__ccfg+0x2af514>
	update_n_wake (MAX_WORD, NO);
     c80:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c84:	010b200c 	tsteq	fp, ip
     c88:	38000013 	stmdacc	r0, {r0, r1, r4}
	for_all_tasks (__pi_curr) {
     c8c:	08030005 	stmdaeq	r3, {r0, r2}
     c90:	0b3b0b3a 	bleq	ec3980 <__ccfg+0xea39d8>
     c94:	13490b39 	movtne	r0, #39737	; 0x9b39
  __ASM volatile ("cpsid i" : : : "memory");
     c98:	05390000 	ldreq	r0, [r9, #-0]!
	__SLEEP;
     c9c:	3a0e0300 	bcc	3818a4 <__ccfg+0x3618fc>
     ca0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ca4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ca8:	00343a00 	eorseq	r3, r4, r0, lsl #20
	system_event_count ++;
     cac:	0b3a0803 	bleq	e82cc0 <__ccfg+0xe62d18>
     cb0:	0b390b3b 	bleq	e439a4 <__ccfg+0xe239fc>
	switch (__pi_systat.effpdm) {
     cb4:	00001349 	andeq	r1, r0, r9, asr #6
     cb8:	03000a3b 	movweq	r0, #2619	; 0xa3b
     cbc:	3b0b3a08 	blcc	2cf4e4 <__ccfg+0x2af53c>
     cc0:	000b3905 	andeq	r3, fp, r5, lsl #18
			__WFI ();
     cc4:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
     cc8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     ccc:	0b3b0b3a 	bleq	ec39bc <__ccfg+0xea3a14>
	check_stack_overflow;
     cd0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     cd4:	01120111 	tsteq	r2, r1, lsl r1
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	13010a40 	movwne	r0, #6720	; 0x1a40
     cdc:	053d0000 	ldreq	r0, [sp, #-0]!
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	3a080300 	bcc	2018e8 <__ccfg+0x1e1940>
			goto Redo;
     ce4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (__pi_curr) {
     ce8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cec:	3e000006 	cdpcc	0, 0, cr0, cr0, cr6, {0}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cf0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     cf4:	0b3b0b3a 	bleq	ec39e4 <__ccfg+0xea3a3c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	13490b39 	movtne	r0, #39737	; 0x9b39
     cfc:	00000602 	andeq	r0, r0, r2, lsl #12
     d00:	3f002e3f 	svccc	0x00002e3f
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d04:	3a0e030c 	bcc	38193c <__ccfg+0x361994>
     d08:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	110c270b 	tstne	ip, fp, lsl #14
     d10:	40011201 	andmi	r1, r1, r1, lsl #4
			__WFI ();
     d14:	4000000a 	andmi	r0, r0, sl
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d18:	0e03012e 	adfeqsp	f0, f3, #0.5
     d1c:	0b3b0b3a 	bleq	ec3a0c <__ccfg+0xea3a64>
}
     d20:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d24:	0b201349 	bleq	805a50 <__ccfg+0x7e5aa8>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d28:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2c:	03012e41 	movweq	r2, #7745	; 0x1e41
     d30:	3b0b3a0e 	blcc	2cf570 <__ccfg+0x2af5c8>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d34:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     d38:	2013490c 	andscs	r4, r3, ip, lsl #18
     d3c:	0013010b 	andseq	r0, r3, fp, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d40:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d44:	01111331 	tsteq	r1, r1, lsr r3
     d48:	0a400112 	beq	1001198 <__ccfg+0xfe11f0>
     d4c:	00001301 	andeq	r1, r0, r1, lsl #6
     d50:	31000543 	tstcc	r0, r3, asr #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	00060213 	andeq	r0, r6, r3, lsl r2
     d58:	00344400 	eorseq	r4, r4, r0, lsl #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d5c:	06021331 			; <UNDEFINED> instruction: 0x06021331
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d60:	1d450000 	stclne	0, cr0, [r5, #-0]
     d64:	11133101 	tstne	r3, r1, lsl #2
     d68:	58011201 	stmdapl	r1, {r0, r9, ip}
     d6c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     d70:	4600000b 	strmi	r0, [r0], -fp
			SysCtrlSetRechargeBeforePowerDown
     d74:	13310034 	teqne	r1, #52	; 0x34
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d78:	1d470000 	stclne	0, cr0, [r7, #-0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     d80:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     d88:	4800000b 	stmdami	r0, {r0, r1, r3}
     d8c:	1331000a 	teqne	r1, #10
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d90:	00000111 	andeq	r0, r0, r1, lsl r1
     d94:	31011d49 	tstcc	r1, r9, asr #26
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d98:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d9c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     da0:	000b5705 	andeq	r5, fp, r5, lsl #14
     da4:	012e4a00 			; <UNDEFINED> instruction: 0x012e4a00
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da8:	01111331 	tsteq	r1, r1, lsr r3
			while (!(AONWUCPowerStatusGet () &
     dac:	0a400112 	beq	10011fc <__ccfg+0xfe1254>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db0:	01000000 	mrseq	r0, (UNDEF: 0)
     db4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     db8:	0e030b13 	vmoveq.32	d3[0], r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dbc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     dc0:	06100111 			; <UNDEFINED> instruction: 0x06100111
     dc4:	24020000 	strcs	r0, [r2], #-0
     dc8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	000e030b 	andeq	r0, lr, fp, lsl #6
     dd0:	00160300 	andseq	r0, r6, r0, lsl #6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	0b3a0e03 	bleq	e845e8 <__ccfg+0xe64640>
     dd8:	0b390b3b 	bleq	e43acc <__ccfg+0xe23b24>
			SysCtrlAdjustRechargeAfterPowerDown ();
     ddc:	00001349 	andeq	r1, r0, r9, asr #6
			reinit_uart ();
     de0:	0b002404 	bleq	9df8 <__exidx_end+0x4ec8>
     de4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     de8:	05000008 	streq	r0, [r0, #-8]
}
     dec:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     df0:	0b3a0b0b 	bleq	e83a24 <__ccfg+0xe63a7c>
     df4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	0d060000 	stceq	0, cr0, [r6, #-0]
     dfc:	490e0300 	stmdbmi	lr, {r8, r9}
     e00:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	0700000c 	streq	r0, [r0, -ip]
     e08:	0b0b000f 	bleq	2c0e4c <__ccfg+0x2a0ea4>
     e0c:	26080000 	strcs	r0, [r8], -r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e10:	00134900 	andseq	r4, r3, r0, lsl #18
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	00350900 	eorseq	r0, r5, r0, lsl #18
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e18:	00001349 	andeq	r1, r0, r9, asr #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e1c:	0b000f0a 	bleq	4a4c <patchGenfskRfe+0x4a0>
     e20:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e24:	01130b00 	tsteq	r3, r0, lsl #22
     e28:	0b3a0b0b 	bleq	e83a5c <__ccfg+0xe63ab4>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2c:	0b390b3b 	bleq	e43b20 <__ccfg+0xe23b78>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e30:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e34:	03000d0c 	movweq	r0, #3340	; 0xd0c
     e38:	3b0b3a0e 	blcc	2cf678 <__ccfg+0x2af6d0>
			PRCMPowerDomainOff (
     e3c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e40:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
	__SLEEP;
     e44:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     e48:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
  __ASM volatile ("cpsie i" : : : "memory");
     e4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	goto Redo;
     e50:	0b3b0b3a 	bleq	ec3b40 <__ccfg+0xea3b98>
     e54:	13490b39 	movtne	r0, #39737	; 0x9b39
     e58:	00000b38 	andeq	r0, r0, r8, lsr fp
     e5c:	0300340e 	movweq	r3, #1038	; 0x40e
     e60:	3b0b3a0e 	blcc	2cf6a0 <__ccfg+0x2af6f8>
     e64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e68:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     e6c:	0f00000c 	svceq	0x0000000c
     e70:	13490101 	movtne	r0, #37121	; 0x9101
     e74:	00001301 	andeq	r1, r0, r1, lsl #6
     e78:	00002110 	andeq	r2, r0, r0, lsl r1
     e7c:	00161100 	andseq	r1, r6, r0, lsl #2
     e80:	0b3a0e03 	bleq	e84694 <__ccfg+0xe646ec>
     e84:	0b39053b 	bleq	e42378 <__ccfg+0xe223d0>
     e88:	00001349 	andeq	r1, r0, r9, asr #6
     e8c:	27011512 	smladcs	r1, r2, r5, r1
     e90:	0013010c 	andseq	r0, r3, ip, lsl #2
     e94:	00051300 	andeq	r1, r5, r0, lsl #6
     e98:	00001349 	andeq	r1, r0, r9, asr #6
     e9c:	03003414 	movweq	r3, #1044	; 0x414
     ea0:	3b0b3a0e 	blcc	2cf6e0 <__ccfg+0x2af738>
     ea4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ea8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     eac:	1500000c 	strne	r0, [r0, #-12]
     eb0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     eb4:	13011349 	movwne	r1, #4937	; 0x1349
     eb8:	13160000 	tstne	r6, #0
	cli_tim;
     ebc:	0b0e0301 	bleq	381ac8 <__ccfg+0x361b20>
     ec0:	3b0b3a0b 	blcc	2cf6f4 <__ccfg+0x2af74c>
     ec4:	010b390b 	tsteq	fp, fp, lsl #18
	diag ("PicOS halted");
     ec8:	17000013 	smladne	r0, r3, r0, r0
	mdelay (500);
     ecc:	0b0b0117 	bleq	2c1330 <__ccfg+0x2a1388>
     ed0:	0b3b0b3a 	bleq	ec3bc0 <__ccfg+0xea3c18>
	setpowermode (2);
     ed4:	13010b39 	movwne	r0, #6969	; 0x1b39
	__PCB = NULL;
     ed8:	0d180000 	ldceq	0, cr0, [r8, #-0]
	release;
     edc:	3a0e0300 	bcc	381ae4 <__ccfg+0x361b3c>
     ee0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ee4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ee8:	000d1900 	andeq	r1, sp, r0, lsl #18
int main (void) {
     eec:	0b3a0803 	bleq	e82f00 <__ccfg+0xe62f58>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	0b390b3b 	bleq	e43be4 <__ccfg+0xe23c3c>
     ef4:	00001349 	andeq	r1, r0, r9, asr #6
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef8:	03000d1a 	movweq	r0, #3354	; 0xd1a
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efc:	3b0b3a08 	blcc	2cf724 <__ccfg+0x2af77c>
	system_init ();
     f00:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	tcv_init ();
     f04:	000b3813 	andeq	r3, fp, r3, lsl r8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f08:	01131b00 	tsteq	r3, r0, lsl #22
     f0c:	0b3a0b0b 	bleq	e83b40 <__ccfg+0xe63b98>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	0b39053b 	bleq	e42404 <__ccfg+0xe2245c>
     f14:	00001301 	andeq	r1, r0, r1, lsl #6
     f18:	03000d1c 	movweq	r0, #3356	; 0xd1c
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f1c:	3b0b3a0e 	blcc	2cf75c <__ccfg+0x2af7b4>
     f20:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	delay (16, 0);
     f24:	000b3813 	andeq	r3, fp, r3, lsl r8
     f28:	01131d00 	tsteq	r3, r0, lsl #26
     f2c:	0b0b0e03 	bleq	2c4740 <__ccfg+0x2a4798>
	__pi_release ();
     f30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f34:	13010b39 	movwne	r0, #6969	; 0x1b39
     f38:	211e0000 	tstcs	lr, r0
     f3c:	2f134900 	svccs	0x00134900
     f40:	1f00000b 	svcne	0x0000000b
     f44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f48:	0b3b0b3a 	bleq	ec3c38 <__ccfg+0xea3c90>
static void killev (__pi_pcb_t *pid) {
     f4c:	13490b39 	movtne	r0, #39737	; 0x9b39
	wfun = (aword)(pid->code);
     f50:	00000a02 	andeq	r0, r0, r2, lsl #20
	for_all_tasks (i) {
     f54:	3f002e20 	svccc	0x00002e20
		for (j = 0; j < nevents (i); j++) {
     f58:	3a0e030c 	bcc	381b90 <__ccfg+0x361be8>
     f5c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f60:	110c270b 	tstne	ip, fp, lsl #14
			    || i->Events [j] . Event == wfun
     f64:	40011201 	andmi	r1, r1, r1, lsl #4
		for (j = 0; j < nevents (i); j++) {
     f68:	2100000a 	tstcs	r0, sl
			if (i->Events [j] . Event == (aword)pid
     f6c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; ebc <halt>
     f70:	0b3a0e03 	bleq	e84784 <__ccfg+0xe647dc>
     f74:	0b39053b 	bleq	e42468 <__ccfg+0xe224c0>
				wakeupev (i, j);
     f78:	13490c27 	movtne	r0, #39975	; 0x9c27
     f7c:	01120111 	tsteq	r2, r1, lsl r1
	for_all_tasks (i) {
     f80:	13010a40 	movwne	r0, #6720	; 0x1a40
}
     f84:	05220000 	streq	r0, [r2, #-0]!
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	3a080300 	bcc	201b90 <__ccfg+0x1e1be8>
static void qfree (aword *ch) {
     f8c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	cc = (aword*)(mpools + MA_NP);
     f94:	23000006 	movwcs	r0, #6
	m_setnextp (ch, chunk);
     f98:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	m_setnextp (cc, ch);
     f9c:	06550152 			; <UNDEFINED> instruction: 0x06550152
}
     fa0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa4:	00000b57 	andeq	r0, r0, r7, asr fp
     fa8:	31000524 	tstcc	r0, r4, lsr #10
     fac:	00060213 	andeq	r0, r6, r3, lsl r2
			m_setnextp (cc, m_nextp (chunk));
     fb0:	010b2500 	tsteq	fp, r0, lsl #10
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb4:	00000655 	andeq	r0, r0, r5, asr r6
     fb8:	31003426 	tstcc	r0, r6, lsr #8
     fbc:	00060213 	andeq	r0, r6, r3, lsl r2
     fc0:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fcc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     fd0:	01120111 	tsteq	r2, r1, lsl r1
			m_setnextp (cc, m_nextp (chunk));
     fd4:	13010a40 	movwne	r0, #6720	; 0x1a40
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	34280000 	strtcc	r0, [r8], #-0
     fdc:	3a080300 	bcc	201be4 <__ccfg+0x1e1c3c>
     fe0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     fe4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     fe8:	29000006 	stmdbcs	r0, {r1, r2}
     fec:	08030034 	stmdaeq	r3, {r2, r4, r5}
			if (m_size (chunk) >= m_size (ch))
     ff0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ff4:	13490b39 	movtne	r0, #39737	; 0x9b39
     ff8:	342a0000 	strtcc	r0, [sl], #-0
		chunk = m_nextp (chunk))
     ffc:	3a080300 	bcc	201c04 <__ccfg+0x1e1c5c>
    1000:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1004:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	2b00000a 	blcs	1038 <utimer_add+0x8>
	diag_wait (a);
    100c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	diag_wchar (c, a);
    1010:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1014:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1018:	00000602 	andeq	r0, r0, r2, lsl #12
    101c:	3f012e2c 	svccc	0x00012e2c
	syserror (ESTATE, "state");
    1020:	3a0e030c 	bcc	381c58 <__ccfg+0x361cb0>
    1024:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1028:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    102c:	010b2013 	tsteq	fp, r3, lsl r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
void utimer_add (address ut) {
    1034:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1038:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (__pi_utims [i] == NULL)
    103c:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	052e0000 	streq	r0, [lr, #-0]!
    1044:	3a080300 	bcc	201c4c <__ccfg+0x1e1ca4>
		syserror (ERESOURCE, "ut a");
    1048:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_utims [i] = ut;
    104c:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    1050:	010b2f00 	tsteq	fp, r0, lsl #30
    1054:	01120111 	tsteq	r2, r1, lsl r1
    1058:	34300000 	ldrtcc	r0, [r0], #-0
	*t = v;
    105c:	3a0e0300 	bcc	381c64 <__ccfg+0x361cbc>
	TCI_RUN_AUXILIARY_TIMER;
    1060:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
void update_n_wake (word min, Boolean force) {
    1064:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	3100000a 	tstcc	r0, sl
    106c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    1070:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1074:	01110b39 	tsteq	r1, r9, lsr fp
    1078:	1d320000 	ldcne	0, cr0, [r2, #-0]
    107c:	11133101 	tstne	r3, r1, lsl #2
    1080:	58011201 	stmdapl	r1, {r0, r9, ip}
    1084:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1088:	3300000b 	movwcc	r0, #11
    108c:	13310005 	teqne	r1, #5
    1090:	05340000 	ldreq	r0, [r4, #-0]!
    1094:	3a080300 	bcc	201c9c <__ccfg+0x1e1cf4>
    1098:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    109c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10a0:	3500000a 	strcc	r0, [r0, #-10]
    10a4:	00000018 	andeq	r0, r0, r8, lsl r0
		for_all_tasks (i) {
    10a8:	03003436 	movweq	r3, #1078	; 0x436
	__pi_mintk = znew + min;
    10ac:	3b0b3a0e 	blcc	2cf8ec <__ccfg+0x2af944>
    10b0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (!twaiting (i))
    10b4:	37000013 	smladcc	r0, r3, r0, r0
    10b8:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    10c0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    10c4:	01111349 	tsteq	r1, r9, asr #6
    10c8:	0a400112 	beq	1001518 <__ccfg+0xfe1570>
    10cc:	00001301 	andeq	r1, r0, r1, lsl #6
    10d0:	03012e38 	movweq	r2, #7736	; 0x1e38
    10d4:	3b0b3a08 	blcc	2cf8fc <__ccfg+0x2af954>
    10d8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    10dc:	1201110c 	andne	r1, r1, #12, 2
    10e0:	010a4001 	tsteq	sl, r1
    10e4:	39000013 	stmdbcc	r0, {r0, r1, r4}
    10e8:	0e03012e 	adfeqsp	f0, f3, #0.5
				wakeuptm (i);
    10ec:	0b3b0b3a 	bleq	ec3ddc <__ccfg+0xea3e34>
    10f0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		for_all_tasks (i) {
    10f4:	13010b20 	movwne	r0, #6944	; 0x1b20
				d = i->Timer - znew;
    10f8:	053a0000 	ldreq	r0, [sl, #-0]!
    10fc:	3a080300 	bcc	201d04 <__ccfg+0x1e1d5c>
    1100:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((word)(__pi_mintk - znew) < min) 
    1104:	0013490b 	andseq	r4, r3, fp, lsl #18
    1108:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
    110c:	0b3a0e03 	bleq	e84920 <__ccfg+0xe64978>
	__pi_old = znew;
    1110:	0b390b3b 	bleq	e43e04 <__ccfg+0xe23e5c>
}
    1114:	13490c27 	movtne	r0, #39975	; 0x9c27
	TCI_RUN_DELAY_TIMER;
    1118:	13010b20 	movwne	r0, #6944	; 0x1b20
}
    111c:	343c0000 	ldrtcc	r0, [ip], #-0
    1120:	3a080300 	bcc	201d28 <__ccfg+0x1e1d80>
    1124:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1128:	0013490b 	andseq	r4, r3, fp, lsl #18
    112c:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
void proceed (word state) {
    1130:	0b3a0803 	bleq	e83144 <__ccfg+0xe6319c>
	prcdstate (__pi_curr, state);
    1134:	0b390b3b 	bleq	e43e28 <__ccfg+0xe23e80>
    1138:	0b200c27 	bleq	8041dc <__ccfg+0x7e4234>
	release;
    113c:	00001301 	andeq	r1, r0, r1, lsl #6
    1140:	31012e3e 	tstcc	r1, lr, lsr lr
void __pi_wait (aword event, word state) {
    1144:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	sint j = nevents (__pi_curr);
    1148:	010a4001 	tsteq	sl, r1
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	3f000013 	svccc	0x00000013
    1150:	13310005 	teqne	r1, #5
    1154:	00000a02 	andeq	r0, r0, r2, lsl #20
		syserror (ENEVENTS, "sw");
    1158:	31011d40 	tstcc	r1, r0, asr #26
    115c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	setestate (__pi_curr->Events [j], state, event);
    1160:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	incwait (__pi_curr);
    1164:	000b570b 	andeq	r5, fp, fp, lsl #14
	setestate (__pi_curr->Events [j], state, event);
    1168:	011d4100 	tsteq	sp, r0, lsl #2
}
    116c:	01521331 	cmpeq	r2, r1, lsr r3
    1170:	0b580655 	bleq	1602acc <__ccfg+0x15e2b24>
    1174:	0b570b59 	bleq	15c3ee0 <__ccfg+0x15a3f38>
void __pi_trigger (aword event) {
    1178:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
	for_all_tasks (i) {
    117c:	11133101 	tstne	r3, r1, lsl #2
		for (j = 0; j < nevents (i); j++) {
    1180:	40011201 	andmi	r1, r1, r1, lsl #4
    1184:	4300000a 	movwmi	r0, #10
    1188:	13310034 	teqne	r1, #52	; 0x34
    118c:	01000000 	mrseq	r0, (UNDEF: 0)
			if (i->Events [j] . Event == event) {
    1190:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1194:	0e030b13 	vmoveq.32	d3[0], r0
    1198:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
				wakeupev (i, j);
    119c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    11a0:	24020000 	strcs	r0, [r2], #-0
	for_all_tasks (i) {
    11a4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
}
    11a8:	000e030b 	andeq	r0, lr, fp, lsl #6
aword __pi_join (aword pid, word st) {
    11ac:	00160300 	andseq	r0, r6, r0, lsl #6
	for_all_tasks (i) {
    11b0:	0b3a0e03 	bleq	e849c4 <__ccfg+0xe64a1c>
    11b4:	0b390b3b 	bleq	e43ea8 <__ccfg+0xe23f00>
	return 0;
    11b8:	00001349 	andeq	r1, r0, r9, asr #6
		if ((aword)i == pid) {
    11bc:	0b002404 	bleq	a1d4 <__exidx_end+0x52a4>
			__pi_wait (pid, st);
    11c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
}
    11c4:	05000008 	streq	r0, [r0, #-8]
	for_all_tasks (i) {
    11c8:	0b0b000f 	bleq	2c120c <__ccfg+0x2a1264>
    11cc:	00001349 	andeq	r1, r0, r9, asr #6
void delay (word d, word state) {
    11d0:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
	settstate (__pi_curr, state);
    11d4:	07000013 	smladeq	r0, r3, r0, r0
    11d8:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
    11dc:	34080000 	strcc	r0, [r8], #-0
    11e0:	3a0e0300 	bcc	381de8 <__ccfg+0x361e40>
	update_n_wake (d, YES);
    11e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11e8:	3f13490b 	svccc	0x0013490b
	__pi_curr->Timer = __pi_old + d;
    11ec:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    11f0:	01010900 	tsteq	r1, r0, lsl #18
	inctimer (__pi_curr);
    11f4:	13011349 	movwne	r1, #4937	; 0x1349
    11f8:	210a0000 	mrscs	r0, (UNDEF: 10)
    11fc:	2f134900 	svccs	0x00134900
}
    1200:	0b00000b 	bleq	1234 <__pi_strlen+0x8>
    1204:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	if (fun == NULL)
    1208:	0b3b0b3a 	bleq	ec3ef8 <__ccfg+0xea3f50>
		return (int) __pi_curr;
    120c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1210:	0a020c3f 	beq	84314 <__ccfg+0x6436c>
	for_all_tasks (i)
    1214:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
}
    1218:	3a0e0300 	bcc	381e20 <__ccfg+0x361e78>
		if (i->code == fun)
    121c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	for_all_tasks (i)
    1220:	110c270b 	tstne	ip, fp, lsl #14
    1224:	40011201 	andmi	r1, r1, r1, lsl #4
    1228:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
int __pi_strlen (const char *s) {
    122c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 117c <__pi_trigger+0x4>
	for (i = 0; *(s+i) != '\0'; i++);
    1230:	0b3a0e03 	bleq	e84a44 <__ccfg+0xe64a9c>
}
    1234:	0b390b3b 	bleq	e43f28 <__ccfg+0xe23f80>
	for (i = 0; *(s+i) != '\0'; i++);
    1238:	01110c27 	tsteq	r1, r7, lsr #24
	while (n--)
    123c:	0a400112 	beq	100168c <__ccfg+0xfe16e4>
    1240:	340e0000 	strcc	r0, [lr], #-0
		*dest++ = *src++;
    1244:	3a0e0300 	bcc	381e4c <__ccfg+0x361ea4>
    1248:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    124c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	while (n--)
    1250:	00000006 	andeq	r0, r0, r6
}
    1254:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
		*dest++ = c;
    1258:	030b130e 	movweq	r1, #45838	; 0xb30e
void adddevfunc (devreqfun_t rf, int loc) {
    125c:	100e1b0e 	andne	r1, lr, lr, lsl #22
		syserror (EREQPAR, "addv");
    1260:	02000006 	andeq	r0, r0, #6
		syserror (ERESOURCE, "addv");
    1264:	0b0b0024 	bleq	2c12fc <__ccfg+0x2a1354>
	if (ioreq [loc] != NULL)
    1268:	0e030b3e 	vmoveq.16	d3[0], r0
    126c:	16030000 	strne	r0, [r3], -r0
		syserror (ERESOURCE, "addv");
    1270:	3a0e0300 	bcc	381e78 <__ccfg+0x361ed0>
	ioreq [loc] = rf;
    1274:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1278:	0013490b 	andseq	r4, r3, fp, lsl #18
    127c:	00240400 	eoreq	r0, r4, r0, lsl #8
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	0b3e0b0b 	bleq	f83eb4 <__ccfg+0xf63f0c>
    1284:	00000803 	andeq	r0, r0, r3, lsl #16
    1288:	0b011305 	bleq	45ea4 <__ccfg+0x25efc>
    128c:	3b0b3a0b 	blcc	2cfac0 <__ccfg+0x2afb18>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1290:	010b390b 	tsteq	fp, fp, lsl #18
    1294:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1298:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		syserror (ENODEVICE, "io");
    129c:	0b3b0b3a 	bleq	ec3f8c <__ccfg+0xea3fe4>
    12a0:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (len == 0)
    12a4:	00000b38 	andeq	r0, r0, r8, lsr fp
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	49002607 	stmdbmi	r0, {r0, r1, r2, r9, sl, sp}
    12ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
	if (ret >= 0)
    12b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	if (ret == -1) {
    12b4:	0b3b0b3a 	bleq	ec3fa4 <__ccfg+0xea3ffc>
    12b8:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (retry == WNONE)
    12bc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		iowait (dev, operation, retry);
    12c0:	35090000 	strcc	r0, [r9, #-0]
    12c4:	00134900 	andseq	r4, r3, r0, lsl #18
    12c8:	000d0a00 	andeq	r0, sp, r0, lsl #20
			release;
    12cc:	0b3a0e03 	bleq	e84ae0 <__ccfg+0xe64b38>
	if (ret == -2) {
    12d0:	0b390b3b 	bleq	e43fc4 <__ccfg+0xe2401c>
		if (retry != WNONE) {
    12d4:	0b0b1349 	bleq	2c6000 <__ccfg+0x2a6058>
    12d8:	0b0c0b0d 	bleq	303f14 <__ccfg+0x2e3f6c>
			iowait (dev, operation, retry);
    12dc:	00000b38 	andeq	r0, r0, r8, lsr fp
    12e0:	0b000f0b 	bleq	4f14 <plug_null+0x4>
			(ioreq [dev]) (NONE, buf, len);
    12e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    12e8:	01010c00 	tsteq	r1, r0, lsl #24
    12ec:	13011349 	movwne	r1, #4937	; 0x1349
		(ioreq [dev]) (NONE, buf, len);
    12f0:	210d0000 	mrscs	r0, (UNDEF: 13)
    12f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    12f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
}
    12fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (retry != WNONE) {
    1300:	13490b39 	movtne	r0, #39737	; 0x9b39
		delay (-ret - 2, retry);
    1304:	150f0000 	strne	r0, [pc, #-0]	; 130c <io+0x8c>
    1308:	010c2701 	tsteq	ip, r1, lsl #14
    130c:	10000013 	andne	r0, r0, r3, lsl r0
    1310:	13490005 	movtne	r0, #36869	; 0x9005
		release;
    1314:	34110000 	ldrcc	r0, [r1], #-0
    1318:	3a0e0300 	bcc	381f20 <__ccfg+0x361f78>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1320:	3f13490b 	svccc	0x0013490b
    1324:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1328:	01131200 	tsteq	r3, r0, lsl #4
    132c:	0b3a0b0b 	bleq	e83f60 <__ccfg+0xe63fb8>
		syserror (ERESOURCE, "mal1");
    1330:	0b39053b 	bleq	e42824 <__ccfg+0xe2287c>
    1334:	00001301 	andeq	r1, r0, r1, lsl #6
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1338:	03000d13 	movweq	r0, #3347	; 0xd13
    133c:	3b0b3a0e 	blcc	2cfb7c <__ccfg+0x2afbd4>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1340:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	m_size (mpools [0]) = mlen - m_hdrlen;
    1344:	000b3813 	andeq	r3, fp, r3, lsl r8
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1348:	01131400 	tsteq	r3, r0, lsl #8
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    134c:	0b0b0e03 	bleq	2c4b60 <__ccfg+0x2a4bb8>
    1350:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
    1354:	13010b39 	movwne	r0, #6969	; 0x1b39
    1358:	21150000 	tstcs	r5, r0
    135c:	2f134900 	svccs	0x00134900
    1360:	1600000b 	strne	r0, [r0], -fp
    1364:	13470034 	movtne	r0, #28724	; 0x7034
    1368:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void __pi_free (aword *ch) {
    136c:	0a020b39 	beq	84058 <__ccfg+0x640b0>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	01000000 	mrseq	r0, (UNDEF: 0)
    1374:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
		syserror (EMALLOC, "malg");
    1378:	0e030b13 	vmoveq.32	d3[0], r0
    137c:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
	mcfree [MA_NP] += m_size (ch);
    1380:	06100111 			; <UNDEFINED> instruction: 0x06100111
		m_size (ch) ^= MALLOC_UMASK;
    1384:	24020000 	strcs	r0, [r2], #-0
    1388:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	mcfree [MA_NP] += m_size (ch);
    138c:	000e030b 	andeq	r0, lr, fp, lsl #6
	QFREE;
    1390:	00160300 	andseq	r0, r6, r0, lsl #6
	if (mevent [MA_NP] . nwait) {
    1394:	0b3a0e03 	bleq	e84ba8 <__ccfg+0xe64c00>
    1398:	0b390b3b 	bleq	e4408c <__ccfg+0xe240e4>
		trigger ((aword)(&(mevent [MA_NP])));
    139c:	00001349 	andeq	r1, r0, r9, asr #6
		mevent [MA_NP] . nwait --;
    13a0:	0b002404 	bleq	a3b8 <__exidx_end+0x5488>
}
    13a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    13a8:	05000008 	streq	r0, [r0, #-8]
    13ac:	13490026 	movtne	r0, #36902	; 0x9026
    13b0:	35060000 	strcc	r0, [r6, #-0]
void kill (aword pid) {
    13b4:	00134900 	andseq	r4, r3, r0, lsl #18
		pid = (aword) __pi_curr;
    13b8:	000f0700 	andeq	r0, pc, r0, lsl #14
	j = NULL;
    13bc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	for_all_tasks (i) {
    13c0:	13080000 	movwne	r0, #32768	; 0x8000
	syserror (EREQPAR, "kpi");
    13c4:	3a0b0b01 	bcc	2c3fd0 <__ccfg+0x2a4028>
    13c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((aword)i == pid) {
    13cc:	0013010b 	andseq	r0, r3, fp, lsl #2
    13d0:	000d0900 	andeq	r0, sp, r0, lsl #18
				__PCB = i->Next;
    13d4:	0b3a0e03 	bleq	e84be8 <__ccfg+0xe64c40>
			killev (i);
    13d8:	0b390b3b 	bleq	e440cc <__ccfg+0xe24124>
			ufree (i);
    13dc:	0b0b1349 	bleq	2c6108 <__ccfg+0x2a6160>
			if (i == __pi_curr)
    13e0:	0b0c0b0d 	bleq	30401c <__ccfg+0x2e4074>
    13e4:	00000b38 	andeq	r0, r0, r8, lsr fp
				release;
    13e8:	03000d0a 	movweq	r0, #3338	; 0xd0a
				j->Next = i->Next;
    13ec:	3b0b3a0e 	blcc	2cfc2c <__ccfg+0x2afc84>
    13f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    13f4:	000b3813 	andeq	r3, fp, r3, lsl r8
}
    13f8:	00340b00 	eorseq	r0, r4, r0, lsl #22
    13fc:	0b3a0e03 	bleq	e84c10 <__ccfg+0xe64c68>
    1400:	0b390b3b 	bleq	e440f4 <__ccfg+0xe2414c>
	if (size < 8)
    1404:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 12e8 <io+0x68>
		_size = 2;
    1408:	00000c3c 	andeq	r0, r0, ip, lsr ip
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    140c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
		_size = (((aword)size) + 3) >> 2;
    1410:	00130113 	andseq	r0, r3, r3, lsl r1
		if (m_magic (chunk) != MALLOC_MAGIC)
    1414:	00210d00 	eoreq	r0, r1, r0, lsl #26
		_size = (((aword)size) + 3) >> 2;
    1418:	160e0000 	strne	r0, [lr], -r0
		if (mevent [MA_NP] . nfail != 255)
    141c:	3a0e0300 	bcc	382024 <__ccfg+0x36207c>
    1420:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			mevent [MA_NP] . nfail ++;
    1424:	0013490b 	andseq	r4, r3, fp, lsl #18
		mnfree [MA_NP] = 0;
    1428:	01150f00 	tsteq	r5, r0, lsl #30
    142c:	13010c27 	movwne	r0, #7207	; 0x1c27
		if (m_magic (chunk) != MALLOC_MAGIC)
    1430:	05100000 	ldreq	r0, [r0, #-0]
    1434:	00134900 	andseq	r4, r3, r0, lsl #18
			syserror (EMALLOC, "malc");
    1438:	00341100 	eorseq	r1, r4, r0, lsl #2
    143c:	0b3a0e03 	bleq	e84c50 <__ccfg+0xe64ca8>
		if (m_size (chunk) >= _size)
    1440:	0b39053b 	bleq	e42934 <__ccfg+0xe2298c>
    1444:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1328 <__pi_malloc_init+0xc>
		chunk = m_nextp (chunk)) {
    1448:	00000c3c 	andeq	r0, r0, ip, lsr ip
		m_setnextp (cc, m_nextp (chunk));
    144c:	0b011312 	bleq	4609c <__ccfg+0x260f4>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1450:	3b0b3a0b 	blcc	2cfc84 <__ccfg+0x2afcdc>
    1454:	010b3905 	tsteq	fp, r5, lsl #18
			m_size (chunk) = _size;
    1458:	13000013 	movwne	r0, #19
			cc = chunk + _size + m_hdrlen;
    145c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1460:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			m_size (cc) = waste - m_hdrlen;
    1464:	13490b39 	movtne	r0, #39737	; 0x9b39
			QFREE;
    1468:	00000b38 	andeq	r0, r0, r8, lsr fp
		mevent [MA_NP] . nfail = 0;
    146c:	03011314 	movweq	r1, #4884	; 0x1314
		mcfree [MA_NP] -= m_size (chunk);
    1470:	3a0b0b0e 	bcc	2c40b0 <__ccfg+0x2a4108>
    1474:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1478:	0013010b 	andseq	r0, r3, fp, lsl #2
    147c:	00211500 	eoreq	r1, r1, r0, lsl #10
		m_size (chunk) |= MALLOC_UMASK;
    1480:	0b2f1349 	bleq	bc61ac <__ccfg+0xba6204>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1484:	34160000 	ldrcc	r0, [r6], #-0
		m_size (chunk) |= MALLOC_UMASK;
    1488:	3a134700 	bcc	4d3090 <__ccfg+0x4b30e8>
			mnfree [MA_NP] = mcfree [MA_NP];
    148c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1490:	000a020b 	andeq	r0, sl, fp, lsl #4
    1494:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
    1498:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    149c:	0b3b0b3a 	bleq	ec418c <__ccfg+0xea41e4>
    14a0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    14a4:	01120111 	tsteq	r2, r1, lsl r1
    14a8:	13010a40 	movwne	r0, #6720	; 0x1a40
aword __pi_fork (fsmcode func, aword data) {
    14ac:	05180000 	ldreq	r0, [r8, #-0]
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	3a080300 	bcc	2020b8 <__ccfg+0x1e2110>
    14b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if ((j = __PCB) == NULL)
    14bc:	19000006 	stmdbne	r0, {r1, r2}
	i->Next = NULL;
    14c0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	i->data = data;
    14c4:	0b3b0b3a 	bleq	ec41b4 <__ccfg+0xea420c>
		if ((j = __PCB) == NULL)
    14c8:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    14cc:	00000602 	andeq	r0, r0, r2, lsl #12
			for (; j->Next != NULL; j = j->Next);
    14d0:	0300341a 	movweq	r3, #1050	; 0x41a
    14d4:	3b0b3a08 	blcc	2cfcfc <__ccfg+0x2afd54>
	return (aword) i;
    14d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    14dc:	1b000013 	blne	1530 <diag+0x38>
	if (mevent [MA_NP] . nwait != 255)
    14e0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    14e4:	0b3b0b3a 	bleq	ec41d4 <__ccfg+0xea422c>
    14e8:	13490b39 	movtne	r0, #39737	; 0x9b39
		mevent [MA_NP] . nwait ++;
    14ec:	00000602 	andeq	r0, r0, r2, lsl #12
	wait ((aword)(&(mevent [MA_NP])), state);
    14f0:	31001d1c 	tstcc	r0, ip, lsl sp
    14f4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
void diag (const char *mess, ...) {
    14f8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    14fc:	000b570b 	andeq	r5, fp, fp, lsl #14
    1500:	011d1d00 	tsteq	sp, r0, lsl #26
	diag_disable_int (a, is);
    1504:	01521331 	cmpeq	r2, r1, lsr r3
    1508:	0b580655 	bleq	1602e64 <__ccfg+0x15e2ebc>
    150c:	0b570b59 	bleq	15c4278 <__ccfg+0x15a42d0>
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	051e0000 	ldreq	r0, [lr, #-0]
	diag_disable_int (a, is);
    1514:	02133100 	andseq	r3, r3, #0, 2
	while (*mess != '\0') {
    1518:	1f000006 	svcne	0x00000006
	dgout ('\r');
    151c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 146c <__pi_malloc+0x68>
	dgout ('\n');
    1520:	0b3a0e03 	bleq	e84d34 <__ccfg+0xe64d8c>
    1524:	0b390b3b 	bleq	e44218 <__ccfg+0xe24270>
    1528:	01120111 	tsteq	r2, r1, lsl r1
	diag_wait (a);
    152c:	00000a40 	andeq	r0, r0, r0, asr #20
	diag_enable_int (a, is);
    1530:	03002e20 	movweq	r2, #3616	; 0xe20
    1534:	3b0b3a0e 	blcc	2cfd74 <__ccfg+0x2afdcc>
}
    1538:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    153c:	000b200c 	andeq	r2, fp, ip
    1540:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
		if (*mess == '%') {
    1544:	0b3a0e03 	bleq	e84d58 <__ccfg+0xe64db0>
    1548:	0b390b3b 	bleq	e4423c <__ccfg+0xe24294>
			if (*mess == 'l') {
    154c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1550:	00000b20 	andeq	r0, r0, r0, lsr #22
				mess++;
    1554:	03000522 	movweq	r0, #1314	; 0x522
				val = va_arg (ap, lword);
    1558:	3b0b3a0e 	blcc	2cfd98 <__ccfg+0x2afdf0>
				bc = 32;
    155c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				bc = 16;
    1560:	00000013 	andeq	r0, r0, r3, lsl r0
			switch (*mess) {
    1564:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1568:	030b130e 	movweq	r1, #45838	; 0xb30e
    156c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				dgout ('%');
    1570:	10011106 	andne	r1, r1, r6, lsl #2
    1574:	02000006 	andeq	r0, r0, #6
				dgout (*mess);
    1578:	0b0b0024 	bleq	2c1610 <__ccfg+0x2a1668>
    157c:	0e030b3e 	vmoveq.16	d3[0], r0
			switch (*mess) {
    1580:	16030000 	strne	r0, [r3], -r0
					v = __pi_hex_enc_table [
    1584:	3a0e0300 	bcc	38218c <__ccfg+0x3621e4>
					i += 4;
    1588:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					(val >> (bc - i)) & 0xf];
    158c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1590:	00240400 	eoreq	r0, r4, r0, lsl #8
					dgout (v);
    1594:	0b3e0b0b 	bleq	f841c8 <__ccfg+0xf64220>
    1598:	00000803 	andeq	r0, r0, r3, lsl #16
				while (i < bc) {
    159c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
			mess++;
    15a0:	06000013 			; <UNDEFINED> instruction: 0x06000013
					d /= 10;
    15a4:	13490035 	movtne	r0, #36917	; 0x9035
				if ((val >> (bc - 1)) & 1) {
    15a8:	13070000 	movwne	r0, #28672	; 0x7000
    15ac:	3a0b0b01 	bcc	2c41b8 <__ccfg+0x2a4210>
					dgout ('-');
    15b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    15b4:	0013010b 	andseq	r0, r3, fp, lsl #2
						val |= 0xffff0000;
    15b8:	000d0800 	andeq	r0, sp, r0, lsl #16
    15bc:	0b3a0e03 	bleq	e84dd0 <__ccfg+0xe64e28>
    15c0:	0b390b3b 	bleq	e442b4 <__ccfg+0xe2430c>
				d = (bc == 16) ? 10000 : 1000000000;
    15c4:	0b0b1349 	bleq	2c62f0 <__ccfg+0x2a6348>
    15c8:	0b0c0b0d 	bleq	304204 <__ccfg+0x2e425c>
    15cc:	00000b38 	andeq	r0, r0, r8, lsr fp
					v = (word) (val / d);
    15d0:	03000d09 	movweq	r0, #3337	; 0xd09
					if (v || d == 1) break;
    15d4:	3b0b3a0e 	blcc	2cfe14 <__ccfg+0x2afe6c>
    15d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					d /= 10;
    15dc:	000b3813 	andeq	r3, fp, r3, lsl r8
				d = (bc == 16) ? 10000 : 1000000000;
    15e0:	00340a00 	eorseq	r0, r4, r0, lsl #20
					dgout (v + '0');
    15e4:	0b3a0e03 	bleq	e84df8 <__ccfg+0xe64e50>
    15e8:	0b390b3b 	bleq	e442dc <__ccfg+0xe24334>
    15ec:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 14d0 <__pi_fork+0x24>
					d /= 10;
    15f0:	00000c3c 	andeq	r0, r0, ip, lsr ip
					val = val - (v * d);
    15f4:	0b000f0b 	bleq	5228 <__exidx_end+0x2f8>
					if (d == 0) break;
    15f8:	0013490b 	andseq	r4, r3, fp, lsl #18
					v = (word) (val / d);
    15fc:	01010c00 	tsteq	r1, r0, lsl #24
    1600:	13011349 	movwne	r1, #4937	; 0x1349
				if (bc == 16)
    1604:	210d0000 	mrscs	r0, (UNDEF: 13)
				d = (bc == 16) ? 10000 : 1000000000;
    1608:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
					val &= 0xffff;
    160c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
					dgout (*s);
    1610:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					s++;
    1614:	13490b39 	movtne	r0, #39737	; 0x9b39
				while (*s != '\0') {
    1618:	150f0000 	strne	r0, [pc, #-0]	; 1620 <diag+0x128>
    161c:	010c2701 	tsteq	ip, r1, lsl #14
			dgout (*mess++);
    1620:	10000013 	andne	r0, r0, r3, lsl r0
    1624:	13490005 	movtne	r0, #36869	; 0x9005
    1628:	34110000 	ldrcc	r0, [r1], #-0
    162c:	3a0e0300 	bcc	382234 <__ccfg+0x36228c>
    1630:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1634:	3f13490b 	svccc	0x0013490b
    1638:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    163c:	01131200 	tsteq	r3, r0, lsl #4
    1640:	0b3a0b0b 	bleq	e84274 <__ccfg+0xe642cc>
	^ entropy
    1644:	0b39053b 	bleq	e42b38 <__ccfg+0xe22b90>
}
    1648:	00001301 	andeq	r1, r0, r1, lsl #6
    164c:	03000d13 	movweq	r0, #3347	; 0xd13
    1650:	3b0b3a0e 	blcc	2cfe90 <__ccfg+0x2afee8>
    1654:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1658:	000b3813 	andeq	r3, fp, r3, lsl r8
	word cs = size + hblenb;
    165c:	01131400 	tsteq	r3, r0, lsl #8
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1660:	0b0b0e03 	bleq	2c4e74 <__ccfg+0x2a4ecc>
    1664:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	p -> length = size;
    1668:	13010b39 	movwne	r0, #6969	; 0x1b39
}
    166c:	21150000 	tstcs	r5, r0
	if (p->attributes.b.queued) {
    1670:	2f134900 	svccs	0x00134900
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1674:	1600000b 	strne	r0, [r0], -fp
    1678:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    167c:	0b3b0b3a 	bleq	ec436c <__ccfg+0xea43c4>
		p->attributes.b.queued = 0;
    1680:	13490b39 	movtne	r0, #39737	; 0x9b39
    1684:	00000a02 	andeq	r0, r0, r2, lsl #20
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1688:	47003417 	smladmi	r0, r7, r4, r3
	deq (p);	// Remove from queue
    168c:	3b0b3a13 	blcc	2cfee0 <__ccfg+0x2aff38>
}
    1690:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
	tfree ((address)p);
    1694:	1800000a 	stmdane	r0, {r1, r3}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 15e8 <diag+0xf0>
    169c:	0b3a0e03 	bleq	e84eb0 <__ccfg+0xe64f08>
    16a0:	0b390b3b 	bleq	e44394 <__ccfg+0xe243ec>
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a4:	01110c27 	tsteq	r1, r7, lsr #24
    16a8:	0a400112 	beq	1001af8 <__ccfg+0xfe1b50>
	if (q_empty (q))
    16ac:	00001301 	andeq	r1, r0, r1, lsl #6
    16b0:	03000519 	movweq	r0, #1305	; 0x519
		trigger (q);
    16b4:	3b0b3a08 	blcc	2cfedc <__ccfg+0x2aff34>
	if (p->attributes.b.urgent) {
    16b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		p->u.bqueue.next = q->next;
    16bc:	00060213 	andeq	r0, r6, r3, lsl r2
		p->u.bqueue.prev = q;
    16c0:	00051a00 	andeq	r1, r5, r0, lsl #20
		q->next->prev = (qitem_t*) p;
    16c4:	0b3a0e03 	bleq	e84ed8 <__ccfg+0xe64f30>
	p->attributes.b.queued = 1;
    16c8:	0b390b3b 	bleq	e443bc <__ccfg+0xe24414>
    16cc:	06021349 	streq	r1, [r2], -r9, asr #6
}
    16d0:	0a1b0000 	beq	6c16d8 <__ccfg+0x6a1730>
		p->u.bqueue.prev = q->prev;
    16d4:	3a0e0300 	bcc	3822dc <__ccfg+0x362334>
		q->prev->next = (qitem_t*) p;
    16d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		q->prev = (qitem_t*) p;
    16dc:	0001110b 	andeq	r1, r1, fp, lsl #2
    16e0:	011d1c00 	tsteq	sp, r0, lsl #24
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e4:	01521331 	cmpeq	r2, r1, lsr r3
	deq (p);	// Soft dequeue, timer and hook left intact
    16e8:	0b580655 	bleq	1603044 <__ccfg+0x15e309c>
	switch (dv) {
    16ec:	0b570b59 	bleq	15c4458 <__ccfg+0x15a44b0>
    16f0:	00001301 	andeq	r1, r0, r1, lsl #6
    16f4:	3100051d 	tstcc	r0, sp, lsl r5
    16f8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
			p->attributes.b.urgent = 1;
    16fc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1700:	06550152 			; <UNDEFINED> instruction: 0x06550152
			verify_ses (p, "dispose ses");
    1704:	0b590b58 	bleq	164446c <__ccfg+0x16244c4>
    1708:	00000b57 	andeq	r0, r0, r7, asr fp
    170c:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    1710:	3b0b3a0e 	blcc	2cff50 <__ccfg+0x2affa8>
    1714:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			verify_phy (p, "dispose phy");
    1718:	2013490c 	andscs	r4, r3, ip, lsl #18
    171c:	2000000b 	andcs	r0, r0, fp
}
    1720:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			enq (oqueues [p->attributes.b.phys], p);
    1724:	0b3b0b3a 	bleq	ec4414 <__ccfg+0xea446c>
			p->attributes.b.urgent = 1;
    1728:	13490b39 	movtne	r0, #39737	; 0x9b39
    172c:	01000000 	mrseq	r0, (UNDEF: 0)
			verify_phy (p, "dispose phy");
    1730:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1734:	0e030b13 	vmoveq.32	d3[0], r0
    1738:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    173c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1740:	24020000 	strcs	r0, [r2], #-0
    1744:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			enq (oqueues [p->attributes.b.phys], p);
    1748:	000e030b 	andeq	r0, lr, fp, lsl #6
    174c:	00160300 	andseq	r0, r6, r0, lsl #6
}
    1750:	0b3a0e03 	bleq	e84f64 <__ccfg+0xe64fbc>
			rlp (p);
    1754:	0b390b3b 	bleq	e44448 <__ccfg+0xe244a0>
}
    1758:	00001349 	andeq	r1, r0, r9, asr #6
    175c:	0b002404 	bleq	a774 <__exidx_end+0x5844>
    1760:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1764:	05000008 	streq	r0, [r0, #-8]
    1768:	13490026 	movtne	r0, #36902	; 0x9026
    176c:	35060000 	strcc	r0, [r6, #-0]
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1770:	00134900 	andseq	r4, r3, r0, lsl #18
	if (b->attributes.b.outgoing) {
    1774:	01130700 	tsteq	r3, r0, lsl #14
	b = header (p);
    1778:	0b3a0b0b 	bleq	e843ac <__ccfg+0xe64404>
	if (b->attributes.b.outgoing) {
    177c:	0b390b3b 	bleq	e44470 <__ccfg+0xe244c8>
		verify_ses (b, "tcv02");
    1780:	00001301 	andeq	r1, r0, r1, lsl #6
    1784:	03000d08 	movweq	r0, #3336	; 0xd08
    1788:	3b0b3a0e 	blcc	2cffc8 <__ccfg+0x2b0020>
    178c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1790:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		verify_plg (b, tcv_out, "tcv03");
    1794:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1798:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    179c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    17a0:	0b3b0b3a 	bleq	ec4490 <__ccfg+0xea44e8>
    17a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    17a8:	00000b38 	andeq	r0, r0, r8, lsr fp
    17ac:	0300340a 	movweq	r3, #1034	; 0x40a
    17b0:	3b0b3a0e 	blcc	2cfff0 <__ccfg+0x2b0048>
    17b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
}
    17bc:	0b00000c 	bleq	17f4 <tcv_open+0x14>
		dispose (b, plugins [b->attributes.b.plugin] ->
    17c0:	0b0b000f 	bleq	2c1804 <__ccfg+0x2a185c>
		rlp (b);
    17c4:	00001349 	andeq	r1, r0, r9, asr #6
}
    17c8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
		rlp (b);
    17cc:	00130113 	andseq	r0, r3, r3, lsl r1
    17d0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    17d4:	160e0000 	strne	r0, [lr], -r0
    17d8:	3a0e0300 	bcc	3823e0 <__ccfg+0x362438>
    17dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    17e4:	01150f00 	tsteq	r5, r0, lsl #30
    17e8:	13010c27 	movwne	r0, #7207	; 0x1c27
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17ec:	05100000 	ldreq	r0, [r0, #-0]
	va_start (ap, plid);
    17f0:	00134900 	andseq	r4, r3, r0, lsl #18
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f4:	00341100 	eorseq	r1, r4, r0, lsl #2
    17f8:	0b3a0e03 	bleq	e8500c <__ccfg+0xe65064>
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17fc:	0b39053b 	bleq	e42cf0 <__ccfg+0xe22d48>
    1800:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 16e4 <dispose>
    1804:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1808:	0b011312 	bleq	46458 <__ccfg+0x264b0>
			syserror (ENODEVICE, "tcv04");
    180c:	3b0b3a0b 	blcc	2d0040 <__ccfg+0x2b0098>
		syserror (EMALLOC, "tcv05");
    1810:	010b3905 	tsteq	fp, r5, lsl #18
	attp.b.outgoing = 1;
    1814:	13000013 	movwne	r0, #19
    1818:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    181c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1820:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1824:	00000b38 	andeq	r0, r0, r8, lsr fp
		if (descriptors [fd] == NULL)
    1828:	03011314 	movweq	r1, #4884	; 0x1314
    182c:	3a0b0b0e 	bcc	2c446c <__ccfg+0x2a44c4>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1830:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		return ERROR;
    1834:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    1838:	00211500 	eoreq	r1, r1, r0, lsl #10
    183c:	0b2f1349 	bleq	bc6568 <__ccfg+0xba65c0>
    1840:	34160000 	ldrcc	r0, [r6], #-0
	s->attpattern.b.session = fd;
    1844:	3a0e0300 	bcc	38244c <__ccfg+0x3624a4>
    1848:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	descriptors [fd] = s;
    184c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	q_init (&(s->rqueue));
    1850:	1700000a 	strne	r0, [r0, -sl]
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1854:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 17a4 <tcv_endp+0x34>
    1858:	0b3a0e03 	bleq	e8506c <__ccfg+0xe650c4>
    185c:	0b390b3b 	bleq	e44550 <__ccfg+0xe245a8>
    1860:	01120111 	tsteq	r2, r1, lsl r1
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1864:	00000a40 	andeq	r0, r0, r0, asr #20
    1868:	3f012e18 	svccc	0x00012e18
    186c:	3a0e030c 	bcc	3824a4 <__ccfg+0x3624fc>
	descriptors [fd] = s;
    1870:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1874:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1878:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	if (s == NULL)
    187c:	010a4001 	tsteq	sl, r1
		syserror (EMALLOC, "tcv05");
    1880:	19000013 	stmdbne	r0, {r0, r1, r4}
    1884:	08030005 	stmdaeq	r3, {r0, r2}
    1888:	0b3b0b3a 	bleq	ec4578 <__ccfg+0xea45d0>
    188c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1890:	00000602 	andeq	r0, r0, r2, lsl #12
    1894:	0300051a 	movweq	r0, #1306	; 0x51a
    1898:	3b0b3a08 	blcc	2d00c0 <__ccfg+0x2b0118>
    189c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18a0:	000a0213 	andeq	r0, sl, r3, lsl r2
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    18a8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    18ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	plugins [ord] = pl;
    18b0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	return 0;
    18b4:	01111349 	tsteq	r1, r9, asr #6
		return ERROR;
    18b8:	0a400112 	beq	1001d08 <__ccfg+0xfe1d60>
}
    18bc:	00001301 	andeq	r1, r0, r1, lsl #6
    18c0:	0300051c 	movweq	r0, #1308	; 0x51c
	verify_fds (fd, "tcv16");
    18c4:	3b0b3a08 	blcc	2d00ec <__ccfg+0x2b0144>
								Boolean urg) {
    18c8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    18cc:	00060213 	andeq	r0, r6, r3, lsl r2
	verify_fds (fd, "tcv16");
    18d0:	002e1d00 	eoreq	r1, lr, r0, lsl #26
    18d4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    18d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	verify_pld (s, tcv_frm, "tcv17");
    18dc:	01110b39 	tsteq	r1, r9, lsr fp
    18e0:	0a400112 	beq	1001d30 <__ccfg+0xfe1d88>
    18e4:	341e0000 	ldrcc	r0, [lr], #-0
    18e8:	3a080300 	bcc	2024f0 <__ccfg+0x1e2548>
    18ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    18f4:	1f000006 	svcne	0x00000006
    18f8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
	ptrs.head = (word) fd;
    18fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	ptrs.tail = (word) urg;
    1900:	01110b39 	tsteq	r1, r9, lsr fp
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1904:	1d200000 	stcne	0, cr0, [r0, #-0]
    1908:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
		if (state != WNONE) {
    190c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1910:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
}
    1914:	0013010b 	andseq	r0, r3, fp, lsl #2
			when (eid, state);
    1918:	00052100 	andeq	r2, r5, r0, lsl #2
    191c:	00001331 	andeq	r1, r0, r1, lsr r3
			release;
    1920:	31011d22 	tstcc	r1, r2, lsr #26
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1924:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1928:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    192c:	000b5705 	andeq	r5, fp, r5, lsl #14
    1930:	00052300 	andeq	r2, r5, r0, lsl #6
    1934:	0b3a0e03 	bleq	e85148 <__ccfg+0xe651a0>
    1938:	0b390b3b 	bleq	e4462c <__ccfg+0xe24684>
    193c:	06021349 	streq	r1, [r2], -r9, asr #6
    1940:	0a240000 	beq	901948 <__ccfg+0x8e19a0>
		if (state != WNONE) {
    1944:	3a0e0300 	bcc	38254c <__ccfg+0x3625a4>
    1948:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			tmwait (state);
    194c:	0001110b 	andeq	r1, r1, fp, lsl #2
    1950:	011d2500 	tsteq	sp, r0, lsl #10
	b->attributes = s->attpattern;
    1954:	01521331 	cmpeq	r2, r1, lsr r3
		b->attributes.b.urgent = 1;
    1958:	0b580655 	bleq	16032b4 <__ccfg+0x15e330c>
    195c:	0b570b59 	bleq	15c46c8 <__ccfg+0x15a4720>
	b->u.pointers.head = ptrs.head;
    1960:	05260000 	streq	r0, [r6, #-0]!
	b->u.pointers.tail = length;
    1964:	02133100 	andseq	r3, r3, #0, 2
	return (address) (b + 1);
    1968:	27000006 	strcs	r0, [r0, -r6]
    196c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1970:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1974:	0b590b58 	bleq	16446dc <__ccfg+0x1624734>
    1978:	13010b57 	movwne	r0, #6999	; 0x1b57
    197c:	1d280000 	stcne	0, cr0, [r8, #-0]
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	11133101 	tstne	r3, r1, lsl #2
    1984:	58011201 	stmdapl	r1, {r0, r9, ip}
    1988:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	verify_fph (phy, "tcv23");
    198c:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    1990:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 18e0 <tcv_wnps+0x1c>
    1994:	0b3a0e03 	bleq	e851a8 <__ccfg+0xe65200>
    1998:	0b390b3b 	bleq	e4468c <__ccfg+0xe246e4>
}
    199c:	01111349 	tsteq	r1, r9, asr #6
	return (physical [phy]) (opt, arg);
    19a0:	0a400112 	beq	1001df0 <__ccfg+0xfe1e48>
    19a4:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    19a8:	3a0e0301 	bcc	3825b4 <__ccfg+0x36260c>
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (opt < 0) {
    19b0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		if (fd < 0)
    19b4:	010a4001 	tsteq	sl, r1
		if (opt == PHYSOPT_PLUGINFO) {
    19b8:	2b000013 	blcs	1a0c <tcvp_new>
			if (fd >= TCV_MAX_PLUGS)
    19bc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
			if ((p = plugins [fd]) == NULL)
    19c0:	0b3b0b3a 	bleq	ec46b0 <__ccfg+0xea4708>
    19c4:	0b200b39 	bleq	8046b0 <__ccfg+0x7e4708>
}
    19c8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
		if (fd >= TCV_MAX_PHYS)
    19cc:	3a0e0301 	bcc	3825d8 <__ccfg+0x362630>
		return physinfo [fd];
    19d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19d4:	110c270b 	tstne	ip, fp, lsl #14
	verify_fds (fd, "tcv22");
    19d8:	40011201 	andmi	r1, r1, r1, lsl #4
    19dc:	0013010a 	andseq	r0, r3, sl, lsl #2
    19e0:	010b2d00 	tsteq	fp, r0, lsl #26
    19e4:	00000655 	andeq	r0, r0, r5, asr r6
    19e8:	3100342e 	tstcc	r0, lr, lsr #8
}
    19ec:	00060213 	andeq	r0, r6, r3, lsl r2
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19f0:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    19f4:	0b3a0e03 	bleq	e85208 <__ccfg+0xe65260>
			return 0;
    19f8:	0b390b3b 	bleq	e446ec <__ccfg+0xe24744>
    19fc:	0b201349 	bleq	806728 <__ccfg+0x7e6780>
    1a00:	00001301 	andeq	r1, r0, r1, lsl #6
    1a04:	03003430 	movweq	r3, #1072	; 0x430
    1a08:	3b0b3a08 	blcc	2d0230 <__ccfg+0x2b0288>
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a0c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a10:	31000013 	tstcc	r0, r3, lsl r0
	if (dsp != TCV_DSP_PASS) {
    1a14:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (ses == NONE)
    1a18:	0b3b0b3a 	bleq	ec4708 <__ccfg+0xea4760>
			syserror (EREQPAR, "tcv26");
    1a1c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		verify_fds (ses, "tcv27");
    1a20:	13010b20 	movwne	r0, #6944	; 0x1b20
    1a24:	05320000 	ldreq	r0, [r2, #-0]!
    1a28:	3a080300 	bcc	202630 <__ccfg+0x1e2688>
    1a2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a30:	0013490b 	andseq	r4, r3, fp, lsl #18
		if ((p = apb (size)) != NULL) {
    1a34:	011d3300 	tsteq	sp, r0, lsl #6
    1a38:	01111331 	tsteq	r1, r1, lsr r3
		return NULL;
    1a3c:	0b580112 	bleq	1601e8c <__ccfg+0x15e1ee4>
			p->attributes = descriptors [ses] -> attpattern;
    1a40:	0b570b59 	bleq	15c47ac <__ccfg+0x15a4804>
			dispose (p, dsp);
    1a44:	00001301 	andeq	r1, r0, r1, lsl #6
			p->attributes = descriptors [ses] -> attpattern;
    1a48:	03012e34 	movweq	r2, #7732	; 0x1e34
			p->attributes.b.outgoing = 0;
    1a4c:	3b0b3a0e 	blcc	2d028c <__ccfg+0x2b02e4>
			dispose (p, dsp);
    1a50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			return (address)(p + 1);
    1a54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1a58:	010a4001 	tsteq	sl, r1
	if ((p = apb (size)) != NULL)
    1a5c:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    1a60:	08030034 	stmdaeq	r3, {r2, r4, r5}
		return (address)(p + 1);
    1a64:	0b3b0b3a 	bleq	ec4754 <__ccfg+0xea47ac>
    1a68:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a6c:	00000602 	andeq	r0, r0, r2, lsl #12
    1a70:	03012e36 	movweq	r2, #7734	; 0x1e36
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a74:	3b0b3a0e 	blcc	2d02b4 <__ccfg+0x2b030c>
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a78:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a7c:	010b200c 	tsteq	fp, ip
    1a80:	37000013 	smladcc	r0, r3, r0, r0
		syserror (EREQPAR, "tcv28");
    1a84:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
		syserror (EMALLOC, "tcv29");
    1a88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	physical [phy] = ps;
    1a8c:	13490b39 	movtne	r0, #39737	; 0x9b39
	physinfo [phy] = info;
    1a90:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
    1a94:	3a0e0301 	bcc	3826a0 <__ccfg+0x3626f8>
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a9c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1aa0:	010b2013 	tsteq	fp, r3, lsl r0
		syserror (EMALLOC, "tcv29");
    1aa4:	39000013 	stmdbcc	r0, {r0, r1, r4}
    1aa8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
	q_init (q);
    1aac:	0b3b0b3a 	bleq	ec479c <__ccfg+0xea47f4>
}
    1ab0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ab4:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
    1ab8:	11133101 	tstne	r3, r1, lsl #2
    1abc:	40011201 	andmi	r1, r1, r1, lsl #4
    1ac0:	3b00000a 	blcc	1af0 <tcvphy_rcv+0x2c>
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac4:	1331001d 	teqne	r1, #29
	verify_fph (phy, "tcv30");
    1ac8:	01120111 	tsteq	r2, r1, lsl r1
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1acc:	0b590b58 	bleq	1644834 <__ccfg+0x162488c>
    1ad0:	00000b57 	andeq	r0, r0, r7, asr fp
	verify_fph (phy, "tcv30");
    1ad4:	01110100 	tsteq	r1, r0, lsl #2
    1ad8:	0b130e25 	bleq	4c5374 <__ccfg+0x4a53cc>
    1adc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ae0:	01110655 	tsteq	r1, r5, asr r6
    1ae4:	00000610 	andeq	r0, r0, r0, lsl r6
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae8:	0b002402 	bleq	aaf8 <__exidx_end+0x5bc8>
    1aec:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		if (plugins [plg] == NULL)
    1af0:	0300000e 	movweq	r0, #14
    1af4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af8:	0b3b0b3a 	bleq	ec47e8 <__ccfg+0xea4840>
}
    1afc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b00:	24040000 	strcs	r0, [r4], #-0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b04:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1b08:	0008030b 	andeq	r0, r8, fp, lsl #6
    1b0c:	00260500 	eoreq	r0, r6, r0, lsl #10
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b10:	00001349 	andeq	r1, r0, r9, asr #6
    1b14:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1b18:	07000013 	smladeq	r0, r3, r0, r0
    1b1c:	0b0b0113 	bleq	2c1f70 <__ccfg+0x2a1fc8>
    1b20:	0b3b0b3a 	bleq	ec4810 <__ccfg+0xea4868>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b24:	13010b39 	movwne	r0, #6969	; 0x1b39
	len -= (ap.head + ap.tail);
    1b28:	0d080000 	stceq	0, cr0, [r8, #-0]
    1b2c:	3a0e0300 	bcc	382734 <__ccfg+0x36278c>
    1b30:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b34:	0b13490b 	bleq	4d3f68 <__ccfg+0x4b3fc0>
    1b38:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1b3c:	000b380b 	andeq	r3, fp, fp, lsl #16
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b40:	000d0900 	andeq	r0, sp, r0, lsl #18
    1b44:	0b3a0e03 	bleq	e85358 <__ccfg+0xe653b0>
    1b48:	0b390b3b 	bleq	e4483c <__ccfg+0xe24894>
	return 1;
    1b4c:	0b381349 	bleq	e06878 <__ccfg+0xde68d0>
    1b50:	340a0000 	strcc	r0, [sl], #-0
    1b54:	3a0e0300 	bcc	38275c <__ccfg+0x3627b4>
    1b58:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b5c:	3f13490b 	svccc	0x0013490b
	verify_fph (phy, "tcv32");
    1b60:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1b64:	000f0b00 	andeq	r0, pc, r0, lsl #22
    1b68:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1b6c:	010c0000 	mrseq	r0, (UNDEF: 12)
    1b70:	01134901 	tsteq	r3, r1, lsl #18
    1b74:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	oq = oqueues [phy];
    1b78:	00000021 	andeq	r0, r0, r1, lsr #32
	b = q_first (oq);
    1b7c:	0300160e 	movweq	r1, #1550	; 0x60e
	if (q_end (b, oq)) {
    1b80:	3b0b3a0e 	blcc	2d03c0 <__ccfg+0x2b0418>
	*len = b->length;
    1b84:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	deq (b);	// Dequeue the packet ...
    1b88:	0f000013 	svceq	0x00000013
}
    1b8c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		return NULL;
    1b90:	00001301 	andeq	r1, r0, r1, lsl #6
    1b94:	49000510 	stmdbmi	r0, {r4, r8, sl}
    1b98:	11000013 	tstne	r0, r3, lsl r0
    1b9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	verify_fph (phy, "tcv33");
    1ba0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ba4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ba8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1bac:	13120000 	tstne	r2, #0
    1bb0:	3a0b0b01 	bcc	2c47bc <__ccfg+0x2a4814>
    1bb4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	oq = oqueues [phy];
    1bb8:	0013010b 	andseq	r0, r3, fp, lsl #2
	b = q_first (oq);
    1bbc:	000d1300 	andeq	r1, sp, r0, lsl #6
		return NULL;
    1bc0:	0b3a0e03 	bleq	e853d4 <__ccfg+0xe6542c>
	return (address)(b + 1);
    1bc4:	0b39053b 	bleq	e430b8 <__ccfg+0xe23110>
}
    1bc8:	0b381349 	bleq	e068f4 <__ccfg+0xde694c>
    1bcc:	13140000 	tstne	r4, #0
    1bd0:	0b0e0301 	bleq	3827dc <__ccfg+0x362834>
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd4:	3b0b3a0b 	blcc	2d0408 <__ccfg+0x2b0460>
	verify_plg (b, tcv_xmt, "tcv34");
    1bd8:	010b3905 	tsteq	fp, r5, lsl #18
	hblock_t *b = header (pkt);
    1bdc:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
	verify_plg (b, tcv_xmt, "tcv34");
    1be0:	13490021 	movtne	r0, #36897	; 0x9021
    1be4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1be8:	3f012e16 	svccc	0x00012e16
    1bec:	3a0e030c 	bcc	382824 <__ccfg+0x36287c>
    1bf0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bf4:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1bf8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bfc:	000a4001 	andeq	r4, sl, r1
}
    1c00:	00051700 	andeq	r1, r5, r0, lsl #14
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c04:	0b3a0803 	bleq	e83c18 <__ccfg+0xe63c70>
    1c08:	0b390b3b 	bleq	e448fc <__ccfg+0xe24954>
    1c0c:	06021349 	streq	r1, [r2], -r9, asr #6
}
    1c10:	34180000 	ldrcc	r0, [r8], #-0
    while(1)
    1c14:	3a0e0300 	bcc	38281c <__ccfg+0x362874>
{
    1c18:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    SetupTrimDevice();
    1c1c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    pui32Src = &_etext;
    1c20:	00000006 	andeq	r0, r0, r6
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c24:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    __asm("    ldr     r0, =_bss\n"
    1c28:	030b130e 	movweq	r1, #45838	; 0xb30e
    1c2c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1c30:	10011106 	andne	r1, r1, r6, lsl #2
    1c34:	02000006 	andeq	r0, r0, #6
    1c38:	0b0b0024 	bleq	2c1cd0 <__ccfg+0x2a1d28>
   main();
    1c3c:	0e030b3e 	vmoveq.16	d3[0], r0
    FaultISR();
    1c40:	16030000 	strne	r0, [r3], -r0
        *pui32Dest++ = *pui32Src++;
    1c44:	3a0e0300 	bcc	38284c <__ccfg+0x3628a4>
    1c48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1c50:	00240400 	eoreq	r0, r4, r0, lsl #8
    1c54:	0b3e0b0b 	bleq	f84888 <__ccfg+0xf648e0>
    1c58:	00000803 	andeq	r0, r0, r3, lsl #16
    1c5c:	03011305 	movweq	r1, #4869	; 0x1305
    1c60:	3a0b0b0e 	bcc	2c48a0 <__ccfg+0x2a48f8>
static byte get_byte () {
    1c64:	010b3b0b 	tsteq	fp, fp, lsl #22
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c68:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1c6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c70:	0b381349 	bleq	e0699c <__ccfg+0xde69f4>
    1c74:	00000c34 	andeq	r0, r0, r4, lsr ip
		if (ee_inp)
    1c78:	0b000f07 	bleq	589c <__exidx_end+0x96c>
			b |= 1;
    1c7c:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1c80:	13490026 	movtne	r0, #36902	; 0x9026
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c84:	35090000 	strcc	r0, [r9, #-0]
	for (b = 0, i = 0; i < 8; i++) {
    1c88:	00134900 	andseq	r4, r3, r0, lsl #18
}
    1c8c:	01130a00 	tsteq	r3, r0, lsl #20
    1c90:	0b3a0b0b 	bleq	e848c4 <__ccfg+0xe6491c>
    1c94:	0b390b3b 	bleq	e44988 <__ccfg+0xe249e0>
static void put_byte (byte b) {
    1c98:	00001301 	andeq	r1, r0, r1, lsl #6
    1c9c:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1ca0:	3b0b3a0e 	blcc	2d04e0 <__ccfg+0x2b0538>
    1ca4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (b & 0x80)
    1ca8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1cac:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cb0:	0c00000b 	stceq	0, cr0, [r0], {11}
	for (i = 0; i < 8; i++) {
    1cb4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		b <<= 1;
    1cb8:	0b3b0b3a 	bleq	ec49a8 <__ccfg+0xea4a00>
	for (i = 0; i < 8; i++) {
    1cbc:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1cc0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1cc4:	0300340d 	movweq	r3, #1037	; 0x40d
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc8:	3b0b3a0e 	blcc	2d0508 <__ccfg+0x2b0560>
    1ccc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	put_byte (cmd);
    1cd0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1cd4:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
}
    1cd8:	0b0b000f 	bleq	2c1d1c <__ccfg+0x2a1d74>
    1cdc:	00001349 	andeq	r1, r0, r9, asr #6
static void wwait (word st, word del) {
    1ce0:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1ce4:	00130113 	andseq	r0, r3, r3, lsl r1
    1ce8:	00211000 	eoreq	r1, r1, r0
	while (dopen && (rdsr () & 1)) {
    1cec:	16110000 	ldrne	r0, [r1], -r0
    1cf0:	3a0e0300 	bcc	3828f8 <__ccfg+0x362950>
    1cf4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cf8:	0013490b 	andseq	r4, r3, fp, lsl #18
	put_byte (CMD_RDSR);
    1cfc:	01151200 	tsteq	r5, r0, lsl #4
	r = get_byte ();
    1d00:	13010c27 	movwne	r0, #7207	; 0x1c27
    1d04:	05130000 	ldreq	r0, [r3, #-0]
	while (dopen && (rdsr () & 1)) {
    1d08:	00134900 	andseq	r4, r3, r0, lsl #18
}
    1d0c:	00341400 	eorseq	r1, r4, r0, lsl #8
		if (st == WNONE)
    1d10:	0b3a0e03 	bleq	e85524 <__ccfg+0xe6557c>
    1d14:	0b39053b 	bleq	e43208 <__ccfg+0xe23260>
			mdelay (1);
    1d18:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1bfc <tcvphy_end+0x28>
    1d1c:	00000c3c 	andeq	r0, r0, ip, lsr ip
			delay (del, st);
    1d20:	0b011315 	bleq	4697c <__ccfg+0x269d4>
    1d24:	3b0b3a0b 	blcc	2d0558 <__ccfg+0x2b05b0>
			release;
    1d28:	010b3905 	tsteq	fp, r5, lsl #18
    1d2c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1d30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
static void ready () {
    1d34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (dopen) {
    1d38:	13490b39 	movtne	r0, #39737	; 0x9b39
		wwait (WNONE, 1);
    1d3c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1d40:	03011317 	movweq	r1, #4887	; 0x1317
    1d44:	3a0b0b0e 	bcc	2c4984 <__ccfg+0x2a49dc>
	dstat = 0;
    1d48:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1d4c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d50:	00211800 	eoreq	r1, r1, r0, lsl #16
    1d54:	0b2f1349 	bleq	bc6a80 <__ccfg+0xba6ad8>
	udelay (1);
    1d58:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1d5c:	030c3f01 	movweq	r3, #52993	; 0xcf01
	udelay (1);
    1d60:	3b0b3a0e 	blcc	2d05a0 <__ccfg+0x2b05f8>
		dopen = DOPEN_TEMP;
    1d64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1d68:	1113490c 	tstne	r3, ip, lsl #18
    1d6c:	40011201 	andmi	r1, r1, r1, lsl #4
    1d70:	0013010a 	andseq	r0, r3, sl, lsl #2
static void cclose () {
    1d74:	00051a00 	andeq	r1, r5, r0, lsl #20
	if (dopen == DOPEN_TEMP) {
    1d78:	0b3a0803 	bleq	e83d8c <__ccfg+0xe63de4>
    1d7c:	0b390b3b 	bleq	e44a70 <__ccfg+0xe24ac8>
		wwait (WNONE, 1);
    1d80:	06021349 	streq	r1, [r2], -r9, asr #6
    1d84:	051b0000 	ldreq	r0, [fp, #-0]
	cmd_0 (CMD_DP);
    1d88:	3a080300 	bcc	202990 <__ccfg+0x1e29e8>
    1d8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		dopen = 0;
    1d90:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
}
    1d94:	1c00000a 	stcne	0, cr0, [r0], {10}
word ee_open () {
    1d98:	00000018 	andeq	r0, r0, r8, lsl r0
	ready ();
    1d9c:	0300341d 	movweq	r3, #1053	; 0x41d
	dopen = DOPEN_PERM;
    1da0:	3b0b3a0e 	blcc	2d05e0 <__ccfg+0x2b0638>
    1da4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    1da8:	00060213 	andeq	r0, r6, r3, lsl r2
	if (dopen) {
    1dac:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1db0:	0b3a0803 	bleq	e83dc4 <__ccfg+0xe63e1c>
		dopen = DOPEN_TEMP;
    1db4:	0b390b3b 	bleq	e44aa8 <__ccfg+0xe24b00>
		cclose ();
    1db8:	06021349 	streq	r1, [r2], -r9, asr #6
}
    1dbc:	341f0000 	ldrcc	r0, [pc], #-0	; 1dc4 <ser_in+0x4>
int ser_in (word st, char *buf, int len) {
    1dc0:	3a080300 	bcc	2029c8 <__ccfg+0x1e2a20>
    1dc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (len == 0)
    1dc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (__inpline == NULL) {
    1dcc:	0000000a 	andeq	r0, r0, sl
		if ((prcs = running (__inserial)) == 0) {
    1dd0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1dd4:	030b130e 	movweq	r1, #45838	; 0xb30e
			prcs = runthread (__inserial);
    1dd8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1ddc:	10011106 	andne	r1, r1, r6, lsl #2
			if (prcs == 0) {
    1de0:	02000006 	andeq	r0, r0, #6
				npwait (st);
    1de4:	0b0b0024 	bleq	2c1e7c <__ccfg+0x2a1ed4>
		release;
    1de8:	0e030b3e 	vmoveq.16	d3[0], r0
		join (prcs, st);
    1dec:	16030000 	strne	r0, [r3], -r0
    1df0:	3a0e0300 	bcc	3829f8 <__ccfg+0x362a50>
	if (*__inpline == NULL) // bin cmd
    1df4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df8:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (prcs >= len)
    1dfc:	00240400 	eoreq	r0, r4, r0, lsl #8
		prcs = len-1;
    1e00:	0b3e0b0b 	bleq	f84a34 <__ccfg+0xf64a8c>
	memcpy (buf, __inpline, prcs);
    1e04:	00000803 	andeq	r0, r0, r3, lsl #16
    1e08:	03011305 	movweq	r1, #4869	; 0x1305
    1e0c:	3a0b0b0e 	bcc	2c4a4c <__ccfg+0x2a4aa4>
	ufree (__inpline);
    1e10:	010b3b0b 	tsteq	fp, fp, lsl #22
	__inpline = NULL;
    1e14:	06000013 			; <UNDEFINED> instruction: 0x06000013
	if (*buf) // if it's NULL, it's a bin cmd
    1e18:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		buf [prcs] = '\0';
    1e1c:	0b381349 	bleq	e06b48 <__ccfg+0xde6ba0>
}
    1e20:	00000c34 	andeq	r0, r0, r4, lsr ip
		prcs = strlen (__inpline);
    1e24:	0b000f07 	bleq	5a48 <__exidx_end+0xb18>
    1e28:	0800000b 	stmdaeq	r0, {r0, r1, r3}
		return 0;
    1e2c:	13490026 	movtne	r0, #36902	; 0x9026
    1e30:	35090000 	strcc	r0, [r9, #-0]
    1e34:	00134900 	andseq	r4, r3, r0, lsl #18
int ser_outf (word st, const char *m, ...) {
    1e38:	01130a00 	tsteq	r3, r0, lsl #20
    1e3c:	0b3a0b0b 	bleq	e84a70 <__ccfg+0xe64ac8>
	if ((prcs = running (__outserial)) != 0) {
    1e40:	0b390b3b 	bleq	e44b34 <__ccfg+0xe24b8c>
    1e44:	00001301 	andeq	r1, r0, r1, lsl #6
		join (prcs, st);
    1e48:	03000d0b 	movweq	r0, #3339	; 0xd0b
    1e4c:	3b0b3a0e 	blcc	2d068c <__ccfg+0x2b06e4>
		release;
    1e50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e54:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1e58:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1e5c:	0c00000b 	stceq	0, cr0, [r0], {11}
		umwait (st);
    1e60:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e64:	0b3b0b3a 	bleq	ec4b54 <__ccfg+0xea4bac>
	if (runstrand (__outserial, buf) == 0) {
    1e68:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e6c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1e70:	0300340d 	movweq	r3, #1037	; 0x40d
		ufree (buf);
    1e74:	3b0b3a0e 	blcc	2d06b4 <__ccfg+0x2b070c>
		npwait (st);
    1e78:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    1e7c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1e80:	0e00000c 	cdpeq	0, 0, cr0, cr0, cr12, {0}
    1e84:	0b0b000f 	bleq	2c1ec8 <__ccfg+0x2a1f20>
    1e88:	00001349 	andeq	r1, r0, r9, asr #6
int ser_inf (word st, const char *fmt, ...) {
    1e8c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    1e90:	00130113 	andseq	r0, r3, r3, lsl r1
	if (fmt == NULL)
    1e94:	00211000 	eoreq	r1, r1, r0
	if (__inpline == NULL) {
    1e98:	16110000 	ldrne	r0, [r1], -r0
		if ((prcs = running (__inserial)) == 0) {
    1e9c:	3a0e0300 	bcc	382aa4 <__ccfg+0x362afc>
    1ea0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			prcs = runthread (__inserial);
    1ea4:	0013490b 	andseq	r4, r3, fp, lsl #18
    1ea8:	01151200 	tsteq	r5, r0, lsl #4
			if (prcs == 0) {
    1eac:	13010c27 	movwne	r0, #7207	; 0x1c27
				npwait (st);
    1eb0:	05130000 	ldreq	r0, [r3, #-0]
		release;
    1eb4:	00134900 	andseq	r4, r3, r0, lsl #18
		join (prcs, st);
    1eb8:	00341400 	eorseq	r1, r4, r0, lsl #8
    1ebc:	0b3a0e03 	bleq	e856d0 <__ccfg+0xe65728>
	va_start (ap, fmt);
    1ec0:	0b39053b 	bleq	e433b4 <__ccfg+0xe2340c>
	prcs = vscan (__inpline, fmt, ap);
    1ec4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1da8 <ee_open+0x10>
    1ec8:	00000c3c 	andeq	r0, r0, ip, lsr ip
	ufree (__inpline);
    1ecc:	0b011315 	bleq	46b28 <__ccfg+0x26b80>
	__inpline = NULL;
    1ed0:	3b0b3a0b 	blcc	2d0704 <__ccfg+0x2b075c>
}
    1ed4:	010b3905 	tsteq	fp, r5, lsl #18
    1ed8:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1edc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		return 0;
    1ee0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1ee4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ee8:	00000b38 	andeq	r0, r0, r8, lsr fp
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1eec:	03011317 	movweq	r1, #4887	; 0x1317
    1ef0:	3a0b0b0e 	bcc	2c4b30 <__ccfg+0x2a4b88>
    1ef4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	RF_cmdFs.frequency = 
    1ef8:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    1efc:	00211800 	eoreq	r1, r1, r0, lsl #16
    1f00:	0b2f1349 	bleq	bc6c2c <__ccfg+0xba6c84>
    1f04:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    1f08:	030c3f01 	movweq	r3, #52993	; 0xcf01
static int option (int opt, address val) {
    1f0c:	3b0b3a0e 	blcc	2d074c <__ccfg+0x2b07a4>
    1f10:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1f14:	1113490c 	tstne	r3, ip, lsl #18
    1f18:	40011201 	andmi	r1, r1, r1, lsl #4
    1f1c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f20:	00051a00 	andeq	r1, r5, r0, lsl #20
    1f24:	0b3a0803 	bleq	e83f38 <__ccfg+0xe63f90>
    1f28:	0b390b3b 	bleq	e44c1c <__ccfg+0xe24c74>
    1f2c:	06021349 	streq	r1, [r2], -r9, asr #6
    1f30:	051b0000 	ldreq	r0, [fp, #-0]
    1f34:	3a080300 	bcc	202b3c <__ccfg+0x1e2b94>
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f3c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			goto RVal;
    1f40:	1c00000a 	stcne	0, cr0, [r0], {10}
			_BIS (dstate, DSTATE_RXON);
    1f44:	00000018 	andeq	r0, r0, r8, lsl r0
    1f48:	0300341d 	movweq	r3, #1053	; 0x41d
	int ret = 0;
    1f4c:	3b0b3a0e 	blcc	2d078c <__ccfg+0x2b07e4>
			p_trigger (drvprcs, qevent);
    1f50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f54:	00060213 	andeq	r0, r6, r3, lsl r2
    1f58:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1f5c:	0b3a0803 	bleq	e83f70 <__ccfg+0xe63fc8>
    1f60:	0b390b3b 	bleq	e44c54 <__ccfg+0xe24cac>
    1f64:	0a021349 	beq	86c90 <__ccfg+0x66ce8>
    1f68:	01000000 	mrseq	r0, (UNDEF: 0)
    1f6c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1f70:	0e030b13 	vmoveq.32	d3[0], r0
    1f74:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
}
    1f78:	06100111 			; <UNDEFINED> instruction: 0x06100111
			_BIC (dstate, DSTATE_RXON);
    1f7c:	16020000 	strne	r0, [r2], -r0
    1f80:	3a0e0300 	bcc	382b88 <__ccfg+0x362be0>
			statid = (val == NULL) ? 0 : *val;
    1f84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f88:	0013490b 	andseq	r4, r3, fp, lsl #18
	int ret = 0;
    1f8c:	00240300 	eoreq	r0, r4, r0, lsl #6
			ret = (int) statid;
    1f90:	0b3e0b0b 	bleq	f84bc4 <__ccfg+0xf64c1c>
	if (val != NULL)
    1f94:	00000e03 	andeq	r0, r0, r3, lsl #28
		*val = ret;
    1f98:	49002604 	stmdbmi	r0, {r2, r9, sl, sp}
			ret = rbuffl + 2;
    1f9c:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1fa0:	13490035 	movtne	r0, #36917	; 0x9035
			if (val != NULL) {
    1fa4:	24060000 	strcs	r0, [r6], #-0
				memcpy (val, &rxstat,
    1fa8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1fac:	0008030b 	andeq	r0, r8, fp, lsl #6
				memset (&rxstat, 0, 
    1fb0:	00160700 	andseq	r0, r6, r0, lsl #14
    1fb4:	0b3a0e03 	bleq	e857c8 <__ccfg+0xe65820>
			if (val == NULL)
    1fb8:	0b39053b 	bleq	e434ac <__ccfg+0xe23504>
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fbc:	00001349 	andeq	r1, r0, r9, asr #6
    1fc0:	0b011708 	bleq	47be8 <__ccfg+0x27c40>
				utimer_set (bckf_timer, *val);
    1fc4:	3b0b3a0b 	blcc	2d07f8 <__ccfg+0x2b0850>
    1fc8:	010b390b 	tsteq	fp, fp, lsl #18
    1fcc:	09000013 	stmdbeq	r0, {r0, r1, r4}
			for (ret = 0; ret < 8; ret++)
    1fd0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				if (RF_cmdPropRadioDivSetup.txPower
    1fd4:	0b3b0b3a 	bleq	ec4cc4 <__ccfg+0xea4d1c>
					== patable [ret])
    1fd8:	13490b39 	movtne	r0, #39737	; 0x9b39
				if (RF_cmdPropRadioDivSetup.txPower
    1fdc:	010a0000 	mrseq	r0, (UNDEF: 10)
			for (ret = 0; ret < 8; ret++)
    1fe0:	01134901 	tsteq	r3, r1, lsl #18
    1fe4:	0b000013 	bleq	2038 <option+0x12c>
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	13490021 	movtne	r0, #36897	; 0x9021
    1fec:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1ff0:	0b01130c 	bleq	46c28 <__ccfg+0x26c80>
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff4:	3b0b3a0b 	blcc	2d0828 <__ccfg+0x2b0880>
    1ff8:	010b390b 	tsteq	fp, fp, lsl #18
			_BIS (dstate, DSTATE_IRST);
    1ffc:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    2000:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2004:	0b3b0b3a 	bleq	ec4cf4 <__ccfg+0xea4d4c>
			ret = (int) channel;
    2008:	13490b39 	movtne	r0, #39737	; 0x9b39
			goto RVal;
    200c:	00000b38 	andeq	r0, r0, r8, lsr fp
				(*val > 7) ? 7 : *val;
    2010:	0b000f0e 	bleq	5c50 <__exidx_end+0xd20>
    2014:	0f00000b 	svceq	0x0000000b
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2018:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    201c:	0b3a0b0b 	bleq	e84c50 <__ccfg+0xe64ca8>
			plugch ();
    2020:	0b390b3b 	bleq	e44d14 <__ccfg+0xe24d6c>
			_BIS (dstate, DSTATE_IRST);
    2024:	00001301 	andeq	r1, r0, r1, lsl #6
    2028:	03000d10 	movweq	r0, #3344	; 0xd10
			ret = (int) vrate;
    202c:	3b0b3a08 	blcc	2d0854 <__ccfg+0x2b08ac>
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2034:	000b3813 	andeq	r3, fp, r3, lsl r8
    2038:	000f1100 	andeq	r1, pc, r0, lsl #2
    203c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2040:	13120000 	tstne	r2, #0
    2044:	0b0e0301 	bleq	382c50 <__ccfg+0x362ca8>
    2048:	3b0b3a05 	blcc	2d0864 <__ccfg+0x2b08bc>
    204c:	010b390b 	tsteq	fp, fp, lsl #18
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2050:	13000013 	movwne	r0, #19
    2054:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2058:	0b3b0b3a 	bleq	ec4d48 <__ccfg+0xea4da0>
    205c:	13490b39 	movtne	r0, #39737	; 0x9b39
			syserror (EREQPAR, "cc13 op");
    2060:	00000538 	andeq	r0, r0, r8, lsr r5
    2064:	27001514 	smladcs	r0, r4, r5, r1
    2068:	1500000c 	strne	r0, [r0, #-12]
    206c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2070:	13011349 	movwne	r1, #4937	; 0x1349
    2074:	05160000 	ldreq	r0, [r6, #-0]
    2078:	00134900 	andseq	r4, r3, r0, lsl #18
    207c:	01131700 	tsteq	r3, r0, lsl #14
    2080:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2084:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2088:	13010b39 	movwne	r0, #6969	; 0x1b39
    208c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    2090:	3a0e0300 	bcc	382c98 <__ccfg+0x362cf0>
    2094:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2098:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
static void issue_cmd (lword cmd) {
    209c:	1900000b 	stmdbne	r0, {r0, r1, r3}
    20a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    20ac:	00000538 	andeq	r0, r0, r8, lsr r5
		if (res != 0x86)
    20b0:	0301131a 	movweq	r1, #4890	; 0x131a
			syserror (EHARDWARE, "hang ic0");
    20b4:	3a0b0b0e 	bcc	2c4cf4 <__ccfg+0x2a4d4c>
    20b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (cnt-- == 0) {
    20bc:	0013010b 	andseq	r0, r3, fp, lsl #2
			diag ("HUP %lx %lx", cmd, res);
    20c0:	01131b00 	tsteq	r3, r0, lsl #22
    20c4:	0b3a0b0b 	bleq	e84cf8 <__ccfg+0xe64d50>
			syserror (EHARDWARE, "hang ic0");
    20c8:	0b39053b 	bleq	e435bc <__ccfg+0xe23614>
		udelay (1);
    20cc:	00001301 	andeq	r1, r0, r1, lsl #6
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20d0:	0b01171c 	bleq	47d48 <__ccfg+0x27da0>
}
    20d4:	3b0b3a0b 	blcc	2d0908 <__ccfg+0x2b0960>
    20d8:	010b3905 	tsteq	fp, r5, lsl #18
    20dc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    20e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
static void rx_de () {
    20e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if ((dstate & DSTATE_RXAC) == 0)
    20e8:	13490b39 	movtne	r0, #39737	; 0x9b39
    20ec:	131e0000 	tstne	lr, #0
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20f0:	3c0e0300 	stccc	3, cr0, [lr], {-0}
	_BIC (dstate, DSTATE_RXAC);
    20f4:	1f00000c 	svcne	0x0000000c
    20f8:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
}
    20fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2100:	03003420 	movweq	r3, #1056	; 0x420
    2104:	3b0b3a0e 	blcc	2d0944 <__ccfg+0x2b099c>
static void rf_off () {
    2108:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if ((dstate & DSTATE_RFON) == 0)
    210c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2110:	2100000c 	tstcs	r0, ip
	IntDisable (INT_RFC_CPE_0);
    2114:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2118:	0b3b0b3a 	bleq	ec4e08 <__ccfg+0xea4e60>
    211c:	13490b39 	movtne	r0, #39737	; 0x9b39
	RFCAdi3VcoLdoVoltageMode (false);
    2120:	0b0d0b0b 	bleq	344d54 <__ccfg+0x324dac>
	RFCSynthPowerDown ();
    2124:	0b380b0c 	bleq	e04d5c <__ccfg+0xde4db4>
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	0d220000 	stceq	0, cr0, [r2, #-0]
    212c:	3a0e0300 	bcc	382d34 <__ccfg+0x362d8c>
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	0b13490b 	bleq	4d4568 <__ccfg+0x4b45c0>
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2140:	00342300 	eorseq	r2, r4, r0, lsl #6
    2144:	0b3a0e03 	bleq	e85958 <__ccfg+0xe659b0>
	_BIC (dstate, DSTATE_RFON);
    2148:	0b390b3b 	bleq	e44e3c <__ccfg+0xe24e94>
    214c:	0a021349 	beq	86e78 <__ccfg+0x66ed0>
}
    2150:	21240000 			; <UNDEFINED> instruction: 0x21240000
    2154:	2f134900 	svccs	0x00134900
    2158:	25000005 	strcs	r0, [r0, #-5]
    215c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2160:	0b3b0b3a 	bleq	ec4e50 <__ccfg+0xea4ea8>
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	13490b39 	movtne	r0, #39737	; 0x9b39
    2168:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    216c:	21260000 			; <UNDEFINED> instruction: 0x21260000
		if (cmd->status == tstat)
    2170:	27000000 	strcs	r0, [r0, -r0]
		if (timeout-- == 0) {
    2174:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    217c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2180:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
			syserror (EHARDWARE, "rt2");
    2184:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2188:	3b0b3a0e 	blcc	2d09c8 <__ccfg+0x2b0a20>
		udelay (1);
    218c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (cmd->status == tstat)
    2190:	1201110c 	andne	r1, r1, #12, 2
}
    2194:	010a4001 	tsteq	sl, r1
    2198:	29000013 	stmdbcs	r0, {r0, r1, r4}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    219c:	08030005 	stmdaeq	r3, {r0, r2}
    21a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
static void rf_on () {
    21a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    21a8:	00000602 	andeq	r0, r0, r2, lsl #12
	OSCHF_TurnOnXosc();
    21ac:	31011d2a 	tstcc	r1, sl, lsr #26
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21b0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    21b4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    21b8:	010b5705 	tsteq	fp, r5, lsl #14
    21bc:	2b000013 	blcs	2210 <rf_on.part.0+0x74>
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21c0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    21c4:	342c0000 	strtcc	r0, [ip], #-0
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c8:	00133100 	andseq	r3, r3, r0, lsl #2
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21cc:	00342d00 	eorseq	r2, r4, r0, lsl #26
	issue_cmd (
    21d0:	06021331 			; <UNDEFINED> instruction: 0x06021331
    21d4:	1d2e0000 	stcne	0, cr0, [lr, #-0]
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d8:	52133100 	andspl	r3, r3, #0, 2
    21dc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    21e0:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
   pPatchTab[80] = 0;
    21e4:	2f00000b 	svccs	0x0000000b
   } while (--nIterations);
    21e8:	0e03012e 	adfeqsp	f0, f3, #0.5
   pPatchTab[53] = 2;
    21ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21f0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
   pPatchTab[55] = 3;
    21f4:	01111349 	tsteq	r1, r9, asr #6
   pPatchTab[110] = 4;
    21f8:	0a400112 	beq	1002648 <__ccfg+0xfe26a0>
   pPatchTab[107] = 5;
    21fc:	00001301 	andeq	r1, r0, r1, lsl #6
   pPatchTab[65] = 6;
    2200:	03003430 	movweq	r3, #1072	; 0x430
    2204:	3b0b3a08 	blcc	2d0a2c <__ccfg+0x2b0a84>
   pPatchTab[57] = 1;
    2208:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
   pIrqPatch[1] = _IRQ_PATCH_0;
    220c:	00060213 	andeq	r0, r6, r3, lsl r2
   const uint32_t *pS = patchGenfskRfe;
    2210:	000a3100 	andeq	r3, sl, r0, lsl #2
      t2 = *pS++;
    2214:	0b3a0e03 	bleq	e85a28 <__ccfg+0xe65a80>
      t4 = *pS++;
    2218:	0b39053b 	bleq	e4370c <__ccfg+0xe23764>
      t6 = *pS++;
    221c:	00000111 	andeq	r0, r0, r1, lsl r1
      t8 = *pS++;
    2220:	11010b32 	tstne	r1, r2, lsr fp
      *pD++ = t1;
    2224:	00011201 	andeq	r1, r1, r1, lsl #4
      *pD++ = t2;
    2228:	012e3300 			; <UNDEFINED> instruction: 0x012e3300
      *pD++ = t3;
    222c:	0b3a0e03 	bleq	e85a40 <__ccfg+0xe65a98>
      *pD++ = t5;
    2230:	0b39053b 	bleq	e43724 <__ccfg+0xe2377c>
      *pD++ = t7;
    2234:	13010b20 	movwne	r0, #6944	; 0x1b20
   } while (--nIterations);
    2238:	34340000 	ldrtcc	r0, [r4], #-0
    223c:	3a080300 	bcc	202e44 <__ccfg+0x1e2e9c>
      *pD++ = t8;
    2240:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
   } while (--nIterations);
    2244:	0013490b 	andseq	r4, r3, fp, lsl #18
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2248:	00053500 	andeq	r3, r5, r0, lsl #10
   *pD++ = t2;
    224c:	0b3a0e03 	bleq	e85a60 <__ccfg+0xe65ab8>
   *pD++ = t3;
    2250:	0b39053b 	bleq	e43744 <__ccfg+0xe2379c>
   *pD++ = t4;
    2254:	06021349 	streq	r1, [r2], -r9, asr #6
   *pD++ = t5;
    2258:	1d360000 	ldcne	0, cr0, [r6, #-0]
    225c:	11133100 	tstne	r3, r0, lsl #2
	RFCAdi3VcoLdoVoltageMode (true);
    2260:	58011201 	stmdapl	r1, {r0, r9, ip}
    2264:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
       	RFCRfTrimSet (&rfTrim);
    2268:	3700000b 	strcc	r0, [r0, -fp]
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    226c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2270:	00001301 	andeq	r1, r0, r1, lsl #6
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2274:	31011d38 	tstcc	r1, r8, lsr sp
    2278:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	issue_cmd ((lword)&cmd_srt);
    227c:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    2280:	010b5705 	tsteq	fp, r5, lsl #14
	issue_cmd ((lword)&RF_cmdFs);
    2284:	39000013 	stmdbcc	r0, {r0, r1, r4}
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2288:	13310005 	teqne	r1, #5
    228c:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
    2290:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	IntEnable (INT_RFC_CPE_0);
    2294:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	_BIC (dstate, DSTATE_IRST);
    2298:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    229c:	3b00000b 	blcc	22d0 <rf_on.part.0+0x134>
    22a0:	0e03012e 	adfeqsp	f0, f3, #0.5
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a8:	01110b39 	tsteq	r1, r9, lsr fp
	IntEnable (INT_RFC_CPE_0);
    22ac:	0a400112 	beq	10026fc <__ccfg+0xfe2754>
    22b0:	00001301 	andeq	r1, r0, r1, lsl #6
}
    22b4:	03002e3c 	movweq	r2, #3644	; 0xe3c
	IntEnable (INT_RFC_CPE_0);
    22b8:	3b0b3a0e 	blcc	2d0af8 <__ccfg+0x2b0b50>
    22bc:	200b3905 	andcs	r3, fp, r5, lsl #18
    22c0:	3d00000b 	stccc	0, cr0, [r0, #-44]	; 0xffffffd4
    22c4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    22c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    22cc:	01110b39 	tsteq	r1, r9, lsr fp
    22d0:	0a400112 	beq	1002720 <__ccfg+0xfe2778>
    22d4:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
    22d8:	3a0e0300 	bcc	382ee0 <__ccfg+0x362f38>
    22dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22e0:	000b200b 	andeq	r2, fp, fp
    22e4:	012e3f00 			; <UNDEFINED> instruction: 0x012e3f00
    22e8:	0b3a0e03 	bleq	e85afc <__ccfg+0xe65b54>
    22ec:	0b390b3b 	bleq	e44fe0 <__ccfg+0xe25038>
    22f0:	0b200c27 	bleq	805394 <__ccfg+0x7e53ec>
    22f4:	00001301 	andeq	r1, r0, r1, lsl #6
    22f8:	03000540 	movweq	r0, #1344	; 0x540
    22fc:	3b0b3a08 	blcc	2d0b24 <__ccfg+0x2b0b7c>
    2300:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2304:	41000013 	tstmi	r0, r3, lsl r0
    2308:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    230c:	0b3b0b3a 	bleq	ec4ffc <__ccfg+0xea5054>
    2310:	13490b39 	movtne	r0, #39737	; 0x9b39
    2314:	34420000 	strbcc	r0, [r2], #-0
    2318:	3a080300 	bcc	202f20 <__ccfg+0x1e2f78>
static void rx_int_enable () {
    231c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2320:	0013490b 	andseq	r4, r3, fp, lsl #18
    2324:	012e4300 			; <UNDEFINED> instruction: 0x012e4300
    2328:	0b3a0e03 	bleq	e85b3c <__ccfg+0xe65b94>
    232c:	0b39053b 	bleq	e43820 <__ccfg+0xe23878>
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2330:	0b200c27 	bleq	8053d4 <__ccfg+0x7e542c>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2334:	00001301 	andeq	r1, r0, r1, lsl #6
    2338:	03000544 	movweq	r0, #1348	; 0x544
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    233c:	3b0b3a0e 	blcc	2d0b7c <__ccfg+0x2b0bd4>
    2340:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2344:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
    2348:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    234c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2350:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2354:	00000b20 	andeq	r0, r0, r0, lsr #22
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2358:	03002e46 	movweq	r2, #3654	; 0xe46
		if (db->status == DATA_ENTRY_FINISHED) {
    235c:	3b0b3a0e 	blcc	2d0b9c <__ccfg+0x2b0bf4>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2360:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2364:	000b200c 	andeq	r2, fp, ip
			nr++;
    2368:	012e4700 			; <UNDEFINED> instruction: 0x012e4700
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    236c:	01111331 	tsteq	r1, r1, lsr r3
    2370:	0a400112 	beq	10027c0 <__ccfg+0xfe2818>
    2374:	00001301 	andeq	r1, r0, r1, lsl #6
    2378:	31000548 	tstcc	r0, r8, asr #10
				__dp [pl + 1] = __dp [pl] - 128;
    237c:	00060213 	andeq	r0, r6, r3, lsl r2
				pl = __dp [1] + 2;
    2380:	011d4900 	tsteq	sp, r0, lsl #18
				__dp [pl + 1] = __dp [pl] - 128;
    2384:	01111331 	tsteq	r1, r1, lsr r3
    2388:	0b580112 	bleq	16027d8 <__ccfg+0x15e2830>
				__dp [pl] = 0;
    238c:	0b570b59 	bleq	15c50f8 <__ccfg+0x15a5150>
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2390:	1d4a0000 	stclne	0, cr0, [sl, #-0]
    2394:	11133101 	tstne	r3, r1, lsl #2
    2398:	58011201 	stmdapl	r1, {r0, r9, ip}
			db->status = DATA_ENTRY_PENDING;
    239c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23a0:	4b00000b 	blmi	23d4 <rx_int_enable+0xb8>
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a4:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
				diag ("BAD RX");
    23a8:	01120111 	tsteq	r2, r1, lsl r1
    23ac:	00000a40 	andeq	r0, r0, r0, asr #20
	if (nr) {
    23b0:	3100344c 	tstcc	r0, ip, asr #8
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b4:	00061c13 	andeq	r1, r6, r3, lsl ip
}
    23b8:	11010000 	mrsne	r0, (UNDEF: 1)
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23bc:	130e2501 	movwne	r2, #58625	; 0xe501
    23c0:	1b0e030b 	blne	382ff4 <__ccfg+0x36304c>
    23c4:	1106550e 	tstne	r6, lr, lsl #10
}
    23c8:	00061001 	andeq	r1, r6, r1
    23cc:	00240200 	eoreq	r0, r4, r0, lsl #4
    23d0:	0b3e0b0b 	bleq	f85004 <__ccfg+0xf6505c>
    23d4:	00000e03 	andeq	r0, r0, r3, lsl #28
    23d8:	03001603 	movweq	r1, #1539	; 0x603
    23dc:	3b0b3a0e 	blcc	2d0c1c <__ccfg+0x2b0c74>
    23e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    23e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    23e8:	0b0b0024 	bleq	2c2480 <__ccfg+0x2a24d8>
thread (cc1350_driver)
    23ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    23f0:	13050000 	movwne	r0, #20480	; 0x5000
    23f4:	0b0e0301 	bleq	383000 <__ccfg+0x363058>
    23f8:	3b0b3a0b 	blcc	2d0c2c <__ccfg+0x2b0c84>
    23fc:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (dstate & DSTATE_IRST) {
    2400:	000d0600 	andeq	r0, sp, r0, lsl #12
    2404:	13490e03 	movtne	r0, #40451	; 0x9e03
    2408:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
			rf_off ();
    240c:	0f070000 	svceq	0x00070000
			_BIC (dstate,
    2410:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2414:	00260800 	eoreq	r0, r6, r0, lsl #16
		if (dstate & DSTATE_RXAC) {
    2418:	00001349 	andeq	r1, r0, r9, asr #6
    241c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
			if ((dstate & DSTATE_RXON) == 0)
    2420:	0a000013 	beq	2474 <cc1350_driver+0x88>
				rx_de ();
    2424:	0b0b000f 	bleq	2c2468 <__ccfg+0x2a24c0>
		if (paylen == 0) {
    2428:	00001349 	andeq	r1, r0, r9, asr #6
    242c:	0b01130b 	bleq	47060 <__ccfg+0x270b8>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2430:	3b0b3a0b 	blcc	2d0c64 <__ccfg+0x2b0cbc>
    2434:	010b390b 	tsteq	fp, fp, lsl #18
    2438:	0c000013 	stceq	0, cr0, [r0], {19}
    243c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2440:	0b3b0b3a 	bleq	ec5130 <__ccfg+0xea5188>
    2444:	13490b39 	movtne	r0, #39737	; 0x9b39
    2448:	0b0d0b0b 	bleq	34507c <__ccfg+0x3250d4>
    244c:	0b380b0c 	bleq	e05084 <__ccfg+0xde50dc>
    2450:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2454:	3a0e0300 	bcc	38305c <__ccfg+0x3630b4>
    2458:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    245c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		} else if (dstate & DSTATE_RXON) {
    2460:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
	if (dstate & DSTATE_RFON)
    2464:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2468:	0b3b0b3a 	bleq	ec5158 <__ccfg+0xea51b0>
		re->status = DATA_ENTRY_PENDING;
    246c:	13490b39 	movtne	r0, #39737	; 0x9b39
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2470:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	issue_cmd ((lword)&RF_cmdPropRx);
    2474:	010f0000 	mrseq	r0, CPSR
	_BIS (dstate, DSTATE_RXAC);
    2478:	01134901 	tsteq	r3, r1, lsl #18
    247c:	10000013 	andne	r0, r0, r3, lsl r0
    2480:	00000021 	andeq	r0, r0, r1, lsr #32
    2484:	03001611 	movweq	r1, #1553	; 0x611
	if (dstate & DSTATE_RXAC)
    2488:	3b0b3a0e 	blcc	2d0cc8 <__ccfg+0x2b0d20>
    248c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				if (statid != 0xffff)
    2490:	12000013 	andne	r0, r0, #19
    2494:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2498:	00001301 	andeq	r1, r0, r1, lsl #6
				RF_cmdPropTx.pktLen = (byte) paylen;
    249c:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
		if (paylen == 0) {
    24a0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
			wait (qevent, DR_LOOP);
    24a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    24a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (dstate & DSTATE_RXAC) {
    24ac:	13490b39 	movtne	r0, #39737	; 0x9b39
    24b0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
				rx_int_enable ();
    24b4:	15150000 	ldrne	r0, [r5, #-0]
			release;
    24b8:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
			} else if (dstate & DSTATE_RFON) {
    24bc:	00130113 	andseq	r0, r3, r3, lsl r1
				delay (offdelay, DR_GOOF);
    24c0:	01131600 	tsteq	r3, r0, lsl #12
    24c4:	0b3a0b0b 	bleq	e850f8 <__ccfg+0xe65150>
    24c8:	0b39053b 	bleq	e439bc <__ccfg+0xe23a14>
		if (bckf_timer) {
    24cc:	00001301 	andeq	r1, r0, r1, lsl #6
			wait (qevent, DR_LOOP);
    24d0:	03000d17 	movweq	r0, #3351	; 0xd17
    24d4:	3b0b3a0e 	blcc	2d0d14 <__ccfg+0x2b0d6c>
    24d8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			delay (bckf_timer, DR_LOOP);
    24dc:	000b3813 	andeq	r3, fp, r3, lsl r8
    24e0:	01131800 	tsteq	r3, r0, lsl #16
			if (dstate & DSTATE_RXAC)
    24e4:	0b0b0e03 	bleq	2c5cf8 <__ccfg+0x2a5d50>
    24e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (dstate & DSTATE_RFON)
    24ec:	13010b39 	movwne	r0, #6969	; 0x1b39
    24f0:	21190000 	tstcs	r9, r0
		rx_de ();
    24f4:	2f134900 	svccs	0x00134900
		RF_cmdPropTx . status = 0;
    24f8:	1a00000b 	bne	252c <cc1350_driver+0x140>
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2500:	0b3b0b3a 	bleq	ec51f0 <__ccfg+0xea5248>
    2504:	13490b39 	movtne	r0, #39737	; 0x9b39
		issue_cmd ((lword)&cmd_cs);
    2508:	0a020c3f 	beq	8560c <__ccfg+0x65664>
		if (dstate & DSTATE_IRST)
    250c:	341b0000 	ldrcc	r0, [fp], #-0
    2510:	3a0e0300 	bcc	383118 <__ccfg+0x363170>
    2514:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2518:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    251c:	1c00000a 	stcne	0, cr0, [r0], {10}
			delay (1, DR_XMIT);
    2520:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2524:	0b3b0b3a 	bleq	ec5214 <__ccfg+0xea526c>
    2528:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    252c:	01111349 	tsteq	r1, r9, asr #6
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2530:	0a400112 	beq	1002980 <__ccfg+0xfe29d8>
    2534:	00001301 	andeq	r1, r0, r1, lsl #6
				RF_cmdPropTx . status = 0;
    2538:	0300051d 	movweq	r0, #1309	; 0x51d
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    253c:	3b0b3a08 	blcc	2d0d64 <__ccfg+0x2b0dbc>
				issue_cmd ((lword)&RF_cmdPropTx);
    2540:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				proceed (DR_XMIT);
    2544:	00060213 	andeq	r0, r6, r3, lsl r2
    2548:	00051e00 	andeq	r1, r5, r0, lsl #28
			txtries++;
    254c:	0b3a0e03 	bleq	e85d60 <__ccfg+0xe65db8>
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2550:	0b390b3b 	bleq	e45244 <__ccfg+0xe2529c>
    2554:	0a021349 	beq	87280 <__ccfg+0x672d8>
    2558:	051f0000 	ldreq	r0, [pc, #-0]	; 2560 <cc1350_driver+0x174>
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    255c:	3a080300 	bcc	203164 <__ccfg+0x1e31bc>
		goto DR_LOOP__;
    2560:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2564:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		paylen = 0;
    2568:	2000000a 	andcs	r0, r0, sl
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    256c:	0e03012e 	adfeqsp	f0, f3, #0.5
		txtries = 0;
    2570:	0b3b0b3a 	bleq	ec5260 <__ccfg+0xea52b8>
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2574:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2578:	0b201349 	bleq	8072a4 <__ccfg+0x7e72fc>
    257c:	00001301 	andeq	r1, r0, r1, lsl #6
    2580:	03000521 	movweq	r0, #1313	; 0x521
    2584:	3b0b3a08 	blcc	2d0dac <__ccfg+0x2b0e04>
		    tcvphy_top (physid) == NULL)
    2588:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    258c:	22000013 	andcs	r0, r0, #19
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2590:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2594:	0b3b0b3a 	bleq	ec5284 <__ccfg+0xea52dc>
			rf_off ();
    2598:	13490b39 	movtne	r0, #39737	; 0x9b39
endthread
    259c:	34230000 	strtcc	r0, [r3], #-0
    25a0:	3a080300 	bcc	2031a8 <__ccfg+0x1e3200>
    25a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    25ac:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
    25b0:	01111331 	tsteq	r1, r1, lsr r3
    25b4:	0a400112 	beq	1002a04 <__ccfg+0xfe2a5c>
    25b8:	05250000 	streq	r0, [r5, #-0]!
    25bc:	02133100 	andseq	r3, r3, #0, 2
    25c0:	26000006 	strcs	r0, [r0], -r6
    25c4:	13310034 	teqne	r1, #52	; 0x34
    25c8:	1d270000 	stcne	0, cr0, [r7, #-0]
    25cc:	11133101 	tstne	r3, r1, lsl #2
    25d0:	58011201 	stmdapl	r1, {r0, r9, ip}
    25d4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    25d8:	2800000b 	stmdacs	r0, {r0, r1, r3}
void RFCCPE0IntHandler (void) {
    25dc:	13310005 	teqne	r1, #5
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25e0:	00000a02 	andeq	r0, r0, r2, lsl #20
		_BIS (dstate, DSTATE_IRST);
    25e4:	31000529 	tstcc	r0, r9, lsr #10
    25e8:	00000013 	andeq	r0, r0, r3, lsl r0
    25ec:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25f0:	030b130e 	movweq	r1, #45838	; 0xb30e
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f4:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    25f8:	10011106 	andne	r1, r1, r6, lsl #2
	p_trigger (drvprcs, qevent);
    25fc:	02000006 	andeq	r0, r0, #6
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2600:	0b0b0024 	bleq	2c2698 <__ccfg+0x2a26f0>
    2604:	0e030b3e 	vmoveq.16	d3[0], r0
    2608:	16030000 	strne	r0, [r3], -r0
    260c:	3a0e0300 	bcc	383214 <__ccfg+0x36326c>
    2610:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2614:	0013490b 	andseq	r4, r3, fp, lsl #18
    2618:	00240400 	eoreq	r0, r4, r0, lsl #8
    261c:	0b3e0b0b 	bleq	f85250 <__ccfg+0xf652a8>
    2620:	00000803 	andeq	r0, r0, r3, lsl #16
    2624:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
	RISE_N_SHINE;
    2628:	06000013 			; <UNDEFINED> instruction: 0x06000013
    262c:	13490035 	movtne	r0, #36917	; 0x9035
    2630:	13070000 	movwne	r0, #28672	; 0x7000
}
    2634:	3a0b0b01 	bcc	2c5240 <__ccfg+0x2a5298>
    2638:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    263c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2640:	000d0800 	andeq	r0, sp, r0, lsl #16
    2644:	0b3a0e03 	bleq	e85e58 <__ccfg+0xe65eb0>
    2648:	0b390b3b 	bleq	e4533c <__ccfg+0xe25394>
void phys_cc1350 (int phy, int mbs) {
    264c:	0b0b1349 	bleq	2c7378 <__ccfg+0x2a73d0>
	if (rbuffl != 0)
    2650:	0b0c0b0d 	bleq	30528c <__ccfg+0x2e52e4>
    2654:	00000b38 	andeq	r0, r0, r8, lsr fp
		syserror (ETOOMANY, "cc13");
    2658:	03000d09 	movweq	r0, #3337	; 0xd09
		syserror (EREQPAR, "cc13 mb");
    265c:	3b0b3a0e 	blcc	2d0e9c <__ccfg+0x2b0ef4>
	if (mbs == 0)
    2660:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2664:	000b3813 	andeq	r3, fp, r3, lsl r8
		syserror (EREQPAR, "cc13 mb");
    2668:	00340a00 	eorseq	r0, r4, r0, lsl #20
    266c:	0b3a0e03 	bleq	e85e80 <__ccfg+0xe65ed8>
	i = 0;
    2670:	0b390b3b 	bleq	e45364 <__ccfg+0xe253bc>
	rbuffl = (byte) mbs;
    2674:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2558 <cc1350_driver+0x16c>
		db->config.type = 0;	// General (data in structure)
    2678:	00000c3c 	andeq	r0, r0, ip, lsr ip
	rbuffl = (byte) mbs;
    267c:	0b000f0b 	bleq	62b0 <__exidx_end+0x1380>
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2680:	0013490b 	andseq	r4, r3, fp, lsl #18
    2684:	01010c00 	tsteq	r1, r0, lsl #24
		if (db == NULL)
    2688:	13011349 	movwne	r1, #4937	; 0x1349
			syserror (EMALLOC, "cc13");
    268c:	210d0000 	mrscs	r0, (UNDEF: 13)
    2690:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2694:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		db->status = DATA_ENTRY_PENDING;
    2698:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (i)
    269c:	13490b39 	movtne	r0, #39737	; 0x9b39
			da->pNextEntry = (byte*) db;
    26a0:	150f0000 	strne	r0, [pc, #-0]	; 26a8 <phys_cc1350+0x5c>
		db->length = rbuffl + 2;
    26a4:	010c2701 	tsteq	ip, r1, lsl #14
    26a8:	10000013 	andne	r0, r0, r3, lsl r0
		db->config.type = 0;	// General (data in structure)
    26ac:	13490005 	movtne	r0, #36869	; 0x9005
		db->length = rbuffl + 2;
    26b0:	34110000 	ldrcc	r0, [r1], #-0
	db->pNextEntry = (byte*) re;
    26b4:	3a0e0300 	bcc	3832bc <__ccfg+0x363314>
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26bc:	3f13490b 	svccc	0x0013490b
	if (rbuffs == NULL)
    26c0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	rbuffs->pCurrEntry = (byte*) re;
    26c4:	01131200 	tsteq	r3, r0, lsl #4
	rbuffs->pLastEntry = NULL;
    26c8:	0b3a0b0b 	bleq	e852fc <__ccfg+0xe65354>
    26cc:	0b39053b 	bleq	e43bc0 <__ccfg+0xe23c18>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d0:	00001301 	andeq	r1, r0, r1, lsl #6
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d4:	03000d13 	movweq	r0, #3347	; 0xd13
    26d8:	3b0b3a0e 	blcc	2d0f18 <__ccfg+0x2b0f70>
    26dc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	rbuffl -= 2;
    26e0:	000b3813 	andeq	r3, fp, r3, lsl r8
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e4:	01131400 	tsteq	r3, r0, lsl #8
	rbuffl -= 2;
    26e8:	0b0b0e03 	bleq	2c5efc <__ccfg+0x2a5f54>
	physid = phy;
    26ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f0:	13010b39 	movwne	r0, #6969	; 0x1b39
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f4:	21150000 	tstcs	r5, r0
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	2f134900 	svccs	0x00134900
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	1600000b 	strne	r0, [r0], -fp
    2700:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2650 <phys_cc1350+0x4>
	utimer_add (&bckf_timer);
    2704:	0b3a0e03 	bleq	e85f18 <__ccfg+0xe65f70>
	drvprcs = runthread (cc1350_driver);
    2708:	0b390b3b 	bleq	e453fc <__ccfg+0xe25454>
    270c:	01110c27 	tsteq	r1, r7, lsr #24
    2710:	0a400112 	beq	1002b60 <__ccfg+0xfe2bb8>
	if (drvprcs == 0)
    2714:	00001301 	andeq	r1, r0, r1, lsl #6
		syserror (ERESOURCE, "cc13");
    2718:	03000517 	movweq	r0, #1303	; 0x517
    271c:	3b0b3a0e 	blcc	2d0f5c <__ccfg+0x2b0fb4>
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2720:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2724:	00060213 	andeq	r0, r6, r3, lsl r2
    2728:	00341800 	eorseq	r1, r4, r0, lsl #16
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    272c:	0b3a0e03 	bleq	e85f40 <__ccfg+0xe65f98>
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2730:	0b390b3b 	bleq	e45424 <__ccfg+0xe2547c>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	06021349 	streq	r1, [r2], -r9, asr #6
    2738:	0a190000 	beq	642740 <__ccfg+0x622798>
    273c:	3a0e0300 	bcc	383344 <__ccfg+0x36339c>
    2740:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2744:	1a00000b 	bne	2778 <phys_cc1350+0x12c>
    2748:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    274c:	341b0000 	ldrcc	r0, [fp], #-0
    2750:	3a080300 	bcc	203358 <__ccfg+0x1e33b0>
    2754:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	plugch ();
    2758:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	0000000a 	andeq	r0, r0, sl
    2760:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2764:	030b130e 	movweq	r1, #45838	; 0xb30e
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2768:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    276c:	10011106 	andne	r1, r1, r6, lsl #2
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2770:	02000006 	andeq	r0, r0, #6
}
    2774:	0b0b0024 	bleq	2c280c <__ccfg+0x2a2864>
    2778:	0e030b3e 	vmoveq.16	d3[0], r0
    277c:	16030000 	strne	r0, [r3], -r0
    2780:	3a0e0300 	bcc	383388 <__ccfg+0x3633e0>
    2784:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2788:	0013490b 	andseq	r4, r3, fp, lsl #18
    278c:	00240400 	eoreq	r0, r4, r0, lsl #8
    2790:	0b3e0b0b 	bleq	f853c4 <__ccfg+0xf6541c>
    2794:	00000803 	andeq	r0, r0, r3, lsl #16
    2798:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    279c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    27a0:	13490035 	movtne	r0, #36917	; 0x9035
    27a4:	0f070000 	svceq	0x00070000
    27a8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    27ac:	08000013 	stmdaeq	r0, {r0, r1, r4}
    27b0:	0b0b0113 	bleq	2c2c04 <__ccfg+0x2a2c5c>
    27b4:	0b3b0b3a 	bleq	ec54a4 <__ccfg+0xea54fc>
    27b8:	13010b39 	movwne	r0, #6969	; 0x1b39
    27bc:	0d090000 	stceq	0, cr0, [r9, #-0]
    27c0:	3a0e0300 	bcc	3833c8 <__ccfg+0x363420>
    27c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27c8:	0b13490b 	bleq	4d4bfc <__ccfg+0x4b4c54>
    27cc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    27d0:	000b380b 	andeq	r3, fp, fp, lsl #16
    27d4:	000d0a00 	andeq	r0, sp, r0, lsl #20
    27d8:	0b3a0e03 	bleq	e85fec <__ccfg+0xe66044>
    27dc:	0b390b3b 	bleq	e454d0 <__ccfg+0xe25528>
    27e0:	0b381349 	bleq	e0750c <__ccfg+0xde7564>
    27e4:	340b0000 	strcc	r0, [fp], #-0
    27e8:	3a0e0300 	bcc	3833f0 <__ccfg+0x363448>
    27ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    27f0:	3f13490b 	svccc	0x0013490b
    27f4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    27f8:	01010c00 	tsteq	r1, r0, lsl #24
    27fc:	13011349 	movwne	r1, #4937	; 0x1349
    2800:	210d0000 	mrscs	r0, (UNDEF: 13)
    2804:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    2808:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    280c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2810:	13490b39 	movtne	r0, #39737	; 0x9b39
    2814:	150f0000 	strne	r0, [pc, #-0]	; 281c <tcv_ope_null+0x4>
    2818:	010c2701 	tsteq	ip, r1, lsl #14
    281c:	10000013 	andne	r0, r0, r3, lsl r0
    2820:	13490005 	movtne	r0, #36869	; 0x9005
    2824:	34110000 	ldrcc	r0, [r1], #-0
    2828:	3a0e0300 	bcc	383430 <__ccfg+0x363488>
    282c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2830:	3f13490b 	svccc	0x0013490b
    2834:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2838:	01131200 	tsteq	r3, r0, lsl #4
    283c:	0b3a0b0b 	bleq	e85470 <__ccfg+0xe654c8>
    2840:	0b39053b 	bleq	e43d34 <__ccfg+0xe23d8c>
    2844:	00001301 	andeq	r1, r0, r1, lsl #6
    2848:	03000d13 	movweq	r0, #3347	; 0xd13
    284c:	3b0b3a0e 	blcc	2d108c <__ccfg+0x2b10e4>
    2850:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2854:	000b3813 	andeq	r3, fp, r3, lsl r8
    2858:	01131400 	tsteq	r3, r0, lsl #8
    285c:	0b0b0e03 	bleq	2c6070 <__ccfg+0x2a60c8>
strand (__outserial, const char*)
    2860:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2864:	13010b39 	movwne	r0, #6969	; 0x1b39
    2868:	21150000 	tstcs	r5, r0
    286c:	2f134900 	svccs	0x00134900
endstrand
    2870:	1600000b 	strne	r0, [r0], -fp
    2874:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	ptr = data;
    2878:	0b3b0b3a 	bleq	ec5568 <__ccfg+0xea55c0>
    287c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (*ptr)
    2880:	0a020c3f 	beq	85984 <__ccfg+0x659dc>
		len = strlen (ptr);
    2884:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    2888:	030c3f01 	movweq	r3, #52993	; 0xcf01
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    288c:	3b0b3a0e 	blcc	2d10cc <__ccfg+0x2b1124>
    2890:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2894:	1201110c 	andne	r1, r1, #12, 2
    2898:	000a4001 	andeq	r4, sl, r1
    289c:	00051800 	andeq	r1, r5, r0, lsl #16
	len -= quant;
    28a0:	0b3a0e03 	bleq	e860b4 <__ccfg+0xe6610c>
    28a4:	0b390b3b 	bleq	e45598 <__ccfg+0xe255f0>
    28a8:	06021349 	streq	r1, [r2], -r9, asr #6
	if (len == 0) {
    28ac:	34190000 	ldrcc	r0, [r9], #-0
		ufree (data);
    28b0:	3a0e0300 	bcc	3834b8 <__ccfg+0x363510>
		finish;
    28b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28bc:	1a000006 	bne	28dc <__inserial+0xc>
    28c0:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    28c4:	341b0000 	ldrcc	r0, [fp], #-0
    28c8:	3a080300 	bcc	2034d0 <__ccfg+0x1e3528>
    28cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
strand (__inserial, address)
    28d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28d4:	0000000a 	andeq	r0, r0, sl
    28d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    28dc:	030b130e 	movweq	r1, #45838	; 0xb30e
    28e0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	if (__inpline != NULL)
    28e4:	10011106 	andne	r1, r1, r6, lsl #2
    28e8:	02000006 	andeq	r0, r0, #6
		finish;
    28ec:	0b0b0024 	bleq	2c2984 <__ccfg+0x2a29dc>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28f0:	0e030b3e 	vmoveq.16	d3[0], r0
    28f4:	16030000 	strne	r0, [r3], -r0
    28f8:	3a0e0300 	bcc	383500 <__ccfg+0x363558>
    28fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		umwait (IM_INIT);
    2900:	0013490b 	andseq	r4, r3, fp, lsl #18
		release;
    2904:	00240400 	eoreq	r0, r4, r0, lsl #8
	savedata (data);
    2908:	0b3e0b0b 	bleq	f8553c <__ccfg+0xf65594>
	len = MAX_LINE_LENGTH;
    290c:	00000803 	andeq	r0, r0, r3, lsl #16
	io (IM_READ, __cport, READ, ptr, 1);
    2910:	03011305 	movweq	r1, #4869	; 0x1305
    2914:	3a0b0b0e 	bcc	2c5554 <__ccfg+0x2a55ac>
    2918:	010b3b0b 	tsteq	fp, fp, lsl #22
    291c:	06000013 			; <UNDEFINED> instruction: 0x06000013
	if (ptr == (char*) data) { // new line
    2920:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2924:	0b381349 	bleq	e07650 <__ccfg+0xde76a8>
		if (*ptr == '\0') { // bin cmd
    2928:	00000c34 	andeq	r0, r0, r4, lsr ip
			proceed (IM_BIN);
    292c:	0b000f07 	bleq	6550 <__exidx_end+0x1620>
    2930:	0800000b 	stmdaeq	r0, {r0, r1, r3}
		if (*ptr < 0x20)
    2934:	13490026 	movtne	r0, #36902	; 0x9026
    2938:	35090000 	strcc	r0, [r9, #-0]
			proceed (IM_READ);
    293c:	00134900 	andseq	r4, r3, r0, lsl #18
    2940:	000f0a00 	andeq	r0, pc, r0, lsl #20
	if (*ptr == '\n' || *ptr == '\r') {
    2944:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2948:	130b0000 	movwne	r0, #45056	; 0xb000
    294c:	3a0b0b01 	bcc	2c5558 <__ccfg+0x2a55b0>
		*ptr = '\0';
    2950:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		__inpline = (char*)data;
    2954:	0013010b 	andseq	r0, r3, fp, lsl #2
		finish;
    2958:	000d0c00 	andeq	r0, sp, r0, lsl #24
	if (len) {
    295c:	0b3a0e03 	bleq	e86170 <__ccfg+0xe661c8>
		ptr++;
    2960:	0b390b3b 	bleq	e45654 <__ccfg+0xe256ac>
    2964:	0b0b1349 	bleq	2c7690 <__ccfg+0x2a76e8>
		len--;
    2968:	0b0c0b0d 	bleq	3055a4 <__ccfg+0x2e55fc>
	proceed (IM_READ);
    296c:	00000b38 	andeq	r0, r0, r8, lsr fp
	io (IM_BIN, __cport, READ, ptr, 1);
    2970:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2974:	3b0b3a0e 	blcc	2d11b4 <__ccfg+0x2b120c>
    2978:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    297c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2980:	00340e00 	eorseq	r0, r4, r0, lsl #28
	len -= 2;
    2984:	0b3a0e03 	bleq	e86198 <__ccfg+0xe661f0>
	if (len > *ptr + 1) // 1 for 0x04
    2988:	0b390b3b 	bleq	e4567c <__ccfg+0xe256d4>
    298c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2870 <__outserial+0x10>
		len = *ptr + 1;
    2990:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2994:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
	ptr++;
    2998:	00130113 	andseq	r0, r3, r3, lsl r1
	quant = io (IM_BINL, __cport, READ, ptr, len);
    299c:	00211000 	eoreq	r1, r1, r0
    29a0:	16110000 	ldrne	r0, [r1], -r0
    29a4:	3a0e0300 	bcc	3835ac <__ccfg+0x363604>
    29a8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    29ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    29b0:	01151200 	tsteq	r5, r0, lsl #4
	len -= quant;
    29b4:	13010c27 	movwne	r0, #7207	; 0x1c27
		__inpline = (char*)data;
    29b8:	05130000 	ldreq	r0, [r3, #-0]
		finish;
    29bc:	00134900 	andseq	r4, r3, r0, lsl #18
	ptr += quant;
    29c0:	00341400 	eorseq	r1, r4, r0, lsl #8
    29c4:	0b3a0e03 	bleq	e861d8 <__ccfg+0xe66230>
endstrand
    29c8:	0b39053b 	bleq	e43ebc <__ccfg+0xe23f14>
    29cc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 28b0 <__outserial+0x50>
	proceed (IM_BINL);
    29d0:	00000c3c 	andeq	r0, r0, ip, lsr ip
endstrand
    29d4:	0b011315 	bleq	47630 <__ccfg+0x27688>
    29d8:	3b0b3a0b 	blcc	2d120c <__ccfg+0x2b1264>
    29dc:	010b3905 	tsteq	fp, r5, lsl #18
    29e0:	16000013 			; <UNDEFINED> instruction: 0x16000013
    29e4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    29e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (res && (d < n))
    29ec:	13490b39 	movtne	r0, #39737	; 0x9b39
    29f0:	00000b38 	andeq	r0, r0, r8, lsr fp
    29f4:	03011317 	movweq	r1, #4887	; 0x1317
    29f8:	3a0b0b0e 	bcc	2c5638 <__ccfg+0x2a5690>
			res [d] = (char) c;
    29fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		d++;
    2a00:	0013010b 	andseq	r0, r3, fp, lsl #2
    2a04:	00211800 	eoreq	r1, r1, r0, lsl #16
    2a08:	0b2f1349 	bleq	bc7734 <__ccfg+0xba778c>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a0c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2a10:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2a14:	3b0b3a0e 	blcc	2d1254 <__ccfg+0x2b12ac>
				enci (10000);
    2a18:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a1c:	1113490c 	tstne	r3, ip, lsl #18
    2a20:	40011201 	andmi	r1, r1, r1, lsl #4
	d = 0;
    2a24:	0013010a 	andseq	r0, r3, sl, lsl #2
		c = *fm++;
    2a28:	00051a00 	andeq	r1, r5, r0, lsl #20
		if (c == '\\') {
    2a2c:	0b3a0803 	bleq	e84a40 <__ccfg+0xe64a98>
			if ((c = *fm++) == '\0') {
    2a30:	0b390b3b 	bleq	e45724 <__ccfg+0xe2577c>
    2a34:	06021349 	streq	r1, [r2], -r9, asr #6
				outc ('\\');
    2a38:	341b0000 	ldrcc	r0, [fp], #-0
			if ((c = *fm++) == '\0') {
    2a3c:	3a080300 	bcc	203644 <__ccfg+0x1e369c>
				outc ('\\');
    2a40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			outc (c);
    2a48:	1c000006 	stcne	0, cr0, [r0], {6}
    2a4c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
			if (c == '\0')
    2a50:	0b3b0b3a 	bleq	ec5740 <__ccfg+0xea5798>
    2a54:	01110b39 	tsteq	r1, r9, lsr fp
			outc (c);
    2a58:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
				outc (val);
    2a5c:	030c3f01 	movweq	r3, #52993	; 0xcf01
				val = (word) va_arg (ap, aword);
    2a60:	3b0b3a0e 	blcc	2d12a0 <__ccfg+0x2b12f8>
		if (c == '%') {
    2a64:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2a68:	1113490c 	tstne	r3, ip, lsl #18
			c = *fm++;
    2a6c:	40011201 	andmi	r1, r1, r1, lsl #4
			switch (c) {
    2a70:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2a74:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2a78:	0b3b0b3a 	bleq	ec5768 <__ccfg+0xea57c0>
    2a7c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2a80:	00000a02 	andeq	r0, r0, r2, lsl #20
    2a84:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    2a88:	3b0b3a0e 	blcc	2d12c8 <__ccfg+0x2b1320>
    2a8c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
				outc ('%');
    2a90:	1201110c 	andne	r1, r1, #12, 2
    2a94:	480a4001 	stmdami	sl, {r0, lr}
				outc (c);
    2a98:	0013010a 	andseq	r0, r3, sl, lsl #2
    2a9c:	00052000 	andeq	r2, r5, r0
    2aa0:	0b3a0803 	bleq	e84ab4 <__ccfg+0xe64b0c>
				if (c == '\0')
    2aa4:	0b390b3b 	bleq	e45798 <__ccfg+0xe257f0>
				return d;
    2aa8:	0a021349 	beq	877d4 <__ccfg+0x6782c>
}
    2aac:	0a210000 	beq	842ab4 <__ccfg+0x822b0c>
    2ab0:	3a080300 	bcc	2036b8 <__ccfg+0x1e3710>
			switch (c) {
    2ab4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ab8:	0001110b 	andeq	r1, r1, fp, lsl #2
    2abc:	010b2200 	mrseq	r2, R11_fiq
				for (i = 12; ; i -= 4) {
    2ac0:	13010655 	movwne	r0, #5717	; 0x1655
				val = (word) va_arg (ap, aword);
    2ac4:	34230000 	strtcc	r0, [r3], #-0
						[ (val >> i) & 0xf ]);
    2ac8:	3a080300 	bcc	2036d0 <__ccfg+0x1e3728>
    2acc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ad0:	0013490b 	andseq	r4, r3, fp, lsl #18
					outc (__pi_hex_enc_table
    2ad4:	010b2400 	tsteq	fp, r0, lsl #8
    2ad8:	01120111 	tsteq	r2, r1, lsl r1
					if (i == 0)
    2adc:	00001301 	andeq	r1, r0, r1, lsl #6
    2ae0:	11010b25 	tstne	r1, r5, lsr #22
				for (i = 12; ; i -= 4) {
    2ae4:	00011201 	andeq	r1, r1, r1, lsl #4
				val = (word) va_arg (ap, aword);
    2ae8:	11010000 	mrsne	r0, (UNDEF: 1)
				if (c == 'd' && (val & 0x8000) != 0) {
    2aec:	130e2501 	movwne	r2, #58625	; 0xe501
				val = (word) va_arg (ap, aword);
    2af0:	1b0e030b 	blne	383724 <__ccfg+0x36377c>
				if (c == 'd' && (val & 0x8000) != 0) {
    2af4:	1106550e 	tstne	r6, lr, lsl #10
    2af8:	00061001 	andeq	r1, r6, r1
					outc ('-');
    2afc:	00240200 	eoreq	r0, r4, r0, lsl #4
    2b00:	0b3e0b0b 	bleq	f85734 <__ccfg+0xf6578c>
					val = (~val) + 1;
    2b04:	00000e03 	andeq	r0, r0, r3, lsl #28
    2b08:	03001603 	movweq	r1, #1539	; 0x603
				for (i = 12; ; i -= 4) {
    2b0c:	3b0b3a0e 	blcc	2d134c <__ccfg+0x2b13a4>
				enci (10000);
    2b10:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2b14:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2b18:	0b0b0024 	bleq	2c2bb0 <__ccfg+0x2a2c08>
    2b1c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2b20:	13050000 	movwne	r0, #20480	; 0x5000
    2b24:	0b0e0301 	bleq	383730 <__ccfg+0x363788>
    2b28:	3b0b3a0b 	blcc	2d135c <__ccfg+0x2b13b4>
    2b2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b30:	000d0600 	andeq	r0, sp, r0, lsl #12
    2b34:	13490e03 	movtne	r0, #40451	; 0x9e03
    2b38:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2b3c:	0f070000 	svceq	0x00070000
    2b40:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2b44:	00260800 	eoreq	r0, r6, r0, lsl #16
    2b48:	00001349 	andeq	r1, r0, r9, asr #6
    2b4c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    2b50:	0a000013 	beq	2ba4 <__pi_vfparse+0x198>
    2b54:	0b0b000f 	bleq	2c2b98 <__ccfg+0x2a2bf0>
				if (c == 'd' || c == 'u') {
    2b58:	00001349 	andeq	r1, r0, r9, asr #6
    2b5c:	0b01130b 	bleq	47790 <__ccfg+0x277e8>
					if (c == 'd' &&
    2b60:	3b0b3a0b 	blcc	2d1394 <__ccfg+0x2b13ec>
					val = va_arg (ap, lword);
    2b64:	010b390b 	tsteq	fp, fp, lsl #18
					fm++;
    2b68:	0c000013 	stceq	0, cr0, [r0], {19}
					if (c == 'd' &&
    2b6c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2b70:	0b3b0b3a 	bleq	ec5860 <__ccfg+0xea58b8>
						outc ('-');
    2b74:	13490b39 	movtne	r0, #39737	; 0x9b39
    2b78:	0b0d0b0b 	bleq	3457ac <__ccfg+0x325804>
						val = (~val) + 1;
    2b7c:	0b380b0c 	bleq	e057b4 <__ccfg+0xde580c>
				enci (10000);
    2b80:	0d0d0000 	stceq	0, cr0, [sp, #-0]
					enci (1000000000UL);
    2b84:	3a0e0300 	bcc	38378c <__ccfg+0x3637e4>
    2b88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b8c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2b90:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2b94:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b98:	0b3b0b3a 	bleq	ec5888 <__ccfg+0xea58e0>
    2b9c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2ba0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2ba4:	010f0000 	mrseq	r0, CPSR
    2ba8:	01134901 	tsteq	r3, r1, lsl #18
    2bac:	10000013 	andne	r0, r0, r3, lsl r0
    2bb0:	00000021 	andeq	r0, r0, r1, lsr #32
    2bb4:	03001611 	movweq	r1, #1553	; 0x611
    2bb8:	3b0b3a0e 	blcc	2d13f8 <__ccfg+0x2b1450>
    2bbc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2bc0:	12000013 	andne	r0, r0, #19
    2bc4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
				} else if (c == 'x') {
    2bc8:	00001301 	andeq	r1, r0, r1, lsl #6
					for (i = 28; ; i -= 4) {
    2bcc:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
					val = va_arg (ap, lword);
    2bd0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
							[ (val >> i) & 0xf ]);
    2bd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2bd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
						outc (__pi_hex_enc_table
    2bdc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2be0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2be4:	13150000 	tstne	r5, #0
						if (i == 0)
    2be8:	3a0b0b01 	bcc	2c57f4 <__ccfg+0x2a584c>
    2bec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
					for (i = 28; ; i -= 4) {
    2bf0:	0013010b 	andseq	r0, r3, fp, lsl #2
					outc ('%');
    2bf4:	000d1600 	andeq	r1, sp, r0, lsl #12
    2bf8:	0b3a0e03 	bleq	e8640c <__ccfg+0xe66464>
    2bfc:	0b39053b 	bleq	e440f0 <__ccfg+0xe24148>
					outc ('l');
    2c00:	0b381349 	bleq	e0792c <__ccfg+0xde7984>
    2c04:	13170000 	tstne	r7, #0
				val = (word) va_arg (ap, aword);
    2c08:	0b0e0301 	bleq	383814 <__ccfg+0x36386c>
				outc (val);
    2c0c:	3b0b3a0b 	blcc	2d1440 <__ccfg+0x2b1498>
    2c10:	010b3905 	tsteq	fp, r5, lsl #18
				while (*st != '\0') {
    2c14:	18000013 	stmdane	r0, {r0, r1, r4}
    2c18:	13490021 	movtne	r0, #36897	; 0x9021
    2c1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2c20:	3f012e19 	svccc	0x00012e19
					outc (*st);
    2c24:	3a0e030c 	bcc	38385c <__ccfg+0x3638b4>
    2c28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					st++;
    2c2c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		c = *fm++;
    2c30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2c34:	010a4001 	tsteq	sl, r1
    2c38:	1a000013 	bne	2c8c <vscan>
char *vform (char *res, const char *fm, va_list aq) {
    2c3c:	08030005 	stmdaeq	r3, {r0, r2}
    2c40:	0b3b0b3a 	bleq	ec5930 <__ccfg+0xea5988>
	if (res != NULL) {
    2c44:	13490b39 	movtne	r0, #39737	; 0x9b39
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c48:	00000602 	andeq	r0, r0, r2, lsl #12
    2c4c:	0300341b 	movweq	r3, #1051	; 0x41b
    2c50:	3b0b3a08 	blcc	2d1478 <__ccfg+0x2b14d0>
}
    2c54:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2c58:	00060213 	andeq	r0, r6, r3, lsl r2
	fml = strlen (fm) + 17;
    2c5c:	000a1c00 	andeq	r1, sl, r0, lsl #24
    2c60:	0b3a0e03 	bleq	e86474 <__ccfg+0xe664cc>
    2c64:	0b390b3b 	bleq	e45958 <__ccfg+0xe259b0>
	if ((res = (char*) umalloc (fml)) == NULL)
    2c68:	0b1d0000 	bleq	742c70 <__ccfg+0x722cc8>
    2c6c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2c70:	00130101 	andseq	r0, r3, r1, lsl #2
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c74:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2c78:	0b3a0803 	bleq	e84c8c <__ccfg+0xe64ce4>
    2c7c:	0b390b3b 	bleq	e45970 <__ccfg+0xe259c8>
    2c80:	0a021349 	beq	879ac <__ccfg+0x67a04>
		ufree (res);
    2c84:	0b1f0000 	bleq	7c2c8c <__ccfg+0x7a2ce4>
		goto Again;
    2c88:	01065501 	tsteq	r6, r1, lsl #10
	if (buf == NULL || fmt == NULL)
    2c8c:	20000013 	andcs	r0, r0, r3, lsl r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c90:	08030034 	stmdaeq	r3, {r2, r4, r5}
	if (buf == NULL || fmt == NULL)
    2c94:	0b3b0b3a 	bleq	ec5984 <__ccfg+0xea59dc>
    2c98:	13490b39 	movtne	r0, #39737	; 0x9b39
    2c9c:	0b210000 	bleq	842ca4 <__ccfg+0x822cfc>
		    	    case 'u': scanu (lword); break;
    2ca0:	00065501 	andeq	r5, r6, r1, lsl #10
			while (isspace (*buf)) buf++;
    2ca4:	11010000 	mrsne	r0, (UNDEF: 1)
    2ca8:	130e2501 	movwne	r2, #58625	; 0xe501
	while (*fmt != '\0') {
    2cac:	1b0e030b 	blne	3838e0 <__ccfg+0x363938>
		if (*fmt++ != '%')
    2cb0:	0006100e 	andeq	r1, r6, lr
		switch (*fmt++) {
    2cb4:	00240200 	eoreq	r0, r4, r0, lsl #4
    2cb8:	0b3e0b0b 	bleq	f858ec <__ccfg+0xf65944>
    2cbc:	00000e03 	andeq	r0, r0, r3, lsl #28
    2cc0:	03001603 	movweq	r1, #1539	; 0x603
    2cc4:	3b0b3a0e 	blcc	2d1504 <__ccfg+0x2b155c>
    2cc8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2ccc:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
}
    2cd0:	13490026 	movtne	r0, #36902	; 0x9026
		switch (*fmt++) {
    2cd4:	24050000 	strcs	r0, [r5], #-0
    2cd8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2cdc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2ce0:	00160600 	andseq	r0, r6, r0, lsl #12
			while (isspace (*buf)) buf++;
    2ce4:	0b3a0e03 	bleq	e864f8 <__ccfg+0xe66550>
    2ce8:	0b39053b 	bleq	e441dc <__ccfg+0xe24234>
    2cec:	00001349 	andeq	r1, r0, r9, asr #6
    2cf0:	0b011707 	bleq	48914 <__ccfg+0x2896c>
    2cf4:	3b0b3a0b 	blcc	2d1528 <__ccfg+0x2b1580>
    2cf8:	010b390b 	tsteq	fp, fp, lsl #18
			if (*buf == '\0')
    2cfc:	08000013 	stmdaeq	r0, {r0, r1, r4}
			if (*buf != ',') {
    2d00:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			sap = va_arg (ap, char*);
    2d04:	0b3b0b3a 	bleq	ec59f4 <__ccfg+0xea5a4c>
			nc++;
    2d08:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (*buf != ',') {
    2d0c:	01090000 	mrseq	r0, (UNDEF: 9)
				while (!isspace (*buf) && *buf != ',' &&
    2d10:	01134901 	tsteq	r3, r1, lsl #18
    2d14:	0a000013 	beq	2d68 <vscan+0xdc>
    2d18:	13490021 	movtne	r0, #36897	; 0x9021
    2d1c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2d20:	0b01130b 	bleq	47954 <__ccfg+0x279ac>
    2d24:	3b0b3a0b 	blcc	2d1558 <__ccfg+0x2b15b0>
    2d28:	010b390b 	tsteq	fp, fp, lsl #18
			while (isspace (*buf)) buf++;
    2d2c:	0c000013 	stceq	0, cr0, [r0], {19}
    2d30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d34:	0b3b0b3a 	bleq	ec5a24 <__ccfg+0xea5a7c>
    2d38:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d3c:	00000b38 	andeq	r0, r0, r8, lsr fp
			if (*buf == ',') buf++;
    2d40:	0b000f0d 	bleq	697c <__exidx_end+0x1a4c>
    2d44:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
			*sap = '\0';
    2d48:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			break;
    2d4c:	0b3a0b0b 	bleq	e85980 <__ccfg+0xe659d8>
		    case 'd': scani (word); break;
    2d50:	0b390b3b 	bleq	e45a44 <__ccfg+0xe25a9c>
    2d54:	00001301 	andeq	r1, r0, r1, lsl #6
    2d58:	03000d0f 	movweq	r0, #3343	; 0xd0f
    2d5c:	3b0b3a08 	blcc	2d1584 <__ccfg+0x2b15dc>
    2d60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2d64:	000b3813 	andeq	r3, fp, r3, lsl r8
    2d68:	000f1000 	andeq	r1, pc, r0
    2d6c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2d70:	13110000 	tstne	r1, #0
    2d74:	0b0e0301 	bleq	383980 <__ccfg+0x3639d8>
    2d78:	3b0b3a05 	blcc	2d1594 <__ccfg+0x2b15ec>
    2d7c:	010b390b 	tsteq	fp, fp, lsl #18
    2d80:	12000013 	andne	r0, r0, #19
    2d84:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2d88:	0b3b0b3a 	bleq	ec5a78 <__ccfg+0xea5ad0>
    2d8c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2d90:	00000538 	andeq	r0, r0, r8, lsr r5
    2d94:	27001513 	smladcs	r0, r3, r5, r1
    2d98:	1400000c 	strne	r0, [r0], #-12
    2d9c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2da0:	13011349 	movwne	r1, #4937	; 0x1349
    2da4:	05150000 	ldreq	r0, [r5, #-0]
    2da8:	00134900 	andseq	r4, r3, r0, lsl #18
    2dac:	01131600 	tsteq	r3, r0, lsl #12
    2db0:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    2db4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2db8:	13010b39 	movwne	r0, #6969	; 0x1b39
    2dbc:	0d170000 	ldceq	0, cr0, [r7, #-0]
		    case 'u': scanu (word); break;
    2dc0:	3a0e0300 	bcc	3839c8 <__ccfg+0x363a20>
    2dc4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dc8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2dcc:	1800000b 	stmdane	r0, {r0, r1, r3}
    2dd0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2dd4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2dd8:	13490b39 	movtne	r0, #39737	; 0x9b39
    2ddc:	00000538 	andeq	r0, r0, r8, lsr r5
    2de0:	03011319 	movweq	r1, #4889	; 0x1319
    2de4:	3a0b0b0e 	bcc	2c5a24 <__ccfg+0x2a5a7c>
    2de8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2dec:	0013010b 	andseq	r0, r3, fp, lsl #2
    2df0:	01131a00 	tsteq	r3, r0, lsl #20
    2df4:	0b3a0b0b 	bleq	e85a28 <__ccfg+0xe65a80>
    2df8:	0b39053b 	bleq	e442ec <__ccfg+0xe24344>
    2dfc:	00001301 	andeq	r1, r0, r1, lsl #6
    2e00:	0b01171b 	bleq	48a74 <__ccfg+0x28acc>
    2e04:	3b0b3a0b 	blcc	2d1638 <__ccfg+0x2b1690>
		    case 'x': scanx (word); break;
    2e08:	010b3905 	tsteq	fp, r5, lsl #18
    2e0c:	1c000013 	stcne	0, cr0, [r0], {19}
    2e10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2e14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2e18:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e1c:	131d0000 	tstne	sp, #0
    2e20:	3c0e0300 	stccc	3, cr0, [lr], {-0}
    2e24:	1e00000c 	cdpne	0, 0, cr0, cr0, cr12, {0}
    2e28:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2e2c:	00001301 	andeq	r1, r0, r1, lsl #6
    2e30:	0300341f 	movweq	r3, #1055	; 0x41f
    2e34:	3b0b3a0e 	blcc	2d1674 <__ccfg+0x2b16cc>
    2e38:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2e3c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2e40:	2000000c 	andcs	r0, r0, ip
    2e44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2e48:	0b3b0b3a 	bleq	ec5b38 <__ccfg+0xea5b90>
    2e4c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2e50:	0b0d0b0b 	bleq	345a84 <__ccfg+0x325adc>
    2e54:	0b380b0c 	bleq	e05a8c <__ccfg+0xde5ae4>
    2e58:	0d210000 	stceq	0, cr0, [r1, #-0]
    2e5c:	3a0e0300 	bcc	383a64 <__ccfg+0x363abc>
    2e60:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e64:	0b13490b 	bleq	4d5298 <__ccfg+0x4b52f0>
    2e68:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2e6c:	000b380b 	andeq	r3, fp, fp, lsl #16
    2e70:	00342200 	eorseq	r2, r4, r0, lsl #4
    2e74:	0b3a0e03 	bleq	e86688 <__ccfg+0xe666e0>
    2e78:	0b390b3b 	bleq	e45b6c <__ccfg+0xe25bc4>
    2e7c:	031c1349 	tsteq	ip, #603979777	; 0x24000001
			switch (*fmt++) {
    2e80:	21230000 			; <UNDEFINED> instruction: 0x21230000
    2e84:	2f134900 	svccs	0x00134900
    2e88:	24000005 	strcs	r0, [r0], #-5
    2e8c:	13490035 	movtne	r0, #36917	; 0x9035
    2e90:	34250000 	strtcc	r0, [r5], #-0
    2e94:	3a0e0300 	bcc	383a9c <__ccfg+0x363af4>
		    	    case 'd': scani (lword); break;
    2e98:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2e9c:	3f13490b 	svccc	0x0013490b
    2ea0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2ea4:	00212600 	eoreq	r2, r1, r0, lsl #12
    2ea8:	34270000 	strtcc	r0, [r7], #-0
    2eac:	3a0e0300 	bcc	383ab4 <__ccfg+0x363b0c>
    2eb0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2eb4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2eb8:	2800000a 	stmdacs	r0, {r1, r3}
    2ebc:	13470034 	movtne	r0, #28724	; 0x7034
    2ec0:	0b3b0b3a 	bleq	ec5bb0 <__ccfg+0xea5c08>
    2ec4:	0a020b39 	beq	85bb0 <__ccfg+0x65c08>
    2ec8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ecc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2ed0:	0e030b13 	vmoveq.32	d3[0], r0
    2ed4:	17550e1b 	smmlane	r5, fp, lr, r0
    2ed8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2edc:	24020000 	strcs	r0, [r2], #-0
    2ee0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2ee4:	000e030b 	andeq	r0, lr, fp, lsl #6
    2ee8:	00160300 	andseq	r0, r6, r0, lsl #6
    2eec:	0b3a0e03 	bleq	e86700 <__ccfg+0xe66758>
    2ef0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
		    	    case 'x': scanx (lword); break;
    2ef4:	24040000 	strcs	r0, [r4], #-0
    2ef8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2efc:	0008030b 	andeq	r0, r8, fp, lsl #6
    2f00:	000f0500 	andeq	r0, pc, r0, lsl #10
    2f04:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2f08:	15060000 	strne	r0, [r6, #-0]
    2f0c:	00192700 	andseq	r2, r9, r0, lsl #14
    2f10:	01150700 	tsteq	r5, r0, lsl #14
    2f14:	13011927 	movwne	r1, #6439	; 0x1927
    2f18:	05080000 	streq	r0, [r8, #-0]
    2f1c:	00134900 	andseq	r4, r3, r0, lsl #18
    2f20:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2f24:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2f28:	0b3b0b3a 	bleq	ec5c18 <__ccfg+0xea5c70>
    2f2c:	01111927 	tsteq	r1, r7, lsr #18
    2f30:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f34:	01194296 			; <UNDEFINED> instruction: 0x01194296
    2f38:	0a000013 	beq	2f8c <vscan+0x300>
    2f3c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2f40:	0b3b0b3a 	bleq	ec5c30 <__ccfg+0xea5c88>
    2f44:	17021349 	strne	r1, [r2, -r9, asr #6]
    2f48:	340b0000 	strcc	r0, [fp], #-0
    2f4c:	3a0e0300 	bcc	383b54 <__ccfg+0x363bac>
    2f50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f54:	00170213 	andseq	r0, r7, r3, lsl r2
    2f58:	82890c00 	addhi	r0, r9, #0, 24
    2f5c:	01110001 	tsteq	r1, r1
    2f60:	00001331 	andeq	r1, r0, r1, lsr r3
		    	    case 'd': scani (lword); break;
    2f64:	0182890d 	orreq	r8, r2, sp, lsl #18
    2f68:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    2f6c:	13311942 	teqne	r1, #1081344	; 0x108000
    2f70:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
    2f74:	03193f01 	tsteq	r9, #1, 30
    2f78:	3b0b3a0e 	blcc	2d17b8 <__ccfg+0x2b1810>
    2f7c:	1119270b 	tstne	r9, fp, lsl #14
		    	    case 'u': scanu (lword); break;
    2f80:	40061201 	andmi	r1, r6, r1, lsl #4
    2f84:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2f88:	00001301 	andeq	r1, r0, r1, lsl #6
    2f8c:	0182890f 	orreq	r8, r2, pc, lsl #18
    2f90:	01011101 	tsteq	r1, r1, lsl #2
    2f94:	10000013 	andne	r0, r0, r3, lsl r0
    2f98:	0001828a 	andeq	r8, r1, sl, lsl #5
    2f9c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2fa0:	11000018 	tstne	r0, r8, lsl r0
    2fa4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2fa8:	0b3a0e03 	bleq	e867bc <__ccfg+0xe66814>
    2fac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2fb0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    2fb8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2fbc:	0e030b13 	vmoveq.32	d3[0], r0
    2fc0:	17550e1b 	smmlane	r5, fp, lr, r0
    2fc4:	17100111 			; <UNDEFINED> instruction: 0x17100111
		    	    case 'x': scanx (lword); break;
    2fc8:	16020000 	strne	r0, [r2], -r0
    2fcc:	3a0e0300 	bcc	383bd4 <__ccfg+0x363c2c>
			if ((c = *buf++) == '\0')
    2fd0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2fd4:	03000013 	movweq	r0, #19
			sap = va_arg (ap, char*);
    2fd8:	0b0b0024 	bleq	2c3070 <__ccfg+0x2a30c8>
			nc++;
    2fdc:	0e030b3e 	vmoveq.16	d3[0], r0
			break;
    2fe0:	24040000 	strcs	r0, [r4], #-0
			while (isspace (*buf)) buf++;
    2fe4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2fe8:	0008030b 	andeq	r0, r8, fp, lsl #6
    2fec:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
						*sap++ = *buf++;
    2ff0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2ff4:	0b3b0b3a 	bleq	ec5ce4 <__ccfg+0xea5d3c>
			while (isspace (*buf)) buf++;
    2ff8:	13491927 	movtne	r1, #39207	; 0x9927
    2ffc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3000:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
		return 0;
    3004:	06000019 			; <UNDEFINED> instruction: 0x06000019
    3008:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		    case 'x': scanx (word); break;
    300c:	0b3b0b3a 	bleq	ec5cfc <__ccfg+0xea5d54>
    3010:	17021349 	strne	r1, [r2, -r9, asr #6]
		    	    case 'x': scanx (lword); break;
    3014:	34070000 	strcc	r0, [r7], #-0
    3018:	3a0e0300 	bcc	383c20 <__ccfg+0x363c78>
    301c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3020:	00180213 	andseq	r0, r8, r3, lsl r2
    3024:	11010000 	mrsne	r0, (UNDEF: 1)
    3028:	130e2501 	movwne	r2, #58625	; 0xe501
    302c:	1b0e030b 	blne	383c60 <__ccfg+0x363cb8>
    3030:	1117550e 	tstne	r7, lr, lsl #10
    3034:	00171001 	andseq	r1, r7, r1
    3038:	00240200 	eoreq	r0, r4, r0, lsl #4
    303c:	0b3e0b0b 	bleq	f85c70 <__ccfg+0xf65cc8>
    3040:	00000e03 	andeq	r0, r0, r3, lsl #28
    3044:	03001603 	movweq	r1, #1539	; 0x603
    3048:	3b0b3a0e 	blcc	2d1888 <__ccfg+0x2b18e0>
    304c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3050:	00240400 	eoreq	r0, r4, r0, lsl #8
    3054:	0b3e0b0b 	bleq	f85c88 <__ccfg+0xf65ce0>
    3058:	00000803 	andeq	r0, r0, r3, lsl #16
    305c:	3f012e05 	svccc	0x00012e05
    3060:	3a0e0319 	bcc	383ccc <__ccfg+0x363d24>
    3064:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3068:	11134919 	tstne	r3, r9, lsl r9
    306c:	40061201 	andmi	r1, r6, r1, lsl #4
    3070:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3074:	00001301 	andeq	r1, r0, r1, lsl #6
    3078:	03003406 	movweq	r3, #1030	; 0x406
    307c:	3b0b3a0e 	blcc	2d18bc <__ccfg+0x2b1914>
    3080:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3084:	07000017 	smladeq	r0, r7, r0, r0
    3088:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    308c:	0b3b0b3a 	bleq	ec5d7c <__ccfg+0xea5dd4>
    3090:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    3094:	17080000 	strne	r0, [r8, -r0]
    3098:	3a0b0b01 	bcc	2c5ca4 <__ccfg+0x2a5cfc>
    309c:	010b3b0b 	tsteq	fp, fp, lsl #22
    30a0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    30a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    30a8:	0b3b0b3a 	bleq	ec5d98 <__ccfg+0xea5df0>
    30ac:	00001349 	andeq	r1, r0, r9, asr #6
    30b0:	0300340a 	movweq	r3, #1034	; 0x40a
    30b4:	3b0b3a0e 	blcc	2d18f4 <__ccfg+0x2b194c>
    30b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    30bc:	01010b00 	tsteq	r1, r0, lsl #22
    30c0:	13011349 	movwne	r1, #4937	; 0x1349
    30c4:	210c0000 	mrscs	r0, (UNDEF: 12)
    30c8:	2f134900 	svccs	0x00134900
    30cc:	0000000b 	andeq	r0, r0, fp
    30d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    30d4:	030b130e 	movweq	r1, #45838	; 0xb30e
    30d8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    30dc:	10011117 	andne	r1, r1, r7, lsl r1
    30e0:	02000017 	andeq	r0, r0, #23
    30e4:	0b0b0024 	bleq	2c317c <__ccfg+0x2a31d4>
    30e8:	0e030b3e 	vmoveq.16	d3[0], r0
    30ec:	16030000 	strne	r0, [r3], -r0
    30f0:	3a0e0300 	bcc	383cf8 <__ccfg+0x363d50>
    30f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30f8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    30fc:	0b0b0024 	bleq	2c3194 <__ccfg+0x2a31ec>
    3100:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3104:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3108:	03193f01 	tsteq	r9, #1, 30
    310c:	3b0b3a0e 	blcc	2d194c <__ccfg+0x2b19a4>
    3110:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3114:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3118:	97184006 	ldrls	r4, [r8, -r6]
    311c:	13011942 	movwne	r1, #6466	; 0x1942
    3120:	34060000 	strcc	r0, [r6], #-0
    3124:	3a0e0300 	bcc	383d2c <__ccfg+0x363d84>
    3128:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    312c:	07000013 	smladeq	r0, r3, r0, r0
    3130:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3138:	00001349 	andeq	r1, r0, r9, asr #6
    313c:	3f012e08 	svccc	0x00012e08
    3140:	3a0e0319 	bcc	383dac <__ccfg+0x363e04>
    3144:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3148:	11134919 	tstne	r3, r9, lsl r9
    314c:	40061201 	andmi	r1, r6, r1, lsl #4
    3150:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3154:	00001301 	andeq	r1, r0, r1, lsl #6
    3158:	3f012e09 	svccc	0x00012e09
    315c:	3a0e0319 	bcc	383dc8 <__ccfg+0x363e20>
    3160:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3164:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3168:	97184006 	ldrls	r4, [r8, -r6]
    316c:	00001942 	andeq	r1, r0, r2, asr #18
    3170:	0300050a 	movweq	r0, #1290	; 0x50a
    3174:	3b0b3a0e 	blcc	2d19b4 <__ccfg+0x2b1a0c>
    3178:	02134905 	andseq	r4, r3, #81920	; 0x14000
    317c:	00000018 	andeq	r0, r0, r8, lsl r0
    3180:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3184:	030b130e 	movweq	r1, #45838	; 0xb30e
    3188:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    318c:	10011117 	andne	r1, r1, r7, lsl r1
    3190:	02000017 	andeq	r0, r0, #23
    3194:	0b0b0024 	bleq	2c322c <__ccfg+0x2a3284>
    3198:	0e030b3e 	vmoveq.16	d3[0], r0
    319c:	16030000 	strne	r0, [r3], -r0
    31a0:	3a0e0300 	bcc	383da8 <__ccfg+0x363e00>
    31a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    31ac:	0b0b0024 	bleq	2c3244 <__ccfg+0x2a329c>
    31b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    31b4:	0f050000 	svceq	0x00050000
    31b8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    31bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    31c0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    31c4:	15070000 	strne	r0, [r7, #-0]
    31c8:	01192701 	tsteq	r9, r1, lsl #14
    31cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    31d0:	13490005 	movtne	r0, #36869	; 0x9005
    31d4:	15090000 	strne	r0, [r9, #-0]
    31d8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    31dc:	00130113 	andseq	r0, r3, r3, lsl r1
    31e0:	00150a00 	andseq	r0, r5, r0, lsl #20
    31e4:	13491927 	movtne	r1, #39207	; 0x9927
    31e8:	130b0000 	movwne	r0, #45056	; 0xb000
    31ec:	3a0b0b01 	bcc	2c5df8 <__ccfg+0x2a5e50>
    31f0:	010b3b0b 	tsteq	fp, fp, lsl #22
    31f4:	0c000013 	stceq	0, cr0, [r0], {19}
    31f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    31fc:	0b3b0b3a 	bleq	ec5eec <__ccfg+0xea5f44>
    3200:	0b381349 	bleq	e07f2c <__ccfg+0xde7f84>
    3204:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3208:	03193f01 	tsteq	r9, #1, 30
    320c:	3b0b3a0e 	blcc	2d1a4c <__ccfg+0x2b1aa4>
    3210:	2019270b 	andscs	r2, r9, fp, lsl #14
    3214:	0013010b 	andseq	r0, r3, fp, lsl #2
    3218:	00050e00 	andeq	r0, r5, r0, lsl #28
    321c:	0b3a0e03 	bleq	e86a30 <__ccfg+0xe66a88>
    3220:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3224:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3228:	03193f01 	tsteq	r9, #1, 30
    322c:	3b0b3a0e 	blcc	2d1a6c <__ccfg+0x2b1ac4>
    3230:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3234:	010b2013 	tsteq	fp, r3, lsl r0
    3238:	10000013 	andne	r0, r0, r3, lsl r0
    323c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3240:	0b3b0b3a 	bleq	ec5f30 <__ccfg+0xea5f88>
    3244:	00001349 	andeq	r1, r0, r9, asr #6
    3248:	31012e11 	tstcc	r1, r1, lsl lr
    324c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3250:	97184006 	ldrls	r4, [r8, -r6]
    3254:	13011942 	movwne	r1, #6466	; 0x1942
    3258:	05120000 	ldreq	r0, [r2, #-0]
    325c:	02133100 	andseq	r3, r3, #0, 2
    3260:	13000017 	movwne	r0, #23
    3264:	0111010b 	tsteq	r1, fp, lsl #2
    3268:	13010612 	movwne	r0, #5650	; 0x1612
    326c:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    3270:	11010182 	smlabbne	r1, r2, r1, r0
    3274:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3278:	8a150000 	bhi	543280 <__ccfg+0x5232d8>
    327c:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    3280:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3284:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3288:	11010182 	smlabbne	r1, r2, r1, r0
    328c:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    3290:	00001301 	andeq	r1, r0, r1, lsl #6
    3294:	31003417 	tstcc	r0, r7, lsl r4
    3298:	00180213 	andseq	r0, r8, r3, lsl r2
    329c:	010b1800 	tsteq	fp, r0, lsl #16
    32a0:	13011755 	movwne	r1, #5973	; 0x1755
    32a4:	05190000 	ldreq	r0, [r9, #-0]
    32a8:	1c133100 	ldfnes	f3, [r3], {-0}
    32ac:	1a00000b 	bne	32e0 <NOROM_RFCRfTrimRead+0x7c>
    32b0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    32b4:	341b0000 	ldrcc	r0, [fp], #-0
    32b8:	00133100 	andseq	r3, r3, r0, lsl #2
    32bc:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    32c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    32c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    32c8:	13491927 	movtne	r1, #39207	; 0x9927
    32cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    32d0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    32d4:	00130119 	andseq	r0, r3, r9, lsl r1
    32d8:	00051d00 	andeq	r1, r5, r0, lsl #26
    32dc:	0b3a0e03 	bleq	e86af0 <__ccfg+0xe66b48>
    32e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    32e4:	00001702 	andeq	r1, r0, r2, lsl #14
    32e8:	0300341e 	movweq	r3, #1054	; 0x41e
    32ec:	3b0b3a0e 	blcc	2d1b2c <__ccfg+0x2b1b84>
    32f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    32f4:	1f000017 	svcne	0x00000017
    32f8:	00018289 	andeq	r8, r1, r9, lsl #5
    32fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3300:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    3304:	03193f01 	tsteq	r9, #1, 30
    3308:	3b0b3a0e 	blcc	2d1b48 <__ccfg+0x2b1ba0>
    330c:	11192705 	tstne	r9, r5, lsl #14
    3310:	40061201 	andmi	r1, r6, r1, lsl #4
    3314:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3318:	00001301 	andeq	r1, r0, r1, lsl #6
    331c:	01828921 	orreq	r8, r2, r1, lsr #18
    3320:	31011101 	tstcc	r1, r1, lsl #2
    3324:	00130113 	andseq	r0, r3, r3, lsl r1
    3328:	002e2200 	eoreq	r2, lr, r0, lsl #4
    332c:	0b3a0e03 	bleq	e86b40 <__ccfg+0xe66b98>
    3330:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3334:	0b201349 	bleq	808060 <__ccfg+0x7e80b8>
    3338:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    333c:	3a0e0300 	bcc	383f44 <__ccfg+0x363f9c>
    3340:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3344:	000b2019 	andeq	r2, fp, r9, lsl r0
    3348:	00342400 	eorseq	r2, r4, r0, lsl #8
    334c:	0b3a0e03 	bleq	e86b60 <__ccfg+0xe66bb8>
    3350:	1349053b 	movtne	r0, #38203	; 0x953b
    3354:	00001702 	andeq	r1, r0, r2, lsl #14
    3358:	31011d25 	tstcc	r1, r5, lsr #26
    335c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3360:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3364:	00130105 	andseq	r0, r3, r5, lsl #2
    3368:	00052600 	andeq	r2, r5, r0, lsl #12
    336c:	0b3a0e03 	bleq	e86b80 <__ccfg+0xe66bd8>
    3370:	1349053b 	movtne	r0, #38203	; 0x953b
    3374:	00001702 	andeq	r1, r0, r2, lsl #14
    3378:	03003427 	movweq	r3, #1063	; 0x427
    337c:	3b0b3a0e 	blcc	2d1bbc <__ccfg+0x2b1c14>
    3380:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3384:	28000018 	stmdacs	r0, {r3, r4}
    3388:	08030034 	stmdaeq	r3, {r2, r4, r5}
    338c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3390:	17021349 	strne	r1, [r2, -r9, asr #6]
    3394:	34290000 	strtcc	r0, [r9], #-0
    3398:	3a0e0300 	bcc	383fa0 <__ccfg+0x363ff8>
    339c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    33a0:	00180213 	andseq	r0, r8, r3, lsl r2
    33a4:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    33a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    33ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    33b0:	13491927 	movtne	r1, #39207	; 0x9927
    33b4:	0000193c 	andeq	r1, r0, ip, lsr r9
    33b8:	3f002e2b 	svccc	0x00002e2b
    33bc:	3a0e0319 	bcc	384028 <__ccfg+0x364080>
    33c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    33c4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    33c8:	2c000019 	stccs	0, cr0, [r0], {25}
    33cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    33d0:	0b3a0e03 	bleq	e86be4 <__ccfg+0xe66c3c>
    33d4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    33d8:	0000193c 	andeq	r1, r0, ip, lsr r9
    33dc:	01110100 	tsteq	r1, r0, lsl #2
    33e0:	0b130e25 	bleq	4c6c7c <__ccfg+0x4a6cd4>
    33e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    33e8:	01111755 	tsteq	r1, r5, asr r7
    33ec:	00001710 	andeq	r1, r0, r0, lsl r7
    33f0:	0b002402 	bleq	c400 <__exidx_end+0x74d0>
    33f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    33f8:	0300000e 	movweq	r0, #14
    33fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3400:	0b3b0b3a 	bleq	ec60f0 <__ccfg+0xea6148>
    3404:	00001349 	andeq	r1, r0, r9, asr #6
    3408:	0b002404 	bleq	c420 <__exidx_end+0x74f0>
    340c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3410:	05000008 	streq	r0, [r0, #-8]
    3414:	0b0b000f 	bleq	2c3458 <__ccfg+0x2a34b0>
    3418:	0f060000 	svceq	0x00060000
    341c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3420:	07000013 	smladeq	r0, r3, r0, r0
    3424:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3428:	0b3a0b0b 	bleq	e8605c <__ccfg+0xe660b4>
    342c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3430:	0d080000 	stceq	0, cr0, [r8, #-0]
    3434:	3a0e0300 	bcc	38403c <__ccfg+0x364094>
    3438:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    343c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3440:	01130900 	tsteq	r3, r0, lsl #18
    3444:	0b3a0b0b 	bleq	e86078 <__ccfg+0xe660d0>
    3448:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    344c:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    3450:	3a0e0300 	bcc	384058 <__ccfg+0x3640b0>
    3454:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3458:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    345c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    3460:	0b00000b 	bleq	3494 <NOROM_RFCRTrim+0xe0>
    3464:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    3468:	0b3a0b0b 	bleq	e8609c <__ccfg+0xe660f4>
    346c:	1301053b 	movwne	r0, #5435	; 0x153b
    3470:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3474:	3a0e0300 	bcc	38407c <__ccfg+0x3640d4>
    3478:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    347c:	000b3813 	andeq	r3, fp, r3, lsl r8
    3480:	01130d00 	tsteq	r3, r0, lsl #26
    3484:	0b3a0b0b 	bleq	e860b8 <__ccfg+0xe66110>
    3488:	1301053b 	movwne	r0, #5435	; 0x153b
    348c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    3490:	3a0e0300 	bcc	384098 <__ccfg+0x3640f0>
    3494:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3498:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    349c:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    34a0:	0f00000b 	svceq	0x0000000b
    34a4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    34a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    34ac:	0b201927 	bleq	809950 <__ccfg+0x7e99a8>
    34b0:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
    34b4:	03193f01 	tsteq	r9, #1, 30
    34b8:	3b0b3a0e 	blcc	2d1cf8 <__ccfg+0x2b1d50>
    34bc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    34c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34c4:	97184006 	ldrls	r4, [r8, -r6]
    34c8:	13011942 	movwne	r1, #6466	; 0x1942
    34cc:	34110000 	ldrcc	r0, [r1], #-0
    34d0:	3a0e0300 	bcc	3840d8 <__ccfg+0x364130>
    34d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    34d8:	00180213 	andseq	r0, r8, r3, lsl r2
    34dc:	00051200 	andeq	r1, r5, r0, lsl #4
    34e0:	0b3a0803 	bleq	e854f4 <__ccfg+0xe6554c>
    34e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    34e8:	00001702 	andeq	r1, r0, r2, lsl #14
    34ec:	31001d13 	tstcc	r0, r3, lsl sp
    34f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    34f4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    34f8:	1400000b 	strne	r0, [r0], #-11
    34fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3500:	0b3a0e03 	bleq	e86d14 <__ccfg+0xe66d6c>
    3504:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3508:	06120111 			; <UNDEFINED> instruction: 0x06120111
    350c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3510:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
    3514:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3518:	0b3a0e03 	bleq	e86d2c <__ccfg+0xe66d84>
    351c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3520:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3524:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3528:	00130119 	andseq	r0, r3, r9, lsl r1
    352c:	00051600 	andeq	r1, r5, r0, lsl #12
    3530:	0b3a0e03 	bleq	e86d44 <__ccfg+0xe66d9c>
    3534:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3538:	00001802 	andeq	r1, r0, r2, lsl #16
    353c:	03003417 	movweq	r3, #1047	; 0x417
    3540:	3b0b3a0e 	blcc	2d1d80 <__ccfg+0x2b1dd8>
    3544:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3548:	18000017 	stmdane	r0, {r0, r1, r2, r4}
    354c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3550:	0b3b0b3a 	bleq	ec6240 <__ccfg+0xea6298>
    3554:	17021349 	strne	r1, [r2, -r9, asr #6]
    3558:	34190000 	ldrcc	r0, [r9], #-0
    355c:	3a0e0300 	bcc	384164 <__ccfg+0x3641bc>
    3560:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3564:	1a000013 	bne	35b8 <TrimAfterColdResetWakeupFromShutDown+0xb0>
    3568:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    356c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3570:	17021349 	strne	r1, [r2, -r9, asr #6]
    3574:	341b0000 	ldrcc	r0, [fp], #-0
    3578:	3a0e0300 	bcc	384180 <__ccfg+0x3641d8>
    357c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3580:	00061c13 	andeq	r1, r6, r3, lsl ip
    3584:	00341c00 	eorseq	r1, r4, r0, lsl #24
    3588:	0b3a0803 	bleq	e8559c <__ccfg+0xe655f4>
    358c:	1349053b 	movtne	r0, #38203	; 0x953b
    3590:	00001702 	andeq	r1, r0, r2, lsl #14
    3594:	0182891d 	orreq	r8, r2, sp, lsl r9
    3598:	31011101 	tstcc	r1, r1, lsl #2
    359c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    35a0:	0001828a 	andeq	r8, r1, sl, lsl #5
    35a4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    35a8:	1f000018 	svcne	0x00000018
    35ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    35b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    35b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    35b8:	01200000 			; <UNDEFINED> instruction: 0x01200000
    35bc:	01134901 	tsteq	r3, r1, lsl #18
    35c0:	21000013 	tstcs	r0, r3, lsl r0
    35c4:	13490021 	movtne	r0, #36897	; 0x9021
    35c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    35cc:	03003422 	movweq	r3, #1058	; 0x422
    35d0:	3b0b3a0e 	blcc	2d1e10 <__ccfg+0x2b1e68>
    35d4:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    35d8:	2300000a 	movwcs	r0, #10
    35dc:	13490026 	movtne	r0, #36902	; 0x9026
    35e0:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
    35e4:	03193f01 	tsteq	r9, #1, 30
    35e8:	3b0b3a0e 	blcc	2d1e28 <__ccfg+0x2b1e80>
    35ec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    35f0:	00193c13 	andseq	r3, r9, r3, lsl ip
    35f4:	00052500 	andeq	r2, r5, r0, lsl #10
    35f8:	00001349 	andeq	r1, r0, r9, asr #6
    35fc:	01110100 	tsteq	r1, r0, lsl #2
    3600:	0b130e25 	bleq	4c6e9c <__ccfg+0x4a6ef4>
    3604:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3608:	01111755 	tsteq	r1, r5, asr r7
    360c:	00001710 	andeq	r1, r0, r0, lsl r7
    3610:	0b002402 	bleq	c620 <__exidx_end+0x76f0>
    3614:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3618:	0300000e 	movweq	r0, #14
    361c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3620:	0b3b0b3a 	bleq	ec6310 <__ccfg+0xea6368>
    3624:	00001349 	andeq	r1, r0, r9, asr #6
    3628:	0b002404 	bleq	c640 <__exidx_end+0x7710>
    362c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    3630:	05000008 	streq	r0, [r0, #-8]
    3634:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3638:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    363c:	0b201927 	bleq	809ae0 <__ccfg+0x7e9b38>
    3640:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    3644:	3a0e0300 	bcc	38424c <__ccfg+0x3642a4>
    3648:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    364c:	000b2019 	andeq	r2, fp, r9, lsl r0
    3650:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    3654:	0b3a0e03 	bleq	e86e68 <__ccfg+0xe66ec0>
    3658:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    365c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3660:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3664:	00130119 	andseq	r0, r3, r9, lsl r1
    3668:	00050800 	andeq	r0, r5, r0, lsl #16
    366c:	0b3a0e03 	bleq	e86e80 <__ccfg+0xe66ed8>
    3670:	1349053b 	movtne	r0, #38203	; 0x953b
    3674:	00001702 	andeq	r1, r0, r2, lsl #14
    3678:	03003409 	movweq	r3, #1033	; 0x409
    367c:	3b0b3a0e 	blcc	2d1ebc <__ccfg+0x2b1f14>
    3680:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3684:	0a000017 	beq	36e8 <NOROM_SetupSetVddrLevel+0x68>
    3688:	1331001d 	teqne	r1, #29
    368c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3690:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3694:	0b0b0000 	bleq	2c369c <__ccfg+0x2a36f4>
    3698:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    369c:	00130106 	andseq	r0, r3, r6, lsl #2
    36a0:	82890c00 	addhi	r0, r9, #0, 24
    36a4:	01110101 	tsteq	r1, r1, lsl #2
    36a8:	13011331 	movwne	r1, #4913	; 0x1331
    36ac:	8a0d0000 	bhi	3436b4 <__ccfg+0x32370c>
    36b0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    36b4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    36b8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    36bc:	11010182 	smlabbne	r1, r2, r1, r0
    36c0:	0f000001 	svceq	0x00000001
    36c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    36c8:	0b3a0e03 	bleq	e86edc <__ccfg+0xe66f34>
    36cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    36d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    36d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    36d8:	00130119 	andseq	r0, r3, r9, lsl r1
    36dc:	00341000 	eorseq	r1, r4, r0
    36e0:	0b3a0e03 	bleq	e86ef4 <__ccfg+0xe66f4c>
    36e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    36e8:	00001702 	andeq	r1, r0, r2, lsl #14
    36ec:	01828911 	orreq	r8, r2, r1, lsl r9
    36f0:	31011100 	mrscc	r1, (UNDEF: 17)
    36f4:	12000013 	andne	r0, r0, #19
    36f8:	01018289 	smlabbeq	r1, r9, r2, r8
    36fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3700:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    3704:	03193f01 	tsteq	r9, #1, 30
    3708:	3b0b3a0e 	blcc	2d1f48 <__ccfg+0x2b1fa0>
    370c:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3710:	00130119 	andseq	r0, r3, r9, lsl r1
    3714:	00051400 	andeq	r1, r5, r0, lsl #8
    3718:	00001349 	andeq	r1, r0, r9, asr #6
    371c:	3f002e15 	svccc	0x00002e15
    3720:	3a0e0319 	bcc	38438c <__ccfg+0x3643e4>
    3724:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3728:	00193c19 	andseq	r3, r9, r9, lsl ip
    372c:	002e1600 	eoreq	r1, lr, r0, lsl #12
    3730:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3734:	0b3b0b3a 	bleq	ec6424 <__ccfg+0xea647c>
    3738:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    373c:	01000000 	mrseq	r0, (UNDEF: 0)
    3740:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3744:	0e030b13 	vmoveq.32	d3[0], r0
    3748:	17550e1b 	smmlane	r5, fp, lr, r0
    374c:	17100111 			; <UNDEFINED> instruction: 0x17100111
    3750:	24020000 	strcs	r0, [r2], #-0
    3754:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3758:	000e030b 	andeq	r0, lr, fp, lsl #6
    375c:	00160300 	andseq	r0, r6, r0, lsl #6
    3760:	0b3a0e03 	bleq	e86f74 <__ccfg+0xe66fcc>
    3764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3768:	24040000 	strcs	r0, [r4], #-0
    376c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3770:	0008030b 	andeq	r0, r8, fp, lsl #6
    3774:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3778:	0b3a0e03 	bleq	e86f8c <__ccfg+0xe66fe4>
    377c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3780:	0b201349 	bleq	8084ac <__ccfg+0x7e8504>
    3784:	00001301 	andeq	r1, r0, r1, lsl #6
    3788:	03000506 	movweq	r0, #1286	; 0x506
    378c:	3b0b3a0e 	blcc	2d1fcc <__ccfg+0x2b2024>
    3790:	0013490b 	andseq	r4, r3, fp, lsl #18
    3794:	00340700 	eorseq	r0, r4, r0, lsl #14
    3798:	0b3a0e03 	bleq	e86fac <__ccfg+0xe67004>
    379c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    37a0:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    37a4:	03193f01 	tsteq	r9, #1, 30
    37a8:	3b0b3a0e 	blcc	2d1fe8 <__ccfg+0x2b2040>
    37ac:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    37b0:	010b2013 	tsteq	fp, r3, lsl r0
    37b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    37b8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    37bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    37c0:	00001349 	andeq	r1, r0, r9, asr #6
    37c4:	0300340a 	movweq	r3, #1034	; 0x40a
    37c8:	3b0b3a0e 	blcc	2d2008 <__ccfg+0x2b2060>
    37cc:	00134905 	andseq	r4, r3, r5, lsl #18
    37d0:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    37d4:	0b3a0e03 	bleq	e86fe8 <__ccfg+0xe67040>
    37d8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    37dc:	00000b20 	andeq	r0, r0, r0, lsr #22
    37e0:	3f012e0c 	svccc	0x00012e0c
    37e4:	3a0e0319 	bcc	384450 <__ccfg+0x3644a8>
    37e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    37ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    37f0:	97184006 	ldrls	r4, [r8, -r6]
    37f4:	13011942 	movwne	r1, #6466	; 0x1942
    37f8:	050d0000 	streq	r0, [sp, #-0]
    37fc:	3a0e0300 	bcc	384404 <__ccfg+0x36445c>
    3800:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3804:	00170213 	andseq	r0, r7, r3, lsl r2
    3808:	00340e00 	eorseq	r0, r4, r0, lsl #28
    380c:	0b3a0e03 	bleq	e87020 <__ccfg+0xe67078>
    3810:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3814:	00001802 	andeq	r1, r0, r2, lsl #16
    3818:	0300340f 	movweq	r3, #1039	; 0x40f
    381c:	3b0b3a0e 	blcc	2d205c <__ccfg+0x2b20b4>
    3820:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3824:	10000017 	andne	r0, r0, r7, lsl r0
    3828:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    382c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3830:	0b590b58 	bleq	1646598 <__ccfg+0x16265f0>
    3834:	00001301 	andeq	r1, r0, r1, lsl #6
    3838:	31000511 	tstcc	r0, r1, lsl r5
    383c:	12000013 	andne	r0, r0, #19
    3840:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3844:	34130000 	ldrcc	r0, [r3], #-0
    3848:	02133100 	andseq	r3, r3, #0, 2
    384c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    3850:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3854:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3858:	0b590b58 	bleq	16465c0 <__ccfg+0x1626618>
    385c:	0b150000 	bleq	543864 <__ccfg+0x5238bc>
    3860:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3864:	16000006 	strne	r0, [r0], -r6
    3868:	13310034 	teqne	r1, #52	; 0x34
    386c:	00001702 	andeq	r1, r0, r2, lsl #14
    3870:	3f012e17 	svccc	0x00012e17
    3874:	3a0e0319 	bcc	3844e0 <__ccfg+0x364538>
    3878:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    387c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3880:	97184006 	ldrls	r4, [r8, -r6]
    3884:	13011942 	movwne	r1, #6466	; 0x1942
    3888:	1d180000 	ldcne	0, cr0, [r8, #-0]
    388c:	11133101 	tstne	r3, r1, lsl #2
    3890:	58061201 	stmdapl	r6, {r0, r9, ip}
    3894:	010b590b 	tsteq	fp, fp, lsl #18
    3898:	19000013 	stmdbne	r0, {r0, r1, r4}
    389c:	01018289 	smlabbeq	r1, r9, r2, r8
    38a0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    38a4:	8a1a0000 	bhi	6838ac <__ccfg+0x663904>
    38a8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    38ac:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    38b0:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    38b4:	03193f01 	tsteq	r9, #1, 30
    38b8:	3b0b3a0e 	blcc	2d20f8 <__ccfg+0x2b2150>
    38bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    38c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38c4:	97184006 	ldrls	r4, [r8, -r6]
    38c8:	13011942 	movwne	r1, #6466	; 0x1942
    38cc:	051c0000 	ldreq	r0, [ip, #-0]
    38d0:	3a0e0300 	bcc	3844d8 <__ccfg+0x364530>
    38d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    38d8:	00170213 	andseq	r0, r7, r3, lsl r2
    38dc:	00341d00 	eorseq	r1, r4, r0, lsl #26
    38e0:	0b3a0e03 	bleq	e870f4 <__ccfg+0xe6714c>
    38e4:	1349053b 	movtne	r0, #38203	; 0x953b
    38e8:	00001702 	andeq	r1, r0, r2, lsl #14
    38ec:	31012e1e 	tstcc	r1, lr, lsl lr
    38f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    38f4:	97184006 	ldrls	r4, [r8, -r6]
    38f8:	13011942 	movwne	r1, #6466	; 0x1942
    38fc:	051f0000 	ldreq	r0, [pc, #-0]	; 3904 <NOROM_SetupGetTrimForXoscHfCtl+0x24>
    3900:	02133100 	andseq	r3, r3, #0, 2
    3904:	20000017 	andcs	r0, r0, r7, lsl r0
    3908:	13310034 	teqne	r1, #52	; 0x34
    390c:	1d210000 	stcne	0, cr0, [r1, #-0]
    3910:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3914:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3918:	0105590b 	tsteq	r5, fp, lsl #18
    391c:	22000013 	andcs	r0, r0, #19
    3920:	01018289 	smlabbeq	r1, r9, r2, r8
    3924:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3928:	00001301 	andeq	r1, r0, r1, lsl #6
    392c:	01828923 	orreq	r8, r2, r3, lsr #18
    3930:	31011100 	mrscc	r1, (UNDEF: 17)
    3934:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    3938:	01018289 	smlabbeq	r1, r9, r2, r8
    393c:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    3940:	00130118 	andseq	r0, r3, r8, lsl r1
    3944:	001d2500 	andseq	r2, sp, r0, lsl #10
    3948:	01111331 	tsteq	r1, r1, lsr r3
    394c:	0b580612 	bleq	160519c <__ccfg+0x15e51f4>
    3950:	00000559 	andeq	r0, r0, r9, asr r5
    3954:	01828926 	orreq	r8, r2, r6, lsr #18
    3958:	01011101 	tsteq	r1, r1, lsl #2
    395c:	27000013 	smladcs	r0, r3, r0, r0
    3960:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3964:	0b3a0e03 	bleq	e87178 <__ccfg+0xe671d0>
    3968:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    396c:	1301193c 	movwne	r1, #6460	; 0x193c
    3970:	05280000 	streq	r0, [r8, #-0]!
    3974:	00134900 	andseq	r4, r3, r0, lsl #18
    3978:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    397c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3980:	0b3b0b3a 	bleq	ec6670 <__ccfg+0xea66c8>
    3984:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3988:	00001301 	andeq	r1, r0, r1, lsl #6
    398c:	3f012e2a 	svccc	0x00012e2a
    3990:	3a0e0319 	bcc	3845fc <__ccfg+0x364654>
    3994:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3998:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    399c:	00000019 	andeq	r0, r0, r9, lsl r0
    39a0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    39a4:	030b130e 	movweq	r1, #45838	; 0xb30e
    39a8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    39ac:	10011117 	andne	r1, r1, r7, lsl r1
    39b0:	02000017 	andeq	r0, r0, #23
    39b4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    39b8:	0b3b0b3a 	bleq	ec66a8 <__ccfg+0xea6700>
    39bc:	00001349 	andeq	r1, r0, r9, asr #6
    39c0:	0b002403 	bleq	c9d4 <__exidx_end+0x7aa4>
    39c4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    39c8:	0400000e 	streq	r0, [r0], #-14
    39cc:	0b0b0024 	bleq	2c3a64 <__ccfg+0x2a3abc>
    39d0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    39d4:	0f050000 	svceq	0x00050000
    39d8:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    39dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    39e0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    39e4:	15070000 	strne	r0, [r7, #-0]
    39e8:	01192701 	tsteq	r9, r1, lsl #14
    39ec:	08000013 	stmdaeq	r0, {r0, r1, r4}
    39f0:	13490005 	movtne	r0, #36869	; 0x9005
    39f4:	15090000 	strne	r0, [r9, #-0]
    39f8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    39fc:	00130113 	andseq	r0, r3, r3, lsl r1
    3a00:	00150a00 	andseq	r0, r5, r0, lsl #20
    3a04:	13491927 	movtne	r1, #39207	; 0x9927
    3a08:	130b0000 	movwne	r0, #45056	; 0xb000
    3a0c:	3a0b0b01 	bcc	2c6618 <__ccfg+0x2a6670>
    3a10:	010b3b0b 	tsteq	fp, fp, lsl #22
    3a14:	0c000013 	stceq	0, cr0, [r0], {19}
    3a18:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3a1c:	0b3b0b3a 	bleq	ec670c <__ccfg+0xea6764>
    3a20:	0b381349 	bleq	e0874c <__ccfg+0xde87a4>
    3a24:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3a28:	3a0e0301 	bcc	384634 <__ccfg+0x36468c>
    3a2c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3a30:	010b2019 	tsteq	fp, r9, lsl r0
    3a34:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3a38:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3a40:	00001349 	andeq	r1, r0, r9, asr #6
    3a44:	03002e0f 	movweq	r2, #3599	; 0xe0f
    3a48:	3b0b3a0e 	blcc	2d2288 <__ccfg+0x2b22e0>
    3a4c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3a50:	000b2013 	andeq	r2, fp, r3, lsl r0
    3a54:	002e1000 	eoreq	r1, lr, r0
    3a58:	0b3a0e03 	bleq	e8726c <__ccfg+0xe672c4>
    3a5c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3a60:	00000b20 	andeq	r0, r0, r0, lsr #22
    3a64:	03012e11 	movweq	r2, #7697	; 0x1e11
    3a68:	3b0b3a0e 	blcc	2d22a8 <__ccfg+0x2b2300>
    3a6c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3a70:	010b2013 	tsteq	fp, r3, lsl r0
    3a74:	12000013 	andne	r0, r0, #19
    3a78:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3a7c:	0b3b0b3a 	bleq	ec676c <__ccfg+0xea67c4>
    3a80:	00001349 	andeq	r1, r0, r9, asr #6
    3a84:	03003413 	movweq	r3, #1043	; 0x413
    3a88:	3b0b3a0e 	blcc	2d22c8 <__ccfg+0x2b2320>
    3a8c:	0013490b 	andseq	r4, r3, fp, lsl #18
    3a90:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    3a94:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3a98:	0b3b0b3a 	bleq	ec6788 <__ccfg+0xea67e0>
    3a9c:	01111927 	tsteq	r1, r7, lsr #18
    3aa0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3aa4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3aa8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3aac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3ab0:	0b3b0b3a 	bleq	ec67a0 <__ccfg+0xea67f8>
    3ab4:	17021349 	strne	r1, [r2, -r9, asr #6]
    3ab8:	34160000 	ldrcc	r0, [r6], #-0
    3abc:	3a0e0300 	bcc	3846c4 <__ccfg+0x36471c>
    3ac0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ac4:	00051c13 	andeq	r1, r5, r3, lsl ip
    3ac8:	011d1700 	tsteq	sp, r0, lsl #14
    3acc:	01521331 	cmpeq	r2, r1, lsr r3
    3ad0:	0b581755 	bleq	160982c <__ccfg+0x15e9884>
    3ad4:	13010b59 	movwne	r0, #7001	; 0x1b59
    3ad8:	05180000 	ldreq	r0, [r8, #-0]
    3adc:	1c133100 	ldfnes	f3, [r3], {-0}
    3ae0:	1900000b 	stmdbne	r0, {r0, r1, r3}
    3ae4:	1331001d 	teqne	r1, #29
    3ae8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3aec:	0b590b58 	bleq	1646854 <__ccfg+0x16268ac>
    3af0:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    3af4:	11133101 	tstne	r3, r1, lsl #2
    3af8:	58061201 	stmdapl	r6, {r0, r9, ip}
    3afc:	010b590b 	tsteq	fp, fp, lsl #18
    3b00:	1b000013 	blne	3b54 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x4c>
    3b04:	00018289 	andeq	r8, r1, r9, lsl #5
    3b08:	13310111 	teqne	r1, #1073741828	; 0x40000004
    3b0c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    3b10:	11010182 	smlabbne	r1, r2, r1, r0
    3b14:	00130101 	andseq	r0, r3, r1, lsl #2
    3b18:	828a1d00 	addhi	r1, sl, #0, 26
    3b1c:	18020001 	stmdane	r2, {r0}
    3b20:	00184291 	mulseq	r8, r1, r2
    3b24:	82891e00 	addhi	r1, r9, #0, 28
    3b28:	01110101 	tsteq	r1, r1, lsl #2
    3b2c:	13011331 	movwne	r1, #4913	; 0x1331
    3b30:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3b34:	11010182 	smlabbne	r1, r2, r1, r0
    3b38:	20000001 	andcs	r0, r0, r1
    3b3c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3b40:	0b3a0e03 	bleq	e87354 <__ccfg+0xe673ac>
    3b44:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3b48:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3b4c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3b50:	00130119 	andseq	r0, r3, r9, lsl r1
    3b54:	00052100 	andeq	r2, r5, r0, lsl #2
    3b58:	0b3a0e03 	bleq	e8736c <__ccfg+0xe673c4>
    3b5c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3b60:	00001702 	andeq	r1, r0, r2, lsl #14
    3b64:	03003422 	movweq	r3, #1058	; 0x422
    3b68:	3b0b3a0e 	blcc	2d23a8 <__ccfg+0x2b2400>
    3b6c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3b70:	23000018 	movwcs	r0, #24
    3b74:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3b78:	0b3b0b3a 	bleq	ec6868 <__ccfg+0xea68c0>
    3b7c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3b80:	34240000 	strtcc	r0, [r4], #-0
    3b84:	3a080300 	bcc	20478c <__ccfg+0x1e47e4>
    3b88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3b8c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    3b90:	0111010b 	tsteq	r1, fp, lsl #2
    3b94:	13010612 	movwne	r0, #5650	; 0x1612
    3b98:	34260000 	strtcc	r0, [r6], #-0
    3b9c:	3a0e0300 	bcc	3847a4 <__ccfg+0x3647fc>
    3ba0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3ba4:	00170213 	andseq	r0, r7, r3, lsl r2
    3ba8:	011d2700 	tsteq	sp, r0, lsl #14
    3bac:	01111331 	tsteq	r1, r1, lsr r3
    3bb0:	0b580612 	bleq	1605400 <__ccfg+0x15e5458>
    3bb4:	13010559 	movwne	r0, #5465	; 0x1559
    3bb8:	05280000 	streq	r0, [r8, #-0]!
    3bbc:	00133100 	andseq	r3, r3, r0, lsl #2
    3bc0:	010b2900 	tsteq	fp, r0, lsl #18
    3bc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3bc8:	342a0000 	strtcc	r0, [sl], #-0
    3bcc:	02133100 	andseq	r3, r3, #0, 2
    3bd0:	2b000017 	blcs	3c34 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>
    3bd4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3bd8:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3bdc:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    3be0:	00001301 	andeq	r1, r0, r1, lsl #6
    3be4:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    3be8:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    3bec:	13490026 	movtne	r0, #36902	; 0x9026
    3bf0:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    3bf4:	03193f00 	tsteq	r9, #0, 30
    3bf8:	3b0b3a0e 	blcc	2d2438 <__ccfg+0x2b2490>
    3bfc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3c00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3c04:	97184006 	ldrls	r4, [r8, -r6]
    3c08:	00001942 	andeq	r1, r0, r2, asr #18
    3c0c:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    3c10:	00130113 	andseq	r0, r3, r3, lsl r1
    3c14:	00213000 	eoreq	r3, r1, r0
    3c18:	0b2f1349 	bleq	bc8944 <__ccfg+0xba899c>
    3c1c:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    3c20:	03193f01 	tsteq	r9, #1, 30
    3c24:	3b0b3a0e 	blcc	2d2464 <__ccfg+0x2b24bc>
    3c28:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3c2c:	00130119 	andseq	r0, r3, r9, lsl r1
    3c30:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    3c34:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3c38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3c3c:	13491927 	movtne	r1, #39207	; 0x9927
    3c40:	1301193c 	movwne	r1, #6460	; 0x193c
    3c44:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    3c48:	03193f00 	tsteq	r9, #0, 30
    3c4c:	3b0b3a0e 	blcc	2d248c <__ccfg+0x2b24e4>
    3c50:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3c54:	00193c13 	andseq	r3, r9, r3, lsl ip
    3c58:	11010000 	mrsne	r0, (UNDEF: 1)
    3c5c:	130e2501 	movwne	r2, #58625	; 0xe501
    3c60:	1b0e030b 	blne	384894 <__ccfg+0x3648ec>
    3c64:	1117550e 	tstne	r7, lr, lsl #10
    3c68:	00171001 	andseq	r1, r7, r1
    3c6c:	00240200 	eoreq	r0, r4, r0, lsl #4
    3c70:	0b3e0b0b 	bleq	f868a4 <__ccfg+0xf668fc>
    3c74:	00000e03 	andeq	r0, r0, r3, lsl #28
    3c78:	03001603 	movweq	r1, #1539	; 0x603
    3c7c:	3b0b3a0e 	blcc	2d24bc <__ccfg+0x2b2514>
    3c80:	0013490b 	andseq	r4, r3, fp, lsl #18
    3c84:	00240400 	eoreq	r0, r4, r0, lsl #8
    3c88:	0b3e0b0b 	bleq	f868bc <__ccfg+0xf66914>
    3c8c:	00000803 	andeq	r0, r0, r3, lsl #16
    3c90:	0b010405 	bleq	44cac <__ccfg+0x24d04>
    3c94:	3b0b3a0b 	blcc	2d24c8 <__ccfg+0x2b2520>
    3c98:	0013010b 	andseq	r0, r3, fp, lsl #2
    3c9c:	00280600 	eoreq	r0, r8, r0, lsl #12
    3ca0:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    3ca4:	04070000 	streq	r0, [r7], #-0
    3ca8:	3a0b0b01 	bcc	2c68b4 <__ccfg+0x2a690c>
    3cac:	01053b0b 	tsteq	r5, fp, lsl #22
    3cb0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    3cb4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    3cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3cbc:	00001349 	andeq	r1, r0, r9, asr #6
    3cc0:	03002e09 	movweq	r2, #3593	; 0xe09
    3cc4:	3b0b3a0e 	blcc	2d2504 <__ccfg+0x2b255c>
    3cc8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3ccc:	000b2013 	andeq	r2, fp, r3, lsl r0
    3cd0:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    3cd4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3cd8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3cdc:	13491927 	movtne	r1, #39207	; 0x9927
    3ce0:	13010b20 	movwne	r0, #6944	; 0x1b20
    3ce4:	340b0000 	strcc	r0, [fp], #-0
    3ce8:	3a0e0300 	bcc	3848f0 <__ccfg+0x364948>
    3cec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3cf0:	0c000013 	stceq	0, cr0, [r0], {19}
    3cf4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3cf8:	0b3a0e03 	bleq	e8750c <__ccfg+0xe67564>
    3cfc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3d00:	01111349 	tsteq	r1, r9, asr #6
    3d04:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3d08:	00194297 	mulseq	r9, r7, r2
    3d0c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3d10:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3d14:	0b3b0b3a 	bleq	ec6a04 <__ccfg+0xea6a5c>
    3d18:	13491927 	movtne	r1, #39207	; 0x9927
    3d1c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d20:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3d24:	00130119 	andseq	r0, r3, r9, lsl r1
    3d28:	00340e00 	eorseq	r0, r4, r0, lsl #28
    3d2c:	0b3a0e03 	bleq	e87540 <__ccfg+0xe67598>
    3d30:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3d34:	00001702 	andeq	r1, r0, r2, lsl #14
    3d38:	31012e0f 	tstcc	r1, pc, lsl #28
    3d3c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d40:	97184006 	ldrls	r4, [r8, -r6]
    3d44:	13011942 	movwne	r1, #6466	; 0x1942
    3d48:	34100000 	ldrcc	r0, [r0], #-0
    3d4c:	02133100 	andseq	r3, r3, #0, 2
    3d50:	11000017 	tstne	r0, r7, lsl r0
    3d54:	0111010b 	tsteq	r1, fp, lsl #2
    3d58:	00000612 	andeq	r0, r0, r2, lsl r6
    3d5c:	31003412 	tstcc	r0, r2, lsl r4
    3d60:	13000013 	movwne	r0, #19
    3d64:	1331001d 	teqne	r1, #29
    3d68:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3d6c:	0b590b58 	bleq	1646ad4 <__ccfg+0x1626b2c>
    3d70:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    3d74:	03193f01 	tsteq	r9, #1, 30
    3d78:	3b0b3a0e 	blcc	2d25b8 <__ccfg+0x2b2610>
    3d7c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3d80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3d84:	97184006 	ldrls	r4, [r8, -r6]
    3d88:	13011942 	movwne	r1, #6466	; 0x1942
    3d8c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    3d90:	11000182 	smlabbne	r0, r2, r1, r0
    3d94:	00133101 	andseq	r3, r3, r1, lsl #2
    3d98:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    3d9c:	0b3a0e03 	bleq	e875b0 <__ccfg+0xe67608>
    3da0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3da4:	0b201349 	bleq	808ad0 <__ccfg+0x7e8b28>
    3da8:	00001301 	andeq	r1, r0, r1, lsl #6
    3dac:	03003417 	movweq	r3, #1047	; 0x417
    3db0:	3b0b3a0e 	blcc	2d25f0 <__ccfg+0x2b2648>
    3db4:	00134905 	andseq	r4, r3, r5, lsl #18
    3db8:	00341800 	eorseq	r1, r4, r0, lsl #16
    3dbc:	0b3a0e03 	bleq	e875d0 <__ccfg+0xe67628>
    3dc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3dc4:	00001802 	andeq	r1, r0, r2, lsl #16
    3dc8:	31001d19 	tstcc	r0, r9, lsl sp
    3dcc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3dd0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3dd4:	1a00000b 	bne	3e08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b0>
    3dd8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3ddc:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3de0:	0b590b58 	bleq	1646b48 <__ccfg+0x1626ba0>
    3de4:	00001301 	andeq	r1, r0, r1, lsl #6
    3de8:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    3dec:	1c000017 	stcne	0, cr0, [r0], {23}
    3df0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    3df4:	0b3a0e03 	bleq	e87608 <__ccfg+0xe67660>
    3df8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3dfc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3e00:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3e04:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    3e08:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3e0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3e10:	0b590b58 	bleq	1646b78 <__ccfg+0x1626bd0>
    3e14:	00001301 	andeq	r1, r0, r1, lsl #6
    3e18:	31011d1e 	tstcc	r1, lr, lsl sp
    3e1c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3e20:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3e24:	0000000b 	andeq	r0, r0, fp
    3e28:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3e2c:	030b130e 	movweq	r1, #45838	; 0xb30e
    3e30:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3e34:	10011117 	andne	r1, r1, r7, lsl r1
    3e38:	02000017 	andeq	r0, r0, #23
    3e3c:	0b0b0024 	bleq	2c3ed4 <__ccfg+0x2a3f2c>
    3e40:	0e030b3e 	vmoveq.16	d3[0], r0
    3e44:	16030000 	strne	r0, [r3], -r0
    3e48:	3a0e0300 	bcc	384a50 <__ccfg+0x364aa8>
    3e4c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3e50:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3e54:	0b0b0024 	bleq	2c3eec <__ccfg+0x2a3f44>
    3e58:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3e5c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    3e60:	3a0e0301 	bcc	384a6c <__ccfg+0x364ac4>
    3e64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3e68:	010b2019 	tsteq	fp, r9, lsl r0
    3e6c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3e70:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3e74:	0b3b0b3a 	bleq	ec6b64 <__ccfg+0xea6bbc>
    3e78:	00001349 	andeq	r1, r0, r9, asr #6
    3e7c:	03003407 	movweq	r3, #1031	; 0x407
    3e80:	3b0b3a0e 	blcc	2d26c0 <__ccfg+0x2b2718>
    3e84:	0013490b 	andseq	r4, r3, fp, lsl #18
    3e88:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    3e8c:	0b3a0e03 	bleq	e876a0 <__ccfg+0xe676f8>
    3e90:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3e94:	0b201349 	bleq	808bc0 <__ccfg+0x7e8c18>
    3e98:	00001301 	andeq	r1, r0, r1, lsl #6
    3e9c:	31012e09 	tstcc	r1, r9, lsl #28
    3ea0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3ea4:	97184006 	ldrls	r4, [r8, -r6]
    3ea8:	13011942 	movwne	r1, #6466	; 0x1942
    3eac:	050a0000 	streq	r0, [sl, #-0]
    3eb0:	02133100 	andseq	r3, r3, #0, 2
    3eb4:	0b000017 	bleq	3f18 <NOROM_ChipInfo_GetChipFamily+0x28>
    3eb8:	13310034 	teqne	r1, #52	; 0x34
    3ebc:	00001702 	andeq	r1, r0, r2, lsl #14
    3ec0:	3100050c 	tstcc	r0, ip, lsl #10
    3ec4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    3ec8:	82890d00 	addhi	r0, r9, #0, 26
    3ecc:	01110001 	tsteq	r1, r1
    3ed0:	00001331 	andeq	r1, r0, r1, lsr r3
    3ed4:	0182890e 	orreq	r8, r2, lr, lsl #18
    3ed8:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    3edc:	13311942 	teqne	r1, #1081344	; 0x108000
    3ee0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    3ee4:	03193f01 	tsteq	r9, #1, 30
    3ee8:	3b0b3a0e 	blcc	2d2728 <__ccfg+0x2b2780>
    3eec:	11192705 	tstne	r9, r5, lsl #14
    3ef0:	40061201 	andmi	r1, r6, r1, lsl #4
    3ef4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3ef8:	00001301 	andeq	r1, r0, r1, lsl #6
    3efc:	03000510 	movweq	r0, #1296	; 0x510
    3f00:	3b0b3a0e 	blcc	2d2740 <__ccfg+0x2b2798>
    3f04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3f08:	11000017 	tstne	r0, r7, lsl r0
    3f0c:	01018289 	smlabbeq	r1, r9, r2, r8
    3f10:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    3f14:	00133119 	andseq	r3, r3, r9, lsl r1
    3f18:	828a1200 	addhi	r1, sl, #0, 4
    3f1c:	18020001 	stmdane	r2, {r0}
    3f20:	00184291 	mulseq	r8, r1, r2
    3f24:	00341300 	eorseq	r1, r4, r0, lsl #6
    3f28:	0b3a0e03 	bleq	e8773c <__ccfg+0xe67794>
    3f2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3f30:	00001702 	andeq	r1, r0, r2, lsl #14
    3f34:	3f012e14 	svccc	0x00012e14
    3f38:	3a0e0319 	bcc	384ba4 <__ccfg+0x364bfc>
    3f3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3f40:	11134919 	tstne	r3, r9, lsl r9
    3f44:	40061201 	andmi	r1, r6, r1, lsl #4
    3f48:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3f4c:	00001301 	andeq	r1, r0, r1, lsl #6
    3f50:	31011d15 	tstcc	r1, r5, lsl sp
    3f54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3f58:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    3f5c:	1600000b 	strne	r0, [r0], -fp
    3f60:	0111010b 	tsteq	r1, fp, lsl #2
    3f64:	00000612 	andeq	r0, r0, r2, lsl r6
    3f68:	3f002e17 	svccc	0x00002e17
    3f6c:	3a0e0319 	bcc	384bd8 <__ccfg+0x364c30>
    3f70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3f74:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3f78:	00000019 	andeq	r0, r0, r9, lsl r0
    3f7c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3f80:	030b130e 	movweq	r1, #45838	; 0xb30e
    3f84:	110e1b0e 	tstne	lr, lr, lsl #22
    3f88:	10061201 	andne	r1, r6, r1, lsl #4
    3f8c:	02000017 	andeq	r0, r0, #23
    3f90:	0b0b0024 	bleq	2c4028 <__ccfg+0x2a4080>
    3f94:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3f98:	16030000 	strne	r0, [r3], -r0
    3f9c:	3a0e0300 	bcc	384ba4 <__ccfg+0x364bfc>
    3fa0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fa4:	0013490b 	andseq	r4, r3, fp, lsl #18
    3fa8:	00240400 	eoreq	r0, r4, r0, lsl #8
    3fac:	0b3e0b0b 	bleq	f86be0 <__ccfg+0xf66c38>
    3fb0:	00000e03 	andeq	r0, r0, r3, lsl #28
    3fb4:	03001605 	movweq	r1, #1541	; 0x605
    3fb8:	3b0b3a0e 	blcc	2d27f8 <__ccfg+0x2b2850>
    3fbc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    3fc0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    3fc4:	13490026 	movtne	r0, #36902	; 0x9026
    3fc8:	17070000 	strne	r0, [r7, -r0]
    3fcc:	3a0b0b01 	bcc	2c6bd8 <__ccfg+0x2a6c30>
    3fd0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3fd4:	0013010b 	andseq	r0, r3, fp, lsl #2
    3fd8:	000d0800 	andeq	r0, sp, r0, lsl #16
    3fdc:	0b3a0e03 	bleq	e877f0 <__ccfg+0xe67848>
    3fe0:	0b390b3b 	bleq	e46cd4 <__ccfg+0xe26d2c>
    3fe4:	00001349 	andeq	r1, r0, r9, asr #6
    3fe8:	49010109 	stmdbmi	r1, {r0, r3, r8}
    3fec:	00130113 	andseq	r0, r3, r3, lsl r1
    3ff0:	00210a00 	eoreq	r0, r1, r0, lsl #20
    3ff4:	0b2f1349 	bleq	bc8d20 <__ccfg+0xba8d78>
    3ff8:	130b0000 	movwne	r0, #45056	; 0xb000
    3ffc:	3a0b0b01 	bcc	2c6c08 <__ccfg+0x2a6c60>
    4000:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4004:	0013010b 	andseq	r0, r3, fp, lsl #2
    4008:	000d0c00 	andeq	r0, sp, r0, lsl #24
    400c:	0b3a0e03 	bleq	e87820 <__ccfg+0xe67878>
    4010:	0b390b3b 	bleq	e46d04 <__ccfg+0xe26d5c>
    4014:	0b381349 	bleq	e08d40 <__ccfg+0xde8d98>
    4018:	0f0d0000 	svceq	0x000d0000
    401c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4020:	00370e00 	eorseq	r0, r7, r0, lsl #28
    4024:	00001349 	andeq	r1, r0, r9, asr #6
    4028:	0301130f 	movweq	r1, #4879	; 0x130f
    402c:	3a0b0b0e 	bcc	2c6c6c <__ccfg+0x2a6cc4>
    4030:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4034:	0013010b 	andseq	r0, r3, fp, lsl #2
    4038:	000d1000 	andeq	r1, sp, r0
    403c:	0b3a0803 	bleq	e86050 <__ccfg+0xe660a8>
    4040:	0b390b3b 	bleq	e46d34 <__ccfg+0xe26d8c>
    4044:	0b381349 	bleq	e08d70 <__ccfg+0xde8dc8>
    4048:	0f110000 	svceq	0x00110000
    404c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4050:	12000013 	andne	r0, r0, #19
    4054:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4058:	0b3a050b 	bleq	e8548c <__ccfg+0xe654e4>
    405c:	0b390b3b 	bleq	e46d50 <__ccfg+0xe26da8>
    4060:	00001301 	andeq	r1, r0, r1, lsl #6
    4064:	03000d13 	movweq	r0, #3347	; 0xd13
    4068:	3b0b3a0e 	blcc	2d28a8 <__ccfg+0x2b2900>
    406c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4070:	00053813 	andeq	r3, r5, r3, lsl r8
    4074:	00151400 	andseq	r1, r5, r0, lsl #8
    4078:	00001927 	andeq	r1, r0, r7, lsr #18
    407c:	27011515 	smladcs	r1, r5, r5, r1
    4080:	01134919 	tsteq	r3, r9, lsl r9
    4084:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4088:	13490005 	movtne	r0, #36869	; 0x9005
    408c:	13170000 	tstne	r7, #0
    4090:	0b0e0301 	bleq	384c9c <__ccfg+0x364cf4>
    4094:	3b0b3a05 	blcc	2d28b0 <__ccfg+0x2b2908>
    4098:	010b3905 	tsteq	fp, r5, lsl #18
    409c:	18000013 	stmdane	r0, {r0, r1, r4}
    40a0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    40a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    40a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    40ac:	00000b38 	andeq	r0, r0, r8, lsr fp
    40b0:	03000d19 	movweq	r0, #3353	; 0xd19
    40b4:	3b0b3a0e 	blcc	2d28f4 <__ccfg+0x2b294c>
    40b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    40bc:	00053813 	andeq	r3, r5, r3, lsl r8
    40c0:	01131a00 	tsteq	r3, r0, lsl #20
    40c4:	0b0b0e03 	bleq	2c78d8 <__ccfg+0x2a7930>
    40c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    40cc:	13010b39 	movwne	r0, #6969	; 0x1b39
    40d0:	131b0000 	tstne	fp, #0
    40d4:	3a0b0b01 	bcc	2c6ce0 <__ccfg+0x2a6d38>
    40d8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    40dc:	0013010b 	andseq	r0, r3, fp, lsl #2
    40e0:	01171c00 	tsteq	r7, r0, lsl #24
    40e4:	0b3a0b0b 	bleq	e86d18 <__ccfg+0xe66d70>
    40e8:	0b39053b 	bleq	e455dc <__ccfg+0xe25634>
    40ec:	00001301 	andeq	r1, r0, r1, lsl #6
    40f0:	03000d1d 	movweq	r0, #3357	; 0xd1d
    40f4:	3b0b3a0e 	blcc	2d2934 <__ccfg+0x2b298c>
    40f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    40fc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4100:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    4104:	00001301 	andeq	r1, r0, r1, lsl #6
    4108:	0300341f 	movweq	r3, #1055	; 0x41f
    410c:	3b0b3a0e 	blcc	2d294c <__ccfg+0x2b29a4>
    4110:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4114:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4118:	20000019 	andcs	r0, r0, r9, lsl r0
    411c:	00000026 	andeq	r0, r0, r6, lsr #32
    4120:	03003421 	movweq	r3, #1057	; 0x421
    4124:	3b0b3a0e 	blcc	2d2964 <__ccfg+0x2b29bc>
    4128:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    412c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4130:	22000019 	andcs	r0, r0, #25
    4134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4138:	0b3a0e03 	bleq	e8794c <__ccfg+0xe679a4>
    413c:	0b390b3b 	bleq	e46e30 <__ccfg+0xe26e88>
    4140:	13491927 	movtne	r1, #39207	; 0x9927
    4144:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4148:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    414c:	00130119 	andseq	r0, r3, r9, lsl r1
    4150:	00052300 	andeq	r2, r5, r0, lsl #6
    4154:	0b3a0e03 	bleq	e87968 <__ccfg+0xe679c0>
    4158:	0b390b3b 	bleq	e46e4c <__ccfg+0xe26ea4>
    415c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    4160:	05240000 	streq	r0, [r4, #-0]!
    4164:	3a0e0300 	bcc	384d6c <__ccfg+0x364dc4>
    4168:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    416c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4170:	1742b717 	smlaldne	fp, r2, r7, r7
    4174:	34250000 	strtcc	r0, [r5], #-0
    4178:	3a080300 	bcc	204d80 <__ccfg+0x1e4dd8>
    417c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4180:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4184:	1742b717 	smlaldne	fp, r2, r7, r7
    4188:	34260000 	strtcc	r0, [r6], #-0
    418c:	3a0e0300 	bcc	384d94 <__ccfg+0x364dec>
    4190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4198:	1742b717 	smlaldne	fp, r2, r7, r7
    419c:	01000000 	mrseq	r0, (UNDEF: 0)
    41a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    41a4:	0e030b13 	vmoveq.32	d3[0], r0
    41a8:	01110e1b 	tsteq	r1, fp, lsl lr
    41ac:	17100612 			; <UNDEFINED> instruction: 0x17100612
    41b0:	24020000 	strcs	r0, [r2], #-0
    41b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    41b8:	000e030b 	andeq	r0, lr, fp, lsl #6
    41bc:	00240300 	eoreq	r0, r4, r0, lsl #6
    41c0:	0b3e0b0b 	bleq	f86df4 <__ccfg+0xf66e4c>
    41c4:	00000803 	andeq	r0, r0, r3, lsl #16
    41c8:	03001604 	movweq	r1, #1540	; 0x604
    41cc:	3b0b3a0e 	blcc	2d2a0c <__ccfg+0x2b2a64>
    41d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    41d4:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    41d8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    41dc:	0b3b0b3a 	bleq	ec6ecc <__ccfg+0xea6f24>
    41e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    41e4:	17060000 	strne	r0, [r6, -r0]
    41e8:	3a0b0b01 	bcc	2c6df4 <__ccfg+0x2a6e4c>
    41ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    41f0:	0013010b 	andseq	r0, r3, fp, lsl #2
    41f4:	000d0700 	andeq	r0, sp, r0, lsl #14
    41f8:	0b3a0e03 	bleq	e87a0c <__ccfg+0xe67a64>
    41fc:	0b390b3b 	bleq	e46ef0 <__ccfg+0xe26f48>
    4200:	00001349 	andeq	r1, r0, r9, asr #6
    4204:	49010108 	stmdbmi	r1, {r3, r8}
    4208:	00130113 	andseq	r0, r3, r3, lsl r1
    420c:	00210900 	eoreq	r0, r1, r0, lsl #18
    4210:	0b2f1349 	bleq	bc8f3c <__ccfg+0xba8f94>
    4214:	130a0000 	movwne	r0, #40960	; 0xa000
    4218:	3a0b0b01 	bcc	2c6e24 <__ccfg+0x2a6e7c>
    421c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4220:	0013010b 	andseq	r0, r3, fp, lsl #2
    4224:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4228:	0b3a0e03 	bleq	e87a3c <__ccfg+0xe67a94>
    422c:	0b390b3b 	bleq	e46f20 <__ccfg+0xe26f78>
    4230:	0b381349 	bleq	e08f5c <__ccfg+0xde8fb4>
    4234:	0f0c0000 	svceq	0x000c0000
    4238:	000b0b00 	andeq	r0, fp, r0, lsl #22
    423c:	01130d00 	tsteq	r3, r0, lsl #26
    4240:	0b0b0e03 	bleq	2c7a54 <__ccfg+0x2a7aac>
    4244:	0b3b0b3a 	bleq	ec6f34 <__ccfg+0xea6f8c>
    4248:	13010b39 	movwne	r0, #6969	; 0x1b39
    424c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4250:	3a080300 	bcc	204e58 <__ccfg+0x1e4eb0>
    4254:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4258:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    425c:	0f00000b 	svceq	0x0000000b
    4260:	0b0b000f 	bleq	2c42a4 <__ccfg+0x2a42fc>
    4264:	00001349 	andeq	r1, r0, r9, asr #6
    4268:	03011310 	movweq	r1, #4880	; 0x1310
    426c:	3a050b0e 	bcc	146eac <__ccfg+0x126f04>
    4270:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4274:	0013010b 	andseq	r0, r3, fp, lsl #2
    4278:	000d1100 	andeq	r1, sp, r0, lsl #2
    427c:	0b3a0e03 	bleq	e87a90 <__ccfg+0xe67ae8>
    4280:	0b390b3b 	bleq	e46f74 <__ccfg+0xe26fcc>
    4284:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4288:	15120000 	ldrne	r0, [r2, #-0]
    428c:	00192700 	andseq	r2, r9, r0, lsl #14
    4290:	01151300 	tsteq	r5, r0, lsl #6
    4294:	13491927 	movtne	r1, #39207	; 0x9927
    4298:	00001301 	andeq	r1, r0, r1, lsl #6
    429c:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    42a0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    42a4:	13490026 	movtne	r0, #36902	; 0x9026
    42a8:	13160000 	tstne	r6, #0
    42ac:	0b0e0301 	bleq	384eb8 <__ccfg+0x364f10>
    42b0:	3b0b3a05 	blcc	2d2acc <__ccfg+0x2b2b24>
    42b4:	010b3905 	tsteq	fp, r5, lsl #18
    42b8:	17000013 	smladne	r0, r3, r0, r0
    42bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    42c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    42c8:	00000b38 	andeq	r0, r0, r8, lsr fp
    42cc:	03000d18 	movweq	r0, #3352	; 0xd18
    42d0:	3b0b3a0e 	blcc	2d2b10 <__ccfg+0x2b2b68>
    42d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    42d8:	00053813 	andeq	r3, r5, r3, lsl r8
    42dc:	01131900 	tsteq	r3, r0, lsl #18
    42e0:	0b0b0e03 	bleq	2c7af4 <__ccfg+0x2a7b4c>
    42e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    42e8:	13010b39 	movwne	r0, #6969	; 0x1b39
    42ec:	131a0000 	tstne	sl, #0
    42f0:	3a0b0b01 	bcc	2c6efc <__ccfg+0x2a6f54>
    42f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    42f8:	0013010b 	andseq	r0, r3, fp, lsl #2
    42fc:	01171b00 	tsteq	r7, r0, lsl #22
    4300:	0b3a0b0b 	bleq	e86f34 <__ccfg+0xe66f8c>
    4304:	0b39053b 	bleq	e457f8 <__ccfg+0xe25850>
    4308:	00001301 	andeq	r1, r0, r1, lsl #6
    430c:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4310:	3b0b3a0e 	blcc	2d2b50 <__ccfg+0x2b2ba8>
    4314:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4318:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    431c:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4320:	0000193c 	andeq	r1, r0, ip, lsr r9
    4324:	2701151e 	smladcs	r1, lr, r5, r1
    4328:	00130119 	andseq	r0, r3, r9, lsl r1
    432c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4330:	0b3a0e03 	bleq	e87b44 <__ccfg+0xe67b9c>
    4334:	0b39053b 	bleq	e45828 <__ccfg+0xe25880>
    4338:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    433c:	0000193c 	andeq	r1, r0, ip, lsr r9
    4340:	03003420 	movweq	r3, #1056	; 0x420
    4344:	3b0b3a0e 	blcc	2d2b84 <__ccfg+0x2b2bdc>
    4348:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    434c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4350:	21000019 	tstcs	r0, r9, lsl r0
    4354:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4358:	0b3a0e03 	bleq	e87b6c <__ccfg+0xe67bc4>
    435c:	0b390b3b 	bleq	e47050 <__ccfg+0xe270a8>
    4360:	13491927 	movtne	r1, #39207	; 0x9927
    4364:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4368:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    436c:	00130119 	andseq	r0, r3, r9, lsl r1
    4370:	00342200 	eorseq	r2, r4, r0, lsl #4
    4374:	0b3a0e03 	bleq	e87b88 <__ccfg+0xe67be0>
    4378:	0b390b3b 	bleq	e4706c <__ccfg+0xe270c4>
    437c:	17021349 	strne	r1, [r2, -r9, asr #6]
    4380:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4384:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
    4388:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    438c:	0b3b0b3a 	bleq	ec707c <__ccfg+0xea70d4>
    4390:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    4394:	06120111 			; <UNDEFINED> instruction: 0x06120111
    4398:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    439c:	24000019 	strcs	r0, [r0], #-25	; 0xffffffe7
    43a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    43a4:	0b3b0b3a 	bleq	ec7094 <__ccfg+0xea70ec>
    43a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    43ac:	00001802 	andeq	r1, r0, r2, lsl #16
    43b0:	01110100 	tsteq	r1, r0, lsl #2
    43b4:	0b130e25 	bleq	4c7c50 <__ccfg+0x4a7ca8>
    43b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    43bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    43c0:	00001710 	andeq	r1, r0, r0, lsl r7
    43c4:	0b002402 	bleq	d3d4 <__exidx_end+0x84a4>
    43c8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    43cc:	03000008 	movweq	r0, #8
    43d0:	0b0b0024 	bleq	2c4468 <__ccfg+0x2a44c0>
    43d4:	0e030b3e 	vmoveq.16	d3[0], r0
    43d8:	16040000 	strne	r0, [r4], -r0
    43dc:	3a0e0300 	bcc	384fe4 <__ccfg+0x36503c>
    43e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    43e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    43e8:	00160500 	andseq	r0, r6, r0, lsl #10
    43ec:	0b3a0e03 	bleq	e87c00 <__ccfg+0xe67c58>
    43f0:	0b390b3b 	bleq	e470e4 <__ccfg+0xe2713c>
    43f4:	00001349 	andeq	r1, r0, r9, asr #6
    43f8:	0b011706 	bleq	4a018 <__ccfg+0x2a070>
    43fc:	3b0b3a0b 	blcc	2d2c30 <__ccfg+0x2b2c88>
    4400:	010b390b 	tsteq	fp, fp, lsl #18
    4404:	07000013 	smladeq	r0, r3, r0, r0
    4408:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    440c:	0b3b0b3a 	bleq	ec70fc <__ccfg+0xea7154>
    4410:	13490b39 	movtne	r0, #39737	; 0x9b39
    4414:	01080000 	mrseq	r0, (UNDEF: 8)
    4418:	01134901 	tsteq	r3, r1, lsl #18
    441c:	09000013 	stmdbeq	r0, {r0, r1, r4}
    4420:	13490021 	movtne	r0, #36897	; 0x9021
    4424:	00000b2f 	andeq	r0, r0, pc, lsr #22
    4428:	0b01130a 	bleq	49058 <__ccfg+0x290b0>
    442c:	3b0b3a0b 	blcc	2d2c60 <__ccfg+0x2b2cb8>
    4430:	010b390b 	tsteq	fp, fp, lsl #18
    4434:	0b000013 	bleq	4488 <port_confs+0x68>
    4438:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    443c:	0b3b0b3a 	bleq	ec712c <__ccfg+0xea7184>
    4440:	13490b39 	movtne	r0, #39737	; 0x9b39
    4444:	00000b38 	andeq	r0, r0, r8, lsr fp
    4448:	0b000f0c 	bleq	8080 <__exidx_end+0x3150>
    444c:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    4450:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4454:	0b3a0b0b 	bleq	e87088 <__ccfg+0xe670e0>
    4458:	0b390b3b 	bleq	e4714c <__ccfg+0xe271a4>
    445c:	00001301 	andeq	r1, r0, r1, lsl #6
    4460:	03000d0e 	movweq	r0, #3342	; 0xd0e
    4464:	3b0b3a08 	blcc	2d2c8c <__ccfg+0x2b2ce4>
    4468:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    446c:	000b3813 	andeq	r3, fp, r3, lsl r8
    4470:	000f0f00 	andeq	r0, pc, r0, lsl #30
    4474:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4478:	13100000 	tstne	r0, #0
    447c:	0b0e0301 	bleq	385088 <__ccfg+0x3650e0>
    4480:	3b0b3a05 	blcc	2d2c9c <__ccfg+0x2b2cf4>
    4484:	010b390b 	tsteq	fp, fp, lsl #18
    4488:	11000013 	tstne	r0, r3, lsl r0
    448c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4490:	0b3b0b3a 	bleq	ec7180 <__ccfg+0xea71d8>
    4494:	13490b39 	movtne	r0, #39737	; 0x9b39
    4498:	00000538 	andeq	r0, r0, r8, lsr r5
    449c:	27001512 	smladcs	r0, r2, r5, r1
    44a0:	13000019 	movwne	r0, #25
    44a4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    44a8:	13011349 	movwne	r1, #4937	; 0x1349
    44ac:	05140000 	ldreq	r0, [r4, #-0]
    44b0:	00134900 	andseq	r4, r3, r0, lsl #18
    44b4:	00261500 	eoreq	r1, r6, r0, lsl #10
    44b8:	00001349 	andeq	r1, r0, r9, asr #6
    44bc:	03011316 	movweq	r1, #4886	; 0x1316
    44c0:	3a050b0e 	bcc	147100 <__ccfg+0x127158>
    44c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    44c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    44cc:	000d1700 	andeq	r1, sp, r0, lsl #14
    44d0:	0b3a0e03 	bleq	e87ce4 <__ccfg+0xe67d3c>
    44d4:	0b39053b 	bleq	e459c8 <__ccfg+0xe25a20>
    44d8:	0b381349 	bleq	e09204 <__ccfg+0xde925c>
    44dc:	0d180000 	ldceq	0, cr0, [r8, #-0]
    44e0:	3a0e0300 	bcc	3850e8 <__ccfg+0x365140>
    44e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    44e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    44ec:	19000005 	stmdbne	r0, {r0, r2}
    44f0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    44f4:	0b3a0b0b 	bleq	e87128 <__ccfg+0xe67180>
    44f8:	0b39053b 	bleq	e459ec <__ccfg+0xe25a44>
    44fc:	00001301 	andeq	r1, r0, r1, lsl #6
    4500:	0b01131a 	bleq	49170 <__ccfg+0x291c8>
    4504:	3b0b3a0b 	blcc	2d2d38 <__ccfg+0x2b2d90>
    4508:	010b3905 	tsteq	fp, r5, lsl #18
    450c:	1b000013 	blne	4560 <__button_list+0x2e>
    4510:	0b0b0117 	bleq	2c4974 <__ccfg+0x2a49cc>
    4514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4518:	13010b39 	movwne	r0, #6969	; 0x1b39
    451c:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
    4520:	3a0e0300 	bcc	385128 <__ccfg+0x365180>
    4524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4528:	0013490b 	andseq	r4, r3, fp, lsl #18
    452c:	00131d00 	andseq	r1, r3, r0, lsl #26
    4530:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4534:	151e0000 	ldrne	r0, [lr, #-0]
    4538:	01192701 	tsteq	r9, r1, lsl #14
    453c:	1f000013 	svcne	0x00000013
    4540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    4544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4548:	13490b39 	movtne	r0, #39737	; 0x9b39
    454c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    4550:	34200000 	strtcc	r0, [r0], #-0
    4554:	3a0e0300 	bcc	38515c <__ccfg+0x3651b4>
    4558:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    455c:	3f13490b 	svccc	0x0013490b
    4560:	00193c19 	andseq	r3, r9, r9, lsl ip
    4564:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
    4568:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    456c:	0b3b0b3a 	bleq	ec725c <__ccfg+0xea72b4>
    4570:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    4574:	01111349 	tsteq	r1, r9, asr #6
    4578:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    457c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4580:	22000013 	andcs	r0, r0, #19
    4584:	08030005 	stmdaeq	r3, {r0, r2}
    4588:	0b3b0b3a 	bleq	ec7278 <__ccfg+0xea72d0>
    458c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4590:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4594:	23000017 	movwcs	r0, #23
    4598:	08030034 	stmdaeq	r3, {r2, r4, r5}
    459c:	0b3b0b3a 	bleq	ec728c <__ccfg+0xea72e4>
    45a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    45a4:	00001802 	andeq	r1, r0, r2, lsl #16
    45a8:	01828924 	orreq	r8, r2, r4, lsr #18
    45ac:	31011101 	tstcc	r1, r1, lsl #2
    45b0:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    45b4:	0001828a 	andeq	r8, r1, sl, lsl #5
    45b8:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    45bc:	26000018 			; <UNDEFINED> instruction: 0x26000018
    45c0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    45c4:	0e6e193c 			; <UNDEFINED> instruction: 0x0e6e193c
    45c8:	0b3a0e03 	bleq	e87ddc <__ccfg+0xe67e34>
    45cc:	0b390b3b 	bleq	e472c0 <__ccfg+0xe27318>
    45d0:	01000000 	mrseq	r0, (UNDEF: 0)
    45d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    45d8:	0e030b13 	vmoveq.32	d3[0], r0
    45dc:	01110e1b 	tsteq	r1, fp, lsl lr
    45e0:	17100612 			; <UNDEFINED> instruction: 0x17100612
    45e4:	24020000 	strcs	r0, [r2], #-0
    45e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    45ec:	0008030b 	andeq	r0, r8, fp, lsl #6
    45f0:	00240300 	eoreq	r0, r4, r0, lsl #6
    45f4:	0b3e0b0b 	bleq	f87228 <__ccfg+0xf67280>
    45f8:	00000e03 	andeq	r0, r0, r3, lsl #28
    45fc:	03001604 	movweq	r1, #1540	; 0x604
    4600:	3b0b3a0e 	blcc	2d2e40 <__ccfg+0x2b2e98>
    4604:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4608:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    460c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    4610:	0b3b0b3a 	bleq	ec7300 <__ccfg+0xea7358>
    4614:	13490b39 	movtne	r0, #39737	; 0x9b39
    4618:	17060000 	strne	r0, [r6, -r0]
    461c:	3a0b0b01 	bcc	2c7228 <__ccfg+0x2a7280>
    4620:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4624:	0013010b 	andseq	r0, r3, fp, lsl #2
    4628:	000d0700 	andeq	r0, sp, r0, lsl #14
    462c:	0b3a0e03 	bleq	e87e40 <__ccfg+0xe67e98>
    4630:	0b390b3b 	bleq	e47324 <__ccfg+0xe2737c>
    4634:	00001349 	andeq	r1, r0, r9, asr #6
    4638:	49010108 	stmdbmi	r1, {r3, r8}
    463c:	00130113 	andseq	r0, r3, r3, lsl r1
    4640:	00210900 	eoreq	r0, r1, r0, lsl #18
    4644:	0b2f1349 	bleq	bc9370 <__ccfg+0xba93c8>
    4648:	130a0000 	movwne	r0, #40960	; 0xa000
    464c:	3a0b0b01 	bcc	2c7258 <__ccfg+0x2a72b0>
    4650:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4654:	0013010b 	andseq	r0, r3, fp, lsl #2
    4658:	000d0b00 	andeq	r0, sp, r0, lsl #22
    465c:	0b3a0e03 	bleq	e87e70 <__ccfg+0xe67ec8>
    4660:	0b390b3b 	bleq	e47354 <__ccfg+0xe273ac>
    4664:	0b381349 	bleq	e09390 <__ccfg+0xde93e8>
    4668:	0f0c0000 	svceq	0x000c0000
    466c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4670:	01130d00 	tsteq	r3, r0, lsl #26
    4674:	0b0b0e03 	bleq	2c7e88 <__ccfg+0x2a7ee0>
    4678:	0b3b0b3a 	bleq	ec7368 <__ccfg+0xea73c0>
    467c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4680:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    4684:	3a080300 	bcc	20528c <__ccfg+0x1e52e4>
    4688:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    468c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4690:	0f00000b 	svceq	0x0000000b
    4694:	0b0b000f 	bleq	2c46d8 <__ccfg+0x2a4730>
    4698:	00001349 	andeq	r1, r0, r9, asr #6
    469c:	03011310 	movweq	r1, #4880	; 0x1310
    46a0:	3a050b0e 	bcc	1472e0 <__ccfg+0x127338>
    46a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    46a8:	0013010b 	andseq	r0, r3, fp, lsl #2
    46ac:	000d1100 	andeq	r1, sp, r0, lsl #2
    46b0:	0b3a0e03 	bleq	e87ec4 <__ccfg+0xe67f1c>
    46b4:	0b390b3b 	bleq	e473a8 <__ccfg+0xe27400>
    46b8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    46bc:	15120000 	ldrne	r0, [r2, #-0]
    46c0:	00192700 	andseq	r2, r9, r0, lsl #14
    46c4:	01151300 	tsteq	r5, r0, lsl #6
    46c8:	13491927 	movtne	r1, #39207	; 0x9927
    46cc:	00001301 	andeq	r1, r0, r1, lsl #6
    46d0:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    46d4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    46d8:	13490026 	movtne	r0, #36902	; 0x9026
    46dc:	13160000 	tstne	r6, #0
    46e0:	0b0e0301 	bleq	3852ec <__ccfg+0x365344>
    46e4:	3b0b3a05 	blcc	2d2f00 <__ccfg+0x2b2f58>
    46e8:	010b3905 	tsteq	fp, r5, lsl #18
    46ec:	17000013 	smladne	r0, r3, r0, r0
    46f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    46f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    46f8:	13490b39 	movtne	r0, #39737	; 0x9b39
    46fc:	00000b38 	andeq	r0, r0, r8, lsr fp
    4700:	03000d18 	movweq	r0, #3352	; 0xd18
    4704:	3b0b3a0e 	blcc	2d2f44 <__ccfg+0x2b2f9c>
    4708:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    470c:	00053813 	andeq	r3, r5, r3, lsl r8
    4710:	01131900 	tsteq	r3, r0, lsl #18
    4714:	0b0b0e03 	bleq	2c7f28 <__ccfg+0x2a7f80>
    4718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    471c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4720:	131a0000 	tstne	sl, #0
    4724:	3a0b0b01 	bcc	2c7330 <__ccfg+0x2a7388>
    4728:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    472c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4730:	01171b00 	tsteq	r7, r0, lsl #22
    4734:	0b3a0b0b 	bleq	e87368 <__ccfg+0xe673c0>
    4738:	0b39053b 	bleq	e45c2c <__ccfg+0xe25c84>
    473c:	00001301 	andeq	r1, r0, r1, lsl #6
    4740:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4744:	3b0b3a0e 	blcc	2d2f84 <__ccfg+0x2b2fdc>
    4748:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    474c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4750:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4754:	0000193c 	andeq	r1, r0, ip, lsr r9
    4758:	2701151e 	smladcs	r1, lr, r5, r1
    475c:	00130119 	andseq	r0, r3, r9, lsl r1
    4760:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4764:	0b3a0e03 	bleq	e87f78 <__ccfg+0xe67fd0>
    4768:	0b39053b 	bleq	e45c5c <__ccfg+0xe25cb4>
    476c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4770:	0000193c 	andeq	r1, r0, ip, lsr r9
    4774:	03003420 	movweq	r3, #1056	; 0x420
    4778:	3b0b3a0e 	blcc	2d2fb8 <__ccfg+0x2b3010>
    477c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4780:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4784:	21000019 	tstcs	r0, r9, lsl r0
    4788:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    478c:	0b3a0e03 	bleq	e87fa0 <__ccfg+0xe67ff8>
    4790:	0b390b3b 	bleq	e47484 <__ccfg+0xe274dc>
    4794:	13491927 	movtne	r1, #39207	; 0x9927
    4798:	06120111 			; <UNDEFINED> instruction: 0x06120111
    479c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    47a0:	00130119 	andseq	r0, r3, r9, lsl r1
    47a4:	00052200 	andeq	r2, r5, r0, lsl #4
    47a8:	0b3a0803 	bleq	e867bc <__ccfg+0xe66814>
    47ac:	0b390b3b 	bleq	e474a0 <__ccfg+0xe274f8>
    47b0:	17021349 	strne	r1, [r2, -r9, asr #6]
    47b4:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47b8:	00052300 	andeq	r2, r5, r0, lsl #6
    47bc:	0b3a0e03 	bleq	e87fd0 <__ccfg+0xe68028>
    47c0:	0b390b3b 	bleq	e474b4 <__ccfg+0xe2750c>
    47c4:	17021349 	strne	r1, [r2, -r9, asr #6]
    47c8:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47cc:	00342400 	eorseq	r2, r4, r0, lsl #8
    47d0:	0b3a0803 	bleq	e867e4 <__ccfg+0xe6683c>
    47d4:	0b390b3b 	bleq	e474c8 <__ccfg+0xe27520>
    47d8:	17021349 	strne	r1, [r2, -r9, asr #6]
    47dc:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    47e0:	82892500 	addhi	r2, r9, #0, 10
    47e4:	01110101 	tsteq	r1, r1, lsl #2
    47e8:	00001331 	andeq	r1, r0, r1, lsr r3
    47ec:	01828a26 	orreq	r8, r2, r6, lsr #20
    47f0:	91180200 	tstls	r8, r0, lsl #4
    47f4:	00001842 	andeq	r1, r0, r2, asr #16
    47f8:	3f002e27 	svccc	0x00002e27
    47fc:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    4800:	3a0e030e 	bcc	385440 <__ccfg+0x365498>
    4804:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4808:	0000000b 	andeq	r0, r0, fp
    480c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4810:	030b130e 	movweq	r1, #45838	; 0xb30e
    4814:	100e1b0e 	andne	r1, lr, lr, lsl #22
    4818:	02000017 	andeq	r0, r0, #23
    481c:	0b0b0024 	bleq	2c48b4 <__ccfg+0x2a490c>
    4820:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    4824:	24030000 	strcs	r0, [r3], #-0
    4828:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    482c:	000e030b 	andeq	r0, lr, fp, lsl #6
    4830:	00160400 	andseq	r0, r6, r0, lsl #8
    4834:	0b3a0e03 	bleq	e88048 <__ccfg+0xe680a0>
    4838:	0b39053b 	bleq	e45d2c <__ccfg+0xe25d84>
    483c:	00001349 	andeq	r1, r0, r9, asr #6
    4840:	03001605 	movweq	r1, #1541	; 0x605
    4844:	3b0b3a0e 	blcc	2d3084 <__ccfg+0x2b30dc>
    4848:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    484c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4850:	0b0b0117 	bleq	2c4cb4 <__ccfg+0x2a4d0c>
    4854:	0b3b0b3a 	bleq	ec7544 <__ccfg+0xea759c>
    4858:	13010b39 	movwne	r0, #6969	; 0x1b39
    485c:	0d070000 	stceq	0, cr0, [r7, #-0]
    4860:	3a0e0300 	bcc	385468 <__ccfg+0x3654c0>
    4864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4868:	0013490b 	andseq	r4, r3, fp, lsl #18
    486c:	01010800 	tsteq	r1, r0, lsl #16
    4870:	13011349 	movwne	r1, #4937	; 0x1349
    4874:	21090000 	mrscs	r0, (UNDEF: 9)
    4878:	2f134900 	svccs	0x00134900
    487c:	0a00000b 	beq	48b0 <patchGenfskRfe+0x304>
    4880:	0b0b0113 	bleq	2c4cd4 <__ccfg+0x2a4d2c>
    4884:	0b3b0b3a 	bleq	ec7574 <__ccfg+0xea75cc>
    4888:	13010b39 	movwne	r0, #6969	; 0x1b39
    488c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4890:	3a0e0300 	bcc	385498 <__ccfg+0x3654f0>
    4894:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4898:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    489c:	0c00000b 	stceq	0, cr0, [r0], {11}
    48a0:	0b0b000f 	bleq	2c48e4 <__ccfg+0x2a493c>
    48a4:	130d0000 	movwne	r0, #53248	; 0xd000
    48a8:	0b0e0301 	bleq	3854b4 <__ccfg+0x36550c>
    48ac:	3b0b3a0b 	blcc	2d30e0 <__ccfg+0x2b3138>
    48b0:	010b390b 	tsteq	fp, fp, lsl #18
    48b4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    48b8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    48bc:	0b3b0b3a 	bleq	ec75ac <__ccfg+0xea7604>
    48c0:	13490b39 	movtne	r0, #39737	; 0x9b39
    48c4:	00000b38 	andeq	r0, r0, r8, lsr fp
    48c8:	0b000f0f 	bleq	850c <__exidx_end+0x35dc>
    48cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    48d0:	01131000 	tsteq	r3, r0
    48d4:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    48d8:	0b3b0b3a 	bleq	ec75c8 <__ccfg+0xea7620>
    48dc:	13010b39 	movwne	r0, #6969	; 0x1b39
    48e0:	0d110000 	ldceq	0, cr0, [r1, #-0]
    48e4:	3a0e0300 	bcc	3854ec <__ccfg+0x365544>
    48e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    48ec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    48f0:	12000005 	andne	r0, r0, #5
    48f4:	19270015 	stmdbne	r7!, {r0, r2, r4}
    48f8:	15130000 	ldrne	r0, [r3, #-0]
    48fc:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    4900:	00130113 	andseq	r0, r3, r3, lsl r1
    4904:	00051400 	andeq	r1, r5, r0, lsl #8
    4908:	00001349 	andeq	r1, r0, r9, asr #6
    490c:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    4910:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4914:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4918:	0b3a050b 	bleq	e85d4c <__ccfg+0xe65da4>
    491c:	0b39053b 	bleq	e45e10 <__ccfg+0xe25e68>
    4920:	00001301 	andeq	r1, r0, r1, lsl #6
    4924:	03000d17 	movweq	r0, #3351	; 0xd17
    4928:	3b0b3a0e 	blcc	2d3168 <__ccfg+0x2b31c0>
    492c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4930:	000b3813 	andeq	r3, fp, r3, lsl r8
    4934:	000d1800 	andeq	r1, sp, r0, lsl #16
    4938:	0b3a0e03 	bleq	e8814c <__ccfg+0xe681a4>
    493c:	0b39053b 	bleq	e45e30 <__ccfg+0xe25e88>
    4940:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4944:	13190000 	tstne	r9, #0
    4948:	0b0e0301 	bleq	385554 <__ccfg+0x3655ac>
    494c:	3b0b3a0b 	blcc	2d3180 <__ccfg+0x2b31d8>
    4950:	010b3905 	tsteq	fp, r5, lsl #18
    4954:	1a000013 	bne	49a8 <patchGenfskRfe+0x3fc>
    4958:	0b0b0113 	bleq	2c4dac <__ccfg+0x2a4e04>
    495c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4960:	13010b39 	movwne	r0, #6969	; 0x1b39
    4964:	171b0000 	ldrne	r0, [fp, -r0]
    4968:	3a0b0b01 	bcc	2c7574 <__ccfg+0x2a75cc>
    496c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4970:	0013010b 	andseq	r0, r3, fp, lsl #2
    4974:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4978:	0b3a0e03 	bleq	e8818c <__ccfg+0xe681e4>
    497c:	0b39053b 	bleq	e45e70 <__ccfg+0xe25ec8>
    4980:	00001349 	andeq	r1, r0, r9, asr #6
    4984:	0300131d 	movweq	r1, #797	; 0x31d
    4988:	00193c0e 	andseq	r3, r9, lr, lsl #24
    498c:	01151e00 	tsteq	r5, r0, lsl #28
    4990:	13011927 	movwne	r1, #6439	; 0x1927
    4994:	341f0000 	ldrcc	r0, [pc], #-0	; 499c <patchGenfskRfe+0x3f0>
    4998:	3a0e0300 	bcc	3855a0 <__ccfg+0x3655f8>
    499c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    49a0:	3f13490b 	svccc	0x0013490b
    49a4:	00193c19 	andseq	r3, r9, r9, lsl ip
    49a8:	00342000 	eorseq	r2, r4, r0
    49ac:	0b3a0e03 	bleq	e881c0 <__ccfg+0xe68218>
    49b0:	0b390b3b 	bleq	e476a4 <__ccfg+0xe276fc>
    49b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    49b8:	34210000 	strtcc	r0, [r1], #-0
    49bc:	02134700 	andseq	r4, r3, #0, 14
    49c0:	00000018 	andeq	r0, r0, r8, lsl r0
    49c4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    49c8:	030b130e 	movweq	r1, #45838	; 0xb30e
    49cc:	110e1b0e 	tstne	lr, lr, lsl #22
    49d0:	10061201 	andne	r1, r6, r1, lsl #4
    49d4:	02000017 	andeq	r0, r0, #23
    49d8:	0b0b0024 	bleq	2c4a70 <__ccfg+0x2a4ac8>
    49dc:	0e030b3e 	vmoveq.16	d3[0], r0
    49e0:	24030000 	strcs	r0, [r3], #-0
    49e4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    49e8:	0008030b 	andeq	r0, r8, fp, lsl #6
    49ec:	00160400 	andseq	r0, r6, r0, lsl #8
    49f0:	0b3a0e03 	bleq	e88204 <__ccfg+0xe6825c>
    49f4:	0b39053b 	bleq	e45ee8 <__ccfg+0xe25f40>
    49f8:	00001349 	andeq	r1, r0, r9, asr #6
    49fc:	03001605 	movweq	r1, #1541	; 0x605
    4a00:	3b0b3a0e 	blcc	2d3240 <__ccfg+0x2b3298>
    4a04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4a08:	06000013 			; <UNDEFINED> instruction: 0x06000013
    4a0c:	0b0b0117 	bleq	2c4e70 <__ccfg+0x2a4ec8>
    4a10:	0b3b0b3a 	bleq	ec7700 <__ccfg+0xea7758>
    4a14:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a18:	0d070000 	stceq	0, cr0, [r7, #-0]
    4a1c:	3a0e0300 	bcc	385624 <__ccfg+0x36567c>
    4a20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4a24:	0013490b 	andseq	r4, r3, fp, lsl #18
    4a28:	01010800 	tsteq	r1, r0, lsl #16
    4a2c:	13011349 	movwne	r1, #4937	; 0x1349
    4a30:	21090000 	mrscs	r0, (UNDEF: 9)
    4a34:	2f134900 	svccs	0x00134900
    4a38:	0a00000b 	beq	4a6c <patchGenfskRfe+0x4c0>
    4a3c:	0b0b0113 	bleq	2c4e90 <__ccfg+0x2a4ee8>
    4a40:	0b3b0b3a 	bleq	ec7730 <__ccfg+0xea7788>
    4a44:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a48:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    4a4c:	3a0e0300 	bcc	385654 <__ccfg+0x3656ac>
    4a50:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4a54:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4a58:	0c00000b 	stceq	0, cr0, [r0], {11}
    4a5c:	0b0b000f 	bleq	2c4aa0 <__ccfg+0x2a4af8>
    4a60:	130d0000 	movwne	r0, #53248	; 0xd000
    4a64:	0b0e0301 	bleq	385670 <__ccfg+0x3656c8>
    4a68:	3b0b3a0b 	blcc	2d329c <__ccfg+0x2b32f4>
    4a6c:	010b390b 	tsteq	fp, fp, lsl #18
    4a70:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    4a74:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    4a78:	0b3b0b3a 	bleq	ec7768 <__ccfg+0xea77c0>
    4a7c:	13490b39 	movtne	r0, #39737	; 0x9b39
    4a80:	00000b38 	andeq	r0, r0, r8, lsr fp
    4a84:	0b000f0f 	bleq	86c8 <__exidx_end+0x3798>
    4a88:	0013490b 	andseq	r4, r3, fp, lsl #18
    4a8c:	01131000 	tsteq	r3, r0
    4a90:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
    4a94:	0b3b0b3a 	bleq	ec7784 <__ccfg+0xea77dc>
    4a98:	13010b39 	movwne	r0, #6969	; 0x1b39
    4a9c:	0d110000 	ldceq	0, cr0, [r1, #-0]
    4aa0:	3a0e0300 	bcc	3856a8 <__ccfg+0x365700>
    4aa4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4aa8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4aac:	12000005 	andne	r0, r0, #5
    4ab0:	19270015 	stmdbne	r7!, {r0, r2, r4}
    4ab4:	15130000 	ldrne	r0, [r3, #-0]
    4ab8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    4abc:	00130113 	andseq	r0, r3, r3, lsl r1
    4ac0:	00051400 	andeq	r1, r5, r0, lsl #8
    4ac4:	00001349 	andeq	r1, r0, r9, asr #6
    4ac8:	49002615 	stmdbmi	r0, {r0, r2, r4, r9, sl, sp}
    4acc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    4ad0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4ad4:	0b3a050b 	bleq	e85f08 <__ccfg+0xe65f60>
    4ad8:	0b39053b 	bleq	e45fcc <__ccfg+0xe26024>
    4adc:	00001301 	andeq	r1, r0, r1, lsl #6
    4ae0:	03000d17 	movweq	r0, #3351	; 0xd17
    4ae4:	3b0b3a0e 	blcc	2d3324 <__ccfg+0x2b337c>
    4ae8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4aec:	000b3813 	andeq	r3, fp, r3, lsl r8
    4af0:	000d1800 	andeq	r1, sp, r0, lsl #16
    4af4:	0b3a0e03 	bleq	e88308 <__ccfg+0xe68360>
    4af8:	0b39053b 	bleq	e45fec <__ccfg+0xe26044>
    4afc:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    4b00:	13190000 	tstne	r9, #0
    4b04:	0b0e0301 	bleq	385710 <__ccfg+0x365768>
    4b08:	3b0b3a0b 	blcc	2d333c <__ccfg+0x2b3394>
    4b0c:	010b3905 	tsteq	fp, r5, lsl #18
    4b10:	1a000013 	bne	4b64 <patchGenfskRfe+0x5b8>
    4b14:	0b0b0113 	bleq	2c4f68 <__ccfg+0x2a4fc0>
    4b18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4b1c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4b20:	171b0000 	ldrne	r0, [fp, -r0]
    4b24:	3a0b0b01 	bcc	2c7730 <__ccfg+0x2a7788>
    4b28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4b2c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4b30:	000d1c00 	andeq	r1, sp, r0, lsl #24
    4b34:	0b3a0e03 	bleq	e88348 <__ccfg+0xe683a0>
    4b38:	0b39053b 	bleq	e4602c <__ccfg+0xe26084>
    4b3c:	00001349 	andeq	r1, r0, r9, asr #6
    4b40:	0300131d 	movweq	r1, #797	; 0x31d
    4b44:	00193c0e 	andseq	r3, r9, lr, lsl #24
    4b48:	01151e00 	tsteq	r5, r0, lsl #28
    4b4c:	13011927 	movwne	r1, #6439	; 0x1927
    4b50:	341f0000 	ldrcc	r0, [pc], #-0	; 4b58 <patchGenfskRfe+0x5ac>
    4b54:	3a0e0300 	bcc	38575c <__ccfg+0x3657b4>
    4b58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4b5c:	3f13490b 	svccc	0x0013490b
    4b60:	00193c19 	andseq	r3, r9, r9, lsl ip
    4b64:	00342000 	eorseq	r2, r4, r0
    4b68:	0b3a0e03 	bleq	e8837c <__ccfg+0xe683d4>
    4b6c:	0b390b3b 	bleq	e47860 <__ccfg+0xe278b8>
    4b70:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4b74:	0000193c 	andeq	r1, r0, ip, lsr r9
    4b78:	03003421 	movweq	r3, #1057	; 0x421
    4b7c:	3b0b3a0e 	blcc	2d33bc <__ccfg+0x2b3414>
    4b80:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4b84:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    4b88:	22000018 	andcs	r0, r0, #24
    4b8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    4b90:	0b3a0e03 	bleq	e883a4 <__ccfg+0xe683fc>
    4b94:	0b39053b 	bleq	e46088 <__ccfg+0xe260e0>
    4b98:	01111927 	tsteq	r1, r7, lsr #18
    4b9c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    4ba0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    4ba4:	23000013 	movwcs	r0, #19
    4ba8:	08030005 	stmdaeq	r3, {r0, r2}
    4bac:	0b3b0b3a 	bleq	ec789c <__ccfg+0xea78f4>
    4bb0:	13490b39 	movtne	r0, #39737	; 0x9b39
    4bb4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    4bb8:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    4bbc:	0111010b 	tsteq	r1, fp, lsl #2
    4bc0:	13010612 	movwne	r0, #5650	; 0x1612
    4bc4:	34250000 	strtcc	r0, [r5], #-0
    4bc8:	3a080300 	bcc	2057d0 <__ccfg+0x1e5828>
    4bcc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4bd0:	0013490b 	andseq	r4, r3, fp, lsl #18
    4bd4:	00342600 	eorseq	r2, r4, r0, lsl #12
    4bd8:	0b3a0e03 	bleq	e883ec <__ccfg+0xe68444>
    4bdc:	0b390b3b 	bleq	e478d0 <__ccfg+0xe27928>
    4be0:	17021349 	strne	r1, [r2, -r9, asr #6]
    4be4:	001742b7 			; <UNDEFINED> instruction: 0x001742b7
    4be8:	82892700 	addhi	r2, r9, #0, 14
    4bec:	01110101 	tsteq	r1, r1, lsl #2
    4bf0:	00001331 	andeq	r1, r0, r1, lsr r3
    4bf4:	01828a28 	orreq	r8, r2, r8, lsr #20
    4bf8:	91180200 	tstls	r8, r0, lsl #4
    4bfc:	00001842 	andeq	r1, r0, r2, asr #16
    4c00:	03003429 	movweq	r3, #1065	; 0x429
    4c04:	3b0b3a08 	blcc	2d342c <__ccfg+0x2b3484>
    4c08:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4c0c:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4c10:	00001742 	andeq	r1, r0, r2, asr #14
    4c14:	0182892a 	orreq	r8, r2, sl, lsr #18
    4c18:	31011101 	tstcc	r1, r1, lsl #2
    4c1c:	00130113 	andseq	r0, r3, r3, lsl r1
    4c20:	82892b00 	addhi	r2, r9, #0, 22
    4c24:	01110101 	tsteq	r1, r1, lsl #2
    4c28:	00001301 	andeq	r1, r0, r1, lsl #6
    4c2c:	3f012e2c 	svccc	0x00012e2c
    4c30:	3a0e0319 	bcc	38589c <__ccfg+0x3658f4>
    4c34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4c38:	1119270b 	tstne	r9, fp, lsl #14
    4c3c:	40061201 	andmi	r1, r6, r1, lsl #4
    4c40:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    4c44:	00001301 	andeq	r1, r0, r1, lsl #6
    4c48:	0300052d 	movweq	r0, #1325	; 0x52d
    4c4c:	3b0b3a0e 	blcc	2d348c <__ccfg+0x2b34e4>
    4c50:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4c54:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4c58:	00001742 	andeq	r1, r0, r2, asr #14
    4c5c:	3f002e2e 	svccc	0x00002e2e
    4c60:	6e193c19 	mrcvs	12, 0, r3, cr9, cr9, {0}
    4c64:	3a0e030e 	bcc	3858a4 <__ccfg+0x3658fc>
    4c68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4c6c:	0000000b 	andeq	r0, r0, fp
    4c70:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    4c74:	030b130e 	movweq	r1, #45838	; 0xb30e
    4c78:	110e1b0e 	tstne	lr, lr, lsl #22
    4c7c:	10061201 	andne	r1, r6, r1, lsl #4
    4c80:	02000017 	andeq	r0, r0, #23
    4c84:	0b0b0024 	bleq	2c4d1c <__ccfg+0x2a4d74>
    4c88:	0e030b3e 	vmoveq.16	d3[0], r0
    4c8c:	24030000 	strcs	r0, [r3], #-0
    4c90:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4c94:	0008030b 	andeq	r0, r8, fp, lsl #6
    4c98:	00160400 	andseq	r0, r6, r0, lsl #8
    4c9c:	0b3a0e03 	bleq	e884b0 <__ccfg+0xe68508>
    4ca0:	0b390b3b 	bleq	e47994 <__ccfg+0xe279ec>
    4ca4:	00001349 	andeq	r1, r0, r9, asr #6
    4ca8:	0b000f05 	bleq	88c4 <__exidx_end+0x3994>
    4cac:	0013490b 	andseq	r4, r3, fp, lsl #18
    4cb0:	01150600 	tsteq	r5, r0, lsl #12
    4cb4:	13491927 	movtne	r1, #39207	; 0x9927
    4cb8:	00001301 	andeq	r1, r0, r1, lsl #6
    4cbc:	49000507 	stmdbmi	r0, {r0, r1, r2, r8, sl}
    4cc0:	08000013 	stmdaeq	r0, {r0, r1, r4}
    4cc4:	00000026 	andeq	r0, r0, r6, lsr #32
    4cc8:	03003409 	movweq	r3, #1033	; 0x409
    4ccc:	3b0b3a0e 	blcc	2d350c <__ccfg+0x2b3564>
    4cd0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4cd4:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4cd8:	0a000019 	beq	4d44 <patchImageGenfsk+0xe4>
    4cdc:	0e030104 	adfeqs	f0, f3, f4
    4ce0:	0b0b0b3e 	bleq	2c79e0 <__ccfg+0x2a7a38>
    4ce4:	0b3a1349 	bleq	e89a10 <__ccfg+0xe69a68>
    4ce8:	0b390b3b 	bleq	e479dc <__ccfg+0xe27a34>
    4cec:	00001301 	andeq	r1, r0, r1, lsl #6
    4cf0:	0300280b 	movweq	r2, #2059	; 0x80b
    4cf4:	000b1c0e 	andeq	r1, fp, lr, lsl #24
    4cf8:	01010c00 	tsteq	r1, r0, lsl #24
    4cfc:	13011349 	movwne	r1, #4937	; 0x1349
    4d00:	210d0000 	mrscs	r0, (UNDEF: 13)
    4d04:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4d08:	13490026 	movtne	r0, #36902	; 0x9026
    4d0c:	340f0000 	strcc	r0, [pc], #-0	; 4d14 <patchImageGenfsk+0xb4>
    4d10:	3a0e0300 	bcc	385918 <__ccfg+0x365970>
    4d14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4d18:	3f13490b 	svccc	0x0013490b
    4d1c:	00193c19 	andseq	r3, r9, r9, lsl ip
    4d20:	00131000 	andseq	r1, r3, r0
    4d24:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4d28:	15110000 	ldrne	r0, [r1, #-0]
    4d2c:	00192700 	andseq	r2, r9, r0, lsl #14
    4d30:	00171200 	andseq	r1, r7, r0, lsl #4
    4d34:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
    4d38:	13130000 	tstne	r3, #0
    4d3c:	0b0e0301 	bleq	385948 <__ccfg+0x3659a0>
    4d40:	3b0b3a0b 	blcc	2d3574 <__ccfg+0x2b35cc>
    4d44:	010b3905 	tsteq	fp, r5, lsl #18
    4d48:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    4d4c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4d50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d54:	13490b39 	movtne	r0, #39737	; 0x9b39
    4d58:	00000b38 	andeq	r0, r0, r8, lsr fp
    4d5c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    4d60:	000b2f13 	andeq	r2, fp, r3, lsl pc
    4d64:	01041600 	tsteq	r4, r0, lsl #12
    4d68:	0b3e0e03 	bleq	f8857c <__ccfg+0xf685d4>
    4d6c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    4d70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d74:	13010b39 	movwne	r0, #6969	; 0x1b39
    4d78:	0d170000 	ldceq	0, cr0, [r7, #-0]
    4d7c:	3a080300 	bcc	205984 <__ccfg+0x1e59dc>
    4d80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4d84:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4d88:	1800000b 	stmdane	r0, {r0, r1, r3}
    4d8c:	0b0b0117 	bleq	2c51f0 <__ccfg+0x2a5248>
    4d90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4d94:	13010b39 	movwne	r0, #6969	; 0x1b39
    4d98:	0d190000 	ldceq	0, cr0, [r9, #-0]
    4d9c:	3a080300 	bcc	2059a4 <__ccfg+0x1e59fc>
    4da0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4da4:	0013490b 	andseq	r4, r3, fp, lsl #18
    4da8:	00161a00 	andseq	r1, r6, r0, lsl #20
    4dac:	0b3a0e03 	bleq	e885c0 <__ccfg+0xe68618>
    4db0:	0b39053b 	bleq	e462a4 <__ccfg+0xe262fc>
    4db4:	00001349 	andeq	r1, r0, r9, asr #6
    4db8:	3f012e1b 	svccc	0x00012e1b
    4dbc:	3a0e0319 	bcc	385a28 <__ccfg+0x365a80>
    4dc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4dc4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4dc8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4dcc:	97184006 	ldrls	r4, [r8, -r6]
    4dd0:	00001942 	andeq	r1, r0, r2, asr #18
    4dd4:	0300051c 	movweq	r0, #1308	; 0x51c
    4dd8:	3b0b3a08 	blcc	2d3600 <__ccfg+0x2b3658>
    4ddc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4de0:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    4de4:	00001742 	andeq	r1, r0, r2, asr #14
    4de8:	0300341d 	movweq	r3, #1053	; 0x41d
    4dec:	3b0b3a08 	blcc	2d3614 <__ccfg+0x2b366c>
    4df0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4df4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    4df8:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    4dfc:	341f0000 	ldrcc	r0, [pc], #-0	; 4e04 <patchImageGenfsk+0x1a4>
    4e00:	3a0e0300 	bcc	385a08 <__ccfg+0x365a60>
    4e04:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e08:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4e0c:	1742b717 	smlaldne	fp, r2, r7, r7
    4e10:	01000000 	mrseq	r0, (UNDEF: 0)
    4e14:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    4e18:	0e030b13 	vmoveq.32	d3[0], r0
    4e1c:	01110e1b 	tsteq	r1, fp, lsl lr
    4e20:	17100612 			; <UNDEFINED> instruction: 0x17100612
    4e24:	24020000 	strcs	r0, [r2], #-0
    4e28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    4e2c:	000e030b 	andeq	r0, lr, fp, lsl #6
    4e30:	00160300 	andseq	r0, r6, r0, lsl #6
    4e34:	0b3a0e03 	bleq	e88648 <__ccfg+0xe686a0>
    4e38:	0b390b3b 	bleq	e47b2c <__ccfg+0xe27b84>
    4e3c:	00001349 	andeq	r1, r0, r9, asr #6
    4e40:	0b002404 	bleq	de58 <__exidx_end+0x8f28>
    4e44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    4e48:	05000008 	streq	r0, [r0, #-8]
    4e4c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    4e50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4e54:	13490b39 	movtne	r0, #39737	; 0x9b39
    4e58:	17060000 	strne	r0, [r6, -r0]
    4e5c:	3a0b0b01 	bcc	2c7a68 <__ccfg+0x2a7ac0>
    4e60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e64:	0013010b 	andseq	r0, r3, fp, lsl #2
    4e68:	000d0700 	andeq	r0, sp, r0, lsl #14
    4e6c:	0b3a0e03 	bleq	e88680 <__ccfg+0xe686d8>
    4e70:	0b390b3b 	bleq	e47b64 <__ccfg+0xe27bbc>
    4e74:	00001349 	andeq	r1, r0, r9, asr #6
    4e78:	49010108 	stmdbmi	r1, {r3, r8}
    4e7c:	00130113 	andseq	r0, r3, r3, lsl r1
    4e80:	00210900 	eoreq	r0, r1, r0, lsl #18
    4e84:	0b2f1349 	bleq	bc9bb0 <__ccfg+0xba9c08>
    4e88:	130a0000 	movwne	r0, #40960	; 0xa000
    4e8c:	3a0b0b01 	bcc	2c7a98 <__ccfg+0x2a7af0>
    4e90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4e94:	0013010b 	andseq	r0, r3, fp, lsl #2
    4e98:	000d0b00 	andeq	r0, sp, r0, lsl #22
    4e9c:	0b3a0e03 	bleq	e886b0 <__ccfg+0xe68708>
    4ea0:	0b390b3b 	bleq	e47b94 <__ccfg+0xe27bec>
    4ea4:	0b381349 	bleq	e09bd0 <__ccfg+0xde9c28>
    4ea8:	0f0c0000 	svceq	0x000c0000
    4eac:	000b0b00 	andeq	r0, fp, r0, lsl #22
    4eb0:	01130d00 	tsteq	r3, r0, lsl #26
    4eb4:	0b0b0e03 	bleq	2c86c8 <__ccfg+0x2a8720>
    4eb8:	0b3b0b3a 	bleq	ec7ba8 <__ccfg+0xea7c00>
    4ebc:	13010b39 	movwne	r0, #6969	; 0x1b39
    4ec0:	0f0e0000 	svceq	0x000e0000
    4ec4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    4ec8:	0f000013 	svceq	0x00000013
    4ecc:	13490026 	movtne	r0, #36902	; 0x9026
    4ed0:	0d100000 	ldceq	0, cr0, [r0, #-0]
    4ed4:	3a080300 	bcc	205adc <__ccfg+0x1e5b34>
    4ed8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4edc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    4ee0:	1100000b 	tstne	r0, fp
    4ee4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    4ee8:	0b3a050b 	bleq	e8631c <__ccfg+0xe66374>
    4eec:	0b390b3b 	bleq	e47be0 <__ccfg+0xe27c38>
    4ef0:	00001301 	andeq	r1, r0, r1, lsl #6
    4ef4:	03000d12 	movweq	r0, #3346	; 0xd12
    4ef8:	3b0b3a0e 	blcc	2d3738 <__ccfg+0x2b3790>
    4efc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4f00:	00053813 	andeq	r3, r5, r3, lsl r8
    4f04:	00151300 	andseq	r1, r5, r0, lsl #6
    4f08:	00001927 	andeq	r1, r0, r7, lsr #18
    4f0c:	27011514 	smladcs	r1, r4, r5, r1
    4f10:	01134919 	tsteq	r3, r9, lsl r9
    4f14:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    4f18:	13490005 	movtne	r0, #36869	; 0x9005
    4f1c:	13160000 	tstne	r6, #0
    4f20:	0b0e0301 	bleq	385b2c <__ccfg+0x365b84>
    4f24:	3b0b3a05 	blcc	2d3740 <__ccfg+0x2b3798>
    4f28:	010b3905 	tsteq	fp, r5, lsl #18
    4f2c:	17000013 	smladne	r0, r3, r0, r0
    4f30:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    4f34:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4f38:	13490b39 	movtne	r0, #39737	; 0x9b39
    4f3c:	00000b38 	andeq	r0, r0, r8, lsr fp
    4f40:	03000d18 	movweq	r0, #3352	; 0xd18
    4f44:	3b0b3a0e 	blcc	2d3784 <__ccfg+0x2b37dc>
    4f48:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4f4c:	00053813 	andeq	r3, r5, r3, lsl r8
    4f50:	01131900 	tsteq	r3, r0, lsl #18
    4f54:	0b0b0e03 	bleq	2c8768 <__ccfg+0x2a87c0>
    4f58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    4f5c:	13010b39 	movwne	r0, #6969	; 0x1b39
    4f60:	131a0000 	tstne	sl, #0
    4f64:	3a0b0b01 	bcc	2c7b70 <__ccfg+0x2a7bc8>
    4f68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    4f6c:	0013010b 	andseq	r0, r3, fp, lsl #2
    4f70:	01171b00 	tsteq	r7, r0, lsl #22
    4f74:	0b3a0b0b 	bleq	e87ba8 <__ccfg+0xe67c00>
    4f78:	0b39053b 	bleq	e4646c <__ccfg+0xe264c4>
    4f7c:	00001301 	andeq	r1, r0, r1, lsl #6
    4f80:	03000d1c 	movweq	r0, #3356	; 0xd1c
    4f84:	3b0b3a0e 	blcc	2d37c4 <__ccfg+0x2b381c>
    4f88:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    4f8c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4f90:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
    4f94:	0000193c 	andeq	r1, r0, ip, lsr r9
    4f98:	2701151e 	smladcs	r1, lr, r5, r1
    4f9c:	00130119 	andseq	r0, r3, r9, lsl r1
    4fa0:	00341f00 	eorseq	r1, r4, r0, lsl #30
    4fa4:	0b3a0e03 	bleq	e887b8 <__ccfg+0xe68810>
    4fa8:	0b39053b 	bleq	e4649c <__ccfg+0xe264f4>
    4fac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    4fb0:	0000193c 	andeq	r1, r0, ip, lsr r9
    4fb4:	03003420 	movweq	r3, #1056	; 0x420
    4fb8:	3b0b3a0e 	blcc	2d37f8 <__ccfg+0x2b3850>
    4fbc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    4fc0:	3c193f13 	ldccc	15, cr3, [r9], {19}
    4fc4:	21000019 	tstcs	r0, r9, lsl r0
    4fc8:	00000021 	andeq	r0, r0, r1, lsr #32
    4fcc:	3f012e22 	svccc	0x00012e22
    4fd0:	3a0e0319 	bcc	385c3c <__ccfg+0x365c94>
    4fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4fd8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    4fdc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    4fe0:	97184006 	ldrls	r4, [r8, -r6]
    4fe4:	13011942 	movwne	r1, #6466	; 0x1942
    4fe8:	05230000 	streq	r0, [r3, #-0]!
    4fec:	3a0e0300 	bcc	385bf4 <__ccfg+0x365c4c>
    4ff0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    4ff4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    4ff8:	1742b717 	smlaldne	fp, r2, r7, r7
    4ffc:	05240000 	streq	r0, [r4, #-0]!
    5000:	3a0e0300 	bcc	385c08 <__ccfg+0x365c60>
    5004:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    5008:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    500c:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000013c 	andeq	r0, r0, ip, lsr r1
       4:	00000180 	andeq	r0, r0, r0, lsl #3
}
       8:	a2500001 	subsge	r0, r0, #1
       c:	a5000003 	strge	r0, [r0, #-3]
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	025a0000 	subseq	r0, sl, #0
      20:	02620000 	rsbeq	r0, r2, #0
      24:	00050000 	andeq	r0, r5, r0
      28:	00062803 	andeq	r2, r6, r3, lsl #16
      2c:	00000020 	andeq	r0, r0, r0, lsr #32
      30:	00000000 	andeq	r0, r0, r0
      34:	00029800 	andeq	r9, r2, r0, lsl #16
      38:	0002a000 	andeq	sl, r2, r0
      3c:	03000500 	movweq	r0, #1280	; 0x500
			i = k;
      40:	20000540 	andcs	r0, r0, r0, asr #10
	...
}
      4c:	00000306 	andeq	r0, r0, r6, lsl #6
      50:	0000030e 	andeq	r0, r0, lr, lsl #6
      54:	40030005 	andmi	r0, r3, r5
		release;
      58:	00200005 	eoreq	r0, r0, r5
      5c:	00000000 	andeq	r0, r0, r0
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
	b->u.pointers.tail =
      64:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
}
      68:	01000000 	mrseq	r0, (UNDEF: 0)
		return NULL;
      6c:	00da5000 	sbcseq	r5, sl, r0
      70:	00eb0000 	rsceq	r0, fp, r0
      74:	00010000 	andeq	r0, r1, r0
      78:	00000050 	andeq	r0, r0, r0, asr r0
      7c:	00000000 	andeq	r0, r0, r0
      80:	0000dc00 	andeq	sp, r0, r0, lsl #24
      84:	0000e000 	andeq	lr, r0, r0
      88:	73000500 	movwvc	r0, #1280	; 0x500
      8c:	08230600 	stmdaeq	r3!, {r9, sl}
	...
      98:	000000ec 	andeq	r0, r0, ip, ror #1
      9c:	00000105 	andeq	r0, r0, r5, lsl #2
      a0:	00500001 	subseq	r0, r0, r1
      a4:	00000000 	andeq	r0, r0, r0
      a8:	06000000 	streq	r0, [r0], -r0
      ac:	12000001 	andne	r0, r0, #1
      b0:	01000001 	tsteq	r0, r1
      b4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
      c4:	00010000 	andeq	r0, r1, r0
fsm transmitter (message * messagePtr) {
      c8:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
      d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      e4:	00000c40 	andeq	r0, r0, r0, asr #24
      e8:	00000c40 	andeq	r0, r0, r0, asr #24
        spkt [0] = 0;
      ec:	00500001 	subseq	r0, r0, r1
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      f0:	00000000 	andeq	r0, r0, r0
        *p = messagePtr->messageType; p++; // insert message type
      f4:	cc000000 	stcgt	0, cr0, [r0], {-0}
        *p = messagePtr->requestNumber; p++; // insert request number
      f8:	d200000a 	andle	r0, r0, #10
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	0100000a 	tsteq	r0, sl
        *p = messagePtr->destinationId; p++; // insert receiver ID
     100:	0b025600 	bleq	95908 <__ccfg+0x75960>
        tcv_endp (spkt);
     104:	0b060000 	bleq	18010c <__ccfg+0x160164>
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	00010000 	andeq	r0, r1, r0
     10c:	00000056 	andeq	r0, r0, r6, asr r0
}
     110:	00000000 	andeq	r0, r0, r0
        finish;
     114:	0009b600 	andeq	fp, r9, r0, lsl #12
     118:	0009ba00 	andeq	fp, r9, r0, lsl #20
     11c:	52000100 	andpl	r0, r0, #0, 2
     120:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
char randomNumber() {
     124:	000009e4 	andeq	r0, r0, r4, ror #19
   srand((unsigned) time(&t));
     128:	00520001 	subseq	r0, r2, r1
     12c:	00000000 	andeq	r0, r0, r0
   return (char)rand();
     130:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
}
     134:	c4000009 	strgt	r0, [r0], #-9
     138:	01000009 	tsteq	r0, r9
fsm root {
     13c:	00005300 	andeq	r5, r0, r0, lsl #6
     140:	00000000 	andeq	r0, r0, r0
     144:	09740000 	ldmdbeq	r4!, {}^	; <UNPREDICTABLE>
     148:	097e0000 	ldmdbeq	lr!, {}^	; <UNPREDICTABLE>
     14c:	00010000 	andeq	r0, r1, r0
     150:	00000053 	andeq	r0, r0, r3, asr r0
     154:	00000000 	andeq	r0, r0, r0
     158:	00097400 	andeq	r7, r9, r0, lsl #8
     15c:	00097a00 	andeq	r7, r9, r0, lsl #20
     160:	53000100 	movwpl	r0, #256	; 0x100
	...
     16c:	00000a0a 	andeq	r0, r0, sl, lsl #20
        recordCount = 0;
     170:	00000a14 	andeq	r0, r0, r4, lsl sl
        nodeId = 1;
     174:	00530001 	subseq	r0, r3, r1
     178:	00000000 	andeq	r0, r0, r0
        groupId = 1;
     17c:	fc000000 	stc2	0, cr0, [r0], {-0}
     180:	26000009 	strcs	r0, [r0], -r9
        messagePtr = (message *) umalloc(sizeof(message));
     184:	0100000a 	tsteq	r0, sl
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	00005200 	andeq	r5, r0, r0, lsl #4
     18c:	00000000 	andeq	r0, r0, r0
     190:	0a4a0000 	beq	1280198 <__ccfg+0x12601f0>
        tcv_plug(0, &plug_null);
     194:	0a540000 	beq	150019c <__ccfg+0x14e01f4>
     198:	00010000 	andeq	r0, r1, r0
        sfd = tcv_open(WNONE, 0, 0);
     19c:	00000053 	andeq	r0, r0, r3, asr r0
     1a0:	00000000 	andeq	r0, r0, r0
     1a4:	000a3c00 	andeq	r3, sl, r0, lsl #24
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	000a7200 	andeq	r7, sl, r0, lsl #4
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			diag("Cannot open tcv interface");
     1b8:	000008e2 	andeq	r0, r0, r2, ror #17
     1bc:	000008ec 	andeq	r0, r0, ip, ror #17
			halt();
     1c0:	00530001 	subseq	r0, r3, r1
        currentProtocol = IDLE;
     1c4:	00000000 	andeq	r0, r0, r0
     1c8:	d4000000 	strle	r0, [r0], #-0
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	fe000008 	cdp2	0, 0, cr0, cr0, cr8, {0}
     1d0:	01000008 	tsteq	r0, r8
     1d4:	00005200 	andeq	r5, r0, r0, lsl #4
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	09340000 	ldmdbeq	r4!, {}	; <UNPREDICTABLE>
     1e0:	093e0000 	ldmdbeq	lr!, {}	; <UNPREDICTABLE>
        ser_outf(Options, menu);
     1e4:	00010000 	andeq	r0, r1, r0
     1e8:	00000053 	andeq	r0, r0, r3, asr r0
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	00000000 	andeq	r0, r0, r0
     1f0:	00092600 	andeq	r2, r9, r0, lsl #12
     1f4:	00094e00 	andeq	r4, r9, r0, lsl #28
        switch (choice)
     1f8:	52000100 	andpl	r0, r0, #0, 2
	...
     204:	00000408 	andeq	r0, r0, r8, lsl #8
     208:	0000040c 	andeq	r0, r0, ip, lsl #8
     20c:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     210:	0f000004 	svceq	0x00000004
     214:	01000004 	tsteq	r0, r4
     218:	00005100 	andeq	r5, r0, r0, lsl #2
     21c:	00000000 	andeq	r0, r0, r0
     220:	07940000 	ldreq	r0, [r4, r0]
     224:	07960000 	ldreq	r0, [r6, r0]
        proceed Menu_Header;
     228:	00010000 	andeq	r0, r1, r0
     22c:	00000050 	andeq	r0, r0, r0, asr r0
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	00000000 	andeq	r0, r0, r0
     234:	00079400 	andeq	r9, r7, r0, lsl #8
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	0007aa00 	andeq	sl, r7, r0, lsl #20
     23c:	51000100 	mrspl	r0, (UNDEF: 16)
        proceed Menu_Header;
     240:	000007aa 	andeq	r0, r0, sl, lsr #15
     244:	000007ae 	andeq	r0, r0, lr, lsr #15
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	b4550001 	ldrblt	r0, [r5], #-1
     24c:	ca000007 	bgt	270 <root+0x134>
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	01000007 	tsteq	r0, r7
     254:	07ca5500 	strbeq	r5, [sl, r0, lsl #10]
     258:	07d80000 	ldrbeq	r0, [r8, r0]
    if (node < 1 || node > 25) {
     25c:	00010000 	andeq	r0, r1, r0
     260:	0007d851 	andeq	sp, r7, r1, asr r8
            proceed Set_Node_ID;
     264:	00080600 	andeq	r0, r8, r0, lsl #12
        proceed Menu_Header;
     268:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     26c:	0000080c 	andeq	r0, r0, ip, lsl #16
        currentProtocol = DISCOVERY_REQUEST;
     270:	00000834 	andeq	r0, r0, r4, lsr r8
     274:	34550001 	ldrbcc	r0, [r5], #-1
        receiverId = 0;
     278:	42000008 	andmi	r0, r0, #8
        proceed Transmit_Message;
     27c:	01000008 	tsteq	r0, r8
        currentProtocol = CREATE_RECORD;
     280:	08425100 	stmdaeq	r2, {r8, ip, lr}^
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
     288:	00010000 	andeq	r0, r1, r0
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	00084c55 	andeq	r4, r8, r5, asr ip
     290:	00085700 	andeq	r5, r8, r0, lsl #14
     294:	51000100 	mrspl	r0, (UNDEF: 16)
    if (node < 1 || node > 25) {
     298:	00000857 	andeq	r0, r0, r7, asr r8
     29c:	0000085a 	andeq	r0, r0, sl, asr r8
            proceed Create_Record;
     2a0:	5a550001 	bpl	15402ac <__ccfg+0x1520304>
     2a4:	60000008 	andvs	r0, r0, r8
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	01000008 	tsteq	r0, r8
     2ac:	08605100 	stmdaeq	r0!, {r8, ip, lr}^
     2b0:	08720000 	ldmdaeq	r2!, {}^	; <UNPREDICTABLE>
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	00010000 	andeq	r0, r1, r0
     2b8:	00087255 	andeq	r7, r8, r5, asr r2
     2bc:	00088400 	andeq	r8, r8, r0, lsl #8
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	51000100 	mrspl	r0, (UNDEF: 16)
        proceed Transmit_Message;
     2c4:	00000884 	andeq	r0, r0, r4, lsl #17
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	000008a4 	andeq	r0, r0, r4, lsr #17
        proceed Transmit_Message;
     2cc:	00550001 	subseq	r0, r5, r1
        currentProtocol = DELETE_RECORD;
     2d0:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	94000000 	strls	r0, [r0], #-0
        currentProtocol = DELETE_RECORD;
     2d8:	aa000007 	bge	2fc <root+0x1c0>
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	01000007 	tsteq	r0, r7
        proceed Get_Receiving_Node;
     2e0:	07aa5200 	streq	r5, [sl, r0, lsl #4]!
        currentProtocol = RETRIEVE_RECORD;
     2e4:	07b00000 	ldreq	r0, [r0, r0]!
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	00010000 	andeq	r0, r1, r0
        currentProtocol = RETRIEVE_RECORD;
     2ec:	0007b456 	andeq	fp, r7, r6, asr r4
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	0007c400 	andeq	ip, r7, r0, lsl #8
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
     2f8:	000007ca 	andeq	r0, r0, sl, asr #15
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	000007d8 	ldrdeq	r0, [r0], -r8
     300:	d8520001 	ldmdale	r2, {r0}^
     304:	08000007 	stmdaeq	r0, {r0, r1, r2}
    if (node < 1 || node > 25) {
     308:	01000008 	tsteq	r0, r8
     30c:	080c5600 	stmdaeq	ip, {r9, sl, ip, lr}
            proceed Prompt_Recieving_Node;
     310:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00010000 	andeq	r0, r1, r0
     318:	00083456 	andeq	r3, r8, r6, asr r4
        char desiredRecordIndex = -1;
     31c:	00084200 	andeq	r4, r8, r0, lsl #4
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	52000100 	andpl	r0, r0, #0, 2
     324:	00000842 	andeq	r0, r0, r2, asr #16
        char desiredRecordIndex = -1;
     328:	0000084c 	andeq	r0, r0, ip, asr #16
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	4c560001 	mrrcmi	0, 0, r0, r6, cr1
        messagePtr->recordIndex = desiredRecordIndex;
     330:	57000008 	strpl	r0, [r0, -r8]
     334:	01000008 	tsteq	r0, r8
     338:	085a5200 	ldmdaeq	sl, {r9, ip, lr}^
        proceed Transmit_Message;
     33c:	08650000 	stmdaeq	r5!, {}^	; <UNPREDICTABLE>
        messagePtr -> senderGroupId = groupId;
     340:	00010000 	andeq	r0, r1, r0
     344:	00086552 	andeq	r6, r8, r2, asr r5
     348:	00087200 	andeq	r7, r8, r0, lsl #4
        messagePtr -> messageType = currentProtocol;
     34c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     350:	00000872 	andeq	r0, r0, r2, ror r8
        messagePtr -> requestNumber = randomNumber();
     354:	000008a4 	andeq	r0, r0, r4, lsr #17
        messagePtr -> senderId = nodeId;
     358:	00520001 	subseq	r0, r2, r1
     35c:	00000000 	andeq	r0, r0, r0
        call transmitter(messagePtr, Menu_Header);
     360:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
        messagePtr -> destinationId = receiverId;
     364:	16000007 	strne	r0, [r0], -r7
     368:	01000007 	tsteq	r0, r7
        call transmitter(messagePtr, Menu_Header);
     36c:	00005000 	andeq	r5, r0, r0
     370:	00000000 	andeq	r0, r0, r0
     374:	07080000 	streq	r0, [r8, -r0]
     378:	07170000 	ldreq	r0, [r7, -r0]
            proceed Set_Node_ID;
     37c:	00010000 	andeq	r0, r1, r0
            break;
     380:	00000051 	andeq	r0, r0, r1, asr r0
            proceed Set_Node_ID;
     384:	00000000 	andeq	r0, r0, r0
            proceed Find_Neighbours;
     388:	0006b800 	andeq	fp, r6, r0, lsl #16
            proceed Create_Record;
     38c:	0006cf00 	andeq	ip, r6, r0, lsl #30
            proceed Delete_Record;
     390:	50000100 	andpl	r0, r0, r0, lsl #2
            proceed Retrieve_Record;
     394:	000006f2 	strdeq	r0, [r0], -r2
            diag("Reset Local Storage");
     398:	00000708 	andeq	r0, r0, r8, lsl #14
            break;
     39c:	00500001 	subseq	r0, r0, r1
            diag("Reset Local Storage");
     3a0:	00000000 	andeq	r0, r0, r0
     3a4:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     3a8:	be000005 	cdplt	0, 0, cr0, cr0, cr5, {0}
     3ac:	01000005 	tsteq	r0, r5
     3b0:	05be5200 	ldreq	r5, [lr, #512]!	; 0x200
     3b4:	05c60000 	strbeq	r0, [r6]
     3b8:	00050000 	andeq	r0, r5, r0
     3bc:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     3c0:	00066040 	andeq	r6, r6, r0, asr #32
     3c4:	00066400 	andeq	r6, r6, r0, lsl #8
     3c8:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     3cc:	40092004 	andmi	r2, r9, r4
     3d0:	00000664 	andeq	r0, r0, r4, ror #12
     3d4:	00000666 	andeq	r0, r0, r6, ror #12
     3d8:	66520001 	ldrbvs	r0, [r2], -r1
     3dc:	68000006 	stmdavs	r0, {r1, r2}
     3e0:	05000006 	streq	r0, [r0, #-6]
     3e4:	20040c00 	andcs	r0, r4, r0, lsl #24
     3e8:	00004009 	andeq	r4, r0, r9
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	05c80000 	strbeq	r0, [r8]
     3f4:	05d20000 	ldrbeq	r0, [r2]
     3f8:	00010000 	andeq	r0, r1, r0
     3fc:	0005d652 	andeq	sp, r5, r2, asr r6
     400:	0005e000 	andeq	lr, r5, r0
     404:	52000100 	andpl	r0, r0, #0, 2
static void devinit_uart (int devnum) {
     408:	000005e4 	andeq	r0, r0, r4, ror #11
	adddevfunc (ioreq_uart_a, devnum);
     40c:	000005ee 	andeq	r0, r0, lr, ror #11
     410:	f2520001 	vhadd.s16	d16, d2, d1
void udelay (volatile word n) {
     414:	fe000005 	cdp2	0, 0, cr0, cr0, cr5, {0}
     418:	01000005 	tsteq	r0, r5
	while (n) {
     41c:	068a5200 	streq	r5, [sl], r0, lsl #4
     420:	068e0000 	streq	r0, [lr], r0
}
     424:	00010000 	andeq	r0, r1, r0
	while (n--);
     428:	00000052 	andeq	r0, r0, r2, asr r0
     42c:	00000000 	andeq	r0, r0, r0
     430:	00054e00 	andeq	r4, r5, r0, lsl #28
		n--;
     434:	00056000 	andeq	r6, r5, r0
     438:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
void mdelay (volatile word n) {
     444:	000004e8 	andeq	r0, r0, r8, ror #9
	while (n) {
     448:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     44c:	00500001 	subseq	r0, r0, r1
}
     450:	00000000 	andeq	r0, r0, r0
		udelay (999);
     454:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     458:	ee000004 	cdp	0, 0, cr0, cr0, cr4, {0}
		n--;
     45c:	01000004 	tsteq	r0, r4
     460:	04ee5100 	strbteq	r5, [lr], #256	; 0x100
     464:	04f30000 	ldrbteq	r0, [r3], #0
     468:	00010000 	andeq	r0, r1, r0
void __pi_ondomain (lword d) {
     46c:	00000052 	andeq	r0, r0, r2, asr r0
	...
			__pi_systat.effpdm = 1;
     47c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	00510001 	subseq	r0, r1, r1
     494:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
     498:	01000000 	mrseq	r0, (UNDEF: 0)
     49c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
void __pi_offdomain (lword d) {
     4ac:	00010000 	andeq	r0, r1, r0
	PRCMPowerDomainOff (d);
     4b0:	00000052 	andeq	r0, r0, r2, asr r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	00000000 	andeq	r0, r0, r0
     4b8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (d & PRCM_DOMAIN_RFCORE) {
     4c4:	000004a8 	andeq	r0, r0, r8, lsr #9
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
     4cc:	b3500001 	cmplt	r0, #1
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4d0:	dc000004 	stcle	0, cr0, [r0], {4}
     4d4:	01000004 	tsteq	r0, r4
	__pi_systat.ondmns &= ~d;
     4d8:	00005400 	andeq	r5, r0, r0, lsl #8
     4dc:	00000000 	andeq	r0, r0, r0
}
     4e0:	046c0000 	strbteq	r0, [ip], #-0
     4e4:	04840000 	streq	r0, [r4], #0
void __pi_syserror (word ec, const char *m) {
     4e8:	00010000 	andeq	r0, r1, r0
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	00048450 	andeq	r8, r4, r0, asr r4
     4f0:	00049c00 	andeq	r9, r4, r0, lsl #24
  __ASM volatile ("cpsid i" : : : "memory");
     4f4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     500:	00000440 	andeq	r0, r0, r0, asr #8
		all_leds_blink;
     504:	00000446 	andeq	r0, r0, r6, asr #8
     508:	00500001 	subseq	r0, r0, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     518:	01000000 	mrseq	r0, (UNDEF: 0)
     51c:	00005000 	andeq	r5, r0, r0
     520:	00000000 	andeq	r0, r0, r0
     524:	14f80000 	ldrbtne	r0, [r8], #0
     528:	15160000 	ldrne	r0, [r6, #-0]
	while (1) {
     52c:	00020000 	andeq	r0, r2, r0
     530:	15167091 	ldrne	r7, [r6, #-145]	; 0xffffff6f
     534:	153e0000 	ldrne	r0, [lr, #-0]!
     538:	00010000 	andeq	r0, r1, r0
void tci_run_delay_timer () {
     53c:	00154254 	andseq	r4, r5, r4, asr r2
	setdel = __pi_mintk - __pi_old;
     540:	00154a00 	andseq	r4, r5, r0, lsl #20
     544:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     548:	00001558 	andeq	r1, r0, r8, asr r5
     54c:	000015a2 	andeq	r1, r0, r2, lsr #11
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	a6560001 	ldrbge	r0, [r6], -r1
     554:	1e000015 	mcrne	0, 0, r0, cr0, cr5, {0}
     558:	01000016 	tsteq	r0, r6, lsl r0
     55c:	00005600 	andeq	r5, r0, r0, lsl #12
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	00000000 	andeq	r0, r0, r0
	sti_tim;
     564:	15620000 	strbne	r0, [r2, #-0]!
}
     568:	15a00000 	strne	r0, [r0, #0]!
     56c:	00010000 	andeq	r0, r1, r0
     570:	0015a651 	andseq	sl, r5, r1, asr r6
     574:	0015b800 	andseq	fp, r5, r0, lsl #16
     578:	51000100 	mrspl	r0, (UNDEF: 16)
	cli_aux;
     57c:	000015c4 	andeq	r1, r0, r4, asr #11
     580:	000015ce 	andeq	r1, r0, lr, asr #11
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	e0510001 	subs	r0, r1, r1
     588:	e4000015 	str	r0, [r0], #-21	; 0xffffffeb
     58c:	01000015 	tsteq	r0, r5, lsl r0
     590:	16045100 	strne	r5, [r4], -r0, lsl #2
	sti_aux;
     594:	16080000 	strne	r0, [r8], -r0
}
     598:	00010000 	andeq	r0, r1, r0
     59c:	00000051 	andeq	r0, r0, r1, asr r0
     5a0:	00000000 	andeq	r0, r0, r0
void AONRTCIntHandler () {
     5a4:	00156200 	andseq	r6, r5, r0, lsl #4
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a8:	0015a000 	andseq	sl, r5, r0
     5ac:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5b0:	000015a6 	andeq	r1, r0, r6, lsr #11
		if (__pi_utims [0] == 0)
     5b4:	000015ce 	andeq	r1, r0, lr, asr #11
     5b8:	e0550001 	subs	r0, r5, r1
		if (*(__pi_utims [0])) {
     5bc:	e4000015 	str	r0, [r0], #-21	; 0xffffffeb
     5c0:	01000015 	tsteq	r0, r5, lsl r0
			(*(__pi_utims [0]))--;
     5c4:	16045500 	strne	r5, [r4], -r0, lsl #10
		if (__pi_utims [1] == 0)
     5c8:	161e0000 	ldrne	r0, [lr], -r0
		if (*(__pi_utims [1])) {
     5cc:	00010000 	andeq	r0, r1, r0
			aux_timer_inactive = 0;
     5d0:	00000055 	andeq	r0, r0, r5, asr r0
			(*(__pi_utims [1]))--;
     5d4:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
     5d8:	0015d400 	andseq	sp, r5, r0, lsl #8
		if (*(__pi_utims [2])) {
     5dc:	0015e000 	andseq	lr, r5, r0
			(*(__pi_utims [2]))--;
     5e0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
		if (__pi_utims [3] != 0) {
     5e4:	000015e4 	andeq	r1, r0, r4, ror #11
			if (*(__pi_utims [3])) {
     5e8:	000015fe 	strdeq	r1, [r0], -lr
				aux_timer_inactive = 0;
     5ec:	02550001 	subseq	r0, r5, #1
				(*(__pi_utims [3]))--;
     5f0:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
	if (__pi_systat.ledsts) {
     5f4:	01000016 	tsteq	r0, r6, lsl r0
     5f8:	00005500 	andeq	r5, r0, r0, lsl #10
		if (__pi_systat.ledblc++ == 0) {
     5fc:	00000000 	andeq	r0, r0, r0
     600:	15880000 	strne	r0, [r8]
			if (__pi_systat.ledblk) {
     604:	15a00000 	strne	r0, [r0, #0]!
     608:	00010000 	andeq	r0, r1, r0
     60c:	00000054 	andeq	r0, r0, r4, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	00000000 	andeq	r0, r0, r0
     614:	0015ce00 	andseq	ip, r5, r0, lsl #28
				if (__pi_systat.ledsts & 0x2)
     618:	0015e000 	andseq	lr, r5, r0
     61c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     620:	000015e4 	andeq	r1, r0, r4, ror #11
				if (__pi_systat.ledsts & 0x4)
     624:	000015f8 	strdeq	r1, [r0], -r8
				__pi_systat.ledblk = 0;
     628:	f8540001 			; <UNDEFINED> instruction: 0xf8540001
     62c:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
			if (__pi_systat.fstblk)
     630:	01000016 	tsteq	r0, r6, lsl r0
     634:	00005300 	andeq	r5, r0, r0, lsl #6
				__pi_systat.ledblc = 200;
     638:	00000000 	andeq	r0, r0, r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     63c:	16100000 	ldrne	r0, [r0], -r0
		cli_tim;
     640:	161e0000 	ldrne	r0, [lr], -r0
		__pi_new += setdel;
     644:	00010000 	andeq	r0, r1, r0
     648:	00000051 	andeq	r0, r0, r1, asr r0
		setdel = 0;
     64c:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     650:	00100800 	andseq	r0, r0, r0, lsl #16
		__pi_new += setdel;
     654:	00101400 	andseq	r1, r0, r0, lsl #8
		RISE_N_SHINE;
     658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	00500001 	subseq	r0, r0, r1
     670:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
     674:	01000000 	mrseq	r0, (UNDEF: 0)
     678:	00005000 	andeq	r5, r0, r0
	...
				__pi_systat.ledblk = 1;
     688:	00010000 	andeq	r0, r1, r0
		if (aux_timer_inactive) {
     68c:	00000051 	andeq	r0, r0, r1, asr r0
			cli_aux;
     690:	00000000 	andeq	r0, r0, r0
     694:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     6a8:	00520001 	subseq	r0, r2, r1
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	01000000 	mrseq	r0, (UNDEF: 0)
     6b4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	if (setdel) {
     6c4:	00010000 	andeq	r0, r1, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00000053 	andeq	r0, r0, r3, asr r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	00000000 	andeq	r0, r0, r0
     6d0:	53000100 	movwpl	r0, #256	; 0x100
	...
				AON_RTC_O_CH0CMP)) - gettav ());
     6dc:	00530001 	subseq	r0, r3, r1
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ec:	01000000 	mrseq	r0, (UNDEF: 0)
}
     6f0:	00005000 	andeq	r5, r0, r0
		sti_tim;
     6f4:	00000000 	andeq	r0, r0, r0
		return YES;
     6f8:	14e00000 	strbtne	r0, [r0], #0
     6fc:	14e80000 	strbtne	r0, [r8], #0
     700:	00010000 	andeq	r0, r1, r0
     704:	00000050 	andeq	r0, r0, r0, asr r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
     70c:	00140400 	andseq	r0, r4, r0, lsl #8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	00140a00 	andseq	r0, r4, r0, lsl #20
	UARTDisable (UART0_BASE);
     714:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	UARTConfigSetExpClk (UART0_BASE,
     720:	0000141a 	andeq	r1, r0, sl, lsl r4
     724:	00001446 	andeq	r1, r0, r6, asr #8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	46540001 	ldrbmi	r0, [r4], -r1
     72c:	4c000014 	stcmi	0, cr0, [r0], {20}
     730:	01000014 	tsteq	r0, r4, lsl r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	144c5200 	strbne	r5, [ip], #-512	; 0xfffffe00
     738:	14940000 	ldrne	r0, [r4], #0
     73c:	00010000 	andeq	r0, r1, r0
	urates [0] = rate;
     740:	00149454 	andseq	r9, r4, r4, asr r4
}
     744:	0014ac00 	andseq	sl, r4, r0, lsl #24
     748:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     754:	00001446 	andeq	r1, r0, r6, asr #8
     758:	0000144a 	andeq	r1, r0, sl, asr #8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	4a540001 	bmi	1500768 <__ccfg+0x14e07c0>
     760:	4c000014 	stcmi	0, cr0, [r0], {20}
     764:	01000014 	tsteq	r0, r4, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	14625300 	strbtne	r5, [r2], #-768	; 0xfffffd00
     76c:	146b0000 	strbtne	r0, [fp], #-0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     770:	00010000 	andeq	r0, r1, r0
     774:	00000050 	andeq	r0, r0, r0, asr r0
	__pi_uart_setrate (urates [0], __pi_uart);
     778:	00000000 	andeq	r0, r0, r0
     77c:	00145400 	andseq	r5, r4, r0, lsl #8
     780:	00146400 	andseq	r6, r4, r0, lsl #8
     784:	53000100 	movwpl	r0, #256	; 0x100
	...
     790:	0000141a 	andeq	r1, r0, sl, lsl r4
	switch (operation) {
     794:	00001438 	andeq	r1, r0, r8, lsr r4
static int ioreq_uart_a (int operation, char *buf, int len) {
     798:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
     79c:	5e000014 	mcrpl	0, 0, r0, cr0, cr4, {0}
     7a0:	01000014 	tsteq	r0, r4, lsl r0
     7a4:	145e5000 	ldrbne	r5, [lr], #-0
     7a8:	14680000 	strbtne	r0, [r8], #-0
				*buf++ = uart_a_read;
     7ac:	00020000 	andeq	r0, r2, r0
     7b0:	00007c74 	andeq	r7, r0, r4, ror ip
			while (len && uart_a_char_available) {
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	0f880000 	svceq	0x00880000
     7bc:	0fb60000 	svceq	0x00b60000
			if (len != operation) {
     7c0:	00010000 	andeq	r0, r1, r0
}
     7c4:	000fc450 	andeq	ip, pc, r0, asr r4	; <UNPREDICTABLE>
     7c8:	00100800 	andseq	r0, r0, r0, lsl #16
			uart_a_disable_int;
     7cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     7d8:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     7dc:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
			if (uart_a_char_available) {
     7e0:	9c530001 	mrrcls	0, 0, r0, r3, cr1
     7e4:	9e00000f 	cdpls	0, 0, cr0, cr0, cr15, {0}
				uart_a_enable_int;
     7e8:	0200000f 	andeq	r0, r0, #15
     7ec:	a2007000 	andge	r7, r0, #0
				goto Redo_rx;
     7f0:	fa00000f 	blx	834 <ioreq_uart_a+0xa0>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f4:	0100000f 	tsteq	r0, pc
     7f8:	0ffa5300 	svceq	0x00fa5300
			return -2;
     7fc:	0ffe0000 	svceq	0x00fe0000
     800:	00020000 	andeq	r0, r2, r0
				uart_a_write (*buf);
     804:	0ffe0073 	svceq	0x00fe0073
     808:	10080000 	andne	r0, r8, r0
			while (len && uart_a_room_in_tx) {
     80c:	00010000 	andeq	r0, r1, r0
     810:	00000053 	andeq	r0, r0, r3, asr r0
     814:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
     818:	000f9000 	andeq	r9, pc, r0
			uart_a_disable_int;
     81c:	000f9200 	andeq	r9, pc, r0, lsl #4
     820:	52000100 	andpl	r0, r0, #0, 2
			if (uart_a_room_in_tx) {
     824:	00000fa2 	andeq	r0, r0, r2, lsr #31
     828:	00000fe2 	andeq	r0, r0, r2, ror #31
				uart_a_enable_int;
     82c:	fa520001 	blx	1480838 <__ccfg+0x1460890>
     830:	fe00000f 	cdp2	0, 0, cr0, cr0, cr15, {0}
				*buf++ = uart_a_read;
     834:	0100000f 	tsteq	r0, pc
			if (uart_a_room_in_tx) {
     838:	0ffe5300 	svceq	0x00fe5300
				uart_a_write (*buf);
     83c:	10080000 	andne	r0, r8, r0
     840:	00010000 	andeq	r0, r1, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     844:	00000052 	andeq	r0, r0, r2, asr r0
     848:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
     84c:	00132c00 	andseq	r2, r3, r0, lsl #24
     850:	00133400 	andseq	r3, r3, r0, lsl #8
     854:	51000100 	mrspl	r0, (UNDEF: 16)
			return 0;
     858:	00001338 	andeq	r1, r0, r8, lsr r3
			if (len == UART_CNTRL_SETRATE) {
     85c:	0000133a 	andeq	r1, r0, sl, lsr r3
				if (__pi_uart_setrate (*((word*)buf),
     860:	00510001 	subseq	r0, r1, r1
     864:	00000000 	andeq	r0, r0, r0
     868:	80000000 	andhi	r0, r0, r0
				syserror (EREQPAR, "uar");
     86c:	9c000012 	stcls	0, cr0, [r0], {18}
			syserror (ENOOPER, "uai");
     870:	01000012 	tsteq	r0, r2, lsl r0
			if (len == UART_CNTRL_GETRATE) {
     874:	12a25000 	adcne	r5, r2, #0
				return 1;
     878:	12ae0000 	adcne	r0, lr, #0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87c:	00010000 	andeq	r0, r1, r0
			syserror (ENOOPER, "uai");
     880:	00000050 	andeq	r0, r0, r0, asr r0
     884:	00000000 	andeq	r0, r0, r0
     888:	00128000 	andseq	r8, r2, r0
     88c:	00129e00 	andseq	r9, r2, r0, lsl #28
     890:	51000100 	mrspl	r0, (UNDEF: 16)
     894:	000012a2 	andeq	r1, r0, r2, lsr #5
     898:	000012ac 	andeq	r1, r0, ip, lsr #5
     89c:	00510001 	subseq	r0, r1, r1
     8a0:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	80000000 	andhi	r0, r0, r0
void UART0IntHandler () {
     8a8:	a1000012 	tstge	r0, r2, lsl r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	01000012 	tsteq	r0, r2, lsl r0
     8b0:	12a25200 	adcne	r5, r2, #0, 4
     8b4:	12aa0000 	adcne	r0, sl, #0
     8b8:	00010000 	andeq	r0, r1, r0
     8bc:	00000052 	andeq	r0, r0, r2, asr r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00128000 	andseq	r8, r2, r0
		RISE_N_SHINE;
     8c8:	00129800 	andseq	r9, r2, r0, lsl #16
     8cc:	53000100 	movwpl	r0, #256	; 0x100
		i_trigger (devevent (UART_A, READ));
     8d0:	00001298 	muleq	r0, r8, r2
     8d4:	0000131c 	andeq	r1, r0, ip, lsl r3
     8d8:	00550001 	subseq	r0, r5, r1
     8dc:	00000000 	andeq	r0, r0, r0
     8e0:	80000000 	andhi	r0, r0, r0
     8e4:	00000012 	andeq	r0, r0, r2, lsl r0
     8e8:	02000013 	andeq	r0, r0, #19
     8ec:	00009100 	andeq	r9, r0, r0, lsl #2
     8f0:	1c000013 	stcne	0, cr0, [r0], {19}
     8f4:	02000013 	andeq	r0, r0, #19
     8f8:	00009100 	andeq	r9, r0, r0, lsl #2
     8fc:	00000000 	andeq	r0, r0, r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     900:	b0000000 	andlt	r0, r0, r0
     904:	c6000012 			; <UNDEFINED> instruction: 0xc6000012
     908:	01000012 	tsteq	r0, r2, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     90c:	12ce5000 	sbcne	r5, lr, #0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	12e00000 	rscne	r0, r0, #0
     914:	00010000 	andeq	r0, r1, r0
		RISE_N_SHINE;
     918:	0012f050 	andseq	pc, r2, r0, asr r0	; <UNPREDICTABLE>
     91c:	0012f800 	andseq	pc, r2, r0, lsl #16
     920:	50000100 	andpl	r0, r0, r0, lsl #2
		i_trigger (devevent (UART_A, WRITE));
     924:	00001300 	andeq	r1, r0, r0, lsl #6
     928:	00001308 	andeq	r1, r0, r8, lsl #6
     92c:	00500001 	subseq	r0, r0, r1
     930:	00000000 	andeq	r0, r0, r0
     934:	5c000000 	stcpl	0, cr0, [r0], {-0}
     938:	62000012 	andvs	r0, r0, #18
     93c:	01000012 	tsteq	r0, r2, lsl r0
     940:	12685000 	rsbne	r5, r8, #0
     944:	12700000 	rsbsne	r0, r0, #0
     948:	00010000 	andeq	r0, r1, r0
     94c:	00127450 	andseq	r7, r2, r0, asr r4
}
     950:	00128000 	andseq	r8, r2, r0
     954:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     960:	0000125c 	andeq	r1, r0, ip, asr r2
void __buttons_setirq (int val) {
     964:	00001264 	andeq	r1, r0, r4, ror #4
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	68510001 	ldmdavs	r1, {r0}^
     96c:	72000012 	andvc	r0, r0, #18
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	01000012 	tsteq	r0, r2, lsl r0
     974:	12745100 	rsbsne	r5, r4, #0, 2
     978:	12800000 	addne	r0, r0, #0
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	00010000 	andeq	r0, r1, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     980:	00000051 	andeq	r0, r0, r1, asr r0
     984:	00000000 	andeq	r0, r0, r0
     988:	00124e00 	andseq	r4, r2, r0, lsl #28
     98c:	00125600 	andseq	r5, r2, r0, lsl #12
     990:	50000100 	andpl	r0, r0, r0, lsl #2
     994:	0000125a 	andeq	r1, r0, sl, asr r2
}
     998:	0000125c 	andeq	r1, r0, ip, asr r2
     99c:	00500001 	subseq	r0, r0, r1
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
void __pinlist_setirq (int val) {
     9a8:	50000012 	andpl	r0, r0, r2, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
     9ac:	01000012 	tsteq	r0, r2, lsl r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	00005200 	andeq	r5, r0, r0, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	123a0000 	eorsne	r0, sl, #0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9bc:	123c0000 	eorsne	r0, ip, #0
     9c0:	00010000 	andeq	r0, r1, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c4:	00000050 	andeq	r0, r0, r0, asr r0
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	00123a00 	andseq	r3, r2, r0, lsl #20
	for (i = 0; i < N_PINLIST; i++) {
     9d0:	00124400 	andseq	r4, r2, r0, lsl #8
}
     9d4:	51000100 	mrspl	r0, (UNDEF: 16)
     9d8:	00001248 	andeq	r1, r0, r8, asr #4
     9dc:	0000124e 	andeq	r1, r0, lr, asr #4
     9e0:	00510001 	subseq	r0, r1, r1
void GPIOIntHandler () {
     9e4:	00000000 	andeq	r0, r0, r0
if (buttons_int) {
     9e8:	3a000000 	bcc	9f0 <GPIOIntHandler+0xc>
     9ec:	3e000012 	mcrcc	0, 0, r0, cr0, cr2, {0}
	buttons_disable ();
     9f0:	01000012 	tsteq	r0, r2, lsl r0
     9f4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
	i_trigger ((aword)&__button_list);
     a04:	00010000 	andeq	r0, r1, r0
     a08:	00000050 	andeq	r0, r0, r0, asr r0
	...
     a18:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	RISE_N_SHINE;
     a2c:	00500001 	subseq	r0, r0, r1
if (pin_sensor_int) {
     a30:	00000000 	andeq	r0, r0, r0
     a34:	01000000 	mrseq	r0, (UNDEF: 0)
	i_trigger ((aword)(&__input_pins));
     a38:	00005000 	andeq	r5, r0, r0
	...
     a48:	00010000 	andeq	r0, r1, r0
     a4c:	00000051 	andeq	r0, r0, r1, asr r0
	...
     a5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	RISE_N_SHINE;
     a68:	00500001 	subseq	r0, r0, r1
	...
}
     a78:	01000000 	mrseq	r0, (UNDEF: 0)
     a7c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	00010000 	andeq	r0, r1, r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a90:	00000052 	andeq	r0, r0, r2, asr r0
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	00510001 	subseq	r0, r1, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	00000000 	andeq	r0, r0, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     abc:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ac0:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac8:	122c0000 	eorne	r0, ip, #0
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	12300000 	eorsne	r0, r0, #0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ad0:	00010000 	andeq	r0, r1, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     ad4:	00123050 	andseq	r3, r2, r0, asr r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	00123a00 	andseq	r3, r2, r0, lsl #20
     adc:	53000100 	movwpl	r0, #256	; 0x100
	...
		if (port_confs [i] & 0x80)
     ae8:	00001230 	andeq	r1, r0, r0, lsr r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aec:	0000123a 	andeq	r1, r0, sl, lsr r2
     af0:	00500001 	subseq	r0, r0, r1
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b00:	01000000 	mrseq	r0, (UNDEF: 0)
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b04:	00005000 	andeq	r5, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b08:	00000000 	andeq	r0, r0, r0
	all_leds_blink;
     b0c:	00010000 	andeq	r0, r1, r0
     b10:	00000051 	andeq	r0, r0, r1, asr r0
	...
     b20:	52000100 	andpl	r0, r0, #0, 2
	...
     b2c:	00520001 	subseq	r0, r2, r1
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	01000000 	mrseq	r0, (UNDEF: 0)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	00005000 	andeq	r5, r0, r0
     b44:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_AON_RTC_COMB);
     b48:	12080000 	andne	r0, r8, #0
     b4c:	12100000 	andsne	r0, r0, #0
     b50:	00010000 	andeq	r0, r1, r0
	__pi_malloc_init ();
     b54:	00121250 	andseq	r1, r2, r0, asr r2
	IntEnable (INT_AON_GPIO_EDGE);
     b58:	00121600 	andseq	r1, r2, r0, lsl #12
     b5c:	50000100 	andpl	r0, r0, r0, lsl #2
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b60:	00001216 	andeq	r1, r0, r6, lsl r2
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	0000122c 	andeq	r1, r0, ip, lsr #4
     b68:	00530001 	subseq	r0, r3, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	01000000 	mrseq	r0, (UNDEF: 0)
     b7c:	00005000 	andeq	r5, r0, r0
     b80:	00000000 	andeq	r0, r0, r0
	urates [0] = UART_RATE / 100;
     b84:	00010000 	andeq	r0, r1, r0
     b88:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba4:	00500001 	subseq	r0, r0, r1
	...
			devinit [i] . init (devinit [i] . param);
     bb4:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	00005000 	andeq	r5, r0, r0
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_UART0_COMB);
     bc4:	00000057 	andeq	r0, r0, r7, asr r0
	...
		diag ("");
     bd4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		diag ("Leftover RAM: %d bytes",
     be8:	00500001 	subseq	r0, r0, r1
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	01000000 	mrseq	r0, (UNDEF: 0)
     bf4:	00005000 	andeq	r5, r0, r0
     bf8:	00000000 	andeq	r0, r0, r0
     bfc:	00010000 	andeq	r0, r1, r0
     c00:	00000058 	andeq	r0, r0, r8, asr r0
     c04:	00000000 	andeq	r0, r0, r0
     c08:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c1c:	00540001 	subseq	r0, r4, r1
     c20:	00000000 	andeq	r0, r0, r0
     c24:	01000000 	mrseq	r0, (UNDEF: 0)
     c28:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     c38:	00010000 	andeq	r0, r1, r0
     c3c:	00000058 	andeq	r0, r0, r8, asr r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	00000000 	andeq	r0, r0, r0
     c44:	58000100 	stmdapl	r0, {r8}
	...
     c50:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
     c54:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
     c58:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     c5c:	c6000013 			; <UNDEFINED> instruction: 0xc6000013
}
     c60:	01000013 	tsteq	r0, r3, lsl r0
__attribute__ ((noreturn)) void __pi_release () {
     c64:	13cc5000 	bicne	r5, ip, #0
     c68:	13d80000 	bicsne	r0, r8, #0
     c6c:	00010000 	andeq	r0, r1, r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c70:	0013ec50 	andseq	lr, r3, r0, asr ip
	check_stack_overflow;
     c74:	0013f600 	andseq	pc, r3, r0, lsl #12
     c78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	update_n_wake (MAX_WORD, NO);
     c84:	000013c2 	andeq	r1, r0, r2, asr #7
     c88:	000013f4 	strdeq	r1, [r0], -r4
	for_all_tasks (__pi_curr) {
     c8c:	f4540001 			; <UNDEFINED> instruction: 0xf4540001
     c90:	f6000013 			; <UNDEFINED> instruction: 0xf6000013
     c94:	01000013 	tsteq	r0, r3, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
     c98:	13f65200 	mvnsne	r5, #0, 4
	__SLEEP;
     c9c:	13f80000 	mvnsne	r0, #0
     ca0:	00010000 	andeq	r0, r1, r0
     ca4:	00000054 	andeq	r0, r0, r4, asr r0
     ca8:	00000000 	andeq	r0, r0, r0
	system_event_count ++;
     cac:	000f5200 	andeq	r5, pc, r0, lsl #4
     cb0:	000f8400 	andeq	r8, pc, r0, lsl #8
	switch (__pi_systat.effpdm) {
     cb4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     cc0:	00000f68 	andeq	r0, r0, r8, ror #30
			__WFI ();
     cc4:	00000f72 	andeq	r0, r0, r2, ror pc
     cc8:	00530001 	subseq	r0, r3, r1
	...
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	01000000 	mrseq	r0, (UNDEF: 0)
     cdc:	00005000 	andeq	r5, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	00000000 	andeq	r0, r0, r0
			goto Redo;
     ce4:	00010000 	andeq	r0, r1, r0
	for_all_tasks (__pi_curr) {
     ce8:	00000054 	andeq	r0, r0, r4, asr r0
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d04:	00500001 	subseq	r0, r0, r1
     d08:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	d0000000 	andle	r0, r0, r0
     d10:	e9000011 	stmdb	r0, {r0, r4}
			__WFI ();
     d14:	01000011 	tsteq	r0, r1, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d18:	00005000 	andeq	r5, r0, r0
     d1c:	00000000 	andeq	r0, r0, r0
}
     d20:	11d00000 	bicsne	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d24:	11e60000 	mvnne	r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d28:	00010000 	andeq	r0, r1, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2c:	00000051 	andeq	r0, r0, r1, asr r0
     d30:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d34:	0011ac00 	andseq	sl, r1, r0, lsl #24
     d38:	0011c000 	andseq	ip, r1, r0
     d3c:	50000100 	andpl	r0, r0, r0, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d40:	000011c0 	andeq	r1, r0, r0, asr #3
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d44:	000011c4 	andeq	r1, r0, r4, asr #3
     d48:	c8540001 	ldmdagt	r4, {r0}^
     d4c:	d0000011 	andle	r0, r0, r1, lsl r0
     d50:	01000011 	tsteq	r0, r1, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	00005000 	andeq	r5, r0, r0
     d58:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d5c:	11ac0000 			; <UNDEFINED> instruction: 0x11ac0000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d60:	11c30000 	bicne	r0, r3, r0
     d64:	00010000 	andeq	r0, r1, r0
     d68:	0011c851 	andseq	ip, r1, r1, asr r8
     d6c:	0011d000 	andseq	sp, r1, r0
     d70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	000011b4 			; <UNDEFINED> instruction: 0x000011b4
     d80:	000011c3 	andeq	r1, r0, r3, asr #3
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	c8530001 	ldmdagt	r3, {r0}^
     d88:	d0000011 	andle	r0, r0, r1, lsl r0
     d8c:	01000011 	tsteq	r0, r1, lsl r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d90:	00005300 	andeq	r5, r0, r0, lsl #6
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     da0:	00010000 	andeq	r0, r1, r0
     da4:	00000050 	andeq	r0, r0, r0, asr r0
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dc0:	00550001 	subseq	r0, r5, r1
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	00005200 	andeq	r5, r0, r0, lsl #4
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     dd8:	00000000 	andeq	r0, r0, r0
			SysCtrlAdjustRechargeAfterPowerDown ();
     ddc:	00010000 	andeq	r0, r1, r0
			reinit_uart ();
     de0:	00000052 	andeq	r0, r0, r2, asr r0
     de4:	00000000 	andeq	r0, r0, r0
     de8:	00118c00 	andseq	r8, r1, r0, lsl #24
}
     dec:	00119600 	andseq	r9, r1, r0, lsl #12
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     df0:	53000100 	movwpl	r0, #256	; 0x100
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     dfc:	00001130 	andeq	r1, r0, r0, lsr r1
     e00:	00001136 	andeq	r1, r0, r6, lsr r1
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	00500001 	subseq	r0, r0, r1
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	ac000000 	stcge	0, cr0, [r0], {-0}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e10:	b2000014 	andlt	r0, r0, #20
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	01000014 	tsteq	r0, r4, lsl r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e18:	14b25000 	ldrtne	r5, [r2], #0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e1c:	14e00000 	strbtne	r0, [r0], #0
     e20:	00010000 	andeq	r0, r1, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e24:	00000055 	andeq	r0, r0, r5, asr r0
     e28:	00000000 	andeq	r0, r0, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2c:	0014ac00 	andseq	sl, r4, r0, lsl #24
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e30:	0014b700 	andseq	fp, r4, r0, lsl #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e34:	51000100 	mrspl	r0, (UNDEF: 16)
     e38:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
			PRCMPowerDomainOff (
     e3c:	000014e0 	andeq	r1, r0, r0, ror #9
     e40:	00540001 	subseq	r0, r4, r1
	__SLEEP;
     e44:	00000000 	andeq	r0, r0, r0
     e48:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
  __ASM volatile ("cpsie i" : : : "memory");
     e4c:	cc000014 	stcgt	0, cr0, [r0], {20}
	goto Redo;
     e50:	01000014 	tsteq	r0, r4, lsl r0
     e54:	14ce5300 	strbne	r5, [lr], #768	; 0x300
     e58:	14d20000 	ldrbne	r0, [r2], #0
     e5c:	00010000 	andeq	r0, r1, r0
     e60:	0014d253 	andseq	sp, r4, r3, asr r2
     e64:	0014e000 	andseq	lr, r4, r0
     e68:	52000100 	andpl	r0, r0, #0, 2
	...
     e74:	0000105c 	andeq	r1, r0, ip, asr r0
     e78:	00001061 	andeq	r1, r0, r1, rrx
     e7c:	00500001 	subseq	r0, r0, r1
     e80:	00000000 	andeq	r0, r0, r0
     e84:	5c000000 	stcpl	0, cr0, [r0], {-0}
     e88:	61000010 	tstvs	r0, r0, lsl r0
     e8c:	01000010 	tsteq	r0, r0, lsl r0
     e90:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     ea0:	00010000 	andeq	r0, r1, r0
     ea4:	00000050 	andeq	r0, r0, r0, asr r0
     ea8:	00000000 	andeq	r0, r0, r0
     eac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	cli_tim;
     ec0:	00530001 	subseq	r0, r3, r1
     ec4:	00000000 	andeq	r0, r0, r0
	diag ("PicOS halted");
     ec8:	01000000 	mrseq	r0, (UNDEF: 0)
	mdelay (500);
     ecc:	00005300 	andeq	r5, r0, r0, lsl #6
     ed0:	00000000 	andeq	r0, r0, r0
	setpowermode (2);
     ed4:	10300000 	eorsne	r0, r0, r0
	__PCB = NULL;
     ed8:	10380000 	eorsne	r0, r8, r0
	release;
     edc:	00010000 	andeq	r0, r1, r0
     ee0:	00103850 	andseq	r3, r0, r0, asr r8
     ee4:	00104b00 	andseq	r4, r0, r0, lsl #22
     ee8:	53000100 	movwpl	r0, #256	; 0x100
int main (void) {
     eec:	0000104c 	andeq	r1, r0, ip, asr #32
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	0000105c 	andeq	r1, r0, ip, asr r0
     ef4:	00530001 	subseq	r0, r3, r1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef8:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efc:	3a000000 	bcc	f04 <main+0x18>
	system_init ();
     f00:	4b000010 	blmi	f48 <main+0x5c>
	tcv_init ();
     f04:	01000010 	tsteq	r0, r0, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f08:	104c5000 	subne	r5, ip, r0
     f0c:	105c0000 	subsne	r0, ip, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	00010000 	andeq	r0, r1, r0
     f14:	00000050 	andeq	r0, r0, r0, asr r0
	...
	delay (16, 0);
     f24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_release ();
     f30:	00530001 	subseq	r0, r3, r1
     f34:	00000000 	andeq	r0, r0, r0
     f38:	01000000 	mrseq	r0, (UNDEF: 0)
     f3c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
static void killev (__pi_pcb_t *pid) {
     f4c:	00010000 	andeq	r0, r1, r0
	wfun = (aword)(pid->code);
     f50:	00000050 	andeq	r0, r0, r0, asr r0
	for_all_tasks (i) {
     f54:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
     f58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (i->Events [j] . Event == (aword)pid
     f6c:	00530001 	subseq	r0, r3, r1
     f70:	00000000 	andeq	r0, r0, r0
     f74:	64000000 	strvs	r0, [r0], #-0
				wakeupev (i, j);
     f78:	6a000010 	bvs	fc0 <qfree+0x38>
     f7c:	01000010 	tsteq	r0, r0, lsl r0
	for_all_tasks (i) {
     f80:	00005000 	andeq	r5, r0, r0
}
     f84:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	10640000 	rsbne	r0, r4, r0
static void qfree (aword *ch) {
     f8c:	106d0000 	rsbne	r0, sp, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f90:	00010000 	andeq	r0, r1, r0
	cc = (aword*)(mpools + MA_NP);
     f94:	00000051 	andeq	r0, r0, r1, asr r0
	m_setnextp (ch, chunk);
     f98:	00000000 	andeq	r0, r0, r0
	m_setnextp (cc, ch);
     f9c:	00107200 	andseq	r7, r0, r0, lsl #4
}
     fa0:	0010b000 	andseq	fp, r0, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     fa8:	000010b4 	strheq	r1, [r0], -r4
     fac:	00001102 	andeq	r1, r0, r2, lsl #2
			m_setnextp (cc, m_nextp (chunk));
     fb0:	04540001 	ldrbeq	r0, [r4], #-1
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb4:	0e000011 	mcreq	0, 0, r0, cr0, cr1, {0}
     fb8:	01000011 	tsteq	r0, r1, lsl r0
     fbc:	00005400 	andeq	r5, r0, r0, lsl #8
     fc0:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	10aa0000 	adcne	r0, sl, r0
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	10ac0000 	adcne	r0, ip, r0
     fcc:	00010000 	andeq	r0, r1, r0
     fd0:	0010b450 	andseq	fp, r0, r0, asr r4
			m_setnextp (cc, m_nextp (chunk));
     fd4:	00110400 	andseq	r0, r1, r0, lsl #8
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fe4:	00001144 	andeq	r1, r0, r4, asr #2
     fe8:	00001158 	andeq	r1, r0, r8, asr r1
     fec:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
			if (m_size (chunk) >= m_size (ch))
     ff0:	78000011 	stmdavc	r0, {r0, r4}
     ff4:	01000011 	tsteq	r0, r1, lsl r0
     ff8:	00005000 	andeq	r5, r0, r0
		chunk = m_nextp (chunk))
     ffc:	00000000 	andeq	r0, r0, r0
    1000:	11440000 	mrsne	r0, (UNDEF: 68)
    1004:	115a0000 	cmpne	sl, r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	00010000 	andeq	r0, r1, r0
	diag_wait (a);
    100c:	00115e51 	andseq	r5, r1, r1, asr lr
	diag_wchar (c, a);
    1010:	00116400 	andseq	r6, r1, r0, lsl #8
    1014:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	syserror (ESTATE, "state");
    1020:	00001156 	andeq	r1, r0, r6, asr r1
    1024:	00001158 	andeq	r1, r0, r8, asr r1
    1028:	00500001 	subseq	r0, r0, r1
    102c:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	56000000 	strpl	r0, [r0], -r0
void utimer_add (address ut) {
    1034:	5a000011 	bpl	1080 <update_n_wake+0x1c>
    1038:	01000011 	tsteq	r0, r1, lsl r0
		if (__pi_utims [i] == NULL)
    103c:	00005100 	andeq	r5, r0, r0, lsl #2
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	00000000 	andeq	r0, r0, r0
    1044:	136c0000 	cmnne	ip, #0
		syserror (ERESOURCE, "ut a");
    1048:	137a0000 	cmnne	sl, #0
	__pi_utims [i] = ut;
    104c:	00010000 	andeq	r0, r1, r0
}
    1050:	00138050 	andseq	r8, r3, r0, asr r0
    1054:	00139300 	andseq	r9, r3, r0, lsl #6
    1058:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void update_n_wake (word min, Boolean force) {
    1064:	00001378 	andeq	r1, r0, r8, ror r3
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	0000137a 	andeq	r1, r0, sl, ror r3
    106c:	00500001 	subseq	r0, r0, r1
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    107c:	01000000 	mrseq	r0, (UNDEF: 0)
    1080:	00005000 	andeq	r5, r0, r0
    1084:	00000000 	andeq	r0, r0, r0
    1088:	00010000 	andeq	r0, r1, r0
    108c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    109c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	__pi_mintk = znew + min;
    10b0:	00540001 	subseq	r0, r4, r1
			if (!twaiting (i))
    10b4:	00000000 	andeq	r0, r0, r0
    10b8:	01000000 	mrseq	r0, (UNDEF: 0)
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10bc:	00005000 	andeq	r5, r0, r0
	...
    10cc:	00010000 	andeq	r0, r1, r0
    10d0:	00000050 	andeq	r0, r0, r0, asr r0
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    10e4:	00750002 	rsbseq	r0, r5, r2
	...
				wakeuptm (i);
    10f0:	00001bd4 	ldrdeq	r1, [r0], -r4
		for_all_tasks (i) {
    10f4:	00001bf4 	strdeq	r1, [r0], -r4
				d = i->Timer - znew;
    10f8:	fa500001 	blx	1401104 <__ccfg+0x13e115c>
    10fc:	fb00001b 	blx	1172 <__pi_wait+0x2e>
    1100:	0100001b 	tsteq	r0, fp, lsl r0
		if ((word)(__pi_mintk - znew) < min) 
    1104:	00005000 	andeq	r5, r0, r0
    1108:	00000000 	andeq	r0, r0, r0
    110c:	1bde0000 	blne	ff781114 <_estack+0xdf77c114>
	__pi_old = znew;
    1110:	1c040000 	stcne	0, cr0, [r4], {-0}
}
    1114:	00010000 	andeq	r0, r1, r0
	TCI_RUN_DELAY_TIMER;
    1118:	001c0454 	andseq	r0, ip, r4, asr r4
}
    111c:	001c0700 	andseq	r0, ip, r0, lsl #14
    1120:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    112c:	00001ba0 	andeq	r1, r0, r0, lsr #23
void proceed (word state) {
    1130:	00001bb0 			; <UNDEFINED> instruction: 0x00001bb0
	prcdstate (__pi_curr, state);
    1134:	b6500001 	ldrblt	r0, [r0], -r1
    1138:	be00001b 	mcrlt	0, 0, r0, cr0, cr11, {0}
	release;
    113c:	0100001b 	tsteq	r0, fp, lsl r0
    1140:	00005000 	andeq	r5, r0, r0
void __pi_wait (aword event, word state) {
    1144:	00000000 	andeq	r0, r0, r0
	sint j = nevents (__pi_curr);
    1148:	1bbc0000 	blne	fef01150 <_estack+0xdeefc150>
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	1bc80000 	blne	ff201154 <_estack+0xdf1fc154>
    1150:	00010000 	andeq	r0, r1, r0
    1154:	00000053 	andeq	r0, r0, r3, asr r0
		syserror (ENEVENTS, "sw");
    1158:	00000000 	andeq	r0, r0, r0
    115c:	001bbe00 	andseq	fp, fp, r0, lsl #28
	setestate (__pi_curr->Events [j], state, event);
    1160:	001bc400 	andseq	ip, fp, r0, lsl #8
	incwait (__pi_curr);
    1164:	50000100 	andpl	r0, r0, r0, lsl #2
	setestate (__pi_curr->Events [j], state, event);
    1168:	00001bc4 	andeq	r1, r0, r4, asr #23
}
    116c:	00001bc8 	andeq	r1, r0, r8, asr #23
    1170:	00730002 	rsbseq	r0, r3, r2
	...
	for_all_tasks (i) {
    117c:	00001b60 	andeq	r1, r0, r0, ror #22
		for (j = 0; j < nevents (i); j++) {
    1180:	00001b70 	andeq	r1, r0, r0, ror fp
    1184:	76500001 	ldrbvc	r0, [r0], -r1
    1188:	7e00001b 	mcrvc	0, 0, r0, cr0, cr11, {0}
    118c:	0100001b 	tsteq	r0, fp, lsl r0
			if (i->Events [j] . Event == event) {
    1190:	00005000 	andeq	r5, r0, r0
    1194:	00000000 	andeq	r0, r0, r0
    1198:	1b600000 	blne	18011a0 <__ccfg+0x17e11f8>
				wakeupev (i, j);
    119c:	1b720000 	blne	1c811a4 <__ccfg+0x1c611fc>
    11a0:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
    11a4:	001b7651 	andseq	r7, fp, r1, asr r6
}
    11a8:	001ba000 	andseq	sl, fp, r0
aword __pi_join (aword pid, word st) {
    11ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	return 0;
    11b8:	00001b7c 	andeq	r1, r0, ip, ror fp
		if ((aword)i == pid) {
    11bc:	00001b84 	andeq	r1, r0, r4, lsl #23
			__pi_wait (pid, st);
    11c0:	8e530001 	cdphi	0, 5, cr0, cr3, cr1, {0}
}
    11c4:	a000001b 	andge	r0, r0, fp, lsl r0
	for_all_tasks (i) {
    11c8:	0100001b 	tsteq	r0, fp, lsl r0
    11cc:	00005300 	andeq	r5, r0, r0, lsl #6
void delay (word d, word state) {
    11d0:	00000000 	andeq	r0, r0, r0
	settstate (__pi_curr, state);
    11d4:	1b7e0000 	blne	1f811dc <__ccfg+0x1f61234>
    11d8:	1b8c0000 	blne	fe3011e0 <_estack+0xde2fc1e0>
    11dc:	00010000 	andeq	r0, r1, r0
    11e0:	001b8e50 	andseq	r8, fp, r0, asr lr
	update_n_wake (d, YES);
    11e4:	001b9000 	andseq	r9, fp, r0
    11e8:	50000100 	andpl	r0, r0, r0, lsl #2
	__pi_curr->Timer = __pi_old + d;
    11ec:	00001b90 	muleq	r0, r0, fp
    11f0:	00001ba0 	andeq	r1, r0, r0, lsr #23
	inctimer (__pi_curr);
    11f4:	00730002 	rsbseq	r0, r3, r2
	...
}
    1200:	00001ac4 	andeq	r1, r0, r4, asr #21
    1204:	00001ade 	ldrdeq	r1, [r0], -lr
	if (fun == NULL)
    1208:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
		return (int) __pi_curr;
    120c:	e400001a 	str	r0, [r0], #-26	; 0xffffffe6
    1210:	0100001a 	tsteq	r0, sl, lsl r0
	for_all_tasks (i)
    1214:	1ae45500 	bne	ff91661c <_estack+0xdf91161c>
}
    1218:	1aee0000 	bne	ffb81220 <_estack+0xdfb7c220>
		if (i->code == fun)
    121c:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i)
    1220:	001aee50 	andseq	lr, sl, r0, asr lr
    1224:	001b6000 	andseq	r6, fp, r0
    1228:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    1234:	00001ac4 	andeq	r1, r0, r4, asr #21
	for (i = 0; *(s+i) != '\0'; i++);
    1238:	00001ade 	ldrdeq	r1, [r0], -lr
	while (n--)
    123c:	de510001 	cdple	0, 5, cr0, cr1, cr1, {0}
    1240:	e400001a 	str	r0, [r0], #-26	; 0xffffffe6
		*dest++ = *src++;
    1244:	0100001a 	tsteq	r0, sl, lsl r0
    1248:	1ae45700 	bne	ff916e50 <_estack+0xdf911e50>
    124c:	1aee0000 	bne	ffb81254 <_estack+0xdfb7c254>
	while (n--)
    1250:	00010000 	andeq	r0, r1, r0
}
    1254:	001aee51 	andseq	lr, sl, r1, asr lr
		*dest++ = c;
    1258:	001b6000 	andseq	r6, fp, r0
void adddevfunc (devreqfun_t rf, int loc) {
    125c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
	if (ioreq [loc] != NULL)
    1268:	00001ac4 	andeq	r1, r0, r4, asr #21
    126c:	00001ade 	ldrdeq	r1, [r0], -lr
		syserror (ERESOURCE, "addv");
    1270:	de520001 	cdple	0, 5, cr0, cr2, cr1, {0}
	ioreq [loc] = rf;
    1274:	e400001a 	str	r0, [r0], #-26	; 0xffffffe6
}
    1278:	0100001a 	tsteq	r0, sl, lsl r0
    127c:	1ae45400 	bne	ff916284 <_estack+0xdf911284>
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	1aee0000 	bne	ffb81288 <_estack+0xdfb7c288>
    1284:	00010000 	andeq	r0, r1, r0
    1288:	001aee52 	andseq	lr, sl, r2, asr lr
    128c:	001b6000 	andseq	r6, fp, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1290:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		syserror (ENODEVICE, "io");
    129c:	00001b1e 	andeq	r1, r0, lr, lsl fp
    12a0:	00001b36 	andeq	r1, r0, r6, lsr fp
	if (len == 0)
    12a4:	36500001 	ldrbcc	r0, [r0], -r1
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	3b00001b 	blcc	131c <__pi_malloc_init>
    12ac:	0100001b 	tsteq	r0, fp, lsl r0
	if (ret >= 0)
    12b0:	00005100 	andeq	r5, r0, r0, lsl #2
	if (ret == -1) {
    12b4:	00000000 	andeq	r0, r0, r0
    12b8:	1b3c0000 	blne	f012c0 <__ccfg+0xee1318>
		if (retry == WNONE)
    12bc:	1b4b0000 	blne	12c12c4 <__ccfg+0x12a131c>
		iowait (dev, operation, retry);
    12c0:	00010000 	andeq	r0, r1, r0
    12c4:	00000050 	andeq	r0, r0, r0, asr r0
    12c8:	00000000 	andeq	r0, r0, r0
			release;
    12cc:	001a7400 	andseq	r7, sl, r0, lsl #8
	if (ret == -2) {
    12d0:	001a8200 	andseq	r8, sl, r0, lsl #4
		if (retry != WNONE) {
    12d4:	50000100 	andpl	r0, r0, r0, lsl #2
    12d8:	00001a82 	andeq	r1, r0, r2, lsl #21
			iowait (dev, operation, retry);
    12dc:	00001ab0 			; <UNDEFINED> instruction: 0x00001ab0
    12e0:	00540001 	subseq	r0, r4, r1
			(ioreq [dev]) (NONE, buf, len);
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	74000000 	strvc	r0, [r0], #-0
    12ec:	8800001a 	stmdahi	r0, {r1, r3, r4}
		(ioreq [dev]) (NONE, buf, len);
    12f0:	0100001a 	tsteq	r0, sl, lsl r0
    12f4:	1a8c5100 	bne	fe3156fc <_estack+0xde3106fc>
    12f8:	1a9b0000 	bne	fe6c1300 <_estack+0xde6bc300>
}
    12fc:	00010000 	andeq	r0, r1, r0
	if (retry != WNONE) {
    1300:	00000051 	andeq	r0, r0, r1, asr r0
		delay (-ret - 2, retry);
    1304:	00000000 	andeq	r0, r0, r0
    1308:	001a7400 	andseq	r7, sl, r0, lsl #8
    130c:	001a8800 	andseq	r8, sl, r0, lsl #16
    1310:	52000100 	andpl	r0, r0, #0, 2
		release;
    1314:	00001a8c 	andeq	r1, r0, ip, lsl #21
    1318:	00001a9b 	muleq	r0, fp, sl
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	00520001 	subseq	r0, r2, r1
    1320:	00000000 	andeq	r0, r0, r0
    1324:	9c000000 	stcls	0, cr0, [r0], {-0}
    1328:	a600001a 			; <UNDEFINED> instruction: 0xa600001a
    132c:	0100001a 	tsteq	r0, sl, lsl r0
		syserror (ERESOURCE, "mal1");
    1330:	1aa65000 	bne	fe995338 <_estack+0xde990338>
    1334:	1aaa0000 	bne	fea8133c <_estack+0xdea7c33c>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1338:	00070000 	andeq	r0, r7, r0
    133c:	24320074 	ldrtcs	r0, [r2], #-116	; 0xffffff8c
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1340:	aa220072 	bge	881510 <__ccfg+0x861568>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1344:	c400001a 	strgt	r0, [r0], #-26	; 0xffffffe6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1348:	0100001a 	tsteq	r0, sl, lsl r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    134c:	00005000 	andeq	r5, r0, r0
	...
}
    135c:	00010000 	andeq	r0, r1, r0
    1360:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		m_size (ch) ^= MALLOC_UMASK;
    1384:	00500001 	subseq	r0, r0, r1
    1388:	00000000 	andeq	r0, r0, r0
	mcfree [MA_NP] += m_size (ch);
    138c:	01000000 	mrseq	r0, (UNDEF: 0)
	QFREE;
    1390:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		mevent [MA_NP] . nwait --;
    13a0:	00010000 	andeq	r0, r1, r0
}
    13a4:	00000051 	andeq	r0, r0, r1, asr r0
    13a8:	00000000 	andeq	r0, r0, r0
    13ac:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	for_all_tasks (i) {
    13c0:	00500001 	subseq	r0, r0, r1
	syserror (EREQPAR, "kpi");
    13c4:	00000000 	andeq	r0, r0, r0
    13c8:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((aword)i == pid) {
    13cc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
			ufree (i);
    13dc:	00010000 	andeq	r0, r1, r0
			if (i == __pi_curr)
    13e0:	00000050 	andeq	r0, r0, r0, asr r0
    13e4:	00000000 	andeq	r0, r0, r0
				release;
    13e8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    13fc:	00510001 	subseq	r0, r1, r1
    1400:	00000000 	andeq	r0, r0, r0
	if (size < 8)
    1404:	01000000 	mrseq	r0, (UNDEF: 0)
		_size = 2;
    1408:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		_size = (((aword)size) + 3) >> 2;
    1418:	00010000 	andeq	r0, r1, r0
		if (mevent [MA_NP] . nfail != 255)
    141c:	00000050 	andeq	r0, r0, r0, asr r0
    1420:	00000000 	andeq	r0, r0, r0
			mevent [MA_NP] . nfail ++;
    1424:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			syserror (EMALLOC, "malc");
    1438:	00510001 	subseq	r0, r1, r1
    143c:	00000000 	andeq	r0, r0, r0
		if (m_size (chunk) >= _size)
    1440:	01000000 	mrseq	r0, (UNDEF: 0)
    1444:	00005100 	andeq	r5, r0, r0, lsl #2
		chunk = m_nextp (chunk)) {
    1448:	00000000 	andeq	r0, r0, r0
		m_setnextp (cc, m_nextp (chunk));
    144c:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1450:	19c40000 	stmibne	r4, {}^	; <UNPREDICTABLE>
    1454:	00010000 	andeq	r0, r1, r0
			m_size (chunk) = _size;
    1458:	0019ca50 	andseq	ip, r9, r0, asr sl
			cc = chunk + _size + m_hdrlen;
    145c:	0019d400 	andseq	sp, r9, r0, lsl #8
    1460:	50000100 	andpl	r0, r0, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1464:	000019d6 	ldrdeq	r1, [r0], -r6
			QFREE;
    1468:	000019e4 	andeq	r1, r0, r4, ror #19
		mevent [MA_NP] . nfail = 0;
    146c:	ea500001 	b	1401478 <__ccfg+0x13e14d0>
		mcfree [MA_NP] -= m_size (chunk);
    1470:	ec000019 	stc	0, cr0, [r0], {25}
    1474:	01000019 	tsteq	r0, r9, lsl r0
    1478:	19f65000 	ldmibne	r6!, {ip, lr}^
    147c:	19f80000 	ldmibne	r8!, {}^	; <UNPREDICTABLE>
		m_size (chunk) |= MALLOC_UMASK;
    1480:	00010000 	andeq	r0, r1, r0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1484:	00000050 	andeq	r0, r0, r0, asr r0
		m_size (chunk) |= MALLOC_UMASK;
    1488:	00000000 	andeq	r0, r0, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    148c:	0019ac00 	andseq	sl, r9, r0, lsl #24
}
    1490:	0019e600 	andseq	lr, r9, r0, lsl #12
    1494:	51000100 	mrspl	r0, (UNDEF: 16)
    1498:	000019ea 	andeq	r1, r0, sl, ror #19
    149c:	000019f5 	strdeq	r1, [r0], -r5
    14a0:	f6510001 			; <UNDEFINED> instruction: 0xf6510001
    14a4:	0c000019 	stceq	0, cr0, [r0], {25}
    14a8:	0100001a 	tsteq	r0, sl, lsl r0
aword __pi_fork (fsmcode func, aword data) {
    14ac:	00005100 	andeq	r5, r0, r0, lsl #2
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	00000000 	andeq	r0, r0, r0
    14b4:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
    14b8:	19e90000 	stmibne	r9!, {}^	; <UNPREDICTABLE>
		if ((j = __PCB) == NULL)
    14bc:	00010000 	andeq	r0, r1, r0
	i->Next = NULL;
    14c0:	0019ea52 	andseq	lr, r9, r2, asr sl
	i->data = data;
    14c4:	0019f500 	andseq	pc, r9, r0, lsl #10
		if ((j = __PCB) == NULL)
    14c8:	52000100 	andpl	r0, r0, #0, 2
}
    14cc:	000019f6 	strdeq	r1, [r0], -r6
			for (; j->Next != NULL; j = j->Next);
    14d0:	00001a0c 	andeq	r1, r0, ip, lsl #20
    14d4:	00520001 	subseq	r0, r2, r1
	return (aword) i;
    14d8:	00000000 	andeq	r0, r0, r0
    14dc:	c4000000 	strgt	r0, [r0], #-0
	if (mevent [MA_NP] . nwait != 255)
    14e0:	c8000019 	stmdagt	r0, {r0, r3, r4}
    14e4:	01000019 	tsteq	r0, r9, lsl r0
    14e8:	00005000 	andeq	r5, r0, r0
	...
void diag (const char *mess, ...) {
    14f8:	00010000 	andeq	r0, r1, r0
    14fc:	00000050 	andeq	r0, r0, r0, asr r0
    1500:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    1504:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	while (*mess != '\0') {
    1518:	00500001 	subseq	r0, r0, r1
	dgout ('\r');
    151c:	00000000 	andeq	r0, r0, r0
	dgout ('\n');
    1520:	01000000 	mrseq	r0, (UNDEF: 0)
    1524:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	diag_enable_int (a, is);
    1534:	00010000 	andeq	r0, r1, r0
}
    1538:	00000051 	andeq	r0, r0, r1, asr r0
	...
		if (*mess == '%') {
    1548:	52000100 	andpl	r0, r0, #0, 2
	...
				mess++;
    1554:	00550001 	subseq	r0, r5, r1
	...
			switch (*mess) {
    1564:	01000000 	mrseq	r0, (UNDEF: 0)
    1568:	00005000 	andeq	r5, r0, r0
    156c:	00000000 	andeq	r0, r0, r0
				dgout ('%');
    1570:	00010000 	andeq	r0, r1, r0
    1574:	00000054 	andeq	r0, r0, r4, asr r0
	...
					v = __pi_hex_enc_table [
    1584:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					(val >> (bc - i)) & 0xf];
    1590:	00500001 	subseq	r0, r0, r1
	...
			mess++;
    15a0:	01000000 	mrseq	r0, (UNDEF: 0)
					d /= 10;
    15a4:	00005200 	andeq	r5, r0, r0, lsl #4
				if ((val >> (bc - 1)) & 1) {
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	00010000 	andeq	r0, r1, r0
					dgout ('-');
    15b0:	00000055 	andeq	r0, r0, r5, asr r0
    15b4:	00000000 	andeq	r0, r0, r0
						val |= 0xffff0000;
    15b8:	0018c400 	andseq	ip, r8, r0, lsl #8
    15bc:	0018da00 	andseq	sp, r8, r0, lsl #20
    15c0:	50000100 	andpl	r0, r0, r0, lsl #2
				d = (bc == 16) ? 10000 : 1000000000;
    15c4:	000018e0 	andeq	r1, r0, r0, ror #17
    15c8:	00001900 	andeq	r1, r0, r0, lsl #18
    15cc:	00500001 	subseq	r0, r0, r1
					v = (word) (val / d);
    15d0:	00000000 	andeq	r0, r0, r0
					if (v || d == 1) break;
    15d4:	c4000000 	strgt	r0, [r0], #-0
    15d8:	da000018 	ble	1640 <lrnd+0xc>
					d /= 10;
    15dc:	01000018 	tsteq	r0, r8, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    15e0:	18e05100 	stmiane	r0!, {r8, ip, lr}^
					dgout (v + '0');
    15e4:	18f80000 	ldmne	r8!, {}^	; <UNPREDICTABLE>
    15e8:	00010000 	andeq	r0, r1, r0
    15ec:	0018fa51 	andseq	pc, r8, r1, asr sl	; <UNPREDICTABLE>
					d /= 10;
    15f0:	00190600 	andseq	r0, r9, r0, lsl #12
					val = val - (v * d);
    15f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					v = (word) (val / d);
    1600:	000018c4 	andeq	r1, r0, r4, asr #17
				if (bc == 16)
    1604:	000018da 	ldrdeq	r1, [r0], -sl
				d = (bc == 16) ? 10000 : 1000000000;
    1608:	da520001 	ble	1481614 <__ccfg+0x146166c>
					val &= 0xffff;
    160c:	e0000018 	and	r0, r0, r8, lsl r0
					dgout (*s);
    1610:	01000018 	tsteq	r0, r8, lsl r0
					s++;
    1614:	18e05400 	stmiane	r0!, {sl, ip, lr}^
				while (*s != '\0') {
    1618:	18ec0000 	stmiane	ip!, {}^	; <UNPREDICTABLE>
    161c:	00010000 	andeq	r0, r1, r0
			dgout (*mess++);
    1620:	0018ec52 	andseq	lr, r8, r2, asr ip
    1624:	00191200 	andseq	r1, r9, r0, lsl #4
    1628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    162c:	00001918 	andeq	r1, r0, r8, lsl r9
    1630:	0000191e 	andeq	r1, r0, lr, lsl r9
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1634:	22540001 	subscs	r0, r4, #1
    1638:	36000019 			; <UNDEFINED> instruction: 0x36000019
    163c:	01000019 	tsteq	r0, r9, lsl r0
    1640:	00005400 	andeq	r5, r0, r0, lsl #8
	^ entropy
    1644:	00000000 	andeq	r0, r0, r0
}
    1648:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
    164c:	18d20000 	ldmne	r2, {}^	; <UNPREDICTABLE>
    1650:	00010000 	andeq	r0, r1, r0
    1654:	00000053 	andeq	r0, r0, r3, asr r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1658:	00000000 	andeq	r0, r0, r0
	word cs = size + hblenb;
    165c:	00194000 	andseq	r4, r9, r0
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1660:	00194c00 	andseq	r4, r9, r0, lsl #24
    1664:	50000100 	andpl	r0, r0, r0, lsl #2
	p -> length = size;
    1668:	00001952 	andeq	r1, r0, r2, asr r9
}
    166c:	0000196a 	andeq	r1, r0, sl, ror #18
	if (p->attributes.b.queued) {
    1670:	00500001 	subseq	r0, r0, r1
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1674:	00000000 	andeq	r0, r0, r0
    1678:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    167c:	12000019 	andne	r0, r0, #25
		p->attributes.b.queued = 0;
    1680:	01000019 	tsteq	r0, r9, lsl r0
    1684:	19185000 	ldmdbne	r8, {ip, lr}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1688:	191d0000 	ldmdbne	sp, {}	; <UNPREDICTABLE>
	deq (p);	// Remove from queue
    168c:	00010000 	andeq	r0, r1, r0
}
    1690:	00192250 	andseq	r2, r9, r0, asr r2
	tfree ((address)p);
    1694:	00193000 	andseq	r3, r9, r0
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (q_empty (q))
    16ac:	00500001 	subseq	r0, r0, r1
    16b0:	00000000 	andeq	r0, r0, r0
		trigger (q);
    16b4:	01000000 	mrseq	r0, (UNDEF: 0)
	if (p->attributes.b.urgent) {
    16b8:	00005000 	andeq	r5, r0, r0
		p->u.bqueue.next = q->next;
    16bc:	00000000 	andeq	r0, r0, r0
		p->u.bqueue.prev = q;
    16c0:	00010000 	andeq	r0, r1, r0
		q->next->prev = (qitem_t*) p;
    16c4:	00000050 	andeq	r0, r0, r0, asr r0
	p->attributes.b.queued = 1;
    16c8:	00000000 	andeq	r0, r0, r0
    16cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		q->prev = (qitem_t*) p;
    16e0:	00510001 	subseq	r0, r1, r1
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e4:	00000000 	andeq	r0, r0, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    16e8:	01000000 	mrseq	r0, (UNDEF: 0)
	switch (dv) {
    16ec:	00005100 	andeq	r5, r0, r0, lsl #2
    16f0:	00000000 	andeq	r0, r0, r0
    16f4:	00010000 	andeq	r0, r1, r0
    16f8:	00000051 	andeq	r0, r0, r1, asr r0
			p->attributes.b.urgent = 1;
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			verify_ses (p, "dispose ses");
    1714:	00540001 	subseq	r0, r4, r1
			verify_phy (p, "dispose phy");
    1718:	00000000 	andeq	r0, r0, r0
    171c:	0a000000 	beq	1724 <dispose+0x40>
}
    1720:	32007000 	andcc	r7, r0, #0
			enq (oqueues [p->attributes.b.phys], p);
    1724:	05600324 	strbeq	r0, [r0, #-804]!	; 0xfffffcdc
			p->attributes.b.urgent = 1;
    1728:	00222000 	eoreq	r2, r2, r0
    172c:	00000000 	andeq	r0, r0, r0
			verify_phy (p, "dispose phy");
    1730:	01000000 	mrseq	r0, (UNDEF: 0)
    1734:	00005400 	andeq	r5, r0, r0, lsl #8
    1738:	00000000 	andeq	r0, r0, r0
    173c:	000a0000 	andeq	r0, sl, r0
    1740:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1744:	00056003 	andeq	r6, r5, r3
			enq (oqueues [p->attributes.b.phys], p);
    1748:	00002220 	andeq	r2, r0, r0, lsr #4
    174c:	00000000 	andeq	r0, r0, r0
}
    1750:	00010000 	andeq	r0, r1, r0
			rlp (p);
    1754:	00000054 	andeq	r0, r0, r4, asr r0
}
    1758:	00000000 	andeq	r0, r0, r0
    175c:	70000a00 	andvc	r0, r0, r0, lsl #20
    1760:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1764:	20000560 	andcs	r0, r0, r0, ror #10
    1768:	00000022 	andeq	r0, r0, r2, lsr #32
	...
	b = header (p);
    1778:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		verify_ses (b, "tcv02");
    1784:	00550001 	subseq	r0, r5, r1
	...
		verify_plg (b, tcv_out, "tcv03");
    1794:	01000000 	mrseq	r0, (UNDEF: 0)
    1798:	00005400 	andeq	r5, r0, r0, lsl #8
    179c:	00000000 	andeq	r0, r0, r0
    17a0:	00010000 	andeq	r0, r1, r0
    17a4:	00000054 	andeq	r0, r0, r4, asr r0
	...
    17b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		dispose (b, plugins [b->attributes.b.plugin] ->
    17c0:	00500001 	subseq	r0, r0, r1
		rlp (b);
    17c4:	00000000 	andeq	r0, r0, r0
}
    17c8:	01000000 	mrseq	r0, (UNDEF: 0)
		rlp (b);
    17cc:	00005000 	andeq	r5, r0, r0
	...
    17dc:	00010000 	andeq	r0, r1, r0
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17e0:	00000055 	andeq	r0, r0, r5, asr r0
	...
	va_start (ap, plid);
    17f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    1804:	00500001 	subseq	r0, r0, r1
    1808:	00000000 	andeq	r0, r0, r0
			syserror (ENODEVICE, "tcv04");
    180c:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (EMALLOC, "tcv05");
    1810:	00005000 	andeq	r5, r0, r0
	attp.b.outgoing = 1;
    1814:	00000000 	andeq	r0, r0, r0
    1818:	00010000 	andeq	r0, r1, r0
    181c:	00000050 	andeq	r0, r0, r0, asr r0
    1820:	00000000 	andeq	r0, r0, r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1824:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1838:	00510001 	subseq	r0, r1, r1
    183c:	00000000 	andeq	r0, r0, r0
    1840:	01000000 	mrseq	r0, (UNDEF: 0)
	s->attpattern.b.session = fd;
    1844:	00005100 	andeq	r5, r0, r0, lsl #2
    1848:	00000000 	andeq	r0, r0, r0
	descriptors [fd] = s;
    184c:	00010000 	andeq	r0, r1, r0
	q_init (&(s->rqueue));
    1850:	00000051 	andeq	r0, r0, r1, asr r0
	...
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1860:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    186c:	0070000a 	rsbseq	r0, r0, sl
	descriptors [fd] = s;
    1870:	60032432 	andvs	r2, r3, r2, lsr r4
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1874:	22200005 	eorcs	r0, r0, #5
	...
		syserror (EMALLOC, "tcv05");
    1880:	00530001 	subseq	r0, r3, r1
    1884:	00000000 	andeq	r0, r0, r0
    1888:	0a000000 	beq	1890 <tcv_open+0xb0>
    188c:	32007000 	andcc	r7, r0, #0
    1890:	05600324 	strbeq	r0, [r0, #-804]!	; 0xfffffcdc
    1894:	00222000 	eoreq	r2, r2, r0
    1898:	00000000 	andeq	r0, r0, r0
    189c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18a0:	00005300 	andeq	r5, r0, r0, lsl #6
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a4:	00000000 	andeq	r0, r0, r0
    18a8:	000a0000 	andeq	r0, sl, r0
    18ac:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	plugins [ord] = pl;
    18b0:	00056003 	andeq	r6, r5, r3
	return 0;
    18b4:	00002220 	andeq	r2, r0, r0, lsr #4
	...
	verify_fds (fd, "tcv16");
    18c4:	00010000 	andeq	r0, r1, r0
								Boolean urg) {
    18c8:	00000050 	andeq	r0, r0, r0, asr r0
    18cc:	00000000 	andeq	r0, r0, r0
	verify_fds (fd, "tcv16");
    18d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	verify_pld (s, tcv_frm, "tcv17");
    18e4:	00530001 	subseq	r0, r3, r1
    18e8:	00000000 	andeq	r0, r0, r0
    18ec:	01000000 	mrseq	r0, (UNDEF: 0)
    18f0:	00005300 	andeq	r5, r0, r0, lsl #6
    18f4:	00000000 	andeq	r0, r0, r0
    18f8:	00010000 	andeq	r0, r1, r0
	ptrs.head = (word) fd;
    18fc:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if (state != WNONE) {
    190c:	52000100 	andpl	r0, r0, #0, 2
	...
			when (eid, state);
    1918:	00520001 	subseq	r0, r2, r1
    191c:	00000000 	andeq	r0, r0, r0
			release;
    1920:	01000000 	mrseq	r0, (UNDEF: 0)
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1924:	00005200 	andeq	r5, r0, r0, lsl #4
    1928:	00000000 	andeq	r0, r0, r0
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    192c:	00010000 	andeq	r0, r1, r0
    1930:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1940:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	b->attributes = s->attpattern;
    1954:	00510001 	subseq	r0, r1, r1
		b->attributes.b.urgent = 1;
    1958:	00000000 	andeq	r0, r0, r0
    195c:	01000000 	mrseq	r0, (UNDEF: 0)
	b->u.pointers.head = ptrs.head;
    1960:	00005100 	andeq	r5, r0, r0, lsl #2
	b->u.pointers.tail = length;
    1964:	00000000 	andeq	r0, r0, r0
	return (address) (b + 1);
    1968:	00010000 	andeq	r0, r1, r0
    196c:	00000051 	andeq	r0, r0, r1, asr r0
    1970:	00000000 	andeq	r0, r0, r0
    1974:	51000100 	mrspl	r0, (UNDEF: 16)
	...
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	00510001 	subseq	r0, r1, r1
	...
	verify_fph (phy, "tcv23");
    1990:	01000000 	mrseq	r0, (UNDEF: 0)
    1994:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	return (physical [phy]) (opt, arg);
    19a4:	00010000 	andeq	r0, r1, r0
    19a8:	00000054 	andeq	r0, r0, r4, asr r0
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19ac:	00000000 	andeq	r0, r0, r0
	if (opt < 0) {
    19b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (fd >= TCV_MAX_PLUGS)
    19bc:	00540001 	subseq	r0, r4, r1
	...
		if (fd >= TCV_MAX_PHYS)
    19cc:	01000000 	mrseq	r0, (UNDEF: 0)
		return physinfo [fd];
    19d0:	00005000 	andeq	r5, r0, r0
    19d4:	00000000 	andeq	r0, r0, r0
	verify_fds (fd, "tcv22");
    19d8:	00010000 	andeq	r0, r1, r0
    19dc:	00000050 	andeq	r0, r0, r0, asr r0
    19e0:	00000000 	andeq	r0, r0, r0
    19e4:	71000700 	tstvc	r0, r0, lsl #14
    19e8:	72243200 	eorvc	r3, r4, #0, 4
}
    19ec:	00002200 	andeq	r2, r0, r0, lsl #4
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19f0:	00000000 	andeq	r0, r0, r0
    19f4:	00010000 	andeq	r0, r1, r0
			return 0;
    19f8:	00000050 	andeq	r0, r0, r0, asr r0
    19fc:	00000000 	andeq	r0, r0, r0
    1a00:	0018a000 	andseq	sl, r8, r0
    1a04:	0018b600 	andseq	fp, r8, r0, lsl #12
    1a08:	50000100 	andpl	r0, r0, r0, lsl #2
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a0c:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
    1a10:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
	if (dsp != TCV_DSP_PASS) {
    1a14:	00500001 	subseq	r0, r0, r1
	...
		verify_fds (ses, "tcv27");
    1a24:	01000000 	mrseq	r0, (UNDEF: 0)
    1a28:	00005000 	andeq	r5, r0, r0
    1a2c:	00000000 	andeq	r0, r0, r0
    1a30:	00010000 	andeq	r0, r1, r0
		if ((p = apb (size)) != NULL) {
    1a34:	00000050 	andeq	r0, r0, r0, asr r0
	...
			dispose (p, dsp);
    1a44:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1a50:	00550001 	subseq	r0, r5, r1
			return (address)(p + 1);
    1a54:	00000000 	andeq	r0, r0, r0
    1a58:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((p = apb (size)) != NULL)
    1a5c:	00005100 	andeq	r5, r0, r0, lsl #2
    1a60:	00000000 	andeq	r0, r0, r0
		return (address)(p + 1);
    1a64:	00010000 	andeq	r0, r1, r0
    1a68:	00000055 	andeq	r0, r0, r5, asr r0
    1a6c:	00000000 	andeq	r0, r0, r0
    1a70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a7c:	00550001 	subseq	r0, r5, r1
	...
	physical [phy] = ps;
    1a8c:	01000000 	mrseq	r0, (UNDEF: 0)
	physinfo [phy] = info;
    1a90:	00005600 	andeq	r5, r0, r0, lsl #12
	...
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1aa0:	00010000 	andeq	r0, r1, r0
		syserror (EMALLOC, "tcv29");
    1aa4:	00000050 	andeq	r0, r0, r0, asr r0
    1aa8:	00000000 	andeq	r0, r0, r0
	q_init (q);
    1aac:	0017e000 	andseq	lr, r7, r0
}
    1ab0:	00180e00 	andseq	r0, r8, r0, lsl #28
    1ab4:	50000100 	andpl	r0, r0, r0, lsl #2
    1ab8:	00001814 	andeq	r1, r0, r4, lsl r8
    1abc:	00001834 	andeq	r1, r0, r4, lsr r8
    1ac0:	74500001 	ldrbvc	r0, [r0], #-1
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac4:	76000018 			; <UNDEFINED> instruction: 0x76000018
	verify_fph (phy, "tcv30");
    1ac8:	01000018 	tsteq	r0, r8, lsl r0
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1acc:	00005000 	andeq	r5, r0, r0
    1ad0:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv30");
    1ad4:	17e00000 	strbne	r0, [r0, r0]!
    1ad8:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    1adc:	00010000 	andeq	r0, r1, r0
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ae0:	00181051 	andseq	r1, r8, r1, asr r0
    1ae4:	00181400 	andseq	r1, r8, r0, lsl #8
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    1aec:	00001814 	andeq	r1, r0, r4, lsl r8
		if (plugins [plg] == NULL)
    1af0:	00001834 	andeq	r1, r0, r4, lsr r8
    1af4:	34510001 	ldrbcc	r0, [r1], #-1
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af8:	40000018 	andmi	r0, r0, r8, lsl r0
}
    1afc:	01000018 	tsteq	r0, r8, lsl r0
    1b00:	18445700 	stmdane	r4, {r8, r9, sl, ip, lr}^
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b04:	18740000 	ldmdane	r4!, {}^	; <UNPREDICTABLE>
    1b08:	00010000 	andeq	r0, r1, r0
    1b0c:	00187457 	andseq	r7, r8, r7, asr r4
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b10:	00187900 	andseq	r7, r8, r0, lsl #18
    1b14:	51000100 	mrspl	r0, (UNDEF: 16)
    1b18:	00001879 	andeq	r1, r0, r9, ror r8
    1b1c:	000018a0 	andeq	r1, r0, r0, lsr #17
    1b20:	00570001 	subseq	r0, r7, r1
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b24:	00000000 	andeq	r0, r0, r0
	len -= (ap.head + ap.tail);
    1b28:	e0000000 	and	r0, r0, r0
    1b2c:	10000017 	andne	r0, r0, r7, lsl r0
    1b30:	02000018 	andeq	r0, r0, #24
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b34:	14789100 	ldrbtne	r9, [r8], #-256	; 0xffffff00
    1b38:	34000018 	strcc	r0, [r0], #-24	; 0xffffffe8
    1b3c:	02000018 	andeq	r0, r0, #24
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b40:	44789100 	ldrbtmi	r9, [r8], #-256	; 0xffffff00
    1b44:	50000018 	andpl	r0, r0, r8, lsl r0
    1b48:	02000018 	andeq	r0, r0, #24
	return 1;
    1b4c:	74789100 	ldrbtvc	r9, [r8], #-256	; 0xffffff00
    1b50:	a0000018 	andge	r0, r0, r8, lsl r0
    1b54:	02000018 	andeq	r0, r0, #24
    1b58:	00789100 	rsbseq	r9, r8, r0, lsl #2
    1b5c:	00000000 	andeq	r0, r0, r0
	verify_fph (phy, "tcv32");
    1b60:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1b64:	38000018 	stmdacc	r0, {r3, r4}
    1b68:	01000018 	tsteq	r0, r8, lsl r0
    1b6c:	18445600 	stmdane	r4, {r9, sl, ip, lr}^
    1b70:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    1b74:	00010000 	andeq	r0, r1, r0
	oq = oqueues [phy];
    1b78:	00000056 	andeq	r0, r0, r6, asr r0
	b = q_first (oq);
    1b7c:	00000000 	andeq	r0, r0, r0
	if (q_end (b, oq)) {
    1b80:	00184400 	andseq	r4, r8, r0, lsl #8
	*len = b->length;
    1b84:	00185e00 	andseq	r5, r8, r0, lsl #28
	deq (b);	// Dequeue the packet ...
    1b88:	50000100 	andpl	r0, r0, r0, lsl #2
}
    1b8c:	0000185e 	andeq	r1, r0, lr, asr r8
		return NULL;
    1b90:	00001862 	andeq	r1, r0, r2, ror #16
    1b94:	62540001 	subsvs	r0, r4, #1
    1b98:	66000018 			; <UNDEFINED> instruction: 0x66000018
    1b9c:	01000018 	tsteq	r0, r8, lsl r0
	verify_fph (phy, "tcv33");
    1ba0:	18665000 	stmdane	r6!, {ip, lr}^
    1ba4:	18740000 	ldmdane	r4!, {}^	; <UNPREDICTABLE>
    1ba8:	00010000 	andeq	r0, r1, r0
    1bac:	00187a54 	andseq	r7, r8, r4, asr sl
    1bb0:	00188200 	andseq	r8, r8, r0, lsl #4
    1bb4:	50000100 	andpl	r0, r0, r0, lsl #2
	oq = oqueues [phy];
    1bb8:	00001882 	andeq	r1, r0, r2, lsl #17
	b = q_first (oq);
    1bbc:	000018a0 	andeq	r1, r0, r0, lsr #17
		return NULL;
    1bc0:	00540001 	subseq	r0, r4, r1
	return (address)(b + 1);
    1bc4:	00000000 	andeq	r0, r0, r0
}
    1bc8:	70000000 	andvc	r0, r0, r0
    1bcc:	96000017 			; <UNDEFINED> instruction: 0x96000017
    1bd0:	01000017 	tsteq	r0, r7, lsl r0
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd4:	179a5000 	ldrne	r5, [sl, r0]
	verify_plg (b, tcv_xmt, "tcv34");
    1bd8:	17b70000 	ldrne	r0, [r7, r0]!
	hblock_t *b = header (pkt);
    1bdc:	00010000 	andeq	r0, r1, r0
	verify_plg (b, tcv_xmt, "tcv34");
    1be0:	0017c450 	andseq	ip, r7, r0, asr r4
    1be4:	0017c600 	andseq	ip, r7, r0, lsl #12
    1be8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1bf4:	0000177a 	andeq	r1, r0, sl, ror r7
    1bf8:	000017c0 	andeq	r1, r0, r0, asr #15
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bfc:	c0540001 	subsgt	r0, r4, r1
}
    1c00:	c3000017 	movwgt	r0, #23
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c04:	01000017 	tsteq	r0, r7, lsl r0
    1c08:	17c45000 	strbne	r5, [r4, r0]
    1c0c:	17ca0000 	strbne	r0, [sl, r0]
}
    1c10:	00010000 	andeq	r0, r1, r0
    while(1)
    1c14:	0017ca54 	andseq	ip, r7, r4, asr sl
{
    1c18:	0017cd00 	andseq	ip, r7, r0, lsl #26
    SetupTrimDevice();
    1c1c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    1c28:	00001658 	andeq	r1, r0, r8, asr r6
    1c2c:	0000165e 	andeq	r1, r0, lr, asr r6
    1c30:	00500001 	subseq	r0, r0, r1
    1c34:	00000000 	andeq	r0, r0, r0
    1c38:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
   main();
    1c3c:	95000016 	strls	r0, [r0, #-22]	; 0xffffffea
    FaultISR();
    1c40:	01000016 	tsteq	r0, r6, lsl r0
        *pui32Dest++ = *pui32Src++;
    1c44:	00005000 	andeq	r5, r0, r0
    1c48:	00000000 	andeq	r0, r0, r0
    1c4c:	16740000 	ldrbtne	r0, [r4], -r0
    1c50:	16860000 	strne	r0, [r6], r0
    1c54:	00010000 	andeq	r0, r1, r0
    1c58:	00000050 	andeq	r0, r0, r0, asr r0
    1c5c:	00000000 	andeq	r0, r0, r0
    1c60:	00169800 	andseq	r9, r6, r0, lsl #16
static byte get_byte () {
    1c64:	0016a600 	andseq	sl, r6, r0, lsl #12
    1c68:	50000100 	andpl	r0, r0, r0, lsl #2
    1c6c:	000016a6 	andeq	r1, r0, r6, lsr #13
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c70:	000016ac 	andeq	r1, r0, ip, lsr #13
    1c74:	ac550001 	mrrcge	0, 0, r0, r5, cr1
		if (ee_inp)
    1c78:	b5000016 	strlt	r0, [r0, #-22]	; 0xffffffea
			b |= 1;
    1c7c:	01000016 	tsteq	r0, r6, lsl r0
    1c80:	16b55000 	ldrtne	r5, [r5], r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c84:	16e40000 	strbtne	r0, [r4], r0
	for (b = 0, i = 0; i < 8; i++) {
    1c88:	00010000 	andeq	r0, r1, r0
}
    1c8c:	00000055 	andeq	r0, r0, r5, asr r0
    1c90:	00000000 	andeq	r0, r0, r0
    1c94:	00169800 	andseq	r9, r6, r0, lsl #16
static void put_byte (byte b) {
    1c98:	0016a800 	andseq	sl, r6, r0, lsl #16
    1c9c:	51000100 	mrspl	r0, (UNDEF: 16)
    1ca0:	000016a8 	andeq	r1, r0, r8, lsr #13
    1ca4:	000016ac 	andeq	r1, r0, ip, lsr #13
		if (b & 0x80)
    1ca8:	ac540001 	mrrcge	0, 0, r0, r4, cr1
    1cac:	b5000016 	strlt	r0, [r0, #-22]	; 0xffffffea
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cb0:	01000016 	tsteq	r0, r6, lsl r0
	for (i = 0; i < 8; i++) {
    1cb4:	16b55100 	ldrtne	r5, [r5], r0, lsl #2
		b <<= 1;
    1cb8:	16e40000 	strbtne	r0, [r4], r0
	for (i = 0; i < 8; i++) {
    1cbc:	00010000 	andeq	r0, r1, r0
}
    1cc0:	00000054 	andeq	r0, r0, r4, asr r0
    1cc4:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc8:	0016a400 	andseq	sl, r6, r0, lsl #8
    1ccc:	0016a600 	andseq	sl, r6, r0, lsl #12
	put_byte (cmd);
    1cd0:	50000100 	andpl	r0, r0, r0, lsl #2
    1cd4:	000016a6 	andeq	r1, r0, r6, lsr #13
}
    1cd8:	000016ac 	andeq	r1, r0, ip, lsr #13
    1cdc:	00550001 	subseq	r0, r5, r1
static void wwait (word st, word del) {
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	a4000000 	strge	r0, [r0], #-0
    1ce8:	a8000016 	stmdage	r0, {r1, r2, r4}
	while (dopen && (rdsr () & 1)) {
    1cec:	01000016 	tsteq	r0, r6, lsl r0
    1cf0:	16a85100 	strtne	r5, [r8], r0, lsl #2
    1cf4:	16ac0000 	strtne	r0, [ip], r0
    1cf8:	00010000 	andeq	r0, r1, r0
	put_byte (CMD_RDSR);
    1cfc:	00000054 	andeq	r0, r0, r4, asr r0
	r = get_byte ();
    1d00:	00000000 	andeq	r0, r0, r0
    1d04:	0016e400 	andseq	lr, r6, r0, lsl #8
	while (dopen && (rdsr () & 1)) {
    1d08:	00171400 	andseq	r1, r7, r0, lsl #8
}
    1d0c:	50000100 	andpl	r0, r0, r0, lsl #2
		if (st == WNONE)
    1d10:	00001714 	andeq	r1, r0, r4, lsl r7
    1d14:	00001720 	andeq	r1, r0, r0, lsr #14
			mdelay (1);
    1d18:	20540001 	subscs	r0, r4, r1
    1d1c:	27000017 	smladcs	r0, r7, r0, r0
			delay (del, st);
    1d20:	01000017 	tsteq	r0, r7, lsl r0
    1d24:	17285100 	strne	r5, [r8, -r0, lsl #2]!
			release;
    1d28:	174e0000 	strbne	r0, [lr, -r0]
    1d2c:	00010000 	andeq	r0, r1, r0
    1d30:	00174e50 	andseq	r4, r7, r0, asr lr
static void ready () {
    1d34:	00175000 	andseq	r5, r7, r0
	if (dopen) {
    1d38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		wwait (WNONE, 1);
    1d3c:	00001750 	andeq	r1, r0, r0, asr r7
    1d40:	00001757 	andeq	r1, r0, r7, asr r7
    1d44:	58500001 	ldmdapl	r0, {r0}^
	dstat = 0;
    1d48:	70000017 	andvc	r0, r0, r7, lsl r0
}
    1d4c:	01000017 	tsteq	r0, r7, lsl r0
    1d50:	00005000 	andeq	r5, r0, r0
    1d54:	00000000 	andeq	r0, r0, r0
	udelay (1);
    1d58:	16e40000 	strbtne	r0, [r4], r0
    1d5c:	16ee0000 	strbtne	r0, [lr], r0
	udelay (1);
    1d60:	00010000 	andeq	r0, r1, r0
		dopen = DOPEN_TEMP;
    1d64:	00000051 	andeq	r0, r0, r1, asr r0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	00173000 	andseq	r3, r7, r0
    1d70:	00174e00 	andseq	r4, r7, r0, lsl #28
static void cclose () {
    1d74:	50000100 	andpl	r0, r0, r0, lsl #2
	if (dopen == DOPEN_TEMP) {
    1d78:	0000174e 	andeq	r1, r0, lr, asr #14
    1d7c:	00001750 	andeq	r1, r0, r0, asr r7
		wwait (WNONE, 1);
    1d80:	00540001 	subseq	r0, r4, r1
    1d84:	00000000 	andeq	r0, r0, r0
	cmd_0 (CMD_DP);
    1d88:	80000000 	andhi	r0, r0, r0
    1d8c:	86000019 			; <UNDEFINED> instruction: 0x86000019
		dopen = 0;
    1d90:	01000019 	tsteq	r0, r9, lsl r0
}
    1d94:	19865000 	stmibne	r6, {ip, lr}
word ee_open () {
    1d98:	19920000 	ldmibne	r2, {}	; <UNPREDICTABLE>
	ready ();
    1d9c:	00010000 	andeq	r0, r1, r0
	dopen = DOPEN_PERM;
    1da0:	00000053 	andeq	r0, r0, r3, asr r0
    1da4:	00000000 	andeq	r0, r0, r0
}
    1da8:	00198000 	andseq	r8, r9, r0
	if (dopen) {
    1dac:	00198a00 	andseq	r8, r9, r0, lsl #20
    1db0:	51000100 	mrspl	r0, (UNDEF: 16)
		dopen = DOPEN_TEMP;
    1db4:	0000198a 	andeq	r1, r0, sl, lsl #19
		cclose ();
    1db8:	00001996 	muleq	r0, r6, r9
}
    1dbc:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
int ser_in (word st, char *buf, int len) {
    1dc0:	a1000019 	tstge	r0, r9, lsl r0
    1dc4:	01000019 	tsteq	r0, r9, lsl r0
	if (len == 0)
    1dc8:	00005000 	andeq	r5, r0, r0
	if (__inpline == NULL) {
    1dcc:	00000000 	andeq	r0, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    1dd0:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
    1dd4:	198e0000 	stmibne	lr, {}	; <UNPREDICTABLE>
			prcs = runthread (__inserial);
    1dd8:	00010000 	andeq	r0, r1, r0
    1ddc:	00198e52 	andseq	r8, r9, r2, asr lr
			if (prcs == 0) {
    1de0:	00199800 	andseq	r9, r9, r0, lsl #16
				npwait (st);
    1de4:	51000100 	mrspl	r0, (UNDEF: 16)
		release;
    1de8:	0000199c 	muleq	r0, ip, r9
		join (prcs, st);
    1dec:	000019a1 	andeq	r1, r0, r1, lsr #19
    1df0:	00510001 	subseq	r0, r1, r1
	if (*__inpline == NULL) // bin cmd
    1df4:	00000000 	andeq	r0, r0, r0
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df8:	94000000 	strls	r0, [r0], #-0
	if (prcs >= len)
    1dfc:	96000019 			; <UNDEFINED> instruction: 0x96000019
		prcs = len-1;
    1e00:	01000019 	tsteq	r0, r9, lsl r0
	memcpy (buf, __inpline, prcs);
    1e04:	00005000 	andeq	r5, r0, r0
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	19940000 	ldmibne	r4, {}	; <UNPREDICTABLE>
	ufree (__inpline);
    1e10:	19980000 	ldmibne	r8, {}	; <UNPREDICTABLE>
	__inpline = NULL;
    1e14:	00010000 	andeq	r0, r1, r0
	if (*buf) // if it's NULL, it's a bin cmd
    1e18:	00000051 	andeq	r0, r0, r1, asr r0
		buf [prcs] = '\0';
    1e1c:	00000000 	andeq	r0, r0, r0
}
    1e20:	001a0c00 	andseq	r0, sl, r0, lsl #24
		prcs = strlen (__inpline);
    1e24:	001a1000 	andseq	r1, sl, r0
    1e28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		return 0;
    1e34:	00001a0c 	andeq	r1, r0, ip, lsl #20
int ser_outf (word st, const char *m, ...) {
    1e38:	00001a1e 	andeq	r1, r0, lr, lsl sl
    1e3c:	1e510001 	cdpne	0, 5, cr0, cr1, cr1, {0}
	if ((prcs = running (__outserial)) != 0) {
    1e40:	2200001a 	andcs	r0, r0, #26
    1e44:	0100001a 	tsteq	r0, sl, lsl r0
		join (prcs, st);
    1e48:	1a225600 	bne	897650 <__ccfg+0x8776a8>
    1e4c:	1a320000 	bne	c81e54 <__ccfg+0xc61eac>
		release;
    1e50:	00010000 	andeq	r0, r1, r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e54:	001a3251 	andseq	r3, sl, r1, asr r2
    1e58:	001a3400 	andseq	r3, sl, r0, lsl #8
    1e5c:	56000100 	strpl	r0, [r0], -r0, lsl #2
		umwait (st);
    1e60:	00001a34 	andeq	r1, r0, r4, lsr sl
    1e64:	00001a37 	andeq	r1, r0, r7, lsr sl
	if (runstrand (__outserial, buf) == 0) {
    1e68:	37510001 	ldrbcc	r0, [r1, -r1]
    1e6c:	5a00001a 	bpl	1edc <ser_inf+0x50>
    1e70:	0100001a 	tsteq	r0, sl, lsl r0
		ufree (buf);
    1e74:	1a5a5600 	bne	169767c <__ccfg+0x16776d4>
		npwait (st);
    1e78:	1a5d0000 	bne	1741e80 <__ccfg+0x1721ed8>
}
    1e7c:	00010000 	andeq	r0, r1, r0
    1e80:	001a5d51 	andseq	r5, sl, r1, asr sp
    1e84:	001a7400 	andseq	r7, sl, r0, lsl #8
    1e88:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	if (fmt == NULL)
    1e94:	00001a0c 	andeq	r1, r0, ip, lsl #20
	if (__inpline == NULL) {
    1e98:	00001a21 	andeq	r1, r0, r1, lsr #20
		if ((prcs = running (__inserial)) == 0) {
    1e9c:	21520001 	cmpcs	r2, r1
    1ea0:	2200001a 	andcs	r0, r0, #26
			prcs = runthread (__inserial);
    1ea4:	0100001a 	tsteq	r0, sl, lsl r0
    1ea8:	1a225500 	bne	8972b0 <__ccfg+0x877308>
			if (prcs == 0) {
    1eac:	1a370000 	bne	dc1eb4 <__ccfg+0xda1f0c>
				npwait (st);
    1eb0:	00010000 	andeq	r0, r1, r0
		release;
    1eb4:	001a3752 	andseq	r3, sl, r2, asr r7
		join (prcs, st);
    1eb8:	001a5a00 	andseq	r5, sl, r0, lsl #20
    1ebc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	va_start (ap, fmt);
    1ec0:	00001a5a 	andeq	r1, r0, sl, asr sl
	prcs = vscan (__inpline, fmt, ap);
    1ec4:	00001a5d 	andeq	r1, r0, sp, asr sl
    1ec8:	5d520001 	ldclpl	0, cr0, [r2, #-4]
	ufree (__inpline);
    1ecc:	7400001a 	strvc	r0, [r0], #-26	; 0xffffffe6
	__inpline = NULL;
    1ed0:	0100001a 	tsteq	r0, sl, lsl r0
}
    1ed4:	00005500 	andeq	r5, r0, r0, lsl #10
    1ed8:	00000000 	andeq	r0, r0, r0
    1edc:	1a380000 	bne	e01ee4 <__ccfg+0xde1f3c>
		return 0;
    1ee0:	1a3e0000 	bne	f81ee8 <__ccfg+0xf61f40>
    1ee4:	00010000 	andeq	r0, r1, r0
    1ee8:	001a4050 	andseq	r4, sl, r0, asr r0
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1eec:	001a5300 	andseq	r5, sl, r0, lsl #6
    1ef0:	50000100 	andpl	r0, r0, r0, lsl #2
    1ef4:	00001a53 	andeq	r1, r0, r3, asr sl
	RF_cmdFs.frequency = 
    1ef8:	00001a5a 	andeq	r1, r0, sl, asr sl
}
    1efc:	5e540001 	cdppl	0, 5, cr0, cr4, cr1, {0}
    1f00:	6400001a 	strvs	r0, [r0], #-26	; 0xffffffe6
    1f04:	0100001a 	tsteq	r0, sl, lsl r0
    1f08:	00005000 	andeq	r5, r0, r0
static int option (int opt, address val) {
    1f0c:	00000000 	andeq	r0, r0, r0
    1f10:	1a1a0000 	bne	681f18 <__ccfg+0x661f70>
    1f14:	1a1e0000 	bne	781f1c <__ccfg+0x761f74>
    1f18:	00010000 	andeq	r0, r1, r0
    1f1c:	00000051 	andeq	r0, r0, r1, asr r0
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	001c2400 	andseq	r2, ip, r0, lsl #8
    1f28:	001c3d00 	andseq	r3, ip, r0, lsl #26
    1f2c:	52000100 	andpl	r0, r0, #0, 2
    1f30:	00001c48 	andeq	r1, r0, r8, asr #24
    1f34:	00001c5c 	andeq	r1, r0, ip, asr ip
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f38:	00520001 	subseq	r0, r2, r1
    1f3c:	00000000 	andeq	r0, r0, r0
			goto RVal;
    1f40:	24000000 	strcs	r0, [r0], #-0
			_BIS (dstate, DSTATE_RXON);
    1f44:	3d00001c 	stccc	0, cr0, [r0, #-112]	; 0xffffff90
    1f48:	0100001c 	tsteq	r0, ip, lsl r0
	int ret = 0;
    1f4c:	1c4c5300 	mcrrne	3, 0, r5, ip, cr0
			p_trigger (drvprcs, qevent);
    1f50:	1c5c0000 	mrane	r0, ip, acc0
    1f54:	00010000 	andeq	r0, r1, r0
    1f58:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1f68:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f74:	00500001 	subseq	r0, r0, r1
	...
			statid = (val == NULL) ? 0 : *val;
    1f84:	01000000 	mrseq	r0, (UNDEF: 0)
    1f88:	00005100 	andeq	r5, r0, r0, lsl #2
	int ret = 0;
    1f8c:	00000000 	andeq	r0, r0, r0
			ret = (int) statid;
    1f90:	00010000 	andeq	r0, r1, r0
	if (val != NULL)
    1f94:	00000051 	andeq	r0, r0, r1, asr r0
	...
			if (val != NULL) {
    1fa4:	52000100 	andpl	r0, r0, #0, 2
	...
				memset (&rxstat, 0, 
    1fb0:	00520001 	subseq	r0, r2, r1
	...
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fc0:	01000000 	mrseq	r0, (UNDEF: 0)
				utimer_set (bckf_timer, *val);
    1fc4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
				if (RF_cmdPropRadioDivSetup.txPower
    1fd4:	00010000 	andeq	r0, r1, r0
					== patable [ret])
    1fd8:	00000050 	andeq	r0, r0, r0, asr r0
	...
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff4:	00030005 	andeq	r0, r3, r5
	...
			_BIS (dstate, DSTATE_IRST);
    2000:	01000000 	mrseq	r0, (UNDEF: 0)
    2004:	00005000 	andeq	r5, r0, r0
			ret = (int) channel;
    2008:	00000000 	andeq	r0, r0, r0
			goto RVal;
    200c:	00050000 	andeq	r0, r5, r0
				(*val > 7) ? 7 : *val;
    2010:	00000003 	andeq	r0, r0, r3
	...
			_BIS (dstate, DSTATE_IRST);
    2024:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	00500001 	subseq	r0, r0, r1
    2034:	00000000 	andeq	r0, r0, r0
    2038:	01000000 	mrseq	r0, (UNDEF: 0)
    203c:	00005000 	andeq	r5, r0, r0
    2040:	00000000 	andeq	r0, r0, r0
    2044:	00010000 	andeq	r0, r1, r0
    2048:	00000050 	andeq	r0, r0, r0, asr r0
	...
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2058:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			syserror (EREQPAR, "cc13 op");
    206c:	00500001 	subseq	r0, r0, r1
	...
    207c:	01000000 	mrseq	r0, (UNDEF: 0)
    2080:	00005000 	andeq	r5, r0, r0
	...
    2090:	00010000 	andeq	r0, r1, r0
    2094:	00000051 	andeq	r0, r0, r1, asr r0
    2098:	00000000 	andeq	r0, r0, r0
static void issue_cmd (lword cmd) {
    209c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
		if (res != 0x86)
    20b0:	00520001 	subseq	r0, r2, r1
	...
			diag ("HUP %lx %lx", cmd, res);
    20c0:	01000000 	mrseq	r0, (UNDEF: 0)
    20c4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
}
    20d4:	00010000 	andeq	r0, r1, r0
    20d8:	00000054 	andeq	r0, r0, r4, asr r0
    20dc:	00000000 	andeq	r0, r0, r0
    20e0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if ((dstate & DSTATE_RXAC) == 0)
    20ec:	00540001 	subseq	r0, r4, r1
	...
}
    20fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2100:	00005000 	andeq	r5, r0, r0
    2104:	00000000 	andeq	r0, r0, r0
static void rf_off () {
    2108:	00010000 	andeq	r0, r1, r0
	if ((dstate & DSTATE_RFON) == 0)
    210c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	IntDisable (INT_RFC_CPE_0);
    211c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	00560001 	subseq	r0, r6, r1
    212c:	00000000 	andeq	r0, r0, r0
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	01000000 	mrseq	r0, (UNDEF: 0)
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    2144:	00010000 	andeq	r0, r1, r0
	_BIC (dstate, DSTATE_RFON);
    2148:	00000052 	andeq	r0, r0, r2, asr r0
    214c:	00000000 	andeq	r0, r0, r0
}
    2150:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	00540001 	subseq	r0, r4, r1
	...
		if (timeout-- == 0) {
    2174:	01000000 	mrseq	r0, (UNDEF: 0)
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	00005000 	andeq	r5, r0, r0
	...
			syserror (EHARDWARE, "rt2");
    2188:	00010000 	andeq	r0, r1, r0
		udelay (1);
    218c:	00000050 	andeq	r0, r0, r0, asr r0
		if (cmd->status == tstat)
    2190:	00000000 	andeq	r0, r0, r0
}
    2194:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    21a0:	00500001 	subseq	r0, r0, r1
	...
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21b0:	01000000 	mrseq	r0, (UNDEF: 0)
    21b4:	00005100 	andeq	r5, r0, r0, lsl #2
    21b8:	00000000 	andeq	r0, r0, r0
    21bc:	00010000 	andeq	r0, r1, r0
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21c0:	00000056 	andeq	r0, r0, r6, asr r0
    21c4:	00000000 	andeq	r0, r0, r0
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c8:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	issue_cmd (
    21d4:	00510001 	subseq	r0, r1, r1
	...
   pPatchTab[80] = 0;
    21e4:	01000000 	mrseq	r0, (UNDEF: 0)
   } while (--nIterations);
    21e8:	00005200 	andeq	r5, r0, r0, lsl #4
   pPatchTab[53] = 2;
    21ec:	00000000 	andeq	r0, r0, r0
    21f0:	00010000 	andeq	r0, r1, r0
   pPatchTab[55] = 3;
    21f4:	00000052 	andeq	r0, r0, r2, asr r0
   pPatchTab[110] = 4;
    21f8:	00000000 	andeq	r0, r0, r0
   pPatchTab[107] = 5;
    21fc:	001ce000 	andseq	lr, ip, r0
   pPatchTab[65] = 6;
    2200:	001cf000 	andseq	pc, ip, r0
    2204:	50000100 	andpl	r0, r0, r0, lsl #2
	...
   const uint32_t *pS = patchGenfskRfe;
    2210:	00001ce0 	andeq	r1, r0, r0, ror #25
      t2 = *pS++;
    2214:	00001cf0 	strdeq	r1, [r0], -r0
      t4 = *pS++;
    2218:	00510001 	subseq	r0, r1, r1
      t6 = *pS++;
    221c:	00000000 	andeq	r0, r0, r0
      t8 = *pS++;
    2220:	02000000 	andeq	r0, r0, #0
      *pD++ = t1;
    2224:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
      *pD++ = t2;
    2228:	0100001d 	tsteq	r0, sp, lsl r0
      *pD++ = t3;
    222c:	00005000 	andeq	r5, r0, r0
      *pD++ = t5;
    2230:	00000000 	andeq	r0, r0, r0
      *pD++ = t7;
    2234:	1cc80000 	stclne	0, cr0, [r8], {0}
   } while (--nIterations);
    2238:	1cd30000 	ldclne	0, cr0, [r3], {0}
    223c:	00010000 	andeq	r0, r1, r0
      *pD++ = t8;
    2240:	00000050 	andeq	r0, r0, r0, asr r0
   } while (--nIterations);
    2244:	00000000 	andeq	r0, r0, r0
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2248:	001c9800 	andseq	r9, ip, r0, lsl #16
   *pD++ = t2;
    224c:	001cb400 	andseq	fp, ip, r0, lsl #8
   *pD++ = t3;
    2250:	50000100 	andpl	r0, r0, r0, lsl #2
   *pD++ = t4;
    2254:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
   *pD++ = t5;
    2258:	00001cc8 	andeq	r1, r0, r8, asr #25
    225c:	00500001 	subseq	r0, r0, r1
	RFCAdi3VcoLdoVoltageMode (true);
    2260:	00000000 	andeq	r0, r0, r0
    2264:	74000000 	strvc	r0, [r0], #-0
       	RFCRfTrimSet (&rfTrim);
    2268:	7800001c 	stmdavc	r0, {r2, r3, r4}
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    226c:	0100001c 	tsteq	r0, ip, lsl r0
    2270:	1c7c5000 	ldclne	0, cr5, [ip], #-0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2274:	1c980000 	ldcne	0, cr0, [r8], {0}
    2278:	00010000 	andeq	r0, r1, r0
	issue_cmd ((lword)&cmd_srt);
    227c:	00000050 	andeq	r0, r0, r0, asr r0
    2280:	00000000 	andeq	r0, r0, r0
	issue_cmd ((lword)&RF_cmdFs);
    2284:	001dc000 	andseq	ip, sp, r0
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2288:	001dce00 	andseq	ip, sp, r0, lsl #28
    228c:	50000100 	andpl	r0, r0, r0, lsl #2
    2290:	00001e2a 	andeq	r1, r0, sl, lsr #28
	IntEnable (INT_RFC_CPE_0);
    2294:	00001e38 	andeq	r1, r0, r8, lsr lr
	_BIC (dstate, DSTATE_IRST);
    2298:	00500001 	subseq	r0, r0, r1
    229c:	00000000 	andeq	r0, r0, r0
    22a0:	c0000000 	andgt	r0, r0, r0
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a4:	d500001d 	strle	r0, [r0, #-29]	; 0xffffffe3
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a8:	0100001d 	tsteq	r0, sp, lsl r0
	IntEnable (INT_RFC_CPE_0);
    22ac:	1dd55100 	ldfnee	f5, [r5]
    22b0:	1df40000 	ldclne	0, cr0, [r4]
}
    22b4:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_RFC_CPE_0);
    22b8:	001df457 	andseq	pc, sp, r7, asr r4	; <UNPREDICTABLE>
    22bc:	001dfc00 	andseq	pc, sp, r0, lsl #24
    22c0:	51000100 	mrspl	r0, (UNDEF: 16)
    22c4:	00001dfc 	strdeq	r1, [r0], -ip
    22c8:	00001e22 	andeq	r1, r0, r2, lsr #28
    22cc:	22570001 	subscs	r0, r7, #1
    22d0:	2500001e 	strcs	r0, [r0, #-30]	; 0xffffffe2
    22d4:	0100001e 	tsteq	r0, lr, lsl r0
    22d8:	1e255100 	sufnes	f5, f5, f0
    22dc:	1e2a0000 	cdpne	0, 2, cr0, cr10, cr0, {0}
    22e0:	00010000 	andeq	r0, r1, r0
    22e4:	001e2a57 	andseq	r2, lr, r7, asr sl
    22e8:	001e3800 	andseq	r3, lr, r0, lsl #16
    22ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    22f8:	00001dc0 	andeq	r1, r0, r0, asr #27
    22fc:	00001dd5 	ldrdeq	r1, [r0], -r5
    2300:	d5520001 	ldrble	r0, [r2, #-1]
    2304:	f400001d 	vst4.8	{d0-d3}, [r0 :64]!
    2308:	0100001d 	tsteq	r0, sp, lsl r0
    230c:	1df45500 	cfldr64ne	mvdx5, [r4]
    2310:	1dfc0000 	ldclne	0, cr0, [ip]
    2314:	00010000 	andeq	r0, r1, r0
    2318:	001dfc52 	andseq	pc, sp, r2, asr ip	; <UNPREDICTABLE>
static void rx_int_enable () {
    231c:	001e2200 	andseq	r2, lr, r0, lsl #4
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2320:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2324:	00001e22 	andeq	r1, r0, r2, lsr #28
    2328:	00001e25 	andeq	r1, r0, r5, lsr #28
    232c:	25520001 	ldrbcs	r0, [r2, #-1]
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2330:	2a00001e 	bcs	23b0 <rx_int_enable+0x94>
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2334:	0100001e 	tsteq	r0, lr, lsl r0
    2338:	1e2a5500 	cfsh64ne	mvdx5, mvdx10, #0
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    233c:	1e380000 	cdpne	0, 3, cr0, cr8, cr0, {0}
    2340:	00010000 	andeq	r0, r1, r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2344:	00000052 	andeq	r0, r0, r2, asr r0
    2348:	00000000 	andeq	r0, r0, r0
    234c:	001dd600 	andseq	sp, sp, r0, lsl #12
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2350:	001ddc00 	andseq	sp, sp, r0, lsl #24
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2354:	50000100 	andpl	r0, r0, r0, lsl #2
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2358:	00001ddc 	ldrdeq	r1, [r0], -ip
		if (db->status == DATA_ENTRY_FINISHED) {
    235c:	00001ddf 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2360:	e0510001 	subs	r0, r1, r1
    2364:	e400001d 	str	r0, [r0], #-29	; 0xffffffe3
			nr++;
    2368:	0100001d 	tsteq	r0, sp, lsl r0
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    236c:	1dec5000 	stclne	0, cr5, [ip]
    2370:	1df10000 	ldclne	0, cr0, [r1]
    2374:	00010000 	andeq	r0, r1, r0
    2378:	001dfc50 	andseq	pc, sp, r0, asr ip	; <UNPREDICTABLE>
				__dp [pl + 1] = __dp [pl] - 128;
    237c:	001e1e00 	andseq	r1, lr, r0, lsl #28
				pl = __dp [1] + 2;
    2380:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				__dp [pl + 1] = __dp [pl] - 128;
    2384:	00001e28 	andeq	r1, r0, r8, lsr #28
    2388:	00001e2a 	andeq	r1, r0, sl, lsr #28
				__dp [pl] = 0;
    238c:	00500001 	subseq	r0, r0, r1
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2390:	00000000 	andeq	r0, r0, r0
    2394:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2398:	4000001e 	andmi	r0, r0, lr, lsl r0
			db->status = DATA_ENTRY_PENDING;
    239c:	0100001e 	tsteq	r0, lr, lsl r0
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23a0:	00005000 	andeq	r5, r0, r0
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a4:	00000000 	andeq	r0, r0, r0
				diag ("BAD RX");
    23a8:	1e440000 	cdpne	0, 4, cr0, cr4, cr0, {0}
    23ac:	1e4d0000 	cdpne	0, 4, cr0, cr13, cr0, {0}
	if (nr) {
    23b0:	00010000 	andeq	r0, r1, r0
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b4:	001e4d50 	andseq	r4, lr, r0, asr sp
}
    23b8:	001e5200 	andseq	r5, lr, r0, lsl #4
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23bc:	56000100 	strpl	r0, [r0], -r0, lsl #2
    23c0:	00001e52 	andeq	r1, r0, r2, asr lr
    23c4:	00001e5b 	andeq	r1, r0, fp, asr lr
}
    23c8:	5b500001 	blpl	14023d4 <__ccfg+0x13e242c>
    23cc:	8200001e 	andhi	r0, r0, #30
    23d0:	0100001e 	tsteq	r0, lr, lsl r0
    23d4:	1e825600 	cdpne	6, 8, cr5, cr2, cr0, {0}
    23d8:	1e8c0000 	cdpne	0, 8, cr0, cr12, cr0, {0}
    23dc:	00010000 	andeq	r0, r1, r0
    23e0:	00000050 	andeq	r0, r0, r0, asr r0
    23e4:	00000000 	andeq	r0, r0, r0
    23e8:	001e5c00 	andseq	r5, lr, r0, lsl #24
thread (cc1350_driver)
    23ec:	001e6000 	andseq	r6, lr, r0
    23f0:	50000100 	andpl	r0, r0, r0, lsl #2
    23f4:	00001e60 	andeq	r1, r0, r0, ror #28
    23f8:	00001e68 	andeq	r1, r0, r8, ror #28
    23fc:	68550001 	ldmdavs	r5, {r0}^
		if (dstate & DSTATE_IRST) {
    2400:	6c00001e 	stcvs	0, cr0, [r0], {30}
    2404:	0100001e 	tsteq	r0, lr, lsl r0
    2408:	1e6c5000 	cdpne	0, 6, cr5, cr12, cr0, {0}
			rf_off ();
    240c:	1e820000 	cdpne	0, 8, cr0, cr2, cr0, {0}
			_BIC (dstate,
    2410:	00010000 	andeq	r0, r1, r0
    2414:	00000055 	andeq	r0, r0, r5, asr r0
		if (dstate & DSTATE_RXAC) {
    2418:	00000000 	andeq	r0, r0, r0
    241c:	001e8c00 	andseq	r8, lr, r0, lsl #24
			if ((dstate & DSTATE_RXON) == 0)
    2420:	001e9a00 	andseq	r9, lr, r0, lsl #20
				rx_de ();
    2424:	50000100 	andpl	r0, r0, r0, lsl #2
		if (paylen == 0) {
    2428:	00001ee0 	andeq	r1, r0, r0, ror #29
    242c:	00001eec 	andeq	r1, r0, ip, ror #29
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2430:	00500001 	subseq	r0, r0, r1
    2434:	00000000 	andeq	r0, r0, r0
    2438:	a2000000 	andge	r0, r0, #0
    243c:	a800001e 	stmdage	r0, {r1, r2, r3, r4}
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2440:	0100001e 	tsteq	r0, lr, lsl r0
    2444:	1ea85000 	cdpne	0, 10, cr5, cr8, cr0, {0}
    2448:	1eab0000 	cdpne	0, 10, cr0, cr11, cr0, {0}
    244c:	00010000 	andeq	r0, r1, r0
    2450:	001eac51 	andseq	sl, lr, r1, asr ip
    2454:	001eb000 	andseq	fp, lr, r0
    2458:	50000100 	andpl	r0, r0, r0, lsl #2
    245c:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
		} else if (dstate & DSTATE_RXON) {
    2460:	00001ebd 			; <UNDEFINED> instruction: 0x00001ebd
	if (dstate & DSTATE_RFON)
    2464:	ca500001 	bgt	1402470 <__ccfg+0x13e24c8>
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2468:	cc00001e 	stcgt	0, cr0, [r0], {30}
		re->status = DATA_ENTRY_PENDING;
    246c:	0100001e 	tsteq	r0, lr, lsl r0
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2470:	1ecc5000 	cdpne	0, 12, cr5, cr12, cr0, {0}
	issue_cmd ((lword)&RF_cmdPropRx);
    2474:	1ed40000 	cdpne	0, 13, cr0, cr4, cr0, {0}
	_BIS (dstate, DSTATE_RXAC);
    2478:	00010000 	andeq	r0, r1, r0
    247c:	00000054 	andeq	r0, r0, r4, asr r0
    2480:	00000000 	andeq	r0, r0, r0
    2484:	00264c00 	eoreq	r4, r6, r0, lsl #24
	if (dstate & DSTATE_RXAC)
    2488:	00265a00 	eoreq	r5, r6, r0, lsl #20
    248c:	50000100 	andpl	r0, r0, r0, lsl #2
				if (statid != 0xffff)
    2490:	0000265a 	andeq	r2, r0, sl, asr r6
    2494:	00002660 	andeq	r2, r0, r0, ror #12
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2498:	60560001 	subsvs	r0, r6, r1
				RF_cmdPropTx.pktLen = (byte) paylen;
    249c:	6a000026 	bvs	253c <cc1350_driver+0x150>
		if (paylen == 0) {
    24a0:	01000026 	tsteq	r0, r6, lsr #32
			wait (qevent, DR_LOOP);
    24a4:	266a5000 	strbtcs	r5, [sl], -r0
    24a8:	266e0000 	strbtcs	r0, [lr], -r0
			if (dstate & DSTATE_RXAC) {
    24ac:	00010000 	andeq	r0, r1, r0
    24b0:	00266e56 	eoreq	r6, r6, r6, asr lr
				rx_int_enable ();
    24b4:	00267e00 	eoreq	r7, r6, r0, lsl #28
			release;
    24b8:	50000100 	andpl	r0, r0, r0, lsl #2
			} else if (dstate & DSTATE_RFON) {
    24bc:	0000267e 	andeq	r2, r0, lr, ror r6
				delay (offdelay, DR_GOOF);
    24c0:	00002776 	andeq	r2, r0, r6, ror r7
    24c4:	00560001 	subseq	r0, r6, r1
    24c8:	00000000 	andeq	r0, r0, r0
		if (bckf_timer) {
    24cc:	4c000000 	stcmi	0, cr0, [r0], {-0}
			wait (qevent, DR_LOOP);
    24d0:	5c000026 	stcpl	0, cr0, [r0], {38}	; 0x26
    24d4:	01000026 	tsteq	r0, r6, lsr #32
    24d8:	26605100 	strbtcs	r5, [r0], -r0, lsl #2
			delay (bckf_timer, DR_LOOP);
    24dc:	266c0000 	strbtcs	r0, [ip], -r0
    24e0:	00010000 	andeq	r0, r1, r0
			if (dstate & DSTATE_RXAC)
    24e4:	00266e51 	eoreq	r6, r6, r1, asr lr
    24e8:	00267e00 	eoreq	r7, r6, r0, lsl #28
	if (dstate & DSTATE_RFON)
    24ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		RF_cmdPropTx . status = 0;
    24f8:	000026b4 			; <UNDEFINED> instruction: 0x000026b4
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24fc:	000026c8 	andeq	r2, r0, r8, asr #13
    2500:	c8550001 	ldmdagt	r5, {r0}^
    2504:	ce000026 	cdpgt	0, 0, cr0, cr0, cr6, {1}
		issue_cmd ((lword)&cmd_cs);
    2508:	02000026 	andeq	r0, r0, #38	; 0x26
		if (dstate & DSTATE_IRST)
    250c:	00007000 	andeq	r7, r0, r0
    2510:	00000000 	andeq	r0, r0, r0
    2514:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2518:	87000026 	strhi	r0, [r0, -r6, lsr #32]
    251c:	01000026 	tsteq	r0, r6, lsr #32
			delay (1, DR_XMIT);
    2520:	26875300 	strcs	r5, [r7], r0, lsl #6
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2524:	26ea0000 	strbtcs	r0, [sl], r0
    2528:	00010000 	andeq	r0, r1, r0
    252c:	00271c5b 	eoreq	r1, r7, fp, asr ip
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2530:	00272000 	eoreq	r2, r7, r0
    2534:	5b000100 	blpl	293c <__inserial+0x6c>
	...
				issue_cmd ((lword)&RF_cmdPropTx);
    2540:	00002688 	andeq	r2, r0, r8, lsl #13
				proceed (DR_XMIT);
    2544:	0000268c 	andeq	r2, r0, ip, lsl #13
    2548:	92500001 	subsls	r0, r0, #1
			txtries++;
    254c:	b8000026 	stmdalt	r0, {r1, r2, r5}
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2550:	01000026 	tsteq	r0, r6, lsr #32
    2554:	26b85000 	ldrtcs	r5, [r8], r0
    2558:	26bb0000 	ldrtcs	r0, [fp], r0
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    255c:	00010000 	andeq	r0, r1, r0
		goto DR_LOOP__;
    2560:	00271c53 	eoreq	r1, r7, r3, asr ip
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2564:	00272000 	eoreq	r2, r7, r0
		paylen = 0;
    2568:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2574:	00001f0c 	andeq	r1, r0, ip, lsl #30
    2578:	00001f3a 	andeq	r1, r0, sl, lsr pc
    257c:	42500001 	subsmi	r0, r0, #1
    2580:	4c00001f 	stcmi	0, cr0, [r0], {31}
    2584:	0100001f 	tsteq	r0, pc, lsl r0
		    tcvphy_top (physid) == NULL)
    2588:	1f7a5000 	svcne	0x007a5000
    258c:	1f8c0000 	svcne	0x008c0000
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2590:	00010000 	andeq	r0, r1, r0
    2594:	001f9050 	andseq	r9, pc, r0, asr r0	; <UNPREDICTABLE>
			rf_off ();
    2598:	001f9400 	andseq	r9, pc, r0, lsl #8
endthread
    259c:	50000100 	andpl	r0, r0, r0, lsl #2
    25a0:	00001f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    25a4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    25a8:	a2500001 	subsge	r0, r0, #1
    25ac:	a800001f 	stmdage	r0, {r0, r1, r2, r3, r4}
    25b0:	0100001f 	tsteq	r0, pc, lsl r0
    25b4:	1fb05000 	svcne	0x00b05000
    25b8:	1fb20000 	svcne	0x00b20000
    25bc:	00010000 	andeq	r0, r1, r0
    25c0:	001fb850 	andseq	fp, pc, r0, asr r8	; <UNPREDICTABLE>
    25c4:	001fbd00 	andseq	fp, pc, r0, lsl #26
    25c8:	50000100 	andpl	r0, r0, r0, lsl #2
    25cc:	00001fcc 	andeq	r1, r0, ip, asr #31
    25d0:	00001fd2 	ldrdeq	r1, [r0], -r2
    25d4:	e8500001 	ldmda	r0, {r0}^
    25d8:	ec00001f 	stc	0, cr0, [r0], {31}
void RFCCPE0IntHandler (void) {
    25dc:	0100001f 	tsteq	r0, pc, lsl r0
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25e0:	20085000 	andcs	r5, r8, r0
		_BIS (dstate, DSTATE_IRST);
    25e4:	200c0000 	andcs	r0, ip, r0
    25e8:	00010000 	andeq	r0, r1, r0
    25ec:	00200e50 	eoreq	r0, r0, r0, asr lr
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25f0:	00206000 	eoreq	r6, r0, r0
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2600:	00001f0c 	andeq	r1, r0, ip, lsl #30
	p_trigger (drvprcs, qevent);
    2604:	00001f4c 	andeq	r1, r0, ip, asr #30
    2608:	7a510001 	bvc	1442614 <__ccfg+0x142266c>
    260c:	8c00001f 	stchi	0, cr0, [r0], {31}
    2610:	0100001f 	tsteq	r0, pc, lsl r0
    2614:	1f905100 	svcne	0x00905100
    2618:	1f940000 	svcne	0x00940000
    261c:	00010000 	andeq	r0, r1, r0
    2620:	001f9451 	andseq	r9, pc, r1, asr r4	; <UNPREDICTABLE>
    2624:	001f9c00 	andseq	r9, pc, r0, lsl #24
	RISE_N_SHINE;
    2628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    262c:	00001f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    2630:	00001faa 	andeq	r1, r0, sl, lsr #31
}
    2634:	aa510001 	bge	1442640 <__ccfg+0x1422698>
    2638:	b000001f 	andlt	r0, r0, pc, lsl r0
    263c:	0100001f 	tsteq	r0, pc, lsl r0
    2640:	1fb05400 	svcne	0x00b05400
    2644:	1fb50000 	svcne	0x00b50000
    2648:	00010000 	andeq	r0, r1, r0
void phys_cc1350 (int phy, int mbs) {
    264c:	001fb551 	andseq	fp, pc, r1, asr r5	; <UNPREDICTABLE>
	if (rbuffl != 0)
    2650:	001fb800 	andseq	fp, pc, r0, lsl #16
    2654:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		syserror (ETOOMANY, "cc13");
    2658:	00001fb8 			; <UNDEFINED> instruction: 0x00001fb8
		syserror (EREQPAR, "cc13 mb");
    265c:	00001fbd 			; <UNDEFINED> instruction: 0x00001fbd
	if (mbs == 0)
    2660:	bd510001 	ldcllt	0, cr0, [r1, #-4]
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2664:	cc00001f 	stcgt	0, cr0, [r0], {31}
		syserror (EREQPAR, "cc13 mb");
    2668:	0100001f 	tsteq	r0, pc, lsl r0
    266c:	1fcc5400 	svcne	0x00cc5400
	i = 0;
    2670:	1fce0000 	svcne	0x00ce0000
	rbuffl = (byte) mbs;
    2674:	00010000 	andeq	r0, r1, r0
		db->config.type = 0;	// General (data in structure)
    2678:	001fce51 	andseq	ip, pc, r1, asr lr	; <UNPREDICTABLE>
	rbuffl = (byte) mbs;
    267c:	001fd000 	andseq	sp, pc, r0
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2680:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2684:	00001fd0 	ldrdeq	r1, [r0], -r0
		if (db == NULL)
    2688:	00001fd8 	ldrdeq	r1, [r0], -r8
			syserror (EMALLOC, "cc13");
    268c:	d8510001 	ldmdale	r1, {r0}^
    2690:	e800001f 	stmda	r0, {r0, r1, r2, r3, r4}
    2694:	0100001f 	tsteq	r0, pc, lsl r0
		db->status = DATA_ENTRY_PENDING;
    2698:	1fe85400 	svcne	0x00e85400
		if (i)
    269c:	20620000 	rsbcs	r0, r2, r0
			da->pNextEntry = (byte*) db;
    26a0:	00010000 	andeq	r0, r1, r0
		db->length = rbuffl + 2;
    26a4:	00206251 	eoreq	r6, r0, r1, asr r2
    26a8:	00209c00 	eoreq	r9, r0, r0, lsl #24
		db->config.type = 0;	// General (data in structure)
    26ac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b8:	00001f40 	andeq	r1, r0, r0, asr #30
    26bc:	00001f42 	andeq	r1, r0, r2, asr #30
	if (rbuffs == NULL)
    26c0:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
	rbuffs->pCurrEntry = (byte*) re;
    26c4:	7800001f 	stmdavc	r0, {r0, r1, r2, r3, r4}
	rbuffs->pLastEntry = NULL;
    26c8:	0100001f 	tsteq	r0, pc, lsl r0
    26cc:	1f945000 	svcne	0x00945000
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d0:	1f9c0000 	svcne	0x009c0000
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d4:	00010000 	andeq	r0, r1, r0
    26d8:	001fd850 	andseq	sp, pc, r0, asr r8	; <UNPREDICTABLE>
    26dc:	001fe800 	andseq	lr, pc, r0, lsl #16
	rbuffl -= 2;
    26e0:	50000100 	andpl	r0, r0, r0, lsl #2
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e4:	00001ff2 	strdeq	r1, [r0], -r2
	rbuffl -= 2;
    26e8:	00002008 	andeq	r2, r0, r8
	physid = phy;
    26ec:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f0:	0e000020 	cdpeq	0, 0, cr0, cr0, cr0, {1}
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f4:	01000020 	tsteq	r0, r0, lsr #32
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	00005000 	andeq	r5, r0, r0
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	00000000 	andeq	r0, r0, r0
    2700:	1f620000 	svcne	0x00620000
	utimer_add (&bckf_timer);
    2704:	1f6c0000 	svcne	0x006c0000
	drvprcs = runthread (cc1350_driver);
    2708:	00010000 	andeq	r0, r1, r0
    270c:	00000053 	andeq	r0, r0, r3, asr r0
    2710:	00000000 	andeq	r0, r0, r0
	if (drvprcs == 0)
    2714:	0023ec00 	eoreq	lr, r3, r0, lsl #24
		syserror (ERESOURCE, "cc13");
    2718:	00240000 	eoreq	r0, r4, r0
    271c:	50000100 	andpl	r0, r0, r0, lsl #2
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2720:	00002574 	andeq	r2, r0, r4, ror r5
    2724:	0000258c 	andeq	r2, r0, ip, lsl #11
    2728:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    272c:	a3000025 	movwge	r0, #37	; 0x25
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2730:	01000025 	tsteq	r0, r5, lsr #32
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	00005000 	andeq	r5, r0, r0
    2738:	00000000 	andeq	r0, r0, r0
    273c:	246c0000 	strbtcs	r0, [ip], #-0
    2740:	24740000 	ldrbtcs	r0, [r4], #-0
    2744:	00010000 	andeq	r0, r1, r0
    2748:	00247452 	eoreq	r7, r4, r2, asr r4
    274c:	00247700 	eoreq	r7, r4, r0, lsl #14
    2750:	72000200 	andvc	r0, r0, #0, 4
	...
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	00261200 	eoreq	r1, r6, r0, lsl #4
    2760:	00261c00 	eoreq	r1, r6, r0, lsl #24
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2764:	53000100 	movwpl	r0, #256	; 0x100
	...
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2770:	0000235a 	andeq	r2, r0, sl, asr r3
}
    2774:	0000239e 	muleq	r0, lr, r3
    2778:	9e540001 	cdpls	0, 5, cr0, cr4, cr1, {0}
    277c:	a6000023 	strge	r0, [r0], -r3, lsr #32
    2780:	02000023 	andeq	r0, r0, #35	; 0x23
    2784:	a6007400 	strge	r7, [r0], -r0, lsl #8
    2788:	b0000023 	andlt	r0, r0, r3, lsr #32
    278c:	01000023 	tsteq	r0, r3, lsr #32
    2790:	23b05400 	movscs	r5, #0, 8
    2794:	23b50000 			; <UNDEFINED> instruction: 0x23b50000
    2798:	00020000 	andeq	r0, r2, r0
    279c:	23c60074 	biccs	r0, r6, #116	; 0x74
    27a0:	23ca0000 	biccs	r0, sl, #0
    27a4:	00020000 	andeq	r0, r2, r0
    27a8:	00000074 	andeq	r0, r0, r4, ror r0
    27ac:	00000000 	andeq	r0, r0, r0
    27b0:	23820000 	orrcs	r0, r2, #0
    27b4:	23990000 	orrscs	r0, r9, #0
    27b8:	00010000 	andeq	r0, r1, r0
    27bc:	00000052 	andeq	r0, r0, r2, asr r0
    27c0:	00000000 	andeq	r0, r0, r0
    27c4:	00235a00 	eoreq	r5, r3, r0, lsl #20
    27c8:	0023ba00 	eoreq	fp, r3, r0, lsl #20
    27cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    27d0:	000023c6 	andeq	r2, r0, r6, asr #7
    27d4:	000023ca 	andeq	r2, r0, sl, asr #7
    27d8:	00550001 	subseq	r0, r5, r1
    27dc:	00000000 	andeq	r0, r0, r0
    27e0:	9c000000 	stcls	0, cr0, [r0], {-0}
    27e4:	a2000020 	andge	r0, r0, #32
    27e8:	01000020 	tsteq	r0, r0, lsr #32
    27ec:	20a25000 	adccs	r5, r2, r0
    27f0:	20d40000 	sbcscs	r0, r4, r0
    27f4:	00010000 	andeq	r0, r1, r0
    27f8:	00000054 	andeq	r0, r0, r4, asr r0
    27fc:	00000000 	andeq	r0, r0, r0
    2800:	0020aa00 	eoreq	sl, r0, r0, lsl #20
    2804:	0020b400 	eoreq	fp, r0, r0, lsl #8
    2808:	52000100 	andpl	r0, r0, #0, 2
    280c:	000020ba 	strheq	r2, [r0], -sl
    2810:	000020c5 	andeq	r2, r0, r5, asr #1
    2814:	ca520001 	bgt	1482820 <__ccfg+0x1462878>
    2818:	cf000020 	svcgt	0x00000020
    281c:	01000020 	tsteq	r0, r0, lsr #32
    2820:	20d25200 	sbcscs	r5, r2, r0, lsl #4
    2824:	20e40000 	rsccs	r0, r4, r0
    2828:	00010000 	andeq	r0, r1, r0
    282c:	00000052 	andeq	r0, r0, r2, asr r0
    2830:	00000000 	andeq	r0, r0, r0
    2834:	0020b200 	eoreq	fp, r0, r0, lsl #4
    2838:	0020b400 	eoreq	fp, r0, r0, lsl #8
    283c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2848:	00002164 	andeq	r2, r0, r4, ror #2
    284c:	0000216e 	andeq	r2, r0, lr, ror #2
    2850:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    2854:	94000021 	strls	r0, [r0], #-33	; 0xffffffdf
    2858:	01000021 	tsteq	r0, r1, lsr #32
    285c:	00005400 	andeq	r5, r0, r0, lsl #8
strand (__outserial, const char*)
    2860:	00000000 	andeq	r0, r0, r0
    2864:	21640000 	cmncs	r4, r0
    2868:	216e0000 	cmncs	lr, r0
    286c:	00010000 	andeq	r0, r1, r0
endstrand
    2870:	00216e51 	eoreq	r6, r1, r1, asr lr
    2874:	00219400 	eoreq	r9, r1, r0, lsl #8
	ptr = data;
    2878:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		len = strlen (ptr);
    2884:	0000223e 	andeq	r2, r0, lr, lsr r2
    2888:	00002246 	andeq	r2, r0, r6, asr #4
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    288c:	00520001 	subseq	r0, r2, r1
    2890:	00000000 	andeq	r0, r0, r0
    2894:	12000000 	andne	r0, r0, #0
    2898:	3e000022 	cdpcc	0, 0, cr0, cr0, cr2, {1}
    289c:	01000022 	tsteq	r0, r2, lsr #32
	len -= quant;
    28a0:	22425300 	subcs	r5, r2, #0, 6
    28a4:	22460000 	subcs	r0, r6, #0
    28a8:	00010000 	andeq	r0, r1, r0
	if (len == 0) {
    28ac:	00000053 	andeq	r0, r0, r3, asr r0
		ufree (data);
    28b0:	00000000 	andeq	r0, r0, r0
		finish;
    28b4:	00221800 	eoreq	r1, r2, r0, lsl #16
    28b8:	00224600 	eoreq	r4, r2, r0, lsl #12
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28bc:	5e000100 	adfpls	f0, f0, f0
	...
    28c8:	0000221c 	andeq	r2, r0, ip, lsl r2
    28cc:	00002246 	andeq	r2, r0, r6, asr #4
strand (__inserial, address)
    28d0:	00570001 	subseq	r0, r7, r1
    28d4:	00000000 	andeq	r0, r0, r0
    28d8:	20000000 	andcs	r0, r0, r0
    28dc:	5c000022 	stcpl	0, cr0, [r0], {34}	; 0x22
    28e0:	01000022 	tsteq	r0, r2, lsr #32
	if (__inpline != NULL)
    28e4:	00005500 	andeq	r5, r0, r0, lsl #10
    28e8:	00000000 	andeq	r0, r0, r0
		finish;
    28ec:	22200000 	eorcs	r0, r0, #0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28f0:	22380000 	eorscs	r0, r8, #0
    28f4:	00010000 	andeq	r0, r1, r0
    28f8:	00223850 	eoreq	r3, r2, r0, asr r8
    28fc:	00224200 	eoreq	r4, r2, r0, lsl #4
		umwait (IM_INIT);
    2900:	73000200 	movwvc	r0, #512	; 0x200
		release;
    2904:	00224218 	eoreq	r4, r2, r8, lsl r2
	savedata (data);
    2908:	00224400 	eoreq	r4, r2, r0, lsl #8
	len = MAX_LINE_LENGTH;
    290c:	70000200 	andvc	r0, r0, r0, lsl #4
	io (IM_READ, __cport, READ, ptr, 1);
    2910:	00000018 	andeq	r0, r0, r8, lsl r0
    2914:	00000000 	andeq	r0, r0, r0
    2918:	00223e00 	eoreq	r3, r2, r0, lsl #28
    291c:	00225c00 	eoreq	r5, r2, r0, lsl #24
	if (ptr == (char*) data) { // new line
    2920:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			proceed (IM_BIN);
    292c:	00002814 	andeq	r2, r0, r4, lsl r8
    2930:	00002816 	andeq	r2, r0, r6, lsl r8
		if (*ptr < 0x20)
    2934:	00500001 	subseq	r0, r0, r1
    2938:	00000000 	andeq	r0, r0, r0
			proceed (IM_READ);
    293c:	10000000 	andne	r0, r0, r0
    2940:	12000028 	andne	r0, r0, #40	; 0x28
	if (*ptr == '\n' || *ptr == '\r') {
    2944:	01000028 	tsteq	r0, r8, lsr #32
    2948:	00005000 	andeq	r5, r0, r0
    294c:	00000000 	andeq	r0, r0, r0
		*ptr = '\0';
    2950:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
		__inpline = (char*)data;
    2954:	280a0000 	stmdacs	sl, {}	; <UNPREDICTABLE>
		finish;
    2958:	00010000 	andeq	r0, r1, r0
	if (len) {
    295c:	00000050 	andeq	r0, r0, r0, asr r0
		ptr++;
    2960:	00000000 	andeq	r0, r0, r0
    2964:	0027e400 	eoreq	lr, r7, r0, lsl #8
		len--;
    2968:	0027ee00 	eoreq	lr, r7, r0, lsl #28
	proceed (IM_READ);
    296c:	50000100 	andpl	r0, r0, r0, lsl #2
	io (IM_BIN, __cport, READ, ptr, 1);
    2970:	000027f0 	strdeq	r2, [r0], -r0
    2974:	000027fe 	strdeq	r2, [r0], -lr
    2978:	00500001 	subseq	r0, r0, r1
    297c:	00000000 	andeq	r0, r0, r0
    2980:	e4000000 	str	r0, [r0], #-0
	len -= 2;
    2984:	e6000027 	str	r0, [r0], -r7, lsr #32
	if (len > *ptr + 1) // 1 for 0x04
    2988:	01000027 	tsteq	r0, r7, lsr #32
    298c:	00005100 	andeq	r5, r0, r0, lsl #2
		len = *ptr + 1;
    2990:	00000000 	andeq	r0, r0, r0
    2994:	27e40000 	strbcs	r0, [r4, r0]!
	ptr++;
    2998:	27e80000 	strbcs	r0, [r8, r0]!
	quant = io (IM_BINL, __cport, READ, ptr, len);
    299c:	00010000 	andeq	r0, r1, r0
    29a0:	00000052 	andeq	r0, r0, r2, asr r0
    29a4:	00000000 	andeq	r0, r0, r0
    29a8:	0027e400 	eoreq	lr, r7, r0, lsl #8
    29ac:	0027fc00 	eoreq	pc, r7, r0, lsl #24
    29b0:	53000100 	movwpl	r0, #256	; 0x100
	...
		finish;
    29bc:	000027c0 	andeq	r2, r0, r0, asr #15
	ptr += quant;
    29c0:	000027cc 	andeq	r2, r0, ip, asr #15
    29c4:	cc500001 	mrrcgt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
endstrand
    29c8:	e4000027 	str	r0, [r0], #-39	; 0xffffffd9
    29cc:	01000027 	tsteq	r0, r7, lsr #32
	proceed (IM_BINL);
    29d0:	00005300 	andeq	r5, r0, r0, lsl #6
endstrand
    29d4:	00000000 	andeq	r0, r0, r0
    29d8:	28180000 	ldmdacs	r8, {}	; <UNPREDICTABLE>
    29dc:	28260000 	stmdacs	r6!, {}	; <UNPREDICTABLE>
    29e0:	00010000 	andeq	r0, r1, r0
    29e4:	00282650 	eoreq	r2, r8, r0, asr r6
    29e8:	00286000 	eoreq	r6, r8, r0
		if (res && (d < n))
    29ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    29f8:	00002818 	andeq	r2, r0, r8, lsl r8
			res [d] = (char) c;
    29fc:	00002829 	andeq	r2, r0, r9, lsr #16
		d++;
    2a00:	29510001 	ldmdbcs	r1, {r0}^
    2a04:	60000028 	andvs	r0, r0, r8, lsr #32
    2a08:	01000028 	tsteq	r0, r8, lsr #32
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a0c:	00005600 	andeq	r5, r0, r0, lsl #12
    2a10:	00000000 	andeq	r0, r0, r0
    2a14:	28180000 	ldmdacs	r8, {}	; <UNPREDICTABLE>
				enci (10000);
    2a18:	28290000 	stmdacs	r9!, {}	; <UNPREDICTABLE>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a1c:	00010000 	andeq	r0, r1, r0
    2a20:	00283852 	eoreq	r3, r8, r2, asr r8
	d = 0;
    2a24:	00283e00 	eoreq	r3, r8, r0, lsl #28
		c = *fm++;
    2a28:	52000100 	andpl	r0, r0, #0, 2
	...
			if ((c = *fm++) == '\0') {
    2a34:	00002860 	andeq	r2, r0, r0, ror #16
				outc ('\\');
    2a38:	00002877 	andeq	r2, r0, r7, ror r8
			if ((c = *fm++) == '\0') {
    2a3c:	78500001 	ldmdavc	r0, {r0}^
				outc ('\\');
    2a40:	84000028 	strhi	r0, [r0], #-40	; 0xffffffd8
    2a44:	01000028 	tsteq	r0, r8, lsr #32
			outc (c);
    2a48:	28bc5000 	ldmcs	ip!, {ip, lr}
    2a4c:	28d00000 	ldmcs	r0, {}^	; <UNPREDICTABLE>
			if (c == '\0')
    2a50:	00010000 	andeq	r0, r1, r0
    2a54:	00000050 	andeq	r0, r0, r0, asr r0
			outc (c);
    2a58:	00000000 	andeq	r0, r0, r0
				outc (val);
    2a5c:	00286800 	eoreq	r6, r8, r0, lsl #16
				val = (word) va_arg (ap, aword);
    2a60:	00287400 	eoreq	r7, r8, r0, lsl #8
		if (c == '%') {
    2a64:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2a68:	00002874 	andeq	r2, r0, r4, ror r8
			c = *fm++;
    2a6c:	00002877 	andeq	r2, r0, r7, ror r8
			switch (c) {
    2a70:	08730002 	ldmdaeq	r3!, {r1}^
    2a74:	00002878 	andeq	r2, r0, r8, ror r8
    2a78:	000028d0 	ldrdeq	r2, [r0], -r0
    2a7c:	00550001 	subseq	r0, r5, r1
    2a80:	00000000 	andeq	r0, r0, r0
    2a84:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    2a88:	b0000028 	andlt	r0, r0, r8, lsr #32
    2a8c:	01000028 	tsteq	r0, r8, lsr #32
				outc ('%');
    2a90:	00005000 	andeq	r5, r0, r0
    2a94:	00000000 	andeq	r0, r0, r0
				outc (c);
    2a98:	28d00000 	ldmcs	r0, {}^	; <UNPREDICTABLE>
    2a9c:	28ec0000 	stmiacs	ip!, {}^	; <UNPREDICTABLE>
    2aa0:	00010000 	andeq	r0, r1, r0
				if (c == '\0')
    2aa4:	0029d250 	eoreq	sp, r9, r0, asr r2
				return d;
    2aa8:	0029db00 	eoreq	sp, r9, r0, lsl #22
}
    2aac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (c) {
    2ab8:	000028d8 	ldrdeq	r2, [r0], -r8
    2abc:	000028fa 	strdeq	r2, [r0], -sl
				for (i = 12; ; i -= 4) {
    2ac0:	fa540001 	blx	1502acc <__ccfg+0x14e2b24>
				val = (word) va_arg (ap, aword);
    2ac4:	01000028 	tsteq	r0, r8, lsr #32
						[ (val >> i) & 0xf ]);
    2ac8:	01000029 	tsteq	r0, r9, lsr #32
    2acc:	29015000 	stmdbcs	r1, {ip, lr}
    2ad0:	29060000 	stmdbcs	r6, {}	; <UNPREDICTABLE>
					outc (__pi_hex_enc_table
    2ad4:	00010000 	andeq	r0, r1, r0
    2ad8:	00290654 	eoreq	r0, r9, r4, asr r6
					if (i == 0)
    2adc:	00291000 	eoreq	r1, r9, r0
    2ae0:	50000100 	andpl	r0, r0, r0, lsl #2
				for (i = 12; ; i -= 4) {
    2ae4:	00002910 	andeq	r2, r0, r0, lsl r9
				val = (word) va_arg (ap, aword);
    2ae8:	000029ce 	andeq	r2, r0, lr, asr #19
				if (c == 'd' && (val & 0x8000) != 0) {
    2aec:	d2540001 	subsle	r0, r4, #1
				val = (word) va_arg (ap, aword);
    2af0:	d8000029 	stmdale	r0, {r0, r3, r5}
				if (c == 'd' && (val & 0x8000) != 0) {
    2af4:	01000029 	tsteq	r0, r9, lsr #32
    2af8:	29d85400 	ldmibcs	r8, {sl, ip, lr}^
					outc ('-');
    2afc:	29db0000 	ldmibcs	fp, {}^	; <UNPREDICTABLE>
    2b00:	00020000 	andeq	r0, r2, r0
					val = (~val) + 1;
    2b04:	00000872 	andeq	r0, r0, r2, ror r8
    2b08:	00000000 	andeq	r0, r0, r0
				for (i = 12; ; i -= 4) {
    2b0c:	29b20000 	ldmibcs	r2!, {}	; <UNPREDICTABLE>
				enci (10000);
    2b10:	29b40000 	ldmibcs	r4!, {}	; <UNPREDICTABLE>
    2b14:	00010000 	andeq	r0, r1, r0
    2b18:	0029b450 	eoreq	fp, r9, r0, asr r4
    2b1c:	0029ce00 	eoreq	ip, r9, r0, lsl #28
    2b20:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2b2c:	00002c3c 	andeq	r2, r0, ip, lsr ip
    2b30:	00002c53 	andeq	r2, r0, r3, asr ip
    2b34:	53500001 	cmppl	r0, #1
    2b38:	5a00002c 	bpl	2bf0 <__pi_vfparse+0x1e4>
    2b3c:	0100002c 	tsteq	r0, ip, lsr #32
    2b40:	2c5a5400 	cfldrdcs	mvd5, [sl], {-0}
    2b44:	2c5c0000 	mracs	r0, ip, acc0
    2b48:	00010000 	andeq	r0, r1, r0
    2b4c:	002c5c50 	eoreq	r5, ip, r0, asr ip
    2b50:	002c6c00 	eoreq	r6, ip, r0, lsl #24
    2b54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
				if (c == 'd' || c == 'u') {
    2b58:	00002c6c 	andeq	r2, r0, ip, ror #24
    2b5c:	00002c7b 	andeq	r2, r0, fp, ror ip
					if (c == 'd' &&
    2b60:	7b500001 	blvc	1402b6c <__ccfg+0x13e2bc4>
					val = va_arg (ap, lword);
    2b64:	8c00002c 	stchi	0, cr0, [r0], {44}	; 0x2c
					fm++;
    2b68:	0100002c 	tsteq	r0, ip, lsr #32
					if (c == 'd' &&
    2b6c:	00005400 	andeq	r5, r0, r0, lsl #8
    2b70:	00000000 	andeq	r0, r0, r0
						outc ('-');
    2b74:	2c3c0000 	ldccs	0, cr0, [ip], #-0
    2b78:	2c500000 	mracs	r0, r0, acc0
						val = (~val) + 1;
    2b7c:	00010000 	andeq	r0, r1, r0
				enci (10000);
    2b80:	002c5051 	eoreq	r5, ip, r1, asr r0
					enci (1000000000UL);
    2b84:	002c5300 	eoreq	r5, ip, r0, lsl #6
    2b88:	52000100 	andpl	r0, r0, #0, 2
    2b8c:	00002c53 	andeq	r2, r0, r3, asr ip
    2b90:	00002c5a 	andeq	r2, r0, sl, asr ip
    2b94:	5a560001 	bpl	1582ba0 <__ccfg+0x1562bf8>
    2b98:	5f00002c 	svcpl	0x0000002c
    2b9c:	0100002c 	tsteq	r0, ip, lsr #32
    2ba0:	2c5f5100 	ldfcse	f5, [pc], {-0}
    2ba4:	2c8c0000 	stccs	0, cr0, [ip], {0}
    2ba8:	00010000 	andeq	r0, r1, r0
    2bac:	00000056 	andeq	r0, r0, r6, asr r0
    2bb0:	00000000 	andeq	r0, r0, r0
    2bb4:	002c3c00 	eoreq	r3, ip, r0, lsl #24
    2bb8:	002c4400 	eoreq	r4, ip, r0, lsl #8
    2bbc:	52000100 	andpl	r0, r0, #0, 2
    2bc0:	00002c48 	andeq	r2, r0, r8, asr #24
    2bc4:	00002c4c 	andeq	r2, r0, ip, asr #24
				} else if (c == 'x') {
    2bc8:	54520001 	ldrbpl	r0, [r2], #-1
					for (i = 28; ; i -= 4) {
    2bcc:	5a00002c 	bpl	2c84 <vform+0x48>
					val = va_arg (ap, lword);
    2bd0:	0100002c 	tsteq	r0, ip, lsr #32
							[ (val >> i) & 0xf ]);
    2bd4:	2c665700 	stclcs	7, cr5, [r6], #-0
    2bd8:	2c8c0000 	stccs	0, cr0, [ip], {0}
						outc (__pi_hex_enc_table
    2bdc:	00010000 	andeq	r0, r1, r0
    2be0:	00000057 	andeq	r0, r0, r7, asr r0
    2be4:	00000000 	andeq	r0, r0, r0
						if (i == 0)
    2be8:	002c6600 	eoreq	r6, ip, r0, lsl #12
    2bec:	002c8800 	eoreq	r8, ip, r0, lsl #16
					for (i = 28; ; i -= 4) {
    2bf0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
					outc ('%');
    2bf4:	00002c88 	andeq	r2, r0, r8, lsl #25
    2bf8:	00002c8c 	andeq	r2, r0, ip, lsl #25
    2bfc:	00580001 	subseq	r0, r8, r1
					outc ('l');
    2c00:	00000000 	andeq	r0, r0, r0
    2c04:	80000000 	andhi	r0, r0, r0
				val = (word) va_arg (ap, aword);
    2c08:	8400002c 	strhi	r0, [r0], #-44	; 0xffffffd4
				outc (val);
    2c0c:	0100002c 	tsteq	r0, ip, lsr #32
    2c10:	00005000 	andeq	r5, r0, r0
				while (*st != '\0') {
    2c14:	00000000 	andeq	r0, r0, r0
    2c18:	2a0c0000 	bcs	302c20 <__ccfg+0x2e2c78>
    2c1c:	2a260000 	bcs	982c24 <__ccfg+0x962c7c>
    2c20:	00010000 	andeq	r0, r1, r0
					outc (*st);
    2c24:	00000050 	andeq	r0, r0, r0, asr r0
    2c28:	00000000 	andeq	r0, r0, r0
					st++;
    2c2c:	002a0c00 	eoreq	r0, sl, r0, lsl #24
		c = *fm++;
    2c30:	002a2600 	eoreq	r2, sl, r0, lsl #12
    2c34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
char *vform (char *res, const char *fm, va_list aq) {
    2c40:	00002a0c 	andeq	r2, r0, ip, lsl #20
	if (res != NULL) {
    2c44:	00002a26 	andeq	r2, r0, r6, lsr #20
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c48:	36520001 	ldrbcc	r0, [r2], -r1
    2c4c:	6200002a 	andvs	r0, r0, #42	; 0x2a
    2c50:	0100002a 	tsteq	r0, sl, lsr #32
}
    2c54:	2a705500 	bcs	1c1805c <__ccfg+0x1bf80b4>
    2c58:	2c2e0000 	stccs	0, cr0, [lr], #-0
	fml = strlen (fm) + 17;
    2c5c:	00010000 	andeq	r0, r1, r0
    2c60:	00000055 	andeq	r0, r0, r5, asr r0
    2c64:	00000000 	andeq	r0, r0, r0
	if ((res = (char*) umalloc (fml)) == NULL)
    2c68:	002a0c00 	eoreq	r0, sl, r0, lsl #24
    2c6c:	002a1000 	eoreq	r1, sl, r0
    2c70:	53000100 	movwpl	r0, #256	; 0x100
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c74:	00002a12 	andeq	r2, r0, r2, lsl sl
    2c78:	00002a14 	andeq	r2, r0, r4, lsl sl
    2c7c:	93530003 	cmpls	r3, #3
    2c80:	002a1404 	eoreq	r1, sl, r4, lsl #8
		ufree (res);
    2c84:	002a5e00 	eoreq	r5, sl, r0, lsl #28
		goto Again;
    2c88:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
	if (buf == NULL || fmt == NULL)
    2c8c:	2a5e0493 	bcs	1783ee0 <__ccfg+0x1763f38>
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c90:	2ab20000 	bcs	fec82c98 <_estack+0xdec7dc98>
	if (buf == NULL || fmt == NULL)
    2c94:	00030000 	andeq	r0, r3, r0
    2c98:	b2049354 	andlt	r9, r4, #84, 6	; 0x50000001
    2c9c:	be00002a 	cdplt	0, 0, cr0, cr0, cr10, {1}
		    	    case 'u': scanu (lword); break;
    2ca0:	0300002a 	movweq	r0, #42	; 0x2a
			while (isspace (*buf)) buf++;
    2ca4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2ca8:	00002ac6 	andeq	r2, r0, r6, asr #21
	while (*fmt != '\0') {
    2cac:	00002ae8 	andeq	r2, r0, r8, ror #21
		if (*fmt++ != '%')
    2cb0:	93540003 	cmpls	r4, #3
		switch (*fmt++) {
    2cb4:	002aec04 	eoreq	lr, sl, r4, lsl #24
    2cb8:	002b6600 	eoreq	r6, fp, r0, lsl #12
    2cbc:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2cc0:	2b6c0493 	blcs	1b03f14 <__ccfg+0x1ae3f6c>
    2cc4:	2b800000 	blcs	fe002ccc <_estack+0xddffdccc>
    2cc8:	00030000 	andeq	r0, r3, r0
    2ccc:	c6049354 			; <UNDEFINED> instruction: 0xc6049354
}
    2cd0:	d200002b 	andle	r0, r0, #43	; 0x2b
		switch (*fmt++) {
    2cd4:	0300002b 	movweq	r0, #43	; 0x2b
    2cd8:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2cdc:	00002bf4 	strdeq	r2, [r0], -r4
    2ce0:	00002c06 	andeq	r2, r0, r6, lsl #24
			while (isspace (*buf)) buf++;
    2ce4:	93540003 	cmpls	r4, #3
    2ce8:	002c0a04 	eoreq	r0, ip, r4, lsl #20
    2cec:	002c1200 	eoreq	r1, ip, r0, lsl #4
    2cf0:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2cf4:	2c160493 	cfldrscs	mvf0, [r6], {147}	; 0x93
    2cf8:	2c3c0000 	ldccs	0, cr0, [ip], #-0
			if (*buf == '\0')
    2cfc:	00030000 	andeq	r0, r3, r0
			if (*buf != ',') {
    2d00:	00049354 	andeq	r9, r4, r4, asr r3
			sap = va_arg (ap, char*);
    2d04:	00000000 	andeq	r0, r0, r0
			nc++;
    2d08:	2a000000 	bcs	2d10 <vscan+0x84>
			if (*buf != ',') {
    2d0c:	3400002a 	strcc	r0, [r0], #-42	; 0xffffffd6
				while (!isspace (*buf) && *buf != ',' &&
    2d10:	0100002a 	tsteq	r0, sl, lsr #32
    2d14:	2a345900 	bcs	d1911c <__ccfg+0xcf9174>
    2d18:	2a360000 	bcs	d82d20 <__ccfg+0xd62d78>
    2d1c:	00020000 	andeq	r0, r2, r0
    2d20:	2a360072 	bcs	d82ef0 <__ccfg+0xd62f48>
    2d24:	2a5a0000 	bcs	1682d2c <__ccfg+0x1662d84>
    2d28:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    2d2c:	002a6259 	eoreq	r6, sl, r9, asr r2
    2d30:	002a7000 	eoreq	r7, sl, r0
    2d34:	59000100 	stmdbpl	r0, {r8}
    2d38:	00002a70 	andeq	r2, r0, r0, ror sl
    2d3c:	00002aa8 	andeq	r2, r0, r8, lsr #21
			if (*buf == ',') buf++;
    2d40:	b2580001 	subslt	r0, r8, #1
    2d44:	c200002a 	andgt	r0, r0, #42	; 0x2a
			*sap = '\0';
    2d48:	0100002a 	tsteq	r0, sl, lsr #32
			break;
    2d4c:	2ac25800 	bcs	ff098d54 <_estack+0xdf093d54>
		    case 'd': scani (word); break;
    2d50:	2aca0000 	bcs	ff282d58 <_estack+0xdf27dd58>
    2d54:	00020000 	andeq	r0, r2, r0
    2d58:	2ae80172 	bcs	ffa03328 <_estack+0xdf9fe328>
    2d5c:	2b120000 	blcs	482d64 <__ccfg+0x462dbc>
    2d60:	00010000 	andeq	r0, r1, r0
    2d64:	002b1658 	eoreq	r1, fp, r8, asr r6
    2d68:	002b1a00 	eoreq	r1, fp, r0, lsl #20
    2d6c:	50000100 	andpl	r0, r0, r0, lsl #2
    2d70:	00002b24 	andeq	r2, r0, r4, lsr #22
    2d74:	00002b2e 	andeq	r2, r0, lr, lsr #22
    2d78:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
    2d7c:	5000002b 	andpl	r0, r0, fp, lsr #32
    2d80:	0100002b 	tsteq	r0, fp, lsr #32
    2d84:	2b565000 	blcs	1596d8c <__ccfg+0x1576de4>
    2d88:	2b580000 	blcs	1602d90 <__ccfg+0x15e2de8>
    2d8c:	00010000 	andeq	r0, r1, r0
    2d90:	002b5858 	eoreq	r5, fp, r8, asr r8
    2d94:	002b7b00 	eoreq	r7, fp, r0, lsl #22
    2d98:	53000100 	movwpl	r0, #256	; 0x100
    2d9c:	00002b8a 	andeq	r2, r0, sl, lsl #23
    2da0:	00002b8e 	andeq	r2, r0, lr, lsl #23
    2da4:	98590001 	ldmdals	r9, {r0}^
    2da8:	b800002b 	stmdalt	r0, {r0, r1, r3, r5}
    2dac:	0100002b 	tsteq	r0, fp, lsr #32
    2db0:	2bbe5900 	blcs	fef991b8 <_estack+0xdef941b8>
    2db4:	2bc00000 	blcs	ff002dbc <_estack+0xdeffddbc>
    2db8:	00010000 	andeq	r0, r1, r0
    2dbc:	002bc659 	eoreq	ip, fp, r9, asr r6
		    case 'u': scanu (word); break;
    2dc0:	002bd400 	eoreq	sp, fp, r0, lsl #8
    2dc4:	53000100 	movwpl	r0, #256	; 0x100
    2dc8:	00002bf4 	strdeq	r2, [r0], -r4
    2dcc:	00002bfd 	strdeq	r2, [r0], -sp
    2dd0:	06530001 	ldrbeq	r0, [r3], -r1
    2dd4:	1a00002c 	bne	2e8c <vscan+0x200>
    2dd8:	0100002c 	tsteq	r0, ip, lsr #32
    2ddc:	2c2e5800 	stccs	8, cr5, [lr], #-0
    2de0:	2c3c0000 	ldccs	0, cr0, [ip], #-0
    2de4:	00010000 	andeq	r0, r1, r0
    2de8:	00000059 	andeq	r0, r0, r9, asr r0
    2dec:	00000000 	andeq	r0, r0, r0
    2df0:	002aca00 	eoreq	ip, sl, r0, lsl #20
    2df4:	002ae800 	eoreq	lr, sl, r0, lsl #16
    2df8:	58000100 	stmdapl	r0, {r8}
	...
    2e04:	00002af4 	strdeq	r2, [r0], -r4
		    case 'x': scanx (word); break;
    2e08:	00002b08 	andeq	r2, r0, r8, lsl #22
    2e0c:	0c590001 	mrrceq	0, 0, r0, r9, cr1
    2e10:	3a00002b 	bcc	2ec4 <vscan+0x238>
    2e14:	0100002b 	tsteq	r0, fp, lsr #32
    2e18:	2b425900 	blcs	1099220 <__ccfg+0x1079278>
    2e1c:	2b560000 	blcs	1582e24 <__ccfg+0x1562e7c>
    2e20:	00010000 	andeq	r0, r1, r0
    2e24:	00000059 	andeq	r0, r0, r9, asr r0
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	002b1200 	eoreq	r1, fp, r0, lsl #4
    2e30:	002b4400 	eoreq	r4, fp, r0, lsl #8
    2e34:	58000100 	stmdapl	r0, {r8}
    2e38:	00002b44 	andeq	r2, r0, r4, asr #22
    2e3c:	00002b50 	andeq	r2, r0, r0, asr fp
    2e40:	50530001 	subspl	r0, r3, r1
    2e44:	5600002b 	strpl	r0, [r0], -fp, lsr #32
    2e48:	0100002b 	tsteq	r0, fp, lsr #32
    2e4c:	00005800 	andeq	r5, r0, r0, lsl #16
    2e50:	00000000 	andeq	r0, r0, r0
    2e54:	2b800000 	blcs	fe002e5c <_estack+0xddffde5c>
    2e58:	2bc60000 	blcs	ff182e60 <_estack+0xdf17de60>
    2e5c:	00010000 	andeq	r0, r1, r0
    2e60:	0000005a 	andeq	r0, r0, sl, asr r0
    2e64:	00000000 	andeq	r0, r0, r0
    2e68:	002b8600 	eoreq	r8, fp, r0, lsl #12
    2e6c:	002bb000 	eoreq	fp, fp, r0
    2e70:	58000100 	stmdapl	r0, {r8}
    2e74:	00002bb0 			; <UNDEFINED> instruction: 0x00002bb0
    2e78:	00002bc0 	andeq	r2, r0, r0, asr #23
    2e7c:	c0530001 	subsgt	r0, r3, r1
			switch (*fmt++) {
    2e80:	c600002b 	strgt	r0, [r0], -fp, lsr #32
    2e84:	0100002b 	tsteq	r0, fp, lsr #32
    2e88:	00005800 	andeq	r5, r0, r0, lsl #16
    2e8c:	00000000 	andeq	r0, r0, r0
    2e90:	2bd40000 	blcs	ff502e98 <_estack+0xdf4fde98>
    2e94:	2bf40000 	blcs	ffd02e9c <_estack+0xdfcfde9c>
		    	    case 'd': scani (lword); break;
    2e98:	00010000 	andeq	r0, r1, r0
    2e9c:	00000058 	andeq	r0, r0, r8, asr r0
    2ea0:	00000000 	andeq	r0, r0, r0
    2ea4:	002c0600 	eoreq	r0, ip, r0, lsl #12
    2ea8:	002c0a00 	eoreq	r0, ip, r0, lsl #20
    2eac:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2eb0:	002c0a00 	eoreq	r0, ip, r0, lsl #20
    2eb4:	002c1200 	eoreq	r1, ip, r0, lsl #4
    2eb8:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2ebc:	0000007c 	andeq	r0, r0, ip, ror r0
    2ec0:	00000000 	andeq	r0, r0, r0
    2ec4:	002c1e00 	eoreq	r1, ip, r0, lsl #28
    2ec8:	002c2c00 	eoreq	r2, ip, r0, lsl #24
    2ecc:	58000100 	stmdapl	r0, {r8}
	...
    2ed8:	00002c8c 	andeq	r2, r0, ip, lsl #25
    2edc:	00002ca8 	andeq	r2, r0, r8, lsr #25
    2ee0:	e6500001 	ldrb	r0, [r0], -r1
    2ee4:	f800002c 			; <UNDEFINED> instruction: 0xf800002c
    2ee8:	0100002c 	tsteq	r0, ip, lsr #32
    2eec:	2cf85300 	ldclcs	3, cr5, [r8]
    2ef0:	2d0c0000 	stccs	0, cr0, [ip, #-0]
		    	    case 'x': scanx (lword); break;
    2ef4:	00010000 	andeq	r0, r1, r0
    2ef8:	002d0e56 	eoreq	r0, sp, r6, asr lr
    2efc:	002d2a00 	eoreq	r2, sp, r0, lsl #20
    2f00:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2f04:	00002d3c 	andeq	r2, r0, ip, lsr sp
    2f08:	00002d48 	andeq	r2, r0, r8, asr #26
    2f0c:	48560001 	ldmdami	r6, {r0}^
    2f10:	4e00002d 	cdpmi	0, 0, cr0, cr0, cr13, {1}
    2f14:	0100002d 	tsteq	r0, sp, lsr #32
    2f18:	2d545300 	ldclcs	3, cr5, [r4, #-0]
    2f1c:	2d580000 	ldclcs	0, cr0, [r8, #-0]
    2f20:	00010000 	andeq	r0, r1, r0
    2f24:	002d5853 	eoreq	r5, sp, r3, asr r8
    2f28:	002d6800 	eoreq	r6, sp, r0, lsl #16
    2f2c:	5e000100 	adfpls	f0, f0, f0
    2f30:	00002d68 	andeq	r2, r0, r8, ror #26
    2f34:	00002d7e 	andeq	r2, r0, lr, ror sp
    2f38:	7e530001 	cdpvc	0, 5, cr0, cr3, cr1, {0}
    2f3c:	8600002d 	strhi	r0, [r0], -sp, lsr #32
    2f40:	0100002d 	tsteq	r0, sp, lsr #32
    2f44:	2d8c5e00 	stccs	14, cr5, [ip]
    2f48:	2da80000 	stccs	0, cr0, [r8]
    2f4c:	00010000 	andeq	r0, r1, r0
    2f50:	002da853 	eoreq	sl, sp, r3, asr r8
    2f54:	002dae00 	eoreq	sl, sp, r0, lsl #28
    2f58:	5e000100 	adfpls	f0, f0, f0
    2f5c:	00002dae 	andeq	r2, r0, lr, lsr #27
    2f60:	00002db0 			; <UNDEFINED> instruction: 0x00002db0
		    	    case 'd': scani (lword); break;
    2f64:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    2f68:	be00002d 	cdplt	0, 0, cr0, cr0, cr13, {1}
    2f6c:	0100002d 	tsteq	r0, sp, lsr #32
    2f70:	2dbe5e00 	ldccs	14, cr5, [lr]
    2f74:	2dd20000 	ldclcs	0, cr0, [r2]
    2f78:	00010000 	andeq	r0, r1, r0
    2f7c:	002dd253 	eoreq	sp, sp, r3, asr r2
		    	    case 'u': scanu (lword); break;
    2f80:	002de200 	eoreq	lr, sp, r0, lsl #4
    2f84:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2f88:	00002de2 	andeq	r2, r0, r2, ror #27
    2f8c:	00002df6 	strdeq	r2, [r0], -r6
    2f90:	04530001 	ldrbeq	r0, [r3], #-1
    2f94:	0600002e 	streq	r0, [r0], -lr, lsr #32
    2f98:	0100002e 	tsteq	r0, lr, lsr #32
    2f9c:	2e065600 	cfmadd32cs	mvax0, mvfx5, mvfx6, mvfx0
    2fa0:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    2fa4:	00010000 	andeq	r0, r1, r0
    2fa8:	002e1e53 	eoreq	r1, lr, r3, asr lr
    2fac:	002e3800 	eoreq	r3, lr, r0, lsl #16
    2fb0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2fb4:	00002e3e 	andeq	r2, r0, lr, lsr lr
    2fb8:	00002e60 	andeq	r2, r0, r0, ror #28
    2fbc:	60530001 	subsvs	r0, r3, r1
    2fc0:	7200002e 	andvc	r0, r0, #46	; 0x2e
    2fc4:	0100002e 	tsteq	r0, lr, lsr #32
		    	    case 'x': scanx (lword); break;
    2fc8:	2e985600 	cdpcs	6, 9, cr5, cr8, cr0, {0}
    2fcc:	2e9c0000 	cdpcs	0, 9, cr0, cr12, cr0, {0}
			if ((c = *buf++) == '\0')
    2fd0:	00010000 	andeq	r0, r1, r0
    2fd4:	002e9c53 	eoreq	r9, lr, r3, asr ip
			sap = va_arg (ap, char*);
    2fd8:	002eac00 	eoreq	sl, lr, r0, lsl #24
			nc++;
    2fdc:	58000100 	stmdapl	r0, {r8}
			break;
    2fe0:	00002eac 	andeq	r2, r0, ip, lsr #29
			while (isspace (*buf)) buf++;
    2fe4:	00002ebc 			; <UNDEFINED> instruction: 0x00002ebc
    2fe8:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    2fec:	c600002e 	strgt	r0, [r0], -lr, lsr #32
						*sap++ = *buf++;
    2ff0:	0100002e 	tsteq	r0, lr, lsr #32
    2ff4:	2ecc5800 	cdpcs	8, 12, cr5, cr12, cr0, {0}
			while (isspace (*buf)) buf++;
    2ff8:	2eee0000 	cdpcs	0, 14, cr0, cr14, cr0, {0}
    2ffc:	00010000 	andeq	r0, r1, r0
    3000:	002ef453 	eoreq	pc, lr, r3, asr r4	; <UNPREDICTABLE>
		return 0;
    3004:	002f0400 	eoreq	r0, pc, r0, lsl #8
    3008:	53000100 	movwpl	r0, #256	; 0x100
		    case 'x': scanx (word); break;
    300c:	00002f04 	andeq	r2, r0, r4, lsl #30
    3010:	00002f1e 	andeq	r2, r0, lr, lsl pc
		    	    case 'x': scanx (lword); break;
    3014:	24560001 	ldrbcs	r0, [r6], #-1
    3018:	4400002f 	strmi	r0, [r0], #-47	; 0xffffffd1
    301c:	0100002f 	tsteq	r0, pc, lsr #32
    3020:	2f445300 	svccs	0x00445300
    3024:	2f560000 	svccs	0x00560000
    3028:	00010000 	andeq	r0, r1, r0
    302c:	002f6a56 	eoreq	r6, pc, r6, asr sl	; <UNPREDICTABLE>
    3030:	002f6e00 	eoreq	r6, pc, r0, lsl #28
    3034:	58000100 	stmdapl	r0, {r8}
    3038:	00002f6e 	andeq	r2, r0, lr, ror #30
    303c:	00002f72 	andeq	r2, r0, r2, ror pc
    3040:	7c530001 	mrrcvc	0, 0, r0, r3, cr1
    3044:	7e00002f 	cdpvc	0, 0, cr0, cr0, cr15, {1}
    3048:	0100002f 	tsteq	r0, pc, lsr #32
    304c:	2f7e5800 	svccs	0x007e5800
    3050:	2f940000 	svccs	0x00940000
    3054:	00010000 	andeq	r0, r1, r0
    3058:	002f9453 	eoreq	r9, pc, r3, asr r4	; <UNPREDICTABLE>
    305c:	002fa400 	eoreq	sl, pc, r0, lsl #8
    3060:	56000100 	strpl	r0, [r0], -r0, lsl #2
    3064:	00002fa4 	andeq	r2, r0, r4, lsr #31
    3068:	00002fba 			; <UNDEFINED> instruction: 0x00002fba
    306c:	c4530001 	ldrbgt	r0, [r3], #-1
    3070:	c600002f 	strgt	r0, [r0], -pc, lsr #32
    3074:	0100002f 	tsteq	r0, pc, lsr #32
    3078:	2fc65600 	svccs	0x00c65600
    307c:	2fce0000 	svccs	0x00ce0000
    3080:	00010000 	andeq	r0, r1, r0
    3084:	002fd253 	eoreq	sp, pc, r3, asr r2	; <UNPREDICTABLE>
    3088:	002fe200 	eoreq	lr, pc, r0, lsl #4
    308c:	53000100 	movwpl	r0, #256	; 0x100
    3090:	00002fe2 	andeq	r2, r0, r2, ror #31
    3094:	00002ff0 	strdeq	r2, [r0], -r0
    3098:	f0560001 			; <UNDEFINED> instruction: 0xf0560001
    309c:	f600002f 			; <UNDEFINED> instruction: 0xf600002f
    30a0:	0100002f 	tsteq	r0, pc, lsr #32
    30a4:	2ff65800 	svccs	0x00f65800
    30a8:	30020000 	andcc	r0, r2, r0
    30ac:	00010000 	andeq	r0, r1, r0
    30b0:	00300256 	eorseq	r0, r0, r6, asr r2
    30b4:	00300a00 	eorseq	r0, r0, r0, lsl #20
    30b8:	50000100 	andpl	r0, r0, r0, lsl #2
    30bc:	0000300a 	andeq	r3, r0, sl
    30c0:	0000301c 	andeq	r3, r0, ip, lsl r0
    30c4:	00530001 	subseq	r0, r3, r1
    30c8:	00000000 	andeq	r0, r0, r0
    30cc:	8c000000 	stchi	0, cr0, [r0], {-0}
    30d0:	aa00002c 	bge	3188 <NOROM_OSCHF_AttemptToSwitchToXosc+0x2c>
    30d4:	0100002c 	tsteq	r0, ip, lsr #32
    30d8:	2caa5100 	stfcss	f5, [sl]
    30dc:	2cb00000 	ldccs	0, cr0, [r0]
    30e0:	00010000 	andeq	r0, r1, r0
    30e4:	002cb056 	eoreq	fp, ip, r6, asr r0
    30e8:	002cce00 	eoreq	ip, ip, r0, lsl #28
    30ec:	51000100 	mrspl	r0, (UNDEF: 16)
    30f0:	00002cd4 	ldrdeq	r2, [r0], -r4
    30f4:	0000301c 	andeq	r3, r0, ip, lsl r0
    30f8:	00510001 	subseq	r0, r1, r1
    30fc:	00000000 	andeq	r0, r0, r0
    3100:	8c000000 	stchi	0, cr0, [r0], {-0}
    3104:	8c00002c 	stchi	0, cr0, [r0], {44}	; 0x2c
    3108:	0100002c 	tsteq	r0, ip, lsr #32
    310c:	2c8c5200 	sfmcs	f5, 4, [ip], {0}
    3110:	2ca80000 	stccs	0, cr0, [r8]
    3114:	00030000 	andeq	r0, r3, r0
    3118:	4e049352 	mcrmi	3, 0, r9, cr4, cr2, {2}
    311c:	8200002d 	andhi	r0, r0, #45	; 0x2d
    3120:	0100002d 	tsteq	r0, sp, lsr #32
    3124:	2da85200 	sfmcs	f5, 4, [r8]
    3128:	2dae0000 	stccs	0, cr0, [lr]
    312c:	00010000 	andeq	r0, r1, r0
    3130:	002dbe52 	eoreq	fp, sp, r2, asr lr
    3134:	002dd800 	eoreq	sp, sp, r0, lsl #16
    3138:	52000100 	andpl	r0, r0, #0, 2
    313c:	00002e06 	andeq	r2, r0, r6, lsl #28
    3140:	00002e2e 	andeq	r2, r0, lr, lsr #28
    3144:	80520001 	subshi	r0, r2, r1
    3148:	c000002e 	andgt	r0, r0, lr, lsr #32
    314c:	0100002e 	tsteq	r0, lr, lsr #32
    3150:	2eee5200 	cdpcs	2, 14, cr5, cr14, cr0, {0}
    3154:	2f140000 	svccs	0x00140000
    3158:	00010000 	andeq	r0, r1, r0
    315c:	002f6452 	eoreq	r6, pc, r2, asr r4	; <UNPREDICTABLE>
    3160:	002f6e00 	eoreq	r6, pc, r0, lsl #28
    3164:	52000100 	andpl	r0, r0, #0, 2
    3168:	00002f7e 	andeq	r2, r0, lr, ror pc
    316c:	00002f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    3170:	c6520001 	ldrbgt	r0, [r2], -r1
    3174:	dc00002f 	stcle	0, cr0, [r0], {47}	; 0x2f
    3178:	0100002f 	tsteq	r0, pc, lsr #32
    317c:	2fe25200 	svccs	0x00e25200
    3180:	2ff00000 	svccs	0x00f00000	; IMB
    3184:	00010000 	andeq	r0, r1, r0
    3188:	00300252 	eorseq	r0, r0, r2, asr r2
    318c:	00300a00 	eorseq	r0, r0, r0, lsl #20
    3190:	52000100 	andpl	r0, r0, #0, 2
	...
    319c:	00002d0a 	andeq	r2, r0, sl, lsl #26
    31a0:	00002d0c 	andeq	r2, r0, ip, lsl #26
    31a4:	84540001 	ldrbhi	r0, [r4], #-1
    31a8:	a800002d 	stmdage	r0, {r0, r2, r3, r5}
    31ac:	0100002d 	tsteq	r0, sp, lsr #32
    31b0:	2dae5400 	cfstrscs	mvf5, [lr]
    31b4:	2dbe0000 	ldccs	0, cr0, [lr]
    31b8:	00010000 	andeq	r0, r1, r0
    31bc:	002dda54 	eoreq	sp, sp, r4, asr sl
    31c0:	002e0600 	eoreq	r0, lr, r0, lsl #12
    31c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    31c8:	00002e30 	andeq	r2, r0, r0, lsr lr
    31cc:	00002e80 	andeq	r2, r0, r0, lsl #29
    31d0:	c2540001 	subsgt	r0, r4, #1
    31d4:	ee00002e 	cdp	0, 0, cr0, cr0, cr14, {1}
    31d8:	0100002e 	tsteq	r0, lr, lsr #32
    31dc:	2f165400 	svccs	0x00165400
    31e0:	2f640000 	svccs	0x00640000
    31e4:	00010000 	andeq	r0, r1, r0
    31e8:	002f6e54 	eoreq	r6, pc, r4, asr lr	; <UNPREDICTABLE>
    31ec:	002f7e00 	eoreq	r7, pc, r0, lsl #28
    31f0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    31f4:	00002f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
    31f8:	00002fc6 	andeq	r2, r0, r6, asr #31
    31fc:	de540001 	cdple	0, 5, cr0, cr4, cr1, {0}
    3200:	e200002f 	and	r0, r0, #47	; 0x2f
    3204:	0100002f 	tsteq	r0, pc, lsr #32
    3208:	300a5400 	andcc	r5, sl, r0, lsl #8
    320c:	301c0000 	andscc	r0, ip, r0
    3210:	00010000 	andeq	r0, r1, r0
    3214:	00000054 	andeq	r0, r0, r4, asr r0
    3218:	00000000 	andeq	r0, r0, r0
    321c:	002d7e00 	eoreq	r7, sp, r0, lsl #28
    3220:	002da800 	eoreq	sl, sp, r0, lsl #16
    3224:	58000100 	stmdapl	r0, {r8}
    3228:	00002dae 	andeq	r2, r0, lr, lsr #27
    322c:	00002dbe 			; <UNDEFINED> instruction: 0x00002dbe
    3230:	00580001 	subseq	r0, r8, r1
    3234:	00000000 	andeq	r0, r0, r0
    3238:	60000000 	andvs	r0, r0, r0
    323c:	7200002e 	andvc	r0, r0, #46	; 0x2e
    3240:	0100002e 	tsteq	r0, lr, lsr #32
    3244:	2e725900 	vaddcs.f16	s11, s4, s0	; <UNPREDICTABLE>
    3248:	2e7a0000 	cdpcs	0, 7, cr0, cr10, cr0, {0}
    324c:	00010000 	andeq	r0, r1, r0
    3250:	00000050 	andeq	r0, r0, r0, asr r0
    3254:	00000000 	andeq	r0, r0, r0
    3258:	002ebc00 	eoreq	fp, lr, r0, lsl #24
    325c:	002ee600 	eoreq	lr, lr, r0, lsl #12
    3260:	50000100 	andpl	r0, r0, r0, lsl #2
    3264:	00002f6e 	andeq	r2, r0, lr, ror #30
    3268:	00002f7e 	andeq	r2, r0, lr, ror pc
    326c:	00500001 	subseq	r0, r0, r1
    3270:	00000000 	andeq	r0, r0, r0
    3274:	44000000 	strmi	r0, [r0], #-0
    3278:	5600002f 	strpl	r0, [r0], -pc, lsr #32
    327c:	0100002f 	tsteq	r0, pc, lsr #32
    3280:	2f565900 	svccs	0x00565900
    3284:	2f5e0000 	svccs	0x005e0000
    3288:	00010000 	andeq	r0, r1, r0
    328c:	00000050 	andeq	r0, r0, r0, asr r0
    3290:	00000000 	andeq	r0, r0, r0
    3294:	002fd200 	eoreq	sp, pc, r0, lsl #4
    3298:	002fe200 	eoreq	lr, pc, r0, lsl #4
    329c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    32a8:	00002d0e 	andeq	r2, r0, lr, lsl #26
    32ac:	00002d2a 	andeq	r2, r0, sl, lsr #26
    32b0:	f45e0001 			; <UNDEFINED> instruction: 0xf45e0001
    32b4:	f600002f 			; <UNDEFINED> instruction: 0xf600002f
    32b8:	0100002f 	tsteq	r0, pc, lsr #32
    32bc:	00005e00 	andeq	r5, r0, r0, lsl #28
    32c0:	00000000 	andeq	r0, r0, r0
    32c4:	301c0000 	andscc	r0, ip, r0
    32c8:	30230000 	eorcc	r0, r3, r0
    32cc:	00010000 	andeq	r0, r1, r0
    32d0:	00302350 	eorseq	r2, r0, r0, asr r3
    32d4:	00303a00 	eorseq	r3, r0, r0, lsl #20
    32d8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    32dc:	0000303a 	andeq	r3, r0, sl, lsr r0
    32e0:	0000303e 	andeq	r3, r0, lr, lsr r0
    32e4:	01f30004 	mvnseq	r0, r4
    32e8:	303e9f50 	eorscc	r9, lr, r0, asr pc
    32ec:	30400000 	subcc	r0, r0, r0
    32f0:	00010000 	andeq	r0, r1, r0
    32f4:	00304056 	eorseq	r4, r0, r6, asr r0
    32f8:	00304400 	eorseq	r4, r0, r0, lsl #8
    32fc:	f3000400 	vshl.u8	d0, d0, d0
    3300:	009f5001 	addseq	r5, pc, r1
    3304:	00000000 	andeq	r0, r0, r0
    3308:	26000000 	strcs	r0, [r0], -r0
    330c:	2f000030 	svccs	0x00000030
    3310:	05000030 	streq	r0, [r0, #-48]	; 0xffffffd0
    3314:	30007000 	andcc	r7, r0, r0
    3318:	302f9f29 	eorcc	r9, pc, r9, lsr #30
    331c:	303a0000 	eorscc	r0, sl, r0
    3320:	00050000 	andeq	r0, r5, r0
    3324:	29300075 	ldmdbcs	r0!, {r0, r2, r4, r5, r6}
    3328:	00303e9f 	mlaseq	r0, pc, lr, r3	; <UNPREDICTABLE>
    332c:	00304000 	eorseq	r4, r0, r0
    3330:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    3334:	9f293000 	svcls	0x00293000
	...
    3348:	00500001 	subseq	r0, r0, r1
    334c:	00000000 	andeq	r0, r0, r0
    3350:	01000000 	mrseq	r0, (UNDEF: 0)
    3354:	00005600 	andeq	r5, r0, r0, lsl #12
    3358:	00000000 	andeq	r0, r0, r0
    335c:	00040000 	andeq	r0, r4, r0
    3360:	9f5001f3 	svcls	0x005001f3
	...
    336c:	00560001 	subseq	r0, r6, r1
    3370:	00000000 	andeq	r0, r0, r0
    3374:	04000000 	streq	r0, [r0], #-0
    3378:	5001f300 	andpl	pc, r1, r0, lsl #6
    337c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    338c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3398:	01f30004 	mvnseq	r0, r4
    339c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    33ac:	00050000 	andeq	r0, r5, r0
    33b0:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    33b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	75000500 	strvc	r0, [r0, #-1280]	; 0xfffffb00
    33c0:	9f293000 	svcls	0x00293000
	...
    33cc:	00750005 	rsbseq	r0, r5, r5
    33d0:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
    33d4:	00000000 	andeq	r0, r0, r0
    33d8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    33dc:	5a000030 	bpl	34a4 <NOROM_RFCRTrim+0xf0>
    33e0:	07000030 	smladxeq	r0, r0, r0, r0
    33e4:	3f007000 	svccc	0x00007000
    33e8:	9f263f24 	svcls	0x00263f24
	...
    33f4:	00003050 	andeq	r3, r0, r0, asr r0
    33f8:	00003058 	andeq	r3, r0, r8, asr r0
    33fc:	8072000d 	rsbshi	r0, r2, sp
    3400:	4800717a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    3404:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3408:	589f2634 	ldmpl	pc, {r2, r4, r5, r9, sl, sp}	; <UNPREDICTABLE>
    340c:	74000030 	strvc	r0, [r0], #-48	; 0xffffffd0
    3410:	0c000030 	stceq	0, cr0, [r0], {48}	; 0x30
    3414:	48007100 	stmdami	r0, {r8, ip, sp, lr}
    3418:	72264824 	eorvc	r4, r6, #36, 16	; 0x240000
    341c:	26341e00 	ldrtcs	r1, [r4], -r0, lsl #28
    3420:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3424:	00000000 	andeq	r0, r0, r0
    3428:	00307a00 	eorseq	r7, r0, r0, lsl #20
    342c:	00308400 	eorseq	r8, r0, r0, lsl #8
    3430:	53000100 	movwpl	r0, #256	; 0x100
	...
    343c:	0000307c 	andeq	r3, r0, ip, ror r0
    3440:	00003088 	andeq	r3, r0, r8, lsl #1
    3444:	00500001 	subseq	r0, r0, r1
    3448:	00000000 	andeq	r0, r0, r0
    344c:	bc000000 	stclt	0, cr0, [r0], {-0}
    3450:	d4000030 	strle	r0, [r0], #-48	; 0xffffffd0
    3454:	01000030 	tsteq	r0, r0, lsr r0
    3458:	30d45000 	sbcscc	r5, r4, r0
    345c:	310e0000 	mrscc	r0, (UNDEF: 14)
    3460:	00010000 	andeq	r0, r1, r0
    3464:	00310e55 	eorseq	r0, r1, r5, asr lr
    3468:	00311800 	eorseq	r1, r1, r0, lsl #16
    346c:	f3000400 	vshl.u8	d0, d0, d0
    3470:	009f5001 	addseq	r5, pc, r1
    3474:	00000000 	andeq	r0, r0, r0
    3478:	bc000000 	stclt	0, cr0, [r0], {-0}
    347c:	c2000030 	andgt	r0, r0, #48	; 0x30
    3480:	01000030 	tsteq	r0, r0, lsr r0
    3484:	30c25100 	sbccc	r5, r2, r0, lsl #2
    3488:	30fa0000 	rscscc	r0, sl, r0
    348c:	00010000 	andeq	r0, r1, r0
    3490:	0030fa54 	eorseq	pc, r0, r4, asr sl	; <UNPREDICTABLE>
    3494:	00311800 	eorseq	r1, r1, r0, lsl #16
    3498:	f3000400 	vshl.u8	d0, d0, d0
    349c:	009f5101 	addseq	r5, pc, r1, lsl #2
    34a0:	00000000 	andeq	r0, r0, r0
    34a4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    34a8:	0a000030 	beq	3570 <TrimAfterColdResetWakeupFromShutDown+0x68>
    34ac:	01000031 	tsteq	r0, r1, lsr r0
    34b0:	00005500 	andeq	r5, r0, r0, lsl #10
    34b4:	00000000 	andeq	r0, r0, r0
    34b8:	30f60000 	rscscc	r0, r6, r0
    34bc:	30fa0000 	rscscc	r0, sl, r0
    34c0:	00010000 	andeq	r0, r1, r0
    34c4:	0030fa54 	eorseq	pc, r0, r4, asr sl	; <UNPREDICTABLE>
    34c8:	00310a00 	eorseq	r0, r1, r0, lsl #20
    34cc:	f3000400 	vshl.u8	d0, d0, d0
    34d0:	009f5101 	addseq	r5, pc, r1, lsl #2
    34d4:	00000000 	andeq	r0, r0, r0
    34d8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    34dc:	36000031 			; <UNDEFINED> instruction: 0x36000031
    34e0:	01000031 	tsteq	r0, r1, lsr r0
    34e4:	31365000 	teqcc	r6, r0
    34e8:	31440000 	mrscc	r0, (UNDEF: 68)
    34ec:	00040000 	andeq	r0, r4, r0
    34f0:	9f5001f3 	svcls	0x005001f3
	...
    3504:	00500001 	subseq	r0, r0, r1
    3508:	00000000 	andeq	r0, r0, r0
    350c:	01000000 	mrseq	r0, (UNDEF: 0)
    3510:	00005600 	andeq	r5, r0, r0, lsl #12
    3514:	00000000 	andeq	r0, r0, r0
    3518:	00040000 	andeq	r0, r4, r0
    351c:	9f5001f3 	svcls	0x005001f3
	...
    3530:	00550001 	subseq	r0, r5, r1
	...
    3540:	07000000 	streq	r0, [r0, -r0]
    3544:	73007000 	movwvc	r7, #0
    3548:	9f191c00 	svcls	0x00191c00
	...
    3554:	00700004 	rsbseq	r0, r0, r4
    3558:	00009f19 	andeq	r9, r0, r9, lsl pc
	...
    3568:	00040000 	andeq	r0, r4, r0
    356c:	9f07d00a 	svcls	0x0007d00a
	...
    3578:	00500001 	subseq	r0, r0, r1
    357c:	00000000 	andeq	r0, r0, r0
    3580:	05000000 	streq	r0, [r0, #-0]
    3584:	40007200 	andmi	r7, r0, r0, lsl #4
    3588:	00009f25 	andeq	r9, r0, r5, lsr #30
    358c:	00000000 	andeq	r0, r0, r0
    3590:	00010000 	andeq	r0, r1, r0
    3594:	00000050 	andeq	r0, r0, r0, asr r0
    3598:	00000000 	andeq	r0, r0, r0
    359c:	0a000400 	beq	45a4 <patable+0xa>
    35a0:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    35a4:	00000000 	andeq	r0, r0, r0
    35a8:	01000000 	mrseq	r0, (UNDEF: 0)
    35ac:	00005000 	andeq	r5, r0, r0
    35b0:	00000000 	andeq	r0, r0, r0
    35b4:	31960000 	orrscc	r0, r6, r0
    35b8:	31a20000 			; <UNDEFINED> instruction: 0x31a20000
    35bc:	00010000 	andeq	r0, r1, r0
    35c0:	00000050 	andeq	r0, r0, r0, asr r0
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	00319600 	eorseq	r9, r1, r0, lsl #12
    35cc:	0031a200 	eorseq	sl, r1, r0, lsl #4
    35d0:	53000100 	movwpl	r0, #256	; 0x100
	...
    35e4:	00500001 	subseq	r0, r0, r1
    35e8:	00000000 	andeq	r0, r0, r0
    35ec:	03000000 	movweq	r0, #0
    35f0:	9f1b7000 	svcls	0x001b7000
	...
    35fc:	01f30004 	mvnseq	r0, r4
    3600:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3610:	00070000 	andeq	r0, r7, r0
    3614:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3618:	009f2648 	addseq	r2, pc, r8, asr #12
	...
    3628:	01000000 	mrseq	r0, (UNDEF: 0)
    362c:	00005000 	andeq	r5, r0, r0
    3630:	00000000 	andeq	r0, r0, r0
    3634:	00060000 	andeq	r0, r6, r0
    3638:	4b5001f3 	blmi	1403e0c <__ccfg+0x13e3e64>
    363c:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    364c:	00010000 	andeq	r0, r1, r0
    3650:	00000055 	andeq	r0, r0, r5, asr r0
    3654:	00000000 	andeq	r0, r0, r0
    3658:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    365c:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3660:	4b5001f3 	blmi	1403e34 <__ccfg+0x13e3e8c>
    3664:	009f1e1c 	addseq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
	...
    3674:	2c000000 	stccs	0, cr0, [r0], {-0}
    3678:	40007100 	andmi	r7, r0, r0, lsl #2
    367c:	40007126 	andmi	r7, r0, r6, lsr #2
    3680:	70264824 	eorvc	r4, r6, r4, lsr #16
    3684:	26331e00 	ldrtcs	r1, [r3], -r0, lsl #28
    3688:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    368c:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    3690:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    3694:	48007422 	stmdami	r0, {r1, r5, sl, ip, sp, lr}
    3698:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    369c:	00701e00 	rsbseq	r1, r0, r0, lsl #28
    36a0:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    36a4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    36a8:	00000000 	andeq	r0, r0, r0
    36ac:	71003200 	mrsvc	r3, R8_usr
    36b0:	f3264000 	vhadd.u32	d4, d6, d0
    36b4:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    36b8:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    36bc:	331e2648 	tstcc	lr, #72, 12	; 0x4800000
    36c0:	00712226 	rsbseq	r2, r1, r6, lsr #4
    36c4:	26482448 	strbcs	r2, [r8], -r8, asr #8
    36c8:	3a1e0075 	bcc	7838a4 <__ccfg+0x7638fc>
    36cc:	01f32226 	mvnseq	r2, r6, lsr #4
    36d0:	741c4b50 	ldrvc	r4, [ip], #-2896	; 0xfffff4b0
    36d4:	48244800 	stmdami	r4!, {fp, lr}
    36d8:	00751e26 	rsbseq	r1, r5, r6, lsr #28
    36dc:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    36e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    36f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    36fc:	01f30004 	mvnseq	r0, r4
    3700:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3710:	000b0000 	andeq	r0, fp, r0
    3714:	00700070 	rsbseq	r0, r0, r0, ror r0
    3718:	7026461e 	eorvc	r4, r6, lr, lsl r6
    371c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3720:	00000000 	andeq	r0, r0, r0
    3724:	01000000 	mrseq	r0, (UNDEF: 0)
    3728:	00005000 	andeq	r5, r0, r0
    372c:	00000000 	andeq	r0, r0, r0
    3730:	000e0000 	andeq	r0, lr, r0
    3734:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    3738:	461e5001 	ldrmi	r5, [lr], -r1
    373c:	5001f326 	andpl	pc, r1, r6, lsr #6
    3740:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3750:	00010000 	andeq	r0, r1, r0
    3754:	00000055 	andeq	r0, r0, r5, asr r0
    3758:	00000000 	andeq	r0, r0, r0
    375c:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    3760:	40091038 	andmi	r1, r9, r8, lsr r0
	...
    3774:	00560001 	subseq	r0, r6, r1
	...
    3784:	06000000 	streq	r0, [r0], -r0
    3788:	76007000 	strvc	r7, [r0], -r0
    378c:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3790:	00000000 	andeq	r0, r0, r0
    3794:	01000000 	mrseq	r0, (UNDEF: 0)
    3798:	00005000 	andeq	r5, r0, r0
	...
    37a8:	000a0000 	andeq	r0, sl, r0
    37ac:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    37b0:	461a2444 	ldrmi	r2, [sl], -r4, asr #8
    37b4:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    37c4:	00010000 	andeq	r0, r1, r0
    37c8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    37d8:	73000900 	movwvc	r0, #2304	; 0x900
    37dc:	fc000a00 	stc2	10, cr0, [r0], {-0}	; <UNPREDICTABLE>
    37e0:	9f253a1a 	svcls	0x00253a1a
	...
    37f4:	0073000a 	rsbseq	r0, r3, sl
    37f8:	2440fc08 	strbcs	pc, [r0], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    37fc:	9f25421a 	svcls	0x0025421a
	...
    3808:	000031f0 	strdeq	r3, [r0], -r0
    380c:	0000320e 	andeq	r3, r0, lr, lsl #4
    3810:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    3814:	18000032 	stmdane	r0, {r1, r4, r5}
    3818:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    381c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3820:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3824:	00000000 	andeq	r0, r0, r0
    3828:	00327a00 	eorseq	r7, r2, r0, lsl #20
    382c:	00327c00 	eorseq	r7, r2, r0, lsl #24
    3830:	53000100 	movwpl	r0, #256	; 0x100
    3834:	0000327e 	andeq	r3, r0, lr, ror r2
    3838:	00003280 	andeq	r3, r0, r0, lsl #5
    383c:	00530001 	subseq	r0, r3, r1
    3840:	00000000 	andeq	r0, r0, r0
    3844:	b4000000 	strlt	r0, [r0], #-0
    3848:	ea000033 	b	391c <NOROM_SetupGetTrimForRadcExtCfg+0x4>
    384c:	01000033 	tsteq	r0, r3, lsr r0
    3850:	33ea5000 	mvncc	r5, #0
    3854:	34cc0000 	strbcc	r0, [ip], #0
    3858:	00040000 	andeq	r0, r4, r0
    385c:	9f5001f3 	svcls	0x005001f3
	...
    3868:	000033d2 	ldrdeq	r3, [r0], -r2
    386c:	000033d6 	ldrdeq	r3, [r0], -r6
    3870:	d6510001 	ldrble	r0, [r1], -r1
    3874:	dc000033 	stcle	0, cr0, [r0], {51}	; 0x33
    3878:	02000033 	andeq	r0, r0, #51	; 0x33
    387c:	e09f3200 	adds	r3, pc, r0, lsl #4
    3880:	6a000033 	bvs	3954 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>
    3884:	01000034 	tsteq	r0, r4, lsr r0
    3888:	346a5100 	strbtcc	r5, [sl], #-256	; 0xffffff00
    388c:	346e0000 	strbtcc	r0, [lr], #-0
    3890:	00030000 	andeq	r0, r3, r0
    3894:	909f0571 	addsls	r0, pc, r1, ror r5	; <UNPREDICTABLE>
    3898:	a6000034 			; <UNDEFINED> instruction: 0xa6000034
    389c:	01000034 	tsteq	r0, r4, lsr r0
    38a0:	34a65100 	strtcc	r5, [r6], #256	; 0x100
    38a4:	34a80000 	strtcc	r0, [r8], #0
    38a8:	00030000 	andeq	r0, r3, r0
    38ac:	009f0571 	addseq	r0, pc, r1, ror r5	; <UNPREDICTABLE>
    38b0:	00000000 	andeq	r0, r0, r0
    38b4:	36000000 	strcc	r0, [r0], -r0
    38b8:	3c000034 	stccc	0, cr0, [r0], {52}	; 0x34
    38bc:	01000034 	tsteq	r0, r4, lsr r0
    38c0:	34445300 	strbcc	r5, [r4], #-768	; 0xfffffd00
    38c4:	34460000 	strbcc	r0, [r6], #-0
    38c8:	00010000 	andeq	r0, r1, r0
    38cc:	00345a53 	eorseq	r5, r4, r3, asr sl
    38d0:	00345c00 	eorseq	r5, r4, r0, lsl #24
    38d4:	53000100 	movwpl	r0, #256	; 0x100
    38d8:	00003464 	andeq	r3, r0, r4, ror #8
    38dc:	00003470 	andeq	r3, r0, r0, ror r4
    38e0:	90530001 	subsls	r0, r3, r1
    38e4:	9c000034 	stcls	0, cr0, [r0], {52}	; 0x34
    38e8:	01000034 	tsteq	r0, r4, lsr r0
    38ec:	34a05300 	strtcc	r5, [r0], #768	; 0x300
    38f0:	34a80000 	strtcc	r0, [r8], #0
    38f4:	00010000 	andeq	r0, r1, r0
    38f8:	00000053 	andeq	r0, r0, r3, asr r0
    38fc:	00000000 	andeq	r0, r0, r0
    3900:	0033d400 	eorseq	sp, r3, r0, lsl #8
    3904:	0033d600 	eorseq	sp, r3, r0, lsl #12
    3908:	53000100 	movwpl	r0, #256	; 0x100
    390c:	000033d8 	ldrdeq	r3, [r0], -r8
    3910:	000033dc 	ldrdeq	r3, [r0], -ip
    3914:	e2530001 	subs	r0, r3, #1
    3918:	ea000033 	b	39ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x80>
    391c:	01000033 	tsteq	r0, r3, lsr r0
    3920:	33ea5300 	mvncc	r5, #0, 6
    3924:	34000000 	strcc	r0, [r0], #-0
    3928:	00030000 	andeq	r0, r3, r0
    392c:	049f6c74 	ldreq	r6, [pc], #3188	; 3934 <NOROM_SetupGetTrimForRadcExtCfg+0x1c>
    3930:	0a000034 	beq	3a08 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x9c>
    3934:	03000034 	movweq	r0, #52	; 0x34
    3938:	9f6c7400 	svcls	0x006c7400
	...
    3944:	000033fa 	strdeq	r3, [r0], -sl
    3948:	0000347e 	andeq	r3, r0, lr, ror r4
    394c:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
    3950:	84000034 	strhi	r0, [r0], #-52	; 0xffffffcc
    3954:	02000034 	andeq	r0, r0, #52	; 0x34
    3958:	84007000 	strhi	r7, [r0], #-0
    395c:	88000034 	stmdahi	r0, {r2, r4, r5}
    3960:	01000034 	tsteq	r0, r4, lsr r0
    3964:	34885200 	strcc	r5, [r8], #512	; 0x200
    3968:	348e0000 	strcc	r0, [lr], #0
    396c:	00020000 	andeq	r0, r2, r0
    3970:	34900070 	ldrcc	r0, [r0], #112	; 0x70
    3974:	34980000 	ldrcc	r0, [r8], #0
    3978:	00010000 	andeq	r0, r1, r0
    397c:	00349852 	eorseq	r9, r4, r2, asr r8
    3980:	00349e00 	eorseq	r9, r4, r0, lsl #28
    3984:	70000200 	andvc	r0, r0, r0, lsl #4
    3988:	0034a000 	eorseq	sl, r4, r0
    398c:	0034a800 	eorseq	sl, r4, r0, lsl #16
    3990:	52000100 	andpl	r0, r0, #0, 2
	...
    399c:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    39a0:	00003400 	andeq	r3, r0, r0, lsl #8
    39a4:	9f300002 	svcls	0x00300002
    39a8:	00003400 	andeq	r3, r0, r0, lsl #8
    39ac:	00003404 	andeq	r3, r0, r4, lsl #8
    39b0:	04540001 	ldrbeq	r0, [r4], #-1
    39b4:	0a000034 	beq	3a8c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x10>
    39b8:	02000034 	andeq	r0, r0, #52	; 0x34
    39bc:	0a9f3000 	beq	fe7cf9c4 <_estack+0xde7ca9c4>
    39c0:	a8000034 	stmdage	r0, {r2, r4, r5}
    39c4:	01000034 	tsteq	r0, r4, lsr r0
    39c8:	00005400 	andeq	r5, r0, r0, lsl #8
    39cc:	00000000 	andeq	r0, r0, r0
    39d0:	34cc0000 	strbcc	r0, [ip], #0
    39d4:	34d60000 	ldrbcc	r0, [r6], #0
    39d8:	00010000 	andeq	r0, r1, r0
    39dc:	0034d650 	eorseq	sp, r4, r0, asr r6
    39e0:	0034e800 	eorseq	lr, r4, r0, lsl #16
    39e4:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    39e8:	34e89f70 	strbtcc	r9, [r8], #3952	; 0xf70
    39ec:	34ec0000 	strbtcc	r0, [ip], #0
    39f0:	00040000 	andeq	r0, r4, r0
    39f4:	9f5001f3 	svcls	0x005001f3
	...
    3a08:	9f300002 	svcls	0x00300002
	...
    3a14:	9f310002 	svcls	0x00310002
	...
    3a20:	9f320002 	svcls	0x00320002
	...
    3a2c:	9f330002 	svcls	0x00330002
	...
    3a38:	9f340002 	svcls	0x00340002
	...
    3a44:	9f350002 	svcls	0x00350002
	...
    3a50:	9f360002 	svcls	0x00360002
	...
    3a5c:	9f370002 	svcls	0x00370002
	...
    3a68:	9f380002 	svcls	0x00380002
	...
    3a74:	9f390002 	svcls	0x00390002
	...
    3a80:	9f3a0002 	svcls	0x003a0002
	...
    3a8c:	9f3b0002 	svcls	0x003b0002
	...
    3a98:	9f3c0002 	svcls	0x003c0002
	...
    3aa4:	00003508 	andeq	r3, r0, r8, lsl #10
    3aa8:	00003546 	andeq	r3, r0, r6, asr #10
    3aac:	46500001 	ldrbmi	r0, [r0], -r1
    3ab0:	a8000035 	stmdage	r0, {r0, r2, r4, r5}
    3ab4:	01000035 	tsteq	r0, r5, lsr r0
    3ab8:	35a85500 	strcc	r5, [r8, #1280]!	; 0x500
    3abc:	35dc0000 	ldrbcc	r0, [ip]
    3ac0:	00040000 	andeq	r0, r4, r0
    3ac4:	9f5001f3 	svcls	0x005001f3
	...
    3ad0:	00003544 	andeq	r3, r0, r4, asr #10
    3ad4:	000035a8 	andeq	r3, r0, r8, lsr #11
    3ad8:	00540001 	subseq	r0, r4, r1
    3adc:	00000000 	andeq	r0, r0, r0
    3ae0:	5a000000 	bpl	3ae8 <NOROM_SetupSetAonRtcSubSecInc+0x8>
    3ae4:	5c000035 	stcpl	0, cr0, [r0], {53}	; 0x35
    3ae8:	07000035 	smladxeq	r0, r5, r0, r0
    3aec:	0a007300 	beq	206f4 <__ccfg+0x74c>
    3af0:	9f1affff 	svcls	0x001affff
	...
    3afc:	0000356a 	andeq	r3, r0, sl, ror #10
    3b00:	00003584 	andeq	r3, r0, r4, lsl #11
    3b04:	00530001 	subseq	r0, r3, r1
    3b08:	00000000 	andeq	r0, r0, r0
    3b0c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    3b10:	7a000035 	bvc	3bec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xe4>
    3b14:	01000035 	tsteq	r0, r5, lsr r0
    3b18:	357a5200 	ldrbcc	r5, [sl, #-512]!	; 0xfffffe00
    3b1c:	357e0000 	ldrbcc	r0, [lr, #-0]!
    3b20:	00030000 	andeq	r0, r3, r0
    3b24:	7e9f0671 	mrcvc	6, 4, r0, cr15, cr1, {3}
    3b28:	86000035 			; <UNDEFINED> instruction: 0x86000035
    3b2c:	01000035 	tsteq	r0, r5, lsr r0
    3b30:	00005200 	andeq	r5, r0, r0, lsl #4
    3b34:	00000000 	andeq	r0, r0, r0
    3b38:	35e20000 	strbcc	r0, [r2, #0]!
    3b3c:	365c0000 	ldrbcc	r0, [ip], -r0
    3b40:	00010000 	andeq	r0, r1, r0
    3b44:	00000054 	andeq	r0, r0, r4, asr r0
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	00364800 	eorseq	r4, r6, r0, lsl #16
    3b50:	00365200 	eorseq	r5, r6, r0, lsl #4
    3b54:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b60:	00003680 	andeq	r3, r0, r0, lsl #13
    3b64:	000036a6 	andeq	r3, r0, r6, lsr #13
    3b68:	a6500001 	ldrbge	r0, [r0], -r1
    3b6c:	fc000036 	stc2	0, cr0, [r0], {54}	; 0x36
    3b70:	04000036 	streq	r0, [r0], #-54	; 0xffffffca
    3b74:	5001f300 	andpl	pc, r1, r0, lsl #6
    3b78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b7c:	00000000 	andeq	r0, r0, r0
    3b80:	0036a800 	eorseq	sl, r6, r0, lsl #16
    3b84:	0036dc00 	eorseq	sp, r6, r0, lsl #24
    3b88:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b94:	000036ac 	andeq	r3, r0, ip, lsr #13
    3b98:	000036ba 			; <UNDEFINED> instruction: 0x000036ba
    3b9c:	ba510001 	blt	1443ba8 <__ccfg+0x1423c00>
    3ba0:	bc000036 	stclt	0, cr0, [r0], {54}	; 0x36
    3ba4:	06000036 			; <UNDEFINED> instruction: 0x06000036
    3ba8:	73007200 	movwvc	r7, #512	; 0x200
    3bac:	bc9f1c00 	ldclt	12, cr1, [pc], {0}
    3bb0:	c2000036 	andgt	r0, r0, #54	; 0x36
    3bb4:	01000036 	tsteq	r0, r6, lsr r0
    3bb8:	00005100 	andeq	r5, r0, r0, lsl #2
    3bbc:	00000000 	andeq	r0, r0, r0
    3bc0:	36980000 	ldrcc	r0, [r8], r0
    3bc4:	36aa0000 	strtcc	r0, [sl], r0
    3bc8:	00010000 	andeq	r0, r1, r0
    3bcc:	00000053 	andeq	r0, r0, r3, asr r0
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	0036fc00 	eorseq	pc, r6, r0, lsl #24
    3bd8:	00371f00 	eorseq	r1, r7, r0, lsl #30
    3bdc:	50000100 	andpl	r0, r0, r0, lsl #2
    3be0:	0000371f 	andeq	r3, r0, pc, lsl r7
    3be4:	0000372a 	andeq	r3, r0, sl, lsr #14
    3be8:	2a540001 	bcs	1503bf4 <__ccfg+0x14e3c4c>
    3bec:	32000037 	andcc	r0, r0, #55	; 0x37
    3bf0:	01000037 	tsteq	r0, r7, lsr r0
    3bf4:	37325000 	ldrcc	r5, [r2, -r0]!
    3bf8:	377e0000 	ldrbcc	r0, [lr, -r0]!
    3bfc:	00010000 	andeq	r0, r1, r0
    3c00:	00000054 	andeq	r0, r0, r4, asr r0
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	00373800 	eorseq	r3, r7, r0, lsl #16
    3c0c:	00373c00 	eorseq	r3, r7, r0, lsl #24
    3c10:	53000100 	movwpl	r0, #256	; 0x100
    3c14:	0000373e 	andeq	r3, r0, lr, lsr r7
    3c18:	0000374c 	andeq	r3, r0, ip, asr #14
    3c1c:	4e530001 	cdpmi	0, 5, cr0, cr3, cr1, {0}
    3c20:	56000037 			; <UNDEFINED> instruction: 0x56000037
    3c24:	01000037 	tsteq	r0, r7, lsr r0
    3c28:	00005300 	andeq	r5, r0, r0, lsl #6
    3c2c:	00000000 	andeq	r0, r0, r0
    3c30:	37380000 	ldrcc	r0, [r8, -r0]!
    3c34:	376c0000 	strbcc	r0, [ip, -r0]!
    3c38:	00050000 	andeq	r0, r5, r0
    3c3c:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    3c40:	00376c9f 	mlaseq	r7, pc, ip, r6	; <UNPREDICTABLE>
    3c44:	0037a800 	eorseq	sl, r7, r0, lsl #16
    3c48:	f3000600 	vmax.u8	d0, d0, d0
    3c4c:	264c5001 	strbcs	r5, [ip], -r1
    3c50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c54:	00000000 	andeq	r0, r0, r0
    3c58:	00373200 	eorseq	r3, r7, r0, lsl #4
    3c5c:	00373c00 	eorseq	r3, r7, r0, lsl #24
    3c60:	53000100 	movwpl	r0, #256	; 0x100
	...
    3c6c:	000037a8 	andeq	r3, r0, r8, lsr #15
    3c70:	000037bc 			; <UNDEFINED> instruction: 0x000037bc
    3c74:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3c78:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3c7c:	04000038 	streq	r0, [r0], #-56	; 0xffffffc8
    3c80:	5001f300 	andpl	pc, r1, r0, lsl #6
    3c84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c88:	00000000 	andeq	r0, r0, r0
    3c8c:	0037ae00 	eorseq	sl, r7, r0, lsl #28
    3c90:	0037b600 	eorseq	fp, r7, r0, lsl #12
    3c94:	53000100 	movwpl	r0, #256	; 0x100
	...
    3ca0:	000037b2 			; <UNDEFINED> instruction: 0x000037b2
    3ca4:	000037c4 	andeq	r3, r0, r4, asr #15
    3ca8:	c4520001 	ldrbgt	r0, [r2], #-1
    3cac:	c6000037 			; <UNDEFINED> instruction: 0xc6000037
    3cb0:	05000037 	streq	r0, [r0, #-55]	; 0xffffffc9
    3cb4:	31007200 	mrscc	r7, R8_usr
    3cb8:	37c69f25 	strbcc	r9, [r6, r5, lsr #30]
    3cbc:	37cc0000 	strbcc	r0, [ip, r0]
    3cc0:	00010000 	andeq	r0, r1, r0
    3cc4:	0037d052 	eorseq	sp, r7, r2, asr r0
    3cc8:	0037e200 	eorseq	lr, r7, r0, lsl #4
    3ccc:	52000100 	andpl	r0, r0, #0, 2
    3cd0:	000037e6 	andeq	r3, r0, r6, ror #15
    3cd4:	000037f0 	strdeq	r3, [r0], -r0
    3cd8:	f2520001 	vhadd.s16	d16, d2, d1
    3cdc:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3ce0:	01000038 	tsteq	r0, r8, lsr r0
    3ce4:	00005200 	andeq	r5, r0, r0, lsl #4
    3ce8:	00000000 	andeq	r0, r0, r0
    3cec:	37b60000 	ldrcc	r0, [r6, r0]!
    3cf0:	37c00000 	strbcc	r0, [r0, r0]
    3cf4:	00010000 	andeq	r0, r1, r0
    3cf8:	0037c053 	eorseq	ip, r7, r3, asr r0
    3cfc:	0037c200 	eorseq	ip, r7, r0, lsl #4
    3d00:	73000500 	movwvc	r0, #1280	; 0x500
    3d04:	9f253100 	svcls	0x00253100
    3d08:	000037c2 	andeq	r3, r0, r2, asr #15
    3d0c:	000037c4 	andeq	r3, r0, r4, asr #15
    3d10:	c4530001 	ldrbgt	r0, [r3], #-1
    3d14:	d0000037 	andle	r0, r0, r7, lsr r0
    3d18:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3d1c:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3d20:	0037d09f 	mlaseq	r7, pc, r0, sp	; <UNPREDICTABLE>
    3d24:	0037d600 	eorseq	sp, r7, r0, lsl #12
    3d28:	53000100 	movwpl	r0, #256	; 0x100
    3d2c:	000037da 	ldrdeq	r3, [r0], -sl
    3d30:	000037e0 	andeq	r3, r0, r0, ror #15
    3d34:	e0530001 	subs	r0, r3, r1
    3d38:	f2000037 	vqadd.s8	d0, d0, d23
    3d3c:	02000037 	andeq	r0, r0, #55	; 0x37
    3d40:	f29f3100 	vaddw.s16	<illegal reg q1.5>, <illegal reg q7.5>, d0
    3d44:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3d48:	01000038 	tsteq	r0, r8, lsr r0
    3d4c:	00005300 	andeq	r5, r0, r0, lsl #6
    3d50:	00000000 	andeq	r0, r0, r0
    3d54:	37b60000 	ldrcc	r0, [r6, r0]!
    3d58:	37bc0000 	ldrcc	r0, [ip, r0]!
    3d5c:	00020000 	andeq	r0, r2, r0
    3d60:	37bc9f30 			; <UNDEFINED> instruction: 0x37bc9f30
    3d64:	37f80000 	ldrbcc	r0, [r8, r0]!
    3d68:	00010000 	andeq	r0, r1, r0
    3d6c:	00000050 	andeq	r0, r0, r0, asr r0
    3d70:	00000000 	andeq	r0, r0, r0
    3d74:	0037f800 	eorseq	pc, r7, r0, lsl #16
    3d78:	0037fc00 	eorseq	pc, r7, r0, lsl #24
    3d7c:	72000800 	andvc	r0, r0, #0, 16
    3d80:	73244000 			; <UNDEFINED> instruction: 0x73244000
    3d84:	fc9f2100 	ldc2	1, cr2, [pc], {0}
    3d88:	04000037 	streq	r0, [r0], #-55	; 0xffffffc9
    3d8c:	01000038 	tsteq	r0, r8, lsr r0
    3d90:	00005000 	andeq	r5, r0, r0
    3d94:	00000000 	andeq	r0, r0, r0
    3d98:	380e0000 	stmdacc	lr, {}	; <UNPREDICTABLE>
    3d9c:	38120000 	ldmdacc	r2, {}	; <UNPREDICTABLE>
    3da0:	000a0000 	andeq	r0, sl, r0
    3da4:	1a330070 	bne	cc3f6c <__ccfg+0xca3fc4>
    3da8:	00732438 	rsbseq	r2, r3, r8, lsr r4
    3dac:	38169f21 	ldmdacc	r6, {r0, r5, r8, r9, sl, fp, ip, pc}
    3db0:	381c0000 	ldmdacc	ip, {}	; <UNPREDICTABLE>
    3db4:	00010000 	andeq	r0, r1, r0
    3db8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3dc8:	70000700 	andvc	r0, r0, r0, lsl #14
    3dcc:	3fff0a00 	svccc	0x00ff0a00
    3dd0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3dd4:	00000000 	andeq	r0, r0, r0
    3dd8:	38200000 	stmdacc	r0!, {}	; <UNPREDICTABLE>
    3ddc:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    3de0:	000f0000 	andeq	r0, pc, r0
    3de4:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    3de8:	1100701a 	tstne	r0, sl, lsl r0
    3dec:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    3df0:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    3df4:	00000000 	andeq	r0, r0, r0
    3df8:	20000000 	andcs	r0, r0, r0
    3dfc:	24000038 	strcs	r0, [r0], #-56	; 0xffffffc8
    3e00:	01000038 	tsteq	r0, r8, lsr r0
    3e04:	00005000 	andeq	r5, r0, r0
    3e08:	00000000 	andeq	r0, r0, r0
    3e0c:	38300000 	ldmdacc	r0!, {}	; <UNPREDICTABLE>
    3e10:	38340000 	ldmdacc	r4!, {}	; <UNPREDICTABLE>
    3e14:	000f0000 	andeq	r0, pc, r0
    3e18:	3f080070 	svccc	0x00080070
    3e1c:	0c00701a 	stceq	0, cr7, [r0], {26}
    3e20:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    3e24:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    3e28:	00000000 	andeq	r0, r0, r0
    3e2c:	30000000 	andcc	r0, r0, r0
    3e30:	34000038 	strcc	r0, [r0], #-56	; 0xffffffc8
    3e34:	01000038 	tsteq	r0, r8, lsr r0
    3e38:	00005000 	andeq	r5, r0, r0
    3e3c:	00000000 	andeq	r0, r0, r0
    3e40:	38400000 	stmdacc	r0, {}^	; <UNPREDICTABLE>
    3e44:	38960000 	ldmcc	r6, {}	; <UNPREDICTABLE>
    3e48:	00010000 	andeq	r0, r1, r0
    3e4c:	00389650 	eorseq	r9, r8, r0, asr r6
    3e50:	0038a400 	eorseq	sl, r8, r0, lsl #8
    3e54:	f3000400 	vshl.u8	d0, d0, d0
    3e58:	009f5001 	addseq	r5, pc, r1
    3e5c:	00000000 	andeq	r0, r0, r0
    3e60:	80000000 	andhi	r0, r0, r0
    3e64:	88000038 	stmdahi	r0, {r3, r4, r5}
    3e68:	17000038 	smladxne	r0, r8, r0, r0
    3e6c:	0a007400 	beq	20e74 <__ccfg+0xecc>
    3e70:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    3e74:	1af00800 	bne	ffc05e7c <_estack+0xdfc00e7c>
    3e78:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    3e7c:	00732124 	rsbseq	r2, r3, r4, lsr #2
    3e80:	9f212440 	svcls	0x00212440
    3e84:	0000388c 	andeq	r3, r0, ip, lsl #17
    3e88:	000038a4 	andeq	r3, r0, r4, lsr #17
    3e8c:	00530001 	subseq	r0, r3, r1
    3e90:	00000000 	andeq	r0, r0, r0
    3e94:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    3e98:	92000038 	andls	r0, r0, #56	; 0x38
    3e9c:	01000038 	tsteq	r0, r8, lsr r0
    3ea0:	00005400 	andeq	r5, r0, r0, lsl #8
    3ea4:	00000000 	andeq	r0, r0, r0
    3ea8:	384e0000 	stmdacc	lr, {}^	; <UNPREDICTABLE>
    3eac:	38620000 	stmdacc	r2!, {}^	; <UNPREDICTABLE>
    3eb0:	00010000 	andeq	r0, r1, r0
    3eb4:	00386252 	eorseq	r6, r8, r2, asr r2
    3eb8:	00386e00 	eorseq	r6, r8, r0, lsl #28
    3ebc:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    3ec0:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3ec4:	0038809f 	mlaseq	r8, pc, r0, r8	; <UNPREDICTABLE>
    3ec8:	00388800 	eorseq	r8, r8, r0, lsl #16
    3ecc:	52000100 	andpl	r0, r0, #0, 2
	...
    3ed8:	00003856 	andeq	r3, r0, r6, asr r8
    3edc:	00003874 	andeq	r3, r0, r4, ror r8
    3ee0:	74530001 	ldrbvc	r0, [r3], #-1
    3ee4:	80000038 	andhi	r0, r0, r8, lsr r0
    3ee8:	06000038 			; <UNDEFINED> instruction: 0x06000038
    3eec:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    3ef0:	809f24f0 			; <UNDEFINED> instruction: 0x809f24f0
    3ef4:	8c000038 	stchi	0, cr0, [r0], {56}	; 0x38
    3ef8:	01000038 	tsteq	r0, r8, lsr r0
    3efc:	00005300 	andeq	r5, r0, r0, lsl #6
    3f00:	00000000 	andeq	r0, r0, r0
    3f04:	38600000 	stmdacc	r0!, {}^	; <UNPREDICTABLE>
    3f08:	38620000 	stmdacc	r2!, {}^	; <UNPREDICTABLE>
    3f0c:	00060000 	andeq	r0, r6, r0
    3f10:	00720076 	rsbseq	r0, r2, r6, ror r0
    3f14:	38629f22 	stmdacc	r2!, {r1, r5, r8, r9, sl, fp, ip, pc}^
    3f18:	386a0000 	stmdacc	sl!, {}^	; <UNPREDICTABLE>
    3f1c:	00010000 	andeq	r0, r1, r0
    3f20:	00386a52 	eorseq	r6, r8, r2, asr sl
    3f24:	00386c00 	eorseq	r6, r8, r0, lsl #24
    3f28:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    3f2c:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3f30:	9f220076 	svcls	0x00220076
    3f34:	0000386c 	andeq	r3, r0, ip, ror #16
    3f38:	0000386e 	andeq	r3, r0, lr, ror #16
    3f3c:	72550001 	subsvc	r0, r5, #1
    3f40:	74000038 	strvc	r0, [r0], #-56	; 0xffffffc8
    3f44:	06000038 			; <UNDEFINED> instruction: 0x06000038
    3f48:	73007100 	movwvc	r7, #256	; 0x100
    3f4c:	749f2200 	ldrvc	r2, [pc], #512	; 3f54 <NOROM_ChipInfo_GetHwRevision+0x18>
    3f50:	7c000038 	stcvc	0, cr0, [r0], {56}	; 0x38
    3f54:	01000038 	tsteq	r0, r8, lsr r0
    3f58:	387c5300 	ldmdacc	ip!, {r8, r9, ip, lr}^
    3f5c:	387e0000 	ldmdacc	lr!, {}^	; <UNPREDICTABLE>
    3f60:	00090000 	andeq	r0, r9, r0
    3f64:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    3f68:	22007124 	andcs	r7, r0, #36, 2
    3f6c:	00387e9f 	mlaseq	r8, pc, lr, r7	; <UNPREDICTABLE>
    3f70:	00388000 	eorseq	r8, r8, r0
    3f74:	30000200 	andcc	r0, r0, r0, lsl #4
    3f78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	0038a400 	eorseq	sl, r8, r0, lsl #8
    3f84:	0038ac00 	eorseq	sl, r8, r0, lsl #24
    3f88:	50000100 	andpl	r0, r0, r0, lsl #2
    3f8c:	000038ac 	andeq	r3, r0, ip, lsr #17
    3f90:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    3f94:	01f30004 	mvnseq	r0, r4
    3f98:	00009f50 	andeq	r9, r0, r0, asr pc
    3f9c:	00000000 	andeq	r0, r0, r0
    3fa0:	38a40000 	stmiacc	r4!, {}	; <UNPREDICTABLE>
    3fa4:	38b20000 	ldmcc	r2!, {}	; <UNPREDICTABLE>
    3fa8:	00020000 	andeq	r0, r2, r0
    3fac:	38b29f30 	ldmcc	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}
    3fb0:	38b80000 	ldmcc	r8!, {}	; <UNPREDICTABLE>
    3fb4:	00010000 	andeq	r0, r1, r0
    3fb8:	00000050 	andeq	r0, r0, r0, asr r0
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	0038a600 	eorseq	sl, r8, r0, lsl #12
    3fc4:	0038ac00 	eorseq	sl, r8, r0, lsl #24
    3fc8:	50000100 	andpl	r0, r0, r0, lsl #2
    3fcc:	000038ac 	andeq	r3, r0, ip, lsr #17
    3fd0:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    3fd4:	01f30004 	mvnseq	r0, r4
    3fd8:	00009f50 	andeq	r9, r0, r0, asr pc
    3fdc:	00000000 	andeq	r0, r0, r0
    3fe0:	38b00000 	ldmcc	r0!, {}	; <UNPREDICTABLE>
    3fe4:	38b20000 	ldmcc	r2!, {}	; <UNPREDICTABLE>
    3fe8:	00010000 	andeq	r0, r1, r0
    3fec:	00000050 	andeq	r0, r0, r0, asr r0
    3ff0:	00000000 	andeq	r0, r0, r0
    3ff4:	0038b800 	eorseq	fp, r8, r0, lsl #16
    3ff8:	0038c000 	eorseq	ip, r8, r0
    3ffc:	50000100 	andpl	r0, r0, r0, lsl #2
    4000:	000038c0 	andeq	r3, r0, r0, asr #17
    4004:	000038cc 	andeq	r3, r0, ip, asr #17
    4008:	01f30004 	mvnseq	r0, r4
    400c:	00009f50 	andeq	r9, r0, r0, asr pc
    4010:	00000000 	andeq	r0, r0, r0
    4014:	38b80000 	ldmcc	r8!, {}	; <UNPREDICTABLE>
    4018:	38c60000 	stmiacc	r6, {}^	; <UNPREDICTABLE>
    401c:	00020000 	andeq	r0, r2, r0
    4020:	38c69f31 	stmiacc	r6, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
    4024:	38cc0000 	stmiacc	ip, {}^	; <UNPREDICTABLE>
    4028:	00010000 	andeq	r0, r1, r0
    402c:	00000050 	andeq	r0, r0, r0, asr r0
    4030:	00000000 	andeq	r0, r0, r0
    4034:	0038ba00 	eorseq	fp, r8, r0, lsl #20
    4038:	0038c000 	eorseq	ip, r8, r0
    403c:	50000100 	andpl	r0, r0, r0, lsl #2
    4040:	000038c0 	andeq	r3, r0, r0, asr #17
    4044:	000038cc 	andeq	r3, r0, ip, asr #17
    4048:	01f30004 	mvnseq	r0, r4
    404c:	00009f50 	andeq	r9, r0, r0, asr pc
    4050:	00000000 	andeq	r0, r0, r0
    4054:	38c40000 	stmiacc	r4, {}^	; <UNPREDICTABLE>
    4058:	38c60000 	stmiacc	r6, {}^	; <UNPREDICTABLE>
    405c:	00010000 	andeq	r0, r1, r0
    4060:	00000050 	andeq	r0, r0, r0, asr r0
    4064:	00000000 	andeq	r0, r0, r0
    4068:	0038cc00 	eorseq	ip, r8, r0, lsl #24
    406c:	0038d400 	eorseq	sp, r8, r0, lsl #8
    4070:	50000100 	andpl	r0, r0, r0, lsl #2
    4074:	000038d4 	ldrdeq	r3, [r0], -r4
    4078:	000038e0 	andeq	r3, r0, r0, ror #17
    407c:	01f30004 	mvnseq	r0, r4
    4080:	00009f50 	andeq	r9, r0, r0, asr pc
    4084:	00000000 	andeq	r0, r0, r0
    4088:	38cc0000 	stmiacc	ip, {}^	; <UNPREDICTABLE>
    408c:	38da0000 	ldmcc	sl, {}^	; <UNPREDICTABLE>
    4090:	00020000 	andeq	r0, r2, r0
    4094:	38da9f31 	ldmcc	sl, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
    4098:	38e00000 	stmiacc	r0!, {}^	; <UNPREDICTABLE>
    409c:	00010000 	andeq	r0, r1, r0
    40a0:	00000050 	andeq	r0, r0, r0, asr r0
    40a4:	00000000 	andeq	r0, r0, r0
    40a8:	0038ce00 	eorseq	ip, r8, r0, lsl #28
    40ac:	0038d400 	eorseq	sp, r8, r0, lsl #8
    40b0:	50000100 	andpl	r0, r0, r0, lsl #2
    40b4:	000038d4 	ldrdeq	r3, [r0], -r4
    40b8:	000038e0 	andeq	r3, r0, r0, ror #17
    40bc:	01f30004 	mvnseq	r0, r4
    40c0:	00009f50 	andeq	r9, r0, r0, asr pc
    40c4:	00000000 	andeq	r0, r0, r0
    40c8:	38d80000 	ldmcc	r8, {}^	; <UNPREDICTABLE>
    40cc:	38da0000 	ldmcc	sl, {}^	; <UNPREDICTABLE>
    40d0:	00010000 	andeq	r0, r1, r0
    40d4:	00000050 	andeq	r0, r0, r0, asr r0
    40d8:	00000000 	andeq	r0, r0, r0
    40dc:	0038e000 	eorseq	lr, r8, r0
    40e0:	0038ec00 	eorseq	lr, r8, r0, lsl #24
    40e4:	50000100 	andpl	r0, r0, r0, lsl #2
    40e8:	000038ec 	andeq	r3, r0, ip, ror #17
    40ec:	00003908 	andeq	r3, r0, r8, lsl #18
    40f0:	01f30004 	mvnseq	r0, r4
    40f4:	00009f50 	andeq	r9, r0, r0, asr pc
    40f8:	00000000 	andeq	r0, r0, r0
    40fc:	38e00000 	stmiacc	r0!, {}^	; <UNPREDICTABLE>
    4100:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    4104:	00020000 	andeq	r0, r2, r0
    4108:	39029f30 	stmdbcc	r2, {r4, r5, r8, r9, sl, fp, ip, pc}
    410c:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
    4110:	00010000 	andeq	r0, r1, r0
    4114:	00000050 	andeq	r0, r0, r0, asr r0
    4118:	00000000 	andeq	r0, r0, r0
    411c:	0038e200 	eorseq	lr, r8, r0, lsl #4
    4120:	0038ec00 	eorseq	lr, r8, r0, lsl #24
    4124:	50000100 	andpl	r0, r0, r0, lsl #2
    4128:	000038ec 	andeq	r3, r0, ip, ror #17
    412c:	00003908 	andeq	r3, r0, r8, lsl #18
    4130:	01f30004 	mvnseq	r0, r4
    4134:	00009f50 	andeq	r9, r0, r0, asr pc
    4138:	00000000 	andeq	r0, r0, r0
    413c:	38f40000 	ldmcc	r4!, {}^	; <UNPREDICTABLE>
    4140:	38fc0000 	ldmcc	ip!, {}^	; <UNPREDICTABLE>
    4144:	00100000 	andseq	r0, r0, r0
    4148:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    414c:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    4150:	00722432 	rsbseq	r2, r2, r2, lsr r4
    4154:	9f212438 	svcls	0x00212438
    4158:	000038fe 	strdeq	r3, [r0], -lr
    415c:	00003902 	andeq	r3, r0, r2, lsl #18
    4160:	00500001 	subseq	r0, r0, r1
    4164:	00000000 	andeq	r0, r0, r0
    4168:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    416c:	fc000038 	stc2	0, cr0, [r0], {56}	; 0x38
    4170:	01000038 	tsteq	r0, r8, lsr r0
    4174:	00005300 	andeq	r5, r0, r0, lsl #6
    4178:	00000000 	andeq	r0, r0, r0
    417c:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    4180:	39100000 	ldmdbcc	r0, {}	; <UNPREDICTABLE>
    4184:	00090000 	andeq	r0, r9, r0
    4188:	40480070 	submi	r0, r8, r0, ror r0
    418c:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    4190:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4194:	00000000 	andeq	r0, r0, r0
    4198:	00391800 	eorseq	r1, r9, r0, lsl #16
    419c:	00392400 	eorseq	r2, r9, r0, lsl #8
    41a0:	50000100 	andpl	r0, r0, r0, lsl #2
    41a4:	00003924 	andeq	r3, r0, r4, lsr #18
    41a8:	00003944 	andeq	r3, r0, r4, asr #18
    41ac:	01f30004 	mvnseq	r0, r4
    41b0:	00009f50 	andeq	r9, r0, r0, asr pc
    41b4:	00000000 	andeq	r0, r0, r0
    41b8:	39180000 	ldmdbcc	r8, {}	; <UNPREDICTABLE>
    41bc:	393a0000 	ldmdbcc	sl!, {}	; <UNPREDICTABLE>
    41c0:	00060000 	andeq	r0, r6, r0
    41c4:	3f80000c 	svccc	0x0080000c
    41c8:	393a9f40 	ldmdbcc	sl!, {r6, r8, r9, sl, fp, ip, pc}
    41cc:	39440000 	stmdbcc	r4, {}^	; <UNPREDICTABLE>
    41d0:	00010000 	andeq	r0, r1, r0
    41d4:	00000050 	andeq	r0, r0, r0, asr r0
    41d8:	00000000 	andeq	r0, r0, r0
    41dc:	00391a00 	eorseq	r1, r9, r0, lsl #20
    41e0:	00392400 	eorseq	r2, r9, r0, lsl #8
    41e4:	50000100 	andpl	r0, r0, r0, lsl #2
    41e8:	00003924 	andeq	r3, r0, r4, lsr #18
    41ec:	00003944 	andeq	r3, r0, r4, asr #18
    41f0:	01f30004 	mvnseq	r0, r4
    41f4:	00009f50 	andeq	r9, r0, r0, asr pc
    41f8:	00000000 	andeq	r0, r0, r0
    41fc:	39280000 	stmdbcc	r8!, {}	; <UNPREDICTABLE>
    4200:	392e0000 	stmdbcc	lr!, {}	; <UNPREDICTABLE>
    4204:	00100000 	andseq	r0, r0, r0
    4208:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    420c:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    4210:	00722440 	rsbseq	r2, r2, r0, asr #8
    4214:	9f212446 	svcls	0x00212446
    4218:	00003938 	andeq	r3, r0, r8, lsr r9
    421c:	0000393a 	andeq	r3, r0, sl, lsr r9
    4220:	00500001 	subseq	r0, r0, r1
    4224:	00000000 	andeq	r0, r0, r0
    4228:	20000000 	andcs	r0, r0, r0
    422c:	2e000039 	mcrcs	0, 0, r0, cr0, cr9, {1}
    4230:	01000039 	tsteq	r0, r9, lsr r0
    4234:	00005300 	andeq	r5, r0, r0, lsl #6
    4238:	00000000 	andeq	r0, r0, r0
    423c:	39440000 	stmdbcc	r4, {}^	; <UNPREDICTABLE>
    4240:	394c0000 	stmdbcc	ip, {}^	; <UNPREDICTABLE>
    4244:	00010000 	andeq	r0, r1, r0
    4248:	00394c50 	eorseq	r4, r9, r0, asr ip
    424c:	00395800 	eorseq	r5, r9, r0, lsl #16
    4250:	f3000400 	vshl.u8	d0, d0, d0
    4254:	009f5001 	addseq	r5, pc, r1
    4258:	00000000 	andeq	r0, r0, r0
    425c:	44000000 	strmi	r0, [r0], #-0
    4260:	52000039 	andpl	r0, r0, #57	; 0x39
    4264:	02000039 	andeq	r0, r0, #57	; 0x39
    4268:	529f3000 	addspl	r3, pc, #0
    426c:	58000039 	stmdapl	r0, {r0, r3, r4, r5}
    4270:	01000039 	tsteq	r0, r9, lsr r0
    4274:	00005000 	andeq	r5, r0, r0
    4278:	00000000 	andeq	r0, r0, r0
    427c:	39460000 	stmdbcc	r6, {}^	; <UNPREDICTABLE>
    4280:	394c0000 	stmdbcc	ip, {}^	; <UNPREDICTABLE>
    4284:	00010000 	andeq	r0, r1, r0
    4288:	00394c50 	eorseq	r4, r9, r0, asr ip
    428c:	00395800 	eorseq	r5, r9, r0, lsl #16
    4290:	f3000400 	vshl.u8	d0, d0, d0
    4294:	009f5001 	addseq	r5, pc, r1
    4298:	00000000 	andeq	r0, r0, r0
    429c:	50000000 	andpl	r0, r0, r0
    42a0:	52000039 	andpl	r0, r0, #57	; 0x39
    42a4:	01000039 	tsteq	r0, r9, lsr r0
    42a8:	00005000 	andeq	r5, r0, r0
    42ac:	00000000 	andeq	r0, r0, r0
    42b0:	39580000 	ldmdbcc	r8, {}^	; <UNPREDICTABLE>
    42b4:	39600000 	stmdbcc	r0!, {}^	; <UNPREDICTABLE>
    42b8:	00010000 	andeq	r0, r1, r0
    42bc:	00396050 	eorseq	r6, r9, r0, asr r0
    42c0:	00396c00 	eorseq	r6, r9, r0, lsl #24
    42c4:	f3000400 	vshl.u8	d0, d0, d0
    42c8:	009f5001 	addseq	r5, pc, r1
    42cc:	00000000 	andeq	r0, r0, r0
    42d0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    42d4:	66000039 			; <UNDEFINED> instruction: 0x66000039
    42d8:	02000039 	andeq	r0, r0, #57	; 0x39
    42dc:	669f3000 	ldrvs	r3, [pc], r0
    42e0:	6c000039 	stcvs	0, cr0, [r0], {57}	; 0x39
    42e4:	01000039 	tsteq	r0, r9, lsr r0
    42e8:	00005000 	andeq	r5, r0, r0
    42ec:	00000000 	andeq	r0, r0, r0
    42f0:	395a0000 	ldmdbcc	sl, {}^	; <UNPREDICTABLE>
    42f4:	39600000 	stmdbcc	r0!, {}^	; <UNPREDICTABLE>
    42f8:	00010000 	andeq	r0, r1, r0
    42fc:	00396050 	eorseq	r6, r9, r0, asr r0
    4300:	00396c00 	eorseq	r6, r9, r0, lsl #24
    4304:	f3000400 	vshl.u8	d0, d0, d0
    4308:	009f5001 	addseq	r5, pc, r1
    430c:	00000000 	andeq	r0, r0, r0
    4310:	64000000 	strvs	r0, [r0], #-0
    4314:	66000039 			; <UNDEFINED> instruction: 0x66000039
    4318:	01000039 	tsteq	r0, r9, lsr r0
    431c:	00005000 	andeq	r5, r0, r0
    4320:	00000000 	andeq	r0, r0, r0
    4324:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    4328:	39720000 	ldmdbcc	r2!, {}^	; <UNPREDICTABLE>
    432c:	00010000 	andeq	r0, r1, r0
    4330:	00397250 	eorseq	r7, r9, r0, asr r2
    4334:	003a5c00 	eorseq	r5, sl, r0, lsl #24
    4338:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    433c:	00003a5c 	andeq	r3, r0, ip, asr sl
    4340:	00003a7c 	andeq	r3, r0, ip, ror sl
    4344:	01f30004 	mvnseq	r0, r4
    4348:	00009f50 	andeq	r9, r0, r0, asr pc
    434c:	00000000 	andeq	r0, r0, r0
    4350:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    4354:	39750000 	ldmdbcc	r5!, {}^	; <UNPREDICTABLE>
    4358:	00010000 	andeq	r0, r1, r0
    435c:	00397551 	eorseq	r7, r9, r1, asr r5
    4360:	003a7c00 	eorseq	r7, sl, r0, lsl #24
    4364:	f3000400 	vshl.u8	d0, d0, d0
    4368:	009f5101 	addseq	r5, pc, r1, lsl #2
    436c:	00000000 	andeq	r0, r0, r0
    4370:	7a000000 	bvc	4378 <_gettimeofday+0x1d8>
    4374:	7e000039 	mcrvc	0, 0, r0, cr0, cr9, {1}
    4378:	01000039 	tsteq	r0, r9, lsr r0
    437c:	397e5000 	ldmdbcc	lr!, {ip, lr}^
    4380:	39810000 	stmibcc	r1, {}	; <UNPREDICTABLE>
    4384:	00010000 	andeq	r0, r1, r0
    4388:	00398652 	eorseq	r8, r9, r2, asr r6
    438c:	00398a00 	eorseq	r8, r9, r0, lsl #20
    4390:	50000100 	andpl	r0, r0, r0, lsl #2
    4394:	000039b4 			; <UNDEFINED> instruction: 0x000039b4
    4398:	000039b6 			; <UNDEFINED> instruction: 0x000039b6
    439c:	b6500001 	ldrblt	r0, [r0], -r1
    43a0:	b9000039 	stmdblt	r0, {r0, r3, r4, r5}
    43a4:	01000039 	tsteq	r0, r9, lsr r0
    43a8:	39c25200 	stmibcc	r2, {r9, ip, lr}^
    43ac:	39c40000 	stmibcc	r4, {}^	; <UNPREDICTABLE>
    43b0:	00010000 	andeq	r0, r1, r0
    43b4:	0039c450 	eorseq	ip, r9, r0, asr r4
    43b8:	0039c700 	eorseq	ip, r9, r0, lsl #14
    43bc:	52000100 	andpl	r0, r0, #0, 2
    43c0:	000039d2 	ldrdeq	r3, [r0], -r2
    43c4:	000039d4 	ldrdeq	r3, [r0], -r4
    43c8:	d4500001 	ldrble	r0, [r0], #-1
    43cc:	d7000039 	smladxle	r0, r9, r0, r0
    43d0:	01000039 	tsteq	r0, r9, lsr r0
    43d4:	39de5200 	ldmibcc	lr, {r9, ip, lr}^
    43d8:	39e00000 	stmibcc	r0!, {}^	; <UNPREDICTABLE>
    43dc:	00010000 	andeq	r0, r1, r0
    43e0:	0039f050 	eorseq	pc, r9, r0, asr r0	; <UNPREDICTABLE>
    43e4:	0039f400 	eorseq	pc, r9, r0, lsl #8
    43e8:	50000100 	andpl	r0, r0, r0, lsl #2
    43ec:	00003a02 	andeq	r3, r0, r2, lsl #20
    43f0:	00003a04 	andeq	r3, r0, r4, lsl #20
    43f4:	04500001 	ldrbeq	r0, [r0], #-1
    43f8:	0700003a 	smladxeq	r0, sl, r0, r0
    43fc:	0100003a 	tsteq	r0, sl, lsr r0
    4400:	3a0e5200 	bcc	398c08 <__ccfg+0x378c60>
    4404:	3a100000 	bcc	40440c <__ccfg+0x3e4464>
    4408:	00010000 	andeq	r0, r1, r0
    440c:	003a2050 	eorseq	r2, sl, r0, asr r0
    4410:	003a2200 	eorseq	r2, sl, r0, lsl #4
    4414:	50000100 	andpl	r0, r0, r0, lsl #2
    4418:	00003a32 	andeq	r3, r0, r2, lsr sl
    441c:	00003a36 	andeq	r3, r0, r6, lsr sl
    4420:	4a500001 	bmi	140442c <__ccfg+0x13e4484>
    4424:	4c00003a 	stcmi	0, cr0, [r0], {58}	; 0x3a
    4428:	0100003a 	tsteq	r0, sl, lsr r0
    442c:	3a4c5000 	bcc	1318434 <__ccfg+0x12f848c>
    4430:	3a4f0000 	bcc	13c4438 <__ccfg+0x13a4490>
    4434:	00010000 	andeq	r0, r1, r0
    4438:	00000052 	andeq	r0, r0, r2, asr r0
    443c:	00000000 	andeq	r0, r0, r0
    4440:	0039a200 	eorseq	sl, r9, r0, lsl #4
    4444:	0039a800 	eorseq	sl, r9, r0, lsl #16
    4448:	72000700 	andvc	r0, r0, #0, 14
    444c:	3fff0a00 	svccc	0x00ff0a00
    4450:	00009f1a 	andeq	r9, r0, sl, lsl pc
    4454:	00000000 	andeq	r0, r0, r0
    4458:	3a960000 	bcc	fe584460 <_estack+0xde57f460>
    445c:	3aa00000 	bcc	fe804464 <_estack+0xde7ff464>
    4460:	00090000 	andeq	r0, r9, r0
    4464:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    4468:	21200000 			; <UNDEFINED> instruction: 0x21200000
    446c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4470:	00000000 	andeq	r0, r0, r0
    4474:	003ae000 	eorseq	lr, sl, r0
    4478:	003ae800 	eorseq	lr, sl, r0, lsl #16
    447c:	50000100 	andpl	r0, r0, r0, lsl #2
    4480:	00003ae8 	andeq	r3, r0, r8, ror #21
    4484:	00003b08 	andeq	r3, r0, r8, lsl #22
    4488:	01f30004 	mvnseq	r0, r4
    448c:	00009f50 	andeq	r9, r0, r0, asr pc
    4490:	00000000 	andeq	r0, r0, r0
    4494:	3b080000 	blcc	20449c <__ccfg+0x1e44f4>
    4498:	3b300000 	blcc	c044a0 <__ccfg+0xbe44f8>
    449c:	00010000 	andeq	r0, r1, r0
    44a0:	003b3050 	eorseq	r3, fp, r0, asr r0
    44a4:	003b7000 	eorseq	r7, fp, r0
    44a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    44ac:	00003b70 	andeq	r3, r0, r0, ror fp
    44b0:	00003b78 	andeq	r3, r0, r8, ror fp
    44b4:	78500001 	ldmdavc	r0, {r0}^
    44b8:	c200003b 	andgt	r0, r0, #59	; 0x3b
    44bc:	0100003b 	tsteq	r0, fp, lsr r0
    44c0:	3bc25400 	blcc	ff0994c8 <_estack+0xdf0944c8>
    44c4:	3bfe0000 	blcc	fff844cc <_estack+0xdff7f4cc>
    44c8:	00040000 	andeq	r0, r4, r0
    44cc:	9f5001f3 	svcls	0x005001f3
    44d0:	00003bfe 	strdeq	r3, [r0], -lr
    44d4:	00003c02 	andeq	r3, r0, r2, lsl #24
    44d8:	02540001 	subseq	r0, r4, #1
    44dc:	5800003c 	stmdapl	r0, {r2, r3, r4, r5}
    44e0:	0400003c 	streq	r0, [r0], #-60	; 0xffffffc4
    44e4:	5001f300 	andpl	pc, r1, r0, lsl #6
    44e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44ec:	00000000 	andeq	r0, r0, r0
    44f0:	003b1e00 	eorseq	r1, fp, r0, lsl #28
    44f4:	003b6000 	eorseq	r6, fp, r0
    44f8:	53000100 	movwpl	r0, #256	; 0x100
	...
    4504:	00003b92 	muleq	r0, r2, fp
    4508:	00003b98 	muleq	r0, r8, fp
    450c:	00500001 	subseq	r0, r0, r1
    4510:	00000000 	andeq	r0, r0, r0
    4514:	c2000000 	andgt	r0, r0, #0
    4518:	c400003b 	strgt	r0, [r0], #-59	; 0xffffffc5
    451c:	0100003b 	tsteq	r0, fp, lsr r0
    4520:	3bc45000 	blcc	ff118528 <_estack+0xdf113528>
    4524:	3bd80000 	blcc	ff60452c <_estack+0xdf5ff52c>
    4528:	00010000 	andeq	r0, r1, r0
    452c:	00000054 	andeq	r0, r0, r4, asr r0
    4530:	00000000 	andeq	r0, r0, r0
    4534:	003bd800 	eorseq	sp, fp, r0, lsl #16
    4538:	003bf800 	eorseq	pc, fp, r0, lsl #16
    453c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4550:	00550001 	subseq	r0, r5, r1
    4554:	00000000 	andeq	r0, r0, r0
    4558:	03000000 	movweq	r0, #0
    455c:	9f7f7500 	svcls	0x007f7500
	...
    4568:	00550001 	subseq	r0, r5, r1
    456c:	00000000 	andeq	r0, r0, r0
    4570:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    4574:	7700003c 	smladxvc	r0, ip, r0, r0
    4578:	0100003c 	tsteq	r0, ip, lsr r0
    457c:	3c775000 	ldclcc	0, cr5, [r7], #-0
    4580:	3d380000 	ldccc	0, cr0, [r8, #-0]
    4584:	00010000 	andeq	r0, r1, r0
    4588:	003d3857 	eorseq	r3, sp, r7, asr r8
    458c:	003e7800 	eorseq	r7, lr, r0, lsl #16
    4590:	f3000400 	vshl.u8	d0, d0, d0
    4594:	009f5001 	addseq	r5, pc, r1
    4598:	00000000 	andeq	r0, r0, r0
    459c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    45a0:	f800003c 			; <UNDEFINED> instruction: 0xf800003c
    45a4:	0100003d 	tsteq	r0, sp, lsr r0
    45a8:	3dfa5000 	ldclcc	0, cr5, [sl]
    45ac:	3e340000 	cdpcc	0, 3, cr0, cr4, cr0, {0}
    45b0:	00010000 	andeq	r0, r1, r0
    45b4:	00000050 	andeq	r0, r0, r0, asr r0
    45b8:	00000000 	andeq	r0, r0, r0
    45bc:	003d2000 	eorseq	r2, sp, r0
    45c0:	003d2400 	eorseq	r2, sp, r0, lsl #8
    45c4:	70000300 	andvc	r0, r0, r0, lsl #6
    45c8:	3d249f71 	stccc	15, cr9, [r4, #-452]!	; 0xfffffe3c
    45cc:	3d2a0000 	stccc	0, cr0, [sl, #-0]
    45d0:	00010000 	andeq	r0, r1, r0
    45d4:	003d2a51 	eorseq	r2, sp, r1, asr sl
    45d8:	003d4a00 	eorseq	r4, sp, r0, lsl #20
    45dc:	91000200 	mrsls	r0, R8_usr
    45e0:	003d4a54 	eorseq	r4, sp, r4, asr sl
    45e4:	003d5600 	eorseq	r5, sp, r0, lsl #12
    45e8:	51000100 	mrspl	r0, (UNDEF: 16)
    45ec:	00003d56 	andeq	r3, r0, r6, asr sp
    45f0:	00003d58 	andeq	r3, r0, r8, asr sp
    45f4:	54910002 	ldrpl	r0, [r1], #2
    45f8:	00003d58 	andeq	r3, r0, r8, asr sp
    45fc:	00003d5a 	andeq	r3, r0, sl, asr sp
    4600:	5a510001 	bpl	144460c <__ccfg+0x1424664>
    4604:	0000003d 	andeq	r0, r0, sp, lsr r0
    4608:	0200003e 	andeq	r0, r0, #62	; 0x3e
    460c:	00549100 	subseq	r9, r4, r0, lsl #2
    4610:	00000000 	andeq	r0, r0, r0
    4614:	84000000 	strhi	r0, [r0], #-0
    4618:	de00003c 	mcrle	0, 0, r0, cr0, cr12, {1}
    461c:	0100003c 	tsteq	r0, ip, lsr r0
    4620:	3ce65100 	stfcce	f5, [r6]
    4624:	3ce80000 	stclcc	0, cr0, [r8]
    4628:	00010000 	andeq	r0, r1, r0
    462c:	00000051 	andeq	r0, r0, r1, asr r0
    4630:	00000000 	andeq	r0, r0, r0
    4634:	003cd600 	eorseq	sp, ip, r0, lsl #12
    4638:	003ce400 	eorseq	lr, ip, r0, lsl #8
    463c:	52000100 	andpl	r0, r0, #0, 2
    4640:	00003ce6 	andeq	r3, r0, r6, ror #25
    4644:	00003dc8 	andeq	r3, r0, r8, asr #27
    4648:	00520001 	subseq	r0, r2, r1
    464c:	00000000 	andeq	r0, r0, r0
    4650:	d6000000 	strle	r0, [r0], -r0
    4654:	be00003c 	mcrlt	0, 0, r0, cr0, cr12, {1}
    4658:	0100003d 	tsteq	r0, sp, lsr r0
    465c:	00005300 	andeq	r5, r0, r0, lsl #6
    4660:	00000000 	andeq	r0, r0, r0
    4664:	3c7c0000 	ldclcc	0, cr0, [ip], #-0
    4668:	3dd20000 	ldclcc	0, cr0, [r2]
    466c:	00010000 	andeq	r0, r1, r0
    4670:	00000055 	andeq	r0, r0, r5, asr r0
    4674:	00000000 	andeq	r0, r0, r0
    4678:	003c7800 	eorseq	r7, ip, r0, lsl #16
    467c:	003d0000 	eorseq	r0, sp, r0
    4680:	30000200 	andcc	r0, r0, r0, lsl #4
    4684:	003d009f 	mlaseq	sp, pc, r0, r0	; <UNPREDICTABLE>
    4688:	003e3400 	eorseq	r3, lr, r0, lsl #8
    468c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4698:	00003cf8 	strdeq	r3, [r0], -r8
    469c:	00003d02 	andeq	r3, r0, r2, lsl #26
    46a0:	00510001 	subseq	r0, r1, r1
    46a4:	00000000 	andeq	r0, r0, r0
    46a8:	20000000 	andcs	r0, r0, r0
    46ac:	7000003d 	andvc	r0, r0, sp, lsr r0
    46b0:	0200003d 	andeq	r0, r0, #61	; 0x3d
    46b4:	709f3000 	addsvc	r3, pc, r0
    46b8:	9000003d 	andls	r0, r0, sp, lsr r0
    46bc:	0100003d 	tsteq	r0, sp, lsr r0
    46c0:	3d905100 	ldfccs	f5, [r0]
    46c4:	3d960000 	ldccc	0, cr0, [r6]
    46c8:	00020000 	andeq	r0, r2, r0
    46cc:	3d969f30 	ldccc	15, cr9, [r6, #192]	; 0xc0
    46d0:	3dd00000 	ldclcc	0, cr0, [r0]
    46d4:	00010000 	andeq	r0, r1, r0
    46d8:	00000051 	andeq	r0, r0, r1, asr r0
    46dc:	00000000 	andeq	r0, r0, r0
    46e0:	003d4c00 	eorseq	r4, sp, r0, lsl #24
    46e4:	003d5000 	eorseq	r5, sp, r0
    46e8:	5e000100 	adfpls	f0, f0, f0
    46ec:	00003d58 	andeq	r3, r0, r8, asr sp
    46f0:	00003d5a 	andeq	r3, r0, sl, asr sp
    46f4:	5a5e0001 	bpl	1784700 <__ccfg+0x1764758>
    46f8:	6000003d 	andvs	r0, r0, sp, lsr r0
    46fc:	0100003d 	tsteq	r0, sp, lsr r0
    4700:	3d605100 	stfcce	f5, [r0, #-0]
    4704:	3d680000 	stclcc	0, cr0, [r8, #-0]
    4708:	00030000 	andeq	r0, r3, r0
    470c:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    4710:	00000000 	andeq	r0, r0, r0
    4714:	20000000 	andcs	r0, r0, r0
    4718:	4a00003d 	bmi	4814 <patchGenfskRfe+0x268>
    471c:	0200003d 	andeq	r0, r0, #61	; 0x3d
    4720:	4a9f3000 	bmi	fe7d0728 <_estack+0xde7cb728>
    4724:	5400003d 	strpl	r0, [r0], #-61	; 0xffffffc3
    4728:	0100003d 	tsteq	r0, sp, lsr r0
    472c:	3d545e00 	ldclcc	14, cr5, [r4, #-0]
    4730:	3d560000 	ldclcc	0, cr0, [r6, #-0]
    4734:	00050000 	andeq	r0, r5, r0
    4738:	26380071 			; <UNDEFINED> instruction: 0x26380071
    473c:	003d569f 	mlaseq	sp, pc, r6, r5	; <UNPREDICTABLE>
    4740:	003d5800 	eorseq	r5, sp, r0, lsl #16
    4744:	91000600 	tstls	r0, r0, lsl #12
    4748:	26380654 			; <UNDEFINED> instruction: 0x26380654
    474c:	003d589f 	mlaseq	sp, pc, r8, r5	; <UNPREDICTABLE>
    4750:	003d5a00 	eorseq	r5, sp, r0, lsl #20
    4754:	5e000100 	adfpls	f0, f0, f0
    4758:	00003d5a 	andeq	r3, r0, sl, asr sp
    475c:	00003d90 	muleq	r0, r0, sp
    4760:	54910006 	ldrpl	r0, [r1], #6
    4764:	9f263806 	svcls	0x00263806
    4768:	00003d90 	muleq	r0, r0, sp
    476c:	00003d96 	muleq	r0, r6, sp
    4770:	9f300002 	svcls	0x00300002
    4774:	00003d96 	muleq	r0, r6, sp
    4778:	00003e00 	andeq	r3, r0, r0, lsl #28
    477c:	005e0001 	subseq	r0, lr, r1
    4780:	00000000 	andeq	r0, r0, r0
    4784:	6c000000 	stcvs	0, cr0, [r0], {-0}
    4788:	9000003d 	andls	r0, r0, sp, lsr r0
    478c:	0100003d 	tsteq	r0, sp, lsr r0
    4790:	00005c00 	andeq	r5, r0, r0, lsl #24
    4794:	00000000 	andeq	r0, r0, r0
    4798:	3d9a0000 	ldccc	0, cr0, [sl]
    479c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    47a0:	00010000 	andeq	r0, r1, r0
    47a4:	0000005a 	andeq	r0, r0, sl, asr r0
    47a8:	00000000 	andeq	r0, r0, r0
    47ac:	003d9e00 	eorseq	r9, sp, r0, lsl #28
    47b0:	003dda00 	eorseq	sp, sp, r0, lsl #20
    47b4:	5c000100 	stfpls	f0, [r0], {-0}
    47b8:	00003dda 	ldrdeq	r3, [r0], -sl
    47bc:	00003dde 	ldrdeq	r3, [r0], -lr
    47c0:	00510001 	subseq	r0, r1, r1
    47c4:	00000000 	andeq	r0, r0, r0
    47c8:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    47cc:	e800003d 	stmda	r0, {r0, r2, r3, r4, r5}
    47d0:	1700003d 	smladxne	r0, sp, r0, r0
    47d4:	12007100 	andne	r7, r0, #0, 2
    47d8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    47dc:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    47e0:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    47e4:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    47e8:	9f131600 	svcls	0x00131600
	...
    47f4:	00003e08 	andeq	r3, r0, r8, lsl #28
    47f8:	00003e14 	andeq	r3, r0, r4, lsl lr
    47fc:	9f300002 	svcls	0x00300002
    4800:	00003e14 	andeq	r3, r0, r4, lsl lr
    4804:	00003e34 	andeq	r3, r0, r4, lsr lr
    4808:	00510001 	subseq	r0, r1, r1
    480c:	00000000 	andeq	r0, r0, r0
    4810:	0a000000 	beq	4818 <patchGenfskRfe+0x26c>
    4814:	0c00003e 	stceq	0, cr0, [r0], {62}	; 0x3e
    4818:	0100003e 	tsteq	r0, lr, lsr r0
    481c:	3e0c5300 	cdpcc	3, 0, cr5, cr12, cr0, {0}
    4820:	3e140000 	cdpcc	0, 1, cr0, cr4, cr0, {0}
    4824:	00020000 	andeq	r0, r2, r0
    4828:	3e149f4f 	cdpcc	15, 1, cr9, cr4, cr15, {2}
    482c:	3e240000 	cdpcc	0, 2, cr0, cr4, cr0, {0}
    4830:	00010000 	andeq	r0, r1, r0
    4834:	003e2453 	eorseq	r2, lr, r3, asr r4
    4838:	003e2800 	eorseq	r2, lr, r0, lsl #16
    483c:	73000500 	movwvc	r0, #1280	; 0x500
    4840:	9f253400 	svcls	0x00253400
    4844:	00003e28 	andeq	r3, r0, r8, lsr #28
    4848:	00003e2c 	andeq	r3, r0, ip, lsr #28
    484c:	00530001 	subseq	r0, r3, r1
    4850:	00000000 	andeq	r0, r0, r0
    4854:	20000000 	andcs	r0, r0, r0
    4858:	0000003d 	andeq	r0, r0, sp, lsr r0
    485c:	0600003e 			; <UNDEFINED> instruction: 0x0600003e
    4860:	139c0c00 	orrsne	r0, ip, #0, 24
    4864:	009f5000 	addseq	r5, pc, r0
    4868:	00000000 	andeq	r0, r0, r0
    486c:	8c000000 	stchi	0, cr0, [r0], {-0}
    4870:	9800003c 	stmdals	r0, {r2, r3, r4, r5}
    4874:	0100003c 	tsteq	r0, ip, lsr r0
    4878:	00005300 	andeq	r5, r0, r0, lsl #6
    487c:	00000000 	andeq	r0, r0, r0
    4880:	3cac0000 	stccc	0, cr0, [ip]
    4884:	3cb80000 	ldccc	0, cr0, [r8]
    4888:	00010000 	andeq	r0, r1, r0
    488c:	00000052 	andeq	r0, r0, r2, asr r0
    4890:	00000000 	andeq	r0, r0, r0
    4894:	003cc200 	eorseq	ip, ip, r0, lsl #4
    4898:	003cce00 	eorseq	ip, ip, r0, lsl #28
    489c:	52000100 	andpl	r0, r0, #0, 2
	...
    48a8:	00003cce 	andeq	r3, r0, lr, asr #25
    48ac:	00003dbe 			; <UNDEFINED> instruction: 0x00003dbe
    48b0:	00530001 	subseq	r0, r3, r1
    48b4:	00000000 	andeq	r0, r0, r0
    48b8:	86000000 	strhi	r0, [r0], -r0
    48bc:	9000003e 	andls	r0, r0, lr, lsr r0
    48c0:	0100003e 	tsteq	r0, lr, lsr r0
    48c4:	3e905000 	cdpcc	0, 9, cr5, cr0, cr0, {0}
    48c8:	3e9a0000 	cdpcc	0, 9, cr0, cr10, cr0, {0}
    48cc:	000e0000 	andeq	r0, lr, r0
    48d0:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    48d4:	2b141680 	blcs	50a2dc <__ccfg+0x4ea334>
    48d8:	16000128 	strne	r0, [r0], -r8, lsr #2
    48dc:	00009f13 	andeq	r9, r0, r3, lsl pc
    48e0:	00000000 	andeq	r0, r0, r0
    48e4:	3e800000 	cdpcc	0, 8, cr0, cr0, cr0, {0}
    48e8:	3eac0000 	cdpcc	0, 10, cr0, cr12, cr0, {0}
    48ec:	00010000 	andeq	r0, r1, r0
    48f0:	00000054 	andeq	r0, r0, r4, asr r0
    48f4:	00000000 	andeq	r0, r0, r0
    48f8:	003eb000 	eorseq	fp, lr, r0
    48fc:	003eb600 	eorseq	fp, lr, r0, lsl #12
    4900:	73001500 	movwvc	r1, #1280	; 0x500
    4904:	4b401200 	blmi	100910c <__ccfg+0xfe9164>
    4908:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    490c:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4910:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4914:	9f131600 	svcls	0x00131600
	...
    4920:	00003ebc 			; <UNDEFINED> instruction: 0x00003ebc
    4924:	00003ec6 	andeq	r3, r0, r6, asr #29
    4928:	00740017 	rsbseq	r0, r4, r7, lsl r0
    492c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    4930:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    4934:	4b401416 	blmi	1009994 <__ccfg+0xfe99ec>
    4938:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    493c:	13160001 	tstne	r6, #1
    4940:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4950:	52000100 	andpl	r0, r0, #0, 2
	...
    4964:	00500001 	subseq	r0, r0, r1
	...
    4974:	01000000 	mrseq	r0, (UNDEF: 0)
    4978:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    4988:	00010000 	andeq	r0, r1, r0
    498c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    499c:	70001600 	andvc	r1, r0, r0, lsl #12
    49a0:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    49a4:	244b4000 	strbcs	r4, [fp], #-0
    49a8:	00050c22 	andeq	r0, r5, r2, lsr #24
    49ac:	282d8000 	stmdacs	sp!, {pc}
    49b0:	13160001 	tstne	r6, #1
    49b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    49b8:	00000000 	andeq	r0, r0, r0
    49bc:	003ef000 	eorseq	pc, lr, r0
    49c0:	003f3200 	eorseq	r3, pc, r0, lsl #4
    49c4:	09000300 	stmdbeq	r0, {r8, r9}
    49c8:	3f329fff 	svccc	0x00329fff
    49cc:	3f3c0000 	svccc	0x003c0000
    49d0:	00010000 	andeq	r0, r1, r0
    49d4:	00000050 	andeq	r0, r0, r0, asr r0
    49d8:	00000000 	andeq	r0, r0, r0
    49dc:	003efc00 	eorseq	pc, lr, r0, lsl #24
    49e0:	003f0a00 	eorseq	r0, pc, r0, lsl #20
    49e4:	50000100 	andpl	r0, r0, r0, lsl #2
    49e8:	00003f0e 	andeq	r3, r0, lr, lsl #30
    49ec:	00003f2a 	andeq	r3, r0, sl, lsr #30
    49f0:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    49f4:	2e00003f 	mcrcs	0, 0, r0, cr0, cr15, {1}
    49f8:	0100003f 	tsteq	r0, pc, lsr r0
    49fc:	3f305000 	svccc	0x00305000
    4a00:	3f320000 	svccc	0x00320000
    4a04:	00010000 	andeq	r0, r1, r0
    4a08:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4a18:	09000300 	stmdbeq	r0, {r8, r9}
    4a1c:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    4a20:	00000000 	andeq	r0, r0, r0
    4a24:	00010000 	andeq	r0, r1, r0
    4a28:	00000050 	andeq	r0, r0, r0, asr r0
	...
    4a38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4a44:	00003f3c 	andeq	r3, r0, ip, lsr pc
    4a48:	00003f76 	andeq	r3, r0, r6, ror pc
    4a4c:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    4a50:	003f769f 	mlaseq	pc, pc, r6, r7	; <UNPREDICTABLE>
    4a54:	003f7a00 	eorseq	r7, pc, r0, lsl #20
    4a58:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    4a5c:	003f7a9f 	mlaseq	pc, pc, sl, r7	; <UNPREDICTABLE>
    4a60:	003f7e00 	eorseq	r7, pc, r0, lsl #28
    4a64:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    4a68:	003f7e9f 	mlaseq	pc, pc, lr, r7	; <UNPREDICTABLE>
    4a6c:	003f9c00 	eorseq	r9, pc, r0, lsl #24
    4a70:	09000300 	stmdbeq	r0, {r8, r9}
    4a74:	3f9c9fff 	svccc	0x009c9fff
    4a78:	3f9e0000 	svccc	0x009e0000
    4a7c:	00010000 	andeq	r0, r1, r0
    4a80:	003f9e50 	eorseq	r9, pc, r0, asr lr	; <UNPREDICTABLE>
    4a84:	003fa000 	eorseq	sl, pc, r0
    4a88:	09000300 	stmdbeq	r0, {r8, r9}
    4a8c:	3fa09fff 	svccc	0x00a09fff
    4a90:	3fa80000 	svccc	0x00a80000
    4a94:	00010000 	andeq	r0, r1, r0
    4a98:	00000050 	andeq	r0, r0, r0, asr r0
    4a9c:	00000000 	andeq	r0, r0, r0
    4aa0:	003f4c00 	eorseq	r4, pc, r0, lsl #24
    4aa4:	003fa400 	eorseq	sl, pc, r0, lsl #8
    4aa8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4ab4:	00003fc0 	andeq	r3, r0, r0, asr #31
    4ab8:	00003fc9 	andeq	r3, r0, r9, asr #31
    4abc:	c9500001 	ldmdbgt	r0, {r0}^
    4ac0:	de00003f 	mcrle	0, 0, r0, cr0, cr15, {1}
    4ac4:	0100003f 	tsteq	r0, pc, lsr r0
    4ac8:	3fde5400 	svccc	0x00de5400
    4acc:	3fe20000 	svccc	0x00e20000
    4ad0:	00040000 	andeq	r0, r4, r0
    4ad4:	9f5001f3 	svcls	0x005001f3
    4ad8:	00003fe2 	andeq	r3, r0, r2, ror #31
    4adc:	00003fe4 	andeq	r3, r0, r4, ror #31
    4ae0:	e4540001 	ldrb	r0, [r4], #-1
    4ae4:	e800003f 	stmda	r0, {r0, r1, r2, r3, r4, r5}
    4ae8:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    4aec:	5001f300 	andpl	pc, r1, r0, lsl #6
    4af0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4af4:	00000000 	andeq	r0, r0, r0
    4af8:	003fc000 	eorseq	ip, pc, r0
    4afc:	003fc900 	eorseq	ip, pc, r0, lsl #18
    4b00:	51000100 	mrspl	r0, (UNDEF: 16)
    4b04:	00003fc9 	andeq	r3, r0, r9, asr #31
    4b08:	00003fde 	ldrdeq	r3, [r0], -lr
    4b0c:	de550001 	cdple	0, 5, cr0, cr5, cr1, {0}
    4b10:	e200003f 	and	r0, r0, #63	; 0x3f
    4b14:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    4b18:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4b1c:	003fe29f 	mlaseq	pc, pc, r2, lr	; <UNPREDICTABLE>
    4b20:	003fe400 	eorseq	lr, pc, r0, lsl #8
    4b24:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    4b28:	00003fe4 	andeq	r3, r0, r4, ror #31
    4b2c:	00003fe8 	andeq	r3, r0, r8, ror #31
    4b30:	01f30004 	mvnseq	r0, r4
    4b34:	00009f51 	andeq	r9, r0, r1, asr pc
    4b38:	00000000 	andeq	r0, r0, r0
    4b3c:	3fca0000 	svccc	0x00ca0000
    4b40:	3fe10000 	svccc	0x00e10000
    4b44:	00050000 	andeq	r0, r5, r0
    4b48:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4b4c:	003fe29f 	mlaseq	pc, pc, r2, lr	; <UNPREDICTABLE>
    4b50:	003fe800 	eorseq	lr, pc, r0, lsl #16
    4b54:	70000500 	andvc	r0, r0, r0, lsl #10
    4b58:	9f293000 	svcls	0x00293000
	...
    4b64:	00003fe8 	andeq	r3, r0, r8, ror #31
    4b68:	00003fea 	andeq	r3, r0, sl, ror #31
    4b6c:	ea500001 	b	1404b78 <__ccfg+0x13e4bd0>
    4b70:	f000003f 			; <UNDEFINED> instruction: 0xf000003f
    4b74:	0400003f 	streq	r0, [r0], #-63	; 0xffffffc1
    4b78:	5001f300 	andpl	pc, r1, r0, lsl #6
    4b7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b80:	00000000 	andeq	r0, r0, r0
    4b84:	003fe800 	eorseq	lr, pc, r0, lsl #16
    4b88:	003fec00 	eorseq	lr, pc, r0, lsl #24
    4b8c:	51000100 	mrspl	r0, (UNDEF: 16)
    4b90:	00003fec 	andeq	r3, r0, ip, ror #31
    4b94:	00003ff0 	strdeq	r3, [r0], -r0
    4b98:	01f30004 	mvnseq	r0, r4
    4b9c:	00009f51 	andeq	r9, r0, r1, asr pc
    4ba0:	00000000 	andeq	r0, r0, r0
    4ba4:	3fe80000 	svccc	0x00e80000
    4ba8:	3fef0000 	svccc	0x00ef0000
    4bac:	00010000 	andeq	r0, r1, r0
    4bb0:	003fef52 	eorseq	lr, pc, r2, asr pc	; <UNPREDICTABLE>
    4bb4:	003ff000 	eorseq	pc, pc, r0
    4bb8:	f3000400 	vshl.u8	d0, d0, d0
    4bbc:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    4bcc:	01000000 	mrseq	r0, (UNDEF: 0)
    4bd0:	00005000 	andeq	r5, r0, r0
    4bd4:	00000000 	andeq	r0, r0, r0
    4bd8:	00040000 	andeq	r0, r4, r0
    4bdc:	9f5001f3 	svcls	0x005001f3
	...
    4bf0:	00510001 	subseq	r0, r1, r1
    4bf4:	00000000 	andeq	r0, r0, r0
    4bf8:	04000000 	streq	r0, [r0], #-0
    4bfc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4c00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4c10:	52000100 	andpl	r0, r0, #0, 2
	...
    4c1c:	01f30004 	mvnseq	r0, r4
    4c20:	00009f52 	andeq	r9, r0, r2, asr pc
    4c24:	00000000 	andeq	r0, r0, r0
    4c28:	00010000 	andeq	r0, r1, r0
    4c2c:	00000052 	andeq	r0, r0, r2, asr r0
    4c30:	00000000 	andeq	r0, r0, r0
    4c34:	f3001500 	vrshl.u8	d1, d0, d0
    4c38:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4c3c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4c40:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4c44:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4c48:	9f131600 	svcls	0x00131600
	...
    4c5c:	00530001 	subseq	r0, r3, r1
    4c60:	00000000 	andeq	r0, r0, r0
    4c64:	04000000 	streq	r0, [r0], #-0
    4c68:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4c6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4c7c:	70000400 	andvc	r0, r0, r0, lsl #8
    4c80:	009f0480 	addseq	r0, pc, r0, lsl #9
    4c84:	00000000 	andeq	r0, r0, r0
    4c88:	0d000000 	stceq	0, cr0, [r0, #-0]
    4c8c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4c90:	01f32431 	mvnseq	r2, r1, lsr r4
    4c94:	80232250 	eorhi	r2, r3, r0, asr r2
    4c98:	00009f04 	andeq	r9, r0, r4, lsl #30
    4c9c:	00000000 	andeq	r0, r0, r0
    4ca0:	00010000 	andeq	r0, r1, r0
    4ca4:	00000050 	andeq	r0, r0, r0, asr r0
    4ca8:	00000000 	andeq	r0, r0, r0
    4cac:	f3005200 	vhsub.u8	d5, d0, d0
    4cb0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4cb4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4cb8:	f3048023 	vhadd.u8	d8, d4, d19
    4cbc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4cc0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4cc4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cc8:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    4ccc:	13160001 	tstne	r6, #1
    4cd0:	f3048423 	vshl.u8	d8, d19, d4
    4cd4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4cd8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4cdc:	f3048023 	vhadd.u8	d8, d4, d19
    4ce0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4ce4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4ce8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cec:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    4cf0:	13160001 	tstne	r6, #1
    4cf4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4cf8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    4cfc:	13160001 	tstne	r6, #1
    4d00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d10:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4d1c:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    4d20:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4d24:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4d28:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4d2c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4d30:	f3131600 	vmax.u16	d1, d3, d0
    4d34:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4d38:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    4d3c:	0001282e 	andeq	r2, r1, lr, lsr #16
    4d40:	01f31316 	mvnseq	r1, r6, lsl r3
    4d44:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    4d48:	13160001 	tstne	r6, #1
    4d4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4d68:	01f30004 	mvnseq	r0, r4
    4d6c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4d7c:	00010000 	andeq	r0, r1, r0
    4d80:	00000051 	andeq	r0, r0, r1, asr r0
    4d84:	00000000 	andeq	r0, r0, r0
    4d88:	f3000400 	vshl.u8	d0, d0, d0
    4d8c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4da0:	00005200 	andeq	r5, r0, r0, lsl #4
    4da4:	00000000 	andeq	r0, r0, r0
    4da8:	00040000 	andeq	r0, r4, r0
    4dac:	9f5201f3 	svcls	0x005201f3
	...
    4db8:	00520001 	subseq	r0, r2, r1
    4dbc:	00000000 	andeq	r0, r0, r0
    4dc0:	1b000000 	blne	4dc8 <patchImageGenfsk+0x168>
    4dc4:	5201f300 	andpl	pc, r1, #0, 6
    4dc8:	01f32540 	mvnseq	r2, r0, asr #10
    4dcc:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    4dd0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4dd4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4dd8:	01282b80 	smlawbeq	r8, r0, fp, r2
    4ddc:	9f131600 	svcls	0x00131600
	...
    4df0:	00530001 	subseq	r0, r3, r1
    4df4:	00000000 	andeq	r0, r0, r0
    4df8:	04000000 	streq	r0, [r0], #-0
    4dfc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4e00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e04:	00000000 	andeq	r0, r0, r0
    4e08:	53000100 	movwpl	r0, #256	; 0x100
	...
    4e14:	01f3001b 	mvnseq	r0, fp, lsl r0
    4e18:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    4e1c:	01f35301 	mvnseq	r5, r1, lsl #6
    4e20:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4e24:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4e28:	282b8000 	stmdacs	fp!, {pc}
    4e2c:	13160001 	tstne	r6, #1
    4e30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4e40:	91000200 	mrsls	r0, R8_usr
	...
    4e4c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    4e60:	70000400 	andvc	r0, r0, r0, lsl #8
    4e64:	009f0480 	addseq	r0, pc, r0, lsl #9
    4e68:	00000000 	andeq	r0, r0, r0
    4e6c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4e70:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4e74:	01f32431 	mvnseq	r2, r1, lsr r4
    4e78:	80232250 	eorhi	r2, r3, r0, asr r2
    4e7c:	00009f04 	andeq	r9, r0, r4, lsl #30
    4e80:	00000000 	andeq	r0, r0, r0
    4e84:	00010000 	andeq	r0, r1, r0
    4e88:	00000050 	andeq	r0, r0, r0, asr r0
    4e8c:	00000000 	andeq	r0, r0, r0
    4e90:	f3006400 	vshl.u8	d6, d0, d0
    4e94:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4e98:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4e9c:	f3048023 	vhadd.u8	d8, d4, d19
    4ea0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4ea4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4ea8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4eac:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4eb0:	8000000f 	andhi	r0, r0, pc
    4eb4:	0001282c 	andeq	r2, r1, ip, lsr #16
    4eb8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    4ebc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4ec0:	01f32431 	mvnseq	r2, r1, lsr r4
    4ec4:	80232250 	eorhi	r2, r3, r0, asr r2
    4ec8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4ecc:	01f32431 	mvnseq	r2, r1, lsr r4
    4ed0:	01f32250 	mvnseq	r2, r0, asr r2
    4ed4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4ed8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4edc:	282c8000 	stmdacs	ip!, {pc}
    4ee0:	13160001 	tstne	r6, #1
    4ee4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4ee8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4eec:	8000000f 	andhi	r0, r0, pc
    4ef0:	0001282b 	andeq	r2, r1, fp, lsr #16
    4ef4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4f04:	0a000000 	beq	4f0c <ratable+0x20>
    4f08:	0a007400 	beq	21f10 <__ccfg+0x1f68>
    4f0c:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    4f10:	009f2400 	addseq	r2, pc, r0, lsl #8
    4f14:	00000000 	andeq	r0, r0, r0
    4f18:	0c000000 	stceq	0, cr0, [r0], {-0}
    4f1c:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    4f20:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4f24:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    4f28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4f2c:	00000000 	andeq	r0, r0, r0
    4f30:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    4f34:	0a029400 	beq	a9f3c <__ccfg+0x89f94>
    4f38:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    4f3c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4f40:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4f44:	4b405301 	blmi	1019b50 <__ccfg+0xff9ba8>
    4f48:	0f0c2224 	svceq	0x000c2224
    4f4c:	2b800000 	blcs	fe004f54 <_estack+0xddffff54>
    4f50:	16000128 	strne	r0, [r0], -r8, lsr #2
    4f54:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    4f64:	01000000 	mrseq	r0, (UNDEF: 0)
    4f68:	00005000 	andeq	r5, r0, r0
    4f6c:	00000000 	andeq	r0, r0, r0
    4f70:	00040000 	andeq	r0, r4, r0
    4f74:	9f5001f3 	svcls	0x005001f3
	...
    4f88:	00510001 	subseq	r0, r1, r1
    4f8c:	00000000 	andeq	r0, r0, r0
    4f90:	04000000 	streq	r0, [r0], #-0
    4f94:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4f98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4fa8:	52000100 	andpl	r0, r0, #0, 2
	...
    4fb4:	00540001 	subseq	r0, r4, r1
    4fb8:	00000000 	andeq	r0, r0, r0
    4fbc:	15000000 	strne	r0, [r0, #-0]
    4fc0:	5201f300 	andpl	pc, r1, #0, 6
    4fc4:	01f32540 	mvnseq	r2, r0, asr #10
    4fc8:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    4fcc:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4fd0:	16000128 	strne	r0, [r0], -r8, lsr #2
    4fd4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4fe4:	00010000 	andeq	r0, r1, r0
    4fe8:	00000055 	andeq	r0, r0, r5, asr r0
    4fec:	00000000 	andeq	r0, r0, r0
    4ff0:	f3001d00 	vpadd.f32	d1, d0, d0
    4ff4:	01f35001 	mvnseq	r5, r1
    4ff8:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    4ffc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    5000:	f3225101 	vrhadd.u32	d5, d2, d1
    5004:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    5008:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    500c:	9f131600 	svcls	0x00131600
	...
    5020:	00750006 	rsbseq	r0, r5, r6
    5024:	9f1a0074 	svcls	0x001a0074
	...
    5038:	00550001 	subseq	r0, r5, r1
    503c:	00000000 	andeq	r0, r0, r0
    5040:	1d000000 	stcne	0, cr0, [r0, #-0]
    5044:	5001f300 	andpl	pc, r1, r0, lsl #6
    5048:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    504c:	01f30223 	mvnseq	r0, r3, lsr #4
    5050:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5054:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    5058:	2e302540 	cfneg32cs	mvfx2, mvfx0
    505c:	16000128 	strne	r0, [r0], -r8, lsr #2
    5060:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5070:	00070000 	andeq	r0, r7, r0
    5074:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    5078:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    5088:	05000000 	streq	r0, [r0, #-0]
    508c:	30007000 	andcc	r7, r0, r0
    5090:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    50a0:	00010000 	andeq	r0, r1, r0
    50a4:	00000050 	andeq	r0, r0, r0, asr r0
    50a8:	00000000 	andeq	r0, r0, r0
    50ac:	f3000400 	vshl.u8	d0, d0, d0
    50b0:	009f5001 	addseq	r5, pc, r1
	...
    50c0:	01000000 	mrseq	r0, (UNDEF: 0)
    50c4:	00005100 	andeq	r5, r0, r0, lsl #2
    50c8:	00000000 	andeq	r0, r0, r0
    50cc:	00040000 	andeq	r0, r4, r0
    50d0:	9f5101f3 	svcls	0x005101f3
	...
    50e4:	00520001 	subseq	r0, r2, r1
    50e8:	00000000 	andeq	r0, r0, r0
    50ec:	01000000 	mrseq	r0, (UNDEF: 0)
    50f0:	00005400 	andeq	r5, r0, r0, lsl #8
    50f4:	00000000 	andeq	r0, r0, r0
    50f8:	001b0000 	andseq	r0, fp, r0
    50fc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    5100:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    5104:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    5108:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    510c:	8000000f 	andhi	r0, r0, pc
    5110:	0001282b 	andeq	r2, r1, fp, lsr #16
    5114:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    5124:	01000000 	mrseq	r0, (UNDEF: 0)
    5128:	00005300 	andeq	r5, r0, r0, lsl #6
    512c:	00000000 	andeq	r0, r0, r0
    5130:	00010000 	andeq	r0, r1, r0
    5134:	00000055 	andeq	r0, r0, r5, asr r0
    5138:	00000000 	andeq	r0, r0, r0
    513c:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    5140:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    5144:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    5148:	4b405301 	blmi	1019d54 <__ccfg+0xff9dac>
    514c:	0f0c2224 	svceq	0x000c2224
    5150:	2b800000 	blcs	fe005158 <_estack+0xde000158>
    5154:	16000128 	strne	r0, [r0], -r8, lsr #2
    5158:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    5168:	00010000 	andeq	r0, r1, r0
    516c:	00000056 	andeq	r0, r0, r6, asr r0
    5170:	00000000 	andeq	r0, r0, r0
    5174:	70000600 	andvc	r0, r0, r0, lsl #12
    5178:	22007100 	andcs	r7, r0, #0, 2
    517c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    5180:	00000000 	andeq	r0, r0, r0
    5184:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    5190:	01f30023 	mvnseq	r0, r3, lsr #32
    5194:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5198:	f3022322 	vcgt.u8	d2, d2, d18
    519c:	01f35001 	mvnseq	r5, r1
    51a0:	01f32251 	mvnseq	r2, r1, asr r2
    51a4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    51a8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    51ac:	282b8000 	stmdacs	fp!, {pc}
    51b0:	13160001 	tstne	r6, #1
    51b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    51c4:	76000600 	strvc	r0, [r0], -r0, lsl #12
    51c8:	1a007400 	bne	221d0 <__ccfg+0x2228>
    51cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    51d0:	00000000 	andeq	r0, r0, r0
    51d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    51e8:	00560001 	subseq	r0, r6, r1
    51ec:	00000000 	andeq	r0, r0, r0
    51f0:	23000000 	movwcs	r0, #0
    51f4:	5001f300 	andpl	pc, r1, r0, lsl #6
    51f8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    51fc:	01f30223 	mvnseq	r0, r3, lsr #4
    5200:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    5204:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    5208:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    520c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    5210:	01282b80 	smlawbeq	r8, r0, fp, r2
    5214:	9f131600 	svcls	0x00131600
	...
    5228:	00760007 	rsbseq	r0, r6, r7
    522c:	1affff0a 	bne	4e5c <patchImageGenfsk+0x1fc>
    5230:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5240:	70000500 	andvc	r0, r0, r0, lsl #10
    5244:	9f293000 	svcls	0x00293000
	...
    5260:	00000052 	andeq	r0, r0, r2, asr r0
    5264:	52510001 	subspl	r0, r1, #1
    5268:	96000000 	strls	r0, [r0], -r0
    526c:	04000000 	streq	r0, [r0], #-0
    5270:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    5274:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5278:	00009800 	andeq	r9, r0, r0, lsl #16
    527c:	51000100 	mrspl	r0, (UNDEF: 16)
    5280:	00000098 	muleq	r0, r8, r0
    5284:	000000a0 	andeq	r0, r0, r0, lsr #1
    5288:	01f30004 	mvnseq	r0, r4
    528c:	00a09f51 	adceq	r9, r0, r1, asr pc
    5290:	00a60000 	adceq	r0, r6, r0
    5294:	00010000 	andeq	r0, r1, r0
    5298:	0000a651 	andeq	sl, r0, r1, asr r6
    529c:	0000aa00 	andeq	sl, r0, r0, lsl #20
    52a0:	f3000400 	vshl.u8	d0, d0, d0
    52a4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    52b0:	02020000 	andeq	r0, r2, #0
    52b4:	00000000 	andeq	r0, r0, r0
    52b8:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    52d8:	2a000000 	bcs	52e0 <__exidx_end+0x3b0>
    52dc:	01000000 	mrseq	r0, (UNDEF: 0)
    52e0:	002a5200 	eoreq	r5, sl, r0, lsl #4
    52e4:	00400000 	subeq	r0, r0, r0
    52e8:	00090000 	andeq	r0, r9, r0
    52ec:	00720071 	rsbseq	r0, r2, r1, ror r0
    52f0:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    52f4:	0000409f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    52f8:	00004200 	andeq	r4, r0, r0, lsl #4
    52fc:	71000b00 	tstvc	r0, r0, lsl #22
    5300:	22007200 	andcs	r7, r0, #0, 4
    5304:	401c0074 	andsmi	r0, ip, r4, ror r0
    5308:	00429f1c 	subeq	r9, r2, ip, lsl pc
    530c:	004c0000 	subeq	r0, ip, r0
    5310:	00090000 	andeq	r0, r9, r0
    5314:	00720071 	rsbseq	r0, r2, r1, ror r0
    5318:	1c007422 	cfstrsne	mvf7, [r0], {34}	; 0x22
    531c:	0000569f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    5320:	00005a00 	andeq	r5, r0, r0, lsl #20
    5324:	53000100 	movwpl	r0, #256	; 0x100
    5328:	0000005a 	andeq	r0, r0, sl, asr r0
    532c:	0000005e 	andeq	r0, r0, lr, asr r0
    5330:	00730006 	rsbseq	r0, r3, r6
    5334:	9f1c0076 	svcls	0x001c0076
    5338:	0000005e 	andeq	r0, r0, lr, asr r0
    533c:	00000060 	andeq	r0, r0, r0, rrx
    5340:	00730008 	rsbseq	r0, r3, r8
    5344:	341c0076 	ldrcc	r0, [ip], #-118	; 0xffffff8a
    5348:	00609f1c 	rsbeq	r9, r0, ip, lsl pc
    534c:	006a0000 	rsbeq	r0, sl, r0
    5350:	00060000 	andeq	r0, r6, r0
    5354:	00760073 	rsbseq	r0, r6, r3, ror r0
    5358:	006a9f1c 	rsbeq	r9, sl, ip, lsl pc
    535c:	00720000 	rsbseq	r0, r2, r0
    5360:	00080000 	andeq	r0, r8, r0
    5364:	1a3f0072 	bne	fc5534 <__ccfg+0xfa558c>
    5368:	9f1c0076 	svcls	0x001c0076
    536c:	00000072 	andeq	r0, r0, r2, ror r0
    5370:	00000076 	andeq	r0, r0, r6, ror r0
    5374:	01f30009 	mvnseq	r0, r9
    5378:	761a3f52 	ssaxvc	r3, sl, r2
    537c:	769f1c00 	ldrvc	r1, [pc], r0, lsl #24
    5380:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5384:	01000000 	mrseq	r0, (UNDEF: 0)
    5388:	00785200 	rsbseq	r5, r8, r0, lsl #4
    538c:	00800000 	addeq	r0, r0, r0
    5390:	00010000 	andeq	r0, r1, r0
    5394:	00008056 	andeq	r8, r0, r6, asr r0
    5398:	00008200 	andeq	r8, r0, r0, lsl #4
    539c:	73000700 	movwvc	r0, #1792	; 0x700
    53a0:	00762000 	rsbseq	r2, r6, r0
    53a4:	00829f22 	addeq	r9, r2, r2, lsr #30
    53a8:	00880000 	addeq	r0, r8, r0
    53ac:	00060000 	andeq	r0, r6, r0
    53b0:	00730076 	rsbseq	r0, r3, r6, ror r0
    53b4:	00889f1c 	addeq	r9, r8, ip, lsl pc
    53b8:	008c0000 	addeq	r0, ip, r0
    53bc:	00070000 	andeq	r0, r7, r0
    53c0:	76200073 			; <UNDEFINED> instruction: 0x76200073
    53c4:	969f2200 	ldrls	r2, [pc], r0, lsl #4
    53c8:	9a000000 	bls	53d0 <__exidx_end+0x4a0>
    53cc:	01000000 	mrseq	r0, (UNDEF: 0)
    53d0:	009a5200 	addseq	r5, sl, r0, lsl #4
    53d4:	00a00000 	adceq	r0, r0, r0
    53d8:	00010000 	andeq	r0, r1, r0
    53dc:	0000a056 	andeq	sl, r0, r6, asr r0
    53e0:	0000a200 	andeq	sl, r0, r0, lsl #4
    53e4:	52000100 	andpl	r0, r0, #0, 2
    53e8:	000000a2 	andeq	r0, r0, r2, lsr #1
    53ec:	000000a6 	andeq	r0, r0, r6, lsr #1
    53f0:	a6560001 	ldrbge	r0, [r6], -r1
    53f4:	aa000000 	bge	53fc <__exidx_end+0x4cc>
    53f8:	01000000 	mrseq	r0, (UNDEF: 0)
    53fc:	00005300 	andeq	r5, r0, r0, lsl #6
    5400:	00000000 	andeq	r0, r0, r0
    5404:	00020000 	andeq	r0, r2, r0
    5408:	00000000 	andeq	r0, r0, r0
    540c:	00010100 	andeq	r0, r1, r0, lsl #2
	...
    5418:	00760000 	rsbseq	r0, r6, r0
    541c:	00010000 	andeq	r0, r1, r0
    5420:	00007650 	andeq	r7, r0, r0, asr r6
    5424:	00008000 	andeq	r8, r0, r0
    5428:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    542c:	00000080 	andeq	r0, r0, r0, lsl #1
    5430:	00000082 	andeq	r0, r0, r2, lsl #1
    5434:	00750008 	rsbseq	r0, r5, r8
    5438:	23220073 			; <UNDEFINED> instruction: 0x23220073
    543c:	00829f01 	addeq	r9, r2, r1, lsl #30
    5440:	00820000 	addeq	r0, r2, r0
    5444:	00060000 	andeq	r0, r6, r0
    5448:	00730075 	rsbseq	r0, r3, r5, ror r0
    544c:	00829f22 	addeq	r9, r2, r2, lsr #30
    5450:	008c0000 	addeq	r0, ip, r0
    5454:	00080000 	andeq	r0, r8, r0
    5458:	00730075 	rsbseq	r0, r3, r5, ror r0
    545c:	9f012322 	svcls	0x00012322
    5460:	00000096 	muleq	r0, r6, r0
    5464:	00000098 	muleq	r0, r8, r0
    5468:	98500001 	ldmdals	r0, {r0}^
    546c:	a0000000 	andge	r0, r0, r0
    5470:	01000000 	mrseq	r0, (UNDEF: 0)
    5474:	00a05500 	adceq	r5, r0, r0, lsl #10
    5478:	00aa0000 	adceq	r0, sl, r0
    547c:	00010000 	andeq	r0, r1, r0
    5480:	00000050 	andeq	r0, r0, r0, asr r0
    5484:	00000000 	andeq	r0, r0, r0
    5488:	00000300 	andeq	r0, r0, r0, lsl #6
    548c:	00000000 	andeq	r0, r0, r0
    5490:	01010000 	mrseq	r0, (UNDEF: 1)
	...
    549c:	00005200 	andeq	r5, r0, r0, lsl #4
    54a0:	51000100 	mrspl	r0, (UNDEF: 16)
    54a4:	00000052 	andeq	r0, r0, r2, asr r0
    54a8:	00000076 	andeq	r0, r0, r6, ror r0
    54ac:	01f30004 	mvnseq	r0, r4
    54b0:	00769f51 	rsbseq	r9, r6, r1, asr pc
    54b4:	00800000 	addeq	r0, r0, r0
    54b8:	00010000 	andeq	r0, r1, r0
    54bc:	00008051 	andeq	r8, r0, r1, asr r0
    54c0:	00008200 	andeq	r8, r0, r0, lsl #4
    54c4:	71000800 	tstvc	r0, r0, lsl #16
    54c8:	22007300 	andcs	r7, r0, #0, 6
    54cc:	829f0123 	addshi	r0, pc, #-1073741816	; 0xc0000008
    54d0:	82000000 	andhi	r0, r0, #0
    54d4:	06000000 	streq	r0, [r0], -r0
    54d8:	73007100 	movwvc	r7, #256	; 0x100
    54dc:	829f2200 	addshi	r2, pc, #0, 4
    54e0:	8c000000 	stchi	0, cr0, [r0], {-0}
    54e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    54e8:	73007100 	movwvc	r7, #256	; 0x100
    54ec:	01232200 			; <UNDEFINED> instruction: 0x01232200
    54f0:	0000969f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    54f4:	0000a600 	andeq	sl, r0, r0, lsl #12
    54f8:	51000100 	mrspl	r0, (UNDEF: 16)
    54fc:	000000a6 	andeq	r0, r0, r6, lsr #1
    5500:	000000aa 	andeq	r0, r0, sl, lsr #1
    5504:	01f30004 	mvnseq	r0, r4
    5508:	00009f51 	andeq	r9, r0, r1, asr pc
    550c:	00000000 	andeq	r0, r0, r0
    5510:	01000000 	mrseq	r0, (UNDEF: 0)
    5514:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
    5518:	00010102 	andeq	r0, r1, r2, lsl #2
    551c:	00000000 	andeq	r0, r0, r0
    5520:	00010100 	andeq	r0, r1, r0, lsl #2
    5524:	00000000 	andeq	r0, r0, r0
    5528:	002a0000 	eoreq	r0, sl, r0
    552c:	002c0000 	eoreq	r0, ip, r0
    5530:	00090000 	andeq	r0, r9, r0
    5534:	00710070 	rsbseq	r0, r1, r0, ror r0
    5538:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    553c:	00002c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
    5540:	00003a00 	andeq	r3, r0, r0, lsl #20
    5544:	70000b00 	andvc	r0, r0, r0, lsl #22
    5548:	1c007100 	stfnes	f7, [r0], {-0}
    554c:	23220074 			; <UNDEFINED> instruction: 0x23220074
    5550:	003a9f04 	eorseq	r9, sl, r4, lsl #30
    5554:	003a0000 	eorseq	r0, sl, r0
    5558:	000b0000 	andeq	r0, fp, r0
    555c:	00710070 	rsbseq	r0, r1, r0, ror r0
    5560:	2200741c 	andcs	r7, r0, #28, 8	; 0x1c000000
    5564:	3a9f0823 	bcc	fe7c75f8 <_estack+0xde7c25f8>
    5568:	40000000 	andmi	r0, r0, r0
    556c:	0b000000 	bleq	5574 <__exidx_end+0x644>
    5570:	71007000 	mrsvc	r7, (UNDEF: 0)
    5574:	00741c00 	rsbseq	r1, r4, r0, lsl #24
    5578:	9f0c2322 	svcls	0x000c2322
    557c:	00000040 	andeq	r0, r0, r0, asr #32
    5580:	00000042 	andeq	r0, r0, r2, asr #32
    5584:	0070000b 	rsbseq	r0, r0, fp
    5588:	741c0071 	ldrvc	r0, [ip], #-113	; 0xffffff8f
    558c:	10232200 	eorne	r2, r3, r0, lsl #4
    5590:	0000429f 	muleq	r0, pc, r2	; <UNPREDICTABLE>
    5594:	00004c00 	andeq	r4, r0, r0, lsl #24
    5598:	70000900 	andvc	r0, r0, r0, lsl #18
    559c:	1c007100 	stfnes	f7, [r0], {-0}
    55a0:	9f220074 	svcls	0x00220074
    55a4:	00000056 	andeq	r0, r0, r6, asr r0
    55a8:	0000005a 	andeq	r0, r0, sl, asr r0
    55ac:	5a550001 	bpl	15455b8 <__ccfg+0x1525610>
    55b0:	5a000000 	bpl	55b8 <__exidx_end+0x688>
    55b4:	06000000 	streq	r0, [r0], -r0
    55b8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    55bc:	5a9f2200 	bpl	fe7cddc4 <_estack+0xde7c8dc4>
    55c0:	60000000 	andvs	r0, r0, r0
    55c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    55c8:	76007500 	strvc	r7, [r0], -r0, lsl #10
    55cc:	04232200 	strteq	r2, [r3], #-512	; 0xfffffe00
    55d0:	0000609f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    55d4:	00007400 	andeq	r7, r0, r0, lsl #8
    55d8:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    55dc:	22007600 	andcs	r7, r0, #0, 12
    55e0:	0000749f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    55e4:	00007800 	andeq	r7, r0, r0, lsl #16
    55e8:	7c000b00 			; <UNDEFINED> instruction: 0x7c000b00
    55ec:	70243401 	eorvc	r3, r4, r1, lsl #8
    55f0:	00762200 	rsbseq	r2, r6, r0, lsl #4
    55f4:	00a69f22 	adceq	r9, r6, r2, lsr #30
    55f8:	00aa0000 	adceq	r0, sl, r0
    55fc:	00010000 	andeq	r0, r1, r0
    5600:	00000055 	andeq	r0, r0, r5, asr r0
    5604:	00000000 	andeq	r0, r0, r0
    5608:	01010000 	mrseq	r0, (UNDEF: 1)
    560c:	02020101 	andeq	r0, r2, #1073741824	; 0x40000000
    5610:	00000101 	andeq	r0, r0, r1, lsl #2
    5614:	00000000 	andeq	r0, r0, r0
    5618:	00000101 	andeq	r0, r0, r1, lsl #2
    561c:	00000000 	andeq	r0, r0, r0
    5620:	00002a00 	andeq	r2, r0, r0, lsl #20
    5624:	00002c00 	andeq	r2, r0, r0, lsl #24
    5628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    562c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5630:	0000003a 	andeq	r0, r0, sl, lsr r0
    5634:	04740003 	ldrbteq	r0, [r4], #-3
    5638:	00003a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    563c:	00003a00 	andeq	r3, r0, r0, lsl #20
    5640:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    5644:	003a9f08 	eorseq	r9, sl, r8, lsl #30
    5648:	00400000 	subeq	r0, r0, r0
    564c:	00030000 	andeq	r0, r3, r0
    5650:	409f0c74 	addsmi	r0, pc, r4, ror ip	; <UNPREDICTABLE>
    5654:	42000000 	andmi	r0, r0, #0
    5658:	03000000 	movweq	r0, #0
    565c:	9f107400 	svcls	0x00107400
    5660:	00000042 	andeq	r0, r0, r2, asr #32
    5664:	0000004c 	andeq	r0, r0, ip, asr #32
    5668:	54540001 	ldrbpl	r0, [r4], #-1
    566c:	5a000000 	bpl	5674 <__exidx_end+0x744>
    5670:	01000000 	mrseq	r0, (UNDEF: 0)
    5674:	005a5100 	subseq	r5, sl, r0, lsl #2
    5678:	005a0000 	subseq	r0, sl, r0
    567c:	00060000 	andeq	r0, r6, r0
    5680:	00760071 	rsbseq	r0, r6, r1, ror r0
    5684:	005a9f22 	subseq	r9, sl, r2, lsr #30
    5688:	00600000 	rsbeq	r0, r0, r0
    568c:	00080000 	andeq	r0, r8, r0
    5690:	00760071 	rsbseq	r0, r6, r1, ror r0
    5694:	9f042322 	svcls	0x00042322
    5698:	00000060 	andeq	r0, r0, r0, rrx
    569c:	00000076 	andeq	r0, r0, r6, ror r0
    56a0:	00710006 	rsbseq	r0, r1, r6
    56a4:	9f220076 	svcls	0x00220076
    56a8:	00000076 	andeq	r0, r0, r6, ror r0
    56ac:	00000078 	andeq	r0, r0, r8, ror r0
    56b0:	017c000c 	cmneq	ip, ip
    56b4:	01f32434 	mvnseq	r2, r4, lsr r4
    56b8:	00762251 	rsbseq	r2, r6, r1, asr r2
    56bc:	00a69f22 	adceq	r9, r6, r2, lsr #30
    56c0:	00aa0000 	adceq	r0, sl, r0
    56c4:	00010000 	andeq	r0, r1, r0
    56c8:	00000051 	andeq	r0, r0, r1, asr r0
	...
    56d4:	1a010000 	bne	456dc <__ccfg+0x25734>
    56d8:	1c000000 	stcne	0, cr0, [r0], {-0}
    56dc:	01000000 	mrseq	r0, (UNDEF: 0)
    56e0:	001c5400 	andseq	r5, ip, r0, lsl #8
    56e4:	00240000 	eoreq	r0, r4, r0
    56e8:	00020000 	andeq	r0, r2, r0
    56ec:	00270073 	eoreq	r0, r7, r3, ror r0
    56f0:	00380000 	eorseq	r0, r8, r0
    56f4:	00040000 	andeq	r0, r4, r0
    56f8:	9f7ed874 	svcls	0x007ed874
	...
    5708:	00000004 	andeq	r0, r0, r4
    570c:	00000006 	andeq	r0, r0, r6
    5710:	00730002 	rsbseq	r0, r3, r2
    5714:	00000006 	andeq	r0, r0, r6
    5718:	00000008 	andeq	r0, r0, r8
    571c:	00530001 	subseq	r0, r3, r1
	...
    5730:	0c000000 	stceq	0, cr0, [r0], {-0}
    5734:	01000000 	mrseq	r0, (UNDEF: 0)
    5738:	000c5000 	andeq	r5, ip, r0
    573c:	00240000 	eoreq	r0, r4, r0
    5740:	00010000 	andeq	r0, r1, r0
    5744:	00002454 	andeq	r2, r0, r4, asr r4
    5748:	00002a00 	andeq	r2, r0, r0, lsl #20
    574c:	f3000400 	vshl.u8	d0, d0, d0
    5750:	2a9f5001 	bcs	fe7d975c <_estack+0xde7d475c>
    5754:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    5758:	01000000 	mrseq	r0, (UNDEF: 0)
    575c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    5768:	00010100 	andeq	r0, r1, r0, lsl #2
    576c:	00000000 	andeq	r0, r0, r0
    5770:	000a0000 	andeq	r0, sl, r0
    5774:	00010000 	andeq	r0, r1, r0
    5778:	00000a50 	andeq	r0, r0, r0, asr sl
    577c:	00001600 	andeq	r1, r0, r0, lsl #12
    5780:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5784:	00000016 	andeq	r0, r0, r6, lsl r0
    5788:	0000001c 	andeq	r0, r0, ip, lsl r0
    578c:	01f30004 	mvnseq	r0, r4
    5790:	001c9f50 	andseq	r9, ip, r0, asr pc
    5794:	002c0000 	eoreq	r0, ip, r0
    5798:	00010000 	andeq	r0, r1, r0
    579c:	00000055 	andeq	r0, r0, r5, asr r0
	...
    57ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    57b0:	01000000 	mrseq	r0, (UNDEF: 0)
    57b4:	000c5100 	andeq	r5, ip, r0, lsl #2
    57b8:	00110000 	andseq	r0, r1, r0
    57bc:	00010000 	andeq	r0, r1, r0
    57c0:	00001150 	andeq	r1, r0, r0, asr r1
    57c4:	00002c00 	andeq	r2, r0, r0, lsl #24
    57c8:	f3000400 	vshl.u8	d0, d0, d0
    57cc:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    57dc:	11000000 	mrsne	r0, (UNDEF: 0)
    57e0:	01000000 	mrseq	r0, (UNDEF: 0)
    57e4:	00115200 	andseq	r5, r1, r0, lsl #4
    57e8:	002c0000 	eoreq	r0, ip, r0
    57ec:	00040000 	andeq	r0, r4, r0
    57f0:	9f5201f3 	svcls	0x005201f3
	...
    57fc:	00120000 	andseq	r0, r2, r0
    5800:	002c0000 	eoreq	r0, ip, r0
    5804:	00010000 	andeq	r0, r1, r0
    5808:	00000050 	andeq	r0, r0, r0, asr r0
	...
    5814:	20000101 	andcs	r0, r0, r1, lsl #2
    5818:	34000000 	strcc	r0, [r0], #-0
    581c:	01000000 	mrseq	r0, (UNDEF: 0)
    5820:	00345000 	eorseq	r5, r4, r0
    5824:	00ae0000 	adceq	r0, lr, r0
    5828:	00010000 	andeq	r0, r1, r0
    582c:	0000ae55 	andeq	sl, r0, r5, asr lr
    5830:	0000b800 	andeq	fp, r0, r0, lsl #16
    5834:	f3000400 	vshl.u8	d0, d0, d0
    5838:	009f5001 	addseq	r5, pc, r1
    583c:	00000000 	andeq	r0, r0, r0
    5840:	01000000 	mrseq	r0, (UNDEF: 0)
    5844:	00003a00 	andeq	r3, r0, r0, lsl #20
    5848:	00004100 	andeq	r4, r0, r0, lsl #2
    584c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    585c:	00360000 	eorseq	r0, r6, r0
    5860:	003c0000 	eorseq	r0, ip, r0
    5864:	00010000 	andeq	r0, r1, r0
    5868:	00003c51 	andeq	r3, r0, r1, asr ip
    586c:	00004800 	andeq	r4, r0, r0, lsl #16
    5870:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    5874:	00000048 	andeq	r0, r0, r8, asr #32
    5878:	00000050 	andeq	r0, r0, r0, asr r0
    587c:	00510001 	subseq	r0, r1, r1
	...
    5888:	76000000 	strvc	r0, [r0], -r0
    588c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5890:	01000000 	mrseq	r0, (UNDEF: 0)
    5894:	00785100 	rsbseq	r5, r8, r0, lsl #2
    5898:	00840000 	addeq	r0, r4, r0
    589c:	00010000 	andeq	r0, r1, r0
    58a0:	00000054 	andeq	r0, r0, r4, asr r0
    58a4:	00000000 	andeq	r0, r0, r0
    58a8:	76000100 	strvc	r0, [r0], -r0, lsl #2
    58ac:	7d000000 	stcvc	0, cr0, [r0, #-0]
    58b0:	01000000 	mrseq	r0, (UNDEF: 0)
    58b4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    58c0:	00010100 	andeq	r0, r1, r0, lsl #2
    58c4:	00000000 	andeq	r0, r0, r0
    58c8:	0000000f 	andeq	r0, r0, pc
    58cc:	0f500001 	svceq	0x00500001
    58d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    58d4:	01000000 	mrseq	r0, (UNDEF: 0)
    58d8:	00185500 	andseq	r5, r8, r0, lsl #10
    58dc:	001e0000 	andseq	r0, lr, r0
    58e0:	00040000 	andeq	r0, r4, r0
    58e4:	9f5001f3 	svcls	0x005001f3
	...
    58f0:	01000000 	mrseq	r0, (UNDEF: 0)
    58f4:	00000001 	andeq	r0, r0, r1
    58f8:	00060000 	andeq	r0, r6, r0
    58fc:	00010000 	andeq	r0, r1, r0
    5900:	00000651 	andeq	r0, r0, r1, asr r6
    5904:	00001800 	andeq	r1, r0, r0, lsl #16
    5908:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    590c:	00000018 	andeq	r0, r0, r8, lsl r0
    5910:	0000001e 	andeq	r0, r0, lr, lsl r0
    5914:	01f30004 	mvnseq	r0, r4
    5918:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    5928:	000e0000 	andeq	r0, lr, r0
    592c:	00060000 	andeq	r0, r6, r0
    5930:	51049350 	tstpl	r4, r0, asr r3
    5934:	000e0493 	muleq	lr, r3, r4
    5938:	00540000 	subseq	r0, r4, r0
    593c:	00060000 	andeq	r0, r6, r0
    5940:	00f503f3 	ldrshteq	r0, [r5], #51	; 0x33
    5944:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    5954:	003e0000 	eorseq	r0, lr, r0
    5958:	00060000 	andeq	r0, r6, r0
    595c:	53049352 	movwpl	r9, #17234	; 0x4352
    5960:	003e0493 	mlaseq	lr, r3, r4, r0
    5964:	00540000 	subseq	r0, r4, r0
    5968:	00060000 	andeq	r0, r6, r0
    596c:	02f503f3 	rscseq	r0, r5, #-872415229	; 0xcc000003
    5970:	00009f25 	andeq	r9, r0, r5, lsr #30
    5974:	00000000 	andeq	r0, r0, r0
    5978:	02000000 	andeq	r0, r0, #0
    597c:	0000001a 	andeq	r0, r0, sl, lsl r0
    5980:	0000004a 	andeq	r0, r0, sl, asr #32
    5984:	00560001 	subseq	r0, r6, r1
    5988:	00000000 	andeq	r0, r0, r0
    598c:	01000000 	mrseq	r0, (UNDEF: 0)
    5990:	00000000 	andeq	r0, r0, r0
    5994:	00001a00 	andeq	r1, r0, r0, lsl #20
    5998:	00001e00 	andeq	r1, r0, r0, lsl #28
    599c:	70000600 	andvc	r0, r0, r0, lsl #12
    59a0:	1e007400 	cfcpysne	mvf7, mvf0
    59a4:	00001e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    59a8:	00002200 	andeq	r2, r0, r0, lsl #4
    59ac:	50000100 	andpl	r0, r0, r0, lsl #2
    59b0:	00000026 	andeq	r0, r0, r6, lsr #32
    59b4:	00000044 	andeq	r0, r0, r4, asr #32
    59b8:	00540001 	subseq	r0, r4, r1
	...
    59c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    59c8:	36000000 	strcc	r0, [r0], -r0
    59cc:	01000000 	mrseq	r0, (UNDEF: 0)
    59d0:	00365500 	eorseq	r5, r6, r0, lsl #10
    59d4:	003e0000 	eorseq	r0, lr, r0
    59d8:	000c0000 	andeq	r0, ip, r0
    59dc:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    59e0:	007c2540 	rsbseq	r2, ip, r0, asr #10
    59e4:	9f1e2540 	svcls	0x001e2540
	...
    59f0:	00200000 	eoreq	r0, r0, r0
    59f4:	003c0000 	eorseq	r0, ip, r0
    59f8:	00010000 	andeq	r0, r1, r0
    59fc:	00000051 	andeq	r0, r0, r1, asr r0
	...
    5a08:	00001200 	andeq	r1, r0, r0, lsl #4
    5a0c:	00001e00 	andeq	r1, r0, r0, lsl #28
    5a10:	50000100 	andpl	r0, r0, r0, lsl #2
    5a14:	0000001e 	andeq	r0, r0, lr, lsl r0
    5a18:	00000054 	andeq	r0, r0, r4, asr r0
    5a1c:	007c0007 	rsbseq	r0, ip, r7
    5a20:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5a24:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5a30:	00001600 	andeq	r1, r0, r0, lsl #12
    5a34:	00001c00 	andeq	r1, r0, r0, lsl #24
    5a38:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    5a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
    5a40:	0000003e 	andeq	r0, r0, lr, lsr r0
    5a44:	00720007 	rsbseq	r0, r2, r7
    5a48:	25402440 	strbcs	r2, [r0, #-1088]	; 0xfffffbc0
    5a4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5a58:	00001400 	andeq	r1, r0, r0, lsl #8
    5a5c:	00002000 	andeq	r2, r0, r0
    5a60:	51000100 	mrspl	r0, (UNDEF: 16)
    5a64:	00000020 	andeq	r0, r0, r0, lsr #32
    5a68:	00000054 	andeq	r0, r0, r4, asr r0
    5a6c:	007c0005 	rsbseq	r0, ip, r5
    5a70:	009f2540 	addseq	r2, pc, r0, asr #10
    5a74:	00000000 	andeq	r0, r0, r0
    5a78:	01000000 	mrseq	r0, (UNDEF: 0)
    5a7c:	16000000 	strne	r0, [r0], -r0
    5a80:	24000000 	strcs	r0, [r0], #-0
    5a84:	01000000 	mrseq	r0, (UNDEF: 0)
    5a88:	00245400 	eoreq	r5, r4, r0, lsl #8
    5a8c:	003e0000 	eorseq	r0, lr, r0
    5a90:	00050000 	andeq	r0, r5, r0
    5a94:	25400072 	strbcs	r0, [r0, #-114]	; 0xffffff8e
    5a98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    5aa8:	00000400 	andeq	r0, r0, r0, lsl #8
    5aac:	50000100 	andpl	r0, r0, r0, lsl #2
    5ab0:	00000004 	andeq	r0, r0, r4
    5ab4:	00000010 	andeq	r0, r0, r0, lsl r0
    5ab8:	01f30004 	mvnseq	r0, r4
    5abc:	00009f50 	andeq	r9, r0, r0, asr pc
    5ac0:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
}
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	0000005c 	andeq	r0, r0, ip, asr r0
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000124 	andeq	r0, r0, r4, lsr #2
  24:	00000018 	andeq	r0, r0, r8, lsl r0
  28:	0000013c 	andeq	r0, r0, ip, lsr r1
  2c:	000002cc 	andeq	r0, r0, ip, asr #5
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	13200002 			; <UNDEFINED> instruction: 0x13200002
			i = k;
  40:	00040000 	andeq	r0, r4, r0
				j->Next = k;
  44:	00000000 	andeq	r0, r0, r0
  48:	00000408 	andeq	r0, r0, r8, lsl #8
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	00000414 	andeq	r0, r0, r4, lsl r4
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	00000440 	andeq	r0, r0, r0, asr #8
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
		b->length - b->u.pointers.head - b->u.pointers.tail;
  60:	0000046c 	andeq	r0, r0, ip, ror #8
	b->u.pointers.tail =
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
}
  68:	000004a8 	andeq	r0, r0, r8, lsr #9
		return NULL;
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	000004e8 	andeq	r0, r0, r8, ror #9
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	0000053c 	andeq	r0, r0, ip, lsr r5
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	0000057c 	andeq	r0, r0, ip, ror r5
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
  90:	000005a4 	andeq	r0, r0, r4, lsr #11
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
  9c:	00000050 	andeq	r0, r0, r0, asr r0
  a0:	00000708 	andeq	r0, r0, r8, lsl #14
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	0000075c 	andeq	r0, r0, ip, asr r7
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	00000794 	muleq	r0, r4, r7
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	000008a4 	andeq	r0, r0, r4, lsr #17
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
fsm transmitter (message * messagePtr) {
  c8:	00000964 	andeq	r0, r0, r4, ror #18
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	000009a8 	andeq	r0, r0, r8, lsr #19
}
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	000009e4 	andeq	r0, r0, r4, ror #19
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	00000a88 	andeq	r0, r0, r8, lsl #21
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000c40 	andeq	r0, r0, r0, asr #24
        spkt [0] = 0;
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
  f0:	00000000 	andeq	r0, r0, r0
        *p = messagePtr->messageType; p++; // insert message type
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
        *p = messagePtr->requestNumber; p++; // insert request number
  f8:	00000c64 	andeq	r0, r0, r4, ror #24
        *p = messagePtr->senderId; p++; // insert sender ID
  fc:	00000258 	andeq	r0, r0, r8, asr r2
        *p = messagePtr->destinationId; p++; // insert receiver ID
 100:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
        tcv_endp (spkt);
 104:	00000030 	andeq	r0, r0, r0, lsr r0
        ser_outf(Transmit_Message, "Message Sent\n\r");
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
}
 110:	00000eec 	andeq	r0, r0, ip, ror #29
        finish;
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
char randomNumber() {
 124:	27b00002 	ldrcs	r0, [r0, r2]!
   srand((unsigned) time(&t));
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
   return (char)rand();
 130:	00000f4c 	andeq	r0, r0, ip, asr #30
}
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
 138:	00000f88 	andeq	r0, r0, r8, lsl #31
fsm root {
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
 140:	00001008 	andeq	r1, r0, r8
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
 150:	00001020 	andeq	r1, r0, r0, lsr #32
 154:	00000010 	andeq	r0, r0, r0, lsl r0
 158:	00001030 	andeq	r1, r0, r0, lsr r0
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
 160:	00000000 	andeq	r0, r0, r0
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	0000105c 	andeq	r1, r0, ip, asr r0
 16c:	00000006 	andeq	r0, r0, r6
        recordCount = 0;
 170:	00001064 	andeq	r1, r0, r4, rrx
        nodeId = 1;
 174:	000000cc 	andeq	r0, r0, ip, asr #1
 178:	00001130 	andeq	r1, r0, r0, lsr r1
        groupId = 1;
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	00001144 	andeq	r1, r0, r4, asr #2
        messagePtr = (message *) umalloc(sizeof(message));
 184:	00000034 	andeq	r0, r0, r4, lsr r0
        phys_cc1350(0, MAX_PACKET_LENGTH);
 188:	00001178 	andeq	r1, r0, r8, ror r1
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
 190:	00000000 	andeq	r0, r0, r0
        tcv_plug(0, &plug_null);
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
 198:	000011ac 	andeq	r1, r0, ip, lsr #3
        sfd = tcv_open(WNONE, 0, 0);
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
 1a0:	000011d0 	ldrdeq	r1, [r0], -r0
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 1a8:	00000000 	andeq	r0, r0, r0
        sfd = tcv_open(WNONE, 0, 0);
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
		tcv_control(sfd, PHYSOPT_ON, NULL);
 1b0:	00000000 	andeq	r0, r0, r0
		if (sfd < 0) {
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
			diag("Cannot open tcv interface");
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
			halt();
 1c0:	00001208 	andeq	r1, r0, r8, lsl #4
        currentProtocol = IDLE;
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
 1c8:	00000000 	andeq	r0, r0, r0
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
 1d0:	0000122c 	andeq	r1, r0, ip, lsr #4
 1d4:	0000000e 	andeq	r0, r0, lr
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
        ser_outf(Options, menu);
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Choice, "%c", &choice);
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
        switch (choice)
 1f8:	0000123a 	andeq	r1, r0, sl, lsr r2
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	0000124e 	andeq	r1, r0, lr, asr #4
 204:	0000000e 	andeq	r0, r0, lr
 208:	0000125c 	andeq	r1, r0, ip, asr r2
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	00001280 	andeq	r1, r0, r0, lsl #5
 214:	0000009c 	muleq	r0, ip, r0
 218:	0000131c 	andeq	r1, r0, ip, lsl r3
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	0000136c 	andeq	r1, r0, ip, ror #6
 224:	00000048 	andeq	r0, r0, r8, asr #32
        proceed Menu_Header;
 228:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
 22c:	00000050 	andeq	r0, r0, r0, asr r0
        ser_outf(Set_Group_ID, "New Group ID: ");
 230:	00000000 	andeq	r0, r0, r0
 234:	00000058 	andeq	r0, r0, r8, asr r0
        ser_inf(Get_Group_ID, "%d", &groupId);
 238:	00001404 	andeq	r1, r0, r4, lsl #8
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
        proceed Menu_Header;
 240:	000014ac 	andeq	r1, r0, ip, lsr #9
 244:	00000034 	andeq	r0, r0, r4, lsr r0
        ser_outf(Set_Node_ID, "New node ID (1-25):");
 248:	000014e0 	andeq	r1, r0, r0, ror #9
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_inf(Get_Node_ID, "%d", &nodeId);
 250:	00000000 	andeq	r0, r0, r0
 254:	00000030 	andeq	r0, r0, r0, lsr r0
 258:	00000000 	andeq	r0, r0, r0
    if (node < 1 || node > 25) {
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
 260:	000014f8 	strdeq	r1, [r0], -r8
            proceed Set_Node_ID;
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
        proceed Menu_Header;
 268:	00001634 	andeq	r1, r0, r4, lsr r6
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
        receiverId = 0;
 278:	00000104 	andeq	r0, r0, r4, lsl #2
        proceed Transmit_Message;
 27c:	39d30002 	ldmibcc	r3, {r1}^
        currentProtocol = CREATE_RECORD;
 280:	00040000 	andeq	r0, r4, r0
        ser_outf(Create_Record, "Receiver node ID (1-25):");
 284:	00000000 	andeq	r0, r0, r0
 288:	00001658 	andeq	r1, r0, r8, asr r6
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
 290:	0000166e 	andeq	r1, r0, lr, ror #12
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
    if (node < 1 || node > 25) {
 298:	00001688 	andeq	r1, r0, r8, lsl #13
 29c:	0000000e 	andeq	r0, r0, lr
            proceed Create_Record;
 2a0:	00001698 	muleq	r0, r8, r6
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
 2a8:	000016e4 	andeq	r1, r0, r4, ror #13
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
 2b0:	00001770 	andeq	r1, r0, r0, ror r7
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
 2b8:	000017e0 	andeq	r1, r0, r0, ror #15
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
 2c0:	00000000 	andeq	r0, r0, r0
        proceed Transmit_Message;
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
 2c8:	000018a0 	andeq	r1, r0, r0, lsr #17
        proceed Transmit_Message;
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
        currentProtocol = DELETE_RECORD;
 2d0:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
        currentProtocol = DELETE_RECORD;
 2d8:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
        proceed Get_Receiving_Node;
 2e0:	00000000 	andeq	r0, r0, r0
        currentProtocol = RETRIEVE_RECORD;
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
 2e8:	000018c4 	andeq	r1, r0, r4, asr #17
        currentProtocol = RETRIEVE_RECORD;
 2ec:	000000bc 	strheq	r0, [r0], -ip
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
 2f0:	00000000 	andeq	r0, r0, r0
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
 300:	00000000 	andeq	r0, r0, r0
 304:	0000000a 	andeq	r0, r0, sl
    if (node < 1 || node > 25) {
 308:	00001980 	andeq	r1, r0, r0, lsl #19
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
            proceed Prompt_Recieving_Node;
 310:	000019ac 	andeq	r1, r0, ip, lsr #19
        ser_outf(Prompt_Record_Index, "Record index:");
 314:	00000060 	andeq	r0, r0, r0, rrx
 318:	00000000 	andeq	r0, r0, r0
        char desiredRecordIndex = -1;
 31c:	00000040 	andeq	r0, r0, r0, asr #32
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
 320:	00000000 	andeq	r0, r0, r0
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
        char desiredRecordIndex = -1;
 328:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
        messagePtr->recordIndex = desiredRecordIndex;
 330:	00000000 	andeq	r0, r0, r0
 334:	00000006 	andeq	r0, r0, r6
 338:	00001a0c 	andeq	r1, r0, ip, lsl #20
        proceed Transmit_Message;
 33c:	00000068 	andeq	r0, r0, r8, rrx
        messagePtr -> senderGroupId = groupId;
 340:	00001a74 	andeq	r1, r0, r4, ror sl
 344:	00000050 	andeq	r0, r0, r0, asr r0
 348:	00001ac4 	andeq	r1, r0, r4, asr #21
        messagePtr -> messageType = currentProtocol;
 34c:	0000009c 	muleq	r0, ip, r0
 350:	00001b60 	andeq	r1, r0, r0, ror #22
        messagePtr -> requestNumber = randomNumber();
 354:	00000040 	andeq	r0, r0, r0, asr #32
        messagePtr -> senderId = nodeId;
 358:	00001ba0 	andeq	r1, r0, r0, lsr #23
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
        call transmitter(messagePtr, Menu_Header);
 360:	00001bd4 	ldrdeq	r1, [r0], -r4
        messagePtr -> destinationId = receiverId;
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00000000 	andeq	r0, r0, r0
        call transmitter(messagePtr, Menu_Header);
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
 370:	00001c10 	andeq	r1, r0, r0, lsl ip
 374:	00000002 	andeq	r0, r0, r2
	...
            break;
 380:	00000034 	andeq	r0, r0, r4, lsr r0
            proceed Set_Node_ID;
 384:	4d0a0002 	stcmi	0, cr0, [sl, #-8]
            proceed Find_Neighbours;
 388:	00040000 	andeq	r0, r4, r0
            proceed Create_Record;
 38c:	00000000 	andeq	r0, r0, r0
            proceed Delete_Record;
 390:	00001c12 	andeq	r1, r0, r2, lsl ip
            proceed Retrieve_Record;
 394:	00000002 	andeq	r0, r0, r2
            diag("Reset Local Storage");
 398:	00001c14 	andeq	r1, r0, r4, lsl ip
            break;
 39c:	00000002 	andeq	r0, r0, r2
            diag("Reset Local Storage");
 3a0:	00001c16 	andeq	r1, r0, r6, lsl ip
 3a4:	00000002 	andeq	r0, r0, r2
 3a8:	00001c18 	andeq	r1, r0, r8, lsl ip
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
 3bc:	4e820002 	cdpmi	0, 8, cr0, cr2, cr2, {0}
 3c0:	00040000 	andeq	r0, r4, r0
	...
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
 3d4:	53bd0002 			; <UNDEFINED> instruction: 0x53bd0002
 3d8:	00040000 	andeq	r0, r4, r0
	...
 3e4:	00000002 	andeq	r0, r0, r2
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
 3fc:	58c10002 	stmiapl	r1, {r1}^
 400:	00040000 	andeq	r0, r4, r0
	...
	adddevfunc (ioreq_uart_a, devnum);
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
 410:	00000000 	andeq	r0, r0, r0
void udelay (volatile word n) {
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
	while (n) {
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
}
 424:	5dbb0002 	ldcpl	0, cr0, [fp, #8]!
	while (n--);
 428:	00040000 	andeq	r0, r4, r0
 42c:	00000000 	andeq	r0, r0, r0
 430:	00001c64 	andeq	r1, r0, r4, ror #24
		n--;
 434:	00000034 	andeq	r0, r0, r4, lsr r0
 438:	00001c98 	muleq	r0, r8, ip
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
void mdelay (volatile word n) {
 440:	00001cc8 	andeq	r1, r0, r8, asr #25
 444:	00000018 	andeq	r0, r0, r8, lsl r0
	while (n) {
 448:	00001ce0 	andeq	r1, r0, r0, ror #25
 44c:	00000054 	andeq	r0, r0, r4, asr r0
}
 450:	00001d34 	andeq	r1, r0, r4, lsr sp
		udelay (999);
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00001d74 	andeq	r1, r0, r4, ror sp
		n--;
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	00001d98 	muleq	r0, r8, sp
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	00001dac 	andeq	r1, r0, ip, lsr #27
void __pi_ondomain (lword d) {
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.effpdm > 1)
 474:	00000064 	andeq	r0, r0, r4, rrx
 478:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
	PRCMPowerDomainOn (d);
 480:	00000000 	andeq	r0, r0, r0
 484:	000000ec 	andeq	r0, r0, ip, ror #1
 488:	00000000 	andeq	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 48c:	00000002 	andeq	r0, r0, r2
 490:	00000000 	andeq	r0, r0, r0
 494:	00000004 	andeq	r0, r0, r4
	__pi_systat.ondmns |= d;
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
}
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
	PRCMPowerDomainOff (d);
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
 4b4:	68660002 	stmdavs	r6!, {r1}^
 4b8:	00040000 	andeq	r0, r4, r0
 4bc:	00000000 	andeq	r0, r0, r0
	if (d & PRCM_DOMAIN_RFCORE) {
 4c0:	00001dc0 	andeq	r1, r0, r0, asr #27
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
			__pi_systat.effpdm = __pi_systat.reqpdm;
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d4:	6c7c0002 	ldclvs	0, cr0, [ip], #-8
	__pi_systat.ondmns &= ~d;
 4d8:	00040000 	andeq	r0, r4, r0
 4dc:	00000000 	andeq	r0, r0, r0
}
 4e0:	00001e38 	andeq	r1, r0, r8, lsr lr
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
	diag ("SYSERR: %x, %s", ec, m);
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
 4f4:	70cc0002 	sbcvc	r0, ip, r2
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	00001e8c 	andeq	r1, r0, ip, lsl #29
		all_leds_blink;
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
 510:	0000006c 	andeq	r0, r0, ip, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 514:	751c0002 	ldrvc	r0, [ip, #-2]
 518:	00040000 	andeq	r0, r4, r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	00001eec 	andeq	r1, r0, ip, ror #29
 524:	00000020 	andeq	r0, r0, r0, lsr #32
 528:	00001f0c 	andeq	r1, r0, ip, lsl #30
	while (1) {
 52c:	00000190 	muleq	r0, r0, r1
 530:	0000209c 	muleq	r0, ip, r0
 534:	00000048 	andeq	r0, r0, r8, asr #32
 538:	000020e4 	andeq	r2, r0, r4, ror #1
void tci_run_delay_timer () {
 53c:	00000024 	andeq	r0, r0, r4, lsr #32
	setdel = __pi_mintk - __pi_old;
 540:	00002108 	andeq	r2, r0, r8, lsl #2
 544:	0000005c 	andeq	r0, r0, ip, asr r0
 548:	00002164 	andeq	r2, r0, r4, ror #2
 54c:	00000038 	andeq	r0, r0, r8, lsr r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 550:	0000219c 	muleq	r0, ip, r1
 554:	00000180 	andeq	r0, r0, r0, lsl #3
 558:	0000231c 	andeq	r2, r0, ip, lsl r3
 55c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 560:	000023ec 	andeq	r2, r0, ip, ror #7
	sti_tim;
 564:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
 568:	000025dc 	ldrdeq	r2, [r0], -ip
 56c:	00000070 	andeq	r0, r0, r0, ror r0
 570:	0000264c 	andeq	r2, r0, ip, asr #12
 574:	00000174 	andeq	r0, r0, r4, ror r1
	...
	cli_aux;
 580:	00000044 	andeq	r0, r0, r4, asr #32
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 584:	99940002 	ldmibls	r4, {r1}
 588:	00040000 	andeq	r0, r4, r0
 58c:	00000000 	andeq	r0, r0, r0
 590:	000027c0 	andeq	r2, r0, r0, asr #15
	sti_aux;
 594:	00000024 	andeq	r0, r0, r4, lsr #32
}
 598:	000027e4 	andeq	r2, r0, r4, ror #15
 59c:	00000024 	andeq	r0, r0, r4, lsr #32
 5a0:	00002808 	andeq	r2, r0, r8, lsl #16
void AONRTCIntHandler () {
 5a4:	00000008 	andeq	r0, r0, r8
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 5a8:	00002810 	andeq	r2, r0, r0, lsl r8
 5ac:	00000004 	andeq	r0, r0, r4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 5b0:	00002814 	andeq	r2, r0, r4, lsl r8
		if (__pi_utims [0] == 0)
 5b4:	00000004 	andeq	r0, r0, r4
 5b8:	00002818 	andeq	r2, r0, r8, lsl r8
		if (*(__pi_utims [0])) {
 5bc:	00000048 	andeq	r0, r0, r8, asr #32
	...
		if (__pi_utims [1] == 0)
 5c8:	0000001c 	andeq	r0, r0, ip, lsl r0
		if (*(__pi_utims [1])) {
 5cc:	a0c90002 	sbcge	r0, r9, r2
			aux_timer_inactive = 0;
 5d0:	00040000 	andeq	r0, r4, r0
			(*(__pi_utims [1]))--;
 5d4:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
 5d8:	00002860 	andeq	r2, r0, r0, ror #16
		if (*(__pi_utims [2])) {
 5dc:	00000070 	andeq	r0, r0, r0, ror r0
	...
			if (*(__pi_utims [3])) {
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
				aux_timer_inactive = 0;
 5ec:	a4fa0002 	ldrbtge	r0, [sl], #2
				(*(__pi_utims [3]))--;
 5f0:	00040000 	andeq	r0, r4, r0
	if (__pi_systat.ledsts) {
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	000028d0 	ldrdeq	r2, [r0], -r0
		if (__pi_systat.ledblc++ == 0) {
 5fc:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
			if (__pi_systat.ledblk) {
 608:	0000002c 	andeq	r0, r0, ip, lsr #32
 60c:	a93e0002 	ldmdbge	lr!, {r1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 610:	00040000 	andeq	r0, r4, r0
 614:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x2)
 618:	000029ec 	andeq	r2, r0, ip, ror #19
 61c:	00000020 	andeq	r0, r0, r0, lsr #32
 620:	00002a0c 	andeq	r2, r0, ip, lsl #20
				if (__pi_systat.ledsts & 0x4)
 624:	00000230 	andeq	r0, r0, r0, lsr r2
				__pi_systat.ledblk = 0;
 628:	00002c3c 	andeq	r2, r0, ip, lsr ip
 62c:	00000050 	andeq	r0, r0, r0, asr r0
	...
				__pi_systat.ledblc = 200;
 638:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (events & AON_RTC_EVFLAGS_CH0) {
 63c:	af320002 	svcge	0x00320002
		cli_tim;
 640:	00040000 	andeq	r0, r4, r0
		__pi_new += setdel;
 644:	00000000 	andeq	r0, r0, r0
 648:	00002c8c 	andeq	r2, r0, ip, lsl #25
		setdel = 0;
 64c:	00000390 	muleq	r0, r0, r3
	...
		RISE_N_SHINE;
 658:	00000014 	andeq	r0, r0, r4, lsl r0
 65c:	b4c50002 	strblt	r0, [r5], #2
		aux_timer_inactive = 1;
 660:	00040000 	andeq	r0, r4, r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 670:	00000024 	andeq	r0, r0, r4, lsr #32
				if (__pi_systat.ledsts & 0x2)
 674:	d4b30002 	ldrtle	r0, [r3], #2
 678:	00040000 	andeq	r0, r4, r0
 67c:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x8)
 680:	0000301c 	andeq	r3, r0, ip, lsl r0
				__pi_systat.ledblk = 1;
 684:	00000028 	andeq	r0, r0, r8, lsr #32
 688:	00000000 	andeq	r0, r0, r0
		if (aux_timer_inactive) {
 68c:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
			cli_aux;
 698:	0000001c 	andeq	r0, r0, ip, lsl r0
 69c:	d6410002 	strble	r0, [r1], -r2
 6a0:	00040000 	andeq	r0, r4, r0
 6a4:	00000000 	andeq	r0, r0, r0
 6a8:	00003044 	andeq	r3, r0, r4, asr #32
 6ac:	00000030 	andeq	r0, r0, r0, lsr r0
	...
word tci_update_delay_ticks (Boolean force) {
 6b8:	00000024 	andeq	r0, r0, r4, lsr #32
	cli_tim;
 6bc:	d71a0002 	ldrle	r0, [sl, -r2]
 6c0:	00040000 	andeq	r0, r4, r0
	if (setdel) {
 6c4:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6c8:	00003074 	andeq	r3, r0, r4, ror r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 6cc:	00000020 	andeq	r0, r0, r0, lsr #32
 6d0:	00003094 	muleq	r0, r4, r0
 6d4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	return NO;
 6e0:	0000003c 	andeq	r0, r0, ip, lsr r0
			setdel = 0;
 6e4:	d8610002 	stmdale	r1!, {r1}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6e8:	00040000 	andeq	r0, r4, r0
 6ec:	00000000 	andeq	r0, r0, r0
}
 6f0:	000030ac 	andeq	r3, r0, ip, lsr #1
		sti_tim;
 6f4:	00000008 	andeq	r0, r0, r8
		return YES;
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	00000006 	andeq	r0, r0, r6
 700:	000030b4 	strheq	r3, [r0], -r4
 704:	00000008 	andeq	r0, r0, r8
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 708:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
 70c:	00000006 	andeq	r0, r0, r6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 710:	00000000 	andeq	r0, r0, r0
	UARTDisable (UART0_BASE);
 714:	00000008 	andeq	r0, r0, r8
	...
	UARTConfigSetExpClk (UART0_BASE,
 720:	00000064 	andeq	r0, r0, r4, rrx
 724:	d99b0002 	ldmible	fp, {r1}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 728:	00040000 	andeq	r0, r4, r0
 72c:	00000000 	andeq	r0, r0, r0
 730:	000030bc 	strheq	r3, [r0], -ip
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 734:	0000005c 	andeq	r0, r0, ip, asr r0
 738:	00003118 	andeq	r3, r0, r8, lsl r1
 73c:	0000002c 	andeq	r0, r0, ip, lsr #32
	urates [0] = rate;
 740:	00000000 	andeq	r0, r0, r0
}
 744:	00000090 	muleq	r0, r0, r0
 748:	00003144 	andeq	r3, r0, r4, asr #2
 74c:	00000018 	andeq	r0, r0, r8, lsl r0
 750:	0000315c 	andeq	r3, r0, ip, asr r1
 754:	00000060 	andeq	r0, r0, r0, rrx
 758:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 75c:	00000034 	andeq	r0, r0, r4, lsr r0
 760:	00000000 	andeq	r0, r0, r0
 764:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 768:	00000000 	andeq	r0, r0, r0
 76c:	0000000c 	andeq	r0, r0, ip
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 770:	00000000 	andeq	r0, r0, r0
 774:	00000034 	andeq	r0, r0, r4, lsr r0
	__pi_uart_setrate (urates [0], __pi_uart);
 778:	00000000 	andeq	r0, r0, r0
 77c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
 788:	00000054 	andeq	r0, r0, r4, asr r0
 78c:	e25e0002 	subs	r0, lr, #2
 790:	00040000 	andeq	r0, r4, r0
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
 79c:	00000014 	andeq	r0, r0, r4, lsl r0
 7a0:	000031f0 	strdeq	r3, [r0], -r0
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
 7a8:	00003218 	andeq	r3, r0, r8, lsl r2
				*buf++ = uart_a_read;
 7ac:	0000004c 	andeq	r0, r0, ip, asr #32
 7b0:	00003264 	andeq	r3, r0, r4, ror #4
			while (len && uart_a_char_available) {
 7b4:	00000150 	andeq	r0, r0, r0, asr r1
 7b8:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
 7bc:	00000118 	andeq	r0, r0, r8, lsl r1
			if (len != operation) {
 7c0:	000034cc 	andeq	r3, r0, ip, asr #9
}
 7c4:	00000020 	andeq	r0, r0, r0, lsr #32
 7c8:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 7cc:	00000060 	andeq	r0, r0, r0, rrx
			if (uart_a_char_available) {
 7d0:	000034ec 	andeq	r3, r0, ip, ror #9
				*buf++ = uart_a_read;
 7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
			if (uart_a_char_available) {
 7e0:	00000024 	andeq	r0, r0, r4, lsr #32
 7e4:	ed160002 	ldc	0, cr0, [r6, #-8]
				uart_a_enable_int;
 7e8:	00040000 	andeq	r0, r4, r0
 7ec:	00000000 	andeq	r0, r0, r0
				goto Redo_rx;
 7f0:	00003508 	andeq	r3, r0, r8, lsl #10
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 7f4:	000000d4 	ldrdeq	r0, [r0], -r4
 7f8:	000035dc 	ldrdeq	r3, [r0], -ip
			return -2;
 7fc:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
				uart_a_write (*buf);
 808:	000000b4 	strheq	r0, [r0], -r4
			while (len && uart_a_room_in_tx) {
 80c:	ef210002 	svc	0x00210002
 810:	00040000 	andeq	r0, r4, r0
 814:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
 818:	00003680 	andeq	r3, r0, r0, lsl #13
			uart_a_disable_int;
 81c:	0000007c 	andeq	r0, r0, ip, ror r0
 820:	000036fc 	strdeq	r3, [r0], -ip
			if (uart_a_room_in_tx) {
 824:	000000ac 	andeq	r0, r0, ip, lsr #1
 828:	000037a8 	andeq	r3, r0, r8, lsr #15
				uart_a_enable_int;
 82c:	0000005c 	andeq	r0, r0, ip, asr r0
 830:	00003804 	andeq	r3, r0, r4, lsl #16
				*buf++ = uart_a_read;
 834:	00000018 	andeq	r0, r0, r8, lsl r0
			if (uart_a_room_in_tx) {
 838:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
 83c:	00000010 	andeq	r0, r0, r0, lsl r0
 840:	0000381c 	andeq	r3, r0, ip, lsl r8
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 844:	00000010 	andeq	r0, r0, r0, lsl r0
 848:	0000382c 	andeq	r3, r0, ip, lsr #16
			uart_a_enable_int;
 84c:	00000014 	andeq	r0, r0, r4, lsl r0
 850:	00003840 	andeq	r3, r0, r0, asr #16
 854:	00000064 	andeq	r0, r0, r4, rrx
			return 0;
 858:	000038a4 	andeq	r3, r0, r4, lsr #17
			if (len == UART_CNTRL_SETRATE) {
 85c:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_uart_setrate (*((word*)buf),
 860:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
 864:	00000014 	andeq	r0, r0, r4, lsl r0
 868:	000038cc 	andeq	r3, r0, ip, asr #17
				syserror (EREQPAR, "uar");
 86c:	00000014 	andeq	r0, r0, r4, lsl r0
			syserror (ENOOPER, "uai");
 870:	000038e0 	andeq	r3, r0, r0, ror #17
			if (len == UART_CNTRL_GETRATE) {
 874:	00000028 	andeq	r0, r0, r8, lsr #32
				return 1;
 878:	00003908 	andeq	r3, r0, r8, lsl #18
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 87c:	00000010 	andeq	r0, r0, r0, lsl r0
			syserror (ENOOPER, "uai");
 880:	00003918 	andeq	r3, r0, r8, lsl r9
 884:	0000002c 	andeq	r0, r0, ip, lsr #32
 888:	00003944 	andeq	r3, r0, r4, asr #18
 88c:	00000014 	andeq	r0, r0, r4, lsl r0
 890:	00003958 	andeq	r3, r0, r8, asr r9
 894:	00000014 	andeq	r0, r0, r4, lsl r0
 898:	0000396c 	andeq	r3, r0, ip, ror #18
 89c:	00000110 	andeq	r0, r0, r0, lsl r1
 8a0:	00003a7c 	andeq	r3, r0, ip, ror sl
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 8a4:	00000064 	andeq	r0, r0, r4, rrx
void UART0IntHandler () {
 8a8:	00003ae0 	andeq	r3, r0, r0, ror #21
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 8ac:	00000028 	andeq	r0, r0, r8, lsr #32
 8b0:	00003b08 	andeq	r3, r0, r8, lsl #22
 8b4:	00000150 	andeq	r0, r0, r0, asr r1
	...
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 8c0:	0000003c 	andeq	r0, r0, ip, lsr r0
 8c4:	fa3c0002 	blx	f008d4 <__ccfg+0xee092c>
		RISE_N_SHINE;
 8c8:	00040000 	andeq	r0, r4, r0
	...
		i_trigger (devevent (UART_A, READ));
 8d4:	000000f4 	strdeq	r0, [r0], -r4
 8d8:	00003c58 	andeq	r3, r0, r8, asr ip
 8dc:	00000220 	andeq	r0, r0, r0, lsr #4
 8e0:	00003e78 	andeq	r3, r0, r8, ror lr
 8e4:	00000060 	andeq	r0, r0, r0, rrx
 8e8:	00000000 	andeq	r0, r0, r0
 8ec:	00000078 	andeq	r0, r0, r8, ror r0
 8f0:	00003ed8 	ldrdeq	r3, [r0], -r8
 8f4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 900:	00000044 	andeq	r0, r0, r4, asr #32
 904:	03630002 	cmneq	r3, #2
 908:	00040001 	andeq	r0, r4, r1
	...
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
 914:	00000010 	andeq	r0, r0, r0, lsl r0
		RISE_N_SHINE;
 918:	00000000 	andeq	r0, r0, r0
 91c:	00000018 	andeq	r0, r0, r8, lsl r0
 920:	00003ef0 	strdeq	r3, [r0], -r0
		i_trigger (devevent (UART_A, WRITE));
 924:	0000004c 	andeq	r0, r0, ip, asr #32
 928:	00000000 	andeq	r0, r0, r0
 92c:	00000030 	andeq	r0, r0, r0, lsr r0
 930:	00003f3c 	andeq	r3, r0, ip, lsr pc
 934:	0000006c 	andeq	r0, r0, ip, rrx
 938:	00003fa8 	andeq	r3, r0, r8, lsr #31
 93c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 948:	00000044 	andeq	r0, r0, r4, asr #32
 94c:	07330002 	ldreq	r0, [r3, -r2]!
}
 950:	00040001 	andeq	r0, r4, r1
 954:	00000000 	andeq	r0, r0, r0
 958:	00003fc0 	andeq	r3, r0, r0, asr #31
 95c:	00000028 	andeq	r0, r0, r8, lsr #32
 960:	00003fe8 	andeq	r3, r0, r8, ror #31
void __buttons_setirq (int val) {
 964:	00000008 	andeq	r0, r0, r8
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 968:	00000000 	andeq	r0, r0, r0
 96c:	00000022 	andeq	r0, r0, r2, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 970:	00000000 	andeq	r0, r0, r0
 974:	0000002e 	andeq	r0, r0, lr, lsr #32
 978:	00000000 	andeq	r0, r0, r0
		bn = BUTTON_GPIO (__button_list [i]);
 97c:	00000034 	andeq	r0, r0, r4, lsr r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 980:	00000000 	andeq	r0, r0, r0
 984:	00000040 	andeq	r0, r0, r0, asr #32
	...
 990:	0000001c 	andeq	r0, r0, ip, lsl r0
 994:	0cde0002 	ldcleq	0, cr0, [lr], {2}
}
 998:	00040001 	andeq	r0, r4, r1
 99c:	00000000 	andeq	r0, r0, r0
 9a0:	00003ff0 	strdeq	r3, [r0], -r0
 9a4:	000000aa 	andeq	r0, r0, sl, lsr #1
	...
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 9b0:	0000001c 	andeq	r0, r0, ip, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 9b4:	1c130002 	ldcne	0, cr0, [r3], {2}
	for (i = 0; i < N_PINLIST; i++) {
 9b8:	00040001 	andeq	r0, r4, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	0000409c 	muleq	r0, ip, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 9c4:	0000004c 	andeq	r0, r0, ip, asr #32
	...
	for (i = 0; i < N_PINLIST; i++) {
 9d0:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 9d4:	258d0002 	strcs	r0, [sp, #2]
 9d8:	00040001 	andeq	r0, r4, r1
 9dc:	00000000 	andeq	r0, r0, r0
 9e0:	000040e8 	andeq	r4, r0, r8, ror #1
void GPIOIntHandler () {
 9e4:	00000038 	andeq	r0, r0, r8, lsr r0
	...
	buttons_disable ();
 9f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f4:	2f860002 	svccs	0x00860002
	i_trigger ((aword)&__button_list);
 9f8:	00040001 	andeq	r0, r4, r1
 9fc:	00000000 	andeq	r0, r0, r0
 a00:	00004120 	andeq	r4, r0, r0, lsr #2
 a04:	0000002c 	andeq	r0, r0, ip, lsr #32
	...
 a10:	00000014 	andeq	r0, r0, r4, lsl r0
 a14:	39be0002 	ldmibcc	lr!, {r1}
 a18:	00040001 	andeq	r0, r4, r1
	...
	RISE_N_SHINE;
 a28:	0000001c 	andeq	r0, r0, ip, lsl r0
 a2c:	42e80002 	rscmi	r0, r8, #2
if (pin_sensor_int) {
 a30:	00040001 	andeq	r0, r4, r1
	...
	i_trigger ((aword)(&__input_pins));
 a3c:	000000b8 	strheq	r0, [r0], -r8
	...
 a48:	0000001c 	andeq	r0, r0, ip, lsl r0
 a4c:	4daa0002 	stcmi	0, cr0, [sl, #8]!
 a50:	00040001 	andeq	r0, r4, r1
 a54:	00000000 	andeq	r0, r0, r0
 a58:	0000414c 	andeq	r4, r0, ip, asr #2
 a5c:	00000054 	andeq	r0, r0, r4, asr r0
	...
	RISE_N_SHINE;
 a68:	0000001c 	andeq	r0, r0, ip, lsl r0
 a6c:	58400002 	stmdapl	r0, {r1}^
 a70:	00040001 	andeq	r0, r4, r1
}
 a74:	00000000 	andeq	r0, r0, r0
 a78:	000041a0 	andeq	r4, r0, r0, lsr #3
 a7c:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000dc 	ldrdeq	r0, [r0], -ip
       4:	000000de 	ldrdeq	r0, [r0], -lr
}
       8:	000000e0 	andeq	r0, r0, r0, ror #1
       c:	000000e2 	andeq	r0, r0, r2, ror #1
      10:	000000e4 	andeq	r0, r0, r4, ror #1
      14:	00000106 	andeq	r0, r0, r6, lsl #2
	...
      20:	00000106 	andeq	r0, r0, r6, lsl #2
      24:	0000010e 	andeq	r0, r0, lr, lsl #2
      28:	00000112 	andeq	r0, r0, r2, lsl r1
      2c:	00000124 	andeq	r0, r0, r4, lsr #2
	...
      38:	000001ec 	andeq	r0, r0, ip, ror #3
      3c:	0000022e 	andeq	r0, r0, lr, lsr #4
			i = k;
      40:	0000037a 	andeq	r0, r0, sl, ror r3
				j->Next = k;
      44:	000003a2 	andeq	r0, r0, r2, lsr #7
	...
}
      50:	000000c8 	andeq	r0, r0, r8, asr #1
      54:	00000124 	andeq	r0, r0, r4, lsr #2
		release;
      58:	00000001 	andeq	r0, r0, r1
      5c:	00000001 	andeq	r0, r0, r1
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	00000124 	andeq	r0, r0, r4, lsr #2
	b->u.pointers.tail =
      64:	0000013c 	andeq	r0, r0, ip, lsr r1
}
      68:	0000013c 	andeq	r0, r0, ip, lsr r1
		return NULL;
      6c:	00000408 	andeq	r0, r0, r8, lsl #8
	...
      78:	000004f6 	strdeq	r0, [r0], -r6
      7c:	000004fc 	strdeq	r0, [r0], -ip
      80:	000004fc 	strdeq	r0, [r0], -ip
      84:	000004fc 	strdeq	r0, [r0], -ip
      88:	00000500 	andeq	r0, r0, r0, lsl #10
      8c:	00000502 	andeq	r0, r0, r2, lsl #10
	...
      98:	000004fc 	strdeq	r0, [r0], -ip
      9c:	000004fe 	strdeq	r0, [r0], -lr
      a0:	00000502 	andeq	r0, r0, r2, lsl #10
      a4:	00000504 	andeq	r0, r0, r4, lsl #10
	...
      b0:	00000514 	andeq	r0, r0, r4, lsl r5
      b4:	00000516 	andeq	r0, r0, r6, lsl r5
      b8:	00000518 	andeq	r0, r0, r8, lsl r5
      bc:	0000051a 	andeq	r0, r0, sl, lsl r5
	...
fsm transmitter (message * messagePtr) {
      c8:	0000054e 	andeq	r0, r0, lr, asr #10
      cc:	00000552 	andeq	r0, r0, r2, asr r5
      d0:	00000554 	andeq	r0, r0, r4, asr r5
}
      d4:	00000556 	andeq	r0, r0, r6, asr r5
      d8:	00000558 	andeq	r0, r0, r8, asr r5
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	00000560 	andeq	r0, r0, r0, ror #10
	...
      e8:	00000584 	andeq	r0, r0, r4, lsl #11
        spkt [0] = 0;
      ec:	0000058a 	andeq	r0, r0, sl, lsl #11
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      f0:	0000058c 	andeq	r0, r0, ip, lsl #11
        *p = messagePtr->messageType; p++; // insert message type
      f4:	00000592 	muleq	r0, r2, r5
	...
        *p = messagePtr->destinationId; p++; // insert receiver ID
     100:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
        tcv_endp (spkt);
     104:	0000063a 	andeq	r0, r0, sl, lsr r6
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	00000660 	andeq	r0, r0, r0, ror #12
     10c:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
	...
        finish;
     118:	00000728 	andeq	r0, r0, r8, lsr #14
     11c:	0000072a 	andeq	r0, r0, sl, lsr #14
     120:	0000072c 	andeq	r0, r0, ip, lsr #14
char randomNumber() {
     124:	00000740 	andeq	r0, r0, r0, asr #14
	...
   return (char)rand();
     130:	0000075c 	andeq	r0, r0, ip, asr r7
}
     134:	0000075e 	andeq	r0, r0, lr, asr r7
     138:	00000760 	andeq	r0, r0, r0, ror #14
fsm root {
     13c:	00000768 	andeq	r0, r0, r8, ror #14
	...
     148:	000008a4 	andeq	r0, r0, r4, lsr #17
     14c:	000008a8 	andeq	r0, r0, r8, lsr #17
     150:	000008aa 	andeq	r0, r0, sl, lsr #17
     154:	000008ac 	andeq	r0, r0, ip, lsr #17
     158:	000008ae 	andeq	r0, r0, lr, lsr #17
     15c:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
	...
     168:	0000090c 	andeq	r0, r0, ip, lsl #18
     16c:	00000910 	andeq	r0, r0, r0, lsl r9
        recordCount = 0;
     170:	00000922 	andeq	r0, r0, r2, lsr #18
        nodeId = 1;
     174:	0000094e 	andeq	r0, r0, lr, asr #18
	...
        groupId = 1;
     180:	00000964 	andeq	r0, r0, r4, ror #18
        messagePtr = (message *) umalloc(sizeof(message));
     184:	00000964 	andeq	r0, r0, r4, ror #18
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	00000966 	andeq	r0, r0, r6, ror #18
     18c:	00000968 	andeq	r0, r0, r8, ror #18
	...
        tcv_plug(0, &plug_null);
     198:	00000968 	andeq	r0, r0, r8, ror #18
        sfd = tcv_open(WNONE, 0, 0);
     19c:	0000096a 	andeq	r0, r0, sl, ror #18
     1a0:	0000096c 	andeq	r0, r0, ip, ror #18
     1a4:	0000096e 	andeq	r0, r0, lr, ror #18
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	00000974 	andeq	r0, r0, r4, ror r9
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	0000097a 	andeq	r0, r0, sl, ror r9
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	00000984 	andeq	r0, r0, r4, lsl #19
		if (sfd < 0) {
     1b4:	00000986 	andeq	r0, r0, r6, lsl #19
			diag("Cannot open tcv interface");
     1b8:	00000992 	muleq	r0, r2, r9
     1bc:	00000994 	muleq	r0, r4, r9
	...
        currentProtocol = IDLE;
     1c8:	000009a8 	andeq	r0, r0, r8, lsr #19
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	000009a8 	andeq	r0, r0, r8, lsr #19
     1d0:	000009aa 	andeq	r0, r0, sl, lsr #19
     1d4:	000009ac 	andeq	r0, r0, ip, lsr #19
	...
     1e0:	000009ae 	andeq	r0, r0, lr, lsr #19
        ser_outf(Options, menu);
     1e4:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     1e8:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
     1f0:	000009be 			; <UNDEFINED> instruction: 0x000009be
     1f4:	000009c2 	andeq	r0, r0, r2, asr #19
        switch (choice)
     1f8:	000009cc 	andeq	r0, r0, ip, asr #19
     1fc:	000009ce 	andeq	r0, r0, lr, asr #19
	...
     208:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
     20c:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
     210:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
     214:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
     218:	00000aca 	andeq	r0, r0, sl, asr #21
     21c:	00000acc 	andeq	r0, r0, ip, asr #21
	...
        proceed Menu_Header;
     228:	00000ab4 			; <UNDEFINED> instruction: 0x00000ab4
     22c:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
     234:	00000aca 	andeq	r0, r0, sl, asr #21
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	00000acc 	andeq	r0, r0, ip, asr #21
     23c:	00000b06 	andeq	r0, r0, r6, lsl #22
	...
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
     24c:	00000ac2 	andeq	r0, r0, r2, asr #21
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	00000aea 	andeq	r0, r0, sl, ror #21
     254:	00000af2 	strdeq	r0, [r0], -r2
	...
    if (node < 1 || node > 25) {
     260:	00000ac2 	andeq	r0, r0, r2, asr #21
            proceed Set_Node_ID;
     264:	00000ac6 	andeq	r0, r0, r6, asr #21
        proceed Menu_Header;
     268:	00000afe 	strdeq	r0, [r0], -lr
     26c:	00000b02 	andeq	r0, r0, r2, lsl #22
	...
        receiverId = 0;
     278:	00000ac6 	andeq	r0, r0, r6, asr #21
        proceed Transmit_Message;
     27c:	00000aca 	andeq	r0, r0, sl, asr #21
        currentProtocol = CREATE_RECORD;
     280:	00000af8 	strdeq	r0, [r0], -r8
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	00000afe 	strdeq	r0, [r0], -lr
	...
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     290:	00000b06 	andeq	r0, r0, r6, lsl #22
     294:	00000b08 	andeq	r0, r0, r8, lsl #22
    if (node < 1 || node > 25) {
     298:	00000b0a 	andeq	r0, r0, sl, lsl #22
     29c:	00000b0c 	andeq	r0, r0, ip, lsl #22
            proceed Create_Record;
     2a0:	00000b0e 	andeq	r0, r0, lr, lsl #22
     2a4:	00000b10 	andeq	r0, r0, r0, lsl fp
	...
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2b0:	00000b08 	andeq	r0, r0, r8, lsl #22
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	00000b0a 	andeq	r0, r0, sl, lsl #22
     2b8:	00000b10 	andeq	r0, r0, r0, lsl fp
     2bc:	00000b12 	andeq	r0, r0, r2, lsl fp
	...
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	00000b22 	andeq	r0, r0, r2, lsr #22
        proceed Transmit_Message;
     2cc:	00000b24 	andeq	r0, r0, r4, lsr #22
        currentProtocol = DELETE_RECORD;
     2d0:	00000b26 	andeq	r0, r0, r6, lsr #22
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	00000b28 	andeq	r0, r0, r8, lsr #22
	...
        proceed Get_Receiving_Node;
     2e0:	00000b3a 	andeq	r0, r0, sl, lsr fp
        currentProtocol = RETRIEVE_RECORD;
     2e4:	00000b3c 	andeq	r0, r0, ip, lsr fp
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	00000b3e 	andeq	r0, r0, lr, lsr fp
        currentProtocol = RETRIEVE_RECORD;
     2ec:	00000b40 	andeq	r0, r0, r0, asr #22
	...
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f8:	00000b82 	andeq	r0, r0, r2, lsl #23
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	00000b82 	andeq	r0, r0, r2, lsl #23
     300:	00000b86 	andeq	r0, r0, r6, lsl #23
     304:	00000b88 	andeq	r0, r0, r8, lsl #23
	...
            proceed Prompt_Recieving_Node;
     310:	00000bb8 			; <UNDEFINED> instruction: 0x00000bb8
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00000bba 			; <UNDEFINED> instruction: 0x00000bba
     318:	00000bbc 			; <UNDEFINED> instruction: 0x00000bbc
        char desiredRecordIndex = -1;
     31c:	00000bc4 	andeq	r0, r0, r4, asr #23
	...
     328:	00000c64 	andeq	r0, r0, r4, ror #24
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	00000c64 	andeq	r0, r0, r4, ror #24
        messagePtr->recordIndex = desiredRecordIndex;
     330:	00000c6a 	andeq	r0, r0, sl, ror #24
     334:	00000c6c 	andeq	r0, r0, ip, ror #24
     338:	00000c6e 	andeq	r0, r0, lr, ror #24
        proceed Transmit_Message;
     33c:	00000c72 	andeq	r0, r0, r2, ror ip
	...
        messagePtr -> senderGroupId = groupId;
     348:	00000c7e 	andeq	r0, r0, lr, ror ip
        messagePtr -> messageType = currentProtocol;
     34c:	00000c80 	andeq	r0, r0, r0, lsl #25
     350:	00000c96 	muleq	r0, r6, ip
        messagePtr -> requestNumber = randomNumber();
     354:	00000c98 	muleq	r0, r8, ip
        messagePtr -> senderId = nodeId;
     358:	00000caa 	andeq	r0, r0, sl, lsr #25
     35c:	00000cc6 	andeq	r0, r0, r6, asr #25
        call transmitter(messagePtr, Menu_Header);
     360:	00000cea 	andeq	r0, r0, sl, ror #25
        messagePtr -> destinationId = receiverId;
     364:	00000e44 	andeq	r0, r0, r4, asr #28
	...
        call transmitter(messagePtr, Menu_Header);
     370:	00000c7e 	andeq	r0, r0, lr, ror ip
     374:	00000c80 	andeq	r0, r0, r0, lsl #25
     378:	00000d1e 	andeq	r0, r0, lr, lsl sp
            proceed Set_Node_ID;
     37c:	00000d22 	andeq	r0, r0, r2, lsr #26
	...
            proceed Find_Neighbours;
     388:	00000d22 	andeq	r0, r0, r2, lsr #26
            proceed Create_Record;
     38c:	00000d22 	andeq	r0, r0, r2, lsr #26
            proceed Delete_Record;
     390:	00000d26 	andeq	r0, r0, r6, lsr #26
            proceed Retrieve_Record;
     394:	00000d2a 	andeq	r0, r0, sl, lsr #26
            diag("Reset Local Storage");
     398:	00000d2e 	andeq	r0, r0, lr, lsr #26
            break;
     39c:	00000d30 	andeq	r0, r0, r0, lsr sp
	...
     3a8:	00000d22 	andeq	r0, r0, r2, lsr #26
     3ac:	00000d26 	andeq	r0, r0, r6, lsr #26
     3b0:	00000d3c 	andeq	r0, r0, ip, lsr sp
     3b4:	00000d3e 	andeq	r0, r0, lr, lsr sp
     3b8:	00000d42 	andeq	r0, r0, r2, asr #26
     3bc:	00000d46 	andeq	r0, r0, r6, asr #26
	...
     3c8:	00000d2a 	andeq	r0, r0, sl, lsr #26
     3cc:	00000d2e 	andeq	r0, r0, lr, lsr #26
     3d0:	00000d30 	andeq	r0, r0, r0, lsr sp
     3d4:	00000d32 	andeq	r0, r0, r2, lsr sp
     3d8:	00000d36 	andeq	r0, r0, r6, lsr sp
     3dc:	00000d3a 	andeq	r0, r0, sl, lsr sp
	...
     3e8:	00000d3e 	andeq	r0, r0, lr, lsr sp
     3ec:	00000d42 	andeq	r0, r0, r2, asr #26
     3f0:	00000d5c 	andeq	r0, r0, ip, asr sp
     3f4:	00000d60 	andeq	r0, r0, r0, ror #26
     3f8:	00000d62 	andeq	r0, r0, r2, ror #26
     3fc:	00000d6a 	andeq	r0, r0, sl, ror #26
	...
static void devinit_uart (int devnum) {
     408:	00000d54 	andeq	r0, r0, r4, asr sp
	adddevfunc (ioreq_uart_a, devnum);
     40c:	00000d56 	andeq	r0, r0, r6, asr sp
     410:	00000d58 	andeq	r0, r0, r8, asr sp
void udelay (volatile word n) {
     414:	00000d5c 	andeq	r0, r0, ip, asr sp
	...
	while (n) {
     420:	00000d98 	muleq	r0, r8, sp
}
     424:	00000d9c 	muleq	r0, ip, sp
	while (n--);
     428:	00000d9e 	muleq	r0, lr, sp
     42c:	00000da6 	andeq	r0, r0, r6, lsr #27
	...
		n--;
     438:	00000d9c 	muleq	r0, ip, sp
     43c:	00000d9e 	muleq	r0, lr, sp
void mdelay (volatile word n) {
     440:	00000daa 	andeq	r0, r0, sl, lsr #27
     444:	00000dac 	andeq	r0, r0, ip, lsr #27
	...
}
     450:	00000dca 	andeq	r0, r0, sl, asr #27
		udelay (999);
     454:	00000dcc 	andeq	r0, r0, ip, asr #27
     458:	00000dce 	andeq	r0, r0, lr, asr #27
		n--;
     45c:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
     468:	00000dcc 	andeq	r0, r0, ip, asr #27
void __pi_ondomain (lword d) {
     46c:	00000dce 	andeq	r0, r0, lr, asr #27
     470:	00000dd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (__pi_systat.effpdm > 1)
     474:	00000dd4 	ldrdeq	r0, [r0], -r4
	...
	PRCMPowerDomainOn (d);
     480:	00000e2a 	andeq	r0, r0, sl, lsr #28
     484:	00000e2c 	andeq	r0, r0, ip, lsr #28
     488:	00000e2c 	andeq	r0, r0, ip, lsr #28
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48c:	00000e2e 	andeq	r0, r0, lr, lsr #28
	...
	__pi_systat.ondmns |= d;
     498:	00000e32 	andeq	r0, r0, r2, lsr lr
     49c:	00000e36 	andeq	r0, r0, r6, lsr lr
}
     4a0:	00000e38 	andeq	r0, r0, r8, lsr lr
     4a4:	00000e3a 	andeq	r0, r0, sl, lsr lr
	...
	PRCMPowerDomainOff (d);
     4b0:	00000001 	andeq	r0, r0, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	00000001 	andeq	r0, r0, r1
     4b8:	00000001 	andeq	r0, r0, r1
     4bc:	00000001 	andeq	r0, r0, r1
	...
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	00000eec 	andeq	r0, r0, ip, ror #29
     4cc:	00000eec 	andeq	r0, r0, ip, ror #29
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4d0:	00000ef0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     4d4:	00000efc 	strdeq	r0, [r0], -ip
	...
}
     4e0:	00000408 	andeq	r0, r0, r8, lsl #8
     4e4:	00000414 	andeq	r0, r0, r4, lsl r4
void __pi_syserror (word ec, const char *m) {
     4e8:	00000414 	andeq	r0, r0, r4, lsl r4
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	00000440 	andeq	r0, r0, r0, asr #8
     4f0:	00000440 	andeq	r0, r0, r0, asr #8
     4f4:	0000046a 	andeq	r0, r0, sl, ror #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4f8:	0000046c 	andeq	r0, r0, ip, ror #8
     4fc:	000004a8 	andeq	r0, r0, r8, lsr #9
     500:	000004a8 	andeq	r0, r0, r8, lsr #9
		all_leds_blink;
     504:	000004e8 	andeq	r0, r0, r8, ror #9
     508:	00000001 	andeq	r0, r0, r1
     50c:	00000001 	andeq	r0, r0, r1
     510:	000004e8 	andeq	r0, r0, r8, ror #9
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     514:	0000053c 	andeq	r0, r0, ip, lsr r5
     518:	0000053c 	andeq	r0, r0, ip, lsr r5
     51c:	0000057c 	andeq	r0, r0, ip, ror r5
     520:	0000057c 	andeq	r0, r0, ip, ror r5
     524:	000005a4 	andeq	r0, r0, r4, lsr #11
     528:	000005a4 	andeq	r0, r0, r4, lsr #11
	while (1) {
     52c:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
     530:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
     534:	00000708 	andeq	r0, r0, r8, lsl #14
     538:	00000708 	andeq	r0, r0, r8, lsl #14
void tci_run_delay_timer () {
     53c:	0000075c 	andeq	r0, r0, ip, asr r7
	setdel = __pi_mintk - __pi_old;
     540:	0000075c 	andeq	r0, r0, ip, asr r7
     544:	00000794 	muleq	r0, r4, r7
     548:	00000794 	muleq	r0, r4, r7
     54c:	000008a4 	andeq	r0, r0, r4, lsr #17
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	00000001 	andeq	r0, r0, r1
     554:	00000001 	andeq	r0, r0, r1
     558:	000008a4 	andeq	r0, r0, r4, lsr #17
     55c:	00000964 	andeq	r0, r0, r4, ror #18
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	00000964 	andeq	r0, r0, r4, ror #18
	sti_tim;
     564:	000009a8 	andeq	r0, r0, r8, lsr #19
}
     568:	000009a8 	andeq	r0, r0, r8, lsr #19
     56c:	000009e4 	andeq	r0, r0, r4, ror #19
     570:	000009e4 	andeq	r0, r0, r4, ror #19
     574:	00000a88 	andeq	r0, r0, r8, lsl #21
     578:	00000a88 	andeq	r0, r0, r8, lsl #21
	cli_aux;
     57c:	00000c40 	andeq	r0, r0, r0, asr #24
     580:	00000c40 	andeq	r0, r0, r0, asr #24
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	00000c64 	andeq	r0, r0, r4, ror #24
     588:	00000001 	andeq	r0, r0, r1
     58c:	00000001 	andeq	r0, r0, r1
     590:	00000c64 	andeq	r0, r0, r4, ror #24
	sti_aux;
     594:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
}
     598:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     59c:	00000eec 	andeq	r0, r0, ip, ror #29
     5a0:	00000001 	andeq	r0, r0, r1
void AONRTCIntHandler () {
     5a4:	00000001 	andeq	r0, r0, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a8:	00000eec 	andeq	r0, r0, ip, ror #29
     5ac:	00000f4c 	andeq	r0, r0, ip, asr #30
	...
		if (__pi_utims [0] == 0)
     5b8:	00001008 	andeq	r1, r0, r8
		if (*(__pi_utims [0])) {
     5bc:	0000100a 	andeq	r1, r0, sl
     5c0:	0000100a 	andeq	r1, r0, sl
			(*(__pi_utims [0]))--;
     5c4:	0000100c 	andeq	r1, r0, ip
	...
			aux_timer_inactive = 0;
     5d0:	00001072 	andeq	r1, r0, r2, ror r0
			(*(__pi_utims [1]))--;
     5d4:	00001114 	andeq	r1, r0, r4, lsl r1
		if (__pi_utims [2] == 0)
     5d8:	00001118 	andeq	r1, r0, r8, lsl r1
		if (*(__pi_utims [2])) {
     5dc:	0000111c 	andeq	r1, r0, ip, lsl r1
	...
			if (*(__pi_utims [3])) {
     5e8:	000014bc 			; <UNDEFINED> instruction: 0x000014bc
				aux_timer_inactive = 0;
     5ec:	000014be 			; <UNDEFINED> instruction: 0x000014be
				(*(__pi_utims [3]))--;
     5f0:	000014c2 	andeq	r1, r0, r2, asr #9
	if (__pi_systat.ledsts) {
     5f4:	000014c4 	andeq	r1, r0, r4, asr #9
     5f8:	000014c8 	andeq	r1, r0, r8, asr #9
		if (__pi_systat.ledblc++ == 0) {
     5fc:	000014cc 	andeq	r1, r0, ip, asr #9
     600:	000014ce 	andeq	r1, r0, lr, asr #9
			if (__pi_systat.ledblk) {
     604:	000014d8 	ldrdeq	r1, [r0], -r8
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	0000150a 	andeq	r1, r0, sl, lsl #10
     614:	0000150c 	andeq	r1, r0, ip, lsl #10
				if (__pi_systat.ledsts & 0x2)
     618:	0000150e 	andeq	r1, r0, lr, lsl #10
     61c:	00001512 	andeq	r1, r0, r2, lsl r5
     620:	000015a2 	andeq	r1, r0, r2, lsr #11
				if (__pi_systat.ledsts & 0x4)
     624:	00001604 	andeq	r1, r0, r4, lsl #12
				__pi_systat.ledblk = 0;
     628:	00001608 	andeq	r1, r0, r8, lsl #12
     62c:	0000160c 	andeq	r1, r0, ip, lsl #12
			if (__pi_systat.fstblk)
     630:	0000160e 	andeq	r1, r0, lr, lsl #12
     634:	00001610 	andeq	r1, r0, r0, lsl r6
	...
		cli_tim;
     640:	00001526 	andeq	r1, r0, r6, lsr #10
		__pi_new += setdel;
     644:	00001528 	andeq	r1, r0, r8, lsr #10
     648:	00001528 	andeq	r1, r0, r8, lsr #10
		setdel = 0;
     64c:	0000152a 	andeq	r1, r0, sl, lsr #10
	...
		RISE_N_SHINE;
     658:	00000f4c 	andeq	r0, r0, ip, asr #30
     65c:	00000f88 	andeq	r0, r0, r8, lsl #31
		aux_timer_inactive = 1;
     660:	00000f88 	andeq	r0, r0, r8, lsl #31
     664:	00001008 	andeq	r1, r0, r8
				if (__pi_systat.ledsts & 0x1)
     668:	00001008 	andeq	r1, r0, r8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	00001020 	andeq	r1, r0, r0, lsr #32
     670:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x2)
     674:	00000001 	andeq	r0, r0, r1
     678:	00001020 	andeq	r1, r0, r0, lsr #32
     67c:	00001030 	andeq	r1, r0, r0, lsr r0
				if (__pi_systat.ledsts & 0x8)
     680:	00001030 	andeq	r1, r0, r0, lsr r0
				__pi_systat.ledblk = 1;
     684:	0000105c 	andeq	r1, r0, ip, asr r0
     688:	00000001 	andeq	r0, r0, r1
		if (aux_timer_inactive) {
     68c:	00000001 	andeq	r0, r0, r1
			cli_aux;
     690:	0000105c 	andeq	r1, r0, ip, asr r0
     694:	00001062 	andeq	r1, r0, r2, rrx
     698:	00001064 	andeq	r1, r0, r4, rrx
     69c:	00001130 	andeq	r1, r0, r0, lsr r1
     6a0:	00001130 	andeq	r1, r0, r0, lsr r1
     6a4:	00001144 	andeq	r1, r0, r4, asr #2
     6a8:	00001144 	andeq	r1, r0, r4, asr #2
     6ac:	00001178 	andeq	r1, r0, r8, ror r1
     6b0:	00001178 	andeq	r1, r0, r8, ror r1
     6b4:	000011ac 	andeq	r1, r0, ip, lsr #3
word tci_update_delay_ticks (Boolean force) {
     6b8:	00000001 	andeq	r0, r0, r1
	cli_tim;
     6bc:	00000001 	andeq	r0, r0, r1
     6c0:	000011ac 	andeq	r1, r0, ip, lsr #3
	if (setdel) {
     6c4:	000011d0 	ldrdeq	r1, [r0], -r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	000011d0 	ldrdeq	r1, [r0], -r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	00001208 	andeq	r1, r0, r8, lsl #4
     6d0:	00000001 	andeq	r0, r0, r1
     6d4:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	00000001 	andeq	r0, r0, r1
				AON_RTC_O_CH0CMP)) - gettav ());
     6dc:	00000001 	andeq	r0, r0, r1
	return NO;
     6e0:	00000001 	andeq	r0, r0, r1
			setdel = 0;
     6e4:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e8:	00001208 	andeq	r1, r0, r8, lsl #4
     6ec:	0000122c 	andeq	r1, r0, ip, lsr #4
}
     6f0:	00000001 	andeq	r0, r0, r1
		sti_tim;
     6f4:	00000001 	andeq	r0, r0, r1
		return YES;
     6f8:	0000122c 	andeq	r1, r0, ip, lsr #4
     6fc:	0000123a 	andeq	r1, r0, sl, lsr r2
     700:	00000001 	andeq	r0, r0, r1
     704:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     70c:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     714:	00000001 	andeq	r0, r0, r1
	UARTConfigSetExpClk (UART0_BASE,
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	0000123a 	andeq	r1, r0, sl, lsr r2
     724:	0000124e 	andeq	r1, r0, lr, asr #4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	0000124e 	andeq	r1, r0, lr, asr #4
     72c:	0000125c 	andeq	r1, r0, ip, asr r2
     730:	0000125c 	andeq	r1, r0, ip, asr r2
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	00001280 	andeq	r1, r0, r0, lsl #5
     738:	00001280 	andeq	r1, r0, r0, lsl #5
     73c:	0000131c 	andeq	r1, r0, ip, lsl r3
	urates [0] = rate;
     740:	0000131c 	andeq	r1, r0, ip, lsl r3
}
     744:	0000136c 	andeq	r1, r0, ip, ror #6
     748:	0000136c 	andeq	r1, r0, ip, ror #6
     74c:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
     750:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
     754:	00001404 	andeq	r1, r0, r4, lsl #8
     758:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	00000001 	andeq	r0, r0, r1
     760:	00001404 	andeq	r1, r0, r4, lsl #8
     764:	000014ac 	andeq	r1, r0, ip, lsr #9
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	000014ac 	andeq	r1, r0, ip, lsr #9
     76c:	000014e0 	andeq	r1, r0, r0, ror #9
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     770:	000014e0 	andeq	r1, r0, r0, ror #9
     774:	000014f8 	strdeq	r1, [r0], -r8
	__pi_uart_setrate (urates [0], __pi_uart);
     778:	00000001 	andeq	r0, r0, r1
     77c:	00000001 	andeq	r0, r0, r1
     780:	00000001 	andeq	r0, r0, r1
     784:	00000001 	andeq	r0, r0, r1
     788:	000014f8 	strdeq	r1, [r0], -r8
     78c:	00001634 	andeq	r1, r0, r4, lsr r6
     790:	00001634 	andeq	r1, r0, r4, lsr r6
	switch (operation) {
     794:	00001658 	andeq	r1, r0, r8, asr r6
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     7a0:	00001718 	andeq	r1, r0, r8, lsl r7
     7a4:	0000171e 	andeq	r1, r0, lr, lsl r7
     7a8:	00001724 	andeq	r1, r0, r4, lsr #14
				*buf++ = uart_a_read;
     7ac:	00001728 	andeq	r1, r0, r8, lsr #14
     7b0:	00001730 	andeq	r1, r0, r0, lsr r7
			while (len && uart_a_char_available) {
     7b4:	00001750 	andeq	r1, r0, r0, asr r7
	...
			if (len != operation) {
     7c0:	00000001 	andeq	r0, r0, r1
}
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     7cc:	00000001 	andeq	r0, r0, r1
	...
     7d8:	00001658 	andeq	r1, r0, r8, asr r6
     7dc:	0000166e 	andeq	r1, r0, lr, ror #12
			if (uart_a_char_available) {
     7e0:	0000166e 	andeq	r1, r0, lr, ror #12
     7e4:	00001688 	andeq	r1, r0, r8, lsl #13
				uart_a_enable_int;
     7e8:	00001688 	andeq	r1, r0, r8, lsl #13
     7ec:	00001696 	muleq	r0, r6, r6
				goto Redo_rx;
     7f0:	00001698 	muleq	r0, r8, r6
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f4:	000016e4 	andeq	r1, r0, r4, ror #13
     7f8:	000016e4 	andeq	r1, r0, r4, ror #13
			return -2;
     7fc:	00001770 	andeq	r1, r0, r0, ror r7
     800:	00001770 	andeq	r1, r0, r0, ror r7
				uart_a_write (*buf);
     804:	000017e0 	andeq	r1, r0, r0, ror #15
     808:	000017e0 	andeq	r1, r0, r0, ror #15
			while (len && uart_a_room_in_tx) {
     80c:	000018a0 	andeq	r1, r0, r0, lsr #17
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
     818:	000018a0 	andeq	r1, r0, r0, lsr #17
			uart_a_disable_int;
     81c:	000018c4 	andeq	r1, r0, r4, asr #17
     820:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
				uart_a_enable_int;
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     834:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     838:	000018c4 	andeq	r1, r0, r4, asr #17
				uart_a_write (*buf);
     83c:	00001980 	andeq	r1, r0, r0, lsl #19
     840:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
			uart_a_enable_int;
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
			return 0;
     858:	00001980 	andeq	r1, r0, r0, lsl #19
			if (len == UART_CNTRL_SETRATE) {
     85c:	000019ac 	andeq	r1, r0, ip, lsr #19
				if (__pi_uart_setrate (*((word*)buf),
     860:	000019ac 	andeq	r1, r0, ip, lsr #19
     864:	00001a0c 	andeq	r1, r0, ip, lsl #20
     868:	00000001 	andeq	r0, r0, r1
				syserror (EREQPAR, "uar");
     86c:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     870:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     874:	00000001 	andeq	r0, r0, r1
				return 1;
     878:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87c:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     880:	00000001 	andeq	r0, r0, r1
     884:	00000001 	andeq	r0, r0, r1
     888:	00001a0c 	andeq	r1, r0, ip, lsl #20
     88c:	00001a74 	andeq	r1, r0, r4, ror sl
     890:	00001a74 	andeq	r1, r0, r4, ror sl
     894:	00001ac4 	andeq	r1, r0, r4, asr #21
     898:	00001ac4 	andeq	r1, r0, r4, asr #21
     89c:	00001b60 	andeq	r1, r0, r0, ror #22
     8a0:	00001b60 	andeq	r1, r0, r0, ror #22
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	00001ba0 	andeq	r1, r0, r0, lsr #23
void UART0IntHandler () {
     8a8:	00001ba0 	andeq	r1, r0, r0, lsr #23
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	00001bd4 	ldrdeq	r1, [r0], -r4
     8b0:	00001bd4 	ldrdeq	r1, [r0], -r4
     8b4:	00001c10 	andeq	r1, r0, r0, lsl ip
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8c0:	00001c10 	andeq	r1, r0, r0, lsl ip
     8c4:	00001c12 	andeq	r1, r0, r2, lsl ip
	...
		i_trigger (devevent (UART_A, READ));
     8d0:	00001c12 	andeq	r1, r0, r2, lsl ip
     8d4:	00001c14 	andeq	r1, r0, r4, lsl ip
     8d8:	00001c14 	andeq	r1, r0, r4, lsl ip
     8dc:	00001c16 	andeq	r1, r0, r6, lsl ip
     8e0:	00001c16 	andeq	r1, r0, r6, lsl ip
     8e4:	00001c18 	andeq	r1, r0, r8, lsl ip
     8e8:	00001c18 	andeq	r1, r0, r8, lsl ip
     8ec:	00001c5c 	andeq	r1, r0, ip, asr ip
	...
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     900:	00000001 	andeq	r0, r0, r1
     904:	00000001 	andeq	r0, r0, r1
     908:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     90c:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	00000001 	andeq	r0, r0, r1
     914:	00000001 	andeq	r0, r0, r1
	...
		RISE_N_SHINE;
     920:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     924:	00000001 	andeq	r0, r0, r1
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
	...
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
}
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
	...
     960:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
     964:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	00000001 	andeq	r0, r0, r1
     96c:	00000001 	andeq	r0, r0, r1
	...
     978:	00000001 	andeq	r0, r0, r1
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
	...
}
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
	...
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	00001c68 	andeq	r1, r0, r8, ror #24
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	00001c6c 	andeq	r1, r0, ip, ror #24
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	00001c72 	andeq	r1, r0, r2, ror ip
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9bc:	00001c74 	andeq	r1, r0, r4, ror ip
     9c0:	00001c82 	andeq	r1, r0, r2, lsl #25
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c4:	00001c82 	andeq	r1, r0, r2, lsl #25
     9c8:	00001c84 	andeq	r1, r0, r4, lsl #25
     9cc:	00001c86 	andeq	r1, r0, r6, lsl #25
	...
}
     9d8:	00001c6e 	andeq	r1, r0, lr, ror #24
     9dc:	00001c70 	andeq	r1, r0, r0, ror ip
     9e0:	00001c86 	andeq	r1, r0, r6, lsl #25
void GPIOIntHandler () {
     9e4:	00001c88 	andeq	r1, r0, r8, lsl #25
	...
	buttons_disable ();
     9f0:	00001c70 	andeq	r1, r0, r0, ror ip
     9f4:	00001c72 	andeq	r1, r0, r2, ror ip
	i_trigger ((aword)&__button_list);
     9f8:	00001c74 	andeq	r1, r0, r4, ror ip
     9fc:	00001c76 	andeq	r1, r0, r6, ror ip
     a00:	00001c7c 	andeq	r1, r0, ip, ror ip
     a04:	00001c7c 	andeq	r1, r0, ip, ror ip
	...
     a10:	00001ca0 	andeq	r1, r0, r0, lsr #25
     a14:	00001ca8 	andeq	r1, r0, r8, lsr #25
     a18:	00001cb2 			; <UNDEFINED> instruction: 0x00001cb2
     a1c:	00001cb2 			; <UNDEFINED> instruction: 0x00001cb2
     a20:	00001cb6 			; <UNDEFINED> instruction: 0x00001cb6
	RISE_N_SHINE;
     a24:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
	...
if (pin_sensor_int) {
     a30:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
     a34:	00001cb8 			; <UNDEFINED> instruction: 0x00001cb8
	i_trigger ((aword)(&__input_pins));
     a38:	00001cba 			; <UNDEFINED> instruction: 0x00001cba
     a3c:	00001cbc 			; <UNDEFINED> instruction: 0x00001cbc
	...
     a48:	00001cc8 	andeq	r1, r0, r8, asr #25
     a4c:	00001cca 	andeq	r1, r0, sl, asr #25
     a50:	00001ccc 	andeq	r1, r0, ip, asr #25
     a54:	00001cd0 	ldrdeq	r1, [r0], -r0
	...
     a60:	00001ce8 	andeq	r1, r0, r8, ror #25
	__pinsen_disable_and_clear;
     a64:	00001cea 	andeq	r1, r0, sl, ror #25
	RISE_N_SHINE;
     a68:	00001cee 	andeq	r1, r0, lr, ror #25
     a6c:	00001cf0 	strdeq	r1, [r0], -r0
     a70:	00001cf6 	strdeq	r1, [r0], -r6
}
     a74:	00001d06 	andeq	r1, r0, r6, lsl #26
	...
     a80:	00001ce8 	andeq	r1, r0, r8, ror #25
     a84:	00001cea 	andeq	r1, r0, sl, ror #25
void system_init () {
     a88:	00001cee 	andeq	r1, r0, lr, ror #25
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	00001cf0 	strdeq	r1, [r0], -r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a90:	00001cf6 	strdeq	r1, [r0], -r6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a94:	00001cf6 	strdeq	r1, [r0], -r6
     a98:	00001cf8 	strdeq	r1, [r0], -r8
     a9c:	00001cfa 	strdeq	r1, [r0], -sl
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	00001d4e 	andeq	r1, r0, lr, asr #26
     aac:	00001d52 	andeq	r1, r0, r2, asr sp
     ab0:	00001d54 	andeq	r1, r0, r4, asr sp
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	00001d56 	andeq	r1, r0, r6, asr sp
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ac0:	00001d5a 	andeq	r1, r0, sl, asr sp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	00001d5a 	andeq	r1, r0, sl, asr sp
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac8:	00001d5c 	andeq	r1, r0, ip, asr sp
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	00001d5e 	andeq	r1, r0, lr, asr sp
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
     ae0:	00000001 	andeq	r0, r0, r1
     ae4:	00000001 	andeq	r0, r0, r1
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     af0:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x40)
     af4:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	00000001 	andeq	r0, r0, r1
     afc:	00000001 	andeq	r0, r0, r1
	...
     b08:	00000001 	andeq	r0, r0, r1
	all_leds_blink;
     b0c:	00000001 	andeq	r0, r0, r1
     b10:	00000001 	andeq	r0, r0, r1
     b14:	00000001 	andeq	r0, r0, r1
	...
     b20:	00000001 	andeq	r0, r0, r1
     b24:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b28:	00000001 	andeq	r0, r0, r1
     b2c:	00000001 	andeq	r0, r0, r1
	...
     b38:	00001c64 	andeq	r1, r0, r4, ror #24
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	00001c98 	muleq	r0, r8, ip
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	00001c98 	muleq	r0, r8, ip
     b44:	00001cc8 	andeq	r1, r0, r8, asr #25
	IntEnable (INT_AON_RTC_COMB);
     b48:	00001cc8 	andeq	r1, r0, r8, asr #25
     b4c:	00001ce0 	andeq	r1, r0, r0, ror #25
     b50:	00001ce0 	andeq	r1, r0, r0, ror #25
	__pi_malloc_init ();
     b54:	00001d34 	andeq	r1, r0, r4, lsr sp
	IntEnable (INT_AON_GPIO_EDGE);
     b58:	00001d34 	andeq	r1, r0, r4, lsr sp
     b5c:	00001d74 	andeq	r1, r0, r4, ror sp
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b60:	00001d74 	andeq	r1, r0, r4, ror sp
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	00001d98 	muleq	r0, r8, sp
     b68:	00001d98 	muleq	r0, r8, sp
     b6c:	00001dac 	andeq	r1, r0, ip, lsr #27
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b70:	00001dac 	andeq	r1, r0, ip, lsr #27
     b74:	00001dc0 	andeq	r1, r0, r0, asr #27
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	00000001 	andeq	r0, r0, r1
     b7c:	00000001 	andeq	r0, r0, r1
     b80:	00000001 	andeq	r0, r0, r1
	urates [0] = UART_RATE / 100;
     b84:	00000001 	andeq	r0, r0, r1
     b88:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
     b8c:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
     b90:	00000001 	andeq	r0, r0, r1
     b94:	00000001 	andeq	r0, r0, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	00000001 	andeq	r0, r0, r1
     b9c:	00000001 	andeq	r0, r0, r1
     ba0:	00000001 	andeq	r0, r0, r1
     ba4:	00000001 	andeq	r0, r0, r1
     ba8:	00000001 	andeq	r0, r0, r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bac:	00000001 	andeq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	00001dc0 	andeq	r1, r0, r0, asr #27
     bbc:	00001e38 	andeq	r1, r0, r8, lsr lr
	...
	IntEnable (INT_UART0_COMB);
     bc8:	00001e38 	andeq	r1, r0, r8, lsr lr
}
     bcc:	00001e8c 	andeq	r1, r0, ip, lsl #29
	...
		diag ("");
     bd8:	00001e8c 	andeq	r1, r0, ip, lsl #29
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bdc:	00001eec 	andeq	r1, r0, ip, ror #29
	...
		diag ("Leftover RAM: %d bytes",
     be8:	00002112 	andeq	r2, r0, r2, lsl r1
     bec:	00002114 	andeq	r2, r0, r4, lsl r1
     bf0:	00002128 	andeq	r2, r0, r8, lsr #2
     bf4:	0000212a 	andeq	r2, r0, sl, lsr #2
     bf8:	0000212c 	andeq	r2, r0, ip, lsr #2
     bfc:	0000212e 	andeq	r2, r0, lr, lsr #2
	...
     c08:	0000219c 	muleq	r0, ip, r1
     c0c:	000021a2 	andeq	r2, r0, r2, lsr #3
     c10:	000021a6 	andeq	r2, r0, r6, lsr #3
     c14:	000021a8 	andeq	r2, r0, r8, lsr #3
	...
     c20:	000021ca 	andeq	r2, r0, sl, asr #3
     c24:	000021d0 	ldrdeq	r2, [r0], -r0
     c28:	000021d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
     c2c:	000021d4 	ldrdeq	r2, [r0], -r4
	...
     c38:	000021d8 	ldrdeq	r2, [r0], -r8
     c3c:	000021e4 	andeq	r2, r0, r4, ror #3
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	000021e4 	andeq	r2, r0, r4, ror #3
     c44:	000021e8 	andeq	r2, r0, r8, ror #3
     c48:	000021ea 	andeq	r2, r0, sl, ror #3
     c4c:	0000220e 	andeq	r2, r0, lr, lsl #4
	...
     c58:	000021e8 	andeq	r2, r0, r8, ror #3
     c5c:	000021ea 	andeq	r2, r0, sl, ror #3
}
     c60:	0000220e 	andeq	r2, r0, lr, lsl #4
__attribute__ ((noreturn)) void __pi_release () {
     c64:	00002248 	andeq	r2, r0, r8, asr #4
     c68:	0000224a 	andeq	r2, r0, sl, asr #4
     c6c:	0000225c 	andeq	r2, r0, ip, asr r2
	...
	check_stack_overflow;
     c78:	0000231c 	andeq	r2, r0, ip, lsl r3
     c7c:	0000231c 	andeq	r2, r0, ip, lsl r3
	update_n_wake (MAX_WORD, NO);
     c80:	00002320 	andeq	r2, r0, r0, lsr #6
     c84:	0000233a 	andeq	r2, r0, sl, lsr r3
     c88:	0000233c 	andeq	r2, r0, ip, lsr r3
	for_all_tasks (__pi_curr) {
     c8c:	0000233e 	andeq	r2, r0, lr, lsr r3
     c90:	00002340 	andeq	r2, r0, r0, asr #6
     c94:	00002342 	andeq	r2, r0, r2, asr #6
     c98:	00002346 	andeq	r2, r0, r6, asr #6
	__SLEEP;
     c9c:	00002350 	andeq	r2, r0, r0, asr r3
	...
     ca8:	00002462 	andeq	r2, r0, r2, ror #8
	system_event_count ++;
     cac:	00002466 	andeq	r2, r0, r6, ror #8
     cb0:	00002482 	andeq	r2, r0, r2, lsl #9
	switch (__pi_systat.effpdm) {
     cb4:	00002486 	andeq	r2, r0, r6, lsl #9
	...
     cc0:	00002466 	andeq	r2, r0, r6, ror #8
			__WFI ();
     cc4:	00002482 	andeq	r2, r0, r2, lsl #9
     cc8:	00002486 	andeq	r2, r0, r6, lsl #9
     ccc:	0000248e 	andeq	r2, r0, lr, lsl #9
	...
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	000025fa 	strdeq	r2, [r0], -sl
     cdc:	000025fc 	strdeq	r2, [r0], -ip
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	000025fe 	strdeq	r2, [r0], -lr
			goto Redo;
     ce4:	00002602 	andeq	r2, r0, r2, lsl #12
	...
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cf0:	000025fc 	strdeq	r2, [r0], -ip
     cf4:	000025fe 	strdeq	r2, [r0], -lr
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	00002602 	andeq	r2, r0, r2, lsl #12
     cfc:	00002628 	andeq	r2, r0, r8, lsr #12
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d08:	00002670 	andeq	r2, r0, r0, ror r6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	00002672 	andeq	r2, r0, r2, ror r6
     d10:	00002676 	andeq	r2, r0, r6, ror r6
			__WFI ();
     d14:	0000267c 	andeq	r2, r0, ip, ror r6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d18:	0000267e 	andeq	r2, r0, lr, ror r6
     d1c:	000026ca 	andeq	r2, r0, sl, asr #13
}
     d20:	000026cc 	andeq	r2, r0, ip, asr #13
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d24:	000026d0 	ldrdeq	r2, [r0], -r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d28:	000026d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2c:	000026e2 	andeq	r2, r0, r2, ror #13
     d30:	000026e6 	andeq	r2, r0, r6, ror #13
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d34:	000026ea 	andeq	r2, r0, sl, ror #13
     d38:	0000271c 	andeq	r2, r0, ip, lsl r7
     d3c:	00002720 	andeq	r2, r0, r0, lsr #14
	...
     d48:	00002726 	andeq	r2, r0, r6, lsr #14
     d4c:	00002728 	andeq	r2, r0, r8, lsr #14
     d50:	0000272a 	andeq	r2, r0, sl, lsr #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	00002758 	andeq	r2, r0, r8, asr r7
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d60:	00001eec 	andeq	r1, r0, ip, ror #29
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d64:	00001f0c 	andeq	r1, r0, ip, lsl #30
     d68:	00001f0c 	andeq	r1, r0, ip, lsl #30
     d6c:	0000209c 	muleq	r0, ip, r0
     d70:	0000209c 	muleq	r0, ip, r0
			SysCtrlSetRechargeBeforePowerDown
     d74:	000020e4 	andeq	r2, r0, r4, ror #1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d78:	000020e4 	andeq	r2, r0, r4, ror #1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	00002108 	andeq	r2, r0, r8, lsl #2
     d80:	00002108 	andeq	r2, r0, r8, lsl #2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	00002164 	andeq	r2, r0, r4, ror #2
     d88:	00002164 	andeq	r2, r0, r4, ror #2
     d8c:	0000219c 	muleq	r0, ip, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d90:	0000219c 	muleq	r0, ip, r1
     d94:	0000231c 	andeq	r2, r0, ip, lsl r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d98:	0000231c 	andeq	r2, r0, ip, lsl r3
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d9c:	000023ec 	andeq	r2, r0, ip, ror #7
     da0:	000023ec 	andeq	r2, r0, ip, ror #7
     da4:	000025dc 	ldrdeq	r2, [r0], -ip
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da8:	000025dc 	ldrdeq	r2, [r0], -ip
			while (!(AONWUCPowerStatusGet () &
     dac:	0000264c 	andeq	r2, r0, ip, asr #12
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db0:	0000264c 	andeq	r2, r0, ip, asr #12
     db4:	000027c0 	andeq	r2, r0, r0, asr #15
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dc0:	000027c0 	andeq	r2, r0, r0, asr #15
     dc4:	000027e4 	andeq	r2, r0, r4, ror #15
     dc8:	000027e4 	andeq	r2, r0, r4, ror #15
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	00002808 	andeq	r2, r0, r8, lsl #16
     dd0:	00002808 	andeq	r2, r0, r8, lsl #16
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	00002810 	andeq	r2, r0, r0, lsl r8
     dd8:	00002810 	andeq	r2, r0, r0, lsl r8
			SysCtrlAdjustRechargeAfterPowerDown ();
     ddc:	00002814 	andeq	r2, r0, r4, lsl r8
			reinit_uart ();
     de0:	00002814 	andeq	r2, r0, r4, lsl r8
     de4:	00002818 	andeq	r2, r0, r8, lsl r8
     de8:	00002818 	andeq	r2, r0, r8, lsl r8
}
     dec:	00002860 	andeq	r2, r0, r0, ror #16
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	0000286e 	andeq	r2, r0, lr, ror #16
     dfc:	0000286e 	andeq	r2, r0, lr, ror #16
     e00:	00002874 	andeq	r2, r0, r4, ror r8
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	000028d0 	ldrdeq	r2, [r0], -r0
	...
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e10:	00002860 	andeq	r2, r0, r0, ror #16
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	000028d0 	ldrdeq	r2, [r0], -r0
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e20:	000028e4 	andeq	r2, r0, r4, ror #17
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e24:	000029c8 	andeq	r2, r0, r8, asr #19
     e28:	000029ce 	andeq	r2, r0, lr, asr #19
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2c:	000029d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e30:	000029d8 	ldrdeq	r2, [r0], -r8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e34:	000029ec 	andeq	r2, r0, ip, ror #19
	...
			PRCMPowerDomainOff (
     e40:	000028d0 	ldrdeq	r2, [r0], -r0
	__SLEEP;
     e44:	000029ec 	andeq	r2, r0, ip, ror #19
	...
	goto Redo;
     e50:	00002a18 	andeq	r2, r0, r8, lsl sl
     e54:	00002a1a 	andeq	r2, r0, sl, lsl sl
     e58:	00002ae8 	andeq	r2, r0, r8, ror #21
     e5c:	00002b0c 	andeq	r2, r0, ip, lsl #22
     e60:	00002b0e 	andeq	r2, r0, lr, lsl #22
     e64:	00002b56 	andeq	r2, r0, r6, asr fp
     e68:	00002b80 	andeq	r2, r0, r0, lsl #23
     e6c:	00002b82 	andeq	r2, r0, r2, lsl #23
	...
     e78:	00002a1a 	andeq	r2, r0, sl, lsl sl
     e7c:	00002a1c 	andeq	r2, r0, ip, lsl sl
     e80:	00002abe 			; <UNDEFINED> instruction: 0x00002abe
     e84:	00002ae8 	andeq	r2, r0, r8, ror #21
     e88:	00002b0c 	andeq	r2, r0, ip, lsl #22
     e8c:	00002b0e 	andeq	r2, r0, lr, lsl #22
	...
     e98:	00002a5a 	andeq	r2, r0, sl, asr sl
     e9c:	00002a62 	andeq	r2, r0, r2, ror #20
     ea0:	00002c06 	andeq	r2, r0, r6, lsl #24
     ea4:	00002c12 	andeq	r2, r0, r2, lsl ip
	...
     eb0:	00002b60 	andeq	r2, r0, r0, ror #22
     eb4:	00002b80 	andeq	r2, r0, r0, lsl #23
     eb8:	00002b82 	andeq	r2, r0, r2, lsl #23
	cli_tim;
     ebc:	00002bc6 	andeq	r2, r0, r6, asr #23
	...
	diag ("PicOS halted");
     ec8:	000029ec 	andeq	r2, r0, ip, ror #19
	mdelay (500);
     ecc:	00002a0c 	andeq	r2, r0, ip, lsl #20
     ed0:	00002a0c 	andeq	r2, r0, ip, lsl #20
	setpowermode (2);
     ed4:	00002c3c 	andeq	r2, r0, ip, lsr ip
	__PCB = NULL;
     ed8:	00002c3c 	andeq	r2, r0, ip, lsr ip
	release;
     edc:	00002c8c 	andeq	r2, r0, ip, lsl #25
	...
     ee8:	00002ca0 	andeq	r2, r0, r0, lsr #25
int main (void) {
     eec:	00002ca4 	andeq	r2, r0, r4, lsr #25
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	00002f7e 	andeq	r2, r0, lr, ror pc
     ef4:	00002fc6 	andeq	r2, r0, r6, asr #31
	...
	system_init ();
     f00:	00002ca4 	andeq	r2, r0, r4, lsr #25
	tcv_init ();
     f04:	00002caa 	andeq	r2, r0, sl, lsr #25
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f08:	00002ce2 	andeq	r2, r0, r2, ror #25
     f0c:	00002d4e 	andeq	r2, r0, lr, asr #26
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	00002fe2 	andeq	r2, r0, r2, ror #31
     f14:	00003002 	andeq	r3, r0, r2
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f20:	00002e06 	andeq	r2, r0, r6, lsl #28
	delay (16, 0);
     f24:	00002e80 	andeq	r2, r0, r0, lsl #29
     f28:	0000300a 	andeq	r3, r0, sl
     f2c:	00003012 	andeq	r3, r0, r2, lsl r0
	...
	__pi_release ();
     f38:	00002e98 	muleq	r0, r8, lr
     f3c:	00002eee 	andeq	r2, r0, lr, ror #29
     f40:	00002f64 	andeq	r2, r0, r4, ror #30
     f44:	00002f7e 	andeq	r2, r0, lr, ror pc
	...
	wfun = (aword)(pid->code);
     f50:	00002ef4 	strdeq	r2, [r0], -r4
	for_all_tasks (i) {
     f54:	00002f64 	andeq	r2, r0, r4, ror #30
		for (j = 0; j < nevents (i); j++) {
     f58:	00002fc6 	andeq	r2, r0, r6, asr #31
     f5c:	00002fce 	andeq	r2, r0, lr, asr #31
     f60:	00003012 	andeq	r3, r0, r2, lsl r0
			    || i->Events [j] . Event == wfun
     f64:	0000301c 	andeq	r3, r0, ip, lsl r0
	...
			if (i->Events [j] . Event == (aword)pid
     f70:	00002c8c 	andeq	r2, r0, ip, lsl #25
     f74:	0000301c 	andeq	r3, r0, ip, lsl r0
	...
	for_all_tasks (i) {
     f80:	0000301c 	andeq	r3, r0, ip, lsl r0
}
     f84:	00003044 	andeq	r3, r0, r4, asr #32
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	00000001 	andeq	r0, r0, r1
static void qfree (aword *ch) {
     f8c:	00000001 	andeq	r0, r0, r1
	...
	m_setnextp (ch, chunk);
     f98:	00003044 	andeq	r3, r0, r4, asr #32
	m_setnextp (cc, ch);
     f9c:	00003074 	andeq	r3, r0, r4, ror r0
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa8:	00003074 	andeq	r3, r0, r4, ror r0
     fac:	00003094 	muleq	r0, r4, r0
			m_setnextp (cc, m_nextp (chunk));
     fb0:	00003094 	muleq	r0, r4, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb4:	000030ac 	andeq	r3, r0, ip, lsr #1
	...
     fc0:	000030ac 	andeq	r3, r0, ip, lsr #1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	000030b4 	strheq	r3, [r0], -r4
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	00000001 	andeq	r0, r0, r1
     fcc:	00000001 	andeq	r0, r0, r1
     fd0:	000030b4 	strheq	r3, [r0], -r4
			m_setnextp (cc, m_nextp (chunk));
     fd4:	000030bc 	strheq	r3, [r0], -ip
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	00000001 	andeq	r0, r0, r1
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	00000001 	andeq	r0, r0, r1
     fe4:	00000001 	andeq	r0, r0, r1
	...
			if (m_size (chunk) >= m_size (ch))
     ff0:	0000311e 	andeq	r3, r0, lr, lsl r1
     ff4:	0000312e 	andeq	r3, r0, lr, lsr #2
     ff8:	00003134 	andeq	r3, r0, r4, lsr r1
		chunk = m_nextp (chunk))
     ffc:	00003136 	andeq	r3, r0, r6, lsr r1
	...
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	000030bc 	strheq	r3, [r0], -ip
	diag_wait (a);
    100c:	00003118 	andeq	r3, r0, r8, lsl r1
	diag_wchar (c, a);
    1010:	00003118 	andeq	r3, r0, r8, lsl r1
    1014:	00003144 	andeq	r3, r0, r4, asr #2
}
    1018:	00000001 	andeq	r0, r0, r1
    101c:	00000001 	andeq	r0, r0, r1
	syserror (ESTATE, "state");
    1020:	00003144 	andeq	r3, r0, r4, asr #2
    1024:	0000315c 	andeq	r3, r0, ip, asr r1
    1028:	0000315c 	andeq	r3, r0, ip, asr r1
    102c:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
void utimer_add (address ut) {
    1034:	000031f0 	strdeq	r3, [r0], -r0
    1038:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [i] == NULL)
    103c:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "ut a");
    1048:	00000001 	andeq	r0, r0, r1
	__pi_utims [i] = ut;
    104c:	00000001 	andeq	r0, r0, r1
}
    1050:	00000001 	andeq	r0, r0, r1
    1054:	00000001 	andeq	r0, r0, r1
	...
	TCI_RUN_AUXILIARY_TIMER;
    1060:	00000001 	andeq	r0, r0, r1
void update_n_wake (word min, Boolean force) {
    1064:	00000001 	andeq	r0, r0, r1
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	000031f0 	strdeq	r3, [r0], -r0
    106c:	00003218 	andeq	r3, r0, r8, lsl r2
    1070:	00003218 	andeq	r3, r0, r8, lsl r2
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1074:	00003264 	andeq	r3, r0, r4, ror #4
    1078:	00003264 	andeq	r3, r0, r4, ror #4
    107c:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    1080:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
    1084:	000034cc 	andeq	r3, r0, ip, asr #9
    1088:	000034cc 	andeq	r3, r0, ip, asr #9
    108c:	000034ec 	andeq	r3, r0, ip, ror #9
    1090:	00000001 	andeq	r0, r0, r1
    1094:	00000001 	andeq	r0, r0, r1
    1098:	000034ec 	andeq	r3, r0, ip, ror #9
    109c:	00003508 	andeq	r3, r0, r8, lsl #10
	...
		for_all_tasks (i) {
    10a8:	00003508 	andeq	r3, r0, r8, lsl #10
	__pi_mintk = znew + min;
    10ac:	000035dc 	ldrdeq	r3, [r0], -ip
    10b0:	000035dc 	ldrdeq	r3, [r0], -ip
			if (!twaiting (i))
    10b4:	00003680 	andeq	r3, r0, r0, lsl #13
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10c0:	0000368e 	andeq	r3, r0, lr, lsl #13
    10c4:	00003690 	muleq	r0, r0, r6
    10c8:	00003694 	muleq	r0, r4, r6
    10cc:	00003698 	muleq	r0, r8, r6
	...
    10d8:	0000399c 	muleq	r0, ip, r9
    10dc:	0000399e 	muleq	r0, lr, r9
    10e0:	000039a0 	andeq	r3, r0, r0, lsr #19
    10e4:	000039a2 	andeq	r3, r0, r2, lsr #19
	...
				wakeuptm (i);
    10f0:	00003680 	andeq	r3, r0, r0, lsl #13
		for_all_tasks (i) {
    10f4:	000036fc 	strdeq	r3, [r0], -ip
				d = i->Timer - znew;
    10f8:	000036fc 	strdeq	r3, [r0], -ip
    10fc:	000037a8 	andeq	r3, r0, r8, lsr #15
    1100:	000037a8 	andeq	r3, r0, r8, lsr #15
		if ((word)(__pi_mintk - znew) < min) 
    1104:	00003804 	andeq	r3, r0, r4, lsl #16
    1108:	00003804 	andeq	r3, r0, r4, lsl #16
    110c:	0000381c 	andeq	r3, r0, ip, lsl r8
	__pi_old = znew;
    1110:	00000001 	andeq	r0, r0, r1
}
    1114:	00000001 	andeq	r0, r0, r1
	TCI_RUN_DELAY_TIMER;
    1118:	0000381c 	andeq	r3, r0, ip, lsl r8
}
    111c:	0000382c 	andeq	r3, r0, ip, lsr #16
    1120:	0000382c 	andeq	r3, r0, ip, lsr #16
    1124:	00003840 	andeq	r3, r0, r0, asr #16
    1128:	00003840 	andeq	r3, r0, r0, asr #16
    112c:	000038a4 	andeq	r3, r0, r4, lsr #17
void proceed (word state) {
    1130:	000038a4 	andeq	r3, r0, r4, lsr #17
	prcdstate (__pi_curr, state);
    1134:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    1138:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
	release;
    113c:	000038cc 	andeq	r3, r0, ip, asr #17
    1140:	000038cc 	andeq	r3, r0, ip, asr #17
void __pi_wait (aword event, word state) {
    1144:	000038e0 	andeq	r3, r0, r0, ror #17
	sint j = nevents (__pi_curr);
    1148:	000038e0 	andeq	r3, r0, r0, ror #17
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	00003908 	andeq	r3, r0, r8, lsl #18
    1150:	00003908 	andeq	r3, r0, r8, lsl #18
    1154:	00003918 	andeq	r3, r0, r8, lsl r9
		syserror (ENEVENTS, "sw");
    1158:	00003918 	andeq	r3, r0, r8, lsl r9
    115c:	00003944 	andeq	r3, r0, r4, asr #18
	setestate (__pi_curr->Events [j], state, event);
    1160:	00003944 	andeq	r3, r0, r4, asr #18
	incwait (__pi_curr);
    1164:	00003958 	andeq	r3, r0, r8, asr r9
	setestate (__pi_curr->Events [j], state, event);
    1168:	00003958 	andeq	r3, r0, r8, asr r9
}
    116c:	0000396c 	andeq	r3, r0, ip, ror #18
    1170:	0000396c 	andeq	r3, r0, ip, ror #18
    1174:	00003a7c 	andeq	r3, r0, ip, ror sl
void __pi_trigger (aword event) {
    1178:	00003a7c 	andeq	r3, r0, ip, ror sl
	for_all_tasks (i) {
    117c:	00003ae0 	andeq	r3, r0, r0, ror #21
		for (j = 0; j < nevents (i); j++) {
    1180:	00003ae0 	andeq	r3, r0, r0, ror #21
    1184:	00003b08 	andeq	r3, r0, r8, lsl #22
    1188:	00003b08 	andeq	r3, r0, r8, lsl #22
    118c:	00003c58 	andeq	r3, r0, r8, asr ip
	...
			if (i->Events [j] . Event == event) {
    1198:	00000001 	andeq	r0, r0, r1
				wakeupev (i, j);
    119c:	00000001 	andeq	r0, r0, r1
    11a0:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
    11a4:	00000001 	andeq	r0, r0, r1
	...
	for_all_tasks (i) {
    11b0:	00003cce 	andeq	r3, r0, lr, asr #25
    11b4:	00003cd0 	ldrdeq	r3, [r0], -r0
	return 0;
    11b8:	00003cd2 	ldrdeq	r3, [r0], -r2
		if ((aword)i == pid) {
    11bc:	00003cd6 	ldrdeq	r3, [r0], -r6
	...
	for_all_tasks (i) {
    11c8:	00000001 	andeq	r0, r0, r1
    11cc:	00000001 	andeq	r0, r0, r1
void delay (word d, word state) {
    11d0:	00003c58 	andeq	r3, r0, r8, asr ip
	settstate (__pi_curr, state);
    11d4:	00003e78 	andeq	r3, r0, r8, ror lr
    11d8:	00003e78 	andeq	r3, r0, r8, ror lr
    11dc:	00003ed8 	ldrdeq	r3, [r0], -r8
    11e0:	00000001 	andeq	r0, r0, r1
	update_n_wake (d, YES);
    11e4:	00000001 	andeq	r0, r0, r1
    11e8:	00003ed8 	ldrdeq	r3, [r0], -r8
	__pi_curr->Timer = __pi_old + d;
    11ec:	00003ef0 	strdeq	r3, [r0], -r0
	...
	inctimer (__pi_curr);
    11f8:	00003f3e 	andeq	r3, r0, lr, lsr pc
    11fc:	00003f42 	andeq	r3, r0, r2, asr #30
}
    1200:	00003f48 	andeq	r3, r0, r8, asr #30
    1204:	00003f4a 	andeq	r3, r0, sl, asr #30
	...
		return (int) __pi_curr;
    1210:	00003f42 	andeq	r3, r0, r2, asr #30
	for_all_tasks (i)
    1214:	00003f48 	andeq	r3, r0, r8, asr #30
}
    1218:	00003f4a 	andeq	r3, r0, sl, asr #30
		if (i->code == fun)
    121c:	00003f52 	andeq	r3, r0, r2, asr pc
	...
	for_all_tasks (i)
    1228:	00000001 	andeq	r0, r0, r1
int __pi_strlen (const char *s) {
    122c:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
    1230:	00000001 	andeq	r0, r0, r1
}
    1234:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
    1238:	00003ef0 	strdeq	r3, [r0], -r0
	while (n--)
    123c:	00003f3c 	andeq	r3, r0, ip, lsr pc
    1240:	00000001 	andeq	r0, r0, r1
		*dest++ = *src++;
    1244:	00000001 	andeq	r0, r0, r1
    1248:	00003f3c 	andeq	r3, r0, ip, lsr pc
    124c:	00003fa8 	andeq	r3, r0, r8, lsr #31
	while (n--)
    1250:	00003fa8 	andeq	r3, r0, r8, lsr #31
}
    1254:	00003fbe 			; <UNDEFINED> instruction: 0x00003fbe
	...
		syserror (EREQPAR, "addv");
    1260:	00003fc0 	andeq	r3, r0, r0, asr #31
		syserror (ERESOURCE, "addv");
    1264:	00003fe8 	andeq	r3, r0, r8, ror #31
	if (ioreq [loc] != NULL)
    1268:	00003fe8 	andeq	r3, r0, r8, ror #31
    126c:	00003ff0 	strdeq	r3, [r0], -r0
		syserror (ERESOURCE, "addv");
    1270:	00000001 	andeq	r0, r0, r1
	ioreq [loc] = rf;
    1274:	00000001 	andeq	r0, r0, r1
}
    1278:	00000001 	andeq	r0, r0, r1
    127c:	00000001 	andeq	r0, r0, r1
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	00000001 	andeq	r0, r0, r1
    1284:	00000001 	andeq	r0, r0, r1
    1288:	00000001 	andeq	r0, r0, r1
    128c:	00000001 	andeq	r0, r0, r1
	...
		syserror (ENODEVICE, "io");
    12a0:	00000004 	andeq	r0, r0, r4
	if (len == 0)
    12a4:	00000006 	andeq	r0, r0, r6
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	0000000a 	andeq	r0, r0, sl
    12ac:	00000026 	andeq	r0, r0, r6, lsr #32
	if (ret >= 0)
    12b0:	00000028 	andeq	r0, r0, r8, lsr #32
	if (ret == -1) {
    12b4:	00000038 	andeq	r0, r0, r8, lsr r0
    12b8:	0000003e 	andeq	r0, r0, lr, lsr r0
		if (retry == WNONE)
    12bc:	00000040 	andeq	r0, r0, r0, asr #32
		iowait (dev, operation, retry);
    12c0:	00000042 	andeq	r0, r0, r2, asr #32
    12c4:	00000048 	andeq	r0, r0, r8, asr #32
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000522 	andeq	r0, r0, r2, lsr #10
       4:	024a0003 	subeq	r0, sl, #3
}
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      24:	2f656475 	svccs	0x00656475
      28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      2c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; fffffe90 <_estack+0xdfffae90>
      30:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      34:	2f00656e 	svccs	0x0000656e
      38:	2f727375 	svccs	0x00727375
      3c:	2f62696c 	svccs	0x0062696c
			i = k;
      40:	2f636367 	svccs	0x00636367
				j->Next = k;
      44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      48:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
}
      4c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      50:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      54:	2f312e32 	svccs	0x00312e32
		release;
      58:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      5c:	00656475 	rsbeq	r6, r5, r5, ror r4
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
	b->u.pointers.tail =
      64:	636e692f 	cmnvs	lr, #770048	; 0xbc000
}
      68:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
		return NULL;
      6c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      70:	2f62696c 	svccs	0x0062696c
      74:	00737973 	rsbseq	r7, r3, r3, ror r9
      78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc4 <_estack+0xdfffafc4>
      7c:	616d2f65 	cmnvs	sp, r5, ror #30
      80:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      84:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      88:	706f746b 	rsbvc	r7, pc, fp, ror #8
      8c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      90:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      94:	4349502f 	movtmi	r5, #36911	; 0x902f
      98:	502f534f 	eorpl	r5, pc, pc, asr #6
      9c:	534f6369 	movtpl	r6, #62313	; 0xf369
      a0:	3143432f 	cmpcc	r3, pc, lsr #6
      a4:	00585833 	subseq	r5, r8, r3, lsr r8
      a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; fffffff4 <_estack+0xdfffaff4>
      ac:	616d2f65 	cmnvs	sp, r5, ror #30
      b0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      bc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      c0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      c4:	4349502f 	movtmi	r5, #36911	; 0x902f
fsm transmitter (message * messagePtr) {
      c8:	502f534f 	eorpl	r5, pc, pc, asr #6
      cc:	534f6369 	movtpl	r6, #62313	; 0xf369
      d0:	6f682f00 	svcvs	0x00682f00
}
      d4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff28 <_estack+0xdfffaf28>
      d8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      e0:	6f746b73 	svcvs	0x00746b73
      e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
        spkt [0] = 0;
      ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      f0:	2f534f43 	svccs	0x00534f43
        *p = messagePtr->messageType; p++; // insert message type
      f4:	4f636950 	svcmi	0x00636950
        *p = messagePtr->requestNumber; p++; // insert request number
      f8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	2f736269 	svccs	0x00736269
        *p = messagePtr->destinationId; p++; // insert receiver ID
     100:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
        tcv_endp (spkt);
     104:	682f0049 	stmdavs	pc!, {r0, r3, r6}	; <UNPREDICTABLE>
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	2f656d6f 	svccs	0x00656d6f
     10c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
}
     110:	442f6e69 	strtmi	r6, [pc], #-3689	; 118 <_Min_Stack_Size+0x18>
        finish;
     114:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     118:	4f2f706f 	svcmi	0x002f706f
     11c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     120:	502f5445 	eorpl	r5, pc, r5, asr #8
char randomNumber() {
     124:	534f4349 	movtpl	r4, #62281	; 0xf349
   srand((unsigned) time(&t));
     128:	6369502f 	cmnvs	r9, #47	; 0x2f
     12c:	6b2f534f 	blvs	bd4e70 <__ccfg+0xbb4ec8>
   return (char)rand();
     130:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
}
     134:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     138:	2f656d6f 	svccs	0x00656d6f
fsm root {
     13c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     140:	442f6e69 	strtmi	r6, [pc], #-3689	; 148 <root+0xc>
     144:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     148:	4f2f706f 	svcmi	0x002f706f
     14c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     150:	502f5445 	eorpl	r5, pc, r5, asr #8
     154:	534f4349 	movtpl	r4, #62281	; 0xf349
     158:	6369502f 	cmnvs	r9, #47	; 0x2f
     15c:	562f534f 	strtpl	r5, [pc], -pc, asr #6
     160:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
     164:	756c502f 	strbvc	r5, [ip, #-47]!	; 0xffffffd1
     168:	6c754e67 	ldclvs	14, cr4, [r5], #-412	; 0xfffffe64
     16c:	6100006c 	tstvs	r0, ip, rrx
        recordCount = 0;
     170:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
        nodeId = 1;
     174:	00000063 	andeq	r0, r0, r3, rrx
     178:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
        groupId = 1;
     17c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     180:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
        messagePtr = (message *) umalloc(sizeof(message));
     184:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	00010068 	andeq	r0, r1, r8, rrx
     18c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     190:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
        tcv_plug(0, &plug_null);
     194:	00020068 	andeq	r0, r2, r8, rrx
     198:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
        sfd = tcv_open(WNONE, 0, 0);
     19c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     1a0:	00030068 	andeq	r0, r3, r8, rrx
     1a4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	00000300 	andeq	r0, r0, r0, lsl #6
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	6b636f6c 	blvs	18dbf68 <__ccfg+0x18bbfc0>
		if (sfd < 0) {
     1b4:	0300682e 	movweq	r6, #2094	; 0x82e
			diag("Cannot open tcv interface");
     1b8:	735f0000 	cmpvc	pc, #0
     1bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
			halt();
     1c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
        currentProtocol = IDLE;
     1c4:	74000003 	strvc	r0, [r0], #-3
     1c8:	73657079 	cmnvc	r5, #121	; 0x79
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	0300682e 	movweq	r6, #2094	; 0x82e
     1d0:	74730000 	ldrbtvc	r0, [r3], #-0
     1d4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
     1d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1dc:	72610000 	rsbvc	r0, r1, #0
     1e0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
        ser_outf(Options, menu);
     1e4:	00000400 	andeq	r0, r0, r0, lsl #8
     1e8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     1f0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
     1f4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
        switch (choice)
     1f8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     1fc:	00000400 	andeq	r0, r0, r0, lsl #8
     200:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     204:	5f736e6f 	svcpl	0x00736e6f
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     20c:	00040068 	andeq	r0, r4, r8, rrx
     210:	73797300 	cmnvc	r9, #0, 6
     214:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     218:	00000500 	andeq	r0, r0, r0, lsl #10
     21c:	5f766374 	svcpl	0x00766374
     220:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
     224:	0600682e 	streq	r6, [r0], -lr, lsr #16
        proceed Menu_Header;
     228:	656b0000 	strbvs	r0, [fp, #-0]!
     22c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     234:	6c700000 	ldclvs	0, cr0, [r0], #-0
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
     23c:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
        proceed Menu_Header;
     240:	00080068 	andeq	r0, r8, r8, rrx
     244:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
     24c:	003e6e69 	eorseq	r6, lr, r9, ror #28
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	00000000 	andeq	r0, r0, r0
     254:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
     258:	0000c802 	andeq	ip, r0, r2, lsl #16
    if (node < 1 || node > 25) {
     25c:	01330300 	teqeq	r3, r0, lsl #6
     260:	05012305 	streq	r2, [r1, #-773]	; 0xfffffcfb
            proceed Set_Node_ID;
     264:	21050158 	tstcs	r5, r8, asr r1
        proceed Menu_Header;
     268:	58050106 	stmdapl	r5, {r1, r2, r8}
     26c:	06130520 	ldreq	r0, [r3], -r0, lsr #10
        currentProtocol = DISCOVERY_REQUEST;
     270:	054a1403 	strbeq	r1, [sl, #-1027]	; 0xfffffbfd
     274:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
        receiverId = 0;
     278:	4f052e13 	svcmi	0x00052e13
        proceed Transmit_Message;
     27c:	052e6c03 	streq	r6, [lr, #-3075]!	; 0xfffff3fd
        currentProtocol = CREATE_RECORD;
     280:	4f052610 	svcmi	0x00052610
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
     288:	2d052610 	stccs	6, cr2, [r5, #-64]	; 0xffffffc0
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
     290:	15230609 	strne	r0, [r3, #-1545]!	; 0xfffff9f7
     294:	01061005 	tsteq	r6, r5
    if (node < 1 || node > 25) {
     298:	4b060905 	blmi	1826b4 <__ccfg+0x16270c>
     29c:	01061205 	tsteq	r6, r5, lsl #4
            proceed Create_Record;
     2a0:	21060905 	tstcs	r6, r5, lsl #18
     2a4:	060c0513 			; <UNDEFINED> instruction: 0x060c0513
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	06290501 	strteq	r0, [r9], -r1, lsl #10
     2ac:	1309052e 	movwne	r0, #38190	; 0x952e
     2b0:	01061805 	tsteq	r6, r5, lsl #16
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     2b8:	05200627 	streq	r0, [r0, #-1575]!	; 0xfffff9d9
     2bc:	18051309 	stmdane	r5, {r0, r3, r8, r9, ip}
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	0c050106 	stfeqs	f0, [r5], {6}
        proceed Transmit_Message;
     2c4:	06290520 	strteq	r0, [r9], -r0, lsr #10
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	13090520 	movwne	r0, #38176	; 0x9520
        proceed Transmit_Message;
     2cc:	01061805 	tsteq	r6, r5, lsl #16
        currentProtocol = DELETE_RECORD;
     2d0:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	05200624 	streq	r0, [r0, #-1572]!	; 0xfffff9dc
        currentProtocol = DELETE_RECORD;
     2d8:	18051309 	stmdane	r5, {r0, r3, r8, r9, ip}
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	0c050106 	stfeqs	f0, [r5], {6}
        proceed Get_Receiving_Node;
     2e0:	06290520 	strteq	r0, [r9], -r0, lsr #10
        currentProtocol = RETRIEVE_RECORD;
     2e4:	14090520 	strne	r0, [r9], #-1312	; 0xfffffae0
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	01054b31 	tsteq	r5, r1, lsr fp
        currentProtocol = RETRIEVE_RECORD;
     2ec:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	0009022d 	andeq	r0, r9, sp, lsr #4
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	22050101 	andcs	r0, r5, #1073741824	; 0x40000000
     2f8:	00020500 	andeq	r0, r2, r0, lsl #10
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	03000000 	movweq	r0, #0
     300:	050100d2 	streq	r0, [r1, #-210]	; 0xffffff2e
     304:	08051305 	stmdaeq	r5, {r0, r2, r8, r9, ip}
    if (node < 1 || node > 25) {
     308:	01050106 	tsteq	r5, r6, lsl #2
     30c:	00050225 	andeq	r0, r5, r5, lsr #4
            proceed Prompt_Recieving_Node;
     310:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
     318:	03000001 	movweq	r0, #1
        char desiredRecordIndex = -1;
     31c:	050100e0 	streq	r0, [r1, #-224]	; 0xffffff20
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	05151304 	ldreq	r1, [r5, #-772]	; 0xfffffcfc
     324:	240e0615 	strcs	r0, [lr], #-1557	; 0xfffff9eb
        char desiredRecordIndex = -1;
     328:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	06110530 			; <UNDEFINED> instruction: 0x06110530
        messagePtr->recordIndex = desiredRecordIndex;
     330:	2f010501 	svccs	0x00010501
     334:	01000402 	tsteq	r0, r2, lsl #8
     338:	001a0501 	andseq	r0, sl, r1, lsl #10
        proceed Transmit_Message;
     33c:	013c0205 	teqeq	ip, r5, lsl #4
        messagePtr -> senderGroupId = groupId;
     340:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
     344:	1c050100 	stfnes	f0, [r5], {-0}
     348:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
        messagePtr -> messageType = currentProtocol;
     34c:	06050501 	streq	r0, [r5], -r1, lsl #10
     350:	0a039208 	beq	e4b78 <__ccfg+0xc4bd0>
        messagePtr -> requestNumber = randomNumber();
     354:	15090501 	strne	r0, [r9, #-1281]	; 0xfffffaff
        messagePtr -> senderId = nodeId;
     358:	01061505 	tsteq	r6, r5, lsl #10
     35c:	05301005 	ldreq	r1, [r0, #-5]!
        call transmitter(messagePtr, Menu_Header);
     360:	09051e15 	stmdbeq	r5, {r0, r2, r4, r9, sl, fp, ip}
        messagePtr -> destinationId = receiverId;
     364:	10052206 	andne	r2, r5, r6, lsl #4
     368:	09050106 	stmdbeq	r5, {r1, r2, r8}
        call transmitter(messagePtr, Menu_Header);
     36c:	11052f06 	tstne	r5, r6, lsl #30
     370:	2c050106 	stfcss	f0, [r5], {6}
     374:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
     378:	22060905 	andcs	r0, r6, #81920	; 0x14000
            proceed Set_Node_ID;
     37c:	01062c05 	tsteq	r6, r5, lsl #24
            break;
     380:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
            proceed Set_Node_ID;
     384:	14052309 	strne	r2, [r5], #-777	; 0xfffffcf7
            proceed Find_Neighbours;
     388:	0609051d 			; <UNDEFINED> instruction: 0x0609051d
            proceed Create_Record;
     38c:	054d3f23 	strbeq	r3, [sp, #-3875]	; 0xfffff0dd
            proceed Delete_Record;
     390:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
            proceed Retrieve_Record;
     394:	0305660d 	movweq	r6, #22029	; 0x560d
            diag("Reset Local Storage");
     398:	2d0d0521 	cfstr32cs	mvfx0, [sp, #-132]	; 0xffffff7c
            break;
     39c:	21060305 	tstcs	r6, r5, lsl #6
            diag("Reset Local Storage");
     3a0:	06060531 			; <UNDEFINED> instruction: 0x06060531
     3a4:	06040501 	streq	r0, [r4], -r1, lsl #10
     3a8:	09053d3d 	stmdbeq	r5, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
     3ac:	06190532 			; <UNDEFINED> instruction: 0x06190532
     3b0:	2f090501 	svccs	0x00090501
     3b4:	051f1905 	ldreq	r1, [pc, #-2309]	; fffffab7 <_estack+0xdfffaab7>
     3b8:	cb210609 	blgt	841be4 <__ccfg+0x821c3c>
     3bc:	0368144d 	cmneq	r8, #1291845632	; 0x4d000000
     3c0:	4074082c 	rsbsmi	r0, r4, ip, lsr #16
     3c4:	4d405a4c 	vstrmi	s11, [r0, #-304]	; 0xfffffed0
     3c8:	03050568 	movweq	r0, #21864	; 0x5568
     3cc:	05017efb 	streq	r7, [r1, #-3835]	; 0xfffff105
     3d0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     3d4:	09052008 	stmdbeq	r5, {r3, sp}
     3d8:	0d053d06 	stceq	13, cr3, [r5, #-24]	; 0xffffffe8
     3dc:	01018503 	tsteq	r1, r3, lsl #10
     3e0:	403f0905 	eorsmi	r0, pc, r5, lsl #18
     3e4:	01061905 	tsteq	r6, r5, lsl #18
     3e8:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     3ec:	09051e19 	stmdbeq	r5, {r0, r3, r4, r9, sl, fp, ip}
     3f0:	14052106 	strne	r2, [r5], #-262	; 0xfffffefa
     3f4:	09050106 	stmdbeq	r5, {r1, r2, r8}
     3f8:	05322f06 	ldreq	r2, [r2, #-3846]!	; 0xfffff0fa
     3fc:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
     400:	19052f09 	stmdbne	r5, {r0, r3, r8, r9, sl, fp, sp}
     404:	0609052d 	streq	r0, [r9], -sp, lsr #10
static void devinit_uart (int devnum) {
     408:	05683121 	strbeq	r3, [r8, #-289]!	; 0xfffffedf
	adddevfunc (ioreq_uart_a, devnum);
     40c:	7ee70305 	cdpvc	3, 14, cr0, cr7, cr5, {0}
     410:	06120501 	ldreq	r0, [r2], -r1, lsl #10
void udelay (volatile word n) {
     414:	20080501 	andcs	r0, r8, r1, lsl #10
     418:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
	while (n) {
     41c:	99030d05 	stmdbls	r3, {r0, r2, r8, sl, fp}
     420:	09050101 	stmdbeq	r5, {r0, r8}
}
     424:	06270540 	strteq	r0, [r7], -r0, asr #10
	while (n--);
     428:	20090501 	andcs	r0, r9, r1, lsl #10
     42c:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
     430:	4c062009 	stcmi	0, cr2, [r6], {9}
		n--;
     434:	01062305 	tsteq	r6, r5, lsl #6
     438:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
     43c:	0d053c0b 	stceq	12, cr3, [r5, #-44]	; 0xffffffd4
void mdelay (volatile word n) {
     440:	2f052206 	svccs	0x00052206
     444:	09050106 	stmdbeq	r5, {r1, r2, r8}
	while (n) {
     448:	2b2f053f 	blcs	bc194c <__ccfg+0xba19a4>
     44c:	31060905 	tstcc	r6, r5, lsl #18
}
     450:	06190533 			; <UNDEFINED> instruction: 0x06190533
		udelay (999);
     454:	2f090501 	svccs	0x00090501
     458:	052d1905 	streq	r1, [sp, #-2309]!	; 0xfffff6fb
		n--;
     45c:	2f210609 	svccs	0x00210609
     460:	0619053f 			; <UNDEFINED> instruction: 0x0619053f
     464:	2f090501 	svccs	0x00090501
     468:	052d1905 	streq	r1, [sp, #-2309]!	; 0xfffff6fb
void __pi_ondomain (lword d) {
     46c:	31210609 			; <UNDEFINED> instruction: 0x31210609
     470:	0505684d 	streq	r6, [r5, #-2125]	; 0xfffff7b3
		if (__pi_systat.effpdm > 1)
     474:	017ec803 	cmneq	lr, r3, lsl #16
     478:	01061205 	tsteq	r6, r5, lsl #4
			__pi_systat.effpdm = 1;
     47c:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
	PRCMPowerDomainOn (d);
     480:	053d0609 	ldreq	r0, [sp, #-1545]!	; 0xfffff9f7
     484:	01b8030d 			; <UNDEFINED> instruction: 0x01b8030d
     488:	40090501 	andmi	r0, r9, r1, lsl #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48c:	060e054d 	streq	r0, [lr], -sp, asr #10
     490:	21090501 	tstcs	r9, r1, lsl #10
     494:	05490e05 	strbeq	r0, [r9, #-3589]	; 0xfffff1fb
	__pi_systat.ondmns |= d;
     498:	2f2f0609 	svccs	0x002f0609
     49c:	01062105 	tsteq	r6, r5, lsl #2
}
     4a0:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
     4a4:	09051e21 	stmdbeq	r5, {r0, r5, r9, sl, fp, ip}
void __pi_offdomain (lword d) {
     4a8:	05322206 	ldreq	r2, [r2, #-518]!	; 0xfffffdfa
     4ac:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
	PRCMPowerDomainOff (d);
     4b0:	14052025 	strne	r2, [r5], #-37	; 0xffffffdb
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	20250520 	eorcs	r0, r5, r0, lsr #10
     4b8:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     4bc:	01062305 	tsteq	r6, r5, lsl #6
	if (d & PRCM_DOMAIN_RFCORE) {
     4c0:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
     4c4:	09052023 	stmdbeq	r5, {r0, r1, r5, sp}
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	14052f06 	strne	r2, [r5], #-3846	; 0xfffff0fa
     4cc:	27050106 	strcs	r0, [r5, -r6, lsl #2]
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4d0:	2f200520 	svccs	0x00200520
     4d4:	051f2505 	ldreq	r2, [pc, #-1285]	; ffffffd7 <_estack+0xdfffafd7>
	__pi_systat.ondmns &= ~d;
     4d8:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
     4dc:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
}
     4e0:	12052020 	andne	r2, r5, #32
     4e4:	1d200523 	cfstr32ne	mvfx0, [r0, #-140]!	; 0xffffff74
void __pi_syserror (word ec, const char *m) {
     4e8:	21060905 	tstcs	r6, r5, lsl #18
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	01062505 	tsteq	r6, r5, lsl #10
     4f0:	3e060905 	vmlacc.f16	s0, s12, s10	; <UNPREDICTABLE>
     4f4:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4f8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     4fc:	5b055811 	blpl	156548 <__ccfg+0x1365a0>
     500:	0d052006 	stceq	0, cr2, [r5, #-24]	; 0xffffffe8
		all_leds_blink;
     504:	2e7efe03 	cdpcs	14, 7, cr15, cr14, cr3, {0}
     508:	2f062506 	svccs	0x00062506
     50c:	3333331f 	teqcc	r3, #2080374784	; 0x7c000000
     510:	25063333 	strcs	r3, [r6, #-819]	; 0xfffffccd
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     514:	051f2f06 	ldreq	r2, [pc, #-3846]	; fffff616 <_estack+0xdfffa616>
     518:	00e00313 	rsceq	r0, r0, r3, lsl r3
     51c:	0601052e 	streq	r0, [r1], -lr, lsr #10
     520:	0031022e 	eorseq	r0, r1, lr, lsr #4
     524:	155c0101 	ldrbne	r0, [ip, #-257]	; 0xfffffeff
     528:	00030000 	andeq	r0, r3, r0
	while (1) {
     52c:	0000029b 	muleq	r0, fp, r2
     530:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     534:	0101000d 	tsteq	r1, sp
     538:	00000101 	andeq	r0, r0, r1, lsl #2
void tci_run_delay_timer () {
     53c:	00000100 	andeq	r0, r0, r0, lsl #2
	setdel = __pi_mintk - __pi_old;
     540:	6f682f01 	svcvs	0x00682f01
     544:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 398 <root+0x25c>
     548:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     54c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	6f746b73 	svcvs	0x00746b73
     554:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     558:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     55c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	2f534f43 	svccs	0x00534f43
	sti_tim;
     564:	4f636950 	svcmi	0x00636950
}
     568:	43432f53 	movtmi	r2, #16211	; 0x3f53
     56c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     570:	6f682f00 	svcvs	0x00682f00
     574:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3c8 <root+0x28c>
     578:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	cli_aux;
     57c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     580:	6f746b73 	svcvs	0x00746b73
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     588:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     58c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     590:	2f534f43 	svccs	0x00534f43
	sti_aux;
     594:	4f636950 	svcmi	0x00636950
}
     598:	43432f53 	movtmi	r2, #16211	; 0x3f53
     59c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     5a0:	3143432f 	cmpcc	r3, pc, lsr #6
void AONRTCIntHandler () {
     5a4:	57585833 	smmlarpl	r8, r3, r8, r5
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a8:	2f455241 	svccs	0x00455241
     5ac:	76697264 	strbtvc	r7, [r9], -r4, ror #4
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5b0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		if (__pi_utims [0] == 0)
     5b4:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
     5b8:	2f656d6f 	svccs	0x00656d6f
		if (*(__pi_utims [0])) {
     5bc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     5c0:	442f6e69 	strtmi	r6, [pc], #-3689	; 5c8 <AONRTCIntHandler+0x24>
			(*(__pi_utims [0]))--;
     5c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (__pi_utims [1] == 0)
     5c8:	4f2f706f 	svcmi	0x002f706f
		if (*(__pi_utims [1])) {
     5cc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			aux_timer_inactive = 0;
     5d0:	502f5445 	eorpl	r5, pc, r5, asr #8
			(*(__pi_utims [1]))--;
     5d4:	534f4349 	movtpl	r4, #62281	; 0xf349
		if (__pi_utims [2] == 0)
     5d8:	6369502f 	cmnvs	r9, #47	; 0x2f
		if (*(__pi_utims [2])) {
     5dc:	502f534f 	eorpl	r5, pc, pc, asr #6
			(*(__pi_utims [2]))--;
     5e0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		if (__pi_utims [3] != 0) {
     5e4:	004f492f 	subeq	r4, pc, pc, lsr #18
			if (*(__pi_utims [3])) {
     5e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 534 <__pi_syserror+0x4c>
				aux_timer_inactive = 0;
     5ec:	616d2f65 	cmnvs	sp, r5, ror #30
				(*(__pi_utims [3]))--;
     5f0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
	if (__pi_systat.ledsts) {
     5f4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     5f8:	706f746b 	rsbvc	r7, pc, fp, ror #8
		if (__pi_systat.ledblc++ == 0) {
     5fc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     600:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			if (__pi_systat.ledblk) {
     604:	4349502f 	movtmi	r5, #36911	; 0x902f
     608:	502f534f 	eorpl	r5, pc, pc, asr #6
     60c:	534f6369 	movtpl	r6, #62313	; 0xf369
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
     614:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
				if (__pi_systat.ledsts & 0x2)
     618:	6f736e65 	svcvs	0x00736e65
     61c:	2f007372 	svccs	0x00007372
     620:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
				if (__pi_systat.ledsts & 0x4)
     624:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
				__pi_systat.ledblk = 0;
     628:	2f6e6974 	svccs	0x006e6974
     62c:	6b736544 	blvs	1cd9b44 <__ccfg+0x1cb9b9c>
			if (__pi_systat.fstblk)
     630:	2f706f74 	svccs	0x00706f74
     634:	4f534c4f 	svcmi	0x00534c4f
				__pi_systat.ledblc = 200;
     638:	2f54454e 	svccs	0x0054454e
	if (events & AON_RTC_EVFLAGS_CH0) {
     63c:	4f434950 	svcmi	0x00434950
		cli_tim;
     640:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		__pi_new += setdel;
     644:	2f534f63 	svccs	0x00534f63
     648:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
		setdel = 0;
     64c:	2f006c65 	svccs	0x00006c65
		RISE_N_SHINE;
     650:	2f727375 	svccs	0x00727375
		__pi_new += setdel;
     654:	2f62696c 	svccs	0x0062696c
		RISE_N_SHINE;
     658:	2f636367 	svccs	0x00636367
     65c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
		aux_timer_inactive = 1;
     660:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     664:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
				if (__pi_systat.ledsts & 0x1)
     668:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	2f312e32 	svccs	0x00312e32
     670:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
				if (__pi_systat.ledsts & 0x2)
     674:	00656475 	rsbeq	r6, r5, r5, ror r4
     678:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5c4 <AONRTCIntHandler+0x20>
     67c:	616d2f65 	cmnvs	sp, r5, ror #30
				if (__pi_systat.ledsts & 0x8)
     680:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				__pi_systat.ledblk = 1;
     684:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     688:	706f746b 	rsbvc	r7, pc, fp, ror #8
		if (aux_timer_inactive) {
     68c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			cli_aux;
     690:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     694:	4349502f 	movtmi	r5, #36911	; 0x902f
     698:	502f534f 	eorpl	r5, pc, pc, asr #6
     69c:	534f6369 	movtpl	r6, #62313	; 0xf369
     6a0:	616d0000 	cmnvs	sp, r0
     6a4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
     6a8:	00000100 	andeq	r0, r0, r0, lsl #2
     6ac:	5f737973 	svcpl	0x00737973
     6b0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
     6b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
word tci_update_delay_ticks (Boolean force) {
     6b8:	6d630000 	stclvs	0, cr0, [r3, #-0]
	cli_tim;
     6bc:	5f736973 	svcpl	0x00736973
     6c0:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
	if (setdel) {
     6c4:	00010068 	andeq	r0, r1, r8, rrx
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     6d0:	69000002 	stmdbvs	r0, {r1}
     6d4:	745f7172 	ldrbvc	r7, [pc], #-370	; 6dc <tci_update_delay_ticks+0x24>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
				AON_RTC_O_CH0CMP)) - gettav ());
     6dc:	64656c5f 	strbtvs	r6, [r5], #-3167	; 0xfffff3a1
	return NO;
     6e0:	00682e73 	rsbeq	r2, r8, r3, ror lr
			setdel = 0;
     6e4:	75000003 	strvc	r0, [r0, #-3]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     6ec:	00020068 	andeq	r0, r2, r8, rrx
}
     6f0:	71726900 	cmnvc	r2, r0, lsl #18
		sti_tim;
     6f4:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
		return YES;
     6f8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     6fc:	0300682e 	movweq	r6, #2094	; 0x82e
     700:	72690000 	rsbvc	r0, r9, #0
     704:	69705f71 	ldmdbvs	r0!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
	UARTDisable (UART0_BASE);
     70c:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
	UARTDisable (UART0_BASE);
     714:	72700000 	rsbsvc	r0, r0, #0
	UARTConfigSetExpClk (UART0_BASE,
     718:	682e6d63 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}
     71c:	00000200 	andeq	r0, r0, r0, lsl #4
     720:	5f6e6f61 	svcpl	0x006e6f61
     724:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	00020068 	andeq	r0, r2, r8, rrx
     72c:	72777000 	rsbsvc	r7, r7, #0
     730:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     738:	61000002 	tstvs	r0, r2
     73c:	695f6e6f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
	urates [0] = rate;
     740:	682e636f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
}
     744:	00000200 	andeq	r0, r0, r0, lsl #4
     748:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
     74c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     750:	00682e72 	rsbeq	r2, r8, r2, ror lr
     754:	61000005 	tstvs	r0, r5
     758:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
     760:	00000200 	andeq	r0, r0, r0, lsl #4
     764:	5f6e6f61 	svcpl	0x006e6f61
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
     76c:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     770:	00000200 	andeq	r0, r0, r0, lsl #4
     774:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
	__pi_uart_setrate (urates [0], __pi_uart);
     778:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     77c:	00000600 	andeq	r0, r0, r0, lsl #12
     780:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     784:	0100682e 	tsteq	r0, lr, lsr #16
     788:	616d0000 	cmnvs	sp, r0
     78c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     790:	00000100 	andeq	r0, r0, r0, lsl #2
	switch (operation) {
     794:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
static int ioreq_uart_a (int operation, char *buf, int len) {
     798:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     79c:	0100682e 	tsteq	r0, lr, lsr #16
     7a0:	75620000 	strbvc	r0, [r2, #-0]!
     7a4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     7a8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
				*buf++ = uart_a_read;
     7ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
     7b0:	73000001 	movwvc	r0, #1
			while (len && uart_a_char_available) {
     7b4:	6f697379 	svcvs	0x00697379
     7b8:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     7bc:	656b0000 	strbvs	r0, [fp, #-0]!
			if (len != operation) {
     7c0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
}
     7c4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     7c8:	05000000 	streq	r0, [r0, #-0]
			uart_a_disable_int;
     7cc:	02050027 	andeq	r0, r5, #39	; 0x27
			if (uart_a_char_available) {
     7d0:	00000408 	andeq	r0, r0, r8, lsl #8
				*buf++ = uart_a_read;
     7d4:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
			uart_a_disable_int;
     7d8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
     7dc:	05100627 	ldreq	r0, [r0, #-1575]	; 0xfffff9d9
			if (uart_a_char_available) {
     7e0:	05022202 	streq	r2, [r2, #-514]	; 0xfffffdfe
     7e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				uart_a_enable_int;
     7e8:	0205001f 	andeq	r0, r5, #31
     7ec:	00000414 	andeq	r0, r0, r4, lsl r4
				goto Redo_rx;
     7f0:	05011803 	streq	r1, [r1, #-2051]	; 0xfffff7fd
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f4:	08053d02 	stmdaeq	r5, {r1, r8, sl, fp, ip, sp}
     7f8:	06090501 	streq	r0, [r9], -r1, lsl #10
			return -2;
     7fc:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     800:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
				uart_a_write (*buf);
     804:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
     808:	0d051b02 	vstreq	d1, [r5, #-8]
			while (len && uart_a_room_in_tx) {
     80c:	01080501 	tsteq	r8, r1, lsl #10
     810:	01060a05 	tsteq	r6, r5, lsl #20
     814:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
			if (len != operation) {
     818:	05340603 	ldreq	r0, [r4, #-1539]!	; 0xfffff9fd
			uart_a_disable_int;
     81c:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
     820:	01010007 	tsteq	r1, r7
			if (uart_a_room_in_tx) {
     824:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     828:	00044002 	andeq	r4, r4, r2
				uart_a_enable_int;
     82c:	011f0300 	tsteq	pc, r0, lsl #6
     830:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
				*buf++ = uart_a_read;
     834:	09050108 	stmdbeq	r5, {r3, r8}
			if (uart_a_room_in_tx) {
     838:	08050106 	stmdaeq	r5, {r1, r2, r8}
				uart_a_write (*buf);
     83c:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
     840:	39060305 	stmdbcc	r6, {r0, r2, r8, r9}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     844:	0604054b 	streq	r0, [r4], -fp, asr #10
     848:	00070201 	andeq	r0, r7, r1, lsl #4
			uart_a_enable_int;
     84c:	1e050101 	adfnes	f0, f5, f1
     850:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
     854:	03000004 	movweq	r0, #4
			return 0;
     858:	0205012a 	andeq	r0, r5, #-2147483638	; 0x8000000a
			if (len == UART_CNTRL_SETRATE) {
     85c:	061e0516 			; <UNDEFINED> instruction: 0x061e0516
				if (__pi_uart_setrate (*((word*)buf),
     860:	2405050e 	strcs	r0, [r5], #-1294	; 0xfffffaf2
     864:	051c1e05 	ldreq	r1, [ip, #-3589]	; 0xfffff1fb
     868:	03052405 	movweq	r2, #21509	; 0x5405
				syserror (EREQPAR, "uar");
     86c:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
			syserror (ENOOPER, "uai");
     870:	06050106 	streq	r0, [r5], -r6, lsl #2
			if (len == UART_CNTRL_GETRATE) {
     874:	0604052e 	streq	r0, [r4], -lr, lsr #10
				return 1;
     878:	06170521 	ldreq	r0, [r7], -r1, lsr #10
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87c:	06020501 	streq	r0, [r2], -r1, lsl #10
			syserror (ENOOPER, "uai");
     880:	3b05593f 	blcc	156d84 <__ccfg+0x136ddc>
     884:	01080501 	tsteq	r8, r1, lsl #10
     888:	01060905 	tsteq	r6, r5, lsl #18
     88c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     890:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
     894:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     898:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
     89c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     8a0:	0205001f 	andeq	r0, r5, #31
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	000004a8 	andeq	r0, r0, r8, lsr #9
void UART0IntHandler () {
     8a8:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	1f051702 	svcne	0x00051702
     8b0:	02050d06 	andeq	r0, r5, #384	; 0x180
     8b4:	1b1f0525 	blne	7c1d50 <__ccfg+0x7a1da8>
     8b8:	06250205 	strteq	r0, [r5], -r5, lsl #4
     8bc:	013c053d 	teqeq	ip, sp, lsr r5
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8c0:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     8c4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
		RISE_N_SHINE;
     8c8:	02054a08 	andeq	r4, r5, #8, 20	; 0x8000
     8cc:	05053006 	streq	r3, [r5, #-6]
		i_trigger (devevent (UART_A, READ));
     8d0:	03050106 	movweq	r0, #20742	; 0x5106
     8d4:	12054b06 	andne	r4, r5, #6144	; 0x1800
     8d8:	27050106 	strcs	r0, [r5, -r6, lsl #2]
     8dc:	20060520 	andcs	r0, r6, r0, lsr #10
     8e0:	21060405 	tstcs	r6, r5, lsl #8
     8e4:	01062405 	tsteq	r6, r5, lsl #8
     8e8:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
     8ec:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     8f0:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     8f4:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
     8f8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     8fc:	02050013 	andeq	r0, r5, #19
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     900:	00000000 	andeq	r0, r0, r0
     904:	0100ce03 	tsteq	r0, r3, lsl #28
     908:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
		i_trigger (devevent (UART_A, WRITE));
     90c:	051e0613 	ldreq	r0, [lr, #-1555]	; 0xfffff9ed
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	33062202 	movwcc	r2, #25090	; 0x6202
     914:	13030536 	movwne	r0, #13622	; 0x3536
		RISE_N_SHINE;
     918:	04050204 	streq	r0, [r5], #-516	; 0xfffffdfc
     91c:	0101f003 	tsteq	r1, r3	; <UNPREDICTABLE>
     920:	065c0530 			; <UNDEFINED> instruction: 0x065c0530
		i_trigger (devevent (UART_A, WRITE));
     924:	06040501 	streq	r0, [r4], -r1, lsl #10
     928:	0a05143e 	beq	145a28 <__ccfg+0x125a80>
     92c:	00050210 	andeq	r0, r5, r0, lsl r2
     930:	2d050101 	stfcss	f0, [r5, #-4]
     934:	e8020500 	stmda	r2, {r8, sl}
     938:	03000004 	movweq	r0, #4
     93c:	05010197 	streq	r0, [r1, #-407]	; 0xfffffe69
     940:	01011402 	tsteq	r1, r2, lsl #8
     944:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     948:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
     94c:	03063502 	movweq	r3, #25858	; 0x6502
}
     950:	03044a09 	movweq	r4, #18953	; 0x4a09
     954:	b5030305 	strlt	r0, [r3, #-773]	; 0xfffffcfb
     958:	0404017f 	streq	r0, [r4], #-383	; 0xfffffe81
     95c:	03062d05 	movweq	r2, #27909	; 0x6d05
     960:	042001cb 	strteq	r0, [r0], #-459	; 0xfffffe35
void __buttons_setirq (int val) {
     964:	06020501 	streq	r0, [r2], -r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	3c7f8f03 	ldclcc	15, cr8, [pc], #-12	; 964 <__buttons_setirq>
     96c:	01130305 	tsteq	r3, r5, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
     974:	00eb0329 	rsceq	r0, fp, r9, lsr #6
     978:	17050501 	strne	r0, [r5, -r1, lsl #10]
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	01062d05 	tsteq	r6, r5, lsl #26
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     980:	03050104 	movweq	r0, #20740	; 0x5104
     984:	207f9003 	rsbscs	r9, pc, r3
     988:	2d050404 	cfstrscs	mvf0, [r5, #-16]
     98c:	2000f003 	andcs	pc, r0, r3
     990:	03050104 	movweq	r0, #20740	; 0x5104
     994:	7f900306 	svcvc	0x00900306
}
     998:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     99c:	00eb0329 	rsceq	r0, fp, r9, lsr #6
     9a0:	17050501 	strne	r0, [r5, -r1, lsl #10]
     9a4:	01062d05 	tsteq	r6, r5, lsl #26
void __pinlist_setirq (int val) {
     9a8:	03050104 	movweq	r0, #20740	; 0x5104
	for (i = 0; i < N_PINLIST; i++) {
     9ac:	7f900306 	svcvc	0x00900306
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	01010120 	tsteq	r1, r0, lsr #2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	66010101 	strvs	r0, [r1], -r1, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9bc:	03290504 			; <UNDEFINED> instruction: 0x03290504
     9c0:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c4:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     9c8:	01040106 	tsteq	r4, r6, lsl #2
     9cc:	da030305 	ble	c15e8 <__ccfg+0xa1640>
	for (i = 0; i < N_PINLIST; i++) {
     9d0:	0404207e 	streq	r2, [r4], #-126	; 0xffffff82
}
     9d4:	a6032d05 	strge	r2, [r3], -r5, lsl #26
     9d8:	01042001 	tsteq	r4, r1
     9dc:	03060305 	movweq	r0, #25349	; 0x6305
     9e0:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
void GPIOIntHandler () {
     9e4:	03290504 			; <UNDEFINED> instruction: 0x03290504
if (buttons_int) {
     9e8:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
     9ec:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	buttons_disable ();
     9f0:	01040106 	tsteq	r4, r6, lsl #2
     9f4:	03060305 	movweq	r0, #25349	; 0x6305
	i_trigger ((aword)&__button_list);
     9f8:	01207eda 	ldrdeq	r7, [r0, -sl]!
     9fc:	01010101 	tsteq	r1, r1, lsl #2
     a00:	2e015801 	cdpcs	8, 0, cr5, cr1, cr1, {0}
     a04:	02110805 	andseq	r0, r1, #327680	; 0x50000
     a08:	01010009 	tsteq	r1, r9
     a0c:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
     a10:	00053c02 	andeq	r3, r5, r2, lsl #24
     a14:	029d0300 	addseq	r0, sp, #0, 6
     a18:	16020501 	strne	r0, [r2], -r1, lsl #10
     a1c:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
     a20:	05241605 	streq	r1, [r4, #-1541]!	; 0xfffff9fb
	RISE_N_SHINE;
     a24:	16054a09 	strne	r4, [r5], -r9, lsl #20
     a28:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
     a2c:	23060205 	movwcs	r0, #25093	; 0x6205
if (pin_sensor_int) {
     a30:	05017603 	streq	r7, [r1, #-1539]	; 0xfffff9fd
     a34:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
	i_trigger ((aword)(&__input_pins));
     a38:	2e0d0302 	cdpcs	3, 0, cr0, cr13, cr2, {0}
     a3c:	73032f05 	movwvc	r2, #16133	; 0x3f05
     a40:	032a0520 			; <UNDEFINED> instruction: 0x032a0520
     a44:	2f05200a 	svccs	0x0005200a
     a48:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
     a4c:	2a052e36 	bcs	14c32c <__ccfg+0x12c384>
     a50:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
     a54:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     a58:	022f0601 	eoreq	r0, pc, #1048576	; 0x100000
     a5c:	0101000b 	tsteq	r1, fp
     a60:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
	__pinsen_disable_and_clear;
     a64:	00057c02 	andeq	r7, r5, r2, lsl #24
	RISE_N_SHINE;
     a68:	02aa0300 	adceq	r0, sl, #0, 6
     a6c:	17020501 	strne	r0, [r2, -r1, lsl #10]
     a70:	1b062105 	blne	188e8c <__ccfg+0x168ee4>
}
     a74:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
     a78:	052e0609 	streq	r0, [lr, #-1545]!	; 0xfffff9f7
     a7c:	69031402 	stmdbvs	r3, {r1, sl, ip}
     a80:	06110501 	ldreq	r0, [r1], -r1, lsl #10
     a84:	2e2f0501 	cfsh64cs	mvdx0, mvdx15, #1
void system_init () {
     a88:	17032a05 	strne	r2, [r3, -r5, lsl #20]
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	032f0520 			; <UNDEFINED> instruction: 0x032f0520
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a90:	36052069 	strcc	r2, [r5], -r9, rrx
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a94:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     a98:	02052017 	andeq	r2, r5, #23
     a9c:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	0601052e 	streq	r0, [r1], -lr, lsr #10
     aa4:	00060213 	andeq	r0, r6, r3, lsl r2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	1a050101 	bne	140eb4 <__ccfg+0x120f0c>
     aac:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
     ab0:	03000005 	movweq	r0, #5
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     abc:	050e061a 	streq	r0, [lr, #-1562]	; 0xfffff9e6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ac0:	0905240b 	stmdbeq	r5, {r0, r1, r3, sl, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	0602052e 	streq	r0, [r2], -lr, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac8:	06050532 			; <UNDEFINED> instruction: 0x06050532
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	1e2b0514 	mcrne	5, 1, r0, cr11, cr4, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ad0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
		pin = (port_confs [i] >> 19) & 0x1f;
     ad4:	01060505 	tsteq	r6, r5, lsl #10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
     adc:	12051518 	andne	r1, r5, #24, 10	; 0x6000000
     ae0:	06050106 	streq	r0, [r5], -r6, lsl #2
     ae4:	0603052e 	streq	r0, [r3], -lr, lsr #10
		if (port_confs [i] & 0x80)
     ae8:	06070530 			; <UNDEFINED> instruction: 0x06070530
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aec:	20060501 	andcs	r0, r6, r1, lsl #10
     af0:	2f060405 	svccs	0x00060405
		if (port_confs [i] & 0x40)
     af4:	01061705 	tsteq	r6, r5, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	2f060405 	svccs	0x00060405
     afc:	01061705 	tsteq	r6, r5, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b00:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b04:	01061205 	tsteq	r6, r5, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b08:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
	all_leds_blink;
     b0c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     b10:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     b14:	04052006 	streq	r2, [r5], #-6
     b18:	17052106 	strne	r2, [r5, -r6, lsl #2]
     b1c:	051f1306 	ldreq	r1, [pc, #-774]	; 81e <ioreq_uart_a+0x8a>
     b20:	052f0604 	streq	r0, [pc, #-1540]!	; 524 <__pi_syserror+0x3c>
     b24:	12051403 	andne	r1, r5, #50331648	; 0x3000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b28:	06050106 	streq	r0, [r5], -r6, lsl #2
     b2c:	06030520 	streq	r0, [r3], -r0, lsr #10
     b30:	06070522 	streq	r0, [r7], -r2, lsr #10
     b34:	20060501 	andcs	r0, r6, r1, lsl #10
     b38:	21060405 	tstcs	r6, r5, lsl #8
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	13061705 	movwne	r1, #26373	; 0x6705
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     b44:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
	IntEnable (INT_AON_RTC_COMB);
     b48:	01061205 	tsteq	r6, r5, lsl #4
     b4c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     b50:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	__pi_malloc_init ();
     b54:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	IntEnable (INT_AON_GPIO_EDGE);
     b58:	05052007 	streq	r2, [r5, #-7]
     b5c:	18052106 	stmdane	r5, {r1, r2, r8, sp}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b60:	051f1306 	ldreq	r1, [pc, #-774]	; 862 <ioreq_uart_a+0xce>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	042f0605 	strteq	r0, [pc], #-1541	; b6c <system_init+0xe4>
     b68:	03020505 	movweq	r0, #9477	; 0x2505
     b6c:	05017da3 	streq	r7, [r1, #-3491]	; 0xfffff25d
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b70:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     b74:	03052e05 	movweq	r2, #24069	; 0x5e05
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	12053006 	andne	r3, r5, #6
     b7c:	19050106 	stmdbne	r5, {r1, r2, r8}
     b80:	3c060520 	cfstr32cc	mvfx0, [r6], {32}
	urates [0] = UART_RATE / 100;
     b84:	21060405 	tstcs	r6, r5, lsl #8
     b88:	01061305 	tsteq	r6, r5, lsl #6
	reinit_uart ();
     b8c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
	EXTRA_INITIALIZERS;
     b90:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
     b94:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	06080521 	streq	r0, [r8], -r1, lsr #10
     b9c:	06060501 	streq	r0, [r6], -r1, lsl #10
     ba0:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba4:	02960329 	addseq	r0, r6, #-1543503872	; 0xa4000000
     ba8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bac:	01062d05 	tsteq	r6, r5, lsl #26
     bb0:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
			devinit [i] . init (devinit [i] . param);
     bb4:	7de60306 	stclvc	3, cr0, [r6, #24]!
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     bbc:	20080501 	andcs	r0, r8, r1, lsl #10
     bc0:	21060605 	tstcs	r6, r5, lsl #12
	IntEnable (INT_UART0_COMB);
     bc4:	29050404 	stmdbcs	r5, {r2, sl}
     bc8:	01029403 	tsteq	r2, r3, lsl #8
}
     bcc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	tci_run_auxiliary_timer ();
     bd0:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		diag ("");
     bd4:	06050505 	streq	r0, [r5], -r5, lsl #10
     bd8:	4a7de803 	bmi	1f7abec <__ccfg+0x1f5ac44>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bdc:	01061405 	tsteq	r6, r5, lsl #8
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     be0:	21060605 	tstcs	r6, r5, lsl #12
		diag ("Leftover RAM: %d bytes",
     be4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     be8:	06140513 			; <UNDEFINED> instruction: 0x06140513
     bec:	06060501 	streq	r0, [r6], -r1, lsl #10
     bf0:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
     bf4:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
     bf8:	0a030106 	beq	c1018 <__ccfg+0xa1070>
     bfc:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
     c00:	06130522 	ldreq	r0, [r3], -r2, lsr #10
     c04:	20070501 	andcs	r0, r7, r1, lsl #10
     c08:	2f060505 	svccs	0x00060505
     c0c:	01061805 	tsteq	r6, r5, lsl #16
     c10:	0b050104 	bleq	141028 <__ccfg+0x121080>
     c14:	02cd0306 	sbceq	r0, sp, #402653184	; 0x18000000
     c18:	1a02052e 	bne	820d8 <__ccfg+0x62130>
     c1c:	01060505 	tsteq	r6, r5, lsl #10
     c20:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     c24:	30060c05 	andcc	r0, r6, r5, lsl #24
     c28:	062c0305 	strteq	r0, [ip], -r5, lsl #6
     c2c:	060c0522 	streq	r0, [ip], -r2, lsr #10
     c30:	2f0a0501 	svccs	0x000a0501
     c34:	051f0c05 	ldreq	r0, [pc, #-3077]	; 37 <g_pfnVectors+0x37>
     c38:	0c052203 	sfmeq	f2, 4, [r5], {3}
     c3c:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	4a01132f 	bmi	45904 <__ccfg+0x2595c>
     c44:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
     c48:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
     c4c:	20450316 	subcs	r0, r5, r6, lsl r3
     c50:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     c54:	7dc90306 	stclvc	3, cr0, [r9, #24]
     c58:	0608054a 	streq	r0, [r8], -sl, asr #10
     c5c:	06060501 	streq	r0, [r6], -r1, lsl #10
}
     c60:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
__attribute__ ((noreturn)) void __pi_release () {
     c64:	02c20329 	sbceq	r0, r2, #-1543503872	; 0xa4000000
     c68:	17050501 	strne	r0, [r5, -r1, lsl #10]
     c6c:	01062d05 	tsteq	r6, r5, lsl #26
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c70:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
	check_stack_overflow;
     c74:	7dba0306 	ldcvc	3, cr0, [sl, #24]!
     c78:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     c7c:	20080501 	andcs	r0, r8, r1, lsl #10
	update_n_wake (MAX_WORD, NO);
     c80:	21060605 	tstcs	r6, r5, lsl #12
     c84:	29050404 	stmdbcs	r5, {r2, sl}
     c88:	0102c003 	tsteq	r2, r3
	for_all_tasks (__pi_curr) {
     c8c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     c90:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     c94:	06050505 	streq	r0, [r5], -r5, lsl #10
  __ASM volatile ("cpsid i" : : : "memory");
     c98:	4a7dbc03 	bmi	1f6fcac <__ccfg+0x1f4fd04>
	__SLEEP;
     c9c:	01061405 	tsteq	r6, r5, lsl #8
     ca0:	21060605 	tstcs	r6, r5, lsl #12
     ca4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     ca8:	06140513 			; <UNDEFINED> instruction: 0x06140513
	system_event_count ++;
     cac:	06060501 	streq	r0, [r6], -r1, lsl #10
     cb0:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
	switch (__pi_systat.effpdm) {
     cb4:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
     cb8:	01040106 	tsteq	r4, r6, lsl #2
     cbc:	03060305 	movweq	r0, #25349	; 0x6305
     cc0:	054a02ce 	strbeq	r0, [sl, #-718]	; 0xfffffd32
			__WFI ();
     cc4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     cc8:	02300604 	eorseq	r0, r0, #4, 12	; 0x400000
     ccc:	01010015 	tsteq	r1, r5, lsl r0
	check_stack_overflow;
     cd0:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
     cd4:	0006b802 	andeq	fp, r6, r2, lsl #16
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	03890300 	orreq	r0, r9, #0, 6
     cdc:	16020501 	strne	r0, [r2], -r1, lsl #10
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	0e062d05 	cdpeq	13, 0, cr2, cr6, cr5, {0}
			goto Redo;
     ce4:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
	for_all_tasks (__pi_curr) {
     ce8:	02052f06 	andeq	r2, r5, #6, 30
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cec:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cf0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     cf4:	03052005 	movweq	r2, #20485	; 0x5005
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	20090306 	andcs	r0, r9, r6, lsl #6
     cfc:	01060605 	tsteq	r6, r5, lsl #12
     d00:	23060405 	movwcs	r0, #25605	; 0x6405
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d04:	01061a05 	tsteq	r6, r5, lsl #20
     d08:	03060205 	movweq	r0, #25093	; 0x6205
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	052e7ef9 	streq	r7, [lr, #-3833]!	; 0xfffff107
     d10:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
			__WFI ();
     d14:	1a052e2e 	bne	14c5d4 <__ccfg+0x12c62c>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d18:	3c018703 	stccc	7, cr8, [r1], {3}
     d1c:	2018052f 	andscs	r0, r8, pc, lsr #10
}
     d20:	051f1705 	ldreq	r1, [pc, #-1797]	; 623 <AONRTCIntHandler+0x7f>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d24:	200a0309 	andcs	r0, sl, r9, lsl #6
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d28:	76030d05 	strvc	r0, [r3], -r5, lsl #26
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2c:	230b0520 	movwcs	r0, #46368	; 0xb520
     d30:	051d0d05 	ldreq	r0, [sp, #-3333]	; 0xfffff2fb
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d34:	134d0604 	movtne	r0, #54788	; 0xd604
     d38:	19060105 	stmdbne	r6, {r0, r2, r8}
     d3c:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d40:	060a052f 	streq	r0, [sl], -pc, lsr #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d44:	00090201 	andeq	r0, r9, r1, lsl #4
     d48:	33050101 	movwcc	r0, #20737	; 0x5101
     d4c:	08020500 	stmdaeq	r2, {r8, sl}
     d50:	03000007 	movweq	r0, #7
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	050105d3 	streq	r0, [r1, #-1491]	; 0xfffffa2d
     d58:	05171402 	ldreq	r1, [r7, #-1026]	; 0xfffffbfe
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d5c:	79030633 	stmdbvc	r3, {r0, r1, r4, r5, r9, sl}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d60:	27020501 	strcs	r0, [r2, -r1, lsl #10]
     d64:	79033305 	stmdbvc	r3, {r0, r2, r8, r9, ip, sp}
     d68:	2702053c 	smladxcs	r2, ip, r5, r0
     d6c:	02043e06 	andeq	r3, r4, #6, 28	; 0x60
     d70:	d5030505 	strle	r0, [r3, #-1285]	; 0xfffffafb
			SysCtrlSetRechargeBeforePowerDown
     d74:	0104017b 	tsteq	r4, fp, ror r1
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d78:	03060205 	movweq	r0, #25093	; 0x6205
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	060104ab 	streq	r0, [r1], -fp, lsr #9
     d80:	04820903 	streq	r0, [r2], #2307	; 0x903
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	03240506 			; <UNDEFINED> instruction: 0x03240506
     d88:	05017dd9 	streq	r7, [r1, #-3545]	; 0xfffff227
     d8c:	23051705 	movwcs	r1, #22277	; 0x5705
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d90:	01040106 	tsteq	r4, r6, lsl #2
     d94:	a5030105 	strge	r0, [r3, #-261]	; 0xfffffefb
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d98:	06042002 	streq	r2, [r4], -r2
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d9c:	db032305 	blle	c99b8 <__ccfg+0xa9a10>
     da0:	0505207d 	streq	r2, [r5, #-125]	; 0xffffff83
     da4:	22054f06 	andcs	r4, r5, #6, 30
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da8:	01040106 	tsteq	r4, r6, lsl #2
			while (!(AONWUCPowerStatusGet () &
     dac:	03060205 	movweq	r0, #25093	; 0x6205
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db0:	0566029e 	strbeq	r0, [r6, #-670]!	; 0xfffffd62
     db4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
     db8:	052f0602 	streq	r0, [pc, #-1538]!	; 7be <ioreq_uart_a+0x2a>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dbc:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     dc0:	0101000c 	tsteq	r1, ip
     dc4:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
     dc8:	00075c02 	andeq	r5, r7, r2, lsl #24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	05ef0300 	strbeq	r0, [pc, #768]!	; 10d4 <update_n_wake+0x70>
     dd0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
     dd8:	017df703 	cmneq	sp, r3, lsl #14	; <UNPREDICTABLE>
			SysCtrlAdjustRechargeAfterPowerDown ();
     ddc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			reinit_uart ();
     de0:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
     de4:	03020501 	movweq	r0, #9473	; 0x2501
     de8:	04200288 	strteq	r0, [r0], #-648	; 0xfffffd78
}
     dec:	03230506 			; <UNDEFINED> instruction: 0x03230506
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     df0:	04207df8 	strteq	r7, [r0], #-3576	; 0xfffff208
     df4:	06020501 	streq	r0, [r2], -r1, lsl #10
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	4a028503 	bmi	a220c <__ccfg+0x82264>
     dfc:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
     e00:	017cc903 	cmneq	ip, r3, lsl #18
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	17172d05 	ldrne	r2, [r7, -r5, lsl #26]
     e08:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     e0c:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e10:	06020501 	streq	r0, [r2], -r1, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	3c03a903 			; <UNDEFINED> instruction: 0x3c03a903
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e18:	27050604 	strcs	r0, [r5, -r4, lsl #12]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e1c:	0102ce03 	tsteq	r2, r3, lsl #28
     e20:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e24:	04010624 	streq	r0, [r1], #-1572	; 0xfffff9dc
     e28:	06020501 	streq	r0, [r2], -r1, lsl #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2c:	587db203 	ldmdapl	sp!, {r0, r1, r9, ip, sp, pc}^
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e30:	01000e02 	tsteq	r0, r2, lsl #28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e34:	003d0501 	eorseq	r0, sp, r1, lsl #10
     e38:	07940205 	ldreq	r0, [r4, r5, lsl #4]
			PRCMPowerDomainOff (
     e3c:	8f030000 	svchi	0x00030000
     e40:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	__SLEEP;
     e44:	063d0514 			; <UNDEFINED> instruction: 0x063d0514
     e48:	05052e1e 	streq	r2, [r5, #-3614]	; 0xfffff1e2
  __ASM volatile ("cpsie i" : : : "memory");
     e4c:	820b0306 	andhi	r0, fp, #402653184	; 0x18000000
	goto Redo;
     e50:	01060e05 	tsteq	r6, r5, lsl #28
     e54:	052f0805 	streq	r0, [pc, #-2053]!	; 657 <AONRTCIntHandler+0xb3>
     e58:	05051f0e 	streq	r1, [r5, #-3854]	; 0xfffff0f2
     e5c:	0a052f06 	beq	14ca7c <__ccfg+0x12cad4>
     e60:	0612050f 	ldreq	r0, [r2], -pc, lsl #10
     e64:	2e0f0520 	cfsh32cs	mvfx0, mvfx15, #16
     e68:	34060405 	strcc	r0, [r6], #-1029	; 0xfffffbfb
     e6c:	01060705 	tsteq	r6, r5, lsl #14
     e70:	03060505 	movweq	r0, #25861	; 0x6505
     e74:	16052e28 	strne	r2, [r5], -r8, lsr #28
     e78:	01050106 	tsteq	r5, r6, lsl #2
     e7c:	05203403 	streq	r3, [r0, #-1027]!	; 0xfffffbfd
     e80:	7fa00309 	svcvc	0x00a00309
     e84:	0304053c 	movweq	r0, #17724	; 0x453c
     e88:	0805200b 	stmdaeq	r5, {r0, r1, r3, sp}
     e8c:	030e0521 	movweq	r0, #58657	; 0xe521
     e90:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
     e94:	3c0b0306 	stccc	3, cr0, [fp], {6}
     e98:	0608054b 	streq	r0, [r8], -fp, asr #10
     e9c:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
     ea0:	30060505 	andcc	r0, r6, r5, lsl #10
     ea4:	2404054b 	strcs	r0, [r4], #-1355	; 0xfffffab5
     ea8:	03060b05 	movweq	r0, #27397	; 0x6b05
     eac:	04054a24 	streq	r4, [r5], #-2596	; 0xfffff5dc
     eb0:	0521062d 	streq	r0, [r1, #-1581]!	; 0xfffff9d3
     eb4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
     eb8:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
	cli_tim;
     ebc:	06080520 	streq	r0, [r8], -r0, lsr #10
     ec0:	1e050530 	cfmv64hrne	mvdx5, r0
     ec4:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
	diag ("PicOS halted");
     ec8:	12050e0a 	andne	r0, r5, #10, 28	; 0xa0
	mdelay (500);
     ecc:	0f052006 	svceq	0x00052006
     ed0:	0604052e 	streq	r0, [r4], -lr, lsr #10
	setpowermode (2);
     ed4:	06070535 			; <UNDEFINED> instruction: 0x06070535
	__PCB = NULL;
     ed8:	06040501 	streq	r0, [r4], -r1, lsl #10
	release;
     edc:	08054b34 	stmdaeq	r5, {r2, r4, r5, r8, r9, fp, lr}
     ee0:	07050106 	streq	r0, [r5, -r6, lsl #2]
     ee4:	0605052e 	streq	r0, [r5], -lr, lsr #10
     ee8:	09054b2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
int main (void) {
     eec:	204d0306 	subcs	r0, sp, r6, lsl #6
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	30030405 	andcc	r0, r3, r5, lsl #8
     ef4:	21080520 	tstcs	r8, r0, lsr #10
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef8:	74030505 	strvc	r0, [r3], #-1285	; 0xfffffafb
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efc:	0604052e 	streq	r0, [r4], -lr, lsr #10
	system_init ();
     f00:	5e3c1103 	rsfple	f1, f4, f3
	tcv_init ();
     f04:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f08:	061f0405 	ldreq	r0, [pc], -r5, lsl #8
     f0c:	060b052f 	streq	r0, [fp], -pc, lsr #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	06040501 	streq	r0, [r4], -r1, lsl #10
     f14:	06070525 	streq	r0, [r7], -r5, lsr #10
     f18:	06050501 	streq	r0, [r5], -r1, lsl #10
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f1c:	0609052f 	streq	r0, [r9], -pc, lsr #10
     f20:	4a080501 	bmi	20232c <__ccfg+0x1e2384>
	delay (16, 0);
     f24:	31060505 	tstcc	r6, r5, lsl #10
     f28:	03060405 	movweq	r0, #25605	; 0x6405
     f2c:	03062e16 	movweq	r2, #28182	; 0x6e16
	__pi_release ();
     f30:	07052e6d 	streq	r2, [r5, -sp, ror #28]
     f34:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     f38:	02052f06 	andeq	r2, r5, #6, 30
     f3c:	017f8803 	cmneq	pc, r3, lsl #16
     f40:	01061005 	tsteq	r6, r5
     f44:	f9030c05 			; <UNDEFINED> instruction: 0xf9030c05
     f48:	13052000 	movwne	r2, #20480	; 0x5000
static void killev (__pi_pcb_t *pid) {
     f4c:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
	wfun = (aword)(pid->code);
     f50:	060c052f 	streq	r0, [ip], -pc, lsr #10
	for_all_tasks (i) {
     f54:	06040501 	streq	r0, [r4], -r1, lsl #10
		for (j = 0; j < nevents (i); j++) {
     f58:	02201103 	eoreq	r1, r0, #-1073741824	; 0xc0000000
     f5c:	01010012 	tsteq	r1, r2, lsl r0
     f60:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
			    || i->Events [j] . Event == wfun
     f64:	00000002 	andeq	r0, r0, r2
		for (j = 0; j < nevents (i); j++) {
     f68:	05ea0300 	strbeq	r0, [sl, #768]!	; 0x300
			if (i->Events [j] . Event == (aword)pid
     f6c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     f70:	13060105 	movwne	r0, #24837	; 0x6105
     f74:	01000602 	tsteq	r0, r2, lsl #12
				wakeupev (i, j);
     f78:	00190501 	andseq	r0, r9, r1, lsl #10
     f7c:	08a40205 	stmiaeq	r4!, {r0, r2, r9}
	for_all_tasks (i) {
     f80:	81030000 	mrshi	r0, (UNDEF: 3)
}
     f84:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	05060414 	streq	r0, [r6, #-1044]	; 0xfffffbec
static void qfree (aword *ch) {
     f8c:	01120324 	tsteq	r2, r4, lsr #6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f90:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	cc = (aword*)(mpools + MA_NP);
     f94:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
	m_setnextp (ch, chunk);
     f98:	03190501 	tsteq	r9, #4194304	; 0x400000
	m_setnextp (cc, ch);
     f9c:	06042e67 	streq	r2, [r4], -r7, ror #28
}
     fa0:	19032205 	stmdbne	r3, {r0, r2, r9, sp}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     fa8:	206b0306 	rsbcs	r0, fp, r6, lsl #6
     fac:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
			m_setnextp (cc, m_nextp (chunk));
     fb0:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb4:	06020501 	streq	r0, [r2], -r1, lsl #10
     fb8:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
     fbc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     fc0:	29052005 	stmdbcs	r5, {r0, r2, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	2f060305 	svccs	0x00060305
     fcc:	1358014b 	cmpne	r8, #-1073741806	; 0xc0000012
     fd0:	2e010101 	adfcss	f0, f1, f1
			m_setnextp (cc, m_nextp (chunk));
     fd4:	66062006 	strvs	r2, [r6], -r6
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	014a662e 	cmpeq	sl, lr, lsr #12
     fdc:	1502052e 	strne	r0, [r2, #-1326]	; 0xfffffad2
     fe0:	01060605 	tsteq	r6, r5, lsl #12
     fe4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
     fe8:	18052e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, sp}
     fec:	0603052e 	streq	r0, [r3], -lr, lsr #10
			if (m_size (chunk) >= m_size (ch))
     ff0:	2c14062f 	ldccs	6, cr0, [r4], {47}	; 0x2f
     ff4:	58014b06 	stmdapl	r1, {r1, r2, r8, r9, fp, lr}
     ff8:	01010113 	tsteq	r1, r3, lsl r1
		chunk = m_nextp (chunk))
     ffc:	0620062e 	strteq	r0, [r0], -lr, lsr #12
    1000:	4a582e66 	bmi	160c9a0 <__ccfg+0x15ec9f8>
    1004:	06010501 	streq	r0, [r1], -r1, lsl #10
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	000b0232 	andeq	r0, fp, r2, lsr r2
	diag_wait (a);
    100c:	21050101 	tstcs	r5, r1, lsl #2
	diag_wchar (c, a);
    1010:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    1014:	03000009 	movweq	r0, #9
}
    1018:	050107d9 	streq	r0, [r1, #-2009]	; 0xfffff827
    101c:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
	syserror (ESTATE, "state");
    1020:	03050304 	movweq	r0, #21252	; 0x5304
    1024:	0178fe03 	cmneq	r8, r3, lsl #28	; <UNPREDICTABLE>
    1028:	21050104 	tstcs	r5, r4, lsl #2
    102c:	06fd0306 	ldrbteq	r0, [sp], r6, lsl #6
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
void utimer_add (address ut) {
    1034:	79830303 	stmibvc	r3, {r0, r1, r8, r9}
    1038:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		if (__pi_utims [i] == NULL)
    103c:	83030602 	movwhi	r0, #13826	; 0x3602
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
    1044:	13030501 	movwne	r0, #13569	; 0x3501
		syserror (ERESOURCE, "ut a");
    1048:	33050404 	movwcc	r0, #21508	; 0x5404
	__pi_utims [i] = ut;
    104c:	7dad0306 	stcvc	3, cr0, [sp, #24]!
}
    1050:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1054:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
    1058:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	*t = v;
    105c:	7dad032d 	stcvc	3, cr0, [sp, #180]!	; 0xb4
	TCI_RUN_AUXILIARY_TIMER;
    1060:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
void update_n_wake (word min, Boolean force) {
    1064:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	22030520 	andcs	r0, r3, #32, 10	; 0x8000000
    106c:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    1070:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1074:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1078:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
    107c:	33051705 	movwcc	r1, #22277	; 0x5705
    1080:	2d050106 	stfcss	f0, [r5, #-24]	; 0xffffffe8
    1084:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1088:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
    108c:	08052002 	stmdaeq	r5, {r1, sp}
    1090:	03051e06 	movweq	r1, #24070	; 0x5e06
    1094:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
    1098:	33050404 	movwcc	r0, #21508	; 0x5404
    109c:	207dad03 	rsbscs	sl, sp, r3, lsl #26
    10a0:	03050104 	movweq	r0, #20740	; 0x5104
    10a4:	2002d503 	andcs	sp, r2, r3, lsl #10
		for_all_tasks (i) {
    10a8:	05584105 	ldrbeq	r4, [r8, #-261]	; 0xfffffefb
	__pi_mintk = znew + min;
    10ac:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
    10b0:	0305010e 	movweq	r0, #20750	; 0x510e
			if (!twaiting (i))
    10b4:	04041313 	streq	r1, [r4], #-787	; 0xfffffced
    10b8:	a7032905 	strge	r2, [r3, -r5, lsl #18]
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10bc:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    10c0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    10c4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    10c8:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
    10cc:	41052002 	tstmi	r5, r2
    10d0:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
    10d4:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
    10d8:	18020501 	stmdane	r2, {r0, r8, sl}
    10dc:	03050304 	movweq	r0, #21252	; 0x5304
    10e0:	0178ec03 	cmneq	r8, r3, lsl #24
    10e4:	01050104 	tsteq	r5, r4, lsl #2
    10e8:	07950306 	ldreq	r0, [r5, r6, lsl #6]
				wakeuptm (i);
    10ec:	00080220 	andeq	r0, r8, r0, lsr #4
    10f0:	21050101 	tstcs	r5, r1, lsl #2
		for_all_tasks (i) {
    10f4:	a8020500 	stmdage	r2, {r8, sl}
				d = i->Timer - znew;
    10f8:	03000009 	movweq	r0, #9
    10fc:	050107ec 	streq	r0, [r1, #-2028]	; 0xfffff814
    1100:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
		if ((word)(__pi_mintk - znew) < min) 
    1104:	03050304 	movweq	r0, #21252	; 0x5304
    1108:	0178eb03 	cmneq	r8, r3, lsl #22
    110c:	21050104 	tstcs	r5, r4, lsl #2
	__pi_old = znew;
    1110:	07900306 	ldreq	r0, [r0, r6, lsl #6]
}
    1114:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
	TCI_RUN_DELAY_TIMER;
    1118:	78f00303 	ldmvc	r0!, {r0, r1, r8, r9}^
}
    111c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1120:	96030602 	strls	r0, [r3], -r2, lsl #12
    1124:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
    1128:	06090501 	streq	r0, [r9], -r1, lsl #10
    112c:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
void proceed (word state) {
    1130:	7d9b0333 	ldcvc	3, cr0, [fp, #204]	; 0xcc
	prcdstate (__pi_curr, state);
    1134:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1138:	02e60308 	rsceq	r0, r6, #8, 6	; 0x20000000
	release;
    113c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
    1140:	7d9a032d 	ldcvc	3, cr0, [sl, #180]	; 0xb4
void __pi_wait (aword event, word state) {
    1144:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	sint j = nevents (__pi_curr);
    1148:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	051e0620 	ldreq	r0, [lr, #-1568]	; 0xfffff9e0
    1150:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    1154:	06051f1e 			; <UNDEFINED> instruction: 0x06051f1e
		syserror (ENEVENTS, "sw");
    1158:	06030521 	streq	r0, [r3], -r1, lsr #10
    115c:	0504042f 	streq	r0, [r4, #-1071]	; 0xfffffbd1
	setestate (__pi_curr->Events [j], state, event);
    1160:	7d940329 	ldcvc	3, cr0, [r4, #164]	; 0xa4
	incwait (__pi_curr);
    1164:	17050501 	strne	r0, [r5, -r1, lsl #10]
	setestate (__pi_curr->Events [j], state, event);
    1168:	01063305 	tsteq	r6, r5, lsl #6
}
    116c:	03050104 	movweq	r0, #20740	; 0x5104
    1170:	2e02e803 	cdpcs	8, 0, cr14, cr2, cr3, {0}
    1174:	04470205 	strbeq	r0, [r7], #-517	; 0xfffffdfb
void __pi_trigger (aword event) {
    1178:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	for_all_tasks (i) {
    117c:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
		for (j = 0; j < nevents (i); j++) {
    1180:	06030501 	streq	r0, [r3], -r1, lsl #10
    1184:	2002e803 	andcs	lr, r2, r3, lsl #16
    1188:	01064105 	tsteq	r6, r5, lsl #2
    118c:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
			if (i->Events [j] . Event == event) {
    1190:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1194:	06010602 	streq	r0, [r1], -r2, lsl #12
    1198:	05030426 	streq	r0, [r3, #-1062]	; 0xfffffbda
				wakeupev (i, j);
    119c:	78d90303 	ldmvc	r9, {r0, r1, r8, r9}^
    11a0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	for_all_tasks (i) {
    11a4:	a8030601 	stmdage	r3, {r0, r9, sl}
}
    11a8:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
aword __pi_join (aword pid, word st) {
    11ac:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	for_all_tasks (i) {
    11b0:	02050018 	andeq	r0, r5, #24
    11b4:	000009e4 	andeq	r0, r0, r4, ror #19
	return 0;
    11b8:	0107c503 	tsteq	r7, r3, lsl #10
		if ((aword)i == pid) {
    11bc:	01050704 	tsteq	r5, r4, lsl #14
			__pi_wait (pid, st);
    11c0:	0178bb03 	cmneq	r8, r3, lsl #22
}
    11c4:	18050104 	stmdane	r5, {r2, r8}
	for_all_tasks (i) {
    11c8:	07c50306 	strbeq	r0, [r5, r6, lsl #6]
    11cc:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
void delay (word d, word state) {
    11d0:	78bb0305 	ldmvc	fp!, {r0, r2, r8, r9}
	settstate (__pi_curr, state);
    11d4:	2e040520 	cfsh32cs	mvfx0, mvfx4, #16
    11d8:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    11dc:	0101013d 	tsteq	r1, sp, lsr r1
    11e0:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
	update_n_wake (d, YES);
    11e4:	4a582e66 	bmi	160cb84 <__ccfg+0x15ecbdc>
    11e8:	01132e01 	tsteq	r3, r1, lsl #28
	__pi_curr->Timer = __pi_old + d;
    11ec:	05080458 	streq	r0, [r8, #-1112]	; 0xfffffba8
    11f0:	05050f01 	streq	r0, [r5, #-3841]	; 0xfffff0ff
	inctimer (__pi_curr);
    11f4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    11f8:	06020520 	streq	r0, [r2], -r0, lsr #10
    11fc:	0101013d 	tsteq	r1, sp, lsr r1
}
    1200:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
    1204:	4a582e66 	bmi	160cba4 <__ccfg+0x15ecbfc>
	if (fun == NULL)
    1208:	2f132e01 	svccs	0x00132e01
		return (int) __pi_curr;
    120c:	01045801 	tsteq	r4, r1, lsl #16
    1210:	03060105 	movweq	r0, #24837	; 0x6105
	for_all_tasks (i)
    1214:	020107d0 	andeq	r0, r1, #208, 14	; 0x3400000
}
    1218:	0101000b 	tsteq	r1, fp
		if (i->code == fun)
    121c:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
	for_all_tasks (i)
    1220:	000a8802 	andeq	r8, sl, r2, lsl #16
    1224:	08800300 	stmeq	r0, {r8, r9}
    1228:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
int __pi_strlen (const char *s) {
    122c:	10061505 	andne	r1, r6, r5, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
    1230:	1e320205 	cdpne	2, 3, cr0, cr2, cr5, {0}
}
    1234:	59593e06 	ldmdbpl	r9, {r1, r2, r9, sl, fp, ip, sp}^
	for (i = 0; *(s+i) != '\0'; i++);
    1238:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
	while (n--)
    123c:	7ca70305 	stcvc	3, cr0, [r7], #20
    1240:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
		*dest++ = *src++;
    1244:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1248:	7dc5030b 	stclvc	3, cr0, [r5, #44]	; 0x2c
    124c:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
	while (n--)
    1250:	02bb0331 	adcseq	r0, fp, #-1006632960	; 0xc4000000
}
    1254:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		*dest++ = c;
    1258:	7dc80332 	stclvc	3, cr0, [r8, #200]	; 0xc8
void adddevfunc (devreqfun_t rf, int loc) {
    125c:	0504042e 	streq	r0, [r4, #-1070]	; 0xfffffbd2
		syserror (EREQPAR, "addv");
    1260:	029b0305 	addseq	r0, fp, #335544320	; 0x14000000
		syserror (ERESOURCE, "addv");
    1264:	032d052e 			; <UNDEFINED> instruction: 0x032d052e
	if (ioreq [loc] != NULL)
    1268:	032e7ecc 			; <UNDEFINED> instruction: 0x032e7ecc
    126c:	09042e4a 	stmdbeq	r4, {r1, r3, r6, r9, sl, fp, sp}
		syserror (ERESOURCE, "addv");
    1270:	87033105 	strhi	r3, [r3, -r5, lsl #2]
	ioreq [loc] = rf;
    1274:	01042e02 	tsteq	r4, r2, lsl #28
}
    1278:	03060205 	movweq	r0, #25093	; 0x6205
    127c:	032003dc 			; <UNDEFINED> instruction: 0x032003dc
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	140179e7 	strne	r7, [r1], #-2535	; 0xfffff619
    1284:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
    1288:	03050112 	movweq	r0, #20754	; 0x5112
    128c:	06150514 			; <UNDEFINED> instruction: 0x06150514
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1290:	2c3d0501 	cfldr32cs	mvfx0, [sp], #-4
    1294:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    1298:	052f0603 	streq	r0, [pc, #-1539]!	; c9d <__pi_release+0x39>
		syserror (ENODEVICE, "io");
    129c:	05580632 	ldrbeq	r0, [r8, #-1586]	; 0xfffff9ce
    12a0:	03052e21 	movweq	r2, #24097	; 0x5e21
	if (len == 0)
    12a4:	06052f06 	streq	r2, [r5], -r6, lsl #30
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    12ac:	04042206 	streq	r2, [r4], #-518	; 0xfffffdfa
	if (ret >= 0)
    12b0:	91032905 	tstls	r3, r5, lsl #18
	if (ret == -1) {
    12b4:	3d050102 	stfccs	f0, [r5, #-8]
    12b8:	17050514 	smladne	r5, r4, r5, r0
		if (retry == WNONE)
    12bc:	3c063805 	stccc	8, cr3, [r6], {5}
		iowait (dev, operation, retry);
    12c0:	03050104 	movweq	r0, #20740	; 0x5104
    12c4:	7de90306 	stclvc	3, cr0, [r9, #24]!
    12c8:	06060520 	streq	r0, [r6], -r0, lsr #10
			release;
    12cc:	0604052e 	streq	r0, [r4], -lr, lsr #10
	if (ret == -2) {
    12d0:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
		if (retry != WNONE) {
    12d4:	01270329 			; <UNDEFINED> instruction: 0x01270329
    12d8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			iowait (dev, operation, retry);
    12dc:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    12e0:	06040501 	streq	r0, [r4], -r1, lsl #10
			(ioreq [dev]) (NONE, buf, len);
    12e4:	043c5603 	ldrteq	r5, [ip], #-1539	; 0xfffff9fd
    12e8:	03290504 			; <UNDEFINED> instruction: 0x03290504
    12ec:	050100db 	streq	r0, [r1, #-219]	; 0xffffff25
		(ioreq [dev]) (NONE, buf, len);
    12f0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    12f4:	01040106 	tsteq	r4, r6, lsl #2
    12f8:	03063c05 	movweq	r3, #27653	; 0x6c05
}
    12fc:	052e7f96 	streq	r7, [lr, #-3990]!	; 0xfffff06a
	if (retry != WNONE) {
    1300:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
		delay (-ret - 2, retry);
    1304:	03060106 	movweq	r0, #24838	; 0x6106
    1308:	012e069a 			; <UNDEFINED> instruction: 0x012e069a
    130c:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1310:	7a950329 	bvc	fe541fbc <_estack+0xde53cfbc>
		release;
    1314:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1318:	01062d05 	tsteq	r6, r5, lsl #26
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	02050104 	andeq	r0, r5, #4, 2
    1320:	3c05e603 	stccc	6, cr14, [r5], {3}
    1324:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    1328:	207a9a03 	rsbscs	r9, sl, r3, lsl #20
    132c:	02050104 	andeq	r0, r5, #4, 2
		syserror (ERESOURCE, "mal1");
    1330:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
    1334:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1338:	7a950329 	bvc	fe541fe4 <_estack+0xde53cfe4>
    133c:	17050501 	strne	r0, [r5, -r1, lsl #10]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1340:	01062d05 	tsteq	r6, r5, lsl #26
	m_size (mpools [0]) = mlen - m_hdrlen;
    1344:	02050104 	andeq	r0, r5, #4, 2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1348:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    134c:	01010120 	tsteq	r1, r0, lsr #2
    1350:	66010101 	strvs	r0, [r1], -r1, lsl #2
}
    1354:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
    1358:	03290504 			; <UNDEFINED> instruction: 0x03290504
    135c:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
    1360:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1364:	01040106 	tsteq	r4, r6, lsl #2
    1368:	b0030205 	andlt	r0, r3, r5, lsl #4
void __pi_free (aword *ch) {
    136c:	04042005 	streq	r2, [r4], #-5
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	d0032d05 	andle	r2, r3, r5, lsl #26
    1374:	0104207a 	tsteq	r4, sl, ror r0
		syserror (EMALLOC, "malg");
    1378:	03060205 	movweq	r0, #25093	; 0x6205
    137c:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
	mcfree [MA_NP] += m_size (ch);
    1380:	03290504 			; <UNDEFINED> instruction: 0x03290504
		m_size (ch) ^= MALLOC_UMASK;
    1384:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
    1388:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
	mcfree [MA_NP] += m_size (ch);
    138c:	01040106 	tsteq	r4, r6, lsl #2
	QFREE;
    1390:	03060205 	movweq	r0, #25093	; 0x6205
	if (mevent [MA_NP] . nwait) {
    1394:	012005b0 			; <UNDEFINED> instruction: 0x012005b0
    1398:	01010101 	tsteq	r1, r1, lsl #2
		trigger ((aword)(&(mevent [MA_NP])));
    139c:	06230501 	strteq	r0, [r3], -r1, lsl #10
		mevent [MA_NP] . nwait --;
    13a0:	05011003 	streq	r1, [r1, #-3]
}
    13a4:	20700302 	rsbscs	r0, r0, r2, lsl #6
    13a8:	2e015806 	cdpcs	8, 0, cr5, cr1, cr6, {0}
    13ac:	04010d03 	streq	r0, [r1], #-3331	; 0xfffff2fd
    13b0:	0305050a 	movweq	r0, #21770	; 0x550a
void kill (aword pid) {
    13b4:	05017ecd 	streq	r7, [r1, #-3789]	; 0xfffff133
		pid = (aword) __pi_curr;
    13b8:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
	j = NULL;
    13bc:	03270501 			; <UNDEFINED> instruction: 0x03270501
	for_all_tasks (i) {
    13c0:	042001ba 	strteq	r0, [r0], #-442	; 0xfffffe46
	syserror (EREQPAR, "kpi");
    13c4:	032f050a 			; <UNDEFINED> instruction: 0x032f050a
    13c8:	04207ec6 	strteq	r7, [r0], #-3782	; 0xfffff13a
		if ((aword)i == pid) {
    13cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    13d0:	2001b503 	andcs	fp, r1, r3, lsl #10
				__PCB = i->Next;
    13d4:	13062305 	movwne	r2, #25349	; 0x6305
			killev (i);
    13d8:	0c030205 	sfmeq	f0, 4, [r3], {5}
			ufree (i);
    13dc:	03230520 			; <UNDEFINED> instruction: 0x03230520
			if (i == __pi_curr)
    13e0:	02052074 	andeq	r2, r5, #116	; 0x74
    13e4:	27052406 	strcs	r2, [r5, -r6, lsl #8]
				release;
    13e8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
				j->Next = i->Next;
    13ec:	03270528 			; <UNDEFINED> instruction: 0x03270528
    13f0:	02052078 	andeq	r2, r5, #120	; 0x78
    13f4:	313f2806 	teqcc	pc, r6, lsl #16
}
    13f8:	404a0a03 	submi	r0, sl, r3, lsl #20
    13fc:	017dc003 	cmneq	sp, r3
    1400:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
	if (size < 8)
    1404:	03050509 	movweq	r0, #21769	; 0x5509
		_size = 2;
    1408:	04017eae 	streq	r7, [r1], #-3758	; 0xfffff152
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    140c:	060d0501 	streq	r0, [sp], -r1, lsl #10
		_size = (((aword)size) + 3) >> 2;
    1410:	0101d403 	tsteq	r1, r3, lsl #8
		if (m_magic (chunk) != MALLOC_MAGIC)
    1414:	31050904 	tstcc	r5, r4, lsl #18
		_size = (((aword)size) + 3) >> 2;
    1418:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
		if (mevent [MA_NP] . nfail != 255)
    141c:	02050104 	andeq	r0, r5, #4, 2
    1420:	01d40306 	bicseq	r0, r4, r6, lsl #6
			mevent [MA_NP] . nfail ++;
    1424:	060d0520 	streq	r0, [sp], -r0, lsr #10
		mnfree [MA_NP] = 0;
    1428:	06020501 	streq	r0, [r2], -r1, lsl #10
    142c:	02c70322 	sbceq	r0, r7, #-2013265920	; 0x88000000
		if (m_magic (chunk) != MALLOC_MAGIC)
    1430:	2e2e012e 	sufcsep	f0, f6, #0.5
    1434:	06060515 			; <UNDEFINED> instruction: 0x06060515
			syserror (EMALLOC, "malc");
    1438:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    143c:	30060305 	andcc	r0, r6, r5, lsl #6
		if (m_size (chunk) >= _size)
    1440:	05050b04 	streq	r0, [r5, #-2820]	; 0xfffff4fc
    1444:	0179c303 	cmneq	r9, r3, lsl #6
		chunk = m_nextp (chunk)) {
    1448:	5e030c04 	cdppl	12, 0, cr0, cr3, cr4, {0}
		m_setnextp (cc, m_nextp (chunk));
    144c:	062e0501 	strteq	r0, [lr], -r1, lsl #10
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1450:	050b0401 	streq	r0, [fp, #-1025]	; 0xfffffbff
    1454:	23030605 	movwcs	r0, #13829	; 0x3605
			m_size (chunk) = _size;
    1458:	0634052e 	ldrteq	r0, [r4], -lr, lsr #10
			cc = chunk + _size + m_hdrlen;
    145c:	06050501 	streq	r0, [r5], -r1, lsl #10
    1460:	0501044b 	streq	r0, [r1, #-1099]	; 0xfffffbb5
			m_size (cc) = waste - m_hdrlen;
    1464:	06d50315 			; <UNDEFINED> instruction: 0x06d50315
			QFREE;
    1468:	1303054a 	movwne	r0, #13642	; 0x354a
		mevent [MA_NP] . nfail = 0;
    146c:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
		mcfree [MA_NP] -= m_size (chunk);
    1470:	02053a15 	andeq	r3, r5, #86016	; 0x15000
    1474:	7ecb0319 	mcrvc	3, 6, r0, cr11, cr9, {0}
    1478:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
    147c:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
		m_size (chunk) |= MALLOC_UMASK;
    1480:	17050501 	strne	r0, [r5, -r1, lsl #10]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1484:	01062305 	tsteq	r6, r5, lsl #6
		m_size (chunk) |= MALLOC_UMASK;
    1488:	02050104 	andeq	r0, r5, #4, 2
			mnfree [MA_NP] = mcfree [MA_NP];
    148c:	2002dd03 	andcs	sp, r2, r3, lsl #26
}
    1490:	23050604 	movwcs	r0, #22020	; 0x5604
    1494:	207da303 	rsbscs	sl, sp, r3, lsl #6
    1498:	02050104 	andeq	r0, r5, #4, 2
    149c:	02dd0306 	sbcseq	r0, sp, #402653184	; 0x18000000
    14a0:	01054e4a 	tsteq	r5, sl, asr #28
    14a4:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    14a8:	0603052d 	streq	r0, [r3], -sp, lsr #10
aword __pi_fork (fsmcode func, aword data) {
    14ac:	412e5f03 			; <UNDEFINED> instruction: 0x412e5f03
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	06040541 	streq	r0, [r4], -r1, asr #10
    14b4:	1f030513 	svcne	0x00030513
    14b8:	01002f02 	tsteq	r0, r2, lsl #30
		if ((j = __PCB) == NULL)
    14bc:	001f0501 	andseq	r0, pc, r1, lsl #10
	i->Next = NULL;
    14c0:	0c400205 	sfmeq	f0, 2, [r0], {5}
	i->data = data;
    14c4:	fd030000 	stc2	0, cr0, [r3, #-0]
		if ((j = __PCB) == NULL)
    14c8:	02050108 	andeq	r0, r5, #8, 2
}
    14cc:	2c051617 	stccs	6, cr1, [r5], {23}
			for (; j->Next != NULL; j = j->Next);
    14d0:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    14d4:	202c0566 	eorcs	r0, ip, r6, ror #10
	return (aword) i;
    14d8:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    14dc:	15052112 	strne	r2, [r5, #-274]	; 0xfffffeee
	if (mevent [MA_NP] . nwait != 255)
    14e0:	01054a1f 	tsteq	r5, pc, lsl sl
    14e4:	00030223 	andeq	r0, r3, r3, lsr #4
    14e8:	1c050101 	stfnes	f0, [r5], {1}
		mevent [MA_NP] . nwait ++;
    14ec:	00020500 	andeq	r0, r2, r0, lsl #10
	wait ((aword)(&(mevent [MA_NP])), state);
    14f0:	03000000 	movweq	r0, #0
    14f4:	05010adb 	streq	r0, [r1, #-2779]	; 0xfffff525
void diag (const char *mess, ...) {
    14f8:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    14fc:	1c05010f 	stfnes	f0, [r5], {15}
    1500:	06050e06 	streq	r0, [r5], -r6, lsl #28
	diag_disable_int (a, is);
    1504:	20070525 	andcs	r0, r7, r5, lsr #10
    1508:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
    150c:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	diag_disable_int (a, is);
    1514:	052d0631 	streq	r0, [sp, #-1585]!	; 0xfffff9cf
	while (*mess != '\0') {
    1518:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
	dgout ('\r');
    151c:	4d062006 	stcmi	0, cr2, [r6, #-24]	; 0xffffffe8
	dgout ('\n');
    1520:	13060105 	movwne	r0, #24837	; 0x6105
    1524:	01000402 	tsteq	r0, r2, lsl #8
    1528:	00310501 	eorseq	r0, r1, r1, lsl #10
	diag_wait (a);
    152c:	0c640205 	sfmeq	f0, 2, [r4], #-20	; 0xffffffec
	diag_enable_int (a, is);
    1530:	e7030000 	str	r0, [r3, -r0]
    1534:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
}
    1538:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    153c:	77b20303 	ldrvc	r0, [r2, r3, lsl #6]!
    1540:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		if (*mess == '%') {
    1544:	cc030631 	stcgt	6, cr0, [r3], {49}	; 0x31
    1548:	03040108 	movweq	r0, #16648	; 0x4108
			if (*mess == 'l') {
    154c:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
    1550:	01043c77 	tsteq	r4, r7, ror ip
				mess++;
    1554:	cc033105 	stfgts	f3, [r3], {5}
				val = va_arg (ap, lword);
    1558:	03042008 	movweq	r2, #16392	; 0x4008
				bc = 32;
    155c:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
				bc = 16;
    1560:	01042077 	tsteq	r4, r7, ror r0
			switch (*mess) {
    1564:	03060205 	movweq	r0, #25093	; 0x6205
    1568:	012e08d0 	ldrdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
    156c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
				dgout ('%');
    1570:	76dd0306 	ldrbvc	r0, [sp], r6, lsl #6
    1574:	05010466 	streq	r0, [r1, #-1126]	; 0xfffffb9a
				dgout (*mess);
    1578:	a3030602 	movwge	r0, #13826	; 0x3602
    157c:	0d042009 	stceq	0, cr2, [r4, #-36]	; 0xffffffdc
			switch (*mess) {
    1580:	01759b03 	cmneq	r5, r3, lsl #22
					v = __pi_hex_enc_table [
    1584:	5b190101 	blpl	641990 <__ccfg+0x6219e8>
					i += 4;
    1588:	0501044a 	streq	r0, [r1, #-1098]	; 0xfffffbb6
					(val >> (bc - i)) & 0xf];
    158c:	9d03061a 	stcls	6, cr0, [r3, #-104]	; 0xffffff98
    1590:	0d042e09 	stceq	14, cr2, [r4, #-36]	; 0xffffffdc
					dgout (v);
    1594:	03060205 	movweq	r0, #25093	; 0x6205
    1598:	012076f9 	strdeq	r7, [r0, -r9]!
				while (i < bc) {
    159c:	01010101 	tsteq	r1, r1, lsl #2
			mess++;
    15a0:	03050304 	movweq	r0, #21252	; 0x5304
					d /= 10;
    15a4:	04013603 	streq	r3, [r1], #-1539	; 0xfffff9fd
				if ((val >> (bc - 1)) & 1) {
    15a8:	0302050d 	movweq	r0, #9485	; 0x250d
    15ac:	0482204a 	streq	r2, [r2], #74	; 0x4a
					dgout ('-');
    15b0:	08eb0301 	stmiaeq	fp!, {r0, r8, r9}^
    15b4:	06150501 	ldreq	r0, [r5], -r1, lsl #10
						val |= 0xffff0000;
    15b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    15bc:	0615054c 	ldreq	r0, [r5], -ip, asr #10
    15c0:	20020501 	andcs	r0, r2, r1, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    15c4:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    15c8:	04052002 	streq	r2, [r5], #-2
    15cc:	04216a06 	strteq	r6, [r1], #-2566	; 0xfffff5fa
					v = (word) (val / d);
    15d0:	0302050d 	movweq	r0, #9485	; 0x250d
					if (v || d == 1) break;
    15d4:	0401778e 	streq	r7, [r1], #-1934	; 0xfffff872
    15d8:	03030503 	movweq	r0, #13571	; 0x3503
					d /= 10;
    15dc:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
				d = (bc == 16) ? 10000 : 1000000000;
    15e0:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
					dgout (v + '0');
    15e4:	04202020 	strteq	r2, [r0], #-32	; 0xffffffe0
    15e8:	0ac50301 	beq	ff1421f4 <_estack+0xdf13d1f4>
    15ec:	050d0420 	streq	r0, [sp, #-1056]	; 0xfffffbe0
					d /= 10;
    15f0:	75a60303 	strvc	r0, [r6, #771]!	; 0x303
					val = val - (v * d);
    15f4:	0610054a 	ldreq	r0, [r0], -sl, asr #10
					if (d == 0) break;
    15f8:	20060501 	andcs	r0, r6, r1, lsl #10
					v = (word) (val / d);
    15fc:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
    1600:	0405201f 	streq	r2, [r5], #-31	; 0xffffffe1
				if (bc == 16)
    1604:	0e053006 	cdpeq	0, 0, cr3, cr5, cr6, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    1608:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
					val &= 0xffff;
    160c:	02052f06 	andeq	r2, r5, #6, 30
					dgout (*s);
    1610:	0501041c 	streq	r0, [r1, #-1052]	; 0xfffffbe4
					s++;
    1614:	098f0304 	stmibeq	pc, {r2, r8, r9}	; <UNPREDICTABLE>
				while (*s != '\0') {
    1618:	062a052e 	strteq	r0, [sl], -lr, lsr #10
    161c:	27040501 	strcs	r0, [r4, -r1, lsl #10]
			dgout (*mess++);
    1620:	79032a05 	stmdbvc	r3, {r0, r2, r9, fp, sp}
    1624:	06040520 	streq	r0, [r4], -r0, lsr #10
    1628:	0309044e 	movweq	r0, #37966	; 0x944e
    162c:	05017fb2 	streq	r7, [r1, #-4018]	; 0xfffff04e
    1630:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1634:	06040501 	streq	r0, [r4], -r1, lsl #10
    1638:	6600d103 	strvs	sp, [r0], -r3, lsl #2
    163c:	0502044d 	streq	r0, [r2, #-1101]	; 0xfffffbb3
    1640:	789f0305 	ldmvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
	^ entropy
    1644:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1648:	07e50304 	strbeq	r0, [r5, r4, lsl #6]!
    164c:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    1650:	06040501 	streq	r0, [r4], -r1, lsl #10
    1654:	1a05214b 	bne	149b88 <__ccfg+0x129be0>
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1658:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	word cs = size + hblenb;
    165c:	02044d06 	andeq	r4, r4, #384	; 0x180
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1660:	96030505 	strls	r0, [r3], -r5, lsl #10
    1664:	01050178 	tsteq	r5, r8, ror r1
	p -> length = size;
    1668:	01042106 	tsteq	r4, r6, lsl #2
}
    166c:	03060405 	movweq	r0, #25605	; 0x6405
	if (p->attributes.b.queued) {
    1670:	042007f1 	strteq	r0, [r0], #-2033	; 0xfffff80f
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1674:	0305050c 	movweq	r0, #21772	; 0x550c
    1678:	040178a0 	streq	r7, [r1], #-2208	; 0xfffff760
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    167c:	06310509 	ldrteq	r0, [r1], -r9, lsl #10
		p->attributes.b.queued = 0;
    1680:	0102d403 	tsteq	r2, r3, lsl #8
    1684:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1688:	2e7dac03 	cdpcs	12, 7, cr10, cr13, cr3, {0}
	deq (p);	// Remove from queue
    168c:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
}
    1690:	2e028803 	cdpcs	8, 0, cr8, cr2, cr3, {0}
	tfree ((address)p);
    1694:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	2e7df803 	cdpcs	8, 7, cr15, cr13, cr3, {0}
    169c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    16a0:	07e50306 	strbeq	r0, [r5, r6, lsl #6]!
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a4:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    16a8:	7aa00331 	bvc	fe802374 <_estack+0xde7fd374>
	if (q_empty (q))
    16ac:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
    16b0:	01065205 	tsteq	r6, r5, lsl #4
		trigger (q);
    16b4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (p->attributes.b.urgent) {
    16b8:	2005e503 	andcs	lr, r5, r3, lsl #10
		p->u.bqueue.next = q->next;
    16bc:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
		p->u.bqueue.prev = q;
    16c0:	2e7a9b03 	vaddcs.f64	d25, d10, d3
		q->next->prev = (qitem_t*) p;
    16c4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	p->attributes.b.queued = 1;
    16c8:	05e00306 	strbeq	r0, [r0, #774]!	; 0x306
    16cc:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
}
    16d0:	78860305 	stmvc	r6, {r0, r2, r8, r9}
		p->u.bqueue.prev = q->prev;
    16d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		q->prev->next = (qitem_t*) p;
    16d8:	07fc0304 	ldrbeq	r0, [ip, r4, lsl #6]!
		q->prev = (qitem_t*) p;
    16dc:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    16e0:	7aea0305 	bvc	ffa822fc <_estack+0xdfa7d2fc>
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e4:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
	deq (p);	// Soft dequeue, timer and hook left intact
    16e8:	03290501 			; <UNDEFINED> instruction: 0x03290501
	switch (dv) {
    16ec:	052004b6 	streq	r0, [r0, #-1206]!	; 0xfffffb4a
    16f0:	7bca0331 	blvc	ff2823bc <_estack+0xdf27d3bc>
    16f4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    16f8:	99030604 	stmdbls	r3, {r2, r9, sl}
			p->attributes.b.urgent = 1;
    16fc:	23052e05 	movwcs	r2, #24069	; 0x5e05
    1700:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			verify_ses (p, "dispose ses");
    1704:	046a0620 	strbteq	r0, [sl], #-1568	; 0xfffff9e0
    1708:	03050509 	movweq	r0, #21769	; 0x5509
    170c:	0501799f 	streq	r7, [r1, #-2463]	; 0xfffff661
    1710:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
    1714:	03040501 	movweq	r0, #17665	; 0x4501
			verify_phy (p, "dispose phy");
    1718:	042006ed 	strteq	r0, [r0], #-1773	; 0xfffff913
    171c:	033f0509 	teqeq	pc, #37748736	; 0x2400000
}
    1720:	04207993 	strteq	r7, [r0], #-2451	; 0xfffff66d
			enq (oqueues [p->attributes.b.phys], p);
    1724:	06040501 	streq	r0, [r4], -r1, lsl #10
			p->attributes.b.urgent = 1;
    1728:	2e06ea03 	vmlacs.f32	s28, s12, s6
    172c:	90030904 	andls	r0, r3, r4, lsl #18
			verify_phy (p, "dispose phy");
    1730:	2905017f 	stmdbcs	r5, {r0, r1, r2, r3, r4, r5, r6, r8}
    1734:	01040106 	tsteq	r4, r6, lsl #2
    1738:	f3030405 	vshl.u8	d0, d5, d3
    173c:	09042e00 	stmdbeq	r4, {r9, sl, fp, sp}
    1740:	8d032905 	vstrhi.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    1744:	0104207f 	tsteq	r4, pc, ror r0
			enq (oqueues [p->attributes.b.phys], p);
    1748:	03060405 	movweq	r0, #25605	; 0x6405
    174c:	4d4a00f3 	stclmi	0, cr0, [sl, #-972]	; 0xfffffc34
}
    1750:	05020440 	streq	r0, [r2, #-1088]	; 0xfffffbc0
			rlp (p);
    1754:	77ea0305 	strbvc	r0, [sl, r5, lsl #6]!
}
    1758:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    175c:	08990304 	ldmeq	r9, {r2, r8, r9}
    1760:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    1764:	06040501 	streq	r0, [r4], -r1, lsl #10
    1768:	1a05214b 	bne	149c9c <__ccfg+0x129cf4>
    176c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1770:	1d1a0523 	cfldr32ne	mvfx0, [sl, #-140]	; 0xffffff74
	if (b->attributes.b.outgoing) {
    1774:	3f060405 	svccc	0x00060405
	b = header (p);
    1778:	03090459 	movweq	r0, #37977	; 0x9459
	if (b->attributes.b.outgoing) {
    177c:	05017eee 	streq	r7, [r1, #-3822]	; 0xfffff112
		verify_ses (b, "tcv02");
    1780:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    1784:	030d050e 	movweq	r0, #54542	; 0xd50e
    1788:	042e7bdb 	strteq	r7, [lr], #-3035	; 0xfffff425
    178c:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1790:	042004a5 	strteq	r0, [r0], #-1189	; 0xfffffb5b
		verify_plg (b, tcv_out, "tcv03");
    1794:	06040501 	streq	r0, [r4], -r1, lsl #10
    1798:	4a019703 	bmi	673ac <__ccfg+0x47404>
    179c:	31050e04 	tstcc	r5, r4, lsl #28
    17a0:	0179f303 	cmneq	r9, r3, lsl #6	; <UNPREDICTABLE>
    17a4:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
    17a8:	04010652 	streq	r0, [r1], #-1618	; 0xfffff9ae
    17ac:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    17b0:	2e068c03 	cdpcs	12, 0, cr8, cr6, cr3, {0}
    17b4:	04110a05 	ldreq	r0, [r1], #-2565	; 0xfffff5fb
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b8:	0305050e 	movweq	r0, #21774	; 0x550e
}
    17bc:	05017ac3 	streq	r7, [r1, #-2755]	; 0xfffff53d
		dispose (b, plugins [b->attributes.b.plugin] ->
    17c0:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
		rlp (b);
    17c4:	030a0501 	movweq	r0, #42241	; 0xa501
}
    17c8:	052005bd 	streq	r0, [r0, #-1469]!	; 0xfffffa43
		rlp (b);
    17cc:	59320604 	ldmdbpl	r2!, {r2, r9, sl}
    17d0:	01060b05 	tsteq	r6, r5, lsl #22
    17d4:	21061a05 	tstcs	r6, r5, lsl #20
    17d8:	05110a05 	ldreq	r0, [r1, #-2565]	; 0xfffff5fb
    17dc:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17e0:	0405580a 	streq	r5, [r5], #-2058	; 0xfffff7f6
    17e4:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
    17e8:	b8030505 	stmdalt	r3, {r0, r2, r8, sl}
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17ec:	3105017a 	tstcc	r5, sl, ror r1
	va_start (ap, plid);
    17f0:	3f050106 	svccc	0x00050106
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f4:	207ebc03 	rsbscs	fp, lr, r3, lsl #24
    17f8:	c4033105 	strgt	r3, [r3], #-261	; 0xfffffefb
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17fc:	01042001 	tsteq	r4, r1
    1800:	03060405 	movweq	r0, #25605	; 0x6405
    1804:	042005cb 	strteq	r0, [r0], #-1483	; 0xfffffa35
    1808:	03050509 	movweq	r0, #21769	; 0x5509
			syserror (ENODEVICE, "tcv04");
    180c:	050178f1 	streq	r7, [r1, #-2289]	; 0xfffff70f
		syserror (EMALLOC, "tcv05");
    1810:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
	attp.b.outgoing = 1;
    1814:	06040501 	streq	r0, [r4], -r1, lsl #10
    1818:	2e079203 	cdpcs	2, 0, cr9, cr7, cr3, {0}
    181c:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
    1820:	0177f503 	cmneq	r7, r3, lsl #10	; <UNPREDICTABLE>
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1824:	01062e05 	tsteq	r6, r5, lsl #28
		if (descriptors [fd] == NULL)
    1828:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    182c:	088e0306 	stmeq	lr, {r1, r2, r8, r9}
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1830:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
		return ERROR;
    1834:	77c90305 	strbvc	r0, [r9, r5, lsl #6]
}
    1838:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    183c:	08ba0304 	ldmeq	sl!, {r2, r8, r9}
    1840:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
	s->attpattern.b.session = fd;
    1844:	0302052f 	movweq	r0, #9519	; 0x252f
    1848:	04017db0 	streq	r7, [r1], #-3504	; 0xfffff250
	descriptors [fd] = s;
    184c:	03240506 			; <UNDEFINED> instruction: 0x03240506
	q_init (&(s->rqueue));
    1850:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1854:	23051705 	movwcs	r1, #22277	; 0x5705
    1858:	01040106 	tsteq	r4, r6, lsl #2
    185c:	a8030105 	stmdage	r3, {r0, r2, r8}
    1860:	04055801 	streq	r5, [r5], #-2049	; 0xfffff7ff
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1864:	02f00306 	rscseq	r0, r0, #402653184	; 0x18000000
    1868:	2c055b20 			; <UNDEFINED> instruction: 0x2c055b20
    186c:	32050106 	andcc	r0, r5, #-2147483647	; 0x80000001
	descriptors [fd] = s;
    1870:	032c0527 			; <UNDEFINED> instruction: 0x032c0527
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1874:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    1878:	2d054c06 	stccs	12, cr4, [r5, #-24]	; 0xffffffe8
	if (s == NULL)
    187c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		syserror (EMALLOC, "tcv05");
    1880:	32055d06 	andcc	r5, r5, #384	; 0x180
    1884:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1888:	32053e06 	andcc	r3, r5, #6, 28	; 0x60
    188c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1890:	02042406 	andeq	r2, r4, #100663296	; 0x6000000
    1894:	8b030505 	blhi	c2cb0 <__ccfg+0xa2d08>
    1898:	01040177 	tsteq	r4, r7, ror r1
    189c:	f8030405 			; <UNDEFINED> instruction: 0xf8030405
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18a0:	0e042008 	cdpeq	0, 0, cr2, cr4, cr8, {0}
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a4:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
    18a8:	2d05017a 	stfcss	f0, [r5, #-488]	; 0xfffffe18
    18ac:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	plugins [ord] = pl;
    18b0:	4d053106 	stfmis	f3, [r5, #-24]	; 0xffffffe8
	return 0;
    18b4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		return ERROR;
    18b8:	2e053d06 	cdpcs	13, 0, cr3, cr5, cr6, {0}
}
    18bc:	01040106 	tsteq	r4, r6, lsl #2
    18c0:	03060405 	movweq	r0, #25605	; 0x6405
	verify_fds (fd, "tcv16");
    18c4:	043c05f7 	ldrteq	r0, [ip], #-1527	; 0xfffffa09
								Boolean urg) {
    18c8:	03050502 	movweq	r0, #21762	; 0x5502
    18cc:	04017785 	streq	r7, [r1], #-1925	; 0xfffff87b
	verify_fds (fd, "tcv16");
    18d0:	060d050e 	streq	r0, [sp], -lr, lsl #10
    18d4:	2002e803 	andcs	lr, r2, r3, lsl #16
    18d8:	39050104 	stmdbcc	r5, {r2, r8}
	verify_pld (s, tcv_frm, "tcv17");
    18dc:	06960306 	ldreq	r0, [r6], r6, lsl #6
    18e0:	010a0520 	tsteq	sl, r0, lsr #10
    18e4:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
    18e8:	0179ea03 	cmneq	r9, r3, lsl #20
    18ec:	01060d05 	tsteq	r6, r5, lsl #26
    18f0:	0a050104 	beq	141d08 <__ccfg+0x121d60>
    18f4:	20069603 	andcs	r9, r6, r3, lsl #12
    18f8:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
	ptrs.head = (word) fd;
    18fc:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
	ptrs.tail = (word) urg;
    1900:	0177ec03 	cmneq	r7, r3, lsl #24
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1904:	01064105 	tsteq	r6, r5, lsl #2
    1908:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		if (state != WNONE) {
    190c:	2e089703 	cdpcs	7, 0, cr9, cr8, cr3, {0}
    1910:	41050904 	tstmi	r5, r4, lsl #18
}
    1914:	2077e903 	rsbscs	lr, r7, r3, lsl #18
			when (eid, state);
    1918:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    191c:	08970306 	ldmeq	r7, {r1, r2, r8, r9}
			release;
    1920:	0d045220 	sfmeq	f5, 4, [r4, #-128]	; 0xffffff80
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1924:	d1030205 	tstle	r3, r5, lsl #4
    1928:	014a2075 	hvceq	41477	; 0xa205
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    192c:	03040101 	movweq	r0, #16641	; 0x4101
    1930:	2b030305 	blcs	c254c <__ccfg+0xa25a4>
    1934:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
    1938:	20550302 	subscs	r0, r5, r2, lsl #6
    193c:	00370216 	eorseq	r0, r7, r6, lsl r2
    1940:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
		if (state != WNONE) {
    1944:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    1948:	0300000e 	movweq	r0, #14
			tmwait (state);
    194c:	050100e1 	streq	r0, [r1, #-225]	; 0xffffff1f
    1950:	12051402 	andne	r1, r5, #33554432	; 0x2000000
	b->attributes = s->attpattern;
    1954:	02051e06 	andeq	r1, r5, #6, 28	; 0x60
		b->attributes.b.urgent = 1;
    1958:	061f2122 	ldreq	r2, [pc], -r2, lsr #2
    195c:	3f4b2f21 	svccc	0x004b2f21
	b->u.pointers.head = ptrs.head;
    1960:	01060805 	tsteq	r6, r5, lsl #16
	b->u.pointers.tail = length;
    1964:	2f060205 	svccs	0x00060205
	return (address) (b + 1);
    1968:	01000802 	tsteq	r0, r2, lsl #16
    196c:	003a0501 	eorseq	r0, sl, r1, lsl #10
    1970:	00000205 	andeq	r0, r0, r5, lsl #4
    1974:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    1978:	02050100 	andeq	r0, r5, #0, 2
    197c:	3a051414 	bcc	1469d4 <__ccfg+0x126a2c>
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    1984:	3a052406 	bcc	14a9a4 <__ccfg+0x12a9fc>
    1988:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
	verify_fph (phy, "tcv23");
    198c:	3f060305 	svccc	0x00060305
    1990:	01060605 	tsteq	r6, r5, lsl #12
    1994:	30060405 	andcc	r0, r6, r5, lsl #8
    1998:	01061205 	tsteq	r6, r5, lsl #4
}
    199c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
	return (physical [phy]) (opt, arg);
    19a0:	05250603 	streq	r0, [r5, #-1539]!	; 0xfffff9fd
    19a4:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
    19a8:	032f050f 			; <UNDEFINED> instruction: 0x032f050f
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19ac:	01042015 	tsteq	r4, r5, lsl r0
	if (opt < 0) {
    19b0:	6b030905 	blvs	c3dcc <__ccfg+0xa3e24>
		if (fd < 0)
    19b4:	06030520 	streq	r0, [r3], -r0, lsr #10
		if (opt == PHYSOPT_PLUGINFO) {
    19b8:	050f0421 	streq	r0, [pc, #-1057]	; 159f <diag+0xa7>
			if (fd >= TCV_MAX_PLUGS)
    19bc:	01140305 	tsteq	r4, r5, lsl #6
			if ((p = plugins [fd]) == NULL)
    19c0:	01062f05 	tsteq	r6, r5, lsl #30
    19c4:	01050104 	tsteq	r5, r4, lsl #2
}
    19c8:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
		if (fd >= TCV_MAX_PHYS)
    19cc:	6f030604 	svcvs	0x00030604
		return physinfo [fd];
    19d0:	050f0420 	streq	r0, [pc, #-1056]	; 15b8 <diag+0xc0>
    19d4:	00c30305 	sbceq	r0, r3, r5, lsl #6
	verify_fds (fd, "tcv22");
    19d8:	18051401 	stmdane	r5, {r0, sl, ip}
    19dc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    19e0:	01043306 	tsteq	r4, r6, lsl #6
    19e4:	03060b05 	movweq	r0, #27397	; 0x6b05
    19e8:	05017fb6 	streq	r7, [r1, #-4022]	; 0xfffff04a
}
    19ec:	04340603 	ldrteq	r0, [r4], #-1539	; 0xfffff9fd
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19f0:	0e05050f 	cfsh32eq	mvfx0, mvfx5, #15
    19f4:	01062f05 	tsteq	r6, r5, lsl #30
			return 0;
    19f8:	03050104 	movweq	r0, #20740	; 0x5104
    19fc:	06054106 	streq	r4, [r5], -r6, lsl #2
    1a00:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1a04:	2b06053f 	blcs	182f08 <__ccfg+0x162f60>
    1a08:	23060405 	movwcs	r0, #25605	; 0x6405
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a0c:	2203052f 	andcs	r0, r3, #197132288	; 0xbc00000
    1a10:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
	if (dsp != TCV_DSP_PASS) {
    1a14:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
		if (ses == NONE)
    1a18:	09022f21 	stmdbeq	r2, {r0, r5, r8, r9, sl, fp, sp}
			syserror (EREQPAR, "tcv26");
    1a1c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		verify_fds (ses, "tcv27");
    1a20:	02050011 	andeq	r0, r5, #17
    1a24:	00000eec 	andeq	r0, r0, ip, ror #29
    1a28:	010af103 	tsteq	sl, r3, lsl #2	; <UNPREDICTABLE>
    1a2c:	13160305 	tstne	r6, #335544320	; 0x14000000
    1a30:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
		if ((p = apb (size)) != NULL) {
    1a34:	200d0611 	andcs	r0, sp, r1, lsl r6
    1a38:	05262505 	streq	r2, [r6, #-1285]!	; 0xfffffafb
		return NULL;
    1a3c:	04051f03 	streq	r1, [r5], #-3843	; 0xfffff0fd
			p->attributes = descriptors [ses] -> attpattern;
    1a40:	25052106 	strcs	r2, [r5, #-262]	; 0xfffffefa
			dispose (p, dsp);
    1a44:	37050106 	strcc	r0, [r5, -r6, lsl #2]
			p->attributes = descriptors [ses] -> attpattern;
    1a48:	0f052d06 	svceq	0x00052d06
			p->attributes.b.outgoing = 0;
    1a4c:	06030501 	streq	r0, [r3], -r1, lsl #10
			dispose (p, dsp);
    1a50:	06020501 	streq	r0, [r2], -r1, lsl #10
			return (address)(p + 1);
    1a54:	03190632 	tsteq	r9, #52428800	; 0x3200000
    1a58:	31062079 	tstcc	r6, r9, ror r0
	if ((p = apb (size)) != NULL)
    1a5c:	055b5b32 	ldrbeq	r5, [fp, #-2866]	; 0xfffff4ce
    1a60:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
		return (address)(p + 1);
    1a64:	02054a0c 	andeq	r4, r5, #12, 20	; 0xc000
    1a68:	1d0c0523 	cfstr32ne	mvfx0, [ip, #-140]	; 0xffffff74
    1a6c:	23060205 	movwcs	r0, #25093	; 0x6205
    1a70:	0503043e 	streq	r0, [r3, #-1086]	; 0xfffffbc2
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a74:	75c50303 	strbvc	r0, [r5, #771]	; 0x303
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a78:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a7c:	0abd0302 	beq	fef4268c <_estack+0xdef3d68c>
    1a80:	000e0220 	andeq	r0, lr, r0, lsr #4
		syserror (EREQPAR, "tcv28");
    1a84:	0ee00101 	cdpeq	1, 14, cr0, cr0, cr1, {0}
		syserror (EMALLOC, "tcv29");
    1a88:	00030000 	andeq	r0, r3, r0
	physical [phy] = ps;
    1a8c:	00000190 	muleq	r0, r0, r1
	physinfo [phy] = info;
    1a90:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1a94:	0101000d 	tsteq	r1, sp
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a98:	00000101 	andeq	r0, r0, r1, lsl #2
    1a9c:	00000100 	andeq	r0, r0, r0, lsl #2
    1aa0:	6f682f01 	svcvs	0x00682f01
		syserror (EMALLOC, "tcv29");
    1aa4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 18f8 <tcv_wnps+0x34>
    1aa8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	q_init (q);
    1aac:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
}
    1ab0:	6f746b73 	svcvs	0x00746b73
    1ab4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1ab8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1abc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1ac0:	2f534f43 	svccs	0x00534f43
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac4:	4f636950 	svcmi	0x00636950
	verify_fph (phy, "tcv30");
    1ac8:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1acc:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1ad0:	6f682f00 	svcvs	0x00682f00
	verify_fph (phy, "tcv30");
    1ad4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1928 <tcv_wnps+0x64>
    1ad8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1adc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ae0:	6f746b73 	svcvs	0x00746b73
    1ae4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1aec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (plugins [plg] == NULL)
    1af0:	2f534f43 	svccs	0x00534f43
    1af4:	4f636950 	svcmi	0x00636950
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af8:	43432f53 	movtmi	r2, #16211	; 0x3f53
}
    1afc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1b00:	3143432f 	cmpcc	r3, pc, lsr #6
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b04:	57585833 	smmlarpl	r8, r3, r8, r5
    1b08:	2f455241 	svccs	0x00455241
    1b0c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b10:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1b14:	752f0062 	strvc	r0, [pc, #-98]!	; 1aba <tcvphy_reg+0x46>
    1b18:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1954 <tcv_wnps+0x90>
    1b1c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1b20:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b24:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
	len -= (ap.head + ap.tail);
    1b28:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1b2c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1b30:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b34:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1b38:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1b3c:	2f006564 	svccs	0x00006564
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b40:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1b44:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1b48:	2f6e6974 	svccs	0x006e6974
	return 1;
    1b4c:	6b736544 	blvs	1cdb064 <__ccfg+0x1cbb0bc>
    1b50:	2f706f74 	svccs	0x00706f74
    1b54:	4f534c4f 	svcmi	0x00534c4f
    1b58:	2f54454e 	svccs	0x0054454e
    1b5c:	4f434950 	svcmi	0x00434950
	verify_fph (phy, "tcv32");
    1b60:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1b64:	2f534f63 	svccs	0x00534f63
    1b68:	33314343 	teqcc	r1, #201326593	; 0xc000001
    1b6c:	2f005858 	svccs	0x00005858
    1b70:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1b74:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	oq = oqueues [phy];
    1b78:	2f6e6974 	svccs	0x006e6974
	b = q_first (oq);
    1b7c:	6b736544 	blvs	1cdb094 <__ccfg+0x1cbb0ec>
	if (q_end (b, oq)) {
    1b80:	2f706f74 	svccs	0x00706f74
	*len = b->length;
    1b84:	4f534c4f 	svcmi	0x00534c4f
	deq (b);	// Dequeue the packet ...
    1b88:	2f54454e 	svccs	0x0054454e
}
    1b8c:	4f434950 	svcmi	0x00434950
		return NULL;
    1b90:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1b94:	00534f63 	subseq	r4, r3, r3, ror #30
    1b98:	72656b00 	rsbvc	r6, r5, #0, 22
    1b9c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
	verify_fph (phy, "tcv33");
    1ba0:	00010063 	andeq	r0, r1, r3, rrx
    1ba4:	72617500 	rsbvc	r7, r1, #0, 10
    1ba8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1bac:	73000002 	movwvc	r0, #2
    1bb0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1bb4:	00682e74 	rsbeq	r2, r8, r4, ror lr
	oq = oqueues [phy];
    1bb8:	73000003 	movwvc	r0, #3
	b = q_first (oq);
    1bbc:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
		return NULL;
    1bc0:	00682e67 	rsbeq	r2, r8, r7, ror #28
	return (address)(b + 1);
    1bc4:	61000003 	tstvs	r0, r3
}
    1bc8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    1bcc:	00040068 	andeq	r0, r4, r8, rrx
    1bd0:	63616d00 	cmnvs	r1, #0, 26
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd4:	00682e68 	rsbeq	r2, r8, r8, ror #28
	verify_plg (b, tcv_xmt, "tcv34");
    1bd8:	70000004 	andvc	r0, r0, r4
	hblock_t *b = header (pkt);
    1bdc:	5f736e69 	svcpl	0x00736e69
	verify_plg (b, tcv_xmt, "tcv34");
    1be0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    1be4:	00040068 	andeq	r0, r4, r8, rrx
    1be8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    1bec:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    1bf0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1bf4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1bf8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bfc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
}
    1c00:	00050068 	andeq	r0, r5, r8, rrx
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c04:	72656b00 	rsbvc	r6, r5, #0, 22
    1c08:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    1c0c:	00010068 	andeq	r0, r1, r8, rrx
}
    1c10:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    while(1)
    1c14:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
{
    1c18:	003e6e69 	eorseq	r6, lr, r9, ror #28
    SetupTrimDevice();
    1c1c:	00000000 	andeq	r0, r0, r0
    pui32Src = &_etext;
    1c20:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c24:	000f4c02 	andeq	r4, pc, r2, lsl #24
    __asm("    ldr     r0, =_bss\n"
    1c28:	03c30300 	biceq	r0, r3, #0, 6
    1c2c:	16020501 	strne	r0, [r2], -r1, lsl #10
    1c30:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    1c34:	78030626 	stmdavc	r3, {r1, r2, r5, r9, sl}
    1c38:	03020501 	movweq	r0, #9473	; 0x2501
   main();
    1c3c:	07052009 	streq	r2, [r5, -r9]
    FaultISR();
    1c40:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
        *pui32Dest++ = *pui32Src++;
    1c44:	13052021 	movwne	r2, #20513	; 0x5021
    1c48:	0a052106 	beq	14a068 <__ccfg+0x12a0c0>
    1c4c:	2013053c 	andscs	r0, r3, ip, lsr r5
    1c50:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
    1c54:	052c060f 	streq	r0, [ip, #-1551]!	; 0xfffff9f1
    1c58:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1c5c:	052f0604 	streq	r0, [pc, #-1540]!	; 1660 <apb+0x8>
    1c60:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
static byte get_byte () {
    1c64:	05053c07 	streq	r3, [r5, #-3079]	; 0xfffff3f9
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c68:	054b3106 	strbeq	r3, [fp, #-262]	; 0xfffffefa
    1c6c:	017a0302 	cmneq	sl, r2, lsl #6
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c70:	03060105 	movweq	r0, #24837	; 0x6105
    1c74:	03022e0a 	movweq	r2, #11786	; 0x2e0a
		if (ee_inp)
    1c78:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			b |= 1;
    1c7c:	0205001f 	andeq	r0, r5, #31
    1c80:	00000f88 	andeq	r0, r0, r8, lsl #31
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c84:	0106c903 	tsteq	r6, r3, lsl #18
	for (b = 0, i = 0; i < 8; i++) {
    1c88:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
}
    1c8c:	05131401 	ldreq	r1, [r3, #-1025]	; 0xfffffbff
    1c90:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1c94:	2070031f 	rsbscs	r0, r0, pc, lsl r3
static void put_byte (byte b) {
    1c98:	10030d05 	andne	r0, r3, r5, lsl #26
    1c9c:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
    1ca0:	06020520 	streq	r0, [r2], -r0, lsr #10
    1ca4:	11030601 	tstne	r3, r1, lsl #12
		if (b & 0x80)
    1ca8:	0d051320 	stceq	3, cr1, [r5, #-128]	; 0xffffff80
    1cac:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cb0:	061f051f 			; <UNDEFINED> instruction: 0x061f051f
	for (i = 0; i < 8; i++) {
    1cb4:	06020521 	streq	r0, [r2], -r1, lsr #10
		b <<= 1;
    1cb8:	21250601 			; <UNDEFINED> instruction: 0x21250601
	for (i = 0; i < 8; i++) {
    1cbc:	15060f05 	strne	r0, [r6, #-3845]	; 0xfffff0fb
}
    1cc0:	061d0205 	ldreq	r0, [sp], -r5, lsl #4
    1cc4:	060f0523 	streq	r0, [pc], -r3, lsr #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc8:	24010501 	strcs	r0, [r1], #-1281	; 0xfffffaff
    1ccc:	03060305 	movweq	r0, #25349	; 0x6305
	put_byte (cmd);
    1cd0:	1e052062 	cdpne	0, 0, cr2, cr5, cr2, {3}
    1cd4:	06050106 	streq	r0, [r5], -r6, lsl #2
}
    1cd8:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1cdc:	13052130 	movwne	r2, #20784	; 0x5130
static void wwait (word st, word del) {
    1ce0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1ce4:	2e059106 	mvfcss	f1, f6
    1ce8:	0636050d 	ldrteq	r0, [r6], -sp, lsl #10
	while (dopen && (rdsr () & 1)) {
    1cec:	060a0501 	streq	r0, [sl], -r1, lsl #10
    1cf0:	061f0534 			; <UNDEFINED> instruction: 0x061f0534
    1cf4:	580d0501 	stmdapl	sp, {r0, r8, sl}
    1cf8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
	put_byte (CMD_RDSR);
    1cfc:	0610052f 	ldreq	r0, [r0], -pc, lsr #10
	r = get_byte ();
    1d00:	06040501 	streq	r0, [r4], -r1, lsl #10
    1d04:	05ac0b03 	streq	r0, [ip, #2819]!	; 0xb03
	while (dopen && (rdsr () & 1)) {
    1d08:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
}
    1d0c:	0564062e 	strbeq	r0, [r4, #-1582]!	; 0xfffff9d2
		if (st == WNONE)
    1d10:	02130609 	andseq	r0, r3, #9437184	; 0x900000
    1d14:	01010007 	tsteq	r1, r7
			mdelay (1);
    1d18:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    1d1c:	00100802 	andseq	r0, r0, r2, lsl #16
			delay (del, st);
    1d20:	08c60300 	stmiaeq	r6, {r8, r9}^
    1d24:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			release;
    1d28:	0d050204 	sfmeq	f0, 4, [r5, #-16]
    1d2c:	7cdf0306 	ldclvc	3, cr0, [pc], {6}
    1d30:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
static void ready () {
    1d34:	a103060f 	tstge	r3, pc, lsl #12
	if (dopen) {
    1d38:	02052003 	andeq	r2, r5, #3
		wwait (WNONE, 1);
    1d3c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1d40:	7cda0324 	ldclvc	3, cr0, [sl], {36}	; 0x24
    1d44:	17050501 	strne	r0, [r5, -r1, lsl #10]
	dstat = 0;
    1d48:	01060d05 	tsteq	r6, r5, lsl #26
}
    1d4c:	02050104 	andeq	r0, r5, #4, 2
    1d50:	2003a103 	andcs	sl, r3, r3, lsl #2
    1d54:	01052f06 	tsteq	r5, r6, lsl #30
	udelay (1);
    1d58:	05023d06 	streq	r3, [r2, #-3334]	; 0xfffff2fa
    1d5c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	udelay (1);
    1d60:	02050027 	andeq	r0, r5, #39	; 0x27
		dopen = DOPEN_TEMP;
    1d64:	00000000 	andeq	r0, r0, r0
    1d68:	0100de03 	tsteq	r0, r3, lsl #28
    1d6c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1d70:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
static void cclose () {
    1d74:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
	if (dopen == DOPEN_TEMP) {
    1d78:	02051c27 	andeq	r1, r5, #9984	; 0x2700
    1d7c:	23200624 			; <UNDEFINED> instruction: 0x23200624
		wwait (WNONE, 1);
    1d80:	05480305 	strbeq	r0, [r8, #-773]	; 0xfffffcfb
    1d84:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	cmd_0 (CMD_DP);
    1d88:	052d0602 	streq	r0, [sp, #-1538]!	; 0xfffff9fe
    1d8c:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
		dopen = 0;
    1d90:	01010005 	tsteq	r1, r5
}
    1d94:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
word ee_open () {
    1d98:	00102002 	andseq	r2, r0, r2
	ready ();
    1d9c:	00fa0300 	rscseq	r0, sl, r0, lsl #6
	dopen = DOPEN_PERM;
    1da0:	13020501 	movwne	r0, #9473	; 0x2501
    1da4:	1f061b05 	svcne	0x00061b05
}
    1da8:	02210205 	eoreq	r0, r1, #1342177280	; 0x50000000
	if (dopen) {
    1dac:	01010006 	tsteq	r1, r6
    1db0:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
		dopen = DOPEN_TEMP;
    1db4:	00103002 	andseq	r3, r0, r2
		cclose ();
    1db8:	00fe0300 	rscseq	r0, lr, r0, lsl #6
}
    1dbc:	16020501 	strne	r0, [r2], -r1, lsl #10
int ser_in (word st, char *buf, int len) {
    1dc0:	010e0514 	tsteq	lr, r4, lsl r5
    1dc4:	03061e05 	movweq	r1, #28165	; 0x6e05
	if (len == 0)
    1dc8:	0905207a 	stmdbeq	r5, {r1, r3, r4, r5, r6, sp}
	if (__inpline == NULL) {
    1dcc:	031e0534 	tsteq	lr, #52, 10	; 0xd000000
		if ((prcs = running (__inserial)) == 0) {
    1dd0:	0305207a 	movweq	r2, #20602	; 0x507a
    1dd4:	12052706 	andne	r2, r5, #1572864	; 0x180000
			prcs = runthread (__inserial);
    1dd8:	06050106 	streq	r0, [r5], -r6, lsl #2
    1ddc:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
			if (prcs == 0) {
    1de0:	0620051f 			; <UNDEFINED> instruction: 0x0620051f
				npwait (st);
    1de4:	060e0501 	streq	r0, [lr], -r1, lsl #10
		release;
    1de8:	06020520 	streq	r0, [r2], -r0, lsr #10
		join (prcs, st);
    1dec:	05320601 	ldreq	r0, [r2, #-1537]!	; 0xfffff9ff
    1df0:	02051303 	andeq	r1, r5, #201326592	; 0xc000000
	if (*__inpline == NULL) // bin cmd
    1df4:	1105153b 	tstne	r5, fp, lsr r5
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df8:	01050106 	tsteq	r5, r6, lsl #2
	if (prcs >= len)
    1dfc:	0006022f 	andeq	r0, r6, pc, lsr #4
		prcs = len-1;
    1e00:	21050101 	tstcs	r5, r1, lsl #2
	memcpy (buf, __inpline, prcs);
    1e04:	00020500 	andeq	r0, r2, r0, lsl #10
    1e08:	03000000 	movweq	r0, #0
    1e0c:	0501018e 	streq	r0, [r1, #-398]	; 0xfffffe72
	ufree (__inpline);
    1e10:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
	__inpline = NULL;
    1e14:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	if (*buf) // if it's NULL, it's a bin cmd
    1e18:	21052006 	tstcs	r5, r6
		buf [prcs] = '\0';
    1e1c:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
}
    1e20:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
		prcs = strlen (__inpline);
    1e24:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1e28:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
		return 0;
    1e2c:	03052106 	movweq	r2, #20742	; 0x5106
    1e30:	0606054b 	streq	r0, [r6], -fp, asr #10
    1e34:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
int ser_outf (word st, const char *m, ...) {
    1e38:	0620052b 	strteq	r0, [r0], -fp, lsr #10
    1e3c:	060e0501 	streq	r0, [lr], -r1, lsl #10
	if ((prcs = running (__outserial)) != 0) {
    1e40:	06020520 	streq	r0, [r2], -r0, lsr #10
    1e44:	05340601 	ldreq	r0, [r4, #-1537]!	; 0xfffff9ff
		join (prcs, st);
    1e48:	0205580b 	andeq	r5, r5, #720896	; 0xb0000
    1e4c:	01080513 	tsteq	r8, r3, lsl r5
		release;
    1e50:	052f0305 	streq	r0, [pc, #-773]!	; 1b53 <tcvphy_rcv+0x8f>
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e54:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    1e58:	12052021 	andne	r2, r5, #33	; 0x21
    1e5c:	06030520 	streq	r0, [r3], -r0, lsr #10
		umwait (st);
    1e60:	0606052f 	streq	r0, [r6], -pc, lsr #10
    1e64:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (runstrand (__outserial, buf) == 0) {
    1e68:	2e0b0532 	mcrcs	5, 0, r0, cr11, cr2, {1}
    1e6c:	13060105 	movwne	r0, #24837	; 0x6105
    1e70:	01000702 	tsteq	r0, r2, lsl #14
		ufree (buf);
    1e74:	002a0501 	eoreq	r0, sl, r1, lsl #10
		npwait (st);
    1e78:	105c0205 	subsne	r0, ip, r5, lsl #4
}
    1e7c:	a6030000 	strge	r0, [r3], -r0
    1e80:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    1e84:	06050514 			; <UNDEFINED> instruction: 0x06050514
    1e88:	06020501 	streq	r0, [r2], -r1, lsl #10
int ser_inf (word st, const char *fmt, ...) {
    1e8c:	00020221 	andeq	r0, r2, r1, lsr #4
    1e90:	2e050101 	adfcss	f0, f5, f1
	if (fmt == NULL)
    1e94:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
	if (__inpline == NULL) {
    1e98:	03000010 	movweq	r0, #16
		if ((prcs = running (__inserial)) == 0) {
    1e9c:	060101ae 	streq	r0, [r1], -lr, lsr #3
    1ea0:	06020520 	streq	r0, [r2], -r0, lsr #10
			prcs = runthread (__inserial);
    1ea4:	13200e03 			; <UNDEFINED> instruction: 0x13200e03
    1ea8:	05011003 	streq	r1, [r1, #-3]
			if (prcs == 0) {
    1eac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
				npwait (st);
    1eb0:	02053c05 	andeq	r3, r5, #1280	; 0x500
		release;
    1eb4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
		join (prcs, st);
    1eb8:	01060605 	tsteq	r6, r5, lsl #12
    1ebc:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
	va_start (ap, fmt);
    1ec0:	03053c06 	movweq	r3, #23558	; 0x5c06
	prcs = vscan (__inpline, fmt, ap);
    1ec4:	2e270806 	cdpcs	8, 2, cr0, cr7, cr6, {0}
    1ec8:	29030205 	stmdbcs	r3, {r0, r2, r9}
	ufree (__inpline);
    1ecc:	06140520 	ldreq	r0, [r4], -r0, lsr #10
	__inpline = NULL;
    1ed0:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
}
    1ed4:	03060405 	movweq	r0, #25605	; 0x6405
    1ed8:	09052e59 	stmdbeq	r5, {r0, r3, r4, r6, r9, sl, fp, sp}
    1edc:	07050106 	streq	r0, [r5, -r6, lsl #2]
		return 0;
    1ee0:	06040520 	streq	r0, [r4], -r0, lsr #10
    1ee4:	06080531 			; <UNDEFINED> instruction: 0x06080531
    1ee8:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1eec:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    1ef0:	3e080605 	cfmadd32cc	mvax0, mvfx0, mvfx8, mvfx5
    1ef4:	79030305 	stmdbvc	r3, {r0, r2, r8, r9}
	RF_cmdFs.frequency = 
    1ef8:	0305053c 	movweq	r0, #21820	; 0x553c
}
    1efc:	12052e0b 	andne	r2, r5, #11, 28	; 0xb0
    1f00:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1f04:	07052106 	streq	r2, [r5, -r6, lsl #2]
    1f08:	03051106 	movweq	r1, #20742	; 0x5106
static int option (int opt, address val) {
    1f0c:	66170306 	ldrvs	r0, [r7], -r6, lsl #6
    1f10:	01060705 	tsteq	r6, r5, lsl #14
    1f14:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1f18:	16030602 	strne	r0, [r3], -r2, lsl #12
    1f1c:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
    1f20:	06020501 	streq	r0, [r2], -r1, lsl #10
    1f24:	06010540 	streq	r0, [r1], -r0, asr #10
    1f28:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    1f2c:	2e730302 	cdpcs	3, 7, cr0, cr3, cr2, {0}
    1f30:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    1f34:	000a022e 	andeq	r0, sl, lr, lsr #4
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f38:	1b050101 	blne	142344 <__ccfg+0x12239c>
    1f3c:	30020500 	andcc	r0, r2, r0, lsl #10
			goto RVal;
    1f40:	03000011 	movweq	r0, #17
			_BIS (dstate, DSTATE_RXON);
    1f44:	050102d2 	streq	r0, [r1, #-722]	; 0xfffffd2e
    1f48:	1b051402 	blne	146f58 <__ccfg+0x126fb0>
	int ret = 0;
    1f4c:	02051006 	andeq	r1, r5, #6
			p_trigger (drvprcs, qevent);
    1f50:	024b0622 	subeq	r0, fp, #35651584	; 0x2200000
    1f54:	01010005 	tsteq	r1, r5
    1f58:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    1f5c:	00114402 	andseq	r4, r1, r2, lsl #8
    1f60:	02d80300 	sbcseq	r0, r8, #0, 6
    1f64:	16020501 	strne	r0, [r2], -r1, lsl #10
    1f68:	0e062a05 	vmlaeq.f32	s4, s12, s10
    1f6c:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
    1f70:	02053e05 	andeq	r3, r5, #5, 28	; 0x50
    1f74:	05054a06 	streq	r4, [r5, #-2566]	; 0xfffff5fa
}
    1f78:	03050106 	movweq	r0, #20742	; 0x5106
			_BIC (dstate, DSTATE_RXON);
    1f7c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    1f80:	3d06014c 	stfccs	f0, [r6, #-304]	; 0xfffffed0
			statid = (val == NULL) ? 0 : *val;
    1f84:	2020061f 	eorcs	r0, r0, pc, lsl r6
    1f88:	06010513 			; <UNDEFINED> instruction: 0x06010513
	int ret = 0;
    1f8c:	00060221 	andeq	r0, r6, r1, lsr #4
			ret = (int) statid;
    1f90:	21050101 	tstcs	r5, r1, lsl #2
	if (val != NULL)
    1f94:	78020500 	stmdavc	r2, {r8, sl}
		*val = ret;
    1f98:	03000011 	movweq	r0, #17
			ret = rbuffl + 2;
    1f9c:	050102e5 	streq	r0, [r1, #-741]	; 0xfffffd1b
    1fa0:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
			if (val != NULL) {
    1fa4:	03062105 	movweq	r2, #24837	; 0x6105
				memcpy (val, &rxstat,
    1fa8:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    1fac:	052e0627 	streq	r0, [lr, #-1575]!	; 0xfffff9d9
				memset (&rxstat, 0, 
    1fb0:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    1fb4:	1305200a 	movwne	r2, #20490	; 0x500a
			if (val == NULL)
    1fb8:	060f0520 	streq	r0, [pc], -r0, lsr #10
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fbc:	0603054a 	streq	r0, [r3], -sl, asr #10
    1fc0:	06040501 	streq	r0, [r4], -r1, lsl #10
				utimer_set (bckf_timer, *val);
    1fc4:	0607052f 	streq	r0, [r7], -pc, lsr #10
    1fc8:	06050501 	streq	r0, [r5], -r1, lsl #10
    1fcc:	02054b5a 	andeq	r4, r5, #92160	; 0x16800
			for (ret = 0; ret < 8; ret++)
    1fd0:	0601050d 	streq	r0, [r1], -sp, lsl #10
				if (RF_cmdPropRadioDivSetup.txPower
    1fd4:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
					== patable [ret])
    1fd8:	01010003 	tsteq	r1, r3
				if (RF_cmdPropRadioDivSetup.txPower
    1fdc:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
			for (ret = 0; ret < 8; ret++)
    1fe0:	00000002 	andeq	r0, r0, r2
    1fe4:	02f70300 	rscseq	r0, r7, #0, 6
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	16020501 	strne	r0, [r2], -r1, lsl #10
    1fec:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    1ff0:	01790306 	cmneq	r9, r6, lsl #6
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff4:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    1ff8:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
			_BIS (dstate, DSTATE_IRST);
    1ffc:	0e050106 	adfeqs	f0, f5, f6
    2000:	12052e06 	andne	r2, r5, #6, 28	; 0x60
    2004:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			ret = (int) channel;
    2008:	3301053c 	movwcc	r0, #5436	; 0x153c
			goto RVal;
    200c:	1c060305 	stcne	3, cr0, [r6], {5}
				(*val > 7) ? 7 : *val;
    2010:	01060605 	tsteq	r6, r5, lsl #12
    2014:	051f2005 	ldreq	r2, [pc, #-5]	; 2017 <option+0x10b>
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2018:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    201c:	1f052106 	svcne	0x00052106
			plugch ();
    2020:	00010264 	andeq	r0, r1, r4, ror #4
			_BIS (dstate, DSTATE_IRST);
    2024:	26050101 	strcs	r0, [r5], -r1, lsl #2
    2028:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
			ret = (int) vrate;
    202c:	03000011 	movweq	r0, #17
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	05010387 	streq	r0, [r1, #-903]	; 0xfffffc79
    2034:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2038:	200e0626 	andcs	r0, lr, r6, lsr #12
    203c:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2040:	0609052e 	streq	r0, [r9], -lr, lsr #10
    2044:	06030528 	streq	r0, [r3], -r8, lsr #10
    2048:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    204c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2050:	3d300604 	ldccc	6, cr0, [r0, #-16]!
    2054:	17060105 	strne	r0, [r6, -r5, lsl #2]
    2058:	03060205 	movweq	r0, #25093	; 0x6205
    205c:	04022e77 	streq	r2, [r2], #-3703	; 0xfffff189
			syserror (EREQPAR, "cc13 op");
    2060:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2064:	02050021 	andeq	r0, r5, #33	; 0x21
    2068:	000011d0 	ldrdeq	r1, [r0], -r0
    206c:	01039903 	tsteq	r3, r3, lsl #18
    2070:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2074:	200e0621 	andcs	r0, lr, r1, lsr #12
    2078:	06240205 	strteq	r0, [r4], -r5, lsl #4
    207c:	1e053e85 	cdpne	14, 0, cr3, cr5, cr5, {4}
    2080:	0b050106 	bleq	1424a0 <__ccfg+0x1224f8>
    2084:	201e052e 	andscs	r0, lr, lr, lsr #10
    2088:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    208c:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
    2090:	02590601 	subseq	r0, r9, #1048576	; 0x100000
    2094:	01010005 	tsteq	r1, r5
    2098:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
static void issue_cmd (lword cmd) {
    209c:	00000002 	andeq	r0, r0, r2
    20a0:	03a70300 			; <UNDEFINED> instruction: 0x03a70300
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a4:	16020501 	strne	r0, [r2], -r1, lsl #10
    20a8:	67060105 	strvs	r0, [r6, -r5, lsl #2]
    20ac:	01000402 	tsteq	r0, r2, lsl #8
		if (res != 0x86)
    20b0:	00180501 	andseq	r0, r8, r1, lsl #10
			syserror (EHARDWARE, "hang ic0");
    20b4:	00000205 	andeq	r0, r0, r5, lsl #4
    20b8:	b2030000 	andlt	r0, r3, #0
		if (cnt-- == 0) {
    20bc:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
			diag ("HUP %lx %lx", cmd, res);
    20c0:	18051414 	stmdane	r5, {r2, r4, sl, ip}
    20c4:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
			syserror (EHARDWARE, "hang ic0");
    20c8:	5a062402 	bpl	18b0d8 <__ccfg+0x16b130>
		udelay (1);
    20cc:	01060505 	tsteq	r6, r5, lsl #10
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20d0:	21060305 	tstcs	r6, r5, lsl #6
}
    20d4:	01060505 	tsteq	r6, r5, lsl #10
    20d8:	35060205 	strcc	r0, [r6, #-517]	; 0xfffffdfb
    20dc:	01061205 	tsteq	r6, r5, lsl #4
    20e0:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
static void rx_de () {
    20e4:	7a030603 	bvc	c38f8 <__ccfg+0xa3950>
	if ((dstate & DSTATE_RXAC) == 0)
    20e8:	06053d20 	streq	r3, [r5], -r0, lsr #26
    20ec:	17050106 	strne	r0, [r5, -r6, lsl #2]
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20f0:	3d0b052e 	cfstr32cc	mvfx0, [fp, #-184]	; 0xffffff48
	_BIC (dstate, DSTATE_RXAC);
    20f4:	01000802 	tsteq	r0, r2, lsl #16
    20f8:	001d0501 	andseq	r0, sp, r1, lsl #10
}
    20fc:	00000205 	andeq	r0, r0, r5, lsl #4
    2100:	92030000 	andls	r0, r3, #0
    2104:	02050104 	andeq	r0, r5, #4, 2
static void rf_off () {
    2108:	1d051414 	cfstrsne	mvf1, [r5, #-80]	; 0xffffffb0
	if ((dstate & DSTATE_RFON) == 0)
    210c:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
    2110:	06030524 	streq	r0, [r3], -r4, lsr #10
	IntDisable (INT_RFC_CPE_0);
    2114:	06050521 	streq	r0, [r5], -r1, lsr #10
    2118:	06020501 	streq	r0, [r2], -r1, lsl #10
    211c:	06010532 			; <UNDEFINED> instruction: 0x06010532
	RFCAdi3VcoLdoVoltageMode (false);
    2120:	06030513 			; <UNDEFINED> instruction: 0x06030513
	RFCSynthPowerDown ();
    2124:	0006022b 	andeq	r0, r6, fp, lsr #4
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	1d050101 	stfnes	f0, [r5, #-4]
    212c:	08020500 	stmdaeq	r2, {r8, sl}
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	03000012 	movweq	r0, #18
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	0501049e 	streq	r0, [r1, #-1182]	; 0xfffffb62
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2140:	052f0603 	streq	r0, [pc, #-1539]!	; 1b45 <tcvphy_rcv+0x81>
    2144:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
	_BIC (dstate, DSTATE_RFON);
    2148:	2e3e0602 	cfmsuba32cs	mvax0, mvax0, mvfx14, mvfx2
    214c:	25060105 	strcs	r0, [r6, #-261]	; 0xfffffefb
}
    2150:	1c060305 	stcne	3, cr0, [r6], {5}
    2154:	01060605 	tsteq	r6, r5, lsl #12
    2158:	3b060205 	blcc	182974 <__ccfg+0x1629cc>
    215c:	01000602 	tsteq	r0, r2, lsl #12
    2160:	001d0501 	andseq	r0, sp, r1, lsl #10
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	00000205 	andeq	r0, r0, r5, lsl #4
    2168:	ac030000 	stcge	0, cr0, [r3], {-0}
    216c:	02050104 	andeq	r0, r5, #4, 2
		if (cmd->status == tstat)
    2170:	13141314 	tstne	r4, #20, 6	; 0x50000000
		if (timeout-- == 0) {
    2174:	03061d05 	movweq	r1, #27909	; 0x6d05
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	0405017a 	streq	r0, [r5], #-378	; 0xfffffe86
    217c:	21020525 	tstcs	r2, r5, lsr #10
    2180:	01052e06 	tsteq	r5, r6, lsl #28
			syserror (EHARDWARE, "rt2");
    2184:	03052406 	movweq	r2, #21510	; 0x5406
    2188:	06051d06 	streq	r1, [r5], -r6, lsl #26
		udelay (1);
    218c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		if (cmd->status == tstat)
    2190:	2106051f 	tstcs	r6, pc, lsl r5
}
    2194:	21060405 	tstcs	r6, r5, lsl #8
    2198:	01060505 	tsteq	r6, r5, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    219c:	3a060205 	bcc	1829b8 <__ccfg+0x162a10>
    21a0:	01000402 	tsteq	r0, r2, lsl #8
static void rf_on () {
    21a4:	00210501 	eoreq	r0, r1, r1, lsl #10
    21a8:	122c0205 	eorne	r0, ip, #1342177280	; 0x50000000
	OSCHF_TurnOnXosc();
    21ac:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21b0:	02050104 	andeq	r0, r5, #4, 2
    21b4:	21051414 	tstcs	r5, r4, lsl r4
    21b8:	09050e06 	stmdbeq	r5, {r1, r2, r9, sl, fp}
    21bc:	060e0524 	streq	r0, [lr], -r4, lsr #10
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21c0:	06020520 	streq	r0, [r2], -r0, lsr #10
    21c4:	31010501 	tstcc	r1, r1, lsl #10
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c8:	1d062205 	sfmne	f2, 4, [r6, #-20]	; 0xffffffec
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21cc:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
	issue_cmd (
    21d0:	0201061f 	andeq	r0, r1, #32505856	; 0x1f00000
    21d4:	01010002 	tsteq	r1, r2
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d8:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    21dc:	00000002 	andeq	r0, r0, r2
    21e0:	04c10300 	strbeq	r0, [r1], #768	; 0x300
   pPatchTab[80] = 0;
    21e4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   } while (--nIterations);
    21e8:	05202005 	streq	r2, [r0, #-5]!
   pPatchTab[53] = 2;
    21ec:	1a050108 	bne	142614 <__ccfg+0x12266c>
    21f0:	18050106 	stmdane	r5, {r1, r2, r8}
   pPatchTab[55] = 3;
    21f4:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
   pPatchTab[110] = 4;
    21f8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
   pPatchTab[107] = 5;
    21fc:	01010001 	tsteq	r1, r1
   pPatchTab[65] = 6;
    2200:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2204:	00000002 	andeq	r0, r0, r2
   pPatchTab[57] = 1;
    2208:	04c60300 	strbeq	r0, [r6], #768	; 0x300
   pIrqPatch[1] = _IRQ_PATCH_0;
    220c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
   const uint32_t *pS = patchGenfskRfe;
    2210:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
      t2 = *pS++;
    2214:	05053002 	streq	r3, [r5, #-2]
      t4 = *pS++;
    2218:	01050106 	tsteq	r5, r6, lsl #2
      t6 = *pS++;
    221c:	1d11052f 	cfldr32ne	mvfx0, [r1, #-188]	; 0xffffff44
      t8 = *pS++;
    2220:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
      *pD++ = t1;
    2224:	052f0603 	streq	r0, [pc, #-1539]!	; 1c29 <ResetISR+0x11>
      *pD++ = t2;
    2228:	02010608 	andeq	r0, r1, #8, 12	; 0x800000
      *pD++ = t3;
    222c:	01010003 	tsteq	r1, r3
      *pD++ = t5;
    2230:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
      *pD++ = t7;
    2234:	00000002 	andeq	r0, r0, r2
   } while (--nIterations);
    2238:	04cd0300 	strbeq	r0, [sp], #768	; 0x300
    223c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
      *pD++ = t8;
    2240:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
   } while (--nIterations);
    2244:	02024b02 	andeq	r4, r2, #2048	; 0x800
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2248:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
   *pD++ = t2;
    224c:	02050033 	andeq	r0, r5, #51	; 0x33
   *pD++ = t3;
    2250:	00000000 	andeq	r0, r0, r0
   *pD++ = t4;
    2254:	0104d303 	tsteq	r4, r3, lsl #6
   *pD++ = t5;
    2258:	02140205 	andseq	r0, r4, #1342177280	; 0x50000000
    225c:	01010003 	tsteq	r1, r3
	RFCAdi3VcoLdoVoltageMode (true);
    2260:	05003705 	streq	r3, [r0, #-1797]	; 0xfffff8fb
    2264:	00123a02 	andseq	r3, r2, r2, lsl #20
       	RFCRfTrimSet (&rfTrim);
    2268:	04d80300 	ldrbeq	r0, [r8], #768	; 0x300
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    226c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2270:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2274:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    2278:	051f0603 	ldreq	r0, [pc, #-1539]	; 1c7d <get_byte+0x19>
	issue_cmd ((lword)&cmd_srt);
    227c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2280:	03022e0b 	movweq	r2, #11787	; 0x2e0b
	issue_cmd ((lword)&RF_cmdFs);
    2284:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2288:	0205002e 	andeq	r0, r5, #46	; 0x2e
    228c:	0000124e 	andeq	r1, r0, lr, asr #4
    2290:	0104de03 	tsteq	r4, r3, lsl #28
	IntEnable (INT_RFC_CPE_0);
    2294:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	_BIC (dstate, DSTATE_IRST);
    2298:	01052008 	tsteq	r5, r8
    229c:	03053006 	movweq	r3, #20486	; 0x5006
    22a0:	0b051f06 	bleq	149ec0 <__ccfg+0x129f18>
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a4:	03020106 	movweq	r0, #8454	; 0x2106
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	IntEnable (INT_RFC_CPE_0);
    22ac:	0205002b 	andeq	r0, r5, #43	; 0x2b
    22b0:	0000125c 	andeq	r1, r0, ip, asr r2
}
    22b4:	0104e803 	tsteq	r4, r3, lsl #16
	IntEnable (INT_RFC_CPE_0);
    22b8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    22bc:	0510062b 	ldreq	r0, [r0, #-1579]	; 0xfffff9d5
    22c0:	03052205 	movweq	r2, #20997	; 0x5205
    22c4:	31062106 	tstcc	r6, r6, lsl #2
    22c8:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    22cc:	01060c05 	tsteq	r6, r5, lsl #24
    22d0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    22d4:	052f0603 	streq	r0, [pc, #-1539]!	; 1cd9 <cmd_0+0x11>
    22d8:	0e053e02 	cdpeq	14, 0, cr3, cr5, cr2, {0}
    22dc:	01050106 	tsteq	r5, r6, lsl #2
    22e0:	00050221 	andeq	r0, r5, r1, lsr #4
    22e4:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
    22e8:	80020500 	andhi	r0, r2, r0, lsl #10
    22ec:	03000012 	movweq	r0, #18
    22f0:	050104f8 	streq	r0, [r1, #-1272]	; 0xfffffb08
    22f4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    22f8:	2e0e0645 	cfmadd32cs	mvax2, mvfx0, mvfx14, mvfx5
    22fc:	055c0505 	ldrbeq	r0, [ip, #-1285]	; 0xfffffafb
    2300:	19052022 	stmdbne	r5, {r1, r5, sp}
    2304:	0603054a 	streq	r0, [r3], -sl, asr #10
    2308:	4c020521 	cfstr32mi	mvfx0, [r2], {33}	; 0x21
    230c:	01060505 	tsteq	r6, r5, lsl #10
    2310:	40060205 	andmi	r0, r6, r5, lsl #4
    2314:	01060f05 	tsteq	r6, r5, lsl #30
    2318:	4c060205 	sfmmi	f0, 4, [r6], {5}
static void rx_int_enable () {
    231c:	01060505 	tsteq	r6, r5, lsl #10
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2320:	31060205 	tstcc	r6, r5, lsl #4
    2324:	01060505 	tsteq	r6, r5, lsl #10
    2328:	4f060305 	svcmi	0x00060305
    232c:	01060605 	tsteq	r6, r5, lsl #12
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2330:	30060305 	andcc	r0, r6, r5, lsl #6
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2334:	03040559 	movweq	r0, #17753	; 0x4559
    2338:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    233c:	052e7603 	streq	r7, [lr, #-1539]!	; 0xfffff9fd
    2340:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2344:	05350603 	ldreq	r0, [r5, #-1539]!	; 0xfffff9fd
    2348:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    234c:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2350:	01060b05 	tsteq	r6, r5, lsl #22
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2354:	69060305 	stmdbvs	r6, {r0, r2, r8, r9}
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2358:	01060a05 	tsteq	r6, r5, lsl #20
		if (db->status == DATA_ENTRY_FINISHED) {
    235c:	59060305 	stmdbpl	r6, {r0, r2, r8, r9}
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2360:	03060a05 	movweq	r0, #27141	; 0x6a05
    2364:	01050161 	tsteq	r5, r1, ror #2
			nr++;
    2368:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    236c:	7a030602 	bvc	c3b7c <__ccfg+0xa3bd4>
    2370:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2374:	06030501 	streq	r0, [r3], -r1, lsl #10
    2378:	0502752f 	streq	r7, [r2, #-1327]	; 0xfffffad1
				__dp [pl + 1] = __dp [pl] - 128;
    237c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				pl = __dp [1] + 2;
    2380:	0205001a 	andeq	r0, r5, #26
				__dp [pl + 1] = __dp [pl] - 128;
    2384:	0000131c 	andeq	r1, r0, ip, lsl r3
    2388:	0105ef03 	tsteq	r5, r3, lsl #30
				__dp [pl] = 0;
    238c:	03170205 	tsteq	r7, #1342177280	; 0x50000000
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2390:	15050113 	strne	r0, [r5, #-275]	; 0xfffffeed
    2394:	1a050106 	bne	1427b4 <__ccfg+0x12280c>
    2398:	05206803 	streq	r6, [r0, #-2051]!	; 0xfffff7fd
			db->status = DATA_ENTRY_PENDING;
    239c:	20180315 	andscs	r0, r8, r5, lsl r3
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23a0:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a4:	03052005 	movweq	r2, #20485	; 0x5005
				diag ("BAD RX");
    23a8:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    23ac:	060d0552 			; <UNDEFINED> instruction: 0x060d0552
	if (nr) {
    23b0:	06020501 	streq	r0, [r2], -r1, lsl #10
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b4:	0617053e 			; <UNDEFINED> instruction: 0x0617053e
}
    23b8:	2b1d0515 	blcs	743814 <__ccfg+0x72386c>
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23bc:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
    23c0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    23c4:	05140617 	ldreq	r0, [r4, #-1559]	; 0xfffff9e9
}
    23c8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    23cc:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    23d0:	01052e0d 	tsteq	r5, sp, lsl #28
    23d4:	022e2c03 	eoreq	r2, lr, #768	; 0x300
    23d8:	0101000d 	tsteq	r1, sp
    23dc:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    23e0:	00136c02 	andseq	r6, r3, r2, lsl #24
    23e4:	06fb0300 	ldrbteq	r0, [fp], r0, lsl #6
    23e8:	03020501 	movweq	r0, #9473	; 0x2501
thread (cc1350_driver)
    23ec:	1c05010c 	stfnes	f0, [r5], {12}
    23f0:	01740306 	cmneq	r4, r6, lsl #6
    23f4:	0c030505 	cfstr32eq	mvfx0, [r3], {5}
    23f8:	06020520 	streq	r0, [r2], -r0, lsr #10
    23fc:	06070525 	streq	r0, [r7], -r5, lsr #10
		if (dstate & DSTATE_IRST) {
    2400:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    2404:	2f060305 	svccs	0x00060305
    2408:	0611054c 	ldreq	r0, [r1], -ip, asr #10
			rf_off ();
    240c:	1c0f0516 	cfstr32ne	mvfx0, [pc], {22}
			_BIC (dstate,
    2410:	05321105 	ldreq	r1, [r2, #-261]!	; 0xfffffefb
    2414:	02051c0f 	andeq	r1, r5, #3840	; 0xf00
		if (dstate & DSTATE_RXAC) {
    2418:	11053206 	tstne	r5, r6, lsl #4
    241c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
			if ((dstate & DSTATE_RXON) == 0)
    2420:	05303006 	ldreq	r3, [r0, #-6]!
				rx_de ();
    2424:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
		if (paylen == 0) {
    2428:	03052005 	movweq	r2, #20485	; 0x5005
    242c:	052f2f06 	streq	r2, [pc, #-3846]!	; 152e <diag+0x36>
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2430:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2434:	08024201 	stmdaeq	r2, {r0, r9, lr}
    2438:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    243c:	02050017 	andeq	r0, r5, #23
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2440:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
    2444:	0103d803 	tsteq	r3, r3, lsl #16
    2448:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    244c:	03061705 	movweq	r1, #26373	; 0x6705
    2450:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    2454:	06030526 	streq	r0, [r3], -r6, lsr #10
    2458:	06090521 	streq	r0, [r9], -r1, lsr #10
    245c:	20070501 	andcs	r0, r7, r1, lsl #10
		} else if (dstate & DSTATE_RXON) {
    2460:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
	if (dstate & DSTATE_RFON)
    2464:	06040513 			; <UNDEFINED> instruction: 0x06040513
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2468:	21020511 	tstcs	r2, r1, lsl r5
		re->status = DATA_ENTRY_PENDING;
    246c:	0f032e06 	svceq	0x00032e06
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2470:	03030520 	movweq	r0, #13600	; 0x3520
	issue_cmd ((lword)&RF_cmdPropRx);
    2474:	06054a72 			; <UNDEFINED> instruction: 0x06054a72
	_BIS (dstate, DSTATE_RXAC);
    2478:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    247c:	07053e06 	streq	r3, [r5, -r6, lsl #28]
    2480:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2484:	0b052106 	bleq	14a8a4 <__ccfg+0x12a8fc>
	if (dstate & DSTATE_RXAC)
    2488:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    248c:	2f3d2306 	svccs	0x003d2306
				if (statid != 0xffff)
    2490:	01060a05 	tsteq	r6, r5, lsl #20
    2494:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2498:	2a3d0605 	bcs	f43cb4 <__ccfg+0xf23d0c>
				RF_cmdPropTx.pktLen = (byte) paylen;
    249c:	01060d05 	tsteq	r6, r5, lsl #26
		if (paylen == 0) {
    24a0:	0a030105 	beq	c28bc <__ccfg+0xa2914>
			wait (qevent, DR_LOOP);
    24a4:	00070258 	andeq	r0, r7, r8, asr r2
    24a8:	1c050101 	stfnes	f0, [r5], {1}
			if (dstate & DSTATE_RXAC) {
    24ac:	00020500 	andeq	r0, r2, r0, lsl #10
    24b0:	03000000 	movweq	r0, #0
				rx_int_enable ();
    24b4:	050103f4 	streq	r0, [r1, #-1012]	; 0xfffffc0c
			release;
    24b8:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
			} else if (dstate & DSTATE_RFON) {
    24bc:	1c051313 	stcne	3, cr1, [r5], {19}
				delay (offdelay, DR_GOOF);
    24c0:	01770306 	cmneq	r7, r6, lsl #6
    24c4:	05360405 	ldreq	r0, [r6, #-1029]!	; 0xfffffbfb
    24c8:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
		if (bckf_timer) {
    24cc:	031c0522 	tsteq	ip, #142606336	; 0x8800000
			wait (qevent, DR_LOOP);
    24d0:	0a052077 	beq	14a6b4 <__ccfg+0x12a70c>
    24d4:	05201003 	streq	r1, [r0, #-3]!
    24d8:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
			delay (bckf_timer, DR_LOOP);
    24dc:	20061205 	andcs	r1, r6, r5, lsl #4
    24e0:	01060205 	tsteq	r6, r5, lsl #4
			if (dstate & DSTATE_RXAC)
    24e4:	20110306 	andscs	r0, r1, r6, lsl #6
    24e8:	01060505 	tsteq	r6, r5, lsl #10
	if (dstate & DSTATE_RFON)
    24ec:	21060305 	tstcs	r6, r5, lsl #6
    24f0:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
		rx_de ();
    24f4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		RF_cmdPropTx . status = 0;
    24f8:	13590604 	cmpne	r9, #4, 12	; 0x400000
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24fc:	01060705 	tsteq	r6, r5, lsl #14
    2500:	21060505 	tstcs	r6, r5, lsl #10
    2504:	01060b05 	tsteq	r6, r5, lsl #22
		issue_cmd ((lword)&cmd_cs);
    2508:	31060405 	tstcc	r6, r5, lsl #8
		if (dstate & DSTATE_IRST)
    250c:	01060705 	tsteq	r6, r5, lsl #14
    2510:	052f0905 	streq	r0, [pc, #-2309]!	; 1c13 <NmiSR+0x1>
    2514:	2f3d0604 	svccs	0x003d0604
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2518:	4505052f 	strmi	r0, [r5, #-1327]	; 0xfffffad1
    251c:	01060d05 	tsteq	r6, r5, lsl #26
			delay (1, DR_XMIT);
    2520:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2524:	0007023c 	andeq	r0, r7, ip, lsr r2
    2528:	20050101 	andcs	r0, r5, r1, lsl #2
    252c:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2530:	03000014 	movweq	r0, #20
    2534:	050107a2 	streq	r0, [r1, #-1954]	; 0xfffff85e
				RF_cmdPropTx . status = 0;
    2538:	14161a02 	ldrne	r1, [r6], #-2562	; 0xfffff5fe
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    253c:	01060505 	tsteq	r6, r5, lsl #10
				issue_cmd ((lword)&RF_cmdPropTx);
    2540:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
				proceed (DR_XMIT);
    2544:	0f060905 	svceq	0x00060905
    2548:	70032005 	andvc	r2, r3, r5
			txtries++;
    254c:	030d052e 	movweq	r0, #54574	; 0xd52e
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2550:	1a052023 	bne	14a5e4 <__ccfg+0x12a63c>
    2554:	05207003 	streq	r7, [r0, #-3]!
    2558:	2e10030d 	cdpcs	3, 1, cr0, cr0, cr13, {0}
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    255c:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
		goto DR_LOOP__;
    2560:	206d0309 	rsbcs	r0, sp, r9, lsl #6
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2564:	03060205 	movweq	r0, #25093	; 0x6205
		paylen = 0;
    2568:	05132e0f 	ldreq	r2, [r3, #-3599]	; 0xfffff1f1
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    256c:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
		txtries = 0;
    2570:	03060106 	movweq	r0, #24838	; 0x6106
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2574:	03052009 	movweq	r2, #20489	; 0x5009
    2578:	05011903 	streq	r1, [r1, #-2307]	; 0xfffff6fd
    257c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2580:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    2584:	1b052f06 	blne	14e1a4 <__ccfg+0x12e1fc>
		    tcvphy_top (physid) == NULL)
    2588:	03050106 	movweq	r0, #20742	; 0x5106
    258c:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2590:	01061205 	tsteq	r6, r5, lsl #4
    2594:	40060205 	andmi	r0, r6, r5, lsl #4
			rf_off ();
    2598:	01060905 	tsteq	r6, r5, lsl #18
endthread
    259c:	03060305 	movweq	r0, #25349	; 0x6305
    25a0:	0605204f 	streq	r2, [r5], -pc, asr #32
    25a4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    25a8:	03053d06 	movweq	r3, #23814	; 0x5d06
    25ac:	0606054c 	streq	r0, [r6], -ip, asr #10
    25b0:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    25b4:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
    25b8:	05130609 	ldreq	r0, [r3, #-1545]	; 0xfffff9f7
    25bc:	05440602 	strbeq	r0, [r4, #-1538]	; 0xfffff9fe
    25c0:	05221403 	streq	r1, [r2, #-1027]!	; 0xfffffbfd
    25c4:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    25c8:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    25cc:	13053006 	movwne	r3, #20486	; 0x5006
    25d0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    25d4:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    25d8:	07050106 	streq	r0, [r5, -r6, lsl #2]
void RFCCPE0IntHandler (void) {
    25dc:	06040520 	streq	r0, [r4], -r0, lsr #10
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25e0:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
		_BIS (dstate, DSTATE_IRST);
    25e4:	20100501 	andscs	r0, r0, r1, lsl #10
    25e8:	30060405 	andcc	r0, r6, r5, lsl #8
    25ec:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25f0:	1a051503 	bne	147a04 <__ccfg+0x127a5c>
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f4:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    25f8:	1e1a0530 	cfmvr64hne	r0, mvdx10
	p_trigger (drvprcs, qevent);
    25fc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2600:	01061505 	tsteq	r6, r5, lsl #10
    2604:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2608:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    260c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2610:	06052512 			; <UNDEFINED> instruction: 0x06052512
    2614:	25120529 	ldrcs	r0, [r2, #-1321]	; 0xfffffad7
    2618:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    261c:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    2620:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2624:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
	RISE_N_SHINE;
    2628:	1b030601 	blne	c3e34 <__ccfg+0xa3e8c>
    262c:	000e0201 	andeq	r0, lr, r1, lsl #4
    2630:	2c050101 	stfcss	f0, [r5], {1}
}
    2634:	ac020500 	cfstr32ge	mvfx0, [r2], {-0}
    2638:	03000014 	movweq	r0, #20
    263c:	050102ab 	streq	r0, [r1, #-683]	; 0xfffffd55
    2640:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2644:	200e062c 	andcs	r0, lr, ip, lsr #12
    2648:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
void phys_cc1350 (int phy, int mbs) {
    264c:	19051c2c 	stmdbne	r5, {r2, r3, r5, sl, fp, ip}
	if (rbuffl != 0)
    2650:	3c050524 	cfstr32cc	mvfx0, [r5], {36}	; 0x24
    2654:	23060205 	movwcs	r0, #25093	; 0x6205
		syserror (ETOOMANY, "cc13");
    2658:	03060a05 	movweq	r0, #27141	; 0x6a05
		syserror (EREQPAR, "cc13 mb");
    265c:	0c05010b 	stfeqs	f0, [r5], {11}
	if (mbs == 0)
    2660:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2664:	0323260a 			; <UNDEFINED> instruction: 0x0323260a
		syserror (EREQPAR, "cc13 mb");
    2668:	02052076 	andeq	r2, r5, #118	; 0x76
    266c:	05182f06 	ldreq	r2, [r8, #-3846]	; 0xfffff0fa
	i = 0;
    2670:	05131403 	ldreq	r1, [r3, #-1027]	; 0xfffffbfd
	rbuffl = (byte) mbs;
    2674:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
		db->config.type = 0;	// General (data in structure)
    2678:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	rbuffl = (byte) mbs;
    267c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2680:	200f0301 	andcs	r0, pc, r1, lsl #6
    2684:	03060b05 	movweq	r0, #27397	; 0x6b05
		if (db == NULL)
    2688:	0c052073 	stceq	0, cr2, [r5], {115}	; 0x73
			syserror (EMALLOC, "cc13");
    268c:	04052006 	streq	r2, [r5], #-6
    2690:	052f0620 	streq	r0, [pc, #-1568]!	; 2078 <option+0x16c>
    2694:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
		db->status = DATA_ENTRY_PENDING;
    2698:	0b030602 	bleq	c3ea8 <__ccfg+0xa3f00>
		if (i)
    269c:	06090520 	streq	r0, [r9], -r0, lsr #10
			da->pNextEntry = (byte*) db;
    26a0:	00040201 	andeq	r0, r4, r1, lsl #4
		db->length = rbuffl + 2;
    26a4:	20050101 	andcs	r0, r5, r1, lsl #2
    26a8:	e0020500 	and	r0, r2, r0, lsl #10
		db->config.type = 0;	// General (data in structure)
    26ac:	03000014 	movweq	r0, #20
		db->length = rbuffl + 2;
    26b0:	05010881 	streq	r0, [r1, #-2177]	; 0xfffff77f
	db->pNextEntry = (byte*) re;
    26b4:	01090302 	tsteq	r9, r2, lsl #6
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b8:	01061505 	tsteq	r6, r5, lsl #10
    26bc:	77032005 	strvc	r2, [r3, -r5]
	if (rbuffs == NULL)
    26c0:	03150520 	tsteq	r5, #32, 10	; 0x8000000
	rbuffs->pCurrEntry = (byte*) re;
    26c4:	02052009 	andeq	r2, r5, #9
	rbuffs->pLastEntry = NULL;
    26c8:	1d050523 	cfstr32ne	mvfx0, [r5, #-140]	; 0xffffff74
    26cc:	21060305 	tstcs	r6, r5, lsl #6
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d0:	01061a05 	tsteq	r6, r5, lsl #20
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d4:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    26d8:	01000402 	tsteq	r0, r2, lsl #8
    26dc:	00210501 	eoreq	r0, r1, r1, lsl #10
	rbuffl -= 2;
    26e0:	00000205 	andeq	r0, r0, r5, lsl #4
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e4:	94030000 	strls	r0, [r3], #-0
	rbuffl -= 2;
    26e8:	02050108 	andeq	r0, r5, #8, 2
	physid = phy;
    26ec:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f0:	77030621 	strvc	r0, [r3, -r1, lsr #12]
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f4:	03050501 	movweq	r0, #21761	; 0x5501
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	03053c09 	movweq	r3, #23561	; 0x5c09
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    2700:	0a050106 	beq	142b20 <__ccfg+0x122b78>
	utimer_add (&bckf_timer);
    2704:	2008052e 	andcs	r0, r8, lr, lsr #10
	drvprcs = runthread (cc1350_driver);
    2708:	05221205 	streq	r1, [r2, #-517]!	; 0xfffffdfb
    270c:	03051e08 	movweq	r1, #24072	; 0x5e08
    2710:	02054c06 	andeq	r4, r5, #1536	; 0x600
	if (drvprcs == 0)
    2714:	06090514 			; <UNDEFINED> instruction: 0x06090514
		syserror (ERESOURCE, "cc13");
    2718:	5a010501 	bpl	43b24 <__ccfg+0x23b7c>
    271c:	01000602 	tsteq	r0, r2, lsl #12
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2720:	00200501 	eoreq	r0, r0, r1, lsl #10
    2724:	00000205 	andeq	r0, r0, r5, lsl #4
    2728:	a7030000 	strge	r0, [r3, -r0]
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    272c:	02050108 	andeq	r0, r5, #8, 2
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2730:	13010903 	movwne	r0, #6403	; 0x1903
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	06200514 			; <UNDEFINED> instruction: 0x06200514
    2738:	05017403 	streq	r7, [r1, #-1027]	; 0xfffffbfd
    273c:	200c031d 	andcs	r0, ip, sp, lsl r3
    2740:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2744:	2f05200b 	svccs	0x0005200b
    2748:	02052006 	andeq	r2, r5, #6
    274c:	24060106 	strcs	r0, [r6], #-262	; 0xfffffefa
    2750:	2e060505 	cfsh32cs	mvfx0, mvfx6, #5
    2754:	21060305 	tstcs	r6, r5, lsl #6
	plugch ();
    2758:	01060705 	tsteq	r6, r5, lsl #14
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	4c060205 	sfmmi	f0, 4, [r6], {5}
    2760:	01060905 	tsteq	r6, r5, lsl #18
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2764:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2768:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    276c:	0623052e 	strteq	r0, [r3], -lr, lsr #10
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2770:	0606052d 	streq	r0, [r6], -sp, lsr #10
}
    2774:	060e054a 	streq	r0, [lr], -sl, asr #10
    2778:	00040201 	andeq	r0, r4, r1, lsl #4
    277c:	23050101 	movwcs	r0, #20737	; 0x5101
    2780:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    2784:	03000014 	movweq	r0, #20
    2788:	05010981 	streq	r0, [r1, #-2433]	; 0xfffff67f
    278c:	13134102 	tstne	r3, #-2147483648	; 0x80000000
    2790:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    2794:	75030623 	strvc	r0, [r3, #-1571]	; 0xfffff9dd
    2798:	03020501 	movweq	r0, #9473	; 0x2501
    279c:	061f3c0c 	ldreq	r3, [pc], -ip, lsl #24
    27a0:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    27a4:	28030608 	stmdacs	r3, {r3, r9, sl}
    27a8:	03020520 	movweq	r0, #9504	; 0x2520
    27ac:	1c052058 	stcne	0, cr2, [r5], {88}	; 0x58
    27b0:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    27b4:	2e5d0302 	cdpcs	3, 5, cr0, cr13, cr2, {0}
    27b8:	05142e06 	ldreq	r2, [r4, #-3590]	; 0xfffff1fa
    27bc:	09050108 	stmdbeq	r5, {r3, r8}
    27c0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    27c4:	06020520 	streq	r0, [r2], -r0, lsr #10
    27c8:	2000c703 	andcs	ip, r0, r3, lsl #14
    27cc:	02043d3d 	andeq	r3, r4, #3904	; 0xf40
    27d0:	03060d05 	movweq	r0, #27909	; 0x6d05
    27d4:	04017bcf 	streq	r7, [r1], #-3023	; 0xfffff431
    27d8:	060f0501 	streq	r0, [pc], -r1, lsl #10
    27dc:	2004b103 	andcs	fp, r4, r3, lsl #2
    27e0:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
    27e4:	03240502 			; <UNDEFINED> instruction: 0x03240502
    27e8:	05017bca 	streq	r7, [r1, #-3018]	; 0xfffff436
    27ec:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
    27f0:	01040106 	tsteq	r4, r6, lsl #2
    27f4:	b1030205 	tstlt	r3, r5, lsl #4
    27f8:	2f062004 	svccs	0x00062004
    27fc:	05580101 	ldrbeq	r0, [r8, #-257]	; 0xfffffeff
    2800:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2804:	b6030603 	strlt	r0, [r3], -r3, lsl #12
    2808:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    280c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2810:	05134b06 	ldreq	r4, [r3, #-2822]	; 0xfffff4fa
    2814:	05200607 	streq	r0, [r0, #-1543]!	; 0xfffff9f9
    2818:	134b0605 	movtne	r0, #46597	; 0xb605
    281c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    2820:	0c052d01 	stceq	13, cr2, [r5], {1}
    2824:	03080528 	movweq	r0, #34088	; 0x8528
    2828:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
    282c:	05153206 	ldreq	r3, [r5, #-518]	; 0xfffffdfa
    2830:	050f0608 	streq	r0, [pc, #-1544]	; 2230 <rf_on.part.0+0x94>
    2834:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    2838:	74310305 	ldrtvc	r0, [r1], #-773	; 0xfffffcfb
    283c:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    2840:	054a4e03 	strbeq	r4, [sl, #-3587]	; 0xfffff1fd
    2844:	0605411d 			; <UNDEFINED> instruction: 0x0605411d
    2848:	08052d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, sp}
    284c:	06050106 	streq	r0, [r5], -r6, lsl #2
    2850:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    2854:	0511060b 	ldreq	r0, [r1, #-1547]	; 0xfffff9f5
    2858:	06053c18 			; <UNDEFINED> instruction: 0x06053c18
    285c:	060b052f 	streq	r0, [fp], -pc, lsr #10
strand (__outserial, const char*)
    2860:	03040546 	movweq	r0, #17734	; 0x4546
    2864:	08052e31 	stmdaeq	r5, {r0, r4, r5, r9, sl, fp, sp}
    2868:	6a030106 	bvs	c2c88 <__ccfg+0xa2ce0>
    286c:	06050520 	streq	r0, [r5], -r0, lsr #10
endstrand
    2870:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    2874:	01061505 	tsteq	r6, r5, lsl #10
	ptr = data;
    2878:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
    287c:	06052e08 	streq	r2, [r5], -r8, lsl #28
	if (*ptr)
    2880:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
		len = strlen (ptr);
    2884:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2888:	05210607 	streq	r0, [r1, #-1543]!	; 0xfffff9f9
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    288c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2890:	05590606 	ldrbeq	r0, [r9, #-1542]	; 0xfffff9fa
    2894:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2898:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    289c:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
	len -= quant;
    28a0:	05590605 	ldrbeq	r0, [r9, #-1541]	; 0xfffff9fb
    28a4:	16051406 	strne	r1, [r5], -r6, lsl #8
    28a8:	08050106 	stmdaeq	r5, {r1, r2, r8}
	if (len == 0) {
    28ac:	0606052e 	streq	r0, [r6], -lr, lsr #10
		ufree (data);
    28b0:	06090521 	streq	r0, [r9], -r1, lsr #10
		finish;
    28b4:	200c0501 	andcs	r0, ip, r1, lsl #10
    28b8:	2f060605 	svccs	0x00060605
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28bc:	01060805 	tsteq	r6, r5, lsl #16
    28c0:	2a060b05 	bcs	1854dc <__ccfg+0x165534>
    28c4:	14060805 	strne	r0, [r6], #-2053	; 0xfffff7fb
    28c8:	051d1c05 	ldreq	r1, [sp, #-3077]	; 0xfffff3fb
    28cc:	05350605 	ldreq	r0, [r5, #-1541]!	; 0xfffff9fb
strand (__inserial, address)
    28d0:	05591306 	ldrbeq	r1, [r9, #-774]	; 0xfffffcfa
    28d4:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    28d8:	0a051f08 	beq	14a500 <__ccfg+0x12a558>
    28dc:	0606052d 	streq	r0, [r6], -sp, lsr #10
    28e0:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
	if (__inpline != NULL)
    28e4:	06050106 	streq	r0, [r5], -r6, lsl #2
    28e8:	16052106 	strne	r2, [r5], -r6, lsl #2
		finish;
    28ec:	08050106 	stmdaeq	r5, {r1, r2, r8}
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28f0:	0b05222c 	bleq	14b1a8 <__ccfg+0x12b200>
    28f4:	06051b06 	streq	r1, [r5], -r6, lsl #22
    28f8:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    28fc:	20090306 	andcs	r0, r9, r6, lsl #6
		umwait (IM_INIT);
    2900:	01060805 	tsteq	r6, r5, lsl #16
		release;
    2904:	2f060605 	svccs	0x00060605
	savedata (data);
    2908:	03061c05 	movweq	r1, #27653	; 0x6c05
	len = MAX_LINE_LENGTH;
    290c:	0a05016e 	beq	142ecc <__ccfg+0x122f24>
	io (IM_READ, __cport, READ, ptr, 1);
    2910:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
    2914:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    2918:	03060520 	movweq	r0, #25888	; 0x6520
    291c:	052f2017 	streq	r2, [pc, #-23]!	; 290d <__inserial+0x3d>
	if (ptr == (char*) data) { // new line
    2920:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2924:	051e060b 	ldreq	r0, [lr, #-1547]	; 0xfffff9f5
		if (*ptr == '\0') { // bin cmd
    2928:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
			proceed (IM_BIN);
    292c:	0405200b 	streq	r2, [r5], #-11
    2930:	3c0c0306 	stccc	3, cr0, [ip], {6}
		if (*ptr < 0x20)
    2934:	01000b02 	tsteq	r0, r2, lsl #22
    2938:	000f0501 	andeq	r0, pc, r1, lsl #10
			proceed (IM_READ);
    293c:	16340205 	ldrtne	r0, [r4], -r5, lsl #4
    2940:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
	if (*ptr == '\n' || *ptr == '\r') {
    2944:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    2948:	06250513 			; <UNDEFINED> instruction: 0x06250513
    294c:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
		*ptr = '\0';
    2950:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
		__inpline = (char*)data;
    2954:	25052018 	strcs	r2, [r5, #-24]	; 0xffffffe8
		finish;
    2958:	2e0c0520 	cfsh32cs	mvfx0, mvfx12, #16
	if (len) {
    295c:	21060205 	tstcs	r6, r5, lsl #4
		ptr++;
    2960:	01051406 	tsteq	r5, r6, lsl #8
    2964:	00080231 	andeq	r0, r8, r1, lsr r2
		len--;
    2968:	0cb70101 	ldfeqs	f0, [r7], #4
	proceed (IM_READ);
    296c:	00030000 	andeq	r0, r3, r0
	io (IM_BIN, __cport, READ, ptr, 1);
    2970:	000001a1 	andeq	r0, r0, r1, lsr #3
    2974:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2978:	0101000d 	tsteq	r1, sp
    297c:	00000101 	andeq	r0, r0, r1, lsl #2
    2980:	00000100 	andeq	r0, r0, r0, lsl #2
	len -= 2;
    2984:	6f682f01 	svcvs	0x00682f01
	if (len > *ptr + 1) // 1 for 0x04
    2988:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 27dc <tcv_clo_null+0x1c>
    298c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
		len = *ptr + 1;
    2990:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2994:	6f746b73 	svcvs	0x00746b73
	ptr++;
    2998:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	quant = io (IM_BINL, __cport, READ, ptr, len);
    299c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    29a0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    29a4:	2f534f43 	svccs	0x00534f43
    29a8:	4f636950 	svcmi	0x00636950
    29ac:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    29b0:	2f736269 	svccs	0x00736269
	len -= quant;
    29b4:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
		__inpline = (char*)data;
    29b8:	752f0049 	strvc	r0, [pc, #-73]!	; 2977 <__inserial+0xa7>
		finish;
    29bc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 27f8 <tcv_rcv_null+0x14>
	ptr += quant;
    29c0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    29c4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
endstrand
    29c8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    29cc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
	proceed (IM_BINL);
    29d0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
endstrand
    29d4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    29d8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    29dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    29e0:	2f006564 	svccs	0x00006564
    29e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    29e8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
		if (res && (d < n))
    29ec:	2f6e6974 	svccs	0x006e6974
    29f0:	6b736544 	blvs	1cdbf08 <__ccfg+0x1cbbf60>
    29f4:	2f706f74 	svccs	0x00706f74
    29f8:	4f534c4f 	svcmi	0x00534c4f
			res [d] = (char) c;
    29fc:	2f54454e 	svccs	0x0054454e
		d++;
    2a00:	4f434950 	svcmi	0x00434950
    2a04:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2a08:	2f534f63 	svccs	0x00534f63
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a0c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2a10:	2f005858 	svccs	0x00005858
    2a14:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
				enci (10000);
    2a18:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a1c:	2f6e6974 	svccs	0x006e6974
    2a20:	6b736544 	blvs	1cdbf38 <__ccfg+0x1cbbf90>
	d = 0;
    2a24:	2f706f74 	svccs	0x00706f74
		c = *fm++;
    2a28:	4f534c4f 	svcmi	0x00534c4f
		if (c == '\\') {
    2a2c:	2f54454e 	svccs	0x0054454e
			if ((c = *fm++) == '\0') {
    2a30:	4f434950 	svcmi	0x00434950
    2a34:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				outc ('\\');
    2a38:	00534f63 	subseq	r4, r3, r3, ror #30
			if ((c = *fm++) == '\0') {
    2a3c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2988 <__inserial+0xb8>
				outc ('\\');
    2a40:	616d2f65 	cmnvs	sp, r5, ror #30
    2a44:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			outc (c);
    2a48:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a4c:	706f746b 	rsbvc	r7, pc, fp, ror #8
			if (c == '\0')
    2a50:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a54:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			outc (c);
    2a58:	4349502f 	movtmi	r5, #36911	; 0x902f
				outc (val);
    2a5c:	502f534f 	eorpl	r5, pc, pc, asr #6
				val = (word) va_arg (ap, aword);
    2a60:	534f6369 	movtpl	r6, #62313	; 0xf369
		if (c == '%') {
    2a64:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    2a68:	006c656e 	rsbeq	r6, ip, lr, ror #10
			c = *fm++;
    2a6c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			switch (c) {
    2a70:	0100632e 	tsteq	r0, lr, lsr #6
    2a74:	74730000 	ldrbtvc	r0, [r3], #-0
    2a78:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    2a7c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2a80:	74730000 	ldrbtvc	r0, [r3], #-0
    2a84:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    2a88:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2a8c:	72610000 	rsbvc	r0, r1, #0
				outc ('%');
    2a90:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    2a94:	00000300 	andeq	r0, r0, r0, lsl #6
				outc (c);
    2a98:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2a9c:	0300682e 	movweq	r6, #2094	; 0x82e
    2aa0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
				if (c == '\0')
    2aa4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
				return d;
    2aa8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
}
    2aac:	00000300 	andeq	r0, r0, r0, lsl #6
    2ab0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
			switch (c) {
    2ab4:	5f736e6f 	svcpl	0x00736e6f
    2ab8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    2abc:	00030068 	andeq	r0, r3, r8, rrx
				for (i = 12; ; i -= 4) {
    2ac0:	73797300 	cmnvc	r9, #0, 6
				val = (word) va_arg (ap, aword);
    2ac4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
						[ (val >> i) & 0xf ]);
    2ac8:	00000400 	andeq	r0, r0, r0, lsl #8
    2acc:	5f766374 	svcpl	0x00766374
    2ad0:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
					outc (__pi_hex_enc_table
    2ad4:	0100682e 	tsteq	r0, lr, lsr #16
    2ad8:	656b0000 	strbvs	r0, [fp, #-0]!
					if (i == 0)
    2adc:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    2ae0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
				for (i = 12; ; i -= 4) {
    2ae4:	63740000 	cmnvs	r4, #0
				val = (word) va_arg (ap, aword);
    2ae8:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
				if (c == 'd' && (val & 0x8000) != 0) {
    2aec:	00682e73 	rsbeq	r2, r8, r3, ror lr
				val = (word) va_arg (ap, aword);
    2af0:	74000001 	strvc	r0, [r0], #-1
				if (c == 'd' && (val & 0x8000) != 0) {
    2af4:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
    2af8:	5f65646f 	svcpl	0x0065646f
					outc ('-');
    2afc:	61746164 	cmnvs	r4, r4, ror #2
    2b00:	0100682e 	tsteq	r0, lr, lsr #16
					val = (~val) + 1;
    2b04:	623c0000 	eorsvs	r0, ip, #0
    2b08:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
				for (i = 12; ; i -= 4) {
    2b0c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
				enci (10000);
    2b10:	00000000 	andeq	r0, r0, r0
    2b14:	00310500 	eorseq	r0, r1, r0, lsl #10
    2b18:	16580205 	ldrbne	r0, [r8], -r5, lsl #4
    2b1c:	93030000 	movwls	r0, #12288	; 0x3000
    2b20:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2b24:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    2b28:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
    2b2c:	07052001 	streq	r2, [r5, -r1]
    2b30:	22160526 	andscs	r0, r6, #159383552	; 0x9800000
    2b34:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    2b38:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    2b3c:	0513061a 	ldreq	r0, [r3, #-1562]	; 0xfffff9e6
    2b40:	02051f0e 	andeq	r1, r5, #14, 30	; 0x38
    2b44:	1a052106 	bne	14af64 <__ccfg+0x12afbc>
    2b48:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2b4c:	200c0306 	andcs	r0, ip, r6, lsl #6
    2b50:	16060105 	strne	r0, [r6], -r5, lsl #2
    2b54:	01000102 	tsteq	r0, r2, lsl #2
				if (c == 'd' || c == 'u') {
    2b58:	002e0501 	eoreq	r0, lr, r1, lsl #10
    2b5c:	166e0205 	strbtne	r0, [lr], -r5, lsl #4
					if (c == 'd' &&
    2b60:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
					val = va_arg (ap, lword);
    2b64:	02050100 	andeq	r0, r5, #0, 2
					fm++;
    2b68:	06060516 			; <UNDEFINED> instruction: 0x06060516
					if (c == 'd' &&
    2b6c:	20050501 	andcs	r0, r5, r1, lsl #10
    2b70:	2f060305 	svccs	0x00060305
						outc ('-');
    2b74:	01062905 	tsteq	r6, r5, lsl #18
    2b78:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
						val = (~val) + 1;
    2b7c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
				enci (10000);
    2b80:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
					enci (1000000000UL);
    2b84:	0305201c 	movweq	r2, #20508	; 0x501c
    2b88:	1a052106 	bne	14afa8 <__ccfg+0x12b000>
    2b8c:	01050106 	tsteq	r5, r6, lsl #2
    2b90:	0001024c 	andeq	r0, r1, ip, asr #4
    2b94:	2e050101 	adfcss	f0, f5, f1
    2b98:	88020500 	stmdahi	r2, {r8, sl}
    2b9c:	03000016 	movweq	r0, #22
    2ba0:	05010283 	streq	r0, [r1, #-643]	; 0xfffffd7d
    2ba4:	2e051602 	cfmadd32cs	mvax0, mvfx1, mvfx5, mvfx2
    2ba8:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    2bac:	012f0624 			; <UNDEFINED> instruction: 0x012f0624
    2bb0:	01011301 	tsteq	r1, r1, lsl #6
    2bb4:	06010514 			; <UNDEFINED> instruction: 0x06010514
    2bb8:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    2bbc:	01000202 	tsteq	r0, r2, lsl #4
    2bc0:	003a0501 	eorseq	r0, sl, r1, lsl #10
    2bc4:	16980205 	ldrne	r0, [r8], r5, lsl #4
				} else if (c == 'x') {
    2bc8:	a7030000 	strge	r0, [r3, -r0]
					for (i = 28; ; i -= 4) {
    2bcc:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
					val = va_arg (ap, lword);
    2bd0:	3a052406 	bcc	14bbf0 <__ccfg+0x12bc48>
							[ (val >> i) & 0xf ]);
    2bd4:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    2bd8:	3a050124 	bcc	143070 <__ccfg+0x1230c8>
						outc (__pi_hex_enc_table
    2bdc:	02051c06 	andeq	r1, r5, #1536	; 0x600
    2be0:	4a200624 	bmi	804478 <__ccfg+0x7e44d0>
    2be4:	06050513 			; <UNDEFINED> instruction: 0x06050513
						if (i == 0)
    2be8:	06030501 	streq	r0, [r3], -r1, lsl #10
    2bec:	2f02053d 	svccs	0x0002053d
					for (i = 28; ; i -= 4) {
    2bf0:	01060605 	tsteq	r6, r5, lsl #12
					outc ('%');
    2bf4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2bf8:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    2bfc:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
					outc ('l');
    2c00:	03052114 	movweq	r2, #20756	; 0x5114
    2c04:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
				val = (word) va_arg (ap, aword);
    2c08:	11050106 	tstne	r5, r6, lsl #2
				outc (val);
    2c0c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2c10:	060b0521 	streq	r0, [fp], -r1, lsr #10
				while (*st != '\0') {
    2c14:	06020501 	streq	r0, [r2], -r1, lsl #10
    2c18:	06190528 	ldreq	r0, [r9], -r8, lsr #10
    2c1c:	4b010501 	blmi	44028 <__ccfg+0x24080>
    2c20:	03060305 	movweq	r0, #25349	; 0x6305
					outc (*st);
    2c24:	1405207a 	strne	r2, [r5], #-122	; 0xffffff86
    2c28:	03050106 	movweq	r0, #20742	; 0x5106
					st++;
    2c2c:	17052106 	strne	r2, [r5, -r6, lsl #2]
		c = *fm++;
    2c30:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    2c34:	06030520 	streq	r0, [r3], -r0, lsr #10
    2c38:	06110521 	ldreq	r0, [r1], -r1, lsr #10
char *vform (char *res, const char *fm, va_list aq) {
    2c3c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2c40:	060b0521 	streq	r0, [fp], -r1, lsr #10
	if (res != NULL) {
    2c44:	00050201 	andeq	r0, r5, r1, lsl #4
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c48:	3a050101 	bcc	143054 <__ccfg+0x1230ac>
    2c4c:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    2c50:	03000016 	movweq	r0, #22
}
    2c54:	060101df 			; <UNDEFINED> instruction: 0x060101df
    2c58:	06020520 	streq	r0, [r2], -r0, lsr #10
	fml = strlen (fm) + 17;
    2c5c:	30200903 	eorcc	r0, r0, r3, lsl #18
    2c60:	05840405 	streq	r0, [r4, #1029]	; 0x405
    2c64:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
	if ((res = (char*) umalloc (fml)) == NULL)
    2c68:	014c0604 	cmpeq	ip, r4, lsl #12
    2c6c:	4a065806 	bmi	198c8c <__ccfg+0x178ce4>
    2c70:	03062706 	movweq	r2, #26374	; 0x6706
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c74:	05133c79 	ldreq	r3, [r3, #-3193]	; 0xfffff387
    2c78:	12030601 	andne	r0, r3, #1048576	; 0x100000
    2c7c:	03040520 	movweq	r0, #17696	; 0x4520
    2c80:	2b062e75 	blcs	18e65c <__ccfg+0x16e6b4>
		ufree (res);
    2c84:	01061b05 	tsteq	r6, r5, lsl #22
		goto Again;
    2c88:	4c060405 	cfstrsmi	mvf0, [r6], {5}
	if (buf == NULL || fmt == NULL)
    2c8c:	132e9001 			; <UNDEFINED> instruction: 0x132e9001
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c90:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
	if (buf == NULL || fmt == NULL)
    2c94:	0304051a 	movweq	r0, #17690	; 0x451a
    2c98:	01052e78 	tsteq	r5, r8, ror lr
    2c9c:	000c0236 	andeq	r0, ip, r6, lsr r2
		    	    case 'u': scanu (lword); break;
    2ca0:	31050101 	tstcc	r5, r1, lsl #2
			while (isspace (*buf)) buf++;
    2ca4:	70020500 	andvc	r0, r2, r0, lsl #10
    2ca8:	03000017 	movweq	r0, #23
	while (*fmt != '\0') {
    2cac:	050102ba 	streq	r0, [r1, #-698]	; 0xfffffd46
		if (*fmt++ != '%')
    2cb0:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
		switch (*fmt++) {
    2cb4:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
    2cb8:	03060501 	movweq	r0, #25857	; 0x6501
    2cbc:	04052009 	streq	r2, [r5], #-9
    2cc0:	0602052d 	streq	r0, [r2], -sp, lsr #10
    2cc4:	0605052f 	streq	r0, [r5], -pc, lsr #10
    2cc8:	06030501 	streq	r0, [r3], -r1, lsl #10
    2ccc:	6606012f 	strvs	r0, [r6], -pc, lsr #2
}
    2cd0:	21064a06 	tstcs	r6, r6, lsl #20
		switch (*fmt++) {
    2cd4:	01133b06 	tsteq	r3, r6, lsl #22
    2cd8:	064a6606 	strbeq	r6, [sl], -r6, lsl #12
    2cdc:	05132e2e 	ldreq	r2, [r3, #-3630]	; 0xfffff1d2
    2ce0:	09030601 	stmdbeq	r3, {r0, r9, sl}
			while (isspace (*buf)) buf++;
    2ce4:	0303053c 	movweq	r0, #13628	; 0x353c
    2ce8:	36062e77 			; <UNDEFINED> instruction: 0x36062e77
    2cec:	21060105 	tstcs	r6, r5, lsl #2
    2cf0:	022d0305 	eoreq	r0, sp, #335544320	; 0x14000000
    2cf4:	0101000b 	tsteq	r1, fp
    2cf8:	05004a05 	streq	r4, [r0, #-2565]	; 0xfffff5fb
			if (*buf == '\0')
    2cfc:	0017e002 	andseq	lr, r7, r2
			if (*buf != ',') {
    2d00:	03f50300 	mvnseq	r0, #0, 6
			sap = va_arg (ap, char*);
    2d04:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			nc++;
    2d08:	13141313 	tstne	r4, #1275068416	; 0x4c000000
			if (*buf != ',') {
    2d0c:	03064a05 	movweq	r4, #27141	; 0x6a05
				while (!isspace (*buf) && *buf != ',' &&
    2d10:	053c0179 	ldreq	r0, [ip, #-377]!	; 0xfffffe87
    2d14:	3c0b0305 	stccc	3, cr0, [fp], {5}
    2d18:	75034a05 	strvc	r4, [r3, #-2565]	; 0xfffff5fb
    2d1c:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    2d20:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    2d24:	30050106 	andcc	r0, r5, r6, lsl #2
    2d28:	20250520 	eorcs	r0, r5, r0, lsr #10
			while (isspace (*buf)) buf++;
    2d2c:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
    2d30:	25053c30 	strcs	r3, [r5, #-3120]	; 0xfffff3d0
    2d34:	06040520 	streq	r0, [r4], -r0, lsr #10
    2d38:	0603054b 	streq	r0, [r3], -fp, asr #10
    2d3c:	052e1503 	streq	r1, [lr, #-1283]!	; 0xfffffafd
			if (*buf == ',') buf++;
    2d40:	6e030602 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx2
    2d44:	1713132e 	ldrne	r1, [r3, -lr, lsr #6]
			*sap = '\0';
    2d48:	01061205 	tsteq	r6, r5, lsl #4
			break;
    2d4c:	76060205 	strvc	r0, [r6], -r5, lsl #4
		    case 'd': scani (word); break;
    2d50:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    2d54:	0520060a 	streq	r0, [r0, #-1546]!	; 0xfffff9f6
    2d58:	052f0603 	streq	r0, [pc, #-1539]!	; 275d <phys_cc1350+0x111>
    2d5c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2d60:	22052e06 	andcs	r2, r5, #6, 28	; 0x60
    2d64:	24051f06 	strcs	r1, [r5], #-3846	; 0xfffff0fa
    2d68:	0f050106 	svceq	0x00050106
    2d6c:	02052006 	andeq	r2, r5, #6
    2d70:	0a050106 	beq	143190 <__ccfg+0x1231e8>
    2d74:	03010533 	movweq	r0, #5427	; 0x1533
    2d78:	02052e13 	andeq	r2, r5, #304	; 0x130
    2d7c:	66730306 	ldrbtvs	r0, [r3], -r6, lsl #6
    2d80:	15061a05 	strne	r1, [r6, #-2565]	; 0xfffff5fb
    2d84:	05391305 	ldreq	r1, [r9, #-773]!	; 0xfffffcfb
    2d88:	052f0602 	streq	r0, [pc, #-1538]!	; 278e <phys_cc1350+0x142>
    2d8c:	0514061a 	ldreq	r0, [r4, #-1562]	; 0xfffff9e6
    2d90:	2f061e02 	svccs	0x00061e02
    2d94:	4a011413 	bmi	47de8 <__ccfg+0x27e40>
    2d98:	0605143c 			; <UNDEFINED> instruction: 0x0605143c
    2d9c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2da0:	0602054a 	streq	r0, [r2], -sl, asr #10
    2da4:	06130532 			; <UNDEFINED> instruction: 0x06130532
    2da8:	06020501 	streq	r0, [r2], -r1, lsl #10
    2dac:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2db0:	06020501 	streq	r0, [r2], -r1, lsl #10
    2db4:	15206d03 	strne	r6, [r0, #-3331]!	; 0xfffff2fd
    2db8:	01061305 	tsteq	r6, r5, lsl #6
    2dbc:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
		    case 'u': scanu (word); break;
    2dc0:	01060505 	tsteq	r6, r5, lsl #10
    2dc4:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2dc8:	01001002 	tsteq	r0, r2
    2dcc:	003a0501 	eorseq	r0, sl, r1, lsl #10
    2dd0:	00000205 	andeq	r0, r0, r5, lsl #4
    2dd4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    2dd8:	02050104 	andeq	r0, r5, #4, 2
    2ddc:	01141314 	tsteq	r4, r4, lsl r3
    2de0:	1b063a05 	blne	1915fc <__ccfg+0x171654>
    2de4:	25020520 	strcs	r0, [r2, #-1312]	; 0xfffffae0
    2de8:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2dec:	79030627 	stmdbvc	r3, {r0, r1, r2, r5, r9, sl}
    2df0:	1514143c 	ldrne	r1, [r4, #-1084]	; 0xfffffbc4
    2df4:	4a580601 	bmi	1604600 <__ccfg+0x15e4658>
    2df8:	142e2e06 	strtne	r2, [lr], #-3590	; 0xfffff1fa
    2dfc:	01060605 	tsteq	r6, r5, lsl #12
    2e00:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    2e04:	0305300a 	movweq	r3, #20490	; 0x500a
		    case 'x': scanx (word); break;
    2e08:	05134106 	ldreq	r4, [r3, #-262]	; 0xfffffefa
    2e0c:	0a052b08 	beq	14da34 <__ccfg+0x12da8c>
    2e10:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2e14:	06020520 	streq	r0, [r2], -r0, lsr #10
    2e18:	13053d33 	movwne	r3, #23859	; 0x5d33
    2e1c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2e20:	01053d06 	tsteq	r5, r6, lsl #26
    2e24:	0b021306 	bleq	87a44 <__ccfg+0x67a9c>
    2e28:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2e2c:	02050043 	andeq	r0, r5, #67	; 0x43
    2e30:	000018a0 	andeq	r1, r0, r0, lsr #17
    2e34:	0104c903 	tsteq	r4, r3, lsl #18
    2e38:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2e3c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2e40:	26052f0f 	strcs	r2, [r5], -pc, lsl #30
    2e44:	211d053b 	tstcs	sp, fp, lsr r5
    2e48:	31060205 	tstcc	r6, r5, lsl #4
    2e4c:	01061005 	tsteq	r6, r5
    2e50:	2f060205 	svccs	0x00060205
    2e54:	01060905 	tsteq	r6, r5, lsl #18
    2e58:	052b0a05 	streq	r0, [fp, #-2565]!	; 0xfffff5fb
    2e5c:	04023201 	streq	r3, [r2], #-513	; 0xfffffdff
    2e60:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2e64:	0205003c 	andeq	r0, r5, #60	; 0x3c
    2e68:	00000000 	andeq	r0, r0, r0
    2e6c:	0104d503 	tsteq	r4, r3, lsl #10
    2e70:	13190205 	tstne	r9, #1342177280	; 0x50000000
    2e74:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2e78:	7503063c 	strvc	r0, [r3, #-1596]	; 0xfffff9c4
    2e7c:	02052020 	andeq	r2, r5, #32
			switch (*fmt++) {
    2e80:	20200b03 	eorcs	r0, r0, r3, lsl #22
    2e84:	03064a06 	movweq	r4, #27142	; 0x6a06
    2e88:	03062013 	movweq	r2, #24595	; 0x6013
    2e8c:	13143c6d 	tstne	r4, #27904	; 0x6d00
    2e90:	01060405 	tsteq	r6, r5, lsl #8
    2e94:	21060205 	tstcs	r6, r5, lsl #4
		    	    case 'd': scani (lword); break;
    2e98:	01060505 	tsteq	r6, r5, lsl #10
    2e9c:	30060305 	andcc	r0, r6, r5, lsl #6
    2ea0:	01060605 	tsteq	r6, r5, lsl #12
    2ea4:	4b060405 	blmi	183ec0 <__ccfg+0x163f18>
    2ea8:	3302053d 	movwcc	r0, #9533	; 0x253d
    2eac:	1501013d 	strne	r0, [r1, #-317]	; 0xfffffec3
    2eb0:	04051406 	streq	r1, [r5], #-1030	; 0xfffffbfa
    2eb4:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    2eb8:	4a060130 	bmi	183380 <__ccfg+0x1633d8>
    2ebc:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2ec0:	22053e13 	andcs	r3, r5, #304	; 0x130
    2ec4:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    2ec8:	06020557 			; <UNDEFINED> instruction: 0x06020557
    2ecc:	06010523 	streq	r0, [r1], -r3, lsr #10
    2ed0:	030a0513 	movweq	r0, #42259	; 0xa513
    2ed4:	0b022e70 	bleq	8e89c <__ccfg+0x6e8f4>
    2ed8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2edc:	02050038 	andeq	r0, r5, #56	; 0x38
    2ee0:	00000000 	andeq	r0, r0, r0
    2ee4:	0104fc03 	tsteq	r4, r3, lsl #24	; <UNPREDICTABLE>
    2ee8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2eec:	01141313 	tsteq	r4, r3, lsl r3
    2ef0:	03063805 	movweq	r3, #26629	; 0x6805
		    	    case 'x': scanx (lword); break;
    2ef4:	02052077 	andeq	r2, r5, #119	; 0x77
    2ef8:	20200903 	eorcs	r0, r0, r3, lsl #18
    2efc:	03054a06 	movweq	r4, #23046	; 0x5a06
    2f00:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2f04:	03060205 	movweq	r0, #25093	; 0x6205
    2f08:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    2f0c:	01061a05 	tsteq	r6, r5, lsl #20
    2f10:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2f14:	052f0603 	streq	r0, [pc, #-1539]!	; 2919 <__inserial+0x49>
    2f18:	05131902 	ldreq	r1, [r3, #-2306]	; 0xfffff6fe
    2f1c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2f20:	03052005 	movweq	r2, #20485	; 0x5005
    2f24:	200a0306 	andcs	r0, sl, r6, lsl #6
    2f28:	03060505 	movweq	r0, #25861	; 0x6505
    2f2c:	0a050175 	beq	143508 <__ccfg+0x123560>
    2f30:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    2f34:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    2f38:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    2f3c:	052f0604 	streq	r0, [pc, #-1540]!	; 2940 <__inserial+0x70>
    2f40:	0511062c 	ldreq	r0, [r1, #-1580]	; 0xfffff9d4
    2f44:	2a052106 	bcs	14b364 <__ccfg+0x12b3bc>
    2f48:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    2f4c:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
    2f50:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    2f54:	0305200c 	movweq	r2, #20492	; 0x500c
    2f58:	20052f06 	andcs	r2, r5, r6, lsl #30
    2f5c:	06050106 	streq	r0, [r5], -r6, lsl #2
    2f60:	20200520 	eorcs	r0, r0, r0, lsr #10
		    	    case 'd': scani (lword); break;
    2f64:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2f68:	13330602 	teqne	r3, #2097152	; 0x200000
    2f6c:	01060505 	tsteq	r6, r5, lsl #10
    2f70:	2a060305 	bcs	183b8c <__ccfg+0x163be4>
    2f74:	06050542 	streq	r0, [r5], -r2, asr #10
    2f78:	230a050f 	movwcs	r0, #42255	; 0xa50f
    2f7c:	20061a05 	andcs	r1, r6, r5, lsl #20
		    	    case 'u': scanu (lword); break;
    2f80:	01060305 	tsteq	r6, r5, lsl #6
    2f84:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    2f88:	0604052e 	streq	r0, [r4], -lr, lsr #10
    2f8c:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    2f90:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2f94:	05052007 	streq	r2, [r5, #-7]
    2f98:	2c052f06 	stccs	15, cr2, [r5], {6}
    2f9c:	07051006 	streq	r1, [r5, -r6]
    2fa0:	062a0522 	strteq	r0, [sl], -r2, lsr #10
    2fa4:	000a021e 	andeq	r0, sl, lr, lsl r2
    2fa8:	38050101 	stmdacc	r5, {r0, r8}
    2fac:	00020500 	andeq	r0, r2, r0, lsl #10
    2fb0:	03000000 	movweq	r0, #0
    2fb4:	050105a3 	streq	r0, [r1, #-1443]	; 0xfffffa5d
    2fb8:	13131602 	tstne	r3, #2097152	; 0x200000
    2fbc:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2fc0:	77030638 	smladxvc	r3, r8, r6, r0
    2fc4:	03020520 	movweq	r0, #9504	; 0x2520
		    	    case 'x': scanx (lword); break;
    2fc8:	06202009 	strteq	r2, [r0], -r9
    2fcc:	0603054a 	streq	r0, [r3], -sl, asr #10
			if ((c = *buf++) == '\0')
    2fd0:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    2fd4:	77030602 	strvc	r0, [r3, -r2, lsl #12]
			sap = va_arg (ap, char*);
    2fd8:	0514142e 	ldreq	r1, [r4, #-1070]	; 0xfffffbd2
			nc++;
    2fdc:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
			break;
    2fe0:	03052005 	movweq	r2, #20485	; 0x5005
			while (isspace (*buf)) buf++;
    2fe4:	02052f06 	andeq	r2, r5, #6, 30
    2fe8:	06050519 			; <UNDEFINED> instruction: 0x06050519
    2fec:	201b0501 	andscs	r0, fp, r1, lsl #10
						*sap++ = *buf++;
    2ff0:	6b033805 	blvs	d100c <__ccfg+0xb1064>
    2ff4:	06030520 	streq	r0, [r3], -r0, lsr #10
			while (isspace (*buf)) buf++;
    2ff8:	207cb303 	rsbscs	fp, ip, r3, lsl #6
    2ffc:	01060505 	tsteq	r6, r5, lsl #10
    3000:	21060305 	tstcs	r6, r5, lsl #6
		return 0;
    3004:	01060605 	tsteq	r6, r5, lsl #12
    3008:	31060305 	tstcc	r6, r5, lsl #6
		    case 'x': scanx (word); break;
    300c:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    3010:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
		    	    case 'x': scanx (lword); break;
    3014:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    3018:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    301c:	dc030609 	stcle	6, cr0, [r3], {9}
    3020:	21052003 	tstcs	r5, r3
    3024:	0c050106 	stfeqs	f0, [r5], {6}
    3028:	06030520 	streq	r0, [r3], -r0, lsr #10
    302c:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    3030:	20060501 	andcs	r0, r6, r1, lsl #10
    3034:	05202005 	streq	r2, [r0, #-5]!
    3038:	02052006 	andeq	r2, r5, #6
    303c:	1b053306 	blne	14fc5c <__ccfg+0x12fcb4>
    3040:	03050106 	movweq	r0, #20742	; 0x5106
    3044:	01052b06 	tsteq	r5, r6, lsl #22
    3048:	3c0a0306 	stccc	3, cr0, [sl], {6}
    304c:	21060205 	tstcs	r6, r5, lsl #4
    3050:	01060905 	tsteq	r6, r5, lsl #18
    3054:	20061905 	andcs	r1, r6, r5, lsl #18
    3058:	01060205 	tsteq	r6, r5, lsl #4
    305c:	0a030105 	beq	c3478 <__ccfg+0xa34d0>
    3060:	0603052e 	streq	r0, [r3], -lr, lsr #10
    3064:	052e7703 	streq	r7, [lr, #-1795]!	; 0xfffff8fd
    3068:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    306c:	04052006 	streq	r2, [r5], #-6
    3070:	052f3006 	streq	r3, [pc, #-6]!	; 3072 <NOROM_AONBatMonTemperatureGetDegC+0x2e>
    3074:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3078:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    307c:	2b051b29 	blcs	149d28 <__ccfg+0x129d80>
    3080:	0a020106 	beq	834a0 <__ccfg+0x634f8>
    3084:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3088:	02050016 	andeq	r0, r5, #22
    308c:	000018c4 	andeq	r1, r0, r4, asr #17
    3090:	0105cd03 	tsteq	r5, r3, lsl #26
    3094:	13130205 	tstne	r3, #1342177280	; 0x50000000
    3098:	01141313 	tsteq	r4, r3, lsl r3
    309c:	03061605 	movweq	r1, #26117	; 0x6605
    30a0:	0520207a 	streq	r2, [r0, #-122]!	; 0xffffff86
    30a4:	06204202 	strteq	r4, [r0], -r2, lsl #4
    30a8:	0624064a 	strteq	r0, [r4], -sl, asr #12
    30ac:	01141438 	tsteq	r4, r8, lsr r4
    30b0:	064a5806 	strbeq	r5, [sl], -r6, lsl #16
    30b4:	05162e2e 	ldreq	r2, [r6, #-3630]	; 0xfffff1d2
    30b8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    30bc:	052f0602 	streq	r0, [pc, #-1538]!	; 2ac2 <__pi_vfparse+0xb6>
    30c0:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
    30c4:	02051e0e 	andeq	r1, r5, #14, 28	; 0xe0
    30c8:	0d053006 	stceq	0, cr3, [r5, #-24]	; 0xffffffe8
    30cc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    30d0:	0603052e 	streq	r0, [r3], -lr, lsr #10
    30d4:	06060522 	streq	r0, [r6], -r2, lsr #10
    30d8:	4e0a0501 	cfsh32mi	mvfx0, mvfx10, #1
    30dc:	21030105 	tstcs	r3, r5, lsl #2
    30e0:	06040520 	streq	r0, [r4], -r0, lsr #10
    30e4:	3d2e5c03 	stccc	12, cr5, [lr, #-12]!
    30e8:	05011703 	streq	r1, [r1, #-1795]	; 0xfffff8fd
    30ec:	2e6e0302 	cdpcs	3, 6, cr0, cr14, cr2, {0}
    30f0:	032e3c01 			; <UNDEFINED> instruction: 0x032e3c01
    30f4:	0b05010b 	bleq	143528 <__ccfg+0x123580>
    30f8:	17050106 	strne	r0, [r5, -r6, lsl #2]
    30fc:	200b054a 	andcs	r0, fp, sl, asr #10
    3100:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    3104:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    3108:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    310c:	054e0604 	strbeq	r0, [lr, #-1540]	; 0xfffff9fc
    3110:	10055002 	andne	r5, r5, r2
    3114:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3118:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    311c:	03050106 	movweq	r0, #20742	; 0x5106
    3120:	1a052106 	bne	14b540 <__ccfg+0x12b598>
    3124:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3128:	1b054b06 	blne	155d48 <__ccfg+0x135da0>
    312c:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    3130:	02051f2f 	andeq	r1, r5, #47, 30	; 0xbc
    3134:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    3138:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    313c:	0101000c 	tsteq	r1, ip
    3140:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    3144:	00000002 	andeq	r0, r0, r2
    3148:	06870300 	streq	r0, [r7], r0, lsl #6
    314c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3150:	0e064405 	cdpeq	4, 0, cr4, cr6, cr5, {0}
    3154:	06020520 	streq	r0, [r2], -r0, lsr #10
    3158:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    315c:	03440501 	movteq	r0, #17665	; 0x4501
    3160:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    3164:	4a090306 	bmi	243d84 <__ccfg+0x223ddc>
    3168:	01060505 	tsteq	r6, r5, lsl #10
    316c:	2f060305 	svccs	0x00060305
    3170:	06160567 	ldreq	r0, [r6], -r7, ror #10
    3174:	06030501 	streq	r0, [r3], -r1, lsl #10
    3178:	06160567 	ldreq	r0, [r6], -r7, ror #10
    317c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3180:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    3184:	00020213 	andeq	r0, r2, r3, lsl r2
    3188:	4b050101 	blmi	143594 <__ccfg+0x1235ec>
    318c:	00020500 	andeq	r0, r2, r0, lsl #10
    3190:	03000000 	movweq	r0, #0
    3194:	05010699 	streq	r0, [r1, #-1689]	; 0xfffff967
    3198:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    319c:	7a03064b 	bvc	c4ad0 <__ccfg+0xa4b28>
    31a0:	261a0501 	ldrcs	r0, [sl], -r1, lsl #10
    31a4:	7a034b05 	bvc	d5dc0 <__ccfg+0xb5e18>
    31a8:	0602052e 	streq	r0, [r2], -lr, lsr #10
    31ac:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    31b0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    31b4:	672f0603 	strvs	r0, [pc, -r3, lsl #12]!
    31b8:	01061605 	tsteq	r6, r5, lsl #12
    31bc:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    31c0:	01061605 	tsteq	r6, r5, lsl #12
    31c4:	5a060205 	bpl	1839e0 <__ccfg+0x163a38>
    31c8:	13060105 	movwne	r0, #24837	; 0x6105
    31cc:	01000202 	tsteq	r0, r2, lsl #4
    31d0:	00310501 	eorseq	r0, r1, r1, lsl #10
    31d4:	00000205 	andeq	r0, r0, r5, lsl #4
    31d8:	aa030000 	bge	c31e0 <__ccfg+0xa3238>
    31dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    31e0:	06050516 			; <UNDEFINED> instruction: 0x06050516
    31e4:	06030501 	streq	r0, [r3], -r1, lsl #10
    31e8:	06010521 	streq	r0, [r1], -r1, lsr #10
    31ec:	0001023d 	andeq	r0, r1, sp, lsr r2
    31f0:	48050101 	stmdami	r5, {r0, r8}
    31f4:	80020500 	andhi	r0, r2, r0, lsl #10
    31f8:	03000019 	movweq	r0, #25
    31fc:	050106d1 	streq	r0, [r1, #-1745]	; 0xfffff92f
    3200:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    3204:	02051c48 	andeq	r1, r5, #72, 24	; 0x4800
    3208:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    320c:	200e0648 	andcs	r0, lr, r8, asr #12
    3210:	20240205 	eorcs	r0, r4, r5, lsl #4
    3214:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3218:	13060105 	movwne	r0, #24837	; 0x6105
    321c:	022d1305 	eoreq	r1, sp, #335544320	; 0x14000000
    3220:	01010006 	tsteq	r1, r6
    3224:	05004605 	streq	r4, [r0, #-1541]	; 0xfffff9fb
    3228:	0019ac02 	andseq	sl, r9, r2, lsl #24
    322c:	06b20300 	ldrteq	r0, [r2], r0, lsl #6
    3230:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3234:	0d064605 	stceq	6, cr4, [r6, #-20]	; 0xffffffec
    3238:	05250505 	streq	r0, [r5, #-1285]!	; 0xfffffafb
    323c:	052f0603 	streq	r0, [pc, #-1539]!	; 2c41 <vform+0x5>
    3240:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3244:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3248:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    324c:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    3250:	01060705 	tsteq	r6, r5, lsl #14
    3254:	30060405 	andcc	r0, r6, r5, lsl #8
    3258:	01060b05 	tsteq	r6, r5, lsl #22
    325c:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    3260:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    3264:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3268:	20090301 	andcs	r0, r9, r1, lsl #6
    326c:	03060305 	movweq	r0, #25349	; 0x6305
    3270:	0605207a 			; <UNDEFINED> instruction: 0x0605207a
    3274:	03050106 	movweq	r0, #20742	; 0x5106
    3278:	13053006 	movwne	r3, #20486	; 0x5006
    327c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3280:	06014c06 	streq	r4, [r1], -r6, lsl #24
    3284:	4a4a062e 	bmi	1284b44 <__ccfg+0x1264b9c>
    3288:	06370513 			; <UNDEFINED> instruction: 0x06370513
    328c:	21010501 	tstcs	r1, r1, lsl #10
    3290:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    3294:	3c71030b 	ldclcc	3, cr0, [r1], #-44	; 0xffffffd4
    3298:	01000b02 	tsteq	r0, r2, lsl #22
    329c:	003d0501 	eorseq	r0, sp, r1, lsl #10
    32a0:	00000205 	andeq	r0, r0, r5, lsl #4
    32a4:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    32a8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32ac:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    32b0:	02051c06 	andeq	r1, r5, #1536	; 0x600
    32b4:	4a062024 	bmi	18b34c <__ccfg+0x16b3a4>
    32b8:	2505134a 	strcs	r1, [r5, #-842]	; 0xfffffcb6
    32bc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32c0:	43056706 	movwmi	r6, #22278	; 0x5706
    32c4:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
    32c8:	2e43052e 	cdpcs	5, 4, cr0, cr3, cr14, {1}
    32cc:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    32d0:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
    32d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    32d8:	0205003d 	andeq	r0, r5, #61	; 0x3d
    32dc:	00000000 	andeq	r0, r0, r0
    32e0:	0106e203 	tsteq	r6, r3, lsl #4
    32e4:	01160205 	tsteq	r6, r5, lsl #4
    32e8:	1c063d05 	stcne	13, cr3, [r6], {5}
    32ec:	20240205 	eorcs	r0, r4, r5, lsl #4
    32f0:	134a4a06 	movtne	r4, #43526	; 0xaa06
    32f4:	01062205 	tsteq	r6, r5, lsl #4
    32f8:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
    32fc:	01010005 	tsteq	r1, r5
    3300:	05004005 	streq	r4, [r0, #-5]
    3304:	00000002 	andeq	r0, r0, r2
    3308:	06ea0300 	strbteq	r0, [sl], r0, lsl #6
    330c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3310:	06400514 			; <UNDEFINED> instruction: 0x06400514
    3314:	20017a03 	andcs	r7, r1, r3, lsl #20
    3318:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    331c:	2e7a0340 	cdpcs	3, 7, cr0, cr10, cr0, {2}
    3320:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    3324:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3328:	05843306 	streq	r3, [r4, #774]	; 0x306
    332c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3330:	11053102 	tstne	r5, r2, lsl #2
    3334:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    3338:	1a051321 	bne	147fc4 <__ccfg+0x12801c>
    333c:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    3340:	053d3e06 	ldreq	r3, [sp, #-3590]!	; 0xfffff1fa
    3344:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3348:	02022101 	andeq	r2, r2, #1073741824	; 0x40000000
    334c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3350:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3354:	00000000 	andeq	r0, r0, r0
    3358:	0106fe03 	tsteq	r6, r3, lsl #28	; <UNPREDICTABLE>
    335c:	02160205 	andseq	r0, r6, #1342177280	; 0x50000000
    3360:	01010003 	tsteq	r1, r3
    3364:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    3368:	001a0c02 	andseq	r0, sl, r2, lsl #24
    336c:	07850300 	streq	r0, [r5, r0, lsl #6]
    3370:	16020501 	strne	r0, [r2], -r1, lsl #10
    3374:	06450514 			; <UNDEFINED> instruction: 0x06450514
    3378:	2e017a03 	vmlacs.f32	s14, s2, s6
    337c:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3380:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    3384:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3388:	052f0604 	streq	r0, [pc, #-1540]!	; 2d8c <vscan+0x100>
    338c:	062f0603 	strteq	r0, [pc], -r3, lsl #12
    3390:	2e06012e 	adfcssp	f0, f6, #0.5
    3394:	033c4a06 	teqeq	ip, #24576	; 0x6000
    3398:	0c05011d 	stfeqs	f0, [r5], {29}
    339c:	06050106 	streq	r0, [r5], -r6, lsl #2
    33a0:	350a052e 	strcc	r0, [sl, #-1326]	; 0xfffffad2
    33a4:	05270105 	streq	r0, [r7, #-261]!	; 0xfffffefb
    33a8:	73030604 	movwvc	r0, #13828	; 0x3604
    33ac:	06200520 	strteq	r0, [r0], -r0, lsr #10
    33b0:	31040501 	tstcc	r4, r1, lsl #10
    33b4:	051d1205 	ldreq	r1, [sp, #-517]	; 0xfffffdfb
    33b8:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    33bc:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    33c0:	2f3d0604 	svccs	0x003d0604
    33c4:	01060b05 	tsteq	r6, r5, lsl #22
    33c8:	41060205 	tstmi	r6, r5, lsl #4
    33cc:	01060b05 	tsteq	r6, r5, lsl #22
    33d0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    33d4:	052f0603 	streq	r0, [pc, #-1539]!	; 2dd9 <vscan+0x14d>
    33d8:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
    33dc:	01010009 	tsteq	r1, r9
    33e0:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    33e4:	001a7402 	andseq	r7, sl, r2, lsl #8
    33e8:	09860300 	stmibeq	r6, {r8, r9}
    33ec:	18020501 	stmdane	r2, {r0, r8, sl}
    33f0:	06050514 			; <UNDEFINED> instruction: 0x06050514
    33f4:	03480501 	movteq	r0, #34049	; 0x8501
    33f8:	05202078 	streq	r2, [r0, #-120]!	; 0xffffff88
    33fc:	31052805 	tstcc	r5, r5, lsl #16
    3400:	20250520 	eorcs	r0, r5, r0, lsr #10
    3404:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    3408:	02053506 	andeq	r3, r5, #25165824	; 0x1800000
    340c:	11052906 	tstne	r5, r6, lsl #18
    3410:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3414:	11052f06 	tstne	r5, r6, lsl #30
    3418:	21050106 	tstcs	r5, r6, lsl #2
    341c:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
    3420:	30060205 	andcc	r0, r6, r5, lsl #4
    3424:	01062105 	tsteq	r6, r5, lsl #2
    3428:	052e1005 	streq	r1, [lr, #-5]!
    342c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3430:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3434:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3438:	05343d02 	ldreq	r3, [r4, #-3330]!	; 0xfffff2fe
    343c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3440:	0101000b 	tsteq	r1, fp
    3444:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    3448:	001ac402 	andseq	ip, sl, r2, lsl #8
    344c:	09a00300 	stmibeq	r0!, {r8, r9}
    3450:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3454:	01141313 	tsteq	r4, r3, lsl r3
    3458:	03064405 	movweq	r4, #25605	; 0x6405
    345c:	02050177 	andeq	r0, r5, #-1073741795	; 0xc000001d
    3460:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    3464:	20770344 	rsbscs	r0, r7, r4, asr #6
    3468:	09030205 	stmdbeq	r3, {r0, r2, r9}
    346c:	4a06204a 	bmi	18b59c <__ccfg+0x16b5f4>
    3470:	03060305 	movweq	r0, #25349	; 0x6305
    3474:	0e05200d 	cdpeq	0, 0, cr2, cr5, cr13, {0}
    3478:	0603054b 	streq	r0, [r3], -fp, asr #10
    347c:	060f0547 	streq	r0, [pc], -r7, asr #10
    3480:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    3484:	03062805 	movweq	r2, #26629	; 0x6805
    3488:	1e052078 	mcrne	0, 0, r2, cr5, cr8, {3}
    348c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3490:	030a0501 	movweq	r0, #42241	; 0xa501
    3494:	01052e16 	tsteq	r5, r6, lsl lr
    3498:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    349c:	67030603 	strvs	r0, [r3, -r3, lsl #12]
    34a0:	2e58013c 	mrccs	1, 2, r0, cr8, cr12, {1}
    34a4:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    34a8:	74060501 	strvc	r0, [r6], #-1281	; 0xfffffaff
    34ac:	42060205 	andmi	r0, r6, #1342177280	; 0x50000000
    34b0:	01060505 	tsteq	r6, r5, lsl #10
    34b4:	36060205 	strcc	r0, [r6], -r5, lsl #4
    34b8:	01060c05 	tsteq	r6, r5, lsl #24
    34bc:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    34c0:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    34c4:	06020520 	streq	r0, [r2], -r0, lsr #10
    34c8:	060b0523 	streq	r0, [fp], -r3, lsr #10
    34cc:	4a050501 	bmi	1448d8 <__ccfg+0x124930>
    34d0:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    34d4:	06090568 	streq	r0, [r9], -r8, ror #10
    34d8:	000a0201 	andeq	r0, sl, r1, lsl #4
    34dc:	3e050101 	adfccs	f0, f5, f1
    34e0:	60020500 	andvs	r0, r2, r0, lsl #10
    34e4:	0300001b 	movweq	r0, #27
    34e8:	050109d1 	streq	r0, [r1, #-2513]	; 0xfffff62f
    34ec:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    34f0:	063e0501 	ldrteq	r0, [lr], -r1, lsl #10
    34f4:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    34f8:	06202802 	strteq	r2, [r0], -r2, lsl #16
    34fc:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    3500:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3504:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3508:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    350c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3510:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3514:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3518:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    351c:	2f2f0602 	svccs	0x002f0602
    3520:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    3524:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3528:	0a052101 	beq	14b934 <__ccfg+0x12b98c>
    352c:	02207903 	eoreq	r7, r0, #49152	; 0xc000
    3530:	01010009 	tsteq	r1, r9
    3534:	05003405 	streq	r3, [r0, #-1029]	; 0xfffffbfb
    3538:	001ba002 	andseq	sl, fp, r2
    353c:	09e80300 	stmibeq	r8!, {r8, r9}^
    3540:	16020501 	strne	r0, [r2], -r1, lsl #10
    3544:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3548:	79030634 	stmdbvc	r3, {r2, r4, r5, r9, sl}
    354c:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    3550:	4a4a0620 	bmi	1284dd8 <__ccfg+0x1264e30>
    3554:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3558:	06020501 	streq	r0, [r2], -r1, lsl #10
    355c:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3560:	06020501 	streq	r0, [r2], -r1, lsl #10
    3564:	06050521 	streq	r0, [r5], -r1, lsr #10
    3568:	06020501 	streq	r0, [r2], -r1, lsl #10
    356c:	060a0523 	streq	r0, [sl], -r3, lsr #10
    3570:	30090510 	andcc	r0, r9, r0, lsl r5
    3574:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3578:	01010007 	tsteq	r1, r7
    357c:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    3580:	001bd402 	andseq	sp, fp, r2, lsl #8
    3584:	09f90300 	ldmibeq	r9!, {r8, r9}^
    3588:	16020501 	strne	r0, [r2], -r1, lsl #10
    358c:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    3590:	05260205 	streq	r0, [r6, #-517]!	; 0xfffffdfb
    3594:	02052c0c 	andeq	r2, r5, #12, 24	; 0xc00
    3598:	06013006 	streq	r3, [r1], -r6
    359c:	2e064a4a 	vmlscs.f32	s8, s12, s20
    35a0:	0105134a 	tsteq	r5, sl, asr #6
    35a4:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    35a8:	0006022c 	andeq	r0, r6, ip, lsr #4
    35ac:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
    35b0:	00020500 	andeq	r0, r2, r0, lsl #10
    35b4:	03000000 	movweq	r0, #0
    35b8:	05010a84 	streq	r0, [r1, #-2692]	; 0xfffff57c
    35bc:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    35c0:	051c0632 	ldreq	r0, [ip, #-1586]	; 0xfffff9ce
    35c4:	06202402 	strteq	r2, [r0], -r2, lsl #8
    35c8:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    35cc:	cc03060a 	stcgt	6, cr0, [r3], {10}
    35d0:	09050177 	stmdbeq	r5, {r0, r1, r2, r4, r5, r6, r8}
    35d4:	2008b403 	andcs	fp, r8, r3, lsl #8
    35d8:	03060205 	movweq	r0, #25093	; 0x6205
    35dc:	133c77c9 	teqne	ip, #52690944	; 0x3240000
    35e0:	13030514 	movwne	r0, #13588	; 0x3514
    35e4:	01060505 	tsteq	r6, r5, lsl #10
    35e8:	21060305 	tstcs	r6, r5, lsl #6
    35ec:	01060605 	tsteq	r6, r5, lsl #12
    35f0:	31060305 	tstcc	r6, r5, lsl #6
    35f4:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    35f8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    35fc:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    3600:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    3604:	08b40301 	ldmeq	r4!, {r0, r8, r9}
    3608:	00080220 	andeq	r0, r8, r0, lsr #4
    360c:	28050101 	stmdacs	r5, {r0, r8}
    3610:	10020500 	andne	r0, r2, r0, lsl #10
    3614:	0300001c 	movweq	r0, #28
    3618:	05010a8c 	streq	r0, [r1, #-2700]	; 0xfffff574
    361c:	011a0301 	tsteq	sl, r1, lsl #6
    3620:	01000102 	tsteq	r0, r2, lsl #2
    3624:	00012301 	andeq	r2, r1, r1, lsl #6
    3628:	89000300 	stmdbhi	r0, {r8, r9}
    362c:	02000000 	andeq	r0, r0, #0
    3630:	0d0efb01 	vstreq	d15, [lr, #-4]
    3634:	01010100 	mrseq	r0, (UNDEF: 17)
    3638:	00000001 	andeq	r0, r0, r1
    363c:	01000001 	tsteq	r0, r1
    3640:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 358c <TrimAfterColdResetWakeupFromShutDown+0x84>
    3644:	616d2f65 	cmnvs	sp, r5, ror #30
    3648:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    364c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3650:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3654:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3658:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    365c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3660:	502f534f 	eorpl	r5, pc, pc, asr #6
    3664:	534f6369 	movtpl	r6, #62313	; 0xf369
    3668:	3143432f 	cmpcc	r3, pc, lsr #6
    366c:	00585833 	subseq	r5, r8, r3, lsr r8
    3670:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3674:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3678:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    367c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3680:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3684:	61652d65 	cmnvs	r5, r5, ror #26
    3688:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    368c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3690:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3694:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3698:	74730000 	ldrbtvc	r0, [r3], #-0
    369c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    36a0:	63675f70 	cmnvs	r7, #112, 30	; 0x1c0
    36a4:	00632e63 	rsbeq	r2, r3, r3, ror #28
    36a8:	73000001 	movwvc	r0, #1
    36ac:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    36b0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    36b4:	00000002 	andeq	r0, r0, r2
    36b8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    36bc:	001c1202 	andseq	r1, ip, r2, lsl #4
    36c0:	02840300 	addeq	r0, r4, #0, 6
    36c4:	16050501 	strne	r0, [r5], -r1, lsl #10
    36c8:	100a0514 	andne	r0, sl, r4, lsl r5
    36cc:	01000102 	tsteq	r0, r2, lsl #2
    36d0:	00010501 	andeq	r0, r1, r1, lsl #10
    36d4:	1c140205 	lfmne	f0, 4, [r4], {5}
    36d8:	96030000 	strls	r0, [r3], -r0
    36dc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    36e0:	0a051416 	beq	148740 <__ccfg+0x128798>
    36e4:	00010210 	andeq	r0, r1, r0, lsl r2
    36e8:	01050101 	tsteq	r5, r1, lsl #2
    36ec:	16020500 	strne	r0, [r2], -r0, lsl #10
    36f0:	0300001c 	movweq	r0, #28
    36f4:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    36f8:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    36fc:	0102100a 	tsteq	r2, sl
    3700:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3704:	02050001 	andeq	r0, r5, #1
    3708:	00001c18 	andeq	r1, r0, r8, lsl ip
    370c:	0101d203 	tsteq	r1, r3, lsl #4
    3710:	17130505 	ldrne	r0, [r3, -r5, lsl #10]
    3714:	03060105 	movweq	r0, #24837	; 0x6105
    3718:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    371c:	13330626 	teqne	r3, #39845888	; 0x2600000
    3720:	1f060e05 	svcne	0x00060e05
    3724:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    3728:	0520061d 	streq	r0, [r0, #-1565]!	; 0xfffff9e3
    372c:	06010605 	streq	r0, [r1], -r5, lsl #12
    3730:	03040536 	movweq	r0, #17718	; 0x4536
    3734:	0505900d 	streq	r9, [r5, #-13]
    3738:	06010533 			; <UNDEFINED> instruction: 0x06010533
    373c:	0609052f 	streq	r0, [r9], -pc, lsr #10
    3740:	05206703 	streq	r6, [r0, #-1795]!	; 0xfffff8fd
    3744:	02010616 	andeq	r0, r1, #23068672	; 0x1600000
    3748:	01010010 	tsteq	r1, r0, lsl r0
    374c:	00000185 	andeq	r0, r0, r5, lsl #3
    3750:	017f0003 	cmneq	pc, r3
    3754:	01020000 	mrseq	r0, (UNDEF: 2)
    3758:	000d0efb 	strdeq	r0, [sp], -fp
    375c:	01010101 	tsteq	r1, r1, lsl #2
    3760:	01000000 	mrseq	r0, (UNDEF: 0)
    3764:	2f010000 	svccs	0x00010000
    3768:	2f727375 	svccs	0x00727375
    376c:	2f62696c 	svccs	0x0062696c
    3770:	2f636367 	svccs	0x00636367
    3774:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3778:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    377c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3780:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3784:	2f312e32 	svccs	0x00312e32
    3788:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    378c:	00656475 	rsbeq	r6, r5, r5, ror r4
    3790:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 36dc <NOROM_SetupSetVddrLevel+0x5c>
    3794:	616d2f65 	cmnvs	sp, r5, ror #30
    3798:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    379c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    37a0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    37a4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    37a8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    37ac:	4349502f 	movtmi	r5, #36911	; 0x902f
    37b0:	502f534f 	eorpl	r5, pc, pc, asr #6
    37b4:	534f6369 	movtpl	r6, #62313	; 0xf369
    37b8:	3143432f 	cmpcc	r3, pc, lsr #6
    37bc:	2f585833 	svccs	0x00585833
    37c0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    37c4:	41575858 	cmpmi	r7, r8, asr r8
    37c8:	692f4552 	stmdbvs	pc!, {r1, r4, r6, r8, sl, lr}	; <UNPREDICTABLE>
    37cc:	2f00636e 	svccs	0x0000636e
    37d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    37d4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    37d8:	2f6e6974 	svccs	0x006e6974
    37dc:	6b736544 	blvs	1cdccf4 <__ccfg+0x1cbcd4c>
    37e0:	2f706f74 	svccs	0x00706f74
    37e4:	4f534c4f 	svcmi	0x00534c4f
    37e8:	2f54454e 	svccs	0x0054454e
    37ec:	4f434950 	svcmi	0x00434950
    37f0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    37f4:	2f534f63 	svccs	0x00534f63
    37f8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    37fc:	2f005858 	svccs	0x00005858
    3800:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3804:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3808:	2f6e6974 	svccs	0x006e6974
    380c:	6b736544 	blvs	1cdcd24 <__ccfg+0x1cbcd7c>
    3810:	2f706f74 	svccs	0x00706f74
    3814:	4f534c4f 	svcmi	0x00534c4f
    3818:	2f54454e 	svccs	0x0054454e
    381c:	4f434950 	svcmi	0x00434950
    3820:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3824:	00534f63 	subseq	r4, r3, r3, ror #30
    3828:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3774 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x78>
    382c:	616d2f65 	cmnvs	sp, r5, ror #30
    3830:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3834:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3838:	706f746b 	rsbvc	r7, pc, fp, ror #8
    383c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3840:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3844:	4349502f 	movtmi	r5, #36911	; 0x902f
    3848:	502f534f 	eorpl	r5, pc, pc, asr #6
    384c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3850:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3854:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3858:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    385c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3860:	00010068 	andeq	r0, r1, r8, rrx
    3864:	5f776800 	svcpl	0x00776800
    3868:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    386c:	6d69735f 	stclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    3870:	5f656c70 	svcpl	0x00656c70
    3874:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
    3878:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    387c:	00000200 	andeq	r0, r0, r0, lsl #4
    3880:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3884:	0300682e 	movweq	r6, #2094	; 0x82e
    3888:	616d0000 	cmnvs	sp, r0
    388c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3890:	00000300 	andeq	r0, r0, r0, lsl #6
    3894:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3898:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    389c:	0300682e 	movweq	r6, #2094	; 0x82e
    38a0:	75620000 	strbvc	r0, [r2, #-0]!
    38a4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    38a8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    38ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
    38b0:	73000003 	movwvc	r0, #3
    38b4:	6f697379 	svcvs	0x00697379
    38b8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    38bc:	656b0000 	strbvs	r0, [fp, #-0]!
    38c0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    38c4:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    38c8:	63630000 	cmnvs	r3, #0
    38cc:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
    38d0:	00000300 	andeq	r0, r0, r0, lsl #6
    38d4:	00029900 	andeq	r9, r2, r0, lsl #18
    38d8:	c0000300 	andgt	r0, r0, r0, lsl #6
    38dc:	02000001 	andeq	r0, r0, #1
    38e0:	0d0efb01 	vstreq	d15, [lr, #-4]
    38e4:	01010100 	mrseq	r0, (UNDEF: 17)
    38e8:	00000001 	andeq	r0, r0, r1
    38ec:	01000001 	tsteq	r0, r1
    38f0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 383c <NOROM_SetupGetTrimForAmpcompTh1+0x10>
    38f4:	616d2f65 	cmnvs	sp, r5, ror #30
    38f8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    38fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3900:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3904:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3908:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    390c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3910:	502f534f 	eorpl	r5, pc, pc, asr #6
    3914:	534f6369 	movtpl	r6, #62313	; 0xf369
    3918:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    391c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    3920:	6f736e65 	svcvs	0x00736e65
    3924:	2f007372 	svccs	0x00007372
    3928:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    392c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3930:	2f6e6974 	svccs	0x006e6974
    3934:	6b736544 	blvs	1cdce4c <__ccfg+0x1cbcea4>
    3938:	2f706f74 	svccs	0x00706f74
    393c:	4f534c4f 	svcmi	0x00534c4f
    3940:	2f54454e 	svccs	0x0054454e
    3944:	4f434950 	svcmi	0x00434950
    3948:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    394c:	2f534f63 	svccs	0x00534f63
    3950:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3954:	2f005858 	svccs	0x00005858
    3958:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    395c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3960:	2f6e6974 	svccs	0x006e6974
    3964:	6b736544 	blvs	1cdce7c <__ccfg+0x1cbced4>
    3968:	2f706f74 	svccs	0x00706f74
    396c:	4f534c4f 	svcmi	0x00534c4f
    3970:	2f54454e 	svccs	0x0054454e
    3974:	4f434950 	svcmi	0x00434950
    3978:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    397c:	2f534f63 	svccs	0x00534f63
    3980:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3984:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3988:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    398c:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3990:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    3994:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3998:	0062696c 	rsbeq	r6, r2, ip, ror #18
    399c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    39a0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    39a4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    39a8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    39ac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    39b0:	61652d65 	cmnvs	r5, r5, ror #26
    39b4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    39b8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    39bc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    39c0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    39c4:	6f682f00 	svcvs	0x00682f00
    39c8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 381c <NOROM_SetupGetTrimForAmpcompTh2>
    39cc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    39d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    39d4:	6f746b73 	svcvs	0x00746b73
    39d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    39dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    39e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    39e4:	2f534f43 	svccs	0x00534f43
    39e8:	4f636950 	svcmi	0x00636950
    39ec:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    39f0:	2f656d6f 	svccs	0x00656d6f
    39f4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    39f8:	442f6e69 	strtmi	r6, [pc], #-3689	; 3a00 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x94>
    39fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3a00:	4f2f706f 	svcmi	0x002f706f
    3a04:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3a08:	502f5445 	eorpl	r5, pc, r5, asr #8
    3a0c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3a10:	6369502f 	cmnvs	r9, #47	; 0x2f
    3a14:	6b2f534f 	blvs	bd8758 <__ccfg+0xbb87b0>
    3a18:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3a1c:	7000006c 	andvc	r0, r0, ip, rrx
    3a20:	735f6e69 	cmpvc	pc, #1680	; 0x690
    3a24:	6f736e65 	svcvs	0x00736e65
    3a28:	00632e72 	rsbeq	r2, r3, r2, ror lr
    3a2c:	63000001 	movwvs	r0, #1
    3a30:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    3a34:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
    3a38:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3a3c:	70670000 	rsbvc	r0, r7, r0
    3a40:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3a44:	00000300 	andeq	r0, r0, r0, lsl #6
    3a48:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3a4c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3a50:	00000400 	andeq	r0, r0, r0, lsl #8
    3a54:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3a58:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3a5c:	616d0000 	cmnvs	sp, r0
    3a60:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3a64:	00000200 	andeq	r0, r0, r0, lsl #4
    3a68:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3a6c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3a70:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3a74:	75620000 	strbvc	r0, [r2, #-0]!
    3a78:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3a7c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3a80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3a84:	73000002 	movwvc	r0, #2
    3a88:	6f697379 	svcvs	0x00697379
    3a8c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3a90:	656b0000 	strbvs	r0, [fp, #-0]!
    3a94:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3a98:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3a9c:	05000000 	streq	r0, [r0, #-0]
    3aa0:	02050019 	andeq	r0, r5, #25
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	05010e03 	streq	r0, [r1, #-3587]	; 0xfffff1fd
    3aac:	0101011b 	tsteq	r1, fp, lsl r1
    3ab0:	01060105 	tsteq	r6, r5, lsl #2
    3ab4:	01000102 	tsteq	r0, r2, lsl #2
    3ab8:	003f0501 	eorseq	r0, pc, r1, lsl #10
    3abc:	00000205 	andeq	r0, r0, r5, lsl #4
    3ac0:	10030000 	andne	r0, r3, r0
    3ac4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    3ac8:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    3acc:	7a03063f 	bvc	c53d0 <__ccfg+0xa5428>
    3ad0:	05052001 	streq	r2, [r5, #-1]
    3ad4:	06030526 	streq	r0, [r3], -r6, lsr #10
    3ad8:	06060522 	streq	r0, [r6], -r2, lsr #10
    3adc:	06030501 	streq	r0, [r3], -r1, lsl #10
    3ae0:	0302044d 	movweq	r0, #9293	; 0x244d
    3ae4:	040100c1 	streq	r0, [r1], #-193	; 0xffffff3f
    3ae8:	20400301 	subcs	r0, r0, r1, lsl #6
    3aec:	02044b3d 	andeq	r4, r4, #62464	; 0xf400
    3af0:	04013303 	streq	r3, [r1], #-771	; 0xfffffcfd
    3af4:	204e0301 	subcs	r0, lr, r1, lsl #6
    3af8:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3afc:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3b00:	030f0503 	movweq	r0, #62723	; 0xf503
    3b04:	042e018b 	strteq	r0, [lr], #-395	; 0xfffffe75
    3b08:	03070501 	movweq	r0, #29953	; 0x7501
    3b0c:	05207ef5 	streq	r7, [r0, #-3829]!	; 0xfffff10b
    3b10:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    3b14:	0305130b 	movweq	r1, #21259	; 0x530b
    3b18:	05030413 	streq	r0, [r3, #-1043]	; 0xfffffbed
    3b1c:	01830329 	orreq	r0, r3, r9, lsr #6
    3b20:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3b24:	0b050104 	bleq	143f3c <__ccfg+0x123f94>
    3b28:	7ef80306 	cdpvc	3, 15, cr0, cr8, cr6, {0}
    3b2c:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3b30:	0188030f 	orreq	r0, r8, pc, lsl #6
    3b34:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3b38:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3b3c:	05030420 	streq	r0, [r3, #-1056]	; 0xfffffbe0
    3b40:	01880333 	orreq	r0, r8, r3, lsr r3
    3b44:	2042052e 	subcs	r0, r2, lr, lsr #10
    3b48:	0b050104 	bleq	143f60 <__ccfg+0x123fb8>
    3b4c:	2e7ef803 	cdpcs	8, 7, cr15, cr14, cr3, {0}
    3b50:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3b54:	0805201f 	stmdaeq	r5, {r0, r1, r2, r3, r4, sp}
    3b58:	1e02052e 	cfsh32ne	mvfx0, mvfx2, #30
    3b5c:	05220805 	streq	r0, [r2, #-2053]!	; 0xfffff7fb
    3b60:	051f063a 	ldreq	r0, [pc, #-1594]	; 352e <TrimAfterColdResetWakeupFromShutDown+0x26>
    3b64:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    3b68:	01051106 	tsteq	r5, r6, lsl #2
    3b6c:	00060223 	andeq	r0, r6, r3, lsr #4
    3b70:	033c0101 	teqeq	ip, #1073741824	; 0x40000000
    3b74:	00030000 	andeq	r0, r3, r0
    3b78:	000001a9 	andeq	r0, r0, r9, lsr #3
    3b7c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3b80:	0101000d 	tsteq	r1, sp
    3b84:	00000101 	andeq	r0, r0, r1, lsl #2
    3b88:	00000100 	andeq	r0, r0, r0, lsl #2
    3b8c:	6f682f01 	svcvs	0x00682f01
    3b90:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 39e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x78>
    3b94:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3b98:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3b9c:	6f746b73 	svcvs	0x00746b73
    3ba0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3ba4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ba8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3bac:	2f534f43 	svccs	0x00534f43
    3bb0:	4f636950 	svcmi	0x00636950
    3bb4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3bb8:	2f736269 	svccs	0x00736269
    3bbc:	2f004f49 	svccs	0x00004f49
    3bc0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3bc4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3bc8:	2f6e6974 	svccs	0x006e6974
    3bcc:	6b736544 	blvs	1cdd0e4 <__ccfg+0x1cbd13c>
    3bd0:	2f706f74 	svccs	0x00706f74
    3bd4:	4f534c4f 	svcmi	0x00534c4f
    3bd8:	2f54454e 	svccs	0x0054454e
    3bdc:	4f434950 	svcmi	0x00434950
    3be0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3be4:	2f534f63 	svccs	0x00534f63
    3be8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3bec:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3bf0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3bf4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3bf8:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    3bfc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3c00:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3c04:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3c08:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3c0c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3c10:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3c14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3c18:	61652d65 	cmnvs	r5, r5, ror #26
    3c1c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3c20:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3c24:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3c28:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3c2c:	6f682f00 	svcvs	0x00682f00
    3c30:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3a84 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x8>
    3c34:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3c38:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3c3c:	6f746b73 	svcvs	0x00746b73
    3c40:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3c44:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3c48:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3c4c:	2f534f43 	svccs	0x00534f43
    3c50:	4f636950 	svcmi	0x00636950
    3c54:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3c58:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3c5c:	6f682f00 	svcvs	0x00682f00
    3c60:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3ab4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x38>
    3c64:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3c68:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3c6c:	6f746b73 	svcvs	0x00746b73
    3c70:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3c74:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3c78:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3c7c:	2f534f43 	svccs	0x00534f43
    3c80:	4f636950 	svcmi	0x00636950
    3c84:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    3c88:	2f656d6f 	svccs	0x00656d6f
    3c8c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c90:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c98 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    3c94:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c98:	4f2f706f 	svcmi	0x002f706f
    3c9c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3ca0:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ca4:	534f4349 	movtpl	r4, #62281	; 0xf349
    3ca8:	6369502f 	cmnvs	r9, #47	; 0x2f
    3cac:	6b2f534f 	blvs	bd89f0 <__ccfg+0xbb8a48>
    3cb0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3cb4:	6200006c 	andvs	r0, r0, #108	; 0x6c
    3cb8:	6f747475 	svcvs	0x00747475
    3cbc:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    3cc0:	00000100 	andeq	r0, r0, r0, lsl #2
    3cc4:	6f697067 	svcvs	0x00697067
    3cc8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3ccc:	74730000 	ldrbtvc	r0, [r3], #-0
    3cd0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3cd4:	0300682e 	movweq	r6, #2094	; 0x82e
    3cd8:	72610000 	rsbvc	r0, r1, #0
    3cdc:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3ce0:	00000400 	andeq	r0, r0, r0, lsl #8
    3ce4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3ce8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3cec:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3cf0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3cf4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3cf8:	00000400 	andeq	r0, r0, r0, lsl #8
    3cfc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3d00:	5f736e6f 	svcpl	0x00736e6f
    3d04:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3d08:	00040068 	andeq	r0, r4, r8, rrx
    3d0c:	73797300 	cmnvc	r9, #0, 6
    3d10:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3d14:	00000500 	andeq	r0, r0, r0, lsl #10
    3d18:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3d1c:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    3d20:	00000600 	andeq	r0, r0, r0, lsl #12
    3d24:	00010500 	andeq	r0, r1, r0, lsl #10
    3d28:	00000205 	andeq	r0, r0, r5, lsl #4
    3d2c:	1b030000 	blne	c3d34 <__ccfg+0xa3d8c>
    3d30:	2e060101 	adfcss	f0, f6, f1
    3d34:	6a060205 	bvs	184550 <__ccfg+0x1645a8>
    3d38:	01060e05 	tsteq	r6, r5, lsl #28
    3d3c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3d40:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    3d44:	0f054002 	svceq	0x00054002
    3d48:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3d4c:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    3d50:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3d54:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    3d58:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    3d5c:	05200614 	streq	r0, [r0, #-1556]!	; 0xfffff9ec
    3d60:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    3d64:	03062002 	movweq	r2, #24578	; 0x6002
    3d68:	3d4b2e11 	stclcc	14, cr2, [fp, #-68]	; 0xffffffbc
    3d6c:	71030305 	tstvc	r3, r5, lsl #6
    3d70:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3d74:	00fe0329 	rscseq	r0, lr, r9, lsr #6
    3d78:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3d7c:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3d80:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    3d84:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3d88:	0183030f 	orreq	r0, r3, pc, lsl #6
    3d8c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3d90:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3d94:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3d98:	01830333 	orreq	r0, r3, r3, lsr r3
    3d9c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3da0:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    3da4:	06040520 	streq	r0, [r4], -r0, lsr #10
    3da8:	06050530 			; <UNDEFINED> instruction: 0x06050530
    3dac:	06040501 	streq	r0, [r4], -r1, lsl #10
    3db0:	06030540 	streq	r0, [r3], -r0, asr #10
    3db4:	062e1203 	strteq	r1, [lr], -r3, lsl #4
    3db8:	0306052f 	movweq	r0, #25903	; 0x652f
    3dbc:	0d052064 	stceq	0, cr2, [r5, #-400]	; 0xfffffe70
    3dc0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3dc4:	3c160306 	ldccc	3, cr0, [r6], {6}
    3dc8:	01060705 	tsteq	r6, r5, lsl #14
    3dcc:	29050204 	stmdbcs	r5, {r2, r9}
    3dd0:	00eb0306 	rsceq	r0, fp, r6, lsl #6
    3dd4:	17050558 	smlsdne	r5, r8, r5, r0
    3dd8:	01060f05 	tsteq	r6, r5, lsl #30
    3ddc:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3de0:	207f9003 	rsbscs	r9, pc, r3
    3de4:	0f050204 	svceq	0x00050204
    3de8:	2000f003 	andcs	pc, r0, r3
    3dec:	04203305 	strteq	r3, [r0], #-773	; 0xfffffcfb
    3df0:	03050501 	movweq	r0, #21761	; 0x5501
    3df4:	05207f90 	streq	r7, [r0, #-3984]!	; 0xfffff070
    3df8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3dfc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3e00:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    3e04:	07055102 	streq	r5, [r5, -r2, lsl #2]
    3e08:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3e0c:	03062905 	movweq	r2, #26885	; 0x6905
    3e10:	053c00df 	ldreq	r0, [ip, #-223]!	; 0xffffff21
    3e14:	0f051705 	svceq	0x00051705
    3e18:	01040106 	tsteq	r4, r6, lsl #2
    3e1c:	9c030705 	stcls	7, cr0, [r3], {5}
    3e20:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3e24:	e4030f05 	str	r0, [r3], #-3845	; 0xfffff0fb
    3e28:	01042e00 	tsteq	r4, r0, lsl #28
    3e2c:	9c030705 	stcls	7, cr0, [r3], {5}
    3e30:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3e34:	e4033305 	str	r3, [r3], #-773	; 0xfffffcfb
    3e38:	01042000 	mrseq	r2, (UNDEF: 4)
    3e3c:	9c030505 	cfstr32ls	mvfx0, [r3], {5}
    3e40:	0205207f 	andeq	r2, r5, #127	; 0x7f
    3e44:	0e053106 	adfeqs	f3, f5, f6
    3e48:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3e4c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3e50:	06030531 			; <UNDEFINED> instruction: 0x06030531
    3e54:	06020501 	streq	r0, [r2], -r1, lsl #10
    3e58:	06010522 	streq	r0, [r1], -r2, lsr #10
    3e5c:	2c020522 	cfstr32cs	mvfx0, [r2], {34}	; 0x22
    3e60:	4c060105 	stfmis	f0, [r6], {5}
    3e64:	01000c02 	tsteq	r0, r2, lsl #24
    3e68:	00290501 	eoreq	r0, r9, r1, lsl #10
    3e6c:	00000205 	andeq	r0, r0, r5, lsl #4
    3e70:	d7030000 	strle	r0, [r3, -r0]
    3e74:	02050100 	andeq	r0, r5, #0, 2
    3e78:	060f0516 			; <UNDEFINED> instruction: 0x060f0516
    3e7c:	1c290501 	cfstr32ne	mvfx0, [r9], #-4
    3e80:	05240f05 	streq	r0, [r4, #-3845]!	; 0xfffff0fb
    3e84:	03052005 	movweq	r2, #20485	; 0x5005
    3e88:	01052106 	tsteq	r5, r6, lsl #2
    3e8c:	03051a06 	movweq	r1, #23046	; 0x5a06
    3e90:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    3e94:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    3e98:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    3e9c:	03053c05 	movweq	r3, #23557	; 0x5c05
    3ea0:	052f2f06 	streq	r2, [pc, #-3846]!	; 2fa2 <vscan+0x316>
    3ea4:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    3ea8:	01052c03 	tsteq	r5, r3, lsl #24
    3eac:	0006023e 	andeq	r0, r6, lr, lsr r2
    3eb0:	09310101 	ldmdbeq	r1!, {r0, r8}
    3eb4:	00030000 	andeq	r0, r3, r0
    3eb8:	000001cc 	andeq	r0, r0, ip, asr #3
    3ebc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3ec0:	0101000d 	tsteq	r1, sp
    3ec4:	00000101 	andeq	r0, r0, r1, lsl #2
    3ec8:	00000100 	andeq	r0, r0, r0, lsl #2
    3ecc:	6f682f01 	svcvs	0x00682f01
    3ed0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3d24 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xcc>
    3ed4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3ed8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3edc:	6f746b73 	svcvs	0x00746b73
    3ee0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3ee4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ee8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3eec:	2f534f43 	svccs	0x00534f43
    3ef0:	4f636950 	svcmi	0x00636950
    3ef4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3ef8:	2f736269 	svccs	0x00736269
    3efc:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    3f00:	00656761 	rsbeq	r6, r5, r1, ror #14
    3f04:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3e50 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>
    3f08:	616d2f65 	cmnvs	sp, r5, ror #30
    3f0c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3f10:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3f14:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3f18:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3f1c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3f20:	4349502f 	movtmi	r5, #36911	; 0x902f
    3f24:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f28:	534f6369 	movtpl	r6, #62313	; 0xf369
    3f2c:	3143432f 	cmpcc	r3, pc, lsr #6
    3f30:	2f585833 	svccs	0x00585833
    3f34:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3f38:	41575858 	cmpmi	r7, r8, asr r8
    3f3c:	642f4552 	strtvs	r4, [pc], #-1362	; 3f44 <NOROM_ChipInfo_GetHwRevision+0x8>
    3f40:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3f44:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3f48:	73752f00 	cmnvc	r5, #0, 30
    3f4c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3f50:	63672f62 	cmnvs	r7, #392	; 0x188
    3f54:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3f58:	6f6e2d6d 	svcvs	0x006e2d6d
    3f5c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3f60:	2f696261 	svccs	0x00696261
    3f64:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3f68:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3f6c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3f70:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3f74:	2f656d6f 	svccs	0x00656d6f
    3f78:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3f7c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3f84 <NOROM_ChipInfo_GetHwRevision+0x48>
    3f80:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3f84:	4f2f706f 	svcmi	0x002f706f
    3f88:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3f8c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3f90:	534f4349 	movtpl	r4, #62281	; 0xf349
    3f94:	6369502f 	cmnvs	r9, #47	; 0x2f
    3f98:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3f9c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3fa0:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3fa4:	2f656d6f 	svccs	0x00656d6f
    3fa8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3fac:	442f6e69 	strtmi	r6, [pc], #-3689	; 3fb4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0xc>
    3fb0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3fb4:	4f2f706f 	svcmi	0x002f706f
    3fb8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3fbc:	502f5445 	eorpl	r5, pc, r5, asr #8
    3fc0:	534f4349 	movtpl	r4, #62281	; 0xf349
    3fc4:	6369502f 	cmnvs	r9, #47	; 0x2f
    3fc8:	2f00534f 	svccs	0x0000534f
    3fcc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fd0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3fd4:	2f6e6974 	svccs	0x006e6974
    3fd8:	6b736544 	blvs	1cdd4f0 <__ccfg+0x1cbd548>
    3fdc:	2f706f74 	svccs	0x00706f74
    3fe0:	4f534c4f 	svcmi	0x00534c4f
    3fe4:	2f54454e 	svccs	0x0054454e
    3fe8:	4f434950 	svcmi	0x00434950
    3fec:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3ff0:	2f534f63 	svccs	0x00534f63
    3ff4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3ff8:	00006c65 	andeq	r6, r0, r5, ror #24
    3ffc:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    4000:	5f656761 	svcpl	0x00656761
    4004:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    4008:	33303872 	teqcc	r0, #7471104	; 0x720000
    400c:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    4010:	67000001 	strvs	r0, [r0, -r1]
    4014:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    4018:	00020068 	andeq	r0, r2, r8, rrx
    401c:	6f747300 	svcvs	0x00747300
    4020:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4024:	7065655f 	rsbvc	r6, r5, pc, asr r5
    4028:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    402c:	00010068 	andeq	r0, r1, r8, rrx
    4030:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4034:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4038:	00030068 	andeq	r0, r3, r8, rrx
    403c:	63726100 	cmnvs	r2, #0, 2
    4040:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4044:	6d000004 	stcvs	0, cr0, [r0, #-16]
    4048:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    404c:	00040068 	andeq	r0, r4, r8, rrx
    4050:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4054:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4058:	00682e73 	rsbeq	r2, r8, r3, ror lr
    405c:	62000004 	andvs	r0, r0, #4
    4060:	6f747475 	svcvs	0x00747475
    4064:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4068:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    406c:	00000400 	andeq	r0, r0, r0, lsl #8
    4070:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4074:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4078:	6b000005 	blvs	4094 <memcpy+0xa4>
    407c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    4080:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    4084:	00000006 	andeq	r0, r0, r6
    4088:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    408c:	001c6402 	andseq	r6, ip, r2, lsl #8
    4090:	01180300 	tsteq	r8, r0, lsl #6
    4094:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4098:	01150514 	tsteq	r5, r4, lsl r5
    409c:	0d061905 	vstreq.16	s2, [r6, #-10]	; <UNPREDICTABLE>
    40a0:	04250905 	strteq	r0, [r5], #-2309	; 0xfffff6fb
    40a4:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    40a8:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    40ac:	03190501 	tsteq	r9, #4194304	; 0x400000
    40b0:	042e7df1 	strteq	r7, [lr], #-3569	; 0xfffff20f
    40b4:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    40b8:	052002c5 	streq	r0, [r0, #-709]!	; 0xfffffd3b
    40bc:	7ed0030f 	cdpvc	3, 13, cr0, cr0, cr15, {0}
    40c0:	032d0520 			; <UNDEFINED> instruction: 0x032d0520
    40c4:	042000fa 	strteq	r0, [r0], #-250	; 0xffffff06
    40c8:	06030501 	streq	r0, [r3], -r1, lsl #10
    40cc:	207df703 	rsbscs	pc, sp, r3, lsl #14
    40d0:	0f050204 	svceq	0x00050204
    40d4:	018f0306 	orreq	r0, pc, r6, lsl #6
    40d8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    40dc:	7ef10305 	cdpvc	3, 15, cr0, cr1, cr5, {0}
    40e0:	21060520 	tstcs	r6, r0, lsr #10
    40e4:	051f0505 	ldreq	r0, [pc, #-1285]	; 3be7 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xdf>
    40e8:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    40ec:	03290502 			; <UNDEFINED> instruction: 0x03290502
    40f0:	05010189 	streq	r0, [r1, #-393]	; 0xfffffe77
    40f4:	01041705 	tsteq	r4, r5, lsl #14
    40f8:	f3030405 	vshl.u8	d0, d5, d3
    40fc:	0605017e 			; <UNDEFINED> instruction: 0x0605017e
    4100:	03050106 	movweq	r0, #20742	; 0x5106
    4104:	02043d06 	andeq	r3, r4, #384	; 0x180
    4108:	81032905 	tsthi	r3, r5, lsl #18
    410c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    4110:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    4114:	f6030602 			; <UNDEFINED> instruction: 0xf6030602
    4118:	0204017d 	andeq	r0, r4, #1073741855	; 0x4000001f
    411c:	8a032d05 	bhi	cf538 <__ccfg+0xaf590>
    4120:	01042002 	tsteq	r4, r2
    4124:	03060305 	movweq	r0, #25349	; 0x6305
    4128:	04207dfb 	strteq	r7, [r0], #-3579	; 0xfffff205
    412c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4130:	050102b6 	streq	r0, [r1, #-694]	; 0xfffffd4a
    4134:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4138:	01040106 	tsteq	r4, r6, lsl #2
    413c:	03061c05 	movweq	r1, #27653	; 0x6c05
    4140:	05207dc0 	streq	r7, [r0, #-3520]!	; 0xfffff240
    4144:	02050115 	andeq	r0, r5, #1073741829	; 0x40000005
    4148:	01050106 	tsteq	r5, r6, lsl #2
    414c:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    4150:	01010007 	tsteq	r1, r7
    4154:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    4158:	001c9802 	andseq	r9, ip, r2, lsl #16
    415c:	01280300 			; <UNDEFINED> instruction: 0x01280300
    4160:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    4164:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    4168:	200e061f 	andcs	r0, lr, pc, lsl r6
    416c:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4170:	3c01ff03 	stccc	15, cr15, [r1], {3}
    4174:	03050104 	movweq	r0, #20740	; 0x5104
    4178:	7e860306 	cdpvc	3, 8, cr0, cr6, cr6, {0}
    417c:	0606054a 	streq	r0, [r6], -sl, asr #10
    4180:	06040501 	streq	r0, [r4], -r1, lsl #10
    4184:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4188:	01f40329 	mvnseq	r0, r9, lsr #6
    418c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4190:	01062d05 	tsteq	r6, r5, lsl #26
    4194:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    4198:	7e890306 	cdpvc	3, 8, cr0, cr9, cr6, {0}
    419c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    41a0:	02a80329 	adceq	r0, r8, #-1543503872	; 0xa4000000
    41a4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    41a8:	01062d05 	tsteq	r6, r5, lsl #26
    41ac:	03050104 	movweq	r0, #20740	; 0x5104
    41b0:	7dd40306 	ldclvc	3, cr0, [r4, #24]
    41b4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    41b8:	01f10329 	mvnseq	r0, r9, lsr #6
    41bc:	17050501 	strne	r0, [r5, -r1, lsl #10]
    41c0:	03060104 	movweq	r0, #24836	; 0x6104
    41c4:	05017e8c 	streq	r7, [r1, #-3724]	; 0xfffff174
    41c8:	20790302 	rsbscs	r0, r9, r2, lsl #6
    41cc:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    41d0:	2001fb03 	andcs	pc, r1, r3, lsl #22
    41d4:	03050104 	movweq	r0, #20740	; 0x5104
    41d8:	7e8b0306 	cdpvc	3, 8, cr0, cr11, cr6, {0}
    41dc:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    41e0:	02a60329 	adceq	r0, r6, #-1543503872	; 0xa4000000
    41e4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    41e8:	03060104 	movweq	r0, #24836	; 0x6104
    41ec:	04017dd6 	streq	r7, [r1], #-3542	; 0xfffff22a
    41f0:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    41f4:	042002aa 	strteq	r0, [r0], #-682	; 0xfffffd56
    41f8:	06030501 	streq	r0, [r3], -r1, lsl #10
    41fc:	207dd603 	rsbscs	sp, sp, r3, lsl #12
    4200:	79031505 	stmdbvc	r3, {r0, r2, r8, sl, ip}
    4204:	010e0501 	tsteq	lr, r1, lsl #10
    4208:	01060205 	tsteq	r6, r5, lsl #4
    420c:	09030105 	stmdbeq	r3, {r0, r2, r8}
    4210:	00050220 	andeq	r0, r5, r0, lsr #4
    4214:	1e050101 	adfnes	f0, f5, f1
    4218:	c8020500 	stmdagt	r2, {r8, sl}
    421c:	0300001c 	movweq	r0, #28
    4220:	02050139 	andeq	r0, r5, #1073741838	; 0x4000000e
    4224:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    4228:	03cf0329 	biceq	r0, pc, #-1543503872	; 0xa4000000
    422c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4230:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4234:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4238:	031e0501 	tsteq	lr, #4194304	; 0x400000
    423c:	04207ca8 	strteq	r7, [r0], #-3240	; 0xfffff358
    4240:	03380502 	teqeq	r8, #8388608	; 0x800000
    4244:	042003d8 	strteq	r0, [r0], #-984	; 0xfffffc28
    4248:	06020501 	streq	r0, [r2], -r1, lsl #10
    424c:	2e7cab03 	vaddcs.f64	d26, d12, d3
    4250:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4254:	03cd0329 	biceq	r0, sp, #-1543503872	; 0xa4000000
    4258:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    425c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4260:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4264:	03010501 	movweq	r0, #5377	; 0x1501
    4268:	022e7cad 	eoreq	r7, lr, #44288	; 0xad00
    426c:	01010004 	tsteq	r1, r4
    4270:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    4274:	001ce002 	andseq	lr, ip, r2
    4278:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    427c:	16020501 	strne	r0, [r2], -r1, lsl #10
    4280:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
    4284:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4288:	03ba0338 			; <UNDEFINED> instruction: 0x03ba0338
    428c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4290:	7cca0309 	stclvc	3, cr0, [sl], {9}
    4294:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4298:	03b60338 			; <UNDEFINED> instruction: 0x03b60338
    429c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    42a0:	ca030608 	bgt	c5ac8 <__ccfg+0xa5b20>
    42a4:	0205207c 	andeq	r2, r5, #124	; 0x7c
    42a8:	143c7303 	ldrtne	r7, [ip], #-771	; 0xfffffcfd
    42ac:	29050204 	stmdbcs	r5, {r2, r9}
    42b0:	0103ba03 	tsteq	r3, r3, lsl #20
    42b4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    42b8:	01041705 	tsteq	r4, r5, lsl #14
    42bc:	03060205 	movweq	r0, #25093	; 0x6205
    42c0:	04017cc0 	streq	r7, [r1], #-3264	; 0xfffff340
    42c4:	03380502 	teqeq	r8, #8388608	; 0x800000
    42c8:	042003c0 	strteq	r0, [r0], #-960	; 0xfffffc40
    42cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    42d0:	207cc003 	rsbscs	ip, ip, r3
    42d4:	0606052f 	streq	r0, [r6], -pc, lsr #10
    42d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    42dc:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    42e0:	03b70329 			; <UNDEFINED> instruction: 0x03b70329
    42e4:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    42e8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    42ec:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    42f0:	06020501 	streq	r0, [r2], -r1, lsl #10
    42f4:	2e7cc303 	cdpcs	3, 7, cr12, cr12, cr3, {0}
    42f8:	19060f05 	stmdbne	r6, {r0, r2, r8, r9, sl, fp}
    42fc:	05360105 	ldreq	r0, [r6, #-261]!	; 0xfffffefb
    4300:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    4304:	0606052e 	streq	r0, [r6], -lr, lsr #10
    4308:	06040501 	streq	r0, [r4], -r1, lsl #10
    430c:	024b4c4b 	subeq	r4, fp, #19200	; 0x4b00
    4310:	01010007 	tsteq	r1, r7
    4314:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    4318:	001d3402 	andseq	r3, sp, r2, lsl #8
    431c:	01810300 	orreq	r0, r1, r0, lsl #6
    4320:	16020501 	strne	r0, [r2], -r1, lsl #10
    4324:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    4328:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    432c:	03052005 	movweq	r2, #20485	; 0x5005
    4330:	02053006 	andeq	r3, r5, #6
    4334:	0608055e 			; <UNDEFINED> instruction: 0x0608055e
    4338:	3d010501 	cfstr32cc	mvfx0, [r1, #-4]
    433c:	1b060305 	blne	184f58 <__ccfg+0x164fb0>
    4340:	66030205 	strvs	r0, [r3], -r5, lsl #4
    4344:	14010101 	strne	r0, [r1], #-257	; 0xfffffeff
    4348:	29050204 	stmdbcs	r5, {r2, r9}
    434c:	01039903 	tsteq	r3, r3, lsl #18
    4350:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4354:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4358:	01040106 	tsteq	r4, r6, lsl #2
    435c:	e1030205 	tst	r3, r5, lsl #4
    4360:	02042e7c 	andeq	r2, r4, #124, 28	; 0x7c0
    4364:	9f033805 	svcls	0x00033805
    4368:	01042003 	tsteq	r4, r3
    436c:	03060205 	movweq	r0, #25093	; 0x6205
    4370:	2f207ce1 	svccs	0x00207ce1
    4374:	29050204 	stmdbcs	r5, {r2, r9}
    4378:	01039703 	tsteq	r3, r3, lsl #14
    437c:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4380:	01041705 	tsteq	r4, r5, lsl #14
    4384:	03060205 	movweq	r0, #25093	; 0x6205
    4388:	04017ce3 	streq	r7, [r1], #-3299	; 0xfffff31d
    438c:	03380502 	teqeq	r8, #8388608	; 0x800000
    4390:	0420039d 	strteq	r0, [r0], #-925	; 0xfffffc63
    4394:	06020501 	streq	r0, [r2], -r1, lsl #10
    4398:	207ce303 	rsbscs	lr, ip, r3, lsl #6
    439c:	16030305 	strne	r0, [r3], -r5, lsl #6
    43a0:	0609052e 	streq	r0, [r9], -lr, lsr #10
    43a4:	00090201 	andeq	r0, r9, r1, lsl #4
    43a8:	17050101 	strne	r0, [r5, -r1, lsl #2]
    43ac:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    43b0:	0300001d 	movweq	r0, #29
    43b4:	050100f7 	streq	r0, [r1, #-247]	; 0xffffff09
    43b8:	17051402 	strne	r1, [r5, -r2, lsl #8]
    43bc:	0c051006 	stceq	0, cr1, [r5], {6}
    43c0:	20050522 	andcs	r0, r5, r2, lsr #10
    43c4:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    43c8:	03020559 	movweq	r0, #9561	; 0x2559
    43cc:	0305016e 	movweq	r0, #20846	; 0x516e
    43d0:	053c1303 	ldreq	r1, [ip, #-771]!	; 0xfffffcfd
    43d4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    43d8:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
    43dc:	06010501 	streq	r0, [r1], -r1, lsl #10
    43e0:	00030214 	andeq	r0, r3, r4, lsl r2
    43e4:	11050101 	tstne	r5, r1, lsl #2
    43e8:	98020500 	stmdals	r2, {r8, sl}
    43ec:	0300001d 	movweq	r0, #29
    43f0:	05010192 	streq	r0, [r1, #-402]	; 0xfffffe6e
    43f4:	11051602 	tstne	r5, r2, lsl #12
    43f8:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    43fc:	052f0624 	streq	r0, [pc, #-1572]!	; 3de0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x188>
    4400:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4404:	2e0e0301 	cdpcs	3, 0, cr0, cr14, cr1, {0}
    4408:	72030805 	andvc	r0, r3, #327680	; 0x50000
    440c:	06020520 	streq	r0, [r2], -r0, lsr #10
    4410:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    4414:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4418:	01010003 	tsteq	r1, r3
    441c:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    4420:	001dac02 	andseq	sl, sp, r2, lsl #24
    4424:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    4428:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    442c:	01060605 	tsteq	r6, r5, lsl #12
    4430:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4434:	052f0603 	streq	r0, [pc, #-1539]!	; 3e39 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e1>
    4438:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    443c:	052f0603 	streq	r0, [pc, #-1539]!	; 3e41 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e9>
    4440:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    4444:	01010003 	tsteq	r1, r3
    4448:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    444c:	00000002 	andeq	r0, r0, r2
    4450:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    4454:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    4458:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    445c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4460:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    4464:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4468:	12053c18 	andne	r3, r5, #24, 24	; 0x1800
    446c:	06020520 	streq	r0, [r2], -r0, lsr #10
    4470:	0204303f 	andeq	r3, r4, #63	; 0x3f
    4474:	d1032905 	tstle	r3, r5, lsl #18
    4478:	3d050102 	stfccs	f0, [r5, #-8]
    447c:	17050514 	smladne	r5, r4, r5, r0
    4480:	01063805 	tsteq	r6, r5, lsl #16
    4484:	02050104 	andeq	r0, r5, #4, 2
    4488:	2e7daa03 	vaddcs.f32	s21, s26, s6
    448c:	38050204 	stmdacc	r5, {r2, r9}
    4490:	2002d603 	andcs	sp, r2, r3, lsl #12
    4494:	02050104 	andeq	r0, r5, #4, 2
    4498:	7daa0306 	stcvc	3, cr0, [sl, #24]!
    449c:	4b4b2f20 	blmi	12d0124 <__ccfg+0x12b017c>
    44a0:	2008053e 	andcs	r0, r8, lr, lsr r5
    44a4:	04310205 	ldrteq	r0, [r1], #-517	; 0xfffffdfb
    44a8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    44ac:	050102c7 	streq	r0, [r1, #-711]	; 0xfffffd39
    44b0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    44b4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    44b8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    44bc:	b4030602 	strlt	r0, [r3], #-1538	; 0xfffff9fe
    44c0:	05302e7d 	ldreq	r2, [r0, #-3709]!	; 0xfffff183
    44c4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    44c8:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    44cc:	060a052e 	streq	r0, [sl], -lr, lsr #10
    44d0:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    44d4:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    44d8:	0005023c 	andeq	r0, r5, ip, lsr r2
    44dc:	31050101 	tstcc	r5, r1, lsl #2
    44e0:	00020500 	andeq	r0, r2, r0, lsl #10
    44e4:	03000000 	movweq	r0, #0
    44e8:	050101ca 	streq	r0, [r1, #-458]	; 0xfffffe36
    44ec:	31051402 	tstcc	r5, r2, lsl #8
    44f0:	0c051006 	stceq	0, cr1, [r5], {6}
    44f4:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    44f8:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    44fc:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    4500:	06030530 			; <UNDEFINED> instruction: 0x06030530
    4504:	06060532 			; <UNDEFINED> instruction: 0x06060532
    4508:	20170501 	andscs	r0, r7, r1, lsl #10
    450c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    4510:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4514:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4518:	03053c17 	movweq	r3, #23575	; 0x5c17
    451c:	05303206 	ldreq	r3, [r0, #-518]!	; 0xfffffdfa
    4520:	010a0304 	tsteq	sl, r4, lsl #6
    4524:	01061005 	tsteq	r6, r5
    4528:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    452c:	09052010 	stmdbeq	r5, {r4, sp}
    4530:	06040520 	streq	r0, [r4], -r0, lsr #10
    4534:	06110522 	ldreq	r0, [r1], -r2, lsr #10
    4538:	20090501 	andcs	r0, r9, r1, lsl #10
    453c:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    4540:	04052e09 	streq	r2, [r5], #-3593	; 0xfffff1f7
    4544:	0d052406 	cfstrseq	mvf2, [r5, #-24]	; 0xffffffe8
    4548:	07050106 	streq	r0, [r5, -r6, lsl #2]
    454c:	0605054a 	streq	r0, [r5], -sl, asr #10
    4550:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4554:	06050501 	streq	r0, [r5], -r1, lsl #10
    4558:	0c052f2f 	stceq	15, cr2, [r5], {47}	; 0x2f
    455c:	01050106 	tsteq	r5, r6, lsl #2
    4560:	05203103 	streq	r3, [r0, #-259]!	; 0xfffffefd
    4564:	52030604 	andpl	r0, r3, #4, 12	; 0x400000
    4568:	060e0520 	streq	r0, [lr], -r0, lsr #10
    456c:	20070501 	andcs	r0, r7, r1, lsl #10
    4570:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    4574:	0505201d 	streq	r2, [r5, #-29]	; 0xffffffe3
    4578:	0b053e06 	bleq	153d98 <__ccfg+0x133df0>
    457c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4580:	1e0b0528 	cfsh32ne	mvfx0, mvfx11, #24
    4584:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4588:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    458c:	96030638 			; <UNDEFINED> instruction: 0x96030638
    4590:	01040102 	tsteq	r4, r2, lsl #2
    4594:	ea030405 	b	c55b0 <__ccfg+0xa5608>
    4598:	02052e7d 	andeq	r2, r5, #2000	; 0x7d0
    459c:	7ec70306 	cdpvc	3, 12, cr0, cr7, cr6, {0}
    45a0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    45a4:	03c80329 	biceq	r0, r8, #-1543503872	; 0xa4000000
    45a8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    45ac:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    45b0:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    45b4:	06020501 	streq	r0, [r2], -r1, lsl #10
    45b8:	207cb203 	rsbscs	fp, ip, r3, lsl #4
    45bc:	3d4b4b2f 	vstrcc	d20, [fp, #-188]	; 0xffffff44
    45c0:	29050204 	stmdbcs	r5, {r2, r9}
    45c4:	0103c303 	tsteq	r3, r3, lsl #6
    45c8:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    45cc:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    45d0:	01040106 	tsteq	r4, r6, lsl #2
    45d4:	03060205 	movweq	r0, #25093	; 0x6205
    45d8:	052e7dee 	streq	r7, [lr, #-3566]!	; 0xfffff212
    45dc:	5503060b 	strpl	r0, [r3, #-1547]	; 0xfffff9f5
    45e0:	06090582 	streq	r0, [r9], -r2, lsl #11
    45e4:	052e1f03 	streq	r1, [lr, #-3843]!	; 0xfffff0fd
    45e8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    45ec:	2a052e0c 	bcs	14fe24 <__ccfg+0x12fe7c>
    45f0:	20220520 	eorcs	r0, r2, r0, lsr #10
    45f4:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    45f8:	01060b05 	tsteq	r6, r5, lsl #22
    45fc:	31060505 	tstcc	r6, r5, lsl #10
    4600:	01060b05 	tsteq	r6, r5, lsl #22
    4604:	05350205 	ldreq	r0, [r5, #-517]!	; 0xfffffdfb
    4608:	0a030604 	beq	c5e20 <__ccfg+0xa5e78>
    460c:	0905592e 	stmdbeq	r5, {r1, r2, r3, r5, r8, fp, ip, lr}
    4610:	0e030106 	adfeqs	f0, f3, f6
    4614:	0604054a 	streq	r0, [r4], -sl, asr #10
    4618:	206b0321 	rsbcs	r0, fp, r1, lsr #6
    461c:	200b0359 	andcs	r0, fp, r9, asr r3
    4620:	0609054b 	streq	r0, [r9], -fp, asr #10
    4624:	06040501 	streq	r0, [r4], -r1, lsl #10
    4628:	09054b5e 	stmdbeq	r5, {r1, r2, r3, r4, r6, r8, r9, fp, lr}
    462c:	03050106 	movweq	r0, #20742	; 0x5106
    4630:	7fba0306 	svcvc	0x00ba0306
    4634:	06060558 			; <UNDEFINED> instruction: 0x06060558
    4638:	3b090501 	blcc	245a44 <__ccfg+0x225a9c>
    463c:	01010008 	tsteq	r1, r8
    4640:	05003b05 	streq	r3, [r0, #-2821]	; 0xfffff4fb
    4644:	00000002 	andeq	r0, r0, r2
    4648:	02a00300 	adceq	r0, r0, #0, 6
    464c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4650:	063b0514 			; <UNDEFINED> instruction: 0x063b0514
    4654:	320c050e 	andcc	r0, ip, #58720256	; 0x3800000
    4658:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    465c:	3b052405 	blcc	14d678 <__ccfg+0x12d6d0>
    4660:	3205051c 	andcc	r0, r5, #28, 10	; 0x7000000
    4664:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4668:	01060605 	tsteq	r6, r5, lsl #12
    466c:	053c1a05 	ldreq	r1, [ip, #-2565]!	; 0xfffff5fb
    4670:	03052e14 	movweq	r2, #24084	; 0x5e14
    4674:	08053f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, ip, sp}
    4678:	03050106 	movweq	r0, #20742	; 0x5106
    467c:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4680:	03050106 	movweq	r0, #20742	; 0x5106
    4684:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4688:	03050106 	movweq	r0, #20742	; 0x5106
    468c:	052f3006 	streq	r3, [pc, #-6]!	; 468e <patchGenfskRfe+0xe2>
    4690:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4694:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4698:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    469c:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    46a0:	0a052206 	beq	14cec0 <__ccfg+0x12cf18>
    46a4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    46a8:	052f2106 	streq	r2, [pc, #-262]!	; 45aa <patable+0x10>
    46ac:	22030601 	andcs	r0, r3, #1048576	; 0x100000
    46b0:	06030501 	streq	r0, [r3], -r1, lsl #10
    46b4:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    46b8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    46bc:	03052006 	movweq	r2, #20486	; 0x5006
    46c0:	24063e06 	strcs	r3, [r6], #-3590	; 0xfffff1fa
    46c4:	04304a06 	ldrteq	r4, [r0], #-2566	; 0xfffff5fa
    46c8:	03290502 			; <UNDEFINED> instruction: 0x03290502
    46cc:	050101c8 	streq	r0, [r1, #-456]	; 0xfffffe38
    46d0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    46d4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    46d8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    46dc:	7eb30303 	cdpvc	3, 11, cr0, cr3, cr3, {0}
    46e0:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    46e4:	01cd0338 	biceq	r0, sp, r8, lsr r3
    46e8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    46ec:	b3030603 	movwlt	r0, #13827	; 0x3603
    46f0:	052f2e7e 	streq	r2, [pc, #-3710]!	; 387a <NOROM_SetupGetTrimForAmpcompCtrl+0x3a>
    46f4:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    46f8:	4b062e03 	blmi	18ff0c <__ccfg+0x16ff64>
    46fc:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    4700:	0c053106 	stfeqs	f3, [r5], {6}
    4704:	2e09052b 	cfsh32cs	mvfx0, mvfx9, #27
    4708:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
    470c:	051d0609 	ldreq	r0, [sp, #-1545]	; 0xfffff9f7
    4710:	02042603 	andeq	r2, r4, #3145728	; 0x300000
    4714:	bb032905 	bllt	ceb30 <__ccfg+0xaeb88>
    4718:	3d050101 	stfccs	f0, [r5, #-4]
    471c:	17050514 	smladne	r5, r4, r5, r0
    4720:	01063805 	tsteq	r6, r5, lsl #16
    4724:	02050104 	andeq	r0, r5, #4, 2
    4728:	7ec10306 	cdpvc	3, 12, cr0, cr1, cr6, {0}
    472c:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    4730:	06020501 	streq	r0, [r2], -r1, lsl #10
    4734:	04054b40 	streq	r4, [r5], #-2880	; 0xfffff4c0
    4738:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    473c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4740:	3d063c04 	stccc	12, cr3, [r6, #-16]
    4744:	01060805 	tsteq	r6, r5, lsl #16
    4748:	59060405 	stmdbpl	r6, {r0, r2, sl}
    474c:	01060805 	tsteq	r6, r5, lsl #16
    4750:	5d030b05 	vstrpl	d0, [r3, #-20]	; 0xffffffec
    4754:	000d024a 	andeq	r0, sp, sl, asr #4
    4758:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    475c:	00020500 	andeq	r0, r2, r0, lsl #10
    4760:	03000000 	movweq	r0, #0
    4764:	050102da 	streq	r0, [r1, #-730]	; 0xfffffd26
    4768:	01021501 	tsteq	r2, r1, lsl #10
    476c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4770:	02050018 	andeq	r0, r5, #24
    4774:	00000000 	andeq	r0, r0, r0
    4778:	0102df03 	tsteq	r2, r3, lsl #30
    477c:	05150205 	ldreq	r0, [r5, #-517]	; 0xfffffdfb
    4780:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4784:	01010002 	tsteq	r1, r2
    4788:	29050304 	stmdbcs	r5, {r2, r8, r9}
    478c:	00020500 	andeq	r0, r2, r0, lsl #10
    4790:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4794:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4798:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    479c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    47a0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    47a4:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    47a8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    47ac:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    47b0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    47b4:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    47b8:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    47bc:	01010003 	tsteq	r1, r3
    47c0:	17050304 	strne	r0, [r5, -r4, lsl #6]
    47c4:	00020500 	andeq	r0, r2, r0, lsl #10
    47c8:	03000000 	movweq	r0, #0
    47cc:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    47d0:	06170514 			; <UNDEFINED> instruction: 0x06170514
    47d4:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
    47d8:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    47dc:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    47e0:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    47e4:	c1010100 	mrsgt	r0, (UNDEF: 17)
    47e8:	03000001 	movweq	r0, #1
    47ec:	00012100 	andeq	r2, r1, r0, lsl #2
    47f0:	fb010200 	blx	44ffa <__ccfg+0x25052>
    47f4:	01000d0e 	tsteq	r0, lr, lsl #26
    47f8:	00010101 	andeq	r0, r1, r1, lsl #2
    47fc:	00010000 	andeq	r0, r1, r0
    4800:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4804:	2f656d6f 	svccs	0x00656d6f
    4808:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    480c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4814 <patchGenfskRfe+0x268>
    4810:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4814:	4f2f706f 	svcmi	0x002f706f
    4818:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    481c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4820:	534f4349 	movtpl	r4, #62281	; 0xf349
    4824:	6369502f 	cmnvs	r9, #47	; 0x2f
    4828:	502f534f 	eorpl	r5, pc, pc, asr #6
    482c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4830:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4834:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4838:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    483c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4840:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4844:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4848:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    484c:	61652d65 	cmnvs	r5, r5, ror #26
    4850:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4854:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4858:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    485c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4860:	6f682f00 	svcvs	0x00682f00
    4864:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 46b8 <patchGenfskRfe+0x10c>
    4868:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    486c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4870:	6f746b73 	svcvs	0x00746b73
    4874:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4878:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    487c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4880:	2f534f43 	svccs	0x00534f43
    4884:	4f636950 	svcmi	0x00636950
    4888:	43432f53 	movtmi	r2, #16211	; 0x3f53
    488c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4890:	6f682f00 	svcvs	0x00682f00
    4894:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 46e8 <patchGenfskRfe+0x13c>
    4898:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    489c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    48a0:	6f746b73 	svcvs	0x00746b73
    48a4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    48a8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    48ac:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    48b0:	2f534f43 	svccs	0x00534f43
    48b4:	4f636950 	svcmi	0x00636950
    48b8:	73000053 	movwvc	r0, #83	; 0x53
    48bc:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    48c0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    48c4:	73000001 	movwvc	r0, #1
    48c8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    48cc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    48d0:	61000002 	tstvs	r0, r2
    48d4:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    48d8:	00030068 	andeq	r0, r3, r8, rrx
    48dc:	63616d00 	cmnvs	r1, #0, 26
    48e0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    48e4:	70000003 	andvc	r0, r0, r3
    48e8:	5f736e69 	svcpl	0x00736e69
    48ec:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    48f0:	00030068 	andeq	r0, r3, r8, rrx
    48f4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    48f8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    48fc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4900:	0300682e 	movweq	r6, #2094	; 0x82e
    4904:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4908:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    490c:	00040068 	andeq	r0, r4, r8, rrx
    4910:	2a050000 	bcs	144918 <__ccfg+0x124970>
    4914:	c0020500 	andgt	r0, r2, r0, lsl #10
    4918:	0300001d 	movweq	r0, #29
    491c:	0205010c 	andeq	r0, r5, #12, 2
    4920:	2a051416 	bcs	149980 <__ccfg+0x1299d8>
    4924:	017a0306 	cmneq	sl, r6, lsl #6
    4928:	34050520 	strcc	r0, [r5], #-1312	; 0xfffffae0
    492c:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    4930:	01061005 	tsteq	r6, r5
    4934:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    4938:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    493c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4940:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4944:	0b052106 	bleq	14cd64 <__ccfg+0x12cdbc>
    4948:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    494c:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    4950:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4954:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4958:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    495c:	05054f02 	streq	r4, [r5, #-3842]	; 0xfffff0fe
    4960:	03050106 	movweq	r0, #20742	; 0x5106
    4964:	13052f06 	movwne	r2, #24326	; 0x5f06
    4968:	08050106 	stmdaeq	r5, {r1, r2, r8}
    496c:	06020520 	streq	r0, [r2], -r0, lsr #10
    4970:	06050524 	streq	r0, [r5], -r4, lsr #10
    4974:	06030501 	streq	r0, [r3], -r1, lsl #10
    4978:	06080521 	streq	r0, [r8], -r1, lsr #10
    497c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4980:	053d593e 	ldreq	r5, [sp, #-2366]!	; 0xfffff6c2
    4984:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4988:	052f0602 	streq	r0, [pc, #-1538]!	; 438e <_gettimeofday+0x1ee>
    498c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4990:	052f0603 	streq	r0, [pc, #-1539]!	; 4395 <_gettimeofday+0x1f5>
    4994:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4998:	03052201 	movweq	r2, #20993	; 0x5201
    499c:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
    49a0:	01060a05 	tsteq	r6, r5, lsl #20
    49a4:	024a6e03 	subeq	r6, sl, #3, 28	; 0x30
    49a8:	01010007 	tsteq	r1, r7
    49ac:	0000019e 	muleq	r0, lr, r1
    49b0:	013d0003 	teqeq	sp, r3
    49b4:	01020000 	mrseq	r0, (UNDEF: 2)
    49b8:	000d0efb 	strdeq	r0, [sp], -fp
    49bc:	01010101 	tsteq	r1, r1, lsl #2
    49c0:	01000000 	mrseq	r0, (UNDEF: 0)
    49c4:	2f010000 	svccs	0x00010000
    49c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    49cc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    49d0:	2f6e6974 	svccs	0x006e6974
    49d4:	6b736544 	blvs	1cddeec <__ccfg+0x1cbdf44>
    49d8:	2f706f74 	svccs	0x00706f74
    49dc:	4f534c4f 	svcmi	0x00534c4f
    49e0:	2f54454e 	svccs	0x0054454e
    49e4:	4f434950 	svcmi	0x00434950
    49e8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    49ec:	2f534f63 	svccs	0x00534f63
    49f0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    49f4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    49f8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    49fc:	73752f00 	cmnvc	r5, #0, 30
    4a00:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4a04:	63672f62 	cmnvs	r7, #392	; 0x188
    4a08:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4a0c:	6f6e2d6d 	svcvs	0x006e2d6d
    4a10:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4a14:	2f696261 	svccs	0x00696261
    4a18:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4a1c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4a20:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4a24:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4a28:	2f656d6f 	svccs	0x00656d6f
    4a2c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4a30:	442f6e69 	strtmi	r6, [pc], #-3689	; 4a38 <patchGenfskRfe+0x48c>
    4a34:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4a38:	4f2f706f 	svcmi	0x002f706f
    4a3c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4a40:	502f5445 	eorpl	r5, pc, r5, asr #8
    4a44:	534f4349 	movtpl	r4, #62281	; 0xf349
    4a48:	6369502f 	cmnvs	r9, #47	; 0x2f
    4a4c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4a50:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4a54:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4a58:	2f656d6f 	svccs	0x00656d6f
    4a5c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4a60:	442f6e69 	strtmi	r6, [pc], #-3689	; 4a68 <patchGenfskRfe+0x4bc>
    4a64:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4a68:	4f2f706f 	svcmi	0x002f706f
    4a6c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4a70:	502f5445 	eorpl	r5, pc, r5, asr #8
    4a74:	534f4349 	movtpl	r4, #62281	; 0xf349
    4a78:	6369502f 	cmnvs	r9, #47	; 0x2f
    4a7c:	0000534f 	andeq	r5, r0, pc, asr #6
    4a80:	5f726573 	svcpl	0x00726573
    4a84:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    4a88:	0100632e 	tsteq	r0, lr, lsr #6
    4a8c:	74730000 	ldrbtvc	r0, [r3], #-0
    4a90:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4a94:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4a98:	74730000 	ldrbtvc	r0, [r3], #-0
    4a9c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    4aa0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4aa4:	72610000 	rsbvc	r0, r1, #0
    4aa8:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4aac:	00000300 	andeq	r0, r0, r0, lsl #6
    4ab0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4ab4:	0300682e 	movweq	r6, #2094	; 0x82e
    4ab8:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4abc:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4ac0:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4ac4:	00000300 	andeq	r0, r0, r0, lsl #6
    4ac8:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4acc:	5f736e6f 	svcpl	0x00736e6f
    4ad0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4ad4:	00030068 	andeq	r0, r3, r8, rrx
    4ad8:	73797300 	cmnvc	r9, #0, 6
    4adc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4ae0:	00000400 	andeq	r0, r0, r0, lsl #8
    4ae4:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    4ae8:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    4aec:	00003e6e 	andeq	r3, r0, lr, ror #28
    4af0:	05000000 	streq	r0, [r0, #-0]
    4af4:	0205002c 	andeq	r0, r5, #44	; 0x2c
    4af8:	00001e38 	andeq	r1, r0, r8, lsr lr
    4afc:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    4b00:	13131402 	tstne	r3, #33554432	; 0x2000000
    4b04:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    4b08:	2e017a03 	vmlacs.f32	s14, s2, s6
    4b0c:	05260e05 	streq	r0, [r6, #-3589]!	; 0xfffff1fb
    4b10:	03053c05 	movweq	r3, #23557	; 0x5c05
    4b14:	033d3006 	teqeq	sp, #6
    4b18:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    4b1c:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4b20:	0522060d 	streq	r0, [r2, #-1549]!	; 0xfffff9f3
    4b24:	22061e02 	andcs	r1, r6, #2, 28
    4b28:	01060d05 	tsteq	r6, r5, lsl #26
    4b2c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    4b30:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4b34:	06054e02 	streq	r4, [r5], -r2, lsl #28
    4b38:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4b3c:	0603054a 	streq	r0, [r3], -sl, asr #10
    4b40:	02053d21 	andeq	r3, r5, #2112	; 0x840
    4b44:	06010524 	streq	r0, [r1], -r4, lsr #10
    4b48:	00090213 	andeq	r0, r9, r3, lsl r2
    4b4c:	01af0101 			; <UNDEFINED> instruction: 0x01af0101
    4b50:	00030000 	andeq	r0, r3, r0
    4b54:	0000013c 	andeq	r0, r0, ip, lsr r1
    4b58:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4b5c:	0101000d 	tsteq	r1, sp
    4b60:	00000101 	andeq	r0, r0, r1, lsl #2
    4b64:	00000100 	andeq	r0, r0, r0, lsl #2
    4b68:	6f682f01 	svcvs	0x00682f01
    4b6c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 49c0 <patchGenfskRfe+0x414>
    4b70:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4b74:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4b78:	6f746b73 	svcvs	0x00746b73
    4b7c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4b80:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4b84:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4b88:	2f534f43 	svccs	0x00534f43
    4b8c:	4f636950 	svcmi	0x00636950
    4b90:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4b94:	2f736269 	svccs	0x00736269
    4b98:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4b9c:	2f006c61 	svccs	0x00006c61
    4ba0:	2f727375 	svccs	0x00727375
    4ba4:	2f62696c 	svccs	0x0062696c
    4ba8:	2f636367 	svccs	0x00636367
    4bac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4bb0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4bb4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4bb8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4bbc:	2f312e32 	svccs	0x00312e32
    4bc0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4bc4:	00656475 	rsbeq	r6, r5, r5, ror r4
    4bc8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4b14 <patchGenfskRfe+0x568>
    4bcc:	616d2f65 	cmnvs	sp, r5, ror #30
    4bd0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4bd4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4bd8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4bdc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4be0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4be4:	4349502f 	movtmi	r5, #36911	; 0x902f
    4be8:	502f534f 	eorpl	r5, pc, pc, asr #6
    4bec:	534f6369 	movtpl	r6, #62313	; 0xf369
    4bf0:	3143432f 	cmpcc	r3, pc, lsr #6
    4bf4:	00585833 	subseq	r5, r8, r3, lsr r8
    4bf8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4b44 <patchGenfskRfe+0x598>
    4bfc:	616d2f65 	cmnvs	sp, r5, ror #30
    4c00:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4c04:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4c08:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4c0c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4c10:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4c14:	4349502f 	movtmi	r5, #36911	; 0x902f
    4c18:	502f534f 	eorpl	r5, pc, pc, asr #6
    4c1c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4c20:	65730000 	ldrbvs	r0, [r3, #-0]!
    4c24:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    4c28:	00632e66 	rsbeq	r2, r3, r6, ror #28
    4c2c:	73000001 	movwvc	r0, #1
    4c30:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4c34:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4c38:	73000002 	movwvc	r0, #2
    4c3c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    4c40:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4c44:	61000002 	tstvs	r0, r2
    4c48:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4c4c:	00030068 	andeq	r0, r3, r8, rrx
    4c50:	63616d00 	cmnvs	r1, #0, 26
    4c54:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4c58:	70000003 	andvc	r0, r0, r3
    4c5c:	5f736e69 	svcpl	0x00736e69
    4c60:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4c64:	00030068 	andeq	r0, r3, r8, rrx
    4c68:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4c6c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4c70:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4c74:	0300682e 	movweq	r6, #2094	; 0x82e
    4c78:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4c7c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4c80:	00040068 	andeq	r0, r4, r8, rrx
    4c84:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    4c88:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    4c8c:	003e6e69 	eorseq	r6, lr, r9, ror #28
    4c90:	00000000 	andeq	r0, r0, r0
    4c94:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
    4c98:	001e8c02 	andseq	r8, lr, r2, lsl #24
    4c9c:	010d0300 	mrseq	r0, SP_mon
    4ca0:	13170205 	tstne	r7, #1342177280	; 0x50000000
    4ca4:	062d0514 			; <UNDEFINED> instruction: 0x062d0514
    4ca8:	2e017803 	cdpcs	8, 0, cr7, cr1, cr3, {0}
    4cac:	05360505 	ldreq	r0, [r6, #-1285]!	; 0xfffffafb
    4cb0:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    4cb4:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    4cb8:	03052005 	movweq	r2, #20485	; 0x5005
    4cbc:	0f052f06 	svceq	0x00052f06
    4cc0:	06050106 	streq	r0, [r5], -r6, lsl #2
    4cc4:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    4cc8:	060b0521 	streq	r0, [fp], -r1, lsr #10
    4ccc:	06040501 	streq	r0, [r4], -r1, lsl #10
    4cd0:	0607054b 	streq	r0, [r7], -fp, asr #10
    4cd4:	06050501 	streq	r0, [r5], -r1, lsl #10
    4cd8:	03053d21 	movweq	r3, #23841	; 0x5d21
    4cdc:	02052d16 	andeq	r2, r5, #1408	; 0x580
    4ce0:	0905304f 	stmdbeq	r5, {r0, r1, r2, r3, r6, ip, sp}
    4ce4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4ce8:	053d3e06 	ldreq	r3, [sp, #-3590]!	; 0xfffff1fa
    4cec:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4cf0:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4cf4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    4cf8:	6669030a 	strbtvs	r0, [r9], -sl, lsl #6
    4cfc:	01000602 	tsteq	r0, r2, lsl #12
    4d00:	000ca901 	andeq	sl, ip, r1, lsl #18
    4d04:	99000300 	stmdbls	r0, {r8, r9}
    4d08:	02000002 	andeq	r0, r0, #2
    4d0c:	0d0efb01 	vstreq	d15, [lr, #-4]
    4d10:	01010100 	mrseq	r0, (UNDEF: 17)
    4d14:	00000001 	andeq	r0, r0, r1
    4d18:	01000001 	tsteq	r0, r1
    4d1c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c68 <patchImageGenfsk+0x8>
    4d20:	616d2f65 	cmnvs	sp, r5, ror #30
    4d24:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4d28:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4d2c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4d30:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4d34:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4d38:	4349502f 	movtmi	r5, #36911	; 0x902f
    4d3c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4d40:	534f6369 	movtpl	r6, #62313	; 0xf369
    4d44:	3143432f 	cmpcc	r3, pc, lsr #6
    4d48:	00585833 	subseq	r5, r8, r3, lsr r8
    4d4c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c98 <patchImageGenfsk+0x38>
    4d50:	616d2f65 	cmnvs	sp, r5, ror #30
    4d54:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4d58:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4d5c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4d60:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4d64:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4d68:	4349502f 	movtmi	r5, #36911	; 0x902f
    4d6c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4d70:	534f6369 	movtpl	r6, #62313	; 0xf369
    4d74:	3143432f 	cmpcc	r3, pc, lsr #6
    4d78:	2f585833 	svccs	0x00585833
    4d7c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4d80:	41575858 	cmpmi	r7, r8, asr r8
    4d84:	642f4552 	strtvs	r4, [pc], #-1362	; 4d8c <patchImageGenfsk+0x12c>
    4d88:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    4d8c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    4d90:	6f682f00 	svcvs	0x00682f00
    4d94:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4be8 <patchGenfskRfe+0x63c>
    4d98:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d9c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4da0:	6f746b73 	svcvs	0x00746b73
    4da4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4da8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4dac:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4db0:	2f534f43 	svccs	0x00534f43
    4db4:	4f636950 	svcmi	0x00636950
    4db8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4dbc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4dc0:	3143432f 	cmpcc	r3, pc, lsr #6
    4dc4:	57585833 	smmlarpl	r8, r3, r8, r5
    4dc8:	2f455241 	svccs	0x00455241
    4dcc:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    4dd0:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    4dd4:	2f007365 	svccs	0x00007365
    4dd8:	2f727375 	svccs	0x00727375
    4ddc:	2f62696c 	svccs	0x0062696c
    4de0:	2f636367 	svccs	0x00636367
    4de4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4de8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4dec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4df0:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4df4:	2f312e32 	svccs	0x00312e32
    4df8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4dfc:	00656475 	rsbeq	r6, r5, r5, ror r4
    4e00:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4e04:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4e08:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4e0c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4e10:	2f62696c 	svccs	0x0062696c
    4e14:	00737973 	rsbseq	r7, r3, r3, ror r9
    4e18:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4d64 <patchImageGenfsk+0x104>
    4e1c:	616d2f65 	cmnvs	sp, r5, ror #30
    4e20:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4e24:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4e28:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4e2c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4e30:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4e34:	4349502f 	movtmi	r5, #36911	; 0x902f
    4e38:	502f534f 	eorpl	r5, pc, pc, asr #6
    4e3c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4e40:	6f682f00 	svcvs	0x00682f00
    4e44:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4c98 <patchImageGenfsk+0x38>
    4e48:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4e4c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4e50:	6f746b73 	svcvs	0x00746b73
    4e54:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4e58:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4e5c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4e60:	2f534f43 	svccs	0x00534f43
    4e64:	4f636950 	svcmi	0x00636950
    4e68:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    4e6c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    4e70:	66720000 	ldrbtvs	r0, [r2], -r0
    4e74:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    4e78:	0100632e 	tsteq	r0, lr, lsr #6
    4e7c:	66720000 	ldrbtvs	r0, [r2], -r0
    4e80:	00682e63 	rsbeq	r2, r8, r3, ror #28
    4e84:	67000002 	strvs	r0, [r0, -r2]
    4e88:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    4e8c:	00020068 	andeq	r0, r2, r8, rrx
    4e90:	5f667200 	svcpl	0x00667200
    4e94:	63746170 	cmnvs	r4, #112, 2
    4e98:	70635f68 	rsbvc	r5, r3, r8, ror #30
    4e9c:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    4ea0:	6b73666e 	blvs	1cde860 <__ccfg+0x1cbe8b8>
    4ea4:	0300682e 	movweq	r6, #2094	; 0x82e
    4ea8:	66720000 	ldrbtvs	r0, [r2], -r0
    4eac:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    4eb0:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    4eb4:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    4eb8:	73666e65 	cmnvc	r6, #1616	; 0x650
    4ebc:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    4ec0:	73000003 	movwvc	r0, #3
    4ec4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4ec8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4ecc:	73000004 	movwvc	r0, #4
    4ed0:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    4ed4:	00682e66 	rsbeq	r2, r8, r6, ror #28
    4ed8:	5f000004 	svcpl	0x00000004
    4edc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4ee0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4ee4:	72000005 	andvc	r0, r0, #5
    4ee8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4eec:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4ef0:	6f6c0000 	svcvs	0x006c0000
    4ef4:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    4ef8:	00000500 	andeq	r0, r0, r0, lsl #10
    4efc:	6d5f6672 	ldclvs	6, cr6, [pc, #-456]	; 4d3c <patchImageGenfsk+0xdc>
    4f00:	626c6961 	rsbvs	r6, ip, #1589248	; 0x184000
    4f04:	682e786f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, fp, ip, sp, lr}
    4f08:	00000200 	andeq	r0, r0, r0, lsl #4
    4f0c:	635f6672 	cmpvs	pc, #119537664	; 0x7200000
    4f10:	6f6d6d6f 	svcvs	0x006d6d6f
    4f14:	6d635f6e 	stclvs	15, cr5, [r3, #-440]!	; 0xfffffe48
    4f18:	00682e64 	rsbeq	r2, r8, r4, ror #28
    4f1c:	72000002 	andvc	r0, r0, #2
    4f20:	72705f66 	rsbsvc	r5, r0, #408	; 0x198
    4f24:	635f706f 	cmpvs	pc, #111	; 0x6f
    4f28:	682e646d 	stmdavs	lr!, {r0, r2, r3, r5, r6, sl, sp, lr}
    4f2c:	00000200 	andeq	r0, r0, r0, lsl #4
    4f30:	645f6672 	ldrbvs	r6, [pc], #-1650	; 4f38 <__exidx_end+0x8>
    4f34:	5f617461 	svcpl	0x00617461
    4f38:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
    4f3c:	00682e79 	rsbeq	r2, r8, r9, ror lr
    4f40:	61000002 	tstvs	r0, r2
    4f44:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4f48:	00010068 	andeq	r0, r1, r8, rrx
    4f4c:	63616d00 	cmnvs	r1, #0, 26
    4f50:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4f54:	70000001 	andvc	r0, r0, r1
    4f58:	5f736e69 	svcpl	0x00736e69
    4f5c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4f60:	00010068 	andeq	r0, r1, r8, rrx
    4f64:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4f68:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4f6c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4f70:	0100682e 	tsteq	r0, lr, lsr #16
    4f74:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4f78:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4f7c:	00060068 	andeq	r0, r6, r8, rrx
    4f80:	72656b00 	rsbvc	r6, r5, #0, 22
    4f84:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    4f88:	00070068 	andeq	r0, r7, r8, rrx
    4f8c:	616d7300 	cmnvs	sp, r0, lsl #6
    4f90:	66727472 			; <UNDEFINED> instruction: 0x66727472
    4f94:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    4f98:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    4f9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4fa0:	00000001 	andeq	r0, r0, r1
    4fa4:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    4fa8:	001eec02 	andseq	lr, lr, r2, lsl #24
    4fac:	039f0300 	orrseq	r0, pc, #0, 6
    4fb0:	16020501 	strne	r0, [r2], -r1, lsl #10
    4fb4:	14063805 	strne	r3, [r6], #-2053	; 0xfffff7fb
    4fb8:	05202605 	streq	r2, [r0, #-1541]!	; 0xfffff9fb
    4fbc:	26052038 			; <UNDEFINED> instruction: 0x26052038
    4fc0:	1e15053c 	mrcne	5, 0, r0, cr5, cr12, {1}
    4fc4:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    4fc8:	01010008 	tsteq	r1, r8
    4fcc:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    4fd0:	001f0c02 	andseq	r0, pc, r2, lsl #24
    4fd4:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    4fd8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4fdc:	062a0514 			; <UNDEFINED> instruction: 0x062a0514
    4fe0:	0405200e 	streq	r2, [r5], #-14
    4fe4:	05440806 	strbeq	r0, [r4, #-2054]	; 0xfffff7fa
    4fe8:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    4fec:	0805200c 	stmdaeq	r5, {r2, r3, sp}
    4ff0:	053c2003 	ldreq	r2, [ip, #-3]!
    4ff4:	03210604 			; <UNDEFINED> instruction: 0x03210604
    4ff8:	06052064 	streq	r2, [r5], -r4, rrx
    4ffc:	58750306 	ldmdapl	r5!, {r1, r2, r8, r9}^
    5000:	03060405 	movweq	r0, #25605	; 0x6405
    5004:	0101200d 	tsteq	r1, sp
    5008:	4a582e9e 	bmi	1610a88 <__ccfg+0x15f0ae0>
    500c:	03060105 	movweq	r0, #24837	; 0x6105
    5010:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
    5014:	90030604 	andls	r0, r3, r4, lsl #12
    5018:	055d207f 	ldrbeq	r2, [sp, #-127]	; 0xffffff81
    501c:	2001060b 	andcs	r0, r1, fp, lsl #12
    5020:	06040520 	streq	r0, [r4], -r0, lsr #10
    5024:	0606052f 	streq	r0, [r6], -pc, lsr #10
    5028:	05016303 	streq	r6, [r1, #-771]	; 0xfffffcfd
    502c:	21030604 	tstcs	r3, r4, lsl #12
    5030:	060a052e 	streq	r0, [sl], -lr, lsr #10
    5034:	20080501 	andcs	r0, r8, r1, lsl #10
    5038:	21060405 	tstcs	r6, r5, lsl #8
    503c:	e2030205 	and	r0, r3, #1342177280	; 0x50000000
    5040:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    5044:	03050106 	movweq	r0, #20742	; 0x5106
    5048:	02052f06 	andeq	r2, r5, #6, 30
    504c:	0608050f 	streq	r0, [r8], -pc, lsl #10
    5050:	1d090515 	cfstr32ne	mvfx0, [r9, #-84]	; 0xffffffac
    5054:	03060405 	movweq	r0, #25605	; 0x6405
    5058:	05207fa4 	streq	r7, [r0, #-4004]!	; 0xfffff05c
    505c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    5060:	05410604 	strbeq	r0, [r1, #-1540]	; 0xfffff9fc
    5064:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    5068:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
    506c:	055b2106 	ldrbeq	r2, [fp, #-262]	; 0xfffffefa
    5070:	07055204 	streq	r5, [r5, -r4, lsl #4]
    5074:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5078:	01012206 	tsteq	r1, r6, lsl #4
    507c:	4a065a06 	bmi	19b89c <__ccfg+0x17b8f4>
    5080:	35060d05 	strcc	r0, [r6, #-3333]	; 0xfffff2fb
    5084:	05212005 	streq	r2, [r1, #-5]!
    5088:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    508c:	05130611 	ldreq	r0, [r3, #-1553]	; 0xfffff9ef
    5090:	1b052d08 	blne	1504b8 <__ccfg+0x130510>
    5094:	1e052d06 	cdpne	13, 0, cr2, cr5, cr6, {0}
    5098:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    509c:	04052006 	streq	r2, [r5], #-6
    50a0:	03060106 	movweq	r0, #24838	; 0x6106
    50a4:	2e053c10 	mcrcs	12, 0, r3, cr5, cr0, {0}
    50a8:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    50ac:	1f2e0521 	svcne	0x002e0521
    50b0:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    50b4:	01062e05 	tsteq	r6, r5, lsl #28
    50b8:	05202405 	streq	r2, [r0, #-1029]!	; 0xfffffbfb
    50bc:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
    50c0:	060a0524 	streq	r0, [sl], -r4, lsr #10
    50c4:	03080501 	movweq	r0, #34049	; 0x8501
    50c8:	0405200e 	streq	r2, [r5], #-14
    50cc:	75032206 	strvc	r2, [r3, #-518]	; 0xfffffdfa
    50d0:	060c0520 	streq	r0, [ip], -r0, lsr #10
    50d4:	21140501 	tstcs	r4, r1, lsl #10
    50d8:	20490c05 	subcs	r0, r9, r5, lsl #24
    50dc:	30060405 	andcc	r0, r6, r5, lsl #8
    50e0:	2f011103 	svccs	0x00011103
    50e4:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    50e8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    50ec:	05360604 	ldreq	r0, [r6, #-1540]!	; 0xfffff9fc
    50f0:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    50f4:	0a052106 	beq	14d514 <__ccfg+0x12d56c>
    50f8:	20202e1f 	eorcs	r2, r0, pc, lsl lr
    50fc:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    5100:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    5104:	2001060d 	andcs	r0, r1, sp, lsl #12
    5108:	06040520 	streq	r0, [r4], -r0, lsr #10
    510c:	060d0530 			; <UNDEFINED> instruction: 0x060d0530
    5110:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    5114:	001f0242 	andseq	r0, pc, r2, asr #4
    5118:	23050101 	movwcs	r0, #20737	; 0x5101
    511c:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    5120:	03000020 	movweq	r0, #32
    5124:	050101c4 	streq	r0, [r1, #-452]	; 0xfffffe3c
    5128:	05151702 	ldreq	r1, [r5, #-1794]	; 0xfffff8fe
    512c:	78030623 	stmdavc	r3, {r0, r1, r5, r9, sl}
    5130:	02052001 	andeq	r2, r5, #1
    5134:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    5138:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    513c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5140:	06053c0c 	streq	r3, [r5], -ip, lsl #24
    5144:	06030520 	streq	r0, [r3], -r0, lsr #10
    5148:	06060531 			; <UNDEFINED> instruction: 0x06060531
    514c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5150:	05260630 	streq	r0, [r6, #-1584]!	; 0xfffff9d0
    5154:	053a0603 	ldreq	r0, [sl, #-1539]!	; 0xfffff9fd
    5158:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    515c:	4b2f0604 	blmi	bc6974 <__ccfg+0xba69cc>
    5160:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
    5164:	3c710308 	ldclcc	3, cr0, [r1], #-32	; 0xffffffe0
    5168:	13060605 	movwne	r0, #26117	; 0x6605
    516c:	10030105 	andne	r0, r3, r5, lsl #2
    5170:	00090220 	andeq	r0, r9, r0, lsr #4
    5174:	16050101 	strne	r0, [r5], -r1, lsl #2
    5178:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    517c:	03000020 	movweq	r0, #32
    5180:	05010394 	streq	r0, [r1, #-916]	; 0xfffffc6c
    5184:	16051602 	strne	r1, [r5], -r2, lsl #12
    5188:	0e050e06 	cdpeq	14, 0, cr0, cr5, cr6, {0}
    518c:	20050524 	andcs	r0, r5, r4, lsr #10
    5190:	3f060205 	svccc	0x00060205
    5194:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    5198:	0006024b 	andeq	r0, r6, fp, asr #4
    519c:	17050101 	strne	r0, [r5, -r1, lsl #2]
    51a0:	08020500 	stmdaeq	r2, {r8, sl}
    51a4:	03000021 	movweq	r0, #33	; 0x21
    51a8:	050102e0 	streq	r0, [r1, #-736]	; 0xfffffd20
    51ac:	17051602 	strne	r1, [r5, -r2, lsl #12]
    51b0:	0e050e06 	cdpeq	14, 0, cr0, cr5, cr6, {0}
    51b4:	20050524 	andcs	r0, r5, r4, lsr #10
    51b8:	3f060205 	svccc	0x00060205
    51bc:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    51c0:	7eb90306 	cdpvc	3, 11, cr0, cr9, cr6, {0}
    51c4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    51c8:	01c70302 	biceq	r0, r7, r2, lsl #6
    51cc:	3f5a0620 	svccc	0x005a0620
    51d0:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    51d4:	7eb20305 	cdpvc	3, 11, cr0, cr2, cr5, {0}
    51d8:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    51dc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    51e0:	01d00302 	bicseq	r0, r0, r2, lsl #6
    51e4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    51e8:	7eb00335 	mrcvc	3, 5, r0, cr0, cr5, {1}
    51ec:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    51f0:	d0030602 	andle	r0, r3, r2, lsl #12
    51f4:	05312001 	ldreq	r2, [r1, #-1]!
    51f8:	05010648 	streq	r0, [r1, #-1608]	; 0xfffff9b8
    51fc:	31310602 	teqcc	r1, r2, lsl #12
    5200:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    5204:	015f0329 	cmpeq	pc, r9, lsr #6
    5208:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    520c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    5210:	06020501 	streq	r0, [r2], -r1, lsl #10
    5214:	044a1c03 	strbeq	r1, [sl], #-3075	; 0xfffff3fd
    5218:	03290503 			; <UNDEFINED> instruction: 0x03290503
    521c:	0505015f 	streq	r0, [r5, #-351]	; 0xfffffea1
    5220:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    5224:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    5228:	1c030602 	stcne	6, cr0, [r3], {2}
    522c:	014b142e 	cmpeq	fp, lr, lsr #8
    5230:	01010101 	tsteq	r1, r1, lsl #2
    5234:	13060105 	movwne	r0, #24837	; 0x6105
    5238:	01000b02 	tsteq	r0, r2, lsl #22
    523c:	000d0501 	andeq	r0, sp, r1, lsl #10
    5240:	21640205 	cmncs	r4, r5, lsl #4
    5244:	e1030000 	mrs	r0, (UNDEF: 3)
    5248:	20060101 	andcs	r0, r6, r1, lsl #2
    524c:	4f060205 	svcmi	0x00060205
    5250:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5254:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5258:	03052006 	movweq	r2, #20486	; 0x5006
    525c:	06053106 	streq	r3, [r5], -r6, lsl #2
    5260:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5264:	055b3006 	ldrbeq	r3, [fp, #-6]
    5268:	08054c03 	stmdaeq	r5, {r0, r1, sl, fp, lr}
    526c:	053c7503 	ldreq	r7, [ip, #-1283]!	; 0xfffffafd
    5270:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5274:	200c0301 	andcs	r0, ip, r1, lsl #6
    5278:	01000502 	tsteq	r0, r2, lsl #10
    527c:	000d0501 	andeq	r0, sp, r1, lsl #10
    5280:	219c0205 	orrscs	r0, ip, r5, lsl #4
    5284:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    5288:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    528c:	01010903 	tsteq	r1, r3, lsl #18
    5290:	29050304 	stmdbcs	r5, {r2, r8, r9}
    5294:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
    5298:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    529c:	01040106 	tsteq	r4, r6, lsl #2
    52a0:	57030d05 	strpl	r0, [r3, -r5, lsl #26]
    52a4:	0503043c 	streq	r0, [r3, #-1084]	; 0xfffffbc4
    52a8:	2e29032d 	cdpcs	3, 2, cr0, cr9, cr13, {1}
    52ac:	02050104 	andeq	r0, r5, #4, 2
    52b0:	20600306 	rsbcs	r0, r0, r6, lsl #6
    52b4:	29050304 	stmdbcs	r5, {r2, r8, r9}
    52b8:	05011b03 	streq	r1, [r1, #-2819]	; 0xfffff4fd
    52bc:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    52c0:	01040106 	tsteq	r4, r6, lsl #2
    52c4:	03060205 	movweq	r0, #25093	; 0x6205
    52c8:	2f192e60 	svccs	0x00192e60
    52cc:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
    52d0:	1e053c1c 	mcrne	12, 0, r3, cr5, cr12, {0}
    52d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    52d8:	0531062e 	ldreq	r0, [r1, #-1582]!	; 0xfffff9d2
    52dc:	05010648 	streq	r0, [r1, #-1608]	; 0xfffff9b8
    52e0:	48053202 	stmdami	r5, {r1, r9, ip, sp}
    52e4:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    52e8:	02043124 	andeq	r3, r4, #36, 2
    52ec:	e4030505 	str	r0, [r3], #-1285	; 0xfffffafb
    52f0:	3505017e 	strcc	r0, [r5, #-382]	; 0xfffffe82
    52f4:	01040106 	tsteq	r4, r6, lsl #2
    52f8:	9f030205 	svcls	0x00030205
    52fc:	02043c01 	andeq	r3, r4, #256	; 0x100
    5300:	e1033505 	tst	r3, r5, lsl #10
    5304:	0104207e 	tsteq	r4, lr, ror r0
    5308:	03060205 	movweq	r0, #25093	; 0x6205
    530c:	3220019f 	eorcc	r0, r0, #-1073741785	; 0xc0000027
    5310:	04050404 	streq	r0, [r5], #-1028	; 0xfffffbfc
    5314:	03011003 	movweq	r1, #4099	; 0x1003
    5318:	01050173 	tsteq	r5, r3, ror r1
    531c:	05016b03 	streq	r6, [r1, #-2819]	; 0xfffff4fd
    5320:	01160304 	tsteq	r6, r4, lsl #6
    5324:	15016103 	strne	r6, [r1, #-259]	; 0xfffffefd
    5328:	03661d03 	cmneq	r6, #3, 26	; 0xc0
    532c:	1513016d 	ldrne	r0, [r3, #-365]	; 0xfffffe93
    5330:	01061205 	tsteq	r6, r5, lsl #4
    5334:	04050504 	streq	r0, [r5], #-1284	; 0xfffffafc
    5338:	2e01f103 	mvfcss	f7, f3
    533c:	12050404 	andne	r0, r5, #4, 8	; 0x4000000
    5340:	207e8f03 	rsbscs	r8, lr, r3, lsl #30
    5344:	21060405 	tstcs	r6, r5, lsl #8
    5348:	13061205 	movwne	r1, #25093	; 0x6205
    534c:	3d13053d 	cfldr32cc	mvfx0, [r3, #-244]	; 0xffffff0c
    5350:	2f12052f 	svccs	0x0012052f
    5354:	053e1105 	ldreq	r1, [lr, #-261]!	; 0xfffffefb
    5358:	20790312 	rsbscs	r0, r9, r2, lsl r3
    535c:	2f060405 	svccs	0x00060405
    5360:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    5364:	06110514 			; <UNDEFINED> instruction: 0x06110514
    5368:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
    536c:	01d4031c 	bicseq	r0, r4, ip, lsl r3
    5370:	1f140520 	svcne	0x00140520
    5374:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    5378:	05130705 	ldreq	r0, [r3, #-1797]	; 0xfffff8fb
    537c:	1b18060a 	blne	606bac <__ccfg+0x5e6c04>
    5380:	2f060705 	svccs	0x00060705
    5384:	13060a05 	movwne	r0, #27141	; 0x6a05
    5388:	2f060705 	svccs	0x00060705
    538c:	13060a05 	movwne	r0, #27141	; 0x6a05
    5390:	2f060705 	svccs	0x00060705
    5394:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    5398:	210d0501 	tstcs	sp, r1, lsl #10
    539c:	212f2f2f 			; <UNDEFINED> instruction: 0x212f2f2f
    53a0:	04052121 	streq	r2, [r5], #-289	; 0xfffffedf
    53a4:	06070530 			; <UNDEFINED> instruction: 0x06070530
    53a8:	133c7803 	teqne	ip, #196608	; 0x30000
    53ac:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    53b0:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    53b4:	0c052e06 	stceq	14, cr2, [r5], {6}
    53b8:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    53bc:	22060106 	andcs	r0, r6, #-2147483647	; 0x80000001
    53c0:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    53c4:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    53c8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    53cc:	7e950309 	cdpvc	3, 9, cr0, cr5, cr9, {0}
    53d0:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
    53d4:	01eb030a 	mvneq	r0, sl, lsl #6
    53d8:	06040520 	streq	r0, [r4], -r0, lsr #10
    53dc:	060a0521 	streq	r0, [sl], -r1, lsr #10
    53e0:	06040501 	streq	r0, [r4], -r1, lsl #10
    53e4:	060a052f 	streq	r0, [sl], -pc, lsr #10
    53e8:	06040501 	streq	r0, [r4], -r1, lsl #10
    53ec:	060a052f 	streq	r0, [sl], -pc, lsr #10
    53f0:	06040501 	streq	r0, [r4], -r1, lsl #10
    53f4:	060a052f 	streq	r0, [sl], -pc, lsr #10
    53f8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    53fc:	91030609 	tstls	r3, r9, lsl #12
    5400:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    5404:	3f090536 	svccc	0x00090536
    5408:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    540c:	435c3e3c 	cmpmi	ip, #60, 28	; 0x3c0
    5410:	06135a3d 			; <UNDEFINED> instruction: 0x06135a3d
    5414:	69061b25 	stmdbvs	r6, {r0, r2, r5, r8, r9, fp, ip}
    5418:	01063005 	tsteq	r6, r5
    541c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5420:	01062d05 	tsteq	r6, r5, lsl #26
    5424:	2f060205 	svccs	0x00060205
    5428:	1f062d05 	svcne	0x00062d05
    542c:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
    5430:	02052801 	andeq	r2, r5, #65536	; 0x10000
    5434:	022e7803 	eoreq	r7, lr, #196608	; 0x30000
    5438:	01010033 	tsteq	r1, r3, lsr r0
    543c:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    5440:	00231c02 	eoreq	r1, r3, r2, lsl #24
    5444:	03b40300 			; <UNDEFINED> instruction: 0x03b40300
    5448:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    544c:	01090313 	tsteq	r9, r3, lsl r3
    5450:	03050204 	movweq	r0, #20996	; 0x5204
    5454:	017dee03 	cmneq	sp, r3, lsl #28
    5458:	1e050104 	adfnes	f0, f5, f4
    545c:	02860306 	addeq	r0, r6, #402653184	; 0x18000000
    5460:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    5464:	7dfa0330 	ldclvc	3, cr0, [sl, #192]!	; 0xc0
    5468:	7b32052e 	blvc	c86928 <__ccfg+0xc66980>
    546c:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
    5470:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    5474:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    5478:	05210609 	streq	r0, [r1, #-1545]!	; 0xfffff9f7
    547c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5480:	33062003 	movwcc	r2, #24579	; 0x6003
    5484:	0a050104 	beq	14589c <__ccfg+0x1258f4>
    5488:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    548c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    5490:	7df50330 	ldclvc	3, cr0, [r5, #192]!	; 0xc0
    5494:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    5498:	029e0305 	addseq	r0, lr, #335544320	; 0x14000000
    549c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    54a0:	7de20330 	stclvc	3, cr0, [r2, #192]!	; 0xc0
    54a4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    54a8:	0291032d 	addseq	r0, r1, #-1275068416	; 0xb4000000
    54ac:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    54b0:	7def0330 	stclvc	3, cr0, [pc, #192]!	; 5578 <__exidx_end+0x648>
    54b4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    54b8:	8b030602 	blhi	c6cc8 <__ccfg+0xa6d20>
    54bc:	27055802 	strcs	r5, [r5, -r2, lsl #16]
    54c0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    54c4:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    54c8:	2e71030a 	cdpcs	3, 7, cr0, cr1, cr10, {0}
    54cc:	2f060605 	svccs	0x00060605
    54d0:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    54d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    54d8:	013d0604 	teqeq	sp, r4, lsl #12
    54dc:	19051301 	stmdbne	r5, {r0, r8, r9, ip}
    54e0:	0d051406 	cfstrseq	mvf1, [r5, #-24]	; 0xffffffe8
    54e4:	201d0520 	andscs	r0, sp, r0, lsr #10
    54e8:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    54ec:	04051e06 	streq	r1, [r5], #-3590	; 0xfffff1fa
    54f0:	07053006 	streq	r3, [r5, -r6]
    54f4:	21050106 	tstcs	r5, r6, lsl #2
    54f8:	4a370520 	bmi	dc6980 <__ccfg+0xda69d8>
    54fc:	3f060505 	svccc	0x00060505
    5500:	16061505 	strne	r1, [r6], -r5, lsl #10
    5504:	052a0805 	streq	r0, [sl, #-2053]!	; 0xfffff7fb
    5508:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    550c:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    5510:	1f052013 	svcne	0x00052013
    5514:	20130520 	andscs	r0, r3, r0, lsr #10
    5518:	21060505 	tstcs	r6, r5, lsl #10
    551c:	01060f05 	tsteq	r6, r5, lsl #30
    5520:	2f060505 	svccs	0x00060505
    5524:	056e0405 	strbeq	r0, [lr, #-1029]!	; 0xfffffbfb
    5528:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    552c:	6a030613 	bvs	c6d80 <__ccfg+0xa6dd8>
    5530:	0106052e 	tsteq	r6, lr, lsr #10
    5534:	11060205 	tstne	r6, r5, lsl #4
    5538:	052f1b05 	streq	r1, [pc, #-2821]!	; 4a3b <patchGenfskRfe+0x48f>
    553c:	12030605 	andne	r0, r3, #5242880	; 0x500000
    5540:	0302053c 	movweq	r0, #9532	; 0x253c
    5544:	05054a0a 	streq	r4, [r5, #-2570]	; 0xfffff5f6
    5548:	03050106 	movweq	r0, #20742	; 0x5106
    554c:	01012106 	tsteq	r1, r6, lsl #2
    5550:	05010114 	streq	r0, [r1, #-276]	; 0xfffffeec
    5554:	05310601 	ldreq	r0, [r1, #-1537]!	; 0xfffff9ff
    5558:	01052b03 	tsteq	r5, r3, lsl #22
    555c:	00130269 	andseq	r0, r3, r9, ror #4
    5560:	01050101 	tsteq	r5, r1, lsl #2
    5564:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    5568:	03000023 	movweq	r0, #35	; 0x23
    556c:	0101048c 	smlabbeq	r1, ip, r4, r0
    5570:	03052e06 	movweq	r2, #24070	; 0x5e06
    5574:	820a0306 	andhi	r0, sl, #402653184	; 0x18000000
    5578:	01060705 	tsteq	r6, r5, lsl #14
    557c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5580:	304c0604 	subcc	r0, ip, r4, lsl #12
    5584:	054f0305 	strbeq	r0, [pc, #-773]	; 5287 <__exidx_end+0x357>
    5588:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    558c:	04052006 	streq	r2, [r5], #-6
    5590:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    5594:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5598:	03052106 	movweq	r2, #20742	; 0x5106
    559c:	060e0536 			; <UNDEFINED> instruction: 0x060e0536
    55a0:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    55a4:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    55a8:	01062405 	tsteq	r6, r5, lsl #8
    55ac:	05581b05 	ldrbeq	r1, [r8, #-2821]	; 0xfffff4fb
    55b0:	05052007 	streq	r2, [r5, #-7]
    55b4:	13063306 	movwne	r3, #25350	; 0x6306
    55b8:	051f0c05 	ldreq	r0, [pc, #-3077]	; 49bb <patchGenfskRfe+0x40f>
    55bc:	0c052105 	stfeqs	f2, [r5], {5}
    55c0:	2105051f 	tstcs	r5, pc, lsl r5
    55c4:	051f0c05 	ldreq	r0, [pc, #-3077]	; 49c7 <patchGenfskRfe+0x41b>
    55c8:	01210605 			; <UNDEFINED> instruction: 0x01210605
    55cc:	062e2006 	strteq	r2, [lr], -r6
    55d0:	030a052e 	movweq	r0, #42286	; 0xa52e
    55d4:	0d054a72 	vstreq	s8, [r5, #-456]	; 0xfffffe38
    55d8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    55dc:	02053006 	andeq	r3, r5, #6
    55e0:	017dde03 	cmneq	sp, r3, lsl #28
    55e4:	01060505 	tsteq	r6, r5, lsl #10
    55e8:	03060205 	movweq	r0, #25093	; 0x6205
    55ec:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    55f0:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    55f4:	0605200a 	streq	r2, [r5], -sl
    55f8:	03052f06 	movweq	r2, #24326	; 0x5f06
    55fc:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    5600:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    5604:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    5608:	06060501 	streq	r0, [r6], -r1, lsl #10
    560c:	13030520 	movwne	r0, #13600	; 0x3520
    5610:	01060e05 	tsteq	r6, r5, lsl #28
    5614:	1f061305 	svcne	0x00061305
    5618:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    561c:	03301602 	teqeq	r0, #2097152	; 0x200000
    5620:	01017447 	tsteq	r1, r7, asr #8
    5624:	cd030405 	cfstrsgt	mvf0, [r3, #-20]	; 0xffffffec
    5628:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    562c:	017ede03 	cmneq	lr, r3, lsl #28
    5630:	05051413 	streq	r1, [r5, #-1043]	; 0xfffffbed
    5634:	03060106 	movweq	r0, #24838	; 0x6106
    5638:	154a01aa 	strbne	r0, [sl, #-426]	; 0xfffffe56
    563c:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    5640:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5644:	08052e10 	stmdaeq	r5, {r4, r9, sl, fp, sp}
    5648:	0606052e 	streq	r0, [r6], -lr, lsr #10
    564c:	06290522 	strteq	r0, [r9], -r2, lsr #10
    5650:	06050501 	streq	r0, [r5], -r1, lsl #10
    5654:	061b0531 			; <UNDEFINED> instruction: 0x061b0531
    5658:	06030501 	streq	r0, [r3], -r1, lsl #10
    565c:	06060532 			; <UNDEFINED> instruction: 0x06060532
    5660:	06040501 	streq	r0, [r4], -r1, lsl #10
    5664:	0f054b30 	svceq	0x00054b30
    5668:	07050106 	streq	r0, [r5, -r6, lsl #2]
    566c:	06050520 	streq	r0, [r5], -r0, lsr #10
    5670:	35040530 	strcc	r0, [r4, #-1328]	; 0xfffffad0
    5674:	052a0b05 	streq	r0, [sl, #-2821]!	; 0xfffff4fb
    5678:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    567c:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    5680:	07056b03 	streq	r6, [r5, -r3, lsl #22]
    5684:	06050106 	streq	r0, [r5], -r6, lsl #2
    5688:	06040520 	streq	r0, [r4], -r0, lsr #10
    568c:	054b5933 	strbeq	r5, [fp, #-2355]	; 0xfffff6cd
    5690:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5694:	10030603 	andne	r0, r3, r3, lsl #12
    5698:	0302054a 	movweq	r0, #9546	; 0x254a
    569c:	05017d9e 	streq	r7, [r1, #-3486]	; 0xfffff262
    56a0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    56a4:	d6030602 	strle	r0, [r3], -r2, lsl #12
    56a8:	01015800 	tsteq	r1, r0, lsl #16
    56ac:	8d030305 	stchi	3, cr0, [r3, #-20]	; 0xffffffec
    56b0:	1e030102 	adfnes	f0, f3, f2
    56b4:	0619052e 	ldreq	r0, [r9], -lr, lsr #10
    56b8:	21310501 	teqcs	r1, r1, lsl #10
    56bc:	052d1905 	streq	r1, [sp, #-2309]!	; 0xfffff6fb
    56c0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    56c4:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    56c8:	31052203 	tstcc	r5, r3, lsl #4
    56cc:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    56d0:	07053222 	streq	r3, [r5, -r2, lsr #4]
    56d4:	06050106 	streq	r0, [r5], -r6, lsl #2
    56d8:	06030520 	streq	r0, [r3], -r0, lsr #10
    56dc:	0608055b 			; <UNDEFINED> instruction: 0x0608055b
    56e0:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    56e4:	31060405 	tstcc	r6, r5, lsl #8
    56e8:	05410305 	strbeq	r0, [r1, #-773]	; 0xfffffcfb
    56ec:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    56f0:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    56f4:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    56f8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    56fc:	1b054106 	blne	155b1c <__ccfg+0x135b74>
    5700:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5704:	33052f06 	movwcc	r2, #24326	; 0x5f06
    5708:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    570c:	052f3e06 	streq	r3, [pc, #-3590]!	; 490e <patchGenfskRfe+0x362>
    5710:	0b053f04 	bleq	155328 <__ccfg+0x135380>
    5714:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5718:	3c090306 	stccc	3, cr0, [r9], {6}
    571c:	03050101 	movweq	r0, #20737	; 0x5101
    5720:	00c30306 	sbceq	r0, r3, r6, lsl #6
    5724:	03420658 	movteq	r0, #9816	; 0x2658
    5728:	053d206d 	ldreq	r2, [sp, #-109]!	; 0xffffff93
    572c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5730:	2e0c0303 	cdpcs	3, 0, cr0, cr12, cr3, {0}
    5734:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    5738:	06030520 	streq	r0, [r3], -r0, lsr #10
    573c:	060b0527 	streq	r0, [fp], -r7, lsr #10
    5740:	06030501 	streq	r0, [r3], -r1, lsl #10
    5744:	15010122 	strne	r0, [r1, #-290]	; 0xfffffede
    5748:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    574c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5750:	1f052e06 	svcne	0x00052e06
    5754:	3d070558 	cfstr32cc	mvfx0, [r7, #-352]	; 0xfffffea0
    5758:	05493e05 	strbeq	r3, [r9, #-3589]	; 0xfffff1fb
    575c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5760:	02013f01 	andeq	r3, r1, #1, 30
    5764:	01010020 	tsteq	r1, r0, lsr #32
    5768:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    576c:	0025dc02 	eoreq	sp, r5, r2, lsl #24
    5770:	03eb0300 	mvneq	r0, #0, 6
    5774:	17020501 	strne	r0, [r2, -r1, lsl #10]
    5778:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
    577c:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
    5780:	03052e05 	movweq	r2, #24069	; 0x5e05
    5784:	02042306 	andeq	r2, r4, #402653184	; 0x18000000
    5788:	03063005 	movweq	r3, #24581	; 0x6005
    578c:	05667eb0 	strbeq	r7, [r6, #-3760]!	; 0xfffff150
    5790:	051b0603 	ldreq	r0, [fp, #-1539]	; 0xfffff9fd
    5794:	30051705 	andcc	r1, r5, r5, lsl #14
    5798:	0a050106 	beq	145bb8 <__ccfg+0x125c10>
    579c:	0b052106 	bleq	14dbbc <__ccfg+0x12dc14>
    57a0:	03050106 	movweq	r0, #20742	; 0x5106
    57a4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    57a8:	d6030602 	strle	r0, [r3], -r2, lsl #12
    57ac:	02042e01 	andeq	r2, r4, #1, 28
    57b0:	81030305 	tsthi	r3, r5, lsl #6
    57b4:	3205017e 	andcc	r0, r5, #-2147483617	; 0x8000001f
    57b8:	01040106 	tsteq	r4, r6, lsl #2
    57bc:	82030205 	andhi	r0, r3, #1342177280	; 0x50000000
    57c0:	02042002 	andeq	r2, r4, #2
    57c4:	fe033205 	cdp2	2, 0, cr3, cr3, cr5, {0}
    57c8:	0104207d 	tsteq	r4, sp, ror r0
    57cc:	82030205 	andhi	r0, r3, #1342177280	; 0x50000000
    57d0:	82062e02 	andhi	r2, r6, #2, 28
    57d4:	014a582e 	cmpeq	sl, lr, lsr #16
    57d8:	05580114 	ldrbeq	r0, [r8, #-276]	; 0xfffffeec
    57dc:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    57e0:	0101000d 	tsteq	r1, sp
    57e4:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
    57e8:	00264c02 	eoreq	r4, r6, r2, lsl #24
    57ec:	07d60300 	ldrbeq	r0, [r6, r0, lsl #6]
    57f0:	03020501 	movweq	r0, #9473	; 0x2501
    57f4:	25050109 	strcs	r0, [r5, #-265]	; 0xfffffef7
    57f8:	01770306 	cmneq	r7, r6, lsl #6
    57fc:	09030d05 	stmdbeq	r3, {r0, r2, r8, sl, fp}
    5800:	0325052e 			; <UNDEFINED> instruction: 0x0325052e
    5804:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
    5808:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    580c:	06300603 	ldrteq	r0, [r0], -r3, lsl #12
    5810:	06020536 			; <UNDEFINED> instruction: 0x06020536
    5814:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    5818:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    581c:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    5820:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5824:	03052005 	movweq	r2, #20485	; 0x5005
    5828:	07053006 	streq	r3, [r5, -r6]
    582c:	02053706 	andeq	r3, r5, #1572864	; 0x180000
    5830:	04052806 	streq	r2, [r5], #-2054	; 0xfffff7fa
    5834:	7ea10306 	cdpvc	3, 10, cr0, cr1, cr6, {0}
    5838:	03090501 	movweq	r0, #38145	; 0x9501
    583c:	052001df 	streq	r0, [r0, #-479]!	; 0xfffffe21
    5840:	7eac030e 	cdpvc	3, 10, cr0, cr12, cr14, {0}
    5844:	2813052e 	ldmdacs	r3, {r1, r2, r3, r5, r8, sl}
    5848:	cc030b05 			; <UNDEFINED> instruction: 0xcc030b05
    584c:	02052e01 	andeq	r2, r5, #1, 28
    5850:	9b032306 	blls	ce470 <__ccfg+0xae4c8>
    5854:	1413017e 	ldrne	r0, [r3], #-382	; 0xfffffe82
    5858:	13030513 	movwne	r0, #13587	; 0x3513
    585c:	13060405 	movwne	r0, #25605	; 0x6405
    5860:	5d060305 	stcpl	3, cr0, [r6, #-20]	; 0xffffffec
    5864:	01060605 	tsteq	r6, r5, lsl #12
    5868:	2f060405 	svccs	0x00060405
    586c:	055a0305 	ldrbeq	r0, [sl, #-773]	; 0xfffffcfb
    5870:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5874:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    5878:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    587c:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5880:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    5884:	13320603 	teqne	r2, #3145728	; 0x300000
    5888:	06060513 			; <UNDEFINED> instruction: 0x06060513
    588c:	1f170514 	svcne	0x00170514
    5890:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    5894:	13051f17 	movwne	r1, #24343	; 0x5f17
    5898:	0603052b 	streq	r0, [r3], -fp, lsr #10
    589c:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
    58a0:	06030501 	streq	r0, [r3], -r1, lsl #10
    58a4:	06060521 	streq	r0, [r6], -r1, lsr #10
    58a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    58ac:	06110526 	ldreq	r0, [r1], -r6, lsr #10
    58b0:	06020501 	streq	r0, [r2], -r1, lsl #10
    58b4:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    58b8:	3c090501 	cfstr32cc	mvfx0, [r9], {1}
    58bc:	31060205 	tstcc	r6, r5, lsl #4
    58c0:	01060505 	tsteq	r6, r5, lsl #10
    58c4:	31060205 	tstcc	r6, r5, lsl #4
    58c8:	01061505 	tsteq	r6, r5, lsl #10
    58cc:	21060205 	tstcs	r6, r5, lsl #4
    58d0:	01061505 	tsteq	r6, r5, lsl #10
    58d4:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
    58d8:	01c0030b 	biceq	r0, r0, fp, lsl #6
    58dc:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    58e0:	05207ec0 	streq	r7, [r0, #-3776]!	; 0xfffff140
    58e4:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    58e8:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    58ec:	01bd030b 			; <UNDEFINED> instruction: 0x01bd030b
    58f0:	03190520 	tsteq	r9, #32, 10	; 0x8000000
    58f4:	05207ec3 	streq	r7, [r0, #-3779]!	; 0xfffff13d
    58f8:	13230602 			; <UNDEFINED> instruction: 0x13230602
    58fc:	05161315 	ldreq	r1, [r6, #-789]	; 0xfffffceb
    5900:	77030625 	strvc	r0, [r3, -r5, lsr #12]
    5904:	06020501 	streq	r0, [r2], -r1, lsl #10
    5908:	05660c03 	strbeq	r0, [r6, #-3075]!	; 0xfffff3fd
    590c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5910:	01ae030b 			; <UNDEFINED> instruction: 0x01ae030b
    5914:	03090520 	movweq	r0, #38176	; 0x9520
    5918:	052e7ed2 	streq	r7, [lr, #-3794]!	; 0xfffff12e
    591c:	ab030602 	blge	c712c <__ccfg+0xa7184>
    5920:	09052e01 	stmdbeq	r5, {r0, r9, sl, fp, sp}
    5924:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5928:	0b053106 	bleq	151d48 <__ccfg+0x131da0>
    592c:	09050106 	stmdbeq	r5, {r1, r2, r8}
    5930:	2702052e 	strcs	r0, [r2, -lr, lsr #10]
    5934:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    5938:	0602052e 	streq	r0, [r2], -lr, lsr #10
    593c:	13010122 	movwne	r0, #4386	; 0x1122
    5940:	01130101 	tsteq	r3, r1, lsl #2
    5944:	3f4f1501 	svccc	0x004f1501
    5948:	01060c05 	tsteq	r6, r5, lsl #24
    594c:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    5950:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    5954:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5958:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    595c:	22056002 	andcs	r6, r5, #2
    5960:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    5964:	3c7ba003 	ldclcc	0, cr10, [fp], #-12
    5968:	e0032205 	and	r2, r3, r5, lsl #4
    596c:	02052004 	andeq	r2, r5, #4
    5970:	9b032406 	blls	ce990 <__ccfg+0xae9e8>
    5974:	3f05017b 	svccc	0x0005017b
    5978:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    597c:	44053d06 	strmi	r3, [r5], #-3334	; 0xfffff2fa
    5980:	2e050106 	adfcss	f0, f5, f6
    5984:	0602052d 	streq	r0, [r2], -sp, lsr #10
    5988:	0804e703 	stmdaeq	r4, {r0, r1, r8, r9, sl, sp, lr, pc}
    598c:	28053220 	stmdacs	r5, {r5, r9, ip, sp}
    5990:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5994:	1d280523 	cfstr32ne	mvfx0, [r8, #-140]!	; 0xffffff74
    5998:	23060205 	movwcs	r0, #25093	; 0x6205
    599c:	052f0905 	streq	r0, [pc, #-2309]!	; 509f <__exidx_end+0x16f>
    59a0:	30054e02 	andcc	r4, r5, r2, lsl #28
    59a4:	01050106 	tsteq	r5, r6, lsl #2
    59a8:	0027022f 	eoreq	r0, r7, pc, lsr #4
    59ac:	02a80101 	adceq	r0, r8, #1073741824	; 0x40000000
    59b0:	00030000 	andeq	r0, r3, r0
    59b4:	0000014c 	andeq	r0, r0, ip, asr #2
    59b8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    59bc:	0101000d 	tsteq	r1, sp
    59c0:	00000101 	andeq	r0, r0, r1, lsl #2
    59c4:	00000100 	andeq	r0, r0, r0, lsl #2
    59c8:	73752f01 	cmnvc	r5, #1, 30
    59cc:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    59d0:	63672f62 	cmnvs	r7, #392	; 0x188
    59d4:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    59d8:	6f6e2d6d 	svcvs	0x006e2d6d
    59dc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    59e0:	2f696261 	svccs	0x00696261
    59e4:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    59e8:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    59ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    59f0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    59f4:	2f656d6f 	svccs	0x00656d6f
    59f8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    59fc:	442f6e69 	strtmi	r6, [pc], #-3689	; 5a04 <__exidx_end+0xad4>
    5a00:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5a04:	4f2f706f 	svcmi	0x002f706f
    5a08:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5a0c:	502f5445 	eorpl	r5, pc, r5, asr #8
    5a10:	534f4349 	movtpl	r4, #62281	; 0xf349
    5a14:	6369502f 	cmnvs	r9, #47	; 0x2f
    5a18:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5a1c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5a20:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5a24:	2f656d6f 	svccs	0x00656d6f
    5a28:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5a2c:	442f6e69 	strtmi	r6, [pc], #-3689	; 5a34 <__exidx_end+0xb04>
    5a30:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5a34:	4f2f706f 	svcmi	0x002f706f
    5a38:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5a3c:	502f5445 	eorpl	r5, pc, r5, asr #8
    5a40:	534f4349 	movtpl	r4, #62281	; 0xf349
    5a44:	6369502f 	cmnvs	r9, #47	; 0x2f
    5a48:	2f00534f 	svccs	0x0000534f
    5a4c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5a50:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5a54:	2f6e6974 	svccs	0x006e6974
    5a58:	6b736544 	blvs	1cdef70 <__ccfg+0x1cbefc8>
    5a5c:	2f706f74 	svccs	0x00706f74
    5a60:	4f534c4f 	svcmi	0x00534c4f
    5a64:	2f54454e 	svccs	0x0054454e
    5a68:	4f434950 	svcmi	0x00434950
    5a6c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5a70:	2f534f63 	svccs	0x00534f63
    5a74:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    5a78:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    5a7c:	00497465 	subeq	r7, r9, r5, ror #8
    5a80:	756c7000 	strbvc	r7, [ip, #-0]!
    5a84:	756e5f67 	strbvc	r5, [lr, #-3943]!	; 0xfffff099
    5a88:	632e6c6c 			; <UNDEFINED> instruction: 0x632e6c6c
    5a8c:	00000063 	andeq	r0, r0, r3, rrx
    5a90:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5a94:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5a98:	00010068 	andeq	r0, r1, r8, rrx
    5a9c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5aa0:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5aa4:	00010068 	andeq	r0, r1, r8, rrx
    5aa8:	63726100 	cmnvs	r2, #0, 2
    5aac:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5ab0:	6d000002 	stcvs	0, cr0, [r0, #-8]
    5ab4:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5ab8:	00020068 	andeq	r0, r2, r8, rrx
    5abc:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5ac0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5ac4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5ac8:	62000002 	andvs	r0, r0, #2
    5acc:	6f747475 	svcvs	0x00747475
    5ad0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5ad4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5ad8:	00000200 	andeq	r0, r0, r0, lsl #4
    5adc:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5ae0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5ae4:	74000003 	strvc	r0, [r0], #-3
    5ae8:	645f7663 	ldrbvs	r7, [pc], #-1635	; 5af0 <__exidx_end+0xbc0>
    5aec:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
    5af0:	00040068 	andeq	r0, r4, r8, rrx
    5af4:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    5af8:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    5afc:	003e6e69 	eorseq	r6, lr, r9, ror #28
    5b00:	00000000 	andeq	r0, r0, r0
    5b04:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    5b08:	0027c002 	eoreq	ip, r7, r2
    5b0c:	01360300 	teqeq	r6, r0, lsl #6
    5b10:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    5b14:	050e062b 	streq	r0, [lr, #-1579]	; 0xfffff9d5
    5b18:	2b052410 	blcs	14eb60 <__ccfg+0x12ebb8>
    5b1c:	2410051c 	ldrcs	r0, [r0], #-1308	; 0xfffffae4
    5b20:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    5b24:	02052015 	andeq	r2, r5, #21
    5b28:	12053f06 	andne	r3, r5, #6, 30
    5b2c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5b30:	09053d06 	stmdbeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    5b34:	01050106 	tsteq	r5, r6, lsl #2
    5b38:	00040221 	andeq	r0, r4, r1, lsr #4
    5b3c:	1f050101 	svcne	0x00050101
    5b40:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
    5b44:	03000027 	movweq	r0, #39	; 0x27
    5b48:	050100c2 	streq	r0, [r1, #-194]	; 0xffffff3e
    5b4c:	10051402 	andne	r1, r5, r2, lsl #8
    5b50:	1f050106 	svcne	0x00050106
    5b54:	2210051e 	andscs	r0, r0, #125829120	; 0x7800000
    5b58:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5b5c:	2a05210a 	bcs	14df8c <__ccfg+0x12dfe4>
    5b60:	2e1e052d 	cfmul64cs	mvdx0, mvdx14, mvdx13
    5b64:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
    5b68:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    5b6c:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    5b70:	1e052209 	cdpne	2, 0, cr2, cr5, cr9, {0}
    5b74:	200f051e 	andcs	r0, pc, lr, lsl r5	; <UNPREDICTABLE>
    5b78:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    5b7c:	13060105 	movwne	r0, #24837	; 0x6105
    5b80:	01000302 	tsteq	r0, r2, lsl #6
    5b84:	00370501 	eorseq	r0, r7, r1, lsl #10
    5b88:	28080205 	stmdacs	r8, {r0, r2, r9}
    5b8c:	cc030000 	stcgt	0, cr0, [r3], {-0}
    5b90:	02050100 	andeq	r0, r5, #0, 2
    5b94:	06250514 			; <UNDEFINED> instruction: 0x06250514
    5b98:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    5b9c:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    5ba0:	01010001 	tsteq	r1, r1
    5ba4:	05002505 	streq	r2, [r0, #-1285]	; 0xfffffafb
    5ba8:	00281002 	eoreq	r1, r8, r2
    5bac:	00d10300 	sbcseq	r0, r1, r0, lsl #6
    5bb0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5bb4:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
    5bb8:	01000202 	tsteq	r0, r2, lsl #4
    5bbc:	00250501 	eoreq	r0, r5, r1, lsl #10
    5bc0:	28140205 	ldmdacs	r4, {r0, r2, r9}
    5bc4:	d7030000 	strle	r0, [r3, -r0]
    5bc8:	02050100 	andeq	r0, r5, #0, 2
    5bcc:	06010514 			; <UNDEFINED> instruction: 0x06010514
    5bd0:	00020213 	andeq	r0, r2, r3, lsl r2
    5bd4:	39050101 	stmdbcc	r5, {r0, r8}
    5bd8:	18020500 	stmdane	r2, {r8, sl}
    5bdc:	03000028 	movweq	r0, #40	; 0x28
    5be0:	10050120 	andne	r0, r5, r0, lsr #2
    5be4:	39052606 	stmdbcc	r5, {r1, r2, r9, sl, sp}
    5be8:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    5bec:	14240602 	strtne	r0, [r4], #-1538	; 0xfffff9fe
    5bf0:	01060505 	tsteq	r6, r5, lsl #10
    5bf4:	7a033905 	bvc	d4010 <__ccfg+0xb4068>
    5bf8:	26050520 	strcs	r0, [r5], -r0, lsr #10
    5bfc:	21060305 	tstcs	r6, r5, lsl #6
    5c00:	01062005 	tsteq	r6, r5
    5c04:	053c0d05 	ldreq	r0, [ip, #-3333]!	; 0xfffff2fb
    5c08:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5c0c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5c10:	0522060f 	streq	r0, [r2, #-1551]!	; 0xfffff9f1
    5c14:	12051304 	andne	r1, r5, #4, 6	; 0x10000000
    5c18:	16050106 	strne	r0, [r5], -r6, lsl #2
    5c1c:	0f054906 	svceq	0x00054906
    5c20:	13040501 	movwne	r0, #17665	; 0x4501
    5c24:	01061205 	tsteq	r6, r5, lsl #4
    5c28:	1f061605 	svcne	0x00061605
    5c2c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    5c30:	10051702 	andne	r1, r5, r2, lsl #14
    5c34:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5c38:	06020520 	streq	r0, [r2], -r0, lsr #10
    5c3c:	0612053f 			; <UNDEFINED> instruction: 0x0612053f
    5c40:	06020501 	streq	r0, [r2], -r1, lsl #10
    5c44:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    5c48:	1d0a0501 	cfstr32ne	mvfx0, [sl, #-4]
    5c4c:	05320105 	ldreq	r0, [r2, #-261]!	; 0xfffffefb
    5c50:	75030604 	strvc	r0, [r3, #-1540]	; 0xfffff9fc
    5c54:	00090220 	andeq	r0, r9, r0, lsr #4
    5c58:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
    5c5c:	00030000 	andeq	r0, r3, r0
    5c60:	00000126 	andeq	r0, r0, r6, lsr #2
    5c64:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5c68:	0101000d 	tsteq	r1, sp
    5c6c:	00000101 	andeq	r0, r0, r1, lsl #2
    5c70:	00000100 	andeq	r0, r0, r0, lsl #2
    5c74:	6f682f01 	svcvs	0x00682f01
    5c78:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5acc <__exidx_end+0xb9c>
    5c7c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5c80:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5c84:	6f746b73 	svcvs	0x00746b73
    5c88:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5c8c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5c90:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5c94:	2f534f43 	svccs	0x00534f43
    5c98:	4f636950 	svcmi	0x00636950
    5c9c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5ca0:	2f736269 	svccs	0x00736269
    5ca4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5ca8:	2f006c61 	svccs	0x00006c61
    5cac:	2f727375 	svccs	0x00727375
    5cb0:	2f62696c 	svccs	0x0062696c
    5cb4:	2f636367 	svccs	0x00636367
    5cb8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5cbc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5cc0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5cc4:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5cc8:	2f312e32 	svccs	0x00312e32
    5ccc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5cd0:	00656475 	rsbeq	r6, r5, r5, ror r4
    5cd4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5c20 <__exidx_end+0xcf0>
    5cd8:	616d2f65 	cmnvs	sp, r5, ror #30
    5cdc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5ce0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5ce4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5ce8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5cec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5cf0:	4349502f 	movtmi	r5, #36911	; 0x902f
    5cf4:	502f534f 	eorpl	r5, pc, pc, asr #6
    5cf8:	534f6369 	movtpl	r6, #62313	; 0xf369
    5cfc:	3143432f 	cmpcc	r3, pc, lsr #6
    5d00:	00585833 	subseq	r5, r8, r3, lsr r8
    5d04:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5c50 <__exidx_end+0xd20>
    5d08:	616d2f65 	cmnvs	sp, r5, ror #30
    5d0c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5d10:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5d14:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5d18:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5d1c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5d20:	4349502f 	movtmi	r5, #36911	; 0x902f
    5d24:	502f534f 	eorpl	r5, pc, pc, asr #6
    5d28:	534f6369 	movtpl	r6, #62313	; 0xf369
    5d2c:	5f5f0000 	svcpl	0x005f0000
    5d30:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    5d34:	61697265 	cmnvs	r9, r5, ror #4
    5d38:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    5d3c:	73000001 	movwvc	r0, #1
    5d40:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5d44:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5d48:	61000002 	tstvs	r0, r2
    5d4c:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5d50:	00030068 	andeq	r0, r3, r8, rrx
    5d54:	63616d00 	cmnvs	r1, #0, 26
    5d58:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5d5c:	70000003 	andvc	r0, r0, r3
    5d60:	5f736e69 	svcpl	0x00736e69
    5d64:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5d68:	00030068 	andeq	r0, r3, r8, rrx
    5d6c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5d70:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5d74:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5d78:	0300682e 	movweq	r6, #2094	; 0x82e
    5d7c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5d80:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5d84:	00040068 	andeq	r0, r4, r8, rrx
    5d88:	01050000 	mrseq	r0, (UNDEF: 5)
    5d8c:	60020500 	andvs	r0, r2, r0, lsl #10
    5d90:	03000028 	movweq	r0, #40	; 0x28
    5d94:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    5d98:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    5d9c:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    5da0:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    5da4:	01151313 	tsteq	r5, r3, lsl r3
    5da8:	06051301 	streq	r1, [r5], -r1, lsl #6
    5dac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5db0:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    5db4:	03050106 	movweq	r0, #20742	; 0x5106
    5db8:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    5dbc:	07050106 	streq	r0, [r5, -r6, lsl #2]
    5dc0:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    5dc4:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    5dc8:	01060a05 	tsteq	r6, r5, lsl #20
    5dcc:	83060205 	movwhi	r0, #25093	; 0x6205
    5dd0:	01060605 	tsteq	r6, r5, lsl #12
    5dd4:	1f211f21 	svcne	0x00211f21
    5dd8:	21060205 	tstcs	r6, r5, lsl #4
    5ddc:	01060605 	tsteq	r6, r5, lsl #12
    5de0:	21060205 	tstcs	r6, r5, lsl #4
    5de4:	01060505 	tsteq	r6, r5, lsl #10
    5de8:	30060305 	andcc	r0, r6, r5, lsl #6
    5dec:	4a74033d 	bmi	1d06ae8 <__ccfg+0x1ce6b40>
    5df0:	01060d05 	tsteq	r6, r5, lsl #26
    5df4:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    5df8:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    5dfc:	4b010100 	blmi	46204 <__ccfg+0x2625c>
    5e00:	03000002 	movweq	r0, #2
    5e04:	00012500 	andeq	r2, r1, r0, lsl #10
    5e08:	fb010200 	blx	46612 <__ccfg+0x2666a>
    5e0c:	01000d0e 	tsteq	r0, lr, lsl #26
    5e10:	00010101 	andeq	r0, r1, r1, lsl #2
    5e14:	00010000 	andeq	r0, r1, r0
    5e18:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    5e1c:	2f656d6f 	svccs	0x00656d6f
    5e20:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5e24:	442f6e69 	strtmi	r6, [pc], #-3689	; 5e2c <__exidx_end+0xefc>
    5e28:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5e2c:	4f2f706f 	svcmi	0x002f706f
    5e30:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5e34:	502f5445 	eorpl	r5, pc, r5, asr #8
    5e38:	534f4349 	movtpl	r4, #62281	; 0xf349
    5e3c:	6369502f 	cmnvs	r9, #47	; 0x2f
    5e40:	502f534f 	eorpl	r5, pc, pc, asr #6
    5e44:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    5e48:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    5e4c:	006c6169 	rsbeq	r6, ip, r9, ror #2
    5e50:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5e54:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5e58:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5e5c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5e60:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5e64:	61652d65 	cmnvs	r5, r5, ror #26
    5e68:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5e6c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    5e70:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5e74:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5e78:	6f682f00 	svcvs	0x00682f00
    5e7c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5cd0 <__exidx_end+0xda0>
    5e80:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5e84:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5e88:	6f746b73 	svcvs	0x00746b73
    5e8c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5e90:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5e94:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5e98:	2f534f43 	svccs	0x00534f43
    5e9c:	4f636950 	svcmi	0x00636950
    5ea0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5ea4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5ea8:	6f682f00 	svcvs	0x00682f00
    5eac:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5d00 <__exidx_end+0xdd0>
    5eb0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5eb4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5eb8:	6f746b73 	svcvs	0x00746b73
    5ebc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5ec0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5ec4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5ec8:	2f534f43 	svccs	0x00534f43
    5ecc:	4f636950 	svcmi	0x00636950
    5ed0:	5f000053 	svcpl	0x00000053
    5ed4:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    5ed8:	61697265 	cmnvs	r9, r5, ror #4
    5edc:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    5ee0:	73000001 	movwvc	r0, #1
    5ee4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5ee8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5eec:	61000002 	tstvs	r0, r2
    5ef0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5ef4:	00030068 	andeq	r0, r3, r8, rrx
    5ef8:	63616d00 	cmnvs	r1, #0, 26
    5efc:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5f00:	70000003 	andvc	r0, r0, r3
    5f04:	5f736e69 	svcpl	0x00736e69
    5f08:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5f0c:	00030068 	andeq	r0, r3, r8, rrx
    5f10:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5f14:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    5f18:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5f1c:	0300682e 	movweq	r6, #2094	; 0x82e
    5f20:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    5f24:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    5f28:	00040068 	andeq	r0, r4, r8, rrx
    5f2c:	01050000 	mrseq	r0, (UNDEF: 5)
    5f30:	d0020500 	andle	r0, r2, r0, lsl #10
    5f34:	03000028 	movweq	r0, #40	; 0x28
    5f38:	06010122 	streq	r0, [r1], -r2, lsr #2
    5f3c:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    5f40:	13136b02 	tstne	r3, #2048	; 0x800
    5f44:	06100516 			; <UNDEFINED> instruction: 0x06100516
    5f48:	20050501 	andcs	r0, r5, r1, lsl #10
    5f4c:	30060305 	andcc	r0, r6, r5, lsl #6
    5f50:	053f0205 	ldreq	r0, [pc, #-517]!	; 5d53 <__exidx_end+0xe23>
    5f54:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    5f58:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    5f5c:	200b0520 	andcs	r0, fp, r0, lsr #10
    5f60:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5f64:	2f240603 	svccs	0x00240603
    5f68:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    5f6c:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5f70:	2f061f02 	svccs	0x00061f02
    5f74:	01060605 	tsteq	r6, r5, lsl #12
    5f78:	30060205 	andcc	r0, r6, r5, lsl #4
    5f7c:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    5f80:	01060505 	tsteq	r6, r5, lsl #10
    5f84:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    5f88:	01060605 	tsteq	r6, r5, lsl #12
    5f8c:	2f060405 	svccs	0x00060405
    5f90:	01060705 	tsteq	r6, r5, lsl #14
    5f94:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    5f98:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    5f9c:	03052106 	movweq	r2, #20742	; 0x5106
    5fa0:	06070531 			; <UNDEFINED> instruction: 0x06070531
    5fa4:	20060501 	andcs	r0, r6, r1, lsl #10
    5fa8:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5fac:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    5fb0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5fb4:	13052e05 	movwne	r2, #24069	; 0x5e05
    5fb8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5fbc:	0608052f 	streq	r0, [r8], -pc, lsr #10
    5fc0:	06030501 	streq	r0, [r3], -r1, lsl #10
    5fc4:	060d052f 	streq	r0, [sp], -pc, lsr #10
    5fc8:	06030501 	streq	r0, [r3], -r1, lsl #10
    5fcc:	3102052f 	tstcc	r2, pc, lsr #10
    5fd0:	01060605 	tsteq	r6, r5, lsl #12
    5fd4:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5fd8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5fdc:	21010606 	tstcs	r1, r6, lsl #12
    5fe0:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    5fe4:	0606052f 	streq	r0, [r6], -pc, lsr #10
    5fe8:	06020501 	streq	r0, [r2], -r1, lsl #10
    5fec:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    5ff0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5ff4:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    5ff8:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5ffc:	07053c11 	smladeq	r5, r1, ip, r3
    6000:	06020521 	streq	r0, [r2], -r1, lsr #10
    6004:	0605054b 	streq	r0, [r5], -fp, asr #10
    6008:	06020501 	streq	r0, [r2], -r1, lsl #10
    600c:	060a0524 	streq	r0, [sl], -r4, lsr #10
    6010:	9f060501 	svcls	0x00060501
    6014:	051f0a05 	ldreq	r0, [pc, #-2565]	; 5617 <__exidx_end+0x6e7>
    6018:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    601c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6020:	052f0602 	streq	r0, [pc, #-1538]!	; 5a26 <__exidx_end+0xaf6>
    6024:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6028:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    602c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    6030:	052f0603 	streq	r0, [pc, #-1539]!	; 5a35 <__exidx_end+0xb05>
    6034:	06053002 	streq	r3, [r5], -r2
    6038:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    603c:	01053d06 	tsteq	r5, r6, lsl #26
    6040:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    6044:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    6048:	000d0230 	andeq	r0, sp, r0, lsr r2
    604c:	03bd0101 			; <UNDEFINED> instruction: 0x03bd0101
    6050:	00030000 	andeq	r0, r3, r0
    6054:	0000013a 	andeq	r0, r0, sl, lsr r1
    6058:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    605c:	0101000d 	tsteq	r1, sp
    6060:	00000101 	andeq	r0, r0, r1, lsl #2
    6064:	00000100 	andeq	r0, r0, r0, lsl #2
    6068:	6f682f01 	svcvs	0x00682f01
    606c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5ec0 <__exidx_end+0xf90>
    6070:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    6074:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6078:	6f746b73 	svcvs	0x00746b73
    607c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6080:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6084:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6088:	2f534f43 	svccs	0x00534f43
    608c:	4f636950 	svcmi	0x00636950
    6090:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    6094:	2f736269 	svccs	0x00736269
    6098:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    609c:	2f006c61 	svccs	0x00006c61
    60a0:	2f727375 	svccs	0x00727375
    60a4:	2f62696c 	svccs	0x0062696c
    60a8:	2f636367 	svccs	0x00636367
    60ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    60b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    60b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    60b8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    60bc:	2f312e32 	svccs	0x00312e32
    60c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    60c4:	00656475 	rsbeq	r6, r5, r5, ror r4
    60c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6014 <__exidx_end+0x10e4>
    60cc:	616d2f65 	cmnvs	sp, r5, ror #30
    60d0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    60d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    60d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    60dc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    60e0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    60e4:	4349502f 	movtmi	r5, #36911	; 0x902f
    60e8:	502f534f 	eorpl	r5, pc, pc, asr #6
    60ec:	534f6369 	movtpl	r6, #62313	; 0xf369
    60f0:	3143432f 	cmpcc	r3, pc, lsr #6
    60f4:	00585833 	subseq	r5, r8, r3, lsr r8
    60f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 6044 <__exidx_end+0x1114>
    60fc:	616d2f65 	cmnvs	sp, r5, ror #30
    6100:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    6104:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6108:	706f746b 	rsbvc	r7, pc, fp, ror #8
    610c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6110:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    6114:	4349502f 	movtmi	r5, #36911	; 0x902f
    6118:	502f534f 	eorpl	r5, pc, pc, asr #6
    611c:	534f6369 	movtpl	r6, #62313	; 0xf369
    6120:	66760000 	ldrbtvs	r0, [r6], -r0
    6124:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    6128:	00010063 	andeq	r0, r1, r3, rrx
    612c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    6130:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6134:	00020068 	andeq	r0, r2, r8, rrx
    6138:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    613c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    6140:	00020068 	andeq	r0, r2, r8, rrx
    6144:	63726100 	cmnvs	r2, #0, 2
    6148:	00682e68 	rsbeq	r2, r8, r8, ror #28
    614c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    6150:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    6154:	00030068 	andeq	r0, r3, r8, rrx
    6158:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    615c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6160:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6164:	62000003 	andvs	r0, r0, #3
    6168:	6f747475 	svcvs	0x00747475
    616c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6170:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6174:	00000300 	andeq	r0, r0, r0, lsl #6
    6178:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    617c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    6180:	3c000004 	stccc	0, cr0, [r0], {4}
    6184:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    6188:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    618c:	0000003e 	andeq	r0, r0, lr, lsr r0
    6190:	15050000 	strne	r0, [r5, #-0]
    6194:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    6198:	03000029 	movweq	r0, #41	; 0x29
    619c:	0305010c 	movweq	r0, #20748	; 0x510c
    61a0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    61a4:	580b0501 	stmdapl	fp, {r0, r8, sl}
    61a8:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    61ac:	01060e05 	tsteq	r6, r5, lsl #28
    61b0:	30060305 	andcc	r0, r6, r5, lsl #6
    61b4:	01060405 	tsteq	r6, r5, lsl #8
    61b8:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    61bc:	01010001 	tsteq	r1, r1
    61c0:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    61c4:	002a0c02 	eoreq	r0, sl, r2, lsl #24
    61c8:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    61cc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    61d0:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    61d4:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    61d8:	03070520 	movweq	r0, #29984	; 0x7520
    61dc:	06052071 			; <UNDEFINED> instruction: 0x06052071
    61e0:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    61e4:	133e0602 	teqne	lr, #2097152	; 0x200000
    61e8:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    61ec:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    61f0:	06040501 	streq	r0, [r4], -r1, lsl #10
    61f4:	06020501 	streq	r0, [r2], -r1, lsl #10
    61f8:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    61fc:	01060505 	tsteq	r6, r5, lsl #10
    6200:	30060305 	andcc	r0, r6, r5, lsl #6
    6204:	01060605 	tsteq	r6, r5, lsl #12
    6208:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    620c:	01060b05 	tsteq	r6, r5, lsl #22
    6210:	052e1005 	streq	r1, [lr, #-5]!
    6214:	07052105 	streq	r2, [r5, -r5, lsl #2]
    6218:	0605052d 	streq	r0, [r5], -sp, lsr #10
    621c:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    6220:	0100da03 	tsteq	r0, r3, lsl #20
    6224:	06070559 			; <UNDEFINED> instruction: 0x06070559
    6228:	06040501 	streq	r0, [r4], -r1, lsl #10
    622c:	4a7fa703 	bmi	1fefe40 <__ccfg+0x1fcfe98>
    6230:	03060505 	movweq	r0, #25861	; 0x6505
    6234:	062000c2 	strteq	r0, [r0], -r2, asr #1
    6238:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    623c:	06030510 			; <UNDEFINED> instruction: 0x06030510
    6240:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    6244:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6248:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    624c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    6250:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    6254:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    6258:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    625c:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    6260:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    6264:	3c090306 	stccc	3, cr0, [r9], {6}
    6268:	01060c05 	tsteq	r6, r5, lsl #24
    626c:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    6270:	7fa90304 	svcvc	0x00a90304
    6274:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    6278:	010f0568 	tsteq	pc, r8, ror #10
    627c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    6280:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    6284:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    6288:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    628c:	06051406 	streq	r1, [r5], -r6, lsl #8
    6290:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    6294:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    6298:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    629c:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    62a0:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    62a4:	16053906 	strne	r3, [r5], -r6, lsl #18
    62a8:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    62ac:	06052e06 	streq	r2, [r5], -r6, lsl #28
    62b0:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    62b4:	20090306 	andcs	r0, r9, r6, lsl #6
    62b8:	06120513 			; <UNDEFINED> instruction: 0x06120513
    62bc:	2f080501 	svccs	0x00080501
    62c0:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    62c4:	052f0605 	streq	r0, [pc, #-1541]!	; 5cc7 <__exidx_end+0xd97>
    62c8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    62cc:	06052012 			; <UNDEFINED> instruction: 0x06052012
    62d0:	05593006 	ldrbeq	r3, [r9, #-6]
    62d4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    62d8:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    62dc:	6f03060c 	svcvs	0x0003060c
    62e0:	03050501 	movweq	r0, #21761	; 0x5501
    62e4:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    62e8:	3c062e01 	stccc	14, cr2, [r6], {1}
    62ec:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    62f0:	4a202082 	bmi	80e500 <__ccfg+0x7ee558>
    62f4:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    62f8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    62fc:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    6300:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    6304:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    6308:	05133006 	ldreq	r3, [r3, #-6]
    630c:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    6310:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    6314:	0606052d 	streq	r0, [r6], -sp, lsr #10
    6318:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    631c:	13050106 	movwne	r0, #20742	; 0x5106
    6320:	06070520 	streq	r0, [r7], -r0, lsr #10
    6324:	0b05593f 	bleq	15c828 <__ccfg+0x13c880>
    6328:	06050106 	streq	r0, [r5], -r6, lsl #2
    632c:	05053006 	streq	r3, [r5, #-6]
    6330:	016f0306 	cmneq	pc, r6, lsl #6
    6334:	11030605 	tstne	r3, r5, lsl #12
    6338:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    633c:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    6340:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    6344:	20582e01 	subscs	r2, r8, r1, lsl #28
    6348:	210c052e 	tstcs	ip, lr, lsr #10
    634c:	01060f05 	tsteq	r6, r5, lsl #30
    6350:	2f060605 	svccs	0x00060605
    6354:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    6358:	0a051406 	beq	14b378 <__ccfg+0x12b3d0>
    635c:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    6360:	21060605 	tstcs	r6, r5, lsl #12
    6364:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    6368:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    636c:	07052e15 	smladeq	r5, r5, lr, r2
    6370:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    6374:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    6378:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    637c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    6380:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    6384:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    6388:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    638c:	134f0505 	movtne	r0, #62725	; 0xf505
    6390:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6394:	2f050511 	svccs	0x00050511
    6398:	13134f06 	tstne	r3, #6, 30
    639c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    63a0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    63a4:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    63a8:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    63ac:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    63b0:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    63b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    63b8:	02050035 	andeq	r0, r5, #53	; 0x35
    63bc:	00002c3c 	andeq	r2, r0, ip, lsr ip
    63c0:	01019003 	tsteq	r1, r3
    63c4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    63c8:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    63cc:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    63d0:	30060305 	andcc	r0, r6, r5, lsl #6
    63d4:	06010567 	streq	r0, [r1], -r7, ror #10
    63d8:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    63dc:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    63e0:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    63e4:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    63e8:	3f060205 	svccc	0x00060205
    63ec:	01061505 	tsteq	r6, r5, lsl #10
    63f0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    63f4:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    63f8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    63fc:	0b055805 	bleq	15c418 <__ccfg+0x13c470>
    6400:	20050520 	andcs	r0, r5, r0, lsr #10
    6404:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    6408:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    640c:	c6010100 	strgt	r0, [r1], -r0, lsl #2
    6410:	03000002 	movweq	r0, #2
    6414:	00013a00 	andeq	r3, r1, r0, lsl #20
    6418:	fb010200 	blx	46c22 <__ccfg+0x26c7a>
    641c:	01000d0e 	tsteq	r0, lr, lsl #26
    6420:	00010101 	andeq	r0, r1, r1, lsl #2
    6424:	00010000 	andeq	r0, r1, r0
    6428:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    642c:	2f656d6f 	svccs	0x00656d6f
    6430:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    6434:	442f6e69 	strtmi	r6, [pc], #-3689	; 643c <__exidx_end+0x150c>
    6438:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    643c:	4f2f706f 	svcmi	0x002f706f
    6440:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6444:	502f5445 	eorpl	r5, pc, r5, asr #8
    6448:	534f4349 	movtpl	r4, #62281	; 0xf349
    644c:	6369502f 	cmnvs	r9, #47	; 0x2f
    6450:	502f534f 	eorpl	r5, pc, pc, asr #6
    6454:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    6458:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    645c:	006c6169 	rsbeq	r6, ip, r9, ror #2
    6460:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    6464:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    6468:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    646c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6470:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6474:	61652d65 	cmnvs	r5, r5, ror #26
    6478:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    647c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6480:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6484:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6488:	6f682f00 	svcvs	0x00682f00
    648c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 62e0 <__exidx_end+0x13b0>
    6490:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    6494:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6498:	6f746b73 	svcvs	0x00746b73
    649c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    64a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    64a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    64a8:	2f534f43 	svccs	0x00534f43
    64ac:	4f636950 	svcmi	0x00636950
    64b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    64b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    64b8:	6f682f00 	svcvs	0x00682f00
    64bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 6310 <__exidx_end+0x13e0>
    64c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    64c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    64c8:	6f746b73 	svcvs	0x00746b73
    64cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    64d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    64d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    64d8:	2f534f43 	svccs	0x00534f43
    64dc:	4f636950 	svcmi	0x00636950
    64e0:	76000053 			; <UNDEFINED> instruction: 0x76000053
    64e4:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    64e8:	0100632e 	tsteq	r0, lr, lsr #6
    64ec:	74730000 	ldrbtvc	r0, [r3], #-0
    64f0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    64f4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    64f8:	74730000 	ldrbtvc	r0, [r3], #-0
    64fc:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    6500:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6504:	72610000 	rsbvc	r0, r1, #0
    6508:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    650c:	00000300 	andeq	r0, r0, r0, lsl #6
    6510:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6514:	0300682e 	movweq	r6, #2094	; 0x82e
    6518:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    651c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6520:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6524:	00000300 	andeq	r0, r0, r0, lsl #6
    6528:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    652c:	5f736e6f 	svcpl	0x00736e6f
    6530:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    6534:	00030068 	andeq	r0, r3, r8, rrx
    6538:	73797300 	cmnvc	r9, #0, 6
    653c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    6540:	00000400 	andeq	r0, r0, r0, lsl #8
    6544:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    6548:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    654c:	00003e6e 	andeq	r3, r0, lr, ror #28
    6550:	05000000 	streq	r0, [r0, #-0]
    6554:	0205003a 	andeq	r0, r5, #58	; 0x3a
    6558:	00002c8c 	andeq	r2, r0, ip, lsl #25
    655c:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    6560:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    6564:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    6568:	2044033a 	subcs	r0, r4, sl, lsr r3
    656c:	3c030505 	cfstr32cc	mvfx0, [r3], {5}
    6570:	3c12052e 	cfldr32cc	mvfx0, [r2], {46}	; 0x2e
    6574:	05400505 	strbeq	r0, [r0, #-1285]	; 0xfffffafb
    6578:	200e0316 	andcs	r0, lr, r6, lsl r3
    657c:	11030b05 	tstne	r3, r5, lsl #22
    6580:	0608052e 	streq	r0, [r8], -lr, lsr #10
    6584:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    6588:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    658c:	03052e08 	movweq	r2, #24072	; 0x5e08
    6590:	06052106 	streq	r2, [r5], -r6, lsl #2
    6594:	03050106 	movweq	r0, #20742	; 0x5106
    6598:	0b053006 	bleq	1525b8 <__ccfg+0x132610>
    659c:	0f050106 	svceq	0x00050106
    65a0:	20030520 	andcs	r0, r3, r0, lsr #10
    65a4:	2e030105 	adfcss	f0, f3, f5
    65a8:	030305ac 	movweq	r0, #13740	; 0x35ac
    65ac:	0b053c52 	bleq	1556fc <__ccfg+0x135754>
    65b0:	05741b03 	ldrbeq	r1, [r4, #-2819]!	; 0xfffff4fd
    65b4:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    65b8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    65bc:	05ad0604 	streq	r0, [sp, #1540]!	; 0x604
    65c0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    65c4:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    65c8:	05150607 	ldreq	r0, [r5, #-1543]	; 0xfffff9f9
    65cc:	06051e08 	streq	r1, [r5], -r8, lsl #28
    65d0:	0604052d 	streq	r0, [r4], -sp, lsr #10
    65d4:	0705142f 	streq	r1, [r5, -pc, lsr #8]
    65d8:	0b050106 	bleq	1469f8 <__ccfg+0x126a50>
    65dc:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    65e0:	0c050106 	stfeqs	f0, [r5], {6}
    65e4:	2e1c0566 	cfmsc32cs	mvfx0, mvfx12, mvfx6
    65e8:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    65ec:	0a054e0b 	beq	159e20 <__ccfg+0x139e78>
    65f0:	0b053c06 	bleq	155610 <__ccfg+0x135668>
    65f4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    65f8:	18058306 	stmdane	r5, {r1, r2, r8, r9, pc}
    65fc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6600:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    6604:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    6608:	11052f06 	tstne	r5, r6, lsl #30
    660c:	3c205903 			; <UNDEFINED> instruction: 0x3c205903
    6610:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    6614:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    6618:	013c6606 	teqeq	ip, r6, lsl #12
    661c:	06010620 	streq	r0, [r1], -r0, lsr #12
    6620:	063c743c 			; <UNDEFINED> instruction: 0x063c743c
    6624:	743c064a 	ldrtvc	r0, [ip], #-1610	; 0xfffff9b6
    6628:	3c902e21 	ldccc	14, cr2, [r0], {33}	; 0x21
    662c:	01062e01 	tsteq	r6, r1, lsl #28
    6630:	90822e06 	addls	r2, r2, r6, lsl #28
    6634:	90064a21 	andls	r4, r6, r1, lsr #20
    6638:	013c5806 	teqeq	ip, r6, lsl #16
    663c:	2e06012e 	adfcssp	f0, f6, #0.5
    6640:	82063c06 	andhi	r3, r6, #1536	; 0x600
    6644:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    6648:	04053c3c 	streq	r3, [r5], #-3132	; 0xfffff3c4
    664c:	060c0577 			; <UNDEFINED> instruction: 0x060c0577
    6650:	20100501 	andscs	r0, r0, r1, lsl #10
    6654:	ae061605 	cfmadd32ge	mvax0, mvfx1, mvfx6, mvfx5
    6658:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    665c:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    6660:	013c3c06 	teqeq	ip, r6, lsl #24
    6664:	0601062e 	streq	r0, [r1], -lr, lsr #12
    6668:	923c823c 	eorsls	r8, ip, #60, 4	; 0xc0000003
    666c:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    6670:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    6674:	3c062e06 	stccc	14, cr2, [r6], {6}
    6678:	06667406 	strbteq	r7, [r6], -r6, lsl #8
    667c:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    6680:	063c0672 			; <UNDEFINED> instruction: 0x063c0672
    6684:	3c21742e 	cfstrscc	mvf7, [r1], #-184	; 0xffffff48
    6688:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    668c:	2e060106 	adfcss	f0, f6, f6
    6690:	05217490 	streq	r7, [r1, #-1168]!	; 0xfffffb70
    6694:	05144f04 	ldreq	r4, [r4, #-3844]	; 0xfffff0fc
    6698:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    669c:	04052e07 	streq	r2, [r5], #-3591	; 0xfffff1f9
    66a0:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
    66a4:	06051306 	streq	r1, [r5], -r6, lsl #6
    66a8:	0604052d 	streq	r0, [r4], -sp, lsr #10
    66ac:	09051321 	stmdbeq	r5, {r0, r5, r8, r9, ip}
    66b0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    66b4:	0b052106 	bleq	14ead4 <__ccfg+0x12eb2c>
    66b8:	07052406 	streq	r2, [r5, -r6, lsl #8]
    66bc:	74090306 	strvc	r0, [r9], #-774	; 0xfffffcfa
    66c0:	01060e05 	tsteq	r6, r5, lsl #28
    66c4:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
    66c8:	6654030a 	ldrbvs	r0, [r4], -sl, lsl #6
    66cc:	0a031105 	beq	caae8 <__ccfg+0xaab40>
    66d0:	5116054a 	tstpl	r6, sl, asr #10
    66d4:	01000502 	tsteq	r0, r2, lsl #10
    66d8:	00028901 	andeq	r8, r2, r1, lsl #18
    66dc:	83000300 	movwhi	r0, #768	; 0x300
    66e0:	02000002 	andeq	r0, r0, #2
    66e4:	0d0efb01 	vstreq	d15, [lr, #-4]
    66e8:	01010100 	mrseq	r0, (UNDEF: 17)
    66ec:	00000001 	andeq	r0, r0, r1
    66f0:	01000001 	tsteq	r0, r1
    66f4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    66f8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    66fc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    6700:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    6704:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6708:	61652d65 	cmnvs	r5, r5, ror #26
    670c:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    6710:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    6714:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6718:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    671c:	73752f00 	cmnvc	r5, #0, 30
    6720:	6e692f72 	mcrvs	15, 3, r2, cr9, cr2, {3}
    6724:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6728:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    672c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    6730:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    6734:	6f682f00 	svcvs	0x00682f00
    6738:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 658c <__exidx_end+0x165c>
    673c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    6740:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6744:	6f746b73 	svcvs	0x00746b73
    6748:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    674c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6750:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6754:	2f534f43 	svccs	0x00534f43
    6758:	4f636950 	svcmi	0x00636950
    675c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    6760:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    6764:	3143432f 	cmpcc	r3, pc, lsr #6
    6768:	57585833 	smmlarpl	r8, r3, r8, r5
    676c:	2f455241 	svccs	0x00455241
    6770:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6774:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6778:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
    677c:	2f656d6f 	svccs	0x00656d6f
    6780:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    6784:	442f6e69 	strtmi	r6, [pc], #-3689	; 678c <__exidx_end+0x185c>
    6788:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    678c:	4f2f706f 	svcmi	0x002f706f
    6790:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    6794:	502f5445 	eorpl	r5, pc, r5, asr #8
    6798:	534f4349 	movtpl	r4, #62281	; 0xf349
    679c:	6369502f 	cmnvs	r9, #47	; 0x2f
    67a0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    67a4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    67a8:	43432f58 	movtmi	r2, #16216	; 0x3f58
    67ac:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    67b0:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    67b4:	5f66722f 	svcpl	0x0066722f
    67b8:	63746170 	cmnvs	r4, #112, 2
    67bc:	00736568 	rsbseq	r6, r3, r8, ror #10
    67c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 670c <__exidx_end+0x17dc>
    67c4:	616d2f65 	cmnvs	sp, r5, ror #30
    67c8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    67cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    67d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    67d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    67d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    67dc:	4349502f 	movtmi	r5, #36911	; 0x902f
    67e0:	502f534f 	eorpl	r5, pc, pc, asr #6
    67e4:	534f6369 	movtpl	r6, #62313	; 0xf369
    67e8:	3143432f 	cmpcc	r3, pc, lsr #6
    67ec:	00585833 	subseq	r5, r8, r3, lsr r8
    67f0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 673c <__exidx_end+0x180c>
    67f4:	616d2f65 	cmnvs	sp, r5, ror #30
    67f8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    67fc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    6800:	706f746b 	rsbvc	r7, pc, fp, ror #8
    6804:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    6808:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    680c:	4349502f 	movtmi	r5, #36911	; 0x902f
    6810:	502f534f 	eorpl	r5, pc, pc, asr #6
    6814:	534f6369 	movtpl	r6, #62313	; 0xf369
    6818:	6f682f00 	svcvs	0x00682f00
    681c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 6670 <__exidx_end+0x1740>
    6820:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    6824:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    6828:	6f746b73 	svcvs	0x00746b73
    682c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    6830:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    6834:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    6838:	2f534f43 	svccs	0x00534f43
    683c:	4f636950 	svcmi	0x00636950
    6840:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    6844:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    6848:	74730000 	ldrbtvc	r0, [r3], #-0
    684c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6850:	0100682e 	tsteq	r0, lr, lsr #16
    6854:	74730000 	ldrbtvc	r0, [r3], #-0
    6858:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    685c:	0100682e 	tsteq	r0, lr, lsr #16
    6860:	745f0000 	ldrbvc	r0, [pc], #-0	; 6868 <__exidx_end+0x1938>
    6864:	73657079 	cmnvc	r5, #121	; 0x79
    6868:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    686c:	65720000 	ldrbvs	r0, [r2, #-0]!
    6870:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    6874:	00020068 	andeq	r0, r2, r8, rrx
    6878:	636f6c00 	cmnvs	pc, #0, 24
    687c:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    6880:	72000002 	andvc	r0, r0, #2
    6884:	616d5f66 	cmnvs	sp, r6, ror #30
    6888:	6f626c69 	svcvs	0x00626c69
    688c:	00682e78 	rsbeq	r2, r8, r8, ror lr
    6890:	72000003 	andvc	r0, r0, #3
    6894:	6f635f66 	svcvs	0x00635f66
    6898:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    689c:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    68a0:	0300682e 	movweq	r6, #2094	; 0x82e
    68a4:	66720000 	ldrbtvs	r0, [r2], -r0
    68a8:	6f72705f 	svcvs	0x0072705f
    68ac:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    68b0:	00682e64 	rsbeq	r2, r8, r4, ror #28
    68b4:	72000003 	andvc	r0, r0, #3
    68b8:	61705f66 	cmnvs	r0, r6, ror #30
    68bc:	5f686374 	svcpl	0x00686374
    68c0:	5f657063 	svcpl	0x00657063
    68c4:	666e6567 	strbtvs	r6, [lr], -r7, ror #10
    68c8:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    68cc:	00000400 	andeq	r0, r0, r0, lsl #8
    68d0:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    68d4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    68d8:	6566725f 	strbvs	r7, [r6, #-607]!	; 0xfffffda1
    68dc:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    68e0:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    68e4:	00040068 	andeq	r0, r4, r8, rrx
    68e8:	63726100 	cmnvs	r2, #0, 2
    68ec:	00682e68 	rsbeq	r2, r8, r8, ror #28
    68f0:	6d000005 	stcvs	0, cr0, [r0, #-20]	; 0xffffffec
    68f4:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    68f8:	00050068 	andeq	r0, r5, r8, rrx
    68fc:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    6900:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6904:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6908:	62000005 	andvs	r0, r0, #5
    690c:	6f747475 	svcvs	0x00747475
    6910:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    6914:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    6918:	00000500 	andeq	r0, r0, r0, lsl #10
    691c:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    6920:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    6924:	6b000006 	blvs	6944 <__exidx_end+0x1a14>
    6928:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    692c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    6930:	73000007 	movwvc	r0, #7
    6934:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    6938:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
    693c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    6940:	2e73676e 	cdpcs	7, 7, cr6, cr3, cr14, {3}
    6944:	00050068 	andeq	r0, r5, r8, rrx
    6948:	616d7300 	cmnvs	sp, r0, lsl #6
    694c:	66727472 			; <UNDEFINED> instruction: 0x66727472
    6950:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    6954:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    6958:	706c5f73 	rsbvc	r5, ip, r3, ror pc
    695c:	2e72685f 	mrccs	8, 3, r6, cr2, cr15, {2}
    6960:	00050063 	andeq	r0, r5, r3, rrx
    6964:	019c0000 	orrseq	r0, ip, r0
    6968:	00020000 	andeq	r0, r2, r0
    696c:	0000015f 	andeq	r0, r0, pc, asr r1
    6970:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6974:	0101000d 	tsteq	r1, sp
    6978:	00000101 	andeq	r0, r0, r1, lsl #2
    697c:	00000100 	andeq	r0, r0, r0, lsl #2
    6980:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6984:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6988:	2f2e2e2f 	svccs	0x002e2e2f
    698c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6990:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6994:	3a630062 	bcc	18c6b24 <__ccfg+0x18a6b7c>
    6998:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    699c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    69a0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    69a4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    69a8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    69ac:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    69b0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    69b4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    69b8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    69bc:	6f6f745c 	svcvs	0x006f745c
    69c0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    69c4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    69c8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    69cc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    69d0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    69d4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    69d8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    69dc:	5f342d69 	svcpl	0x00342d69
    69e0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    69e4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    69e8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    69ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    69f0:	61652d65 	cmnvs	r5, r5, ror #26
    69f4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    69f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    69fc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6a00:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6a04:	6300656e 	movwvs	r6, #1390	; 0x56e
    6a08:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6a0c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a10:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6a14:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6a18:	5f393130 	svcpl	0x00393130
    6a1c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6a20:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6a24:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6a28:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6a2c:	6f745c36 	svcvs	0x00745c36
    6a30:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6a34:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6a38:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6a3c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6a40:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6a44:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a48:	61652d65 	cmnvs	r5, r5, ror #26
    6a4c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6a50:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6a54:	71353130 	teqvc	r5, r0, lsr r1
    6a58:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6a5c:	6f6e2d6d 	svcvs	0x006e2d6d
    6a60:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a64:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6a68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6a6c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6a70:	00737973 	rsbseq	r7, r3, r3, ror r9
    6a74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a78:	2f2e2e2f 	svccs	0x002e2e2f
    6a7c:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    6a80:	0000636e 	andeq	r6, r0, lr, ror #6
    6a84:	2e696461 	cdpcs	4, 6, cr6, cr9, cr1, {3}
    6a88:	00010063 	andeq	r0, r1, r3, rrx
    6a8c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6a90:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6a94:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6a98:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6a9c:	00020068 	andeq	r0, r2, r8, rrx
    6aa0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6aa4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6aa8:	0300682e 	movweq	r6, #2094	; 0x82e
    6aac:	77680000 	strbvc	r0, [r8, -r0]!
    6ab0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6ab4:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6ab8:	00000400 	andeq	r0, r0, r0, lsl #8
    6abc:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    6ac0:	00010068 	andeq	r0, r1, r8, rrx
    6ac4:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    6ac8:	0100682e 	tsteq	r0, lr, lsr #16
    6acc:	00000000 	andeq	r0, r0, r0
    6ad0:	301c0205 	andscc	r0, ip, r5, lsl #4
    6ad4:	35030000 	strcc	r0, [r3, #-0]
    6ad8:	00212001 	eoreq	r2, r1, r1
    6adc:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6ae0:	232f214b 			; <UNDEFINED> instruction: 0x232f214b
    6ae4:	0005022c 	andeq	r0, r5, ip, lsr #4
    6ae8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6aec:	00000002 	andeq	r0, r0, r2
    6af0:	00c00300 	sbceq	r0, r0, r0, lsl #6
    6af4:	002f2001 	eoreq	r2, pc, r1
    6af8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6afc:	232f2f4b 			; <UNDEFINED> instruction: 0x232f2f4b
    6b00:	0005022c 	andeq	r0, r5, ip, lsr #4
    6b04:	01670101 	cmneq	r7, r1, lsl #2
    6b08:	00020000 	andeq	r0, r2, r0
    6b0c:	00000147 	andeq	r0, r0, r7, asr #2
    6b10:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6b14:	0101000d 	tsteq	r1, sp
    6b18:	00000101 	andeq	r0, r0, r1, lsl #2
    6b1c:	00000100 	andeq	r0, r0, r0, lsl #2
    6b20:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6b24:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b28:	2f2e2e2f 	svccs	0x002e2e2f
    6b2c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6b30:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6b34:	3a630062 	bcc	18c6cc4 <__ccfg+0x18a6d1c>
    6b38:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6b3c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6b40:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6b44:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6b48:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6b4c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6b50:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6b54:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6b58:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6b5c:	6f6f745c 	svcvs	0x006f745c
    6b60:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6b64:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6b68:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6b6c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6b70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6b74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6b78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6b7c:	5f342d69 	svcpl	0x00342d69
    6b80:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6b84:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6b88:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6b8c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6b90:	61652d65 	cmnvs	r5, r5, ror #26
    6b94:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6b98:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6b9c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6ba0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6ba4:	6300656e 	movwvs	r6, #1390	; 0x56e
    6ba8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6bac:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6bb0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6bb4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6bb8:	5f393130 	svcpl	0x00393130
    6bbc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6bc0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6bc4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6bc8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6bcc:	6f745c36 	svcvs	0x00745c36
    6bd0:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6bd4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6bd8:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6bdc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6be0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6be4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6be8:	61652d65 	cmnvs	r5, r5, ror #26
    6bec:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6bf0:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6bf4:	71353130 	teqvc	r5, r0, lsr r1
    6bf8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6bfc:	6f6e2d6d 	svcvs	0x006e2d6d
    6c00:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6c04:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6c08:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6c0c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6c10:	00737973 	rsbseq	r7, r3, r3, ror r9
    6c14:	6e6f6100 	powvse	f6, f7, f0
    6c18:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    6c1c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    6c20:	00010063 	andeq	r0, r1, r3, rrx
    6c24:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6c28:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6c2c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6c30:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6c34:	00020068 	andeq	r0, r2, r8, rrx
    6c38:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6c3c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6c40:	0300682e 	movweq	r6, #2094	; 0x82e
    6c44:	6f610000 	svcvs	0x00610000
    6c48:	61625f6e 	cmnvs	r2, lr, ror #30
    6c4c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    6c50:	0100682e 	tsteq	r0, lr, lsr #16
    6c54:	00000000 	andeq	r0, r0, r0
    6c58:	30440205 	subcc	r0, r4, r5, lsl #4
    6c5c:	3c030000 	stccc	0, cr0, [r3], {-0}
    6c60:	2f361a01 	svccs	0x00361a01
    6c64:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    6c68:	3d4c2e09 	stclcc	14, cr2, [ip, #-36]	; 0xffffffdc
    6c6c:	01000902 	tsteq	r0, r2, lsl #18
    6c70:	0001a901 	andeq	sl, r1, r1, lsl #18
    6c74:	41000200 	mrsmi	r0, R8_usr
    6c78:	02000001 	andeq	r0, r0, #1
    6c7c:	0d0efb01 	vstreq	d15, [lr, #-4]
    6c80:	01010100 	mrseq	r0, (UNDEF: 17)
    6c84:	00000001 	andeq	r0, r0, r1
    6c88:	01000001 	tsteq	r0, r1
    6c8c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6c90:	2f2e2e2f 	svccs	0x002e2e2f
    6c94:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6c9c <__exidx_end+0x1d6c>
    6c98:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6c9c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6ca0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6ca4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6ca8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6cac:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6cb0:	31303030 	teqcc	r0, r0, lsr r0
    6cb4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6cb8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6cbc:	61746562 	cmnvs	r4, r2, ror #10
    6cc0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6cc4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6cc8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6b00 <__exidx_end+0x1bd0>
    6ccc:	6f635c73 	svcvs	0x00635c73
    6cd0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6cd4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6cd8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6cdc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6ce0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6ce4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6ce8:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6cec:	3130322d 	teqcc	r0, sp, lsr #4
    6cf0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6cf4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6cf8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6cfc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6d00:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6d04:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6d08:	616d5c65 	cmnvs	sp, r5, ror #24
    6d0c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6d10:	3a630065 	bcc	18c6eac <__ccfg+0x18a6f04>
    6d14:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6d18:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6d1c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6d20:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6d24:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6d28:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6d2c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6d30:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6d34:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6d38:	6f6f745c 	svcvs	0x006f745c
    6d3c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6d40:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6d44:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6d48:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6d4c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6d50:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6d54:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6d58:	5f342d69 	svcpl	0x00342d69
    6d5c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6d60:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6d64:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6d68:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6d6c:	61652d65 	cmnvs	r5, r5, ror #26
    6d70:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6d74:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6d78:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6d7c:	00007379 	andeq	r7, r0, r9, ror r3
    6d80:	5f6e6f61 	svcpl	0x006e6f61
    6d84:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    6d88:	00010063 	andeq	r0, r1, r3, rrx
    6d8c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6d90:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6d94:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6d98:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6d9c:	00020068 	andeq	r0, r2, r8, rrx
    6da0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6da4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6da8:	0300682e 	movweq	r6, #2094	; 0x82e
    6dac:	6f610000 	svcvs	0x00610000
    6db0:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    6db4:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6db8:	00000001 	andeq	r0, r0, r1
    6dbc:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
    6dc0:	03000030 	movweq	r0, #48	; 0x30
    6dc4:	0200013e 	andeq	r0, r0, #-2147483633	; 0x8000000f
    6dc8:	0a030104 	beq	c71e0 <__ccfg+0xa7238>
    6dcc:	04020001 	streq	r0, [r2], #-1
    6dd0:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6dd4:	001f0104 	andseq	r0, pc, r4, lsl #2
    6dd8:	21010402 	tstcs	r1, r2, lsl #8
    6ddc:	01040200 	mrseq	r0, R12_usr
    6de0:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6de4:	21302101 	teqcs	r0, r1, lsl #2
    6de8:	01000802 	tsteq	r0, r2, lsl #16
    6dec:	02050001 	andeq	r0, r5, #1
    6df0:	00003094 	muleq	r0, r4, r0
    6df4:	0100d703 	tsteq	r0, r3, lsl #14
    6df8:	01040200 	mrseq	r0, R12_usr
    6dfc:	00010c03 	andeq	r0, r1, r3, lsl #24
    6e00:	21010402 	tstcs	r1, r2, lsl #8
    6e04:	01040200 	mrseq	r0, R12_usr
    6e08:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    6e0c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6e10:	00210104 	eoreq	r0, r1, r4, lsl #2
    6e14:	21010402 	tstcs	r1, r2, lsl #8
    6e18:	00050231 	andeq	r0, r5, r1, lsr r2
    6e1c:	019c0101 	orrseq	r0, ip, r1, lsl #2
    6e20:	00020000 	andeq	r0, r2, r0
    6e24:	00000139 	andeq	r0, r0, r9, lsr r1
    6e28:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6e2c:	0101000d 	tsteq	r1, sp
    6e30:	00000101 	andeq	r0, r0, r1, lsl #2
    6e34:	00000100 	andeq	r0, r0, r0, lsl #2
    6e38:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6e3c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6e40:	2f2e2e2f 	svccs	0x002e2e2f
    6e44:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6e48:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6e4c:	3a630062 	bcc	18c6fdc <__ccfg+0x18a7034>
    6e50:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6e54:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6e58:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6e5c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6e60:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6e64:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6e68:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6e6c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6e70:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6e74:	6f6f745c 	svcvs	0x006f745c
    6e78:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6e7c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6e80:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6e84:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6e88:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6e8c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6e90:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6e94:	5f342d69 	svcpl	0x00342d69
    6e98:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6e9c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6ea0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6ea4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6ea8:	61652d65 	cmnvs	r5, r5, ror #26
    6eac:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6eb0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6eb4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6eb8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6ebc:	6300656e 	movwvs	r6, #1390	; 0x56e
    6ec0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6ec4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6ec8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6ecc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6ed0:	5f393130 	svcpl	0x00393130
    6ed4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6ed8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6edc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6ee0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6ee4:	6f745c36 	svcvs	0x00745c36
    6ee8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6eec:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6ef0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6ef4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6ef8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6efc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6f00:	61652d65 	cmnvs	r5, r5, ror #26
    6f04:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6f08:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6f0c:	71353130 	teqvc	r5, r0, lsr r1
    6f10:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6f14:	6f6e2d6d 	svcvs	0x006e2d6d
    6f18:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6f1c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6f20:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6f24:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6f28:	00737973 	rsbseq	r7, r3, r3, ror r9
    6f2c:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    6f30:	0100632e 	tsteq	r0, lr, lsr #6
    6f34:	645f0000 	ldrbvs	r0, [pc], #-0	; 6f3c <__exidx_end+0x200c>
    6f38:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6f3c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 6f44 <__exidx_end+0x2014>
    6f40:	73657079 	cmnvc	r5, #121	; 0x79
    6f44:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6f48:	735f0000 	cmpvc	pc, #0
    6f4c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6f50:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6f54:	63000003 	movwvs	r0, #3
    6f58:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    6f5c:	00000100 	andeq	r0, r0, r0, lsl #2
    6f60:	02050000 	andeq	r0, r5, #0
    6f64:	000030ac 	andeq	r3, r0, ip, lsr #1
    6f68:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
    6f6c:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    6f70:	01010004 	tsteq	r1, r4
    6f74:	00020500 	andeq	r0, r2, r0, lsl #10
    6f78:	03000000 	movweq	r0, #0
    6f7c:	030101c0 	movweq	r0, #4544	; 0x11c0
    6f80:	03020111 	movweq	r0, #8465	; 0x2111
    6f84:	00010100 	andeq	r0, r1, r0, lsl #2
    6f88:	30b40205 	adcscc	r0, r4, r5, lsl #4
    6f8c:	8d030000 	stchi	0, cr0, [r3, #-0]
    6f90:	12030102 	andne	r0, r3, #-2147483648	; 0x80000000
    6f94:	00040201 	andeq	r0, r4, r1, lsl #4
    6f98:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6f9c:	00000002 	andeq	r0, r0, r2
    6fa0:	02d80300 	sbcseq	r0, r8, #0, 6
    6fa4:	01110301 	tsteq	r1, r1, lsl #6
    6fa8:	01000302 	tsteq	r0, r2, lsl #6
    6fac:	02050001 	andeq	r0, r5, #1
    6fb0:	00000000 	andeq	r0, r0, r0
    6fb4:	01039e03 	tsteq	r3, r3, lsl #28
    6fb8:	00040216 	andeq	r0, r4, r6, lsl r2
    6fbc:	02d60101 	sbcseq	r0, r6, #1073741824	; 0x40000000
    6fc0:	00020000 	andeq	r0, r2, r0
    6fc4:	0000017c 	andeq	r0, r0, ip, ror r1
    6fc8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6fcc:	0101000d 	tsteq	r1, sp
    6fd0:	00000101 	andeq	r0, r0, r1, lsl #2
    6fd4:	00000100 	andeq	r0, r0, r0, lsl #2
    6fd8:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6fdc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6fe0:	2f2e2e2f 	svccs	0x002e2e2f
    6fe4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6fe8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6fec:	3a630062 	bcc	18c717c <__ccfg+0x18a71d4>
    6ff0:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6ff4:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6ff8:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6ffc:	3030302e 	eorscc	r3, r0, lr, lsr #32
    7000:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    7004:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    7008:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    700c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    7010:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7014:	6f6f745c 	svcvs	0x006f745c
    7018:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    701c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    7020:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7024:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7028:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    702c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7030:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7034:	5f342d69 	svcpl	0x00342d69
    7038:	30322d39 	eorscc	r2, r2, r9, lsr sp
    703c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    7040:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7044:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7048:	61652d65 	cmnvs	r5, r5, ror #26
    704c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    7050:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7054:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7058:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    705c:	6300656e 	movwvs	r6, #1390	; 0x56e
    7060:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7064:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7068:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    706c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7070:	5f393130 	svcpl	0x00393130
    7074:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7078:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    707c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7080:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7084:	6f745c36 	svcvs	0x00745c36
    7088:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    708c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7090:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7094:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7098:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    709c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    70a0:	61652d65 	cmnvs	r5, r5, ror #26
    70a4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    70a8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    70ac:	71353130 	teqvc	r5, r0, lsr r1
    70b0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    70b4:	6f6e2d6d 	svcvs	0x006e2d6d
    70b8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    70bc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    70c0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    70c4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    70c8:	00737973 	rsbseq	r7, r3, r3, ror r9
    70cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    70d0:	2f2e2e2f 	svccs	0x002e2e2f
    70d4:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    70d8:	0000636e 	andeq	r6, r0, lr, ror #6
    70dc:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    70e0:	00010063 	andeq	r0, r1, r3, rrx
    70e4:	63736f00 	cmnvs	r3, #0, 30
    70e8:	0100682e 	tsteq	r0, lr, lsr #16
    70ec:	645f0000 	ldrbvs	r0, [pc], #-0	; 70f4 <__exidx_end+0x21c4>
    70f0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    70f4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 70fc <__exidx_end+0x21cc>
    70f8:	73657079 	cmnvc	r5, #121	; 0x79
    70fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7100:	735f0000 	cmpvc	pc, #0
    7104:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    7108:	00682e74 	rsbeq	r2, r8, r4, ror lr
    710c:	68000003 	stmdavs	r0, {r0, r1}
    7110:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7114:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7118:	00040068 	andeq	r0, r4, r8, rrx
    711c:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 7124 <__exidx_end+0x21f4>
    7120:	0100682e 	tsteq	r0, lr, lsr #16
    7124:	6f610000 	svcvs	0x00610000
    7128:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    712c:	00682e63 	rsbeq	r2, r8, r3, ror #28
    7130:	61000001 	tstvs	r0, r1
    7134:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    7138:	6f6d7461 	svcvs	0x006d7461
    713c:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    7140:	00000001 	andeq	r0, r0, r1
    7144:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    7148:	03000030 	movweq	r0, #48	; 0x30
    714c:	200100e5 	andcs	r0, r1, r5, ror #1
    7150:	03200f03 			; <UNDEFINED> instruction: 0x03200f03
    7154:	0f032071 	svceq	0x00032071
    7158:	09032520 	stmdbeq	r3, {r5, r8, sl, sp}
    715c:	0903309e 	stmdbeq	r3, {r1, r2, r3, r4, r7, ip, sp}
    7160:	02a3339e 	adceq	r3, r3, #2013265922	; 0x78000002
    7164:	01010007 	tsteq	r1, r7
    7168:	18020500 	stmdane	r2, {r8, sl}
    716c:	03000031 	movweq	r0, #49	; 0x31
    7170:	030101a0 	movweq	r0, #4512	; 0x11a0
    7174:	88222e0c 	stmdahi	r2!, {r2, r3, r9, sl, fp, sp}
    7178:	263c7a03 	ldrtcs	r7, [ip], -r3, lsl #20
    717c:	00060225 	andeq	r0, r6, r5, lsr #4
    7180:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7184:	00000002 	andeq	r0, r0, r2
    7188:	01c20300 	biceq	r0, r2, r0, lsl #6
    718c:	91252001 			; <UNDEFINED> instruction: 0x91252001
    7190:	2e790334 	mrccs	3, 3, r0, cr9, cr4, {1}
    7194:	2e7a0327 	cdpcs	3, 7, cr0, cr10, cr7, {1}
    7198:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    719c:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    71a0:	01040200 	mrseq	r0, R12_usr
    71a4:	302d3050 	eorcc	r3, sp, r0, asr r0
    71a8:	3d4b241f 	cfstrdcc	mvd2, [fp, #-124]	; 0xffffff84
    71ac:	6c3d341f 	cfldrsvs	mvf3, [sp], #-124	; 0xffffff84
    71b0:	666d0332 			; <UNDEFINED> instruction: 0x666d0332
    71b4:	263c1003 	ldrtcs	r1, [ip], -r3
    71b8:	01000902 	tsteq	r0, r2, lsl #18
    71bc:	02050001 	andeq	r0, r5, #1
    71c0:	00003144 	andeq	r3, r0, r4, asr #2
    71c4:	0101f303 	tsteq	r1, r3, lsl #6	; <UNPREDICTABLE>
    71c8:	07024b21 	streq	r4, [r2, -r1, lsr #22]
    71cc:	00010100 	andeq	r0, r1, r0, lsl #2
    71d0:	315c0205 	cmpcc	ip, r5, lsl #4
    71d4:	80030000 	andhi	r0, r3, r0
    71d8:	04240102 	strteq	r0, [r4], #-258	; 0xfffffefe
    71dc:	58220302 	stmdapl	r2!, {r1, r8, r9}
    71e0:	62030104 	andvs	r0, r3, #4, 2
    71e4:	03020482 	movweq	r0, #9346	; 0x2482
    71e8:	0104203c 	tsteq	r4, ip, lsr r0
    71ec:	3d4a4a03 	vstrcc	s9, [sl, #-12]
    71f0:	1f3d211f 	svcne	0x003d211f
    71f4:	301f3022 	andscc	r3, pc, r2, lsr #32
    71f8:	0c022322 	stceq	3, cr2, [r2], {34}	; 0x22
    71fc:	00010100 	andeq	r0, r1, r0, lsl #2
    7200:	31bc0205 			; <UNDEFINED> instruction: 0x31bc0205
    7204:	a3030000 	movwge	r0, #12288	; 0x3000
    7208:	4f250102 	svcmi	0x00250102
    720c:	17030204 	strne	r0, [r3, -r4, lsl #4]
    7210:	0301044a 	movweq	r0, #5194	; 0x144a
    7214:	024b4a6d 	subeq	r4, fp, #446464	; 0x6d000
    7218:	01010009 	tsteq	r1, r9
    721c:	00020500 	andeq	r0, r2, r0, lsl #10
    7220:	03000000 	movweq	r0, #0
    7224:	220102bc 	andcs	r0, r1, #188, 4	; 0xc000000b
    7228:	03201703 			; <UNDEFINED> instruction: 0x03201703
    722c:	03282069 			; <UNDEFINED> instruction: 0x03282069
    7230:	6c033c10 	stcvs	12, cr3, [r3], {16}
    7234:	2e15032e 	cdpcs	3, 1, cr0, cr5, cr14, {1}
    7238:	03586d03 	cmpeq	r8, #3, 26	; 0xc0
    723c:	6f032013 	svcvs	0x00032013
    7240:	20110320 	andscs	r0, r1, r0, lsr #6
    7244:	0006023f 	andeq	r0, r6, pc, lsr r2
    7248:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    724c:	00000002 	andeq	r0, r0, r2
    7250:	02e30300 	rsceq	r0, r3, #0, 6
    7254:	01210301 			; <UNDEFINED> instruction: 0x01210301
    7258:	0002024d 	andeq	r0, r2, sp, asr #4
    725c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7260:	00000002 	andeq	r0, r0, r2
    7264:	03900300 	orrseq	r0, r0, #0, 6
    7268:	20100301 	andscs	r0, r0, r1, lsl #6
    726c:	21211f21 			; <UNDEFINED> instruction: 0x21211f21
    7270:	01040200 	mrseq	r0, R12_usr
    7274:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    7278:	313d3d01 	teqcc	sp, r1, lsl #26
    727c:	0702341d 	smladeq	r2, sp, r4, r3
    7280:	00010100 	andeq	r0, r1, r0, lsl #2
    7284:	00000205 	andeq	r0, r0, r5, lsl #4
    7288:	b5030000 	strlt	r0, [r3, #-0]
    728c:	31170103 	tstcc	r7, r3, lsl #2
    7290:	023d332c 	eorseq	r3, sp, #44, 6	; 0xb0000000
    7294:	01010005 	tsteq	r1, r5
    7298:	000003a7 	andeq	r0, r0, r7, lsr #7
    729c:	02650002 	rsbeq	r0, r5, #2
    72a0:	01020000 	mrseq	r0, (UNDEF: 2)
    72a4:	000d0efb 	strdeq	r0, [sp], -fp
    72a8:	01010101 	tsteq	r1, r1, lsl #2
    72ac:	01000000 	mrseq	r0, (UNDEF: 0)
    72b0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    72b4:	2f2e2e2f 	svccs	0x002e2e2f
    72b8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    72bc:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    72c0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    72c4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    72c8:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    72cc:	63635c69 	cmnvs	r3, #26880	; 0x6900
    72d0:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    72d4:	302e302e 	eorcc	r3, lr, lr, lsr #32
    72d8:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    72dc:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    72e0:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    72e4:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    72e8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    72ec:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    72f0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    72f4:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 718c <__exidx_end+0x225c>
    72f8:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    72fc:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7300:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7304:	6f6e2d6d 	svcvs	0x006e2d6d
    7308:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    730c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7310:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7314:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7318:	615c3371 	cmpvs	ip, r1, ror r3
    731c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7320:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7324:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7328:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    732c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7330:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    7334:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    7338:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    733c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7340:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7344:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    7348:	31303030 	teqcc	r0, r0, lsr r0
    734c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7350:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7354:	61746562 	cmnvs	r4, r2, ror #10
    7358:	63635c32 	cmnvs	r3, #12800	; 0x3200
    735c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7360:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7198 <__exidx_end+0x2268>
    7364:	6f635c73 	svcvs	0x00635c73
    7368:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    736c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7370:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7374:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7378:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    737c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7380:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7384:	3130322d 	teqcc	r0, sp, lsr #4
    7388:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    738c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7390:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7394:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7398:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    739c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    73a0:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    73a4:	3a630073 	bcc	18c7578 <__ccfg+0x18a75d0>
    73a8:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    73ac:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    73b0:	302e322e 	eorcc	r3, lr, lr, lsr #4
    73b4:	3030302e 	eorscc	r3, r0, lr, lsr #32
    73b8:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    73bc:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    73c0:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    73c4:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    73c8:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    73cc:	6f6f745c 	svcvs	0x006f745c
    73d0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    73d4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    73d8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    73dc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    73e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    73e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    73e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    73ec:	5f342d69 	svcpl	0x00342d69
    73f0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    73f4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    73f8:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
    73fc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7400:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7404:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7408:	61652d65 	cmnvs	r5, r5, ror #26
    740c:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0xfffff69e
    7410:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    7414:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7418:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    741c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    7420:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    7424:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    7428:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    742c:	31303030 	teqcc	r0, r0, lsr r0
    7430:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    7434:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    7438:	61746562 	cmnvs	r4, r2, ror #10
    743c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    7440:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    7444:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 727c <__exidx_end+0x234c>
    7448:	6f635c73 	svcvs	0x00635c73
    744c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7450:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7454:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    7458:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    745c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7460:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7464:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    7468:	3130322d 	teqcc	r0, sp, lsr #4
    746c:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7470:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7474:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    7478:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    747c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7480:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7484:	72000065 	andvc	r0, r0, #101	; 0x65
    7488:	632e6366 			; <UNDEFINED> instruction: 0x632e6366
    748c:	00000100 	andeq	r0, r0, r0, lsl #2
    7490:	2e636672 	mcrcs	6, 3, r6, cr3, cr2, {3}
    7494:	00010068 	andeq	r0, r1, r8, rrx
    7498:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    749c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    74a0:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    74a4:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    74a8:	00020068 	andeq	r0, r2, r8, rrx
    74ac:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    74b0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    74b4:	0300682e 	movweq	r6, #2094	; 0x82e
    74b8:	74730000 	ldrbtvc	r0, [r3], #-0
    74bc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    74c0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    74c4:	66720000 	ldrbtvs	r0, [r2], -r0
    74c8:	69616d5f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    74cc:	786f626c 	stmdavc	pc!, {r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    74d0:	0100682e 	tsteq	r0, lr, lsr #16
    74d4:	66720000 	ldrbtvs	r0, [r2], -r0
    74d8:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 7364 <__exidx_end+0x2434>
    74dc:	5f6e6f6d 	svcpl	0x006e6f6d
    74e0:	2e646d63 	cdpcs	13, 6, cr6, cr4, cr3, {3}
    74e4:	00010068 	andeq	r0, r1, r8, rrx
    74e8:	5f667200 	svcpl	0x00667200
    74ec:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    74f0:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    74f4:	0100682e 	tsteq	r0, lr, lsr #16
    74f8:	74730000 	ldrbtvc	r0, [r3], #-0
    74fc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    7500:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    7504:	00000000 	andeq	r0, r0, r0
    7508:	00000205 	andeq	r0, r0, r5, lsl #4
    750c:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    7510:	00130100 	andseq	r0, r3, r0, lsl #2
    7514:	31010402 	tstcc	r1, r2, lsl #8
    7518:	01040200 	mrseq	r0, R12_usr
    751c:	03023f2f 	movweq	r3, #12079	; 0x2f2f
    7520:	00010100 	andeq	r0, r1, r0, lsl #2
    7524:	31f00205 	mvnscc	r0, r5, lsl #4
    7528:	fa030000 	blx	c7530 <__ccfg+0xa7588>
    752c:	02000100 	andeq	r0, r0, #0, 2
    7530:	04130104 	ldreq	r0, [r3], #-260	; 0xfffffefc
    7534:	01c70302 	biceq	r0, r7, r2, lsl #6
    7538:	0301044a 	movweq	r0, #5194	; 0x144a
    753c:	002e7ebd 	strhteq	r7, [lr], -sp
    7540:	22010402 	andcs	r0, r1, #33554432	; 0x2000000
    7544:	c1030204 	tstgt	r3, r4, lsl #4
    7548:	01043c01 	tsteq	r4, r1, lsl #24
    754c:	3c7ec203 	lfmcc	f4, 3, [lr], #-12
    7550:	0005022f 	andeq	r0, r5, pc, lsr #4
    7554:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7558:	00321802 	eorseq	r1, r2, r2, lsl #16
    755c:	018f0300 	orreq	r0, pc, r0, lsl #6
    7560:	1d231401 	cfstrsne	mvf1, [r3, #-4]!
    7564:	3d761b25 	fldmdbxcc	r6!, {d17-d34}	;@ Deprecated
    7568:	2f211f2f 	svccs	0x00211f2f
    756c:	21212d22 			; <UNDEFINED> instruction: 0x21212d22
    7570:	000c0221 	andeq	r0, ip, r1, lsr #4
    7574:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7578:	00326402 	eorseq	r6, r2, r2, lsl #8
    757c:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    7580:	2f961501 	svccs	0x00961501
    7584:	2525211c 	strcs	r2, [r5, #-284]!	; 0xfffffee4
    7588:	032f1f21 			; <UNDEFINED> instruction: 0x032f1f21
    758c:	3d3d660a 	ldccc	6, cr6, [sp, #-40]!	; 0xffffffd8
    7590:	5873032f 	ldmdapl	r3!, {r0, r1, r2, r3, r5, r8, r9}^
    7594:	3d661803 	stclcc	8, cr1, [r6, #-12]!
    7598:	68032f3d 	stmdavs	r3, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
    759c:	2f3d3d58 	svccs	0x003d3d58
    75a0:	3d580b03 	vldrcc	d16, [r8, #-12]
    75a4:	0b032f3d 	bleq	d32a0 <__ccfg+0xb32f8>
    75a8:	2f3d3d58 	svccs	0x003d3d58
    75ac:	2f3d3d5c 	svccs	0x003d3d5c
    75b0:	2f3e3d5c 	svccs	0x003e3d5c
    75b4:	002f0249 	eoreq	r0, pc, r9, asr #4
    75b8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    75bc:	0033b402 	eorseq	fp, r3, r2, lsl #8
    75c0:	01f30300 	mvnseq	r0, r0, lsl #6
    75c4:	01090301 	tsteq	r9, r1, lsl #6
    75c8:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    75cc:	21af2009 			; <UNDEFINED> instruction: 0x21af2009
    75d0:	221f2321 	andscs	r2, pc, #-2080374784	; 0x84000000
    75d4:	03262f22 			; <UNDEFINED> instruction: 0x03262f22
    75d8:	2f2d4a0b 	svccs	0x002d4a0b
    75dc:	0200335a 	andeq	r3, r0, #1744830465	; 0x68000001
    75e0:	76030204 	strvc	r0, [r3], -r4, lsl #4
    75e4:	3c11032e 	ldccc	3, cr0, [r1], {46}	; 0x2e
    75e8:	03f21403 	mvnseq	r1, #50331648	; 0x3000000
    75ec:	23032e6f 	movwcs	r2, #15983	; 0x3e6f
    75f0:	3c62034a 	stclcc	3, cr0, [r2], #-296	; 0xfffffed8
    75f4:	3632224c 	ldrtcc	r2, [r2], -ip, asr #4
    75f8:	50224c32 	eorpl	r4, r2, r2, lsr ip
    75fc:	5eac0903 	vfmapl.f16	s0, s24, s6	; <UNPREDICTABLE>
    7600:	03362659 	teqeq	r6, #93323264	; 0x5900000
    7604:	16026662 	strne	r6, [r2], -r2, ror #12
    7608:	00010100 	andeq	r0, r1, r0, lsl #2
    760c:	34cc0205 	strbcc	r0, [ip], #517	; 0x205
    7610:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    7614:	ad2f0102 	stfges	f0, [pc, #-8]!	; 7614 <__exidx_end+0x26e4>
    7618:	01000302 	tsteq	r0, r2, lsl #6
    761c:	02050001 	andeq	r0, r5, #1
    7620:	00000000 	andeq	r0, r0, r0
    7624:	01038203 	tsteq	r3, r3, lsl #4
    7628:	2a025d24 	bcs	9eac0 <__ccfg+0x7eb18>
    762c:	00010100 	andeq	r0, r1, r0, lsl #2
    7630:	34ec0205 	strbtcc	r0, [ip], #517	; 0x205
    7634:	96030000 	strls	r0, [r3], -r0
    7638:	23210103 			; <UNDEFINED> instruction: 0x23210103
    763c:	0602413e 			; <UNDEFINED> instruction: 0x0602413e
    7640:	e9010100 	stmdb	r1, {r8}
    7644:	02000001 	andeq	r0, r0, #1
    7648:	00016700 	andeq	r6, r1, r0, lsl #14
    764c:	fb010200 	blx	47e56 <__ccfg+0x27eae>
    7650:	01000d0e 	tsteq	r0, lr, lsl #26
    7654:	00010101 	andeq	r0, r1, r1, lsl #2
    7658:	00010000 	andeq	r0, r1, r0
    765c:	2f2e0100 	svccs	0x002e0100
    7660:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7664:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7668:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    766c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7670:	63006269 	movwvs	r6, #617	; 0x269
    7674:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7678:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    767c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7680:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7684:	5f393130 	svcpl	0x00393130
    7688:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    768c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7690:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7694:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7698:	6f745c36 	svcvs	0x00745c36
    769c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    76a0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    76a4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    76a8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    76ac:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    76b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    76b4:	61652d65 	cmnvs	r5, r5, ror #26
    76b8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    76bc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    76c0:	71353130 	teqvc	r5, r0, lsr r1
    76c4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    76c8:	6f6e2d6d 	svcvs	0x006e2d6d
    76cc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    76d0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    76d4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    76d8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    76dc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    76e0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    76e4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    76e8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    76ec:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    76f0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    76f4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    76f8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    76fc:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7700:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7704:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7708:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    770c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7710:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 75a8 <__exidx_end+0x2678>
    7714:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7718:	63675c72 	cmnvs	r7, #29184	; 0x7200
    771c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7720:	6f6e2d6d 	svcvs	0x006e2d6d
    7724:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7728:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    772c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7730:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7734:	615c3371 	cmpvs	ip, r1, ror r3
    7738:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    773c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7740:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7744:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7748:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    774c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7750:	65730000 	ldrbvs	r0, [r3, #-0]!
    7754:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    7758:	00010063 	andeq	r0, r1, r3, rrx
    775c:	6e6f6100 	powvse	f6, f7, f0
    7760:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    7764:	0100682e 	tsteq	r0, lr, lsr #16
    7768:	645f0000 	ldrbvs	r0, [pc], #-0	; 7770 <__exidx_end+0x2840>
    776c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    7770:	745f746c 	ldrbvc	r7, [pc], #-1132	; 7778 <__exidx_end+0x2848>
    7774:	73657079 	cmnvc	r5, #121	; 0x79
    7778:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    777c:	735f0000 	cmpvc	pc, #0
    7780:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    7784:	00682e74 	rsbeq	r2, r8, r4, ror lr
    7788:	73000003 	movwvc	r0, #3
    778c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    7790:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 761c <__exidx_end+0x26ec>
    7794:	0100682e 	tsteq	r0, lr, lsr #16
    7798:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    779c:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    77a0:	682e6f66 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
    77a4:	00000100 	andeq	r0, r0, r0, lsl #2
    77a8:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    77ac:	00682e70 	rsbeq	r2, r8, r0, ror lr
    77b0:	00000001 	andeq	r0, r0, r1
    77b4:	08020500 	stmdaeq	r2, {r8, sl}
    77b8:	03000035 	movweq	r0, #53	; 0x35
    77bc:	2001028d 	andcs	r0, r1, sp, lsl #5
    77c0:	00200a03 	eoreq	r0, r0, r3, lsl #20
    77c4:	41010402 	tstmi	r1, r2, lsl #8
    77c8:	2d43424f 	sfmcs	f4, 2, [r3, #-316]	; 0xfffffec4
    77cc:	02041f21 	andeq	r1, r4, #33, 30	; 0x84
    77d0:	66048703 	strvs	r8, [r4], -r3, lsl #14
    77d4:	86030104 	strhi	r0, [r3], -r4, lsl #2
    77d8:	42363c7c 	eorsmi	r3, r6, #124, 24	; 0x7c00
    77dc:	2d4a0903 	vstrcs.16	s1, [sl, #-6]	; <UNPREDICTABLE>
    77e0:	1f2f2f3d 	svcne	0x002f2f3d
    77e4:	23212f2f 			; <UNDEFINED> instruction: 0x23212f2f
    77e8:	03254831 			; <UNDEFINED> instruction: 0x03254831
    77ec:	5d41580a 	stclpl	8, cr5, [r1, #-40]	; 0xffffffd8
    77f0:	001e023f 	andseq	r0, lr, pc, lsr r2
    77f4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    77f8:	0035dc02 	eorseq	sp, r5, r2, lsl #24
    77fc:	00f00300 	rscseq	r0, r0, r0, lsl #6
    7800:	43302801 	teqmi	r0, #65536	; 0x10000
    7804:	09034133 	stmdbeq	r3, {r0, r1, r4, r5, r8, lr}
    7808:	0b03333c 	bleq	d4500 <__ccfg+0xb4558>
    780c:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    7810:	20790327 	rsbscs	r0, r9, r7, lsr #6
    7814:	03201503 			; <UNDEFINED> instruction: 0x03201503
    7818:	67422e09 	strbvs	r2, [r2, -r9, lsl #28]
    781c:	20090349 	andcs	r0, r9, r9, asr #6
    7820:	69242d59 	stmdbvs	r4!, {r0, r3, r4, r6, r8, sl, fp, sp}
    7824:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    7828:	024d2701 	subeq	r2, sp, #262144	; 0x40000
    782c:	01010013 	tsteq	r1, r3, lsl r0
    7830:	00000457 	andeq	r0, r0, r7, asr r4
    7834:	01650002 	cmneq	r5, r2
    7838:	01020000 	mrseq	r0, (UNDEF: 2)
    783c:	000d0efb 	strdeq	r0, [sp], -fp
    7840:	01010101 	tsteq	r1, r1, lsl #2
    7844:	01000000 	mrseq	r0, (UNDEF: 0)
    7848:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    784c:	2f2e2e2f 	svccs	0x002e2e2f
    7850:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7854:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    7858:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    785c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    7860:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7864:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7868:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    786c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7870:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7874:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7878:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    787c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7880:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7884:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7888:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    788c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7724 <__exidx_end+0x27f4>
    7890:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7894:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7898:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    789c:	6f6e2d6d 	svcvs	0x006e2d6d
    78a0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    78a4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    78a8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    78ac:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    78b0:	615c3371 	cmpvs	ip, r1, ror r3
    78b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    78b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    78bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    78c0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    78c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    78c8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    78cc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    78d0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    78d4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    78d8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    78dc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    78e0:	31303030 	teqcc	r0, r0, lsr r0
    78e4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    78e8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    78ec:	61746562 	cmnvs	r4, r2, ror #10
    78f0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    78f4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    78f8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7730 <__exidx_end+0x2800>
    78fc:	6f635c73 	svcvs	0x00635c73
    7900:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    7904:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    7908:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    790c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7910:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7914:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7918:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    791c:	3130322d 	teqcc	r0, sp, lsr #4
    7920:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    7924:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7928:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    792c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7930:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    7934:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    7938:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    793c:	73000073 	movwvc	r0, #115	; 0x73
    7940:	70757465 	rsbsvc	r7, r5, r5, ror #8
    7944:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 77d0 <__exidx_end+0x28a0>
    7948:	0100632e 	tsteq	r0, lr, lsr #6
    794c:	65730000 	ldrbvs	r0, [r3, #-0]!
    7950:	5f707574 	svcpl	0x00707574
    7954:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    7958:	00010068 	andeq	r0, r1, r8, rrx
    795c:	73797300 	cmnvc	r9, #0, 6
    7960:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    7964:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    7968:	5f000001 	svcpl	0x00000001
    796c:	61666564 	cmnvs	r6, r4, ror #10
    7970:	5f746c75 	svcpl	0x00746c75
    7974:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    7978:	00682e73 	rsbeq	r2, r8, r3, ror lr
    797c:	5f000002 	svcpl	0x00000002
    7980:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    7984:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    7988:	00000300 	andeq	r0, r0, r0, lsl #6
    798c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    7990:	00010068 	andeq	r0, r1, r8, rrx
    7994:	63736f00 	cmnvs	r3, #0, 30
    7998:	0100682e 	tsteq	r0, lr, lsr #16
    799c:	00000000 	andeq	r0, r0, r0
    79a0:	36800205 	strcc	r0, [r0], r5, lsl #4
    79a4:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    79a8:	0b030100 	bleq	c7db0 <__ccfg+0xa7e08>
    79ac:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    79b0:	03207203 			; <UNDEFINED> instruction: 0x03207203
    79b4:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    79b8:	2000d703 	andcs	sp, r0, r3, lsl #14
    79bc:	a8030104 	stmdage	r3, {r2, r8}
    79c0:	0204207f 	andeq	r2, r4, #127	; 0x7f
    79c4:	2e00d903 	vmlacs.f16	s26, s0, s6	; <UNPREDICTABLE>
    79c8:	0104212d 	tsteq	r4, sp, lsr #2
    79cc:	2e7fac03 	cdpcs	12, 7, cr10, cr15, cr3, {0}
    79d0:	2f214d30 	svccs	0x00214d30
    79d4:	22222265 	eorcs	r2, r2, #1342177286	; 0x50000006
    79d8:	7803221e 	stmdavc	r3, {r1, r2, r3, r4, r9, sp}
    79dc:	200d0358 	andcs	r0, sp, r8, asr r3
    79e0:	033c7303 	teqeq	ip, #201326592	; 0xc000000
    79e4:	21212010 			; <UNDEFINED> instruction: 0x21212010
    79e8:	0d022121 	stfeqs	f2, [r2, #-132]	; 0xffffff7c
    79ec:	00010100 	andeq	r0, r1, r0, lsl #2
    79f0:	36fc0205 	ldrbtcc	r0, [ip], r5, lsl #4
    79f4:	bf030000 	svclt	0x00030000
    79f8:	031a0101 	tsteq	sl, #1073741824	; 0x40000000
    79fc:	28204a78 	stmdacs	r0!, {r3, r4, r5, r6, r9, fp, lr}
    7a00:	03200e03 			; <UNDEFINED> instruction: 0x03200e03
    7a04:	03422e7a 	movteq	r2, #11898	; 0x2e7a
    7a08:	31302e0e 	teqcc	r0, lr, lsl #28
    7a0c:	042d432d 	strteq	r4, [sp], #-813	; 0xfffffcd3
    7a10:	04213002 	strteq	r3, [r1], #-2
    7a14:	2e0b0301 	cdpcs	3, 0, cr0, cr11, cr1, {0}
    7a18:	23652f3d 	cmncs	r5, #61, 30	; 0xf4
    7a1c:	4d660c03 	stclmi	12, cr0, [r6, #-12]!
    7a20:	2d28302c 	stccs	0, cr3, [r8, #-176]!	; 0xffffff50
    7a24:	15022d52 	strne	r2, [r2, #-3410]	; 0xfffff2ae
    7a28:	00010100 	andeq	r0, r1, r0, lsl #2
    7a2c:	37a80205 	strcc	r0, [r8, r5, lsl #4]!
    7a30:	9f030000 	svcls	0x00030000
    7a34:	0c030104 	stfeqs	f0, [r3], {4}
    7a38:	20090301 	andcs	r0, r9, r1, lsl #6
    7a3c:	21207703 			; <UNDEFINED> instruction: 0x21207703
    7a40:	30273331 	eorcc	r3, r7, r1, lsr r3
    7a44:	2d223130 	stfcss	f3, [r2, #-192]!	; 0xffffff40
    7a48:	3d31351d 	cfldr32cc	mvfx3, [r1, #-116]!	; 0xffffff8c
    7a4c:	3b223d3e 	blcc	896f4c <__ccfg+0x876fa4>
    7a50:	7603271d 			; <UNDEFINED> instruction: 0x7603271d
    7a54:	2e120320 	cdpcs	3, 1, cr0, cr2, cr0, {1}
    7a58:	01000602 	tsteq	r0, r2, lsl #12
    7a5c:	02050001 	andeq	r0, r5, #1
    7a60:	00003804 	andeq	r3, r0, r4, lsl #16
    7a64:	0104e503 	tsteq	r4, r3, lsl #10
    7a68:	79033418 	stmdbvc	r3, {r3, r4, sl, ip, sp}
    7a6c:	02333620 	eorseq	r3, r3, #32, 12	; 0x2000000
    7a70:	01010005 	tsteq	r1, r5
    7a74:	00020500 	andeq	r0, r2, r0, lsl #10
    7a78:	03000000 	movweq	r0, #0
    7a7c:	18010581 	stmdane	r1, {r0, r7, r8, sl}
    7a80:	00060233 	andeq	r0, r6, r3, lsr r2
    7a84:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7a88:	00381c02 	eorseq	r1, r8, r2, lsl #24
    7a8c:	05950300 	ldreq	r0, [r5, #768]	; 0x300
    7a90:	13031901 	movwne	r1, #14593	; 0x3901
    7a94:	0006022e 	andeq	r0, r6, lr, lsr #4
    7a98:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7a9c:	00382c02 	eorseq	r2, r8, r2, lsl #24
    7aa0:	05b80300 	ldreq	r0, [r8, #768]!	; 0x300
    7aa4:	13031901 	movwne	r1, #14593	; 0x3901
    7aa8:	0008022e 	andeq	r0, r8, lr, lsr #4
    7aac:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7ab0:	00384002 	eorseq	r4, r8, r2
    7ab4:	05db0300 	ldrbeq	r0, [fp, #768]	; 0x300
    7ab8:	200b0301 	andcs	r0, fp, r1, lsl #6
    7abc:	03200903 			; <UNDEFINED> instruction: 0x03200903
    7ac0:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    7ac4:	20790320 	rsbscs	r0, r9, r0, lsr #6
    7ac8:	22322a35 	eorscs	r2, r2, #217088	; 0x35000
    7acc:	47323031 			; <UNDEFINED> instruction: 0x47323031
    7ad0:	47323027 	ldrmi	r3, [r2, -r7, lsr #32]!
    7ad4:	372e1703 	strcc	r1, [lr, -r3, lsl #14]!
    7ad8:	02273a36 	eoreq	r3, r7, #221184	; 0x36000
    7adc:	01010008 	tsteq	r1, r8
    7ae0:	a4020500 	strge	r0, [r2], #-1280	; 0xfffffb00
    7ae4:	03000038 	movweq	r0, #56	; 0x38
    7ae8:	150106a9 	strne	r0, [r1, #-1705]	; 0xfffff957
    7aec:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    7af0:	00030220 	andeq	r0, r3, r0, lsr #4
    7af4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7af8:	0038b802 	eorseq	fp, r8, r2, lsl #16
    7afc:	06bc0300 	ldrteq	r0, [ip], r0, lsl #6
    7b00:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    7b04:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    7b08:	01010003 	tsteq	r1, r3
    7b0c:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    7b10:	03000038 	movweq	r0, #56	; 0x38
    7b14:	150106cf 	strne	r0, [r1, #-1743]	; 0xfffff931
    7b18:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    7b1c:	00030220 	andeq	r0, r3, r0, lsr #4
    7b20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b24:	0038e002 	eorseq	lr, r8, r2
    7b28:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    7b2c:	43211601 			; <UNDEFINED> instruction: 0x43211601
    7b30:	207a032f 	rsbscs	r0, sl, pc, lsr #6
    7b34:	032c3540 			; <UNDEFINED> instruction: 0x032c3540
    7b38:	16032071 			; <UNDEFINED> instruction: 0x16032071
    7b3c:	0003022e 	andeq	r0, r3, lr, lsr #4
    7b40:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7b44:	00390802 	eorseq	r0, r9, r2, lsl #16
    7b48:	07820300 	streq	r0, [r2, r0, lsl #6]
    7b4c:	02331601 	eorseq	r1, r3, #1048576	; 0x100000
    7b50:	01010006 	tsteq	r1, r6
    7b54:	18020500 	stmdane	r2, {r8, sl}
    7b58:	03000039 	movweq	r0, #57	; 0x39
    7b5c:	16010794 			; <UNDEFINED> instruction: 0x16010794
    7b60:	34294321 	strtcc	r4, [r9], #-801	; 0xfffffcdf
    7b64:	20790333 	rsbscs	r0, r9, r3, lsr r3
    7b68:	71031e35 	tstvc	r3, r5, lsr lr
    7b6c:	2016032e 	andscs	r0, r6, lr, lsr #6
    7b70:	01000502 	tsteq	r0, r2, lsl #10
    7b74:	02050001 	andeq	r0, r5, #1
    7b78:	00003944 	andeq	r3, r0, r4, asr #18
    7b7c:	0107b403 	tsteq	r7, r3, lsl #8
    7b80:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    7b84:	03022009 	movweq	r2, #8201	; 0x2009
    7b88:	00010100 	andeq	r0, r1, r0, lsl #2
    7b8c:	39580205 	ldmdbcc	r8, {r0, r2, r9}^
    7b90:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    7b94:	21150107 	tstcs	r5, r7, lsl #2
    7b98:	200a0355 	andcs	r0, sl, r5, asr r3
    7b9c:	01000302 	tsteq	r0, r2, lsl #6
    7ba0:	02050001 	andeq	r0, r5, #1
    7ba4:	0000396c 	andeq	r3, r0, ip, ror #18
    7ba8:	0102a703 	tsteq	r2, r3, lsl #14
    7bac:	20090320 	andcs	r0, r9, r0, lsr #6
    7bb0:	4e211f3d 	mcrmi	15, 1, r1, cr1, cr13, {1}
    7bb4:	02d1032f 	sbcseq	r0, r1, #-1140850688	; 0xbc000000
    7bb8:	7db903ac 	ldcvc	3, cr0, [r9, #688]!	; 0x2b0
    7bbc:	02c70320 	sbceq	r0, r7, #32, 6	; 0x80000000
    7bc0:	7db90320 	ldcvc	3, cr0, [r9, #128]!	; 0x80
    7bc4:	1f2f5c20 	svcne	0x002f5c20
    7bc8:	1f2f3d21 	svcne	0x002f3d21
    7bcc:	1f3d3d21 	svcne	0x003d3d21
    7bd0:	6e3d4321 	cdpvs	3, 3, cr4, cr13, cr1, {1}
    7bd4:	1f3d523d 	svcne	0x003d523d
    7bd8:	3c090321 	stccc	3, cr0, [r9], {33}	; 0x21
    7bdc:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
    7be0:	660b033d 			; <UNDEFINED> instruction: 0x660b033d
    7be4:	1f3d7c3d 	svcne	0x003d7c3d
    7be8:	024b4021 	subeq	r4, fp, #33	; 0x21
    7bec:	01010012 	tsteq	r1, r2, lsl r0
    7bf0:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    7bf4:	0300003a 	movweq	r0, #58	; 0x3a
    7bf8:	000107de 	ldrdeq	r0, [r1], -lr
    7bfc:	03010402 	movweq	r0, #5122	; 0x1402
    7c00:	2352200e 	cmpcs	r2, #14
    7c04:	4d1d231d 	ldcmi	3, cr2, [sp, #-116]	; 0xffffff8c
    7c08:	7a034b68 	bvc	da9b0 <__ccfg+0xbaa08>
    7c0c:	00413420 	subeq	r3, r1, r0, lsr #8
    7c10:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    7c14:	0b02315b 	bleq	94188 <__ccfg+0x741e0>
    7c18:	00010100 	andeq	r0, r1, r0, lsl #2
    7c1c:	3ae00205 	bcc	ff808438 <_estack+0xdf803438>
    7c20:	93030000 	movwls	r0, #12288	; 0x3000
    7c24:	09030108 	stmdbeq	r3, {r3, r8}
    7c28:	212d2f01 			; <UNDEFINED> instruction: 0x212d2f01
    7c2c:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    7c30:	024b3d01 	subeq	r3, fp, #1, 26	; 0x40
    7c34:	01010007 	tsteq	r1, r7
    7c38:	08020500 	stmdaeq	r2, {r8, sl}
    7c3c:	0300003b 	movweq	r0, #59	; 0x3b
    7c40:	0301039b 	movweq	r0, #5019	; 0x139b
    7c44:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    7c48:	0903203c 	stmdbeq	r3, {r2, r3, r4, r5, sp}
    7c4c:	31305220 	teqcc	r0, r0, lsr #4
    7c50:	234a0a03 	movtcs	r0, #43523	; 0xaa03
    7c54:	24484c2b 	strbcs	r4, [r8], #-3115	; 0xfffff3d5
    7c58:	33762d2f 	cmncc	r6, #3008	; 0xbc0
    7c5c:	501c3229 	andspl	r3, ip, r9, lsr #4
    7c60:	4f3d5226 	svcmi	0x003d5226
    7c64:	845d2f4d 	ldrbhi	r2, [sp], #-3917	; 0xfffff0b3
    7c68:	3d243d4b 	stccc	13, cr3, [r4, #-300]!	; 0xfffffed4
    7c6c:	01040200 	mrseq	r0, R12_usr
    7c70:	4b2f5b4b 	blmi	bde9a4 <__ccfg+0xbbe9fc>
    7c74:	033f4d86 	teqeq	pc, #8576	; 0x2180
    7c78:	221e4a09 	andscs	r4, lr, #36864	; 0x9000
    7c7c:	3c0b031e 	stccc	3, cr0, [fp], {30}
    7c80:	b9030304 	stmdblt	r3, {r2, r8, r9}
    7c84:	1f024a7d 	svcne	0x00024a7d
    7c88:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
    7c8c:	02000003 	andeq	r0, r0, #3
    7c90:	0001a800 	andeq	sl, r1, r0, lsl #16
    7c94:	fb010200 	blx	4849e <__ccfg+0x284f6>
    7c98:	01000d0e 	tsteq	r0, lr, lsl #26
    7c9c:	00010101 	andeq	r0, r1, r1, lsl #2
    7ca0:	00010000 	andeq	r0, r1, r0
    7ca4:	2f2e0100 	svccs	0x002e0100
    7ca8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    7cac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7cb0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    7cb4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    7cb8:	63006269 	movwvs	r6, #617	; 0x269
    7cbc:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7cc0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7cc4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7cc8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    7ccc:	5f393130 	svcpl	0x00393130
    7cd0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7cd4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7cd8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    7cdc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7ce0:	6f745c36 	svcvs	0x00745c36
    7ce4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7ce8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    7cec:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7cf0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7cf4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7cf8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7cfc:	61652d65 	cmnvs	r5, r5, ror #26
    7d00:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7d04:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7d08:	71353130 	teqvc	r5, r0, lsr r1
    7d0c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7d10:	6f6e2d6d 	svcvs	0x006e2d6d
    7d14:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7d18:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    7d1c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7d20:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7d24:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7d28:	00656e69 	rsbeq	r6, r5, r9, ror #28
    7d2c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7d30:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7d34:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7d38:	302e302e 	eorcc	r3, lr, lr, lsr #32
    7d3c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7d40:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7d44:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7d48:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    7d4c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7d50:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7d54:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7d58:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7bf0 <__exidx_end+0x2cc0>
    7d5c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7d60:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7d64:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7d68:	6f6e2d6d 	svcvs	0x006e2d6d
    7d6c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7d70:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7d74:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7d78:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    7d7c:	615c3371 	cmpvs	ip, r1, ror r3
    7d80:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7d84:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7d88:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    7d8c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7d90:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7d94:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7d98:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    7d9c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    7da0:	2f2e2e2f 	svccs	0x002e2e2f
    7da4:	00636e69 	rsbeq	r6, r3, r9, ror #28
    7da8:	73797300 	cmnvc	r9, #0, 6
    7dac:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    7db0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    7db4:	61000001 	tstvs	r0, r1
    7db8:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    7dbc:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    7dc0:	00000100 	andeq	r0, r0, r0, lsl #2
    7dc4:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    7dc8:	00010068 	andeq	r0, r1, r8, rrx
    7dcc:	63727000 	cmnvs	r2, #0
    7dd0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    7dd4:	73000001 	movwvc	r0, #1
    7dd8:	70757465 	rsbsvc	r7, r5, r5, ror #8
    7ddc:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 7c68 <__exidx_end+0x2d38>
    7de0:	0100682e 	tsteq	r0, lr, lsr #16
    7de4:	645f0000 	ldrbvs	r0, [pc], #-0	; 7dec <__exidx_end+0x2ebc>
    7de8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    7dec:	745f746c 	ldrbvc	r7, [pc], #-1132	; 7df4 <__exidx_end+0x2ec4>
    7df0:	73657079 	cmnvc	r5, #121	; 0x79
    7df4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    7df8:	735f0000 	cmpvc	pc, #0
    7dfc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    7e00:	00682e74 	rsbeq	r2, r8, r4, ror lr
    7e04:	68000003 	stmdavs	r0, {r0, r1}
    7e08:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    7e0c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    7e10:	00040068 	andeq	r0, r4, r8, rrx
    7e14:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 7e1c <__exidx_end+0x2eec>
    7e18:	0100682e 	tsteq	r0, lr, lsr #16
    7e1c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    7e20:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    7e24:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
    7e28:	00000100 	andeq	r0, r0, r0, lsl #2
    7e2c:	5f6e6f61 	svcpl	0x006e6f61
    7e30:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    7e34:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    7e38:	00000100 	andeq	r0, r0, r0, lsl #2
    7e3c:	02050000 	andeq	r0, r5, #0
    7e40:	00000000 	andeq	r0, r0, r0
    7e44:	0100f903 	tsteq	r0, r3, lsl #18	; <UNPREDICTABLE>
    7e48:	e9030204 	stmdb	r3, {r2, r9}
    7e4c:	01040102 	tsteq	r4, r2, lsl #2
    7e50:	2e7d9703 	cdpcs	7, 7, cr9, cr13, cr3, {0}
    7e54:	e9030204 	stmdb	r3, {r2, r9}
    7e58:	02002e02 	andeq	r2, r0, #2, 28
    7e5c:	ce030104 	adfgts	f0, f3, f4
    7e60:	01042000 	mrseq	r2, (UNDEF: 4)
    7e64:	01040200 	mrseq	r0, R12_usr
    7e68:	2e7cd103 	expcse	f5, f3
    7e6c:	002e0c03 	eoreq	r0, lr, r3, lsl #24
    7e70:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    7e74:	09034b89 	stmdbeq	r3, {r0, r3, r7, r8, r9, fp, lr}
    7e78:	0303044a 	movweq	r0, #13386	; 0x344a
    7e7c:	045801a5 	ldrbeq	r0, [r8], #-421	; 0xfffffe5b
    7e80:	7ee40301 	cdpvc	3, 14, cr0, cr4, cr1, {0}
    7e84:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    7e88:	04045d01 	streq	r5, [r4], #-3329	; 0xfffff2ff
    7e8c:	74038103 	strvc	r8, [r3], #-259	; 0xfffffefd
    7e90:	01040200 	mrseq	r0, R12_usr
    7e94:	043c1403 	ldrteq	r1, [ip], #-1027	; 0xfffffbfd
    7e98:	04020001 	streq	r0, [r2], #-1
    7e9c:	7cef0301 	stclvc	3, cr0, [pc], #4	; 7ea8 <__exidx_end+0x2f78>
    7ea0:	0304042e 	movweq	r0, #17454	; 0x442e
    7ea4:	322e03b7 	eorcc	r0, lr, #-603979774	; 0xdc000002
    7ea8:	4203241c 	andmi	r2, r3, #28, 8	; 0x1c000000
    7eac:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    7eb0:	2e140301 	cdpcs	3, 1, cr0, cr4, cr1, {0}
    7eb4:	02000104 	andeq	r0, r0, #4, 2
    7eb8:	f7030104 			; <UNDEFINED> instruction: 0xf7030104
    7ebc:	0903207c 	stmdbeq	r3, {r2, r3, r4, r5, r6, sp}
    7ec0:	281b412e 	ldmdacs	fp, {r1, r2, r3, r5, r8, lr}
    7ec4:	24384b83 	ldrtcs	r4, [r8], #-2947	; 0xfffff47d
    7ec8:	0304041b 	movweq	r0, #17435	; 0x441b
    7ecc:	002e02e7 	eoreq	r0, lr, r7, ror #5
    7ed0:	03010402 	movweq	r0, #5122	; 0x1402
    7ed4:	01043c14 	tsteq	r4, r4, lsl ip
    7ed8:	01040200 	mrseq	r0, R12_usr
    7edc:	207d8d03 	rsbscs	r8, sp, r3, lsl #26
    7ee0:	00170230 	andseq	r0, r7, r0, lsr r2
    7ee4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7ee8:	003c5802 	eorseq	r5, ip, r2, lsl #16
    7eec:	01da0300 	bicseq	r0, sl, r0, lsl #6
    7ef0:	2e1d0301 	cdpcs	3, 1, cr0, cr13, cr1, {0}
    7ef4:	03206303 			; <UNDEFINED> instruction: 0x03206303
    7ef8:	2f59201d 	svccs	0x0059201d
    7efc:	22323241 	eorscs	r3, r2, #268435460	; 0x10000004
    7f00:	9421321c 	strtls	r3, [r1], #-540	; 0xfffffde4
    7f04:	041b325c 	ldreq	r3, [fp], #-604	; 0xfffffda4
    7f08:	2e5f0305 	cdpcs	3, 5, cr0, cr15, cr5, {0}
    7f0c:	03010421 	movweq	r0, #5153	; 0x1421
    7f10:	32432e24 	subcc	r2, r3, #36, 28	; 0x240
    7f14:	0504331b 	streq	r3, [r4, #-795]	; 0xfffffce5
    7f18:	21205003 			; <UNDEFINED> instruction: 0x21205003
    7f1c:	2e030104 	adfcss	f0, f3, f4
    7f20:	0305042e 	movweq	r0, #21550	; 0x542e
    7f24:	01042e51 	tsteq	r4, r1, asr lr
    7f28:	04203403 	strteq	r3, [r0], #-1027	; 0xfffffbfd
    7f2c:	204d0305 	subcs	r0, sp, r5, lsl #6
    7f30:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    7f34:	23652f2e 	cmncs	r5, #46, 30	; 0xb8
    7f38:	214d2f69 	cmpcs	sp, r9, ror #30
    7f3c:	0032213e 	eorseq	r2, r2, lr, lsr r1
    7f40:	06010402 	streq	r0, [r1], -r2, lsl #8
    7f44:	0f030658 	svceq	0x00030658
    7f48:	2f3fca4a 	svccs	0x003fca4a
    7f4c:	2b24242a 	blcs	910ffc <__ccfg+0x8f1054>
    7f50:	31934032 	orrscc	r4, r3, r2, lsr r0
    7f54:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    7f58:	3c630321 	stclcc	3, cr0, [r3], #-132	; 0xffffff7c
    7f5c:	2026032d 	eorcs	r0, r6, sp, lsr #6
    7f60:	3e3d3131 	mrccc	1, 1, r3, cr13, cr1, {1}
    7f64:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    7f68:	03212e0b 			; <UNDEFINED> instruction: 0x03212e0b
    7f6c:	09033c78 	stmdbeq	r3, {r3, r4, r5, r6, sl, fp, ip, sp}
    7f70:	2e770320 	cdpcs	3, 7, cr0, cr7, cr0, {1}
    7f74:	213c0e03 	teqcs	ip, r3, lsl #28
    7f78:	03207103 			; <UNDEFINED> instruction: 0x03207103
    7f7c:	1d7b3c0f 	ldclne	12, cr3, [fp, #-60]!	; 0xffffffc4
    7f80:	22652123 	rsbcs	r2, r5, #-1073741816	; 0xc0000008
    7f84:	03282321 			; <UNDEFINED> instruction: 0x03282321
    7f88:	21342078 	teqcs	r4, r8, ror r0
    7f8c:	213d4c22 	teqcs	sp, r2, lsr #24
    7f90:	322c403e 	eorcc	r4, ip, #62	; 0x3e
    7f94:	0021023d 	eoreq	r0, r1, sp, lsr r2
    7f98:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7f9c:	003e7802 	eorseq	r7, lr, r2, lsl #16
    7fa0:	03b60300 			; <UNDEFINED> instruction: 0x03b60300
    7fa4:	22402701 	subcs	r2, r0, #262144	; 0x40000
    7fa8:	4e24a22f 	cdpmi	2, 2, cr10, cr4, cr15, {1}
    7fac:	864e2a40 	strbhi	r2, [lr], -r0, asr #20
    7fb0:	01000902 	tsteq	r0, r2, lsl #18
    7fb4:	02050001 	andeq	r0, r5, #1
    7fb8:	00000000 	andeq	r0, r0, r0
    7fbc:	0103e503 	tsteq	r3, r3, lsl #10
    7fc0:	2f200c03 	svccs	0x00200c03
    7fc4:	2d5a3028 	ldclcs	0, cr3, [sl, #-160]	; 0xffffff60
    7fc8:	1f322d30 	svcne	0x00322d30
    7fcc:	2f2b2421 	svccs	0x002b2421
    7fd0:	2f24322c 	svccs	0x0024322c
    7fd4:	4b2f3430 	blmi	bd509c <__ccfg+0xbb50f4>
    7fd8:	023e1e22 	eorseq	r1, lr, #544	; 0x220
    7fdc:	0101000c 	tsteq	r1, ip
    7fe0:	d8020500 	stmdale	r2, {r8, sl}
    7fe4:	0300003e 	movweq	r0, #62	; 0x3e
    7fe8:	130104a6 	movwne	r0, #5286	; 0x14a6
    7fec:	0226483f 	eoreq	r4, r6, #4128768	; 0x3f0000
    7ff0:	01010004 	tsteq	r1, r4
    7ff4:	0000022b 	andeq	r0, r0, fp, lsr #4
    7ff8:	01430002 	cmpeq	r3, r2
    7ffc:	01020000 	mrseq	r0, (UNDEF: 2)
    8000:	000d0efb 	strdeq	r0, [sp], -fp
    8004:	01010101 	tsteq	r1, r1, lsl #2
    8008:	01000000 	mrseq	r0, (UNDEF: 0)
    800c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    8010:	2f2e2e2f 	svccs	0x002e2e2f
    8014:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8018:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    801c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    8020:	0062696c 	rsbeq	r6, r2, ip, ror #18
    8024:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    8028:	63635c69 	cmnvs	r3, #26880	; 0x6900
    802c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    8030:	302e302e 	eorcc	r3, lr, lr, lsr #32
    8034:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    8038:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    803c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    8040:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    8044:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    8048:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    804c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    8050:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 7ee8 <__exidx_end+0x2fb8>
    8054:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    8058:	63675c72 	cmnvs	r7, #29184	; 0x7200
    805c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8060:	6f6e2d6d 	svcvs	0x006e2d6d
    8064:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8068:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    806c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8070:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8074:	615c3371 	cmpvs	ip, r1, ror r3
    8078:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    807c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8080:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8084:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8088:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    808c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    8090:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    8094:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    8098:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    809c:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    80a0:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    80a4:	31303030 	teqcc	r0, r0, lsr r0
    80a8:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    80ac:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    80b0:	61746562 	cmnvs	r4, r2, ror #10
    80b4:	63635c32 	cmnvs	r3, #12800	; 0x3200
    80b8:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    80bc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 7ef4 <__exidx_end+0x2fc4>
    80c0:	6f635c73 	svcvs	0x00635c73
    80c4:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    80c8:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    80cc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    80d0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    80d4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    80d8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    80dc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    80e0:	3130322d 	teqcc	r0, sp, lsr #4
    80e4:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    80e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    80ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    80f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    80f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    80f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    80fc:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    8100:	63000073 	movwvs	r0, #115	; 0x73
    8104:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    8108:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    810c:	00010063 	andeq	r0, r1, r3, rrx
    8110:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    8114:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    8118:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    811c:	5f000001 	svcpl	0x00000001
    8120:	61666564 	cmnvs	r6, r4, ror #10
    8124:	5f746c75 	svcpl	0x00746c75
    8128:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    812c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8130:	5f000002 	svcpl	0x00000002
    8134:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    8138:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    813c:	00000300 	andeq	r0, r0, r0, lsl #6
    8140:	02050000 	andeq	r0, r5, #0
    8144:	00000000 	andeq	r0, r0, r0
    8148:	0100c403 	tsteq	r0, r3, lsl #8
    814c:	06022f13 			; <UNDEFINED> instruction: 0x06022f13
    8150:	00010100 	andeq	r0, r1, r0, lsl #2
    8154:	00000205 	andeq	r0, r0, r5, lsl #4
    8158:	d0030000 	andle	r0, r3, r0
    815c:	2f140100 	svccs	0x00140100
    8160:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    8164:	01010008 	tsteq	r1, r8
    8168:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    816c:	0300003e 	movweq	r0, #62	; 0x3e
    8170:	1a0100e6 	bne	48510 <__ccfg+0x28568>
    8174:	02044e2a 	andeq	r4, r4, #672	; 0x2a0
    8178:	2e019b03 	vmlacs.f64	d9, d1, d3
    817c:	e6030104 	str	r0, [r3], -r4, lsl #2
    8180:	4c232e7e 	stcmi	14, cr2, [r3], #-504	; 0xfffffe08
    8184:	2f724b4b 	svccs	0x00724b4b
    8188:	00050224 	andeq	r0, r5, r4, lsr #4
    818c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    8190:	00000002 	andeq	r0, r0, r2
    8194:	01830300 	orreq	r0, r3, r0, lsl #6
    8198:	03020401 	movweq	r0, #9217	; 0x2401
    819c:	042001b0 	strteq	r0, [r0], #-432	; 0xfffffe50
    81a0:	7ed60301 	cdpvc	3, 13, cr0, cr6, cr1, {0}
    81a4:	2331392e 	teqcs	r1, #753664	; 0xb8000
    81a8:	033c7803 	teqeq	ip, #196608	; 0x30000
    81ac:	09034a0a 	stmdbeq	r3, {r1, r3, r9, fp, lr}
    81b0:	0502252e 	streq	r2, [r2, #-1326]	; 0xfffffad2
    81b4:	00010100 	andeq	r0, r1, r0, lsl #2
    81b8:	3f3c0205 	svccc	0x003c0205
    81bc:	a6030000 	strge	r0, [r3], -r0
    81c0:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    81c4:	2000e303 	andcs	lr, r0, r3, lsl #6
    81c8:	032e1103 			; <UNDEFINED> instruction: 0x032e1103
    81cc:	11033c6f 	tstne	r3, pc, ror #24
    81d0:	01042520 	tsteq	r4, r0, lsr #10
    81d4:	3c7f8c03 	ldclcc	12, cr8, [pc], #-12	; 81d0 <__exidx_end+0x32a0>
    81d8:	22219592 	eorcs	r9, r1, #612368384	; 0x24800000
    81dc:	41412221 	cmpmi	r1, r1, lsr #4
    81e0:	2e090339 	mcrcs	3, 0, r0, cr9, cr9, {1}
    81e4:	2e730327 	cdpcs	3, 7, cr0, cr3, cr7, {1}
    81e8:	20640321 	rsbcs	r0, r4, r1, lsr #6
    81ec:	02203003 	eoreq	r3, r0, #3
    81f0:	01010004 	tsteq	r1, r4
    81f4:	a8020500 	stmdage	r2, {r8, sl}
    81f8:	0300003f 	movweq	r0, #63	; 0x3f
    81fc:	040101e0 	streq	r0, [r1], #-480	; 0xfffffe20
    8200:	01a40302 			; <UNDEFINED> instruction: 0x01a40302
    8204:	03010420 	movweq	r0, #5152	; 0x1420
    8208:	042e7edd 	strteq	r7, [lr], #-3805	; 0xfffff123
    820c:	02900302 	addseq	r0, r0, #134217728	; 0x8000000
    8210:	0301042e 	movweq	r0, #5166	; 0x142e
    8214:	002e7df0 	strdeq	r7, [lr], -r0	; <UNPREDICTABLE>
    8218:	03010402 	movweq	r0, #5122	; 0x1402
    821c:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
    8220:	1e010100 	adfnes	f0, f1, f0
    8224:	02000002 	andeq	r0, r0, #2
    8228:	00014200 	andeq	r4, r1, r0, lsl #4
    822c:	fb010200 	blx	48a36 <__ccfg+0x28a8e>
    8230:	01000d0e 	tsteq	r0, lr, lsl #26
    8234:	00010101 	andeq	r0, r1, r1, lsl #2
    8238:	00010000 	andeq	r0, r1, r0
    823c:	2f2e0100 	svccs	0x002e0100
    8240:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8244:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8248:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    824c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    8250:	63006269 	movwvs	r6, #617	; 0x269
    8254:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    8258:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    825c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    8260:	30302e30 	eorscc	r2, r0, r0, lsr lr
    8264:	5f393130 	svcpl	0x00393130
    8268:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    826c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    8270:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    8274:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    8278:	6f745c36 	svcvs	0x00745c36
    827c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    8280:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    8284:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    8288:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    828c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    8290:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8294:	61652d65 	cmnvs	r5, r5, ror #26
    8298:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    829c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    82a0:	71353130 	teqvc	r5, r0, lsr r1
    82a4:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    82a8:	6f6e2d6d 	svcvs	0x006e2d6d
    82ac:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    82b0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    82b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    82b8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    82bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    82c0:	00656e69 	rsbeq	r6, r5, r9, ror #28
    82c4:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    82c8:	63635c69 	cmnvs	r3, #26880	; 0x6900
    82cc:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    82d0:	302e302e 	eorcc	r3, lr, lr, lsr #32
    82d4:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    82d8:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    82dc:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    82e0:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    82e4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    82e8:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    82ec:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    82f0:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 8188 <__exidx_end+0x3258>
    82f4:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    82f8:	63675c72 	cmnvs	r7, #29184	; 0x7200
    82fc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    8300:	6f6e2d6d 	svcvs	0x006e2d6d
    8304:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8308:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    830c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    8310:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    8314:	615c3371 	cmpvs	ip, r1, ror r3
    8318:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    831c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8320:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8324:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    8328:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    832c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    8330:	64640000 	strbtvs	r0, [r4], #-0
    8334:	00682e69 	rsbeq	r2, r8, r9, ror #28
    8338:	64000001 	strvs	r0, [r0], #-1
    833c:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    8340:	00000100 	andeq	r0, r0, r0, lsl #2
    8344:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    8348:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    834c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8350:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8354:	00000200 	andeq	r0, r0, r0, lsl #4
    8358:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    835c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    8360:	00030068 	andeq	r0, r3, r8, rrx
    8364:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    8368:	0100682e 	tsteq	r0, lr, lsr #16
    836c:	00000000 	andeq	r0, r0, r0
    8370:	3fc00205 	svccc	0x00c00205
    8374:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    8378:	31200101 			; <UNDEFINED> instruction: 0x31200101
    837c:	221e5030 	andscs	r5, lr, #48	; 0x30
    8380:	022c2322 	eoreq	r2, ip, #-2013265920	; 0x88000000
    8384:	01010005 	tsteq	r1, r5
    8388:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    838c:	003fe802 	eorseq	lr, pc, r2, lsl #16
    8390:	00c30300 	sbceq	r0, r3, r0, lsl #6
    8394:	010a0301 	tsteq	sl, r1, lsl #6
    8398:	01000402 	tsteq	r0, r2, lsl #8
    839c:	00020401 	andeq	r0, r2, r1, lsl #8
    83a0:	00000205 	andeq	r0, r0, r5, lsl #4
    83a4:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    83a8:	0e030100 	adfeqs	f0, f3, f0
    83ac:	03233301 			; <UNDEFINED> instruction: 0x03233301
    83b0:	35352e78 	ldrcc	r2, [r5, #-3704]!	; 0xfffff188
    83b4:	0004024f 	andeq	r0, r4, pc, asr #4
    83b8:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    83bc:	00020500 	andeq	r0, r2, r0, lsl #10
    83c0:	03000000 	movweq	r0, #0
    83c4:	03010185 	movweq	r0, #4485	; 0x1185
    83c8:	6f032011 	svcvs	0x00032011
    83cc:	2e130320 	cdpcs	3, 1, cr0, cr3, cr0, {1}
    83d0:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    83d4:	03342e09 	teqeq	r4, #9, 28	; 0x90
    83d8:	03442e71 	movteq	r2, #20081	; 0x4e71
    83dc:	2d2f2e0c 	stccs	14, cr2, [pc, #-48]!	; 83b4 <__exidx_end+0x3484>
    83e0:	01000202 	tsteq	r0, r2, lsl #4
    83e4:	00020401 	andeq	r0, r2, r1, lsl #8
    83e8:	00000205 	andeq	r0, r0, r5, lsl #4
    83ec:	af030000 	svcge	0x00030000
    83f0:	11030101 	tstne	r3, r1, lsl #2
    83f4:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    83f8:	2013032e 	andscs	r0, r3, lr, lsr #6
    83fc:	0301042f 	movweq	r0, #5167	; 0x142f
    8400:	4d302069 	ldcmi	0, cr2, [r0, #-420]!	; 0xfffffe5c
    8404:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    8408:	03020421 	movweq	r0, #9249	; 0x2421
    840c:	05022e1d 	streq	r2, [r2, #-3613]	; 0xfffff1e3
    8410:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8414:	02050002 	andeq	r0, r5, #2
    8418:	00000000 	andeq	r0, r0, r0
    841c:	0101de03 	tsteq	r1, r3, lsl #28
    8420:	1b201103 	blne	80c834 <__ccfg+0x7ec88c>
    8424:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    8428:	302d2e14 	eorcc	r2, sp, r4, lsl lr
    842c:	b9030104 	stmdblt	r3, {r2, r8}
    8430:	4d30207f 	ldcmi	0, cr2, [r0, #-508]!	; 0xfffffe04
    8434:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    8438:	03020421 	movweq	r0, #9249	; 0x2421
    843c:	422e00c8 	eormi	r0, lr, #200	; 0xc8
    8440:	01000502 	tsteq	r0, r2, lsl #10
    8444:	00024301 	andeq	r4, r2, r1, lsl #6
    8448:	95000300 	strls	r0, [r0, #-768]	; 0xfffffd00
    844c:	02000001 	andeq	r0, r0, #1
    8450:	0d0efb01 	vstreq	d15, [lr, #-4]
    8454:	01010100 	mrseq	r0, (UNDEF: 17)
    8458:	00000001 	andeq	r0, r0, r1
    845c:	01000001 	tsteq	r0, r1
    8460:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8464:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8468:	2f2e2e2f 	svccs	0x002e2e2f
    846c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8470:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8474:	2f2e2e2f 	svccs	0x002e2e2f
    8478:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    847c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 82e0 <__exidx_end+0x33b0>
    8480:	2f636269 	svccs	0x00636269
    8484:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    8488:	2f656e69 	svccs	0x00656e69
    848c:	2f6d7261 	svccs	0x006d7261
    8490:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8494:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xfffff0d2
    8498:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    849c:	73752f00 	cmnvc	r5, #0, 30
    84a0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    84a4:	63672f62 	cmnvs	r7, #392	; 0x188
    84a8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    84ac:	6f6e2d6d 	svcvs	0x006e2d6d
    84b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    84b4:	2f696261 	svccs	0x00696261
    84b8:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    84bc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    84c0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    84c4:	622f0065 	eorvs	r0, pc, #101	; 0x65
    84c8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    84cc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    84d0:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    84d4:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    84d8:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    84dc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    84e0:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    84e4:	2f302e33 	svccs	0x00302e33
    84e8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    84ec:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8350 <__exidx_end+0x3420>
    84f0:	2f636269 	svccs	0x00636269
    84f4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    84f8:	2f656475 	svccs	0x00656475
    84fc:	00737973 	rsbseq	r7, r3, r3, ror r9
    8500:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8504:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8508:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    850c:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8510:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8514:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8518:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    851c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8520:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8524:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8528:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    852c:	6f6c2f63 	svcvs	0x006c2f63
    8530:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    8534:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8538:	2f646c69 	svccs	0x00646c69
    853c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8540:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8544:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8548:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    854c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8550:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8554:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8558:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    855c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8560:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8564:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8568:	00006564 	andeq	r6, r0, r4, ror #10
    856c:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    8570:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    8574:	00000100 	andeq	r0, r0, r0, lsl #2
    8578:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    857c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    8580:	00000200 	andeq	r0, r0, r0, lsl #4
    8584:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8588:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    858c:	00000300 	andeq	r0, r0, r0, lsl #6
    8590:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8594:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8598:	6c000003 	stcvs	0, cr0, [r0], {3}
    859c:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    85a0:	00030068 	andeq	r0, r3, r8, rrx
    85a4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    85a8:	61636f6c 	cmnvs	r3, ip, ror #30
    85ac:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
    85b0:	00000400 	andeq	r0, r0, r0, lsl #8
    85b4:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    85b8:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    85bc:	00000500 	andeq	r0, r0, r0, lsl #10
    85c0:	61686377 	smcvs	34359	; 0x8637
    85c4:	00682e72 	rsbeq	r2, r8, r2, ror lr
    85c8:	6c000005 	stcvs	0, cr0, [r0], {5}
    85cc:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    85d0:	00682e65 	rsbeq	r2, r8, r5, ror #28
    85d4:	73000005 	movwvc	r0, #5
    85d8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    85dc:	00682e67 	rsbeq	r2, r8, r7, ror #28
    85e0:	00000005 	andeq	r0, r0, r5
    85e4:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    85e8:	003ff002 	eorseq	pc, pc, r2
    85ec:	01330300 	teqeq	r3, r0, lsl #6
    85f0:	0e030305 	cdpeq	3, 0, cr0, cr3, cr5, {0}
    85f4:	13131301 	tstne	r3, #67108864	; 0x4000000
    85f8:	06010516 			; <UNDEFINED> instruction: 0x06010516
    85fc:	05016b03 	streq	r6, [r1, #-2819]	; 0xfffff4fd
    8600:	3c150306 	ldccc	3, cr0, [r5], {6}
    8604:	02001c05 	andeq	r1, r0, #1280	; 0x500
    8608:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    860c:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    8610:	02006601 	andeq	r6, r0, #1048576	; 0x100000
    8614:	059e0104 	ldreq	r0, [lr, #260]	; 0x104
    8618:	0528060b 	streq	r0, [r8, #-1547]!	; 0xfffff9f5
    861c:	3013061a 	andscc	r0, r3, sl, lsl r6
    8620:	060b0539 			; <UNDEFINED> instruction: 0x060b0539
    8624:	1a05132f 	bne	14d2e8 <__ccfg+0x12d340>
    8628:	0b050106 	bleq	148a48 <__ccfg+0x128aa0>
    862c:	06133d06 	ldreq	r3, [r3], -r6, lsl #26
    8630:	030d0501 	movweq	r0, #54529	; 0xd501
    8634:	0a03207a 	beq	d0824 <__ccfg+0xb087c>
    8638:	203c204a 	eorscs	r2, ip, sl, asr #32
    863c:	060b0520 	streq	r0, [fp], -r0, lsr #10
    8640:	061a0530 			; <UNDEFINED> instruction: 0x061a0530
    8644:	060b0501 	streq	r0, [fp], -r1, lsl #10
    8648:	0501062f 	streq	r0, [r1, #-1583]	; 0xfffff9d1
    864c:	4a581d0d 	bmi	160fa88 <__ccfg+0x15efae0>
    8650:	030e0520 	movweq	r0, #58656	; 0xe520
    8654:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    8658:	2e5e0320 	cdpcs	3, 5, cr0, cr14, cr0, {1}
    865c:	0605052e 	streq	r0, [r5], -lr, lsr #10
    8660:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    8664:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    8668:	01053b09 	tsteq	r5, r9, lsl #22
    866c:	03090533 	movweq	r0, #38195	; 0x9533
    8670:	0e055859 	mcreq	8, 0, r5, cr5, cr9, {2}
    8674:	05202203 	streq	r2, [r0, #-515]!	; 0xfffffdfd
    8678:	0e052009 	cdpeq	0, 0, cr2, cr5, cr9, {0}
    867c:	0309053c 	movweq	r0, #38204	; 0x953c
    8680:	0d05205e 	stceq	0, cr2, [r5, #-376]	; 0xfffffe88
    8684:	022e1703 	eoreq	r1, lr, #786432	; 0xc0000
    8688:	01010002 	tsteq	r1, r2
    868c:	00000171 	andeq	r0, r0, r1, ror r1
    8690:	01170003 	tsteq	r7, r3
    8694:	01020000 	mrseq	r0, (UNDEF: 2)
    8698:	000d0efb 	strdeq	r0, [sp], -fp
    869c:	01010101 	tsteq	r1, r1, lsl #2
    86a0:	01000000 	mrseq	r0, (UNDEF: 0)
    86a4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    86a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    86ac:	2f2e2e2f 	svccs	0x002e2e2f
    86b0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    86b4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    86b8:	2f2e2e2f 	svccs	0x002e2e2f
    86bc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    86c0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8524 <__exidx_end+0x35f4>
    86c4:	2f636269 	svccs	0x00636269
    86c8:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    86cc:	2f006269 	svccs	0x00006269
    86d0:	2f727375 	svccs	0x00727375
    86d4:	2f62696c 	svccs	0x0062696c
    86d8:	2f636367 	svccs	0x00636367
    86dc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    86e0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    86e4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    86e8:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    86ec:	2f312e33 	svccs	0x00312e33
    86f0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    86f4:	00656475 	rsbeq	r6, r5, r5, ror r4
    86f8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    86fc:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8700:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8704:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8708:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    870c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8710:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8714:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8718:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    871c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8720:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8724:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8728:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    872c:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    8730:	622f0073 	eorvs	r0, pc, #115	; 0x73
    8734:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8738:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    873c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8740:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8744:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8748:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    874c:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8750:	2f302e33 	svccs	0x00302e33
    8754:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8758:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 85bc <__exidx_end+0x368c>
    875c:	2f636269 	svccs	0x00636269
    8760:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8764:	00656475 	rsbeq	r6, r5, r5, ror r4
    8768:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
    876c:	00632e64 	rsbeq	r2, r3, r4, ror #28
    8770:	73000001 	movwvc	r0, #1
    8774:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8778:	00682e66 	rsbeq	r2, r8, r6, ror #28
    877c:	5f000002 	svcpl	0x00000002
    8780:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8784:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8788:	72000003 	andvc	r0, r0, #3
    878c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8790:	0300682e 	movweq	r6, #2094	; 0x82e
    8794:	6f6c0000 	svcvs	0x006c0000
    8798:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    879c:	00000300 	andeq	r0, r0, r0, lsl #6
    87a0:	6c647473 	cfstrdvs	mvd7, [r4], #-460	; 0xfffffe34
    87a4:	682e6269 	stmdavs	lr!, {r0, r3, r5, r6, r9, sp, lr}
    87a8:	00000400 	andeq	r0, r0, r0, lsl #8
    87ac:	00010500 	andeq	r0, r1, r0, lsl #10
    87b0:	409c0205 	addsmi	r0, ip, r5, lsl #4
    87b4:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    87b8:	13030501 	movwne	r0, #13569	; 0x3501
    87bc:	05141d05 	ldreq	r1, [r4, #-3333]	; 0xfffff2fb
    87c0:	1b051303 	blne	14d3d4 <__ccfg+0x12d42c>
    87c4:	202e0106 	eorcs	r0, lr, r6, lsl #2
    87c8:	2f010520 	svccs	0x00010520
    87cc:	03054e06 	movweq	r4, #24070	; 0x5e06
    87d0:	06120513 			; <UNDEFINED> instruction: 0x06120513
    87d4:	1f010501 	svcne	0x00010501
    87d8:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
    87dc:	0525061d 	streq	r0, [r5, #-1565]!	; 0xfffff9e3
    87e0:	06051303 	streq	r1, [r5], -r3, lsl #6
    87e4:	1e051306 	cdpne	3, 0, cr1, cr5, cr6, {0}
    87e8:	44054a20 	strmi	r4, [r5], #-2592	; 0xfffff5e0
    87ec:	491b052e 	ldmdbmi	fp, {r1, r2, r3, r5, r8, sl}
    87f0:	30060305 	andcc	r0, r6, r5, lsl #6
    87f4:	01060a05 	tsteq	r6, r5, lsl #20
    87f8:	012f0105 			; <UNDEFINED> instruction: 0x012f0105
    87fc:	01000a02 	tsteq	r0, r2, lsl #20
    8800:	0001c501 	andeq	ip, r1, r1, lsl #10
    8804:	7e000300 	cdpvc	3, 0, cr0, cr0, cr0, {0}
    8808:	02000001 	andeq	r0, r0, #1
    880c:	0d0efb01 	vstreq	d15, [lr, #-4]
    8810:	01010100 	mrseq	r0, (UNDEF: 17)
    8814:	00000001 	andeq	r0, r0, r1
    8818:	01000001 	tsteq	r0, r1
    881c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8820:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8824:	2f2e2e2f 	svccs	0x002e2e2f
    8828:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    882c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8830:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8834:	2f62696c 	svccs	0x0062696c
    8838:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    883c:	6d69742f 	cfstrdvs	mvd7, [r9, #-188]!	; 0xffffff44
    8840:	752f0065 	strvc	r0, [pc, #-101]!	; 87e3 <__exidx_end+0x38b3>
    8844:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8680 <__exidx_end+0x3750>
    8848:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    884c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    8850:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8854:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8858:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    885c:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    8860:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    8864:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8868:	2f006564 	svccs	0x00006564
    886c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8870:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8874:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8878:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    887c:	2f787945 	svccs	0x00787945
    8880:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8884:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8888:	302e332e 	eorcc	r3, lr, lr, lsr #6
    888c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8890:	2f62696c 	svccs	0x0062696c
    8894:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8898:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    889c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    88a0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    88a4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    88a8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    88ac:	2f646c69 	svccs	0x00646c69
    88b0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    88b4:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    88b8:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    88bc:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    88c0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    88c4:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    88c8:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    88cc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    88d0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    88d4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    88d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    88dc:	732f6564 			; <UNDEFINED> instruction: 0x732f6564
    88e0:	2f007379 	svccs	0x00007379
    88e4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    88e8:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    88ec:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    88f0:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    88f4:	2f787945 	svccs	0x00787945
    88f8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    88fc:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8900:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8904:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8908:	2f62696c 	svccs	0x0062696c
    890c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8910:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8914:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8918:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    891c:	632e656d 			; <UNDEFINED> instruction: 0x632e656d
    8920:	00000100 	andeq	r0, r0, r0, lsl #2
    8924:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    8928:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    892c:	00000200 	andeq	r0, r0, r0, lsl #4
    8930:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    8934:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    8938:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    893c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    8940:	00000300 	andeq	r0, r0, r0, lsl #6
    8944:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    8948:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    894c:	00000400 	andeq	r0, r0, r0, lsl #8
    8950:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8954:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8958:	6c000004 	stcvs	0, cr0, [r0], {4}
    895c:	2e6b636f 	cdpcs	3, 6, cr6, cr11, cr15, {3}
    8960:	00040068 	andeq	r0, r4, r8, rrx
    8964:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    8968:	6176656d 	cmnvs	r6, sp, ror #10
    896c:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    8970:	74000004 	strvc	r0, [r0], #-4
    8974:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    8978:	00050068 	andeq	r0, r5, r8, rrx
    897c:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    8980:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8984:	00000500 	andeq	r0, r0, r0, lsl #10
    8988:	00010500 	andeq	r0, r1, r0, lsl #10
    898c:	40e80205 	rscmi	r0, r8, r5, lsl #4
    8990:	24030000 	strcs	r0, [r3], #-0
    8994:	13030501 	movwne	r0, #13569	; 0x3501
    8998:	06010514 			; <UNDEFINED> instruction: 0x06010514
    899c:	2307050f 	movwcs	r0, #29967	; 0x750f
    89a0:	201d0105 	andscs	r0, sp, r5, lsl #2
    89a4:	2e230705 	cdpcs	7, 2, cr0, cr3, cr5, {0}
    89a8:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    89ac:	054d0603 	strbeq	r0, [sp, #-1539]	; 0xfffff9fd
    89b0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    89b4:	052f0605 	streq	r0, [pc, #-1541]!	; 83b7 <__exidx_end+0x3487>
    89b8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    89bc:	052f0603 	streq	r0, [pc, #-1539]!	; 83c1 <__exidx_end+0x3491>
    89c0:	20130601 	andscs	r0, r3, r1, lsl #12
    89c4:	0007023c 	andeq	r0, r7, ip, lsr r2
    89c8:	01ed0101 	mvneq	r0, r1, lsl #2
    89cc:	00030000 	andeq	r0, r3, r0
    89d0:	00000192 	muleq	r0, r2, r1
    89d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    89d8:	0101000d 	tsteq	r1, sp
    89dc:	00000101 	andeq	r0, r0, r1, lsl #2
    89e0:	00000100 	andeq	r0, r0, r0, lsl #2
    89e4:	2f2e2e01 	svccs	0x002e2e01
    89e8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    89ec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    89f0:	2f2e2e2f 	svccs	0x002e2e2f
    89f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    89f8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    89fc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8a00:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8a04:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    8a08:	00746e65 	rsbseq	r6, r4, r5, ror #28
    8a0c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    8a10:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8a14:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    8a18:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    8a1c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    8a20:	61652d65 	cmnvs	r5, r5, ror #26
    8a24:	382f6962 	stmdacc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    8a28:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    8a2c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8a30:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8a34:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8a38:	2f646c69 	svccs	0x00646c69
    8a3c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8a40:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8a44:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8a48:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8a4c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8a50:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8a54:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8a58:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8a5c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8a60:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8a64:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8a68:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 88e0 <__exidx_end+0x39b0>
    8a6c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    8a70:	2f00656e 	svccs	0x0000656e
    8a74:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8a78:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8a7c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8a80:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8a84:	2f787945 	svccs	0x00787945
    8a88:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8a8c:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8a90:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8a94:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8a98:	2f62696c 	svccs	0x0062696c
    8a9c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8aa0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8aa4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8aa8:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    8aac:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    8ab0:	2f646c69 	svccs	0x00646c69
    8ab4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8ab8:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    8abc:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    8ac0:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    8ac4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8ac8:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    8acc:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    8ad0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8ad4:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8ad8:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    8adc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8ae0:	00006564 	andeq	r6, r0, r4, ror #10
    8ae4:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    8ae8:	6f656d69 	svcvs	0x00656d69
    8aec:	79616466 	stmdbvc	r1!, {r1, r2, r5, r6, sl, sp, lr}^
    8af0:	00632e72 	rsbeq	r2, r3, r2, ror lr
    8af4:	73000001 	movwvc	r0, #1
    8af8:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    8afc:	00682e66 	rsbeq	r2, r8, r6, ror #28
    8b00:	5f000002 	svcpl	0x00000002
    8b04:	61666564 	cmnvs	r6, r4, ror #10
    8b08:	5f746c75 	svcpl	0x00746c75
    8b0c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8b10:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8b14:	5f000003 	svcpl	0x00000003
    8b18:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    8b1c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    8b20:	72000004 	andvc	r0, r0, #4
    8b24:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8b28:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    8b2c:	6f6c0000 	svcvs	0x006c0000
    8b30:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    8b34:	00000400 	andeq	r0, r0, r0, lsl #8
    8b38:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    8b3c:	6c617665 	stclvs	6, cr7, [r1], #-404	; 0xfffffe6c
    8b40:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    8b44:	69740000 	ldmdbvs	r4!, {}^	; <UNPREDICTABLE>
    8b48:	682e656d 	stmdavs	lr!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
    8b4c:	00000500 	andeq	r0, r0, r0, lsl #10
    8b50:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    8b54:	00682e74 	rsbeq	r2, r8, r4, ror lr
    8b58:	74000005 	strvc	r0, [r0], #-5
    8b5c:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    8b60:	00040068 	andeq	r0, r4, r8, rrx
    8b64:	01050000 	mrseq	r0, (UNDEF: 5)
    8b68:	20020500 	andcs	r0, r2, r0, lsl #10
    8b6c:	03000041 	movweq	r0, #65	; 0x41
    8b70:	03050139 	movweq	r0, #20793	; 0x5139
    8b74:	09051413 	stmdbeq	r5, {r0, r1, r4, sl, ip}
    8b78:	01050106 	tsteq	r5, r6, lsl #2
    8b7c:	2309051d 	movwcs	r0, #38173	; 0x951d
    8b80:	051d0105 	ldreq	r0, [sp, #-261]	; 0xfffffefb
    8b84:	0905320e 	stmdbeq	r5, {r1, r2, r3, r9, ip, sp}
    8b88:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    8b8c:	060e0521 	streq	r0, [lr], -r1, lsr #10
    8b90:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    8b94:	01310105 	teqeq	r1, r5, lsl #2
    8b98:	02004205 	andeq	r4, r0, #1342177280	; 0x50000000
    8b9c:	05390104 	ldreq	r0, [r9, #-260]!	; 0xfffffefc
    8ba0:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    8ba4:	05052001 	streq	r2, [r5, #-1]
    8ba8:	11052f06 	tstne	r5, r6, lsl #30
    8bac:	03050106 	movweq	r0, #20742	; 0x5106
    8bb0:	0a052106 	beq	150fd0 <__ccfg+0x131028>
    8bb4:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    8bb8:	dc010100 	stfles	f0, [r1], {-0}
    8bbc:	03000000 	movweq	r0, #0
    8bc0:	0000d600 	andeq	sp, r0, r0, lsl #12
    8bc4:	fb010200 	blx	493ce <__ccfg+0x29426>
    8bc8:	01000d0e 	tsteq	r0, lr, lsl #26
    8bcc:	00010101 	andeq	r0, r1, r1, lsl #2
    8bd0:	00010000 	andeq	r0, r1, r0
    8bd4:	752f0100 	strvc	r0, [pc, #-256]!	; 8adc <__exidx_end+0x3bac>
    8bd8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 8a14 <__exidx_end+0x3ae4>
    8bdc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    8be0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    8be4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    8be8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    8bec:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    8bf0:	332e382f 			; <UNDEFINED> instruction: 0x332e382f
    8bf4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    8bf8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    8bfc:	2f006564 	svccs	0x00006564
    8c00:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    8c04:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    8c08:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8c0c:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    8c10:	2f787945 	svccs	0x00787945
    8c14:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8c18:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    8c1c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    8c20:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8c24:	2f62696c 	svccs	0x0062696c
    8c28:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    8c2c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8c30:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8c34:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    8c38:	2f2e2e00 	svccs	0x002e2e00
    8c3c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8c40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8c44:	2f2e2e2f 	svccs	0x002e2e2f
    8c48:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8c4c:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    8c50:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8c54:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8c58:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    8c5c:	00746e65 	rsbseq	r6, r4, r5, ror #28
    8c60:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    8c64:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    8c68:	00010068 	andeq	r0, r1, r8, rrx
    8c6c:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    8c70:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    8c74:	00020068 	andeq	r0, r2, r8, rrx
    8c78:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
    8c7c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    8c80:	00000200 	andeq	r0, r0, r0, lsl #4
    8c84:	6b636f6c 	blvs	18e4a3c <__ccfg+0x18c4a94>
    8c88:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8c8c:	6d690000 	stclvs	0, cr0, [r9, #-0]
    8c90:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
    8c94:	0300632e 	movweq	r6, #814	; 0x32e
    8c98:	04000000 	streq	r0, [r0], #-0
    8c9c:	03000002 	movweq	r0, #2
    8ca0:	00011700 	andeq	r1, r1, r0, lsl #14
    8ca4:	fb010200 	blx	494ae <__ccfg+0x29506>
    8ca8:	01000d0e 	tsteq	r0, lr, lsl #26
    8cac:	00010101 	andeq	r0, r1, r1, lsl #2
    8cb0:	00010000 	andeq	r0, r1, r0
    8cb4:	2e2e0100 	sufcse	f0, f6, f0
    8cb8:	2f2e2e2f 	svccs	0x002e2e2f
    8cbc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8cc0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8cc4:	2f2e2e2f 	svccs	0x002e2e2f
    8cc8:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    8ccc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8cd0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    8cd4:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    8cd8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8cdc:	73752f00 	cmnvc	r5, #0, 30
    8ce0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    8ce4:	63672f62 	cmnvs	r7, #392	; 0x188
    8ce8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    8cec:	6f6e2d6d 	svcvs	0x006e2d6d
    8cf0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    8cf4:	2f696261 	svccs	0x00696261
    8cf8:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    8cfc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    8d00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8d04:	622f0065 	eorvs	r0, pc, #101	; 0x65
    8d08:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    8d0c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8d10:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8d14:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    8d18:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    8d1c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8d20:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    8d24:	2f302e33 	svccs	0x00302e33
    8d28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    8d2c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8b90 <__exidx_end+0x3c60>
    8d30:	2f636269 	svccs	0x00636269
    8d34:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    8d38:	2f656475 	svccs	0x00656475
    8d3c:	00737973 	rsbseq	r7, r3, r3, ror r9
    8d40:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    8d44:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    8d48:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    8d4c:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    8d50:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    8d54:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    8d58:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    8d5c:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    8d60:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    8d64:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    8d68:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8d6c:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    8d70:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    8d74:	72000065 	andvc	r0, r0, #101	; 0x65
    8d78:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    8d7c:	0100632e 	tsteq	r0, lr, lsr #6
    8d80:	74730000 	ldrbtvc	r0, [r3], #-0
    8d84:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    8d88:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8d8c:	745f0000 	ldrbvc	r0, [pc], #-0	; 8d94 <__exidx_end+0x3e64>
    8d90:	73657079 	cmnvc	r5, #121	; 0x79
    8d94:	0300682e 	movweq	r6, #2094	; 0x82e
    8d98:	65720000 	ldrbvs	r0, [r2, #-0]!
    8d9c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    8da0:	00030068 	andeq	r0, r3, r8, rrx
    8da4:	636f6c00 	cmnvs	pc, #0, 24
    8da8:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    8dac:	73000003 	movwvc	r0, #3
    8db0:	696c6474 	stmdbvs	ip!, {r2, r4, r5, r6, sl, sp, lr}^
    8db4:	00682e62 	rsbeq	r2, r8, r2, ror #28
    8db8:	00000004 	andeq	r0, r0, r4
    8dbc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    8dc0:	00000002 	andeq	r0, r0, r2
    8dc4:	01220300 			; <UNDEFINED> instruction: 0x01220300
    8dc8:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    8dcc:	20100601 	andscs	r0, r0, r1, lsl #12
    8dd0:	05220b05 	streq	r0, [r2, #-2821]!	; 0xfffff4fb
    8dd4:	06051e01 	streq	r1, [r5], -r1, lsl #28
    8dd8:	06050522 	streq	r0, [r5], -r2, lsr #10
    8ddc:	3003052f 	andcc	r0, r3, pc, lsr #10
    8de0:	4b060105 	blmi	1891fc <__ccfg+0x169254>
    8de4:	054e0601 	strbeq	r0, [lr, #-1537]	; 0xfffff9ff
    8de8:	0b051303 	bleq	14d9fc <__ccfg+0x12da54>
    8dec:	06050106 	streq	r0, [r5], -r6, lsl #2
    8df0:	1f010520 	svcne	0x00010520
    8df4:	21060520 	tstcs	r6, r0, lsr #10
    8df8:	35060705 	strcc	r0, [r6, #-1797]	; 0xfffff8fb
    8dfc:	01060b05 	tsteq	r6, r5, lsl #22
    8e00:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    8e04:	14410608 	strbne	r0, [r1], #-1544	; 0xfffff9f8
    8e08:	01061005 	tsteq	r6, r5
    8e0c:	21060805 	tstcs	r6, r5, lsl #16
    8e10:	01060e05 	tsteq	r6, r5, lsl #28
    8e14:	30060505 	andcc	r0, r6, r5, lsl #10
    8e18:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    8e1c:	06050501 	streq	r0, [r5], -r1, lsl #10
    8e20:	053c0621 	ldreq	r0, [ip, #-1569]!	; 0xfffff9df
    8e24:	052e1c0e 	streq	r1, [lr, #-3086]!	; 0xfffff3f2
    8e28:	04020004 	streq	r0, [r2], #-4
    8e2c:	03061b02 	movweq	r1, #27394	; 0x6b02
    8e30:	20062e0d 	andcs	r2, r6, sp, lsl #28
    8e34:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    8e38:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    8e3c:	200a0501 	andcs	r0, sl, r1, lsl #10
    8e40:	2f060205 	svccs	0x00060205
    8e44:	1c030705 	stcne	7, cr0, [r3], {5}
    8e48:	060f053c 			; <UNDEFINED> instruction: 0x060f053c
    8e4c:	3c0a0501 	cfstr32cc	mvfx0, [sl], {1}
    8e50:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    8e54:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    8e58:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    8e5c:	08053c01 	stmdaeq	r5, {r0, sl, fp, ip, sp}
    8e60:	05133306 	ldreq	r3, [r3, #-774]	; 0xfffffcfa
    8e64:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    8e68:	06210608 	strteq	r0, [r1], -r8, lsl #12
    8e6c:	1c04053c 	cfstr32ne	mvfx0, [r4], {60}	; 0x3c
    8e70:	0607052e 	streq	r0, [r7], -lr, lsr #10
    8e74:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    8e78:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    8e7c:	0205200a 	andeq	r2, r5, #10
    8e80:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    8e84:	060a0543 	streq	r0, [sl], -r3, asr #10
    8e88:	06040501 	streq	r0, [r4], -r1, lsl #10
    8e8c:	14054c40 	strne	r4, [r5], #-3136	; 0xfffff3c0
    8e90:	07050106 	streq	r0, [r5, -r6, lsl #2]
    8e94:	0606053c 			; <UNDEFINED> instruction: 0x0606053c
    8e98:	0601052f 	streq	r0, [r1], -pc, lsr #10
    8e9c:	06020142 	streq	r0, [r2], -r2, asr #2
    8ea0:	9b010100 	blls	492a8 <__ccfg+0x29300>
    8ea4:	03000001 	movweq	r0, #1
    8ea8:	0000e200 	andeq	lr, r0, r0, lsl #4
    8eac:	fb010200 	blx	496b6 <__ccfg+0x2970e>
    8eb0:	01000d0e 	tsteq	r0, lr, lsl #26
    8eb4:	00010101 	andeq	r0, r1, r1, lsl #2
    8eb8:	00010000 	andeq	r0, r1, r0
    8ebc:	2e2e0100 	sufcse	f0, f6, f0
    8ec0:	2f2e2e2f 	svccs	0x002e2e2f
    8ec4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8ec8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8ecc:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    8ed0:	00636367 	rsbeq	r6, r3, r7, ror #6
    8ed4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8ed8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8edc:	2f2e2e2f 	svccs	0x002e2e2f
    8ee0:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 8e30 <__exidx_end+0x3f00>
    8ee4:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    8ee8:	2e2e2f63 	cdpcs	15, 2, cr2, cr14, cr3, {3}
    8eec:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    8ef0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    8ef4:	2f2e2e00 	svccs	0x002e2e00
    8ef8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8efc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8f00:	672f2e2f 	strvs	r2, [pc, -pc, lsr #28]!
    8f04:	2e006363 	cdpcs	3, 0, cr6, cr0, cr3, {3}
    8f08:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    8f0c:	2f2e2e2f 	svccs	0x002e2e2f
    8f10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    8f14:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    8f18:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    8f1c:	2f2e2e2f 	svccs	0x002e2e2f
    8f20:	2f636367 	svccs	0x00636367
    8f24:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    8f28:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    8f2c:	00006d72 	andeq	r6, r0, r2, ror sp
    8f30:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    8f34:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    8f38:	00010063 	andeq	r0, r1, r3, rrx
    8f3c:	73616800 	cmnvc	r1, #0, 16
    8f40:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    8f44:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    8f48:	72610000 	rsbvc	r0, r1, #0
    8f4c:	73692d6d 	cmnvc	r9, #6976	; 0x1b40
    8f50:	00682e61 	rsbeq	r2, r8, r1, ror #28
    8f54:	61000003 	tstvs	r0, r3
    8f58:	632d6d72 			; <UNDEFINED> instruction: 0x632d6d72
    8f5c:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    8f60:	00000300 	andeq	r0, r0, r0, lsl #6
    8f64:	6e736e69 	cdpvs	14, 7, cr6, cr3, cr9, {3}
    8f68:	6e6f632d 	cdpvs	3, 6, cr6, cr15, cr13, {1}
    8f6c:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
    8f70:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    8f74:	00000300 	andeq	r0, r0, r0, lsl #6
    8f78:	2e6d7261 	cdpcs	2, 6, cr7, cr13, cr1, {3}
    8f7c:	00040068 	andeq	r0, r4, r8, rrx
    8f80:	62696c00 	rsbvs	r6, r9, #0, 24
    8f84:	32636367 	rsbcc	r6, r3, #-1677721599	; 0x9c000001
    8f88:	0100682e 	tsteq	r0, lr, lsr #16
    8f8c:	05000000 	streq	r0, [r0, #-0]
    8f90:	02050001 	andeq	r0, r5, #1
    8f94:	0000414c 	andeq	r4, r0, ip, asr #2
    8f98:	0104a403 	tsteq	r4, r3, lsl #8
    8f9c:	13130305 	tstne	r3, #335544320	; 0x14000000
    8fa0:	01160513 	tsteq	r6, r3, lsl r5
    8fa4:	01010101 	tsteq	r1, r1, lsl #2
    8fa8:	0f060105 	svceq	0x00060105
    8fac:	05311605 	ldreq	r1, [r1, #-1541]!	; 0xfffff9fb
    8fb0:	16051d01 	strne	r1, [r5], -r1, lsl #26
    8fb4:	2e062e31 	mcrcs	14, 0, r2, cr6, cr1, {1}
    8fb8:	2e012020 	cdpcs	0, 0, cr2, cr1, cr0, {1}
    8fbc:	20062001 	andcs	r2, r6, r1
    8fc0:	06202006 	strteq	r2, [r0], -r6
    8fc4:	05200620 	streq	r0, [r0, #-1568]!	; 0xfffff9e0
    8fc8:	050f0601 	streq	r0, [pc, #-1537]	; 89cf <__exidx_end+0x3a9f>
    8fcc:	02002316 	andeq	r2, r0, #1476395008	; 0x58000000
    8fd0:	2e060104 	adfcss	f0, f6, f4
    8fd4:	03040200 	movweq	r0, #16896	; 0x4200
    8fd8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    8fdc:	00200603 	eoreq	r0, r0, r3, lsl #12
    8fe0:	06030402 	streq	r0, [r3], -r2, lsl #8
    8fe4:	00220520 	eoreq	r0, r2, r0, lsr #10
    8fe8:	06030402 	streq	r0, [r3], -r2, lsl #8
    8fec:	001e0514 	andseq	r0, lr, r4, lsl r5
    8ff0:	2f030402 	svccs	0x00030402
    8ff4:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    8ff8:	051d0304 	ldreq	r0, [sp, #-772]	; 0xfffffcfc
    8ffc:	0402000c 	streq	r0, [r2], #-12
    9000:	16052203 	strne	r2, [r5], -r3, lsl #4
    9004:	03040200 	movweq	r0, #16896	; 0x4200
    9008:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    900c:	02002003 	andeq	r2, r0, #3
    9010:	2e060304 	cdpcs	3, 0, cr0, cr6, cr4, {0}
    9014:	03040200 	movweq	r0, #16896	; 0x4200
    9018:	00030501 	andeq	r0, r3, r1, lsl #10
    901c:	14030402 	strne	r0, [r3], #-1026	; 0xfffffbfe
    9020:	02000c05 	andeq	r0, r0, #1280	; 0x500
    9024:	01060304 	tsteq	r6, r4, lsl #6
    9028:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    902c:	23060304 	movwcs	r0, #25348	; 0x6304
    9030:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    9034:	13060304 	movwne	r0, #25348	; 0x6304
    9038:	03040200 	movweq	r0, #16896	; 0x4200
    903c:	00050201 	andeq	r0, r5, r1, lsl #4
    9040:	01b00101 	lslseq	r0, r1, #2
    9044:	00030000 	andeq	r0, r3, r0
    9048:	0000017e 	andeq	r0, r0, lr, ror r1
    904c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    9050:	0101000d 	tsteq	r1, sp
    9054:	00000101 	andeq	r0, r0, r1, lsl #2
    9058:	00000100 	andeq	r0, r0, r0, lsl #2
    905c:	2f2e2e01 	svccs	0x002e2e01
    9060:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    9064:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    9068:	2f2e2e2f 	svccs	0x002e2e2f
    906c:	6c2f2e2e 	stcvs	14, cr2, [pc], #-184	; 8fbc <__exidx_end+0x408c>
    9070:	6c676269 	sfmvs	f6, 2, [r7], #-420	; 0xfffffe5c
    9074:	2f73736f 	svccs	0x0073736f
    9078:	6e62696c 	vnmulvs.f16	s13, s4, s25	; <UNPREDICTABLE>
    907c:	7379736f 	cmnvc	r9, #-1140850687	; 0xbc000001
    9080:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    9084:	2f646c69 	svccs	0x00646c69
    9088:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    908c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    9090:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    9094:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    9098:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    909c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    90a0:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    90a4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    90a8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    90ac:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    90b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    90b4:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 8f2c <__exidx_end+0x3ffc>
    90b8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    90bc:	2f00656e 	svccs	0x0000656e
    90c0:	2f727375 	svccs	0x00727375
    90c4:	2f62696c 	svccs	0x0062696c
    90c8:	2f636367 	svccs	0x00636367
    90cc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    90d0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    90d4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    90d8:	2e382f69 	cdpcs	15, 3, cr2, cr8, cr9, {3}
    90dc:	2f312e33 	svccs	0x00312e33
    90e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    90e4:	00656475 	rsbeq	r6, r5, r5, ror r4
    90e8:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    90ec:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    90f0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    90f4:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    90f8:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    90fc:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    9100:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    9104:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    9108:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    910c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    9110:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    9114:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    9118:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    911c:	79732f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    9120:	622f0073 	eorvs	r0, pc, #115	; 0x73
    9124:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    9128:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    912c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    9130:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    9134:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    9138:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    913c:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    9140:	2f302e33 	svccs	0x00302e33
    9144:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    9148:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 8fac <__exidx_end+0x407c>
    914c:	2f636269 	svccs	0x00636269
    9150:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    9154:	00656475 	rsbeq	r6, r5, r5, ror r4
    9158:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    915c:	2e646f74 	mcrcs	15, 3, r6, cr4, cr4, {3}
    9160:	00010063 	andeq	r0, r1, r3, rrx
    9164:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    9168:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    916c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    9170:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    9174:	00020068 	andeq	r0, r2, r8, rrx
    9178:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    917c:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    9180:	00030068 	andeq	r0, r3, r8, rrx
    9184:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
    9188:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    918c:	00040068 	andeq	r0, r4, r8, rrx
    9190:	69745f00 	ldmdbvs	r4!, {r8, r9, sl, fp, ip, lr}^
    9194:	6176656d 	cmnvs	r6, sp, ror #10
    9198:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    919c:	72000004 	andvc	r0, r0, #4
    91a0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    91a4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    91a8:	6f6c0000 	svcvs	0x006c0000
    91ac:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    91b0:	00000400 	andeq	r0, r0, r0, lsl #8
    91b4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    91b8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    91bc:	72650000 	rsbvc	r0, r5, #0
    91c0:	2e6f6e72 	mcrcs	14, 3, r6, cr15, cr2, {3}
    91c4:	00040068 	andeq	r0, r4, r8, rrx
    91c8:	01050000 	mrseq	r0, (UNDEF: 5)
    91cc:	a0020500 	andge	r0, r2, r0, lsl #10
    91d0:	03000041 	movweq	r0, #65	; 0x41
    91d4:	03050113 	movweq	r0, #20755	; 0x5113
    91d8:	06090513 			; <UNDEFINED> instruction: 0x06090513
    91dc:	210a0501 	tstcs	sl, r1, lsl #10
    91e0:	051f0905 	ldreq	r0, [pc, #-2309]	; 88e3 <__exidx_end+0x39b3>
    91e4:	09052201 	stmdbeq	r5, {r0, r9, sp}
    91e8:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    91ec:	06010521 	streq	r0, [r1], -r1, lsr #10
    91f0:	00030213 	andeq	r0, r3, r3, lsl r2
    91f4:	Address 0x00000000000091f4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6f636572 	svcvs	0x00636572
       4:	45006472 	strmi	r6, [r0, #-1138]	; 0xfffffb8e
}
       8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
       c:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      10:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
      14:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      18:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      1c:	5f62616c 	svcpl	0x0062616c
      20:	5f746547 	svcpl	0x00746547
      24:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
      28:	6e697669 	cdpvs	6, 6, cr7, cr9, cr9, {3}
      2c:	6f4e5f67 	svcvs	0x004e5f67
      30:	5f006564 	svcpl	0x00006564
      34:	5f69705f 	svcpl	0x0069705f
      38:	5f626370 	svcpl	0x00626370
      3c:	64700073 	ldrbtvs	r0, [r0], #-115	; 0xffffff8d
			i = k;
      40:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
				j->Next = k;
      44:	735f5f00 	cmpvc	pc, #0, 30
      48:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
}
      4c:	6f72505f 	svcvs	0x0072505f
      50:	5f74706d 	svcpl	0x0074706d
      54:	6f636552 	svcvs	0x00636552
		release;
      58:	495f6472 	ldmdbmi	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
      5c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
	b->u.pointers.tail =
      64:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
}
      68:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
		return NULL;
      6c:	5f007367 	svcpl	0x00007367
      70:	6f746377 	svcvs	0x00746377
      74:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
      78:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
      7c:	73656d00 	cmnvc	r5, #0, 26
      80:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
      84:	34725f00 	ldrbtcc	r5, [r2], #-3840	; 0xfffff100
      88:	5f5f0038 	svcpl	0x005f0038
      8c:	616c7473 	smcvs	51011	; 0xc743
      90:	69465f62 	stmdbvs	r6, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
      94:	4e5f646e 	cdpmi	4, 5, cr6, cr15, cr14, {3}
      98:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
      9c:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
      a0:	6f6e0073 	svcvs	0x006e0073
      a4:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
      a8:	735f5f00 	cmpvc	pc, #0, 30
      ac:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      b0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
      b4:	646f4e5f 	strbtvs	r4, [pc], #-3679	; bc <g_pfnVectors+0xbc>
      b8:	44495f65 	strbmi	r5, [r9], #-3941	; 0xfffff09b
      bc:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
      c0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
      c4:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
fsm transmitter (message * messagePtr) {
      c8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
      cc:	31393130 	teqcc	r9, r0, lsr r1
      d0:	20353230 	eorscs	r3, r5, r0, lsr r2
}
      d4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
      d8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	415b2029 	cmpmi	fp, r9, lsr #32
      e0:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
      e4:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
      e8:	6172622d 	cmnvs	r2, sp, lsr #4
        spkt [0] = 0;
      ec:	2068636e 	rsbcs	r6, r8, lr, ror #6
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      f0:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
        *p = messagePtr->messageType; p++; // insert message type
      f4:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
        *p = messagePtr->requestNumber; p++; // insert request number
      f8:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
        *p = messagePtr->destinationId; p++; // insert receiver ID
     100:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
        tcv_endp (spkt);
     104:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
     10c:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
}
     110:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
        finish;
     114:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     118:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
     11c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
     120:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
char randomNumber() {
     124:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
   srand((unsigned) time(&t));
     128:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
     12c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
   return (char)rand();
     130:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
}
     134:	6d2d3776 	stcvs	7, cr3, [sp, #-472]!	; 0xfffffe28
     138:	20672d20 	rsbcs	r2, r7, r0, lsr #26
fsm root {
     13c:	7764672d 	strbvc	r6, [r4, -sp, lsr #14]!
     140:	2d667261 	sfmcs	f7, 2, [r6, #-388]!	; 0xfffffe7c
     144:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
     148:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     14c:	642d7463 	strtvs	r7, [sp], #-1123	; 0xfffffb9d
     150:	66726177 			; <UNDEFINED> instruction: 0x66726177
     154:	734f2d20 	movtvc	r2, #64800	; 0xfd20
     158:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
     15c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
     160:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
     164:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     168:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     16c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
        recordCount = 0;
     170:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
        nodeId = 1;
     174:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     178:	61746164 	cmnvs	r4, r4, ror #2
        groupId = 1;
     17c:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     180:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
        messagePtr = (message *) umalloc(sizeof(message));
     184:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
     18c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
     190:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
        tcv_plug(0, &plug_null);
     194:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
     198:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
        sfd = tcv_open(WNONE, 0, 0);
     19c:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
     1a0:	6d662d20 	stclvs	13, cr2, [r6, #-128]!	; 0xffffff80
     1a4:	652d7861 	strvs	r7, [sp, #-2145]!	; 0xfffff79f
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	30313d73 	eorscc	r3, r1, r3, ror sp
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	625f5f00 	subsvs	r5, pc, #0, 30
		if (sfd < 0) {
     1b4:	735f7373 	cmpvc	pc, #-872415231	; 0xcc000001
			diag("Cannot open tcv interface");
     1b8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
     1bc:	5f005f5f 	svcpl	0x00005f5f
			halt();
     1c0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
        currentProtocol = IDLE;
     1c4:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
     1c8:	4e5f7465 	cdpmi	4, 5, cr7, cr15, cr5, {3}
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	5f65646f 	svcpl	0x0065646f
     1d0:	74004449 	strvc	r4, [r0], #-1097	; 0xfffffbb7
     1d4:	745f7663 	ldrbvc	r7, [pc], #-1635	; 1dc <root+0xa0>
     1d8:	7200746d 	andvc	r7, r0, #1828716544	; 0x6d000000
     1dc:	00746f6f 	rsbseq	r6, r4, pc, ror #30
     1e0:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
        ser_outf(Options, menu);
     1e4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     1e8:	6c665f00 	stclvs	15, cr5, [r6], #-0
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	00736761 	rsbseq	r6, r3, r1, ror #14
     1f0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     1f4:	6f727000 	svcvs	0x00727000
        switch (choice)
     1f8:	6f636f74 	svcvs	0x00636f74
     1fc:	4c5f006c 	mrrcmi	0, 6, r0, pc, cr12	; <UNPREDICTABLE>
     200:	5f4b434f 	svcpl	0x004b434f
     204:	55434552 	strbpl	r4, [r3, #-1362]	; 0xfffffaae
     208:	56495352 			; <UNDEFINED> instruction: 0x56495352
     20c:	00545f45 	subseq	r5, r4, r5, asr #30
     210:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     214:	5f62616c 	svcpl	0x0062616c
     218:	5f746547 	svcpl	0x00746547
     21c:	6f636552 	svcvs	0x00636552
     220:	495f6472 	ldmdbmi	pc, {r1, r4, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
     224:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
        proceed Menu_Header;
     228:	626d5f00 	rsbvs	r5, sp, #0, 30
     22c:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	6174735f 	cmnvs	r4, pc, asr r3
     234:	66006574 			; <UNDEFINED> instruction: 0x66006574
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
     23c:	5f5f006b 	svcpl	0x005f006b
        proceed Menu_Header;
     240:	6f5f6970 	svcvs	0x005f6970
     244:	6900646c 	stmdbvs	r0, {r2, r3, r5, r6, sl, sp, lr}
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	6c615673 	stclvs	6, cr5, [r1], #-460	; 0xfffffe34
     24c:	6f4e6469 	svcvs	0x004e6469
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
     254:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     258:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
    if (node < 1 || node > 25) {
     25c:	73656400 	cmnvc	r5, #0, 8
     260:	616e6974 	smcvs	59028	; 0xe694
            proceed Set_Node_ID;
     264:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
        proceed Menu_Header;
     268:	5f006449 	svcpl	0x00006449
     26c:	736f7066 	cmnvc	pc, #102	; 0x66
        currentProtocol = DISCOVERY_REQUEST;
     270:	5f00745f 	svcpl	0x0000745f
     274:	00736e66 	rsbseq	r6, r3, r6, ror #28
        receiverId = 0;
     278:	6f6f635f 	svcvs	0x006f635f
        proceed Transmit_Message;
     27c:	0065696b 	rsbeq	r6, r5, fp, ror #18
        currentProtocol = CREATE_RECORD;
     280:	5f766374 	svcpl	0x00766374
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	6f666e69 	svcvs	0x00666e69
     288:	73797300 	cmnvc	r9, #0, 6
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	5f746174 	svcpl	0x00746174
     290:	5f5f0074 	svcpl	0x005f0074
     294:	5f737362 	svcpl	0x00737362
    if (node < 1 || node > 25) {
     298:	5f646e65 	svcpl	0x00646e65
     29c:	6172005f 	cmnvs	r2, pc, asr r0
            proceed Create_Record;
     2a0:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; f0 <transmitter+0x28>
     2a4:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	5f007265 	svcpl	0x00007265
     2ac:	69676942 	stmdbvs	r7!, {r1, r6, r8, fp, sp, lr}^
     2b0:	5f00746e 	svcpl	0x0000746e
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     2b8:	495f6261 	ldmdbmi	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     2bc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	7a696c61 	bvc	1a5b44c <__ccfg+0x1a3b4a4>
        proceed Transmit_Message;
     2c4:	5f5f0065 	svcpl	0x005f0065
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
        proceed Transmit_Message;
     2cc:	00796164 	rsbseq	r6, r9, r4, ror #2
        currentProtocol = DELETE_RECORD;
     2d0:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	00746c75 	rsbseq	r6, r4, r5, ror ip
        currentProtocol = DELETE_RECORD;
     2d8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	5f62616c 	svcpl	0x0062616c
        proceed Get_Receiving_Node;
     2e0:	5f746547 	svcpl	0x00746547
        currentProtocol = RETRIEVE_RECORD;
     2e4:	7373654d 	cmnvc	r3, #322961408	; 0x13400000
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	00656761 	rsbeq	r6, r5, r1, ror #14
        currentProtocol = RETRIEVE_RECORD;
     2ec:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	5f62616c 	svcpl	0x0062616c
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	5f746553 	svcpl	0x00746553
     2f8:	756f7247 	strbvc	r7, [pc, #-583]!	; b9 <g_pfnVectors+0xb9>
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	44495f70 	strbmi	r5, [r9], #-3952	; 0xfffff090
     300:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 308 <root+0x1cc>
     304:	6f685f6d 	svcvs	0x00685f6d
    if (node < 1 || node > 25) {
     308:	65007275 	strvs	r7, [r0, #-629]	; 0xfffffd8b
     30c:	6f72746e 	svcvs	0x0072746e
            proceed Prompt_Recieving_Node;
     310:	5f007970 	svcpl	0x00007970
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     318:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
        char desiredRecordIndex = -1;
     31c:	435f7465 	cmpmi	pc, #1694498816	; 0x65000000
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	63696f68 	cmnvs	r9, #104, 30	; 0x1a0
     324:	5f5f0065 	svcpl	0x005f0065
        char desiredRecordIndex = -1;
     328:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	6f680074 	svcvs	0x00680074
        messagePtr->recordIndex = desiredRecordIndex;
     330:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     334:	5f5f0064 	svcpl	0x005f0064
     338:	616c7473 	smcvs	51011	; 0xc743
        proceed Transmit_Message;
     33c:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
        messagePtr -> senderGroupId = groupId;
     340:	72475f74 	subvc	r5, r7, #116, 30	; 0x1d0
     344:	5f70756f 	svcpl	0x0070756f
     348:	5f004449 	svcpl	0x00004449
        messagePtr -> messageType = currentProtocol;
     34c:	706e695f 	rsbvc	r6, lr, pc, asr r9
     350:	705f7475 	subsvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
        messagePtr -> requestNumber = randomNumber();
     354:	00736e69 	rsbseq	r6, r3, r9, ror #28
        messagePtr -> senderId = nodeId;
     358:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     35c:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
        call transmitter(messagePtr, Menu_Header);
     360:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
        messagePtr -> destinationId = receiverId;
     364:	00667478 	rsbeq	r7, r6, r8, ror r4
     368:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
        call transmitter(messagePtr, Menu_Header);
     36c:	00383464 	eorseq	r3, r8, r4, ror #8
     370:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     374:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
     378:	00657079 	rsbeq	r7, r5, r9, ror r0
            proceed Set_Node_ID;
     37c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
            break;
     380:	5f746c75 	svcpl	0x00746c75
            proceed Set_Node_ID;
     384:	735f006b 	cmpvc	pc, #107	; 0x6b
            proceed Find_Neighbours;
     388:	616e6769 	cmnvs	lr, r9, ror #14
            proceed Create_Record;
     38c:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
            proceed Delete_Record;
     390:	6f6c0066 	svcvs	0x006c0066
            proceed Retrieve_Record;
     394:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
            diag("Reset Local Storage");
     398:	20676e6f 	rsbcs	r6, r7, pc, ror #28
            break;
     39c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
            diag("Reset Local Storage");
     3a0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     3a4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     3a8:	73615f00 	cmnvc	r1, #0, 30
     3ac:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
     3b0:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
     3b4:	5f5f0066 	svcpl	0x005f0066
     3b8:	4c494673 	mcrrmi	6, 7, r4, r9, cr3
     3bc:	775f0045 	ldrbvc	r0, [pc, -r5, asr #32]
     3c0:	5f007364 	svcpl	0x00007364
     3c4:	5f69705f 	svcpl	0x0069705f
     3c8:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     3cc:	00745f74 	rsbseq	r5, r4, r4, ror pc
     3d0:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     3d4:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
     3d8:	5f00745f 	svcpl	0x0000745f
     3dc:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     3e0:	435f6261 	cmpmi	pc, #268435462	; 0x10000006
     3e4:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
     3e8:	65525f65 	ldrbvs	r5, [r2, #-3941]	; 0xfffff09b
     3ec:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     3f0:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
     3f4:	00454c49 	subeq	r4, r5, r9, asr #24
     3f8:	65636572 	strbvs	r6, [r3, #-1394]!	; 0xfffffa8e
     3fc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
     400:	5f006449 	svcpl	0x00006449
     404:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
static void devinit_uart (int devnum) {
     408:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
	adddevfunc (ioreq_uart_a, devnum);
     40c:	6f5f7663 	svcvs	0x005f7663
     410:	5f006570 	svcpl	0x00006570
void udelay (volatile word n) {
     414:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
     418:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
	while (n) {
     41c:	5f5f0079 	svcpl	0x005f0079
     420:	63756e67 	cmnvs	r5, #1648	; 0x670
}
     424:	5f61765f 	svcpl	0x0061765f
	while (n--);
     428:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     42c:	6f686300 	svcvs	0x00686300
     430:	00656369 	rsbeq	r6, r5, r9, ror #6
		n--;
     434:	646e6573 	strbtvs	r6, [lr], #-1395	; 0xfffffa8d
     438:	72477265 	subvc	r7, r7, #1342177286	; 0x50000006
     43c:	4970756f 	ldmdbmi	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
void mdelay (volatile word n) {
     440:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
     444:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
	while (n) {
     448:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     44c:	5f5f0074 	svcpl	0x005f0074
}
     450:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
		udelay (999);
     454:	5f006365 	svcpl	0x00006365
     458:	5f6d745f 	svcpl	0x006d745f
		n--;
     45c:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
     460:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
     464:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
     468:	5f00646e 	svcpl	0x0000646e
void __pi_ondomain (lword d) {
     46c:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
     470:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
		if (__pi_systat.effpdm > 1)
     474:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     478:	00657461 	rsbeq	r7, r5, r1, ror #8
			__pi_systat.effpdm = 1;
     47c:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
	PRCMPowerDomainOn (d);
     480:	72756300 	rsbsvc	r6, r5, #0, 6
     484:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     488:	746f7250 	strbtvc	r7, [pc], #-592	; 490 <__pi_ondomain+0x24>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48c:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 2d8 <root+0x19c>
     490:	6b707300 	blvs	1c1d098 <__ccfg+0x1bfd0f0>
     494:	5f5f0074 	svcpl	0x005f0074
	__pi_systat.ondmns |= d;
     498:	616c7473 	smcvs	51011	; 0xc743
     49c:	65525f62 	ldrbvs	r5, [r2, #-3938]	; 0xfffff09e
}
     4a0:	65697274 	strbvs	r7, [r9, #-628]!	; 0xfffffd8c
     4a4:	525f6576 	subspl	r6, pc, #494927872	; 0x1d800000
void __pi_offdomain (lword d) {
     4a8:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
     4ac:	5f5f0064 	svcpl	0x005f0064
	PRCMPowerDomainOff (d);
     4b0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	705f0065 	subsvc	r0, pc, r5, rrx
     4b8:	5f007335 	svcpl	0x00007335
     4bc:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
	if (d & PRCM_DOMAIN_RFCORE) {
     4c0:	5f6e6f74 	svcpl	0x006e6f74
     4c4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	735f5f00 	cmpvc	pc, #0, 30
     4cc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4d0:	6e654d5f 	mcrvs	13, 3, r4, cr5, cr15, {2}
     4d4:	65485f75 	strbvs	r5, [r8, #-3957]	; 0xfffff08b
	__pi_systat.ondmns &= ~d;
     4d8:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
     4dc:	63775f00 	cmnvs	r7, #0, 30
}
     4e0:	6f747273 	svcvs	0x00747273
     4e4:	5f73626d 	svcpl	0x0073626d
void __pi_syserror (word ec, const char *m) {
     4e8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; 360 <root+0x224>
     4f0:	6e656c62 	cdpvs	12, 6, cr6, cr5, cr2, {3}
  __ASM volatile ("cpsid i" : : : "memory");
     4f4:	6174735f 	cmnvs	r4, pc, asr r3
     4f8:	61006574 	tstvs	r0, r4, ror r5
     4fc:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
     500:	6e766500 	cdpvs	5, 7, cr6, cr6, cr0, {0}
		all_leds_blink;
     504:	006e7074 	rsbeq	r7, lr, r4, ror r0
     508:	6264656c 	rsbvs	r6, r4, #108, 10	; 0x1b000000
     50c:	5f00636c 	svcpl	0x0000636c
     510:	5f6d745f 	svcpl	0x006d745f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     514:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
     518:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     51c:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
     520:	5f00636e 	svcpl	0x0000636e
     524:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
     528:	5f63776f 	svcpl	0x0063776f
	while (1) {
     52c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     530:	615f0065 	cmpvs	pc, r5, rrx
     534:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     538:	6c003074 	stcvs	0, cr3, [r0], {116}	; 0x74
void tci_run_delay_timer () {
     53c:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
	setdel = __pi_mintk - __pi_old;
     540:	5f5f006b 	svcpl	0x005f006b
     544:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     548:	61747379 	cmnvs	r4, r9, ror r3
     54c:	5f5f0074 	svcpl	0x005f0074
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 478 <__pi_ondomain+0xc>	; <UNPREDICTABLE>
     554:	6b746e69 	blvs	1d1bf00 <__ccfg+0x1cfbf58>
     558:	6c665f00 	stclvs	15, cr5, [r6], #-0
     55c:	5f6b636f 	svcpl	0x006b636f
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	5f5f0074 	svcpl	0x005f0074
	sti_tim;
     564:	616c7473 	smcvs	51011	; 0xc743
}
     568:	704f5f62 	subvc	r5, pc, r2, ror #30
     56c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     570:	5f5f0073 	svcpl	0x005f0073
     574:	616c7473 	smcvs	51011	; 0xc743
     578:	72545f62 	subsvc	r5, r4, #392	; 0x188
	cli_aux;
     57c:	6d736e61 	ldclvs	14, cr6, [r3, #-388]!	; 0xfffffe7c
     580:	4d5f7469 	cfldrdmi	mvd7, [pc, #-420]	; 3e4 <root+0x2a8>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	61737365 	cmnvs	r3, r5, ror #6
     588:	5f006567 	svcpl	0x00006567
     58c:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     590:	6f695f00 	svcvs	0x00695f00
	sti_aux;
     594:	73007362 	movwvc	r7, #866	; 0x362
}
     598:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     59c:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
     5a0:	745f656d 	ldrbvc	r6, [pc], #-1389	; 5a8 <AONRTCIntHandler+0x4>
void AONRTCIntHandler () {
     5a4:	735f5f00 	cmpvc	pc, #0, 30
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a8:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
     5ac:	0074696e 	rsbseq	r6, r4, lr, ror #18
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5b0:	656e776f 	strbvs	r7, [lr, #-1903]!	; 0xfffff891
		if (__pi_utims [0] == 0)
     5b4:	00644972 	rsbeq	r4, r4, r2, ror r9
     5b8:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
		if (*(__pi_utims [0])) {
     5bc:	5f62616c 	svcpl	0x0062616c
     5c0:	5f746547 	svcpl	0x00746547
			(*(__pi_utims [0]))--;
     5c4:	65636552 	strbvs	r6, [r3, #-1362]!	; 0xfffffaae
		if (__pi_utims [1] == 0)
     5c8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
		if (*(__pi_utims [1])) {
     5cc:	646f4e5f 	strbtvs	r4, [pc], #-3679	; 5d4 <AONRTCIntHandler+0x30>
			aux_timer_inactive = 0;
     5d0:	735f0065 	cmpvc	pc, #101	; 0x65
			(*(__pi_utims [1]))--;
     5d4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
		if (__pi_utims [2] == 0)
     5d8:	61675f00 	cmnvs	r7, r0, lsl #30
		if (*(__pi_utims [2])) {
     5dc:	5f616d6d 	svcpl	0x00616d6d
			(*(__pi_utims [2]))--;
     5e0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		if (__pi_utims [3] != 0) {
     5e4:	006d6167 	rsbeq	r6, sp, r7, ror #2
			if (*(__pi_utims [3])) {
     5e8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
				aux_timer_inactive = 0;
     5ec:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
				(*(__pi_utims [3]))--;
     5f0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
	if (__pi_systat.ledsts) {
     5f4:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     5f8:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
		if (__pi_systat.ledblc++ == 0) {
     5fc:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	; 0xfffffe30
     600:	00726562 	rsbseq	r6, r2, r2, ror #10
			if (__pi_systat.ledblk) {
     604:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
     608:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     60c:	6c656572 	cfstr64vs	mvdx6, [r5], #-456	; 0xfffffe38
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	00747369 	rsbseq	r7, r4, r9, ror #6
     614:	64646170 	strbtvs	r6, [r4], #-368	; 0xfffffe90
				if (__pi_systat.ledsts & 0x2)
     618:	00676e69 	rsbeq	r6, r7, r9, ror #28
     61c:	6c756d5f 	ldclvs	13, cr6, [r5], #-380	; 0xfffffe84
     620:	544b0074 	strbpl	r0, [fp], #-116	; 0xffffff8c
				if (__pi_systat.ledsts & 0x4)
     624:	612f504d 			; <UNDEFINED> instruction: 0x612f504d
				__pi_systat.ledblk = 0;
     628:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     62c:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff734 <_estack+0xdfffa734>
			if (__pi_systat.fstblk)
     630:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
     634:	735f5f00 	cmpvc	pc, #0, 30
				__pi_systat.ledblc = 200;
     638:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
	if (events & AON_RTC_EVFLAGS_CH0) {
     63c:	6f72505f 	svcvs	0x0072505f
		cli_tim;
     640:	5f74706d 	svcpl	0x0074706d
		__pi_new += setdel;
     644:	69636552 	stmdbvs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
     648:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
		setdel = 0;
     64c:	6f4e5f67 	svcvs	0x004e5f67
		RISE_N_SHINE;
     650:	5f006564 	svcpl	0x00006564
		__pi_new += setdel;
     654:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
		RISE_N_SHINE;
     658:	5f626d6f 	svcpl	0x00626d6f
     65c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
		aux_timer_inactive = 1;
     660:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     664:	00656c69 	rsbeq	r6, r5, r9, ror #24
				if (__pi_systat.ledsts & 0x1)
     668:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5b4 <AONRTCIntHandler+0x10>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	616d2f65 	cmnvs	sp, r5, ror #30
     670:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				if (__pi_systat.ledsts & 0x2)
     674:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     678:	706f746b 	rsbvc	r7, pc, fp, ror #8
     67c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				if (__pi_systat.ledsts & 0x8)
     680:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
				__pi_systat.ledblk = 1;
     684:	4349502f 	movtmi	r5, #36911	; 0x902f
     688:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		if (aux_timer_inactive) {
     68c:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
			cli_aux;
     690:	415f3436 	cmpmi	pc, r6, lsr r4	; <UNPREDICTABLE>
     694:	67697373 			; <UNDEFINED> instruction: 0x67697373
     698:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
     69c:	5f003274 	svcpl	0x00003274
     6a0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     6a4:	70756e61 	rsbsvc	r6, r5, r1, ror #28
     6a8:	626d5f00 	rsbvs	r5, sp, #0, 30
     6ac:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     6b0:	00745f65 	rsbseq	r5, r4, r5, ror #30
     6b4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
word tci_update_delay_ticks (Boolean force) {
     6b8:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffff95b <_estack+0xdfffa95b>
	cli_tim;
     6bc:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     6c0:	756f635f 	strbvc	r6, [pc, #-863]!	; 369 <root+0x22d>
	if (setdel) {
     6c4:	5f00746e 	svcpl	0x0000746e
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	5f6d745f 	svcpl	0x006d745f
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
     6d0:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     6d4:	6d647071 	stclvs	0, cr7, [r4, #-452]!	; 0xfffffe3c
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	735f5f00 	cmpvc	pc, #0, 30
				AON_RTC_O_CH0CMP)) - gettav ());
     6dc:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
	return NO;
     6e0:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
			setdel = 0;
     6e4:	6d726966 			; <UNDEFINED> instruction: 0x6d726966
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e8:	6172545f 	cmnvs	r2, pc, asr r4
     6ec:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
}
     6f0:	6f697373 	svcvs	0x00697373
		sti_tim;
     6f4:	685f006e 	ldmdavs	pc, {r1, r2, r3, r5, r6}^	; <UNPREDICTABLE>
		return YES;
     6f8:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     6fc:	74006f6e 	strvc	r6, [r0], #-3950	; 0xfffff092
     700:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
     704:	6f006f6c 	svcvs	0x00006f6c
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
	UARTDisable (UART0_BASE);
     70c:	6e700073 	mrcvs	0, 3, r0, cr0, cr3, {3}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	5f006d75 	svcpl	0x00006d75
	UARTDisable (UART0_BASE);
     714:	5f69705f 	svcpl	0x0069705f
	UARTConfigSetExpClk (UART0_BASE,
     718:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     71c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 724 <__pi_uart_setrate+0x1c>
     720:	6f6d5f6d 	svcvs	0x006d5f6d
     724:	654e006e 	strbvs	r0, [lr, #-110]	; 0xffffff92
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
     72c:	6f5f7663 	svcvs	0x005f7663
     730:	42007475 	andmi	r7, r0, #1962934272	; 0x75000000
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	656c6f6f 	strbvs	r6, [ip, #-3951]!	; 0xfffff091
     738:	52006e61 	andpl	r6, r0, #1552	; 0x610
     73c:	49525445 	ldmdbmi	r2, {r0, r2, r6, sl, ip, lr}^
	urates [0] = rate;
     740:	5f455645 	svcpl	0x00455645
}
     744:	4f434552 	svcmi	0x00434552
     748:	44004452 	strmi	r4, [r0], #-1106	; 0xfffffbae
     74c:	4f435349 	svcmi	0x00435349
     750:	59524556 	ldmdbpl	r2, {r1, r2, r4, r6, r8, sl, lr}^
     754:	5345525f 	movtpl	r5, #21087	; 0x525f
     758:	534e4f50 	movtpl	r4, #61264	; 0xef50
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	65730045 	ldrbvs	r0, [r3, #-69]!	; 0xffffffbb
     760:	7265646e 	rsbvc	r6, r5, #1845493760	; 0x6e000000
     764:	5f006449 	svcpl	0x00006449
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	5f69705f 	svcpl	0x0069705f
     76c:	5f786568 	svcpl	0x00786568
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     770:	5f636e65 	svcpl	0x00636e65
     774:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
	__pi_uart_setrate (urates [0], __pi_uart);
     778:	5f5f0065 	svcpl	0x005f0065
     77c:	5f746e69 	svcpl	0x00746e69
     780:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     784:	5f343674 	svcpl	0x00343674
     788:	615f0074 	cmpvs	pc, r4, ror r0	; <UNPREDICTABLE>
     78c:	69786574 	ldmdbvs	r8!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     790:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 5c8 <AONRTCIntHandler+0x24>
	switch (operation) {
     794:	61747362 	cmnvs	r4, r2, ror #6
static int ioreq_uart_a (int operation, char *buf, int len) {
     798:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     79c:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     7a0:	7300746d 	movwvc	r7, #1133	; 0x46d
     7a4:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     7a8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
				*buf++ = uart_a_read;
     7ac:	73656d00 	cmnvc	r5, #0, 26
     7b0:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
			while (len && uart_a_char_available) {
     7b4:	00727450 	rsbseq	r7, r2, r0, asr r4
     7b8:	6e617274 	mcrvs	2, 3, r7, cr1, cr4, {3}
     7bc:	74696d73 	strbtvc	r6, [r9], #-3443	; 0xfffff28d
			if (len != operation) {
     7c0:	00726574 	rsbseq	r6, r2, r4, ror r5
}
     7c4:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     7c8:	5f007374 	svcpl	0x00007374
			uart_a_disable_int;
     7cc:	0066735f 	rsbeq	r7, r6, pc, asr r3
			if (uart_a_char_available) {
     7d0:	696e6970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, sp, lr}^
				*buf++ = uart_a_read;
     7d4:	745f646f 	ldrbvc	r6, [pc], #-1135	; 7dc <ioreq_uart_a+0x48>
			uart_a_disable_int;
     7d8:	4c444900 	mcrrmi	9, 0, r4, r4, cr0	; <UNPREDICTABLE>
     7dc:	65720045 	ldrbvs	r0, [r2, #-69]!	; 0xffffffbb
			if (uart_a_char_available) {
     7e0:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
     7e4:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xfffff1b7
				uart_a_enable_int;
     7e8:	5f5f0078 	svcpl	0x005f0078
     7ec:	62686377 	rsbvs	r6, r8, #-603979775	; 0xdc000001
				goto Redo_rx;
     7f0:	6c675f00 	stclvs	15, cr5, [r7], #-0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f4:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
     7f8:	706d695f 	rsbvc	r6, sp, pc, asr r9
			return -2;
     7fc:	5f657275 	svcpl	0x00657275
     800:	00727470 	rsbseq	r7, r2, r0, ror r4
				uart_a_write (*buf);
     804:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     808:	6165795f 	cmnvs	r5, pc, asr r9
			while (len && uart_a_room_in_tx) {
     80c:	45440072 	strbmi	r0, [r4, #-114]	; 0xffffff8e
     810:	4554454c 	ldrbmi	r4, [r4, #-1356]	; 0xfffffab4
     814:	4345525f 	movtmi	r5, #21087	; 0x525f
			if (len != operation) {
     818:	0044524f 	subeq	r5, r4, pc, asr #4
			uart_a_disable_int;
     81c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     820:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
			if (uart_a_room_in_tx) {
     824:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
     828:	5f006675 	svcpl	0x00006675
				uart_a_enable_int;
     82c:	73756e75 	cmnvc	r5, #1872	; 0x750
     830:	5f006465 	svcpl	0x00006465
				*buf++ = uart_a_read;
     834:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
			if (uart_a_room_in_tx) {
     838:	745f3874 	ldrbvc	r3, [pc], #-2164	; 840 <ioreq_uart_a+0xac>
				uart_a_write (*buf);
     83c:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
     840:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     844:	616d5f00 	cmnvs	sp, r0, lsl #30
     848:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
			uart_a_enable_int;
     84c:	366c5f00 	strbtcc	r5, [ip], -r0, lsl #30
     850:	625f6134 	subsvs	r6, pc, #52, 2
     854:	5f006675 	svcpl	0x00006675
			return 0;
     858:	736b6c62 	cmnvc	fp, #25088	; 0x6200
			if (len == UART_CNTRL_SETRATE) {
     85c:	00657a69 	rsbeq	r7, r5, r9, ror #20
				if (__pi_uart_setrate (*((word*)buf),
     860:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
     864:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
     868:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
				syserror (EREQPAR, "uar");
     86c:	5f007473 	svcpl	0x00007473
			syserror (ENOOPER, "uai");
     870:	6b636f6c 	blvs	18dc628 <__ccfg+0x18bc680>
			if (len == UART_CNTRL_GETRATE) {
     874:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
				return 1;
     878:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			syserror (ENOOPER, "uai");
     880:	75635f69 	strbvc	r5, [r3, #-3945]!	; 0xfffff097
     884:	74007272 	strvc	r7, [r0], #-626	; 0xfffffd8e
     888:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
     88c:	5f007663 	svcpl	0x00007663
     890:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
     894:	69770073 	ldmdbvs	r7!, {r0, r1, r4, r5, r6}^
     898:	745f746e 	ldrbvc	r7, [pc], #-1134	; 8a0 <ioreq_uart_a+0x10c>
     89c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     8a0:	63705f69 	cmnvs	r0, #420	; 0x1a4
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	00745f62 	rsbseq	r5, r4, r2, ror #30
void UART0IntHandler () {
     8a8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	49440072 	stmdbmi	r4, {r1, r4, r5, r6}^
     8b0:	564f4353 			; <UNDEFINED> instruction: 0x564f4353
     8b4:	5f595245 	svcpl	0x00595245
     8b8:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0xfffffaae
     8bc:	00545345 	subseq	r5, r4, r5, asr #6
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8c0:	6f73645f 	svcvs	0x0073645f
     8c4:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
		RISE_N_SHINE;
     8c8:	00656c64 	rsbeq	r6, r5, r4, ror #24
     8cc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		i_trigger (devevent (UART_A, READ));
     8d0:	0074735f 	rsbseq	r7, r4, pc, asr r3
     8d4:	7476635f 	ldrbtvc	r6, [r6], #-863	; 0xfffffca1
     8d8:	00667562 	rsbeq	r7, r6, r2, ror #10
     8dc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     8e0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     8e4:	61686320 	cmnvs	r8, r0, lsr #6
     8e8:	5f5f0072 	svcpl	0x005f0072
     8ec:	6e5f6970 			; <UNDEFINED> instruction: 0x6e5f6970
     8f0:	5f007765 	svcpl	0x00007765
     8f4:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     8f8:	5f323374 	svcpl	0x00323374
     8fc:	73660074 	cmnvc	r6, #116	; 0x74
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     900:	646f636d 	strbtvs	r6, [pc], #-877	; 908 <UART0IntHandler+0x64>
     904:	5f5f0065 	svcpl	0x005f0065
     908:	00424350 	subeq	r4, r2, r0, asr r3
		i_trigger (devevent (UART_A, WRITE));
     90c:	756e656d 	strbvc	r6, [lr, #-1389]!	; 0xfffffa93
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
     914:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
		RISE_N_SHINE;
     918:	72655f65 	rsbvc	r5, r5, #404	; 0x194
     91c:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
     920:	65726973 	ldrbvs	r6, [r2, #-2419]!	; 0xfffff68d
		i_trigger (devevent (UART_A, WRITE));
     924:	63655264 	cmnvs	r5, #100, 4	; 0x40000006
     928:	4964726f 	stmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     92c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     930:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     934:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
     938:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
     93c:	5f5f006c 	svcpl	0x005f006c
     940:	66756273 			; <UNDEFINED> instruction: 0x66756273
     944:	72617500 	rsbvc	r7, r1, #0, 10
     948:	00745f74 	rsbseq	r5, r4, r4, ror pc
     94c:	70615f5f 	rsbvc	r5, r1, pc, asr pc
}
     950:	735f5f00 	cmpvc	pc, #0, 30
     954:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
     958:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     95c:	6b6f7472 	blvs	1bddb2c <__ccfg+0x1bbdb84>
     960:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
void __buttons_setirq (int val) {
     964:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 79c <ioreq_uart_a+0x8>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
     96c:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	00657461 	rsbeq	r7, r5, r1, ror #8
     974:	616e665f 	cmnvs	lr, pc, asr r6
     978:	00736772 	rsbseq	r6, r3, r2, ror r7
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	70766374 	rsbsvc	r6, r6, r4, ror r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     980:	5f67756c 	svcpl	0x0067756c
     984:	5f5f0074 	svcpl	0x005f0074
     988:	616c7473 	smcvs	51011	; 0xc743
     98c:	65445f62 	strbvs	r5, [r4, #-3938]	; 0xfffff09e
     990:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     994:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
}
     998:	0064726f 	rsbeq	r7, r4, pc, ror #4
     99c:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
     9a0:	52656761 	rsbpl	r6, r5, #25427968	; 0x1840000
     9a4:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
void __pinlist_setirq (int val) {
     9a8:	68730064 	ldmdavs	r3!, {r2, r5, r6}^
	for (i = 0; i < N_PINLIST; i++) {
     9ac:	2074726f 	rsbscs	r7, r4, pc, ror #4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9bc:	74616400 	strbtvc	r6, [r1], #-1024	; 0xfffffc00
     9c0:	73616261 	cmnvc	r1, #268435462	; 0x10000006
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c4:	63740065 	cmnvs	r4, #101	; 0x65
     9c8:	70646176 	rsbvc	r6, r4, r6, ror r1
     9cc:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
	for (i = 0; i < N_PINLIST; i++) {
     9d0:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
}
     9d4:	73654d64 	cmnvc	r5, #100, 26	; 0x1900
     9d8:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     9dc:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
     9e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
void GPIOIntHandler () {
     9e4:	6f5f0073 	svcvs	0x005f0073
if (buttons_int) {
     9e8:	745f6666 	ldrbvc	r6, [pc], #-1638	; 9f0 <GPIOIntHandler+0xc>
     9ec:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
	buttons_disable ();
     9f0:	61745365 	cmnvs	r4, r5, ror #6
     9f4:	5f00706d 	svcpl	0x0000706d
	i_trigger ((aword)&__button_list);
     9f8:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
     9fc:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
     a00:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
     a04:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
     a08:	755f0064 	ldrbvc	r0, [pc, #-100]	; 9ac <__pinlist_setirq+0x4>
     a0c:	6570736e 	ldrbvs	r7, [r0, #-878]!	; 0xfffffc92
     a10:	69666963 	stmdbvs	r6!, {r0, r1, r5, r6, r8, fp, sp, lr}^
     a14:	6c5f6465 	cfldrdvs	mvd6, [pc], {101}	; 0x65
     a18:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
     a1c:	6e695f65 	cdpvs	15, 6, cr5, cr9, cr5, {3}
     a20:	5f006f66 	svcpl	0x00006f66
	RISE_N_SHINE;
     a24:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     a28:	5f003273 	svcpl	0x00003273
     a2c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
if (pin_sensor_int) {
     a30:	67006178 	smlsdxvs	r0, r8, r1, r6
     a34:	70756f72 	rsbsvc	r6, r5, r2, ror pc
	i_trigger ((aword)(&__input_pins));
     a38:	5f006449 	svcpl	0x00006449
     a3c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     a40:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     a44:	5f5f0074 	svcpl	0x005f0074
     a48:	61636f6c 	cmnvs	r3, ip, ror #30
     a4c:	745f656c 	ldrbvc	r6, [pc], #-1388	; a54 <GPIOIntHandler+0x70>
     a50:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
     a54:	5f006b65 	svcpl	0x00006b65
     a58:	65647473 	strbvs	r7, [r4, #-1139]!	; 0xfffffb8d
     a5c:	5f007272 	svcpl	0x00007272
     a60:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
	__pinsen_disable_and_clear;
     a64:	00636f6c 	rsbeq	r6, r3, ip, ror #30
	RISE_N_SHINE;
     a68:	7562755f 	strbvc	r7, [r2, #-1375]!	; 0xfffffaa1
     a6c:	52430066 	subpl	r0, r3, #102	; 0x66
     a70:	45544145 	ldrbmi	r4, [r4, #-325]	; 0xfffffebb
}
     a74:	4345525f 	movtmi	r5, #21087	; 0x525f
     a78:	0044524f 	subeq	r5, r4, pc, asr #4
     a7c:	70666665 	rsbvc	r6, r6, r5, ror #12
     a80:	72006d64 	andvc	r6, r0, #100, 26	; 0x1900
     a84:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
void system_init () {
     a88:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a90:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xfffff08c
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a94:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     a98:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     a9c:	6f694465 	svcvs	0x00694465
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	4e4f4100 	dvfmie	f4, f7, f0
     aa4:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
     aac:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     ab0:	33697500 	cmncc	r9, #0, 10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	646f4d32 	strbtvs	r4, [pc], #-3378	; abc <system_init+0x34>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	5f5f0065 	svcpl	0x005f0065
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     abc:	6f5f6970 	svcvs	0x005f6970
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ac0:	6f646666 	svcvs	0x00646666
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	6e69616d 	powvsez	f6, f1, #5.0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac8:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	00766174 	rsbseq	r6, r6, r4, ror r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ad0:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
		pin = (port_confs [i] >> 19) & 0x1f;
     ad4:	5f007365 	svcpl	0x00007365
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	616e655f 	cmnvs	lr, pc, asr r5
     adc:	5f656c62 	svcpl	0x00656c62
     ae0:	00717269 	rsbseq	r7, r1, r9, ror #4
     ae4:	72656877 	rsbvc	r6, r5, #7798784	; 0x770000
		if (port_confs [i] & 0x80)
     ae8:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aec:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     af0:	6e756674 	mrcvs	6, 3, r6, cr5, cr4, {3}
		if (port_confs [i] & 0x40)
     af4:	4100745f 	tstmi	r0, pc, asr r4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     afc:	78754143 	ldmdavc	r5!, {r0, r1, r6, r8, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b00:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b04:	76457075 			; <UNDEFINED> instruction: 0x76457075
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b08:	00746e65 	rsbseq	r6, r4, r5, ror #28
	all_leds_blink;
     b0c:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
     b10:	6f504355 	svcvs	0x00504355
     b14:	53726577 	cmnpl	r2, #499122176	; 0x1dc00000
     b18:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
     b1c:	74654773 	strbtvc	r4, [r5], #-1907	; 0xfffff88d
     b20:	52415500 	subpl	r5, r1, #0, 10
     b24:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b28:	61656c43 	cmnvs	r5, r3, asr #24
     b2c:	79730072 	ldmdbvc	r3!, {r1, r4, r5, r6}^
     b30:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     b34:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     b38:	4f410074 	svcmi	0x00410074
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
     b44:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
	IntEnable (INT_AON_RTC_COMB);
     b48:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     b4c:	7300656c 	movwvc	r6, #1388	; 0x56c
     b50:	65647465 	strbvs	r7, [r4, #-1125]!	; 0xfffffb9b
	__pi_malloc_init ();
     b54:	5250006c 	subspl	r0, r0, #108	; 0x6c
	IntEnable (INT_AON_GPIO_EDGE);
     b58:	634d4d43 	movtvs	r4, #56643	; 0xdd43
     b5c:	776f5075 			; <UNDEFINED> instruction: 0x776f5075
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b60:	664f7265 	strbvs	r7, [pc], -r5, ror #4
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	5f5f0066 	svcpl	0x005f0066
     b68:	5f746573 	svcpl	0x00746573
     b6c:	0050534d 	subseq	r5, r0, sp, asr #6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b70:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     b74:	5f74696e 	svcpl	0x0074696e
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	5f5f0074 	svcpl	0x005f0074
     b7c:	6f5f6970 	svcvs	0x005f6970
     b80:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 9d0 <__pinlist_setirq+0x28>
	urates [0] = UART_RATE / 100;
     b84:	006e6961 	rsbeq	r6, lr, r1, ror #18
     b88:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
	reinit_uart ();
     b8c:	6c467748 	mcrrvs	7, 4, r7, r6, cr8
	EXTRA_INITIALIZERS;
     b90:	6f43776f 	svcvs	0x0043776f
     b94:	6f72746e 	svcvs	0x0072746e
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	7369446c 	cmnvc	r9, #108, 8	; 0x6c000000
     b9c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     ba0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba4:	61755f69 	cmnvs	r5, r9, ror #30
     ba8:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bac:	61727465 	cmnvs	r2, r5, ror #8
     bb0:	41006574 	tstmi	r0, r4, ror r5
			devinit [i] . init (devinit [i] . param);
     bb4:	4f494e4f 	svcmi	0x00494e4f
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	65724643 	ldrbvs	r4, [r2, #-1603]!	; 0xfffff9bd
     bbc:	44657a65 	strbtmi	r7, [r5], #-2661	; 0xfffff59b
     bc0:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	IntEnable (INT_UART0_COMB);
     bc4:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
     bc8:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
}
     bcc:	76654c78 			; <UNDEFINED> instruction: 0x76654c78
	tci_run_auxiliary_timer ();
     bd0:	52006c65 	andpl	r6, r0, #25856	; 0x6500
		diag ("");
     bd4:	5f6f6465 	svcpl	0x006f6465
     bd8:	75007872 	strvc	r7, [r0, #-2162]	; 0xfffff78e
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bdc:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     be0:	76654c78 			; <UNDEFINED> instruction: 0x76654c78
		diag ("Leftover RAM: %d bytes",
     be4:	53006c65 	movwpl	r6, #3173	; 0xc65
     be8:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
     bec:	6c436c72 	mcrrvs	12, 7, r6, r3, cr2
     bf0:	476b636f 	strbmi	r6, [fp, -pc, ror #6]!
     bf4:	50007465 	andpl	r7, r0, r5, ror #8
     bf8:	434d4352 	movtmi	r4, #54098	; 0xd352
     bfc:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
     c00:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
     c04:	6f69746e 	svcvs	0x0069746e
     c08:	616e456e 	cmnvs	lr, lr, ror #10
     c0c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     c10:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     c14:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xfffff0b4
     c18:	00746553 	rsbseq	r6, r4, r3, asr r5
     c1c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     c20:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     c24:	6500656c 	strvs	r6, [r0, #-1388]	; 0xfffffa94
     c28:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     c2c:	61755f65 	cmnvs	r5, r5, ror #30
     c30:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     c34:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     c38:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     c3c:	41550073 	cmpmi	r5, r3, ror r0
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	49465452 	stmdbmi	r6, {r1, r4, r6, sl, ip, lr}^
     c44:	6e454f46 	cdpvs	15, 4, cr4, cr5, cr6, {2}
     c48:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     c4c:	33697500 	cmncc	r9, #0, 10
     c50:	746e4932 	strbtvc	r4, [lr], #-2354	; 0xfffff6ce
     c54:	67616c46 	strbvs	r6, [r1, -r6, asr #24]!
     c58:	69640073 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^
     c5c:	6d754e6f 	ldclvs	14, cr4, [r5, #-444]!	; 0xfffffe44
}
     c60:	00726562 	rsbseq	r6, r2, r2, ror #10
__attribute__ ((noreturn)) void __pi_release () {
     c64:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c68:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     c6c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c70:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
	check_stack_overflow;
     c74:	6f500065 	svcvs	0x00500065
     c78:	43726577 	cmnmi	r2, #499122176	; 0x1dc00000
     c7c:	496c7274 	stmdbmi	ip!, {r2, r4, r5, r6, r9, ip, sp, lr}^
	update_n_wake (MAX_WORD, NO);
     c80:	6572464f 	ldrbvs	r4, [r2, #-1615]!	; 0xfffff9b1
     c84:	44657a65 	strbtmi	r7, [r5], #-2661	; 0xfffff59b
     c88:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
	for_all_tasks (__pi_curr) {
     c8c:	5000656c 	andpl	r6, r0, ip, ror #10
     c90:	434d4352 	movtmi	r4, #54098	; 0xd352
     c94:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
  __ASM volatile ("cpsid i" : : : "memory");
     c98:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
	__SLEEP;
     c9c:	6f69746e 	svcvs	0x0069746e
     ca0:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
     ca4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     ca8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
	system_event_count ++;
     cac:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xfffff090
     cb0:	646f6d72 	strbtvs	r6, [pc], #-3442	; cb8 <__pi_release+0x54>
	switch (__pi_systat.effpdm) {
     cb4:	706f0065 	rsbvc	r0, pc, r5, rrx
     cb8:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     cbc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     cc0:	5f787561 	svcpl	0x00787561
			__WFI ();
     cc4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     cc8:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
     ccc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
	check_stack_overflow;
     cd0:	70006576 	andvc	r6, r0, r6, ror r5
     cd4:	5f74726f 	svcpl	0x0074726f
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     cdc:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	745f6f64 	ldrbvc	r6, [pc], #-3940	; ce8 <__pi_release+0x84>
			goto Redo;
     ce4:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
	for_all_tasks (__pi_curr) {
     ce8:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cec:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cf0:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
     cf4:	42323369 	eorsmi	r3, r2, #-1543503871	; 0xa4000001
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	00657361 	rsbeq	r7, r5, r1, ror #6
     cfc:	6f645f5f 	svcvs	0x00645f5f
     d00:	6966775f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d04:	5f73615f 	svcpl	0x0073615f
     d08:	6465656e 	strbtvs	r6, [r5], #-1390	; 0xfffffa92
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	41006465 	tstmi	r0, r5, ror #8
     d10:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
			__WFI ();
     d14:	636e4943 	cmnvs	lr, #1097728	; 0x10c000
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d18:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     d1c:	32684365 	rsbcc	r4, r8, #-1811939327	; 0x94000001
}
     d20:	00746553 	rsbseq	r6, r4, r3, asr r5
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d24:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d28:	5f74696e 	svcpl	0x0074696e
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     d30:	4e4f4100 	dvfmie	f4, f7, f0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d34:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
     d38:	6148746e 	cmpvs	r8, lr, ror #8
     d3c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d40:	61700072 	cmnvs	r0, r2, ror r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d44:	006d6172 	rsbeq	r6, sp, r2, ror r1
     d48:	5f696374 	svcpl	0x00696374
     d4c:	5f6e7572 	svcpl	0x006e7572
     d50:	616c6564 	cmnvs	ip, r4, ror #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d58:	0072656d 	rsbseq	r6, r2, sp, ror #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d5c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d60:	6c65725f 	sfmvs	f7, 2, [r5], #-380	; 0xfffffe84
     d64:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     d68:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
     d6c:	7270006f 	rsbsvc	r0, r0, #111	; 0x6f
     d70:	696e6965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, sp, lr}^
			SysCtrlSetRechargeBeforePowerDown
     d74:	61755f74 	cmnvs	r5, r4, ror pc
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d78:	66007472 			; <UNDEFINED> instruction: 0x66007472
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
     d80:	52415500 	subpl	r5, r1, #0, 10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	616e4554 	cmnvs	lr, r4, asr r5
     d88:	00656c62 	rsbeq	r6, r5, r2, ror #24
     d8c:	4f495047 	svcmi	0x00495047
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d90:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     d94:	76457261 	strbvc	r7, [r5], -r1, ror #4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d98:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xfffff19b
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d9c:	5f006f69 	svcpl	0x00006f69
     da0:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
     da4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
			while (!(AONWUCPowerStatusGet () &
     dac:	00717269 	rsbseq	r7, r1, r9, ror #4
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db0:	6c65646d 	cfstrdvs	mvd6, [r5], #-436	; 0xfffffe4c
     db4:	5f007961 	svcpl	0x00007961
     db8:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dbc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     dc0:	7172695f 	cmnvc	r2, pc, asr r9
     dc4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     dc8:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	44726165 	ldrbtmi	r6, [r2], #-357	; 0xfffffe9b
     dd0:	53006f69 	movwpl	r6, #3945	; 0xf69
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
     dd8:	6f416c72 	svcvs	0x00416c72
			SysCtrlAdjustRechargeAfterPowerDown ();
     ddc:	6e79536e 	cdpvs	3, 7, cr5, cr9, cr14, {3}
			reinit_uart ();
     de0:	5f5f0063 	svcpl	0x005f0063
     de4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     de8:	6b636174 	blvs	18d93c0 <__ccfg+0x18b9418>
}
     dec:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     df0:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     df4:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	7875615f 	ldmdavc	r5!, {r0, r1, r2, r3, r4, r6, r8, sp, lr}^
     dfc:	61696c69 	cmnvs	r9, r9, ror #24
     e00:	745f7972 	ldrbvc	r7, [pc], #-2418	; e08 <__pi_release+0x1a4>
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     e08:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     e0c:	696c6e69 	stmdbvs	ip!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e10:	735f7473 	cmpvc	pc, #1929379840	; 0x73000000
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	72697465 	rsbvc	r7, r9, #1694498816	; 0x65000000
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e18:	50470071 	subpl	r0, r7, r1, ror r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e1c:	6e494f49 	cdpvs	15, 4, cr4, cr9, cr9, {2}
     e20:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e24:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     e28:	52415500 	subpl	r5, r1, #0, 10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2c:	46494654 			; <UNDEFINED> instruction: 0x46494654
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e30:	76654c4f 	strbtvc	r4, [r5], -pc, asr #24
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e34:	65536c65 	ldrbvs	r6, [r3, #-3173]	; 0xfffff39b
     e38:	79530074 	ldmdbvc	r3, {r2, r4, r5, r6}^
			PRCMPowerDomainOff (
     e3c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
     e40:	7379536c 	cmnvc	r9, #108, 6	; 0xb0000001
	__SLEEP;
     e44:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     e48:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
  __ASM volatile ("cpsie i" : : : "memory");
     e4c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
	goto Redo;
     e50:	00766174 	rsbseq	r6, r6, r4, ror r1
     e54:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     e58:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
     e5c:	616c6564 	cmnvs	ip, r4, ror #10
     e60:	4f410079 	svcmi	0x00410079
     e64:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     e68:	446e6f4d 	strbtmi	r6, [lr], #-3917	; 0xfffff0b3
     e6c:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
     e70:	5f00656c 	svcpl	0x0000656c
     e74:	5f69705f 	svcpl	0x0069705f
     e78:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
     e7c:	41006e6f 	tstmi	r0, pc, ror #28
     e80:	4f494e4f 	svcmi	0x00494e4f
     e84:	65724643 	ldrbvs	r4, [r2, #-1603]!	; 0xfffff9bd
     e88:	45657a65 	strbmi	r7, [r5, #-2661]!	; 0xfffff59b
     e8c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     e90:	4f410065 	svcmi	0x00410065
     e94:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     e98:	426e6f4d 	rsbmi	r6, lr, #308	; 0x134
     e9c:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
     ea0:	6f567972 	svcvs	0x00567972
     ea4:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
     ea8:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
     eac:	726f6900 	rsbvc	r6, pc, #0, 18
     eb0:	755f7165 	ldrbvc	r7, [pc, #-357]	; d53 <__pi_release+0xef>
     eb4:	5f747261 	svcpl	0x00747261
     eb8:	5f5f0061 	svcpl	0x005f0061
	cli_tim;
     ebc:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 554 <tci_run_delay_timer+0x18>
     ec0:	736d6974 	cmnvc	sp, #116, 18	; 0x1d0000
     ec4:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
	diag ("PicOS halted");
     ec8:	50470074 	subpl	r0, r7, r4, ror r0
	mdelay (500);
     ecc:	735f4f49 	cmpvc	pc, #292	; 0x124
     ed0:	69447465 	stmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
	setpowermode (2);
     ed4:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
	__PCB = NULL;
     ed8:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
	release;
     edc:	5f5f0074 	svcpl	0x005f0074
     ee0:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     ee4:	72657379 	rsbvc	r7, r5, #-469762047	; 0xe4000001
     ee8:	00726f72 	rsbseq	r6, r2, r2, ror pc
int main (void) {
     eec:	6e766564 	cdpvs	5, 7, cr6, cr6, cr4, {3}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	2f006d75 	svccs	0x00006d75
     ef4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efc:	2f6e6974 	svccs	0x006e6974
	system_init ();
     f00:	6b736544 	blvs	1cda418 <__ccfg+0x1cba470>
	tcv_init ();
     f04:	2f706f74 	svccs	0x00706f74
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f08:	4f534c4f 	svcmi	0x00534c4f
     f0c:	2f54454e 	svccs	0x0054454e
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	4f434950 	svcmi	0x00434950
     f14:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     f18:	2f534f63 	svccs	0x00534f63
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f1c:	33314343 	teqcc	r1, #201326593	; 0xc000001
     f20:	6d2f5858 	stcvs	8, cr5, [pc, #-352]!	; dc8 <__pi_release+0x164>
	delay (16, 0);
     f24:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
     f28:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
     f2c:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
	__pi_release ();
     f30:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     f34:	74614274 	strbtvc	r4, [r1], #-628	; 0xfffffd8c
     f38:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     f3c:	52415500 	subpl	r5, r1, #0, 10
     f40:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
     f44:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     f48:	5000656c 	andpl	r6, r0, ip, ror #10
static void killev (__pi_pcb_t *pid) {
     f4c:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
	wfun = (aword)(pid->code);
     f50:	6c557563 	cfldr64vs	mvdx7, [r5], {99}	; 0x63
	for_all_tasks (i) {
     f54:	6f436f64 	svcvs	0x00436f64
		for (j = 0; j < nevents (i); j++) {
     f58:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     f5c:	00657275 	rsbeq	r7, r5, r5, ror r2
     f60:	7074756f 	rsbsvc	r7, r4, pc, ror #10
			    || i->Events [j] . Event == wfun
     f64:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
		for (j = 0; j < nevents (i); j++) {
     f68:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
			if (i->Events [j] . Event == (aword)pid
     f6c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     f70:	61680065 	cmnvs	r8, r5, rrx
     f74:	7400746c 	strvc	r7, [r0], #-1132	; 0xfffffb94
				wakeupev (i, j);
     f78:	664f706f 	strbvs	r7, [pc], -pc, rrx
     f7c:	6e69614d 	powvsem	f6, f1, #5.0
	for_all_tasks (i) {
     f80:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
}
     f84:	675f006b 	ldrbvs	r0, [pc, -fp, rrx]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	616c6564 	cmnvs	ip, r4, ror #10
static void qfree (aword *ch) {
     f8c:	41550079 	cmpmi	r5, r9, ror r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f90:	49305452 	ldmdbmi	r0!, {r1, r4, r6, sl, ip, lr}
	cc = (aword*)(mpools + MA_NP);
     f94:	6148746e 	cmpvs	r8, lr, ror #8
	m_setnextp (ch, chunk);
     f98:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	m_setnextp (cc, ch);
     f9c:	65440072 	strbvs	r0, [r4, #-114]	; 0xffffff8e
}
     fa0:	6c537065 	mrrcvs	0, 6, r7, r3, cr5
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa4:	00706565 	rsbseq	r6, r0, r5, ror #10
     fa8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     fac:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
			m_setnextp (cc, m_nextp (chunk));
     fb0:	00676966 	rsbeq	r6, r7, r6, ror #18
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb4:	5f696374 	svcpl	0x00696374
     fb8:	61647075 	smcvs	18181	; 0x4705
     fbc:	645f6574 	ldrbvs	r6, [pc], #-1396	; fc4 <qfree+0x3c>
     fc0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	6369745f 	cmnvs	r9, #1593835520	; 0x5f000000
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	4d00736b 	stcmi	3, cr7, [r0, #-428]	; 0xfffffe54
     fcc:	75736165 	ldrbvc	r6, [r3, #-357]!	; 0xfffffe9b
     fd0:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
			m_setnextp (cc, m_nextp (chunk));
     fd4:	65727665 	ldrbvs	r7, [r2, #-1637]!	; 0xfffff99b
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	6e756671 	mrcvs	6, 3, r6, cr5, cr1, {3}
     fdc:	6b00745f 	blvs	1e160 <__exidx_end+0x19230>
     fe0:	656c6c69 	strbvs	r6, [ip, #-3177]!	; 0xfffff397
     fe4:	5f5f0076 	svcpl	0x005f0076
     fe8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     fec:	70637274 	rsbvc	r7, r3, r4, ror r2
			if (m_size (chunk) >= m_size (ch))
     ff0:	5f5f0079 	svcpl	0x005f0079
     ff4:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; f1c <main+0x30>	; <UNPREDICTABLE>
     ff8:	6f6c6c61 	svcvs	0x006c6c61
		chunk = m_nextp (chunk))
     ffc:	6e750063 	cdpvs	0, 7, cr0, cr5, cr3, {3}
    1000:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    1004:	72667100 	rsbvc	r7, r6, #0, 2
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	69006565 	stmdbvs	r0, {r0, r2, r5, r6, r8, sl, sp, lr}
	diag_wait (a);
    100c:	7165726f 	cmnvc	r5, pc, ror #4
	diag_wchar (c, a);
    1010:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1014:	6f665f69 	svcvs	0x00665f69
}
    1018:	6b006b72 	blvs	1bde8 <__exidx_end+0x16eb8>
    101c:	006c6c69 	rsbeq	r6, ip, r9, ror #24
	syserror (ESTATE, "state");
    1020:	6f6f706d 	svcvs	0x006f706d
    1024:	7500736c 	strvc	r7, [r0, #-876]	; 0xfffffc94
    1028:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    102c:	64615f72 	strbtvs	r5, [r1], #-3954	; 0xfffff08e
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	41550064 	cmpmi	r5, r4, rrx
void utimer_add (address ut) {
    1034:	75425452 	strbvc	r5, [r2, #-1106]	; 0xfffffbae
    1038:	5f007973 	svcpl	0x00007973
		if (__pi_utims [i] == NULL)
    103c:	5f69705f 	svcpl	0x0069705f
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
    1044:	695f636f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
		syserror (ERESOURCE, "ut a");
    1048:	0074696e 	rsbseq	r6, r4, lr, ror #18
	__pi_utims [i] = ut;
    104c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; f98 <qfree+0x10>
}
    1050:	616d2f65 	cmnvs	sp, r5, ror #30
    1054:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1058:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	*t = v;
    105c:	706f746b 	rsbvc	r7, pc, fp, ror #8
	TCI_RUN_AUXILIARY_TIMER;
    1060:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
void update_n_wake (word min, Boolean force) {
    1064:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	4349502f 	movtmi	r5, #36911	; 0x902f
    106c:	502f534f 	eorpl	r5, pc, pc, asr #6
    1070:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1074:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    1078:	2f6c656e 	svccs	0x006c656e
    107c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    1080:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
    1084:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    1088:	72745f69 	rsbsvc	r5, r4, #420	; 0x1a4
    108c:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
    1090:	5f5f0072 	svcpl	0x005f0072
    1094:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    1098:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    109c:	5f5f006e 	svcpl	0x005f006e
    10a0:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; fc8 <qfree+0x40>	; <UNPREDICTABLE>
    10a4:	72667861 	rsbvc	r7, r6, #6356992	; 0x610000
		for_all_tasks (i) {
    10a8:	63006565 	movwvs	r6, #1381	; 0x565
	__pi_mintk = znew + min;
    10ac:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
    10b0:	00676e69 	rsbeq	r6, r7, r9, ror #28
			if (!twaiting (i))
    10b4:	6b68636e 	blvs	1a19e74 <__ccfg+0x19f9ecc>
    10b8:	666e6d00 	strbtvs	r6, [lr], -r0, lsl #26
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10bc:	00656572 	rsbeq	r6, r5, r2, ror r5
    10c0:	636f7270 	cmnvs	pc, #112, 4
    10c4:	00646565 	rsbeq	r6, r4, r5, ror #10
    10c8:	6e656c6d 	cdpvs	12, 6, cr6, cr5, cr13, {3}
    10cc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    10d0:	74705f69 	ldrbtvc	r5, [r0], #-3945	; 0xfffff097
    10d4:	67676972 			; <UNDEFINED> instruction: 0x67676972
    10d8:	61007265 	tstvs	r0, r5, ror #4
    10dc:	65646464 	strbvs	r6, [r4, #-1124]!	; 0xfffffb9c
    10e0:	6e756676 	mrcvs	6, 3, r6, cr5, cr6, {3}
    10e4:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
    10e8:	72657664 	rsbvc	r7, r5, #100, 12	; 0x6400000
				wakeuptm (i);
    10ec:	61696400 	cmnvs	r9, r0, lsl #8
    10f0:	5f5f0067 	svcpl	0x005f0067
		for_all_tasks (i) {
    10f4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
				d = i->Timer - znew;
    10f8:	61637274 	smcvs	14116	; 0x3724
    10fc:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
    1100:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
		if ((word)(__pi_mintk - znew) < min) 
    1104:	6d00745f 	cfstrsvs	mvf7, [r0, #-380]	; 0xfffffe84
    1108:	65726663 	ldrbvs	r6, [r2, #-1635]!	; 0xfffff99d
    110c:	61770065 	cmnvs	r7, r5, rrx
	__pi_old = znew;
    1110:	00657473 	rsbeq	r7, r5, r3, ror r4
}
    1114:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
	TCI_RUN_DELAY_TIMER;
    1118:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
}
    111c:	6d007473 	cfstrsvs	mvf7, [r0, #-460]	; 0xfffffe34
    1120:	00737365 	rsbseq	r7, r3, r5, ror #6
    1124:	6576656d 	ldrbvs	r6, [r6, #-1389]!	; 0xfffffa93
    1128:	5f00746e 	svcpl	0x0000746e
    112c:	5f69705f 	svcpl	0x0069705f
void proceed (word state) {
    1130:	73646162 	cmnvc	r4, #-2147483624	; 0x80000018
	prcdstate (__pi_curr, state);
    1134:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    1138:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	release;
    113c:	61775f69 	cmnvs	r7, r9, ror #30
    1140:	5f007469 	svcpl	0x00007469
void __pi_wait (aword event, word state) {
    1144:	5f69705f 	svcpl	0x0069705f
	sint j = nevents (__pi_curr);
    1148:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	006d656d 	rsbeq	r6, sp, sp, ror #10
    1150:	646e726c 	strbtvs	r7, [lr], #-620	; 0xfffffd94
    1154:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
		syserror (ENEVENTS, "sw");
    1158:	6c6c616c 	stfvse	f6, [ip], #-432	; 0xfffffe50
    115c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	setestate (__pi_curr->Events [j], state, event);
    1160:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
	incwait (__pi_curr);
    1164:	6572666d 	ldrbvs	r6, [r2, #-1645]!	; 0xfffff993
	setestate (__pi_curr->Events [j], state, event);
    1168:	425f0065 	subsmi	r0, pc, #101	; 0x65
}
    116c:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
    1170:	6e756863 	cdpvs	8, 7, cr6, cr5, cr3, {3}
    1174:	7075006b 	rsbsvc	r0, r5, fp, rrx
void __pi_trigger (aword event) {
    1178:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
	for_all_tasks (i) {
    117c:	775f6e5f 			; <UNDEFINED> instruction: 0x775f6e5f
		for (j = 0; j < nevents (i); j++) {
    1180:	00656b61 	rsbeq	r6, r5, r1, ror #22
    1184:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1188:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
    118c:	65670064 	strbvs	r0, [r7, #-100]!	; 0xffffff9c
			if (i->Events [j] . Event == event) {
    1190:	646f6374 	strbtvs	r6, [pc], #-884	; 1198 <__pi_trigger+0x20>
    1194:	6c640065 	stclvs	0, cr0, [r4], #-404	; 0xfffffe6c
    1198:	00746665 	rsbseq	r6, r4, r5, ror #12
				wakeupev (i, j);
    119c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    11a0:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
	for_all_tasks (i) {
    11a4:	00797063 	rsbseq	r7, r9, r3, rrx
}
    11a8:	756f6764 	strbvc	r6, [pc, #-1892]!	; a4c <GPIOIntHandler+0x68>
aword __pi_join (aword pid, word st) {
    11ac:	5f5f0074 	svcpl	0x005f0074
	for_all_tasks (i) {
    11b0:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 848 <ioreq_uart_a+0xb4>
    11b4:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	return 0;
    11b8:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
		if ((aword)i == pid) {
    11bc:	66770074 			; <UNDEFINED> instruction: 0x66770074
			__pi_wait (pid, st);
    11c0:	6e006e75 	mcrvs	14, 0, r6, cr0, cr5, {3}
}
    11c4:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
	for_all_tasks (i) {
    11c8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    11cc:	72665f69 	rsbvc	r5, r6, #420	; 0x1a4
void delay (word d, word state) {
    11d0:	44006565 	strmi	r6, [r0], #-1381	; 0xfffffa9b
	settstate (__pi_curr, state);
    11d4:	49535f49 	ldmdbmi	r3, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
    11d8:	5f5f0047 	svcpl	0x005f0047
    11dc:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 1104 <update_n_wake+0xa0>	; <UNPREDICTABLE>
    11e0:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
	update_n_wake (d, YES);
    11e4:	5f5f0074 	svcpl	0x005f0074
    11e8:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
	__pi_curr->Timer = __pi_old + d;
    11ec:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    11f0:	5f007970 	svcpl	0x00007970
	inctimer (__pi_curr);
    11f4:	5f69705f 	svcpl	0x0069705f
    11f8:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
    11fc:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
}
    1200:	5f72656d 	svcpl	0x0072656d
    1204:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
	if (fun == NULL)
    1208:	5f006574 	svcpl	0x00006574
		return (int) __pi_curr;
    120c:	5f69705f 	svcpl	0x0069705f
    1210:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
	for_all_tasks (i)
    1214:	00746163 	rsbseq	r6, r4, r3, ror #2
}
    1218:	5f766374 	svcpl	0x00766374
		if (i->code == fun)
    121c:	7a697371 	bvc	1a5dfe8 <__ccfg+0x1a3e040>
	for_all_tasks (i)
    1220:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    1224:	5f007665 	svcpl	0x00007665
    1228:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
int __pi_strlen (const char *s) {
    122c:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
	for (i = 0; *(s+i) != '\0'; i++);
    1230:	745f7274 	ldrbvc	r7, [pc], #-628	; 1238 <__pi_strlen+0xc>
}
    1234:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	for (i = 0; *(s+i) != '\0'; i++);
    1238:	5f796870 	svcpl	0x00796870
	while (n--)
    123c:	00706f74 	rsbseq	r6, r0, r4, ror pc
    1240:	5f766374 	svcpl	0x00766374
		*dest++ = *src++;
    1244:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
    1248:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    124c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1198 <__pi_trigger+0x20>
	while (n--)
    1250:	616d2f65 	cmnvs	sp, r5, ror #30
}
    1254:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		*dest++ = c;
    1258:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
void adddevfunc (devreqfun_t rf, int loc) {
    125c:	706f746b 	rsbvc	r7, pc, fp, ror #8
		syserror (EREQPAR, "addv");
    1260:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		syserror (ERESOURCE, "addv");
    1264:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	if (ioreq [loc] != NULL)
    1268:	4349502f 	movtmi	r5, #36911	; 0x902f
    126c:	502f534f 	eorpl	r5, pc, pc, asr #6
		syserror (ERESOURCE, "addv");
    1270:	534f6369 	movtpl	r6, #62313	; 0xf369
	ioreq [loc] = rf;
    1274:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
}
    1278:	562f7362 	strtpl	r7, [pc], -r2, ror #6
    127c:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	7663742f 	strbtvc	r7, [r3], -pc, lsr #8
    1284:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    1288:	5f707663 	svcpl	0x00707663
    128c:	70736964 	rsbsvc	r6, r3, r4, ror #18
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1290:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1294:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1298:	725f7968 	subsvc	r7, pc, #104, 18	; 0x1a0000
		syserror (ENODEVICE, "io");
    129c:	63006765 	movwvs	r6, #1893	; 0x765
    12a0:	666c7274 			; <UNDEFINED> instruction: 0x666c7274
	if (len == 0)
    12a4:	745f6e75 	ldrbvc	r6, [pc], #-3701	; 12ac <io+0x2c>
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    12ac:	5f796870 	svcpl	0x00796870
	if (ret >= 0)
    12b0:	00746567 	rsbseq	r6, r4, r7, ror #10
	if (ret == -1) {
    12b4:	5f766374 	svcpl	0x00766374
    12b8:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		if (retry == WNONE)
    12bc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		iowait (dev, operation, retry);
    12c0:	6f72645f 	svcvs	0x0072645f
    12c4:	68700070 	ldmdavs	r0!, {r4, r5, r6}^
    12c8:	6e697379 	mcrvs	3, 3, r7, cr9, cr9, {3}
			release;
    12cc:	65006f66 	strvs	r6, [r0, #-3942]	; 0xfffff09a
	if (ret == -2) {
    12d0:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
		if (retry != WNONE) {
    12d4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    12d8:	5f796870 	svcpl	0x00796870
			iowait (dev, operation, retry);
    12dc:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    12e0:	63740065 	cmnvs	r4, #101	; 0x65
			(ioreq [dev]) (NONE, buf, len);
    12e4:	615f7076 	cmpvs	pc, r6, ror r0	; <UNPREDICTABLE>
    12e8:	63617474 	cmnvs	r1, #116, 8	; 0x74000000
    12ec:	716f0068 	cmnvc	pc, r8, rrx
		(ioreq [dev]) (NONE, buf, len);
    12f0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    12f4:	5f5f0073 	svcpl	0x005f0073
    12f8:	5f766374 	svcpl	0x00766374
}
    12fc:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
	if (retry != WNONE) {
    1300:	00735f6d 	rsbseq	r5, r3, sp, ror #30
		delay (-ret - 2, retry);
    1304:	63745f5f 	cmnvs	r4, #380	; 0x17c
    1308:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    130c:	5f6d6574 	svcpl	0x006d6574
    1310:	5f5f0074 	svcpl	0x005f0074
		release;
    1314:	5f766374 	svcpl	0x00766374
    1318:	6f6c6268 	svcvs	0x006c6268
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 1324 <__pi_malloc_init+0x8>
    1320:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
    1324:	72750070 	rsbsvc	r0, r5, #112	; 0x70
    1328:	746e6567 	strbtvc	r6, [lr], #-1383	; 0xfffffa99
    132c:	5f724500 	svcpl	0x00724500
		syserror (ERESOURCE, "mal1");
    1330:	64007472 	strvs	r7, [r0], #-1138	; 0xfffffb8e
    1334:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1338:	6f747069 	svcvs	0x00747069
    133c:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1340:	655f7663 	ldrbvs	r7, [pc, #-1635]	; ce5 <__pi_release+0x81>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1344:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1348:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    134c:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
    1350:	63740070 	cmnvs	r4, #112	; 0x70
}
    1354:	6e5f7076 	mrcvs	0, 2, r7, cr15, cr6, {3}
    1358:	72007765 	andvc	r7, r0, #26476544	; 0x1940000
    135c:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
    1360:	74700065 	ldrbtvc	r0, [r0], #-101	; 0xffffff9b
    1364:	70007372 	andvc	r7, r0, r2, ror r3
    1368:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
void __pi_free (aword *ch) {
    136c:	00737265 	rsbseq	r7, r3, r5, ror #4
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	5f766374 	svcpl	0x00766374
    1374:	73706e77 	cmnvc	r0, #1904	; 0x770
		syserror (EMALLOC, "malg");
    1378:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    137c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
	mcfree [MA_NP] += m_size (ch);
    1380:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
		m_size (ch) ^= MALLOC_UMASK;
    1384:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
    1388:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	mcfree [MA_NP] += m_size (ch);
    138c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 1394 <__pi_free+0x28>
	QFREE;
    1390:	735f7663 	cmpvc	pc, #103809024	; 0x6300000
	if (mevent [MA_NP] . nwait) {
    1394:	65647365 	strbvs	r7, [r4, #-869]!	; 0xfffffc9b
    1398:	745f6373 	ldrbvc	r6, [pc], #-883	; 13a0 <__pi_free+0x34>
		trigger ((aword)(&(mevent [MA_NP])));
    139c:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
		mevent [MA_NP] . nwait --;
    13a0:	68700073 	ldmdavs	r0!, {r0, r1, r4, r5, r6}^
}
    13a4:	63697379 	cmnvs	r9, #-469762047	; 0xe4000001
    13a8:	71006c61 	tstvc	r0, r1, ror #24
    13ac:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    13b0:	63740064 	cmnvs	r4, #100	; 0x64
void kill (aword pid) {
    13b4:	65725f76 	ldrbvs	r5, [r2, #-3958]!	; 0xfffff08a
		pid = (aword) __pi_curr;
    13b8:	74006461 	strvc	r6, [r0], #-1121	; 0xfffffb9f
	j = NULL;
    13bc:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	for_all_tasks (i) {
    13c0:	0074696e 	rsbseq	r6, r4, lr, ror #18
	syserror (EREQPAR, "kpi");
    13c4:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
    13c8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
		if ((aword)i == pid) {
    13cc:	70766374 	rsbsvc	r6, r6, r4, ror r3
    13d0:	6f6c635f 	svcvs	0x006c635f
				__PCB = i->Next;
    13d4:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
			killev (i);
    13d8:	5f707663 	svcpl	0x00707663
			ufree (i);
    13dc:	69737361 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
			if (i == __pi_curr)
    13e0:	70006e67 	andvc	r6, r0, r7, ror #28
    13e4:	0064696c 	rsbeq	r6, r4, ip, ror #18
				release;
    13e8:	70766374 	rsbsvc	r6, r6, r4, ror r3
				j->Next = i->Next;
    13ec:	655f7968 	ldrbvs	r7, [pc, #-2408]	; a8c <system_init+0x4>
    13f0:	6100646e 	tstvs	r0, lr, ror #8
    13f4:	61707474 	cmnvs	r0, r4, ror r4
}
    13f8:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
    13fc:	6374006e 	cmnvs	r4, #110	; 0x6e
    1400:	6c705f76 	ldclvs	15, cr5, [r0], #-472	; 0xfffffe28
	if (size < 8)
    1404:	61006775 	tstvs	r0, r5, ror r7
		_size = 2;
    1408:	69727474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, sp, lr}^
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    140c:	65747562 	ldrbvs	r7, [r4, #-1378]!	; 0xfffffa9e
		_size = (((aword)size) + 3) >> 2;
    1410:	5f5f0073 	svcpl	0x005f0073
		if (m_magic (chunk) != MALLOC_MAGIC)
    1414:	5f766374 	svcpl	0x00766374
		_size = (((aword)size) + 3) >> 2;
    1418:	61656871 	smcvs	22145	; 0x5681
		if (mevent [MA_NP] . nfail != 255)
    141c:	00745f64 	rsbseq	r5, r4, r4, ror #30
    1420:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
			mevent [MA_NP] . nfail ++;
    1424:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
		mnfree [MA_NP] = 0;
    1428:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
    142c:	69640068 	stmdbvs	r4!, {r3, r5, r6}^
		if (m_magic (chunk) != MALLOC_MAGIC)
    1430:	74007073 	strvc	r7, [r0], #-115	; 0xffffff8d
    1434:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
			syserror (EMALLOC, "malc");
    1438:	7400706e 	strvc	r7, [r0], #-110	; 0xffffff92
    143c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
		if (m_size (chunk) >= _size)
    1440:	63725f79 	cmnvs	r2, #484	; 0x1e4
    1444:	71620076 	smcvc	8198	; 0x2006
		chunk = m_nextp (chunk)) {
    1448:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
		m_setnextp (cc, m_nextp (chunk));
    144c:	756c7000 	strbvc	r7, [ip, #-0]!
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1450:	736e6967 	cmnvc	lr, #1687552	; 0x19c000
    1454:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 145c <__pi_malloc+0x58>
			m_size (chunk) = _size;
    1458:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
			cc = chunk + _size + m_hdrlen;
    145c:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1460:	00735f6b 	rsbseq	r5, r3, fp, ror #30
			m_size (cc) = waste - m_hdrlen;
    1464:	6774756f 	ldrbvs	r7, [r4, -pc, ror #10]!
			QFREE;
    1468:	676e696f 	strbvs	r6, [lr, -pc, ror #18]!
		mevent [MA_NP] . nfail = 0;
    146c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		mcfree [MA_NP] -= m_size (chunk);
    1470:	6f635f70 	svcvs	0x00635f70
    1474:	6f72746e 	svcvs	0x0072746e
    1478:	655f006c 	ldrbvs	r0, [pc, #-108]	; 1414 <__pi_malloc+0x10>
    147c:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
		m_size (chunk) |= MALLOC_UMASK;
    1480:	7570006b 	ldrbvc	r0, [r0, #-107]!	; 0xffffff95
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1484:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
		m_size (chunk) |= MALLOC_UMASK;
    1488:	46006372 			; <UNDEFINED> instruction: 0x46006372
			mnfree [MA_NP] = mcfree [MA_NP];
    148c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
}
    1490:	48525349 	ldmdami	r2, {r0, r3, r6, r8, r9, ip, lr}^
    1494:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1498:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
    149c:	5253696d 	subspl	r6, r3, #1785856	; 0x1b4000
    14a0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    14a4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    14a8:	6574655f 	ldrbvs	r6, [r4, #-1375]!	; 0xfffffaa1
aword __pi_fork (fsmcode func, aword data) {
    14ac:	5f007478 	svcpl	0x00007478
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
    14b4:	6f682f00 	svcvs	0x00682f00
    14b8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 130c <io+0x8c>
		if ((j = __PCB) == NULL)
    14bc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	i->Next = NULL;
    14c0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	i->data = data;
    14c4:	6f746b73 	svcvs	0x00746b73
		if ((j = __PCB) == NULL)
    14c8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
}
    14cc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			for (; j->Next != NULL; j = j->Next);
    14d0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    14d4:	2f534f43 	svccs	0x00534f43
	return (aword) i;
    14d8:	4f636950 	svcmi	0x00636950
    14dc:	43432f53 	movtmi	r2, #16211	; 0x3f53
	if (mevent [MA_NP] . nwait != 255)
    14e0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    14e4:	6174732f 	cmnvs	r4, pc, lsr #6
    14e8:	70757472 	rsbsvc	r7, r5, r2, ror r4
		mevent [MA_NP] . nwait ++;
    14ec:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
	wait ((aword)(&(mevent [MA_NP])), state);
    14f0:	5f00632e 	svcpl	0x0000632e
    14f4:	00737362 	rsbseq	r7, r3, r2, ror #6
void diag (const char *mess, ...) {
    14f8:	6164655f 	cmnvs	r4, pc, asr r5
    14fc:	49006174 	stmdbmi	r0, {r2, r4, r5, r6, r8, sp, lr}
    1500:	6544746e 	strbvs	r7, [r4, #-1134]	; 0xfffffb92
	diag_disable_int (a, is);
    1504:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1508:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
    150c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	705f6700 	subsvc	r6, pc, r0, lsl #14
	diag_disable_int (a, is);
    1514:	65566e66 	ldrbvs	r6, [r6, #-3686]	; 0xfffff19a
	while (*mess != '\0') {
    1518:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
	dgout ('\r');
    151c:	75700073 	ldrbvc	r0, [r0, #-115]!	; 0xffffff8d
	dgout ('\n');
    1520:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    1524:	00747365 	rsbseq	r7, r4, r5, ror #6
    1528:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
	diag_wait (a);
    152c:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
	diag_enable_int (a, is);
    1530:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1534:	4f565f47 	svcmi	0x00565f47
}
    1538:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
    153c:	5f44414f 	svcpl	0x0044414f
    1540:	43430030 	movtmi	r0, #12336	; 0x3030
		if (*mess == '%') {
    1544:	565f4746 	ldrbpl	r4, [pc], -r6, asr #14
    1548:	5f544c4f 	svcpl	0x00544c4f
			if (*mess == 'l') {
    154c:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
    1550:	4300315f 	movwmi	r3, #351	; 0x15f
				mess++;
    1554:	5f474643 	svcpl	0x00474643
				val = va_arg (ap, lword);
    1558:	435f4c42 	cmpmi	pc, #16896	; 0x4200
				bc = 32;
    155c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
				bc = 16;
    1560:	43430047 	movtmi	r0, #12359	; 0x3047
			switch (*mess) {
    1564:	525f4746 	subspl	r4, pc, #18350080	; 0x1180000
    1568:	4f5f4354 	svcmi	0x005f4354
    156c:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
				dgout ('%');
    1570:	43430054 	movtmi	r0, #12372	; 0x3054
    1574:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 1464 <__pi_malloc+0x60>
				dgout (*mess);
    1578:	5f45444f 	svcpl	0x0045444f
    157c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
			switch (*mess) {
    1580:	635f5f00 	cmpvs	pc, #0, 30
					v = __pi_hex_enc_table [
    1584:	00676663 	rsbeq	r6, r7, r3, ror #12
					i += 4;
    1588:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 14d4 <__pi_fork+0x28>
					(val >> (bc - i)) & 0xf];
    158c:	616d2f65 	cmnvs	sp, r5, ror #30
    1590:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
					dgout (v);
    1594:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1598:	706f746b 	rsbvc	r7, pc, fp, ror #8
				while (i < bc) {
    159c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			mess++;
    15a0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
					d /= 10;
    15a4:	4349502f 	movtmi	r5, #36911	; 0x902f
				if ((val >> (bc - 1)) & 1) {
    15a8:	502f534f 	eorpl	r5, pc, pc, asr #6
    15ac:	534f6369 	movtpl	r6, #62313	; 0xf369
					dgout ('-');
    15b0:	3143432f 	cmpcc	r3, pc, lsr #6
    15b4:	2f585833 	svccs	0x00585833
						val |= 0xffff0000;
    15b8:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    15bc:	4300632e 	movwmi	r6, #814	; 0x32e
    15c0:	5f474643 	svcpl	0x00474643
				d = (bc == 16) ? 10000 : 1000000000;
    15c4:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    15c8:	444e415f 	strbmi	r4, [lr], #-351	; 0xfffffea1
    15cc:	5349445f 	movtpl	r4, #37983	; 0x945f
					v = (word) (val / d);
    15d0:	414c465f 	cmpmi	ip, pc, asr r6
					if (v || d == 1) break;
    15d4:	43005347 	movwmi	r5, #839	; 0x347
    15d8:	5f474643 	svcpl	0x00474643
					d /= 10;
    15dc:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
				d = (bc == 16) ? 10000 : 1000000000;
    15e0:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
					dgout (v + '0');
    15e4:	4300305f 	movwmi	r3, #95	; 0x5f
    15e8:	5f474643 	svcpl	0x00474643
    15ec:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
					d /= 10;
    15f0:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
					val = val - (v * d);
    15f4:	4300315f 	movwmi	r3, #351	; 0x15f
					if (d == 0) break;
    15f8:	5f474643 	svcpl	0x00474643
					v = (word) (val / d);
    15fc:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    1600:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
				if (bc == 16)
    1604:	00315f46 	eorseq	r5, r1, r6, asr #30
				d = (bc == 16) ? 10000 : 1000000000;
    1608:	47464343 	strbmi	r4, [r6, -r3, asr #6]
					val &= 0xffff;
    160c:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
					dgout (*s);
    1610:	41545f47 	cmpmi	r4, r7, asr #30
					s++;
    1614:	41445f50 	cmpmi	r4, r0, asr pc
				while (*s != '\0') {
    1618:	00305f50 	eorseq	r5, r0, r0, asr pc
    161c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			dgout (*mess++);
    1620:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    1624:	41545f47 	cmpmi	r4, r7, asr #30
    1628:	41445f50 	cmpmi	r4, r0, asr pc
    162c:	00315f50 	eorseq	r5, r1, r0, asr pc
    1630:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1634:	4300745f 	movwmi	r7, #1119	; 0x45f
    1638:	5f474643 	svcpl	0x00474643
    163c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1640:	4f52505f 	svcmi	0x0052505f
	^ entropy
    1644:	32315f54 	eorscc	r5, r1, #84, 30	; 0x150
}
    1648:	36395f37 	shasxcc	r5, r9, r7
    164c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1650:	52455f47 	subpl	r5, r5, #284	; 0x11c
    1654:	5f455341 	svcpl	0x00455341
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1658:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
	word cs = size + hblenb;
    165c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1660:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1664:	505f4746 	subspl	r4, pc, r6, asr #14
	p -> length = size;
    1668:	5f544f52 	svcpl	0x00544f52
}
    166c:	305f3133 	subscc	r3, pc, r3, lsr r1	; <UNPREDICTABLE>
	if (p->attributes.b.queued) {
    1670:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1674:	4d495f47 	stclmi	15, cr5, [r9, #-284]	; 0xfffffee4
    1678:	5f454741 	svcpl	0x00454741
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    167c:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
		p->attributes.b.queued = 0;
    1680:	4f435f44 	svcmi	0x00435f44
    1684:	4300464e 	movwmi	r4, #1614	; 0x64e
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1688:	5f474643 	svcpl	0x00474643
	deq (p);	// Remove from queue
    168c:	51455246 	cmppl	r5, r6, asr #4
}
    1690:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
	tfree ((address)p);
    1694:	00544553 	subseq	r4, r4, r3, asr r5
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    169c:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    16a0:	52505f47 	subspl	r5, r0, #284	; 0x11c
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a4:	365f544f 	ldrbcc	r5, [pc], -pc, asr #8
    16a8:	32335f33 	eorscc	r5, r3, #51, 30	; 0xcc
	if (q_empty (q))
    16ac:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    16b0:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		trigger (q);
    16b4:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
	if (p->attributes.b.urgent) {
    16b8:	305f454c 	subscc	r4, pc, ip, asr #10
		p->u.bqueue.next = q->next;
    16bc:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		p->u.bqueue.prev = q;
    16c0:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		q->next->prev = (qitem_t*) p;
    16c4:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
	p->attributes.b.queued = 1;
    16c8:	315f454c 	cmpcc	pc, ip, asr #10
    16cc:	46434300 	strbmi	r4, [r3], -r0, lsl #6
}
    16d0:	43435f47 	movtmi	r5, #16199	; 0x3f47
		p->u.bqueue.prev = q->prev;
    16d4:	505f4746 	subspl	r4, pc, r6, asr #14
		q->prev->next = (qitem_t*) p;
    16d8:	5f544f52 	svcpl	0x00544f52
		q->prev = (qitem_t*) p;
    16dc:	365f3539 			; <UNDEFINED> instruction: 0x365f3539
    16e0:	43430034 	movtmi	r0, #12340	; 0x3034
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e4:	455f4746 	ldrbmi	r4, [pc, #-1862]	; fa6 <qfree+0x1e>
	deq (p);	// Soft dequeue, timer and hook left intact
    16e8:	4c5f5458 	cfldrdmi	mvd5, [pc], {88}	; 0x58
	switch (dv) {
    16ec:	4c435f46 	mcrrmi	15, 4, r5, r3, cr6
    16f0:	4343004b 	movtmi	r0, #12363	; 0x304b
    16f4:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    16f8:	5f474643 	svcpl	0x00474643
			p->attributes.b.urgent = 1;
    16fc:	4f5f4954 	svcmi	0x005f4954
    1700:	4f495450 	svcmi	0x00495450
			verify_ses (p, "dispose ses");
    1704:	4700534e 	strmi	r5, [r0, -lr, asr #6]
    1708:	5f4f4950 	svcpl	0x004f4950
    170c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1710:	006f6944 	rsbeq	r6, pc, r4, asr #18
    1714:	6b6e756a 	blvs	1b9ecc4 <__ccfg+0x1b7ed1c>
			verify_phy (p, "dispose phy");
    1718:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    171c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
}
    1720:	5f726f73 	svcpl	0x00726f73
			enq (oqueues [p->attributes.b.phys], p);
    1724:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
			p->attributes.b.urgent = 1;
    1728:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    172c:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
			verify_phy (p, "dispose phy");
    1730:	5f726f73 	svcpl	0x00726f73
    1734:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1738:	6f682f00 	svcvs	0x00682f00
    173c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1590 <diag+0x98>
    1740:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1744:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			enq (oqueues [p->attributes.b.phys], p);
    1748:	6f746b73 	svcvs	0x00746b73
    174c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
}
    1750:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			rlp (p);
    1754:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
}
    1758:	2f534f43 	svccs	0x00534f43
    175c:	4f636950 	svcmi	0x00636950
    1760:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1764:	2f736269 	svccs	0x00736269
    1768:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    176c:	2f73726f 	svccs	0x0073726f
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1770:	5f6e6970 	svcpl	0x006e6970
	if (b->attributes.b.outgoing) {
    1774:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
	b = header (p);
    1778:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
	if (b->attributes.b.outgoing) {
    177c:	72655400 	rsbvc	r5, r5, #0, 8
		verify_ses (b, "tcv02");
    1780:	6162006d 	cmnvs	r2, sp, rrx
    1784:	6f697463 	svcvs	0x00697463
    1788:	6544006e 	strbvs	r0, [r4, #-110]	; 0xffffff92
    178c:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
    1790:	2f006563 	svccs	0x00006563
		verify_plg (b, tcv_out, "tcv03");
    1794:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1798:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    179c:	2f6e6974 	svccs	0x006e6974
    17a0:	6b736544 	blvs	1cdacb8 <__ccfg+0x1cbad10>
    17a4:	2f706f74 	svccs	0x00706f74
    17a8:	4f534c4f 	svcmi	0x00534c4f
    17ac:	2f54454e 	svccs	0x0054454e
    17b0:	4f434950 	svcmi	0x00434950
    17b4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b8:	2f534f63 	svccs	0x00534f63
}
    17bc:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		dispose (b, plugins [b->attributes.b.plugin] ->
    17c0:	4f492f73 	svcmi	0x00492f73
		rlp (b);
    17c4:	7475622f 	ldrbtvc	r6, [r5], #-559	; 0xfffffdd1
}
    17c8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
		rlp (b);
    17cc:	7000632e 	andvc	r6, r0, lr, lsr #6
    17d0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    17d4:	5f006e6f 	svcpl	0x00006e6f
    17d8:	5f69705f 	svcpl	0x0069705f
    17dc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17e0:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    17e4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    17e8:	5f736e6f 	svcpl	0x00736e6f
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17ec:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
	va_start (ap, plid);
    17f0:	45006e6f 	strmi	r6, [r0, #-3695]	; 0xfffff191
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    17f8:	5f656500 	svcpl	0x00656500
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1800:	6172655f 	cmnvs	r2, pc, asr r5
    1804:	75006573 	strvc	r6, [r0, #-1395]	; 0xfffffa8d
    1808:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
			syserror (ENODEVICE, "tcv04");
    180c:	5f646d63 	svcpl	0x00646d63
		syserror (EMALLOC, "tcv05");
    1810:	65650030 	strbvs	r0, [r5, #-48]!	; 0xffffffd0
	attp.b.outgoing = 1;
    1814:	6f6c635f 	svcvs	0x006c635f
    1818:	65006573 	strvs	r6, [r0, #-1395]	; 0xfffffa8d
    181c:	72655f65 	rsbvc	r5, r5, #404	; 0x194
    1820:	00657361 	rsbeq	r7, r5, r1, ror #6
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1824:	775f6565 	ldrbvc	r6, [pc, -r5, ror #10]
		if (descriptors [fd] == NULL)
    1828:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    182c:	706f6400 	rsbvc	r6, pc, r0, lsl #8
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1830:	65006e65 	strvs	r6, [r0, #-3685]	; 0xfffff19b
		return ERROR;
    1834:	706f5f65 	rsbvc	r5, pc, r5, ror #30
}
    1838:	57006e65 	strpl	r6, [r0, -r5, ror #28]
    183c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    1840:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
	s->attpattern.b.session = fd;
    1844:	6500335f 	strvs	r3, [r0, #-863]	; 0xfffffca1
    1848:	61705f65 	cmnvs	r0, r5, ror #30
	descriptors [fd] = s;
    184c:	0063696e 	rsbeq	r6, r3, lr, ror #18
	q_init (&(s->rqueue));
    1850:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1854:	00636e79 	rsbeq	r6, r3, r9, ror lr
    1858:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 16c8 <enq+0x30>
    185c:	5f656500 	svcpl	0x00656500
    1860:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1864:	73647200 	cmnvc	r4, #0, 4
    1868:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
    186c:	2f656d6f 	svccs	0x00656d6f
	descriptors [fd] = s;
    1870:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1874:	442f6e69 	strtmi	r6, [pc], #-3689	; 187c <tcv_open+0x9c>
    1878:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	if (s == NULL)
    187c:	4f2f706f 	svcmi	0x002f706f
		syserror (EMALLOC, "tcv05");
    1880:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1884:	502f5445 	eorpl	r5, pc, r5, asr #8
    1888:	534f4349 	movtpl	r4, #62281	; 0xf349
    188c:	6369502f 	cmnvs	r9, #47	; 0x2f
    1890:	502f534f 	eorpl	r5, pc, pc, asr #6
    1894:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1898:	6f74532f 	svcvs	0x0074532f
    189c:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
	if (ord < 0 || ord >= TCV_MAX_PLUGS ||
    18a0:	6f74732f 	svcvs	0x0074732f
	    (plugins [ord] != NULL && plugins [ord] != pl))
    18a4:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    18a8:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    18ac:	30387235 	eorscc	r7, r8, r5, lsr r2
	plugins [ord] = pl;
    18b0:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
	return 0;
    18b4:	6c636300 	stclvs	3, cr6, [r3], #-0
		return ERROR;
    18b8:	0065736f 	rsbeq	r7, r5, pc, ror #6
}
    18bc:	61747364 	cmnvs	r4, r4, ror #6
    18c0:	6f630074 	svcvs	0x00630074
	verify_fds (fd, "tcv16");
    18c4:	006e6570 	rsbeq	r6, lr, r0, ror r5
								Boolean urg) {
    18c8:	72747063 	rsbsvc	r7, r4, #99	; 0x63
    18cc:	5f656500 	svcpl	0x00656500
	verify_fds (fd, "tcv16");
    18d0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    18d4:	61657200 	cmnvs	r5, r0, lsl #4
    18d8:	45007964 	strmi	r7, [r0, #-2404]	; 0xfffff69c
	verify_pld (s, tcv_frm, "tcv17");
    18dc:	656e6f44 	strbvs	r6, [lr, #-3908]!	; 0xfffff0bc
    18e0:	6f647000 	svcvs	0x00647000
    18e4:	77006e77 	smlsdxvc	r0, r7, lr, r6
    18e8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
    18ec:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    18f0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    18f4:	75700065 	ldrbvc	r0, [r0, #-101]!	; 0xffffff9b
    18f8:	79625f74 	stmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	ptrs.head = (word) fd;
    18fc:	5f006574 	svcpl	0x00006574
	ptrs.tail = (word) urg;
    1900:	706e695f 	rsbvc	r6, lr, pc, asr r9
	if ((eid = plugins [s->attpattern.b.plugin]->tcv_frm (NULL, &ptrs))) {
    1904:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    1908:	6f682f00 	svcvs	0x00682f00
		if (state != WNONE) {
    190c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1760 <dispose+0x7c>
    1910:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
}
    1914:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			when (eid, state);
    1918:	6f746b73 	svcvs	0x00746b73
    191c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			release;
    1920:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	sysassert (s->attpattern.b.queued == 0, "tcv18");
    1924:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1928:	2f534f43 	svccs	0x00534f43
	if ((b = apb (length + ptrs . head + ptrs . tail)) == NULL) {
    192c:	4f636950 	svcmi	0x00636950
    1930:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1934:	2f736269 	svccs	0x00736269
    1938:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    193c:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
    1940:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		if (state != WNONE) {
    1944:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1948:	5f726573 	svcpl	0x00726573
			tmwait (state);
    194c:	73006e69 	movwvc	r6, #3689	; 0xe69
    1950:	6f5f7265 	svcvs	0x005f7265
	b->attributes = s->attpattern;
    1954:	00667475 	rsbeq	r7, r6, r5, ror r4
		b->attributes.b.urgent = 1;
    1958:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 18a4 <tcv_plug+0x4>
    195c:	616d2f65 	cmnvs	sp, r5, ror #30
	b->u.pointers.head = ptrs.head;
    1960:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
	b->u.pointers.tail = length;
    1964:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	return (address) (b + 1);
    1968:	706f746b 	rsbvc	r7, pc, fp, ror #8
    196c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1970:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1974:	4349502f 	movtmi	r5, #36911	; 0x902f
    1978:	502f534f 	eorpl	r5, pc, pc, asr #6
    197c:	534f6369 	movtpl	r6, #62313	; 0xf369
__PUBLF (PicOSNode, int, tcvp_control) (int phy, int opt, address arg) {
    1980:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1984:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1988:	61697265 	cmnvs	r9, r5, ror #4
	verify_fph (phy, "tcv23");
    198c:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    1990:	756f5f72 	strbvc	r5, [pc, #-3954]!	; a26 <GPIOIntHandler+0x42>
    1994:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    1998:	6f682f00 	svcvs	0x00682f00
}
    199c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 17f0 <tcv_open+0x10>
	return (physical [phy]) (opt, arg);
    19a0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    19a4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    19a8:	6f746b73 	svcvs	0x00746b73
__PUBLF (PicOSNode, int, tcv_control) (int fd, int opt, address arg) {
    19ac:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	if (opt < 0) {
    19b0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		if (fd < 0)
    19b4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (opt == PHYSOPT_PLUGINFO) {
    19b8:	2f534f43 	svccs	0x00534f43
			if (fd >= TCV_MAX_PLUGS)
    19bc:	4f636950 	svcmi	0x00636950
			if ((p = plugins [fd]) == NULL)
    19c0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    19c4:	2f736269 	svccs	0x00736269
}
    19c8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
		if (fd >= TCV_MAX_PHYS)
    19cc:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
		return physinfo [fd];
    19d0:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    19d4:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
	verify_fds (fd, "tcv22");
    19d8:	72657300 	rsbvc	r7, r5, #0, 6
    19dc:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    19e0:	73736900 	cmnvc	r3, #0, 18
    19e4:	635f6575 	cmpvs	pc, #490733568	; 0x1d400000
    19e8:	6d00646d 	cfstrsvs	mvf6, [r0, #-436]	; 0xfffffe4c
}
    19ec:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
	return tcvp_control (descriptors [fd] -> attpattern.b.phys, opt, arg);
    19f0:	6f697461 	svcvs	0x00697461
    19f4:	6f63006e 	svcvs	0x0063006e
			return 0;
    19f8:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
    19fc:	006f4e64 	rsbeq	r4, pc, r4, ror #28
    1a00:	70704162 	rsbsvc	r4, r0, r2, ror #2
    1a04:	53646e65 	cmnpl	r4, #1616	; 0x650
    1a08:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
__PUBLF (PicOSNode, address, tcvp_new) (int size, int dsp, int ses) {
    1a0c:	66720073 			; <UNDEFINED> instruction: 0x66720073
    1a10:	006e6f5f 	rsbeq	r6, lr, pc, asr pc
	if (dsp != TCV_DSP_PASS) {
    1a14:	72546672 	subsvc	r6, r4, #119537664	; 0x7200000
		if (ses == NONE)
    1a18:	62006d69 	andvs	r6, r0, #6720	; 0x1a40
			syserror (EREQPAR, "tcv26");
    1a1c:	4c726156 	ldfmie	f6, [r2], #-344	; 0xfffffea8
		verify_fds (ses, "tcv27");
    1a20:	70006e65 	andvc	r6, r0, r5, ror #28
    1a24:	00746b50 	rsbseq	r6, r4, r0, asr fp
    1a28:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
    1a2c:	72467265 	subvc	r7, r6, #1342177286	; 0x50000006
    1a30:	63007165 	movwvs	r7, #357	; 0x165
		if ((p = apb (size)) != NULL) {
    1a34:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a38:	65727567 	ldrbvs	r7, [r2, #-1383]!	; 0xfffffa99
		return NULL;
    1a3c:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
			p->attributes = descriptors [ses] -> attpattern;
    1a40:	61506b73 	cmpvs	r0, r3, ror fp
			dispose (p, dsp);
    1a44:	00686374 	rsbeq	r6, r8, r4, ror r3
			p->attributes = descriptors [ses] -> attpattern;
    1a48:	74696877 	strbtvc	r6, [r9], #-2167	; 0xfffff789
			p->attributes.b.outgoing = 0;
    1a4c:	6f4d6e65 	svcvs	0x004d6e65
			dispose (p, dsp);
    1a50:	72006564 	andvc	r6, r0, #100, 10	; 0x19000000
			return (address)(p + 1);
    1a54:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1a58:	505f444d 	subspl	r4, pc, sp, asr #8
	if ((p = apb (size)) != NULL)
    1a5c:	5f504f52 	svcpl	0x00504f52
    1a60:	735f5343 	cmpvc	pc, #201326593	; 0xc000001
		return (address)(p + 1);
    1a64:	73617000 	cmnvc	r1, #0
    1a68:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1a6c:	66720067 	ldrbtvs	r0, [r2], -r7, rrx
    1a70:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a74:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
__PUBLF (PicOSNode, int, tcvphy_reg) (int phy, ctrlfun_t ps, int info) {
    1a78:	66667562 	strbtvs	r7, [r6], -r2, ror #10
	if (phy < 0 || phy >= TCV_MAX_PHYS || physical [phy] != NULL)
    1a7c:	5244006c 	subpl	r0, r4, #108	; 0x6c
    1a80:	4f4f4c5f 	svcmi	0x004f4c5f
		syserror (EREQPAR, "tcv28");
    1a84:	005f5f50 	subseq	r5, pc, r0, asr pc	; <UNPREDICTABLE>
		syserror (EMALLOC, "tcv29");
    1a88:	74754f70 	ldrbtvc	r4, [r5], #-3952	; 0xfffff090
	physical [phy] = ps;
    1a8c:	00747570 	rsbseq	r7, r4, r0, ror r5
	physinfo [phy] = info;
    1a90:	70655262 	rsbvc	r5, r5, r2, ror #4
    1a94:	4f746165 	svcmi	0x00746165
	oqueues [phy] = q = (qhead_t*) q_malloc (sizeof (qhead_t));
    1a98:	526e006b 	rsbpl	r0, lr, #107	; 0x6b
    1a9c:	6e674978 			; <UNDEFINED> instruction: 0x6e674978
    1aa0:	6465726f 	strbtvs	r7, [r5], #-623	; 0xfffffd91
		syserror (EMALLOC, "tcv29");
    1aa4:	63656600 	cmnvs	r5, #0, 12
    1aa8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
	q_init (q);
    1aac:	78526e00 	ldmdavc	r2, {r9, sl, fp, sp, lr}^
}
    1ab0:	006b6f4e 	rsbeq	r6, fp, lr, asr #30
    1ab4:	6466666f 	strbtvs	r6, [r6], #-1647	; 0xfffff991
    1ab8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    1abc:	65727000 	ldrbvs	r7, [r2, #-0]!
    1ac0:	6f4d6d61 	svcvs	0x004d6d61
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1ac4:	70006564 	andvc	r6, r0, r4, ror #10
	verify_fph (phy, "tcv30");
    1ac8:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
__PUBLF (PicOSNode, int, tcvphy_rcv) (int phy, address p, int len) {
    1acc:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    1ad0:	72690079 	rsbvc	r0, r9, #121	; 0x79
	verify_fph (phy, "tcv30");
    1ad4:	746e4971 	strbtvc	r4, [lr], #-2417	; 0xfffff68f
    1ad8:	61770076 	cmnvs	r7, r6, ror r0
    1adc:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1ae0:	6600646d 	strvs	r6, [r0], -sp, ror #8
    1ae4:	616d726f 	cmnvs	sp, pc, ror #4
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1ae8:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    1aec:	74730066 	ldrbtvc	r0, [r3], #-102	; 0xffffff9a
		if (plugins [plg] == NULL)
    1af0:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    1af4:	00656d69 	rsbeq	r6, r5, r9, ror #26
	for (plg = TCV_MAX_PLUGS-1; plg >= 0; plg--) {
    1af8:	70704162 	rsbsvc	r4, r0, r2, ror #2
}
    1afc:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
    1b00:	73656d69 	cmnvc	r5, #6720	; 0x1a40
		sysassert (plugins [plg] -> tcv_rcv != NULL, "tcv31");
    1b04:	706d6174 	rsbvc	r6, sp, r4, ror r1
    1b08:	654e7000 	strbvs	r7, [lr, #-0]
    1b0c:	6e457478 	mcrvs	4, 2, r7, cr5, cr8, {3}
		if ((dsp = plugins [plg] -> tcv_rcv (phy, p, len, &ses, &ap)) !=
    1b10:	00797274 	rsbseq	r7, r9, r4, ror r2
    1b14:	635f4652 	cmpvs	pc, #85983232	; 0x5200000
    1b18:	7250646d 	subsvc	r6, r0, #1828716544	; 0x6d000000
    1b1c:	6152706f 	cmpvs	r2, pc, rrx
    1b20:	446f6964 	strbtmi	r6, [pc], #-2404	; 1b28 <tcvphy_rcv+0x64>
	if (dsp == TCV_DSP_PASS || dsp == TCV_DSP_DROP) {
    1b24:	65537669 	ldrbvs	r7, [r3, #-1641]	; 0xfffff997
	len -= (ap.head + ap.tail);
    1b28:	00707574 	rsbseq	r7, r0, r4, ror r5
    1b2c:	65766571 	ldrbvs	r6, [r6, #-1393]!	; 0xfffffa8f
    1b30:	7000746e 	andvc	r7, r0, lr, ror #8
	if ((c = tcvp_new (len, dsp, ses)) == NULL)
    1b34:	6f43746b 	svcvs	0x0043746b
    1b38:	7000666e 	andvc	r6, r0, lr, ror #12
    1b3c:	5f737968 	svcpl	0x00737968
	memcpy ((char*)c, ((char*)p) + ap.head, len);
    1b40:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    1b44:	63003035 	movwvs	r3, #53	; 0x35
    1b48:	35333163 	ldrcc	r3, [r3, #-355]!	; 0xfffffe9d
	return 1;
    1b4c:	72645f30 	rsbvc	r5, r4, #48, 30	; 0xc0
    1b50:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1b54:	63667200 	cmnvs	r6, #0, 4
    1b58:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    1b5c:	5f53465f 	svcpl	0x0053465f
	verify_fph (phy, "tcv32");
    1b60:	66720073 			; <UNDEFINED> instruction: 0x66720073
    1b64:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1b68:	53465f44 	movtpl	r5, #28484	; 0x6f44
    1b6c:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    1b70:	776f5078 			; <UNDEFINED> instruction: 0x776f5078
    1b74:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
	oq = oqueues [phy];
    1b78:	00774278 	rsbseq	r4, r7, r8, ror r2
	b = q_first (oq);
    1b7c:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
	if (q_end (b, oq)) {
    1b80:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
	*len = b->length;
    1b84:	506b7366 	rsbpl	r7, fp, r6, ror #6
	deq (b);	// Dequeue the packet ...
    1b88:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
}
    1b8c:	61686300 	cmnvs	r8, r0, lsl #6
		return NULL;
    1b90:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
    1b94:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
    1b98:	6f436874 	svcvs	0x00436874
    1b9c:	6200666e 	andvs	r6, r0, #115343360	; 0x6e00000
	verify_fph (phy, "tcv33");
    1ba0:	6f747541 	svcvs	0x00747541
    1ba4:	73756c46 	cmnvc	r5, #17920	; 0x4600
    1ba8:	63724368 	cmnvs	r2, #104, 6	; 0xa0000001
    1bac:	00727245 	rsbseq	r7, r2, r5, asr #4
    1bb0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    1bb4:	66526769 	ldrbvs	r6, [r2], -r9, ror #14
	oq = oqueues [phy];
    1bb8:	6e6f7246 	cdpvs	2, 6, cr7, cr15, cr6, {2}
	b = q_first (oq);
    1bbc:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
		return NULL;
    1bc0:	78546200 	ldmdavc	r4, {r9, sp, lr}^
	return (address)(b + 1);
    1bc4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
}
    1bc8:	616e6100 	cmnvs	lr, r0, lsl #2
    1bcc:	43676f6c 	cmnmi	r7, #108, 30	; 0x1b0
    1bd0:	6f4d6766 	svcvs	0x004d6766
__PUBLF (PicOSNode, void, tcvphy_end) (address pkt) {
    1bd4:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
	verify_plg (b, tcv_xmt, "tcv34");
    1bd8:	43616e45 	cmnmi	r1, #1104	; 0x450
	hblock_t *b = header (pkt);
    1bdc:	6e00646d 	cdpvs	4, 0, cr6, cr0, cr13, {3}
	verify_plg (b, tcv_xmt, "tcv34");
    1be0:	6f436d75 	svcvs	0x00436d75
    1be4:	6e497272 	mcrvs	2, 2, r7, cr9, cr2, {3}
    1be8:	49700076 	ldmdbmi	r0!, {r1, r2, r4, r5, r6}^
    1bec:	61507172 	cmpvs	r0, r2, ror r1
    1bf0:	00686374 	rsbeq	r6, r8, r4, ror r3
    1bf4:	74615070 	strbtvc	r5, [r1], #-112	; 0xffffff90
    1bf8:	65566863 	ldrbvs	r6, [r6, #-2147]	; 0xfffff79d
	dispose (b, plugins [b->attributes.b.plugin] ->
    1bfc:	46520063 	ldrbmi	r0, [r2], -r3, rrx
}
    1c00:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
	dispose (b, plugins [b->attributes.b.plugin] ->
    1c04:	44746e49 	ldrbtmi	r6, [r4], #-3657	; 0xfffff1b7
    1c08:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1c0c:	6d00656c 	cfstr32vs	mvfx6, [r0, #-432]	; 0xfffffe50
}
    1c10:	6b507861 	blvs	141fd9c <__ccfg+0x13ffdf4>
    while(1)
    1c14:	6e654c74 	mcrvs	12, 3, r4, cr5, cr4, {3}
{
    1c18:	726f6300 	rsbvc	r6, pc, #0, 6
    SetupTrimDevice();
    1c1c:	6e6f4372 	mcrvs	3, 3, r4, cr15, cr2, {3}
    pui32Src = &_etext;
    1c20:	00676966 	rsbeq	r6, r7, r6, ror #18
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1c24:	30746172 	rsbscc	r6, r4, r2, ror r1
    __asm("    ldr     r0, =_bss\n"
    1c28:	61696200 	cmnvs	r9, r0, lsl #4
    1c2c:	646f4d73 	strbtvs	r4, [pc], #-3443	; 1c34 <zero_loop+0x4>
    1c30:	46520065 	ldrbmi	r0, [r2], -r5, rrx
    1c34:	65704343 	ldrbvs	r4, [r0, #-835]!	; 0xfffffcbd
    1c38:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
   main();
    1c3c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    FaultISR();
    1c40:	6200656c 	andvs	r6, r0, #108, 10	; 0x1b000000
        *pui32Dest++ = *pui32Src++;
    1c44:	6c636e49 	stclvs	14, cr6, [r3], #-292	; 0xfffffedc
    1c48:	43656475 	cmnmi	r5, #1962934272	; 0x75000000
    1c4c:	63006372 	movwvs	r6, #882	; 0x372
    1c50:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1c54:	41664967 	cmnmi	r6, r7, ror #18
    1c58:	72006364 	andvc	r6, r0, #100, 6	; 0x90000001
    1c5c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1c60:	505f444d 	subspl	r4, pc, sp, asr #8
static byte get_byte () {
    1c64:	5f504f52 	svcpl	0x00504f52
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c68:	735f5852 	cmpvc	pc, #5373952	; 0x520000
    1c6c:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1c70:	67697254 			; <UNDEFINED> instruction: 0x67697254
    1c74:	00726567 	rsbseq	r6, r2, r7, ror #10
		if (ee_inp)
    1c78:	5f636672 	svcpl	0x00636672
			b |= 1;
    1c7c:	5f444d43 	svcpl	0x00444d43
    1c80:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1c84:	5f53435f 	svcpl	0x0053435f
	for (b = 0, i = 0; i < 8; i++) {
    1c88:	72660074 	rsbvc	r0, r6, #116	; 0x74
}
    1c8c:	45746e6f 	ldrbmi	r6, [r4, #-3695]!	; 0xfffff191
    1c90:	6f4d646e 	svcvs	0x004d646e
    1c94:	74006564 	strvc	r6, [r0], #-1380	; 0xfffffa9c
static void put_byte (byte b) {
    1c98:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1c9c:	6f4e7265 	svcvs	0x004e7265
    1ca0:	75517000 	ldrbvc	r7, [r1, #-0]
    1ca4:	00657565 	rsbeq	r7, r5, r5, ror #10
		if (b & 0x80)
    1ca8:	54646e65 	strbtpl	r6, [r4], #-3685	; 0xfffff19b
    1cac:	00657079 	rsbeq	r7, r5, r9, ror r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1cb0:	5f646d63 	svcpl	0x00646d63
	for (i = 0; i < 8; i++) {
    1cb4:	72007363 	andvc	r7, r0, #-1946157055	; 0x8c000001
		b <<= 1;
    1cb8:	54697373 	strbtpl	r7, [r9], #-883	; 0xfffffc8d
	for (i = 0; i < 8; i++) {
    1cbc:	6e007268 	cdpvs	2, 0, cr7, cr0, cr8, {3}
}
    1cc0:	6f436d75 	svcvs	0x00436d75
    1cc4:	75427272 	strbvc	r7, [r2, #-626]	; 0xfffffd8e
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    1cc8:	52007973 	andpl	r7, r0, #1884160	; 0x1cc000
    1ccc:	006c6156 	rsbeq	r6, ip, r6, asr r1
	put_byte (cmd);
    1cd0:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
    1cd4:	6f697469 	svcvs	0x00697469
}
    1cd8:	4962006e 	stmdbmi	r2!, {r1, r2, r3, r5, r6}^
    1cdc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
static void wwait (word st, word del) {
    1ce0:	64486564 	strbvs	r6, [r8], #-1380	; 0xfffffa9c
    1ce4:	616c0072 	smcvs	49154	; 0xc002
    1ce8:	73527473 	cmpvc	r2, #1929379840	; 0x73000000
	while (dopen && (rdsr () & 1)) {
    1cec:	6d006973 	vstrvs.16	s12, [r0, #-230]	; 0xffffff1a	; <UNPREDICTABLE>
    1cf0:	7954646f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
    1cf4:	70006570 	andvc	r6, r0, r0, ror r5
    1cf8:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
	put_byte (CMD_RDSR);
    1cfc:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
	r = get_byte ();
    1d00:	526e0079 	rsbpl	r0, lr, #121	; 0x79
    1d04:	66754278 			; <UNDEFINED> instruction: 0x66754278
	while (dopen && (rdsr () & 1)) {
    1d08:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
}
    1d0c:	5f787200 	svcpl	0x00787200
		if (st == WNONE)
    1d10:	75006361 	strvc	r6, [r0, #-865]	; 0xfffffc9f
    1d14:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
			mdelay (1);
    1d18:	006b7361 	rsbeq	r7, fp, r1, ror #6
    1d1c:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
			delay (del, st);
    1d20:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
    1d24:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
			release;
    1d28:	69426200 	stmdbvs	r2, {r9, sp, lr}^
    1d2c:	76655274 			; <UNDEFINED> instruction: 0x76655274
    1d30:	61737265 	cmnvs	r3, r5, ror #4
static void ready () {
    1d34:	5f5f006c 	svcpl	0x005f006c
	if (dopen) {
    1d38:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
		wwait (WNONE, 1);
    1d3c:	73003079 	movwvc	r3, #121	; 0x79
    1d40:	6f626d79 	svcvs	0x00626d79
    1d44:	7461526c 	strbtvc	r5, [r1], #-620	; 0xfffffd94
	dstat = 0;
    1d48:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
}
    1d4c:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    1d50:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1d54:	4e700073 	mrcmi	0, 3, r0, cr0, cr3, {3}
	udelay (1);
    1d58:	4f747865 	svcmi	0x00747865
    1d5c:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
	udelay (1);
    1d60:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
		dopen = DOPEN_TEMP;
    1d64:	41620071 	smcmi	8193	; 0x2001
    1d68:	466f7475 			; <UNDEFINED> instruction: 0x466f7475
    1d6c:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    1d70:	6f6e6749 	svcvs	0x006e6749
static void cclose () {
    1d74:	00646572 	rsbeq	r6, r4, r2, ror r5
	if (dopen == DOPEN_TEMP) {
    1d78:	5f636672 	svcpl	0x00636672
    1d7c:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
		wwait (WNONE, 1);
    1d80:	5f704f6f 	svcpl	0x00704f6f
    1d84:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
	cmd_0 (CMD_DP);
    1d88:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    1d8c:	67676972 			; <UNDEFINED> instruction: 0x67676972
		dopen = 0;
    1d90:	70007265 	andvc	r7, r0, r5, ror #4
}
    1d94:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
word ee_open () {
    1d98:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
	ready ();
    1d9c:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
	dopen = DOPEN_PERM;
    1da0:	006b7366 	rsbeq	r7, fp, r6, ror #6
    1da4:	6f5f6672 	svcvs	0x005f6672
}
    1da8:	62006666 	andvs	r6, r0, #106954752	; 0x6600000
	if (dopen) {
    1dac:	43616e45 	cmnmi	r1, #1104	; 0x450
    1db0:	0072726f 	rsbseq	r7, r2, pc, ror #4
		dopen = DOPEN_TEMP;
    1db4:	4f734662 	svcmi	0x00734662
		cclose ();
    1db8:	64496666 	strbvs	r6, [r9], #-1638	; 0xfffff99a
}
    1dbc:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
int ser_in (word st, char *buf, int len) {
    1dc0:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    1dc4:	00734664 	rsbseq	r4, r3, r4, ror #12
	if (len == 0)
    1dc8:	61657270 	smcvs	22304	; 0x5720
	if (__inpline == NULL) {
    1dcc:	6e6f436d 	cdpvs	3, 6, cr4, cr15, cr13, {3}
		if ((prcs = running (__inserial)) == 0) {
    1dd0:	79730066 	ldmdbvc	r3!, {r1, r2, r5, r6}^
    1dd4:	6f57636e 	svcvs	0x0057636e
			prcs = runthread (__inserial);
    1dd8:	6f006472 	svcvs	0x00006472
    1ddc:	6f697470 	svcvs	0x00697470
			if (prcs == 0) {
    1de0:	6170006e 	cmnvs	r0, lr, rrx
				npwait (st);
    1de4:	47686374 			; <UNDEFINED> instruction: 0x47686374
		release;
    1de8:	73666e65 	cmnvc	r6, #1616	; 0x650
		join (prcs, st);
    1dec:	6566526b 	strbvs	r5, [r6, #-619]!	; 0xfffffd95
    1df0:	6f682f00 	svcvs	0x00682f00
	if (*__inpline == NULL) // bin cmd
    1df4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1c48 <zero_loop+0x18>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    1df8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	if (prcs >= len)
    1dfc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
		prcs = len-1;
    1e00:	6f746b73 	svcvs	0x00746b73
	memcpy (buf, __inpline, prcs);
    1e04:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1e08:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1e0c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	ufree (__inpline);
    1e10:	2f534f43 	svccs	0x00534f43
	__inpline = NULL;
    1e14:	4f636950 	svcmi	0x00636950
	if (*buf) // if it's NULL, it's a bin cmd
    1e18:	43432f53 	movtmi	r2, #16211	; 0x3f53
		buf [prcs] = '\0';
    1e1c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
}
    1e20:	7066722f 	rsbvc	r7, r6, pc, lsr #4
		prcs = strlen (__inpline);
    1e24:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    1e28:	73630063 	cmnvc	r3, #99	; 0x63
		return 0;
    1e2c:	54646e45 	strbtpl	r6, [r4], #-3653	; 0xfffff1bb
    1e30:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1e34:	61746172 	cmnvs	r4, r2, ror r1
int ser_outf (word st, const char *m, ...) {
    1e38:	5f656c62 	svcpl	0x00656c62
    1e3c:	6f630074 	svcvs	0x00630074
	if ((prcs = running (__outserial)) != 0) {
    1e40:	65507272 	ldrbvs	r7, [r0, #-626]	; 0xfffffd8e
    1e44:	646f6972 	strbtvs	r6, [pc], #-2418	; 1e4c <ser_outf+0x14>
		join (prcs, st);
    1e48:	756c7000 	strbvc	r7, [ip, #-0]!
    1e4c:	00747267 	rsbseq	r7, r4, r7, ror #4
		release;
    1e50:	43434652 	movtmi	r4, #13906	; 0x3652
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1e54:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    1e58:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
    1e5c:	70007261 	andvc	r7, r0, r1, ror #4
		umwait (st);
    1e60:	6367756c 	cmnvs	r7, #108, 10	; 0x1b000000
    1e64:	61720068 	cmnvs	r2, r8, rrx
	if (runstrand (__outserial, buf) == 0) {
    1e68:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    1e6c:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
    1e70:	756f656d 	strbvc	r6, [pc, #-1389]!	; 190b <tcv_wnps+0x47>
		ufree (buf);
    1e74:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
		npwait (st);
    1e78:	61726600 	cmnvs	r2, r0, lsl #12
}
    1e7c:	72467463 	subvc	r7, r6, #1660944384	; 0x63000000
    1e80:	70007165 	andvc	r7, r0, r5, ror #2
    1e84:	63536572 	cmpvs	r3, #478150656	; 0x1c800000
    1e88:	00656c61 	rsbeq	r6, r5, r1, ror #24
int ser_inf (word st, const char *fmt, ...) {
    1e8c:	4277536e 	rsbsmi	r5, r7, #-1207959551	; 0xb8000001
    1e90:	00737469 	rsbseq	r7, r3, r9, ror #8
	if (fmt == NULL)
    1e94:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
	if (__inpline == NULL) {
    1e98:	6c00704f 	stcvs	0, cr7, [r0], {79}	; 0x4f
		if ((prcs = running (__inserial)) == 0) {
    1e9c:	7669446f 	strbtvc	r4, [r9], -pc, ror #8
    1ea0:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
			prcs = runthread (__inserial);
    1ea4:	61747300 	cmnvs	r4, r0, lsl #6
    1ea8:	00646974 	rsbeq	r6, r4, r4, ror r9
			if (prcs == 0) {
    1eac:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
				npwait (st);
    1eb0:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
		release;
    1eb4:	6570635f 	ldrbvs	r6, [r0, #-863]!	; 0xfffffca1
		join (prcs, st);
    1eb8:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    1ebc:	006b7366 	rsbeq	r7, fp, r6, ror #6
	va_start (ap, fmt);
    1ec0:	6f437872 	svcvs	0x00437872
	prcs = vscan (__inpline, fmt, ap);
    1ec4:	6200666e 	andvs	r6, r0, #115343360	; 0x6e00000
    1ec8:	73466f4e 	movtvc	r6, #28494	; 0x6f4e
	ufree (__inpline);
    1ecc:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
	__inpline = NULL;
    1ed0:	00705572 	rsbseq	r5, r0, r2, ror r5
}
    1ed4:	7645524f 	strbvc	r5, [r5], -pc, asr #4
    1ed8:	6200746e 	andvs	r7, r0, #1845493760	; 0x6e000000
    1edc:	664f7346 	strbvs	r7, [pc], -r6, asr #6
		return 0;
    1ee0:	73754266 	cmnvc	r5, #1610612742	; 0x60000006
    1ee4:	72760079 	rsbsvc	r0, r6, #121	; 0x79
    1ee8:	00657461 	rsbeq	r7, r5, r1, ror #8
		RF_cmdPropRadioDivSetup.centerFreq = CC1350_BASEFREQ + channel;
    1eec:	72747874 	rsbsvc	r7, r4, #116, 16	; 0x740000
    1ef0:	00736569 	rsbseq	r6, r3, r9, ror #10
    1ef4:	62734d62 	rsbsvs	r4, r3, #6272	; 0x1880
	RF_cmdFs.frequency = 
    1ef8:	73726946 	cmnvc	r2, #1146880	; 0x118000
}
    1efc:	78720074 	ldmdavc	r2!, {r2, r4, r5, r6}^
    1f00:	0065645f 	rsbeq	r6, r5, pc, asr r4
    1f04:	695f7872 	ldmdbvs	pc, {r1, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    1f08:	655f746e 	ldrbvs	r7, [pc, #-1134]	; 1aa2 <tcvphy_reg+0x2e>
static int option (int opt, address val) {
    1f0c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1f10:	64610065 	strbtvs	r0, [r1], #-101	; 0xffffff9b
    1f14:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1f18:	61003073 	tstvs	r0, r3, ror r0
    1f1c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1f20:	00317373 	eorseq	r7, r1, r3, ror r3
    1f24:	5f636672 	svcpl	0x00636672
    1f28:	5f444d43 	svcpl	0x00444d43
    1f2c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1f30:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    1f34:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 1f3c <option+0x30>
			ret = 2 | ((dstate & DSTATE_RXON) != 0);
    1f38:	535f5649 	cmppl	pc, #76546048	; 0x4900000
    1f3c:	50555445 	subspl	r5, r5, r5, asr #8
			goto RVal;
    1f40:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
			_BIS (dstate, DSTATE_RXON);
    1f44:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1f48:	505f444d 	subspl	r4, pc, sp, asr #8
	int ret = 0;
    1f4c:	5f504f52 	svcpl	0x00504f52
			p_trigger (drvprcs, qevent);
    1f50:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    1f54:	49445f4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1f58:	45535f56 	ldrbmi	r5, [r3, #-3926]	; 0xfffff0aa
    1f5c:	5f505554 	svcpl	0x00505554
    1f60:	66720074 			; <UNDEFINED> instruction: 0x66720074
    1f64:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1f68:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1f6c:	525f504f 	subspl	r5, pc, #79	; 0x4f
    1f70:	00745f58 	rsbseq	r5, r4, r8, asr pc
    1f74:	61746170 	cmnvs	r4, r0, ror r1
}
    1f78:	00656c62 	rsbeq	r6, r5, r2, ror #24
			_BIC (dstate, DSTATE_RXON);
    1f7c:	5378526e 	cmnpl	r8, #-536870906	; 0xe0000006
    1f80:	70706f74 	rsbsvc	r6, r0, r4, ror pc
			statid = (val == NULL) ? 0 : *val;
    1f84:	6e006465 	cdpvs	4, 0, cr6, cr0, cr5, {3}
    1f88:	73526d75 	cmpvc	r2, #7488	; 0x1d40
	int ret = 0;
    1f8c:	64496973 	strbvs	r6, [r9], #-2419	; 0xfffff68d
			ret = (int) statid;
    1f90:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
	if (val != NULL)
    1f94:	57657461 	strbpl	r7, [r5, -r1, ror #8]!
		*val = ret;
    1f98:	0064726f 	rsbeq	r7, r4, pc, ror #4
			ret = rbuffl + 2;
    1f9c:	74737872 	ldrbtvc	r7, [r3], #-2162	; 0xfffff78e
    1fa0:	70007461 	andvc	r7, r0, r1, ror #8
			if (val != NULL) {
    1fa4:	4f676552 	svcmi	0x00676552
				memcpy (val, &rxstat,
    1fa8:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    1fac:	00656469 	rsbeq	r6, r5, r9, ror #8
				memset (&rxstat, 0, 
    1fb0:	6d746172 	ldfvse	f6, [r4, #-456]!	; 0xfffffe38
    1fb4:	00745f72 	rsbseq	r5, r4, r2, ror pc
			if (val == NULL)
    1fb8:	70704162 	rsbsvc	r4, r0, r2, ror #2
				gbackoff (RADIO_LBT_BACKOFF_EXP);
    1fbc:	52646e65 	rsbpl	r6, r4, #1616	; 0x650
    1fc0:	00697373 	rsbeq	r7, r9, r3, ror r3
				utimer_set (bckf_timer, *val);
    1fc4:	5f636672 	svcpl	0x00636672
    1fc8:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    1fcc:	754f7852 	strbvc	r7, [pc, #-2130]	; 1782 <tcv_endp+0x12>
			for (ret = 0; ret < 8; ret++)
    1fd0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
				if (RF_cmdPropRadioDivSetup.txPower
    1fd4:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
					== patable [ret])
    1fd8:	705f6366 	subsvc	r6, pc, r6, ror #6
				if (RF_cmdPropRadioDivSetup.txPower
    1fdc:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
			for (ret = 0; ret < 8; ret++)
    1fe0:	74754f78 	ldrbtvc	r4, [r5], #-3960	; 0xfffff088
    1fe4:	5f747570 	svcpl	0x00747570
			ret = (val == NULL) ? RADIO_DEFAULT_POWER :
    1fe8:	46520074 			; <UNDEFINED> instruction: 0x46520074
    1fec:	6f6c4343 	svcvs	0x006c4343
    1ff0:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
			RF_cmdPropRadioDivSetup.txPower = patable [ret];
    1ff4:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1ff8:	6f630065 	svcvs	0x00630065
			_BIS (dstate, DSTATE_IRST);
    1ffc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    2000:	746e7953 	strbtvc	r7, [lr], #-2387	; 0xfffff6ad
    2004:	78740068 	ldmdavc	r4!, {r3, r5, r6}^
			ret = (int) channel;
    2008:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
			goto RVal;
    200c:	00726574 	rsbseq	r6, r2, r4, ror r5
				(*val > 7) ? 7 : *val;
    2010:	536e656c 	cmnpl	lr, #108, 10	; 0x1b000000
    2014:	6672007a 			; <UNDEFINED> instruction: 0x6672007a
			channel = (val == NULL) ? RADIO_DEFAULT_CHANNEL :
    2018:	61725f63 	cmnvs	r2, r3, ror #30
    201c:	4f6f6964 	svcmi	0x006f6964
			plugch ();
    2020:	00735f70 	rsbseq	r5, r3, r0, ror pc
			_BIS (dstate, DSTATE_IRST);
    2024:	70655262 	rsbvc	r5, r5, r2, ror #4
    2028:	4e746165 	rpwmisz	f6, f4, f5
			ret = (int) vrate;
    202c:	66006b6f 	strvs	r6, [r0], -pc, ror #22
			vrate = (val == NULL) ? RADIO_BITRATE_INDEX :
    2030:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    2034:	00704f72 	rsbseq	r4, r0, r2, ror pc
    2038:	5f636672 	svcpl	0x00636672
    203c:	61746164 	cmnvs	r4, r4, ror #2
    2040:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    2044:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
    2048:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    204c:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
			offdelay = (val == NULL) ? RADIO_DEFAULT_OFFDELAY :
    2050:	645f6366 	ldrbvs	r6, [pc], #-870	; 2058 <option+0x14c>
    2054:	45617461 	strbmi	r7, [r1, #-1121]!	; 0xfffffb9f
    2058:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    205c:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
			syserror (EREQPAR, "cc13 op");
    2060:	5f6c6172 	svcpl	0x006c6172
    2064:	66720074 			; <UNDEFINED> instruction: 0x66720074
    2068:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    206c:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    2070:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    2074:	73666e65 	cmnvc	r6, #1616	; 0x650
    2078:	526e006b 	rsbpl	r0, lr, #107	; 0x6b
    207c:	006b4f78 	rsbeq	r4, fp, r8, ror pc
    2080:	74655252 	strbtvc	r5, [r5], #-594	; 0xfffffdae
    2084:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 208c <option+0x180>
    2088:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    208c:	5f5f0031 	svcpl	0x005f0031
    2090:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    2094:	5f003279 	svcpl	0x00003279
    2098:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
static void issue_cmd (lword cmd) {
    209c:	0033796d 	eorseq	r7, r3, sp, ror #18
    20a0:	6574496e 	ldrbvs	r4, [r4, #-2414]!	; 0xfffff692
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20a4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    20a8:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    20ac:	4c746b70 			; <UNDEFINED> instruction: 0x4c746b70
		if (res != 0x86)
    20b0:	72006e65 	andvc	r6, r0, #1616	; 0x650
			syserror (EHARDWARE, "hang ic0");
    20b4:	00656c75 	rsbeq	r6, r5, r5, ror ip
    20b8:	635f4652 	cmpvs	pc, #85983232	; 0x5200000
		if (cnt-- == 0) {
    20bc:	7250646d 	subsvc	r6, r0, #1828716544	; 0x6d000000
			diag ("HUP %lx %lx", cmd, res);
    20c0:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    20c4:	43465200 	movtmi	r5, #25088	; 0x6200
			syserror (EHARDWARE, "hang ic0");
    20c8:	30455043 	subcc	r5, r5, r3, asr #32
		udelay (1);
    20cc:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
		if ((res = RFCDoorbellSendTo (cmd) & 0xff) == 0x01)
    20d0:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
}
    20d4:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
    20d8:	6f656d69 	svcvs	0x00656d69
    20dc:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    20e0:	72707672 	rsbsvc	r7, r0, #119537664	; 0x7200000
static void rx_de () {
    20e4:	6e007363 	cdpvs	3, 0, cr7, cr0, cr3, {3}
	if ((dstate & DSTATE_RXAC) == 0)
    20e8:	61657250 	cmnvs	r5, r0, asr r2
    20ec:	7479426d 	ldrbtvc	r4, [r9], #-621	; 0xfffffd93
	issue_cmd (CMDR_DIR_CMD (CMD_ABORT));
    20f0:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
	_BIC (dstate, DSTATE_RXAC);
    20f4:	5f666b63 	svcpl	0x00666b63
    20f8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
}
    20fc:	66720072 			; <UNDEFINED> instruction: 0x66720072
    2100:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    2104:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
static void rf_off () {
    2108:	545f504f 	ldrbpl	r5, [pc], #-79	; 2110 <rf_off+0x8>
	if ((dstate & DSTATE_RFON) == 0)
    210c:	00745f58 	rsbseq	r5, r4, r8, asr pc
    2110:	5f636672 	svcpl	0x00636672
	IntDisable (INT_RFC_CPE_0);
    2114:	5f444d43 	svcpl	0x00444d43
    2118:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    211c:	5f58545f 	svcpl	0x0058545f
	RFCAdi3VcoLdoVoltageMode (false);
    2120:	64690073 	strbtvs	r0, [r9], #-115	; 0xffffff8d
	RFCSynthPowerDown ();
    2124:	704f656c 	subvc	r6, pc, ip, ror #10
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) = 0x0;
    2128:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
    212c:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
	__pi_offdomain (PRCM_DOMAIN_RFCORE);
    2130:	70007963 	andvc	r7, r0, r3, ror #18
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    2134:	63746150 	cmnvs	r4, #80, 2
	OSCHF_SwitchToRcOscTurnOffXosc ();
    2138:	62615468 	rsbvs	r5, r1, #104, 8	; 0x68000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    213c:	46736300 	ldrbtmi	r6, [r3], -r0, lsl #6
    2140:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    2144:	6d630066 	stclvs	0, cr0, [r3, #-408]!	; 0xfffffe68
	_BIC (dstate, DSTATE_RFON);
    2148:	72735f64 	rsbsvc	r5, r3, #100, 30	; 0x190
    214c:	46620074 			; <UNDEFINED> instruction: 0x46620074
}
    2150:	66664f73 	uqsub16vs	r4, r6, r3
    2154:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    2158:	4d676966 			; <UNDEFINED> instruction: 0x4d676966
    215c:	41637369 	cmnmi	r3, r9, ror #6
    2160:	65006364 	strvs	r6, [r0, #-868]	; 0xfffffc9c
static void wait_cmd (rfc_radioOp_t *cmd, lword tstat, lword timeout) {
    2164:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2168:	6200656d 	andvs	r6, r0, #457179136	; 0x1b400000
    216c:	416b6843 	cmnmi	fp, r3, asr #16
		if (cmd->status == tstat)
    2170:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
		if (timeout-- == 0) {
    2174:	65007373 	strvs	r7, [r0, #-883]	; 0xfffffc8d
			diag ("HUP %lx %lx %lx", cmd->commandNo,
    2178:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    217c:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
    2180:	70436b73 	subvc	r6, r3, r3, ror fp
			syserror (EHARDWARE, "rt2");
    2184:	74615065 	strbtvc	r5, [r1], #-101	; 0xffffff9b
    2188:	72006863 	andvc	r6, r0, #6488064	; 0x630000
		udelay (1);
    218c:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
		if (cmd->status == tstat)
    2190:	535f444d 	cmppl	pc, #1291845632	; 0x4d000000
}
    2194:	5f434e59 	svcpl	0x00434e59
    2198:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    219c:	41525f54 	cmpmi	r2, r4, asr pc
    21a0:	00735f54 	rsbseq	r5, r3, r4, asr pc
static void rf_on () {
    21a4:	5f636672 	svcpl	0x00636672
    21a8:	5f444d43 	svcpl	0x00444d43
	OSCHF_TurnOnXosc();
    21ac:	434e5953 	movtmi	r5, #59731	; 0xe953
	do { udelay (10); } while (!OSCHF_AttemptToSwitchToXosc ());
    21b0:	4154535f 	cmpmi	r4, pc, asr r3
    21b4:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    21b8:	745f5441 	ldrbvc	r5, [pc], #-1089	; 21c0 <rf_on.part.0+0x24>
    21bc:	79617000 	stmdbvc	r1!, {ip, sp, lr}^
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CTL, AON_RTC_CTL_RTC_UPD_EN_BITN) =
    21c0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    21c4:	526d756e 	rsbpl	r7, sp, #461373440	; 0x1b800000
	__pi_ondomain (PRCM_DOMAIN_RFCORE);
    21c8:	42697373 	rsbmi	r7, r9, #-872415231	; 0xcc000001
    HWREG(RFC_PWR_NONBUF_BASE + RFC_PWR_O_PWMCLKEN) =
    21cc:	00797375 	rsbseq	r7, r9, r5, ror r3
	issue_cmd (
    21d0:	61747374 	cmnvs	r4, r4, ror r3
    21d4:	55620074 	strbpl	r0, [r2, #-116]!	; 0xffffff8c
   memcpy(pPatchVec, patchImageGenfsk, sizeof(patchImageGenfsk));
    21d8:	72436573 	subvc	r6, r3, #482344960	; 0x1cc00000
    21dc:	6e650063 	cdpvs	0, 6, cr0, cr5, cr3, {3}
    21e0:	47726574 			; <UNDEFINED> instruction: 0x47726574
   pPatchTab[80] = 0;
    21e4:	73666e65 	cmnvc	r6, #1616	; 0x650
   } while (--nIterations);
    21e8:	7379536b 	cmnvc	r9, #-1409286143	; 0xac000001
   pPatchTab[53] = 2;
    21ec:	63746150 	cmnvs	r4, #80, 2
    21f0:	65640068 	strbvs	r0, [r4, #-104]!	; 0xffffff98
   pPatchTab[55] = 3;
    21f4:	74616976 	strbtvc	r6, [r1], #-2422	; 0xfffff68a
   pPatchTab[110] = 4;
    21f8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
   pPatchTab[107] = 5;
    21fc:	6f437363 	svcvs	0x00437363
   pPatchTab[65] = 6;
    2200:	6400666e 	strvs	r6, [r0], #-1646	; 0xfffff992
    2204:	51617461 	cmnpl	r1, r1, ror #8
   pPatchTab[57] = 1;
    2208:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
   pIrqPatch[1] = _IRQ_PATCH_0;
    220c:	6e00745f 	cfmvsrvs	mvf0, r7
   const uint32_t *pS = patchGenfskRfe;
    2210:	70696b53 	rsbvc	r6, r9, r3, asr fp
      t2 = *pS++;
    2214:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
      t4 = *pS++;
    2218:	73735261 	cmnvc	r3, #268435462	; 0x10000006
      t6 = *pS++;
    221c:	68700069 	ldmdavs	r0!, {r0, r3, r5, r6}^
      t8 = *pS++;
    2220:	64697379 	strbtvs	r7, [r9], #-889	; 0xfffffc87
      *pD++ = t1;
    2224:	5f465200 	svcpl	0x00465200
      *pD++ = t2;
    2228:	50646d63 	rsbpl	r6, r4, r3, ror #26
      *pD++ = t3;
    222c:	54706f72 	ldrbtpl	r6, [r0], #-3954	; 0xfffff08e
      *pD++ = t5;
    2230:	65720078 	ldrbvs	r0, [r2, #-120]!	; 0xffffff88
      *pD++ = t7;
    2234:	65724666 	ldrbvs	r4, [r2, #-1638]!	; 0xfffff99a
   } while (--nIterations);
    2238:	46520071 			; <UNDEFINED> instruction: 0x46520071
    223c:	6f6c4343 	svcvs	0x006c4343
      *pD++ = t8;
    2240:	6e456b63 	vmlsvs.f64	d22, d5, d19
   } while (--nIterations);
    2244:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
        issue_cmd (CMDR_DIR_CMD_2BYTE (RF_CMD0, 0));
    2248:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
   *pD++ = t2;
    224c:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
   *pD++ = t3;
    2250:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
   *pD++ = t4;
    2254:	4d544b00 	vldrmi	d20, [r4, #-0]
   *pD++ = t5;
    2258:	6c702f50 	ldclvs	15, cr2, [r0], #-320	; 0xfffffec0
    225c:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
	RFCAdi3VcoLdoVoltageMode (true);
    2260:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
    2264:	63740063 	cmnvs	r4, #99	; 0x63
       	RFCRfTrimSet (&rfTrim);
    2268:	756f5f76 	strbvc	r5, [pc, #-3958]!	; 12fa <io+0x7a>
	issue_cmd ((lword)&RF_cmdPropRadioDivSetup);
    226c:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
    2270:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
	wait_cmd ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup, PROP_DONE_OK,
    2274:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
    2278:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
	issue_cmd ((lword)&cmd_srt);
    227c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
    2280:	5f766374 	svcpl	0x00766374
	issue_cmd ((lword)&RF_cmdFs);
    2284:	5f65706f 	svcpl	0x0065706f
	wait_cmd ((rfc_radioOp_t*)&RF_cmdFs, DONE_OK, 10000);
    2288:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    228c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2290:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
	IntEnable (INT_RFC_CPE_0);
    2294:	6c756e5f 	ldclvs	14, cr6, [r5], #-380	; 0xfffffe84
	_BIC (dstate, DSTATE_IRST);
    2298:	6374006c 	cmnvs	r4, #108	; 0x6c
    229c:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
    22a0:	756e5f6f 	strbvc	r5, [lr, #-3951]!	; 0xfffff091
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;
    22a4:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
	HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = 0;
    22a8:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
	IntEnable (INT_RFC_CPE_0);
    22ac:	6e5f746d 	cdpvs	4, 5, cr7, cr15, cr13, {3}
    22b0:	006c6c75 	rsbeq	r6, ip, r5, ror ip
}
    22b4:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
	IntEnable (INT_RFC_CPE_0);
    22b8:	6e007364 	cdpvs	3, 0, cr7, cr0, cr4, {3}
    22bc:	5f637364 	svcpl	0x00637364
    22c0:	6c6c756e 	cfstr64vs	mvdx7, [ip], #-440	; 0xfffffe48
    22c4:	6f682f00 	svcvs	0x00682f00
    22c8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 211c <rf_off+0x14>
    22cc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    22d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    22d4:	6f746b73 	svcvs	0x00746b73
    22d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    22dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    22e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    22e4:	2f534f43 	svccs	0x00534f43
    22e8:	4f636950 	svcmi	0x00636950
    22ec:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    22f0:	2f736269 	svccs	0x00736269
    22f4:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    22f8:	5f2f6c61 	svcpl	0x002f6c61
    22fc:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    2300:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2304:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    2308:	61757100 	cmnvs	r5, r0, lsl #2
    230c:	5f00746e 	svcpl	0x0000746e
    2310:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    2314:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2318:	5f006c61 	svcpl	0x00006c61
static void rx_int_enable () {
    231c:	5f4d4f5f 	svcpl	0x004d4f5f
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) &= ~ui32Mask;
    2320:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
    2324:	5f5f0045 	svcpl	0x005f0045
    2328:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    232c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0x0;
    2330:	6f682f00 	svcvs	0x00682f00
  }while(HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) != 0x0);
    2334:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2188 <wait_cmd.constprop.0+0x24>
    2338:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
  HWREG(RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) |= ui32Mask;
    233c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2340:	6f746b73 	svcvs	0x00746b73
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2344:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2348:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    234c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2350:	2f534f43 	svccs	0x00534f43
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2354:	4f636950 	svcmi	0x00636950
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    2358:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
		if (db->status == DATA_ENTRY_FINISHED) {
    235c:	2f736269 	svccs	0x00736269
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    2360:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2364:	5f2f6c61 	svcpl	0x002f6c61
			nr++;
    2368:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
			if (__dp [0] == __dp [1] + 3 && __dp [1] <= rbuffl &&
    236c:	61697265 	cmnvs	r9, r5, ror #4
    2370:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    2374:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 22c0 <rf_on.part.0+0x124>
    2378:	616d2f65 	cmnvs	sp, r5, ror #30
				__dp [pl + 1] = __dp [pl] - 128;
    237c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				pl = __dp [1] + 2;
    2380:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				__dp [pl + 1] = __dp [pl] - 128;
    2384:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2388:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				__dp [pl] = 0;
    238c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
				tcvphy_rcv (physid, (address)(__dp + 2), pl);
    2390:	4349502f 	movtmi	r5, #36911	; 0x902f
    2394:	502f534f 	eorpl	r5, pc, pc, asr #6
    2398:	534f6369 	movtpl	r6, #62313	; 0xf369
			db->status = DATA_ENTRY_PENDING;
    239c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
	for (db = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = nr = 0;
    23a0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	    i < NRBUFFS; i++, db = (rfc_dataEntryGeneral_t*)(db->pNextEntry)) {
    23a4:	61697265 	cmnvs	r9, r5, ror #4
				diag ("BAD RX");
    23a8:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
    23ac:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
	if (nr) {
    23b0:	67410063 	strbvs	r0, [r1, -r3, rrx]
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23b4:	006e6961 	rsbeq	r6, lr, r1, ror #18
}
    23b8:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
		gbackoff (RADIO_LBT_BACKOFF_RX);
    23bc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    23c0:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    23c4:	73726170 	cmnvc	r2, #112, 2
}
    23c8:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
    23cc:	006d726f 	rsbeq	r7, sp, pc, ror #4
    23d0:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
    23d4:	5f645f79 	svcpl	0x00645f79
    23d8:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    23dc:	6f682f00 	svcvs	0x00682f00
    23e0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2234 <rf_on.part.0+0x98>
    23e4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    23e8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
thread (cc1350_driver)
    23ec:	6f746b73 	svcvs	0x00746b73
    23f0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    23f4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    23f8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    23fc:	2f534f43 	svccs	0x00534f43
		if (dstate & DSTATE_IRST) {
    2400:	4f636950 	svcmi	0x00636950
    2404:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2408:	2f736269 	svccs	0x00736269
			rf_off ();
    240c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
			_BIC (dstate,
    2410:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
    2414:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
		if (dstate & DSTATE_RXAC) {
    2418:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    241c:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
			if ((dstate & DSTATE_RXON) == 0)
    2420:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
				rx_de ();
    2424:	645f7972 	ldrbvs	r7, [pc], #-2418	; 242c <cc1350_driver+0x40>
		if (paylen == 0) {
    2428:	6f776c5f 	svcvs	0x00776c5f
    242c:	2f006472 	svccs	0x00006472
			if ((RF_cmdPropTx.pPkt = (byte*)tcvphy_get (physid,
    2430:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2434:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    2438:	2f6e6974 	svccs	0x006e6974
    243c:	6b736544 	blvs	1cdb954 <__ccfg+0x1cbb9ac>
				sysassert (paylen <= rbuffl && paylen > 0 &&
    2440:	2f706f74 	svccs	0x00706f74
    2444:	4f534c4f 	svcmi	0x00534c4f
    2448:	2f54454e 	svccs	0x0054454e
    244c:	4f434950 	svcmi	0x00434950
    2450:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2454:	2f534f63 	svccs	0x00534f63
    2458:	33314343 	teqcc	r1, #201326593	; 0xc000001
    245c:	732f5858 			; <UNDEFINED> instruction: 0x732f5858
		} else if (dstate & DSTATE_RXON) {
    2460:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	if (dstate & DSTATE_RFON)
    2464:	735f6672 	cmpvc	pc, #119537664	; 0x7200000
	for (re = (rfc_dataEntryGeneral_t*) (rbuffs->pCurrEntry), i = 0;
    2468:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
		re->status = DATA_ENTRY_PENDING;
    246c:	5f73676e 	svcpl	0x0073676e
	    i < NRBUFFS; i++, re = (rfc_dataEntryGeneral_t*)(re->pNextEntry))
    2470:	685f706c 	ldmdavs	pc, {r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
	issue_cmd ((lword)&RF_cmdPropRx);
    2474:	00632e72 	rsbeq	r2, r3, r2, ror lr
	_BIS (dstate, DSTATE_RXAC);
    2478:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    247c:	5f727470 	svcpl	0x00727470
    2480:	4f700074 	svcmi	0x00700074
    2484:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
	if (dstate & DSTATE_RXAC)
    2488:	73656469 	cmnvc	r5, #1761607680	; 0x69000000
    248c:	72496200 	subvc	r6, r9, #0, 4
				if (statid != 0xffff)
    2490:	616e4571 	smcvs	58449	; 0xe451
    2494:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
					((address)(RF_cmdPropTx.pPkt)) [0] =
    2498:	66615300 	strbtvs	r5, [r1], -r0, lsl #6
				RF_cmdPropTx.pktLen = (byte) paylen;
    249c:	70614865 	rsbvc	r4, r1, r5, ror #16
		if (paylen == 0) {
    24a0:	78754169 	ldmdavc	r5!, {r0, r3, r5, r6, r8, lr}^
			wait (qevent, DR_LOOP);
    24a4:	53696441 	cmnpl	r9, #1090519040	; 0x41000000
    24a8:	63656c65 	cmnvs	r5, #25856	; 0x6500
			if (dstate & DSTATE_RXAC) {
    24ac:	50460074 	subpl	r0, r6, r4, ror r0
    24b0:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
				rx_int_enable ();
    24b4:	5f44494f 	svcpl	0x0044494f
			release;
    24b8:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
			} else if (dstate & DSTATE_RFON) {
    24bc:	4e00545f 	cfmvsrmi	mvf0, r5
				delay (offdelay, DR_GOOF);
    24c0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 238c <rx_int_enable+0x70>
    24c4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    24c8:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
		if (bckf_timer) {
    24cc:	4f4e0064 	svcmi	0x004e0064
			wait (qevent, DR_LOOP);
    24d0:	5f4d4f52 	svcpl	0x004d4f52
    24d4:	63555043 	cmpvs	r5, #67	; 0x43
    24d8:	65697370 	strbvs	r7, [r9, #-880]!	; 0xfffffc90
			delay (bckf_timer, DR_LOOP);
    24dc:	66615300 	strbtvs	r5, [r1], -r0, lsl #6
    24e0:	70614865 	rsbvc	r4, r1, r5, ror #16
			if (dstate & DSTATE_RXAC)
    24e4:	696f5669 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    24e8:	2f2e0064 	svccs	0x002e0064
	if (dstate & DSTATE_RFON)
    24ec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    24f0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
		rx_de ();
    24f4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		RF_cmdPropTx . status = 0;
    24f8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
		HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    24fc:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
    2500:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    2504:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
		issue_cmd ((lword)&cmd_cs);
    2508:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
		if (dstate & DSTATE_IRST)
    250c:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    2510:	31303220 	teqcc	r0, r0, lsr #4
    2514:	32353035 	eorscc	r3, r5, #53	; 0x35
		if ((HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    2518:	72282039 	eorvc	r2, r8, #57	; 0x39
    251c:	61656c65 	cmnvs	r5, r5, ror #24
			delay (1, DR_XMIT);
    2520:	20296573 	eorcs	r6, r9, r3, ror r5
		if (RF_cmdPropTx.status != PROP_DONE_OK) {
    2524:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    2528:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
    252c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
			if (txtries >= RADIO_LBT_MAX_TRIES) {
    2530:	5f342d64 	svcpl	0x00342d64
    2534:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
				RF_cmdPropTx . status = 0;
    2538:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
				HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 
    253c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
				issue_cmd ((lword)&RF_cmdPropTx);
    2540:	6f697369 	svcvs	0x00697369
				proceed (DR_XMIT);
    2544:	3232206e 	eorscc	r2, r2, #110	; 0x6e
    2548:	37373937 			; <UNDEFINED> instruction: 0x37373937
			txtries++;
    254c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
			gbackoff (RADIO_LBT_BACKOFF_EXP);
    2550:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    2554:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    2558:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    255c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
		goto DR_LOOP__;
    2560:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
		tcvphy_end ((address)(RF_cmdPropTx.pPkt));
    2564:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
		paylen = 0;
    2568:	734f2d20 	movtvc	r2, #64800	; 0xfd20
		utimer_set (bckf_timer, RADIO_LBT_XMIT_SPACE);
    256c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
		txtries = 0;
    2570:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2574:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
    2578:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
    257c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
    2580:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
    2584:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
		    tcvphy_top (physid) == NULL)
    2588:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
    258c:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
		if (!(dstate & DSTATE_IRST) && (dstate & DSTATE_RXON) == 0 &&
    2590:	6f697463 	svcvs	0x00697463
    2594:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
			rf_off ();
    2598:	6f697463 	svcvs	0x00697463
endthread
    259c:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
    25a0:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
    25a4:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
    25a8:	6f697463 	svcvs	0x00697463
    25ac:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
    25b0:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
    25b4:	74506600 	ldrbvc	r6, [r0], #-1536	; 0xfffffa00
    25b8:	50460072 	subpl	r0, r6, r2, ror r0
    25bc:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
    25c0:	5f44494f 	svcpl	0x0044494f
    25c4:	544e4955 	strbpl	r4, [lr], #-2389	; 0xfffff6ab
    25c8:	00545f38 	subseq	r5, r4, r8, lsr pc
    25cc:	4a5c3a43 	bmi	1710ee0 <__ccfg+0x16f0f38>
    25d0:	696b6e65 	stmdbvs	fp!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    25d4:	6a5c736e 	bvs	171f394 <__ccfg+0x16ff3ec>
    25d8:	5c73626f 	lfmpl	f6, 2, [r3], #-444	; 0xfffffe44
void RFCCPE0IntHandler (void) {
    25dc:	72475746 	subvc	r5, r7, #18350080	; 0x1180000
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    25e0:	2d70756f 	cfldr64cs	mvdx7, [r0, #-444]!	; 0xfffffe44
		_BIS (dstate, DSTATE_IRST);
    25e4:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    25e8:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
    25ec:	6f775c62 	svcvs	0x00775c62
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    25f0:	70736b72 	rsbsvc	r6, r3, r2, ror fp
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    25f4:	5c656361 	stclpl	3, cr6, [r5], #-388	; 0xfffffe7c
    25f8:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
	p_trigger (drvprcs, qevent);
    25fc:	5c73656c 	cfldr64pl	mvdx6, [r3], #-432	; 0xfffffe50
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    2600:	7074756f 	rsbsvc	r7, r4, pc, ror #10
    2604:	635c7475 	cmpvs	ip, #1962934272	; 0x75000000
    2608:	78333163 	ldmdavc	r3!, {r0, r1, r5, r6, r8, ip, sp}
    260c:	68635f78 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2610:	5f325f61 	svcpl	0x00325f61
    2614:	78655f30 	stmdavc	r5!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    2618:	72645c74 	rsbvc	r5, r4, #116, 24	; 0x7400
    261c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2620:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
    2624:	5c6e6962 			; <UNDEFINED> instruction: 0x5c6e6962
	RISE_N_SHINE;
    2628:	00636367 	rsbeq	r6, r3, r7, ror #6
    262c:	53387475 	teqpl	r8, #1962934272	; 0x75000000
    2630:	616e6769 	cmnvs	lr, r9, ror #14
}
    2634:	4f4e006c 	svcmi	0x004e006c
    2638:	5f4d4f52 	svcpl	0x004d4f52
    263c:	424e4f41 	submi	r4, lr, #260	; 0x104
    2640:	6f4d7461 	svcvs	0x004d7461
    2644:	6d65546e 	cfstrdvs	mvd5, [r5, #-440]!	; 0xfffffe48
    2648:	61726570 	cmnvs	r2, r0, ror r5
void phys_cc1350 (int phy, int mbs) {
    264c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
	if (rbuffl != 0)
    2650:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    2654:	00436765 	subeq	r6, r3, r5, ror #14
		syserror (ETOOMANY, "cc13");
    2658:	746c6f76 	strbtvc	r6, [ip], #-3958	; 0xfffff08a
		syserror (EREQPAR, "cc13 mb");
    265c:	53656761 	cmnpl	r5, #25427968	; 0x1840000
	if (mbs == 0)
    2660:	65706f6c 	ldrbvs	r6, [r0, #-3948]!	; 0xfffff094
	if (mbs < 6 || mbs > CC1350_MAXPLEN)
    2664:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
		syserror (EREQPAR, "cc13 mb");
    2668:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    266c:	5f00745f 	svcpl	0x0000745f
	i = 0;
    2670:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
	rbuffl = (byte) mbs;
    2674:	00745f38 	rsbseq	r5, r4, r8, lsr pc
		db->config.type = 0;	// General (data in structure)
    2678:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	rbuffl = (byte) mbs;
    267c:	2f2e2e2f 	svccs	0x002e2e2f
			umalloc (sizeof (rfc_dataEntryGeneral_t) - 1 + rbuffl +
    2680:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2688 <phys_cc1350+0x3c>
    2684:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
		if (db == NULL)
    2688:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
			syserror (EMALLOC, "cc13");
    268c:	6e6f612f 	powvsep	f6, f7, #10.0
    2690:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    2694:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
		db->status = DATA_ENTRY_PENDING;
    2698:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
		if (i)
    269c:	6f43706d 	svcvs	0x0043706d
			da->pNextEntry = (byte*) db;
    26a0:	63657272 	cmnvs	r5, #536870919	; 0x20000007
		db->length = rbuffl + 2;
    26a4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    26a8:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
		db->config.type = 0;	// General (data in structure)
    26ac:	5464656e 	strbtpl	r6, [r4], #-1390	; 0xfffffa92
		db->length = rbuffl + 2;
    26b0:	00706d65 	rsbseq	r6, r0, r5, ror #26
	db->pNextEntry = (byte*) re;
    26b4:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
	rbuffs = (dataQueue_t*) umalloc (sizeof (dataQueue_t));
    26b8:	61566e72 	cmpvs	r6, r2, ror lr
    26bc:	0065756c 	rsbeq	r7, r5, ip, ror #10
	if (rbuffs == NULL)
    26c0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	rbuffs->pCurrEntry = (byte*) re;
    26c4:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
	rbuffs->pLastEntry = NULL;
    26c8:	53746e65 	cmnpl	r4, #1616	; 0x650
    26cc:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26d0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 259c <cc1350_driver+0x1b0>
	RF_cmdPropRx . pktConf . bRepeatOk = 1;
    26d4:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    26d8:	43435452 	movtmi	r5, #13394	; 0x3452
    26dc:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
	rbuffl -= 2;
    26e0:	6f43746e 	svcvs	0x0043746e
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26e4:	7261706d 	rsbvc	r7, r1, #109	; 0x6d
	rbuffl -= 2;
    26e8:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
	physid = phy;
    26ec:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f0:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26f4:	65533233 	ldrbvs	r3, [r3, #-563]	; 0xfffffdcd
	qevent = tcvphy_reg (phy, option, INFO_PHYS_CC1350);
    26f8:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
	diag ("CC1350: %d, %d, %d", RADIO_BITRATE_INDEX, RADIO_DEFAULT_POWER,
    26fc:	52636553 	rsbpl	r6, r3, #348127232	; 0x14c00000
    2700:	00646165 	rsbeq	r6, r4, r5, ror #2
	utimer_add (&bckf_timer);
    2704:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	drvprcs = runthread (cc1350_driver);
    2708:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
    270c:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
    2710:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	if (drvprcs == 0)
    2714:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
		syserror (ERESOURCE, "cc13");
    2718:	7553746e 	ldrbvc	r7, [r3, #-1134]	; 0xfffffb92
    271c:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
	RF_cmdPropRadioDivSetup.txPower = patable [RADIO_DEFAULT_POWER];
    2720:	524f4e00 	subpl	r4, pc, #0, 28
    2724:	415f4d4f 	cmpmi	pc, pc, asr #26
    2728:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    272c:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
	RF_cmdPropRadioDivSetup.symbolRate.rateWord = ratable [vrate - 1] . rw;
    2730:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	RF_cmdPropRadioDivSetup.symbolRate.preScale = ratable [vrate - 1] . ps;
    2734:	69423436 	stmdbvs	r2, {r1, r2, r4, r5, sl, ip, sp}^
    2738:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    273c:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
    2740:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
    2744:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2748:	63745274 	cmnvs	r4, #116, 4	; 0x40000007
    274c:	63657300 	cmnvs	r5, #0, 6
    2750:	53646e41 	cmnpl	r4, #1040	; 0x410
    2754:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
	plugch ();
    2758:	2f2e0063 	svccs	0x002e0063
	HWREG (PRCM_BASE + PRCM_O_RFCMODESEL) =  RF_MODE_PROPRIETARY_SUB_1;
    275c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2760:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
	RFCRTrim ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup);
    2764:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
       	RFCRfTrimRead ((rfc_radioOp_t*)&RF_cmdPropRadioDivSetup,
    2768:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    276c:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
	HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEISL) = 0;
    2770:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
}
    2774:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    2778:	7a697300 	bvc	1a5f380 <__ccfg+0x1a3f3d8>
    277c:	70797465 	rsbsvc	r7, r9, r5, ror #8
    2780:	4f4e0065 	svcmi	0x004e0065
    2784:	5f4d4f52 	svcpl	0x004d4f52
    2788:	62555043 	subsvs	r5, r5, #67	; 0x43
    278c:	70657361 	rsbvc	r7, r5, r1, ror #6
    2790:	65476972 	strbvs	r6, [r7, #-2418]	; 0xfffff68e
    2794:	4f4e0074 	svcmi	0x004e0074
    2798:	5f4d4f52 	svcpl	0x004d4f52
    279c:	64555043 	ldrbvs	r5, [r5], #-67	; 0xffffffbd
    27a0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    27a4:	33697500 	cmncc	r9, #0, 10
    27a8:	74655232 	strbtvc	r5, [r5], #-562	; 0xfffffdce
    27ac:	33697500 	cmncc	r9, #0, 10
    27b0:	756f4332 	strbvc	r4, [pc, #-818]!	; 2486 <cc1350_driver+0x9a>
    27b4:	2e00746e 	cdpcs	4, 0, cr7, cr0, cr14, {3}
    27b8:	2f2e2e2f 	svccs	0x002e2e2f
    27bc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    27c0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    27c4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    27c8:	2f62696c 	svccs	0x0062696c
    27cc:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    27d0:	4f4e0063 	svcmi	0x004e0063
    27d4:	5f4d4f52 	svcpl	0x004d4f52
    27d8:	70555043 	subsvc	r5, r5, r3, asr #32
    27dc:	616d6972 	smcvs	54930	; 0xd692
    27e0:	4e006b73 	vmovmi.16	d0[1], r6
    27e4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 26b0 <phys_cc1350+0x64>
    27e8:	43534f5f 	cmpmi	r3, #380	; 0x17c
    27ec:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    27f0:	756f536b 	strbvc	r5, [pc, #-875]!	; 248d <cc1350_driver+0xa1>
    27f4:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    27f8:	46007465 	strmi	r7, [r0], -r5, ror #8
    27fc:	5f525450 	svcpl	0x00525450
    2800:	54454c46 	strbpl	r4, [r5], #-3142	; 0xfffff3ba
    2804:	52454843 	subpl	r4, r5, #4390912	; 0x430000
    2808:	545f3233 	ldrbpl	r3, [pc], #-563	; 2810 <tcv_out_null>
    280c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2810:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    2814:	41564444 	cmpmi	r6, r4, asr #8
    2818:	00545f4c 	subseq	r5, r4, ip, asr #30
    281c:	4f524f4e 	svcmi	0x00524f4e
    2820:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2824:	6f6c4343 	svcvs	0x006c4343
    2828:	6f536b63 	svcvs	0x00536b63
    282c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2830:	00746547 	rsbseq	r6, r4, r7, asr #10
    2834:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2838:	0063734f 	rsbeq	r7, r3, pc, asr #6
    283c:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2840:	6f437463 	svcvs	0x00437463
    2844:	5242706d 	subpl	r7, r2, #109	; 0x6d
    2848:	46006665 	strmi	r6, [r0], -r5, ror #12
    284c:	5f525450 	svcpl	0x00525450
    2850:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    2854:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2858:	00545f34 	subseq	r5, r4, r4, lsr pc
    285c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
strand (__outserial, const char*)
    2860:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2864:	435f6e4f 	cmpmi	pc, #1264	; 0x4f0
    2868:	4f4e0056 	svcmi	0x004e0056
    286c:	5f4d4f52 	svcpl	0x004d4f52
endstrand
    2870:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2874:	74415f46 	strbvc	r5, [r1], #-3910	; 0xfffff0ba
	ptr = data;
    2878:	706d6574 	rsbvc	r6, sp, r4, ror r5
    287c:	536f5474 	cmnpl	pc, #116, 8	; 0x74000000
	if (*ptr)
    2880:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
		len = strlen (ptr);
    2884:	586f5468 	stmdapl	pc!, {r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2888:	0063736f 	rsbeq	r7, r3, pc, ror #6
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    288c:	6f534648 	svcvs	0x00534648
    2890:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2894:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    2898:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    289c:	74006863 	strvc	r6, [r0], #-2147	; 0xfffff79d
	len -= quant;
    28a0:	58706d65 	ldmdapl	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    28a4:	4f63736f 	svcmi	0x0063736f
    28a8:	6e006666 	cfmadd32vs	mvax3, mvfx6, mvfx0, mvfx6
	if (len == 0) {
    28ac:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
		ufree (data);
    28b0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
		finish;
    28b4:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    28b8:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    28bc:	61700073 	cmnvs	r0, r3, ror r0
    28c0:	506d6172 	rsbpl	r6, sp, r2, ror r1
    28c4:	61700031 	cmnvs	r0, r1, lsr r0
    28c8:	506d6172 	rsbpl	r6, sp, r2, ror r1
    28cc:	61700032 	cmnvs	r0, r2, lsr r0
strand (__inserial, address)
    28d0:	506d6172 	rsbpl	r6, sp, r2, ror r1
    28d4:	50460033 	subpl	r0, r6, r3, lsr r0
    28d8:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    28dc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    28e0:	33444556 	movtcc	r4, #17750	; 0x4556
	if (__inpline != NULL)
    28e4:	7000545f 	andvc	r5, r0, pc, asr r4
    28e8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
		finish;
    28ec:	5373756f 	cmnpl	r3, #465567744	; 0x1bc00000
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    28f0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    28f4:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    28f8:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    28fc:	2e007355 	mcrcs	3, 0, r7, cr0, cr5, {2}
		umwait (IM_INIT);
    2900:	2f2e2e2f 	svccs	0x002e2e2f
		release;
    2904:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	savedata (data);
    2908:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
	len = MAX_LINE_LENGTH;
    290c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
	io (IM_READ, __cport, READ, ptr, 1);
    2910:	2f62696c 	svccs	0x0062696c
    2914:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    2918:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    291c:	6f58656d 	svcvs	0x0058656d
	if (ptr == (char*) data) { // new line
    2920:	74536373 	ldrbvc	r6, [r3], #-883	; 0xfffffc8d
    2924:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		if (*ptr == '\0') { // bin cmd
    2928:	0056435f 	subseq	r4, r6, pc, asr r3
			proceed (IM_BIN);
    292c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2930:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
		if (*ptr < 0x20)
    2934:	6f6c0061 	svcvs	0x006c0061
    2938:	72685477 	rsbvc	r5, r8, #1996488704	; 0x77000000
			proceed (IM_READ);
    293c:	6f687365 	svcvs	0x00687365
    2940:	5200646c 	andpl	r6, r0, #108, 8	; 0x6c000000
	if (*ptr == '\n' || *ptr == '\r') {
    2944:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2948:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    294c:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
		*ptr = '\0';
    2950:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 281c <tcv_ope_null+0x4>
		__inpline = (char*)data;
    2954:	43534f5f 	cmpmi	r3, #380	; 0x17c
		finish;
    2958:	545f4648 	ldrbpl	r4, [pc], #-1608	; 2960 <__inserial+0x90>
	if (len) {
    295c:	4f6e7275 	svcmi	0x006e7275
		ptr++;
    2960:	736f586e 	cmnvc	pc, #7208960	; 0x6e0000
    2964:	50460063 	subpl	r0, r6, r3, rrx
		len--;
    2968:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
	proceed (IM_READ);
    296c:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
	io (IM_BIN, __cport, READ, ptr, 1);
    2970:	5f564544 	svcpl	0x00564544
    2974:	50460054 	subpl	r0, r6, r4, asr r0
    2978:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    297c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2980:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
	len -= 2;
    2984:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
	if (len > *ptr + 1) // 1 for 0x04
    2988:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    298c:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
		len = *ptr + 1;
    2990:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2994:	336e6f69 	cmncc	lr, #420	; 0x1a4
	ptr++;
    2998:	706d6100 	rsbvc	r6, sp, r0, lsl #2
	quant = io (IM_BINL, __cport, READ, ptr, len);
    299c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    29a0:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    29a4:	76726573 			; <UNDEFINED> instruction: 0x76726573
    29a8:	6f4c6465 	svcvs	0x004c6465
    29ac:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    29b0:	00346e6f 	eorseq	r6, r4, pc, ror #28
	len -= quant;
    29b4:	4f524f4e 	svcmi	0x00524f4e
		__inpline = (char*)data;
    29b8:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
		finish;
    29bc:	5f464843 	svcpl	0x00464843
	ptr += quant;
    29c0:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    29c4:	6f546863 	svcvs	0x00546863
endstrand
    29c8:	734f6352 	movtvc	r6, #62290	; 0xf352
    29cc:	72755463 	rsbsvc	r5, r5, #1660944384	; 0x63000000
	proceed (IM_BINL);
    29d0:	66664f6e 	strbtvs	r4, [r6], -lr, ror #30
endstrand
    29d4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    29d8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    29dc:	414d5f52 	cmpmi	sp, r2, asr pc
    29e0:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    29e4:	5300545f 	movwpl	r5, #1119	; 0x45f
    29e8:	63656c65 	cmnvs	r5, #25856	; 0x6500
		if (res && (d < n))
    29ec:	43444174 	movtmi	r4, #16756	; 0x4174
    29f0:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    29f4:	706e4942 	rsbvc	r4, lr, r2, asr #18
    29f8:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
			res [d] = (char) c;
    29fc:	61746c65 	cmnvs	r4, r5, ror #24
		d++;
    2a00:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2a04:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    2a08:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a0c:	4f4e0065 	svcmi	0x004e0065
    2a10:	5f4d4f52 	svcpl	0x004d4f52
    2a14:	5f43534f 	svcpl	0x0043534f
				enci (10000);
    2a18:	534f5048 	movtpl	r5, #61512	; 0xf048
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    2a1c:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    2a20:	76697461 	strbtvc	r7, [r9], -r1, ror #8
	d = 0;
    2a24:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
		c = *fm++;
    2a28:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
		if (c == '\\') {
    2a2c:	664f7963 	strbvs	r7, [pc], -r3, ror #18
			if ((c = *fm++) == '\0') {
    2a30:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2a34:	00746547 	rsbseq	r6, r4, r7, asr #10
				outc ('\\');
    2a38:	4f524f4e 	svcmi	0x00524f4e
			if ((c = *fm++) == '\0') {
    2a3c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
				outc ('\\');
    2a40:	5f464843 	svcpl	0x00464843
    2a44:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
			outc (c);
    2a48:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    2a4c:	73797243 	cmnvc	r9, #805306372	; 0x30000004
			if (c == '\0')
    2a50:	416c6174 	smcmi	50708	; 0xc614
    2a54:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
			outc (c);
    2a58:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
				outc (val);
    2a5c:	61654d00 	cmnvs	r5, r0, lsl #26
				val = (word) va_arg (ap, aword);
    2a60:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
		if (c == '%') {
    2a64:	46006575 			; <UNDEFINED> instruction: 0x46006575
    2a68:	5f525450 	svcpl	0x00525450
			c = *fm++;
    2a6c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
			switch (c) {
    2a70:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2a74:	00545f31 	subseq	r5, r4, r1, lsr pc
    2a78:	33637243 	cmncc	r3, #805306372	; 0x30000004
    2a7c:	6c460032 	mcrrvs	0, 3, r0, r6, cr2
    2a80:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2a84:	32337265 	eorscc	r7, r3, #1342177286	; 0x50000006
    2a88:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    2a8c:	70696843 	rsbvc	r6, r9, r3, asr #16
				outc ('%');
    2a90:	46006449 	strmi	r6, [r0], -r9, asr #8
    2a94:	5f525450 	svcpl	0x00525450
				outc (c);
    2a98:	4e41454d 	cdpmi	5, 4, cr4, cr1, cr13, {2}
    2a9c:	5f4c4156 	svcpl	0x004c4156
    2aa0:	50460054 	subpl	r0, r6, r4, asr r0
				if (c == '\0')
    2aa4:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
				return d;
    2aa8:	4f434344 	svcmi	0x00434344
}
    2aac:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
    2ab0:	00545f4e 	subseq	r5, r4, lr, asr #30
			switch (c) {
    2ab4:	52545046 	subspl	r5, r4, #70	; 0x46
    2ab8:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2944 <__inserial+0x74>
    2abc:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
				for (i = 12; ; i -= 4) {
    2ac0:	00545f46 	subseq	r5, r4, r6, asr #30
				val = (word) va_arg (ap, aword);
    2ac4:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
						[ (val >> i) & 0xf ]);
    2ac8:	6f437463 	svcvs	0x00437463
    2acc:	4941706d 	stmdbmi	r1, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2ad0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
					outc (__pi_hex_enc_table
    2ad4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2ad8:	4f435f52 	svcmi	0x00435f52
					if (i == 0)
    2adc:	4941504d 	stmdbmi	r1, {r0, r2, r3, r6, ip, lr}^
    2ae0:	00545f4e 	subseq	r5, r4, lr, asr #30
				for (i = 12; ; i -= 4) {
    2ae4:	706d6574 	rsbvc	r6, sp, r4, ror r5
				val = (word) va_arg (ap, aword);
    2ae8:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
				if (c == 'd' && (val & 0x8000) != 0) {
    2aec:	00325861 	eorseq	r5, r2, r1, ror #16
				val = (word) va_arg (ap, aword);
    2af0:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
				if (c == 'd' && (val & 0x8000) != 0) {
    2af4:	6f6c4766 	svcvs	0x006c4766
    2af8:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
					outc ('-');
    2afc:	4f504800 	svcmi	0x00504800
    2b00:	525f4353 	subspl	r4, pc, #1275068417	; 0x4c000001
					val = (~val) + 1;
    2b04:	72466c65 	subvc	r6, r6, #25856	; 0x6500
    2b08:	664f7165 	strbvs	r7, [pc], -r5, ror #2
				for (i = 12; ; i -= 4) {
    2b0c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
				enci (10000);
    2b10:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2b14:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
    2b18:	6953656d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    2b1c:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2b20:	4f63736f 	svcmi	0x0063736f
    2b24:	4d6e496e 			; <UNDEFINED> instruction: 0x4d6e496e
    2b28:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
    2b2c:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2b30:	53706d65 	cmnpl	r0, #6464	; 0x1940
    2b34:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    2b38:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2b3c:	66006e4f 	strvs	r6, [r0], -pc, asr #28
    2b40:	61507469 	cmpvs	r0, r9, ror #8
    2b44:	736d6172 	cmnvc	sp, #-2147483620	; 0x8000001c
    2b48:	61747300 	cmnvs	r4, r0, lsl #6
    2b4c:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2b50:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2b54:	73556e49 	cmpvc	r5, #1168	; 0x490
				if (c == 'd' || c == 'u') {
    2b58:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2b5c:	736f5865 	cmnvc	pc, #6619136	; 0x650000
					if (c == 'd' &&
    2b60:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
					val = va_arg (ap, lword);
    2b64:	0056435f 	subseq	r4, r6, pc, asr r3
					fm++;
    2b68:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
					if (c == 'd' &&
    2b6c:	756f5366 	strbvc	r5, [pc, #-870]!	; 280e <tcv_frm_null+0x6>
    2b70:	52656372 	rsbpl	r6, r5, #-939524095	; 0xc8000001
						outc ('-');
    2b74:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    2b78:	706d6100 	rsbvc	r6, sp, r0, lsl #2
						val = (~val) + 1;
    2b7c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
				enci (10000);
    2b80:	00316854 	eorseq	r6, r1, r4, asr r8
					enci (1000000000UL);
    2b84:	4863734f 	stmdami	r3!, {r0, r1, r2, r3, r6, r8, r9, ip, sp, lr}^
    2b88:	6f6c4766 	svcvs	0x006c4766
    2b8c:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    2b90:	4800745f 	stmdami	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    2b94:	5f445241 	svcpl	0x00445241
    2b98:	5f495041 	svcpl	0x00495041
    2b9c:	69740054 	ldmdbvs	r4!, {r2, r4, r6}^
    2ba0:	6e55656d 	cdpvs	5, 5, cr6, cr5, cr13, {3}
    2ba4:	576c6974 			; <UNDEFINED> instruction: 0x576c6974
    2ba8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    2bac:	4d6e4970 			; <UNDEFINED> instruction: 0x4d6e4970
    2bb0:	69750073 	ldmdbvs	r5!, {r0, r1, r4, r5, r6}^
    2bb4:	72533233 	subsvc	r3, r3, #805306371	; 0x30000003
    2bb8:	6b6c4363 	blvs	1b1394c <__ccfg+0x1af39a4>
    2bbc:	43534f00 	cmpmi	r3, #0, 30
    2bc0:	6f536648 	svcvs	0x00536648
    2bc4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
				} else if (c == 'x') {
    2bc8:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
					for (i = 28; ; i -= 4) {
    2bcc:	46006863 	strmi	r6, [r0], -r3, ror #16
					val = va_arg (ap, lword);
    2bd0:	5f525450 	svcpl	0x00525450
							[ (val >> i) & 0xf ]);
    2bd4:	33435243 	movtcc	r5, #12867	; 0x3243
    2bd8:	00545f32 	subseq	r5, r4, r2, lsr pc
						outc (__pi_hex_enc_table
    2bdc:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2be0:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    2be4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
						if (i == 0)
    2be8:	494d5f52 	stmdbmi	sp, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    2bec:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
					for (i = 28; ; i -= 4) {
    2bf0:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
					outc ('%');
    2bf4:	5f525450 	svcpl	0x00525450
    2bf8:	4f534648 	svcmi	0x00534648
    2bfc:	45435255 	strbmi	r5, [r3, #-597]	; 0xfffffdab
					outc ('l');
    2c00:	45464153 	strbmi	r4, [r6, #-339]	; 0xfffffead
    2c04:	54495753 	strbpl	r5, [r9], #-1875	; 0xfffff8ad
				val = (word) va_arg (ap, aword);
    2c08:	545f4843 	ldrbpl	r4, [pc], #-2115	; 2c10 <__pi_vfparse+0x204>
				outc (val);
    2c0c:	6e694d00 	cdpvs	13, 6, cr4, cr9, cr0, {0}
    2c10:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
				while (*st != '\0') {
    2c14:	72700065 	rsbsvc	r0, r0, #101	; 0x65
    2c18:	694c7665 	stmdbvs	ip, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
    2c1c:	74696d6d 	strbtvc	r6, [r9], #-3437	; 0xfffff293
    2c20:	6e493532 	mcrvs	5, 2, r3, cr9, cr2, {1}
					outc (*st);
    2c24:	4e007355 	mcrmi	3, 0, r7, cr0, cr5, {2}
    2c28:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2af4 <__pi_vfparse+0xe8>
					st++;
    2c2c:	43534f5f 	cmpmi	r3, #380	; 0x17c
		c = *fm++;
    2c30:	4f50485f 	svcmi	0x0050485f
    2c34:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2c38:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
char *vform (char *res, const char *fm, va_list aq) {
    2c3c:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    2c40:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
	if (res != NULL) {
    2c44:	4f79636e 	svcmi	0x0079636e
		__pi_vfparse (res, MAX_WORD, fm, aq);
    2c48:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2c4c:	526f5474 	rsbpl	r5, pc, #116, 8	; 0x74000000
    2c50:	726f4346 	rsbvc	r4, pc, #402653185	; 0x18000001
}
    2c54:	726f4665 	rsbvc	r4, pc, #105906176	; 0x6500000
    2c58:	4374616d 	cmnmi	r4, #1073741851	; 0x4000001b
	fml = strlen (fm) + 17;
    2c5c:	65766e6f 	ldrbvs	r6, [r6, #-3695]!	; 0xfffff191
    2c60:	53007472 	movwpl	r7, #1138	; 0x472
    2c64:	63656c65 	cmnvs	r5, #25856	; 0x6500
	if ((res = (char*) umalloc (fml)) == NULL)
    2c68:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2aa0 <__pi_vfparse+0x94>
    2c6c:	65524170 	ldrbvs	r4, [r2, #-368]	; 0xfffffe90
    2c70:	69750066 	ldmdbvs	r5!, {r1, r2, r5, r6}^
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    2c74:	6c433233 	sfmvs	f3, 2, [r3], {51}	; 0x33
    2c78:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2c7c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2c80:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
		ufree (res);
    2c84:	76726573 			; <UNDEFINED> instruction: 0x76726573
		goto Again;
    2c88:	6f4c6465 	svcvs	0x004c6465
	if (buf == NULL || fmt == NULL)
    2c8c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
int vscan (const char *buf, const char *fmt, va_list ap) {
    2c90:	00316e6f 	eorseq	r6, r1, pc, ror #28
	if (buf == NULL || fmt == NULL)
    2c94:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2c98:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2c9c:	61636f4c 	cmnvs	r3, ip, asr #30
		    	    case 'u': scanu (lword); break;
    2ca0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			while (isspace (*buf)) buf++;
    2ca4:	5f5f0032 	svcpl	0x005f0032
    2ca8:	31746e69 	cmncc	r4, r9, ror #28
	while (*fmt != '\0') {
    2cac:	00745f36 	rsbseq	r5, r4, r6, lsr pc
		if (*fmt++ != '%')
    2cb0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
		switch (*fmt++) {
    2cb4:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2cb8:	61636f4c 	cmnvs	r3, ip, asr #30
    2cbc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2cc0:	74530035 	ldrbvc	r0, [r3], #-53	; 0xffffffcb
    2cc4:	44646e61 	strbtmi	r6, [r4], #-3681	; 0xfffff19f
    2cc8:	61697665 	cmnvs	r9, r5, ror #12
    2ccc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
}
    2cd0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
		switch (*fmt++) {
    2cd4:	66720065 	ldrbtvs	r0, [r2], -r5, rrx
    2cd8:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    2cdc:	71657246 	cmnvc	r5, r6, asr #4
    2ce0:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
			while (isspace (*buf)) buf++;
    2ce4:	68007465 	stmdavs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
    2ce8:	54686769 	strbtpl	r6, [r8], #-1897	; 0xfffff897
    2cec:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2cf0:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2cf4:	524f4e00 	subpl	r4, pc, #0, 28
    2cf8:	4f5f4d4f 	svcmi	0x005f4d4f
			if (*buf == '\0')
    2cfc:	46484353 			; <UNDEFINED> instruction: 0x46484353
			if (*buf != ',') {
    2d00:	6265445f 	rsbvs	r4, r5, #1593835520	; 0x5f000000
			sap = va_arg (ap, char*);
    2d04:	65476775 	strbvs	r6, [r7, #-1909]	; 0xfffff88b
			nc++;
    2d08:	70784574 	rsbsvc	r4, r8, r4, ror r5
			if (*buf != ',') {
    2d0c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
				while (!isspace (*buf) && *buf != ',' &&
    2d10:	65764164 	ldrbvs	r4, [r6, #-356]!	; 0xfffffe9c
    2d14:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    2d18:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2d1c:	416c6174 	smcmi	50708	; 0xc614
    2d20:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2d24:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2d28:	63736f00 	cmnvs	r3, #0, 30
			while (isspace (*buf)) buf++;
    2d2c:	52676643 	rsbpl	r6, r7, #70254592	; 0x4300000
    2d30:	6f436765 	svcvs	0x00436765
    2d34:	46007970 			; <UNDEFINED> instruction: 0x46007970
    2d38:	5f525450 	svcpl	0x00525450
    2d3c:	46544547 	ldrbmi	r4, [r4], -r7, asr #10
			if (*buf == ',') buf++;
    2d40:	5a49534c 	bpl	1257a78 <__ccfg+0x1237ad0>
    2d44:	00545f45 	subseq	r5, r4, r5, asr #30
			*sap = '\0';
    2d48:	4f524f4e 	svcmi	0x00524f4e
			break;
    2d4c:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
		    case 'd': scani (word); break;
    2d50:	5f464843 	svcpl	0x00464843
    2d54:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    2d58:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2d5c:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2d60:	4600656d 	strmi	r6, [r0], -sp, ror #10
    2d64:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    2d68:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    2d6c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    2d70:	52545046 	subspl	r5, r4, #70	; 0x46
    2d74:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 2c00 <__pi_vfparse+0x1f4>
    2d78:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    2d7c:	00545f46 	subseq	r5, r4, r6, asr #30
    2d80:	52545046 	subspl	r5, r4, #70	; 0x46
    2d84:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    2d88:	50494843 	subpl	r4, r9, r3, asr #16
    2d8c:	545f4449 	ldrbpl	r4, [pc], #-1097	; 2d94 <vscan+0x108>
    2d90:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2d94:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2d98:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2d9c:	5f354445 	svcpl	0x00354445
    2da0:	61700054 	cmnvs	r0, r4, asr r0
    2da4:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2da8:	4f4e0030 	svcmi	0x004e0030
    2dac:	5f4d4f52 	svcpl	0x004d4f52
    2db0:	43434652 	movtmi	r4, #13906	; 0x3652
    2db4:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    2db8:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    2dbc:	43646e41 	cmnmi	r4, #1040	; 0x410
		    case 'u': scanu (word); break;
    2dc0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2dc4:	764f7000 	strbvc	r7, [pc], -r0
    2dc8:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2dcc:	73006564 	movwvc	r6, #1380	; 0x564
    2dd0:	5f657a69 	svcpl	0x00657a69
    2dd4:	766f0074 			; <UNDEFINED> instruction: 0x766f0074
    2dd8:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2ddc:	695f6564 	ldmdbvs	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    2de0:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2de4:	524f4e00 	subpl	r4, pc, #0, 28
    2de8:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2dec:	64414346 	strbvs	r4, [r1], #-838	; 0xfffffcba
    2df0:	63563369 	cmpvs	r6, #-1543503871	; 0xa4000001
    2df4:	6f644c6f 	svcvs	0x00644c6f
    2df8:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    2dfc:	4d656761 	stclmi	7, cr6, [r5, #-388]!	; 0xfffffe7c
    2e00:	0065646f 	rsbeq	r6, r5, pc, ror #8
    2e04:	5f636672 	svcpl	0x00636672
		    case 'x': scanx (word); break;
    2e08:	5f444d43 	svcpl	0x00444d43
    2e0c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    2e10:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2e14:	535f4f49 	cmppl	pc, #292	; 0x124
    2e18:	50555445 	subspl	r5, r5, r5, asr #8
    2e1c:	4e00745f 	cfmvsrmi	mvf0, r7
    2e20:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2cec <vscan+0x60>
    2e24:	4346525f 	movtmi	r5, #25183	; 0x625f
    2e28:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
    2e2c:	65536d69 	ldrbvs	r6, [r3, #-3433]	; 0xfffff297
    2e30:	4f4e0074 	svcmi	0x004e0074
    2e34:	5f4d4f52 	svcpl	0x004d4f52
    2e38:	53434652 	movtpl	r4, #13906	; 0x3652
    2e3c:	68746e79 	ldmdavs	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
    2e40:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    2e44:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    2e48:	766f006e 	strbtvc	r0, [pc], -lr, rrx
    2e4c:	69727265 	ldmdbvs	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    2e50:	725f6564 	subsvc	r6, pc, #100, 10	; 0x19000000
    2e54:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    2e58:	704f7000 	subvc	r7, pc, r0
    2e5c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2e60:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    2e64:	66493233 			; <UNDEFINED> instruction: 0x66493233
    2e68:	66720067 	ldrbtvs	r0, [r2], -r7, rrx
    2e6c:	65645f63 	strbvs	r5, [r4, #-3939]!	; 0xfffff09d
    2e70:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    2e74:	71724974 	cmnvc	r2, r4, ror r9
    2e78:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2e7c:	524f4e00 	subpl	r4, pc, #0, 28
			switch (*fmt++) {
    2e80:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2e84:	50434346 	subpl	r4, r3, r6, asr #6
    2e88:	74615045 	strbtvc	r5, [r1], #-69	; 0xffffffbb
    2e8c:	65526863 	ldrbvs	r6, [r2, #-2147]	; 0xfffff79d
    2e90:	00746573 	rsbseq	r6, r4, r3, ror r5
    2e94:	5f636672 	svcpl	0x00636672
		    	    case 'd': scani (lword); break;
    2e98:	5f444d43 	svcpl	0x00444d43
    2e9c:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    2ea0:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2ea4:	535f4f49 	cmppl	pc, #292	; 0x124
    2ea8:	50555445 	subspl	r5, r5, r5, asr #8
    2eac:	7000735f 	andvc	r7, r0, pc, asr r3
    2eb0:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
    2eb4:	6f006d69 	svcvs	0x00006d69
    2eb8:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    2ebc:	5f656469 	svcpl	0x00656469
    2ec0:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
    2ec4:	2f2e0065 	svccs	0x002e0065
    2ec8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2ecc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2ed0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2ed4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2ed8:	722f6269 	eorvc	r6, pc, #-1879048186	; 0x90000006
    2edc:	632e6366 			; <UNDEFINED> instruction: 0x632e6366
    2ee0:	63667200 	cmnvs	r6, #0, 4
    2ee4:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    2ee8:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    2eec:	535f4f49 	cmppl	pc, #292	; 0x124
    2ef0:	50555445 	subspl	r5, r5, r5, asr #8
		    	    case 'x': scanx (lword); break;
    2ef4:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    2ef8:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    2efc:	525f444d 	subspl	r4, pc, #1291845632	; 0x4d000000
    2f00:	4f494441 	svcmi	0x00494441
    2f04:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
    2f08:	745f5055 	ldrbvc	r5, [pc], #-85	; 2f10 <vscan+0x284>
    2f0c:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    2f10:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2f14:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2f18:	725f3167 	subsvc	r3, pc, #-1073741799	; 0xc0000019
    2f1c:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    2f20:	524f4e00 	subpl	r4, pc, #0, 28
    2f24:	525f4d4f 	subspl	r4, pc, #5056	; 0x13c0
    2f28:	54524346 	ldrbpl	r4, [r2], #-838	; 0xfffffcba
    2f2c:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2f30:	4f524f4e 	svcmi	0x00524f4e
    2f34:	46525f4d 	ldrbmi	r5, [r2], -sp, asr #30
    2f38:	6f6f4443 	svcvs	0x006f4443
    2f3c:	6c656272 	sfmvs	f6, 2, [r5], #-456	; 0xfffffe38
    2f40:	6e65536c 	cdpvs	3, 6, cr5, cr5, cr12, {3}
    2f44:	006f5464 	rsbeq	r5, pc, r4, ror #8
    2f48:	41434652 	cmpmi	r3, r2, asr r6
    2f4c:	6e496b63 	vmlsvs.f64	d22, d9, d19
    2f50:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
    2f54:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
    2f58:	64697669 	strbtvs	r7, [r9], #-1641	; 0xfffff997
    2f5c:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
    2f60:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e2c <vscan+0x1a0>
		    	    case 'd': scani (lword); break;
    2f64:	4346525f 	movtmi	r5, #25183	; 0x625f
    2f68:	72546652 	subsvc	r6, r4, #85983232	; 0x5200000
    2f6c:	65526d69 	ldrbvs	r6, [r2, #-3433]	; 0xfffff297
    2f70:	6d006461 	cfstrsvs	mvf6, [r0, #-388]	; 0xfffffe7c
    2f74:	65723170 	ldrbvs	r3, [r2, #-368]!	; 0xfffffe90
    2f78:	72540076 	subsvc	r0, r4, #118	; 0x76
    2f7c:	66416d69 	strbvs	r6, [r1], -r9, ror #26
		    	    case 'u': scanu (lword); break;
    2f80:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2f84:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2f88:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2f8c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2f90:	72467075 	subvc	r7, r6, #117	; 0x75
    2f94:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2f98:	6f447475 	svcvs	0x00447475
    2f9c:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    2fa0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e6c <vscan+0x1e0>
    2fa4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2fa8:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2fac:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2fb0:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2fb4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2fb8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2fbc:	72467075 	subvc	r7, r6, #117	; 0x75
    2fc0:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2fc4:	6f447475 	svcvs	0x00447475
		    	    case 'x': scanx (lword); break;
    2fc8:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2fcc:	4e003167 	adfmisz	f3, f0, f7
			if ((c = *buf++) == '\0')
    2fd0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2e9c <vscan+0x210>
    2fd4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
			sap = va_arg (ap, char*);
    2fd8:	66417075 			; <UNDEFINED> instruction: 0x66417075
			nc++;
    2fdc:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
			break;
    2fe0:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
			while (isspace (*buf)) buf++;
    2fe4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2fe8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2fec:	72467075 	subvc	r7, r6, #117	; 0x75
						*sap++ = *buf++;
    2ff0:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2ff4:	6f447475 	svcvs	0x00447475
			while (isspace (*buf)) buf++;
    2ff8:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2ffc:	4e003267 	cdpmi	2, 0, cr3, cr0, cr7, {3}
    3000:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ecc <vscan+0x240>
		return 0;
    3004:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3008:	66417075 			; <UNDEFINED> instruction: 0x66417075
		    case 'x': scanx (word); break;
    300c:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    3010:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
		    	    case 'x': scanx (lword); break;
    3014:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3018:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    301c:	72467075 	subvc	r7, r6, #117	; 0x75
    3020:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    3024:	6f447475 	svcvs	0x00447475
    3028:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    302c:	2e003367 	cdpcs	3, 0, cr3, cr0, cr7, {3}
    3030:	2f2e2e2f 	svccs	0x002e2e2f
    3034:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3038:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    303c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3040:	2f62696c 	svccs	0x0062696c
    3044:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    3048:	00632e70 	rsbeq	r2, r3, r0, ror lr
    304c:	4f524f4e 	svcmi	0x00524f4e
    3050:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3054:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    3058:	61437465 	cmpvs	r3, r5, ror #8
    305c:	4d656863 	stclmi	8, cr6, [r5, #-396]!	; 0xfffffe74
    3060:	4165646f 	cmnmi	r5, pc, ror #8
    3064:	726f6363 	rsbvc	r6, pc, #-1946157055	; 0x8c000001
    3068:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    306c:	63436f54 	movtvs	r6, #16212	; 0x3f54
    3070:	65536766 	ldrbvs	r6, [r3, #-1894]	; 0xfffff89a
    3074:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    3078:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
    307c:	63463233 	movtvs	r3, #25139	; 0x6233
    3080:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
    3084:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3088:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    308c:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
    3090:	744a4355 	strbvc	r4, [sl], #-853	; 0xfffffcab
    3094:	6f506761 	svcvs	0x00506761
    3098:	4f726577 	svcmi	0x00726577
    309c:	54006666 	strpl	r6, [r0], #-1638	; 0xfffff99a
    30a0:	416d6972 	smcmi	54930	; 0xd692
    30a4:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    30a8:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    30ac:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    30b0:	4f4e0074 	svcmi	0x004e0074
    30b4:	5f4d4f52 	svcpl	0x004d4f52
    30b8:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    30bc:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    30c0:	7665446d 	strbtvc	r4, [r5], -sp, ror #8
    30c4:	00656369 	rsbeq	r6, r5, r9, ror #6
    30c8:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    30cc:	64755f6d 	ldrbtvs	r5, [r5], #-3949	; 0xfffff093
    30d0:	75006769 	strvc	r6, [r0, #-1897]	; 0xfffff897
    30d4:	41323369 	teqmi	r2, r9, ror #6
    30d8:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    30dc:	73655273 	cmnvc	r5, #805306375	; 0x30000007
    30e0:	74637465 	strbtvc	r7, [r3], #-1125	; 0xfffffb9b
    30e4:	6363006c 	cmnvs	r3, #108	; 0x6c
    30e8:	4d5f6766 	ldclmi	7, cr6, [pc, #-408]	; 2f58 <vscan+0x2cc>
    30ec:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    30f0:	52666e6f 	rsbpl	r6, r6, #1776	; 0x6f0
    30f4:	54006765 	strpl	r6, [r0], #-1893	; 0xfffff89b
    30f8:	416d6972 	smcmi	54930	; 0xd692
    30fc:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    3100:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    3104:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    3108:	6b615774 	blvs	1858ee0 <__ccfg+0x1838f38>
    310c:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    3110:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    3114:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    3118:	576e776f 	strbpl	r7, [lr, -pc, ror #14]!
    311c:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    3120:	6f724670 	svcvs	0x00724670
    3124:	776f506d 	strbvc	r5, [pc, -sp, rrx]!
    3128:	6f447265 	svcvs	0x00447265
    312c:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    3130:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2ffc <vscan+0x370>
    3134:	6968545f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    3138:	646f4373 	strbtvs	r4, [pc], #-883	; 3140 <NOROM_OSCClockSourceGet+0x28>
    313c:	42734965 	rsbsmi	r4, r3, #1654784	; 0x194000
    3140:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    3144:	43726f46 	cmnmi	r2, #280	; 0x118
    3148:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    314c:	52774878 	rsbspl	r4, r7, #120, 16	; 0x780000
    3150:	30327665 	eorscc	r7, r2, r5, ror #12
    3154:	4c646e41 	stclmi	14, cr6, [r4], #-260	; 0xfffffefc
    3158:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
    315c:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
    3160:	56664974 			; <UNDEFINED> instruction: 0x56664974
    3164:	616c6f69 	cmnvs	ip, r9, ror #30
    3168:	00646574 	rsbeq	r6, r4, r4, ror r5
    316c:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    3170:	6f625f6d 	svcvs	0x00625f6d
    3174:	63630064 	cmnvs	r3, #100	; 0x64
    3178:	78456766 	stmdavc	r5, {r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    317c:	43664c74 	cmnmi	r6, #116, 24	; 0x7400
    3180:	63006b6c 	movwvs	r6, #2924	; 0xb6c
    3184:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    3188:	6648746e 	strbvs	r7, [r8], -lr, ror #8
    318c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    3190:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
    3194:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    3198:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    319c:	61566d69 	cmpvs	r6, r9, ror #26
    31a0:	4f4e006c 	svcmi	0x004e006c
    31a4:	5f4d4f52 	svcpl	0x004d4f52
    31a8:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    31ac:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    31b0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    31b4:	41726f46 	cmnmi	r2, r6, asr #30
    31b8:	7962616e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    31bc:	73736170 	cmnvc	r3, #112, 2
    31c0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    31c4:	4e003165 	adfmisz	f3, f0, f5
    31c8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3094 <NOROM_AONRTCCurrent64BitValueGet>
    31cc:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    31d0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    31d4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    31d8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    31dc:	726c6244 	rsbvc	r6, ip, #68, 4	; 0x40000004
    31e0:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    31e4:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    31e8:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    31ec:	56746573 			; <UNDEFINED> instruction: 0x56746573
    31f0:	61746c6f 	cmnvs	r4, pc, ror #24
    31f4:	63006567 	movwvs	r6, #1383	; 0x567
    31f8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    31fc:	7254746e 	subsvc	r7, r4, #1845493760	; 0x6e000000
    3200:	76006d69 	strvc	r6, [r0], -r9, ror #26
    3204:	43736d69 	cmnmi	r3, #6720	; 0x1a40
    3208:	6f4d6c74 	svcvs	0x004d6c74
    320c:	00306564 	eorseq	r6, r0, r4, ror #10
    3210:	61696269 	cmnvs	r9, r9, ror #4
    3214:	66664f73 	uqsub16vs	r4, r6, r3
    3218:	00746573 	rsbseq	r6, r4, r3, ror r5
    321c:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    3220:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3224:	6f58726f 	svcvs	0x0058726f
    3228:	66686373 			; <UNDEFINED> instruction: 0x66686373
    322c:	566c7443 	strbtpl	r7, [ip], -r3, asr #8
    3230:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3234:	524f4e00 	subpl	r4, pc, #0, 28
    3238:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    323c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3240:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3244:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3248:	6f58726f 	svcvs	0x0058726f
    324c:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3250:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    3254:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    3258:	4f4e0074 	svcmi	0x004e0074
    325c:	5f4d4f52 	svcpl	0x004d4f52
    3260:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3264:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3268:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    326c:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    3270:	63734f63 	cmnvs	r3, #396	; 0x18c
    3274:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
    3278:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    327c:	006d6972 	rsbeq	r6, sp, r2, ror r9
    3280:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3284:	6a644161 	bvs	1913810 <__ccfg+0x18f3868>
    3288:	00747375 	rsbseq	r7, r4, r5, ror r3
    328c:	4f524f4e 	svcmi	0x00524f4e
    3290:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3294:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3298:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    329c:	6f466d69 	svcvs	0x00466d69
    32a0:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    32a4:	43664863 	cmnmi	r6, #6488064	; 0x630000
    32a8:	67006c74 	smlsdxvs	r0, r4, ip, r6
    32ac:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    32b0:	6f466d69 	svcvs	0x00466d69
    32b4:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
    32b8:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
    32bc:	56676643 	strbtpl	r6, [r7], -r3, asr #12
    32c0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    32c4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    32c8:	72546174 	subsvc	r6, r4, #116, 2
    32cc:	75006d69 	strvc	r6, [r0, #-3433]	; 0xfffff297
    32d0:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    32d4:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    32d8:	73614666 	cmnvc	r1, #106954752	; 0x6600000
    32dc:	61745374 	cmnvs	r4, r4, ror r3
    32e0:	61567472 	cmpvs	r6, r2, ror r4
    32e4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    32e8:	4f524f4e 	svcmi	0x00524f4e
    32ec:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    32f0:	47707574 			; <UNDEFINED> instruction: 0x47707574
    32f4:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    32f8:	6f466d69 	svcvs	0x00466d69
    32fc:	706d4172 	rsbvc	r4, sp, r2, ror r1
    3300:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    3304:	00316854 	eorseq	r6, r1, r4, asr r8
    3308:	4f524f4e 	svcmi	0x00524f4e
    330c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3310:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3314:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3318:	6f466d69 	svcvs	0x00466d69
    331c:	706d4172 	rsbvc	r4, sp, r2, ror r1
    3320:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    3324:	00326854 	eorseq	r6, r2, r4, asr r8
    3328:	4f524f4e 	svcmi	0x00524f4e
    332c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3330:	47707574 			; <UNDEFINED> instruction: 0x47707574
    3334:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3338:	6f466d69 	svcvs	0x00466d69
    333c:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    3340:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    3344:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    3348:	524f4e00 	subpl	r4, pc, #0, 28
    334c:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 3354 <NOROM_RFCRfTrimRead+0xf0>
    3350:	32334944 	eorscc	r4, r3, #68, 18	; 0x110000
    3354:	57676552 			; <UNDEFINED> instruction: 0x57676552
    3358:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    335c:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    3360:	61443167 	cmpvs	r4, r7, ror #2
    3364:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
    3368:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    336c:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    3370:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    3374:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    3378:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
    337c:	61566d69 	cmpvs	r6, r9, ror #26
    3380:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3384:	67726174 			; <UNDEFINED> instruction: 0x67726174
    3388:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    338c:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    3390:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 325c <NOROM_RFCSynthPowerDown+0x44>
    3394:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3398:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    339c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    33a0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    33a4:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    33a8:	43747845 	cmnmi	r4, #4521984	; 0x450000
    33ac:	2e006766 	cdpcs	7, 0, cr6, cr0, cr6, {3}
    33b0:	2f2e2e2f 	svccs	0x002e2e2f
    33b4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    33b8:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    33bc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    33c0:	2f62696c 	svccs	0x0062696c
    33c4:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    33c8:	6f725f70 	svcvs	0x00725f70
    33cc:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    33d0:	53627573 	cmnpl	r2, #482344960	; 0x1cc00000
    33d4:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    33d8:	4f4e0063 	svcmi	0x004e0063
    33dc:	5f4d4f52 	svcpl	0x004d4f52
    33e0:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    33e4:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    33e8:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    33ec:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    33f0:	63734f63 	cmnvs	r3, #396	; 0x18c
    33f4:	7452664c 	ldrbvc	r6, [r2], #-1612	; 0xfffff9b4
    33f8:	43656e75 	cmnmi	r5, #1872	; 0x750
    33fc:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    3400:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    3404:	524f4e00 	subpl	r4, pc, #0, 28
    3408:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    340c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3410:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    3414:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    3418:	6f58726f 	svcvs	0x0058726f
    341c:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    3420:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    3424:	6f74616c 	svcvs	0x0074616c
    3428:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    342c:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    3430:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    3434:	6f697461 	svcvs	0x00697461
    3438:	33697500 	cmncc	r9, #0, 10
    343c:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    3440:	6553006d 	ldrbvs	r0, [r3, #-109]	; 0xffffff93
    3444:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    3448:	456e6769 	strbmi	r6, [lr, #-1897]!	; 0xfffff897
    344c:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    3450:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
    3454:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    3458:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    345c:	67006575 	smlsdxvs	r0, r5, r5, r6
    3460:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    3464:	6f466d69 	svcvs	0x00466d69
    3468:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    346c:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    3470:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    3474:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3478:	4f4e0065 	svcmi	0x004e0065
    347c:	5f4d4f52 	svcpl	0x004d4f52
    3480:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    3484:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    3488:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    348c:	41726f46 	cmnmi	r2, r6, asr #30
    3490:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    3494:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    3498:	69006e45 	stmdbvs	r0, {r0, r2, r6, r9, sl, fp, sp, lr}
    349c:	69533233 	ldmdbvs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    34a0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    34a4:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    34a8:	006c6156 	rsbeq	r6, ip, r6, asr r1
    34ac:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    34b0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    34b4:	69750031 	ldmdbvs	r5!, {r0, r4, r5}^
    34b8:	63463233 	movtvs	r3, #25139	; 0x6233
    34bc:	56316766 	ldrtpl	r6, [r1], -r6, ror #14
    34c0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    34c4:	524f4e00 	subpl	r4, pc, #0, 28
    34c8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    34cc:	70757465 	rsbsvc	r7, r5, r5, ror #8
    34d0:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    34d4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    34d8:	6f58726f 	svcvs	0x0058726f
    34dc:	66486373 			; <UNDEFINED> instruction: 0x66486373
    34e0:	61696249 	cmnvs	r9, r9, asr #4
    34e4:	65687473 	strbvs	r7, [r8, #-1139]!	; 0xfffffb8d
    34e8:	67006d72 	smlsdxvs	r0, r2, sp, r6
    34ec:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    34f0:	6f466d69 	svcvs	0x00466d69
    34f4:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    34f8:	6f4d6853 	svcvs	0x004d6853
    34fc:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    3500:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    3504:	33690065 	cmncc	r9, #101	; 0x65
    3508:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    350c:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    3510:	72547065 	subsvc	r7, r4, #101	; 0x65
    3514:	66006d69 	strvs	r6, [r0], -r9, ror #26
    3518:	31676663 	cmncc	r7, r3, ror #12
    351c:	4363734f 	cmnmi	r3, #1006632961	; 0x3c000001
    3520:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    3524:	726c6264 	rsbvc	r6, ip, #100, 4	; 0x40000006
    3528:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    352c:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    3530:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    3534:	56746573 			; <UNDEFINED> instruction: 0x56746573
    3538:	61746c6f 	cmnvs	r4, pc, ror #24
    353c:	61566567 	cmpvs	r6, r7, ror #10
    3540:	0065756c 	rsbeq	r7, r5, ip, ror #10
    3544:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    3548:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    354c:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    3550:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    3554:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    3558:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    355c:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    3560:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
    3564:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    3568:	6c61566f 	stclvs	6, cr5, [r1], #-444	; 0xfffffe44
    356c:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3570:	73616962 	cmnvc	r1, #1605632	; 0x188000
    3574:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    3578:	524f4e00 	subpl	r4, pc, #0, 28
    357c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3580:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3584:	41746553 	cmnmi	r4, r3, asr r5
    3588:	74526e6f 	ldrbvc	r6, [r2], #-3695	; 0xfffff191
    358c:	62755363 	rsbsvs	r5, r5, #-1946157055	; 0x8c000001
    3590:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    3594:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
    3598:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3464 <NOROM_RFCRTrim+0xb0>
    359c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    35a0:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    35a4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    35a8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    35ac:	63706d41 	cmnvs	r0, #4160	; 0x1040
    35b0:	43706d6f 	cmnmi	r0, #7104	; 0x1bc0
    35b4:	006c7274 	rsbeq	r7, ip, r4, ror r2
    35b8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    35bc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    35c0:	6f526648 	svcvs	0x00526648
    35c4:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    35c8:	6f583233 	svcvs	0x00583233
    35cc:	66486373 			; <UNDEFINED> instruction: 0x66486373
    35d0:	006c6f43 	rsbeq	r6, ip, r3, asr #30
    35d4:	4f524f4e 	svcmi	0x00524f4e
    35d8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    35dc:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    35e0:	64567465 	ldrbvs	r7, [r6], #-1125	; 0xfffffb9b
    35e4:	654c7264 	strbvs	r7, [ip, #-612]	; 0xfffffd9c
    35e8:	006c6576 	rsbeq	r6, ip, r6, ror r5
    35ec:	5477656e 	ldrbtpl	r6, [r7], #-1390	; 0xfffffa92
    35f0:	526d6972 	rsbpl	r6, sp, #1867776	; 0x1c8000
    35f4:	75007761 	strvc	r7, [r0, #-1889]	; 0xfffff89f
    35f8:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    35fc:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    3600:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    3604:	32336900 	eorscc	r6, r3, #0, 18
    3608:	74737543 	ldrbtvc	r7, [r3], #-1347	; 0xfffffabd
    360c:	72656d6f 	rsbvc	r6, r5, #7104	; 0x1bc0
    3610:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    3614:	6a644161 	bvs	1913ba0 <__ccfg+0x18f3bf8>
    3618:	00747375 	rsbseq	r7, r4, r5, ror r3
    361c:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    3620:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    3624:	7065656c 	rsbvc	r6, r5, ip, ror #10
    3628:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    362c:	64760061 	ldrbtvs	r0, [r6], #-97	; 0xffffff9f
    3630:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    3634:	63416d69 	movtvs	r6, #7529	; 0x1d69
    3638:	00657674 	rsbeq	r7, r5, r4, ror r6
    363c:	54727563 	ldrbtpl	r7, [r2], #-1379	; 0xfffffa9d
    3640:	00706d65 	rsbseq	r6, r0, r5, ror #26
    3644:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    3648:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    364c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    3650:	6c536576 	cfldr64vs	mvdx6, [r3], {118}	; 0x76
    3654:	00706565 	rsbseq	r6, r0, r5, ror #10
    3658:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    365c:	526d6152 	rsbpl	r6, sp, #-2147483628	; 0x80000014
    3660:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    3664:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    3668:	616f6c00 	cmnvs	pc, r0, lsl #24
    366c:	4f4e0064 	svcmi	0x004e0064
    3670:	5f4d4f52 	svcpl	0x004d4f52
    3674:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3678:	416c7274 	smcmi	50980	; 0xc724
    367c:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    3680:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    3684:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3688:	74664165 	strbtvc	r4, [r6], #-357	; 0xfffffe9b
    368c:	6f507265 	svcvs	0x00507265
    3690:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    3694:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3698:	4f524f4e 	svcmi	0x00524f4e
    369c:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    36a0:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    36a4:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
    36a8:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    36ac:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    36b0:	6f666542 	svcvs	0x00666542
    36b4:	6f506572 	svcvs	0x00506572
    36b8:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    36bc:	006e776f 	rsbeq	r7, lr, pc, ror #14
    36c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    36c4:	2f2e2e2f 	svccs	0x002e2e2f
    36c8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 36d0 <NOROM_SetupSetVddrLevel+0x50>
    36cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    36d0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    36d4:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    36d8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    36dc:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    36e0:	4f524f4e 	svcmi	0x00524f4e
    36e4:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    36e8:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    36ec:	7365526c 	cmnvc	r5, #108, 4	; 0xc0000006
    36f0:	6f537465 	svcvs	0x00537465
    36f4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    36f8:	00746547 	rsbseq	r6, r4, r7, asr #10
    36fc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3700:	616d6f44 	cmnvs	sp, r4, asr #30
    3704:	00736e69 	rsbseq	r6, r3, r9, ror #28
    3708:	45726570 	ldrbmi	r6, [r2, #-1392]!	; 0xfffffa90
    370c:	54647000 	strbtpl	r7, [r4], #-0
    3710:	00706d65 	rsbseq	r6, r0, r5, ror #26
    3714:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3718:	43787541 	cmnmi	r8, #272629760	; 0x10400000
    371c:	6b636f6c 	blvs	18df4d4 <__ccfg+0x18bf52c>
    3720:	52500073 	subspl	r0, r0, #115	; 0x73
    3724:	6f444d43 	svcvs	0x00444d43
    3728:	6e69616d 	powvsez	f6, f1, #5.0
    372c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    3730:	7000656c 	andvc	r6, r0, ip, ror #10
    3734:	004d7265 	subeq	r7, sp, r5, ror #4
    3738:	5277656e 	rsbspl	r6, r7, #461373440	; 0x1b800000
    373c:	61686365 	cmnvs	r8, r5, ror #6
    3740:	50656772 	rsbpl	r6, r5, r2, ror r7
    3744:	6f697265 	svcvs	0x00697265
    3748:	64760064 	ldrbtvs	r0, [r6], #-100	; 0xffffff9c
    374c:	61437264 	cmpvs	r3, r4, ror #4
    3750:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    3754:	64493233 	strbvs	r3, [r9], #-563	; 0xfffffdcd
    3758:	64700078 	ldrbtvs	r0, [r0], #-120	; 0xffffff88
    375c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3760:	6f6c0065 	svcvs	0x006c0065
    3764:	7365676e 	cmnvc	r5, #28835840	; 0x1b80000
    3768:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    376c:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3770:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3774:	00646f69 	rsbeq	r6, r4, r9, ror #30
    3778:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    377c:	64645661 	strbtvs	r5, [r4], #-1633	; 0xfffff99f
    3780:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    3784:	72547065 	subsvc	r7, r4, #101	; 0x65
    3788:	62006d69 	andvs	r6, r0, #6720	; 0x1a40
    378c:	68547461 	ldmdavs	r4, {r0, r5, r6, sl, ip, sp, lr}^
    3790:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3794:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    3798:	63736f78 	cmnvs	r3, #120, 30	; 0x1e0
    379c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    37a0:	646f4d72 	strbtvs	r4, [pc], #-3442	; 37a8 <NOROM_SetupGetTrimForAnabypassValue1>
    37a4:	52500065 	subspl	r0, r0, #101	; 0x65
    37a8:	6f4c4d43 	svcvs	0x004c4d43
    37ac:	65476461 	strbvs	r6, [r7, #-1121]	; 0xfffffb9f
    37b0:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
    37b4:	65746669 	ldrbvs	r6, [r4, #-1641]!	; 0xfffff997
    37b8:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    37bc:	63740070 	cmnvs	r4, #112	; 0x70
    37c0:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    37c4:	5f670061 	svcpl	0x00670061
    37c8:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    37cc:	646f4d32 	strbtvs	r4, [pc], #-3378	; 37d4 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    37d0:	43656c75 	cmnmi	r5, #29952	; 0x7500
    37d4:	75630047 	strbvc	r0, [r3, #-71]!	; 0xffffffb9
    37d8:	61745372 	cmnvs	r4, r2, ror r3
    37dc:	61006574 	tstvs	r0, r4, ror r5
    37e0:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    37e4:	6c746373 	ldclvs	3, cr6, [r4], #-460	; 0xfffffe34
    37e8:	63727750 	cmnvs	r2, #80, 14	; 0x1400000
    37ec:	70006c74 	andvc	r6, r0, r4, ror ip
    37f0:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    37f4:	4f4e0065 	svcmi	0x004e0065
    37f8:	5f4d4f52 	svcpl	0x004d4f52
    37fc:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    3800:	506c7274 	rsbpl	r7, ip, r4, ror r2
    3804:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    3808:	72657645 	rsbvc	r7, r5, #72351744	; 0x4500000
    380c:	69687479 	stmdbvs	r8!, {r0, r3, r4, r5, r6, sl, ip, sp, lr}^
    3810:	7000676e 	andvc	r6, r0, lr, ror #14
    3814:	6b6f6f4c 	blvs	1bdf54c <__ccfg+0x1bbf5a4>
    3818:	61547075 	cmpvs	r4, r5, ror r0
    381c:	00656c62 	rsbeq	r6, r5, r2, ror #24
    3820:	65526470 	ldrbvs	r6, [r2, #-1136]	; 0xfffffb90
    3824:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    3828:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    382c:	646f6972 	strbtvs	r6, [pc], #-2418	; 3834 <NOROM_SetupGetTrimForAmpcompTh1+0x8>
    3830:	6e6f6100 	powvse	f6, f7, f0
    3834:	6d746142 	ldfvse	f6, [r4, #-264]!	; 0xfffffef8
    3838:	61426e6f 	cmpvs	r2, pc, ror #28
    383c:	64760074 	ldrbtvs	r0, [r6], #-116	; 0xffffff8c
    3840:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    3844:	6c536d69 	mrrcvs	13, 6, r6, r3, cr9
    3848:	00706565 	rsbseq	r6, r0, r5, ror #10
    384c:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3850:	61755172 	cmnvs	r5, r2, ror r1
    3854:	6f6c476c 	svcvs	0x006c476c
    3858:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    385c:	4e00745f 	cfmvsrmi	mvf0, r7
    3860:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 372c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x30>
    3864:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    3868:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    386c:	4443445f 	strbmi	r4, [r3], #-1119	; 0xfffffba1
    3870:	6f565f43 	svcvs	0x00565f43
    3874:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    3878:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    387c:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    3880:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    3884:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    3888:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    388c:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xfffff090
    3890:	61755172 	cmnvs	r5, r2, ror r1
    3894:	6f6c476c 	svcvs	0x006c476c
    3898:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    389c:	4f525000 	svcmi	0x00525000
    38a0:	4f434f54 	svcmi	0x00434f54
    38a4:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    38a8:	6f72505f 	svcvs	0x0072505f
    38ac:	65697270 	strbvs	r7, [r9, #-624]!	; 0xfffffd90
    38b0:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    38b4:	43415000 	movtmi	r5, #4096	; 0x1000
    38b8:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    38bc:	3478345f 	ldrbtcc	r3, [r8], #-1119	; 0xfffffba1
    38c0:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    38c4:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    38c8:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    38cc:	34363243 	ldrtcc	r3, [r6], #-579	; 0xfffffdbd
    38d0:	61770030 	cmnvs	r7, r0, lsr r0
    38d4:	49726566 	ldmdbmi	r2!, {r1, r2, r5, r6, r8, sl, sp, lr}^
    38d8:	41460064 	cmpmi	r6, r4, rrx
    38dc:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    38e0:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    38e4:	5f787836 	svcpl	0x00787836
    38e8:	007a694c 	rsbseq	r6, sl, ip, asr #18
    38ec:	4f524f4e 	svcmi	0x00524f4e
    38f0:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    38f4:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    38f8:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    38fc:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3900:	61467069 	cmpvs	r6, r9, rrx
    3904:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    3908:	524f4e00 	subpl	r4, pc, #0, 28
    390c:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    3910:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3914:	5f6f666e 	svcpl	0x006f666e
    3918:	50746547 	rsbspl	r6, r4, r7, asr #10
    391c:	616b6361 	cmnvs	fp, r1, ror #6
    3920:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    3924:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
    3928:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 37f4 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    392c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3930:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3934:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3938:	52774874 	rsbspl	r4, r7, #116, 16	; 0x740000
    393c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    3940:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    3944:	6b636170 	blvs	18dbf0c <__ccfg+0x18bbf64>
    3948:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    394c:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3950:	70795470 	rsbsvc	r5, r9, r0, ror r4
    3954:	00745f65 	rsbseq	r5, r4, r5, ror #30
    3958:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    395c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3960:	745f6e6f 	ldrbvc	r6, [pc], #-3695	; 3968 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>
    3964:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3968:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    396c:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3970:	31333143 	teqcc	r3, r3, asr #2
    3974:	68430030 	stmdavs	r3, {r4, r5}^
    3978:	61467069 	cmpvs	r6, r9, rrx
    397c:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    3980:	6800745f 	stmdavs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    3984:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3988:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    398c:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3990:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3994:	35363243 	ldrcc	r3, [r6, #-579]!	; 0xfffffdbd
    3998:	41500030 	cmpmi	r0, r0, lsr r0
    399c:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    39a0:	43575f45 	cmpmi	r7, #276	; 0x114
    39a4:	6d005053 	stcvs	0, cr5, [r0, #-332]	; 0xfffffeb4
    39a8:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    39ac:	00766552 	rsbseq	r6, r6, r2, asr r5
    39b0:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    39b4:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    39b8:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    39bc:	32525f78 	subscc	r5, r2, #120, 30	; 0x1e0
    39c0:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    39c4:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    39c8:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    39cc:	35333143 	ldrcc	r3, [r3, #-323]!	; 0xfffffebd
    39d0:	68430030 	stmdavs	r3, {r4, r5}^
    39d4:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    39d8:	435f6f66 	cmpmi	pc, #408	; 0x198
    39dc:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    39e0:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    39e4:	43734979 	cmnmi	r3, #1982464	; 0x1e4000
    39e8:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    39ec:	41460078 	hvcmi	24584	; 0x6008
    39f0:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    39f4:	6b6e555f 	blvs	1b98f78 <__ccfg+0x1b78fd0>
    39f8:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    39fc:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3a00:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3a04:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3a08:	32363243 	eorscc	r3, r6, #805306372	; 0x30000004
    3a0c:	63660030 	cmnvs	r6, #48	; 0x30
    3a10:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
    3a14:	46007665 	strmi	r7, [r0], -r5, ror #12
    3a18:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3a1c:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3a20:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    3a24:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    3a28:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    3a2c:	52574800 	subspl	r4, r7, #0, 16
    3a30:	555f5645 	ldrbpl	r5, [pc, #-1605]	; 33f3 <NOROM_RFCRTrim+0x3f>
    3a34:	6f6e6b6e 	svcvs	0x006e6b6e
    3a38:	66006e77 			; <UNDEFINED> instruction: 0x66006e77
    3a3c:	31676663 	cmncc	r7, r3, ror #12
    3a40:	746f7250 	strbtvc	r7, [pc], #-592	; 3a48 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xdc>
    3a44:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3890 <NOROM_SetupGetTrimForAmpcompCtrl+0x50>
    3a48:	6f725000 	svcvs	0x00725000
    3a4c:	6f636f74 	svcvs	0x00636f74
    3a50:	7469426c 	strbtvc	r4, [r9], #-620	; 0xfffffd94
    3a54:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    3a58:	745f726f 	ldrbvc	r7, [pc], #-623	; 3a60 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>
    3a5c:	4f525000 	svcmi	0x00525000
    3a60:	4f434f54 	svcmi	0x00434f54
    3a64:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    3a68:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
    3a6c:	30385f45 	eorscc	r5, r8, r5, asr #30
    3a70:	35315f32 	ldrcc	r5, [r1, #-3890]!	; 0xfffff0ce
    3a74:	4300345f 	movwmi	r3, #1119	; 0x45f
    3a78:	5f504948 	svcpl	0x00504948
    3a7c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3a80:	6b6e555f 	blvs	1b99004 <__ccfg+0x1b7905c>
    3a84:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    3a88:	52574800 	subspl	r4, r7, #0, 16
    3a8c:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3a90:	4600325f 			; <UNDEFINED> instruction: 0x4600325f
    3a94:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    3a98:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3a9c:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3aa0:	43415000 	movtmi	r5, #4096	; 0x1000
    3aa4:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3aa8:	3778375f 			; <UNDEFINED> instruction: 0x3778375f
    3aac:	4f525000 	svcmi	0x00525000
    3ab0:	4f434f54 	svcmi	0x00434f54
    3ab4:	6e555f4c 	cdpvs	15, 5, cr5, cr5, cr12, {2}
    3ab8:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3abc:	5748006e 	strbpl	r0, [r8, -lr, rrx]
    3ac0:	5f564552 	svcpl	0x00564552
    3ac4:	00305f32 	eorseq	r5, r0, r2, lsr pc
    3ac8:	4f524f4e 	svcmi	0x00524f4e
    3acc:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3ad0:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3ad4:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    3ad8:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3adc:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    3ae0:	48006570 	stmdami	r0, {r4, r5, r6, r8, sl, sp, lr}
    3ae4:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3ae8:	315f325f 	cmpcc	pc, pc, asr r2	; <UNPREDICTABLE>
    3aec:	4f525000 	svcmi	0x00525000
    3af0:	4f434f54 	svcmi	0x00434f54
    3af4:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    3af8:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    3afc:	4d414600 	stclmi	6, cr4, [r1, #-0]
    3b00:	5f594c49 	svcpl	0x00594c49
    3b04:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    3b08:	415f7878 	cmpmi	pc, r8, ror r8	; <UNPREDICTABLE>
    3b0c:	48006167 	stmdami	r0, {r0, r1, r2, r5, r6, r8, sp, lr}
    3b10:	56455257 			; <UNDEFINED> instruction: 0x56455257
    3b14:	335f325f 	cmpcc	pc, #-268435451	; 0xf0000005
    3b18:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    3b1c:	70795470 	rsbsvc	r5, r9, r0, ror r4
    3b20:	48430065 	stmdami	r3, {r0, r2, r5, r6}^
    3b24:	545f5049 	ldrbpl	r5, [pc], #-73	; 3b2c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x24>
    3b28:	5f455059 	svcpl	0x00455059
    3b2c:	54535543 	ldrbpl	r5, [r3], #-1347	; 0xfffffabd
    3b30:	305f4d4f 	subscc	r4, pc, pc, asr #26
    3b34:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3b38:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3b3c:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3b40:	4f545355 	svcmi	0x00545355
    3b44:	00315f4d 	eorseq	r5, r1, sp, asr #30
    3b48:	50494843 	subpl	r4, r9, r3, asr #16
    3b4c:	5059545f 	subspl	r5, r9, pc, asr r4
    3b50:	43435f45 	movtmi	r5, #16197	; 0x3f45
    3b54:	30333632 	eorscc	r3, r3, r2, lsr r6
    3b58:	52574800 	subspl	r4, r7, #0, 16
    3b5c:	315f5645 	cmpcc	pc, r5, asr #12
    3b60:	5000305f 	andpl	r3, r0, pc, asr r0
    3b64:	414b4341 	cmpmi	fp, r1, asr #6
    3b68:	555f4547 	ldrbpl	r4, [pc, #-1351]	; 3629 <NOROM_SetupTrimDevice+0x4d>
    3b6c:	6f6e6b6e 	svcvs	0x006e6b6e
    3b70:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    3b74:	2f2e2e2f 	svccs	0x002e2e2f
    3b78:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3b7c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3b80:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3b84:	2f62696c 	svccs	0x0062696c
    3b88:	70696863 	rsbvc	r6, r9, r3, ror #16
    3b8c:	6f666e69 	svcvs	0x00666e69
    3b90:	6600632e 	strvs	r6, [r0], -lr, lsr #6
    3b94:	31676663 	cmncc	r7, r3, ror #12
    3b98:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    3b9c:	43006449 	movwmi	r6, #1097	; 0x449
    3ba0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3ba4:	5f6f666e 	svcpl	0x006f666e
    3ba8:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    3bac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3bb0:	48644965 	stmdami	r4!, {r0, r2, r5, r6, r8, fp, lr}^
    3bb4:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3bb8:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    3bbc:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3bc0:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3bc4:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3bc8:	6e694d74 	mcrvs	13, 3, r4, cr9, cr4, {3}
    3bcc:	7748726f 	strbvc	r7, [r8, -pc, ror #4]
    3bd0:	00766552 	rsbseq	r6, r6, r2, asr r5
    3bd4:	6f6e696d 	svcvs	0x006e696d
    3bd8:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    3bdc:	4e007665 	cfmadd32mi	mvax3, mvfx7, mvfx0, mvfx5
    3be0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3aac <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x30>
    3be4:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    3be8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3bec:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3bf0:	70755374 	rsbsvc	r5, r5, r4, ror r3
    3bf4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    3bf8:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
    3bfc:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    3c00:	425f6c6f 	subsmi	r6, pc, #28416	; 0x6f00
    3c04:	41500056 	cmpmi	r0, r6, asr r0
    3c08:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3c0c:	41575f45 	cmpmi	r7, r5, asr #30
    3c10:	00524546 	subseq	r4, r2, r6, asr #10
    3c14:	4b434150 	blmi	10d415c <__ccfg+0x10b41b4>
    3c18:	5f454741 	svcpl	0x00454741
    3c1c:	00357835 	eorseq	r7, r5, r5, lsr r8
    3c20:	6b636150 	blvs	18dc168 <__ccfg+0x18bc1c0>
    3c24:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
    3c28:	5f657079 	svcpl	0x00657079
    3c2c:	68430074 	stmdavs	r3, {r2, r4, r5, r6}^
    3c30:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3c34:	485f6f66 	ldmdami	pc, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    3c38:	76655277 			; <UNDEFINED> instruction: 0x76655277
    3c3c:	6f697369 	svcvs	0x00697369
    3c40:	5f73496e 	svcpl	0x0073496e
    3c44:	51455447 	cmppl	r5, r7, asr #8
    3c48:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    3c4c:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3c50:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3c54:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3c58:	65735574 	ldrbvs	r5, [r3, #-1396]!	; 0xfffffa8c
    3c5c:	00644972 	rsbeq	r4, r4, r2, ror r9
    3c60:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3c64:	00676552 	rsbeq	r6, r7, r2, asr r5
    3c68:	4f524f4e 	svcmi	0x00524f4e
    3c6c:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3c70:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3c74:	69667469 	stmdbvs	r6!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3c78:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
    3c7c:	00646165 	rsbeq	r6, r4, r5, ror #2
    3c80:	6464416e 	strbtvs	r4, [r4], #-366	; 0xfffffe92
    3c84:	4f4e0072 	svcmi	0x004e0072
    3c88:	5f4d4f52 	svcpl	0x004d4f52
    3c8c:	31494444 	cmpcc	r9, r4, asr #8
    3c90:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    3c94:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    3c98:	65526e00 	ldrbvs	r6, [r2, #-3584]	; 0xfffff200
    3c9c:	75410074 	strbvc	r0, [r1, #-116]	; 0xffffff8c
    3ca0:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    3ca4:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    3ca8:	57656661 	strbpl	r6, [r5, -r1, ror #12]!
    3cac:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3cb0:	31697500 	cmncc	r9, r0, lsl #10
    3cb4:	74614436 	strbtvc	r4, [r1], #-1078	; 0xfffffbca
    3cb8:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    3cbc:	72573233 	subsvc	r3, r7, #805306371	; 0x30000003
    3cc0:	61746144 	cmnvs	r4, r4, asr #2
    3cc4:	33697500 	cmncc	r9, #0, 10
    3cc8:	74614432 	strbtvc	r4, [r1], #-1074	; 0xfffffbce
    3ccc:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    3cd0:	68533233 	ldmdavs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    3cd4:	00746669 	rsbseq	r6, r4, r9, ror #12
    3cd8:	4f524f4e 	svcmi	0x00524f4e
    3cdc:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3ce0:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3ce4:	69667469 	stmdbvs	r6!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    3ce8:	57646c65 	strbpl	r6, [r4, -r5, ror #24]!
    3cec:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3cf0:	61446e00 	cmpvs	r4, r0, lsl #28
    3cf4:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    3cf8:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    3cfc:	41006c61 	tstmi	r0, r1, ror #24
    3d00:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    3d04:	69644469 	stmdbvs	r4!, {r0, r3, r5, r6, sl, lr}^
    3d08:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    3d0c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    3d10:	524f4e00 	subpl	r4, pc, #0, 28
    3d14:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 3d1c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc4>
    3d18:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    3d1c:	57746942 	ldrbpl	r6, [r4, -r2, asr #18]!
    3d20:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3d24:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    3d28:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3d2c:	2f2e2e2f 	svccs	0x002e2e2f
    3d30:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3d34:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3d38:	64642f62 	strbtvs	r2, [r4], #-3938	; 0xfffff09e
    3d3c:	00632e69 	rsbeq	r2, r3, r9, ror #28
    3d40:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3d44:	41676552 	cmnmi	r7, r2, asr r5
    3d48:	00726464 	rsbseq	r6, r2, r4, ror #8
    3d4c:	7a69536e 	bvc	1a58b0c <__ccfg+0x1a38b64>
    3d50:	435f0065 	cmpmi	pc, #101	; 0x65
    3d54:	6d756e5f 	ldclvs	14, cr6, [r5, #-380]!	; 0xfffffe84
    3d58:	63697265 	cmnvs	r9, #1342177286	; 0x50000006
    3d5c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
    3d60:	00656c61 	rsbeq	r6, r5, r1, ror #24
    3d64:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    3d68:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    3d6c:	6d79735f 	ldclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    3d70:	006c6f62 	rsbeq	r6, ip, r2, ror #30
    3d74:	70797463 	rsbsvc	r7, r9, r3, ror #8
    3d78:	74705f65 	ldrbtvc	r5, [r0], #-3941	; 0xfffff09b
    3d7c:	73640072 	cmnvc	r4, #114	; 0x72
    3d80:	61003074 	tstvs	r0, r4, ror r0
    3d84:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    3d88:	645f6465 	ldrbvs	r6, [pc], #-1125	; 3d90 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    3d8c:	69007473 	stmdbvs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    3d90:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    3d94:	7065735f 	rsbvc	r7, r5, pc, asr r3
    3d98:	5f79625f 	svcpl	0x0079625f
    3d9c:	63617073 	cmnvs	r1, #115	; 0x73
    3da0:	636c0065 	cmnvs	ip, #101	; 0x65
    3da4:	00766e6f 	rsbseq	r6, r6, pc, ror #28
    3da8:	5f6b6a63 	svcpl	0x006b6a63
    3dac:	676e616c 	strbvs	r6, [lr, -ip, ror #2]!
    3db0:	5f636c00 	svcpl	0x00636c00
    3db4:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
    3db8:	5f636972 	svcpl	0x00636972
    3dbc:	435f0054 	cmpmi	pc, #84	; 0x54
    3dc0:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    3dc4:	6f6c5f65 	svcvs	0x006c5f65
    3dc8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    3dcc:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    3dd0:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    3dd4:	79735f72 	ldmdbvc	r3!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3dd8:	6c6f626d 	sfmvs	f6, 2, [pc], #-436	; 3c2c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>
    3ddc:	5f636c00 	svcpl	0x00636c00
    3de0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    3de4:	6100545f 	tstvs	r0, pc, asr r4
    3de8:	645f746c 	ldrbvs	r7, [pc], #-1132	; 3df0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x198>
    3dec:	74696769 	strbtvc	r6, [r9], #-1897	; 0xfffff897
    3df0:	435f0073 	cmpmi	pc, #115	; 0x73
    3df4:	7974635f 	ldmdbvc	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sp, lr}^
    3df8:	6c5f6570 	cfldr64vs	mvdx6, [pc], {112}	; 0x70
    3dfc:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    3e00:	6d610065 	stclvs	0, cr0, [r1, #-404]!	; 0xfffffe6c
    3e04:	006d705f 	rsbeq	r7, sp, pc, asr r0
    3e08:	5f617265 	svcpl	0x00617265
    3e0c:	5f745f64 	svcpl	0x00745f64
    3e10:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3e14:	74736f6e 	ldrbtvc	r6, [r3], #-3950	; 0xfffff092
    3e18:	636c0072 	cmnvs	ip, #114	; 0x72
    3e1c:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    3e20:	72617465 	rsbvc	r7, r1, #1694498816	; 0x65000000
    3e24:	00545f79 	subseq	r5, r4, r9, ror pc
    3e28:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
    3e2c:	5f656761 	svcpl	0x00656761
    3e30:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    3e34:	00746573 	rsbseq	r6, r4, r3, ror r5
    3e38:	6f74626d 	svcvs	0x0074626d
    3e3c:	5f006377 	svcpl	0x00006377
    3e40:	656d5f43 	strbvs	r5, [sp, #-3907]!	; 0xfffff0bd
    3e44:	67617373 			; <UNDEFINED> instruction: 0x67617373
    3e48:	6c5f7365 	mrrcvs	3, 6, r7, pc, cr5	; <UNPREDICTABLE>
    3e4c:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    3e50:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
    3e54:	5f705f74 	svcpl	0x00705f74
    3e58:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
    3e5c:	736f705f 	cmnvc	pc, #95	; 0x5f
    3e60:	6f6d006e 	svcvs	0x006d006e
    3e64:	72675f6e 	rsbvc	r5, r7, #440	; 0x1b8
    3e68:	6970756f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    3e6c:	5800676e 	stmdapl	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    3e70:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    3e74:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    3e78:	635f705f 	cmpvs	pc, #95	; 0x5f
    3e7c:	72705f73 	rsbsvc	r5, r0, #460	; 0x1cc
    3e80:	64656365 	strbtvs	r6, [r5], #-869	; 0xfffffc9b
    3e84:	6d007365 	stcvs	3, cr7, [r0, #-404]	; 0xfffffe6c
    3e88:	645f6e6f 	ldrbvs	r6, [pc], #-3695	; 3e90 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x18>
    3e8c:	6d696365 	stclvs	3, cr6, [r9, #-404]!	; 0xfffffe6c
    3e90:	705f6c61 	subsvc	r6, pc, r1, ror #24
    3e94:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
    3e98:	665f6300 	ldrbvs	r6, [pc], -r0, lsl #6
    3e9c:	6400746d 	strvs	r7, [r0], #-1133	; 0xfffffb93
    3ea0:	5f657461 	svcpl	0x00657461
    3ea4:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3ea8:	6167656e 	cmnvs	r7, lr, ror #10
    3eac:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    3eb0:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
    3eb4:	626d006e 	rsbvs	r0, sp, #110	; 0x6e
    3eb8:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
    3ebc:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
    3ec0:	68637700 	stmdavs	r3!, {r8, r9, sl, ip, sp, lr}^
    3ec4:	745f7261 	ldrbvc	r7, [pc], #-609	; 3ecc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>
    3ec8:	736f7000 	cmnvc	pc, #0
    3ecc:	76697469 	strbtvc	r7, [r9], -r9, ror #8
    3ed0:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ed4:	63006e67 	movwvs	r6, #3687	; 0xe67
    3ed8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    3edc:	646f635f 	strbtvs	r6, [pc], #-863	; 3ee4 <NOROM_SysCtrlResetSourceGet+0xc>
    3ee0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    3ee4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    3ee8:	6f642067 	svcvs	0x00642067
    3eec:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
    3ef0:	656f6e00 	strbvs	r6, [pc, #-3584]!	; 30f8 <NOROM_OSCClockSourceSet+0x3c>
    3ef4:	00727078 	rsbseq	r7, r2, r8, ror r0
    3ef8:	6d665f78 	stclvs	15, cr5, [r6, #-480]!	; 0xfffffe20
    3efc:	75730074 	ldrbvc	r0, [r3, #-116]!	; 0xffffff8c
    3f00:	74706f62 	ldrbtvc	r6, [r0], #-3938	; 0xfffff09e
    3f04:	00677261 	rsbeq	r7, r7, r1, ror #4
    3f08:	5f746e69 	svcpl	0x00746e69
    3f0c:	65735f70 	ldrbvs	r5, [r3, #-3952]!	; 0xfffff090
    3f10:	79625f70 	stmdbvc	r2!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f14:	6170735f 	cmnvs	r0, pc, asr r3
    3f18:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    3f1c:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    3f20:	5f73635f 	svcpl	0x0073635f
    3f24:	63657270 	cmnvs	r5, #112, 4
    3f28:	73656465 	cmnvc	r5, #1694498816	; 0x65000000
    3f2c:	2f2e2e00 	svccs	0x002e2e00
    3f30:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3f34:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3f38:	2f2e2e2f 	svccs	0x002e2e2f
    3f3c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3f40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3f44:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    3f48:	2f62696c 	svccs	0x0062696c
    3f4c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    3f50:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    3f54:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    3f58:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3f5c:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	; 0xffffff44
    3f60:	2d797063 	ldclcs	0, cr7, [r9, #-396]!	; 0xfffffe74
    3f64:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    3f68:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    3f6c:	726f5f64 	rsbvc	r5, pc, #100, 30	; 0x190
    3f70:	00726564 	rsbseq	r6, r2, r4, ror #10
    3f74:	73736579 	cmnvc	r3, #507510784	; 0x1e400000
    3f78:	79007274 	stmdbvc	r0, {r2, r4, r5, r6, r9, ip, sp, lr}
    3f7c:	78657365 	stmdavc	r5!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
    3f80:	65007270 	strvs	r7, [r0, #-624]	; 0xfffffd90
    3f84:	645f6172 	ldrbvs	r6, [pc], #-370	; 3f8c <NOROM_ChipInfo_GetHwRevision+0x50>
    3f88:	746d665f 	strbtvc	r6, [sp], #-1631	; 0xfffff9a1
    3f8c:	5f636c00 	svcpl	0x00636c00
    3f90:	70797463 	rsbsvc	r7, r9, r3, ror #8
    3f94:	00545f65 	subseq	r5, r4, r5, ror #30
    3f98:	5f617265 	svcpl	0x00617265
    3f9c:	6d665f74 	stclvs	15, cr5, [r6, #-464]!	; 0xfffffe30
    3fa0:	63770074 	cmnvs	r7, #116	; 0x74
    3fa4:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
    3fa8:	6e6f6d00 	cdpvs	13, 6, cr6, cr15, cr0, {0}
    3fac:	6f68745f 	svcvs	0x0068745f
    3fb0:	6e617375 	mcrvs	3, 3, r7, cr1, cr5, {3}
    3fb4:	735f7364 	cmpvc	pc, #100, 6	; 0x90000001
    3fb8:	61007065 	tstvs	r0, r5, rrx
    3fbc:	5f6d706d 	svcpl	0x006d706d
    3fc0:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3fc4:	6d5f636c 	ldclvs	3, cr6, [pc, #-432]	; 3e1c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c4>
    3fc8:	61737365 	cmnvs	r3, r5, ror #6
    3fcc:	5f736567 	svcpl	0x00736567
    3fd0:	65770054 	ldrbvs	r0, [r7, #-84]!	; 0xffffffac
    3fd4:	61646b65 	cmnvs	r4, r5, ror #22
    3fd8:	435f0079 	cmpmi	pc, #121	; 0x79
    3fdc:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
    3fe0:	72617465 	rsbvc	r7, r1, #1694498816	; 0x65000000
    3fe4:	6f6c5f79 	svcvs	0x006c5f79
    3fe8:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    3fec:	74616300 	strbtvc	r6, [r1], #-768	; 0xfffffd00
    3ff0:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
    3ff4:	00736569 	rsbseq	r6, r3, r9, ror #10
    3ff8:	5f746e69 	svcpl	0x00746e69
    3ffc:	69735f6e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    4000:	705f6e67 	subsvc	r6, pc, r7, ror #28
    4004:	006e736f 	rsbeq	r7, lr, pc, ror #6
    4008:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    400c:	5f64656e 	svcpl	0x0064656e
    4010:	00637273 	rsbeq	r7, r3, r3, ror r2
    4014:	20554e47 	subscs	r4, r5, r7, asr #28
    4018:	20373143 	eorscs	r3, r7, r3, asr #2
    401c:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    4020:	30322031 	eorscc	r2, r2, r1, lsr r0
    4024:	37303931 			; <UNDEFINED> instruction: 0x37303931
    4028:	28203330 	stmdacs	r0!, {r4, r5, r8, r9, ip, sp}
    402c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    4030:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    4034:	63675b20 	cmnvs	r7, #32, 22	; 0x8000
    4038:	2d382d63 	ldccs	13, cr2, [r8, #-396]!	; 0xfffffe74
    403c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    4040:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    4044:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    4048:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    404c:	30333732 	eorscc	r3, r3, r2, lsr r7
    4050:	205d3732 	subscs	r3, sp, r2, lsr r7
    4054:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    4058:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    405c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4060:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    4064:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    4068:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    406c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
    4070:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
    4074:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
    4078:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
    407c:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
    4080:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
    4084:	376d7261 	strbcc	r7, [sp, -r1, ror #4]!
    4088:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    408c:	616d2d20 	cmnvs	sp, r0, lsr #26
    4090:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    4094:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    4098:	2d207434 	cfstrscs	mvf7, [r0, #-208]!	; 0xffffff30
    409c:	4f2d2067 	svcmi	0x002d2067
    40a0:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    40a4:	622d6f6e 	eorvs	r6, sp, #440	; 0x1b8
    40a8:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    40ac:	2f006e69 	svccs	0x00006e69
    40b0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    40b4:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    40b8:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    40bc:	5656432d 	ldrbpl	r4, [r6], -sp, lsr #6
    40c0:	2f787945 	svccs	0x00787945
    40c4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    40c8:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    40cc:	302e332e 	eorcc	r3, lr, lr, lsr #6
    40d0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    40d4:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    40d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    40dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    40e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    40e4:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    40e8:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    40ec:	2f70666f 	svccs	0x0070666f
    40f0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    40f4:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 3f58 <NOROM_ChipInfo_GetHwRevision+0x1c>
    40f8:	2f636269 	svccs	0x00636269
    40fc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4100:	2f656e69 	svccs	0x00656e69
    4104:	006d7261 	rsbeq	r7, sp, r1, ror #4
    4108:	306e656c 	rsbcc	r6, lr, ip, ror #10
    410c:	746e6900 	strbtvc	r6, [lr], #-2304	; 0xfffff700
    4110:	6172665f 	cmnvs	r2, pc, asr r6
    4114:	69645f63 	stmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    4118:	73746967 	cmnvc	r4, #1687552	; 0x19c000
    411c:	63727300 	cmnvs	r2, #0, 6
    4120:	6c610030 	stclvs	0, cr0, [r1], #-192	; 0xffffff40
    4124:	6f6d5f74 	svcvs	0x006d5f74
    4128:	0068746e 	rsbeq	r7, r8, lr, ror #8
    412c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4130:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4134:	2f2e2e2f 	svccs	0x002e2e2f
    4138:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    413c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4140:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4144:	2f62696c 	svccs	0x0062696c
    4148:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    414c:	6474732f 	ldrbtvs	r7, [r4], #-815	; 0xfffffcd1
    4150:	2f62696c 	svccs	0x0062696c
    4154:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    4158:	7300632e 	movwvc	r6, #814	; 0x32e
    415c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
    4160:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    4164:	2f646c69 	svccs	0x00646c69
    4168:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    416c:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    4170:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    4174:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    4178:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    417c:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    4180:	622f302e 	eorvs	r3, pc, #46	; 0x2e
    4184:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4188:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    418c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4190:	61652d65 	cmnvs	r5, r5, ror #26
    4194:	742f6962 	strtvc	r6, [pc], #-2402	; 419c <__aeabi_lmul+0x50>
    4198:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    419c:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    41a0:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xfffff090
    41a4:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    41a8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    41ac:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    41b0:	62696c64 	rsbvs	r6, r9, #100, 24	; 0x6400
    41b4:	61645f00 	cmnvs	r4, r0, lsl #30
    41b8:	67696c79 			; <UNDEFINED> instruction: 0x67696c79
    41bc:	5f007468 	svcpl	0x00007468
    41c0:	616e7a74 	smcvs	59300	; 0xe7a4
    41c4:	5f00656d 	svcpl	0x0000656d
    41c8:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    41cc:	6f656d69 	svcvs	0x00656d69
    41d0:	79616466 	stmdbvc	r1!, {r1, r2, r5, r6, sl, sp, lr}^
    41d4:	5f00725f 	svcpl	0x0000725f
    41d8:	7375735f 	cmnvc	r5, #2080374785	; 0x7c000001
    41dc:	6e6f6365 	cdpvs	3, 6, cr6, cr15, cr5, {3}
    41e0:	745f7364 	ldrbvc	r7, [pc], #-868	; 41e8 <_gettimeofday+0x48>
    41e4:	2f2e2e00 	svccs	0x002e2e00
    41e8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    41ec:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    41f0:	2f2e2e2f 	svccs	0x002e2e2f
    41f4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    41f8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    41fc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4200:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4204:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    4208:	742f656d 	strtvc	r6, [pc], #-1389	; 4210 <_gettimeofday+0x70>
    420c:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    4210:	76740063 	ldrbtvc	r0, [r4], -r3, rrx
    4214:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    4218:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    421c:	2f646c69 	svccs	0x00646c69
    4220:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4224:	432d6269 			; <UNDEFINED> instruction: 0x432d6269
    4228:	79455656 	stmdbvc	r5, {r1, r2, r4, r6, r9, sl, ip, lr}^
    422c:	656e2f78 	strbvs	r2, [lr, #-3960]!	; 0xfffff088
    4230:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4234:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    4238:	622f302e 	eorvs	r3, pc, #46	; 0x2e
    423c:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4240:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4244:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4248:	61652d65 	cmnvs	r5, r5, ror #26
    424c:	742f6962 	strtvc	r6, [pc], #-2402	; 4254 <_gettimeofday+0xb4>
    4250:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    4254:	666f6e2f 	strbtvs	r6, [pc], -pc, lsr #28
    4258:	656e2f70 	strbvs	r2, [lr, #-3952]!	; 0xfffff090
    425c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4260:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4264:	69742f63 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
    4268:	5f00656d 	svcpl	0x0000656d
    426c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    4270:	656e6f7a 	strbvs	r6, [lr, #-3962]!	; 0xfffff086
    4274:	5f767400 	svcpl	0x00767400
    4278:	63657375 	cmnvs	r5, #-738197503	; 0xd4000001
    427c:	2f2e2e00 	svccs	0x002e2e00
    4280:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4284:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4288:	2f2e2e2f 	svccs	0x002e2e2f
    428c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4290:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4294:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4298:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    429c:	65722f63 	ldrbvs	r2, [r2, #-3939]!	; 0xfffff09d
    42a0:	2f746e65 	svccs	0x00746e65
    42a4:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    42a8:	6f656d69 	svcvs	0x00656d69
    42ac:	79616466 	stmdbvc	r1!, {r1, r2, r5, r6, sl, sp, lr}^
    42b0:	00632e72 	rsbeq	r2, r3, r2, ror lr
    42b4:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
    42b8:	6e6f7a65 	vnmulvs.f32	s15, s30, s11
    42bc:	622f0065 	eorvs	r0, pc, #101	; 0x65
    42c0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    42c4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    42c8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    42cc:	45565643 	ldrbmi	r5, [r6, #-1603]	; 0xfffff9bd
    42d0:	6e2f7879 	mcrvs	8, 1, r7, cr15, cr9, {3}
    42d4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    42d8:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    42dc:	2f302e33 	svccs	0x00302e33
    42e0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    42e4:	72612f64 	rsbvc	r2, r1, #100, 30	; 0x190
    42e8:	6f6e2d6d 	svcvs	0x006e2d6d
    42ec:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    42f0:	2f696261 	svccs	0x00696261
    42f4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    42f8:	6f6e2f62 	svcvs	0x006e2f62
    42fc:	6e2f7066 	cdpvs	0, 2, cr7, cr15, cr6, {3}
    4300:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4304:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4308:	722f6362 	eorvc	r6, pc, #-2013265919	; 0x88000001
    430c:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    4310:	69747000 	ldmdbvs	r4!, {ip, sp, lr}^
    4314:	6176656d 	cmnvs	r6, sp, ror #10
    4318:	675f006c 	ldrbvs	r0, [pc, -ip, rrx]
    431c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    4320:	666f656d 	strbtvs	r6, [pc], -sp, ror #10
    4324:	00796164 	rsbseq	r6, r9, r4, ror #2
    4328:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
    432c:	645f6572 	ldrbvs	r6, [pc], #-1394	; 4334 <_gettimeofday+0x194>
    4330:	00617461 	rsbeq	r7, r1, r1, ror #8
    4334:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4338:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    433c:	2f2e2e2f 	svccs	0x002e2e2f
    4340:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4344:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4348:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    434c:	2f62696c 	svccs	0x0062696c
    4350:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4354:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    4358:	692f746e 	stmdbvs	pc!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}	; <UNPREDICTABLE>
    435c:	7275706d 	rsbsvc	r7, r5, #109	; 0x6d
    4360:	00632e65 	rsbeq	r2, r3, r5, ror #28
    4364:	6365725f 	cmnvs	r5, #-268435451	; 0xf0000005
    4368:	6d69616c 	stfvse	f6, [r9, #-432]!	; 0xfffffe50
    436c:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
    4370:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
    4374:	6f736968 	svcvs	0x00736968
    4378:	6300656e 	movwvs	r6, #1390	; 0x56e
    437c:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
    4380:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    4384:	0065756c 	rsbeq	r7, r5, ip, ror #10
    4388:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    438c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4390:	2f2e2e2f 	svccs	0x002e2e2f
    4394:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4398:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    439c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    43a0:	2f62696c 	svccs	0x0062696c
    43a4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    43a8:	6565722f 	strbvs	r7, [r5, #-559]!	; 0xfffffdd1
    43ac:	722f746e 	eorvc	r7, pc, #1845493760	; 0x6e000000
    43b0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
    43b4:	5f00632e 	svcpl	0x0000632e
    43b8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    43bc:	6e00725f 	mcrvs	2, 0, r7, cr0, cr15, {2}
    43c0:	6f747865 	svcvs	0x00747865
    43c4:	5400656e 	strpl	r6, [r0], #-1390	; 0xfffffa92
    43c8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    43cc:	50435f54 	subpl	r5, r3, r4, asr pc
    43d0:	6f635f55 	svcvs	0x00635f55
    43d4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    43d8:	63373161 	teqvs	r7, #1073741848	; 0x40000018
    43dc:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    43e0:	00376178 	eorseq	r6, r7, r8, ror r1
    43e4:	5f617369 	svcpl	0x00617369
    43e8:	5f746962 	svcpl	0x00746962
    43ec:	645f7066 	ldrbvs	r7, [pc], #-102	; 43f4 <_gettimeofday+0x254>
    43f0:	61006c62 	tstvs	r0, r2, ror #24
    43f4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    43f8:	5f686372 	svcpl	0x00686372
    43fc:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    4400:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
    4404:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4408:	50435f54 	subpl	r5, r3, r4, asr pc
    440c:	6f635f55 	svcvs	0x00635f55
    4410:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4414:	0033326d 	eorseq	r3, r3, sp, ror #4
    4418:	5f4d5241 	svcpl	0x004d5241
    441c:	54005145 	strpl	r5, [r0], #-325	; 0xfffffebb
    4420:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4424:	50435f54 	subpl	r5, r3, r4, asr pc
    4428:	72615f55 	rsbvc	r5, r1, #340	; 0x154
    442c:	3531316d 	ldrcc	r3, [r1, #-365]!	; 0xfffffe93
    4430:	66327436 			; <UNDEFINED> instruction: 0x66327436
    4434:	73690073 	cmnvc	r9, #115	; 0x73
    4438:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    443c:	68745f74 	ldmdavs	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4440:	00626d75 	rsbeq	r6, r2, r5, ror sp
    4444:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4448:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    444c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4450:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4454:	37356178 			; <UNDEFINED> instruction: 0x37356178
    4458:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    445c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4460:	5f5f0033 	svcpl	0x005f0033
    4464:	646c756d 	strbtvs	r7, [ip], #-1389	; 0xfffffa93
    4468:	42003369 	andmi	r3, r0, #-1543503871	; 0xa4000001
    446c:	5f455341 	svcpl	0x00455341
    4470:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4474:	5f4d385f 	svcpl	0x004d385f
    4478:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    447c:	52415400 	subpl	r5, r1, #0, 8
    4480:	5f544547 	svcpl	0x00544547
    4484:	5f555043 	svcpl	0x00555043
    4488:	386d7261 	stmdacc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    448c:	54003031 	strpl	r3, [r0], #-49	; 0xffffffcf
    4490:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4494:	50435f54 	subpl	r5, r3, r4, asr pc
    4498:	67785f55 			; <UNDEFINED> instruction: 0x67785f55
    449c:	31656e65 	cmncc	r5, r5, ror #28
    44a0:	4d524100 	ldfmie	f4, [r2, #-0]
    44a4:	5343505f 	movtpl	r5, #12383	; 0x305f
    44a8:	5041415f 	subpl	r4, r1, pc, asr r1
    44ac:	495f5343 	ldmdbmi	pc, {r0, r1, r6, r8, r9, ip, lr}^	; <UNPREDICTABLE>
    44b0:	584d4d57 	stmdapl	sp, {r0, r1, r2, r4, r6, r8, sl, fp, lr}^
    44b4:	41420054 	qdaddmi	r0, r4, r2
    44b8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    44bc:	5f484352 	svcpl	0x00484352
    44c0:	41420030 	cmpmi	r2, r0, lsr r0
    44c4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    44c8:	5f484352 	svcpl	0x00484352
    44cc:	41420032 	cmpmi	r2, r2, lsr r0
    44d0:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    44d4:	5f484352 	svcpl	0x00484352
    44d8:	41420033 	cmpmi	r2, r3, lsr r0
    44dc:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    44e0:	5f484352 	svcpl	0x00484352
    44e4:	41420034 	cmpmi	r2, r4, lsr r0
    44e8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    44ec:	5f484352 	svcpl	0x00484352
    44f0:	41420036 	cmpmi	r2, r6, lsr r0
    44f4:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    44f8:	5f484352 	svcpl	0x00484352
    44fc:	41540037 	cmpmi	r4, r7, lsr r0
    4500:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4504:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4508:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    450c:	00656c61 	rsbeq	r6, r5, r1, ror #24
    4510:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    4514:	61736900 	cmnvs	r3, r0, lsl #18
    4518:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    451c:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0xffffffa1
    4520:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    4524:	52415400 	subpl	r5, r1, #0, 8
    4528:	5f544547 	svcpl	0x00544547
    452c:	5f555043 	svcpl	0x00555043
    4530:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4534:	336d7865 	cmncc	sp, #6619136	; 0x650000
    4538:	53550033 	cmppl	r5, #51	; 0x33
    453c:	70797449 	rsbsvc	r7, r9, r9, asr #8
    4540:	2e2e0065 	cdpcs	0, 2, cr0, cr14, cr5, {3}
    4544:	2f2e2e2f 	svccs	0x002e2e2f
    4548:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    454c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4550:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4554:	2f636367 	svccs	0x00636367
    4558:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    455c:	2e326363 	cdpcs	3, 3, cr6, cr2, cr3, {3}
    4560:	41540063 	cmpmi	r4, r3, rrx
    4564:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4568:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    456c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4570:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    4574:	73690069 	cmnvc	r9, #105	; 0x69
    4578:	6f6e5f61 	svcvs	0x006e5f61
    457c:	00746962 	rsbseq	r6, r4, r2, ror #18
    4580:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4584:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4588:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    458c:	31316d72 	teqcc	r1, r2, ror sp
    4590:	7a6a3637 	bvc	1a91e74 <__ccfg+0x1a71ecc>
    4594:	69007366 	stmdbvs	r0, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    4598:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    459c:	765f7469 	ldrbvc	r7, [pc], -r9, ror #8
    45a0:	32767066 	rsbscc	r7, r6, #102	; 0x66
    45a4:	4d524100 	ldfmie	f4, [r2, #-0]
    45a8:	5343505f 	movtpl	r5, #12383	; 0x305f
    45ac:	4b4e555f 	blmi	1399b30 <__ccfg+0x1379b88>
    45b0:	4e574f4e 	cdpmi	15, 5, cr4, cr7, cr14, {2}
    45b4:	52415400 	subpl	r5, r1, #0, 8
    45b8:	5f544547 	svcpl	0x00544547
    45bc:	5f555043 	svcpl	0x00555043
    45c0:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    45c4:	41420065 	cmpmi	r2, r5, rrx
    45c8:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    45cc:	5f484352 	svcpl	0x00484352
    45d0:	4a455435 	bmi	11596ac <__ccfg+0x1139704>
    45d4:	6d726100 	ldfvse	f6, [r2, #-0]
    45d8:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    45dc:	735f6d73 	cmpvc	pc, #7360	; 0x1cc0
    45e0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    45e4:	6d726100 	ldfvse	f6, [r2, #-0]
    45e8:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    45ec:	65743568 	ldrbvs	r3, [r4, #-1384]!	; 0xfffffa98
    45f0:	736e7500 	cmnvc	lr, #0, 10
    45f4:	5f636570 	svcpl	0x00636570
    45f8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    45fc:	0073676e 	rsbseq	r6, r3, lr, ror #14
    4600:	5f617369 	svcpl	0x00617369
    4604:	5f746962 	svcpl	0x00746962
    4608:	00636573 	rsbeq	r6, r3, r3, ror r5
    460c:	6c635f5f 	stclvs	15, cr5, [r3], #-380	; 0xfffffe84
    4610:	61745f7a 	cmnvs	r4, sl, ror pc
    4614:	52410062 	subpl	r0, r1, #98	; 0x62
    4618:	43565f4d 	cmpmi	r6, #308	; 0x134
    461c:	6d726100 	ldfvse	f6, [r2, #-0]
    4620:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4624:	73785f68 	cmnvc	r8, #104, 30	; 0x1a0
    4628:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    462c:	4d524100 	ldfmie	f4, [r2, #-0]
    4630:	00454c5f 	subeq	r4, r5, pc, asr ip
    4634:	6e755744 	cdpvs	7, 7, cr5, cr5, cr4, {2}
    4638:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    463c:	5f4d5241 	svcpl	0x004d5241
    4640:	41005356 	tstmi	r0, r6, asr r3
    4644:	475f4d52 			; <UNDEFINED> instruction: 0x475f4d52
    4648:	72610045 	rsbvc	r0, r1, #69	; 0x45
    464c:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4650:	735f656e 	cmpvc	pc, #461373440	; 0x1b800000
    4654:	6e6f7274 	mcrvs	2, 3, r7, cr15, cr4, {3}
    4658:	6d726167 	ldfvse	f6, [r2, #-412]!	; 0xfffffe64
    465c:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 4664 <patchGenfskRfe+0xb8>
    4660:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    4664:	6f6c6620 	svcvs	0x006c6620
    4668:	54007461 	strpl	r7, [r0], #-1121	; 0xfffffb9f
    466c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4670:	50435f54 	subpl	r5, r3, r4, asr pc
    4674:	6f635f55 	svcvs	0x00635f55
    4678:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    467c:	00353161 	eorseq	r3, r5, r1, ror #2
    4680:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4684:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4688:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    468c:	36323761 	ldrtcc	r3, [r2], -r1, ror #14
    4690:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4694:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4698:	50435f54 	subpl	r5, r3, r4, asr pc
    469c:	6f635f55 	svcvs	0x00635f55
    46a0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    46a4:	00373161 	eorseq	r3, r7, r1, ror #2
    46a8:	5f4d5241 	svcpl	0x004d5241
    46ac:	54005447 	strpl	r5, [r0], #-1095	; 0xfffffbb9
    46b0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    46b4:	50435f54 	subpl	r5, r3, r4, asr pc
    46b8:	656e5f55 	strbvs	r5, [lr, #-3925]!	; 0xfffff0ab
    46bc:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    46c0:	316e6573 	smccc	58963	; 0xe653
    46c4:	52415400 	subpl	r5, r1, #0, 8
    46c8:	5f544547 	svcpl	0x00544547
    46cc:	5f555043 	svcpl	0x00555043
    46d0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    46d4:	34727865 	ldrbtcc	r7, [r2], #-2149	; 0xfffff79b
    46d8:	41420066 	cmpmi	r2, r6, rrx
    46dc:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    46e0:	5f484352 	svcpl	0x00484352
    46e4:	004d4537 	subeq	r4, sp, r7, lsr r5
    46e8:	20554e47 	subscs	r4, r5, r7, asr #28
    46ec:	20373143 	eorscs	r3, r7, r3, asr #2
    46f0:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    46f4:	30322031 	eorscc	r2, r2, r1, lsr r0
    46f8:	30313931 	eorscc	r3, r1, r1, lsr r9
    46fc:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    4700:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    4704:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    4708:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    470c:	72612f4d 	rsbvc	r2, r1, #308	; 0x134
    4710:	2d392d6d 	ldccs	13, cr2, [r9, #-436]!	; 0xfffffe4c
    4714:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    4718:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    471c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    4720:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    4724:	35373732 	ldrcc	r3, [r7, #-1842]!	; 0xfffff8ce
    4728:	205d3939 	subscs	r3, sp, r9, lsr r9
    472c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    4730:	20626d75 	rsbcs	r6, r2, r5, ror sp
    4734:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    4738:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    473c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    4740:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    4744:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    4748:	613d7570 	teqvs	sp, r0, ror r5
    474c:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    4750:	20696d64 	rsbcs	r6, r9, r4, ror #26
    4754:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    4758:	613d6863 	teqvs	sp, r3, ror #16
    475c:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    4760:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    4764:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    4768:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
    476c:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4770:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4774:	2d20324f 	sfmcs	f3, 4, [r0, #-316]!	; 0xfffffec4
    4778:	69756266 	ldmdbvs	r5!, {r1, r2, r5, r6, r9, sp, lr}^
    477c:	6e69646c 	cdpvs	4, 6, cr6, cr9, cr12, {3}
    4780:	696c2d67 	stmdbvs	ip!, {r0, r1, r2, r5, r6, r8, sl, fp, sp}^
    4784:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4788:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    478c:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    4790:	2d6b6361 	stclcs	3, cr6, [fp, #-388]!	; 0xfffffe7c
    4794:	746f7270 	strbtvc	r7, [pc], #-624	; 479c <patchGenfskRfe+0x1f0>
    4798:	6f746365 	svcvs	0x00746365
    479c:	662d2072 			; <UNDEFINED> instruction: 0x662d2072
    47a0:	692d6f6e 	pushvs	{r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    47a4:	6e696c6e 	cdpvs	12, 6, cr6, cr9, cr14, {3}
    47a8:	662d2065 	strtvs	r2, [sp], -r5, rrx
    47ac:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    47b0:	696c6962 	stmdbvs	ip!, {r1, r5, r6, r8, fp, sp, lr}^
    47b4:	683d7974 	ldmdavs	sp!, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
    47b8:	65646469 	strbvs	r6, [r4, #-1129]!	; 0xfffffb97
    47bc:	4154006e 	cmpmi	r4, lr, rrx
    47c0:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    47c4:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    47c8:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    47cc:	61786574 	cmnvs	r8, r4, ror r5
    47d0:	68003231 	stmdavs	r0, {r0, r4, r5, r9, ip, sp}
    47d4:	76687361 	strbtvc	r7, [r8], -r1, ror #6
    47d8:	745f6c61 	ldrbvc	r6, [pc], #-3169	; 47e0 <patchGenfskRfe+0x234>
    47dc:	53414200 	movtpl	r4, #4608	; 0x1200
    47e0:	52415f45 	subpl	r5, r1, #276	; 0x114
    47e4:	365f4843 	ldrbcc	r4, [pc], -r3, asr #16
    47e8:	69005a4b 	stmdbvs	r0, {r0, r1, r3, r6, r9, fp, ip, lr}
    47ec:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    47f0:	00737469 	rsbseq	r7, r3, r9, ror #8
    47f4:	5f6d7261 	svcpl	0x006d7261
    47f8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    47fc:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4800:	6477685f 	ldrbtvs	r6, [r7], #-2143	; 0xfffff7a1
    4804:	61007669 	tstvs	r0, r9, ror #12
    4808:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    480c:	645f7570 	ldrbvs	r7, [pc], #-1392	; 4814 <patchGenfskRfe+0x268>
    4810:	00637365 	rsbeq	r7, r3, r5, ror #6
    4814:	5f617369 	svcpl	0x00617369
    4818:	5f746962 	svcpl	0x00746962
    481c:	36317066 	ldrtcc	r7, [r1], -r6, rrx
    4820:	4d524100 	ldfmie	f4, [r2, #-0]
    4824:	0049485f 	subeq	r4, r9, pc, asr r8
    4828:	5f617369 	svcpl	0x00617369
    482c:	5f746962 	svcpl	0x00746962
    4830:	76696461 	strbtvc	r6, [r9], -r1, ror #8
    4834:	52415400 	subpl	r5, r1, #0, 8
    4838:	5f544547 	svcpl	0x00544547
    483c:	5f555043 	svcpl	0x00555043
    4840:	316d7261 	cmncc	sp, r1, ror #4
    4844:	6a363331 	bvs	d91510 <__ccfg+0xd71568>
    4848:	41540073 	cmpmi	r4, r3, ror r0
    484c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4850:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4854:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4858:	41540038 	cmpmi	r4, r8, lsr r0
    485c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4860:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4864:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4868:	41540039 	cmpmi	r4, r9, lsr r0
    486c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4870:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4874:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4878:	61003632 	tstvs	r0, r2, lsr r6
    487c:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4880:	5f686372 	svcpl	0x00686372
    4884:	65736d63 	ldrbvs	r6, [r3, #-3427]!	; 0xfffff29d
    4888:	52415400 	subpl	r5, r1, #0, 8
    488c:	5f544547 	svcpl	0x00544547
    4890:	5f555043 	svcpl	0x00555043
    4894:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4898:	346d7865 	strbtcc	r7, [sp], #-2149	; 0xfffff79b
    489c:	52415400 	subpl	r5, r1, #0, 8
    48a0:	5f544547 	svcpl	0x00544547
    48a4:	5f555043 	svcpl	0x00555043
    48a8:	316d7261 	cmncc	sp, r1, ror #4
    48ac:	54006530 	strpl	r6, [r0], #-1328	; 0xfffffad0
    48b0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    48b4:	50435f54 	subpl	r5, r3, r4, asr pc
    48b8:	6f635f55 	svcvs	0x00635f55
    48bc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    48c0:	6100376d 	tstvs	r0, sp, ror #14
    48c4:	635f6d72 	cmpvs	pc, #7296	; 0x1c80
    48c8:	5f646e6f 	svcpl	0x00646e6f
    48cc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    48d0:	4d524100 	ldfmie	f4, [r2, #-0]
    48d4:	5343505f 	movtpl	r5, #12383	; 0x305f
    48d8:	5041415f 	subpl	r4, r1, pc, asr r1
    48dc:	69005343 	stmdbvs	r0, {r0, r1, r6, r8, r9, ip, lr}
    48e0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    48e4:	615f7469 	cmpvs	pc, r9, ror #8
    48e8:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    48ec:	4200325f 	andmi	r3, r0, #-268435451	; 0xf0000005
    48f0:	5f455341 	svcpl	0x00455341
    48f4:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    48f8:	004d335f 	subeq	r3, sp, pc, asr r3
    48fc:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4900:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4904:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4908:	31376d72 	teqcc	r7, r2, ror sp
    490c:	61007430 	tstvs	r0, r0, lsr r4
    4910:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4914:	5f686372 	svcpl	0x00686372
    4918:	6d6d7769 	stclvs	7, cr7, [sp, #-420]!	; 0xfffffe5c
    491c:	00327478 	eorseq	r7, r2, r8, ror r4
    4920:	5f617369 	svcpl	0x00617369
    4924:	5f6d756e 	svcpl	0x006d756e
    4928:	73746962 	cmnvc	r4, #1605632	; 0x188000
    492c:	52415400 	subpl	r5, r1, #0, 8
    4930:	5f544547 	svcpl	0x00544547
    4934:	5f555043 	svcpl	0x00555043
    4938:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    493c:	306d7865 	rsbcc	r7, sp, r5, ror #16
    4940:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    4944:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4948:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    494c:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    4950:	41540079 	cmpmi	r4, r9, ror r0
    4954:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4958:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    495c:	7978655f 	ldmdbvc	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
    4960:	6d736f6e 	ldclvs	15, cr6, [r3, #-440]!	; 0xfffffe48
    4964:	41540031 	cmpmi	r4, r1, lsr r0
    4968:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    496c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4970:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4974:	72786574 	rsbsvc	r6, r8, #116, 10	; 0x1d000000
    4978:	69003235 	stmdbvs	r0, {r0, r2, r4, r5, r9, ip, sp}
    497c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4980:	745f7469 	ldrbvc	r7, [pc], #-1129	; 4988 <patchGenfskRfe+0x3dc>
    4984:	00766964 	rsbseq	r6, r6, r4, ror #18
    4988:	66657270 			; <UNDEFINED> instruction: 0x66657270
    498c:	6e5f7265 	cdpvs	2, 5, cr7, cr15, cr5, {3}
    4990:	5f6e6f65 	svcpl	0x006e6f65
    4994:	5f726f66 	svcpl	0x00726f66
    4998:	69623436 	stmdbvs	r2!, {r1, r2, r4, r5, sl, ip, sp}^
    499c:	69007374 	stmdbvs	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
    49a0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    49a4:	665f7469 	ldrbvs	r7, [pc], -r9, ror #8
    49a8:	66363170 			; <UNDEFINED> instruction: 0x66363170
    49ac:	54006c6d 	strpl	r6, [r0], #-3181	; 0xfffff393
    49b0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    49b4:	50435f54 	subpl	r5, r3, r4, asr pc
    49b8:	6f635f55 	svcvs	0x00635f55
    49bc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    49c0:	00323361 	eorseq	r3, r2, r1, ror #6
    49c4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    49c8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    49cc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    49d0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    49d4:	35336178 	ldrcc	r6, [r3, #-376]!	; 0xfffffe88
    49d8:	61736900 	cmnvs	r3, r0, lsl #18
    49dc:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    49e0:	3170665f 	cmncc	r0, pc, asr r6
    49e4:	6e6f6336 	mcrvs	3, 3, r6, cr15, cr6, {1}
    49e8:	6e750076 	mrcvs	0, 3, r0, cr5, cr6, {3}
    49ec:	63657073 	cmnvs	r5, #115	; 0x73
    49f0:	74735f76 	ldrbtvc	r5, [r3], #-3958	; 0xfffff08a
    49f4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    49f8:	41540073 	cmpmi	r4, r3, ror r0
    49fc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a00:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a04:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4a08:	36353131 			; <UNDEFINED> instruction: 0x36353131
    4a0c:	00733274 	rsbseq	r3, r3, r4, ror r2
    4a10:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4a14:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4a18:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4a1c:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4a20:	35376178 	ldrcc	r6, [r7, #-376]!	; 0xfffffe88
    4a24:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4a28:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4a2c:	41540035 	cmpmi	r4, r5, lsr r0
    4a30:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4a34:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4a38:	3661665f 			; <UNDEFINED> instruction: 0x3661665f
    4a3c:	65743630 	ldrbvs	r3, [r4, #-1584]!	; 0xfffff9d0
    4a40:	52415400 	subpl	r5, r1, #0, 8
    4a44:	5f544547 	svcpl	0x00544547
    4a48:	5f555043 	svcpl	0x00555043
    4a4c:	396d7261 	stmdbcc	sp!, {r0, r5, r6, r9, ip, sp, lr}^
    4a50:	6a653632 	bvs	1952320 <__ccfg+0x1932378>
    4a54:	41420073 	hvcmi	8195	; 0x2003
    4a58:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4a5c:	5f484352 	svcpl	0x00484352
    4a60:	69005434 	stmdbvs	r0, {r2, r4, r5, sl, ip, lr}
    4a64:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4a68:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    4a6c:	74707972 	ldrbtvc	r7, [r0], #-2418	; 0xfffff68e
    4a70:	7261006f 	rsbvc	r0, r1, #111	; 0x6f
    4a74:	65725f6d 	ldrbvs	r5, [r2, #-3949]!	; 0xfffff093
    4a78:	695f7367 	ldmdbvs	pc, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4a7c:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    4a80:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    4a84:	69006563 	stmdbvs	r0, {r0, r1, r5, r6, r8, sl, sp, lr}
    4a88:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4a8c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
    4a90:	41420062 	cmpmi	r2, r2, rrx
    4a94:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4a98:	5f484352 	svcpl	0x00484352
    4a9c:	00455435 	subeq	r5, r5, r5, lsr r4
    4aa0:	5f617369 	svcpl	0x00617369
    4aa4:	74616566 	strbtvc	r6, [r1], #-1382	; 0xfffffa9a
    4aa8:	00657275 	rsbeq	r7, r5, r5, ror r2
    4aac:	5f617369 	svcpl	0x00617369
    4ab0:	5f746962 	svcpl	0x00746962
    4ab4:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    4ab8:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    4abc:	6d726100 	ldfvse	f6, [r2, #-0]
    4ac0:	6e616c5f 	mcrvs	12, 3, r6, cr1, cr15, {2}
    4ac4:	756f5f67 	strbvc	r5, [pc, #-3943]!	; 3b65 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x5d>
    4ac8:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    4acc:	6a626f5f 	bvs	18a0850 <__ccfg+0x18808a8>
    4ad0:	5f746365 	svcpl	0x00746365
    4ad4:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    4ad8:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
    4adc:	685f7365 	ldmdavs	pc, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4ae0:	006b6f6f 	rsbeq	r6, fp, pc, ror #30
    4ae4:	5f617369 	svcpl	0x00617369
    4ae8:	5f746962 	svcpl	0x00746962
    4aec:	645f7066 	ldrbvs	r7, [pc], #-102	; 4af4 <patchGenfskRfe+0x548>
    4af0:	41003233 	tstmi	r0, r3, lsr r2
    4af4:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    4af8:	73690045 	cmnvc	r9, #69	; 0x45
    4afc:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4b00:	65625f74 	strbvs	r5, [r2, #-3956]!	; 0xfffff08c
    4b04:	41540038 	cmpmi	r4, r8, lsr r0
    4b08:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4b0c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4b10:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4b14:	36373131 			; <UNDEFINED> instruction: 0x36373131
    4b18:	00737a6a 	rsbseq	r7, r3, sl, ror #20
    4b1c:	636f7270 	cmnvs	pc, #112, 4
    4b20:	6f737365 	svcvs	0x00737365
    4b24:	79745f72 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4b28:	61006570 	tstvs	r0, r0, ror r5
    4b2c:	665f6c6c 	ldrbvs	r6, [pc], -ip, ror #24
    4b30:	00737570 	rsbseq	r7, r3, r0, ror r5
    4b34:	5f6d7261 	svcpl	0x006d7261
    4b38:	00736370 	rsbseq	r6, r3, r0, ror r3
    4b3c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4b40:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4b44:	54355f48 	ldrtpl	r5, [r5], #-3912	; 0xfffff0b8
    4b48:	6d726100 	ldfvse	f6, [r2, #-0]
    4b4c:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    4b50:	00743468 	rsbseq	r3, r4, r8, ror #8
    4b54:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4b58:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4b5c:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4b60:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4b64:	36376178 			; <UNDEFINED> instruction: 0x36376178
    4b68:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4b6c:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4b70:	72610035 	rsbvc	r0, r1, #53	; 0x35
    4b74:	75745f6d 	ldrbvc	r5, [r4, #-3949]!	; 0xfffff093
    4b78:	775f656e 	ldrbvc	r6, [pc, -lr, ror #10]
    4b7c:	00667562 	rsbeq	r7, r6, r2, ror #10
    4b80:	62617468 	rsbvs	r7, r1, #104, 8	; 0x68000000
    4b84:	7361685f 	cmnvc	r1, #6225920	; 0x5f0000
    4b88:	73690068 	cmnvc	r9, #104	; 0x68
    4b8c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4b90:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    4b94:	5f6b7269 	svcpl	0x006b7269
    4b98:	765f6f6e 	ldrbvc	r6, [pc], -lr, ror #30
    4b9c:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    4ba0:	5f656c69 	svcpl	0x00656c69
    4ba4:	54006563 	strpl	r6, [r0], #-1379	; 0xfffffa9d
    4ba8:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4bac:	50435f54 	subpl	r5, r3, r4, asr pc
    4bb0:	6f635f55 	svcvs	0x00635f55
    4bb4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4bb8:	5400306d 	strpl	r3, [r0], #-109	; 0xffffff93
    4bbc:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4bc0:	50435f54 	subpl	r5, r3, r4, asr pc
    4bc4:	6f635f55 	svcvs	0x00635f55
    4bc8:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4bcc:	5400316d 	strpl	r3, [r0], #-365	; 0xfffffe93
    4bd0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4bd4:	50435f54 	subpl	r5, r3, r4, asr pc
    4bd8:	6f635f55 	svcvs	0x00635f55
    4bdc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4be0:	6900336d 	stmdbvs	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp}
    4be4:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4be8:	615f7469 	cmpvs	pc, r9, ror #8
    4bec:	38766d72 	ldmdacc	r6!, {r1, r4, r5, r6, r8, sl, fp, sp, lr}^
    4bf0:	6100315f 	tstvs	r0, pc, asr r1
    4bf4:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4bf8:	5f686372 	svcpl	0x00686372
    4bfc:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    4c00:	61736900 	cmnvs	r3, r0, lsl #18
    4c04:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4c08:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c0c:	335f3876 	cmpcc	pc, #7733248	; 0x760000
    4c10:	61736900 	cmnvs	r3, r0, lsl #18
    4c14:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4c18:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c1c:	345f3876 	ldrbcc	r3, [pc], #-2166	; 4c24 <patchGenfskRfe+0x678>
    4c20:	61736900 	cmnvs	r3, r0, lsl #18
    4c24:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4c28:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c2c:	355f3876 	ldrbcc	r3, [pc, #-2166]	; 43be <_gettimeofday+0x21e>
    4c30:	52415400 	subpl	r5, r1, #0, 8
    4c34:	5f544547 	svcpl	0x00544547
    4c38:	5f555043 	svcpl	0x00555043
    4c3c:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4c40:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    4c44:	41540033 	cmpmi	r4, r3, lsr r0
    4c48:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c4c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c50:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4c54:	61786574 	cmnvs	r8, r4, ror r5
    4c58:	54003535 	strpl	r3, [r0], #-1333	; 0xfffffacb
    4c5c:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4c60:	50435f54 	subpl	r5, r3, r4, asr pc
    4c64:	6f635f55 	svcvs	0x00635f55
    4c68:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4c6c:	00373561 	eorseq	r3, r7, r1, ror #10
    4c70:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4c74:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4c78:	6d5f5550 	cfldr64vs	mvdx5, [pc, #-320]	; 4b40 <patchGenfskRfe+0x594>
    4c7c:	726f6370 	rsbvc	r6, pc, #112, 6	; 0xc0000001
    4c80:	41540065 	cmpmi	r4, r5, rrx
    4c84:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    4c88:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    4c8c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4c90:	6e6f6e5f 	mcrvs	14, 3, r6, cr15, cr15, {2}
    4c94:	72610065 	rsbvc	r0, r1, #101	; 0x65
    4c98:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4c9c:	6e5f6863 	cdpvs	8, 5, cr6, cr15, cr3, {3}
    4ca0:	006d746f 	rsbeq	r7, sp, pc, ror #8
    4ca4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ca8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4cac:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4cb0:	30316d72 	eorscc	r6, r1, r2, ror sp
    4cb4:	6a653632 	bvs	1952584 <__ccfg+0x19325dc>
    4cb8:	41420073 	hvcmi	8195	; 0x2003
    4cbc:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    4cc0:	5f484352 	svcpl	0x00484352
    4cc4:	42004a36 	andmi	r4, r0, #221184	; 0x36000
    4cc8:	5f455341 	svcpl	0x00455341
    4ccc:	48435241 	stmdami	r3, {r0, r6, r9, ip, lr}^
    4cd0:	004b365f 	subeq	r3, fp, pc, asr r6
    4cd4:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4cd8:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4cdc:	4d365f48 	ldcmi	15, cr5, [r6, #-288]!	; 0xfffffee0
    4ce0:	61736900 	cmnvs	r3, r0, lsl #18
    4ce4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4ce8:	6d77695f 			; <UNDEFINED> instruction: 0x6d77695f
    4cec:	0074786d 	rsbseq	r7, r4, sp, ror #16
    4cf0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4cf4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4cf8:	615f5550 	cmpvs	pc, r0, asr r5	; <UNPREDICTABLE>
    4cfc:	31316d72 	teqcc	r1, r2, ror sp
    4d00:	666a3633 			; <UNDEFINED> instruction: 0x666a3633
    4d04:	52410073 	subpl	r0, r1, #115	; 0x73
    4d08:	534c5f4d 	movtpl	r5, #53069	; 0xcf4d
    4d0c:	4d524100 	ldfmie	f4, [r2, #-0]
    4d10:	00544c5f 	subseq	r4, r4, pc, asr ip
    4d14:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4d18:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4d1c:	5a365f48 	bpl	d9ca44 <__ccfg+0xd7ca9c>
    4d20:	4d524100 	ldfmie	f4, [r2, #-0]
    4d24:	5343505f 	movtpl	r5, #12383	; 0x305f
    4d28:	5041415f 	subpl	r4, r1, pc, asr r1
    4d2c:	565f5343 	ldrbpl	r5, [pc], -r3, asr #6
    4d30:	54005046 	strpl	r5, [r0], #-70	; 0xffffffba
    4d34:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4d38:	50435f54 	subpl	r5, r3, r4, asr pc
    4d3c:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    4d40:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    4d44:	73690032 	cmnvc	r9, #50	; 0x32
    4d48:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4d4c:	656e5f74 	strbvs	r5, [lr, #-3956]!	; 0xfffff08c
    4d50:	61006e6f 	tstvs	r0, pc, ror #28
    4d54:	665f6d72 			; <UNDEFINED> instruction: 0x665f6d72
    4d58:	615f7570 	cmpvs	pc, r0, ror r5	; <UNPREDICTABLE>
    4d5c:	00727474 	rsbseq	r7, r2, r4, ror r4
    4d60:	5f617369 	svcpl	0x00617369
    4d64:	5f746962 	svcpl	0x00746962
    4d68:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    4d6c:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    4d70:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4d74:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4d78:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    4d7c:	36323661 	ldrtcc	r3, [r2], -r1, ror #12
    4d80:	54006574 	strpl	r6, [r0], #-1396	; 0xfffffa8c
    4d84:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4d88:	50435f54 	subpl	r5, r3, r4, asr pc
    4d8c:	616d5f55 	cmnvs	sp, r5, asr pc
    4d90:	6c657672 	stclvs	6, cr7, [r5], #-456	; 0xfffffe38
    4d94:	6a705f6c 	bvs	1c1cb4c <__ccfg+0x1bfcba4>
    4d98:	74680034 	strbtvc	r0, [r8], #-52	; 0xffffffcc
    4d9c:	685f6261 	ldmdavs	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    4da0:	5f687361 	svcpl	0x00687361
    4da4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
    4da8:	00726574 	rsbseq	r6, r2, r4, ror r5
    4dac:	5f6d7261 	svcpl	0x006d7261
    4db0:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    4db4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    4db8:	5f786574 	svcpl	0x00786574
    4dbc:	69003961 	stmdbvs	r0, {r0, r5, r6, r8, fp, ip, sp}
    4dc0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4dc4:	695f7469 	ldmdbvs	pc, {r0, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
    4dc8:	786d6d77 	stmdavc	sp!, {r0, r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    4dcc:	54003274 	strpl	r3, [r0], #-628	; 0xfffffd8c
    4dd0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4dd4:	50435f54 	subpl	r5, r3, r4, asr pc
    4dd8:	6f635f55 	svcvs	0x00635f55
    4ddc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4de0:	63323761 	teqvs	r2, #25427968	; 0x1840000
    4de4:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4de8:	33356178 	teqcc	r5, #120, 2
    4dec:	61736900 	cmnvs	r3, r0, lsl #18
    4df0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4df4:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    4df8:	0032626d 	eorseq	r6, r2, sp, ror #4
    4dfc:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4e00:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4e04:	41375f48 	teqmi	r7, r8, asr #30
    4e08:	61736900 	cmnvs	r3, r0, lsl #18
    4e0c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4e10:	746f645f 	strbtvc	r6, [pc], #-1119	; 4e18 <patchImageGenfsk+0x1b8>
    4e14:	646f7270 	strbtvs	r7, [pc], #-624	; 4e1c <patchImageGenfsk+0x1bc>
    4e18:	6d726100 	ldfvse	f6, [r2, #-0]
    4e1c:	3170665f 	cmncc	r0, pc, asr r6
    4e20:	79745f36 	ldmdbvc	r4!, {r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
    4e24:	6e5f6570 	mrcvs	5, 2, r6, cr15, cr0, {3}
    4e28:	0065646f 	rsbeq	r6, r5, pc, ror #8
    4e2c:	5f4d5241 	svcpl	0x004d5241
    4e30:	6100494d 	tstvs	r0, sp, asr #18
    4e34:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    4e38:	36686372 			; <UNDEFINED> instruction: 0x36686372
    4e3c:	7261006b 	rsbvc	r0, r1, #107	; 0x6b
    4e40:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4e44:	6d366863 	ldcvs	8, cr6, [r6, #-396]!	; 0xfffffe74
    4e48:	53414200 	movtpl	r4, #4608	; 0x1200
    4e4c:	52415f45 	subpl	r5, r1, #276	; 0x114
    4e50:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    4e54:	5f5f0052 	svcpl	0x005f0052
    4e58:	63706f70 	cmnvs	r0, #112, 30	; 0x1c0
    4e5c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    4e60:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
    4e64:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    4e68:	2f646c69 	svccs	0x00646c69
    4e6c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    4e70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4e74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4e78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4e7c:	6c472d69 	mcrrvs	13, 6, r2, r7, cr9
    4e80:	39546b39 	ldmdbcc	r4, {r0, r3, r4, r5, r8, r9, fp, sp, lr}^
    4e84:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4e88:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    4e8c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4e90:	61652d65 	cmnvs	r5, r5, ror #26
    4e94:	392d6962 	pushcc	{r1, r5, r6, r8, fp, sp, lr}
    4e98:	3130322d 	teqcc	r0, sp, lsr #4
    4e9c:	34712d39 	ldrbtcc	r2, [r1], #-3385	; 0xfffff2c7
    4ea0:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4ea4:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    4ea8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4eac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4eb0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4eb4:	7568742f 	strbvc	r7, [r8, #-1071]!	; 0xfffffbd1
    4eb8:	6e2f626d 	cdpvs	2, 2, cr6, cr15, cr13, {3}
    4ebc:	2f70666f 	svccs	0x0070666f
    4ec0:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    4ec4:	69006363 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, sp, lr}
    4ec8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4ecc:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
    4ed0:	0065736d 	rsbeq	r7, r5, sp, ror #6
    4ed4:	47524154 			; <UNDEFINED> instruction: 0x47524154
    4ed8:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    4edc:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    4ee0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    4ee4:	33376178 	teqcc	r7, #120, 2
    4ee8:	52415400 	subpl	r5, r1, #0, 8
    4eec:	5f544547 	svcpl	0x00544547
    4ef0:	5f555043 	svcpl	0x00555043
    4ef4:	656e6567 	strbvs	r6, [lr, #-1383]!	; 0xfffffa99
    4ef8:	76636972 			; <UNDEFINED> instruction: 0x76636972
    4efc:	54006137 	strpl	r6, [r0], #-311	; 0xfffffec9
    4f00:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    4f04:	50435f54 	subpl	r5, r3, r4, asr pc
    4f08:	6f635f55 	svcvs	0x00635f55
    4f0c:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    4f10:	00363761 	eorseq	r3, r6, r1, ror #14
    4f14:	5f6d7261 	svcpl	0x006d7261
    4f18:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4f1c:	5f6f6e5f 	svcpl	0x006f6e5f
    4f20:	616c6f76 	smcvs	50934	; 0xc6f6
    4f24:	656c6974 	strbvs	r6, [ip, #-2420]!	; 0xfffff68c
    4f28:	0065635f 	rsbeq	r6, r5, pc, asr r3
    4f2c:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4f30:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4f34:	41385f48 	teqmi	r8, r8, asr #30
    4f38:	61736900 	cmnvs	r3, r0, lsl #18
    4f3c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    4f40:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    4f44:	00743576 	rsbseq	r3, r4, r6, ror r5
    4f48:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    4f4c:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    4f50:	52385f48 	eorspl	r5, r8, #72, 30	; 0x120
    4f54:	52415400 	subpl	r5, r1, #0, 8
    4f58:	5f544547 	svcpl	0x00544547
    4f5c:	5f555043 	svcpl	0x00555043
    4f60:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    4f64:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    4f68:	726f6333 	rsbvc	r6, pc, #-872415232	; 0xcc000000
    4f6c:	61786574 	cmnvs	r8, r4, ror r5
    4f70:	41003533 	tstmi	r0, r3, lsr r5
    4f74:	4e5f4d52 	mrcmi	13, 2, r4, cr15, cr2, {2}
    4f78:	72610056 	rsbvc	r0, r1, #86	; 0x56
    4f7c:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4f80:	00346863 	eorseq	r6, r4, r3, ror #16
    4f84:	5f6d7261 	svcpl	0x006d7261
    4f88:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4f8c:	72610036 	rsbvc	r0, r1, #54	; 0x36
    4f90:	72615f6d 	rsbvc	r5, r1, #436	; 0x1b4
    4f94:	00376863 	eorseq	r6, r7, r3, ror #16
    4f98:	5f6d7261 	svcpl	0x006d7261
    4f9c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4fa0:	49440038 	stmdbmi	r4, {r3, r4, r5}^
    4fa4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    4fa8:	6d726100 	ldfvse	f6, [r2, #-0]
    4fac:	6e75745f 	mrcvs	4, 3, r7, cr5, cr15, {2}
    4fb0:	73785f65 	cmnvc	r8, #404	; 0x194
    4fb4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
    4fb8:	73574400 	cmpvc	r7, #0, 8
    4fbc:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    4fc0:	616d0074 	smcvs	53252	; 0xd004
    4fc4:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
    4fc8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    4fcc:	745f7473 	ldrbvc	r7, [pc], #-1139	; 4fd4 <__exidx_end+0xa4>
    4fd0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    4fd4:	75687400 	strbvc	r7, [r8, #-1024]!	; 0xfffffc00
    4fd8:	635f626d 	cmpvs	pc, #-805306362	; 0xd0000006
    4fdc:	5f6c6c61 	svcpl	0x006c6c61
    4fe0:	5f616976 	svcpl	0x00616976
    4fe4:	6562616c 	strbvs	r6, [r2, #-364]!	; 0xfffffe94
    4fe8:	7369006c 	cmnvc	r9, #108	; 0x6c
    4fec:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    4ff0:	70665f74 	rsbvc	r5, r6, r4, ror pc
    4ff4:	69003576 	stmdbvs	r0, {r1, r2, r4, r5, r6, r8, sl, ip, sp}
    4ff8:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    4ffc:	615f7469 	cmpvs	pc, r9, ror #8
    5000:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
    5004:	4154006b 	cmpmi	r4, fp, rrx
    5008:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    500c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5010:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5014:	61786574 	cmnvs	r8, r4, ror r5
    5018:	41540037 	cmpmi	r4, r7, lsr r0
    501c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5020:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5024:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5028:	61786574 	cmnvs	r8, r4, ror r5
    502c:	41540038 	cmpmi	r4, r8, lsr r0
    5030:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5034:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5038:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    503c:	61786574 	cmnvs	r8, r4, ror r5
    5040:	52410039 	subpl	r0, r1, #57	; 0x39
    5044:	43505f4d 	cmpmi	r0, #308	; 0x134
    5048:	50415f53 	subpl	r5, r1, r3, asr pc
    504c:	41005343 	tstmi	r0, r3, asr #6
    5050:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5054:	415f5343 	cmpmi	pc, r3, asr #6
    5058:	53435054 	movtpl	r5, #12372	; 0x3054
    505c:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 5064 <__exidx_end+0x134>
    5060:	78656c70 	stmdavc	r5!, {r4, r5, r6, sl, fp, sp, lr}^
    5064:	756f6420 	strbvc	r6, [pc, #-1056]!	; 4c4c <patchGenfskRfe+0x6a0>
    5068:	00656c62 	rsbeq	r6, r5, r2, ror #24
    506c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5070:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5074:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5078:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    507c:	33376178 	teqcc	r7, #120, 2
    5080:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5084:	35617865 	strbcc	r7, [r1, #-2149]!	; 0xfffff79b
    5088:	41540033 	cmpmi	r4, r3, lsr r0
    508c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5090:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5094:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5098:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    509c:	756c7030 	strbvc	r7, [ip, #-48]!	; 0xffffffd0
    50a0:	72610073 	rsbvc	r0, r1, #115	; 0x73
    50a4:	63635f6d 	cmnvs	r3, #436	; 0x1b4
    50a8:	61736900 	cmnvs	r3, r0, lsl #18
    50ac:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    50b0:	6373785f 	cmnvs	r3, #6225920	; 0x5f0000
    50b4:	00656c61 	rsbeq	r6, r5, r1, ror #24
    50b8:	6e6f645f 	mcrvs	4, 3, r6, cr15, cr15, {2}
    50bc:	73755f74 	cmnvc	r5, #116, 30	; 0x1d0
    50c0:	72745f65 	rsbsvc	r5, r4, #404	; 0x194
    50c4:	685f6565 	ldmdavs	pc, {r0, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    50c8:	5f657265 	svcpl	0x00657265
    50cc:	52415400 	subpl	r5, r1, #0, 8
    50d0:	5f544547 	svcpl	0x00544547
    50d4:	5f555043 	svcpl	0x00555043
    50d8:	316d7261 	cmncc	sp, r1, ror #4
    50dc:	6d647430 	cfstrdvs	mvd7, [r4, #-192]!	; 0xffffff40
    50e0:	41540069 	cmpmi	r4, r9, rrx
    50e4:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    50e8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    50ec:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    50f0:	61786574 	cmnvs	r8, r4, ror r5
    50f4:	61620035 	cmnvs	r2, r5, lsr r0
    50f8:	615f6573 	cmpvs	pc, r3, ror r5	; <UNPREDICTABLE>
    50fc:	69686372 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sp, lr}^
    5100:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    5104:	00657275 	rsbeq	r7, r5, r5, ror r2
    5108:	5f6d7261 	svcpl	0x006d7261
    510c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5110:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    5114:	52415400 	subpl	r5, r1, #0, 8
    5118:	5f544547 	svcpl	0x00544547
    511c:	5f555043 	svcpl	0x00555043
    5120:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5124:	316d7865 	cmncc	sp, r5, ror #16
    5128:	6c616d73 	stclvs	13, cr6, [r1], #-460	; 0xfffffe34
    512c:	6c756d6c 	ldclvs	13, cr6, [r5], #-432	; 0xfffffe50
    5130:	6c706974 			; <UNDEFINED> instruction: 0x6c706974
    5134:	72610079 	rsbvc	r0, r1, #121	; 0x79
    5138:	75635f6d 	strbvc	r5, [r3, #-3949]!	; 0xfffff093
    513c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    5140:	63635f74 	cmnvs	r3, #116, 30	; 0x1d0
    5144:	61736900 	cmnvs	r3, r0, lsl #18
    5148:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    514c:	6372635f 	cmnvs	r2, #2080374785	; 0x7c000001
    5150:	41003233 	tstmi	r0, r3, lsr r2
    5154:	505f4d52 	subspl	r4, pc, r2, asr sp	; <UNPREDICTABLE>
    5158:	7369004c 	cmnvc	r9, #76	; 0x4c
    515c:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5160:	66765f74 	uhsub16vs	r5, r6, r4
    5164:	00337670 	eorseq	r7, r3, r0, ror r6
    5168:	5f617369 	svcpl	0x00617369
    516c:	5f746962 	svcpl	0x00746962
    5170:	76706676 			; <UNDEFINED> instruction: 0x76706676
    5174:	41420034 	cmpmi	r2, r4, lsr r0
    5178:	415f4553 	cmpmi	pc, r3, asr r5	; <UNPREDICTABLE>
    517c:	5f484352 	svcpl	0x00484352
    5180:	00325436 	eorseq	r5, r2, r6, lsr r4
    5184:	45534142 	ldrbmi	r4, [r3, #-322]	; 0xfffffebe
    5188:	4352415f 	cmpmi	r2, #-1073741801	; 0xc0000017
    518c:	4d385f48 	ldcmi	15, cr5, [r8, #-288]!	; 0xfffffee0
    5190:	49414d5f 	stmdbmi	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    5194:	4154004e 	cmpmi	r4, lr, asr #32
    5198:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    519c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    51a0:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    51a4:	6d647439 	cfstrdvs	mvd7, [r4, #-228]!	; 0xffffff1c
    51a8:	52410069 	subpl	r0, r1, #105	; 0x69
    51ac:	4c415f4d 	mcrrmi	15, 4, r5, r1, cr13
    51b0:	53414200 	movtpl	r4, #4608	; 0x1200
    51b4:	52415f45 	subpl	r5, r1, #276	; 0x114
    51b8:	375f4843 	ldrbcc	r4, [pc, -r3, asr #16]
    51bc:	7261004d 	rsbvc	r0, r1, #77	; 0x4d
    51c0:	61745f6d 	cmnvs	r4, sp, ror #30
    51c4:	74656772 	strbtvc	r6, [r5], #-1906	; 0xfffff88e
    51c8:	62616c5f 	rsbvs	r6, r1, #24320	; 0x5f00
    51cc:	61006c65 	tstvs	r0, r5, ror #24
    51d0:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 51d8 <__exidx_end+0x2a8>
    51d4:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    51d8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    51dc:	54006e73 	strpl	r6, [r0], #-3699	; 0xfffff18d
    51e0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    51e4:	50435f54 	subpl	r5, r3, r4, asr pc
    51e8:	6f635f55 	svcvs	0x00635f55
    51ec:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    51f0:	54003572 	strpl	r3, [r0], #-1394	; 0xfffffa8e
    51f4:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    51f8:	50435f54 	subpl	r5, r3, r4, asr pc
    51fc:	6f635f55 	svcvs	0x00635f55
    5200:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5204:	54003772 	strpl	r3, [r0], #-1906	; 0xfffff88e
    5208:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    520c:	50435f54 	subpl	r5, r3, r4, asr pc
    5210:	6f635f55 	svcvs	0x00635f55
    5214:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5218:	69003872 	stmdbvs	r0, {r1, r4, r5, r6, fp, ip, sp}
    521c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5220:	6c5f7469 	cfldrdvs	mvd7, [pc], {105}	; 0x69
    5224:	00656170 	rsbeq	r6, r5, r0, ror r1
    5228:	5f617369 	svcpl	0x00617369
    522c:	5f746962 	svcpl	0x00746962
    5230:	72697571 	rsbvc	r7, r9, #473956352	; 0x1c400000
    5234:	72615f6b 	rsbvc	r5, r1, #428	; 0x1ac
    5238:	6b36766d 	blvs	da2bf4 <__ccfg+0xd82c4c>
    523c:	7369007a 	cmnvc	r9, #122	; 0x7a
    5240:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5244:	6f6e5f74 	svcvs	0x006e5f74
    5248:	69006d74 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
    524c:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    5250:	615f7469 	cmpvs	pc, r9, ror #8
    5254:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    5258:	61736900 	cmnvs	r3, r0, lsl #18
    525c:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    5260:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5264:	69003676 	stmdbvs	r0, {r1, r2, r4, r5, r6, r9, sl, ip, sp}
    5268:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    526c:	615f7469 	cmpvs	pc, r9, ror #8
    5270:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
    5274:	61736900 	cmnvs	r3, r0, lsl #18
    5278:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
    527c:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    5280:	5f003876 	svcpl	0x00003876
    5284:	746e6f64 	strbtvc	r6, [lr], #-3940	; 0xfffff09c
    5288:	6573755f 	ldrbvs	r7, [r3, #-1375]!	; 0xfffffaa1
    528c:	7874725f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}^
    5290:	7265685f 	rsbvc	r6, r5, #6225920	; 0x5f0000
    5294:	55005f65 	strpl	r5, [r0, #-3941]	; 0xfffff09b
    5298:	79744951 	ldmdbvc	r4!, {r0, r4, r6, r8, fp, lr}^
    529c:	69006570 	stmdbvs	r0, {r4, r5, r6, r8, sl, sp, lr}
    52a0:	625f6173 	subsvs	r6, pc, #-1073741796	; 0xc000001c
    52a4:	615f7469 	cmpvs	pc, r9, ror #8
    52a8:	35766d72 	ldrbcc	r6, [r6, #-3442]!	; 0xfffff28e
    52ac:	61006574 	tstvs	r0, r4, ror r5
    52b0:	745f6d72 	ldrbvc	r6, [pc], #-3442	; 52b8 <__exidx_end+0x388>
    52b4:	00656e75 	rsbeq	r6, r5, r5, ror lr
    52b8:	5f6d7261 	svcpl	0x006d7261
    52bc:	5f707063 	svcpl	0x00707063
    52c0:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    52c4:	726f7772 	rsbvc	r7, pc, #29884416	; 0x1c80000
    52c8:	4154006b 	cmpmi	r4, fp, rrx
    52cc:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    52d0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    52d4:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
    52d8:	74303239 	ldrtvc	r3, [r0], #-569	; 0xfffffdc7
    52dc:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 43e4 <_gettimeofday+0x244>
    52e0:	74680068 	strbtvc	r0, [r8], #-104	; 0xffffff98
    52e4:	655f6261 	ldrbvs	r6, [pc, #-609]	; 508b <__exidx_end+0x15b>
    52e8:	41540071 	cmpmi	r4, r1, ror r0
    52ec:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    52f0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    52f4:	3561665f 	strbcc	r6, [r1, #-1631]!	; 0xfffff9a1
    52f8:	5f003632 	svcpl	0x00003632
    52fc:	006c755f 	rsbeq	r7, ip, pc, asr r5
    5300:	5f6d7261 	svcpl	0x006d7261
    5304:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5308:	7568745f 	strbvc	r7, [r8, #-1119]!	; 0xfffffba1
    530c:	685f626d 	ldmdavs	pc, {r0, r2, r3, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    5310:	76696477 			; <UNDEFINED> instruction: 0x76696477
    5314:	61746800 	cmnvs	r4, r0, lsl #16
    5318:	71655f62 	cmnvc	r5, r2, ror #30
    531c:	696f705f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    5320:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    5324:	6d726100 	ldfvse	f6, [r2, #-0]
    5328:	6369705f 	cmnvs	r9, #95	; 0x5f
    532c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    5330:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    5334:	41540072 	cmpmi	r4, r2, ror r0
    5338:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    533c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5340:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    5344:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
    5348:	616d7330 	cmnvs	sp, r0, lsr r3
    534c:	756d6c6c 	strbvc	r6, [sp, #-3180]!	; 0xfffff394
    5350:	7069746c 	rsbvc	r7, r9, ip, ror #8
    5354:	5400796c 	strpl	r7, [r0], #-2412	; 0xfffff694
    5358:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    535c:	50435f54 	subpl	r5, r3, r4, asr pc
    5360:	706d5f55 	rsbvc	r5, sp, r5, asr pc
    5364:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
    5368:	66766f6e 	ldrbtvs	r6, [r6], -lr, ror #30
    536c:	73690070 	cmnvc	r9, #112	; 0x70
    5370:	69625f61 	stmdbvs	r2!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    5374:	75715f74 	ldrbvc	r5, [r1, #-3956]!	; 0xfffff08c
    5378:	5f6b7269 	svcpl	0x006b7269
    537c:	5f336d63 	svcpl	0x00336d63
    5380:	6472646c 	ldrbtvs	r6, [r2], #-1132	; 0xfffffb94
    5384:	4d524100 	ldfmie	f4, [r2, #-0]
    5388:	0043435f 	subeq	r4, r3, pc, asr r3
    538c:	5f6d7261 	svcpl	0x006d7261
    5390:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5394:	00325f38 	eorseq	r5, r2, r8, lsr pc
    5398:	5f6d7261 	svcpl	0x006d7261
    539c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    53a0:	00335f38 	eorseq	r5, r3, r8, lsr pc
    53a4:	5f6d7261 	svcpl	0x006d7261
    53a8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    53ac:	00345f38 	eorseq	r5, r4, r8, lsr pc
    53b0:	47524154 			; <UNDEFINED> instruction: 0x47524154
    53b4:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    53b8:	665f5550 			; <UNDEFINED> instruction: 0x665f5550
    53bc:	3236706d 	eorscc	r7, r6, #109	; 0x6d
    53c0:	52410036 	subpl	r0, r1, #54	; 0x36
    53c4:	53435f4d 	movtpl	r5, #16205	; 0x3f4d
    53c8:	6d726100 	ldfvse	f6, [r2, #-0]
    53cc:	3170665f 	cmncc	r0, pc, asr r6
    53d0:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
    53d4:	5f007473 	svcpl	0x00007473
    53d8:	0068765f 	rsbeq	r7, r8, pc, asr r6
    53dc:	5f6d7261 	svcpl	0x006d7261
    53e0:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    53e4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    53e8:	5f5f0068 	svcpl	0x005f0068
    53ec:	54006c76 	strpl	r6, [r0], #-3190	; 0xfffff38a
    53f0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    53f4:	50435f54 	subpl	r5, r3, r4, asr pc
    53f8:	6f635f55 	svcvs	0x00635f55
    53fc:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5400:	54003472 	strpl	r3, [r0], #-1138	; 0xfffffb8e
    5404:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    5408:	50435f54 	subpl	r5, r3, r4, asr pc
    540c:	6f635f55 	svcvs	0x00635f55
    5410:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    5414:	63353161 	teqvs	r5, #1073741848	; 0x40000018
    5418:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    541c:	00376178 	eorseq	r6, r7, r8, ror r1
    5420:	5f6d7261 	svcpl	0x006d7261
    5424:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5428:	006d6537 	rsbeq	r6, sp, r7, lsr r5
    542c:	47524154 			; <UNDEFINED> instruction: 0x47524154
    5430:	435f5445 	cmpmi	pc, #1157627904	; 0x45000000
    5434:	635f5550 	cmpvs	pc, #80, 10	; 0x14000000
    5438:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    543c:	32376178 	eorscc	r6, r7, #120, 2
    5440:	6d726100 	ldfvse	f6, [r2, #-0]
    5444:	7363705f 	cmnvc	r3, #95	; 0x5f
    5448:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    544c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5450:	4d524100 	ldfmie	f4, [r2, #-0]
    5454:	5343505f 	movtpl	r5, #12383	; 0x305f
    5458:	5041415f 	subpl	r4, r1, pc, asr r1
    545c:	4c5f5343 	mrrcmi	3, 4, r5, pc, cr3	; <UNPREDICTABLE>
    5460:	4c41434f 	mcrrmi	3, 4, r4, r1, cr15
    5464:	52415400 	subpl	r5, r1, #0, 8
    5468:	5f544547 	svcpl	0x00544547
    546c:	5f555043 	svcpl	0x00555043
    5470:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    5474:	37617865 	strbcc	r7, [r1, -r5, ror #16]!
    5478:	41540035 	cmpmi	r4, r5, lsr r0
    547c:	54454752 	strbpl	r4, [r5], #-1874	; 0xfffff8ae
    5480:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    5484:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    5488:	61676e6f 	cmnvs	r7, pc, ror #28
    548c:	61006d72 	tstvs	r0, r2, ror sp
    5490:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    5494:	5f686372 	svcpl	0x00686372
    5498:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    549c:	61003162 	tstvs	r0, r2, ror #2
    54a0:	615f6d72 	cmpvs	pc, r2, ror sp	; <UNPREDICTABLE>
    54a4:	5f686372 	svcpl	0x00686372
    54a8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    54ac:	54003262 	strpl	r3, [r0], #-610	; 0xfffffd9e
    54b0:	45475241 	strbmi	r5, [r7, #-577]	; 0xfffffdbf
    54b4:	50435f54 	subpl	r5, r3, r4, asr pc
    54b8:	77695f55 			; <UNDEFINED> instruction: 0x77695f55
    54bc:	74786d6d 	ldrbtvc	r6, [r8], #-3437	; 0xfffff293
    54c0:	6d726100 	ldfvse	f6, [r2, #-0]
    54c4:	6372615f 	cmnvs	r2, #-1073741801	; 0xc0000017
    54c8:	00743568 	rsbseq	r3, r4, r8, ror #10
    54cc:	30785f5f 	rsbscc	r5, r8, pc, asr pc
    54d0:	785f5f00 	ldmdavc	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    54d4:	5f5f0031 	svcpl	0x005f0031
    54d8:	5f003278 	svcpl	0x00003278
    54dc:	0033785f 	eorseq	r7, r3, pc, asr r8
    54e0:	5f617369 	svcpl	0x00617369
    54e4:	5f746962 	svcpl	0x00746962
    54e8:	6100706d 	tstvs	r0, sp, rrx
    54ec:	6c5f6d72 	mrrcvs	13, 7, r6, pc, cr2	; <UNPREDICTABLE>
    54f0:	63735f64 	cmnvs	r3, #100, 30	; 0x190
    54f4:	00646568 	rsbeq	r6, r4, r8, ror #10
    54f8:	5f6d7261 	svcpl	0x006d7261
    54fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5500:	00315f38 	eorseq	r5, r1, r8, lsr pc
    5504:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    5508:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    550c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    5510:	56432d62 	strbpl	r2, [r3], -r2, ror #26
    5514:	78794556 	ldmdavc	r9!, {r1, r2, r4, r6, r8, sl, lr}^
    5518:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    551c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    5520:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    5524:	75622f30 	strbvc	r2, [r2, #-3888]!	; 0xfffff0d0
    5528:	2f646c69 	svccs	0x00646c69
    552c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5530:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5534:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5538:	68742f69 	ldmdavs	r4!, {r0, r3, r5, r6, r8, r9, sl, fp, sp}^
    553c:	2f626d75 	svccs	0x00626d75
    5540:	70666f6e 	rsbvc	r6, r6, lr, ror #30
    5544:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5548:	736f6c67 	cmnvc	pc, #26368	; 0x6700
    554c:	696c2f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    5550:	736f6e62 	cmnvc	pc, #1568	; 0x620
    5554:	5f007379 	svcpl	0x00007379
    5558:	5f737973 	svcpl	0x00737973
    555c:	6c727265 	lfmvs	f7, 2, [r2], #-404	; 0xfffffe6c
    5560:	00747369 	rsbseq	r7, r4, r9, ror #6
    5564:	20554e47 	subscs	r4, r5, r7, asr #28
    5568:	20373143 	eorscs	r3, r7, r3, asr #2
    556c:	2e332e38 	mrccs	14, 1, r2, cr3, cr8, {1}
    5570:	30322031 	eorscc	r2, r2, r1, lsr r0
    5574:	37303931 			; <UNDEFINED> instruction: 0x37303931
    5578:	28203330 	stmdacs	r0!, {r4, r5, r8, r9, ip, sp}
    557c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    5580:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    5584:	63675b20 	cmnvs	r7, #32, 22	; 0x8000
    5588:	2d382d63 	ldccs	13, cr2, [r8, #-396]!	; 0xfffffe74
    558c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
    5590:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
    5594:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    5598:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    559c:	30333732 	eorscc	r3, r3, r2, lsr r7
    55a0:	205d3732 	subscs	r3, sp, r2, lsr r7
    55a4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
    55a8:	20626d75 	rsbcs	r6, r2, r5, ror sp
    55ac:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    55b0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    55b4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    55b8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    55bc:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    55c0:	613d7570 	teqvs	sp, r0, ror r5
    55c4:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    55c8:	20696d64 	rsbcs	r6, r9, r4, ror #26
    55cc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
    55d0:	613d6863 	teqvs	sp, r3, ror #16
    55d4:	34766d72 	ldrbtcc	r6, [r6], #-3442	; 0xfffff28e
    55d8:	672d2074 			; <UNDEFINED> instruction: 0x672d2074
    55dc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    55e0:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    55e4:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    55e8:	00324f2d 	eorseq	r4, r2, sp, lsr #30
    55ec:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    55f0:	72656e5f 	rsbvc	r6, r5, #1520	; 0x5f0
    55f4:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    55f8:	2f2e2e2f 	svccs	0x002e2e2f
    55fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5600:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5604:	2f2e2e2f 	svccs	0x002e2e2f
    5608:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    560c:	73736f6c 	cmnvc	r3, #108, 30	; 0x1b0
    5610:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5614:	79736f6e 	ldmdbvc	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    5618:	65672f73 	strbvs	r2, [r7, #-3955]!	; 0xfffff08d
    561c:	646f7474 	strbtvs	r7, [pc], #-1140	; 5624 <__exidx_end+0x6f4>
    5620:	Address 0x0000000000005620 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
}
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
		b->length - b->u.pointers.head - b->u.pointers.tail;
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
	b->u.pointers.tail =
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
}
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
		return NULL;
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
fsm transmitter (message * messagePtr) {
  c8:	43434700 	movtmi	r4, #14080	; 0x3700
  cc:	3128203a 			; <UNDEFINED> instruction: 0x3128203a
  d0:	2d383a35 	vldmdbcs	r8!, {s6-s58}
}
  d4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  d8:	2d33712d 	ldfcss	f7, [r3, #-180]!	; 0xffffff4c
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
  dc:	38202931 	stmdacc	r0!, {r0, r4, r5, r8, fp, sp}
  e0:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  e4:	31303220 	teqcc	r0, r0, lsr #4
  e8:	30373039 	eorscc	r3, r7, r9, lsr r0
        spkt [0] = 0;
  ec:	72282033 	eorvc	r2, r8, #51	; 0x33
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
  f0:	61656c65 	cmnvs	r5, r5, ror #24
        *p = messagePtr->messageType; p++; // insert message type
  f4:	20296573 	eorcs	r6, r9, r3, ror r5
        *p = messagePtr->requestNumber; p++; // insert request number
  f8:	6363675b 	cmnvs	r3, #23855104	; 0x16c0000
        *p = messagePtr->senderId; p++; // insert sender ID
  fc:	622d382d 	eorvs	r3, sp, #2949120	; 0x2d0000
        *p = messagePtr->destinationId; p++; // insert receiver ID
 100:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
        tcv_endp (spkt);
 104:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
        ser_outf(Transmit_Message, "Message Sent\n\r");
 108:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 10c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
}
 110:	32303337 	eorscc	r3, r0, #-603979776	; 0xdc000000
        finish;
 114:	Address 0x0000000000000114 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
}
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000028 	andeq	r0, r0, r8, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	0000005c 	andeq	r0, r0, ip, asr r0
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	46018e02 	strmi	r8, [r1], -r2, lsl #28
      2c:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
      30:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
      34:	c5ce5c0b 	strbgt	r5, [lr, #3083]	; 0xc0b
      38:	000ec3c4 	andeq	ip, lr, r4, asr #7
      3c:	0000000c 	andeq	r0, r0, ip
	...
				j->Next = k;
      48:	0000000c 	andeq	r0, r0, ip
}
      4c:	00000014 	andeq	r0, r0, r4, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	00000124 	andeq	r0, r0, r4, lsr #2
      58:	00000018 	andeq	r0, r0, r8, lsl r0
      5c:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
		b->length - b->u.pointers.head - b->u.pointers.tail;
      60:	040e4901 	streq	r4, [lr], #-2305	; 0xfffff6ff
	b->u.pointers.tail =
      64:	00000020 	andeq	r0, r0, r0, lsr #32
}
      68:	00000000 	andeq	r0, r0, r0
		return NULL;
      6c:	0000013c 	andeq	r0, r0, ip, lsr r1
      70:	000002cc 	andeq	r0, r0, ip, asr #5
      74:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
      78:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      7c:	200e4101 	andcs	r4, lr, r1, lsl #2
      80:	0e013403 	cdpeq	4, 0, cr3, cr1, cr3, {0}
      84:	0000000c 	andeq	r0, r0, ip
      88:	0000000c 	andeq	r0, r0, ip
      8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      90:	7c020001 	stcvc	0, cr0, [r2], {1}
      94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      98:	0000000c 	andeq	r0, r0, ip
      9c:	00000088 	andeq	r0, r0, r8, lsl #1
      a0:	00000408 	andeq	r0, r0, r8, lsl #8
      a4:	0000000c 	andeq	r0, r0, ip
      a8:	00000018 	andeq	r0, r0, r8, lsl r0
      ac:	00000088 	andeq	r0, r0, r8, lsl #1
      b0:	00000414 	andeq	r0, r0, r4, lsl r4
      b4:	0000002c 	andeq	r0, r0, ip, lsr #32
      b8:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      bc:	41000e0a 	tstmi	r0, sl, lsl #28
      c0:	0000000b 	andeq	r0, r0, fp
      c4:	00000018 	andeq	r0, r0, r8, lsl r0
fsm transmitter (message * messagePtr) {
      c8:	00000088 	andeq	r0, r0, r8, lsl #1
      cc:	00000440 	andeq	r0, r0, r0, asr #8
      d0:	0000002a 	andeq	r0, r0, sl, lsr #32
}
      d4:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      d8:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
        spkt = tcv_wnp (Transmit_Message, sfd, sizeof(message) + 4);
      dc:	000b4204 	andeq	r4, fp, r4, lsl #4
      e0:	00000018 	andeq	r0, r0, r8, lsl r0
      e4:	00000088 	andeq	r0, r0, r8, lsl #1
      e8:	0000046c 	andeq	r0, r0, ip, ror #8
        spkt [0] = 0;
      ec:	0000003c 	andeq	r0, r0, ip, lsr r0
        *p = messagePtr->senderGroupId; p += 2; // insert group ID
      f0:	83100e41 	tsthi	r0, #1040	; 0x410
        *p = messagePtr->messageType; p++; // insert message type
      f4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        *p = messagePtr->requestNumber; p++; // insert request number
      f8:	00018e02 	andeq	r8, r1, r2, lsl #28
        *p = messagePtr->senderId; p++; // insert sender ID
      fc:	00000018 	andeq	r0, r0, r8, lsl r0
        *p = messagePtr->destinationId; p++; // insert receiver ID
     100:	00000088 	andeq	r0, r0, r8, lsl #1
        tcv_endp (spkt);
     104:	000004a8 	andeq	r0, r0, r8, lsr #9
        ser_outf(Transmit_Message, "Message Sent\n\r");
     108:	00000040 	andeq	r0, r0, r0, asr #32
     10c:	83100e41 	tsthi	r0, #1040	; 0x410
}
     110:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
        finish;
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000014 	andeq	r0, r0, r4, lsl r0
     11c:	00000088 	andeq	r0, r0, r8, lsl #1
     120:	00000000 	andeq	r0, r0, r0
char randomNumber() {
     124:	00000020 	andeq	r0, r0, r0, lsr #32
   srand((unsigned) time(&t));
     128:	83080e42 	movwhi	r0, #36418	; 0x8e42
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
   return (char)rand();
     130:	00000014 	andeq	r0, r0, r4, lsl r0
}
     134:	00000088 	andeq	r0, r0, r8, lsl #1
     138:	000004e8 	andeq	r0, r0, r8, ror #9
fsm root {
     13c:	00000054 	andeq	r0, r0, r4, asr r0
     140:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     144:	00018e02 	andeq	r8, r1, r2, lsl #28
     148:	00000014 	andeq	r0, r0, r4, lsl r0
     14c:	00000088 	andeq	r0, r0, r8, lsl #1
     150:	0000053c 	andeq	r0, r0, ip, lsr r5
     154:	00000040 	andeq	r0, r0, r0, asr #32
     158:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     15c:	00018e02 	andeq	r8, r1, r2, lsl #28
     160:	00000014 	andeq	r0, r0, r4, lsl r0
     164:	00000088 	andeq	r0, r0, r8, lsl #1
     168:	0000057c 	andeq	r0, r0, ip, ror r5
     16c:	00000028 	andeq	r0, r0, r8, lsr #32
        recordCount = 0;
     170:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
        nodeId = 1;
     174:	00018e02 	andeq	r8, r1, r2, lsl #28
     178:	00000014 	andeq	r0, r0, r4, lsl r0
        groupId = 1;
     17c:	00000088 	andeq	r0, r0, r8, lsl #1
     180:	000005a4 	andeq	r0, r0, r4, lsr #11
        messagePtr = (message *) umalloc(sizeof(message));
     184:	00000114 	andeq	r0, r0, r4, lsl r1
        phys_cc1350(0, MAX_PACKET_LENGTH);
     188:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     18c:	00018e02 	andeq	r8, r1, r2, lsl #28
     190:	0000001c 	andeq	r0, r0, ip, lsl r0
        tcv_plug(0, &plug_null);
     194:	00000088 	andeq	r0, r0, r8, lsl #1
     198:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
        sfd = tcv_open(WNONE, 0, 0);
     19c:	00000050 	andeq	r0, r0, r0, asr r0
     1a0:	83180e41 	tsthi	r8, #1040	; 0x410
     1a4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1a8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
        sfd = tcv_open(WNONE, 0, 0);
     1ac:	00018e02 	andeq	r8, r1, r2, lsl #28
		tcv_control(sfd, PHYSOPT_ON, NULL);
     1b0:	00000018 	andeq	r0, r0, r8, lsl r0
		if (sfd < 0) {
     1b4:	00000088 	andeq	r0, r0, r8, lsl #1
			diag("Cannot open tcv interface");
     1b8:	00000708 	andeq	r0, r0, r8, lsl #14
     1bc:	00000054 	andeq	r0, r0, r4, asr r0
			halt();
     1c0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        currentProtocol = IDLE;
     1c4:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1c8:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
     1cc:	0000000c 	andeq	r0, r0, ip
     1d0:	00000088 	andeq	r0, r0, r8, lsl #1
     1d4:	0000075c 	andeq	r0, r0, ip, asr r7
     1d8:	00000038 	andeq	r0, r0, r8, lsr r0
     1dc:	00000020 	andeq	r0, r0, r0, lsr #32
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_outf(Options, menu);
     1e4:	00000794 	muleq	r0, r4, r7
     1e8:	00000110 	andeq	r0, r0, r0, lsl r1
        ser_inf(Get_Choice, "%c", &choice);
     1ec:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     1f0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1f4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
        switch (choice)
     1f8:	89038804 	stmdbhi	r3, {r2, fp, pc}
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     200:	0000000c 	andeq	r0, r0, ip
     204:	00000088 	andeq	r0, r0, r8, lsl #1
     208:	00000000 	andeq	r0, r0, r0
     20c:	0000000c 	andeq	r0, r0, ip
     210:	00000018 	andeq	r0, r0, r8, lsl r0
     214:	00000088 	andeq	r0, r0, r8, lsl #1
     218:	000008a4 	andeq	r0, r0, r4, lsr #17
     21c:	000000c0 	andeq	r0, r0, r0, asr #1
     220:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     224:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
        proceed Menu_Header;
     228:	00000001 	andeq	r0, r0, r1
     22c:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_outf(Set_Group_ID, "New Group ID: ");
     230:	00000088 	andeq	r0, r0, r8, lsl #1
     234:	00000964 	andeq	r0, r0, r4, ror #18
        ser_inf(Get_Group_ID, "%d", &groupId);
     238:	00000044 	andeq	r0, r0, r4, asr #32
     23c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        proceed Menu_Header;
     240:	86038504 	strhi	r8, [r3], -r4, lsl #10
     244:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     248:	0000001c 	andeq	r0, r0, ip, lsl r0
     24c:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_inf(Get_Node_ID, "%d", &nodeId);
     250:	000009a8 	andeq	r0, r0, r8, lsr #19
     254:	0000003c 	andeq	r0, r0, ip, lsr r0
     258:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    if (node < 1 || node > 25) {
     25c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     260:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
            proceed Set_Node_ID;
     264:	00000001 	andeq	r0, r0, r1
        proceed Menu_Header;
     268:	00000018 	andeq	r0, r0, r8, lsl r0
     26c:	00000088 	andeq	r0, r0, r8, lsl #1
        currentProtocol = DISCOVERY_REQUEST;
     270:	000009e4 	andeq	r0, r0, r4, ror #19
     274:	000000a4 	andeq	r0, r0, r4, lsr #1
        receiverId = 0;
     278:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        proceed Transmit_Message;
     27c:	86038504 	strhi	r8, [r3], -r4, lsl #10
        currentProtocol = CREATE_RECORD;
     280:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Create_Record, "Receiver node ID (1-25):");
     284:	00000030 	andeq	r0, r0, r0, lsr r0
     288:	00000088 	andeq	r0, r0, r8, lsl #1
        ser_inf(Get_Receiver_Node, "%d", &receiverId);
     28c:	00000a88 	andeq	r0, r0, r8, lsl #21
     290:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     294:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    if (node < 1 || node > 25) {
     298:	86078508 	strhi	r8, [r7], -r8, lsl #10
     29c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
            proceed Create_Record;
     2a0:	8a038904 	bhi	e26b8 <__ccfg+0xc2710>
     2a4:	02018e02 	andeq	r8, r1, #2, 28
        ser_in(Get_Message, messagePtr->messageRecord, RECORD_LENGTH);
     2a8:	cace0aa2 	bgt	ff382d38 <_estack+0xdf37dd38>
     2ac:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     2b0:	000ec4c5 	andeq	ip, lr, r5, asr #9
        if(strlen(messagePtr->messageRecord) >= RECORD_LENGTH) {
     2b4:	00000b42 	andeq	r0, r0, r2, asr #22
     2b8:	0000000c 	andeq	r0, r0, ip
     2bc:	00000088 	andeq	r0, r0, r8, lsl #1
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c0:	00000c40 	andeq	r0, r0, r0, asr #24
        proceed Transmit_Message;
     2c4:	00000024 	andeq	r0, r0, r4, lsr #32
            messagePtr->messageRecord[RECORD_LENGTH - 1] = '/0';
     2c8:	0000000c 	andeq	r0, r0, ip
        proceed Transmit_Message;
     2cc:	00000088 	andeq	r0, r0, r8, lsl #1
        currentProtocol = DELETE_RECORD;
     2d0:	00000000 	andeq	r0, r0, r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2d4:	00000028 	andeq	r0, r0, r8, lsr #32
        currentProtocol = DELETE_RECORD;
     2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
        ser_outf(Retrieve_Record, "Delete Record from Neighbour:\n\r");
     2dc:	00000088 	andeq	r0, r0, r8, lsl #1
        proceed Get_Receiving_Node;
     2e0:	00000c64 	andeq	r0, r0, r4, ror #24
        currentProtocol = RETRIEVE_RECORD;
     2e4:	00000258 	andeq	r0, r0, r8, asr r2
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2e8:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
        currentProtocol = RETRIEVE_RECORD;
     2ec:	8e028b03 	vmlahi.f64	d8, d2, d3
        ser_outf(Retrieve_Record, "Retrieve Record from Neighbour:\n\r");
     2f0:	180e4101 	stmdane	lr, {r0, r8, lr}
        ser_outf(Prompt_Recieving_Node, "Neighbour node ID (1-25):");
     2f4:	00070d42 	andeq	r0, r7, r2, asr #26
     2f8:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_inf(Get_Receiving_Node, "%d", &receiverId);
     2fc:	00000088 	andeq	r0, r0, r8, lsl #1
     300:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     304:	00000030 	andeq	r0, r0, r0, lsr r0
    if (node < 1 || node > 25) {
     308:	83080e42 	movwhi	r0, #36418	; 0x8e42
     30c:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Prompt_Recieving_Node;
     310:	00000018 	andeq	r0, r0, r8, lsl r0
        ser_outf(Prompt_Record_Index, "Record index:");
     314:	00000088 	andeq	r0, r0, r8, lsl #1
     318:	00000000 	andeq	r0, r0, r0
        char desiredRecordIndex = -1;
     31c:	0000005c 	andeq	r0, r0, ip, asr r0
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     320:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     324:	86038504 	strhi	r8, [r3], -r4, lsl #10
        char desiredRecordIndex = -1;
     328:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_inf(Get_Record_Index, "%d", &desiredRecordIndex);
     32c:	00000014 	andeq	r0, r0, r4, lsl r0
        messagePtr->recordIndex = desiredRecordIndex;
     330:	00000088 	andeq	r0, r0, r8, lsl #1
     334:	00000eec 	andeq	r0, r0, ip, ror #29
     338:	00000060 	andeq	r0, r0, r0, rrx
        proceed Transmit_Message;
     33c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        messagePtr -> senderGroupId = groupId;
     340:	00018e02 	andeq	r8, r1, r2, lsl #28
     344:	0000000c 	andeq	r0, r0, ip
     348:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
        messagePtr -> messageType = currentProtocol;
     34c:	7c020001 	stcvc	0, cr0, [r2], {1}
     350:	000d0c0e 	andeq	r0, sp, lr, lsl #24
        messagePtr -> requestNumber = randomNumber();
     354:	00000018 	andeq	r0, r0, r8, lsl r0
        messagePtr -> senderId = nodeId;
     358:	00000344 	andeq	r0, r0, r4, asr #6
     35c:	00000f4c 	andeq	r0, r0, ip, asr #30
        call transmitter(messagePtr, Menu_Header);
     360:	0000003c 	andeq	r0, r0, ip, lsr r0
        messagePtr -> destinationId = receiverId;
     364:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     368:	86038504 	strhi	r8, [r3], -r4, lsl #10
        call transmitter(messagePtr, Menu_Header);
     36c:	00018e02 	andeq	r8, r1, r2, lsl #28
     370:	00000018 	andeq	r0, r0, r8, lsl r0
     374:	00000344 	andeq	r0, r0, r4, asr #6
     378:	00000f88 	andeq	r0, r0, r8, lsl #31
            proceed Set_Node_ID;
     37c:	00000080 	andeq	r0, r0, r0, lsl #1
            break;
     380:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
            proceed Set_Node_ID;
     384:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
            proceed Find_Neighbours;
     388:	00000001 	andeq	r0, r0, r1
            proceed Create_Record;
     38c:	0000000c 	andeq	r0, r0, ip
            proceed Delete_Record;
     390:	00000344 	andeq	r0, r0, r4, asr #6
            proceed Retrieve_Record;
     394:	00001008 	andeq	r1, r0, r8
            diag("Reset Local Storage");
     398:	00000018 	andeq	r0, r0, r8, lsl r0
            break;
     39c:	00000014 	andeq	r0, r0, r4, lsl r0
            diag("Reset Local Storage");
     3a0:	00000344 	andeq	r0, r0, r4, asr #6
     3a4:	00000000 	andeq	r0, r0, r0
     3a8:	00000024 	andeq	r0, r0, r4, lsr #32
     3ac:	83080e41 	movwhi	r0, #36417	; 0x8e41
     3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3b4:	00000014 	andeq	r0, r0, r4, lsl r0
     3b8:	00000344 	andeq	r0, r0, r4, asr #6
     3bc:	00001020 	andeq	r1, r0, r0, lsr #32
     3c0:	00000010 	andeq	r0, r0, r0, lsl r0
     3c4:	83080e42 	movwhi	r0, #36418	; 0x8e42
     3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3cc:	00000014 	andeq	r0, r0, r4, lsl r0
     3d0:	00000344 	andeq	r0, r0, r4, asr #6
     3d4:	00001030 	andeq	r1, r0, r0, lsr r0
     3d8:	0000002c 	andeq	r0, r0, ip, lsr #32
     3dc:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e4:	00000014 	andeq	r0, r0, r4, lsl r0
     3e8:	00000344 	andeq	r0, r0, r4, asr #6
     3ec:	00000000 	andeq	r0, r0, r0
     3f0:	0000004c 	andeq	r0, r0, ip, asr #32
     3f4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3fc:	0000000c 	andeq	r0, r0, ip
     400:	00000344 	andeq	r0, r0, r4, asr #6
     404:	0000105c 	andeq	r1, r0, ip, asr r0
static void devinit_uart (int devnum) {
     408:	00000006 	andeq	r0, r0, r6
	adddevfunc (ioreq_uart_a, devnum);
     40c:	00000028 	andeq	r0, r0, r8, lsr #32
     410:	00000344 	andeq	r0, r0, r4, asr #6
void udelay (volatile word n) {
     414:	00001064 	andeq	r1, r0, r4, rrx
     418:	000000cc 	andeq	r0, r0, ip, asr #1
	while (n) {
     41c:	83180e41 	tsthi	r8, #1040	; 0x410
     420:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
}
     424:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	while (n--);
     428:	02018e02 	andeq	r8, r1, #2, 28
     42c:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     430:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
		n--;
     434:	0b42000e 	bleq	1080474 <__ccfg+0x10604cc>
     438:	00000014 	andeq	r0, r0, r4, lsl r0
     43c:	00000344 	andeq	r0, r0, r4, asr #6
void mdelay (volatile word n) {
     440:	00001130 	andeq	r1, r0, r0, lsr r1
     444:	00000014 	andeq	r0, r0, r4, lsl r0
	while (n) {
     448:	83080e41 	movwhi	r0, #36417	; 0x8e41
     44c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     450:	00000014 	andeq	r0, r0, r4, lsl r0
		udelay (999);
     454:	00000344 	andeq	r0, r0, r4, asr #6
     458:	00001144 	andeq	r1, r0, r4, asr #2
		n--;
     45c:	00000034 	andeq	r0, r0, r4, lsr r0
     460:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     464:	00018e02 	andeq	r8, r1, r2, lsl #28
     468:	00000018 	andeq	r0, r0, r8, lsl r0
void __pi_ondomain (lword d) {
     46c:	00000344 	andeq	r0, r0, r4, asr #6
     470:	00001178 	andeq	r1, r0, r8, ror r1
		if (__pi_systat.effpdm > 1)
     474:	00000034 	andeq	r0, r0, r4, lsr r0
     478:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			__pi_systat.effpdm = 1;
     47c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	PRCMPowerDomainOn (d);
     480:	00000001 	andeq	r0, r0, r1
     484:	00000018 	andeq	r0, r0, r8, lsl r0
     488:	00000344 	andeq	r0, r0, r4, asr #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48c:	00000000 	andeq	r0, r0, r0
     490:	0000002c 	andeq	r0, r0, ip, lsr #32
     494:	83100e41 	tsthi	r0, #1040	; 0x410
	__pi_systat.ondmns |= d;
     498:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     49c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     4a0:	00000014 	andeq	r0, r0, r4, lsl r0
     4a4:	00000344 	andeq	r0, r0, r4, asr #6
void __pi_offdomain (lword d) {
     4a8:	000011ac 	andeq	r1, r0, ip, lsr #3
     4ac:	00000024 	andeq	r0, r0, r4, lsr #32
	PRCMPowerDomainOff (d);
     4b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_OFF);
     4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b8:	00000018 	andeq	r0, r0, r8, lsl r0
     4bc:	00000344 	andeq	r0, r0, r4, asr #6
	if (d & PRCM_DOMAIN_RFCORE) {
     4c0:	000011d0 	ldrdeq	r1, [r0], -r0
     4c4:	00000038 	andeq	r0, r0, r8, lsr r0
		if (__pi_systat.reqpdm > __pi_systat.effpdm)
     4c8:	83100e41 	tsthi	r0, #1040	; 0x410
     4cc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			__pi_systat.effpdm = __pi_systat.reqpdm;
     4d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d4:	0000000c 	andeq	r0, r0, ip
	__pi_systat.ondmns &= ~d;
     4d8:	00000344 	andeq	r0, r0, r4, asr #6
     4dc:	00000000 	andeq	r0, r0, r0
}
     4e0:	00000014 	andeq	r0, r0, r4, lsl r0
     4e4:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_syserror (word ec, const char *m) {
     4e8:	00000344 	andeq	r0, r0, r4, asr #6
	diag ("SYSERR: %x, %s", ec, m);
     4ec:	00000000 	andeq	r0, r0, r0
     4f0:	00000040 	andeq	r0, r0, r0, asr #32
  __ASM volatile ("cpsid i" : : : "memory");
     4f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
     500:	00000344 	andeq	r0, r0, r4, asr #6
		all_leds_blink;
     504:	00000000 	andeq	r0, r0, r0
     508:	00000018 	andeq	r0, r0, r8, lsl r0
     50c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     510:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     514:	0000000c 	andeq	r0, r0, ip
     518:	00000344 	andeq	r0, r0, r4, asr #6
     51c:	00001208 	andeq	r1, r0, r8, lsl #4
     520:	00000024 	andeq	r0, r0, r4, lsr #32
     524:	0000000c 	andeq	r0, r0, ip
     528:	00000344 	andeq	r0, r0, r4, asr #6
	while (1) {
     52c:	00000000 	andeq	r0, r0, r0
     530:	00000020 	andeq	r0, r0, r0, lsr #32
     534:	0000000c 	andeq	r0, r0, ip
     538:	00000344 	andeq	r0, r0, r4, asr #6
void tci_run_delay_timer () {
     53c:	0000122c 	andeq	r1, r0, ip, lsr #4
	setdel = __pi_mintk - __pi_old;
     540:	0000000e 	andeq	r0, r0, lr
     544:	0000000c 	andeq	r0, r0, ip
     548:	00000344 	andeq	r0, r0, r4, asr #6
     54c:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	00000010 	andeq	r0, r0, r0, lsl r0
     554:	0000000c 	andeq	r0, r0, ip
     558:	00000344 	andeq	r0, r0, r4, asr #6
     55c:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     560:	0000001c 	andeq	r0, r0, ip, lsl r0
	sti_tim;
     564:	0000000c 	andeq	r0, r0, ip
}
     568:	00000344 	andeq	r0, r0, r4, asr #6
     56c:	00000000 	andeq	r0, r0, r0
     570:	00000010 	andeq	r0, r0, r0, lsl r0
     574:	0000000c 	andeq	r0, r0, ip
     578:	00000344 	andeq	r0, r0, r4, asr #6
	cli_aux;
     57c:	00000000 	andeq	r0, r0, r0
     580:	00000006 	andeq	r0, r0, r6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     584:	0000000c 	andeq	r0, r0, ip
     588:	00000344 	andeq	r0, r0, r4, asr #6
     58c:	0000123a 	andeq	r1, r0, sl, lsr r2
     590:	00000014 	andeq	r0, r0, r4, lsl r0
	sti_aux;
     594:	0000000c 	andeq	r0, r0, ip
}
     598:	00000344 	andeq	r0, r0, r4, asr #6
     59c:	0000124e 	andeq	r1, r0, lr, asr #4
     5a0:	0000000e 	andeq	r0, r0, lr
void AONRTCIntHandler () {
     5a4:	00000014 	andeq	r0, r0, r4, lsl r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5a8:	00000344 	andeq	r0, r0, r4, asr #6
     5ac:	0000125c 	andeq	r1, r0, ip, asr r2
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5b0:	00000024 	andeq	r0, r0, r4, lsr #32
		if (__pi_utims [0] == 0)
     5b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5b8:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (*(__pi_utims [0])) {
     5bc:	00000020 	andeq	r0, r0, r0, lsr #32
     5c0:	00000344 	andeq	r0, r0, r4, asr #6
			(*(__pi_utims [0]))--;
     5c4:	00001280 	andeq	r1, r0, r0, lsl #5
		if (__pi_utims [1] == 0)
     5c8:	0000009c 	muleq	r0, ip, r0
		if (*(__pi_utims [1])) {
     5cc:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			aux_timer_inactive = 0;
     5d0:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
			(*(__pi_utims [1]))--;
     5d4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		if (__pi_utims [2] == 0)
     5d8:	89038804 	stmdbhi	r3, {r2, fp, pc}
		if (*(__pi_utims [2])) {
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
			(*(__pi_utims [2]))--;
     5e0:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_utims [3] != 0) {
     5e4:	00000344 	andeq	r0, r0, r4, asr #6
			if (*(__pi_utims [3])) {
     5e8:	0000131c 	andeq	r1, r0, ip, lsl r3
				aux_timer_inactive = 0;
     5ec:	00000050 	andeq	r0, r0, r0, asr r0
				(*(__pi_utims [3]))--;
     5f0:	83080e42 	movwhi	r0, #36418	; 0x8e42
	if (__pi_systat.ledsts) {
     5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f8:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.ledblc++ == 0) {
     5fc:	00000344 	andeq	r0, r0, r4, asr #6
     600:	0000136c 	andeq	r1, r0, ip, ror #6
			if (__pi_systat.ledblk) {
     604:	00000048 	andeq	r0, r0, r8, asr #32
     608:	83080e41 	movwhi	r0, #36417	; 0x8e41
     60c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     610:	00000014 	andeq	r0, r0, r4, lsl r0
     614:	00000344 	andeq	r0, r0, r4, asr #6
				if (__pi_systat.ledsts & 0x2)
     618:	000013b4 			; <UNDEFINED> instruction: 0x000013b4
     61c:	00000050 	andeq	r0, r0, r0, asr r0
     620:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if (__pi_systat.ledsts & 0x4)
     624:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblk = 0;
     628:	00000020 	andeq	r0, r0, r0, lsr #32
     62c:	00000344 	andeq	r0, r0, r4, asr #6
			if (__pi_systat.fstblk)
     630:	00000000 	andeq	r0, r0, r0
     634:	00000058 	andeq	r0, r0, r8, asr r0
				__pi_systat.ledblc = 200;
     638:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
	if (events & AON_RTC_EVFLAGS_CH0) {
     63c:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		cli_tim;
     640:	87058606 	strhi	r8, [r5, -r6, lsl #12]
		__pi_new += setdel;
     644:	89038804 	stmdbhi	r3, {r2, fp, pc}
     648:	00018e02 	andeq	r8, r1, r2, lsl #28
		setdel = 0;
     64c:	00000018 	andeq	r0, r0, r8, lsl r0
		RISE_N_SHINE;
     650:	00000344 	andeq	r0, r0, r4, asr #6
		__pi_new += setdel;
     654:	00001404 	andeq	r1, r0, r4, lsl #8
		RISE_N_SHINE;
     658:	000000a8 	andeq	r0, r0, r8, lsr #1
     65c:	83100e44 	tsthi	r0, #68, 28	; 0x440
		aux_timer_inactive = 1;
     660:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     664:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x1)
     668:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     66c:	00000344 	andeq	r0, r0, r4, asr #6
     670:	000014ac 	andeq	r1, r0, ip, lsr #9
				if (__pi_systat.ledsts & 0x2)
     674:	00000034 	andeq	r0, r0, r4, lsr r0
     678:	83100e41 	tsthi	r0, #1040	; 0x410
     67c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				if (__pi_systat.ledsts & 0x8)
     680:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblk = 1;
     684:	0000000c 	andeq	r0, r0, ip
     688:	00000344 	andeq	r0, r0, r4, asr #6
		if (aux_timer_inactive) {
     68c:	000014e0 	andeq	r1, r0, r0, ror #9
			cli_aux;
     690:	00000018 	andeq	r0, r0, r8, lsl r0
     694:	00000014 	andeq	r0, r0, r4, lsl r0
     698:	00000344 	andeq	r0, r0, r4, asr #6
     69c:	00000000 	andeq	r0, r0, r0
     6a0:	00000030 	andeq	r0, r0, r0, lsr r0
     6a4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6a8:	00018e02 	andeq	r8, r1, r2, lsl #28
     6ac:	00000014 	andeq	r0, r0, r4, lsl r0
     6b0:	00000344 	andeq	r0, r0, r4, asr #6
     6b4:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
     6b8:	00000038 	andeq	r0, r0, r8, lsr r0
	cli_tim;
     6bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (setdel) {
     6c4:	00000040 	andeq	r0, r0, r0, asr #32
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6c8:	00000344 	andeq	r0, r0, r4, asr #6
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     6cc:	000014f8 	strdeq	r1, [r0], -r8
     6d0:	0000013c 	andeq	r0, r0, ip, lsr r1
     6d4:	80100e41 	andshi	r0, r0, r1, asr #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6d8:	82038104 	andhi	r8, r3, #4, 2
				AON_RTC_O_CH0CMP)) - gettav ());
     6dc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
	return NO;
     6e0:	0b84380e 	bleq	fe10e720 <_estack+0xde109720>
			setdel = 0;
     6e4:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6e8:	07880887 	streq	r0, [r8, r7, lsl #17]
     6ec:	058e0689 	streq	r0, [lr, #1673]	; 0x689
}
     6f0:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
		sti_tim;
     6f4:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
		return YES;
     6f8:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     6fc:	c341100e 	movtgt	r1, #4110	; 0x100e
     700:	0ec0c1c2 	acseqdm	f4, f2
     704:	000b4100 	andeq	r4, fp, r0, lsl #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     708:	0000000c 	andeq	r0, r0, ip
	UARTDisable (UART0_BASE);
     70c:	00000344 	andeq	r0, r0, r4, asr #6
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     710:	00001634 	andeq	r1, r0, r4, lsr r6
	UARTDisable (UART0_BASE);
     714:	00000024 	andeq	r0, r0, r4, lsr #32
	UARTConfigSetExpClk (UART0_BASE,
     718:	0000000c 	andeq	r0, r0, ip
     71c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     720:	7c020001 	stcvc	0, cr0, [r2], {1}
     724:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     728:	00000014 	andeq	r0, r0, r4, lsl r0
     72c:	00000718 	andeq	r0, r0, r8, lsl r7
     730:	00001658 	andeq	r1, r0, r8, asr r6
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     734:	00000016 	andeq	r0, r0, r6, lsl r0
     738:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     73c:	00018e02 	andeq	r8, r1, r2, lsl #28
	urates [0] = rate;
     740:	0000000c 	andeq	r0, r0, ip
}
     744:	00000718 	andeq	r0, r0, r8, lsl r7
     748:	0000166e 	andeq	r1, r0, lr, ror #12
     74c:	0000001a 	andeq	r0, r0, sl, lsl r0
     750:	00000018 	andeq	r0, r0, r8, lsl r0
     754:	00000718 	andeq	r0, r0, r8, lsl r7
     758:	00001688 	andeq	r1, r0, r8, lsl #13
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     75c:	0000000e 	andeq	r0, r0, lr
     760:	83080e41 	movwhi	r0, #36417	; 0x8e41
     764:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     768:	000ec3ce 	andeq	ip, lr, lr, asr #7
     76c:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     770:	00000718 	andeq	r0, r0, r8, lsl r7
     774:	00001698 	muleq	r0, r8, r6
	__pi_uart_setrate (urates [0], __pi_uart);
     778:	0000004c 	andeq	r0, r0, ip, asr #32
     77c:	83100e41 	tsthi	r0, #1040	; 0x410
     780:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     784:	00018e02 	andeq	r8, r1, r2, lsl #28
     788:	00000020 	andeq	r0, r0, r0, lsr #32
     78c:	00000718 	andeq	r0, r0, r8, lsl r7
     790:	000016e4 	andeq	r1, r0, r4, ror #13
	switch (operation) {
     794:	0000008c 	andeq	r0, r0, ip, lsl #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     798:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     79c:	5f018e02 	svcpl	0x00018e02
     7a0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7a4:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     7a8:	000ec4ce 	andeq	ip, lr, lr, asr #9
				*buf++ = uart_a_read;
     7ac:	00000020 	andeq	r0, r0, r0, lsr #32
     7b0:	00000718 	andeq	r0, r0, r8, lsl r7
			while (len && uart_a_char_available) {
     7b4:	00001770 	andeq	r1, r0, r0, ror r7
     7b8:	00000070 	andeq	r0, r0, r0, ror r0
     7bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			if (len != operation) {
     7c0:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
}
     7c4:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7c8:	430b4200 	movwmi	r4, #45568	; 0xb200
			uart_a_disable_int;
     7cc:	000ec4ce 	andeq	ip, lr, lr, asr #9
			if (uart_a_char_available) {
     7d0:	0000003c 	andeq	r0, r0, ip, lsr r0
				*buf++ = uart_a_read;
     7d4:	00000718 	andeq	r0, r0, r8, lsl r7
			uart_a_disable_int;
     7d8:	000017e0 	andeq	r1, r0, r0, ror #15
     7dc:	000000c0 	andeq	r0, r0, r0, asr #1
			if (uart_a_char_available) {
     7e0:	82080e41 	andhi	r0, r8, #1040	; 0x410
     7e4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
				uart_a_enable_int;
     7e8:	0a84300e 	beq	fe10c828 <_estack+0xde107828>
     7ec:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
				goto Redo_rx;
     7f0:	06880787 	streq	r0, [r8], r7, lsl #15
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7f4:	048a0589 	streq	r0, [sl], #1417	; 0x589
     7f8:	0a6b038e 	beq	1ac1638 <__ccfg+0x1aa1690>
			return -2;
     7fc:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     800:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
				uart_a_write (*buf);
     804:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     808:	c2c34108 	sbcgt	r4, r3, #8, 2
			while (len && uart_a_room_in_tx) {
     80c:	0b41000e 	bleq	104084c <__ccfg+0x10208a4>
     810:	0000001c 	andeq	r0, r0, ip, lsl r0
     814:	00000718 	andeq	r0, r0, r8, lsl r7
			if (len != operation) {
     818:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
     81c:	0000006c 	andeq	r0, r0, ip, rrx
     820:	83180e42 	tsthi	r8, #1056	; 0x420
			if (uart_a_room_in_tx) {
     824:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     828:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				uart_a_enable_int;
     82c:	00018e02 	andeq	r8, r1, r2, lsl #28
     830:	0000000c 	andeq	r0, r0, ip
				*buf++ = uart_a_read;
     834:	00000718 	andeq	r0, r0, r8, lsl r7
			if (uart_a_room_in_tx) {
     838:	000018a0 	andeq	r1, r0, r0, lsr #17
				uart_a_write (*buf);
     83c:	00000024 	andeq	r0, r0, r4, lsr #32
     840:	00000018 	andeq	r0, r0, r8, lsl r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     844:	00000718 	andeq	r0, r0, r8, lsl r7
     848:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
     84c:	00000080 	andeq	r0, r0, r0, lsl #1
     850:	83100e42 	tsthi	r0, #1056	; 0x420
     854:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			return 0;
     858:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (len == UART_CNTRL_SETRATE) {
     85c:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_uart_setrate (*((word*)buf),
     860:	00000718 	andeq	r0, r0, r8, lsl r7
     864:	00000000 	andeq	r0, r0, r0
     868:	00000070 	andeq	r0, r0, r0, ror r0
				syserror (EREQPAR, "uar");
     86c:	83080e42 	movwhi	r0, #36418	; 0x8e42
			syserror (ENOOPER, "uai");
     870:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (len == UART_CNTRL_GETRATE) {
     874:	00000018 	andeq	r0, r0, r8, lsl r0
				return 1;
     878:	00000718 	andeq	r0, r0, r8, lsl r7
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     87c:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     880:	00000078 	andeq	r0, r0, r8, ror r0
     884:	83100e42 	tsthi	r0, #1056	; 0x420
     888:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     88c:	00018e02 	andeq	r8, r1, r2, lsl #28
     890:	00000020 	andeq	r0, r0, r0, lsr #32
     894:	00000718 	andeq	r0, r0, r8, lsl r7
     898:	000018c4 	andeq	r1, r0, r4, asr #17
     89c:	000000bc 	strheq	r0, [r0], -ip
     8a0:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8a4:	86048505 	strhi	r8, [r4], -r5, lsl #10
void UART0IntHandler () {
     8a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8ac:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     8b0:	000b4114 	andeq	r4, fp, r4, lsl r1
     8b4:	00000018 	andeq	r0, r0, r8, lsl r0
     8b8:	00000718 	andeq	r0, r0, r8, lsl r7
     8bc:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     8c0:	0000003a 	andeq	r0, r0, sl, lsr r0
     8c4:	83100e41 	tsthi	r0, #1040	; 0x410
		RISE_N_SHINE;
     8c8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8cc:	00018e02 	andeq	r8, r1, r2, lsl #28
		i_trigger (devevent (UART_A, READ));
     8d0:	00000018 	andeq	r0, r0, r8, lsl r0
     8d4:	00000718 	andeq	r0, r0, r8, lsl r7
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	00000038 	andeq	r0, r0, r8, lsr r0
     8e0:	83100e41 	tsthi	r0, #1040	; 0x410
     8e4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8ec:	0000000c 	andeq	r0, r0, ip
     8f0:	00000718 	andeq	r0, r0, r8, lsl r7
     8f4:	00000000 	andeq	r0, r0, r0
     8f8:	0000000a 	andeq	r0, r0, sl
     8fc:	00000018 	andeq	r0, r0, r8, lsl r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     900:	00000718 	andeq	r0, r0, r8, lsl r7
     904:	00001980 	andeq	r1, r0, r0, lsl #19
     908:	0000002c 	andeq	r0, r0, ip, lsr #32
		i_trigger (devevent (UART_A, WRITE));
     90c:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     910:	4c018e02 	stcmi	14, cr8, [r1], {2}
     914:	000ec4ce 	andeq	ip, lr, lr, asr #9
		RISE_N_SHINE;
     918:	0000001c 	andeq	r0, r0, ip, lsl r0
     91c:	00000718 	andeq	r0, r0, r8, lsl r7
     920:	000019ac 	andeq	r1, r0, ip, lsr #19
		i_trigger (devevent (UART_A, WRITE));
     924:	00000060 	andeq	r0, r0, r0, rrx
     928:	83080e41 	movwhi	r0, #36417	; 0x8e41
     92c:	61018e02 	tstvs	r1, r2, lsl #28
     930:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     934:	000b4300 	andeq	r4, fp, r0, lsl #6
     938:	00000014 	andeq	r0, r0, r4, lsl r0
     93c:	00000718 	andeq	r0, r0, r8, lsl r7
     940:	00000000 	andeq	r0, r0, r0
     944:	00000040 	andeq	r0, r0, r0, asr #32
     948:	83080e42 	movwhi	r0, #36418	; 0x8e42
     94c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     950:	00000014 	andeq	r0, r0, r4, lsl r0
     954:	00000718 	andeq	r0, r0, r8, lsl r7
     958:	00000000 	andeq	r0, r0, r0
     95c:	0000002c 	andeq	r0, r0, ip, lsr #32
     960:	83080e42 	movwhi	r0, #36418	; 0x8e42
void __buttons_setirq (int val) {
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     968:	0000001c 	andeq	r0, r0, ip, lsl r0
     96c:	00000718 	andeq	r0, r0, r8, lsl r7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     970:	00000000 	andeq	r0, r0, r0
     974:	0000003c 	andeq	r0, r0, ip, lsr r0
     978:	83180e41 	tsthi	r8, #1040	; 0x410
		bn = BUTTON_GPIO (__button_list [i]);
     97c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     980:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     984:	00018e02 	andeq	r8, r1, r2, lsl #28
     988:	0000000c 	andeq	r0, r0, ip
     98c:	00000718 	andeq	r0, r0, r8, lsl r7
     990:	00000000 	andeq	r0, r0, r0
     994:	00000006 	andeq	r0, r0, r6
}
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	00000718 	andeq	r0, r0, r8, lsl r7
     9a0:	00001a0c 	andeq	r1, r0, ip, lsl #20
     9a4:	00000068 	andeq	r0, r0, r8, rrx
void __pinlist_setirq (int val) {
     9a8:	83180e41 	tsthi	r8, #1040	; 0x410
	for (i = 0; i < N_PINLIST; i++) {
     9ac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9b4:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; i < N_PINLIST; i++) {
     9b8:	00000014 	andeq	r0, r0, r4, lsl r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9bc:	00000718 	andeq	r0, r0, r8, lsl r7
     9c0:	00001a74 	andeq	r1, r0, r4, ror sl
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c4:	00000050 	andeq	r0, r0, r0, asr r0
     9c8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     9cc:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; i < N_PINLIST; i++) {
     9d0:	0000002c 	andeq	r0, r0, ip, lsr #32
}
     9d4:	00000718 	andeq	r0, r0, r8, lsl r7
     9d8:	00001ac4 	andeq	r1, r0, r4, asr #21
     9dc:	0000009c 	muleq	r0, ip, r0
     9e0:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
void GPIOIntHandler () {
     9e4:	86088509 	strhi	r8, [r8], -r9, lsl #10
if (buttons_int) {
     9e8:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9ec:	8a048905 	bhi	122e08 <__ccfg+0x102e60>
	buttons_disable ();
     9f0:	8e028b03 	vmlahi.f64	d8, d2, d3
     9f4:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
	i_trigger ((aword)&__button_list);
     9f8:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     9fc:	00000b42 	andeq	r0, r0, r2, asr #22
     a00:	00000014 	andeq	r0, r0, r4, lsl r0
     a04:	00000718 	andeq	r0, r0, r8, lsl r7
     a08:	00001b60 	andeq	r1, r0, r0, ror #22
     a0c:	00000040 	andeq	r0, r0, r0, asr #32
     a10:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a14:	00018e02 	andeq	r8, r1, r2, lsl #28
     a18:	00000014 	andeq	r0, r0, r4, lsl r0
     a1c:	00000718 	andeq	r0, r0, r8, lsl r7
     a20:	00001ba0 	andeq	r1, r0, r0, lsr #23
	RISE_N_SHINE;
     a24:	00000034 	andeq	r0, r0, r4, lsr r0
     a28:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a2c:	00018e02 	andeq	r8, r1, r2, lsl #28
if (pin_sensor_int) {
     a30:	00000018 	andeq	r0, r0, r8, lsl r0
     a34:	00000718 	andeq	r0, r0, r8, lsl r7
	i_trigger ((aword)(&__input_pins));
     a38:	00001bd4 	ldrdeq	r1, [r0], -r4
     a3c:	0000003c 	andeq	r0, r0, ip, lsr r0
     a40:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a44:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a48:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a4c:	00000018 	andeq	r0, r0, r8, lsl r0
     a50:	00000718 	andeq	r0, r0, r8, lsl r7
     a54:	00000000 	andeq	r0, r0, r0
     a58:	0000003c 	andeq	r0, r0, ip, lsr r0
     a5c:	83100e42 	tsthi	r0, #1056	; 0x420
     a60:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	__pinsen_disable_and_clear;
     a64:	00018e02 	andeq	r8, r1, r2, lsl #28
	RISE_N_SHINE;
     a68:	0000000c 	andeq	r0, r0, ip
     a6c:	00000718 	andeq	r0, r0, r8, lsl r7
     a70:	00001c10 	andeq	r1, r0, r0, lsl ip
}
     a74:	00000002 	andeq	r0, r0, r2
     a78:	0000000c 	andeq	r0, r0, ip
     a7c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a80:	7c020001 	stcvc	0, cr0, [r2], {1}
     a84:	000d0c0e 	andeq	r0, sp, lr, lsl #24
void system_init () {
     a88:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a8c:	00000a78 	andeq	r0, r0, r8, ror sl
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a90:	00001c12 	andeq	r1, r0, r2, lsl ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a94:	00000002 	andeq	r0, r0, r2
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	00000a78 	andeq	r0, r0, r8, ror sl
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aa0:	00001c14 	andeq	r1, r0, r4, lsl ip
     aa4:	00000002 	andeq	r0, r0, r2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     aa8:	0000000c 	andeq	r0, r0, ip
     aac:	00000a78 	andeq	r0, r0, r8, ror sl
     ab0:	00001c16 	andeq	r1, r0, r6, lsl ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ab4:	00000002 	andeq	r0, r0, r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	00000014 	andeq	r0, r0, r4, lsl r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     abc:	00000a78 	andeq	r0, r0, r8, ror sl
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ac0:	00001c18 	andeq	r1, r0, r8, lsl ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	00000044 	andeq	r0, r0, r4, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac8:	83080e41 	movwhi	r0, #36417	; 0x8e41
		pin = (port_confs [i] >> 19) & 0x1f;
     acc:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ad0:	0000000c 	andeq	r0, r0, ip
		pin = (port_confs [i] >> 19) & 0x1f;
     ad4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     ad8:	7c020001 	stcvc	0, cr0, [r2], {1}
     adc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ae0:	0000000c 	andeq	r0, r0, ip
     ae4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (port_confs [i] & 0x80)
     ae8:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aec:	00000002 	andeq	r0, r0, r2
     af0:	00000018 	andeq	r0, r0, r8, lsl r0
		if (port_confs [i] & 0x40)
     af4:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     af8:	00000000 	andeq	r0, r0, r0
     afc:	00000058 	andeq	r0, r0, r8, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b00:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b04:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b08:	00018e02 	andeq	r8, r1, r2, lsl #28
	all_leds_blink;
     b0c:	0000000c 	andeq	r0, r0, ip
     b10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b14:	7c020001 	stcvc	0, cr0, [r2], {1}
     b18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     b20:	00000b0c 	andeq	r0, r0, ip, lsl #22
     b24:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b28:	000000cc 	andeq	r0, r0, ip, asr #1
     b2c:	83100e42 	tsthi	r0, #1056	; 0x420
     b30:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b34:	02018e02 	andeq	r8, r1, #2, 28
     b38:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b3c:	000ec3c4 	andeq	ip, lr, r4, asr #7
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b40:	ce420b44 	vmlsgt.f64	d16, d2, d4
     b44:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	IntEnable (INT_AON_RTC_COMB);
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	00000024 	andeq	r0, r0, r4, lsr #32
     b50:	00000b0c 	andeq	r0, r0, ip, lsl #22
	__pi_malloc_init ();
     b54:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_AON_GPIO_EDGE);
     b58:	00000038 	andeq	r0, r0, r8, lsr r0
     b5c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b60:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b64:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b68:	4a0b4300 	bmi	2d1770 <__ccfg+0x2b17c8>
     b6c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b70:	000b4300 	andeq	r4, fp, r0, lsl #6
     b74:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b7c:	7c020001 	stcvc	0, cr0, [r2], {1}
     b80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	urates [0] = UART_RATE / 100;
     b84:	00000018 	andeq	r0, r0, r8, lsl r0
     b88:	00000b74 	andeq	r0, r0, r4, ror fp
	reinit_uart ();
     b8c:	00001c64 	andeq	r1, r0, r4, ror #24
	EXTRA_INITIALIZERS;
     b90:	00000034 	andeq	r0, r0, r4, lsr r0
     b94:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b98:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     ba0:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     ba4:	00000b74 	andeq	r0, r0, r4, ror fp
     ba8:	00001c98 	muleq	r0, r8, ip
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bac:	00000030 	andeq	r0, r0, r0, lsr r0
     bb0:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			devinit [i] . init (devinit [i] . param);
     bb4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000014 	andeq	r0, r0, r4, lsl r0
     bc0:	00000b74 	andeq	r0, r0, r4, ror fp
	IntEnable (INT_UART0_COMB);
     bc4:	00001cc8 	andeq	r1, r0, r8, asr #25
     bc8:	00000018 	andeq	r0, r0, r8, lsl r0
}
     bcc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	tci_run_auxiliary_timer ();
     bd0:	00018e02 	andeq	r8, r1, r2, lsl #28
		diag ("");
     bd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd8:	00000b74 	andeq	r0, r0, r4, ror fp
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     bdc:	00001ce0 	andeq	r1, r0, r0, ror #25
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     be0:	00000054 	andeq	r0, r0, r4, asr r0
		diag ("Leftover RAM: %d bytes",
     be4:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     be8:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bec:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     bf0:	00018e02 	andeq	r8, r1, r2, lsl #28
     bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf8:	00000b74 	andeq	r0, r0, r4, ror fp
     bfc:	00001d34 	andeq	r1, r0, r4, lsr sp
     c00:	00000040 	andeq	r0, r0, r0, asr #32
     c04:	83180e41 	tsthi	r8, #1040	; 0x410
     c08:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c0c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c10:	00018e02 	andeq	r8, r1, r2, lsl #28
     c14:	00000014 	andeq	r0, r0, r4, lsl r0
     c18:	00000b74 	andeq	r0, r0, r4, ror fp
     c1c:	00001d74 	andeq	r1, r0, r4, ror sp
     c20:	00000024 	andeq	r0, r0, r4, lsr #32
     c24:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
     c2c:	00000014 	andeq	r0, r0, r4, lsl r0
     c30:	00000b74 	andeq	r0, r0, r4, ror fp
     c34:	00001d98 	muleq	r0, r8, sp
     c38:	00000014 	andeq	r0, r0, r4, lsl r0
     c3c:	83080e41 	movwhi	r0, #36417	; 0x8e41
	__pi_systat.effpdm = ((__pi_systat.reqpdm = mode) < 2 ||
     c40:	00018e02 	andeq	r8, r1, r2, lsl #28
     c44:	0000000c 	andeq	r0, r0, ip
     c48:	00000b74 	andeq	r0, r0, r4, ror fp
     c4c:	00001dac 	andeq	r1, r0, ip, lsr #27
     c50:	00000014 	andeq	r0, r0, r4, lsl r0
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	00000b74 	andeq	r0, r0, r4, ror fp
     c5c:	00000000 	andeq	r0, r0, r0
}
     c60:	00000064 	andeq	r0, r0, r4, rrx
__attribute__ ((noreturn)) void __pi_release () {
     c64:	83180e41 	tsthi	r8, #1040	; 0x410
     c68:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c6c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c70:	00018e02 	andeq	r8, r1, r2, lsl #28
	check_stack_overflow;
     c74:	0000001c 	andeq	r0, r0, ip, lsl r0
     c78:	00000b74 	andeq	r0, r0, r4, ror fp
     c7c:	00000000 	andeq	r0, r0, r0
	update_n_wake (MAX_WORD, NO);
     c80:	00000128 	andeq	r0, r0, r8, lsr #2
     c84:	83180e41 	tsthi	r8, #1040	; 0x410
     c88:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	for_all_tasks (__pi_curr) {
     c8c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c90:	00018e02 	andeq	r8, r1, r2, lsl #28
     c94:	00000024 	andeq	r0, r0, r4, lsr #32
  __ASM volatile ("cpsid i" : : : "memory");
     c98:	00000b74 	andeq	r0, r0, r4, ror fp
	__SLEEP;
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	000000ec 	andeq	r0, r0, ip, ror #1
     ca4:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     ca8:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
	system_event_count ++;
     cac:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     cb0:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
	switch (__pi_systat.effpdm) {
     cb4:	8b038a04 	blhi	e34cc <__ccfg+0xc3524>
     cb8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cbc:	0000000c 	andeq	r0, r0, ip
     cc0:	00000b74 	andeq	r0, r0, r4, ror fp
			__WFI ();
     cc4:	00000000 	andeq	r0, r0, r0
     cc8:	00000002 	andeq	r0, r0, r2
     ccc:	0000000c 	andeq	r0, r0, ip
	check_stack_overflow;
     cd0:	00000b74 	andeq	r0, r0, r4, ror fp
     cd4:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cd8:	00000004 	andeq	r0, r0, r4
     cdc:	0000000c 	andeq	r0, r0, ip
			(__pi_curr->code) (tstate (__pi_curr));
     ce0:	00000b74 	andeq	r0, r0, r4, ror fp
			goto Redo;
     ce4:	00000000 	andeq	r0, r0, r0
	for_all_tasks (__pi_curr) {
     ce8:	00000014 	andeq	r0, r0, r4, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     cec:	00000018 	andeq	r0, r0, r8, lsl r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     cf0:	00000b74 	andeq	r0, r0, r4, ror fp
     cf4:	00000000 	andeq	r0, r0, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     cf8:	0000001a 	andeq	r0, r0, sl, lsl r0
     cfc:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d00:	4a018e02 	bmi	64510 <__ccfg+0x44568>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d04:	000ec3ce 	andeq	ip, lr, lr, asr #7
     d08:	0000000c 	andeq	r0, r0, ip
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d0c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d10:	7c020001 	stcvc	0, cr0, [r2], {1}
			__WFI ();
     d14:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d18:	0000001c 	andeq	r0, r0, ip, lsl r0
     d1c:	00000d08 	andeq	r0, r0, r8, lsl #26
}
     d20:	00001dc0 	andeq	r1, r0, r0, asr #27
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d24:	00000078 	andeq	r0, r0, r8, ror r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d28:	83180e41 	tsthi	r8, #1040	; 0x410
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d2c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d30:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d34:	00018e02 	andeq	r8, r1, r2, lsl #28
     d38:	0000000c 	andeq	r0, r0, ip
     d3c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d40:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d44:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d48:	00000030 	andeq	r0, r0, r0, lsr r0
     d4c:	00000d38 	andeq	r0, r0, r8, lsr sp
     d50:	00001e38 	andeq	r1, r0, r8, lsr lr
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d54:	00000054 	andeq	r0, r0, r4, asr r0
     d58:	810c0e41 	tsthi	ip, r1, asr #28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d5c:	83028203 	movwhi	r8, #8707	; 0x2203
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d60:	280e4101 	stmdacs	lr, {r0, r8, lr}
     d64:	06850784 	streq	r0, [r5], r4, lsl #15
     d68:	048e0586 	streq	r0, [lr], #1414	; 0x586
     d6c:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
     d70:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
			SysCtrlSetRechargeBeforePowerDown
     d74:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d78:	000ec1c2 	andeq	ip, lr, r2, asr #3
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d7c:	0000000c 	andeq	r0, r0, ip
     d80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d84:	7c020001 	stcvc	0, cr0, [r2], {1}
     d88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d8c:	00000030 	andeq	r0, r0, r0, lsr r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d90:	00000d7c 	andeq	r0, r0, ip, ror sp
     d94:	00001e8c 	andeq	r1, r0, ip, lsl #29
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d98:	00000060 	andeq	r0, r0, r0, rrx
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d9c:	810c0e41 	tsthi	ip, r1, asr #28
     da0:	83028203 	movwhi	r8, #8707	; 0x2203
     da4:	200e4101 	andcs	r4, lr, r1, lsl #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     da8:	05850684 	streq	r0, [r5, #1668]	; 0x684
			while (!(AONWUCPowerStatusGet () &
     dac:	0a64048e 	beq	1901fec <__ccfg+0x18e2044>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     db0:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     db4:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     db8:	c1c2c341 	bicgt	ip, r2, r1, asr #6
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     dbc:	0b41000e 	bleq	1040dfc <__ccfg+0x1020e54>
     dc0:	0000000c 	andeq	r0, r0, ip
     dc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     dc8:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     dcc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dd0:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dd4:	00000dc0 	andeq	r0, r0, r0, asr #27
     dd8:	00001eec 	andeq	r1, r0, ip, ror #29
			SysCtrlAdjustRechargeAfterPowerDown ();
     ddc:	00000020 	andeq	r0, r0, r0, lsr #32
			reinit_uart ();
     de0:	00000018 	andeq	r0, r0, r8, lsl r0
     de4:	00000dc0 	andeq	r0, r0, r0, asr #27
     de8:	00001f0c 	andeq	r1, r0, ip, lsl #30
}
     dec:	00000190 	muleq	r0, r0, r1
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     df0:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     df4:	86038504 	strhi	r8, [r3], -r4, lsl #10
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     df8:	00018e02 	andeq	r8, r1, r2, lsl #28
     dfc:	00000018 	andeq	r0, r0, r8, lsl r0
     e00:	00000dc0 	andeq	r0, r0, r0, asr #27
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e04:	0000209c 	muleq	r0, ip, r0
     e08:	00000048 	andeq	r0, r0, r8, asr #32
     e0c:	83100e41 	tsthi	r0, #1040	; 0x410
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e10:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e14:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e18:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e1c:	00000dc0 	andeq	r0, r0, r0, asr #27
     e20:	000020e4 	andeq	r2, r0, r4, ror #1
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e24:	00000024 	andeq	r0, r0, r4, lsr #32
     e28:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e2c:	00018e02 	andeq	r8, r1, r2, lsl #28
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e30:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e34:	00000dc0 	andeq	r0, r0, r0, asr #27
     e38:	00002108 	andeq	r2, r0, r8, lsl #2
			PRCMPowerDomainOff (
     e3c:	0000005c 	andeq	r0, r0, ip, asr r0
     e40:	83100e41 	tsthi	r0, #1040	; 0x410
	__SLEEP;
     e44:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     e48:	00018e02 	andeq	r8, r1, r2, lsl #28
  __ASM volatile ("cpsie i" : : : "memory");
     e4c:	00000018 	andeq	r0, r0, r8, lsl r0
	goto Redo;
     e50:	00000dc0 	andeq	r0, r0, r0, asr #27
     e54:	00002164 	andeq	r2, r0, r4, ror #2
     e58:	00000038 	andeq	r0, r0, r8, lsr r0
     e5c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     e60:	86038504 	strhi	r8, [r3], -r4, lsl #10
     e64:	00018e02 	andeq	r8, r1, r2, lsl #28
     e68:	00000028 	andeq	r0, r0, r8, lsr #32
     e6c:	00000dc0 	andeq	r0, r0, r0, asr #27
     e70:	0000219c 	muleq	r0, ip, r1
     e74:	00000180 	andeq	r0, r0, r0, lsl #3
     e78:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
     e7c:	86058506 	strhi	r8, [r5], -r6, lsl #10
     e80:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     e84:	02018e02 	andeq	r8, r1, #2, 28
     e88:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     e8c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e90:	00000000 	andeq	r0, r0, r0
     e94:	00000030 	andeq	r0, r0, r0, lsr r0
     e98:	00000dc0 	andeq	r0, r0, r0, asr #27
     e9c:	0000231c 	andeq	r2, r0, ip, lsl r3
     ea0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     ea4:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     ea8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     eac:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     eb0:	89038804 	stmdbhi	r3, {r2, fp, pc}
     eb4:	02018e02 	andeq	r8, r1, #2, 28
     eb8:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
	cli_tim;
     ebc:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
     ec0:	000ec3c4 	andeq	ip, lr, r4, asr #7
     ec4:	00000b46 	andeq	r0, r0, r6, asr #22
	diag ("PicOS halted");
     ec8:	00000020 	andeq	r0, r0, r0, lsr #32
	mdelay (500);
     ecc:	00000dc0 	andeq	r0, r0, r0, asr #27
     ed0:	000023ec 	andeq	r2, r0, ip, ror #7
	setpowermode (2);
     ed4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	__PCB = NULL;
     ed8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
	release;
     edc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     ee0:	02018e02 	andeq	r8, r1, #2, 28
     ee4:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
     ee8:	00000ec4 	andeq	r0, r0, r4, asr #29
int main (void) {
     eec:	00000018 	andeq	r0, r0, r8, lsl r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ef0:	00000dc0 	andeq	r0, r0, r0, asr #27
     ef4:	000025dc 	ldrdeq	r2, [r0], -ip
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef8:	00000070 	andeq	r0, r0, r0, ror r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	system_init ();
     f00:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	tcv_init ();
     f04:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f08:	00000024 	andeq	r0, r0, r4, lsr #32
     f0c:	00000dc0 	andeq	r0, r0, r0, asr #27
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f10:	0000264c 	andeq	r2, r0, ip, asr #12
     f14:	00000174 	andeq	r0, r0, r4, ror r1
     f18:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f1c:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     f20:	87078608 	strhi	r8, [r7, -r8, lsl #12]
	delay (16, 0);
     f24:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     f28:	8b038a04 	blhi	e3740 <__ccfg+0xc3798>
     f2c:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_release ();
     f30:	0000000c 	andeq	r0, r0, ip
     f34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f38:	7c020001 	stcvc	0, cr0, [r2], {1}
     f3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f40:	00000014 	andeq	r0, r0, r4, lsl r0
     f44:	00000f30 	andeq	r0, r0, r0, lsr pc
     f48:	000027c0 	andeq	r2, r0, r0, asr #15
static void killev (__pi_pcb_t *pid) {
     f4c:	00000024 	andeq	r0, r0, r4, lsr #32
	wfun = (aword)(pid->code);
     f50:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	for_all_tasks (i) {
     f54:	00018e02 	andeq	r8, r1, r2, lsl #28
		for (j = 0; j < nevents (i); j++) {
     f58:	0000000c 	andeq	r0, r0, ip
     f5c:	00000f30 	andeq	r0, r0, r0, lsr pc
     f60:	000027e4 	andeq	r2, r0, r4, ror #15
			    || i->Events [j] . Event == wfun
     f64:	00000024 	andeq	r0, r0, r4, lsr #32
		for (j = 0; j < nevents (i); j++) {
     f68:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == (aword)pid
     f6c:	00000f30 	andeq	r0, r0, r0, lsr pc
     f70:	00002808 	andeq	r2, r0, r8, lsl #16
     f74:	00000008 	andeq	r0, r0, r8
				wakeupev (i, j);
     f78:	0000000c 	andeq	r0, r0, ip
     f7c:	00000f30 	andeq	r0, r0, r0, lsr pc
	for_all_tasks (i) {
     f80:	00002810 	andeq	r2, r0, r0, lsl r8
}
     f84:	00000004 	andeq	r0, r0, r4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	0000000c 	andeq	r0, r0, ip
static void qfree (aword *ch) {
     f8c:	00000f30 	andeq	r0, r0, r0, lsr pc
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f90:	00002814 	andeq	r2, r0, r4, lsl r8
	cc = (aword*)(mpools + MA_NP);
     f94:	00000004 	andeq	r0, r0, r4
	m_setnextp (ch, chunk);
     f98:	00000018 	andeq	r0, r0, r8, lsl r0
	m_setnextp (cc, ch);
     f9c:	00000f30 	andeq	r0, r0, r0, lsr pc
}
     fa0:	00002818 	andeq	r2, r0, r8, lsl r8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     fa4:	00000048 	andeq	r0, r0, r8, asr #32
     fa8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     fac:	86038504 	strhi	r8, [r3], -r4, lsl #10
			m_setnextp (cc, m_nextp (chunk));
     fb0:	00018e02 	andeq	r8, r1, r2, lsl #28
			m_size (chunk) += m_hdrlen + m_size (ch);
     fb4:	0000000c 	andeq	r0, r0, ip
     fb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fbc:	7c020001 	stcvc	0, cr0, [r2], {1}
     fc0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fc4:	00000028 	andeq	r0, r0, r8, lsr #32
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc8:	00000fb4 			; <UNDEFINED> instruction: 0x00000fb4
     fcc:	00002860 	andeq	r2, r0, r0, ror #16
     fd0:	00000070 	andeq	r0, r0, r0, ror r0
			m_setnextp (cc, m_nextp (chunk));
     fd4:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	86048505 	strhi	r8, [r4], -r5, lsl #10
     fdc:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     fe0:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
     fe4:	c7ce4214 	bfigt	r4, r4, #4, #11
     fe8:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     fec:	000b4200 	andeq	r4, fp, r0, lsl #4
			if (m_size (chunk) >= m_size (ch))
     ff0:	0000000c 	andeq	r0, r0, ip
     ff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ff8:	7c020001 	stcvc	0, cr0, [r2], {1}
		chunk = m_nextp (chunk))
     ffc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1000:	00000028 	andeq	r0, r0, r8, lsr #32
    1004:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1008:	000028d0 	ldrdeq	r2, [r0], -r0
	diag_wait (a);
    100c:	0000011c 	andeq	r0, r0, ip, lsl r1
	diag_wchar (c, a);
    1010:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    1014:	86048505 	strhi	r8, [r4], -r5, lsl #10
}
    1018:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    101c:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
	syserror (ESTATE, "state");
    1020:	c7ce4214 	bfigt	r4, r4, #4, #11
    1024:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1028:	00000000 	andeq	r0, r0, r0
    102c:	0000000c 	andeq	r0, r0, ip
	for (i = 0; i < MAX_UTIMERS; i++)
    1030:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void utimer_add (address ut) {
    1034:	7c020001 	stcvc	0, cr0, [r2], {1}
    1038:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		if (__pi_utims [i] == NULL)
    103c:	0000000c 	andeq	r0, r0, ip
	for (i = 0; i < MAX_UTIMERS; i++)
    1040:	0000102c 	andeq	r1, r0, ip, lsr #32
    1044:	000029ec 	andeq	r2, r0, ip, ror #19
		syserror (ERESOURCE, "ut a");
    1048:	00000020 	andeq	r0, r0, r0, lsr #32
	__pi_utims [i] = ut;
    104c:	00000028 	andeq	r0, r0, r8, lsr #32
}
    1050:	0000102c 	andeq	r1, r0, ip, lsr #32
    1054:	00002a0c 	andeq	r2, r0, ip, lsl #20
    1058:	00000230 	andeq	r0, r0, r0, lsr r2
	*t = v;
    105c:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
	TCI_RUN_AUXILIARY_TIMER;
    1060:	86078508 	strhi	r8, [r7], -r8, lsl #10
void update_n_wake (word min, Boolean force) {
    1064:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
	if (TCI_UPDATE_DELAY_TICKS (force))
    1068:	8a038904 	bhi	e3480 <__ccfg+0xc34d8>
    106c:	02018e02 	andeq	r8, r1, #2, 28
    1070:	200e0a4f 	andcs	r0, lr, pc, asr #20
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1074:	00000b42 	andeq	r0, r0, r2, asr #22
    1078:	0000001c 	andeq	r0, r0, ip, lsl r0
    107c:	0000102c 	andeq	r1, r0, ip, lsr #32
    1080:	00002c3c 	andeq	r2, r0, ip, lsr ip
    1084:	00000050 	andeq	r0, r0, r0, asr r0
    1088:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
    108c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1090:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1094:	00018e02 	andeq	r8, r1, r2, lsl #28
    1098:	0000000c 	andeq	r0, r0, ip
    109c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10a0:	7c020001 	stcvc	0, cr0, [r2], {1}
    10a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		for_all_tasks (i) {
    10a8:	00000020 	andeq	r0, r0, r0, lsr #32
	__pi_mintk = znew + min;
    10ac:	00001098 	muleq	r0, r8, r0
    10b0:	00002c8c 	andeq	r2, r0, ip, lsl #25
			if (!twaiting (i))
    10b4:	00000390 	muleq	r0, r0, r3
    10b8:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
			if (twakecnd (__pi_old, znew, i->Timer)) {
    10bc:	86068507 	strhi	r8, [r6], -r7, lsl #10
    10c0:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    10c4:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
    10c8:	00000001 	andeq	r0, r0, r1
    10cc:	0000000c 	andeq	r0, r0, ip
    10d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    10d4:	7c020001 	stcvc	0, cr0, [r2], {1}
    10d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    10dc:	00000024 	andeq	r0, r0, r4, lsr #32
    10e0:	000010cc 	andeq	r1, r0, ip, asr #1
    10e4:	0000301c 	andeq	r3, r0, ip, lsl r0
    10e8:	00000028 	andeq	r0, r0, r8, lsr #32
				wakeuptm (i);
    10ec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    10f0:	86038504 	strhi	r8, [r3], -r4, lsl #10
		for_all_tasks (i) {
    10f4:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
				d = i->Timer - znew;
    10f8:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    10fc:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    1100:	0000000b 	andeq	r0, r0, fp
		if ((word)(__pi_mintk - znew) < min) 
    1104:	00000028 	andeq	r0, r0, r8, lsr #32
    1108:	000010cc 	andeq	r1, r0, ip, asr #1
    110c:	00000000 	andeq	r0, r0, r0
	__pi_old = znew;
    1110:	0000002c 	andeq	r0, r0, ip, lsr #32
}
    1114:	83180e41 	tsthi	r8, #1040	; 0x410
	TCI_RUN_DELAY_TIMER;
    1118:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
}
    111c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    1120:	50018e02 	andpl	r8, r1, r2, lsl #28
    1124:	c6c7ce0a 	strbgt	ip, [r7], sl, lsl #28
    1128:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    112c:	000b4200 	andeq	r4, fp, r0, lsl #4
void proceed (word state) {
    1130:	0000000c 	andeq	r0, r0, ip
	prcdstate (__pi_curr, state);
    1134:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1138:	7c020001 	stcvc	0, cr0, [r2], {1}
	release;
    113c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1140:	0000000c 	andeq	r0, r0, ip
void __pi_wait (aword event, word state) {
    1144:	00001130 	andeq	r1, r0, r0, lsr r1
	sint j = nevents (__pi_curr);
    1148:	00003044 	andeq	r3, r0, r4, asr #32
	if (j >= MAX_EVENTS_PER_TASK)
    114c:	00000030 	andeq	r0, r0, r0, lsr r0
    1150:	0000000c 	andeq	r0, r0, ip
    1154:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		syserror (ENEVENTS, "sw");
    1158:	7c020001 	stcvc	0, cr0, [r2], {1}
    115c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1160:	0000000c 	andeq	r0, r0, ip
	incwait (__pi_curr);
    1164:	00001150 	andeq	r1, r0, r0, asr r1
	setestate (__pi_curr->Events [j], state, event);
    1168:	00003074 	andeq	r3, r0, r4, ror r0
}
    116c:	00000020 	andeq	r0, r0, r0, lsr #32
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	00001150 	andeq	r1, r0, r0, asr r1
void __pi_trigger (aword event) {
    1178:	00003094 	muleq	r0, r4, r0
	for_all_tasks (i) {
    117c:	00000018 	andeq	r0, r0, r8, lsl r0
		for (j = 0; j < nevents (i); j++) {
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1188:	7c020001 	stcvc	0, cr0, [r2], {1}
    118c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1190:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == event) {
    1194:	00001180 	andeq	r1, r0, r0, lsl #3
    1198:	000030ac 	andeq	r3, r0, ip, lsr #1
				wakeupev (i, j);
    119c:	00000008 	andeq	r0, r0, r8
    11a0:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
    11a4:	00001180 	andeq	r1, r0, r0, lsl #3
}
    11a8:	00000000 	andeq	r0, r0, r0
aword __pi_join (aword pid, word st) {
    11ac:	00000006 	andeq	r0, r0, r6
	for_all_tasks (i) {
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	00001180 	andeq	r1, r0, r0, lsl #3
	return 0;
    11b8:	000030b4 	strheq	r3, [r0], -r4
		if ((aword)i == pid) {
    11bc:	00000008 	andeq	r0, r0, r8
			__pi_wait (pid, st);
    11c0:	0000000c 	andeq	r0, r0, ip
}
    11c4:	00001180 	andeq	r1, r0, r0, lsl #3
	for_all_tasks (i) {
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	00000006 	andeq	r0, r0, r6
void delay (word d, word state) {
    11d0:	0000000c 	andeq	r0, r0, ip
	settstate (__pi_curr, state);
    11d4:	00001180 	andeq	r1, r0, r0, lsl #3
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	00000008 	andeq	r0, r0, r8
    11e0:	0000000c 	andeq	r0, r0, ip
	update_n_wake (d, YES);
    11e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    11e8:	7c020001 	stcvc	0, cr0, [r2], {1}
	__pi_curr->Timer = __pi_old + d;
    11ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f0:	0000001c 	andeq	r0, r0, ip, lsl r0
	inctimer (__pi_curr);
    11f4:	000011e0 	andeq	r1, r0, r0, ror #3
    11f8:	000030bc 	strheq	r3, [r0], -ip
    11fc:	0000005c 	andeq	r0, r0, ip, asr r0
}
    1200:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1204:	86038504 	strhi	r8, [r3], -r4, lsl #10
	if (fun == NULL)
    1208:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		return (int) __pi_curr;
    120c:	0000100e 	andeq	r1, r0, lr
    1210:	00000014 	andeq	r0, r0, r4, lsl r0
	for_all_tasks (i)
    1214:	000011e0 	andeq	r1, r0, r0, ror #3
}
    1218:	00003118 	andeq	r3, r0, r8, lsl r1
		if (i->code == fun)
    121c:	0000002c 	andeq	r0, r0, ip, lsr #32
	for_all_tasks (i)
    1220:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1224:	00018e02 	andeq	r8, r1, r2, lsl #28
    1228:	00000018 	andeq	r0, r0, r8, lsl r0
int __pi_strlen (const char *s) {
    122c:	000011e0 	andeq	r1, r0, r0, ror #3
	for (i = 0; *(s+i) != '\0'; i++);
    1230:	00000000 	andeq	r0, r0, r0
}
    1234:	00000090 	muleq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1238:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	while (n--)
    123c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1240:	00018e02 	andeq	r8, r1, r2, lsl #28
		*dest++ = *src++;
    1244:	00000014 	andeq	r0, r0, r4, lsl r0
    1248:	000011e0 	andeq	r1, r0, r0, ror #3
    124c:	00003144 	andeq	r3, r0, r4, asr #2
	while (n--)
    1250:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1254:	83080e41 	movwhi	r0, #36417	; 0x8e41
		*dest++ = c;
    1258:	00018e02 	andeq	r8, r1, r2, lsl #28
void adddevfunc (devreqfun_t rf, int loc) {
    125c:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (EREQPAR, "addv");
    1260:	000011e0 	andeq	r1, r0, r0, ror #3
		syserror (ERESOURCE, "addv");
    1264:	0000315c 	andeq	r3, r0, ip, asr r1
	if (ioreq [loc] != NULL)
    1268:	00000060 	andeq	r0, r0, r0, rrx
    126c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		syserror (ERESOURCE, "addv");
    1270:	00018e02 	andeq	r8, r1, r2, lsl #28
	ioreq [loc] = rf;
    1274:	00000014 	andeq	r0, r0, r4, lsl r0
}
    1278:	000011e0 	andeq	r1, r0, r0, ror #3
    127c:	000031bc 			; <UNDEFINED> instruction: 0x000031bc
sint io (word retry, word dev, word operation, char *buf, word len) {
    1280:	00000034 	andeq	r0, r0, r4, lsr r0
    1284:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1288:	00018e02 	andeq	r8, r1, r2, lsl #28
    128c:	00000018 	andeq	r0, r0, r8, lsl r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1290:	000011e0 	andeq	r1, r0, r0, ror #3
    1294:	00000000 	andeq	r0, r0, r0
    1298:	00000038 	andeq	r0, r0, r8, lsr r0
		syserror (ENODEVICE, "io");
    129c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    12a0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	if (len == 0)
    12a4:	00000001 	andeq	r0, r0, r1
	ret = (ioreq [dev]) (operation, buf, len);
    12a8:	0000000c 	andeq	r0, r0, ip
    12ac:	000011e0 	andeq	r1, r0, r0, ror #3
	if (ret >= 0)
    12b0:	00000000 	andeq	r0, r0, r0
	if (ret == -1) {
    12b4:	0000000c 	andeq	r0, r0, ip
    12b8:	00000018 	andeq	r0, r0, r8, lsl r0
		if (retry == WNONE)
    12bc:	000011e0 	andeq	r1, r0, r0, ror #3
		iowait (dev, operation, retry);
    12c0:	00000000 	andeq	r0, r0, r0
    12c4:	00000034 	andeq	r0, r0, r4, lsr r0
    12c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			release;
    12cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
	if (ret == -2) {
    12d0:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (retry != WNONE) {
    12d4:	0000000c 	andeq	r0, r0, ip
    12d8:	000011e0 	andeq	r1, r0, r0, ror #3
			iowait (dev, operation, retry);
    12dc:	00000000 	andeq	r0, r0, r0
    12e0:	0000001c 	andeq	r0, r0, ip, lsl r0
			(ioreq [dev]) (NONE, buf, len);
    12e4:	0000000c 	andeq	r0, r0, ip
    12e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    12ec:	7c020001 	stcvc	0, cr0, [r2], {1}
		(ioreq [dev]) (NONE, buf, len);
    12f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12f4:	0000000c 	andeq	r0, r0, ip
    12f8:	000012e4 	andeq	r1, r0, r4, ror #5
}
    12fc:	00000000 	andeq	r0, r0, r0
	if (retry != WNONE) {
    1300:	00000014 	andeq	r0, r0, r4, lsl r0
		delay (-ret - 2, retry);
    1304:	0000000c 	andeq	r0, r0, ip
    1308:	000012e4 	andeq	r1, r0, r4, ror #5
    130c:	000031f0 	strdeq	r3, [r0], -r0
    1310:	00000028 	andeq	r0, r0, r8, lsr #32
		release;
    1314:	0000000c 	andeq	r0, r0, ip
    1318:	000012e4 	andeq	r1, r0, r4, ror #5
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    131c:	00003218 	andeq	r3, r0, r8, lsl r2
    1320:	0000004c 	andeq	r0, r0, ip, asr #32
    1324:	0000000c 	andeq	r0, r0, ip
    1328:	000012e4 	andeq	r1, r0, r4, ror #5
    132c:	00003264 	andeq	r3, r0, r4, ror #4
		syserror (ERESOURCE, "mal1");
    1330:	00000150 	andeq	r0, r0, r0, asr r1
    1334:	00000018 	andeq	r0, r0, r8, lsl r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1338:	000012e4 	andeq	r1, r0, r4, ror #5
    133c:	000033b4 			; <UNDEFINED> instruction: 0x000033b4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1340:	00000118 	andeq	r0, r0, r8, lsl r1
	m_size (mpools [0]) = mlen - m_hdrlen;
    1344:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1348:	86038504 	strhi	r8, [r3], -r4, lsl #10
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    134c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1350:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1354:	000012e4 	andeq	r1, r0, r4, ror #5
    1358:	000034cc 	andeq	r3, r0, ip, asr #9
    135c:	00000020 	andeq	r0, r0, r0, lsr #32
    1360:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1364:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1368:	00000001 	andeq	r0, r0, r1
void __pi_free (aword *ch) {
    136c:	00000014 	andeq	r0, r0, r4, lsl r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1370:	000012e4 	andeq	r1, r0, r4, ror #5
    1374:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "malg");
    1378:	00000060 	andeq	r0, r0, r0, rrx
    137c:	83080e41 	movwhi	r0, #36417	; 0x8e41
	mcfree [MA_NP] += m_size (ch);
    1380:	00018e02 	andeq	r8, r1, r2, lsl #28
		m_size (ch) ^= MALLOC_UMASK;
    1384:	0000000c 	andeq	r0, r0, ip
    1388:	000012e4 	andeq	r1, r0, r4, ror #5
	mcfree [MA_NP] += m_size (ch);
    138c:	000034ec 	andeq	r3, r0, ip, ror #9
	QFREE;
    1390:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (mevent [MA_NP] . nwait) {
    1394:	0000000c 	andeq	r0, r0, ip
    1398:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		trigger ((aword)(&(mevent [MA_NP])));
    139c:	7c020001 	stcvc	0, cr0, [r2], {1}
		mevent [MA_NP] . nwait --;
    13a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13a4:	00000018 	andeq	r0, r0, r8, lsl r0
}
    13a8:	00001394 	muleq	r0, r4, r3
    13ac:	00003508 	andeq	r3, r0, r8, lsl #10
    13b0:	000000d4 	ldrdeq	r0, [r0], -r4
void kill (aword pid) {
    13b4:	83100e41 	tsthi	r0, #1040	; 0x410
		pid = (aword) __pi_curr;
    13b8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	j = NULL;
    13bc:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (i) {
    13c0:	00000014 	andeq	r0, r0, r4, lsl r0
	syserror (EREQPAR, "kpi");
    13c4:	00001394 	muleq	r0, r4, r3
    13c8:	000035dc 	ldrdeq	r3, [r0], -ip
		if ((aword)i == pid) {
    13cc:	000000a4 	andeq	r0, r0, r4, lsr #1
    13d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				__PCB = i->Next;
    13d4:	00018e02 	andeq	r8, r1, r2, lsl #28
			killev (i);
    13d8:	0000000c 	andeq	r0, r0, ip
			ufree (i);
    13dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			if (i == __pi_curr)
    13e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13e8:	00000018 	andeq	r0, r0, r8, lsl r0
				j->Next = i->Next;
    13ec:	000013d8 	ldrdeq	r1, [r0], -r8
    13f0:	00003680 	andeq	r3, r0, r0, lsl #13
    13f4:	0000007c 	andeq	r0, r0, ip, ror r0
}
    13f8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    13fc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1400:	00000001 	andeq	r0, r0, r1
	if (size < 8)
    1404:	00000014 	andeq	r0, r0, r4, lsl r0
		_size = 2;
    1408:	000013d8 	ldrdeq	r1, [r0], -r8
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    140c:	000036fc 	strdeq	r3, [r0], -ip
		_size = (((aword)size) + 3) >> 2;
    1410:	000000ac 	andeq	r0, r0, ip, lsr #1
		if (m_magic (chunk) != MALLOC_MAGIC)
    1414:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
		_size = (((aword)size) + 3) >> 2;
    1418:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (mevent [MA_NP] . nfail != 255)
    141c:	0000000c 	andeq	r0, r0, ip
    1420:	000013d8 	ldrdeq	r1, [r0], -r8
			mevent [MA_NP] . nfail ++;
    1424:	000037a8 	andeq	r3, r0, r8, lsr #15
		mnfree [MA_NP] = 0;
    1428:	0000005c 	andeq	r0, r0, ip, asr r0
    142c:	0000000c 	andeq	r0, r0, ip
		if (m_magic (chunk) != MALLOC_MAGIC)
    1430:	000013d8 	ldrdeq	r1, [r0], -r8
    1434:	00003804 	andeq	r3, r0, r4, lsl #16
			syserror (EMALLOC, "malc");
    1438:	00000018 	andeq	r0, r0, r8, lsl r0
    143c:	0000000c 	andeq	r0, r0, ip
		if (m_size (chunk) >= _size)
    1440:	000013d8 	ldrdeq	r1, [r0], -r8
    1444:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk)) {
    1448:	00000010 	andeq	r0, r0, r0, lsl r0
		m_setnextp (cc, m_nextp (chunk));
    144c:	0000000c 	andeq	r0, r0, ip
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1450:	000013d8 	ldrdeq	r1, [r0], -r8
    1454:	0000381c 	andeq	r3, r0, ip, lsl r8
			m_size (chunk) = _size;
    1458:	00000010 	andeq	r0, r0, r0, lsl r0
			cc = chunk + _size + m_hdrlen;
    145c:	0000000c 	andeq	r0, r0, ip
    1460:	000013d8 	ldrdeq	r1, [r0], -r8
			m_size (cc) = waste - m_hdrlen;
    1464:	0000382c 	andeq	r3, r0, ip, lsr #16
			QFREE;
    1468:	00000014 	andeq	r0, r0, r4, lsl r0
		mevent [MA_NP] . nfail = 0;
    146c:	00000018 	andeq	r0, r0, r8, lsl r0
		mcfree [MA_NP] -= m_size (chunk);
    1470:	000013d8 	ldrdeq	r1, [r0], -r8
    1474:	00003840 	andeq	r3, r0, r0, asr #16
    1478:	00000064 	andeq	r0, r0, r4, rrx
    147c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		m_size (chunk) |= MALLOC_UMASK;
    1480:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1484:	00018e02 	andeq	r8, r1, r2, lsl #28
		m_size (chunk) |= MALLOC_UMASK;
    1488:	0000000c 	andeq	r0, r0, ip
			mnfree [MA_NP] = mcfree [MA_NP];
    148c:	000013d8 	ldrdeq	r1, [r0], -r8
}
    1490:	000038a4 	andeq	r3, r0, r4, lsr #17
    1494:	00000014 	andeq	r0, r0, r4, lsl r0
    1498:	0000000c 	andeq	r0, r0, ip
    149c:	000013d8 	ldrdeq	r1, [r0], -r8
    14a0:	000038b8 			; <UNDEFINED> instruction: 0x000038b8
    14a4:	00000014 	andeq	r0, r0, r4, lsl r0
    14a8:	0000000c 	andeq	r0, r0, ip
aword __pi_fork (fsmcode func, aword data) {
    14ac:	000013d8 	ldrdeq	r1, [r0], -r8
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14b0:	000038cc 	andeq	r3, r0, ip, asr #17
    14b4:	00000014 	andeq	r0, r0, r4, lsl r0
    14b8:	0000000c 	andeq	r0, r0, ip
		if ((j = __PCB) == NULL)
    14bc:	000013d8 	ldrdeq	r1, [r0], -r8
	i->Next = NULL;
    14c0:	000038e0 	andeq	r3, r0, r0, ror #17
	i->data = data;
    14c4:	00000028 	andeq	r0, r0, r8, lsr #32
		if ((j = __PCB) == NULL)
    14c8:	0000000c 	andeq	r0, r0, ip
}
    14cc:	000013d8 	ldrdeq	r1, [r0], -r8
			for (; j->Next != NULL; j = j->Next);
    14d0:	00003908 	andeq	r3, r0, r8, lsl #18
    14d4:	00000010 	andeq	r0, r0, r0, lsl r0
	return (aword) i;
    14d8:	0000000c 	andeq	r0, r0, ip
    14dc:	000013d8 	ldrdeq	r1, [r0], -r8
	if (mevent [MA_NP] . nwait != 255)
    14e0:	00003918 	andeq	r3, r0, r8, lsl r9
    14e4:	0000002c 	andeq	r0, r0, ip, lsr #32
    14e8:	0000000c 	andeq	r0, r0, ip
		mevent [MA_NP] . nwait ++;
    14ec:	000013d8 	ldrdeq	r1, [r0], -r8
	wait ((aword)(&(mevent [MA_NP])), state);
    14f0:	00003944 	andeq	r3, r0, r4, asr #18
    14f4:	00000014 	andeq	r0, r0, r4, lsl r0
void diag (const char *mess, ...) {
    14f8:	0000000c 	andeq	r0, r0, ip
    14fc:	000013d8 	ldrdeq	r1, [r0], -r8
    1500:	00003958 	andeq	r3, r0, r8, asr r9
	diag_disable_int (a, is);
    1504:	00000014 	andeq	r0, r0, r4, lsl r0
    1508:	0000001c 	andeq	r0, r0, ip, lsl r0
    150c:	000013d8 	ldrdeq	r1, [r0], -r8
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	0000396c 	andeq	r3, r0, ip, ror #18
	diag_disable_int (a, is);
    1514:	00000110 	andeq	r0, r0, r0, lsl r1
	while (*mess != '\0') {
    1518:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	dgout ('\r');
    151c:	86038504 	strhi	r8, [r3], -r4, lsl #10
	dgout ('\n');
    1520:	02018e02 	andeq	r8, r1, #2, 28
    1524:	00100e76 	andseq	r0, r0, r6, ror lr
    1528:	00000018 	andeq	r0, r0, r8, lsl r0
	diag_wait (a);
    152c:	000013d8 	ldrdeq	r1, [r0], -r8
	diag_enable_int (a, is);
    1530:	00003a7c 	andeq	r3, r0, ip, ror sl
    1534:	00000064 	andeq	r0, r0, r4, rrx
}
    1538:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    153c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1540:	00000001 	andeq	r0, r0, r1
		if (*mess == '%') {
    1544:	0000000c 	andeq	r0, r0, ip
    1548:	000013d8 	ldrdeq	r1, [r0], -r8
			if (*mess == 'l') {
    154c:	00003ae0 	andeq	r3, r0, r0, ror #21
    1550:	00000028 	andeq	r0, r0, r8, lsr #32
				mess++;
    1554:	00000014 	andeq	r0, r0, r4, lsl r0
				val = va_arg (ap, lword);
    1558:	000013d8 	ldrdeq	r1, [r0], -r8
				bc = 32;
    155c:	00003b08 	andeq	r3, r0, r8, lsl #22
				bc = 16;
    1560:	00000150 	andeq	r0, r0, r0, asr r1
			switch (*mess) {
    1564:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1568:	00018e02 	andeq	r8, r1, r2, lsl #28
    156c:	0000000c 	andeq	r0, r0, ip
				dgout ('%');
    1570:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1574:	7c020001 	stcvc	0, cr0, [r2], {1}
				dgout (*mess);
    1578:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    157c:	0000001c 	andeq	r0, r0, ip, lsl r0
			switch (*mess) {
    1580:	0000156c 	andeq	r1, r0, ip, ror #10
					v = __pi_hex_enc_table [
    1584:	00000000 	andeq	r0, r0, r0
					i += 4;
    1588:	000000f4 	strdeq	r0, [r0], -r4
					(val >> (bc - i)) & 0xf];
    158c:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    1590:	86058506 	strhi	r8, [r5], -r6, lsl #10
					dgout (v);
    1594:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1598:	00018e02 	andeq	r8, r1, r2, lsl #28
				while (i < bc) {
    159c:	00000028 	andeq	r0, r0, r8, lsr #32
			mess++;
    15a0:	0000156c 	andeq	r1, r0, ip, ror #10
					d /= 10;
    15a4:	00003c58 	andeq	r3, r0, r8, asr ip
				if ((val >> (bc - 1)) & 1) {
    15a8:	00000220 	andeq	r0, r0, r0, lsr #4
    15ac:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
					dgout ('-');
    15b0:	86088509 	strhi	r8, [r8], -r9, lsl #10
    15b4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
						val |= 0xffff0000;
    15b8:	8a048905 	bhi	1239d4 <__ccfg+0x103a2c>
    15bc:	8e028b03 	vmlahi.f64	d8, d2, d3
    15c0:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    15c4:	00000024 	andeq	r0, r0, r4, lsr #32
    15c8:	00000014 	andeq	r0, r0, r4, lsl r0
    15cc:	0000156c 	andeq	r1, r0, ip, ror #10
					v = (word) (val / d);
    15d0:	00003e78 	andeq	r3, r0, r8, ror lr
					if (v || d == 1) break;
    15d4:	00000060 	andeq	r0, r0, r0, rrx
    15d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					d /= 10;
    15dc:	00018e02 	andeq	r8, r1, r2, lsl #28
				d = (bc == 16) ? 10000 : 1000000000;
    15e0:	00000014 	andeq	r0, r0, r4, lsl r0
					dgout (v + '0');
    15e4:	0000156c 	andeq	r1, r0, ip, ror #10
    15e8:	00000000 	andeq	r0, r0, r0
    15ec:	00000078 	andeq	r0, r0, r8, ror r0
					d /= 10;
    15f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					val = val - (v * d);
    15f4:	00018e02 	andeq	r8, r1, r2, lsl #28
					if (d == 0) break;
    15f8:	0000000c 	andeq	r0, r0, ip
					v = (word) (val / d);
    15fc:	0000156c 	andeq	r1, r0, ip, ror #10
    1600:	00003ed8 	ldrdeq	r3, [r0], -r8
				if (bc == 16)
    1604:	00000018 	andeq	r0, r0, r8, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1608:	0000000c 	andeq	r0, r0, ip
					val &= 0xffff;
    160c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
					dgout (*s);
    1610:	7c020001 	stcvc	0, cr0, [r2], {1}
					s++;
    1614:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1618:	0000000c 	andeq	r0, r0, ip
				while (*s != '\0') {
    161c:	00001608 	andeq	r1, r0, r8, lsl #12
			dgout (*mess++);
    1620:	00000000 	andeq	r0, r0, r0
    1624:	00000010 	andeq	r0, r0, r0, lsl r0
    1628:	0000000c 	andeq	r0, r0, ip
    162c:	00001608 	andeq	r1, r0, r8, lsl #12
    1630:	00000000 	andeq	r0, r0, r0
	__pi_seed = __pi_seed * 1103515245 + 12345;
    1634:	00000018 	andeq	r0, r0, r8, lsl r0
    1638:	0000000c 	andeq	r0, r0, ip
    163c:	00001608 	andeq	r1, r0, r8, lsl #12
    1640:	00003ef0 	strdeq	r3, [r0], -r0
	^ entropy
    1644:	0000004c 	andeq	r0, r0, ip, asr #32
}
    1648:	00000014 	andeq	r0, r0, r4, lsl r0
    164c:	00001608 	andeq	r1, r0, r8, lsl #12
    1650:	00000000 	andeq	r0, r0, r0
    1654:	00000030 	andeq	r0, r0, r0, lsr r0
__PRIVF (PicOSNode, hblock_t*, apb) (word size) {
    1658:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	word cs = size + hblenb;
    165c:	00018e02 	andeq	r8, r1, r2, lsl #28
	if ((p = (hblock_t*)b_malloc (cs)) == NULL)
    1660:	00000018 	andeq	r0, r0, r8, lsl r0
    1664:	00001608 	andeq	r1, r0, r8, lsl #12
	p -> length = size;
    1668:	00003f3c 	andeq	r3, r0, ip, lsr pc
}
    166c:	0000006c 	andeq	r0, r0, ip, rrx
	if (p->attributes.b.queued) {
    1670:	83100e41 	tsthi	r0, #1040	; 0x410
		p->u.bqueue.next -> prev = p->u.bqueue.prev;
    1674:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1678:	00018e02 	andeq	r8, r1, r2, lsl #28
		p->u.bqueue.prev -> next = p->u.bqueue.next;
    167c:	00000014 	andeq	r0, r0, r4, lsl r0
		p->attributes.b.queued = 0;
    1680:	00001608 	andeq	r1, r0, r8, lsl #12
    1684:	00003fa8 	andeq	r3, r0, r8, lsr #31
__PRIVF (PicOSNode, void, rlp) (hblock_t *p) {
    1688:	00000016 	andeq	r0, r0, r6, lsl r0
	deq (p);	// Remove from queue
    168c:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
    1690:	00018e02 	andeq	r8, r1, r2, lsl #28
	tfree ((address)p);
    1694:	0000000c 	andeq	r0, r0, ip
__PRIVF (PicOSNode, void, enq) (qhead_t *q, hblock_t *p) {
    1698:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    169c:	7c020001 	stcvc	0, cr0, [r2], {1}
    16a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16a4:	00000024 	andeq	r0, r0, r4, lsr #32
	sysassert (p->attributes.b.queued == 0, "tcv01");
    16a8:	00001694 	muleq	r0, r4, r6
	if (q_empty (q))
    16ac:	00003fc0 	andeq	r3, r0, r0, asr #31
    16b0:	00000028 	andeq	r0, r0, r8, lsr #32
		trigger (q);
    16b4:	83100e41 	tsthi	r0, #1040	; 0x410
	if (p->attributes.b.urgent) {
    16b8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		p->u.bqueue.next = q->next;
    16bc:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
		p->u.bqueue.prev = q;
    16c0:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
		q->next->prev = (qitem_t*) p;
    16c4:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
	p->attributes.b.queued = 1;
    16c8:	0000000b 	andeq	r0, r0, fp
    16cc:	0000000c 	andeq	r0, r0, ip
}
    16d0:	00001694 	muleq	r0, r4, r6
		p->u.bqueue.prev = q->prev;
    16d4:	00003fe8 	andeq	r3, r0, r8, ror #31
		q->prev->next = (qitem_t*) p;
    16d8:	00000008 	andeq	r0, r0, r8
		q->prev = (qitem_t*) p;
    16dc:	0000000c 	andeq	r0, r0, ip
    16e0:	00001694 	muleq	r0, r4, r6
__PRIVF (PicOSNode, void, dispose) (hblock_t *p, int dv) {
    16e4:	00000000 	andeq	r0, r0, r0
	deq (p);	// Soft dequeue, timer and hook left intact
    16e8:	00000022 	andeq	r0, r0, r2, lsr #32
	switch (dv) {
    16ec:	00000018 	andeq	r0, r0, r8, lsl r0
    16f0:	00001694 	muleq	r0, r4, r6
    16f4:	00000000 	andeq	r0, r0, r0
    16f8:	0000002e 	andeq	r0, r0, lr, lsr #32
			p->attributes.b.urgent = 1;
    16fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1700:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
			verify_ses (p, "dispose ses");
    1704:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1708:	00000018 	andeq	r0, r0, r8, lsl r0
    170c:	00001694 	muleq	r0, r4, r6
    1710:	00000000 	andeq	r0, r0, r0
    1714:	00000034 	andeq	r0, r0, r4, lsr r0
			verify_phy (p, "dispose phy");
    1718:	83100e41 	tsthi	r0, #1040	; 0x410
    171c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
    1720:	00018e02 	andeq	r8, r1, r2, lsl #28
			enq (oqueues [p->attributes.b.phys], p);
    1724:	00000018 	andeq	r0, r0, r8, lsl r0
			p->attributes.b.urgent = 1;
    1728:	00001694 	muleq	r0, r4, r6
    172c:	00000000 	andeq	r0, r0, r0
			verify_phy (p, "dispose phy");
    1730:	00000040 	andeq	r0, r0, r0, asr #32
    1734:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1738:	86038504 	strhi	r8, [r3], -r4, lsl #10
    173c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1740:	0000000c 	andeq	r0, r0, ip
    1744:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			enq (oqueues [p->attributes.b.phys], p);
    1748:	7c020001 	stcvc	0, cr0, [r2], {1}
    174c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    1750:	00000020 	andeq	r0, r0, r0, lsr #32
			rlp (p);
    1754:	00001740 	andeq	r1, r0, r0, asr #14
}
    1758:	00003ff0 	strdeq	r3, [r0], -r0
    175c:	000000aa 	andeq	r0, r0, sl, lsr #1
    1760:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    1764:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1768:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    176c:	180e4201 	stmdane	lr, {r0, r9, lr}
__PUBLF (PicOSNode, void, tcv_endp) (address p) {
    1770:	00000688 	andeq	r0, r0, r8, lsl #13
	if (b->attributes.b.outgoing) {
    1774:	0000000c 	andeq	r0, r0, ip
	b = header (p);
    1778:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (b->attributes.b.outgoing) {
    177c:	7c020001 	stcvc	0, cr0, [r2], {1}
		verify_ses (b, "tcv02");
    1780:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1784:	0000000c 	andeq	r0, r0, ip
    1788:	00001774 	andeq	r1, r0, r4, ror r7
    178c:	0000409c 	muleq	r0, ip, r0
    1790:	00000014 	andeq	r0, r0, r4, lsl r0
		verify_plg (b, tcv_out, "tcv03");
    1794:	00000014 	andeq	r0, r0, r4, lsl r0
    1798:	00001774 	andeq	r1, r0, r4, ror r7
    179c:	000040b0 	strheq	r4, [r0], -r0
    17a0:	00000038 	andeq	r0, r0, r8, lsr r0
    17a4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
    17a8:	00018e02 	andeq	r8, r1, r2, lsl #28
    17ac:	0000000c 	andeq	r0, r0, ip
    17b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17b4:	7c020001 	stcvc	0, cr0, [r2], {1}
		dispose (b, plugins [b->attributes.b.plugin] ->
    17b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
    17bc:	00000018 	andeq	r0, r0, r8, lsl r0
		dispose (b, plugins [b->attributes.b.plugin] ->
    17c0:	000017ac 	andeq	r1, r0, ip, lsr #15
		rlp (b);
    17c4:	000040e8 	andeq	r4, r0, r8, ror #1
}
    17c8:	00000038 	andeq	r0, r0, r8, lsr r0
		rlp (b);
    17cc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    17d0:	42018e02 	andmi	r8, r1, #2, 28
    17d4:	0000180e 	andeq	r1, r0, lr, lsl #16
    17d8:	0000000c 	andeq	r0, r0, ip
    17dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
__PUBLF (PicOSNode, int, tcv_open) (word state, int phy, int plid, ... ) {
    17e0:	7c020001 	stcvc	0, cr0, [r2], {1}
    17e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17e8:	00000018 	andeq	r0, r0, r8, lsl r0
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17ec:	000017d8 	ldrdeq	r1, [r0], -r8
	va_start (ap, plid);
    17f0:	00004120 	andeq	r4, r0, r0, lsr #2
	if (phy < 0 || phy >= TCV_MAX_PHYS || oqueues [phy] == NULL ||
    17f4:	0000002c 	andeq	r0, r0, ip, lsr #32
    17f8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
		plid < 0 || plid >= TCV_MAX_PLUGS || plugins [plid] == NULL)
    17fc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1800:	00018e02 	andeq	r8, r1, r2, lsl #28
    1804:	0000000c 	andeq	r0, r0, ip
    1808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			syserror (ENODEVICE, "tcv04");
    180c:	7c020001 	stcvc	0, cr0, [r2], {1}
		syserror (EMALLOC, "tcv05");
    1810:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	attp.b.outgoing = 1;
    1814:	00000018 	andeq	r0, r0, r8, lsl r0
    1818:	00001804 	andeq	r1, r0, r4, lsl #16
    181c:	00000000 	andeq	r0, r0, r0
    1820:	0000001e 	andeq	r0, r0, lr, lsl r0
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1824:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		if (descriptors [fd] == NULL)
    1828:	86038504 	strhi	r8, [r3], -r4, lsl #10
    182c:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (fd = 0; fd < TCV_MAX_DESC; fd++)
    1830:	00000018 	andeq	r0, r0, r8, lsl r0
		return ERROR;
    1834:	00001804 	andeq	r1, r0, r4, lsl #16
}
    1838:	00000000 	andeq	r0, r0, r0
    183c:	00000098 	muleq	r0, r8, r0
    1840:	84100e43 	ldrhi	r0, [r0], #-3651	; 0xfffff1bd
	s->attpattern.b.session = fd;
    1844:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1848:	00018e02 	andeq	r8, r1, r2, lsl #28
	descriptors [fd] = s;
    184c:	0000000c 	andeq	r0, r0, ip
	q_init (&(s->rqueue));
    1850:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	sysassert (plugins [plid] -> tcv_ope != NULL, "tcv06");
    1854:	7c020001 	stcvc	0, cr0, [r2], {1}
    1858:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    185c:	00000020 	andeq	r0, r0, r0, lsr #32
    1860:	0000184c 	andeq	r1, r0, ip, asr #16
	if (plugins [plid] -> tcv_ope (phy, fd, ap)) {
    1864:	0000414c 	andeq	r4, r0, ip, asr #2
    1868:	00000054 	andeq	r0, r0, r4, asr r0
    186c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	descriptors [fd] = s;
    1870:	86048505 	strhi	r8, [r4], -r5, lsl #10
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
    1874:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1878:	180e5301 	stmdane	lr, {r0, r8, r9, ip, lr}
	if (s == NULL)
    187c:	00000688 	andeq	r0, r0, r8, lsl #13
		syserror (EMALLOC, "tcv05");
    1880:	0000000c 	andeq	r0, r0, ip
    1884:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1888:	7c020001 	stcvc	0, cr0, [r2], {1}
    188c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1890:	0000000c 	andeq	r0, r0, ip
    1894:	00001880 	andeq	r1, r0, r0, lsl #17
    1898:	000041a0 	andeq	r4, r0, r0, lsr #3
    189c:	00000010 	andeq	r0, r0, r0, lsl r0

Disassembly of section .stab:

00000000 <.stab>:
   0:	00000001 	andeq	r0, r0, r1
   4:	00020000 	andeq	r0, r2, r0
}
   8:	0000004e 	andeq	r0, r0, lr, asr #32
   c:	0000000a 	andeq	r0, r0, sl
  10:	0000001e 	andeq	r0, r0, lr, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00000040 	andeq	r0, r0, r0, asr #32
  1c:	00000001 	andeq	r0, r0, r1
  20:	00000000 	andeq	r0, r0, r0

Disassembly of section .stabstr:

00000000 <.stabstr>:
   0:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
   4:	2e646f74 	mcrcs	15, 3, r6, cr4, cr4, {3}
   8:	675f0063 	ldrbvs	r0, [pc, -r3, rrx]
   c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  10:	666f656d 	strbtvs	r6, [pc], -sp, ror #10
  14:	20796164 	rsbscs	r6, r9, r4, ror #2
  18:	6e207369 	cdpvs	3, 2, cr7, cr0, cr9, {3}
  1c:	6920746f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}
  20:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
  24:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
  28:	61206465 			; <UNDEFINED> instruction: 0x61206465
  2c:	7720646e 	strvc	r6, [r0, -lr, ror #8]!
  30:	206c6c69 	rsbcs	r6, ip, r9, ror #24
  34:	61776c61 	cmnvs	r7, r1, ror #24
  38:	66207379 			; <UNDEFINED> instruction: 0x66207379
  3c:	006c6961 	rsbeq	r6, ip, r1, ror #18
			i = k;
  40:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
				j->Next = k;
  44:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
  48:	6164666f 	cmnvs	r4, pc, ror #12
}
  4c:	Address 0x000000000000004c is out of bounds.

