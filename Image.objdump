
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	0000134d 	andeq	r1, r0, sp, asr #6
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001347 	andeq	r1, r0, r7, asr #6
       c:	00001349 	andeq	r1, r0, r9, asr #6
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	0000134b 	andeq	r1, r0, fp, asr #6
      14:	0000134b 	andeq	r1, r0, fp, asr #6
		when (&__input_pins, st);
      18:	0000134b 	andeq	r1, r0, fp, asr #6
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	0000134b 	andeq	r1, r0, fp, asr #6
      30:	0000134b 	andeq	r1, r0, fp, asr #6
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	0000134b 	andeq	r1, r0, fp, asr #6
      3c:	0000134b 	andeq	r1, r0, fp, asr #6
      40:	0000079d 	muleq	r0, sp, r7
      44:	0000134b 	andeq	r1, r0, fp, asr #6
      48:	0000134b 	andeq	r1, r0, fp, asr #6
}
      4c:	0000134b 	andeq	r1, r0, fp, asr #6
      50:	0000035d 	andeq	r0, r0, sp, asr r3
      54:	0000065d 	andeq	r0, r0, sp, asr r6
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	0000134b 	andeq	r1, r0, fp, asr #6
	    pbutton++) {
      5c:	0000134b 	andeq	r1, r0, fp, asr #6
      60:	0000134b 	andeq	r1, r0, fp, asr #6
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000015a9 	andeq	r1, r0, r9, lsr #11
      68:	0000134b 	andeq	r1, r0, fp, asr #6
      6c:	0000134b 	andeq	r1, r0, fp, asr #6
      70:	0000134b 	andeq	r1, r0, fp, asr #6
      74:	0000134b 	andeq	r1, r0, fp, asr #6
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	0000134b 	andeq	r1, r0, fp, asr #6
      7c:	0000134b 	andeq	r1, r0, fp, asr #6
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	0000134b 	andeq	r1, r0, fp, asr #6
      84:	0000134b 	andeq	r1, r0, fp, asr #6
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	0000134b 	andeq	r1, r0, fp, asr #6
      8c:	0000134b 	andeq	r1, r0, fp, asr #6
      90:	0000134b 	andeq	r1, r0, fp, asr #6
      94:	0000134b 	andeq	r1, r0, fp, asr #6
      98:	0000134b 	andeq	r1, r0, fp, asr #6
		goto Done;

	if (baction == NULL)
      9c:	0000134b 	andeq	r1, r0, fp, asr #6
      a0:	0000134b 	andeq	r1, r0, fp, asr #6
		goto Term;

	(*baction) (pbutton);
      a4:	0000134b 	andeq	r1, r0, fp, asr #6

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	0000134b 	andeq	r1, r0, fp, asr #6
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000134b 	andeq	r1, r0, fp, asr #6
      b0:	0000134b 	andeq	r1, r0, fp, asr #6
endthread
      b4:	0000134b 	andeq	r1, r0, fp, asr #6
      b8:	0000134b 	andeq	r1, r0, fp, asr #6
      bc:	0000134b 	andeq	r1, r0, fp, asr #6
      c0:	0000134b 	andeq	r1, r0, fp, asr #6
      c4:	0000134b 	andeq	r1, r0, fp, asr #6

000000c8 <root>:
      c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      ca:	2807      	cmp	r0, #7
    }

    return YES;
}

fsm root {
      cc:	d876      	bhi.n	1bc <_Min_Stack_Size+0xbc>
      ce:	e8df f000 	tbb	[pc, r0]
      d2:	1e1a0c04 	cdpne	12, 1, cr0, cr10, cr4, {0}
      d6:	4f4b433f 	svcmi	0x004b433f
"Selection:";

    char receiverId;

    state Initialize:
        recordCount = 0;
      da:	2200      	movs	r2, #0
      dc:	4b39      	ldr	r3, [pc, #228]	; (1c4 <_Min_Stack_Size+0xc4>)
      de:	601a      	str	r2, [r3, #0]

        nodeId = 1;
      e0:	2301      	movs	r3, #1
      e2:	4a39      	ldr	r2, [pc, #228]	; (1c8 <_Min_Stack_Size+0xc8>)
      e4:	7013      	strb	r3, [r2, #0]
        groupId = 1;
      e6:	4a39      	ldr	r2, [pc, #228]	; (1cc <_Min_Stack_Size+0xcc>)
      e8:	8013      	strh	r3, [r2, #0]

    state Menu_Header:
        receiverId = 0;
        ser_outf(Menu_Header, "\r\nGroup %d Device #%d (%d/%d records)\r\n", groupId, nodeId, recordCount, MAX_RECORDS);
      ea:	2328      	movs	r3, #40	; 0x28
      ec:	9301      	str	r3, [sp, #4]
      ee:	4b35      	ldr	r3, [pc, #212]	; (1c4 <_Min_Stack_Size+0xc4>)
      f0:	4a36      	ldr	r2, [pc, #216]	; (1cc <_Min_Stack_Size+0xcc>)
      f2:	681b      	ldr	r3, [r3, #0]
      f4:	2001      	movs	r0, #1
      f6:	9300      	str	r3, [sp, #0]
      f8:	4b33      	ldr	r3, [pc, #204]	; (1c8 <_Min_Stack_Size+0xc8>)
      fa:	f9b2 2000 	ldrsh.w	r2, [r2]
      fe:	781b      	ldrb	r3, [r3, #0]
     100:	4933      	ldr	r1, [pc, #204]	; (1d0 <_Min_Stack_Size+0xd0>)
     102:	f001 f9f7 	bl	14f4 <ser_outf>
    
    state Options:
        ser_outf(Options, menu);
     106:	2002      	movs	r0, #2
     108:	4932      	ldr	r1, [pc, #200]	; (1d4 <_Min_Stack_Size+0xd4>)
     10a:	f001 f9f3 	bl	14f4 <ser_outf>

    state Get_Choice:
        char choice;

        ser_inf(Get_Choice, "%c", &choice);
     10e:	2003      	movs	r0, #3
     110:	4931      	ldr	r1, [pc, #196]	; (1d8 <_Min_Stack_Size+0xd8>)
     112:	f10d 020f 	add.w	r2, sp, #15
     116:	f001 fa17 	bl	1548 <ser_inf>

        switch (choice)
     11a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     11e:	2b53      	cmp	r3, #83	; 0x53
     120:	d80f      	bhi.n	142 <_Min_Stack_Size+0x42>
     122:	2b42      	cmp	r3, #66	; 0x42
     124:	d911      	bls.n	14a <_Min_Stack_Size+0x4a>
     126:	3b43      	subs	r3, #67	; 0x43
     128:	2b10      	cmp	r3, #16
     12a:	d80e      	bhi.n	14a <_Min_Stack_Size+0x4a>
     12c:	e8df f003 	tbb	[pc, r3]
     130:	38443e3c 	stmdacc	r4, {r2, r3, r4, r5, r9, sl, fp, ip, sp}^
     134:	0d0d0d32 	stceq	13, cr0, [sp, #-200]	; 0xffffff38
     138:	360d0d0d 	strcc	r0, [sp], -sp, lsl #26
     13c:	400d0d0d 	andmi	r0, sp, sp, lsl #26
     140:	3b630042 	blcc	18c0250 <__ccfg+0x18a02a8>
     144:	b2da      	uxtb	r2, r3
     146:	2a10      	cmp	r2, #16
     148:	d9ee      	bls.n	128 <_Min_Stack_Size+0x28>
            diag("Reset Local Storage");
            break;

        }
        
        proceed Menu_Header;
     14a:	2001      	movs	r0, #1
     14c:	f000 fe88 	bl	e60 <proceed>
    
    state Set_Group_ID:
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	2004      	movs	r0, #4
     152:	4922      	ldr	r1, [pc, #136]	; (1dc <_Min_Stack_Size+0xdc>)
     154:	f001 f9ce 	bl	14f4 <ser_outf>
    state Get_Group_ID:
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	2005      	movs	r0, #5
     15a:	4a1c      	ldr	r2, [pc, #112]	; (1cc <_Min_Stack_Size+0xcc>)
     15c:	4920      	ldr	r1, [pc, #128]	; (1e0 <_Min_Stack_Size+0xe0>)
     15e:	f001 f9f3 	bl	1548 <ser_inf>

        proceed Menu_Header;
     162:	2001      	movs	r0, #1
     164:	f000 fe7c 	bl	e60 <proceed>
    
    state Set_Node_ID:
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	2006      	movs	r0, #6
     16a:	491e      	ldr	r1, [pc, #120]	; (1e4 <_Min_Stack_Size+0xe4>)
     16c:	f001 f9c2 	bl	14f4 <ser_outf>
    
    state Get_Node_ID:
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	4c15      	ldr	r4, [pc, #84]	; (1c8 <_Min_Stack_Size+0xc8>)
     172:	2007      	movs	r0, #7
     174:	4622      	mov	r2, r4
     176:	491a      	ldr	r1, [pc, #104]	; (1e0 <_Min_Stack_Size+0xe0>)
     178:	f001 f9e6 	bl	1548 <ser_inf>
    if (node < 1 || node > 25) {
     17c:	7823      	ldrb	r3, [r4, #0]
     17e:	3b01      	subs	r3, #1
     180:	2b18      	cmp	r3, #24
     182:	d902      	bls.n	18a <_Min_Stack_Size+0x8a>

        if (!isValidNodeId(nodeId)) {
            proceed Set_Node_ID;
     184:	2006      	movs	r0, #6
     186:	f000 fe6b 	bl	e60 <proceed>
        }

        proceed Menu_Header;
     18a:	2001      	movs	r0, #1
     18c:	f000 fe68 	bl	e60 <proceed>

     190:	b004      	add	sp, #16
     192:	bd10      	pop	{r4, pc}
            proceed Set_Group_ID;
     194:	2004      	movs	r0, #4
            proceed Set_Node_ID;
     196:	f000 fe63 	bl	e60 <proceed>
            break;
     19a:	e7d6      	b.n	14a <_Min_Stack_Size+0x4a>
            proceed Set_Node_ID;
     19c:	2006      	movs	r0, #6
     19e:	e7fa      	b.n	196 <_Min_Stack_Size+0x96>
            diag("Find neighbours");
     1a0:	4811      	ldr	r0, [pc, #68]	; (1e8 <_Min_Stack_Size+0xe8>)
            diag("Reset Local Storage");
     1a2:	f001 f831 	bl	1208 <diag>
            break;
     1a6:	e7d0      	b.n	14a <_Min_Stack_Size+0x4a>
            diag("Create Record on Neighbour");
     1a8:	4810      	ldr	r0, [pc, #64]	; (1ec <_Min_Stack_Size+0xec>)
     1aa:	e7fa      	b.n	1a2 <_Min_Stack_Size+0xa2>
            diag("Delete Record on Neighbour");
     1ac:	4810      	ldr	r0, [pc, #64]	; (1f0 <_Min_Stack_Size+0xf0>)
     1ae:	e7f8      	b.n	1a2 <_Min_Stack_Size+0xa2>
            diag("Retrieve Record on Neighbour");
     1b0:	4810      	ldr	r0, [pc, #64]	; (1f4 <_Min_Stack_Size+0xf4>)
     1b2:	e7f6      	b.n	1a2 <_Min_Stack_Size+0xa2>
            diag("Show Local Records");
     1b4:	4810      	ldr	r0, [pc, #64]	; (1f8 <_Min_Stack_Size+0xf8>)
     1b6:	e7f4      	b.n	1a2 <_Min_Stack_Size+0xa2>
            diag("Reset Local Storage");
     1b8:	4810      	ldr	r0, [pc, #64]	; (1fc <_Min_Stack_Size+0xfc>)
     1ba:	e7f2      	b.n	1a2 <_Min_Stack_Size+0xa2>
     1bc:	f000 fde2 	bl	d84 <__pi_badstate>
     1c0:	e7e6      	b.n	190 <_Min_Stack_Size+0x90>
     1c2:	bf00      	nop
     1c4:	20000554 	andcs	r0, r0, r4, asr r5
     1c8:	20000048 	andcs	r0, r0, r8, asr #32
     1cc:	20000550 	andcs	r0, r0, r0, asr r5
     1d0:	0000299c 	muleq	r0, ip, r9
     1d4:	000029c4 	andeq	r2, r0, r4, asr #19
     1d8:	00002a88 	andeq	r2, r0, r8, lsl #21
     1dc:	00002b15 	andeq	r2, r0, r5, lsl fp
     1e0:	00002b24 	andeq	r2, r0, r4, lsr #22
     1e4:	00002b27 	andeq	r2, r0, r7, lsr #22
     1e8:	00002a8b 	andeq	r2, r0, fp, lsl #21
     1ec:	00002a9b 	muleq	r0, fp, sl
     1f0:	00002ab6 			; <UNDEFINED> instruction: 0x00002ab6
     1f4:	00002ad1 	ldrdeq	r2, [r0], -r1
     1f8:	00002aee 	andeq	r2, r0, lr, ror #21
     1fc:	00002b01 	andeq	r2, r0, r1, lsl #22

00000200 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     200:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     202:	4801      	ldr	r0, [pc, #4]	; (208 <devinit_uart+0x8>)
     204:	f000 beb2 	b.w	f6c <adddevfunc>
     208:	0000054d 	andeq	r0, r0, sp, asr #10

0000020c <udelay>:
void udelay (volatile word n) {
     20c:	b082      	sub	sp, #8
     20e:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     212:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     216:	b29b      	uxth	r3, r3
     218:	b90b      	cbnz	r3, 21e <udelay+0x12>
}
     21a:	b002      	add	sp, #8
     21c:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     21e:	2304      	movs	r3, #4
	while (n--);
     220:	461a      	mov	r2, r3
     222:	3b01      	subs	r3, #1
     224:	b29b      	uxth	r3, r3
     226:	2a00      	cmp	r2, #0
     228:	d1fa      	bne.n	220 <udelay+0x14>
		n--;
     22a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     22e:	3b01      	subs	r3, #1
     230:	b29b      	uxth	r3, r3
     232:	f8ad 3006 	strh.w	r3, [sp, #6]
     236:	e7ec      	b.n	212 <udelay+0x6>

00000238 <mdelay>:
void mdelay (volatile word n) {
     238:	b507      	push	{r0, r1, r2, lr}
     23a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     23e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     242:	b29b      	uxth	r3, r3
     244:	b913      	cbnz	r3, 24c <mdelay+0x14>
}
     246:	b003      	add	sp, #12
     248:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     24c:	f240 30e7 	movw	r0, #999	; 0x3e7
     250:	f7ff ffdc 	bl	20c <udelay>
		n--;
     254:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     258:	3b01      	subs	r3, #1
     25a:	b29b      	uxth	r3, r3
     25c:	f8ad 3006 	strh.w	r3, [sp, #6]
     260:	e7ed      	b.n	23e <mdelay+0x6>
	...

00000264 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     264:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     266:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     268:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     26a:	d505      	bpl.n	278 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     26c:	4b0a      	ldr	r3, [pc, #40]	; (298 <__pi_ondomain+0x34>)
     26e:	78da      	ldrb	r2, [r3, #3]
     270:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     272:	bf84      	itt	hi
     274:	2201      	movhi	r2, #1
     276:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     278:	4d08      	ldr	r5, [pc, #32]	; (29c <__pi_ondomain+0x38>)
     27a:	4620      	mov	r0, r4
     27c:	682b      	ldr	r3, [r5, #0]
     27e:	695b      	ldr	r3, [r3, #20]
     280:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     282:	682b      	ldr	r3, [r5, #0]
     284:	4620      	mov	r0, r4
     286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     288:	4798      	blx	r3
     28a:	2801      	cmp	r0, #1
     28c:	d1f9      	bne.n	282 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     28e:	4b02      	ldr	r3, [pc, #8]	; (298 <__pi_ondomain+0x34>)
     290:	6858      	ldr	r0, [r3, #4]
     292:	4304      	orrs	r4, r0
     294:	605c      	str	r4, [r3, #4]
}
     296:	bd38      	pop	{r3, r4, r5, pc}
     298:	2000056c 	andcs	r0, r0, ip, ror #10
     29c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

000002a0 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     2a0:	460a      	mov	r2, r1
     2a2:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	4601      	mov	r1, r0
     2a6:	480f      	ldr	r0, [pc, #60]	; (2e4 <__pi_syserror+0x44>)
     2a8:	f000 ffae 	bl	1208 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2ae:	2540      	movs	r5, #64	; 0x40
     2b0:	462f      	mov	r7, r5
     2b2:	4e0d      	ldr	r6, [pc, #52]	; (2e8 <__pi_syserror+0x48>)
     2b4:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     2b6:	490d      	ldr	r1, [pc, #52]	; (2ec <__pi_syserror+0x4c>)
     2b8:	6037      	str	r7, [r6, #0]
     2ba:	6034      	str	r4, [r6, #0]
     2bc:	780b      	ldrb	r3, [r1, #0]
     2be:	780b      	ldrb	r3, [r1, #0]
     2c0:	20c8      	movs	r0, #200	; 0xc8
     2c2:	f36f 1307 	bfc	r3, #4, #4
     2c6:	700b      	strb	r3, [r1, #0]
     2c8:	f7ff ffb6 	bl	238 <mdelay>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	4b08      	ldr	r3, [pc, #32]	; (2f0 <__pi_syserror+0x50>)
     2ce:	20c8      	movs	r0, #200	; 0xc8
     2d0:	601d      	str	r5, [r3, #0]
     2d2:	601c      	str	r4, [r3, #0]
     2d4:	780b      	ldrb	r3, [r1, #0]
     2d6:	780b      	ldrb	r3, [r1, #0]
     2d8:	f36f 1307 	bfc	r3, #4, #4
     2dc:	700b      	strb	r3, [r1, #0]
     2de:	f7ff ffab 	bl	238 <mdelay>
	while (1) {
     2e2:	e7e7      	b.n	2b4 <__pi_syserror+0x14>
     2e4:	00002b3b 	andeq	r2, r0, fp, lsr fp
     2e8:	40022090 	mulmi	r2, r0, r0
     2ec:	2000056c 	andcs	r0, r0, ip, ror #10
     2f0:	400220a0 	andmi	r2, r2, r0, lsr #1

000002f4 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     2f4:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     2f6:	4b0a      	ldr	r3, [pc, #40]	; (320 <tci_run_delay_timer+0x2c>)
     2f8:	881c      	ldrh	r4, [r3, #0]
     2fa:	4b0a      	ldr	r3, [pc, #40]	; (324 <tci_run_delay_timer+0x30>)
     2fc:	8818      	ldrh	r0, [r3, #0]
     2fe:	4b0a      	ldr	r3, [pc, #40]	; (328 <tci_run_delay_timer+0x34>)
     300:	1b00      	subs	r0, r0, r4
     302:	b284      	uxth	r4, r0
     304:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     306:	f001 fd7d 	bl	1e04 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     30a:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     30c:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     30e:	4b07      	ldr	r3, [pc, #28]	; (32c <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     310:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     314:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	6018      	str	r0, [r3, #0]
	sti_tim;
     31a:	4b05      	ldr	r3, [pc, #20]	; (330 <tci_run_delay_timer+0x3c>)
     31c:	601a      	str	r2, [r3, #0]
}
     31e:	bd10      	pop	{r4, pc}
     320:	2000056a 	andcs	r0, r0, sl, ror #10
     324:	20000568 	andcs	r0, r0, r8, ror #10
     328:	20000000 	andcs	r0, r0, r0
     32c:	40092018 	andmi	r2, r9, r8, lsl r0
     330:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000334 <tci_run_auxiliary_timer>:
	cli_aux;
     334:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     336:	b510      	push	{r4, lr}
	cli_aux;
     338:	4c06      	ldr	r4, [pc, #24]	; (354 <tci_run_auxiliary_timer+0x20>)
     33a:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     33c:	f001 fd62 	bl	1e04 <NOROM_AONRTCCurrent64BitValueGet>
     340:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     342:	4b05      	ldr	r3, [pc, #20]	; (358 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     348:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     34a:	6018      	str	r0, [r3, #0]
	sti_aux;
     34c:	2301      	movs	r3, #1
     34e:	6023      	str	r3, [r4, #0]
}
     350:	bd10      	pop	{r4, pc}
     352:	bf00      	nop
     354:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     358:	40092020 	andmi	r2, r9, r0, lsr #32

0000035c <AONRTCIntHandler>:
void AONRTCIntHandler () {
     35c:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     35e:	4b3b      	ldr	r3, [pc, #236]	; (44c <AONRTCIntHandler+0xf0>)
     360:	6818      	ldr	r0, [r3, #0]
     362:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     366:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     36a:	d542      	bpl.n	3f2 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     36c:	4b38      	ldr	r3, [pc, #224]	; (450 <AONRTCIntHandler+0xf4>)
     36e:	6819      	ldr	r1, [r3, #0]
     370:	2900      	cmp	r1, #0
     372:	d053      	beq.n	41c <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     374:	880a      	ldrh	r2, [r1, #0]
     376:	2a00      	cmp	r2, #0
     378:	d04e      	beq.n	418 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     37a:	3a01      	subs	r2, #1
     37c:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     37e:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     380:	685c      	ldr	r4, [r3, #4]
     382:	b194      	cbz	r4, 3aa <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     384:	8821      	ldrh	r1, [r4, #0]
     386:	b111      	cbz	r1, 38e <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     388:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     38a:	3901      	subs	r1, #1
     38c:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     38e:	689c      	ldr	r4, [r3, #8]
     390:	b15c      	cbz	r4, 3aa <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     392:	8821      	ldrh	r1, [r4, #0]
     394:	b111      	cbz	r1, 39c <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     396:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     398:	3901      	subs	r1, #1
     39a:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     39c:	68d9      	ldr	r1, [r3, #12]
     39e:	b121      	cbz	r1, 3aa <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     3a0:	880b      	ldrh	r3, [r1, #0]
     3a2:	b113      	cbz	r3, 3aa <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     3a4:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     3a6:	3b01      	subs	r3, #1
     3a8:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     3aa:	4b2a      	ldr	r3, [pc, #168]	; (454 <AONRTCIntHandler+0xf8>)
     3ac:	7819      	ldrb	r1, [r3, #0]
     3ae:	0909      	lsrs	r1, r1, #4
     3b0:	d047      	beq.n	442 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     3b2:	7859      	ldrb	r1, [r3, #1]
     3b4:	1c4a      	adds	r2, r1, #1
     3b6:	b2d2      	uxtb	r2, r2
     3b8:	705a      	strb	r2, [r3, #1]
     3ba:	b9d1      	cbnz	r1, 3f2 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     3bc:	781a      	ldrb	r2, [r3, #0]
     3be:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     3c2:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     3c4:	d02c      	beq.n	420 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     3c6:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	bf42      	ittt	mi
     3ca:	2140      	movmi	r1, #64	; 0x40
     3cc:	4a22      	ldrmi	r2, [pc, #136]	; (458 <AONRTCIntHandler+0xfc>)
     3ce:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     3d0:	781a      	ldrb	r2, [r3, #0]
     3d2:	0692      	lsls	r2, r2, #26
     3d4:	bf42      	ittt	mi
     3d6:	2180      	movmi	r1, #128	; 0x80
     3d8:	4a1f      	ldrmi	r2, [pc, #124]	; (458 <AONRTCIntHandler+0xfc>)
     3da:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     3dc:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     3de:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     3e0:	781a      	ldrb	r2, [r3, #0]
     3e2:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     3e6:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     3e8:	781a      	ldrb	r2, [r3, #0]
     3ea:	0752      	lsls	r2, r2, #29
     3ec:	d501      	bpl.n	3f2 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     3ee:	22c8      	movs	r2, #200	; 0xc8
     3f0:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f2:	07c3      	lsls	r3, r0, #31
     3f4:	d50f      	bpl.n	416 <AONRTCIntHandler+0xba>
		cli_tim;
     3f6:	2100      	movs	r1, #0
     3f8:	4b18      	ldr	r3, [pc, #96]	; (45c <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     3fa:	4a19      	ldr	r2, [pc, #100]	; (460 <AONRTCIntHandler+0x104>)
     3fc:	4819      	ldr	r0, [pc, #100]	; (464 <AONRTCIntHandler+0x108>)
		cli_tim;
     3fe:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     400:	8803      	ldrh	r3, [r0, #0]
     402:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     404:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     406:	4423      	add	r3, r4
		RISE_N_SHINE;
     408:	4a12      	ldr	r2, [pc, #72]	; (454 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     40a:	b29b      	uxth	r3, r3
     40c:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     40e:	7813      	ldrb	r3, [r2, #0]
     410:	f043 0302 	orr.w	r3, r3, #2
     414:	7013      	strb	r3, [r2, #0]
}
     416:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     418:	2201      	movs	r2, #1
     41a:	e7b1      	b.n	380 <AONRTCIntHandler+0x24>
     41c:	2201      	movs	r2, #1
     41e:	e7c4      	b.n	3aa <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     420:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     422:	bf42      	ittt	mi
     424:	2140      	movmi	r1, #64	; 0x40
     426:	4a10      	ldrmi	r2, [pc, #64]	; (468 <AONRTCIntHandler+0x10c>)
     428:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     42a:	781a      	ldrb	r2, [r3, #0]
     42c:	0691      	lsls	r1, r2, #26
     42e:	bf42      	ittt	mi
     430:	2180      	movmi	r1, #128	; 0x80
     432:	4a0d      	ldrmi	r2, [pc, #52]	; (468 <AONRTCIntHandler+0x10c>)
     434:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     436:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     438:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     43a:	781a      	ldrb	r2, [r3, #0]
     43c:	f042 0208 	orr.w	r2, r2, #8
     440:	e7d1      	b.n	3e6 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     442:	2a00      	cmp	r2, #0
     444:	d0d5      	beq.n	3f2 <AONRTCIntHandler+0x96>
			cli_aux;
     446:	4b09      	ldr	r3, [pc, #36]	; (46c <AONRTCIntHandler+0x110>)
     448:	6019      	str	r1, [r3, #0]
     44a:	e7d2      	b.n	3f2 <AONRTCIntHandler+0x96>
     44c:	40092004 	andmi	r2, r9, r4
     450:	20000578 	andcs	r0, r0, r8, ror r5
     454:	2000056c 	andcs	r0, r0, ip, ror #10
     458:	40022090 	mulmi	r2, r0, r0
     45c:	43240280 			; <UNDEFINED> instruction: 0x43240280
     460:	20000000 	andcs	r0, r0, r0
     464:	20000574 	andcs	r0, r0, r4, ror r5
     468:	400220a0 	andmi	r2, r2, r0, lsr #1
     46c:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000470 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     472:	2600      	movs	r6, #0
     474:	4b0e      	ldr	r3, [pc, #56]	; (4b0 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     476:	4f0f      	ldr	r7, [pc, #60]	; (4b4 <tci_update_delay_ticks+0x44>)
	cli_tim;
     478:	601e      	str	r6, [r3, #0]
	if (setdel) {
     47a:	883d      	ldrh	r5, [r7, #0]
     47c:	b19d      	cbz	r5, 4a6 <tci_update_delay_ticks+0x36>
		if (force) {
     47e:	b1a0      	cbz	r0, 4aa <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	4b0d      	ldr	r3, [pc, #52]	; (4b8 <tci_update_delay_ticks+0x48>)
     482:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     484:	f001 fcbe 	bl	1e04 <NOROM_AONRTCCurrent64BitValueGet>
     488:	0d80      	lsrs	r0, r0, #22
     48a:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     48e:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     492:	b280      	uxth	r0, r0
     494:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     496:	1b2c      	subs	r4, r5, r4
	return NO;
     498:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     49a:	4b08      	ldr	r3, [pc, #32]	; (4bc <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     49c:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     49e:	881a      	ldrh	r2, [r3, #0]
     4a0:	4414      	add	r4, r2
     4a2:	b2a4      	uxth	r4, r4
     4a4:	801c      	strh	r4, [r3, #0]
}
     4a6:	4628      	mov	r0, r5
     4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     4aa:	2501      	movs	r5, #1
     4ac:	601d      	str	r5, [r3, #0]
		return YES;
     4ae:	e7fa      	b.n	4a6 <tci_update_delay_ticks+0x36>
     4b0:	43240280 			; <UNDEFINED> instruction: 0x43240280
     4b4:	20000000 	andcs	r0, r0, r0
     4b8:	40092018 	andmi	r2, r9, r8, lsl r0
     4bc:	20000574 	andcs	r0, r0, r4, ror r5

000004c0 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     4c2:	4e0f      	ldr	r6, [pc, #60]	; (500 <__pi_uart_setrate+0x40>)
     4c4:	4d0f      	ldr	r5, [pc, #60]	; (504 <__pi_uart_setrate+0x44>)
     4c6:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     4ca:	68db      	ldr	r3, [r3, #12]
     4cc:	4628      	mov	r0, r5
     4ce:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	2264      	movs	r2, #100	; 0x64
     4d2:	6833      	ldr	r3, [r6, #0]
     4d4:	4628      	mov	r0, r5
     4d6:	4362      	muls	r2, r4
     4d8:	685e      	ldr	r6, [r3, #4]
     4da:	490b      	ldr	r1, [pc, #44]	; (508 <__pi_uart_setrate+0x48>)
     4dc:	2360      	movs	r3, #96	; 0x60
     4de:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	4a0a      	ldr	r2, [pc, #40]	; (50c <__pi_uart_setrate+0x4c>)
}
     4e2:	2001      	movs	r0, #1
     4e4:	6813      	ldr	r3, [r2, #0]
     4e6:	f043 0310 	orr.w	r3, r3, #16
     4ea:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	6853      	ldr	r3, [r2, #4]
     4ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     4f8:	4b05      	ldr	r3, [pc, #20]	; (510 <__pi_uart_setrate+0x50>)
     4fa:	801c      	strh	r4, [r3, #0]
}
     4fc:	bd70      	pop	{r4, r5, r6, pc}
     4fe:	bf00      	nop
     500:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     504:	40001000 	andmi	r1, r0, r0
     508:	02dc6c00 	sbcseq	r6, ip, #0, 24
     50c:	4000102c 	andmi	r1, r0, ip, lsr #32
     510:	20000002 	andcs	r0, r0, r2

00000514 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     514:	4a08      	ldr	r2, [pc, #32]	; (538 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     516:	4909      	ldr	r1, [pc, #36]	; (53c <reinit_uart+0x28>)
     518:	6813      	ldr	r3, [r2, #0]
     51a:	f043 0310 	orr.w	r3, r3, #16
     51e:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	2212      	movs	r2, #18
     522:	4b07      	ldr	r3, [pc, #28]	; (540 <reinit_uart+0x2c>)
     524:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     526:	4a07      	ldr	r2, [pc, #28]	; (544 <reinit_uart+0x30>)
     528:	6813      	ldr	r3, [r2, #0]
     52a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     52e:	6013      	str	r3, [r2, #0]
     530:	4b05      	ldr	r3, [pc, #20]	; (548 <reinit_uart+0x34>)
     532:	8818      	ldrh	r0, [r3, #0]
     534:	f7ff bfc4 	b.w	4c0 <__pi_uart_setrate>
     538:	4000102c 	andmi	r1, r0, ip, lsr #32
     53c:	20000558 	andcs	r0, r0, r8, asr r5
     540:	40001034 	andmi	r1, r0, r4, lsr r0
     544:	40001030 	andmi	r1, r0, r0, lsr r0
     548:	20000002 	andcs	r0, r0, r2

0000054c <ioreq_uart_a>:
	switch (operation) {
     54c:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     54e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     552:	460d      	mov	r5, r1
     554:	4614      	mov	r4, r2
     556:	2803      	cmp	r0, #3
     558:	d86e      	bhi.n	638 <ioreq_uart_a+0xec>
     55a:	e8df f000 	tbb	[pc, r0]
     55e:	5a471253 	bpl	11c4eb2 <__ccfg+0x11a4f0a>
				*buf++ = uart_a_read;
     562:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     566:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     568:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     56c:	b11e      	cbz	r6, 576 <ioreq_uart_a+0x2a>
     56e:	f8d8 3000 	ldr.w	r3, [r8]
     572:	06d8      	lsls	r0, r3, #27
     574:	d5f5      	bpl.n	562 <ioreq_uart_a+0x16>
			if (len != operation) {
     576:	42a6      	cmp	r6, r4
     578:	d00a      	beq.n	590 <ioreq_uart_a+0x44>
				return operation - len;
     57a:	1ba4      	subs	r4, r4, r6
}
     57c:	4620      	mov	r0, r4
     57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     582:	4616      	mov	r6, r2
			uart_a_disable_int;
     584:	4f2e      	ldr	r7, [pc, #184]	; (640 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     586:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 654 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     58a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 658 <ioreq_uart_a+0x10c>
     58e:	e7ed      	b.n	56c <ioreq_uart_a+0x20>
			uart_a_disable_int;
     590:	683b      	ldr	r3, [r7, #0]
     592:	2015      	movs	r0, #21
     594:	695b      	ldr	r3, [r3, #20]
     596:	4798      	blx	r3
			if (uart_a_char_available) {
     598:	f8d8 3000 	ldr.w	r3, [r8]
     59c:	06d9      	lsls	r1, r3, #27
     59e:	d404      	bmi.n	5aa <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     5a0:	683b      	ldr	r3, [r7, #0]
     5a2:	2015      	movs	r0, #21
     5a4:	691b      	ldr	r3, [r3, #16]
     5a6:	4798      	blx	r3
				goto Redo_rx;
     5a8:	e7e0      	b.n	56c <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5aa:	4a26      	ldr	r2, [pc, #152]	; (644 <ioreq_uart_a+0xf8>)
     5ac:	7993      	ldrb	r3, [r2, #6]
     5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     5b2:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5b6:	7193      	strb	r3, [r2, #6]
			return -2;
     5b8:	e7e0      	b.n	57c <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     5ba:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     5be:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     5c0:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     5c4:	b11e      	cbz	r6, 5ce <ioreq_uart_a+0x82>
     5c6:	f8d8 3000 	ldr.w	r3, [r8]
     5ca:	069a      	lsls	r2, r3, #26
     5cc:	d5f5      	bpl.n	5ba <ioreq_uart_a+0x6e>
			if (len != operation) {
     5ce:	42a6      	cmp	r6, r4
     5d0:	d1d3      	bne.n	57a <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     5d2:	683b      	ldr	r3, [r7, #0]
     5d4:	2015      	movs	r0, #21
     5d6:	695b      	ldr	r3, [r3, #20]
     5d8:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     5da:	f8d8 3000 	ldr.w	r3, [r8]
     5de:	069b      	lsls	r3, r3, #26
     5e0:	d40b      	bmi.n	5fa <ioreq_uart_a+0xae>
				uart_a_enable_int;
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	2015      	movs	r0, #21
     5e6:	691b      	ldr	r3, [r3, #16]
     5e8:	4798      	blx	r3
				goto Redo_tx;
     5ea:	e7eb      	b.n	5c4 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     5ec:	4616      	mov	r6, r2
			uart_a_disable_int;
     5ee:	4f14      	ldr	r7, [pc, #80]	; (640 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     5f0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 654 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     5f4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 658 <ioreq_uart_a+0x10c>
     5f8:	e7e4      	b.n	5c4 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5fa:	4a12      	ldr	r2, [pc, #72]	; (644 <ioreq_uart_a+0xf8>)
     5fc:	7993      	ldrb	r3, [r2, #6]
     5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     602:	e7d6      	b.n	5b2 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     604:	4b0e      	ldr	r3, [pc, #56]	; (640 <ioreq_uart_a+0xf4>)
     606:	2015      	movs	r0, #21
     608:	681b      	ldr	r3, [r3, #0]
			return 0;
     60a:	2400      	movs	r4, #0
			uart_a_enable_int;
     60c:	691b      	ldr	r3, [r3, #16]
     60e:	4798      	blx	r3
			return 0;
     610:	e7b4      	b.n	57c <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     612:	2a01      	cmp	r2, #1
     614:	d109      	bne.n	62a <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     616:	490b      	ldr	r1, [pc, #44]	; (644 <ioreq_uart_a+0xf8>)
     618:	8828      	ldrh	r0, [r5, #0]
     61a:	f7ff ff51 	bl	4c0 <__pi_uart_setrate>
     61e:	2800      	cmp	r0, #0
     620:	d1ac      	bne.n	57c <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     622:	2003      	movs	r0, #3
     624:	4908      	ldr	r1, [pc, #32]	; (648 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     626:	f7ff fe3b 	bl	2a0 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     62a:	2a02      	cmp	r2, #2
     62c:	d104      	bne.n	638 <ioreq_uart_a+0xec>
	return urates [0];
     62e:	4b07      	ldr	r3, [pc, #28]	; (64c <ioreq_uart_a+0x100>)
				return 1;
     630:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     632:	881b      	ldrh	r3, [r3, #0]
     634:	800b      	strh	r3, [r1, #0]
				return 1;
     636:	e7a1      	b.n	57c <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     638:	2002      	movs	r0, #2
     63a:	4905      	ldr	r1, [pc, #20]	; (650 <ioreq_uart_a+0x104>)
     63c:	e7f3      	b.n	626 <ioreq_uart_a+0xda>
     63e:	bf00      	nop
     640:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     644:	20000558 	andcs	r0, r0, r8, asr r5
     648:	00002b4a 	andeq	r2, r0, sl, asr #22
     64c:	20000002 	andcs	r0, r0, r2
     650:	00002b4e 	andeq	r2, r0, lr, asr #22
     654:	40001018 	andmi	r1, r0, r8, lsl r0
     658:	40001000 	andmi	r1, r0, r0

0000065c <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     65c:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     660:	b530      	push	{r4, r5, lr}
     662:	4b29      	ldr	r3, [pc, #164]	; (708 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	4c29      	ldr	r4, [pc, #164]	; (70c <UART0IntHandler+0xb0>)
     666:	601a      	str	r2, [r3, #0]
     668:	6822      	ldr	r2, [r4, #0]
     66a:	06d5      	lsls	r5, r2, #27
     66c:	d423      	bmi.n	6b6 <UART0IntHandler+0x5a>
     66e:	4b28      	ldr	r3, [pc, #160]	; (710 <UART0IntHandler+0xb4>)
     670:	799a      	ldrb	r2, [r3, #6]
     672:	0610      	lsls	r0, r2, #24
     674:	d51f      	bpl.n	6b6 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     676:	799a      	ldrb	r2, [r3, #6]
     678:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     67c:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     67e:	4a25      	ldr	r2, [pc, #148]	; (714 <UART0IntHandler+0xb8>)
     680:	7813      	ldrb	r3, [r2, #0]
     682:	f043 0302 	orr.w	r3, r3, #2
     686:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     688:	4b23      	ldr	r3, [pc, #140]	; (718 <UART0IntHandler+0xbc>)
     68a:	681a      	ldr	r2, [r3, #0]
     68c:	b19a      	cbz	r2, 6b6 <UART0IntHandler+0x5a>
     68e:	4610      	mov	r0, r2
     690:	2300      	movs	r3, #0
     692:	f830 1b10 	ldrh.w	r1, [r0], #16
     696:	f001 0107 	and.w	r1, r1, #7
     69a:	4299      	cmp	r1, r3
     69c:	dd09      	ble.n	6b2 <UART0IntHandler+0x56>
     69e:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     6a2:	3301      	adds	r3, #1
     6a4:	f515 7f81 	cmn.w	r5, #258	; 0x102
     6a8:	d1f7      	bne.n	69a <UART0IntHandler+0x3e>
     6aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     6ae:	889b      	ldrh	r3, [r3, #4]
     6b0:	8013      	strh	r3, [r2, #0]
     6b2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     6b4:	e7ea      	b.n	68c <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b6:	6823      	ldr	r3, [r4, #0]
     6b8:	0699      	lsls	r1, r3, #26
     6ba:	d424      	bmi.n	706 <UART0IntHandler+0xaa>
     6bc:	4b14      	ldr	r3, [pc, #80]	; (710 <UART0IntHandler+0xb4>)
     6be:	799a      	ldrb	r2, [r3, #6]
     6c0:	0652      	lsls	r2, r2, #25
     6c2:	d520      	bpl.n	706 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     6c4:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	799a      	ldrb	r2, [r3, #6]
     6ca:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     6ce:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     6d0:	4a10      	ldr	r2, [pc, #64]	; (714 <UART0IntHandler+0xb8>)
     6d2:	7813      	ldrb	r3, [r2, #0]
     6d4:	f043 0302 	orr.w	r3, r3, #2
     6d8:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     6da:	4b0f      	ldr	r3, [pc, #60]	; (718 <UART0IntHandler+0xbc>)
     6dc:	681a      	ldr	r2, [r3, #0]
     6de:	b192      	cbz	r2, 706 <UART0IntHandler+0xaa>
     6e0:	4610      	mov	r0, r2
     6e2:	2300      	movs	r3, #0
     6e4:	f830 1b10 	ldrh.w	r1, [r0], #16
     6e8:	f001 0107 	and.w	r1, r1, #7
     6ec:	4299      	cmp	r1, r3
     6ee:	dd08      	ble.n	702 <UART0IntHandler+0xa6>
     6f0:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     6f4:	3301      	adds	r3, #1
     6f6:	42a5      	cmp	r5, r4
     6f8:	d1f8      	bne.n	6ec <UART0IntHandler+0x90>
     6fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     6fe:	889b      	ldrh	r3, [r3, #4]
     700:	8013      	strh	r3, [r2, #0]
     702:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     704:	e7eb      	b.n	6de <UART0IntHandler+0x82>
	}

	RTNI;
}
     706:	bd30      	pop	{r4, r5, pc}
     708:	40001044 	andmi	r1, r0, r4, asr #32
     70c:	40001018 	andmi	r1, r0, r8, lsl r0
     710:	20000558 	andcs	r0, r0, r8, asr r5
     714:	2000056c 	andcs	r0, r0, ip, ror #10
     718:	20000004 	andcs	r0, r0, r4

0000071c <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     71c:	b570      	push	{r4, r5, r6, lr}
     71e:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     722:	4e0c      	ldr	r6, [pc, #48]	; (754 <__buttons_setirq+0x38>)
     724:	4d0c      	ldr	r5, [pc, #48]	; (758 <__buttons_setirq+0x3c>)
     726:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	4c0c      	ldr	r4, [pc, #48]	; (75c <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     72a:	0a1b      	lsrs	r3, r3, #8
     72c:	fa01 f203 	lsl.w	r2, r1, r3
     730:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     732:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     734:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     736:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     73a:	0a1b      	lsrs	r3, r3, #8
     73c:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     73e:	01db      	lsls	r3, r3, #7
     740:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     744:	4322      	orrs	r2, r4
     746:	4323      	orrs	r3, r4
     748:	6010      	str	r0, [r2, #0]
     74a:	6029      	str	r1, [r5, #0]
     74c:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     74e:	b662      	cpsie	i
			val;
	}
	sti;
}
     750:	bd70      	pop	{r4, r5, r6, pc}
     752:	bf00      	nop
     754:	00002c34 	andeq	r2, r0, r4, lsr ip
     758:	400220e0 	andmi	r2, r2, r0, ror #1
     75c:	42000048 	andmi	r0, r0, #72	; 0x48

00000760 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     760:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     762:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     764:	2200      	movs	r2, #0
     766:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     768:	4f09      	ldr	r7, [pc, #36]	; (790 <__pinlist_setirq+0x30>)
     76a:	4c0a      	ldr	r4, [pc, #40]	; (794 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     76c:	490a      	ldr	r1, [pc, #40]	; (798 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     76e:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     770:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     776:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77a:	01db      	lsls	r3, r3, #7
     77c:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     780:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     782:	2a04      	cmp	r2, #4
     784:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     786:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     788:	d1f1      	bne.n	76e <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     78a:	b662      	cpsie	i
			val;
	}
	sti;
}
     78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     78e:	bf00      	nop
     790:	00002c30 	andeq	r2, r0, r0, lsr ip
     794:	400220e0 	andmi	r2, r2, r0, ror #1
     798:	42000048 	andmi	r0, r0, #72	; 0x48

0000079c <GPIOIntHandler>:
void GPIOIntHandler () {
     79c:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     79e:	4c23      	ldr	r4, [pc, #140]	; (82c <GPIOIntHandler+0x90>)
     7a0:	6822      	ldr	r2, [r4, #0]
     7a2:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     7a6:	d01e      	beq.n	7e6 <GPIOIntHandler+0x4a>
	buttons_disable ();
     7a8:	2000      	movs	r0, #0
     7aa:	f7ff ffb7 	bl	71c <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     7ae:	4b20      	ldr	r3, [pc, #128]	; (830 <GPIOIntHandler+0x94>)
     7b0:	4d20      	ldr	r5, [pc, #128]	; (834 <GPIOIntHandler+0x98>)
     7b2:	681a      	ldr	r2, [r3, #0]
     7b4:	b192      	cbz	r2, 7dc <GPIOIntHandler+0x40>
     7b6:	4610      	mov	r0, r2
     7b8:	2300      	movs	r3, #0
     7ba:	f830 1b10 	ldrh.w	r1, [r0], #16
     7be:	f001 0107 	and.w	r1, r1, #7
     7c2:	4299      	cmp	r1, r3
     7c4:	dd08      	ble.n	7d8 <GPIOIntHandler+0x3c>
     7c6:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     7ca:	3301      	adds	r3, #1
     7cc:	42ae      	cmp	r6, r5
     7ce:	d1f8      	bne.n	7c2 <GPIOIntHandler+0x26>
     7d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     7d4:	889b      	ldrh	r3, [r3, #4]
     7d6:	8013      	strh	r3, [r2, #0]
     7d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     7da:	e7eb      	b.n	7b4 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     7dc:	4a16      	ldr	r2, [pc, #88]	; (838 <GPIOIntHandler+0x9c>)
     7de:	7813      	ldrb	r3, [r2, #0]
     7e0:	f043 0302 	orr.w	r3, r3, #2
     7e4:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     7e6:	6823      	ldr	r3, [r4, #0]
     7e8:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     7ec:	d01d      	beq.n	82a <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     7ee:	4b10      	ldr	r3, [pc, #64]	; (830 <GPIOIntHandler+0x94>)
     7f0:	4c12      	ldr	r4, [pc, #72]	; (83c <GPIOIntHandler+0xa0>)
     7f2:	6818      	ldr	r0, [r3, #0]
     7f4:	b190      	cbz	r0, 81c <GPIOIntHandler+0x80>
     7f6:	4601      	mov	r1, r0
     7f8:	2300      	movs	r3, #0
     7fa:	f831 2b10 	ldrh.w	r2, [r1], #16
     7fe:	f002 0207 	and.w	r2, r2, #7
     802:	429a      	cmp	r2, r3
     804:	dd08      	ble.n	818 <GPIOIntHandler+0x7c>
     806:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     80a:	3301      	adds	r3, #1
     80c:	42a5      	cmp	r5, r4
     80e:	d1f8      	bne.n	802 <GPIOIntHandler+0x66>
     810:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     814:	889b      	ldrh	r3, [r3, #4]
     816:	8003      	strh	r3, [r0, #0]
     818:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     81a:	e7eb      	b.n	7f4 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     81c:	f7ff ffa0 	bl	760 <__pinlist_setirq>
	RISE_N_SHINE;
     820:	4a05      	ldr	r2, [pc, #20]	; (838 <GPIOIntHandler+0x9c>)
     822:	7813      	ldrb	r3, [r2, #0]
     824:	f043 0302 	orr.w	r3, r3, #2
     828:	7013      	strb	r3, [r2, #0]
}
     82a:	bd70      	pop	{r4, r5, r6, pc}
     82c:	400220e0 	andmi	r2, r2, r0, ror #1
     830:	20000004 	andcs	r0, r0, r4
     834:	00002c34 	andeq	r2, r0, r4, lsr ip
     838:	2000056c 	andcs	r0, r0, ip, ror #10
     83c:	00002c30 	andeq	r2, r0, r0, lsr ip

00000840 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	4c58      	ldr	r4, [pc, #352]	; (9a8 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     846:	2004      	movs	r0, #4
     848:	f7ff fd0c 	bl	264 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	6823      	ldr	r3, [r4, #0]
     84e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     852:	69db      	ldr	r3, [r3, #28]
     854:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     856:	6823      	ldr	r3, [r4, #0]
     858:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     85e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	6823      	ldr	r3, [r4, #0]
     862:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     868:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     86a:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	2600      	movs	r6, #0
     86e:	4c4f      	ldr	r4, [pc, #316]	; (9ac <system_init+0x16c>)
     870:	4f4f      	ldr	r7, [pc, #316]	; (9b0 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     872:	f8df c17c 	ldr.w	ip, [pc, #380]	; 9f0 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     876:	f8df e17c 	ldr.w	lr, [pc, #380]	; 9f4 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 9bc <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     87e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 9b4 <system_init+0x174>
     882:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     88a:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     88e:	0091      	lsls	r1, r2, #2
     890:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     894:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     898:	ea05 0a0c 	and.w	sl, r5, ip
     89c:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     8a0:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a2:	bf44      	itt	mi
     8a4:	ea41 010e 	orrmi.w	r1, r1, lr
     8a8:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     8aa:	fa03 f202 	lsl.w	r2, r3, r2
     8ae:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	bf4c      	ite	mi
     8b2:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b6:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8ba:	2e11      	cmp	r6, #17
     8bc:	d1e2      	bne.n	884 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8be:	2540      	movs	r5, #64	; 0x40
     8c0:	2680      	movs	r6, #128	; 0x80
     8c2:	4b3c      	ldr	r3, [pc, #240]	; (9b4 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     8c4:	493c      	ldr	r1, [pc, #240]	; (9b8 <system_init+0x178>)
     8c6:	601d      	str	r5, [r3, #0]
     8c8:	601e      	str	r6, [r3, #0]
     8ca:	780b      	ldrb	r3, [r1, #0]
     8cc:	780b      	ldrb	r3, [r1, #0]
     8ce:	20c8      	movs	r0, #200	; 0xc8
     8d0:	f36f 1307 	bfc	r3, #4, #4
     8d4:	700b      	strb	r3, [r1, #0]
     8d6:	f7ff fcaf 	bl	238 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8da:	4b38      	ldr	r3, [pc, #224]	; (9bc <system_init+0x17c>)
     8dc:	20c8      	movs	r0, #200	; 0xc8
     8de:	601d      	str	r5, [r3, #0]
     8e0:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8e2:	2601      	movs	r6, #1
	all_leds_blink;
     8e4:	780b      	ldrb	r3, [r1, #0]
     8e6:	780b      	ldrb	r3, [r1, #0]
     8e8:	f36f 1307 	bfc	r3, #4, #4
     8ec:	700b      	strb	r3, [r1, #0]
     8ee:	f7ff fca3 	bl	238 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     8f2:	4b33      	ldr	r3, [pc, #204]	; (9c0 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	4a33      	ldr	r2, [pc, #204]	; (9c4 <system_init+0x184>)
     8f6:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8f8:	4b33      	ldr	r3, [pc, #204]	; (9c8 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     8fa:	4d34      	ldr	r5, [pc, #208]	; (9cc <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8fc:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8fe:	4b34      	ldr	r3, [pc, #208]	; (9d0 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     900:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     902:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     904:	682b      	ldr	r3, [r5, #0]
     906:	691b      	ldr	r3, [r3, #16]
     908:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     90a:	f000 fb8f 	bl	102c <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     90e:	682b      	ldr	r3, [r5, #0]
     910:	2010      	movs	r0, #16
     912:	691b      	ldr	r3, [r3, #16]
     914:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     916:	2002      	movs	r0, #2
     918:	f7ff fca4 	bl	264 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     91c:	68ab      	ldr	r3, [r5, #8]
     91e:	f44f 7000 	mov.w	r0, #512	; 0x200
     922:	69db      	ldr	r3, [r3, #28]
     924:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     926:	68ab      	ldr	r3, [r5, #8]
     928:	f44f 7000 	mov.w	r0, #512	; 0x200
     92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     92e:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     930:	68ab      	ldr	r3, [r5, #8]
     932:	f44f 7000 	mov.w	r0, #512	; 0x200
     936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     938:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     93a:	2260      	movs	r2, #96	; 0x60
     93c:	4b25      	ldr	r3, [pc, #148]	; (9d4 <system_init+0x194>)
     93e:	6026      	str	r6, [r4, #0]
     940:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     942:	f7ff fde7 	bl	514 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     946:	f000 fdc1 	bl	14cc <ee_open>
     94a:	f000 fdc9 	bl	14e0 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     94e:	f001 ff99 	bl	2884 <NOROM_SysCtrlResetSourceGet>
     952:	2808      	cmp	r0, #8
     954:	d11a      	bne.n	98c <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     956:	4b20      	ldr	r3, [pc, #128]	; (9d8 <system_init+0x198>)
     958:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     95a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     95e:	3b04      	subs	r3, #4
     960:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     962:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     966:	3324      	adds	r3, #36	; 0x24
     968:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     96a:	2000      	movs	r0, #0
     96c:	f7ff fc48 	bl	200 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     970:	4a1a      	ldr	r2, [pc, #104]	; (9dc <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     972:	2015      	movs	r0, #21
     974:	6813      	ldr	r3, [r2, #0]
     976:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     97a:	6013      	str	r3, [r2, #0]
     97c:	4b13      	ldr	r3, [pc, #76]	; (9cc <system_init+0x18c>)
     97e:	681b      	ldr	r3, [r3, #0]
     980:	691b      	ldr	r3, [r3, #16]
     982:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     984:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     988:	f7ff bcd4 	b.w	334 <tci_run_auxiliary_timer>
		diag ("");
     98c:	4814      	ldr	r0, [pc, #80]	; (9e0 <system_init+0x1a0>)
     98e:	f000 fc3b 	bl	1208 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     992:	4814      	ldr	r0, [pc, #80]	; (9e4 <system_init+0x1a4>)
     994:	f000 fc38 	bl	1208 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     998:	4913      	ldr	r1, [pc, #76]	; (9e8 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     99a:	4814      	ldr	r0, [pc, #80]	; (9ec <system_init+0x1ac>)
     99c:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     9a0:	b289      	uxth	r1, r1
     9a2:	f000 fc31 	bl	1208 <diag>
     9a6:	e7e0      	b.n	96a <system_init+0x12a>
     9a8:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     9ac:	60082028 	andvs	r2, r8, r8, lsr #32
     9b0:	00002bb8 			; <UNDEFINED> instruction: 0x00002bb8
     9b4:	40022090 	mulmi	r2, r0, r0
     9b8:	2000056c 	andcs	r0, r0, ip, ror #10
     9bc:	400220a0 	andmi	r2, r2, r0, lsr #1
     9c0:	40092024 	andmi	r2, r9, r4, lsr #32
     9c4:	00050003 	andeq	r0, r5, r3
     9c8:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     9cc:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     9d0:	40092000 	andmi	r2, r9, r0
     9d4:	20000002 	andcs	r0, r0, r2
     9d8:	4009400c 	andmi	r4, r9, ip
     9dc:	40001038 	andmi	r1, r0, r8, lsr r0
     9e0:	000029c3 	andeq	r2, r0, r3, asr #19
     9e4:	00002b52 	andeq	r2, r0, r2, asr fp
     9e8:	2000058c 	andcs	r0, r0, ip, lsl #11
     9ec:	00002b9e 	muleq	r0, lr, fp
     9f0:	7f077f3f 	svcvc	0x00077f3f
     9f4:	42441a00 	submi	r1, r4, #0, 20

000009f8 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     9f8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     9fc:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     9fe:	4b79      	ldr	r3, [pc, #484]	; (be4 <__pi_release+0x1ec>)
     a00:	af00      	add	r7, sp, #0
     a02:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     a06:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     a0a:	681a      	ldr	r2, [r3, #0]
     a0c:	4b76      	ldr	r3, [pc, #472]	; (be8 <__pi_release+0x1f0>)
     a0e:	429a      	cmp	r2, r3
     a10:	d127      	bne.n	a62 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     a12:	4e76      	ldr	r6, [pc, #472]	; (bec <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     a14:	2100      	movs	r1, #0
     a16:	f64f 70ff 	movw	r0, #65535	; 0xffff
     a1a:	f000 f9bb 	bl	d94 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     a1e:	4a74      	ldr	r2, [pc, #464]	; (bf0 <__pi_release+0x1f8>)
     a20:	4b74      	ldr	r3, [pc, #464]	; (bf4 <__pi_release+0x1fc>)
     a22:	6812      	ldr	r2, [r2, #0]
     a24:	601a      	str	r2, [r3, #0]
     a26:	681a      	ldr	r2, [r3, #0]
     a28:	b9fa      	cbnz	r2, a6a <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     a2a:	4c73      	ldr	r4, [pc, #460]	; (bf8 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     a2e:	4d73      	ldr	r5, [pc, #460]	; (bfc <__pi_release+0x204>)
     a30:	782b      	ldrb	r3, [r5, #0]
     a32:	f3c3 0240 	ubfx	r2, r3, #1, #1
     a36:	0798      	lsls	r0, r3, #30
     a38:	607a      	str	r2, [r7, #4]
     a3a:	f100 80cd 	bmi.w	bd8 <__pi_release+0x1e0>
	system_event_count ++;
     a3e:	4a70      	ldr	r2, [pc, #448]	; (c00 <__pi_release+0x208>)
     a40:	6813      	ldr	r3, [r2, #0]
     a42:	3301      	adds	r3, #1
     a44:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     a46:	78ea      	ldrb	r2, [r5, #3]
     a48:	2a01      	cmp	r2, #1
     a4a:	b2d3      	uxtb	r3, r2
     a4c:	d017      	beq.n	a7e <__pi_release+0x86>
     a4e:	2b02      	cmp	r3, #2
     a50:	d031      	beq.n	ab6 <__pi_release+0xbe>
     a52:	2b00      	cmp	r3, #0
     a54:	f040 8095 	bne.w	b82 <__pi_release+0x18a>
			__WFI ();
     a58:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     a5a:	b662      	cpsie	i
     a5c:	bf00      	nop
     a5e:	bf00      	nop
     a60:	e7e4      	b.n	a2c <__pi_release+0x34>
	check_stack_overflow;
     a62:	200b      	movs	r0, #11
     a64:	4967      	ldr	r1, [pc, #412]	; (c04 <__pi_release+0x20c>)
     a66:	f7ff fc1b 	bl	2a0 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     a6a:	6851      	ldr	r1, [r2, #4]
     a6c:	b129      	cbz	r1, a7a <__pi_release+0x82>
     a6e:	8810      	ldrh	r0, [r2, #0]
     a70:	0704      	lsls	r4, r0, #28
     a72:	d102      	bne.n	a7a <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     a74:	0900      	lsrs	r0, r0, #4
     a76:	4788      	blx	r1
			goto Redo;
     a78:	e7cc      	b.n	a14 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     a7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a7c:	e7d2      	b.n	a24 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a7e:	4a62      	ldr	r2, [pc, #392]	; (c08 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a82:	6813      	ldr	r3, [r2, #0]
     a84:	f043 0301 	orr.w	r3, r3, #1
     a88:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     a8a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     a8e:	f043 0303 	orr.w	r3, r3, #3
     a92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a96:	4b5d      	ldr	r3, [pc, #372]	; (c0c <__pi_release+0x214>)
     a98:	681b      	ldr	r3, [r3, #0]
     a9a:	699b      	ldr	r3, [r3, #24]
     a9c:	4798      	blx	r3
     a9e:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     aa0:	6823      	ldr	r3, [r4, #0]
     aa2:	f043 0304 	orr.w	r3, r3, #4
     aa6:	6023      	str	r3, [r4, #0]
			__WFI ();
     aa8:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     aaa:	6823      	ldr	r3, [r4, #0]
     aac:	f023 0304 	bic.w	r3, r3, #4
     ab0:	6023      	str	r3, [r4, #0]
     ab2:	6833      	ldr	r3, [r6, #0]
}
     ab4:	e7d1      	b.n	a5a <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab6:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     aba:	687a      	ldr	r2, [r7, #4]
     abc:	4b54      	ldr	r3, [pc, #336]	; (c10 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     abe:	f8df b188 	ldr.w	fp, [pc, #392]	; c48 <__pi_release+0x250>
     ac2:	601a      	str	r2, [r3, #0]
     ac4:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac6:	f8df a144 	ldr.w	sl, [pc, #324]	; c0c <__pi_release+0x214>
     aca:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ace:	6833      	ldr	r3, [r6, #0]
     ad0:	4b50      	ldr	r3, [pc, #320]	; (c14 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ad2:	f8df 9178 	ldr.w	r9, [pc, #376]	; c4c <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad6:	f8c3 8000 	str.w	r8, [r3]
     ada:	6868      	ldr	r0, [r5, #4]
     adc:	f8da 3000 	ldr.w	r3, [sl]
     ae0:	f040 0020 	orr.w	r0, r0, #32
     ae4:	699b      	ldr	r3, [r3, #24]
     ae6:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ae8:	4b4b      	ldr	r3, [pc, #300]	; (c18 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     aea:	2103      	movs	r1, #3
     aec:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	f8d9 3000 	ldr.w	r3, [r9]
     af4:	4849      	ldr	r0, [pc, #292]	; (c1c <__pi_release+0x224>)
     af6:	f023 0303 	bic.w	r3, r3, #3
     afa:	f8c9 3000 	str.w	r3, [r9]
     afe:	4b48      	ldr	r3, [pc, #288]	; (c20 <__pi_release+0x228>)
     b00:	681a      	ldr	r2, [r3, #0]
     b02:	6852      	ldr	r2, [r2, #4]
     b04:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     b06:	6878      	ldr	r0, [r7, #4]
     b08:	f001 fd7c 	bl	2604 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     b0c:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b0e:	6822      	ldr	r2, [r4, #0]
     b10:	f042 0204 	orr.w	r2, r2, #4
     b14:	6022      	str	r2, [r4, #0]
			__WFI ();
     b16:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b1a:	4b41      	ldr	r3, [pc, #260]	; (c20 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b1c:	f022 0204 	bic.w	r2, r2, #4
     b20:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	4641      	mov	r1, r8
     b26:	685b      	ldr	r3, [r3, #4]
     b28:	483c      	ldr	r0, [pc, #240]	; (c1c <__pi_release+0x224>)
     b2a:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	4a3c      	ldr	r2, [pc, #240]	; (c24 <__pi_release+0x22c>)
     b32:	f043 0303 	orr.w	r3, r3, #3
     b36:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b3a:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b3e:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     b40:	0699      	lsls	r1, r3, #26
     b42:	d5fc      	bpl.n	b3e <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b44:	f8da 3000 	ldr.w	r3, [sl]
     b48:	6868      	ldr	r0, [r5, #4]
     b4a:	695b      	ldr	r3, [r3, #20]
     b4c:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b4e:	4d2f      	ldr	r5, [pc, #188]	; (c0c <__pi_release+0x214>)
     b50:	4b2a      	ldr	r3, [pc, #168]	; (bfc <__pi_release+0x204>)
     b52:	6858      	ldr	r0, [r3, #4]
     b54:	682b      	ldr	r3, [r5, #0]
     b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     b58:	4798      	blx	r3
     b5a:	2801      	cmp	r0, #1
     b5c:	d1f8      	bne.n	b50 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b5e:	4b2d      	ldr	r3, [pc, #180]	; (c14 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	4a2d      	ldr	r2, [pc, #180]	; (c18 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b62:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b64:	2300      	movs	r3, #0
     b66:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b68:	4b29      	ldr	r3, [pc, #164]	; (c10 <__pi_release+0x218>)
     b6a:	6018      	str	r0, [r3, #0]
     b6c:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     b6e:	f001 fe59 	bl	2824 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     b72:	f7ff fccf 	bl	514 <reinit_uart>
     b76:	4a2c      	ldr	r2, [pc, #176]	; (c28 <__pi_release+0x230>)
     b78:	6813      	ldr	r3, [r2, #0]
     b7a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     b7e:	6013      	str	r3, [r2, #0]
}
     b80:	e76b      	b.n	a5a <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     b82:	4b2a      	ldr	r3, [pc, #168]	; (c2c <__pi_release+0x234>)
     b84:	2001      	movs	r0, #1
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	68db      	ldr	r3, [r3, #12]
     b8a:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b8c:	4a28      	ldr	r2, [pc, #160]	; (c30 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     b8e:	4929      	ldr	r1, [pc, #164]	; (c34 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b90:	6813      	ldr	r3, [r2, #0]
     b92:	f023 0301 	bic.w	r3, r3, #1
     b96:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	4b27      	ldr	r3, [pc, #156]	; (c38 <__pi_release+0x240>)
     b9a:	681a      	ldr	r2, [r3, #0]
     b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     ba0:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ba2:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     ba6:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     ba8:	604a      	str	r2, [r1, #4]
     baa:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     bac:	687a      	ldr	r2, [r7, #4]
     bae:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	687a      	ldr	r2, [r7, #4]
     bb2:	4b22      	ldr	r3, [pc, #136]	; (c3c <__pi_release+0x244>)
     bb4:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     bb6:	2201      	movs	r2, #1
     bb8:	4b21      	ldr	r3, [pc, #132]	; (c40 <__pi_release+0x248>)
     bba:	601a      	str	r2, [r3, #0]
     bbc:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bbe:	4a19      	ldr	r2, [pc, #100]	; (c24 <__pi_release+0x22c>)
     bc0:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     bc2:	069b      	lsls	r3, r3, #26
     bc4:	d4fc      	bmi.n	bc0 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc6:	2201      	movs	r2, #1
     bc8:	4b1e      	ldr	r3, [pc, #120]	; (c44 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     bca:	2037      	movs	r0, #55	; 0x37
     bcc:	601a      	str	r2, [r3, #0]
     bce:	4b0f      	ldr	r3, [pc, #60]	; (c0c <__pi_release+0x214>)
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	699b      	ldr	r3, [r3, #24]
     bd4:	4798      	blx	r3
			goto DeepSleep;
     bd6:	e763      	b.n	aa0 <__pi_release+0xa8>
	__SLEEP;
     bd8:	782b      	ldrb	r3, [r5, #0]
     bda:	f36f 0341 	bfc	r3, #1, #1
     bde:	702b      	strb	r3, [r5, #0]
     be0:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     be2:	e717      	b.n	a14 <__pi_release+0x1c>
     be4:	20005000 	andcs	r5, r0, r0
     be8:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     bec:	4009202c 	andmi	r2, r9, ip, lsr #32
     bf0:	20000004 	andcs	r0, r0, r4
     bf4:	20000588 	andcs	r0, r0, r8, lsl #11
     bf8:	e000ed10 	and	lr, r0, r0, lsl sp
     bfc:	2000056c 	andcs	r0, r0, ip, ror #10
     c00:	20000560 	andcs	r0, r0, r0, ror #10
     c04:	00002bb5 			; <UNDEFINED> instruction: 0x00002bb5
     c08:	4008218c 	andmi	r2, r8, ip, lsl #3
     c0c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     c10:	4009400c 	andmi	r4, r9, ip
     c14:	60082028 	andvs	r2, r8, r8, lsr #32
     c18:	43040180 	movwmi	r0, #16768	; 0x4180
     c1c:	40034000 	andmi	r4, r3, r0
     c20:	100001d8 	ldrdne	r0, [r0], -r8
     c24:	40091014 	andmi	r1, r9, r4, lsl r0
     c28:	40001038 	andmi	r1, r0, r8, lsr r0
     c2c:	100001a0 	andne	r0, r0, r0, lsr #3
     c30:	40091010 	andmi	r1, r9, r0, lsl r0
     c34:	40093000 	andmi	r3, r9, r0
     c38:	40091040 	andmi	r1, r9, r0, asr #32
     c3c:	43220420 			; <UNDEFINED> instruction: 0x43220420
     c40:	40091018 	andmi	r1, r9, r8, lsl r0
     c44:	43040188 	movwmi	r0, #16776	; 0x4188
     c48:	43220200 			; <UNDEFINED> instruction: 0x43220200
     c4c:	40082224 	andmi	r2, r8, r4, lsr #4

00000c50 <main>:

#include "scheduler.h"

}

int main (void) {
     c50:	b510      	push	{r4, lr}
     c52:	4b11      	ldr	r3, [pc, #68]	; (c98 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	4911      	ldr	r1, [pc, #68]	; (c9c <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c56:	4a12      	ldr	r2, [pc, #72]	; (ca0 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c58:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	4293      	cmp	r3, r2
     c5e:	d1fb      	bne.n	c58 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c60:	4c10      	ldr	r4, [pc, #64]	; (ca4 <main+0x54>)
	system_init ();
     c62:	f7ff fded 	bl	840 <system_init>
	tcv_init ();
     c66:	f000 fb6d 	bl	1344 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c6a:	6823      	ldr	r3, [r4, #0]
     c6c:	2129      	movs	r1, #41	; 0x29
     c6e:	2000      	movs	r0, #0
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	6823      	ldr	r3, [r4, #0]
     c76:	2120      	movs	r1, #32
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	2001      	movs	r0, #1
     c7c:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c7e:	2100      	movs	r1, #0
     c80:	4809      	ldr	r0, [pc, #36]	; (ca8 <main+0x58>)
     c82:	f000 fa9b 	bl	11bc <__pi_fork>
     c86:	4b09      	ldr	r3, [pc, #36]	; (cac <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     c88:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c8a:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     c8c:	2010      	movs	r0, #16
     c8e:	f000 f937 	bl	f00 <delay>
     c92:	b662      	cpsie	i

	sti;

	__pi_release ();
     c94:	f7ff feb0 	bl	9f8 <__pi_release>
     c98:	20004bfc 	strdcs	r4, [r0], -ip
     c9c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     ca0:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     ca4:	10000184 	andne	r0, r0, r4, lsl #3
     ca8:	000000c9 	andeq	r0, r0, r9, asr #1
     cac:	20000588 	andcs	r0, r0, r8, lsl #11

00000cb0 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     cb0:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     cb2:	4b0d      	ldr	r3, [pc, #52]	; (ce8 <killev+0x38>)
	wfun = (aword)(pid->code);
     cb4:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     cb6:	681a      	ldr	r2, [r3, #0]
     cb8:	b1aa      	cbz	r2, ce6 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     cba:	4614      	mov	r4, r2
     cbc:	f834 1b10 	ldrh.w	r1, [r4], #16
     cc0:	2300      	movs	r3, #0
     cc2:	f001 0107 	and.w	r1, r1, #7
     cc6:	e001      	b.n	ccc <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     cc8:	42b5      	cmp	r5, r6
     cca:	d006      	beq.n	cda <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     ccc:	4299      	cmp	r1, r3
     cce:	dd08      	ble.n	ce2 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     cd0:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     cd4:	3301      	adds	r3, #1
     cd6:	42a8      	cmp	r0, r5
     cd8:	d1f6      	bne.n	cc8 <killev+0x18>
			    ) {
				wakeupev (i, j);
     cda:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     cde:	889b      	ldrh	r3, [r3, #4]
     ce0:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     ce2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     ce4:	e7e8      	b.n	cb8 <killev+0x8>
				break;
			}
		}
	}
}
     ce6:	bd70      	pop	{r4, r5, r6, pc}
     ce8:	20000004 	andcs	r0, r0, r4

00000cec <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	4a1d      	ldr	r2, [pc, #116]	; (d64 <qfree+0x78>)
static void qfree (aword *ch) {
     cee:	b530      	push	{r4, r5, lr}
     cf0:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf2:	6813      	ldr	r3, [r2, #0]
     cf4:	b93b      	cbnz	r3, d06 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     cf6:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     cf8:	4a1a      	ldr	r2, [pc, #104]	; (d64 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     cfa:	bb53      	cbnz	r3, d52 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     cfc:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     cfe:	4b1a      	ldr	r3, [pc, #104]	; (d68 <qfree+0x7c>)
	m_setnextp (cc, ch);
     d00:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     d02:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     d04:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d06:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     d0a:	3101      	adds	r1, #1
     d0c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     d10:	4288      	cmp	r0, r1
     d12:	d10b      	bne.n	d2c <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     d14:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     d16:	f850 0c04 	ldr.w	r0, [r0, #-4]
     d1a:	f853 1c04 	ldr.w	r1, [r3, #-4]
     d1e:	4401      	add	r1, r0
     d20:	4618      	mov	r0, r3
     d22:	3101      	adds	r1, #1
     d24:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	e7e3      	b.n	cf4 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	f850 1c04 	ldr.w	r1, [r0, #-4]
     d30:	3101      	adds	r1, #1
     d32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     d36:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     d38:	bf03      	ittte	eq
     d3a:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     d3c:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     d40:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     d44:	461a      	movne	r2, r3
     d46:	bf02      	ittt	eq
     d48:	1949      	addeq	r1, r1, r5
     d4a:	3101      	addeq	r1, #1
     d4c:	f840 1c04 	streq.w	r1, [r0, #-4]
     d50:	e7ea      	b.n	d28 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     d52:	f853 4c04 	ldr.w	r4, [r3, #-4]
     d56:	f850 1c04 	ldr.w	r1, [r0, #-4]
     d5a:	428c      	cmp	r4, r1
     d5c:	d2ce      	bcs.n	cfc <qfree+0x10>
		chunk = m_nextp (chunk))
     d5e:	461a      	mov	r2, r3
     d60:	681b      	ldr	r3, [r3, #0]
     d62:	e7ca      	b.n	cfa <qfree+0xe>
     d64:	20000018 	andcs	r0, r0, r8, lsl r0
     d68:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000d6c <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	4a03      	ldr	r2, [pc, #12]	; (d7c <dgout+0x10>)
     d6e:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     d70:	071b      	lsls	r3, r3, #28
     d72:	d4fc      	bmi.n	d6e <dgout+0x2>
	diag_wchar (c, a);
     d74:	4b02      	ldr	r3, [pc, #8]	; (d80 <dgout+0x14>)
     d76:	b2c0      	uxtb	r0, r0
     d78:	6018      	str	r0, [r3, #0]
}
     d7a:	4770      	bx	lr
     d7c:	40001018 	andmi	r1, r0, r8, lsl r0
     d80:	40001000 	andmi	r1, r0, r0

00000d84 <__pi_badstate>:
	syserror (ESTATE, "state");
     d84:	2007      	movs	r0, #7
void __pi_badstate (void) {
     d86:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     d88:	4901      	ldr	r1, [pc, #4]	; (d90 <__pi_badstate+0xc>)
     d8a:	f7ff fa89 	bl	2a0 <__pi_syserror>
     d8e:	bf00      	nop
     d90:	00002bfc 	strdeq	r2, [r0], -ip

00000d94 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d96:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	4608      	mov	r0, r1
     d9a:	f7ff fb69 	bl	470 <tci_update_delay_ticks>
     d9e:	2800      	cmp	r0, #0
     da0:	d154      	bne.n	e4c <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da2:	4b2b      	ldr	r3, [pc, #172]	; (e50 <update_n_wake+0xbc>)
     da4:	4d2b      	ldr	r5, [pc, #172]	; (e54 <update_n_wake+0xc0>)
     da6:	8819      	ldrh	r1, [r3, #0]
     da8:	882a      	ldrh	r2, [r5, #0]
     daa:	b289      	uxth	r1, r1
     dac:	428a      	cmp	r2, r1
     dae:	492a      	ldr	r1, [pc, #168]	; (e58 <update_n_wake+0xc4>)
     db0:	d803      	bhi.n	dba <update_n_wake+0x26>
     db2:	8808      	ldrh	r0, [r1, #0]
     db4:	b280      	uxth	r0, r0
     db6:	4282      	cmp	r2, r0
     db8:	d20d      	bcs.n	dd6 <update_n_wake+0x42>
     dba:	881e      	ldrh	r6, [r3, #0]
     dbc:	8808      	ldrh	r0, [r1, #0]
     dbe:	b2b6      	uxth	r6, r6
     dc0:	b280      	uxth	r0, r0
     dc2:	4286      	cmp	r6, r0
     dc4:	d236      	bcs.n	e34 <update_n_wake+0xa0>
     dc6:	8818      	ldrh	r0, [r3, #0]
     dc8:	b280      	uxth	r0, r0
     dca:	4282      	cmp	r2, r0
     dcc:	d903      	bls.n	dd6 <update_n_wake+0x42>
     dce:	8808      	ldrh	r0, [r1, #0]
     dd0:	b280      	uxth	r0, r0
     dd2:	4282      	cmp	r2, r0
     dd4:	d32e      	bcc.n	e34 <update_n_wake+0xa0>
		for_all_tasks (i) {
     dd6:	4a21      	ldr	r2, [pc, #132]	; (e5c <update_n_wake+0xc8>)
     dd8:	6810      	ldr	r0, [r2, #0]
     dda:	b918      	cbnz	r0, de4 <update_n_wake+0x50>
	__pi_mintk = znew + min;
     ddc:	8818      	ldrh	r0, [r3, #0]
     dde:	4404      	add	r4, r0
     de0:	802c      	strh	r4, [r5, #0]
     de2:	e02c      	b.n	e3e <update_n_wake+0xaa>
			if (!twaiting (i))
     de4:	8806      	ldrh	r6, [r0, #0]
     de6:	0732      	lsls	r2, r6, #28
     de8:	d51b      	bpl.n	e22 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
     dea:	881f      	ldrh	r7, [r3, #0]
     dec:	8842      	ldrh	r2, [r0, #2]
     dee:	b2bf      	uxth	r7, r7
     df0:	42ba      	cmp	r2, r7
     df2:	d803      	bhi.n	dfc <update_n_wake+0x68>
     df4:	880f      	ldrh	r7, [r1, #0]
     df6:	b2bf      	uxth	r7, r7
     df8:	42ba      	cmp	r2, r7
     dfa:	d20f      	bcs.n	e1c <update_n_wake+0x88>
     dfc:	f8b3 c000 	ldrh.w	ip, [r3]
     e00:	880f      	ldrh	r7, [r1, #0]
     e02:	fa1f fc8c 	uxth.w	ip, ip
     e06:	b2bf      	uxth	r7, r7
     e08:	45bc      	cmp	ip, r7
     e0a:	d20c      	bcs.n	e26 <update_n_wake+0x92>
     e0c:	881f      	ldrh	r7, [r3, #0]
     e0e:	b2bf      	uxth	r7, r7
     e10:	42ba      	cmp	r2, r7
     e12:	d903      	bls.n	e1c <update_n_wake+0x88>
     e14:	880f      	ldrh	r7, [r1, #0]
     e16:	b2bf      	uxth	r7, r7
     e18:	42ba      	cmp	r2, r7
     e1a:	d304      	bcc.n	e26 <update_n_wake+0x92>
				wakeuptm (i);
     e1c:	f026 060f 	bic.w	r6, r6, #15
     e20:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
     e22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     e24:	e7d9      	b.n	dda <update_n_wake+0x46>
				d = i->Timer - znew;
     e26:	881e      	ldrh	r6, [r3, #0]
     e28:	1b92      	subs	r2, r2, r6
     e2a:	b292      	uxth	r2, r2
     e2c:	4294      	cmp	r4, r2
     e2e:	bf28      	it	cs
     e30:	4614      	movcs	r4, r2
     e32:	e7f6      	b.n	e22 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
     e34:	8818      	ldrh	r0, [r3, #0]
     e36:	1a12      	subs	r2, r2, r0
     e38:	b292      	uxth	r2, r2
     e3a:	4294      	cmp	r4, r2
     e3c:	d9ce      	bls.n	ddc <update_n_wake+0x48>
	__pi_old = znew;
     e3e:	881b      	ldrh	r3, [r3, #0]
     e40:	b29b      	uxth	r3, r3
     e42:	800b      	strh	r3, [r1, #0]
}
     e44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
     e48:	f7ff ba54 	b.w	2f4 <tci_run_delay_timer>
}
     e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4e:	bf00      	nop
     e50:	20000574 	andcs	r0, r0, r4, ror r5
     e54:	20000568 	andcs	r0, r0, r8, ror #10
     e58:	2000056a 	andcs	r0, r0, sl, ror #10
     e5c:	20000004 	andcs	r0, r0, r4

00000e60 <proceed>:
void proceed (word state) {
     e60:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
     e62:	4b03      	ldr	r3, [pc, #12]	; (e70 <proceed+0x10>)
     e64:	0100      	lsls	r0, r0, #4
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	8018      	strh	r0, [r3, #0]
	release;
     e6a:	f7ff fdc5 	bl	9f8 <__pi_release>
     e6e:	bf00      	nop
     e70:	20000588 	andcs	r0, r0, r8, lsl #11

00000e74 <__pi_wait>:
void __pi_wait (aword event, word state) {
     e74:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
     e76:	4b0a      	ldr	r3, [pc, #40]	; (ea0 <__pi_wait+0x2c>)
     e78:	681c      	ldr	r4, [r3, #0]
     e7a:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	f013 0f04 	tst.w	r3, #4
     e80:	f003 0207 	and.w	r2, r3, #7
     e84:	d003      	beq.n	e8e <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
     e86:	2005      	movs	r0, #5
     e88:	4906      	ldr	r1, [pc, #24]	; (ea4 <__pi_wait+0x30>)
     e8a:	f7ff fa09 	bl	2a0 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
     e8e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
     e92:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
     e94:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
     e96:	8191      	strh	r1, [r2, #12]
     e98:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
     e9a:	8023      	strh	r3, [r4, #0]
}
     e9c:	bd10      	pop	{r4, pc}
     e9e:	bf00      	nop
     ea0:	20000588 	andcs	r0, r0, r8, lsl #11
     ea4:	00002c02 	andeq	r2, r0, r2, lsl #24

00000ea8 <__pi_trigger>:
void __pi_trigger (aword event) {
     ea8:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
     eaa:	4b0b      	ldr	r3, [pc, #44]	; (ed8 <__pi_trigger+0x30>)
     eac:	681a      	ldr	r2, [r3, #0]
     eae:	b192      	cbz	r2, ed6 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
     eb0:	4614      	mov	r4, r2
     eb2:	2300      	movs	r3, #0
     eb4:	f834 1b10 	ldrh.w	r1, [r4], #16
     eb8:	f001 0107 	and.w	r1, r1, #7
     ebc:	4299      	cmp	r1, r3
     ebe:	dd08      	ble.n	ed2 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
     ec0:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     ec4:	3301      	adds	r3, #1
     ec6:	4285      	cmp	r5, r0
     ec8:	d1f8      	bne.n	ebc <__pi_trigger+0x14>
				wakeupev (i, j);
     eca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     ece:	889b      	ldrh	r3, [r3, #4]
     ed0:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     ed2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     ed4:	e7eb      	b.n	eae <__pi_trigger+0x6>
}
     ed6:	bd30      	pop	{r4, r5, pc}
     ed8:	20000004 	andcs	r0, r0, r4

00000edc <__pi_join>:
aword __pi_join (aword pid, word st) {
     edc:	b510      	push	{r4, lr}
     ede:	4604      	mov	r4, r0
	for_all_tasks (i) {
     ee0:	4b06      	ldr	r3, [pc, #24]	; (efc <__pi_join+0x20>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	b90b      	cbnz	r3, eea <__pi_join+0xe>
	return 0;
     ee6:	461c      	mov	r4, r3
     ee8:	e004      	b.n	ef4 <__pi_join+0x18>
		if ((aword)i == pid) {
     eea:	42a3      	cmp	r3, r4
     eec:	d104      	bne.n	ef8 <__pi_join+0x1c>
			__pi_wait (pid, st);
     eee:	4620      	mov	r0, r4
     ef0:	f7ff ffc0 	bl	e74 <__pi_wait>
}
     ef4:	4620      	mov	r0, r4
     ef6:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
     ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     efa:	e7f3      	b.n	ee4 <__pi_join+0x8>
     efc:	20000004 	andcs	r0, r0, r4

00000f00 <delay>:
void delay (word d, word state) {
     f00:	b538      	push	{r3, r4, r5, lr}
     f02:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
     f04:	4d0a      	ldr	r5, [pc, #40]	; (f30 <delay+0x30>)
     f06:	682a      	ldr	r2, [r5, #0]
     f08:	8813      	ldrh	r3, [r2, #0]
     f0a:	f003 0307 	and.w	r3, r3, #7
     f0e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     f12:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
     f14:	2101      	movs	r1, #1
     f16:	f7ff ff3d 	bl	d94 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
     f1a:	4b06      	ldr	r3, [pc, #24]	; (f34 <delay+0x34>)
     f1c:	8818      	ldrh	r0, [r3, #0]
     f1e:	682b      	ldr	r3, [r5, #0]
     f20:	4404      	add	r4, r0
     f22:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
     f24:	682a      	ldr	r2, [r5, #0]
     f26:	8813      	ldrh	r3, [r2, #0]
     f28:	f043 0308 	orr.w	r3, r3, #8
     f2c:	8013      	strh	r3, [r2, #0]
}
     f2e:	bd38      	pop	{r3, r4, r5, pc}
     f30:	20000588 	andcs	r0, r0, r8, lsl #11
     f34:	2000056a 	andcs	r0, r0, sl, ror #10

00000f38 <running>:
	if (fun == NULL)
     f38:	4603      	mov	r3, r0
     f3a:	b910      	cbnz	r0, f42 <running+0xa>
		return (int) __pi_curr;
     f3c:	4b05      	ldr	r3, [pc, #20]	; (f54 <running+0x1c>)
     f3e:	6818      	ldr	r0, [r3, #0]
     f40:	4770      	bx	lr
	for_all_tasks (i)
     f42:	4a05      	ldr	r2, [pc, #20]	; (f58 <running+0x20>)
     f44:	6810      	ldr	r0, [r2, #0]
     f46:	b900      	cbnz	r0, f4a <running+0x12>
}
     f48:	4770      	bx	lr
		if (i->code == fun)
     f4a:	6842      	ldr	r2, [r0, #4]
     f4c:	429a      	cmp	r2, r3
     f4e:	d0fb      	beq.n	f48 <running+0x10>
	for_all_tasks (i)
     f50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     f52:	e7f8      	b.n	f46 <running+0xe>
     f54:	20000588 	andcs	r0, r0, r8, lsl #11
     f58:	20000004 	andcs	r0, r0, r4

00000f5c <__pi_strlen>:
int __pi_strlen (const char *s) {
     f5c:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
     f5e:	2000      	movs	r0, #0
     f60:	5c1a      	ldrb	r2, [r3, r0]
     f62:	b902      	cbnz	r2, f66 <__pi_strlen+0xa>
}
     f64:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
     f66:	3001      	adds	r0, #1
     f68:	e7fa      	b.n	f60 <__pi_strlen+0x4>
	...

00000f6c <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
     f6e:	b119      	cbz	r1, f78 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
     f70:	2003      	movs	r0, #3
     f72:	4905      	ldr	r1, [pc, #20]	; (f88 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
     f74:	f7ff f994 	bl	2a0 <__pi_syserror>
	if (ioreq [loc] != NULL)
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <adddevfunc+0x20>)
     f7a:	681a      	ldr	r2, [r3, #0]
     f7c:	b112      	cbz	r2, f84 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
     f7e:	2004      	movs	r0, #4
     f80:	4901      	ldr	r1, [pc, #4]	; (f88 <adddevfunc+0x1c>)
     f82:	e7f7      	b.n	f74 <adddevfunc+0x8>
	ioreq [loc] = rf;
     f84:	6018      	str	r0, [r3, #0]
}
     f86:	bd08      	pop	{r3, pc}
     f88:	00002c05 	andeq	r2, r0, r5, lsl #24
     f8c:	20000008 	andcs	r0, r0, r8

00000f90 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f94:	4604      	mov	r4, r0
     f96:	4616      	mov	r6, r2
     f98:	461d      	mov	r5, r3
     f9a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     f9e:	b921      	cbnz	r1, faa <io+0x1a>
     fa0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1028 <io+0x98>
     fa4:	f8d9 3000 	ldr.w	r3, [r9]
     fa8:	b91b      	cbnz	r3, fb2 <io+0x22>
		syserror (ENODEVICE, "io");
     faa:	2001      	movs	r0, #1
     fac:	491d      	ldr	r1, [pc, #116]	; (1024 <io+0x94>)
     fae:	f7ff f977 	bl	2a0 <__pi_syserror>
	if (len == 0)
     fb2:	f1b8 0f00 	cmp.w	r8, #0
     fb6:	d028      	beq.n	100a <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	4642      	mov	r2, r8
     fba:	4629      	mov	r1, r5
     fbc:	4630      	mov	r0, r6
     fbe:	4798      	blx	r3
	if (ret >= 0)
     fc0:	2800      	cmp	r0, #0
     fc2:	da23      	bge.n	100c <io+0x7c>
	if (ret == -1) {
     fc4:	1c41      	adds	r1, r0, #1
     fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
     fca:	d108      	bne.n	fde <io+0x4e>
		if (retry == WNONE)
     fcc:	429c      	cmp	r4, r3
     fce:	d01c      	beq.n	100a <io+0x7a>
		iowait (dev, operation, retry);
     fd0:	4621      	mov	r1, r4
     fd2:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
     fd6:	f7ff ff4d 	bl	e74 <__pi_wait>
			release;
     fda:	f7ff fd0d 	bl	9f8 <__pi_release>
	if (ret == -2) {
     fde:	1c82      	adds	r2, r0, #2
     fe0:	d116      	bne.n	1010 <io+0x80>
		if (retry != WNONE) {
     fe2:	429c      	cmp	r4, r3
     fe4:	f8d9 9000 	ldr.w	r9, [r9]
     fe8:	d00a      	beq.n	1000 <io+0x70>
			iowait (dev, operation, retry);
     fea:	4621      	mov	r1, r4
     fec:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
     ff0:	f7ff ff40 	bl	e74 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
     ff4:	4642      	mov	r2, r8
     ff6:	4629      	mov	r1, r5
     ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ffc:	47c8      	blx	r9
     ffe:	e7ec      	b.n	fda <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1000:	4642      	mov	r2, r8
    1002:	4629      	mov	r1, r5
    1004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1008:	47c8      	blx	r9
		return 0;
    100a:	2000      	movs	r0, #0
}
    100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1010:	429c      	cmp	r4, r3
    1012:	d0fa      	beq.n	100a <io+0x7a>
		delay (-ret - 2, retry);
    1014:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1018:	30fe      	adds	r0, #254	; 0xfe
    101a:	4621      	mov	r1, r4
    101c:	b280      	uxth	r0, r0
    101e:	f7ff ff6f 	bl	f00 <delay>
		release;
    1022:	e7da      	b.n	fda <io+0x4a>
    1024:	00002c0a 	andeq	r2, r0, sl, lsl #24
    1028:	20000008 	andcs	r0, r0, r8

0000102c <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	4a0d      	ldr	r2, [pc, #52]	; (1064 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    102e:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1030:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1034:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1038:	089b      	lsrs	r3, r3, #2
    103a:	1e59      	subs	r1, r3, #1
    103c:	29ff      	cmp	r1, #255	; 0xff
    103e:	d803      	bhi.n	1048 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1040:	2004      	movs	r0, #4
    1042:	4909      	ldr	r1, [pc, #36]	; (1068 <__pi_malloc_init+0x3c>)
    1044:	f7ff f92c 	bl	2a0 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1048:	4908      	ldr	r1, [pc, #32]	; (106c <__pi_malloc_init+0x40>)
    104a:	1d10      	adds	r0, r2, #4
    104c:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    104e:	2000      	movs	r0, #0
    1050:	4907      	ldr	r1, [pc, #28]	; (1070 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1052:	3b02      	subs	r3, #2
    1054:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1056:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105a:	4a06      	ldr	r2, [pc, #24]	; (1074 <__pi_malloc_init+0x48>)
    105c:	6013      	str	r3, [r2, #0]
    105e:	4a06      	ldr	r2, [pc, #24]	; (1078 <__pi_malloc_init+0x4c>)
    1060:	6013      	str	r3, [r2, #0]
}
    1062:	bd08      	pop	{r3, pc}
    1064:	2000058c 	andcs	r0, r0, ip, lsl #11
    1068:	00002c0d 	andeq	r2, r0, sp, lsl #24
    106c:	20000018 	andcs	r0, r0, r8, lsl r0
    1070:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1074:	2000000c 	andcs	r0, r0, ip
    1078:	20000014 	andcs	r0, r0, r4, lsl r0

0000107c <__pi_free>:
void __pi_free (aword *ch) {
    107c:	b508      	push	{r3, lr}
	if (ch == NULL)
    107e:	b1c8      	cbz	r0, 10b4 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1080:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1084:	2b00      	cmp	r3, #0
    1086:	db03      	blt.n	1090 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1088:	2006      	movs	r0, #6
    108a:	490b      	ldr	r1, [pc, #44]	; (10b8 <__pi_free+0x3c>)
    108c:	f7ff f908 	bl	2a0 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1090:	490a      	ldr	r1, [pc, #40]	; (10bc <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    1092:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1096:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1098:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    109c:	4413      	add	r3, r2
    109e:	600b      	str	r3, [r1, #0]
	QFREE;
    10a0:	f7ff fe24 	bl	cec <qfree>
	if (mevent [MA_NP] . nwait) {
    10a4:	4806      	ldr	r0, [pc, #24]	; (10c0 <__pi_free+0x44>)
    10a6:	7803      	ldrb	r3, [r0, #0]
    10a8:	b123      	cbz	r3, 10b4 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    10aa:	f7ff fefd 	bl	ea8 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    10ae:	7803      	ldrb	r3, [r0, #0]
    10b0:	3b01      	subs	r3, #1
    10b2:	7003      	strb	r3, [r0, #0]
}
    10b4:	bd08      	pop	{r3, pc}
    10b6:	bf00      	nop
    10b8:	00002c12 	andeq	r2, r0, r2, lsl ip
    10bc:	2000000c 	andcs	r0, r0, ip
    10c0:	20000010 	andcs	r0, r0, r0, lsl r0

000010c4 <kill>:
void kill (aword pid) {
    10c4:	b510      	push	{r4, lr}
	if (pid == 0)
    10c6:	b908      	cbnz	r0, 10cc <kill+0x8>
		pid = (aword) __pi_curr;
    10c8:	4b0f      	ldr	r3, [pc, #60]	; (1108 <kill+0x44>)
    10ca:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    10cc:	2200      	movs	r2, #0
	for_all_tasks (i) {
    10ce:	4b0f      	ldr	r3, [pc, #60]	; (110c <kill+0x48>)
    10d0:	681c      	ldr	r4, [r3, #0]
    10d2:	b91c      	cbnz	r4, 10dc <kill+0x18>
	syserror (EREQPAR, "kpi");
    10d4:	2003      	movs	r0, #3
    10d6:	490e      	ldr	r1, [pc, #56]	; (1110 <kill+0x4c>)
    10d8:	f7ff f8e2 	bl	2a0 <__pi_syserror>
		if ((aword)i == pid) {
    10dc:	4284      	cmp	r4, r0
    10de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    10e0:	d10e      	bne.n	1100 <kill+0x3c>
			if (j == NULL)
    10e2:	b95a      	cbnz	r2, 10fc <kill+0x38>
				__PCB = i->Next;
    10e4:	6019      	str	r1, [r3, #0]
			killev (i);
    10e6:	4620      	mov	r0, r4
    10e8:	f7ff fde2 	bl	cb0 <killev>
			ufree (i);
    10ec:	f7ff ffc6 	bl	107c <__pi_free>
			if (i == __pi_curr)
    10f0:	4b05      	ldr	r3, [pc, #20]	; (1108 <kill+0x44>)
    10f2:	681b      	ldr	r3, [r3, #0]
    10f4:	42a3      	cmp	r3, r4
    10f6:	d106      	bne.n	1106 <kill+0x42>
				release;
    10f8:	f7ff fc7e 	bl	9f8 <__pi_release>
				j->Next = i->Next;
    10fc:	62d1      	str	r1, [r2, #44]	; 0x2c
    10fe:	e7f2      	b.n	10e6 <kill+0x22>
    1100:	4622      	mov	r2, r4
    1102:	460c      	mov	r4, r1
    1104:	e7e5      	b.n	10d2 <kill+0xe>
}
    1106:	bd10      	pop	{r4, pc}
    1108:	20000588 	andcs	r0, r0, r8, lsl #11
    110c:	20000004 	andcs	r0, r0, r4
    1110:	00002c17 	andeq	r2, r0, r7, lsl ip

00001114 <__pi_malloc>:
	if (size < 8)
    1114:	2807      	cmp	r0, #7
		_size = 2;
    1116:	bf98      	it	ls
    1118:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    111a:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    111c:	4b21      	ldr	r3, [pc, #132]	; (11a4 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    111e:	bf88      	it	hi
    1120:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1122:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	4920      	ldr	r1, [pc, #128]	; (11a8 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1126:	bf88      	it	hi
    1128:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    112a:	b94c      	cbnz	r4, 1140 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    112c:	4a1f      	ldr	r2, [pc, #124]	; (11ac <__pi_malloc+0x98>)
    112e:	7853      	ldrb	r3, [r2, #1]
    1130:	2bff      	cmp	r3, #255	; 0xff
    1132:	d001      	beq.n	1138 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1134:	3301      	adds	r3, #1
    1136:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1138:	2200      	movs	r2, #0
    113a:	4b1d      	ldr	r3, [pc, #116]	; (11b0 <__pi_malloc+0x9c>)
    113c:	601a      	str	r2, [r3, #0]
	return chunk;
    113e:	e02f      	b.n	11a0 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	6862      	ldr	r2, [r4, #4]
    1142:	428a      	cmp	r2, r1
    1144:	d003      	beq.n	114e <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1146:	2006      	movs	r0, #6
    1148:	491a      	ldr	r1, [pc, #104]	; (11b4 <__pi_malloc+0xa0>)
    114a:	f7ff f8a9 	bl	2a0 <__pi_syserror>
		if (m_size (chunk) >= _size)
    114e:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1152:	4285      	cmp	r5, r0
    1154:	d202      	bcs.n	115c <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1156:	4623      	mov	r3, r4
    1158:	4614      	mov	r4, r2
    115a:	e7e6      	b.n	112a <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    115c:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    115e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1162:	1a1b      	subs	r3, r3, r0
    1164:	2b08      	cmp	r3, #8
    1166:	d909      	bls.n	117c <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1168:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    116c:	3001      	adds	r0, #1
    116e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1172:	3b01      	subs	r3, #1
    1174:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1178:	f7ff fdb8 	bl	cec <qfree>
		mevent [MA_NP] . nfail = 0;
    117c:	2200      	movs	r2, #0
    117e:	4b0b      	ldr	r3, [pc, #44]	; (11ac <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    1180:	490d      	ldr	r1, [pc, #52]	; (11b8 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    1182:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1184:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1188:	680b      	ldr	r3, [r1, #0]
    118a:	1a9b      	subs	r3, r3, r2
    118c:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    118e:	4908      	ldr	r1, [pc, #32]	; (11b0 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    1190:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1194:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1196:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    119a:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    119c:	bf38      	it	cc
    119e:	600b      	strcc	r3, [r1, #0]
}
    11a0:	4620      	mov	r0, r4
    11a2:	bd38      	pop	{r3, r4, r5, pc}
    11a4:	20000018 	andcs	r0, r0, r8, lsl r0
    11a8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    11ac:	20000010 	andcs	r0, r0, r0, lsl r0
    11b0:	20000014 	andcs	r0, r0, r4, lsl r0
    11b4:	00002c1b 	andeq	r2, r0, fp, lsl ip
    11b8:	2000000c 	andcs	r0, r0, ip

000011bc <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    11bc:	b538      	push	{r3, r4, r5, lr}
    11be:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c0:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    11c2:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c4:	f7ff ffa6 	bl	1114 <__pi_malloc>
    11c8:	2300      	movs	r3, #0
    11ca:	b138      	cbz	r0, 11dc <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    11cc:	4a07      	ldr	r2, [pc, #28]	; (11ec <__pi_fork+0x30>)
	i->Status = 0;
    11ce:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    11d0:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    11d2:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    11d4:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    11d8:	b90b      	cbnz	r3, 11de <__pi_fork+0x22>
			__PCB = i;
    11da:	6010      	str	r0, [r2, #0]
}
    11dc:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    11de:	461a      	mov	r2, r3
    11e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11e2:	2b00      	cmp	r3, #0
    11e4:	d1fb      	bne.n	11de <__pi_fork+0x22>
			j->Next = i;
    11e6:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    11e8:	e7f8      	b.n	11dc <__pi_fork+0x20>
    11ea:	bf00      	nop
    11ec:	20000004 	andcs	r0, r0, r4

000011f0 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    11f0:	4a04      	ldr	r2, [pc, #16]	; (1204 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    11f2:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    11f4:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    11f6:	4803      	ldr	r0, [pc, #12]	; (1204 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    11f8:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    11fa:	bf1c      	itt	ne
    11fc:	3301      	addne	r3, #1
    11fe:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1200:	f7ff be38 	b.w	e74 <__pi_wait>
    1204:	20000010 	andcs	r0, r0, r0, lsl r0

00001208 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1208:	b40f      	push	{r0, r1, r2, r3}
    120a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    120e:	ab0a      	add	r3, sp, #40	; 0x28
    1210:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1214:	2015      	movs	r0, #21
	va_start (ap, mess);
    1216:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1218:	4b46      	ldr	r3, [pc, #280]	; (1334 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    121a:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    121c:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    121e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 133c <diag+0x134>
	diag_disable_int (a, is);
    1222:	695b      	ldr	r3, [r3, #20]
    1224:	4798      	blx	r3
	while (*mess != '\0') {
    1226:	7820      	ldrb	r0, [r4, #0]
    1228:	b998      	cbnz	r0, 1252 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    122a:	200d      	movs	r0, #13
    122c:	f7ff fd9e 	bl	d6c <dgout>
	dgout ('\n');
    1230:	200a      	movs	r0, #10
    1232:	f7ff fd9b 	bl	d6c <dgout>
    1236:	4a40      	ldr	r2, [pc, #256]	; (1338 <diag+0x130>)
    1238:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    123a:	071b      	lsls	r3, r3, #28
    123c:	d4fc      	bmi.n	1238 <diag+0x30>
	diag_enable_int (a, is);
    123e:	4b3d      	ldr	r3, [pc, #244]	; (1334 <diag+0x12c>)
    1240:	2015      	movs	r0, #21
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	691b      	ldr	r3, [r3, #16]
    1246:	4798      	blx	r3
}
    1248:	b003      	add	sp, #12
    124a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    124e:	b004      	add	sp, #16
    1250:	4770      	bx	lr
		if (*mess == '%') {
    1252:	2825      	cmp	r0, #37	; 0x25
    1254:	f104 0601 	add.w	r6, r4, #1
    1258:	d169      	bne.n	132e <diag+0x126>
			if (*mess == 'l') {
    125a:	9b01      	ldr	r3, [sp, #4]
    125c:	7862      	ldrb	r2, [r4, #1]
    125e:	f853 1b04 	ldr.w	r1, [r3], #4
    1262:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1264:	bf08      	it	eq
    1266:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1268:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    126a:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    126c:	bf0c      	ite	eq
    126e:	2520      	moveq	r5, #32
				bc = 16;
    1270:	2510      	movne	r5, #16
			switch (*mess) {
    1272:	2b75      	cmp	r3, #117	; 0x75
    1274:	d04e      	beq.n	1314 <diag+0x10c>
    1276:	d80a      	bhi.n	128e <diag+0x86>
    1278:	2b64      	cmp	r3, #100	; 0x64
    127a:	d01c      	beq.n	12b6 <diag+0xae>
    127c:	2b73      	cmp	r3, #115	; 0x73
    127e:	d052      	beq.n	1326 <diag+0x11e>
				dgout ('%');
    1280:	2025      	movs	r0, #37	; 0x25
    1282:	f7ff fd73 	bl	d6c <dgout>
				dgout (*mess);
    1286:	7830      	ldrb	r0, [r6, #0]
    1288:	f7ff fd70 	bl	d6c <dgout>
    128c:	e010      	b.n	12b0 <diag+0xa8>
			switch (*mess) {
    128e:	2b78      	cmp	r3, #120	; 0x78
    1290:	d1f6      	bne.n	1280 <diag+0x78>
    1292:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1294:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1340 <diag+0x138>
					i += 4;
    1298:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    129a:	1b2b      	subs	r3, r5, r4
    129c:	fa21 f303 	lsr.w	r3, r1, r3
    12a0:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    12a4:	f819 0003 	ldrb.w	r0, [r9, r3]
    12a8:	f7ff fd60 	bl	d6c <dgout>
				while (i < bc) {
    12ac:	42a5      	cmp	r5, r4
    12ae:	dcf3      	bgt.n	1298 <diag+0x90>
			mess++;
    12b0:	3601      	adds	r6, #1
					d /= 10;
    12b2:	4634      	mov	r4, r6
    12b4:	e7b7      	b.n	1226 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    12b6:	1e6b      	subs	r3, r5, #1
    12b8:	fa21 f303 	lsr.w	r3, r1, r3
    12bc:	07da      	lsls	r2, r3, #31
    12be:	d509      	bpl.n	12d4 <diag+0xcc>
					dgout ('-');
    12c0:	202d      	movs	r0, #45	; 0x2d
    12c2:	f7ff fd53 	bl	d6c <dgout>
					if (bc == 16)
    12c6:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    12c8:	bf04      	itt	eq
    12ca:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    12ce:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    12d2:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    12d4:	f242 7410 	movw	r4, #10000	; 0x2710
    12d8:	2d10      	cmp	r5, #16
    12da:	bf18      	it	ne
    12dc:	4644      	movne	r4, r8
					v = (word) (val / d);
    12de:	fbb1 f5f4 	udiv	r5, r1, r4
    12e2:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    12e4:	b935      	cbnz	r5, 12f4 <diag+0xec>
    12e6:	2c01      	cmp	r4, #1
    12e8:	d004      	beq.n	12f4 <diag+0xec>
					d /= 10;
    12ea:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    12ee:	e7f6      	b.n	12de <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    12f0:	4c12      	ldr	r4, [pc, #72]	; (133c <diag+0x134>)
    12f2:	e7f4      	b.n	12de <diag+0xd6>
					dgout (v + '0');
    12f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    12f8:	b280      	uxth	r0, r0
    12fa:	f7ff fd37 	bl	d6c <dgout>
					if (d == 0) break;
    12fe:	2c09      	cmp	r4, #9
					d /= 10;
    1300:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1304:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1308:	d9d2      	bls.n	12b0 <diag+0xa8>
					v = (word) (val / d);
    130a:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    130e:	461c      	mov	r4, r3
					v = (word) (val / d);
    1310:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1312:	e7ef      	b.n	12f4 <diag+0xec>
				if (bc == 16)
    1314:	2d10      	cmp	r5, #16
    1316:	d1eb      	bne.n	12f0 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1318:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    131c:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    131e:	e7de      	b.n	12de <diag+0xd6>
					dgout (*s);
    1320:	f7ff fd24 	bl	d6c <dgout>
					s++;
    1324:	3101      	adds	r1, #1
				while (*s != '\0') {
    1326:	7808      	ldrb	r0, [r1, #0]
    1328:	2800      	cmp	r0, #0
    132a:	d1f9      	bne.n	1320 <diag+0x118>
    132c:	e7c0      	b.n	12b0 <diag+0xa8>
			dgout (*mess++);
    132e:	f7ff fd1d 	bl	d6c <dgout>
    1332:	e7be      	b.n	12b2 <diag+0xaa>
    1334:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1338:	40001018 	andmi	r1, r0, r8, lsl r0
    133c:	3b9aca00 	blcc	fe6b3b44 <_estack+0xde6aeb44>
    1340:	00002c20 	andeq	r2, r0, r0, lsr #24

00001344 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1344:	4770      	bx	lr

00001346 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1346:	e7fe      	b.n	1346 <NmiSR>

00001348 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1348:	e7fe      	b.n	1348 <FaultISR>

0000134a <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    134a:	e7fe      	b.n	134a <AONIntHandler>

0000134c <ResetISR>:
{
    134c:	b508      	push	{r3, lr}
    SetupTrimDevice();
    134e:	f000 fe1b 	bl	1f88 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1352:	4b0c      	ldr	r3, [pc, #48]	; (1384 <zero_loop+0x20>)
    pui32Src = &_etext;
    1354:	4a0c      	ldr	r2, [pc, #48]	; (1388 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1356:	490d      	ldr	r1, [pc, #52]	; (138c <zero_loop+0x28>)
    1358:	428b      	cmp	r3, r1
    135a:	d30d      	bcc.n	1378 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    135c:	480c      	ldr	r0, [pc, #48]	; (1390 <zero_loop+0x2c>)
    135e:	490d      	ldr	r1, [pc, #52]	; (1394 <zero_loop+0x30>)
    1360:	f04f 0200 	mov.w	r2, #0

00001364 <zero_loop>:
    1364:	4288      	cmp	r0, r1
    1366:	bfb8      	it	lt
    1368:	f840 2b04 	strlt.w	r2, [r0], #4
    136c:	dbfa      	blt.n	1364 <zero_loop>
   main();
    136e:	f7ff fc6f 	bl	c50 <main>
    FaultISR();
    1372:	f7ff ffe9 	bl	1348 <FaultISR>
}
    1376:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1378:	f852 0b04 	ldr.w	r0, [r2], #4
    137c:	f843 0b04 	str.w	r0, [r3], #4
    1380:	e7ea      	b.n	1358 <ResetISR+0xc>
    1382:	bf00      	nop
    1384:	20000000 	andcs	r0, r0, r0
    1388:	00002c38 	andeq	r2, r0, r8, lsr ip
    138c:	20000000 	andcs	r0, r0, r0
    1390:	20000000 	andcs	r0, r0, r0
    1394:	2000058c 	andcs	r0, r0, ip, lsl #11

00001398 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1398:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    139a:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    139c:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    13a0:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13a2:	4907      	ldr	r1, [pc, #28]	; (13c0 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    13a4:	4d07      	ldr	r5, [pc, #28]	; (13c4 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13a6:	4c08      	ldr	r4, [pc, #32]	; (13c8 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    13a8:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    13aa:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    13ac:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    13ae:	b2c0      	uxtb	r0, r0
			b |= 1;
    13b0:	bf48      	it	mi
    13b2:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    13b6:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13b8:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13ba:	600a      	str	r2, [r1, #0]
    13bc:	d1f4      	bne.n	13a8 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    13be:	bd70      	pop	{r4, r5, r6, pc}
    13c0:	400220a0 	andmi	r2, r2, r0, lsr #1
    13c4:	400220c0 	andmi	r2, r2, r0, asr #1
    13c8:	40022090 	mulmi	r2, r0, r0

000013cc <put_byte>:

static void put_byte (byte b) {
    13cc:	b530      	push	{r4, r5, lr}
    13ce:	2308      	movs	r3, #8
    13d0:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    13d8:	4c06      	ldr	r4, [pc, #24]	; (13f4 <put_byte+0x28>)
    13da:	4a07      	ldr	r2, [pc, #28]	; (13f8 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    13dc:	f010 0f80 	tst.w	r0, #128	; 0x80
    13e0:	bf14      	ite	ne
    13e2:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13e4:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    13e6:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    13e8:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13ea:	6021      	str	r1, [r4, #0]
		b <<= 1;
    13ec:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13ee:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    13f0:	d1f4      	bne.n	13dc <put_byte+0x10>
	}
}
    13f2:	bd30      	pop	{r4, r5, pc}
    13f4:	40022090 	mulmi	r2, r0, r0
    13f8:	400220a0 	andmi	r2, r2, r0, lsr #1

000013fc <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13fc:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    13fe:	b510      	push	{r4, lr}
    1400:	4c03      	ldr	r4, [pc, #12]	; (1410 <cmd_0+0x14>)
    1402:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    1404:	f7ff ffe2 	bl	13cc <put_byte>
    1408:	2300      	movs	r3, #0
    140a:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    140c:	bd10      	pop	{r4, pc}
    140e:	bf00      	nop
    1410:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001414 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1418:	4604      	mov	r4, r0
    141a:	460d      	mov	r5, r1
    141c:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    141e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1464 <wwait+0x50>
    1422:	4e0f      	ldr	r6, [pc, #60]	; (1460 <wwait+0x4c>)
    1424:	f898 3000 	ldrb.w	r3, [r8]
    1428:	b14b      	cbz	r3, 143e <wwait+0x2a>
	put_byte (CMD_RDSR);
    142a:	2005      	movs	r0, #5
    142c:	6037      	str	r7, [r6, #0]
    142e:	f7ff ffcd 	bl	13cc <put_byte>
	r = get_byte ();
    1432:	f7ff ffb1 	bl	1398 <get_byte>
    1436:	2300      	movs	r3, #0
    1438:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    143a:	07c3      	lsls	r3, r0, #31
    143c:	d401      	bmi.n	1442 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    143e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1442:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1446:	429c      	cmp	r4, r3
    1448:	d103      	bne.n	1452 <wwait+0x3e>
			mdelay (1);
    144a:	2001      	movs	r0, #1
    144c:	f7fe fef4 	bl	238 <mdelay>
    1450:	e7e8      	b.n	1424 <wwait+0x10>
			delay (del, st);
    1452:	4621      	mov	r1, r4
    1454:	4628      	mov	r0, r5
    1456:	f7ff fd53 	bl	f00 <delay>
			release;
    145a:	f7ff facd 	bl	9f8 <__pi_release>
    145e:	bf00      	nop
    1460:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1464:	2000001c 	andcs	r0, r0, ip, lsl r0

00001468 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    146a:	4d0c      	ldr	r5, [pc, #48]	; (149c <ready+0x34>)
    146c:	782f      	ldrb	r7, [r5, #0]
    146e:	b147      	cbz	r7, 1482 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1470:	2101      	movs	r1, #1
    1472:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1476:	f7ff ffcd 	bl	1414 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    147a:	2200      	movs	r2, #0
    147c:	4b08      	ldr	r3, [pc, #32]	; (14a0 <ready+0x38>)
    147e:	701a      	strb	r2, [r3, #0]
}
    1480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1482:	2401      	movs	r4, #1
    1484:	4e07      	ldr	r6, [pc, #28]	; (14a4 <ready+0x3c>)
	udelay (1);
    1486:	4620      	mov	r0, r4
    1488:	6034      	str	r4, [r6, #0]
    148a:	f7fe febf 	bl	20c <udelay>
	udelay (1);
    148e:	4620      	mov	r0, r4
    1490:	6037      	str	r7, [r6, #0]
    1492:	f7fe febb 	bl	20c <udelay>
		dopen = DOPEN_TEMP;
    1496:	2302      	movs	r3, #2
    1498:	702b      	strb	r3, [r5, #0]
    149a:	e7ee      	b.n	147a <ready+0x12>
    149c:	2000001c 	andcs	r0, r0, ip, lsl r0
    14a0:	2000001d 	andcs	r0, r0, sp, lsl r0
    14a4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000014a8 <cclose>:
static void cclose () {
    14a8:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    14aa:	4c07      	ldr	r4, [pc, #28]	; (14c8 <cclose+0x20>)
    14ac:	7823      	ldrb	r3, [r4, #0]
    14ae:	2b02      	cmp	r3, #2
    14b0:	d109      	bne.n	14c6 <cclose+0x1e>
		wwait (WNONE, 1);
    14b2:	2101      	movs	r1, #1
    14b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    14b8:	f7ff ffac 	bl	1414 <wwait>
	cmd_0 (CMD_DP);
    14bc:	20b9      	movs	r0, #185	; 0xb9
    14be:	f7ff ff9d 	bl	13fc <cmd_0>
		dopen = 0;
    14c2:	2300      	movs	r3, #0
    14c4:	7023      	strb	r3, [r4, #0]
}
    14c6:	bd10      	pop	{r4, pc}
    14c8:	2000001c 	andcs	r0, r0, ip, lsl r0

000014cc <ee_open>:

// ============================================================================

word ee_open () {
    14cc:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    14ce:	f7ff ffcb 	bl	1468 <ready>
	dopen = DOPEN_PERM;
    14d2:	2201      	movs	r2, #1
    14d4:	4b01      	ldr	r3, [pc, #4]	; (14dc <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    14d6:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    14d8:	701a      	strb	r2, [r3, #0]
}
    14da:	bd08      	pop	{r3, pc}
    14dc:	2000001c 	andcs	r0, r0, ip, lsl r0

000014e0 <ee_close>:

void ee_close () {

	if (dopen) {
    14e0:	4b03      	ldr	r3, [pc, #12]	; (14f0 <ee_close+0x10>)
    14e2:	781a      	ldrb	r2, [r3, #0]
    14e4:	b11a      	cbz	r2, 14ee <ee_close+0xe>
		dopen = DOPEN_TEMP;
    14e6:	2202      	movs	r2, #2
    14e8:	701a      	strb	r2, [r3, #0]
		cclose ();
    14ea:	f7ff bfdd 	b.w	14a8 <cclose>
	}
}
    14ee:	4770      	bx	lr
    14f0:	2000001c 	andcs	r0, r0, ip, lsl r0

000014f4 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    14f4:	b40e      	push	{r1, r2, r3}
    14f6:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    14f8:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    14fa:	4812      	ldr	r0, [pc, #72]	; (1544 <ser_outf+0x50>)
    14fc:	f7ff fd1c 	bl	f38 <running>
    1500:	4606      	mov	r6, r0
    1502:	b120      	cbz	r0, 150e <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1504:	4621      	mov	r1, r4
    1506:	f7ff fce9 	bl	edc <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    150a:	f7ff fa75 	bl	9f8 <__pi_release>
	va_start (ap, m);
    150e:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1510:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1512:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1514:	f000 fa6e 	bl	19f4 <vform>
    1518:	4605      	mov	r5, r0
    151a:	b918      	cbnz	r0, 1524 <ser_outf+0x30>
		umwait (st);
    151c:	4620      	mov	r0, r4
    151e:	f7ff fe67 	bl	11f0 <__pi_waitmem>
    1522:	e7f2      	b.n	150a <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1524:	4601      	mov	r1, r0
    1526:	4807      	ldr	r0, [pc, #28]	; (1544 <ser_outf+0x50>)
    1528:	f7ff fe48 	bl	11bc <__pi_fork>
    152c:	b918      	cbnz	r0, 1536 <ser_outf+0x42>
		ufree (buf);
    152e:	4628      	mov	r0, r5
    1530:	f7ff fda4 	bl	107c <__pi_free>
		npwait (st);
    1534:	e7f2      	b.n	151c <ser_outf+0x28>
		release;
	}

	return 0;
}
    1536:	4630      	mov	r0, r6
    1538:	b003      	add	sp, #12
    153a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    153e:	b003      	add	sp, #12
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	00001619 	andeq	r1, r0, r9, lsl r6

00001548 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    1548:	b40e      	push	{r1, r2, r3}
    154a:	b533      	push	{r0, r1, r4, r5, lr}
    154c:	9905      	ldr	r1, [sp, #20]
    154e:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1550:	b321      	cbz	r1, 159c <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1552:	4d13      	ldr	r5, [pc, #76]	; (15a0 <ser_inf+0x58>)
    1554:	6828      	ldr	r0, [r5, #0]
    1556:	b988      	cbnz	r0, 157c <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1558:	4812      	ldr	r0, [pc, #72]	; (15a4 <ser_inf+0x5c>)
    155a:	f7ff fced 	bl	f38 <running>
    155e:	b948      	cbnz	r0, 1574 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1560:	4601      	mov	r1, r0
    1562:	4810      	ldr	r0, [pc, #64]	; (15a4 <ser_inf+0x5c>)
    1564:	f7ff fe2a 	bl	11bc <__pi_fork>
			if (prcs == 0) {
    1568:	b920      	cbnz	r0, 1574 <ser_inf+0x2c>
				npwait (st);
    156a:	4620      	mov	r0, r4
    156c:	f7ff fe40 	bl	11f0 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1570:	f7ff fa42 	bl	9f8 <__pi_release>
		join (prcs, st);
    1574:	4621      	mov	r1, r4
    1576:	f7ff fcb1 	bl	edc <__pi_join>
    157a:	e7f9      	b.n	1570 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    157c:	aa06      	add	r2, sp, #24
    157e:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1580:	f000 fa60 	bl	1a44 <vscan>
    1584:	4604      	mov	r4, r0

	ufree (__inpline);
    1586:	6828      	ldr	r0, [r5, #0]
    1588:	f7ff fd78 	bl	107c <__pi_free>
	__inpline = NULL;
    158c:	2300      	movs	r3, #0
    158e:	602b      	str	r3, [r5, #0]

	return prcs;
}
    1590:	4620      	mov	r0, r4
    1592:	b002      	add	sp, #8
    1594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1598:	b003      	add	sp, #12
    159a:	4770      	bx	lr
		return 0;
    159c:	460c      	mov	r4, r1
    159e:	e7f7      	b.n	1590 <ser_inf+0x48>
    15a0:	20000034 	andcs	r0, r0, r4, lsr r0
    15a4:	00001689 	andeq	r1, r0, r9, lsl #13

000015a8 <RFCCPE0IntHandler>:
		gbackoff (RADIO_LBT_BACKOFF_RX);
#endif
	}
}

void RFCCPE0IntHandler (void) {
    15a8:	b530      	push	{r4, r5, lr}
//
// This is extremely simple and effective: any interrupt (of the enabled
// kind, of course) unhangs the driver thread which sees what's happened
//
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    15aa:	4a15      	ldr	r2, [pc, #84]	; (1600 <RFCCPE0IntHandler+0x58>)
    15ac:	6813      	ldr	r3, [r2, #0]
    15ae:	2b00      	cmp	r3, #0
	    RFC_DBELL_RFCPEIFG_INTERNAL_ERROR)
		// Internal error
		_BIS (dstate, DSTATE_IRST);
    15b0:	bfbf      	itttt	lt
    15b2:	4914      	ldrlt	r1, [pc, #80]	; (1604 <RFCCPE0IntHandler+0x5c>)
    15b4:	780b      	ldrblt	r3, [r1, #0]
    15b6:	f063 037f 	ornlt	r3, r3, #127	; 0x7f
    15ba:	700b      	strblt	r3, [r1, #0]
  do
  {
    //
    // Clear interrupts that may now be pending
    //
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    15bc:	2100      	movs	r1, #0
    15be:	6011      	str	r1, [r2, #0]
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    15c0:	6813      	ldr	r3, [r2, #0]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d1fb      	bne.n	15be <RFCCPE0IntHandler+0x16>
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    15c6:	4a10      	ldr	r2, [pc, #64]	; (1608 <RFCCPE0IntHandler+0x60>)
	// HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) = 0;
	// Disable
	RFCCpeIntDisable (LWNONE);
	// HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN) = 0;

	p_trigger (drvprcs, qevent);
    15c8:	4c10      	ldr	r4, [pc, #64]	; (160c <RFCCPE0IntHandler+0x64>)
    15ca:	6811      	ldr	r1, [r2, #0]
    15cc:	6013      	str	r3, [r2, #0]
    15ce:	4a10      	ldr	r2, [pc, #64]	; (1610 <RFCCPE0IntHandler+0x68>)
    15d0:	6824      	ldr	r4, [r4, #0]
    15d2:	6811      	ldr	r1, [r2, #0]
    15d4:	4608      	mov	r0, r1
    15d6:	f830 2b10 	ldrh.w	r2, [r0], #16
    15da:	f002 0207 	and.w	r2, r2, #7
    15de:	429a      	cmp	r2, r3
    15e0:	dd08      	ble.n	15f4 <RFCCPE0IntHandler+0x4c>
    15e2:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
    15e6:	3301      	adds	r3, #1
    15e8:	42a5      	cmp	r5, r4
    15ea:	d1f8      	bne.n	15de <RFCCPE0IntHandler+0x36>
    15ec:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    15f0:	889b      	ldrh	r3, [r3, #4]
    15f2:	800b      	strh	r3, [r1, #0]

	RISE_N_SHINE;
    15f4:	4a07      	ldr	r2, [pc, #28]	; (1614 <RFCCPE0IntHandler+0x6c>)
    15f6:	7813      	ldrb	r3, [r2, #0]
    15f8:	f043 0302 	orr.w	r3, r3, #2
    15fc:	7013      	strb	r3, [r2, #0]
}
    15fe:	bd30      	pop	{r4, r5, pc}
    1600:	40041010 	andmi	r1, r4, r0, lsl r0
    1604:	20000024 	andcs	r0, r0, r4, lsr #32
    1608:	40041014 	andmi	r1, r4, r4, lsl r0
    160c:	20000028 	andcs	r0, r0, r8, lsr #32
    1610:	20000020 	andcs	r0, r0, r0, lsr #32
    1614:	2000056c 	andcs	r0, r0, ip, ror #10

00001618 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    1618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    161a:	4b18      	ldr	r3, [pc, #96]	; (167c <__outserial+0x64>)
    161c:	681b      	ldr	r3, [r3, #0]
    161e:	689d      	ldr	r5, [r3, #8]
    1620:	b130      	cbz	r0, 1630 <__outserial+0x18>
    1622:	280a      	cmp	r0, #10
    1624:	d00d      	beq.n	1642 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    1626:	b003      	add	sp, #12
    1628:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    162c:	f7ff bbaa 	b.w	d84 <__pi_badstate>
	ptr = data;
    1630:	4b13      	ldr	r3, [pc, #76]	; (1680 <__outserial+0x68>)
    1632:	4c14      	ldr	r4, [pc, #80]	; (1684 <__outserial+0x6c>)
    1634:	601d      	str	r5, [r3, #0]
	if (*ptr)
    1636:	782b      	ldrb	r3, [r5, #0]
    1638:	b1e3      	cbz	r3, 1674 <__outserial+0x5c>
		len = strlen (ptr);
    163a:	4628      	mov	r0, r5
    163c:	f7ff fc8e 	bl	f5c <__pi_strlen>
    1640:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1642:	4e0f      	ldr	r6, [pc, #60]	; (1680 <__outserial+0x68>)
    1644:	4f0f      	ldr	r7, [pc, #60]	; (1684 <__outserial+0x6c>)
    1646:	883b      	ldrh	r3, [r7, #0]
    1648:	2201      	movs	r2, #1
    164a:	9300      	str	r3, [sp, #0]
    164c:	2100      	movs	r1, #0
    164e:	6833      	ldr	r3, [r6, #0]
    1650:	200a      	movs	r0, #10
    1652:	f7ff fc9d 	bl	f90 <io>
	ptr += quant;
    1656:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    1658:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    165a:	4403      	add	r3, r0
	len -= quant;
    165c:	1a24      	subs	r4, r4, r0
	ptr += quant;
    165e:	6033      	str	r3, [r6, #0]
	len -= quant;
    1660:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    1662:	2c00      	cmp	r4, #0
    1664:	d1ef      	bne.n	1646 <__outserial+0x2e>
		ufree (data);
    1666:	4628      	mov	r0, r5
    1668:	f7ff fd08 	bl	107c <__pi_free>
		finish;
    166c:	4620      	mov	r0, r4
    166e:	f7ff fd29 	bl	10c4 <kill>
    1672:	e7e8      	b.n	1646 <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1674:	786b      	ldrb	r3, [r5, #1]
    1676:	3303      	adds	r3, #3
    1678:	6023      	str	r3, [r4, #0]
    167a:	e7e2      	b.n	1642 <__outserial+0x2a>
    167c:	20000588 	andcs	r0, r0, r8, lsl #11
    1680:	20000030 	andcs	r0, r0, r0, lsr r0
    1684:	2000002c 	andcs	r0, r0, ip, lsr #32

00001688 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    1688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    168a:	4d42      	ldr	r5, [pc, #264]	; (1794 <__inserial+0x10c>)
    168c:	682a      	ldr	r2, [r5, #0]
    168e:	6894      	ldr	r4, [r2, #8]
    1690:	2803      	cmp	r0, #3
    1692:	d87a      	bhi.n	178a <__inserial+0x102>
    1694:	e8df f000 	tbb	[pc, r0]
    1698:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    169c:	4b3e      	ldr	r3, [pc, #248]	; (1798 <__inserial+0x110>)
    169e:	681b      	ldr	r3, [r3, #0]
    16a0:	b113      	cbz	r3, 16a8 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    16a2:	2000      	movs	r0, #0
    16a4:	f7ff fd0e 	bl	10c4 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    16a8:	2040      	movs	r0, #64	; 0x40
    16aa:	f7ff fd33 	bl	1114 <__pi_malloc>
    16ae:	4b3b      	ldr	r3, [pc, #236]	; (179c <__inserial+0x114>)
    16b0:	4604      	mov	r4, r0
    16b2:	6018      	str	r0, [r3, #0]
    16b4:	b918      	cbnz	r0, 16be <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    16b6:	f7ff fd9b 	bl	11f0 <__pi_waitmem>
		release;
    16ba:	f7ff f99d 	bl	9f8 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    16be:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    16c0:	682b      	ldr	r3, [r5, #0]
    16c2:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    16c4:	4b36      	ldr	r3, [pc, #216]	; (17a0 <__inserial+0x118>)
    16c6:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    16c8:	2001      	movs	r0, #1
    16ca:	2200      	movs	r2, #0
    16cc:	4d33      	ldr	r5, [pc, #204]	; (179c <__inserial+0x114>)
    16ce:	9000      	str	r0, [sp, #0]
    16d0:	682b      	ldr	r3, [r5, #0]
    16d2:	4611      	mov	r1, r2
    16d4:	f7ff fc5c 	bl	f90 <io>
	if (ptr == (char*) data) { // new line
    16d8:	682b      	ldr	r3, [r5, #0]
    16da:	42a3      	cmp	r3, r4
    16dc:	d10d      	bne.n	16fa <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    16de:	7823      	ldrb	r3, [r4, #0]
    16e0:	b923      	cbnz	r3, 16ec <__inserial+0x64>
			ptr++;
    16e2:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    16e4:	2002      	movs	r0, #2
			ptr++;
    16e6:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    16e8:	f7ff fbba 	bl	e60 <proceed>
		}

		if (*ptr < 0x20)
    16ec:	682b      	ldr	r3, [r5, #0]
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	2b1f      	cmp	r3, #31
    16f2:	d802      	bhi.n	16fa <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    16f4:	2001      	movs	r0, #1
    16f6:	f7ff fbb3 	bl	e60 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    16fa:	682b      	ldr	r3, [r5, #0]
    16fc:	781a      	ldrb	r2, [r3, #0]
    16fe:	2a0a      	cmp	r2, #10
    1700:	d001      	beq.n	1706 <__inserial+0x7e>
    1702:	2a0d      	cmp	r2, #13
    1704:	d105      	bne.n	1712 <__inserial+0x8a>
		*ptr = '\0';
    1706:	2000      	movs	r0, #0
    1708:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    170a:	4b23      	ldr	r3, [pc, #140]	; (1798 <__inserial+0x110>)
    170c:	601c      	str	r4, [r3, #0]
		finish;
    170e:	f7ff fcd9 	bl	10c4 <kill>
	}

	if (len) {
    1712:	4923      	ldr	r1, [pc, #140]	; (17a0 <__inserial+0x118>)
    1714:	680b      	ldr	r3, [r1, #0]
    1716:	b123      	cbz	r3, 1722 <__inserial+0x9a>
		ptr++;
    1718:	682a      	ldr	r2, [r5, #0]
		len--;
    171a:	3b01      	subs	r3, #1
		ptr++;
    171c:	3201      	adds	r2, #1
    171e:	602a      	str	r2, [r5, #0]
		len--;
    1720:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    1722:	2001      	movs	r0, #1
    1724:	f7ff fb9c 	bl	e60 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    1728:	2301      	movs	r3, #1
    172a:	2200      	movs	r2, #0
    172c:	4d1b      	ldr	r5, [pc, #108]	; (179c <__inserial+0x114>)
    172e:	9300      	str	r3, [sp, #0]
    1730:	4611      	mov	r1, r2
    1732:	682b      	ldr	r3, [r5, #0]
    1734:	2002      	movs	r0, #2
    1736:	f7ff fc2b 	bl	f90 <io>
	len -= 2;
    173a:	4819      	ldr	r0, [pc, #100]	; (17a0 <__inserial+0x118>)
    173c:	6803      	ldr	r3, [r0, #0]
    173e:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    1740:	682b      	ldr	r3, [r5, #0]
    1742:	f813 1b01 	ldrb.w	r1, [r3], #1
    1746:	3101      	adds	r1, #1
		len = *ptr + 1;
    1748:	4291      	cmp	r1, r2
    174a:	bfd4      	ite	le
    174c:	6001      	strle	r1, [r0, #0]
    174e:	6002      	strgt	r2, [r0, #0]
	ptr++;
    1750:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    1752:	2200      	movs	r2, #0
    1754:	4f12      	ldr	r7, [pc, #72]	; (17a0 <__inserial+0x118>)
    1756:	4d11      	ldr	r5, [pc, #68]	; (179c <__inserial+0x114>)
    1758:	883b      	ldrh	r3, [r7, #0]
    175a:	4611      	mov	r1, r2
    175c:	9300      	str	r3, [sp, #0]
    175e:	682b      	ldr	r3, [r5, #0]
    1760:	2003      	movs	r0, #3
    1762:	f7ff fc15 	bl	f90 <io>
	len -= quant;
    1766:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1768:	4606      	mov	r6, r0
	len -= quant;
    176a:	1a18      	subs	r0, r3, r0
    176c:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    176e:	b918      	cbnz	r0, 1778 <__inserial+0xf0>
		__inpline = (char*)data;
    1770:	4b09      	ldr	r3, [pc, #36]	; (1798 <__inserial+0x110>)
    1772:	601c      	str	r4, [r3, #0]
		finish;
    1774:	f7ff fca6 	bl	10c4 <kill>
	}
	ptr += quant;
    1778:	6828      	ldr	r0, [r5, #0]
    177a:	4430      	add	r0, r6
    177c:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    177e:	2003      	movs	r0, #3

endstrand
    1780:	b003      	add	sp, #12
    1782:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    1786:	f7ff bb6b 	b.w	e60 <proceed>
endstrand
    178a:	b003      	add	sp, #12
    178c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1790:	f7ff baf8 	b.w	d84 <__pi_badstate>
    1794:	20000588 	andcs	r0, r0, r8, lsl #11
    1798:	20000034 	andcs	r0, r0, r4, lsr r0
    179c:	2000003c 	andcs	r0, r0, ip, lsr r0
    17a0:	20000038 	andcs	r0, r0, r8, lsr r0

000017a4 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    17a4:	f8dc 2000 	ldr.w	r2, [ip]
    17a8:	b132      	cbz	r2, 17b8 <outc.5724+0x14>
    17aa:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    17ae:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    17b2:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    17b4:	bf88      	it	hi
    17b6:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    17b8:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    17bc:	3301      	adds	r3, #1
    17be:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    17c2:	4770      	bx	lr

000017c4 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    17c8:	461c      	mov	r4, r3
    17ca:	ab0c      	add	r3, sp, #48	; 0x30
    17cc:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    17ce:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    17d0:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    17d2:	4f86      	ldr	r7, [pc, #536]	; (19ec <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17d4:	9001      	str	r0, [sp, #4]
    17d6:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    17da:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    17de:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    17e2:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    17e6:	d118      	bne.n	181a <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    17e8:	f892 9001 	ldrb.w	r9, [r2, #1]
    17ec:	1c95      	adds	r5, r2, #2
				outc ('\\');
    17ee:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    17f2:	f1b9 0f00 	cmp.w	r9, #0
    17f6:	d10b      	bne.n	1810 <__pi_vfparse+0x4c>
				outc ('\\');
    17f8:	205c      	movs	r0, #92	; 0x5c
    17fa:	f7ff ffd3 	bl	17a4 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    17fe:	4648      	mov	r0, r9
    1800:	f10d 0c04 	add.w	ip, sp, #4
    1804:	f7ff ffce 	bl	17a4 <outc.5724>
			if (c == '\0')
    1808:	f1b9 0f00 	cmp.w	r9, #0
    180c:	d103      	bne.n	1816 <__pi_vfparse+0x52>
    180e:	e027      	b.n	1860 <__pi_vfparse+0x9c>
			outc (c);
    1810:	4648      	mov	r0, r9
				outc (val);
    1812:	f7ff ffc7 	bl	17a4 <outc.5724>
				val = (word) va_arg (ap, aword);
    1816:	462a      	mov	r2, r5
    1818:	e7e1      	b.n	17de <__pi_vfparse+0x1a>
		if (c == '%') {
    181a:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    181e:	f040 80e2 	bne.w	19e6 <__pi_vfparse+0x222>
			c = *fm++;
    1822:	f892 8001 	ldrb.w	r8, [r2, #1]
    1826:	1c95      	adds	r5, r2, #2
			switch (c) {
    1828:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    182c:	f000 80cd 	beq.w	19ca <__pi_vfparse+0x206>
    1830:	d81b      	bhi.n	186a <__pi_vfparse+0xa6>
    1832:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    1836:	d033      	beq.n	18a0 <__pi_vfparse+0xdc>
    1838:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    183c:	d067      	beq.n	190e <__pi_vfparse+0x14a>
    183e:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    1842:	f000 80bc 	beq.w	19be <__pi_vfparse+0x1fa>
				outc ('%');
    1846:	2025      	movs	r0, #37	; 0x25
    1848:	f10d 0c04 	add.w	ip, sp, #4
    184c:	f7ff ffaa 	bl	17a4 <outc.5724>
				outc (c);
    1850:	4640      	mov	r0, r8
    1852:	f10d 0c04 	add.w	ip, sp, #4
    1856:	f7ff ffa5 	bl	17a4 <outc.5724>
				if (c == '\0')
    185a:	f1b8 0f00 	cmp.w	r8, #0
    185e:	d1da      	bne.n	1816 <__pi_vfparse+0x52>
Ret:
				return d;
    1860:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    1864:	b004      	add	sp, #16
    1866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    186a:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    186e:	d017      	beq.n	18a0 <__pi_vfparse+0xdc>
    1870:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    1874:	d1e7      	bne.n	1846 <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    1876:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    187a:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    187e:	fa1f f983 	uxth.w	r9, r3
    1882:	fa49 f308 	asr.w	r3, r9, r8
    1886:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    188a:	5cf8      	ldrb	r0, [r7, r3]
    188c:	f10d 0c04 	add.w	ip, sp, #4
    1890:	f7ff ff88 	bl	17a4 <outc.5724>
					if (i == 0)
    1894:	f1b8 0f00 	cmp.w	r8, #0
    1898:	d0bd      	beq.n	1816 <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    189a:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    189e:	e7f0      	b.n	1882 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    18a0:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    18a4:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    18a8:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    18ac:	d10a      	bne.n	18c4 <__pi_vfparse+0x100>
    18ae:	041b      	lsls	r3, r3, #16
    18b0:	d508      	bpl.n	18c4 <__pi_vfparse+0x100>
					outc ('-');
    18b2:	202d      	movs	r0, #45	; 0x2d
    18b4:	f10d 0c04 	add.w	ip, sp, #4
    18b8:	f7ff ff74 	bl	17a4 <outc.5724>
					val = (~val) + 1;
    18bc:	f1c9 0900 	rsb	r9, r9, #0
    18c0:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    18c4:	2305      	movs	r3, #5
				enci (10000);
    18c6:	f242 7810 	movw	r8, #10000	; 0x2710
    18ca:	fbb9 f0f8 	udiv	r0, r9, r8
    18ce:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    18d2:	d103      	bne.n	18dc <__pi_vfparse+0x118>
    18d4:	3b01      	subs	r3, #1
    18d6:	d117      	bne.n	1908 <__pi_vfparse+0x144>
    18d8:	f04f 0801 	mov.w	r8, #1
    18dc:	fa1f fa80 	uxth.w	sl, r0
    18e0:	f10d 0c04 	add.w	ip, sp, #4
    18e4:	3030      	adds	r0, #48	; 0x30
    18e6:	f7ff ff5d 	bl	17a4 <outc.5724>
    18ea:	fbb8 f3f6 	udiv	r3, r8, r6
    18ee:	fb08 991a 	mls	r9, r8, sl, r9
    18f2:	f1b8 0f09 	cmp.w	r8, #9
    18f6:	fa1f f989 	uxth.w	r9, r9
    18fa:	b29b      	uxth	r3, r3
    18fc:	d98b      	bls.n	1816 <__pi_vfparse+0x52>
    18fe:	fbb9 f0f3 	udiv	r0, r9, r3
    1902:	4698      	mov	r8, r3
    1904:	b2c0      	uxtb	r0, r0
    1906:	e7e9      	b.n	18dc <__pi_vfparse+0x118>
    1908:	fbb8 f8f6 	udiv	r8, r8, r6
    190c:	e7dd      	b.n	18ca <__pi_vfparse+0x106>
				c = *fm;
    190e:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    1910:	2b64      	cmp	r3, #100	; 0x64
    1912:	d001      	beq.n	1918 <__pi_vfparse+0x154>
    1914:	2b75      	cmp	r3, #117	; 0x75
    1916:	d132      	bne.n	197e <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    1918:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    191a:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    191e:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    1922:	d109      	bne.n	1938 <__pi_vfparse+0x174>
    1924:	f1ba 0f00 	cmp.w	sl, #0
    1928:	da06      	bge.n	1938 <__pi_vfparse+0x174>
						outc ('-');
    192a:	202d      	movs	r0, #45	; 0x2d
    192c:	f10d 0c04 	add.w	ip, sp, #4
    1930:	f7ff ff38 	bl	17a4 <outc.5724>
						val = (~val) + 1;
    1934:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    1938:	230a      	movs	r3, #10
					enci (1000000000UL);
    193a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19f0 <__pi_vfparse+0x22c>
    193e:	fbba f9f8 	udiv	r9, sl, r8
    1942:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    1946:	d103      	bne.n	1950 <__pi_vfparse+0x18c>
    1948:	3b01      	subs	r3, #1
    194a:	d115      	bne.n	1978 <__pi_vfparse+0x1b4>
    194c:	f04f 0801 	mov.w	r8, #1
    1950:	f10d 0c04 	add.w	ip, sp, #4
    1954:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1958:	f7ff ff24 	bl	17a4 <outc.5724>
    195c:	f1b8 0f09 	cmp.w	r8, #9
    1960:	fbb8 f3f6 	udiv	r3, r8, r6
    1964:	fb08 aa19 	mls	sl, r8, r9, sl
    1968:	f67f af55 	bls.w	1816 <__pi_vfparse+0x52>
    196c:	fbba f9f3 	udiv	r9, sl, r3
    1970:	4698      	mov	r8, r3
    1972:	fa5f f989 	uxtb.w	r9, r9
    1976:	e7eb      	b.n	1950 <__pi_vfparse+0x18c>
    1978:	fbb8 f8f6 	udiv	r8, r8, r6
    197c:	e7df      	b.n	193e <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    197e:	2b78      	cmp	r3, #120	; 0x78
    1980:	d114      	bne.n	19ac <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1982:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1986:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    198a:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    198c:	fa29 f308 	lsr.w	r3, r9, r8
    1990:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1994:	5cf8      	ldrb	r0, [r7, r3]
    1996:	f10d 0c04 	add.w	ip, sp, #4
    199a:	f7ff ff03 	bl	17a4 <outc.5724>
						if (i == 0)
    199e:	f1b8 0f00 	cmp.w	r8, #0
    19a2:	f43f af38 	beq.w	1816 <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    19a6:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    19aa:	e7ef      	b.n	198c <__pi_vfparse+0x1c8>
					outc ('%');
    19ac:	4648      	mov	r0, r9
    19ae:	f10d 0c04 	add.w	ip, sp, #4
    19b2:	f7ff fef7 	bl	17a4 <outc.5724>
					outc ('l');
    19b6:	4640      	mov	r0, r8
    19b8:	f10d 0c04 	add.w	ip, sp, #4
    19bc:	e729      	b.n	1812 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    19be:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    19c2:	f10d 0c04 	add.w	ip, sp, #4
    19c6:	b280      	uxth	r0, r0
    19c8:	e723      	b.n	1812 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    19ca:	f854 3b04 	ldr.w	r3, [r4], #4
    19ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    19d2:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    19d6:	2800      	cmp	r0, #0
    19d8:	f43f af1d 	beq.w	1816 <__pi_vfparse+0x52>
					outc (*st);
    19dc:	f10d 0c04 	add.w	ip, sp, #4
    19e0:	f7ff fee0 	bl	17a4 <outc.5724>
					st++;
    19e4:	e7f5      	b.n	19d2 <__pi_vfparse+0x20e>
		c = *fm++;
    19e6:	1c55      	adds	r5, r2, #1
    19e8:	e709      	b.n	17fe <__pi_vfparse+0x3a>
    19ea:	bf00      	nop
    19ec:	00002c20 	andeq	r2, r0, r0, lsr #24
    19f0:	3b9aca00 	blcc	fe6b41f8 <_estack+0xde6af1f8>

000019f4 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    19f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19f8:	460e      	mov	r6, r1
    19fa:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    19fc:	4604      	mov	r4, r0
    19fe:	b140      	cbz	r0, 1a12 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1a00:	4613      	mov	r3, r2
    1a02:	460a      	mov	r2, r1
    1a04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1a08:	f7ff fedc 	bl	17c4 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1a0c:	4620      	mov	r0, r4
    1a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1a12:	4608      	mov	r0, r1
    1a14:	f7ff faa2 	bl	f5c <__pi_strlen>
    1a18:	f100 0511 	add.w	r5, r0, #17
    1a1c:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1a1e:	4628      	mov	r0, r5
    1a20:	f7ff fb78 	bl	1114 <__pi_malloc>
    1a24:	4604      	mov	r4, r0
    1a26:	2800      	cmp	r0, #0
    1a28:	d0f0      	beq.n	1a0c <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1a2a:	463b      	mov	r3, r7
    1a2c:	4632      	mov	r2, r6
    1a2e:	4629      	mov	r1, r5
    1a30:	f7ff fec8 	bl	17c4 <__pi_vfparse>
    1a34:	4285      	cmp	r5, r0
    1a36:	4680      	mov	r8, r0
    1a38:	d2e8      	bcs.n	1a0c <vform+0x18>
		ufree (res);
    1a3a:	4620      	mov	r0, r4
    1a3c:	f7ff fb1e 	bl	107c <__pi_free>
		goto Again;
    1a40:	4645      	mov	r5, r8
    1a42:	e7ec      	b.n	1a1e <vform+0x2a>

00001a44 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1a44:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1a46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1a4a:	2800      	cmp	r0, #0
    1a4c:	f000 81b5 	beq.w	1dba <vscan+0x376>
    1a50:	2900      	cmp	r1, #0
    1a52:	f000 81b4 	beq.w	1dbe <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1a56:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1a58:	270a      	movs	r7, #10
    1a5a:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1a5c:	f8df c370 	ldr.w	ip, [pc, #880]	; 1dd0 <vscan+0x38c>
    1a60:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1a62:	f811 0b01 	ldrb.w	r0, [r1], #1
    1a66:	b170      	cbz	r0, 1a86 <vscan+0x42>
		if (*fmt++ != '%')
    1a68:	2825      	cmp	r0, #37	; 0x25
    1a6a:	d1f9      	bne.n	1a60 <vscan+0x1c>
		switch (*fmt++) {
    1a6c:	7870      	ldrb	r0, [r6, #1]
    1a6e:	1cb1      	adds	r1, r6, #2
    1a70:	286c      	cmp	r0, #108	; 0x6c
    1a72:	f000 80e1 	beq.w	1c38 <vscan+0x1f4>
    1a76:	d809      	bhi.n	1a8c <vscan+0x48>
    1a78:	2863      	cmp	r0, #99	; 0x63
    1a7a:	f000 8184 	beq.w	1d86 <vscan+0x342>
    1a7e:	2864      	cmp	r0, #100	; 0x64
    1a80:	d043      	beq.n	1b0a <vscan+0xc6>
    1a82:	2800      	cmp	r0, #0
    1a84:	d1ec      	bne.n	1a60 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1a86:	4620      	mov	r0, r4
    1a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1a8c:	2875      	cmp	r0, #117	; 0x75
    1a8e:	d074      	beq.n	1b7a <vscan+0x136>
    1a90:	2878      	cmp	r0, #120	; 0x78
    1a92:	f000 8098 	beq.w	1bc6 <vscan+0x182>
    1a96:	2873      	cmp	r0, #115	; 0x73
    1a98:	d1e2      	bne.n	1a60 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1a9a:	7818      	ldrb	r0, [r3, #0]
    1a9c:	461e      	mov	r6, r3
    1a9e:	f1a0 0e09 	sub.w	lr, r0, #9
    1aa2:	fa5f fe8e 	uxtb.w	lr, lr
    1aa6:	f1be 0f17 	cmp.w	lr, #23
    1aaa:	4698      	mov	r8, r3
    1aac:	f103 0301 	add.w	r3, r3, #1
    1ab0:	f240 8173 	bls.w	1d9a <vscan+0x356>
			if (*buf == '\0')
    1ab4:	2800      	cmp	r0, #0
    1ab6:	d0e6      	beq.n	1a86 <vscan+0x42>
			if (*buf != ',') {
    1ab8:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1aba:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1abe:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1ac2:	d00e      	beq.n	1ae2 <vscan+0x9e>
    1ac4:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1ac6:	f818 3b01 	ldrb.w	r3, [r8], #1
    1aca:	f1a3 0009 	sub.w	r0, r3, #9
    1ace:	2801      	cmp	r0, #1
    1ad0:	d907      	bls.n	1ae2 <vscan+0x9e>
    1ad2:	2b0d      	cmp	r3, #13
    1ad4:	d005      	beq.n	1ae2 <vscan+0x9e>
    1ad6:	2b2c      	cmp	r3, #44	; 0x2c
    1ad8:	d003      	beq.n	1ae2 <vscan+0x9e>
    1ada:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1ade:	f040 8163 	bne.w	1da8 <vscan+0x364>
			while (isspace (*buf)) buf++;
    1ae2:	f896 8000 	ldrb.w	r8, [r6]
    1ae6:	4633      	mov	r3, r6
    1ae8:	f1a8 0009 	sub.w	r0, r8, #9
    1aec:	b2c0      	uxtb	r0, r0
    1aee:	2817      	cmp	r0, #23
    1af0:	f106 0601 	add.w	r6, r6, #1
    1af4:	f240 815b 	bls.w	1dae <vscan+0x36a>
			if (*buf == ',') buf++;
    1af8:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1afc:	bf08      	it	eq
    1afe:	4633      	moveq	r3, r6
			*sap = '\0';
    1b00:	f88e 5000 	strb.w	r5, [lr]
			break;
    1b04:	e7ac      	b.n	1a60 <vscan+0x1c>
		    case 'd': scani (word); break;
    1b06:	2e00      	cmp	r6, #0
    1b08:	d0bd      	beq.n	1a86 <vscan+0x42>
    1b0a:	469e      	mov	lr, r3
    1b0c:	f813 6b01 	ldrb.w	r6, [r3], #1
    1b10:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1b14:	2809      	cmp	r0, #9
    1b16:	d923      	bls.n	1b60 <vscan+0x11c>
    1b18:	2e2d      	cmp	r6, #45	; 0x2d
    1b1a:	d001      	beq.n	1b20 <vscan+0xdc>
    1b1c:	2e2b      	cmp	r6, #43	; 0x2b
    1b1e:	d1f2      	bne.n	1b06 <vscan+0xc2>
    1b20:	7818      	ldrb	r0, [r3, #0]
    1b22:	469e      	mov	lr, r3
    1b24:	3830      	subs	r0, #48	; 0x30
    1b26:	2809      	cmp	r0, #9
    1b28:	d8ef      	bhi.n	1b0a <vscan+0xc6>
    1b2a:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1b2e:	f1d9 0800 	rsbs	r8, r9, #0
    1b32:	eb48 0809 	adc.w	r8, r8, r9
    1b36:	f852 6b04 	ldr.w	r6, [r2], #4
    1b3a:	3401      	adds	r4, #1
    1b3c:	8035      	strh	r5, [r6, #0]
    1b3e:	f89e 0000 	ldrb.w	r0, [lr]
    1b42:	4673      	mov	r3, lr
    1b44:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1b48:	f1b9 0f09 	cmp.w	r9, #9
    1b4c:	f10e 0e01 	add.w	lr, lr, #1
    1b50:	d909      	bls.n	1b66 <vscan+0x122>
    1b52:	f1b8 0f00 	cmp.w	r8, #0
    1b56:	d183      	bne.n	1a60 <vscan+0x1c>
    1b58:	8830      	ldrh	r0, [r6, #0]
    1b5a:	4240      	negs	r0, r0
    1b5c:	8030      	strh	r0, [r6, #0]
    1b5e:	e77f      	b.n	1a60 <vscan+0x1c>
    1b60:	f04f 0800 	mov.w	r8, #0
    1b64:	e7e7      	b.n	1b36 <vscan+0xf2>
    1b66:	8833      	ldrh	r3, [r6, #0]
    1b68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1b6c:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1b70:	3030      	adds	r0, #48	; 0x30
    1b72:	8030      	strh	r0, [r6, #0]
    1b74:	e7e3      	b.n	1b3e <vscan+0xfa>
		    case 'u': scanu (word); break;
    1b76:	2800      	cmp	r0, #0
    1b78:	d085      	beq.n	1a86 <vscan+0x42>
    1b7a:	7818      	ldrb	r0, [r3, #0]
    1b7c:	461e      	mov	r6, r3
    1b7e:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1b82:	f1be 0f09 	cmp.w	lr, #9
    1b86:	f103 0301 	add.w	r3, r3, #1
    1b8a:	d8f4      	bhi.n	1b76 <vscan+0x132>
    1b8c:	f852 eb04 	ldr.w	lr, [r2], #4
    1b90:	3401      	adds	r4, #1
    1b92:	f8ae 5000 	strh.w	r5, [lr]
    1b96:	7830      	ldrb	r0, [r6, #0]
    1b98:	4633      	mov	r3, r6
    1b9a:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1b9e:	f1b8 0f09 	cmp.w	r8, #9
    1ba2:	f106 0601 	add.w	r6, r6, #1
    1ba6:	f63f af5b 	bhi.w	1a60 <vscan+0x1c>
    1baa:	f8be 3000 	ldrh.w	r3, [lr]
    1bae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1bb2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1bb6:	3830      	subs	r0, #48	; 0x30
    1bb8:	f8ae 0000 	strh.w	r0, [lr]
    1bbc:	e7eb      	b.n	1b96 <vscan+0x152>
		    case 'x': scanx (word); break;
    1bbe:	f1be 0f00 	cmp.w	lr, #0
    1bc2:	f43f af60 	beq.w	1a86 <vscan+0x42>
    1bc6:	f893 e000 	ldrb.w	lr, [r3]
    1bca:	461e      	mov	r6, r3
    1bcc:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1bd0:	2809      	cmp	r0, #9
    1bd2:	f103 0301 	add.w	r3, r3, #1
    1bd6:	d904      	bls.n	1be2 <vscan+0x19e>
    1bd8:	f02e 0020 	bic.w	r0, lr, #32
    1bdc:	3841      	subs	r0, #65	; 0x41
    1bde:	2805      	cmp	r0, #5
    1be0:	d8ed      	bhi.n	1bbe <vscan+0x17a>
    1be2:	f852 eb04 	ldr.w	lr, [r2], #4
    1be6:	3401      	adds	r4, #1
    1be8:	f8ae 5000 	strh.w	r5, [lr]
    1bec:	f106 0805 	add.w	r8, r6, #5
    1bf0:	f896 9000 	ldrb.w	r9, [r6]
    1bf4:	4633      	mov	r3, r6
    1bf6:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1bfa:	b2c0      	uxtb	r0, r0
    1bfc:	2809      	cmp	r0, #9
    1bfe:	f106 0601 	add.w	r6, r6, #1
    1c02:	f240 80de 	bls.w	1dc2 <vscan+0x37e>
    1c06:	f029 0020 	bic.w	r0, r9, #32
    1c0a:	3841      	subs	r0, #65	; 0x41
    1c0c:	2805      	cmp	r0, #5
    1c0e:	f63f af27 	bhi.w	1a60 <vscan+0x1c>
    1c12:	4546      	cmp	r6, r8
    1c14:	f43f af24 	beq.w	1a60 <vscan+0x1c>
    1c18:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1c1c:	2b05      	cmp	r3, #5
    1c1e:	bf94      	ite	ls
    1c20:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1c24:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1c28:	b2c0      	uxtb	r0, r0
    1c2a:	f8be 3000 	ldrh.w	r3, [lr]
    1c2e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1c32:	f8ae 0000 	strh.w	r0, [lr]
    1c36:	e7db      	b.n	1bf0 <vscan+0x1ac>
			switch (*fmt++) {
    1c38:	78b0      	ldrb	r0, [r6, #2]
    1c3a:	1cf1      	adds	r1, r6, #3
    1c3c:	2875      	cmp	r0, #117	; 0x75
    1c3e:	d07d      	beq.n	1d3c <vscan+0x2f8>
    1c40:	d831      	bhi.n	1ca6 <vscan+0x262>
    1c42:	2800      	cmp	r0, #0
    1c44:	f43f af1f 	beq.w	1a86 <vscan+0x42>
    1c48:	2864      	cmp	r0, #100	; 0x64
    1c4a:	f47f af09 	bne.w	1a60 <vscan+0x1c>
    1c4e:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1c50:	f813 6b01 	ldrb.w	r6, [r3], #1
    1c54:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1c58:	2809      	cmp	r0, #9
    1c5a:	d962      	bls.n	1d22 <vscan+0x2de>
    1c5c:	2e2d      	cmp	r6, #45	; 0x2d
    1c5e:	d001      	beq.n	1c64 <vscan+0x220>
    1c60:	2e2b      	cmp	r6, #43	; 0x2b
    1c62:	d15b      	bne.n	1d1c <vscan+0x2d8>
    1c64:	7818      	ldrb	r0, [r3, #0]
    1c66:	4698      	mov	r8, r3
    1c68:	3830      	subs	r0, #48	; 0x30
    1c6a:	2809      	cmp	r0, #9
    1c6c:	d8ef      	bhi.n	1c4e <vscan+0x20a>
    1c6e:	3e2d      	subs	r6, #45	; 0x2d
    1c70:	4270      	negs	r0, r6
    1c72:	4170      	adcs	r0, r6
    1c74:	f852 eb04 	ldr.w	lr, [r2], #4
    1c78:	3401      	adds	r4, #1
    1c7a:	f8ce 5000 	str.w	r5, [lr]
    1c7e:	f898 6000 	ldrb.w	r6, [r8]
    1c82:	4643      	mov	r3, r8
    1c84:	3e30      	subs	r6, #48	; 0x30
    1c86:	fa5f f986 	uxtb.w	r9, r6
    1c8a:	f1b9 0f09 	cmp.w	r9, #9
    1c8e:	f108 0801 	add.w	r8, r8, #1
    1c92:	d948      	bls.n	1d26 <vscan+0x2e2>
    1c94:	2800      	cmp	r0, #0
    1c96:	f47f aee3 	bne.w	1a60 <vscan+0x1c>
    1c9a:	f8de 0000 	ldr.w	r0, [lr]
    1c9e:	4240      	negs	r0, r0
    1ca0:	f8ce 0000 	str.w	r0, [lr]
    1ca4:	e6dc      	b.n	1a60 <vscan+0x1c>
    1ca6:	2878      	cmp	r0, #120	; 0x78
    1ca8:	f47f aeda 	bne.w	1a60 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1cac:	f893 e000 	ldrb.w	lr, [r3]
    1cb0:	461e      	mov	r6, r3
    1cb2:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1cb6:	2809      	cmp	r0, #9
    1cb8:	f103 0301 	add.w	r3, r3, #1
    1cbc:	d904      	bls.n	1cc8 <vscan+0x284>
    1cbe:	f02e 0020 	bic.w	r0, lr, #32
    1cc2:	3841      	subs	r0, #65	; 0x41
    1cc4:	2805      	cmp	r0, #5
    1cc6:	d85a      	bhi.n	1d7e <vscan+0x33a>
    1cc8:	f852 eb04 	ldr.w	lr, [r2], #4
    1ccc:	3401      	adds	r4, #1
    1cce:	f8ce 5000 	str.w	r5, [lr]
    1cd2:	f106 0809 	add.w	r8, r6, #9
    1cd6:	f896 9000 	ldrb.w	r9, [r6]
    1cda:	4633      	mov	r3, r6
    1cdc:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1ce0:	b2c0      	uxtb	r0, r0
    1ce2:	2809      	cmp	r0, #9
    1ce4:	f106 0601 	add.w	r6, r6, #1
    1ce8:	d96f      	bls.n	1dca <vscan+0x386>
    1cea:	f029 0020 	bic.w	r0, r9, #32
    1cee:	3841      	subs	r0, #65	; 0x41
    1cf0:	2805      	cmp	r0, #5
    1cf2:	f63f aeb5 	bhi.w	1a60 <vscan+0x1c>
    1cf6:	4546      	cmp	r6, r8
    1cf8:	f43f aeb2 	beq.w	1a60 <vscan+0x1c>
    1cfc:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1d00:	2b05      	cmp	r3, #5
    1d02:	bf94      	ite	ls
    1d04:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1d08:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1d0c:	b2c0      	uxtb	r0, r0
    1d0e:	f8de 3000 	ldr.w	r3, [lr]
    1d12:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1d16:	f8ce 0000 	str.w	r0, [lr]
    1d1a:	e7dc      	b.n	1cd6 <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1d1c:	2e00      	cmp	r6, #0
    1d1e:	d196      	bne.n	1c4e <vscan+0x20a>
    1d20:	e6b1      	b.n	1a86 <vscan+0x42>
    1d22:	2000      	movs	r0, #0
    1d24:	e7a6      	b.n	1c74 <vscan+0x230>
    1d26:	f8de 3000 	ldr.w	r3, [lr]
    1d2a:	b2b6      	uxth	r6, r6
    1d2c:	437b      	muls	r3, r7
    1d2e:	1b9e      	subs	r6, r3, r6
    1d30:	f8ce 6000 	str.w	r6, [lr]
    1d34:	e7a3      	b.n	1c7e <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1d36:	2800      	cmp	r0, #0
    1d38:	f43f aea5 	beq.w	1a86 <vscan+0x42>
    1d3c:	7818      	ldrb	r0, [r3, #0]
    1d3e:	461e      	mov	r6, r3
    1d40:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1d44:	f1be 0f09 	cmp.w	lr, #9
    1d48:	f103 0301 	add.w	r3, r3, #1
    1d4c:	d8f3      	bhi.n	1d36 <vscan+0x2f2>
    1d4e:	f852 eb04 	ldr.w	lr, [r2], #4
    1d52:	3401      	adds	r4, #1
    1d54:	f8ce 5000 	str.w	r5, [lr]
    1d58:	7830      	ldrb	r0, [r6, #0]
    1d5a:	4633      	mov	r3, r6
    1d5c:	3830      	subs	r0, #48	; 0x30
    1d5e:	fa5f f880 	uxtb.w	r8, r0
    1d62:	f1b8 0f09 	cmp.w	r8, #9
    1d66:	f106 0601 	add.w	r6, r6, #1
    1d6a:	f63f ae79 	bhi.w	1a60 <vscan+0x1c>
    1d6e:	f8de 3000 	ldr.w	r3, [lr]
    1d72:	b280      	uxth	r0, r0
    1d74:	fb07 0003 	mla	r0, r7, r3, r0
    1d78:	f8ce 0000 	str.w	r0, [lr]
    1d7c:	e7ec      	b.n	1d58 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    1d7e:	f1be 0f00 	cmp.w	lr, #0
    1d82:	d193      	bne.n	1cac <vscan+0x268>
    1d84:	e67f      	b.n	1a86 <vscan+0x42>
			if ((c = *buf++) == '\0')
    1d86:	f813 0b01 	ldrb.w	r0, [r3], #1
    1d8a:	2800      	cmp	r0, #0
    1d8c:	f43f ae7b 	beq.w	1a86 <vscan+0x42>
			sap = va_arg (ap, char*);
    1d90:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    1d94:	3401      	adds	r4, #1
			*sap = c;
    1d96:	7030      	strb	r0, [r6, #0]
			break;
    1d98:	e662      	b.n	1a60 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1d9a:	fa2c fe0e 	lsr.w	lr, ip, lr
    1d9e:	f01e 0f01 	tst.w	lr, #1
    1da2:	f47f ae7a 	bne.w	1a9a <vscan+0x56>
    1da6:	e687      	b.n	1ab8 <vscan+0x74>
						*sap++ = *buf++;
    1da8:	f80e 3b01 	strb.w	r3, [lr], #1
    1dac:	e68a      	b.n	1ac4 <vscan+0x80>
			while (isspace (*buf)) buf++;
    1dae:	fa2c f000 	lsr.w	r0, ip, r0
    1db2:	07c0      	lsls	r0, r0, #31
    1db4:	f53f ae95 	bmi.w	1ae2 <vscan+0x9e>
    1db8:	e6a2      	b.n	1b00 <vscan+0xbc>
		return 0;
    1dba:	4604      	mov	r4, r0
    1dbc:	e663      	b.n	1a86 <vscan+0x42>
    1dbe:	460c      	mov	r4, r1
    1dc0:	e661      	b.n	1a86 <vscan+0x42>
		    case 'x': scanx (word); break;
    1dc2:	4546      	cmp	r6, r8
    1dc4:	f47f af31 	bne.w	1c2a <vscan+0x1e6>
    1dc8:	e64a      	b.n	1a60 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1dca:	4546      	cmp	r6, r8
    1dcc:	d19f      	bne.n	1d0e <vscan+0x2ca>
    1dce:	e647      	b.n	1a60 <vscan+0x1c>
    1dd0:	00800013 	addeq	r0, r0, r3, lsl r0

00001dd4 <NOROM_AONBatMonTemperatureGetDegC>:
    1dd4:	4b08      	ldr	r3, [pc, #32]	; (1df8 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    1dd6:	6818      	ldr	r0, [r3, #0]
    1dd8:	4b08      	ldr	r3, [pc, #32]	; (1dfc <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    1dda:	7819      	ldrb	r1, [r3, #0]
    1ddc:	4b08      	ldr	r3, [pc, #32]	; (1e00 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    1dde:	681a      	ldr	r2, [r3, #0]
    1de0:	f340 0310 	sbfx	r3, r0, #0, #17
    1de4:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    1de8:	b248      	sxtb	r0, r1
    1dea:	4350      	muls	r0, r2
    1dec:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    1df0:	3080      	adds	r0, #128	; 0x80
    1df2:	1200      	asrs	r0, r0, #8
    1df4:	4770      	bx	lr
    1df6:	bf00      	nop
    1df8:	40095030 	andmi	r5, r9, r0, lsr r0
    1dfc:	5000130c 	andpl	r1, r0, ip, lsl #6
    1e00:	40095028 	andmi	r5, r9, r8, lsr #32

00001e04 <NOROM_AONRTCCurrent64BitValueGet>:
    1e04:	4b03      	ldr	r3, [pc, #12]	; (1e14 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    1e06:	4904      	ldr	r1, [pc, #16]	; (1e18 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    1e08:	681a      	ldr	r2, [r3, #0]
    1e0a:	6808      	ldr	r0, [r1, #0]
    1e0c:	6819      	ldr	r1, [r3, #0]
    1e0e:	4291      	cmp	r1, r2
    1e10:	d1f8      	bne.n	1e04 <NOROM_AONRTCCurrent64BitValueGet>
    1e12:	4770      	bx	lr
    1e14:	40092008 	andmi	r2, r9, r8
    1e18:	4009200c 	andmi	r2, r9, ip

00001e1c <NOROM_CPUcpsid>:
    1e1c:	f3ef 8010 	mrs	r0, PRIMASK
    1e20:	b672      	cpsid	i
    1e22:	4770      	bx	lr

00001e24 <NOROM_CPUcpsie>:
    1e24:	f3ef 8010 	mrs	r0, PRIMASK
    1e28:	b662      	cpsie	i
    1e2a:	4770      	bx	lr

00001e2c <NOROM_OSCClockSourceSet>:
    1e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1e2e:	460c      	mov	r4, r1
    1e30:	07c1      	lsls	r1, r0, #31
    1e32:	4605      	mov	r5, r0
    1e34:	d509      	bpl.n	1e4a <NOROM_OSCClockSourceSet+0x1e>
    1e36:	4b12      	ldr	r3, [pc, #72]	; (1e80 <NOROM_OSCClockSourceSet+0x54>)
    1e38:	b2a2      	uxth	r2, r4
    1e3a:	681b      	ldr	r3, [r3, #0]
    1e3c:	2100      	movs	r1, #0
    1e3e:	9200      	str	r2, [sp, #0]
    1e40:	685e      	ldr	r6, [r3, #4]
    1e42:	4810      	ldr	r0, [pc, #64]	; (1e84 <NOROM_OSCClockSourceSet+0x58>)
    1e44:	2201      	movs	r2, #1
    1e46:	460b      	mov	r3, r1
    1e48:	47b0      	blx	r6
    1e4a:	07aa      	lsls	r2, r5, #30
    1e4c:	d509      	bpl.n	1e62 <NOROM_OSCClockSourceSet+0x36>
    1e4e:	4b0c      	ldr	r3, [pc, #48]	; (1e80 <NOROM_OSCClockSourceSet+0x54>)
    1e50:	b2a2      	uxth	r2, r4
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	9200      	str	r2, [sp, #0]
    1e56:	685e      	ldr	r6, [r3, #4]
    1e58:	480a      	ldr	r0, [pc, #40]	; (1e84 <NOROM_OSCClockSourceSet+0x58>)
    1e5a:	2100      	movs	r1, #0
    1e5c:	2202      	movs	r2, #2
    1e5e:	2301      	movs	r3, #1
    1e60:	47b0      	blx	r6
    1e62:	076b      	lsls	r3, r5, #29
    1e64:	d509      	bpl.n	1e7a <NOROM_OSCClockSourceSet+0x4e>
    1e66:	4b06      	ldr	r3, [pc, #24]	; (1e80 <NOROM_OSCClockSourceSet+0x54>)
    1e68:	b2a4      	uxth	r4, r4
    1e6a:	681b      	ldr	r3, [r3, #0]
    1e6c:	9400      	str	r4, [sp, #0]
    1e6e:	685c      	ldr	r4, [r3, #4]
    1e70:	4804      	ldr	r0, [pc, #16]	; (1e84 <NOROM_OSCClockSourceSet+0x58>)
    1e72:	2100      	movs	r1, #0
    1e74:	220c      	movs	r2, #12
    1e76:	2302      	movs	r3, #2
    1e78:	47a0      	blx	r4
    1e7a:	b002      	add	sp, #8
    1e7c:	bd70      	pop	{r4, r5, r6, pc}
    1e7e:	bf00      	nop
    1e80:	100001a4 	andne	r0, r0, r4, lsr #3
    1e84:	400ca000 	andmi	sl, ip, r0

00001e88 <NOROM_OSCClockSourceGet>:
    1e88:	b510      	push	{r4, lr}
    1e8a:	4b08      	ldr	r3, [pc, #32]	; (1eac <NOROM_OSCClockSourceGet+0x24>)
    1e8c:	2804      	cmp	r0, #4
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	f04f 0134 	mov.w	r1, #52	; 0x34
    1e94:	68dc      	ldr	r4, [r3, #12]
    1e96:	bf07      	ittee	eq
    1e98:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    1e9c:	231d      	moveq	r3, #29
    1e9e:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    1ea2:	231c      	movne	r3, #28
    1ea4:	4802      	ldr	r0, [pc, #8]	; (1eb0 <NOROM_OSCClockSourceGet+0x28>)
    1ea6:	47a0      	blx	r4
    1ea8:	bd10      	pop	{r4, pc}
    1eaa:	bf00      	nop
    1eac:	100001a4 	andne	r0, r0, r4, lsr #3
    1eb0:	400ca000 	andmi	sl, ip, r0

00001eb4 <TrimAfterColdResetWakeupFromShutDown>:
    1eb4:	b538      	push	{r3, r4, r5, lr}
    1eb6:	4605      	mov	r5, r0
    1eb8:	4b26      	ldr	r3, [pc, #152]	; (1f54 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    1eba:	2201      	movs	r2, #1
    1ebc:	601a      	str	r2, [r3, #0]
    1ebe:	4b26      	ldr	r3, [pc, #152]	; (1f58 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    1ec0:	681b      	ldr	r3, [r3, #0]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d0fb      	beq.n	1ebe <TrimAfterColdResetWakeupFromShutDown+0xa>
    1ec6:	4b25      	ldr	r3, [pc, #148]	; (1f5c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1ec8:	22c0      	movs	r2, #192	; 0xc0
    1eca:	601a      	str	r2, [r3, #0]
    1ecc:	4b24      	ldr	r3, [pc, #144]	; (1f60 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    1ece:	681b      	ldr	r3, [r3, #0]
    1ed0:	079b      	lsls	r3, r3, #30
    1ed2:	bf5f      	itttt	pl
    1ed4:	4b23      	ldrpl	r3, [pc, #140]	; (1f64 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    1ed6:	4a24      	ldrpl	r2, [pc, #144]	; (1f68 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    1ed8:	681b      	ldrpl	r3, [r3, #0]
    1eda:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    1ede:	bf5c      	itt	pl
    1ee0:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    1ee4:	7013      	strbpl	r3, [r2, #0]
    1ee6:	4b21      	ldr	r3, [pc, #132]	; (1f6c <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    1ee8:	2200      	movs	r2, #0
    1eea:	601a      	str	r2, [r3, #0]
    1eec:	4b20      	ldr	r3, [pc, #128]	; (1f70 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    1eee:	681c      	ldr	r4, [r3, #0]
    1ef0:	4620      	mov	r0, r4
    1ef2:	f000 f8d9 	bl	20a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    1ef6:	4628      	mov	r0, r5
    1ef8:	4621      	mov	r1, r4
    1efa:	f000 fa0d 	bl	2318 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    1efe:	f240 221d 	movw	r2, #541	; 0x21d
    1f02:	4b1c      	ldr	r3, [pc, #112]	; (1f74 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	b29b      	uxth	r3, r3
    1f08:	4293      	cmp	r3, r2
    1f0a:	d814      	bhi.n	1f36 <TrimAfterColdResetWakeupFromShutDown+0x82>
    1f0c:	4a1a      	ldr	r2, [pc, #104]	; (1f78 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    1f0e:	6813      	ldr	r3, [r2, #0]
    1f10:	6812      	ldr	r2, [r2, #0]
    1f12:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1f16:	f3c2 4203 	ubfx	r2, r2, #16, #4
    1f1a:	b103      	cbz	r3, 1f1e <TrimAfterColdResetWakeupFromShutDown+0x6a>
    1f1c:	3b01      	subs	r3, #1
    1f1e:	1f91      	subs	r1, r2, #6
    1f20:	2901      	cmp	r1, #1
    1f22:	bf86      	itte	hi
    1f24:	3202      	addhi	r2, #2
    1f26:	f002 020f 	andhi.w	r2, r2, #15
    1f2a:	2207      	movls	r2, #7
    1f2c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    1f30:	4a12      	ldr	r2, [pc, #72]	; (1f7c <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    1f32:	b2db      	uxtb	r3, r3
    1f34:	7013      	strb	r3, [r2, #0]
    1f36:	4620      	mov	r0, r4
    1f38:	f000 fabc 	bl	24b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    1f3c:	4b10      	ldr	r3, [pc, #64]	; (1f80 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    1f3e:	2002      	movs	r0, #2
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	68db      	ldr	r3, [r3, #12]
    1f44:	4798      	blx	r3
    1f46:	4b05      	ldr	r3, [pc, #20]	; (1f5c <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1f48:	2240      	movs	r2, #64	; 0x40
    1f4a:	601a      	str	r2, [r3, #0]
    1f4c:	4b0d      	ldr	r3, [pc, #52]	; (1f84 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    1f4e:	2201      	movs	r2, #1
    1f50:	601a      	str	r2, [r3, #0]
    1f52:	bd38      	pop	{r3, r4, r5, pc}
    1f54:	40091010 	andmi	r1, r9, r0, lsl r0
    1f58:	43220294 			; <UNDEFINED> instruction: 0x43220294
    1f5c:	400c6000 	andmi	r6, ip, r0
    1f60:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    1f64:	50003fac 	andpl	r3, r0, ip, lsr #31
    1f68:	40086256 	andmi	r6, r8, r6, asr r2
    1f6c:	40091040 	andmi	r1, r9, r0, asr #32
    1f70:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    1f74:	50001314 	andpl	r1, r0, r4, lsl r3
    1f78:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    1f7c:	40086002 	andmi	r6, r8, r2
    1f80:	100001a0 	andne	r0, r0, r0, lsr #3
    1f84:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00001f88 <NOROM_SetupTrimDevice>:
    1f88:	b510      	push	{r4, lr}
    1f8a:	4b1f      	ldr	r3, [pc, #124]	; (2008 <NOROM_SetupTrimDevice+0x80>)
    1f8c:	681c      	ldr	r4, [r3, #0]
    1f8e:	1c63      	adds	r3, r4, #1
    1f90:	bf08      	it	eq
    1f92:	2400      	moveq	r4, #0
    1f94:	f000 fcde 	bl	2954 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    1f98:	4b1c      	ldr	r3, [pc, #112]	; (200c <NOROM_SetupTrimDevice+0x84>)
    1f9a:	2200      	movs	r2, #0
    1f9c:	601a      	str	r2, [r3, #0]
    1f9e:	4a1c      	ldr	r2, [pc, #112]	; (2010 <NOROM_SetupTrimDevice+0x88>)
    1fa0:	2301      	movs	r3, #1
    1fa2:	6013      	str	r3, [r2, #0]
    1fa4:	4a1b      	ldr	r2, [pc, #108]	; (2014 <NOROM_SetupTrimDevice+0x8c>)
    1fa6:	6013      	str	r3, [r2, #0]
    1fa8:	f000 fa3e 	bl	2428 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    1fac:	4b1a      	ldr	r3, [pc, #104]	; (2018 <NOROM_SetupTrimDevice+0x90>)
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	b123      	cbz	r3, 1fbc <NOROM_SetupTrimDevice+0x34>
    1fb2:	4b1a      	ldr	r3, [pc, #104]	; (201c <NOROM_SetupTrimDevice+0x94>)
    1fb4:	4620      	mov	r0, r4
    1fb6:	681b      	ldr	r3, [r3, #0]
    1fb8:	f7ff ff7c 	bl	1eb4 <TrimAfterColdResetWakeupFromShutDown>
    1fbc:	4b18      	ldr	r3, [pc, #96]	; (2020 <NOROM_SetupTrimDevice+0x98>)
    1fbe:	2200      	movs	r2, #0
    1fc0:	601a      	str	r2, [r3, #0]
    1fc2:	4a18      	ldr	r2, [pc, #96]	; (2024 <NOROM_SetupTrimDevice+0x9c>)
    1fc4:	6813      	ldr	r3, [r2, #0]
    1fc6:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    1fca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1fce:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    1fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1fd6:	6013      	str	r3, [r2, #0]
    1fd8:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    1fdc:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    1fe0:	6813      	ldr	r3, [r2, #0]
    1fe2:	f3c3 3301 	ubfx	r3, r3, #12, #2
    1fe6:	2b01      	cmp	r3, #1
    1fe8:	bf01      	itttt	eq
    1fea:	6813      	ldreq	r3, [r2, #0]
    1fec:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    1ff0:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    1ff4:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    1ff8:	bf04      	itt	eq
    1ffa:	6011      	streq	r1, [r2, #0]
    1ffc:	6013      	streq	r3, [r2, #0]
    1ffe:	4b0a      	ldr	r3, [pc, #40]	; (2028 <NOROM_SetupTrimDevice+0xa0>)
    2000:	681b      	ldr	r3, [r3, #0]
    2002:	2b00      	cmp	r3, #0
    2004:	d1fb      	bne.n	1ffe <NOROM_SetupTrimDevice+0x76>
    2006:	bd10      	pop	{r4, pc}
    2008:	5000131c 	andpl	r1, r0, ip, lsl r3
    200c:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    2010:	400c605c 	andmi	r6, ip, ip, asr r0
    2014:	43042208 	movwmi	r2, #16904	; 0x4208
    2018:	43280180 			; <UNDEFINED> instruction: 0x43280180
    201c:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    2020:	4008218c 	andmi	r2, r8, ip, lsl #3
    2024:	40032048 	andmi	r2, r3, r8, asr #32
    2028:	4268000c 	rsbmi	r0, r8, #12

0000202c <NOROM_SetupSetVddrLevel>:
    202c:	b530      	push	{r4, r5, lr}
    202e:	4b19      	ldr	r3, [pc, #100]	; (2094 <NOROM_SetupSetVddrLevel+0x68>)
    2030:	681a      	ldr	r2, [r3, #0]
    2032:	4b19      	ldr	r3, [pc, #100]	; (2098 <NOROM_SetupSetVddrLevel+0x6c>)
    2034:	f3c2 6204 	ubfx	r2, r2, #24, #5
    2038:	781b      	ldrb	r3, [r3, #0]
    203a:	2a15      	cmp	r2, #21
    203c:	f003 031f 	and.w	r3, r3, #31
    2040:	bf88      	it	hi
    2042:	3a20      	subhi	r2, #32
    2044:	2b15      	cmp	r3, #21
    2046:	bf88      	it	hi
    2048:	3b20      	subhi	r3, #32
    204a:	4293      	cmp	r3, r2
    204c:	d020      	beq.n	2090 <NOROM_SetupSetVddrLevel+0x64>
    204e:	4913      	ldr	r1, [pc, #76]	; (209c <NOROM_SetupSetVddrLevel+0x70>)
    2050:	2000      	movs	r0, #0
    2052:	6008      	str	r0, [r1, #0]
    2054:	4608      	mov	r0, r1
    2056:	1ad1      	subs	r1, r2, r3
    2058:	2902      	cmp	r1, #2
    205a:	dc05      	bgt.n	2068 <NOROM_SetupSetVddrLevel+0x3c>
    205c:	f06f 0401 	mvn.w	r4, #1
    2060:	42a1      	cmp	r1, r4
    2062:	bfb8      	it	lt
    2064:	4621      	movlt	r1, r4
    2066:	e000      	b.n	206a <NOROM_SetupSetVddrLevel+0x3e>
    2068:	2102      	movs	r1, #2
    206a:	440b      	add	r3, r1
    206c:	490c      	ldr	r1, [pc, #48]	; (20a0 <NOROM_SetupSetVddrLevel+0x74>)
    206e:	4d0d      	ldr	r5, [pc, #52]	; (20a4 <NOROM_SetupSetVddrLevel+0x78>)
    2070:	680c      	ldr	r4, [r1, #0]
    2072:	f003 041f 	and.w	r4, r3, #31
    2076:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    207a:	802c      	strh	r4, [r5, #0]
    207c:	4293      	cmp	r3, r2
    207e:	f04f 0401 	mov.w	r4, #1
    2082:	600c      	str	r4, [r1, #0]
    2084:	d1e7      	bne.n	2056 <NOROM_SetupSetVddrLevel+0x2a>
    2086:	680b      	ldr	r3, [r1, #0]
    2088:	600c      	str	r4, [r1, #0]
    208a:	680b      	ldr	r3, [r1, #0]
    208c:	6004      	str	r4, [r0, #0]
    208e:	680b      	ldr	r3, [r1, #0]
    2090:	bd30      	pop	{r4, r5, pc}
    2092:	bf00      	nop
    2094:	50001388 	andpl	r1, r0, r8, lsl #7
    2098:	40086206 	andmi	r6, r8, r6, lsl #4
    209c:	43200098 			; <UNDEFINED> instruction: 0x43200098
    20a0:	4009202c 	andmi	r2, r9, ip, lsr #32
    20a4:	4008626c 	andmi	r6, r8, ip, ror #4

000020a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    20a8:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    20ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    20b0:	b510      	push	{r4, lr}
    20b2:	4604      	mov	r4, r0
    20b4:	d10f      	bne.n	20d6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    20b6:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    20ba:	4a1e      	ldr	r2, [pc, #120]	; (2134 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    20bc:	2380      	movs	r3, #128	; 0x80
    20be:	7013      	strb	r3, [r2, #0]
    20c0:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    20c4:	f802 3c10 	strb.w	r3, [r2, #-16]
    20c8:	f7ff ffb0 	bl	202c <NOROM_SetupSetVddrLevel>
    20cc:	4b1a      	ldr	r3, [pc, #104]	; (2138 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	f3c3 2304 	ubfx	r3, r3, #8, #5
    20d4:	e003      	b.n	20de <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    20d6:	4b19      	ldr	r3, [pc, #100]	; (213c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    20d8:	681b      	ldr	r3, [r3, #0]
    20da:	f3c3 6304 	ubfx	r3, r3, #24, #5
    20de:	2b15      	cmp	r3, #21
    20e0:	bf88      	it	hi
    20e2:	3b20      	subhi	r3, #32
    20e4:	eb03 7324 	add.w	r3, r3, r4, asr #28
    20e8:	3301      	adds	r3, #1
    20ea:	2b15      	cmp	r3, #21
    20ec:	dc05      	bgt.n	20fa <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    20ee:	f06f 0209 	mvn.w	r2, #9
    20f2:	4293      	cmp	r3, r2
    20f4:	bfb8      	it	lt
    20f6:	4613      	movlt	r3, r2
    20f8:	e000      	b.n	20fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    20fa:	2315      	movs	r3, #21
    20fc:	4a10      	ldr	r2, [pc, #64]	; (2140 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    20fe:	f003 031f 	and.w	r3, r3, #31
    2102:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    2106:	8013      	strh	r3, [r2, #0]
    2108:	4b0e      	ldr	r3, [pc, #56]	; (2144 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    210a:	681b      	ldr	r3, [r3, #0]
    210c:	f013 0302 	ands.w	r3, r3, #2
    2110:	bf0a      	itet	eq
    2112:	4a0d      	ldreq	r2, [pc, #52]	; (2148 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    2114:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    2118:	6013      	streq	r3, [r2, #0]
    211a:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    211e:	4a0b      	ldr	r2, [pc, #44]	; (214c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    2120:	f083 0301 	eor.w	r3, r3, #1
    2124:	6013      	str	r3, [r2, #0]
    2126:	f3c4 6480 	ubfx	r4, r4, #26, #1
    212a:	4b09      	ldr	r3, [pc, #36]	; (2150 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    212c:	f084 0401 	eor.w	r4, r4, #1
    2130:	601c      	str	r4, [r3, #0]
    2132:	bd10      	pop	{r4, pc}
    2134:	40086225 	andmi	r6, r8, r5, lsr #4
    2138:	50001388 	andpl	r1, r0, r8, lsl #7
    213c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2140:	4008626e 	andmi	r6, r8, lr, ror #4
    2144:	40090000 	andmi	r0, r9, r0
    2148:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    214c:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    2150:	43200008 			; <UNDEFINED> instruction: 0x43200008

00002154 <NOROM_SetupGetTrimForAnabypassValue1>:
    2154:	4b15      	ldr	r3, [pc, #84]	; (21ac <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    2156:	0381      	lsls	r1, r0, #14
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	f3c3 6283 	ubfx	r2, r3, #26, #4
    215e:	f3c3 238f 	ubfx	r3, r3, #10, #16
    2162:	d41f      	bmi.n	21a4 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2164:	f340 2007 	sbfx	r0, r0, #8, #8
    2168:	2800      	cmp	r0, #0
    216a:	da19      	bge.n	21a0 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    216c:	085b      	lsrs	r3, r3, #1
    216e:	d105      	bne.n	217c <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    2170:	0852      	lsrs	r2, r2, #1
    2172:	bf06      	itte	eq
    2174:	2301      	moveq	r3, #1
    2176:	461a      	moveq	r2, r3
    2178:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    217c:	3001      	adds	r0, #1
    217e:	e7f3      	b.n	2168 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    2180:	005b      	lsls	r3, r3, #1
    2182:	f043 0301 	orr.w	r3, r3, #1
    2186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    218a:	d308      	bcc.n	219e <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    218c:	0052      	lsls	r2, r2, #1
    218e:	f042 0201 	orr.w	r2, r2, #1
    2192:	2a0f      	cmp	r2, #15
    2194:	bf86      	itte	hi
    2196:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    219a:	220f      	movhi	r2, #15
    219c:	2301      	movls	r3, #1
    219e:	3801      	subs	r0, #1
    21a0:	2800      	cmp	r0, #0
    21a2:	d1ed      	bne.n	2180 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    21a4:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    21a8:	4770      	bx	lr
    21aa:	bf00      	nop
    21ac:	50001350 	andpl	r1, r0, r0, asr r3

000021b0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    21b0:	4a04      	ldr	r2, [pc, #16]	; (21c4 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    21b2:	6813      	ldr	r3, [r2, #0]
    21b4:	6810      	ldr	r0, [r2, #0]
    21b6:	f3c3 0387 	ubfx	r3, r3, #2, #8
    21ba:	f000 0003 	and.w	r0, r0, #3
    21be:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    21c2:	4770      	bx	lr
    21c4:	50001350 	andpl	r1, r0, r0, asr r3

000021c8 <NOROM_SetupGetTrimForAmpcompTh2>:
    21c8:	4b02      	ldr	r3, [pc, #8]	; (21d4 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    21ca:	6818      	ldr	r0, [r3, #0]
    21cc:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    21d0:	4770      	bx	lr
    21d2:	bf00      	nop
    21d4:	50001374 	andpl	r1, r0, r4, ror r3

000021d8 <NOROM_SetupGetTrimForAmpcompTh1>:
    21d8:	4b03      	ldr	r3, [pc, #12]	; (21e8 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    21da:	6818      	ldr	r0, [r3, #0]
    21dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21e0:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    21e4:	4770      	bx	lr
    21e6:	bf00      	nop
    21e8:	50001370 	andpl	r1, r0, r0, ror r3

000021ec <NOROM_SetupGetTrimForAmpcompCtrl>:
    21ec:	b570      	push	{r4, r5, r6, lr}
    21ee:	4b15      	ldr	r3, [pc, #84]	; (2244 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    21f0:	4915      	ldr	r1, [pc, #84]	; (2248 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    21f2:	681c      	ldr	r4, [r3, #0]
    21f4:	6809      	ldr	r1, [r1, #0]
    21f6:	f3c4 5203 	ubfx	r2, r4, #20, #4
    21fa:	f011 0501 	ands.w	r5, r1, #1
    21fe:	f3c4 4303 	ubfx	r3, r4, #16, #4
    2202:	d113      	bne.n	222c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2204:	4911      	ldr	r1, [pc, #68]	; (224c <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    2206:	6809      	ldr	r1, [r1, #0]
    2208:	f341 2603 	sbfx	r6, r1, #8, #4
    220c:	18b2      	adds	r2, r6, r2
    220e:	d403      	bmi.n	2218 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    2210:	2a0f      	cmp	r2, #15
    2212:	bfa8      	it	ge
    2214:	220f      	movge	r2, #15
    2216:	e000      	b.n	221a <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    2218:	462a      	mov	r2, r5
    221a:	f341 3103 	sbfx	r1, r1, #12, #4
    221e:	18cb      	adds	r3, r1, r3
    2220:	d403      	bmi.n	222a <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    2222:	2b0f      	cmp	r3, #15
    2224:	bfa8      	it	ge
    2226:	230f      	movge	r3, #15
    2228:	e000      	b.n	222c <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    222a:	2300      	movs	r3, #0
    222c:	b2a1      	uxth	r1, r4
    222e:	2821      	cmp	r0, #33	; 0x21
    2230:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    2234:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    2238:	bf84      	itt	hi
    223a:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    223e:	4323      	orrhi	r3, r4
    2240:	4618      	mov	r0, r3
    2242:	bd70      	pop	{r4, r5, r6, pc}
    2244:	50001378 	andpl	r1, r0, r8, ror r3
    2248:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    224c:	50003fac 	andpl	r3, r0, ip, lsr #31

00002250 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    2250:	281f      	cmp	r0, #31
    2252:	bf83      	ittte	hi
    2254:	4b02      	ldrhi	r3, [pc, #8]	; (2260 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    2256:	6818      	ldrhi	r0, [r3, #0]
    2258:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    225c:	2000      	movls	r0, #0
    225e:	4770      	bx	lr
    2260:	50001398 	mulpl	r0, r8, r3

00002264 <NOROM_SetupGetTrimForAdcShModeEn>:
    2264:	2821      	cmp	r0, #33	; 0x21
    2266:	bf83      	ittte	hi
    2268:	4b02      	ldrhi	r3, [pc, #8]	; (2274 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    226a:	6818      	ldrhi	r0, [r3, #0]
    226c:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    2270:	2001      	movls	r0, #1
    2272:	4770      	bx	lr
    2274:	5000138c 	andpl	r1, r0, ip, lsl #7

00002278 <NOROM_SetupGetTrimForAdcShVbufEn>:
    2278:	2821      	cmp	r0, #33	; 0x21
    227a:	bf83      	ittte	hi
    227c:	4b02      	ldrhi	r3, [pc, #8]	; (2288 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    227e:	6818      	ldrhi	r0, [r3, #0]
    2280:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    2284:	2001      	movls	r0, #1
    2286:	4770      	bx	lr
    2288:	5000138c 	andpl	r1, r0, ip, lsl #7

0000228c <NOROM_SetupGetTrimForXoscHfCtl>:
    228c:	281f      	cmp	r0, #31
    228e:	bf81      	itttt	hi
    2290:	4b07      	ldrhi	r3, [pc, #28]	; (22b0 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    2292:	681b      	ldrhi	r3, [r3, #0]
    2294:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    2298:	0080      	lslhi	r0, r0, #2
    229a:	bf81      	itttt	hi
    229c:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    22a0:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    22a4:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    22a8:	4318      	orrhi	r0, r3
    22aa:	bf98      	it	ls
    22ac:	2000      	movls	r0, #0
    22ae:	4770      	bx	lr
    22b0:	50001398 	mulpl	r0, r8, r3

000022b4 <NOROM_SetupGetTrimForXoscHfFastStart>:
    22b4:	4b02      	ldr	r3, [pc, #8]	; (22c0 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    22b6:	6818      	ldr	r0, [r3, #0]
    22b8:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    22bc:	4770      	bx	lr
    22be:	bf00      	nop
    22c0:	5000138c 	andpl	r1, r0, ip, lsl #7

000022c4 <NOROM_SetupGetTrimForRadcExtCfg>:
    22c4:	281f      	cmp	r0, #31
    22c6:	bf81      	itttt	hi
    22c8:	4b07      	ldrhi	r3, [pc, #28]	; (22e8 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    22ca:	681b      	ldrhi	r3, [r3, #0]
    22cc:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    22d0:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    22d4:	bf81      	itttt	hi
    22d6:	0400      	lslhi	r0, r0, #16
    22d8:	031b      	lslhi	r3, r3, #12
    22da:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    22de:	b29b      	uxthhi	r3, r3
    22e0:	bf8c      	ite	hi
    22e2:	4318      	orrhi	r0, r3
    22e4:	4801      	ldrls	r0, [pc, #4]	; (22ec <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    22e6:	4770      	bx	lr
    22e8:	50001398 	mulpl	r0, r8, r3
    22ec:	403f8000 	eorsmi	r8, pc, r0

000022f0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    22f0:	2821      	cmp	r0, #33	; 0x21
    22f2:	bf83      	ittte	hi
    22f4:	4b02      	ldrhi	r3, [pc, #8]	; (2300 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    22f6:	6818      	ldrhi	r0, [r3, #0]
    22f8:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    22fc:	2000      	movls	r0, #0
    22fe:	4770      	bx	lr
    2300:	5000138c 	andpl	r1, r0, ip, lsl #7

00002304 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    2304:	2821      	cmp	r0, #33	; 0x21
    2306:	bf83      	ittte	hi
    2308:	4b02      	ldrhi	r3, [pc, #8]	; (2314 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    230a:	6818      	ldrhi	r0, [r3, #0]
    230c:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    2310:	2000      	movls	r0, #0
    2312:	4770      	bx	lr
    2314:	5000138c 	andpl	r1, r0, ip, lsl #7

00002318 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    2318:	b573      	push	{r0, r1, r4, r5, r6, lr}
    231a:	4605      	mov	r5, r0
    231c:	4608      	mov	r0, r1
    231e:	f7ff ff19 	bl	2154 <NOROM_SetupGetTrimForAnabypassValue1>
    2322:	4c39      	ldr	r4, [pc, #228]	; (2408 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    2324:	4602      	mov	r2, r0
    2326:	2118      	movs	r1, #24
    2328:	4620      	mov	r0, r4
    232a:	f000 fb33 	bl	2994 <NOROM_DDI32RegWrite>
    232e:	f7ff ff3f 	bl	21b0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    2332:	4b36      	ldr	r3, [pc, #216]	; (240c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    2334:	b280      	uxth	r0, r0
    2336:	681b      	ldr	r3, [r3, #0]
    2338:	9000      	str	r0, [sp, #0]
    233a:	685e      	ldr	r6, [r3, #4]
    233c:	4620      	mov	r0, r4
    233e:	212c      	movs	r1, #44	; 0x2c
    2340:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2344:	2300      	movs	r3, #0
    2346:	47b0      	blx	r6
    2348:	4b31      	ldr	r3, [pc, #196]	; (2410 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    234a:	4620      	mov	r0, r4
    234c:	681a      	ldr	r2, [r3, #0]
    234e:	211c      	movs	r1, #28
    2350:	f3c2 020d 	ubfx	r2, r2, #0, #14
    2354:	f000 fb1e 	bl	2994 <NOROM_DDI32RegWrite>
    2358:	f7ff ff36 	bl	21c8 <NOROM_SetupGetTrimForAmpcompTh2>
    235c:	2114      	movs	r1, #20
    235e:	4602      	mov	r2, r0
    2360:	4620      	mov	r0, r4
    2362:	f000 fb17 	bl	2994 <NOROM_DDI32RegWrite>
    2366:	f7ff ff37 	bl	21d8 <NOROM_SetupGetTrimForAmpcompTh1>
    236a:	2110      	movs	r1, #16
    236c:	4602      	mov	r2, r0
    236e:	4620      	mov	r0, r4
    2370:	f000 fb10 	bl	2994 <NOROM_DDI32RegWrite>
    2374:	4628      	mov	r0, r5
    2376:	f7ff ff39 	bl	21ec <NOROM_SetupGetTrimForAmpcompCtrl>
    237a:	210c      	movs	r1, #12
    237c:	4602      	mov	r2, r0
    237e:	4620      	mov	r0, r4
    2380:	f000 fb08 	bl	2994 <NOROM_DDI32RegWrite>
    2384:	4628      	mov	r0, r5
    2386:	f7ff ff6d 	bl	2264 <NOROM_SetupGetTrimForAdcShModeEn>
    238a:	0040      	lsls	r0, r0, #1
    238c:	4e21      	ldr	r6, [pc, #132]	; (2414 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    238e:	f040 0020 	orr.w	r0, r0, #32
    2392:	b2c0      	uxtb	r0, r0
    2394:	7030      	strb	r0, [r6, #0]
    2396:	4628      	mov	r0, r5
    2398:	f7ff ff6e 	bl	2278 <NOROM_SetupGetTrimForAdcShVbufEn>
    239c:	f040 0010 	orr.w	r0, r0, #16
    23a0:	b2c0      	uxtb	r0, r0
    23a2:	7030      	strb	r0, [r6, #0]
    23a4:	4628      	mov	r0, r5
    23a6:	f7ff ff71 	bl	228c <NOROM_SetupGetTrimForXoscHfCtl>
    23aa:	2128      	movs	r1, #40	; 0x28
    23ac:	4602      	mov	r2, r0
    23ae:	4620      	mov	r0, r4
    23b0:	f000 faf0 	bl	2994 <NOROM_DDI32RegWrite>
    23b4:	4628      	mov	r0, r5
    23b6:	f7ff ff4b 	bl	2250 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    23ba:	0040      	lsls	r0, r0, #1
    23bc:	4b16      	ldr	r3, [pc, #88]	; (2418 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    23be:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    23c2:	b2c0      	uxtb	r0, r0
    23c4:	7018      	strb	r0, [r3, #0]
    23c6:	4628      	mov	r0, r5
    23c8:	f7ff ff92 	bl	22f0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    23cc:	00c0      	lsls	r0, r0, #3
    23ce:	4b13      	ldr	r3, [pc, #76]	; (241c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    23d0:	f060 007f 	orn	r0, r0, #127	; 0x7f
    23d4:	b2c0      	uxtb	r0, r0
    23d6:	7018      	strb	r0, [r3, #0]
    23d8:	4628      	mov	r0, r5
    23da:	f7ff ff93 	bl	2304 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    23de:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    23e2:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    23e6:	4b0e      	ldr	r3, [pc, #56]	; (2420 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    23e8:	b280      	uxth	r0, r0
    23ea:	8018      	strh	r0, [r3, #0]
    23ec:	4628      	mov	r0, r5
    23ee:	f7ff ff69 	bl	22c4 <NOROM_SetupGetTrimForRadcExtCfg>
    23f2:	2108      	movs	r1, #8
    23f4:	4602      	mov	r2, r0
    23f6:	4620      	mov	r0, r4
    23f8:	f000 facc 	bl	2994 <NOROM_DDI32RegWrite>
    23fc:	4b09      	ldr	r3, [pc, #36]	; (2424 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    23fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2402:	601a      	str	r2, [r3, #0]
    2404:	b002      	add	sp, #8
    2406:	bd70      	pop	{r4, r5, r6, pc}
    2408:	400ca000 	andmi	sl, ip, r0
    240c:	100001a4 	andne	r0, r0, r4, lsr #3
    2410:	5000137c 	andpl	r1, r0, ip, ror r3
    2414:	400ca149 	andmi	sl, ip, r9, asr #2
    2418:	400ca14c 	andmi	sl, ip, ip, asr #2
    241c:	400ca141 	andmi	sl, ip, r1, asr #2
    2420:	400ca1dc 	ldrdmi	sl, [ip], -ip
    2424:	400ca040 	andmi	sl, ip, r0, asr #32

00002428 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    2428:	b530      	push	{r4, r5, lr}
    242a:	4b14      	ldr	r3, [pc, #80]	; (247c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    242c:	681b      	ldr	r3, [r3, #0]
    242e:	2b00      	cmp	r3, #0
    2430:	d1fb      	bne.n	242a <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    2432:	4a13      	ldr	r2, [pc, #76]	; (2480 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    2434:	4913      	ldr	r1, [pc, #76]	; (2484 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    2436:	6813      	ldr	r3, [r2, #0]
    2438:	6809      	ldr	r1, [r1, #0]
    243a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    243e:	f023 0307 	bic.w	r3, r3, #7
    2442:	f011 0f04 	tst.w	r1, #4
    2446:	4614      	mov	r4, r2
    2448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    244c:	d003      	beq.n	2456 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    244e:	f043 0305 	orr.w	r3, r3, #5
    2452:	6013      	str	r3, [r2, #0]
    2454:	bd30      	pop	{r4, r5, pc}
    2456:	490c      	ldr	r1, [pc, #48]	; (2488 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    2458:	f043 0004 	orr.w	r0, r3, #4
    245c:	680d      	ldr	r5, [r1, #0]
    245e:	07ad      	lsls	r5, r5, #30
    2460:	d009      	beq.n	2476 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    2462:	f043 0307 	orr.w	r3, r3, #7
    2466:	6013      	str	r3, [r2, #0]
    2468:	680b      	ldr	r3, [r1, #0]
    246a:	f003 0303 	and.w	r3, r3, #3
    246e:	2b03      	cmp	r3, #3
    2470:	d1fa      	bne.n	2468 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    2472:	6020      	str	r0, [r4, #0]
    2474:	bd30      	pop	{r4, r5, pc}
    2476:	6010      	str	r0, [r2, #0]
    2478:	bd30      	pop	{r4, r5, pc}
    247a:	bf00      	nop
    247c:	4268000c 	rsbmi	r0, r8, #12
    2480:	40034004 	andmi	r4, r3, r4
    2484:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2488:	40034000 	andmi	r4, r3, r0

0000248c <NOROM_SetupSetAonRtcSubSecInc>:
    248c:	4b07      	ldr	r3, [pc, #28]	; (24ac <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    248e:	b282      	uxth	r2, r0
    2490:	f3c0 4007 	ubfx	r0, r0, #16, #8
    2494:	601a      	str	r2, [r3, #0]
    2496:	6058      	str	r0, [r3, #4]
    2498:	2201      	movs	r2, #1
    249a:	3308      	adds	r3, #8
    249c:	601a      	str	r2, [r3, #0]
    249e:	4a04      	ldr	r2, [pc, #16]	; (24b0 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    24a0:	6812      	ldr	r2, [r2, #0]
    24a2:	2a00      	cmp	r2, #0
    24a4:	d0fb      	beq.n	249e <NOROM_SetupSetAonRtcSubSecInc+0x12>
    24a6:	2200      	movs	r2, #0
    24a8:	601a      	str	r2, [r3, #0]
    24aa:	4770      	bx	lr
    24ac:	400c603c 	andmi	r6, ip, ip, lsr r0
    24b0:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000024b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    24b4:	f3c0 4381 	ubfx	r3, r0, #18, #2
    24b8:	2b01      	cmp	r3, #1
    24ba:	b510      	push	{r4, lr}
    24bc:	4604      	mov	r4, r0
    24be:	d002      	beq.n	24c6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    24c0:	2b02      	cmp	r3, #2
    24c2:	d02f      	beq.n	2524 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    24c4:	e02a      	b.n	251c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24c6:	4b42      	ldr	r3, [pc, #264]	; (25d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    24c8:	681b      	ldr	r3, [r3, #0]
    24ca:	039a      	lsls	r2, r3, #14
    24cc:	d426      	bmi.n	251c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24ce:	4a41      	ldr	r2, [pc, #260]	; (25d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    24d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    24d4:	6011      	str	r1, [r2, #0]
    24d6:	4940      	ldr	r1, [pc, #256]	; (25d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    24d8:	f3c3 3003 	ubfx	r0, r3, #12, #4
    24dc:	680a      	ldr	r2, [r1, #0]
    24de:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    24e2:	4302      	orrs	r2, r0
    24e4:	f3c3 4000 	ubfx	r0, r3, #16, #1
    24e8:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    24ec:	600a      	str	r2, [r1, #0]
    24ee:	f851 2c01 	ldr.w	r2, [r1, #-1]
    24f2:	f3c3 2003 	ubfx	r0, r3, #8, #4
    24f6:	f022 020f 	bic.w	r2, r2, #15
    24fa:	4302      	orrs	r2, r0
    24fc:	f851 0c01 	ldr.w	r0, [r1, #-1]
    2500:	f841 2c01 	str.w	r2, [r1, #-1]
    2504:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2508:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    250c:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    2510:	4313      	orrs	r3, r2
    2512:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2516:	f841 3c02 	str.w	r3, [r1, #-2]
    251a:	e003      	b.n	2524 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    251c:	4b2d      	ldr	r3, [pc, #180]	; (25d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    251e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2522:	601a      	str	r2, [r3, #0]
    2524:	4b2d      	ldr	r3, [pc, #180]	; (25dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    2526:	681b      	ldr	r3, [r3, #0]
    2528:	071b      	lsls	r3, r3, #28
    252a:	bf5e      	ittt	pl
    252c:	4b2c      	ldrpl	r3, [pc, #176]	; (25e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    252e:	2240      	movpl	r2, #64	; 0x40
    2530:	601a      	strpl	r2, [r3, #0]
    2532:	4b2c      	ldr	r3, [pc, #176]	; (25e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    2534:	f44f 7200 	mov.w	r2, #512	; 0x200
    2538:	601a      	str	r2, [r3, #0]
    253a:	f7ff febb 	bl	22b4 <NOROM_SetupGetTrimForXoscHfFastStart>
    253e:	4b2a      	ldr	r3, [pc, #168]	; (25e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    2540:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    2544:	b2c0      	uxtb	r0, r0
    2546:	7018      	strb	r0, [r3, #0]
    2548:	f3c4 5081 	ubfx	r0, r4, #22, #2
    254c:	2801      	cmp	r0, #1
    254e:	d00b      	beq.n	2568 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    2550:	d302      	bcc.n	2558 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    2552:	2802      	cmp	r0, #2
    2554:	d026      	beq.n	25a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    2556:	e028      	b.n	25aa <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    2558:	2004      	movs	r0, #4
    255a:	2101      	movs	r1, #1
    255c:	f7ff fc66 	bl	1e2c <NOROM_OSCClockSourceSet>
    2560:	4822      	ldr	r0, [pc, #136]	; (25ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    2562:	f7ff ff93 	bl	248c <NOROM_SetupSetAonRtcSubSecInc>
    2566:	e024      	b.n	25b2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    2568:	f7ff fc8e 	bl	1e88 <NOROM_OSCClockSourceGet>
    256c:	4604      	mov	r4, r0
    256e:	2004      	movs	r0, #4
    2570:	4621      	mov	r1, r4
    2572:	f7ff fc5b 	bl	1e2c <NOROM_OSCClockSourceSet>
    2576:	2004      	movs	r0, #4
    2578:	f7ff fc86 	bl	1e88 <NOROM_OSCClockSourceGet>
    257c:	42a0      	cmp	r0, r4
    257e:	d1fa      	bne.n	2576 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    2580:	4b1b      	ldr	r3, [pc, #108]	; (25f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    2582:	681c      	ldr	r4, [r3, #0]
    2584:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    2588:	f7ff ff80 	bl	248c <NOROM_SetupSetAonRtcSubSecInc>
    258c:	4b19      	ldr	r3, [pc, #100]	; (25f4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    258e:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    2592:	681b      	ldr	r3, [r3, #0]
    2594:	0e20      	lsrs	r0, r4, #24
    2596:	681b      	ldr	r3, [r3, #0]
    2598:	2107      	movs	r1, #7
    259a:	4798      	blx	r3
    259c:	4b0d      	ldr	r3, [pc, #52]	; (25d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    259e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    25a2:	601a      	str	r2, [r3, #0]
    25a4:	2004      	movs	r0, #4
    25a6:	2103      	movs	r1, #3
    25a8:	e001      	b.n	25ae <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    25aa:	2004      	movs	r0, #4
    25ac:	2102      	movs	r1, #2
    25ae:	f7ff fc3d 	bl	1e2c <NOROM_OSCClockSourceSet>
    25b2:	4b11      	ldr	r3, [pc, #68]	; (25f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    25b4:	4a11      	ldr	r2, [pc, #68]	; (25fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    25bc:	7013      	strb	r3, [r2, #0]
    25be:	f647 0218 	movw	r2, #30744	; 0x7818
    25c2:	4b0f      	ldr	r3, [pc, #60]	; (2600 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    25c4:	801a      	strh	r2, [r3, #0]
    25c6:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    25ca:	3b44      	subs	r3, #68	; 0x44
    25cc:	681b      	ldr	r3, [r3, #0]
    25ce:	bd10      	pop	{r4, pc}
    25d0:	5000138c 	andpl	r1, r0, ip, lsl #7
    25d4:	400ca040 	andmi	sl, ip, r0, asr #32
    25d8:	4008600c 	andmi	r6, r8, ip
    25dc:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    25e0:	400ca068 	andmi	sl, ip, r8, rrx
    25e4:	400ca080 	andmi	sl, ip, r0, lsl #1
    25e8:	400ca108 	andmi	sl, ip, r8, lsl #2
    25ec:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    25f0:	50003fa8 	andpl	r3, r0, r8, lsr #31
    25f4:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    25f8:	5000136c 	andpl	r1, r0, ip, ror #6
    25fc:	400cb00b 	andmi	fp, ip, fp
    2600:	400cb070 	andmi	fp, ip, r0, ror r0

00002604 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    2604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2608:	4b77      	ldr	r3, [pc, #476]	; (27e8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    260a:	4607      	mov	r7, r0
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	4e77      	ldr	r6, [pc, #476]	; (27ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2610:	f013 0f02 	tst.w	r3, #2
    2614:	d004      	beq.n	2620 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    2616:	2308      	movs	r3, #8
    2618:	71b3      	strb	r3, [r6, #6]
    261a:	4a75      	ldr	r2, [pc, #468]	; (27f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    261c:	4b75      	ldr	r3, [pc, #468]	; (27f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    261e:	e0df      	b.n	27e0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    2620:	f7ff fbd8 	bl	1dd4 <NOROM_AONBatMonTemperatureGetDegC>
    2624:	4b74      	ldr	r3, [pc, #464]	; (27f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    2626:	681d      	ldr	r5, [r3, #0]
    2628:	172a      	asrs	r2, r5, #28
    262a:	02ac      	lsls	r4, r5, #10
    262c:	f102 0101 	add.w	r1, r2, #1
    2630:	d408      	bmi.n	2644 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    2632:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    2636:	10db      	asrs	r3, r3, #3
    2638:	2b08      	cmp	r3, #8
    263a:	bfa8      	it	ge
    263c:	2308      	movge	r3, #8
    263e:	4299      	cmp	r1, r3
    2640:	bfb8      	it	lt
    2642:	4619      	movlt	r1, r3
    2644:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    2648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    264c:	d10a      	bne.n	2664 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    264e:	4b6b      	ldr	r3, [pc, #428]	; (27fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    2650:	681a      	ldr	r2, [r3, #0]
    2652:	681b      	ldr	r3, [r3, #0]
    2654:	f3c2 2204 	ubfx	r2, r2, #8, #5
    2658:	2a15      	cmp	r2, #21
    265a:	bf88      	it	hi
    265c:	3a20      	subhi	r2, #32
    265e:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2662:	e00a      	b.n	267a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2664:	4b66      	ldr	r3, [pc, #408]	; (2800 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    2666:	681a      	ldr	r2, [r3, #0]
    2668:	4b66      	ldr	r3, [pc, #408]	; (2804 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    266a:	f3c2 6204 	ubfx	r2, r2, #24, #5
    266e:	681b      	ldr	r3, [r3, #0]
    2670:	2a15      	cmp	r2, #21
    2672:	bf88      	it	hi
    2674:	3a20      	subhi	r2, #32
    2676:	f3c3 4304 	ubfx	r3, r3, #16, #5
    267a:	2b15      	cmp	r3, #21
    267c:	440a      	add	r2, r1
    267e:	bf88      	it	hi
    2680:	3b20      	subhi	r3, #32
    2682:	2a15      	cmp	r2, #21
    2684:	dc05      	bgt.n	2692 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    2686:	f06f 0109 	mvn.w	r1, #9
    268a:	428a      	cmp	r2, r1
    268c:	bfb8      	it	lt
    268e:	460a      	movlt	r2, r1
    2690:	e000      	b.n	2694 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    2692:	2215      	movs	r2, #21
    2694:	4c5c      	ldr	r4, [pc, #368]	; (2808 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    2696:	f002 011f 	and.w	r1, r2, #31
    269a:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    269e:	8021      	strh	r1, [r4, #0]
    26a0:	495a      	ldr	r1, [pc, #360]	; (280c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    26a2:	6809      	ldr	r1, [r1, #0]
    26a4:	f011 0403 	ands.w	r4, r1, #3
    26a8:	bf18      	it	ne
    26aa:	2401      	movne	r4, #1
    26ac:	0749      	lsls	r1, r1, #29
    26ae:	bf48      	it	mi
    26b0:	f044 0402 	orrmi.w	r4, r4, #2
    26b4:	b10f      	cbz	r7, 26ba <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    26b6:	f044 0404 	orr.w	r4, r4, #4
    26ba:	f996 1007 	ldrsb.w	r1, [r6, #7]
    26be:	1a41      	subs	r1, r0, r1
    26c0:	2904      	cmp	r1, #4
    26c2:	dc03      	bgt.n	26cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    26c4:	4949      	ldr	r1, [pc, #292]	; (27ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    26c6:	7989      	ldrb	r1, [r1, #6]
    26c8:	428c      	cmp	r4, r1
    26ca:	d06f      	beq.n	27ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    26cc:	f1b0 010f 	subs.w	r1, r0, #15
    26d0:	9101      	str	r1, [sp, #4]
    26d2:	f004 0101 	and.w	r1, r4, #1
    26d6:	f8df a144 	ldr.w	sl, [pc, #324]	; 281c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    26da:	f004 0904 	and.w	r9, r4, #4
    26de:	f004 0802 	and.w	r8, r4, #2
    26e2:	460f      	mov	r7, r1
    26e4:	d42a      	bmi.n	273c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    26e6:	9901      	ldr	r1, [sp, #4]
    26e8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    26ec:	ea4f 2e21 	mov.w	lr, r1, asr #8
    26f0:	f1be 0f07 	cmp.w	lr, #7
    26f4:	9101      	str	r1, [sp, #4]
    26f6:	d801      	bhi.n	26fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    26f8:	d104      	bne.n	2704 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    26fa:	e001      	b.n	2700 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    26fc:	f04f 0e07 	mov.w	lr, #7
    2700:	2106      	movs	r1, #6
    2702:	e000      	b.n	2706 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    2704:	4671      	mov	r1, lr
    2706:	f8df b118 	ldr.w	fp, [pc, #280]	; 2820 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    270a:	3101      	adds	r1, #1
    270c:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    2710:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    2714:	ebc1 0c0c 	rsb	ip, r1, ip
    2718:	fa5f f18c 	uxtb.w	r1, ip
    271c:	f1b9 0f00 	cmp.w	r9, #0
    2720:	d002      	beq.n	2728 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    2722:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    2726:	4459      	add	r1, fp
    2728:	f1b8 0f00 	cmp.w	r8, #0
    272c:	d002      	beq.n	2734 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    272e:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    2732:	4459      	add	r1, fp
    2734:	b12f      	cbz	r7, 2742 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2736:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    273a:	e002      	b.n	2742 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    273c:	f04f 0e00 	mov.w	lr, #0
    2740:	4671      	mov	r1, lr
    2742:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    2746:	fa5f fc8a 	uxtb.w	ip, sl
    274a:	f1b9 0f00 	cmp.w	r9, #0
    274e:	d002      	beq.n	2756 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    2750:	f3ca 2907 	ubfx	r9, sl, #8, #8
    2754:	44cc      	add	ip, r9
    2756:	f1b8 0f00 	cmp.w	r8, #0
    275a:	d002      	beq.n	2762 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    275c:	f3ca 4807 	ubfx	r8, sl, #16, #8
    2760:	44c4      	add	ip, r8
    2762:	b10f      	cbz	r7, 2768 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2764:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    2768:	1a9b      	subs	r3, r3, r2
    276a:	2b01      	cmp	r3, #1
    276c:	bfb8      	it	lt
    276e:	2301      	movlt	r3, #1
    2770:	9f01      	ldr	r7, [sp, #4]
    2772:	2234      	movs	r2, #52	; 0x34
    2774:	4353      	muls	r3, r2
    2776:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    277a:	4379      	muls	r1, r7
    277c:	b2ed      	uxtb	r5, r5
    277e:	436b      	muls	r3, r5
    2780:	3180      	adds	r1, #128	; 0x80
    2782:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    2786:	fbb3 f1f1 	udiv	r1, r3, r1
    278a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    278e:	4561      	cmp	r1, ip
    2790:	bf28      	it	cs
    2792:	4661      	movcs	r1, ip
    2794:	287f      	cmp	r0, #127	; 0x7f
    2796:	80b1      	strh	r1, [r6, #4]
    2798:	dc05      	bgt.n	27a6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    279a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    279e:	4298      	cmp	r0, r3
    27a0:	bfb8      	it	lt
    27a2:	4618      	movlt	r0, r3
    27a4:	e000      	b.n	27a8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    27a6:	207f      	movs	r0, #127	; 0x7f
    27a8:	71f0      	strb	r0, [r6, #7]
    27aa:	71b4      	strb	r4, [r6, #6]
    27ac:	4b18      	ldr	r3, [pc, #96]	; (2810 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    27ae:	2100      	movs	r1, #0
    27b0:	681b      	ldr	r3, [r3, #0]
    27b2:	6033      	str	r3, [r6, #0]
    27b4:	88b3      	ldrh	r3, [r6, #4]
    27b6:	2b1e      	cmp	r3, #30
    27b8:	bf9e      	ittt	ls
    27ba:	4a0c      	ldrls	r2, [pc, #48]	; (27ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    27bc:	231f      	movls	r3, #31
    27be:	8093      	strhls	r3, [r2, #4]
    27c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    27c4:	d302      	bcc.n	27cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    27c6:	085b      	lsrs	r3, r3, #1
    27c8:	3101      	adds	r1, #1
    27ca:	e7f9      	b.n	27c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    27cc:	4a11      	ldr	r2, [pc, #68]	; (2814 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    27ce:	3b0f      	subs	r3, #15
    27d0:	430a      	orrs	r2, r1
    27d2:	091b      	lsrs	r3, r3, #4
    27d4:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    27d8:	4a06      	ldr	r2, [pc, #24]	; (27f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    27da:	6013      	str	r3, [r2, #0]
    27dc:	4b0e      	ldr	r3, [pc, #56]	; (2818 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    27de:	2200      	movs	r2, #0
    27e0:	601a      	str	r2, [r3, #0]
    27e2:	b003      	add	sp, #12
    27e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27e8:	40090000 	andmi	r0, r9, r0
    27ec:	20000040 	andcs	r0, r0, r0, asr #32
    27f0:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    27f4:	40091030 	andmi	r1, r9, r0, lsr r0
    27f8:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    27fc:	50001388 	andpl	r1, r0, r8, lsl #7
    2800:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2804:	5000113c 	andpl	r1, r0, ip, lsr r1
    2808:	4008626e 	andmi	r6, r8, lr, ror #4
    280c:	40082224 	andmi	r2, r8, r4, lsr #4
    2810:	40092008 	andmi	r2, r9, r8
    2814:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2818:	40091034 	andmi	r1, r9, r4, lsr r0
    281c:	5000139c 	mulpl	r0, ip, r3
    2820:	50001398 	mulpl	r0, r8, r3

00002824 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    2824:	b510      	push	{r4, lr}
    2826:	4b14      	ldr	r3, [pc, #80]	; (2878 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2828:	681c      	ldr	r4, [r3, #0]
    282a:	b2a4      	uxth	r4, r4
    282c:	b314      	cbz	r4, 2874 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    282e:	f7ff fad1 	bl	1dd4 <NOROM_AONBatMonTemperatureGetDegC>
    2832:	4b12      	ldr	r3, [pc, #72]	; (287c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2834:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2838:	4290      	cmp	r0, r2
    283a:	da05      	bge.n	2848 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    283c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2840:	4290      	cmp	r0, r2
    2842:	bfb8      	it	lt
    2844:	4610      	movlt	r0, r2
    2846:	71d8      	strb	r0, [r3, #7]
    2848:	889a      	ldrh	r2, [r3, #4]
    284a:	490c      	ldr	r1, [pc, #48]	; (287c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    284c:	4294      	cmp	r4, r2
    284e:	d310      	bcc.n	2872 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    2850:	4b0b      	ldr	r3, [pc, #44]	; (2880 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    2852:	6808      	ldr	r0, [r1, #0]
    2854:	681b      	ldr	r3, [r3, #0]
    2856:	1aa4      	subs	r4, r4, r2
    2858:	3302      	adds	r3, #2
    285a:	1a1b      	subs	r3, r3, r0
    285c:	2b1f      	cmp	r3, #31
    285e:	bf28      	it	cs
    2860:	231f      	movcs	r3, #31
    2862:	085b      	lsrs	r3, r3, #1
    2864:	40dc      	lsrs	r4, r3
    2866:	4414      	add	r4, r2
    2868:	f64f 72ff 	movw	r2, #65535	; 0xffff
    286c:	4294      	cmp	r4, r2
    286e:	bf28      	it	cs
    2870:	4614      	movcs	r4, r2
    2872:	808c      	strh	r4, [r1, #4]
    2874:	bd10      	pop	{r4, pc}
    2876:	bf00      	nop
    2878:	40091034 	andmi	r1, r9, r4, lsr r0
    287c:	20000040 	andcs	r0, r0, r0, asr #32
    2880:	40092008 	andmi	r2, r9, r8

00002884 <NOROM_SysCtrlResetSourceGet>:
    2884:	4b04      	ldr	r3, [pc, #16]	; (2898 <NOROM_SysCtrlResetSourceGet+0x14>)
    2886:	681a      	ldr	r2, [r3, #0]
    2888:	0412      	lsls	r2, r2, #16
    288a:	bf5a      	itte	pl
    288c:	6818      	ldrpl	r0, [r3, #0]
    288e:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    2892:	2008      	movmi	r0, #8
    2894:	4770      	bx	lr
    2896:	bf00      	nop
    2898:	40090004 	andmi	r0, r9, r4

0000289c <NOROM_ChipInfo_GetChipFamily>:
    289c:	f64b 129a 	movw	r2, #47514	; 0xb99a
    28a0:	4b10      	ldr	r3, [pc, #64]	; (28e4 <NOROM_ChipInfo_GetChipFamily+0x48>)
    28a2:	6818      	ldr	r0, [r3, #0]
    28a4:	f3c0 300f 	ubfx	r0, r0, #12, #16
    28a8:	4290      	cmp	r0, r2
    28aa:	d106      	bne.n	28ba <NOROM_ChipInfo_GetChipFamily+0x1e>
    28ac:	681b      	ldr	r3, [r3, #0]
    28ae:	0f1b      	lsrs	r3, r3, #28
    28b0:	2b0b      	cmp	r3, #11
    28b2:	bf0c      	ite	eq
    28b4:	2004      	moveq	r0, #4
    28b6:	2000      	movne	r0, #0
    28b8:	e011      	b.n	28de <NOROM_ChipInfo_GetChipFamily+0x42>
    28ba:	f64b 13be 	movw	r3, #47550	; 0xb9be
    28be:	4298      	cmp	r0, r3
    28c0:	d00a      	beq.n	28d8 <NOROM_ChipInfo_GetChipFamily+0x3c>
    28c2:	f64b 3341 	movw	r3, #47937	; 0xbb41
    28c6:	4298      	cmp	r0, r3
    28c8:	d008      	beq.n	28dc <NOROM_ChipInfo_GetChipFamily+0x40>
    28ca:	f64b 3320 	movw	r3, #47904	; 0xbb20
    28ce:	4298      	cmp	r0, r3
    28d0:	bf14      	ite	ne
    28d2:	20ff      	movne	r0, #255	; 0xff
    28d4:	2002      	moveq	r0, #2
    28d6:	e002      	b.n	28de <NOROM_ChipInfo_GetChipFamily+0x42>
    28d8:	2001      	movs	r0, #1
    28da:	e000      	b.n	28de <NOROM_ChipInfo_GetChipFamily+0x42>
    28dc:	2003      	movs	r0, #3
    28de:	b240      	sxtb	r0, r0
    28e0:	4770      	bx	lr
    28e2:	bf00      	nop
    28e4:	50001318 	andpl	r1, r0, r8, lsl r3

000028e8 <NOROM_ChipInfo_GetHwRevision>:
    28e8:	b538      	push	{r3, r4, r5, lr}
    28ea:	4b19      	ldr	r3, [pc, #100]	; (2950 <NOROM_ChipInfo_GetHwRevision+0x68>)
    28ec:	681d      	ldr	r5, [r3, #0]
    28ee:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    28f2:	6818      	ldr	r0, [r3, #0]
    28f4:	0f2d      	lsrs	r5, r5, #28
    28f6:	b2c4      	uxtb	r4, r0
    28f8:	2c80      	cmp	r4, #128	; 0x80
    28fa:	bf28      	it	cs
    28fc:	2400      	movcs	r4, #0
    28fe:	f7ff ffcd 	bl	289c <NOROM_ChipInfo_GetChipFamily>
    2902:	2804      	cmp	r0, #4
    2904:	d821      	bhi.n	294a <NOROM_ChipInfo_GetHwRevision+0x62>
    2906:	e8df f000 	tbb	[pc, r0]
    290a:	1b1b1303 	blne	6c751e <__ccfg+0x6a7576>
    290e:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2912:	2d07      	cmp	r5, #7
    2914:	d819      	bhi.n	294a <NOROM_ChipInfo_GetHwRevision+0x62>
    2916:	e8df f005 	tbb	[pc, r5]
    291a:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    291e:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2922:	2014      	movs	r0, #20
    2924:	e012      	b.n	294c <NOROM_ChipInfo_GetHwRevision+0x64>
    2926:	2015      	movs	r0, #21
    2928:	e010      	b.n	294c <NOROM_ChipInfo_GetHwRevision+0x64>
    292a:	f104 0016 	add.w	r0, r4, #22
    292e:	e00a      	b.n	2946 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2930:	b125      	cbz	r5, 293c <NOROM_ChipInfo_GetHwRevision+0x54>
    2932:	2d02      	cmp	r5, #2
    2934:	d109      	bne.n	294a <NOROM_ChipInfo_GetHwRevision+0x62>
    2936:	f104 0014 	add.w	r0, r4, #20
    293a:	e004      	b.n	2946 <NOROM_ChipInfo_GetHwRevision+0x5e>
    293c:	200a      	movs	r0, #10
    293e:	e005      	b.n	294c <NOROM_ChipInfo_GetHwRevision+0x64>
    2940:	b91d      	cbnz	r5, 294a <NOROM_ChipInfo_GetHwRevision+0x62>
    2942:	f104 000a 	add.w	r0, r4, #10
    2946:	b2c0      	uxtb	r0, r0
    2948:	e000      	b.n	294c <NOROM_ChipInfo_GetHwRevision+0x64>
    294a:	20ff      	movs	r0, #255	; 0xff
    294c:	b240      	sxtb	r0, r0
    294e:	bd38      	pop	{r3, r4, r5, pc}
    2950:	50001318 	andpl	r1, r0, r8, lsl r3

00002954 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2954:	b508      	push	{r3, lr}
    2956:	f7ff ffa1 	bl	289c <NOROM_ChipInfo_GetChipFamily>
    295a:	2801      	cmp	r0, #1
    295c:	d103      	bne.n	2966 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    295e:	f7ff ffc3 	bl	28e8 <NOROM_ChipInfo_GetHwRevision>
    2962:	2813      	cmp	r0, #19
    2964:	dc00      	bgt.n	2968 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2966:	e7fe      	b.n	2966 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2968:	bd08      	pop	{r3, pc}
	...

0000296c <AuxAdiDdiSafeWrite.constprop.1>:
    296c:	b538      	push	{r3, r4, r5, lr}
    296e:	4604      	mov	r4, r0
    2970:	460d      	mov	r5, r1
    2972:	f7ff fa53 	bl	1e1c <NOROM_CPUcpsid>
    2976:	4b06      	ldr	r3, [pc, #24]	; (2990 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    2978:	681a      	ldr	r2, [r3, #0]
    297a:	2a00      	cmp	r2, #0
    297c:	d0fb      	beq.n	2976 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    297e:	2201      	movs	r2, #1
    2980:	6025      	str	r5, [r4, #0]
    2982:	601a      	str	r2, [r3, #0]
    2984:	b918      	cbnz	r0, 298e <AuxAdiDdiSafeWrite.constprop.1+0x22>
    2986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    298a:	f7ff ba4b 	b.w	1e24 <NOROM_CPUcpsie>
    298e:	bd38      	pop	{r3, r4, r5, pc}
    2990:	400c8000 	andmi	r8, ip, r0

00002994 <NOROM_DDI32RegWrite>:
    2994:	4408      	add	r0, r1
    2996:	4611      	mov	r1, r2
    2998:	f7ff bfe8 	b.w	296c <AuxAdiDdiSafeWrite.constprop.1>
    299c:	72470a0d 	subvc	r0, r7, #53248	; 0xd000
    29a0:	2070756f 	rsbscs	r7, r0, pc, ror #10
    29a4:	44206425 	strtmi	r6, [r0], #-1061	; 0xfffffbdb
    29a8:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    29ac:	25232065 	strcs	r2, [r3, #-101]!	; 0xffffff9b
    29b0:	25282064 	strcs	r2, [r8, #-100]!	; 0xffffff9c
    29b4:	64252f64 	strtvs	r2, [r5], #-3940	; 0xfffff09c
    29b8:	63657220 	cmnvs	r5, #32, 4
    29bc:	7364726f 	cmnvc	r4, #-268435450	; 0xf0000006
    29c0:	000a0d29 	andeq	r0, sl, r9, lsr #26
    29c4:	72294728 	eorvc	r4, r9, #40, 14	; 0xa00000
    29c8:	2070756f 	rsbscs	r7, r0, pc, ror #10
    29cc:	0a0d4449 	beq	353af8 <__ccfg+0x333b50>
    29d0:	65294e28 	strvs	r4, [r9, #-3624]!	; 0xfffff1d8
    29d4:	65642077 	strbvs	r2, [r4, #-119]!	; 0xffffff89
    29d8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    29dc:	0d444920 	vstreq.16	s9, [r4, #-64]	; 0xffffffc0	; <UNPREDICTABLE>
    29e0:	2946280a 	stmdbcs	r6, {r1, r3, fp, sp}^
    29e4:	20646e69 	rsbcs	r6, r4, r9, ror #28
    29e8:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    29ec:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    29f0:	280a0d73 	stmdacs	sl, {r0, r1, r4, r5, r6, r8, sl, fp}
    29f4:	65722943 	ldrbvs	r2, [r2, #-2371]!	; 0xfffff6bd
    29f8:	20657461 	rsbcs	r7, r5, r1, ror #8
    29fc:	6f636572 	svcvs	0x00636572
    2a00:	6f206472 	svcvs	0x00206472
    2a04:	656e206e 	strbvs	r2, [lr, #-110]!	; 0xffffff92
    2a08:	62686769 	rsbvs	r6, r8, #27525120	; 0x1a40000
    2a0c:	0a0d726f 	beq	35f3d0 <__ccfg+0x33f428>
    2a10:	65294428 	strvs	r4, [r9, #-1064]!	; 0xfffffbd8
    2a14:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    2a18:	63657220 	cmnvs	r5, #32, 4
    2a1c:	2064726f 	rsbcs	r7, r4, pc, ror #4
    2a20:	6e206e6f 	cdpvs	14, 2, cr6, cr0, cr15, {3}
    2a24:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    2a28:	0d726f62 	ldcleq	15, cr6, [r2, #-392]!	; 0xfffffe78
    2a2c:	2952280a 	ldmdbcs	r2, {r1, r3, fp, sp}^
    2a30:	69727465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2a34:	20657665 	rsbcs	r7, r5, r5, ror #12
    2a38:	6f636572 	svcvs	0x00636572
    2a3c:	66206472 			; <UNDEFINED> instruction: 0x66206472
    2a40:	206d6f72 	rsbcs	r6, sp, r2, ror pc
    2a44:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    2a48:	726f6268 	rsbvc	r6, pc, #104, 4	; 0x80000006
    2a4c:	53280a0d 			; <UNDEFINED> instruction: 0x53280a0d
    2a50:	776f6829 	strbvc	r6, [pc, -r9, lsr #16]!
    2a54:	636f6c20 	cmnvs	pc, #32, 24	; 0x2000
    2a58:	72206c61 	eorvc	r6, r0, #24832	; 0x6100
    2a5c:	726f6365 	rsbvc	r6, pc, #-1811939327	; 0x94000001
    2a60:	0a0d7364 	beq	35f7f8 <__ccfg+0x33f850>
    2a64:	29652852 	stmdbcs	r5!, {r1, r4, r6, fp, sp}^
    2a68:	20746573 	rsbscs	r6, r4, r3, ror r5
    2a6c:	61636f6c 	cmnvs	r3, ip, ror #30
    2a70:	7473206c 	ldrbtvc	r2, [r3], #-108	; 0xffffff94
    2a74:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    2a78:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
    2a7c:	6c65530a 	stclvs	3, cr5, [r5], #-40	; 0xffffffd8
    2a80:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    2a84:	003a6e6f 	eorseq	r6, sl, pc, ror #28
    2a88:	46006325 	strmi	r6, [r0], -r5, lsr #6
    2a8c:	20646e69 	rsbcs	r6, r4, r9, ror #28
    2a90:	6769656e 	strbvs	r6, [r9, -lr, ror #10]!
    2a94:	756f6268 	strbvc	r6, [pc, #-616]!	; 2834 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x10>
    2a98:	43007372 	movwmi	r7, #882	; 0x372
    2a9c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    2aa0:	65522065 	ldrbvs	r2, [r2, #-101]	; 0xffffff9b
    2aa4:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    2aa8:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    2aac:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
    2ab0:	756f6268 	strbvc	r6, [pc, #-616]!	; 2850 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x2c>
    2ab4:	65440072 	strbvs	r0, [r4, #-114]	; 0xffffff8e
    2ab8:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    2abc:	63655220 	cmnvs	r5, #32, 4
    2ac0:	2064726f 	rsbcs	r7, r4, pc, ror #4
    2ac4:	4e206e6f 	cdpmi	14, 2, cr6, cr0, cr15, {3}
    2ac8:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
    2acc:	72756f62 	rsbsvc	r6, r5, #392	; 0x188
    2ad0:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    2ad4:	76656972 			; <UNDEFINED> instruction: 0x76656972
    2ad8:	65522065 	ldrbvs	r2, [r2, #-101]	; 0xffffff9b
    2adc:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
    2ae0:	206e6f20 	rsbcs	r6, lr, r0, lsr #30
    2ae4:	6769654e 	strbvs	r6, [r9, -lr, asr #10]!
    2ae8:	756f6268 	strbvc	r6, [pc, #-616]!	; 2888 <NOROM_SysCtrlResetSourceGet+0x4>
    2aec:	68530072 	ldmdavs	r3, {r1, r4, r5, r6}^
    2af0:	4c20776f 	stcmi	7, cr7, [r0], #-444	; 0xfffffe44
    2af4:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    2af8:	63655220 	cmnvs	r5, #32, 4
    2afc:	7364726f 	cmnvc	r4, #-268435450	; 0xf0000006
    2b00:	73655200 	cmnvc	r5, #0, 4
    2b04:	4c207465 	cfstrsmi	mvf7, [r0], #-404	; 0xfffffe6c
    2b08:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
    2b0c:	6f745320 	svcvs	0x00745320
    2b10:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    2b14:	77654e00 	strbvc	r4, [r5, -r0, lsl #28]!
    2b18:	6f724720 	svcvs	0x00724720
    2b1c:	49207075 	stmdbmi	r0!, {r0, r2, r4, r5, r6, ip, sp, lr}
    2b20:	00203a44 	eoreq	r3, r0, r4, asr #20
    2b24:	4e006425 	cdpmi	4, 0, cr6, cr0, cr5, {1}
    2b28:	6e207765 	cdpvs	7, 2, cr7, cr0, cr5, {3}
    2b2c:	2065646f 	rsbcs	r6, r5, pc, ror #8
    2b30:	28204449 	stmdacs	r0!, {r0, r3, r6, sl, lr}
    2b34:	35322d31 	ldrcc	r2, [r2, #-3377]!	; 0xfffff2cf
    2b38:	53003a29 	movwpl	r3, #2601	; 0xa29
    2b3c:	52455359 	subpl	r5, r5, #1677721601	; 0x64000001
    2b40:	25203a52 	strcs	r3, [r0, #-2642]!	; 0xfffff5ae
    2b44:	25202c78 	strcs	r2, [r0, #-3192]!	; 0xfffff388
    2b48:	61750073 	cmnvs	r5, r3, ror r0
    2b4c:	61750072 	cmnvs	r5, r2, ror r0
    2b50:	69500069 	ldmdbvs	r0, {r0, r3, r5, r6}^
    2b54:	20534f63 	subscs	r4, r3, r3, ror #30
    2b58:	342e3576 	strtcc	r3, [lr], #-1398	; 0xfffffa8a
    2b5c:	3147502f 	cmpcc	r7, pc, lsr #32
    2b60:	32323038 	eorscc	r3, r2, #56	; 0x38
    2b64:	432d4132 			; <UNDEFINED> instruction: 0x432d4132
    2b68:	35333143 	ldrcc	r3, [r3, #-323]!	; 0xfffffebd
    2b6c:	414c5f30 	cmpmi	ip, r0, lsr pc
    2b70:	48434e55 	stmdami	r3, {r0, r2, r4, r6, r9, sl, fp, lr}^
    2b74:	202c4c58 	eorcs	r4, ip, r8, asr ip
    2b78:	20294328 	eorcs	r4, r9, r8, lsr #6
    2b7c:	6f736c4f 	svcvs	0x00736c4f
    2b80:	2074656e 	rsbscs	r6, r4, lr, ror #10
    2b84:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    2b88:	63696e75 	cmnvs	r9, #1872	; 0x750
    2b8c:	6f697461 	svcvs	0x00697461
    2b90:	202c736e 	eorcs	r7, ip, lr, ror #6
    2b94:	32303032 	eorscc	r3, r0, #50	; 0x32
    2b98:	3130322d 	teqcc	r0, sp, lsr #4
    2b9c:	654c0038 	strbvs	r0, [ip, #-56]	; 0xffffffc8
    2ba0:	766f7466 	strbtvc	r7, [pc], -r6, ror #8
    2ba4:	52207265 	eorpl	r7, r0, #1342177286	; 0x50000006
    2ba8:	203a4d41 	eorscs	r4, sl, r1, asr #26
    2bac:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
    2bb0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    2bb4:	00747300 	rsbseq	r7, r4, r0, lsl #6

00002bb8 <port_confs>:
    2bb8:	00306080 	eorseq	r6, r0, r0, lsl #1
    2bbc:	00386080 	eorseq	r6, r8, r0, lsl #1
    2bc0:	00186010 	andseq	r6, r8, r0, lsl r0
    2bc4:	2010400f 	andscs	r4, r0, pc
    2bc8:	30694000 	rsbcc	r4, r9, r0
    2bcc:	30714000 	rsbscc	r4, r1, r0
    2bd0:	00b86008 	adcseq	r6, r8, r8
    2bd4:	60c94000 	sbcvs	r4, r9, r0
    2bd8:	60d14000 	sbcsvs	r4, r1, r0
    2bdc:	60d94000 	sbcsvs	r4, r9, r0
    2be0:	60e14000 	rscvs	r4, r1, r0
    2be4:	00096380 	andeq	r6, r9, r0, lsl #7
    2be8:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2bec:	20402000 	subcs	r2, r0, r0
    2bf0:	00486080 	subeq	r6, r8, r0, lsl #1
    2bf4:	00506080 	subseq	r6, r0, r0, lsl #1
    2bf8:	00a06000 	adceq	r6, r0, r0
    2bfc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2c00:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2c04:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2c08:	6f690076 	svcvs	0x00690076
    2c0c:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2c10:	616d0031 	cmnvs	sp, r1, lsr r0
    2c14:	6b00676c 	blvs	1c9cc <__exidx_end+0x19d94>
    2c18:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2c1c:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002c20 <__pi_hex_enc_table>:
    2c20:	33323130 	teqcc	r2, #48, 2
    2c24:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2c28:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2c2c:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002c30 <__input_pins>:
    2c30:	9c9b9a99 	vldmials	fp, {s18-s170}

00002c34 <__button_list>:
    2c34:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .bss:

20000000 <setdel>:
	...

20000002 <urates>:
	...

20000004 <__PCB>:
20000004:	00000000 	andeq	r0, r0, r0

20000008 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000008:	00000000 	andeq	r0, r0, r0

2000000c <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
2000000c:	00000000 	andeq	r0, r0, r0

20000010 <mevent>:
20000010:	00000000 	andeq	r0, r0, r0

20000014 <mnfree>:
20000014:	00000000 	andeq	r0, r0, r0

20000018 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000018:	00000000 	andeq	r0, r0, r0

2000001c <dopen>:
	...

2000001d <dstat>:
2000001d:	 	andeq	r0, r0, r0

20000020 <drvprcs>:
static aword drvprcs, qevent;
20000020:	00000000 	andeq	r0, r0, r0

20000024 <dstate>:
20000024:	00000000 	andeq	r0, r0, r0

20000028 <qevent>:
20000028:	00000000 	andeq	r0, r0, r0

2000002c <len.5699>:
2000002c:	00000000 	andeq	r0, r0, r0

20000030 <ptr.5698>:
20000030:	00000000 	andeq	r0, r0, r0

20000034 <__inpline>:
char *__inpline = NULL;
20000034:	00000000 	andeq	r0, r0, r0

20000038 <len.5700>:
20000038:	00000000 	andeq	r0, r0, r0

2000003c <ptr.5699>:
2000003c:	00000000 	andeq	r0, r0, r0

20000040 <powerQualGlobals>:
	...

20000048 <nodeId>:
	...

20000050 <database>:
	...

20000550 <groupId>:
short groupId;
20000550:	00000000 	andeq	r0, r0, r0

20000554 <recordCount>:
int recordCount;
20000554:	00000000 	andeq	r0, r0, r0

20000558 <__pi_uart>:
	...

20000560 <system_event_count>:
20000560:	00000000 	andeq	r0, r0, r0

20000564 <entropy>:
20000564:	00000000 	andeq	r0, r0, r0

20000568 <__pi_mintk>:
	...

2000056a <__pi_old>:
	...

2000056c <__pi_systat>:
	...

20000574 <__pi_new>:
20000574:	00000000 	andeq	r0, r0, r0

20000578 <__pi_utims>:
	...

20000588 <__pi_curr>:
20000588:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

2000058c <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00001023 	andeq	r1, r0, r3, lsr #32
       4:	00000003 	andeq	r0, r0, r3
}
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000073 	andeq	r0, r0, r3, ror r0
      10:	0004e40c 	andeq	lr, r4, ip, lsl #8
      14:	00050c00 	andeq	r0, r5, r0, lsl #24
      18:	00003000 	andeq	r3, r0, r0
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	000006fd 	strdeq	r0, [r0], -sp
      2c:	00066403 	andeq	r6, r6, r3, lsl #8
      30:	172b0200 	strne	r0, [fp, -r0, lsl #4]!
      34:	00000038 	andeq	r0, r0, r8, lsr r0
      38:	fb080102 	blx	20044a <__ccfg+0x1e04a2>
      3c:	02000006 	andeq	r0, r0, #6
			i = k;
      40:	05fe0502 	ldrbeq	r0, [lr, #1282]!	; 0x502
				j->Next = k;
      44:	33030000 	movwcc	r0, #12288	; 0x3000
      48:	02000003 	andeq	r0, r0, #3
}
      4c:	00521c39 	subseq	r1, r2, r9, lsr ip
      50:	02020000 	andeq	r0, r2, #0
      54:	0007a707 	andeq	sl, r7, r7, lsl #14
		release;
      58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      5c:	000004c5 	andeq	r0, r0, r5, asr #9
      60:	00071203 	andeq	r1, r7, r3, lsl #4
      64:	1b4f0200 	blne	13c086c <__ccfg+0x13a08c4>
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	fa070402 	blx	1c107c <__ccfg+0x1a10d4>
      70:	02000002 	andeq	r0, r0, #2
      74:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	0002f507 	andeq	pc, r2, r7, lsl #10
      80:	05d50300 	ldrbeq	r0, [r5, #768]	; 0x300
      84:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
      88:	00007317 	andeq	r7, r0, r7, lsl r3
      8c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
	descriptors [fd] = s;
      90:	00746e69 	rsbseq	r6, r4, r9, ror #28
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	ff070402 			; <UNDEFINED> instruction: 0xff070402
      98:	05000002 	streq	r0, [r0, #-2]
	if (s == NULL)
      9c:	000006c7 	andeq	r0, r0, r7, asr #13
		syserror (EMALLOC, "tcv05");
      a0:	16015e03 	strne	r5, [r1], -r3, lsl #28
      a4:	00000094 	muleq	r0, r4, r0
      a8:	0007d503 	andeq	sp, r7, r3, lsl #10
      ac:	0e2e0400 	cdpeq	4, 2, cr0, cr14, cr0, {0}
      b0:	00000059 	andeq	r0, r0, r9, asr r0
      b4:	0001fb03 	andeq	pc, r1, r3, lsl #22
      b8:	0e740400 	cdpeq	4, 7, cr0, cr4, cr0, {0}
      bc:	00000059 	andeq	r0, r0, r9, asr r0
      c0:	a5040406 	strge	r0, [r4, #-1030]	; 0xfffffbfa
      c4:	0000e203 	andeq	lr, r0, r3, lsl #4
      c8:	04840700 	streq	r0, [r4], #1792	; 0x700
      cc:	a7040000 	strge	r0, [r4, -r0]
      d0:	00009b0c 	andeq	r9, r0, ip, lsl #22
      d4:	06290700 	strteq	r0, [r9], -r0, lsl #14
      d8:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
      dc:	0000e213 	andeq	lr, r0, r3, lsl r2
      e0:	38080000 	stmdacc	r8, {}	; <UNPREDICTABLE>
      e4:	f2000000 	vhadd.s8	d0, d0, d0
      e8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
      ec:	00000094 	muleq	r0, r4, r0
      f0:	080a0003 	stmdaeq	sl, {r0, r1}
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	1609a204 	strne	sl, [r9], -r4, lsl #4
			curr += 0x1000;
      f8:	0b000001 	bleq	104 <_Min_Stack_Size+0x4>
      fc:	00000295 	muleq	r0, r5, r2
		if (from >= EE_SIZE || upto < from)
     100:	8d07a404 	cfstrshi	mvf10, [r7, #-16]
     104:	00000000 	andeq	r0, r0, r0
			upto = EE_SIZE - 1;
     108:	0003c00b 	andeq	ip, r3, fp
     10c:	05a90400 	streq	r0, [r9, #1024]!	; 0x400
     110:	000000c0 	andeq	r0, r0, r0, asr #1
     114:	4d030004 	stcmi	0, cr0, [r3, #-16]
     118:	04000005 	streq	r0, [r0], #-5
     11c:	00f203aa 	rscseq	r0, r2, sl, lsr #7
     120:	040c0000 	streq	r0, [ip], #-0
     124:	0006960d 	andeq	r9, r6, sp, lsl #12
        switch (choice)
     128:	00120400 	andseq	r0, r2, r0, lsl #8
     12c:	0000013c 	andeq	r0, r0, ip, lsr r1
     130:	00075e0e 	andeq	r5, r7, lr, lsl #28
     134:	00012200 	andeq	r2, r1, r0, lsl #4
     138:	00010000 	andeq	r0, r1, r0
     13c:	0004ef03 	andeq	lr, r4, r3, lsl #30
     140:	17160500 	ldrne	r0, [r6, -r0, lsl #10]
     144:	0000006c 	andeq	r0, r0, ip, rrx
     148:	0001ab03 	andeq	sl, r1, r3, lsl #22
        proceed Menu_Header;
     14c:	0d0c0600 	stceq	6, cr0, [ip, #-0]
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	0000008d 	andeq	r0, r0, sp, lsl #1
     154:	00046b03 	andeq	r6, r4, r3, lsl #22
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	1b230500 	blne	8c1560 <__ccfg+0x8a15b8>
     15c:	00000148 	andeq	r0, r0, r8, asr #2
     160:	00022e0f 	andeq	r2, r2, pc, lsl #28
        proceed Menu_Header;
     164:	34051800 	strcc	r1, [r5], #-2048	; 0xfffff800
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	0001ba08 	andeq	fp, r1, r8, lsl #20
     16c:	08250b00 	stmdaeq	r5!, {r8, r9, fp}
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	36050000 	strcc	r0, [r5], -r0
     174:	0001ba13 	andeq	fp, r1, r3, lsl sl
     178:	5f100000 	svcpl	0x00100000
    if (node < 1 || node > 25) {
     17c:	3705006b 	strcc	r0, [r5, -fp, rrx]
     180:	00008d07 	andeq	r8, r0, r7, lsl #26
            proceed Set_Node_ID;
     184:	760b0400 	strvc	r0, [fp], -r0, lsl #8
     188:	05000006 	streq	r0, [r0, #-6]
        proceed Menu_Header;
     18c:	008d0b37 	addeq	r0, sp, r7, lsr fp
     190:	0b080000 	bleq	200198 <__ccfg+0x1e01f0>
            proceed Set_Group_ID;
     194:	00000614 	andeq	r0, r0, r4, lsl r6
            proceed Set_Node_ID;
     198:	8d143705 	ldchi	7, cr3, [r4, #-20]	; 0xffffffec
     19c:	0c000000 	stceq	0, cr0, [r0], {-0}
            diag("Find neighbours");
     1a0:	0003210b 	andeq	r2, r3, fp, lsl #2
            diag("Reset Local Storage");
     1a4:	1b370500 	blne	dc15ac <__ccfg+0xda1604>
            diag("Create Record on Neighbour");
     1a8:	0000008d 	andeq	r0, r0, sp, lsl #1
            diag("Delete Record on Neighbour");
     1ac:	785f1010 	ldmdavc	pc, {r4, ip}^	; <UNPREDICTABLE>
            diag("Retrieve Record on Neighbour");
     1b0:	0b380500 	bleq	e015b8 <__ccfg+0xde1610>
            diag("Show Local Records");
     1b4:	000001c0 	andeq	r0, r0, r0, asr #3
            diag("Reset Local Storage");
     1b8:	04110014 	ldreq	r0, [r1], #-20	; 0xffffffec
     1bc:	00000160 	andeq	r0, r0, r0, ror #2
     1c0:	00013c08 	andeq	r3, r1, r8, lsl #24
     1c4:	0001d000 	andeq	sp, r1, r0
     1c8:	00940900 	addseq	r0, r4, r0, lsl #18
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	0006910f 	andeq	r9, r6, pc, lsl #2
     1d4:	3c052400 	cfstrscc	mvf2, [r5], {-0}
     1d8:	00025308 	andeq	r5, r2, r8, lsl #6
     1dc:	03860b00 	orreq	r0, r6, #0, 22
     1e0:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
     1e4:	00008d07 	andeq	r8, r0, r7, lsl #26
     1e8:	c70b0000 	strgt	r0, [fp, -r0]
     1ec:	05000002 	streq	r0, [r0, #-2]
     1f0:	008d073f 	addeq	r0, sp, pc, lsr r7
     1f4:	0b040000 	bleq	1001fc <__ccfg+0xe0254>
     1f8:	00000270 	andeq	r0, r0, r0, ror r2
     1fc:	8d074005 	stchi	0, cr4, [r7, #-20]	; 0xffffffec
static void devinit_uart (int devnum) {
     200:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	adddevfunc (ioreq_uart_a, devnum);
     204:	0004210b 	andeq	r2, r4, fp, lsl #2
     208:	07410500 	strbeq	r0, [r1, -r0, lsl #10]
void udelay (volatile word n) {
     20c:	0000008d 	andeq	r0, r0, sp, lsl #1
     210:	05a40b0c 	streq	r0, [r4, #2828]!	; 0xb0c
	while (n) {
     214:	42050000 	andmi	r0, r5, #0
     218:	00008d07 	andeq	r8, r0, r7, lsl #26
}
     21c:	430b1000 	movwmi	r1, #45056	; 0xb000
	while (n--);
     220:	05000006 	streq	r0, [r0, #-6]
     224:	008d0743 	addeq	r0, sp, r3, asr #14
     228:	0b140000 	bleq	500230 <__ccfg+0x4e0288>
		n--;
     22c:	00000249 	andeq	r0, r0, r9, asr #4
     230:	8d074405 	cfstrshi	mvf4, [r7, #-20]	; 0xffffffec
     234:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
void mdelay (volatile word n) {
     238:	00038f0b 	andeq	r8, r3, fp, lsl #30
     23c:	07450500 	strbeq	r0, [r5, -r0, lsl #10]
	while (n) {
     240:	0000008d 	andeq	r0, r0, sp, lsl #1
     244:	056b0b1c 	strbeq	r0, [fp, #-2844]!	; 0xfffff4e4
}
     248:	46050000 	strmi	r0, [r5], -r0
		udelay (999);
     24c:	00008d07 	andeq	r8, r0, r7, lsl #26
     250:	12002000 	andne	r2, r0, #0
		n--;
     254:	0000002a 	andeq	r0, r0, sl, lsr #32
     258:	4f050108 	svcmi	0x00050108
     25c:	00029808 	andeq	r9, r2, r8, lsl #16
     260:	078e0b00 	streq	r0, [lr, r0, lsl #22]
void __pi_ondomain (lword d) {
     264:	50050000 	andpl	r0, r5, r0
     268:	00029809 	andeq	r9, r2, r9, lsl #16
		if (__pi_systat.effpdm > 1)
     26c:	df0b0000 	svcle	0x000b0000
     270:	05000006 	streq	r0, [r0, #-6]
			__pi_systat.effpdm = 1;
     274:	02980951 	addseq	r0, r8, #1327104	; 0x144000
	PRCMPowerDomainOn (d);
     278:	13800000 	orrne	r0, r0, #0
     27c:	000007cc 	andeq	r0, r0, ip, asr #15
     280:	3c0a5305 	stccc	3, cr5, [sl], {5}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     284:	00000001 	andeq	r0, r0, r1
     288:	08101301 	ldmdaeq	r0, {r0, r8, r9, ip}
     28c:	56050000 	strpl	r0, [r5], -r0
	__pi_systat.ondmns |= d;
     290:	00013c0a 	andeq	r3, r1, sl, lsl #24
     294:	00010400 	andeq	r0, r1, r0, lsl #8
}
     298:	00012208 	andeq	r2, r1, r8, lsl #4
     29c:	0002a800 	andeq	sl, r2, r0, lsl #16
void __pi_syserror (word ec, const char *m) {
     2a0:	00940900 	addseq	r0, r4, r0, lsl #18
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	001f0000 	andseq	r0, pc, r0
     2a8:	0005e512 	andeq	lr, r5, r2, lsl r5
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	05019000 	streq	r9, [r1, #-0]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2b0:	02eb0862 	rsceq	r0, fp, #6422528	; 0x620000
     2b4:	250b0000 	strcs	r0, [fp, #-0]
     2b8:	05000008 	streq	r0, [r0, #-8]
		all_leds_blink;
     2bc:	02eb1263 	rsceq	r1, fp, #805306374	; 0x30000006
     2c0:	0b000000 	bleq	2c8 <__pi_syserror+0x28>
     2c4:	0000039e 	muleq	r0, lr, r3
     2c8:	8d066405 	cfstrshi	mvf6, [r6, #-20]	; 0xffffffec
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	04000000 	streq	r0, [r0], #-0
     2d0:	0002030b 	andeq	r0, r2, fp, lsl #6
     2d4:	09660500 	stmdbeq	r6!, {r8, sl}^
     2d8:	000002f1 	strdeq	r0, [r0], -r1
     2dc:	002a0b08 	eoreq	r0, sl, r8, lsl #22
     2e0:	67050000 	strvs	r0, [r5, -r0]
	while (1) {
     2e4:	0002531e 	andeq	r5, r2, lr, lsl r3
     2e8:	11008800 	tstne	r0, r0, lsl #16
     2ec:	0002a804 	andeq	sl, r2, r4, lsl #16
     2f0:	03010800 	movweq	r0, #6144	; 0x1800
void tci_run_delay_timer () {
     2f4:	03010000 	movweq	r0, #4096	; 0x1000
	setdel = __pi_mintk - __pi_old;
     2f8:	94090000 	strls	r0, [r9], #-0
     2fc:	1f000000 	svcne	0x00000000
     300:	07041100 	streq	r1, [r4, -r0, lsl #2]
     304:	14000003 	strne	r0, [r0], #-3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     308:	074a0f01 	strbeq	r0, [sl, -r1, lsl #30]
     30c:	05080000 	streq	r0, [r8, #-0]
     310:	0331087a 	teqeq	r1, #7995392	; 0x7a0000
     314:	ce0b0000 	cdpgt	0, 0, cr0, cr11, cr0, {0}
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	05000004 	streq	r0, [r0, #-4]
	sti_tim;
     31c:	0331117b 	teqeq	r1, #-1073741794	; 0xc000001e
}
     320:	0b000000 	bleq	328 <tci_run_delay_timer+0x34>
     324:	000016a6 	andeq	r1, r0, r6, lsr #13
     328:	8d067c05 	stchi	12, cr7, [r6, #-20]	; 0xffffffec
     32c:	04000000 	streq	r0, [r0], #-0
     330:	38041100 	stmdacc	r4, {r8, ip}
	cli_aux;
     334:	0f000000 	svceq	0x00000000
     338:	00000319 	andeq	r0, r0, r9, lsl r3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     33c:	08ba0568 	ldmeq	sl!, {r3, r5, r6, r8, sl}
     340:	0000047a 	andeq	r0, r0, sl, ror r4
     344:	00705f10 	rsbseq	r5, r0, r0, lsl pc
     348:	3112bb05 	tstcc	r2, r5, lsl #22
	sti_aux;
     34c:	00000003 	andeq	r0, r0, r3
}
     350:	00725f10 	rsbseq	r5, r2, r0, lsl pc
     354:	8d07bc05 	stchi	12, cr11, [r7, #-20]	; 0xffffffec
     358:	04000000 	streq	r0, [r0], #-0
void AONRTCIntHandler () {
     35c:	00775f10 	rsbseq	r5, r7, r0, lsl pc
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     360:	8d07bd05 	stchi	13, cr11, [r7, #-20]	; 0xffffffec
     364:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	00019f0b 	andeq	r9, r1, fp, lsl #30
		if (__pi_utims [0] == 0)
     36c:	09be0500 	ldmibeq	lr!, {r8, sl}
     370:	0000003f 	andeq	r0, r0, pc, lsr r0
		if (*(__pi_utims [0])) {
     374:	05060b0c 	streq	r0, [r6, #-2828]	; 0xfffff4f4
     378:	bf050000 	svclt	0x00050000
			(*(__pi_utims [0]))--;
     37c:	00003f09 	andeq	r3, r0, r9, lsl #30
		if (__pi_utims [1] == 0)
     380:	5f100e00 	svcpl	0x00100e00
		if (*(__pi_utims [1])) {
     384:	05006662 	streq	r6, [r0, #-1634]	; 0xfffff99e
			aux_timer_inactive = 0;
     388:	030911c0 	movweq	r1, #37312	; 0x91c0
			(*(__pi_utims [1]))--;
     38c:	0b100000 	bleq	400394 <__ccfg+0x3e03ec>
		if (__pi_utims [2] == 0)
     390:	00000196 	muleq	r0, r6, r1
		if (*(__pi_utims [2])) {
     394:	8d07c105 	stfhid	f4, [r7, #-20]	; 0xffffffec
			(*(__pi_utims [2]))--;
     398:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
		if (__pi_utims [3] != 0) {
     39c:	0002080b 	andeq	r0, r2, fp, lsl #16
			if (*(__pi_utims [3])) {
     3a0:	0ac80500 	beq	ff2017a8 <_estack+0xdf1fc7a8>
				aux_timer_inactive = 0;
     3a4:	00000122 	andeq	r0, r0, r2, lsr #2
				(*(__pi_utims [3]))--;
     3a8:	16360b1c 			; <UNDEFINED> instruction: 0x16360b1c
	if (__pi_systat.ledsts) {
     3ac:	ca050000 	bgt	1403b4 <__ccfg+0x12040c>
     3b0:	0005ff09 	andeq	pc, r5, r9, lsl #30
		if (__pi_systat.ledblc++ == 0) {
     3b4:	fd0b2000 	stc2	0, cr2, [fp, #-0]
     3b8:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
			if (__pi_systat.ledblk) {
     3bc:	062a09cc 	strteq	r0, [sl], -ip, asr #19
     3c0:	0b240000 	bleq	9003c8 <__ccfg+0x8e0420>
     3c4:	00000836 	andeq	r0, r0, r6, lsr r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	4f0dcf05 	svcmi	0x000dcf05
     3cc:	28000006 	stmdacs	r0, {r1, r2}
				if (__pi_systat.ledsts & 0x2)
     3d0:	0015eb0b 	andseq	lr, r5, fp, lsl #22
     3d4:	09d00500 	ldmibeq	r0, {r8, sl}^
     3d8:	0000066a 	andeq	r0, r0, sl, ror #12
				if (__pi_systat.ledsts & 0x4)
     3dc:	755f102c 	ldrbvc	r1, [pc, #-44]	; 3b8 <AONRTCIntHandler+0x5c>
				__pi_systat.ledblk = 0;
     3e0:	d3050062 	movwle	r0, #20578	; 0x5062
     3e4:	00030911 	andeq	r0, r3, r1, lsl r9
			if (__pi_systat.fstblk)
     3e8:	5f103000 	svcpl	0x00103000
     3ec:	05007075 	streq	r7, [r0, #-117]	; 0xffffff8b
				__pi_systat.ledblc = 200;
     3f0:	033112d4 	teqeq	r1, #212, 4	; 0x4000000d
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f4:	10380000 	eorsne	r0, r8, r0
		cli_tim;
     3f8:	0072755f 	rsbseq	r7, r2, pc, asr r5
		__pi_new += setdel;
     3fc:	8d07d505 	cfstr32hi	mvfx13, [r7, #-20]	; 0xffffffec
     400:	3c000000 	stccc	0, cr0, [r0], {-0}
		setdel = 0;
     404:	00084d0b 	andeq	r4, r8, fp, lsl #26
		RISE_N_SHINE;
     408:	11d80500 	bicsne	r0, r8, r0, lsl #10
		__pi_new += setdel;
     40c:	00000670 	andeq	r0, r0, r0, ror r6
		RISE_N_SHINE;
     410:	07dc0b40 	ldrbeq	r0, [ip, r0, asr #22]
     414:	d9050000 	stmdble	r5, {}	; <UNPREDICTABLE>
		aux_timer_inactive = 1;
     418:	00068011 	andeq	r8, r6, r1, lsl r0
     41c:	5f104300 	svcpl	0x00104300
				if (__pi_systat.ledsts & 0x1)
     420:	0500626c 	streq	r6, [r0, #-620]	; 0xfffffd94
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     424:	030911dc 	movweq	r1, #37340	; 0x91dc
     428:	0b440000 	bleq	1100430 <__ccfg+0x10e0488>
				if (__pi_systat.ledsts & 0x2)
     42c:	00000688 	andeq	r0, r0, r8, lsl #13
     430:	8d07df05 	stchi	15, cr13, [r7, #-20]	; 0xffffffec
     434:	4c000000 	stcmi	0, cr0, [r0], {-0}
				if (__pi_systat.ledsts & 0x8)
     438:	0003500b 	andeq	r5, r3, fp
				__pi_systat.ledblk = 1;
     43c:	0ae00500 	beq	ff801844 <_estack+0xdf7fc844>
     440:	000000a8 	andeq	r0, r0, r8, lsr #1
		if (aux_timer_inactive) {
     444:	06230b50 			; <UNDEFINED> instruction: 0x06230b50
			cli_aux;
     448:	e3050000 	movw	r0, #20480	; 0x5000
     44c:	00049912 	andeq	r9, r4, r2, lsl r9
     450:	a00b5400 	andge	r5, fp, r0, lsl #8
     454:	05000006 	streq	r0, [r0, #-6]
     458:	01540ce7 	cmpeq	r4, r7, ror #25
     45c:	0b580000 	bleq	1600464 <__ccfg+0x15e04bc>
     460:	000005ed 	andeq	r0, r0, sp, ror #11
     464:	160ee905 	strne	lr, [lr], -r5, lsl #18
     468:	5c000001 	stcpl	0, cr0, [r0], {1}
     46c:	0008080b 	andeq	r0, r8, fp, lsl #16
word tci_update_delay_ticks (Boolean force) {
     470:	07ea0500 	strbeq	r0, [sl, r0, lsl #10]!
	cli_tim;
     474:	0000008d 	andeq	r0, r0, sp, lsl #1
     478:	01150064 	tsteq	r5, r4, rrx
	if (setdel) {
     47c:	0000008d 	andeq	r0, r0, sp, lsl #1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	00000499 	muleq	r0, r9, r4
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     484:	00049916 	andeq	r9, r4, r6, lsl r9
     488:	01221600 			; <UNDEFINED> instruction: 0x01221600
     48c:	ed160000 	ldc	0, cr0, [r6, #-0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     490:	16000005 	strne	r0, [r0], -r5
				AON_RTC_O_CH0CMP)) - gettav ());
     494:	0000008d 	andeq	r0, r0, sp, lsl #1
	return NO;
     498:	a4041100 	strge	r1, [r4], #-256	; 0xffffff00
			setdel = 0;
     49c:	17000004 	strne	r0, [r0, -r4]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     4a0:	00000499 	muleq	r0, r9, r4
     4a4:	0007a018 	andeq	sl, r7, r8, lsl r0
}
     4a8:	05042800 	streq	r2, [r4, #-2048]	; 0xfffff800
		sti_tim;
     4ac:	ed080265 	sfm	f0, 4, [r8, #-404]	; 0xfffffe6c
		return YES;
     4b0:	19000005 	stmdbne	r0, {r0, r2}
     4b4:	0000057f 	andeq	r0, r0, pc, ror r5
     4b8:	07026705 	streq	r6, [r2, -r5, lsl #14]
     4bc:	0000008d 	andeq	r0, r0, sp, lsl #1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	04aa1900 	strteq	r1, [sl], #2304	; 0x900
	UARTDisable (UART0_BASE);
     4c4:	6c050000 	stcvs	0, cr0, [r5], {-0}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	06dc0b02 	ldrbeq	r0, [ip], r2, lsl #22
	UARTDisable (UART0_BASE);
     4cc:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	000001e9 	andeq	r0, r0, r9, ror #3
     4d4:	14026c05 	strne	r6, [r2], #-3077	; 0xfffff3fb
     4d8:	000006dc 	ldrdeq	r0, [r0], -ip
     4dc:	083c1908 	ldmdaeq	ip!, {r3, r8, fp, ip}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	6c050000 	stcvs	0, cr0, [r5], {-0}
     4e4:	06dc1e02 	ldrbeq	r1, [ip], r2, lsl #28
     4e8:	190c0000 	stmdbne	ip, {}	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	00000399 	muleq	r0, r9, r3
     4f0:	07026e05 	streq	r6, [r2, -r5, lsl #28]
     4f4:	0000008d 	andeq	r0, r0, sp, lsl #1
	urates [0] = rate;
     4f8:	03601910 	cmneq	r0, #16, 18	; 0x40000
}
     4fc:	6f050000 	svcvs	0x00050000
     500:	08dc0802 	ldmeq	ip, {r1, fp}^
     504:	19140000 	ldmdbne	r4, {}	; <UNPREDICTABLE>
     508:	000007ef 	andeq	r0, r0, pc, ror #15
     50c:	07027205 	streq	r7, [r2, -r5, lsl #4]
     510:	0000008d 	andeq	r0, r0, sp, lsl #1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     514:	07861930 			; <UNDEFINED> instruction: 0x07861930
     518:	73050000 	movwvc	r0, #20480	; 0x5000
     51c:	08f21602 	ldmeq	r2!, {r1, r9, sl, ip}^
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	19340000 	ldmdbne	r4!, {}	; <UNPREDICTABLE>
     524:	00000497 	muleq	r0, r7, r4
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     528:	07027505 	streq	r7, [r2, -r5, lsl #10]
     52c:	0000008d 	andeq	r0, r0, sp, lsl #1
	__pi_uart_setrate (urates [0], __pi_uart);
     530:	05431938 	strbeq	r1, [r3, #-2360]	; 0xfffff6c8
     534:	77050000 	strvc	r0, [r5, -r0]
     538:	09040a02 	stmdbeq	r4, {r1, r9, fp}
     53c:	193c0000 	ldmdbne	ip!, {}	; <UNPREDICTABLE>
     540:	00000253 	andeq	r0, r0, r3, asr r2
     544:	13027a05 	movwne	r7, #10757	; 0x2a05
     548:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
	switch (operation) {
     54c:	02df1940 	sbcseq	r1, pc, #64, 18	; 0x100000
static int ioreq_uart_a (int operation, char *buf, int len) {
     550:	7b050000 	blvc	140558 <__ccfg+0x1205b0>
     554:	008d0702 	addeq	r0, sp, r2, lsl #14
     558:	19440000 	stmdbne	r4, {}^	; <UNPREDICTABLE>
     55c:	000003c8 	andeq	r0, r0, r8, asr #7
     560:	13027c05 	movwne	r7, #11269	; 0x2c05
				*buf++ = uart_a_read;
     564:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     568:	04d41948 	ldrbeq	r1, [r4], #2376	; 0x948
			while (len && uart_a_char_available) {
     56c:	7d050000 	stcvc	0, cr0, [r5, #-0]
     570:	090a1402 	stmdbeq	sl, {r1, sl, ip}
     574:	194c0000 	stmdbne	ip, {}^	; <UNPREDICTABLE>
			if (len != operation) {
     578:	0000066e 	andeq	r0, r0, lr, ror #12
}
     57c:	07028005 	streq	r8, [r2, -r5]
     580:	0000008d 	andeq	r0, r0, sp, lsl #1
			uart_a_disable_int;
     584:	06f31950 	usateq	r1, #19, r0, asr #18
			if (uart_a_char_available) {
     588:	81050000 	mrshi	r0, (UNDEF: 5)
				*buf++ = uart_a_read;
     58c:	05ed0902 	strbeq	r0, [sp, #2306]!	; 0x902
			uart_a_disable_int;
     590:	19540000 	ldmdbne	r4, {}^	; <UNPREDICTABLE>
     594:	0000070d 	andeq	r0, r0, sp, lsl #14
			if (uart_a_char_available) {
     598:	0702a405 	streq	sl, [r2, -r5, lsl #8]
     59c:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
				uart_a_enable_int;
     5a0:	05e51a58 	strbeq	r1, [r5, #2648]!	; 0xa58
     5a4:	a8050000 	stmdage	r5, {}	; <UNPREDICTABLE>
				goto Redo_rx;
     5a8:	02eb1302 	rsceq	r1, fp, #134217728	; 0x8000000
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5ac:	01480000 	mrseq	r0, (UNDEF: 72)
     5b0:	0004441a 	andeq	r4, r4, sl, lsl r4
			return -2;
     5b4:	02a90500 	adceq	r0, r9, #0, 10
     5b8:	0002a812 	andeq	sl, r2, r2, lsl r8
				uart_a_write (*buf);
     5bc:	1a014c00 	bne	535c4 <__ccfg+0x3361c>
     5c0:	0000042b 	andeq	r0, r0, fp, lsr #8
			while (len && uart_a_room_in_tx) {
     5c4:	0c02ad05 	stceq	13, cr10, [r2], {5}
     5c8:	0000091c 	andeq	r0, r0, ip, lsl r9
     5cc:	631a02dc 	tstvs	sl, #220, 4	; 0xc000000d
			if (len != operation) {
     5d0:	05000007 	streq	r0, [r0, #-7]
			uart_a_disable_int;
     5d4:	9d1002b2 	lfmls	f0, 4, [r0, #-712]	; 0xfffffd38
     5d8:	e0000006 	and	r0, r0, r6
			if (uart_a_room_in_tx) {
     5dc:	060f1a02 	streq	r1, [pc], -r2, lsl #20
     5e0:	b4050000 	strlt	r0, [r5], #-0
				uart_a_enable_int;
     5e4:	09280a02 	stmdbeq	r8!, {r1, r9, fp}
     5e8:	02ec0000 	rsceq	r0, ip, #0
				*buf++ = uart_a_read;
     5ec:	f3041100 	vrhadd.u8	d1, d4, d0
			if (uart_a_room_in_tx) {
     5f0:	02000005 	andeq	r0, r0, #5
				uart_a_write (*buf);
     5f4:	07040801 	streq	r0, [r4, -r1, lsl #16]
     5f8:	f3170000 	vhadd.u16	d0, d7, d0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5fc:	11000005 	tstne	r0, r5
     600:	00047a04 	andeq	r7, r4, r4, lsl #20
			uart_a_enable_int;
     604:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
     608:	24000000 	strcs	r0, [r0], #-0
     60c:	16000006 	strne	r0, [r0], -r6
			return 0;
     610:	00000499 	muleq	r0, r9, r4
			if (len == UART_CNTRL_SETRATE) {
     614:	00012216 	andeq	r2, r1, r6, lsl r2
				if (__pi_uart_setrate (*((word*)buf),
     618:	06241600 	strteq	r1, [r4], -r0, lsl #12
     61c:	8d160000 	ldchi	0, cr0, [r6, #-0]
     620:	00000000 	andeq	r0, r0, r0
				syserror (EREQPAR, "uar");
     624:	05fa0411 	ldrbeq	r0, [sl, #1041]!	; 0x411
			syserror (ENOOPER, "uai");
     628:	04110000 	ldreq	r0, [r1], #-0
			if (len == UART_CNTRL_GETRATE) {
     62c:	00000605 	andeq	r0, r0, r5, lsl #12
				return 1;
     630:	00b40115 	adcseq	r0, r4, r5, lsl r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     634:	064f0000 	strbeq	r0, [pc], -r0
			syserror (ENOOPER, "uai");
     638:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
     63c:	16000004 	strne	r0, [r0], -r4
     640:	00000122 	andeq	r0, r0, r2, lsr #2
     644:	0000b416 	andeq	fp, r0, r6, lsl r4
     648:	008d1600 	addeq	r1, sp, r0, lsl #12
     64c:	11000000 	mrsne	r0, (UNDEF: 0)
     650:	00063004 	andeq	r3, r6, r4
     654:	8d011500 	cfstr32hi	mvfx1, [r1, #-0]
     658:	6a000000 	bvs	660 <UART0IntHandler+0x4>
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     65c:	16000006 	strne	r0, [r0], -r6
void UART0IntHandler () {
     660:	00000499 	muleq	r0, r9, r4
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	00012216 	andeq	r2, r1, r6, lsl r2
     668:	04110000 	ldreq	r0, [r1], #-0
     66c:	00000655 	andeq	r0, r0, r5, asr r6
     670:	00003808 	andeq	r3, r0, r8, lsl #16
     674:	00068000 	andeq	r8, r6, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     678:	00940900 	addseq	r0, r4, r0, lsl #18
     67c:	00020000 	andeq	r0, r2, r0
		RISE_N_SHINE;
     680:	00003808 	andeq	r3, r0, r8, lsl #16
     684:	00069000 	andeq	r9, r6, r0
		i_trigger (devevent (UART_A, READ));
     688:	00940900 	addseq	r0, r4, r0, lsl #18
     68c:	00000000 	andeq	r0, r0, r0
     690:	00033e05 	andeq	r3, r3, r5, lsl #28
     694:	01240500 			; <UNDEFINED> instruction: 0x01240500
     698:	00033718 	andeq	r3, r3, r8, lsl r7
     69c:	07581b00 	ldrbeq	r1, [r8, -r0, lsl #22]
     6a0:	050c0000 	streq	r0, [ip, #-0]
     6a4:	d6080128 	strle	r0, [r8], -r8, lsr #2
     6a8:	19000006 	stmdbne	r0, {r1, r2}
     6ac:	00000825 	andeq	r0, r0, r5, lsr #16
     6b0:	11012a05 	tstne	r1, r5, lsl #20
     6b4:	000006d6 	ldrdeq	r0, [r0], -r6
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b8:	06c01900 	strbeq	r1, [r0], r0, lsl #18
     6bc:	2b050000 	blcs	1406c4 <__ccfg+0x12071c>
     6c0:	008d0701 	addeq	r0, sp, r1, lsl #14
		i_trigger (devevent (UART_A, WRITE));
     6c4:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	0000048a 	andeq	r0, r0, sl, lsl #9
     6cc:	0b012c05 	bleq	4b6e8 <__ccfg+0x2b740>
		RISE_N_SHINE;
     6d0:	000006dc 	ldrdeq	r0, [r0], -ip
     6d4:	04110008 	ldreq	r0, [r1], #-8
     6d8:	0000069d 	muleq	r0, sp, r6
		i_trigger (devevent (UART_A, WRITE));
     6dc:	06900411 			; <UNDEFINED> instruction: 0x06900411
     6e0:	d71b0000 	ldrle	r0, [fp, -r0]
     6e4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     6e8:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
     6ec:	0000071b 	andeq	r0, r0, fp, lsl r7
     6f0:	000f5f19 	andeq	r5, pc, r9, lsl pc	; <UNPREDICTABLE>
     6f4:	01450500 	cmpeq	r5, r0, lsl #10
     6f8:	00071b12 	andeq	r1, r7, r2, lsl fp
     6fc:	de190000 	cdple	0, 1, cr0, cr9, cr0, {0}
     700:	05000004 	streq	r0, [r0, #-4]
     704:	1b120146 	blne	480c24 <__ccfg+0x460c7c>
}
     708:	06000007 	streq	r0, [r0], -r7
     70c:	000e0419 	andeq	r0, lr, r9, lsl r4
     710:	01470500 	cmpeq	r7, r0, lsl #10
     714:	00005212 	andeq	r5, r0, r2, lsl r2
     718:	08000c00 	stmdaeq	r0, {sl, fp}
void __buttons_setirq (int val) {
     71c:	00000052 	andeq	r0, r0, r2, asr r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	0000072b 	andeq	r0, r0, fp, lsr #14
     724:	00009409 	andeq	r9, r0, r9, lsl #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	1c000200 	sfmne	f0, 4, [r0], {-0}
     72c:	028505d0 	addeq	r0, r5, #208, 10	; 0x34000000
     730:	00084007 	andeq	r4, r8, r7
		bn = BUTTON_GPIO (__button_list [i]);
     734:	07e21900 	strbeq	r1, [r2, r0, lsl #18]!
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     738:	87050000 	strhi	r0, [r5, -r0]
     73c:	00941802 	addseq	r1, r4, r2, lsl #16
     740:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
     744:	0000076b 	andeq	r0, r0, fp, ror #14
     748:	12028805 	andne	r8, r2, #327680	; 0x50000
     74c:	000005ed 	andeq	r0, r0, sp, ror #11
}
     750:	030c1904 	movweq	r1, #51460	; 0xc904
     754:	89050000 	stmdbhi	r5, {}	; <UNPREDICTABLE>
     758:	08401002 	stmdaeq	r0, {r1, ip}^
     75c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
void __pinlist_setirq (int val) {
     760:	0000064d 	andeq	r0, r0, sp, asr #12
	for (i = 0; i < N_PINLIST; i++) {
     764:	17028a05 	strne	r8, [r2, -r5, lsl #20]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     768:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     76c:	04b11924 	ldrteq	r1, [r1], #2340	; 0x924
	for (i = 0; i < N_PINLIST; i++) {
     770:	8b050000 	blhi	140778 <__ccfg+0x1207d0>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     774:	008d0f02 	addeq	r0, sp, r2, lsl #30
     778:	19480000 	stmdbne	r8, {}^	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77c:	00000820 	andeq	r0, r0, r0, lsr #16
     780:	2c028c05 	stccs	12, cr8, [r2], {5}
     784:	0000007a 	andeq	r0, r0, sl, ror r0
	for (i = 0; i < N_PINLIST; i++) {
     788:	004e1950 	subeq	r1, lr, r0, asr r9
}
     78c:	8d050000 	stchi	0, cr0, [r5, #-0]
     790:	06e21a02 	strbteq	r1, [r2], r2, lsl #20
     794:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
     798:	00000400 	andeq	r0, r0, r0, lsl #8
void GPIOIntHandler () {
     79c:	16028e05 	strne	r8, [r2], -r5, lsl #28
if (buttons_int) {
     7a0:	00000116 	andeq	r0, r0, r6, lsl r1
     7a4:	07781968 	ldrbeq	r1, [r8, -r8, ror #18]!
	buttons_disable ();
     7a8:	8f050000 	svchi	0x00050000
     7ac:	01161602 	tsteq	r6, r2, lsl #12
	i_trigger ((aword)&__button_list);
     7b0:	19700000 	ldmdbne	r0!, {}^	; <UNPREDICTABLE>
     7b4:	00000038 	andeq	r0, r0, r8, lsr r0
     7b8:	16029005 	strne	r9, [r2], -r5
     7bc:	00000116 	andeq	r0, r0, r6, lsl r1
     7c0:	067e1978 			; <UNDEFINED> instruction: 0x067e1978
     7c4:	91050000 	mrsls	r0, (UNDEF: 5)
     7c8:	08501002 	ldmdaeq	r0, {r1, ip}^
     7cc:	19800000 	stmibne	r0, {}	; <UNPREDICTABLE>
     7d0:	000002e9 	andeq	r0, r0, r9, ror #5
     7d4:	10029205 	andne	r9, r2, r5, lsl #4
     7d8:	00000860 	andeq	r0, r0, r0, ror #16
	RISE_N_SHINE;
     7dc:	07301988 	ldreq	r1, [r0, -r8, lsl #19]!
     7e0:	93050000 	movwls	r0, #20480	; 0x5000
     7e4:	008d0f02 	addeq	r0, sp, r2, lsl #30
if (pin_sensor_int) {
     7e8:	19a00000 	stmibne	r0!, {}	; <UNPREDICTABLE>
     7ec:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
	i_trigger ((aword)(&__input_pins));
     7f0:	16029405 	strne	r9, [r2], -r5, lsl #8
     7f4:	00000116 	andeq	r0, r0, r6, lsl r1
     7f8:	043519a4 	ldrteq	r1, [r5], #-2468	; 0xfffff65c
     7fc:	95050000 	strls	r0, [r5, #-0]
     800:	01161602 	tsteq	r6, r2, lsl #12
     804:	19ac0000 	stmibne	ip!, {}	; <UNPREDICTABLE>
     808:	000003a3 	andeq	r0, r0, r3, lsr #7
     80c:	16029605 	strne	r9, [r2], -r5, lsl #12
     810:	00000116 	andeq	r0, r0, r6, lsl r1
     814:	04f719b4 	ldrbteq	r1, [r7], #2484	; 0x9b4
     818:	97050000 	strls	r0, [r5, -r0]
	__pinsen_disable_and_clear;
     81c:	01161602 	tsteq	r6, r2, lsl #12
	RISE_N_SHINE;
     820:	19bc0000 	ldmibne	ip!, {}	; <UNPREDICTABLE>
     824:	000003ef 	andeq	r0, r0, pc, ror #7
     828:	16029805 	strne	r9, [r2], -r5, lsl #16
}
     82c:	00000116 	andeq	r0, r0, r6, lsl r1
     830:	057d19c4 	ldrbeq	r1, [sp, #-2500]!	; 0xfffff63c
     834:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     838:	008d0802 	addeq	r0, sp, r2, lsl #16
     83c:	00cc0000 	sbceq	r0, ip, r0
void system_init () {
     840:	0005f308 	andeq	pc, r5, r8, lsl #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	00085000 	andeq	r5, r8, r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     848:	00940900 	addseq	r0, r4, r0, lsl #18
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	00190000 	andseq	r0, r9, r0
     850:	0005f308 	andeq	pc, r5, r8, lsl #6
     854:	00086000 	andeq	r6, r8, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     858:	00940900 	addseq	r0, r4, r0, lsl #18
     85c:	00070000 	andeq	r0, r7, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	0005f308 	andeq	pc, r5, r8, lsl #6
     864:	00087000 	andeq	r7, r8, r0
     868:	00940900 	addseq	r0, r4, r0, lsl #18
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	00170000 	andseq	r0, r7, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     870:	9e05f01c 	mcrls	0, 0, pc, cr5, cr12, {0}	; <UNPREDICTABLE>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     874:	08970702 	ldmeq	r7, {r1, r8, r9, sl}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     878:	d0190000 	andsle	r0, r9, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87c:	05000002 	streq	r0, [r0, #-2]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     880:	971b02a1 	ldrls	r0, [fp, -r1, lsr #5]
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	00000008 	andeq	r0, r0, r8
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	00084419 	andeq	r4, r8, r9, lsl r4
		pin = (port_confs [i] >> 19) & 0x1f;
     88c:	02a20500 	adceq	r0, r2, #0, 10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     890:	0008a718 	andeq	sl, r8, r8, lsl r7
     894:	08007800 	stmdaeq	r0, {fp, ip, sp, lr}
     898:	00000331 	andeq	r0, r0, r1, lsr r3
     89c:	000008a7 	andeq	r0, r0, r7, lsr #17
		if (port_confs [i] & 0x80)
     8a0:	00009409 	andeq	r9, r0, r9, lsl #8
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a4:	08001d00 	stmdaeq	r0, {r8, sl, fp, ip}
     8a8:	00000094 	muleq	r0, r4, r0
		if (port_confs [i] & 0x40)
     8ac:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	00009409 	andeq	r9, r0, r9, lsl #8
     8b4:	1d001d00 	stcne	13, cr1, [r0, #-0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b8:	028305f0 	addeq	r0, r3, #240, 10	; 0x3c000000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8bc:	0008dc03 	andeq	sp, r8, r3, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8c0:	07a01e00 	streq	r1, [r0, r0, lsl #28]!
	all_leds_blink;
     8c4:	9a050000 	bls	1408cc <__ccfg+0x120924>
     8c8:	072b0b02 	streq	r0, [fp, -r2, lsl #22]!
     8cc:	5c1e0000 	ldcpl	0, cr0, [lr], {-0}
     8d0:	05000006 	streq	r0, [r0, #-6]
     8d4:	700b02a3 	andvc	r0, fp, r3, lsr #5
     8d8:	00000008 	andeq	r0, r0, r8
     8dc:	0005f308 	andeq	pc, r5, r8, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8e0:	0008ec00 	andeq	lr, r8, r0, lsl #24
     8e4:	00940900 	addseq	r0, r4, r0, lsl #18
     8e8:	00180000 	andseq	r0, r8, r0
     8ec:	00082b1f 	andeq	r2, r8, pc, lsl fp
     8f0:	04110100 	ldreq	r0, [r1], #-256	; 0xffffff00
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	000008ec 	andeq	r0, r0, ip, ror #17
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8f8:	09040120 	stmdbeq	r4, {r5, r8}
     8fc:	99160000 	ldmdbls	r6, {}	; <UNPREDICTABLE>
	IntEnable (INT_AON_RTC_COMB);
     900:	00000004 	andeq	r0, r0, r4
     904:	08f80411 	ldmeq	r8!, {r0, r4, sl}^
     908:	04110000 	ldreq	r0, [r1], #-0
	__pi_malloc_init ();
     90c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
	IntEnable (INT_AON_GPIO_EDGE);
     910:	091c0120 	ldmdbeq	ip, {r5, r8}
     914:	8d160000 	ldchi	0, cr0, [r6, #-0]
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     918:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     91c:	09220411 	stmdbeq	r2!, {r0, r4, sl}
     920:	04110000 	ldreq	r0, [r1], #-0
     924:	00000910 	andeq	r0, r0, r0, lsl r9
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     928:	00069008 	andeq	r9, r6, r8
     92c:	00093800 	andeq	r3, r9, r0, lsl #16
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     930:	00940900 	addseq	r0, r4, r0, lsl #18
     934:	00020000 	andeq	r0, r2, r0
     938:	00063721 	andeq	r3, r6, r1, lsr #14
	urates [0] = UART_RATE / 100;
     93c:	03330500 	teqeq	r3, #0, 10
     940:	00049917 	andeq	r9, r4, r7, lsl r9
	reinit_uart ();
     944:	21010100 	mrscs	r0, (UNDEF: 17)
	EXTRA_INITIALIZERS;
     948:	00000630 	andeq	r0, r0, r0, lsr r6
     94c:	1d033405 	cfstrsne	mvf3, [r3, #-20]	; 0xffffffec
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     950:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     954:	66030101 	strvs	r0, [r3], -r1, lsl #2
     958:	07000006 	streq	r0, [r0, -r6]
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     95c:	002c1318 	eoreq	r1, ip, r8, lsl r3
     960:	35030000 	strcc	r0, [r3, #-0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     964:	07000003 	streq	r0, [r0, -r3]
     968:	00461424 	subeq	r1, r6, r4, lsr #8
			devinit [i] . init (devinit [i] . param);
     96c:	14030000 	strne	r0, [r3], #-0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     970:	07000007 	streq	r0, [r0, -r7]
     974:	00601430 	rsbeq	r1, r0, r0, lsr r4
     978:	90030000 	andls	r0, r3, r0
	IntEnable (INT_UART0_COMB);
     97c:	08000004 	stmdaeq	r0, {r2}
     980:	00811971 	addeq	r1, r1, r1, ror r9
}
     984:	6b030000 	blvs	c098c <__ccfg+0xa09e4>
	tci_run_auxiliary_timer ();
     988:	09000003 	stmdbeq	r0, {r0, r1}
		diag ("");
     98c:	01241b28 			; <UNDEFINED> instruction: 0x01241b28
     990:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     994:	09000006 	stmdbeq	r0, {r1, r2}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     998:	09861863 	stmibeq	r6, {r0, r1, r5, r6, fp, ip}
		diag ("Leftover RAM: %d bytes",
     99c:	ba030000 	blt	c09a4 <__ccfg+0xa09fc>
     9a0:	0a000005 	beq	9bc <system_init+0x17c>
     9a4:	09561126 	ldmdbeq	r6, {r1, r2, r5, r8, ip}^
     9a8:	00030000 	andeq	r0, r3, r0
     9ac:	0a000021 	beq	a38 <__pi_release+0x40>
     9b0:	09621227 	stmdbeq	r2!, {r0, r1, r2, r5, r9, ip}^
     9b4:	aa170000 	bge	5c09bc <__ccfg+0x5a0a14>
     9b8:	22000009 	andcs	r0, r0, #9
     9bc:	000009aa 	andeq	r0, r0, sl, lsr #19
     9c0:	0016c803 	andseq	ip, r6, r3, lsl #16
     9c4:	112b0a00 			; <UNDEFINED> instruction: 0x112b0a00
     9c8:	00000956 	andeq	r0, r0, r6, asr r9
     9cc:	0009c022 	andeq	ip, r9, r2, lsr #32
     9d0:	21510300 	cmpcs	r1, r0, lsl #6
     9d4:	2c0a0000 	stccs	0, cr0, [sl], {-0}
     9d8:	00096e12 	andeq	r6, r9, r2, lsl lr
     9dc:	09d11700 	ldmibeq	r1, {r8, r9, sl, ip}^
     9e0:	0d030000 	stceq	0, cr0, [r3, #-0]
     9e4:	0a000004 	beq	9fc <__pi_release+0x4>
     9e8:	096e122d 	stmdbeq	lr!, {r0, r2, r3, r5, r9, ip}^
     9ec:	a6030000 	strge	r0, [r3], -r0
     9f0:	0a000006 	beq	a10 <__pi_release+0x18>
     9f4:	09fa0f2e 	ldmibeq	sl!, {r1, r2, r3, r5, r8, r9, sl, fp}^
__attribute__ ((noreturn)) void __pi_release () {
     9f8:	04110000 	ldreq	r0, [r1], #-0
     9fc:	000009aa 	andeq	r0, r0, sl, lsr #19
     a00:	320a080a 	andcc	r0, sl, #655360	; 0xa0000
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a04:	000a8e09 	andeq	r8, sl, r9, lsl #28
	check_stack_overflow;
     a08:	00232300 	eoreq	r2, r3, r0, lsl #6
     a0c:	340a0000 	strcc	r0, [sl], #-0
     a10:	0009c007 	andeq	ip, r9, r7
	update_n_wake (MAX_WORD, NO);
     a14:	07010100 	streq	r0, [r1, -r0, lsl #2]
     a18:	04132300 	ldreq	r2, [r3], #-768	; 0xfffffd00
     a1c:	350a0000 	strcc	r0, [sl, #-0]
	for_all_tasks (__pi_curr) {
     a20:	0009c003 	andeq	ip, r9, r3
     a24:	06010100 	streq	r0, [r1], -r0, lsl #2
     a28:	01cb2300 	biceq	r2, fp, r0, lsl #6
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	360a0000 	strcc	r0, [sl], -r0
	__SLEEP;
     a30:	0009c003 	andeq	ip, r9, r3
     a34:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     a38:	044d2300 	strbeq	r2, [sp], #-768	; 0xfffffd00
     a3c:	370a0000 	strcc	r0, [sl, -r0]
	system_event_count ++;
     a40:	0009c003 	andeq	ip, r9, r3
     a44:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
	switch (__pi_systat.effpdm) {
     a48:	06082300 	streq	r2, [r8], -r0, lsl #6
     a4c:	380a0000 	stmdacc	sl, {}	; <UNPREDICTABLE>
     a50:	0009c003 	andeq	ip, r9, r3
     a54:	00040100 	andeq	r0, r4, r0, lsl #2
			__WFI ();
     a58:	041a0b00 	ldreq	r0, [sl], #-2816	; 0xfffff500
     a5c:	3a0a0000 	bcc	280a64 <__ccfg+0x260abc>
     a60:	0009c007 	andeq	ip, r9, r7
	check_stack_overflow;
     a64:	760b0100 	strvc	r0, [fp], -r0, lsl #2
     a68:	0a000005 	beq	a84 <__pi_release+0x8c>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     a6c:	09c0033c 	stmibeq	r0, {r2, r3, r4, r5, r8, r9}^
     a70:	0b020000 	bleq	80a78 <__ccfg+0x60ad0>
			(__pi_curr->code) (tstate (__pi_curr));
     a74:	00000853 	andeq	r0, r0, r3, asr r8
			goto Redo;
     a78:	c0033d0a 	andgt	r3, r3, sl, lsl #26
	for_all_tasks (__pi_curr) {
     a7c:	03000009 	movweq	r0, #9
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	00058e0b 	andeq	r8, r5, fp, lsl #28
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a84:	083f0a00 	ldmdaeq	pc!, {r9, fp}	; <UNPREDICTABLE>
     a88:	000009d1 	ldrdeq	r0, [r0], -r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     a8c:	19030004 	stmdbne	r3, {r2}
     a90:	0a000002 	beq	aa0 <__pi_release+0xa8>
     a94:	0a000341 	beq	17a0 <__inserial+0x118>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a98:	8e220000 	cdphi	0, 2, cr0, cr2, cr0, {0}
     a9c:	2400000a 	strcs	r0, [r0], #-10
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     aa0:	00000454 	andeq	r0, r0, r4, asr r4
     aa4:	9a1a430a 	bls	6916d4 <__ccfg+0x67172c>
			__WFI ();
     aa8:	0100000a 	tsteq	r0, sl
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     aac:	01672401 	cmneq	r7, r1, lsl #8
     ab0:	450a0000 	strmi	r0, [sl, #-0]
}
     ab4:	0005ed0e 	andeq	lr, r5, lr, lsl #26
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	24010100 	strcs	r0, [r1], #-256	; 0xffffff00
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     abc:	00000222 	andeq	r0, r0, r2, lsr #4
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ac0:	ed1e450a 	cfldr32	mvfx4, [lr, #-40]	; 0xffffffd8
     ac4:	01000005 	tsteq	r0, r5
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac8:	0b080a01 	bleq	2032d4 <__ccfg+0x1e332c>
     acc:	0afa098f 	beq	ffe83110 <_estack+0xdfe7e110>
     ad0:	cf0b0000 	svcgt	0x000b0000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ad4:	0b000004 	bleq	aec <__pi_release+0xf4>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad8:	096e0b90 	stmdbeq	lr!, {r4, r7, r8, r9, fp}^
     adc:	0b000000 	bleq	ae4 <__pi_release+0xec>
     ae0:	00000985 	andeq	r0, r0, r5, lsl #19
     ae4:	aa07910b 	bge	1e4f18 <__ccfg+0x1c4f70>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ae8:	04000009 	streq	r0, [r0], #-9
     aec:	0001a00b 	andeq	sl, r1, fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	10920b00 	addsne	r0, r2, r0, lsl #22
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     af4:	000009cc 	andeq	r0, r0, ip, asr #19
     af8:	51030006 	tstpl	r3, r6
     afc:	0b000007 	bleq	b20 <__pi_release+0x128>
     b00:	0ac90393 	beq	ff241954 <_estack+0xdf23c954>
     b04:	fa080000 	blx	200b0c <__ccfg+0x1e0b64>
			SysCtrlSetRechargeBeforePowerDown
     b08:	1100000a 	tstne	r0, sl
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b0c:	2500000b 	strcs	r0, [r0, #-11]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b10:	059a2400 	ldreq	r2, [sl, #1024]	; 0x400
     b14:	990b0000 	stmdbls	fp, {}	; <UNPREDICTABLE>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	000b060f 	andeq	r0, fp, pc, lsl #12
     b1c:	0a010100 	beq	40f24 <__ccfg+0x20f7c>
     b20:	09910c01 	ldmibeq	r1, {r0, sl, fp}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b24:	00000b49 	andeq	r0, r0, r9, asr #22
     b28:	00059523 	andeq	r9, r5, r3, lsr #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	07930c00 	ldreq	r0, [r3, r0, lsl #24]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	000009c0 	andeq	r0, r0, r0, asr #19
     b34:	00010701 	andeq	r0, r1, r1, lsl #14
     b38:	0003b423 	andeq	fp, r3, r3, lsr #8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b3c:	03940c00 	orrseq	r0, r4, #0, 24
			while (!(AONWUCPowerStatusGet () &
     b40:	000009c0 	andeq	r0, r0, r0, asr #19
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b44:	00000101 	andeq	r0, r0, r1, lsl #2
     b48:	061a0300 	ldreq	r0, [sl], -r0, lsl #6
     b4c:	960c0000 	strls	r0, [ip], -r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b50:	000b1f03 	andeq	r1, fp, r3, lsl #30
     b54:	0b491700 	bleq	124675c <__ccfg+0x12267b4>
     b58:	55080000 	strpl	r0, [r8, #-0]
     b5c:	6500000b 	strvs	r0, [r0, #-11]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	2500000b 	strcs	r0, [r0, #-11]
     b64:	0b5a1700 	bleq	168676c <__ccfg+0x16667c4>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b68:	ba240000 	blt	900b70 <__ccfg+0x8e0bc8>
     b6c:	0c000002 	stceq	0, cr0, [r0], {2}
			SysCtrlAdjustRechargeAfterPowerDown ();
     b70:	0b65179c 	bleq	19469e8 <__ccfg+0x1926a40>
			reinit_uart ();
     b74:	01010000 	mrseq	r0, (UNDEF: 1)
     b78:	0009b608 	andeq	fp, r9, r8, lsl #12
     b7c:	000b8300 	andeq	r8, fp, r0, lsl #6
}
     b80:	17002500 	strne	r2, [r0, -r0, lsl #10]
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     b84:	00000b78 	andeq	r0, r0, r8, ror fp
     b88:	0003cd24 	andeq	ip, r3, r4, lsr #26
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b8c:	13060d00 	movwne	r0, #27904	; 0x6d00
     b90:	00000b83 	andeq	r0, r0, r3, lsl #23
     b94:	58240101 	stmdapl	r4!, {r0, r8}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	0b000005 	bleq	bb4 <__pi_release+0x1bc>
     b9c:	09d10ec3 	ldmibeq	r1, {r0, r1, r6, r7, r9, sl, fp}^
     ba0:	01010000 	mrseq	r0, (UNDEF: 1)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ba4:	00071d05 	andeq	r1, r7, r5, lsl #26
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     ba8:	016e0e00 	cmneq	lr, r0, lsl #28
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     bac:	000bb110 	andeq	fp, fp, r0, lsl r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	b7041100 	strlt	r1, [r4, -r0, lsl #2]
     bb4:	2000000b 	andcs	r0, r0, fp
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     bb8:	000bc301 	andeq	ip, fp, r1, lsl #6
     bbc:	09aa1600 	stmibeq	sl!, {r9, sl, ip}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     bc4:	000005fa 	strdeq	r0, [r0], -sl
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc8:	00000bce 	andeq	r0, r0, lr, asr #23
     bcc:	c3170025 	tstgt	r7, #37	; 0x25
			PRCMPowerDomainOff (
     bd0:	2100000b 	tstcs	r0, fp
     bd4:	000005c2 	andeq	r0, r0, r2, asr #11
	__SLEEP;
     bd8:	13017f0e 	movwne	r7, #7950	; 0x1f0e
     bdc:	00000bce 	andeq	r0, r0, lr, asr #23
  __ASM volatile ("cpsie i" : : : "memory");
     be0:	9d210101 	stflss	f0, [r1, #-4]!
	goto Redo;
     be4:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     be8:	dd140182 	ldfles	f0, [r4, #-520]	; 0xfffffdf8
     bec:	01000009 	tsteq	r0, r9
     bf0:	0f040a01 	svceq	0x00040a01
     bf4:	0c150908 			; <UNDEFINED> instruction: 0x0c150908
     bf8:	a60b0000 	strge	r0, [fp], -r0
     bfc:	0f000001 	svceq	0x00000001
     c00:	09aa070f 	stmibeq	sl!, {r0, r1, r2, r3, r8, r9, sl}
     c04:	0b000000 	bleq	c0c <__pi_release+0x214>
     c08:	00000745 	andeq	r0, r0, r5, asr #14
     c0c:	aa03100f 	bge	c4c50 <__ccfg+0xa4ca8>
     c10:	02000009 	andeq	r0, r0, #9
     c14:	07c30300 	strbeq	r0, [r3, r0, lsl #6]
     c18:	110f0000 	mrsne	r0, CPSR
     c1c:	000bf103 	andeq	pc, fp, r3, lsl #2
     c20:	0f200a00 	svceq	0x00200a00
     c24:	0c930916 			; <UNDEFINED> instruction: 0x0c930916
     c28:	580b0000 	stmdapl	fp, {}	; <UNPREDICTABLE>
     c2c:	0f000003 	svceq	0x00000003
     c30:	0cad0817 	stceq	8, cr0, [sp], #92	; 0x5c
     c34:	0b000000 	bleq	c3c <__pi_release+0x244>
     c38:	00000586 	andeq	r0, r0, r6, lsl #11
     c3c:	c808180f 	stmdagt	r8, {r0, r1, r2, r3, fp, ip}
     c40:	0400000c 	streq	r0, [r0], #-12
     c44:	0006b80b 	andeq	fp, r6, fp, lsl #16
     c48:	08190f00 	ldmdaeq	r9, {r8, r9, sl, fp}
     c4c:	00000cfe 	strdeq	r0, [r0], -lr
int main (void) {
     c50:	073d0b08 	ldreq	r0, [sp, -r8, lsl #22]!
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	1a0f0000 	bne	3c0c5c <__ccfg+0x3a0cb4>
     c58:	000d1908 	andeq	r1, sp, r8, lsl #18
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	b20b0c00 	andlt	r0, fp, #0, 24
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c60:	0f000005 	svceq	0x00000005
	system_init ();
     c64:	0d2f081b 	stceq	8, cr0, [pc, #-108]!	; c00 <__pi_release+0x208>
	tcv_init ();
     c68:	0b100000 	bleq	400c70 <__ccfg+0x3e0cc8>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c6c:	000005f6 	strdeq	r0, [r0], -r6
     c70:	2f081c0f 	svccs	0x00081c0f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	1400000d 	strne	r0, [r0], #-13
     c78:	0001890b 	andeq	r8, r1, fp, lsl #18
     c7c:	081d0f00 	ldmdaeq	sp, {r8, r9, sl, fp}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c80:	00000d2f 	andeq	r0, r0, pc, lsr #26
     c84:	02100b18 	andseq	r0, r0, #24, 22	; 0x6000
	delay (16, 0);
     c88:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
     c8c:	00008d06 	andeq	r8, r0, r6, lsl #26
     c90:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
	__pi_release ();
     c94:	00008d01 	andeq	r8, r0, r1, lsl #26
     c98:	000cad00 	andeq	sl, ip, r0, lsl #26
     c9c:	008d1600 	addeq	r1, sp, r0, lsl #12
     ca0:	8d160000 	ldchi	0, cr0, [r6, #-0]
     ca4:	16000000 	strne	r0, [r0], -r0
     ca8:	00000992 	muleq	r0, r2, r9
     cac:	93041100 	movwls	r1, #16640	; 0x4100
static void killev (__pi_pcb_t *pid) {
     cb0:	1500000c 	strne	r0, [r0, #-12]
	wfun = (aword)(pid->code);
     cb4:	00008d01 	andeq	r8, r0, r1, lsl #26
	for_all_tasks (i) {
     cb8:	000cc800 	andeq	ip, ip, r0, lsl #16
		for (j = 0; j < nevents (i); j++) {
     cbc:	008d1600 	addeq	r1, sp, r0, lsl #12
     cc0:	8d160000 	ldchi	0, cr0, [r6, #-0]
     cc4:	00000000 	andeq	r0, r0, r0
			    || i->Events [j] . Event == wfun
     cc8:	0cb30411 	cfldrseq	mvf0, [r3], #68	; 0x44
		for (j = 0; j < nevents (i); j++) {
     ccc:	01150000 	tsteq	r5, r0
			if (i->Events [j] . Event == (aword)pid
     cd0:	0000008d 	andeq	r0, r0, sp, lsl #1
     cd4:	00000cf2 	strdeq	r0, [r0], -r2
     cd8:	00008d16 	andeq	r8, r0, r6, lsl sp
				wakeupev (i, j);
     cdc:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
     ce0:	8d160000 	ldchi	0, cr0, [r6, #-0]
	for_all_tasks (i) {
     ce4:	16000000 	strne	r0, [r0], -r0
}
     ce8:	00000cf2 	strdeq	r0, [r0], -r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	000cf816 	andeq	pc, ip, r6, lsl r8	; <UNPREDICTABLE>
static void qfree (aword *ch) {
     cf0:	04110000 	ldreq	r0, [r1], #-0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf4:	0000008d 	andeq	r0, r0, sp, lsl #1
	cc = (aword*)(mpools + MA_NP);
     cf8:	0c150411 	cfldrseq	mvf0, [r5], {17}
	m_setnextp (ch, chunk);
     cfc:	04110000 	ldreq	r0, [r1], #-0
	m_setnextp (cc, ch);
     d00:	00000cce 	andeq	r0, r0, lr, asr #25
}
     d04:	008d0115 	addeq	r0, sp, r5, lsl r1
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d08:	0d190000 	ldceq	0, cr0, [r9, #-0]
     d0c:	ee160000 	cdp	0, 1, cr0, cr6, cr0, {0}
     d10:	16000009 	strne	r0, [r0], -r9
			m_setnextp (cc, m_nextp (chunk));
     d14:	00000cf8 	strdeq	r0, [r0], -r8
			m_size (chunk) += m_hdrlen + m_size (ch);
     d18:	04041100 	streq	r1, [r4], #-256	; 0xffffff00
     d1c:	1500000d 	strne	r0, [r0, #-13]
     d20:	00008d01 	andeq	r8, r0, r1, lsl #26
     d24:	000d2f00 	andeq	r2, sp, r0, lsl #30
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d28:	09ee1600 	stmibeq	lr!, {r9, sl, ip}^
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	11000000 	mrsne	r0, (UNDEF: 0)
     d30:	000d1f04 	andeq	r1, sp, r4, lsl #30
     d34:	07960300 	ldreq	r0, [r6, r0, lsl #6]
			m_setnextp (cc, m_nextp (chunk));
     d38:	1f0f0000 	svcne	0x000f0000
			m_size (ch) += m_hdrlen + m_size (chunk);
     d3c:	000c2103 	andeq	r2, ip, r3, lsl #2
     d40:	0d351700 	ldceq	7, cr1, [r5, #-0]
     d44:	7a210000 	bvc	840d4c <__ccfg+0x820da4>
     d48:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
     d4c:	d10e02d8 	ldrdle	r0, [lr, -r8]
     d50:	01000009 	tsteq	r0, r9
			if (m_size (chunk) >= m_size (ch))
     d54:	0e081c01 	cdpeq	12, 0, cr1, cr8, cr1, {0}
     d58:	7c090303 	stcvc	3, cr0, [r9], {3}
     d5c:	1900000d 	stmdbne	r0, {r0, r2, r3}
		chunk = m_nextp (chunk))
     d60:	00003200 	andeq	r3, r0, r0, lsl #4
     d64:	0703070e 	streq	r0, [r3, -lr, lsl #14]
     d68:	000009aa 	andeq	r0, r0, sl, lsr #19
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	08dd1900 	ldmeq	sp, {r8, fp, ip}^
	diag_wait (a);
     d70:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
	diag_wchar (c, a);
     d74:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
     d78:	00040000 	andeq	r0, r4, r0
}
     d7c:	00032605 	andeq	r2, r3, r5, lsl #12
     d80:	03090e00 	movweq	r0, #40448	; 0x9e00
	syserror (ESTATE, "state");
     d84:	000d5503 	andeq	r5, sp, r3, lsl #10
     d88:	00181b00 	andseq	r1, r8, r0, lsl #22
     d8c:	0e300000 	cdpeq	0, 3, cr0, cr0, cr0, {0}
     d90:	ec08030b 	stc	3, cr0, [r8], {11}
void update_n_wake (word min, Boolean force) {
     d94:	1900000d 	stmdbne	r0, {r0, r2, r3}
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	00001798 	muleq	r0, r8, r7
     d9c:	0703140e 	streq	r1, [r3, -lr, lsl #8]
     da0:	000009aa 	andeq	r0, r0, sl, lsr #19
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da4:	06d91900 	ldrbeq	r1, [r9], r0, lsl #18
     da8:	150e0000 	strne	r0, [lr, #-0]
     dac:	09aa0703 	stmibeq	sl!, {r0, r1, r8, r9, sl}
     db0:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     db4:	00000720 	andeq	r0, r0, r0, lsr #14
     db8:	0a03160e 	beq	c65f8 <__ccfg+0xa6650>
     dbc:	00000ba4 	andeq	r0, r0, r4, lsr #23
     dc0:	06241904 	strteq	r1, [r4], -r4, lsl #18
     dc4:	170e0000 	strne	r0, [lr, -r0]
     dc8:	09e20803 	stmibeq	r2!, {r0, r1, fp}^
     dcc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
     dd0:	00000007 	andeq	r0, r0, r7
     dd4:	0f03180e 	svceq	0x0003180e
		for_all_tasks (i) {
     dd8:	00000dec 	andeq	r0, r0, ip, ror #27
	__pi_mintk = znew + min;
     ddc:	05ad190c 	streq	r1, [sp, #2316]!	; 0x90c
     de0:	190e0000 	stmdbne	lr, {}	; <UNPREDICTABLE>
			if (!twaiting (i))
     de4:	0dfc1503 	cfldr64eq	mvdx1, [ip, #12]!
     de8:	002c0000 	eoreq	r0, ip, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
     dec:	000d7c08 	andeq	r7, sp, r8, lsl #24
     df0:	000dfc00 	andeq	pc, sp, r0, lsl #24
     df4:	00940900 	addseq	r0, r4, r0, lsl #18
     df8:	00030000 	andeq	r0, r3, r0
     dfc:	0d890411 	cfstrseq	mvf0, [r9, #68]	; 0x44
     e00:	ce050000 	cdpgt	0, 0, cr0, cr5, cr0, {0}
     e04:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
     e08:	891b031c 	ldmdbhi	fp, {r2, r3, r4, r8, r9}
     e0c:	2100000d 	tstcs	r0, sp
     e10:	000006ae 	andeq	r0, r0, lr, lsr #13
     e14:	14031e0e 	strne	r1, [r3], #-3598	; 0xfffff1f2
     e18:	00000e1e 	andeq	r0, r0, lr, lsl lr
				wakeuptm (i);
     e1c:	04110101 	ldreq	r0, [r1], #-257	; 0xfffffeff
     e20:	00000e02 	andeq	r0, r0, r2, lsl #28
		for_all_tasks (i) {
     e24:	00046024 	andeq	r6, r4, r4, lsr #32
				d = i->Timer - znew;
     e28:	0d1d1000 	ldceq	0, cr1, [sp, #-0]
     e2c:	000009aa 	andeq	r0, r0, sl, lsr #19
     e30:	d2240101 	eorle	r0, r4, #1073741824	; 0x40000000
		if ((word)(__pi_mintk - znew) < min) 
     e34:	10000001 	andne	r0, r0, r1
     e38:	09bb161e 	ldmibeq	fp!, {r1, r2, r3, r4, r9, sl, ip}
     e3c:	01010000 	mrseq	r0, (UNDEF: 1)
	__pi_old = znew;
     e40:	00070924 	andeq	r0, r7, r4, lsr #18
}
     e44:	201e1000 	andscs	r1, lr, r0
	TCI_RUN_DELAY_TIMER;
     e48:	000009bb 			; <UNDEFINED> instruction: 0x000009bb
}
     e4c:	25240101 	strcs	r0, [r4, #-257]!	; 0xfffffeff
     e50:	10000007 	andne	r0, r0, r7
     e54:	0e1e1422 	cfmuldeq	mvd1, mvd14, mvd2
     e58:	01010000 	mrseq	r0, (UNDEF: 1)
     e5c:	00000e24 	andeq	r0, r0, r4, lsr #28
void proceed (word state) {
     e60:	180c1100 	stmdane	ip, {r8, ip}
	prcdstate (__pi_curr, state);
     e64:	00000d41 	andeq	r0, r0, r1, asr #26
     e68:	58260101 	stmdapl	r6!, {r0, r8}
	release;
     e6c:	01000000 	mrseq	r0, (UNDEF: 0)
     e70:	05f3060d 	ldrbeq	r0, [r3, #1549]!	; 0x60d
void __pi_wait (aword event, word state) {
     e74:	05010000 	streq	r0, [r1, #-0]
	sint j = nevents (__pi_curr);
     e78:	00004803 	andeq	r4, r0, r3, lsl #16
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	08182620 	ldmdaeq	r8, {r5, r9, sl, sp}
     e80:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     e84:	00003f07 	andeq	r3, r0, r7, lsl #30
		syserror (ENEVENTS, "sw");
     e88:	03050100 	movweq	r0, #20736	; 0x5100
     e8c:	20000550 	andcs	r0, r0, r0, asr r5
	setestate (__pi_curr->Events [j], state, event);
     e90:	1001200a 	andne	r2, r1, sl
	incwait (__pi_curr);
     e94:	000ec109 	andeq	ip, lr, r9, lsl #2
	setestate (__pi_curr->Events [j], state, event);
     e98:	01f10b00 	mvnseq	r0, r0, lsl #22
}
     e9c:	11010000 	mrsne	r0, (UNDEF: 1)
     ea0:	00097a0c 	andeq	r7, r9, ip, lsl #20
     ea4:	a20b0000 	andge	r0, fp, #0
void __pi_trigger (aword event) {
     ea8:	01000004 	tsteq	r0, r4
	for_all_tasks (i) {
     eac:	09c00a12 	stmibeq	r0, {r1, r4, r9, fp}^
		for (j = 0; j < nevents (i); j++) {
     eb0:	0b080000 	bleq	200eb8 <__ccfg+0x1e0f10>
     eb4:	00000046 	andeq	r0, r0, r6, asr #32
     eb8:	c10a1301 	tstgt	sl, r1, lsl #6
     ebc:	0900000e 	stmdbeq	r0, {r1, r2, r3}
			if (i->Events [j] . Event == event) {
     ec0:	09c00800 	stmibeq	r0, {fp}^
     ec4:	0ed10000 	cdpeq	0, 13, cr0, cr1, cr0, {0}
     ec8:	94090000 	strls	r0, [r9], #-0
				wakeupev (i, j);
     ecc:	13000000 	movwne	r0, #0
     ed0:	00000300 	andeq	r0, r0, r0, lsl #6
	for_all_tasks (i) {
     ed4:	14010000 	strne	r0, [r1], #-0
}
     ed8:	000e9003 	andeq	r9, lr, r3
aword __pi_join (aword pid, word st) {
     edc:	0ed10800 	cdpeq	8, 13, cr0, cr1, cr0, {0}
	for_all_tasks (i) {
     ee0:	0eed0000 	cdpeq	0, 14, cr0, cr13, cr0, {0}
     ee4:	94090000 	strls	r0, [r9], #-0
	return 0;
     ee8:	27000000 	strcs	r0, [r0, -r0]
		if ((aword)i == pid) {
     eec:	07ba2600 	ldreq	r2, [sl, r0, lsl #12]!
			__pi_wait (pid, st);
     ef0:	16010000 	strne	r0, [r1], -r0
}
     ef4:	000edd08 	andeq	sp, lr, r8, lsl #26
	for_all_tasks (i) {
     ef8:	03050100 	movweq	r0, #20736	; 0x5100
     efc:	20000050 	andcs	r0, r0, r0, asr r0
void delay (word d, word state) {
     f00:	00037a26 	andeq	r7, r3, r6, lsr #20
	settstate (__pi_curr, state);
     f04:	05180100 	ldreq	r0, [r8, #-256]	; 0xffffff00
     f08:	0000008d 	andeq	r0, r0, sp, lsl #1
     f0c:	54030501 	strpl	r0, [r3], #-1281	; 0xfffffaff
     f10:	27200005 	strcs	r0, [r0, -r5]!
	update_n_wake (d, YES);
     f14:	00019101 	andeq	r9, r1, r1, lsl #2
     f18:	062b0100 	strteq	r0, [fp], -r0, lsl #2
	__pi_curr->Timer = __pi_old + d;
     f1c:	0000c801 	andeq	ip, r0, r1, lsl #16
     f20:	00020000 	andeq	r0, r2, r0
	inctimer (__pi_curr);
     f24:	ed9c0100 	ldfs	f0, [ip]
     f28:	2800000f 	stmdacs	r0, {r0, r1, r2, r3}
     f2c:	000006eb 	andeq	r0, r0, fp, ror #13
}
     f30:	aa112b01 	bge	44bb3c <__ccfg+0x42bb94>
     f34:	00000009 	andeq	r0, r0, r9
	if (fun == NULL)
     f38:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
		return (int) __pi_curr;
     f3c:	00000236 	andeq	r0, r0, r6, lsr r2
     f40:	da173901 	ble	5cf34c <__ccfg+0x5af3a4>
	for_all_tasks (i)
     f44:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
}
     f48:	000003db 	ldrdeq	r0, [r0], -fp
		if (i->code == fun)
     f4c:	ea1a3f01 	b	690b58 <__ccfg+0x670bb0>
	for_all_tasks (i)
     f50:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     f54:	00000474 	andeq	r0, r0, r4, ror r4
     f58:	06164301 	ldreq	r4, [r6], -r1, lsl #6
int __pi_strlen (const char *s) {
     f5c:	29000001 	stmdbcs	r0, {r0}
	for (i = 0; *(s+i) != '\0'; i++);
     f60:	00000282 	andeq	r0, r0, r2, lsl #5
}
     f64:	0e194601 	cfmsub32eq	mvax0, mvfx4, mvfx9, mvfx1
	for (i = 0; *(s+i) != '\0'; i++);
     f68:	29000001 	stmdbcs	r0, {r0}
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	0000025b 	andeq	r0, r0, fp, asr r2
		syserror (EREQPAR, "addv");
     f70:	501b7901 	andspl	r7, fp, r1, lsl #18
		syserror (ERESOURCE, "addv");
     f74:	29000001 	stmdbcs	r0, {r0}
	if (ioreq [loc] != NULL)
     f78:	000002a5 	andeq	r0, r0, r5, lsr #5
     f7c:	581b7b01 	ldmdapl	fp, {r0, r8, r9, fp, ip, sp, lr}
		syserror (ERESOURCE, "addv");
     f80:	29000001 	stmdbcs	r0, {r0}
	ioreq [loc] = rf;
     f84:	0000005f 	andeq	r0, r0, pc, asr r0
}
     f88:	681a8001 	ldmdavs	sl, {r0, pc}
     f8c:	29000001 	stmdbcs	r0, {r0}
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	00000175 	andeq	r0, r0, r5, ror r1
     f94:	701a8301 	andsvc	r8, sl, r1, lsl #6
     f98:	2a000001 	bcs	fa4 <io+0x14>
     f9c:	00000000 	andeq	r0, r0, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     fa0:	00072b2b 	andeq	r2, r7, fp, lsr #22
     fa4:	122d0100 	eorne	r0, sp, #0, 2
     fa8:	000005ed 	andeq	r0, r0, sp, ror #11
		syserror (ENODEVICE, "io");
     fac:	0003452b 	andeq	r4, r3, fp, lsr #10
     fb0:	11370100 	teqne	r7, r0, lsl #2
	if (len == 0)
     fb4:	000005f3 	strdeq	r0, [r0], -r3
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	0000182c 	andeq	r1, r0, ip, lsr #16
     fbc:	000fd100 	andeq	sp, pc, r0, lsl #2
	if (ret >= 0)
     fc0:	03b92d00 			; <UNDEFINED> instruction: 0x03b92d00
	if (ret == -1) {
     fc4:	47010000 	strmi	r0, [r1, -r0]
     fc8:	0005f30e 	andeq	pc, r5, lr, lsl #6
		if (retry == WNONE)
     fcc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
		iowait (dev, operation, retry);
     fd0:	0fed2e00 	svceq	0x00ed2e00
     fd4:	017c0000 	cmneq	ip, r0
     fd8:	01840000 	orreq	r0, r4, r0
			release;
     fdc:	86010000 	strhi	r0, [r1], -r0
	if (ret == -2) {
     fe0:	10002f0e 	andne	r2, r0, lr, lsl #30
		if (retry != WNONE) {
     fe4:	001e0000 	andseq	r0, lr, r0
     fe8:	00000000 	andeq	r0, r0, r0
			iowait (dev, operation, retry);
     fec:	db013000 	blle	4cff4 <__ccfg+0x2d04c>
     ff0:	01000001 	tsteq	r0, r1
			(ioreq [dev]) (NONE, buf, len);
     ff4:	9e010923 	vmlals.f16	s0, s2, s7	; <UNPREDICTABLE>
     ff8:	01000009 	tsteq	r0, r9
     ffc:	0000100d 	andeq	r1, r0, sp
		(ioreq [dev]) (NONE, buf, len);
    1000:	00005331 	andeq	r5, r0, r1, lsr r3
    1004:	1c230100 	stfnes	f0, [r3], #-0
    1008:	000009c0 	andeq	r0, r0, r0, asr #19
}
    100c:	0fed3200 	svceq	0x00ed3200
	...
		delay (-ret - 2, retry);
    1018:	9c010000 	stcls	0, cr0, [r1], {-0}
    101c:	0010002f 	andseq	r0, r0, pc, lsr #32
    1020:	00003500 	andeq	r3, r0, r0, lsl #10
		release;
    1024:	8c000000 	stchi	0, cr0, [r0], {-0}
    1028:	03000014 	movweq	r0, #20
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	0002bd00 	andeq	fp, r2, r0, lsl #26
    1030:	73010400 	movwvc	r0, #5120	; 0x1400
    1034:	0c000000 	stceq	0, cr0, [r0], {-0}
    1038:	00000cca 	andeq	r0, r0, sl, asr #25
    103c:	0000050c 	andeq	r0, r0, ip, lsl #10
		syserror (ERESOURCE, "mal1");
    1040:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    1044:	00000000 	andeq	r0, r0, r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1048:	000002f6 	strdeq	r0, [r0], -r6
    104c:	fd060102 	stc2	1, cr0, [r6, #-8]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1050:	02000006 	andeq	r0, r0, #6
	m_size (mpools [0]) = mlen - m_hdrlen;
    1054:	05fe0502 	ldrbeq	r0, [lr, #1282]!	; 0x502
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1058:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105c:	10000021 	andne	r0, r0, r1, lsr #32
    1060:	003f1828 	eorseq	r1, pc, r8, lsr #16
}
    1064:	04020000 	streq	r0, [r2], #-0
    1068:	0004c505 	andeq	ip, r4, r5, lsl #10
    106c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    1070:	000004c0 	andeq	r0, r0, r0, asr #9
    1074:	00066603 	andeq	r6, r6, r3, lsl #12
    1078:	182e1000 	stmdane	lr!, {ip}
void __pi_free (aword *ch) {
    107c:	00000059 	andeq	r0, r0, r9, asr r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1080:	fb080102 	blx	201492 <__ccfg+0x1e14ea>
    1084:	03000006 	movweq	r0, #6
		syserror (EMALLOC, "malg");
    1088:	00000335 	andeq	r0, r0, r5, lsr r3
    108c:	6c193110 	ldfvss	f3, [r9], {16}
	mcfree [MA_NP] += m_size (ch);
    1090:	02000000 	andeq	r0, r0, #0
		m_size (ch) ^= MALLOC_UMASK;
    1094:	07a70702 	streq	r0, [r7, r2, lsl #14]!
    1098:	14030000 	strne	r0, [r3], #-0
	mcfree [MA_NP] += m_size (ch);
    109c:	10000007 	andne	r0, r0, r7
	QFREE;
    10a0:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
	if (mevent [MA_NP] . nwait) {
    10a4:	04020000 	streq	r0, [r2], #-0
    10a8:	0002fa07 	andeq	pc, r2, r7, lsl #20
		trigger ((aword)(&(mevent [MA_NP])));
    10ac:	07080200 	streq	r0, [r8, -r0, lsl #4]
		mevent [MA_NP] . nwait --;
    10b0:	000002f5 	strdeq	r0, [r0], -r5
}
    10b4:	69050404 	stmdbvs	r5, {r2, sl}
    10b8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    10bc:	02ff0704 	rscseq	r0, pc, #4, 14	; 0x100000
    10c0:	ba030000 	blt	c10c8 <__ccfg+0xa1120>
void kill (aword pid) {
    10c4:	11000005 	tstne	r0, r5
		pid = (aword) __pi_curr;
    10c8:	004d1226 	subeq	r1, sp, r6, lsr #4
	j = NULL;
    10cc:	00030000 	andeq	r0, r3, r0
	for_all_tasks (i) {
    10d0:	11000021 	tstne	r0, r1, lsr #32
	syserror (EREQPAR, "kpi");
    10d4:	00601227 	rsbeq	r1, r0, r7, lsr #4
    10d8:	a7050000 	strge	r0, [r5, -r0]
		if ((aword)i == pid) {
    10dc:	06000000 	streq	r0, [r0], -r0
    10e0:	000000a7 	andeq	r0, r0, r7, lsr #1
				__PCB = i->Next;
    10e4:	000c9c03 	andeq	r9, ip, r3, lsl #24
			killev (i);
    10e8:	12281100 	eorne	r1, r8, #0, 2
			ufree (i);
    10ec:	00000033 	andeq	r0, r0, r3, lsr r0
			if (i == __pi_curr)
    10f0:	0016c803 	andseq	ip, r6, r3, lsl #16
    10f4:	122b1100 	eorne	r1, fp, #0, 2
				release;
    10f8:	0000004d 	andeq	r0, r0, sp, asr #32
				j->Next = i->Next;
    10fc:	0000c906 	andeq	ip, r0, r6, lsl #18
    1100:	00c90500 	sbceq	r0, r9, r0, lsl #10
    1104:	51030000 	mrspl	r0, (UNDEF: 3)
}
    1108:	11000021 	tstne	r0, r1, lsr #32
    110c:	0073122c 	rsbseq	r1, r3, ip, lsr #4
    1110:	df050000 	svcle	0x00050000
	if (size < 8)
    1114:	03000000 	movweq	r0, #0
		_size = 2;
    1118:	0000040d 	andeq	r0, r0, sp, lsl #8
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    111c:	73122d11 	tstvc	r2, #1088	; 0x440
		_size = (((aword)size) + 3) >> 2;
    1120:	03000000 	movweq	r0, #0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	000006a6 	andeq	r0, r0, r6, lsr #13
		_size = (((aword)size) + 3) >> 2;
    1128:	08102e11 	ldmdaeq	r0, {r0, r4, r9, sl, fp, sp}
		if (mevent [MA_NP] . nfail != 255)
    112c:	07000001 	streq	r0, [r0, -r1]
    1130:	0000a704 	andeq	sl, r0, r4, lsl #14
			mevent [MA_NP] . nfail ++;
    1134:	11080800 	tstne	r8, r0, lsl #16
		mnfree [MA_NP] = 0;
    1138:	019c0932 	orrseq	r0, ip, r2, lsr r9
    113c:	23090000 	movwcs	r0, #36864	; 0x9000
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	11000000 	mrsne	r0, (UNDEF: 0)
    1144:	00c90734 	sbceq	r0, r9, r4, lsr r7
			syserror (EMALLOC, "malc");
    1148:	01010000 	mrseq	r0, (UNDEF: 1)
    114c:	13090007 	movwne	r0, #36871	; 0x9007
		if (m_size (chunk) >= _size)
    1150:	11000004 	tstne	r0, r4
    1154:	00c90335 	sbceq	r0, r9, r5, lsr r3
		chunk = m_nextp (chunk)) {
    1158:	01010000 	mrseq	r0, (UNDEF: 1)
		m_setnextp (cc, m_nextp (chunk));
    115c:	cb090006 	blgt	24117c <__ccfg+0x2211d4>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1160:	11000001 	tstne	r0, r1
    1164:	00c90336 	sbceq	r0, r9, r6, lsr r3
			m_size (chunk) = _size;
    1168:	01010000 	mrseq	r0, (UNDEF: 1)
			cc = chunk + _size + m_hdrlen;
    116c:	4d090005 	stcmi	0, cr0, [r9, #-20]	; 0xffffffec
    1170:	11000004 	tstne	r0, r4
			m_size (cc) = waste - m_hdrlen;
    1174:	00c90337 	sbceq	r0, r9, r7, lsr r3
			QFREE;
    1178:	01010000 	mrseq	r0, (UNDEF: 1)
		mevent [MA_NP] . nfail = 0;
    117c:	08090004 	stmdaeq	r9, {r2}
		mcfree [MA_NP] -= m_size (chunk);
    1180:	11000006 	tstne	r0, r6
    1184:	00c90338 	sbceq	r0, r9, r8, lsr r3
    1188:	04010000 	streq	r0, [r1], #-0
    118c:	1a0a0000 	bne	281194 <__ccfg+0x2611ec>
		m_size (chunk) |= MALLOC_UMASK;
    1190:	11000004 	tstne	r0, r4
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1194:	00c9073a 	sbceq	r0, r9, sl, lsr r7
		m_size (chunk) |= MALLOC_UMASK;
    1198:	0a010000 	beq	411a0 <__ccfg+0x211f8>
			mnfree [MA_NP] = mcfree [MA_NP];
    119c:	00000576 	andeq	r0, r0, r6, ror r5
}
    11a0:	c9033c11 	stmdbgt	r3, {r0, r4, sl, fp, ip, sp}
    11a4:	02000000 	andeq	r0, r0, #0
    11a8:	0008530a 	andeq	r5, r8, sl, lsl #6
    11ac:	033d1100 	teqeq	sp, #0, 2
    11b0:	000000c9 	andeq	r0, r0, r9, asr #1
    11b4:	058e0a03 	streq	r0, [lr, #2563]	; 0xa03
    11b8:	3f110000 	svccc	0x00110000
aword __pi_fork (fsmcode func, aword data) {
    11bc:	0000df08 	andeq	sp, r0, r8, lsl #30
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c0:	03000400 	movweq	r0, #1024	; 0x400
    11c4:	00000219 	andeq	r0, r0, r9, lsl r2
    11c8:	0e034111 	mcreq	1, 0, r4, cr3, cr1, {0}
		if ((j = __PCB) == NULL)
    11cc:	06000001 	streq	r0, [r0], -r1
	i->Next = NULL;
    11d0:	0000019c 	muleq	r0, ip, r1
	i->data = data;
    11d4:	0004540b 	andeq	r5, r4, fp, lsl #8
		if ((j = __PCB) == NULL)
    11d8:	1a431100 	bne	10c55e0 <__ccfg+0x10a5638>
}
    11dc:	000001a8 	andeq	r0, r0, r8, lsr #3
			for (; j->Next != NULL; j = j->Next);
    11e0:	670b0101 	strvs	r0, [fp, -r1, lsl #2]
    11e4:	11000001 	tstne	r0, r1
	return (aword) i;
    11e8:	01c90e45 	biceq	r0, r9, r5, asr #28
    11ec:	01010000 	mrseq	r0, (UNDEF: 1)
	if (mevent [MA_NP] . nwait != 255)
    11f0:	01cf0407 	biceq	r0, pc, r7, lsl #8
    11f4:	01020000 	mrseq	r0, (UNDEF: 2)
    11f8:	00070408 	andeq	r0, r7, r8, lsl #8
		mevent [MA_NP] . nwait ++;
    11fc:	01cf0500 	biceq	r0, pc, r0, lsl #10
	wait ((aword)(&(mevent [MA_NP])), state);
    1200:	220b0000 	andcs	r0, fp, #0
    1204:	11000002 	tstne	r0, r2
void diag (const char *mess, ...) {
    1208:	01c91e45 	biceq	r1, r9, r5, asr #28
    120c:	01010000 	mrseq	r0, (UNDEF: 1)
    1210:	8f120808 	svchi	0x00120808
	diag_disable_int (a, is);
    1214:	00021a09 	andeq	r1, r2, r9, lsl #20
    1218:	04cf0a00 	strbeq	r0, [pc], #2560	; 1220 <diag+0x18>
    121c:	90120000 	andsls	r0, r2, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1220:	0000730b 	andeq	r7, r0, fp, lsl #6
	diag_disable_int (a, is);
    1224:	850a0000 	strhi	r0, [sl, #-0]
	while (*mess != '\0') {
    1228:	12000009 	andne	r0, r0, #9
	dgout ('\r');
    122c:	00a70891 	umlaleq	r0, r7, r1, r8
	dgout ('\n');
    1230:	0a040000 	beq	101238 <__ccfg+0xe1290>
    1234:	000001a0 	andeq	r0, r0, r0, lsr #3
    1238:	d5109212 	ldrle	r9, [r0, #-530]	; 0xfffffdee
	diag_wait (a);
    123c:	06000000 	streq	r0, [r0], -r0
	diag_enable_int (a, is);
    1240:	07510300 	ldrbeq	r0, [r1, -r0, lsl #6]
    1244:	93120000 	tstls	r2, #0
}
    1248:	0001e903 	andeq	lr, r1, r3, lsl #18
    124c:	021a0500 	andseq	r0, sl, #0, 10
    1250:	1a0c0000 	bne	301258 <__ccfg+0x2e12b0>
		if (*mess == '%') {
    1254:	36000002 	strcc	r0, [r0], -r2
    1258:	0d000002 	stceq	0, cr0, [r0, #-8]
			if (*mess == 'l') {
    125c:	059a0b00 	ldreq	r0, [sl, #2816]	; 0xb00
    1260:	99120000 	ldmdbls	r2, {}	; <UNPREDICTABLE>
				mess++;
    1264:	00022b0f 	andeq	r2, r2, pc, lsl #22
				val = va_arg (ap, lword);
    1268:	07010100 	streq	r0, [r1, -r0, lsl #2]
				bc = 32;
    126c:	0000da04 	andeq	sp, r0, r4, lsl #20
				bc = 16;
    1270:	13010800 	movwne	r0, #6144	; 0x1800
			switch (*mess) {
    1274:	02740991 	rsbseq	r0, r4, #2375680	; 0x244000
    1278:	95090000 	strls	r0, [r9, #-0]
    127c:	13000005 	movwne	r0, #5
				dgout ('%');
    1280:	00c90793 	smulleq	r0, r9, r3, r7
    1284:	07010000 	streq	r0, [r1, -r0]
				dgout (*mess);
    1288:	b4090001 	strlt	r0, [r9], #-1
    128c:	13000003 	movwne	r0, #3
			switch (*mess) {
    1290:	00c90394 	smulleq	r0, r9, r4, r3
					v = __pi_hex_enc_table [
    1294:	01010000 	mrseq	r0, (UNDEF: 1)
					i += 4;
    1298:	03000000 	movweq	r0, #0
					(val >> (bc - i)) & 0xf];
    129c:	0000061a 	andeq	r0, r0, sl, lsl r6
    12a0:	4a039613 	bmi	e6af4 <__ccfg+0xc6b4c>
					dgout (v);
    12a4:	05000002 	streq	r0, [r0, #-2]
    12a8:	00000274 	andeq	r0, r0, r4, ror r2
				while (i < bc) {
    12ac:	0002800c 	andeq	r8, r2, ip
			mess++;
    12b0:	00029000 	andeq	r9, r2, r0
					d /= 10;
    12b4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
				if ((val >> (bc - 1)) & 1) {
    12b8:	00000285 	andeq	r0, r0, r5, lsl #5
    12bc:	0002ba0b 	andeq	fp, r2, fp, lsl #20
					dgout ('-');
    12c0:	179c1300 	ldrne	r1, [ip, r0, lsl #6]
    12c4:	00000290 	muleq	r0, r0, r2
						val |= 0xffff0000;
    12c8:	b30c0101 	movwlt	r0, #49409	; 0xc101
    12cc:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    12d0:	0d000002 	stceq	0, cr0, [r0, #-8]
				d = (bc == 16) ? 10000 : 1000000000;
    12d4:	02a30500 	adceq	r0, r3, #0, 10
    12d8:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
    12dc:	14000003 	strne	r0, [r0], #-3
					v = (word) (val / d);
    12e0:	02ae1306 	adceq	r1, lr, #402653184	; 0x18000000
					if (v || d == 1) break;
    12e4:	01010000 	mrseq	r0, (UNDEF: 1)
    12e8:	0005580b 	andeq	r5, r5, fp, lsl #16
					d /= 10;
    12ec:	0ec31200 	cdpeq	2, 12, cr1, cr3, cr0, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    12f0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
					dgout (v + '0');
    12f4:	1d0e0101 	stfnes	f0, [lr, #-4]
    12f8:	15000007 	strne	r0, [r0, #-7]
    12fc:	dc10016e 	ldfles	f0, [r0], {110}	; 0x6e
					d /= 10;
    1300:	07000002 	streq	r0, [r0, -r2]
					val = val - (v * d);
    1304:	0002e204 	andeq	lr, r2, r4, lsl #4
					if (d == 0) break;
    1308:	ee010f00 	cdp	15, 0, cr0, cr1, cr0, {0}
					v = (word) (val / d);
    130c:	10000002 	andne	r0, r0, r2
    1310:	000000a7 	andeq	r0, r0, r7, lsr #1
				if (bc == 16)
    1314:	01d60c00 	bicseq	r0, r6, r0, lsl #24
				d = (bc == 16) ? 10000 : 1000000000;
    1318:	02f90000 	rscseq	r0, r9, #0
					val &= 0xffff;
    131c:	000d0000 	andeq	r0, sp, r0
					dgout (*s);
    1320:	0002ee05 	andeq	lr, r2, r5, lsl #28
					s++;
    1324:	05c21100 	strbeq	r1, [r2, #256]	; 0x100
				while (*s != '\0') {
    1328:	7f150000 	svcvc	0x00150000
    132c:	02f91601 	rscseq	r1, r9, #1048576	; 0x100000
			dgout (*mess++);
    1330:	01010000 	mrseq	r0, (UNDEF: 1)
    1334:	00029d11 	andeq	r9, r2, r1, lsl sp
    1338:	01821500 	orreq	r1, r2, r0, lsl #10
    133c:	0000eb14 	andeq	lr, r0, r4, lsl fp
    1340:	11010100 	mrsne	r0, (UNDEF: 17)
}
    1344:	0000027a 	andeq	r0, r0, sl, ror r2
    while(1)
    1348:	0e02d815 	mcreq	8, 0, sp, cr2, cr5, {0}
{
    134c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    SetupTrimDevice();
    1350:	08120101 	ldmdaeq	r2, {r0, r8}
    pui32Src = &_etext;
    1354:	09030315 	stmdbeq	r3, {r0, r2, r4, r8, r9}
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1358:	00000352 	andeq	r0, r0, r2, asr r3
    __asm("    ldr     r0, =_bss\n"
    135c:	00320013 	eorseq	r0, r2, r3, lsl r0
    1360:	03071500 	movweq	r1, #29952	; 0x7500
    1364:	0000a707 	andeq	sl, r0, r7, lsl #14
    1368:	dd130000 	ldcle	0, cr0, [r3, #-0]
    136c:	15000008 	strne	r0, [r0, #-8]
   main();
    1370:	f0080308 			; <UNDEFINED> instruction: 0xf0080308
    FaultISR();
    1374:	04000000 	streq	r0, [r0], #-0
        *pui32Dest++ = *pui32Src++;
    1378:	03260e00 			; <UNDEFINED> instruction: 0x03260e00
    137c:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
    1380:	032b0303 			; <UNDEFINED> instruction: 0x032b0303
    1384:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    1388:	30000000 	andcc	r0, r0, r0
    138c:	08030b15 	stmdaeq	r3, {r0, r2, r4, r8, r9, fp}
    1390:	000003c2 	andeq	r0, r0, r2, asr #7
    1394:	00179813 	andseq	r9, r7, r3, lsl r8
static byte get_byte () {
    1398:	03141500 	tsteq	r4, #0, 10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    139c:	0000a708 	andeq	sl, r0, r8, lsl #14
    13a0:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    13a4:	15000006 	strne	r0, [r0, #-6]
    13a8:	a7080315 	smladge	r8, r5, r3, r0
		if (ee_inp)
    13ac:	02000000 	andeq	r0, r0, #0
			b |= 1;
    13b0:	00072013 	andeq	r2, r7, r3, lsl r0
    13b4:	03161500 	tsteq	r6, #0, 10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13b8:	0002cf0b 	andeq	ip, r2, fp, lsl #30
	for (b = 0, i = 0; i < 8; i++) {
    13bc:	24130400 	ldrcs	r0, [r3], #-1024	; 0xfffffc00
}
    13c0:	15000006 	strne	r0, [r0, #-6]
    13c4:	f0090317 			; <UNDEFINED> instruction: 0xf0090317
    13c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
static void put_byte (byte b) {
    13cc:	00000713 	andeq	r0, r0, r3, lsl r7
    13d0:	03181500 	tsteq	r8, #0, 10
    13d4:	0003c20f 	andeq	ip, r3, pc, lsl #4
    13d8:	ad130c00 	ldcge	12, cr0, [r3, #-0]
		if (b & 0x80)
    13dc:	15000005 	strne	r0, [r0, #-5]
    13e0:	d2150319 	andsle	r0, r5, #1677721600	; 0x64000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13e4:	2c000003 	stccs	0, cr0, [r0], {3}
	for (i = 0; i < 8; i++) {
    13e8:	03520c00 	cmpeq	r2, #0, 24
		b <<= 1;
    13ec:	03d20000 	bicseq	r0, r2, #0
	for (i = 0; i < 8; i++) {
    13f0:	94150000 	ldrls	r0, [r5], #-0
}
    13f4:	03000000 	movweq	r0, #0
    13f8:	5f040700 	svcpl	0x00040700
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13fc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1400:	000006ce 	andeq	r0, r0, lr, asr #13
	put_byte (cmd);
    1404:	1b031c15 	blne	c8460 <__ccfg+0xa84b8>
    1408:	0000035f 	andeq	r0, r0, pc, asr r3
}
    140c:	0006ae11 	andeq	sl, r6, r1, lsl lr
    1410:	031e1500 	tsteq	lr, #0, 10
static void wwait (word st, word del) {
    1414:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
    1418:	07010100 	streq	r0, [r1, -r0, lsl #2]
    141c:	0003d804 	andeq	sp, r3, r4, lsl #16
	while (dopen && (rdsr () & 1)) {
    1420:	04600b00 	strbteq	r0, [r0], #-2816	; 0xfffff500
    1424:	1d160000 	ldcne	0, cr0, [r6, #-0]
    1428:	0000a713 	andeq	sl, r0, r3, lsl r7
    142c:	0b010100 	bleq	41834 <__ccfg+0x2188c>
	put_byte (CMD_RDSR);
    1430:	000001d2 	ldrdeq	r0, [r0], -r2
	r = get_byte ();
    1434:	b81a1e16 	ldmdalt	sl, {r1, r2, r4, r9, sl, fp, ip}
    1438:	01000000 	mrseq	r0, (UNDEF: 0)
	while (dopen && (rdsr () & 1)) {
    143c:	07090b01 	streq	r0, [r9, -r1, lsl #22]
}
    1440:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
		if (st == WNONE)
    1444:	0000b824 	andeq	fp, r0, r4, lsr #16
    1448:	0b010100 	bleq	41850 <__ccfg+0x218a8>
			mdelay (1);
    144c:	00000725 	andeq	r0, r0, r5, lsr #14
    1450:	f4142216 			; <UNDEFINED> instruction: 0xf4142216
			delay (del, st);
    1454:	01000003 	tsteq	r0, r3
    1458:	08c10301 	stmiaeq	r1, {r0, r8, r9}^
			release;
    145c:	43160000 	tstmi	r6, #0
    1460:	00043e10 	andeq	r3, r4, r0, lsl lr
    1464:	44040700 	strmi	r0, [r4], #-1792	; 0xfffff900
static void ready () {
    1468:	0f000004 	svceq	0x00000004
	if (dopen) {
    146c:	00045001 	andeq	r5, r4, r1
		wwait (WNONE, 1);
    1470:	008d1000 	addeq	r1, sp, r0
    1474:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1478:	09461608 	stmdbeq	r6, {r3, r9, sl, ip}^
	dstat = 0;
    147c:	00000474 	andeq	r0, r0, r4, ror r4
}
    1480:	000e1e0a 	andeq	r1, lr, sl, lsl #28
    1484:	0f4a1600 	svceq	0x004a1600
    1488:	00000432 	andeq	r0, r0, r2, lsr r4
	udelay (1);
    148c:	0b190a00 	bleq	643c94 <__ccfg+0x623cec>
    1490:	4b160000 	blmi	581498 <__ccfg+0x5614f0>
	udelay (1);
    1494:	00008d07 	andeq	r8, r0, r7, lsl #26
		dopen = DOPEN_TEMP;
    1498:	03000400 	movweq	r0, #1024	; 0x400
    149c:	00000947 	andeq	r0, r0, r7, asr #18
    14a0:	50034c16 	andpl	r4, r3, r6, lsl ip
    14a4:	05000004 	streq	r0, [r0, #-4]
static void cclose () {
    14a8:	00000474 	andeq	r0, r0, r4, ror r4
	if (dopen == DOPEN_TEMP) {
    14ac:	0000fc0c 	andeq	pc, r0, ip, lsl #24
    14b0:	00049500 	andeq	r9, r4, r0, lsl #10
		wwait (WNONE, 1);
    14b4:	00941500 	addseq	r1, r4, r0, lsl #10
    14b8:	00030000 	andeq	r0, r3, r0
	cmd_0 (CMD_DP);
    14bc:	000c910b 	andeq	r9, ip, fp, lsl #2
    14c0:	120d0100 	andne	r0, sp, #0, 2
		dopen = 0;
    14c4:	00000485 	andeq	r0, r0, r5, lsl #9
}
    14c8:	800c0101 	andhi	r0, ip, r1, lsl #2
word ee_open () {
    14cc:	b3000004 	movwlt	r0, #4
	ready ();
    14d0:	15000004 	strne	r0, [r0, #-4]
	dopen = DOPEN_PERM;
    14d4:	00000094 	muleq	r0, r4, r0
    14d8:	a3050001 	movwge	r0, #20481	; 0x5001
}
    14dc:	16000004 	strne	r0, [r0], -r4
	if (dopen) {
    14e0:	00000cad 	andeq	r0, r0, sp, lsr #25
    14e4:	b318cf01 	tstlt	r8, #1, 30
		dopen = DOPEN_TEMP;
    14e8:	0c000004 	stceq	0, cr0, [r0], {4}
		cclose ();
    14ec:	000000eb 	andeq	r0, r0, fp, ror #1
}
    14f0:	000004d4 	ldrdeq	r0, [r0], -r4
int ser_outf (word st, const char *m, ...) {
    14f4:	00009415 	andeq	r9, r0, r5, lsl r4
    14f8:	05001000 	streq	r1, [r0, #-0]
	if ((prcs = running (__outserial)) != 0) {
    14fc:	000004c4 	andeq	r0, r0, r4, asr #9
    1500:	000aaa17 	andeq	sl, sl, r7, lsl sl
		join (prcs, st);
    1504:	0dec0100 	stfeqe	f0, [ip]
    1508:	000004d4 	ldrdeq	r0, [r0], -r4
		release;
    150c:	b8030501 	stmdalt	r3, {r0, r8, sl}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1510:	1800002b 	stmdane	r0, {r0, r1, r3, r5}
    1514:	00000926 	andeq	r0, r0, r6, lsr #18
    1518:	0d010c01 	stceq	12, cr0, [r1, #-4]
		umwait (st);
    151c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1520:	00000305 	andeq	r0, r0, r5, lsl #6
	if (runstrand (__outserial, buf) == 0) {
    1524:	36192000 	ldrcc	r2, [r9], -r0
    1528:	01000002 	tsteq	r0, r2
    152c:	050802d0 	streq	r0, [r8, #-720]	; 0xfffffd30
		ufree (buf);
    1530:	00055803 	andeq	r5, r5, r3, lsl #16
		npwait (st);
    1534:	00a70c20 	adceq	r0, r7, r0, lsr #24
}
    1538:	051e0000 	ldreq	r0, [lr, #-0]
    153c:	94150000 	ldrls	r0, [r5], #-0
    1540:	00000000 	andeq	r0, r0, r0
    1544:	08a71800 	stmiaeq	r7!, {fp, ip}
int ser_inf (word st, const char *fmt, ...) {
    1548:	d2010000 	andle	r0, r1, #0
    154c:	050e0d02 	streq	r0, [lr, #-3330]	; 0xfffff2fe
	if (fmt == NULL)
    1550:	03050000 	movweq	r0, #20480	; 0x5000
	if (__inpline == NULL) {
    1554:	20000002 	andcs	r0, r0, r2
		if ((prcs = running (__inserial)) == 0) {
    1558:	0002c119 	andeq	ip, r2, r9, lsl r1
    155c:	048c0100 	streq	r0, [ip], #256	; 0x100
			prcs = runthread (__inserial);
    1560:	60030507 	andvs	r0, r3, r7, lsl #10
    1564:	1a200005 	bne	801580 <__ccfg+0x7e15d8>
			if (prcs == 0) {
    1568:	00089b01 	andeq	r9, r8, r1, lsl #22
				npwait (st);
    156c:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
		release;
    1570:	008d0105 	addeq	r0, sp, r5, lsl #2
		join (prcs, st);
    1574:	0c500000 	mraeq	r0, r0, acc0
    1578:	0cb00000 	ldceq	0, cr0, [r0]
	va_start (ap, fmt);
    157c:	9c010000 	stcls	0, cr0, [r1], {-0}
	prcs = vscan (__inpline, fmt, ap);
    1580:	00000584 	andeq	r0, r0, r4, lsl #11
    1584:	0004981b 	andeq	r9, r4, fp, lsl r8
	ufree (__inpline);
    1588:	00057200 	andeq	r7, r5, r0, lsl #4
	__inpline = NULL;
    158c:	00691c00 	rsbeq	r1, r9, r0, lsl #24
}
    1590:	11057601 	tstne	r5, r1, lsl #12
    1594:	000000bd 	strheq	r0, [r0], -sp
    1598:	11f71d00 	mvnsne	r1, r0, lsl #26
		return 0;
    159c:	0c920000 	ldceq	0, cr0, [r2], {0}
    15a0:	0c940000 	ldceq	0, cr0, [r4], {0}
    15a4:	8d010000 	stchi	0, cr0, [r1, #-0]
void RFCCPE0IntHandler (void) {
    15a8:	1e000205 	cdpne	2, 0, cr0, cr0, cr5, {0}
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    15ac:	000b3301 	andeq	r3, fp, r1, lsl #6
		_BIS (dstate, DSTATE_IRST);
    15b0:	05680100 	strbeq	r0, [r8, #-256]!	; 0xffffff00
    15b4:	0009f821 	andeq	pc, r9, r1, lsr #16
    15b8:	000c5000 	andeq	r5, ip, r0
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    15bc:	e49c0100 	ldr	r0, [ip], #256	; 0x100
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    15c0:	1f000007 	svcne	0x00000007
    15c4:	00000b40 	andeq	r0, r0, r0, asr #22
	p_trigger (drvprcs, qevent);
    15c8:	2001080d 	andcs	r0, r1, sp, lsl #16
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    15cc:	000011d0 	ldrdeq	r1, [r0], -r0
    15d0:	000009f8 	strdeq	r0, [r0], -r8
    15d4:	000002f8 	strdeq	r0, [r0], -r8
    15d8:	02056a01 	andeq	r6, r5, #4096	; 0x1000
    15dc:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    15e0:	0011df21 	andseq	sp, r1, r1, lsr #30
    15e4:	12220000 	eorne	r0, r2, #0
    15e8:	12000008 	andne	r0, r0, #8
    15ec:	1800000a 	stmdane	r0, {r1, r3}
    15f0:	0d000003 	stceq	0, cr0, [r0, #-12]
	RISE_N_SHINE;
    15f4:	07b30227 	ldreq	r0, [r3, r7, lsr #4]!
    15f8:	18230000 	stmdane	r3!, {}	; <UNPREDICTABLE>
    15fc:	24000003 	strcs	r0, [r0], #-3
}
    1600:	00000820 	andeq	r0, r0, r0, lsr #16
    1604:	00000aa0 	andeq	r0, r0, r0, lsr #21
    1608:	00125c25 	andseq	r5, r2, r5, lsr #24
    160c:	000a1200 	andeq	r1, sl, r0, lsl #4
    1610:	00034000 	andeq	r4, r3, r0
    1614:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
strand (__outserial, const char*)
    1618:	14381d04 	ldrtne	r1, [r8], #-3332	; 0xfffff2fc
    161c:	0a8a0000 	beq	fe281624 <_estack+0xde27c624>
    1620:	0a960000 	beq	fe581628 <_estack+0xde57c628>
    1624:	a4010000 	strge	r0, [r1], #-0
endstrand
    1628:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
    162c:	9e000012 	mcrls	0, 0, r0, cr0, cr2, {0}
	ptr = data;
    1630:	a000000a 	andge	r0, r0, sl
    1634:	0100000a 	tsteq	r0, sl
	if (*ptr)
    1638:	250404aa 	strcs	r0, [r4, #-1194]	; 0xfffffb56
		len = strlen (ptr);
    163c:	000012c0 	andeq	r1, r0, r0, asr #5
    1640:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1644:	00000358 	andeq	r0, r0, r8, asr r3
    1648:	0404bb01 	streq	fp, [r4], #-2817	; 0xfffff4ff
    164c:	00144325 	andseq	r4, r4, r5, lsr #6
    1650:	000ab600 	andeq	fp, sl, r0, lsl #12
    1654:	00037800 	andeq	r7, r3, r0, lsl #16
	len -= quant;
    1658:	04c50100 	strbeq	r0, [r5], #256	; 0x100
    165c:	128e2004 	addne	r2, lr, #4
    1660:	0abe0000 	beq	fef81668 <_estack+0xdef7c668>
	if (len == 0) {
    1664:	03980000 	orrseq	r0, r8, #0
		ufree (data);
    1668:	c0010000 	andgt	r0, r1, r0
		finish;
    166c:	06510404 	ldrbeq	r0, [r1], -r4, lsl #8
    1670:	9d210000 	stcls	0, cr0, [r1, #-0]
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1674:	00000012 	andeq	r0, r0, r2, lsl r0
    1678:	00125c1d 	andseq	r5, r2, sp, lsl ip
    167c:	000ace00 	andeq	ip, sl, r0, lsl #28
    1680:	000ad000 	andeq	sp, sl, r0
    1684:	04c30100 	strbeq	r0, [r3], #256	; 0x100
strand (__inserial, address)
    1688:	142d2504 	strtne	r2, [sp], #-1284	; 0xfffffafc
    168c:	0ad20000 	beq	ff481694 <_estack+0xdf47c694>
    1690:	03b80000 			; <UNDEFINED> instruction: 0x03b80000
    1694:	d5010000 	strle	r0, [r1, #-0]
    1698:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
	if (__inpline != NULL)
    169c:	e8000014 	stmda	r0, {r2, r4}
    16a0:	d800000a 	stmdale	r0, {r1, r3}
		finish;
    16a4:	01000003 	tsteq	r0, r3
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    16a8:	8e0404cc 	cdphi	4, 0, cr0, cr4, cr12, {6}
    16ac:	21000006 	tstcs	r0, r6
    16b0:	0000145d 	andeq	r1, r0, sp, asr r4
    16b4:	125c1d00 	subsne	r1, ip, #0, 26
		umwait (IM_INIT);
    16b8:	0b0c0000 	bleq	3016c0 <__ccfg+0x2e1718>
		release;
    16bc:	0b0e0000 	bleq	3816c4 <__ccfg+0x36171c>
	savedata (data);
    16c0:	df010000 	svcle	0x00010000
	len = MAX_LINE_LENGTH;
    16c4:	38250404 	stmdacc	r5!, {r2, sl}
	io (IM_READ, __cport, READ, ptr, 1);
    16c8:	2c000014 	stccs	0, cr0, [r0], {20}
    16cc:	f000000b 			; <UNDEFINED> instruction: 0xf000000b
    16d0:	01000003 	tsteq	r0, r3
    16d4:	250404e8 	strcs	r0, [r4, #-1256]	; 0xfffffb18
	if (ptr == (char*) data) { // new line
    16d8:	0000127f 	andeq	r1, r0, pc, ror r2
    16dc:	00000b30 	andeq	r0, r0, r0, lsr fp
		if (*ptr == '\0') { // bin cmd
    16e0:	00000408 	andeq	r0, r0, r8, lsl #8
			proceed (IM_BIN);
    16e4:	0d04ee01 	stceq	14, cr14, [r4, #-4]
    16e8:	00128e26 	andseq	r8, r2, r6, lsr #28
		if (*ptr < 0x20)
    16ec:	000b3a00 	andeq	r3, fp, r0, lsl #20
    16f0:	000b3e00 	andeq	r3, fp, r0, lsl #28
			proceed (IM_READ);
    16f4:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    16f8:	0006dc04 	andeq	sp, r6, r4, lsl #24
	if (*ptr == '\n' || *ptr == '\r') {
    16fc:	129d2100 	addsne	r2, sp, #0, 2
    1700:	25000000 	strcs	r0, [r0, #-0]
    1704:	00001443 	andeq	r1, r0, r3, asr #8
		*ptr = '\0';
    1708:	00000b5e 	andeq	r0, r0, lr, asr fp
		__inpline = (char*)data;
    170c:	00000420 	andeq	r0, r0, r0, lsr #8
		finish;
    1710:	0404f701 	streq	pc, [r4], #-1793	; 0xfffff8ff
	if (len) {
    1714:	00144e20 	andseq	r4, r4, r0, lsr #28
		ptr++;
    1718:	000b6000 	andeq	r6, fp, r0
    171c:	00043800 	andeq	r3, r4, r0, lsl #16
		len--;
    1720:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
	proceed (IM_READ);
    1724:	00070804 	andeq	r0, r7, r4, lsl #16
	io (IM_BIN, __cport, READ, ptr, 1);
    1728:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
    172c:	1d000000 	stcne	0, cr0, [r0, #-0]
    1730:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    1734:	00000b68 	andeq	r0, r0, r8, ror #22
    1738:	00000b6c 	andeq	r0, r0, ip, ror #22
	len -= 2;
    173c:	0404fd01 	streq	pc, [r4], #-3329	; 0xfffff2ff
	if (len > *ptr + 1) // 1 for 0x04
    1740:	00125c1d 	andseq	r5, r2, sp, lsl ip
    1744:	000b6c00 	andeq	r6, fp, r0, lsl #24
		len = *ptr + 1;
    1748:	000b6e00 	andeq	r6, fp, r0, lsl #28
    174c:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
	ptr++;
    1750:	0b952604 	bleq	fe54af68 <_estack+0xde545f68>
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1754:	0b760000 	bleq	1d8175c <__ccfg+0x1d617b4>
    1758:	0b820000 	bleq	fe081760 <_estack+0xde07c760>
    175c:	0d010000 	stceq	0, cr0, [r1, #-0]
    1760:	075c0405 	ldrbeq	r0, [ip, -r5, lsl #8]
    1764:	11270000 			; <UNDEFINED> instruction: 0x11270000
    1768:	76000013 			; <UNDEFINED> instruction: 0x76000013
	len -= quant;
    176c:	8000000b 	andhi	r0, r0, fp
		__inpline = (char*)data;
    1770:	0100000b 	tsteq	r0, fp
		finish;
    1774:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
	ptr += quant;
    1778:	0000132d 	andeq	r1, r0, sp, lsr #6
    177c:	00132021 	andseq	r2, r3, r1, lsr #32
endstrand
    1780:	1d000000 	stcne	0, cr0, [r0, #-0]
    1784:	0000125c 	andeq	r1, r0, ip, asr r2
	proceed (IM_BINL);
    1788:	00000baa 	andeq	r0, r0, sl, lsr #23
endstrand
    178c:	00000bac 	andeq	r0, r0, ip, lsr #23
    1790:	04053e01 	streq	r3, [r5], #-3585	; 0xfffff1ff
    1794:	0012741d 	andseq	r7, r2, sp, lsl r4
    1798:	000bac00 	andeq	sl, fp, r0, lsl #24
    179c:	000bbc00 	andeq	fp, fp, r0, lsl #24
    17a0:	05410100 	strbeq	r0, [r1, #-256]	; 0xffffff00
		if (res && (d < n))
    17a4:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
    17a8:	0bbc0000 	bleq	fef017b0 <_estack+0xdeefc7b0>
    17ac:	0bbe0000 	bleq	fef817b4 <_estack+0xdef7c7b4>
    17b0:	44010000 	strmi	r0, [r1], #-0
			res [d] = (char) c;
    17b4:	7f250405 	svcvc	0x00250405
		d++;
    17b8:	be000012 	mcrlt	0, 0, r0, cr0, cr2, {0}
    17bc:	5000000b 	andpl	r0, r0, fp
    17c0:	01000004 	tsteq	r0, r4
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17c4:	250b0547 	strcs	r0, [fp, #-1351]	; 0xfffffab9
    17c8:	0000146b 	andeq	r1, r0, fp, ror #8
    17cc:	00000bc6 	andeq	r0, r0, r6, asr #23
				enci (10000);
    17d0:	00000468 	andeq	r0, r0, r8, ror #8
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17d4:	04054b01 	streq	r4, [r5], #-2817	; 0xfffff4ff
    17d8:	ed280000 	stc	0, cr0, [r8, #-0]
	d = 0;
    17dc:	2c000011 	stccs	0, cr0, [r0], {17}
		c = *fm++;
    17e0:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
		if (c == '\\') {
    17e4:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
			if ((c = *fm++) == '\0') {
    17e8:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
    17ec:	5a000011 	bpl	1838 <__pi_vfparse+0x74>
				outc ('\\');
    17f0:	5c00000a 	stcpl	0, cr0, [r0], {10}
			if ((c = *fm++) == '\0') {
    17f4:	0d00000a 	stceq	0, cr0, [r0, #-40]	; 0xffffffd8
				outc ('\\');
    17f8:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
    17fc:	e0000011 	and	r0, r0, r1, lsl r0
			outc (c);
    1800:	e200000b 	and	r0, r0, #11
    1804:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
			if (c == '\0')
    1808:	1a000227 	bne	20ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x4>
    180c:	000bb901 	andeq	fp, fp, r1, lsl #18
			outc (c);
    1810:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0xffffff00
				outc (val);
    1814:	00a70106 	adceq	r0, r7, r6, lsl #2
	...
		if (c == '%') {
    1820:	9c010000 	stcls	0, cr0, [r1], {-0}
			c = *fm++;
    1824:	00000812 	andeq	r0, r0, r2, lsl r8
			switch (c) {
    1828:	00637329 	rsbeq	r7, r3, r9, lsr #6
    182c:	07055e01 	streq	r5, [r5, -r1, lsl #28]
    1830:	000000a7 	andeq	r0, r0, r7, lsr #1
    1834:	00000048 	andeq	r0, r0, r8, asr #32
    1838:	0ad32a00 	beq	ff4cc040 <_estack+0xdf4c7040>
    183c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    1840:	2a031404 	bcs	c6858 <__ccfg+0xa68b0>
    1844:	2b000008 	blcs	186c <__pi_vfparse+0xa8>
				outc ('%');
    1848:	00000d75 	andeq	r0, r0, r5, ror sp
    184c:	0104ad01 	tsteq	r4, r1, lsl #26
				outc (c);
    1850:	80012c00 	andhi	r2, r1, r0, lsl #24
    1854:	0100000a 	tsteq	r0, sl
    1858:	0106047e 	tsteq	r6, lr, ror r4
	...
}
    1864:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
    1868:	252d0000 	strcs	r0, [sp, #-0]!
			switch (c) {
    186c:	01000000 	mrseq	r0, (UNDEF: 0)
    1870:	a719047e 			; <UNDEFINED> instruction: 0xa719047e
    1874:	5b000000 	blpl	187c <__pi_vfparse+0xb8>
				for (i = 12; ; i -= 4) {
    1878:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    187c:	0905011e 	stmdbeq	r5, {r1, r2, r3, r4, r8}
						[ (val >> i) & 0xf ]);
    1880:	01010000 	mrseq	r0, (UNDEF: 1)
    1884:	08400604 	stmdaeq	r0, {r2, r9, sl}^
    1888:	09f80000 	ldmibeq	r8!, {}^	; <UNPREDICTABLE>
					outc (__pi_hex_enc_table
    188c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1890:	00000a1e 	andeq	r0, r0, lr, lsl sl
					if (i == 0)
    1894:	00096a2e 	andeq	r6, r9, lr, lsr #20
    1898:	00097000 	andeq	r7, r9, r0
				for (i = 12; ; i -= 4) {
    189c:	00088600 	andeq	r8, r8, r0, lsl #12
				val = (word) va_arg (ap, aword);
    18a0:	00691c00 	rsbeq	r1, r9, r0, lsl #24
				if (c == 'd' && (val & 0x8000) != 0) {
    18a4:	0b046b01 	bleq	11c4b0 <__ccfg+0xfc508>
				val = (word) va_arg (ap, aword);
    18a8:	0000008d 	andeq	r0, r0, sp, lsl #1
				if (c == 'd' && (val & 0x8000) != 0) {
    18ac:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    18b0:	086a0000 	stmdaeq	sl!, {}^	; <UNPREDICTABLE>
					outc ('-');
    18b4:	01d80000 	bicseq	r0, r8, r0
    18b8:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
					val = (~val) + 1;
    18bc:	54200204 	strtpl	r0, [r0], #-516	; 0xfffffdfc
    18c0:	6c00000f 	stcvs	0, cr0, [r0], {15}
				for (i = 12; ; i -= 4) {
    18c4:	f8000008 			; <UNDEFINED> instruction: 0xf8000008
				enci (10000);
    18c8:	01000001 	tsteq	r0, r1
    18cc:	1a02040b 	bne	82900 <__ccfg+0x62958>
    18d0:	23000009 	movwcs	r0, #9
    18d4:	000001f8 	strdeq	r0, [r0], -r8
    18d8:	000f612f 	andeq	r6, pc, pc, lsr #2
    18dc:	0f6d3000 	svceq	0x006d3000
    18e0:	01f80000 	mvnseq	r0, r0
    18e4:	6e310000 	cdpvs	0, 3, cr0, cr1, cr0, {0}
    18e8:	6e00000f 	cdpvs	0, 0, cr0, cr0, cr15, {0}
    18ec:	22000000 	andcs	r0, r0, #0
    18f0:	000013c9 	andeq	r1, r0, r9, asr #7
    18f4:	00000876 	andeq	r0, r0, r6, ror r8
    18f8:	00000218 	andeq	r0, r0, r8, lsl r2
    18fc:	e704fa01 	str	pc, [r4, -r1, lsl #20]
    1900:	21000008 	tstcs	r0, r8
    1904:	000013e5 	andeq	r1, r0, r5, ror #7
    1908:	0013d821 	andseq	sp, r3, r1, lsr #16
    190c:	f3220000 	vhadd.u32	d0, d2, d0
				if (c == 'd' || c == 'u') {
    1910:	7a000013 	bvc	1964 <__pi_vfparse+0x1a0>
    1914:	30000008 	andcc	r0, r0, r8
					if (c == 'd' &&
    1918:	01000002 	tsteq	r0, r2
					val = va_arg (ap, lword);
    191c:	090104fe 	stmdbeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl}
					fm++;
    1920:	02210000 	eoreq	r0, r1, #0
					if (c == 'd' &&
    1924:	00000014 	andeq	r0, r0, r4, lsl r0
    1928:	00141032 	andseq	r1, r4, r2, lsr r0
						outc ('-');
    192c:	00087e00 	andeq	r7, r8, r0, lsl #28
    1930:	00024800 	andeq	r4, r2, r0, lsl #16
						val = (~val) + 1;
    1934:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
				enci (10000);
    1938:	00141f21 	andseq	r1, r4, r1, lsr #30
					enci (1000000000UL);
    193c:	00000000 	andeq	r0, r0, r0
    1940:	14102000 	ldrne	r2, [r0], #-0
    1944:	08be0000 	ldmeq	lr!, {}	; <UNPREDICTABLE>
    1948:	02600000 	rsbeq	r0, r0, #0
    194c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1950:	09350204 	ldmdbeq	r5!, {r2, r9}
    1954:	1f210000 	svcne	0x00210000
    1958:	00000014 	andeq	r0, r0, r4, lsl r0
    195c:	00141020 	andseq	r1, r4, r0, lsr #32
    1960:	0008c000 	andeq	ip, r8, r0
    1964:	00028000 	andeq	r8, r2, r0
    1968:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    196c:	00095002 	andeq	r5, r9, r2
    1970:	141f2100 	ldrne	r2, [pc], #-256	; 1978 <__pi_vfparse+0x1b4>
    1974:	20000000 	andcs	r0, r0, r0
    1978:	000013f3 	strdeq	r1, [r0], -r3
    197c:	000008da 	ldrdeq	r0, [r0], -sl
				} else if (c == 'x') {
    1980:	00000298 	muleq	r0, r8, r2
					for (i = 28; ; i -= 4) {
    1984:	02040e01 	andeq	r0, r4, #1, 28
					val = va_arg (ap, lword);
    1988:	0000096b 	andeq	r0, r0, fp, ror #18
							[ (val >> i) & 0xf ]);
    198c:	00140221 	andseq	r0, r4, r1, lsr #4
    1990:	f3260000 	vhadd.u32	d0, d6, d0
						outc (__pi_hex_enc_table
    1994:	e0000013 	and	r0, r0, r3, lsl r0
    1998:	e2000008 	and	r0, r0, #8
    199c:	01000008 	tsteq	r0, r8
						if (i == 0)
    19a0:	8602040e 	strhi	r0, [r2], -lr, lsl #8
    19a4:	21000009 	tstcs	r0, r9
					for (i = 28; ; i -= 4) {
    19a8:	00001402 	andeq	r1, r0, r2, lsl #8
					outc ('%');
    19ac:	12342000 	eorsne	r2, r4, #0
    19b0:	08f20000 	ldmeq	r2!, {}^	; <UNPREDICTABLE>
    19b4:	02b00000 	adcseq	r0, r0, #0
					outc ('l');
    19b8:	1b010000 	blne	419c0 <__ccfg+0x21a18>
    19bc:	09a10204 	stmibeq	r1!, {r2, r9}
				val = (word) va_arg (ap, aword);
    19c0:	43210000 			; <UNDEFINED> instruction: 0x43210000
				outc (val);
    19c4:	00000012 	andeq	r0, r0, r2, lsl r0
    19c8:	000ccb26 	andeq	ip, ip, r6, lsr #22
				while (*st != '\0') {
    19cc:	00091c00 	andeq	r1, r9, r0, lsl #24
    19d0:	00094600 	andeq	r4, r9, r0, lsl #12
    19d4:	043e0100 	ldrteq	r0, [lr], #-256	; 0xffffff00
    19d8:	0009c802 	andeq	ip, r9, r2, lsl #16
					outc (*st);
    19dc:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    19e0:	093a0000 	ldmdbeq	sl!, {}	; <UNPREDICTABLE>
					st++;
    19e4:	02c80000 	sbceq	r0, r8, #0
		c = *fm++;
    19e8:	01010000 	mrseq	r0, (UNDEF: 1)
    19ec:	26000203 	strcs	r0, [r0], -r3, lsl #4
    19f0:	000012ab 	andeq	r1, r0, fp, lsr #5
char *vform (char *res, const char *fm, va_list aq) {
    19f4:	00000956 	andeq	r0, r0, r6, asr r9
    19f8:	0000096a 	andeq	r0, r0, sl, ror #18
	if (res != NULL) {
    19fc:	03045101 	movweq	r5, #16641	; 0x4101
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1a00:	000009ef 	andeq	r0, r0, pc, ror #19
    1a04:	0012b61d 	andseq	fp, r2, sp, lsl r6
    1a08:	00095600 	andeq	r5, r9, r0, lsl #12
}
    1a0c:	00095a00 	andeq	r5, r9, r0, lsl #20
    1a10:	01140b00 	tsteq	r4, r0, lsl #22
	fml = strlen (fm) + 17;
    1a14:	95330005 	ldrls	r0, [r3, #-5]!
    1a18:	7000000b 	andvc	r0, r0, fp
    1a1c:	e0000009 	and	r0, r0, r9
	if ((res = (char*) umalloc (fml)) == NULL)
    1a20:	01000002 	tsteq	r0, r2
    1a24:	33020472 	movwcc	r0, #9330	; 0x2472
    1a28:	00001311 	andeq	r1, r0, r1, lsl r3
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1a2c:	00000970 	andeq	r0, r0, r0, ror r9
    1a30:	000002e0 	andeq	r0, r0, r0, ror #5
    1a34:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
    1a38:	00132d21 	andseq	r2, r3, r1, lsr #26
		ufree (res);
    1a3c:	13202100 	nopne	{0}	; <UNPREDICTABLE>
		goto Again;
    1a40:	00000000 	andeq	r0, r0, r0
	if (buf == NULL || fmt == NULL)
    1a44:	e0012c00 	and	r2, r1, r0, lsl #24
int vscan (const char *buf, const char *fmt, va_list ap) {
    1a48:	0100000b 	tsteq	r0, fp
	if (buf == NULL || fmt == NULL)
    1a4c:	010603ed 	smlatteq	r6, sp, r3, r0
    1a50:	00000760 	andeq	r0, r0, r0, ror #14
    1a54:	0000079c 	muleq	r0, ip, r7
		    	    case 'u': scanu (lword); break;
    1a58:	0aa79c01 	beq	fe9e8a64 <_estack+0xde9e3a64>
			while (isspace (*buf)) buf++;
    1a5c:	76340000 	ldrtvc	r0, [r4], -r0
    1a60:	01006c61 	tsteq	r0, r1, ror #24
	while (*fmt != '\0') {
    1a64:	8d1c03ed 	ldchi	3, cr0, [ip, #-948]	; 0xfffffc4c
		if (*fmt++ != '%')
    1a68:	01000000 	mrseq	r0, (UNDEF: 0)
		switch (*fmt++) {
    1a6c:	00692950 	rsbeq	r2, r9, r0, asr r9
    1a70:	0603ef01 	streq	lr, [r3], -r1, lsl #30
    1a74:	0000008d 	andeq	r0, r0, sp, lsl #1
    1a78:	0000008c 	andeq	r0, r0, ip, lsl #1
    1a7c:	006e6229 	rsbeq	r6, lr, r9, lsr #4
    1a80:	0803f001 	stmdaeq	r3, {r0, ip, sp, lr, pc}
    1a84:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
}
    1a88:	000000aa 	andeq	r0, r0, sl, lsr #1
		switch (*fmt++) {
    1a8c:	0011ed25 	andseq	lr, r1, r5, lsr #26
    1a90:	00076000 	andeq	r6, r7, r0
    1a94:	00019800 	andeq	r9, r1, r0, lsl #16
    1a98:	03f20100 	mvnseq	r0, #0, 2
			while (isspace (*buf)) buf++;
    1a9c:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
    1aa0:	07660000 	strbeq	r0, [r6, -r0]!
    1aa4:	01b00000 	movseq	r0, r0
    1aa8:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    1aac:	0a950303 	beq	fe5426c0 <_estack+0xde53d6c0>
    1ab0:	bb350000 	bllt	d41ab8 <__ccfg+0xd21b10>
			if (*buf == '\0')
    1ab4:	aa000013 	bge	1b08 <vscan+0xc4>
			if (*buf != ',') {
    1ab8:	00000000 	andeq	r0, r0, r0
			sap = va_arg (ap, char*);
    1abc:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
			nc++;
    1ac0:	00078a00 	andeq	r8, r7, r0, lsl #20
			if (*buf != ',') {
    1ac4:	00078c00 	andeq	r8, r7, r0, lsl #24
				while (!isspace (*buf) && *buf != ',' &&
    1ac8:	03f90100 	mvnseq	r0, #0, 2
    1acc:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
    1ad0:	00000b76 	andeq	r0, r0, r6, ror fp
    1ad4:	0603da01 	streq	sp, [r3], -r1, lsl #20
    1ad8:	00071c01 	andeq	r1, r7, r1, lsl #24
    1adc:	00076000 	andeq	r6, r7, r0
    1ae0:	2c9c0100 	ldfcss	f0, [ip], {0}
			while (isspace (*buf)) buf++;
    1ae4:	3400000b 	strcc	r0, [r0], #-11
    1ae8:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1aec:	1c03da01 			; <UNDEFINED> instruction: 0x1c03da01
    1af0:	0000008d 	andeq	r0, r0, sp, lsl #1
    1af4:	691c5001 	ldmdbvs	ip, {r0, ip, lr}
			if (*buf == ',') buf++;
    1af8:	03dc0100 	bicseq	r0, ip, #0, 2
    1afc:	00008d06 	andeq	r8, r0, r6, lsl #26
			*sap = '\0';
    1b00:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
			break;
    1b04:	03dd0100 	bicseq	r0, sp, #0, 2
		    case 'd': scani (word); break;
    1b08:	0000df08 	andeq	sp, r0, r8, lsl #30
    1b0c:	0000bd00 	andeq	fp, r0, r0, lsl #26
    1b10:	11ed2500 	mvnne	r2, r0, lsl #10
    1b14:	071c0000 	ldreq	r0, [ip, -r0]
    1b18:	01500000 	cmpeq	r0, r0
    1b1c:	df010000 	svcle	0x00010000
    1b20:	ac200203 	sfmge	f0, 4, [r0], #-12
    1b24:	20000013 	andcs	r0, r0, r3, lsl r0
    1b28:	68000007 	stmdavs	r0, {r0, r1, r2}
    1b2c:	01000001 	tsteq	r0, r1
    1b30:	1a0303e2 	bne	c2ac0 <__ccfg+0xa2b18>
    1b34:	3500000b 	strcc	r0, [r0, #-11]
    1b38:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    1b3c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1b40:	11f71d00 	mvnsne	r1, r0, lsl #26
    1b44:	074e0000 	strbeq	r0, [lr, -r0]
    1b48:	07500000 	ldrbeq	r0, [r0, -r0]
    1b4c:	e6010000 	str	r0, [r1], -r0
    1b50:	1e000203 	cdpne	2, 0, cr0, cr0, cr3, {0}
    1b54:	000bf101 	andeq	pc, fp, r1, lsl #2
    1b58:	03c60100 	biceq	r0, r6, #0, 2
    1b5c:	00079c06 	andeq	r9, r7, r6, lsl #24
    1b60:	00084000 	andeq	r4, r8, r0
    1b64:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
    1b68:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    1b6c:	000007ae 	andeq	r0, r0, lr, lsr #15
    1b70:	000007dc 	ldrdeq	r0, [r0], -ip
    1b74:	00000b6e 	andeq	r0, r0, lr, ror #22
		    case 'u': scanu (word); break;
    1b78:	07006a36 	smladxeq	r0, r6, sl, r6
    1b7c:	008d0203 	addeq	r0, sp, r3, lsl #4
    1b80:	00e30000 	rsceq	r0, r3, r0
    1b84:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
    1b88:	02030700 	andeq	r0, r3, #0, 14
    1b8c:	000003f4 	strdeq	r0, [r0], -r4
    1b90:	000000f6 	strdeq	r0, [r0], -r6
    1b94:	07ee3700 	strbeq	r3, [lr, r0, lsl #14]!
    1b98:	081c0000 	ldmdaeq	ip, {}	; <UNPREDICTABLE>
    1b9c:	6a360000 	bvs	d81ba4 <__ccfg+0xd61bfc>
    1ba0:	02020800 	andeq	r0, r2, #0, 16
    1ba4:	0000008d 	andeq	r0, r0, sp, lsl #1
    1ba8:	00000109 	andeq	r0, r0, r9, lsl #2
    1bac:	08006936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, lr}
    1bb0:	03f40202 	mvnseq	r0, #536870912	; 0x20000000
    1bb4:	011c0000 	tsteq	ip, r0
    1bb8:	00000000 	andeq	r0, r0, r0
    1bbc:	0009fe38 	andeq	pc, r9, r8, lsr lr	; <UNPREDICTABLE>
		    case 'x': scanx (word); break;
    1bc0:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
    1bc4:	011e0314 	tsteq	lr, r4, lsl r3
    1bc8:	00000d65 	andeq	r0, r0, r5, ror #26
    1bcc:	06038201 	streq	r8, [r3], -r1, lsl #4
    1bd0:	0000065c 	andeq	r0, r0, ip, asr r6
    1bd4:	0000071c 	andeq	r0, r0, ip, lsl r7
    1bd8:	0c289c01 	stceq	12, cr9, [r8], #-4
    1bdc:	882e0000 	stmdahi	lr!, {}	; <UNPREDICTABLE>
    1be0:	b6000006 	strlt	r0, [r0], -r6
    1be4:	e3000006 	movw	r0, #6
    1be8:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    1bec:	8901006a 	stmdbhi	r1, {r1, r3, r5, r6}
    1bf0:	008d0303 	addeq	r0, sp, r3, lsl #6
    1bf4:	012f0000 			; <UNDEFINED> instruction: 0x012f0000
    1bf8:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    1bfc:	03890100 	orreq	r0, r9, #0, 2
    1c00:	0003f403 	andeq	pc, r3, r3, lsl #8
    1c04:	00014200 	andeq	r4, r1, r0, lsl #4
    1c08:	381b0000 	ldmdacc	fp, {}	; <UNPREDICTABLE>
    1c0c:	0b000001 	bleq	1c18 <vscan+0x1d4>
    1c10:	2900000c 	stmdbcs	r0, {r2, r3}
    1c14:	8f01006a 	svchi	0x0001006a
    1c18:	008d0303 	addeq	r0, sp, r3, lsl #6
    1c1c:	01550000 	cmpeq	r5, r0
    1c20:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    1c24:	038f0100 	orreq	r0, pc, #0, 2
    1c28:	0003f403 	andeq	pc, r3, r3, lsl #8
    1c2c:	00016800 	andeq	r6, r1, r0, lsl #16
    1c30:	e7330000 	ldr	r0, [r3, -r0]!
    1c34:	5c000012 	stcpl	0, cr0, [r0], {18}
			switch (*fmt++) {
    1c38:	18000006 	stmdane	r0, {r1, r2}
    1c3c:	01000001 	tsteq	r0, r1
    1c40:	21020384 	smlabbcs	r2, r4, r3, r0
    1c44:	00001303 	andeq	r1, r0, r3, lsl #6
    1c48:	0012f621 	andseq	pc, r2, r1, lsr #12
    1c4c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
		    	    case 'd': scani (lword); break;
    1c50:	00000afb 	strdeq	r0, [r0], -fp
    1c54:	0d037d01 	stceq	13, cr7, [r3, #-4]
    1c58:	00020001 	andeq	r0, r2, r1
    1c5c:	00020c00 	andeq	r0, r2, r0, lsl #24
    1c60:	529c0100 	addspl	r0, ip, #0, 2
    1c64:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    1c68:	00000cc3 	andeq	r0, r0, r3, asr #25
    1c6c:	1f037d01 	svcne	0x00037d01
    1c70:	0000008d 	andeq	r0, r0, sp, lsl #1
    1c74:	0000017b 	andeq	r0, r0, fp, ror r1
    1c78:	0c843a00 	vstmiaeq	r4, {s6-s5}
    1c7c:	10010000 	andne	r0, r1, r0
    1c80:	8d010c03 	stchi	12, cr0, [r1, #-12]
    1c84:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1c88:	5c000005 	stcpl	0, cr0, [r0], {5}
    1c8c:	01000006 	tsteq	r0, r6
    1c90:	000ccb9c 	muleq	ip, ip, fp
    1c94:	0a8d2d00 	beq	fe34d09c <_estack+0xde34809c>
    1c98:	10010000 	andne	r0, r1, r0
    1c9c:	008d1e03 	addeq	r1, sp, r3, lsl #28
    1ca0:	01990000 	orrseq	r0, r9, r0
    1ca4:	623b0000 	eorsvs	r0, fp, #0
    1ca8:	01006675 	tsteq	r0, r5, ror r6
		    	    case 'x': scanx (lword); break;
    1cac:	c92f0310 	stmdbgt	pc!, {r4, r8, r9}	; <UNPREDICTABLE>
    1cb0:	ac000001 	stcge	0, cr0, [r0], {1}
    1cb4:	3b000001 	blcc	1cc0 <vscan+0x27c>
    1cb8:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1cbc:	38031001 	stmdacc	r3, {r0, ip}
    1cc0:	0000008d 	andeq	r0, r0, sp, lsl #1
    1cc4:	0000024e 	andeq	r0, r0, lr, asr #4
    1cc8:	0009aa2b 	andeq	sl, r9, fp, lsr #20
    1ccc:	03180100 	tsteq	r8, #0, 2
    1cd0:	0ab52b01 	beq	fed4c8dc <_estack+0xded478dc>
    1cd4:	3d010000 	stccc	0, cr0, [r1, #-0]
    1cd8:	44270103 	strtmi	r0, [r7], #-259	; 0xfffffefd
    1cdc:	2e00000d 	cdpcs	0, 0, cr0, cr0, cr13, {0}
    1ce0:	30000006 	andcc	r0, r0, r6
    1ce4:	01000006 	tsteq	r0, r6
    1ce8:	21150365 	tstcs	r5, r5, ror #6
    1cec:	00000d58 	andeq	r0, r0, r8, asr sp
    1cf0:	45380000 	ldrmi	r0, [r8, #-0]!
    1cf4:	0100000b 	tsteq	r0, fp
    1cf8:	010d02fc 	strdeq	r0, [sp, -ip]
    1cfc:	000b463c 	andeq	r4, fp, ip, lsr r6
    1d00:	02f00100 	rscseq	r0, r0, #0, 2
    1d04:	0005140d 	andeq	r1, r5, sp, lsl #8
    1d08:	00054c00 	andeq	r4, r5, r0, lsl #24
    1d0c:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    1d10:	2000000d 	andcs	r0, r0, sp
    1d14:	0000133b 	andeq	r1, r0, fp, lsr r3
    1d18:	00000514 	andeq	r0, r0, r4, lsl r5
		    	    case 'd': scani (lword); break;
    1d1c:	00000100 	andeq	r0, r0, r0, lsl #2
    1d20:	0202f501 	andeq	pc, r2, #4194304	; 0x400000
    1d24:	00000d07 	andeq	r0, r0, r7, lsl #26
    1d28:	00134a21 	andseq	r4, r3, r1, lsr #20
    1d2c:	75260000 	strvc	r0, [r6, #-0]!
    1d30:	20000013 	andcs	r0, r0, r3, lsl r0
    1d34:	26000005 	strcs	r0, [r0], -r5
		    	    case 'u': scanu (lword); break;
    1d38:	01000005 	tsteq	r0, r5
    1d3c:	2c0202f6 	sfmcs	f0, 4, [r2], {246}	; 0xf6
    1d40:	2100000d 	tstcs	r0, sp
    1d44:	0000139e 	muleq	r0, lr, r3
    1d48:	00139121 	andseq	r9, r3, r1, lsr #2
    1d4c:	13842100 	orrne	r2, r4, #0, 2
    1d50:	27000000 	strcs	r0, [r0, -r0]
    1d54:	000012ca 	andeq	r1, r0, sl, asr #5
    1d58:	00000526 	andeq	r0, r0, r6, lsr #10
    1d5c:	00000530 	andeq	r0, r0, r0, lsr r5
    1d60:	0202f701 	andeq	pc, r2, #262144	; 0x40000
    1d64:	0012d921 	andseq	sp, r2, r1, lsr #18
    1d68:	3d000000 	stccc	0, cr0, [r0, #-0]
    1d6c:	00097801 	andeq	r7, r9, r1, lsl #16
    1d70:	02eb0100 	rsceq	r0, fp, #0, 2
    1d74:	00a70106 	adceq	r0, r7, r6, lsl #2
    1d78:	65010000 	strvs	r0, [r1, #-0]
    1d7c:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
		    	    case 'x': scanx (lword); break;
    1d80:	01006175 	tsteq	r0, r5, ror r1
    1d84:	652702eb 	strvs	r0, [r7, #-747]!	; 0xfffffd15
			if ((c = *buf++) == '\0')
    1d88:	0000000d 	andeq	r0, r0, sp
    1d8c:	02260407 	eoreq	r0, r6, #117440512	; 0x7000000
			sap = va_arg (ap, char*);
    1d90:	011a0000 	tsteq	sl, r0
			nc++;
    1d94:	00000a3b 	andeq	r0, r0, fp, lsr sl
			break;
    1d98:	0902d401 	stmdbeq	r2, {r0, sl, ip, lr, pc}
			while (isspace (*buf)) buf++;
    1d9c:	00009b01 	andeq	r9, r0, r1, lsl #22
    1da0:	0004c000 	andeq	ip, r4, r0
    1da4:	00051400 	andeq	r1, r5, r0, lsl #8
						*sap++ = *buf++;
    1da8:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    1dac:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
			while (isspace (*buf)) buf++;
    1db0:	00000985 	andeq	r0, r0, r5, lsl #19
    1db4:	2102d401 	tstcs	r2, r1, lsl #8
    1db8:	000000a7 	andeq	r0, r0, r7, lsr #1
		return 0;
    1dbc:	000002da 	ldrdeq	r0, [r0], -sl
    1dc0:	0061753b 	rsbeq	r7, r1, fp, lsr r5
		    case 'x': scanx (word); break;
    1dc4:	2f02d401 	svccs	0x0002d401
    1dc8:	00000dc1 	andeq	r0, r0, r1, asr #27
		    	    case 'x': scanx (lword); break;
    1dcc:	000002ed 	andeq	r0, r0, sp, ror #5
    1dd0:	00135833 	andseq	r5, r3, r3, lsr r8
    1dd4:	0004e000 	andeq	lr, r4, r0
    1dd8:	0000e800 	andeq	lr, r0, r0, lsl #16
    1ddc:	02e60100 	rsceq	r0, r6, #0, 2
    1de0:	13672102 	cmnne	r7, #-2147483648	; 0x80000000
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	021a0407 	andseq	r0, sl, #117440512	; 0x7000000
    1dec:	011a0000 	tsteq	sl, r0
    1df0:	00000d8b 	andeq	r0, r0, fp, lsl #27
    1df4:	06018a01 	streq	r8, [r1], -r1, lsl #20
    1df8:	0000a701 	andeq	sl, r0, r1, lsl #14
    1dfc:	00047000 	andeq	r7, r4, r0
    1e00:	0004c000 	andeq	ip, r4, r0
    1e04:	0f9c0100 	svceq	0x009c0100
    1e08:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
    1e0c:	00000b52 	andeq	r0, r0, r2, asr fp
    1e10:	26018a01 	strcs	r8, [r1], -r1, lsl #20
    1e14:	0000009b 	muleq	r0, fp, r0
    1e18:	00000300 	andeq	r0, r0, r0, lsl #6
    1e1c:	0058453f 	subseq	r4, r8, pc, lsr r5
    1e20:	0101a401 	tsteq	r1, r1, lsl #8
    1e24:	000f461d 	andeq	r4, pc, sp, lsl r6	; <UNPREDICTABLE>
    1e28:	00048400 	andeq	r8, r4, r0, lsl #8
    1e2c:	00048e00 	andeq	r8, r4, r0, lsl #28
    1e30:	019c0100 	orrseq	r0, ip, r0, lsl #2
    1e34:	011e001a 	tsteq	lr, sl, lsl r0
    1e38:	00000b08 	andeq	r0, r0, r8, lsl #22
    1e3c:	06013801 	streq	r3, [r1], -r1, lsl #16
    1e40:	0000035c 	andeq	r0, r0, ip, asr r3
    1e44:	00000470 	andeq	r0, r0, r0, ror r4
    1e48:	0ec19c01 	cdpeq	12, 12, cr9, cr1, cr1, {0}
    1e4c:	2b400000 	blcs	1001e54 <__ccfg+0xfe1eac>
    1e50:	0100000c 	tsteq	r0, ip
    1e54:	df08013a 	svcle	0x0008013a
    1e58:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1e5c:	41000003 	tstmi	r0, r3
    1e60:	00545545 	subseq	r5, r4, r5, asr #10
    1e64:	01016801 	tsteq	r1, r1, lsl #16
    1e68:	000003aa 	andeq	r0, r0, sl, lsr #7
    1e6c:	0000d023 	andeq	sp, r0, r3, lsr #32
    1e70:	0a974000 	beq	fe5d1e78 <_estack+0xde5cce78>
    1e74:	47010000 	strmi	r0, [r1, -r0]
    1e78:	009b0b01 	addseq	r0, fp, r1, lsl #22
    1e7c:	03690000 	cmneq	r9, #0
    1e80:	10420000 	subne	r0, r2, r0
    1e84:	c8000014 	stmdagt	r0, {r2, r4}
    1e88:	d0000003 	andle	r0, r0, r3
    1e8c:	05000003 	streq	r0, [r0, #-3]
    1e90:	0e75060d 	cdpeq	6, 7, cr0, cr5, cr13, {0}
    1e94:	1f210000 	svcne	0x00210000
    1e98:	00000014 	andeq	r0, r0, r4, lsl r0
    1e9c:	00141042 	andseq	r1, r4, r2, asr #32
    1ea0:	0003d400 	andeq	sp, r3, r0, lsl #8
    1ea4:	0003dc00 	andeq	sp, r3, r0, lsl #24
    1ea8:	060f0500 	streq	r0, [pc], -r0, lsl #10
    1eac:	00000e8f 	andeq	r0, r0, pc, lsl #29
    1eb0:	00141f21 	andseq	r1, r4, r1, lsr #30
    1eb4:	f3420000 	vhadd.u8	d16, d2, d0
    1eb8:	22000013 	andcs	r0, r0, #19
    1ebc:	2a000004 	bcs	1ed4 <TrimAfterColdResetWakeupFromShutDown+0x20>
    1ec0:	05000004 	streq	r0, [r0, #-4]
    1ec4:	0ea90617 	mcreq	6, 5, r0, cr9, cr7, {0}
    1ec8:	02210000 	eoreq	r0, r1, #0
    1ecc:	00000014 	andeq	r0, r0, r4, lsl r0
    1ed0:	0013f343 	andseq	pc, r3, r3, asr #6
    1ed4:	00042e00 	andeq	r2, r4, r0, lsl #28
    1ed8:	00043600 	andeq	r3, r4, r0, lsl #12
    1edc:	06190500 	ldreq	r0, [r9], -r0, lsl #10
    1ee0:	00140221 	andseq	r0, r4, r1, lsr #4
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	0bc8011e 	bleq	ff202368 <_estack+0xdf1fd368>
    1eec:	2b010000 	blcs	41ef4 <__ccfg+0x21f4c>
    1ef0:	03340601 	teqeq	r4, #1048576	; 0x100000
    1ef4:	035c0000 	cmpeq	ip, #0
    1ef8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1efc:	00000ef1 	strdeq	r0, [r0], -r1
    1f00:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1f04:	00033c00 	andeq	r3, r3, r0, lsl #24
    1f08:	0000b800 	andeq	fp, r0, r0, lsl #16
    1f0c:	01320100 	teqeq	r2, r0, lsl #2
    1f10:	0f38212c 	svceq	0x0038212c
    1f14:	00000000 	andeq	r0, r0, r0
    1f18:	0b1f011e 	bleq	7c2398 <__ccfg+0x7a23f0>
    1f1c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    1f20:	02f40601 	rscseq	r0, r4, #1048576	; 0x100000
    1f24:	03340000 	teqeq	r4, #0
    1f28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f2c:	00000f25 	andeq	r0, r0, r5, lsr #30
    1f30:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1f34:	00030600 	andeq	r0, r3, r0, lsl #12
    1f38:	00009800 	andeq	r9, r0, r0, lsl #16
    1f3c:	01250100 			; <UNDEFINED> instruction: 0x01250100
    1f40:	0f38352c 	svceq	0x0038352c
    1f44:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    1f48:	00000000 	andeq	r0, r0, r0
    1f4c:	000c2444 	andeq	r2, ip, r4, asr #8
    1f50:	01170100 	tsteq	r7, r0, lsl #2
    1f54:	00df0115 	sbcseq	r0, pc, r5, lsl r1	; <UNPREDICTABLE>
    1f58:	46030000 	strmi	r0, [r3], -r0
    1f5c:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
    1f60:	006c6564 	rsbeq	r6, ip, r4, ror #10
    1f64:	22011701 	andcs	r1, r1, #262144	; 0x40000
    1f68:	000000a7 	andeq	r0, r0, r7, lsr #1
    1f6c:	08a04500 	stmiaeq	r0!, {r8, sl, lr}
    1f70:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    1f74:	00a71401 	adceq	r1, r7, r1, lsl #8
    1f78:	46030000 	strmi	r0, [r3], -r0
    1f7c:	00000d7f 	andeq	r0, r0, pc, ror sp
    1f80:	0314ee01 	tsteq	r4, #1, 28
    1f84:	00000f7a 	andeq	r0, r0, sl, ror pc
    1f88:	6e697047 	cdpvs	0, 6, cr7, cr9, cr7, {2}
    1f8c:	06f20100 	ldrbteq	r0, [r2], r0, lsl #2
    1f90:	0000008d 	andeq	r0, r0, sp, lsl #1
    1f94:	00694748 	rsbeq	r4, r9, r8, asr #14
    1f98:	8d0bf401 	cfstrshi	mvf15, [fp, #-4]
    1f9c:	00000000 	andeq	r0, r0, r0
    1fa0:	b5014900 	strlt	r4, [r1, #-2304]	; 0xfffff700
    1fa4:	0100000c 	tsteq	r0, ip
    1fa8:	a0010698 	mulge	r1, r8, r6
    1fac:	f4000002 	vst4.8	{d0-d3}, [r0], r2
    1fb0:	01000002 	tsteq	r0, r2
    1fb4:	0010249c 	mulseq	r0, ip, r4
    1fb8:	63654a00 	cmnvs	r5, #0, 20
    1fbc:	1a980100 	bne	fe6023c4 <_estack+0xde5fd3c4>
    1fc0:	000000a7 	andeq	r0, r0, r7, lsr #1
    1fc4:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    1fc8:	01006d4a 	tsteq	r0, sl, asr #26
    1fcc:	10242a98 	mlane	r4, r8, sl, r2
    1fd0:	03ce0000 	biceq	r0, lr, #0
    1fd4:	ed280000 	stc	0, cr0, [r8, #-0]
    1fd8:	ac000011 	stcge	0, cr0, [r0], {17}
    1fdc:	ae000002 	cdpge	0, 0, cr0, cr0, cr2, {0}
    1fe0:	01000002 	tsteq	r0, r2
    1fe4:	102202a8 	eorne	r0, r2, r8, lsr #5
    1fe8:	ae000014 	mcrge	0, 0, r0, cr0, cr4, {0}
    1fec:	48000002 	stmdami	r0, {r1}
    1ff0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ff4:	0fd903b8 	svceq	0x00d903b8
    1ff8:	1f210000 	svcne	0x00210000
    1ffc:	00000014 	andeq	r0, r0, r4, lsl r0
    2000:	00141022 	andseq	r1, r4, r2, lsr #32
    2004:	0002b400 	andeq	fp, r2, r0, lsl #8
    2008:	00006800 	andeq	r6, r0, r0, lsl #16
    200c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    2010:	00000ff3 	strdeq	r0, [r0], -r3
    2014:	00141f21 	andseq	r1, r4, r1, lsr #30
    2018:	f3220000 	vhadd.u32	d0, d2, d0
    201c:	cc000013 	stcgt	0, cr0, [r0], {19}
    2020:	80000002 	andhi	r0, r0, r2
    2024:	01000000 	mrseq	r0, (UNDEF: 0)
    2028:	100d03b8 			; <UNDEFINED> instruction: 0x100d03b8
    202c:	02210000 	eoreq	r0, r1, #0
    2030:	00000014 	andeq	r0, r0, r4, lsl r0
    2034:	0013f343 	andseq	pc, r3, r3, asr #6
    2038:	0002d200 	andeq	sp, r2, r0, lsl #4
    203c:	0002d400 	andeq	sp, r2, r0, lsl #8
    2040:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    2044:	00140221 	andseq	r0, r4, r1, lsr #4
    2048:	07000000 	streq	r0, [r0, -r0]
    204c:	0001d604 	andeq	sp, r1, r4, lsl #12
    2050:	4a014900 	bmi	54458 <__ccfg+0x344b0>
    2054:	0100000c 	tsteq	r0, ip
    2058:	00010672 	andeq	r0, r1, r2, ror r6
    205c:	00000000 	andeq	r0, r0, r0
    2060:	01000000 	mrseq	r0, (UNDEF: 0)
    2064:	0010ca9c 	mulseq	r0, ip, sl
    2068:	74734a00 	ldrbtvc	r4, [r3], #-2560	; 0xfffff600
    206c:	18720100 	ldmdane	r2!, {r8}^
    2070:	000000a7 	andeq	r0, r0, r7, lsr #1
    2074:	000003ec 	andeq	r0, r0, ip, ror #7
    2078:	6e65734a 	cdpvs	3, 6, cr7, cr5, cr10, {2}
    207c:	28720100 	ldmdacs	r2!, {r8}^
    2080:	00000244 	andeq	r0, r0, r4, asr #4
    2084:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2088:	6c61764a 	stclvs	6, cr7, [r1], #-296	; 0xfffffed8
    208c:	35720100 	ldrbcc	r0, [r2, #-256]!	; 0xffffff00
    2090:	000000fc 	strdeq	r0, [r0], -ip
    2094:	0000041d 	andeq	r0, r0, sp, lsl r4
    2098:	0008bb4b 	andeq	fp, r8, fp, asr #22
    209c:	0e740100 	rpweqs	f0, f4, f0
    20a0:	000000c9 	andeq	r0, r0, r9, asr #1
    20a4:	00000305 	andeq	r0, r0, r5, lsl #6
    20a8:	a24c0000 	subge	r0, ip, #0
    20ac:	0100000d 	tsteq	r0, sp
    20b0:	00000178 	andeq	r0, r0, r8, ror r1
    20b4:	204d0000 	subcs	r0, sp, r0
    20b8:	00000012 	andeq	r0, r0, r2, lsl r0
    20bc:	80000000 	andhi	r0, r0, r0
    20c0:	01000004 	tsteq	r0, r4
    20c4:	01420381 	smlalbbeq	r0, r2, r1, r3
    20c8:	00000012 	andeq	r0, r0, r2, lsl r0
    20cc:	00000000 	andeq	r0, r0, r0
    20d0:	01000000 	mrseq	r0, (UNDEF: 0)
    20d4:	10b9127e 	adcsne	r1, r9, lr, ror r2
    20d8:	132f0000 			; <UNDEFINED> instruction: 0x132f0000
    20dc:	00000012 	andeq	r0, r0, r2, lsl r0
    20e0:	00122a28 	andseq	r2, r2, r8, lsr #20
	...
    20ec:	03840100 	orreq	r0, r4, #0, 2
    20f0:	49014e00 	stmdbmi	r1, {r9, sl, fp, lr}
    20f4:	0100000d 	tsteq	r0, sp
    20f8:	00010662 	andeq	r0, r1, r2, ror #12
    20fc:	00000000 	andeq	r0, r0, r0
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	5a01499c 	bpl	5477c <__ccfg+0x347d4>
    2108:	01000008 	tsteq	r0, r8
    210c:	0001064f 	andeq	r0, r1, pc, asr #12
    2110:	00000000 	andeq	r0, r0, r0
    2114:	01000000 	mrseq	r0, (UNDEF: 0)
    2118:	0011079c 	mulseq	r1, ip, r7
    211c:	12512800 	subsne	r2, r1, #0, 16
	...
    2128:	5f010000 	svcpl	0x00010000
    212c:	01490003 	cmpeq	r9, r3
    2130:	00000891 	muleq	r0, r1, r8
    2134:	01063b01 	tsteq	r6, r1, lsl #22
	...
    2140:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
    2144:	644a0000 	strbvs	r0, [sl], #-0
    2148:	1c3b0100 	ldfnes	f0, [fp], #-0
    214c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2150:	0000043b 	andeq	r0, r0, fp, lsr r4
    2154:	51014900 	tstpl	r1, r0, lsl #18
    2158:	01000009 	tsteq	r0, r9
    215c:	6401062b 	strvs	r0, [r1], #-1579	; 0xfffff9d5
    2160:	a0000002 	andge	r0, r0, r2
    2164:	01000002 	tsteq	r0, r2
    2168:	0011559c 	mulseq	r1, ip, r5
    216c:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    2170:	df1b2b01 	svcle	0x001b2b01
    2174:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    2178:	00000004 	andeq	r0, r0, r4
    217c:	0b870149 	bleq	fe1c26a8 <_estack+0xde1bd6a8>
    2180:	20010000 	andcs	r0, r1, r0
    2184:	02380106 	eorseq	r0, r8, #-2147483647	; 0x80000001
    2188:	02620000 	rsbeq	r0, r2, #0
    218c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2190:	0000117c 	andeq	r1, r0, ip, ror r1
    2194:	01006e4a 	tsteq	r0, sl, asr #28
    2198:	00b81c20 	adcseq	r1, r8, r0, lsr #24
    219c:	04770000 	ldrbteq	r0, [r7], #-0
    21a0:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    21a4:	000c3201 	andeq	r3, ip, r1, lsl #4
    21a8:	06190100 	ldreq	r0, [r9], -r0, lsl #2
    21ac:	00020c01 	andeq	r0, r2, r1, lsl #24
    21b0:	00023800 	andeq	r3, r2, r0, lsl #16
    21b4:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    21b8:	4f000011 	svcmi	0x00000011
    21bc:	1901006e 	stmdbne	r1, {r1, r2, r3, r5, r6}
    21c0:	0000b81c 	andeq	fp, r0, ip, lsl r8
    21c4:	43500100 	cmpmi	r0, #0, 2
    21c8:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    21cc:	00000220 	andeq	r0, r0, r0, lsr #4
    21d0:	0000022a 	andeq	r0, r0, sl, lsr #4
    21d4:	21031b01 	tstcs	r3, r1, lsl #22
    21d8:	000011c5 	andeq	r1, r0, r5, asr #3
    21dc:	5d500000 	ldclpl	0, cr0, [r0, #-0]
    21e0:	0100000d 	tsteq	r0, sp
    21e4:	03011415 	movweq	r1, #5141	; 0x1415
    21e8:	000011d0 	ldrdeq	r1, [r0], -r0
    21ec:	01006e51 	tsteq	r0, r1, asr lr
    21f0:	00b82b15 	adcseq	r2, r8, r5, lsl fp
    21f4:	52000000 	andpl	r0, r0, #0
    21f8:	0000093d 	andeq	r0, r0, sp, lsr r9
    21fc:	35011a03 	strcc	r1, [r1, #-2563]	; 0xfffff5fd
    2200:	11ed0301 	mvnne	r0, r1, lsl #6
    2204:	4e530000 	cdpmi	0, 5, cr0, cr3, cr0, {0}
    2208:	0300000d 	movweq	r0, #13
    220c:	7348011a 	movtvc	r0, #33050	; 0x811a
    2210:	00000000 	andeq	r0, r0, r0
    2214:	000b8e54 	andeq	r8, fp, r4, asr lr
    2218:	355b0300 	ldrbcc	r0, [fp, #-768]	; 0xfffffd00
    221c:	ae540301 	cdpge	3, 5, cr0, cr4, cr1, {0}
    2220:	03000008 	movweq	r0, #8
    2224:	03013550 	movweq	r3, #5456	; 0x1550
    2228:	000c6955 	andeq	r6, ip, r5, asr r9
    222c:	01bf0f00 			; <UNDEFINED> instruction: 0x01bf0f00
    2230:	00007301 	andeq	r7, r0, r1, lsl #6
    2234:	12200300 	eorne	r0, r0, #0, 6
    2238:	01160000 	tsteq	r6, r0
    223c:	0f00000d 	svceq	0x0000000d
    2240:	00730ec1 	rsbseq	r0, r3, r1, asr #29
    2244:	54000000 	strpl	r0, [r0], #-0
    2248:	00000c39 	andeq	r0, r0, r9, lsr ip
    224c:	0101900f 	tsteq	r1, pc
    2250:	08785403 	ldmdaeq	r8!, {r0, r1, sl, ip, lr}^
    2254:	7b0f0000 	blvc	3c225c <__ccfg+0x3a22b4>
    2258:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    225c:	00000ae6 	andeq	r0, r0, r6, ror #21
    2260:	0103660a 	tsteq	r3, sl, lsl #12
    2264:	12510301 	subsne	r0, r1, #67108864	; 0x4000000
    2268:	bd530000 	ldcllt	0, cr0, [r3, #-0]
    226c:	0a00000a 	beq	229c <NOROM_SetupGetTrimForXoscHfCtl+0x10>
    2270:	731f0366 	tstvc	pc, #-1744830463	; 0x98000001
    2274:	00000000 	andeq	r0, r0, r0
    2278:	000c1156 	andeq	r1, ip, r6, asr r1
    227c:	014c0200 	mrseq	r0, (UNDEF: 108)
    2280:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    2284:	00000baa 	andeq	r0, r0, sl, lsr #23
    2288:	0101c402 	tsteq	r1, r2, lsl #8
    228c:	09be5703 	ldmibeq	lr!, {r0, r1, r8, r9, sl, ip, lr}
    2290:	ad020000 	stcge	0, cr0, [r2, #-0]
    2294:	00730101 	rsbseq	r0, r3, r1, lsl #2
    2298:	56030000 	strpl	r0, [r3], -r0
    229c:	00000911 	andeq	r0, r0, r1, lsl r9
    22a0:	0102450e 	tsteq	r2, lr, lsl #10
    22a4:	e3580301 	cmp	r8, #67108864	; 0x4000000
    22a8:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
    22ac:	0101022c 	tsteq	r1, ip, lsr #4
    22b0:	00000073 	andeq	r0, r0, r3, ror r0
    22b4:	08ce5203 	stmiaeq	lr, {r0, r1, r9, ip, lr}^
    22b8:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    22bc:	03010101 	movweq	r0, #4353	; 0x1101
    22c0:	000012ab 	andeq	r1, r0, fp, lsr #5
    22c4:	00088853 	andeq	r8, r8, r3, asr r8
    22c8:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
    22cc:	0000731f 	andeq	r7, r0, pc, lsl r3
    22d0:	4d560000 	ldclmi	0, cr0, [r6, #-0]
    22d4:	0b00000a 	bleq	2304 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    22d8:	0101010f 	tsteq	r1, pc, lsl #2
    22dc:	098a5403 	stmibeq	sl, {r0, r1, sl, ip, lr}
    22e0:	ed0c0000 	stc	0, cr0, [ip, #-0]
    22e4:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    22e8:	00000c56 	andeq	r0, r0, r6, asr ip
    22ec:	0101d60c 	tsteq	r1, ip, lsl #12
    22f0:	095f5203 	ldmdbeq	pc, {r0, r1, r9, ip, lr}^	; <UNPREDICTABLE>
    22f4:	40060000 	andmi	r0, r6, r0
    22f8:	03010104 	movweq	r0, #4356	; 0x1104
    22fc:	000012e7 	andeq	r1, r0, r7, ror #5
    2300:	000aca53 	andeq	ip, sl, r3, asr sl
    2304:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
    2308:	00007324 	andeq	r7, r0, r4, lsr #6
    230c:	f8520000 			; <UNDEFINED> instruction: 0xf8520000
    2310:	06000008 	streq	r0, [r0], -r8
    2314:	01010391 			; <UNDEFINED> instruction: 0x01010391
    2318:	00131103 	andseq	r1, r3, r3, lsl #2
    231c:	0aca5300 	beq	ff296f24 <_estack+0xdf291f24>
    2320:	91060000 	mrsls	r0, (UNDEF: 6)
    2324:	00731703 	rsbseq	r1, r3, r3, lsl #14
    2328:	24530000 	ldrbcs	r0, [r3], #-0
    232c:	0600000a 	streq	r0, [r0], -sl
    2330:	732a0391 			; <UNDEFINED> instruction: 0x732a0391
    2334:	00000000 	andeq	r0, r0, r0
    2338:	000d1452 	andeq	r1, sp, r2, asr r4
    233c:	030c0600 	movweq	r0, #50688	; 0xc600
    2340:	3b030101 	blcc	c274c <__ccfg+0xa27a4>
    2344:	53000013 	movwpl	r0, #19
    2348:	00000aca 	andeq	r0, r0, sl, asr #21
    234c:	18030c06 	stmdane	r3, {r1, r2, sl, fp}
    2350:	00000073 	andeq	r0, r0, r3, ror r0
    2354:	000a2453 	andeq	r2, sl, r3, asr r4
    2358:	030c0600 	movweq	r0, #50688	; 0xc600
    235c:	0000732b 	andeq	r7, r0, fp, lsr #6
    2360:	15520000 	ldrbne	r0, [r2, #-0]
    2364:	0600000a 	streq	r0, [r0], -sl
    2368:	010101e7 	smlatteq	r1, r7, r1, r0
    236c:	00135803 	andseq	r5, r3, r3, lsl #16
    2370:	0aca5300 	beq	ff296f78 <_estack+0xdf291f78>
    2374:	e7060000 	str	r0, [r6, -r0]
    2378:	00731901 	rsbseq	r1, r3, r1, lsl #18
    237c:	52000000 	andpl	r0, r0, #0
    2380:	00000b58 	andeq	r0, r0, r8, asr fp
    2384:	0101ba06 	tsteq	r1, r6, lsl #20
    2388:	13750301 	cmnne	r5, #67108864	; 0x4000000
    238c:	ca530000 	bgt	14c2394 <__ccfg+0x14a23ec>
    2390:	0600000a 	streq	r0, [r0], -sl
    2394:	731501ba 	tstvc	r5, #-2147483602	; 0x8000002e
    2398:	00000000 	andeq	r0, r0, r0
    239c:	000c0052 	andeq	r0, ip, r2, asr r0
    23a0:	01390600 	teqeq	r9, r0, lsl #12
    23a4:	ac030101 	stfges	f0, [r3], {1}
    23a8:	53000013 	movwpl	r0, #19
    23ac:	00000aca 	andeq	r0, r0, sl, asr #21
    23b0:	1b013906 	blne	507d0 <__ccfg+0x30828>
    23b4:	00000073 	andeq	r0, r0, r3, ror r0
    23b8:	0009b253 	andeq	fp, r9, r3, asr r2
    23bc:	01390600 	teqeq	r9, r0, lsl #12
    23c0:	0000732e 	andeq	r7, r0, lr, lsr #6
    23c4:	099e5300 	ldmibeq	lr, {r8, r9, ip, lr}
    23c8:	3a060000 	bcc	1823d0 <__ccfg+0x162428>
    23cc:	00731b01 	rsbseq	r1, r3, r1, lsl #22
    23d0:	52000000 	andpl	r0, r0, #0
    23d4:	00000b63 	andeq	r0, r0, r3, ror #22
    23d8:	01028404 	tsteq	r2, r4, lsl #8
    23dc:	13c90301 	bicne	r0, r9, #67108864	; 0x4000000
    23e0:	31530000 	cmpcc	r3, r0
    23e4:	0400000a 	streq	r0, [r0], #-10
    23e8:	731e0284 	tstvc	lr, #132, 4	; 0x40000008
    23ec:	00000000 	andeq	r0, r0, r0
    23f0:	00086052 	andeq	r6, r8, r2, asr r0
    23f4:	02060400 	andeq	r0, r6, #0, 8
    23f8:	f3030101 	vrhadd.u8	d0, d3, d1
    23fc:	53000013 	movwpl	r0, #19
    2400:	00000a31 	andeq	r0, r0, r1, lsr sl
    2404:	23020604 	movwcs	r0, #9732	; 0x2604
    2408:	00000073 	andeq	r0, r0, r3, ror r0
    240c:	000d3753 	andeq	r3, sp, r3, asr r7
    2410:	02060400 	andeq	r0, r6, #0, 8
    2414:	00007337 	andeq	r7, r0, r7, lsr r3
    2418:	9c520000 	mrals	r0, r2, acc0
    241c:	0400000b 	streq	r0, [r0], #-11
    2420:	01010154 	tsteq	r1, r4, asr r1
    2424:	00141003 	andseq	r1, r4, r3
    2428:	0a315300 	beq	c57030 <__ccfg+0xc37088>
    242c:	54040000 	strpl	r0, [r4], #-0
    2430:	00731901 	rsbseq	r1, r3, r1, lsl #18
    2434:	52000000 	andpl	r0, r0, #0
    2438:	00000ca1 	andeq	r0, r0, r1, lsr #25
    243c:	01011e04 	tsteq	r1, r4, lsl #28
    2440:	142d0301 	strtne	r0, [sp], #-769	; 0xfffffcff
    2444:	31530000 	cmpcc	r3, r0
    2448:	0400000a 	streq	r0, [r0], #-10
    244c:	7317011e 	tstvc	r7, #-2147483641	; 0x80000007
    2450:	00000000 	andeq	r0, r0, r0
    2454:	000a6656 	andeq	r6, sl, r6, asr r6
    2458:	04630900 	strbteq	r0, [r3], #-2304	; 0xfffff700
    245c:	56030101 	strpl	r0, [r3], -r1, lsl #2
    2460:	000009ce 	andeq	r0, r0, lr, asr #19
    2464:	01045409 	tsteq	r4, r9, lsl #8
    2468:	e7560301 	ldrb	r0, [r6, -r1, lsl #6]
    246c:	09000009 	stmdbeq	r0, {r0, r3}
    2470:	0101022a 	tsteq	r1, sl, lsr #4
    2474:	0d225203 	sfmeq	f5, 4, [r2, #-12]!
    2478:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    247c:	03010101 	movweq	r0, #4353	; 0x1101
    2480:	0000146b 	andeq	r1, r0, fp, ror #8
    2484:	0009f353 	andeq	pc, r9, r3, asr r3	; <UNPREDICTABLE>
    2488:	01680900 	cmneq	r8, r0, lsl #18
    248c:	0000731f 	andeq	r7, r0, pc, lsl r3
    2490:	2d560000 	ldclcs	0, cr0, [r6, #-0]
    2494:	09000009 	stmdbeq	r0, {r0, r3}
    2498:	01010132 	tsteq	r1, r2, lsr r1
    249c:	0d445903 	vstreq.16	s11, [r4, #-6]	; <UNPREDICTABLE>
	...
    24a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    24ac:	000d5835 	andeq	r5, sp, r5, lsr r8
    24b0:	00048a00 	andeq	r8, r4, r0, lsl #20
    24b4:	1f000000 	svcne	0x00000000
    24b8:	03000012 	movweq	r0, #18
    24bc:	00082900 	andeq	r2, r8, r0, lsl #18
    24c0:	73010400 	movwvc	r0, #5120	; 0x1400
    24c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    24c8:	00000e23 	andeq	r0, r0, r3, lsr #28
    24cc:	0000050c 	andeq	r0, r0, ip, lsl #10
    24d0:	00000628 	andeq	r0, r0, r8, lsr #12
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	00001856 	andeq	r1, r0, r6, asr r8
    24dc:	fd060102 	stc2	1, cr0, [r6, #-8]
    24e0:	02000006 	andeq	r0, r0, #6
    24e4:	05fe0502 	ldrbeq	r0, [lr, #1282]!	; 0x502
    24e8:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    24ec:	03000021 	movweq	r0, #33	; 0x21
    24f0:	003f1828 	eorseq	r1, pc, r8, lsr #16
    24f4:	04020000 	streq	r0, [r2], #-0
    24f8:	0004c505 	andeq	ip, r4, r5, lsl #10
    24fc:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    2500:	000004c0 	andeq	r0, r0, r0, asr #9
    2504:	00066603 	andeq	r6, r6, r3, lsl #12
    2508:	182e0300 	stmdane	lr!, {r8, r9}
    250c:	00000059 	andeq	r0, r0, r9, asr r0
    2510:	fb080102 	blx	202922 <__ccfg+0x1e297a>
    2514:	03000006 	movweq	r0, #6
    2518:	00000335 	andeq	r0, r0, r5, lsr r3
    251c:	6c193103 	ldfvss	f3, [r9], {3}
    2520:	02000000 	andeq	r0, r0, #0
    2524:	07a70702 	streq	r0, [r7, r2, lsl #14]!
    2528:	14030000 	strne	r0, [r3], #-0
    252c:	03000007 	movweq	r0, #7
    2530:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
    2534:	04020000 	streq	r0, [r2], #-0
    2538:	0002fa07 	andeq	pc, r2, r7, lsl #20
    253c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    2540:	000002f5 	strdeq	r0, [r0], -r5
    2544:	69050404 	stmdbvs	r5, {r2, sl}
    2548:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    254c:	02ff0704 	rscseq	r0, pc, #4, 14	; 0x100000
    2550:	6b030000 	blvs	c2558 <__ccfg+0xa25b0>
    2554:	04000003 	streq	r0, [r0], #-3
    2558:	00a71b28 	adceq	r1, r7, r8, lsr #22
    255c:	96050000 	strls	r0, [r5], -r0
    2560:	04000006 	streq	r0, [r0], #-6
    2564:	00bf000b 	adcseq	r0, pc, fp
    2568:	5e060000 	cdppl	0, 0, cr0, cr6, cr0, {0}
    256c:	bf000007 	svclt	0x00000007
    2570:	00000000 	andeq	r0, r0, r0
    2574:	04070001 	streq	r0, [r7], #-1
    2578:	00069803 	andeq	r9, r6, r3, lsl #16
    257c:	18630400 	stmdane	r3!, {sl}^
    2580:	0000009b 	muleq	r0, fp, r0
    2584:	0005ba03 	andeq	fp, r5, r3, lsl #20
    2588:	12260500 	eorne	r0, r6, #0, 10
    258c:	0000004d 	andeq	r0, r0, sp, asr #32
    2590:	00210003 	eoreq	r0, r1, r3
    2594:	12270500 	eorne	r0, r7, #0, 10
    2598:	00000060 	andeq	r0, r0, r0, rrx
    259c:	0000d908 	andeq	sp, r0, r8, lsl #18
    25a0:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    25a4:	9c030000 	stcls	0, cr0, [r3], {-0}
    25a8:	0500000c 	streq	r0, [r0, #-12]
    25ac:	00331228 	eorseq	r1, r3, r8, lsr #4
    25b0:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    25b4:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    25b8:	004d122b 	subeq	r1, sp, fp, lsr #4
    25bc:	fb090000 	blx	2425c6 <__ccfg+0x22261e>
    25c0:	03000000 	movweq	r0, #0
    25c4:	00002151 	andeq	r2, r0, r1, asr r1
    25c8:	73122c05 	tstvc	r2, #1280	; 0x500
    25cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25d0:	0000010c 	andeq	r0, r0, ip, lsl #2
    25d4:	00040d03 	andeq	r0, r4, r3, lsl #26
    25d8:	122d0500 	eorne	r0, sp, #0, 10
    25dc:	00000073 	andeq	r0, r0, r3, ror r0
    25e0:	0006a603 	andeq	sl, r6, r3, lsl #12
    25e4:	102e0500 	eorne	r0, lr, r0, lsl #10
    25e8:	00000135 	andeq	r0, r0, r5, lsr r1
    25ec:	00d9040a 	sbcseq	r0, r9, sl, lsl #8
    25f0:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    25f4:	c9093205 	stmdbgt	r9, {r0, r2, r9, ip, sp}
    25f8:	0c000001 	stceq	0, cr0, [r0], {1}
    25fc:	00000023 	andeq	r0, r0, r3, lsr #32
    2600:	fb073405 	blx	1cf61e <__ccfg+0x1af676>
    2604:	01000000 	mrseq	r0, (UNDEF: 0)
    2608:	0c000701 	stceq	7, cr0, [r0], {1}
    260c:	00000413 	andeq	r0, r0, r3, lsl r4
    2610:	fb033505 	blx	cfa2e <__ccfg+0xafa86>
    2614:	01000000 	mrseq	r0, (UNDEF: 0)
    2618:	0c000601 	stceq	6, cr0, [r0], {1}
    261c:	000001cb 	andeq	r0, r0, fp, asr #3
    2620:	fb033605 	blx	cfe3e <__ccfg+0xafe96>
    2624:	01000000 	mrseq	r0, (UNDEF: 0)
    2628:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    262c:	0000044d 	andeq	r0, r0, sp, asr #8
    2630:	fb033705 	blx	d024e <__ccfg+0xb02a6>
    2634:	01000000 	mrseq	r0, (UNDEF: 0)
    2638:	0c000401 	cfstrseq	mvf0, [r0], {1}
    263c:	00000608 	andeq	r0, r0, r8, lsl #12
    2640:	fb033805 	blx	d065e <__ccfg+0xb06b6>
    2644:	01000000 	mrseq	r0, (UNDEF: 0)
    2648:	0d000004 	stceq	0, cr0, [r0, #-16]
    264c:	0000041a 	andeq	r0, r0, sl, lsl r4
    2650:	fb073a05 	blx	1d0e6e <__ccfg+0x1b0ec6>
    2654:	01000000 	mrseq	r0, (UNDEF: 0)
    2658:	0005760d 	andeq	r7, r5, sp, lsl #12
    265c:	033c0500 	teqeq	ip, #0, 10
    2660:	000000fb 	strdeq	r0, [r0], -fp
    2664:	08530d02 	ldmdaeq	r3, {r1, r8, sl, fp}^
    2668:	3d050000 	stccc	0, cr0, [r5, #-0]
    266c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    2670:	8e0d0300 	cdphi	3, 0, cr0, cr13, cr0, {0}
    2674:	05000005 	streq	r0, [r0, #-5]
    2678:	010c083f 	tsteq	ip, pc, lsr r8
    267c:	00040000 	andeq	r0, r4, r0
    2680:	00021903 	andeq	r1, r2, r3, lsl #18
    2684:	03410500 	movteq	r0, #5376	; 0x1500
    2688:	0000013b 	andeq	r0, r0, fp, lsr r1
    268c:	0001c909 	andeq	ip, r1, r9, lsl #18
    2690:	04540e00 	ldrbeq	r0, [r4], #-3584	; 0xfffff200
    2694:	43050000 	movwmi	r0, #20480	; 0x5000
    2698:	0001d51a 	andeq	sp, r1, sl, lsl r5
    269c:	0e010100 	adfeqs	f0, f1, f0
    26a0:	00000167 	andeq	r0, r0, r7, ror #2
    26a4:	f60e4505 			; <UNDEFINED> instruction: 0xf60e4505
    26a8:	01000001 	tsteq	r0, r1
    26ac:	fc040a01 	stc2	10, cr0, [r4], {1}	; <UNPREDICTABLE>
    26b0:	02000001 	andeq	r0, r0, #1
    26b4:	07040801 	streq	r0, [r4, -r1, lsl #16]
    26b8:	fc080000 	stc2	0, cr0, [r8], {-0}
    26bc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    26c0:	00000222 	andeq	r0, r0, r2, lsr #4
    26c4:	f61e4505 			; <UNDEFINED> instruction: 0xf61e4505
    26c8:	01000001 	tsteq	r0, r1
    26cc:	06080b01 	streq	r0, [r8], -r1, lsl #22
    26d0:	0247098f 	subeq	r0, r7, #2342912	; 0x23c000
    26d4:	cf0d0000 	svcgt	0x000d0000
    26d8:	06000004 	streq	r0, [r0], -r4
    26dc:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
    26e0:	0d000000 	stceq	0, cr0, [r0, #-0]
    26e4:	00000985 	andeq	r0, r0, r5, lsl #19
    26e8:	d9089106 	stmdble	r8, {r1, r2, r8, ip, pc}
    26ec:	04000000 	streq	r0, [r0], #-0
    26f0:	0001a00d 	andeq	sl, r1, sp
    26f4:	10920600 	addsne	r0, r2, r0, lsl #12
    26f8:	00000107 	andeq	r0, r0, r7, lsl #2
    26fc:	51030006 	tstpl	r3, r6
    2700:	06000007 	streq	r0, [r0], -r7
    2704:	02160393 	andseq	r0, r6, #1275068418	; 0x4c000002
    2708:	470f0000 	strmi	r0, [pc, -r0]
    270c:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
    2710:	10000002 	andne	r0, r0, r2
    2714:	059a0e00 	ldreq	r0, [sl, #3584]	; 0xe00
    2718:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    271c:	0002530f 	andeq	r5, r2, pc, lsl #6
    2720:	0b010100 	bleq	42b28 <__ccfg+0x22b80>
    2724:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    2728:	00000296 	muleq	r0, r6, r2
    272c:	0005950c 	andeq	r9, r5, ip, lsl #10
    2730:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    2734:	000000fb 	strdeq	r0, [r0], -fp
    2738:	00010701 	andeq	r0, r1, r1, lsl #14
    273c:	0003b40c 	andeq	fp, r3, ip, lsl #8
    2740:	03940700 	orrseq	r0, r4, #0, 14
    2744:	000000fb 	strdeq	r0, [r0], -fp
    2748:	00000101 	andeq	r0, r0, r1, lsl #2
    274c:	061a0300 	ldreq	r0, [sl], -r0, lsl #6
    2750:	96070000 	strls	r0, [r7], -r0
    2754:	00026c03 	andeq	r6, r2, r3, lsl #24
    2758:	02960800 	addseq	r0, r6, #0, 16
    275c:	a20f0000 	andge	r0, pc, #0
    2760:	b2000002 	andlt	r0, r0, #2
    2764:	10000002 	andne	r0, r0, r2
    2768:	02a70800 	adceq	r0, r7, #0, 16
    276c:	ba0e0000 	blt	382774 <__ccfg+0x3627cc>
    2770:	07000002 	streq	r0, [r0, -r2]
    2774:	02b2179c 	adcseq	r1, r2, #156, 14	; 0x2700000
    2778:	01010000 	mrseq	r0, (UNDEF: 1)
    277c:	0000e50f 	andeq	lr, r0, pc, lsl #10
    2780:	0002d000 	andeq	sp, r2, r0
    2784:	08001000 	stmdaeq	r0, {ip}
    2788:	000002c5 	andeq	r0, r0, r5, asr #5
    278c:	0003cd0e 	andeq	ip, r3, lr, lsl #26
    2790:	13060800 	movwne	r0, #26624	; 0x6800
    2794:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2798:	580e0101 	stmdapl	lr, {r0, r8}
    279c:	06000005 	streq	r0, [r0], -r5
    27a0:	010c0ec3 	smlabteq	ip, r3, lr, r0
    27a4:	01010000 	mrseq	r0, (UNDEF: 1)
    27a8:	00071d11 	andeq	r1, r7, r1, lsl sp
    27ac:	016e0900 	cmneq	lr, r0, lsl #18
    27b0:	0002fe10 	andeq	pc, r2, r0, lsl lr	; <UNPREDICTABLE>
    27b4:	04040a00 	streq	r0, [r4], #-2560	; 0xfffff600
    27b8:	12000003 	andne	r0, r0, #3
    27bc:	00031001 	andeq	r1, r3, r1
    27c0:	00d91300 	sbcseq	r1, r9, r0, lsl #6
    27c4:	0f000000 	svceq	0x00000000
    27c8:	00000203 	andeq	r0, r0, r3, lsl #4
    27cc:	0000031b 	andeq	r0, r0, fp, lsl r3
    27d0:	10080010 	andne	r0, r8, r0, lsl r0
    27d4:	14000003 	strne	r0, [r0], #-3
    27d8:	000005c2 	andeq	r0, r0, r2, asr #11
    27dc:	16017f09 	strne	r7, [r1], -r9, lsl #30
    27e0:	0000031b 	andeq	r0, r0, fp, lsl r3
    27e4:	9d140101 	ldflss	f0, [r4, #-4]
    27e8:	09000002 	stmdbeq	r0, {r1}
    27ec:	18140182 	ldmdane	r4, {r1, r7, r8}
    27f0:	01000001 	tsteq	r0, r1
    27f4:	027a1401 	rsbseq	r1, sl, #16777216	; 0x1000000
    27f8:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    27fc:	010c0e02 	tsteq	ip, r2, lsl #28
    2800:	01010000 	mrseq	r0, (UNDEF: 1)
    2804:	03090815 	movweq	r0, #38933	; 0x9815
    2808:	03740903 	cmneq	r4, #49152	; 0xc000
    280c:	00160000 	andseq	r0, r6, r0
    2810:	09000032 	stmdbeq	r0, {r1, r4, r5}
    2814:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    2818:	00000000 	andeq	r0, r0, r0
    281c:	0008dd16 	andeq	sp, r8, r6, lsl sp
    2820:	03080900 	movweq	r0, #35072	; 0x8900
    2824:	00011d08 	andeq	r1, r1, r8, lsl #26
    2828:	11000400 	tstne	r0, r0, lsl #8
    282c:	00000326 	andeq	r0, r0, r6, lsr #6
    2830:	03030909 	movweq	r0, #14601	; 0x3909
    2834:	0000034d 	andeq	r0, r0, sp, asr #6
    2838:	00001817 	andeq	r1, r0, r7, lsl r8
    283c:	0b093000 	bleq	24e844 <__ccfg+0x22e89c>
    2840:	03e40803 	mvneq	r0, #196608	; 0x30000
    2844:	98160000 	ldmdals	r6, {}	; <UNPREDICTABLE>
    2848:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    284c:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
    2850:	00000000 	andeq	r0, r0, r0
    2854:	0006d916 	andeq	sp, r6, r6, lsl r9
    2858:	03150900 	tsteq	r5, #0, 18
    285c:	0000d908 	andeq	sp, r0, r8, lsl #18
    2860:	20160200 	andscs	r0, r6, r0, lsl #4
    2864:	09000007 	stmdbeq	r0, {r0, r1, r2}
    2868:	f10b0316 			; <UNDEFINED> instruction: 0xf10b0316
    286c:	04000002 	streq	r0, [r0], #-2
    2870:	00062416 	andeq	r2, r6, r6, lsl r4
    2874:	03170900 	tsteq	r7, #0, 18
    2878:	00011d09 	andeq	r1, r1, r9, lsl #26
    287c:	07160800 	ldreq	r0, [r6, -r0, lsl #16]
    2880:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2884:	e40f0318 	str	r0, [pc], #-792	; 288c <NOROM_SysCtrlResetSourceGet+0x8>
    2888:	0c000003 	stceq	0, cr0, [r0], {3}
    288c:	0005ad16 	andeq	sl, r5, r6, lsl sp
    2890:	03190900 	tsteq	r9, #0, 18
    2894:	0003f415 	andeq	pc, r3, r5, lsl r4	; <UNPREDICTABLE>
    2898:	0f002c00 	svceq	0x00002c00
    289c:	00000374 	andeq	r0, r0, r4, ror r3
    28a0:	000003f4 	strdeq	r0, [r0], -r4
    28a4:	00009418 	andeq	r9, r0, r8, lsl r4
    28a8:	0a000300 	beq	34b0 <__exidx_end+0x878>
    28ac:	00038104 	andeq	r8, r3, r4, lsl #2
    28b0:	06ce1100 	strbeq	r1, [lr], r0, lsl #2
    28b4:	1c090000 	stcne	0, cr0, [r9], {-0}
    28b8:	03811b03 	orreq	r1, r1, #3072	; 0xc00
    28bc:	ae140000 	cdpge	0, 1, cr0, cr4, cr0, {0}
    28c0:	09000006 	stmdbeq	r0, {r1, r2}
    28c4:	1614031e 			; <UNDEFINED> instruction: 0x1614031e
    28c8:	01000004 	tsteq	r0, r4
    28cc:	fa040a01 	blx	1050d8 <__ccfg+0xe5130>
    28d0:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    28d4:	00000460 	andeq	r0, r0, r0, ror #8
    28d8:	d9131d0a 	ldmdble	r3, {r1, r3, r8, sl, fp, ip}
    28dc:	01000000 	mrseq	r0, (UNDEF: 0)
    28e0:	01d20e01 	bicseq	r0, r2, r1, lsl #28
    28e4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    28e8:	0000ea1a 	andeq	lr, r0, sl, lsl sl
    28ec:	0e010100 	adfeqs	f0, f1, f0
    28f0:	00000709 	andeq	r0, r0, r9, lsl #14
    28f4:	ea241e0a 	b	90a124 <__ccfg+0x8ea17c>
    28f8:	01000000 	mrseq	r0, (UNDEF: 0)
    28fc:	07250e01 	streq	r0, [r5, -r1, lsl #28]!
    2900:	220a0000 	andcs	r0, sl, #0
    2904:	00041614 	andeq	r1, r4, r4, lsl r6
    2908:	03010100 	movweq	r0, #4352	; 0x1100
    290c:	00000daa 	andeq	r0, r0, sl, lsr #27
    2910:	600f440a 	andvs	r4, pc, sl, lsl #8
    2914:	0a000004 	beq	292c <NOROM_ChipInfo_GetHwRevision+0x44>
    2918:	00046604 	andeq	r6, r4, r4, lsl #12
    291c:	8d011900 	vstrhi.16	s2, [r1, #-0]	; <UNPREDICTABLE>
    2920:	80000000 	andhi	r0, r0, r0
    2924:	13000004 	movwne	r0, #4
    2928:	0000008d 	andeq	r0, r0, sp, lsl #1
    292c:	0001f613 	andeq	pc, r1, r3, lsl r6	; <UNPREDICTABLE>
    2930:	008d1300 	addeq	r1, sp, r0, lsl #6
    2934:	1a000000 	bne	293c <NOROM_ChipInfo_GetHwRevision+0x54>
    2938:	0000033e 	andeq	r0, r0, lr, lsr r3
    293c:	05070c01 	streq	r0, [r7, #-3073]	; 0xfffff3ff
    2940:	00056403 	andeq	r6, r5, r3, lsl #8
    2944:	0f5b1b20 	svceq	0x005b1b20
    2948:	10010000 	andne	r0, r1, r0
    294c:	00010c07 	andeq	r0, r1, r7, lsl #24
    2950:	03050100 	movweq	r0, #20736	; 0x5100
    2954:	00000000 	andeq	r0, r0, r0
    2958:	0004461a 	andeq	r4, r4, sl, lsl r6
    295c:	0d1a0100 	ldfeqs	f0, [sl, #-0]
    2960:	00040305 	andeq	r0, r4, r5, lsl #6
    2964:	540f2000 	strpl	r2, [pc], #-0	; 296c <AuxAdiDdiSafeWrite.constprop.1>
    2968:	bf000004 	svclt	0x00000004
    296c:	18000004 	stmdane	r0, {r2}
    2970:	00000094 	muleq	r0, r4, r0
    2974:	e21c0000 	ands	r0, ip, #0
    2978:	0100000d 	tsteq	r0, sp
    297c:	04af141e 	strteq	r1, [pc], #1054	; 2984 <AuxAdiDdiSafeWrite.constprop.1+0x18>
    2980:	03050000 	movweq	r0, #20480	; 0x5000
    2984:	20000008 	andcs	r0, r0, r8
    2988:	0001da1a 	andeq	sp, r1, sl, lsl sl
    298c:	13220100 			; <UNDEFINED> instruction: 0x13220100
    2990:	056c0305 	strbeq	r0, [ip, #-773]!	; 0xfffffcfb
    2994:	071a2000 	ldreq	r2, [sl, -r0]
    2998:	01000004 	tsteq	r0, r4
    299c:	03050d27 	movweq	r0, #23847	; 0x5d27
    29a0:	20000588 	andcs	r0, r0, r8, lsl #11
    29a4:	00041c1a 	andeq	r1, r4, sl, lsl ip
    29a8:	07300100 	ldreq	r0, [r0, -r0, lsl #2]!
    29ac:	05680305 	strbeq	r0, [r8, #-773]!	; 0xfffffcfb
    29b0:	2a1a2000 	bcs	68a9b8 <__ccfg+0x66aa10>
    29b4:	01000004 	tsteq	r0, r4
    29b8:	03050f31 	movweq	r0, #24369	; 0x5f31
    29bc:	2000056a 	andcs	r0, r0, sl, ror #10
    29c0:	0004381a 	andeq	r3, r4, sl, lsl r8
    29c4:	19310100 	ldmdbne	r1!, {r8}
    29c8:	05740305 	ldrbeq	r0, [r4, #-773]!	; 0xfffffcfb
    29cc:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
    29d0:	27000001 	strcs	r0, [r0, -r1]
    29d4:	18000005 	stmdane	r0, {r0, r2}
    29d8:	00000094 	muleq	r0, r4, r0
    29dc:	911b0003 	tstls	fp, r3
    29e0:	0100000c 	tsteq	r0, ip
    29e4:	05170a36 	ldreq	r0, [r7, #-2614]	; 0xfffff5ca
    29e8:	05010000 	streq	r0, [r1, #-0]
    29ec:	00057803 	andeq	r7, r5, r3, lsl #16
    29f0:	03201a20 			; <UNDEFINED> instruction: 0x03201a20
    29f4:	3f010000 	svccc	0x00010000
    29f8:	2003050c 	andcs	r0, r3, ip, lsl #10
    29fc:	1a00002c 	bne	2ab4 <NOROM_DDI32RegWrite+0x120>
    2a00:	0000032f 	andeq	r0, r0, pc, lsr #6
    2a04:	050d4501 	streq	r4, [sp, #-1281]	; 0xfffffaff
    2a08:	00000003 	andeq	r0, r0, r3
    2a0c:	01020b00 	tsteq	r2, r0, lsl #22
    2a10:	057a0949 	ldrbeq	r0, [sl, #-2377]!	; 0xfffff6b7
    2a14:	d60d0000 	strle	r0, [sp], -r0
    2a18:	0100000d 	tsteq	r0, sp
    2a1c:	00fb074a 	rscseq	r0, fp, sl, asr #14
    2a20:	0d000000 	stceq	0, cr0, [r0, #-0]
    2a24:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    2a28:	fb074b01 	blx	1d5636 <__ccfg+0x1b568e>
    2a2c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a30:	0ed50300 	cdpeq	3, 13, cr0, cr5, cr0, {0}
    2a34:	4c010000 	stcmi	0, cr0, [r1], {-0}
    2a38:	00055603 	andeq	r5, r5, r3, lsl #12
    2a3c:	057a0f00 	ldrbeq	r0, [sl, #-3840]!	; 0xfffff100
    2a40:	05960000 	ldreq	r0, [r6]
    2a44:	94180000 	ldrls	r0, [r8], #-0
    2a48:	00000000 	andeq	r0, r0, r0
    2a4c:	0efb1c00 	cdpeq	12, 15, cr1, cr11, cr0, {0}
    2a50:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    2a54:	00058611 	andeq	r8, r5, r1, lsl r6
    2a58:	10030500 	andne	r0, r3, r0, lsl #10
    2a5c:	0f200000 	svceq	0x00200000
    2a60:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2a64:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2a68:	00009418 	andeq	r9, r0, r8, lsl r4
    2a6c:	0a000000 	beq	2a74 <NOROM_DDI32RegWrite+0xe0>
    2a70:	00011d04 	andeq	r1, r1, r4, lsl #26
    2a74:	0df71d00 	ldcleq	13, cr1, [r7]
    2a78:	bd010000 	stclt	0, cr0, [r1, #-0]
    2a7c:	05a80f02 	streq	r0, [r8, #3842]!	; 0xf02
    2a80:	03050000 	movweq	r0, #20480	; 0x5000
    2a84:	20000018 	andcs	r0, r0, r8, lsl r0
    2a88:	00011d0f 	andeq	r1, r1, pc, lsl #26
    2a8c:	0005e100 	andeq	lr, r5, r0, lsl #2
    2a90:	00941800 	addseq	r1, r4, r0, lsl #16
    2a94:	00000000 	andeq	r0, r0, r0
    2a98:	000e901d 	andeq	r9, lr, sp, lsl r0
    2a9c:	02c20100 	sbceq	r0, r2, #0, 2
    2aa0:	0005d10e 	andeq	sp, r5, lr, lsl #2
    2aa4:	14030500 	strne	r0, [r3], #-1280	; 0xfffffb00
    2aa8:	1d200000 	stcne	0, cr0, [r0, #-0]
    2aac:	00000ede 	ldrdeq	r0, [r0], -lr
    2ab0:	2602c201 	strcs	ip, [r2], -r1, lsl #4
    2ab4:	000005d1 	ldrdeq	r0, [r0], -r1
    2ab8:	000c0305 	andeq	r0, ip, r5, lsl #6
    2abc:	011e2000 	tsteq	lr, r0
    2ac0:	00000f27 	andeq	r0, r0, r7, lsr #30
    2ac4:	07052f01 	streq	r2, [r5, -r1, lsl #30]
    2ac8:	00010c01 	andeq	r0, r1, r1, lsl #24
	...
    2ad4:	1f9c0100 	svcne	0x009c0100
    2ad8:	000ec401 	andeq	ip, lr, r1, lsl #8
    2adc:	04820100 	streq	r0, [r2], #256	; 0x100
    2ae0:	12080106 	andne	r0, r8, #-2147483647	; 0x80000001
    2ae4:	13440000 	movtne	r0, #16384	; 0x4000
    2ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2aec:	0000070e 	andeq	r0, r0, lr, lsl #14
    2af0:	000ef620 	andeq	pc, lr, r0, lsr #12
    2af4:	04820100 	streq	r0, [r2], #256	; 0x100
    2af8:	00070e18 	andeq	r0, r7, r8, lsl lr
    2afc:	00049d00 	andeq	r9, r4, r0, lsl #26
    2b00:	76222100 	strtvc	r2, [r2], -r0, lsl #2
    2b04:	01006c61 	tsteq	r0, r1, ror #24
    2b08:	0c080487 	cfstrseq	mvf0, [r8], {135}	; 0x87
    2b0c:	dd000001 	stcle	0, cr0, [r0, #-4]
    2b10:	23000004 	movwcs	r0, #4
    2b14:	01007061 	tsteq	r0, r1, rrx
    2b18:	c10a0488 	smlabbgt	sl, r8, r4, r0
    2b1c:	02000000 	andeq	r0, r0, #0
    2b20:	62224c91 	eorvs	r4, r2, #37120	; 0x9100
    2b24:	89010063 	stmdbhi	r1, {r0, r1, r5, r6}
    2b28:	00ef0704 	rsceq	r0, pc, r4, lsl #14
    2b2c:	051c0000 	ldreq	r0, [ip, #-0]
    2b30:	76220000 	strtvc	r0, [r2], -r0
    2b34:	048a0100 	streq	r0, [sl], #256	; 0x100
    2b38:	0000d907 	andeq	sp, r0, r7, lsl #18
    2b3c:	00055000 	andeq	r5, r5, r0
    2b40:	73692400 	cmnvc	r9, #0, 8
    2b44:	048b0100 	streq	r0, [fp], #256	; 0x100
    2b48:	0000fb07 	andeq	pc, r0, r7, lsl #22
    2b4c:	0faa2500 	svceq	0x00aa2500
    2b50:	b0010000 	andlt	r0, r1, r0
    2b54:	12d40104 	sbcsne	r0, r4, #4, 2
    2b58:	94260000 	strtls	r0, [r6], #-0
    2b5c:	b0000012 	andlt	r0, r0, r2, lsl r0
    2b60:	c0000012 	andgt	r0, r0, r2, lsl r0
    2b64:	22000006 	andcs	r0, r0, #6
    2b68:	9f010069 	svcls	0x00010069
    2b6c:	00ef0a04 	rsceq	r0, pc, r4, lsl #20
    2b70:	05790000 	ldrbeq	r0, [r9, #-0]!
    2b74:	27000000 	strcs	r0, [r0, -r0]
    2b78:	000005e0 	andeq	r0, r0, r0, ror #11
    2b7c:	000006d9 	ldrdeq	r0, [r0], -r9
    2b80:	01006422 	tsteq	r0, r2, lsr #8
    2b84:	0c0b04a9 	cfstrseq	mvf0, [fp], {169}	; 0xa9
    2b88:	8c000001 	stchi	0, cr0, [r0], {1}
    2b8c:	00000005 	andeq	r0, r0, r5
    2b90:	00132026 	andseq	r2, r3, r6, lsr #32
    2b94:	00132e00 	andseq	r2, r3, r0, lsl #28
    2b98:	0006f600 	andeq	pc, r6, r0, lsl #12
    2b9c:	00732200 	rsbseq	r2, r3, r0, lsl #4
    2ba0:	0b04c601 	bleq	1343ac <__ccfg+0x114404>
    2ba4:	000001f6 	strdeq	r0, [r0], -r6
    2ba8:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    2bac:	10c12800 	sbcne	r2, r1, r0, lsl #16
    2bb0:	12360000 	eorsne	r0, r6, #0
    2bb4:	06100000 	ldreq	r0, [r0], -r0
    2bb8:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2bbc:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    2bc0:	00000010 	andeq	r0, r0, r0, lsl r0
    2bc4:	03040a00 	movweq	r0, #18944	; 0x4a00
    2bc8:	2a000002 	bcs	2bd8 <port_confs+0x20>
    2bcc:	00000f7f 	andeq	r0, r0, pc, ror pc
    2bd0:	0d044701 	stceq	7, cr4, [r4, #-4]
    2bd4:	000d6c01 	andeq	r6, sp, r1, lsl #24
    2bd8:	000d8400 	andeq	r8, sp, r0, lsl #8
    2bdc:	539c0100 	orrspl	r0, ip, #0, 2
    2be0:	2b000007 	blcs	2c04 <port_confs+0x4c>
    2be4:	47010063 	strmi	r0, [r1, -r3, rrx]
    2be8:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    2bec:	05c80000 	strbeq	r0, [r8]
    2bf0:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2bf4:	6c000010 	stcvs	0, cr0, [r0], {16}
    2bf8:	8800000d 	stmdahi	r0, {r0, r2, r3}
    2bfc:	01000005 	tsteq	r0, r5
    2c00:	29020449 	stmdbcs	r2, {r0, r3, r6, sl}
    2c04:	000010d4 	ldrdeq	r1, [r0], -r4
    2c08:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2c0c:	00000e75 	andeq	r0, r0, r5, ror lr
    2c10:	06042801 	streq	r2, [r4], -r1, lsl #16
    2c14:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    2c20:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    2c24:	2b000007 	blcs	2c48 <__exidx_end+0x10>
    2c28:	0100636e 	tsteq	r0, lr, ror #6
    2c2c:	291c0428 	ldmdbcs	ip, {r3, r5, sl}
    2c30:	db000001 	blle	2c3c <__exidx_end+0x4>
    2c34:	2d000005 	stccs	0, cr0, [r0, #-20]	; 0xffffffec
    2c38:	00000f47 	andeq	r0, r0, r7, asr #30
    2c3c:	09043101 	stmdbeq	r4, {r0, r8, ip, sp}
    2c40:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2c44:	000005f9 	strdeq	r0, [r0], -r9
    2c48:	78616d22 	stmdavc	r1!, {r1, r5, r8, sl, fp, sp, lr}^
    2c4c:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    2c50:	00011d08 	andeq	r1, r1, r8, lsl #26
    2c54:	00061700 	andeq	r1, r6, r0, lsl #14
    2c58:	0e8b2d00 	cdpeq	13, 8, cr2, cr11, cr0, {0}
    2c5c:	32010000 	andcc	r0, r1, #0
    2c60:	011d0d04 	tsteq	sp, r4, lsl #26
    2c64:	06350000 	ldrteq	r0, [r5], -r0
    2c68:	2c000000 	stccs	0, cr0, [r0], {-0}
    2c6c:	000f3401 	andeq	r3, pc, r1, lsl #8
    2c70:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    2c74:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    2c80:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c84:	000007e3 	andeq	r0, r0, r3, ror #15
    2c88:	6e696d2b 	cdpvs	13, 6, cr6, cr9, cr11, {1}
    2c8c:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    2c90:	0001291c 	andeq	r2, r1, ip, lsl r9
    2c94:	00065e00 	andeq	r5, r6, r0, lsl #28
    2c98:	011f0000 	tsteq	pc, r0
    2c9c:	00000f1a 	andeq	r0, r0, sl, lsl pc
    2ca0:	06040201 	streq	r0, [r4], -r1, lsl #4
    2ca4:	0011f001 	andseq	pc, r1, r1
    2ca8:	00120800 	andseq	r0, r2, r0, lsl #16
    2cac:	0e9c0100 	fmleqe	f0, f4, f0
    2cb0:	20000008 	andcs	r0, r0, r8
    2cb4:	00000040 	andeq	r0, r0, r0, asr #32
    2cb8:	19040201 	stmdbne	r4, {r0, r9}
    2cbc:	000000d9 	ldrdeq	r0, [r0], -r9
    2cc0:	00000671 	andeq	r0, r0, r1, ror r6
    2cc4:	c9012c00 	stmdbgt	r1, {sl, fp, sp}
    2cc8:	0100000d 	tsteq	r0, sp
    2ccc:	010803a3 	smlatbeq	r8, r3, r3, r0
    2cd0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2cd4:	00001114 	andeq	r1, r0, r4, lsl r1
    2cd8:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
    2cdc:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    2ce0:	a7200000 	strge	r0, [r0, -r0]!
    2ce4:	01000016 	tsteq	r0, r6, lsl r0
    2ce8:	d91a03a3 	ldmdble	sl, {r0, r1, r5, r7, r8, r9}
    2cec:	84000000 	strhi	r0, [r0], #-0
    2cf0:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    2cf4:	00000f47 	andeq	r0, r0, r7, asr #30
    2cf8:	0903ab01 	stmdbeq	r3, {r0, r8, r9, fp, sp, pc}
    2cfc:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2d00:	00000697 	muleq	r0, r7, r6
    2d04:	00636322 	rsbeq	r6, r3, r2, lsr #6
    2d08:	1103ab01 	tstne	r3, r1, lsl #22
    2d0c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2d10:	000006cb 	andeq	r0, r0, fp, asr #13
    2d14:	000ee52d 	andeq	lr, lr, sp, lsr #10
    2d18:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2d1c:	00011d15 	andeq	r1, r1, r5, lsl sp
    2d20:	0006f400 	andeq	pc, r6, r0, lsl #8
    2d24:	16a62d00 	strtne	r2, [r6], r0, lsl #26
    2d28:	af010000 	svcge	0x00010000
    2d2c:	011d0803 	tsteq	sp, r3, lsl #16
    2d30:	07070000 	streq	r0, [r7, -r0]
    2d34:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2d38:	000fa001 	andeq	sl, pc, r1
    2d3c:	037c0100 	cmneq	ip, #0, 2
    2d40:	9d010106 	stflss	f0, [r1, #-24]	; 0xffffffe8
    2d44:	2f000008 	svccs	0x00000008
    2d48:	01006863 	tsteq	r0, r3, ror #16
    2d4c:	b818037c 	ldmdalt	r8, {r2, r3, r4, r5, r6, r8, r9}
    2d50:	00000005 	andeq	r0, r0, r5
    2d54:	000ddc2a 	andeq	sp, sp, sl, lsr #24
    2d58:	034a0100 	movteq	r0, #41216	; 0xa100
    2d5c:	0cec010d 	stfeqe	f0, [ip], #52	; 0x34
    2d60:	0d6c0000 	stcleq	0, cr0, [ip, #-0]
    2d64:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d68:	000008e7 	andeq	r0, r0, r7, ror #17
    2d6c:	0068632b 	rsbeq	r6, r8, fp, lsr #6
    2d70:	1b034a01 	blne	d557c <__ccfg+0xb55d4>
    2d74:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2d78:	00000731 	andeq	r0, r0, r1, lsr r7
    2d7c:	000f472d 	andeq	r4, pc, sp, lsr #14
    2d80:	03570100 	cmpeq	r7, #0, 2
    2d84:	0005b809 	andeq	fp, r5, r9, lsl #16
    2d88:	00074f00 	andeq	r4, r7, r0, lsl #30
    2d8c:	63632200 	cmnvs	r3, #0, 4
    2d90:	03570100 	cmpeq	r7, #0, 2
    2d94:	0005b811 	andeq	fp, r5, r1, lsl r8
    2d98:	00079000 	andeq	r9, r7, r0
    2d9c:	01300000 	teqeq	r0, r0
    2da0:	00000e12 	andeq	r0, r0, r2, lsl lr
    2da4:	0602f001 	streq	pc, [r2], -r1
    2da8:	0000102c 	andeq	r1, r0, ip, lsr #32
    2dac:	0000107c 	andeq	r1, r0, ip, ror r0
    2db0:	09119c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}
    2db4:	9f2d0000 	svcls	0x002d0000
    2db8:	0100000e 	tsteq	r0, lr
    2dbc:	1d0802f5 	sfmne	f0, 4, [r8, #-980]	; 0xfffffc2c
    2dc0:	c4000001 	strgt	r0, [r0], #-1
    2dc4:	00000007 	andeq	r0, r0, r7
    2dc8:	6f690131 	svcvs	0x00690131
    2dcc:	02790100 	rsbseq	r0, r9, #0, 2
    2dd0:	00ef0106 	rsceq	r0, pc, r6, lsl #2
    2dd4:	0f900000 	svceq	0x00900000
    2dd8:	102c0000 	eorne	r0, ip, r0
    2ddc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2de0:	00000994 	muleq	r0, r4, r9
    2de4:	000eeb20 	andeq	lr, lr, r0, lsr #22
    2de8:	02790100 	rsbseq	r0, r9, #0, 2
    2dec:	0000d90f 	andeq	sp, r0, pc, lsl #18
    2df0:	0007e200 	andeq	lr, r7, r0, lsl #4
    2df4:	65642b00 	strbvs	r2, [r4, #-2816]!	; 0xfffff500
    2df8:	79010076 	stmdbvc	r1, {r1, r2, r4, r5, r6}
    2dfc:	00d91b02 	sbcseq	r1, r9, r2, lsl #22
    2e00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2e04:	8d200000 	stchi	0, cr0, [r0, #-0]
    2e08:	0100000a 	tsteq	r0, sl
    2e0c:	d9250279 	stmdble	r5!, {r0, r3, r4, r5, r6, r9}
    2e10:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2e14:	2b000008 	blcs	2e3c <__exidx_end+0x204>
    2e18:	00667562 	rsbeq	r7, r6, r2, ror #10
    2e1c:	36027901 	strcc	r7, [r2], -r1, lsl #18
    2e20:	000001f6 	strdeq	r0, [r0], -r6
    2e24:	0000083c 	andeq	r0, r0, ip, lsr r8
    2e28:	6e656c2b 	cdpvs	12, 6, cr6, cr5, cr11, {1}
    2e2c:	02790100 	rsbseq	r0, r9, #0, 2
    2e30:	0000d940 	andeq	sp, r0, r0, asr #18
    2e34:	00085a00 	andeq	r5, r8, r0, lsl #20
    2e38:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    2e3c:	7b010074 	blvc	43014 <__ccfg+0x2306c>
    2e40:	00ef0702 	rsceq	r0, pc, r2, lsl #14
    2e44:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    2e48:	1f000000 	svcne	0x00000000
    2e4c:	000eb201 	andeq	fp, lr, r1, lsl #4
    2e50:	02690100 	rsbeq	r0, r9, #0, 2
    2e54:	0f6c0106 	svceq	0x006c0106
    2e58:	0f900000 	svceq	0x00900000
    2e5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e60:	000009cf 	andeq	r0, r0, pc, asr #19
    2e64:	0066722b 	rsbeq	r7, r6, fp, lsr #4
    2e68:	1e026901 	vmlane.f16	s12, s4, s2	; <UNPREDICTABLE>
    2e6c:	00000454 	andeq	r0, r0, r4, asr r4
    2e70:	000008ae 	andeq	r0, r0, lr, lsr #17
    2e74:	636f6c2b 	cmnvs	pc, #11008	; 0x2b00
    2e78:	02690100 	rsbeq	r0, r9, #0, 2
    2e7c:	00008d26 	andeq	r8, r0, r6, lsr #26
    2e80:	0008d700 	andeq	sp, r8, r0, lsl #14
    2e84:	011f0000 	tsteq	pc, r0
    2e88:	00000fb1 			; <UNDEFINED> instruction: 0x00000fb1
    2e8c:	06025f01 	streq	r5, [r2], -r1, lsl #30
    2e90:	00000001 	andeq	r0, r0, r1
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2e9c:	2000000a 	andcs	r0, r0, sl
    2ea0:	00000ef1 	strdeq	r0, [r0], -r1
    2ea4:	19025f01 	stmdbne	r2, {r0, r8, r9, sl, fp, ip, lr}
    2ea8:	000001f6 	strdeq	r0, [r0], -r6
    2eac:	00000900 	andeq	r0, r0, r0, lsl #18
    2eb0:	01006332 	tsteq	r0, r2, lsr r3
    2eb4:	fc24025f 	stc2	2, cr0, [r4], #-380	; 0xfffffe84
    2eb8:	01000001 	tsteq	r0, r1
    2ebc:	006e2b51 	rsbeq	r2, lr, r1, asr fp
    2ec0:	2b025f01 	blcs	9aacc <__ccfg+0x7ab24>
    2ec4:	0000008d 	andeq	r0, r0, sp, lsl #1
    2ec8:	0000091e 	andeq	r0, r0, lr, lsl r9
    2ecc:	73011f00 	movwvc	r1, #7936	; 0x1f00
    2ed0:	0100000f 	tsteq	r0, pc
    2ed4:	01060259 	tsteq	r6, r9, asr r2
	...
    2ee0:	0a619c01 	beq	1869eec <__ccfg+0x1849f44>
    2ee4:	f1200000 			; <UNDEFINED> instruction: 0xf1200000
    2ee8:	0100000e 	tsteq	r0, lr
    2eec:	f6190259 			; <UNDEFINED> instruction: 0xf6190259
    2ef0:	31000001 	tstcc	r0, r1
    2ef4:	2b000009 	blcs	2f20 <__exidx_end+0x2e8>
    2ef8:	00637273 	rsbeq	r7, r3, r3, ror r2
    2efc:	2b025901 	blcs	99308 <__ccfg+0x79360>
    2f00:	0000070e 	andeq	r0, r0, lr, lsl #14
    2f04:	00000944 	andeq	r0, r0, r4, asr #18
    2f08:	01006e2b 	tsteq	r0, fp, lsr #28
    2f0c:	8d340259 	lfmhi	f0, 4, [r4, #-356]!	; 0xfffffe9c
    2f10:	62000000 	andvs	r0, r0, #0
    2f14:	00000009 	andeq	r0, r0, r9
    2f18:	0fe2011f 	svceq	0x00e2011f
    2f1c:	54010000 	strpl	r0, [r1], #-0
    2f20:	00010602 	andeq	r0, r1, r2, lsl #12
    2f24:	00000000 	andeq	r0, r0, r0
    2f28:	01000000 	mrseq	r0, (UNDEF: 0)
    2f2c:	000aa69c 	muleq	sl, ip, r6
    2f30:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    2f34:	1a025401 	bne	97f40 <__ccfg+0x77f98>
    2f38:	000001f6 	strdeq	r0, [r0], -r6
    2f3c:	00000975 	andeq	r0, r0, r5, ror r9
    2f40:	0100732b 	tsteq	r0, fp, lsr #6
    2f44:	0e290254 	mcreq	2, 1, r0, cr9, cr4, {2}
    2f48:	88000007 	stmdahi	r0, {r0, r1, r2}
    2f4c:	32000009 	andcc	r0, r0, #9
    2f50:	5401006e 	strpl	r0, [r1], #-110	; 0xffffff92
    2f54:	008d3002 	addeq	r3, sp, r2
    2f58:	52010000 	andpl	r0, r1, #0
    2f5c:	c9011f00 	stmdbgt	r1, {r8, r9, sl, fp, ip}
    2f60:	0100000e 	tsteq	r0, lr
    2f64:	0106024e 	tsteq	r6, lr, asr #4
	...
    2f70:	0ade9c01 	beq	ff7a9f7c <_estack+0xdf7a4f7c>
    2f74:	642b0000 	strtvs	r0, [fp], #-0
    2f78:	024e0100 	subeq	r0, lr, #0, 2
    2f7c:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    2f80:	00099b00 	andeq	r9, r9, r0, lsl #22
    2f84:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2f88:	28024e01 	stmdacs	r2, {r0, r9, sl, fp, lr}
    2f8c:	0000070e 	andeq	r0, r0, lr, lsl #14
    2f90:	000009b9 			; <UNDEFINED> instruction: 0x000009b9
    2f94:	bd011f00 	stclt	15, cr1, [r1, #-0]
    2f98:	0100000f 	tsteq	r0, pc
    2f9c:	01060247 	tsteq	r6, r7, asr #4
	...
    2fa8:	0b259c01 	bleq	969fb4 <__ccfg+0x94a00c>
    2fac:	642b0000 	strtvs	r0, [fp], #-0
    2fb0:	02470100 	subeq	r0, r7, #0, 2
    2fb4:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    2fb8:	0009cc00 	andeq	ip, r9, r0, lsl #24
    2fbc:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2fc0:	29024701 	stmdbcs	r2, {r0, r8, r9, sl, lr}
    2fc4:	0000070e 	andeq	r0, r0, lr, lsl #14
    2fc8:	000009ea 	andeq	r0, r0, sl, ror #19
    2fcc:	01006e2b 	tsteq	r0, fp, lsr #28
    2fd0:	8d300247 	lfmhi	f0, 4, [r0, #-284]!	; 0xfffffee4
    2fd4:	fd000000 	stc2	0, cr0, [r0, #-0]
    2fd8:	00000009 	andeq	r0, r0, r9
    2fdc:	0dbd011f 	ldfeqs	f0, [sp, #124]!	; 0x7c
    2fe0:	42010000 	andmi	r0, r1, #0
    2fe4:	00010602 	andeq	r0, r1, r2, lsl #12
    2fe8:	00000000 	andeq	r0, r0, r0
    2fec:	01000000 	mrseq	r0, (UNDEF: 0)
    2ff0:	000b5d9c 	muleq	fp, ip, sp
    2ff4:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    2ff8:	19024201 	stmdbne	r2, {r0, r9, lr}
    2ffc:	000001f6 	strdeq	r0, [r0], -r6
    3000:	00000a10 	andeq	r0, r0, r0, lsl sl
    3004:	0100732b 	tsteq	r0, fp, lsr #6
    3008:	0e280242 	cdpeq	2, 2, cr0, cr8, cr2, {2}
    300c:	23000007 	movwcs	r0, #7
    3010:	0000000a 	andeq	r0, r0, sl
    3014:	0e69012c 	poweqep	f0, f1, #4.0
    3018:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    301c:	8d010502 	cfstr32hi	mvfx0, [r1, #-8]
    3020:	5c000000 	stcpl	0, cr0, [r0], {-0}
    3024:	6a00000f 	bvs	3068 <__exidx_end+0x430>
    3028:	0100000f 	tsteq	r0, pc
    302c:	000b999c 	muleq	fp, ip, r9
    3030:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    3034:	1e023901 	vmlane.f16	s6, s4, s2	; <UNPREDICTABLE>
    3038:	0000070e 	andeq	r0, r0, lr, lsl #14
    303c:	00000a41 	andeq	r0, r0, r1, asr #20
    3040:	01006922 	tsteq	r0, r2, lsr #18
    3044:	8d06023b 	sfmhi	f0, 4, [r6, #-236]	; 0xffffff14
    3048:	5f000000 	svcpl	0x00000000
    304c:	0000000a 	andeq	r0, r0, sl
    3050:	0e82012c 	rmfeqsp	f0, f2, #4.0
    3054:	2d010000 	stccs	0, cr0, [r1, #-0]
    3058:	d9010602 	stmdble	r1, {r1, r9, sl}
	...
    3064:	01000000 	mrseq	r0, (UNDEF: 0)
    3068:	000be69c 	muleq	fp, ip, r6
    306c:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    3070:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    3074:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    3078:	0a720000 	beq	1c83080 <__ccfg+0x1c630d8>
    307c:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3080:	022f0100 	eoreq	r0, pc, #0, 2
    3084:	0004160e 	andeq	r1, r4, lr, lsl #12
    3088:	000a9000 	andeq	r9, sl, r0
    308c:	00632200 	rsbeq	r2, r3, r0, lsl #4
    3090:	07023001 	streq	r3, [r2, -r1]
    3094:	000000d9 	ldrdeq	r0, [r0], -r9
    3098:	00000aae 	andeq	r0, r0, lr, lsr #21
    309c:	83012c00 	movwhi	r2, #7168	; 0x1c00
    30a0:	0100000e 	tsteq	r0, lr
    30a4:	0107021f 	tsteq	r7, pc, lsl r2
    30a8:	0000011d 	andeq	r0, r0, sp, lsl r1
    30ac:	00000f38 	andeq	r0, r0, r8, lsr pc
    30b0:	00000f5c 	andeq	r0, r0, ip, asr pc
    30b4:	0c229c01 	stceq	12, cr9, [r2], #-4
    30b8:	662b0000 	strtvs	r0, [fp], -r0
    30bc:	01006e75 	tsteq	r0, r5, ror lr
    30c0:	f118021f 			; <UNDEFINED> instruction: 0xf118021f
    30c4:	c1000002 	tstgt	r0, r2
    30c8:	2300000a 	movwcs	r0, #10
    30cc:	21010069 	tstcs	r1, r9, rrx
    30d0:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    30d4:	50010000 	andpl	r0, r1, r0
    30d8:	65012c00 	strvs	r2, [r1, #-3072]	; 0xfffff400
    30dc:	0100000f 	tsteq	r0, pc
    30e0:	01090213 	tsteq	r9, r3, lsl r2
    30e4:	000002f1 	strdeq	r0, [r0], -r1
	...
    30f0:	0c609c01 	stcleq	12, cr9, [r0], #-4
    30f4:	702b0000 	eorvc	r0, fp, r0
    30f8:	01006469 	tsteq	r0, r9, ror #8
    30fc:	1d180213 	lfmne	f0, 4, [r8, #-76]	; 0xffffffb4
    3100:	ea000001 	b	310c <__exidx_end+0x4d4>
    3104:	2200000a 	andcs	r0, r0, #10
    3108:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
    310c:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    3110:	0b080000 	bleq	203118 <__ccfg+0x1e3170>
    3114:	1f000000 	svcne	0x00000000
    3118:	000f2c01 	andeq	r2, pc, r1, lsl #24
    311c:	01f50100 	mvnseq	r0, r0, lsl #2
    3120:	00000106 	andeq	r0, r0, r6, lsl #2
    3124:	00000000 	andeq	r0, r0, r0
    3128:	9c010000 	stcls	0, cr0, [r1], {-0}
    312c:	00000cc9 	andeq	r0, r0, r9, asr #25
    3130:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    3134:	01f50100 	mvnseq	r0, r0, lsl #2
    3138:	0002f117 	andeq	pc, r2, r7, lsl r1	; <UNPREDICTABLE>
    313c:	000b2600 	andeq	r2, fp, r0, lsl #12
    3140:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    3144:	f901006c 			; <UNDEFINED> instruction: 0xf901006c
    3148:	00cd0a01 	sbceq	r0, sp, r1, lsl #20
    314c:	0b440000 	bleq	1103154 <__ccfg+0x10e31ac>
    3150:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    3154:	01fa0100 	mvnseq	r0, r0, lsl #2
    3158:	0004160e 	andeq	r1, r4, lr, lsl #12
    315c:	000b5700 	andeq	r5, fp, r0, lsl #14
    3160:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    3164:	1201fa01 	andne	pc, r1, #4096	; 0x1000
    3168:	00000416 	andeq	r0, r0, r6, lsl r4
    316c:	00000b8b 	andeq	r0, r0, fp, lsl #23
    3170:	01006b22 	tsteq	r0, r2, lsr #22
    3174:	161601fa 			; <UNDEFINED> instruction: 0x161601fa
    3178:	a9000004 	stmdbge	r0, {r2}
    317c:	0000000b 	andeq	r0, r0, fp
    3180:	0df2011f 	ldfeqe	f0, [r2, #124]!	; 0x7c
    3184:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    3188:	c4010601 	strgt	r0, [r1], #-1537	; 0xfffff9ff
    318c:	14000010 	strne	r0, [r0], #-16
    3190:	01000011 	tsteq	r0, r1, lsl r0
    3194:	000d0e9c 	muleq	sp, ip, lr
    3198:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    319c:	d9010064 	stmdble	r1, {r2, r5, r6}
    31a0:	011d1201 	tsteq	sp, r1, lsl #4
    31a4:	0bc70000 	bleq	ff1c31ac <_estack+0xdf1be1ac>
    31a8:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    31ac:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    31b0:	0004160e 	andeq	r1, r4, lr, lsl #12
    31b4:	000bfb00 	andeq	pc, fp, r0, lsl #22
    31b8:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    31bc:	1201dd01 	andne	sp, r1, #1, 26	; 0x40
    31c0:	00000416 	andeq	r0, r0, r6, lsl r4
    31c4:	0db62a00 			; <UNDEFINED> instruction: 0x0db62a00
    31c8:	c4010000 	strgt	r0, [r1], #-0
    31cc:	b0010d01 	andlt	r0, r1, r1, lsl #26
    31d0:	ec00000c 	stc	0, cr0, [r0], {12}
    31d4:	0100000c 	tsteq	r0, ip
    31d8:	000d639c 	muleq	sp, ip, r3
    31dc:	69703200 	ldmdbvs	r0!, {r9, ip, sp}^
    31e0:	c4010064 	strgt	r0, [r1], #-100	; 0xffffff9c
    31e4:	04162101 	ldreq	r2, [r6], #-257	; 0xfffffeff
    31e8:	50010000 	andpl	r0, r1, r0
    31ec:	000f952d 	andeq	r9, pc, sp, lsr #10
    31f0:	01c80100 	biceq	r0, r8, r0, lsl #2
    31f4:	00011d08 	andeq	r1, r1, r8, lsl #26
    31f8:	000c2400 	andeq	r2, ip, r0, lsl #8
    31fc:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    3200:	0601c901 	streq	ip, [r1], -r1, lsl #18
    3204:	0000008d 	andeq	r0, r0, sp, lsl #1
    3208:	00000c37 	andeq	r0, r0, r7, lsr ip
    320c:	01006923 	tsteq	r0, r3, lsr #18
    3210:	160e01ca 	strne	r0, [lr], -sl, asr #3
    3214:	01000004 	tsteq	r0, r4
    3218:	012c0052 	qsubeq	r0, r2, ip
    321c:	00000f6d 	andeq	r0, r0, sp, ror #30
    3220:	0601b301 	streq	fp, [r1], -r1, lsl #6
    3224:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    3230:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    3234:	2b00000d 	blcs	3270 <__exidx_end+0x638>
    3238:	00646970 	rsbeq	r6, r4, r0, ror r9
    323c:	1301b301 	movwne	fp, #4865	; 0x1301
    3240:	0000011d 	andeq	r0, r0, sp, lsl r1
    3244:	00000c4a 	andeq	r0, r0, sl, asr #24
    3248:	01006922 	tsteq	r0, r2, lsr #18
    324c:	160e01b5 			; <UNDEFINED> instruction: 0x160e01b5
    3250:	68000004 	stmdavs	r0, {r2}
    3254:	0000000c 	andeq	r0, r0, ip
    3258:	0dd50133 	ldfeqe	f0, [r5, #204]	; 0xcc
    325c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    3260:	00010601 	andeq	r0, r1, r1, lsl #12
    3264:	00000000 	andeq	r0, r0, r0
    3268:	01000000 	mrseq	r0, (UNDEF: 0)
    326c:	d0011f9c 	mulle	r1, ip, pc	; <UNPREDICTABLE>
    3270:	01000023 	tsteq	r0, r3, lsr #32
    3274:	0106019a 			; <UNDEFINED> instruction: 0x0106019a
    3278:	00000f00 	andeq	r0, r0, r0, lsl #30
    327c:	00000f38 	andeq	r0, r0, r8, lsr pc
    3280:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    3284:	642b0000 	strtvs	r0, [fp], #-0
    3288:	019a0100 	orrseq	r0, sl, r0, lsl #2
    328c:	0000d912 	andeq	sp, r0, r2, lsl r9
    3290:	000c8600 	andeq	r8, ip, r0, lsl #12
    3294:	00402000 	subeq	r2, r0, r0
    3298:	9a010000 	bls	432a0 <__ccfg+0x232f8>
    329c:	00d91a01 	sbcseq	r1, r9, r1, lsl #20
    32a0:	0c990000 	ldceq	0, cr0, [r9], {0}
    32a4:	2c000000 	stccs	0, cr0, [r0], {-0}
    32a8:	000fca01 	andeq	ip, pc, r1, lsl #20
    32ac:	01880100 	orreq	r0, r8, r0, lsl #2
    32b0:	011d0107 	tsteq	sp, r7, lsl #2
    32b4:	0edc0000 	cdpeq	0, 13, cr0, cr12, cr0, {0}
    32b8:	0f000000 	svceq	0x00000000
    32bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    32c0:	00000e3e 	andeq	r0, r0, lr, lsr lr
    32c4:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    32c8:	01880100 	orreq	r0, r8, r0, lsl #2
    32cc:	00011d18 	andeq	r1, r1, r8, lsl sp
    32d0:	000cac00 	andeq	sl, ip, r0, lsl #24
    32d4:	74732b00 	ldrbtvc	r2, [r3], #-2816	; 0xfffff500
    32d8:	01880100 	orreq	r0, r8, r0, lsl #2
    32dc:	0000d922 	andeq	sp, r0, r2, lsr #18
    32e0:	000cd500 	andeq	sp, ip, r0, lsl #10
    32e4:	00692200 	rsbeq	r2, r9, r0, lsl #4
    32e8:	0e018a01 	vmlaeq.f32	s16, s2, s2
    32ec:	00000416 	andeq	r0, r0, r6, lsl r4
    32f0:	00000cf3 	strdeq	r0, [r0], -r3
    32f4:	a4011f00 	strge	r1, [r1], #-3840	; 0xfffff100
    32f8:	0100000e 	tsteq	r0, lr
    32fc:	01060178 	tsteq	r6, r8, ror r1
	...
    3308:	0e969c01 	cdpeq	12, 9, cr9, cr6, cr1, {0}
    330c:	702b0000 	eorvc	r0, fp, r0
    3310:	01006469 	tsteq	r0, r9, ror #8
    3314:	1d1b0178 	ldfnes	f0, [fp, #-480]	; 0xfffffe20
    3318:	11000001 	tstne	r0, r1
    331c:	2000000d 	andcs	r0, r0, sp
    3320:	00000efc 	strdeq	r0, [r0], -ip
    3324:	26017801 	strcs	r7, [r1], -r1, lsl #16
    3328:	0000011d 	andeq	r0, r0, sp, lsl r1
    332c:	00000d24 	andeq	r0, r0, r4, lsr #26
    3330:	01006923 	tsteq	r0, r3, lsr #18
    3334:	160e017c 			; <UNDEFINED> instruction: 0x160e017c
    3338:	01000004 	tsteq	r0, r4
    333c:	006a2250 	rsbeq	r2, sl, r0, asr r2
    3340:	07017d01 	streq	r7, [r1, -r1, lsl #26]
    3344:	0000008d 	andeq	r0, r0, sp, lsl #1
    3348:	00000d42 	andeq	r0, r0, r2, asr #26
    334c:	5c011f00 	stcpl	15, cr1, [r1], {-0}
    3350:	0100000e 	tsteq	r0, lr
    3354:	01060166 	tsteq	r6, r6, ror #2
    3358:	00000ea8 	andeq	r0, r0, r8, lsr #29
    335c:	00000edc 	ldrdeq	r0, [r0], -ip
    3360:	0edb9c01 	cdpeq	12, 13, cr9, cr11, cr1, {0}
    3364:	fc340000 	ldc2	0, cr0, [r4], #-0
    3368:	0100000e 	tsteq	r0, lr
    336c:	1d1a0166 	ldfnes	f0, [sl, #-408]	; 0xfffffe68
    3370:	01000001 	tsteq	r0, r1
    3374:	006a2250 	rsbeq	r2, sl, r0, asr r2
    3378:	06016a01 	streq	r6, [r1], -r1, lsl #20
    337c:	0000008d 	andeq	r0, r0, sp, lsl #1
    3380:	00000d60 	andeq	r0, r0, r0, ror #26
    3384:	01006923 	tsteq	r0, r3, lsr #18
    3388:	160e016b 	strne	r0, [lr], -fp, ror #2
    338c:	01000004 	tsteq	r0, r4
    3390:	012e0052 	qsubeq	r0, r2, lr
    3394:	00000f10 	andeq	r0, r0, r0, lsl pc
    3398:	06015901 	streq	r5, [r1], -r1, lsl #18
    339c:	0f110101 	svceq	0x00110101
    33a0:	fc350000 	ldc2	0, cr0, [r5], #-0
    33a4:	0100000e 	tsteq	r0, lr
    33a8:	1d170159 	ldfnes	f0, [r7, #-356]	; 0xfffffe9c
    33ac:	35000001 	strcc	r0, [r0, #-1]
    33b0:	00000040 	andeq	r0, r0, r0, asr #32
    33b4:	23015901 	movwcs	r5, #6401	; 0x1901
    33b8:	000000d9 	ldrdeq	r0, [r0], -r9
    33bc:	01006a24 	tsteq	r0, r4, lsr #20
    33c0:	ef07015d 	svc	0x0007015d
    33c4:	00000000 	andeq	r0, r0, r0
    33c8:	0e97011f 	mrceq	1, 4, r0, cr7, cr15, {0}
    33cc:	53010000 	movwpl	r0, #4096	; 0x1000
    33d0:	60010601 	andvs	r0, r1, r1, lsl #12
    33d4:	7400000e 	strvc	r0, [r0], #-14
    33d8:	0100000e 	tsteq	r0, lr
    33dc:	000f3c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    33e0:	00402000 	subeq	r2, r0, r0
    33e4:	53010000 	movwpl	r0, #4096	; 0x1000
    33e8:	00d91401 	sbcseq	r1, r9, r1, lsl #8
    33ec:	0d730000 	ldcleq	0, cr0, [r3, #-0]
    33f0:	2c000000 	stccs	0, cr0, [r0], {-0}
    33f4:	000de801 	andeq	lr, sp, r1, lsl #16
    33f8:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    33fc:	011d0107 	tsteq	sp, r7, lsl #2
    3400:	11bc0000 			; <UNDEFINED> instruction: 0x11bc0000
    3404:	11f00000 	mvnsne	r0, r0
    3408:	9c010000 	stcls	0, cr0, [r1], {-0}
    340c:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    3410:	00043020 	andeq	r3, r4, r0, lsr #32
    3414:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    3418:	0002f11a 	andeq	pc, r2, sl, lsl r1	; <UNPREDICTABLE>
    341c:	000d8600 	andeq	r8, sp, r0, lsl #12
    3420:	06242000 	strteq	r2, [r4], -r0
    3424:	2c010000 	stccs	0, cr0, [r1], {-0}
    3428:	011d2601 	tsteq	sp, r1, lsl #12
    342c:	0da40000 	stceq	0, cr0, [r4]
    3430:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    3434:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    3438:	0004160e 	andeq	r1, r4, lr, lsl #12
    343c:	36500100 	ldrbcc	r0, [r0], -r0, lsl #2
    3440:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    3444:	01006a22 	tsteq	r0, r2, lsr #20
    3448:	160f013d 			; <UNDEFINED> instruction: 0x160f013d
    344c:	c2000004 	andgt	r0, r0, #4
    3450:	0000000d 	andeq	r0, r0, sp
    3454:	4d013700 	stcmi	7, cr3, [r1, #-0]
    3458:	0100000f 	tsteq	r0, pc
    345c:	010106af 	smlatbeq	r1, pc, r6, r0	; <UNPREDICTABLE>
    3460:	00000fe3 	andeq	r0, r0, r3, ror #31
    3464:	6e696d38 	mcrvs	13, 3, r6, cr9, cr8, {1}
    3468:	1aaf0100 	bne	febc3870 <_estack+0xdebbe870>
    346c:	000000d9 	ldrdeq	r0, [r0], -r9
    3470:	000b5239 	andeq	r5, fp, r9, lsr r2
    3474:	27af0100 	strcs	r0, [pc, r0, lsl #2]!
    3478:	000000cd 	andeq	r0, r0, sp, asr #1
    347c:	0100693a 	tsteq	r0, sl, lsr r9
    3480:	04160ebd 	ldreq	r0, [r6], #-3773	; 0xfffff143
    3484:	643a0000 	ldrtvs	r0, [sl], #-0
    3488:	07be0100 	ldreq	r0, [lr, r0, lsl #2]!
    348c:	000000d9 	ldrdeq	r0, [r0], -r9
    3490:	4b4f4d3b 	blmi	13d6984 <__ccfg+0x13b69dc>
    3494:	01090100 	mrseq	r0, (UNDEF: 25)
    3498:	013c0001 	teqeq	ip, r1
    349c:	00000f85 	andeq	r0, r0, r5, lsl #31
    34a0:	0106a701 	tsteq	r6, r1, lsl #14
	...
    34ac:	10189c01 	andsne	r9, r8, r1, lsl #24
    34b0:	743d0000 	ldrtvc	r0, [sp], #-0
    34b4:	1fa70100 	svcne	0x00a70100
    34b8:	00000129 	andeq	r0, r0, r9, lsr #2
    34bc:	00000deb 	andeq	r0, r0, fp, ror #27
    34c0:	0100763d 	tsteq	r0, sp, lsr r6
    34c4:	00d927a7 	sbcseq	r2, r9, r7, lsr #15
    34c8:	0dfe0000 	ldcleq	0, cr0, [lr]
    34cc:	3c000000 	stccc	0, cr0, [r0], {-0}
    34d0:	000fd401 	andeq	sp, pc, r1, lsl #8
    34d4:	068f0100 	streq	r0, [pc], r0, lsl #2
    34d8:	00000001 	andeq	r0, r0, r1
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	4e9c0100 	fmlmie	f0, f4, f0
    34e4:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    34e8:	01007475 	tsteq	r0, r5, ror r4
    34ec:	01291d8f 	smlawbeq	r9, pc, sp, r1	; <UNPREDICTABLE>
    34f0:	0e110000 	cdpeq	0, 1, cr0, cr1, cr0, {0}
    34f4:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    34f8:	06930100 	ldreq	r0, [r3], r0, lsl #2
    34fc:	0000008d 	andeq	r0, r0, sp, lsl #1
    3500:	00000e2f 	andeq	r0, r0, pc, lsr #28
    3504:	fe013c00 	cdp2	12, 0, cr3, cr1, cr0, {0}
    3508:	0100000d 	tsteq	r0, sp
    350c:	0001067f 	andeq	r0, r1, pc, ror r6
    3510:	00000000 	andeq	r0, r0, r0
    3514:	01000000 	mrseq	r0, (UNDEF: 0)
    3518:	0010849c 	mulseq	r0, ip, r4
    351c:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    3520:	1a7f0100 	bne	1fc3928 <__ccfg+0x1fa3980>
    3524:	00000129 	andeq	r0, r0, r9, lsr #2
    3528:	00000e4d 	andeq	r0, r0, sp, asr #28
    352c:	0100693e 	tsteq	r0, lr, lsr r9
    3530:	008d0683 	addeq	r0, sp, r3, lsl #13
    3534:	0e760000 	cdpeq	0, 7, cr0, cr6, cr0, {0}
    3538:	3f000000 	svccc	0x00000000
    353c:	000f0201 	andeq	r0, pc, r1, lsl #4
    3540:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    3544:	000d8401 	andeq	r8, sp, r1, lsl #8
    3548:	000d9400 	andeq	r9, sp, r0, lsl #8
    354c:	409c0100 	addsmi	r0, ip, r0, lsl #2
    3550:	00000ebd 			; <UNDEFINED> instruction: 0x00000ebd
    3554:	01145f01 	tsteq	r4, r1, lsl #30
    3558:	00000416 	andeq	r0, r0, r6, lsl r4
    355c:	0010c101 	andseq	ip, r0, r1, lsl #2
    3560:	69703800 	ldmdbvs	r0!, {fp, ip, sp}^
    3564:	5f010064 	svcpl	0x00010064
    3568:	00011d22 	andeq	r1, r1, r2, lsr #26
    356c:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    3570:	16176101 	ldrne	r6, [r7], -r1, lsl #2
    3574:	00000004 	andeq	r0, r0, r4
    3578:	000e0941 	andeq	r0, lr, r1, asr #18
    357c:	029e0200 	addseq	r0, lr, #0, 4
    3580:	10e20101 	rscne	r0, r2, r1, lsl #2
    3584:	e2030000 	and	r0, r3, #0
    3588:	35000010 	strcc	r0, [r0, #-16]
    358c:	00000aca 	andeq	r0, r0, sl, asr #21
    3590:	13029e02 	movwne	r9, #11778	; 0x2e02
    3594:	00000073 	andeq	r0, r0, r3, ror r0
    3598:	02010200 	andeq	r0, r1, #0, 4
    359c:	00000f41 	andeq	r0, r0, r1, asr #30
    35a0:	00109842 	andseq	r9, r0, r2, asr #16
	...
    35ac:	2e9c0100 	fmlcse	f0, f4, f0
    35b0:	43000011 	movwmi	r0, #17
    35b4:	000010aa 	andeq	r1, r0, sl, lsr #1
    35b8:	00000e94 	muleq	r0, r4, lr
    35bc:	0010b644 	andseq	fp, r0, r4, asr #12
    35c0:	000ebd00 	andeq	fp, lr, r0, lsl #26
    35c4:	10984500 	addsne	r4, r8, r0, lsl #10
	...
    35d0:	5f010000 	svcpl	0x00010000
    35d4:	10aa4314 	adcne	r4, sl, r4, lsl r3
    35d8:	0edb0000 	cdpeq	0, 13, cr0, cr11, cr0, {0}
    35dc:	b6460000 	strblt	r0, [r6], -r0
    35e0:	00000010 	andeq	r0, r0, r0, lsl r0
    35e4:	0f9e4200 	svceq	0x009e4200
    35e8:	0d940000 	ldceq	0, cr0, [r4]
    35ec:	0e600000 	cdpeq	0, 6, cr0, cr0, cr0, {0}
    35f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    35f4:	0000119a 	muleq	r0, sl, r1
    35f8:	000fad43 	andeq	sl, pc, r3, asr #26
    35fc:	000eee00 	andeq	lr, lr, r0, lsl #28
    3600:	0fb94300 	svceq	0x00b94300
    3604:	0f010000 	svceq	0x00010000
    3608:	c5460000 	strbgt	r0, [r6, #-0]
    360c:	4600000f 	strmi	r0, [r0], -pc
    3610:	00000fcf 	andeq	r0, r0, pc, asr #31
    3614:	000f9e47 	andeq	r9, pc, r7, asr #28
    3618:	000da200 	andeq	sl, sp, r0, lsl #4
    361c:	0005a000 	andeq	sl, r5, r0
    3620:	06af0100 	strteq	r0, [pc], r0, lsl #2
    3624:	000fb929 	andeq	fp, pc, r9, lsr #18
    3628:	0fad4300 	svceq	0x00ad4300
    362c:	0f140000 	svceq	0x00140000
    3630:	a0360000 	eorsge	r0, r6, r0
    3634:	44000005 	strmi	r0, [r0], #-5
    3638:	00000fc5 	andeq	r0, r0, r5, asr #31
    363c:	00000f3d 	andeq	r0, r0, sp, lsr pc
    3640:	000fcf46 	andeq	ip, pc, r6, asr #30
    3644:	0fd94800 	svceq	0x00d94800
    3648:	0e3e0000 	cdpeq	0, 3, cr0, cr14, cr0, {0}
    364c:	00000000 	andeq	r0, r0, r0
    3650:	0edb4200 	cdpeq	2, 13, cr4, cr11, cr0, {0}
    3654:	0e740000 	cdpeq	0, 7, cr0, cr4, cr0, {0}
    3658:	0ea80000 	cdpeq	0, 10, cr0, cr8, cr0, {0}
    365c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3660:	000011ee 	andeq	r1, r0, lr, ror #3
    3664:	000eeb43 	andeq	lr, lr, r3, asr #22
    3668:	000f5b00 	andeq	r5, pc, r0, lsl #22
    366c:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    3670:	0f790000 	svceq	0x00790000
    3674:	05460000 	strbeq	r0, [r6, #-0]
    3678:	4900000f 	stmdbmi	r0, {r0, r1, r2, r3}
    367c:	00000edb 	ldrdeq	r0, [r0], -fp
    3680:	00000e86 	andeq	r0, r0, r6, lsl #29
    3684:	00000e8e 	andeq	r0, r0, lr, lsl #29
    3688:	06015901 	streq	r5, [r1], -r1, lsl #18
    368c:	000eeb43 	andeq	lr, lr, r3, asr #22
    3690:	000f9700 	andeq	r9, pc, r0, lsl #14
    3694:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    3698:	0faa0000 	svceq	0x00aa0000
    369c:	05460000 	strbeq	r0, [r6, #-0]
    36a0:	0000000f 	andeq	r0, r0, pc
    36a4:	08804a00 	stmeq	r0, {r9, fp, lr}
    36a8:	107c0000 	rsbsne	r0, ip, r0
    36ac:	10c40000 	sbcne	r0, r4, r0
    36b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    36b4:	00089043 	andeq	r9, r8, r3, asr #32
    36b8:	000fbd00 	andeq	fp, pc, r0, lsl #26
    36bc:	08804900 	stmeq	r0, {r8, fp, lr}
    36c0:	10880000 	addne	r0, r8, r0
    36c4:	10900000 	addsne	r0, r0, r0
    36c8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    36cc:	90430603 	subls	r0, r3, r3, lsl #12
    36d0:	db000008 	blle	36f8 <__exidx_end+0xac0>
    36d4:	0000000f 	andeq	r0, r0, pc
    36d8:	13330000 	teqne	r3, #0
    36dc:	00030000 	andeq	r0, r3, r0
    36e0:	00000c98 	muleq	r0, r8, ip
    36e4:	00730104 	rsbseq	r0, r3, r4, lsl #2
    36e8:	230c0000 	movwcs	r0, #49152	; 0xc000
    36ec:	0c000010 	stceq	0, cr0, [r0], {16}
    36f0:	a8000005 	stmdage	r0, {r0, r2}
    36f4:	00000007 	andeq	r0, r0, r7
    36f8:	3a000000 	bcc	3700 <__exidx_end+0xac8>
    36fc:	02000027 	andeq	r0, r0, #39	; 0x27
    3700:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
    3704:	02020000 	andeq	r0, r2, #0
    3708:	0005fe05 	andeq	pc, r5, r5, lsl #28
    370c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3710:	000004c5 	andeq	r0, r0, r5, asr #9
    3714:	c0050802 	andgt	r0, r5, r2, lsl #16
    3718:	03000004 	movweq	r0, #4
    371c:	00000666 	andeq	r0, r0, r6, ror #12
    3720:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    3724:	02000000 	andeq	r0, r0, #0
    3728:	06fb0801 	ldrbteq	r0, [fp], r1, lsl #16
    372c:	35030000 	strcc	r0, [r3, #-0]
    3730:	02000003 	andeq	r0, r0, #3
    3734:	00601931 	rsbeq	r1, r0, r1, lsr r9
    3738:	02020000 	andeq	r0, r2, #0
    373c:	0007a707 	andeq	sl, r7, r7, lsl #14
    3740:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    3744:	34020000 	strcc	r0, [r2], #-0
    3748:	00007319 	andeq	r7, r0, r9, lsl r3
    374c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3750:	000002fa 	strdeq	r0, [r0], -sl
    3754:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    3758:	04000002 	streq	r0, [r0], #-2
    375c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    3760:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    3764:	0002ff07 	andeq	pc, r2, r7, lsl #30
    3768:	036b0300 	cmneq	fp, #0, 6
    376c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    3770:	00009b1b 	andeq	r9, r0, fp, lsl fp
    3774:	06960500 	ldreq	r0, [r6], r0, lsl #10
    3778:	0d040000 	stceq	0, cr0, [r4, #-0]
    377c:	0000b300 	andeq	fp, r0, r0, lsl #6
    3780:	075e0600 	ldrbeq	r0, [lr, -r0, lsl #12]
    3784:	00b30000 	adcseq	r0, r3, r0
    3788:	01000000 	mrseq	r0, (UNDEF: 0)
    378c:	03040700 	movweq	r0, #18176	; 0x4700
    3790:	00000698 	muleq	r0, r8, r6
    3794:	8f186303 	svchi	0x00186303
    3798:	03000000 	movweq	r0, #0
    379c:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    37a0:	41122604 	tstmi	r2, r4, lsl #12
    37a4:	03000000 	movweq	r0, #0
    37a8:	00002100 	andeq	r2, r0, r0, lsl #2
    37ac:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    37b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    37b4:	000000cd 	andeq	r0, r0, sp, asr #1
    37b8:	0000cd09 	andeq	ip, r0, r9, lsl #26
    37bc:	16c80300 	strbne	r0, [r8], r0, lsl #6
    37c0:	2b040000 	blcs	1037c8 <__ccfg+0xe3820>
    37c4:	00004112 	andeq	r4, r0, r2, lsl r1
    37c8:	00e30900 	rsceq	r0, r3, r0, lsl #18
    37cc:	e3080000 	movw	r0, #32768	; 0x8000
    37d0:	03000000 	movweq	r0, #0
    37d4:	00002151 	andeq	r2, r0, r1, asr r1
    37d8:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    37dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    37e0:	000000f9 	strdeq	r0, [r0], -r9
    37e4:	00040d03 	andeq	r0, r4, r3, lsl #26
    37e8:	122d0400 	eorne	r0, sp, #0, 8
    37ec:	00000067 	andeq	r0, r0, r7, rrx
    37f0:	0006a603 	andeq	sl, r6, r3, lsl #12
    37f4:	102e0400 	eorne	r0, lr, r0, lsl #8
    37f8:	00000122 	andeq	r0, r0, r2, lsr #2
    37fc:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    3800:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    3804:	b6093204 	strlt	r3, [r9], -r4, lsl #4
    3808:	0c000001 	stceq	0, cr0, [r0], {1}
    380c:	00000023 	andeq	r0, r0, r3, lsr #32
    3810:	e3073404 	movw	r3, #29700	; 0x7404
    3814:	01000000 	mrseq	r0, (UNDEF: 0)
    3818:	0c000701 	stceq	7, cr0, [r0], {1}
    381c:	00000413 	andeq	r0, r0, r3, lsl r4
    3820:	e3033504 	movw	r3, #13572	; 0x3504
    3824:	01000000 	mrseq	r0, (UNDEF: 0)
    3828:	0c000601 	stceq	6, cr0, [r0], {1}
    382c:	000001cb 	andeq	r0, r0, fp, asr #3
    3830:	e3033604 	movw	r3, #13828	; 0x3604
    3834:	01000000 	mrseq	r0, (UNDEF: 0)
    3838:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    383c:	0000044d 	andeq	r0, r0, sp, asr #8
    3840:	e3033704 	movw	r3, #14084	; 0x3704
    3844:	01000000 	mrseq	r0, (UNDEF: 0)
    3848:	0c000401 	cfstrseq	mvf0, [r0], {1}
    384c:	00000608 	andeq	r0, r0, r8, lsl #12
    3850:	e3033804 	movw	r3, #14340	; 0x3804
    3854:	01000000 	mrseq	r0, (UNDEF: 0)
    3858:	0d000004 	stceq	0, cr0, [r0, #-16]
    385c:	0000041a 	andeq	r0, r0, sl, lsl r4
    3860:	e3073a04 	movw	r3, #31236	; 0x7a04
    3864:	01000000 	mrseq	r0, (UNDEF: 0)
    3868:	0005760d 	andeq	r7, r5, sp, lsl #12
    386c:	033c0400 	teqeq	ip, #0, 8
    3870:	000000e3 	andeq	r0, r0, r3, ror #1
    3874:	08530d02 	ldmdaeq	r3, {r1, r8, sl, fp}^
    3878:	3d040000 	stccc	0, cr0, [r4, #-0]
    387c:	0000e303 	andeq	lr, r0, r3, lsl #6
    3880:	8e0d0300 	cdphi	3, 0, cr0, cr13, cr0, {0}
    3884:	04000005 	streq	r0, [r0], #-5
    3888:	00f9083f 	rscseq	r0, r9, pc, lsr r8
    388c:	00040000 	andeq	r0, r4, r0
    3890:	00021903 	andeq	r1, r2, r3, lsl #18
    3894:	03410400 	movteq	r0, #5120	; 0x1400
    3898:	00000128 	andeq	r0, r0, r8, lsr #2
    389c:	0001b609 	andeq	fp, r1, r9, lsl #12
    38a0:	04540e00 	ldrbeq	r0, [r4], #-3584	; 0xfffff200
    38a4:	43040000 	movwmi	r0, #16384	; 0x4000
    38a8:	0001c21a 	andeq	ip, r1, sl, lsl r2
    38ac:	0e010100 	adfeqs	f0, f1, f0
    38b0:	00000167 	andeq	r0, r0, r7, ror #2
    38b4:	e30e4504 	movw	r4, #58628	; 0xe504
    38b8:	01000001 	tsteq	r0, r1
    38bc:	e9040a01 	stmdb	r4, {r0, r9, fp}
    38c0:	02000001 	andeq	r0, r0, #1
    38c4:	07040801 	streq	r0, [r4, -r1, lsl #16]
    38c8:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    38cc:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    38d0:	00000222 	andeq	r0, r0, r2, lsr #4
    38d4:	e31e4504 	tst	lr, #4, 10	; 0x1000000
    38d8:	01000001 	tsteq	r0, r1
    38dc:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    38e0:	0234098f 	eorseq	r0, r4, #2342912	; 0x23c000
    38e4:	cf0d0000 	svcgt	0x000d0000
    38e8:	05000004 	streq	r0, [r0, #-4]
    38ec:	00670b90 	mlseq	r7, r0, fp, r0
    38f0:	0d000000 	stceq	0, cr0, [r0, #-0]
    38f4:	00000985 	andeq	r0, r0, r5, lsl #19
    38f8:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    38fc:	04000000 	streq	r0, [r0], #-0
    3900:	0001a00d 	andeq	sl, r1, sp
    3904:	10920500 	addsne	r0, r2, r0, lsl #10
    3908:	000000ef 	andeq	r0, r0, pc, ror #1
    390c:	51030006 	tstpl	r3, r6
    3910:	05000007 	streq	r0, [r0, #-7]
    3914:	02030393 	andeq	r0, r3, #1275068418	; 0x4c000002
    3918:	340f0000 	strcc	r0, [pc], #-0	; 3920 <__exidx_end+0xce8>
    391c:	4b000002 	blmi	392c <__exidx_end+0xcf4>
    3920:	10000002 	andne	r0, r0, r2
    3924:	059a0e00 	ldreq	r0, [sl, #3584]	; 0xe00
    3928:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    392c:	0002400f 	andeq	r4, r2, pc
    3930:	0a010100 	beq	43d38 <__ccfg+0x23d90>
    3934:	0000f404 	andeq	pc, r0, r4, lsl #8
    3938:	06010b00 	streq	r0, [r1], -r0, lsl #22
    393c:	02890991 	addeq	r0, r9, #2375680	; 0x244000
    3940:	950c0000 	strls	r0, [ip, #-0]
    3944:	06000005 	streq	r0, [r0], -r5
    3948:	00e30793 	smlaleq	r0, r3, r3, r7
    394c:	07010000 	streq	r0, [r1, -r0]
    3950:	b40c0001 	strlt	r0, [ip], #-1
    3954:	06000003 	streq	r0, [r0], -r3
    3958:	00e30394 	smlaleq	r0, r3, r4, r3
    395c:	01010000 	mrseq	r0, (UNDEF: 1)
    3960:	03000000 	movweq	r0, #0
    3964:	0000061a 	andeq	r0, r0, sl, lsl r6
    3968:	5f039606 	svcpl	0x00039606
    396c:	08000002 	stmdaeq	r0, {r1}
    3970:	00000289 	andeq	r0, r0, r9, lsl #5
    3974:	0002950f 	andeq	r9, r2, pc, lsl #10
    3978:	0002a500 	andeq	sl, r2, r0, lsl #10
    397c:	08001000 	stmdaeq	r0, {ip}
    3980:	0000029a 	muleq	r0, sl, r2
    3984:	0002ba0e 	andeq	fp, r2, lr, lsl #20
    3988:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    398c:	000002a5 	andeq	r0, r0, r5, lsr #5
    3990:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    3994:	c3000000 	movwgt	r0, #0
    3998:	10000002 	andne	r0, r0, r2
    399c:	02b80800 	adcseq	r0, r8, #0, 16
    39a0:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
    39a4:	07000003 	streq	r0, [r0, -r3]
    39a8:	02c31306 	sbceq	r1, r3, #402653184	; 0x18000000
    39ac:	01010000 	mrseq	r0, (UNDEF: 1)
    39b0:	0005580e 	andeq	r5, r5, lr, lsl #16
    39b4:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    39b8:	000000f9 	strdeq	r0, [r0], -r9
    39bc:	1d110101 	ldfnes	f0, [r1, #-4]
    39c0:	08000007 	stmdaeq	r0, {r0, r1, r2}
    39c4:	f110016e 			; <UNDEFINED> instruction: 0xf110016e
    39c8:	0a000002 	beq	39d8 <__exidx_end+0xda0>
    39cc:	0002f704 	andeq	pc, r2, r4, lsl #14
    39d0:	03011200 	movweq	r1, #4608	; 0x1200
    39d4:	13000003 	movwne	r0, #3
    39d8:	000000cd 	andeq	r0, r0, sp, asr #1
    39dc:	01f00f00 	mvnseq	r0, r0, lsl #30
    39e0:	030e0000 	movweq	r0, #57344	; 0xe000
    39e4:	00100000 	andseq	r0, r0, r0
    39e8:	00030308 	andeq	r0, r3, r8, lsl #6
    39ec:	05c21400 	strbeq	r1, [r2, #1024]	; 0x400
    39f0:	7f080000 	svcvc	0x00080000
    39f4:	030e1601 	movweq	r1, #58881	; 0xe601
    39f8:	01010000 	mrseq	r0, (UNDEF: 1)
    39fc:	00029d14 	andeq	r9, r2, r4, lsl sp
    3a00:	01820800 	orreq	r0, r2, r0, lsl #16
    3a04:	00010514 	andeq	r0, r1, r4, lsl r5
    3a08:	0b010100 	bleq	43e10 <__ccfg+0x23e68>
    3a0c:	09080904 	stmdbeq	r8, {r2, r8, fp}
    3a10:	00000355 	andeq	r0, r0, r5, asr r3
    3a14:	0001a60d 	andeq	sl, r1, sp, lsl #12
    3a18:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    3a1c:	000000cd 	andeq	r0, r0, sp, asr #1
    3a20:	07450d00 	strbeq	r0, [r5, -r0, lsl #26]
    3a24:	10090000 	andne	r0, r9, r0
    3a28:	0000cd03 	andeq	ip, r0, r3, lsl #26
    3a2c:	03000200 	movweq	r0, #512	; 0x200
    3a30:	000007c3 	andeq	r0, r0, r3, asr #15
    3a34:	31031109 	tstcc	r3, r9, lsl #2
    3a38:	0b000003 	bleq	3a4c <__exidx_end+0xe14>
    3a3c:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    3a40:	000003d3 	ldrdeq	r0, [r0], -r3
    3a44:	0003580d 	andeq	r5, r3, sp, lsl #16
    3a48:	08170900 	ldmdaeq	r7, {r8, fp}
    3a4c:	000003ed 	andeq	r0, r0, sp, ror #7
    3a50:	05860d00 	streq	r0, [r6, #3328]	; 0xd00
    3a54:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    3a58:	00040808 	andeq	r0, r4, r8, lsl #16
    3a5c:	b80d0400 	stmdalt	sp, {sl}
    3a60:	09000006 	stmdbeq	r0, {r1, r2}
    3a64:	043e0819 	ldrteq	r0, [lr], #-2073	; 0xfffff7e7
    3a68:	0d080000 	stceq	0, cr0, [r8, #-0]
    3a6c:	0000073d 	andeq	r0, r0, sp, lsr r7
    3a70:	59081a09 	stmdbpl	r8, {r0, r3, r9, fp, ip}
    3a74:	0c000004 	stceq	0, cr0, [r0], {4}
    3a78:	0005b20d 	andeq	fp, r5, sp, lsl #4
    3a7c:	081b0900 	ldmdaeq	fp, {r8, fp}
    3a80:	0000046f 	andeq	r0, r0, pc, ror #8
    3a84:	05f60d10 	ldrbeq	r0, [r6, #3344]!	; 0xd10
    3a88:	1c090000 	stcne	0, cr0, [r9], {-0}
    3a8c:	00046f08 	andeq	r6, r4, r8, lsl #30
    3a90:	890d1400 	stmdbhi	sp, {sl, ip}
    3a94:	09000001 	stmdbeq	r0, {r0}
    3a98:	046f081d 	strbteq	r0, [pc], #-2077	; 3aa0 <__exidx_end+0xe68>
    3a9c:	0d180000 	ldceq	0, cr0, [r8, #-0]
    3aa0:	00000210 	andeq	r0, r0, r0, lsl r2
    3aa4:	81061e09 	tsthi	r6, r9, lsl #28
    3aa8:	1c000000 	stcne	0, cr0, [r0], {-0}
    3aac:	81011500 	tsthi	r1, r0, lsl #10
    3ab0:	ed000000 	stc	0, cr0, [r0, #-0]
    3ab4:	13000003 	movwne	r0, #3
    3ab8:	00000081 	andeq	r0, r0, r1, lsl #1
    3abc:	00008113 	andeq	r8, r0, r3, lsl r1
    3ac0:	00b51300 	adcseq	r1, r5, r0, lsl #6
    3ac4:	0a000000 	beq	3acc <__exidx_end+0xe94>
    3ac8:	0003d304 	andeq	sp, r3, r4, lsl #6
    3acc:	81011500 	tsthi	r1, r0, lsl #10
    3ad0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3ad4:	13000004 	movwne	r0, #4
    3ad8:	00000081 	andeq	r0, r0, r1, lsl #1
    3adc:	00008113 	andeq	r8, r0, r3, lsl r1
    3ae0:	040a0000 	streq	r0, [sl], #-0
    3ae4:	000003f3 	strdeq	r0, [r0], -r3
    3ae8:	00810115 	addeq	r0, r1, r5, lsl r1
    3aec:	04320000 	ldrteq	r0, [r2], #-0
    3af0:	81130000 	tsthi	r3, r0
    3af4:	13000000 	movwne	r0, #0
    3af8:	00000116 	andeq	r0, r0, r6, lsl r1
    3afc:	00008113 	andeq	r8, r0, r3, lsl r1
    3b00:	04321300 	ldrteq	r1, [r2], #-768	; 0xfffffd00
    3b04:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3b08:	00000004 	andeq	r0, r0, r4
    3b0c:	0081040a 	addeq	r0, r1, sl, lsl #8
    3b10:	040a0000 	streq	r0, [sl], #-0
    3b14:	00000355 	andeq	r0, r0, r5, asr r3
    3b18:	040e040a 	streq	r0, [lr], #-1034	; 0xfffffbf6
    3b1c:	01150000 	tsteq	r5, r0
    3b20:	00000081 	andeq	r0, r0, r1, lsl #1
    3b24:	00000459 	andeq	r0, r0, r9, asr r4
    3b28:	00011613 	andeq	r1, r1, r3, lsl r6
    3b2c:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    3b30:	0a000000 	beq	3b38 <__exidx_end+0xf00>
    3b34:	00044404 	andeq	r4, r4, r4, lsl #8
    3b38:	81011500 	tsthi	r1, r0, lsl #10
    3b3c:	6f000000 	svcvs	0x00000000
    3b40:	13000004 	movwne	r0, #4
    3b44:	00000116 	andeq	r0, r0, r6, lsl r1
    3b48:	5f040a00 	svcpl	0x00040a00
    3b4c:	03000004 	movweq	r0, #4
    3b50:	00000796 	muleq	r0, r6, r7
    3b54:	61031f09 	tstvs	r3, r9, lsl #30
    3b58:	08000003 	stmdaeq	r0, {r0, r1}
    3b5c:	00000475 	andeq	r0, r0, r5, ror r4
    3b60:	0010cd16 	andseq	ip, r0, r6, lsl sp
    3b64:	24090800 	strcs	r0, [r9], #-2048	; 0xfffff800
    3b68:	0004ae08 	andeq	sl, r4, r8, lsl #28
    3b6c:	08260d00 	stmdaeq	r6!, {r8, sl, fp}
    3b70:	25090000 	strcs	r0, [r9, #-0]
    3b74:	0004ae18 	andeq	sl, r4, r8, lsl lr
    3b78:	f90d0000 			; <UNDEFINED> instruction: 0xf90d0000
    3b7c:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    3b80:	04ae0626 	strteq	r0, [lr], #1574	; 0x626
    3b84:	00040000 	andeq	r0, r4, r0
    3b88:	0486040a 	streq	r0, [r6], #1034	; 0x40a
    3b8c:	db030000 	blle	c3b94 <__ccfg+0xa3bec>
    3b90:	09000010 	stmdbeq	r0, {r4}
    3b94:	04861e29 	streq	r1, [r6], #3625	; 0xe29
    3b98:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
    3b9c:	09000011 	stmdbeq	r0, {r0, r4}
    3ba0:	04861e2a 	streq	r1, [r6], #3626	; 0xe2a
    3ba4:	020b0000 	andeq	r0, fp, #0
    3ba8:	36023f09 	strcc	r3, [r2], -r9, lsl #30
    3bac:	0c000005 	stceq	0, cr0, [r0], {5}
    3bb0:	00001182 	andeq	r1, r0, r2, lsl #3
    3bb4:	cd094009 	stcgt	0, cr4, [r9, #-36]	; 0xffffffdc
    3bb8:	02000000 	andeq	r0, r0, #0
    3bbc:	0c000f01 	stceq	15, cr0, [r0], {1}
    3bc0:	0000123b 	andeq	r1, r0, fp, lsr r2
    3bc4:	cd044109 	stfgts	f4, [r4, #-36]	; 0xffffffdc
    3bc8:	02000000 	andeq	r0, r0, #0
    3bcc:	0c000e01 	stceq	14, cr0, [r0], {1}
    3bd0:	000010fd 	strdeq	r1, [r0], -sp
    3bd4:	cd044209 	sfmgt	f4, 4, [r4, #-36]	; 0xffffffdc
    3bd8:	02000000 	andeq	r0, r0, #0
    3bdc:	0c000d01 	stceq	13, cr0, [r0], {1}
    3be0:	0000119b 	muleq	r0, fp, r1
    3be4:	cd044309 	stcgt	3, cr4, [r4, #-36]	; 0xffffffdc
    3be8:	02000000 	andeq	r0, r0, #0
    3bec:	0c000607 	stceq	6, cr0, [r0], {7}
    3bf0:	000011f7 	strdeq	r1, [r0], -r7
    3bf4:	cd044409 	cfstrsgt	mvf4, [r4, #-36]	; 0xffffffdc
    3bf8:	02000000 	andeq	r0, r0, #0
    3bfc:	0c000303 	stceq	3, cr0, [r0], {3}
    3c00:	00001174 	andeq	r1, r0, r4, ror r1
    3c04:	cd044509 	cfstr32gt	mvfx4, [r4, #-36]	; 0xffffffdc
    3c08:	02000000 	andeq	r0, r0, #0
    3c0c:	00000003 	andeq	r0, r0, r3
    3c10:	3d090217 	sfmcc	f0, 4, [r9, #-92]	; 0xffffffa4
    3c14:	00055609 	andeq	r5, r5, r9, lsl #12
    3c18:	03c21800 	biceq	r1, r2, #0, 16
    3c1c:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    3c20:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3c24:	00621900 	rsbeq	r1, r2, r0, lsl #18
    3c28:	cc044609 	stcgt	6, cr4, [r4], {9}
    3c2c:	00000004 	andeq	r0, r0, r4
    3c30:	000ffe03 	andeq	pc, pc, r3, lsl #28
    3c34:	03470900 	movteq	r0, #30976	; 0x7900
    3c38:	00000536 	andeq	r0, r0, r6, lsr r5
    3c3c:	50090817 	andpl	r0, r9, r7, lsl r8
    3c40:	00058405 	andeq	r8, r5, r5, lsl #8
    3c44:	121d1800 	andsne	r1, sp, #0, 16
    3c48:	51090000 	mrspl	r0, (UNDEF: 9)
    3c4c:	0004b410 	andeq	fp, r4, r0, lsl r4
    3c50:	113e1800 	teqne	lr, r0, lsl #16
    3c54:	52090000 	andpl	r0, r9, #0
    3c58:	0003550b 	andeq	r5, r3, fp, lsl #10
    3c5c:	2c160000 	ldccs	0, cr0, [r6], {-0}
    3c60:	0c000012 	stceq	0, cr0, [r0], {18}
    3c64:	b7084c09 	strlt	r4, [r8, -r9, lsl #24]
    3c68:	1a000005 	bne	3c84 <__exidx_end+0x104c>
    3c6c:	58090075 	stmdapl	r9, {r0, r2, r4, r5, r6}
    3c70:	00056207 	andeq	r6, r5, r7, lsl #4
    3c74:	fe0d0000 	cdp2	0, 0, cr0, cr13, cr0, {0}
    3c78:	09000011 	stmdbeq	r0, {r0, r4}
    3c7c:	00cd0763 	sbceq	r0, sp, r3, ror #14
    3c80:	0d080000 	stceq	0, cr0, [r8, #-0]
    3c84:	000011de 	ldrdeq	r1, [r0], -lr
    3c88:	56106809 	ldrpl	r6, [r0], -r9, lsl #16
    3c8c:	0a000005 	beq	3ca8 <__exidx_end+0x1070>
    3c90:	10e90300 	rscne	r0, r9, r0, lsl #6
    3c94:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    3c98:	0005841f 	andeq	r8, r5, pc, lsl r4
    3c9c:	090c0b00 	stmdbeq	ip, {r8, r9, fp}
    3ca0:	05e7097b 	strbeq	r0, [r7, #2427]!	; 0x97b
    3ca4:	320d0000 	andcc	r0, sp, #0
    3ca8:	09000011 	stmdbeq	r0, {r0, r4}
    3cac:	04c0117f 	strbeq	r1, [r0], #383	; 0x17f
    3cb0:	0d000000 	stceq	0, cr0, [r0, #-0]
    3cb4:	000011ca 	andeq	r1, r0, sl, asr #3
    3cb8:	56118309 	ldrpl	r8, [r1], -r9, lsl #6
    3cbc:	08000005 	stmdaeq	r0, {r0, r2}
    3cc0:	11640300 	cmnne	r4, r0, lsl #6
    3cc4:	92090000 	andls	r0, r9, #0
    3cc8:	0005c303 	andeq	ip, r5, r3, lsl #6
    3ccc:	027a1400 	rsbseq	r1, sl, #0, 8
    3cd0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    3cd4:	00f90e02 	rscseq	r0, r9, r2, lsl #28
    3cd8:	01010000 	mrseq	r0, (UNDEF: 1)
    3cdc:	0308081b 	movweq	r0, #34843	; 0x881b
    3ce0:	06290903 	strteq	r0, [r9], -r3, lsl #18
    3ce4:	001c0000 	andseq	r0, ip, r0
    3ce8:	08000032 	stmdaeq	r0, {r1, r4, r5}
    3cec:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    3cf0:	00000000 	andeq	r0, r0, r0
    3cf4:	0008dd1c 	andeq	sp, r8, ip, lsl sp
    3cf8:	03080800 	movweq	r0, #34816	; 0x8800
    3cfc:	00010a08 	andeq	r0, r1, r8, lsl #20
    3d00:	11000400 	tstne	r0, r0, lsl #8
    3d04:	00000326 	andeq	r0, r0, r6, lsr #6
    3d08:	03030908 	movweq	r0, #14600	; 0x3908
    3d0c:	00000602 	andeq	r0, r0, r2, lsl #12
    3d10:	0000181d 	andeq	r1, r0, sp, lsl r8
    3d14:	0b083000 	bleq	20fd1c <__ccfg+0x1efd74>
    3d18:	06990803 	ldreq	r0, [r9], r3, lsl #16
    3d1c:	981c0000 	ldmdals	ip, {}	; <UNPREDICTABLE>
    3d20:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    3d24:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    3d28:	00000000 	andeq	r0, r0, r0
    3d2c:	0006d91c 	andeq	sp, r6, ip, lsl r9
    3d30:	03150800 	tsteq	r5, #0, 16
    3d34:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3d38:	201c0200 	andscs	r0, ip, r0, lsl #4
    3d3c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    3d40:	e40b0316 	str	r0, [fp], #-790	; 0xfffffcea
    3d44:	04000002 	streq	r0, [r0], #-2
    3d48:	0006241c 	andeq	r2, r6, ip, lsl r4
    3d4c:	03170800 	tsteq	r7, #0, 16
    3d50:	00010a09 	andeq	r0, r1, r9, lsl #20
    3d54:	071c0800 	ldreq	r0, [ip, -r0, lsl #16]
    3d58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3d5c:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    3d60:	0c000006 	stceq	0, cr0, [r0], {6}
    3d64:	0005ad1c 	andeq	sl, r5, ip, lsl sp
    3d68:	03190800 	tsteq	r9, #0, 16
    3d6c:	0006a915 	andeq	sl, r6, r5, lsl r9
    3d70:	0f002c00 	svceq	0x00002c00
    3d74:	00000629 	andeq	r0, r0, r9, lsr #12
    3d78:	000006a9 	andeq	r0, r0, r9, lsr #13
    3d7c:	0000881e 	andeq	r8, r0, lr, lsl r8
    3d80:	0a000300 	beq	4988 <__exidx_end+0x1d50>
    3d84:	00063604 	andeq	r3, r6, r4, lsl #12
    3d88:	06ce1100 	strbeq	r1, [lr], r0, lsl #2
    3d8c:	1c080000 	stcne	0, cr0, [r8], {-0}
    3d90:	06361b03 	ldrteq	r1, [r6], -r3, lsl #22
    3d94:	ae140000 	cdpge	0, 1, cr0, cr4, cr0, {0}
    3d98:	08000006 	stmdaeq	r0, {r1, r2}
    3d9c:	cb14031e 	blgt	504a1c <__ccfg+0x4e4a74>
    3da0:	01000006 	tsteq	r0, r6
    3da4:	af040a01 	svcge	0x00040a01
    3da8:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    3dac:	00000460 	andeq	r0, r0, r0, ror #8
    3db0:	cd131d0a 	ldcgt	13, cr1, [r3, #-40]	; 0xffffffd8
    3db4:	01000000 	mrseq	r0, (UNDEF: 0)
    3db8:	01d20e01 	bicseq	r0, r2, r1, lsl #28
    3dbc:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    3dc0:	0000de1a 	andeq	sp, r0, sl, lsl lr
    3dc4:	0e010100 	adfeqs	f0, f1, f0
    3dc8:	00000709 	andeq	r0, r0, r9, lsl #14
    3dcc:	de241e0a 	cdple	14, 2, cr1, cr4, cr10, {0}
    3dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    3dd4:	07250e01 	streq	r0, [r5, -r1, lsl #28]!
    3dd8:	220a0000 	andcs	r0, sl, #0
    3ddc:	0006cb14 	andeq	ip, r6, r4, lsl fp
    3de0:	03010100 	movweq	r0, #4352	; 0x1100
    3de4:	00001076 	andeq	r1, r0, r6, ror r0
    3de8:	150f0e0b 	strne	r0, [pc, #-3595]	; 2fe5 <__exidx_end+0x3ad>
    3dec:	0a000007 	beq	3e10 <__exidx_end+0x11d8>
    3df0:	00071b04 	andeq	r1, r7, r4, lsl #22
    3df4:	81011500 	tsthi	r1, r0, lsl #10
    3df8:	30000000 	andcc	r0, r0, r0
    3dfc:	13000007 	movwne	r0, #7
    3e00:	00000081 	andeq	r0, r0, r1, lsl #1
    3e04:	00011613 	andeq	r1, r1, r3, lsl r6
    3e08:	400f0000 	andmi	r0, pc, r0
    3e0c:	40000007 	andmi	r0, r0, r7
    3e10:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3e14:	00000088 	andeq	r0, r0, r8, lsl #1
    3e18:	040a0007 	streq	r0, [sl], #-7
    3e1c:	000005e7 	andeq	r0, r0, r7, ror #11
    3e20:	00110a1f 	andseq	r0, r1, pc, lsl sl
    3e24:	150d0c00 	strne	r0, [sp, #-3072]	; 0xfffff400
    3e28:	00000730 	andeq	r0, r0, r0, lsr r7
    3e2c:	00000305 	andeq	r0, r0, r5, lsl #6
    3e30:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
    3e34:	68000007 	stmdavs	r0, {r0, r1, r2}
    3e38:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3e3c:	00000088 	andeq	r0, r0, r8, lsl #1
    3e40:	791f0002 	ldmdbvc	pc, {r1}	; <UNPREDICTABLE>
    3e44:	0c000011 	stceq	0, cr0, [r0], {17}
    3e48:	07581413 	smmlaeq	r8, r3, r4, r1
    3e4c:	03050000 	movweq	r0, #20480	; 0x5000
    3e50:	00000000 	andeq	r0, r0, r0
    3e54:	00078a0f 	andeq	r8, r7, pc, lsl #20
    3e58:	00078a00 	andeq	r8, r7, r0, lsl #20
    3e5c:	00881e00 	addeq	r1, r8, r0, lsl #28
    3e60:	00020000 	andeq	r0, r2, r0
    3e64:	04c0040a 	strbeq	r0, [r0], #1034	; 0x40a
    3e68:	c51f0000 	ldrgt	r0, [pc, #-0]	; 3e70 <__exidx_end+0x1238>
    3e6c:	0c000010 	stceq	0, cr0, [r0], {16}
    3e70:	077a1319 			; <UNDEFINED> instruction: 0x077a1319
    3e74:	03050000 	movweq	r0, #20480	; 0x5000
    3e78:	00000000 	andeq	r0, r0, r0
    3e7c:	0000810f 	andeq	r8, r0, pc, lsl #2
    3e80:	0007b200 	andeq	fp, r7, r0, lsl #4
    3e84:	00881e00 	addeq	r1, r8, r0, lsl #28
    3e88:	00020000 	andeq	r0, r2, r0
    3e8c:	00109d1f 	andseq	r9, r0, pc, lsl sp
    3e90:	0f1e0c00 	svceq	0x001e0c00
    3e94:	000007a2 	andeq	r0, r0, r2, lsr #15
    3e98:	00000305 	andeq	r0, r0, r5, lsl #6
    3e9c:	d40f0000 	strle	r0, [pc], #-0	; 3ea4 <__exidx_end+0x126c>
    3ea0:	d4000007 	strle	r0, [r0], #-7
    3ea4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3ea8:	00000088 	andeq	r0, r0, r8, lsl #1
    3eac:	040a0002 	streq	r0, [sl], #-2
    3eb0:	00000481 	andeq	r0, r0, r1, lsl #9
    3eb4:	0012241f 	andseq	r2, r2, pc, lsl r4
    3eb8:	1b230c00 	blne	8c6ec0 <__ccfg+0x8a6f18>
    3ebc:	000007c4 	andeq	r0, r0, r4, asr #15
    3ec0:	00000305 	andeq	r0, r0, r5, lsl #6
    3ec4:	01200000 			; <UNDEFINED> instruction: 0x01200000
    3ec8:	00001192 	muleq	r0, r2, r1
    3ecc:	01050d01 	tsteq	r5, r1, lsl #26
    3ed0:	00134401 	andseq	r4, r3, r1, lsl #8
    3ed4:	00134600 	andseq	r4, r3, r0, lsl #12
    3ed8:	219c0100 	orrscs	r0, ip, r0, lsl #2
    3edc:	0010ac01 	andseq	sl, r0, r1, lsl #24
    3ee0:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3ee4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3ef0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ef4:	00000863 	andeq	r0, r0, r3, ror #16
    3ef8:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3efc:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3f00:	0000812d 	andeq	r8, r0, sp, lsr #2
    3f04:	000fee00 	andeq	lr, pc, r0, lsl #28
    3f08:	114e2300 	mrsne	r2, SPSR_hyp
    3f0c:	00000000 	andeq	r0, r0, r0
    3f10:	07900000 	ldreq	r0, [r0, r0]
    3f14:	0a010000 	beq	43f1c <__ccfg+0x23f74>
    3f18:	60240905 	eorvs	r0, r4, r5, lsl #18
    3f1c:	0c000011 	stceq	0, cr0, [r0], {17}
    3f20:	25000010 	strcs	r0, [r0, #-16]
    3f24:	00000790 	muleq	r0, r0, r7
    3f28:	00116b26 	andseq	r6, r1, r6, lsr #22
    3f2c:	00101f00 	andseq	r1, r0, r0, lsl #30
    3f30:	11762600 	cmnne	r6, r0, lsl #12
    3f34:	103d0000 	eorsne	r0, sp, r0
    3f38:	00000000 	andeq	r0, r0, r0
    3f3c:	bf012700 	svclt	0x00012700
    3f40:	01000011 	tsteq	r0, r1, lsl r0
    3f44:	010104fa 	strdeq	r0, [r1, -sl]
	...
    3f50:	089d9c01 	ldmeq	sp, {r0, sl, fp, ip, pc}
    3f54:	70220000 	eorvc	r0, r2, r0
    3f58:	0100746b 	tsteq	r0, fp, ror #8
    3f5c:	163004fa 			; <UNDEFINED> instruction: 0x163004fa
    3f60:	67000001 	strvs	r0, [r0, -r1]
    3f64:	28000010 	stmdacs	r0, {r4}
    3f68:	fe010062 	cdp2	0, 0, cr0, cr1, cr2, {3}
    3f6c:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    3f70:	10850000 	addne	r0, r5, r0
    3f74:	0a000000 	beq	3f7c <__exidx_end+0x1344>
    3f78:	0005b704 	andeq	fp, r5, r4, lsl #14
    3f7c:	0c012100 	stfeqs	f2, [r1], {-0}
    3f80:	01000010 	tsteq	r0, r0, lsl r0
    3f84:	010104e9 	smlatteq	r1, r9, r4, r0
    3f88:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3f94:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    3f98:	70220000 	eorvc	r0, r2, r0
    3f9c:	01007968 	tsteq	r0, r8, ror #18
    3fa0:	812f04e9 	smulwthi	pc, r9, r4	; <UNPREDICTABLE>
    3fa4:	a3000000 	movwge	r0, #0
    3fa8:	28000010 	stmdacs	r0, {r4}
    3fac:	0100716f 	tsteq	r0, pc, ror #2
    3fb0:	8a0b04ed 	bhi	2c536c <__ccfg+0x2a53c4>
    3fb4:	c1000007 	tstgt	r0, r7
    3fb8:	28000010 	stmdacs	r0, {r4}
    3fbc:	ee010062 	cdp	0, 0, cr0, cr1, cr2, {3}
    3fc0:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    3fc4:	10d40000 	sbcsne	r0, r4, r0
    3fc8:	21000000 	mrscs	r0, (UNDEF: 0)
    3fcc:	00108001 	andseq	r8, r0, r1
    3fd0:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    3fd4:	01160101 	tsteq	r6, r1, lsl #2
	...
    3fe0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3fe4:	00000950 	andeq	r0, r0, r0, asr r9
    3fe8:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3fec:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    3ff0:	0000812f 	andeq	r8, r0, pc, lsr #2
    3ff4:	0010f300 	andseq	pc, r0, r0, lsl #6
    3ff8:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    3ffc:	d201006e 	andle	r0, r1, #110	; 0x6e
    4000:	04323904 	ldrteq	r3, [r2], #-2308	; 0xfffff6fc
    4004:	11110000 	tstne	r1, r0
    4008:	6f280000 	svcvs	0x00280000
    400c:	d7010071 	smlsdxle	r1, r1, r0, r0
    4010:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    4014:	112f0000 			; <UNDEFINED> instruction: 0x112f0000
    4018:	62280000 	eorvs	r0, r8, #0
    401c:	04d80100 	ldrbeq	r0, [r8], #256	; 0x100
    4020:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4024:	00114d00 	andseq	r4, r1, r0, lsl #26
    4028:	01210000 			; <UNDEFINED> instruction: 0x01210000
    402c:	00001212 	andeq	r1, r0, r2, lsl r2
    4030:	0104a101 	tsteq	r4, r1, lsl #2
    4034:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    4040:	eb9c0100 	bl	fe704448 <_estack+0xde6ff448>
    4044:	22000009 	andcs	r0, r0, #9
    4048:	00796870 	rsbseq	r6, r9, r0, ror r8
    404c:	2b04a101 	blcs	12c458 <__ccfg+0x10c4b0>
    4050:	00000081 	andeq	r0, r0, r1, lsl #1
    4054:	00001177 	andeq	r1, r0, r7, ror r1
    4058:	01007022 	tsteq	r0, r2, lsr #32
    405c:	163804a1 	ldrtne	r0, [r8], -r1, lsr #9
    4060:	ab000001 	blge	406c <__exidx_end+0x1434>
    4064:	22000011 	andcs	r0, r0, #17
    4068:	006e656c 	rsbeq	r6, lr, ip, ror #10
    406c:	3f04a101 	svccc	0x0004a101
    4070:	00000081 	andeq	r0, r0, r1, lsl #1
    4074:	000011df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    4078:	676c7029 	strbvs	r7, [ip, -r9, lsr #32]!
    407c:	04a60100 	strteq	r0, [r6], #256	; 0x100
    4080:	00008106 	andeq	r8, r0, r6, lsl #2
    4084:	73642800 	cmnvc	r4, #0, 16
    4088:	a6010070 			; <UNDEFINED> instruction: 0xa6010070
    408c:	00810b04 	addeq	r0, r1, r4, lsl #22
    4090:	12130000 	andsne	r0, r3, #0
    4094:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
    4098:	01007365 	tsteq	r0, r5, ror #6
    409c:	811004a6 	tsthi	r0, r6, lsr #9
    40a0:	02000000 	andeq	r0, r0, #0
    40a4:	612a5091 			; <UNDEFINED> instruction: 0x612a5091
    40a8:	a7010070 	smlsdxge	r1, r0, r0, r0
    40ac:	03550b04 	cmpeq	r5, #4, 22	; 0x1000
    40b0:	91020000 	mrsls	r0, (UNDEF: 2)
    40b4:	00632854 	rsbeq	r2, r3, r4, asr r8
    40b8:	0a04a801 	beq	12e0c4 <__ccfg+0x10e11c>
    40bc:	00000116 	andeq	r0, r0, r6, lsl r1
    40c0:	00001231 	andeq	r1, r0, r1, lsr r2
    40c4:	6b012100 	blvs	4c4cc <__ccfg+0x2c524>
    40c8:	01000010 	tsteq	r0, r0, lsl r0
    40cc:	01010487 	smlabbeq	r1, r7, r4, r0
    40d0:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    40dc:	0a4a9c01 	beq	12ab0e8 <__ccfg+0x128b140>
    40e0:	70220000 	eorvc	r0, r2, r0
    40e4:	01007968 	tsteq	r0, r8, ror #18
    40e8:	812b0487 	smlawbhi	fp, r7, r4, r0
    40ec:	44000000 	strmi	r0, [r0], #-0
    40f0:	22000012 	andcs	r0, r0, #18
    40f4:	01007370 	tsteq	r0, r0, ror r3
    40f8:	093a0487 	ldmdbeq	sl!, {r0, r1, r2, r7, sl}
    40fc:	62000007 	andvs	r0, r0, #7
    4100:	2b000012 	blcs	4150 <__exidx_end+0x1518>
    4104:	00000803 	andeq	r0, r0, r3, lsl #16
    4108:	42048701 	andmi	r8, r4, #262144	; 0x40000
    410c:	00000081 	andeq	r0, r0, r1, lsl #1
    4110:	00001280 	andeq	r1, r0, r0, lsl #5
    4114:	01007128 	tsteq	r0, r8, lsr #2
    4118:	8a0b048d 	bhi	2c5354 <__ccfg+0x2a53ac>
    411c:	9e000007 	cdpls	0, 0, cr0, cr0, cr7, {0}
    4120:	00000012 	andeq	r0, r0, r2, lsl r0
    4124:	1129012c 			; <UNDEFINED> instruction: 0x1129012c
    4128:	86010000 	strhi	r0, [r1], -r0
    412c:	16010103 	strne	r0, [r1], -r3, lsl #2
    4130:	01000001 	tsteq	r0, r1
    4134:	00000a91 	muleq	r0, r1, sl
    4138:	0016a72d 	andseq	sl, r6, sp, lsr #14
    413c:	03860100 	orreq	r0, r6, #0, 2
    4140:	0000812d 	andeq	r8, r0, sp, lsr #2
    4144:	73642e00 	cmnvc	r4, #0, 28
    4148:	86010070 			; <UNDEFINED> instruction: 0x86010070
    414c:	00813703 	addeq	r3, r1, r3, lsl #14
    4150:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    4154:	01007365 	tsteq	r0, r5, ror #6
    4158:	81400386 	smlalbbhi	r0, r0, r6, r3	; <UNPREDICTABLE>
    415c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    4160:	8a010070 	bhi	44328 <__ccfg+0x24380>
    4164:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    4168:	27000000 	strcs	r0, [r0, -r0]
    416c:	00105e01 	andseq	r5, r0, r1, lsl #28
    4170:	037f0100 	cmneq	pc, #0, 2
    4174:	00000101 	andeq	r0, r0, r1, lsl #2
    4178:	00000000 	andeq	r0, r0, r0
    417c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4180:	00000acb 	andeq	r0, r0, fp, asr #21
    4184:	01007022 	tsteq	r0, r2, lsr #32
    4188:	1632037f 			; <UNDEFINED> instruction: 0x1632037f
    418c:	cd000001 	stcgt	0, cr0, [r0, #-4]
    4190:	22000012 	andcs	r0, r0, #18
    4194:	00707364 	rsbseq	r7, r0, r4, ror #6
    4198:	39037f01 	stmdbcc	r3, {r0, r8, r9, sl, fp, ip, sp, lr}
    419c:	00000081 	andeq	r0, r0, r1, lsl #1
    41a0:	000012e0 	andeq	r1, r0, r0, ror #5
    41a4:	a3012100 	movwge	r2, #4352	; 0x1100
    41a8:	01000011 	tsteq	r0, r1, lsl r0
    41ac:	0101036b 	tsteq	r1, fp, ror #6
    41b0:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    41bc:	0b259c01 	bleq	96b1c8 <__ccfg+0x94b220>
    41c0:	70220000 	eorvc	r0, r2, r0
    41c4:	036b0100 	cmneq	fp, #0, 2
    41c8:	00011633 	andeq	r1, r1, r3, lsr r6
    41cc:	0012f300 	andseq	pc, r2, r0, lsl #6
    41d0:	12052b00 	andne	r2, r5, #0, 22
    41d4:	6b010000 	blvs	441dc <__ccfg+0x24234>
    41d8:	00813a03 	addeq	r3, r1, r3, lsl #20
    41dc:	13110000 	tstne	r1, #0
    41e0:	70280000 	eorvc	r0, r8, r0
    41e4:	6f010063 	svcvs	0x00010063
    41e8:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    41ec:	132f0000 			; <UNDEFINED> instruction: 0x132f0000
    41f0:	70290000 	eorvc	r0, r9, r0
    41f4:	6f010070 	svcvs	0x00010070
    41f8:	089d1103 	ldmeq	sp, {r0, r1, r8, ip}
    41fc:	27000000 	strcs	r0, [r0, -r0]
    4200:	0010b901 	andseq	fp, r0, r1, lsl #18
    4204:	03630100 	cmneq	r3, #0, 2
    4208:	00000101 	andeq	r0, r0, r1, lsl #2
    420c:	00000000 	andeq	r0, r0, r0
    4210:	9c010000 	stcls	0, cr0, [r1], {-0}
    4214:	00000b5f 	andeq	r0, r0, pc, asr fp
    4218:	01007022 	tsteq	r0, r2, lsr #32
    421c:	16310363 	ldrtne	r0, [r1], -r3, ror #6
    4220:	4d000001 	stcmi	0, cr0, [r0, #-4]
    4224:	22000013 	andcs	r0, r0, #19
    4228:	00796870 	rsbseq	r6, r9, r0, ror r8
    422c:	38036301 	stmdacc	r3, {r0, r8, r9, sp, lr}
    4230:	00000081 	andeq	r0, r0, r1, lsl #1
    4234:	0000136b 	andeq	r1, r0, fp, ror #6
    4238:	ae012700 	cdpge	7, 0, cr2, cr1, cr0, {0}
    423c:	01000011 	tsteq	r0, r1, lsl r0
    4240:	0101035a 	tsteq	r1, sl, asr r3
	...
    424c:	0b999c01 	bleq	fe66b258 <_estack+0xde666258>
    4250:	70220000 	eorvc	r0, r2, r0
    4254:	035a0100 	cmpeq	sl, #0, 2
    4258:	00011631 	andeq	r1, r1, r1, lsr r6
    425c:	00138900 	andseq	r8, r3, r0, lsl #18
    4260:	65732200 	ldrbvs	r2, [r3, #-512]!	; 0xfffffe00
    4264:	5a010073 	bpl	44438 <__ccfg+0x24490>
    4268:	00813803 	addeq	r3, r1, r3, lsl #16
    426c:	13a70000 			; <UNDEFINED> instruction: 0x13a70000
    4270:	2c000000 	stccs	0, cr0, [r0], {-0}
    4274:	00124401 	andseq	r4, r2, r1, lsl #8
    4278:	03520100 	cmpeq	r2, #0, 2
    427c:	00810101 	addeq	r0, r1, r1, lsl #2
    4280:	d5010000 	strle	r0, [r1, #-0]
    4284:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    4288:	00796870 	rsbseq	r6, r9, r0, ror r8
    428c:	2d035201 	sfmcs	f5, 4, [r3, #-4]
    4290:	00000081 	andeq	r0, r0, r1, lsl #1
    4294:	74706f2e 	ldrbtvc	r6, [r0], #-3886	; 0xfffff0d2
    4298:	03520100 	cmpeq	r2, #0, 2
    429c:	00008136 	andeq	r8, r0, r6, lsr r1
    42a0:	72612e00 	rsbvc	r2, r1, #0, 28
    42a4:	52010067 	andpl	r0, r1, #103	; 0x67
    42a8:	01164303 	tsteq	r6, r3, lsl #6
    42ac:	21000000 	mrscs	r0, (UNDEF: 0)
    42b0:	00101701 	andseq	r1, r0, r1, lsl #14
    42b4:	03330100 	teqeq	r3, #0, 2
    42b8:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    42c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    42c8:	00000c3e 	andeq	r0, r0, lr, lsr ip
    42cc:	00646622 	rsbeq	r6, r4, r2, lsr #12
    42d0:	2c033301 	stccs	3, cr3, [r3], {1}
    42d4:	00000081 	andeq	r0, r0, r1, lsl #1
    42d8:	000013c5 	andeq	r1, r0, r5, asr #7
    42dc:	74706f22 	ldrbtvc	r6, [r0], #-3874	; 0xfffff0de
    42e0:	03330100 	teqeq	r3, #0, 2
    42e4:	00008134 	andeq	r8, r0, r4, lsr r1
    42e8:	00140400 	andseq	r0, r4, r0, lsl #8
    42ec:	72612200 	rsbvc	r2, r1, #0, 4
    42f0:	33010067 	movwcc	r0, #4199	; 0x1067
    42f4:	01164103 	tsteq	r6, r3, lsl #2
    42f8:	142d0000 	strtne	r0, [sp], #-0
    42fc:	002f0000 	eoreq	r0, pc, r0
    4300:	00000000 	andeq	r0, r0, r0
    4304:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4308:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    430c:	07d41503 	ldrbeq	r1, [r4, r3, lsl #10]
    4310:	14560000 	ldrbne	r0, [r6], #-0
    4314:	00000000 	andeq	r0, r0, r0
    4318:	10940127 	addsne	r0, r4, r7, lsr #2
    431c:	2b010000 	blcs	44324 <__ccfg+0x2437c>
    4320:	00010103 	andeq	r0, r1, r3, lsl #2
    4324:	00000000 	andeq	r0, r0, r0
    4328:	01000000 	mrseq	r0, (UNDEF: 0)
    432c:	000c679c 	muleq	ip, ip, r7
    4330:	00702200 	rsbseq	r2, r0, r0, lsl #4
    4334:	2e032b01 	vmlacs.f64	d2, d3, d1
    4338:	00000116 	andeq	r0, r0, r6, lsl r1
    433c:	00001469 	andeq	r1, r0, r9, ror #8
    4340:	50012100 	andpl	r2, r1, r0, lsl #2
    4344:	01000011 	tsteq	r0, r1, lsl r0
    4348:	0101031a 	tsteq	r1, sl, lsl r3
    434c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    4358:	0cc19c01 	stcleq	12, cr9, [r1], {1}
    435c:	70220000 	eorvc	r0, r2, r0
    4360:	031a0100 	tsteq	sl, #0, 2
    4364:	0001162e 	andeq	r1, r1, lr, lsr #12
    4368:	00148700 	andseq	r8, r4, r0, lsl #14
    436c:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    4370:	1a010066 	bne	44510 <__ccfg+0x24568>
    4374:	02593d03 	subseq	r3, r9, #3, 26	; 0xc0
    4378:	14a50000 	strtne	r0, [r5], #0
    437c:	6c220000 	stcvs	0, cr0, [r2], #-0
    4380:	01006e65 	tsteq	r0, r5, ror #28
    4384:	8146031a 	cmphi	r6, sl, lsl r3
    4388:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    438c:	29000014 	stmdbcs	r0, {r2, r4}
    4390:	1e010062 	cdpne	0, 0, cr0, cr1, cr2, {3}
    4394:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    4398:	21000000 	mrscs	r0, (UNDEF: 0)
    439c:	00118901 	andseq	r8, r1, r1, lsl #18
    43a0:	03080100 	movweq	r0, #33024	; 0x8100
    43a4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    43b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    43b4:	00000d1b 	andeq	r0, r0, fp, lsl sp
    43b8:	01007022 	tsteq	r0, r2, lsr #32
    43bc:	162d0308 	strtne	r0, [sp], -r8, lsl #6
    43c0:	d6000001 	strle	r0, [r0], -r1
    43c4:	22000014 	andcs	r0, r0, #20
    43c8:	00667562 	rsbeq	r7, r6, r2, ror #10
    43cc:	36030801 	strcc	r0, [r3], -r1, lsl #16
    43d0:	00000d1b 	andeq	r0, r0, fp, lsl sp
    43d4:	000014f4 	strdeq	r1, [r0], -r4
    43d8:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    43dc:	03080100 	movweq	r0, #33024	; 0x8100
    43e0:	0000813f 	andeq	r8, r0, pc, lsr r1
    43e4:	00151200 	andseq	r1, r5, r0, lsl #4
    43e8:	00622900 	rsbeq	r2, r2, r0, lsl #18
    43ec:	0c030c01 	stceq	12, cr0, [r3], {1}
    43f0:	0000089d 	muleq	r0, sp, r8
    43f4:	e3040a00 	movw	r0, #18944	; 0x4a00
    43f8:	21000000 	mrscs	r0, (UNDEF: 0)
    43fc:	00114701 	andseq	r4, r1, r1, lsl #14
    4400:	02cd0100 	sbceq	r0, sp, #0, 2
    4404:	01160101 	tsteq	r6, r1, lsl #2
	...
    4410:	9c010000 	stcls	0, cr0, [r1], {-0}
    4414:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    4418:	0000402b 	andeq	r4, r0, fp, lsr #32
    441c:	02cd0100 	sbceq	r0, sp, #0, 2
    4420:	0000cd2e 	andeq	ip, r0, lr, lsr #26
    4424:	00153000 	andseq	r3, r5, r0
    4428:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    442c:	02cd0100 	sbceq	r0, sp, #0, 2
    4430:	00008139 	andeq	r8, r0, r9, lsr r1
    4434:	00154e00 	andseq	r4, r5, r0, lsl #28
    4438:	11fe2b00 	mvnsne	r2, r0, lsl #22
    443c:	cd010000 	stcgt	0, cr0, [r1, #-0]
    4440:	00814102 	addeq	r4, r1, r2, lsl #2
    4444:	15770000 	ldrbne	r0, [r7, #-0]!
    4448:	75220000 	strvc	r0, [r2, #-0]!
    444c:	01006772 	tsteq	r0, r2, ror r7
    4450:	c11102ce 	tstgt	r1, lr, asr #5
    4454:	c1000000 	mrsgt	r0, (UNDEF: 0)
    4458:	28000015 	stmdacs	r0, {r0, r2, r4}
    445c:	cf010062 	svcgt	0x00010062
    4460:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    4464:	15d40000 	ldrbne	r0, [r4]
    4468:	39300000 	ldmdbcc	r0!, {}	; <UNPREDICTABLE>
    446c:	01000011 	tsteq	r0, r1, lsl r0
    4470:	550b02d0 	strpl	r0, [fp, #-720]	; 0xfffffd30
    4474:	02000003 	andeq	r0, r0, #3
    4478:	732a6491 			; <UNDEFINED> instruction: 0x732a6491
    447c:	02d10100 	sbcseq	r0, r1, #0, 2
    4480:	0007400d 	andeq	r4, r7, sp
    4484:	28570100 	ldmdacs	r7, {r8}^
    4488:	00646965 	rsbeq	r6, r4, r5, ror #18
    448c:	0602d201 	streq	sp, [r2], -r1, lsl #4
    4490:	00000081 	andeq	r0, r0, r1, lsl #1
    4494:	000015f2 	strdeq	r1, [r0], -r2
    4498:	16012100 	strne	r2, [r1], -r0, lsl #2
    449c:	01000011 	tsteq	r0, r1, lsl r0
    44a0:	010102a4 	smlatbeq	r1, r4, r2, r0
    44a4:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    44b0:	0e729c01 	cdpeq	12, 7, cr9, cr2, cr1, {0}
    44b4:	66220000 	strtvs	r0, [r2], -r0
    44b8:	a4010064 	strge	r0, [r1], #-100	; 0xffffff9c
    44bc:	00812a02 	addeq	r2, r1, r2, lsl #20
    44c0:	161b0000 	ldrne	r0, [fp], -r0
    44c4:	052b0000 	streq	r0, [fp, #-0]!
    44c8:	01000012 	tsteq	r0, r2, lsl r0
    44cc:	813202a4 	teqhi	r2, r4, lsr #5
    44d0:	4f000000 	svcmi	0x00000000
    44d4:	28000016 	stmdacs	r0, {r1, r2, r4}
    44d8:	a8010073 	stmdage	r1, {r0, r1, r4, r5, r6}
    44dc:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    44e0:	16830000 	strne	r0, [r3], r0
    44e4:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    44e8:	a9010071 	stmdbge	r1, {r0, r4, r5, r6}
    44ec:	00810602 	addeq	r0, r1, r2, lsl #12
    44f0:	16e80000 	strbtne	r0, [r8], r0
    44f4:	72280000 	eorvc	r0, r8, #0
    44f8:	aa010071 	bge	446c4 <__ccfg+0x2471c>
    44fc:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    4500:	17060000 	strne	r0, [r6, -r0]
    4504:	62280000 	eorvs	r0, r8, #0
    4508:	02ab0100 	adceq	r0, fp, #0, 2
    450c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4510:	00172400 	andseq	r2, r7, r0, lsl #8
    4514:	11043100 	mrsne	r3, (UNDEF: 20)
    4518:	c0010000 	andgt	r0, r1, r0
    451c:	00000102 	andeq	r0, r0, r2, lsl #2
    4520:	4e320000 	cdpmi	0, 3, cr0, cr2, cr0, {0}
    4524:	00000011 	andeq	r0, r0, r1, lsl r0
    4528:	00000000 	andeq	r0, r0, r0
    452c:	01000000 	mrseq	r0, (UNDEF: 0)
    4530:	330a02bb 	movwcc	r0, #41659	; 0xa2bb
    4534:	00001160 	andeq	r1, r0, r0, ror #2
    4538:	00116b26 	andseq	r6, r1, r6, lsr #22
    453c:	00174d00 	andseq	r4, r7, r0, lsl #26
    4540:	11762600 	cmnne	r6, r0, lsl #12
    4544:	17600000 	strbne	r0, [r0, -r0]!
    4548:	00000000 	andeq	r0, r0, r0
    454c:	0fef0121 	svceq	0x00ef0121
    4550:	7d010000 	stcvc	0, cr0, [r1, #-0]
    4554:	81010102 	tsthi	r1, r2, lsl #2
	...
    4560:	01000000 	mrseq	r0, (UNDEF: 0)
    4564:	000eef9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    4568:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    456c:	027d0100 	rsbseq	r0, sp, #0, 2
    4570:	0000812a 	andeq	r8, r0, sl, lsr #2
    4574:	00177300 	andseq	r7, r7, r0, lsl #6
    4578:	12052b00 	andne	r2, r5, #0, 22
    457c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    4580:	00813202 	addeq	r3, r1, r2, lsl #4
    4584:	17a70000 	strne	r0, [r7, r0]!
    4588:	73280000 			; <UNDEFINED> instruction: 0x73280000
    458c:	02810100 	addeq	r0, r1, #0, 2
    4590:	0007400d 	andeq	r4, r7, sp
    4594:	0017d000 	andseq	sp, r7, r0
    4598:	716e2800 	cmnvc	lr, r0, lsl #16
    459c:	02820100 	addeq	r0, r2, #0, 2
    45a0:	00008106 	andeq	r8, r0, r6, lsl #2
    45a4:	00183500 	andseq	r3, r8, r0, lsl #10
    45a8:	71722800 	cmnvc	r2, r0, lsl #16
    45ac:	02830100 	addeq	r0, r3, #0, 2
    45b0:	00078a0b 	andeq	r8, r7, fp, lsl #20
    45b4:	00185300 	andseq	r5, r8, r0, lsl #6
    45b8:	00622800 	rsbeq	r2, r2, r0, lsl #16
    45bc:	0c028401 	cfstrseq	mvf8, [r2], {1}
    45c0:	0000089d 	muleq	r0, sp, r8
    45c4:	0000187c 	andeq	r1, r0, ip, ror r8
    45c8:	0a012100 	beq	4c9d0 <__ccfg+0x2ca28>
    45cc:	01000012 	tsteq	r0, r2, lsl r0
    45d0:	01010256 	tsteq	r1, r6, asr r2
    45d4:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    45e0:	0f5c9c01 	svceq	0x005c9c01
    45e4:	402b0000 	eormi	r0, fp, r0
    45e8:	01000000 	mrseq	r0, (UNDEF: 0)
    45ec:	cd2d0256 	sfmgt	f0, 4, [sp, #-344]!	; 0xfffffea8
    45f0:	b0000000 	andlt	r0, r0, r0
    45f4:	22000018 	andcs	r0, r0, #24
    45f8:	01006466 	tsteq	r0, r6, ror #8
    45fc:	81380256 	teqhi	r8, r6, asr r2
    4600:	c3000000 	movwgt	r0, #0
    4604:	28000018 	stmdacs	r0, {r3, r4}
    4608:	5d010070 	stcpl	0, cr0, [r1, #-448]	; 0xfffffe40
    460c:	01160a02 	tsteq	r6, r2, lsl #20
    4610:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    4614:	62280000 	eorvs	r0, r8, #0
    4618:	025e0100 	subseq	r0, lr, #0, 2
    461c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4620:	00191500 	andseq	r1, r9, r0, lsl #10
    4624:	71722800 	cmnvc	r2, r0, lsl #16
    4628:	025f0100 	subseq	r0, pc, #0, 2
    462c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    4630:	00193e00 	andseq	r3, r9, r0, lsl #28
    4634:	01210000 			; <UNDEFINED> instruction: 0x01210000
    4638:	000011d5 	ldrdeq	r1, [r0], -r5
    463c:	01024a01 	tsteq	r2, r1, lsl #20
    4640:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    464c:	999c0100 	ldmibls	ip, {r8}
    4650:	2200000f 	andcs	r0, r0, #15
    4654:	0064726f 	rsbeq	r7, r4, pc, ror #4
    4658:	29024a01 	stmdbcs	r2, {r0, r9, fp, lr}
    465c:	00000081 	andeq	r0, r0, r1, lsl #1
    4660:	00001978 	andeq	r1, r0, r8, ror r9
    4664:	006c7034 	rsbeq	r7, ip, r4, lsr r0
    4668:	3f024a01 	svccc	0x00024a01
    466c:	000007d4 	ldrdeq	r0, [r0], -r4
    4670:	21005101 	tstcs	r0, r1, lsl #2
    4674:	00115a01 	andseq	r5, r1, r1, lsl #20
    4678:	02290100 	eoreq	r0, r9, #0, 2
    467c:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    4688:	9c010000 	stcls	0, cr0, [r1], {-0}
    468c:	00000ff6 	strdeq	r0, [r0], -r6
    4690:	0000402b 	andeq	r4, r0, fp, lsr #32
    4694:	02290100 	eoreq	r0, r9, #0, 2
    4698:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    469c:	00199600 	andseq	r9, r9, r0, lsl #12
    46a0:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    46a4:	02290100 	eoreq	r0, r9, #0, 2
    46a8:	00008136 	andeq	r8, r0, r6, lsr r1
    46ac:	0019b400 	andseq	fp, r9, r0, lsl #8
    46b0:	00732800 	rsbseq	r2, r3, r0, lsl #16
    46b4:	0d022b01 	vstreq	d2, [r2, #-4]
    46b8:	00000740 	andeq	r0, r0, r0, asr #14
    46bc:	000019fe 	strdeq	r1, [r0], -lr
    46c0:	01006228 	tsteq	r0, r8, lsr #4
    46c4:	9d0c022c 	sfmls	f0, 4, [ip, #-176]	; 0xffffff50
    46c8:	11000008 	tstne	r0, r8
    46cc:	0000001a 	andeq	r0, r0, sl, lsl r0
    46d0:	108b0121 	addne	r0, fp, r1, lsr #2
    46d4:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    46d8:	81010101 	tsthi	r1, r1, lsl #2
	...
    46e4:	01000000 	mrseq	r0, (UNDEF: 0)
    46e8:	0010839c 	mulseq	r0, ip, r3
    46ec:	00402b00 	subeq	r2, r0, r0, lsl #22
    46f0:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    46f4:	00cd2a01 	sbceq	r2, sp, r1, lsl #20
    46f8:	1a240000 	bne	904700 <__ccfg+0x8e4758>
    46fc:	70220000 	eorvc	r0, r2, r0
    4700:	01007968 	tsteq	r0, r8, ror #18
    4704:	813501f6 	teqhi	r5, r6	; <illegal shifter operand>
    4708:	4d000000 	stcmi	0, cr0, [r0, #-0]
    470c:	2b00001a 	blcs	477c <__exidx_end+0x1b44>
    4710:	000011ba 			; <UNDEFINED> instruction: 0x000011ba
    4714:	3e01f601 	cfmadd32cc	mvax0, mvfx15, mvfx1, mvfx1
    4718:	00000081 	andeq	r0, r0, r1, lsl #1
    471c:	00001aa2 	andeq	r1, r0, r2, lsr #21
    4720:	64662835 	strbtvs	r2, [r6], #-2101	; 0xfffff7cb
    4724:	01f80100 	mvnseq	r0, r0, lsl #2
    4728:	00008106 	andeq	r8, r0, r6, lsl #2
    472c:	001ada00 	andseq	sp, sl, r0, lsl #20
    4730:	10f83600 	rscsne	r3, r8, r0, lsl #12
    4734:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    4738:	05560a01 	ldrbeq	r0, [r6, #-2561]	; 0xfffff5ff
    473c:	73280000 			; <UNDEFINED> instruction: 0x73280000
    4740:	01fa0100 	mvnseq	r0, r0, lsl #2
    4744:	0007400d 	andeq	r4, r7, sp
    4748:	001af800 	andseq	pc, sl, r0, lsl #16
    474c:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    4750:	01fc0100 	mvnseq	r0, r0, lsl #2
    4754:	0000b50b 	andeq	fp, r0, fp, lsl #10
    4758:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    475c:	20012700 	andcs	r2, r1, r0, lsl #14
    4760:	01000011 	tsteq	r0, r1, lsl r0
    4764:	0101013b 	tsteq	r1, fp, lsr r1
	...
    4770:	10bb9c01 	adcsne	r9, fp, r1, lsl #24
    4774:	70220000 	eorvc	r0, r2, r0
    4778:	013b0100 	teqeq	fp, r0, lsl #2
    477c:	0001162e 	andeq	r1, r1, lr, lsr #12
    4780:	001b4200 	andseq	r4, fp, r0, lsl #4
    4784:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4788:	0c014101 	stfeqs	f4, [r1], {1}
    478c:	0000089d 	muleq	r0, sp, r8
    4790:	00001b6b 	andeq	r1, r0, fp, ror #22
    4794:	70613700 	rsbvc	r3, r1, r0, lsl #14
    4798:	14010062 	strne	r0, [r1], #-98	; 0xffffff9e
    479c:	9d010101 	stflss	f0, [r1, #-4]
    47a0:	00000008 	andeq	r0, r0, r8
    47a4:	00000000 	andeq	r0, r0, r0
    47a8:	01000000 	mrseq	r0, (UNDEF: 0)
    47ac:	0011029c 	mulseq	r1, ip, r2
    47b0:	16a72b00 	strtne	r2, [r7], r0, lsl #22
    47b4:	14010000 	strne	r0, [r1], #-0
    47b8:	00cd2b01 	sbceq	r2, sp, r1, lsl #22
    47bc:	1b9f0000 	blne	fe7c47c4 <_estack+0xde7bf7c4>
    47c0:	702a0000 	eorvc	r0, sl, r0
    47c4:	01190100 	tsteq	r9, r0, lsl #2
    47c8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    47cc:	29500100 	ldmdbcs	r0, {r8}^
    47d0:	01007363 	tsteq	r0, r3, ror #6
    47d4:	cd07011a 	stfgts	f0, [r7, #-104]	; 0xffffff98
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	706c7238 	rsbvc	r7, ip, r8, lsr r2
    47e0:	01040100 	mrseq	r0, (UNDEF: 20)
    47e4:	00000101 	andeq	r0, r0, r1, lsl #2
    47e8:	00000000 	andeq	r0, r0, r0
    47ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    47f0:	0000112a 	andeq	r1, r0, sl, lsr #2
    47f4:	01007022 	tsteq	r0, r2, lsr #32
    47f8:	9d2b0104 	stflss	f0, [fp, #-16]!
    47fc:	b2000008 	andlt	r0, r0, #8
    4800:	0000001b 	andeq	r0, r0, fp, lsl r0
    4804:	00106339 	andseq	r6, r0, r9, lsr r3
    4808:	01e00100 	mvneq	r0, r0, lsl #2
    480c:	114e0101 	cmpne	lr, r1, lsl #2
    4810:	703a0000 	eorsvc	r0, sl, r0
    4814:	2fe00100 	svccs	0x00e00100
    4818:	0000089d 	muleq	r0, sp, r8
    481c:	0076643a 	rsbseq	r6, r6, sl, lsr r4
    4820:	8136e001 	teqhi	r6, r1
    4824:	00000000 	andeq	r0, r0, r0
    4828:	0010a63b 	andseq	sl, r0, fp, lsr r6
    482c:	01cf0100 	biceq	r0, pc, r0, lsl #2
    4830:	00008101 	andeq	r8, r0, r1, lsl #2
    4834:	11810100 	orrne	r0, r1, r0, lsl #2
    4838:	6f3a0000 	svcvs	0x003a0000
    483c:	cf010071 	svcgt	0x00010071
    4840:	00078a2b 	andeq	r8, r7, fp, lsr #20
    4844:	716e3c00 	cmnvc	lr, r0, lsl #24
    4848:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
    484c:	00000081 	andeq	r0, r0, r1, lsl #1
    4850:	0100623c 	tsteq	r0, ip, lsr r2
    4854:	089d0cd4 	ldmeq	sp, {r2, r4, r6, r7, sl, fp}
    4858:	3d000000 	stccc	0, cr0, [r0, #-0]
    485c:	00716e65 	rsbseq	r6, r1, r5, ror #28
    4860:	0101a801 	tsteq	r1, r1, lsl #16
    4864:	0011a401 	andseq	sl, r1, r1, lsl #8
    4868:	00713a00 	rsbseq	r3, r1, r0, lsl #20
    486c:	8a2aa801 	bhi	aae878 <__ccfg+0xa8e8d0>
    4870:	3a000007 	bcc	4894 <__exidx_end+0x1c5c>
    4874:	a8010070 	stmdage	r1, {r4, r5, r6}
    4878:	00089d37 	andeq	r9, r8, r7, lsr sp
    487c:	643d0000 	ldrtvs	r0, [sp], #-0
    4880:	01007165 	tsteq	r0, r5, ror #2
    4884:	0101017f 	tsteq	r1, pc, ror r1
    4888:	000011bd 			; <UNDEFINED> instruction: 0x000011bd
    488c:	0100703a 	tsteq	r0, sl, lsr r0
    4890:	089d2b7f 	ldmeq	sp, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
    4894:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4898:	000011a4 	andeq	r1, r0, r4, lsr #3
	...
    48a4:	11f29c01 	mvnsne	r9, r1, lsl #24
    48a8:	b23f0000 	eorslt	r0, pc, #0
    48ac:	01000011 	tsteq	r0, r1, lsl r0
    48b0:	11a44050 			; <UNDEFINED> instruction: 0x11a44050
	...
    48bc:	7f010000 	svcvc	0x00010000
    48c0:	11b22401 			; <UNDEFINED> instruction: 0x11b22401
    48c4:	1bc50000 	blne	ff1448cc <_estack+0xdf13f8cc>
    48c8:	00000000 	andeq	r0, r0, r0
    48cc:	0011813e 	andseq	r8, r1, lr, lsr r1
	...
    48d8:	3b9c0100 	blcc	fe704ce0 <_estack+0xde6ffce0>
    48dc:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    48e0:	0000118f 	andeq	r1, r0, pc, lsl #3
    48e4:	00001bd8 	ldrdeq	r1, [r0], -r8
    48e8:	00119924 	andseq	r9, r1, r4, lsr #18
    48ec:	001c0c00 	andseq	r0, ip, r0, lsl #24
    48f0:	11814000 	orrne	r4, r1, r0
	...
    48fc:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    4900:	118f2401 	orrne	r2, pc, r1, lsl #8
    4904:	1c400000 	marne	acc0, r0, r0
    4908:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    490c:	5e000011 	mcrpl	0, 0, r0, cr0, cr1, {0}
    4910:	0000001c 	andeq	r0, r0, ip, lsl r0
    4914:	112a3e00 			; <UNDEFINED> instruction: 0x112a3e00
	...
    4920:	9c010000 	stcls	0, cr0, [r1], {-0}
    4924:	00001280 	andeq	r1, r0, r0, lsl #5
    4928:	00113824 	andseq	r3, r1, r4, lsr #16
    492c:	001c7c00 	andseq	r7, ip, r0, lsl #24
    4930:	11422400 	cmpne	r2, r0, lsl #8
    4934:	1cd10000 	ldclne	0, cr0, [r1], {0}
    4938:	2a410000 	bcs	1044940 <__ccfg+0x1024998>
    493c:	00000011 	andeq	r0, r0, r1, lsl r0
    4940:	70000000 	andvc	r0, r0, r0
    4944:	01000007 	tsteq	r0, r7
    4948:	423301e0 	eorsmi	r0, r3, #224, 2	; 0x38
    494c:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    4950:	00001138 	andeq	r1, r0, r8, lsr r1
    4954:	00001ce4 	andeq	r1, r0, r4, ror #25
    4958:	993e0000 	ldmdbls	lr!, {}	; <UNPREDICTABLE>
    495c:	0000000b 	andeq	r0, r0, fp
    4960:	00000000 	andeq	r0, r0, r0
    4964:	01000000 	mrseq	r0, (UNDEF: 0)
    4968:	0012d89c 	mulseq	r2, ip, r8
    496c:	0bad2400 	bleq	feb4d974 <_estack+0xdeb48974>
    4970:	1d020000 	stcne	0, cr0, [r2, #-0]
    4974:	ba240000 	blt	90497c <__ccfg+0x8e49d4>
    4978:	2000000b 	andcs	r0, r0, fp
    497c:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4980:	00000bc7 	andeq	r0, r0, r7, asr #23
    4984:	00001d49 	andeq	r1, r0, r9, asr #26
    4988:	000b9932 	andeq	r9, fp, r2, lsr r9
	...
    4994:	03520100 	cmpeq	r2, #0, 2
    4998:	0bad3301 	bleq	feb515a4 <_estack+0xdeb4c5a4>
    499c:	ba240000 	blt	9049a4 <__ccfg+0x8e49fc>
    49a0:	7200000b 	andvc	r0, r0, #11
    49a4:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    49a8:	00000bc7 	andeq	r0, r0, r7, asr #23
    49ac:	00001d85 	andeq	r1, r0, r5, lsl #27
    49b0:	4a420000 	bmi	10849b8 <__ccfg+0x1064a10>
    49b4:	0000000a 	andeq	r0, r0, sl
    49b8:	00000000 	andeq	r0, r0, r0
    49bc:	01000000 	mrseq	r0, (UNDEF: 0)
    49c0:	0a5e249c 	beq	178dc38 <__ccfg+0x176dc90>
    49c4:	1d980000 	ldcne	0, cr0, [r8]
    49c8:	6b240000 	blvs	9049d0 <__ccfg+0x8e4a28>
    49cc:	ab00000a 	blge	49fc <__exidx_end+0x1dc4>
    49d0:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    49d4:	00000a78 	andeq	r0, r0, r8, ror sl
    49d8:	00001e0b 	andeq	r1, r0, fp, lsl #28
    49dc:	000a8526 	andeq	r8, sl, r6, lsr #10
    49e0:	001e5500 	andseq	r5, lr, r0, lsl #10
    49e4:	0a4a3200 	beq	12911ec <__ccfg+0x1271244>
	...
    49f0:	86010000 	strhi	r0, [r1], -r0
    49f4:	5e330103 	rsfpls	f0, f3, f3
    49f8:	2400000a 	strcs	r0, [r0], #-10
    49fc:	00000a6b 	andeq	r0, r0, fp, ror #20
    4a00:	00001e89 	andeq	r1, r0, r9, lsl #29
    4a04:	000a7833 	andeq	r7, sl, r3, lsr r8
    4a08:	0a854300 	beq	fe155610 <_estack+0xde150610>
    4a0c:	00000000 	andeq	r0, r0, r0
    4a10:	00017400 	andeq	r7, r1, r0, lsl #8
    4a14:	74000300 	strvc	r0, [r0], #-768	; 0xfffffd00
    4a18:	04000010 	streq	r0, [r0], #-16
    4a1c:	00007301 	andeq	r7, r0, r1, lsl #6
    4a20:	128c0c00 	addne	r0, ip, #0, 24
    4a24:	050c0000 	streq	r0, [ip, #-0]
    4a28:	08a00000 	stmiaeq	r0!, {}	; <UNPREDICTABLE>
    4a2c:	00000000 	andeq	r0, r0, r0
    4a30:	33f50000 	mvnscc	r0, #0
    4a34:	01020000 	mrseq	r0, (UNDEF: 2)
    4a38:	0006fd06 	andeq	pc, r6, r6, lsl #26
    4a3c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4a40:	000005fe 	strdeq	r0, [r0], -lr
    4a44:	c5050402 	strgt	r0, [r5, #-1026]	; 0xfffffbfe
    4a48:	02000004 	andeq	r0, r0, #4
    4a4c:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    4a50:	01020000 	mrseq	r0, (UNDEF: 2)
    4a54:	0006fb08 	andeq	pc, r6, r8, lsl #22
    4a58:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4a5c:	000007a7 	andeq	r0, r0, r7, lsr #15
    4a60:	00071403 	andeq	r1, r7, r3, lsl #8
    4a64:	19340200 	ldmdbne	r4!, {r9}
    4a68:	0000005b 	andeq	r0, r0, fp, asr r0
    4a6c:	fa070402 	blx	1c5a7c <__ccfg+0x1a5ad4>
    4a70:	02000002 	andeq	r0, r0, #2
    4a74:	02f50708 	rscseq	r0, r5, #8, 14	; 0x200000
    4a78:	04040000 	streq	r0, [r4], #-0
    4a7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4a80:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4a84:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4a88:	00820405 	addeq	r0, r2, r5, lsl #8
    4a8c:	77060000 	strvc	r0, [r6, -r0]
    4a90:	07000000 	streq	r0, [r0, -r0]
    4a94:	4f040501 	svcmi	0x00040501
    4a98:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4a9c:	0000127f 	andeq	r1, r0, pc, ror r2
    4aa0:	4f117f01 	svcmi	0x00117f01
    4aa4:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa8:	06230801 	strteq	r0, [r3], -r1, lsl #16
    4aac:	80010000 	andhi	r0, r1, r0
    4ab0:	00004f11 	andeq	r4, r0, r1, lsl pc
    4ab4:	08010100 	stmdaeq	r1, {r8}
    4ab8:	000012cf 	andeq	r1, r0, pc, asr #5
    4abc:	4f118101 	svcmi	0x00118101
    4ac0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ac4:	12ca0801 	sbcne	r0, sl, #65536	; 0x10000
    4ac8:	82010000 	andhi	r0, r1, #0
    4acc:	00004f11 	andeq	r4, r0, r1, lsl pc
    4ad0:	08010100 	stmdaeq	r1, {r8}
    4ad4:	00001286 	andeq	r1, r0, r6, lsl #5
    4ad8:	4f118301 	svcmi	0x00118301
    4adc:	01000000 	mrseq	r0, (UNDEF: 0)
    4ae0:	12510801 	subsne	r0, r1, #65536	; 0x10000
    4ae4:	84010000 	strhi	r0, [r1], #-0
    4ae8:	00004f11 	andeq	r4, r0, r1, lsl pc
    4aec:	09010100 	stmdbeq	r1, {r8}
    4af0:	0000007d 	andeq	r0, r0, sp, ror r0
    4af4:	000000ee 	andeq	r0, r0, lr, ror #1
    4af8:	0000700a 	andeq	r7, r0, sl
    4afc:	06003100 	streq	r3, [r0], -r0, lsl #2
    4b00:	000000de 	ldrdeq	r0, [r0], -lr
    4b04:	0012e80b 	andseq	lr, r2, fp, lsl #16
    4b08:	0f8e0100 	svceq	0x008e0100
    4b0c:	000000ee 	andeq	r0, r0, lr, ror #1
    4b10:	00030501 	andeq	r0, r3, r1, lsl #10
    4b14:	0c000000 	stceq	0, cr0, [r0], {-0}
    4b18:	000012d6 	ldrdeq	r1, [r0], -r6
    4b1c:	01012801 	tsteq	r1, r1, lsl #16
    4b20:	00134a01 	andseq	r4, r3, r1, lsl #20
    4b24:	00134c00 	andseq	r4, r3, r0, lsl #24
    4b28:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4b2c:	00001262 	andeq	r1, r0, r2, ror #4
    4b30:	01011601 	tsteq	r1, r1, lsl #12
    4b34:	00134801 	andseq	r4, r3, r1, lsl #16
    4b38:	00134a00 	andseq	r4, r3, r0, lsl #20
    4b3c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4b40:	00001272 	andeq	r1, r0, r2, ror r2
    4b44:	01010401 	tsteq	r1, r1, lsl #8
    4b48:	00134601 	andseq	r4, r3, r1, lsl #12
    4b4c:	00134800 	andseq	r4, r3, r0, lsl #16
    4b50:	0d9c0100 	ldfeqs	f0, [ip]
    4b54:	0012ff01 	andseq	pc, r2, r1, lsl #30
    4b58:	01d20100 	bicseq	r0, r2, r0, lsl #2
    4b5c:	00134c01 	andseq	r4, r3, r1, lsl #24
    4b60:	00139000 	andseq	r9, r3, r0
    4b64:	0e9c0100 	fmleqe	f0, f4, f0
    4b68:	00001259 	andeq	r1, r0, r9, asr r2
    4b6c:	840fd401 	strhi	sp, [pc], #-1025	; 4b74 <__exidx_end+0x1f3c>
    4b70:	9c000000 	stcls	0, cr0, [r0], {-0}
    4b74:	0e00001e 	mcreq	0, 0, r0, cr0, cr14, {0}
    4b78:	000012f5 	strdeq	r1, [r0], -r5
    4b7c:	841ad401 	ldrhi	sp, [sl], #-1025	; 0xfffffbff
    4b80:	ba000000 	blt	4b88 <__exidx_end+0x1f50>
    4b84:	0000001e 	andeq	r0, r0, lr, lsl r0
    4b88:	00053700 	andeq	r3, r5, r0, lsl #14
    4b8c:	39000300 	stmdbcc	r0, {r8, r9}
    4b90:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    4b94:	00007301 	andeq	r7, r0, r1, lsl #6
    4b98:	135f0c00 	cmpne	pc, #0, 24
    4b9c:	050c0000 	streq	r0, [ip, #-0]
    4ba0:	351c0000 	ldrcc	r0, [ip, #-0]
    4ba4:	01020000 	mrseq	r0, (UNDEF: 2)
    4ba8:	0006fd06 	andeq	pc, r6, r6, lsl #26
    4bac:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4bb0:	000005fe 	strdeq	r0, [r0], -lr
    4bb4:	c5050402 	strgt	r0, [r5, #-1026]	; 0xfffffbfe
    4bb8:	02000004 	andeq	r0, r0, #4
    4bbc:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    4bc0:	66030000 	strvs	r0, [r3], -r0
    4bc4:	01000006 	tsteq	r0, r6
    4bc8:	0045182e 	subeq	r1, r5, lr, lsr #16
    4bcc:	01020000 	mrseq	r0, (UNDEF: 2)
    4bd0:	0006fb08 	andeq	pc, r6, r8, lsl #22
    4bd4:	03350300 	teqeq	r5, #0, 6
    4bd8:	31010000 	mrscc	r0, (UNDEF: 1)
    4bdc:	00005819 	andeq	r5, r0, r9, lsl r8
    4be0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4be4:	000007a7 	andeq	r0, r0, r7, lsr #15
    4be8:	00071403 	andeq	r1, r7, r3, lsl #8
    4bec:	19340100 	ldmdbne	r4!, {r8}
    4bf0:	0000006b 	andeq	r0, r0, fp, rrx
    4bf4:	fa070402 	blx	1c5c04 <__ccfg+0x1a5c5c>
    4bf8:	02000002 	andeq	r0, r0, #2
    4bfc:	02f50708 	rscseq	r0, r5, #8, 14	; 0x200000
    4c00:	04040000 	streq	r0, [r4], #-0
    4c04:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4c08:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4c0c:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4c10:	2f025805 	svccs	0x00025805
    4c14:	0001af09 	andeq	sl, r1, r9, lsl #30
    4c18:	14b90600 	ldrtne	r0, [r9], #1536	; 0x600
    4c1c:	31020000 	mrscc	r0, (UNDEF: 2)
    4c20:	00005f10 	andeq	r5, r0, r0, lsl pc
    4c24:	ce060000 	cdpgt	0, 0, cr0, cr6, cr0, {0}
    4c28:	02000013 	andeq	r0, r0, #19
    4c2c:	005f1032 	subseq	r1, pc, r2, lsr r0	; <UNPREDICTABLE>
    4c30:	06040000 	streq	r0, [r4], -r0
    4c34:	00001396 	muleq	r0, r6, r3
    4c38:	5f103302 	svcpl	0x00103302
    4c3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4c40:	00134906 	andseq	r4, r3, r6, lsl #18
    4c44:	10340200 	eorsne	r0, r4, r0, lsl #4
    4c48:	0000005f 	andeq	r0, r0, pc, asr r0
    4c4c:	1308060c 	movwne	r0, #34316	; 0x860c
    4c50:	35020000 	strcc	r0, [r2, #-0]
    4c54:	00005f10 	andeq	r5, r0, r0, lsl pc
    4c58:	19061000 	stmdbne	r6, {ip}
    4c5c:	02000013 	andeq	r0, r0, #19
    4c60:	005f1036 	subseq	r1, pc, r6, lsr r0	; <UNPREDICTABLE>
    4c64:	06140000 	ldreq	r0, [r4], -r0
    4c68:	00001339 	andeq	r1, r0, r9, lsr r3
    4c6c:	5f103702 	svcpl	0x00103702
    4c70:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4c74:	00145e06 	andseq	r5, r4, r6, lsl #28
    4c78:	10380200 	eorsne	r0, r8, r0, lsl #4
    4c7c:	0000005f 	andeq	r0, r0, pc, asr r0
    4c80:	13ae061c 			; <UNDEFINED> instruction: 0x13ae061c
    4c84:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    4c88:	00005f10 	andeq	r5, r0, r0, lsl pc
    4c8c:	be062000 	cdplt	0, 0, cr2, cr6, cr0, {0}
    4c90:	02000013 	andeq	r0, r0, #19
    4c94:	005f103a 	subseq	r1, pc, sl, lsr r0	; <UNPREDICTABLE>
    4c98:	06240000 	strteq	r0, [r4], -r0
    4c9c:	00001484 	andeq	r1, r0, r4, lsl #9
    4ca0:	5f103b02 	svcpl	0x00103b02
    4ca4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4ca8:	00149406 	andseq	r9, r4, r6, lsl #8
    4cac:	103c0200 	eorsne	r0, ip, r0, lsl #4
    4cb0:	0000005f 	andeq	r0, r0, pc, asr r0
    4cb4:	132a062c 			; <UNDEFINED> instruction: 0x132a062c
    4cb8:	3d020000 	stccc	0, cr0, [r2, #-0]
    4cbc:	00005f10 	andeq	r5, r0, r0, lsl pc
    4cc0:	24063000 	strcs	r3, [r6], #-0
    4cc4:	02000014 	andeq	r0, r0, #20
    4cc8:	005f103e 	subseq	r1, pc, lr, lsr r0	; <UNPREDICTABLE>
    4ccc:	06340000 	ldrteq	r0, [r4], -r0
    4cd0:	000014c9 	andeq	r1, r0, r9, asr #9
    4cd4:	5f103f02 	svcpl	0x00103f02
    4cd8:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4cdc:	0013df06 	andseq	sp, r3, r6, lsl #30
    4ce0:	10400200 	subne	r0, r0, r0, lsl #4
    4ce4:	0000005f 	andeq	r0, r0, pc, asr r0
    4ce8:	13f3063c 	mvnsne	r0, #60, 12	; 0x3c00000
    4cec:	41020000 	mrsmi	r0, (UNDEF: 2)
    4cf0:	00005f10 	andeq	r5, r0, r0, lsl pc
    4cf4:	48064000 	stmdami	r6, {lr}
    4cf8:	02000014 	andeq	r0, r0, #20
    4cfc:	005f1042 	subseq	r1, pc, r2, asr #32
    4d00:	06440000 	strbeq	r0, [r4], -r0
    4d04:	00001434 	andeq	r1, r0, r4, lsr r4
    4d08:	5f104302 	svcpl	0x00104302
    4d0c:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4d10:	00146f06 	andseq	r6, r4, r6, lsl #30
    4d14:	10440200 	subne	r0, r4, r0, lsl #4
    4d18:	0000005f 	andeq	r0, r0, pc, asr r0
    4d1c:	14a4064c 	strtne	r0, [r4], #1612	; 0x64c
    4d20:	45020000 	strmi	r0, [r2, #-0]
    4d24:	00005f10 	andeq	r5, r0, r0, lsl pc
    4d28:	0e065000 	cdpeq	0, 0, cr5, cr6, cr0, {0}
    4d2c:	02000014 	andeq	r0, r0, #20
    4d30:	005f1046 	subseq	r1, pc, r6, asr #32
    4d34:	00540000 	subseq	r0, r4, r0
    4d38:	00140703 	andseq	r0, r4, r3, lsl #14
    4d3c:	03470200 	movteq	r0, #29184	; 0x7200
    4d40:	00000087 	andeq	r0, r0, r7, lsl #1
    4d44:	0001af07 	andeq	sl, r1, r7, lsl #30
    4d48:	13580800 	cmpne	r8, #0, 16
    4d4c:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    4d50:	0001bb15 	andeq	fp, r1, r5, lsl fp
    4d54:	03010100 	movweq	r0, #4352	; 0x1100
    4d58:	00002100 	andeq	r2, r0, r0, lsl #2
    4d5c:	4c122703 	ldcmi	7, cr2, [r2], {3}
    4d60:	07000000 	streq	r0, [r0, -r0]
    4d64:	000001ce 	andeq	r0, r0, lr, asr #3
    4d68:	0001ce09 	andeq	ip, r1, r9, lsl #28
    4d6c:	16c80300 	strbne	r0, [r8], r0, lsl #6
    4d70:	2b030000 	blcs	c4d78 <__ccfg+0xa4dd0>
    4d74:	00003912 	andeq	r3, r0, r2, lsl r9
    4d78:	01e40900 	mvneq	r0, r0, lsl #18
    4d7c:	51030000 	mrspl	r0, (UNDEF: 3)
    4d80:	03000021 	movweq	r0, #33	; 0x21
    4d84:	005f122c 	subseq	r1, pc, ip, lsr #4
    4d88:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
    4d8c:	03000001 	movweq	r0, #1
    4d90:	0000040d 	andeq	r0, r0, sp, lsl #8
    4d94:	5f122d03 	svcpl	0x00122d03
    4d98:	05000000 	streq	r0, [r0, #-0]
    4d9c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    4da0:	000002a0 	andeq	r0, r0, r0, lsr #5
    4da4:	0000230a 	andeq	r2, r0, sl, lsl #6
    4da8:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    4dac:	000001e4 	andeq	r0, r0, r4, ror #3
    4db0:	00070101 	andeq	r0, r7, r1, lsl #2
    4db4:	0004130a 	andeq	r1, r4, sl, lsl #6
    4db8:	03350300 	teqeq	r5, #0, 6
    4dbc:	000001e4 	andeq	r0, r0, r4, ror #3
    4dc0:	00060101 	andeq	r0, r6, r1, lsl #2
    4dc4:	0001cb0a 	andeq	ip, r1, sl, lsl #22
    4dc8:	03360300 	teqeq	r6, #0, 6
    4dcc:	000001e4 	andeq	r0, r0, r4, ror #3
    4dd0:	00050101 	andeq	r0, r5, r1, lsl #2
    4dd4:	00044d0a 	andeq	r4, r4, sl, lsl #26
    4dd8:	03370300 	teqeq	r7, #0, 6
    4ddc:	000001e4 	andeq	r0, r0, r4, ror #3
    4de0:	00040101 	andeq	r0, r4, r1, lsl #2
    4de4:	0006080a 	andeq	r0, r6, sl, lsl #16
    4de8:	03380300 	teqeq	r8, #0, 6
    4dec:	000001e4 	andeq	r0, r0, r4, ror #3
    4df0:	00000401 	andeq	r0, r0, r1, lsl #8
    4df4:	00041a06 	andeq	r1, r4, r6, lsl #20
    4df8:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    4dfc:	000001e4 	andeq	r0, r0, r4, ror #3
    4e00:	05760601 	ldrbeq	r0, [r6, #-1537]!	; 0xfffff9ff
    4e04:	3c030000 	stccc	0, cr0, [r3], {-0}
    4e08:	0001e403 	andeq	lr, r1, r3, lsl #8
    4e0c:	53060200 	movwpl	r0, #25088	; 0x6200
    4e10:	03000008 	movweq	r0, #8
    4e14:	01e4033d 	mvneq	r0, sp, lsr r3
    4e18:	06030000 	streq	r0, [r3], -r0
    4e1c:	0000058e 	andeq	r0, r0, lr, lsl #11
    4e20:	f5083f03 			; <UNDEFINED> instruction: 0xf5083f03
    4e24:	04000001 	streq	r0, [r0], #-1
    4e28:	02190300 	andseq	r0, r9, #0, 6
    4e2c:	41030000 	mrsmi	r0, (UNDEF: 3)
    4e30:	00021203 	andeq	r1, r2, r3, lsl #4
    4e34:	02a00900 	adceq	r0, r0, #0, 18
    4e38:	54080000 	strpl	r0, [r8], #-0
    4e3c:	03000004 	movweq	r0, #4
    4e40:	02ac1a43 	adceq	r1, ip, #274432	; 0x43000
    4e44:	01010000 	mrseq	r0, (UNDEF: 1)
    4e48:	00016708 	andeq	r6, r1, r8, lsl #14
    4e4c:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    4e50:	000002cd 	andeq	r0, r0, sp, asr #5
    4e54:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4e58:	000002d3 	ldrdeq	r0, [r0], -r3
    4e5c:	04080102 	streq	r0, [r8], #-258	; 0xfffffefe
    4e60:	07000007 	streq	r0, [r0, -r7]
    4e64:	000002d3 	ldrdeq	r0, [r0], -r3
    4e68:	00022208 	andeq	r2, r2, r8, lsl #4
    4e6c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    4e70:	000002cd 	andeq	r0, r0, sp, asr #5
    4e74:	08050101 	stmdaeq	r5, {r0, r8}
    4e78:	1e098f04 	cdpne	15, 0, cr8, cr9, cr4, {0}
    4e7c:	06000003 	streq	r0, [r0], -r3
    4e80:	000004cf 	andeq	r0, r0, pc, asr #9
    4e84:	5f0b9004 	svcpl	0x000b9004
    4e88:	00000000 	andeq	r0, r0, r0
    4e8c:	00098506 	andeq	r8, r9, r6, lsl #10
    4e90:	08910400 	ldmeq	r1, {sl}
    4e94:	000001ce 	andeq	r0, r0, lr, asr #3
    4e98:	01a00604 	lsleq	r0, r4, #12
    4e9c:	92040000 	andls	r0, r4, #0
    4ea0:	0001f010 	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    4ea4:	03000600 	movweq	r0, #1536	; 0x600
    4ea8:	00000751 	andeq	r0, r0, r1, asr r7
    4eac:	ed039304 	stc	3, cr9, [r3, #-16]
    4eb0:	0c000002 	stceq	0, cr0, [r0], {2}
    4eb4:	0000031e 	andeq	r0, r0, lr, lsl r3
    4eb8:	00000335 	andeq	r0, r0, r5, lsr r3
    4ebc:	9a08000d 	bls	204ef8 <__ccfg+0x1e4f50>
    4ec0:	04000005 	streq	r0, [r0], #-5
    4ec4:	032a0f99 			; <UNDEFINED> instruction: 0x032a0f99
    4ec8:	01010000 	mrseq	r0, (UNDEF: 1)
    4ecc:	91050105 	tstls	r5, r5, lsl #2
    4ed0:	00036d09 	andeq	r6, r3, r9, lsl #26
    4ed4:	05950a00 	ldreq	r0, [r5, #2560]	; 0xa00
    4ed8:	93050000 	movwls	r0, #20480	; 0x5000
    4edc:	0001e407 	andeq	lr, r1, r7, lsl #8
    4ee0:	01070100 	mrseq	r0, (UNDEF: 23)
    4ee4:	03b40a00 			; <UNDEFINED> instruction: 0x03b40a00
    4ee8:	94050000 	strls	r0, [r5], #-0
    4eec:	0001e403 	andeq	lr, r1, r3, lsl #8
    4ef0:	00010100 	andeq	r0, r1, r0, lsl #2
    4ef4:	1a030000 	bne	c4efc <__ccfg+0xa4f54>
    4ef8:	05000006 	streq	r0, [r0, #-6]
    4efc:	03430396 	movteq	r0, #13206	; 0x3396
    4f00:	6d070000 	stcvs	0, cr0, [r7, #-0]
    4f04:	0c000003 	stceq	0, cr0, [r0], {3}
    4f08:	00000379 	andeq	r0, r0, r9, ror r3
    4f0c:	00000389 	andeq	r0, r0, r9, lsl #7
    4f10:	7e07000d 	cdpvc	0, 0, cr0, cr7, cr13, {0}
    4f14:	08000003 	stmdaeq	r0, {r0, r1}
    4f18:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    4f1c:	89179c05 	ldmdbhi	r7, {r0, r2, sl, fp, ip, pc}
    4f20:	01000003 	tsteq	r0, r3
    4f24:	01da0c01 	bicseq	r0, sl, r1, lsl #24
    4f28:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
    4f2c:	000d0000 	andeq	r0, sp, r0
    4f30:	00039c07 	andeq	r9, r3, r7, lsl #24
    4f34:	03cd0800 	biceq	r0, sp, #0, 16
    4f38:	06060000 	streq	r0, [r6], -r0
    4f3c:	0003a713 	andeq	sl, r3, r3, lsl r7
    4f40:	08010100 	stmdaeq	r1, {r8}
    4f44:	00000558 	andeq	r0, r0, r8, asr r5
    4f48:	f50ec304 			; <UNDEFINED> instruction: 0xf50ec304
    4f4c:	01000001 	tsteq	r0, r1
    4f50:	071d0e01 	ldreq	r0, [sp, -r1, lsl #28]
    4f54:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    4f58:	03d51001 	bicseq	r1, r5, #1
    4f5c:	040b0000 	streq	r0, [fp], #-0
    4f60:	000003db 	ldrdeq	r0, [r0], -fp
    4f64:	03e7010f 	mvneq	r0, #-1073741821	; 0xc0000003
    4f68:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    4f6c:	00000001 	andeq	r0, r0, r1
    4f70:	0002da0c 	andeq	sp, r2, ip, lsl #20
    4f74:	0003f200 	andeq	pc, r3, r0, lsl #4
    4f78:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    4f7c:	000003e7 	andeq	r0, r0, r7, ror #7
    4f80:	0005c211 	andeq	ip, r5, r1, lsl r2
    4f84:	017f0700 	cmneq	pc, r0, lsl #14
    4f88:	0003f216 	andeq	pc, r3, r6, lsl r2	; <UNPREDICTABLE>
    4f8c:	11010100 	mrsne	r0, (UNDEF: 17)
    4f90:	0000029d 	muleq	r0, sp, r2
    4f94:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    4f98:	00000201 	andeq	r0, r0, r1, lsl #4
    4f9c:	7a110101 	bvc	4453a8 <__ccfg+0x425400>
    4fa0:	07000002 	streq	r0, [r0, -r2]
    4fa4:	f50e02d8 			; <UNDEFINED> instruction: 0xf50e02d8
    4fa8:	01000001 	tsteq	r0, r1
    4fac:	07081201 	streq	r1, [r8, -r1, lsl #4]
    4fb0:	4b090303 	blmi	245bc4 <__ccfg+0x225c1c>
    4fb4:	13000004 	movwne	r0, #4
    4fb8:	00003200 	andeq	r3, r0, r0, lsl #4
    4fbc:	07030707 	streq	r0, [r3, -r7, lsl #14]
    4fc0:	000001ce 	andeq	r0, r0, lr, asr #3
    4fc4:	08dd1300 	ldmeq	sp, {r8, r9, ip}^
    4fc8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    4fcc:	02060803 	andeq	r0, r6, #196608	; 0x30000
    4fd0:	00040000 	andeq	r0, r4, r0
    4fd4:	0003260e 	andeq	r2, r3, lr, lsl #12
    4fd8:	03090700 	movweq	r0, #38656	; 0x9700
    4fdc:	00042403 	andeq	r2, r4, r3, lsl #8
    4fe0:	00181400 	andseq	r1, r8, r0, lsl #8
    4fe4:	07300000 	ldreq	r0, [r0, -r0]!
    4fe8:	bb08030b 	bllt	205c1c <__ccfg+0x1e5c74>
    4fec:	13000004 	movwne	r0, #4
    4ff0:	00001798 	muleq	r0, r8, r7
    4ff4:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    4ff8:	000001ce 	andeq	r0, r0, lr, asr #3
    4ffc:	06d91300 	ldrbeq	r1, [r9], r0, lsl #6
    5000:	15070000 	strne	r0, [r7, #-0]
    5004:	01ce0803 	biceq	r0, lr, r3, lsl #16
    5008:	13020000 	movwne	r0, #8192	; 0x2000
    500c:	00000720 	andeq	r0, r0, r0, lsr #14
    5010:	0b031607 	bleq	ca834 <__ccfg+0xaa88c>
    5014:	000003c8 	andeq	r0, r0, r8, asr #7
    5018:	06241304 	strteq	r1, [r4], -r4, lsl #6
    501c:	17070000 	strne	r0, [r7, -r0]
    5020:	02060903 	andeq	r0, r6, #49152	; 0xc000
    5024:	13080000 	movwne	r0, #32768	; 0x8000
    5028:	00000007 	andeq	r0, r0, r7
    502c:	0f031807 	svceq	0x00031807
    5030:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    5034:	05ad130c 	streq	r1, [sp, #780]!	; 0x30c
    5038:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    503c:	04cb1503 	strbeq	r1, [fp], #1283	; 0x503
    5040:	002c0000 	eoreq	r0, ip, r0
    5044:	00044b0c 	andeq	r4, r4, ip, lsl #22
    5048:	0004cb00 	andeq	ip, r4, r0, lsl #22
    504c:	00801500 	addeq	r1, r0, r0, lsl #10
    5050:	00030000 	andeq	r0, r3, r0
    5054:	0458040b 	ldrbeq	r0, [r8], #-1035	; 0xfffffbf5
    5058:	ce0e0000 	cdpgt	0, 0, cr0, cr14, cr0, {0}
    505c:	07000006 	streq	r0, [r0, -r6]
    5060:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    5064:	11000004 	tstne	r0, r4
    5068:	000006ae 	andeq	r0, r0, lr, lsr #13
    506c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    5070:	000004ed 	andeq	r0, r0, sp, ror #9
    5074:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5078:	000004d1 	ldrdeq	r0, [r0], -r1
    507c:	00046008 	andeq	r6, r4, r8
    5080:	131d0800 	tstne	sp, #0, 16
    5084:	000001ce 	andeq	r0, r0, lr, asr #3
    5088:	d2080101 	andle	r0, r8, #1073741824	; 0x40000000
    508c:	08000001 	stmdaeq	r0, {r0}
    5090:	01df1a1e 	bicseq	r1, pc, lr, lsl sl	; <UNPREDICTABLE>
    5094:	01010000 	mrseq	r0, (UNDEF: 1)
    5098:	00070908 	andeq	r0, r7, r8, lsl #18
    509c:	241e0800 	ldrcs	r0, [lr], #-2048	; 0xfffff800
    50a0:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    50a4:	25080101 	strcs	r0, [r8, #-257]	; 0xfffffeff
    50a8:	08000007 	stmdaeq	r0, {r0, r1, r2}
    50ac:	04ed1422 	strbteq	r1, [sp], #1058	; 0x422
    50b0:	01010000 	mrseq	r0, (UNDEF: 1)
    50b4:	0001c016 	andeq	ip, r1, r6, lsl r0
    50b8:	02170900 	andseq	r0, r7, #0, 18
    50bc:	a803050e 	stmdage	r3, {r1, r2, r3, r8, sl}
    50c0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    50c4:	00000500 	andeq	r0, r0, r0, lsl #10
    50c8:	12580003 	subsne	r0, r8, #3
    50cc:	01040000 	mrseq	r0, (UNDEF: 4)
    50d0:	00000073 	andeq	r0, r0, r3, ror r0
    50d4:	0015100c 	andseq	r1, r5, ip
    50d8:	00050c00 	andeq	r0, r5, r0, lsl #24
    50dc:	0008f000 	andeq	pc, r8, r0
    50e0:	00000000 	andeq	r0, r0, r0
    50e4:	0036a500 	eorseq	sl, r6, r0, lsl #10
    50e8:	06010200 	streq	r0, [r1], -r0, lsl #4
    50ec:	000006fd 	strdeq	r0, [r0], -sp
    50f0:	fe050202 	cdp2	2, 0, cr0, cr5, cr2, {0}
    50f4:	02000005 	andeq	r0, r0, #5
    50f8:	04c50504 	strbeq	r0, [r5], #1284	; 0x504
    50fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5100:	0004c005 	andeq	ip, r4, r5
    5104:	06660300 	strbteq	r0, [r6], -r0, lsl #6
    5108:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    510c:	00004d18 	andeq	r4, r0, r8, lsl sp
    5110:	08010200 	stmdaeq	r1, {r9}
    5114:	000006fb 	strdeq	r0, [r0], -fp
    5118:	00033503 	andeq	r3, r3, r3, lsl #10
    511c:	19310400 	ldmdbne	r1!, {sl}
    5120:	00000060 	andeq	r0, r0, r0, rrx
    5124:	a7070202 	strge	r0, [r7, -r2, lsl #4]
    5128:	03000007 	movweq	r0, #7
    512c:	00000714 	andeq	r0, r0, r4, lsl r7
    5130:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    5134:	02000000 	andeq	r0, r0, #0
    5138:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    513c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5140:	0002f507 	andeq	pc, r2, r7, lsl #10
    5144:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5148:	00746e69 	rsbseq	r6, r4, r9, ror #28
    514c:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    5150:	03000002 	movweq	r0, #2
    5154:	00002100 	andeq	r2, r0, r0, lsl #2
    5158:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    515c:	05000000 	streq	r0, [r0, #-0]
    5160:	0000008f 	andeq	r0, r0, pc, lsl #1
    5164:	00008f06 	andeq	r8, r0, r6, lsl #30
    5168:	16c80300 	strbne	r0, [r8], r0, lsl #6
    516c:	2b050000 	blcs	145174 <__ccfg+0x1251cc>
    5170:	00004112 	andeq	r4, r0, r2, lsl r1
    5174:	00a50600 	adceq	r0, r5, r0, lsl #12
    5178:	a5050000 	strge	r0, [r5, #-0]
    517c:	03000000 	movweq	r0, #0
    5180:	00002151 	andeq	r2, r0, r1, asr r1
    5184:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    5188:	05000000 	streq	r0, [r0, #-0]
    518c:	000000bb 	strheq	r0, [r0], -fp
    5190:	00040d03 	andeq	r0, r4, r3, lsl #26
    5194:	122d0500 	eorne	r0, sp, #0, 10
    5198:	00000067 	andeq	r0, r0, r7, rrx
    519c:	0006a603 	andeq	sl, r6, r3, lsl #12
    51a0:	102e0500 	eorne	r0, lr, r0, lsl #10
    51a4:	000000e4 	andeq	r0, r0, r4, ror #1
    51a8:	008f0407 	addeq	r0, pc, r7, lsl #8
    51ac:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    51b0:	78093205 	stmdavc	r9, {r0, r2, r9, ip, sp}
    51b4:	09000001 	stmdbeq	r0, {r0}
    51b8:	00000023 	andeq	r0, r0, r3, lsr #32
    51bc:	a5073405 	strge	r3, [r7, #-1029]	; 0xfffffbfb
    51c0:	01000000 	mrseq	r0, (UNDEF: 0)
    51c4:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    51c8:	00000413 	andeq	r0, r0, r3, lsl r4
    51cc:	a5033505 	strge	r3, [r3, #-1285]	; 0xfffffafb
    51d0:	01000000 	mrseq	r0, (UNDEF: 0)
    51d4:	09000601 	stmdbeq	r0, {r0, r9, sl}
    51d8:	000001cb 	andeq	r0, r0, fp, asr #3
    51dc:	a5033605 	strge	r3, [r3, #-1541]	; 0xfffff9fb
    51e0:	01000000 	mrseq	r0, (UNDEF: 0)
    51e4:	09000501 	stmdbeq	r0, {r0, r8, sl}
    51e8:	0000044d 	andeq	r0, r0, sp, asr #8
    51ec:	a5033705 	strge	r3, [r3, #-1797]	; 0xfffff8fb
    51f0:	01000000 	mrseq	r0, (UNDEF: 0)
    51f4:	09000401 	stmdbeq	r0, {r0, sl}
    51f8:	00000608 	andeq	r0, r0, r8, lsl #12
    51fc:	a5033805 	strge	r3, [r3, #-2053]	; 0xfffff7fb
    5200:	01000000 	mrseq	r0, (UNDEF: 0)
    5204:	0a000004 	beq	521c <__exidx_end+0x25e4>
    5208:	0000041a 	andeq	r0, r0, sl, lsl r4
    520c:	a5073a05 	strge	r3, [r7, #-2565]	; 0xfffff5fb
    5210:	01000000 	mrseq	r0, (UNDEF: 0)
    5214:	0005760a 	andeq	r7, r5, sl, lsl #12
    5218:	033c0500 	teqeq	ip, #0, 10
    521c:	000000a5 	andeq	r0, r0, r5, lsr #1
    5220:	08530a02 	ldmdaeq	r3, {r1, r9, fp}^
    5224:	3d050000 	stccc	0, cr0, [r5, #-0]
    5228:	0000a503 	andeq	sl, r0, r3, lsl #10
    522c:	8e0a0300 	cdphi	3, 0, cr0, cr10, cr0, {0}
    5230:	05000005 	streq	r0, [r0, #-5]
    5234:	00bb083f 	adcseq	r0, fp, pc, lsr r8
    5238:	00040000 	andeq	r0, r4, r0
    523c:	00021903 	andeq	r1, r2, r3, lsl #18
    5240:	03410500 	movteq	r0, #5376	; 0x1500
    5244:	000000ea 	andeq	r0, r0, sl, ror #1
    5248:	00017806 	andeq	r7, r1, r6, lsl #16
    524c:	04540b00 	ldrbeq	r0, [r4], #-2816	; 0xfffff500
    5250:	43050000 	movwmi	r0, #20480	; 0x5000
    5254:	0001841a 	andeq	r8, r1, sl, lsl r4
    5258:	0b010100 	bleq	45660 <__ccfg+0x256b8>
    525c:	00000167 	andeq	r0, r0, r7, ror #2
    5260:	a50e4505 	strge	r4, [lr, #-1285]	; 0xfffffafb
    5264:	01000001 	tsteq	r0, r1
    5268:	ab040701 	blge	106e74 <__ccfg+0xe6ecc>
    526c:	02000001 	andeq	r0, r0, #1
    5270:	07040801 	streq	r0, [r4, -r1, lsl #16]
    5274:	ab050000 	blge	14527c <__ccfg+0x1252d4>
    5278:	0b000001 	bleq	5284 <__exidx_end+0x264c>
    527c:	00000222 	andeq	r0, r0, r2, lsr #4
    5280:	a51e4505 	ldrge	r4, [lr, #-1285]	; 0xfffffafb
    5284:	01000001 	tsteq	r0, r1
    5288:	06080801 	streq	r0, [r8], -r1, lsl #16
    528c:	01f6098f 	mvnseq	r0, pc, lsl #19
    5290:	cf0a0000 	svcgt	0x000a0000
    5294:	06000004 	streq	r0, [r0], -r4
    5298:	00670b90 	mlseq	r7, r0, fp, r0
    529c:	0a000000 	beq	52a4 <__exidx_end+0x266c>
    52a0:	00000985 	andeq	r0, r0, r5, lsl #19
    52a4:	8f089106 	svchi	0x00089106
    52a8:	04000000 	streq	r0, [r0], #-0
    52ac:	0001a00a 	andeq	sl, r1, sl
    52b0:	10920600 	addsne	r0, r2, r0, lsl #12
    52b4:	000000b1 	strheq	r0, [r0], -r1
    52b8:	51030006 	tstpl	r3, r6
    52bc:	06000007 	streq	r0, [r0], -r7
    52c0:	01c50393 			; <UNDEFINED> instruction: 0x01c50393
    52c4:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    52c8:	0d000001 	stceq	0, cr0, [r0, #-4]
    52cc:	0d000002 	stceq	0, cr0, [r0, #-8]
    52d0:	059a0b00 	ldreq	r0, [sl, #2816]	; 0xb00
    52d4:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    52d8:	0002020f 	andeq	r0, r2, pc, lsl #4
    52dc:	07010100 	streq	r0, [r1, -r0, lsl #2]
    52e0:	0000b604 	andeq	fp, r0, r4, lsl #12
    52e4:	07010800 	streq	r0, [r1, -r0, lsl #16]
    52e8:	024b0991 	subeq	r0, fp, #2375680	; 0x244000
    52ec:	95090000 	strls	r0, [r9, #-0]
    52f0:	07000005 	streq	r0, [r0, -r5]
    52f4:	00a50793 	umlaleq	r0, r5, r3, r7
    52f8:	07010000 	streq	r0, [r1, -r0]
    52fc:	b4090001 	strlt	r0, [r9], #-1
    5300:	07000003 	streq	r0, [r0, -r3]
    5304:	00a50394 	umlaleq	r0, r5, r4, r3
    5308:	01010000 	mrseq	r0, (UNDEF: 1)
    530c:	03000000 	movweq	r0, #0
    5310:	0000061a 	andeq	r0, r0, sl, lsl r6
    5314:	21039607 	tstcs	r3, r7, lsl #12
    5318:	05000002 	streq	r0, [r0, #-2]
    531c:	0000024b 	andeq	r0, r0, fp, asr #4
    5320:	0002570c 	andeq	r5, r2, ip, lsl #14
    5324:	00026700 	andeq	r6, r2, r0, lsl #14
    5328:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    532c:	0000025c 	andeq	r0, r0, ip, asr r2
    5330:	0002ba0b 	andeq	fp, r2, fp, lsl #20
    5334:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    5338:	00000267 	andeq	r0, r0, r7, ror #4
    533c:	9b0c0101 	blls	305748 <__ccfg+0x2e57a0>
    5340:	85000000 	strhi	r0, [r0, #-0]
    5344:	0d000002 	stceq	0, cr0, [r0, #-8]
    5348:	027a0500 	rsbseq	r0, sl, #0, 10
    534c:	cd0b0000 	stcgt	0, cr0, [fp, #-0]
    5350:	08000003 	stmdaeq	r0, {r0, r1}
    5354:	02851306 	addeq	r1, r5, #402653184	; 0x18000000
    5358:	01010000 	mrseq	r0, (UNDEF: 1)
    535c:	0005580b 	andeq	r5, r5, fp, lsl #16
    5360:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    5364:	000000bb 	strheq	r0, [r0], -fp
    5368:	1d0e0101 	stfnes	f0, [lr, #-4]
    536c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    5370:	b310016e 	tstlt	r0, #-2147483621	; 0x8000001b
    5374:	07000002 	streq	r0, [r0, -r2]
    5378:	0002b904 	andeq	fp, r2, r4, lsl #18
    537c:	c5010f00 	strgt	r0, [r1, #-3840]	; 0xfffff100
    5380:	10000002 	andne	r0, r0, r2
    5384:	0000008f 	andeq	r0, r0, pc, lsl #1
    5388:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    538c:	02d00000 	sbcseq	r0, r0, #0
    5390:	000d0000 	andeq	r0, sp, r0
    5394:	0002c505 	andeq	ip, r2, r5, lsl #10
    5398:	05c21100 	strbeq	r1, [r2, #256]	; 0x100
    539c:	7f090000 	svcvc	0x00090000
    53a0:	02d01601 	sbcseq	r1, r0, #1048576	; 0x100000
    53a4:	01010000 	mrseq	r0, (UNDEF: 1)
    53a8:	00029d11 	andeq	r9, r2, r1, lsl sp
    53ac:	01820900 	orreq	r0, r2, r0, lsl #18
    53b0:	0000c714 	andeq	ip, r0, r4, lsl r7
    53b4:	11010100 	mrsne	r0, (UNDEF: 17)
    53b8:	0000027a 	andeq	r0, r0, sl, ror r2
    53bc:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    53c0:	000000bb 	strheq	r0, [r0], -fp
    53c4:	08120101 	ldmdaeq	r2, {r0, r8}
    53c8:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    53cc:	00000329 	andeq	r0, r0, r9, lsr #6
    53d0:	00320013 	eorseq	r0, r2, r3, lsl r0
    53d4:	03070900 	movweq	r0, #30976	; 0x7900
    53d8:	00008f07 	andeq	r8, r0, r7, lsl #30
    53dc:	dd130000 	ldcle	0, cr0, [r3, #-0]
    53e0:	09000008 	stmdbeq	r0, {r3}
    53e4:	cc080308 	stcgt	3, cr0, [r8], {8}
    53e8:	04000000 	streq	r0, [r0], #-0
    53ec:	03260e00 			; <UNDEFINED> instruction: 0x03260e00
    53f0:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    53f4:	03020303 	movweq	r0, #8963	; 0x2303
    53f8:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    53fc:	30000000 	andcc	r0, r0, r0
    5400:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    5404:	00000399 	muleq	r0, r9, r3
    5408:	00179813 	andseq	r9, r7, r3, lsl r8
    540c:	03140900 	tsteq	r4, #0, 18
    5410:	00008f08 	andeq	r8, r0, r8, lsl #30
    5414:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    5418:	09000006 	stmdbeq	r0, {r1, r2}
    541c:	8f080315 	svchi	0x00080315
    5420:	02000000 	andeq	r0, r0, #0
    5424:	00072013 	andeq	r2, r7, r3, lsl r0
    5428:	03160900 	tsteq	r6, #0, 18
    542c:	0002a60b 	andeq	sl, r2, fp, lsl #12
    5430:	24130400 	ldrcs	r0, [r3], #-1024	; 0xfffffc00
    5434:	09000006 	stmdbeq	r0, {r1, r2}
    5438:	cc090317 	stcgt	3, cr0, [r9], {23}
    543c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5440:	00000713 	andeq	r0, r0, r3, lsl r7
    5444:	03180900 	tsteq	r8, #0, 18
    5448:	0003990f 	andeq	r9, r3, pc, lsl #18
    544c:	ad130c00 	ldcge	12, cr0, [r3, #-0]
    5450:	09000005 	stmdbeq	r0, {r0, r2}
    5454:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    5458:	2c000003 	stccs	0, cr0, [r0], {3}
    545c:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
    5460:	03a90000 			; <UNDEFINED> instruction: 0x03a90000
    5464:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5468:	03000000 	movweq	r0, #0
    546c:	36040700 	strcc	r0, [r4], -r0, lsl #14
    5470:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    5474:	000006ce 	andeq	r0, r0, lr, asr #13
    5478:	1b031c09 	blne	cc4a4 <__ccfg+0xac4fc>
    547c:	00000336 	andeq	r0, r0, r6, lsr r3
    5480:	0006ae11 	andeq	sl, r6, r1, lsl lr
    5484:	031e0900 	tsteq	lr, #0, 18
    5488:	0003cb14 	andeq	ip, r3, r4, lsl fp
    548c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5490:	0003af04 	andeq	sl, r3, r4, lsl #30
    5494:	04600b00 	strbteq	r0, [r0], #-2816	; 0xfffff500
    5498:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    549c:	00008f13 	andeq	r8, r0, r3, lsl pc
    54a0:	0b010100 	bleq	458a8 <__ccfg+0x25900>
    54a4:	000001d2 	ldrdeq	r0, [r0], -r2
    54a8:	a01a1e0a 	andsge	r1, sl, sl, lsl #28
    54ac:	01000000 	mrseq	r0, (UNDEF: 0)
    54b0:	07090b01 	streq	r0, [r9, -r1, lsl #22]
    54b4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    54b8:	0000a024 	andeq	sl, r0, r4, lsr #32
    54bc:	0b010100 	bleq	458c4 <__ccfg+0x2591c>
    54c0:	00000725 	andeq	r0, r0, r5, lsr #14
    54c4:	cb14220a 	blgt	50dcf4 <__ccfg+0x4edd4c>
    54c8:	01000003 	tsteq	r0, r3
    54cc:	026c1601 	rsbeq	r1, ip, #1048576	; 0x100000
    54d0:	0d010000 	stceq	0, cr0, [r1, #-0]
    54d4:	30030510 	andcc	r0, r3, r0, lsl r5
    54d8:	1700002c 	strne	r0, [r0, -ip, lsr #32]
    54dc:	0014f001 	andseq	pc, r4, r1
    54e0:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    54e4:	00000001 	andeq	r0, r0, r1
    54e8:	00000000 	andeq	r0, r0, r0
    54ec:	bb9c0100 	bllt	fe7058f4 <_estack+0xde7008f4>
    54f0:	18000004 	stmdane	r0, {r2}
    54f4:	01007473 	tsteq	r0, r3, ror r4
    54f8:	008f1c11 	addeq	r1, pc, r1, lsl ip	; <UNPREDICTABLE>
    54fc:	1ed80000 	cdpne	0, 13, cr0, cr8, cr0, {0}
    5500:	eb190000 	bl	645508 <__ccfg+0x625560>
    5504:	01000014 	tsteq	r0, r4, lsl r0
    5508:	021b2c11 	andseq	r2, fp, #4352	; 0x1100
    550c:	1ef60000 	cdpne	0, 15, cr0, cr6, cr0, {0}
    5510:	76180000 	ldrvc	r0, [r8], -r0
    5514:	01006c61 	tsteq	r0, r1, ror #24
    5518:	00d83a11 	sbcseq	r3, r8, r1, lsl sl
    551c:	1f140000 	svcne	0x00140000
    5520:	701a0000 	andsvc	r0, sl, r0
    5524:	12130100 	andsne	r0, r3, #0, 2
    5528:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    552c:	0100691b 	tsteq	r0, fp, lsl r9
    5530:	008f0714 	addeq	r0, pc, r4, lsl r7	; <UNPREDICTABLE>
    5534:	1f320000 	svcne	0x00320000
    5538:	761a0000 	ldrvc	r0, [sl], -r0
    553c:	07150100 	ldreq	r0, [r5, -r0, lsl #2]
    5540:	000000a5 	andeq	r0, r0, r5, lsr #1
    5544:	0004d41c 	andeq	sp, r4, ip, lsl r4
	...
    5550:	031c0100 	tsteq	ip, #0, 2
    5554:	0004de1c 	andeq	sp, r4, ip, lsl lr
	...
    5560:	031f0100 	tsteq	pc, #0, 2
    5564:	0004e81d 	andeq	lr, r4, sp, lsl r8
    5568:	00000000 	andeq	r0, r0, r0
    556c:	0008c800 	andeq	ip, r8, r0, lsl #16
    5570:	0b260100 	bleq	985978 <__ccfg+0x9659d0>
    5574:	0004f61e 	andeq	pc, r4, lr, lsl r6	; <UNPREDICTABLE>
    5578:	001f4500 	andseq	r4, pc, r0, lsl #10
    557c:	07000000 	streq	r0, [r0, -r0]
    5580:	00025704 	andeq	r5, r2, r4, lsl #14
    5584:	00011f00 	andeq	r1, r1, r0, lsl #30
    5588:	01000015 	tsteq	r0, r5, lsl r0
    558c:	0000060f 	andeq	r0, r0, pc, lsl #12
    5590:	00000000 	andeq	r0, r0, r0
    5594:	9c010000 	stcls	0, cr0, [r1], {-0}
    5598:	000b8e20 	andeq	r8, fp, r0, lsr #28
    559c:	355b0200 	ldrbcc	r0, [fp, #-512]	; 0xfffffe00
    55a0:	ae200301 	cdpge	3, 2, cr0, cr0, cr1, {0}
    55a4:	02000008 	andeq	r0, r0, #8
    55a8:	03013550 	movweq	r3, #5456	; 0x1550
    55ac:	0014de21 	andseq	sp, r4, r1, lsr #28
    55b0:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    55b4:	00006701 	andeq	r6, r0, r1, lsl #14
    55b8:	31220300 			; <UNDEFINED> instruction: 0x31220300
    55bc:	0300000a 	movweq	r0, #10
    55c0:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    55c4:	00000000 	andeq	r0, r0, r0
    55c8:	000004f6 	strdeq	r0, [r0], -r6
    55cc:	14490003 	strbne	r0, [r9], #-3
    55d0:	01040000 	mrseq	r0, (UNDEF: 4)
    55d4:	00000073 	andeq	r0, r0, r3, ror r0
    55d8:	00156a0c 	andseq	r6, r5, ip, lsl #20
    55dc:	00050c00 	andeq	r0, r5, r0, lsl #24
    55e0:	00096800 	andeq	r6, r9, r0, lsl #16
    55e4:	00000000 	andeq	r0, r0, r0
    55e8:	00394200 	eorseq	r4, r9, r0, lsl #4
    55ec:	06010200 	streq	r0, [r1], -r0, lsl #4
    55f0:	000006fd 	strdeq	r0, [r0], -sp
    55f4:	fe050202 	cdp2	2, 0, cr0, cr5, cr2, {0}
    55f8:	02000005 	andeq	r0, r0, #5
    55fc:	04c50504 	strbeq	r0, [r5], #1284	; 0x504
    5600:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5604:	0004c005 	andeq	ip, r4, r5
    5608:	06660300 	strbteq	r0, [r6], -r0, lsl #6
    560c:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    5610:	00004d18 	andeq	r4, r0, r8, lsl sp
    5614:	08010200 	stmdaeq	r1, {r9}
    5618:	000006fb 	strdeq	r0, [r0], -fp
    561c:	00033503 	andeq	r3, r3, r3, lsl #10
    5620:	19310300 	ldmdbne	r1!, {r8, r9}
    5624:	00000060 	andeq	r0, r0, r0, rrx
    5628:	a7070202 	strge	r0, [r7, -r2, lsl #4]
    562c:	03000007 	movweq	r0, #7
    5630:	00000714 	andeq	r0, r0, r4, lsl r7
    5634:	73193403 	tstvc	r9, #50331648	; 0x3000000
    5638:	02000000 	andeq	r0, r0, #0
    563c:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    5640:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5644:	0002f507 	andeq	pc, r2, r7, lsl #10
    5648:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    564c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5650:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    5654:	03000002 	movweq	r0, #2
    5658:	00002100 	andeq	r2, r0, r0, lsl #2
    565c:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    5660:	05000000 	streq	r0, [r0, #-0]
    5664:	0000008f 	andeq	r0, r0, pc, lsl #1
    5668:	00008f06 	andeq	r8, r0, r6, lsl #30
    566c:	16c80300 	strbne	r0, [r8], r0, lsl #6
    5670:	2b040000 	blcs	105678 <__ccfg+0xe56d0>
    5674:	00004112 	andeq	r4, r0, r2, lsl r1
    5678:	00a50600 	adceq	r0, r5, r0, lsl #12
    567c:	51030000 	mrspl	r0, (UNDEF: 3)
    5680:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    5684:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5688:	b6050000 	strlt	r0, [r5], -r0
    568c:	03000000 	movweq	r0, #0
    5690:	0000040d 	andeq	r0, r0, sp, lsl #8
    5694:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    5698:	07000000 	streq	r0, [r0, -r0]
    569c:	09320408 	ldmdbeq	r2!, {r3, sl}
    56a0:	00000161 	andeq	r0, r0, r1, ror #2
    56a4:	00002308 	andeq	r2, r0, r8, lsl #6
    56a8:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    56ac:	000000a5 	andeq	r0, r0, r5, lsr #1
    56b0:	00070101 	andeq	r0, r7, r1, lsl #2
    56b4:	00041308 	andeq	r1, r4, r8, lsl #6
    56b8:	03350400 	teqeq	r5, #0, 8
    56bc:	000000a5 	andeq	r0, r0, r5, lsr #1
    56c0:	00060101 	andeq	r0, r6, r1, lsl #2
    56c4:	0001cb08 	andeq	ip, r1, r8, lsl #22
    56c8:	03360400 	teqeq	r6, #0, 8
    56cc:	000000a5 	andeq	r0, r0, r5, lsr #1
    56d0:	00050101 	andeq	r0, r5, r1, lsl #2
    56d4:	00044d08 	andeq	r4, r4, r8, lsl #26
    56d8:	03370400 	teqeq	r7, #0, 8
    56dc:	000000a5 	andeq	r0, r0, r5, lsr #1
    56e0:	00040101 	andeq	r0, r4, r1, lsl #2
    56e4:	00060808 	andeq	r0, r6, r8, lsl #16
    56e8:	03380400 	teqeq	r8, #0, 8
    56ec:	000000a5 	andeq	r0, r0, r5, lsr #1
    56f0:	00000401 	andeq	r0, r0, r1, lsl #8
    56f4:	00041a09 	andeq	r1, r4, r9, lsl #20
    56f8:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    56fc:	000000a5 	andeq	r0, r0, r5, lsr #1
    5700:	05760901 	ldrbeq	r0, [r6, #-2305]!	; 0xfffff6ff
    5704:	3c040000 	stccc	0, cr0, [r4], {-0}
    5708:	0000a503 	andeq	sl, r0, r3, lsl #10
    570c:	53090200 	movwpl	r0, #37376	; 0x9200
    5710:	04000008 	streq	r0, [r0], #-8
    5714:	00a5033d 	adceq	r0, r5, sp, lsr r3
    5718:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    571c:	0000058e 	andeq	r0, r0, lr, lsl #11
    5720:	b6083f04 	strlt	r3, [r8], -r4, lsl #30
    5724:	04000000 	streq	r0, [r0], #-0
    5728:	02190300 	andseq	r0, r9, #0, 6
    572c:	41040000 	mrsmi	r0, (UNDEF: 4)
    5730:	0000d303 	andeq	sp, r0, r3, lsl #6
    5734:	01610600 	cmneq	r1, r0, lsl #12
    5738:	540a0000 	strpl	r0, [sl], #-0
    573c:	04000004 	streq	r0, [r0], #-4
    5740:	016d1a43 	cmneq	sp, r3, asr #20
    5744:	01010000 	mrseq	r0, (UNDEF: 1)
    5748:	0001670a 	andeq	r6, r1, sl, lsl #14
    574c:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    5750:	0000018e 	andeq	r0, r0, lr, lsl #3
    5754:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5758:	00000194 	muleq	r0, r4, r1
    575c:	04080102 	streq	r0, [r8], #-258	; 0xfffffefe
    5760:	05000007 	streq	r0, [r0, #-7]
    5764:	00000194 	muleq	r0, r4, r1
    5768:	0002220a 	andeq	r2, r2, sl, lsl #4
    576c:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    5770:	0000018e 	andeq	r0, r0, lr, lsl #3
    5774:	08070101 	stmdaeq	r7, {r0, r8}
    5778:	df098f05 	svcle	0x00098f05
    577c:	09000001 	stmdbeq	r0, {r0}
    5780:	000004cf 	andeq	r0, r0, pc, asr #9
    5784:	670b9005 	strvs	r9, [fp, -r5]
    5788:	00000000 	andeq	r0, r0, r0
    578c:	00098509 	andeq	r8, r9, r9, lsl #10
    5790:	08910500 	ldmeq	r1, {r8, sl}
    5794:	0000008f 	andeq	r0, r0, pc, lsl #1
    5798:	01a00904 	lsleq	r0, r4, #18
    579c:	92050000 	andls	r0, r5, #0
    57a0:	0000b110 	andeq	fp, r0, r0, lsl r1
    57a4:	03000600 	movweq	r0, #1536	; 0x600
    57a8:	00000751 	andeq	r0, r0, r1, asr r7
    57ac:	ae039305 	cdpge	3, 0, cr9, cr3, cr5, {0}
    57b0:	0c000001 	stceq	0, cr0, [r0], {1}
    57b4:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    57b8:	000001f6 	strdeq	r0, [r0], -r6
    57bc:	9a0a000d 	bls	2857f8 <__ccfg+0x265850>
    57c0:	05000005 	streq	r0, [r0, #-5]
    57c4:	01eb0f99 	strexheq	r0, r9, [fp]
    57c8:	01010000 	mrseq	r0, (UNDEF: 1)
    57cc:	91060107 	tstls	r6, r7, lsl #2
    57d0:	00022e09 	andeq	r2, r2, r9, lsl #28
    57d4:	05950800 	ldreq	r0, [r5, #2048]	; 0x800
    57d8:	93060000 	movwls	r0, #24576	; 0x6000
    57dc:	0000a507 	andeq	sl, r0, r7, lsl #10
    57e0:	01070100 	mrseq	r0, (UNDEF: 23)
    57e4:	03b40800 			; <UNDEFINED> instruction: 0x03b40800
    57e8:	94060000 	strls	r0, [r6], #-0
    57ec:	0000a503 	andeq	sl, r0, r3, lsl #10
    57f0:	00010100 	andeq	r0, r1, r0, lsl #2
    57f4:	1a030000 	bne	c57fc <__ccfg+0xa5854>
    57f8:	06000006 	streq	r0, [r0], -r6
    57fc:	02040396 	andeq	r0, r4, #1476395010	; 0x58000002
    5800:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5804:	0c000002 	stceq	0, cr0, [r0], {2}
    5808:	0000023a 	andeq	r0, r0, sl, lsr r2
    580c:	0000024a 	andeq	r0, r0, sl, asr #4
    5810:	3f05000d 	svccc	0x0005000d
    5814:	0a000002 	beq	5824 <__exidx_end+0x2bec>
    5818:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    581c:	4a179c06 	bmi	5ec83c <__ccfg+0x5cc894>
    5820:	01000002 	tsteq	r0, r2
    5824:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5828:	02680000 	rsbeq	r0, r8, #0
    582c:	000d0000 	andeq	r0, sp, r0
    5830:	00025d05 	andeq	r5, r2, r5, lsl #26
    5834:	03cd0a00 	biceq	r0, sp, #0, 20
    5838:	06070000 	streq	r0, [r7], -r0
    583c:	00026813 	andeq	r6, r2, r3, lsl r8
    5840:	0a010100 	beq	45c48 <__ccfg+0x25ca0>
    5844:	00000558 	andeq	r0, r0, r8, asr r5
    5848:	b60ec305 	strlt	ip, [lr], -r5, lsl #6
    584c:	01000000 	mrseq	r0, (UNDEF: 0)
    5850:	071d0e01 	ldreq	r0, [sp, -r1, lsl #28]
    5854:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    5858:	02961001 	addseq	r1, r6, #1
    585c:	040b0000 	streq	r0, [fp], #-0
    5860:	0000029c 	muleq	r0, ip, r2
    5864:	02a8010f 	adceq	r0, r8, #-1073741821	; 0xc0000003
    5868:	8f100000 	svchi	0x00100000
    586c:	00000000 	andeq	r0, r0, r0
    5870:	00019b0c 	andeq	r9, r1, ip, lsl #22
    5874:	0002b300 	andeq	fp, r2, r0, lsl #6
    5878:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    587c:	000002a8 	andeq	r0, r0, r8, lsr #5
    5880:	0005c211 	andeq	ip, r5, r1, lsl r2
    5884:	017f0800 	cmneq	pc, r0, lsl #16
    5888:	0002b316 	andeq	fp, r2, r6, lsl r3
    588c:	11010100 	mrsne	r0, (UNDEF: 17)
    5890:	0000029d 	muleq	r0, sp, r2
    5894:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    5898:	000000c2 	andeq	r0, r0, r2, asr #1
    589c:	7a110101 	bvc	445ca8 <__ccfg+0x425d00>
    58a0:	08000002 	stmdaeq	r0, {r1}
    58a4:	b60e02d8 			; <UNDEFINED> instruction: 0xb60e02d8
    58a8:	01000000 	mrseq	r0, (UNDEF: 0)
    58ac:	08081201 	stmdaeq	r8, {r0, r9, ip}
    58b0:	0c090303 	stceq	3, cr0, [r9], {3}
    58b4:	13000003 	movwne	r0, #3
    58b8:	00003200 	andeq	r3, r0, r0, lsl #4
    58bc:	07030708 	streq	r0, [r3, -r8, lsl #14]
    58c0:	0000008f 	andeq	r0, r0, pc, lsl #1
    58c4:	08dd1300 	ldmeq	sp, {r8, r9, ip}^
    58c8:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    58cc:	00c70803 	sbceq	r0, r7, r3, lsl #16
    58d0:	00040000 	andeq	r0, r4, r0
    58d4:	0003260e 	andeq	r2, r3, lr, lsl #12
    58d8:	03090800 	movweq	r0, #38912	; 0x9800
    58dc:	0002e503 	andeq	lr, r2, r3, lsl #10
    58e0:	00181400 	andseq	r1, r8, r0, lsl #8
    58e4:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    58e8:	7c08030b 	stcvc	3, cr0, [r8], {11}
    58ec:	13000003 	movwne	r0, #3
    58f0:	00001798 	muleq	r0, r8, r7
    58f4:	08031408 	stmdaeq	r3, {r3, sl, ip}
    58f8:	0000008f 	andeq	r0, r0, pc, lsl #1
    58fc:	06d91300 	ldrbeq	r1, [r9], r0, lsl #6
    5900:	15080000 	strne	r0, [r8, #-0]
    5904:	008f0803 	addeq	r0, pc, r3, lsl #16
    5908:	13020000 	movwne	r0, #8192	; 0x2000
    590c:	00000720 	andeq	r0, r0, r0, lsr #14
    5910:	0b031608 	bleq	cb138 <__ccfg+0xab190>
    5914:	00000289 	andeq	r0, r0, r9, lsl #5
    5918:	06241304 	strteq	r1, [r4], -r4, lsl #6
    591c:	17080000 	strne	r0, [r8, -r0]
    5920:	00c70903 	sbceq	r0, r7, r3, lsl #18
    5924:	13080000 	movwne	r0, #32768	; 0x8000
    5928:	00000007 	andeq	r0, r0, r7
    592c:	0f031808 	svceq	0x00031808
    5930:	0000037c 	andeq	r0, r0, ip, ror r3
    5934:	05ad130c 	streq	r1, [sp, #780]!	; 0x30c
    5938:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    593c:	038c1503 	orreq	r1, ip, #12582912	; 0xc00000
    5940:	002c0000 	eoreq	r0, ip, r0
    5944:	00030c0c 	andeq	r0, r3, ip, lsl #24
    5948:	00038c00 	andeq	r8, r3, r0, lsl #24
    594c:	00881500 	addeq	r1, r8, r0, lsl #10
    5950:	00030000 	andeq	r0, r3, r0
    5954:	0319040b 	tsteq	r9, #184549376	; 0xb000000
    5958:	ce0e0000 	cdpgt	0, 0, cr0, cr14, cr0, {0}
    595c:	08000006 	stmdaeq	r0, {r1, r2}
    5960:	191b031c 	ldmdbne	fp, {r2, r3, r4, r8, r9}
    5964:	11000003 	tstne	r0, r3
    5968:	000006ae 	andeq	r0, r0, lr, lsr #13
    596c:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    5970:	000003ae 	andeq	r0, r0, lr, lsr #7
    5974:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5978:	00000392 	muleq	r0, r2, r3
    597c:	0004600a 	andeq	r6, r4, sl
    5980:	131d0900 	tstne	sp, #0, 18
    5984:	0000008f 	andeq	r0, r0, pc, lsl #1
    5988:	d20a0101 	andle	r0, sl, #1073741824	; 0x40000000
    598c:	09000001 	stmdbeq	r0, {r0}
    5990:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    5994:	01010000 	mrseq	r0, (UNDEF: 1)
    5998:	0007090a 	andeq	r0, r7, sl, lsl #18
    599c:	241e0900 	ldrcs	r0, [lr], #-2304	; 0xfffff700
    59a0:	000000a0 	andeq	r0, r0, r0, lsr #1
    59a4:	250a0101 	strcs	r0, [sl, #-257]	; 0xfffffeff
    59a8:	09000007 	stmdbeq	r0, {r0, r1, r2}
    59ac:	03ae1422 			; <UNDEFINED> instruction: 0x03ae1422
    59b0:	01010000 	mrseq	r0, (UNDEF: 1)
    59b4:	00155916 	andseq	r5, r5, r6, lsl r9
    59b8:	0f080100 	svceq	0x00080100
    59bc:	00000296 	muleq	r0, r6, r2
    59c0:	00000305 	andeq	r0, r0, r5, lsl #6
    59c4:	a6160000 	ldrge	r0, [r6], -r0
    59c8:	01000015 	tsteq	r0, r5, lsl r0
    59cc:	008f0d09 	addeq	r0, pc, r9, lsl #26
    59d0:	03050000 	movweq	r0, #20480	; 0x5000
    59d4:	00000000 	andeq	r0, r0, r0
    59d8:	00026d17 	andeq	r6, r2, r7, lsl sp
    59dc:	0c0a0100 	stfeqs	f0, [sl], {-0}
    59e0:	2c340305 	ldccs	3, cr0, [r4], #-20	; 0xffffffec
    59e4:	01180000 	tsteq	r8, r0
    59e8:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    59ec:	01065801 	tsteq	r6, r1, lsl #16
	...
    59f8:	04479c01 	strbeq	r9, [r7], #-3073	; 0xfffff3ff
    59fc:	61190000 	tstvs	r9, r0
    5a00:	01007463 	tsteq	r0, r3, ror #8
    5a04:	02961d58 	addseq	r1, r6, #88, 26	; 0x1600
    5a08:	1f580000 	svcne	0x00580000
    5a0c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    5a10:	0015ae01 	andseq	sl, r5, r1, lsl #28
    5a14:	011c0100 	tsteq	ip, r0, lsl #2
    5a18:	00000001 	andeq	r0, r0, r1
    5a1c:	00000000 	andeq	r0, r0, r0
    5a20:	de9c0100 	fmllee	f0, f4, f0
    5a24:	1a000004 	bne	5a3c <__exidx_end+0x2e04>
    5a28:	000006eb 	andeq	r0, r0, fp, ror #13
    5a2c:	8f011c01 	svchi	0x00011c01
    5a30:	94000000 	strls	r0, [r0], #-0
    5a34:	1b00001f 	blne	5ab8 <__exidx_end+0x2e80>
    5a38:	00001554 	andeq	r1, r0, r4, asr r5
    5a3c:	00012101 	andeq	r2, r1, r1, lsl #2
    5a40:	1b000000 	blne	5a48 <__exidx_end+0x2e10>
    5a44:	00001561 	andeq	r1, r0, r1, ror #10
    5a48:	00013001 	andeq	r3, r1, r1
    5a4c:	1b000000 	blne	5a54 <__exidx_end+0x2e1c>
    5a50:	000016b3 			; <UNDEFINED> instruction: 0x000016b3
    5a54:	00013701 	andeq	r3, r1, r1, lsl #14
    5a58:	1c000000 	stcne	0, cr0, [r0], {-0}
    5a5c:	000004de 	ldrdeq	r0, [r0], -lr
    5a60:	00000000 	andeq	r0, r0, r0
    5a64:	00000908 	andeq	r0, r0, r8, lsl #18
    5a68:	ad072b01 	vstrge	d2, [r7, #-4]
    5a6c:	1d000004 	stcne	0, cr0, [r0, #-16]
    5a70:	000004ec 	andeq	r0, r0, ip, ror #9
    5a74:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    5a78:	00000000 	andeq	r0, r0, r0
    5a7c:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    5a80:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5a84:	0004c707 	andeq	ip, r4, r7, lsl #14
    5a88:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    5a8c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5a90:	000004de 	ldrdeq	r0, [r0], -lr
    5a94:	00000000 	andeq	r0, r0, r0
    5a98:	00000948 	andeq	r0, r0, r8, asr #18
    5a9c:	1d074a01 	vstrne	s8, [r7, #-4]
    5aa0:	000004ec 	andeq	r0, r0, ip, ror #9
    5aa4:	de1f0000 	cdple	0, 1, cr0, cr15, cr0, {0}
    5aa8:	02000014 	andeq	r0, r0, #20
    5aac:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    5ab0:	03000000 	movweq	r0, #0
    5ab4:	000a3120 	andeq	r3, sl, r0, lsr #2
    5ab8:	18a40200 	stmiane	r4!, {r9}
    5abc:	00000067 	andeq	r0, r0, r7, rrx
    5ac0:	0aa70000 	beq	fe9c5ac8 <_estack+0xde9c0ac8>
    5ac4:	00030000 	andeq	r0, r3, r0
    5ac8:	00001614 	andeq	r1, r0, r4, lsl r6
    5acc:	00730104 	rsbseq	r0, r3, r4, lsl #2
    5ad0:	410c0000 	mrsmi	r0, (UNDEF: 12)
    5ad4:	0c000016 	stceq	0, cr0, [r0], {22}
    5ad8:	08000005 	stmdaeq	r0, {r0, r2}
    5adc:	0000000b 	andeq	r0, r0, fp
    5ae0:	82000000 	andhi	r0, r0, #0
    5ae4:	0200003c 	andeq	r0, r0, #60	; 0x3c
    5ae8:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
    5aec:	02020000 	andeq	r0, r2, #0
    5af0:	0005fe05 	andeq	pc, r5, r5, lsl #28
    5af4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5af8:	000004c5 	andeq	r0, r0, r5, asr #9
    5afc:	c0050802 	andgt	r0, r5, r2, lsl #16
    5b00:	03000004 	movweq	r0, #4
    5b04:	00000666 	andeq	r0, r0, r6, ror #12
    5b08:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    5b0c:	02000000 	andeq	r0, r0, #0
    5b10:	06fb0801 	ldrbteq	r0, [fp], r1, lsl #16
    5b14:	35030000 	strcc	r0, [r3, #-0]
    5b18:	04000003 	streq	r0, [r0], #-3
    5b1c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    5b20:	02020000 	andeq	r0, r2, #0
    5b24:	0007a707 	andeq	sl, r7, r7, lsl #14
    5b28:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    5b2c:	34040000 	strcc	r0, [r4], #-0
    5b30:	00007319 	andeq	r7, r0, r9, lsl r3
    5b34:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5b38:	000002fa 	strdeq	r0, [r0], -sl
    5b3c:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    5b40:	04000002 	streq	r0, [r0], #-2
    5b44:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5b48:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    5b4c:	0002ff07 	andeq	pc, r2, r7, lsl #30
    5b50:	05ba0300 	ldreq	r0, [sl, #768]!	; 0x300
    5b54:	26050000 	strcs	r0, [r5], -r0
    5b58:	00004112 	andeq	r4, r0, r2, lsl r1
    5b5c:	21000300 	mrscs	r0, LR_irq
    5b60:	27050000 	strcs	r0, [r5, -r0]
    5b64:	00005412 	andeq	r5, r0, r2, lsl r4
    5b68:	009b0500 	addseq	r0, fp, r0, lsl #10
    5b6c:	9b060000 	blls	185b74 <__ccfg+0x165bcc>
    5b70:	03000000 	movweq	r0, #0
    5b74:	000016c8 	andeq	r1, r0, r8, asr #13
    5b78:	41122b05 	tstmi	r2, r5, lsl #22
    5b7c:	06000000 	streq	r0, [r0], -r0
    5b80:	000000b1 	strheq	r0, [r0], -r1
    5b84:	0000b105 	andeq	fp, r0, r5, lsl #2
    5b88:	21510300 	cmpcs	r1, r0, lsl #6
    5b8c:	2c050000 	stccs	0, cr0, [r5], {-0}
    5b90:	00006712 	andeq	r6, r0, r2, lsl r7
    5b94:	00c70500 	sbceq	r0, r7, r0, lsl #10
    5b98:	0d030000 	stceq	0, cr0, [r3, #-0]
    5b9c:	05000004 	streq	r0, [r0, #-4]
    5ba0:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    5ba4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    5ba8:	72093205 	andvc	r3, r9, #1342177280	; 0x50000000
    5bac:	08000001 	stmdaeq	r0, {r0}
    5bb0:	00000023 	andeq	r0, r0, r3, lsr #32
    5bb4:	b1073405 	tstlt	r7, r5, lsl #8
    5bb8:	01000000 	mrseq	r0, (UNDEF: 0)
    5bbc:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    5bc0:	00000413 	andeq	r0, r0, r3, lsl r4
    5bc4:	b1033505 	tstlt	r3, r5, lsl #10
    5bc8:	01000000 	mrseq	r0, (UNDEF: 0)
    5bcc:	08000601 	stmdaeq	r0, {r0, r9, sl}
    5bd0:	000001cb 	andeq	r0, r0, fp, asr #3
    5bd4:	b1033605 	tstlt	r3, r5, lsl #12
    5bd8:	01000000 	mrseq	r0, (UNDEF: 0)
    5bdc:	08000501 	stmdaeq	r0, {r0, r8, sl}
    5be0:	0000044d 	andeq	r0, r0, sp, asr #8
    5be4:	b1033705 	tstlt	r3, r5, lsl #14
    5be8:	01000000 	mrseq	r0, (UNDEF: 0)
    5bec:	08000401 	stmdaeq	r0, {r0, sl}
    5bf0:	00000608 	andeq	r0, r0, r8, lsl #12
    5bf4:	b1033805 	tstlt	r3, r5, lsl #16
    5bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    5bfc:	09000004 	stmdbeq	r0, {r2}
    5c00:	0000041a 	andeq	r0, r0, sl, lsl r4
    5c04:	b1073a05 	tstlt	r7, r5, lsl #20
    5c08:	01000000 	mrseq	r0, (UNDEF: 0)
    5c0c:	00057609 	andeq	r7, r5, r9, lsl #12
    5c10:	033c0500 	teqeq	ip, #0, 10
    5c14:	000000b1 	strheq	r0, [r0], -r1
    5c18:	08530902 	ldmdaeq	r3, {r1, r8, fp}^
    5c1c:	3d050000 	stccc	0, cr0, [r5, #-0]
    5c20:	0000b103 	andeq	fp, r0, r3, lsl #2
    5c24:	8e090300 	cdphi	3, 0, cr0, cr9, cr0, {0}
    5c28:	05000005 	streq	r0, [r0, #-5]
    5c2c:	00c7083f 	sbceq	r0, r7, pc, lsr r8
    5c30:	00040000 	andeq	r0, r4, r0
    5c34:	00021903 	andeq	r1, r2, r3, lsl #18
    5c38:	03410500 	movteq	r0, #5376	; 0x1500
    5c3c:	000000e4 	andeq	r0, r0, r4, ror #1
    5c40:	00017206 	andeq	r7, r1, r6, lsl #4
    5c44:	04540a00 	ldrbeq	r0, [r4], #-2560	; 0xfffff600
    5c48:	43050000 	movwmi	r0, #20480	; 0x5000
    5c4c:	00017e1a 	andeq	r7, r1, sl, lsl lr
    5c50:	0a010100 	beq	46058 <__ccfg+0x260b0>
    5c54:	00000167 	andeq	r0, r0, r7, ror #2
    5c58:	9f0e4505 	svcls	0x000e4505
    5c5c:	01000001 	tsteq	r0, r1
    5c60:	a5040b01 	strge	r0, [r4, #-2817]	; 0xfffff4ff
    5c64:	02000001 	andeq	r0, r0, #1
    5c68:	07040801 	streq	r0, [r4, -r1, lsl #16]
    5c6c:	a5050000 	strge	r0, [r5, #-0]
    5c70:	0a000001 	beq	5c7c <__exidx_end+0x3044>
    5c74:	00000222 	andeq	r0, r0, r2, lsr #4
    5c78:	9f1e4505 	svcls	0x001e4505
    5c7c:	01000001 	tsteq	r0, r1
    5c80:	06080701 	streq	r0, [r8], -r1, lsl #14
    5c84:	01f0098f 	mvnseq	r0, pc, lsl #19
    5c88:	cf090000 	svcgt	0x00090000
    5c8c:	06000004 	streq	r0, [r0], -r4
    5c90:	00670b90 	mlseq	r7, r0, fp, r0
    5c94:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5c98:	00000985 	andeq	r0, r0, r5, lsl #19
    5c9c:	9b089106 	blls	22a0bc <__ccfg+0x20a114>
    5ca0:	04000000 	streq	r0, [r0], #-0
    5ca4:	0001a009 	andeq	sl, r1, r9
    5ca8:	10920600 	addsne	r0, r2, r0, lsl #12
    5cac:	000000bd 	strheq	r0, [r0], -sp
    5cb0:	51030006 	tstpl	r3, r6
    5cb4:	06000007 	streq	r0, [r0], -r7
    5cb8:	01bf0393 			; <UNDEFINED> instruction: 0x01bf0393
    5cbc:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    5cc0:	07000001 	streq	r0, [r0, -r1]
    5cc4:	0d000002 	stceq	0, cr0, [r0, #-8]
    5cc8:	059a0a00 	ldreq	r0, [sl, #2560]	; 0xa00
    5ccc:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    5cd0:	0001fc0f 	andeq	pc, r1, pc, lsl #24
    5cd4:	0b010100 	bleq	460dc <__ccfg+0x26134>
    5cd8:	0000c204 	andeq	ip, r0, r4, lsl #4
    5cdc:	07010700 	streq	r0, [r1, -r0, lsl #14]
    5ce0:	02450991 	subeq	r0, r5, #2375680	; 0x244000
    5ce4:	95080000 	strls	r0, [r8, #-0]
    5ce8:	07000005 	streq	r0, [r0, -r5]
    5cec:	00b10793 	umlalseq	r0, r1, r3, r7
    5cf0:	07010000 	streq	r0, [r1, -r0]
    5cf4:	b4080001 	strlt	r0, [r8], #-1
    5cf8:	07000003 	streq	r0, [r0, -r3]
    5cfc:	00b10394 	umlalseq	r0, r1, r4, r3
    5d00:	01010000 	mrseq	r0, (UNDEF: 1)
    5d04:	03000000 	movweq	r0, #0
    5d08:	0000061a 	andeq	r0, r0, sl, lsl r6
    5d0c:	1b039607 	blne	eb530 <__ccfg+0xcb588>
    5d10:	05000002 	streq	r0, [r0, #-2]
    5d14:	00000245 	andeq	r0, r0, r5, asr #4
    5d18:	0002510c 	andeq	r5, r2, ip, lsl #2
    5d1c:	00026100 	andeq	r6, r2, r0, lsl #2
    5d20:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5d24:	00000256 	andeq	r0, r0, r6, asr r2
    5d28:	0002ba0a 	andeq	fp, r2, sl, lsl #20
    5d2c:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    5d30:	00000261 	andeq	r0, r0, r1, ror #4
    5d34:	a70c0101 	strge	r0, [ip, -r1, lsl #2]
    5d38:	7f000000 	svcvc	0x00000000
    5d3c:	0d000002 	stceq	0, cr0, [r0, #-8]
    5d40:	02740500 	rsbseq	r0, r4, #0, 10
    5d44:	cd0a0000 	stcgt	0, cr0, [sl, #-0]
    5d48:	08000003 	stmdaeq	r0, {r0, r1}
    5d4c:	027f1306 	rsbseq	r1, pc, #402653184	; 0x18000000
    5d50:	01010000 	mrseq	r0, (UNDEF: 1)
    5d54:	0005580a 	andeq	r5, r5, sl, lsl #16
    5d58:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    5d5c:	000000c7 	andeq	r0, r0, r7, asr #1
    5d60:	1d0e0101 	stfnes	f0, [lr, #-4]
    5d64:	09000007 	stmdbeq	r0, {r0, r1, r2}
    5d68:	ad10016e 	ldfges	f0, [r0, #-440]	; 0xfffffe48
    5d6c:	0b000002 	bleq	5d7c <__exidx_end+0x3144>
    5d70:	0002b304 	andeq	fp, r2, r4, lsl #6
    5d74:	bf010f00 	svclt	0x00010f00
    5d78:	10000002 	andne	r0, r0, r2
    5d7c:	0000009b 	muleq	r0, fp, r0
    5d80:	01ac0c00 			; <UNDEFINED> instruction: 0x01ac0c00
    5d84:	02ca0000 	sbceq	r0, sl, #0
    5d88:	000d0000 	andeq	r0, sp, r0
    5d8c:	0002bf05 	andeq	fp, r2, r5, lsl #30
    5d90:	05c21100 	strbeq	r1, [r2, #256]	; 0x100
    5d94:	7f090000 	svcvc	0x00090000
    5d98:	02ca1601 	sbceq	r1, sl, #1048576	; 0x100000
    5d9c:	01010000 	mrseq	r0, (UNDEF: 1)
    5da0:	00029d11 	andeq	r9, r2, r1, lsl sp
    5da4:	01820900 	orreq	r0, r2, r0, lsl #18
    5da8:	0000d314 	andeq	sp, r0, r4, lsl r3
    5dac:	11010100 	mrsne	r0, (UNDEF: 17)
    5db0:	0000027a 	andeq	r0, r0, sl, ror r2
    5db4:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    5db8:	000000c7 	andeq	r0, r0, r7, asr #1
    5dbc:	08120101 	ldmdaeq	r2, {r0, r8}
    5dc0:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    5dc4:	00000323 	andeq	r0, r0, r3, lsr #6
    5dc8:	00320013 	eorseq	r0, r2, r3, lsl r0
    5dcc:	03070900 	movweq	r0, #30976	; 0x7900
    5dd0:	00009b07 	andeq	r9, r0, r7, lsl #22
    5dd4:	dd130000 	ldcle	0, cr0, [r3, #-0]
    5dd8:	09000008 	stmdbeq	r0, {r3}
    5ddc:	d8080308 	stmdale	r8, {r3, r8, r9}
    5de0:	04000000 	streq	r0, [r0], #-0
    5de4:	03260e00 			; <UNDEFINED> instruction: 0x03260e00
    5de8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    5dec:	02fc0303 	rscseq	r0, ip, #201326592	; 0xc000000
    5df0:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    5df4:	30000000 	andcc	r0, r0, r0
    5df8:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    5dfc:	00000393 	muleq	r0, r3, r3
    5e00:	00179813 	andseq	r9, r7, r3, lsl r8
    5e04:	03140900 	tsteq	r4, #0, 18
    5e08:	00009b08 	andeq	r9, r0, r8, lsl #22
    5e0c:	d9130000 	ldmdble	r3, {}	; <UNPREDICTABLE>
    5e10:	09000006 	stmdbeq	r0, {r1, r2}
    5e14:	9b080315 	blls	206a70 <__ccfg+0x1e6ac8>
    5e18:	02000000 	andeq	r0, r0, #0
    5e1c:	00072013 	andeq	r2, r7, r3, lsl r0
    5e20:	03160900 	tsteq	r6, #0, 18
    5e24:	0002a00b 	andeq	sl, r2, fp
    5e28:	24130400 	ldrcs	r0, [r3], #-1024	; 0xfffffc00
    5e2c:	09000006 	stmdbeq	r0, {r1, r2}
    5e30:	d8090317 	stmdale	r9, {r0, r1, r2, r4, r8, r9}
    5e34:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5e38:	00000713 	andeq	r0, r0, r3, lsl r7
    5e3c:	03180900 	tsteq	r8, #0, 18
    5e40:	0003930f 	andeq	r9, r3, pc, lsl #6
    5e44:	ad130c00 	ldcge	12, cr0, [r3, #-0]
    5e48:	09000005 	stmdbeq	r0, {r0, r2}
    5e4c:	a3150319 	tstge	r5, #1677721600	; 0x64000000
    5e50:	2c000003 	stccs	0, cr0, [r0], {3}
    5e54:	03230c00 			; <UNDEFINED> instruction: 0x03230c00
    5e58:	03a30000 			; <UNDEFINED> instruction: 0x03a30000
    5e5c:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    5e60:	03000000 	movweq	r0, #0
    5e64:	30040b00 	andcc	r0, r4, r0, lsl #22
    5e68:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    5e6c:	000006ce 	andeq	r0, r0, lr, asr #13
    5e70:	1b031c09 	blne	cce9c <__ccfg+0xacef4>
    5e74:	00000330 	andeq	r0, r0, r0, lsr r3
    5e78:	0006ae11 	andeq	sl, r6, r1, lsl lr
    5e7c:	031e0900 	tsteq	lr, #0, 18
    5e80:	0003c514 	andeq	ip, r3, r4, lsl r5
    5e84:	0b010100 	bleq	4628c <__ccfg+0x262e4>
    5e88:	0003a904 	andeq	sl, r3, r4, lsl #18
    5e8c:	04600a00 	strbteq	r0, [r0], #-2560	; 0xfffff600
    5e90:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    5e94:	00009b13 	andeq	r9, r0, r3, lsl fp
    5e98:	0a010100 	beq	462a0 <__ccfg+0x262f8>
    5e9c:	000001d2 	ldrdeq	r0, [r0], -r2
    5ea0:	ac1a1e0a 	ldcge	14, cr1, [sl], {10}
    5ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    5ea8:	07090a01 	streq	r0, [r9, -r1, lsl #20]
    5eac:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    5eb0:	0000ac24 	andeq	sl, r0, r4, lsr #24
    5eb4:	0a010100 	beq	462bc <__ccfg+0x26314>
    5eb8:	00000725 	andeq	r0, r0, r5, lsr #14
    5ebc:	c514220a 	ldrgt	r2, [r4, #-522]	; 0xfffffdf6
    5ec0:	01000003 	tsteq	r0, r3
    5ec4:	06b31601 	ldrteq	r1, [r3], r1, lsl #12
    5ec8:	0f010000 	svceq	0x00010000
    5ecc:	0000c70f 	andeq	ip, r0, pc, lsl #14
    5ed0:	00030500 	andeq	r0, r3, r0, lsl #10
    5ed4:	16000000 	strne	r0, [r0], -r0
    5ed8:	00000773 	andeq	r0, r0, r3, ror r7
    5edc:	c7150f01 	ldrgt	r0, [r5, -r1, lsl #30]
    5ee0:	05000000 	streq	r0, [r0, #-0]
    5ee4:	00000003 	andeq	r0, r0, r3
    5ee8:	169f1600 	ldrne	r1, [pc], r0, lsl #12
    5eec:	10010000 	andne	r0, r1, r0
    5ef0:	00021514 	andeq	r1, r2, r4, lsl r5
    5ef4:	00030500 	andeq	r0, r3, r0, lsl #10
    5ef8:	16000000 	strne	r0, [r0], -r0
    5efc:	00001604 	andeq	r1, r0, r4, lsl #12
    5f00:	b10d1201 	tstlt	sp, r1, lsl #4
    5f04:	05000000 	streq	r0, [r0, #-0]
    5f08:	00001c03 	andeq	r1, r0, r3, lsl #24
    5f0c:	16931620 	ldrne	r1, [r3], r0, lsr #12
    5f10:	13010000 	movwne	r0, #4096	; 0x1000
    5f14:	0000b103 	andeq	fp, r0, r3, lsl #2
    5f18:	1d030500 	cfstr32ne	mvfx0, [r3, #-0]
    5f1c:	16200000 	strtne	r0, [r0], -r0
    5f20:	00000f6e 	andeq	r0, r0, lr, ror #30
    5f24:	9b0d1501 	blls	34b330 <__ccfg+0x32b388>
    5f28:	05000000 	streq	r0, [r0, #-0]
    5f2c:	00000003 	andeq	r0, r0, r3
    5f30:	d0011700 	andle	r1, r1, r0, lsl #14
    5f34:	03000015 	movweq	r0, #21
    5f38:	00000613 	andeq	r0, r0, r3, lsl r6
    5f3c:	00000000 	andeq	r0, r0, r0
    5f40:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f44:	16a40118 	ssatne	r0, #5, r8, lsl #2
    5f48:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    5f4c:	00c70107 	sbceq	r0, r7, r7, lsl #2
	...
    5f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    5f5c:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    5f60:	00726519 	rsbseq	r6, r2, r9, lsl r5
    5f64:	bc190803 	ldclt	8, cr0, [r9], {3}
    5f68:	c8000004 	stmdagt	r0, {r2}
    5f6c:	1a00001f 	bne	5ff0 <__exidx_end+0x33b8>
    5f70:	00757265 	rsbseq	r7, r5, r5, ror #4
    5f74:	c2240803 	eorgt	r0, r4, #196608	; 0x30000
    5f78:	01000004 	tsteq	r0, r4
    5f7c:	040b0051 	streq	r0, [fp], #-81	; 0xffffffaf
    5f80:	0000008f 	andeq	r0, r0, pc, lsl #1
    5f84:	00c7040b 	sbceq	r0, r7, fp, lsl #8
    5f88:	011b0000 	tsteq	fp, r0
    5f8c:	00001627 	andeq	r1, r0, r7, lsr #12
    5f90:	06016001 	streq	r6, [r1], -r1
    5f94:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    5fa0:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5fa4:	1c000004 	stcne	0, cr0, [r0], {4}
    5fa8:	01007473 	tsteq	r0, r3, ror r4
    5fac:	9b140160 	blls	506534 <__ccfg+0x4e658c>
    5fb0:	db000000 	blle	5fb8 <__exidx_end+0x3380>
    5fb4:	0000001f 	andeq	r0, r0, pc, lsl r0
    5fb8:	161e011d 			; <UNDEFINED> instruction: 0x161e011d
    5fbc:	5b010000 	blpl	45fc4 <__ccfg+0x2601c>
    5fc0:	00000601 	andeq	r0, r0, r1, lsl #12
    5fc4:	00000000 	andeq	r0, r0, r0
    5fc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    5fcc:	15fb011b 	ldrbne	r0, [fp, #283]!	; 0x11b
    5fd0:	21010000 	mrscs	r0, (UNDEF: 1)
    5fd4:	9b010601 	blls	477e0 <__ccfg+0x27838>
	...
    5fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    5fe4:	0005c09c 	muleq	r5, ip, r0
    5fe8:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    5fec:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5ff0:	00009b15 	andeq	r9, r0, r5, lsl fp
    5ff4:	001fee00 	andseq	lr, pc, r0, lsl #28
    5ff8:	00611c00 	rsbeq	r1, r1, r0, lsl #24
    5ffc:	1f012101 	svcne	0x00012101
    6000:	000000c7 	andeq	r0, r0, r7, asr #1
    6004:	00002001 	andeq	r2, r0, r1
    6008:	0100731c 	tsteq	r0, ip, lsl r3
    600c:	152e0121 	strne	r0, [lr, #-289]!	; 0xfffffedf
    6010:	1f000002 	svcne	0x00000002
    6014:	1c000020 	stcne	0, cr0, [r0], {32}
    6018:	006e656c 	rsbeq	r6, lr, ip, ror #10
    601c:	36012101 	strcc	r2, [r1], -r1, lsl #2
    6020:	0000009b 	muleq	r0, fp, r0
    6024:	00002032 	andeq	r2, r0, r2, lsr r0
    6028:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    602c:	07012301 	streq	r2, [r1, -r1, lsl #6]
    6030:	0000009b 	muleq	r0, fp, r0
    6034:	00002045 	andeq	r2, r0, r5, asr #32
    6038:	0016121f 	andseq	r1, r6, pc, lsl r2
    603c:	01320100 	teqeq	r2, r0, lsl #2
    6040:	00000001 	andeq	r0, r0, r1
    6044:	09f62000 	ldmibeq	r6!, {sp}^
    6048:	00000000 	andeq	r0, r0, r0
    604c:	0af00000 	beq	ffc06054 <_estack+0xdfc01054>
    6050:	43010000 	movwmi	r0, #4096	; 0x1000
    6054:	05a30301 	streq	r0, [r3, #769]!	; 0x301
    6058:	12210000 	eorne	r0, r1, #0
    605c:	2100000a 	tstcs	r0, sl
    6060:	00000a05 	andeq	r0, r0, r5, lsl #20
    6064:	09f62200 	ldmibeq	r6!, {r9, sp}^
	...
    6070:	50010000 	andpl	r0, r1, r0
    6074:	12210301 	eorne	r0, r1, #67108864	; 0x4000000
    6078:	2100000a 	tstcs	r0, sl
    607c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6080:	01180000 	tsteq	r8, r0
    6084:	000015f2 	strdeq	r1, [r0], -r2
    6088:	0106cb01 	tsteq	r6, r1, lsl #22
    608c:	0000009b 	muleq	r0, fp, r0
	...
    6098:	06819c01 	streq	r9, [r1], r1, lsl #24
    609c:	73190000 	tstvc	r9, #0
    60a0:	cb010074 	blgt	46278 <__ccfg+0x262d0>
    60a4:	00009b15 	andeq	r9, r0, r5, lsl fp
    60a8:	00206e00 	eoreq	r6, r0, r0, lsl #28
    60ac:	162f2300 	strtne	r2, [pc], -r0, lsl #6
    60b0:	cb010000 	blgt	460b8 <__ccfg+0x26110>
    60b4:	0000c71f 	andeq	ip, r0, pc, lsl r7
    60b8:	00208c00 	eoreq	r8, r0, r0, lsl #24
    60bc:	15de2300 	ldrbne	r2, [lr, #768]	; 0x300
    60c0:	cb010000 	blgt	460c8 <__ccfg+0x26120>
    60c4:	0000c72b 	andeq	ip, r0, fp, lsr #14
    60c8:	0020b500 	eoreq	fp, r0, r0, lsl #10
    60cc:	15ca2400 	strbne	r2, [sl, #1024]	; 0x400
    60d0:	e6010000 	str	r0, [r1], -r0
    60d4:	00000001 	andeq	r0, r0, r1
    60d8:	16b22400 	ldrtne	r2, [r2], r0, lsl #8
    60dc:	ea010000 	b	460e4 <__ccfg+0x2613c>
    60e0:	00000001 	andeq	r0, r0, r1
    60e4:	085e2500 	ldmdaeq	lr, {r8, sl, sp}^
    60e8:	00000000 	andeq	r0, r0, r0
    60ec:	0ac00000 	beq	ff0060f4 <_estack+0xdf0010f4>
    60f0:	fc010000 	stc2	0, cr0, [r1], {-0}
    60f4:	08782604 	ldmdaeq	r8!, {r2, r9, sl, sp}^
    60f8:	20d30000 	sbcscs	r0, r3, r0
    60fc:	6c260000 	stcvs	0, cr0, [r6], #-0
    6100:	e6000008 	str	r0, [r0], -r8
    6104:	27000020 	strcs	r0, [r0, -r0, lsr #32]
    6108:	000009f6 	strdeq	r0, [r0], -r6
    610c:	00000000 	andeq	r0, r0, r0
    6110:	00000ad8 	ldrdeq	r0, [r0], -r8
    6114:	64024301 	strvs	r4, [r2], #-769	; 0xfffffcff
    6118:	21000006 	tstcs	r0, r6
    611c:	00000a12 	andeq	r0, r0, r2, lsl sl
    6120:	000a0521 	andeq	r0, sl, r1, lsr #10
    6124:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    6128:	00000009 	andeq	r0, r0, r9
    612c:	00000000 	andeq	r0, r0, r0
    6130:	01000000 	mrseq	r0, (UNDEF: 0)
    6134:	12210248 	eorne	r0, r1, #72, 4	; 0x80000004
    6138:	2100000a 	tstcs	r0, sl
    613c:	00000a05 	andeq	r0, r0, r5, lsl #20
    6140:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    6144:	00163401 	andseq	r3, r6, r1, lsl #8
    6148:	06b00100 	ldrteq	r0, [r0], r0, lsl #2
    614c:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    6158:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    615c:	19000007 	stmdbne	r0, {r0, r1, r2}
    6160:	b0010061 	andlt	r0, r1, r1, rrx
    6164:	0000c715 	andeq	ip, r0, r5, lsl r7
    6168:	0020f900 	eoreq	pc, r0, r0, lsl #18
    616c:	00731900 	rsbseq	r1, r3, r0, lsl #18
    6170:	041eb001 	ldreq	fp, [lr], #-1
    6174:	22000007 	andcs	r0, r0, #7
    6178:	19000021 	stmdbne	r0, {r0, r5}
    617c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6180:	9b26b001 	blls	9b218c <__ccfg+0x9921e4>
    6184:	56000000 	strpl	r0, [r0], -r0
    6188:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    618c:	000009f6 	strdeq	r0, [r0], -r6
    6190:	00000000 	andeq	r0, r0, r0
    6194:	00000aa8 	andeq	r0, r0, r8, lsr #21
    6198:	e802ba01 	stmda	r2, {r0, r9, fp, ip, sp, pc}
    619c:	21000006 	tstcs	r0, r6
    61a0:	00000a12 	andeq	r0, r0, r2, lsl sl
    61a4:	000a0521 	andeq	r0, sl, r1, lsr #10
    61a8:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    61ac:	00000009 	andeq	r0, r0, r9
    61b0:	00000000 	andeq	r0, r0, r0
    61b4:	01000000 	mrseq	r0, (UNDEF: 0)
    61b8:	122102c4 	eorne	r0, r1, #196, 4	; 0x4000000c
    61bc:	2100000a 	tstcs	r0, sl
    61c0:	00000a05 	andeq	r0, r0, r5, lsl #20
    61c4:	040b0000 	streq	r0, [fp], #-0
    61c8:	000000b1 	strheq	r0, [r0], -r1
    61cc:	15e90117 	strbne	r0, [r9, #279]!	; 0x117
    61d0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    61d4:	0014e006 	andseq	lr, r4, r6
    61d8:	0014f400 	andseq	pc, r4, r0, lsl #8
    61dc:	299c0100 	ldmibcs	ip, {r8}
    61e0:	00160a01 	andseq	r0, r6, r1, lsl #20
    61e4:	06930100 	ldreq	r0, [r3], r0, lsl #2
    61e8:	0000009b 	muleq	r0, fp, r0
    61ec:	000014cc 	andeq	r1, r0, ip, asr #9
    61f0:	000014e0 	andeq	r1, r0, r0, ror #9
    61f4:	ac2a9c01 	stcge	12, cr9, [sl], #-4
    61f8:	01000016 	tsteq	r0, r6, lsl r0
    61fc:	14680d82 	strbtne	r0, [r8], #-3458	; 0xfffff27e
    6200:	14a80000 	strtne	r0, [r8], #0
    6204:	9c010000 	stcls	0, cr0, [r1], {-0}
    6208:	00000796 	muleq	r0, r6, r7
    620c:	00079f28 	andeq	r9, r7, r8, lsr #30
    6210:	00148200 	andseq	r8, r4, r0, lsl #4
    6214:	00149600 	andseq	r9, r4, r0, lsl #12
    6218:	038a0100 	orreq	r0, sl, #0, 2
    621c:	0009f627 	andeq	pc, r9, r7, lsr #12
    6220:	00148200 	andseq	r8, r4, r0, lsl #4
    6224:	000a7800 	andeq	r7, sl, r0, lsl #16
    6228:	02720100 	rsbseq	r0, r2, #0, 2
    622c:	00000779 	andeq	r0, r0, r9, ror r7
    6230:	000a1221 	andeq	r1, sl, r1, lsr #4
    6234:	0a052100 	beq	14e63c <__ccfg+0x12e694>
    6238:	25000000 	strcs	r0, [r0, #-0]
    623c:	000009f6 	strdeq	r0, [r0], -r6
    6240:	0000148e 	andeq	r1, r0, lr, lsl #9
    6244:	00000a90 	muleq	r0, r0, sl
    6248:	21027401 	tstcs	r2, r1, lsl #8
    624c:	00000a12 	andeq	r0, r0, r2, lsl sl
    6250:	000a0521 	andeq	r0, sl, r1, lsr #10
    6254:	00000000 	andeq	r0, r0, r0
    6258:	00168c2b 	andseq	r8, r6, fp, lsr #24
    625c:	0d780100 	ldfeqe	f0, [r8, #-0]
    6260:	16992b01 	ldrne	r2, [r9], r1, lsl #22
    6264:	6d010000 	stcvs	0, cr0, [r1, #-0]
    6268:	b82b010d 	stmdalt	fp!, {r0, r2, r3, r8}
    626c:	01000016 	tsteq	r0, r6, lsl r0
    6270:	2c010d66 	stccs	13, cr0, [r1], {102}	; 0x66
    6274:	000016be 			; <UNDEFINED> instruction: 0x000016be
    6278:	010d5801 	tsteq	sp, r1, lsl #16
    627c:	00001414 	andeq	r1, r0, r4, lsl r4
    6280:	00001468 	andeq	r1, r0, r8, ror #8
    6284:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    6288:	73190000 	tstvc	r9, #0
    628c:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    6290:	00009b19 	andeq	r9, r0, r9, lsl fp
    6294:	00217400 	eoreq	r7, r1, r0, lsl #8
    6298:	65641900 	strbvs	r1, [r4, #-2304]!	; 0xfffff700
    629c:	5801006c 	stmdapl	r1, {r2, r3, r5, r6}
    62a0:	00009b22 	andeq	r9, r0, r2, lsr #22
    62a4:	00218700 	eoreq	r8, r1, r0, lsl #14
    62a8:	08422500 	stmdaeq	r2, {r8, sl, sp}^
    62ac:	141c0000 	ldrne	r0, [ip], #-0
    62b0:	0a300000 	beq	c062b8 <__ccfg+0xbe6310>
    62b4:	5c010000 	stcpl	0, cr0, [r1], {-0}
    62b8:	0a302d13 	beq	c1170c <__ccfg+0xbf1764>
    62bc:	532e0000 			; <UNDEFINED> instruction: 0x532e0000
    62c0:	9a000008 	bls	62e8 <__exidx_end+0x36b0>
    62c4:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    62c8:	000009f6 	strdeq	r0, [r0], -r6
    62cc:	0000141c 	andeq	r1, r0, ip, lsl r4
    62d0:	00000a50 	andeq	r0, r0, r0, asr sl
    62d4:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
    62d8:	21000008 	tstcs	r0, r8
    62dc:	00000a12 	andeq	r0, r0, r2, lsl sl
    62e0:	000a0521 	andeq	r0, sl, r1, lsr #10
    62e4:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    62e8:	36000009 	strcc	r0, [r0], -r9
    62ec:	3a000014 	bcc	6344 <__exidx_end+0x370c>
    62f0:	01000014 	tsteq	r0, r4, lsl r0
    62f4:	12210254 	eorne	r0, r1, #84, 4	; 0x40000005
    62f8:	2100000a 	tstcs	r0, sl
    62fc:	00000a05 	andeq	r0, r0, r5, lsl #20
    6300:	00000000 	andeq	r0, r0, r0
    6304:	00163c2f 	andseq	r3, r6, pc, lsr #24
    6308:	0d4b0100 	stfeqe	f0, [fp, #-0]
    630c:	000000b1 	strheq	r0, [r0], -r1
    6310:	00085e01 	andeq	r5, r8, r1, lsl #28
    6314:	00723000 	rsbseq	r3, r2, r0
    6318:	b1074f01 	tstlt	r7, r1, lsl #30
    631c:	00000000 	andeq	r0, r0, r0
    6320:	00161831 	andseq	r1, r6, r1, lsr r8
    6324:	0d410100 	stfeqe	f0, [r1, #-0]
    6328:	08830101 	stmeq	r3, {r0, r8}
    632c:	63320000 	teqvs	r2, #0
    6330:	0100646d 	tsteq	r0, sp, ror #8
    6334:	00b11941 	adcseq	r1, r1, r1, asr #18
    6338:	61320000 	teqvs	r2, r0
    633c:	24410100 	strbcs	r0, [r1], #-256	; 0xffffff00
    6340:	000000c7 	andeq	r0, r0, r7, asr #1
    6344:	15e32c00 	strbne	r2, [r3, #3072]!	; 0xc00
    6348:	3a010000 	bcc	46350 <__ccfg+0x263a8>
    634c:	13fc010d 	mvnsne	r0, #1073741827	; 0x40000003
    6350:	14140000 	ldrne	r0, [r4], #-0
    6354:	9c010000 	stcls	0, cr0, [r1], {-0}
    6358:	000008e5 	andeq	r0, r0, r5, ror #17
    635c:	646d6319 	strbtvs	r6, [sp], #-793	; 0xfffffce7
    6360:	193a0100 	ldmdbne	sl!, {r8}
    6364:	000000b1 	strheq	r0, [r0], -r1
    6368:	000021ad 	andeq	r2, r0, sp, lsr #3
    636c:	0009f627 	andeq	pc, r9, r7, lsr #12
    6370:	0013fc00 	andseq	pc, r3, r0, lsl #24
    6374:	000a1800 	andeq	r1, sl, r0, lsl #16
    6378:	023c0100 	eorseq	r0, ip, #0, 2
    637c:	000008c9 	andeq	r0, r0, r9, asr #17
    6380:	000a1221 	andeq	r1, sl, r1, lsr #4
    6384:	0a052100 	beq	14e78c <__ccfg+0x12e7e4>
    6388:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    638c:	000009f6 	strdeq	r0, [r0], -r6
    6390:	00001408 	andeq	r1, r0, r8, lsl #8
    6394:	0000140c 	andeq	r1, r0, ip, lsl #8
    6398:	21023e01 	tstcs	r2, r1, lsl #28
    639c:	00000a12 	andeq	r0, r0, r2, lsl sl
    63a0:	000a0521 	andeq	r0, sl, r1, lsr #10
    63a4:	2c000000 	stccs	0, cr0, [r0], {-0}
    63a8:	000016cd 	andeq	r1, r0, sp, asr #13
    63ac:	010d2901 	tsteq	sp, r1, lsl #18
    63b0:	000013cc 	andeq	r1, r0, ip, asr #7
    63b4:	000013fc 	strdeq	r1, [r0], -ip
    63b8:	09799c01 	ldmdbeq	r9!, {r0, sl, fp, ip, pc}^
    63bc:	62190000 	andsvs	r0, r9, #0
    63c0:	1c290100 	stfnes	f0, [r9], #-0
    63c4:	000000b1 	strheq	r0, [r0], -r1
    63c8:	000021c0 	andeq	r2, r0, r0, asr #3
    63cc:	01006930 	tsteq	r0, r0, lsr r9
    63d0:	0081062b 	addeq	r0, r1, fp, lsr #12
    63d4:	3d270000 	stccc	0, cr0, [r7, #-0]
    63d8:	d400000a 	strle	r0, [r0], #-10
    63dc:	e0000013 	and	r0, r0, r3, lsl r0
    63e0:	01000009 	tsteq	r0, r9
    63e4:	092e0332 	stmdbeq	lr!, {r1, r4, r5, r8, r9}
    63e8:	4c210000 	stcmi	0, cr0, [r1], #-0
    63ec:	0000000a 	andeq	r0, r0, sl
    63f0:	000a3d33 	andeq	r3, sl, r3, lsr sp
    63f4:	0013e000 	andseq	lr, r3, r0
    63f8:	0013e400 	andseq	lr, r3, r0, lsl #8
    63fc:	042f0100 	strteq	r0, [pc], #-256	; 6404 <__exidx_end+0x37cc>
    6400:	00000948 	andeq	r0, r0, r8, asr #18
    6404:	000a4c21 	andeq	r4, sl, r1, lsr #24
    6408:	20330000 	eorscs	r0, r3, r0
    640c:	e400000a 	str	r0, [r0], #-10
    6410:	e6000013 			; <UNDEFINED> instruction: 0xe6000013
    6414:	01000013 	tsteq	r0, r3, lsl r0
    6418:	09620431 	stmdbeq	r2!, {r0, r4, r5, sl}^
    641c:	2f210000 	svccs	0x00210000
    6420:	0000000a 	andeq	r0, r0, sl
    6424:	000a2025 	andeq	r2, sl, r5, lsr #32
    6428:	0013ec00 	andseq	lr, r3, r0, lsl #24
    642c:	000a0000 	andeq	r0, sl, r0
    6430:	03330100 	teqeq	r3, #0, 2
    6434:	000a2f21 	andeq	r2, sl, r1, lsr #30
    6438:	34000000 	strcc	r0, [r0], #-0
    643c:	000016c4 	andeq	r1, r0, r4, asr #13
    6440:	b10d1901 	tstlt	sp, r1, lsl #18
    6444:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    6448:	cc000013 	stcgt	0, cr0, [r0], {19}
    644c:	01000013 	tsteq	r0, r3, lsl r0
    6450:	0009f69c 	muleq	r9, ip, r6
    6454:	00693000 	rsbeq	r3, r9, r0
    6458:	81061b01 	tsthi	r6, r1, lsl #22
    645c:	35000000 	strcc	r0, [r0, #-0]
    6460:	1c010062 	stcne	0, cr0, [r1], {98}	; 0x62
    6464:	0000b107 	andeq	fp, r0, r7, lsl #2
    6468:	0021de00 	eoreq	sp, r1, r0, lsl #28
    646c:	0a3d2700 	beq	f50074 <__ccfg+0xf300cc>
    6470:	139c0000 	orrsne	r0, ip, #0
    6474:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
    6478:	22010000 	andcs	r0, r1, #0
    647c:	0009c503 	andeq	ip, r9, r3, lsl #10
    6480:	0a4c2100 	beq	130e888 <__ccfg+0x12ee8e0>
    6484:	27000000 	strcs	r0, [r0, -r0]
    6488:	00000a20 	andeq	r0, r0, r0, lsr #20
    648c:	000013a2 	andeq	r1, r0, r2, lsr #7
    6490:	000009a8 	andeq	r0, r0, r8, lsr #19
    6494:	df032301 	svcle	0x00032301
    6498:	21000009 	tstcs	r0, r9
    649c:	00000a2f 	andeq	r0, r0, pc, lsr #20
    64a0:	0a5a2500 	beq	168f8a8 <__ccfg+0x166f900>
    64a4:	13a40000 			; <UNDEFINED> instruction: 0x13a40000
    64a8:	09c00000 	stmibeq	r0, {}^	; <UNPREDICTABLE>
    64ac:	20010000 	andcs	r0, r1, r0
    64b0:	0a6c2107 	beq	1b0e8d4 <__ccfg+0x1aee92c>
    64b4:	00000000 	andeq	r0, r0, r0
    64b8:	00086036 	andeq	r6, r8, r6, lsr r0
    64bc:	02060200 	andeq	r0, r6, #0, 4
    64c0:	20030101 	andcs	r0, r3, r1, lsl #2
    64c4:	3700000a 	strcc	r0, [r0, -sl]
    64c8:	00000a31 	andeq	r0, r0, r1, lsr sl
    64cc:	23020602 	movwcs	r0, #9730	; 0x2602
    64d0:	00000067 	andeq	r0, r0, r7, rrx
    64d4:	000d3737 	andeq	r3, sp, r7, lsr r7
    64d8:	02060200 	andeq	r0, r6, #0, 4
    64dc:	00006737 	andeq	r6, r0, r7, lsr r7
    64e0:	9c360000 	ldcls	0, cr0, [r6], #-0
    64e4:	0200000b 	andeq	r0, r0, #11
    64e8:	01010154 	tsteq	r1, r4, asr r1
    64ec:	000a3d03 	andeq	r3, sl, r3, lsl #26
    64f0:	0a313700 	beq	c540f8 <__ccfg+0xc34150>
    64f4:	54020000 	strpl	r0, [r2], #-0
    64f8:	00671901 	rsbeq	r1, r7, r1, lsl #18
    64fc:	36000000 	strcc	r0, [r0], -r0
    6500:	00000ca1 	andeq	r0, r0, r1, lsr #25
    6504:	01011e02 	tsteq	r1, r2, lsl #28
    6508:	0a5a0301 	beq	1687114 <__ccfg+0x166716c>
    650c:	31370000 	teqcc	r7, r0
    6510:	0200000a 	andeq	r0, r0, #10
    6514:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
    6518:	00000000 	andeq	r0, r0, r0
    651c:	0014de38 	andseq	sp, r4, r8, lsr lr
    6520:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    6524:	00006701 	andeq	r6, r0, r1, lsl #14
    6528:	0a790300 	beq	1e47130 <__ccfg+0x1e27188>
    652c:	31390000 	teqcc	r9, r0
    6530:	0200000a 	andeq	r0, r0, #10
    6534:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    6538:	3a000000 	bcc	6540 <__exidx_end+0x3908>
    653c:	00000796 	muleq	r0, r6, r7
    6540:	000014a8 	andeq	r1, r0, r8, lsr #9
    6544:	000014cc 	andeq	r1, r0, ip, asr #9
    6548:	96289c01 	strtls	r9, [r8], -r1, lsl #24
    654c:	b2000007 	andlt	r0, r0, #7
    6550:	c6000014 			; <UNDEFINED> instruction: 0xc6000014
    6554:	01000014 	tsteq	r0, r4, lsl r0
    6558:	a83b0d78 	ldmdage	fp!, {r3, r4, r5, r6, r8, sl, fp}
    655c:	bc000007 	stclt	0, cr0, [r0], {7}
    6560:	c2000014 	andgt	r0, r0, #20
    6564:	01000014 	tsteq	r0, r4, lsl r0
    6568:	0000037c 	andeq	r0, r0, ip, ror r3
    656c:	00044c00 	andeq	r4, r4, r0, lsl #24
    6570:	ba000300 	blt	7178 <__exidx_end+0x4540>
    6574:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    6578:	00007301 	andeq	r7, r0, r1, lsl #6
    657c:	16df0c00 	ldrbne	r0, [pc], r0, lsl #24
    6580:	050c0000 	streq	r0, [ip, #-0]
    6584:	0b880000 	bleq	fe20658c <_estack+0xde20158c>
    6588:	00000000 	andeq	r0, r0, r0
    658c:	45b70000 	ldrmi	r0, [r7, #0]!
    6590:	01020000 	mrseq	r0, (UNDEF: 2)
    6594:	0006fd06 	andeq	pc, r6, r6, lsl #26
    6598:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    659c:	000005fe 	strdeq	r0, [r0], -lr
    65a0:	c5050402 	strgt	r0, [r5, #-1026]	; 0xfffffbfe
    65a4:	02000004 	andeq	r0, r0, #4
    65a8:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    65ac:	66030000 	strvs	r0, [r3], -r0
    65b0:	02000006 	andeq	r0, r0, #6
    65b4:	004d182e 	subeq	r1, sp, lr, lsr #16
    65b8:	01020000 	mrseq	r0, (UNDEF: 2)
    65bc:	0006fb08 	andeq	pc, r6, r8, lsl #22
    65c0:	03350300 	teqeq	r5, #0, 6
    65c4:	31020000 	mrscc	r0, (UNDEF: 2)
    65c8:	00006019 	andeq	r6, r0, r9, lsl r0
    65cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    65d0:	000007a7 	andeq	r0, r0, r7, lsr #15
    65d4:	00071403 	andeq	r1, r7, r3, lsl #8
    65d8:	19340200 	ldmdbne	r4!, {r9}
    65dc:	00000073 	andeq	r0, r0, r3, ror r0
    65e0:	fa070402 	blx	1c75f0 <__ccfg+0x1a7648>
    65e4:	02000002 	andeq	r0, r0, #2
    65e8:	02f50708 	rscseq	r0, r5, #8, 14	; 0x200000
    65ec:	04040000 	streq	r0, [r4], #-0
    65f0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    65f4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    65f8:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    65fc:	00036b03 	andeq	r6, r3, r3, lsl #22
    6600:	1b280300 	blne	a07208 <__ccfg+0x9e7260>
    6604:	0000009b 	muleq	r0, fp, r0
    6608:	00069605 	andeq	r9, r6, r5, lsl #12
    660c:	00090400 	andeq	r0, r9, r0, lsl #8
    6610:	000000b3 	strheq	r0, [r0], -r3
    6614:	00075e06 	andeq	r5, r7, r6, lsl #28
    6618:	0000b300 	andeq	fp, r0, r0, lsl #6
    661c:	00010000 	andeq	r0, r1, r0
    6620:	98030407 	stmdals	r3, {r0, r1, r2, sl}
    6624:	03000006 	movweq	r0, #6
    6628:	008f1863 	addeq	r1, pc, r3, ror #16
    662c:	00030000 	andeq	r0, r3, r0
    6630:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    6634:	00541227 	subseq	r1, r4, r7, lsr #4
    6638:	c1080000 	mrsgt	r0, (UNDEF: 8)
    663c:	03000000 	movweq	r0, #0
    6640:	000016c8 	andeq	r1, r0, r8, asr #13
    6644:	41122b04 	tstmi	r2, r4, lsl #22
    6648:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    664c:	000000d2 	ldrdeq	r0, [r0], -r2
    6650:	00215103 	eoreq	r5, r1, r3, lsl #2
    6654:	122c0400 	eorne	r0, ip, #0, 8
    6658:	00000067 	andeq	r0, r0, r7, rrx
    665c:	0000e308 	andeq	lr, r0, r8, lsl #6
    6660:	040d0300 	streq	r0, [sp], #-768	; 0xfffffd00
    6664:	2d040000 	stccs	0, cr0, [r4, #-0]
    6668:	00006712 	andeq	r6, r0, r2, lsl r7
    666c:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    6670:	018e0932 	orreq	r0, lr, r2, lsr r9
    6674:	230b0000 	movwcs	r0, #45056	; 0xb000
    6678:	04000000 	streq	r0, [r0], #-0
    667c:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    6680:	01010000 	mrseq	r0, (UNDEF: 1)
    6684:	130b0007 	movwne	r0, #45063	; 0xb007
    6688:	04000004 	streq	r0, [r0], #-4
    668c:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6690:	01010000 	mrseq	r0, (UNDEF: 1)
    6694:	cb0b0006 	blgt	2c66b4 <__ccfg+0x2a670c>
    6698:	04000001 	streq	r0, [r0], #-1
    669c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    66a0:	01010000 	mrseq	r0, (UNDEF: 1)
    66a4:	4d0b0005 	stcmi	0, cr0, [fp, #-20]	; 0xffffffec
    66a8:	04000004 	streq	r0, [r0], #-4
    66ac:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    66b0:	01010000 	mrseq	r0, (UNDEF: 1)
    66b4:	080b0004 	stmdaeq	fp, {r2}
    66b8:	04000006 	streq	r0, [r0], #-6
    66bc:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    66c0:	04010000 	streq	r0, [r1], #-0
    66c4:	1a0c0000 	bne	3066cc <__ccfg+0x2e6724>
    66c8:	04000004 	streq	r0, [r0], #-4
    66cc:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    66d0:	0c010000 	stceq	0, cr0, [r1], {-0}
    66d4:	00000576 	andeq	r0, r0, r6, ror r5
    66d8:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    66dc:	02000000 	andeq	r0, r0, #0
    66e0:	0008530c 	andeq	r5, r8, ip, lsl #6
    66e4:	033d0400 	teqeq	sp, #0, 8
    66e8:	000000d2 	ldrdeq	r0, [r0], -r2
    66ec:	058e0c03 	streq	r0, [lr, #3075]	; 0xc03
    66f0:	3f040000 	svccc	0x00040000
    66f4:	0000e308 	andeq	lr, r0, r8, lsl #6
    66f8:	03000400 	movweq	r0, #1024	; 0x400
    66fc:	00000219 	andeq	r0, r0, r9, lsl r2
    6700:	00034104 	andeq	r4, r3, r4, lsl #2
    6704:	09000001 	stmdbeq	r0, {r0}
    6708:	0000018e 	andeq	r0, r0, lr, lsl #3
    670c:	0004540d 	andeq	r5, r4, sp, lsl #8
    6710:	1a430400 	bne	10c7718 <__ccfg+0x10a7770>
    6714:	0000019a 	muleq	r0, sl, r1
    6718:	670d0101 	strvs	r0, [sp, -r1, lsl #2]
    671c:	04000001 	streq	r0, [r0], #-1
    6720:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    6724:	01010000 	mrseq	r0, (UNDEF: 1)
    6728:	01c1040e 	biceq	r0, r1, lr, lsl #8
    672c:	01020000 	mrseq	r0, (UNDEF: 2)
    6730:	00070408 	andeq	r0, r7, r8, lsl #8
    6734:	01c10800 	biceq	r0, r1, r0, lsl #16
    6738:	220d0000 	andcs	r0, sp, #0
    673c:	04000002 	streq	r0, [r0], #-2
    6740:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    6744:	01010000 	mrseq	r0, (UNDEF: 1)
    6748:	8f05080a 	svchi	0x0005080a
    674c:	00020c09 	andeq	r0, r2, r9, lsl #24
    6750:	04cf0c00 	strbeq	r0, [pc], #3072	; 6758 <__exidx_end+0x3b20>
    6754:	90050000 	andls	r0, r5, r0
    6758:	0000670b 	andeq	r6, r0, fp, lsl #14
    675c:	850c0000 	strhi	r0, [ip, #-0]
    6760:	05000009 	streq	r0, [r0, #-9]
    6764:	00c10891 	smulleq	r0, r1, r1, r8
    6768:	0c040000 	stceq	0, cr0, [r4], {-0}
    676c:	000001a0 	andeq	r0, r0, r0, lsr #3
    6770:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    6774:	06000000 	streq	r0, [r0], -r0
    6778:	07510300 	ldrbeq	r0, [r1, -r0, lsl #6]
    677c:	93050000 	movwls	r0, #20480	; 0x5000
    6780:	0001db03 	andeq	sp, r1, r3, lsl #22
    6784:	020c0f00 	andeq	r0, ip, #0, 30
    6788:	02230000 	eoreq	r0, r3, #0
    678c:	00100000 	andseq	r0, r0, r0
    6790:	00059a0d 	andeq	r9, r5, sp, lsl #20
    6794:	0f990500 	svceq	0x00990500
    6798:	00000218 	andeq	r0, r0, r8, lsl r2
    679c:	010a0101 	tsteq	sl, r1, lsl #2
    67a0:	5b099106 	blpl	26abc0 <__ccfg+0x24ac18>
    67a4:	0b000002 	bleq	67b4 <__exidx_end+0x3b7c>
    67a8:	00000595 	muleq	r0, r5, r5
    67ac:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    67b0:	01000000 	mrseq	r0, (UNDEF: 0)
    67b4:	0b000107 	bleq	6bd8 <__exidx_end+0x3fa0>
    67b8:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    67bc:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    67c0:	01000000 	mrseq	r0, (UNDEF: 0)
    67c4:	00000001 	andeq	r0, r0, r1
    67c8:	00061a03 	andeq	r1, r6, r3, lsl #20
    67cc:	03960600 	orrseq	r0, r6, #0, 12
    67d0:	00000231 	andeq	r0, r0, r1, lsr r2
    67d4:	00025b08 	andeq	r5, r2, r8, lsl #22
    67d8:	02670f00 	rsbeq	r0, r7, #0, 30
    67dc:	02770000 	rsbseq	r0, r7, #0
    67e0:	00100000 	andseq	r0, r0, r0
    67e4:	00026c08 	andeq	r6, r2, r8, lsl #24
    67e8:	02ba0d00 	adcseq	r0, sl, #0, 26
    67ec:	9c060000 	stcls	0, cr0, [r6], {-0}
    67f0:	00027717 	andeq	r7, r2, r7, lsl r7
    67f4:	0f010100 	svceq	0x00010100
    67f8:	000000cd 	andeq	r0, r0, sp, asr #1
    67fc:	00000295 	muleq	r0, r5, r2
    6800:	8a080010 	bhi	206848 <__ccfg+0x1e68a0>
    6804:	0d000002 	stceq	0, cr0, [r0, #-8]
    6808:	000003cd 	andeq	r0, r0, sp, asr #7
    680c:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    6810:	01000002 	tsteq	r0, r2
    6814:	05580d01 	ldrbeq	r0, [r8, #-3329]	; 0xfffff2ff
    6818:	c3050000 	movwgt	r0, #20480	; 0x5000
    681c:	0000e30e 	andeq	lr, r0, lr, lsl #6
    6820:	11010100 	mrsne	r0, (UNDEF: 17)
    6824:	0000071d 	andeq	r0, r0, sp, lsl r7
    6828:	10016e08 	andne	r6, r1, r8, lsl #28
    682c:	000002c3 	andeq	r0, r0, r3, asr #5
    6830:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    6834:	01120000 	tsteq	r2, r0
    6838:	000002d5 	ldrdeq	r0, [r0], -r5
    683c:	0000c113 	andeq	ip, r0, r3, lsl r1
    6840:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    6844:	e0000001 	and	r0, r0, r1
    6848:	10000002 	andne	r0, r0, r2
    684c:	02d50800 	sbcseq	r0, r5, #0, 16
    6850:	c2140000 	andsgt	r0, r4, #0
    6854:	08000005 	stmdaeq	r0, {r0, r2}
    6858:	e016017f 	ands	r0, r6, pc, ror r1
    685c:	01000002 	tsteq	r0, r2
    6860:	029d1401 	addseq	r1, sp, #16777216	; 0x1000000
    6864:	82080000 	andhi	r0, r8, #0
    6868:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    686c:	01010000 	mrseq	r0, (UNDEF: 1)
    6870:	00027a14 	andeq	r7, r2, r4, lsl sl
    6874:	02d80800 	sbcseq	r0, r8, #0, 16
    6878:	0000e30e 	andeq	lr, r0, lr, lsl #6
    687c:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    6880:	03030808 	movweq	r0, #14344	; 0x3808
    6884:	00033909 	andeq	r3, r3, r9, lsl #18
    6888:	32001600 	andcc	r1, r0, #0, 12
    688c:	07080000 	streq	r0, [r8, -r0]
    6890:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6894:	16000000 	strne	r0, [r0], -r0
    6898:	000008dd 	ldrdeq	r0, [r0], -sp
    689c:	08030808 	stmdaeq	r3, {r3, fp}
    68a0:	000000f4 	strdeq	r0, [r0], -r4
    68a4:	26110004 	ldrcs	r0, [r1], -r4
    68a8:	08000003 	stmdaeq	r0, {r0, r1}
    68ac:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    68b0:	17000003 	strne	r0, [r0, -r3]
    68b4:	00000018 	andeq	r0, r0, r8, lsl r0
    68b8:	030b0830 	movweq	r0, #47152	; 0xb830
    68bc:	0003a908 	andeq	sl, r3, r8, lsl #18
    68c0:	17981600 	ldrne	r1, [r8, r0, lsl #12]
    68c4:	14080000 	strne	r0, [r8], #-0
    68c8:	00c10803 	sbceq	r0, r1, r3, lsl #16
    68cc:	16000000 	strne	r0, [r0], -r0
    68d0:	000006d9 	ldrdeq	r0, [r0], -r9
    68d4:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    68d8:	000000c1 	andeq	r0, r0, r1, asr #1
    68dc:	07201602 	streq	r1, [r0, -r2, lsl #12]!
    68e0:	16080000 	strne	r0, [r8], -r0
    68e4:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    68e8:	16040000 	strne	r0, [r4], -r0
    68ec:	00000624 	andeq	r0, r0, r4, lsr #12
    68f0:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    68f4:	000000f4 	strdeq	r0, [r0], -r4
    68f8:	00071608 	andeq	r1, r7, r8, lsl #12
    68fc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6900:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    6904:	160c0000 	strne	r0, [ip], -r0
    6908:	000005ad 	andeq	r0, r0, sp, lsr #11
    690c:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    6910:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    6914:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    6918:	b9000003 	stmdblt	r0, {r0, r1}
    691c:	18000003 	stmdane	r0, {r0, r1}
    6920:	00000088 	andeq	r0, r0, r8, lsl #1
    6924:	040e0003 	streq	r0, [lr], #-3
    6928:	00000346 	andeq	r0, r0, r6, asr #6
    692c:	0006ce11 	andeq	ip, r6, r1, lsl lr
    6930:	031c0800 	tsteq	ip, #0, 16
    6934:	0003461b 	andeq	r4, r3, fp, lsl r6
    6938:	06ae1400 	strteq	r1, [lr], r0, lsl #8
    693c:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    6940:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    6944:	01010000 	mrseq	r0, (UNDEF: 1)
    6948:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    694c:	01190000 	tsteq	r9, r0
    6950:	000016d6 	ldrdeq	r1, [r0], -r6
    6954:	01050c01 	tsteq	r5, r1, lsl #24
    6958:	00000081 	andeq	r0, r0, r1, lsl #1
    695c:	000014f4 	strdeq	r1, [r0], -r4
    6960:	00001548 	andeq	r1, r0, r8, asr #10
    6964:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    6968:	731a0000 	tstvc	sl, #0
    696c:	0c010074 	stceq	0, cr0, [r1], {116}	; 0x74
    6970:	0000c114 	andeq	ip, r0, r4, lsl r1
    6974:	0021fc00 	eoreq	pc, r1, r0, lsl #24
    6978:	006d1b00 	rsbeq	r1, sp, r0, lsl #22
    697c:	49240c01 	stmdbmi	r4!, {r0, sl, fp}
    6980:	02000004 	andeq	r0, r0, #4
    6984:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    6988:	00001e7a 	andeq	r1, r0, sl, ror lr
    698c:	81060e01 	tsthi	r6, r1, lsl #28
    6990:	0f000000 	svceq	0x00000000
    6994:	1e000022 	cdpne	0, 0, cr0, cr0, cr2, {1}
    6998:	00667562 	rsbeq	r7, r6, r2, ror #10
    699c:	bb080f01 	bllt	20a5a8 <__ccfg+0x1ea600>
    69a0:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
    69a4:	1f000022 	svcne	0x00000022
    69a8:	01007061 	tsteq	r0, r1, rrx
    69ac:	00b50a10 	adcseq	r0, r5, r0, lsl sl
    69b0:	91020000 	mrsls	r0, (UNDEF: 2)
    69b4:	040e005c 	streq	r0, [lr], #-92	; 0xffffffa4
    69b8:	000001c8 	andeq	r0, r0, r8, asr #3
    69bc:	00044c00 	andeq	r4, r4, r0, lsl #24
    69c0:	66000300 	strvs	r0, [r0], -r0, lsl #6
    69c4:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    69c8:	00007301 	andeq	r7, r0, r1, lsl #6
    69cc:	172a0c00 	strne	r0, [sl, -r0, lsl #24]!
    69d0:	050c0000 	streq	r0, [ip, #-0]
    69d4:	0b980000 	bleq	fe6069dc <_estack+0xde6019dc>
    69d8:	00000000 	andeq	r0, r0, r0
    69dc:	47590000 	ldrbmi	r0, [r9, -r0]
    69e0:	01020000 	mrseq	r0, (UNDEF: 2)
    69e4:	0006fd06 	andeq	pc, r6, r6, lsl #26
    69e8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    69ec:	000005fe 	strdeq	r0, [r0], -lr
    69f0:	c5050402 	strgt	r0, [r5, #-1026]	; 0xfffffbfe
    69f4:	02000004 	andeq	r0, r0, #4
    69f8:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    69fc:	66030000 	strvs	r0, [r3], -r0
    6a00:	02000006 	andeq	r0, r0, #6
    6a04:	004d182e 	subeq	r1, sp, lr, lsr #16
    6a08:	01020000 	mrseq	r0, (UNDEF: 2)
    6a0c:	0006fb08 	andeq	pc, r6, r8, lsl #22
    6a10:	03350300 	teqeq	r5, #0, 6
    6a14:	31020000 	mrscc	r0, (UNDEF: 2)
    6a18:	00006019 	andeq	r6, r0, r9, lsl r0
    6a1c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6a20:	000007a7 	andeq	r0, r0, r7, lsr #15
    6a24:	00071403 	andeq	r1, r7, r3, lsl #8
    6a28:	19340200 	ldmdbne	r4!, {r9}
    6a2c:	00000073 	andeq	r0, r0, r3, ror r0
    6a30:	fa070402 	blx	1c7a40 <__ccfg+0x1a7a98>
    6a34:	02000002 	andeq	r0, r0, #2
    6a38:	02f50708 	rscseq	r0, r5, #8, 14	; 0x200000
    6a3c:	04040000 	streq	r0, [r4], #-0
    6a40:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6a44:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6a48:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6a4c:	00036b03 	andeq	r6, r3, r3, lsl #22
    6a50:	1b280300 	blne	a07658 <__ccfg+0x9e76b0>
    6a54:	0000009b 	muleq	r0, fp, r0
    6a58:	00069605 	andeq	r9, r6, r5, lsl #12
    6a5c:	00090400 	andeq	r0, r9, r0, lsl #8
    6a60:	000000b3 	strheq	r0, [r0], -r3
    6a64:	00075e06 	andeq	r5, r7, r6, lsl #28
    6a68:	0000b300 	andeq	fp, r0, r0, lsl #6
    6a6c:	00010000 	andeq	r0, r1, r0
    6a70:	98030407 	stmdals	r3, {r0, r1, r2, sl}
    6a74:	03000006 	movweq	r0, #6
    6a78:	008f1863 	addeq	r1, pc, r3, ror #16
    6a7c:	00030000 	andeq	r0, r3, r0
    6a80:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    6a84:	00541227 	subseq	r1, r4, r7, lsr #4
    6a88:	c1080000 	mrsgt	r0, (UNDEF: 8)
    6a8c:	03000000 	movweq	r0, #0
    6a90:	000016c8 	andeq	r1, r0, r8, asr #13
    6a94:	41122b04 	tstmi	r2, r4, lsl #22
    6a98:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    6a9c:	000000d2 	ldrdeq	r0, [r0], -r2
    6aa0:	00215103 	eoreq	r5, r1, r3, lsl #2
    6aa4:	122c0400 	eorne	r0, ip, #0, 8
    6aa8:	00000067 	andeq	r0, r0, r7, rrx
    6aac:	0000e308 	andeq	lr, r0, r8, lsl #6
    6ab0:	040d0300 	streq	r0, [sp], #-768	; 0xfffffd00
    6ab4:	2d040000 	stccs	0, cr0, [r4, #-0]
    6ab8:	00006712 	andeq	r6, r0, r2, lsl r7
    6abc:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    6ac0:	018e0932 	orreq	r0, lr, r2, lsr r9
    6ac4:	230b0000 	movwcs	r0, #45056	; 0xb000
    6ac8:	04000000 	streq	r0, [r0], #-0
    6acc:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    6ad0:	01010000 	mrseq	r0, (UNDEF: 1)
    6ad4:	130b0007 	movwne	r0, #45063	; 0xb007
    6ad8:	04000004 	streq	r0, [r0], #-4
    6adc:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6ae0:	01010000 	mrseq	r0, (UNDEF: 1)
    6ae4:	cb0b0006 	blgt	2c6b04 <__ccfg+0x2a6b5c>
    6ae8:	04000001 	streq	r0, [r0], #-1
    6aec:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    6af0:	01010000 	mrseq	r0, (UNDEF: 1)
    6af4:	4d0b0005 	stcmi	0, cr0, [fp, #-20]	; 0xffffffec
    6af8:	04000004 	streq	r0, [r0], #-4
    6afc:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    6b00:	01010000 	mrseq	r0, (UNDEF: 1)
    6b04:	080b0004 	stmdaeq	fp, {r2}
    6b08:	04000006 	streq	r0, [r0], #-6
    6b0c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    6b10:	04010000 	streq	r0, [r1], #-0
    6b14:	1a0c0000 	bne	306b1c <__ccfg+0x2e6b74>
    6b18:	04000004 	streq	r0, [r0], #-4
    6b1c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    6b20:	0c010000 	stceq	0, cr0, [r1], {-0}
    6b24:	00000576 	andeq	r0, r0, r6, ror r5
    6b28:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    6b2c:	02000000 	andeq	r0, r0, #0
    6b30:	0008530c 	andeq	r5, r8, ip, lsl #6
    6b34:	033d0400 	teqeq	sp, #0, 8
    6b38:	000000d2 	ldrdeq	r0, [r0], -r2
    6b3c:	058e0c03 	streq	r0, [lr, #3075]	; 0xc03
    6b40:	3f040000 	svccc	0x00040000
    6b44:	0000e308 	andeq	lr, r0, r8, lsl #6
    6b48:	03000400 	movweq	r0, #1024	; 0x400
    6b4c:	00000219 	andeq	r0, r0, r9, lsl r2
    6b50:	00034104 	andeq	r4, r3, r4, lsl #2
    6b54:	09000001 	stmdbeq	r0, {r0}
    6b58:	0000018e 	andeq	r0, r0, lr, lsl #3
    6b5c:	0004540d 	andeq	r5, r4, sp, lsl #8
    6b60:	1a430400 	bne	10c7b68 <__ccfg+0x10a7bc0>
    6b64:	0000019a 	muleq	r0, sl, r1
    6b68:	670d0101 	strvs	r0, [sp, -r1, lsl #2]
    6b6c:	04000001 	streq	r0, [r0], #-1
    6b70:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    6b74:	01010000 	mrseq	r0, (UNDEF: 1)
    6b78:	01c1040e 	biceq	r0, r1, lr, lsl #8
    6b7c:	01020000 	mrseq	r0, (UNDEF: 2)
    6b80:	00070408 	andeq	r0, r7, r8, lsl #8
    6b84:	01c10800 	biceq	r0, r1, r0, lsl #16
    6b88:	220d0000 	andcs	r0, sp, #0
    6b8c:	04000002 	streq	r0, [r0], #-2
    6b90:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    6b94:	01010000 	mrseq	r0, (UNDEF: 1)
    6b98:	8f05080a 	svchi	0x0005080a
    6b9c:	00020c09 	andeq	r0, r2, r9, lsl #24
    6ba0:	04cf0c00 	strbeq	r0, [pc], #3072	; 6ba8 <__exidx_end+0x3f70>
    6ba4:	90050000 	andls	r0, r5, r0
    6ba8:	0000670b 	andeq	r6, r0, fp, lsl #14
    6bac:	850c0000 	strhi	r0, [ip, #-0]
    6bb0:	05000009 	streq	r0, [r0, #-9]
    6bb4:	00c10891 	smulleq	r0, r1, r1, r8
    6bb8:	0c040000 	stceq	0, cr0, [r4], {-0}
    6bbc:	000001a0 	andeq	r0, r0, r0, lsr #3
    6bc0:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    6bc4:	06000000 	streq	r0, [r0], -r0
    6bc8:	07510300 	ldrbeq	r0, [r1, -r0, lsl #6]
    6bcc:	93050000 	movwls	r0, #20480	; 0x5000
    6bd0:	0001db03 	andeq	sp, r1, r3, lsl #22
    6bd4:	020c0f00 	andeq	r0, ip, #0, 30
    6bd8:	02230000 	eoreq	r0, r3, #0
    6bdc:	00100000 	andseq	r0, r0, r0
    6be0:	00059a0d 	andeq	r9, r5, sp, lsl #20
    6be4:	0f990500 	svceq	0x00990500
    6be8:	00000218 	andeq	r0, r0, r8, lsl r2
    6bec:	010a0101 	tsteq	sl, r1, lsl #2
    6bf0:	5b099106 	blpl	26b010 <__ccfg+0x24b068>
    6bf4:	0b000002 	bleq	6c04 <__exidx_end+0x3fcc>
    6bf8:	00000595 	muleq	r0, r5, r5
    6bfc:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    6c00:	01000000 	mrseq	r0, (UNDEF: 0)
    6c04:	0b000107 	bleq	7028 <__exidx_end+0x43f0>
    6c08:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    6c0c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    6c10:	01000000 	mrseq	r0, (UNDEF: 0)
    6c14:	00000001 	andeq	r0, r0, r1
    6c18:	00061a03 	andeq	r1, r6, r3, lsl #20
    6c1c:	03960600 	orrseq	r0, r6, #0, 12
    6c20:	00000231 	andeq	r0, r0, r1, lsr r2
    6c24:	00025b08 	andeq	r5, r2, r8, lsl #22
    6c28:	02670f00 	rsbeq	r0, r7, #0, 30
    6c2c:	02770000 	rsbseq	r0, r7, #0
    6c30:	00100000 	andseq	r0, r0, r0
    6c34:	00026c08 	andeq	r6, r2, r8, lsl #24
    6c38:	02ba0d00 	adcseq	r0, sl, #0, 26
    6c3c:	9c060000 	stcls	0, cr0, [r6], {-0}
    6c40:	00027717 	andeq	r7, r2, r7, lsl r7
    6c44:	0f010100 	svceq	0x00010100
    6c48:	000000cd 	andeq	r0, r0, sp, asr #1
    6c4c:	00000295 	muleq	r0, r5, r2
    6c50:	8a080010 	bhi	206c98 <__ccfg+0x1e6cf0>
    6c54:	0d000002 	stceq	0, cr0, [r0, #-8]
    6c58:	000003cd 	andeq	r0, r0, sp, asr #7
    6c5c:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    6c60:	01000002 	tsteq	r0, r2
    6c64:	05580d01 	ldrbeq	r0, [r8, #-3329]	; 0xfffff2ff
    6c68:	c3050000 	movwgt	r0, #20480	; 0x5000
    6c6c:	0000e30e 	andeq	lr, r0, lr, lsl #6
    6c70:	11010100 	mrsne	r0, (UNDEF: 17)
    6c74:	0000071d 	andeq	r0, r0, sp, lsl r7
    6c78:	10016e08 	andne	r6, r1, r8, lsl #28
    6c7c:	000002c3 	andeq	r0, r0, r3, asr #5
    6c80:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    6c84:	01120000 	tsteq	r2, r0
    6c88:	000002d5 	ldrdeq	r0, [r0], -r5
    6c8c:	0000c113 	andeq	ip, r0, r3, lsl r1
    6c90:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    6c94:	e0000001 	and	r0, r0, r1
    6c98:	10000002 	andne	r0, r0, r2
    6c9c:	02d50800 	sbcseq	r0, r5, #0, 16
    6ca0:	c2140000 	andsgt	r0, r4, #0
    6ca4:	08000005 	stmdaeq	r0, {r0, r2}
    6ca8:	e016017f 	ands	r0, r6, pc, ror r1
    6cac:	01000002 	tsteq	r0, r2
    6cb0:	029d1401 	addseq	r1, sp, #16777216	; 0x1000000
    6cb4:	82080000 	andhi	r0, r8, #0
    6cb8:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    6cbc:	01010000 	mrseq	r0, (UNDEF: 1)
    6cc0:	00027a14 	andeq	r7, r2, r4, lsl sl
    6cc4:	02d80800 	sbcseq	r0, r8, #0, 16
    6cc8:	0000e30e 	andeq	lr, r0, lr, lsl #6
    6ccc:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    6cd0:	03030808 	movweq	r0, #14344	; 0x3808
    6cd4:	00033909 	andeq	r3, r3, r9, lsl #18
    6cd8:	32001600 	andcc	r1, r0, #0, 12
    6cdc:	07080000 	streq	r0, [r8, -r0]
    6ce0:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6ce4:	16000000 	strne	r0, [r0], -r0
    6ce8:	000008dd 	ldrdeq	r0, [r0], -sp
    6cec:	08030808 	stmdaeq	r3, {r3, fp}
    6cf0:	000000f4 	strdeq	r0, [r0], -r4
    6cf4:	26110004 	ldrcs	r0, [r1], -r4
    6cf8:	08000003 	stmdaeq	r0, {r0, r1}
    6cfc:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    6d00:	17000003 	strne	r0, [r0, -r3]
    6d04:	00000018 	andeq	r0, r0, r8, lsl r0
    6d08:	030b0830 	movweq	r0, #47152	; 0xb830
    6d0c:	0003a908 	andeq	sl, r3, r8, lsl #18
    6d10:	17981600 	ldrne	r1, [r8, r0, lsl #12]
    6d14:	14080000 	strne	r0, [r8], #-0
    6d18:	00c10803 	sbceq	r0, r1, r3, lsl #16
    6d1c:	16000000 	strne	r0, [r0], -r0
    6d20:	000006d9 	ldrdeq	r0, [r0], -r9
    6d24:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    6d28:	000000c1 	andeq	r0, r0, r1, asr #1
    6d2c:	07201602 	streq	r1, [r0, -r2, lsl #12]!
    6d30:	16080000 	strne	r0, [r8], -r0
    6d34:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    6d38:	16040000 	strne	r0, [r4], -r0
    6d3c:	00000624 	andeq	r0, r0, r4, lsr #12
    6d40:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    6d44:	000000f4 	strdeq	r0, [r0], -r4
    6d48:	00071608 	andeq	r1, r7, r8, lsl #12
    6d4c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6d50:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    6d54:	160c0000 	strne	r0, [ip], -r0
    6d58:	000005ad 	andeq	r0, r0, sp, lsr #11
    6d5c:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    6d60:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    6d64:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    6d68:	b9000003 	stmdblt	r0, {r0, r1}
    6d6c:	18000003 	stmdane	r0, {r0, r1}
    6d70:	00000088 	andeq	r0, r0, r8, lsl #1
    6d74:	040e0003 	streq	r0, [lr], #-3
    6d78:	00000346 	andeq	r0, r0, r6, asr #6
    6d7c:	0006ce11 	andeq	ip, r6, r1, lsl lr
    6d80:	031c0800 	tsteq	ip, #0, 16
    6d84:	0003461b 	andeq	r4, r3, fp, lsl r6
    6d88:	06ae1400 	strteq	r1, [lr], r0, lsl #8
    6d8c:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    6d90:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    6d94:	01010000 	mrseq	r0, (UNDEF: 1)
    6d98:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    6d9c:	200d0000 	andcs	r0, sp, r0
    6da0:	01000017 	tsteq	r0, r7, lsl r0
    6da4:	01bb0e0a 			; <UNDEFINED> instruction: 0x01bb0e0a
    6da8:	01010000 	mrseq	r0, (UNDEF: 1)
    6dac:	176a0119 			; <UNDEFINED> instruction: 0x176a0119
    6db0:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6db4:	00810105 	addeq	r0, r1, r5, lsl #2
    6db8:	15480000 	strbne	r0, [r8, #-0]
    6dbc:	15a80000 	strne	r0, [r8, #0]!
    6dc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    6dc4:	00000449 	andeq	r0, r0, r9, asr #8
    6dc8:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    6dcc:	c1130e01 	tstgt	r3, r1, lsl #28
    6dd0:	82000000 	andhi	r0, r0, #0
    6dd4:	1b000022 	blne	6e64 <__exidx_end+0x422c>
    6dd8:	00746d66 	rsbseq	r6, r4, r6, ror #26
    6ddc:	49230e01 	stmdbmi	r3!, {r0, r9, sl, fp}
    6de0:	02000004 	andeq	r0, r0, #4
    6de4:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    6de8:	00001e7a 	andeq	r1, r0, sl, ror lr
    6dec:	81061301 	tsthi	r6, r1, lsl #6
    6df0:	a0000000 	andge	r0, r0, r0
    6df4:	1e000022 	cdpne	0, 0, cr0, cr0, cr2, {1}
    6df8:	01007061 	tsteq	r0, r1, rrx
    6dfc:	00b50a14 	adcseq	r0, r5, r4, lsl sl
    6e00:	91020000 	mrsls	r0, (UNDEF: 2)
    6e04:	040e0064 	streq	r0, [lr], #-100	; 0xffffff9c
    6e08:	000001c8 	andeq	r0, r0, r8, asr #3
    6e0c:	00247400 	eoreq	r7, r4, r0, lsl #8
    6e10:	01000300 	mrseq	r0, LR_irq
    6e14:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    6e18:	00007301 	andeq	r7, r0, r1, lsl #6
    6e1c:	1b890c00 	blne	fe249e24 <_estack+0xde244e24>
    6e20:	050c0000 	streq	r0, [ip, #-0]
    6e24:	0d200000 	stceq	0, cr0, [r0, #-0]
    6e28:	00000000 	andeq	r0, r0, r0
    6e2c:	490c0000 	stmdbmi	ip, {}	; <UNPREDICTABLE>
    6e30:	42020000 	andmi	r0, r2, #0
    6e34:	06000022 	streq	r0, [r0], -r2, lsr #32
    6e38:	00311722 	eorseq	r1, r1, r2, lsr #14
    6e3c:	01030000 	mrseq	r0, (UNDEF: 3)
    6e40:	0006fd06 	andeq	pc, r6, r6, lsl #26
    6e44:	29150200 	ldmdbcs	r5, {r9}
    6e48:	25060000 	strcs	r0, [r6, #-0]
    6e4c:	00004418 	andeq	r4, r0, r8, lsl r4
    6e50:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    6e54:	000005fe 	strdeq	r0, [r0], -lr
    6e58:	c5050403 	strgt	r0, [r5, #-1027]	; 0xfffffbfd
    6e5c:	03000004 	movweq	r0, #4
    6e60:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    6e64:	66020000 	strvs	r0, [r2], -r0
    6e68:	06000006 	streq	r0, [r0], -r6
    6e6c:	0065182e 	rsbeq	r1, r5, lr, lsr #16
    6e70:	01030000 	mrseq	r0, (UNDEF: 3)
    6e74:	0006fb08 	andeq	pc, r6, r8, lsl #22
    6e78:	03350200 	teqeq	r5, #0, 4
    6e7c:	31060000 	mrscc	r0, (UNDEF: 6)
    6e80:	00007819 	andeq	r7, r0, r9, lsl r8
    6e84:	07020300 	streq	r0, [r2, -r0, lsl #6]
    6e88:	000007a7 	andeq	r0, r0, r7, lsr #15
    6e8c:	00071402 	andeq	r1, r7, r2, lsl #8
    6e90:	19340600 	ldmdbne	r4!, {r9, sl}
    6e94:	00000090 	muleq	r0, r0, r0
    6e98:	00007f04 	andeq	r7, r0, r4, lsl #30
    6e9c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    6ea0:	000002fa 	strdeq	r0, [r0], -sl
    6ea4:	00009005 	andeq	r9, r0, r5
    6ea8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    6eac:	000002f5 	strdeq	r0, [r0], -r5
    6eb0:	69050406 	stmdbvs	r5, {r1, r2, sl}
    6eb4:	0300746e 	movweq	r7, #1134	; 0x46e
    6eb8:	02ff0704 	rscseq	r0, pc, #4, 14	; 0x100000
    6ebc:	c7070000 	strgt	r0, [r7, -r0]
    6ec0:	07000006 	streq	r0, [r0, -r6]
    6ec4:	aa17015e 	bge	5c7444 <__ccfg+0x5a749c>
    6ec8:	02000000 	andeq	r0, r0, #0
    6ecc:	000007d5 	ldrdeq	r0, [r0], -r5
    6ed0:	4b0e2e08 	blmi	3926f8 <__ccfg+0x372750>
    6ed4:	02000000 	andeq	r0, r0, #0
    6ed8:	000001fb 	strdeq	r0, [r0], -fp
    6edc:	4b0e7408 	blmi	3a3f04 <__ccfg+0x383f5c>
    6ee0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    6ee4:	03a50804 			; <UNDEFINED> instruction: 0x03a50804
    6ee8:	000000f8 	strdeq	r0, [r0], -r8
    6eec:	00048409 	andeq	r8, r4, r9, lsl #8
    6ef0:	0ca70800 	stceq	8, cr0, [r7]
    6ef4:	000000b1 	strheq	r0, [r0], -r1
    6ef8:	00062909 	andeq	r2, r6, r9, lsl #18
    6efc:	13a80800 			; <UNDEFINED> instruction: 0x13a80800
    6f00:	000000f8 	strdeq	r0, [r0], -r8
    6f04:	00650a00 	rsbeq	r0, r5, r0, lsl #20
    6f08:	01080000 	mrseq	r0, (UNDEF: 8)
    6f0c:	aa0b0000 	bge	2c6f14 <__ccfg+0x2a6f6c>
    6f10:	03000000 	movweq	r0, #0
    6f14:	08080c00 	stmdaeq	r8, {sl, fp}
    6f18:	012c09a2 	smulwbeq	ip, r2, r9
    6f1c:	950d0000 	strls	r0, [sp, #-0]
    6f20:	08000002 	stmdaeq	r0, {r1}
    6f24:	00a307a4 	adceq	r0, r3, r4, lsr #15
    6f28:	0d000000 	stceq	0, cr0, [r0, #-0]
    6f2c:	000003c0 	andeq	r0, r0, r0, asr #7
    6f30:	d605a908 	strle	sl, [r5], -r8, lsl #18
    6f34:	04000000 	streq	r0, [r0], #-0
    6f38:	054d0200 	strbeq	r0, [sp, #-512]	; 0xfffffe00
    6f3c:	aa080000 	bge	206f44 <__ccfg+0x1e6f9c>
    6f40:	00010803 	andeq	r0, r1, r3, lsl #16
    6f44:	02040e00 	andeq	r0, r4, #0, 28
    6f48:	000004ef 	andeq	r0, r0, pc, ror #9
    6f4c:	90191609 	andsls	r1, r9, r9, lsl #12
    6f50:	02000000 	andeq	r0, r0, #0
    6f54:	000001ab 	andeq	r0, r0, fp, lsr #3
    6f58:	a30d0c0a 	movwge	r0, #56330	; 0xdc0a
    6f5c:	02000000 	andeq	r0, r0, #0
    6f60:	0000046b 	andeq	r0, r0, fp, ror #8
    6f64:	461b2309 	ldrmi	r2, [fp], -r9, lsl #6
    6f68:	0f000001 	svceq	0x00000001
    6f6c:	0000022e 	andeq	r0, r0, lr, lsr #4
    6f70:	08340918 	ldmdaeq	r4!, {r3, r4, r8, fp}
    6f74:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    6f78:	0008250d 	andeq	r2, r8, sp, lsl #10
    6f7c:	13360900 	teqne	r6, #0, 18
    6f80:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    6f84:	6b5f1000 	blvs	17caf8c <__ccfg+0x17aafe4>
    6f88:	07370900 	ldreq	r0, [r7, -r0, lsl #18]!
    6f8c:	000000a3 	andeq	r0, r0, r3, lsr #1
    6f90:	06760d04 	ldrbteq	r0, [r6], -r4, lsl #26
    6f94:	37090000 	strcc	r0, [r9, -r0]
    6f98:	0000a30b 	andeq	sl, r0, fp, lsl #6
    6f9c:	140d0800 	strne	r0, [sp], #-2048	; 0xfffff800
    6fa0:	09000006 	stmdbeq	r0, {r1, r2}
    6fa4:	00a31437 	adceq	r1, r3, r7, lsr r4
    6fa8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    6fac:	00000321 	andeq	r0, r0, r1, lsr #6
    6fb0:	a31b3709 	tstge	fp, #2359296	; 0x240000
    6fb4:	10000000 	andne	r0, r0, r0
    6fb8:	00785f10 	rsbseq	r5, r8, r0, lsl pc
    6fbc:	be0b3809 	cdplt	8, 0, cr3, cr11, cr9, {0}
    6fc0:	14000001 	strne	r0, [r0], #-1
    6fc4:	5e041100 	adfpls	f1, f4, f0
    6fc8:	0a000001 	beq	6fd4 <__exidx_end+0x439c>
    6fcc:	0000013a 	andeq	r0, r0, sl, lsr r1
    6fd0:	000001ce 	andeq	r0, r0, lr, asr #3
    6fd4:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    6fd8:	0f000000 	svceq	0x00000000
    6fdc:	00000691 	muleq	r0, r1, r6
    6fe0:	083c0924 	ldmdaeq	ip!, {r2, r5, r8, fp}
    6fe4:	00000251 	andeq	r0, r0, r1, asr r2
    6fe8:	0003860d 	andeq	r8, r3, sp, lsl #12
    6fec:	093e0900 	ldmdbeq	lr!, {r8, fp}
    6ff0:	000000a3 	andeq	r0, r0, r3, lsr #1
    6ff4:	02c70d00 	sbceq	r0, r7, #0, 26
    6ff8:	3f090000 	svccc	0x00090000
    6ffc:	0000a309 	andeq	sl, r0, r9, lsl #6
    7000:	700d0400 	andvc	r0, sp, r0, lsl #8
    7004:	09000002 	stmdbeq	r0, {r1}
    7008:	00a30940 	adceq	r0, r3, r0, asr #18
    700c:	0d080000 	stceq	0, cr0, [r8, #-0]
    7010:	00000421 	andeq	r0, r0, r1, lsr #8
    7014:	a3094109 	movwge	r4, #37129	; 0x9109
    7018:	0c000000 	stceq	0, cr0, [r0], {-0}
    701c:	0005a40d 	andeq	sl, r5, sp, lsl #8
    7020:	09420900 	stmdbeq	r2, {r8, fp}^
    7024:	000000a3 	andeq	r0, r0, r3, lsr #1
    7028:	06430d10 			; <UNDEFINED> instruction: 0x06430d10
    702c:	43090000 	movwmi	r0, #36864	; 0x9000
    7030:	0000a309 	andeq	sl, r0, r9, lsl #6
    7034:	490d1400 	stmdbmi	sp, {sl, ip}
    7038:	09000002 	stmdbeq	r0, {r1}
    703c:	00a30944 	adceq	r0, r3, r4, asr #18
    7040:	0d180000 	ldceq	0, cr0, [r8, #-0]
    7044:	0000038f 	andeq	r0, r0, pc, lsl #7
    7048:	a3094509 	movwge	r4, #38153	; 0x9509
    704c:	1c000000 	stcne	0, cr0, [r0], {-0}
    7050:	00056b0d 	andeq	r6, r5, sp, lsl #22
    7054:	09460900 	stmdbeq	r6, {r8, fp}^
    7058:	000000a3 	andeq	r0, r0, r3, lsr #1
    705c:	2a120020 	bcs	4870e4 <__ccfg+0x46713c>
    7060:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7064:	084f0901 	stmdaeq	pc, {r0, r8, fp}^	; <UNPREDICTABLE>
    7068:	00000296 	muleq	r0, r6, r2
    706c:	00078e0d 	andeq	r8, r7, sp, lsl #28
    7070:	0a500900 	beq	1409478 <__ccfg+0x13e94d0>
    7074:	00000296 	muleq	r0, r6, r2
    7078:	06df0d00 	ldrbeq	r0, [pc], r0, lsl #26
    707c:	51090000 	mrspl	r0, (UNDEF: 9)
    7080:	00029609 	andeq	r9, r2, r9, lsl #12
    7084:	cc138000 	ldcgt	0, cr8, [r3], {-0}
    7088:	09000007 	stmdbeq	r0, {r0, r1, r2}
    708c:	013a0a53 	teqeq	sl, r3, asr sl
    7090:	01000000 	mrseq	r0, (UNDEF: 0)
    7094:	00081013 	andeq	r1, r8, r3, lsl r0
    7098:	0a560900 	beq	15894a0 <__ccfg+0x15694f8>
    709c:	0000013a 	andeq	r0, r0, sl, lsr r1
    70a0:	0a000104 	beq	74b8 <__exidx_end+0x4880>
    70a4:	00000138 	andeq	r0, r0, r8, lsr r1
    70a8:	000002a6 	andeq	r0, r0, r6, lsr #5
    70ac:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    70b0:	12001f00 	andne	r1, r0, #0, 30
    70b4:	000005e5 	andeq	r0, r0, r5, ror #11
    70b8:	62090190 	andvs	r0, r9, #144, 2	; 0x24
    70bc:	0002e908 	andeq	lr, r2, r8, lsl #18
    70c0:	08250d00 	stmdaeq	r5!, {r8, sl, fp}
    70c4:	63090000 	movwvs	r0, #36864	; 0x9000
    70c8:	0002e912 	andeq	lr, r2, r2, lsl r9
    70cc:	9e0d0000 	cdpls	0, 0, cr0, cr13, cr0, {0}
    70d0:	09000003 	stmdbeq	r0, {r0, r1}
    70d4:	00a30664 	adceq	r0, r3, r4, ror #12
    70d8:	0d040000 	stceq	0, cr0, [r4, #-0]
    70dc:	00000203 	andeq	r0, r0, r3, lsl #4
    70e0:	ef096609 	svc	0x00096609
    70e4:	08000002 	stmdaeq	r0, {r1}
    70e8:	00002a0d 	andeq	r2, r0, sp, lsl #20
    70ec:	1e670900 	vmulne.f16	s1, s14, s0	; <UNPREDICTABLE>
    70f0:	00000251 	andeq	r0, r0, r1, asr r2
    70f4:	04110088 	ldreq	r0, [r1], #-136	; 0xffffff78
    70f8:	000002a6 	andeq	r0, r0, r6, lsr #5
    70fc:	0002ff0a 	andeq	pc, r2, sl, lsl #30
    7100:	0002ff00 	andeq	pc, r2, r0, lsl #30
    7104:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    7108:	001f0000 	andseq	r0, pc, r0
    710c:	03050411 	movweq	r0, #21521	; 0x5411
    7110:	01140000 	tsteq	r4, r0
    7114:	00074a0f 	andeq	r4, r7, pc, lsl #20
    7118:	7a090800 	bvc	249120 <__ccfg+0x229178>
    711c:	00032f08 	andeq	r2, r3, r8, lsl #30
    7120:	04ce0d00 	strbeq	r0, [lr], #3328	; 0xd00
    7124:	7b090000 	blvc	24712c <__ccfg+0x227184>
    7128:	00032f11 	andeq	r2, r3, r1, lsl pc
    712c:	a60d0000 	strge	r0, [sp], -r0
    7130:	09000016 	stmdbeq	r0, {r1, r2, r4}
    7134:	00a3067c 	adceq	r0, r3, ip, ror r6
    7138:	00040000 	andeq	r0, r4, r0
    713c:	00650411 	rsbeq	r0, r5, r1, lsl r4
    7140:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    7144:	68000003 	stmdavs	r0, {r0, r1}
    7148:	7808ba09 	stmdavc	r8, {r0, r3, r9, fp, ip, sp, pc}
    714c:	10000004 	andne	r0, r0, r4
    7150:	0900705f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, ip, sp, lr}
    7154:	032f12bb 			; <UNDEFINED> instruction: 0x032f12bb
    7158:	10000000 	andne	r0, r0, r0
    715c:	0900725f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
    7160:	00a307bc 	strhteq	r0, [r3], ip
    7164:	10040000 	andne	r0, r4, r0
    7168:	0900775f 	stmdbeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}
    716c:	00a307bd 	strhteq	r0, [r3], sp
    7170:	0d080000 	stceq	0, cr0, [r8, #-0]
    7174:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    7178:	4409be09 	strmi	fp, [r9], #-3593	; 0xfffff1f7
    717c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7180:	0005060d 	andeq	r0, r5, sp, lsl #12
    7184:	09bf0900 	ldmibeq	pc!, {r8, fp}	; <UNPREDICTABLE>
    7188:	00000044 	andeq	r0, r0, r4, asr #32
    718c:	625f100e 	subsvs	r1, pc, #14
    7190:	c0090066 	andgt	r0, r9, r6, rrx
    7194:	00030711 	andeq	r0, r3, r1, lsl r7
    7198:	960d1000 	strls	r1, [sp], -r0
    719c:	09000001 	stmdbeq	r0, {r0}
    71a0:	00a307c1 	adceq	r0, r3, r1, asr #15
    71a4:	0d180000 	ldceq	0, cr0, [r8, #-0]
    71a8:	00000208 	andeq	r0, r0, r8, lsl #4
    71ac:	380ac809 	stmdacc	sl, {r0, r3, fp, lr, pc}
    71b0:	1c000001 	stcne	0, cr0, [r0], {1}
    71b4:	0016360d 	andseq	r3, r6, sp, lsl #12
    71b8:	1dca0900 	vstrne.16	s1, [sl]	; <UNPREDICTABLE>
    71bc:	000005fd 	strdeq	r0, [r0], -sp
    71c0:	15fd0d20 	ldrbne	r0, [sp, #3360]!	; 0xd20
    71c4:	cc090000 	stcgt	0, cr0, [r9], {-0}
    71c8:	0006281d 	andeq	r2, r6, sp, lsl r8
    71cc:	360d2400 	strcc	r2, [sp], -r0, lsl #8
    71d0:	09000008 	stmdbeq	r0, {r3}
    71d4:	064d0dcf 	strbeq	r0, [sp], -pc, asr #27
    71d8:	0d280000 	stceq	0, cr0, [r8, #-0]
    71dc:	000015eb 	andeq	r1, r0, fp, ror #11
    71e0:	6809d009 	stmdavs	r9, {r0, r3, ip, lr, pc}
    71e4:	2c000006 	stccs	0, cr0, [r0], {6}
    71e8:	62755f10 	rsbsvs	r5, r5, #16, 30	; 0x40
    71ec:	11d30900 	bicsne	r0, r3, r0, lsl #18
    71f0:	00000307 	andeq	r0, r0, r7, lsl #6
    71f4:	755f1030 	ldrbvc	r1, [pc, #-48]	; 71cc <__exidx_end+0x4594>
    71f8:	d4090070 	strle	r0, [r9], #-112	; 0xffffff90
    71fc:	00032f12 	andeq	r2, r3, r2, lsl pc
    7200:	5f103800 	svcpl	0x00103800
    7204:	09007275 	stmdbeq	r0, {r0, r2, r4, r5, r6, r9, ip, sp, lr}
    7208:	00a307d5 	ldrdeq	r0, [r3], r5	; <UNPREDICTABLE>
    720c:	0d3c0000 	ldceq	0, cr0, [ip, #-0]
    7210:	0000084d 	andeq	r0, r0, sp, asr #16
    7214:	6e11d809 	cdpvs	8, 1, cr13, cr1, cr9, {0}
    7218:	40000006 	andmi	r0, r0, r6
    721c:	0007dc0d 	andeq	sp, r7, sp, lsl #24
    7220:	11d90900 	bicsne	r0, r9, r0, lsl #18
    7224:	0000067e 	andeq	r0, r0, lr, ror r6
    7228:	6c5f1043 	mrrcvs	0, 4, r1, pc, cr3	; <UNPREDICTABLE>
    722c:	dc090062 	stcle	0, cr0, [r9], {98}	; 0x62
    7230:	00030711 	andeq	r0, r3, r1, lsl r7
    7234:	880d4400 	stmdahi	sp, {sl, lr}
    7238:	09000006 	stmdbeq	r0, {r1, r2}
    723c:	00a307df 	ldrdeq	r0, [r3], pc	; <UNPREDICTABLE>
    7240:	0d4c0000 	stcleq	0, cr0, [ip, #-0]
    7244:	00000350 	andeq	r0, r0, r0, asr r3
    7248:	be0ae009 	cdplt	0, 0, cr14, cr10, cr9, {0}
    724c:	50000000 	andpl	r0, r0, r0
    7250:	0006230d 	andeq	r2, r6, sp, lsl #6
    7254:	12e30900 	rscne	r0, r3, #0, 18
    7258:	00000497 	muleq	r0, r7, r4
    725c:	06a00d54 	ssateq	r0, #1, r4, asr #26
    7260:	e7090000 	str	r0, [r9, -r0]
    7264:	0001520c 	andeq	r5, r1, ip, lsl #4
    7268:	ed0d5800 	stc	8, cr5, [sp, #-0]
    726c:	09000005 	stmdbeq	r0, {r0, r2}
    7270:	012c0ee9 	smulwteq	ip, r9, lr
    7274:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    7278:	00000808 	andeq	r0, r0, r8, lsl #16
    727c:	a309ea09 	movwge	lr, #39433	; 0x9a09
    7280:	64000000 	strvs	r0, [r0], #-0
    7284:	a3011500 	movwge	r1, #5376	; 0x1500
    7288:	97000000 	strls	r0, [r0, -r0]
    728c:	16000004 	strne	r0, [r0], -r4
    7290:	00000497 	muleq	r0, r7, r4
    7294:	00013816 	andeq	r3, r1, r6, lsl r8
    7298:	05eb1600 	strbeq	r1, [fp, #1536]!	; 0x600
    729c:	a3160000 	tstge	r6, #0
    72a0:	00000000 	andeq	r0, r0, r0
    72a4:	04a20411 	strteq	r0, [r2], #1041	; 0x411
    72a8:	97040000 	strls	r0, [r4, -r0]
    72ac:	17000004 	strne	r0, [r0, -r4]
    72b0:	000007a0 	andeq	r0, r0, r0, lsr #15
    72b4:	65090428 	strvs	r0, [r9, #-1064]	; 0xfffffbd8
    72b8:	05eb0802 	strbeq	r0, [fp, #2050]!	; 0x802
    72bc:	7f180000 	svcvc	0x00180000
    72c0:	09000005 	stmdbeq	r0, {r0, r2}
    72c4:	a3070267 	movwge	r0, #29287	; 0x7267
    72c8:	00000000 	andeq	r0, r0, r0
    72cc:	0004aa18 	andeq	sl, r4, r8, lsl sl
    72d0:	026c0900 	rsbeq	r0, ip, #0, 18
    72d4:	0006da0b 	andeq	sp, r6, fp, lsl #20
    72d8:	e9180400 	ldmdb	r8, {sl}
    72dc:	09000001 	stmdbeq	r0, {r0}
    72e0:	da14026c 	ble	507c98 <__ccfg+0x4e7cf0>
    72e4:	08000006 	stmdaeq	r0, {r1, r2}
    72e8:	00083c18 	andeq	r3, r8, r8, lsl ip
    72ec:	026c0900 	rsbeq	r0, ip, #0, 18
    72f0:	0006da1e 	andeq	sp, r6, lr, lsl sl
    72f4:	99180c00 	ldmdbls	r8, {sl, fp}
    72f8:	09000003 	stmdbeq	r0, {r0, r1}
    72fc:	a308026e 	movwge	r0, #33390	; 0x826e
    7300:	10000000 	andne	r0, r0, r0
    7304:	00036018 	andeq	r6, r3, r8, lsl r0
    7308:	026f0900 	rsbeq	r0, pc, #0, 18
    730c:	0008da08 	andeq	sp, r8, r8, lsl #20
    7310:	ef181400 	svc	0x00181400
    7314:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7318:	a3070272 	movwge	r0, #29298	; 0x7272
    731c:	30000000 	andcc	r0, r0, r0
    7320:	00078618 	andeq	r8, r7, r8, lsl r6
    7324:	02730900 	rsbseq	r0, r3, #0, 18
    7328:	0008f016 	andeq	pc, r8, r6, lsl r0	; <UNPREDICTABLE>
    732c:	97183400 	ldrls	r3, [r8, -r0, lsl #8]
    7330:	09000004 	stmdbeq	r0, {r2}
    7334:	a3070275 	movwge	r0, #29301	; 0x7275
    7338:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    733c:	00054318 	andeq	r4, r5, r8, lsl r3
    7340:	02770900 	rsbseq	r0, r7, #0, 18
    7344:	0009020a 	andeq	r0, r9, sl, lsl #4
    7348:	53183c00 	tstpl	r8, #0, 24
    734c:	09000002 	stmdbeq	r0, {r1}
    7350:	b813027a 	ldmdalt	r3, {r1, r3, r4, r5, r6, r9}
    7354:	40000001 	andmi	r0, r0, r1
    7358:	0002df18 	andeq	sp, r2, r8, lsl pc
    735c:	027b0900 	rsbseq	r0, fp, #0, 18
    7360:	0000a307 	andeq	sl, r0, r7, lsl #6
    7364:	c8184400 	ldmdagt	r8, {sl, lr}
    7368:	09000003 	stmdbeq	r0, {r0, r1}
    736c:	b813027c 	ldmdalt	r3, {r2, r3, r4, r5, r6, r9}
    7370:	48000001 	stmdami	r0, {r0}
    7374:	0004d418 	andeq	sp, r4, r8, lsl r4
    7378:	027d0900 	rsbseq	r0, sp, #0, 18
    737c:	00090814 	andeq	r0, r9, r4, lsl r8
    7380:	6e184c00 	cdpvs	12, 1, cr4, cr8, cr0, {0}
    7384:	09000006 	stmdbeq	r0, {r1, r2}
    7388:	a3070280 	movwge	r0, #29312	; 0x7280
    738c:	50000000 	andpl	r0, r0, r0
    7390:	0006f318 	andeq	pc, r6, r8, lsl r3	; <UNPREDICTABLE>
    7394:	02810900 	addeq	r0, r1, #0, 18
    7398:	0005eb09 	andeq	lr, r5, r9, lsl #22
    739c:	0d185400 	cfldrseq	mvf5, [r8, #-0]
    73a0:	09000007 	stmdbeq	r0, {r0, r1, r2}
    73a4:	b50702a4 	strlt	r0, [r7, #-676]	; 0xfffffd5c
    73a8:	58000008 	stmdapl	r0, {r3}
    73ac:	0005e519 	andeq	lr, r5, r9, lsl r5
    73b0:	02a80900 	adceq	r0, r8, #0, 18
    73b4:	0002e913 	andeq	lr, r2, r3, lsl r9
    73b8:	19014800 	stmdbne	r1, {fp, lr}
    73bc:	00000444 	andeq	r0, r0, r4, asr #8
    73c0:	1202a909 	andne	sl, r2, #147456	; 0x24000
    73c4:	000002a6 	andeq	r0, r0, r6, lsr #5
    73c8:	2b19014c 	blcs	647900 <__ccfg+0x627958>
    73cc:	09000004 	stmdbeq	r0, {r2}
    73d0:	1a0c02ad 	bne	307e8c <__ccfg+0x2e7ee4>
    73d4:	dc000009 	stcle	0, cr0, [r0], {9}
    73d8:	07631902 	strbeq	r1, [r3, -r2, lsl #18]!
    73dc:	b2090000 	andlt	r0, r9, #0
    73e0:	069b1002 	ldreq	r1, [fp], r2
    73e4:	02e00000 	rsceq	r0, r0, #0
    73e8:	00060f19 	andeq	r0, r6, r9, lsl pc
    73ec:	02b40900 	adcseq	r0, r4, #0, 18
    73f0:	0009260a 	andeq	r2, r9, sl, lsl #12
    73f4:	0002ec00 	andeq	lr, r2, r0, lsl #24
    73f8:	05f10411 	ldrbeq	r0, [r1, #1041]!	; 0x411
    73fc:	01030000 	mrseq	r0, (UNDEF: 3)
    7400:	00070408 	andeq	r0, r7, r8, lsl #8
    7404:	05f10400 	ldrbeq	r0, [r1, #1024]!	; 0x400
    7408:	04110000 	ldreq	r0, [r1], #-0
    740c:	00000478 	andeq	r0, r0, r8, ror r4
    7410:	00a30115 	adceq	r0, r3, r5, lsl r1
    7414:	06220000 	strteq	r0, [r2], -r0
    7418:	97160000 	ldrls	r0, [r6, -r0]
    741c:	16000004 	strne	r0, [r0], -r4
    7420:	00000138 	andeq	r0, r0, r8, lsr r1
    7424:	00062216 	andeq	r2, r6, r6, lsl r2
    7428:	00a31600 	adceq	r1, r3, r0, lsl #12
    742c:	11000000 	mrsne	r0, (UNDEF: 0)
    7430:	0005f804 	andeq	pc, r5, r4, lsl #16
    7434:	03041100 	movweq	r1, #16640	; 0x4100
    7438:	15000006 	strne	r0, [r0, #-6]
    743c:	0000ca01 	andeq	ip, r0, r1, lsl #20
    7440:	00064d00 	andeq	r4, r6, r0, lsl #26
    7444:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    7448:	38160000 	ldmdacc	r6, {}	; <UNPREDICTABLE>
    744c:	16000001 	strne	r0, [r0], -r1
    7450:	000000ca 	andeq	r0, r0, sl, asr #1
    7454:	0000a316 	andeq	sl, r0, r6, lsl r3
    7458:	04110000 	ldreq	r0, [r1], #-0
    745c:	0000062e 	andeq	r0, r0, lr, lsr #12
    7460:	00a30115 	adceq	r0, r3, r5, lsl r1
    7464:	06680000 	strbteq	r0, [r8], -r0
    7468:	97160000 	ldrls	r0, [r6, -r0]
    746c:	16000004 	strne	r0, [r0], -r4
    7470:	00000138 	andeq	r0, r0, r8, lsr r1
    7474:	53041100 	movwpl	r1, #16640	; 0x4100
    7478:	0a000006 	beq	7498 <__exidx_end+0x4860>
    747c:	00000065 	andeq	r0, r0, r5, rrx
    7480:	0000067e 	andeq	r0, r0, lr, ror r6
    7484:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7488:	0a000200 	beq	7c90 <__exidx_end+0x5058>
    748c:	00000065 	andeq	r0, r0, r5, rrx
    7490:	0000068e 	andeq	r0, r0, lr, lsl #13
    7494:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7498:	07000000 	streq	r0, [r0, -r0]
    749c:	0000033e 	andeq	r0, r0, lr, lsr r3
    74a0:	1a012409 	bne	504cc <__ccfg+0x30524>
    74a4:	00000335 	andeq	r0, r0, r5, lsr r3
    74a8:	0007581a 	andeq	r5, r7, sl, lsl r8
    74ac:	28090c00 	stmdacs	r9, {sl, fp}
    74b0:	06d40801 	ldrbeq	r0, [r4], r1, lsl #16
    74b4:	25180000 	ldrcs	r0, [r8, #-0]
    74b8:	09000008 	stmdbeq	r0, {r3}
    74bc:	d411012a 	ldrle	r0, [r1], #-298	; 0xfffffed6
    74c0:	00000006 	andeq	r0, r0, r6
    74c4:	0006c018 	andeq	ip, r6, r8, lsl r0
    74c8:	012b0900 			; <UNDEFINED> instruction: 0x012b0900
    74cc:	0000a307 	andeq	sl, r0, r7, lsl #6
    74d0:	8a180400 	bhi	6084d8 <__ccfg+0x5e8530>
    74d4:	09000004 	stmdbeq	r0, {r2}
    74d8:	da0b012c 	ble	2c7990 <__ccfg+0x2a79e8>
    74dc:	08000006 	stmdaeq	r0, {r1, r2}
    74e0:	9b041100 	blls	10b8e8 <__ccfg+0xeb940>
    74e4:	11000006 	tstne	r0, r6
    74e8:	00068e04 	andeq	r8, r6, r4, lsl #28
    74ec:	02d71a00 	sbcseq	r1, r7, #0, 20
    74f0:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
    74f4:	19080144 	stmdbne	r8, {r2, r6, r8}
    74f8:	18000007 	stmdane	r0, {r0, r1, r2}
    74fc:	00000f5f 	andeq	r0, r0, pc, asr pc
    7500:	12014509 	andne	r4, r1, #37748736	; 0x2400000
    7504:	00000719 	andeq	r0, r0, r9, lsl r7
    7508:	04de1800 	ldrbeq	r1, [lr], #2048	; 0x800
    750c:	46090000 	strmi	r0, [r9], -r0
    7510:	07191201 	ldreq	r1, [r9, -r1, lsl #4]
    7514:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    7518:	00000e04 	andeq	r0, r0, r4, lsl #28
    751c:	12014709 	andne	r4, r1, #2359296	; 0x240000
    7520:	00000078 	andeq	r0, r0, r8, ror r0
    7524:	780a000c 	stmdavc	sl, {r2, r3}
    7528:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    752c:	0b000007 	bleq	7550 <__exidx_end+0x4918>
    7530:	000000aa 	andeq	r0, r0, sl, lsr #1
    7534:	d01b0002 	andsle	r0, fp, r2
    7538:	07028509 	streq	r8, [r2, -r9, lsl #10]
    753c:	0000083e 	andeq	r0, r0, lr, lsr r8
    7540:	0007e218 	andeq	lr, r7, r8, lsl r2
    7544:	02870900 	addeq	r0, r7, #0, 18
    7548:	0000aa18 	andeq	sl, r0, r8, lsl sl
    754c:	6b180000 	blvs	607554 <__ccfg+0x5e75ac>
    7550:	09000007 	stmdbeq	r0, {r0, r1, r2}
    7554:	eb120288 	bl	487f7c <__ccfg+0x467fd4>
    7558:	04000005 	streq	r0, [r0], #-5
    755c:	00030c18 	andeq	r0, r3, r8, lsl ip
    7560:	02890900 	addeq	r0, r9, #0, 18
    7564:	00083e10 	andeq	r3, r8, r0, lsl lr
    7568:	4d180800 	ldcmi	8, cr0, [r8, #-0]
    756c:	09000006 	stmdbeq	r0, {r1, r2}
    7570:	ce17028a 	cdpgt	2, 1, cr0, cr7, cr10, {4}
    7574:	24000001 	strcs	r0, [r0], #-1
    7578:	0004b118 	andeq	fp, r4, r8, lsl r1
    757c:	028b0900 	addeq	r0, fp, #0, 18
    7580:	0000a30f 	andeq	sl, r0, pc, lsl #6
    7584:	20184800 	andscs	r4, r8, r0, lsl #16
    7588:	09000008 	stmdbeq	r0, {r3}
    758c:	9c2c028c 	sfmls	f0, 4, [ip], #-560	; 0xfffffdd0
    7590:	50000000 	andpl	r0, r0, r0
    7594:	00004e18 	andeq	r4, r0, r8, lsl lr
    7598:	028d0900 	addeq	r0, sp, #0, 18
    759c:	0006e01a 	andeq	lr, r6, sl, lsl r0
    75a0:	00185800 	andseq	r5, r8, r0, lsl #16
    75a4:	09000004 	stmdbeq	r0, {r2}
    75a8:	2c16028e 	lfmcs	f0, 4, [r6], {142}	; 0x8e
    75ac:	68000001 	stmdavs	r0, {r0}
    75b0:	00077818 	andeq	r7, r7, r8, lsl r8
    75b4:	028f0900 	addeq	r0, pc, #0, 18
    75b8:	00012c16 	andeq	r2, r1, r6, lsl ip
    75bc:	38187000 	ldmdacc	r8, {ip, sp, lr}
    75c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    75c4:	2c160290 	lfmcs	f0, 4, [r6], {144}	; 0x90
    75c8:	78000001 	stmdavc	r0, {r0}
    75cc:	00067e18 	andeq	r7, r6, r8, lsl lr
    75d0:	02910900 	addseq	r0, r1, #0, 18
    75d4:	00084e10 	andeq	r4, r8, r0, lsl lr
    75d8:	e9188000 	ldmdb	r8, {pc}
    75dc:	09000002 	stmdbeq	r0, {r1}
    75e0:	5e100292 	mrcpl	2, 0, r0, cr0, cr2, {4}
    75e4:	88000008 	stmdahi	r0, {r3}
    75e8:	00073018 	andeq	r3, r7, r8, lsl r0
    75ec:	02930900 	addseq	r0, r3, #0, 18
    75f0:	0000a30f 	andeq	sl, r0, pc, lsl #6
    75f4:	bd18a000 	ldclt	0, cr10, [r8, #-0]
    75f8:	09000001 	stmdbeq	r0, {r0}
    75fc:	2c160294 	lfmcs	f0, 4, [r6], {148}	; 0x94
    7600:	a4000001 	strge	r0, [r0], #-1
    7604:	00043518 	andeq	r3, r4, r8, lsl r5
    7608:	02950900 	addseq	r0, r5, #0, 18
    760c:	00012c16 	andeq	r2, r1, r6, lsl ip
    7610:	a318ac00 	tstge	r8, #0, 24
    7614:	09000003 	stmdbeq	r0, {r0, r1}
    7618:	2c160296 	lfmcs	f0, 4, [r6], {150}	; 0x96
    761c:	b4000001 	strlt	r0, [r0], #-1
    7620:	0004f718 	andeq	pc, r4, r8, lsl r7	; <UNPREDICTABLE>
    7624:	02970900 	addseq	r0, r7, #0, 18
    7628:	00012c16 	andeq	r2, r1, r6, lsl ip
    762c:	ef18bc00 	svc	0x0018bc00
    7630:	09000003 	stmdbeq	r0, {r0, r1}
    7634:	2c160298 	lfmcs	f0, 4, [r6], {152}	; 0x98
    7638:	c4000001 	strgt	r0, [r0], #-1
    763c:	00057d18 	andeq	r7, r5, r8, lsl sp
    7640:	02990900 	addseq	r0, r9, #0, 18
    7644:	0000a308 	andeq	sl, r0, r8, lsl #6
    7648:	0a00cc00 	beq	3a650 <__ccfg+0x1a6a8>
    764c:	000005f1 	strdeq	r0, [r0], -r1
    7650:	0000084e 	andeq	r0, r0, lr, asr #16
    7654:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7658:	0a001900 	beq	da60 <__exidx_end+0xae28>
    765c:	000005f1 	strdeq	r0, [r0], -r1
    7660:	0000085e 	andeq	r0, r0, lr, asr r8
    7664:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7668:	0a000700 	beq	9270 <__exidx_end+0x6638>
    766c:	000005f1 	strdeq	r0, [r0], -r1
    7670:	0000086e 	andeq	r0, r0, lr, ror #16
    7674:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7678:	1b001700 	blne	d280 <__exidx_end+0xa648>
    767c:	029e09f0 	addseq	r0, lr, #240, 18	; 0x3c0000
    7680:	00089507 	andeq	r9, r8, r7, lsl #10
    7684:	02d01800 	sbcseq	r1, r0, #0, 16
    7688:	a1090000 	mrsge	r0, (UNDEF: 9)
    768c:	08951b02 	ldmeq	r5, {r1, r8, r9, fp, ip}
    7690:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7694:	00000844 	andeq	r0, r0, r4, asr #16
    7698:	1802a209 	stmdane	r2, {r0, r3, r9, sp, pc}
    769c:	000008a5 	andeq	r0, r0, r5, lsr #17
    76a0:	2f0a0078 	svccs	0x000a0078
    76a4:	a5000003 	strge	r0, [r0, #-3]
    76a8:	0b000008 	bleq	76d0 <__exidx_end+0x4a98>
    76ac:	000000aa 	andeq	r0, r0, sl, lsr #1
    76b0:	aa0a001d 	bge	28772c <__ccfg+0x267784>
    76b4:	b5000000 	strlt	r0, [r0, #-0]
    76b8:	0b000008 	bleq	76e0 <__exidx_end+0x4aa8>
    76bc:	000000aa 	andeq	r0, r0, sl, lsr #1
    76c0:	f01c001d 			; <UNDEFINED> instruction: 0xf01c001d
    76c4:	03028309 	movweq	r8, #8969	; 0x2309
    76c8:	000008da 	ldrdeq	r0, [r0], -sl
    76cc:	0007a01d 	andeq	sl, r7, sp, lsl r0
    76d0:	029a0900 	addseq	r0, sl, #0, 18
    76d4:	0007290b 	andeq	r2, r7, fp, lsl #18
    76d8:	065c1d00 	ldrbeq	r1, [ip], -r0, lsl #26
    76dc:	a3090000 	movwge	r0, #36864	; 0x9000
    76e0:	086e0b02 	stmdaeq	lr!, {r1, r8, r9, fp}^
    76e4:	0a000000 	beq	76ec <__exidx_end+0x4ab4>
    76e8:	000005f1 	strdeq	r0, [r0], -r1
    76ec:	000008ea 	andeq	r0, r0, sl, ror #17
    76f0:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    76f4:	1e001800 	cdpne	8, 0, cr1, cr0, cr0, {0}
    76f8:	0000082b 	andeq	r0, r0, fp, lsr #16
    76fc:	ea041101 	b	10bb08 <__ccfg+0xebb60>
    7700:	1f000008 	svcne	0x00000008
    7704:	00090201 	andeq	r0, r9, r1, lsl #4
    7708:	04971600 	ldreq	r1, [r7], #1536	; 0x600
    770c:	11000000 	mrsne	r0, (UNDEF: 0)
    7710:	0008f604 	andeq	pc, r8, r4, lsl #12
    7714:	b8041100 	stmdalt	r4, {r8, ip}
    7718:	1f000001 	svcne	0x00000001
    771c:	00091a01 	andeq	r1, r9, r1, lsl #20
    7720:	00a31600 	adceq	r1, r3, r0, lsl #12
    7724:	11000000 	mrsne	r0, (UNDEF: 0)
    7728:	00092004 	andeq	r2, r9, r4
    772c:	0e041100 	adfeqs	f1, f4, f0
    7730:	0a000009 	beq	775c <__exidx_end+0x4b24>
    7734:	0000068e 	andeq	r0, r0, lr, lsl #13
    7738:	00000936 	andeq	r0, r0, r6, lsr r9
    773c:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    7740:	20000200 	andcs	r0, r0, r0, lsl #4
    7744:	00000637 	andeq	r0, r0, r7, lsr r6
    7748:	17033309 	strne	r3, [r3, -r9, lsl #6]
    774c:	00000497 	muleq	r0, r7, r4
    7750:	30200101 	eorcc	r0, r0, r1, lsl #2
    7754:	09000006 	stmdbeq	r0, {r1, r2}
    7758:	9d1d0334 	ldcls	3, cr0, [sp, #-208]	; 0xffffff30
    775c:	01000004 	tsteq	r0, r4
    7760:	1d480201 	sfmne	f0, 2, [r8, #-4]
    7764:	3b0b0000 	blcc	2c776c <__ccfg+0x2a77c4>
    7768:	00007f12 	andeq	r7, r0, r2, lsl pc
    776c:	0b080c00 	bleq	20a774 <__ccfg+0x1ea7cc>
    7770:	09840940 	stmibeq	r4, {r6, r8, fp}
    7774:	580d0000 	stmdapl	sp, {}	; <UNPREDICTABLE>
    7778:	0b000018 	bleq	77e0 <__exidx_end+0x4ba8>
    777c:	09840d41 	stmibeq	r4, {r0, r6, r8, sl, fp}
    7780:	0d000000 	stceq	0, cr0, [r0, #-0]
    7784:	00001a8f 	andeq	r1, r0, pc, lsl #21
    7788:	840d420b 	strhi	r4, [sp], #-523	; 0xfffffdf5
    778c:	04000009 	streq	r0, [r0], #-9
    7790:	59041100 	stmdbpl	r4, {r8, ip}
    7794:	02000000 	andeq	r0, r0, #0
    7798:	00001f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    779c:	6003430b 	andvs	r4, r3, fp, lsl #6
    77a0:	02000009 	andeq	r0, r0, #9
    77a4:	00001b10 	andeq	r1, r0, r0, lsl fp
    77a8:	a22b3c0c 	eorge	r3, fp, #12, 24	; 0xc00
    77ac:	0f000009 	svceq	0x00000009
    77b0:	00001dae 	andeq	r1, r0, lr, lsr #27
    77b4:	156f0c10 	strbne	r0, [pc, #-3088]!	; 6bac <__exidx_end+0x3f74>
    77b8:	000009fe 	strdeq	r0, [r0], -lr
    77bc:	0017870d 	andseq	r8, r7, sp, lsl #14
    77c0:	0d700c00 	ldcleq	12, cr0, [r0, #-0]
    77c4:	0000006c 	andeq	r0, r0, ip, rrx
    77c8:	1a5c0d00 	bne	170abd0 <__ccfg+0x16eac28>
    77cc:	710c0000 	mrsvc	r0, (UNDEF: 12)
    77d0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    77d4:	ee0d0200 	cdp	2, 0, cr0, cr13, cr0, {0}
    77d8:	0c00001a 	stceq	0, cr0, [r0], {26}
    77dc:	0bc01374 	bleq	ff00c5b4 <_estack+0xdf0075b4>
    77e0:	0d040000 	stceq	0, cr0, [r4, #-0]
    77e4:	0000187f 	andeq	r1, r0, pc, ror r8
    77e8:	540c750c 	strpl	r7, [ip], #-1292	; 0xfffffaf4
    77ec:	08000009 	stmdaeq	r0, {r0, r3}
    77f0:	001b1e0d 	andseq	r1, fp, sp, lsl #28
    77f4:	067d0c00 	ldrbteq	r0, [sp], -r0, lsl #24
    77f8:	00000b4c 	andeq	r0, r0, ip, asr #22
    77fc:	1a680d0c 	bne	1a0ac34 <__ccfg+0x19eac8c>
    7800:	810c0000 	mrshi	r0, (UNDEF: 12)
    7804:	000b9606 	andeq	r9, fp, r6, lsl #12
    7808:	02000d00 	andeq	r0, r0, #0, 26
    780c:	000018f3 	strdeq	r1, [r0], -r3
    7810:	0a2a3f0c 	beq	a97448 <__ccfg+0xa774a0>
    7814:	0f00000a 	svceq	0x0000000a
    7818:	000018e6 	andeq	r1, r0, r6, ror #17
    781c:	15e00c18 	strbne	r0, [r0, #3096]!	; 0xc18
    7820:	00000ac1 	andeq	r0, r0, r1, asr #21
    7824:	0017870d 	andseq	r8, r7, sp, lsl #14
    7828:	0de10c00 	stcleq	12, cr0, [r1]
    782c:	0000006c 	andeq	r0, r0, ip, rrx
    7830:	1a5c0d00 	bne	170ac38 <__ccfg+0x16eac90>
    7834:	e20c0000 	and	r0, ip, #0
    7838:	00006c0d 	andeq	r6, r0, sp, lsl #24
    783c:	ee0d0200 	cdp	2, 0, cr0, cr13, cr0, {0}
    7840:	0c00001a 	stceq	0, cr0, [r0], {26}
    7844:	0bc013e5 	bleq	ff00c7e0 <_estack+0xdf0077e0>
    7848:	0d040000 	stceq	0, cr0, [r4, #-0]
    784c:	0000187f 	andeq	r1, r0, pc, ror r8
    7850:	540ce60c 	strpl	lr, [ip], #-1548	; 0xfffff9f4
    7854:	08000009 	stmdaeq	r0, {r0, r3}
    7858:	001b1e0d 	andseq	r1, fp, sp, lsl #28
    785c:	06ee0c00 	strbteq	r0, [lr], r0, lsl #24
    7860:	00000bcc 	andeq	r0, r0, ip, asr #23
    7864:	1a680d0c 	bne	1a0ac9c <__ccfg+0x19eacf4>
    7868:	f20c0000 	vhadd.s8	d0, d12, d0
    786c:	000c1606 	andeq	r1, ip, r6, lsl #12
    7870:	c10d0d00 	tstgt	sp, r0, lsl #26
    7874:	0c00001e 	stceq	0, cr0, [r0], {30}
    7878:	006c0df3 	strdeq	r0, [ip], #-211	; 0xffffff2d	; <UNPREDICTABLE>
    787c:	0d0e0000 	stceq	0, cr0, [lr, #-0]
    7880:	00001c11 	andeq	r1, r0, r1, lsl ip
    7884:	6c0df40c 	cfstrsvs	mvf15, [sp], {12}
    7888:	10000000 	andne	r0, r0, r0
    788c:	0019260d 	andseq	r2, r9, sp, lsl #12
    7890:	06fa0c00 	ldrbteq	r0, [sl], r0, lsl #24
    7894:	00000c40 	andeq	r0, r0, r0, asr #24
    7898:	1ace0d12 	bne	ff38ace8 <_estack+0xdf385ce8>
    789c:	fb0c0000 	blx	3078a6 <__ccfg+0x2e78fe>
    78a0:	0000590c 	andeq	r5, r0, ip, lsl #18
    78a4:	1d0d1300 	stcne	3, cr1, [sp, #-0]
    78a8:	0c00001e 	stceq	0, cr0, [r0], {30}
    78ac:	00590cfc 	ldrsheq	r0, [r9], #-204	; 0xffffff34
    78b0:	0d140000 	ldceq	0, cr0, [r4, #-0]
    78b4:	00001e26 	andeq	r1, r0, r6, lsr #28
    78b8:	590cfd0c 	stmdbpl	ip, {r2, r3, r8, sl, fp, ip, sp, lr, pc}
    78bc:	15000000 	strne	r0, [r0, #-0]
    78c0:	001e2f0d 	andseq	r2, lr, sp, lsl #30
    78c4:	0dfe0c00 	ldcleq	12, cr0, [lr]
    78c8:	0000006c 	andeq	r0, r0, ip, rrx
    78cc:	3c020016 	stccc	0, cr0, [r2], {22}
    78d0:	0c00001f 	stceq	0, cr0, [r0], {31}
    78d4:	0acd3644 	beq	ff3551ec <_estack+0xdf3501ec>
    78d8:	231a0000 	tstcs	sl, #0
    78dc:	1400001f 	strne	r0, [r0], #-31	; 0xffffffe1
    78e0:	15019f0c 	strne	r9, [r1, #-3852]	; 0xfffff0f4
    78e4:	00000b4c 	andeq	r0, r0, ip, asr #22
    78e8:	00178718 	andseq	r8, r7, r8, lsl r7
    78ec:	01a00c00 	lsleq	r0, r0, #24
    78f0:	00006c0d 	andeq	r6, r0, sp, lsl #24
    78f4:	5c180000 	ldcpl	0, cr0, [r8], {-0}
    78f8:	0c00001a 	stceq	0, cr0, [r0], {26}
    78fc:	6c0d01a1 	stfvss	f0, [sp], {161}	; 0xa1
    7900:	02000000 	andeq	r0, r0, #0
    7904:	001aee18 	andseq	lr, sl, r8, lsl lr
    7908:	01a40c00 			; <UNDEFINED> instruction: 0x01a40c00
    790c:	000bc013 	andeq	ip, fp, r3, lsl r0
    7910:	7f180400 	svcvc	0x00180400
    7914:	0c000018 	stceq	0, cr0, [r0], {24}
    7918:	540c01a5 	strpl	r0, [ip], #-421	; 0xfffffe5b
    791c:	08000009 	stmdaeq	r0, {r0, r3}
    7920:	001b1e18 	andseq	r1, fp, r8, lsl lr
    7924:	01ad0c00 			; <UNDEFINED> instruction: 0x01ad0c00
    7928:	000c6a06 	andeq	r6, ip, r6, lsl #20
    792c:	68180c00 	ldmdavs	r8, {sl, fp}
    7930:	0c00001a 	stceq	0, cr0, [r0], {26}
    7934:	b90601b1 	stmdblt	r6, {r0, r4, r5, r7, r8}
    7938:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    793c:	001ace18 	andseq	ip, sl, r8, lsl lr
    7940:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    7944:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7948:	b5180e00 	ldrlt	r0, [r8, #-3584]	; 0xfffff200
    794c:	0c000019 	stceq	0, cr0, [r0], {25}
    7950:	540c01b3 	strpl	r0, [ip], #-435	; 0xfffffe4d
    7954:	10000009 	andne	r0, r0, r9
    7958:	0c010c00 	stceq	12, cr0, [r1], {-0}
    795c:	0b960476 	bleq	fe588b3c <_estack+0xde583b3c>
    7960:	e1210000 			; <UNDEFINED> instruction: 0xe1210000
    7964:	0c00001f 	stceq	0, cr0, [r0], {31}
    7968:	00590f77 	subseq	r0, r9, r7, ror pc
    796c:	04010000 	streq	r0, [r1], #-0
    7970:	68210004 	stmdavs	r1!, {r2}
    7974:	0c000019 	stceq	0, cr0, [r0], {25}
    7978:	00590f78 	subseq	r0, r9, r8, ror pc
    797c:	01010000 	mrseq	r0, (UNDEF: 1)
    7980:	28210003 	stmdacs	r1!, {r0, r1}
    7984:	0c00001a 	stceq	0, cr0, [r0], {26}
    7988:	00590f7a 	subseq	r0, r9, sl, ror pc
    798c:	02010000 	andeq	r0, r1, #0
    7990:	f6210001 			; <UNDEFINED> instruction: 0xf6210001
    7994:	0c000017 	stceq	0, cr0, [r0], {23}
    7998:	00590f7b 	subseq	r0, r9, fp, ror pc
    799c:	01010000 	mrseq	r0, (UNDEF: 1)
    79a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    79a4:	047e0c01 	ldrbteq	r0, [lr], #-3073	; 0xfffff3ff
    79a8:	00000bc0 	andeq	r0, r0, r0, asr #23
    79ac:	001e4b21 	andseq	r4, lr, r1, lsr #22
    79b0:	0f7f0c00 	svceq	0x007f0c00
    79b4:	00000059 	andeq	r0, r0, r9, asr r0
    79b8:	00040401 	andeq	r0, r4, r1, lsl #8
    79bc:	001fa721 	andseq	sl, pc, r1, lsr #14
    79c0:	0f800c00 	svceq	0x00800c00
    79c4:	00000059 	andeq	r0, r0, r9, asr r0
    79c8:	00000401 	andeq	r0, r0, r1, lsl #8
    79cc:	96041100 	strls	r1, [r4], -r0, lsl #2
    79d0:	11000009 	tstne	r0, r9
    79d4:	00007f04 	andeq	r7, r0, r4, lsl #30
    79d8:	0c010c00 	stceq	12, cr0, [r1], {-0}
    79dc:	0c1604e7 	cfldrseq	mvf0, [r6], {231}	; 0xe7
    79e0:	e1210000 			; <UNDEFINED> instruction: 0xe1210000
    79e4:	0c00001f 	stceq	0, cr0, [r0], {31}
    79e8:	00590fe8 	subseq	r0, r9, r8, ror #31
    79ec:	04010000 	streq	r0, [r1], #-0
    79f0:	68210004 	stmdavs	r1!, {r2}
    79f4:	0c000019 	stceq	0, cr0, [r0], {25}
    79f8:	00590fe9 	subseq	r0, r9, r9, ror #31
    79fc:	01010000 	mrseq	r0, (UNDEF: 1)
    7a00:	28210003 	stmdacs	r1!, {r0, r1}
    7a04:	0c00001a 	stceq	0, cr0, [r0], {26}
    7a08:	00590feb 	subseq	r0, r9, fp, ror #31
    7a0c:	02010000 	andeq	r0, r1, #0
    7a10:	f6210001 			; <UNDEFINED> instruction: 0xf6210001
    7a14:	0c000017 	stceq	0, cr0, [r0], {23}
    7a18:	00590fec 	subseq	r0, r9, ip, ror #31
    7a1c:	01010000 	mrseq	r0, (UNDEF: 1)
    7a20:	0c000000 	stceq	0, cr0, [r0], {-0}
    7a24:	04ef0c01 	strbteq	r0, [pc], #3073	; 7a2c <__exidx_end+0x4df4>
    7a28:	00000c40 	andeq	r0, r0, r0, asr #24
    7a2c:	001e4b21 	andseq	r4, lr, r1, lsr #22
    7a30:	0ff00c00 	svceq	0x00f00c00
    7a34:	00000059 	andeq	r0, r0, r9, asr r0
    7a38:	00040401 	andeq	r0, r4, r1, lsl #8
    7a3c:	001fa721 	andseq	sl, pc, r1, lsr #14
    7a40:	0ff10c00 	svceq	0x00f10c00
    7a44:	00000059 	andeq	r0, r0, r9, asr r0
    7a48:	00000401 	andeq	r0, r0, r1, lsl #8
    7a4c:	0c010c00 	stceq	12, cr0, [r1], {-0}
    7a50:	0c6a04f5 	cfstrdeq	mvd0, [sl], #-980	; 0xfffffc2c
    7a54:	52210000 	eorpl	r0, r1, #0
    7a58:	0c000019 	stceq	0, cr0, [r0], {25}
    7a5c:	00590ff6 	ldrsheq	r0, [r9], #-246	; 0xffffff0a
    7a60:	01010000 	mrseq	r0, (UNDEF: 1)
    7a64:	ca210007 	bgt	847a88 <__ccfg+0x827ae0>
    7a68:	0c00001f 	stceq	0, cr0, [r0], {31}
    7a6c:	00590ff8 	ldrsheq	r0, [r9], #-248	; 0xffffff08
    7a70:	06010000 	streq	r0, [r1], -r0
    7a74:	1b000001 	blne	7a80 <__exidx_end+0x4e48>
    7a78:	01a60c01 			; <UNDEFINED> instruction: 0x01a60c01
    7a7c:	000cb904 	andeq	fp, ip, r4, lsl #18
    7a80:	1fe12200 	svcne	0x00e12200
    7a84:	a70c0000 	strge	r0, [ip, -r0]
    7a88:	00590f01 	subseq	r0, r9, r1, lsl #30
    7a8c:	04010000 	streq	r0, [r1], #-0
    7a90:	68220004 	stmdavs	r2!, {r2}
    7a94:	0c000019 	stceq	0, cr0, [r0], {25}
    7a98:	590f01a8 	stmdbpl	pc, {r3, r5, r7, r8}	; <UNPREDICTABLE>
    7a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    7aa0:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    7aa4:	00001a28 	andeq	r1, r0, r8, lsr #20
    7aa8:	0f01aa0c 	svceq	0x0001aa0c
    7aac:	00000059 	andeq	r0, r0, r9, asr r0
    7ab0:	00010201 	andeq	r0, r1, r1, lsl #4
    7ab4:	0017f622 	andseq	pc, r7, r2, lsr #12
    7ab8:	01ab0c00 			; <UNDEFINED> instruction: 0x01ab0c00
    7abc:	0000590f 	andeq	r5, r0, pc, lsl #18
    7ac0:	00010100 	andeq	r0, r1, r0, lsl #2
    7ac4:	011b0000 	tsteq	fp, r0
    7ac8:	0401ae0c 	streq	sl, [r1], #-3596	; 0xfffff1f4
    7acc:	00000ce6 	andeq	r0, r0, r6, ror #25
    7ad0:	001e4b22 	andseq	r4, lr, r2, lsr #22
    7ad4:	01af0c00 			; <UNDEFINED> instruction: 0x01af0c00
    7ad8:	0000590f 	andeq	r5, r0, pc, lsl #18
    7adc:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    7ae0:	1fa72200 	svcne	0x00a72200
    7ae4:	b00c0000 	andlt	r0, ip, r0
    7ae8:	00590f01 	subseq	r0, r9, r1, lsl #30
    7aec:	04010000 	streq	r0, [r1], #-0
    7af0:	11000000 	mrsne	r0, (UNDEF: 0)
    7af4:	00098a04 	andeq	r8, r9, r4, lsl #20
    7af8:	1e960200 	cdpne	2, 9, cr0, cr6, cr0, {0}
    7afc:	3d0d0000 	stccc	0, cr0, [sp, #-0]
    7b00:	000cf82f 	andeq	pc, ip, pc, lsr #16
    7b04:	1ea80f00 	cdpne	15, 10, cr0, cr8, cr0, {0}
    7b08:	0d180000 	ldceq	0, cr0, [r8, #-0]
    7b0c:	0d881578 	cfstr32eq	mvfx1, [r8, #480]	; 0x1e0
    7b10:	870d0000 	strhi	r0, [sp, -r0]
    7b14:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    7b18:	006c0d79 	rsbeq	r0, ip, r9, ror sp
    7b1c:	0d000000 	stceq	0, cr0, [r0, #-0]
    7b20:	00001a5c 	andeq	r1, r0, ip, asr sl
    7b24:	6c0d7a0d 			; <UNDEFINED> instruction: 0x6c0d7a0d
    7b28:	02000000 	andeq	r0, r0, #0
    7b2c:	001aee0d 	andseq	lr, sl, sp, lsl #28
    7b30:	137d0d00 	cmnne	sp, #0, 26
    7b34:	00000bc0 	andeq	r0, r0, r0, asr #23
    7b38:	187f0d04 	ldmdane	pc!, {r2, r8, sl, fp}^	; <UNPREDICTABLE>
    7b3c:	7e0d0000 	cdpvc	0, 0, cr0, cr13, cr0, {0}
    7b40:	0009540c 	andeq	r5, r9, ip, lsl #8
    7b44:	1e0d0800 	cdpne	8, 0, cr0, cr13, cr0, {0}
    7b48:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    7b4c:	10f30686 	rscsne	r0, r3, r6, lsl #13
    7b50:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7b54:	00001a68 	andeq	r1, r0, r8, ror #20
    7b58:	3d068a0d 	vstrcc	s16, [r6, #-52]	; 0xffffffcc
    7b5c:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    7b60:	0018c40d 	andseq	ip, r8, sp, lsl #8
    7b64:	06930d00 	ldreq	r0, [r3], r0, lsl #26
    7b68:	00001167 	andeq	r1, r0, r7, ror #2
    7b6c:	1e440d0e 	cdpne	13, 4, cr0, cr4, cr14, {0}
    7b70:	940d0000 	strls	r0, [sp], #-0
    7b74:	0000590c 	andeq	r5, r0, ip, lsl #18
    7b78:	6a0d0f00 	bvs	34b780 <__ccfg+0x32b7d8>
    7b7c:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    7b80:	007f0d95 			; <UNDEFINED> instruction: 0x007f0d95
    7b84:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7b88:	000017b4 			; <UNDEFINED> instruction: 0x000017b4
    7b8c:	840d960d 	strhi	r9, [sp], #-1549	; 0xfffff9f3
    7b90:	14000009 	strne	r0, [r0], #-9
    7b94:	1cfa0200 	lfmne	f0, 2, [sl]
    7b98:	3e0d0000 	cdpcc	0, 0, cr0, cr13, cr0, {0}
    7b9c:	000d942f 	andeq	r9, sp, pc, lsr #8
    7ba0:	19ec0f00 	stmibne	ip!, {r8, r9, sl, fp}^
    7ba4:	0d240000 	stceq	0, cr0, [r4, #-0]
    7ba8:	0e72159f 	mrceq	5, 3, r1, cr2, cr15, {4}
    7bac:	870d0000 	strhi	r0, [sp, -r0]
    7bb0:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    7bb4:	006c0da0 	rsbeq	r0, ip, r0, lsr #27
    7bb8:	0d000000 	stceq	0, cr0, [r0, #-0]
    7bbc:	00001a5c 	andeq	r1, r0, ip, asr sl
    7bc0:	6c0da10d 	stfvsd	f2, [sp], {13}
    7bc4:	02000000 	andeq	r0, r0, #0
    7bc8:	001aee0d 	andseq	lr, sl, sp, lsl #28
    7bcc:	13a40d00 			; <UNDEFINED> instruction: 0x13a40d00
    7bd0:	00000bc0 	andeq	r0, r0, r0, asr #23
    7bd4:	187f0d04 	ldmdane	pc!, {r2, r8, sl, fp}^	; <UNPREDICTABLE>
    7bd8:	a50d0000 	strge	r0, [sp, #-0]
    7bdc:	0009540c 	andeq	r5, r9, ip, lsl #8
    7be0:	1e0d0800 	cdpne	8, 0, cr0, cr13, cr0, {0}
    7be4:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    7be8:	11a106ad 			; <UNDEFINED> instruction: 0x11a106ad
    7bec:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    7bf0:	00001a68 	andeq	r1, r0, r8, ror #20
    7bf4:	eb06b10d 	bl	1b4030 <__ccfg+0x194088>
    7bf8:	0d000011 	stceq	0, cr0, [r0, #-68]	; 0xffffffbc
    7bfc:	0018c40d 	andseq	ip, r8, sp, lsl #8
    7c00:	06c30d00 	strbeq	r0, [r3], r0, lsl #26
    7c04:	00001215 	andeq	r1, r0, r5, lsl r2
    7c08:	1c580d0e 	mrrcne	13, 0, r0, r8, cr14
    7c0c:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
    7c10:	00129f06 	andseq	r9, r2, r6, lsl #30
    7c14:	6a0d0f00 	bvs	34b81c <__ccfg+0x32b874>
    7c18:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    7c1c:	007f0dce 	rsbseq	r0, pc, lr, asr #27
    7c20:	0d100000 	ldceq	0, cr0, [r0, #-0]
    7c24:	000019a0 	andeq	r1, r0, r0, lsr #19
    7c28:	590ccf0d 	stmdbpl	ip, {r0, r2, r3, r8, r9, sl, fp, lr, pc}
    7c2c:	14000000 	strne	r0, [r0], #-0
    7c30:	001caa0d 	andseq	sl, ip, sp, lsl #20
    7c34:	0cd10d00 	ldcleq	13, cr0, [r1], {0}
    7c38:	00000059 	andeq	r0, r0, r9, asr r0
    7c3c:	1cb30d15 	ldcne	13, cr0, [r3], #84	; 0x54
    7c40:	d20d0000 	andle	r0, sp, #0
    7c44:	0000590c 	andeq	r5, r0, ip, lsl #18
    7c48:	fe0d1600 	cdp2	6, 0, cr1, cr13, cr0, {0}
    7c4c:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    7c50:	131906db 	tstne	r9, #229638144	; 0xdb00000
    7c54:	0d170000 	ldceq	0, cr0, [r7, #-0]
    7c58:	00001efb 	strdeq	r1, [r0], -fp
    7c5c:	540cdc0d 	strpl	sp, [ip], #-3085	; 0xfffff3f3
    7c60:	18000009 	stmdane	r0, {r0, r3}
    7c64:	001a320d 	andseq	r3, sl, sp, lsl #4
    7c68:	11dd0d00 	bicsne	r0, sp, r0, lsl #26
    7c6c:	00000ce6 	andeq	r0, r0, r6, ror #25
    7c70:	18190d1c 	ldmdane	r9, {r2, r3, r4, r8, sl, fp}
    7c74:	de0d0000 	cdple	0, 0, cr0, cr13, cr0, {0}
    7c78:	0009840d 	andeq	r8, r9, sp, lsl #8
    7c7c:	02002000 	andeq	r2, r0, #0
    7c80:	00001a09 	andeq	r1, r0, r9, lsl #20
    7c84:	7e2f410d 	sufvce	f4, f7, #5.0
    7c88:	1a00000e 	bne	7cc8 <__exidx_end+0x5090>
    7c8c:	000017e4 	andeq	r1, r0, r4, ror #15
    7c90:	017d0d1c 	cmneq	sp, ip, lsl sp
    7c94:	000f6d15 	andeq	r6, pc, r5, lsl sp	; <UNPREDICTABLE>
    7c98:	17871800 	strne	r1, [r7, r0, lsl #16]
    7c9c:	7e0d0000 	cdpvc	0, 0, cr0, cr13, cr0, {0}
    7ca0:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    7ca4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7ca8:	00001a5c 	andeq	r1, r0, ip, asr sl
    7cac:	0d017f0d 	stceq	15, cr7, [r1, #-52]	; 0xffffffcc
    7cb0:	0000006c 	andeq	r0, r0, ip, rrx
    7cb4:	1aee1802 	bne	ffb8dcc4 <_estack+0xdfb88cc4>
    7cb8:	820d0000 	andhi	r0, sp, #0
    7cbc:	0bc01301 	bleq	ff00c8c8 <_estack+0xdf0078c8>
    7cc0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    7cc4:	0000187f 	andeq	r1, r0, pc, ror r8
    7cc8:	0c01830d 	stceq	3, cr8, [r1], {13}
    7ccc:	00000954 	andeq	r0, r0, r4, asr r9
    7cd0:	1b1e1808 	blne	78dcf8 <__ccfg+0x76dd50>
    7cd4:	8b0d0000 	blhi	347cdc <__ccfg+0x327d34>
    7cd8:	13630601 	cmnne	r3, #1048576	; 0x100000
    7cdc:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
    7ce0:	00001a68 	andeq	r1, r0, r8, ror #20
    7ce4:	06018f0d 	streq	r8, [r1], -sp, lsl #30
    7ce8:	000013b2 			; <UNDEFINED> instruction: 0x000013b2
    7cec:	1ed5180d 	cdpne	8, 13, cr1, cr5, cr13, {0}
    7cf0:	950d0000 	strls	r0, [sp, #-0]
    7cf4:	13df0601 	bicsne	r0, pc, #1048576	; 0x100000
    7cf8:	180e0000 	stmdane	lr, {}	; <UNPREDICTABLE>
    7cfc:	00001ace 	andeq	r1, r0, lr, asr #21
    7d00:	0c01960d 	stceq	6, cr9, [r1], {13}
    7d04:	00000059 	andeq	r0, r0, r9, asr r0
    7d08:	1f94180f 	svcne	0x0094180f
    7d0c:	a30d0000 	movwge	r0, #53248	; 0xd000
    7d10:	140c0601 	strne	r0, [ip], #-1537	; 0xfffff9ff
    7d14:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    7d18:	00001a48 	andeq	r1, r0, r8, asr #20
    7d1c:	0b01a40d 	bleq	70d58 <__ccfg+0x50db0>
    7d20:	00000025 	andeq	r0, r0, r5, lsr #32
    7d24:	1d1f1811 	ldcne	8, cr1, [pc, #-68]	; 7ce8 <__exidx_end+0x50b0>
    7d28:	a50d0000 	strge	r0, [sp, #-0]
    7d2c:	00590c01 	subseq	r0, r9, r1, lsl #24
    7d30:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
    7d34:	00001f5c 	andeq	r1, r0, ip, asr pc
    7d38:	0c01a70d 	stceq	7, cr10, [r1], {13}
    7d3c:	00000059 	andeq	r0, r0, r9, asr r0
    7d40:	1bd61813 	blne	ff58dd94 <_estack+0xdf588d94>
    7d44:	a90d0000 	stmdbge	sp, {}	; <UNPREDICTABLE>
    7d48:	006c0d01 	rsbeq	r0, ip, r1, lsl #26
    7d4c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    7d50:	000019aa 	andeq	r1, r0, sl, lsr #19
    7d54:	0601af0d 	streq	sl, [r1], -sp, lsl #30
    7d58:	0000147d 	andeq	r1, r0, sp, ror r4
    7d5c:	1ab41816 	bne	fed0ddbc <_estack+0xded08dbc>
    7d60:	b70d0000 	strlt	r0, [sp, -r0]
    7d64:	14aa0601 	strtne	r0, [sl], #1537	; 0x601
    7d68:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
    7d6c:	00001bc2 	andeq	r1, r0, r2, asr #23
    7d70:	0c01b80d 	stceq	8, cr11, [r1], {13}
    7d74:	00000954 	andeq	r0, r0, r4, asr r9
    7d78:	db020018 	blle	87de0 <__ccfg+0x67e38>
    7d7c:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    7d80:	0f793c43 	svceq	0x00793c43
    7d84:	bc1a0000 	ldclt	0, cr0, [sl], {-0}
    7d88:	2800001c 	stmdacs	r0, {r2, r3, r4}
    7d8c:	15021a0d 	strne	r1, [r2, #-2573]	; 0xfffff5f3
    7d90:	00001076 	andeq	r1, r0, r6, ror r0
    7d94:	00178718 	andseq	r8, r7, r8, lsl r7
    7d98:	021b0d00 	andseq	r0, fp, #0, 26
    7d9c:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7da0:	5c180000 	ldcpl	0, cr0, [r8], {-0}
    7da4:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    7da8:	6c0d021d 	sfmvs	f0, 4, [sp], {29}
    7dac:	02000000 	andeq	r0, r0, #0
    7db0:	001aee18 	andseq	lr, sl, r8, lsl lr
    7db4:	02200d00 	eoreq	r0, r0, #0, 26
    7db8:	000bc013 	andeq	ip, fp, r3, lsl r0
    7dbc:	7f180400 	svcvc	0x00180400
    7dc0:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    7dc4:	540c0221 	strpl	r0, [ip], #-545	; 0xfffffddf
    7dc8:	08000009 	stmdaeq	r0, {r0, r3}
    7dcc:	001b1e18 	andseq	r1, fp, r8, lsl lr
    7dd0:	02290d00 	eoreq	r0, r9, #0, 26
    7dd4:	0014f906 	andseq	pc, r4, r6, lsl #18
    7dd8:	68180c00 	ldmdavs	r8, {sl, fp}
    7ddc:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    7de0:	4806022d 	stmdami	r6, {r0, r2, r3, r5, r9}
    7de4:	0d000015 	stceq	0, cr0, [r0, #-84]	; 0xffffffac
    7de8:	00177c18 	andseq	r7, r7, r8, lsl ip
    7dec:	02330d00 	eorseq	r0, r3, #0, 26
    7df0:	00157506 	andseq	r7, r5, r6, lsl #10
    7df4:	d7180e00 	ldrle	r0, [r8, -r0, lsl #28]
    7df8:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    7dfc:	a2060238 	andge	r0, r6, #56, 4	; 0x80000003
    7e00:	10000015 	andne	r0, r0, r5, lsl r0
    7e04:	00190818 	andseq	r0, r9, r8, lsl r8
    7e08:	02390d00 	eorseq	r0, r9, #0, 26
    7e0c:	0000590c 	andeq	r5, r0, ip, lsl #18
    7e10:	60181400 	andsvs	r1, r8, r0, lsl #8
    7e14:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    7e18:	cf060241 	svcgt	0x00060241
    7e1c:	15000015 	strne	r0, [r0, #-21]	; 0xffffffeb
    7e20:	00187418 	andseq	r7, r8, r8, lsl r4
    7e24:	02550d00 	subseq	r0, r5, #0, 26
    7e28:	0015fc06 	andseq	pc, r5, r6, lsl #24
    7e2c:	84181600 	ldrhi	r1, [r8], #-1536	; 0xfffffa00
    7e30:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    7e34:	5c060268 	sfmpl	f0, 4, [r6], {104}	; 0x68
    7e38:	18000016 	stmdane	r0, {r1, r2, r4}
    7e3c:	00190018 	andseq	r0, r9, r8, lsl r0
    7e40:	02690d00 	rsbeq	r0, r9, #0, 26
    7e44:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7e48:	3b181a00 	blcc	60e650 <__ccfg+0x5ee6a8>
    7e4c:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    7e50:	c60e026a 	strgt	r0, [lr], -sl, ror #4
    7e54:	1c00000b 	stcne	0, cr0, [r0], {11}
    7e58:	0017b918 	andseq	fp, r7, r8, lsl r9
    7e5c:	026c0d00 	rsbeq	r0, ip, #0, 26
    7e60:	00006c0d 	andeq	r6, r0, sp, lsl #24
    7e64:	f6182000 			; <UNDEFINED> instruction: 0xf6182000
    7e68:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    7e6c:	380c0270 	stmdacc	ip, {r4, r5, r6, r9}
    7e70:	22000000 	andcs	r0, r0, #0
    7e74:	001c3318 	andseq	r3, ip, r8, lsl r3
    7e78:	02730d00 	rsbseq	r0, r3, #0, 26
    7e7c:	0000590c 	andeq	r5, r0, ip, lsl #18
    7e80:	02002400 	andeq	r2, r0, #0, 8
    7e84:	00001d6f 	andeq	r1, r0, pc, ror #26
    7e88:	8230480d 	eorshi	r4, r0, #851968	; 0xd0000
    7e8c:	1a000010 	bne	7ed4 <__exidx_end+0x529c>
    7e90:	00001d5c 	andeq	r1, r0, ip, asr sp
    7e94:	03750d0c 	cmneq	r5, #12, 26	; 0x300
    7e98:	0010f315 	andseq	pc, r0, r5, lsl r3	; <UNPREDICTABLE>
    7e9c:	1e121800 	cdpne	8, 1, cr1, cr2, cr0, {0}
    7ea0:	760d0000 	strvc	r0, [sp], -r0
    7ea4:	006c0d03 	rsbeq	r0, ip, r3, lsl #26
    7ea8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    7eac:	0000183e 	andeq	r1, r0, lr, lsr r8
    7eb0:	0d03770d 	stceq	7, cr7, [r3, #-52]	; 0xffffffcc
    7eb4:	0000006c 	andeq	r0, r0, ip, rrx
    7eb8:	182b1802 	stmdane	fp!, {r1, fp, ip}
    7ebc:	780d0000 	stmdavc	sp, {}	; <UNPREDICTABLE>
    7ec0:	00590c03 	subseq	r0, r9, r3, lsl #24
    7ec4:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    7ec8:	00001d14 	andeq	r1, r0, r4, lsl sp
    7ecc:	0c03790d 			; <UNDEFINED> instruction: 0x0c03790d
    7ed0:	00000059 	andeq	r0, r0, r9, asr r0
    7ed4:	1a9a1805 	bne	fe68def0 <_estack+0xde688ef0>
    7ed8:	7a0d0000 	bvc	347ee0 <__ccfg+0x327f38>
    7edc:	00590c03 	subseq	r0, r9, r3, lsl #24
    7ee0:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    7ee4:	00001a7e 	andeq	r1, r0, lr, ror sl
    7ee8:	0b037b0d 	bleq	e6b24 <__ccfg+0xc6b7c>
    7eec:	00000025 	andeq	r0, r0, r5, lsr #32
    7ef0:	01f11807 	mvnseq	r1, r7, lsl #16
    7ef4:	7c0d0000 	stcvc	0, cr0, [sp], {-0}
    7ef8:	09540c03 	ldmdbeq	r4, {r0, r1, sl, fp}^
    7efc:	00080000 	andeq	r0, r8, r0
    7f00:	7f0d010c 	svcvc	0x000d010c
    7f04:	00113d04 	andseq	r3, r1, r4, lsl #26
    7f08:	1fe12100 	svcne	0x00e12100
    7f0c:	800d0000 	andhi	r0, sp, r0
    7f10:	0000590f 	andeq	r5, r0, pc, lsl #18
    7f14:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    7f18:	19682100 	stmdbne	r8!, {r8, sp}^
    7f1c:	810d0000 	mrshi	r0, (UNDEF: 13)
    7f20:	0000590f 	andeq	r5, r0, pc, lsl #18
    7f24:	03010100 	movweq	r0, #4352	; 0x1100
    7f28:	1a282100 	bne	a10330 <__ccfg+0x9f0388>
    7f2c:	830d0000 	movwhi	r0, #53248	; 0xd000
    7f30:	0000590f 	andeq	r5, r0, pc, lsl #18
    7f34:	01020100 	mrseq	r0, (UNDEF: 18)
    7f38:	17f62100 	ldrbne	r2, [r6, r0, lsl #2]!
    7f3c:	840d0000 	strhi	r0, [sp], #-0
    7f40:	0000590f 	andeq	r5, r0, pc, lsl #18
    7f44:	00010100 	andeq	r0, r1, r0, lsl #2
    7f48:	010c0000 	mrseq	r0, (UNDEF: 12)
    7f4c:	6704870d 	strvs	r8, [r4, -sp, lsl #14]
    7f50:	21000011 	tstcs	r0, r1, lsl r0
    7f54:	00001e4b 	andeq	r1, r0, fp, asr #28
    7f58:	590f880d 	stmdbpl	pc, {r0, r2, r3, fp, pc}	; <UNPREDICTABLE>
    7f5c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f60:	21000404 	tstcs	r0, r4, lsl #8
    7f64:	00001fa7 	andeq	r1, r0, r7, lsr #31
    7f68:	590f890d 	stmdbpl	pc, {r0, r2, r3, r8, fp, pc}	; <UNPREDICTABLE>
    7f6c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f70:	00000004 	andeq	r0, r0, r4
    7f74:	8b0d010c 	blhi	3483ac <__ccfg+0x328404>
    7f78:	0011a104 	andseq	sl, r1, r4, lsl #2
    7f7c:	1ee62100 	cdpne	1, 14, cr2, cr6, cr0, {0}
    7f80:	8c0d0000 	stchi	0, cr0, [sp], {-0}
    7f84:	0000590f 	andeq	r5, r0, pc, lsl #18
    7f88:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7f8c:	1f6e2100 	svcne	0x006e2100
    7f90:	8f0d0000 	svchi	0x000d0000
    7f94:	0000590f 	andeq	r5, r0, pc, lsl #18
    7f98:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7f9c:	17ac2100 	strne	r2, [ip, r0, lsl #2]!
    7fa0:	910d0000 	mrsls	r0, (UNDEF: 13)
    7fa4:	0000590f 	andeq	r5, r0, pc, lsl #18
    7fa8:	03010100 	movweq	r0, #4352	; 0x1100
    7fac:	010c0000 	mrseq	r0, (UNDEF: 12)
    7fb0:	eb04a60d 	bl	1317ec <__ccfg+0x111844>
    7fb4:	21000011 	tstcs	r0, r1, lsl r0
    7fb8:	00001fe1 	andeq	r1, r0, r1, ror #31
    7fbc:	590fa70d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, sp, pc}	; <UNPREDICTABLE>
    7fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fc4:	21000404 	tstcs	r0, r4, lsl #8
    7fc8:	00001968 	andeq	r1, r0, r8, ror #18
    7fcc:	590fa80d 	stmdbpl	pc, {r0, r2, r3, fp, sp, pc}	; <UNPREDICTABLE>
    7fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fd4:	21000301 	tstcs	r0, r1, lsl #6
    7fd8:	00001a28 	andeq	r1, r0, r8, lsr #20
    7fdc:	590faa0d 	stmdbpl	pc, {r0, r2, r3, r9, fp, sp, pc}	; <UNPREDICTABLE>
    7fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    7fe4:	21000102 	tstcs	r0, r2, lsl #2
    7fe8:	000017f6 	strdeq	r1, [r0], -r6
    7fec:	590fab0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, fp, sp, pc}	; <UNPREDICTABLE>
    7ff0:	01000000 	mrseq	r0, (UNDEF: 0)
    7ff4:	00000001 	andeq	r0, r0, r1
    7ff8:	ae0d010c 	adfgee	f0, f5, #4.0
    7ffc:	00121504 	andseq	r1, r2, r4, lsl #10
    8000:	1e4b2100 	dvfnee	f2, f3, f0
    8004:	af0d0000 	svcge	0x000d0000
    8008:	0000590f 	andeq	r5, r0, pc, lsl #18
    800c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8010:	1fa72100 	svcne	0x00a72100
    8014:	b00d0000 	andlt	r0, sp, r0
    8018:	0000590f 	andeq	r5, r0, pc, lsl #18
    801c:	00040100 	andeq	r0, r4, r0, lsl #2
    8020:	010c0000 	mrseq	r0, (UNDEF: 12)
    8024:	9f04b20d 	svcls	0x0004b20d
    8028:	21000012 	tstcs	r0, r2, lsl r0
    802c:	00001ee6 	andeq	r1, r0, r6, ror #29
    8030:	590fb30d 	stmdbpl	pc, {r0, r2, r3, r8, r9, ip, sp, pc}	; <UNPREDICTABLE>
    8034:	01000000 	mrseq	r0, (UNDEF: 0)
    8038:	21000701 	tstcs	r0, r1, lsl #14
    803c:	00001821 	andeq	r1, r0, r1, lsr #16
    8040:	590fb50d 	stmdbpl	pc, {r0, r2, r3, r8, sl, ip, sp, pc}	; <UNPREDICTABLE>
    8044:	01000000 	mrseq	r0, (UNDEF: 0)
    8048:	21000601 	tstcs	r0, r1, lsl #12
    804c:	00001dbc 			; <UNDEFINED> instruction: 0x00001dbc
    8050:	590fb70d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, ip, sp, pc}	; <UNPREDICTABLE>
    8054:	01000000 	mrseq	r0, (UNDEF: 0)
    8058:	21000501 	tstcs	r0, r1, lsl #10
    805c:	00001f6e 	andeq	r1, r0, lr, ror #30
    8060:	590fb90d 	stmdbpl	pc, {r0, r2, r3, r8, fp, ip, sp, pc}	; <UNPREDICTABLE>
    8064:	01000000 	mrseq	r0, (UNDEF: 0)
    8068:	21000401 	tstcs	r0, r1, lsl #8
    806c:	000017ac 	andeq	r1, r0, ip, lsr #15
    8070:	590fbb0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, fp, ip, sp, pc}	; <UNPREDICTABLE>
    8074:	01000000 	mrseq	r0, (UNDEF: 0)
    8078:	21000301 	tstcs	r0, r1, lsl #6
    807c:	00001f03 	andeq	r1, r0, r3, lsl #30
    8080:	590fbd0d 	stmdbpl	pc, {r0, r2, r3, r8, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    8084:	01000000 	mrseq	r0, (UNDEF: 0)
    8088:	21000201 	tstcs	r0, r1, lsl #4
    808c:	00001a39 	andeq	r1, r0, r9, lsr sl
    8090:	590fbf0d 	stmdbpl	pc, {r0, r2, r3, r8, r9, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    8094:	01000000 	mrseq	r0, (UNDEF: 0)
    8098:	21000101 	tstcs	r0, r1, lsl #2
    809c:	00001dc7 	andeq	r1, r0, r7, asr #27
    80a0:	590fc10d 	stmdbpl	pc, {r0, r2, r3, r8, lr, pc}	; <UNPREDICTABLE>
    80a4:	01000000 	mrseq	r0, (UNDEF: 0)
    80a8:	00000001 	andeq	r0, r0, r1
    80ac:	c40d010c 	strgt	r0, [sp], #-268	; 0xfffffef4
    80b0:	00131904 	andseq	r1, r3, r4, lsl #18
    80b4:	1afe2100 	bne	fff904bc <_estack+0xdff8b4bc>
    80b8:	c50d0000 	strgt	r0, [sp, #-0]
    80bc:	0000590f 	andeq	r5, r0, pc, lsl #18
    80c0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    80c4:	19302100 	ldmdbne	r0!, {r8, sp}
    80c8:	c60d0000 	strgt	r0, [sp], -r0
    80cc:	0000590f 	andeq	r5, r0, pc, lsl #18
    80d0:	06010100 	streq	r0, [r1], -r0, lsl #2
    80d4:	1a722100 	bne	1c904dc <__ccfg+0x1c70534>
    80d8:	c80d0000 	stmdagt	sp, {}	; <UNPREDICTABLE>
    80dc:	0000590f 	andeq	r5, r0, pc, lsl #18
    80e0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    80e4:	19d42100 	ldmibne	r4, {r8, sp}^
    80e8:	c90d0000 	stmdbgt	sp, {}	; <UNPREDICTABLE>
    80ec:	0000590f 	andeq	r5, r0, pc, lsl #18
    80f0:	03010100 	movweq	r0, #4352	; 0x1100
    80f4:	1d502100 	ldfnee	f2, [r0, #-0]
    80f8:	ca0d0000 	bgt	348100 <__ccfg+0x328158>
    80fc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8100:	02010100 	andeq	r0, r1, #0, 2
    8104:	18892100 	stmne	r9, {r8, sp}
    8108:	cb0d0000 	blgt	348110 <__ccfg+0x328168>
    810c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8110:	01010100 	mrseq	r0, (UNDEF: 17)
    8114:	17912100 	ldrne	r2, [r1, r0, lsl #2]
    8118:	cc0d0000 	stcgt	0, cr0, [sp], {-0}
    811c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8120:	00010100 	andeq	r0, r1, r0, lsl #2
    8124:	010c0000 	mrseq	r0, (UNDEF: 12)
    8128:	6304d40d 	movwvs	sp, #17421	; 0x440d
    812c:	21000013 	tstcs	r0, r3, lsl r0
    8130:	00001fe1 	andeq	r1, r0, r1, ror #31
    8134:	590fd50d 	stmdbpl	pc, {r0, r2, r3, r8, sl, ip, lr, pc}	; <UNPREDICTABLE>
    8138:	01000000 	mrseq	r0, (UNDEF: 0)
    813c:	21000404 	tstcs	r0, r4, lsl #8
    8140:	00001968 	andeq	r1, r0, r8, ror #18
    8144:	590fd60d 	stmdbpl	pc, {r0, r2, r3, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
    8148:	01000000 	mrseq	r0, (UNDEF: 0)
    814c:	21000301 	tstcs	r0, r1, lsl #6
    8150:	00001a28 	andeq	r1, r0, r8, lsr #20
    8154:	590fd80d 	stmdbpl	pc, {r0, r2, r3, fp, ip, lr, pc}	; <UNPREDICTABLE>
    8158:	01000000 	mrseq	r0, (UNDEF: 0)
    815c:	21000102 	tstcs	r0, r2, lsl #2
    8160:	000017f6 	strdeq	r1, [r0], -r6
    8164:	590fd90d 	stmdbpl	pc, {r0, r2, r3, r8, fp, ip, lr, pc}	; <UNPREDICTABLE>
    8168:	01000000 	mrseq	r0, (UNDEF: 0)
    816c:	00000001 	andeq	r0, r0, r1
    8170:	840d011b 	strhi	r0, [sp], #-283	; 0xfffffee5
    8174:	13b20401 			; <UNDEFINED> instruction: 0x13b20401
    8178:	e1220000 			; <UNDEFINED> instruction: 0xe1220000
    817c:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    8180:	590f0185 	stmdbpl	pc, {r0, r2, r7, r8}	; <UNPREDICTABLE>
    8184:	01000000 	mrseq	r0, (UNDEF: 0)
    8188:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    818c:	00001968 	andeq	r1, r0, r8, ror #18
    8190:	0f01860d 	svceq	0x0001860d
    8194:	00000059 	andeq	r0, r0, r9, asr r0
    8198:	00030101 	andeq	r0, r3, r1, lsl #2
    819c:	001a2822 	andseq	r2, sl, r2, lsr #16
    81a0:	01880d00 	orreq	r0, r8, r0, lsl #26
    81a4:	0000590f 	andeq	r5, r0, pc, lsl #18
    81a8:	01020100 	mrseq	r0, (UNDEF: 18)
    81ac:	17f62200 	ldrbne	r2, [r6, r0, lsl #4]!
    81b0:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    81b4:	00590f01 	subseq	r0, r9, r1, lsl #30
    81b8:	01010000 	mrseq	r0, (UNDEF: 1)
    81bc:	1b000000 	blne	81c4 <__exidx_end+0x558c>
    81c0:	018c0d01 	orreq	r0, ip, r1, lsl #26
    81c4:	0013df04 	andseq	sp, r3, r4, lsl #30
    81c8:	1e4b2200 	cdpne	2, 4, cr2, cr11, cr0, {0}
    81cc:	8d0d0000 	stchi	0, cr0, [sp, #-0]
    81d0:	00590f01 	subseq	r0, r9, r1, lsl #30
    81d4:	04010000 	streq	r0, [r1], #-0
    81d8:	a7220004 	strge	r0, [r2, -r4]!
    81dc:	0d00001f 	stceq	0, cr0, [r0, #-124]	; 0xffffff84
    81e0:	590f018e 	stmdbpl	pc, {r1, r2, r3, r7, r8}	; <UNPREDICTABLE>
    81e4:	01000000 	mrseq	r0, (UNDEF: 0)
    81e8:	00000004 	andeq	r0, r0, r4
    81ec:	900d011b 	andls	r0, sp, fp, lsl r1
    81f0:	140c0401 	strne	r0, [ip], #-1025	; 0xfffffbff
    81f4:	4c220000 	stcmi	0, cr0, [r2], #-0
    81f8:	0d00001b 	stceq	0, cr0, [r0, #-108]	; 0xffffff94
    81fc:	590f0191 	stmdbpl	pc, {r0, r4, r7, r8}	; <UNPREDICTABLE>
    8200:	01000000 	mrseq	r0, (UNDEF: 0)
    8204:	22000701 	andcs	r0, r0, #262144	; 0x40000
    8208:	00001c73 	andeq	r1, r0, r3, ror ip
    820c:	0f01930d 	svceq	0x0001930d
    8210:	00000059 	andeq	r0, r0, r9, asr r0
    8214:	00060101 	andeq	r0, r6, r1, lsl #2
    8218:	0d011b00 	vstreq	d1, [r1, #-0]
    821c:	7d040197 	stfvcs	f0, [r4, #-604]	; 0xfffffda4
    8220:	22000014 	andcs	r0, r0, #20
    8224:	00001fad 	andeq	r1, r0, sp, lsr #31
    8228:	0f01980d 	svceq	0x0001980d
    822c:	00000059 	andeq	r0, r0, r9, asr r0
    8230:	00070101 	andeq	r0, r7, r1, lsl #2
    8234:	001b4322 	andseq	r4, fp, r2, lsr #6
    8238:	01990d00 	orrseq	r0, r9, r0, lsl #26
    823c:	0000590f 	andeq	r5, r0, pc, lsl #18
    8240:	06010100 	streq	r0, [r1], -r0, lsl #2
    8244:	0a8d2200 	beq	fe350a4c <_estack+0xde34ba4c>
    8248:	9a0d0000 	bls	348250 <__ccfg+0x3282a8>
    824c:	00590f01 	subseq	r0, r9, r1, lsl #30
    8250:	01010000 	mrseq	r0, (UNDEF: 1)
    8254:	2c220005 	stccs	0, cr0, [r2], #-20	; 0xffffffec
    8258:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    825c:	590f019c 	stmdbpl	pc, {r2, r3, r4, r7, r8}	; <UNPREDICTABLE>
    8260:	01000000 	mrseq	r0, (UNDEF: 0)
    8264:	22000401 	andcs	r0, r0, #16777216	; 0x1000000
    8268:	00001eba 			; <UNDEFINED> instruction: 0x00001eba
    826c:	0f019f0d 	svceq	0x00019f0d
    8270:	00000059 	andeq	r0, r0, r9, asr r0
    8274:	00030101 	andeq	r0, r3, r1, lsl #2
    8278:	001c0622 	andseq	r0, ip, r2, lsr #12
    827c:	01a10d00 			; <UNDEFINED> instruction: 0x01a10d00
    8280:	0000590f 	andeq	r5, r0, pc, lsl #18
    8284:	02010100 	andeq	r0, r1, #0, 2
    8288:	011b0000 	tsteq	fp, r0
    828c:	0401aa0d 	streq	sl, [r1], #-2573	; 0xfffff5f3
    8290:	000014aa 	andeq	r1, r0, sl, lsr #9
    8294:	00197022 	andseq	r7, r9, r2, lsr #32
    8298:	01ab0d00 			; <UNDEFINED> instruction: 0x01ab0d00
    829c:	0000590f 	andeq	r5, r0, pc, lsl #18
    82a0:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    82a4:	1a502200 	bne	1410aac <__ccfg+0x13f0b04>
    82a8:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    82ac:	00590f01 	subseq	r0, r9, r1, lsl #30
    82b0:	04010000 	streq	r0, [r1], #-0
    82b4:	1b000000 	blne	82bc <__exidx_end+0x5684>
    82b8:	01b00d01 	lslseq	r0, r1, #26
    82bc:	0014f904 	andseq	pc, r4, r4, lsl #18
    82c0:	1fe12200 	svcne	0x00e12200
    82c4:	b10d0000 	mrslt	r0, (UNDEF: 13)
    82c8:	00590f01 	subseq	r0, r9, r1, lsl #30
    82cc:	04010000 	streq	r0, [r1], #-0
    82d0:	68220004 	stmdavs	r2!, {r2}
    82d4:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    82d8:	590f01b2 	stmdbpl	pc, {r1, r4, r5, r7, r8}	; <UNPREDICTABLE>
    82dc:	01000000 	mrseq	r0, (UNDEF: 0)
    82e0:	22000301 	andcs	r0, r0, #67108864	; 0x4000000
    82e4:	00001a28 	andeq	r1, r0, r8, lsr #20
    82e8:	0f01b40d 	svceq	0x0001b40d
    82ec:	00000059 	andeq	r0, r0, r9, asr r0
    82f0:	00010201 	andeq	r0, r1, r1, lsl #4
    82f4:	0017f622 	andseq	pc, r7, r2, lsr #12
    82f8:	01b50d00 			; <UNDEFINED> instruction: 0x01b50d00
    82fc:	0000590f 	andeq	r5, r0, pc, lsl #18
    8300:	00010100 	andeq	r0, r1, r0, lsl #2
    8304:	011b0000 	tsteq	fp, r0
    8308:	0402220d 	streq	r2, [r2], #-525	; 0xfffffdf3
    830c:	00001548 	andeq	r1, r0, r8, asr #10
    8310:	001fe122 	andseq	lr, pc, r2, lsr #2
    8314:	02230d00 	eoreq	r0, r3, #0, 26
    8318:	0000590f 	andeq	r5, r0, pc, lsl #18
    831c:	04040100 	streq	r0, [r4], #-256	; 0xffffff00
    8320:	19682200 	stmdbne	r8!, {r9, sp}^
    8324:	240d0000 	strcs	r0, [sp], #-0
    8328:	00590f02 	subseq	r0, r9, r2, lsl #30
    832c:	01010000 	mrseq	r0, (UNDEF: 1)
    8330:	28220003 	stmdacs	r2!, {r0, r1}
    8334:	0d00001a 	stceq	0, cr0, [r0, #-104]	; 0xffffff98
    8338:	590f0226 	stmdbpl	pc, {r1, r2, r5, r9}	; <UNPREDICTABLE>
    833c:	01000000 	mrseq	r0, (UNDEF: 0)
    8340:	22000102 	andcs	r0, r0, #-2147483648	; 0x80000000
    8344:	000017f6 	strdeq	r1, [r0], -r6
    8348:	0f02270d 	svceq	0x0002270d
    834c:	00000059 	andeq	r0, r0, r9, asr r0
    8350:	00000101 	andeq	r0, r0, r1, lsl #2
    8354:	0d011b00 	vstreq	d1, [r1, #-0]
    8358:	7504022a 	strvc	r0, [r4, #-554]	; 0xfffffdd6
    835c:	22000015 	andcs	r0, r0, #21
    8360:	00001e4b 	andeq	r1, r0, fp, asr #28
    8364:	0f022b0d 	svceq	0x00022b0d
    8368:	00000059 	andeq	r0, r0, r9, asr r0
    836c:	00040401 	andeq	r0, r4, r1, lsl #8
    8370:	001fa722 	andseq	sl, pc, r2, lsr #14
    8374:	022c0d00 	eoreq	r0, ip, #0, 26
    8378:	0000590f 	andeq	r5, r0, pc, lsl #18
    837c:	00040100 	andeq	r0, r4, r0, lsl #2
    8380:	021b0000 	andseq	r0, fp, #0
    8384:	04022e0d 	streq	r2, [r2], #-3597	; 0xfffff1f3
    8388:	000015a2 	andeq	r1, r0, r2, lsr #11
    838c:	001a8722 	andseq	r8, sl, r2, lsr #14
    8390:	022f0d00 	eoreq	r0, pc, #0, 26
    8394:	00006c10 	andeq	r6, r0, r0, lsl ip
    8398:	0d030200 	sfmeq	f0, 4, [r3, #-0]
    839c:	1f8a2200 	svcne	0x008a2200
    83a0:	320d0000 	andcc	r0, sp, #0
    83a4:	006c1002 	rsbeq	r1, ip, r2
    83a8:	0d020000 	stceq	0, cr0, [r2, #-0]
    83ac:	1b000000 	blne	83b4 <__exidx_end+0x577c>
    83b0:	02340d04 	eorseq	r0, r4, #4, 26	; 0x100
    83b4:	0015cf04 	andseq	ip, r5, r4, lsl #30
    83b8:	1c1b2200 	lfmne	f2, 4, [fp], {-0}
    83bc:	350d0000 	strcc	r0, [sp, #-0]
    83c0:	007f1002 	rsbseq	r1, pc, r2
    83c4:	04040000 	streq	r0, [r4], #-0
    83c8:	2b22001c 	blcs	888440 <__ccfg+0x868498>
    83cc:	0d00001d 	stceq	0, cr0, [r0, #-116]	; 0xffffff8c
    83d0:	7f100237 	svcvc	0x00100237
    83d4:	04000000 	streq	r0, [r0], #-0
    83d8:	00000315 	andeq	r0, r0, r5, lsl r3
    83dc:	3a0d011b 	bcc	348850 <__ccfg+0x3288a8>
    83e0:	15fc0402 	ldrbne	r0, [ip, #1026]!	; 0x402
    83e4:	7f220000 	svcvc	0x00220000
    83e8:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    83ec:	590f023b 	stmdbpl	pc, {r0, r1, r3, r4, r5, r9}	; <UNPREDICTABLE>
    83f0:	01000000 	mrseq	r0, (UNDEF: 0)
    83f4:	22000206 	andcs	r0, r0, #1610612736	; 0x60000000
    83f8:	0000184e 	andeq	r1, r0, lr, asr #16
    83fc:	0f023d0d 	svceq	0x00023d0d
    8400:	00000059 	andeq	r0, r0, r9, asr r0
    8404:	00000201 	andeq	r0, r0, r1, lsl #4
    8408:	0d021b00 	vstreq	d1, [r2, #-0]
    840c:	5c040242 	sfmpl	f0, 4, [r4], {66}	; 0x42
    8410:	22000016 	andcs	r0, r0, #22
    8414:	00001c24 	andeq	r1, r0, r4, lsr #24
    8418:	1002430d 	andne	r4, r2, sp, lsl #6
    841c:	0000006c 	andeq	r0, r0, ip, rrx
    8420:	000a0602 	andeq	r0, sl, r2, lsl #12
    8424:	001ac122 	andseq	ip, sl, r2, lsr #2
    8428:	02440d00 	subeq	r0, r4, #0, 26
    842c:	00006c10 	andeq	r6, r0, r0, lsl ip
    8430:	09010200 	stmdbeq	r1, {r9}
    8434:	1c8c2200 	sfmne	f2, 4, [ip], {0}
    8438:	460d0000 	strmi	r0, [sp], -r0
    843c:	006c1002 	rsbeq	r1, ip, r2
    8440:	01020000 	mrseq	r0, (UNDEF: 2)
    8444:	36220008 	strtcc	r0, [r2], -r8
    8448:	0d000018 	stceq	0, cr0, [r0, #-96]	; 0xffffffa0
    844c:	6c100248 	lfmvs	f0, 4, [r0], {72}	; 0x48
    8450:	02000000 	andeq	r0, r0, #0
    8454:	22000404 	andcs	r0, r0, #4, 8	; 0x4000000
    8458:	000017d9 	ldrdeq	r1, [r0], -r9
    845c:	10024d0d 	andne	r4, r2, sp, lsl #26
    8460:	0000006c 	andeq	r0, r0, ip, rrx
    8464:	00000302 	andeq	r0, r0, r2, lsl #6
    8468:	0d021b00 	vstreq	d1, [r2, #-0]
    846c:	ab040256 	blge	108dcc <__ccfg+0xe8e24>
    8470:	22000016 	andcs	r0, r0, #22
    8474:	00001a1b 	andeq	r1, r0, fp, lsl sl
    8478:	1002570d 	andne	r5, r2, sp, lsl #14
    847c:	0000006c 	andeq	r0, r0, ip, rrx
    8480:	000d0302 	andeq	r0, sp, r2, lsl #6
    8484:	0019ba22 	andseq	fp, r9, r2, lsr #20
    8488:	025d0d00 	subseq	r0, sp, #0, 26
    848c:	00006c10 	andeq	r6, r0, r0, lsl ip
    8490:	0c010200 	sfmeq	f0, 4, [r1], {-0}
    8494:	195a2200 	ldmdbne	sl, {r9, sp}^
    8498:	5f0d0000 	svcpl	0x000d0000
    849c:	006c1002 	rsbeq	r1, ip, r2
    84a0:	06020000 	streq	r0, [r2], -r0
    84a4:	5f220006 	svcpl	0x00220006
    84a8:	0d00001c 	stceq	0, cr0, [r0, #-112]	; 0xffffff90
    84ac:	6c100266 	lfmvs	f0, 4, [r0], {102}	; 0x66
    84b0:	02000000 	andeq	r0, r0, #0
    84b4:	00000501 	andeq	r0, r0, r1, lsl #10
    84b8:	001de702 	andseq	lr, sp, r2, lsl #14
    84bc:	343c0e00 	ldrtcc	r0, [ip], #-3584	; 0xfffff200
    84c0:	000016b7 			; <UNDEFINED> instruction: 0x000016b7
    84c4:	001dd00f 	andseq	sp, sp, pc
    84c8:	5e0e0c00 	cdppl	12, 0, cr0, cr14, cr0, {0}
    84cc:	00170615 	andseq	r0, r7, r5, lsl r6
    84d0:	189a0d00 	ldmne	sl, {r8, sl, fp}
    84d4:	5f0e0000 	svcpl	0x000e0000
    84d8:	0009840d 	andeq	r8, r9, sp, lsl #8
    84dc:	5c0d0000 	stcpl	0, cr0, [sp], {-0}
    84e0:	0e00001a 	mcreq	0, 0, r0, cr0, cr10, {0}
    84e4:	00590c60 	subseq	r0, r9, r0, ror #24
    84e8:	0d040000 	stceq	0, cr0, [r4, #-0]
    84ec:	00000d84 	andeq	r0, r0, r4, lsl #27
    84f0:	06066e0e 	streq	r6, [r6], -lr, lsl #28
    84f4:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    84f8:	0011fe0d 	andseq	pc, r1, sp, lsl #28
    84fc:	0d6f0e00 	stcleq	14, cr0, [pc, #-0]	; 8504 <__exidx_end+0x58cc>
    8500:	0000006c 	andeq	r0, r0, ip, rrx
    8504:	06240d06 	strteq	r0, [r4], -r6, lsl #26
    8508:	710e0000 	mrsvc	r0, (UNDEF: 14)
    850c:	0000590c 	andeq	r5, r0, ip, lsl #18
    8510:	0c000800 	stceq	8, cr0, [r0], {-0}
    8514:	04610e01 	strbteq	r0, [r1], #-3585	; 0xfffff1ff
    8518:	00001740 	andeq	r1, r0, r0, asr #14
    851c:	0023ae21 	eoreq	sl, r3, r1, lsr #28
    8520:	0f620e00 	svceq	0x00620e00
    8524:	00000059 	andeq	r0, r0, r9, asr r0
    8528:	00060201 	andeq	r0, r6, r1, lsl #4
    852c:	001da821 	andseq	sl, sp, r1, lsr #16
    8530:	0f670e00 	svceq	0x00670e00
    8534:	00000059 	andeq	r0, r0, r9, asr r0
    8538:	00040201 	andeq	r0, r4, r1, lsl #4
    853c:	00186321 	andseq	r6, r8, r1, lsr #6
    8540:	0f6c0e00 	svceq	0x006c0e00
    8544:	00000059 	andeq	r0, r0, r9, asr r0
    8548:	00000401 	andeq	r0, r0, r1, lsl #8
    854c:	02100c00 	andseq	r0, r0, #0, 24
    8550:	177e0948 	ldrbne	r0, [lr, -r8, asr #18]!
    8554:	e00d0000 	and	r0, sp, r0
    8558:	02000019 	andeq	r0, r0, #25
    855c:	007f0d49 	rsbseq	r0, pc, r9, asr #26
    8560:	0d000000 	stceq	0, cr0, [r0, #-0]
    8564:	00001941 	andeq	r1, r0, r1, asr #18
    8568:	7f0d4a02 	svcvc	0x000d4a02
    856c:	04000000 	streq	r0, [r0], #-0
    8570:	001d920d 	andseq	r9, sp, sp, lsl #4
    8574:	0d4b0200 	sfmeq	f0, 2, [fp, #-0]
    8578:	0000007f 	andeq	r0, r0, pc, ror r0
    857c:	1eed0d08 	cdpne	13, 14, cr0, cr13, cr8, {0}
    8580:	4c020000 	stcmi	0, cr0, [r2], {-0}
    8584:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8588:	02000c00 	andeq	r0, r0, #0, 24
    858c:	000017ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    8590:	40034d02 	andmi	r4, r3, r2, lsl #26
    8594:	0a000017 	beq	85f8 <__exidx_end+0x59c0>
    8598:	0000008b 	andeq	r0, r0, fp, lsl #1
    859c:	0000179a 	muleq	r0, sl, r7
    85a0:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    85a4:	0400a200 	streq	sl, [r0], #-512	; 0xfffffe00
    85a8:	0000178a 	andeq	r1, r0, sl, lsl #15
    85ac:	001b2b23 	andseq	r2, fp, r3, lsr #22
    85b0:	10490400 	subne	r0, r9, r0, lsl #8
    85b4:	0000179a 	muleq	r0, sl, r7
    85b8:	00000305 	andeq	r0, r0, r5, lsl #6
    85bc:	8b0a0000 	blhi	2885c4 <__ccfg+0x26861c>
    85c0:	c2000000 	andgt	r0, r0, #0
    85c4:	24000017 	strcs	r0, [r0], #-23	; 0xffffffe9
    85c8:	000000aa 	andeq	r0, r0, sl, lsr #1
    85cc:	040001ac 	streq	r0, [r0], #-428	; 0xfffffe54
    85d0:	000017b1 			; <UNDEFINED> instruction: 0x000017b1
    85d4:	001b7a23 	andseq	r7, fp, r3, lsr #20
    85d8:	103a0500 	eorsne	r0, sl, r0, lsl #10
    85dc:	000017c2 	andeq	r1, r0, r2, asr #15
    85e0:	00000305 	andeq	r0, r0, r5, lsl #6
    85e4:	00020000 	andeq	r0, r2, r0
    85e8:	0f000021 	svceq	0x00000021
    85ec:	006c1227 	rsbeq	r1, ip, r7, lsr #4
    85f0:	d9040000 	stmdble	r4, {}	; <UNPREDICTABLE>
    85f4:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    85f8:	000017d9 	ldrdeq	r1, [r0], -r9
    85fc:	0016c802 	andseq	ip, r6, r2, lsl #16
    8600:	122b0f00 	eorne	r0, fp, #0, 30
    8604:	00000059 	andeq	r0, r0, r9, asr r0
    8608:	0017ef05 	andseq	lr, r7, r5, lsl #30
    860c:	21510200 	cmpcs	r1, r0, lsl #4
    8610:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    8614:	00007f12 	andeq	r7, r0, r2, lsl pc
    8618:	18000400 	stmdane	r0, {sl}
    861c:	0d020000 	stceq	0, cr0, [r2, #-0]
    8620:	0f000004 	svceq	0x00000004
    8624:	007f122d 	rsbseq	r1, pc, sp, lsr #4
    8628:	a6020000 	strge	r0, [r2], -r0
    862c:	0f000006 	svceq	0x00000006
    8630:	1829102e 	stmdane	r9!, {r1, r2, r3, r5, ip}
    8634:	04110000 	ldreq	r0, [r1], #-0
    8638:	000017d9 	ldrdeq	r1, [r0], -r9
    863c:	320f080c 	andcc	r0, pc, #12, 16	; 0xc0000
    8640:	0018bd09 	andseq	fp, r8, r9, lsl #26
    8644:	00232100 	eoreq	r2, r3, r0, lsl #2
    8648:	340f0000 	strcc	r0, [pc], #-0	; 8650 <__exidx_end+0x5a18>
    864c:	0017ef07 	andseq	lr, r7, r7, lsl #30
    8650:	07010100 	streq	r0, [r1, -r0, lsl #2]
    8654:	04132100 	ldreq	r2, [r3], #-256	; 0xffffff00
    8658:	350f0000 	strcc	r0, [pc, #-0]	; 8660 <__exidx_end+0x5a28>
    865c:	0017ef03 	andseq	lr, r7, r3, lsl #30
    8660:	06010100 	streq	r0, [r1], -r0, lsl #2
    8664:	01cb2100 	biceq	r2, fp, r0, lsl #2
    8668:	360f0000 	strcc	r0, [pc], -r0
    866c:	0017ef03 	andseq	lr, r7, r3, lsl #30
    8670:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    8674:	044d2100 	strbeq	r2, [sp], #-256	; 0xffffff00
    8678:	370f0000 	strcc	r0, [pc, -r0]
    867c:	0017ef03 	andseq	lr, r7, r3, lsl #30
    8680:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    8684:	06082100 	streq	r2, [r8], -r0, lsl #2
    8688:	380f0000 	stmdacc	pc, {}	; <UNPREDICTABLE>
    868c:	0017ef03 	andseq	lr, r7, r3, lsl #30
    8690:	00040100 	andeq	r0, r4, r0, lsl #2
    8694:	041a0d00 	ldreq	r0, [sl], #-3328	; 0xfffff300
    8698:	3a0f0000 	bcc	3c86a0 <__ccfg+0x3a86f8>
    869c:	0017ef07 	andseq	lr, r7, r7, lsl #30
    86a0:	760d0100 	strvc	r0, [sp], -r0, lsl #2
    86a4:	0f000005 	svceq	0x00000005
    86a8:	17ef033c 			; <UNDEFINED> instruction: 0x17ef033c
    86ac:	0d020000 	stceq	0, cr0, [r2, #-0]
    86b0:	00000853 	andeq	r0, r0, r3, asr r8
    86b4:	ef033d0f 	svc	0x00033d0f
    86b8:	03000017 	movweq	r0, #23
    86bc:	00058e0d 	andeq	r8, r5, sp, lsl #28
    86c0:	083f0f00 	ldmdaeq	pc!, {r8, r9, sl, fp}	; <UNPREDICTABLE>
    86c4:	00001800 	andeq	r1, r0, r0, lsl #16
    86c8:	19020004 	stmdbne	r2, {r2}
    86cc:	0f000002 	svceq	0x00000002
    86d0:	182f0341 	stmdane	pc!, {r0, r6, r8, r9}	; <UNPREDICTABLE>
    86d4:	bd050000 	stclt	0, cr0, [r5, #-0]
    86d8:	25000018 	strcs	r0, [r0, #-24]	; 0xffffffe8
    86dc:	00000454 	andeq	r0, r0, r4, asr r4
    86e0:	c91a430f 	ldmdbgt	sl, {r0, r1, r2, r3, r8, r9, lr}
    86e4:	01000018 	tsteq	r0, r8, lsl r0
    86e8:	01672501 	cmneq	r7, r1, lsl #10
    86ec:	450f0000 	strmi	r0, [pc, #-0]	; 86f4 <__exidx_end+0x5abc>
    86f0:	0005eb0e 	andeq	lr, r5, lr, lsl #22
    86f4:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    86f8:	00000222 	andeq	r0, r0, r2, lsr #4
    86fc:	eb1e450f 	bl	799b40 <__ccfg+0x779b98>
    8700:	01000005 	tsteq	r0, r5
    8704:	10080c01 	andne	r0, r8, r1, lsl #24
    8708:	1929098f 	stmdbne	r9!, {r0, r1, r2, r3, r7, r8, fp}
    870c:	cf0d0000 	svcgt	0x000d0000
    8710:	10000004 	andne	r0, r0, r4
    8714:	007f0b90 			; <UNDEFINED> instruction: 0x007f0b90
    8718:	0d000000 	stceq	0, cr0, [r0, #-0]
    871c:	00000985 	andeq	r0, r0, r5, lsl #19
    8720:	d9089110 	stmdble	r8, {r4, r8, ip, pc}
    8724:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    8728:	0001a00d 	andeq	sl, r1, sp
    872c:	10921000 	addsne	r1, r2, r0
    8730:	000017fb 	strdeq	r1, [r0], -fp
    8734:	51020006 	tstpl	r2, r6
    8738:	10000007 	andne	r0, r0, r7
    873c:	18f80393 	ldmne	r8!, {r0, r1, r4, r7, r8, r9}^
    8740:	290a0000 	stmdbcs	sl, {}	; <UNPREDICTABLE>
    8744:	40000019 	andmi	r0, r0, r9, lsl r0
    8748:	26000019 			; <UNDEFINED> instruction: 0x26000019
    874c:	059a2500 	ldreq	r2, [sl, #1280]	; 0x500
    8750:	99100000 	ldmdbls	r0, {}	; <UNPREDICTABLE>
    8754:	0019350f 	andseq	r3, r9, pc, lsl #10
    8758:	0c010100 	stfeqs	f0, [r1], {-0}
    875c:	09911101 	ldmibeq	r1, {r0, r8, ip}
    8760:	00001978 	andeq	r1, r0, r8, ror r9
    8764:	00059521 	andeq	r9, r5, r1, lsr #10
    8768:	07931100 	ldreq	r1, [r3, r0, lsl #2]
    876c:	000017ef 	andeq	r1, r0, pc, ror #15
    8770:	00010701 	andeq	r0, r1, r1, lsl #14
    8774:	0003b421 	andeq	fp, r3, r1, lsr #8
    8778:	03941100 	orrseq	r1, r4, #0, 2
    877c:	000017ef 	andeq	r1, r0, pc, ror #15
    8780:	00000101 	andeq	r0, r0, r1, lsl #2
    8784:	061a0200 	ldreq	r0, [sl], -r0, lsl #4
    8788:	96110000 	ldrls	r0, [r1], -r0
    878c:	00194e03 	andseq	r4, r9, r3, lsl #28
    8790:	19780400 	ldmdbne	r8!, {sl}^
    8794:	840a0000 	strhi	r0, [sl], #-0
    8798:	94000019 	strls	r0, [r0], #-25	; 0xffffffe7
    879c:	26000019 			; <UNDEFINED> instruction: 0x26000019
    87a0:	19890400 	stmibne	r9, {sl}
    87a4:	ba250000 	blt	9487ac <__ccfg+0x928804>
    87a8:	11000002 	tstne	r0, r2
    87ac:	1994179c 	ldmibne	r4, {r2, r3, r4, r7, r8, r9, sl, ip}
    87b0:	01010000 	mrseq	r0, (UNDEF: 1)
    87b4:	0017e50a 	andseq	lr, r7, sl, lsl #10
    87b8:	0019b200 	andseq	fp, r9, r0, lsl #4
    87bc:	04002600 	streq	r2, [r0], #-1536	; 0xfffffa00
    87c0:	000019a7 	andeq	r1, r0, r7, lsr #19
    87c4:	0003cd25 	andeq	ip, r3, r5, lsr #26
    87c8:	13061200 	movwne	r1, #25088	; 0x6200
    87cc:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    87d0:	58250101 	stmdapl	r5!, {r0, r8}
    87d4:	10000005 	andne	r0, r0, r5
    87d8:	18000ec3 	stmdane	r0, {r0, r1, r6, r7, r9, sl, fp}
    87dc:	01010000 	mrseq	r0, (UNDEF: 1)
    87e0:	00071d07 	andeq	r1, r7, r7, lsl #26
    87e4:	016e1300 	cmneq	lr, r0, lsl #6
    87e8:	0019e010 	andseq	lr, r9, r0, lsl r0
    87ec:	e6041100 	str	r1, [r4], -r0, lsl #2
    87f0:	1f000019 	svcne	0x00000019
    87f4:	0019f201 	andseq	pc, r9, r1, lsl #4
    87f8:	17d91600 	ldrbne	r1, [r9, r0, lsl #12]
    87fc:	0a000000 	beq	8804 <__exidx_end+0x5bcc>
    8800:	000005f8 	strdeq	r0, [r0], -r8
    8804:	000019fd 	strdeq	r1, [r0], -sp
    8808:	f2040026 	vhadd.s8	d0, d4, d22
    880c:	20000019 	andcs	r0, r0, r9, lsl r0
    8810:	000005c2 	andeq	r0, r0, r2, asr #11
    8814:	16017f13 			; <UNDEFINED> instruction: 0x16017f13
    8818:	000019fd 	strdeq	r1, [r0], -sp
    881c:	9d200101 	stflss	f0, [r0, #-4]!
    8820:	13000002 	movwne	r0, #2
    8824:	0c140182 	ldfeqs	f0, [r4], {130}	; 0x82
    8828:	01000018 	tsteq	r0, r8, lsl r0
    882c:	027a2001 	rsbseq	r2, sl, #1
    8830:	d8130000 	ldmdale	r3, {}	; <UNPREDICTABLE>
    8834:	18000e02 	stmdane	r0, {r1, r9, sl, fp}
    8838:	01010000 	mrseq	r0, (UNDEF: 1)
    883c:	0313081b 	tsteq	r3, #1769472	; 0x1b0000
    8840:	1a560903 	bne	158ac54 <__ccfg+0x156acac>
    8844:	00180000 	andseq	r0, r8, r0
    8848:	13000032 	movwne	r0, #50	; 0x32
    884c:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    8850:	00000017 	andeq	r0, r0, r7, lsl r0
    8854:	0008dd18 	andeq	sp, r8, r8, lsl sp
    8858:	03081300 	movweq	r1, #33536	; 0x8300
    885c:	00181108 	andseq	r1, r8, r8, lsl #2
    8860:	07000400 	streq	r0, [r0, -r0, lsl #8]
    8864:	00000326 	andeq	r0, r0, r6, lsr #6
    8868:	03030913 	movweq	r0, #14611	; 0x3913
    886c:	00001a2f 	andeq	r1, r0, pc, lsr #20
    8870:	0000181a 	andeq	r1, r0, sl, lsl r8
    8874:	0b133000 	bleq	4d487c <__ccfg+0x4b48d4>
    8878:	1ac60803 	bne	ff18a88c <_estack+0xdf18588c>
    887c:	98180000 	ldmdals	r8, {}	; <UNPREDICTABLE>
    8880:	13000017 	movwne	r0, #23
    8884:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
    8888:	00000017 	andeq	r0, r0, r7, lsl r0
    888c:	0006d918 	andeq	sp, r6, r8, lsl r9
    8890:	03151300 	tsteq	r5, #0, 6
    8894:	0017d908 	andseq	sp, r7, r8, lsl #18
    8898:	20180200 	andscs	r0, r8, r0, lsl #4
    889c:	13000007 	movwne	r0, #7
    88a0:	d30b0316 	movwle	r0, #45846	; 0xb316
    88a4:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    88a8:	00062418 	andeq	r2, r6, r8, lsl r4
    88ac:	03171300 	tsteq	r7, #0, 6
    88b0:	00181109 	andseq	r1, r8, r9, lsl #2
    88b4:	07180800 	ldreq	r0, [r8, -r0, lsl #16]
    88b8:	13000000 	movwne	r0, #0
    88bc:	c60f0318 			; <UNDEFINED> instruction: 0xc60f0318
    88c0:	0c00001a 	stceq	0, cr0, [r0], {26}
    88c4:	0005ad18 	andeq	sl, r5, r8, lsl sp
    88c8:	03191300 	tsteq	r9, #0, 6
    88cc:	001ad615 	andseq	sp, sl, r5, lsl r6
    88d0:	0a002c00 	beq	138d8 <__exidx_end+0x10ca0>
    88d4:	00001a56 	andeq	r1, r0, r6, asr sl
    88d8:	00001ad6 	ldrdeq	r1, [r0], -r6
    88dc:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    88e0:	11000300 	mrsne	r0, LR_irq
    88e4:	001a6304 	andseq	r6, sl, r4, lsl #6
    88e8:	06ce0700 	strbeq	r0, [lr], r0, lsl #14
    88ec:	1c130000 	ldcne	0, cr0, [r3], {-0}
    88f0:	1a631b03 	bne	18cf504 <__ccfg+0x18af55c>
    88f4:	ae200000 	cdpge	0, 2, cr0, cr0, cr0, {0}
    88f8:	13000006 	movwne	r0, #6
    88fc:	f814031e 			; <UNDEFINED> instruction: 0xf814031e
    8900:	0100001a 	tsteq	r0, sl, lsl r0
    8904:	dc041101 	stfles	f1, [r4], {1}
    8908:	2500001a 	strcs	r0, [r0, #-26]	; 0xffffffe6
    890c:	00000460 	andeq	r0, r0, r0, ror #8
    8910:	d9131d14 	ldmdble	r3, {r2, r4, r8, sl, fp, ip}
    8914:	01000017 	tsteq	r0, r7, lsl r0
    8918:	01d22501 	bicseq	r2, r2, r1, lsl #10
    891c:	1e140000 	cdpne	0, 1, cr0, cr4, cr0, {0}
    8920:	0017ea1a 	andseq	lr, r7, sl, lsl sl
    8924:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    8928:	00000709 	andeq	r0, r0, r9, lsl #14
    892c:	ea241e14 	b	910184 <__ccfg+0x8f01dc>
    8930:	01000017 	tsteq	r0, r7, lsl r0
    8934:	07252501 	streq	r2, [r5, -r1, lsl #10]!
    8938:	22140000 	andscs	r0, r4, #0
    893c:	001af814 	andseq	pc, sl, r4, lsl r8	; <UNPREDICTABLE>
    8940:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    8944:	000018a5 	andeq	r1, r0, r5, lsr #17
    8948:	6d273915 			; <UNDEFINED> instruction: 0x6d273915
    894c:	0100000f 	tsteq	r0, pc
    8950:	1b572501 	blne	15d1d5c <__ccfg+0x15b1db4>
    8954:	3a150000 	bcc	54895c <__ccfg+0x5289b4>
    8958:	0009fe15 	andeq	pc, r9, r5, lsl lr	; <UNPREDICTABLE>
    895c:	25010100 	strcs	r0, [r1, #-256]	; 0xffffff00
    8960:	00001fbd 			; <UNDEFINED> instruction: 0x00001fbd
    8964:	ec1a3b15 			; <UNDEFINED> instruction: 0xec1a3b15
    8968:	0100000c 	tsteq	r0, ip
    896c:	1e502501 	cdpne	5, 5, cr2, cr0, cr1, {0}
    8970:	3c150000 	ldccc	0, cr0, [r5], {-0}
    8974:	000d881a 	andeq	r8, sp, sl, lsl r8
    8978:	23010100 	movwcs	r0, #4352	; 0x1100
    897c:	00001f55 	andeq	r1, r0, r5, asr pc
    8980:	a30c2401 	movwge	r2, #50177	; 0xc401
    8984:	05000000 	streq	r0, [r0, #-0]
    8988:	00000003 	andeq	r0, r0, r3
    898c:	18082300 	stmdane	r8, {r8, r9, sp}
    8990:	26010000 	strcs	r0, [r1], -r0
    8994:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    8998:	00030500 	andeq	r0, r3, r0, lsl #10
    899c:	23000000 	movwcs	r0, #0
    89a0:	00000f09 	andeq	r0, r0, r9, lsl #30
    89a4:	ef032701 	svc	0x00032701
    89a8:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    89ac:	00002403 	andeq	r2, r0, r3, lsl #8
    89b0:	1c842320 	stcne	3, cr2, [r4], {32}
    89b4:	2a010000 	bcs	489bc <__ccfg+0x28a14>
    89b8:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    89bc:	00030500 	andeq	r0, r3, r0, lsl #10
    89c0:	23000000 	movwcs	r0, #0
    89c4:	00001c7e 	andeq	r1, r0, lr, ror ip
    89c8:	ef0d4301 	svc	0x000d4301
    89cc:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    89d0:	00000003 	andeq	r0, r0, r3
    89d4:	191e2300 	ldmdbne	lr, {r8, r9, sp}
    89d8:	47010000 	strmi	r0, [r1, -r0]
    89dc:	0017ef0d 	andseq	lr, r7, sp, lsl #30
    89e0:	00030500 	andeq	r0, r3, r0, lsl #10
    89e4:	0a000000 	beq	89ec <__exidx_end+0x5db4>
    89e8:	000017e5 	andeq	r1, r0, r5, ror #15
    89ec:	00001bea 	andeq	r1, r0, sl, ror #23
    89f0:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    89f4:	04000700 	streq	r0, [r0], #-1792	; 0xfffff900
    89f8:	00001bda 	ldrdeq	r1, [r0], -sl
    89fc:	001d0c23 	andseq	r0, sp, r3, lsr #24
    8a00:	134e0100 	movtne	r0, #57600	; 0xe100
    8a04:	00001bea 	andeq	r1, r0, sl, ror #23
    8a08:	00000305 	andeq	r0, r0, r5, lsl #6
    8a0c:	b6230000 	strtlt	r0, [r3], -r0
    8a10:	0100001f 	tsteq	r0, pc, lsl r0
    8a14:	17d90d52 			; <UNDEFINED> instruction: 0x17d90d52
    8a18:	03050000 	movweq	r0, #20480	; 0x5000
    8a1c:	00000000 	andeq	r0, r0, r0
    8a20:	001c3d23 	andseq	r3, ip, r3, lsr #26
    8a24:	03530100 	cmpeq	r3, #0, 2
    8a28:	000017d9 	ldrdeq	r1, [r0], -r9
    8a2c:	00000305 	andeq	r0, r0, r5, lsl #6
    8a30:	8b230000 	blhi	8c8a38 <__ccfg+0x8a8a90>
    8a34:	0100001e 	tsteq	r0, lr, lsl r0
    8a38:	17d90354 			; <UNDEFINED> instruction: 0x17d90354
    8a3c:	03050000 	movweq	r0, #20480	; 0x5000
    8a40:	00000000 	andeq	r0, r0, r0
    8a44:	00184523 	andseq	r4, r8, r3, lsr #10
    8a48:	03550100 	cmpeq	r5, #0, 2
    8a4c:	000017d9 	ldrdeq	r1, [r0], -r9
    8a50:	00000305 	andeq	r0, r0, r5, lsl #6
    8a54:	040c0000 	streq	r0, [ip], #-0
    8a58:	6b095901 	blvs	25ee64 <__ccfg+0x23eebc>
    8a5c:	1000001c 	andne	r0, r0, ip, lsl r0
    8a60:	01007370 	tsteq	r0, r0, ror r3
    8a64:	17d9085a 			; <UNDEFINED> instruction: 0x17d9085a
    8a68:	10000000 	andne	r0, r0, r0
    8a6c:	01007772 	tsteq	r0, r2, ror r7
    8a70:	17d9045b 			; <UNDEFINED> instruction: 0x17d9045b
    8a74:	00020000 	andeq	r0, r2, r0
    8a78:	001bcc02 	andseq	ip, fp, r2, lsl #24
    8a7c:	035c0100 	cmpeq	ip, #0, 2
    8a80:	00001c49 	andeq	r1, r0, r9, asr #24
    8a84:	001c6b04 	andseq	r6, ip, r4, lsl #22
    8a88:	1c770a00 			; <UNDEFINED> instruction: 0x1c770a00
    8a8c:	1c8c0000 	stcne	0, cr0, [ip], {0}
    8a90:	aa0b0000 	bge	2c8a98 <__ccfg+0x2a8af0>
    8a94:	02000000 	andeq	r0, r0, #0
    8a98:	1c7c0400 	cfldrdne	mvd0, [ip], #-0
    8a9c:	fe230000 	cdp2	0, 2, cr0, cr3, cr0, {0}
    8aa0:	0100001b 	tsteq	r0, fp, lsl r0
    8aa4:	1c8c185e 	stcne	8, cr1, [ip], {94}	; 0x5e
    8aa8:	03050000 	movweq	r0, #20480	; 0x5000
    8aac:	00000000 	andeq	r0, r0, r0
    8ab0:	001d3423 	andseq	r3, sp, r3, lsr #8
    8ab4:	1b660100 	blne	1988ebc <__ccfg+0x1968f14>
    8ab8:	00001076 	andeq	r1, r0, r6, ror r0
    8abc:	00000305 	andeq	r0, r0, r5, lsl #6
    8ac0:	77230000 	strvc	r0, [r3, -r0]!
    8ac4:	0100001e 	tsteq	r0, lr, lsl r0
    8ac8:	18110e69 	ldmdane	r1, {r0, r3, r5, r6, r9, sl, fp}
    8acc:	03050000 	movweq	r0, #20480	; 0x5000
    8ad0:	20000020 	andcs	r0, r0, r0, lsr #32
    8ad4:	0018bd23 	andseq	fp, r8, r3, lsr #26
    8ad8:	17690100 	strbne	r0, [r9, -r0, lsl #2]!
    8adc:	00001811 	andeq	r1, r0, r1, lsl r8
    8ae0:	00280305 	eoreq	r0, r8, r5, lsl #6
    8ae4:	de232000 	cdple	0, 2, cr2, cr3, cr0, {0}
    8ae8:	0100001e 	tsteq	r0, lr, lsl r0
    8aec:	0ac12178 	beq	ff0510d4 <_estack+0xdf04c0d4>
    8af0:	03050000 	movweq	r0, #20480	; 0x5000
    8af4:	00000000 	andeq	r0, r0, r0
    8af8:	001a4123 	andseq	r4, sl, r3, lsr #2
    8afc:	1a830100 	bne	fe0c8f04 <_estack+0xde0c3f04>
    8b00:	00000e72 	andeq	r0, r0, r2, ror lr
    8b04:	00000305 	andeq	r0, r0, r5, lsl #6
    8b08:	a5230000 	strge	r0, [r3, #-0]!
    8b0c:	01000017 	tsteq	r0, r7, lsl r0
    8b10:	177e11c1 	ldrbne	r1, [lr, -r1, asr #3]!
    8b14:	03050000 	movweq	r0, #20480	; 0x5000
    8b18:	00000000 	andeq	r0, r0, r0
    8b1c:	001d9e27 	andseq	r9, sp, r7, lsr #28
    8b20:	020a0100 	andeq	r0, sl, #0, 2
    8b24:	0000a30c 	andeq	sl, r0, ip, lsl #6
    8b28:	cc012800 	stcgt	8, cr2, [r1], {-0}
    8b2c:	01000018 	tsteq	r0, r8, lsl r0
    8b30:	010603d7 	ldrdeq	r0, [r6, -r7]
	...
    8b3c:	1da59c01 	stcne	12, cr9, [r5, #4]!
    8b40:	70290000 	eorvc	r0, r9, r0
    8b44:	01007968 	tsteq	r0, r8, ror #18
    8b48:	a31703d7 	tstge	r7, #1543503875	; 0x5c000003
    8b4c:	ea000000 	b	8b54 <__exidx_end+0x5f1c>
    8b50:	29000022 	stmdbcs	r0, {r1, r5}
    8b54:	0073626d 	rsbseq	r6, r3, sp, ror #4
    8b58:	2003d701 	andcs	sp, r3, r1, lsl #14
    8b5c:	000000a3 	andeq	r0, r0, r3, lsr #1
    8b60:	00002334 	andeq	r2, r0, r4, lsr r3
    8b64:	001e352a 	andseq	r3, lr, sl, lsr #10
    8b68:	00000000 	andeq	r0, r0, r0
    8b6c:	000cc800 	andeq	ip, ip, r0, lsl #16
    8b70:	03f00100 	mvnseq	r0, #0, 2
    8b74:	001d9302 	andseq	r9, sp, r2, lsl #6
    8b78:	0cc82b00 	vstmiaeq	r8, {d18-d17}
    8b7c:	432c0000 			; <UNDEFINED> instruction: 0x432c0000
    8b80:	2d00001e 	stccs	0, cr0, [r0, #-120]	; 0xffffff88
    8b84:	00001e4e 	andeq	r1, r0, lr, asr #28
    8b88:	0000235d 	andeq	r2, r0, sp, asr r3
    8b8c:	001e5a2d 	andseq	r5, lr, sp, lsr #20
    8b90:	00237c00 	eoreq	r7, r3, r0, lsl #24
    8b94:	1e662d00 	cdpne	13, 6, cr2, cr6, cr0, {0}
    8b98:	23a50000 			; <UNDEFINED> instruction: 0x23a50000
    8b9c:	00000000 	andeq	r0, r0, r0
    8ba0:	001fcc2e 	andseq	ip, pc, lr, lsr #24
    8ba4:	00000000 	andeq	r0, r0, r0
    8ba8:	000d0800 	andeq	r0, sp, r0, lsl #16
    8bac:	04140100 	ldreq	r0, [r4], #-256	; 0xffffff00
    8bb0:	732f0002 			; <UNDEFINED> instruction: 0x732f0002
    8bb4:	0100001b 	tsteq	r0, fp, lsl r0
    8bb8:	010c034a 	tsteq	ip, sl, asr #6
    8bbc:	000000a3 	andeq	r0, r0, r3, lsr #1
	...
    8bc8:	1e359c01 	cdpne	12, 3, cr9, cr5, cr1, {0}
    8bcc:	6f290000 	svcvs	0x00290000
    8bd0:	01007470 	tsteq	r0, r0, ror r4
    8bd4:	a318034a 	tstge	r8, #671088641	; 0x28000001
    8bd8:	d9000000 	stmdble	r0, {}	; <UNPREDICTABLE>
    8bdc:	29000023 	stmdbcs	r0, {r0, r1, r5}
    8be0:	006c6176 	rsbeq	r6, ip, r6, ror r1
    8be4:	25034a01 	strcs	r4, [r3, #-2561]	; 0xfffff5ff
    8be8:	0000181d 	andeq	r1, r0, sp, lsl r8
    8bec:	00002465 	andeq	r2, r0, r5, ror #8
    8bf0:	74657230 	strbtvc	r7, [r5], #-560	; 0xfffffdd0
    8bf4:	034c0100 	movteq	r0, #49408	; 0xc100
    8bf8:	0000a306 	andeq	sl, r0, r6, lsl #6
    8bfc:	00251d00 	eoreq	r1, r5, r0, lsl #26
    8c00:	1a633100 	bne	18d5008 <__ccfg+0x18b5060>
    8c04:	cf010000 	svcgt	0x00010000
    8c08:	00000103 	andeq	r0, r0, r3, lsl #2
    8c0c:	6c310000 	ldcvs	0, cr0, [r1], #-0
    8c10:	0100001c 	tsteq	r0, ip, lsl r0
    8c14:	00010358 	andeq	r0, r1, r8, asr r3
    8c18:	31000000 	mrscc	r0, (UNDEF: 0)
    8c1c:	00001e18 	andeq	r1, r0, r8, lsl lr
    8c20:	0103cd01 	tsteq	r3, r1, lsl #26
    8c24:	00000000 	andeq	r0, r0, r0
    8c28:	00000032 	andeq	r0, r0, r2, lsr r0
    8c2c:	00000000 	andeq	r0, r0, r0
    8c30:	006a3000 	rsbeq	r3, sl, r0
    8c34:	04035901 	streq	r5, [r3], #-2305	; 0xfffff6ff
    8c38:	000000a3 	andeq	r0, r0, r3, lsr #1
    8c3c:	00002567 	andeq	r2, r0, r7, ror #10
    8c40:	e2330000 	eors	r0, r3, #0
    8c44:	0100001a 	tsteq	r0, sl, lsl r0
    8c48:	010d0307 	tsteq	sp, r7, lsl #6
    8c4c:	00001e73 	andeq	r1, r0, r3, ror lr
    8c50:	01006934 	tsteq	r0, r4, lsr r9
    8c54:	a306030b 	movwge	r0, #25355	; 0x630b
    8c58:	34000000 	strcc	r0, [r0], #-0
    8c5c:	01006572 	tsteq	r0, r2, ror r5
    8c60:	731a030c 	tstvc	sl, #12, 6	; 0x30000000
    8c64:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    8c68:	01006164 	tsteq	r0, r4, ror #2
    8c6c:	731f030c 	tstvc	pc, #12, 6	; 0x30000000
    8c70:	3400001e 	strcc	r0, [r0], #-30	; 0xffffffe2
    8c74:	01006264 	tsteq	r0, r4, ror #4
    8c78:	7324030c 			; <UNDEFINED> instruction: 0x7324030c
    8c7c:	0000001e 	andeq	r0, r0, lr, lsl r0
    8c80:	16ab0411 	ssatne	r0, #12, r1, lsl #8
    8c84:	01280000 			; <UNDEFINED> instruction: 0x01280000
    8c88:	000018d8 	ldrdeq	r1, [r0], -r8
    8c8c:	01020d01 	tsteq	r2, r1, lsl #26
    8c90:	00000001 	andeq	r0, r0, r1
    8c94:	00000000 	andeq	r0, r0, r0
    8c98:	fd9c0100 	ldc2	1, cr0, [ip]
    8c9c:	3500001e 	strcc	r0, [r0, #-30]	; 0xffffffe2
    8ca0:	000006eb 	andeq	r0, r0, fp, ror #13
    8ca4:	01020d01 	tsteq	r2, r1, lsl #26
    8ca8:	000017d9 	ldrdeq	r1, [r0], -r9
    8cac:	0000257a 	andeq	r2, r0, sl, ror r5
    8cb0:	00180f31 	andseq	r0, r8, r1, lsr pc
    8cb4:	02160100 	andseq	r0, r6, #0, 2
    8cb8:	00000001 	andeq	r0, r0, r1
    8cbc:	20232e00 	eorcs	r2, r3, r0, lsl #28
    8cc0:	00000000 	andeq	r0, r0, r0
    8cc4:	0c680000 	stcleq	0, cr0, [r8], #-0
    8cc8:	25010000 	strcs	r0, [r1, #-0]
    8ccc:	f32a0402 	vshl.u32	d0, d2, d10
    8cd0:	0000001f 	andeq	r0, r0, pc, lsl r0
    8cd4:	80000000 	andhi	r0, r0, r0
    8cd8:	0100000c 	tsteq	r0, ip
    8cdc:	eb040226 	bl	10957c <__ccfg+0xe95d4>
    8ce0:	2b00001e 	blcs	8d60 <__exidx_end+0x6128>
    8ce4:	00000c80 	andeq	r0, r0, r0, lsl #25
    8ce8:	0020012d 	eoreq	r0, r0, sp, lsr #2
    8cec:	0025a300 	eoreq	sl, r5, r0, lsl #6
    8cf0:	200d2c00 	andcs	r2, sp, r0, lsl #24
    8cf4:	00000000 	andeq	r0, r0, r0
    8cf8:	00202336 	eoreq	r2, r0, r6, lsr r3
	...
    8d04:	02650100 	rsbeq	r0, r5, #0, 2
    8d08:	01280003 			; <UNDEFINED> instruction: 0x01280003
    8d0c:	00001e5d 	andeq	r1, r0, sp, asr lr
    8d10:	0601ec01 	streq	lr, [r1], -r1, lsl #24
    8d14:	0015a801 	andseq	sl, r5, r1, lsl #16
    8d18:	00161800 	andseq	r1, r6, r0, lsl #16
    8d1c:	629c0100 	addsvs	r0, ip, #0, 2
    8d20:	3700001f 	smladcc	r0, pc, r0, r0	; <UNPREDICTABLE>
    8d24:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    8d28:	00001f2f 	andeq	r1, r0, pc, lsr #30
    8d2c:	01006a30 	tsteq	r0, r0, lsr sl
    8d30:	a30201fe 	movwge	r0, #8702	; 0x21fe
    8d34:	c2000000 	andgt	r0, r0, #0
    8d38:	00000025 	andeq	r0, r0, r5, lsr #32
    8d3c:	0021d538 	eoreq	sp, r1, r8, lsr r5
    8d40:	0015bc00 	andseq	fp, r5, r0, lsl #24
    8d44:	0015c600 	andseq	ip, r5, r0, lsl #12
    8d48:	01f80100 	mvnseq	r0, r0, lsl #2
    8d4c:	001f4a02 	andseq	r4, pc, r2, lsl #20
    8d50:	21e43900 	mvncs	r3, r0, lsl #18
    8d54:	3a000000 	bcc	8d5c <__exidx_end+0x6124>
    8d58:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8d5c:	000015c6 	andeq	r1, r0, r6, asr #11
    8d60:	00000c98 	muleq	r0, r8, ip
    8d64:	0201fb01 	andeq	pc, r1, #1024	; 0x400
    8d68:	00220039 	eoreq	r0, r2, r9, lsr r0
    8d6c:	3b000000 	blcc	8d74 <__exidx_end+0x613c>
    8d70:	00001c9c 	muleq	r0, ip, ip
    8d74:	0d01b501 	cfstr32eq	mvfx11, [r1, #-4]
	...
    8d80:	1fcc9c01 	svcne	0x00cc9c01
    8d84:	64300000 	ldrtvs	r0, [r0], #-0
    8d88:	b7010062 	strlt	r0, [r1, -r2, rrx]
    8d8c:	1e731a01 	vaddne.f32	s3, s6, s2
    8d90:	25d50000 	ldrbcs	r0, [r5]
    8d94:	69340000 	ldmdbvs	r4!, {}	; <UNPREDICTABLE>
    8d98:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    8d9c:	0000a306 	andeq	sl, r0, r6, lsl #6
    8da0:	6c703000 	ldclvs	0, cr3, [r0], #-0
    8da4:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    8da8:	0000a309 	andeq	sl, r0, r9, lsl #6
    8dac:	00261700 	eoreq	r1, r6, r0, lsl #14
    8db0:	726e3000 	rsbvc	r3, lr, #0
    8db4:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    8db8:	0000a30d 	andeq	sl, r0, sp, lsl #6
    8dbc:	00262a00 	eoreq	r2, r6, r0, lsl #20
    8dc0:	220d3a00 	andcs	r3, sp, #0, 20
    8dc4:	00000000 	andeq	r0, r0, r0
    8dc8:	0c380000 	ldceq	0, cr0, [r8], #-0
    8dcc:	c1010000 	mrsgt	r0, (UNDEF: 1)
    8dd0:	1b390201 	blne	e495dc <__ccfg+0xe29634>
    8dd4:	00000022 	andeq	r0, r0, r2, lsr #32
    8dd8:	1be13c00 	blne	ff857de0 <_estack+0xdf852de0>
    8ddc:	ab010000 	blge	48de4 <__ccfg+0x28e3c>
    8de0:	3d010d01 	stccc	13, cr0, [r1, #-4]
    8de4:	00001bf7 	strdeq	r1, [r0], -r7
    8de8:	0d01a001 	stceq	0, cr10, [r1, #-4]
	...
    8df4:	963c9c01 	ldrtls	r9, [ip], -r1, lsl #24
    8df8:	0100001c 	tsteq	r0, ip, lsl r0
    8dfc:	010d0195 			; <UNDEFINED> instruction: 0x010d0195
    8e00:	001aa533 	andseq	sl, sl, r3, lsr r5
    8e04:	01800100 	orreq	r0, r0, r0, lsl #2
    8e08:	2019010d 	andscs	r0, r9, sp, lsl #2
    8e0c:	72340000 	eorsvc	r0, r4, #0
    8e10:	84010065 	strhi	r0, [r1], #-101	; 0xffffff9b
    8e14:	1e731a01 	vaddne.f32	s3, s6, s2
    8e18:	69340000 	ldmdbvs	r4!, {}	; <UNPREDICTABLE>
    8e1c:	01850100 	orreq	r0, r5, r0, lsl #2
    8e20:	0000a306 	andeq	sl, r0, r6, lsl #6
    8e24:	3c3c0000 	ldccc	0, cr0, [ip], #-0
    8e28:	0100001b 	tsteq	r0, fp, lsl r0
    8e2c:	010d0161 	tsteq	sp, r1, ror #2
    8e30:	00179f3e 	andseq	r9, r7, lr, lsr pc
    8e34:	0dff0100 	ldfeqe	f0, [pc]	; 8e3c <__exidx_end+0x6204>
    8e38:	186b3f01 	stmdane	fp!, {r0, r8, r9, sl, fp, ip, sp}^
    8e3c:	e2010000 	and	r0, r1, #0
    8e40:	5f01010d 	svcpl	0x0001010d
    8e44:	40000020 	andmi	r0, r0, r0, lsr #32
    8e48:	00646d63 	rsbeq	r6, r4, r3, ror #26
    8e4c:	c026e201 	eorgt	lr, r6, r1, lsl #4
    8e50:	4100000b 	tstmi	r0, fp
    8e54:	00001f68 	andeq	r1, r0, r8, ror #30
    8e58:	0031e201 	eorseq	lr, r1, r1, lsl #4
    8e5c:	41000018 	tstmi	r0, r8, lsl r0
    8e60:	00001e6f 	andeq	r1, r0, pc, ror #28
    8e64:	003ee201 	eorseq	lr, lr, r1, lsl #4
    8e68:	00000018 	andeq	r0, r0, r8, lsl r0
    8e6c:	0017723f 	andseq	r7, r7, pc, lsr r2
    8e70:	0dc50100 	stfeqe	f0, [r5]
    8e74:	20920101 	addscs	r0, r2, r1, lsl #2
    8e78:	63400000 	movtvs	r0, #0
    8e7c:	0100646d 	tsteq	r0, sp, ror #8
    8e80:	18001ec5 	stmdane	r0, {r0, r2, r6, r7, r9, sl, fp, ip}
    8e84:	72420000 	subvc	r0, r2, #0
    8e88:	01007365 	tsteq	r0, r5, ror #6
    8e8c:	00a306ca 	adceq	r0, r3, sl, asr #13
    8e90:	63420000 	movtvs	r0, #8192	; 0x2000
    8e94:	0100746e 	tsteq	r0, lr, ror #8
    8e98:	00a306cd 	adceq	r0, r3, sp, asr #13
    8e9c:	43000000 	movwmi	r0, #0
    8ea0:	00000b9c 	muleq	r0, ip, fp
    8ea4:	01015403 	tsteq	r1, r3, lsl #8
    8ea8:	20af0301 	adccs	r0, pc, r1, lsl #6
    8eac:	31440000 	mrscc	r0, (UNDEF: 68)
    8eb0:	0300000a 	movweq	r0, #10
    8eb4:	7f190154 	svcvc	0x00190154
    8eb8:	00000000 	andeq	r0, r0, r0
    8ebc:	000ca143 	andeq	sl, ip, r3, asr #2
    8ec0:	011e0300 	tsteq	lr, r0, lsl #6
    8ec4:	cc030101 	stfgts	f0, [r3], {1}
    8ec8:	44000020 	strmi	r0, [r0], #-32	; 0xffffffe0
    8ecc:	00000a31 	andeq	r0, r0, r1, lsr sl
    8ed0:	17011e03 	strne	r1, [r1, -r3, lsl #28]
    8ed4:	0000007f 	andeq	r0, r0, pc, ror r0
    8ed8:	1dfe4300 	ldclne	3, cr4, [lr]
    8edc:	ea050000 	b	148ee4 <__ccfg+0x128f3c>
    8ee0:	03011501 	movweq	r1, #5377	; 0x1501
    8ee4:	00002161 	andeq	r2, r0, r1, ror #2
    8ee8:	00537034 	subseq	r7, r3, r4, lsr r0
    8eec:	1401f205 	strne	pc, [r1], #-517	; 0xfffffdfb
    8ef0:	00002161 	andeq	r2, r0, r1, ror #2
    8ef4:	00447034 	subeq	r7, r4, r4, lsr r0
    8ef8:	1c01f305 	stcne	3, cr15, [r1], {5}
    8efc:	00002167 	andeq	r2, r0, r7, ror #2
    8f00:	00317434 	eorseq	r7, r1, r4, lsr r4
    8f04:	0d01f405 	cfstrseq	mvf15, [r1, #-20]	; 0xffffffec
    8f08:	0000007f 	andeq	r0, r0, pc, ror r0
    8f0c:	00327434 	eorseq	r7, r2, r4, lsr r4
    8f10:	1101f405 	tstne	r1, r5, lsl #8	; <UNPREDICTABLE>
    8f14:	0000007f 	andeq	r0, r0, pc, ror r0
    8f18:	00337434 	eorseq	r7, r3, r4, lsr r4
    8f1c:	1501f405 	strne	pc, [r1, #-1029]	; 0xfffffbfb
    8f20:	0000007f 	andeq	r0, r0, pc, ror r0
    8f24:	00347434 	eorseq	r7, r4, r4, lsr r4
    8f28:	1901f405 	stmdbne	r1, {r0, r2, sl, ip, sp, lr, pc}
    8f2c:	0000007f 	andeq	r0, r0, pc, ror r0
    8f30:	00357434 	eorseq	r7, r5, r4, lsr r4
    8f34:	1d01f405 	cfstrsne	mvf15, [r1, #-20]	; 0xffffffec
    8f38:	0000007f 	andeq	r0, r0, pc, ror r0
    8f3c:	00367434 	eorseq	r7, r6, r4, lsr r4
    8f40:	2101f405 	tstcs	r1, r5, lsl #8	; <UNPREDICTABLE>
    8f44:	0000007f 	andeq	r0, r0, pc, ror r0
    8f48:	00377434 	eorseq	r7, r7, r4, lsr r4
    8f4c:	2501f405 	strcs	pc, [r1, #-1029]	; 0xfffffbfb
    8f50:	0000007f 	andeq	r0, r0, pc, ror r0
    8f54:	00387434 	eorseq	r7, r8, r4, lsr r4
    8f58:	2901f405 	stmdbcs	r1, {r0, r2, sl, ip, sp, lr, pc}
    8f5c:	0000007f 	andeq	r0, r0, pc, ror r0
    8f60:	001e3827 	andseq	r3, lr, r7, lsr #16
    8f64:	01f50500 	mvnseq	r0, r0, lsl #10
    8f68:	00007f0d 	andeq	r7, r0, sp, lsl #30
    8f6c:	04110000 	ldreq	r0, [r1], #-0
    8f70:	0000008b 	andeq	r0, r0, fp, lsl #1
    8f74:	00970411 	addseq	r0, r7, r1, lsl r4
    8f78:	44450000 	strbmi	r0, [r5], #-0
    8f7c:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    8f80:	0115012f 	tsteq	r5, pc, lsr #2
    8f84:	190d4503 	stmdbne	sp, {r0, r1, r8, sl, lr}
    8f88:	22040000 	andcs	r0, r4, #0
    8f8c:	03011501 	movweq	r1, #5377	; 0x1501
    8f90:	0017c443 	andseq	ip, r7, r3, asr #8
    8f94:	01110400 	tsteq	r1, r0, lsl #8
    8f98:	ad030115 	stfges	f0, [r3, #-84]	; 0xffffffac
    8f9c:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    8fa0:	00001ecb 	andeq	r1, r0, fp, asr #29
    8fa4:	0d011304 	stceq	3, cr1, [r1, #-16]
    8fa8:	00000984 	andeq	r0, r0, r4, lsl #19
    8fac:	00197b27 	andseq	r7, r9, r7, lsr #22
    8fb0:	01140400 	tsteq	r4, r0, lsl #8
    8fb4:	000bc60e 	andeq	ip, fp, lr, lsl #12
    8fb8:	76450000 	strbvc	r0, [r5], -r0
    8fbc:	0400001f 	streq	r0, [r0], #-31	; 0xffffffe1
    8fc0:	0115010d 	tsteq	r5, sp, lsl #2
    8fc4:	1f0f4303 	svcne	0x000f4303
    8fc8:	04040000 	streq	r0, [r4], #-0
    8fcc:	03011501 	movweq	r1, #5377	; 0x1501
    8fd0:	000021d5 	ldrdeq	r2, [r0], -r5
    8fd4:	00198527 	andseq	r8, r9, r7, lsr #10
    8fd8:	01060400 	tsteq	r6, r0, lsl #8
    8fdc:	000bc60e 	andeq	ip, fp, lr, lsl #12
    8fe0:	e8430000 	stmda	r3, {}^	; <UNPREDICTABLE>
    8fe4:	0200001b 	andeq	r0, r0, #27
    8fe8:	0101011d 	tsteq	r1, sp, lsl r1
    8fec:	0021f203 	eoreq	pc, r1, r3, lsl #4
    8ff0:	1aab4400 	bne	fead9ff8 <_estack+0xdead4ff8>
    8ff4:	1d020000 	stcne	0, cr0, [r2, #-0]
    8ff8:	007f1901 	rsbseq	r1, pc, r1, lsl #18
    8ffc:	3f000000 	svccc	0x00000000
    9000:	0000198f 	andeq	r1, r0, pc, lsl #19
    9004:	0101f702 	tsteq	r1, r2, lsl #14	; <UNPREDICTABLE>
    9008:	00220d03 	eoreq	r0, r2, r3, lsl #26
    900c:	1aab4100 	bne	fead9414 <_estack+0xdead4414>
    9010:	f7020000 			; <UNDEFINED> instruction: 0xf7020000
    9014:	00007f1b 	andeq	r7, r0, fp, lsl pc
    9018:	c33f0000 	teqgt	pc, #0
    901c:	02000019 	andeq	r0, r0, #25
    9020:	030101aa 	movweq	r0, #4522	; 0x11aa
    9024:	00002228 	andeq	r2, r0, r8, lsr #4
    9028:	001aab41 	andseq	sl, sl, r1, asr #22
    902c:	1baa0200 	blne	fea89834 <_estack+0xdea84834>
    9030:	0000007f 	andeq	r0, r0, pc, ror r0
    9034:	1d824600 	stcne	6, cr4, [r2]
    9038:	9c020000 	stcls	0, cr0, [r2], {-0}
    903c:	46030101 	strmi	r0, [r3], -r1, lsl #2
    9040:	00001fd2 	ldrdeq	r1, [r0], -r2
    9044:	01017902 	tsteq	r1, r2, lsl #18
    9048:	205f4703 	subscs	r4, pc, r3, lsl #14
	...
    9054:	9c010000 	stcls	0, cr0, [r1], {-0}
    9058:	0000228b 	andeq	r2, r0, fp, lsl #5
    905c:	00206d48 	eoreq	r6, r0, r8, asr #26
    9060:	00264800 	eoreq	r4, r6, r0, lsl #16
    9064:	20792d00 	rsbscs	r2, r9, r0, lsl #26
    9068:	26660000 	strbtcs	r0, [r6], -r0
    906c:	852c0000 	strhi	r0, [ip, #-0]!
    9070:	49000020 	stmdbmi	r0, {r5}
    9074:	0000205f 	andeq	r2, r0, pc, asr r0
	...
    9080:	480dc501 	stmdami	sp, {r0, r8, sl, lr, pc}
    9084:	0000206d 	andeq	r2, r0, sp, rrx
    9088:	0000269a 	muleq	r0, sl, r6
    908c:	0020792c 	eoreq	r7, r0, ip, lsr #18
    9090:	20852c00 	addcs	r2, r5, r0, lsl #24
    9094:	00000000 	andeq	r0, r0, r0
    9098:	001fe947 	andseq	lr, pc, r7, asr #18
	...
    90a4:	b09c0100 	addslt	r0, ip, r0, lsl #2
    90a8:	36000022 	strcc	r0, [r0], -r2, lsr #32
    90ac:	00001fe9 	andeq	r1, r0, r9, ror #31
	...
    90b8:	0d019501 	cfstr32eq	mvfx9, [r1, #-4]
    90bc:	20194700 	andscs	r4, r9, r0, lsl #14
	...
    90c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    90cc:	00002319 	andeq	r2, r0, r9, lsl r3
    90d0:	0020194a 	eoreq	r1, r0, sl, asr #18
	...
    90dc:	01610100 	cmneq	r1, r0, lsl #2
    90e0:	22282e0d 	eorcs	r2, r8, #13, 28	; 0xd0
    90e4:	00000000 	andeq	r0, r0, r0
    90e8:	0ba80000 	bleq	fea090f0 <_estack+0xdea040f0>
    90ec:	6f010000 	svcvs	0x00010000
    90f0:	92380201 	eorsls	r0, r8, #268435456	; 0x10000000
    90f4:	00000020 	andeq	r0, r0, r0, lsr #32
    90f8:	00000000 	andeq	r0, r0, r0
    90fc:	01000000 	mrseq	r0, (UNDEF: 0)
    9100:	0002017a 	andeq	r0, r2, sl, ror r1
    9104:	39000023 	stmdbcc	r0, {r0, r1, r5}
    9108:	000020a1 	andeq	r2, r0, r1, lsr #1
    910c:	20924a00 	addscs	r4, r2, r0, lsl #20
	...
    9118:	7a010000 	bvc	49120 <__ccfg+0x29178>
    911c:	a1390201 	teqge	r9, r1, lsl #4
    9120:	00000020 	andeq	r0, r0, r0, lsr #32
    9124:	2c470000 	marcs	acc0, r0, r7
    9128:	00000020 	andeq	r0, r0, r0, lsr #32
    912c:	00000000 	andeq	r0, r0, r0
    9130:	01000000 	mrseq	r0, (UNDEF: 0)
    9134:	0023449c 	mlaeq	r3, ip, r4, r4
    9138:	203a4800 	eorscs	r4, sl, r0, lsl #16
    913c:	26ad0000 	strtcs	r0, [sp], r0
    9140:	46480000 	strbmi	r0, [r8], -r0
    9144:	cb000020 	blgt	91cc <__exidx_end+0x6594>
    9148:	39000026 	stmdbcc	r0, {r1, r2, r5}
    914c:	00002052 	andeq	r2, r0, r2, asr r0
    9150:	20234b00 	eorcs	r4, r3, r0, lsl #22
	...
    915c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9160:	0020af2a 	eoreq	sl, r0, sl, lsr #30
    9164:	00000000 	andeq	r0, r0, r0
    9168:	000bc800 	andeq	ip, fp, r0, lsl #16
    916c:	01080100 	mrseq	r0, (UNDEF: 24)
    9170:	00236e02 	eoreq	r6, r3, r2, lsl #28
    9174:	20be3900 	adcscs	r3, lr, r0, lsl #18
    9178:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    917c:	000020af 	andeq	r2, r0, pc, lsr #1
	...
    9188:	02010801 	andeq	r0, r1, #65536	; 0x10000
    918c:	00002389 	andeq	r2, r0, r9, lsl #7
    9190:	0020be39 	eoreq	fp, r0, r9, lsr lr
    9194:	322e0000 	eorcc	r0, lr, #0
    9198:	00000022 	andeq	r0, r0, r2, lsr #32
    919c:	e0000000 	and	r0, r0, r0
    91a0:	0100000b 	tsteq	r0, fp
    91a4:	2a02011a 	bcs	89614 <__ccfg+0x6966c>
    91a8:	0000216d 	andeq	r2, r0, sp, ror #2
    91ac:	00000000 	andeq	r0, r0, r0
    91b0:	00000bf8 	strdeq	r0, [r0], -r8
    91b4:	02012101 	andeq	r2, r1, #1073741824	; 0x40000000
    91b8:	0000240b 	andeq	r2, r0, fp, lsl #8
    91bc:	0021783a 	eoreq	r7, r1, sl, lsr r8
    91c0:	00000000 	andeq	r0, r0, r0
    91c4:	000bf800 	andeq	pc, fp, r0, lsl #16
    91c8:	01310400 	teqeq	r1, r0, lsl #8
    91cc:	21b83804 			; <UNDEFINED> instruction: 0x21b83804
	...
    91d8:	25040000 	strcs	r0, [r4, #-0]
    91dc:	23df0401 	bicscs	r0, pc, #16777216	; 0x1000000
    91e0:	c74c0000 	strbgt	r0, [ip, -r0]
    91e4:	1c000021 	stcne	0, cr0, [r0], {33}	; 0x21
    91e8:	00210004 	eoreq	r0, r1, r4
    91ec:	0021833a 	eoreq	r8, r1, sl, lsr r3
    91f0:	00000000 	andeq	r0, r0, r0
    91f4:	000c0000 	andeq	r0, ip, r0
    91f8:	01260400 			; <UNDEFINED> instruction: 0x01260400
    91fc:	0c002b04 			; <UNDEFINED> instruction: 0x0c002b04
    9200:	924c0000 	subls	r0, ip, #0
    9204:	40000021 	andmi	r0, r0, r1, lsr #32
    9208:	4c210003 	stcmi	0, cr0, [r1], #-12
    920c:	0000219f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    9210:	210003bc 			; <UNDEFINED> instruction: 0x210003bc
    9214:	00000000 	andeq	r0, r0, r0
    9218:	0020cc3a 	eoreq	ip, r0, sl, lsr ip
    921c:	00000000 	andeq	r0, r0, r0
    9220:	000c1800 	andeq	r1, ip, r0, lsl #16
    9224:	01220100 			; <UNDEFINED> instruction: 0x01220100
    9228:	0c182b02 			; <UNDEFINED> instruction: 0x0c182b02
    922c:	db2d0000 	blle	b49234 <__ccfg+0xb2928c>
    9230:	e9000020 	stmdb	r0, {r5}
    9234:	2d000026 	stccs	0, cr0, [r0, #-152]	; 0xffffff68
    9238:	000020e7 	andeq	r2, r0, r7, ror #1
    923c:	000026fc 	strdeq	r2, [r0], -ip
    9240:	0020f32c 	eoreq	pc, r0, ip, lsr #6
    9244:	20ff2d00 	rscscs	r2, pc, r0, lsl #26
    9248:	271a0000 	ldrcs	r0, [sl, -r0]
    924c:	0b2c0000 	bleq	b09254 <__ccfg+0xae92ac>
    9250:	2d000021 	stccs	0, cr0, [r0, #-132]	; 0xffffff7c
    9254:	00002117 	andeq	r2, r0, r7, lsl r1
    9258:	0000272d 	andeq	r2, r0, sp, lsr #14
    925c:	0021232c 	eoreq	r2, r1, ip, lsr #6
    9260:	212f2d00 			; <UNDEFINED> instruction: 0x212f2d00
    9264:	27400000 	strbcs	r0, [r0, -r0]
    9268:	3b2d0000 	blcc	b49270 <__ccfg+0xb292c8>
    926c:	53000021 	movwpl	r0, #33	; 0x21
    9270:	2d000027 	stccs	0, cr0, [r0, #-156]	; 0xffffff64
    9274:	00002147 	andeq	r2, r0, r7, asr #2
    9278:	0000277e 	andeq	r2, r0, lr, ror r7
    927c:	0021532c 	eoreq	r5, r1, ip, lsr #6
    9280:	00000000 	andeq	r0, r0, r0
    9284:	00042d00 	andeq	r2, r4, r0, lsl #26
    9288:	50000300 	andpl	r0, r0, r0, lsl #6
    928c:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    9290:	00007301 	andeq	r7, r0, r1, lsl #6
    9294:	1fed0c00 	svcne	0x00ed0c00
    9298:	050c0000 	streq	r0, [ip, #-0]
    929c:	0d980000 	ldceq	0, cr0, [r8]
    92a0:	00000000 	andeq	r0, r0, r0
    92a4:	55b90000 	ldrpl	r0, [r9, #0]!
    92a8:	01020000 	mrseq	r0, (UNDEF: 2)
    92ac:	0006fd06 	andeq	pc, r6, r6, lsl #26
    92b0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    92b4:	000005fe 	strdeq	r0, [r0], -lr
    92b8:	c5050402 	strgt	r0, [r5, #-1026]	; 0xfffffbfe
    92bc:	02000004 	andeq	r0, r0, #4
    92c0:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    92c4:	66030000 	strvs	r0, [r3], -r0
    92c8:	02000006 	andeq	r0, r0, #6
    92cc:	004d182e 	subeq	r1, sp, lr, lsr #16
    92d0:	01020000 	mrseq	r0, (UNDEF: 2)
    92d4:	0006fb08 	andeq	pc, r6, r8, lsl #22
    92d8:	03350300 	teqeq	r5, #0, 6
    92dc:	31020000 	mrscc	r0, (UNDEF: 2)
    92e0:	00006019 	andeq	r6, r0, r9, lsl r0
    92e4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    92e8:	000007a7 	andeq	r0, r0, r7, lsr #15
    92ec:	00071403 	andeq	r1, r7, r3, lsl #8
    92f0:	19340200 	ldmdbne	r4!, {r9}
    92f4:	00000073 	andeq	r0, r0, r3, ror r0
    92f8:	fa070402 	blx	1ca308 <__ccfg+0x1aa360>
    92fc:	02000002 	andeq	r0, r0, #2
    9300:	02f50708 	rscseq	r0, r5, #8, 14	; 0x200000
    9304:	04040000 	streq	r0, [r4], #-0
    9308:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    930c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9310:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9314:	00210003 	eoreq	r0, r1, r3
    9318:	12270300 	eorne	r0, r7, #0, 6
    931c:	00000054 	andeq	r0, r0, r4, asr r0
    9320:	00008f05 	andeq	r8, r0, r5, lsl #30
    9324:	16c80300 	strbne	r0, [r8], r0, lsl #6
    9328:	2b030000 	blcs	c9330 <__ccfg+0xa9388>
    932c:	00004112 	andeq	r4, r0, r2, lsl r1
    9330:	00a00600 	adceq	r0, r0, r0, lsl #12
    9334:	51030000 	mrspl	r0, (UNDEF: 3)
    9338:	03000021 	movweq	r0, #33	; 0x21
    933c:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    9340:	b1050000 	mrslt	r0, (UNDEF: 5)
    9344:	03000000 	movweq	r0, #0
    9348:	0000040d 	andeq	r0, r0, sp, lsl #8
    934c:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    9350:	07000000 	streq	r0, [r0, -r0]
    9354:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    9358:	0000015c 	andeq	r0, r0, ip, asr r1
    935c:	00002308 	andeq	r2, r0, r8, lsl #6
    9360:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    9364:	000000a0 	andeq	r0, r0, r0, lsr #1
    9368:	00070101 	andeq	r0, r7, r1, lsl #2
    936c:	00041308 	andeq	r1, r4, r8, lsl #6
    9370:	03350300 	teqeq	r5, #0, 6
    9374:	000000a0 	andeq	r0, r0, r0, lsr #1
    9378:	00060101 	andeq	r0, r6, r1, lsl #2
    937c:	0001cb08 	andeq	ip, r1, r8, lsl #22
    9380:	03360300 	teqeq	r6, #0, 6
    9384:	000000a0 	andeq	r0, r0, r0, lsr #1
    9388:	00050101 	andeq	r0, r5, r1, lsl #2
    938c:	00044d08 	andeq	r4, r4, r8, lsl #26
    9390:	03370300 	teqeq	r7, #0, 6
    9394:	000000a0 	andeq	r0, r0, r0, lsr #1
    9398:	00040101 	andeq	r0, r4, r1, lsl #2
    939c:	00060808 	andeq	r0, r6, r8, lsl #16
    93a0:	03380300 	teqeq	r8, #0, 6
    93a4:	000000a0 	andeq	r0, r0, r0, lsr #1
    93a8:	00000401 	andeq	r0, r0, r1, lsl #8
    93ac:	00041a09 	andeq	r1, r4, r9, lsl #20
    93b0:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    93b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    93b8:	05760901 	ldrbeq	r0, [r6, #-2305]!	; 0xfffff6ff
    93bc:	3c030000 	stccc	0, cr0, [r3], {-0}
    93c0:	0000a003 	andeq	sl, r0, r3
    93c4:	53090200 	movwpl	r0, #37376	; 0x9200
    93c8:	03000008 	movweq	r0, #8
    93cc:	00a0033d 	adceq	r0, r0, sp, lsr r3
    93d0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    93d4:	0000058e 	andeq	r0, r0, lr, lsl #11
    93d8:	b1083f03 	tstlt	r8, r3, lsl #30
    93dc:	04000000 	streq	r0, [r0], #-0
    93e0:	02190300 	andseq	r0, r9, #0, 6
    93e4:	41030000 	mrsmi	r0, (UNDEF: 3)
    93e8:	0000ce03 	andeq	ip, r0, r3, lsl #28
    93ec:	015c0600 	cmpeq	ip, r0, lsl #12
    93f0:	540a0000 	strpl	r0, [sl], #-0
    93f4:	03000004 	movweq	r0, #4
    93f8:	01681a43 	cmneq	r8, r3, asr #20
    93fc:	01010000 	mrseq	r0, (UNDEF: 1)
    9400:	0001670a 	andeq	r6, r1, sl, lsl #14
    9404:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    9408:	00000189 	andeq	r0, r0, r9, lsl #3
    940c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    9410:	0000018f 	andeq	r0, r0, pc, lsl #3
    9414:	04080102 	streq	r0, [r8], #-258	; 0xfffffefe
    9418:	05000007 	streq	r0, [r0, #-7]
    941c:	0000018f 	andeq	r0, r0, pc, lsl #3
    9420:	0002220a 	andeq	r2, r2, sl, lsl #4
    9424:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    9428:	00000189 	andeq	r0, r0, r9, lsl #3
    942c:	08070101 	stmdaeq	r7, {r0, r8}
    9430:	da098f04 	ble	26d048 <__ccfg+0x24d0a0>
    9434:	09000001 	stmdbeq	r0, {r0}
    9438:	000004cf 	andeq	r0, r0, pc, asr #9
    943c:	670b9004 	strvs	r9, [fp, -r4]
    9440:	00000000 	andeq	r0, r0, r0
    9444:	00098509 	andeq	r8, r9, r9, lsl #10
    9448:	08910400 	ldmeq	r1, {sl}
    944c:	0000008f 	andeq	r0, r0, pc, lsl #1
    9450:	01a00904 	lsleq	r0, r4, #18
    9454:	92040000 	andls	r0, r4, #0
    9458:	0000ac10 	andeq	sl, r0, r0, lsl ip
    945c:	03000600 	movweq	r0, #1536	; 0x600
    9460:	00000751 	andeq	r0, r0, r1, asr r7
    9464:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    9468:	0c000001 	stceq	0, cr0, [r0], {1}
    946c:	000001da 	ldrdeq	r0, [r0], -sl
    9470:	000001f1 	strdeq	r0, [r0], -r1
    9474:	9a0a000d 	bls	2894b0 <__ccfg+0x269508>
    9478:	04000005 	streq	r0, [r0], #-5
    947c:	01e60f99 	strexheq	r0, r9, [r6]
    9480:	01010000 	mrseq	r0, (UNDEF: 1)
    9484:	91050107 	tstls	r5, r7, lsl #2
    9488:	00022909 	andeq	r2, r2, r9, lsl #18
    948c:	05950800 	ldreq	r0, [r5, #2048]	; 0x800
    9490:	93050000 	movwls	r0, #20480	; 0x5000
    9494:	0000a007 	andeq	sl, r0, r7
    9498:	01070100 	mrseq	r0, (UNDEF: 23)
    949c:	03b40800 			; <UNDEFINED> instruction: 0x03b40800
    94a0:	94050000 	strls	r0, [r5], #-0
    94a4:	0000a003 	andeq	sl, r0, r3
    94a8:	00010100 	andeq	r0, r1, r0, lsl #2
    94ac:	1a030000 	bne	c94b4 <__ccfg+0xa950c>
    94b0:	05000006 	streq	r0, [r0, #-6]
    94b4:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    94b8:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    94bc:	0c000002 	stceq	0, cr0, [r0], {2}
    94c0:	00000235 	andeq	r0, r0, r5, lsr r2
    94c4:	00000245 	andeq	r0, r0, r5, asr #4
    94c8:	3a05000d 	bcc	149504 <__ccfg+0x12955c>
    94cc:	0a000002 	beq	94dc <__exidx_end+0x68a4>
    94d0:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    94d4:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    94d8:	01000002 	tsteq	r0, r2
    94dc:	009b0c01 	addseq	r0, fp, r1, lsl #24
    94e0:	02630000 	rsbeq	r0, r3, #0
    94e4:	000d0000 	andeq	r0, sp, r0
    94e8:	00025805 	andeq	r5, r2, r5, lsl #16
    94ec:	03cd0a00 	biceq	r0, sp, #0, 20
    94f0:	06060000 	streq	r0, [r6], -r0
    94f4:	00026313 	andeq	r6, r2, r3, lsl r3
    94f8:	0a010100 	beq	49900 <__ccfg+0x29958>
    94fc:	00000558 	andeq	r0, r0, r8, asr r5
    9500:	b10ec304 	tstlt	lr, r4, lsl #6
    9504:	01000000 	mrseq	r0, (UNDEF: 0)
    9508:	071d0e01 	ldreq	r0, [sp, -r1, lsl #28]
    950c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    9510:	02911001 	addseq	r1, r1, #1
    9514:	040b0000 	streq	r0, [fp], #-0
    9518:	00000297 	muleq	r0, r7, r2
    951c:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    9520:	8f100000 	svchi	0x00100000
    9524:	00000000 	andeq	r0, r0, r0
    9528:	0001960c 	andeq	r9, r1, ip, lsl #12
    952c:	0002ae00 	andeq	sl, r2, r0, lsl #28
    9530:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    9534:	000002a3 	andeq	r0, r0, r3, lsr #5
    9538:	0005c211 	andeq	ip, r5, r1, lsl r2
    953c:	017f0700 	cmneq	pc, r0, lsl #14
    9540:	0002ae16 	andeq	sl, r2, r6, lsl lr
    9544:	11010100 	mrsne	r0, (UNDEF: 17)
    9548:	0000029d 	muleq	r0, sp, r2
    954c:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    9550:	000000bd 	strheq	r0, [r0], -sp
    9554:	7a110101 	bvc	449960 <__ccfg+0x4299b8>
    9558:	07000002 	streq	r0, [r0, -r2]
    955c:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    9560:	01000000 	mrseq	r0, (UNDEF: 0)
    9564:	07081201 	streq	r1, [r8, -r1, lsl #4]
    9568:	07090303 	streq	r0, [r9, -r3, lsl #6]
    956c:	13000003 	movwne	r0, #3
    9570:	00003200 	andeq	r3, r0, r0, lsl #4
    9574:	07030707 	streq	r0, [r3, -r7, lsl #14]
    9578:	0000008f 	andeq	r0, r0, pc, lsl #1
    957c:	08dd1300 	ldmeq	sp, {r8, r9, ip}^
    9580:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    9584:	00c20803 	sbceq	r0, r2, r3, lsl #16
    9588:	00040000 	andeq	r0, r4, r0
    958c:	0003260e 	andeq	r2, r3, lr, lsl #12
    9590:	03090700 	movweq	r0, #38656	; 0x9700
    9594:	0002e003 	andeq	lr, r2, r3
    9598:	00181400 	andseq	r1, r8, r0, lsl #8
    959c:	07300000 	ldreq	r0, [r0, -r0]!
    95a0:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    95a4:	13000003 	movwne	r0, #3
    95a8:	00001798 	muleq	r0, r8, r7
    95ac:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    95b0:	0000008f 	andeq	r0, r0, pc, lsl #1
    95b4:	06d91300 	ldrbeq	r1, [r9], r0, lsl #6
    95b8:	15070000 	strne	r0, [r7, #-0]
    95bc:	008f0803 	addeq	r0, pc, r3, lsl #16
    95c0:	13020000 	movwne	r0, #8192	; 0x2000
    95c4:	00000720 	andeq	r0, r0, r0, lsr #14
    95c8:	0b031607 	bleq	cedec <__ccfg+0xaee44>
    95cc:	00000284 	andeq	r0, r0, r4, lsl #5
    95d0:	06241304 	strteq	r1, [r4], -r4, lsl #6
    95d4:	17070000 	strne	r0, [r7, -r0]
    95d8:	00c20903 	sbceq	r0, r2, r3, lsl #18
    95dc:	13080000 	movwne	r0, #32768	; 0x8000
    95e0:	00000007 	andeq	r0, r0, r7
    95e4:	0f031807 	svceq	0x00031807
    95e8:	00000377 	andeq	r0, r0, r7, ror r3
    95ec:	05ad130c 	streq	r1, [sp, #780]!	; 0x30c
    95f0:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    95f4:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    95f8:	002c0000 	eoreq	r0, ip, r0
    95fc:	0003070c 	andeq	r0, r3, ip, lsl #14
    9600:	00038700 	andeq	r8, r3, r0, lsl #14
    9604:	00881500 	addeq	r1, r8, r0, lsl #10
    9608:	00030000 	andeq	r0, r3, r0
    960c:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    9610:	ce0e0000 	cdpgt	0, 0, cr0, cr14, cr0, {0}
    9614:	07000006 	streq	r0, [r0, -r6]
    9618:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    961c:	11000003 	tstne	r0, r3
    9620:	000006ae 	andeq	r0, r0, lr, lsr #13
    9624:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    9628:	000003a9 	andeq	r0, r0, r9, lsr #7
    962c:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    9630:	0000038d 	andeq	r0, r0, sp, lsl #7
    9634:	20370116 	eorscs	r0, r7, r6, lsl r1
    9638:	1d010000 	stcne	0, cr0, [r1, #-0]
    963c:	16180101 	ldrne	r0, [r8], -r1, lsl #2
    9640:	16880000 	strne	r0, [r8], r0
    9644:	9c010000 	stcls	0, cr0, [r1], {-0}
    9648:	0000042a 	andeq	r0, r0, sl, lsr #8
    964c:	0006eb17 	andeq	lr, r6, r7, lsl fp
    9650:	011d0100 	tsteq	sp, r0, lsl #2
    9654:	0000008f 	andeq	r0, r0, pc, lsl #1
    9658:	00002791 	muleq	r0, r1, r7
    965c:	00062418 	andeq	r2, r6, r8, lsl r4
    9660:	011d0100 	tsteq	sp, r0, lsl #2
    9664:	0000042a 	andeq	r0, r0, sl, lsr #8
    9668:	000027ba 			; <UNDEFINED> instruction: 0x000027ba
    966c:	00204319 	eoreq	r4, r0, r9, lsl r3
    9670:	01300100 	teqeq	r0, r0, lsl #2
    9674:	000d801a 	andeq	r8, sp, sl, lsl r0
    9678:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    967c:	22010072 	andcs	r0, r1, #114	; 0x72
    9680:	00042a15 	andeq	r2, r4, r5, lsl sl
    9684:	30030500 	andcc	r0, r3, r0, lsl #10
    9688:	1b200000 	blne	809690 <__ccfg+0x7e96e8>
    968c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    9690:	810d2301 	tsthi	sp, r1, lsl #6
    9694:	05000000 	streq	r0, [r0, #-0]
    9698:	00002c03 	andeq	r2, r0, r3, lsl #24
    969c:	20311820 	eorscs	r1, r1, r0, lsr #16
    96a0:	24010000 	strcs	r0, [r1], #-0
    96a4:	00008106 	andeq	r8, r0, r6, lsl #2
    96a8:	0027e400 	eoreq	lr, r7, r0, lsl #8
    96ac:	0b000000 	bleq	96b4 <__exidx_end+0x6a7c>
    96b0:	00019604 	andeq	r9, r1, r4, lsl #12
    96b4:	04400000 	strbeq	r0, [r0], #-0
    96b8:	00030000 	andeq	r0, r3, r0
    96bc:	000022c4 	andeq	r2, r0, r4, asr #5
    96c0:	00730104 	rsbseq	r0, r3, r4, lsl #2
    96c4:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
    96c8:	0c000020 	stceq	0, cr0, [r0], {32}
    96cc:	c8000005 	stmdagt	r0, {r0, r2}
    96d0:	0000000d 	andeq	r0, r0, sp
    96d4:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    96d8:	02000057 	andeq	r0, r0, #87	; 0x57
    96dc:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
    96e0:	02020000 	andeq	r0, r2, #0
    96e4:	0005fe05 	andeq	pc, r5, r5, lsl #28
    96e8:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    96ec:	000004c5 	andeq	r0, r0, r5, asr #9
    96f0:	c0050802 	andgt	r0, r5, r2, lsl #16
    96f4:	03000004 	movweq	r0, #4
    96f8:	00000666 	andeq	r0, r0, r6, ror #12
    96fc:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    9700:	02000000 	andeq	r0, r0, #0
    9704:	06fb0801 	ldrbteq	r0, [fp], r1, lsl #16
    9708:	35030000 	strcc	r0, [r3, #-0]
    970c:	02000003 	andeq	r0, r0, #3
    9710:	00601931 	rsbeq	r1, r0, r1, lsr r9
    9714:	02020000 	andeq	r0, r2, #0
    9718:	0007a707 	andeq	sl, r7, r7, lsl #14
    971c:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    9720:	34020000 	strcc	r0, [r2], #-0
    9724:	00007319 	andeq	r7, r0, r9, lsl r3
    9728:	07040200 	streq	r0, [r4, -r0, lsl #4]
    972c:	000002fa 	strdeq	r0, [r0], -sl
    9730:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    9734:	04000002 	streq	r0, [r0], #-2
    9738:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    973c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    9740:	0002ff07 	andeq	pc, r2, r7, lsl #30
    9744:	21000300 	mrscs	r0, LR_irq
    9748:	27030000 	strcs	r0, [r3, -r0]
    974c:	00005412 	andeq	r5, r0, r2, lsl r4
    9750:	008f0500 	addeq	r0, pc, r0, lsl #10
    9754:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    9758:	03000016 	movweq	r0, #22
    975c:	0041122b 	subeq	r1, r1, fp, lsr #4
    9760:	a0060000 	andge	r0, r6, r0
    9764:	03000000 	movweq	r0, #0
    9768:	00002151 	andeq	r2, r0, r1, asr r1
    976c:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    9770:	05000000 	streq	r0, [r0, #-0]
    9774:	000000b1 	strheq	r0, [r0], -r1
    9778:	00040d03 	andeq	r0, r4, r3, lsl #26
    977c:	122d0300 	eorne	r0, sp, #0, 6
    9780:	00000067 	andeq	r0, r0, r7, rrx
    9784:	0006a603 	andeq	sl, r6, r3, lsl #12
    9788:	102e0300 	eorne	r0, lr, r0, lsl #6
    978c:	000000da 	ldrdeq	r0, [r0], -sl
    9790:	008f0407 	addeq	r0, pc, r7, lsl #8
    9794:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    9798:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    979c:	09000001 	stmdbeq	r0, {r0}
    97a0:	00000023 	andeq	r0, r0, r3, lsr #32
    97a4:	a0073403 	andge	r3, r7, r3, lsl #8
    97a8:	01000000 	mrseq	r0, (UNDEF: 0)
    97ac:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    97b0:	00000413 	andeq	r0, r0, r3, lsl r4
    97b4:	a0033503 	andge	r3, r3, r3, lsl #10
    97b8:	01000000 	mrseq	r0, (UNDEF: 0)
    97bc:	09000601 	stmdbeq	r0, {r0, r9, sl}
    97c0:	000001cb 	andeq	r0, r0, fp, asr #3
    97c4:	a0033603 	andge	r3, r3, r3, lsl #12
    97c8:	01000000 	mrseq	r0, (UNDEF: 0)
    97cc:	09000501 	stmdbeq	r0, {r0, r8, sl}
    97d0:	0000044d 	andeq	r0, r0, sp, asr #8
    97d4:	a0033703 	andge	r3, r3, r3, lsl #14
    97d8:	01000000 	mrseq	r0, (UNDEF: 0)
    97dc:	09000401 	stmdbeq	r0, {r0, sl}
    97e0:	00000608 	andeq	r0, r0, r8, lsl #12
    97e4:	a0033803 	andge	r3, r3, r3, lsl #16
    97e8:	01000000 	mrseq	r0, (UNDEF: 0)
    97ec:	0a000004 	beq	9804 <__exidx_end+0x6bcc>
    97f0:	0000041a 	andeq	r0, r0, sl, lsl r4
    97f4:	a0073a03 	andge	r3, r7, r3, lsl #20
    97f8:	01000000 	mrseq	r0, (UNDEF: 0)
    97fc:	0005760a 	andeq	r7, r5, sl, lsl #12
    9800:	033c0300 	teqeq	ip, #0, 6
    9804:	000000a0 	andeq	r0, r0, r0, lsr #1
    9808:	08530a02 	ldmdaeq	r3, {r1, r9, fp}^
    980c:	3d030000 	stccc	0, cr0, [r3, #-0]
    9810:	0000a003 	andeq	sl, r0, r3
    9814:	8e0a0300 	cdphi	3, 0, cr0, cr10, cr0, {0}
    9818:	03000005 	movweq	r0, #5
    981c:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    9820:	00040000 	andeq	r0, r4, r0
    9824:	00021903 	andeq	r1, r2, r3, lsl #18
    9828:	03410300 	movteq	r0, #4864	; 0x1300
    982c:	000000e0 	andeq	r0, r0, r0, ror #1
    9830:	00016e06 	andeq	r6, r1, r6, lsl #28
    9834:	04540b00 	ldrbeq	r0, [r4], #-2816	; 0xfffff500
    9838:	43030000 	movwmi	r0, #12288	; 0x3000
    983c:	00017a1a 	andeq	r7, r1, sl, lsl sl
    9840:	0b010100 	bleq	49c48 <__ccfg+0x29ca0>
    9844:	00000167 	andeq	r0, r0, r7, ror #2
    9848:	9b0e4503 	blls	39ac5c <__ccfg+0x37acb4>
    984c:	01000001 	tsteq	r0, r1
    9850:	a1040701 	tstge	r4, r1, lsl #14
    9854:	02000001 	andeq	r0, r0, #1
    9858:	07040801 	streq	r0, [r4, -r1, lsl #16]
    985c:	a1050000 	mrsge	r0, (UNDEF: 5)
    9860:	0b000001 	bleq	986c <__exidx_end+0x6c34>
    9864:	00000222 	andeq	r0, r0, r2, lsr #4
    9868:	9b1e4503 	blls	79ac7c <__ccfg+0x77acd4>
    986c:	01000001 	tsteq	r0, r1
    9870:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    9874:	01ec098f 	mvneq	r0, pc, lsl #19
    9878:	cf0a0000 	svcgt	0x000a0000
    987c:	04000004 	streq	r0, [r0], #-4
    9880:	00670b90 	mlseq	r7, r0, fp, r0
    9884:	0a000000 	beq	988c <__exidx_end+0x6c54>
    9888:	00000985 	andeq	r0, r0, r5, lsl #19
    988c:	8f089104 	svchi	0x00089104
    9890:	04000000 	streq	r0, [r0], #-0
    9894:	0001a00a 	andeq	sl, r1, sl
    9898:	10920400 	addsne	r0, r2, r0, lsl #8
    989c:	000000ac 	andeq	r0, r0, ip, lsr #1
    98a0:	51030006 	tstpl	r3, r6
    98a4:	04000007 	streq	r0, [r0], #-7
    98a8:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    98ac:	ec0c0000 	stc	0, cr0, [ip], {-0}
    98b0:	03000001 	movweq	r0, #1
    98b4:	0d000002 	stceq	0, cr0, [r0, #-8]
    98b8:	059a0b00 	ldreq	r0, [sl, #2816]	; 0xb00
    98bc:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    98c0:	0001f80f 	andeq	pc, r1, pc, lsl #16
    98c4:	08010100 	stmdaeq	r1, {r8}
    98c8:	09910501 	ldmibeq	r1, {r0, r8, sl}
    98cc:	0000023b 	andeq	r0, r0, fp, lsr r2
    98d0:	00059509 	andeq	r9, r5, r9, lsl #10
    98d4:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    98d8:	000000a0 	andeq	r0, r0, r0, lsr #1
    98dc:	00010701 	andeq	r0, r1, r1, lsl #14
    98e0:	0003b409 	andeq	fp, r3, r9, lsl #8
    98e4:	03940500 	orrseq	r0, r4, #0, 10
    98e8:	000000a0 	andeq	r0, r0, r0, lsr #1
    98ec:	00000101 	andeq	r0, r0, r1, lsl #2
    98f0:	061a0300 	ldreq	r0, [sl], -r0, lsl #6
    98f4:	96050000 	strls	r0, [r5], -r0
    98f8:	00021103 	andeq	r1, r2, r3, lsl #2
    98fc:	023b0500 	eorseq	r0, fp, #0, 10
    9900:	470c0000 	strmi	r0, [ip, -r0]
    9904:	57000002 	strpl	r0, [r0, -r2]
    9908:	0d000002 	stceq	0, cr0, [r0, #-8]
    990c:	024c0500 	subeq	r0, ip, #0, 10
    9910:	ba0b0000 	blt	2c9918 <__ccfg+0x2a9970>
    9914:	05000002 	streq	r0, [r0, #-2]
    9918:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    991c:	01010000 	mrseq	r0, (UNDEF: 1)
    9920:	00009b0c 	andeq	r9, r0, ip, lsl #22
    9924:	00027500 	andeq	r7, r2, r0, lsl #10
    9928:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    992c:	0000026a 	andeq	r0, r0, sl, ror #4
    9930:	0003cd0b 	andeq	ip, r3, fp, lsl #26
    9934:	13060600 	movwne	r0, #26112	; 0x6600
    9938:	00000275 	andeq	r0, r0, r5, ror r2
    993c:	580b0101 	stmdapl	fp, {r0, r8}
    9940:	04000005 	streq	r0, [r0], #-5
    9944:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    9948:	01010000 	mrseq	r0, (UNDEF: 1)
    994c:	00071d0e 	andeq	r1, r7, lr, lsl #26
    9950:	016e0700 	cmneq	lr, r0, lsl #14
    9954:	0002a310 	andeq	sl, r2, r0, lsl r3
    9958:	a9040700 	stmdbge	r4, {r8, r9, sl}
    995c:	0f000002 	svceq	0x00000002
    9960:	0002b501 	andeq	fp, r2, r1, lsl #10
    9964:	008f1000 	addeq	r1, pc, r0
    9968:	0c000000 	stceq	0, cr0, [r0], {-0}
    996c:	000001a8 	andeq	r0, r0, r8, lsr #3
    9970:	000002c0 	andeq	r0, r0, r0, asr #5
    9974:	b505000d 	strlt	r0, [r5, #-13]
    9978:	11000002 	tstne	r0, r2
    997c:	000005c2 	andeq	r0, r0, r2, asr #11
    9980:	16017f07 	strne	r7, [r1], -r7, lsl #30
    9984:	000002c0 	andeq	r0, r0, r0, asr #5
    9988:	9d110101 	ldflss	f0, [r1, #-4]
    998c:	07000002 	streq	r0, [r0, -r2]
    9990:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    9994:	01000000 	mrseq	r0, (UNDEF: 0)
    9998:	027a1101 	rsbseq	r1, sl, #1073741824	; 0x40000000
    999c:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    99a0:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    99a4:	01010000 	mrseq	r0, (UNDEF: 1)
    99a8:	03070812 	movweq	r0, #30738	; 0x7812
    99ac:	03190903 	tsteq	r9, #49152	; 0xc000
    99b0:	00130000 	andseq	r0, r3, r0
    99b4:	07000032 	smladxeq	r0, r2, r0, r0
    99b8:	8f070307 	svchi	0x00070307
    99bc:	00000000 	andeq	r0, r0, r0
    99c0:	0008dd13 	andeq	sp, r8, r3, lsl sp
    99c4:	03080700 	movweq	r0, #34560	; 0x8700
    99c8:	0000c208 	andeq	ip, r0, r8, lsl #4
    99cc:	0e000400 	cfcpyseq	mvf0, mvf0
    99d0:	00000326 	andeq	r0, r0, r6, lsr #6
    99d4:	03030907 	movweq	r0, #14599	; 0x3907
    99d8:	000002f2 	strdeq	r0, [r0], -r2
    99dc:	00001814 	andeq	r1, r0, r4, lsl r8
    99e0:	0b073000 	bleq	1d59e8 <__ccfg+0x1b5a40>
    99e4:	03890803 	orreq	r0, r9, #196608	; 0x30000
    99e8:	98130000 	ldmdals	r3, {}	; <UNPREDICTABLE>
    99ec:	07000017 	smladeq	r0, r7, r0, r0
    99f0:	8f080314 	svchi	0x00080314
    99f4:	00000000 	andeq	r0, r0, r0
    99f8:	0006d913 	andeq	sp, r6, r3, lsl r9
    99fc:	03150700 	tsteq	r5, #0, 14
    9a00:	00008f08 	andeq	r8, r0, r8, lsl #30
    9a04:	20130200 	andscs	r0, r3, r0, lsl #4
    9a08:	07000007 	streq	r0, [r0, -r7]
    9a0c:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    9a10:	04000002 	streq	r0, [r0], #-2
    9a14:	00062413 	andeq	r2, r6, r3, lsl r4
    9a18:	03170700 	tsteq	r7, #0, 14
    9a1c:	0000c209 	andeq	ip, r0, r9, lsl #4
    9a20:	07130800 	ldreq	r0, [r3, -r0, lsl #16]
    9a24:	07000000 	streq	r0, [r0, -r0]
    9a28:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    9a2c:	0c000003 	stceq	0, cr0, [r0], {3}
    9a30:	0005ad13 	andeq	sl, r5, r3, lsl sp
    9a34:	03190700 	tsteq	r9, #0, 14
    9a38:	00039915 	andeq	r9, r3, r5, lsl r9
    9a3c:	0c002c00 	stceq	12, cr2, [r0], {-0}
    9a40:	00000319 	andeq	r0, r0, r9, lsl r3
    9a44:	00000399 	muleq	r0, r9, r3
    9a48:	00008815 	andeq	r8, r0, r5, lsl r8
    9a4c:	07000300 	streq	r0, [r0, -r0, lsl #6]
    9a50:	00032604 	andeq	r2, r3, r4, lsl #12
    9a54:	06ce0e00 	strbeq	r0, [lr], r0, lsl #28
    9a58:	1c070000 	stcne	0, cr0, [r7], {-0}
    9a5c:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    9a60:	ae110000 	cdpge	0, 1, cr0, cr1, cr0, {0}
    9a64:	07000006 	streq	r0, [r0, -r6]
    9a68:	bb14031e 	bllt	50a6e8 <__ccfg+0x4ea740>
    9a6c:	01000003 	tsteq	r0, r3
    9a70:	9f040701 	svcls	0x00040701
    9a74:	16000003 	strne	r0, [r0], -r3
    9a78:	00001720 	andeq	r1, r0, r0, lsr #14
    9a7c:	9b070d01 	blls	1cce88 <__ccfg+0x1acee0>
    9a80:	01000001 	tsteq	r0, r1
    9a84:	00340305 	eorseq	r0, r4, r5, lsl #6
    9a88:	01172000 	tsteq	r7, r0
    9a8c:	0000204e 	andeq	r2, r0, lr, asr #32
    9a90:	01012301 	tsteq	r1, r1, lsl #6
    9a94:	00001688 	andeq	r1, r0, r8, lsl #13
    9a98:	000017a4 	andeq	r1, r0, r4, lsr #15
    9a9c:	eb189c01 	bl	630aa8 <__ccfg+0x610b00>
    9aa0:	01000006 	tsteq	r0, r6
    9aa4:	008f0123 	addeq	r0, pc, r3, lsr #2
    9aa8:	27f70000 	ldrbcs	r0, [r7, r0]!
    9aac:	24190000 	ldrcs	r0, [r9], #-0
    9ab0:	01000006 	tsteq	r0, r6
    9ab4:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    9ab8:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
    9abc:	a81a0000 	ldmdage	sl, {}	; <UNPREDICTABLE>
    9ac0:	1b00000d 	blne	9afc <__exidx_end+0x6ec4>
    9ac4:	00727470 	rsbseq	r7, r2, r0, ror r4
    9ac8:	9b0f2801 	blls	3d3ad4 <__ccfg+0x3b3b2c>
    9acc:	05000001 	streq	r0, [r0, #-1]
    9ad0:	00003c03 	andeq	r3, r0, r3, lsl #24
    9ad4:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    9ad8:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    9adc:	0000810d 	andeq	r8, r0, sp, lsl #2
    9ae0:	38030500 	stmdacc	r3, {r8, sl}
    9ae4:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    9ae8:	00002031 	andeq	r2, r0, r1, lsr r0
    9aec:	81062a01 	tsthi	r6, r1, lsl #20
    9af0:	6b000000 	blvs	9af8 <__exidx_end+0x6ec0>
    9af4:	00000028 	andeq	r0, r0, r8, lsr #32
    9af8:	05f00000 	ldrbeq	r0, [r0, #0]!
    9afc:	00030000 	andeq	r0, r3, r0
    9b00:	0000243c 	andeq	r2, r0, ip, lsr r4
    9b04:	00730104 	rsbseq	r0, r3, r4, lsl #2
    9b08:	9c0c0000 	stcls	0, cr0, [ip], {-0}
    9b0c:	0c000020 	stceq	0, cr0, [r0], {32}
    9b10:	50000005 	andpl	r0, r0, r5
    9b14:	0000000e 	andeq	r0, r0, lr
    9b18:	ad000000 	stcge	0, cr0, [r0, #-0]
    9b1c:	02000059 	andeq	r0, r0, #89	; 0x59
    9b20:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
    9b24:	02020000 	andeq	r0, r2, #0
    9b28:	0005fe05 	andeq	pc, r5, r5, lsl #28
    9b2c:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9b30:	000004c5 	andeq	r0, r0, r5, asr #9
    9b34:	c0050802 	andgt	r0, r5, r2, lsl #16
    9b38:	03000004 	movweq	r0, #4
    9b3c:	00000666 	andeq	r0, r0, r6, ror #12
    9b40:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    9b44:	02000000 	andeq	r0, r0, #0
    9b48:	06fb0801 	ldrbteq	r0, [fp], r1, lsl #16
    9b4c:	35030000 	strcc	r0, [r3, #-0]
    9b50:	02000003 	andeq	r0, r0, #3
    9b54:	00601931 	rsbeq	r1, r0, r1, lsr r9
    9b58:	02020000 	andeq	r0, r2, #0
    9b5c:	0007a707 	andeq	sl, r7, r7, lsl #14
    9b60:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    9b64:	34020000 	strcc	r0, [r2], #-0
    9b68:	00007319 	andeq	r7, r0, r9, lsl r3
    9b6c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b70:	000002fa 	strdeq	r0, [r0], -sl
    9b74:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    9b78:	04000002 	streq	r0, [r0], #-2
    9b7c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    9b80:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    9b84:	0002ff07 	andeq	pc, r2, r7, lsl #30
    9b88:	036b0300 	cmneq	fp, #0, 6
    9b8c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    9b90:	00009b1b 	andeq	r9, r0, fp, lsl fp
    9b94:	06960500 	ldreq	r0, [r6], r0, lsl #10
    9b98:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    9b9c:	0000b300 	andeq	fp, r0, r0, lsl #6
    9ba0:	075e0600 	ldrbeq	r0, [lr, -r0, lsl #12]
    9ba4:	00b30000 	adcseq	r0, r3, r0
    9ba8:	01000000 	mrseq	r0, (UNDEF: 0)
    9bac:	03040700 	movweq	r0, #18176	; 0x4700
    9bb0:	00000698 	muleq	r0, r8, r6
    9bb4:	8f186303 	svchi	0x00186303
    9bb8:	03000000 	movweq	r0, #0
    9bbc:	00002100 	andeq	r2, r0, r0, lsl #2
    9bc0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    9bc4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9bc8:	000000c1 	andeq	r0, r0, r1, asr #1
    9bcc:	0016c803 	andseq	ip, r6, r3, lsl #16
    9bd0:	122b0400 	eorne	r0, fp, #0, 8
    9bd4:	00000041 	andeq	r0, r0, r1, asr #32
    9bd8:	0000d209 	andeq	sp, r0, r9, lsl #4
    9bdc:	21510300 	cmpcs	r1, r0, lsl #6
    9be0:	2c040000 	stccs	0, cr0, [r4], {-0}
    9be4:	00006712 	andeq	r6, r0, r2, lsl r7
    9be8:	00e30800 	rsceq	r0, r3, r0, lsl #16
    9bec:	0d030000 	stceq	0, cr0, [r3, #-0]
    9bf0:	04000004 	streq	r0, [r0], #-4
    9bf4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    9bf8:	a6030000 	strge	r0, [r3], -r0
    9bfc:	04000006 	streq	r0, [r0], #-6
    9c00:	010c102e 	tsteq	ip, lr, lsr #32
    9c04:	040a0000 	streq	r0, [sl], #-0
    9c08:	000000c1 	andeq	r0, r0, r1, asr #1
    9c0c:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    9c10:	0001a009 	andeq	sl, r1, r9
    9c14:	00230c00 	eoreq	r0, r3, r0, lsl #24
    9c18:	34040000 	strcc	r0, [r4], #-0
    9c1c:	0000d207 	andeq	sp, r0, r7, lsl #4
    9c20:	07010100 	streq	r0, [r1, -r0, lsl #2]
    9c24:	04130c00 	ldreq	r0, [r3], #-3072	; 0xfffff400
    9c28:	35040000 	strcc	r0, [r4, #-0]
    9c2c:	0000d203 	andeq	sp, r0, r3, lsl #4
    9c30:	06010100 	streq	r0, [r1], -r0, lsl #2
    9c34:	01cb0c00 	biceq	r0, fp, r0, lsl #24
    9c38:	36040000 	strcc	r0, [r4], -r0
    9c3c:	0000d203 	andeq	sp, r0, r3, lsl #4
    9c40:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    9c44:	044d0c00 	strbeq	r0, [sp], #-3072	; 0xfffff400
    9c48:	37040000 	strcc	r0, [r4, -r0]
    9c4c:	0000d203 	andeq	sp, r0, r3, lsl #4
    9c50:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    9c54:	06080c00 	streq	r0, [r8], -r0, lsl #24
    9c58:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    9c5c:	0000d203 	andeq	sp, r0, r3, lsl #4
    9c60:	00040100 	andeq	r0, r4, r0, lsl #2
    9c64:	041a0d00 	ldreq	r0, [sl], #-3328	; 0xfffff300
    9c68:	3a040000 	bcc	109c70 <__ccfg+0xe9cc8>
    9c6c:	0000d207 	andeq	sp, r0, r7, lsl #4
    9c70:	760d0100 	strvc	r0, [sp], -r0, lsl #2
    9c74:	04000005 	streq	r0, [r0], #-5
    9c78:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    9c7c:	0d020000 	stceq	0, cr0, [r2, #-0]
    9c80:	00000853 	andeq	r0, r0, r3, asr r8
    9c84:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    9c88:	03000000 	movweq	r0, #0
    9c8c:	00058e0d 	andeq	r8, r5, sp, lsl #28
    9c90:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    9c94:	000000e3 	andeq	r0, r0, r3, ror #1
    9c98:	19030004 	stmdbne	r3, {r2}
    9c9c:	04000002 	streq	r0, [r0], #-2
    9ca0:	01120341 	tsteq	r2, r1, asr #6
    9ca4:	a0090000 	andge	r0, r9, r0
    9ca8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    9cac:	00000454 	andeq	r0, r0, r4, asr r4
    9cb0:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    9cb4:	01000001 	tsteq	r0, r1
    9cb8:	01670e01 	cmneq	r7, r1, lsl #28
    9cbc:	45040000 	strmi	r0, [r4, #-0]
    9cc0:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    9cc4:	0a010100 	beq	4a0cc <__ccfg+0x2a124>
    9cc8:	0001d304 	andeq	sp, r1, r4, lsl #6
    9ccc:	08010200 	stmdaeq	r1, {r9}
    9cd0:	00000704 	andeq	r0, r0, r4, lsl #14
    9cd4:	0001d308 	andeq	sp, r1, r8, lsl #6
    9cd8:	02220e00 	eoreq	r0, r2, #0, 28
    9cdc:	45040000 	strmi	r0, [r4, #-0]
    9ce0:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    9ce4:	0b010100 	bleq	4a0ec <__ccfg+0x2a144>
    9ce8:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    9cec:	0000021e 	andeq	r0, r0, lr, lsl r2
    9cf0:	0004cf0d 	andeq	ip, r4, sp, lsl #30
    9cf4:	0b900500 	bleq	fe40b0fc <_estack+0xde4060fc>
    9cf8:	00000067 	andeq	r0, r0, r7, rrx
    9cfc:	09850d00 	stmibeq	r5, {r8, sl, fp}
    9d00:	91050000 	mrsls	r0, (UNDEF: 5)
    9d04:	0000c108 	andeq	ip, r0, r8, lsl #2
    9d08:	a00d0400 	andge	r0, sp, r0, lsl #8
    9d0c:	05000001 	streq	r0, [r0, #-1]
    9d10:	00de1092 	smullseq	r1, lr, r2, r0
    9d14:	00060000 	andeq	r0, r6, r0
    9d18:	00075103 	andeq	r5, r7, r3, lsl #2
    9d1c:	03930500 	orrseq	r0, r3, #0, 10
    9d20:	000001ed 	andeq	r0, r0, sp, ror #3
    9d24:	00021e0f 	andeq	r1, r2, pc, lsl #28
    9d28:	00023500 	andeq	r3, r2, r0, lsl #10
    9d2c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    9d30:	0000059a 	muleq	r0, sl, r5
    9d34:	2a0f9905 	bcs	3f0150 <__ccfg+0x3d01a8>
    9d38:	01000002 	tsteq	r0, r2
    9d3c:	06010b01 	streq	r0, [r1], -r1, lsl #22
    9d40:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    9d44:	950c0000 	strls	r0, [ip, #-0]
    9d48:	06000005 	streq	r0, [r0], -r5
    9d4c:	00d20793 	smullseq	r0, r2, r3, r7
    9d50:	07010000 	streq	r0, [r1, -r0]
    9d54:	b40c0001 	strlt	r0, [ip], #-1
    9d58:	06000003 	streq	r0, [r0], -r3
    9d5c:	00d20394 	smullseq	r0, r2, r4, r3
    9d60:	01010000 	mrseq	r0, (UNDEF: 1)
    9d64:	03000000 	movweq	r0, #0
    9d68:	0000061a 	andeq	r0, r0, sl, lsl r6
    9d6c:	43039606 	movwmi	r9, #13830	; 0x3606
    9d70:	08000002 	stmdaeq	r0, {r1}
    9d74:	0000026d 	andeq	r0, r0, sp, ror #4
    9d78:	0002790f 	andeq	r7, r2, pc, lsl #18
    9d7c:	00028900 	andeq	r8, r2, r0, lsl #18
    9d80:	08001000 	stmdaeq	r0, {ip}
    9d84:	0000027e 	andeq	r0, r0, lr, ror r2
    9d88:	0002ba0e 	andeq	fp, r2, lr, lsl #20
    9d8c:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    9d90:	00000289 	andeq	r0, r0, r9, lsl #5
    9d94:	cd0f0101 	stfgts	f0, [pc, #-4]	; 9d98 <__exidx_end+0x7160>
    9d98:	a7000000 	strge	r0, [r0, -r0]
    9d9c:	10000002 	andne	r0, r0, r2
    9da0:	029c0800 	addseq	r0, ip, #0, 16
    9da4:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
    9da8:	07000003 	streq	r0, [r0, -r3]
    9dac:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    9db0:	01010000 	mrseq	r0, (UNDEF: 1)
    9db4:	0005580e 	andeq	r5, r5, lr, lsl #16
    9db8:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    9dbc:	000000e3 	andeq	r0, r0, r3, ror #1
    9dc0:	1d110101 	ldfnes	f0, [r1, #-4]
    9dc4:	08000007 	stmdaeq	r0, {r0, r1, r2}
    9dc8:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    9dcc:	0a000002 	beq	9ddc <__exidx_end+0x71a4>
    9dd0:	0002db04 	andeq	sp, r2, r4, lsl #22
    9dd4:	e7011200 	str	r1, [r1, -r0, lsl #4]
    9dd8:	13000002 	movwne	r0, #2
    9ddc:	000000c1 	andeq	r0, r0, r1, asr #1
    9de0:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    9de4:	02f20000 	rscseq	r0, r2, #0
    9de8:	00100000 	andseq	r0, r0, r0
    9dec:	0002e708 	andeq	lr, r2, r8, lsl #14
    9df0:	05c21400 	strbeq	r1, [r2, #1024]	; 0x400
    9df4:	7f080000 	svcvc	0x00080000
    9df8:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    9dfc:	01010000 	mrseq	r0, (UNDEF: 1)
    9e00:	00029d14 	andeq	r9, r2, r4, lsl sp
    9e04:	01820800 	orreq	r0, r2, r0, lsl #16
    9e08:	0000ef14 	andeq	lr, r0, r4, lsl pc
    9e0c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    9e10:	0000027a 	andeq	r0, r0, sl, ror r2
    9e14:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    9e18:	000000e3 	andeq	r0, r0, r3, ror #1
    9e1c:	08150101 	ldmdaeq	r5, {r0, r8}
    9e20:	09030308 	stmdbeq	r3, {r3, r8, r9}
    9e24:	0000034b 	andeq	r0, r0, fp, asr #6
    9e28:	00320016 	eorseq	r0, r2, r6, lsl r0
    9e2c:	03070800 	movweq	r0, #30720	; 0x7800
    9e30:	0000c107 	andeq	ip, r0, r7, lsl #2
    9e34:	dd160000 	ldcle	0, cr0, [r6, #-0]
    9e38:	08000008 	stmdaeq	r0, {r3}
    9e3c:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    9e40:	04000000 	streq	r0, [r0], #-0
    9e44:	03261100 			; <UNDEFINED> instruction: 0x03261100
    9e48:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    9e4c:	03240303 			; <UNDEFINED> instruction: 0x03240303
    9e50:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
    9e54:	30000000 	andcc	r0, r0, r0
    9e58:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    9e5c:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    9e60:	00179816 	andseq	r9, r7, r6, lsl r8
    9e64:	03140800 	tsteq	r4, #0, 16
    9e68:	0000c108 	andeq	ip, r0, r8, lsl #2
    9e6c:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    9e70:	08000006 	stmdaeq	r0, {r1, r2}
    9e74:	c1080315 	tstgt	r8, r5, lsl r3
    9e78:	02000000 	andeq	r0, r0, #0
    9e7c:	00072016 	andeq	r2, r7, r6, lsl r0
    9e80:	03160800 	tsteq	r6, #0, 16
    9e84:	0002c80b 	andeq	ip, r2, fp, lsl #16
    9e88:	24160400 	ldrcs	r0, [r6], #-1024	; 0xfffffc00
    9e8c:	08000006 	stmdaeq	r0, {r1, r2}
    9e90:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    9e94:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9e98:	00000716 	andeq	r0, r0, r6, lsl r7
    9e9c:	03180800 	tsteq	r8, #0, 16
    9ea0:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    9ea4:	ad160c00 	ldcge	12, cr0, [r6, #-0]
    9ea8:	08000005 	stmdaeq	r0, {r0, r2}
    9eac:	cb150319 	blgt	54ab18 <__ccfg+0x52ab70>
    9eb0:	2c000003 	stccs	0, cr0, [r0], {3}
    9eb4:	034b0f00 	movteq	r0, #48896	; 0xbf00
    9eb8:	03cb0000 	biceq	r0, fp, #0
    9ebc:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    9ec0:	03000000 	movweq	r0, #0
    9ec4:	58040a00 	stmdapl	r4, {r9, fp}
    9ec8:	11000003 	tstne	r0, r3
    9ecc:	000006ce 	andeq	r0, r0, lr, asr #13
    9ed0:	1b031c08 	blne	d0ef8 <__ccfg+0xb0f50>
    9ed4:	00000358 	andeq	r0, r0, r8, asr r3
    9ed8:	0006ae14 	andeq	sl, r6, r4, lsl lr
    9edc:	031e0800 	tsteq	lr, #0, 16
    9ee0:	0003ed14 	andeq	lr, r3, r4, lsl sp
    9ee4:	0a010100 	beq	4a2ec <__ccfg+0x2a344>
    9ee8:	0003d104 	andeq	sp, r3, r4, lsl #2
    9eec:	f2011900 	vmla.i8	d1, d1, d0
    9ef0:	01000020 	tsteq	r0, r0, lsr #32
    9ef4:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    9ef8:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    9efc:	44000019 	strmi	r0, [r0], #-25	; 0xffffffe7
    9f00:	0100001a 	tsteq	r0, sl, lsl r0
    9f04:	0004689c 	muleq	r4, ip, r8
    9f08:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    9f0c:	91010073 	tstls	r1, r3, ror r0
    9f10:	0001cd14 	andeq	ip, r1, r4, lsl sp
    9f14:	00288900 	eoreq	r8, r8, r0, lsl #18
    9f18:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    9f1c:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    9f20:	00000468 	andeq	r0, r0, r8, ror #8
    9f24:	000028d3 	ldrdeq	r2, [r0], -r3
    9f28:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    9f2c:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    9f30:	12000000 	andne	r0, r0, #0
    9f34:	1b000029 	blne	9fe0 <__exidx_end+0x73a8>
    9f38:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    9f3c:	c1079301 	tstgt	r7, r1, lsl #6
    9f40:	46000000 	strmi	r0, [r0], -r0
    9f44:	1b000029 	blne	9ff0 <__exidx_end+0x73b8>
    9f48:	93010064 	movwls	r0, #4196	; 0x1064
    9f4c:	0000c10c 	andeq	ip, r0, ip, lsl #2
    9f50:	00296400 	eoreq	r6, r9, r0, lsl #8
    9f54:	20da1c00 	sbcscs	r1, sl, r0, lsl #24
    9f58:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    9f5c:	001a1e01 	andseq	r1, sl, r1, lsl #28
    9f60:	040a0000 	streq	r0, [sl], #-0
    9f64:	000001da 	ldrdeq	r0, [r0], -sl
    9f68:	20e5011d 	rsccs	r0, r5, sp, lsl r1
    9f6c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    9f70:	00c10106 	sbceq	r0, r1, r6, lsl #2
    9f74:	17c40000 	strbne	r0, [r4, r0]
    9f78:	19f40000 	ldmibne	r4!, {}^	; <UNPREDICTABLE>
    9f7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f80:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    9f84:	1a080100 	bne	20a38c <__ccfg+0x1ea3e4>
    9f88:	000001cd 	andeq	r0, r0, sp, asr #3
    9f8c:	00002977 	andeq	r2, r0, r7, ror r9
    9f90:	01006e1a 	tsteq	r0, sl, lsl lr
    9f94:	00c12408 	sbceq	r2, r1, r8, lsl #8
    9f98:	298a0000 	stmibcs	sl, {}	; <UNPREDICTABLE>
    9f9c:	661a0000 	ldrvs	r0, [sl], -r0
    9fa0:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    9fa4:	00046833 	andeq	r6, r4, r3, lsr r8
    9fa8:	00299d00 	eoreq	r9, r9, r0, lsl #26
    9fac:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    9fb0:	3f080100 	svccc	0x00080100
    9fb4:	000000b5 	strheq	r0, [r0], -r5
    9fb8:	000029c6 	andeq	r2, r0, r6, asr #19
    9fbc:	0100631b 	tsteq	r0, fp, lsl r3
    9fc0:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    9fc4:	2a680000 	bcs	1a09fcc <__ccfg+0x19ea024>
    9fc8:	641e0000 	ldrvs	r0, [lr], #-0
    9fcc:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    9fd0:	000000c1 	andeq	r0, r0, r1, asr #1
    9fd4:	23549104 	cmpcs	r4, #4, 2
    9fd8:	20e01f06 	rsccs	r1, r0, r6, lsl #30
    9fdc:	0d010000 	stceq	0, cr0, [r1, #-0]
    9fe0:	17a40107 	strne	r0, [r4, r7, lsl #2]!
    9fe4:	17c40000 	strbne	r0, [r4, r0]
    9fe8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fec:	23007c05 	movwcs	r7, #3077	; 0xc05
    9ff0:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    9ff4:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    9ff8:	120d0100 	andne	r0, sp, #0, 2
    9ffc:	000000c1 	andeq	r0, r0, r1, asr #1
    a000:	21005001 	tstcs	r0, r1
    a004:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    a008:	fe018801 	vcmla.f16	d8, d1, d1[0], #0
    a00c:	21000017 	tstcs	r0, r7, lsl r0
    a010:	00746552 	rsbseq	r6, r4, r2, asr r5
    a014:	60018b01 	andvs	r8, r1, r1, lsl #22
    a018:	22000018 	andcs	r0, r0, #24
    a01c:	00000e00 	andeq	r0, r0, r0, lsl #28
    a020:	00000545 	andeq	r0, r0, r5, asr #10
    a024:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    a028:	0a3a0100 	beq	e8a430 <__ccfg+0xe6a488>
    a02c:	000000c1 	andeq	r0, r0, r1, asr #1
    a030:	0100691b 	tsteq	r0, fp, lsl r9
    a034:	0081133a 	addeq	r1, r1, sl, lsr r3
    a038:	2b4e0000 	blcs	138a040 <__ccfg+0x136a098>
    a03c:	22000000 	andcs	r0, r0, #0
    a040:	00000dd8 	ldrdeq	r0, [r0], -r8
    a044:	0000056d 	andeq	r0, r0, sp, ror #10
    a048:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    a04c:	0a460100 	beq	118a454 <__ccfg+0x116a4ac>
    a050:	000000c1 	andeq	r0, r0, r1, asr #1
    a054:	00002b61 	andeq	r2, r0, r1, ror #22
    a058:	0100691b 	tsteq	r0, fp, lsl r9
    a05c:	00c10f46 	sbceq	r0, r1, r6, asr #30
    a060:	2b8a0000 	blcs	fe28a068 <_estack+0xde285068>
    a064:	22000000 	andcs	r0, r0, #0
    a068:	00000e38 	andeq	r0, r0, r8, lsr lr
    a06c:	00000595 	muleq	r0, r5, r5
    a070:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    a074:	0c550100 	ldfeqe	f0, [r5], {-0}
    a078:	000000e3 	andeq	r0, r0, r3, ror #1
    a07c:	00002bb3 			; <UNDEFINED> instruction: 0x00002bb3
    a080:	0100691b 	tsteq	r0, fp, lsl r9
    a084:	00e31155 	rsceq	r1, r3, r5, asr r1
    a088:	2bc60000 	blcs	ff18a090 <_estack+0xdf185090>
    a08c:	24000000 	strcs	r0, [r0], #-0
    a090:	00001982 	andeq	r1, r0, r2, lsl #19
    a094:	000019ac 	andeq	r1, r0, ip, lsr #19
    a098:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    a09c:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    a0a0:	0c600100 	stfeqe	f0, [r0], #-0
    a0a4:	000000e3 	andeq	r0, r0, r3, ror #1
    a0a8:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    a0ac:	0a610100 	beq	184a4b4 <__ccfg+0x182a50c>
    a0b0:	00000081 	andeq	r0, r0, r1, lsl #1
    a0b4:	00002bef 	andeq	r2, r0, pc, ror #23
    a0b8:	0e202200 	cdpeq	2, 2, cr2, cr0, cr0, {0}
    a0bc:	05d90000 	ldrbeq	r0, [r9]
    a0c0:	761b0000 	ldrvc	r0, [fp], -r0
    a0c4:	01006c61 	tsteq	r0, r1, ror #24
    a0c8:	00c10a71 	sbceq	r0, r1, r1, ror sl
    a0cc:	2c020000 	stccs	0, cr0, [r2], {-0}
    a0d0:	25000000 	strcs	r0, [r0, #-0]
    a0d4:	000019ca 	andeq	r1, r0, sl, asr #19
    a0d8:	000019e6 	andeq	r1, r0, r6, ror #19
    a0dc:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    a0e0:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    a0e4:	22000001 	andcs	r0, r0, #1
    a0e8:	0000002c 	andeq	r0, r0, ip, lsr #32
    a0ec:	058f0000 	streq	r0, [pc]	; a0f4 <__exidx_end+0x74bc>
    a0f0:	00030000 	andeq	r0, r3, r0
    a0f4:	0000264e 	andeq	r2, r0, lr, asr #12
    a0f8:	00730104 	rsbseq	r0, r3, r4, lsl #2
    a0fc:	050c0000 	streq	r0, [ip, #-0]
    a100:	0c000021 	stceq	0, cr0, [r0], {33}	; 0x21
    a104:	f8000005 			; <UNDEFINED> instruction: 0xf8000005
    a108:	0000000e 	andeq	r0, r0, lr
    a10c:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    a110:	0200005d 	andeq	r0, r0, #93	; 0x5d
    a114:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
    a118:	02020000 	andeq	r0, r2, #0
    a11c:	0005fe05 	andeq	pc, r5, r5, lsl #28
    a120:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    a124:	000004c5 	andeq	r0, r0, r5, asr #9
    a128:	c0050802 	andgt	r0, r5, r2, lsl #16
    a12c:	03000004 	movweq	r0, #4
    a130:	00000666 	andeq	r0, r0, r6, ror #12
    a134:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    a138:	02000000 	andeq	r0, r0, #0
    a13c:	06fb0801 	ldrbteq	r0, [fp], r1, lsl #16
    a140:	35030000 	strcc	r0, [r3, #-0]
    a144:	02000003 	andeq	r0, r0, #3
    a148:	00601931 	rsbeq	r1, r0, r1, lsr r9
    a14c:	02020000 	andeq	r0, r2, #0
    a150:	0007a707 	andeq	sl, r7, r7, lsl #14
    a154:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    a158:	34020000 	strcc	r0, [r2], #-0
    a15c:	00007319 	andeq	r7, r0, r9, lsl r3
    a160:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a164:	000002fa 	strdeq	r0, [r0], -sl
    a168:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    a16c:	04000002 	streq	r0, [r0], #-2
    a170:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a174:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a178:	0002ff07 	andeq	pc, r2, r7, lsl #30
    a17c:	036b0300 	cmneq	fp, #0, 6
    a180:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    a184:	00009b1b 	andeq	r9, r0, fp, lsl fp
    a188:	06960500 	ldreq	r0, [r6], r0, lsl #10
    a18c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    a190:	0000b300 	andeq	fp, r0, r0, lsl #6
    a194:	075e0600 	ldrbeq	r0, [lr, -r0, lsl #12]
    a198:	00b30000 	adcseq	r0, r3, r0
    a19c:	01000000 	mrseq	r0, (UNDEF: 0)
    a1a0:	03040700 	movweq	r0, #18176	; 0x4700
    a1a4:	00000698 	muleq	r0, r8, r6
    a1a8:	8f186303 	svchi	0x00186303
    a1ac:	03000000 	movweq	r0, #0
    a1b0:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    a1b4:	41122604 	tstmi	r2, r4, lsl #12
    a1b8:	03000000 	movweq	r0, #0
    a1bc:	00002100 	andeq	r2, r0, r0, lsl #2
    a1c0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    a1c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a1c8:	000000cd 	andeq	r0, r0, sp, asr #1
    a1cc:	0016c803 	andseq	ip, r6, r3, lsl #16
    a1d0:	122b0400 	eorne	r0, fp, #0, 8
    a1d4:	00000041 	andeq	r0, r0, r1, asr #32
    a1d8:	0000de09 	andeq	sp, r0, r9, lsl #28
    a1dc:	21510300 	cmpcs	r1, r0, lsl #6
    a1e0:	2c040000 	stccs	0, cr0, [r4], {-0}
    a1e4:	00006712 	andeq	r6, r0, r2, lsl r7
    a1e8:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    a1ec:	0d030000 	stceq	0, cr0, [r3, #-0]
    a1f0:	04000004 	streq	r0, [r0], #-4
    a1f4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    a1f8:	040a0000 	streq	r0, [sl], #-0
    a1fc:	000000cd 	andeq	r0, r0, sp, asr #1
    a200:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    a204:	0001a009 	andeq	sl, r1, r9
    a208:	00230c00 	eoreq	r0, r3, r0, lsl #24
    a20c:	34040000 	strcc	r0, [r4], #-0
    a210:	0000de07 	andeq	sp, r0, r7, lsl #28
    a214:	07010100 	streq	r0, [r1, -r0, lsl #2]
    a218:	04130c00 	ldreq	r0, [r3], #-3072	; 0xfffff400
    a21c:	35040000 	strcc	r0, [r4, #-0]
    a220:	0000de03 	andeq	sp, r0, r3, lsl #28
    a224:	06010100 	streq	r0, [r1], -r0, lsl #2
    a228:	01cb0c00 	biceq	r0, fp, r0, lsl #24
    a22c:	36040000 	strcc	r0, [r4], -r0
    a230:	0000de03 	andeq	sp, r0, r3, lsl #28
    a234:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    a238:	044d0c00 	strbeq	r0, [sp], #-3072	; 0xfffff400
    a23c:	37040000 	strcc	r0, [r4, -r0]
    a240:	0000de03 	andeq	sp, r0, r3, lsl #28
    a244:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    a248:	06080c00 	streq	r0, [r8], -r0, lsl #24
    a24c:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    a250:	0000de03 	andeq	sp, r0, r3, lsl #28
    a254:	00040100 	andeq	r0, r4, r0, lsl #2
    a258:	041a0d00 	ldreq	r0, [sl], #-3328	; 0xfffff300
    a25c:	3a040000 	bcc	10a264 <__ccfg+0xea2bc>
    a260:	0000de07 	andeq	sp, r0, r7, lsl #28
    a264:	760d0100 	strvc	r0, [sp], -r0, lsl #2
    a268:	04000005 	streq	r0, [r0], #-5
    a26c:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    a270:	0d020000 	stceq	0, cr0, [r2, #-0]
    a274:	00000853 	andeq	r0, r0, r3, asr r8
    a278:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    a27c:	03000000 	movweq	r0, #0
    a280:	00058e0d 	andeq	r8, r5, sp, lsl #28
    a284:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    a288:	000000ef 	andeq	r0, r0, pc, ror #1
    a28c:	19030004 	stmdbne	r3, {r2}
    a290:	04000002 	streq	r0, [r0], #-2
    a294:	01120341 	tsteq	r2, r1, asr #6
    a298:	a0090000 	andge	r0, r9, r0
    a29c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    a2a0:	00000454 	andeq	r0, r0, r4, asr r4
    a2a4:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    a2a8:	01000001 	tsteq	r0, r1
    a2ac:	01670e01 	cmneq	r7, r1, lsl #28
    a2b0:	45040000 	strmi	r0, [r4, #-0]
    a2b4:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    a2b8:	0a010100 	beq	4a6c0 <__ccfg+0x2a718>
    a2bc:	0001d304 	andeq	sp, r1, r4, lsl #6
    a2c0:	08010200 	stmdaeq	r1, {r9}
    a2c4:	00000704 	andeq	r0, r0, r4, lsl #14
    a2c8:	0001d308 	andeq	sp, r1, r8, lsl #6
    a2cc:	02220e00 	eoreq	r0, r2, #0, 28
    a2d0:	45040000 	strmi	r0, [r4, #-0]
    a2d4:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    a2d8:	0b010100 	bleq	4a6e0 <__ccfg+0x2a738>
    a2dc:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    a2e0:	0000021e 	andeq	r0, r0, lr, lsl r2
    a2e4:	0004cf0d 	andeq	ip, r4, sp, lsl #30
    a2e8:	0b900500 	bleq	fe40b6f0 <_estack+0xde4066f0>
    a2ec:	00000067 	andeq	r0, r0, r7, rrx
    a2f0:	09850d00 	stmibeq	r5, {r8, sl, fp}
    a2f4:	91050000 	mrsls	r0, (UNDEF: 5)
    a2f8:	0000cd08 	andeq	ip, r0, r8, lsl #26
    a2fc:	a00d0400 	andge	r0, sp, r0, lsl #8
    a300:	05000001 	streq	r0, [r0, #-1]
    a304:	00ea1092 	smlaleq	r1, sl, r2, r0
    a308:	00060000 	andeq	r0, r6, r0
    a30c:	00075103 	andeq	r5, r7, r3, lsl #2
    a310:	03930500 	orrseq	r0, r3, #0, 10
    a314:	000001ed 	andeq	r0, r0, sp, ror #3
    a318:	00021e0f 	andeq	r1, r2, pc, lsl #28
    a31c:	00023500 	andeq	r3, r2, r0, lsl #10
    a320:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    a324:	0000059a 	muleq	r0, sl, r5
    a328:	2a0f9905 	bcs	3f0744 <__ccfg+0x3d079c>
    a32c:	01000002 	tsteq	r0, r2
    a330:	06010b01 	streq	r0, [r1], -r1, lsl #22
    a334:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    a338:	950c0000 	strls	r0, [ip, #-0]
    a33c:	06000005 	streq	r0, [r0], -r5
    a340:	00de0793 	smullseq	r0, lr, r3, r7
    a344:	07010000 	streq	r0, [r1, -r0]
    a348:	b40c0001 	strlt	r0, [ip], #-1
    a34c:	06000003 	streq	r0, [r0], -r3
    a350:	00de0394 	smullseq	r0, lr, r4, r3
    a354:	01010000 	mrseq	r0, (UNDEF: 1)
    a358:	03000000 	movweq	r0, #0
    a35c:	0000061a 	andeq	r0, r0, sl, lsl r6
    a360:	43039606 	movwmi	r9, #13830	; 0x3606
    a364:	08000002 	stmdaeq	r0, {r1}
    a368:	0000026d 	andeq	r0, r0, sp, ror #4
    a36c:	0002790f 	andeq	r7, r2, pc, lsl #18
    a370:	00028900 	andeq	r8, r2, r0, lsl #18
    a374:	08001000 	stmdaeq	r0, {ip}
    a378:	0000027e 	andeq	r0, r0, lr, ror r2
    a37c:	0002ba0e 	andeq	fp, r2, lr, lsl #20
    a380:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    a384:	00000289 	andeq	r0, r0, r9, lsl #5
    a388:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    a38c:	a7000000 	strge	r0, [r0, -r0]
    a390:	10000002 	andne	r0, r0, r2
    a394:	029c0800 	addseq	r0, ip, #0, 16
    a398:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
    a39c:	07000003 	streq	r0, [r0, -r3]
    a3a0:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    a3a4:	01010000 	mrseq	r0, (UNDEF: 1)
    a3a8:	0005580e 	andeq	r5, r5, lr, lsl #16
    a3ac:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    a3b0:	000000ef 	andeq	r0, r0, pc, ror #1
    a3b4:	1d110101 	ldfnes	f0, [r1, #-4]
    a3b8:	08000007 	stmdaeq	r0, {r0, r1, r2}
    a3bc:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    a3c0:	0a000002 	beq	a3d0 <__exidx_end+0x7798>
    a3c4:	0002db04 	andeq	sp, r2, r4, lsl #22
    a3c8:	e7011200 	str	r1, [r1, -r0, lsl #4]
    a3cc:	13000002 	movwne	r0, #2
    a3d0:	000000cd 	andeq	r0, r0, sp, asr #1
    a3d4:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    a3d8:	02f20000 	rscseq	r0, r2, #0
    a3dc:	00100000 	andseq	r0, r0, r0
    a3e0:	0002e708 	andeq	lr, r2, r8, lsl #14
    a3e4:	05c21400 	strbeq	r1, [r2, #1024]	; 0x400
    a3e8:	7f080000 	svcvc	0x00080000
    a3ec:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    a3f0:	01010000 	mrseq	r0, (UNDEF: 1)
    a3f4:	00029d14 	andeq	r9, r2, r4, lsl sp
    a3f8:	01820800 	orreq	r0, r2, r0, lsl #16
    a3fc:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    a400:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    a404:	0000027a 	andeq	r0, r0, sl, ror r2
    a408:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    a40c:	000000ef 	andeq	r0, r0, pc, ror #1
    a410:	08150101 	ldmdaeq	r5, {r0, r8}
    a414:	09030308 	stmdbeq	r3, {r3, r8, r9}
    a418:	0000034b 	andeq	r0, r0, fp, asr #6
    a41c:	00320016 	eorseq	r0, r2, r6, lsl r0
    a420:	03070800 	movweq	r0, #30720	; 0x7800
    a424:	0000cd07 	andeq	ip, r0, r7, lsl #26
    a428:	dd160000 	ldcle	0, cr0, [r6, #-0]
    a42c:	08000008 	stmdaeq	r0, {r3}
    a430:	00080308 	andeq	r0, r8, r8, lsl #6
    a434:	04000001 	streq	r0, [r0], #-1
    a438:	03261100 			; <UNDEFINED> instruction: 0x03261100
    a43c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    a440:	03240303 			; <UNDEFINED> instruction: 0x03240303
    a444:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
    a448:	30000000 	andcc	r0, r0, r0
    a44c:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    a450:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    a454:	00179816 	andseq	r9, r7, r6, lsl r8
    a458:	03140800 	tsteq	r4, #0, 16
    a45c:	0000cd08 	andeq	ip, r0, r8, lsl #26
    a460:	d9160000 	ldmdble	r6, {}	; <UNPREDICTABLE>
    a464:	08000006 	stmdaeq	r0, {r1, r2}
    a468:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    a46c:	02000000 	andeq	r0, r0, #0
    a470:	00072016 	andeq	r2, r7, r6, lsl r0
    a474:	03160800 	tsteq	r6, #0, 16
    a478:	0002c80b 	andeq	ip, r2, fp, lsl #16
    a47c:	24160400 	ldrcs	r0, [r6], #-1024	; 0xfffffc00
    a480:	08000006 	stmdaeq	r0, {r1, r2}
    a484:	00090317 	andeq	r0, r9, r7, lsl r3
    a488:	08000001 	stmdaeq	r0, {r0}
    a48c:	00000716 	andeq	r0, r0, r6, lsl r7
    a490:	03180800 	tsteq	r8, #0, 16
    a494:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    a498:	ad160c00 	ldcge	12, cr0, [r6, #-0]
    a49c:	08000005 	stmdaeq	r0, {r0, r2}
    a4a0:	cb150319 	blgt	54b10c <__ccfg+0x52b164>
    a4a4:	2c000003 	stccs	0, cr0, [r0], {3}
    a4a8:	034b0f00 	movteq	r0, #48896	; 0xbf00
    a4ac:	03cb0000 	biceq	r0, fp, #0
    a4b0:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    a4b4:	03000000 	movweq	r0, #0
    a4b8:	58040a00 	stmdapl	r4, {r9, fp}
    a4bc:	11000003 	tstne	r0, r3
    a4c0:	000006ce 	andeq	r0, r0, lr, asr #13
    a4c4:	1b031c08 	blne	d14ec <__ccfg+0xb1544>
    a4c8:	00000358 	andeq	r0, r0, r8, asr r3
    a4cc:	0006ae14 	andeq	sl, r6, r4, lsl lr
    a4d0:	031e0800 	tsteq	lr, #0, 16
    a4d4:	0003ed14 	andeq	lr, r3, r4, lsl sp
    a4d8:	0a010100 	beq	4a8e0 <__ccfg+0x2a938>
    a4dc:	0003d104 	andeq	sp, r3, r4, lsl #2
    a4e0:	43011900 	movwmi	r1, #6400	; 0x1900
    a4e4:	01000021 	tsteq	r0, r1, lsr #32
    a4e8:	81010508 	tsthi	r1, r8, lsl #10
    a4ec:	44000000 	strmi	r0, [r0], #-0
    a4f0:	d400001a 	strle	r0, [r0], #-26	; 0xffffffe6
    a4f4:	0100001d 	tsteq	r0, sp, lsl r0
    a4f8:	0005869c 	muleq	r5, ip, r6
    a4fc:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    a500:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    a504:	00058618 	andeq	r8, r5, r8, lsl r6
    a508:	002c3500 	eoreq	r3, ip, r0, lsl #10
    a50c:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    a510:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    a514:	00058629 	andeq	r8, r5, r9, lsr #12
    a518:	002e2c00 	eoreq	r2, lr, r0, lsl #24
    a51c:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    a520:	36080100 	strcc	r0, [r8], -r0, lsl #2
    a524:	000000b5 	strheq	r0, [r0], -r5
    a528:	00002e60 	andeq	r2, r0, r0, ror #28
    a52c:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    a530:	81060a01 	tsthi	r6, r1, lsl #20
    a534:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    a538:	1c00002e 	stcne	0, cr0, [r0], {46}	; 0x2e
    a53c:	000020f8 	strdeq	r2, [r0], -r8
    a540:	1c114e01 	ldcne	14, cr4, [r1], {1}
    a544:	00002149 	andeq	r2, r0, r9, asr #2
    a548:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    a54c:	00001b06 	andeq	r1, r0, r6, lsl #22
    a550:	00001b76 	andeq	r1, r0, r6, ror fp
    a554:	00000488 	andeq	r0, r0, r8, lsl #9
    a558:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    a55c:	114e0100 	mrsne	r0, (UNDEF: 94)
    a560:	0000010c 	andeq	r0, r0, ip, lsl #2
    a564:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    a568:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    a56c:	0000c111 	andeq	ip, r0, r1, lsl r1
    a570:	002f7a00 	eoreq	r7, pc, r0, lsl #20
    a574:	761d0000 	ldrvc	r0, [sp], -r0
    a578:	be00001b 	mcrlt	0, 0, r0, cr0, cr11, {0}
    a57c:	a400001b 	strge	r0, [r0], #-27	; 0xffffffe5
    a580:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    a584:	00706176 	rsbseq	r6, r0, r6, ror r1
    a588:	0c114f01 	ldceq	15, cr4, [r1], {1}
    a58c:	01000001 	tsteq	r0, r1
    a590:	a81f005e 	ldmdage	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    a594:	d500000e 	strle	r0, [r0, #-14]
    a598:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    a59c:	00706176 	rsbseq	r6, r0, r6, ror r1
    a5a0:	0c115001 	ldceq	0, cr5, [r1], {1}
    a5a4:	01000001 	tsteq	r0, r1
    a5a8:	6364205e 	cmnvs	r4, #94	; 0x5e
    a5ac:	11500100 	cmpne	r0, r0, lsl #2
    a5b0:	00000081 	andeq	r0, r0, r1, lsl #1
    a5b4:	0100631b 	tsteq	r0, fp, lsl r3
    a5b8:	01d31150 	bicseq	r1, r3, r0, asr r1
    a5bc:	2f980000 	svccs	0x00980000
    a5c0:	1f000000 	svcne	0x00000000
    a5c4:	00000ec0 	andeq	r0, r0, r0, asr #29
    a5c8:	000004fc 	strdeq	r0, [r0], -ip
    a5cc:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    a5d0:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    a5d4:	0000058c 	andeq	r0, r0, ip, lsl #11
    a5d8:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    a5dc:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    a5e0:	0000c116 	andeq	ip, r0, r6, lsl r1
    a5e4:	002fb600 	eoreq	fp, pc, r0, lsl #12
    a5e8:	701f0000 	andsvc	r0, pc, r0
    a5ec:	1400000e 	strne	r0, [r0], #-14
    a5f0:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    a5f4:	00706176 	rsbseq	r6, r0, r6, ror r1
    a5f8:	8c165601 	ldchi	6, cr5, [r6], {1}
    a5fc:	01000005 	tsteq	r0, r5
    a600:	d81f005e 	ldmdale	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    a604:	4500000e 	strmi	r0, [r0, #-14]
    a608:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    a60c:	00706176 	rsbseq	r6, r0, r6, ror r1
    a610:	8c165701 	ldchi	7, cr5, [r6], {1}
    a614:	01000005 	tsteq	r0, r5
    a618:	6364205e 	cmnvs	r4, #94	; 0x5e
    a61c:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    a620:	00000081 	andeq	r0, r0, r1, lsl #1
    a624:	0100631b 	tsteq	r0, fp, lsl r3
    a628:	01d31657 	bicseq	r1, r3, r7, asr r6
    a62c:	2fd40000 	svccs	0x00d40000
    a630:	1d000000 	stcne	0, cr0, [r0, #-0]
    a634:	00001d86 	andeq	r1, r0, r6, lsl #27
    a638:	00001d9a 	muleq	r0, sl, sp
    a63c:	0000056f 	andeq	r0, r0, pc, ror #10
    a640:	0100631b 	tsteq	r0, fp, lsl r3
    a644:	01d3095c 	bicseq	r0, r3, ip, asr r9
    a648:	2ff20000 	svccs	0x00f20000
    a64c:	731e0000 	tstvc	lr, #0
    a650:	01007061 	tsteq	r0, r1, rrx
    a654:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    a658:	56010000 	strpl	r0, [r1], -r0
    a65c:	0e882100 	rmfeqe	f2, f0, f0
    a660:	731b0000 	tstvc	fp, #0
    a664:	01007061 	tsteq	r0, r1, rrx
    a668:	01cd0a66 	biceq	r0, sp, r6, ror #20
    a66c:	30050000 	andcc	r0, r5, r0
    a670:	00000000 	andeq	r0, r0, r0
    a674:	01da040a 	bicseq	r0, sl, sl, lsl #8
    a678:	040a0000 	streq	r0, [sl], #-0
    a67c:	000000ef 	andeq	r0, r0, pc, ror #1
    a680:	0000d500 	andeq	sp, r0, r0, lsl #10
    a684:	0a000400 	beq	b68c <__exidx_end+0x8a54>
    a688:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    a68c:	00219001 	eoreq	r9, r1, r1
    a690:	22490100 	subcs	r0, r9, #0, 2
    a694:	22850000 	addcs	r0, r5, #0
    a698:	0f080000 	svceq	0x00080000
    a69c:	00000000 	andeq	r0, r0, r0
    a6a0:	60380000 	eorsvs	r0, r8, r0
    a6a4:	40020000 	andmi	r0, r2, r0
    a6a8:	02000022 	andeq	r0, r0, #34	; 0x22
    a6ac:	0000301b 	andeq	r3, r0, fp, lsl r0
    a6b0:	06010300 	streq	r0, [r1], -r0, lsl #6
    a6b4:	000006fd 	strdeq	r0, [r0], -sp
    a6b8:	fb080103 	blx	20aace <__ccfg+0x1eab26>
    a6bc:	03000006 	movweq	r0, #6
    a6c0:	05fe0502 	ldrbeq	r0, [lr, #1282]!	; 0x502
    a6c4:	02030000 	andeq	r0, r3, #0
    a6c8:	0007a707 	andeq	sl, r7, r7, lsl #14
    a6cc:	21860200 	orrcs	r0, r6, r0, lsl #4
    a6d0:	3f020000 	svccc	0x00020000
    a6d4:	00000057 	andeq	r0, r0, r7, asr r0
    a6d8:	c5050403 	strgt	r0, [r5, #-1027]	; 0xfffffbfd
    a6dc:	03000004 	movweq	r0, #4
    a6e0:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    a6e4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    a6e8:	0004c005 	andeq	ip, r4, r5
    a6ec:	07080300 	streq	r0, [r8, -r0, lsl #6]
    a6f0:	000002f5 	strdeq	r0, [r0], -r5
    a6f4:	69050404 	stmdbvs	r5, {r2, sl}
    a6f8:	0300746e 	movweq	r7, #1134	; 0x46e
    a6fc:	02ff0704 	rscseq	r0, pc, #4, 14	; 0x100000
    a700:	42020000 	andmi	r0, r2, #0
    a704:	03000022 	movweq	r0, #34	; 0x22
    a708:	00002513 	andeq	r2, r0, r3, lsl r5
    a70c:	21880200 	orrcs	r0, r8, r0, lsl #4
    a710:	1f030000 	svcne	0x00030000
    a714:	0000004c 	andeq	r0, r0, ip, asr #32
    a718:	00215705 	eoreq	r5, r1, r5, lsl #14
    a71c:	8caa0400 	cfstrshi	mvf0, [sl]
    a720:	d4000000 	strle	r0, [r0], #-0
    a724:	3000001d 	andcc	r0, r0, sp, lsl r0
    a728:	01000000 	mrseq	r0, (UNDEF: 0)
    a72c:	227a069c 	rsbscs	r0, sl, #156, 12	; 0x9c00000
    a730:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    a734:	0000008c 	andeq	r0, r0, ip, lsl #1
    a738:	00003023 	andeq	r3, r0, r3, lsr #32
    a73c:	00226b06 	eoreq	r6, r2, r6, lsl #22
    a740:	8c3f0100 	ldfhis	f0, [pc], #-0	; a748 <__exidx_end+0x7b10>
    a744:	3c000000 	stccc	0, cr0, [r0], {-0}
    a748:	07000030 	smladxeq	r0, r0, r0, r0
    a74c:	00002179 	andeq	r2, r0, r9, ror r1
    a750:	00814001 	addeq	r4, r1, r1
    a754:	51010000 	mrspl	r0, (UNDEF: 1)
    a758:	01430000 	mrseq	r0, (UNDEF: 67)
    a75c:	00040000 	andeq	r0, r4, r0
    a760:	00002879 	andeq	r2, r0, r9, ror r8
    a764:	21900104 	orrscs	r0, r0, r4, lsl #2
    a768:	8b010000 	blhi	4a770 <__ccfg+0x2a7c8>
    a76c:	85000023 	strhi	r0, [r0, #-35]	; 0xffffffdd
    a770:	18000022 	stmdane	r0, {r1, r5}
    a774:	0000000f 	andeq	r0, r0, pc
    a778:	a3000000 	movwge	r0, #0
    a77c:	02000061 	andeq	r0, r0, #97	; 0x61
    a780:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
    a784:	01020000 	mrseq	r0, (UNDEF: 2)
    a788:	0006fb08 	andeq	pc, r6, r8, lsl #22
    a78c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    a790:	000005fe 	strdeq	r0, [r0], -lr
    a794:	a7070202 	strge	r0, [r7, -r2, lsl #4]
    a798:	02000007 	andeq	r0, r0, #7
    a79c:	04c50504 	strbeq	r0, [r5], #1284	; 0x504
    a7a0:	12030000 	andne	r0, r3, #0
    a7a4:	02000007 	andeq	r0, r0, #7
    a7a8:	00005341 	andeq	r5, r0, r1, asr #6
    a7ac:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a7b0:	000002fa 	strdeq	r0, [r0], -sl
    a7b4:	c0050802 	andgt	r0, r5, r2, lsl #16
    a7b8:	03000004 	movweq	r0, #4
    a7bc:	00002335 	andeq	r2, r0, r5, lsr r3
    a7c0:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    a7c4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a7c8:	0002f507 	andeq	pc, r2, r7, lsl #10
    a7cc:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a7d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a7d4:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    a7d8:	03000002 	movweq	r0, #2
    a7dc:	00000714 	andeq	r0, r0, r4, lsl r7
    a7e0:	00482003 	subeq	r2, r8, r3
    a7e4:	37030000 	strcc	r0, [r3, -r0]
    a7e8:	03000023 	movweq	r0, #35	; 0x23
    a7ec:	00006126 	andeq	r6, r0, r6, lsr #2
    a7f0:	23000500 	movwcs	r0, #1280	; 0x500
    a7f4:	45040000 	strmi	r0, [r4, #-0]
    a7f8:	00008103 	andeq	r8, r0, r3, lsl #2
    a7fc:	00000000 	andeq	r0, r0, r0
    a800:	00002000 	andeq	r2, r0, r0
    a804:	dd9c0100 	ldfles	f0, [ip]
    a808:	06000000 	streq	r0, [r0], -r0
    a80c:	000022f1 	strdeq	r2, [r0], -r1
    a810:	00814001 	addeq	r4, r1, r1
    a814:	30710000 	rsbscc	r0, r1, r0
    a818:	40060000 	andmi	r0, r6, r0
    a81c:	01000023 	tsteq	r0, r3, lsr #32
    a820:	00008141 	andeq	r8, r0, r1, asr #2
    a824:	00308400 	eorseq	r8, r0, r0, lsl #8
    a828:	23230700 			; <UNDEFINED> instruction: 0x23230700
    a82c:	42010000 	andmi	r0, r1, #0
    a830:	00000081 	andeq	r0, r0, r1, lsl #1
    a834:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    a838:	00002352 	andeq	r2, r0, r2, asr r3
    a83c:	8c035304 	stchi	3, cr5, [r3], {4}
    a840:	04000000 	streq	r0, [r0], #-0
    a844:	1800001e 	stmdane	r0, {r1, r2, r3, r4}
    a848:	01000000 	mrseq	r0, (UNDEF: 0)
    a84c:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    a850:	01080800 	tsteq	r8, r0, lsl #16
    a854:	00011659 	andeq	r1, r1, r9, asr r6
    a858:	22e50900 	rsccs	r0, r5, #0, 18
    a85c:	5a010000 	bpl	4a864 <__ccfg+0x2a8bc>
    a860:	0000008c 	andeq	r0, r0, ip, lsl #1
    a864:	00237e09 	eoreq	r7, r3, r9, lsl #28
    a868:	2f5b0100 	svccs	0x005b0100
    a86c:	00000001 	andeq	r0, r0, r1
    a870:	0023730a 	eoreq	r7, r3, sl, lsl #6
    a874:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    a878:	07000000 	streq	r0, [r0, -r0]
    a87c:	00002323 	andeq	r2, r0, r3, lsr #6
    a880:	00815d01 	addeq	r5, r1, r1, lsl #26
    a884:	51010000 	mrspl	r0, (UNDEF: 1)
    a888:	00810b00 	addeq	r0, r1, r0, lsl #22
    a88c:	013f0000 	teqeq	pc, r0
    a890:	3f0c0000 	svccc	0x000c0000
    a894:	01000001 	tsteq	r0, r1
    a898:	07040200 	streq	r0, [r4, -r0, lsl #4]
    a89c:	000023aa 	andeq	r2, r0, sl, lsr #7
    a8a0:	00013600 	andeq	r3, r1, r0, lsl #12
    a8a4:	23000400 	movwcs	r0, #1024	; 0x400
    a8a8:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    a8ac:	00219001 	eoreq	r9, r1, r1
    a8b0:	24060100 	strcs	r0, [r6], #-256	; 0xffffff00
    a8b4:	22850000 	addcs	r0, r5, #0
    a8b8:	0f300000 	svceq	0x00300000
    a8bc:	00000000 	andeq	r0, r0, r0
    a8c0:	63500000 	cmpvs	r0, #0
    a8c4:	01020000 	mrseq	r0, (UNDEF: 2)
    a8c8:	0006fd06 	andeq	pc, r6, r6, lsl #26
    a8cc:	08010200 	stmdaeq	r1, {r9}
    a8d0:	000006fb 	strdeq	r0, [r0], -fp
    a8d4:	fe050202 	cdp2	2, 0, cr0, cr5, cr2, {0}
    a8d8:	02000005 	andeq	r0, r0, #5
    a8dc:	07a70702 	streq	r0, [r7, r2, lsl #14]!
    a8e0:	04020000 	streq	r0, [r2], #-0
    a8e4:	0004c505 	andeq	ip, r4, r5, lsl #10
    a8e8:	07120300 	ldreq	r0, [r2, -r0, lsl #6]
    a8ec:	41020000 	mrsmi	r0, (UNDEF: 2)
    a8f0:	00000053 	andeq	r0, r0, r3, asr r0
    a8f4:	fa070402 	blx	1cb904 <__ccfg+0x1ab95c>
    a8f8:	02000002 	andeq	r0, r0, #2
    a8fc:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    a900:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a904:	0002f507 	andeq	pc, r2, r7, lsl #10
    a908:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a90c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a910:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    a914:	03000002 	movweq	r0, #2
    a918:	00000714 	andeq	r0, r0, r4, lsl r7
    a91c:	00482003 	subeq	r2, r8, r3
    a920:	e8050000 	stmda	r5, {}	; <UNPREDICTABLE>
    a924:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    a928:	0000766a 	andeq	r7, r0, sl, ror #12
    a92c:	001e1c00 	andseq	r1, lr, r0, lsl #24
    a930:	00000800 	andeq	r0, r0, r0, lsl #16
    a934:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    a938:	06000000 	streq	r0, [r0], -r0
    a93c:	000023d6 	ldrdeq	r2, [r0], -r6
    a940:	00767701 	rsbseq	r7, r6, r1, lsl #14
    a944:	05000000 	streq	r0, [r0, #-0]
    a948:	00002421 	andeq	r2, r0, r1, lsr #8
    a94c:	00767804 	rsbseq	r7, r6, r4, lsl #16
    a950:	00000000 	andeq	r0, r0, r0
    a954:	00060000 	andeq	r0, r6, r0
    a958:	9c010000 	stcls	0, cr0, [r1], {-0}
    a95c:	000000cb 	andeq	r0, r0, fp, asr #1
    a960:	0023d606 	eoreq	sp, r3, r6, lsl #12
    a964:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    a968:	00000000 	andeq	r0, r0, r0
    a96c:	0023f705 	eoreq	pc, r3, r5, lsl #14
    a970:	76840400 	strvc	r0, [r4], r0, lsl #8
    a974:	24000000 	strcs	r0, [r0], #-0
    a978:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    a97c:	01000000 	mrseq	r0, (UNDEF: 0)
    a980:	0000f19c 	muleq	r0, ip, r1
    a984:	23d60700 	bicscs	r0, r6, #0, 14
    a988:	0f010000 	svceq	0x00010000
    a98c:	00007601 	andeq	r7, r0, r1, lsl #12
    a990:	b3080000 	movwlt	r0, #32768	; 0x8000
    a994:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    a998:	0076015b 	rsbseq	r0, r6, fp, asr r1
    a99c:	00000000 	andeq	r0, r0, r0
    a9a0:	00060000 	andeq	r0, r6, r0
    a9a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a9a8:	00000118 	andeq	r0, r0, r8, lsl r1
    a9ac:	0023d607 	eoreq	sp, r3, r7, lsl #12
    a9b0:	015a0100 	cmpeq	sl, r0, lsl #2
    a9b4:	00000076 	andeq	r0, r0, r6, ror r0
    a9b8:	23c70900 	biccs	r0, r7, #0, 18
    a9bc:	6c040000 	stcvs	0, cr0, [r4], {-0}
    a9c0:	00000001 	andeq	r0, r0, r1
    a9c4:	00000800 	andeq	r0, r0, r0, lsl #16
    a9c8:	0a9c0100 	beq	fe70add0 <_estack+0xde705dd0>
    a9cc:	000023de 	ldrdeq	r2, [r0], -lr
    a9d0:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    a9d4:	01000000 	mrseq	r0, (UNDEF: 0)
    a9d8:	bf000050 	svclt	0x00000050
    a9dc:	04000008 	streq	r0, [r0], #-8
    a9e0:	0029d300 	eoreq	sp, r9, r0, lsl #6
    a9e4:	90010400 	andls	r0, r1, r0, lsl #8
    a9e8:	01000021 	tsteq	r0, r1, lsr #32
    a9ec:	0000255b 	andeq	r2, r0, fp, asr r5
    a9f0:	00002285 	andeq	r2, r0, r5, lsl #5
    a9f4:	00000f78 	andeq	r0, r0, r8, ror pc
    a9f8:	00000000 	andeq	r0, r0, r0
    a9fc:	000064f0 	strdeq	r6, [r0], -r0
    aa00:	fd060102 	stc2	1, cr0, [r6, #-8]
    aa04:	03000006 	movweq	r0, #6
    aa08:	00000664 	andeq	r0, r0, r4, ror #12
    aa0c:	00371d03 	eorseq	r1, r7, r3, lsl #26
    aa10:	01020000 	mrseq	r0, (UNDEF: 2)
    aa14:	0006fb08 	andeq	pc, r6, r8, lsl #22
    aa18:	29130300 	ldmdbcs	r3, {r8, r9}
    aa1c:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    aa20:	00000049 	andeq	r0, r0, r9, asr #32
    aa24:	fe050202 	cdp2	2, 0, cr0, cr5, cr2, {0}
    aa28:	03000005 	movweq	r0, #5
    aa2c:	00000333 	andeq	r0, r0, r3, lsr r3
    aa30:	005b2b03 	subseq	r2, fp, r3, lsl #22
    aa34:	02020000 	andeq	r0, r2, #0
    aa38:	0007a707 	andeq	sl, r7, r7, lsl #14
    aa3c:	21860300 	orrcs	r0, r6, r0, lsl #6
    aa40:	3f030000 	svccc	0x00030000
    aa44:	0000006d 	andeq	r0, r0, sp, rrx
    aa48:	c5050402 	strgt	r0, [r5, #-1026]	; 0xfffffbfe
    aa4c:	03000004 	movweq	r0, #4
    aa50:	00000712 	andeq	r0, r0, r2, lsl r7
    aa54:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    aa58:	04020000 	streq	r0, [r2], #-0
    aa5c:	0002fa07 	andeq	pc, r2, r7, lsl #20
    aa60:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    aa64:	000004c0 	andeq	r0, r0, r0, asr #9
    aa68:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    aa6c:	04000002 	streq	r0, [r0], #-2
    aa70:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    aa74:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    aa78:	0002ff07 	andeq	pc, r2, r7, lsl #30
    aa7c:	06660300 	strbteq	r0, [r6], -r0, lsl #6
    aa80:	14040000 	strne	r0, [r4], #-0
    aa84:	0000002c 	andeq	r0, r0, ip, lsr #32
    aa88:	00291503 	eoreq	r1, r9, r3, lsl #10
    aa8c:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    aa90:	03000000 	movweq	r0, #0
    aa94:	00000335 	andeq	r0, r0, r5, lsr r3
    aa98:	00501a04 	subseq	r1, r0, r4, lsl #20
    aa9c:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    aaa0:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    aaa4:	0000621f 	andeq	r6, r0, pc, lsl r2
    aaa8:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    aaac:	20040000 	andcs	r0, r4, r0
    aab0:	00000074 	andeq	r0, r0, r4, ror r0
    aab4:	00273103 	eoreq	r3, r7, r3, lsl #2
    aab8:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    aabc:	05000000 	streq	r0, [r0, #-0]
    aac0:	0000ea04 	andeq	lr, r0, r4, lsl #20
    aac4:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    aac8:	000000f1 	strdeq	r0, [r0], -r1
    aacc:	0000fc07 	andeq	pc, r0, r7, lsl #24
    aad0:	00a20800 	adceq	r0, r2, r0, lsl #16
    aad4:	03000000 	movweq	r0, #0
    aad8:	0000283c 	andeq	r2, r0, ip, lsr r8
    aadc:	01074206 	tsteq	r7, r6, lsl #4
    aae0:	04050000 	streq	r0, [r5], #-0
    aae4:	0000010d 	andeq	r0, r0, sp, lsl #2
    aae8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    aaec:	00012600 	andeq	r2, r1, r0, lsl #12
    aaf0:	01260800 			; <UNDEFINED> instruction: 0x01260800
    aaf4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    aaf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    aafc:	000000ce 	andeq	r0, r0, lr, asr #1
    ab00:	a2040500 	andge	r0, r4, #0, 10
    ab04:	03000000 	movweq	r0, #0
    ab08:	000029a4 	andeq	r2, r0, r4, lsr #19
    ab0c:	01374606 	teqeq	r7, r6, lsl #12
    ab10:	04050000 	streq	r0, [r5], #-0
    ab14:	0000013d 	andeq	r0, r0, sp, lsr r1
    ab18:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    ab1c:	29ed0300 	stmibcs	sp!, {r8, r9}^
    ab20:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    ab24:	00000137 	andeq	r0, r0, r7, lsr r1
    ab28:	0026c303 	eoreq	ip, r6, r3, lsl #6
    ab2c:	584a0600 	stmdapl	sl, {r9, sl}^
    ab30:	05000001 	streq	r0, [r0, #-1]
    ab34:	00015e04 	andeq	r5, r1, r4, lsl #28
    ab38:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    ab3c:	016d0000 	cmneq	sp, r0
    ab40:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    ab44:	00000000 	andeq	r0, r0, r0
    ab48:	0025d203 	eoreq	sp, r5, r3, lsl #4
    ab4c:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    ab50:	03000001 	movweq	r0, #1
    ab54:	00002532 	andeq	r2, r0, r2, lsr r5
    ab58:	01074e06 	tsteq	r7, r6, lsl #28
    ab5c:	c2030000 	andgt	r0, r3, #0
    ab60:	06000025 	streq	r0, [r0], -r5, lsr #32
    ab64:	0000e451 	andeq	lr, r0, r1, asr r4
    ab68:	244a0300 	strbcs	r0, [sl], #-768	; 0xfffffd00
    ab6c:	53060000 	movwpl	r0, #24576	; 0x6000
    ab70:	00000199 	muleq	r0, r9, r1
    ab74:	019f0405 	orrseq	r0, pc, r5, lsl #8
    ab78:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    ab7c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    ab80:	08000001 	stmdaeq	r0, {r0}
    ab84:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    ab88:	0000b808 	andeq	fp, r0, r8, lsl #16
    ab8c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    ab90:	05000000 	streq	r0, [r0, #-0]
    ab94:	0000b804 	andeq	fp, r0, r4, lsl #16
    ab98:	28520300 	ldmdacs	r2, {r8, r9}^
    ab9c:	57060000 	strpl	r0, [r6, -r0]
    aba0:	000001c9 	andeq	r0, r0, r9, asr #3
    aba4:	01cf0405 	biceq	r0, pc, r5, lsl #8
    aba8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    abac:	e3000000 	movw	r0, #0
    abb0:	08000001 	stmdaeq	r0, {r0}
    abb4:	000001e3 	andeq	r0, r0, r3, ror #3
    abb8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    abbc:	04050000 	streq	r0, [r5], #-0
    abc0:	000000ce 	andeq	r0, r0, lr, asr #1
    abc4:	00263503 	eoreq	r3, r6, r3, lsl #10
    abc8:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    abcc:	03000001 	movweq	r0, #1
    abd0:	000026ef 	andeq	r2, r0, pc, ror #13
    abd4:	01c95d06 	biceq	r5, r9, r6, lsl #26
    abd8:	5c030000 	stcpl	0, cr0, [r3], {-0}
    abdc:	06000024 	streq	r0, [r0], -r4, lsr #32
    abe0:	0001c960 	andeq	ip, r1, r0, ror #18
    abe4:	28600300 	stmdacs	r0!, {r8, r9}^
    abe8:	63060000 	movwvs	r0, #24576	; 0x6000
    abec:	000000e4 	andeq	r0, r0, r4, ror #1
    abf0:	00249a03 	eoreq	r9, r4, r3, lsl #20
    abf4:	20650600 	rsbcs	r0, r5, r0, lsl #12
    abf8:	05000002 	streq	r0, [r0, #-2]
    abfc:	00022604 	andeq	r2, r2, r4, lsl #12
    ac00:	02310700 	eorseq	r0, r1, #0, 14
    ac04:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    ac08:	00000000 	andeq	r0, r0, r0
    ac0c:	0029fe03 	eoreq	pc, r9, r3, lsl #28
    ac10:	20670600 	rsbcs	r0, r7, r0, lsl #12
    ac14:	03000002 	movweq	r0, #2
    ac18:	00002742 	andeq	r2, r0, r2, asr #14
    ac1c:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    ac20:	dd030000 	stcle	0, cr0, [r3, #-0]
    ac24:	06000029 	streq	r0, [r0], -r9, lsr #32
    ac28:	0000eb6b 	andeq	lr, r0, fp, ror #22
    ac2c:	26fe0300 	ldrbtcs	r0, [lr], r0, lsl #6
    ac30:	6d060000 	stcvs	0, cr0, [r6, #-0]
    ac34:	000000eb 	andeq	r0, r0, fp, ror #1
    ac38:	00271003 	eoreq	r1, r7, r3
    ac3c:	eb6f0600 	bl	1bcc444 <__ccfg+0x1bac49c>
    ac40:	0b000000 	bleq	ac48 <__exidx_end+0x8010>
    ac44:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    ac48:	0c000003 	stceq	0, cr0, [r0], {3}
    ac4c:	000026d4 	ldrdeq	r2, [r0], -r4
    ac50:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    ac54:	0c000000 	stceq	0, cr0, [r0], {-0}
    ac58:	000029d0 	ldrdeq	r2, [r0], -r0
    ac5c:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    ac60:	0c040000 	stceq	0, cr0, [r4], {-0}
    ac64:	000026e5 	andeq	r2, r0, r5, ror #13
    ac68:	01427e06 	cmpeq	r2, r6, lsl #28
    ac6c:	0c080000 	stceq	0, cr0, [r8], {-0}
    ac70:	000028ef 	andeq	r2, r0, pc, ror #17
    ac74:	014d7f06 	cmpeq	sp, r6, lsl #30
    ac78:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ac7c:	00002901 	andeq	r2, r0, r1, lsl #18
    ac80:	016d8006 	cmneq	sp, r6
    ac84:	0c100000 	ldceq	0, cr0, [r0], {-0}
    ac88:	000025e3 	andeq	r2, r0, r3, ror #11
    ac8c:	01788106 	cmneq	r8, r6, lsl #2
    ac90:	0c140000 	ldceq	0, cr0, [r4], {-0}
    ac94:	0000259f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    ac98:	01838206 	orreq	r8, r3, r6, lsl #4
    ac9c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    aca0:	000026da 	ldrdeq	r2, [r0], -sl
    aca4:	018e8306 	orreq	r8, lr, r6, lsl #6
    aca8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    acac:	0000287a 	andeq	r2, r0, sl, ror r8
    acb0:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    acb4:	0c200000 	stceq	0, cr0, [r0], #-0
    acb8:	00002661 	andeq	r2, r0, r1, ror #12
    acbc:	01e98506 	mvneq	r8, r6, lsl #10
    acc0:	0c240000 	stceq	0, cr0, [r4], #-0
    acc4:	000026b9 			; <UNDEFINED> instruction: 0x000026b9
    acc8:	01f48606 	mvnseq	r8, r6, lsl #12
    accc:	0c280000 	stceq	0, cr0, [r8], #-0
    acd0:	0000292f 	andeq	r2, r0, pc, lsr #18
    acd4:	01ff8706 	mvnseq	r8, r6, lsl #14
    acd8:	0c2c0000 	stceq	0, cr0, [ip], #-0
    acdc:	000025fe 	strdeq	r2, [r0], -lr
    ace0:	02158806 	andseq	r8, r5, #393216	; 0x60000
    ace4:	0c300000 	ldceq	0, cr0, [r0], #-0
    ace8:	0000291d 	andeq	r2, r0, sp, lsl r9
    acec:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    acf0:	0c340000 	ldceq	0, cr0, [r4], #-0
    acf4:	000024db 	ldrdeq	r2, [r0], -fp
    acf8:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    acfc:	0c380000 	ldceq	0, cr0, [r8], #-0
    ad00:	00002720 	andeq	r2, r0, r0, lsr #14
    ad04:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    ad08:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    ad0c:	000028d0 	ldrdeq	r2, [r0], -r0
    ad10:	02478c06 	subeq	r8, r7, #1536	; 0x600
    ad14:	0c400000 	mareq	acc0, r0, r0
    ad18:	00002643 	andeq	r2, r0, r3, asr #12
    ad1c:	02528d06 	subseq	r8, r2, #384	; 0x180
    ad20:	0c440000 	mareq	acc0, r0, r4
    ad24:	0000248b 	andeq	r2, r0, fp, lsl #9
    ad28:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    ad2c:	00480000 	subeq	r0, r8, r0
    ad30:	00280003 	eoreq	r0, r8, r3
    ad34:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    ad38:	0b000002 	bleq	ad48 <__exidx_end+0x8110>
    ad3c:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    ad40:	0c000003 	stceq	0, cr0, [r0], {3}
    ad44:	00002543 	andeq	r2, r0, r3, asr #10
    ad48:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    ad4c:	0c000000 	stceq	0, cr0, [r0], {-0}
    ad50:	000027c6 	andeq	r2, r0, r6, asr #15
    ad54:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    ad58:	0c040000 	stceq	0, cr0, [r4], {-0}
    ad5c:	000024ab 	andeq	r2, r0, fp, lsr #9
    ad60:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    ad64:	0c080000 	stceq	0, cr0, [r8], {-0}
    ad68:	00002576 	andeq	r2, r0, r6, ror r5
    ad6c:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    ad70:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    ad74:	000024ee 	andeq	r2, r0, lr, ror #9
    ad78:	00c35901 	sbceq	r5, r3, r1, lsl #18
    ad7c:	00100000 	andseq	r0, r0, r0
    ad80:	0027f103 	eoreq	pc, r7, r3, lsl #2
    ad84:	605a0100 	subsvs	r0, sl, r0, lsl #2
    ad88:	0d000003 	stceq	0, cr0, [r0, #-12]
    ad8c:	00002432 	andeq	r2, r0, r2, lsr r4
    ad90:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    ad94:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    ad98:	0000281f 	andeq	r2, r0, pc, lsl r8
    ad9c:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    ada0:	830e0000 	movwhi	r0, #57344	; 0xe000
    ada4:	01000024 	tsteq	r0, r4, lsr #32
    ada8:	0000ce65 	andeq	ip, r0, r5, ror #28
    adac:	6b0f0000 	blvs	3cadb4 <__ccfg+0x3aae0c>
    adb0:	02000024 	andeq	r0, r0, #36	; 0x24
    adb4:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    adb8:	fb010000 	blx	4adc2 <__ccfg+0x2ae1a>
    adbc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    adc0:	0000281f 	andeq	r2, r0, pc, lsl r8
    adc4:	00cea001 	sbceq	sl, lr, r1
    adc8:	df100000 	svcle	0x00100000
    adcc:	01000028 	tsteq	r0, r8, lsr #32
    add0:	0000cea2 	andeq	ip, r0, r2, lsr #29
    add4:	b0110000 	andslt	r0, r1, r0
    add8:	2c000003 	stccs	0, cr0, [r0], {3}
    addc:	5c00001e 	stcpl	0, cr0, [r0], {30}
    ade0:	01000000 	mrseq	r0, (UNDEF: 0)
    ade4:	0004b69c 	muleq	r4, ip, r6
    ade8:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    adec:	30970000 	addscc	r0, r7, r0
    adf0:	c7120000 	ldrgt	r0, [r2, -r0]
    adf4:	c3000003 	movwgt	r0, #3
    adf8:	13000030 	movwne	r0, #48	; 0x30
    adfc:	00001e66 	andeq	r1, r0, r6, ror #28
    ae00:	00000014 	andeq	r0, r0, r4, lsl r0
    ae04:	00000461 	andeq	r0, r0, r1, ror #8
    ae08:	0003bc12 	andeq	fp, r3, r2, lsl ip
    ae0c:	0030ef00 	eorseq	lr, r0, r0, lsl #30
    ae10:	03c71200 	biceq	r1, r7, #0, 4
    ae14:	31020000 	mrscc	r0, (UNDEF: 2)
    ae18:	7a140000 	bvc	50ae20 <__ccfg+0x4eae78>
    ae1c:	0200001e 	andeq	r0, r0, #30
    ae20:	01150074 	tsteq	r5, r4, ror r0
    ae24:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    ae28:	3c015201 	sfmcc	f5, 4, [r1], {1}
    ae2c:	01510115 	cmpeq	r1, r5, lsl r1
    ae30:	50011530 	andpl	r1, r1, r0, lsr r5
    ae34:	a0000c05 	andge	r0, r0, r5, lsl #24
    ae38:	0000400c 	andeq	r4, r0, ip
    ae3c:	001e4a16 	andseq	r4, lr, r6, lsl sl
    ae40:	00760200 	rsbseq	r0, r6, r0, lsl #4
    ae44:	0000048d 	andeq	r0, r0, sp, lsl #9
    ae48:	01530115 	cmpeq	r3, r5, lsl r1
    ae4c:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    ae50:	01153101 	tsteq	r5, r1, lsl #2
    ae54:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ae58:	0c055001 	stceq	0, cr5, [r5], {1}
    ae5c:	400ca000 	andmi	sl, ip, r0
    ae60:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    ae64:	00007402 	andeq	r7, r0, r2, lsl #8
    ae68:	001e6214 	andseq	r6, lr, r4, lsl r2
    ae6c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    ae70:	01530115 	cmpeq	r3, r5, lsl r1
    ae74:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    ae78:	01153201 	tsteq	r5, r1, lsl #4
    ae7c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    ae80:	0c055001 	stceq	0, cr5, [r5], {1}
    ae84:	400ca000 	andmi	sl, ip, r0
    ae88:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    ae8c:	00007402 	andeq	r7, r0, r2, lsl #8
    ae90:	03d31100 	bicseq	r1, r3, #0, 2
    ae94:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    ae98:	002c0000 	eoreq	r0, ip, r0
    ae9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    aea0:	0000050d 	andeq	r0, r0, sp, lsl #10
    aea4:	0003e412 	andeq	lr, r3, r2, lsl r4
    aea8:	00312300 	eorseq	r2, r1, r0, lsl #6
    aeac:	03ef1700 	mvneq	r1, #0, 14
    aeb0:	50010000 	andpl	r0, r1, r0
    aeb4:	000f6018 	andeq	r6, pc, r8, lsl r0	; <UNPREDICTABLE>
    aeb8:	0004f400 	andeq	pc, r4, r0, lsl #8
    aebc:	03e41900 	mvneq	r1, #0, 18
    aec0:	1a040000 	bne	10aec8 <__ccfg+0xeaf20>
    aec4:	00000f60 	andeq	r0, r0, r0, ror #30
    aec8:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    aecc:	14000000 	strne	r0, [r0], #-0
    aed0:	00001ea8 	andeq	r1, r0, r8, lsr #29
    aed4:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    aed8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    aedc:	50011534 	andpl	r1, r1, r4, lsr r5
    aee0:	a0000c05 	andge	r0, r0, r5, lsl #24
    aee4:	0000400c 	andeq	r4, r0, ip
    aee8:	0029b51c 	eoreq	fp, r9, ip, lsl r5
    aeec:	01840200 	orreq	r0, r4, r0, lsl #4
    aef0:	000000ce 	andeq	r0, r0, lr, asr #1
    aef4:	00000000 	andeq	r0, r0, r0
    aef8:	00000090 	muleq	r0, r0, r0
    aefc:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    af00:	0b1d0000 	bleq	74af08 <__ccfg+0x72af60>
    af04:	01000028 	tsteq	r0, r8, lsr #32
    af08:	0000cec2 	andeq	ip, r0, r2, asr #29
    af0c:	00314400 	eorseq	r4, r1, r0, lsl #8
    af10:	277e1e00 	ldrbcs	r1, [lr, -r0, lsl #28]!
    af14:	c4010000 	strgt	r0, [r1], #-0
    af18:	000000ce 	andeq	r0, r0, lr, asr #1
    af1c:	00003170 	andeq	r3, r0, r0, ror r1
    af20:	0027971e 	eoreq	r9, r7, lr, lsl r7
    af24:	c3c50100 	bicgt	r0, r5, #0, 2
    af28:	83000000 	movwhi	r0, #0
    af2c:	1e000031 	mcrne	0, 0, r0, cr0, cr1, {1}
    af30:	00002507 	andeq	r2, r0, r7, lsl #10
    af34:	00cec601 	sbceq	ip, lr, r1, lsl #12
    af38:	31aa0000 			; <UNDEFINED> instruction: 0x31aa0000
    af3c:	001f0000 	andseq	r0, pc, r0
    af40:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    af44:	1f000008 	svcne	0x00000008
    af48:	00000000 	andeq	r0, r0, r0
    af4c:	000008aa 	andeq	r0, r0, sl, lsr #17
    af50:	25ab2000 	strcs	r2, [fp, #0]!
    af54:	91020000 	mrsls	r0, (UNDEF: 2)
    af58:	00000001 	andeq	r0, r0, r1
    af5c:	00001800 	andeq	r1, r0, r0, lsl #16
    af60:	ae9c0100 	fmlgee	f0, f4, f0
    af64:	21000005 	tstcs	r0, r5
    af68:	00000000 	andeq	r0, r0, r0
    af6c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    af70:	000005a4 	andeq	r0, r0, r4, lsr #11
    af74:	01510115 	cmpeq	r1, r5, lsl r1
    af78:	50011531 	andpl	r1, r1, r1, lsr r5
    af7c:	1f003301 	svcne	0x00003301
    af80:	00000000 	andeq	r0, r0, r0
    af84:	0000089e 	muleq	r0, lr, r8
    af88:	27d52200 	ldrbcs	r2, [r5, r0, lsl #4]
    af8c:	22020000 	andcs	r0, r2, #0
    af90:	0005bb01 	andeq	fp, r5, r1, lsl #22
    af94:	01020300 	mrseq	r0, LR_svc
    af98:	000f4102 	andeq	r4, pc, r2, lsl #2
    af9c:	282a2300 	stmdacs	sl!, {r8, r9, sp}
    afa0:	40020000 	andmi	r0, r2, r0
    afa4:	b91c0301 	ldmdblt	ip, {r0, r8, r9}
    afa8:	02000024 	andeq	r0, r0, #36	; 0x24
    afac:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    afb0:	00000000 	andeq	r0, r0, r0
    afb4:	00600000 	rsbeq	r0, r0, r0
    afb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    afbc:	00000677 	andeq	r0, r0, r7, ror r6
    afc0:	0027b624 	eoreq	fp, r7, r4, lsr #12
    afc4:	01020100 	mrseq	r0, (UNDEF: 18)
    afc8:	000000ce 	andeq	r0, r0, lr, asr #1
    afcc:	000031fe 	strdeq	r3, [r0], -lr
    afd0:	00288324 	eoreq	r8, r8, r4, lsr #6
    afd4:	01030100 	mrseq	r0, (UNDEF: 19)
    afd8:	000000ce 	andeq	r0, r0, lr, asr #1
    afdc:	00003211 	andeq	r3, r0, r1, lsl r2
    afe0:	0005ae25 	andeq	sl, r5, r5, lsr #28
    afe4:	00000000 	andeq	r0, r0, r0
    afe8:	00001000 	andeq	r1, r0, r0
    afec:	01090100 	mrseq	r0, (UNDEF: 25)
    aff0:	0000063c 	andeq	r0, r0, ip, lsr r6
    aff4:	00000014 	andeq	r0, r0, r4, lsl r0
    aff8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    affc:	01530115 	cmpeq	r3, r5, lsl r1
    b000:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    b004:	01153101 	tsteq	r5, r1, lsl #2
    b008:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    b00c:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    b010:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    b014:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    b018:	000005c2 	andeq	r0, r0, r2, asr #11
    b01c:	00000000 	andeq	r0, r0, r0
    b020:	00000008 	andeq	r0, r0, r8
    b024:	5a010a01 	bpl	4d830 <__ccfg+0x2d888>
    b028:	1f000006 	svcne	0x00000006
    b02c:	00000000 	andeq	r0, r0, r0
    b030:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    b034:	00002100 	andeq	r2, r0, r0, lsl #2
    b038:	03d30000 	bicseq	r0, r3, #0
    b03c:	066d0000 	strbteq	r0, [sp], -r0
    b040:	01150000 	tsteq	r5, r0
    b044:	00310150 	eorseq	r0, r1, r0, asr r1
    b048:	0000001f 	andeq	r0, r0, pc, lsl r0
    b04c:	00089e00 	andeq	r9, r8, r0, lsl #28
    b050:	10200000 	eorne	r0, r0, r0
    b054:	02000026 	andeq	r0, r0, #38	; 0x26
    b058:	000001ae 	andeq	r0, r0, lr, lsr #3
    b05c:	00340000 	eorseq	r0, r4, r0
    b060:	9c010000 	stcls	0, cr0, [r1], {-0}
    b064:	000006e9 	andeq	r0, r0, r9, ror #13
    b068:	0005c225 	andeq	ip, r5, r5, lsr #4
    b06c:	00000000 	andeq	r0, r0, r0
    b070:	00000800 	andeq	r0, r0, r0, lsl #16
    b074:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    b078:	000006ab 	andeq	r0, r0, fp, lsr #13
    b07c:	0000001f 	andeq	r0, r0, pc, lsl r0
    b080:	0008b500 	andeq	fp, r8, r0, lsl #10
    b084:	00210000 	eoreq	r0, r1, r0
    b088:	b0000000 	andlt	r0, r0, r0
    b08c:	c3000003 	movwgt	r0, #3
    b090:	15000006 	strne	r0, [r0, #-6]
    b094:	30015101 	andcc	r5, r1, r1, lsl #2
    b098:	01500115 	cmpeq	r0, r5, lsl r1
    b09c:	00210033 	eoreq	r0, r1, r3, lsr r0
    b0a0:	d3000000 	movwle	r0, #0
    b0a4:	d6000003 	strle	r0, [r0], -r3
    b0a8:	15000006 	strne	r0, [r0, #-6]
    b0ac:	31015001 	tstcc	r1, r1
    b0b0:	00001f00 	andeq	r1, r0, r0, lsl #30
    b0b4:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    b0b8:	001f0000 	andseq	r0, pc, r0
    b0bc:	aa000000 	bge	b0c4 <__exidx_end+0x848c>
    b0c0:	00000008 	andeq	r0, r0, r8
    b0c4:	00266a1c 	eoreq	r6, r6, ip, lsl sl
    b0c8:	01f20200 	mvnseq	r0, r0, lsl #4
    b0cc:	000000c3 	andeq	r0, r0, r3, asr #1
    b0d0:	00000000 	andeq	r0, r0, r0
    b0d4:	00000038 	andeq	r0, r0, r8, lsr r0
    b0d8:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    b0dc:	49260000 	stmdbmi	r6!, {}	; <UNPREDICTABLE>
    b0e0:	01000028 	tsteq	r0, r8, lsr #32
    b0e4:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    b0e8:	32240000 	eorcc	r0, r4, #0
    b0ec:	ac270000 	stcge	0, cr0, [r7], #-0
    b0f0:	01000027 	tsteq	r0, r7, lsr #32
    b0f4:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    b0f8:	51010000 	mrspl	r0, (UNDEF: 1)
    b0fc:	002a0f27 	eoreq	r0, sl, r7, lsr #30
    b100:	01410100 	mrseq	r0, (UNDEF: 81)
    b104:	000000c3 	andeq	r0, r0, r3, asr #1
    b108:	40007105 	andmi	r7, r0, r5, lsl #2
    b10c:	1a279f26 	bne	9f2dac <__ccfg+0x9d2e04>
    b110:	01000025 	tsteq	r0, r5, lsr #32
    b114:	00c30143 	sbceq	r0, r3, r3, asr #2
    b118:	71070000 	mrsvc	r0, (UNDEF: 7)
    b11c:	48244000 	stmdami	r4!, {lr}
    b120:	22279f26 	eorcs	r9, r7, #38, 30	; 0x98
    b124:	01000025 	tsteq	r0, r5, lsr #32
    b128:	00c30145 	sbceq	r0, r3, r5, asr #2
    b12c:	71070000 	mrsvc	r0, (UNDEF: 7)
    b130:	48244800 	stmdami	r4!, {fp, lr}
    b134:	2a249f26 	bcs	932dd4 <__ccfg+0x912e2c>
    b138:	01000025 	tsteq	r0, r5, lsr #32
    b13c:	00c30147 	sbceq	r0, r3, r7, asr #2
    b140:	32520000 	subscc	r0, r2, #0
    b144:	88240000 	stmdahi	r4!, {}	; <UNPREDICTABLE>
    b148:	01000025 	tsteq	r0, r5, lsr #32
    b14c:	00c30156 	sbceq	r0, r3, r6, asr r1
    b150:	326b0000 	rsbcc	r0, fp, #0
    b154:	51240000 			; <UNDEFINED> instruction: 0x51240000
    b158:	01000027 	tsteq	r0, r7, lsr #32
    b15c:	00c30157 	sbceq	r0, r3, r7, asr r1
    b160:	328e0000 	addcc	r0, lr, #0
    b164:	64280000 	strtvs	r0, [r8], #-0
    b168:	01580100 	cmpeq	r8, r0, lsl #2
    b16c:	000000c3 	andeq	r0, r0, r3, asr #1
    b170:	000032b7 			; <UNDEFINED> instruction: 0x000032b7
    b174:	28941c00 	ldmcs	r4, {sl, fp, ip}
    b178:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    b17c:	0000ad02 	andeq	sl, r0, r2, lsl #26
    b180:	00000000 	andeq	r0, r0, r0
    b184:	00000c00 	andeq	r0, r0, r0, lsl #24
    b188:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    b18c:	26000007 	strcs	r0, [r0], -r7
    b190:	0000276a 	andeq	r2, r0, sl, ror #14
    b194:	c3016301 	movwgt	r6, #4865	; 0x1301
    b198:	31000000 	mrscc	r0, (UNDEF: 0)
    b19c:	24000033 	strcs	r0, [r0], #-51	; 0xffffffcd
    b1a0:	00002943 	andeq	r2, r0, r3, asr #18
    b1a4:	c3018501 	movwgt	r8, #5377	; 0x1501
    b1a8:	52000000 	andpl	r0, r0, #0
    b1ac:	00000033 	andeq	r0, r0, r3, lsr r0
    b1b0:	0026941c 	eoreq	r9, r6, ip, lsl r4
    b1b4:	01c20200 	biceq	r0, r2, r0, lsl #4
    b1b8:	000000ce 	andeq	r0, r0, lr, asr #1
    b1bc:	00000000 	andeq	r0, r0, r0
    b1c0:	00000034 	andeq	r0, r0, r4, lsr r0
    b1c4:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    b1c8:	96240000 	strtls	r0, [r4], -r0
    b1cc:	01000029 	tsteq	r0, r9, lsr #32
    b1d0:	00ce0192 	smulleq	r0, lr, r2, r1
    b1d4:	33920000 	orrscc	r0, r2, #0
    b1d8:	7f240000 	svcvc	0x00240000
    b1dc:	01000018 	tsteq	r0, r8, lsl r0
    b1e0:	00ce0193 	smulleq	r0, lr, r3, r1
    b1e4:	33b40000 			; <UNDEFINED> instruction: 0x33b40000
    b1e8:	57240000 	strpl	r0, [r4, -r0]!
    b1ec:	01000026 	tsteq	r0, r6, lsr #32
    b1f0:	00ce0194 	smulleq	r0, lr, r4, r1
    b1f4:	33c70000 	biccc	r0, r7, #0
    b1f8:	f5240000 			; <UNDEFINED> instruction: 0xf5240000
    b1fc:	01000025 	tsteq	r0, r5, lsr #32
    b200:	00ce0195 	smulleq	r0, lr, r5, r1
    b204:	33ea0000 	mvncc	r0, #0
    b208:	001f0000 	andseq	r0, pc, r0
    b20c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    b210:	1f000008 	svcne	0x00000008
    b214:	00000000 	andeq	r0, r0, r0
    b218:	0000089e 	muleq	r0, lr, r8
    b21c:	29621c00 	stmdbcs	r2!, {sl, fp, ip}^
    b220:	d3020000 	movwle	r0, #8192	; 0x2000
    b224:	0000ce01 	andeq	ip, r0, r1, lsl #28
    b228:	00000000 	andeq	r0, r0, r0
    b22c:	00001c00 	andeq	r1, r0, r0, lsl #24
    b230:	8d9c0100 	ldfhis	f0, [ip]
    b234:	24000008 	strcs	r0, [r0], #-8
    b238:	000027e6 	andeq	r2, r0, r6, ror #15
    b23c:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    b240:	06000000 	streq	r0, [r0], -r0
    b244:	24000034 	strcs	r0, [r0], #-52	; 0xffffffcc
    b248:	00002954 	andeq	r2, r0, r4, asr r9
    b24c:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    b250:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    b254:	24000034 	strcs	r0, [r0], #-52	; 0xffffffcc
    b258:	00002592 	muleq	r0, r2, r5
    b25c:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    b260:	34000000 	strcc	r0, [r0], #-0
    b264:	00000034 	andeq	r0, r0, r4, lsr r0
    b268:	00275d29 	eoreq	r5, r7, r9, lsr #26
    b26c:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    b270:	05000003 	streq	r0, [r0, #-3]
    b274:	00000003 	andeq	r0, r0, r3
    b278:	23002a00 	movwcs	r2, #2560	; 0xa00
    b27c:	45070000 	strmi	r0, [r7, #-0]
    b280:	0000ce03 	andeq	ip, r0, r3, lsl #28
    b284:	21572b00 	cmpcs	r7, r0, lsl #22
    b288:	aa080000 	bge	20b290 <__ccfg+0x1eb2e8>
    b28c:	000000c3 	andeq	r0, r0, r3, asr #1
    b290:	0024fa2c 	eoreq	pc, r4, ip, lsr #20
    b294:	08990600 	ldmeq	r9, {r9, sl}
    b298:	000000d9 	ldrdeq	r0, [r0], -r9
    b29c:	02070000 	andeq	r0, r7, #0
    b2a0:	00040000 	andeq	r0, r4, r0
    b2a4:	00002c30 	andeq	r2, r0, r0, lsr ip
    b2a8:	21900104 	orrscs	r0, r0, r4, lsl #2
    b2ac:	d3010000 	movwle	r0, #4096	; 0x1000
    b2b0:	8500002a 	strhi	r0, [r0, #-42]	; 0xffffffd6
    b2b4:	d0000022 	andle	r0, r0, r2, lsr #32
    b2b8:	0000000f 	andeq	r0, r0, pc
    b2bc:	ca000000 	bgt	b2c4 <__exidx_end+0x868c>
    b2c0:	02000067 	andeq	r0, r0, #103	; 0x67
    b2c4:	06fd0601 	ldrbteq	r0, [sp], r1, lsl #12
    b2c8:	01020000 	mrseq	r0, (UNDEF: 2)
    b2cc:	0006fb08 	andeq	pc, r6, r8, lsl #22
    b2d0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    b2d4:	000005fe 	strdeq	r0, [r0], -lr
    b2d8:	a7070202 	strge	r0, [r7, -r2, lsl #4]
    b2dc:	02000007 	andeq	r0, r0, #7
    b2e0:	04c50504 	strbeq	r0, [r5], #1284	; 0x504
    b2e4:	12030000 	andne	r0, r3, #0
    b2e8:	03000007 	movweq	r0, #7
    b2ec:	00005341 	andeq	r5, r0, r1, asr #6
    b2f0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b2f4:	000002fa 	strdeq	r0, [r0], -sl
    b2f8:	c0050802 	andgt	r0, r5, r2, lsl #16
    b2fc:	02000004 	andeq	r0, r0, #4
    b300:	02f50708 	rscseq	r0, r5, #8, 14	; 0x200000
    b304:	04040000 	streq	r0, [r4], #-0
    b308:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    b30c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b310:	000002ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    b314:	00071403 	andeq	r1, r7, r3, lsl #8
    b318:	48200400 	stmdami	r0!, {sl}
    b31c:	05000000 	streq	r0, [r0, #-0]
    b320:	00002b30 	andeq	r2, r0, r0, lsr fp
    b324:	03033002 	movweq	r3, #12290	; 0x3002
    b328:	002b9b06 	eoreq	r9, fp, r6, lsl #22
    b32c:	01fd0100 	mvnseq	r0, r0, lsl #2
    b330:	002b4305 	eoreq	r4, fp, r5, lsl #6
    b334:	01820100 	orreq	r0, r2, r0, lsl #2
    b338:	2a1e0701 	bcs	78cf44 <__ccfg+0x76cf9c>
    b33c:	0d010000 	stceq	0, cr0, [r1, #-0]
    b340:	001eb401 	andseq	fp, lr, r1, lsl #8
    b344:	0000d400 	andeq	sp, r0, r0, lsl #8
    b348:	6d9c0100 	ldfvss	f0, [ip]
    b34c:	08000001 	stmdaeq	r0, {r0}
    b350:	00002b1e 	andeq	r2, r0, lr, lsl fp
    b354:	76010d01 	strvc	r0, [r1], -r1, lsl #26
    b358:	50000000 	andpl	r0, r0, r0
    b35c:	09000034 	stmdbeq	r0, {r2, r4, r5}
    b360:	00002b8a 	andeq	r2, r0, sl, lsl #23
    b364:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    b368:	7c000000 	stcvc	0, cr0, [r0], {-0}
    b36c:	09000034 	stmdbeq	r0, {r2, r4, r5}
    b370:	00002a17 	andeq	r2, r0, r7, lsl sl
    b374:	76011001 	strvc	r1, [r1], -r1
    b378:	8f000000 	svchi	0x00000000
    b37c:	0a000034 	beq	b454 <__exidx_end+0x881c>
    b380:	00000081 	andeq	r0, r0, r1, lsl #1
    b384:	00001ee6 	andeq	r1, r0, r6, ror #29
    b388:	00000006 	andeq	r0, r0, r6
    b38c:	0b013601 	bleq	58b98 <__ccfg+0x38bf0>
    b390:	00001f0c 	andeq	r1, r0, ip, lsl #30
    b394:	0000002a 	andeq	r0, r0, sl, lsr #32
    b398:	0000011f 	andeq	r0, r0, pc, lsl r1
    b39c:	002c1009 	eoreq	r1, ip, r9
    b3a0:	01530100 	cmpeq	r3, r0, lsl #2
    b3a4:	00000076 	andeq	r0, r0, r6, ror r0
    b3a8:	000034a8 	andeq	r3, r0, r8, lsr #9
    b3ac:	002b6c09 	eoreq	r6, fp, r9, lsl #24
    b3b0:	01540100 	cmpeq	r4, r0, lsl #2
    b3b4:	00000076 	andeq	r0, r0, r6, ror r0
    b3b8:	000034bb 			; <UNDEFINED> instruction: 0x000034bb
    b3bc:	1ef60c00 	cdpne	12, 15, cr0, cr6, cr0, {0}
    b3c0:	01c30000 	biceq	r0, r3, r0
    b3c4:	01330000 	teqeq	r3, r0
    b3c8:	010d0000 	mrseq	r0, (UNDEF: 13)
    b3cc:	00740250 	rsbseq	r0, r4, r0, asr r2
    b3d0:	1efe0c00 	cdpne	12, 15, cr0, cr14, cr0, {0}
    b3d4:	01d40000 	bicseq	r0, r4, r0
    b3d8:	014d0000 	mrseq	r0, (UNDEF: 77)
    b3dc:	010d0000 	mrseq	r0, (UNDEF: 13)
    b3e0:	00740251 	rsbseq	r0, r4, r1, asr r2
    b3e4:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    b3e8:	0c000075 	stceq	0, cr0, [r0], {117}	; 0x75
    b3ec:	00001f3c 	andeq	r1, r0, ip, lsr pc
    b3f0:	000001ea 	andeq	r0, r0, sl, ror #3
    b3f4:	00000161 	andeq	r0, r0, r1, ror #2
    b3f8:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    b3fc:	0e000074 	mcreq	0, 0, r0, cr0, cr4, {3}
    b400:	00001f46 	andeq	r1, r0, r6, asr #30
    b404:	0150010d 	cmpeq	r0, sp, lsl #2
    b408:	0f000032 	svceq	0x00000032
    b40c:	00002b56 	andeq	r2, r0, r6, asr fp
    b410:	1f885f07 	svcne	0x00885f07
    b414:	00a40000 	adceq	r0, r4, r0
    b418:	9c010000 	stcls	0, cr0, [r1], {-0}
    b41c:	000001c3 	andeq	r0, r0, r3, asr #3
    b420:	002b1e10 	eoreq	r1, fp, r0, lsl lr
    b424:	76720100 	ldrbtvc	r0, [r2], -r0, lsl #2
    b428:	e6000000 	str	r0, [r0], -r0
    b42c:	10000034 	andne	r0, r0, r4, lsr r0
    b430:	00002b77 	andeq	r2, r0, r7, ror fp
    b434:	00767301 	rsbseq	r7, r6, r1, lsl #6
    b438:	34f90000 	ldrbtcc	r0, [r9], #0
    b43c:	98110000 	ldmdals	r1, {}	; <UNPREDICTABLE>
    b440:	fb00001f 	blx	b4c6 <__exidx_end+0x888e>
    b444:	11000001 	tstne	r0, r1
    b448:	00001fac 	andeq	r1, r0, ip, lsr #31
    b44c:	00000203 	andeq	r0, r0, r3, lsl #4
    b450:	001fbc12 	andseq	fp, pc, r2, lsl ip	; <UNPREDICTABLE>
    b454:	00009b00 	andeq	r9, r0, r0, lsl #22
    b458:	50010d00 	andpl	r0, r1, r0, lsl #26
    b45c:	00007402 	andeq	r7, r0, r2, lsl #8
    b460:	2a431300 	bcs	10d0068 <__ccfg+0x10b00c0>
    b464:	6c050000 	stcvs	0, cr0, [r5], {-0}
    b468:	000001d4 	ldrdeq	r0, [r0], -r4
    b46c:	00007614 	andeq	r7, r0, r4, lsl r6
    b470:	73130000 	tstvc	r3, #0
    b474:	0500002a 	streq	r0, [r0, #-42]	; 0xffffffd6
    b478:	0001ea73 	andeq	lr, r1, r3, ror sl
    b47c:	00761400 	rsbseq	r1, r6, r0, lsl #8
    b480:	76140000 	ldrvc	r0, [r4], -r0
    b484:	00000000 	andeq	r0, r0, r0
    b488:	002aa313 	eoreq	sl, sl, r3, lsl r3
    b48c:	fb7a0500 	blx	1e8c896 <__ccfg+0x1e6c8ee>
    b490:	14000001 	strne	r0, [r0], #-1
    b494:	00000076 	andeq	r0, r0, r6, ror r0
    b498:	2bd31500 	blcs	ff4d08a0 <_estack+0xdf4cb8a0>
    b49c:	43060000 	movwmi	r0, #24576	; 0x6000
    b4a0:	2af01602 	bcs	ffc10cb0 <_estack+0xdfc0bcb0>
    b4a4:	fd050000 	stc2	0, cr0, [r5, #-0]
    b4a8:	000b1700 	andeq	r1, fp, r0, lsl #14
    b4ac:	72000400 	andvc	r0, r0, #0, 8
    b4b0:	0400002d 	streq	r0, [r0], #-45	; 0xffffffd3
    b4b4:	00219001 	eoreq	r9, r1, r1
    b4b8:	2e530100 	rdfcss	f0, f3, f0
    b4bc:	22850000 	addcs	r0, r5, #0
    b4c0:	10180000 	andsne	r0, r8, r0
    b4c4:	00000000 	andeq	r0, r0, r0
    b4c8:	69b70000 	ldmibvs	r7!, {}	; <UNPREDICTABLE>
    b4cc:	01020000 	mrseq	r0, (UNDEF: 2)
    b4d0:	0006fd06 	andeq	pc, r6, r6, lsl #26
    b4d4:	08010200 	stmdaeq	r1, {r9}
    b4d8:	000006fb 	strdeq	r0, [r0], -fp
    b4dc:	fe050202 	cdp2	2, 0, cr0, cr5, cr2, {0}
    b4e0:	02000005 	andeq	r0, r0, #5
    b4e4:	07a70702 	streq	r0, [r7, r2, lsl #14]!
    b4e8:	86030000 	strhi	r0, [r3], -r0
    b4ec:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    b4f0:	00004c3f 	andeq	r4, r0, pc, lsr ip
    b4f4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    b4f8:	000004c5 	andeq	r0, r0, r5, asr #9
    b4fc:	00071203 	andeq	r1, r7, r3, lsl #4
    b500:	5e410400 	cdppl	4, 4, cr0, cr1, cr0, {0}
    b504:	02000000 	andeq	r0, r0, #0
    b508:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    b50c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    b510:	0004c005 	andeq	ip, r4, r5
    b514:	07080200 	streq	r0, [r8, -r0, lsl #4]
    b518:	000002f5 	strdeq	r0, [r0], -r5
    b51c:	69050404 	stmdbvs	r5, {r2, sl}
    b520:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    b524:	02ff0704 	rscseq	r0, pc, #4, 14	; 0x100000
    b528:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    b52c:	05000021 	streq	r0, [r0, #-33]	; 0xffffffdf
    b530:	0000411f 	andeq	r4, r0, pc, lsl r1
    b534:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    b538:	20050000 	andcs	r0, r5, r0
    b53c:	00000053 	andeq	r0, r0, r3, asr r0
    b540:	002ee605 	eoreq	lr, lr, r5, lsl #12
    b544:	81e90200 	mvnhi	r0, r0, lsl #4
    b548:	03000000 	movweq	r0, #0
    b54c:	000000be 	strheq	r0, [r0], -lr
    b550:	002c3606 	eoreq	r3, ip, r6, lsl #12
    b554:	8ce90200 	sfmhi	f0, 2, [r9]
    b558:	07000000 	streq	r0, [r0, -r0]
    b55c:	00002f3f 	andeq	r2, r0, pc, lsr pc
    b560:	0081ef02 	addeq	lr, r1, r2, lsl #30
    b564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b568:	00002c6b 	andeq	r2, r0, fp, ror #24
    b56c:	008cab02 	addeq	sl, ip, r2, lsl #22
    b570:	e7010000 	str	r0, [r1, -r0]
    b574:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b578:	00002b1e 	andeq	r2, r0, lr, lsl fp
    b57c:	8c032901 			; <UNDEFINED> instruction: 0x8c032901
    b580:	0a000000 	beq	b588 <__exidx_end+0x8950>
    b584:	00002fc8 	andeq	r2, r0, r8, asr #31
    b588:	8c032b01 			; <UNDEFINED> instruction: 0x8c032b01
    b58c:	00000000 	andeq	r0, r0, r0
    b590:	002f1e08 	eoreq	r1, pc, r8, lsl #28
    b594:	8c810200 	sfmhi	f0, 4, [r1], {0}
    b598:	01000000 	mrseq	r0, (UNDEF: 0)
    b59c:	00000110 	andeq	r0, r0, r0, lsl r1
    b5a0:	002b1e09 	eoreq	r1, fp, r9, lsl #28
    b5a4:	033c0100 	teqeq	ip, #0, 2
    b5a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    b5ac:	002f8f0a 	eoreq	r8, pc, sl, lsl #30
    b5b0:	033e0100 	teqeq	lr, #0, 2
    b5b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    b5b8:	2dcc0800 	stclcs	8, cr0, [ip]
    b5bc:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    b5c0:	0000008c 	andeq	r0, r0, ip, lsl #1
    b5c4:	00013901 	andeq	r3, r1, r1, lsl #18
    b5c8:	2b1e0900 	blcs	78d9d0 <__ccfg+0x76da28>
    b5cc:	4f010000 	svcmi	0x00010000
    b5d0:	00008c03 	andeq	r8, r0, r3, lsl #24
    b5d4:	2f030a00 	svccs	0x00030a00
    b5d8:	51010000 	mrspl	r0, (UNDEF: 1)
    b5dc:	00008c03 	andeq	r8, r0, r3, lsl #24
    b5e0:	30080000 	andcc	r0, r8, r0
    b5e4:	0200002d 	andeq	r0, r0, #45	; 0x2d
    b5e8:	00008cc8 	andeq	r8, r0, r8, asr #25
    b5ec:	016e0100 	cmneq	lr, r0, lsl #2
    b5f0:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    b5f4:	0100002b 	tsteq	r0, fp, lsr #32
    b5f8:	008c0362 	addeq	r0, ip, r2, ror #6
    b5fc:	c00a0000 	andgt	r0, sl, r0
    b600:	0100002c 	tsteq	r0, ip, lsr #32
    b604:	008c0364 	addeq	r0, ip, r4, ror #6
    b608:	010a0000 	mrseq	r0, (UNDEF: 10)
    b60c:	0100002e 	tsteq	r0, lr, lsr #32
    b610:	008c0365 	addeq	r0, ip, r5, ror #6
    b614:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b618:	00002e33 	andeq	r2, r0, r3, lsr lr
    b61c:	008cb202 	addeq	fp, ip, r2, lsl #4
    b620:	a3010000 	movwge	r0, #4096	; 0x1000
    b624:	09000001 	stmdbeq	r0, {r0}
    b628:	00002b1e 	andeq	r2, r0, lr, lsl fp
    b62c:	8c039401 	cfstrshi	mvf9, [r3], {1}
    b630:	0a000000 	beq	b638 <__exidx_end+0x8a00>
    b634:	00002d4f 	andeq	r2, r0, pc, asr #26
    b638:	8c039601 	stchi	6, cr9, [r3], {1}
    b63c:	0a000000 	beq	b644 <__exidx_end+0x8a0c>
    b640:	00002e01 	andeq	r2, r0, r1, lsl #28
    b644:	8c039701 	stchi	7, cr9, [r3], {1}
    b648:	00000000 	andeq	r0, r0, r0
    b64c:	002cfe08 	eoreq	pc, ip, r8, lsl #28
    b650:	8cb90200 	lfmhi	f0, 4, [r9]
    b654:	01000000 	mrseq	r0, (UNDEF: 0)
    b658:	000001cc 	andeq	r0, r0, ip, asr #3
    b65c:	002b1e09 	eoreq	r1, fp, r9, lsl #28
    b660:	03b40100 			; <UNDEFINED> instruction: 0x03b40100
    b664:	0000008c 	andeq	r0, r0, ip, lsl #1
    b668:	002e0b0a 	eoreq	r0, lr, sl, lsl #22
    b66c:	03b60100 			; <UNDEFINED> instruction: 0x03b60100
    b670:	0000008c 	andeq	r0, r0, ip, lsl #1
    b674:	2ea90800 	cdpcs	8, 10, cr0, cr9, cr0, {0}
    b678:	df020000 	svcle	0x00020000
    b67c:	0000008c 	andeq	r0, r0, ip, lsl #1
    b680:	0001f501 	andeq	pc, r1, r1, lsl #10
    b684:	2b1e0900 	blcs	78da8c <__ccfg+0x76dae4>
    b688:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    b68c:	00008c03 	andeq	r8, r0, r3, lsl #24
    b690:	2fe80a00 	svccs	0x00e80a00
    b694:	ca010000 	bgt	4b69c <__ccfg+0x2b6f4>
    b698:	00008c03 	andeq	r8, r0, r3, lsl #24
    b69c:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    b6a0:	0200002f 	andeq	r0, r0, #47	; 0x2f
    b6a4:	00008cd7 	ldrdeq	r8, [r0], -r7
    b6a8:	02120100 	andseq	r0, r2, #0, 2
    b6ac:	9b0a0000 	blls	28b6b4 <__ccfg+0x26b70c>
    b6b0:	01000030 	tsteq	r0, r0, lsr r0
    b6b4:	008c0283 	addeq	r0, ip, r3, lsl #5
    b6b8:	0b000000 	bleq	b6c0 <__exidx_end+0x8a88>
    b6bc:	00000baa 	andeq	r0, r0, sl, lsr #23
    b6c0:	0c03c403 	cfstrseq	mvf12, [r3], {3}
    b6c4:	00003078 	andeq	r3, r0, r8, ror r0
    b6c8:	2c010f02 	stccs	15, cr0, [r1], {2}
    b6cc:	7c000020 	stcvc	0, cr0, [r0], {32}
    b6d0:	01000000 	mrseq	r0, (UNDEF: 0)
    b6d4:	0002c49c 	muleq	r2, ip, r4
    b6d8:	2b8a0d00 	blcs	fe28eae0 <_estack+0xde289ae0>
    b6dc:	7f010000 	svcvc	0x00010000
    b6e0:	0000008c 	andeq	r0, r0, ip, lsl #1
    b6e4:	0000350c 	andeq	r3, r0, ip, lsl #10
    b6e8:	00309007 	eorseq	r9, r0, r7
    b6ec:	8c810100 	stfhis	f0, [r1], {0}
    b6f0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    b6f4:	00002e28 	andeq	r2, r0, r8, lsr #28
    b6f8:	00818201 	addeq	r8, r1, r1, lsl #4
    b6fc:	52010000 	andpl	r0, r1, #0
    b700:	002c9b0f 	eoreq	r9, ip, pc, lsl #22
    b704:	81830100 	orrhi	r0, r3, r0, lsl #2
    b708:	2d000000 	stccs	0, cr0, [r0, #-0]
    b70c:	0f000035 	svceq	0x00000035
    b710:	00002d69 	andeq	r2, r0, r9, ror #26
    b714:	00818401 	addeq	r8, r1, r1, lsl #8
    b718:	35400000 	strbcc	r0, [r0, #-0]
    b71c:	97100000 	ldrls	r0, [r0, -r0]
    b720:	3a000000 	bcc	b728 <__exidx_end+0x8af0>
    b724:	e8000020 	stmda	r0, {r5}
    b728:	0100000f 	tsteq	r0, pc
    b72c:	00029b97 	muleq	r2, r7, fp
    b730:	00a71100 	adceq	r1, r7, r0, lsl #2
    b734:	e8120000 	ldmda	r2, {}	; <UNPREDICTABLE>
    b738:	1300000f 	movwne	r0, #15
    b73c:	000000b2 	strheq	r0, [r0], -r2
    b740:	00005201 	andeq	r5, r0, r1, lsl #4
    b744:	00009714 	andeq	r9, r0, r4, lsl r7
    b748:	00204400 	eoreq	r4, r0, r0, lsl #8
    b74c:	00000600 	andeq	r0, r0, r0, lsl #12
    b750:	11980100 	orrsne	r0, r8, r0, lsl #2
    b754:	000000a7 	andeq	r0, r0, r7, lsr #1
    b758:	00204415 	eoreq	r4, r0, r5, lsl r4
    b75c:	00000600 	andeq	r0, r0, r0, lsl #12
    b760:	00b21600 	adcseq	r1, r2, r0, lsl #12
    b764:	356e0000 	strbcc	r0, [lr, #-0]!
    b768:	00000000 	andeq	r0, r0, r0
    b76c:	2a431700 	bcs	10d1374 <__ccfg+0x10b13cc>
    b770:	6c020000 	stcvs	0, cr0, [r2], {-0}
    b774:	000020a8 	andeq	r2, r0, r8, lsr #1
    b778:	000000ac 	andeq	r0, r0, ip, lsr #1
    b77c:	03439c01 	movteq	r9, #15361	; 0x3c01
    b780:	8a0d0000 	bhi	34b788 <__ccfg+0x32b7e0>
    b784:	0100002b 	tsteq	r0, fp, lsr #32
    b788:	00008cbf 			; <UNDEFINED> instruction: 0x00008cbf
    b78c:	00358100 	eorseq	r8, r5, r0, lsl #2
    b790:	2faa0f00 	svccs	0x00aa0f00
    b794:	c1010000 	mrsgt	r0, (UNDEF: 1)
    b798:	00000081 	andeq	r0, r0, r1, lsl #1
    b79c:	000035b5 			; <UNDEFINED> instruction: 0x000035b5
    b7a0:	0030c00f 	eorseq	ip, r0, pc
    b7a4:	81c20100 	bichi	r0, r2, r0, lsl #2
    b7a8:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    b7ac:	18000035 	stmdane	r0, {r0, r2, r4, r5}
    b7b0:	00000097 	muleq	r0, r7, r0
    b7b4:	000020de 	ldrdeq	r2, [r0], -lr
    b7b8:	00000006 	andeq	r0, r0, r6
    b7bc:	0332ee01 	teqeq	r2, #1, 28
    b7c0:	a7110000 	ldrge	r0, [r1, -r0]
    b7c4:	15000000 	strne	r0, [r0, #-0]
    b7c8:	000020de 	ldrdeq	r2, [r0], -lr
    b7cc:	00000006 	andeq	r0, r0, r6
    b7d0:	0000b216 	andeq	fp, r0, r6, lsl r2
    b7d4:	00360500 	eorseq	r0, r6, r0, lsl #10
    b7d8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    b7dc:	000020cc 	andeq	r2, r0, ip, asr #1
    b7e0:	0000021a 	andeq	r0, r0, sl, lsl r2
    b7e4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    b7e8:	00000074 	andeq	r0, r0, r4, ror r0
    b7ec:	002c461b 	eoreq	r4, ip, fp, lsl r6
    b7f0:	8ca40200 	sfmhi	f0, 4, [r4]
    b7f4:	54000000 	strpl	r0, [r0], #-0
    b7f8:	5c000021 	stcpl	0, cr0, [r0], {33}	; 0x21
    b7fc:	01000000 	mrseq	r0, (UNDEF: 0)
    b800:	0003bd9c 	muleq	r3, ip, sp
    b804:	2b8a1c00 	blcs	fe29280c <_estack+0xde28d80c>
    b808:	1f010000 	svcne	0x00010000
    b80c:	00008c02 	andeq	r8, r0, r2, lsl #24
    b810:	00361800 	eorseq	r1, r6, r0, lsl #16
    b814:	2f5a1d00 	svccs	0x005a1d00
    b818:	21010000 	mrscs	r0, (UNDEF: 1)
    b81c:	00008c02 	andeq	r8, r0, r2, lsl #24
    b820:	00363900 	eorseq	r3, r6, r0, lsl #18
    b824:	305c1d00 	subscc	r1, ip, r0, lsl #26
    b828:	22010000 	andcs	r0, r1, #0
    b82c:	00008c02 	andeq	r8, r0, r2, lsl #24
    b830:	00364c00 	eorseq	r4, r6, r0, lsl #24
    b834:	306a1d00 	rsbcc	r1, sl, r0, lsl #26
    b838:	23010000 	movwcs	r0, #4096	; 0x1000
    b83c:	00008c02 	andeq	r8, r0, r2, lsl #24
    b840:	00369a00 	eorseq	r9, r6, r0, lsl #20
    b844:	30a91d00 	adccc	r1, r9, r0, lsl #26
    b848:	24010000 	strcs	r0, [r1], #-0
    b84c:	00008102 	andeq	r8, r0, r2, lsl #2
    b850:	00370200 	eorseq	r0, r7, r0, lsl #4
    b854:	309b1d00 	addscc	r1, fp, r0, lsl #26
    b858:	25010000 	strcs	r0, [r1, #-0]
    b85c:	00008c02 	andeq	r8, r0, r2, lsl #24
    b860:	00372100 	eorseq	r2, r7, r0, lsl #2
    b864:	7e1b0000 	cdpvc	0, 1, cr0, cr11, cr0, {0}
    b868:	0200002e 	andeq	r0, r0, #46	; 0x2e
    b86c:	00008cc1 	andeq	r8, r0, r1, asr #25
    b870:	0021b000 	eoreq	fp, r1, r0
    b874:	00001800 	andeq	r1, r0, r0, lsl #16
    b878:	e79c0100 	ldr	r0, [ip, r0, lsl #2]
    b87c:	1d000003 	stcne	0, cr0, [r0, #-12]
    b880:	0000309b 	muleq	r0, fp, r0
    b884:	8c026701 	stchi	7, cr6, [r2], {1}
    b888:	46000000 	strmi	r0, [r0], -r0
    b88c:	00000037 	andeq	r0, r0, r7, lsr r0
    b890:	0001f51e 	andeq	pc, r1, lr, lsl r5	; <UNPREDICTABLE>
    b894:	00000000 	andeq	r0, r0, r0
    b898:	00001000 	andeq	r1, r0, r0
    b89c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    b8a0:	16000004 	strne	r0, [r0], -r4
    b8a4:	00000205 	andeq	r0, r0, r5, lsl #4
    b8a8:	0000376d 	andeq	r3, r0, sp, ror #14
    b8ac:	2dac1b00 			; <UNDEFINED> instruction: 0x2dac1b00
    b8b0:	9d020000 	stcls	0, cr0, [r2, #-0]
    b8b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    b8b8:	000021c8 	andeq	r2, r0, r8, asr #3
    b8bc:	00000010 	andeq	r0, r0, r0, lsl r0
    b8c0:	043e9c01 	ldrteq	r9, [lr], #-3073	; 0xfffff3ff
    b8c4:	9b1d0000 	blls	74b8cc <__ccfg+0x72b924>
    b8c8:	01000030 	tsteq	r0, r0, lsr r0
    b8cc:	008c0297 	umulleq	r0, ip, r7, r2
    b8d0:	37860000 	strcc	r0, [r6, r0]
    b8d4:	5a1d0000 	bpl	74b8dc <__ccfg+0x72b934>
    b8d8:	0100002f 	tsteq	r0, pc, lsr #32
    b8dc:	008c0298 	umulleq	r0, ip, r8, r2
    b8e0:	37a70000 	strcc	r0, [r7, r0]!
    b8e4:	1b000000 	blne	b8ec <__exidx_end+0x8cb4>
    b8e8:	00002d8c 	andeq	r2, r0, ip, lsl #27
    b8ec:	008c9602 	addeq	r9, ip, r2, lsl #12
    b8f0:	21d80000 	bicscs	r0, r8, r0
    b8f4:	00140000 	andseq	r0, r4, r0
    b8f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    b8fc:	00000478 	andeq	r0, r0, r8, ror r4
    b900:	00309b1d 	eorseq	r9, r0, sp, lsl fp
    b904:	02ba0100 	adcseq	r0, sl, #0, 2
    b908:	0000008c 	andeq	r0, r0, ip, lsl #1
    b90c:	000037ba 			; <UNDEFINED> instruction: 0x000037ba
    b910:	002f5a1d 	eoreq	r5, pc, sp, lsl sl	; <UNPREDICTABLE>
    b914:	02bb0100 	adcseq	r0, fp, #0, 2
    b918:	0000008c 	andeq	r0, r0, ip, lsl #1
    b91c:	000037db 	ldrdeq	r3, [r0], -fp
    b920:	303b1b00 	eorscc	r1, fp, r0, lsl #22
    b924:	8f020000 	svchi	0x00020000
    b928:	0000008c 	andeq	r0, r0, ip, lsl #1
    b92c:	000021ec 	andeq	r2, r0, ip, ror #3
    b930:	00000064 	andeq	r0, r0, r4, rrx
    b934:	04fe9c01 	ldrbteq	r9, [lr], #3073	; 0xc01
    b938:	1e1c0000 	cdpne	0, 1, cr0, cr12, cr0, {0}
    b93c:	0100002b 	tsteq	r0, fp, lsr #32
    b940:	008c02db 	ldrdeq	r0, [ip], fp
    b944:	37ee0000 	strbcc	r0, [lr, r0]!
    b948:	9b1d0000 	blls	74b950 <__ccfg+0x72b9a8>
    b94c:	01000030 	tsteq	r0, r0, lsr r0
    b950:	008c02dd 	ldrdeq	r0, [ip], sp
    b954:	380f0000 	stmdacc	pc, {}	; <UNPREDICTABLE>
    b958:	5a1d0000 	bpl	74b960 <__ccfg+0x72b9b8>
    b95c:	0100002f 	tsteq	r0, pc, lsr #32
    b960:	008c02de 	ldrdeq	r0, [ip], lr
    b964:	38430000 	stmdacc	r3, {}^	; <UNPREDICTABLE>
    b968:	b41d0000 	ldrlt	r0, [sp], #-0
    b96c:	0100002c 	tsteq	r0, ip, lsr #32
    b970:	008c02df 	ldrdeq	r0, [ip], pc	; <UNPREDICTABLE>
    b974:	38560000 	ldmdacc	r6, {}^	; <UNPREDICTABLE>
    b978:	131d0000 	tstne	sp, #0
    b97c:	01000030 	tsteq	r0, r0, lsr r0
    b980:	008c02e0 	addeq	r0, ip, r0, ror #5
    b984:	38840000 	stmcc	r4, {}	; <UNPREDICTABLE>
    b988:	500a0000 	andpl	r0, sl, r0
    b98c:	0100002f 	tsteq	r0, pc, lsr #32
    b990:	008c02e1 	addeq	r0, ip, r1, ror #5
    b994:	241d0000 	ldrcs	r0, [sp], #-0
    b998:	0100002d 	tsteq	r0, sp, lsr #32
    b99c:	008102e2 	addeq	r0, r1, r2, ror #5
    b9a0:	38b20000 	ldmcc	r2!, {}	; <UNPREDICTABLE>
    b9a4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    b9a8:	000000be 	strheq	r0, [r0], -lr
    b9ac:	00002250 	andeq	r2, r0, r0, asr r2
    b9b0:	00000014 	andeq	r0, r0, r4, lsl r0
    b9b4:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xfffff3ff
    b9b8:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    b9bc:	2d000000 	stccs	0, cr0, [r0, #-0]
    b9c0:	16000039 			; <UNDEFINED> instruction: 0x16000039
    b9c4:	000000da 	ldrdeq	r0, [r0], -sl
    b9c8:	0000394e 	andeq	r3, r0, lr, asr #18
    b9cc:	00225215 	eoreq	r5, r2, r5, lsl r2
    b9d0:	00000a00 	andeq	r0, r0, r0, lsl #20
    b9d4:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    b9d8:	396d0000 	stmdbcc	sp!, {}^	; <UNPREDICTABLE>
    b9dc:	52150000 	andspl	r0, r5, #0
    b9e0:	0a000022 	beq	ba70 <__exidx_end+0x8e38>
    b9e4:	16000000 	strne	r0, [r0], -r0
    b9e8:	000000da 	ldrdeq	r0, [r0], -sl
    b9ec:	0000398e 	andeq	r3, r0, lr, lsl #19
    b9f0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    b9f4:	000000e7 	andeq	r0, r0, r7, ror #1
    b9f8:	00002264 	andeq	r2, r0, r4, ror #4
    b9fc:	00000014 	andeq	r0, r0, r4, lsl r0
    ba00:	05969c01 	ldreq	r9, [r6, #3073]	; 0xc01
    ba04:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    ba08:	a1000000 	mrsge	r0, (UNDEF: 0)
    ba0c:	16000039 			; <UNDEFINED> instruction: 0x16000039
    ba10:	00000103 	andeq	r0, r0, r3, lsl #2
    ba14:	000039c2 	andeq	r3, r0, r2, asr #19
    ba18:	00226615 	eoreq	r6, r2, r5, lsl r6
    ba1c:	00000a00 	andeq	r0, r0, r0, lsl #20
    ba20:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    ba24:	39e10000 	stmibcc	r1!, {}^	; <UNPREDICTABLE>
    ba28:	66150000 	ldrvs	r0, [r5], -r0
    ba2c:	0a000022 	beq	babc <__exidx_end+0x8e84>
    ba30:	16000000 	strne	r0, [r0], -r0
    ba34:	00000103 	andeq	r0, r0, r3, lsl #2
    ba38:	00003a02 	andeq	r3, r0, r2, lsl #20
    ba3c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    ba40:	00000110 	andeq	r0, r0, r0, lsl r1
    ba44:	00002278 	andeq	r2, r0, r8, ror r2
    ba48:	00000014 	andeq	r0, r0, r4, lsl r0
    ba4c:	05e29c01 	strbeq	r9, [r2, #3073]!	; 0xc01
    ba50:	201f0000 	andscs	r0, pc, r0
    ba54:	15000001 	strne	r0, [r0, #-1]
    ba58:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    ba5c:	0000012c 	andeq	r0, r0, ip, lsr #2
    ba60:	00003a36 	andeq	r3, r0, r6, lsr sl
    ba64:	00227a15 	eoreq	r7, r2, r5, lsl sl
    ba68:	00000a00 	andeq	r0, r0, r0, lsl #20
    ba6c:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    ba70:	3a550000 	bcc	154ba78 <__ccfg+0x152bad0>
    ba74:	7a150000 	bvc	54ba7c <__ccfg+0x52bad4>
    ba78:	0a000022 	beq	bb08 <__exidx_end+0x8ed0>
    ba7c:	16000000 	strne	r0, [r0], -r0
    ba80:	0000012c 	andeq	r0, r0, ip, lsr #2
    ba84:	00003a76 	andeq	r3, r0, r6, ror sl
    ba88:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    ba8c:	00000139 	andeq	r0, r0, r9, lsr r1
    ba90:	0000228c 	andeq	r2, r0, ip, lsl #5
    ba94:	00000028 	andeq	r0, r0, r8, lsr #32
    ba98:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    ba9c:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    baa0:	89000001 	stmdbhi	r0, {r0}
    baa4:	1600003a 			; <UNDEFINED> instruction: 0x1600003a
    baa8:	00000155 	andeq	r0, r0, r5, asr r1
    baac:	00003aaa 	andeq	r3, r0, sl, lsr #21
    bab0:	00016120 	andeq	r6, r1, r0, lsr #2
    bab4:	228e1500 	addcs	r1, lr, #0, 10
    bab8:	001c0000 	andseq	r0, ip, r0
    babc:	491f0000 	ldmdbmi	pc, {}	; <UNPREDICTABLE>
    bac0:	c9000001 	stmdbgt	r0, {r0}
    bac4:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    bac8:	0000228e 	andeq	r2, r0, lr, lsl #5
    bacc:	0000001c 	andeq	r0, r0, ip, lsl r0
    bad0:	00015516 	andeq	r5, r1, r6, lsl r5
    bad4:	003aea00 	eorseq	lr, sl, r0, lsl #20
    bad8:	01611600 	cmneq	r1, r0, lsl #12
    badc:	3b170000 	blcc	5cbae4 <__ccfg+0x5abb3c>
    bae0:	00000000 	andeq	r0, r0, r0
    bae4:	2cd91b00 	vldmiacs	r9, {d17-d16}
    bae8:	cf020000 	svcgt	0x00020000
    baec:	0000008c 	andeq	r0, r0, ip, lsl #1
    baf0:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    baf4:	00000010 	andeq	r0, r0, r0, lsl r0
    baf8:	06669c01 	strbteq	r9, [r6], -r1, lsl #24
    bafc:	731d0000 	tstvc	sp, #0
    bb00:	0100002d 	tsteq	r0, sp, lsr #32
    bb04:	008c0384 	addeq	r0, ip, r4, lsl #7
    bb08:	3b2a0000 	blcc	a8bb10 <__ccfg+0xa6bb68>
    bb0c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    bb10:	0000016e 	andeq	r0, r0, lr, ror #2
    bb14:	000022c4 	andeq	r2, r0, r4, asr #5
    bb18:	0000002c 	andeq	r0, r0, ip, lsr #32
    bb1c:	06c09c01 	strbeq	r9, [r0], r1, lsl #24
    bb20:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    bb24:	45000001 	strmi	r0, [r0, #-1]
    bb28:	1600003b 			; <UNDEFINED> instruction: 0x1600003b
    bb2c:	0000018a 	andeq	r0, r0, sl, lsl #3
    bb30:	00003b66 	andeq	r3, r0, r6, ror #22
    bb34:	00019620 	andeq	r9, r1, r0, lsr #12
    bb38:	22c61500 	sbccs	r1, r6, #0, 10
    bb3c:	001e0000 	andseq	r0, lr, r0
    bb40:	7e1f0000 	cdpvc	0, 1, cr0, cr15, cr0, {0}
    bb44:	89000001 	stmdbhi	r0, {r0}
    bb48:	1500003b 	strne	r0, [r0, #-59]	; 0xffffffc5
    bb4c:	000022c6 	andeq	r2, r0, r6, asr #5
    bb50:	0000001e 	andeq	r0, r0, lr, lsl r0
    bb54:	00018a16 	andeq	r8, r1, r6, lsl sl
    bb58:	003baa00 	eorseq	sl, fp, r0, lsl #20
    bb5c:	01961600 	orrseq	r1, r6, r0, lsl #12
    bb60:	3bd70000 	blcc	ff5cbb68 <_estack+0xdf5c6b68>
    bb64:	00000000 	andeq	r0, r0, r0
    bb68:	01a31e00 			; <UNDEFINED> instruction: 0x01a31e00
    bb6c:	22f00000 	rscscs	r0, r0, #0
    bb70:	00140000 	andseq	r0, r4, r0
    bb74:	9c010000 	stcls	0, cr0, [r1], {-0}
    bb78:	0000070c 	andeq	r0, r0, ip, lsl #14
    bb7c:	0001b31f 	andeq	fp, r1, pc, lsl r3
    bb80:	003bea00 	eorseq	lr, fp, r0, lsl #20
    bb84:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    bb88:	3c0b0000 	stccc	0, cr0, [fp], {-0}
    bb8c:	f2150000 	vhadd.s16	d0, d5, d0
    bb90:	0a000022 	beq	bc20 <__exidx_end+0x8fe8>
    bb94:	1f000000 	svcne	0x00000000
    bb98:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    bb9c:	00003c2a 	andeq	r3, r0, sl, lsr #24
    bba0:	0022f215 	eoreq	pc, r2, r5, lsl r2	; <UNPREDICTABLE>
    bba4:	00000a00 	andeq	r0, r0, r0, lsl #20
    bba8:	01bf1600 			; <UNDEFINED> instruction: 0x01bf1600
    bbac:	3c4b0000 	marcc	acc0, r0, fp
    bbb0:	00000000 	andeq	r0, r0, r0
    bbb4:	01cc1e00 	biceq	r1, ip, r0, lsl #28
    bbb8:	23040000 	movwcs	r0, #16384	; 0x4000
    bbbc:	00140000 	andseq	r0, r4, r0
    bbc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    bbc4:	00000758 	andeq	r0, r0, r8, asr r7
    bbc8:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    bbcc:	003c5e00 	eorseq	r5, ip, r0, lsl #28
    bbd0:	01e81600 	mvneq	r1, r0, lsl #12
    bbd4:	3c7f0000 	ldclcc	0, cr0, [pc], #-0	; bbdc <__exidx_end+0x8fa4>
    bbd8:	06150000 	ldreq	r0, [r5], -r0
    bbdc:	0a000023 	beq	bc70 <__exidx_end+0x9038>
    bbe0:	1f000000 	svcne	0x00000000
    bbe4:	000001dc 	ldrdeq	r0, [r0], -ip
    bbe8:	00003c9e 	muleq	r0, lr, ip
    bbec:	00230615 	eoreq	r0, r3, r5, lsl r6
    bbf0:	00000a00 	andeq	r0, r0, r0, lsl #20
    bbf4:	01e81600 	mvneq	r1, r0, lsl #12
    bbf8:	3cbf0000 	ldccc	0, cr0, [pc]	; bc00 <__exidx_end+0x8fc8>
    bbfc:	00000000 	andeq	r0, r0, r0
    bc00:	2a731700 	bcs	1cd1808 <__ccfg+0x1cb1860>
    bc04:	73020000 	movwvc	r0, #8192	; 0x2000
    bc08:	00002318 	andeq	r2, r0, r8, lsl r3
    bc0c:	00000110 	andeq	r0, r0, r0, lsl r1
    bc10:	09639c01 	stmdbeq	r3!, {r0, sl, fp, ip, pc}^
    bc14:	1e1c0000 	cdpne	0, 1, cr0, cr12, cr0, {0}
    bc18:	0100002b 	tsteq	r0, fp, lsr #32
    bc1c:	008c0127 	addeq	r0, ip, r7, lsr #2
    bc20:	3cd20000 	ldclcc	0, cr0, [r2], {0}
    bc24:	8a1c0000 	bhi	70bc2c <__ccfg+0x6ebc84>
    bc28:	0100002b 	tsteq	r0, fp, lsr #32
    bc2c:	008c0127 	addeq	r0, ip, r7, lsr #2
    bc30:	3cfe0000 	ldclcc	0, cr0, [lr]
    bc34:	dd1d0000 	ldcle	0, cr0, [sp, #-0]
    bc38:	0100002e 	tsteq	r0, lr, lsr #32
    bc3c:	008c0129 	addeq	r0, ip, r9, lsr #2
    bc40:	3d1f0000 	ldccc	0, cr0, [pc, #-0]	; bc48 <__exidx_end+0x9010>
    bc44:	f5210000 			; <UNDEFINED> instruction: 0xf5210000
    bc48:	48000001 	stmdami	r0, {r0}
    bc4c:	00000023 	andeq	r0, r0, r3, lsr #32
    bc50:	01000010 	tsteq	r0, r0, lsl r0
    bc54:	07c10140 	strbeq	r0, [r1, r0, asr #2]
    bc58:	00120000 	andseq	r0, r2, r0
    bc5c:	16000010 			; <UNDEFINED> instruction: 0x16000010
    bc60:	00000205 	andeq	r0, r0, r5, lsl #4
    bc64:	00003ded 	andeq	r3, r0, sp, ror #27
    bc68:	22220000 	eorcs	r0, r2, #0
    bc6c:	43000023 	movwmi	r0, #35	; 0x23
    bc70:	d6000003 	strle	r0, [r0], -r3
    bc74:	1a000007 	bne	bc98 <__exidx_end+0x9060>
    bc78:	f3035001 	vhadd.u8	d5, d3, d1
    bc7c:	22005101 	andcs	r5, r0, #1073741824	; 0x40000000
    bc80:	0000232e 	andeq	r2, r0, lr, lsr #6
    bc84:	00000ad6 	ldrdeq	r0, [r0], -r6
    bc88:	000007ef 	andeq	r0, r0, pc, ror #15
    bc8c:	0151011a 	cmpeq	r1, sl, lsl r1
    bc90:	50011a48 	andpl	r1, r1, r8, asr #20
    bc94:	00007402 	andeq	r7, r0, r2, lsl #8
    bc98:	00233223 	eoreq	r3, r3, r3, lsr #4
    bc9c:	0003bd00 	andeq	fp, r3, r0, lsl #26
    bca0:	23482400 	movtcs	r2, #33792	; 0x8400
    bca4:	76020000 	strvc	r0, [r2], -r0
    bca8:	00081d00 	andeq	r1, r8, r0, lsl #26
    bcac:	53011a00 	movwpl	r1, #6656	; 0x1a00
    bcb0:	011a3001 	tsteq	sl, r1
    bcb4:	ff0a0352 			; <UNDEFINED> instruction: 0xff0a0352
    bcb8:	51011a03 	tstpl	r1, r3, lsl #20
    bcbc:	1a2c0802 	bne	b0dccc <__ccfg+0xaedd24>
    bcc0:	74025001 	strvc	r5, [r2], #-1
    bcc4:	58220000 	stmdapl	r2!, {}	; <UNPREDICTABLE>
    bcc8:	d6000023 	strle	r0, [r0], -r3, lsr #32
    bccc:	3600000a 	strcc	r0, [r0], -sl
    bcd0:	1a000008 	bne	bcf8 <__exidx_end+0x90c0>
    bcd4:	4c015101 	stfmis	f5, [r1], {1}
    bcd8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    bcdc:	23000074 	movwcs	r0, #116	; 0x74
    bce0:	0000235c 	andeq	r2, r0, ip, asr r3
    bce4:	00000404 	andeq	r0, r0, r4, lsl #8
    bce8:	00236622 	eoreq	r6, r3, r2, lsr #12
    bcec:	000ad600 	andeq	sp, sl, r0, lsl #12
    bcf0:	00085800 	andeq	r5, r8, r0, lsl #16
    bcf4:	51011a00 	tstpl	r1, r0, lsl #20
    bcf8:	011a4401 	tsteq	sl, r1, lsl #8
    bcfc:	00740250 	rsbseq	r0, r4, r0, asr r2
    bd00:	236a2300 	cmncs	sl, #0, 6
    bd04:	043e0000 	ldrteq	r0, [lr], #-0
    bd08:	74220000 	strtvc	r0, [r2], #-0
    bd0c:	d6000023 	strle	r0, [r0], -r3, lsr #32
    bd10:	7a00000a 	bvc	bd40 <__exidx_end+0x9108>
    bd14:	1a000008 	bne	bd3c <__exidx_end+0x9104>
    bd18:	40015101 	andmi	r5, r1, r1, lsl #2
    bd1c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    bd20:	22000074 	andcs	r0, r0, #116	; 0x74
    bd24:	0000237a 	andeq	r2, r0, sl, ror r3
    bd28:	00000478 	andeq	r0, r0, r8, ror r4
    bd2c:	0000088e 	andeq	r0, r0, lr, lsl #17
    bd30:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    bd34:	22000075 	andcs	r0, r0, #117	; 0x75
    bd38:	00002384 	andeq	r2, r0, r4, lsl #7
    bd3c:	00000ad6 	ldrdeq	r0, [r0], -r6
    bd40:	000008a7 	andeq	r0, r0, r7, lsr #17
    bd44:	0151011a 	cmpeq	r1, sl, lsl r1
    bd48:	50011a3c 	andpl	r1, r1, ip, lsr sl
    bd4c:	00007402 	andeq	r7, r0, r2, lsl #8
    bd50:	00238a22 	eoreq	r8, r3, r2, lsr #20
    bd54:	0000e700 	andeq	lr, r0, r0, lsl #14
    bd58:	0008bb00 	andeq	fp, r8, r0, lsl #22
    bd5c:	50011a00 	andpl	r1, r1, r0, lsl #20
    bd60:	00007502 	andeq	r7, r0, r2, lsl #10
    bd64:	00239c22 	eoreq	r9, r3, r2, lsr #24
    bd68:	00011000 	andeq	r1, r1, r0
    bd6c:	0008cf00 	andeq	ip, r8, r0, lsl #30
    bd70:	50011a00 	andpl	r1, r1, r0, lsl #20
    bd74:	00007502 	andeq	r7, r0, r2, lsl #10
    bd78:	0023aa22 	eoreq	sl, r3, r2, lsr #20
    bd7c:	00013900 	andeq	r3, r1, r0, lsl #18
    bd80:	0008e300 	andeq	lr, r8, r0, lsl #6
    bd84:	50011a00 	andpl	r1, r1, r0, lsl #20
    bd88:	00007502 	andeq	r7, r0, r2, lsl #10
    bd8c:	0023b422 	eoreq	fp, r3, r2, lsr #8
    bd90:	000ad600 	andeq	sp, sl, r0, lsl #12
    bd94:	0008fd00 	andeq	pc, r8, r0, lsl #26
    bd98:	51011a00 	tstpl	r1, r0, lsl #20
    bd9c:	1a280802 	bne	a0ddac <__ccfg+0x9ede04>
    bda0:	74025001 	strvc	r5, [r2], #-1
    bda4:	ba220000 	blt	88bdac <__ccfg+0x86be04>
    bda8:	be000023 	cdplt	0, 0, cr0, cr0, cr3, {1}
    bdac:	11000000 	mrsne	r0, (UNDEF: 0)
    bdb0:	1a000009 	bne	bddc <__exidx_end+0x91a4>
    bdb4:	75025001 	strvc	r5, [r2, #-1]
    bdb8:	cc220000 	stcgt	0, cr0, [r2], #-0
    bdbc:	a3000023 	movwge	r0, #35	; 0x23
    bdc0:	25000001 	strcs	r0, [r0, #-1]
    bdc4:	1a000009 	bne	bdf0 <__exidx_end+0x91b8>
    bdc8:	75025001 	strvc	r5, [r2, #-1]
    bdcc:	de220000 	cdple	0, 2, cr0, cr2, cr0, {0}
    bdd0:	cc000023 	stcgt	0, cr0, [r0], {35}	; 0x23
    bdd4:	39000001 	stmdbcc	r0, {r0}
    bdd8:	1a000009 	bne	be04 <__exidx_end+0x91cc>
    bddc:	75025001 	strvc	r5, [r2, #-1]
    bde0:	f2220000 	vhadd.s32	d0, d2, d0
    bde4:	6e000023 	cdpvs	0, 0, cr0, cr0, cr3, {1}
    bde8:	4d000001 	stcmi	0, cr0, [r0, #-4]
    bdec:	1a000009 	bne	be18 <__exidx_end+0x91e0>
    bdf0:	75025001 	strvc	r5, [r2, #-1]
    bdf4:	fc190000 	ldc2	0, cr0, [r9], {-0}
    bdf8:	d6000023 	strle	r0, [r0], -r3, lsr #32
    bdfc:	1a00000a 	bne	be2c <__exidx_end+0x91f4>
    be00:	38015101 	stmdacc	r1, {r0, r8, ip, lr}
    be04:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    be08:	00000074 	andeq	r0, r0, r4, ror r0
    be0c:	002af017 	eoreq	pc, sl, r7, lsl r0	; <UNPREDICTABLE>
    be10:	28fd0200 	ldmcs	sp!, {r9}^
    be14:	64000024 	strvs	r0, [r0], #-36	; 0xffffffdc
    be18:	01000000 	mrseq	r0, (UNDEF: 0)
    be1c:	0009899c 	muleq	r9, ip, r9
    be20:	2ca71d00 	stccs	13, cr1, [r7]
    be24:	eb010000 	bl	4be2c <__ccfg+0x2be84>
    be28:	00008c03 	andeq	r8, r0, r3, lsl #24
    be2c:	003e0600 	eorseq	r0, lr, r0, lsl #12
    be30:	1d0c0000 	stcne	0, cr0, [ip, #-0]
    be34:	02000030 	andeq	r0, r0, #48	; 0x30
    be38:	248c0106 	strcs	r0, [ip], #262	; 0x106
    be3c:	00280000 	eoreq	r0, r8, r0
    be40:	9c010000 	stcls	0, cr0, [r1], {-0}
    be44:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    be48:	002e741c 	eoreq	r7, lr, ip, lsl r4
    be4c:	04130100 	ldreq	r0, [r3], #-256	; 0xffffff00
    be50:	0000008c 	andeq	r0, r0, ip, lsl #1
    be54:	00003e21 	andeq	r3, r0, r1, lsr #28
    be58:	2aa31700 	bcs	fe8d1a60 <_estack+0xde8cca60>
    be5c:	7a020000 	bvc	8be64 <__ccfg+0x6bebc>
    be60:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    be64:	00000150 	andeq	r0, r0, r0, asr r1
    be68:	0ad69c01 	beq	ff5b2e74 <_estack+0xdf5ade74>
    be6c:	8a1c0000 	bhi	70be74 <__ccfg+0x6ebecc>
    be70:	0100002b 	tsteq	r0, fp, lsr #32
    be74:	008c019b 	umulleq	r0, ip, fp, r1
    be78:	3e420000 	cdpcc	0, 4, cr0, cr2, cr0, {0}
    be7c:	bb1d0000 	bllt	74be84 <__ccfg+0x72bedc>
    be80:	0100002f 	tsteq	r0, pc, lsr #32
    be84:	008c019d 	umulleq	r0, ip, sp, r1
    be88:	3e9d0000 	cdpcc	0, 9, cr0, cr13, cr0, {0}
    be8c:	dd1d0000 	ldcle	0, cr0, [sp, #-0]
    be90:	0100002e 	tsteq	r0, lr, lsr #32
    be94:	008c019e 	umulleq	r0, ip, lr, r1
    be98:	3eb00000 	cdpcc	0, 11, cr0, cr0, cr0, {0}
    be9c:	271d0000 	ldrcs	r0, [sp, -r0]
    bea0:	0100002c 	tsteq	r0, ip, lsr #32
    bea4:	008c019f 	umulleq	r0, ip, pc, r1	; <UNPREDICTABLE>
    bea8:	3ec30000 	cdpcc	0, 12, cr0, cr3, cr0, {0}
    beac:	1a1d0000 	bne	74beb4 <__ccfg+0x72bf0c>
    beb0:	0100002c 	tsteq	r0, ip, lsr #32
    beb4:	008c01a0 	addeq	r0, ip, r0, lsr #3
    beb8:	3ee10000 	cdpcc	0, 14, cr0, cr1, cr0, {0}
    bebc:	12250000 	eorne	r0, r5, #0
    bec0:	c6000002 	strgt	r0, [r0], -r2
    bec4:	3e000025 	cdpcc	0, 0, cr0, cr0, cr5, {1}
    bec8:	01000000 	mrseq	r0, (UNDEF: 0)
    becc:	3e230216 	mcrcc	2, 1, r0, cr3, cr6, {0}
    bed0:	3c000025 	stccc	0, cr0, [r0], {37}	; 0x25
    bed4:	22000006 	andcs	r0, r0, #6
    bed8:	00002560 	andeq	r2, r0, r0, ror #10
    bedc:	00000af2 	strdeq	r0, [r0], -r2
    bee0:	00000a46 	andeq	r0, r0, r6, asr #20
    bee4:	0151011a 	cmpeq	r1, sl, lsl r1
    bee8:	50011a31 	andpl	r1, r1, r1, lsr sl
    beec:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    bef0:	00002566 	andeq	r2, r0, r6, ror #10
    bef4:	00000989 	andeq	r0, r0, r9, lsl #19
    bef8:	00000a5d 	andeq	r0, r0, sp, asr sl
    befc:	0550011a 	ldrbeq	r0, [r0, #-282]	; 0xfffffee6
    bf00:	8637bd0c 	ldrthi	fp, [r7], -ip, lsl #26
    bf04:	6c230000 	stcvs	0, cr0, [r3], #-0
    bf08:	08000025 	stmdaeq	r0, {r0, r2, r5}
    bf0c:	2200000b 	andcs	r0, r0, #11
    bf10:	00002576 	andeq	r2, r0, r6, ror r5
    bf14:	00000af2 	strdeq	r0, [r0], -r2
    bf18:	00000a7f 	andeq	r0, r0, pc, ror sl
    bf1c:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    bf20:	011a0074 	tsteq	sl, r4, ror r0
    bf24:	00340150 	eorseq	r0, r4, r0, asr r1
    bf28:	00257c22 	eoreq	r7, r5, r2, lsr #24
    bf2c:	000b0800 	andeq	r0, fp, r0, lsl #16
    bf30:	000a9200 	andeq	r9, sl, r0, lsl #4
    bf34:	50011a00 	andpl	r1, r1, r0, lsl #20
    bf38:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    bf3c:	0000258c 	andeq	r2, r0, ip, lsl #11
    bf40:	00000989 	andeq	r0, r0, r9, lsl #19
    bf44:	00000aac 	andeq	r0, r0, ip, lsr #21
    bf48:	0850011a 	ldmdaeq	r0, {r1, r3, r4, r8}^
    bf4c:	ff0c0074 			; <UNDEFINED> instruction: 0xff0c0074
    bf50:	1a00ffff 	bne	4bf54 <__ccfg+0x2bfac>
    bf54:	259c2600 	ldrcs	r2, [ip, #1536]	; 0x600
    bf58:	0acc0000 	beq	ff30bf60 <_estack+0xdf306f60>
    bf5c:	011a0000 	tsteq	sl, r0
    bf60:	000c0552 	andeq	r0, ip, r2, asr r5
    bf64:	1a600060 	bne	180c0ec <__ccfg+0x17ec144>
    bf68:	37015101 	strcc	r5, [r1, -r1, lsl #2]
    bf6c:	0450011a 	ldrbeq	r0, [r0], #-282	; 0xfffffee6
    bf70:	25480074 	strbcs	r0, [r8, #-116]	; 0xffffff8c
    bf74:	25b22300 	ldrcs	r2, [r2, #768]!	; 0x300
    bf78:	0af20000 	beq	ffc8bf80 <_estack+0xdfc86f80>
    bf7c:	27000000 	strcs	r0, [r0, -r0]
    bf80:	00002ded 	andeq	r2, r0, sp, ror #27
    bf84:	f201ca06 	vpmax.s8	d12, d1, d6
    bf88:	2800000a 	stmdacs	r0, {r1, r3}
    bf8c:	0000008c 	andeq	r0, r0, ip, lsl #1
    bf90:	00008c28 	andeq	r8, r0, r8, lsr #24
    bf94:	008c2800 	addeq	r2, ip, r0, lsl #16
    bf98:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    bf9c:	00002432 	andeq	r2, r0, r2, lsr r4
    bfa0:	0b08f907 	bleq	24a3c4 <__ccfg+0x22a41c>
    bfa4:	8c280000 	stchi	0, cr0, [r8], #-0
    bfa8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    bfac:	0000008c 	andeq	r0, r0, ip, lsl #1
    bfb0:	246b2a00 	strbtcs	r2, [fp], #-2560	; 0xfffff600
    bfb4:	10070000 	andne	r0, r7, r0
    bfb8:	00008c01 	andeq	r8, r0, r1, lsl #24
    bfbc:	008c2800 	addeq	r2, ip, r0, lsl #16
    bfc0:	00000000 	andeq	r0, r0, r0
    bfc4:	00000923 	andeq	r0, r0, r3, lsr #18
    bfc8:	2fd30004 	svccs	0x00d30004
    bfcc:	01040000 	mrseq	r0, (UNDEF: 4)
    bfd0:	00002190 	muleq	r0, r0, r1
    bfd4:	00316401 	eorseq	r6, r1, r1, lsl #8
    bfd8:	00228500 	eoreq	r8, r2, r0, lsl #10
    bfdc:	0010f000 	andseq	pc, r0, r0
    bfe0:	00000000 	andeq	r0, r0, r0
    bfe4:	006e1200 	rsbeq	r1, lr, r0, lsl #4
    bfe8:	22400200 	subcs	r0, r0, #0, 4
    bfec:	1b060000 	blne	18bff4 <__ccfg+0x16c04c>
    bff0:	00000030 	andeq	r0, r0, r0, lsr r0
    bff4:	fd060103 	stc2	1, cr0, [r6, #-12]
    bff8:	02000006 	andeq	r0, r0, #6
    bffc:	00000664 	andeq	r0, r0, r4, ror #12
    c000:	00421d06 	subeq	r1, r2, r6, lsl #26
    c004:	01030000 	mrseq	r0, (UNDEF: 3)
    c008:	0006fb08 	andeq	pc, r6, r8, lsl #22
    c00c:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    c010:	000005fe 	strdeq	r0, [r0], -lr
    c014:	00033302 	andeq	r3, r3, r2, lsl #6
    c018:	5b2b0600 	blpl	acd820 <__ccfg+0xaad878>
    c01c:	03000000 	movweq	r0, #0
    c020:	07a70702 	streq	r0, [r7, r2, lsl #14]!
    c024:	86020000 	strhi	r0, [r2], -r0
    c028:	06000021 	streq	r0, [r0], -r1, lsr #32
    c02c:	00006d3f 	andeq	r6, r0, pc, lsr sp
    c030:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    c034:	000004c5 	andeq	r0, r0, r5, asr #9
    c038:	00071202 	andeq	r1, r7, r2, lsl #4
    c03c:	7f410600 	svcvc	0x00410600
    c040:	03000000 	movweq	r0, #0
    c044:	02fa0704 	rscseq	r0, sl, #4, 14	; 0x100000
    c048:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    c04c:	0004c005 	andeq	ip, r4, r5
    c050:	07080300 	streq	r0, [r8, -r0, lsl #6]
    c054:	000002f5 	strdeq	r0, [r0], -r5
    c058:	69050404 	stmdbvs	r5, {r2, sl}
    c05c:	0300746e 	movweq	r7, #1134	; 0x46e
    c060:	02ff0704 	rscseq	r0, pc, #4, 14	; 0x100000
    c064:	42020000 	andmi	r0, r2, #0
    c068:	07000022 	streq	r0, [r0, -r2, lsr #32]
    c06c:	00002513 	andeq	r2, r0, r3, lsl r5
    c070:	06660200 	strbteq	r0, [r6], -r0, lsl #4
    c074:	14070000 	strne	r0, [r7], #-0
    c078:	00000037 	andeq	r0, r0, r7, lsr r0
    c07c:	00033502 	andeq	r3, r3, r2, lsl #10
    c080:	501a0700 	andspl	r0, sl, r0, lsl #14
    c084:	02000000 	andeq	r0, r0, #0
    c088:	00002188 	andeq	r2, r0, r8, lsl #3
    c08c:	00621f07 	rsbeq	r1, r2, r7, lsl #30
    c090:	14020000 	strne	r0, [r2], #-0
    c094:	07000007 	streq	r0, [r0, -r7]
    c098:	00007420 	andeq	r7, r0, r0, lsr #8
    c09c:	27310200 	ldrcs	r0, [r1, -r0, lsl #4]!
    c0a0:	33080000 	movwcc	r0, #32768	; 0x8000
    c0a4:	000000e4 	andeq	r0, r0, r4, ror #1
    c0a8:	00ea0405 	rsceq	r0, sl, r5, lsl #8
    c0ac:	05060000 	streq	r0, [r6, #-0]
    c0b0:	0000f104 	andeq	pc, r0, r4, lsl #2
    c0b4:	00fc0700 	rscseq	r0, ip, r0, lsl #14
    c0b8:	ad080000 	stcge	0, cr0, [r8, #-0]
    c0bc:	00000000 	andeq	r0, r0, r0
    c0c0:	00283c02 	eoreq	r3, r8, r2, lsl #24
    c0c4:	07420900 	strbeq	r0, [r2, -r0, lsl #18]
    c0c8:	05000001 	streq	r0, [r0, #-1]
    c0cc:	00010d04 	andeq	r0, r1, r4, lsl #26
    c0d0:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    c0d4:	01260000 			; <UNDEFINED> instruction: 0x01260000
    c0d8:	26080000 	strcs	r0, [r8], -r0
    c0dc:	08000001 	stmdaeq	r0, {r0}
    c0e0:	000000ce 	andeq	r0, r0, lr, asr #1
    c0e4:	0000ce08 	andeq	ip, r0, r8, lsl #28
    c0e8:	04050000 	streq	r0, [r5], #-0
    c0ec:	000000ad 	andeq	r0, r0, sp, lsr #1
    c0f0:	0029a402 	eoreq	sl, r9, r2, lsl #8
    c0f4:	37460900 	strbcc	r0, [r6, -r0, lsl #18]
    c0f8:	05000001 	streq	r0, [r0, #-1]
    c0fc:	00013d04 	andeq	r3, r1, r4, lsl #26
    c100:	00ce0a00 	sbceq	r0, lr, r0, lsl #20
    c104:	ed020000 	stc	0, cr0, [r2, #-0]
    c108:	09000029 	stmdbeq	r0, {r0, r3, r5}
    c10c:	00013748 	andeq	r3, r1, r8, asr #14
    c110:	26c30200 	strbcs	r0, [r3], r0, lsl #4
    c114:	4a090000 	bmi	24c11c <__ccfg+0x22c174>
    c118:	00000158 	andeq	r0, r0, r8, asr r1
    c11c:	015e0405 	cmpeq	lr, r5, lsl #8
    c120:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    c124:	6d000000 	stcvs	0, cr0, [r0, #-0]
    c128:	08000001 	stmdaeq	r0, {r0}
    c12c:	000000ce 	andeq	r0, r0, lr, asr #1
    c130:	25d20200 	ldrbcs	r0, [r2, #512]	; 0x200
    c134:	4c090000 	stcmi	0, cr0, [r9], {-0}
    c138:	00000137 	andeq	r0, r0, r7, lsr r1
    c13c:	00253202 	eoreq	r3, r5, r2, lsl #4
    c140:	074e0900 	strbeq	r0, [lr, -r0, lsl #18]
    c144:	02000001 	andeq	r0, r0, #1
    c148:	000025c2 	andeq	r2, r0, r2, asr #11
    c14c:	00e45109 	rsceq	r5, r4, r9, lsl #2
    c150:	4a020000 	bmi	8c158 <__ccfg+0x6c1b0>
    c154:	09000024 	stmdbeq	r0, {r2, r5}
    c158:	00019953 	andeq	r9, r1, r3, asr r9
    c15c:	9f040500 	svcls	0x00040500
    c160:	09000001 	stmdbeq	r0, {r0}
    c164:	000000ce 	andeq	r0, r0, lr, asr #1
    c168:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    c16c:	0001b808 	andeq	fp, r1, r8, lsl #16
    c170:	00b80800 	adcseq	r0, r8, r0, lsl #16
    c174:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    c178:	00000000 	andeq	r0, r0, r0
    c17c:	00b80405 	adcseq	r0, r8, r5, lsl #8
    c180:	52020000 	andpl	r0, r2, #0
    c184:	09000028 	stmdbeq	r0, {r3, r5}
    c188:	0001c957 	andeq	ip, r1, r7, asr r9
    c18c:	cf040500 	svcgt	0x00040500
    c190:	09000001 	stmdbeq	r0, {r0}
    c194:	000000ce 	andeq	r0, r0, lr, asr #1
    c198:	000001e3 	andeq	r0, r0, r3, ror #3
    c19c:	0001e308 	andeq	lr, r1, r8, lsl #6
    c1a0:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    c1a4:	05000000 	streq	r0, [r0, #-0]
    c1a8:	0000ce04 	andeq	ip, r0, r4, lsl #28
    c1ac:	26350200 	ldrtcs	r0, [r5], -r0, lsl #4
    c1b0:	5a090000 	bpl	24c1b8 <__ccfg+0x22c210>
    c1b4:	000001c9 	andeq	r0, r0, r9, asr #3
    c1b8:	0026ef02 	eoreq	lr, r6, r2, lsl #30
    c1bc:	c95d0900 	ldmdbgt	sp, {r8, fp}^
    c1c0:	02000001 	andeq	r0, r0, #1
    c1c4:	0000245c 	andeq	r2, r0, ip, asr r4
    c1c8:	01c96009 	biceq	r6, r9, r9
    c1cc:	60020000 	andvs	r0, r2, r0
    c1d0:	09000028 	stmdbeq	r0, {r3, r5}
    c1d4:	0000e463 	andeq	lr, r0, r3, ror #8
    c1d8:	249a0200 	ldrcs	r0, [sl], #512	; 0x200
    c1dc:	65090000 	strvs	r0, [r9, #-0]
    c1e0:	00000220 	andeq	r0, r0, r0, lsr #4
    c1e4:	02260405 	eoreq	r0, r6, #83886080	; 0x5000000
    c1e8:	31070000 	mrscc	r0, (UNDEF: 7)
    c1ec:	08000002 	stmdaeq	r0, {r1}
    c1f0:	000000ce 	andeq	r0, r0, lr, asr #1
    c1f4:	29fe0200 	ldmibcs	lr!, {r9}^
    c1f8:	67090000 	strvs	r0, [r9, -r0]
    c1fc:	00000220 	andeq	r0, r0, r0, lsr #4
    c200:	00274202 	eoreq	r4, r7, r2, lsl #4
    c204:	eb690900 	bl	1a4e60c <__ccfg+0x1a2e664>
    c208:	02000000 	andeq	r0, r0, #0
    c20c:	000029dd 	ldrdeq	r2, [r0], -sp
    c210:	00eb6b09 	rsceq	r6, fp, r9, lsl #22
    c214:	fe020000 	cdp2	0, 0, cr0, cr2, cr0, {0}
    c218:	09000026 	stmdbeq	r0, {r1, r2, r5}
    c21c:	0000eb6d 	andeq	lr, r0, sp, ror #22
    c220:	27100200 	ldrcs	r0, [r0, -r0, lsl #4]
    c224:	6f090000 	svcvs	0x00090000
    c228:	000000eb 	andeq	r0, r0, fp, ror #1
    c22c:	7a094c0b 	bvc	25f260 <__ccfg+0x23f2b8>
    c230:	00000355 	andeq	r0, r0, r5, asr r3
    c234:	0026d40c 	eoreq	sp, r6, ip, lsl #8
    c238:	fc7c0900 	ldc2l	9, cr0, [ip], #-0	; <UNPREDICTABLE>
    c23c:	00000000 	andeq	r0, r0, r0
    c240:	0029d00c 	eoreq	sp, r9, ip
    c244:	2c7d0900 			; <UNDEFINED> instruction: 0x2c7d0900
    c248:	04000001 	streq	r0, [r0], #-1
    c24c:	0026e50c 	eoreq	lr, r6, ip, lsl #10
    c250:	427e0900 	rsbsmi	r0, lr, #0, 18
    c254:	08000001 	stmdaeq	r0, {r0}
    c258:	0028ef0c 	eoreq	lr, r8, ip, lsl #30
    c25c:	4d7f0900 			; <UNDEFINED> instruction: 0x4d7f0900
    c260:	0c000001 	stceq	0, cr0, [r0], {1}
    c264:	0029010c 	eoreq	r0, r9, ip, lsl #2
    c268:	6d800900 	vstrvs.16	s0, [r0]	; <UNPREDICTABLE>
    c26c:	10000001 	andne	r0, r0, r1
    c270:	0025e30c 	eoreq	lr, r5, ip, lsl #6
    c274:	78810900 	stmvc	r1, {r8, fp}
    c278:	14000001 	strne	r0, [r0], #-1
    c27c:	00259f0c 	eoreq	r9, r5, ip, lsl #30
    c280:	83820900 	orrhi	r0, r2, #0, 18
    c284:	18000001 	stmdane	r0, {r0}
    c288:	0026da0c 	eoreq	sp, r6, ip, lsl #20
    c28c:	8e830900 	vdivhi.f16	s0, s6, s0	; <UNPREDICTABLE>
    c290:	1c000001 	stcne	0, cr0, [r0], {1}
    c294:	00287a0c 	eoreq	r7, r8, ip, lsl #20
    c298:	be840900 	vdivlt.f16	s0, s8, s0	; <UNPREDICTABLE>
    c29c:	20000001 	andcs	r0, r0, r1
    c2a0:	0026610c 	eoreq	r6, r6, ip, lsl #2
    c2a4:	e9850900 	stmib	r5, {r8, fp}
    c2a8:	24000001 	strcs	r0, [r0], #-1
    c2ac:	0026b90c 	eoreq	fp, r6, ip, lsl #18
    c2b0:	f4860900 	vst2.32	{d0[0],d1[0]}, [r6], r0
    c2b4:	28000001 	stmdacs	r0, {r0}
    c2b8:	00292f0c 	eoreq	r2, r9, ip, lsl #30
    c2bc:	ff870900 			; <UNDEFINED> instruction: 0xff870900
    c2c0:	2c000001 	stccs	0, cr0, [r0], {1}
    c2c4:	0025fe0c 	eoreq	pc, r5, ip, lsl #28
    c2c8:	15880900 	strne	r0, [r8, #2304]	; 0x900
    c2cc:	30000002 	andcc	r0, r0, r2
    c2d0:	00291d0c 	eoreq	r1, r9, ip, lsl #26
    c2d4:	31890900 	orrcc	r0, r9, r0, lsl #18
    c2d8:	34000002 	strcc	r0, [r0], #-2
    c2dc:	0024db0c 	eoreq	sp, r4, ip, lsl #22
    c2e0:	0a8a0900 	beq	fe28e6e8 <_estack+0xde2896e8>
    c2e4:	38000002 	stmdacc	r0, {r1}
    c2e8:	0027200c 	eoreq	r2, r7, ip
    c2ec:	3c8b0900 			; <UNDEFINED> instruction: 0x3c8b0900
    c2f0:	3c000002 	stccc	0, cr0, [r0], {2}
    c2f4:	0028d00c 	eoreq	sp, r8, ip
    c2f8:	478c0900 	strmi	r0, [ip, r0, lsl #18]
    c2fc:	40000002 	andmi	r0, r0, r2
    c300:	0026430c 	eoreq	r4, r6, ip, lsl #6
    c304:	528d0900 	addpl	r0, sp, #0, 18
    c308:	44000002 	strmi	r0, [r0], #-2
    c30c:	00248b0c 	eoreq	r8, r4, ip, lsl #22
    c310:	5d8e0900 	vstrpl.16	s0, [lr]	; <UNPREDICTABLE>
    c314:	48000002 	stmdami	r0, {r1}
    c318:	28000200 	stmdacs	r0, {r9}
    c31c:	8f090000 	svchi	0x00090000
    c320:	00000268 	andeq	r0, r0, r8, ror #4
    c324:	4e01080b 	cdpmi	8, 0, cr0, cr1, cr11, {0}
    c328:	00000399 	muleq	r0, r9, r3
    c32c:	0032930c 	eorseq	r9, r2, ip, lsl #6
    c330:	ce4f0100 	dvfgte	f0, f7, f0
    c334:	00000000 	andeq	r0, r0, r0
    c338:	0032c40c 	eorseq	ip, r2, ip, lsl #8
    c33c:	b8500100 	ldmdalt	r0, {r8}^
    c340:	04000000 	streq	r0, [r0], #-0
    c344:	0031fe0c 	eorseq	pc, r1, ip, lsl #28
    c348:	ad510100 	ldfgee	f0, [r1, #-0]
    c34c:	06000000 	streq	r0, [r0], -r0
    c350:	0031b10c 	eorseq	fp, r1, ip, lsl #2
    c354:	a2520100 	subsge	r0, r2, #0, 2
    c358:	07000000 	streq	r0, [r0, -r0]
    c35c:	32f00200 	rscscc	r0, r0, #0, 4
    c360:	53010000 	movwpl	r0, #4096	; 0x1000
    c364:	00000360 	andeq	r0, r0, r0, ror #6
    c368:	0008ce0d 	andeq	ip, r8, sp, lsl #28
    c36c:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    c370:	0003be03 	andeq	fp, r3, r3, lsl #28
    c374:	08880e00 	stmeq	r8, {r9, sl, fp}
    c378:	dc020000 	stcle	0, cr0, [r2], {-0}
    c37c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c380:	e30f0000 	movw	r0, #61440	; 0xf000
    c384:	02000008 	andeq	r0, r0, #8
    c388:	00ce022c 	sbceq	r0, lr, ip, lsr #4
    c38c:	10030000 	andne	r0, r3, r0
    c390:	000009e7 	andeq	r0, r0, r7, ror #19
    c394:	03022a04 	movweq	r2, #10756	; 0x2a04
    c398:	002ee611 	eoreq	lr, lr, r1, lsl r6
    c39c:	c3e90500 	mvngt	r0, #0, 10
    c3a0:	03000000 	movweq	r0, #0
    c3a4:	000003fb 	strdeq	r0, [r0], -fp
    c3a8:	002c3612 	eoreq	r3, ip, r2, lsl r6
    c3ac:	cee90500 	cdpgt	5, 14, cr0, cr9, cr0, {0}
    c3b0:	13000000 	movwne	r0, #0
    c3b4:	00002f3f 	andeq	r2, r0, pc, lsr pc
    c3b8:	00c3ef05 	sbceq	lr, r3, r5, lsl #30
    c3bc:	0d000000 	stceq	0, cr0, [r0, #-0]
    c3c0:	000031c6 	andeq	r3, r0, r6, asr #3
    c3c4:	03025c04 	movweq	r5, #11268	; 0x2c04
    c3c8:	00000415 	andeq	r0, r0, r5, lsl r4
    c3cc:	0031a00e 	eorseq	sl, r1, lr
    c3d0:	025c0400 	subseq	r0, ip, #0, 8
    c3d4:	000000ce 	andeq	r0, r0, lr, asr #1
    c3d8:	282a1000 	stmdacs	sl!, {ip}
    c3dc:	40030000 	andmi	r0, r3, r0
    c3e0:	4a0f0301 	bmi	3ccfec <__ccfg+0x3ad044>
    c3e4:	04000032 	streq	r0, [r0], #-50	; 0xffffffce
    c3e8:	042b023e 	strteq	r0, [fp], #-574	; 0xfffffdc2
    c3ec:	03030000 	movweq	r0, #12288	; 0x3000
    c3f0:	0f410201 	svceq	0x00410201
    c3f4:	9a140000 	bls	50c3fc <__ccfg+0x4ec454>
    c3f8:	0a000032 	beq	c4c8 <__exidx_end+0x9890>
    c3fc:	0000009e 	muleq	r0, lr, r0
    c400:	0000f400 	andeq	pc, r0, r0, lsl #8
    c404:	cd9c0100 	ldfgts	f0, [ip]
    c408:	15000005 	strne	r0, [r0, #-5]
    c40c:	000031f6 	strdeq	r3, [r0], -r6
    c410:	00ce7b01 	sbceq	r7, lr, r1, lsl #22
    c414:	3ef40000 	cdpcc	0, 15, cr0, cr4, cr0, {0}
    c418:	b8160000 	ldmdalt	r6, {}	; <UNPREDICTABLE>
    c41c:	01000031 	tsteq	r0, r1, lsr r0
    c420:	0000ce7c 	andeq	ip, r0, ip, ror lr
    c424:	1707ff00 	strne	pc, [r7, -r0, lsl #30]
    c428:	000003a4 	andeq	r0, r0, r4, lsr #7
    c42c:	00000000 	andeq	r0, r0, r0
    c430:	000010c0 	andeq	r1, r0, r0, asr #1
    c434:	047d8101 	ldrbteq	r8, [sp], #-257	; 0xfffffeff
    c438:	b1180000 	tstlt	r8, r0
    c43c:	01000003 	tsteq	r0, r3
    c440:	03be1900 			; <UNDEFINED> instruction: 0x03be1900
    c444:	00000000 	andeq	r0, r0, r0
    c448:	00040000 	andeq	r0, r4, r0
    c44c:	82010000 	andhi	r0, r1, #0
    c450:	0004151a 	andeq	r1, r4, sl, lsl r5
    c454:	00000000 	andeq	r0, r0, r0
    c458:	00000800 	andeq	r0, r0, r0, lsl #16
    c45c:	a9a10100 	stmibge	r1!, {r8}
    c460:	1b000004 	blne	c478 <__exidx_end+0x9840>
    c464:	00000000 	andeq	r0, r0, r0
    c468:	000008de 	ldrdeq	r0, [r0], -lr
    c46c:	03cb1900 	biceq	r1, fp, #0, 18
    c470:	00000000 	andeq	r0, r0, r0
    c474:	00060000 	andeq	r0, r6, r0
    c478:	b1010000 	mrslt	r0, (UNDEF: 1)
    c47c:	00041e19 	andeq	r1, r4, r9, lsl lr
    c480:	00000000 	andeq	r0, r0, r0
    c484:	00000400 	andeq	r0, r0, r0, lsl #8
    c488:	1ab20100 	bne	fec8c890 <_estack+0xdec87890>
    c48c:	000003fb 	strdeq	r0, [r0], -fp
    c490:	00000000 	andeq	r0, r0, r0
    c494:	0000000a 	andeq	r0, r0, sl
    c498:	04e1b801 	strbteq	fp, [r1], #2049	; 0x801
    c49c:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
    c4a0:	11000004 	tstne	r0, r4
    c4a4:	03cb1900 	biceq	r1, fp, #0, 18
    c4a8:	00000000 	andeq	r0, r0, r0
    c4ac:	00040000 	andeq	r0, r4, r0
    c4b0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    c4b4:	00041e19 	andeq	r1, r4, r9, lsl lr
    c4b8:	00000000 	andeq	r0, r0, r0
    c4bc:	00000200 	andeq	r0, r0, r0, lsl #4
    c4c0:	19ba0100 	ldmibne	sl!, {r8}
    c4c4:	000003cb 	andeq	r0, r0, fp, asr #7
    c4c8:	00000000 	andeq	r0, r0, r0
    c4cc:	00000006 	andeq	r0, r0, r6
    c4d0:	1e19cf01 	cdpne	15, 1, cr12, cr9, cr1, {0}
    c4d4:	00000004 	andeq	r0, r0, r4
    c4d8:	02000000 	andeq	r0, r0, #0
    c4dc:	01000000 	mrseq	r0, (UNDEF: 0)
    c4e0:	00001cd0 	ldrdeq	r1, [r0], -r0
    c4e4:	052e0000 	streq	r0, [lr, #-0]!
    c4e8:	011d0000 	tsteq	sp, r0
    c4ec:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    c4f0:	001c0007 	andseq	r0, ip, r7
    c4f4:	3f000000 	svccc	0x00000000
    c4f8:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    c4fc:	0a035001 	beq	e0508 <__ccfg+0xc0560>
    c500:	1e0007ff 	mcrne	7, 0, r0, cr0, cr15, {7}
    c504:	00000000 	andeq	r0, r0, r0
    c508:	000008ef 	andeq	r0, r0, pc, ror #17
    c50c:	00000557 	andeq	r0, r0, r7, asr r5
    c510:	0151011d 	cmpeq	r1, sp, lsl r1
    c514:	50011d31 	andpl	r1, r1, r1, lsr sp
    c518:	1e003301 	cdpne	3, 0, cr3, cr0, cr1, {0}
    c51c:	00000000 	andeq	r0, r0, r0
    c520:	000008ef 	andeq	r0, r0, pc, ror #17
    c524:	0000056f 	andeq	r0, r0, pc, ror #10
    c528:	0151011d 	cmpeq	r1, sp, lsl r1
    c52c:	50011d33 	andpl	r1, r1, r3, lsr sp
    c530:	1e003401 	cdpne	4, 0, cr3, cr0, cr1, {0}
    c534:	00000000 	andeq	r0, r0, r0
    c538:	00000905 	andeq	r0, r0, r5, lsl #18
    c53c:	00000582 	andeq	r0, r0, r2, lsl #11
    c540:	0150011d 	cmpeq	r0, sp, lsl r1
    c544:	001c0031 	andseq	r0, ip, r1, lsr r0
    c548:	91000000 	mrsls	r0, (UNDEF: 0)
    c54c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    c550:	37015001 	strcc	r5, [r1, -r1]
    c554:	00001c00 	andeq	r1, r0, r0, lsl #24
    c558:	05a00000 	streq	r0, [r0, #0]!
    c55c:	011d0000 	tsteq	sp, r0
    c560:	00370150 	eorseq	r0, r7, r0, asr r1
    c564:	0000001c 	andeq	r0, r0, ip, lsl r0
    c568:	0005b000 	andeq	fp, r5, r0
    c56c:	50011d00 	andpl	r1, r1, r0, lsl #26
    c570:	00007602 	andeq	r7, r0, r2, lsl #12
    c574:	0000001c 	andeq	r0, r0, ip, lsl r0
    c578:	0005c000 	andeq	ip, r5, r0
    c57c:	50011d00 	andpl	r1, r1, r0, lsl #26
    c580:	00007602 	andeq	r7, r0, r2, lsl #12
    c584:	0000001f 	andeq	r0, r0, pc, lsl r0
    c588:	50011d00 	andpl	r1, r1, r0, lsl #26
    c58c:	00007602 	andeq	r7, r0, r2, lsl #12
    c590:	313c2000 	teqcc	ip, r0
    c594:	010a0000 	mrseq	r0, (UNDEF: 10)
    c598:	00260401 	eoreq	r0, r6, r1, lsl #8
    c59c:	00022000 	andeq	r2, r2, r0
    c5a0:	c89c0100 	ldmgt	ip, {r8}
    c5a4:	21000007 	tstcs	r0, r7
    c5a8:	0000323c 	andeq	r3, r0, ip, lsr r2
    c5ac:	00ceda01 	sbceq	sp, lr, r1, lsl #20
    c5b0:	3f1f0000 	svccc	0x001f0000
    c5b4:	e0150000 	ands	r0, r5, r0
    c5b8:	01000030 	tsteq	r0, r0, lsr r0
    c5bc:	0000c3dc 	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
    c5c0:	003f4b00 	eorseq	r4, pc, r0, lsl #22
    c5c4:	32561500 	subscc	r1, r6, #0, 10
    c5c8:	dd010000 	stcle	0, cr0, [r1, #-0]
    c5cc:	000000c3 	andeq	r0, r0, r3, asr #1
    c5d0:	00003f69 	andeq	r3, r0, r9, ror #30
    c5d4:	00321c15 	eorseq	r1, r2, r5, lsl ip
    c5d8:	c3de0100 	bicsgt	r0, lr, #0, 2
    c5dc:	c3000000 	movwgt	r0, #0
    c5e0:	1500003f 	strne	r0, [r0, #-63]	; 0xffffffc1
    c5e4:	000032e2 	andeq	r3, r0, r2, ror #5
    c5e8:	00c3df01 	sbceq	sp, r3, r1, lsl #30
    c5ec:	3fe10000 	svccc	0x00e10000
    c5f0:	d2150000 	andsle	r0, r5, #0
    c5f4:	01000030 	tsteq	r0, r0, lsr r0
    c5f8:	0000c3e0 	andeq	ip, r0, r0, ror #7
    c5fc:	003fff00 	eorseq	pc, pc, r0, lsl #30
    c600:	30e82200 	rsccc	r2, r8, r0, lsl #4
    c604:	e1010000 	mrs	r0, (UNDEF: 1)
    c608:	000000c3 	andeq	r0, r0, r3, asr #1
    c60c:	8a155301 	bhi	561218 <__ccfg+0x541270>
    c610:	0100002b 	tsteq	r0, fp, lsr #32
    c614:	0000cee2 	andeq	ip, r0, r2, ror #29
    c618:	00401200 	subeq	r1, r0, r0, lsl #4
    c61c:	327a1500 	rsbscc	r1, sl, #0, 10
    c620:	e3010000 	movw	r0, #4096	; 0x1000
    c624:	000000ce 	andeq	r0, r0, lr, asr #1
    c628:	00004025 	andeq	r4, r0, r5, lsr #32
    c62c:	0030fc15 	eorseq	pc, r0, r5, lsl ip	; <UNPREDICTABLE>
    c630:	cee40100 	cdpgt	1, 14, cr0, cr4, cr0, {0}
    c634:	44000000 	strmi	r0, [r0], #-0
    c638:	23000040 	movwcs	r0, #64	; 0x40
    c63c:	01006964 	tsteq	r0, r4, ror #18
    c640:	0000cee5 	andeq	ip, r0, r5, ror #29
    c644:	00405700 	subeq	r5, r0, r0, lsl #14
    c648:	69642300 	stmdbvs	r4!, {r8, r9, sp}^
    c64c:	e6010069 	str	r0, [r1], -r9, rrx
    c650:	000000ce 	andeq	r0, r0, lr, asr #1
    c654:	0000408d 	andeq	r4, r0, sp, lsl #1
    c658:	00697423 	rsbeq	r7, r9, r3, lsr #8
    c65c:	00cee701 	sbceq	lr, lr, r1, lsl #14
    c660:	40c30000 	sbcmi	r0, r3, r0
    c664:	63230000 			; <UNDEFINED> instruction: 0x63230000
    c668:	e8010064 	stmda	r1, {r2, r5, r6}
    c66c:	000000ce 	andeq	r0, r0, lr, asr #1
    c670:	00004133 	andeq	r4, r0, r3, lsr r1
    c674:	006c6323 	rsbeq	r6, ip, r3, lsr #6
    c678:	00cee901 	sbceq	lr, lr, r1, lsl #18
    c67c:	41460000 	mrsmi	r0, (UNDEF: 70)
    c680:	0d150000 	ldceq	0, cr0, [r5, #-0]
    c684:	01000031 	tsteq	r0, r1, lsr r0
    c688:	0000ceea 	andeq	ip, r0, sl, ror #29
    c68c:	00415900 	subeq	r5, r1, r0, lsl #18
    c690:	006b2400 	rsbeq	r2, fp, r0, lsl #8
    c694:	00ceeb01 	sbceq	lr, lr, r1, lsl #22
    c698:	ee130000 	cdp	0, 1, cr0, cr3, cr0, {0}
    c69c:	01000031 	tsteq	r0, r1, lsr r0
    c6a0:	0000ceec 	andeq	ip, r0, ip, ror #29
    c6a4:	31dc1500 	bicscc	r1, ip, r0, lsl #10
    c6a8:	ed010000 	stc	0, cr0, [r1, #-0]
    c6ac:	000000ce 	andeq	r0, r0, lr, asr #1
    c6b0:	00004177 	andeq	r4, r0, r7, ror r1
    c6b4:	0031ac15 	eorseq	sl, r1, r5, lsl ip
    c6b8:	ceee0100 	cdpgt	1, 14, cr0, cr14, cr0, {0}
    c6bc:	a0000000 	andge	r0, r0, r0
    c6c0:	15000041 	strne	r0, [r0, #-65]	; 0xffffffbf
    c6c4:	000031d7 	ldrdeq	r3, [r0], -r7
    c6c8:	00ceef01 	sbceq	lr, lr, r1, lsl #30
    c6cc:	41bf0000 			; <UNDEFINED> instruction: 0x41bf0000
    c6d0:	b7150000 	ldrlt	r0, [r5, -r0]
    c6d4:	01000032 	tsteq	r0, r2, lsr r0
    c6d8:	0007c8f0 	strdeq	ip, [r7], -r0
    c6dc:	00420300 	subeq	r0, r2, r0, lsl #6
    c6e0:	26322500 	ldrtcs	r2, [r2], -r0, lsl #10
    c6e4:	00120000 	andseq	r0, r2, r0
    c6e8:	073b0000 	ldreq	r0, [fp, -r0]!
    c6ec:	62260000 	eorvs	r0, r6, #0
    c6f0:	01000032 	tsteq	r0, r2, lsr r0
    c6f4:	00c3010a 	sbceq	r0, r3, sl, lsl #2
    c6f8:	421b0000 	andsmi	r0, fp, #0
    c6fc:	27000000 	strcs	r0, [r0, -r0]
    c700:	000003d4 	ldrdeq	r0, [r0], -r4
    c704:	00002658 	andeq	r2, r0, r8, asr r6
    c708:	00000006 	andeq	r0, r0, r6
    c70c:	68011101 	stmdavs	r1, {r0, r8, ip}
    c710:	28000007 	stmdacs	r0, {r0, r1, r2}
    c714:	000003e4 	andeq	r0, r0, r4, ror #7
    c718:	00265829 	eoreq	r5, r6, r9, lsr #16
    c71c:	00000600 	andeq	r0, r0, r0, lsl #12
    c720:	03ef2a00 	mvneq	r2, #0, 20
    c724:	422e0000 	eormi	r0, lr, #0
    c728:	00000000 	andeq	r0, r0, r0
    c72c:	0003d427 	andeq	sp, r3, r7, lsr #8
    c730:	00267000 	eoreq	r7, r6, r0
    c734:	00000600 	andeq	r0, r0, r0, lsl #12
    c738:	011b0100 	tsteq	fp, r0, lsl #2
    c73c:	00000795 	muleq	r0, r5, r7
    c740:	0003e428 	andeq	lr, r3, r8, lsr #8
    c744:	26702900 	ldrbtcs	r2, [r0], -r0, lsl #18
    c748:	00060000 	andeq	r0, r6, r0
    c74c:	ef2a0000 	svc	0x002a0000
    c750:	41000003 	tstmi	r0, r3
    c754:	00000042 	andeq	r0, r0, r2, asr #32
    c758:	03d42b00 	bicseq	r2, r4, #0, 22
    c75c:	267a0000 	ldrbtcs	r0, [sl], -r0
    c760:	10d80000 	sbcsne	r0, r8, r0
    c764:	1f010000 	svcne	0x00010000
    c768:	0007be01 	andeq	fp, r7, r1, lsl #28
    c76c:	03e42800 	mvneq	r2, #0, 16
    c770:	d82c0000 	stmdale	ip!, {}	; <UNPREDICTABLE>
    c774:	2a000010 	bcs	c7bc <__exidx_end+0x9b84>
    c778:	000003ef 	andeq	r0, r0, pc, ror #7
    c77c:	00004254 	andeq	r4, r0, r4, asr r2
    c780:	241b0000 	ldrcs	r0, [fp], #-0
    c784:	1b000026 	blne	c824 <__exidx_end+0x9bec>
    c788:	00000009 	andeq	r0, r0, r9
    c78c:	07ce0405 	strbeq	r0, [lr, r5, lsl #8]
    c790:	ce2d0000 	cdpgt	0, 2, cr0, cr13, cr0, {0}
    c794:	20000000 	andcs	r0, r0, r0
    c798:	00003112 	andeq	r3, r0, r2, lsl r1
    c79c:	2401170a 	strcs	r1, [r1], #-1802	; 0xfffff8f6
    c7a0:	60000028 	andvs	r0, r0, r8, lsr #32
    c7a4:	01000000 	mrseq	r0, (UNDEF: 0)
    c7a8:	0008339c 	muleq	r8, ip, r3
    c7ac:	30e02600 	rsccc	r2, r0, r0, lsl #12
    c7b0:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    c7b4:	0000c301 	andeq	ip, r0, r1, lsl #6
    c7b8:	00426700 	subeq	r6, r2, r0, lsl #14
    c7bc:	32062600 	andcc	r2, r6, #0, 12
    c7c0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    c7c4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c7c8:	00429200 	subeq	r9, r2, r0, lsl #4
    c7cc:	26572600 	ldrbcs	r2, [r7], -r0, lsl #12
    c7d0:	ba010000 	blt	4c7d8 <__ccfg+0x2c830>
    c7d4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c7d8:	0042a500 	subeq	sl, r2, r0, lsl #10
    c7dc:	31dc2600 	bicscc	r2, ip, r0, lsl #12
    c7e0:	bb010000 	bllt	4c7e8 <__ccfg+0x2c840>
    c7e4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c7e8:	0042cc00 	subeq	ip, r2, r0, lsl #24
    c7ec:	28321b00 	ldmdacs	r2!, {r8, r9, fp, ip}
    c7f0:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    c7f4:	20000000 	andcs	r0, r0, r0
    c7f8:	00003303 	andeq	r3, r0, r3, lsl #6
    c7fc:	0001290a 	andeq	r2, r1, sl, lsl #18
    c800:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    c804:	01000000 	mrseq	r0, (UNDEF: 0)
    c808:	00088a9c 	muleq	r8, ip, sl
    c80c:	322f2600 	eorcc	r2, pc, #0, 12
    c810:	e7010000 	str	r0, [r1, -r0]
    c814:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c818:	0042f500 	subeq	pc, r2, r0, lsl #10
    c81c:	32d52600 	sbcscc	r2, r5, #0, 12
    c820:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    c824:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c828:	00430800 	subeq	r0, r3, r0, lsl #16
    c82c:	2b8a2600 	blcs	fe296034 <_estack+0xde291034>
    c830:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
    c834:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c838:	00431b00 	subeq	r1, r3, r0, lsl #22
    c83c:	32832600 	addcc	r2, r3, #0, 12
    c840:	ea010000 	b	4c848 <__ccfg+0x2c8a0>
    c844:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c848:	00432e00 	subeq	r2, r3, r0, lsl #28
    c84c:	842e0000 	strthi	r0, [lr], #-0
    c850:	0a000031 	beq	c91c <__exidx_end+0x9ce4>
    c854:	00ce0142 	sbceq	r0, lr, r2, asr #2
    c858:	28840000 	stmcs	r4, {}	; <UNPREDICTABLE>
    c85c:	00180000 	andseq	r0, r8, r0
    c860:	9c010000 	stcls	0, cr0, [r1], {-0}
    c864:	00333022 	eorseq	r3, r3, r2, lsr #32
    c868:	99550100 	ldmdbls	r5, {r8}^
    c86c:	05000003 	streq	r0, [r0, #-3]
    c870:	00004003 	andeq	r4, r0, r3
    c874:	00ce2f20 	sbceq	r2, lr, r0, lsr #30
    c878:	08c10000 	stmiaeq	r1, {}^	; <UNPREDICTABLE>
    c87c:	c1300000 	teqgt	r0, r0
    c880:	0c000008 	stceq	0, cr0, [r0], {8}
    c884:	07040300 	streq	r0, [r4, -r0, lsl #6]
    c888:	000023aa 	andeq	r2, r0, sl, lsr #7
    c88c:	00326a22 	eorseq	r6, r2, r2, lsr #20
    c890:	d9610100 	stmdble	r1!, {r8}^
    c894:	05000008 	streq	r0, [r0, #-8]
    c898:	00000003 	andeq	r0, r0, r3
    c89c:	08b12d00 	ldmeq	r1!, {r8, sl, fp, sp}
    c8a0:	fa310000 	blx	c4c8a8 <__ccfg+0xc2c900>
    c8a4:	09000024 	stmdbeq	r0, {r2, r5}
    c8a8:	0008ef99 	muleq	r8, r9, pc	; <UNPREDICTABLE>
    c8ac:	00d90800 	sbcseq	r0, r9, r0, lsl #16
    c8b0:	31000000 	mrscc	r0, (UNDEF: 0)
    c8b4:	00002432 	andeq	r2, r0, r2, lsr r4
    c8b8:	0905f903 	stmdbeq	r5, {r0, r1, r8, fp, ip, sp, lr, pc}
    c8bc:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    c8c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    c8c4:	000000ce 	andeq	r0, r0, lr, asr #1
    c8c8:	246b3200 	strbtcs	r3, [fp], #-512	; 0xfffffe00
    c8cc:	10030000 	andne	r0, r3, r0
    c8d0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    c8d4:	00091b00 	andeq	r1, r9, r0, lsl #22
    c8d8:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    c8dc:	33000000 	movwcc	r0, #0
    c8e0:	00002157 	andeq	r2, r0, r7, asr r1
    c8e4:	00c3aa0b 	sbceq	sl, r3, fp, lsl #20
    c8e8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    c8ec:	04000003 	streq	r0, [r0], #-3
    c8f0:	00328d00 	eorseq	r8, r2, r0, lsl #26
    c8f4:	90010400 	andls	r0, r1, r0, lsl #8
    c8f8:	01000021 	tsteq	r0, r1, lsr #32
    c8fc:	00003617 	andeq	r3, r0, r7, lsl r6
    c900:	00002285 	andeq	r2, r0, r5, lsl #5
    c904:	00001150 	andeq	r1, r0, r0, asr r1
    c908:	00000000 	andeq	r0, r0, r0
    c90c:	0000717b 	andeq	r7, r0, fp, ror r1
    c910:	fd060102 	stc2	1, cr0, [r6, #-8]
    c914:	02000006 	andeq	r0, r0, #6
    c918:	06fb0801 	ldrbteq	r0, [fp], r1, lsl #16
    c91c:	02020000 	andeq	r0, r2, #0
    c920:	0005fe05 	andeq	pc, r5, r5, lsl #28
    c924:	07020200 	streq	r0, [r2, -r0, lsl #4]
    c928:	000007a7 	andeq	r0, r0, r7, lsr #15
    c92c:	c5050402 	strgt	r0, [r5, #-1026]	; 0xfffffbfe
    c930:	03000004 	movweq	r0, #4
    c934:	00000712 	andeq	r0, r0, r2, lsl r7
    c938:	00534103 	subseq	r4, r3, r3, lsl #2
    c93c:	04020000 	streq	r0, [r2], #-0
    c940:	0002fa07 	andeq	pc, r2, r7, lsl #20
    c944:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    c948:	000004c0 	andeq	r0, r0, r0, asr #9
    c94c:	f5070802 			; <UNDEFINED> instruction: 0xf5070802
    c950:	04000002 	streq	r0, [r0], #-2
    c954:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    c958:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    c95c:	0002ff07 	andeq	pc, r2, r7, lsl #30
    c960:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    c964:	20040000 	andcs	r0, r4, r0
    c968:	00000048 	andeq	r0, r0, r8, asr #32
    c96c:	63020105 	movwvs	r0, #8453	; 0x2105
    c970:	000000a2 	andeq	r0, r0, r2, lsr #1
    c974:	00355106 	eorseq	r5, r5, r6, lsl #2
    c978:	91060000 	mrsls	r0, (UNDEF: 6)
    c97c:	02000035 	andeq	r0, r0, #53	; 0x35
    c980:	00350106 	eorseq	r0, r5, r6, lsl #2
    c984:	41060400 	tstmi	r6, r0, lsl #8
    c988:	08000033 	stmdaeq	r0, {r0, r1, r4, r5}
    c98c:	34ed0300 	strbtcc	r0, [sp], #768	; 0x300
    c990:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    c994:	00000081 	andeq	r0, r0, r1, lsl #1
    c998:	a5020105 	strge	r0, [r2, #-261]	; 0xfffffefb
    c99c:	000000da 	ldrdeq	r0, [r0], -sl
    c9a0:	00360706 	eorseq	r0, r6, r6, lsl #14
    c9a4:	59067f00 	stmdbpl	r6, {r8, r9, sl, fp, ip, sp, lr}
    c9a8:	00000033 	andeq	r0, r0, r3, lsr r0
    c9ac:	0036b806 	eorseq	fp, r6, r6, lsl #16
    c9b0:	45060100 	strmi	r0, [r6, #-256]	; 0xffffff00
    c9b4:	02000035 	andeq	r0, r0, #53	; 0x35
    c9b8:	0036aa06 	eorseq	sl, r6, r6, lsl #20
    c9bc:	3e060300 	cdpcc	3, 0, cr0, cr6, cr0, {0}
    c9c0:	04000034 	streq	r0, [r0], #-52	; 0xffffffcc
    c9c4:	36c40300 	strbcc	r0, [r4], r0, lsl #6
    c9c8:	ac020000 	stcge	0, cr0, [r2], {-0}
    c9cc:	000000ad 	andeq	r0, r0, sp, lsr #1
    c9d0:	3d020107 	stfccs	f0, [r2, #-28]	; 0xffffffe4
    c9d4:	00012501 	andeq	r2, r1, r1, lsl #10
    c9d8:	351b0600 	ldrcc	r0, [fp, #-1536]	; 0xfffffa00
    c9dc:	067f0000 	ldrbteq	r0, [pc], -r0
    c9e0:	00003409 	andeq	r3, r0, r9, lsl #8
    c9e4:	34650600 	strbtcc	r0, [r5], #-1536	; 0xfffffa00
    c9e8:	06010000 	streq	r0, [r1], -r0
    c9ec:	000034a1 	andeq	r3, r0, r1, lsr #9
    c9f0:	35ec0602 	strbcc	r0, [ip, #1538]!	; 0x602
    c9f4:	06030000 	streq	r0, [r3], -r0
    c9f8:	00003365 	andeq	r3, r0, r5, ror #6
    c9fc:	342d0604 	strtcc	r0, [sp], #-1540	; 0xfffff9fc
    ca00:	06050000 	streq	r0, [r5], -r0
    ca04:	000035c6 	andeq	r3, r0, r6, asr #11
    ca08:	35d90606 	ldrbcc	r0, [r9, #1542]	; 0x606
    ca0c:	00070000 	andeq	r0, r7, r0
    ca10:	0033f108 	eorseq	pc, r3, r8, lsl #2
    ca14:	01470200 	mrseq	r0, (UNDEF: 103)
    ca18:	000000e5 	andeq	r0, r0, r5, ror #1
    ca1c:	59020107 	stmdbpl	r2, {r0, r1, r2, r8}
    ca20:	00015f01 	andeq	r5, r1, r1, lsl #30
    ca24:	34920600 	ldrcc	r0, [r2], #1536	; 0x600
    ca28:	067f0000 	ldrbteq	r0, [pc], -r0
    ca2c:	000034bb 			; <UNDEFINED> instruction: 0x000034bb
    ca30:	35370600 	ldrcc	r0, [r7, #-1536]!	; 0xfffffa00
    ca34:	06010000 	streq	r0, [r1], -r0
    ca38:	0000337e 	andeq	r3, r0, lr, ror r3
    ca3c:	35a10602 	strcc	r0, [r1, #1538]!	; 0x602
    ca40:	06030000 	streq	r0, [r3], -r0
    ca44:	00003454 	andeq	r3, r0, r4, asr r4
    ca48:	1a080004 	bne	20ca60 <__ccfg+0x1ecab8>
    ca4c:	02000034 	andeq	r0, r0, #52	; 0x34
    ca50:	01310160 	teqeq	r1, r0, ror #2
    ca54:	01070000 	mrseq	r0, (UNDEF: 7)
    ca58:	9901b802 	stmdbls	r1, {r1, fp, ip, sp, pc}
    ca5c:	06000001 	streq	r0, [r0], -r1
    ca60:	000034d1 	ldrdeq	r3, [r0], -r1
    ca64:	35fd067f 	ldrbcc	r0, [sp, #1663]!	; 0x67f
    ca68:	060a0000 	streq	r0, [sl], -r0
    ca6c:	00003562 	andeq	r3, r0, r2, ror #10
    ca70:	35870614 	strcc	r0, [r7, #1556]	; 0x614
    ca74:	06150000 	ldreq	r0, [r5], -r0
    ca78:	0000352d 	andeq	r3, r0, sp, lsr #10
    ca7c:	35b30616 	ldrcc	r0, [r3, #1558]!	; 0x616
    ca80:	00170000 	andseq	r0, r7, r0
    ca84:	0033fc08 	eorseq	pc, r3, r8, lsl #24
    ca88:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
    ca8c:	0000016b 	andeq	r0, r0, fp, ror #2
    ca90:	00364309 	eorseq	r4, r6, r9, lsl #6
    ca94:	01070200 	mrseq	r0, (UNDEF: 39)
    ca98:	00000076 	andeq	r0, r0, r6, ror r0
    ca9c:	33900a03 	orrscc	r0, r0, #12288	; 0x3000
    caa0:	6a020000 	bvs	8caa8 <__ccfg+0x6cb00>
    caa4:	00015f01 	andeq	r5, r1, r1, lsl #30
    caa8:	01da0100 	bicseq	r0, sl, r0, lsl #2
    caac:	c90b0000 	stmdbgt	fp, {}	; <UNPREDICTABLE>
    cab0:	01000034 	tsteq	r0, r4, lsr r0
    cab4:	00015f68 	andeq	r5, r1, r8, ror #30
    cab8:	33760b00 	cmncc	r6, #0, 22
    cabc:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    cac0:	00000076 	andeq	r0, r0, r6, ror r0
    cac4:	36f10900 	ldrbtcc	r0, [r1], r0, lsl #18
    cac8:	32020000 	andcc	r0, r2, #0
    cacc:	00007601 	andeq	r7, r0, r1, lsl #12
    cad0:	830c0300 	movwhi	r0, #49920	; 0xc300
    cad4:	02000036 	andeq	r0, r0, #54	; 0x36
    cad8:	0000a272 	andeq	sl, r0, r2, ror r2
    cadc:	00000000 	andeq	r0, r0, r0
    cae0:	00001000 	andeq	r1, r0, r0
    cae4:	0d9c0100 	ldfeqs	f0, [ip]
    cae8:	000033ad 	andeq	r3, r0, sp, lsr #7
    caec:	00dab602 	sbcseq	fp, sl, r2, lsl #12
    caf0:	00000000 	andeq	r0, r0, r0
    caf4:	00180000 	andseq	r0, r8, r0
    caf8:	9c010000 	stcls	0, cr0, [r1], {-0}
    cafc:	00000225 	andeq	r0, r0, r5, lsr #4
    cb00:	0033e80e 	eorseq	lr, r3, lr, lsl #16
    cb04:	da520100 	ble	148cf0c <__ccfg+0x146cf64>
    cb08:	41000000 	mrsmi	r0, (UNDEF: 0)
    cb0c:	00000043 	andeq	r0, r0, r3, asr #32
    cb10:	0001b20f 	andeq	fp, r1, pc, lsl #4
    cb14:	00289c00 	eoreq	r9, r8, r0, lsl #24
    cb18:	00004c00 	andeq	r4, r0, r0, lsl #24
    cb1c:	6e9c0100 	fmlvse	f0, f4, f0
    cb20:	10000002 	andne	r0, r0, r2
    cb24:	000001c3 	andeq	r0, r0, r3, asr #3
    cb28:	00004369 	andeq	r4, r0, r9, ror #6
    cb2c:	0001ce10 	andeq	ip, r1, r0, lsl lr
    cb30:	00438900 	subeq	r8, r3, r0, lsl #18
    cb34:	28ac1100 	stmiacs	ip!, {r8, ip}
    cb38:	000e0000 	andeq	r0, lr, r0
    cb3c:	c3120000 	tstgt	r2, #0
    cb40:	12000001 	andne	r0, r0, #1
    cb44:	000001ce 	andeq	r0, r0, lr, asr #3
    cb48:	0001a513 	andeq	sl, r1, r3, lsl r5
    cb4c:	0028ac00 	eoreq	sl, r8, r0, lsl #24
    cb50:	00000400 	andeq	r0, r0, r0, lsl #8
    cb54:	00700100 	rsbseq	r0, r0, r0, lsl #2
    cb58:	356c1400 	strbcc	r1, [ip, #-1024]!	; 0xfffffc00
    cb5c:	51020000 	mrspl	r0, (UNDEF: 2)
    cb60:	00012501 	andeq	r2, r1, r1, lsl #10
    cb64:	00000000 	andeq	r0, r0, r0
    cb68:	00003000 	andeq	r3, r0, r0
    cb6c:	ca9c0100 	bgt	fe70cf74 <_estack+0xde707f74>
    cb70:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    cb74:	000035bd 			; <UNDEFINED> instruction: 0x000035bd
    cb78:	01258501 			; <UNDEFINED> instruction: 0x01258501
    cb7c:	43bd0000 			; <UNDEFINED> instruction: 0x43bd0000
    cb80:	370b0000 	strcc	r0, [fp, -r0]
    cb84:	01000036 	tsteq	r0, r6, lsr r0
    cb88:	00007686 	andeq	r7, r0, r6, lsl #13
    cb8c:	34df0e00 	ldrbcc	r0, [pc], #3584	; cb94 <__exidx_end+0x9f5c>
    cb90:	87010000 	strhi	r0, [r1, -r0]
    cb94:	00000076 	andeq	r0, r0, r6, ror r0
    cb98:	000043dd 	ldrdeq	r4, [r0], -sp
    cb9c:	0001da13 	andeq	sp, r1, r3, lsl sl
    cba0:	00000000 	andeq	r0, r0, r0
    cba4:	00000400 	andeq	r0, r0, r0, lsl #8
    cba8:	15860100 	strne	r0, [r6, #256]	; 0x100
    cbac:	00000000 	andeq	r0, r0, r0
    cbb0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    cbb4:	36611600 	strbtcc	r1, [r1], -r0, lsl #12
    cbb8:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    cbbc:	00007601 	andeq	r7, r0, r1, lsl #12
    cbc0:	02e80300 	rsceq	r0, r8, #0, 6
    cbc4:	4b170000 	blmi	5ccbcc <__ccfg+0x5acc24>
    cbc8:	02000034 	andeq	r0, r0, #52	; 0x34
    cbcc:	0076011b 	rsbseq	r0, r6, fp, lsl r1
    cbd0:	14000000 	strne	r0, [r0], #-0
    cbd4:	000033cb 	andeq	r3, r0, fp, asr #7
    cbd8:	9901c902 	stmdbls	r1, {r1, r8, fp, lr, pc}
    cbdc:	e8000001 	stmda	r0, {r0}
    cbe0:	6c000028 	stcvs	0, cr0, [r0], {40}	; 0x28
    cbe4:	01000000 	mrseq	r0, (UNDEF: 0)
    cbe8:	0003659c 	muleq	r3, ip, r5
    cbec:	34270e00 	strtcc	r0, [r7], #-3584	; 0xfffff200
    cbf0:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    cbf4:	00000199 	muleq	r0, r9, r1
    cbf8:	000043f0 	strdeq	r4, [r0], -r0
    cbfc:	0034b20b 	eorseq	fp, r4, fp, lsl #4
    cc00:	76a90100 	strtvc	r0, [r9], r0, lsl #2
    cc04:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    cc08:	00003678 	andeq	r3, r0, r8, ror r6
    cc0c:	0076aa01 	rsbseq	sl, r6, r1, lsl #20
    cc10:	54010000 	strpl	r0, [r1], #-0
    cc14:	0001a519 	andeq	sl, r1, r9, lsl r5
    cc18:	0028ea00 	eoreq	lr, r8, r0, lsl #20
    cc1c:	00112000 	andseq	r2, r1, r0
    cc20:	1aa90100 	bne	fea4d028 <_estack+0xdea48028>
    cc24:	000002ca 	andeq	r0, r0, sl, asr #5
    cc28:	000028ee 	andeq	r2, r0, lr, ror #17
    cc2c:	00001138 	andeq	r1, r0, r8, lsr r1
    cc30:	035baa01 	cmpeq	fp, #4096	; 0x1000
    cc34:	381b0000 	ldmdacc	fp, {}	; <UNPREDICTABLE>
    cc38:	10000011 	andne	r0, r0, r1, lsl r0
    cc3c:	000002db 	ldrdeq	r0, [r0], -fp
    cc40:	0000444d 	andeq	r4, r0, sp, asr #8
    cc44:	02150000 	andseq	r0, r5, #0
    cc48:	b2000029 	andlt	r0, r0, #41	; 0x29
    cc4c:	00000001 	andeq	r0, r0, r1
    cc50:	00347609 	eorseq	r7, r4, r9, lsl #12
    cc54:	01830200 	orreq	r0, r3, r0, lsl #4
    cc58:	00000372 	andeq	r0, r0, r2, ror r3
    cc5c:	02010203 	andeq	r0, r1, #805306368	; 0x30000000
    cc60:	00000f41 	andeq	r0, r0, r1, asr #30
    cc64:	0036d209 	eorseq	sp, r6, r9, lsl #4
    cc68:	01f00200 	mvnseq	r0, r0, lsl #4
    cc6c:	00000372 	andeq	r0, r0, r2, ror r3
    cc70:	2bd31c03 	blcs	ff4d3c84 <_estack+0xdf4cec84>
    cc74:	43020000 	movwmi	r0, #8192	; 0x2000
    cc78:	00295402 	eoreq	r5, r9, r2, lsl #8
    cc7c:	00001600 	andeq	r1, r0, r0, lsl #12
    cc80:	1d9c0100 	ldfnes	f0, [ip]
    cc84:	00000365 	andeq	r0, r0, r5, ror #6
    cc88:	00002956 	andeq	r2, r0, r6, asr r9
    cc8c:	00000004 	andeq	r0, r0, r4
    cc90:	03b5e201 			; <UNDEFINED> instruction: 0x03b5e201
    cc94:	5a150000 	bpl	54cc9c <__ccfg+0x52ccf4>
    cc98:	b2000029 	andlt	r0, r0, #41	; 0x29
    cc9c:	00000001 	andeq	r0, r0, r1
    cca0:	0003791e 	andeq	r7, r3, lr, lsl r9
    cca4:	00295e00 	eoreq	r5, r9, r0, lsl #28
    cca8:	00000400 	andeq	r0, r0, r0, lsl #8
    ccac:	15e30100 	strbne	r0, [r3, #256]!	; 0x100
    ccb0:	00002962 	andeq	r2, r0, r2, ror #18
    ccb4:	000002e8 	andeq	r0, r0, r8, ror #5
    ccb8:	a7000000 	strge	r0, [r0, -r0]
    ccbc:	04000005 	streq	r0, [r0], #-5
    ccc0:	00345b00 	eorseq	r5, r4, r0, lsl #22
    ccc4:	90010400 	andls	r0, r1, r0, lsl #8
    ccc8:	01000021 	tsteq	r0, r1, lsr #32
    cccc:	000037c9 	andeq	r3, r0, r9, asr #15
    ccd0:	00002285 	andeq	r2, r0, r5, lsl #5
    ccd4:	00001188 	andeq	r1, r0, r8, lsl #3
    ccd8:	00000000 	andeq	r0, r0, r0
    ccdc:	000073aa 	andeq	r7, r0, sl, lsr #7
    cce0:	fd060102 	stc2	1, cr0, [r6, #-8]
    cce4:	03000006 	movweq	r0, #6
    cce8:	00000664 	andeq	r0, r0, r4, ror #12
    ccec:	00371d03 	eorseq	r1, r7, r3, lsl #26
    ccf0:	01020000 	mrseq	r0, (UNDEF: 2)
    ccf4:	0006fb08 	andeq	pc, r6, r8, lsl #22
    ccf8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    ccfc:	000005fe 	strdeq	r0, [r0], -lr
    cd00:	00033303 	andeq	r3, r3, r3, lsl #6
    cd04:	502b0300 	eorpl	r0, fp, r0, lsl #6
    cd08:	02000000 	andeq	r0, r0, #0
    cd0c:	07a70702 	streq	r0, [r7, r2, lsl #14]!
    cd10:	04020000 	streq	r0, [r2], #-0
    cd14:	0004c505 	andeq	ip, r4, r5, lsl #10
    cd18:	07120300 	ldreq	r0, [r2, -r0, lsl #6]
    cd1c:	41030000 	mrsmi	r0, (UNDEF: 3)
    cd20:	00000069 	andeq	r0, r0, r9, rrx
    cd24:	fa070402 	blx	1cdd34 <__ccfg+0x1add8c>
    cd28:	02000002 	andeq	r0, r0, #2
    cd2c:	04c00508 	strbeq	r0, [r0], #1288	; 0x508
    cd30:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    cd34:	0002f507 	andeq	pc, r2, r7, lsl #10
    cd38:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    cd3c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    cd40:	ff070402 			; <UNDEFINED> instruction: 0xff070402
    cd44:	03000002 	movweq	r0, #2
    cd48:	00000666 	andeq	r0, r0, r6, ror #12
    cd4c:	002c1404 	eoreq	r1, ip, r4, lsl #8
    cd50:	35030000 	strcc	r0, [r3, #-0]
    cd54:	04000003 	streq	r0, [r0], #-3
    cd58:	0000451a 	andeq	r4, r0, sl, lsl r5
    cd5c:	07140300 	ldreq	r0, [r4, -r0, lsl #6]
    cd60:	20040000 	andcs	r0, r4, r0
    cd64:	0000005e 	andeq	r0, r0, lr, asr r0
    cd68:	00374205 	eorseq	r4, r7, r5, lsl #4
    cd6c:	03890100 	orreq	r0, r9, #0, 2
    cd70:	000000e6 	andeq	r0, r0, r6, ror #1
    cd74:	00372406 	eorseq	r2, r7, r6, lsl #8
    cd78:	a2890100 	addge	r0, r9, #0, 2
    cd7c:	06000000 	streq	r0, [r0], -r0
    cd80:	00003795 	muleq	r0, r5, r7
    cd84:	00a28901 	adceq	r8, r2, r1, lsl #18
    cd88:	fc060000 	stc2	0, cr0, [r6], {-0}
    cd8c:	01000037 	tsteq	r0, r7, lsr r0
    cd90:	0000a289 	andeq	sl, r0, r9, lsl #5
    cd94:	37f00700 	ldrbcc	r0, [r0, r0, lsl #14]!
    cd98:	8c010000 	stchi	0, cr0, [r1], {-0}
    cd9c:	000000e6 	andeq	r0, r0, r6, ror #1
    cda0:	02010200 	andeq	r0, r1, #0, 4
    cda4:	00000f41 	andeq	r0, r0, r1, asr #30
    cda8:	0037a308 	eorseq	sl, r7, r8, lsl #6
    cdac:	a2a90100 	adcge	r0, r9, #0, 2
    cdb0:	03000000 	movweq	r0, #0
    cdb4:	0000012a 	andeq	r0, r0, sl, lsr #2
    cdb8:	00372406 	eorseq	r2, r7, r6, lsl #8
    cdbc:	a2a90100 	adcge	r0, r9, #0, 2
    cdc0:	06000000 	streq	r0, [r0], -r0
    cdc4:	000037fc 	strdeq	r3, [r0], -ip
    cdc8:	00a2a901 	adceq	sl, r2, r1, lsl #18
    cdcc:	3d070000 	stccc	0, cr0, [r7, #-0]
    cdd0:	01000037 	tsteq	r0, r7, lsr r0
    cdd4:	0000a2ab 	andeq	sl, r0, fp, lsr #5
    cdd8:	37f00700 	ldrbcc	r0, [r0, r0, lsl #14]!
    cddc:	ad010000 	stcge	0, cr0, [r1, #-0]
    cde0:	000000e6 	andeq	r0, r0, r6, ror #1
    cde4:	00ad0900 	adceq	r0, sp, r0, lsl #18
    cde8:	296c0000 	stmdbcs	ip!, {}^	; <UNPREDICTABLE>
    cdec:	00280000 	eoreq	r0, r8, r0
    cdf0:	9c010000 	stcls	0, cr0, [r1], {-0}
    cdf4:	00000171 	andeq	r0, r0, r1, ror r1
    cdf8:	0000b90a 	andeq	fp, r0, sl, lsl #18
    cdfc:	00446000 	subeq	r6, r4, r0
    ce00:	00c40a00 	sbceq	r0, r4, r0, lsl #20
    ce04:	44a50000 	strtmi	r0, [r5], #0
    ce08:	da0b0000 	ble	2cce10 <__ccfg+0x2ace68>
    ce0c:	ea000000 	b	ce14 <__exidx_end+0xa1dc>
    ce10:	0c000044 	stceq	0, cr0, [r0], {68}	; 0x44
    ce14:	000000cf 	andeq	r0, r0, pc, asr #1
    ce18:	29760d04 	ldmdbcs	r6!, {r2, r8, sl, fp}^
    ce1c:	05940000 	ldreq	r0, [r4]
    ce20:	8e0e0000 	cdphi	0, 0, cr0, cr14, cr0, {0}
    ce24:	9f000029 	svcls	0x00000029
    ce28:	00000005 	andeq	r0, r0, r5
    ce2c:	002ded0f 	eoreq	lr, sp, pc, lsl #26
    ce30:	01ca0100 	biceq	r0, sl, r0, lsl #2
    ce34:	00002994 	muleq	r0, r4, r9
    ce38:	00000008 	andeq	r0, r0, r8
    ce3c:	01d19c01 	bicseq	r9, r1, r1, lsl #24
    ce40:	ca100000 	bgt	40ce48 <__ccfg+0x3ecea0>
    ce44:	0200000a 	andeq	r0, r0, #10
    ce48:	0000a242 	andeq	sl, r0, r2, asr #4
    ce4c:	00451000 	subeq	r1, r5, r0
    ce50:	37041000 	strcc	r1, [r4, -r0]
    ce54:	42020000 	andmi	r0, r2, #0
    ce58:	000000a2 	andeq	r0, r0, r2, lsr #1
    ce5c:	00004531 	andeq	r4, r0, r1, lsr r5
    ce60:	00379b10 	eorseq	r9, r7, r0, lsl fp
    ce64:	a2430200 	subge	r0, r3, #0, 4
    ce68:	52000000 	andpl	r0, r0, #0
    ce6c:	11000045 	tstne	r0, r5, asr #32
    ce70:	0000299c 	muleq	r0, ip, r9
    ce74:	0000012a 	andeq	r0, r0, sl, lsr #2
    ce78:	03510112 	cmpeq	r1, #-2147483644	; 0x80000004
    ce7c:	125201f3 	subsne	r0, r2, #-1073741764	; 0xc000003c
    ce80:	f3075001 	vhadd.u8	d5, d7, d1
    ce84:	01f35001 	mvnseq	r5, r1
    ce88:	00002251 	andeq	r2, r0, r1, asr r2
    ce8c:	0037b50f 	eorseq	fp, r7, pc, lsl #10
    ce90:	01df0100 	bicseq	r0, pc, r0, lsl #2
    ce94:	00000000 	andeq	r0, r0, r0
    ce98:	00000022 	andeq	r0, r0, r2, lsr #32
    ce9c:	02ea9c01 	rsceq	r9, sl, #256	; 0x100
    cea0:	ca100000 	bgt	40cea8 <__ccfg+0x3ecf00>
    cea4:	0200000a 	andeq	r0, r0, #10
    cea8:	0000a257 	andeq	sl, r0, r7, asr r2
    ceac:	00457300 	subeq	r7, r5, r0, lsl #6
    ceb0:	37041000 	strcc	r1, [r4, -r0]
    ceb4:	57020000 	strpl	r0, [r2, -r0]
    ceb8:	000000a2 	andeq	r0, r0, r2, lsr #1
    cebc:	00004594 	muleq	r0, r4, r5
    cec0:	001aab10 	andseq	sl, sl, r0, lsl fp
    cec4:	a2580200 	subsge	r0, r8, #0, 4
    cec8:	b5000000 	strlt	r0, [r0, #-0]
    cecc:	10000045 	andne	r0, r0, r5, asr #32
    ced0:	0000375e 	andeq	r3, r0, lr, asr r7
    ced4:	00a25802 	adceq	r5, r2, r2, lsl #16
    ced8:	46000000 	strmi	r0, [r0], -r0
    cedc:	e4130000 	ldr	r0, [r3], #-0
    cee0:	02000037 	andeq	r0, r0, #55	; 0x37
    cee4:	0000a25a 	andeq	sl, r0, sl, asr r2
    cee8:	00462100 	subeq	r2, r6, r0, lsl #2
    ceec:	37691300 	strbcc	r1, [r9, -r0, lsl #6]!
    cef0:	5b020000 	blpl	8cef8 <__ccfg+0x6cf50>
    cef4:	000000a2 	andeq	r0, r0, r2, lsr #1
    cef8:	000046b5 			; <UNDEFINED> instruction: 0x000046b5
    cefc:	00000011 	andeq	r0, r0, r1, lsl r0
    cf00:	00012a00 	andeq	r2, r1, r0, lsl #20
    cf04:	51011200 	mrspl	r1, R9_usr
    cf08:	5201f345 	andpl	pc, r1, #335544321	; 0x14000001
    cf0c:	01f32540 	mvnseq	r2, r0, asr #10
    cf10:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    cf14:	2e302540 	cfneg32cs	mvfx2, mvfx0
    cf18:	16000128 	strne	r0, [r0], -r8, lsr #2
    cf1c:	30244013 	eorcc	r4, r4, r3, lsl r0
    cf20:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    cf24:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    cf28:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    cf2c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    cf30:	13160001 	tstne	r6, #1
    cf34:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    cf38:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    cf3c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    cf40:	f3131600 	vmax.u16	d1, d3, d0
    cf44:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    cf48:	16000128 	strne	r0, [r0], -r8, lsr #2
    cf4c:	01122113 	tsteq	r2, r3, lsl r1
    cf50:	01f35150 	mvnseq	r5, r0, asr r1
    cf54:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    cf58:	23225001 			; <UNDEFINED> instruction: 0x23225001
    cf5c:	01f30480 	mvnseq	r0, r0, lsl #9
    cf60:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    cf64:	f3225001 	vhadd.u32	d5, d2, d1
    cf68:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    cf6c:	01282930 			; <UNDEFINED> instruction: 0x01282930
    cf70:	23131600 	tstcs	r3, #0, 12
    cf74:	01f30484 	mvnseq	r0, r4, lsl #9
    cf78:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    cf7c:	23225001 			; <UNDEFINED> instruction: 0x23225001
    cf80:	01f30480 	mvnseq	r0, r0, lsl #9
    cf84:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    cf88:	f3225001 	vhadd.u32	d5, d2, d1
    cf8c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    cf90:	01282930 			; <UNDEFINED> instruction: 0x01282930
    cf94:	f3131600 	vmax.u16	d1, d3, d0
    cf98:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    cf9c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    cfa0:	00131600 	andseq	r1, r3, r0, lsl #12
    cfa4:	377c0f00 	ldrbcc	r0, [ip, -r0, lsl #30]!
    cfa8:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    cfac:	00000001 	andeq	r0, r0, r1
    cfb0:	00002e00 	andeq	r2, r0, r0, lsl #28
    cfb4:	1f9c0100 	svcne	0x009c0100
    cfb8:	10000004 	andne	r0, r0, r4
    cfbc:	00000aca 	andeq	r0, r0, sl, asr #21
    cfc0:	00a28302 	adceq	r8, r2, r2, lsl #6
    cfc4:	47010000 	strmi	r0, [r1, -r0]
    cfc8:	04100000 	ldreq	r0, [r0], #-0
    cfcc:	02000037 	andeq	r0, r0, #55	; 0x37
    cfd0:	0000a283 	andeq	sl, r0, r3, lsl #5
    cfd4:	00472200 	subeq	r2, r7, r0, lsl #4
    cfd8:	1aab1000 	bne	fead0fe0 <_estack+0xdeacbfe0>
    cfdc:	84020000 	strhi	r0, [r2], #-0
    cfe0:	000000a2 	andeq	r0, r0, r2, lsr #1
    cfe4:	00004743 	andeq	r4, r0, r3, asr #14
    cfe8:	00377210 	eorseq	r7, r7, r0, lsl r2
    cfec:	a2840200 	addge	r0, r4, #0, 4
    cff0:	94000000 	strls	r0, [r0], #-0
    cff4:	10000047 	andne	r0, r0, r7, asr #32
    cff8:	00003769 	andeq	r3, r0, r9, ror #14
    cffc:	00978502 	addseq	r8, r7, r2, lsl #10
    d000:	47e50000 	strbmi	r0, [r5, r0]!
    d004:	e4130000 	ldr	r0, [r3], #-0
    d008:	02000037 	andeq	r0, r0, #55	; 0x37
    d00c:	0000a287 	andeq	sl, r0, r7, lsl #5
    d010:	00480500 	subeq	r0, r8, r0, lsl #10
    d014:	375e1300 	ldrbcc	r1, [lr, -r0, lsl #6]
    d018:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    d01c:	000000a2 	andeq	r0, r0, r2, lsr #1
    d020:	000048ab 	andeq	r4, r0, fp, lsr #17
    d024:	00000011 	andeq	r0, r0, r1, lsl r0
    d028:	00012a00 	andeq	r2, r1, r0, lsl #20
    d02c:	51011200 	mrspl	r1, R9_usr
    d030:	5201f340 	andpl	pc, r1, #64, 6
    d034:	01f32540 	mvnseq	r2, r0, asr #10
    d038:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    d03c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    d040:	00000f0c 	andeq	r0, r0, ip, lsl #30
    d044:	01282b80 	smlawbeq	r8, r0, fp, r2
    d048:	40131600 	andsmi	r1, r3, r0, lsl #12
    d04c:	94007d24 	strls	r7, [r0], #-3364	; 0xfffff2dc
    d050:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    d054:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
    d058:	01f31c40 	mvnseq	r1, r0, asr #24
    d05c:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    d060:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    d064:	00000f0c 	andeq	r0, r0, ip, lsl #30
    d068:	01282b80 	smlawbeq	r8, r0, fp, r2
    d06c:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
    d070:	50011221 	andpl	r1, r1, r1, lsr #4
    d074:	5101f363 	tstpl	r1, r3, ror #6	; <UNPREDICTABLE>
    d078:	01f32431 	mvnseq	r2, r1, lsr r4
    d07c:	80232250 	eorhi	r2, r3, r0, asr r2
    d080:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    d084:	01f32431 	mvnseq	r2, r1, lsr r4
    d088:	01f32250 	mvnseq	r2, r0, asr r2
    d08c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    d090:	000f0c22 	andeq	r0, pc, r2, lsr #24
    d094:	282c8000 	stmdacs	ip!, {pc}
    d098:	13160001 	tstne	r6, #1
    d09c:	f3048423 	vshl.u8	d8, d19, d4
    d0a0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    d0a4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    d0a8:	f3048023 	vhadd.u8	d8, d4, d19
    d0ac:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    d0b0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    d0b4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    d0b8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    d0bc:	8000000f 	andhi	r0, r0, pc
    d0c0:	0001282c 	andeq	r2, r1, ip, lsr #16
    d0c4:	01f31316 	mvnseq	r1, r6, lsl r3
    d0c8:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    d0cc:	000f0c22 	andeq	r0, pc, r2, lsr #24
    d0d0:	282b8000 	stmdacs	fp!, {pc}
    d0d4:	13160001 	tstne	r6, #1
    d0d8:	2a140000 	bcs	50d0e0 <__ccfg+0x4ed138>
    d0dc:	01000037 	tsteq	r0, r7, lsr r0
    d0e0:	00970208 	addseq	r0, r7, r8, lsl #4
    d0e4:	00000000 	andeq	r0, r0, r0
    d0e8:	00340000 	eorseq	r0, r4, r0
    d0ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    d0f0:	000004d2 	ldrdeq	r0, [r0], -r2
    d0f4:	000aca10 	andeq	ip, sl, r0, lsl sl
    d0f8:	a2af0200 	adcge	r0, pc, #0, 4
    d0fc:	0b000000 	bleq	d104 <__exidx_end+0xa4cc>
    d100:	10000049 	andne	r0, r0, r9, asr #32
    d104:	00003704 	andeq	r3, r0, r4, lsl #14
    d108:	00a2af02 	adceq	sl, r2, r2, lsl #30
    d10c:	492c0000 	stmdbmi	ip!, {}	; <UNPREDICTABLE>
    d110:	ab100000 	blge	40d118 <__ccfg+0x3ed170>
    d114:	0200001a 	andeq	r0, r0, #26
    d118:	0000a2af 	andeq	sl, r0, pc, lsr #5
    d11c:	00494d00 	subeq	r4, r9, r0, lsl #26
    d120:	37e41300 	strbcc	r1, [r4, r0, lsl #6]!
    d124:	b1020000 	mrslt	r0, (UNDEF: 2)
    d128:	000000a2 	andeq	r0, r0, r2, lsr #1
    d12c:	0000498a 	andeq	r4, r0, sl, lsl #19
    d130:	00375513 	eorseq	r5, r7, r3, lsl r5
    d134:	97b20200 	ldrls	r0, [r2, r0, lsl #4]!
    d138:	c4000000 	strgt	r0, [r0], #-0
    d13c:	15000049 	strne	r0, [r0, #-73]	; 0xffffffb7
    d140:	000000ed 	andeq	r0, r0, sp, ror #1
    d144:	00000000 	andeq	r0, r0, r0
    d148:	0000001a 	andeq	r0, r0, sl, lsl r0
    d14c:	080cca02 	stmdaeq	ip, {r1, r9, fp, lr, pc}
    d150:	02000001 	andeq	r0, r0, #1
    d154:	0000fd0a 	andeq	pc, r0, sl, lsl #26
    d158:	0049dc00 	subeq	sp, r9, r0, lsl #24
    d15c:	00001600 	andeq	r1, r0, r0, lsl #12
    d160:	001a0000 	andseq	r0, sl, r0
    d164:	130b0000 	movwne	r0, #45056	; 0xb000
    d168:	16000001 	strne	r0, [r0], -r1
    d16c:	0b00004a 	bleq	d29c <__exidx_end+0xa664>
    d170:	0000011e 	andeq	r0, r0, lr, lsl r1
    d174:	00004a2f 	andeq	r4, r0, pc, lsr #20
    d178:	0000000d 	andeq	r0, r0, sp
    d17c:	00059400 	andeq	r9, r5, r0, lsl #8
    d180:	00000d00 	andeq	r0, r0, r0, lsl #26
    d184:	059f0000 	ldreq	r0, [pc]	; d18c <__exidx_end+0xa554>
    d188:	00000000 	andeq	r0, r0, r0
    d18c:	370c1400 	strcc	r1, [ip, -r0, lsl #8]
    d190:	1d010000 	stcne	0, cr0, [r1, #-0]
    d194:	00009702 	andeq	r9, r0, r2, lsl #14
    d198:	00000000 	andeq	r0, r0, r0
    d19c:	00004000 	andeq	r4, r0, r0
    d1a0:	949c0100 	ldrls	r0, [ip], #256	; 0x100
    d1a4:	10000005 	andne	r0, r0, r5
    d1a8:	00000aca 	andeq	r0, r0, sl, asr #21
    d1ac:	00a2dd02 	adceq	sp, r2, r2, lsl #26
    d1b0:	4a460000 	bmi	118d1b8 <__ccfg+0x116d210>
    d1b4:	04100000 	ldreq	r0, [r0], #-0
    d1b8:	02000037 	andeq	r0, r0, #55	; 0x37
    d1bc:	0000a2dd 	ldrdeq	sl, [r0], -sp
    d1c0:	004a6700 	subeq	r6, sl, r0, lsl #14
    d1c4:	1aab1000 	bne	fead11cc <_estack+0xdeacc1cc>
    d1c8:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    d1cc:	000000a2 	andeq	r0, r0, r2, lsr #1
    d1d0:	00004a88 	andeq	r4, r0, r8, lsl #21
    d1d4:	00377210 	eorseq	r7, r7, r0, lsl r2
    d1d8:	a2de0200 	sbcsge	r0, lr, #0, 4
    d1dc:	cb000000 	blgt	d1e4 <__exidx_end+0xa5ac>
    d1e0:	1300004a 	movwne	r0, #74	; 0x4a
    d1e4:	000037e4 	andeq	r3, r0, r4, ror #15
    d1e8:	00a2e002 	adceq	lr, r2, r2
    d1ec:	4b0e0000 	blmi	38d1f4 <__ccfg+0x36d24c>
    d1f0:	55130000 	ldrpl	r0, [r3, #-0]
    d1f4:	02000037 	andeq	r0, r0, #55	; 0x37
    d1f8:	000097e1 	andeq	r9, r0, r1, ror #15
    d1fc:	004b6900 	subeq	r6, fp, r0, lsl #18
    d200:	00ed1500 	rsceq	r1, sp, r0, lsl #10
    d204:	00000000 	andeq	r0, r0, r0
    d208:	001a0000 	andseq	r0, sl, r0
    d20c:	fa020000 	blx	8d214 <__ccfg+0x6d26c>
    d210:	0001080c 	andeq	r0, r1, ip, lsl #16
    d214:	fd0a0200 	stc2	2, cr0, [sl, #-0]
    d218:	8c000000 	stchi	0, cr0, [r0], {-0}
    d21c:	1600004b 	strne	r0, [r0], -fp, asr #32
    d220:	00000000 	andeq	r0, r0, r0
    d224:	0000001a 	andeq	r0, r0, sl, lsl r0
    d228:	0001130b 	andeq	r1, r1, fp, lsl #6
    d22c:	004bcc00 	subeq	ip, fp, r0, lsl #24
    d230:	011e0b00 	tsteq	lr, r0, lsl #22
    d234:	4be50000 	blmi	ff94d23c <_estack+0xdf94823c>
    d238:	000d0000 	andeq	r0, sp, r0
    d23c:	94000000 	strls	r0, [r0], #-0
    d240:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    d244:	00000000 	andeq	r0, r0, r0
    d248:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    d24c:	17000000 	strne	r0, [r0, -r0]
    d250:	000023e8 	andeq	r2, r0, r8, ror #7
    d254:	00a26a05 	adceq	r6, r2, r5, lsl #20
    d258:	f7170000 			; <UNDEFINED> instruction: 0xf7170000
    d25c:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
    d260:	0000a284 	andeq	sl, r0, r4, lsl #5
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
}
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	03001605 	movweq	r1, #1541	; 0x605
      3c:	3b0b3a0e 	blcc	2ce87c <__ccfg+0x2ae8d4>
			i = k;
      40:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				j->Next = k;
      44:	06000013 			; <UNDEFINED> instruction: 0x06000013
      48:	0b0b0117 	bleq	2c04ac <__ccfg+0x2a0504>
}
      4c:	0b3b0b3a 	bleq	ec2d3c <__ccfg+0xea2d94>
      50:	13010b39 	movwne	r0, #6969	; 0x1b39
      54:	0d070000 	stceq	0, cr0, [r7, #-0]
		release;
      58:	3a0e0300 	bcc	380c60 <__ccfg+0x360cb8>
      5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      60:	0013490b 	andseq	r4, r3, fp, lsl #18
      64:	01010800 	tsteq	r1, r0, lsl #16
      68:	13011349 	movwne	r1, #4937	; 0x1349
      6c:	21090000 	mrscs	r0, (UNDEF: 9)
      70:	2f134900 	svccs	0x00134900
      74:	0a00000b 	beq	a8 <g_pfnVectors+0xa8>
      78:	0b0b0113 	bleq	2c04cc <__ccfg+0x2a0524>
      7c:	0b3b0b3a 	bleq	ec2d6c <__ccfg+0xea2dc4>
      80:	13010b39 	movwne	r0, #6969	; 0x1b39
      84:	0d0b0000 	stceq	0, cr0, [fp, #-0]
      88:	3a0e0300 	bcc	380c90 <__ccfg+0x360ce8>
      8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	descriptors [fd] = s;
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0c00000b 	stceq	0, cr0, [r0], {11}
      98:	0b0b000f 	bleq	2c00dc <__ccfg+0x2a0134>
	if (s == NULL)
      9c:	130d0000 	movwne	r0, #53248	; 0xd000
		syserror (EMALLOC, "tcv05");
      a0:	0b0e0301 	bleq	380cac <__ccfg+0x360d04>
      a4:	3b0b3a0b 	blcc	2ce8d8 <__ccfg+0x2ae930>
      a8:	0013010b 	andseq	r0, r3, fp, lsl #2
      ac:	000d0e00 	andeq	r0, sp, r0, lsl #28
      b0:	13490e03 	movtne	r0, #40451	; 0x9e03
      b4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
      b8:	130f0000 	movwne	r0, #61440	; 0xf000
      bc:	0b0e0301 	bleq	380cc8 <__ccfg+0x360d20>
      c0:	3b0b3a0b 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      c4:	010b390b 	tsteq	fp, fp, lsl #18
      c8:	10000013 	andne	r0, r0, r3, lsl r0
      cc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
      d0:	0b3b0b3a 	bleq	ec2dc0 <__ccfg+0xea2e18>
      d4:	13490b39 	movtne	r0, #39737	; 0x9b39
      d8:	00000b38 	andeq	r0, r0, r8, lsr fp
      dc:	0b000f11 	bleq	3d28 <__exidx_end+0x10f0>
      e0:	0013490b 	andseq	r4, r3, fp, lsl #18
      e4:	01131200 	tsteq	r3, r0, lsl #4
      e8:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
      ec:	0b3b0b3a 	bleq	ec2ddc <__ccfg+0xea2e34>
      f0:	13010b39 	movwne	r0, #6969	; 0x1b39
			wwait (st, 50);
      f4:	0d130000 	ldceq	0, cr0, [r3, #-0]
			curr += 0x1000;
      f8:	3a0e0300 	bcc	380d00 <__ccfg+0x360d58>
      fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (from >= EE_SIZE || upto < from)
     100:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     104:	14000005 	strne	r0, [r0], #-5
			upto = EE_SIZE - 1;
     108:	0c270015 	stceq	0, cr0, [r7], #-84	; 0xffffffac
     10c:	15150000 	ldrne	r0, [r5, #-0]
     110:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     114:	00130113 	andseq	r0, r3, r3, lsl r1
     118:	00051600 	andeq	r1, r5, r0, lsl #12
     11c:	00001349 	andeq	r1, r0, r9, asr #6
     120:	49002617 	stmdbmi	r0, {r0, r1, r2, r4, r9, sl, sp}
     124:	18000013 	stmdane	r0, {r0, r1, r4}
        switch (choice)
     128:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     12c:	0b3a050b 	bleq	e81560 <__ccfg+0xe615b8>
     130:	0b39053b 	bleq	e41624 <__ccfg+0xe2167c>
     134:	00001301 	andeq	r1, r0, r1, lsl #6
     138:	03000d19 	movweq	r0, #3353	; 0xd19
     13c:	3b0b3a0e 	blcc	2ce97c <__ccfg+0x2ae9d4>
     140:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     144:	000b3813 	andeq	r3, fp, r3, lsl r8
     148:	000d1a00 	andeq	r1, sp, r0, lsl #20
        proceed Menu_Header;
     14c:	0b3a0e03 	bleq	e83960 <__ccfg+0xe639b8>
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	0b39053b 	bleq	e41644 <__ccfg+0xe2169c>
     154:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	131b0000 	tstne	fp, #0
     15c:	0b0e0301 	bleq	380d68 <__ccfg+0x360dc0>
     160:	3b0b3a0b 	blcc	2ce994 <__ccfg+0x2ae9ec>
        proceed Menu_Header;
     164:	010b3905 	tsteq	fp, r5, lsl #18
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	1c000013 	stcne	0, cr0, [r0], {19}
     16c:	0b0b0113 	bleq	2c05c0 <__ccfg+0x2a0618>
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     174:	13010b39 	movwne	r0, #6969	; 0x1b39
     178:	171d0000 	ldrne	r0, [sp, -r0]
    if (node < 1 || node > 25) {
     17c:	3a0b0b01 	bcc	2c2d88 <__ccfg+0x2a2de0>
     180:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
            proceed Set_Node_ID;
     184:	0013010b 	andseq	r0, r3, fp, lsl #2
     188:	000d1e00 	andeq	r1, sp, r0, lsl #28
        proceed Menu_Header;
     18c:	0b3a0e03 	bleq	e839a0 <__ccfg+0xe639f8>
     190:	0b39053b 	bleq	e41684 <__ccfg+0xe216dc>
            proceed Set_Group_ID;
     194:	00001349 	andeq	r1, r0, r9, asr #6
            proceed Set_Node_ID;
     198:	0300131f 	movweq	r1, #799	; 0x31f
     19c:	000c3c0e 	andeq	r3, ip, lr, lsl #24
            diag("Find neighbours");
     1a0:	01152000 	tsteq	r5, r0
            diag("Reset Local Storage");
     1a4:	13010c27 	movwne	r0, #7207	; 0x1c27
            diag("Create Record on Neighbour");
     1a8:	34210000 	strtcc	r0, [r1], #-0
            diag("Delete Record on Neighbour");
     1ac:	3a0e0300 	bcc	380db4 <__ccfg+0x360e0c>
            diag("Retrieve Record on Neighbour");
     1b0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
            diag("Show Local Records");
     1b4:	3f13490b 	svccc	0x0013490b
            diag("Reset Local Storage");
     1b8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     1bc:	00352200 	eorseq	r2, r5, r0, lsl #4
     1c0:	00001349 	andeq	r1, r0, r9, asr #6
     1c4:	03000d23 	movweq	r0, #3363	; 0xd23
     1c8:	3b0b3a0e 	blcc	2cea08 <__ccfg+0x2aea60>
     1cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     1d0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     1d4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     1d8:	2400000b 	strcs	r0, [r0], #-11
     1dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1e0:	0b3b0b3a 	bleq	ec2ed0 <__ccfg+0xea2f28>
     1e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1e8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     1ec:	21250000 			; <UNDEFINED> instruction: 0x21250000
     1f0:	26000000 	strcs	r0, [r0], -r0
     1f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1f8:	0b3b0b3a 	bleq	ec2ee8 <__ccfg+0xea2f40>
     1fc:	13490b39 	movtne	r0, #39737	; 0x9b39
static void devinit_uart (int devnum) {
     200:	0a020c3f 	beq	83304 <__ccfg+0x6335c>
	adddevfunc (ioreq_uart_a, devnum);
     204:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     208:	030c3f01 	movweq	r3, #52993	; 0xcf01
void udelay (volatile word n) {
     20c:	3b0b3a0e 	blcc	2cea4c <__ccfg+0x2aeaa4>
     210:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	while (n) {
     214:	1201110c 	andne	r1, r1, #12, 2
     218:	010a4001 	tsteq	sl, r1
}
     21c:	28000013 	stmdacs	r0, {r0, r1, r4}
	while (n--);
     220:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     224:	0b3b0b3a 	bleq	ec2f14 <__ccfg+0xea2f6c>
     228:	13490b39 	movtne	r0, #39737	; 0x9b39
		n--;
     22c:	00000602 	andeq	r0, r0, r2, lsl #12
     230:	03000a29 	movweq	r0, #2601	; 0xa29
     234:	3b0b3a0e 	blcc	2cea74 <__ccfg+0x2aeacc>
void mdelay (volatile word n) {
     238:	110b390b 	tstne	fp, fp, lsl #18
     23c:	2a000001 	bcs	248 <mdelay+0x10>
	while (n) {
     240:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     244:	342b0000 	strtcc	r0, [fp], #-0
}
     248:	3a0e0300 	bcc	380e50 <__ccfg+0x360ea8>
		udelay (999);
     24c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     250:	0013490b 	andseq	r4, r3, fp, lsl #18
		n--;
     254:	010b2c00 	tsteq	fp, r0, lsl #24
     258:	13010655 	movwne	r0, #5717	; 0x1655
     25c:	342d0000 	strtcc	r0, [sp], #-0
     260:	3a0e0300 	bcc	380e68 <__ccfg+0x360ec0>
void __pi_ondomain (lword d) {
     264:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     268:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (__pi_systat.effpdm > 1)
     26c:	2e00000a 	cdpcs	0, 0, cr0, cr0, cr10, {0}
     270:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			__pi_systat.effpdm = 1;
     274:	01120111 	tsteq	r2, r1, lsl r1
	PRCMPowerDomainOn (d);
     278:	0b590b58 	bleq	1642fe0 <__ccfg+0x1623038>
     27c:	00000b57 	andeq	r0, r0, r7, asr fp
     280:	3100052f 	tstcc	r0, pc, lsr #10
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     284:	00060213 	andeq	r0, r6, r3, lsl r2
     288:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
     28c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	__pi_systat.ondmns |= d;
     290:	0b3b0b3a 	bleq	ec2f80 <__ccfg+0xea2fd8>
     294:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
     298:	0b201349 	bleq	804fc4 <__ccfg+0x7e501c>
     29c:	00001301 	andeq	r1, r0, r1, lsl #6
void __pi_syserror (word ec, const char *m) {
     2a0:	03000531 	movweq	r0, #1329	; 0x531
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	3b0b3a0e 	blcc	2ceae4 <__ccfg+0x2aeb3c>
     2a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	32000013 	andcc	r0, r0, #19
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2b0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     2b4:	01120111 	tsteq	r2, r1, lsl r1
     2b8:	00000a40 	andeq	r0, r0, r0, asr #20
		all_leds_blink;
     2bc:	01110100 	tsteq	r1, r0, lsl #2
     2c0:	0b130e25 	bleq	4c3b5c <__ccfg+0x4a3bb4>
     2c4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     2c8:	01110655 	tsteq	r1, r5, asr r6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	00000610 	andeq	r0, r0, r0, lsl r6
     2d0:	0b002402 	bleq	92e0 <__exidx_end+0x66a8>
     2d4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     2d8:	0300000e 	movweq	r0, #14
     2dc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     2e0:	0b3b0b3a 	bleq	ec2fd0 <__ccfg+0xea3028>
	while (1) {
     2e4:	13490b39 	movtne	r0, #39737	; 0x9b39
     2e8:	24040000 	strcs	r0, [r4], #-0
     2ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     2f0:	0008030b 	andeq	r0, r8, fp, lsl #6
void tci_run_delay_timer () {
     2f4:	00260500 	eoreq	r0, r6, r0, lsl #10
	setdel = __pi_mintk - __pi_old;
     2f8:	00001349 	andeq	r1, r0, r9, asr #6
     2fc:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
     300:	07000013 	smladeq	r0, r3, r0, r0
     304:	0b0b000f 	bleq	2c0348 <__ccfg+0x2a03a0>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     308:	00001349 	andeq	r1, r0, r9, asr #6
     30c:	0b011308 	bleq	44f34 <__ccfg+0x24f8c>
     310:	3b0b3a0b 	blcc	2ceb44 <__ccfg+0x2aeb9c>
     314:	010b390b 	tsteq	fp, fp, lsl #18
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	09000013 	stmdbeq	r0, {r0, r1, r4}
	sti_tim;
     31c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
}
     320:	0b3b0b3a 	bleq	ec3010 <__ccfg+0xea3068>
     324:	13490b39 	movtne	r0, #39737	; 0x9b39
     328:	0b0d0b0b 	bleq	342f5c <__ccfg+0x322fb4>
     32c:	0b380b0c 	bleq	e02f64 <__ccfg+0xde2fbc>
     330:	0d0a0000 	stceq	0, cr0, [sl, #-0]
	cli_aux;
     334:	3a0e0300 	bcc	380f3c <__ccfg+0x360f94>
     338:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     33c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     340:	0b00000b 	bleq	374 <AONRTCIntHandler+0x18>
     344:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     348:	0b3b0b3a 	bleq	ec3038 <__ccfg+0xea3090>
	sti_aux;
     34c:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     350:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     354:	010c0000 	mrseq	r0, (UNDEF: 12)
     358:	01134901 	tsteq	r3, r1, lsl #18
void AONRTCIntHandler () {
     35c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     360:	00000021 	andeq	r0, r0, r1, lsr #32
     364:	0300160e 	movweq	r1, #1550	; 0x60e
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	3b0b3a0e 	blcc	2ceba8 <__ccfg+0x2aec00>
		if (__pi_utims [0] == 0)
     36c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     370:	0f000013 	svceq	0x00000013
		if (*(__pi_utims [0])) {
     374:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     378:	00001301 	andeq	r1, r0, r1, lsl #6
			(*(__pi_utims [0]))--;
     37c:	49000510 	stmdbmi	r0, {r4, r8, sl}
		if (__pi_utims [1] == 0)
     380:	11000013 	tstne	r0, r3, lsl r0
		if (*(__pi_utims [1])) {
     384:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			aux_timer_inactive = 0;
     388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			(*(__pi_utims [1]))--;
     38c:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (__pi_utims [2] == 0)
     390:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		if (*(__pi_utims [2])) {
     394:	13120000 	tstne	r2, #0
			(*(__pi_utims [2]))--;
     398:	3a0b0b01 	bcc	2c2fa4 <__ccfg+0x2a2ffc>
		if (__pi_utims [3] != 0) {
     39c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (*(__pi_utims [3])) {
     3a0:	0013010b 	andseq	r0, r3, fp, lsl #2
				aux_timer_inactive = 0;
     3a4:	000d1300 	andeq	r1, sp, r0, lsl #6
				(*(__pi_utims [3]))--;
     3a8:	0b3a0e03 	bleq	e83bbc <__ccfg+0xe63c14>
	if (__pi_systat.ledsts) {
     3ac:	0b39053b 	bleq	e418a0 <__ccfg+0xe218f8>
     3b0:	0b381349 	bleq	e050dc <__ccfg+0xde5134>
		if (__pi_systat.ledblc++ == 0) {
     3b4:	13140000 	tstne	r4, #0
     3b8:	0b0e0301 	bleq	380fc4 <__ccfg+0x36101c>
			if (__pi_systat.ledblk) {
     3bc:	3b0b3a0b 	blcc	2cebf0 <__ccfg+0x2aec48>
     3c0:	010b3905 	tsteq	fp, r5, lsl #18
     3c4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	13490021 	movtne	r0, #36897	; 0x9021
     3cc:	00000b2f 	andeq	r0, r0, pc, lsr #22
				if (__pi_systat.ledsts & 0x2)
     3d0:	03003416 	movweq	r3, #1046	; 0x416
     3d4:	3b0b3a0e 	blcc	2cec14 <__ccfg+0x2aec6c>
     3d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				if (__pi_systat.ledsts & 0x4)
     3dc:	17000013 	smladne	r0, r3, r0, r0
				__pi_systat.ledblk = 0;
     3e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3e4:	0b3b0b3a 	bleq	ec30d4 <__ccfg+0xea312c>
			if (__pi_systat.fstblk)
     3e8:	13490b39 	movtne	r0, #39737	; 0x9b39
     3ec:	0a020c3f 	beq	834f0 <__ccfg+0x63548>
				__pi_systat.ledblc = 200;
     3f0:	34180000 	ldrcc	r0, [r8], #-0
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f4:	3a0e0300 	bcc	380ffc <__ccfg+0x361054>
		cli_tim;
     3f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		__pi_new += setdel;
     3fc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     400:	1900000a 	stmdbne	r0, {r1, r3}
		setdel = 0;
     404:	13470034 	movtne	r0, #28724	; 0x7034
		RISE_N_SHINE;
     408:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		__pi_new += setdel;
     40c:	0a020b39 	beq	830f8 <__ccfg+0x63150>
		RISE_N_SHINE;
     410:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     414:	030c3f01 	movweq	r3, #52993	; 0xcf01
		aux_timer_inactive = 1;
     418:	3b0b3a0e 	blcc	2cec58 <__ccfg+0x2aecb0>
     41c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
				if (__pi_systat.ledsts & 0x1)
     420:	1113490c 	tstne	r3, ip, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     424:	40011201 	andmi	r1, r1, r1, lsl #4
     428:	0013010a 	andseq	r0, r3, sl, lsl #2
				if (__pi_systat.ledsts & 0x2)
     42c:	010b1b00 	tsteq	fp, r0, lsl #22
     430:	13010655 	movwne	r0, #5717	; 0x1655
     434:	341c0000 	ldrcc	r0, [ip], #-0
				if (__pi_systat.ledsts & 0x8)
     438:	3a080300 	bcc	201040 <__ccfg+0x1e1098>
				__pi_systat.ledblk = 1;
     43c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     440:	0013490b 	andseq	r4, r3, fp, lsl #18
		if (aux_timer_inactive) {
     444:	001d1d00 	andseq	r1, sp, r0, lsl #26
			cli_aux;
     448:	01111331 	tsteq	r1, r1, lsr r3
     44c:	0b580112 	bleq	160089c <__ccfg+0x15e08f4>
     450:	0b570559 	bleq	15c19bc <__ccfg+0x15a1a14>
     454:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     458:	030c3f01 	movweq	r3, #52993	; 0xcf01
     45c:	3b0b3a0e 	blcc	2cec9c <__ccfg+0x2aecf4>
     460:	110b3905 	tstne	fp, r5, lsl #18
     464:	40011201 	andmi	r1, r1, r1, lsl #4
     468:	0013010a 	andseq	r0, r3, sl, lsl #2
     46c:	000a1f00 	andeq	r1, sl, r0, lsl #30
word tci_update_delay_ticks (Boolean force) {
     470:	0b3a0e03 	bleq	e83c84 <__ccfg+0xe63cdc>
	cli_tim;
     474:	0b390b3b 	bleq	e43168 <__ccfg+0xe231c0>
     478:	1d200000 	stcne	0, cr0, [r0, #-0]
	if (setdel) {
     47c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     484:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     488:	0013010b 	andseq	r0, r3, fp, lsl #2
     48c:	00052100 	andeq	r2, r5, r0, lsl #2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     490:	00001331 	andeq	r1, r0, r1, lsr r3
				AON_RTC_O_CH0CMP)) - gettav ());
     494:	31011d22 	tstcc	r1, r2, lsr #26
	return NO;
     498:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
			setdel = 0;
     49c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     4a0:	010b570b 	tsteq	fp, fp, lsl #14
     4a4:	23000013 	movwcs	r0, #19
}
     4a8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
		sti_tim;
     4ac:	0a240000 	beq	9004b4 <__ccfg+0x8e050c>
		return YES;
     4b0:	11133100 	tstne	r3, r0, lsl #2
     4b4:	25000001 	strcs	r0, [r0, #-1]
     4b8:	1331001d 	teqne	r1, #29
     4bc:	06550152 			; <UNDEFINED> instruction: 0x06550152
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	UARTDisable (UART0_BASE);
     4c4:	00000b57 	andeq	r0, r0, r7, asr fp
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	31011d26 	tstcc	r1, r6, lsr #26
	UARTDisable (UART0_BASE);
     4cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     4d4:	010b5705 	tsteq	fp, r5, lsl #14
     4d8:	27000013 	smladcs	r0, r3, r0, r0
     4dc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	01120111 	tsteq	r2, r1, lsl r1
     4e4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     4e8:	00000b57 	andeq	r0, r0, r7, asr fp
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	31001d28 	tstcc	r0, r8, lsr #26
     4f0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     4f4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	urates [0] = rate;
     4f8:	000b570b 	andeq	r5, fp, fp, lsl #14
}
     4fc:	00342900 	eorseq	r2, r4, r0, lsl #18
     500:	0b3a0803 	bleq	e82514 <__ccfg+0xe6256c>
     504:	0b39053b 	bleq	e419f8 <__ccfg+0xe21a50>
     508:	06021349 	streq	r1, [r2], -r9, asr #6
     50c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     510:	3a0e0301 	bcc	38111c <__ccfg+0x361174>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     514:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     518:	010b200b 	tsteq	fp, fp
     51c:	2b000013 	blcs	570 <ioreq_uart_a+0x24>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     524:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     528:	00000b39 	andeq	r0, r0, r9, lsr fp
     52c:	3f012e2c 	svccc	0x00012e2c
	__pi_uart_setrate (urates [0], __pi_uart);
     530:	3a0e030c 	bcc	381168 <__ccfg+0x3611c0>
     534:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     538:	110c270b 	tstne	ip, fp, lsl #14
     53c:	40011201 	andmi	r1, r1, r1, lsl #4
     540:	0013010a 	andseq	r0, r3, sl, lsl #2
     544:	00052d00 	andeq	r2, r5, r0, lsl #26
     548:	0b3a0e03 	bleq	e83d5c <__ccfg+0xe63db4>
	switch (operation) {
     54c:	0b39053b 	bleq	e41a40 <__ccfg+0xe21a98>
static int ioreq_uart_a (int operation, char *buf, int len) {
     550:	06021349 	streq	r1, [r2], -r9, asr #6
     554:	0b2e0000 	bleq	b8055c <__ccfg+0xb605b4>
     558:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     55c:	00130101 	andseq	r0, r3, r1, lsl #2
     560:	00342f00 	eorseq	r2, r4, r0, lsl #30
				*buf++ = uart_a_read;
     564:	00001331 	andeq	r1, r0, r1, lsr r3
     568:	31010b30 	tstcc	r1, r0, lsr fp
			while (len && uart_a_char_available) {
     56c:	00065513 	andeq	r5, r6, r3, lsl r5
     570:	00343100 	eorseq	r3, r4, r0, lsl #2
     574:	06021331 			; <UNDEFINED> instruction: 0x06021331
			if (len != operation) {
     578:	1d320000 	ldcne	0, cr0, [r2, #-0]
}
     57c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     580:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
			uart_a_disable_int;
     584:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
			if (uart_a_char_available) {
     588:	3300000b 	movwcc	r0, #11
				*buf++ = uart_a_read;
     58c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
			uart_a_disable_int;
     590:	06550152 			; <UNDEFINED> instruction: 0x06550152
     594:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
			if (uart_a_char_available) {
     598:	00000b57 	andeq	r0, r0, r7, asr fp
     59c:	03000534 	movweq	r0, #1332	; 0x534
				uart_a_enable_int;
     5a0:	3b0b3a08 	blcc	2cedc8 <__ccfg+0x2aee20>
     5a4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				goto Redo_rx;
     5a8:	000a0213 	andeq	r0, sl, r3, lsl r2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5ac:	00053500 	andeq	r3, r5, r0, lsl #10
     5b0:	06021331 			; <UNDEFINED> instruction: 0x06021331
			return -2;
     5b4:	34360000 	ldrtcc	r0, [r6], #-0
     5b8:	3a080300 	bcc	2011c0 <__ccfg+0x1e1218>
				uart_a_write (*buf);
     5bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     5c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			while (len && uart_a_room_in_tx) {
     5c4:	37000006 	strcc	r0, [r0, -r6]
     5c8:	0111010b 	tsteq	r1, fp, lsl #2
     5cc:	00000112 	andeq	r0, r0, r2, lsl r1
			if (len != operation) {
     5d0:	03002e38 	movweq	r2, #3640	; 0xe38
			uart_a_disable_int;
     5d4:	3b0b3a0e 	blcc	2cee14 <__ccfg+0x2aee6c>
     5d8:	200b3905 	andcs	r3, fp, r5, lsl #18
			if (uart_a_room_in_tx) {
     5dc:	3900000b 	stmdbcc	r0, {r0, r1, r3}
     5e0:	0e03012e 	adfeqsp	f0, f3, #0.5
				uart_a_enable_int;
     5e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     5e8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				*buf++ = uart_a_read;
     5ec:	01120111 	tsteq	r2, r1, lsl r1
			if (uart_a_room_in_tx) {
     5f0:	13010a40 	movwne	r0, #6720	; 0x1a40
				uart_a_write (*buf);
     5f4:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
     5f8:	3a0e0301 	bcc	381204 <__ccfg+0x36125c>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     600:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			uart_a_enable_int;
     604:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     608:	010a4001 	tsteq	sl, r1
     60c:	3b000013 	blcc	660 <UART0IntHandler+0x4>
			return 0;
     610:	08030005 	stmdaeq	r3, {r0, r2}
			if (len == UART_CNTRL_SETRATE) {
     614:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (__pi_uart_setrate (*((word*)buf),
     618:	13490b39 	movtne	r0, #39737	; 0x9b39
     61c:	00000602 	andeq	r0, r0, r2, lsl #12
     620:	03012e3c 	movweq	r2, #7740	; 0x1e3c
				syserror (EREQPAR, "uar");
     624:	3b0b3a0e 	blcc	2cee64 <__ccfg+0x2aeebc>
			syserror (ENOOPER, "uai");
     628:	110b3905 	tstne	fp, r5, lsl #18
			if (len == UART_CNTRL_GETRATE) {
     62c:	40011201 	andmi	r1, r1, r1, lsl #4
				return 1;
     630:	0013010a 	andseq	r0, r3, sl, lsl #2
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     634:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
			syserror (ENOOPER, "uai");
     638:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     63c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     640:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     644:	0b201349 	bleq	805370 <__ccfg+0x7e53c8>
     648:	00001301 	andeq	r1, r0, r1, lsl #6
     64c:	0300053e 	movweq	r0, #1342	; 0x53e
     650:	3b0b3a08 	blcc	2cee78 <__ccfg+0x2aeed0>
     654:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     658:	3f000013 	svccc	0x00000013
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     65c:	0803000a 	stmdaeq	r3, {r1, r3}
void UART0IntHandler () {
     660:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	00000b39 	andeq	r0, r0, r9, lsr fp
     668:	03003440 	movweq	r3, #1088	; 0x440
     66c:	3b0b3a0e 	blcc	2ceeac <__ccfg+0x2aef04>
     670:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     674:	00060213 	andeq	r0, r6, r3, lsl r2
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     678:	000a4100 	andeq	r4, sl, r0, lsl #2
     67c:	0b3a0803 	bleq	e82690 <__ccfg+0xe626e8>
		RISE_N_SHINE;
     680:	0b39053b 	bleq	e41b74 <__ccfg+0xe21bcc>
     684:	00000111 	andeq	r0, r0, r1, lsl r1
		i_trigger (devevent (UART_A, READ));
     688:	31011d42 	tstcc	r1, r2, asr #26
     68c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     690:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     694:	010b570b 	tsteq	fp, fp, lsl #14
     698:	43000013 	movwmi	r0, #19
     69c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     6a0:	01120111 	tsteq	r2, r1, lsl r1
     6a4:	0b590b58 	bleq	164340c <__ccfg+0x1623464>
     6a8:	00000b57 	andeq	r0, r0, r7, asr fp
     6ac:	03012e44 	movweq	r2, #7748	; 0x1e44
     6b0:	3b0b3a0e 	blcc	2ceef0 <__ccfg+0x2aef48>
     6b4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b8:	2013490c 	andscs	r4, r3, ip, lsl #18
     6bc:	0013010b 	andseq	r0, r3, fp, lsl #2
     6c0:	002e4500 	eoreq	r4, lr, r0, lsl #10
		i_trigger (devevent (UART_A, WRITE));
     6c4:	0b3a0e03 	bleq	e83ed8 <__ccfg+0xe63f30>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	0b39053b 	bleq	e41bbc <__ccfg+0xe21c14>
     6cc:	0b201349 	bleq	8053f8 <__ccfg+0x7e5450>
		RISE_N_SHINE;
     6d0:	2e460000 	cdpcs	0, 4, cr0, cr6, cr0, {0}
     6d4:	3a0e0301 	bcc	3812e0 <__ccfg+0x361338>
     6d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		i_trigger (devevent (UART_A, WRITE));
     6dc:	010b200b 	tsteq	fp, fp
     6e0:	47000013 	smladmi	r0, r3, r0, r0
     6e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
     6e8:	0b3b0b3a 	bleq	ec33d8 <__ccfg+0xea3430>
     6ec:	13490b39 	movtne	r0, #39737	; 0x9b39
     6f0:	0b480000 	bleq	12006f8 <__ccfg+0x11e0750>
     6f4:	49000001 	stmdbmi	r0, {r0}
     6f8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 648 <ioreq_uart_a+0xfc>
     6fc:	0b3a0e03 	bleq	e83f10 <__ccfg+0xe63f68>
     700:	0b390b3b 	bleq	e433f4 <__ccfg+0xe2344c>
     704:	01110c27 	tsteq	r1, r7, lsr #24
}
     708:	0a400112 	beq	1000b58 <__ccfg+0xfe0bb0>
     70c:	00001301 	andeq	r1, r0, r1, lsl #6
     710:	0300054a 	movweq	r0, #1354	; 0x54a
     714:	3b0b3a08 	blcc	2cef3c <__ccfg+0x2aef94>
     718:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
void __buttons_setirq (int val) {
     71c:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	00344b00 	eorseq	r4, r4, r0, lsl #22
     724:	0b3a0e03 	bleq	e83f38 <__ccfg+0xe63f90>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	0b390b3b 	bleq	e4341c <__ccfg+0xe23474>
     72c:	0a021349 	beq	85458 <__ccfg+0x654b0>
     730:	0a4c0000 	beq	1300738 <__ccfg+0x12e0790>
		bn = BUTTON_GPIO (__button_list [i]);
     734:	3a0e0300 	bcc	38133c <__ccfg+0x361394>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     738:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     73c:	0001110b 	andeq	r1, r1, fp, lsl #2
     740:	001d4d00 	andseq	r4, sp, r0, lsl #26
     744:	01521331 	cmpeq	r2, r1, lsr r3
     748:	0b580655 	bleq	16020a4 <__ccfg+0x15e20fc>
     74c:	0b570b59 	bleq	15c34b8 <__ccfg+0x15a3510>
}
     750:	2e4e0000 	cdpcs	0, 4, cr0, cr14, cr0, {0}
     754:	030c3f00 	movweq	r3, #52992	; 0xcf00
     758:	3b0b3a0e 	blcc	2cef98 <__ccfg+0x2aeff0>
     75c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
void __pinlist_setirq (int val) {
     760:	1201110c 	andne	r1, r1, #12, 2
	for (i = 0; i < N_PINLIST; i++) {
     764:	000a4001 	andeq	r4, sl, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     768:	00054f00 	andeq	r4, r5, r0, lsl #30
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     76c:	0b3a0803 	bleq	e82780 <__ccfg+0xe627d8>
	for (i = 0; i < N_PINLIST; i++) {
     770:	0b390b3b 	bleq	e43464 <__ccfg+0xe234bc>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     774:	0a021349 	beq	854a0 <__ccfg+0x654f8>
     778:	2e500000 	cdpcs	0, 5, cr0, cr0, cr0, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77c:	3a0e0301 	bcc	381388 <__ccfg+0x3613e0>
     780:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     784:	200c270b 	andcs	r2, ip, fp, lsl #14
	for (i = 0; i < N_PINLIST; i++) {
     788:	0013010b 	andseq	r0, r3, fp, lsl #2
}
     78c:	00055100 	andeq	r5, r5, r0, lsl #2
     790:	0b3a0803 	bleq	e827a4 <__ccfg+0xe627fc>
     794:	0b390b3b 	bleq	e43488 <__ccfg+0xe234e0>
     798:	00001349 	andeq	r1, r0, r9, asr #6
void GPIOIntHandler () {
     79c:	03012e52 	movweq	r2, #7762	; 0x1e52
if (buttons_int) {
     7a0:	3b0b3a0e 	blcc	2cefe0 <__ccfg+0x2af038>
     7a4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	buttons_disable ();
     7a8:	010b200c 	tsteq	fp, ip
     7ac:	53000013 	movwpl	r0, #19
	i_trigger ((aword)&__button_list);
     7b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     7b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7b8:	13490b39 	movtne	r0, #39737	; 0x9b39
     7bc:	2e540000 	cdpcs	0, 5, cr0, cr4, cr0, {0}
     7c0:	3a0e0300 	bcc	3813c8 <__ccfg+0x361420>
     7c4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     7c8:	200c270b 	andcs	r2, ip, fp, lsl #14
     7cc:	5500000b 	strpl	r0, [r0, #-11]
     7d0:	0e03012e 	adfeqsp	f0, f3, #0.5
     7d4:	0b3b0b3a 	bleq	ec34c4 <__ccfg+0xea351c>
     7d8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	RISE_N_SHINE;
     7dc:	0b201349 	bleq	805508 <__ccfg+0x7e5560>
     7e0:	00001301 	andeq	r1, r0, r1, lsl #6
     7e4:	03002e56 	movweq	r2, #3670	; 0xe56
if (pin_sensor_int) {
     7e8:	3b0b3a0e 	blcc	2cf028 <__ccfg+0x2af080>
     7ec:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	i_trigger ((aword)(&__input_pins));
     7f0:	000b200c 	andeq	r2, fp, ip
     7f4:	002e5700 	eoreq	r5, lr, r0, lsl #14
     7f8:	0b3a0e03 	bleq	e8400c <__ccfg+0xe64064>
     7fc:	0b390b3b 	bleq	e434f0 <__ccfg+0xe23548>
     800:	13490c27 	movtne	r0, #39975	; 0x9c27
     804:	00000b20 	andeq	r0, r0, r0, lsr #22
     808:	03002e58 	movweq	r2, #3672	; 0xe58
     80c:	3b0b3a0e 	blcc	2cf04c <__ccfg+0x2af0a4>
     810:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     814:	2013490c 	andscs	r4, r3, ip, lsl #18
     818:	5900000b 	stmdbpl	r0, {r0, r1, r3}
	__pinsen_disable_and_clear;
     81c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
	RISE_N_SHINE;
     820:	01120111 	tsteq	r2, r1, lsl r1
     824:	00000a40 	andeq	r0, r0, r0, asr #20
     828:	01110100 	tsteq	r1, r0, lsl #2
}
     82c:	0b130e25 	bleq	4c40c8 <__ccfg+0x4a4120>
     830:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     834:	01110655 	tsteq	r1, r5, asr r6
     838:	00000610 	andeq	r0, r0, r0, lsl r6
     83c:	0b002402 	bleq	984c <__exidx_end+0x6c14>
void system_init () {
     840:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	0300000e 	movweq	r0, #14
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     848:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	0b3b0b3a 	bleq	ec353c <__ccfg+0xea3594>
     850:	13490b39 	movtne	r0, #39737	; 0x9b39
     854:	24040000 	strcs	r0, [r4], #-0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     858:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     85c:	0008030b 	andeq	r0, r8, fp, lsl #6
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	01130500 	tsteq	r3, r0, lsl #10
     864:	0b0b0e03 	bleq	2c4078 <__ccfg+0x2a40d0>
     868:	0b3b0b3a 	bleq	ec3558 <__ccfg+0xea35b0>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     870:	03000d06 	movweq	r0, #3334	; 0xd06
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     874:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     878:	000c340b 	andeq	r3, ip, fp, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87c:	000f0700 	andeq	r0, pc, r0, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     880:	00000b0b 	andeq	r0, r0, fp, lsl #22
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	09000013 	stmdbeq	r0, {r0, r1, r4}
		pin = (port_confs [i] >> 19) & 0x1f;
     88c:	13490035 	movtne	r0, #36917	; 0x9035
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     890:	0f0a0000 	svceq	0x000a0000
     894:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     898:	0b000013 	bleq	8ec <system_init+0xac>
     89c:	0b0b0113 	bleq	2c0cf0 <__ccfg+0x2a0d48>
		if (port_confs [i] & 0x80)
     8a0:	0b3b0b3a 	bleq	ec3590 <__ccfg+0xea35e8>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a4:	13010b39 	movwne	r0, #6969	; 0x1b39
     8a8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
		if (port_confs [i] & 0x40)
     8ac:	3a0e0300 	bcc	3814b4 <__ccfg+0x36150c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8b4:	0b13490b 	bleq	4d2ce8 <__ccfg+0x4b2d40>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b8:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8bc:	000b380b 	andeq	r3, fp, fp, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8c0:	000d0d00 	andeq	r0, sp, r0, lsl #26
	all_leds_blink;
     8c4:	0b3a0e03 	bleq	e840d8 <__ccfg+0xe64130>
     8c8:	0b390b3b 	bleq	e435bc <__ccfg+0xe23614>
     8cc:	0b381349 	bleq	e055f8 <__ccfg+0xde5650>
     8d0:	340e0000 	strcc	r0, [lr], #-0
     8d4:	3a0e0300 	bcc	3814dc <__ccfg+0x361534>
     8d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8dc:	3f13490b 	svccc	0x0013490b
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8e0:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     8e4:	01010f00 	tsteq	r1, r0, lsl #30
     8e8:	13011349 	movwne	r1, #4937	; 0x1349
     8ec:	21100000 	tstcs	r0, r0
     8f0:	11000000 	mrsne	r0, (UNDEF: 0)
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8fc:	13490b39 	movtne	r0, #39737	; 0x9b39
	IntEnable (INT_AON_RTC_COMB);
     900:	15120000 	ldrne	r0, [r2, #-0]
     904:	010c2701 	tsteq	ip, r1, lsl #14
     908:	13000013 	movwne	r0, #19
	__pi_malloc_init ();
     90c:	13490005 	movtne	r0, #36869	; 0x9005
	IntEnable (INT_AON_GPIO_EDGE);
     910:	34140000 	ldrcc	r0, [r4], #-0
     914:	3a0e0300 	bcc	38151c <__ccfg+0x361574>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     918:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     91c:	3f13490b 	svccc	0x0013490b
     920:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     924:	01131500 	tsteq	r3, r0, lsl #10
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     928:	0b3a0b0b 	bleq	e8355c <__ccfg+0xe635b4>
     92c:	0b39053b 	bleq	e41e20 <__ccfg+0xe21e78>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     930:	00001301 	andeq	r1, r0, r1, lsl #6
     934:	03000d16 	movweq	r0, #3350	; 0xd16
     938:	3b0b3a0e 	blcc	2cf178 <__ccfg+0x2af1d0>
	urates [0] = UART_RATE / 100;
     93c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     940:	000b3813 	andeq	r3, fp, r3, lsl r8
	reinit_uart ();
     944:	01131700 	tsteq	r3, r0, lsl #14
	EXTRA_INITIALIZERS;
     948:	0b0b0e03 	bleq	2c415c <__ccfg+0x2a41b4>
     94c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     950:	13010b39 	movwne	r0, #6969	; 0x1b39
     954:	21180000 	tstcs	r8, r0
     958:	2f134900 	svccs	0x00134900
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     95c:	1900000b 	stmdbne	r0, {r0, r1, r3}
     960:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     964:	13011349 	movwne	r1, #4937	; 0x1349
     968:	341a0000 	ldrcc	r0, [sl], #-0
			devinit [i] . init (devinit [i] . param);
     96c:	3a134700 	bcc	4d2574 <__ccfg+0x4b25cc>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     970:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     974:	000a020b 	andeq	r0, sl, fp, lsl #4
     978:	00341b00 	eorseq	r1, r4, r0, lsl #22
	IntEnable (INT_UART0_COMB);
     97c:	0b3a0e03 	bleq	e84190 <__ccfg+0xe641e8>
     980:	0b390b3b 	bleq	e43674 <__ccfg+0xe236cc>
}
     984:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 868 <system_init+0x28>
	tci_run_auxiliary_timer ();
     988:	00000a02 	andeq	r0, r0, r2, lsl #20
		diag ("");
     98c:	0300341c 	movweq	r3, #1052	; 0x41c
     990:	3b0b3a0e 	blcc	2cf1d0 <__ccfg+0x2af228>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     994:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     998:	000a0213 	andeq	r0, sl, r3, lsl r2
		diag ("Leftover RAM: %d bytes",
     99c:	00341d00 	eorseq	r1, r4, r0, lsl #26
     9a0:	0b3a0e03 	bleq	e841b4 <__ccfg+0xe6420c>
     9a4:	0b39053b 	bleq	e41e98 <__ccfg+0xe21ef0>
     9a8:	0a021349 	beq	856d4 <__ccfg+0x6572c>
     9ac:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     9b0:	030c3f00 	movweq	r3, #52992	; 0xcf00
     9b4:	3b0b3a0e 	blcc	2cf1f4 <__ccfg+0x2af24c>
     9b8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     9bc:	1113490c 	tstne	r3, ip, lsl #18
     9c0:	40011201 	andmi	r1, r1, r1, lsl #4
     9c4:	1f00000a 	svcne	0x0000000a
     9c8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 918 <system_init+0xd8>
     9cc:	0b3a0e03 	bleq	e841e0 <__ccfg+0xe64238>
     9d0:	0b39053b 	bleq	e41ec4 <__ccfg+0xe21f1c>
     9d4:	01110c27 	tsteq	r1, r7, lsr #24
     9d8:	0a400112 	beq	1000e28 <__ccfg+0xfe0e80>
     9dc:	00001301 	andeq	r1, r0, r1, lsl #6
     9e0:	03000520 	movweq	r0, #1312	; 0x520
     9e4:	3b0b3a0e 	blcc	2cf224 <__ccfg+0x2af27c>
     9e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     9ec:	00060213 	andeq	r0, r6, r3, lsl r2
     9f0:	00182100 	andseq	r2, r8, r0, lsl #2
     9f4:	34220000 	strtcc	r0, [r2], #-0
__attribute__ ((noreturn)) void __pi_release () {
     9f8:	3a080300 	bcc	201600 <__ccfg+0x1e1658>
     9fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a00:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a04:	23000006 	movwcs	r0, #6
	check_stack_overflow;
     a08:	08030034 	stmdaeq	r3, {r2, r4, r5}
     a0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a10:	13490b39 	movtne	r0, #39737	; 0x9b39
	update_n_wake (MAX_WORD, NO);
     a14:	00000a02 	andeq	r0, r0, r2, lsl #20
     a18:	03003424 	movweq	r3, #1060	; 0x424
     a1c:	3b0b3a08 	blcc	2cf244 <__ccfg+0x2af29c>
	for_all_tasks (__pi_curr) {
     a20:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a24:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     a28:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	__SLEEP;
     a30:	01110b39 	tsteq	r1, r9, lsr fp
     a34:	0b260000 	bleq	980a3c <__ccfg+0x960a94>
     a38:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     a3c:	00130101 	andseq	r0, r3, r1, lsl #2
	system_event_count ++;
     a40:	010b2700 	tsteq	fp, r0, lsl #14
     a44:	13010655 	movwne	r0, #5717	; 0x1655
	switch (__pi_systat.effpdm) {
     a48:	1d280000 	stcne	0, cr0, [r8, #-0]
     a4c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     a50:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     a54:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			__WFI ();
     a58:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     a5c:	13310005 	teqne	r1, #5
     a60:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
	check_stack_overflow;
     a64:	3a0e0301 	bcc	381670 <__ccfg+0x3616c8>
     a68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     a6c:	110c270b 	tstne	ip, fp, lsl #14
     a70:	40011201 	andmi	r1, r1, r1, lsl #4
			(__pi_curr->code) (tstate (__pi_curr));
     a74:	0013010a 	andseq	r0, r3, sl, lsl #2
			goto Redo;
     a78:	00052b00 	andeq	r2, r5, r0, lsl #22
	for_all_tasks (__pi_curr) {
     a7c:	0b3a0803 	bleq	e82a90 <__ccfg+0xe62ae8>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	0b39053b 	bleq	e41f74 <__ccfg+0xe21fcc>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a84:	06021349 	streq	r1, [r2], -r9, asr #6
     a88:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     a8c:	030c3f01 	movweq	r3, #52993	; 0xcf01
     a90:	3b0b3a0e 	blcc	2cf2d0 <__ccfg+0x2af328>
     a94:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a98:	1113490c 	tstne	r3, ip, lsl #18
     a9c:	40011201 	andmi	r1, r1, r1, lsl #4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     aa0:	0013010a 	andseq	r0, r3, sl, lsl #2
     aa4:	00342d00 	eorseq	r2, r4, r0, lsl #26
			__WFI ();
     aa8:	0b3a0e03 	bleq	e842bc <__ccfg+0xe64314>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     aac:	0b39053b 	bleq	e41fa0 <__ccfg+0xe21ff8>
     ab0:	06021349 	streq	r1, [r2], -r9, asr #6
}
     ab4:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     abc:	3b0b3a0e 	blcc	2cf2fc <__ccfg+0x2af354>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ac0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     ac4:	010b200c 	tsteq	fp, ip
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac8:	2f000013 	svccs	0x00000013
     acc:	08030005 	stmdaeq	r3, {r0, r2}
     ad0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ad4:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad8:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
     adc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     ae0:	3b0b3a0e 	blcc	2cf320 <__ccfg+0x2af378>
     ae4:	110b3905 	tstne	fp, r5, lsl #18
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ae8:	40011201 	andmi	r1, r1, r1, lsl #4
     aec:	0013010a 	andseq	r0, r3, sl, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     af4:	08030c3f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, sl, fp}
     af8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     afc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     b00:	01111349 	tsteq	r1, r9, asr #6
     b04:	0a400112 	beq	1000f54 <__ccfg+0xfe0fac>
			SysCtrlSetRechargeBeforePowerDown
     b08:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b0c:	03000532 	movweq	r0, #1330	; 0x532
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b10:	3b0b3a08 	blcc	2cf338 <__ccfg+0x2af390>
     b14:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	000a0213 	andeq	r0, sl, r3, lsl r2
     b1c:	002e3300 	eoreq	r3, lr, r0, lsl #6
     b20:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b28:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	01120111 	tsteq	r2, r1, lsl r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	00000a40 	andeq	r0, r0, r0, asr #20
     b34:	03000534 	movweq	r0, #1332	; 0x534
     b38:	3b0b3a0e 	blcc	2cf378 <__ccfg+0x2af3d0>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b3c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			while (!(AONWUCPowerStatusGet () &
     b40:	000a0213 	andeq	r0, sl, r3, lsl r2
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b44:	00053500 	andeq	r3, r5, r0, lsl #10
     b48:	0b3a0e03 	bleq	e8435c <__ccfg+0xe643b4>
     b4c:	0b39053b 	bleq	e42040 <__ccfg+0xe22098>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b50:	00001349 	andeq	r1, r0, r9, asr #6
     b54:	55010b36 	strpl	r0, [r1, #-2870]	; 0xfffff4ca
     b58:	37000006 	strcc	r0, [r0, -r6]
     b5c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; aac <__pi_release+0xb4>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	0b3a0e03 	bleq	e84374 <__ccfg+0xe643cc>
     b64:	0b390b3b 	bleq	e43858 <__ccfg+0xe238b0>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b68:	0b200c27 	bleq	803c0c <__ccfg+0x7e3c64>
     b6c:	00001301 	andeq	r1, r0, r1, lsl #6
			SysCtrlAdjustRechargeAfterPowerDown ();
     b70:	03000538 	movweq	r0, #1336	; 0x538
			reinit_uart ();
     b74:	3b0b3a08 	blcc	2cf39c <__ccfg+0x2af3f4>
     b78:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b7c:	39000013 	stmdbcc	r0, {r0, r1, r4}
}
     b80:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     b84:	0b3b0b3a 	bleq	ec3874 <__ccfg+0xea38cc>
     b88:	13490b39 	movtne	r0, #39737	; 0x9b39
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b8c:	343a0000 	ldrtcc	r0, [sl], #-0
     b90:	3a080300 	bcc	201798 <__ccfg+0x1e17f0>
     b94:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	0013490b 	andseq	r4, r3, fp, lsl #18
     b9c:	000a3b00 	andeq	r3, sl, r0, lsl #22
     ba0:	0b3a0803 	bleq	e82bb4 <__ccfg+0xe62c0c>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ba4:	0b39053b 	bleq	e42098 <__ccfg+0xe220f0>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     ba8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     bac:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	3b0b3a0e 	blcc	2cf3f0 <__ccfg+0x2af448>
     bb4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     bb8:	1201110c 	andne	r1, r1, #12, 2
     bbc:	010a4001 	tsteq	sl, r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc0:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     bc4:	08030005 	stmdaeq	r3, {r0, r2}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc8:	0b3b0b3a 	bleq	ec38b8 <__ccfg+0xea3910>
     bcc:	13490b39 	movtne	r0, #39737	; 0x9b39
			PRCMPowerDomainOff (
     bd0:	00000602 	andeq	r0, r0, r2, lsl #12
     bd4:	0300343e 	movweq	r3, #1086	; 0x43e
	__SLEEP;
     bd8:	3b0b3a08 	blcc	2cf400 <__ccfg+0x2af458>
     bdc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  __ASM volatile ("cpsie i" : : : "memory");
     be0:	00060213 	andeq	r0, r6, r3, lsl r2
	goto Redo;
     be4:	002e3f00 	eoreq	r3, lr, r0, lsl #30
     be8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     bec:	0b3b0b3a 	bleq	ec38dc <__ccfg+0xea3934>
     bf0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     bf4:	01120111 	tsteq	r2, r1, lsl r1
     bf8:	00000a40 	andeq	r0, r0, r0, asr #20
     bfc:	03012e40 	movweq	r2, #7744	; 0x1e40
     c00:	3b0b3a0e 	blcc	2cf440 <__ccfg+0x2af498>
     c04:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c08:	2013490c 	andscs	r4, r3, ip, lsl #18
     c0c:	0013010b 	andseq	r0, r3, fp, lsl #2
     c10:	012e4100 			; <UNDEFINED> instruction: 0x012e4100
     c14:	0b3a0e03 	bleq	e84428 <__ccfg+0xe64480>
     c18:	0b39053b 	bleq	e4210c <__ccfg+0xe22164>
     c1c:	13490c27 	movtne	r0, #39975	; 0x9c27
     c20:	13010b20 	movwne	r0, #6944	; 0x1b20
     c24:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
     c28:	11133101 	tstne	r3, r1, lsl #2
     c2c:	40011201 	andmi	r1, r1, r1, lsl #4
     c30:	0013010a 	andseq	r0, r3, sl, lsl #2
     c34:	00054300 	andeq	r4, r5, r0, lsl #6
     c38:	06021331 			; <UNDEFINED> instruction: 0x06021331
     c3c:	34440000 	strbcc	r0, [r4], #-0
     c40:	02133100 	andseq	r3, r3, #0, 2
     c44:	45000006 	strmi	r0, [r0, #-6]
     c48:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c4c:	01120111 	tsteq	r2, r1, lsl r1
int main (void) {
     c50:	0b590b58 	bleq	16439b8 <__ccfg+0x1623a10>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	00000b57 	andeq	r0, r0, r7, asr fp
     c58:	31003446 	tstcc	r0, r6, asr #8
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	47000013 	smladmi	r0, r3, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	system_init ();
     c64:	06550152 			; <UNDEFINED> instruction: 0x06550152
	tcv_init ();
     c68:	0b590b58 	bleq	16439d0 <__ccfg+0x1623a28>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c6c:	00000b57 	andeq	r0, r0, r7, asr fp
     c70:	31000a48 	tstcc	r0, r8, asr #20
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	00011113 	andeq	r1, r1, r3, lsl r1
     c78:	011d4900 	tsteq	sp, r0, lsl #18
     c7c:	01111331 	tsteq	r1, r1, lsr r3
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c80:	0b580112 	bleq	16010d0 <__ccfg+0x15e1128>
     c84:	0b570559 	bleq	15c21f0 <__ccfg+0x15a2248>
	delay (16, 0);
     c88:	2e4a0000 	cdpcs	0, 4, cr0, cr10, cr0, {0}
     c8c:	11133101 	tstne	r3, r1, lsl #2
     c90:	40011201 	andmi	r1, r1, r1, lsl #4
	__pi_release ();
     c94:	0000000a 	andeq	r0, r0, sl
     c98:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     c9c:	030b130e 	movweq	r1, #45838	; 0xb30e
     ca0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
     ca4:	10011106 	andne	r1, r1, r6, lsl #2
     ca8:	02000006 	andeq	r0, r0, #6
     cac:	0b0b0024 	bleq	2c0d44 <__ccfg+0x2a0d9c>
static void killev (__pi_pcb_t *pid) {
     cb0:	0e030b3e 	vmoveq.16	d3[0], r0
	wfun = (aword)(pid->code);
     cb4:	16030000 	strne	r0, [r3], -r0
	for_all_tasks (i) {
     cb8:	3a0e0300 	bcc	3818c0 <__ccfg+0x361918>
		for (j = 0; j < nevents (i); j++) {
     cbc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cc0:	0013490b 	andseq	r4, r3, fp, lsl #18
     cc4:	00240400 	eoreq	r0, r4, r0, lsl #8
			    || i->Events [j] . Event == wfun
     cc8:	0b3e0b0b 	bleq	f838fc <__ccfg+0xf63954>
		for (j = 0; j < nevents (i); j++) {
     ccc:	00000803 	andeq	r0, r0, r3, lsl #16
			if (i->Events [j] . Event == (aword)pid
     cd0:	03011305 	movweq	r1, #4869	; 0x1305
     cd4:	3a0b0b0e 	bcc	2c3914 <__ccfg+0x2a396c>
     cd8:	010b3b0b 	tsteq	fp, fp, lsl #22
				wakeupev (i, j);
     cdc:	06000013 			; <UNDEFINED> instruction: 0x06000013
     ce0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	for_all_tasks (i) {
     ce4:	0b381349 	bleq	e05a10 <__ccfg+0xde5a68>
}
     ce8:	00000c34 	andeq	r0, r0, r4, lsr ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	0b000f07 	bleq	4910 <__exidx_end+0x1cd8>
static void qfree (aword *ch) {
     cf0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf4:	13490026 	movtne	r0, #36902	; 0x9026
	cc = (aword*)(mpools + MA_NP);
     cf8:	35090000 	strcc	r0, [r9, #-0]
	m_setnextp (ch, chunk);
     cfc:	00134900 	andseq	r4, r3, r0, lsl #18
	m_setnextp (cc, ch);
     d00:	000f0a00 	andeq	r0, pc, r0, lsl #20
}
     d04:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d08:	130b0000 	movwne	r0, #45056	; 0xb000
     d0c:	3a0b0b01 	bcc	2c3918 <__ccfg+0x2a3970>
     d10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			m_setnextp (cc, m_nextp (chunk));
     d14:	0013010b 	andseq	r0, r3, fp, lsl #2
			m_size (chunk) += m_hdrlen + m_size (ch);
     d18:	000d0c00 	andeq	r0, sp, r0, lsl #24
     d1c:	0b3a0e03 	bleq	e84530 <__ccfg+0xe64588>
     d20:	0b390b3b 	bleq	e43a14 <__ccfg+0xe23a6c>
     d24:	0b0b1349 	bleq	2c5a50 <__ccfg+0x2a5aa8>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d28:	0b0c0b0d 	bleq	303964 <__ccfg+0x2e39bc>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	00000b38 	andeq	r0, r0, r8, lsr fp
     d30:	03000d0d 	movweq	r0, #3341	; 0xd0d
     d34:	3b0b3a0e 	blcc	2cf574 <__ccfg+0x2af5cc>
			m_setnextp (cc, m_nextp (chunk));
     d38:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			m_size (ch) += m_hdrlen + m_size (chunk);
     d3c:	000b3813 	andeq	r3, fp, r3, lsl r8
     d40:	00340e00 	eorseq	r0, r4, r0, lsl #28
     d44:	0b3a0e03 	bleq	e84558 <__ccfg+0xe645b0>
     d48:	0b390b3b 	bleq	e43a3c <__ccfg+0xe23a94>
     d4c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; c30 <__pi_release+0x238>
     d50:	00000c3c 	andeq	r0, r0, ip, lsr ip
			if (m_size (chunk) >= m_size (ch))
     d54:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     d58:	00130113 	andseq	r0, r3, r3, lsl r1
     d5c:	00211000 	eoreq	r1, r1, r0
		chunk = m_nextp (chunk))
     d60:	16110000 	ldrne	r0, [r1], -r0
     d64:	3a0e0300 	bcc	38196c <__ccfg+0x3619c4>
     d68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	0013490b 	andseq	r4, r3, fp, lsl #18
	diag_wait (a);
     d70:	01151200 	tsteq	r5, r0, lsl #4
	diag_wchar (c, a);
     d74:	13010c27 	movwne	r0, #7207	; 0x1c27
     d78:	05130000 	ldreq	r0, [r3, #-0]
}
     d7c:	00134900 	andseq	r4, r3, r0, lsl #18
     d80:	00341400 	eorseq	r1, r4, r0, lsl #8
	syserror (ESTATE, "state");
     d84:	0b3a0e03 	bleq	e84598 <__ccfg+0xe645f0>
     d88:	0b39053b 	bleq	e4227c <__ccfg+0xe222d4>
     d8c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; c70 <main+0x20>
     d90:	00000c3c 	andeq	r0, r0, ip, lsr ip
void update_n_wake (word min, Boolean force) {
     d94:	27011515 	smladcs	r1, r5, r5, r1
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	0113490c 	tsteq	r3, ip, lsl #18
     d9c:	16000013 			; <UNDEFINED> instruction: 0x16000013
     da0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da4:	0b3a0b0b 	bleq	e839d8 <__ccfg+0xe63a30>
     da8:	0b390b3b 	bleq	e43a9c <__ccfg+0xe23af4>
     dac:	00001301 	andeq	r1, r0, r1, lsl #6
     db0:	0b011717 	bleq	46a14 <__ccfg+0x26a6c>
     db4:	3b0b3a0b 	blcc	2cf5e8 <__ccfg+0x2af640>
     db8:	010b390b 	tsteq	fp, fp, lsl #18
     dbc:	18000013 	stmdane	r0, {r0, r1, r4}
     dc0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     dc4:	0b3b0b3a 	bleq	ec3ab4 <__ccfg+0xea3b0c>
     dc8:	13490b39 	movtne	r0, #39737	; 0x9b39
     dcc:	0d190000 	ldceq	0, cr0, [r9, #-0]
     dd0:	3a080300 	bcc	2019d8 <__ccfg+0x1e1a30>
     dd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		for_all_tasks (i) {
     dd8:	0013490b 	andseq	r4, r3, fp, lsl #18
	__pi_mintk = znew + min;
     ddc:	000d1a00 	andeq	r1, sp, r0, lsl #20
     de0:	0b3a0803 	bleq	e82df4 <__ccfg+0xe62e4c>
			if (!twaiting (i))
     de4:	0b390b3b 	bleq	e43ad8 <__ccfg+0xe23b30>
     de8:	0b381349 	bleq	e05b14 <__ccfg+0xde5b6c>
			if (twakecnd (__pi_old, znew, i->Timer)) {
     dec:	131b0000 	tstne	fp, #0
     df0:	3a0b0b01 	bcc	2c39fc <__ccfg+0x2a3a54>
     df4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     df8:	0013010b 	andseq	r0, r3, fp, lsl #2
     dfc:	000d1c00 	andeq	r1, sp, r0, lsl #24
     e00:	0b3a0e03 	bleq	e84614 <__ccfg+0xe6466c>
     e04:	0b39053b 	bleq	e422f8 <__ccfg+0xe22350>
     e08:	0b381349 	bleq	e05b34 <__ccfg+0xde5b8c>
     e0c:	131d0000 	tstne	sp, #0
     e10:	0b0e0301 	bleq	381a1c <__ccfg+0x361a74>
     e14:	3b0b3a0b 	blcc	2cf648 <__ccfg+0x2af6a0>
     e18:	010b3905 	tsteq	fp, r5, lsl #18
				wakeuptm (i);
     e1c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     e20:	13490021 	movtne	r0, #36897	; 0x9021
		for_all_tasks (i) {
     e24:	00000b2f 	andeq	r0, r0, pc, lsr #22
				d = i->Timer - znew;
     e28:	0300341f 	movweq	r3, #1055	; 0x41f
     e2c:	3b0b3a0e 	blcc	2cf66c <__ccfg+0x2af6c4>
     e30:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if ((word)(__pi_mintk - znew) < min) 
     e34:	000a0213 	andeq	r0, sl, r3, lsl r2
     e38:	002e2000 	eoreq	r2, lr, r0
     e3c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	__pi_old = znew;
     e40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     e44:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	TCI_RUN_DELAY_TIMER;
     e48:	01120111 	tsteq	r2, r1, lsl r1
}
     e4c:	00000a40 	andeq	r0, r0, r0, asr #20
     e50:	3f012e21 	svccc	0x00012e21
     e54:	3a0e030c 	bcc	381a8c <__ccfg+0x361ae4>
     e58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e5c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
void proceed (word state) {
     e60:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	prcdstate (__pi_curr, state);
     e64:	010a4001 	tsteq	sl, r1
     e68:	22000013 	andcs	r0, r0, #19
	release;
     e6c:	08030005 	stmdaeq	r3, {r0, r2}
     e70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void __pi_wait (aword event, word state) {
     e74:	13490b39 	movtne	r0, #39737	; 0x9b39
	sint j = nevents (__pi_curr);
     e78:	00000602 	andeq	r0, r0, r2, lsl #12
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	31011d23 	tstcc	r1, r3, lsr #26
     e80:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     e84:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		syserror (ENEVENTS, "sw");
     e88:	000b5705 	andeq	r5, fp, r5, lsl #14
     e8c:	00052400 	andeq	r2, r5, r0, lsl #8
	setestate (__pi_curr->Events [j], state, event);
     e90:	06021331 			; <UNDEFINED> instruction: 0x06021331
	incwait (__pi_curr);
     e94:	0b250000 	bleq	940e9c <__ccfg+0x920ef4>
	setestate (__pi_curr->Events [j], state, event);
     e98:	00065501 	andeq	r5, r6, r1, lsl #10
}
     e9c:	00342600 	eorseq	r2, r4, r0, lsl #12
     ea0:	06021331 			; <UNDEFINED> instruction: 0x06021331
     ea4:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
void __pi_trigger (aword event) {
     ea8:	030c3f01 	movweq	r3, #52993	; 0xcf01
	for_all_tasks (i) {
     eac:	3b0b3a0e 	blcc	2cf6ec <__ccfg+0x2af744>
		for (j = 0; j < nevents (i); j++) {
     eb0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     eb4:	1201110c 	andne	r1, r1, #12, 2
     eb8:	010a4001 	tsteq	sl, r1
     ebc:	28000013 	stmdacs	r0, {r0, r1, r4}
			if (i->Events [j] . Event == event) {
     ec0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     ec4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ec8:	13490b39 	movtne	r0, #39737	; 0x9b39
				wakeupev (i, j);
     ecc:	00000602 	andeq	r0, r0, r2, lsl #12
     ed0:	03003429 	movweq	r3, #1065	; 0x429
	for_all_tasks (i) {
     ed4:	3b0b3a08 	blcc	2cf6fc <__ccfg+0x2af754>
}
     ed8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
aword __pi_join (aword pid, word st) {
     edc:	2a000013 	bcs	f30 <delay+0x30>
	for_all_tasks (i) {
     ee0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     ee4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	return 0;
     ee8:	13490b39 	movtne	r0, #39737	; 0x9b39
		if ((aword)i == pid) {
     eec:	00000a02 	andeq	r0, r0, r2, lsl #20
			__pi_wait (pid, st);
     ef0:	0300052b 	movweq	r0, #1323	; 0x52b
}
     ef4:	3b0b3a0e 	blcc	2cf734 <__ccfg+0x2af78c>
	for_all_tasks (i) {
     ef8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     efc:	00060213 	andeq	r0, r6, r3, lsl r2
void delay (word d, word state) {
     f00:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
	settstate (__pi_curr, state);
     f04:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     f08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f0c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     f10:	0b201349 	bleq	805c3c <__ccfg+0x7e5c94>
	update_n_wake (d, YES);
     f14:	00001301 	andeq	r1, r0, r1, lsl #6
     f18:	0300052d 	movweq	r0, #1325	; 0x52d
	__pi_curr->Timer = __pi_old + d;
     f1c:	3b0b3a0e 	blcc	2cf75c <__ccfg+0x2af7b4>
     f20:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	inctimer (__pi_curr);
     f24:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
     f28:	08030005 	stmdaeq	r3, {r0, r2}
     f2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     f30:	13490b39 	movtne	r0, #39737	; 0x9b39
     f34:	0b2f0000 	bleq	bc0f3c <__ccfg+0xba0f94>
	if (fun == NULL)
     f38:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
		return (int) __pi_curr;
     f3c:	30000001 	andcc	r0, r0, r1
     f40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	for_all_tasks (i)
     f44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     f48:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (i->code == fun)
     f4c:	00000a02 	andeq	r0, r0, r2, lsl #20
	for_all_tasks (i)
     f50:	03000a31 	movweq	r0, #2609	; 0xa31
     f54:	3b0b3a0e 	blcc	2cf794 <__ccfg+0x2af7ec>
     f58:	110b3905 	tstne	fp, r5, lsl #18
int __pi_strlen (const char *s) {
     f5c:	32000001 	andcc	r0, r0, #1
	for (i = 0; *(s+i) != '\0'; i++);
     f60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
     f64:	01120111 	tsteq	r2, r1, lsl r1
	for (i = 0; *(s+i) != '\0'; i++);
     f68:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	00000b57 	andeq	r0, r0, r7, asr fp
		syserror (EREQPAR, "addv");
     f70:	31000533 	tstcc	r0, r3, lsr r5
		syserror (ERESOURCE, "addv");
     f74:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
	if (ioreq [loc] != NULL)
     f78:	08030005 	stmdaeq	r3, {r0, r2}
     f7c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		syserror (ERESOURCE, "addv");
     f80:	13490b39 	movtne	r0, #39737	; 0x9b39
	ioreq [loc] = rf;
     f84:	00000a02 	andeq	r0, r0, r2, lsl #20
}
     f88:	00001835 	andeq	r1, r0, r5, lsr r8
     f8c:	00343600 	eorseq	r3, r4, r0, lsl #12
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	0b3a0e03 	bleq	e847a4 <__ccfg+0xe647fc>
     f94:	0b39053b 	bleq	e42488 <__ccfg+0xe224e0>
     f98:	00001349 	andeq	r1, r0, r9, asr #6
     f9c:	03012e37 	movweq	r2, #7735	; 0x1e37
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     fa0:	3b0b3a08 	blcc	2cf7c8 <__ccfg+0x2af820>
     fa4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     fa8:	1113490c 	tstne	r3, ip, lsl #18
		syserror (ENODEVICE, "io");
     fac:	40011201 	andmi	r1, r1, r1, lsl #4
     fb0:	0013010a 	andseq	r0, r3, sl, lsl #2
	if (len == 0)
     fb4:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	0b3a0803 	bleq	e82fcc <__ccfg+0xe63024>
     fbc:	0b39053b 	bleq	e424b0 <__ccfg+0xe22508>
	if (ret >= 0)
     fc0:	01110c27 	tsteq	r1, r7, lsr #24
	if (ret == -1) {
     fc4:	0a400112 	beq	1001414 <__ccfg+0xfe146c>
     fc8:	00001301 	andeq	r1, r0, r1, lsl #6
		if (retry == WNONE)
     fcc:	03012e39 	movweq	r2, #7737	; 0x1e39
		iowait (dev, operation, retry);
     fd0:	3b0b3a0e 	blcc	2cf810 <__ccfg+0x2af868>
     fd4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     fd8:	010b200c 	tsteq	fp, ip
			release;
     fdc:	3a000013 	bcc	1030 <__pi_malloc_init+0x4>
	if (ret == -2) {
     fe0:	08030005 	stmdaeq	r3, {r0, r2}
		if (retry != WNONE) {
     fe4:	0b3b0b3a 	bleq	ec3cd4 <__ccfg+0xea3d2c>
     fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
			iowait (dev, operation, retry);
     fec:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     ff0:	3a0e0301 	bcc	381bfc <__ccfg+0x361c54>
			(ioreq [dev]) (NONE, buf, len);
     ff4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ff8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     ffc:	010b2013 	tsteq	fp, r3, lsl r0
		(ioreq [dev]) (NONE, buf, len);
    1000:	3c000013 	stccc	0, cr0, [r0], {19}
    1004:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1008:	0b3b0b3a 	bleq	ec3cf8 <__ccfg+0xea3d50>
}
    100c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (retry != WNONE) {
    1010:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
		delay (-ret - 2, retry);
    1014:	3a080301 	bcc	201c20 <__ccfg+0x1e1c78>
    1018:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    101c:	200c270b 	andcs	r2, ip, fp, lsl #14
    1020:	0013010b 	andseq	r0, r3, fp, lsl #2
		release;
    1024:	012e3e00 			; <UNDEFINED> instruction: 0x012e3e00
    1028:	01111331 	tsteq	r1, r1, lsr r3
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	0a400112 	beq	100147c <__ccfg+0xfe14d4>
    1030:	00001301 	andeq	r1, r0, r1, lsl #6
    1034:	3100053f 	tstcc	r0, pc, lsr r5
    1038:	000a0213 	andeq	r0, sl, r3, lsl r2
    103c:	011d4000 	tsteq	sp, r0
		syserror (ERESOURCE, "mal1");
    1040:	01111331 	tsteq	r1, r1, lsr r3
    1044:	0b580112 	bleq	1601494 <__ccfg+0x15e14ec>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1048:	0b570b59 	bleq	15c3db4 <__ccfg+0x15a3e0c>
    104c:	1d410000 	stclne	0, cr0, [r1, #-0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1050:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	m_size (mpools [0]) = mlen - m_hdrlen;
    1054:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1058:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105c:	4200000b 	andmi	r0, r0, #11
    1060:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
}
    1064:	01120111 	tsteq	r2, r1, lsl r1
    1068:	00000a40 	andeq	r0, r0, r0, asr #20
    106c:	31003443 	tstcc	r0, r3, asr #8
    1070:	00000013 	andeq	r0, r0, r3, lsl r0
    1074:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1078:	030b130e 	movweq	r1, #45838	; 0xb30e
void __pi_free (aword *ch) {
    107c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1080:	10011106 	andne	r1, r1, r6, lsl #2
    1084:	02000006 	andeq	r0, r0, #6
		syserror (EMALLOC, "malg");
    1088:	0b0b0024 	bleq	2c1120 <__ccfg+0x2a1178>
    108c:	0e030b3e 	vmoveq.16	d3[0], r0
	mcfree [MA_NP] += m_size (ch);
    1090:	16030000 	strne	r0, [r3], -r0
		m_size (ch) ^= MALLOC_UMASK;
    1094:	3a0e0300 	bcc	381c9c <__ccfg+0x361cf4>
    1098:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	mcfree [MA_NP] += m_size (ch);
    109c:	0013490b 	andseq	r4, r3, fp, lsl #18
	QFREE;
    10a0:	00240400 	eoreq	r0, r4, r0, lsl #8
	if (mevent [MA_NP] . nwait) {
    10a4:	0b3e0b0b 	bleq	f83cd8 <__ccfg+0xf63d30>
    10a8:	00000803 	andeq	r0, r0, r3, lsl #16
		trigger ((aword)(&(mevent [MA_NP])));
    10ac:	0b000f05 	bleq	4cc8 <__exidx_end+0x2090>
		mevent [MA_NP] . nwait --;
    10b0:	0013490b 	andseq	r4, r3, fp, lsl #18
}
    10b4:	00260600 	eoreq	r0, r6, r0, lsl #12
    10b8:	00001349 	andeq	r1, r0, r9, asr #6
    10bc:	27001507 	strcs	r1, [r0, -r7, lsl #10]
    10c0:	0800000c 	stmdaeq	r0, {r2, r3}
void kill (aword pid) {
    10c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		pid = (aword) __pi_curr;
    10c8:	0b3b0b3a 	bleq	ec3db8 <__ccfg+0xea3e10>
	j = NULL;
    10cc:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i) {
    10d0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	syserror (EREQPAR, "kpi");
    10d4:	01090000 	mrseq	r0, (UNDEF: 9)
    10d8:	01134901 	tsteq	r3, r1, lsl #18
		if ((aword)i == pid) {
    10dc:	0a000013 	beq	1130 <__pi_malloc+0x1c>
    10e0:	13490021 	movtne	r0, #36897	; 0x9021
				__PCB = i->Next;
    10e4:	00000b2f 	andeq	r0, r0, pc, lsr #22
			killev (i);
    10e8:	0300340b 	movweq	r3, #1035	; 0x40b
			ufree (i);
    10ec:	3b0b3a0e 	blcc	2cf92c <__ccfg+0x2af984>
			if (i == __pi_curr)
    10f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10f4:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
				release;
    10f8:	0c00000a 	stceq	0, cr0, [r0], {10}
				j->Next = i->Next;
    10fc:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    1100:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1104:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
}
    1108:	01120111 	tsteq	r2, r1, lsl r1
    110c:	00000a40 	andeq	r0, r0, r0, asr #20
    1110:	3f012e0d 	svccc	0x00012e0d
	if (size < 8)
    1114:	3a0e030c 	bcc	381d4c <__ccfg+0x361da4>
		_size = 2;
    1118:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    111c:	110c270b 	tstne	ip, fp, lsl #14
		_size = (((aword)size) + 3) >> 2;
    1120:	40011201 	andmi	r1, r1, r1, lsl #4
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
		_size = (((aword)size) + 3) >> 2;
    1128:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		if (mevent [MA_NP] . nfail != 255)
    112c:	0b3b0b3a 	bleq	ec3e1c <__ccfg+0xea3e74>
    1130:	13490b39 	movtne	r0, #39737	; 0x9b39
			mevent [MA_NP] . nfail ++;
    1134:	00000602 	andeq	r0, r0, r2, lsl #12
		mnfree [MA_NP] = 0;
    1138:	01110100 	tsteq	r1, r0, lsl #2
    113c:	0b130e25 	bleq	4c49d8 <__ccfg+0x4a4a30>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1144:	00000610 	andeq	r0, r0, r0, lsl r6
			syserror (EMALLOC, "malc");
    1148:	0b002402 	bleq	a158 <__exidx_end+0x7520>
    114c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		if (m_size (chunk) >= _size)
    1150:	0300000e 	movweq	r0, #14
    1154:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		chunk = m_nextp (chunk)) {
    1158:	0b3b0b3a 	bleq	ec3e48 <__ccfg+0xea3ea0>
		m_setnextp (cc, m_nextp (chunk));
    115c:	13490b39 	movtne	r0, #39737	; 0x9b39
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1160:	24040000 	strcs	r0, [r4], #-0
    1164:	3e0b0b00 	vmlacc.f64	d0, d11, d0
			m_size (chunk) = _size;
    1168:	0008030b 	andeq	r0, r8, fp, lsl #6
			cc = chunk + _size + m_hdrlen;
    116c:	01130500 	tsteq	r3, r0, lsl #10
    1170:	0b3a0b0b 	bleq	e83da4 <__ccfg+0xe63dfc>
			m_size (cc) = waste - m_hdrlen;
    1174:	0b390b3b 	bleq	e43e68 <__ccfg+0xe23ec0>
			QFREE;
    1178:	00001301 	andeq	r1, r0, r1, lsl #6
		mevent [MA_NP] . nfail = 0;
    117c:	03000d06 	movweq	r0, #3334	; 0xd06
		mcfree [MA_NP] -= m_size (chunk);
    1180:	3b0b3a0e 	blcc	2cf9c0 <__ccfg+0x2afa18>
    1184:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1188:	000b3813 	andeq	r3, fp, r3, lsl r8
    118c:	00260700 	eoreq	r0, r6, r0, lsl #14
		m_size (chunk) |= MALLOC_UMASK;
    1190:	00001349 	andeq	r1, r0, r9, asr #6
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1194:	03003408 	movweq	r3, #1032	; 0x408
		m_size (chunk) |= MALLOC_UMASK;
    1198:	3b0b3a0e 	blcc	2cf9d8 <__ccfg+0x2afa30>
			mnfree [MA_NP] = mcfree [MA_NP];
    119c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
}
    11a0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    11a4:	0900000c 	stmdbeq	r0, {r2, r3}
    11a8:	13490035 	movtne	r0, #36917	; 0x9035
    11ac:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    11b0:	3a0e0300 	bcc	381db8 <__ccfg+0x361e10>
    11b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11b8:	0b13490b 	bleq	4d35ec <__ccfg+0x4b3644>
aword __pi_fork (fsmcode func, aword data) {
    11bc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c0:	000b380b 	andeq	r3, fp, fp, lsl #16
    11c4:	000f0b00 	andeq	r0, pc, r0, lsl #22
    11c8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		if ((j = __PCB) == NULL)
    11cc:	010c0000 	mrseq	r0, (UNDEF: 12)
	i->Next = NULL;
    11d0:	01134901 	tsteq	r3, r1, lsl #18
	i->data = data;
    11d4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
		if ((j = __PCB) == NULL)
    11d8:	00000021 	andeq	r0, r0, r1, lsr #32
}
    11dc:	0300160e 	movweq	r1, #1550	; 0x60e
			for (; j->Next != NULL; j = j->Next);
    11e0:	3b0b3a0e 	blcc	2cfa20 <__ccfg+0x2afa78>
    11e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	return (aword) i;
    11e8:	0f000013 	svceq	0x00000013
    11ec:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	if (mevent [MA_NP] . nwait != 255)
    11f0:	00001301 	andeq	r1, r0, r1, lsl #6
    11f4:	49000510 	stmdbmi	r0, {r4, r8, sl}
    11f8:	11000013 	tstne	r0, r3, lsl r0
		mevent [MA_NP] . nwait ++;
    11fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	wait ((aword)(&(mevent [MA_NP])), state);
    1200:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1204:	13490b39 	movtne	r0, #39737	; 0x9b39
void diag (const char *mess, ...) {
    1208:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    120c:	13120000 	tstne	r2, #0
    1210:	3a0b0b01 	bcc	2c3e1c <__ccfg+0x2a3e74>
	diag_disable_int (a, is);
    1214:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1218:	0013010b 	andseq	r0, r3, fp, lsl #2
    121c:	000d1300 	andeq	r1, sp, r0, lsl #6
				d = (bc == 16) ? 10000 : 1000000000;
    1220:	0b3a0e03 	bleq	e84a34 <__ccfg+0xe64a8c>
	diag_disable_int (a, is);
    1224:	0b39053b 	bleq	e42718 <__ccfg+0xe22770>
	while (*mess != '\0') {
    1228:	0b381349 	bleq	e05f54 <__ccfg+0xde5fac>
	dgout ('\r');
    122c:	13140000 	tstne	r4, #0
	dgout ('\n');
    1230:	0b0e0301 	bleq	381e3c <__ccfg+0x361e94>
    1234:	3b0b3a0b 	blcc	2cfa68 <__ccfg+0x2afac0>
    1238:	010b3905 	tsteq	fp, r5, lsl #18
	diag_wait (a);
    123c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
	diag_enable_int (a, is);
    1240:	13490021 	movtne	r0, #36897	; 0x9021
    1244:	00000b2f 	andeq	r0, r0, pc, lsr #22
}
    1248:	47003416 	smladmi	r0, r6, r4, r3
    124c:	3b0b3a13 	blcc	2cfaa0 <__ccfg+0x2afaf8>
    1250:	020b3905 	andeq	r3, fp, #81920	; 0x14000
		if (*mess == '%') {
    1254:	0000000a 	andeq	r0, r0, sl
    1258:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
			if (*mess == 'l') {
    125c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1260:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				mess++;
    1264:	10011106 	andne	r1, r1, r6, lsl #2
				val = va_arg (ap, lword);
    1268:	02000006 	andeq	r0, r0, #6
				bc = 32;
    126c:	0b0b0024 	bleq	2c1304 <__ccfg+0x2a135c>
				bc = 16;
    1270:	0e030b3e 	vmoveq.16	d3[0], r0
			switch (*mess) {
    1274:	16030000 	strne	r0, [r3], -r0
    1278:	3a0e0300 	bcc	381e80 <__ccfg+0x361ed8>
    127c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				dgout ('%');
    1280:	0013490b 	andseq	r4, r3, fp, lsl #18
    1284:	00240400 	eoreq	r0, r4, r0, lsl #8
				dgout (*mess);
    1288:	0b3e0b0b 	bleq	f83ebc <__ccfg+0xf63f14>
    128c:	00000803 	andeq	r0, r0, r3, lsl #16
			switch (*mess) {
    1290:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
					v = __pi_hex_enc_table [
    1294:	06000013 			; <UNDEFINED> instruction: 0x06000013
					i += 4;
    1298:	13490035 	movtne	r0, #36917	; 0x9035
					(val >> (bc - i)) & 0xf];
    129c:	0f070000 	svceq	0x00070000
    12a0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
					dgout (v);
    12a4:	08000013 	stmdaeq	r0, {r0, r1, r4}
    12a8:	0b0b0113 	bleq	2c16fc <__ccfg+0x2a1754>
				while (i < bc) {
    12ac:	0b3b0b3a 	bleq	ec3f9c <__ccfg+0xea3ff4>
			mess++;
    12b0:	13010b39 	movwne	r0, #6969	; 0x1b39
					d /= 10;
    12b4:	0d090000 	stceq	0, cr0, [r9, #-0]
				if ((val >> (bc - 1)) & 1) {
    12b8:	3a0e0300 	bcc	381ec0 <__ccfg+0x361f18>
    12bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					dgout ('-');
    12c0:	0b13490b 	bleq	4d36f4 <__ccfg+0x4b374c>
    12c4:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
						val |= 0xffff0000;
    12c8:	000b380b 	andeq	r3, fp, fp, lsl #16
    12cc:	000d0a00 	andeq	r0, sp, r0, lsl #20
    12d0:	0b3a0e03 	bleq	e84ae4 <__ccfg+0xe64b3c>
				d = (bc == 16) ? 10000 : 1000000000;
    12d4:	0b390b3b 	bleq	e43fc8 <__ccfg+0xe24020>
    12d8:	0b381349 	bleq	e06004 <__ccfg+0xde605c>
    12dc:	340b0000 	strcc	r0, [fp], #-0
					v = (word) (val / d);
    12e0:	3a0e0300 	bcc	381ee8 <__ccfg+0x361f40>
					if (v || d == 1) break;
    12e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12e8:	3f13490b 	svccc	0x0013490b
					d /= 10;
    12ec:	000c3c0c 	andeq	r3, ip, ip, lsl #24
				d = (bc == 16) ? 10000 : 1000000000;
    12f0:	01010c00 	tsteq	r1, r0, lsl #24
					dgout (v + '0');
    12f4:	13011349 	movwne	r1, #4937	; 0x1349
    12f8:	210d0000 	mrscs	r0, (UNDEF: 13)
    12fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
					d /= 10;
    1300:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
					val = val - (v * d);
    1304:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
					if (d == 0) break;
    1308:	13490b39 	movtne	r0, #39737	; 0x9b39
					v = (word) (val / d);
    130c:	150f0000 	strne	r0, [pc, #-0]	; 1314 <diag+0x10c>
    1310:	010c2701 	tsteq	ip, r1, lsl #14
				if (bc == 16)
    1314:	10000013 	andne	r0, r0, r3, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1318:	13490005 	movtne	r0, #36869	; 0x9005
					val &= 0xffff;
    131c:	34110000 	ldrcc	r0, [r1], #-0
					dgout (*s);
    1320:	3a0e0300 	bcc	381f28 <__ccfg+0x361f80>
					s++;
    1324:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				while (*s != '\0') {
    1328:	3f13490b 	svccc	0x0013490b
    132c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			dgout (*mess++);
    1330:	01131200 	tsteq	r3, r0, lsl #4
    1334:	0b3a0b0b 	bleq	e83f68 <__ccfg+0xe63fc0>
    1338:	0b39053b 	bleq	e4282c <__ccfg+0xe22884>
    133c:	00001301 	andeq	r1, r0, r1, lsl #6
    1340:	03000d13 	movweq	r0, #3347	; 0xd13
}
    1344:	3b0b3a0e 	blcc	2cfb84 <__ccfg+0x2afbdc>
    while(1)
    1348:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
{
    134c:	000b3813 	andeq	r3, fp, r3, lsl r8
    SetupTrimDevice();
    1350:	01131400 	tsteq	r3, r0, lsl #8
    pui32Src = &_etext;
    1354:	0b0b0e03 	bleq	2c4b68 <__ccfg+0x2a4bc0>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1358:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    __asm("    ldr     r0, =_bss\n"
    135c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1360:	21150000 	tstcs	r5, r0
    1364:	2f134900 	svccs	0x00134900
    1368:	1600000b 	strne	r0, [r0], -fp
    136c:	13470034 	movtne	r0, #28724	; 0x7034
   main();
    1370:	0b3b0b3a 	bleq	ec4060 <__ccfg+0xea40b8>
    FaultISR();
    1374:	0a020b39 	beq	84060 <__ccfg+0x640b8>
        *pui32Dest++ = *pui32Src++;
    1378:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    137c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1380:	3b0b3a0e 	blcc	2cfbc0 <__ccfg+0x2afc18>
    1384:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1388:	1201110c 	andne	r1, r1, #12, 2
    138c:	010a4001 	tsteq	sl, r1
    1390:	18000013 	stmdane	r0, {r0, r1, r4}
    1394:	08030005 	stmdaeq	r3, {r0, r2}
static byte get_byte () {
    1398:	0b3b0b3a 	bleq	ec4088 <__ccfg+0xea40e0>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    139c:	13490b39 	movtne	r0, #39737	; 0x9b39
    13a0:	00000602 	andeq	r0, r0, r2, lsl #12
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    13a4:	03000519 	movweq	r0, #1305	; 0x519
    13a8:	3b0b3a0e 	blcc	2cfbe8 <__ccfg+0x2afc40>
		if (ee_inp)
    13ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			b |= 1;
    13b0:	00060213 	andeq	r0, r6, r3, lsl r2
    13b4:	00341a00 	eorseq	r1, r4, r0, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13b8:	0b3a0803 	bleq	e833cc <__ccfg+0xe63424>
	for (b = 0, i = 0; i < 8; i++) {
    13bc:	0b390b3b 	bleq	e440b0 <__ccfg+0xe24108>
}
    13c0:	00001349 	andeq	r1, r0, r9, asr #6
    13c4:	0300341b 	movweq	r3, #1051	; 0x41b
    13c8:	3b0b3a08 	blcc	2cfbf0 <__ccfg+0x2afc48>
static void put_byte (byte b) {
    13cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    13d0:	00060213 	andeq	r0, r6, r3, lsl r2
    13d4:	001d1c00 	andseq	r1, sp, r0, lsl #24
    13d8:	01111331 	tsteq	r1, r1, lsr r3
		if (b & 0x80)
    13dc:	0b580112 	bleq	160182c <__ccfg+0x15e1884>
    13e0:	0b570b59 	bleq	15c414c <__ccfg+0x15a41a4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13e4:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
	for (i = 0; i < 8; i++) {
    13e8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
		b <<= 1;
    13ec:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	for (i = 0; i < 8; i++) {
    13f0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
}
    13f4:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
    13f8:	13310005 	teqne	r1, #5
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13fc:	00000602 	andeq	r0, r0, r2, lsl #12
    1400:	3f002e1f 	svccc	0x00002e1f
	put_byte (cmd);
    1404:	3a0e030c 	bcc	38203c <__ccfg+0x362094>
    1408:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    140c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    1410:	000a4001 	andeq	r4, sl, r1
static void wwait (word st, word del) {
    1414:	002e2000 	eoreq	r2, lr, r0
    1418:	0b3a0e03 	bleq	e84c2c <__ccfg+0xe64c84>
    141c:	0b390b3b 	bleq	e44110 <__ccfg+0xe24168>
	while (dopen && (rdsr () & 1)) {
    1420:	0b200c27 	bleq	8044c4 <__ccfg+0x7e451c>
    1424:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1428:	3a0e0301 	bcc	382034 <__ccfg+0x36208c>
    142c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	put_byte (CMD_RDSR);
    1430:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	r = get_byte ();
    1434:	000b2013 	andeq	r2, fp, r3, lsl r0
    1438:	00052200 	andeq	r2, r5, r0, lsl #4
	while (dopen && (rdsr () & 1)) {
    143c:	0b3a0e03 	bleq	e84c50 <__ccfg+0xe64ca8>
}
    1440:	0b390b3b 	bleq	e44134 <__ccfg+0xe2418c>
		if (st == WNONE)
    1444:	00001349 	andeq	r1, r0, r9, asr #6
    1448:	01110100 	tsteq	r1, r0, lsl #2
			mdelay (1);
    144c:	0b130e25 	bleq	4c4ce8 <__ccfg+0x4a4d40>
    1450:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			delay (del, st);
    1454:	01110655 	tsteq	r1, r5, asr r6
    1458:	00000610 	andeq	r0, r0, r0, lsl r6
			release;
    145c:	0b002402 	bleq	a46c <__exidx_end+0x7834>
    1460:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1464:	0300000e 	movweq	r0, #14
static void ready () {
    1468:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	if (dopen) {
    146c:	0b3b0b3a 	bleq	ec415c <__ccfg+0xea41b4>
		wwait (WNONE, 1);
    1470:	13490b39 	movtne	r0, #39737	; 0x9b39
    1474:	24040000 	strcs	r0, [r4], #-0
    1478:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	dstat = 0;
    147c:	0008030b 	andeq	r0, r8, fp, lsl #6
}
    1480:	00260500 	eoreq	r0, r6, r0, lsl #10
    1484:	00001349 	andeq	r1, r0, r9, asr #6
    1488:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
	udelay (1);
    148c:	07000013 	smladeq	r0, r3, r0, r0
    1490:	0b0b0113 	bleq	2c18e4 <__ccfg+0x2a193c>
	udelay (1);
    1494:	0b3b0b3a 	bleq	ec4184 <__ccfg+0xea41dc>
		dopen = DOPEN_TEMP;
    1498:	13010b39 	movwne	r0, #6969	; 0x1b39
    149c:	0d080000 	stceq	0, cr0, [r8, #-0]
    14a0:	3a0e0300 	bcc	3820a8 <__ccfg+0x362100>
    14a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static void cclose () {
    14a8:	0b13490b 	bleq	4d38dc <__ccfg+0x4b3934>
	if (dopen == DOPEN_TEMP) {
    14ac:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    14b0:	000b380b 	andeq	r3, fp, fp, lsl #16
		wwait (WNONE, 1);
    14b4:	000d0900 	andeq	r0, sp, r0, lsl #18
    14b8:	0b3a0e03 	bleq	e84ccc <__ccfg+0xe64d24>
	cmd_0 (CMD_DP);
    14bc:	0b390b3b 	bleq	e441b0 <__ccfg+0xe24208>
    14c0:	0b381349 	bleq	e061ec <__ccfg+0xde6244>
		dopen = 0;
    14c4:	340a0000 	strcc	r0, [sl], #-0
}
    14c8:	3a0e0300 	bcc	3820d0 <__ccfg+0x362128>
word ee_open () {
    14cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	ready ();
    14d0:	3f13490b 	svccc	0x0013490b
	dopen = DOPEN_PERM;
    14d4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    14d8:	000f0b00 	andeq	r0, pc, r0, lsl #22
}
    14dc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	if (dopen) {
    14e0:	010c0000 	mrseq	r0, (UNDEF: 12)
    14e4:	01134901 	tsteq	r3, r1, lsl #18
		dopen = DOPEN_TEMP;
    14e8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
		cclose ();
    14ec:	00000021 	andeq	r0, r0, r1, lsr #32
}
    14f0:	0300160e 	movweq	r1, #1550	; 0x60e
int ser_outf (word st, const char *m, ...) {
    14f4:	3b0b3a0e 	blcc	2cfd34 <__ccfg+0x2afd8c>
    14f8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if ((prcs = running (__outserial)) != 0) {
    14fc:	0f000013 	svceq	0x00000013
    1500:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		join (prcs, st);
    1504:	00001301 	andeq	r1, r0, r1, lsl #6
    1508:	49000510 	stmdbmi	r0, {r4, r8, sl}
		release;
    150c:	11000013 	tstne	r0, r3, lsl r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1510:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1514:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1518:	13490b39 	movtne	r0, #39737	; 0x9b39
		umwait (st);
    151c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1520:	13120000 	tstne	r2, #0
	if (runstrand (__outserial, buf) == 0) {
    1524:	3a0b0b01 	bcc	2c4130 <__ccfg+0x2a4188>
    1528:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    152c:	0013010b 	andseq	r0, r3, fp, lsl #2
		ufree (buf);
    1530:	000d1300 	andeq	r1, sp, r0, lsl #6
		npwait (st);
    1534:	0b3a0e03 	bleq	e84d48 <__ccfg+0xe64da0>
}
    1538:	0b39053b 	bleq	e42a2c <__ccfg+0xe22a84>
    153c:	0b381349 	bleq	e06268 <__ccfg+0xde62c0>
    1540:	13140000 	tstne	r4, #0
    1544:	0b0e0301 	bleq	382150 <__ccfg+0x3621a8>
int ser_inf (word st, const char *fmt, ...) {
    1548:	3b0b3a0b 	blcc	2cfd7c <__ccfg+0x2afdd4>
    154c:	010b3905 	tsteq	fp, r5, lsl #18
	if (fmt == NULL)
    1550:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
	if (__inpline == NULL) {
    1554:	13490021 	movtne	r0, #36897	; 0x9021
		if ((prcs = running (__inserial)) == 0) {
    1558:	00000b2f 	andeq	r0, r0, pc, lsr #22
    155c:	03003416 	movweq	r3, #1046	; 0x416
			prcs = runthread (__inserial);
    1560:	3b0b3a0e 	blcc	2cfda0 <__ccfg+0x2afdf8>
    1564:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			if (prcs == 0) {
    1568:	000a0213 	andeq	r0, sl, r3, lsl r2
				npwait (st);
    156c:	00341700 	eorseq	r1, r4, r0, lsl #14
		release;
    1570:	0b3a1347 	bleq	e86294 <__ccfg+0xe662ec>
		join (prcs, st);
    1574:	0b390b3b 	bleq	e44268 <__ccfg+0xe242c0>
    1578:	00000a02 	andeq	r0, r0, r2, lsl #20
	va_start (ap, fmt);
    157c:	3f012e18 	svccc	0x00012e18
	prcs = vscan (__inpline, fmt, ap);
    1580:	3a0e030c 	bcc	3821b8 <__ccfg+0x362210>
    1584:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	ufree (__inpline);
    1588:	110c270b 	tstne	ip, fp, lsl #14
	__inpline = NULL;
    158c:	40011201 	andmi	r1, r1, r1, lsl #4
}
    1590:	0013010a 	andseq	r0, r3, sl, lsl #2
    1594:	00051900 	andeq	r1, r5, r0, lsl #18
    1598:	0b3a0803 	bleq	e835ac <__ccfg+0xe63604>
		return 0;
    159c:	0b390b3b 	bleq	e44290 <__ccfg+0xe242e8>
    15a0:	06021349 	streq	r1, [r2], -r9, asr #6
    15a4:	051a0000 	ldreq	r0, [sl, #-0]
void RFCCPE0IntHandler (void) {
    15a8:	3a0e0300 	bcc	3821b0 <__ccfg+0x362208>
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    15ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		_BIS (dstate, DSTATE_IRST);
    15b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15b4:	1b000006 	blne	15d4 <RFCCPE0IntHandler+0x2c>
    15b8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    15bc:	0b3b0b3a 	bleq	ec42ac <__ccfg+0xea4304>
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    15c0:	01110b39 	tsteq	r1, r9, lsr fp
    15c4:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
	p_trigger (drvprcs, qevent);
    15c8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    15cc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    15d0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    15d4:	0013010b 	andseq	r0, r3, fp, lsl #2
    15d8:	00051d00 	andeq	r1, r5, r0, lsl #26
    15dc:	00001331 	andeq	r1, r0, r1, lsr r3
    15e0:	31011d1e 	tstcc	r1, lr, lsl sp
    15e4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    15e8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    15ec:	000b570b 	andeq	r5, fp, fp, lsl #14
    15f0:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
	RISE_N_SHINE;
    15f4:	0b3a0e03 	bleq	e84e08 <__ccfg+0xe64e60>
    15f8:	0b390b3b 	bleq	e442ec <__ccfg+0xe24344>
    15fc:	13490c27 	movtne	r0, #39975	; 0x9c27
}
    1600:	00000b20 	andeq	r0, r0, r0, lsr #22
    1604:	03000520 	movweq	r0, #1312	; 0x520
    1608:	3b0b3a0e 	blcc	2cfe48 <__ccfg+0x2afea0>
    160c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1610:	00000013 	andeq	r0, r0, r3, lsl r0
    1614:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
strand (__outserial, const char*)
    1618:	030b130e 	movweq	r1, #45838	; 0xb30e
    161c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1620:	10011106 	andne	r1, r1, r6, lsl #2
    1624:	02000006 	andeq	r0, r0, #6
endstrand
    1628:	0b0b0024 	bleq	2c16c0 <__ccfg+0x2a1718>
    162c:	0e030b3e 	vmoveq.16	d3[0], r0
	ptr = data;
    1630:	16030000 	strne	r0, [r3], -r0
    1634:	3a0e0300 	bcc	38223c <__ccfg+0x362294>
	if (*ptr)
    1638:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		len = strlen (ptr);
    163c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1640:	00240400 	eoreq	r0, r4, r0, lsl #8
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1644:	0b3e0b0b 	bleq	f84278 <__ccfg+0xf642d0>
    1648:	00000803 	andeq	r0, r0, r3, lsl #16
    164c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    1650:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1654:	13490035 	movtne	r0, #36917	; 0x9035
	len -= quant;
    1658:	13070000 	movwne	r0, #28672	; 0x7000
    165c:	3a0b0b01 	bcc	2c4268 <__ccfg+0x2a42c0>
    1660:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (len == 0) {
    1664:	0013010b 	andseq	r0, r3, fp, lsl #2
		ufree (data);
    1668:	000d0800 	andeq	r0, sp, r0, lsl #16
		finish;
    166c:	0b3a0e03 	bleq	e84e80 <__ccfg+0xe64ed8>
    1670:	0b390b3b 	bleq	e44364 <__ccfg+0xe243bc>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1674:	0b0b1349 	bleq	2c63a0 <__ccfg+0x2a63f8>
    1678:	0b0c0b0d 	bleq	3042b4 <__ccfg+0x2e430c>
    167c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1680:	03000d09 	movweq	r0, #3337	; 0xd09
    1684:	3b0b3a0e 	blcc	2cfec4 <__ccfg+0x2aff1c>
strand (__inserial, address)
    1688:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    168c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1690:	00340a00 	eorseq	r0, r4, r0, lsl #20
    1694:	0b3a0e03 	bleq	e84ea8 <__ccfg+0xe64f00>
    1698:	0b390b3b 	bleq	e4438c <__ccfg+0xe243e4>
	if (__inpline != NULL)
    169c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1580 <ser_inf+0x38>
    16a0:	00000c3c 	andeq	r0, r0, ip, lsr ip
		finish;
    16a4:	0b000f0b 	bleq	52d8 <__exidx_end+0x26a0>
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    16a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    16ac:	01010c00 	tsteq	r1, r0, lsl #24
    16b0:	13011349 	movwne	r1, #4937	; 0x1349
    16b4:	210d0000 	mrscs	r0, (UNDEF: 13)
		umwait (IM_INIT);
    16b8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
		release;
    16bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
	savedata (data);
    16c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	len = MAX_LINE_LENGTH;
    16c4:	13490b39 	movtne	r0, #39737	; 0x9b39
	io (IM_READ, __cport, READ, ptr, 1);
    16c8:	150f0000 	strne	r0, [pc, #-0]	; 16d0 <__inserial+0x48>
    16cc:	010c2701 	tsteq	ip, r1, lsl #14
    16d0:	10000013 	andne	r0, r0, r3, lsl r0
    16d4:	13490005 	movtne	r0, #36869	; 0x9005
	if (ptr == (char*) data) { // new line
    16d8:	34110000 	ldrcc	r0, [r1], #-0
    16dc:	3a0e0300 	bcc	3822e4 <__ccfg+0x36233c>
		if (*ptr == '\0') { // bin cmd
    16e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			proceed (IM_BIN);
    16e4:	3f13490b 	svccc	0x0013490b
    16e8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		if (*ptr < 0x20)
    16ec:	01131200 	tsteq	r3, r0, lsl #4
    16f0:	0b3a0b0b 	bleq	e84324 <__ccfg+0xe6437c>
			proceed (IM_READ);
    16f4:	0b39053b 	bleq	e42be8 <__ccfg+0xe22c40>
    16f8:	00001301 	andeq	r1, r0, r1, lsl #6
	if (*ptr == '\n' || *ptr == '\r') {
    16fc:	03000d13 	movweq	r0, #3347	; 0xd13
    1700:	3b0b3a0e 	blcc	2cff40 <__ccfg+0x2aff98>
    1704:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		*ptr = '\0';
    1708:	000b3813 	andeq	r3, fp, r3, lsl r8
		__inpline = (char*)data;
    170c:	01131400 	tsteq	r3, r0, lsl #8
		finish;
    1710:	0b0b0e03 	bleq	2c4f24 <__ccfg+0x2a4f7c>
	if (len) {
    1714:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		ptr++;
    1718:	13010b39 	movwne	r0, #6969	; 0x1b39
    171c:	21150000 	tstcs	r5, r0
		len--;
    1720:	2f134900 	svccs	0x00134900
	proceed (IM_READ);
    1724:	1600000b 	strne	r0, [r0], -fp
	io (IM_BIN, __cport, READ, ptr, 1);
    1728:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    172c:	0b3b0b3a 	bleq	ec441c <__ccfg+0xea4474>
    1730:	13490b39 	movtne	r0, #39737	; 0x9b39
    1734:	00000a02 	andeq	r0, r0, r2, lsl #20
    1738:	3f002e17 	svccc	0x00002e17
	len -= 2;
    173c:	3a0e030c 	bcc	382374 <__ccfg+0x3623cc>
	if (len > *ptr + 1) // 1 for 0x04
    1740:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1744:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		len = *ptr + 1;
    1748:	000a4001 	andeq	r4, sl, r1
    174c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
	ptr++;
    1750:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1754:	0b3b0b3a 	bleq	ec4444 <__ccfg+0xea449c>
    1758:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    175c:	01111349 	tsteq	r1, r9, asr #6
    1760:	0a400112 	beq	1001bb0 <__ccfg+0xfe1c08>
    1764:	00001301 	andeq	r1, r0, r1, lsl #6
    1768:	03000519 	movweq	r0, #1305	; 0x519
	len -= quant;
    176c:	3b0b3a08 	blcc	2cff94 <__ccfg+0x2affec>
		__inpline = (char*)data;
    1770:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		finish;
    1774:	00060213 	andeq	r0, r6, r3, lsl r2
	ptr += quant;
    1778:	00051a00 	andeq	r1, r5, r0, lsl #20
    177c:	0b3a0803 	bleq	e83790 <__ccfg+0xe637e8>
endstrand
    1780:	0b390b3b 	bleq	e44474 <__ccfg+0xe244cc>
    1784:	0a021349 	beq	864b0 <__ccfg+0x66508>
	proceed (IM_BINL);
    1788:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
endstrand
    178c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1790:	3b0b3a0e 	blcc	2cffd0 <__ccfg+0x2b0028>
    1794:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1798:	1113490c 	tstne	r3, ip, lsl #18
    179c:	40011201 	andmi	r1, r1, r1, lsl #4
    17a0:	0013010a 	andseq	r0, r3, sl, lsl #2
		if (res && (d < n))
    17a4:	00051c00 	andeq	r1, r5, r0, lsl #24
    17a8:	0b3a0803 	bleq	e837bc <__ccfg+0xe63814>
    17ac:	0b39053b 	bleq	e42ca0 <__ccfg+0xe22cf8>
    17b0:	06021349 	streq	r1, [r2], -r9, asr #6
			res [d] = (char) c;
    17b4:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
		d++;
    17b8:	030c3f00 	movweq	r3, #52992	; 0xcf00
    17bc:	3b0b3a0e 	blcc	2cfffc <__ccfg+0x2b0054>
    17c0:	110b3905 	tstne	fp, r5, lsl #18
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17c4:	40011201 	andmi	r1, r1, r1, lsl #4
    17c8:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    17cc:	08030034 	stmdaeq	r3, {r2, r4, r5}
				enci (10000);
    17d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17d4:	13490b39 	movtne	r0, #39737	; 0x9b39
    17d8:	00000602 	andeq	r0, r0, r2, lsl #12
	d = 0;
    17dc:	03000a1f 	movweq	r0, #2591	; 0xa1f
		c = *fm++;
    17e0:	3b0b3a0e 	blcc	2d0020 <__ccfg+0x2b0078>
		if (c == '\\') {
    17e4:	110b3905 	tstne	fp, r5, lsl #18
			if ((c = *fm++) == '\0') {
    17e8:	20000001 	andcs	r0, r0, r1
    17ec:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				outc ('\\');
    17f0:	06550152 			; <UNDEFINED> instruction: 0x06550152
			if ((c = *fm++) == '\0') {
    17f4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
				outc ('\\');
    17f8:	13010b57 	movwne	r0, #6999	; 0x1b57
    17fc:	05210000 	streq	r0, [r1, #-0]!
			outc (c);
    1800:	00133100 	andseq	r3, r3, r0, lsl #2
    1804:	011d2200 	tsteq	sp, r0, lsl #4
			if (c == '\0')
    1808:	01111331 	tsteq	r1, r1, lsr r3
    180c:	0b580112 	bleq	1601c5c <__ccfg+0x15e1cb4>
			outc (c);
    1810:	0b570559 	bleq	15c2d7c <__ccfg+0x15a2dd4>
				outc (val);
    1814:	05230000 	streq	r0, [r3, #-0]!
				val = (word) va_arg (ap, aword);
    1818:	3a0e0300 	bcc	382420 <__ccfg+0x362478>
		if (c == '%') {
    181c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1820:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			c = *fm++;
    1824:	24000006 	strcs	r0, [r0], #-6
			switch (c) {
    1828:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    182c:	0b3b0b3a 	bleq	ec451c <__ccfg+0xea4574>
    1830:	01110b39 	tsteq	r1, r9, lsr fp
    1834:	1d250000 	stcne	0, cr0, [r5, #-0]
    1838:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    183c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1840:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1844:	2600000b 	strcs	r0, [r0], -fp
				outc ('%');
    1848:	13310005 	teqne	r1, #5
    184c:	00000602 	andeq	r0, r0, r2, lsl #12
				outc (c);
    1850:	31011d27 	tstcc	r1, r7, lsr #26
    1854:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1858:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
				if (c == '\0')
    185c:	010b570b 	tsteq	fp, fp, lsl #14
				return d;
    1860:	28000013 	stmdacs	r0, {r0, r1, r4}
}
    1864:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1868:	01120111 	tsteq	r2, r1, lsl r1
			switch (c) {
    186c:	0b590b58 	bleq	16445d4 <__ccfg+0x162462c>
    1870:	00000b57 	andeq	r0, r0, r7, asr fp
    1874:	3f002e29 	svccc	0x00002e29
				for (i = 12; ; i -= 4) {
    1878:	3a0e030c 	bcc	3824b0 <__ccfg+0x362508>
				val = (word) va_arg (ap, aword);
    187c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
						[ (val >> i) & 0xf ]);
    1880:	1113490b 	tstne	r3, fp, lsl #18
    1884:	40011201 	andmi	r1, r1, r1, lsl #4
    1888:	2a00000a 	bcs	18b8 <__pi_vfparse+0xf4>
					outc (__pi_hex_enc_table
    188c:	0e03012e 	adfeqsp	f0, f3, #0.5
    1890:	0b3b0b3a 	bleq	ec4580 <__ccfg+0xea45d8>
					if (i == 0)
    1894:	01110b39 	tsteq	r1, r9, lsr fp
    1898:	0a400112 	beq	1001ce8 <__ccfg+0xfe1d40>
				for (i = 12; ; i -= 4) {
    189c:	00001301 	andeq	r1, r0, r1, lsl #6
				val = (word) va_arg (ap, aword);
    18a0:	03002e2b 	movweq	r2, #3627	; 0xe2b
				if (c == 'd' && (val & 0x8000) != 0) {
    18a4:	3b0b3a0e 	blcc	2d00e4 <__ccfg+0x2b013c>
				val = (word) va_arg (ap, aword);
    18a8:	200b390b 	andcs	r3, fp, fp, lsl #18
				if (c == 'd' && (val & 0x8000) != 0) {
    18ac:	2c00000b 	stccs	0, cr0, [r0], {11}
    18b0:	0e03012e 	adfeqsp	f0, f3, #0.5
					outc ('-');
    18b4:	0b3b0b3a 	bleq	ec45a4 <__ccfg+0xea45fc>
    18b8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					val = (~val) + 1;
    18bc:	01120111 	tsteq	r2, r1, lsl r1
    18c0:	13010a40 	movwne	r0, #6720	; 0x1a40
				for (i = 12; ; i -= 4) {
    18c4:	0b2d0000 	bleq	b418cc <__ccfg+0xb21924>
				enci (10000);
    18c8:	00065501 	andeq	r5, r6, r1, lsl #10
    18cc:	00342e00 	eorseq	r2, r4, r0, lsl #28
    18d0:	06021331 			; <UNDEFINED> instruction: 0x06021331
    18d4:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
    18d8:	3a0e0301 	bcc	3824e4 <__ccfg+0x36253c>
    18dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18e0:	2013490b 	andscs	r4, r3, fp, lsl #18
    18e4:	0013010b 	andseq	r0, r3, fp, lsl #2
    18e8:	00343000 	eorseq	r3, r4, r0
    18ec:	0b3a0803 	bleq	e83900 <__ccfg+0xe63958>
    18f0:	0b390b3b 	bleq	e445e4 <__ccfg+0xe2463c>
    18f4:	00001349 	andeq	r1, r0, r9, asr #6
    18f8:	03012e31 	movweq	r2, #7729	; 0x1e31
    18fc:	3b0b3a0e 	blcc	2d013c <__ccfg+0x2b0194>
    1900:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1904:	010b200c 	tsteq	fp, ip
    1908:	32000013 	andcc	r0, r0, #19
    190c:	08030005 	stmdaeq	r3, {r0, r2}
				if (c == 'd' || c == 'u') {
    1910:	0b3b0b3a 	bleq	ec4600 <__ccfg+0xea4658>
    1914:	13490b39 	movtne	r0, #39737	; 0x9b39
					if (c == 'd' &&
    1918:	1d330000 	ldcne	0, cr0, [r3, #-0]
					val = va_arg (ap, lword);
    191c:	11133101 	tstne	r3, r1, lsl #2
					fm++;
    1920:	58011201 	stmdapl	r1, {r0, r9, ip}
					if (c == 'd' &&
    1924:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1928:	0013010b 	andseq	r0, r3, fp, lsl #2
						outc ('-');
    192c:	012e3400 			; <UNDEFINED> instruction: 0x012e3400
    1930:	0b3a0e03 	bleq	e85144 <__ccfg+0xe6519c>
						val = (~val) + 1;
    1934:	0b390b3b 	bleq	e44628 <__ccfg+0xe24680>
				enci (10000);
    1938:	01111349 	tsteq	r1, r9, asr #6
					enci (1000000000UL);
    193c:	0a400112 	beq	1001d8c <__ccfg+0xfe1de4>
    1940:	00001301 	andeq	r1, r0, r1, lsl #6
    1944:	03003435 	movweq	r3, #1077	; 0x435
    1948:	3b0b3a08 	blcc	2d0170 <__ccfg+0x2b01c8>
    194c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1950:	00060213 	andeq	r0, r6, r3, lsl r2
    1954:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
    1958:	0b3a0e03 	bleq	e8516c <__ccfg+0xe651c4>
    195c:	0b39053b 	bleq	e42e50 <__ccfg+0xe22ea8>
    1960:	0b200c27 	bleq	804a04 <__ccfg+0x7e4a5c>
    1964:	00001301 	andeq	r1, r0, r1, lsl #6
    1968:	03000537 	movweq	r0, #1335	; 0x537
    196c:	3b0b3a0e 	blcc	2d01ac <__ccfg+0x2b0204>
    1970:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1974:	38000013 	stmdacc	r0, {r0, r1, r4}
    1978:	0e03012e 	adfeqsp	f0, f3, #0.5
    197c:	0b3b0b3a 	bleq	ec466c <__ccfg+0xea46c4>
				} else if (c == 'x') {
    1980:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					for (i = 28; ; i -= 4) {
    1984:	0b201349 	bleq	8066b0 <__ccfg+0x7e6708>
					val = va_arg (ap, lword);
    1988:	00001301 	andeq	r1, r0, r1, lsl #6
							[ (val >> i) & 0xf ]);
    198c:	03000539 	movweq	r0, #1337	; 0x539
    1990:	3b0b3a0e 	blcc	2d01d0 <__ccfg+0x2b0228>
						outc (__pi_hex_enc_table
    1994:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1998:	3a000013 	bcc	19ec <__pi_vfparse+0x228>
    199c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
						if (i == 0)
    19a0:	01120111 	tsteq	r2, r1, lsl r1
    19a4:	00000a40 	andeq	r0, r0, r0, asr #20
					for (i = 28; ; i -= 4) {
    19a8:	31001d3b 	tstcc	r0, fp, lsr sp
					outc ('%');
    19ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    19b0:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    19b4:	000b570b 	andeq	r5, fp, fp, lsl #14
					outc ('l');
    19b8:	11010000 	mrsne	r0, (UNDEF: 1)
    19bc:	130e2501 	movwne	r2, #58625	; 0xe501
				val = (word) va_arg (ap, aword);
    19c0:	1b0e030b 	blne	3825f4 <__ccfg+0x36264c>
				outc (val);
    19c4:	1106550e 	tstne	r6, lr, lsl #10
    19c8:	00061001 	andeq	r1, r6, r1
				while (*st != '\0') {
    19cc:	00240200 	eoreq	r0, r4, r0, lsl #4
    19d0:	0b3e0b0b 	bleq	f84604 <__ccfg+0xf6465c>
    19d4:	00000e03 	andeq	r0, r0, r3, lsl #28
    19d8:	03001603 	movweq	r1, #1539	; 0x603
					outc (*st);
    19dc:	3b0b3a0e 	blcc	2d021c <__ccfg+0x2b0274>
    19e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					st++;
    19e4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		c = *fm++;
    19e8:	0b0b0024 	bleq	2c1a80 <__ccfg+0x2a1ad8>
    19ec:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    19f0:	13050000 	movwne	r0, #20480	; 0x5000
char *vform (char *res, const char *fm, va_list aq) {
    19f4:	0b0e0301 	bleq	382600 <__ccfg+0x362658>
    19f8:	3b0b3a0b 	blcc	2d022c <__ccfg+0x2b0284>
	if (res != NULL) {
    19fc:	0013010b 	andseq	r0, r3, fp, lsl #2
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1a00:	000d0600 	andeq	r0, sp, r0, lsl #12
    1a04:	13490e03 	movtne	r0, #40451	; 0x9e03
    1a08:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
}
    1a0c:	0f070000 	svceq	0x00070000
    1a10:	000b0b00 	andeq	r0, fp, r0, lsl #22
	fml = strlen (fm) + 17;
    1a14:	00260800 	eoreq	r0, r6, r0, lsl #16
    1a18:	00001349 	andeq	r1, r0, r9, asr #6
    1a1c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
	if ((res = (char*) umalloc (fml)) == NULL)
    1a20:	0a000013 	beq	1a74 <vscan+0x30>
    1a24:	0b0b0113 	bleq	2c1e78 <__ccfg+0x2a1ed0>
    1a28:	0b3b0b3a 	bleq	ec4718 <__ccfg+0xea4770>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1a2c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1a30:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1a34:	3a0e0300 	bcc	38263c <__ccfg+0x362694>
    1a38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ufree (res);
    1a3c:	0b13490b 	bleq	4d3e70 <__ccfg+0x4b3ec8>
		goto Again;
    1a40:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	if (buf == NULL || fmt == NULL)
    1a44:	000b380b 	andeq	r3, fp, fp, lsl #16
int vscan (const char *buf, const char *fmt, va_list ap) {
    1a48:	000d0c00 	andeq	r0, sp, r0, lsl #24
	if (buf == NULL || fmt == NULL)
    1a4c:	0b3a0e03 	bleq	e85260 <__ccfg+0xe652b8>
    1a50:	0b390b3b 	bleq	e44744 <__ccfg+0xe2479c>
    1a54:	0b381349 	bleq	e06780 <__ccfg+0xde67d8>
		    	    case 'u': scanu (lword); break;
    1a58:	340d0000 	strcc	r0, [sp], #-0
			while (isspace (*buf)) buf++;
    1a5c:	3a0e0300 	bcc	382664 <__ccfg+0x3626bc>
    1a60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	while (*fmt != '\0') {
    1a64:	3f13490b 	svccc	0x0013490b
		if (*fmt++ != '%')
    1a68:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		switch (*fmt++) {
    1a6c:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1a70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1a74:	010f0000 	mrseq	r0, CPSR
    1a78:	01134901 	tsteq	r3, r1, lsl #18
    1a7c:	10000013 	andne	r0, r0, r3, lsl r0
    1a80:	00000021 	andeq	r0, r0, r1, lsr #32
    1a84:	03001611 	movweq	r1, #1553	; 0x611
}
    1a88:	3b0b3a0e 	blcc	2d02c8 <__ccfg+0x2b0320>
		switch (*fmt++) {
    1a8c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1a90:	12000013 	andne	r0, r0, #19
    1a94:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1a98:	00001301 	andeq	r1, r0, r1, lsl #6
			while (isspace (*buf)) buf++;
    1a9c:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    1aa0:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    1aa4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1aa8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1aac:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ab0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
			if (*buf == '\0')
    1ab4:	13150000 	tstne	r5, #0
			if (*buf != ',') {
    1ab8:	3a0b0b01 	bcc	2c46c4 <__ccfg+0x2a471c>
			sap = va_arg (ap, char*);
    1abc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			nc++;
    1ac0:	0013010b 	andseq	r0, r3, fp, lsl #2
			if (*buf != ',') {
    1ac4:	000d1600 	andeq	r1, sp, r0, lsl #12
				while (!isspace (*buf) && *buf != ',' &&
    1ac8:	0b3a0e03 	bleq	e852dc <__ccfg+0xe65334>
    1acc:	0b39053b 	bleq	e42fc0 <__ccfg+0xe23018>
    1ad0:	0b381349 	bleq	e067fc <__ccfg+0xde6854>
    1ad4:	13170000 	tstne	r7, #0
    1ad8:	0b0e0301 	bleq	3826e4 <__ccfg+0x36273c>
    1adc:	3b0b3a0b 	blcc	2d0310 <__ccfg+0x2b0368>
    1ae0:	010b3905 	tsteq	fp, r5, lsl #18
			while (isspace (*buf)) buf++;
    1ae4:	18000013 	stmdane	r0, {r0, r1, r4}
    1ae8:	13490021 	movtne	r0, #36897	; 0x9021
    1aec:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1af0:	3f012e19 	svccc	0x00012e19
    1af4:	3a0e030c 	bcc	38272c <__ccfg+0x362784>
			if (*buf == ',') buf++;
    1af8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1afc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			*sap = '\0';
    1b00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			break;
    1b04:	010a4001 	tsteq	sl, r1
		    case 'd': scani (word); break;
    1b08:	1a000013 	bne	1b5c <vscan+0x118>
    1b0c:	08030005 	stmdaeq	r3, {r0, r2}
    1b10:	0b3b0b3a 	bleq	ec4800 <__ccfg+0xea4858>
    1b14:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b18:	00000602 	andeq	r0, r0, r2, lsl #12
    1b1c:	0300051b 	movweq	r0, #1307	; 0x51b
    1b20:	3b0b3a08 	blcc	2d0348 <__ccfg+0x2b03a0>
    1b24:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b28:	000a0213 	andeq	r0, sl, r3, lsl r2
    1b2c:	00181c00 	andseq	r1, r8, r0, lsl #24
    1b30:	341d0000 	ldrcc	r0, [sp], #-0
    1b34:	3a0e0300 	bcc	38273c <__ccfg+0x362794>
    1b38:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b3c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1b40:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    1b44:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1b48:	0b3b0b3a 	bleq	ec4838 <__ccfg+0xea4890>
    1b4c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b50:	00000602 	andeq	r0, r0, r2, lsl #12
    1b54:	0300341f 	movweq	r3, #1055	; 0x41f
    1b58:	3b0b3a08 	blcc	2d0380 <__ccfg+0x2b03d8>
    1b5c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b60:	000a0213 	andeq	r0, sl, r3, lsl r2
    1b64:	11010000 	mrsne	r0, (UNDEF: 1)
    1b68:	130e2501 	movwne	r2, #58625	; 0xe501
    1b6c:	1b0e030b 	blne	3827a0 <__ccfg+0x3627f8>
    1b70:	1106550e 	tstne	r6, lr, lsl #10
    1b74:	00061001 	andeq	r1, r6, r1
		    case 'u': scanu (word); break;
    1b78:	00240200 	eoreq	r0, r4, r0, lsl #4
    1b7c:	0b3e0b0b 	bleq	f847b0 <__ccfg+0xf64808>
    1b80:	00000e03 	andeq	r0, r0, r3, lsl #28
    1b84:	03001603 	movweq	r1, #1539	; 0x603
    1b88:	3b0b3a0e 	blcc	2d03c8 <__ccfg+0x2b0420>
    1b8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1b90:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1b94:	0b0b0024 	bleq	2c1c2c <__ccfg+0x2a1c84>
    1b98:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1b9c:	13050000 	movwne	r0, #20480	; 0x5000
    1ba0:	0b0e0301 	bleq	3827ac <__ccfg+0x362804>
    1ba4:	3b0b3a0b 	blcc	2d03d8 <__ccfg+0x2b0430>
    1ba8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1bac:	000d0600 	andeq	r0, sp, r0, lsl #12
    1bb0:	13490e03 	movtne	r0, #40451	; 0x9e03
    1bb4:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    1bb8:	0f070000 	svceq	0x00070000
    1bbc:	000b0b00 	andeq	r0, fp, r0, lsl #22
		    case 'x': scanx (word); break;
    1bc0:	00260800 	eoreq	r0, r6, r0, lsl #16
    1bc4:	00001349 	andeq	r1, r0, r9, asr #6
    1bc8:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    1bcc:	0a000013 	beq	1c20 <vscan+0x1dc>
    1bd0:	0b0b0113 	bleq	2c2024 <__ccfg+0x2a207c>
    1bd4:	0b3b0b3a 	bleq	ec48c4 <__ccfg+0xea491c>
    1bd8:	13010b39 	movwne	r0, #6969	; 0x1b39
    1bdc:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1be0:	3a0e0300 	bcc	3827e8 <__ccfg+0x362840>
    1be4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1be8:	0b13490b 	bleq	4d401c <__ccfg+0x4b4074>
    1bec:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1bf0:	000b380b 	andeq	r3, fp, fp, lsl #16
    1bf4:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1bf8:	0b3a0e03 	bleq	e8540c <__ccfg+0xe65464>
    1bfc:	0b390b3b 	bleq	e448f0 <__ccfg+0xe24948>
    1c00:	0b381349 	bleq	e0692c <__ccfg+0xde6984>
    1c04:	340d0000 	strcc	r0, [sp], #-0
    1c08:	3a0e0300 	bcc	382810 <__ccfg+0x362868>
    1c0c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c10:	3f13490b 	svccc	0x0013490b
    1c14:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1c18:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1c1c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1c20:	010f0000 	mrseq	r0, CPSR
    1c24:	01134901 	tsteq	r3, r1, lsl #18
    1c28:	10000013 	andne	r0, r0, r3, lsl r0
    1c2c:	00000021 	andeq	r0, r0, r1, lsr #32
    1c30:	03001611 	movweq	r1, #1553	; 0x611
    1c34:	3b0b3a0e 	blcc	2d0474 <__ccfg+0x2b04cc>
			switch (*fmt++) {
    1c38:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1c3c:	12000013 	andne	r0, r0, #19
    1c40:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1c44:	00001301 	andeq	r1, r0, r1, lsl #6
    1c48:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    1c4c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
		    	    case 'd': scani (lword); break;
    1c50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c58:	13490b39 	movtne	r0, #39737	; 0x9b39
    1c5c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1c60:	13150000 	tstne	r5, #0
    1c64:	3a0b0b01 	bcc	2c4870 <__ccfg+0x2a48c8>
    1c68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c6c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c70:	000d1600 	andeq	r1, sp, r0, lsl #12
    1c74:	0b3a0e03 	bleq	e85488 <__ccfg+0xe654e0>
    1c78:	0b39053b 	bleq	e4316c <__ccfg+0xe231c4>
    1c7c:	0b381349 	bleq	e069a8 <__ccfg+0xde6a00>
    1c80:	13170000 	tstne	r7, #0
    1c84:	0b0e0301 	bleq	382890 <__ccfg+0x3628e8>
    1c88:	3b0b3a0b 	blcc	2d04bc <__ccfg+0x2b0514>
    1c8c:	010b3905 	tsteq	fp, r5, lsl #18
    1c90:	18000013 	stmdane	r0, {r0, r1, r4}
    1c94:	13490021 	movtne	r0, #36897	; 0x9021
    1c98:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1c9c:	3f012e19 	svccc	0x00012e19
    1ca0:	3a0e030c 	bcc	3828d8 <__ccfg+0x362930>
    1ca4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ca8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		    	    case 'x': scanx (lword); break;
    1cac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1cb0:	010a4001 	tsteq	sl, r1
    1cb4:	1a000013 	bne	1d08 <vscan+0x2c4>
    1cb8:	08030005 	stmdaeq	r3, {r0, r2}
    1cbc:	0b3b0b3a 	bleq	ec49ac <__ccfg+0xea4a04>
    1cc0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1cc4:	00000602 	andeq	r0, r0, r2, lsl #12
    1cc8:	0300051b 	movweq	r0, #1307	; 0x51b
    1ccc:	3b0b3a08 	blcc	2d04f4 <__ccfg+0x2b054c>
    1cd0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1cd4:	000a0213 	andeq	r0, sl, r3, lsl r2
    1cd8:	00181c00 	andseq	r1, r8, r0, lsl #24
    1cdc:	341d0000 	ldrcc	r0, [sp], #-0
    1ce0:	3a0e0300 	bcc	3828e8 <__ccfg+0x362940>
    1ce4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ce8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1cec:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    1cf0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1cf4:	0b3b0b3a 	bleq	ec49e4 <__ccfg+0xea4a3c>
    1cf8:	13490b39 	movtne	r0, #39737	; 0x9b39
    1cfc:	00000a02 	andeq	r0, r0, r2, lsl #20
    1d00:	01110100 	tsteq	r1, r0, lsl #2
    1d04:	0b130e25 	bleq	4c55a0 <__ccfg+0x4a55f8>
    1d08:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1d0c:	01110655 	tsteq	r1, r5, asr r6
    1d10:	00000610 	andeq	r0, r0, r0, lsl r6
    1d14:	03001602 	movweq	r1, #1538	; 0x602
    1d18:	3b0b3a0e 	blcc	2d0558 <__ccfg+0x2b05b0>
		    	    case 'd': scani (lword); break;
    1d1c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1d20:	03000013 	movweq	r0, #19
    1d24:	0b0b0024 	bleq	2c1dbc <__ccfg+0x2a1e14>
    1d28:	0e030b3e 	vmoveq.16	d3[0], r0
    1d2c:	26040000 	strcs	r0, [r4], -r0
    1d30:	00134900 	andseq	r4, r3, r0, lsl #18
    1d34:	00350500 	eorseq	r0, r5, r0, lsl #10
		    	    case 'u': scanu (lword); break;
    1d38:	00001349 	andeq	r1, r0, r9, asr #6
    1d3c:	0b002406 	bleq	ad5c <__exidx_end+0x8124>
    1d40:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1d44:	07000008 	streq	r0, [r0, -r8]
    1d48:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1d4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d50:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d54:	17080000 	strne	r0, [r8, -r0]
    1d58:	3a0b0b01 	bcc	2c4964 <__ccfg+0x2a49bc>
    1d5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d60:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d64:	000d0900 	andeq	r0, sp, r0, lsl #18
    1d68:	0b3a0e03 	bleq	e8557c <__ccfg+0xe655d4>
    1d6c:	0b390b3b 	bleq	e44a60 <__ccfg+0xe24ab8>
    1d70:	00001349 	andeq	r1, r0, r9, asr #6
    1d74:	4901010a 	stmdbmi	r1, {r1, r3, r8}
    1d78:	00130113 	andseq	r0, r3, r3, lsl r1
    1d7c:	00210b00 	eoreq	r0, r1, r0, lsl #22
		    	    case 'x': scanx (lword); break;
    1d80:	0b2f1349 	bleq	bc6aac <__ccfg+0xba6b04>
    1d84:	130c0000 	movwne	r0, #49152	; 0xc000
			if ((c = *buf++) == '\0')
    1d88:	3a0b0b01 	bcc	2c4994 <__ccfg+0x2a49ec>
    1d8c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			sap = va_arg (ap, char*);
    1d90:	0013010b 	andseq	r0, r3, fp, lsl #2
			nc++;
    1d94:	000d0d00 	andeq	r0, sp, r0, lsl #26
			break;
    1d98:	0b3a0e03 	bleq	e855ac <__ccfg+0xe65604>
			while (isspace (*buf)) buf++;
    1d9c:	0b390b3b 	bleq	e44a90 <__ccfg+0xe24ae8>
    1da0:	0b381349 	bleq	e06acc <__ccfg+0xde6b24>
    1da4:	0f0e0000 	svceq	0x000e0000
						*sap++ = *buf++;
    1da8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1dac:	01130f00 	tsteq	r3, r0, lsl #30
			while (isspace (*buf)) buf++;
    1db0:	0b0b0e03 	bleq	2c55c4 <__ccfg+0x2a561c>
    1db4:	0b3b0b3a 	bleq	ec4aa4 <__ccfg+0xea4afc>
    1db8:	13010b39 	movwne	r0, #6969	; 0x1b39
		return 0;
    1dbc:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1dc0:	3a080300 	bcc	2029c8 <__ccfg+0x1e2a20>
		    case 'x': scanx (word); break;
    1dc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dc8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		    	    case 'x': scanx (lword); break;
    1dcc:	1100000b 	tstne	r0, fp
    1dd0:	0b0b000f 	bleq	2c1e14 <__ccfg+0x2a1e6c>
    1dd4:	00001349 	andeq	r1, r0, r9, asr #6
    1dd8:	03011312 	movweq	r1, #4882	; 0x1312
    1ddc:	3a050b0e 	bcc	144a1c <__ccfg+0x124a74>
    1de0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1de4:	0013010b 	andseq	r0, r3, fp, lsl #2
    1de8:	000d1300 	andeq	r1, sp, r0, lsl #6
    1dec:	0b3a0e03 	bleq	e85600 <__ccfg+0xe65658>
    1df0:	0b390b3b 	bleq	e44ae4 <__ccfg+0xe24b3c>
    1df4:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1df8:	15140000 	ldrne	r0, [r4, #-0]
    1dfc:	000c2700 	andeq	r2, ip, r0, lsl #14
    1e00:	01151500 	tsteq	r5, r0, lsl #10
    1e04:	13490c27 	movtne	r0, #39975	; 0x9c27
    1e08:	00001301 	andeq	r1, r0, r1, lsl #6
    1e0c:	49000516 	stmdbmi	r0, {r1, r2, r4, r8, sl}
    1e10:	17000013 	smladne	r0, r3, r0, r0
    1e14:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1e18:	0b3a050b 	bleq	e8324c <__ccfg+0xe632a4>
    1e1c:	0b39053b 	bleq	e43310 <__ccfg+0xe23368>
    1e20:	00001301 	andeq	r1, r0, r1, lsl #6
    1e24:	03000d18 	movweq	r0, #3352	; 0xd18
    1e28:	3b0b3a0e 	blcc	2d0668 <__ccfg+0x2b06c0>
    1e2c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1e30:	000b3813 	andeq	r3, fp, r3, lsl r8
    1e34:	000d1900 	andeq	r1, sp, r0, lsl #18
    1e38:	0b3a0e03 	bleq	e8564c <__ccfg+0xe656a4>
    1e3c:	0b39053b 	bleq	e43330 <__ccfg+0xe23388>
    1e40:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
    1e44:	131a0000 	tstne	sl, #0
    1e48:	0b0e0301 	bleq	382a54 <__ccfg+0x362aac>
    1e4c:	3b0b3a0b 	blcc	2d0680 <__ccfg+0x2b06d8>
    1e50:	010b3905 	tsteq	fp, r5, lsl #18
    1e54:	1b000013 	blne	1ea8 <NOROM_OSCClockSourceGet+0x20>
    1e58:	0b0b0113 	bleq	2c22ac <__ccfg+0x2a2304>
    1e5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1e60:	13010b39 	movwne	r0, #6969	; 0x1b39
    1e64:	171c0000 	ldrne	r0, [ip, -r0]
    1e68:	3a0b0b01 	bcc	2c4a74 <__ccfg+0x2a4acc>
    1e6c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e70:	0013010b 	andseq	r0, r3, fp, lsl #2
    1e74:	000d1d00 	andeq	r1, sp, r0, lsl #26
    1e78:	0b3a0e03 	bleq	e8568c <__ccfg+0xe656e4>
    1e7c:	0b39053b 	bleq	e43370 <__ccfg+0xe233c8>
    1e80:	00001349 	andeq	r1, r0, r9, asr #6
    1e84:	0300131e 	movweq	r1, #798	; 0x31e
    1e88:	000c3c0e 	andeq	r3, ip, lr, lsl #24
    1e8c:	01151f00 	tsteq	r5, r0, lsl #30
    1e90:	13010c27 	movwne	r0, #7207	; 0x1c27
    1e94:	34200000 	strtcc	r0, [r0], #-0
    1e98:	3a0e0300 	bcc	382aa0 <__ccfg+0x362af8>
    1e9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea0:	3f13490b 	svccc	0x0013490b
    1ea4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1ea8:	000d2100 	andeq	r2, sp, r0, lsl #2
    1eac:	0b3a0e03 	bleq	e856c0 <__ccfg+0xe65718>
    1eb0:	0b390b3b 	bleq	e44ba4 <__ccfg+0xe24bfc>
    1eb4:	0b0b1349 	bleq	2c6be0 <__ccfg+0x2a6c38>
    1eb8:	0b0c0b0d 	bleq	304af4 <__ccfg+0x2e4b4c>
    1ebc:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ec0:	03000d22 	movweq	r0, #3362	; 0xd22
    1ec4:	3b0b3a0e 	blcc	2d0704 <__ccfg+0x2b075c>
    1ec8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1ecc:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1ed0:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1ed4:	2300000b 	movwcs	r0, #11
    1ed8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1edc:	0b3b0b3a 	bleq	ec4bcc <__ccfg+0xea4c24>
    1ee0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ee4:	00000a02 	andeq	r0, r0, r2, lsl #20
    1ee8:	49002124 	stmdbmi	r0, {r2, r5, r8, sp}
    1eec:	00052f13 	andeq	r2, r5, r3, lsl pc
    1ef0:	00342500 	eorseq	r2, r4, r0, lsl #10
    1ef4:	0b3a0e03 	bleq	e85708 <__ccfg+0xe65760>
    1ef8:	0b390b3b 	bleq	e44bec <__ccfg+0xe24c44>
    1efc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1de0 <NOROM_AONBatMonTemperatureGetDegC+0xc>
    1f00:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1f04:	00002126 	andeq	r2, r0, r6, lsr #2
    1f08:	00342700 	eorseq	r2, r4, r0, lsl #14
    1f0c:	0b3a0e03 	bleq	e85720 <__ccfg+0xe65778>
    1f10:	0b39053b 	bleq	e43404 <__ccfg+0xe2345c>
    1f14:	00001349 	andeq	r1, r0, r9, asr #6
    1f18:	3f012e28 	svccc	0x00012e28
    1f1c:	3a0e030c 	bcc	382b54 <__ccfg+0x362bac>
    1f20:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f24:	110c270b 	tstne	ip, fp, lsl #14
    1f28:	40011201 	andmi	r1, r1, r1, lsl #4
    1f2c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f30:	00052900 	andeq	r2, r5, r0, lsl #18
    1f34:	0b3a0803 	bleq	e83f48 <__ccfg+0xe63fa0>
    1f38:	0b39053b 	bleq	e4342c <__ccfg+0xe23484>
    1f3c:	06021349 	streq	r1, [r2], -r9, asr #6
    1f40:	1d2a0000 	stcne	0, cr0, [sl, #-0]
    1f44:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1f48:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1f4c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    1f50:	0013010b 	andseq	r0, r3, fp, lsl #2
    1f54:	010b2b00 	tsteq	fp, r0, lsl #22
    1f58:	00000655 	andeq	r0, r0, r5, asr r6
    1f5c:	3100342c 	tstcc	r0, ip, lsr #8
    1f60:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    1f64:	13310034 	teqne	r1, #52	; 0x34
    1f68:	00000602 	andeq	r0, r0, r2, lsl #12
    1f6c:	31001d2e 	tstcc	r0, lr, lsr #26
    1f70:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1f74:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1f78:	000b5705 	andeq	r5, fp, r5, lsl #14
    1f7c:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
    1f80:	0b3a0e03 	bleq	e85794 <__ccfg+0xe657ec>
    1f84:	0b39053b 	bleq	e43478 <__ccfg+0xe234d0>
    1f88:	13490c27 	movtne	r0, #39975	; 0x9c27
    1f8c:	01120111 	tsteq	r2, r1, lsl r1
    1f90:	13010a40 	movwne	r0, #6720	; 0x1a40
    1f94:	34300000 	ldrtcc	r0, [r0], #-0
    1f98:	3a080300 	bcc	202ba0 <__ccfg+0x1e2bf8>
    1f9c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fa0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1fa4:	31000006 	tstcc	r0, r6
    1fa8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    1fac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fb0:	01110b39 	tsteq	r1, r9, lsr fp
    1fb4:	0b320000 	bleq	c81fbc <__ccfg+0xc62014>
    1fb8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1fbc:	33000001 	movwcc	r0, #1
    1fc0:	0e03012e 	adfeqsp	f0, f3, #0.5
    1fc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fc8:	0b200b39 	bleq	804cb4 <__ccfg+0x7e4d0c>
    1fcc:	00001301 	andeq	r1, r0, r1, lsl #6
    1fd0:	03003434 	movweq	r3, #1076	; 0x434
    1fd4:	3b0b3a08 	blcc	2d07fc <__ccfg+0x2b0854>
    1fd8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1fdc:	35000013 	strcc	r0, [r0, #-19]	; 0xffffffed
    1fe0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1fe4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
    1fec:	00000602 	andeq	r0, r0, r2, lsl #12
    1ff0:	31001d36 	tstcc	r0, r6, lsr sp
    1ff4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1ff8:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    1ffc:	000b5705 	andeq	r5, fp, r5, lsl #14
    2000:	010b3700 	tsteq	fp, r0, lsl #14
    2004:	13010655 	movwne	r0, #5717	; 0x1655
    2008:	1d380000 	ldcne	0, cr0, [r8, #-0]
    200c:	11133101 	tstne	r3, r1, lsl #2
    2010:	58011201 	stmdapl	r1, {r0, r9, ip}
    2014:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
    2018:	0013010b 	andseq	r0, r3, fp, lsl #2
    201c:	00053900 	andeq	r3, r5, r0, lsl #18
    2020:	00001331 	andeq	r1, r0, r1, lsr r3
    2024:	31011d3a 	tstcc	r1, sl, lsr sp
    2028:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    202c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2030:	000b5705 	andeq	r5, fp, r5, lsl #14
    2034:	012e3b00 			; <UNDEFINED> instruction: 0x012e3b00
    2038:	0b3a0e03 	bleq	e8584c <__ccfg+0xe658a4>
    203c:	0b39053b 	bleq	e43530 <__ccfg+0xe23588>
    2040:	01120111 	tsteq	r2, r1, lsl r1
    2044:	13010a40 	movwne	r0, #6720	; 0x1a40
    2048:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
    204c:	3a0e0300 	bcc	382c54 <__ccfg+0x362cac>
    2050:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2054:	000b200b 	andeq	r2, fp, fp
    2058:	002e3d00 	eoreq	r3, lr, r0, lsl #26
    205c:	0b3a0e03 	bleq	e85870 <__ccfg+0xe658c8>
    2060:	0b39053b 	bleq	e43554 <__ccfg+0xe235ac>
    2064:	01120111 	tsteq	r2, r1, lsl r1
    2068:	00000a40 	andeq	r0, r0, r0, asr #20
    206c:	03002e3e 	movweq	r2, #3646	; 0xe3e
    2070:	3b0b3a0e 	blcc	2d08b0 <__ccfg+0x2b0908>
    2074:	200b390b 	andcs	r3, fp, fp, lsl #18
    2078:	3f00000b 	svccc	0x0000000b
    207c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2080:	0b3b0b3a 	bleq	ec4d70 <__ccfg+0xea4dc8>
    2084:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2088:	13010b20 	movwne	r0, #6944	; 0x1b20
    208c:	05400000 	strbeq	r0, [r0, #-0]
    2090:	3a080300 	bcc	202c98 <__ccfg+0x1e2cf0>
    2094:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2098:	0013490b 	andseq	r4, r3, fp, lsl #18
    209c:	00054100 	andeq	r4, r5, r0, lsl #2
    20a0:	0b3a0e03 	bleq	e858b4 <__ccfg+0xe6590c>
    20a4:	0b390b3b 	bleq	e44d98 <__ccfg+0xe24df0>
    20a8:	00001349 	andeq	r1, r0, r9, asr #6
    20ac:	03003442 	movweq	r3, #1090	; 0x442
    20b0:	3b0b3a08 	blcc	2d08d8 <__ccfg+0x2b0930>
    20b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20b8:	43000013 	movwmi	r0, #19
    20bc:	0e03012e 	adfeqsp	f0, f3, #0.5
    20c0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20c4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    20c8:	13010b20 	movwne	r0, #6944	; 0x1b20
    20cc:	05440000 	strbeq	r0, [r4, #-0]
    20d0:	3a0e0300 	bcc	382cd8 <__ccfg+0x362d30>
    20d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    20d8:	0013490b 	andseq	r4, r3, fp, lsl #18
    20dc:	002e4500 	eoreq	r4, lr, r0, lsl #10
    20e0:	0b3a0e03 	bleq	e858f4 <__ccfg+0xe6594c>
    20e4:	0b39053b 	bleq	e435d8 <__ccfg+0xe23630>
    20e8:	0b200c27 	bleq	80518c <__ccfg+0x7e51e4>
    20ec:	2e460000 	cdpcs	0, 4, cr0, cr6, cr0, {0}
    20f0:	3a0e0300 	bcc	382cf8 <__ccfg+0x362d50>
    20f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20f8:	200c270b 	andcs	r2, ip, fp, lsl #14
    20fc:	4700000b 	strmi	r0, [r0, -fp]
    2100:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    2104:	01120111 	tsteq	r2, r1, lsl r1
    2108:	13010a40 	movwne	r0, #6720	; 0x1a40
    210c:	05480000 	strbeq	r0, [r8, #-0]
    2110:	02133100 	andseq	r3, r3, #0, 2
    2114:	49000006 	stmdbmi	r0, {r1, r2}
    2118:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    211c:	01120111 	tsteq	r2, r1, lsl r1
    2120:	0b590b58 	bleq	1644e88 <__ccfg+0x1624ee0>
    2124:	00000b57 	andeq	r0, r0, r7, asr fp
    2128:	31011d4a 	tstcc	r1, sl, asr #26
    212c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2130:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
    2134:	000b5705 	andeq	r5, fp, r5, lsl #14
    2138:	012e4b00 			; <UNDEFINED> instruction: 0x012e4b00
    213c:	01111331 	tsteq	r1, r1, lsr r3
    2140:	0a400112 	beq	1002590 <__ccfg+0xfe25e8>
    2144:	344c0000 	strbcc	r0, [ip], #-0
    2148:	1c133100 	ldfnes	f3, [r3], {-0}
    214c:	00000006 	andeq	r0, r0, r6
    2150:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2154:	030b130e 	movweq	r1, #45838	; 0xb30e
    2158:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    215c:	10011106 	andne	r1, r1, r6, lsl #2
    2160:	02000006 	andeq	r0, r0, #6
    2164:	0b0b0024 	bleq	2c21fc <__ccfg+0x2a2254>
    2168:	0e030b3e 	vmoveq.16	d3[0], r0
    216c:	16030000 	strne	r0, [r3], -r0
    2170:	3a0e0300 	bcc	382d78 <__ccfg+0x362dd0>
    2174:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2178:	0013490b 	andseq	r4, r3, fp, lsl #18
    217c:	00240400 	eoreq	r0, r4, r0, lsl #8
    2180:	0b3e0b0b 	bleq	f84db4 <__ccfg+0xf64e0c>
    2184:	00000803 	andeq	r0, r0, r3, lsl #16
    2188:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    218c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2190:	13490035 	movtne	r0, #36917	; 0x9035
    2194:	13070000 	movwne	r0, #28672	; 0x7000
    2198:	3a0b0b01 	bcc	2c4da4 <__ccfg+0x2a4dfc>
    219c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    21a4:	000d0800 	andeq	r0, sp, r0, lsl #16
    21a8:	0b3a0e03 	bleq	e859bc <__ccfg+0xe65a14>
    21ac:	0b390b3b 	bleq	e44ea0 <__ccfg+0xe24ef8>
    21b0:	0b0b1349 	bleq	2c6edc <__ccfg+0x2a6f34>
    21b4:	0b0c0b0d 	bleq	304df0 <__ccfg+0x2e4e48>
    21b8:	00000b38 	andeq	r0, r0, r8, lsr fp
    21bc:	03000d09 	movweq	r0, #3337	; 0xd09
    21c0:	3b0b3a0e 	blcc	2d0a00 <__ccfg+0x2b0a58>
    21c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    21c8:	000b3813 	andeq	r3, fp, r3, lsl r8
    21cc:	00340a00 	eorseq	r0, r4, r0, lsl #20
    21d0:	0b3a0e03 	bleq	e859e4 <__ccfg+0xe65a3c>
    21d4:	0b390b3b 	bleq	e44ec8 <__ccfg+0xe24f20>
    21d8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 20bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x14>
    21dc:	00000c3c 	andeq	r0, r0, ip, lsr ip
    21e0:	0b000f0b 	bleq	5e14 <__exidx_end+0x31dc>
    21e4:	0013490b 	andseq	r4, r3, fp, lsl #18
    21e8:	01010c00 	tsteq	r1, r0, lsl #24
    21ec:	13011349 	movwne	r1, #4937	; 0x1349
    21f0:	210d0000 	mrscs	r0, (UNDEF: 13)
    21f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    21f8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    21fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2200:	13490b39 	movtne	r0, #39737	; 0x9b39
    2204:	150f0000 	strne	r0, [pc, #-0]	; 220c <NOROM_SetupGetTrimForAmpcompCtrl+0x20>
    2208:	010c2701 	tsteq	ip, r1, lsl #14
    220c:	10000013 	andne	r0, r0, r3, lsl r0
    2210:	13490005 	movtne	r0, #36869	; 0x9005
    2214:	34110000 	ldrcc	r0, [r1], #-0
    2218:	3a0e0300 	bcc	382e20 <__ccfg+0x362e78>
    221c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2220:	3f13490b 	svccc	0x0013490b
    2224:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    2228:	01131200 	tsteq	r3, r0, lsl #4
    222c:	0b3a0b0b 	bleq	e84e60 <__ccfg+0xe64eb8>
    2230:	0b39053b 	bleq	e43724 <__ccfg+0xe2377c>
    2234:	00001301 	andeq	r1, r0, r1, lsl #6
    2238:	03000d13 	movweq	r0, #3347	; 0xd13
    223c:	3b0b3a0e 	blcc	2d0a7c <__ccfg+0x2b0ad4>
    2240:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2244:	000b3813 	andeq	r3, fp, r3, lsl r8
    2248:	01131400 	tsteq	r3, r0, lsl #8
    224c:	0b0b0e03 	bleq	2c5a60 <__ccfg+0x2a5ab8>
    2250:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2254:	13010b39 	movwne	r0, #6969	; 0x1b39
    2258:	21150000 	tstcs	r5, r0
    225c:	2f134900 	svccs	0x00134900
    2260:	1600000b 	strne	r0, [r0], -fp
    2264:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 21b4 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x4>
    2268:	0b3a0e03 	bleq	e85a7c <__ccfg+0xe65ad4>
    226c:	0b390b3b 	bleq	e44f60 <__ccfg+0xe24fb8>
    2270:	01110c27 	tsteq	r1, r7, lsr #24
    2274:	0a400112 	beq	10026c4 <__ccfg+0xfe271c>
    2278:	00001301 	andeq	r1, r0, r1, lsl #6
    227c:	03000517 	movweq	r0, #1303	; 0x517
    2280:	3b0b3a0e 	blcc	2d0ac0 <__ccfg+0x2b0b18>
    2284:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2288:	00060213 	andeq	r0, r6, r3, lsl r2
    228c:	00341800 	eorseq	r1, r4, r0, lsl #16
    2290:	0b3a0e03 	bleq	e85aa4 <__ccfg+0xe65afc>
    2294:	0b390b3b 	bleq	e44f88 <__ccfg+0xe24fe0>
    2298:	06021349 	streq	r1, [r2], -r9, asr #6
    229c:	0a190000 	beq	6422a4 <__ccfg+0x6222fc>
    22a0:	3a0e0300 	bcc	382ea8 <__ccfg+0x362f00>
    22a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22a8:	1a00000b 	bne	22dc <NOROM_SetupGetTrimForRadcExtCfg+0x18>
    22ac:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    22b0:	341b0000 	ldrcc	r0, [fp], #-0
    22b4:	3a080300 	bcc	202ebc <__ccfg+0x1e2f14>
    22b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    22c0:	0000000a 	andeq	r0, r0, sl
    22c4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    22c8:	030b130e 	movweq	r1, #45838	; 0xb30e
    22cc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    22d0:	10011106 	andne	r1, r1, r6, lsl #2
    22d4:	02000006 	andeq	r0, r0, #6
    22d8:	0b0b0024 	bleq	2c2370 <__ccfg+0x2a23c8>
    22dc:	0e030b3e 	vmoveq.16	d3[0], r0
    22e0:	16030000 	strne	r0, [r3], -r0
    22e4:	3a0e0300 	bcc	382eec <__ccfg+0x362f44>
    22e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22ec:	0013490b 	andseq	r4, r3, fp, lsl #18
    22f0:	00240400 	eoreq	r0, r4, r0, lsl #8
    22f4:	0b3e0b0b 	bleq	f84f28 <__ccfg+0xf64f80>
    22f8:	00000803 	andeq	r0, r0, r3, lsl #16
    22fc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2300:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2304:	13490035 	movtne	r0, #36917	; 0x9035
    2308:	0f070000 	svceq	0x00070000
    230c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2310:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2314:	0b0b0113 	bleq	2c2768 <__ccfg+0x2a27c0>
    2318:	0b3b0b3a 	bleq	ec5008 <__ccfg+0xea5060>
    231c:	13010b39 	movwne	r0, #6969	; 0x1b39
    2320:	0d090000 	stceq	0, cr0, [r9, #-0]
    2324:	3a0e0300 	bcc	382f2c <__ccfg+0x362f84>
    2328:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    232c:	0b13490b 	bleq	4d4760 <__ccfg+0x4b47b8>
    2330:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2334:	000b380b 	andeq	r3, fp, fp, lsl #16
    2338:	000d0a00 	andeq	r0, sp, r0, lsl #20
    233c:	0b3a0e03 	bleq	e85b50 <__ccfg+0xe65ba8>
    2340:	0b390b3b 	bleq	e45034 <__ccfg+0xe2508c>
    2344:	0b381349 	bleq	e07070 <__ccfg+0xde70c8>
    2348:	340b0000 	strcc	r0, [fp], #-0
    234c:	3a0e0300 	bcc	382f54 <__ccfg+0x362fac>
    2350:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2354:	3f13490b 	svccc	0x0013490b
    2358:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    235c:	01010c00 	tsteq	r1, r0, lsl #24
    2360:	13011349 	movwne	r1, #4937	; 0x1349
    2364:	210d0000 	mrscs	r0, (UNDEF: 13)
    2368:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    236c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2370:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2374:	13490b39 	movtne	r0, #39737	; 0x9b39
    2378:	150f0000 	strne	r0, [pc, #-0]	; 2380 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x68>
    237c:	010c2701 	tsteq	ip, r1, lsl #14
    2380:	10000013 	andne	r0, r0, r3, lsl r0
    2384:	13490005 	movtne	r0, #36869	; 0x9005
    2388:	34110000 	ldrcc	r0, [r1], #-0
    238c:	3a0e0300 	bcc	382f94 <__ccfg+0x362fec>
    2390:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2394:	3f13490b 	svccc	0x0013490b
    2398:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    239c:	01131200 	tsteq	r3, r0, lsl #4
    23a0:	0b3a0b0b 	bleq	e84fd4 <__ccfg+0xe6502c>
    23a4:	0b39053b 	bleq	e43898 <__ccfg+0xe238f0>
    23a8:	00001301 	andeq	r1, r0, r1, lsl #6
    23ac:	03000d13 	movweq	r0, #3347	; 0xd13
    23b0:	3b0b3a0e 	blcc	2d0bf0 <__ccfg+0x2b0c48>
    23b4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    23b8:	000b3813 	andeq	r3, fp, r3, lsl r8
    23bc:	01131400 	tsteq	r3, r0, lsl #8
    23c0:	0b0b0e03 	bleq	2c5bd4 <__ccfg+0x2a5c2c>
    23c4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23c8:	13010b39 	movwne	r0, #6969	; 0x1b39
    23cc:	21150000 	tstcs	r5, r0
    23d0:	2f134900 	svccs	0x00134900
    23d4:	1600000b 	strne	r0, [r0], -fp
    23d8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    23dc:	0b3b0b3a 	bleq	ec50cc <__ccfg+0xea5124>
    23e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    23e4:	0a020c3f 	beq	854e8 <__ccfg+0x65540>
    23e8:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    23ec:	030c3f01 	movweq	r3, #52993	; 0xcf01
    23f0:	3b0b3a0e 	blcc	2d0c30 <__ccfg+0x2b0c88>
    23f4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    23f8:	1201110c 	andne	r1, r1, #12, 2
    23fc:	000a4001 	andeq	r4, sl, r1
    2400:	00051800 	andeq	r1, r5, r0, lsl #16
    2404:	0b3a0e03 	bleq	e85c18 <__ccfg+0xe65c70>
    2408:	0b390b3b 	bleq	e450fc <__ccfg+0xe25154>
    240c:	06021349 	streq	r1, [r2], -r9, asr #6
    2410:	34190000 	ldrcc	r0, [r9], #-0
    2414:	3a0e0300 	bcc	38301c <__ccfg+0x363074>
    2418:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    241c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2420:	1a000006 	bne	2440 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x18>
    2424:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2428:	341b0000 	ldrcc	r0, [fp], #-0
    242c:	3a080300 	bcc	203034 <__ccfg+0x1e308c>
    2430:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2434:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2438:	0000000a 	andeq	r0, r0, sl
    243c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2440:	030b130e 	movweq	r1, #45838	; 0xb30e
    2444:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2448:	10011106 	andne	r1, r1, r6, lsl #2
    244c:	02000006 	andeq	r0, r0, #6
    2450:	0b0b0024 	bleq	2c24e8 <__ccfg+0x2a2540>
    2454:	0e030b3e 	vmoveq.16	d3[0], r0
    2458:	16030000 	strne	r0, [r3], -r0
    245c:	3a0e0300 	bcc	383064 <__ccfg+0x3630bc>
    2460:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2464:	0013490b 	andseq	r4, r3, fp, lsl #18
    2468:	00240400 	eoreq	r0, r4, r0, lsl #8
    246c:	0b3e0b0b 	bleq	f850a0 <__ccfg+0xf650f8>
    2470:	00000803 	andeq	r0, r0, r3, lsl #16
    2474:	03011305 	movweq	r1, #4869	; 0x1305
    2478:	3a0b0b0e 	bcc	2c50b8 <__ccfg+0x2a5110>
    247c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2480:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2484:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2488:	0b381349 	bleq	e071b4 <__ccfg+0xde720c>
    248c:	00000c34 	andeq	r0, r0, r4, lsr ip
    2490:	0b000f07 	bleq	60b4 <__exidx_end+0x347c>
    2494:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2498:	13490026 	movtne	r0, #36902	; 0x9026
    249c:	35090000 	strcc	r0, [r9, #-0]
    24a0:	00134900 	andseq	r4, r3, r0, lsl #18
    24a4:	000f0a00 	andeq	r0, pc, r0, lsl #20
    24a8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    24ac:	130b0000 	movwne	r0, #45056	; 0xb000
    24b0:	3a0b0b01 	bcc	2c50bc <__ccfg+0x2a5114>
    24b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    24bc:	000d0c00 	andeq	r0, sp, r0, lsl #24
    24c0:	0b3a0e03 	bleq	e85cd4 <__ccfg+0xe65d2c>
    24c4:	0b390b3b 	bleq	e451b8 <__ccfg+0xe25210>
    24c8:	0b0b1349 	bleq	2c71f4 <__ccfg+0x2a724c>
    24cc:	0b0c0b0d 	bleq	305108 <__ccfg+0x2e5160>
    24d0:	00000b38 	andeq	r0, r0, r8, lsr fp
    24d4:	03000d0d 	movweq	r0, #3341	; 0xd0d
    24d8:	3b0b3a0e 	blcc	2d0d18 <__ccfg+0x2b0d70>
    24dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    24e0:	000b3813 	andeq	r3, fp, r3, lsl r8
    24e4:	00340e00 	eorseq	r0, r4, r0, lsl #28
    24e8:	0b3a0e03 	bleq	e85cfc <__ccfg+0xe65d54>
    24ec:	0b390b3b 	bleq	e451e0 <__ccfg+0xe25238>
    24f0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 23d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xbc>
    24f4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    24f8:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    24fc:	00130113 	andseq	r0, r3, r3, lsl r1
    2500:	00211000 	eoreq	r1, r1, r0
    2504:	16110000 	ldrne	r0, [r1], -r0
    2508:	3a0e0300 	bcc	383110 <__ccfg+0x363168>
    250c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2510:	0013490b 	andseq	r4, r3, fp, lsl #18
    2514:	01151200 	tsteq	r5, r0, lsl #4
    2518:	13010c27 	movwne	r0, #7207	; 0x1c27
    251c:	05130000 	ldreq	r0, [r3, #-0]
    2520:	00134900 	andseq	r4, r3, r0, lsl #18
    2524:	00341400 	eorseq	r1, r4, r0, lsl #8
    2528:	0b3a0e03 	bleq	e85d3c <__ccfg+0xe65d94>
    252c:	0b39053b 	bleq	e43a20 <__ccfg+0xe23a78>
    2530:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2414 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>
    2534:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2538:	0b011315 	bleq	47194 <__ccfg+0x271ec>
    253c:	3b0b3a0b 	blcc	2d0d70 <__ccfg+0x2b0dc8>
    2540:	010b3905 	tsteq	fp, r5, lsl #18
    2544:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2548:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    254c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2550:	13490b39 	movtne	r0, #39737	; 0x9b39
    2554:	00000b38 	andeq	r0, r0, r8, lsr fp
    2558:	03011317 	movweq	r1, #4887	; 0x1317
    255c:	3a0b0b0e 	bcc	2c519c <__ccfg+0x2a51f4>
    2560:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2564:	0013010b 	andseq	r0, r3, fp, lsl #2
    2568:	00211800 	eoreq	r1, r1, r0, lsl #16
    256c:	0b2f1349 	bleq	bc7298 <__ccfg+0xba72f0>
    2570:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2574:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2578:	3b0b3a0e 	blcc	2d0db8 <__ccfg+0x2b0e10>
    257c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2580:	1113490c 	tstne	r3, ip, lsl #18
    2584:	40011201 	andmi	r1, r1, r1, lsl #4
    2588:	0013010a 	andseq	r0, r3, sl, lsl #2
    258c:	00051a00 	andeq	r1, r5, r0, lsl #20
    2590:	0b3a0803 	bleq	e845a4 <__ccfg+0xe645fc>
    2594:	0b390b3b 	bleq	e45288 <__ccfg+0xe252e0>
    2598:	06021349 	streq	r1, [r2], -r9, asr #6
    259c:	341b0000 	ldrcc	r0, [fp], #-0
    25a0:	3a080300 	bcc	2031a8 <__ccfg+0x1e3200>
    25a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    25ac:	1c000006 	stcne	0, cr0, [r0], {6}
    25b0:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    25b4:	0b3b0b3a 	bleq	ec52a4 <__ccfg+0xea52fc>
    25b8:	01110b39 	tsteq	r1, r9, lsr fp
    25bc:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    25c0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    25c4:	3b0b3a0e 	blcc	2d0e04 <__ccfg+0x2b0e5c>
    25c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    25cc:	1113490c 	tstne	r3, ip, lsl #18
    25d0:	40011201 	andmi	r1, r1, r1, lsl #4
    25d4:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    25d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    25dc:	0b3b0b3a 	bleq	ec52cc <__ccfg+0xea5324>
    25e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    25e4:	00000a02 	andeq	r0, r0, r2, lsl #20
    25e8:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    25ec:	3b0b3a0e 	blcc	2d0e2c <__ccfg+0x2b0e84>
    25f0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    25f4:	1201110c 	andne	r1, r1, #12, 2
    25f8:	480a4001 	stmdami	sl, {r0, lr}
    25fc:	0013010a 	andseq	r0, r3, sl, lsl #2
    2600:	00052000 	andeq	r2, r5, r0
    2604:	0b3a0803 	bleq	e84618 <__ccfg+0xe64670>
    2608:	0b390b3b 	bleq	e452fc <__ccfg+0xe25354>
    260c:	0a021349 	beq	87338 <__ccfg+0x67390>
    2610:	0a210000 	beq	842618 <__ccfg+0x822670>
    2614:	3a080300 	bcc	20321c <__ccfg+0x1e3274>
    2618:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    261c:	0001110b 	andeq	r1, r1, fp, lsl #2
    2620:	010b2200 	mrseq	r2, R11_fiq
    2624:	13010655 	movwne	r0, #5717	; 0x1655
    2628:	34230000 	strtcc	r0, [r3], #-0
    262c:	3a080300 	bcc	203234 <__ccfg+0x1e328c>
    2630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2634:	0013490b 	andseq	r4, r3, fp, lsl #18
    2638:	010b2400 	tsteq	fp, r0, lsl #8
    263c:	01120111 	tsteq	r2, r1, lsl r1
    2640:	00001301 	andeq	r1, r0, r1, lsl #6
    2644:	11010b25 	tstne	r1, r5, lsr #22
    2648:	00011201 	andeq	r1, r1, r1, lsl #4
    264c:	11010000 	mrsne	r0, (UNDEF: 1)
    2650:	130e2501 	movwne	r2, #58625	; 0xe501
    2654:	1b0e030b 	blne	383288 <__ccfg+0x3632e0>
    2658:	1106550e 	tstne	r6, lr, lsl #10
    265c:	00061001 	andeq	r1, r6, r1
    2660:	00240200 	eoreq	r0, r4, r0, lsl #4
    2664:	0b3e0b0b 	bleq	f85298 <__ccfg+0xf652f0>
    2668:	00000e03 	andeq	r0, r0, r3, lsl #28
    266c:	03001603 	movweq	r1, #1539	; 0x603
    2670:	3b0b3a0e 	blcc	2d0eb0 <__ccfg+0x2b0f08>
    2674:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2678:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    267c:	0b0b0024 	bleq	2c2714 <__ccfg+0x2a276c>
    2680:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2684:	13050000 	movwne	r0, #20480	; 0x5000
    2688:	0b0e0301 	bleq	383294 <__ccfg+0x3632ec>
    268c:	3b0b3a0b 	blcc	2d0ec0 <__ccfg+0x2b0f18>
    2690:	0013010b 	andseq	r0, r3, fp, lsl #2
    2694:	000d0600 	andeq	r0, sp, r0, lsl #12
    2698:	13490e03 	movtne	r0, #40451	; 0x9e03
    269c:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    26a0:	0f070000 	svceq	0x00070000
    26a4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    26a8:	00260800 	eoreq	r0, r6, r0, lsl #16
    26ac:	00001349 	andeq	r1, r0, r9, asr #6
    26b0:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    26b4:	0a000013 	beq	2708 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x104>
    26b8:	0b0b000f 	bleq	2c26fc <__ccfg+0x2a2754>
    26bc:	00001349 	andeq	r1, r0, r9, asr #6
    26c0:	0b01130b 	bleq	472f4 <__ccfg+0x2734c>
    26c4:	3b0b3a0b 	blcc	2d0ef8 <__ccfg+0x2b0f50>
    26c8:	010b390b 	tsteq	fp, fp, lsl #18
    26cc:	0c000013 	stceq	0, cr0, [r0], {19}
    26d0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    26d4:	0b3b0b3a 	bleq	ec53c4 <__ccfg+0xea541c>
    26d8:	13490b39 	movtne	r0, #39737	; 0x9b39
    26dc:	0b0d0b0b 	bleq	345310 <__ccfg+0x325368>
    26e0:	0b380b0c 	bleq	e05318 <__ccfg+0xde5370>
    26e4:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    26e8:	3a0e0300 	bcc	3832f0 <__ccfg+0x363348>
    26ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26f0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    26f4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    26f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    26fc:	0b3b0b3a 	bleq	ec53ec <__ccfg+0xea5444>
    2700:	13490b39 	movtne	r0, #39737	; 0x9b39
    2704:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2708:	010f0000 	mrseq	r0, CPSR
    270c:	01134901 	tsteq	r3, r1, lsl #18
    2710:	10000013 	andne	r0, r0, r3, lsl r0
    2714:	00000021 	andeq	r0, r0, r1, lsr #32
    2718:	03001611 	movweq	r1, #1553	; 0x611
    271c:	3b0b3a0e 	blcc	2d0f5c <__ccfg+0x2b0fb4>
    2720:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2724:	12000013 	andne	r0, r0, #19
    2728:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    272c:	00001301 	andeq	r1, r0, r1, lsl #6
    2730:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2734:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2738:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    273c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2740:	13490b39 	movtne	r0, #39737	; 0x9b39
    2744:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2748:	13150000 	tstne	r5, #0
    274c:	3a0b0b01 	bcc	2c5358 <__ccfg+0x2a53b0>
    2750:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2754:	0013010b 	andseq	r0, r3, fp, lsl #2
    2758:	000d1600 	andeq	r1, sp, r0, lsl #12
    275c:	0b3a0e03 	bleq	e85f70 <__ccfg+0xe65fc8>
    2760:	0b39053b 	bleq	e43c54 <__ccfg+0xe23cac>
    2764:	0b381349 	bleq	e07490 <__ccfg+0xde74e8>
    2768:	13170000 	tstne	r7, #0
    276c:	0b0e0301 	bleq	383378 <__ccfg+0x3633d0>
    2770:	3b0b3a0b 	blcc	2d0fa4 <__ccfg+0x2b0ffc>
    2774:	010b3905 	tsteq	fp, r5, lsl #18
    2778:	18000013 	stmdane	r0, {r0, r1, r4}
    277c:	13490021 	movtne	r0, #36897	; 0x9021
    2780:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2784:	3f012e19 	svccc	0x00012e19
    2788:	3a0e030c 	bcc	3833c0 <__ccfg+0x363418>
    278c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2790:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2794:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2798:	010a4001 	tsteq	sl, r1
    279c:	1a000013 	bne	27f0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>
    27a0:	08030005 	stmdaeq	r3, {r0, r2}
    27a4:	0b3b0b3a 	bleq	ec5494 <__ccfg+0xea54ec>
    27a8:	13490b39 	movtne	r0, #39737	; 0x9b39
    27ac:	00000602 	andeq	r0, r0, r2, lsl #12
    27b0:	0300341b 	movweq	r3, #1051	; 0x41b
    27b4:	3b0b3a08 	blcc	2d0fdc <__ccfg+0x2b1034>
    27b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    27bc:	00060213 	andeq	r0, r6, r3, lsl r2
    27c0:	000a1c00 	andeq	r1, sl, r0, lsl #24
    27c4:	0b3a0e03 	bleq	e85fd8 <__ccfg+0xe66030>
    27c8:	0b390b3b 	bleq	e454bc <__ccfg+0xe25514>
    27cc:	0b1d0000 	bleq	7427d4 <__ccfg+0x72282c>
    27d0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    27d4:	00130101 	andseq	r0, r3, r1, lsl #2
    27d8:	00341e00 	eorseq	r1, r4, r0, lsl #28
    27dc:	0b3a0803 	bleq	e847f0 <__ccfg+0xe64848>
    27e0:	0b390b3b 	bleq	e454d4 <__ccfg+0xe2552c>
    27e4:	0a021349 	beq	87510 <__ccfg+0x67568>
    27e8:	0b1f0000 	bleq	7c27f0 <__ccfg+0x7a2848>
    27ec:	01065501 	tsteq	r6, r1, lsl #10
    27f0:	20000013 	andcs	r0, r0, r3, lsl r0
    27f4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    27f8:	0b3b0b3a 	bleq	ec54e8 <__ccfg+0xea5540>
    27fc:	13490b39 	movtne	r0, #39737	; 0x9b39
    2800:	0b210000 	bleq	842808 <__ccfg+0x822860>
    2804:	00065501 	andeq	r5, r6, r1, lsl #10
    2808:	11010000 	mrsne	r0, (UNDEF: 1)
    280c:	130e2501 	movwne	r2, #58625	; 0xe501
    2810:	1b0e030b 	blne	383444 <__ccfg+0x36349c>
    2814:	1117550e 	tstne	r7, lr, lsl #10
    2818:	00171001 	andseq	r1, r7, r1
    281c:	00160200 	andseq	r0, r6, r0, lsl #4
    2820:	0b3a0e03 	bleq	e86034 <__ccfg+0xe6608c>
    2824:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2828:	24030000 	strcs	r0, [r3], #-0
    282c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2830:	000e030b 	andeq	r0, lr, fp, lsl #6
    2834:	00240400 	eoreq	r0, r4, r0, lsl #8
    2838:	0b3e0b0b 	bleq	f8546c <__ccfg+0xf654c4>
    283c:	00000803 	andeq	r0, r0, r3, lsl #16
    2840:	3f012e05 	svccc	0x00012e05
    2844:	3a0e0319 	bcc	3834b0 <__ccfg+0x363508>
    2848:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    284c:	11134919 	tstne	r3, r9, lsl r9
    2850:	40061201 	andmi	r1, r6, r1, lsl #4
    2854:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2858:	34060000 	strcc	r0, [r6], #-0
    285c:	3a0e0300 	bcc	383464 <__ccfg+0x3634bc>
    2860:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2864:	00170213 	andseq	r0, r7, r3, lsl r2
    2868:	00340700 	eorseq	r0, r4, r0, lsl #14
    286c:	0b3a0e03 	bleq	e86080 <__ccfg+0xe660d8>
    2870:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2874:	00001802 	andeq	r1, r0, r2, lsl #16
    2878:	01110100 	tsteq	r1, r0, lsl #2
    287c:	0b130e25 	bleq	4c6118 <__ccfg+0x4a6170>
    2880:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2884:	01111755 	tsteq	r1, r5, asr r7
    2888:	00001710 	andeq	r1, r0, r0, lsl r7
    288c:	0b002402 	bleq	b89c <__exidx_end+0x8c64>
    2890:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2894:	0300000e 	movweq	r0, #14
    2898:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    289c:	0b3b0b3a 	bleq	ec558c <__ccfg+0xea55e4>
    28a0:	00001349 	andeq	r1, r0, r9, asr #6
    28a4:	0b002404 	bleq	b8bc <__exidx_end+0x8c84>
    28a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    28ac:	05000008 	streq	r0, [r0, #-8]
    28b0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    28b4:	0b3a0e03 	bleq	e860c8 <__ccfg+0xe66120>
    28b8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    28bc:	01111349 	tsteq	r1, r9, asr #6
    28c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    28c4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    28c8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    28cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28d0:	0b3b0b3a 	bleq	ec55c0 <__ccfg+0xea5618>
    28d4:	17021349 	strne	r1, [r2, -r9, asr #6]
    28d8:	34070000 	strcc	r0, [r7], #-0
    28dc:	3a0e0300 	bcc	3834e4 <__ccfg+0x36353c>
    28e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    28e4:	00180213 	andseq	r0, r8, r3, lsl r2
    28e8:	01170800 	tsteq	r7, r0, lsl #16
    28ec:	0b3a0b0b 	bleq	e85520 <__ccfg+0xe65578>
    28f0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    28f4:	0d090000 	stceq	0, cr0, [r9, #-0]
    28f8:	3a0e0300 	bcc	383500 <__ccfg+0x363558>
    28fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2900:	0a000013 	beq	2954 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    2904:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2908:	0b3b0b3a 	bleq	ec55f8 <__ccfg+0xea5650>
    290c:	00001349 	andeq	r1, r0, r9, asr #6
    2910:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    2914:	00130113 	andseq	r0, r3, r3, lsl r1
    2918:	00210c00 	eoreq	r0, r1, r0, lsl #24
    291c:	0b2f1349 	bleq	bc7648 <__ccfg+0xba76a0>
    2920:	01000000 	mrseq	r0, (UNDEF: 0)
    2924:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2928:	0e030b13 	vmoveq.32	d3[0], r0
    292c:	17550e1b 	smmlane	r5, fp, lr, r0
    2930:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2934:	24020000 	strcs	r0, [r2], #-0
    2938:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    293c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2940:	00160300 	andseq	r0, r6, r0, lsl #6
    2944:	0b3a0e03 	bleq	e86158 <__ccfg+0xe661b0>
    2948:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    294c:	24040000 	strcs	r0, [r4], #-0
    2950:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2954:	0008030b 	andeq	r0, r8, fp, lsl #6
    2958:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    295c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2960:	0b3b0b3a 	bleq	ec5650 <__ccfg+0xea56a8>
    2964:	13491927 	movtne	r1, #39207	; 0x9927
    2968:	06120111 			; <UNDEFINED> instruction: 0x06120111
    296c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2970:	00130119 	andseq	r0, r3, r9, lsl r1
    2974:	00340600 	eorseq	r0, r4, r0, lsl #12
    2978:	0b3a0e03 	bleq	e8618c <__ccfg+0xe661e4>
    297c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2980:	34070000 	strcc	r0, [r7], #-0
    2984:	3a0e0300 	bcc	38358c <__ccfg+0x3635e4>
    2988:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    298c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2990:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2994:	0b3a0e03 	bleq	e861a8 <__ccfg+0xe66200>
    2998:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    299c:	01111349 	tsteq	r1, r9, asr #6
    29a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    29a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    29a8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    29ac:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    29b0:	0b3a0e03 	bleq	e861c4 <__ccfg+0xe6621c>
    29b4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    29b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    29bc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    29c0:	0a000019 	beq	2a2c <NOROM_DDI32RegWrite+0x98>
    29c4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    29c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    29cc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    29d0:	01000000 	mrseq	r0, (UNDEF: 0)
    29d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    29d8:	0e030b13 	vmoveq.32	d3[0], r0
    29dc:	17550e1b 	smmlane	r5, fp, lr, r0
    29e0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    29e4:	24020000 	strcs	r0, [r2], #-0
    29e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    29ec:	000e030b 	andeq	r0, lr, fp, lsl #6
    29f0:	00160300 	andseq	r0, r6, r0, lsl #6
    29f4:	0b3a0e03 	bleq	e86208 <__ccfg+0xe66260>
    29f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    29fc:	24040000 	strcs	r0, [r4], #-0
    2a00:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2a04:	0008030b 	andeq	r0, r8, fp, lsl #6
    2a08:	000f0500 	andeq	r0, pc, r0, lsl #10
    2a0c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2a10:	15060000 	strne	r0, [r6, #-0]
    2a14:	00192700 	andseq	r2, r9, r0, lsl #14
    2a18:	01150700 	tsteq	r5, r0, lsl #14
    2a1c:	13011927 	movwne	r1, #6439	; 0x1927
    2a20:	05080000 	streq	r0, [r8, #-0]
    2a24:	00134900 	andseq	r4, r3, r0, lsl #18
    2a28:	01150900 	tsteq	r5, r0, lsl #18
    2a2c:	13491927 	movtne	r1, #39207	; 0x9927
    2a30:	00001301 	andeq	r1, r0, r1, lsl #6
    2a34:	2700150a 	strcs	r1, [r0, -sl, lsl #10]
    2a38:	00134919 	andseq	r4, r3, r9, lsl r9
    2a3c:	01130b00 	tsteq	r3, r0, lsl #22
    2a40:	0b3a0b0b 	bleq	e85674 <__ccfg+0xe656cc>
    2a44:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2a48:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2a4c:	3a0e0300 	bcc	383654 <__ccfg+0x3636ac>
    2a50:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a54:	000b3813 	andeq	r3, fp, r3, lsl r8
    2a58:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    2a5c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a60:	0b3b0b3a 	bleq	ec5750 <__ccfg+0xea57a8>
    2a64:	0b201927 	bleq	808f08 <__ccfg+0x7e8f60>
    2a68:	00001301 	andeq	r1, r0, r1, lsl #6
    2a6c:	0300050e 	movweq	r0, #1294	; 0x50e
    2a70:	3b0b3a0e 	blcc	2d12b0 <__ccfg+0x2b1308>
    2a74:	0013490b 	andseq	r4, r3, fp, lsl #18
    2a78:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    2a7c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a84:	13491927 	movtne	r1, #39207	; 0x9927
    2a88:	13010b20 	movwne	r0, #6944	; 0x1b20
    2a8c:	34100000 	ldrcc	r0, [r0], #-0
    2a90:	3a0e0300 	bcc	383698 <__ccfg+0x3636f0>
    2a94:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a98:	11000013 	tstne	r0, r3, lsl r0
    2a9c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    2aa0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2aa4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2aa8:	00130119 	andseq	r0, r3, r9, lsl r1
    2aac:	00051200 	andeq	r1, r5, r0, lsl #4
    2ab0:	17021331 	smladxne	r2, r1, r3, r1
    2ab4:	0b130000 	bleq	4c2abc <__ccfg+0x4a2b14>
    2ab8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2abc:	00130106 	andseq	r0, r3, r6, lsl #2
    2ac0:	82891400 	addhi	r1, r9, #0, 8
    2ac4:	01110101 	tsteq	r1, r1, lsl #2
    2ac8:	00184293 	mulseq	r8, r3, r2
    2acc:	828a1500 	addhi	r1, sl, #0, 10
    2ad0:	18020001 	stmdane	r2, {r0}
    2ad4:	00184291 	mulseq	r8, r1, r2
    2ad8:	82891600 	addhi	r1, r9, #0, 12
    2adc:	01110101 	tsteq	r1, r1, lsl #2
    2ae0:	01184293 			; <UNDEFINED> instruction: 0x01184293
    2ae4:	17000013 	smladne	r0, r3, r0, r0
    2ae8:	13310034 	teqne	r1, #52	; 0x34
    2aec:	00001802 	andeq	r1, r0, r2, lsl #16
    2af0:	55010b18 	strpl	r0, [r1, #-2840]	; 0xfffff4e8
    2af4:	00130117 	andseq	r0, r3, r7, lsl r1
    2af8:	00051900 	andeq	r1, r5, r0, lsl #18
    2afc:	0b1c1331 	bleq	7077c8 <__ccfg+0x6e7820>
    2b00:	0b1a0000 	bleq	682b08 <__ccfg+0x662b60>
    2b04:	00175501 	andseq	r5, r7, r1, lsl #10
    2b08:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2b0c:	00001331 	andeq	r1, r0, r1, lsr r3
    2b10:	3f012e1c 	svccc	0x00012e1c
    2b14:	3a0e0319 	bcc	383780 <__ccfg+0x3637d8>
    2b18:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2b1c:	11134919 	tstne	r3, r9, lsl r9
    2b20:	40061201 	andmi	r1, r6, r1, lsl #4
    2b24:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2b28:	00001301 	andeq	r1, r0, r1, lsl #6
    2b2c:	0300051d 	movweq	r0, #1309	; 0x51d
    2b30:	3b0b3a0e 	blcc	2d1370 <__ccfg+0x2b13c8>
    2b34:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2b38:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    2b3c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b40:	0b3b0b3a 	bleq	ec5830 <__ccfg+0xea5888>
    2b44:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b48:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    2b4c:	11000182 	smlabbne	r0, r2, r1, r0
    2b50:	00133101 	andseq	r3, r3, r1, lsl #2
    2b54:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    2b58:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2b5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2b60:	01111927 	tsteq	r1, r7, lsr #18
    2b64:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2b68:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2b6c:	21000013 	tstcs	r0, r3, lsl r0
    2b70:	01018289 	smlabbeq	r1, r9, r2, r8
    2b74:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2b78:	00001301 	andeq	r1, r0, r1, lsl #6
    2b7c:	03002e22 	movweq	r2, #3618	; 0xe22
    2b80:	3b0b3a0e 	blcc	2d13c0 <__ccfg+0x2b1418>
    2b84:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2b88:	000b2013 	andeq	r2, fp, r3, lsl r0
    2b8c:	002e2300 	eoreq	r2, lr, r0, lsl #6
    2b90:	0b3a0e03 	bleq	e863a4 <__ccfg+0xe663fc>
    2b94:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2b98:	00000b20 	andeq	r0, r0, r0, lsr #22
    2b9c:	03003424 	movweq	r3, #1060	; 0x424
    2ba0:	3b0b3a0e 	blcc	2d13e0 <__ccfg+0x2b1438>
    2ba4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2ba8:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    2bac:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2bb0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2bb4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2bb8:	00001301 	andeq	r1, r0, r1, lsl #6
    2bbc:	03000526 	movweq	r0, #1318	; 0x526
    2bc0:	3b0b3a0e 	blcc	2d1400 <__ccfg+0x2b1458>
    2bc4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2bc8:	27000017 	smladcs	r0, r7, r0, r0
    2bcc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2bd0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2bd4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2bd8:	34280000 	strtcc	r0, [r8], #-0
    2bdc:	3a080300 	bcc	2037e4 <__ccfg+0x1e383c>
    2be0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2be4:	00170213 	andseq	r0, r7, r3, lsl r2
    2be8:	00342900 	eorseq	r2, r4, r0, lsl #18
    2bec:	0b3a0e03 	bleq	e86400 <__ccfg+0xe66458>
    2bf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bf4:	00001802 	andeq	r1, r0, r2, lsl #16
    2bf8:	3f002e2a 	svccc	0x00002e2a
    2bfc:	3a0e0319 	bcc	383868 <__ccfg+0x3638c0>
    2c00:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2c04:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2c08:	2b000019 	blcs	2c74 <__exidx_end+0x3c>
    2c0c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2c10:	0b3a0e03 	bleq	e86424 <__ccfg+0xe6647c>
    2c14:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2c18:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2c1c:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    2c20:	03193f01 	tsteq	r9, #1, 30
    2c24:	3b0b3a0e 	blcc	2d1464 <__ccfg+0x2b14bc>
    2c28:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2c2c:	00000019 	andeq	r0, r0, r9, lsl r0
    2c30:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2c34:	030b130e 	movweq	r1, #45838	; 0xb30e
    2c38:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2c3c:	10011117 	andne	r1, r1, r7, lsl r1
    2c40:	02000017 	andeq	r0, r0, #23
    2c44:	0b0b0024 	bleq	2c2cdc <__ccfg+0x2a2d34>
    2c48:	0e030b3e 	vmoveq.16	d3[0], r0
    2c4c:	16030000 	strne	r0, [r3], -r0
    2c50:	3a0e0300 	bcc	383858 <__ccfg+0x3638b0>
    2c54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c58:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2c5c:	0b0b0024 	bleq	2c2cf4 <__ccfg+0x2a2d4c>
    2c60:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2c64:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2c68:	3a0e0300 	bcc	383870 <__ccfg+0x3638c8>
    2c6c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2c70:	000b2019 	andeq	r2, fp, r9, lsl r0
    2c74:	002e0600 	eoreq	r0, lr, r0, lsl #12
    2c78:	0b3a0e03 	bleq	e8648c <__ccfg+0xe664e4>
    2c7c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2c80:	00000b20 	andeq	r0, r0, r0, lsr #22
    2c84:	03012e07 	movweq	r2, #7687	; 0x1e07
    2c88:	3b0b3a0e 	blcc	2d14c8 <__ccfg+0x2b1520>
    2c8c:	11192705 	tstne	r9, r5, lsl #14
    2c90:	40061201 	andmi	r1, r6, r1, lsl #4
    2c94:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2c98:	00001301 	andeq	r1, r0, r1, lsl #6
    2c9c:	03000508 	movweq	r0, #1288	; 0x508
    2ca0:	3b0b3a0e 	blcc	2d14e0 <__ccfg+0x2b1538>
    2ca4:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2ca8:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    2cac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2cb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2cb4:	17021349 	strne	r1, [r2, -r9, asr #6]
    2cb8:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    2cbc:	11133100 	tstne	r3, r0, lsl #2
    2cc0:	58061201 	stmdapl	r6, {r0, r9, ip}
    2cc4:	0005590b 	andeq	r5, r5, fp, lsl #18
    2cc8:	010b0b00 	tsteq	fp, r0, lsl #22
    2ccc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2cd0:	00001301 	andeq	r1, r0, r1, lsl #6
    2cd4:	0182890c 	orreq	r8, r2, ip, lsl #18
    2cd8:	31011101 	tstcc	r1, r1, lsl #2
    2cdc:	00130113 	andseq	r0, r3, r3, lsl r1
    2ce0:	828a0d00 	addhi	r0, sl, #0, 26
    2ce4:	18020001 	stmdane	r2, {r0}
    2ce8:	00184291 	mulseq	r8, r1, r2
    2cec:	82890e00 	addhi	r0, r9, #0, 28
    2cf0:	01110101 	tsteq	r1, r1, lsl #2
    2cf4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2cf8:	03193f01 	tsteq	r9, #1, 30
    2cfc:	3b0b3a0e 	blcc	2d153c <__ccfg+0x2b1594>
    2d00:	1119270b 	tstne	r9, fp, lsl #14
    2d04:	40061201 	andmi	r1, r6, r1, lsl #4
    2d08:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2d0c:	00001301 	andeq	r1, r0, r1, lsl #6
    2d10:	03003410 	movweq	r3, #1040	; 0x410
    2d14:	3b0b3a0e 	blcc	2d1554 <__ccfg+0x2b15ac>
    2d18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2d1c:	11000017 	tstne	r0, r7, lsl r0
    2d20:	00018289 	andeq	r8, r1, r9, lsl #5
    2d24:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2d28:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    2d2c:	11010182 	smlabbne	r1, r2, r1, r0
    2d30:	00133101 	andseq	r3, r3, r1, lsl #2
    2d34:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    2d38:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2d3c:	0b3b0b3a 	bleq	ec5a2c <__ccfg+0xea5a84>
    2d40:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2d44:	00001301 	andeq	r1, r0, r1, lsl #6
    2d48:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    2d4c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2d50:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2d54:	0b3a0e03 	bleq	e86568 <__ccfg+0xe665c0>
    2d58:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2d5c:	0000193c 	andeq	r1, r0, ip, lsr r9
    2d60:	3f002e16 	svccc	0x00002e16
    2d64:	3a0e0319 	bcc	3839d0 <__ccfg+0x363a28>
    2d68:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2d6c:	00193c19 	andseq	r3, r9, r9, lsl ip
    2d70:	11010000 	mrsne	r0, (UNDEF: 1)
    2d74:	130e2501 	movwne	r2, #58625	; 0xe501
    2d78:	1b0e030b 	blne	3839ac <__ccfg+0x363a04>
    2d7c:	1117550e 	tstne	r7, lr, lsl #10
    2d80:	00171001 	andseq	r1, r7, r1
    2d84:	00240200 	eoreq	r0, r4, r0, lsl #4
    2d88:	0b3e0b0b 	bleq	f859bc <__ccfg+0xf65a14>
    2d8c:	00000e03 	andeq	r0, r0, r3, lsl #28
    2d90:	03001603 	movweq	r1, #1539	; 0x603
    2d94:	3b0b3a0e 	blcc	2d15d4 <__ccfg+0x2b162c>
    2d98:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d9c:	00240400 	eoreq	r0, r4, r0, lsl #8
    2da0:	0b3e0b0b 	bleq	f859d4 <__ccfg+0xf65a2c>
    2da4:	00000803 	andeq	r0, r0, r3, lsl #16
    2da8:	03012e05 	movweq	r2, #7685	; 0x1e05
    2dac:	3b0b3a0e 	blcc	2d15ec <__ccfg+0x2b1644>
    2db0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2db4:	010b2013 	tsteq	fp, r3, lsl r0
    2db8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2dbc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2dc0:	0b3b0b3a 	bleq	ec5ab0 <__ccfg+0xea5b08>
    2dc4:	00001349 	andeq	r1, r0, r9, asr #6
    2dc8:	03003407 	movweq	r3, #1031	; 0x407
    2dcc:	3b0b3a0e 	blcc	2d160c <__ccfg+0x2b1664>
    2dd0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2dd4:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2dd8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2ddc:	0b3b0b3a 	bleq	ec5acc <__ccfg+0xea5b24>
    2de0:	13491927 	movtne	r1, #39207	; 0x9927
    2de4:	13010b20 	movwne	r0, #6944	; 0x1b20
    2de8:	05090000 	streq	r0, [r9, #-0]
    2dec:	3a0e0300 	bcc	3839f4 <__ccfg+0x363a4c>
    2df0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2df4:	0a000013 	beq	2e48 <__exidx_end+0x210>
    2df8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2dfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2e00:	00001349 	andeq	r1, r0, r9, asr #6
    2e04:	03002e0b 	movweq	r2, #3595	; 0xe0b
    2e08:	3b0b3a0e 	blcc	2d1648 <__ccfg+0x2b16a0>
    2e0c:	2019270b 	andscs	r2, r9, fp, lsl #14
    2e10:	0c00000b 	stceq	0, cr0, [r0], {11}
    2e14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2e18:	0b3a0e03 	bleq	e8662c <__ccfg+0xe66684>
    2e1c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e20:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e24:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2e28:	00130119 	andseq	r0, r3, r9, lsl r1
    2e2c:	00050d00 	andeq	r0, r5, r0, lsl #26
    2e30:	0b3a0e03 	bleq	e86644 <__ccfg+0xe6669c>
    2e34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e38:	00001702 	andeq	r1, r0, r2, lsl #14
    2e3c:	0300340e 	movweq	r3, #1038	; 0x40e
    2e40:	3b0b3a0e 	blcc	2d1680 <__ccfg+0x2b16d8>
    2e44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e48:	0f000018 	svceq	0x00000018
    2e4c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2e50:	0b3b0b3a 	bleq	ec5b40 <__ccfg+0xea5b98>
    2e54:	17021349 	strne	r1, [r2, -r9, asr #6]
    2e58:	1d100000 	ldcne	0, cr0, [r0, #-0]
    2e5c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2e60:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2e64:	010b590b 	tsteq	fp, fp, lsl #18
    2e68:	11000013 	tstne	r0, r3, lsl r0
    2e6c:	13310005 	teqne	r1, #5
    2e70:	0b120000 	bleq	482e78 <__ccfg+0x462ed0>
    2e74:	00175501 	andseq	r5, r7, r1, lsl #10
    2e78:	00341300 	eorseq	r1, r4, r0, lsl #6
    2e7c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    2e80:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2e84:	11133101 	tstne	r3, r1, lsl #2
    2e88:	58061201 	stmdapl	r6, {r0, r9, ip}
    2e8c:	000b590b 	andeq	r5, fp, fp, lsl #18
    2e90:	010b1500 	tsteq	fp, r0, lsl #10
    2e94:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e98:	34160000 	ldrcc	r0, [r6], #-0
    2e9c:	02133100 	andseq	r3, r3, #0, 2
    2ea0:	17000017 	smladne	r0, r7, r0, r0
    2ea4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ea8:	0b3a0e03 	bleq	e866bc <__ccfg+0xe66714>
    2eac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2eb0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2eb4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2eb8:	00130119 	andseq	r0, r3, r9, lsl r1
    2ebc:	011d1800 	tsteq	sp, r0, lsl #16
    2ec0:	01111331 	tsteq	r1, r1, lsr r3
    2ec4:	0b580612 	bleq	1604714 <__ccfg+0x15e476c>
    2ec8:	13010b59 	movwne	r0, #7001	; 0x1b59
    2ecc:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
    2ed0:	11010182 	smlabbne	r1, r2, r1, r0
    2ed4:	00133101 	andseq	r3, r3, r1, lsl #2
    2ed8:	828a1a00 	addhi	r1, sl, #0, 20
    2edc:	18020001 	stmdane	r2, {r0}
    2ee0:	00184291 	mulseq	r8, r1, r2
    2ee4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    2ee8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2eec:	0b3b0b3a 	bleq	ec5bdc <__ccfg+0xea5c34>
    2ef0:	13491927 	movtne	r1, #39207	; 0x9927
    2ef4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2ef8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2efc:	00130119 	andseq	r0, r3, r9, lsl r1
    2f00:	00051c00 	andeq	r1, r5, r0, lsl #24
    2f04:	0b3a0e03 	bleq	e86718 <__ccfg+0xe66770>
    2f08:	1349053b 	movtne	r0, #38203	; 0x953b
    2f0c:	00001702 	andeq	r1, r0, r2, lsl #14
    2f10:	0300341d 	movweq	r3, #1053	; 0x41d
    2f14:	3b0b3a0e 	blcc	2d1754 <__ccfg+0x2b17ac>
    2f18:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2f1c:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    2f20:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    2f24:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2f28:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2f2c:	00130119 	andseq	r0, r3, r9, lsl r1
    2f30:	00051f00 	andeq	r1, r5, r0, lsl #30
    2f34:	17021331 	smladxne	r2, r1, r3, r1
    2f38:	34200000 	strtcc	r0, [r0], #-0
    2f3c:	00133100 	andseq	r3, r3, r0, lsl #2
    2f40:	011d2100 	tsteq	sp, r0, lsl #2
    2f44:	01521331 	cmpeq	r2, r1, lsr r3
    2f48:	0b581755 	bleq	1608ca4 <__ccfg+0x15e8cfc>
    2f4c:	13010559 	movwne	r0, #5465	; 0x1559
    2f50:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    2f54:	11010182 	smlabbne	r1, r2, r1, r0
    2f58:	01133101 	tsteq	r3, r1, lsl #2
    2f5c:	23000013 	movwcs	r0, #19
    2f60:	00018289 	andeq	r8, r1, r9, lsl #5
    2f64:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2f68:	89240000 	stmdbhi	r4!, {}	; <UNPREDICTABLE>
    2f6c:	11010182 	smlabbne	r1, r2, r1, r0
    2f70:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    2f74:	00001301 	andeq	r1, r0, r1, lsl #6
    2f78:	31001d25 	tstcc	r0, r5, lsr #26
    2f7c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2f80:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2f84:	26000005 	strcs	r0, [r0], -r5
    2f88:	01018289 	smlabbeq	r1, r9, r2, r8
    2f8c:	13010111 	movwne	r0, #4369	; 0x1111
    2f90:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    2f94:	03193f01 	tsteq	r9, #1, 30
    2f98:	3b0b3a0e 	blcc	2d17d8 <__ccfg+0x2b1830>
    2f9c:	3c192705 	ldccc	7, cr2, [r9], {5}
    2fa0:	00130119 	andseq	r0, r3, r9, lsl r1
    2fa4:	00052800 	andeq	r2, r5, r0, lsl #16
    2fa8:	00001349 	andeq	r1, r0, r9, asr #6
    2fac:	3f012e29 	svccc	0x00012e29
    2fb0:	3a0e0319 	bcc	383c1c <__ccfg+0x363c74>
    2fb4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2fb8:	01193c19 	tsteq	r9, r9, lsl ip
    2fbc:	2a000013 	bcs	3010 <__exidx_end+0x3d8>
    2fc0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2fc4:	0b3a0e03 	bleq	e867d8 <__ccfg+0xe66830>
    2fc8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2fcc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fd4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2fd8:	0e030b13 	vmoveq.32	d3[0], r0
    2fdc:	17550e1b 	smmlane	r5, fp, lr, r0
    2fe0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2fe4:	16020000 	strne	r0, [r2], -r0
    2fe8:	3a0e0300 	bcc	383bf0 <__ccfg+0x363c48>
    2fec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ff0:	03000013 	movweq	r0, #19
    2ff4:	0b0b0024 	bleq	2c308c <__ccfg+0x2a30e4>
    2ff8:	0e030b3e 	vmoveq.16	d3[0], r0
    2ffc:	24040000 	strcs	r0, [r4], #-0
    3000:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3004:	0008030b 	andeq	r0, r8, fp, lsl #6
    3008:	000f0500 	andeq	r0, pc, r0, lsl #10
    300c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3010:	15060000 	strne	r0, [r6, #-0]
    3014:	00192700 	andseq	r2, r9, r0, lsl #14
    3018:	01150700 	tsteq	r5, r0, lsl #14
    301c:	13011927 	movwne	r1, #6439	; 0x1927
    3020:	05080000 	streq	r0, [r8, #-0]
    3024:	00134900 	andseq	r4, r3, r0, lsl #18
    3028:	01150900 	tsteq	r5, r0, lsl #18
    302c:	13491927 	movtne	r1, #39207	; 0x9927
    3030:	00001301 	andeq	r1, r0, r1, lsl #6
    3034:	2700150a 	strcs	r1, [r0, -sl, lsl #10]
    3038:	00134919 	andseq	r4, r3, r9, lsl r9
    303c:	01130b00 	tsteq	r3, r0, lsl #22
    3040:	0b3a0b0b 	bleq	e85c74 <__ccfg+0xe65ccc>
    3044:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    3048:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    304c:	3a0e0300 	bcc	383c54 <__ccfg+0x363cac>
    3050:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3054:	000b3813 	andeq	r3, fp, r3, lsl r8
    3058:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    305c:	0b3a0e03 	bleq	e86870 <__ccfg+0xe668c8>
    3060:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3064:	13010b20 	movwne	r0, #6944	; 0x1b20
    3068:	050e0000 	streq	r0, [lr, #-0]
    306c:	3a0e0300 	bcc	383c74 <__ccfg+0x363ccc>
    3070:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3074:	0f000013 	svceq	0x00000013
    3078:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    307c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3080:	13491927 	movtne	r1, #39207	; 0x9927
    3084:	00000b20 	andeq	r0, r0, r0, lsr #22
    3088:	03002e10 	movweq	r2, #3600	; 0xe10
    308c:	3b0b3a0e 	blcc	2d18cc <__ccfg+0x2b1924>
    3090:	20192705 	andscs	r2, r9, r5, lsl #14
    3094:	1100000b 	tstne	r0, fp
    3098:	0e03012e 	adfeqsp	f0, f3, #0.5
    309c:	0b3b0b3a 	bleq	ec5d8c <__ccfg+0xea5de4>
    30a0:	13491927 	movtne	r1, #39207	; 0x9927
    30a4:	13010b20 	movwne	r0, #6944	; 0x1b20
    30a8:	05120000 	ldreq	r0, [r2, #-0]
    30ac:	3a0e0300 	bcc	383cb4 <__ccfg+0x363d0c>
    30b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30b4:	13000013 	movwne	r0, #19
    30b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    30bc:	0b3b0b3a 	bleq	ec5dac <__ccfg+0xea5e04>
    30c0:	00001349 	andeq	r1, r0, r9, asr #6
    30c4:	3f012e14 	svccc	0x00012e14
    30c8:	3a0e0319 	bcc	383d34 <__ccfg+0x363d8c>
    30cc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    30d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    30d4:	97184006 	ldrls	r4, [r8, -r6]
    30d8:	13011942 	movwne	r1, #6466	; 0x1942
    30dc:	34150000 	ldrcc	r0, [r5], #-0
    30e0:	3a0e0300 	bcc	383ce8 <__ccfg+0x363d40>
    30e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30e8:	00170213 	andseq	r0, r7, r3, lsl r2
    30ec:	00341600 	eorseq	r1, r4, r0, lsl #12
    30f0:	0b3a0e03 	bleq	e86904 <__ccfg+0xe6695c>
    30f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30f8:	0000051c 	andeq	r0, r0, ip, lsl r5
    30fc:	31011d17 	tstcc	r1, r7, lsl sp
    3100:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    3104:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    3108:	0013010b 	andseq	r0, r3, fp, lsl #2
    310c:	00051800 	andeq	r1, r5, r0, lsl #16
    3110:	0b1c1331 	bleq	707ddc <__ccfg+0x6e7e34>
    3114:	1d190000 	ldcne	0, cr0, [r9, #-0]
    3118:	11133100 	tstne	r3, r0, lsl #2
    311c:	58061201 	stmdapl	r6, {r0, r9, ip}
    3120:	000b590b 	andeq	r5, fp, fp, lsl #18
    3124:	011d1a00 	tsteq	sp, r0, lsl #20
    3128:	01111331 	tsteq	r1, r1, lsr r3
    312c:	0b580612 	bleq	160497c <__ccfg+0x15e49d4>
    3130:	13010b59 	movwne	r0, #7001	; 0x1b59
    3134:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
    3138:	11000182 	smlabbne	r0, r2, r1, r0
    313c:	00133101 	andseq	r3, r3, r1, lsl #2
    3140:	82891c00 	addhi	r1, r9, #0, 24
    3144:	01110101 	tsteq	r1, r1, lsl #2
    3148:	00001301 	andeq	r1, r0, r1, lsl #6
    314c:	01828a1d 	orreq	r8, r2, sp, lsl sl
    3150:	91180200 	tstls	r8, r0, lsl #4
    3154:	00001842 	andeq	r1, r0, r2, asr #16
    3158:	0182891e 	orreq	r8, r2, lr, lsl r9
    315c:	31011101 	tstcc	r1, r1, lsl #2
    3160:	00130113 	andseq	r0, r3, r3, lsl r1
    3164:	82891f00 	addhi	r1, r9, #0, 30
    3168:	01110101 	tsteq	r1, r1, lsl #2
    316c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    3170:	03193f01 	tsteq	r9, #1, 30
    3174:	3b0b3a0e 	blcc	2d19b4 <__ccfg+0x2b1a0c>
    3178:	11192705 	tstne	r9, r5, lsl #14
    317c:	40061201 	andmi	r1, r6, r1, lsl #4
    3180:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3184:	00001301 	andeq	r1, r0, r1, lsl #6
    3188:	03000521 	movweq	r0, #1313	; 0x521
    318c:	3b0b3a0e 	blcc	2d19cc <__ccfg+0x2b1a24>
    3190:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3194:	22000017 	andcs	r0, r0, #23
    3198:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    319c:	0b3b0b3a 	bleq	ec5e8c <__ccfg+0xea5ee4>
    31a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    31a4:	34230000 	strtcc	r0, [r3], #-0
    31a8:	3a080300 	bcc	203db0 <__ccfg+0x1e3e08>
    31ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31b0:	00170213 	andseq	r0, r7, r3, lsl r2
    31b4:	00342400 	eorseq	r2, r4, r0, lsl #8
    31b8:	0b3a0803 	bleq	e851cc <__ccfg+0xe65224>
    31bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    31c0:	0b250000 	bleq	9431c8 <__ccfg+0x923220>
    31c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    31c8:	00130106 	andseq	r0, r3, r6, lsl #2
    31cc:	00342600 	eorseq	r2, r4, r0, lsl #12
    31d0:	0b3a0e03 	bleq	e869e4 <__ccfg+0xe66a3c>
    31d4:	1349053b 	movtne	r0, #38203	; 0x953b
    31d8:	00001702 	andeq	r1, r0, r2, lsl #14
    31dc:	31011d27 	tstcc	r1, r7, lsr #26
    31e0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    31e4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    31e8:	00130105 	andseq	r0, r3, r5, lsl #2
    31ec:	00052800 	andeq	r2, r5, r0, lsl #16
    31f0:	00001331 	andeq	r1, r0, r1, lsr r3
    31f4:	11010b29 	tstne	r1, r9, lsr #22
    31f8:	00061201 	andeq	r1, r6, r1, lsl #4
    31fc:	00342a00 	eorseq	r2, r4, r0, lsl #20
    3200:	17021331 	smladxne	r2, r1, r3, r1
    3204:	1d2b0000 	stcne	0, cr0, [fp, #-0]
    3208:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    320c:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3210:	0105590b 	tsteq	r5, fp, lsl #18
    3214:	2c000013 	stccs	0, cr0, [r0], {19}
    3218:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    321c:	262d0000 	strtcs	r0, [sp], -r0
    3220:	00134900 	andseq	r4, r3, r0, lsl #18
    3224:	002e2e00 	eoreq	r2, lr, r0, lsl #28
    3228:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    322c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3230:	13491927 	movtne	r1, #39207	; 0x9927
    3234:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3238:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    323c:	2f000019 	svccs	0x00000019
    3240:	13490101 	movtne	r0, #37121	; 0x9101
    3244:	00001301 	andeq	r1, r0, r1, lsl #6
    3248:	49002130 	stmdbmi	r0, {r4, r5, r8, sp}
    324c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    3250:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
    3254:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3258:	0b3b0b3a 	bleq	ec5f48 <__ccfg+0xea5fa0>
    325c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    3260:	00001301 	andeq	r1, r0, r1, lsl #6
    3264:	3f012e32 	svccc	0x00012e32
    3268:	3a0e0319 	bcc	383ed4 <__ccfg+0x363f2c>
    326c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3270:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3274:	00130119 	andseq	r0, r3, r9, lsl r1
    3278:	002e3300 	eoreq	r3, lr, r0, lsl #6
    327c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3280:	0b3b0b3a 	bleq	ec5f70 <__ccfg+0xea5fc8>
    3284:	13491927 	movtne	r1, #39207	; 0x9927
    3288:	0000193c 	andeq	r1, r0, ip, lsr r9
    328c:	01110100 	tsteq	r1, r0, lsl #2
    3290:	0b130e25 	bleq	4c6b2c <__ccfg+0x4a6b84>
    3294:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    3298:	01111755 	tsteq	r1, r5, asr r7
    329c:	00001710 	andeq	r1, r0, r0, lsl r7
    32a0:	0b002402 	bleq	c2b0 <__exidx_end+0x9678>
    32a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    32a8:	0300000e 	movweq	r0, #14
    32ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    32b0:	0b3b0b3a 	bleq	ec5fa0 <__ccfg+0xea5ff8>
    32b4:	00001349 	andeq	r1, r0, r9, asr #6
    32b8:	0b002404 	bleq	c2d0 <__exidx_end+0x9698>
    32bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    32c0:	05000008 	streq	r0, [r0, #-8]
    32c4:	0b0b0104 	bleq	2c36dc <__ccfg+0x2a3734>
    32c8:	0b3b0b3a 	bleq	ec5fb8 <__ccfg+0xea6010>
    32cc:	00001301 	andeq	r1, r0, r1, lsl #6
    32d0:	03002806 	movweq	r2, #2054	; 0x806
    32d4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    32d8:	01040700 	tsteq	r4, r0, lsl #14
    32dc:	0b3a0b0b 	bleq	e85f10 <__ccfg+0xe65f68>
    32e0:	1301053b 	movwne	r0, #5435	; 0x153b
    32e4:	16080000 	strne	r0, [r8], -r0
    32e8:	3a0e0300 	bcc	383ef0 <__ccfg+0x363f48>
    32ec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    32f0:	09000013 	stmdbeq	r0, {r0, r1, r4}
    32f4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    32f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    32fc:	13491927 	movtne	r1, #39207	; 0x9927
    3300:	00000b20 	andeq	r0, r0, r0, lsr #22
    3304:	3f012e0a 	svccc	0x00012e0a
    3308:	3a0e0319 	bcc	383f74 <__ccfg+0x363fcc>
    330c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3310:	20134919 	andscs	r4, r3, r9, lsl r9
    3314:	0013010b 	andseq	r0, r3, fp, lsl #2
    3318:	00340b00 	eorseq	r0, r4, r0, lsl #22
    331c:	0b3a0e03 	bleq	e86b30 <__ccfg+0xe66b88>
    3320:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3324:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    3328:	03193f00 	tsteq	r9, #0, 30
    332c:	3b0b3a0e 	blcc	2d1b6c <__ccfg+0x2b1bc4>
    3330:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    3334:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    3338:	97184006 	ldrls	r4, [r8, -r6]
    333c:	00001942 	andeq	r1, r0, r2, asr #18
    3340:	3f012e0d 	svccc	0x00012e0d
    3344:	3a0e0319 	bcc	383fb0 <__ccfg+0x364008>
    3348:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    334c:	11134919 	tstne	r3, r9, lsl r9
    3350:	40061201 	andmi	r1, r6, r1, lsl #4
    3354:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3358:	00001301 	andeq	r1, r0, r1, lsl #6
    335c:	0300340e 	movweq	r3, #1038	; 0x40e
    3360:	3b0b3a0e 	blcc	2d1ba0 <__ccfg+0x2b1bf8>
    3364:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3368:	0f000017 	svceq	0x00000017
    336c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    3370:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3374:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3378:	00130119 	andseq	r0, r3, r9, lsl r1
    337c:	00341000 	eorseq	r1, r4, r0
    3380:	17021331 	smladxne	r2, r1, r3, r1
    3384:	0b110000 	bleq	44338c <__ccfg+0x4233e4>
    3388:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    338c:	12000006 	andne	r0, r0, #6
    3390:	13310034 	teqne	r1, #52	; 0x34
    3394:	1d130000 	ldcne	0, cr0, [r3, #-0]
    3398:	11133100 	tstne	r3, r0, lsl #2
    339c:	58061201 	stmdapl	r6, {r0, r9, ip}
    33a0:	000b590b 	andeq	r5, fp, fp, lsl #18
    33a4:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    33a8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    33ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    33b0:	13491927 	movtne	r1, #39207	; 0x9927
    33b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    33b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    33bc:	00130119 	andseq	r0, r3, r9, lsl r1
    33c0:	82891500 	addhi	r1, r9, #0, 10
    33c4:	01110001 	tsteq	r1, r1
    33c8:	00001331 	andeq	r1, r0, r1, lsr r3
    33cc:	03012e16 	movweq	r2, #7702	; 0x1e16
    33d0:	3b0b3a0e 	blcc	2d1c10 <__ccfg+0x2b1c68>
    33d4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    33d8:	010b2013 	tsteq	fp, r3, lsl r0
    33dc:	17000013 	smladne	r0, r3, r0, r0
    33e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    33e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    33e8:	00001349 	andeq	r1, r0, r9, asr #6
    33ec:	03003418 	movweq	r3, #1048	; 0x418
    33f0:	3b0b3a0e 	blcc	2d1c30 <__ccfg+0x2b1c88>
    33f4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    33f8:	19000018 	stmdbne	r0, {r3, r4}
    33fc:	1331001d 	teqne	r1, #29
    3400:	17550152 			; <UNDEFINED> instruction: 0x17550152
    3404:	0b590b58 	bleq	164616c <__ccfg+0x16261c4>
    3408:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    340c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    3410:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    3414:	010b590b 	tsteq	fp, fp, lsl #18
    3418:	1b000013 	blne	346c <__exidx_end+0x834>
    341c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3420:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    3424:	03193f01 	tsteq	r9, #1, 30
    3428:	3b0b3a0e 	blcc	2d1c68 <__ccfg+0x2b1cc0>
    342c:	11192705 	tstne	r9, r5, lsl #14
    3430:	40061201 	andmi	r1, r6, r1, lsl #4
    3434:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3438:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
    343c:	11133101 	tstne	r3, r1, lsl #2
    3440:	58061201 	stmdapl	r6, {r0, r9, ip}
    3444:	010b590b 	tsteq	fp, fp, lsl #18
    3448:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    344c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3450:	06120111 			; <UNDEFINED> instruction: 0x06120111
    3454:	0b590b58 	bleq	16461bc <__ccfg+0x1626214>
    3458:	01000000 	mrseq	r0, (UNDEF: 0)
    345c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    3460:	0e030b13 	vmoveq.32	d3[0], r0
    3464:	17550e1b 	smmlane	r5, fp, lr, r0
    3468:	17100111 			; <UNDEFINED> instruction: 0x17100111
    346c:	24020000 	strcs	r0, [r2], #-0
    3470:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3474:	000e030b 	andeq	r0, lr, fp, lsl #6
    3478:	00160300 	andseq	r0, r6, r0, lsl #6
    347c:	0b3a0e03 	bleq	e86c90 <__ccfg+0xe66ce8>
    3480:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3484:	24040000 	strcs	r0, [r4], #-0
    3488:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    348c:	0008030b 	andeq	r0, r8, fp, lsl #6
    3490:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    3494:	0b3a0e03 	bleq	e86ca8 <__ccfg+0xe66d00>
    3498:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    349c:	13010b20 	movwne	r0, #6944	; 0x1b20
    34a0:	05060000 	streq	r0, [r6, #-0]
    34a4:	3a0e0300 	bcc	3840ac <__ccfg+0x364104>
    34a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    34ac:	07000013 	smladeq	r0, r3, r0, r0
    34b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    34b4:	0b3b0b3a 	bleq	ec61a4 <__ccfg+0xea61fc>
    34b8:	00001349 	andeq	r1, r0, r9, asr #6
    34bc:	03012e08 	movweq	r2, #7688	; 0x1e08
    34c0:	3b0b3a0e 	blcc	2d1d00 <__ccfg+0x2b1d58>
    34c4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    34c8:	010b2013 	tsteq	fp, r3, lsl r0
    34cc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    34d0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    34d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    34d8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    34dc:	00130119 	andseq	r0, r3, r9, lsl r1
    34e0:	00050a00 	andeq	r0, r5, r0, lsl #20
    34e4:	17021331 	smladxne	r2, r1, r3, r1
    34e8:	340b0000 	strcc	r0, [fp], #-0
    34ec:	02133100 	andseq	r3, r3, #0, 2
    34f0:	0c000017 	stceq	0, cr0, [r0], {23}
    34f4:	13310005 	teqne	r1, #5
    34f8:	00000b1c 	andeq	r0, r0, ip, lsl fp
    34fc:	0182890d 	orreq	r8, r2, sp, lsl #18
    3500:	31011100 	mrscc	r1, (UNDEF: 17)
    3504:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    3508:	00018289 	andeq	r8, r1, r9, lsl #5
    350c:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    3510:	00133119 	andseq	r3, r3, r9, lsl r1
    3514:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    3518:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    351c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3520:	01111927 	tsteq	r1, r7, lsr #18
    3524:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    3528:	01194297 			; <UNDEFINED> instruction: 0x01194297
    352c:	10000013 	andne	r0, r0, r3, lsl r0
    3530:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3534:	0b3b0b3a 	bleq	ec6224 <__ccfg+0xea627c>
    3538:	17021349 	strne	r1, [r2, -r9, asr #6]
    353c:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    3540:	11010182 	smlabbne	r1, r2, r1, r0
    3544:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    3548:	00001331 	andeq	r1, r0, r1, lsr r3
    354c:	01828a12 	orreq	r8, r2, r2, lsl sl
    3550:	91180200 	tstls	r8, r0, lsl #4
    3554:	00001842 	andeq	r1, r0, r2, asr #16
    3558:	03003413 	movweq	r3, #1043	; 0x413
    355c:	3b0b3a0e 	blcc	2d1d9c <__ccfg+0x2b1df4>
    3560:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3564:	14000017 	strne	r0, [r0], #-23	; 0xffffffe9
    3568:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    356c:	0b3a0e03 	bleq	e86d80 <__ccfg+0xe66dd8>
    3570:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    3574:	01111349 	tsteq	r1, r9, asr #6
    3578:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    357c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3580:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    3584:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    3588:	06120111 			; <UNDEFINED> instruction: 0x06120111
    358c:	0b590b58 	bleq	16462f4 <__ccfg+0x162634c>
    3590:	0b160000 	bleq	583598 <__ccfg+0x5635f0>
    3594:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    3598:	17000006 	strne	r0, [r0, -r6]
    359c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    35a0:	0b3a0e03 	bleq	e86db4 <__ccfg+0xe66e0c>
    35a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    35a8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    35ac:	Address 0x00000000000035ac is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	000000c8 	andeq	r0, r0, r8, asr #1
       4:	000000f6 	strdeq	r0, [r0], -r6
}
       8:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
       c:	bf000001 	svclt	0x00000001
      10:	01000001 	tsteq	r0, r1
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	017c0000 	cmneq	ip, r0
      20:	01840000 	orreq	r0, r4, r0
      24:	00050000 	andeq	r0, r5, r0
      28:	00004803 	andeq	r4, r0, r3, lsl #16
      2c:	00000020 	andeq	r0, r0, r0, lsr #32
	...
      3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
      50:	00500001 	subseq	r0, r0, r1
	...
      60:	01000000 	mrseq	r0, (UNDEF: 0)
      64:	00005000 	andeq	r5, r0, r0
      68:	00000000 	andeq	r0, r0, r0
      6c:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
      70:	088a0000 	stmeq	sl, {}	; <UNPREDICTABLE>
      74:	00010000 	andeq	r0, r1, r0
      78:	0008ba56 	andeq	fp, r8, r6, asr sl
      7c:	0008be00 	andeq	fp, r8, r0, lsl #28
      80:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
      8c:	0000076e 	andeq	r0, r0, lr, ror #14
	descriptors [fd] = s;
      90:	00000772 	andeq	r0, r0, r2, ror r7
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	88520001 	ldmdahi	r2, {r0}^
      98:	9c000007 	stcls	0, cr0, [r0], {7}
	if (s == NULL)
      9c:	01000007 	tsteq	r0, r7
		syserror (EMALLOC, "tcv05");
      a0:	00005200 	andeq	r5, r0, r0, lsl #4
      a4:	00000000 	andeq	r0, r0, r0
      a8:	07760000 	ldrbeq	r0, [r6, -r0]!
      ac:	077c0000 	ldrbeq	r0, [ip, -r0]!
      b0:	00010000 	andeq	r0, r1, r0
      b4:	00000053 	andeq	r0, r0, r3, asr r0
      b8:	00000000 	andeq	r0, r0, r0
      bc:	00072c00 	andeq	r2, r7, r0, lsl #24
      c0:	00073600 	andeq	r3, r7, r0, lsl #12
      c4:	53000100 	movwpl	r0, #256	; 0x100
	...
      d0:	0000072c 	andeq	r0, r0, ip, lsr #14
      d4:	00000732 	andeq	r0, r0, r2, lsr r7
      d8:	00530001 	subseq	r0, r3, r1
      dc:	00000000 	andeq	r0, r0, r0
      e0:	c2000000 	andgt	r0, r0, #0
      e4:	cc000007 	stcgt	0, cr0, [r0], {7}
      e8:	01000007 	tsteq	r0, r7
      ec:	00005300 	andeq	r5, r0, r0, lsl #6
      f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
      f4:	07b40000 	ldreq	r0, [r4, r0]!
			curr += 0x1000;
      f8:	07de0000 	ldrbeq	r0, [lr, r0]
      fc:	00010000 	andeq	r0, r1, r0
		if (from >= EE_SIZE || upto < from)
     100:	00000052 	andeq	r0, r0, r2, asr r0
     104:	00000000 	andeq	r0, r0, r0
			upto = EE_SIZE - 1;
     108:	00080200 	andeq	r0, r8, r0, lsl #4
     10c:	00080c00 	andeq	r0, r8, r0, lsl #24
     110:	53000100 	movwpl	r0, #256	; 0x100
	...
     11c:	000007f4 	strdeq	r0, [r0], -r4
     120:	0000082a 	andeq	r0, r0, sl, lsr #16
     124:	00500001 	subseq	r0, r0, r1
        switch (choice)
     128:	00000000 	andeq	r0, r0, r0
     12c:	9a000000 	bls	134 <_Min_Stack_Size+0x34>
     130:	a4000006 	strge	r0, [r0], #-6
     134:	01000006 	tsteq	r0, r6
     138:	00005300 	andeq	r5, r0, r0, lsl #6
     13c:	00000000 	andeq	r0, r0, r0
     140:	068c0000 	streq	r0, [ip], r0
     144:	06b60000 	ldrteq	r0, [r6], r0
     148:	00010000 	andeq	r0, r1, r0
        proceed Menu_Header;
     14c:	00000052 	andeq	r0, r0, r2, asr r0
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	00000000 	andeq	r0, r0, r0
     154:	0006ec00 	andeq	lr, r6, r0, lsl #24
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	0006f600 	andeq	pc, r6, r0, lsl #12
     15c:	53000100 	movwpl	r0, #256	; 0x100
	...
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	000006de 	ldrdeq	r0, [r0], -lr
     16c:	00000706 	andeq	r0, r0, r6, lsl #14
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	00520001 	subseq	r0, r2, r1
	...
    if (node < 1 || node > 25) {
     17c:	04000002 	streq	r0, [r0], #-2
     180:	01000002 	tsteq	r0, r2
            proceed Set_Node_ID;
     184:	02045000 	andeq	r5, r4, #0
     188:	02070000 	andeq	r0, r7, #0
        proceed Menu_Header;
     18c:	00010000 	andeq	r0, r1, r0
     190:	00000051 	andeq	r0, r0, r1, asr r0
            proceed Set_Group_ID;
     194:	00000000 	andeq	r0, r0, r0
            proceed Set_Node_ID;
     198:	00054c00 	andeq	r4, r5, r0, lsl #24
     19c:	00054e00 	andeq	r4, r5, r0, lsl #28
            diag("Find neighbours");
     1a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
            diag("Delete Record on Neighbour");
     1ac:	0000054c 	andeq	r0, r0, ip, asr #10
            diag("Retrieve Record on Neighbour");
     1b0:	00000562 	andeq	r0, r0, r2, ror #10
            diag("Show Local Records");
     1b4:	62510001 	subsvs	r0, r1, #1
            diag("Reset Local Storage");
     1b8:	66000005 	strvs	r0, [r0], -r5
     1bc:	01000005 	tsteq	r0, r5
     1c0:	056c5500 	strbeq	r5, [ip, #-1280]!	; 0xfffffb00
     1c4:	05820000 	streq	r0, [r2]
     1c8:	00010000 	andeq	r0, r1, r0
     1cc:	00058255 	andeq	r8, r5, r5, asr r2
     1d0:	00059000 	andeq	r9, r5, r0
     1d4:	51000100 	mrspl	r0, (UNDEF: 16)
     1d8:	00000590 	muleq	r0, r0, r5
     1dc:	000005be 			; <UNDEFINED> instruction: 0x000005be
     1e0:	c4550001 	ldrbgt	r0, [r5], #-1
     1e4:	ec000005 	stc	0, cr0, [r0], {5}
     1e8:	01000005 	tsteq	r0, r5
     1ec:	05ec5500 	strbeq	r5, [ip, #1280]!	; 0x500
     1f0:	05fa0000 	ldrbeq	r0, [sl, #0]!
     1f4:	00010000 	andeq	r0, r1, r0
     1f8:	0005fa51 	andeq	pc, r5, r1, asr sl	; <UNPREDICTABLE>
     1fc:	00060400 	andeq	r0, r6, r0, lsl #8
static void devinit_uart (int devnum) {
     200:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	adddevfunc (ioreq_uart_a, devnum);
     204:	00000604 	andeq	r0, r0, r4, lsl #12
     208:	0000060f 	andeq	r0, r0, pc, lsl #12
void udelay (volatile word n) {
     20c:	0f510001 	svceq	0x00510001
     210:	12000006 	andne	r0, r0, #6
	while (n) {
     214:	01000006 	tsteq	r0, r6
     218:	06125500 	ldreq	r5, [r2], -r0, lsl #10
}
     21c:	06180000 	ldreq	r0, [r8], -r0
	while (n--);
     220:	00010000 	andeq	r0, r1, r0
     224:	00061851 	andeq	r1, r6, r1, asr r8
     228:	00062a00 	andeq	r2, r6, r0, lsl #20
		n--;
     22c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     230:	0000062a 	andeq	r0, r0, sl, lsr #12
     234:	0000063c 	andeq	r0, r0, ip, lsr r6
void mdelay (volatile word n) {
     238:	3c510001 	mrrccc	0, 0, r0, r1, cr1
     23c:	5c000006 	stcpl	0, cr0, [r0], {6}
	while (n) {
     240:	01000006 	tsteq	r0, r6
     244:	00005500 	andeq	r5, r0, r0, lsl #10
}
     248:	00000000 	andeq	r0, r0, r0
		udelay (999);
     24c:	054c0000 	strbeq	r0, [ip, #-0]
     250:	05620000 	strbeq	r0, [r2, #-0]!
		n--;
     254:	00010000 	andeq	r0, r1, r0
     258:	00056252 	andeq	r6, r5, r2, asr r2
     25c:	00056800 	andeq	r6, r5, r0, lsl #16
     260:	56000100 	strpl	r0, [r0], -r0, lsl #2
void __pi_ondomain (lword d) {
     264:	0000056c 	andeq	r0, r0, ip, ror #10
     268:	0000057c 	andeq	r0, r0, ip, ror r5
		if (__pi_systat.effpdm > 1)
     26c:	82560001 	subshi	r0, r6, #1
     270:	90000005 	andls	r0, r0, r5
			__pi_systat.effpdm = 1;
     274:	01000005 	tsteq	r0, r5
	PRCMPowerDomainOn (d);
     278:	05905200 	ldreq	r5, [r0, #512]	; 0x200
     27c:	05c00000 	strbeq	r0, [r0]
     280:	00010000 	andeq	r0, r1, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     284:	0005c456 	andeq	ip, r5, r6, asr r4
     288:	0005ec00 	andeq	lr, r5, r0, lsl #24
     28c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	__pi_systat.ondmns |= d;
     290:	000005ec 	andeq	r0, r0, ip, ror #11
     294:	000005fa 	strdeq	r0, [r0], -sl
}
     298:	fa520001 	blx	14802a4 <__ccfg+0x14602fc>
     29c:	04000005 	streq	r0, [r0], #-5
void __pi_syserror (word ec, const char *m) {
     2a0:	01000006 	tsteq	r0, r6
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	06045600 	streq	r5, [r4], -r0, lsl #12
     2a8:	060f0000 	streq	r0, [pc], -r0
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2b0:	00061252 	andeq	r1, r6, r2, asr r2
     2b4:	00061d00 	andeq	r1, r6, r0, lsl #26
     2b8:	52000100 	andpl	r0, r0, #0, 2
		all_leds_blink;
     2bc:	0000061d 	andeq	r0, r0, sp, lsl r6
     2c0:	0000062a 	andeq	r0, r0, sl, lsr #12
     2c4:	2a540001 	bcs	15002d0 <__ccfg+0x14e0328>
     2c8:	5c000006 	stcpl	0, cr0, [r0], {6}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	01000006 	tsteq	r0, r6
     2d0:	00005200 	andeq	r5, r0, r0, lsl #4
     2d4:	00000000 	andeq	r0, r0, r0
     2d8:	04c00000 	strbeq	r0, [r0], #0
     2dc:	04ce0000 	strbeq	r0, [lr], #0
     2e0:	00010000 	andeq	r0, r1, r0
	while (1) {
     2e4:	00000050 	andeq	r0, r0, r0, asr r0
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	0004c000 	andeq	ip, r4, r0
     2f0:	0004cf00 	andeq	ip, r4, r0, lsl #30
void tci_run_delay_timer () {
     2f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	setdel = __pi_mintk - __pi_old;
     300:	00000470 	andeq	r0, r0, r0, ror r4
     304:	00000487 	andeq	r0, r0, r7, lsl #9
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     308:	aa500001 	bge	1400314 <__ccfg+0x13e036c>
     30c:	c0000004 	andgt	r0, r0, r4
     310:	01000004 	tsteq	r0, r4
     314:	00005000 	andeq	r5, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	00000000 	andeq	r0, r0, r0
	sti_tim;
     31c:	03660000 	cmneq	r6, #0
}
     320:	03760000 	cmneq	r6, #0
     324:	00010000 	andeq	r0, r1, r0
     328:	00037652 	andeq	r7, r3, r2, asr r6
     32c:	00037e00 	andeq	r7, r3, r0, lsl #28
     330:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
	cli_aux;
     334:	40092004 	andmi	r2, r9, r4
     338:	00000418 	andeq	r0, r0, r8, lsl r4
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     33c:	0000041c 	andeq	r0, r0, ip, lsl r4
     340:	040c0005 	streq	r0, [ip], #-5
     344:	1c400920 	mcrrne	9, 2, r0, r0, cr0	; <UNPREDICTABLE>
     348:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
	sti_aux;
     34c:	01000004 	tsteq	r0, r4
}
     350:	041e5200 	ldreq	r5, [lr], #-512	; 0xfffffe00
     354:	04200000 	strteq	r0, [r0], #-0
     358:	00050000 	andeq	r0, r5, r0
void AONRTCIntHandler () {
     35c:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     360:	00000040 	andeq	r0, r0, r0, asr #32
     364:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	00038000 	andeq	r8, r3, r0
		if (__pi_utims [0] == 0)
     36c:	00038a00 	andeq	r8, r3, r0, lsl #20
     370:	52000100 	andpl	r0, r0, #0, 2
		if (*(__pi_utims [0])) {
     374:	0000038e 	andeq	r0, r0, lr, lsl #7
     378:	00000398 	muleq	r0, r8, r3
			(*(__pi_utims [0]))--;
     37c:	9c520001 	mrrcls	0, 0, r0, r2, cr1
		if (__pi_utims [1] == 0)
     380:	a6000003 	strge	r0, [r0], -r3
		if (*(__pi_utims [1])) {
     384:	01000003 	tsteq	r0, r3
			aux_timer_inactive = 0;
     388:	03aa5200 			; <UNDEFINED> instruction: 0x03aa5200
			(*(__pi_utims [1]))--;
     38c:	03b60000 			; <UNDEFINED> instruction: 0x03b60000
		if (__pi_utims [2] == 0)
     390:	00010000 	andeq	r0, r1, r0
		if (*(__pi_utims [2])) {
     394:	00044252 	andeq	r4, r4, r2, asr r2
			(*(__pi_utims [2]))--;
     398:	00044600 	andeq	r4, r4, r0, lsl #12
		if (__pi_utims [3] != 0) {
     39c:	52000100 	andpl	r0, r0, #0, 2
	...
				(*(__pi_utims [3]))--;
     3a8:	00000306 	andeq	r0, r0, r6, lsl #6
	if (__pi_systat.ledsts) {
     3ac:	00000318 	andeq	r0, r0, r8, lsl r3
     3b0:	00540001 	subseq	r0, r4, r1
		if (__pi_systat.ledblc++ == 0) {
     3b4:	00000000 	andeq	r0, r0, r0
     3b8:	a0000000 	andge	r0, r0, r0
			if (__pi_systat.ledblk) {
     3bc:	a8000002 	stmdage	r0, {r1}
     3c0:	01000002 	tsteq	r0, r2
     3c4:	00005000 	andeq	r5, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	00000000 	andeq	r0, r0, r0
     3cc:	02a00000 	adceq	r0, r0, #0
				if (__pi_systat.ledsts & 0x2)
     3d0:	02a60000 	adceq	r0, r6, #0
     3d4:	00010000 	andeq	r0, r1, r0
     3d8:	0002a651 	andeq	sl, r2, r1, asr r6
				if (__pi_systat.ledsts & 0x4)
     3dc:	0002ab00 	andeq	sl, r2, r0, lsl #22
				__pi_systat.ledblk = 0;
     3e0:	52000100 	andpl	r0, r0, #0, 2
	...
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f4:	00500001 	subseq	r0, r0, r1
	...
		setdel = 0;
     404:	01000000 	mrseq	r0, (UNDEF: 0)
		RISE_N_SHINE;
     408:	00005100 	andeq	r5, r0, r0, lsl #2
		__pi_new += setdel;
     40c:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     410:	00010000 	andeq	r0, r1, r0
     414:	00000051 	andeq	r0, r0, r1, asr r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     424:	52000100 	andpl	r0, r0, #0, 2
	...
     430:	00540001 	subseq	r0, r4, r1
	...
				__pi_systat.ledblk = 1;
     440:	01000000 	mrseq	r0, (UNDEF: 0)
		if (aux_timer_inactive) {
     444:	00005000 	andeq	r5, r0, r0
			cli_aux;
     448:	00000000 	andeq	r0, r0, r0
     44c:	00010000 	andeq	r0, r1, r0
     450:	00000054 	andeq	r0, r0, r4, asr r0
     454:	00000000 	andeq	r0, r0, r0
     458:	00026400 	andeq	r6, r2, r0, lsl #8
     45c:	00027c00 	andeq	r7, r2, r0, lsl #24
     460:	50000100 	andpl	r0, r0, r0, lsl #2
     464:	0000027c 	andeq	r0, r0, ip, ror r2
     468:	00000294 	muleq	r0, r4, r2
     46c:	00540001 	subseq	r0, r4, r1
word tci_update_delay_ticks (Boolean force) {
     470:	00000000 	andeq	r0, r0, r0
	cli_tim;
     474:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     478:	3e000002 	cdpcc	0, 0, cr0, cr0, cr2, {0}
	if (setdel) {
     47c:	01000002 	tsteq	r0, r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	00005000 	andeq	r5, r0, r0
	...
     490:	00010000 	andeq	r0, r1, r0
				AON_RTC_O_CH0CMP)) - gettav ());
     494:	00000050 	andeq	r0, r0, r0, asr r0
	return NO;
     498:	00000000 	andeq	r0, r0, r0
			setdel = 0;
     49c:	00120800 	andseq	r0, r2, r0, lsl #16
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     4a0:	00122600 	andseq	r2, r2, r0, lsl #12
     4a4:	91000200 	mrsls	r0, R8_usr
}
     4a8:	00122670 	andseq	r2, r2, r0, ror r6
		sti_tim;
     4ac:	00124e00 	andseq	r4, r2, r0, lsl #28
		return YES;
     4b0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     4b4:	00001252 	andeq	r1, r0, r2, asr r2
     4b8:	0000125a 	andeq	r1, r0, sl, asr r2
     4bc:	68540001 	ldmdavs	r4, {r0}^
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	b2000012 	andlt	r0, r0, #18
	UARTDisable (UART0_BASE);
     4c4:	01000012 	tsteq	r0, r2, lsl r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	12b65600 	adcsne	r5, r6, #0, 12
	UARTDisable (UART0_BASE);
     4cc:	132e0000 			; <UNDEFINED> instruction: 0x132e0000
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	00010000 	andeq	r0, r1, r0
     4d4:	00000056 	andeq	r0, r0, r6, asr r0
     4d8:	00000000 	andeq	r0, r0, r0
     4dc:	00127200 	andseq	r7, r2, r0, lsl #4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	0012b000 	andseq	fp, r2, r0
     4e4:	51000100 	mrspl	r0, (UNDEF: 16)
     4e8:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	000012c8 	andeq	r1, r0, r8, asr #5
     4f0:	d4510001 	ldrble	r0, [r1], #-1
     4f4:	de000012 	mcrle	0, 0, r0, cr0, cr2, {0}
	urates [0] = rate;
     4f8:	01000012 	tsteq	r0, r2, lsl r0
}
     4fc:	12f05100 	rscsne	r5, r0, #0, 2
     500:	12f40000 	rscsne	r0, r4, #0
     504:	00010000 	andeq	r0, r1, r0
     508:	00131451 	andseq	r1, r3, r1, asr r4
     50c:	00131800 	andseq	r1, r3, r0, lsl #16
     510:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     51c:	00001272 	andeq	r1, r0, r2, ror r2
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	000012b0 			; <UNDEFINED> instruction: 0x000012b0
     524:	b6550001 	ldrblt	r0, [r5], -r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     528:	de000012 	mcrle	0, 0, r0, cr0, cr2, {0}
     52c:	01000012 	tsteq	r0, r2, lsl r0
	__pi_uart_setrate (urates [0], __pi_uart);
     530:	12f05500 	rscsne	r5, r0, #0, 10
     534:	12f40000 	rscsne	r0, r4, #0
     538:	00010000 	andeq	r0, r1, r0
     53c:	00131455 	andseq	r1, r3, r5, asr r4
     540:	00132e00 	andseq	r2, r3, r0, lsl #28
     544:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     550:	000012e4 	andeq	r1, r0, r4, ror #5
     554:	000012f0 	strdeq	r1, [r0], -r0
     558:	f4550001 			; <UNDEFINED> instruction: 0xf4550001
     55c:	0e000012 	mcreq	0, 0, r0, cr0, cr2, {0}
     560:	01000013 	tsteq	r0, r3, lsl r0
				*buf++ = uart_a_read;
     564:	13125500 	tstne	r2, #0, 10
     568:	13140000 	tstne	r4, #0
			while (len && uart_a_char_available) {
     56c:	00010000 	andeq	r0, r1, r0
     570:	00000055 	andeq	r0, r0, r5, asr r0
     574:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
     578:	00129800 	andseq	r9, r2, r0, lsl #16
}
     57c:	0012b000 	andseq	fp, r2, r0
     580:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				*buf++ = uart_a_read;
     58c:	000012de 	ldrdeq	r1, [r0], -lr
			uart_a_disable_int;
     590:	000012f0 	strdeq	r1, [r0], -r0
     594:	f4540001 			; <UNDEFINED> instruction: 0xf4540001
			if (uart_a_char_available) {
     598:	08000012 	stmdaeq	r0, {r1, r4}
     59c:	01000013 	tsteq	r0, r3, lsl r0
				uart_a_enable_int;
     5a0:	13085400 	movwne	r5, #33792	; 0x8400
     5a4:	13140000 	tstne	r4, #0
				goto Redo_rx;
     5a8:	00010000 	andeq	r0, r1, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5ac:	00000053 	andeq	r0, r0, r3, asr r0
     5b0:	00000000 	andeq	r0, r0, r0
			return -2;
     5b4:	00132000 	andseq	r2, r3, r0
     5b8:	00132e00 	andseq	r2, r3, r0, lsl #28
				uart_a_write (*buf);
     5bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			while (len && uart_a_room_in_tx) {
     5c8:	00000d6c 	andeq	r0, r0, ip, ror #26
     5cc:	00000d78 	andeq	r0, r0, r8, ror sp
			if (len != operation) {
     5d0:	00500001 	subseq	r0, r0, r1
	...
			if (uart_a_room_in_tx) {
     5e0:	01000000 	mrseq	r0, (UNDEF: 0)
				uart_a_enable_int;
     5e4:	00005000 	andeq	r5, r0, r0
     5e8:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     5ec:	00010000 	andeq	r0, r1, r0
			if (uart_a_room_in_tx) {
     5f0:	00000050 	andeq	r0, r0, r0, asr r0
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     600:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			uart_a_enable_int;
     60c:	00510001 	subseq	r0, r1, r1
	...
				if (__pi_uart_setrate (*((word*)buf),
     61c:	01000000 	mrseq	r0, (UNDEF: 0)
     620:	00005200 	andeq	r5, r0, r0, lsl #4
				syserror (EREQPAR, "uar");
     624:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     628:	00010000 	andeq	r0, r1, r0
			if (len == UART_CNTRL_GETRATE) {
     62c:	00000052 	andeq	r0, r0, r2, asr r0
	...
			syserror (ENOOPER, "uai");
     63c:	53000100 	movwpl	r0, #256	; 0x100
	...
     648:	00530001 	subseq	r0, r3, r1
     64c:	00000000 	andeq	r0, r0, r0
     650:	01000000 	mrseq	r0, (UNDEF: 0)
     654:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	00010000 	andeq	r0, r1, r0
     668:	00000050 	andeq	r0, r0, r0, asr r0
     66c:	00000000 	andeq	r0, r0, r0
     670:	0011f000 	andseq	pc, r1, r0
     674:	0011f800 	andseq	pc, r1, r0, lsl #16
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     678:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		RISE_N_SHINE;
     684:	00001114 	andeq	r1, r0, r4, lsl r1
		i_trigger (devevent (UART_A, READ));
     688:	0000111a 	andeq	r1, r0, sl, lsl r1
     68c:	00500001 	subseq	r0, r0, r1
     690:	00000000 	andeq	r0, r0, r0
     694:	2a000000 	bcs	69c <UART0IntHandler+0x40>
     698:	56000011 			; <UNDEFINED> instruction: 0x56000011
     69c:	01000011 	tsteq	r0, r1, lsl r0
     6a0:	11565400 	cmpne	r6, r0, lsl #8
     6a4:	115c0000 	cmpne	ip, r0
     6a8:	00010000 	andeq	r0, r1, r0
     6ac:	00115c52 	andseq	r5, r1, r2, asr ip
     6b0:	0011a400 	andseq	sl, r1, r0, lsl #8
     6b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b8:	000011a4 	andeq	r1, r0, r4, lsr #3
     6bc:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
     6c0:	00500001 	subseq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     6c4:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	56000000 	strpl	r0, [r0], -r0
     6cc:	5a000011 	bpl	718 <UART0IntHandler+0xbc>
		RISE_N_SHINE;
     6d0:	01000011 	tsteq	r0, r1, lsl r0
     6d4:	115a5400 	cmpne	sl, r0, lsl #8
     6d8:	115c0000 	cmpne	ip, r0
		i_trigger (devevent (UART_A, WRITE));
     6dc:	00010000 	andeq	r0, r1, r0
     6e0:	00117253 	andseq	r7, r1, r3, asr r2
     6e4:	00117b00 	andseq	r7, r1, r0, lsl #22
     6e8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     6f4:	00001164 	andeq	r1, r0, r4, ror #2
     6f8:	00001174 	andeq	r1, r0, r4, ror r1
     6fc:	00530001 	subseq	r0, r3, r1
     700:	00000000 	andeq	r0, r0, r0
     704:	2a000000 	bcs	70c <UART0IntHandler+0xb0>
}
     708:	48000011 	stmdami	r0, {r0, r4}
     70c:	01000011 	tsteq	r0, r1, lsl r0
     710:	114e5000 	mrsne	r5, (UNDEF: 78)
     714:	116e0000 	cmnne	lr, r0
     718:	00010000 	andeq	r0, r1, r0
void __buttons_setirq (int val) {
     71c:	00116e50 	andseq	r6, r1, r0, asr lr
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	00117800 	andseq	r7, r1, r0, lsl #16
     724:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	0000007c 	andeq	r0, r0, ip, ror r0
     72c:	00000000 	andeq	r0, r0, r0
     730:	000cec00 	andeq	lr, ip, r0, lsl #24
		bn = BUTTON_GPIO (__button_list [i]);
     734:	000d1a00 	andeq	r1, sp, r0, lsl #20
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     738:	50000100 	andpl	r0, r0, r0, lsl #2
     73c:	00000d28 	andeq	r0, r0, r8, lsr #26
     740:	00000d6c 	andeq	r0, r0, ip, ror #26
     744:	00500001 	subseq	r0, r0, r1
     748:	00000000 	andeq	r0, r0, r0
     74c:	f4000000 	vst4.8	{d0-d3}, [r0], r0
}
     750:	0000000c 	andeq	r0, r0, ip
     754:	0100000d 	tsteq	r0, sp
     758:	0d005300 	stceq	3, cr5, [r0, #-0]
     75c:	0d020000 	stceq	0, cr0, [r2, #-0]
void __pinlist_setirq (int val) {
     760:	00020000 	andeq	r0, r2, r0
	for (i = 0; i < N_PINLIST; i++) {
     764:	0d060070 	stceq	0, cr0, [r6, #-448]	; 0xfffffe40
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     768:	0d5e0000 	ldcleq	0, cr0, [lr, #-0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     76c:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < N_PINLIST; i++) {
     770:	000d5e53 	andeq	r5, sp, r3, asr lr
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     774:	000d6200 	andeq	r6, sp, r0, lsl #4
     778:	73000200 	movwvc	r0, #512	; 0x200
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77c:	000d6200 	andeq	r6, sp, r0, lsl #4
     780:	000d6c00 	andeq	r6, sp, r0, lsl #24
     784:	53000100 	movwpl	r0, #256	; 0x100
	...
}
     790:	00000cf4 	strdeq	r0, [r0], -r4
     794:	00000cf6 	strdeq	r0, [r0], -r6
     798:	06520001 	ldrbeq	r0, [r2], -r1
void GPIOIntHandler () {
     79c:	4600000d 	strmi	r0, [r0], -sp
if (buttons_int) {
     7a0:	0100000d 	tsteq	r0, sp
     7a4:	0d5e5200 	lfmeq	f5, 2, [lr, #-0]
	buttons_disable ();
     7a8:	0d620000 	stcleq	0, cr0, [r2, #-0]
     7ac:	00010000 	andeq	r0, r1, r0
	i_trigger ((aword)&__button_list);
     7b0:	000d6253 	andeq	r6, sp, r3, asr r2
     7b4:	000d6c00 	andeq	r6, sp, r0, lsl #24
     7b8:	52000100 	andpl	r0, r0, #0, 2
	...
     7c4:	0000103c 	andeq	r1, r0, ip, lsr r0
     7c8:	00001044 	andeq	r1, r0, r4, asr #32
     7cc:	48510001 	ldmdami	r1, {r0}^
     7d0:	4a000010 	bmi	818 <GPIOIntHandler+0x7c>
     7d4:	01000010 	tsteq	r0, r0, lsl r0
     7d8:	00005100 	andeq	r5, r0, r0, lsl #2
	RISE_N_SHINE;
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	0f900000 	svceq	0x00900000
     7e4:	0fac0000 	svceq	0x00ac0000
if (pin_sensor_int) {
     7e8:	00010000 	andeq	r0, r1, r0
     7ec:	000fb250 	andeq	fp, pc, r0, asr r2	; <UNPREDICTABLE>
	i_trigger ((aword)(&__input_pins));
     7f0:	000fbe00 	andeq	fp, pc, r0, lsl #28
     7f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     800:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     804:	00000fae 	andeq	r0, r0, lr, lsr #31
     808:	b2510001 	subslt	r0, r1, #1
     80c:	bc00000f 	stclt	0, cr0, [r0], {15}
     810:	0100000f 	tsteq	r0, pc
     814:	00005100 	andeq	r5, r0, r0, lsl #2
     818:	00000000 	andeq	r0, r0, r0
	__pinsen_disable_and_clear;
     81c:	0f900000 	svceq	0x00900000
	RISE_N_SHINE;
     820:	0fb10000 	svceq	0x00b10000
     824:	00010000 	andeq	r0, r1, r0
     828:	000fb252 	andeq	fp, pc, r2, asr r2	; <UNPREDICTABLE>
}
     82c:	000fba00 	andeq	fp, pc, r0, lsl #20
     830:	52000100 	andpl	r0, r0, #0, 2
	...
     83c:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
void system_init () {
     840:	00000fa8 	andeq	r0, r0, r8, lsr #31
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	a8530001 	ldmdage	r3, {r0}^
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     848:	2c00000f 	stccs	0, cr0, [r0], {15}
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	01000010 	tsteq	r0, r0, lsl r0
     850:	00005500 	andeq	r5, r0, r0, lsl #10
     854:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     858:	0f900000 	svceq	0x00900000
     85c:	10100000 	andsne	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	00020000 	andeq	r0, r2, r0
     864:	10100091 	mulsne	r0, r1, r0
     868:	102c0000 	eorne	r0, ip, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	00020000 	andeq	r0, r2, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     870:	00000091 	muleq	r0, r1, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     874:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     878:	0fc00000 	svceq	0x00c00000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87c:	0fd60000 	svceq	0x00d60000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     880:	00010000 	andeq	r0, r1, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	000fde50 	andeq	sp, pc, r0, asr lr	; <UNPREDICTABLE>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	000ff000 	andeq	pc, pc, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     88c:	50000100 	andpl	r0, r0, r0, lsl #2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     890:	00001000 	andeq	r1, r0, r0
     894:	00001008 	andeq	r1, r0, r8
     898:	10500001 	subsne	r0, r0, r1
     89c:	18000010 	stmdane	r0, {r4}
		if (port_confs [i] & 0x80)
     8a0:	01000010 	tsteq	r0, r0, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a4:	00005000 	andeq	r5, r0, r0
     8a8:	00000000 	andeq	r0, r0, r0
		if (port_confs [i] & 0x40)
     8ac:	0f6c0000 	svceq	0x006c0000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	0f720000 	svceq	0x00720000
     8b4:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b8:	000f7850 	andeq	r7, pc, r0, asr r8	; <UNPREDICTABLE>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8bc:	000f8000 	andeq	r8, pc, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8c0:	50000100 	andpl	r0, r0, r0, lsl #2
	all_leds_blink;
     8c4:	00000f84 	andeq	r0, r0, r4, lsl #31
     8c8:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     8cc:	00500001 	subseq	r0, r0, r1
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	6c000000 	stcvs	0, cr0, [r0], {-0}
     8d8:	7400000f 	strvc	r0, [r0], #-15
     8dc:	0100000f 	tsteq	r0, pc
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8e0:	0f785100 	svceq	0x00785100
     8e4:	0f820000 	svceq	0x00820000
     8e8:	00010000 	andeq	r0, r1, r0
     8ec:	000f8451 	andeq	r8, pc, r1, asr r4	; <UNPREDICTABLE>
     8f0:	000f9000 	andeq	r9, pc, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	IntEnable (INT_AON_RTC_COMB);
     908:	00500001 	subseq	r0, r0, r1
	__pi_malloc_init ();
     90c:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_AON_GPIO_EDGE);
     910:	01000000 	mrseq	r0, (UNDEF: 0)
     914:	00005000 	andeq	r5, r0, r0
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     924:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     928:	00000052 	andeq	r0, r0, r2, asr r0
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     938:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	EXTRA_INITIALIZERS;
     94c:	00510001 	subseq	r0, r1, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     950:	00000000 	andeq	r0, r0, r0
     954:	01000000 	mrseq	r0, (UNDEF: 0)
     958:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     968:	00010000 	andeq	r0, r1, r0
			devinit [i] . init (devinit [i] . param);
     96c:	00000052 	andeq	r0, r0, r2, asr r0
	...
	IntEnable (INT_UART0_COMB);
     97c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("");
     990:	00510001 	subseq	r0, r1, r1
	...
		diag ("Leftover RAM: %d bytes",
     9a0:	01000000 	mrseq	r0, (UNDEF: 0)
     9a4:	00005000 	andeq	r5, r0, r0
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	00010000 	andeq	r0, r1, r0
     9b0:	00000050 	andeq	r0, r0, r0, asr r0
	...
     9c0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     9d4:	00500001 	subseq	r0, r0, r1
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	01000000 	mrseq	r0, (UNDEF: 0)
     9e0:	00005000 	andeq	r5, r0, r0
	...
     9f0:	00010000 	andeq	r0, r1, r0
     9f4:	00000051 	andeq	r0, r0, r1, asr r0
	...
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a04:	52000100 	andpl	r0, r0, #0, 2
	...
	update_n_wake (MAX_WORD, NO);
     a18:	00500001 	subseq	r0, r0, r1
	...
	for_all_tasks (__pi_curr) {
     a28:	01000000 	mrseq	r0, (UNDEF: 0)
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	00005100 	andeq	r5, r0, r0, lsl #2
	__SLEEP;
     a30:	00000000 	andeq	r0, r0, r0
     a34:	00010000 	andeq	r0, r1, r0
     a38:	00000051 	andeq	r0, r0, r1, asr r0
     a3c:	00000000 	andeq	r0, r0, r0
	system_event_count ++;
     a40:	000f5c00 	andeq	r5, pc, r0, lsl #24
     a44:	000f6000 	andeq	r6, pc, r0
	switch (__pi_systat.effpdm) {
     a48:	50000100 	andpl	r0, r0, r0, lsl #2
     a4c:	00000f60 	andeq	r0, r0, r0, ror #30
     a50:	00000f6a 	andeq	r0, r0, sl, ror #30
     a54:	00530001 	subseq	r0, r3, r1
			__WFI ();
     a58:	00000000 	andeq	r0, r0, r0
     a5c:	60000000 	andvs	r0, r0, r0
     a60:	6a00000f 	bvs	aa4 <__pi_release+0xac>
	check_stack_overflow;
     a64:	0100000f 	tsteq	r0, pc
     a68:	00005000 	andeq	r5, r0, r0
	...
			goto Redo;
     a78:	00010000 	andeq	r0, r1, r0
	for_all_tasks (__pi_curr) {
     a7c:	00000050 	andeq	r0, r0, r0, asr r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	00000000 	andeq	r0, r0, r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a84:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a98:	00520001 	subseq	r0, r2, r1
     a9c:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     aa0:	01000000 	mrseq	r0, (UNDEF: 0)
     aa4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
}
     ab4:	00010000 	andeq	r0, r1, r0
     ab8:	00000050 	andeq	r0, r0, r0, asr r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     abc:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ac0:	000f3800 	andeq	r3, pc, r0, lsl #16
     ac4:	000f4000 	andeq	r4, pc, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac8:	50000100 	andpl	r0, r0, r0, lsl #2
     acc:	00000f42 	andeq	r0, r0, r2, asr #30
     ad0:	00000f46 	andeq	r0, r0, r6, asr #30
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ad4:	46500001 	ldrbmi	r0, [r0], -r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad8:	5c00000f 	stcpl	0, cr0, [r0], {15}
     adc:	0100000f 	tsteq	r0, pc
     ae0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	00010000 	andeq	r0, r1, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     af4:	00000050 	andeq	r0, r0, r0, asr r0
     af8:	00000000 	andeq	r0, r0, r0
     afc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b10:	00500001 	subseq	r0, r0, r1
     b14:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	01000000 	mrseq	r0, (UNDEF: 0)
     b1c:	00005000 	andeq	r5, r0, r0
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	00010000 	andeq	r0, r1, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	00000050 	andeq	r0, r0, r0, asr r0
     b34:	00000000 	andeq	r0, r0, r0
     b38:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b4c:	00560001 	subseq	r0, r6, r1
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b5c:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	00005000 	andeq	r5, r0, r0
     b64:	00000000 	andeq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b68:	00010000 	andeq	r0, r1, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b6c:	00000050 	andeq	r0, r0, r0, asr r0
			SysCtrlAdjustRechargeAfterPowerDown ();
     b70:	00000000 	andeq	r0, r0, r0
			reinit_uart ();
     b74:	58000100 	stmdapl	r0, {r8}
	...
}
     b80:	00500001 	subseq	r0, r0, r1
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b90:	01000000 	mrseq	r0, (UNDEF: 0)
     b94:	00005400 	andeq	r5, r0, r0, lsl #8
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	00000000 	andeq	r0, r0, r0
     b9c:	00010000 	andeq	r0, r1, r0
     ba0:	00000054 	andeq	r0, r0, r4, asr r0
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	58000100 	stmdapl	r0, {r8}
	...
     bbc:	00580001 	subseq	r0, r8, r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc0:	00000000 	andeq	r0, r0, r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     bc4:	c4000000 	strgt	r0, [r0], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc8:	cc000010 	stcgt	0, cr0, [r0], {16}
     bcc:	01000010 	tsteq	r0, r0, lsl r0
			PRCMPowerDomainOff (
     bd0:	10cc5000 	sbcne	r5, ip, r0
     bd4:	10d60000 	sbcsne	r0, r6, r0
	__SLEEP;
     bd8:	00010000 	andeq	r0, r1, r0
     bdc:	0010dc50 	andseq	sp, r0, r0, asr ip
  __ASM volatile ("cpsie i" : : : "memory");
     be0:	0010e800 	andseq	lr, r0, r0, lsl #16
	goto Redo;
     be4:	50000100 	andpl	r0, r0, r0, lsl #2
     be8:	000010fc 	strdeq	r1, [r0], -ip
     bec:	00001106 	andeq	r1, r0, r6, lsl #2
     bf0:	00500001 	subseq	r0, r0, r1
     bf4:	00000000 	andeq	r0, r0, r0
     bf8:	d2000000 	andle	r0, r0, #0
     bfc:	04000010 	streq	r0, [r0], #-16
     c00:	01000011 	tsteq	r0, r1, lsl r0
     c04:	11045400 	tstne	r4, r0, lsl #8
     c08:	11060000 	mrsne	r0, (UNDEF: 6)
     c0c:	00010000 	andeq	r0, r1, r0
     c10:	00110652 	andseq	r0, r1, r2, asr r6
     c14:	00110800 	andseq	r0, r1, r0, lsl #16
     c18:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     c24:	00000cb6 			; <UNDEFINED> instruction: 0x00000cb6
     c28:	00000ce8 	andeq	r0, r0, r8, ror #25
     c2c:	00560001 	subseq	r0, r6, r1
     c30:	00000000 	andeq	r0, r0, r0
     c34:	cc000000 	stcgt	0, cr0, [r0], {-0}
     c38:	d600000c 	strle	r0, [r0], -ip
     c3c:	0100000c 	tsteq	r0, ip
     c40:	00005300 	andeq	r5, r0, r0, lsl #6
	...
int main (void) {
     c50:	00010000 	andeq	r0, r1, r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	00000050 	andeq	r0, r0, r0, asr r0
     c58:	00000000 	andeq	r0, r0, r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c70:	00500001 	subseq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	00000000 	andeq	r0, r0, r0
     c78:	01000000 	mrseq	r0, (UNDEF: 0)
     c7c:	00005000 	andeq	r5, r0, r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c80:	00000000 	andeq	r0, r0, r0
     c84:	0f000000 	svceq	0x00000000
	delay (16, 0);
     c88:	0f190000 	svceq	0x00190000
     c8c:	00010000 	andeq	r0, r1, r0
     c90:	00000050 	andeq	r0, r0, r0, asr r0
	__pi_release ();
     c94:	00000000 	andeq	r0, r0, r0
     c98:	000f0000 	andeq	r0, pc, r0
     c9c:	000f1600 	andeq	r1, pc, r0, lsl #12
     ca0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     cac:	00000edc 	ldrdeq	r0, [r0], -ip
static void killev (__pi_pcb_t *pid) {
     cb0:	00000ef0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	wfun = (aword)(pid->code);
     cb4:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
	for_all_tasks (i) {
     cb8:	f400000e 	vst4.8	{d0-d3}, [r0], lr
		for (j = 0; j < nevents (i); j++) {
     cbc:	0100000e 	tsteq	r0, lr
     cc0:	0ef85400 	cdpeq	4, 15, cr5, cr8, cr0, {0}
     cc4:	0f000000 	svceq	0x00000000
			    || i->Events [j] . Event == wfun
     cc8:	00010000 	andeq	r0, r1, r0
		for (j = 0; j < nevents (i); j++) {
     ccc:	00000050 	andeq	r0, r0, r0, asr r0
			if (i->Events [j] . Event == (aword)pid
     cd0:	00000000 	andeq	r0, r0, r0
     cd4:	000edc00 	andeq	sp, lr, r0, lsl #24
     cd8:	000ef300 	andeq	pc, lr, r0, lsl #6
				wakeupev (i, j);
     cdc:	51000100 	mrspl	r0, (UNDEF: 16)
     ce0:	00000ef8 	strdeq	r0, [r0], -r8
	for_all_tasks (i) {
     ce4:	00000f00 	andeq	r0, r0, r0, lsl #30
}
     ce8:	00510001 	subseq	r0, r1, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	00000000 	andeq	r0, r0, r0
static void qfree (aword *ch) {
     cf0:	e4000000 	str	r0, [r0], #-0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf4:	f300000e 	vhadd.u8	d0, d0, d14
	cc = (aword*)(mpools + MA_NP);
     cf8:	0100000e 	tsteq	r0, lr
	m_setnextp (ch, chunk);
     cfc:	0ef85300 	cdpeq	3, 15, cr5, cr8, cr0, {0}
	m_setnextp (cc, ch);
     d00:	0f000000 	svceq	0x00000000
}
     d04:	00010000 	andeq	r0, r1, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d08:	00000053 	andeq	r0, r0, r3, asr r0
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     d18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	00510001 	subseq	r0, r1, r1
     d30:	00000000 	andeq	r0, r0, r0
     d34:	01000000 	mrseq	r0, (UNDEF: 0)
			m_setnextp (cc, m_nextp (chunk));
     d38:	00005500 	andeq	r5, r0, r0, lsl #10
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
     d48:	00010000 	andeq	r0, r1, r0
     d4c:	00000052 	andeq	r0, r0, r2, asr r0
     d50:	00000000 	andeq	r0, r0, r0
			if (m_size (chunk) >= m_size (ch))
     d54:	52000100 	andpl	r0, r0, #0, 2
	...
		chunk = m_nextp (chunk))
     d60:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     d64:	00000ec6 	andeq	r0, r0, r6, asr #29
     d68:	00530001 	subseq	r0, r3, r1
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	00000000 	andeq	r0, r0, r0
	diag_wait (a);
     d70:	60000000 	andvs	r0, r0, r0
	diag_wchar (c, a);
     d74:	6600000e 	strvs	r0, [r0], -lr
     d78:	0100000e 	tsteq	r0, lr
}
     d7c:	00005000 	andeq	r5, r0, r0
     d80:	00000000 	andeq	r0, r0, r0
	syserror (ESTATE, "state");
     d84:	11bc0000 			; <UNDEFINED> instruction: 0x11bc0000
     d88:	11c20000 	bicne	r0, r2, r0
     d8c:	00010000 	andeq	r0, r1, r0
     d90:	0011c250 	andseq	ip, r1, r0, asr r2
void update_n_wake (word min, Boolean force) {
     d94:	0011f000 	andseq	pc, r1, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da4:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
     da8:	000011c7 	andeq	r1, r0, r7, asr #3
     dac:	c7510001 	ldrbgt	r0, [r1, -r1]
     db0:	f0000011 			; <UNDEFINED> instruction: 0xf0000011
     db4:	01000011 	tsteq	r0, r1, lsl r0
     db8:	00005400 	andeq	r5, r0, r0, lsl #8
     dbc:	00000000 	andeq	r0, r0, r0
     dc0:	11d80000 	bicsne	r0, r8, r0
     dc4:	11dc0000 	bicsne	r0, ip, r0
     dc8:	00010000 	andeq	r0, r1, r0
     dcc:	0011de53 	andseq	sp, r1, r3, asr lr
     dd0:	0011e200 	andseq	lr, r1, r0, lsl #4
     dd4:	53000100 	movwpl	r0, #256	; 0x100
		for_all_tasks (i) {
     dd8:	000011e2 	andeq	r1, r0, r2, ror #3
	__pi_mintk = znew + min;
     ddc:	000011f0 	strdeq	r1, [r0], -r0
     de0:	00520001 	subseq	r0, r2, r1
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
     df0:	01000000 	mrseq	r0, (UNDEF: 0)
     df4:	00005000 	andeq	r5, r0, r0
	...
     e04:	00010000 	andeq	r0, r1, r0
     e08:	00000051 	andeq	r0, r0, r1, asr r0
	...
     e18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		for_all_tasks (i) {
     e24:	00500001 	subseq	r0, r0, r1
	...
		if ((word)(__pi_mintk - znew) < min) 
     e34:	01000000 	mrseq	r0, (UNDEF: 0)
     e38:	00005300 	andeq	r5, r0, r0, lsl #6
     e3c:	00000000 	andeq	r0, r0, r0
	__pi_old = znew;
     e40:	00010000 	andeq	r0, r1, r0
}
     e44:	00000053 	andeq	r0, r0, r3, asr r0
	...
     e54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void proceed (word state) {
     e60:	00530001 	subseq	r0, r3, r1
	prcdstate (__pi_curr, state);
     e64:	00000000 	andeq	r0, r0, r0
     e68:	01000000 	mrseq	r0, (UNDEF: 0)
	release;
     e6c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	00010000 	andeq	r0, r1, r0
     e80:	00000050 	andeq	r0, r0, r0, asr r0
     e84:	00000000 	andeq	r0, r0, r0
		syserror (ENEVENTS, "sw");
     e88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     e9c:	00500001 	subseq	r0, r0, r1
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	01000000 	mrseq	r0, (UNDEF: 0)
void __pi_trigger (aword event) {
     ea8:	00005300 	andeq	r5, r0, r0, lsl #6
	for_all_tasks (i) {
     eac:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
     eb0:	00010000 	andeq	r0, r1, r0
     eb4:	00000053 	andeq	r0, r0, r3, asr r0
	...
			if (i->Events [j] . Event == event) {
     ec4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				wakeupev (i, j);
     ed0:	00500001 	subseq	r0, r0, r1
	...
	for_all_tasks (i) {
     ee0:	01000000 	mrseq	r0, (UNDEF: 0)
     ee4:	00005300 	andeq	r5, r0, r0, lsl #6
	return 0;
     ee8:	00000000 	andeq	r0, r0, r0
		if ((aword)i == pid) {
     eec:	0d940000 	ldceq	0, cr0, [r4]
			__pi_wait (pid, st);
     ef0:	0d9a0000 	ldceq	0, cr0, [sl]
}
     ef4:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
     ef8:	00000050 	andeq	r0, r0, r0, asr r0
     efc:	00000000 	andeq	r0, r0, r0
void delay (word d, word state) {
     f00:	000d9400 	andeq	r9, sp, r0, lsl #8
	settstate (__pi_curr, state);
     f04:	000d9d00 	andeq	r9, sp, r0, lsl #26
     f08:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	update_n_wake (d, YES);
     f14:	00000da2 	andeq	r0, r0, r2, lsr #27
     f18:	00000de0 	andeq	r0, r0, r0, ror #27
	__pi_curr->Timer = __pi_old + d;
     f1c:	e4540001 	ldrb	r0, [r4], #-1
     f20:	3200000d 	andcc	r0, r0, #13
	inctimer (__pi_curr);
     f24:	0100000e 	tsteq	r0, lr
     f28:	0e345400 	cfabsseq	mvf5, mvf4
     f2c:	0e3e0000 	cdpeq	0, 3, cr0, cr14, cr0, {0}
}
     f30:	00010000 	andeq	r0, r1, r0
     f34:	00000054 	andeq	r0, r0, r4, asr r0
	if (fun == NULL)
     f38:	00000000 	andeq	r0, r0, r0
		return (int) __pi_curr;
     f3c:	000dda00 	andeq	sp, sp, r0, lsl #20
     f40:	000ddc00 	andeq	sp, sp, r0, lsl #24
	for_all_tasks (i)
     f44:	50000100 	andpl	r0, r0, r0, lsl #2
}
     f48:	00000de4 	andeq	r0, r0, r4, ror #27
		if (i->code == fun)
     f4c:	00000e34 	andeq	r0, r0, r4, lsr lr
	for_all_tasks (i)
     f50:	00500001 	subseq	r0, r0, r1
     f54:	00000000 	andeq	r0, r0, r0
     f58:	74000000 	strvc	r0, [r0], #-0
int __pi_strlen (const char *s) {
     f5c:	8800000e 	stmdahi	r0, {r1, r2, r3}
	for (i = 0; *(s+i) != '\0'; i++);
     f60:	0100000e 	tsteq	r0, lr
}
     f64:	0e8e5000 	cdpeq	0, 8, cr5, cr14, cr0, {0}
	for (i = 0; *(s+i) != '\0'; i++);
     f68:	0ea80000 	cdpeq	0, 10, cr0, cr8, cr0, {0}
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	00010000 	andeq	r0, r1, r0
		syserror (EREQPAR, "addv");
     f70:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (ERESOURCE, "addv");
     f74:	00000000 	andeq	r0, r0, r0
	if (ioreq [loc] != NULL)
     f78:	000e7400 	andeq	r7, lr, r0, lsl #8
     f7c:	000e8a00 	andeq	r8, lr, r0, lsl #20
		syserror (ERESOURCE, "addv");
     f80:	51000100 	mrspl	r0, (UNDEF: 16)
	ioreq [loc] = rf;
     f84:	00000e8e 	andeq	r0, r0, lr, lsl #29
}
     f88:	00000e94 	muleq	r0, r4, lr
     f8c:	00510001 	subseq	r0, r1, r1
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	00000000 	andeq	r0, r0, r0
     f94:	86000000 	strhi	r0, [r0], -r0
     f98:	8800000e 	stmdahi	r0, {r1, r2, r3}
     f9c:	0100000e 	tsteq	r0, lr
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     fa0:	00005000 	andeq	r5, r0, r0
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	0e860000 	cdpeq	0, 8, cr0, cr6, cr0, {0}
		syserror (ENODEVICE, "io");
     fac:	0e8a0000 	cdpeq	0, 8, cr0, cr10, cr0, {0}
     fb0:	00010000 	andeq	r0, r1, r0
	if (len == 0)
     fb4:	00000051 	andeq	r0, r0, r1, asr r0
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	00000000 	andeq	r0, r0, r0
     fbc:	00107c00 	andseq	r7, r0, r0, lsl #24
	if (ret >= 0)
     fc0:	00108a00 	andseq	r8, r0, r0, lsl #20
	if (ret == -1) {
     fc4:	50000100 	andpl	r0, r0, r0, lsl #2
     fc8:	00001090 	muleq	r0, r0, r0
		if (retry == WNONE)
     fcc:	000010a3 	andeq	r1, r0, r3, lsr #1
		iowait (dev, operation, retry);
     fd0:	00500001 	subseq	r0, r0, r1
     fd4:	00000000 	andeq	r0, r0, r0
     fd8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
			release;
     fdc:	8a000010 	bhi	1024 <io+0x94>
	if (ret == -2) {
     fe0:	01000010 	tsteq	r0, r0, lsl r0
		if (retry != WNONE) {
     fe4:	00005000 	andeq	r5, r0, r0
	...
			(ioreq [dev]) (NONE, buf, len);
     ff4:	00010000 	andeq	r0, r1, r0
     ff8:	00000050 	andeq	r0, r0, r0, asr r0
     ffc:	00000000 	andeq	r0, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    1000:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		delay (-ret - 2, retry);
    1014:	00550001 	subseq	r0, r5, r1
	...
		release;
    1024:	01000000 	mrseq	r0, (UNDEF: 0)
    1028:	00005400 	andeq	r5, r0, r0, lsl #8
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	00000000 	andeq	r0, r0, r0
    1030:	00010000 	andeq	r0, r1, r0
    1034:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (ERESOURCE, "mal1");
    1044:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1050:	00500001 	subseq	r0, r0, r1
	m_size (mpools [0]) = mlen - m_hdrlen;
    1054:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1058:	02000000 	andeq	r0, r0, #0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105c:	00007500 	andeq	r7, r0, r0, lsl #10
	...
}
    106c:	01000000 	mrseq	r0, (UNDEF: 0)
    1070:	00005000 	andeq	r5, r0, r0
    1074:	00000000 	andeq	r0, r0, r0
    1078:	00010000 	andeq	r0, r1, r0
void __pi_free (aword *ch) {
    107c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (EMALLOC, "malg");
    108c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		m_size (ch) ^= MALLOC_UMASK;
    1098:	00500001 	subseq	r0, r0, r1
	...
	if (mevent [MA_NP] . nwait) {
    10a8:	01000000 	mrseq	r0, (UNDEF: 0)
		trigger ((aword)(&(mevent [MA_NP])));
    10ac:	00005000 	andeq	r5, r0, r0
		mevent [MA_NP] . nwait --;
    10b0:	00000000 	andeq	r0, r0, r0
}
    10b4:	00010000 	andeq	r0, r1, r0
    10b8:	00000050 	andeq	r0, r0, r0, asr r0
	...
		pid = (aword) __pi_curr;
    10c8:	53000100 	movwpl	r0, #256	; 0x100
	...
		if ((aword)i == pid) {
    10dc:	00500001 	subseq	r0, r0, r1
    10e0:	00000000 	andeq	r0, r0, r0
				__PCB = i->Next;
    10e4:	02000000 	andeq	r0, r0, #0
			killev (i);
    10e8:	00007300 	andeq	r7, r0, r0, lsl #6
	...
				release;
    10f8:	01000000 	mrseq	r0, (UNDEF: 0)
				j->Next = i->Next;
    10fc:	00005000 	andeq	r5, r0, r0
    1100:	00000000 	andeq	r0, r0, r0
    1104:	00010000 	andeq	r0, r1, r0
}
    1108:	00000050 	andeq	r0, r0, r0, asr r0
	...
		_size = 2;
    1118:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	00510001 	subseq	r0, r1, r1
	...
			mevent [MA_NP] . nfail ++;
    1134:	01000000 	mrseq	r0, (UNDEF: 0)
		mnfree [MA_NP] = 0;
    1138:	00005300 	andeq	r5, r0, r0, lsl #6
    113c:	00000000 	andeq	r0, r0, r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	00010000 	andeq	r0, r1, r0
    1144:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if (m_size (chunk) >= _size)
    1154:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1160:	00500001 	subseq	r0, r0, r1
    1164:	00000000 	andeq	r0, r0, r0
			m_size (chunk) = _size;
    1168:	02000000 	andeq	r0, r0, #0
			cc = chunk + _size + m_hdrlen;
    116c:	00007300 	andeq	r7, r0, r0, lsl #6
	...
		mevent [MA_NP] . nfail = 0;
    117c:	01000000 	mrseq	r0, (UNDEF: 0)
		mcfree [MA_NP] -= m_size (chunk);
    1180:	00005000 	andeq	r5, r0, r0
    1184:	00000000 	andeq	r0, r0, r0
    1188:	00010000 	andeq	r0, r1, r0
    118c:	00000055 	andeq	r0, r0, r5, asr r0
		m_size (chunk) |= MALLOC_UMASK;
    1190:	00000000 	andeq	r0, r0, r0
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1194:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    11a0:	00550001 	subseq	r0, r5, r1
	...
    11b0:	01000000 	mrseq	r0, (UNDEF: 0)
    11b4:	00005100 	andeq	r5, r0, r0, lsl #2
    11b8:	00000000 	andeq	r0, r0, r0
aword __pi_fork (fsmcode func, aword data) {
    11bc:	00010000 	andeq	r0, r1, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c0:	00000057 	andeq	r0, r0, r7, asr r0
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	i->data = data;
    11d4:	00570001 	subseq	r0, r7, r1
	...
			for (; j->Next != NULL; j = j->Next);
    11e4:	01000000 	mrseq	r0, (UNDEF: 0)
	return (aword) i;
    11e8:	00005200 	andeq	r5, r0, r0, lsl #4
    11ec:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait != 255)
    11f0:	00010000 	andeq	r0, r1, r0
    11f4:	00000054 	andeq	r0, r0, r4, asr r0
    11f8:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait ++;
    11fc:	52000100 	andpl	r0, r0, #0, 2
	...
void diag (const char *mess, ...) {
    1208:	00540001 	subseq	r0, r4, r1
	...
	diag_disable_int (a, is);
    1218:	01000000 	mrseq	r0, (UNDEF: 0)
    121c:	00005000 	andeq	r5, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1220:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    1224:	00010000 	andeq	r0, r1, r0
	while (*mess != '\0') {
    1228:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1238:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    124c:	00500001 	subseq	r0, r0, r1
    1250:	00000000 	andeq	r0, r0, r0
		if (*mess == '%') {
    1254:	01000000 	mrseq	r0, (UNDEF: 0)
    1258:	00005400 	andeq	r5, r0, r0, lsl #8
	...
				val = va_arg (ap, lword);
    1268:	00010000 	andeq	r0, r1, r0
				bc = 32;
    126c:	00000051 	andeq	r0, r0, r1, asr r0
				bc = 16;
    1270:	00000000 	andeq	r0, r0, r0
			switch (*mess) {
    1274:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				dgout (*mess);
    1288:	00520001 	subseq	r0, r2, r1
    128c:	00000000 	andeq	r0, r0, r0
			switch (*mess) {
    1290:	01000000 	mrseq	r0, (UNDEF: 0)
					v = __pi_hex_enc_table [
    1294:	00005200 	andeq	r5, r0, r0, lsl #4
	...
					dgout (v);
    12a4:	00010000 	andeq	r0, r1, r0
    12a8:	00000050 	andeq	r0, r0, r0, asr r0
				while (i < bc) {
    12ac:	00000000 	andeq	r0, r0, r0
			mess++;
    12b0:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
					d /= 10;
    12b4:	72243200 	eorvc	r3, r4, #0, 4
				if ((val >> (bc - 1)) & 1) {
    12b8:	00002200 	andeq	r2, r0, r0, lsl #4
    12bc:	00000000 	andeq	r0, r0, r0
					dgout ('-');
    12c0:	00010000 	andeq	r0, r1, r0
    12c4:	00000050 	andeq	r0, r0, r0, asr r0
	...
				d = (bc == 16) ? 10000 : 1000000000;
    12d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					if (v || d == 1) break;
    12e8:	00510001 	subseq	r0, r1, r1
	...
					dgout (v + '0');
    12f8:	01000000 	mrseq	r0, (UNDEF: 0)
    12fc:	00005000 	andeq	r5, r0, r0
					d /= 10;
    1300:	00000000 	andeq	r0, r0, r0
					val = val - (v * d);
    1304:	00010000 	andeq	r0, r1, r0
					if (d == 0) break;
    1308:	00000055 	andeq	r0, r0, r5, asr r0
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1318:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					s++;
    1324:	00560001 	subseq	r0, r6, r1
	...
			dgout (*mess++);
    1334:	01000000 	mrseq	r0, (UNDEF: 0)
    1338:	00005000 	andeq	r5, r0, r0
    133c:	00000000 	andeq	r0, r0, r0
    1340:	00010000 	andeq	r0, r1, r0
}
    1344:	00000054 	andeq	r0, r0, r4, asr r0
	...
    pui32Src = &_etext;
    1354:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    1360:	00500001 	subseq	r0, r0, r1
	...
   main();
    1370:	01000000 	mrseq	r0, (UNDEF: 0)
    FaultISR();
    1374:	00005100 	andeq	r5, r0, r0, lsl #2
        *pui32Dest++ = *pui32Src++;
    1378:	00000000 	andeq	r0, r0, r0
    137c:	00010000 	andeq	r0, r1, r0
    1380:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1390:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    139c:	00500001 	subseq	r0, r0, r1
	...
		if (ee_inp)
    13ac:	01000000 	mrseq	r0, (UNDEF: 0)
			b |= 1;
    13b0:	00005100 	andeq	r5, r0, r0, lsl #2
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	00010000 	andeq	r0, r1, r0
	for (b = 0, i = 0; i < 8; i++) {
    13bc:	00000051 	andeq	r0, r0, r1, asr r0
	...
static void put_byte (byte b) {
    13cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    13d8:	00500001 	subseq	r0, r0, r1
		if (b & 0x80)
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13e4:	00005000 	andeq	r5, r0, r0
	for (i = 0; i < 8; i++) {
    13e8:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    13ec:	00010000 	andeq	r0, r1, r0
	for (i = 0; i < 8; i++) {
    13f0:	00000050 	andeq	r0, r0, r0, asr r0
}
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    140c:	00510001 	subseq	r0, r1, r1
    1410:	00000000 	andeq	r0, r0, r0
static void wwait (word st, word del) {
    1414:	01000000 	mrseq	r0, (UNDEF: 0)
    1418:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    141c:	00000000 	andeq	r0, r0, r0
	while (dopen && (rdsr () & 1)) {
    1420:	00010000 	andeq	r0, r1, r0
    1424:	00000051 	andeq	r0, r0, r1, asr r0
	...
	r = get_byte ();
    1434:	52000100 	andpl	r0, r0, #0, 2
	...
}
    1440:	00520001 	subseq	r0, r2, r1
		if (st == WNONE)
    1444:	00000000 	andeq	r0, r0, r0
    1448:	01000000 	mrseq	r0, (UNDEF: 0)
			mdelay (1);
    144c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
			release;
    145c:	00010000 	andeq	r0, r1, r0
    1460:	00000050 	andeq	r0, r0, r0, asr r0
	...
		wwait (WNONE, 1);
    1470:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	dstat = 0;
    147c:	00500001 	subseq	r0, r0, r1
	...
	udelay (1);
    148c:	01000000 	mrseq	r0, (UNDEF: 0)
    1490:	00005000 	andeq	r5, r0, r0
	udelay (1);
    1494:	00000000 	andeq	r0, r0, r0
		dopen = DOPEN_TEMP;
    1498:	00010000 	andeq	r0, r1, r0
    149c:	00000054 	andeq	r0, r0, r4, asr r0
	...
	if (dopen == DOPEN_TEMP) {
    14ac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	cmd_0 (CMD_DP);
    14c0:	00520001 	subseq	r0, r2, r1
		dopen = 0;
    14c4:	00000000 	andeq	r0, r0, r0
}
    14c8:	01000000 	mrseq	r0, (UNDEF: 0)
word ee_open () {
    14cc:	00005500 	andeq	r5, r0, r0, lsl #10
	...
}
    14dc:	00010000 	andeq	r0, r1, r0
	if (dopen) {
    14e0:	00000050 	andeq	r0, r0, r0, asr r0
    14e4:	00000000 	andeq	r0, r0, r0
		dopen = DOPEN_TEMP;
    14e8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if ((prcs = running (__outserial)) != 0) {
    14fc:	00510001 	subseq	r0, r1, r1
    1500:	00000000 	andeq	r0, r0, r0
		join (prcs, st);
    1504:	01000000 	mrseq	r0, (UNDEF: 0)
    1508:	00005000 	andeq	r5, r0, r0
	...
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1518:	00010000 	andeq	r0, r1, r0
		umwait (st);
    151c:	00000052 	andeq	r0, r0, r2, asr r0
    1520:	00000000 	andeq	r0, r0, r0
	if (runstrand (__outserial, buf) == 0) {
    1524:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
}
    1538:	00500001 	subseq	r0, r0, r1
    153c:	00000000 	andeq	r0, r0, r0
    1540:	01000000 	mrseq	r0, (UNDEF: 0)
    1544:	00005000 	andeq	r5, r0, r0
	...
	if (__inpline == NULL) {
    1554:	00010000 	andeq	r0, r1, r0
		if ((prcs = running (__inserial)) == 0) {
    1558:	00000051 	andeq	r0, r0, r1, asr r0
    155c:	00000000 	andeq	r0, r0, r0
			prcs = runthread (__inserial);
    1560:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				npwait (st);
    156c:	00510001 	subseq	r0, r1, r1
	...
	va_start (ap, fmt);
    157c:	01000000 	mrseq	r0, (UNDEF: 0)
	prcs = vscan (__inpline, fmt, ap);
    1580:	00005200 	andeq	r5, r0, r0, lsl #4
    1584:	00000000 	andeq	r0, r0, r0
	ufree (__inpline);
    1588:	00010000 	andeq	r0, r1, r0
	__inpline = NULL;
    158c:	00000054 	andeq	r0, r0, r4, asr r0
}
    1590:	00000000 	andeq	r0, r0, r0
    1594:	52000100 	andpl	r0, r0, #0, 2
	...
		return 0;
    15a0:	00540001 	subseq	r0, r4, r1
    15a4:	00000000 	andeq	r0, r0, r0
void RFCCPE0IntHandler (void) {
    15a8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    15ac:	00005400 	andeq	r5, r0, r0, lsl #8
		_BIS (dstate, DSTATE_IRST);
    15b0:	00000000 	andeq	r0, r0, r0
    15b4:	00010000 	andeq	r0, r1, r0
    15b8:	00000054 	andeq	r0, r0, r4, asr r0
	...
	p_trigger (drvprcs, qevent);
    15c8:	53000100 	movwpl	r0, #256	; 0x100
	...
    15dc:	00500001 	subseq	r0, r0, r1
    15e0:	00000000 	andeq	r0, r0, r0
    15e4:	01000000 	mrseq	r0, (UNDEF: 0)
    15e8:	00005000 	andeq	r5, r0, r0
	...
	RISE_N_SHINE;
    15f8:	00010000 	andeq	r0, r1, r0
    15fc:	00000050 	andeq	r0, r0, r0, asr r0
}
    1600:	00000000 	andeq	r0, r0, r0
    1604:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1610:	00500001 	subseq	r0, r0, r1
	...
strand (__outserial, const char*)
    1620:	01000000 	mrseq	r0, (UNDEF: 0)
    1624:	00005000 	andeq	r5, r0, r0
endstrand
    1628:	00000000 	andeq	r0, r0, r0
    162c:	00010000 	andeq	r0, r1, r0
	ptr = data;
    1630:	00000050 	andeq	r0, r0, r0, asr r0
    1634:	00000000 	andeq	r0, r0, r0
	if (*ptr)
    1638:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1644:	00500001 	subseq	r0, r0, r1
	...
    1654:	01000000 	mrseq	r0, (UNDEF: 0)
	len -= quant;
    1658:	00005100 	andeq	r5, r0, r0, lsl #2
    165c:	00000000 	andeq	r0, r0, r0
    1660:	00010000 	andeq	r0, r1, r0
	if (len == 0) {
    1664:	00000051 	andeq	r0, r0, r1, asr r0
		ufree (data);
    1668:	00000000 	andeq	r0, r0, r0
		finish;
    166c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1678:	00510001 	subseq	r0, r1, r1
	...
strand (__inserial, address)
    1688:	01000000 	mrseq	r0, (UNDEF: 0)
    168c:	00005400 	andeq	r5, r0, r0, lsl #8
    1690:	00000000 	andeq	r0, r0, r0
    1694:	000a0000 	andeq	r0, sl, r0
    1698:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	if (__inpline != NULL)
    169c:	00000003 	andeq	r0, r0, r3
    16a0:	00002200 	andeq	r2, r0, r0, lsl #4
		finish;
    16a4:	00000000 	andeq	r0, r0, r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    16a8:	00010000 	andeq	r0, r1, r0
    16ac:	00000054 	andeq	r0, r0, r4, asr r0
    16b0:	00000000 	andeq	r0, r0, r0
    16b4:	70000a00 	andvc	r0, r0, r0, lsl #20
		umwait (IM_INIT);
    16b8:	03243200 			; <UNDEFINED> instruction: 0x03243200
		release;
    16bc:	00000000 	andeq	r0, r0, r0
	savedata (data);
    16c0:	00000022 	andeq	r0, r0, r2, lsr #32
	len = MAX_LINE_LENGTH;
    16c4:	00000000 	andeq	r0, r0, r0
	io (IM_READ, __cport, READ, ptr, 1);
    16c8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    16d4:	0070000a 	rsbseq	r0, r0, sl
	if (ptr == (char*) data) { // new line
    16d8:	00032432 	andeq	r2, r3, r2, lsr r4
    16dc:	22000000 	andcs	r0, r0, #0
	...
		if (*ptr < 0x20)
    16f0:	00550001 	subseq	r0, r5, r1
			proceed (IM_READ);
    16f4:	00000000 	andeq	r0, r0, r0
    16f8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (*ptr == '\n' || *ptr == '\r') {
    16fc:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		__inpline = (char*)data;
    170c:	00010000 	andeq	r0, r1, r0
		finish;
    1710:	00000054 	andeq	r0, r0, r4, asr r0
	if (len) {
    1714:	00000000 	andeq	r0, r0, r0
		ptr++;
    1718:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	io (IM_BIN, __cport, READ, ptr, 1);
    172c:	00500001 	subseq	r0, r0, r1
    1730:	00000000 	andeq	r0, r0, r0
    1734:	01000000 	mrseq	r0, (UNDEF: 0)
    1738:	00005000 	andeq	r5, r0, r0
	len -= 2;
    173c:	00000000 	andeq	r0, r0, r0
	if (len > *ptr + 1) // 1 for 0x04
    1740:	00010000 	andeq	r0, r1, r0
    1744:	00000050 	andeq	r0, r0, r0, asr r0
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1754:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1768:	00500001 	subseq	r0, r0, r1
	...
	ptr += quant;
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	00005000 	andeq	r5, r0, r0
endstrand
    1780:	00000000 	andeq	r0, r0, r0
    1784:	00010000 	andeq	r0, r1, r0
	proceed (IM_BINL);
    1788:	00000050 	andeq	r0, r0, r0, asr r0
endstrand
    178c:	00000000 	andeq	r0, r0, r0
    1790:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    179c:	00500001 	subseq	r0, r0, r1
	...
		if (res && (d < n))
    17ac:	01000000 	mrseq	r0, (UNDEF: 0)
    17b0:	00005100 	andeq	r5, r0, r0, lsl #2
			res [d] = (char) c;
    17b4:	00000000 	andeq	r0, r0, r0
		d++;
    17b8:	00010000 	andeq	r0, r1, r0
    17bc:	00000051 	andeq	r0, r0, r1, asr r0
    17c0:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    17d8:	00530001 	subseq	r0, r3, r1
	d = 0;
    17dc:	00000000 	andeq	r0, r0, r0
		c = *fm++;
    17e0:	0a000000 	beq	17e8 <__pi_vfparse+0x24>
		if (c == '\\') {
    17e4:	32007000 	andcc	r7, r0, #0
			if ((c = *fm++) == '\0') {
    17e8:	00000324 	andeq	r0, r0, r4, lsr #6
    17ec:	00220000 	eoreq	r0, r2, r0
				outc ('\\');
    17f0:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    17f4:	01000000 	mrseq	r0, (UNDEF: 0)
				outc ('\\');
    17f8:	00005300 	andeq	r5, r0, r0, lsl #6
    17fc:	00000000 	andeq	r0, r0, r0
			outc (c);
    1800:	000a0000 	andeq	r0, sl, r0
    1804:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
			if (c == '\0')
    1808:	00000003 	andeq	r0, r0, r3
    180c:	00002200 	andeq	r2, r0, r0, lsl #4
			outc (c);
    1810:	00000000 	andeq	r0, r0, r0
				outc (val);
    1814:	00010000 	andeq	r0, r1, r0
				val = (word) va_arg (ap, aword);
    1818:	00000053 	andeq	r0, r0, r3, asr r0
		if (c == '%') {
    181c:	00000000 	andeq	r0, r0, r0
    1820:	70000a00 	andvc	r0, r0, r0, lsl #20
			c = *fm++;
    1824:	03243200 			; <UNDEFINED> instruction: 0x03243200
			switch (c) {
    1828:	00000000 	andeq	r0, r0, r0
    182c:	00000022 	andeq	r0, r0, r2, lsr #32
	...
    183c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				outc ('%');
    1848:	00500001 	subseq	r0, r0, r1
	...
				outc (c);
    1858:	01000000 	mrseq	r0, (UNDEF: 0)
				if (c == '\0')
    185c:	00005300 	andeq	r5, r0, r0, lsl #6
				return d;
    1860:	00000000 	andeq	r0, r0, r0
}
    1864:	00010000 	andeq	r0, r1, r0
    1868:	00000053 	andeq	r0, r0, r3, asr r0
			switch (c) {
    186c:	00000000 	andeq	r0, r0, r0
    1870:	53000100 	movwpl	r0, #256	; 0x100
	...
						[ (val >> i) & 0xf ]);
    1884:	00520001 	subseq	r0, r2, r1
    1888:	00000000 	andeq	r0, r0, r0
					outc (__pi_hex_enc_table
    188c:	01000000 	mrseq	r0, (UNDEF: 0)
    1890:	00005200 	andeq	r5, r0, r0, lsl #4
					if (i == 0)
    1894:	00000000 	andeq	r0, r0, r0
    1898:	00010000 	andeq	r0, r1, r0
				for (i = 12; ; i -= 4) {
    189c:	00000052 	andeq	r0, r0, r2, asr r0
				val = (word) va_arg (ap, aword);
    18a0:	00000000 	andeq	r0, r0, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    18a4:	52000100 	andpl	r0, r0, #0, 2
	...
					outc ('-');
    18b8:	00500001 	subseq	r0, r0, r1
	...
				enci (10000);
    18c8:	01000000 	mrseq	r0, (UNDEF: 0)
    18cc:	00005100 	andeq	r5, r0, r0, lsl #2
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	00010000 	andeq	r0, r1, r0
    18d8:	00000051 	andeq	r0, r0, r1, asr r0
    18dc:	00000000 	andeq	r0, r0, r0
    18e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    18ec:	00510001 	subseq	r0, r1, r1
    18f0:	00000000 	andeq	r0, r0, r0
    18f4:	01000000 	mrseq	r0, (UNDEF: 0)
    18f8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1908:	00010000 	andeq	r0, r1, r0
    190c:	00000055 	andeq	r0, r0, r5, asr r0
	...
					val = va_arg (ap, lword);
    191c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					if (c == 'd' &&
    1928:	00500001 	subseq	r0, r0, r1
						outc ('-');
    192c:	00000000 	andeq	r0, r0, r0
    1930:	01000000 	mrseq	r0, (UNDEF: 0)
						val = (~val) + 1;
    1934:	00005400 	andeq	r5, r0, r0, lsl #8
	...
					enci (1000000000UL);
    1944:	00010000 	andeq	r0, r1, r0
    1948:	00000050 	andeq	r0, r0, r0, asr r0
    194c:	00000000 	andeq	r0, r0, r0
    1950:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    195c:	00710007 	rsbseq	r0, r1, r7
    1960:	00722432 	rsbseq	r2, r2, r2, lsr r4
    1964:	00000022 	andeq	r0, r0, r2, lsr #32
    1968:	00000000 	andeq	r0, r0, r0
    196c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				} else if (c == 'x') {
    1980:	00500001 	subseq	r0, r0, r1
					for (i = 28; ; i -= 4) {
    1984:	00000000 	andeq	r0, r0, r0
					val = va_arg (ap, lword);
    1988:	01000000 	mrseq	r0, (UNDEF: 0)
							[ (val >> i) & 0xf ]);
    198c:	00005000 	andeq	r5, r0, r0
	...
						outc (__pi_hex_enc_table
    199c:	00010000 	andeq	r0, r1, r0
						if (i == 0)
    19a0:	00000050 	andeq	r0, r0, r0, asr r0
    19a4:	00000000 	andeq	r0, r0, r0
					for (i = 28; ; i -= 4) {
    19a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					outc ('l');
    19bc:	00510001 	subseq	r0, r1, r1
				val = (word) va_arg (ap, aword);
    19c0:	00000000 	andeq	r0, r0, r0
				outc (val);
    19c4:	01000000 	mrseq	r0, (UNDEF: 0)
    19c8:	00005500 	andeq	r5, r0, r0, lsl #10
				while (*st != '\0') {
    19cc:	00000000 	andeq	r0, r0, r0
    19d0:	00010000 	andeq	r0, r1, r0
    19d4:	00000051 	andeq	r0, r0, r1, asr r0
    19d8:	00000000 	andeq	r0, r0, r0
					outc (*st);
    19dc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		c = *fm++;
    19e8:	00510001 	subseq	r0, r1, r1
    19ec:	00000000 	andeq	r0, r0, r0
    19f0:	01000000 	mrseq	r0, (UNDEF: 0)
char *vform (char *res, const char *fm, va_list aq) {
    19f4:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1a04:	00010000 	andeq	r0, r1, r0
    1a08:	00000056 	andeq	r0, r0, r6, asr r0
	...
	fml = strlen (fm) + 17;
    1a18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1a2c:	00500001 	subseq	r0, r0, r1
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	01000000 	mrseq	r0, (UNDEF: 0)
    1a38:	00005000 	andeq	r5, r0, r0
		ufree (res);
    1a3c:	00000000 	andeq	r0, r0, r0
		goto Again;
    1a40:	00010000 	andeq	r0, r1, r0
	if (buf == NULL || fmt == NULL)
    1a44:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1a54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			while (isspace (*buf)) buf++;
    1a60:	00570001 	subseq	r0, r7, r1
	while (*fmt != '\0') {
    1a64:	00000000 	andeq	r0, r0, r0
		if (*fmt++ != '%')
    1a68:	01000000 	mrseq	r0, (UNDEF: 0)
		switch (*fmt++) {
    1a6c:	00005100 	andeq	r5, r0, r0, lsl #2
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	00010000 	andeq	r0, r1, r0
    1a78:	00000057 	andeq	r0, r0, r7, asr r0
    1a7c:	00000000 	andeq	r0, r0, r0
    1a80:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1a8c:	00510001 	subseq	r0, r1, r1
    1a90:	00000000 	andeq	r0, r0, r0
    1a94:	01000000 	mrseq	r0, (UNDEF: 0)
    1a98:	00005700 	andeq	r5, r0, r0, lsl #14
	...
			while (isspace (*buf)) buf++;
    1aa8:	00020000 	andeq	r0, r2, r0
    1aac:	00007891 	muleq	r0, r1, r8
    1ab0:	00000000 	andeq	r0, r0, r0
			if (*buf == '\0')
    1ab4:	00020000 	andeq	r0, r2, r0
			if (*buf != ',') {
    1ab8:	00007891 	muleq	r0, r1, r8
			sap = va_arg (ap, char*);
    1abc:	00000000 	andeq	r0, r0, r0
			nc++;
    1ac0:	00020000 	andeq	r0, r2, r0
			if (*buf != ',') {
    1ac4:	00007891 	muleq	r0, r1, r8
				while (!isspace (*buf) && *buf != ',' &&
    1ac8:	00000000 	andeq	r0, r0, r0
    1acc:	00020000 	andeq	r0, r2, r0
    1ad0:	00007891 	muleq	r0, r1, r8
	...
    1ae0:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    1ae4:	00000056 	andeq	r0, r0, r6, asr r0
    1ae8:	00000000 	andeq	r0, r0, r0
    1aec:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			*sap = '\0';
    1b00:	00500001 	subseq	r0, r0, r1
			break;
    1b04:	00000000 	andeq	r0, r0, r0
		    case 'd': scani (word); break;
    1b08:	01000000 	mrseq	r0, (UNDEF: 0)
    1b0c:	00005400 	andeq	r5, r0, r0, lsl #8
    1b10:	00000000 	andeq	r0, r0, r0
    1b14:	00010000 	andeq	r0, r1, r0
    1b18:	00000050 	andeq	r0, r0, r0, asr r0
    1b1c:	00000000 	andeq	r0, r0, r0
    1b20:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1b2c:	00500001 	subseq	r0, r0, r1
    1b30:	00000000 	andeq	r0, r0, r0
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1b48:	00010000 	andeq	r0, r1, r0
    1b4c:	00000050 	andeq	r0, r0, r0, asr r0
    1b50:	00000000 	andeq	r0, r0, r0
    1b54:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1b60:	00500001 	subseq	r0, r0, r1
	...
    1b70:	01000000 	mrseq	r0, (UNDEF: 0)
    1b74:	00005400 	andeq	r5, r0, r0, lsl #8
		    case 'u': scanu (word); break;
    1b78:	00000000 	andeq	r0, r0, r0
    1b7c:	00010000 	andeq	r0, r1, r0
    1b80:	00000050 	andeq	r0, r0, r0, asr r0
    1b84:	00000000 	andeq	r0, r0, r0
    1b88:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1b94:	00500001 	subseq	r0, r0, r1
	...
    1ba4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ba8:	00005000 	andeq	r5, r0, r0
	...
    1bb8:	00010000 	andeq	r0, r1, r0
    1bbc:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    case 'x': scanx (word); break;
    1bcc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1be0:	00500001 	subseq	r0, r0, r1
    1be4:	00000000 	andeq	r0, r0, r0
    1be8:	01000000 	mrseq	r0, (UNDEF: 0)
    1bec:	00005500 	andeq	r5, r0, r0, lsl #10
    1bf0:	00000000 	andeq	r0, r0, r0
    1bf4:	00010000 	andeq	r0, r1, r0
    1bf8:	00000050 	andeq	r0, r0, r0, asr r0
    1bfc:	00000000 	andeq	r0, r0, r0
    1c00:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1c14:	00510001 	subseq	r0, r1, r1
    1c18:	00000000 	andeq	r0, r0, r0
    1c1c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c20:	00005400 	andeq	r5, r0, r0, lsl #8
    1c24:	00000000 	andeq	r0, r0, r0
    1c28:	00010000 	andeq	r0, r1, r0
    1c2c:	00000051 	andeq	r0, r0, r1, asr r0
    1c30:	00000000 	andeq	r0, r0, r0
    1c34:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			switch (*fmt++) {
    1c48:	00500001 	subseq	r0, r0, r1
    1c4c:	00000000 	andeq	r0, r0, r0
		    	    case 'd': scani (lword); break;
    1c50:	01000000 	mrseq	r0, (UNDEF: 0)
    1c54:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1c64:	00010000 	andeq	r0, r1, r0
    1c68:	00000051 	andeq	r0, r0, r1, asr r0
    1c6c:	00000000 	andeq	r0, r0, r0
    1c70:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1c84:	00500001 	subseq	r0, r0, r1
    1c88:	00000000 	andeq	r0, r0, r0
    1c8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c90:	00005400 	andeq	r5, r0, r0, lsl #8
    1c94:	00000000 	andeq	r0, r0, r0
    1c98:	00010000 	andeq	r0, r1, r0
    1c9c:	00000051 	andeq	r0, r0, r1, asr r0
    1ca0:	00000000 	andeq	r0, r0, r0
    1ca4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    	    case 'x': scanx (lword); break;
    1cb0:	00540001 	subseq	r0, r4, r1
    1cb4:	00000000 	andeq	r0, r0, r0
    1cb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cbc:	00005000 	andeq	r5, r0, r0
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	00010000 	andeq	r0, r1, r0
    1cc8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1cd8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1cec:	00500001 	subseq	r0, r0, r1
    1cf0:	00000000 	andeq	r0, r0, r0
    1cf4:	01000000 	mrseq	r0, (UNDEF: 0)
    1cf8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1d08:	00010000 	andeq	r0, r1, r0
    1d0c:	00000050 	andeq	r0, r0, r0, asr r0
    1d10:	00000000 	andeq	r0, r0, r0
    1d14:	53000100 	movwpl	r0, #256	; 0x100
	...
		    	    case 'd': scani (lword); break;
    1d28:	00510001 	subseq	r0, r1, r1
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	01000000 	mrseq	r0, (UNDEF: 0)
    1d34:	00005000 	andeq	r5, r0, r0
		    	    case 'u': scanu (lword); break;
    1d38:	00000000 	andeq	r0, r0, r0
    1d3c:	00010000 	andeq	r0, r1, r0
    1d40:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1d50:	52000100 	andpl	r0, r0, #0, 2
	...
    1d5c:	00510001 	subseq	r0, r1, r1
    1d60:	00000000 	andeq	r0, r0, r0
    1d64:	01000000 	mrseq	r0, (UNDEF: 0)
    1d68:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1d78:	00010000 	andeq	r0, r1, r0
    1d7c:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if ((c = *buf++) == '\0')
    1d8c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			while (isspace (*buf)) buf++;
    1da0:	00500001 	subseq	r0, r0, r1
	...
			while (isspace (*buf)) buf++;
    1db0:	01000000 	mrseq	r0, (UNDEF: 0)
    1db4:	00005100 	andeq	r5, r0, r0, lsl #2
    1db8:	00000000 	andeq	r0, r0, r0
		return 0;
    1dbc:	00010000 	andeq	r0, r1, r0
    1dc0:	00000056 	andeq	r0, r0, r6, asr r0
		    case 'x': scanx (word); break;
    1dc4:	00000000 	andeq	r0, r0, r0
    1dc8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1dd4:	00560001 	subseq	r0, r6, r1
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	01000000 	mrseq	r0, (UNDEF: 0)
    1de0:	00005100 	andeq	r5, r0, r0, lsl #2
    1de4:	00000000 	andeq	r0, r0, r0
    1de8:	00010000 	andeq	r0, r1, r0
    1dec:	00000056 	andeq	r0, r0, r6, asr r0
    1df0:	00000000 	andeq	r0, r0, r0
    1df4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e00:	00560001 	subseq	r0, r6, r1
	...
    1e10:	01000000 	mrseq	r0, (UNDEF: 0)
    1e14:	00005200 	andeq	r5, r0, r0, lsl #4
    1e18:	00000000 	andeq	r0, r0, r0
    1e1c:	00010000 	andeq	r0, r1, r0
    1e20:	00000055 	andeq	r0, r0, r5, asr r0
    1e24:	00000000 	andeq	r0, r0, r0
    1e28:	52000100 	andpl	r0, r0, #0, 2
	...
    1e34:	00550001 	subseq	r0, r5, r1
    1e38:	00000000 	andeq	r0, r0, r0
    1e3c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e40:	00005200 	andeq	r5, r0, r0, lsl #4
    1e44:	00000000 	andeq	r0, r0, r0
    1e48:	00010000 	andeq	r0, r1, r0
    1e4c:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1e5c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1e68:	00500001 	subseq	r0, r0, r1
    1e6c:	00000000 	andeq	r0, r0, r0
    1e70:	01000000 	mrseq	r0, (UNDEF: 0)
    1e74:	00005400 	andeq	r5, r0, r0, lsl #8
    1e78:	00000000 	andeq	r0, r0, r0
    1e7c:	00010000 	andeq	r0, r1, r0
    1e80:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1e90:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e9c:	00001358 	andeq	r1, r0, r8, asr r3
    1ea0:	00001371 	andeq	r1, r0, r1, ror r3
    1ea4:	7c520001 	mrrcvc	0, 0, r0, r2, cr1
    1ea8:	90000013 	andls	r0, r0, r3, lsl r0
    1eac:	01000013 	tsteq	r0, r3, lsl r0
    1eb0:	00005200 	andeq	r5, r0, r0, lsl #4
    1eb4:	00000000 	andeq	r0, r0, r0
    1eb8:	13580000 	cmpne	r8, #0
    1ebc:	13710000 	cmnne	r1, #0
    1ec0:	00010000 	andeq	r0, r1, r0
    1ec4:	00138053 	andseq	r8, r3, r3, asr r0
    1ec8:	00139000 	andseq	r9, r3, r0
    1ecc:	53000100 	movwpl	r0, #256	; 0x100
	...
    1ee0:	00500001 	subseq	r0, r0, r1
    1ee4:	00000000 	andeq	r0, r0, r0
    1ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eec:	00005000 	andeq	r5, r0, r0
	...
    1efc:	00010000 	andeq	r0, r1, r0
    1f00:	00000051 	andeq	r0, r0, r1, asr r0
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1f1c:	00520001 	subseq	r0, r2, r1
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	01000000 	mrseq	r0, (UNDEF: 0)
    1f28:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    1f38:	00010000 	andeq	r0, r1, r0
    1f3c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1f4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f60:	00500001 	subseq	r0, r0, r1
    1f64:	00000000 	andeq	r0, r0, r0
    1f68:	05000000 	streq	r0, [r0, #-0]
    1f6c:	00000300 	andeq	r0, r0, r0, lsl #6
	...
    1f78:	00010000 	andeq	r0, r1, r0
    1f7c:	00000050 	andeq	r0, r0, r0, asr r0
    1f80:	00000000 	andeq	r0, r0, r0
    1f84:	03000500 	movweq	r0, #1280	; 0x500
	...
    1f9c:	00500001 	subseq	r0, r0, r1
    1fa0:	00000000 	andeq	r0, r0, r0
    1fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fa8:	00005000 	andeq	r5, r0, r0
    1fac:	00000000 	andeq	r0, r0, r0
    1fb0:	00010000 	andeq	r0, r1, r0
    1fb4:	00000050 	andeq	r0, r0, r0, asr r0
    1fb8:	00000000 	andeq	r0, r0, r0
    1fbc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1fd0:	00500001 	subseq	r0, r0, r1
	...
    1fe0:	01000000 	mrseq	r0, (UNDEF: 0)
    1fe4:	00005000 	andeq	r5, r0, r0
	...
    1ff4:	00010000 	andeq	r0, r1, r0
    1ff8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2008:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2014:	00560001 	subseq	r0, r6, r1
	...
    2024:	01000000 	mrseq	r0, (UNDEF: 0)
    2028:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    2038:	00010000 	andeq	r0, r1, r0
    203c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    204c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2058:	00540001 	subseq	r0, r4, r1
    205c:	00000000 	andeq	r0, r0, r0
    2060:	01000000 	mrseq	r0, (UNDEF: 0)
    2064:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2074:	00010000 	andeq	r0, r1, r0
    2078:	00000050 	andeq	r0, r0, r0, asr r0
    207c:	00000000 	andeq	r0, r0, r0
    2080:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2094:	00510001 	subseq	r0, r1, r1
    2098:	00000000 	andeq	r0, r0, r0
    209c:	01000000 	mrseq	r0, (UNDEF: 0)
    20a0:	00005600 	andeq	r5, r0, r0, lsl #12
    20a4:	00000000 	andeq	r0, r0, r0
    20a8:	00010000 	andeq	r0, r1, r0
    20ac:	00000051 	andeq	r0, r0, r1, asr r0
	...
    20bc:	52000100 	andpl	r0, r0, #0, 2
	...
    20c8:	00540001 	subseq	r0, r4, r1
	...
    20d8:	01000000 	mrseq	r0, (UNDEF: 0)
    20dc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    20ec:	00010000 	andeq	r0, r1, r0
    20f0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2100:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    210c:	00550001 	subseq	r0, r5, r1
    2110:	00000000 	andeq	r0, r0, r0
    2114:	01000000 	mrseq	r0, (UNDEF: 0)
    2118:	00005000 	andeq	r5, r0, r0
	...
    2128:	00010000 	andeq	r0, r1, r0
    212c:	00000051 	andeq	r0, r0, r1, asr r0
    2130:	00000000 	andeq	r0, r0, r0
    2134:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2140:	00560001 	subseq	r0, r6, r1
    2144:	00000000 	andeq	r0, r0, r0
    2148:	01000000 	mrseq	r0, (UNDEF: 0)
    214c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    215c:	00010000 	andeq	r0, r1, r0
    2160:	00000052 	andeq	r0, r0, r2, asr r0
    2164:	00000000 	andeq	r0, r0, r0
    2168:	52000100 	andpl	r0, r0, #0, 2
	...
    2174:	00001414 	andeq	r1, r0, r4, lsl r4
    2178:	00001424 	andeq	r1, r0, r4, lsr #8
    217c:	00500001 	subseq	r0, r0, r1
    2180:	00000000 	andeq	r0, r0, r0
    2184:	14000000 	strne	r0, [r0], #-0
    2188:	24000014 	strcs	r0, [r0], #-20	; 0xffffffec
    218c:	01000014 	tsteq	r0, r4, lsl r0
    2190:	00005100 	andeq	r5, r0, r0, lsl #2
    2194:	00000000 	andeq	r0, r0, r0
    2198:	14360000 	ldrtne	r0, [r6], #-0
    219c:	143a0000 	ldrtne	r0, [sl], #-0
    21a0:	00010000 	andeq	r0, r1, r0
    21a4:	00000050 	andeq	r0, r0, r0, asr r0
    21a8:	00000000 	andeq	r0, r0, r0
    21ac:	0013fc00 	andseq	pc, r3, r0, lsl #24
    21b0:	00140700 	andseq	r0, r4, r0, lsl #14
    21b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21c0:	000013cc 	andeq	r1, r0, ip, asr #7
    21c4:	000013e8 	andeq	r1, r0, r8, ror #7
    21c8:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    21cc:	fc000013 	stc2	0, cr0, [r0], {19}
    21d0:	01000013 	tsteq	r0, r3, lsl r0
    21d4:	00005000 	andeq	r5, r0, r0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	13a80000 			; <UNDEFINED> instruction: 0x13a80000
    21e0:	13ac0000 			; <UNDEFINED> instruction: 0x13ac0000
    21e4:	00010000 	andeq	r0, r1, r0
    21e8:	0013b050 	andseq	fp, r3, r0, asr r0
    21ec:	0013cc00 	andseq	ip, r3, r0, lsl #24
    21f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21fc:	000014f4 	strdeq	r1, [r0], -r4
    2200:	000014fc 	strdeq	r1, [r0], -ip
    2204:	00500001 	subseq	r0, r0, r1
	...
    2210:	09000015 	stmdbeq	r0, {r0, r2, r4}
    2214:	01000015 	tsteq	r0, r5, lsl r0
    2218:	15095000 	strne	r5, [r9, #-0]
    221c:	150e0000 	strne	r0, [lr, #-0]
    2220:	00010000 	andeq	r0, r1, r0
    2224:	00150e56 	andseq	r0, r5, r6, asr lr
    2228:	00151700 	andseq	r1, r5, r0, lsl #14
    222c:	50000100 	andpl	r0, r0, r0, lsl #2
    2230:	00001517 	andeq	r1, r0, r7, lsl r5
    2234:	0000153e 	andeq	r1, r0, lr, lsr r5
    2238:	3e560001 	cdpcc	0, 5, cr0, cr6, cr1, {0}
    223c:	48000015 	stmdami	r0, {r0, r2, r4}
    2240:	01000015 	tsteq	r0, r5, lsl r0
    2244:	00005000 	andeq	r5, r0, r0
    2248:	00000000 	andeq	r0, r0, r0
    224c:	15180000 	ldrne	r0, [r8, #-0]
    2250:	151c0000 	ldrne	r0, [ip, #-0]
    2254:	00010000 	andeq	r0, r1, r0
    2258:	00151c50 	andseq	r1, r5, r0, asr ip
    225c:	00152400 	andseq	r2, r5, r0, lsl #8
    2260:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2264:	00001524 	andeq	r1, r0, r4, lsr #10
    2268:	00001528 	andeq	r1, r0, r8, lsr #10
    226c:	28500001 	ldmdacs	r0, {r0}^
    2270:	3e000015 	mcrcc	0, 0, r0, cr0, cr5, {0}
    2274:	01000015 	tsteq	r0, r5, lsl r0
    2278:	00005500 	andeq	r5, r0, r0, lsl #10
    227c:	00000000 	andeq	r0, r0, r0
    2280:	15480000 	strbne	r0, [r8, #-0]
    2284:	15560000 	ldrbne	r0, [r6, #-0]
    2288:	00010000 	andeq	r0, r1, r0
    228c:	00159c50 	andseq	r9, r5, r0, asr ip
    2290:	0015a800 	andseq	sl, r5, r0, lsl #16
    2294:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    22a0:	0000155e 	andeq	r1, r0, lr, asr r5
    22a4:	00001564 	andeq	r1, r0, r4, ror #10
    22a8:	64500001 	ldrbvs	r0, [r0], #-1
    22ac:	67000015 	smladvs	r0, r5, r0, r0
    22b0:	01000015 	tsteq	r0, r5, lsl r0
    22b4:	15685100 	strbne	r5, [r8, #-256]!	; 0xffffff00
    22b8:	156c0000 	strbne	r0, [ip, #-0]!
    22bc:	00010000 	andeq	r0, r1, r0
    22c0:	00157450 	andseq	r7, r5, r0, asr r4
    22c4:	00157900 	andseq	r7, r5, r0, lsl #18
    22c8:	50000100 	andpl	r0, r0, r0, lsl #2
    22cc:	00001586 	andeq	r1, r0, r6, lsl #11
    22d0:	00001588 	andeq	r1, r0, r8, lsl #11
    22d4:	88500001 	ldmdahi	r0, {r0}^
    22d8:	90000015 	andls	r0, r0, r5, lsl r0
    22dc:	01000015 	tsteq	r0, r5, lsl r0
    22e0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    22f0:	00010000 	andeq	r0, r1, r0
    22f4:	00000050 	andeq	r0, r0, r0, asr r0
    22f8:	00000000 	andeq	r0, r0, r0
    22fc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    2308:	00500001 	subseq	r0, r0, r1
    230c:	00000000 	andeq	r0, r0, r0
    2310:	01000000 	mrseq	r0, (UNDEF: 0)
    2314:	00005600 	andeq	r5, r0, r0, lsl #12
    2318:	00000000 	andeq	r0, r0, r0
    231c:	00010000 	andeq	r0, r1, r0
    2320:	00000050 	andeq	r0, r0, r0, asr r0
    2324:	00000000 	andeq	r0, r0, r0
    2328:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    233c:	00510001 	subseq	r0, r1, r1
    2340:	00000000 	andeq	r0, r0, r0
    2344:	01000000 	mrseq	r0, (UNDEF: 0)
    2348:	00005100 	andeq	r5, r0, r0, lsl #2
    234c:	00000000 	andeq	r0, r0, r0
    2350:	00010000 	andeq	r0, r1, r0
    2354:	00000051 	andeq	r0, r0, r1, asr r0
	...
    2364:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2370:	00700002 	rsbseq	r0, r0, r2
	...
    2384:	00530001 	subseq	r0, r3, r1
    2388:	00000000 	andeq	r0, r0, r0
    238c:	01000000 	mrseq	r0, (UNDEF: 0)
    2390:	00005b00 	andeq	r5, r0, r0, lsl #22
    2394:	00000000 	andeq	r0, r0, r0
    2398:	00010000 	andeq	r0, r1, r0
    239c:	0000005b 	andeq	r0, r0, fp, asr r0
	...
    23ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    23b8:	00500001 	subseq	r0, r0, r1
    23bc:	00000000 	andeq	r0, r0, r0
    23c0:	01000000 	mrseq	r0, (UNDEF: 0)
    23c4:	00005300 	andeq	r5, r0, r0, lsl #6
    23c8:	00000000 	andeq	r0, r0, r0
    23cc:	00010000 	andeq	r0, r1, r0
    23d0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    23e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    23ec:	00500001 	subseq	r0, r0, r1
    23f0:	00000000 	andeq	r0, r0, r0
    23f4:	01000000 	mrseq	r0, (UNDEF: 0)
    23f8:	00005000 	andeq	r5, r0, r0
    23fc:	00000000 	andeq	r0, r0, r0
    2400:	00010000 	andeq	r0, r1, r0
    2404:	00000050 	andeq	r0, r0, r0, asr r0
    2408:	00000000 	andeq	r0, r0, r0
    240c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2418:	00500001 	subseq	r0, r0, r1
    241c:	00000000 	andeq	r0, r0, r0
    2420:	01000000 	mrseq	r0, (UNDEF: 0)
    2424:	00005000 	andeq	r5, r0, r0
    2428:	00000000 	andeq	r0, r0, r0
    242c:	00010000 	andeq	r0, r1, r0
    2430:	00000050 	andeq	r0, r0, r0, asr r0
    2434:	00000000 	andeq	r0, r0, r0
    2438:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2444:	00500001 	subseq	r0, r0, r1
    2448:	00000000 	andeq	r0, r0, r0
    244c:	01000000 	mrseq	r0, (UNDEF: 0)
    2450:	00005000 	andeq	r5, r0, r0
    2454:	00000000 	andeq	r0, r0, r0
    2458:	00010000 	andeq	r0, r1, r0
    245c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    246c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2478:	00510001 	subseq	r0, r1, r1
    247c:	00000000 	andeq	r0, r0, r0
    2480:	01000000 	mrseq	r0, (UNDEF: 0)
    2484:	00005100 	andeq	r5, r0, r0, lsl #2
    2488:	00000000 	andeq	r0, r0, r0
    248c:	00010000 	andeq	r0, r1, r0
    2490:	00000054 	andeq	r0, r0, r4, asr r0
    2494:	00000000 	andeq	r0, r0, r0
    2498:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    24a4:	00540001 	subseq	r0, r4, r1
    24a8:	00000000 	andeq	r0, r0, r0
    24ac:	01000000 	mrseq	r0, (UNDEF: 0)
    24b0:	00005100 	andeq	r5, r0, r0, lsl #2
    24b4:	00000000 	andeq	r0, r0, r0
    24b8:	00010000 	andeq	r0, r1, r0
    24bc:	00000054 	andeq	r0, r0, r4, asr r0
    24c0:	00000000 	andeq	r0, r0, r0
    24c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    24d0:	00540001 	subseq	r0, r4, r1
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	01000000 	mrseq	r0, (UNDEF: 0)
    24dc:	00005100 	andeq	r5, r0, r0, lsl #2
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	00010000 	andeq	r0, r1, r0
    24e8:	00000054 	andeq	r0, r0, r4, asr r0
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    24fc:	00540001 	subseq	r0, r4, r1
    2500:	00000000 	andeq	r0, r0, r0
    2504:	01000000 	mrseq	r0, (UNDEF: 0)
    2508:	00005100 	andeq	r5, r0, r0, lsl #2
    250c:	00000000 	andeq	r0, r0, r0
    2510:	00010000 	andeq	r0, r1, r0
    2514:	00000054 	andeq	r0, r0, r4, asr r0
	...
    2524:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2530:	00500001 	subseq	r0, r0, r1
    2534:	00000000 	andeq	r0, r0, r0
    2538:	01000000 	mrseq	r0, (UNDEF: 0)
    253c:	00005000 	andeq	r5, r0, r0
    2540:	00000000 	andeq	r0, r0, r0
    2544:	00010000 	andeq	r0, r1, r0
    2548:	00000050 	andeq	r0, r0, r0, asr r0
    254c:	00000000 	andeq	r0, r0, r0
    2550:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    255c:	00500001 	subseq	r0, r0, r1
	...
    256c:	01000000 	mrseq	r0, (UNDEF: 0)
    2570:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    2580:	00010000 	andeq	r0, r1, r0
    2584:	00000050 	andeq	r0, r0, r0, asr r0
    2588:	00000000 	andeq	r0, r0, r0
    258c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2598:	00500001 	subseq	r0, r0, r1
	...
    25a8:	01000000 	mrseq	r0, (UNDEF: 0)
    25ac:	00005200 	andeq	r5, r0, r0, lsl #4
    25b0:	00000000 	andeq	r0, r0, r0
    25b4:	00020000 	andeq	r0, r2, r0
    25b8:	00000072 	andeq	r0, r0, r2, ror r0
    25bc:	00000000 	andeq	r0, r0, r0
    25c0:	15de0000 	ldrbne	r0, [lr]
    25c4:	15e80000 	strbne	r0, [r8, #0]!
    25c8:	00010000 	andeq	r0, r1, r0
    25cc:	00000053 	andeq	r0, r0, r3, asr r0
	...
    25dc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    25e8:	00740002 	rsbseq	r0, r4, r2
	...
    25f4:	00540001 	subseq	r0, r4, r1
    25f8:	00000000 	andeq	r0, r0, r0
    25fc:	02000000 	andeq	r0, r0, #0
    2600:	00007400 	andeq	r7, r0, r0, lsl #8
    2604:	00000000 	andeq	r0, r0, r0
    2608:	02000000 	andeq	r0, r0, #0
    260c:	00007400 	andeq	r7, r0, r0, lsl #8
	...
    261c:	01000000 	mrseq	r0, (UNDEF: 0)
    2620:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    2630:	00010000 	andeq	r0, r1, r0
    2634:	00000055 	andeq	r0, r0, r5, asr r0
    2638:	00000000 	andeq	r0, r0, r0
    263c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    2650:	00500001 	subseq	r0, r0, r1
    2654:	00000000 	andeq	r0, r0, r0
    2658:	01000000 	mrseq	r0, (UNDEF: 0)
    265c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    266c:	00010000 	andeq	r0, r1, r0
    2670:	00000052 	andeq	r0, r0, r2, asr r0
    2674:	00000000 	andeq	r0, r0, r0
    2678:	52000100 	andpl	r0, r0, #0, 2
	...
    2684:	00520001 	subseq	r0, r2, r1
    2688:	00000000 	andeq	r0, r0, r0
    268c:	01000000 	mrseq	r0, (UNDEF: 0)
    2690:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    26a0:	00010000 	andeq	r0, r1, r0
    26a4:	00000054 	andeq	r0, r0, r4, asr r0
	...
    26b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    26c0:	00540001 	subseq	r0, r4, r1
	...
    26d0:	01000000 	mrseq	r0, (UNDEF: 0)
    26d4:	00005100 	andeq	r5, r0, r0, lsl #2
    26d8:	00000000 	andeq	r0, r0, r0
    26dc:	00010000 	andeq	r0, r1, r0
    26e0:	00000055 	andeq	r0, r0, r5, asr r0
	...
    26f0:	52000100 	andpl	r0, r0, #0, 2
	...
    2704:	00530001 	subseq	r0, r3, r1
    2708:	00000000 	andeq	r0, r0, r0
    270c:	01000000 	mrseq	r0, (UNDEF: 0)
    2710:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    2720:	00010000 	andeq	r0, r1, r0
    2724:	0000005e 	andeq	r0, r0, lr, asr r0
	...
    2734:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    2748:	00550001 	subseq	r0, r5, r1
	...
    2758:	01000000 	mrseq	r0, (UNDEF: 0)
    275c:	00005000 	andeq	r5, r0, r0
    2760:	00000000 	andeq	r0, r0, r0
    2764:	00020000 	andeq	r0, r2, r0
    2768:	00001873 	andeq	r1, r0, r3, ror r8
    276c:	00000000 	andeq	r0, r0, r0
    2770:	00020000 	andeq	r0, r2, r0
    2774:	00001870 	andeq	r1, r0, r0, ror r8
	...
    2784:	00010000 	andeq	r0, r1, r0
    2788:	00000054 	andeq	r0, r0, r4, asr r0
    278c:	00000000 	andeq	r0, r0, r0
    2790:	00161800 	andseq	r1, r6, r0, lsl #16
    2794:	00162f00 	andseq	r2, r6, r0, lsl #30
    2798:	50000100 	andpl	r0, r0, r0, lsl #2
    279c:	00001630 	andeq	r1, r0, r0, lsr r6
    27a0:	0000163c 	andeq	r1, r0, ip, lsr r6
    27a4:	74500001 	ldrbvc	r0, [r0], #-1
    27a8:	88000016 	stmdahi	r0, {r1, r2, r4}
    27ac:	01000016 	tsteq	r0, r6, lsl r0
    27b0:	00005000 	andeq	r5, r0, r0
    27b4:	00000000 	andeq	r0, r0, r0
    27b8:	16200000 	strtne	r0, [r0], -r0
    27bc:	162c0000 	strtne	r0, [ip], -r0
    27c0:	00010000 	andeq	r0, r1, r0
    27c4:	00162c55 	andseq	r2, r6, r5, asr ip
    27c8:	00162f00 	andseq	r2, r6, r0, lsl #30
    27cc:	73000200 	movwvc	r0, #512	; 0x200
    27d0:	00163008 	andseq	r3, r6, r8
    27d4:	00168800 	andseq	r8, r6, r0, lsl #16
    27d8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    27e4:	00001656 	andeq	r1, r0, r6, asr r6
    27e8:	00001668 	andeq	r1, r0, r8, ror #12
    27ec:	00500001 	subseq	r0, r0, r1
    27f0:	00000000 	andeq	r0, r0, r0
    27f4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    27f8:	a4000016 	strge	r0, [r0], #-22	; 0xffffffea
    27fc:	01000016 	tsteq	r0, r6, lsl r0
    2800:	178a5000 	strne	r5, [sl, r0]
    2804:	17930000 	ldrne	r0, [r3, r0]
    2808:	00010000 	andeq	r0, r1, r0
    280c:	00000050 	andeq	r0, r0, r0, asr r0
    2810:	00000000 	andeq	r0, r0, r0
    2814:	00169000 	andseq	r9, r6, r0
    2818:	0016b200 	andseq	fp, r6, r0, lsl #4
    281c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2820:	000016b2 			; <UNDEFINED> instruction: 0x000016b2
    2824:	000016b9 			; <UNDEFINED> instruction: 0x000016b9
    2828:	b9500001 	ldmdblt	r0, {r0}^
    282c:	be000016 	mcrlt	0, 0, r0, cr0, cr6, {0}
    2830:	01000016 	tsteq	r0, r6, lsl r0
    2834:	16be5400 	ldrtne	r5, [lr], r0, lsl #8
    2838:	16c80000 	strbne	r0, [r8], r0
    283c:	00010000 	andeq	r0, r1, r0
    2840:	0016c850 	andseq	ip, r6, r0, asr r8
    2844:	00178600 	andseq	r8, r7, r0, lsl #12
    2848:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    284c:	0000178a 	andeq	r1, r0, sl, lsl #15
    2850:	00001790 	muleq	r0, r0, r7
    2854:	90540001 	subsls	r0, r4, r1
    2858:	93000017 	movwls	r0, #23
    285c:	02000017 	andeq	r0, r0, #23
    2860:	00087200 	andeq	r7, r8, r0, lsl #4
    2864:	00000000 	andeq	r0, r0, r0
    2868:	6a000000 	bvs	2870 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4c>
    286c:	6c000017 	stcvs	0, cr0, [r0], {23}
    2870:	01000017 	tsteq	r0, r7, lsl r0
    2874:	176c5000 	strbne	r5, [ip, -r0]!
    2878:	17860000 	strne	r0, [r6, r0]
    287c:	00010000 	andeq	r0, r1, r0
    2880:	00000056 	andeq	r0, r0, r6, asr r0
    2884:	00000000 	andeq	r0, r0, r0
    2888:	0019f400 	andseq	pc, r9, r0, lsl #8
    288c:	001a0b00 	andseq	r0, sl, r0, lsl #22
    2890:	50000100 	andpl	r0, r0, r0, lsl #2
    2894:	00001a0b 	andeq	r1, r0, fp, lsl #20
    2898:	00001a12 	andeq	r1, r0, r2, lsl sl
    289c:	12540001 	subsne	r0, r4, #1
    28a0:	1400001a 	strne	r0, [r0], #-26	; 0xffffffe6
    28a4:	0100001a 	tsteq	r0, sl, lsl r0
    28a8:	1a145000 	bne	5168b0 <__ccfg+0x4f6908>
    28ac:	1a240000 	bne	9028b4 <__ccfg+0x8e290c>
    28b0:	00010000 	andeq	r0, r1, r0
    28b4:	001a2454 	andseq	r2, sl, r4, asr r4
    28b8:	001a3300 	andseq	r3, sl, r0, lsl #6
    28bc:	50000100 	andpl	r0, r0, r0, lsl #2
    28c0:	00001a33 	andeq	r1, r0, r3, lsr sl
    28c4:	00001a44 	andeq	r1, r0, r4, asr #20
    28c8:	00540001 	subseq	r0, r4, r1
    28cc:	00000000 	andeq	r0, r0, r0
    28d0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    28d4:	08000019 	stmdaeq	r0, {r0, r3, r4}
    28d8:	0100001a 	tsteq	r0, sl, lsl r0
    28dc:	1a085100 	bne	216ce4 <__ccfg+0x1f6d3c>
    28e0:	1a0b0000 	bne	2c28e8 <__ccfg+0x2a2940>
    28e4:	00010000 	andeq	r0, r1, r0
    28e8:	001a0b52 	andseq	r0, sl, r2, asr fp
    28ec:	001a1200 	andseq	r1, sl, r0, lsl #4
    28f0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    28f4:	00001a12 	andeq	r1, r0, r2, lsl sl
    28f8:	00001a17 	andeq	r1, r0, r7, lsl sl
    28fc:	17510001 	ldrbne	r0, [r1, -r1]
    2900:	4400001a 	strmi	r0, [r0], #-26	; 0xffffffe6
    2904:	0100001a 	tsteq	r0, sl, lsl r0
    2908:	00005600 	andeq	r5, r0, r0, lsl #12
    290c:	00000000 	andeq	r0, r0, r0
    2910:	19f40000 	ldmibne	r4!, {}^	; <UNPREDICTABLE>
    2914:	19fc0000 	ldmibne	ip!, {}^	; <UNPREDICTABLE>
    2918:	00010000 	andeq	r0, r1, r0
    291c:	001a0052 	andseq	r0, sl, r2, asr r0
    2920:	001a0400 	andseq	r0, sl, r0, lsl #8
    2924:	52000100 	andpl	r0, r0, #0, 2
    2928:	00001a0c 	andeq	r1, r0, ip, lsl #20
    292c:	00001a12 	andeq	r1, r0, r2, lsl sl
    2930:	1e570001 	cdpne	0, 5, cr0, cr7, cr1, {0}
    2934:	4400001a 	strmi	r0, [r0], #-26	; 0xffffffe6
    2938:	0100001a 	tsteq	r0, sl, lsl r0
    293c:	00005700 	andeq	r5, r0, r0, lsl #14
    2940:	00000000 	andeq	r0, r0, r0
    2944:	1a1e0000 	bne	78294c <__ccfg+0x7629a4>
    2948:	1a400000 	bne	1002950 <__ccfg+0xfe29a8>
    294c:	00010000 	andeq	r0, r1, r0
    2950:	001a4055 	andseq	r4, sl, r5, asr r0
    2954:	001a4400 	andseq	r4, sl, r0, lsl #8
    2958:	58000100 	stmdapl	r0, {r8}
	...
    2964:	00001a38 	andeq	r1, r0, r8, lsr sl
    2968:	00001a3c 	andeq	r1, r0, ip, lsr sl
    296c:	00500001 	subseq	r0, r0, r1
    2970:	00000000 	andeq	r0, r0, r0
    2974:	c4000000 	strgt	r0, [r0], #-0
    2978:	de000017 	mcrle	0, 0, r0, cr0, cr7, {0}
    297c:	01000017 	tsteq	r0, r7, lsl r0
    2980:	00005000 	andeq	r5, r0, r0
    2984:	00000000 	andeq	r0, r0, r0
    2988:	17c40000 	strbne	r0, [r4, r0]
    298c:	17de0000 	ldrbne	r0, [lr, r0]
    2990:	00010000 	andeq	r0, r1, r0
    2994:	00000051 	andeq	r0, r0, r1, asr r0
    2998:	00000000 	andeq	r0, r0, r0
    299c:	0017c400 	andseq	ip, r7, r0, lsl #8
    29a0:	0017de00 	andseq	sp, r7, r0, lsl #28
    29a4:	52000100 	andpl	r0, r0, #0, 2
    29a8:	000017ee 	andeq	r1, r0, lr, ror #15
    29ac:	0000181a 	andeq	r1, r0, sl, lsl r8
    29b0:	28550001 	ldmdacs	r5, {r0}^
    29b4:	e6000018 			; <UNDEFINED> instruction: 0xe6000018
    29b8:	01000019 	tsteq	r0, r9, lsl r0
    29bc:	00005500 	andeq	r5, r0, r0, lsl #10
    29c0:	00000000 	andeq	r0, r0, r0
    29c4:	17c40000 	strbne	r0, [r4, r0]
    29c8:	17c80000 	strbne	r0, [r8, r0]
    29cc:	00010000 	andeq	r0, r1, r0
    29d0:	0017ca53 	andseq	ip, r7, r3, asr sl
    29d4:	0017cc00 	andseq	ip, r7, r0, lsl #24
    29d8:	53000300 	movwpl	r0, #768	; 0x300
    29dc:	17cc0493 	bfine	r0, r3, #9, #4
    29e0:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    29e4:	00030000 	andeq	r0, r3, r0
    29e8:	16049354 			; <UNDEFINED> instruction: 0x16049354
    29ec:	6a000018 	bvs	2a54 <NOROM_DDI32RegWrite+0xc0>
    29f0:	03000018 	movweq	r0, #24
    29f4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    29f8:	0000186a 	andeq	r1, r0, sl, ror #16
    29fc:	00001876 	andeq	r1, r0, r6, ror r8
    2a00:	93540003 	cmpls	r4, #3
    2a04:	00187e04 	andseq	r7, r8, r4, lsl #28
    2a08:	0018a000 	andseq	sl, r8, r0
    2a0c:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2a10:	18a40493 	stmiane	r4!, {r0, r1, r4, r7, sl}
    2a14:	191e0000 	ldmdbne	lr, {}	; <UNPREDICTABLE>
    2a18:	00030000 	andeq	r0, r3, r0
    2a1c:	24049354 	strcs	r9, [r4], #-852	; 0xfffffcac
    2a20:	38000019 	stmdacc	r0, {r0, r3, r4}
    2a24:	03000019 	movweq	r0, #25
    2a28:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2a2c:	0000197e 	andeq	r1, r0, lr, ror r9
    2a30:	0000198a 	andeq	r1, r0, sl, lsl #19
    2a34:	93540003 	cmpls	r4, #3
    2a38:	0019ac04 	andseq	sl, r9, r4, lsl #24
    2a3c:	0019be00 	andseq	fp, r9, r0, lsl #28
    2a40:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2a44:	19c20493 	stmibne	r2, {r0, r1, r4, r7, sl}^
    2a48:	19ca0000 	stmibne	sl, {}^	; <UNPREDICTABLE>
    2a4c:	00030000 	andeq	r0, r3, r0
    2a50:	ce049354 	mcrgt	3, 0, r9, cr4, cr4, {2}
    2a54:	f4000019 	vst4.8	{d0-d3}, [r0 :64], r9
    2a58:	03000019 	movweq	r0, #25
    2a5c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
	...
    2a68:	000017e2 	andeq	r1, r0, r2, ror #15
    2a6c:	000017ec 	andeq	r1, r0, ip, ror #15
    2a70:	ec590001 	mrrc	0, 0, r0, r9, cr1
    2a74:	ee000017 	mcr	0, 0, r0, cr0, cr7, {0}
    2a78:	02000017 	andeq	r0, r0, #23
    2a7c:	ee007200 	cdp	2, 0, cr7, cr0, cr0, {0}
    2a80:	12000017 	andne	r0, r0, #23
    2a84:	01000018 	tsteq	r0, r8, lsl r0
    2a88:	181a5900 	ldmdane	sl, {r8, fp, ip, lr}
    2a8c:	18280000 	stmdane	r8!, {}	; <UNPREDICTABLE>
    2a90:	00010000 	andeq	r0, r1, r0
    2a94:	00182859 	andseq	r2, r8, r9, asr r8
    2a98:	00186000 	andseq	r6, r8, r0
    2a9c:	58000100 	stmdapl	r0, {r8}
    2aa0:	0000186a 	andeq	r1, r0, sl, ror #16
    2aa4:	0000187a 	andeq	r1, r0, sl, ror r8
    2aa8:	7a580001 	bvc	1602ab4 <__ccfg+0x15e2b0c>
    2aac:	82000018 	andhi	r0, r0, #24
    2ab0:	02000018 	andeq	r0, r0, #24
    2ab4:	a0017200 	andge	r7, r1, r0, lsl #4
    2ab8:	ca000018 	bgt	2b20 <NOROM_DDI32RegWrite+0x18c>
    2abc:	01000018 	tsteq	r0, r8, lsl r0
    2ac0:	18ce5800 	stmiane	lr, {fp, ip, lr}^
    2ac4:	18d20000 	ldmne	r2, {}^	; <UNPREDICTABLE>
    2ac8:	00010000 	andeq	r0, r1, r0
    2acc:	0018dc50 	andseq	sp, r8, r0, asr ip
    2ad0:	0018e600 	andseq	lr, r8, r0, lsl #12
    2ad4:	50000100 	andpl	r0, r0, r0, lsl #2
    2ad8:	00001906 	andeq	r1, r0, r6, lsl #18
    2adc:	00001908 	andeq	r1, r0, r8, lsl #18
    2ae0:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
    2ae4:	10000019 	andne	r0, r0, r9, lsl r0
    2ae8:	01000019 	tsteq	r0, r9, lsl r0
    2aec:	19105800 	ldmdbne	r0, {fp, ip, lr}
    2af0:	19330000 	ldmdbne	r3!, {}	; <UNPREDICTABLE>
    2af4:	00010000 	andeq	r0, r1, r0
    2af8:	00194253 	andseq	r4, r9, r3, asr r2
    2afc:	00194600 	andseq	r4, r9, r0, lsl #12
    2b00:	59000100 	stmdbpl	r0, {r8}
    2b04:	00001950 	andeq	r1, r0, r0, asr r9
    2b08:	00001970 	andeq	r1, r0, r0, ror r9
    2b0c:	76590001 	ldrbvc	r0, [r9], -r1
    2b10:	78000019 	stmdavc	r0, {r0, r3, r4}
    2b14:	01000019 	tsteq	r0, r9, lsl r0
    2b18:	197e5900 	ldmdbne	lr!, {r8, fp, ip, lr}^
    2b1c:	198c0000 	stmibne	ip, {}	; <UNPREDICTABLE>
    2b20:	00010000 	andeq	r0, r1, r0
    2b24:	0019ac53 	andseq	sl, r9, r3, asr ip
    2b28:	0019b500 	andseq	fp, r9, r0, lsl #10
    2b2c:	53000100 	movwpl	r0, #256	; 0x100
    2b30:	000019be 			; <UNDEFINED> instruction: 0x000019be
    2b34:	000019d2 	ldrdeq	r1, [r0], -r2
    2b38:	e6580001 	ldrb	r0, [r8], -r1
    2b3c:	f4000019 	vst4.8	{d0-d3}, [r0 :64], r9
    2b40:	01000019 	tsteq	r0, r9, lsl r0
    2b44:	00005900 	andeq	r5, r0, r0, lsl #18
    2b48:	00000000 	andeq	r0, r0, r0
    2b4c:	18820000 	stmne	r2, {}	; <UNPREDICTABLE>
    2b50:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    2b54:	00010000 	andeq	r0, r1, r0
    2b58:	00000058 	andeq	r0, r0, r8, asr r0
    2b5c:	00000000 	andeq	r0, r0, r0
    2b60:	0018ac00 	andseq	sl, r8, r0, lsl #24
    2b64:	0018c000 	andseq	ip, r8, r0
    2b68:	59000100 	stmdbpl	r0, {r8}
    2b6c:	000018c4 	andeq	r1, r0, r4, asr #17
    2b70:	000018f2 	strdeq	r1, [r0], -r2
    2b74:	fa590001 	blx	1642b80 <__ccfg+0x1622bd8>
    2b78:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
    2b7c:	01000019 	tsteq	r0, r9, lsl r0
    2b80:	00005900 	andeq	r5, r0, r0, lsl #18
    2b84:	00000000 	andeq	r0, r0, r0
    2b88:	18ca0000 	stmiane	sl, {}^	; <UNPREDICTABLE>
    2b8c:	18fc0000 	ldmne	ip!, {}^	; <UNPREDICTABLE>
    2b90:	00010000 	andeq	r0, r1, r0
    2b94:	0018fc58 	andseq	pc, r8, r8, asr ip	; <UNPREDICTABLE>
    2b98:	00190800 	andseq	r0, r9, r0, lsl #16
    2b9c:	53000100 	movwpl	r0, #256	; 0x100
    2ba0:	00001908 	andeq	r1, r0, r8, lsl #18
    2ba4:	0000190e 	andeq	r1, r0, lr, lsl #18
    2ba8:	00580001 	subseq	r0, r8, r1
    2bac:	00000000 	andeq	r0, r0, r0
    2bb0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2bb4:	7e000019 	mcrvc	0, 0, r0, cr0, cr9, {0}
    2bb8:	01000019 	tsteq	r0, r9, lsl r0
    2bbc:	00005a00 	andeq	r5, r0, r0, lsl #20
    2bc0:	00000000 	andeq	r0, r0, r0
    2bc4:	193e0000 	ldmdbne	lr!, {}	; <UNPREDICTABLE>
    2bc8:	19680000 	stmdbne	r8!, {}^	; <UNPREDICTABLE>
    2bcc:	00010000 	andeq	r0, r1, r0
    2bd0:	00196858 	andseq	r6, r9, r8, asr r8
    2bd4:	00197800 	andseq	r7, r9, r0, lsl #16
    2bd8:	53000100 	movwpl	r0, #256	; 0x100
    2bdc:	00001978 	andeq	r1, r0, r8, ror r9
    2be0:	0000197e 	andeq	r1, r0, lr, ror r9
    2be4:	00580001 	subseq	r0, r8, r1
    2be8:	00000000 	andeq	r0, r0, r0
    2bec:	8c000000 	stchi	0, cr0, [r0], {-0}
    2bf0:	ac000019 	stcge	0, cr0, [r0], {25}
    2bf4:	01000019 	tsteq	r0, r9, lsl r0
    2bf8:	00005800 	andeq	r5, r0, r0, lsl #16
    2bfc:	00000000 	andeq	r0, r0, r0
    2c00:	19be0000 	ldmibne	lr!, {}	; <UNPREDICTABLE>
    2c04:	19c20000 	stmibne	r2, {}^	; <UNPREDICTABLE>
    2c08:	00020000 	andeq	r0, r2, r0
    2c0c:	19c20074 	stmibne	r2, {r2, r4, r5, r6}^
    2c10:	19ca0000 	stmibne	sl, {}^	; <UNPREDICTABLE>
    2c14:	00020000 	andeq	r0, r2, r0
    2c18:	00007c74 	andeq	r7, r0, r4, ror ip
    2c1c:	00000000 	andeq	r0, r0, r0
    2c20:	19d60000 	ldmibne	r6, {}^	; <UNPREDICTABLE>
    2c24:	19e40000 	stmibne	r4!, {}^	; <UNPREDICTABLE>
    2c28:	00010000 	andeq	r0, r1, r0
    2c2c:	00000058 	andeq	r0, r0, r8, asr r0
    2c30:	00000000 	andeq	r0, r0, r0
    2c34:	001a4400 	andseq	r4, sl, r0, lsl #8
    2c38:	001a6000 	andseq	r6, sl, r0
    2c3c:	50000100 	andpl	r0, r0, r0, lsl #2
    2c40:	00001a9e 	muleq	r0, lr, sl
    2c44:	00001ab0 			; <UNDEFINED> instruction: 0x00001ab0
    2c48:	b0530001 	subslt	r0, r3, r1
    2c4c:	c400001a 	strgt	r0, [r0], #-26	; 0xffffffe6
    2c50:	0100001a 	tsteq	r0, sl, lsl r0
    2c54:	1ac65600 	bne	ff19845c <_estack+0xdf19345c>
    2c58:	1ae20000 	bne	ff882c60 <_estack+0xdf87dc60>
    2c5c:	00010000 	andeq	r0, r1, r0
    2c60:	001af456 	andseq	pc, sl, r6, asr r4	; <UNPREDICTABLE>
    2c64:	001b0000 	andseq	r0, fp, r0
    2c68:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2c6c:	00001b00 	andeq	r1, r0, r0, lsl #22
    2c70:	00001b06 	andeq	r1, r0, r6, lsl #22
    2c74:	0c530001 	mrrceq	0, 0, r0, r3, cr1
    2c78:	1000001b 	andne	r0, r0, fp, lsl r0
    2c7c:	0100001b 	tsteq	r0, fp, lsl r0
    2c80:	1b105300 	blne	417888 <__ccfg+0x3f78e0>
    2c84:	1b200000 	blne	802c8c <__ccfg+0x7e2ce4>
    2c88:	00010000 	andeq	r0, r1, r0
    2c8c:	001b205e 	andseq	r2, fp, lr, asr r0
    2c90:	001b3600 	andseq	r3, fp, r0, lsl #12
    2c94:	53000100 	movwpl	r0, #256	; 0x100
    2c98:	00001b36 	andeq	r1, r0, r6, lsr fp
    2c9c:	00001b3e 	andeq	r1, r0, lr, lsr fp
    2ca0:	445e0001 	ldrbmi	r0, [lr], #-1
    2ca4:	6000001b 	andvs	r0, r0, fp, lsl r0
    2ca8:	0100001b 	tsteq	r0, fp, lsl r0
    2cac:	1b605300 	blne	18178b4 <__ccfg+0x17f790c>
    2cb0:	1b660000 	blne	1982cb8 <__ccfg+0x1962d10>
    2cb4:	00010000 	andeq	r0, r1, r0
    2cb8:	001b665e 	andseq	r6, fp, lr, asr r6
    2cbc:	001b6800 	andseq	r6, fp, r0, lsl #16
    2cc0:	53000100 	movwpl	r0, #256	; 0x100
    2cc4:	00001b74 	andeq	r1, r0, r4, ror fp
    2cc8:	00001b76 	andeq	r1, r0, r6, ror fp
    2ccc:	765e0001 	ldrbvc	r0, [lr], -r1
    2cd0:	8a00001b 	bhi	2d44 <__exidx_end+0x10c>
    2cd4:	0100001b 	tsteq	r0, fp, lsl r0
    2cd8:	1b8a5300 	blne	fe2978e0 <_estack+0xde2928e0>
    2cdc:	1b9a0000 	blne	fe682ce4 <_estack+0xde67dce4>
    2ce0:	00010000 	andeq	r0, r1, r0
    2ce4:	001b9a56 	andseq	r9, fp, r6, asr sl
    2ce8:	001bae00 	andseq	sl, fp, r0, lsl #28
    2cec:	53000100 	movwpl	r0, #256	; 0x100
    2cf0:	00001bbc 			; <UNDEFINED> instruction: 0x00001bbc
    2cf4:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
    2cf8:	be560001 	cdplt	0, 5, cr0, cr6, cr1, {0}
    2cfc:	d600001b 			; <UNDEFINED> instruction: 0xd600001b
    2d00:	0100001b 	tsteq	r0, fp, lsl r0
    2d04:	1bd65300 	blne	ff59790c <_estack+0xdf59290c>
    2d08:	1bf00000 	blne	ffc02d10 <_estack+0xdfbfdd10>
    2d0c:	00010000 	andeq	r0, r1, r0
    2d10:	001bf656 	andseq	pc, fp, r6, asr r6	; <UNPREDICTABLE>
    2d14:	001c1800 	andseq	r1, ip, r0, lsl #16
    2d18:	53000100 	movwpl	r0, #256	; 0x100
    2d1c:	00001c18 	andeq	r1, r0, r8, lsl ip
    2d20:	00001c2a 	andeq	r1, r0, sl, lsr #24
    2d24:	50560001 	subspl	r0, r6, r1
    2d28:	5400001c 	strpl	r0, [r0], #-28	; 0xffffffe4
    2d2c:	0100001c 	tsteq	r0, ip, lsl r0
    2d30:	1c545300 	mrrcne	3, 0, r5, r4, cr0
    2d34:	1c640000 	stclne	0, cr0, [r4], #-0
    2d38:	00010000 	andeq	r0, r1, r0
    2d3c:	001c6458 	andseq	r6, ip, r8, asr r4
    2d40:	001c7400 	andseq	r7, ip, r0, lsl #8
    2d44:	53000100 	movwpl	r0, #256	; 0x100
    2d48:	00001c74 	andeq	r1, r0, r4, ror ip
    2d4c:	00001c7e 	andeq	r1, r0, lr, ror ip
    2d50:	84580001 	ldrbhi	r0, [r8], #-1
    2d54:	a600001c 			; <UNDEFINED> instruction: 0xa600001c
    2d58:	0100001c 	tsteq	r0, ip, lsl r0
    2d5c:	1cac5300 	stcne	3, cr5, [ip]
    2d60:	1cbc0000 	ldcne	0, cr0, [ip]
    2d64:	00010000 	andeq	r0, r1, r0
    2d68:	001cbc53 	andseq	fp, ip, r3, asr ip
    2d6c:	001cd600 	andseq	sp, ip, r0, lsl #12
    2d70:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2d74:	00001cdc 	ldrdeq	r1, [r0], -ip
    2d78:	00001cfc 	strdeq	r1, [r0], -ip
    2d7c:	fc530001 	mrrc2	0, 0, r0, r3, cr1
    2d80:	0e00001c 	mcreq	0, 0, r0, cr0, cr12, {0}
    2d84:	0100001d 	tsteq	r0, sp, lsl r0
    2d88:	1d225600 	stcne	6, cr5, [r2, #-0]
    2d8c:	1d260000 	stcne	0, cr0, [r6, #-0]
    2d90:	00010000 	andeq	r0, r1, r0
    2d94:	001d2658 	andseq	r2, sp, r8, asr r6
    2d98:	001d2a00 	andseq	r2, sp, r0, lsl #20
    2d9c:	53000100 	movwpl	r0, #256	; 0x100
    2da0:	00001d34 	andeq	r1, r0, r4, lsr sp
    2da4:	00001d36 	andeq	r1, r0, r6, lsr sp
    2da8:	36580001 	ldrbcc	r0, [r8], -r1
    2dac:	4c00001d 	stcmi	0, cr0, [r0], {29}
    2db0:	0100001d 	tsteq	r0, sp, lsl r0
    2db4:	1d4c5300 	stclne	3, cr5, [ip, #-0]
    2db8:	1d5c0000 	ldclne	0, cr0, [ip, #-0]
    2dbc:	00010000 	andeq	r0, r1, r0
    2dc0:	001d5c56 	andseq	r5, sp, r6, asr ip
    2dc4:	001d7200 	andseq	r7, sp, r0, lsl #4
    2dc8:	53000100 	movwpl	r0, #256	; 0x100
    2dcc:	00001d7c 	andeq	r1, r0, ip, ror sp
    2dd0:	00001d7e 	andeq	r1, r0, lr, ror sp
    2dd4:	7e560001 	cdpvc	0, 5, cr0, cr6, cr1, {0}
    2dd8:	8600001d 			; <UNDEFINED> instruction: 0x8600001d
    2ddc:	0100001d 	tsteq	r0, sp, lsl r0
    2de0:	1d8a5300 	stcne	3, cr5, [sl]
    2de4:	1d9a0000 	ldcne	0, cr0, [sl]
    2de8:	00010000 	andeq	r0, r1, r0
    2dec:	001d9a53 	andseq	r9, sp, r3, asr sl
    2df0:	001da800 	andseq	sl, sp, r0, lsl #16
    2df4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2df8:	00001da8 	andeq	r1, r0, r8, lsr #27
    2dfc:	00001dae 	andeq	r1, r0, lr, lsr #27
    2e00:	ae580001 	cdpge	0, 5, cr0, cr8, cr1, {0}
    2e04:	ba00001d 	blt	2e80 <__exidx_end+0x248>
    2e08:	0100001d 	tsteq	r0, sp, lsl r0
    2e0c:	1dba5600 	ldcne	6, cr5, [sl]
    2e10:	1dc20000 	stclne	0, cr0, [r2]
    2e14:	00010000 	andeq	r0, r1, r0
    2e18:	001dc250 	andseq	ip, sp, r0, asr r2
    2e1c:	001dd400 	andseq	sp, sp, r0, lsl #8
    2e20:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e2c:	00001a44 	andeq	r1, r0, r4, asr #20
    2e30:	00001a62 	andeq	r1, r0, r2, ror #20
    2e34:	62510001 	subsvs	r0, r1, #1
    2e38:	6800001a 	stmdavs	r0, {r1, r3, r4}
    2e3c:	0100001a 	tsteq	r0, sl, lsl r0
    2e40:	1a685600 	bne	1a18648 <__ccfg+0x19f86a0>
    2e44:	1a860000 	bne	fe182e4c <_estack+0xde17de4c>
    2e48:	00010000 	andeq	r0, r1, r0
    2e4c:	001a8c51 	andseq	r8, sl, r1, asr ip
    2e50:	001dd400 	andseq	sp, sp, r0, lsl #8
    2e54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2e60:	00001a44 	andeq	r1, r0, r4, asr #20
    2e64:	00001a44 	andeq	r1, r0, r4, asr #20
    2e68:	44520001 	ldrbmi	r0, [r2], #-1
    2e6c:	6000001a 	andvs	r0, r0, sl, lsl r0
    2e70:	0300001a 	movweq	r0, #26
    2e74:	04935200 	ldreq	r5, [r3], #512	; 0x200
    2e78:	00001b06 	andeq	r1, r0, r6, lsl #22
    2e7c:	00001b3a 	andeq	r1, r0, sl, lsr fp
    2e80:	60520001 	subsvs	r0, r2, r1
    2e84:	6600001b 			; <UNDEFINED> instruction: 0x6600001b
    2e88:	0100001b 	tsteq	r0, fp, lsl r0
    2e8c:	1b765200 	blne	1d97694 <__ccfg+0x1d776ec>
    2e90:	1b900000 	blne	fe402e98 <_estack+0xde3fde98>
    2e94:	00010000 	andeq	r0, r1, r0
    2e98:	001bbe52 	andseq	fp, fp, r2, asr lr
    2e9c:	001be600 	andseq	lr, fp, r0, lsl #12
    2ea0:	52000100 	andpl	r0, r0, #0, 2
    2ea4:	00001c38 	andeq	r1, r0, r8, lsr ip
    2ea8:	00001c78 	andeq	r1, r0, r8, ror ip
    2eac:	a6520001 	ldrbge	r0, [r2], -r1
    2eb0:	cc00001c 	stcgt	0, cr0, [r0], {28}
    2eb4:	0100001c 	tsteq	r0, ip, lsl r0
    2eb8:	1d1c5200 	lfmne	f5, 4, [ip, #-0]
    2ebc:	1d260000 	stcne	0, cr0, [r6, #-0]
    2ec0:	00010000 	andeq	r0, r1, r0
    2ec4:	001d3652 	andseq	r3, sp, r2, asr r6
    2ec8:	001d5200 	andseq	r5, sp, r0, lsl #4
    2ecc:	52000100 	andpl	r0, r0, #0, 2
    2ed0:	00001d7e 	andeq	r1, r0, lr, ror sp
    2ed4:	00001d94 	muleq	r0, r4, sp
    2ed8:	9a520001 	bls	1482ee4 <__ccfg+0x1462f3c>
    2edc:	a800001d 	stmdage	r0, {r0, r2, r3, r4}
    2ee0:	0100001d 	tsteq	r0, sp, lsl r0
    2ee4:	1dba5200 	lfmne	f5, 4, [sl]
    2ee8:	1dc20000 	stclne	0, cr0, [r2]
    2eec:	00010000 	andeq	r0, r1, r0
    2ef0:	00000052 	andeq	r0, r0, r2, asr r0
    2ef4:	00000000 	andeq	r0, r0, r0
    2ef8:	001ac200 	andseq	ip, sl, r0, lsl #4
    2efc:	001ac400 	andseq	ip, sl, r0, lsl #8
    2f00:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2f04:	00001b3c 	andeq	r1, r0, ip, lsr fp
    2f08:	00001b60 	andeq	r1, r0, r0, ror #22
    2f0c:	66540001 	ldrbvs	r0, [r4], -r1
    2f10:	7600001b 			; <UNDEFINED> instruction: 0x7600001b
    2f14:	0100001b 	tsteq	r0, fp, lsl r0
    2f18:	1b925400 	blne	fe497f20 <_estack+0xde492f20>
    2f1c:	1bbe0000 	blne	fef82f24 <_estack+0xdef7df24>
    2f20:	00010000 	andeq	r0, r1, r0
    2f24:	001be854 	andseq	lr, fp, r4, asr r8
    2f28:	001c3800 	andseq	r3, ip, r0, lsl #16
    2f2c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2f30:	00001c7a 	andeq	r1, r0, sl, ror ip
    2f34:	00001ca6 	andeq	r1, r0, r6, lsr #25
    2f38:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    2f3c:	1c00001c 	stcne	0, cr0, [r0], {28}
    2f40:	0100001d 	tsteq	r0, sp, lsl r0
    2f44:	1d265400 	cfstrsne	mvf5, [r6, #-0]
    2f48:	1d360000 	ldcne	0, cr0, [r6, #-0]
    2f4c:	00010000 	andeq	r0, r1, r0
    2f50:	001d5454 	andseq	r5, sp, r4, asr r4
    2f54:	001d7e00 	andseq	r7, sp, r0, lsl #28
    2f58:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2f5c:	00001d96 	muleq	r0, r6, sp
    2f60:	00001d9a 	muleq	r0, sl, sp
    2f64:	c2540001 	subsgt	r0, r4, #1
    2f68:	d400001d 	strle	r0, [r0], #-29	; 0xffffffe3
    2f6c:	0100001d 	tsteq	r0, sp, lsl r0
    2f70:	00005400 	andeq	r5, r0, r0, lsl #8
    2f74:	00000000 	andeq	r0, r0, r0
    2f78:	1b360000 	blne	d82f80 <__ccfg+0xd62fd8>
    2f7c:	1b600000 	blne	1802f84 <__ccfg+0x17e2fdc>
    2f80:	00010000 	andeq	r0, r1, r0
    2f84:	001b6658 	andseq	r6, fp, r8, asr r6
    2f88:	001b7600 	andseq	r7, fp, r0, lsl #12
    2f8c:	58000100 	stmdapl	r0, {r8}
	...
    2f98:	00001c18 	andeq	r1, r0, r8, lsl ip
    2f9c:	00001c2a 	andeq	r1, r0, sl, lsr #24
    2fa0:	2a590001 	bcs	1642fac <__ccfg+0x1623004>
    2fa4:	3200001c 	andcc	r0, r0, #28
    2fa8:	0100001c 	tsteq	r0, ip, lsl r0
    2fac:	00005000 	andeq	r5, r0, r0
    2fb0:	00000000 	andeq	r0, r0, r0
    2fb4:	1c740000 	ldclne	0, cr0, [r4], #-0
    2fb8:	1c9e0000 	ldcne	0, cr0, [lr], {0}
    2fbc:	00010000 	andeq	r0, r1, r0
    2fc0:	001d2650 	andseq	r2, sp, r0, asr r6
    2fc4:	001d3600 	andseq	r3, sp, r0, lsl #12
    2fc8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2fd4:	00001cfc 	strdeq	r1, [r0], -ip
    2fd8:	00001d0e 	andeq	r1, r0, lr, lsl #26
    2fdc:	0e590001 	cdpeq	0, 5, cr0, cr9, cr1, {0}
    2fe0:	1600001d 			; <UNDEFINED> instruction: 0x1600001d
    2fe4:	0100001d 	tsteq	r0, sp, lsl r0
    2fe8:	00005000 	andeq	r5, r0, r0
    2fec:	00000000 	andeq	r0, r0, r0
    2ff0:	1d8a0000 	stcne	0, cr0, [sl]
    2ff4:	1d9a0000 	ldcne	0, cr0, [sl]
    2ff8:	00010000 	andeq	r0, r1, r0
    2ffc:	00000050 	andeq	r0, r0, r0, asr r0
    3000:	00000000 	andeq	r0, r0, r0
    3004:	001ac600 	andseq	ip, sl, r0, lsl #12
    3008:	001ae200 	andseq	lr, sl, r0, lsl #4
    300c:	5e000100 	adfpls	f0, f0, f0
    3010:	00001dac 	andeq	r1, r0, ip, lsr #27
    3014:	00001dae 	andeq	r1, r0, lr, lsr #27
    3018:	005e0001 	subseq	r0, lr, r1
    301c:	00000000 	andeq	r0, r0, r0
    3020:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    3024:	ea00001d 	b	30a0 <__exidx_end+0x468>
    3028:	0700001d 	smladeq	r0, sp, r0, r0
    302c:	3f007000 	svccc	0x00007000
    3030:	9f263f24 	svcls	0x00263f24
	...
    303c:	00001de0 	andeq	r1, r0, r0, ror #27
    3040:	00001de8 	andeq	r1, r0, r8, ror #27
    3044:	8072000d 	rsbshi	r0, r2, sp
    3048:	4800717a 	stmdami	r0, {r1, r3, r4, r5, r6, r8, ip, sp, lr}
    304c:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    3050:	e89f2634 	ldm	pc, {r2, r4, r5, r9, sl, sp}	; <UNPREDICTABLE>
    3054:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    3058:	0c00001e 	stceq	0, cr0, [r0], {30}
    305c:	48007100 	stmdami	r0, {r8, ip, sp, lr}
    3060:	72264824 	eorvc	r4, r6, #36, 16	; 0x240000
    3064:	26341e00 	ldrtcs	r1, [r4], -r0, lsl #28
    3068:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3078:	53000100 	movwpl	r0, #256	; 0x100
	...
    308c:	00500001 	subseq	r0, r0, r1
    3090:	00000000 	andeq	r0, r0, r0
    3094:	2c000000 	stccs	0, cr0, [r0], {-0}
    3098:	4400001e 	strmi	r0, [r0], #-30	; 0xffffffe2
    309c:	0100001e 	tsteq	r0, lr, lsl r0
    30a0:	1e445000 	cdpne	0, 4, cr5, cr4, cr0, {0}
    30a4:	1e7e0000 	cdpne	0, 7, cr0, cr14, cr0, {0}
    30a8:	00010000 	andeq	r0, r1, r0
    30ac:	001e7e55 	andseq	r7, lr, r5, asr lr
    30b0:	001e8800 	andseq	r8, lr, r0, lsl #16
    30b4:	f3000400 	vshl.u8	d0, d0, d0
    30b8:	009f5001 	addseq	r5, pc, r1
    30bc:	00000000 	andeq	r0, r0, r0
    30c0:	2c000000 	stccs	0, cr0, [r0], {-0}
    30c4:	3200001e 	andcc	r0, r0, #30
    30c8:	0100001e 	tsteq	r0, lr, lsl r0
    30cc:	1e325100 	rsfnes	f5, f2, f0
    30d0:	1e6a0000 	cdpne	0, 6, cr0, cr10, cr0, {0}
    30d4:	00010000 	andeq	r0, r1, r0
    30d8:	001e6a54 	andseq	r6, lr, r4, asr sl
    30dc:	001e8800 	andseq	r8, lr, r0, lsl #16
    30e0:	f3000400 	vshl.u8	d0, d0, d0
    30e4:	009f5101 	addseq	r5, pc, r1, lsl #2
    30e8:	00000000 	andeq	r0, r0, r0
    30ec:	66000000 	strvs	r0, [r0], -r0
    30f0:	7a00001e 	bvc	3170 <__exidx_end+0x538>
    30f4:	0100001e 	tsteq	r0, lr, lsl r0
    30f8:	00005500 	andeq	r5, r0, r0, lsl #10
    30fc:	00000000 	andeq	r0, r0, r0
    3100:	1e660000 	cdpne	0, 6, cr0, cr6, cr0, {0}
    3104:	1e6a0000 	cdpne	0, 6, cr0, cr10, cr0, {0}
    3108:	00010000 	andeq	r0, r1, r0
    310c:	001e6a54 	andseq	r6, lr, r4, asr sl
    3110:	001e7a00 	andseq	r7, lr, r0, lsl #20
    3114:	f3000400 	vshl.u8	d0, d0, d0
    3118:	009f5101 	addseq	r5, pc, r1, lsl #2
    311c:	00000000 	andeq	r0, r0, r0
    3120:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3124:	a600001e 			; <UNDEFINED> instruction: 0xa600001e
    3128:	0100001e 	tsteq	r0, lr, lsl r0
    312c:	1ea65000 	cdpne	0, 10, cr5, cr6, cr0, {0}
    3130:	1eb40000 	cdpne	0, 11, cr0, cr4, cr0, {0}
    3134:	00040000 	andeq	r0, r4, r0
    3138:	9f5001f3 	svcls	0x005001f3
	...
    314c:	00500001 	subseq	r0, r0, r1
    3150:	00000000 	andeq	r0, r0, r0
    3154:	01000000 	mrseq	r0, (UNDEF: 0)
    3158:	00005600 	andeq	r5, r0, r0, lsl #12
    315c:	00000000 	andeq	r0, r0, r0
    3160:	00040000 	andeq	r0, r4, r0
    3164:	9f5001f3 	svcls	0x005001f3
	...
    3178:	00550001 	subseq	r0, r5, r1
	...
    3188:	07000000 	streq	r0, [r0, -r0]
    318c:	73007000 	movwvc	r7, #0
    3190:	9f191c00 	svcls	0x00191c00
	...
    319c:	00700004 	rsbseq	r0, r0, r4
    31a0:	00009f19 	andeq	r9, r0, r9, lsl pc
	...
    31b0:	00040000 	andeq	r0, r4, r0
    31b4:	9f07d00a 	svcls	0x0007d00a
	...
    31c0:	00500001 	subseq	r0, r0, r1
    31c4:	00000000 	andeq	r0, r0, r0
    31c8:	05000000 	streq	r0, [r0, #-0]
    31cc:	40007200 	andmi	r7, r0, r0, lsl #4
    31d0:	00009f25 	andeq	r9, r0, r5, lsr #30
    31d4:	00000000 	andeq	r0, r0, r0
    31d8:	00010000 	andeq	r0, r1, r0
    31dc:	00000050 	andeq	r0, r0, r0, asr r0
    31e0:	00000000 	andeq	r0, r0, r0
    31e4:	0a000400 	beq	41ec <__exidx_end+0x15b4>
    31e8:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    31ec:	00000000 	andeq	r0, r0, r0
    31f0:	01000000 	mrseq	r0, (UNDEF: 0)
    31f4:	00005000 	andeq	r5, r0, r0
	...
    3204:	00010000 	andeq	r0, r1, r0
    3208:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3218:	53000100 	movwpl	r0, #256	; 0x100
	...
    322c:	00500001 	subseq	r0, r0, r1
    3230:	00000000 	andeq	r0, r0, r0
    3234:	03000000 	movweq	r0, #0
    3238:	9f1b7000 	svcls	0x001b7000
	...
    3244:	01f30004 	mvnseq	r0, r4
    3248:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3258:	00070000 	andeq	r0, r7, r0
    325c:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    3260:	009f2648 	addseq	r2, pc, r8, asr #12
	...
    3270:	01000000 	mrseq	r0, (UNDEF: 0)
    3274:	00005000 	andeq	r5, r0, r0
    3278:	00000000 	andeq	r0, r0, r0
    327c:	00060000 	andeq	r0, r6, r0
    3280:	4b5001f3 	blmi	1403a54 <__ccfg+0x13e3aac>
    3284:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3294:	00010000 	andeq	r0, r1, r0
    3298:	00000055 	andeq	r0, r0, r5, asr r0
    329c:	00000000 	andeq	r0, r0, r0
    32a0:	f3000c00 			; <UNDEFINED> instruction: 0xf3000c00
    32a4:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    32a8:	4b5001f3 	blmi	1403a7c <__ccfg+0x13e3ad4>
    32ac:	009f1e1c 	addseq	r1, pc, ip, lsl lr	; <UNPREDICTABLE>
	...
    32bc:	2c000000 	stccs	0, cr0, [r0], {-0}
    32c0:	40007100 	andmi	r7, r0, r0, lsl #2
    32c4:	40007126 	andmi	r7, r0, r6, lsr #2
    32c8:	70264824 	eorvc	r4, r6, r4, lsr #16
    32cc:	26331e00 	ldrtcs	r1, [r3], -r0, lsl #28
    32d0:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    32d4:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    32d8:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    32dc:	48007422 	stmdami	r0, {r1, r5, sl, ip, sp, lr}
    32e0:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    32e4:	00701e00 	rsbseq	r1, r0, r0, lsl #28
    32e8:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    32ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    32f0:	00000000 	andeq	r0, r0, r0
    32f4:	71003200 	mrsvc	r3, R8_usr
    32f8:	f3264000 	vhadd.u32	d4, d6, d0
    32fc:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    3300:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    3304:	331e2648 	tstcc	lr, #72, 12	; 0x4800000
    3308:	00712226 	rsbseq	r2, r1, r6, lsr #4
    330c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    3310:	3a1e0075 	bcc	7834ec <__ccfg+0x763544>
    3314:	01f32226 	mvnseq	r2, r6, lsr #4
    3318:	741c4b50 	ldrvc	r4, [ip], #-2896	; 0xfffff4b0
    331c:	48244800 	stmdami	r4!, {fp, lr}
    3320:	00751e26 	rsbseq	r1, r5, r6, lsr #28
    3324:	2226421e 	eorcs	r4, r6, #-536870911	; 0xe0000001
    3328:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3338:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3344:	01f30004 	mvnseq	r0, r4
    3348:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3358:	000b0000 	andeq	r0, fp, r0
    335c:	00700070 	rsbseq	r0, r0, r0, ror r0
    3360:	7026461e 	eorvc	r4, r6, lr, lsl r6
    3364:	009f1c00 	addseq	r1, pc, r0, lsl #24
    3368:	00000000 	andeq	r0, r0, r0
    336c:	01000000 	mrseq	r0, (UNDEF: 0)
    3370:	00005000 	andeq	r5, r0, r0
    3374:	00000000 	andeq	r0, r0, r0
    3378:	000e0000 	andeq	r0, lr, r0
    337c:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    3380:	461e5001 	ldrmi	r5, [lr], -r1
    3384:	5001f326 	andpl	pc, r1, r6, lsr #6
    3388:	00009f1c 	andeq	r9, r0, ip, lsl pc
	...
    3398:	00010000 	andeq	r0, r1, r0
    339c:	00000055 	andeq	r0, r0, r5, asr r0
    33a0:	00000000 	andeq	r0, r0, r0
    33a4:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
    33a8:	40091038 	andmi	r1, r9, r8, lsr r0
	...
    33bc:	00560001 	subseq	r0, r6, r1
	...
    33cc:	06000000 	streq	r0, [r0], -r0
    33d0:	76007000 	strvc	r7, [r0], -r0
    33d4:	009f1c00 	addseq	r1, pc, r0, lsl #24
    33d8:	00000000 	andeq	r0, r0, r0
    33dc:	01000000 	mrseq	r0, (UNDEF: 0)
    33e0:	00005000 	andeq	r5, r0, r0
	...
    33f0:	000a0000 	andeq	r0, sl, r0
    33f4:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    33f8:	461a2444 	ldrmi	r2, [sl], -r4, asr #8
    33fc:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    340c:	00010000 	andeq	r0, r1, r0
    3410:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3420:	73000900 	movwvc	r0, #2304	; 0x900
    3424:	fc000a00 	stc2	10, cr0, [r0], {-0}	; <UNPREDICTABLE>
    3428:	9f253a1a 	svcls	0x00253a1a
	...
    343c:	0073000a 	rsbseq	r0, r3, sl
    3440:	2440fc08 	strbcs	pc, [r0], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    3444:	9f25421a 	svcls	0x0025421a
	...
    3450:	00001eb4 			; <UNDEFINED> instruction: 0x00001eb4
    3454:	00001ef2 	strdeq	r1, [r0], -r2
    3458:	f2500001 	vhadd.s16	d16, d0, d1
    345c:	5400001e 	strpl	r0, [r0], #-30	; 0xffffffe2
    3460:	0100001f 	tsteq	r0, pc, lsl r0
    3464:	1f545500 	svcne	0x00545500
    3468:	1f880000 	svcne	0x00880000
    346c:	00040000 	andeq	r0, r4, r0
    3470:	9f5001f3 	svcls	0x005001f3
	...
    347c:	00001ef0 	strdeq	r1, [r0], -r0
    3480:	00001f54 	andeq	r1, r0, r4, asr pc
    3484:	00540001 	subseq	r0, r4, r1
    3488:	00000000 	andeq	r0, r0, r0
    348c:	06000000 	streq	r0, [r0], -r0
    3490:	0800001f 	stmdaeq	r0, {r0, r1, r2, r3, r4}
    3494:	0700001f 	smladeq	r0, pc, r0, r0	; <UNPREDICTABLE>
    3498:	0a007300 	beq	200a0 <__ccfg+0xf8>
    349c:	9f1affff 	svcls	0x001affff
	...
    34a8:	00001f16 	andeq	r1, r0, r6, lsl pc
    34ac:	00001f30 	andeq	r1, r0, r0, lsr pc
    34b0:	00530001 	subseq	r0, r3, r1
    34b4:	00000000 	andeq	r0, r0, r0
    34b8:	1a000000 	bne	34c0 <__exidx_end+0x888>
    34bc:	2600001f 			; <UNDEFINED> instruction: 0x2600001f
    34c0:	0100001f 	tsteq	r0, pc, lsl r0
    34c4:	1f265200 	svcne	0x00265200
    34c8:	1f2a0000 	svcne	0x002a0000
    34cc:	00030000 	andeq	r0, r3, r0
    34d0:	2a9f0671 	bcs	fe7c4e9c <_estack+0xde7bfe9c>
    34d4:	3200001f 	andcc	r0, r0, #31
    34d8:	0100001f 	tsteq	r0, pc, lsl r0
    34dc:	00005200 	andeq	r5, r0, r0, lsl #4
    34e0:	00000000 	andeq	r0, r0, r0
    34e4:	1f8e0000 	svcne	0x008e0000
    34e8:	20080000 	andcs	r0, r8, r0
    34ec:	00010000 	andeq	r0, r1, r0
    34f0:	00000054 	andeq	r0, r0, r4, asr r0
    34f4:	00000000 	andeq	r0, r0, r0
    34f8:	001ff400 	andseq	pc, pc, r0, lsl #8
    34fc:	001ffe00 	andseq	pc, pc, r0, lsl #28
    3500:	53000100 	movwpl	r0, #256	; 0x100
	...
    350c:	0000202c 	andeq	r2, r0, ip, lsr #32
    3510:	00002052 	andeq	r2, r0, r2, asr r0
    3514:	52500001 	subspl	r0, r0, #1
    3518:	a8000020 	stmdage	r0, {r5}
    351c:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    3520:	5001f300 	andpl	pc, r1, r0, lsl #6
    3524:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3528:	00000000 	andeq	r0, r0, r0
    352c:	00205400 	eoreq	r5, r0, r0, lsl #8
    3530:	00208800 	eoreq	r8, r0, r0, lsl #16
    3534:	53000100 	movwpl	r0, #256	; 0x100
	...
    3540:	00002058 	andeq	r2, r0, r8, asr r0
    3544:	00002066 	andeq	r2, r0, r6, rrx
    3548:	66510001 	ldrbvs	r0, [r1], -r1
    354c:	68000020 	stmdavs	r0, {r5}
    3550:	06000020 	streq	r0, [r0], -r0, lsr #32
    3554:	73007200 	movwvc	r7, #512	; 0x200
    3558:	689f1c00 	ldmvs	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    355c:	6e000020 	cdpvs	0, 0, cr0, cr0, cr0, {1}
    3560:	01000020 	tsteq	r0, r0, lsr #32
    3564:	00005100 	andeq	r5, r0, r0, lsl #2
    3568:	00000000 	andeq	r0, r0, r0
    356c:	20440000 	subcs	r0, r4, r0
    3570:	20560000 	subscs	r0, r6, r0
    3574:	00010000 	andeq	r0, r1, r0
    3578:	00000053 	andeq	r0, r0, r3, asr r0
    357c:	00000000 	andeq	r0, r0, r0
    3580:	0020a800 	eoreq	sl, r0, r0, lsl #16
    3584:	0020cb00 	eoreq	ip, r0, r0, lsl #22
    3588:	50000100 	andpl	r0, r0, r0, lsl #2
    358c:	000020cb 	andeq	r2, r0, fp, asr #1
    3590:	000020d6 	ldrdeq	r2, [r0], -r6
    3594:	d6540001 	ldrble	r0, [r4], -r1
    3598:	de000020 	cdple	0, 0, cr0, cr0, cr0, {1}
    359c:	01000020 	tsteq	r0, r0, lsr #32
    35a0:	20de5000 	sbcscs	r5, lr, r0
    35a4:	212a0000 			; <UNDEFINED> instruction: 0x212a0000
    35a8:	00010000 	andeq	r0, r1, r0
    35ac:	00000054 	andeq	r0, r0, r4, asr r0
    35b0:	00000000 	andeq	r0, r0, r0
    35b4:	0020e400 	eoreq	lr, r0, r0, lsl #8
    35b8:	0020e800 	eoreq	lr, r0, r0, lsl #16
    35bc:	53000100 	movwpl	r0, #256	; 0x100
    35c0:	000020ea 	andeq	r2, r0, sl, ror #1
    35c4:	000020f8 	strdeq	r2, [r0], -r8
    35c8:	fa530001 	blx	14c35d4 <__ccfg+0x14a362c>
    35cc:	02000020 	andeq	r0, r0, #32
    35d0:	01000021 	tsteq	r0, r1, lsr #32
    35d4:	00005300 	andeq	r5, r0, r0, lsl #6
    35d8:	00000000 	andeq	r0, r0, r0
    35dc:	20e40000 	rsccs	r0, r4, r0
    35e0:	21180000 	tstcs	r8, r0
    35e4:	00050000 	andeq	r0, r5, r0
    35e8:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    35ec:	0021189f 	mlaeq	r1, pc, r8, r1	; <UNPREDICTABLE>
    35f0:	00215400 	eoreq	r5, r1, r0, lsl #8
    35f4:	f3000600 	vmax.u8	d0, d0, d0
    35f8:	264c5001 	strbcs	r5, [ip], -r1
    35fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3600:	00000000 	andeq	r0, r0, r0
    3604:	0020de00 	eoreq	sp, r0, r0, lsl #28
    3608:	0020e800 	eoreq	lr, r0, r0, lsl #16
    360c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3618:	00002154 	andeq	r2, r0, r4, asr r1
    361c:	00002168 	andeq	r2, r0, r8, ror #2
    3620:	68500001 	ldmdavs	r0, {r0}^
    3624:	b0000021 	andlt	r0, r0, r1, lsr #32
    3628:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    362c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3630:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3634:	00000000 	andeq	r0, r0, r0
    3638:	00215a00 	eoreq	r5, r1, r0, lsl #20
    363c:	00216200 	eoreq	r6, r1, r0, lsl #4
    3640:	53000100 	movwpl	r0, #256	; 0x100
	...
    364c:	0000215e 	andeq	r2, r0, lr, asr r1
    3650:	00002170 	andeq	r2, r0, r0, ror r1
    3654:	70520001 	subsvc	r0, r2, r1
    3658:	72000021 	andvc	r0, r0, #33	; 0x21
    365c:	05000021 	streq	r0, [r0, #-33]	; 0xffffffdf
    3660:	31007200 	mrscc	r7, R8_usr
    3664:	21729f25 	cmncs	r2, r5, lsr #30
    3668:	21780000 	cmncs	r8, r0
    366c:	00010000 	andeq	r0, r1, r0
    3670:	00217c52 	eoreq	r7, r1, r2, asr ip
    3674:	00218e00 	eoreq	r8, r1, r0, lsl #28
    3678:	52000100 	andpl	r0, r0, #0, 2
    367c:	00002192 	muleq	r0, r2, r1
    3680:	0000219c 	muleq	r0, ip, r1
    3684:	9e520001 	cdpls	0, 5, cr0, cr2, cr1, {0}
    3688:	b0000021 	andlt	r0, r0, r1, lsr #32
    368c:	01000021 	tsteq	r0, r1, lsr #32
    3690:	00005200 	andeq	r5, r0, r0, lsl #4
    3694:	00000000 	andeq	r0, r0, r0
    3698:	21620000 	cmncs	r2, r0
    369c:	216c0000 	cmncs	ip, r0
    36a0:	00010000 	andeq	r0, r1, r0
    36a4:	00216c53 	eoreq	r6, r1, r3, asr ip
    36a8:	00216e00 	eoreq	r6, r1, r0, lsl #28
    36ac:	73000500 	movwvc	r0, #1280	; 0x500
    36b0:	9f253100 	svcls	0x00253100
    36b4:	0000216e 	andeq	r2, r0, lr, ror #2
    36b8:	00002170 	andeq	r2, r0, r0, ror r1
    36bc:	70530001 	subsvc	r0, r3, r1
    36c0:	7c000021 	stcvc	0, cr0, [r0], {33}	; 0x21
    36c4:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    36c8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    36cc:	00217c9f 	mlaeq	r1, pc, ip, r7	; <UNPREDICTABLE>
    36d0:	00218200 	eoreq	r8, r1, r0, lsl #4
    36d4:	53000100 	movwpl	r0, #256	; 0x100
    36d8:	00002186 	andeq	r2, r0, r6, lsl #3
    36dc:	0000218c 	andeq	r2, r0, ip, lsl #3
    36e0:	8c530001 	mrrchi	0, 0, r0, r3, cr1
    36e4:	9e000021 	cdpls	0, 0, cr0, cr0, cr1, {1}
    36e8:	02000021 	andeq	r0, r0, #33	; 0x21
    36ec:	9e9f3100 	fmllse	f3, f7, f0
    36f0:	b0000021 	andlt	r0, r0, r1, lsr #32
    36f4:	01000021 	tsteq	r0, r1, lsr #32
    36f8:	00005300 	andeq	r5, r0, r0, lsl #6
    36fc:	00000000 	andeq	r0, r0, r0
    3700:	21620000 	cmncs	r2, r0
    3704:	21680000 	cmncs	r8, r0
    3708:	00020000 	andeq	r0, r2, r0
    370c:	21689f30 	cmncs	r8, r0, lsr pc
    3710:	21a40000 			; <UNDEFINED> instruction: 0x21a40000
    3714:	00010000 	andeq	r0, r1, r0
    3718:	00000050 	andeq	r0, r0, r0, asr r0
    371c:	00000000 	andeq	r0, r0, r0
    3720:	0021a400 	eoreq	sl, r1, r0, lsl #8
    3724:	0021a800 	eoreq	sl, r1, r0, lsl #16
    3728:	72000800 	andvc	r0, r0, #0, 16
    372c:	73244000 			; <UNDEFINED> instruction: 0x73244000
    3730:	a89f2100 	ldmge	pc, {r8, sp}	; <UNPREDICTABLE>
    3734:	b0000021 	andlt	r0, r0, r1, lsr #32
    3738:	01000021 	tsteq	r0, r1, lsr #32
    373c:	00005000 	andeq	r5, r0, r0
    3740:	00000000 	andeq	r0, r0, r0
    3744:	21ba0000 			; <UNDEFINED> instruction: 0x21ba0000
    3748:	21be0000 			; <UNDEFINED> instruction: 0x21be0000
    374c:	000a0000 	andeq	r0, sl, r0
    3750:	1a330070 	bne	cc3918 <__ccfg+0xca3970>
    3754:	00732438 	rsbseq	r2, r3, r8, lsr r4
    3758:	21c29f21 	biccs	r9, r2, r1, lsr #30
    375c:	21c80000 	biccs	r0, r8, r0
    3760:	00010000 	andeq	r0, r1, r0
    3764:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3774:	70000700 	andvc	r0, r0, r0, lsl #14
    3778:	3fff0a00 	svccc	0x00ff0a00
    377c:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3780:	00000000 	andeq	r0, r0, r0
    3784:	21cc0000 	biccs	r0, ip, r0
    3788:	21d00000 	bicscs	r0, r0, r0
    378c:	000f0000 	andeq	r0, pc, r0
    3790:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    3794:	1100701a 	tstne	r0, sl, lsl r0
    3798:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    379c:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    37a0:	00000000 	andeq	r0, r0, r0
    37a4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    37a8:	d0000021 	andle	r0, r0, r1, lsr #32
    37ac:	01000021 	tsteq	r0, r1, lsr #32
    37b0:	00005000 	andeq	r5, r0, r0
    37b4:	00000000 	andeq	r0, r0, r0
    37b8:	21dc0000 	bicscs	r0, ip, r0
    37bc:	21e00000 	mvncs	r0, r0
    37c0:	000f0000 	andeq	r0, pc, r0
    37c4:	3f080070 	svccc	0x00080070
    37c8:	0c00701a 	stceq	0, cr7, [r0], {26}
    37cc:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    37d0:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	dc000000 	stcle	0, cr0, [r0], {-0}
    37dc:	e0000021 	and	r0, r0, r1, lsr #32
    37e0:	01000021 	tsteq	r0, r1, lsr #32
    37e4:	00005000 	andeq	r5, r0, r0
    37e8:	00000000 	andeq	r0, r0, r0
    37ec:	21ec0000 	mvncs	r0, r0
    37f0:	22420000 	subcs	r0, r2, #0
    37f4:	00010000 	andeq	r0, r1, r0
    37f8:	00224250 	eoreq	r4, r2, r0, asr r2
    37fc:	00225000 	eoreq	r5, r2, r0
    3800:	f3000400 	vshl.u8	d0, d0, d0
    3804:	009f5001 	addseq	r5, pc, r1
    3808:	00000000 	andeq	r0, r0, r0
    380c:	2c000000 	stccs	0, cr0, [r0], {-0}
    3810:	34000022 	strcc	r0, [r0], #-34	; 0xffffffde
    3814:	17000022 	strne	r0, [r0, -r2, lsr #32]
    3818:	0a007400 	beq	20820 <__ccfg+0x878>
    381c:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    3820:	1af00800 	bne	ffc05828 <_estack+0xdfc00828>
    3824:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    3828:	00732124 	rsbseq	r2, r3, r4, lsr #2
    382c:	9f212440 	svcls	0x00212440
    3830:	00002238 	andeq	r2, r0, r8, lsr r2
    3834:	00002250 	andeq	r2, r0, r0, asr r2
    3838:	00530001 	subseq	r0, r3, r1
    383c:	00000000 	andeq	r0, r0, r0
    3840:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    3844:	3e000021 	cdpcc	0, 0, cr0, cr0, cr1, {1}
    3848:	01000022 	tsteq	r0, r2, lsr #32
    384c:	00005400 	andeq	r5, r0, r0, lsl #8
    3850:	00000000 	andeq	r0, r0, r0
    3854:	21fa0000 	mvnscs	r0, r0
    3858:	220e0000 	andcs	r0, lr, #0
    385c:	00010000 	andeq	r0, r1, r0
    3860:	00220e52 	eoreq	r0, r2, r2, asr lr
    3864:	00221a00 	eoreq	r1, r2, r0, lsl #20
    3868:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    386c:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3870:	00222c9f 	mlaeq	r2, pc, ip, r2	; <UNPREDICTABLE>
    3874:	00223400 	eoreq	r3, r2, r0, lsl #8
    3878:	52000100 	andpl	r0, r0, #0, 2
	...
    3884:	00002202 	andeq	r2, r0, r2, lsl #4
    3888:	00002220 	andeq	r2, r0, r0, lsr #4
    388c:	20530001 	subscs	r0, r3, r1
    3890:	2c000022 	stccs	0, cr0, [r0], {34}	; 0x22
    3894:	06000022 	streq	r0, [r0], -r2, lsr #32
    3898:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    389c:	2c9f24f0 	cfldrscs	mvf2, [pc], {240}	; 0xf0
    38a0:	38000022 	stmdacc	r0, {r1, r5}
    38a4:	01000022 	tsteq	r0, r2, lsr #32
    38a8:	00005300 	andeq	r5, r0, r0, lsl #6
    38ac:	00000000 	andeq	r0, r0, r0
    38b0:	220c0000 	andcs	r0, ip, #0
    38b4:	220e0000 	andcs	r0, lr, #0
    38b8:	00060000 	andeq	r0, r6, r0
    38bc:	00720076 	rsbseq	r0, r2, r6, ror r0
    38c0:	220e9f22 	andcs	r9, lr, #34, 30	; 0x88
    38c4:	22160000 	andscs	r0, r6, #0
    38c8:	00010000 	andeq	r0, r1, r0
    38cc:	00221652 	eoreq	r1, r2, r2, asr r6
    38d0:	00221800 	eoreq	r1, r2, r0, lsl #16
    38d4:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    38d8:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    38dc:	9f220076 	svcls	0x00220076
    38e0:	00002218 	andeq	r2, r0, r8, lsl r2
    38e4:	0000221a 	andeq	r2, r0, sl, lsl r2
    38e8:	1e550001 	cdpne	0, 5, cr0, cr5, cr1, {0}
    38ec:	20000022 	andcs	r0, r0, r2, lsr #32
    38f0:	06000022 	streq	r0, [r0], -r2, lsr #32
    38f4:	73007100 	movwvc	r7, #256	; 0x100
    38f8:	209f2200 	addscs	r2, pc, r0, lsl #4
    38fc:	28000022 	stmdacs	r0, {r1, r5}
    3900:	01000022 	tsteq	r0, r2, lsr #32
    3904:	22285300 	eorcs	r5, r8, #0, 6
    3908:	222a0000 	eorcs	r0, sl, #0
    390c:	00090000 	andeq	r0, r9, r0
    3910:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    3914:	22007124 	andcs	r7, r0, #36, 2
    3918:	00222a9f 	mlaeq	r2, pc, sl, r2	; <UNPREDICTABLE>
    391c:	00222c00 	eoreq	r2, r2, r0, lsl #24
    3920:	30000200 	andcc	r0, r0, r0, lsl #4
    3924:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3928:	00000000 	andeq	r0, r0, r0
    392c:	00225000 	eoreq	r5, r2, r0
    3930:	00225800 	eoreq	r5, r2, r0, lsl #16
    3934:	50000100 	andpl	r0, r0, r0, lsl #2
    3938:	00002258 	andeq	r2, r0, r8, asr r2
    393c:	00002264 	andeq	r2, r0, r4, ror #4
    3940:	01f30004 	mvnseq	r0, r4
    3944:	00009f50 	andeq	r9, r0, r0, asr pc
    3948:	00000000 	andeq	r0, r0, r0
    394c:	22500000 	subscs	r0, r0, #0
    3950:	225e0000 	subscs	r0, lr, #0
    3954:	00020000 	andeq	r0, r2, r0
    3958:	225e9f30 	subscs	r9, lr, #48, 30	; 0xc0
    395c:	22640000 	rsbcs	r0, r4, #0
    3960:	00010000 	andeq	r0, r1, r0
    3964:	00000050 	andeq	r0, r0, r0, asr r0
    3968:	00000000 	andeq	r0, r0, r0
    396c:	00225200 	eoreq	r5, r2, r0, lsl #4
    3970:	00225800 	eoreq	r5, r2, r0, lsl #16
    3974:	50000100 	andpl	r0, r0, r0, lsl #2
    3978:	00002258 	andeq	r2, r0, r8, asr r2
    397c:	00002264 	andeq	r2, r0, r4, ror #4
    3980:	01f30004 	mvnseq	r0, r4
    3984:	00009f50 	andeq	r9, r0, r0, asr pc
    3988:	00000000 	andeq	r0, r0, r0
    398c:	225c0000 	subscs	r0, ip, #0
    3990:	225e0000 	subscs	r0, lr, #0
    3994:	00010000 	andeq	r0, r1, r0
    3998:	00000050 	andeq	r0, r0, r0, asr r0
    399c:	00000000 	andeq	r0, r0, r0
    39a0:	00226400 	eoreq	r6, r2, r0, lsl #8
    39a4:	00226c00 	eoreq	r6, r2, r0, lsl #24
    39a8:	50000100 	andpl	r0, r0, r0, lsl #2
    39ac:	0000226c 	andeq	r2, r0, ip, ror #4
    39b0:	00002278 	andeq	r2, r0, r8, ror r2
    39b4:	01f30004 	mvnseq	r0, r4
    39b8:	00009f50 	andeq	r9, r0, r0, asr pc
    39bc:	00000000 	andeq	r0, r0, r0
    39c0:	22640000 	rsbcs	r0, r4, #0
    39c4:	22720000 	rsbscs	r0, r2, #0
    39c8:	00020000 	andeq	r0, r2, r0
    39cc:	22729f31 	rsbscs	r9, r2, #49, 30	; 0xc4
    39d0:	22780000 	rsbscs	r0, r8, #0
    39d4:	00010000 	andeq	r0, r1, r0
    39d8:	00000050 	andeq	r0, r0, r0, asr r0
    39dc:	00000000 	andeq	r0, r0, r0
    39e0:	00226600 	eoreq	r6, r2, r0, lsl #12
    39e4:	00226c00 	eoreq	r6, r2, r0, lsl #24
    39e8:	50000100 	andpl	r0, r0, r0, lsl #2
    39ec:	0000226c 	andeq	r2, r0, ip, ror #4
    39f0:	00002278 	andeq	r2, r0, r8, ror r2
    39f4:	01f30004 	mvnseq	r0, r4
    39f8:	00009f50 	andeq	r9, r0, r0, asr pc
    39fc:	00000000 	andeq	r0, r0, r0
    3a00:	22700000 	rsbscs	r0, r0, #0
    3a04:	22720000 	rsbscs	r0, r2, #0
    3a08:	00010000 	andeq	r0, r1, r0
    3a0c:	00000050 	andeq	r0, r0, r0, asr r0
    3a10:	00000000 	andeq	r0, r0, r0
    3a14:	00227800 	eoreq	r7, r2, r0, lsl #16
    3a18:	00228000 	eoreq	r8, r2, r0
    3a1c:	50000100 	andpl	r0, r0, r0, lsl #2
    3a20:	00002280 	andeq	r2, r0, r0, lsl #5
    3a24:	0000228c 	andeq	r2, r0, ip, lsl #5
    3a28:	01f30004 	mvnseq	r0, r4
    3a2c:	00009f50 	andeq	r9, r0, r0, asr pc
    3a30:	00000000 	andeq	r0, r0, r0
    3a34:	22780000 	rsbscs	r0, r8, #0
    3a38:	22860000 	addcs	r0, r6, #0
    3a3c:	00020000 	andeq	r0, r2, r0
    3a40:	22869f31 	addcs	r9, r6, #49, 30	; 0xc4
    3a44:	228c0000 	addcs	r0, ip, #0
    3a48:	00010000 	andeq	r0, r1, r0
    3a4c:	00000050 	andeq	r0, r0, r0, asr r0
    3a50:	00000000 	andeq	r0, r0, r0
    3a54:	00227a00 	eoreq	r7, r2, r0, lsl #20
    3a58:	00228000 	eoreq	r8, r2, r0
    3a5c:	50000100 	andpl	r0, r0, r0, lsl #2
    3a60:	00002280 	andeq	r2, r0, r0, lsl #5
    3a64:	0000228c 	andeq	r2, r0, ip, lsl #5
    3a68:	01f30004 	mvnseq	r0, r4
    3a6c:	00009f50 	andeq	r9, r0, r0, asr pc
    3a70:	00000000 	andeq	r0, r0, r0
    3a74:	22840000 	addcs	r0, r4, #0
    3a78:	22860000 	addcs	r0, r6, #0
    3a7c:	00010000 	andeq	r0, r1, r0
    3a80:	00000050 	andeq	r0, r0, r0, asr r0
    3a84:	00000000 	andeq	r0, r0, r0
    3a88:	00228c00 	eoreq	r8, r2, r0, lsl #24
    3a8c:	00229800 	eoreq	r9, r2, r0, lsl #16
    3a90:	50000100 	andpl	r0, r0, r0, lsl #2
    3a94:	00002298 	muleq	r0, r8, r2
    3a98:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    3a9c:	01f30004 	mvnseq	r0, r4
    3aa0:	00009f50 	andeq	r9, r0, r0, asr pc
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	228c0000 	addcs	r0, ip, #0
    3aac:	22ae0000 	adccs	r0, lr, #0
    3ab0:	00020000 	andeq	r0, r2, r0
    3ab4:	22ae9f30 	adccs	r9, lr, #48, 30	; 0xc0
    3ab8:	22b40000 	adcscs	r0, r4, #0
    3abc:	00010000 	andeq	r0, r1, r0
    3ac0:	00000050 	andeq	r0, r0, r0, asr r0
    3ac4:	00000000 	andeq	r0, r0, r0
    3ac8:	00228e00 	eoreq	r8, r2, r0, lsl #28
    3acc:	00229800 	eoreq	r9, r2, r0, lsl #16
    3ad0:	50000100 	andpl	r0, r0, r0, lsl #2
    3ad4:	00002298 	muleq	r0, r8, r2
    3ad8:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    3adc:	01f30004 	mvnseq	r0, r4
    3ae0:	00009f50 	andeq	r9, r0, r0, asr pc
    3ae4:	00000000 	andeq	r0, r0, r0
    3ae8:	22a00000 	adccs	r0, r0, #0
    3aec:	22a80000 	adccs	r0, r8, #0
    3af0:	00100000 	andseq	r0, r0, r0
    3af4:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    3af8:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    3afc:	00722432 	rsbseq	r2, r2, r2, lsr r4
    3b00:	9f212438 	svcls	0x00212438
    3b04:	000022aa 	andeq	r2, r0, sl, lsr #5
    3b08:	000022ae 	andeq	r2, r0, lr, lsr #5
    3b0c:	00500001 	subseq	r0, r0, r1
    3b10:	00000000 	andeq	r0, r0, r0
    3b14:	94000000 	strls	r0, [r0], #-0
    3b18:	a8000022 	stmdage	r0, {r1, r5}
    3b1c:	01000022 	tsteq	r0, r2, lsr #32
    3b20:	00005300 	andeq	r5, r0, r0, lsl #6
    3b24:	00000000 	andeq	r0, r0, r0
    3b28:	22b80000 	adcscs	r0, r8, #0
    3b2c:	22bc0000 	adcscs	r0, ip, #0
    3b30:	00090000 	andeq	r0, r9, r0
    3b34:	40480070 	submi	r0, r8, r0, ror r0
    3b38:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    3b3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b40:	00000000 	andeq	r0, r0, r0
    3b44:	0022c400 	eoreq	ip, r2, r0, lsl #8
    3b48:	0022d000 	eoreq	sp, r2, r0
    3b4c:	50000100 	andpl	r0, r0, r0, lsl #2
    3b50:	000022d0 	ldrdeq	r2, [r0], -r0
    3b54:	000022f0 	strdeq	r2, [r0], -r0
    3b58:	01f30004 	mvnseq	r0, r4
    3b5c:	00009f50 	andeq	r9, r0, r0, asr pc
    3b60:	00000000 	andeq	r0, r0, r0
    3b64:	22c40000 	sbccs	r0, r4, #0
    3b68:	22e60000 	rsccs	r0, r6, #0
    3b6c:	00060000 	andeq	r0, r6, r0
    3b70:	3f80000c 	svccc	0x0080000c
    3b74:	22e69f40 	rsccs	r9, r6, #64, 30	; 0x100
    3b78:	22f00000 	rscscs	r0, r0, #0
    3b7c:	00010000 	andeq	r0, r1, r0
    3b80:	00000050 	andeq	r0, r0, r0, asr r0
    3b84:	00000000 	andeq	r0, r0, r0
    3b88:	0022c600 	eoreq	ip, r2, r0, lsl #12
    3b8c:	0022d000 	eoreq	sp, r2, r0
    3b90:	50000100 	andpl	r0, r0, r0, lsl #2
    3b94:	000022d0 	ldrdeq	r2, [r0], -r0
    3b98:	000022f0 	strdeq	r2, [r0], -r0
    3b9c:	01f30004 	mvnseq	r0, r4
    3ba0:	00009f50 	andeq	r9, r0, r0, asr pc
    3ba4:	00000000 	andeq	r0, r0, r0
    3ba8:	22d40000 	sbcscs	r0, r4, #0
    3bac:	22da0000 	sbcscs	r0, sl, #0
    3bb0:	00100000 	andseq	r0, r0, r0
    3bb4:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    3bb8:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    3bbc:	00722440 	rsbseq	r2, r2, r0, asr #8
    3bc0:	9f212446 	svcls	0x00212446
    3bc4:	000022e4 	andeq	r2, r0, r4, ror #5
    3bc8:	000022e6 	andeq	r2, r0, r6, ror #5
    3bcc:	00500001 	subseq	r0, r0, r1
    3bd0:	00000000 	andeq	r0, r0, r0
    3bd4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    3bd8:	da000022 	ble	3c68 <__exidx_end+0x1030>
    3bdc:	01000022 	tsteq	r0, r2, lsr #32
    3be0:	00005300 	andeq	r5, r0, r0, lsl #6
    3be4:	00000000 	andeq	r0, r0, r0
    3be8:	22f00000 	rscscs	r0, r0, #0
    3bec:	22f80000 	rscscs	r0, r8, #0
    3bf0:	00010000 	andeq	r0, r1, r0
    3bf4:	0022f850 	eoreq	pc, r2, r0, asr r8	; <UNPREDICTABLE>
    3bf8:	00230400 	eoreq	r0, r3, r0, lsl #8
    3bfc:	f3000400 	vshl.u8	d0, d0, d0
    3c00:	009f5001 	addseq	r5, pc, r1
    3c04:	00000000 	andeq	r0, r0, r0
    3c08:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    3c0c:	fe000022 	cdp2	0, 0, cr0, cr0, cr2, {1}
    3c10:	02000022 	andeq	r0, r0, #34	; 0x22
    3c14:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    3c18:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    3c1c:	01000023 	tsteq	r0, r3, lsr #32
    3c20:	00005000 	andeq	r5, r0, r0
    3c24:	00000000 	andeq	r0, r0, r0
    3c28:	22f20000 	rscscs	r0, r2, #0
    3c2c:	22f80000 	rscscs	r0, r8, #0
    3c30:	00010000 	andeq	r0, r1, r0
    3c34:	0022f850 	eoreq	pc, r2, r0, asr r8	; <UNPREDICTABLE>
    3c38:	00230400 	eoreq	r0, r3, r0, lsl #8
    3c3c:	f3000400 	vshl.u8	d0, d0, d0
    3c40:	009f5001 	addseq	r5, pc, r1
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	fc000000 	stc2	0, cr0, [r0], {-0}
    3c4c:	fe000022 	cdp2	0, 0, cr0, cr0, cr2, {1}
    3c50:	01000022 	tsteq	r0, r2, lsr #32
    3c54:	00005000 	andeq	r5, r0, r0
    3c58:	00000000 	andeq	r0, r0, r0
    3c5c:	23040000 	movwcs	r0, #16384	; 0x4000
    3c60:	230c0000 	movwcs	r0, #49152	; 0xc000
    3c64:	00010000 	andeq	r0, r1, r0
    3c68:	00230c50 	eoreq	r0, r3, r0, asr ip
    3c6c:	00231800 	eoreq	r1, r3, r0, lsl #16
    3c70:	f3000400 	vshl.u8	d0, d0, d0
    3c74:	009f5001 	addseq	r5, pc, r1
    3c78:	00000000 	andeq	r0, r0, r0
    3c7c:	04000000 	streq	r0, [r0], #-0
    3c80:	12000023 	andne	r0, r0, #35	; 0x23
    3c84:	02000023 	andeq	r0, r0, #35	; 0x23
    3c88:	129f3000 	addsne	r3, pc, #0
    3c8c:	18000023 	stmdane	r0, {r0, r1, r5}
    3c90:	01000023 	tsteq	r0, r3, lsr #32
    3c94:	00005000 	andeq	r5, r0, r0
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	23060000 	movwcs	r0, #24576	; 0x6000
    3ca0:	230c0000 	movwcs	r0, #49152	; 0xc000
    3ca4:	00010000 	andeq	r0, r1, r0
    3ca8:	00230c50 	eoreq	r0, r3, r0, asr ip
    3cac:	00231800 	eoreq	r1, r3, r0, lsl #16
    3cb0:	f3000400 	vshl.u8	d0, d0, d0
    3cb4:	009f5001 	addseq	r5, pc, r1
    3cb8:	00000000 	andeq	r0, r0, r0
    3cbc:	10000000 	andne	r0, r0, r0
    3cc0:	12000023 	andne	r0, r0, #35	; 0x23
    3cc4:	01000023 	tsteq	r0, r3, lsr #32
    3cc8:	00005000 	andeq	r5, r0, r0
    3ccc:	00000000 	andeq	r0, r0, r0
    3cd0:	23180000 	tstcs	r8, #0
    3cd4:	231e0000 	tstcs	lr, #0
    3cd8:	00010000 	andeq	r0, r1, r0
    3cdc:	00231e50 	eoreq	r1, r3, r0, asr lr
    3ce0:	00240800 	eoreq	r0, r4, r0, lsl #16
    3ce4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3ce8:	00002408 	andeq	r2, r0, r8, lsl #8
    3cec:	00002428 	andeq	r2, r0, r8, lsr #8
    3cf0:	01f30004 	mvnseq	r0, r4
    3cf4:	00009f50 	andeq	r9, r0, r0, asr pc
    3cf8:	00000000 	andeq	r0, r0, r0
    3cfc:	23180000 	tstcs	r8, #0
    3d00:	23210000 			; <UNDEFINED> instruction: 0x23210000
    3d04:	00010000 	andeq	r0, r1, r0
    3d08:	00232151 	eoreq	r2, r3, r1, asr r1
    3d0c:	00242800 	eoreq	r2, r4, r0, lsl #16
    3d10:	f3000400 	vshl.u8	d0, d0, d0
    3d14:	009f5101 	addseq	r5, pc, r1, lsl #2
    3d18:	00000000 	andeq	r0, r0, r0
    3d1c:	26000000 	strcs	r0, [r0], -r0
    3d20:	2a000023 	bcs	3db4 <__exidx_end+0x117c>
    3d24:	01000023 	tsteq	r0, r3, lsr #32
    3d28:	232a5000 			; <UNDEFINED> instruction: 0x232a5000
    3d2c:	232d0000 			; <UNDEFINED> instruction: 0x232d0000
    3d30:	00010000 	andeq	r0, r1, r0
    3d34:	00233252 	eoreq	r3, r3, r2, asr r2
    3d38:	00233600 	eoreq	r3, r3, r0, lsl #12
    3d3c:	50000100 	andpl	r0, r0, r0, lsl #2
    3d40:	00002360 	andeq	r2, r0, r0, ror #6
    3d44:	00002362 	andeq	r2, r0, r2, ror #6
    3d48:	62500001 	subsvs	r0, r0, #1
    3d4c:	65000023 	strvs	r0, [r0, #-35]	; 0xffffffdd
    3d50:	01000023 	tsteq	r0, r3, lsr #32
    3d54:	236e5200 	cmncs	lr, #0, 4
    3d58:	23700000 	cmncs	r0, #0
    3d5c:	00010000 	andeq	r0, r1, r0
    3d60:	00237050 	eoreq	r7, r3, r0, asr r0
    3d64:	00237300 	eoreq	r7, r3, r0, lsl #6
    3d68:	52000100 	andpl	r0, r0, #0, 2
    3d6c:	0000237e 	andeq	r2, r0, lr, ror r3
    3d70:	00002380 	andeq	r2, r0, r0, lsl #7
    3d74:	80500001 	subshi	r0, r0, r1
    3d78:	83000023 	movwhi	r0, #35	; 0x23
    3d7c:	01000023 	tsteq	r0, r3, lsr #32
    3d80:	238a5200 	orrcs	r5, sl, #0, 4
    3d84:	238c0000 	orrcs	r0, ip, #0
    3d88:	00010000 	andeq	r0, r1, r0
    3d8c:	00239c50 	eoreq	r9, r3, r0, asr ip
    3d90:	0023a000 	eoreq	sl, r3, r0
    3d94:	50000100 	andpl	r0, r0, r0, lsl #2
    3d98:	000023ae 	andeq	r2, r0, lr, lsr #7
    3d9c:	000023b0 			; <UNDEFINED> instruction: 0x000023b0
    3da0:	b0500001 	subslt	r0, r0, r1
    3da4:	b3000023 	movwlt	r0, #35	; 0x23
    3da8:	01000023 	tsteq	r0, r3, lsr #32
    3dac:	23ba5200 			; <UNDEFINED> instruction: 0x23ba5200
    3db0:	23bc0000 			; <UNDEFINED> instruction: 0x23bc0000
    3db4:	00010000 	andeq	r0, r1, r0
    3db8:	0023cc50 	eoreq	ip, r3, r0, asr ip
    3dbc:	0023ce00 	eoreq	ip, r3, r0, lsl #28
    3dc0:	50000100 	andpl	r0, r0, r0, lsl #2
    3dc4:	000023de 	ldrdeq	r2, [r0], -lr
    3dc8:	000023e2 	andeq	r2, r0, r2, ror #7
    3dcc:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    3dd0:	f8000023 			; <UNDEFINED> instruction: 0xf8000023
    3dd4:	01000023 	tsteq	r0, r3, lsr #32
    3dd8:	23f85000 	mvnscs	r5, #0
    3ddc:	23fb0000 	mvnscs	r0, #0
    3de0:	00010000 	andeq	r0, r1, r0
    3de4:	00000052 	andeq	r0, r0, r2, asr r0
    3de8:	00000000 	andeq	r0, r0, r0
    3dec:	00234e00 	eoreq	r4, r3, r0, lsl #28
    3df0:	00235400 	eoreq	r5, r3, r0, lsl #8
    3df4:	72000700 	andvc	r0, r0, #0, 14
    3df8:	3fff0a00 	svccc	0x00ff0a00
    3dfc:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3e00:	00000000 	andeq	r0, r0, r0
    3e04:	24420000 	strbcs	r0, [r2], #-0
    3e08:	244c0000 	strbcs	r0, [ip], #-0
    3e0c:	00090000 	andeq	r0, r9, r0
    3e10:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    3e14:	21200000 			; <UNDEFINED> instruction: 0x21200000
    3e18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	00248c00 	eoreq	r8, r4, r0, lsl #24
    3e24:	00249400 	eoreq	r9, r4, r0, lsl #8
    3e28:	50000100 	andpl	r0, r0, r0, lsl #2
    3e2c:	00002494 	muleq	r0, r4, r4
    3e30:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    3e34:	01f30004 	mvnseq	r0, r4
    3e38:	00009f50 	andeq	r9, r0, r0, asr pc
    3e3c:	00000000 	andeq	r0, r0, r0
    3e40:	24b40000 	ldrtcs	r0, [r4], #0
    3e44:	24dc0000 	ldrbcs	r0, [ip], #0
    3e48:	00010000 	andeq	r0, r1, r0
    3e4c:	0024dc50 	eoreq	sp, r4, r0, asr ip
    3e50:	00251c00 	eoreq	r1, r5, r0, lsl #24
    3e54:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3e58:	0000251c 	andeq	r2, r0, ip, lsl r5
    3e5c:	00002524 	andeq	r2, r0, r4, lsr #10
    3e60:	24500001 	ldrbcs	r0, [r0], #-1
    3e64:	6e000025 	cdpvs	0, 0, cr0, cr0, cr5, {1}
    3e68:	01000025 	tsteq	r0, r5, lsr #32
    3e6c:	256e5400 	strbcs	r5, [lr, #-1024]!	; 0xfffffc00
    3e70:	25aa0000 	strcs	r0, [sl, #0]!
    3e74:	00040000 	andeq	r0, r4, r0
    3e78:	9f5001f3 	svcls	0x005001f3
    3e7c:	000025aa 	andeq	r2, r0, sl, lsr #11
    3e80:	000025ae 	andeq	r2, r0, lr, lsr #11
    3e84:	ae540001 	cdpge	0, 5, cr0, cr4, cr1, {0}
    3e88:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    3e8c:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    3e90:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e98:	00000000 	andeq	r0, r0, r0
    3e9c:	0024ca00 	eoreq	ip, r4, r0, lsl #20
    3ea0:	00250c00 	eoreq	r0, r5, r0, lsl #24
    3ea4:	53000100 	movwpl	r0, #256	; 0x100
	...
    3eb0:	0000253e 	andeq	r2, r0, lr, lsr r5
    3eb4:	00002544 	andeq	r2, r0, r4, asr #10
    3eb8:	00500001 	subseq	r0, r0, r1
    3ebc:	00000000 	andeq	r0, r0, r0
    3ec0:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
    3ec4:	70000025 	andvc	r0, r0, r5, lsr #32
    3ec8:	01000025 	tsteq	r0, r5, lsr #32
    3ecc:	25705000 	ldrbcs	r5, [r0, #-0]!
    3ed0:	25840000 	strcs	r0, [r4]
    3ed4:	00010000 	andeq	r0, r1, r0
    3ed8:	00000054 	andeq	r0, r0, r4, asr r0
    3edc:	00000000 	andeq	r0, r0, r0
    3ee0:	00258400 	eoreq	r8, r5, r0, lsl #8
    3ee4:	0025a400 	eoreq	sl, r5, r0, lsl #8
    3ee8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3efc:	00550001 	subseq	r0, r5, r1
    3f00:	00000000 	andeq	r0, r0, r0
    3f04:	03000000 	movweq	r0, #0
    3f08:	9f7f7500 	svcls	0x007f7500
	...
    3f14:	00550001 	subseq	r0, r5, r1
    3f18:	00000000 	andeq	r0, r0, r0
    3f1c:	04000000 	streq	r0, [r0], #-0
    3f20:	23000026 	movwcs	r0, #38	; 0x26
    3f24:	01000026 	tsteq	r0, r6, lsr #32
    3f28:	26235000 	strtcs	r5, [r3], -r0
    3f2c:	26e40000 	strbtcs	r0, [r4], r0
    3f30:	00010000 	andeq	r0, r1, r0
    3f34:	0026e457 	eoreq	lr, r6, r7, asr r4
    3f38:	00282400 	eoreq	r2, r8, r0, lsl #8
    3f3c:	f3000400 	vshl.u8	d0, d0, d0
    3f40:	009f5001 	addseq	r5, pc, r1
    3f44:	00000000 	andeq	r0, r0, r0
    3f48:	24000000 	strcs	r0, [r0], #-0
    3f4c:	a4000026 	strge	r0, [r0], #-38	; 0xffffffda
    3f50:	01000027 	tsteq	r0, r7, lsr #32
    3f54:	27a65000 	strcs	r5, [r6, r0]!
    3f58:	27e00000 	strbcs	r0, [r0, r0]!
    3f5c:	00010000 	andeq	r0, r1, r0
    3f60:	00000050 	andeq	r0, r0, r0, asr r0
    3f64:	00000000 	andeq	r0, r0, r0
    3f68:	0026cc00 	eoreq	ip, r6, r0, lsl #24
    3f6c:	0026d000 	eoreq	sp, r6, r0
    3f70:	70000300 	andvc	r0, r0, r0, lsl #6
    3f74:	26d09f71 			; <UNDEFINED> instruction: 0x26d09f71
    3f78:	26d60000 	ldrbcs	r0, [r6], r0
    3f7c:	00010000 	andeq	r0, r1, r0
    3f80:	0026d651 	eoreq	sp, r6, r1, asr r6
    3f84:	0026f600 	eoreq	pc, r6, r0, lsl #12
    3f88:	91000200 	mrsls	r0, R8_usr
    3f8c:	0026f654 	eoreq	pc, r6, r4, asr r6	; <UNPREDICTABLE>
    3f90:	00270200 	eoreq	r0, r7, r0, lsl #4
    3f94:	51000100 	mrspl	r0, (UNDEF: 16)
    3f98:	00002702 	andeq	r2, r0, r2, lsl #14
    3f9c:	00002704 	andeq	r2, r0, r4, lsl #14
    3fa0:	54910002 	ldrpl	r0, [r1], #2
    3fa4:	00002704 	andeq	r2, r0, r4, lsl #14
    3fa8:	00002706 	andeq	r2, r0, r6, lsl #14
    3fac:	06510001 	ldrbeq	r0, [r1], -r1
    3fb0:	ac000027 	stcge	0, cr0, [r0], {39}	; 0x27
    3fb4:	02000027 	andeq	r0, r0, #39	; 0x27
    3fb8:	00549100 	subseq	r9, r4, r0, lsl #2
    3fbc:	00000000 	andeq	r0, r0, r0
    3fc0:	30000000 	andcc	r0, r0, r0
    3fc4:	8a000026 	bhi	4064 <__exidx_end+0x142c>
    3fc8:	01000026 	tsteq	r0, r6, lsr #32
    3fcc:	26925100 	ldrcs	r5, [r2], r0, lsl #2
    3fd0:	26940000 	ldrcs	r0, [r4], r0
    3fd4:	00010000 	andeq	r0, r1, r0
    3fd8:	00000051 	andeq	r0, r0, r1, asr r0
    3fdc:	00000000 	andeq	r0, r0, r0
    3fe0:	00268200 	eoreq	r8, r6, r0, lsl #4
    3fe4:	00269000 	eoreq	r9, r6, r0
    3fe8:	52000100 	andpl	r0, r0, #0, 2
    3fec:	00002692 	muleq	r0, r2, r6
    3ff0:	00002774 	andeq	r2, r0, r4, ror r7
    3ff4:	00520001 	subseq	r0, r2, r1
    3ff8:	00000000 	andeq	r0, r0, r0
    3ffc:	82000000 	andhi	r0, r0, #0
    4000:	6a000026 	bvs	40a0 <__exidx_end+0x1468>
    4004:	01000027 	tsteq	r0, r7, lsr #32
    4008:	00005300 	andeq	r5, r0, r0, lsl #6
    400c:	00000000 	andeq	r0, r0, r0
    4010:	26280000 	strtcs	r0, [r8], -r0
    4014:	277e0000 	ldrbcs	r0, [lr, -r0]!
    4018:	00010000 	andeq	r0, r1, r0
    401c:	00000055 	andeq	r0, r0, r5, asr r0
    4020:	00000000 	andeq	r0, r0, r0
    4024:	00262400 	eoreq	r2, r6, r0, lsl #8
    4028:	0026ac00 	eoreq	sl, r6, r0, lsl #24
    402c:	30000200 	andcc	r0, r0, r0, lsl #4
    4030:	0026ac9f 	mlaeq	r6, pc, ip, sl	; <UNPREDICTABLE>
    4034:	0027e000 	eoreq	lr, r7, r0
    4038:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4044:	000026a4 	andeq	r2, r0, r4, lsr #13
    4048:	000026ae 	andeq	r2, r0, lr, lsr #13
    404c:	00510001 	subseq	r0, r1, r1
    4050:	00000000 	andeq	r0, r0, r0
    4054:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4058:	1c000026 	stcne	0, cr0, [r0], {38}	; 0x26
    405c:	02000027 	andeq	r0, r0, #39	; 0x27
    4060:	1c9f3000 	ldcne	0, cr3, [pc], {0}
    4064:	3c000027 	stccc	0, cr0, [r0], {39}	; 0x27
    4068:	01000027 	tsteq	r0, r7, lsr #32
    406c:	273c5100 	ldrcs	r5, [ip, -r0, lsl #2]!
    4070:	27420000 	strbcs	r0, [r2, -r0]
    4074:	00020000 	andeq	r0, r2, r0
    4078:	27429f30 	smlaldxcs	r9, r2, r0, pc	; <UNPREDICTABLE>
    407c:	277c0000 	ldrbcs	r0, [ip, -r0]!
    4080:	00010000 	andeq	r0, r1, r0
    4084:	00000051 	andeq	r0, r0, r1, asr r0
    4088:	00000000 	andeq	r0, r0, r0
    408c:	0026f800 	eoreq	pc, r6, r0, lsl #16
    4090:	0026fc00 	eoreq	pc, r6, r0, lsl #24
    4094:	5e000100 	adfpls	f0, f0, f0
    4098:	00002704 	andeq	r2, r0, r4, lsl #14
    409c:	00002706 	andeq	r2, r0, r6, lsl #14
    40a0:	065e0001 	ldrbeq	r0, [lr], -r1
    40a4:	0c000027 	stceq	0, cr0, [r0], {39}	; 0x27
    40a8:	01000027 	tsteq	r0, r7, lsr #32
    40ac:	270c5100 	strcs	r5, [ip, -r0, lsl #2]
    40b0:	27140000 	ldrcs	r0, [r4, -r0]
    40b4:	00030000 	andeq	r0, r3, r0
    40b8:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    40bc:	00000000 	andeq	r0, r0, r0
    40c0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    40c4:	f6000026 			; <UNDEFINED> instruction: 0xf6000026
    40c8:	02000026 	andeq	r0, r0, #38	; 0x26
    40cc:	f69f3000 			; <UNDEFINED> instruction: 0xf69f3000
    40d0:	00000026 	andeq	r0, r0, r6, lsr #32
    40d4:	01000027 	tsteq	r0, r7, lsr #32
    40d8:	27005e00 	strcs	r5, [r0, -r0, lsl #28]
    40dc:	27020000 	strcs	r0, [r2, -r0]
    40e0:	00050000 	andeq	r0, r5, r0
    40e4:	26380071 			; <UNDEFINED> instruction: 0x26380071
    40e8:	0027029f 	mlaeq	r7, pc, r2, r0	; <UNPREDICTABLE>
    40ec:	00270400 	eoreq	r0, r7, r0, lsl #8
    40f0:	91000600 	tstls	r0, r0, lsl #12
    40f4:	26380654 			; <UNDEFINED> instruction: 0x26380654
    40f8:	0027049f 	mlaeq	r7, pc, r4, r0	; <UNPREDICTABLE>
    40fc:	00270600 	eoreq	r0, r7, r0, lsl #12
    4100:	5e000100 	adfpls	f0, f0, f0
    4104:	00002706 	andeq	r2, r0, r6, lsl #14
    4108:	0000273c 	andeq	r2, r0, ip, lsr r7
    410c:	54910006 	ldrpl	r0, [r1], #6
    4110:	9f263806 	svcls	0x00263806
    4114:	0000273c 	andeq	r2, r0, ip, lsr r7
    4118:	00002742 	andeq	r2, r0, r2, asr #14
    411c:	9f300002 	svcls	0x00300002
    4120:	00002742 	andeq	r2, r0, r2, asr #14
    4124:	000027ac 	andeq	r2, r0, ip, lsr #15
    4128:	005e0001 	subseq	r0, lr, r1
    412c:	00000000 	andeq	r0, r0, r0
    4130:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4134:	3c000027 	stccc	0, cr0, [r0], {39}	; 0x27
    4138:	01000027 	tsteq	r0, r7, lsr #32
    413c:	00005c00 	andeq	r5, r0, r0, lsl #24
    4140:	00000000 	andeq	r0, r0, r0
    4144:	27460000 	strbcs	r0, [r6, -r0]
    4148:	27ac0000 	strcs	r0, [ip, r0]!
    414c:	00010000 	andeq	r0, r1, r0
    4150:	0000005a 	andeq	r0, r0, sl, asr r0
    4154:	00000000 	andeq	r0, r0, r0
    4158:	00274a00 	eoreq	r4, r7, r0, lsl #20
    415c:	00278600 	eoreq	r8, r7, r0, lsl #12
    4160:	5c000100 	stfpls	f0, [r0], {-0}
    4164:	00002786 	andeq	r2, r0, r6, lsl #15
    4168:	0000278a 	andeq	r2, r0, sl, lsl #15
    416c:	00510001 	subseq	r0, r1, r1
    4170:	00000000 	andeq	r0, r0, r0
    4174:	8a000000 	bhi	417c <__exidx_end+0x1544>
    4178:	94000027 	strls	r0, [r0], #-39	; 0xffffffd9
    417c:	17000027 	strne	r0, [r0, -r7, lsr #32]
    4180:	12007100 	andne	r7, r0, #0, 2
    4184:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4188:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    418c:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    4190:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    4194:	9f131600 	svcls	0x00131600
	...
    41a0:	000027b4 			; <UNDEFINED> instruction: 0x000027b4
    41a4:	000027c0 	andeq	r2, r0, r0, asr #15
    41a8:	9f300002 	svcls	0x00300002
    41ac:	000027c0 	andeq	r2, r0, r0, asr #15
    41b0:	000027e0 	andeq	r2, r0, r0, ror #15
    41b4:	00510001 	subseq	r0, r1, r1
    41b8:	00000000 	andeq	r0, r0, r0
    41bc:	b6000000 	strlt	r0, [r0], -r0
    41c0:	b8000027 	stmdalt	r0, {r0, r1, r2, r5}
    41c4:	01000027 	tsteq	r0, r7, lsr #32
    41c8:	27b85300 	ldrcs	r5, [r8, r0, lsl #6]!
    41cc:	27c00000 	strbcs	r0, [r0, r0]
    41d0:	00020000 	andeq	r0, r2, r0
    41d4:	27c09f4f 	strbcs	r9, [r0, pc, asr #30]
    41d8:	27d00000 	ldrbcs	r0, [r0, r0]
    41dc:	00010000 	andeq	r0, r1, r0
    41e0:	0027d053 	eoreq	sp, r7, r3, asr r0
    41e4:	0027d400 	eoreq	sp, r7, r0, lsl #8
    41e8:	73000500 	movwvc	r0, #1280	; 0x500
    41ec:	9f253400 	svcls	0x00253400
    41f0:	000027d4 	ldrdeq	r2, [r0], -r4
    41f4:	000027d8 	ldrdeq	r2, [r0], -r8
    41f8:	00530001 	subseq	r0, r3, r1
    41fc:	00000000 	andeq	r0, r0, r0
    4200:	cc000000 	stcgt	0, cr0, [r0], {-0}
    4204:	ac000026 	stcge	0, cr0, [r0], {38}	; 0x26
    4208:	06000027 	streq	r0, [r0], -r7, lsr #32
    420c:	139c0c00 	orrsne	r0, ip, #0, 24
    4210:	009f5000 	addseq	r5, pc, r0
    4214:	00000000 	andeq	r0, r0, r0
    4218:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    421c:	44000026 	strmi	r0, [r0], #-38	; 0xffffffda
    4220:	01000026 	tsteq	r0, r6, lsr #32
    4224:	00005300 	andeq	r5, r0, r0, lsl #6
    4228:	00000000 	andeq	r0, r0, r0
    422c:	26580000 	ldrbcs	r0, [r8], -r0
    4230:	26640000 	strbtcs	r0, [r4], -r0
    4234:	00010000 	andeq	r0, r1, r0
    4238:	00000052 	andeq	r0, r0, r2, asr r0
    423c:	00000000 	andeq	r0, r0, r0
    4240:	00266e00 	eoreq	r6, r6, r0, lsl #28
    4244:	00267a00 	eoreq	r7, r6, r0, lsl #20
    4248:	52000100 	andpl	r0, r0, #0, 2
	...
    4254:	0000267a 	andeq	r2, r0, sl, ror r6
    4258:	0000276a 	andeq	r2, r0, sl, ror #14
    425c:	00530001 	subseq	r0, r3, r1
    4260:	00000000 	andeq	r0, r0, r0
    4264:	32000000 	andcc	r0, r0, #0
    4268:	3c000028 	stccc	0, cr0, [r0], {40}	; 0x28
    426c:	01000028 	tsteq	r0, r8, lsr #32
    4270:	283c5000 	ldmdacs	ip!, {ip, lr}
    4274:	28460000 	stmdacs	r6, {}^	; <UNPREDICTABLE>
    4278:	000e0000 	andeq	r0, lr, r0
    427c:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    4280:	2b141680 	blcs	509c88 <__ccfg+0x4e9ce0>
    4284:	16000128 	strne	r0, [r0], -r8, lsr #2
    4288:	00009f13 	andeq	r9, r0, r3, lsl pc
    428c:	00000000 	andeq	r0, r0, r0
    4290:	282c0000 	stmdacs	ip!, {}	; <UNPREDICTABLE>
    4294:	28580000 	ldmdacs	r8, {}^	; <UNPREDICTABLE>
    4298:	00010000 	andeq	r0, r1, r0
    429c:	00000054 	andeq	r0, r0, r4, asr r0
    42a0:	00000000 	andeq	r0, r0, r0
    42a4:	00285c00 	eoreq	r5, r8, r0, lsl #24
    42a8:	00286200 	eoreq	r6, r8, r0, lsl #4
    42ac:	73001500 	movwvc	r1, #1280	; 0x500
    42b0:	4b401200 	blmi	1008ab8 <__ccfg+0xfe8b10>
    42b4:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    42b8:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    42bc:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    42c0:	9f131600 	svcls	0x00131600
	...
    42cc:	00002868 	andeq	r2, r0, r8, ror #16
    42d0:	00002872 	andeq	r2, r0, r2, ror r8
    42d4:	00740017 	rsbseq	r0, r4, r7, lsl r0
    42d8:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    42dc:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    42e0:	4b401416 	blmi	1009340 <__ccfg+0xfe9398>
    42e4:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    42e8:	13160001 	tstne	r6, #1
    42ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    42fc:	52000100 	andpl	r0, r0, #0, 2
	...
    4310:	00500001 	subseq	r0, r0, r1
	...
    4320:	01000000 	mrseq	r0, (UNDEF: 0)
    4324:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    4334:	00010000 	andeq	r0, r1, r0
    4338:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4348:	70001600 	andvc	r1, r0, r0, lsl #12
    434c:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    4350:	244b4000 	strbcs	r4, [fp], #-0
    4354:	00050c22 	andeq	r0, r5, r2, lsr #24
    4358:	282d8000 	stmdacs	sp!, {pc}
    435c:	13160001 	tstne	r6, #1
    4360:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4364:	00000000 	andeq	r0, r0, r0
    4368:	00289c00 	eoreq	r9, r8, r0, lsl #24
    436c:	0028de00 	eoreq	sp, r8, r0, lsl #28
    4370:	09000300 	stmdbeq	r0, {r8, r9}
    4374:	28de9fff 	ldmcs	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    4378:	28e80000 	stmiacs	r8!, {}^	; <UNPREDICTABLE>
    437c:	00010000 	andeq	r0, r1, r0
    4380:	00000050 	andeq	r0, r0, r0, asr r0
    4384:	00000000 	andeq	r0, r0, r0
    4388:	0028a800 	eoreq	sl, r8, r0, lsl #16
    438c:	0028b600 	eoreq	fp, r8, r0, lsl #12
    4390:	50000100 	andpl	r0, r0, r0, lsl #2
    4394:	000028ba 			; <UNDEFINED> instruction: 0x000028ba
    4398:	000028d6 	ldrdeq	r2, [r0], -r6
    439c:	d8500001 	ldmdale	r0, {r0}^
    43a0:	da000028 	ble	4448 <__exidx_end+0x1810>
    43a4:	01000028 	tsteq	r0, r8, lsr #32
    43a8:	28dc5000 	ldmcs	ip, {ip, lr}^
    43ac:	28de0000 	ldmcs	lr, {}^	; <UNPREDICTABLE>
    43b0:	00010000 	andeq	r0, r1, r0
    43b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    43c4:	09000300 	stmdbeq	r0, {r8, r9}
    43c8:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    43cc:	00000000 	andeq	r0, r0, r0
    43d0:	00010000 	andeq	r0, r1, r0
    43d4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    43e4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    43f0:	000028e8 	andeq	r2, r0, r8, ror #17
    43f4:	00002922 	andeq	r2, r0, r2, lsr #18
    43f8:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    43fc:	0029229f 	mlaeq	r9, pc, r2, r2	; <UNPREDICTABLE>
    4400:	00292600 	eoreq	r2, r9, r0, lsl #12
    4404:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    4408:	0029269f 	mlaeq	r9, pc, r6, r2	; <UNPREDICTABLE>
    440c:	00292a00 	eoreq	r2, r9, r0, lsl #20
    4410:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    4414:	00292a9f 	mlaeq	r9, pc, sl, r2	; <UNPREDICTABLE>
    4418:	00294800 	eoreq	r4, r9, r0, lsl #16
    441c:	09000300 	stmdbeq	r0, {r8, r9}
    4420:	29489fff 	stmdbcs	r8, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    4424:	294a0000 	stmdbcs	sl, {}^	; <UNPREDICTABLE>
    4428:	00010000 	andeq	r0, r1, r0
    442c:	00294a50 	eoreq	r4, r9, r0, asr sl
    4430:	00294c00 	eoreq	r4, r9, r0, lsl #24
    4434:	09000300 	stmdbeq	r0, {r8, r9}
    4438:	294c9fff 	stmdbcs	ip, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    443c:	29540000 	ldmdbcs	r4, {}^	; <UNPREDICTABLE>
    4440:	00010000 	andeq	r0, r1, r0
    4444:	00000050 	andeq	r0, r0, r0, asr r0
    4448:	00000000 	andeq	r0, r0, r0
    444c:	0028f800 	eoreq	pc, r8, r0, lsl #16
    4450:	00295000 	eoreq	r5, r9, r0
    4454:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4460:	0000296c 	andeq	r2, r0, ip, ror #18
    4464:	00002975 	andeq	r2, r0, r5, ror r9
    4468:	75500001 	ldrbvc	r0, [r0, #-1]
    446c:	8a000029 	bhi	4518 <__exidx_end+0x18e0>
    4470:	01000029 	tsteq	r0, r9, lsr #32
    4474:	298a5400 	stmibcs	sl, {sl, ip, lr}
    4478:	298e0000 	stmibcs	lr, {}	; <UNPREDICTABLE>
    447c:	00040000 	andeq	r0, r4, r0
    4480:	9f5001f3 	svcls	0x005001f3
    4484:	0000298e 	andeq	r2, r0, lr, lsl #19
    4488:	00002990 	muleq	r0, r0, r9
    448c:	90540001 	subsls	r0, r4, r1
    4490:	94000029 	strls	r0, [r0], #-41	; 0xffffffd7
    4494:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    4498:	5001f300 	andpl	pc, r1, r0, lsl #6
    449c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44a0:	00000000 	andeq	r0, r0, r0
    44a4:	00296c00 	eoreq	r6, r9, r0, lsl #24
    44a8:	00297500 	eoreq	r7, r9, r0, lsl #10
    44ac:	51000100 	mrspl	r0, (UNDEF: 16)
    44b0:	00002975 	andeq	r2, r0, r5, ror r9
    44b4:	0000298a 	andeq	r2, r0, sl, lsl #19
    44b8:	8a550001 	bhi	15444c4 <__ccfg+0x152451c>
    44bc:	8e000029 	cdphi	0, 0, cr0, cr0, cr9, {1}
    44c0:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    44c4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    44c8:	00298e9f 	mlaeq	r9, pc, lr, r8	; <UNPREDICTABLE>
    44cc:	00299000 	eoreq	r9, r9, r0
    44d0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    44d4:	00002990 	muleq	r0, r0, r9
    44d8:	00002994 	muleq	r0, r4, r9
    44dc:	01f30004 	mvnseq	r0, r4
    44e0:	00009f51 	andeq	r9, r0, r1, asr pc
    44e4:	00000000 	andeq	r0, r0, r0
    44e8:	29760000 	ldmdbcs	r6!, {}^	; <UNPREDICTABLE>
    44ec:	298d0000 	stmibcs	sp, {}	; <UNPREDICTABLE>
    44f0:	00050000 	andeq	r0, r5, r0
    44f4:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    44f8:	00298e9f 	mlaeq	r9, pc, lr, r8	; <UNPREDICTABLE>
    44fc:	00299400 	eoreq	r9, r9, r0, lsl #8
    4500:	70000500 	andvc	r0, r0, r0, lsl #10
    4504:	9f293000 	svcls	0x00293000
	...
    4510:	00002994 	muleq	r0, r4, r9
    4514:	00002996 	muleq	r0, r6, r9
    4518:	96500001 	ldrbls	r0, [r0], -r1
    451c:	9c000029 	stcls	0, cr0, [r0], {41}	; 0x29
    4520:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    4524:	5001f300 	andpl	pc, r1, r0, lsl #6
    4528:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    452c:	00000000 	andeq	r0, r0, r0
    4530:	00299400 	eoreq	r9, r9, r0, lsl #8
    4534:	00299800 	eoreq	r9, r9, r0, lsl #16
    4538:	51000100 	mrspl	r0, (UNDEF: 16)
    453c:	00002998 	muleq	r0, r8, r9
    4540:	0000299c 	muleq	r0, ip, r9
    4544:	01f30004 	mvnseq	r0, r4
    4548:	00009f51 	andeq	r9, r0, r1, asr pc
    454c:	00000000 	andeq	r0, r0, r0
    4550:	29940000 	ldmibcs	r4, {}	; <UNPREDICTABLE>
    4554:	299b0000 	ldmibcs	fp, {}	; <UNPREDICTABLE>
    4558:	00010000 	andeq	r0, r1, r0
    455c:	00299b52 	eoreq	r9, r9, r2, asr fp
    4560:	00299c00 	eoreq	r9, r9, r0, lsl #24
    4564:	f3000400 	vshl.u8	d0, d0, d0
    4568:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    4578:	01000000 	mrseq	r0, (UNDEF: 0)
    457c:	00005000 	andeq	r5, r0, r0
    4580:	00000000 	andeq	r0, r0, r0
    4584:	00040000 	andeq	r0, r4, r0
    4588:	9f5001f3 	svcls	0x005001f3
	...
    459c:	00510001 	subseq	r0, r1, r1
    45a0:	00000000 	andeq	r0, r0, r0
    45a4:	04000000 	streq	r0, [r0], #-0
    45a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    45ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    45bc:	52000100 	andpl	r0, r0, #0, 2
	...
    45c8:	01f30004 	mvnseq	r0, r4
    45cc:	00009f52 	andeq	r9, r0, r2, asr pc
    45d0:	00000000 	andeq	r0, r0, r0
    45d4:	00010000 	andeq	r0, r1, r0
    45d8:	00000052 	andeq	r0, r0, r2, asr r0
    45dc:	00000000 	andeq	r0, r0, r0
    45e0:	f3001500 	vrshl.u8	d1, d0, d0
    45e4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    45e8:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    45ec:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    45f0:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    45f4:	9f131600 	svcls	0x00131600
	...
    4608:	00530001 	subseq	r0, r3, r1
    460c:	00000000 	andeq	r0, r0, r0
    4610:	04000000 	streq	r0, [r0], #-0
    4614:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4618:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4628:	70000400 	andvc	r0, r0, r0, lsl #8
    462c:	009f0480 	addseq	r0, pc, r0, lsl #9
    4630:	00000000 	andeq	r0, r0, r0
    4634:	0d000000 	stceq	0, cr0, [r0, #-0]
    4638:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    463c:	01f32431 	mvnseq	r2, r1, lsr r4
    4640:	80232250 	eorhi	r2, r3, r0, asr r2
    4644:	00009f04 	andeq	r9, r0, r4, lsl #30
    4648:	00000000 	andeq	r0, r0, r0
    464c:	00010000 	andeq	r0, r1, r0
    4650:	00000050 	andeq	r0, r0, r0, asr r0
    4654:	00000000 	andeq	r0, r0, r0
    4658:	f3005200 	vhsub.u8	d5, d0, d0
    465c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4660:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4664:	f3048023 	vhadd.u8	d8, d4, d19
    4668:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    466c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4670:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4674:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    4678:	13160001 	tstne	r6, #1
    467c:	f3048423 	vshl.u8	d8, d19, d4
    4680:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4684:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4688:	f3048023 	vhadd.u8	d8, d4, d19
    468c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4690:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4694:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4698:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    469c:	13160001 	tstne	r6, #1
    46a0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    46a4:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    46a8:	13160001 	tstne	r6, #1
    46ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    46bc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    46c8:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    46cc:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    46d0:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    46d4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    46d8:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    46dc:	f3131600 	vmax.u16	d1, d3, d0
    46e0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    46e4:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    46e8:	0001282e 	andeq	r2, r1, lr, lsr #16
    46ec:	01f31316 	mvnseq	r1, r6, lsl r3
    46f0:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    46f4:	13160001 	tstne	r6, #1
    46f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4708:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4714:	01f30004 	mvnseq	r0, r4
    4718:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    4728:	00010000 	andeq	r0, r1, r0
    472c:	00000051 	andeq	r0, r0, r1, asr r0
    4730:	00000000 	andeq	r0, r0, r0
    4734:	f3000400 	vshl.u8	d0, d0, d0
    4738:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    4748:	01000000 	mrseq	r0, (UNDEF: 0)
    474c:	00005200 	andeq	r5, r0, r0, lsl #4
    4750:	00000000 	andeq	r0, r0, r0
    4754:	00040000 	andeq	r0, r4, r0
    4758:	9f5201f3 	svcls	0x005201f3
	...
    4764:	00520001 	subseq	r0, r2, r1
    4768:	00000000 	andeq	r0, r0, r0
    476c:	1b000000 	blne	4774 <__exidx_end+0x1b3c>
    4770:	5201f300 	andpl	pc, r1, #0, 6
    4774:	01f32540 	mvnseq	r2, r0, asr #10
    4778:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    477c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4780:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4784:	01282b80 	smlawbeq	r8, r0, fp, r2
    4788:	9f131600 	svcls	0x00131600
	...
    479c:	00530001 	subseq	r0, r3, r1
    47a0:	00000000 	andeq	r0, r0, r0
    47a4:	04000000 	streq	r0, [r0], #-0
    47a8:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    47ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47b0:	00000000 	andeq	r0, r0, r0
    47b4:	53000100 	movwpl	r0, #256	; 0x100
	...
    47c0:	01f3001b 	mvnseq	r0, fp, lsl r0
    47c4:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    47c8:	01f35301 	mvnseq	r5, r1, lsl #6
    47cc:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    47d0:	000f0c22 	andeq	r0, pc, r2, lsr #24
    47d4:	282b8000 	stmdacs	fp!, {pc}
    47d8:	13160001 	tstne	r6, #1
    47dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    47ec:	91000200 	mrsls	r0, R8_usr
	...
    47f8:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    480c:	70000400 	andvc	r0, r0, r0, lsl #8
    4810:	009f0480 	addseq	r0, pc, r0, lsl #9
    4814:	00000000 	andeq	r0, r0, r0
    4818:	0d000000 	stceq	0, cr0, [r0, #-0]
    481c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4820:	01f32431 	mvnseq	r2, r1, lsr r4
    4824:	80232250 	eorhi	r2, r3, r0, asr r2
    4828:	00009f04 	andeq	r9, r0, r4, lsl #30
    482c:	00000000 	andeq	r0, r0, r0
    4830:	00010000 	andeq	r0, r1, r0
    4834:	00000050 	andeq	r0, r0, r0, asr r0
    4838:	00000000 	andeq	r0, r0, r0
    483c:	f3006400 	vshl.u8	d6, d0, d0
    4840:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4844:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4848:	f3048023 	vhadd.u8	d8, d4, d19
    484c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4850:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4854:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4858:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    485c:	8000000f 	andhi	r0, r0, pc
    4860:	0001282c 	andeq	r2, r1, ip, lsr #16
    4864:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    4868:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    486c:	01f32431 	mvnseq	r2, r1, lsr r4
    4870:	80232250 	eorhi	r2, r3, r0, asr r2
    4874:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    4878:	01f32431 	mvnseq	r2, r1, lsr r4
    487c:	01f32250 	mvnseq	r2, r0, asr r2
    4880:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4884:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4888:	282c8000 	stmdacs	ip!, {pc}
    488c:	13160001 	tstne	r6, #1
    4890:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4894:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4898:	8000000f 	andhi	r0, r0, pc
    489c:	0001282b 	andeq	r2, r1, fp, lsr #16
    48a0:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    48b0:	0a000000 	beq	48b8 <__exidx_end+0x1c80>
    48b4:	0a007400 	beq	218bc <__ccfg+0x1914>
    48b8:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    48bc:	009f2400 	addseq	r2, pc, r0, lsl #8
    48c0:	00000000 	andeq	r0, r0, r0
    48c4:	0c000000 	stceq	0, cr0, [r0], {-0}
    48c8:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    48cc:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    48d0:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    48d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48d8:	00000000 	andeq	r0, r0, r0
    48dc:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    48e0:	0a029400 	beq	a98e8 <__ccfg+0x89940>
    48e4:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    48e8:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    48ec:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    48f0:	4b405301 	blmi	10194fc <__ccfg+0xff9554>
    48f4:	0f0c2224 	svceq	0x000c2224
    48f8:	2b800000 	blcs	fe004900 <_estack+0xddfff900>
    48fc:	16000128 	strne	r0, [r0], -r8, lsr #2
    4900:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    4910:	01000000 	mrseq	r0, (UNDEF: 0)
    4914:	00005000 	andeq	r5, r0, r0
    4918:	00000000 	andeq	r0, r0, r0
    491c:	00040000 	andeq	r0, r4, r0
    4920:	9f5001f3 	svcls	0x005001f3
	...
    4934:	00510001 	subseq	r0, r1, r1
    4938:	00000000 	andeq	r0, r0, r0
    493c:	04000000 	streq	r0, [r0], #-0
    4940:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4944:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4954:	52000100 	andpl	r0, r0, #0, 2
	...
    4960:	00540001 	subseq	r0, r4, r1
    4964:	00000000 	andeq	r0, r0, r0
    4968:	15000000 	strne	r0, [r0, #-0]
    496c:	5201f300 	andpl	pc, r1, #0, 6
    4970:	01f32540 	mvnseq	r2, r0, asr #10
    4974:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    4978:	2e302540 	cfneg32cs	mvfx2, mvfx0
    497c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4980:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4990:	00010000 	andeq	r0, r1, r0
    4994:	00000055 	andeq	r0, r0, r5, asr r0
    4998:	00000000 	andeq	r0, r0, r0
    499c:	f3001d00 	vpadd.f32	d1, d0, d0
    49a0:	01f35001 	mvnseq	r5, r1
    49a4:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    49a8:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    49ac:	f3225101 	vrhadd.u32	d5, d2, d1
    49b0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    49b4:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    49b8:	9f131600 	svcls	0x00131600
	...
    49cc:	00750006 	rsbseq	r0, r5, r6
    49d0:	9f1a0074 	svcls	0x001a0074
	...
    49e4:	00550001 	subseq	r0, r5, r1
    49e8:	00000000 	andeq	r0, r0, r0
    49ec:	1d000000 	stcne	0, cr0, [r0, #-0]
    49f0:	5001f300 	andpl	pc, r1, r0, lsl #6
    49f4:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    49f8:	01f30223 	mvnseq	r0, r3, lsr #4
    49fc:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4a00:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4a04:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4a08:	16000128 	strne	r0, [r0], -r8, lsr #2
    4a0c:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4a1c:	00070000 	andeq	r0, r7, r0
    4a20:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    4a24:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    4a34:	05000000 	streq	r0, [r0, #-0]
    4a38:	30007000 	andcc	r7, r0, r0
    4a3c:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    4a4c:	00010000 	andeq	r0, r1, r0
    4a50:	00000050 	andeq	r0, r0, r0, asr r0
    4a54:	00000000 	andeq	r0, r0, r0
    4a58:	f3000400 	vshl.u8	d0, d0, d0
    4a5c:	009f5001 	addseq	r5, pc, r1
	...
    4a6c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a70:	00005100 	andeq	r5, r0, r0, lsl #2
    4a74:	00000000 	andeq	r0, r0, r0
    4a78:	00040000 	andeq	r0, r4, r0
    4a7c:	9f5101f3 	svcls	0x005101f3
	...
    4a90:	00520001 	subseq	r0, r2, r1
    4a94:	00000000 	andeq	r0, r0, r0
    4a98:	01000000 	mrseq	r0, (UNDEF: 0)
    4a9c:	00005400 	andeq	r5, r0, r0, lsl #8
    4aa0:	00000000 	andeq	r0, r0, r0
    4aa4:	001b0000 	andseq	r0, fp, r0
    4aa8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4aac:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    4ab0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4ab4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4ab8:	8000000f 	andhi	r0, r0, pc
    4abc:	0001282b 	andeq	r2, r1, fp, lsr #16
    4ac0:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4ad0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ad4:	00005300 	andeq	r5, r0, r0, lsl #6
    4ad8:	00000000 	andeq	r0, r0, r0
    4adc:	00010000 	andeq	r0, r1, r0
    4ae0:	00000055 	andeq	r0, r0, r5, asr r0
    4ae4:	00000000 	andeq	r0, r0, r0
    4ae8:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    4aec:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4af0:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4af4:	4b405301 	blmi	1019700 <__ccfg+0xff9758>
    4af8:	0f0c2224 	svceq	0x000c2224
    4afc:	2b800000 	blcs	fe004b04 <_estack+0xddfffb04>
    4b00:	16000128 	strne	r0, [r0], -r8, lsr #2
    4b04:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4b14:	00010000 	andeq	r0, r1, r0
    4b18:	00000056 	andeq	r0, r0, r6, asr r0
    4b1c:	00000000 	andeq	r0, r0, r0
    4b20:	70000600 	andvc	r0, r0, r0, lsl #12
    4b24:	22007100 	andcs	r7, r0, #0, 2
    4b28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b2c:	00000000 	andeq	r0, r0, r0
    4b30:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4b3c:	01f30023 	mvnseq	r0, r3, lsr #32
    4b40:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4b44:	f3022322 	vcgt.u8	d2, d2, d18
    4b48:	01f35001 	mvnseq	r5, r1
    4b4c:	01f32251 	mvnseq	r2, r1, asr r2
    4b50:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4b54:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4b58:	282b8000 	stmdacs	fp!, {pc}
    4b5c:	13160001 	tstne	r6, #1
    4b60:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4b70:	76000600 	strvc	r0, [r0], -r0, lsl #12
    4b74:	1a007400 	bne	21b7c <__ccfg+0x1bd4>
    4b78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4b7c:	00000000 	andeq	r0, r0, r0
    4b80:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4b94:	00560001 	subseq	r0, r6, r1
    4b98:	00000000 	andeq	r0, r0, r0
    4b9c:	23000000 	movwcs	r0, #0
    4ba0:	5001f300 	andpl	pc, r1, r0, lsl #6
    4ba4:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    4ba8:	01f30223 	mvnseq	r0, r3, lsr #4
    4bac:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4bb0:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    4bb4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4bb8:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4bbc:	01282b80 	smlawbeq	r8, r0, fp, r2
    4bc0:	9f131600 	svcls	0x00131600
	...
    4bd4:	00760007 	rsbseq	r0, r6, r7
    4bd8:	1affff0a 	bne	4808 <__exidx_end+0x1bd0>
    4bdc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4bec:	70000500 	andvc	r0, r0, r0, lsl #10
    4bf0:	9f293000 	svcls	0x00293000
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
}
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	0000000c 	andeq	r0, r0, ip
  18:	000000c8 	andeq	r0, r0, r8, asr #1
  1c:	00000138 	andeq	r0, r0, r8, lsr r1
	...
  28:	000000e4 	andeq	r0, r0, r4, ror #1
  2c:	10270002 	eorne	r0, r7, r2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	00000200 	andeq	r0, r0, r0, lsl #4
  3c:	0000000c 	andeq	r0, r0, ip
			i = k;
  40:	0000020c 	andeq	r0, r0, ip, lsl #4
				j->Next = k;
  44:	0000002c 	andeq	r0, r0, ip, lsr #32
  48:	00000238 	andeq	r0, r0, r8, lsr r2
}
  4c:	0000002a 	andeq	r0, r0, sl, lsr #32
  50:	00000264 	andeq	r0, r0, r4, ror #4
  54:	0000003c 	andeq	r0, r0, ip, lsr r0
		release;
  58:	00000000 	andeq	r0, r0, r0
  5c:	00000040 	andeq	r0, r0, r0, asr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	00000020 	andeq	r0, r0, r0, lsr #32
  68:	000002a0 	andeq	r0, r0, r0, lsr #5
  6c:	00000054 	andeq	r0, r0, r4, asr r0
  70:	000002f4 	strdeq	r0, [r0], -r4
  74:	00000040 	andeq	r0, r0, r0, asr #32
  78:	00000334 	andeq	r0, r0, r4, lsr r3
  7c:	00000028 	andeq	r0, r0, r8, lsr #32
  80:	0000035c 	andeq	r0, r0, ip, asr r3
  84:	00000114 	andeq	r0, r0, r4, lsl r1
  88:	00000470 	andeq	r0, r0, r0, ror r4
  8c:	00000050 	andeq	r0, r0, r0, asr r0
	descriptors [fd] = s;
  90:	000004c0 	andeq	r0, r0, r0, asr #9
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000054 	andeq	r0, r0, r4, asr r0
  98:	00000514 	andeq	r0, r0, r4, lsl r5
	if (s == NULL)
  9c:	00000038 	andeq	r0, r0, r8, lsr r0
		syserror (EMALLOC, "tcv05");
  a0:	0000054c 	andeq	r0, r0, ip, asr #10
  a4:	00000110 	andeq	r0, r0, r0, lsl r1
  a8:	00000000 	andeq	r0, r0, r0
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	0000065c 	andeq	r0, r0, ip, asr r6
  b4:	000000c0 	andeq	r0, r0, r0, asr #1
  b8:	0000071c 	andeq	r0, r0, ip, lsl r7
  bc:	00000044 	andeq	r0, r0, r4, asr #32
  c0:	00000760 	andeq	r0, r0, r0, ror #14
  c4:	0000003c 	andeq	r0, r0, ip, lsr r0
  c8:	0000079c 	muleq	r0, ip, r7
  cc:	000000a4 	andeq	r0, r0, r4, lsr #1
  d0:	00000840 	andeq	r0, r0, r0, asr #16
  d4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  d8:	00000000 	andeq	r0, r0, r0
  dc:	00000024 	andeq	r0, r0, r4, lsr #32
  e0:	00000000 	andeq	r0, r0, r0
  e4:	00000028 	andeq	r0, r0, r8, lsr #32
  e8:	000009f8 	strdeq	r0, [r0], -r8
  ec:	00000258 	andeq	r0, r0, r8, asr r2
  f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
  f4:	00000030 	andeq	r0, r0, r0, lsr r0
			curr += 0x1000;
  f8:	00000000 	andeq	r0, r0, r0
  fc:	0000005c 	andeq	r0, r0, ip, asr r0
		if (from >= EE_SIZE || upto < from)
 100:	00000c50 	andeq	r0, r0, r0, asr ip
 104:	00000060 	andeq	r0, r0, r0, rrx
	...
			upto = EE_SIZE - 1;
 110:	00000154 	andeq	r0, r0, r4, asr r1
 114:	24b70002 	ldrtcs	r0, [r7], #2
 118:	00040000 	andeq	r0, r4, r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
 124:	0000003c 	andeq	r0, r0, ip, lsr r0
        switch (choice)
 128:	00000cec 	andeq	r0, r0, ip, ror #25
 12c:	00000080 	andeq	r0, r0, r0, lsl #1
 130:	00000d6c 	andeq	r0, r0, ip, ror #26
 134:	00000018 	andeq	r0, r0, r8, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	00000d84 	andeq	r0, r0, r4, lsl #27
 144:	00000010 	andeq	r0, r0, r0, lsl r0
 148:	00000000 	andeq	r0, r0, r0
        proceed Menu_Header;
 14c:	0000002c 	andeq	r0, r0, ip, lsr #32
        ser_outf(Set_Group_ID, "New Group ID: ");
 150:	00000000 	andeq	r0, r0, r0
 154:	0000004c 	andeq	r0, r0, ip, asr #32
        ser_inf(Get_Group_ID, "%d", &groupId);
 158:	00000000 	andeq	r0, r0, r0
 15c:	00000006 	andeq	r0, r0, r6
 160:	00000d94 	muleq	r0, r4, sp
        proceed Menu_Header;
 164:	000000cc 	andeq	r0, r0, ip, asr #1
        ser_outf(Set_Node_ID, "New node ID (1-25):");
 168:	00000e60 	andeq	r0, r0, r0, ror #28
 16c:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_inf(Get_Node_ID, "%d", &nodeId);
 170:	00000e74 	andeq	r0, r0, r4, ror lr
 174:	00000034 	andeq	r0, r0, r4, lsr r0
 178:	00000ea8 	andeq	r0, r0, r8, lsr #29
    if (node < 1 || node > 25) {
 17c:	00000034 	andeq	r0, r0, r4, lsr r0
 180:	00000000 	andeq	r0, r0, r0
            proceed Set_Node_ID;
 184:	0000002c 	andeq	r0, r0, ip, lsr #32
 188:	00000edc 	ldrdeq	r0, [r0], -ip
        proceed Menu_Header;
 18c:	00000024 	andeq	r0, r0, r4, lsr #32
 190:	00000f00 	andeq	r0, r0, r0, lsl #30
            proceed Set_Group_ID;
 194:	00000038 	andeq	r0, r0, r8, lsr r0
            proceed Set_Node_ID;
 198:	00000000 	andeq	r0, r0, r0
 19c:	00000014 	andeq	r0, r0, r4, lsl r0
            diag("Find neighbours");
 1a0:	00000000 	andeq	r0, r0, r0
            diag("Reset Local Storage");
 1a4:	00000040 	andeq	r0, r0, r0, asr #32
            diag("Create Record on Neighbour");
 1a8:	00000000 	andeq	r0, r0, r0
            diag("Delete Record on Neighbour");
 1ac:	00000018 	andeq	r0, r0, r8, lsl r0
            diag("Retrieve Record on Neighbour");
 1b0:	00000f38 	andeq	r0, r0, r8, lsr pc
            diag("Show Local Records");
 1b4:	00000024 	andeq	r0, r0, r4, lsr #32
            diag("Reset Local Storage");
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	00000020 	andeq	r0, r0, r0, lsr #32
 1c0:	00000f5c 	andeq	r0, r0, ip, asr pc
 1c4:	0000000e 	andeq	r0, r0, lr
 1c8:	00000000 	andeq	r0, r0, r0
 1cc:	00000010 	andeq	r0, r0, r0, lsl r0
 1d0:	00000000 	andeq	r0, r0, r0
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	00000006 	andeq	r0, r0, r6
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	0000000e 	andeq	r0, r0, lr
 1f8:	00000f6c 	andeq	r0, r0, ip, ror #30
 1fc:	00000024 	andeq	r0, r0, r4, lsr #32
static void devinit_uart (int devnum) {
 200:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	adddevfunc (ioreq_uart_a, devnum);
 204:	0000009c 	muleq	r0, ip, r0
 208:	0000102c 	andeq	r1, r0, ip, lsr #32
void udelay (volatile word n) {
 20c:	00000050 	andeq	r0, r0, r0, asr r0
 210:	0000107c 	andeq	r1, r0, ip, ror r0
	while (n) {
 214:	00000048 	andeq	r0, r0, r8, asr #32
 218:	000010c4 	andeq	r1, r0, r4, asr #1
}
 21c:	00000050 	andeq	r0, r0, r0, asr r0
	while (n--);
 220:	00000000 	andeq	r0, r0, r0
 224:	00000058 	andeq	r0, r0, r8, asr r0
 228:	00001114 	andeq	r1, r0, r4, lsl r1
		n--;
 22c:	000000a8 	andeq	r0, r0, r8, lsr #1
 230:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
 234:	00000034 	andeq	r0, r0, r4, lsr r0
void mdelay (volatile word n) {
 238:	000011f0 	strdeq	r1, [r0], -r0
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
	while (n) {
 240:	00000000 	andeq	r0, r0, r0
 244:	00000030 	andeq	r0, r0, r0, lsr r0
}
 248:	00000000 	andeq	r0, r0, r0
		udelay (999);
 24c:	00000038 	andeq	r0, r0, r8, lsr r0
 250:	00001208 	andeq	r1, r0, r8, lsl #4
		n--;
 254:	0000013c 	andeq	r0, r0, ip, lsr r1
 258:	00000000 	andeq	r0, r0, r0
 25c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
void __pi_ondomain (lword d) {
 268:	00000104 	andeq	r0, r0, r4, lsl #2
		if (__pi_systat.effpdm > 1)
 26c:	36da0002 	ldrbcc	r0, [sl], r2
 270:	00040000 	andeq	r0, r4, r0
	...
	PRCMPowerDomainOn (d);
 27c:	00000016 	andeq	r0, r0, r6, lsl r0
 280:	00000000 	andeq	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 284:	0000001a 	andeq	r0, r0, sl, lsl r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	0000000e 	andeq	r0, r0, lr
	__pi_systat.ondmns |= d;
 290:	00000000 	andeq	r0, r0, r0
 294:	0000004c 	andeq	r0, r0, ip, asr #32
}
 298:	00000000 	andeq	r0, r0, r0
 29c:	0000008c 	andeq	r0, r0, ip, lsl #1
void __pi_syserror (word ec, const char *m) {
 2a0:	00000000 	andeq	r0, r0, r0
	diag ("SYSERR: %x, %s", ec, m);
 2a4:	00000070 	andeq	r0, r0, r0, ror r0
 2a8:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
 2ac:	000000c0 	andeq	r0, r0, r0, asr #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	0000006c 	andeq	r0, r0, ip, rrx
 2b8:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
 2bc:	00000024 	andeq	r0, r0, r4, lsr #32
 2c0:	00000000 	andeq	r0, r0, r0
 2c4:	00000080 	andeq	r0, r0, r0, lsl #1
 2c8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 2cc:	00000070 	andeq	r0, r0, r0, ror r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000078 	andeq	r0, r0, r8, ror r0
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	000000bc 	strheq	r0, [r0], -ip
 2e0:	00000000 	andeq	r0, r0, r0
	while (1) {
 2e4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	00000038 	andeq	r0, r0, r8, lsr r0
 2f0:	00000000 	andeq	r0, r0, r0
void tci_run_delay_timer () {
 2f4:	0000000a 	andeq	r0, r0, sl
	setdel = __pi_mintk - __pi_old;
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 300:	00000000 	andeq	r0, r0, r0
 304:	00000060 	andeq	r0, r0, r0, rrx
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 308:	00000000 	andeq	r0, r0, r0
 30c:	00000040 	andeq	r0, r0, r0, asr #32
 310:	00000000 	andeq	r0, r0, r0
 314:	0000002c 	andeq	r0, r0, ip, lsr #32
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 318:	00000000 	andeq	r0, r0, r0
	sti_tim;
 31c:	0000003c 	andeq	r0, r0, ip, lsr r0
}
 320:	00000000 	andeq	r0, r0, r0
 324:	00000006 	andeq	r0, r0, r6
 328:	00000000 	andeq	r0, r0, r0
 32c:	00000068 	andeq	r0, r0, r8, rrx
 330:	00000000 	andeq	r0, r0, r0
	cli_aux;
 334:	00000050 	andeq	r0, r0, r0, asr r0
 338:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 33c:	0000009c 	muleq	r0, ip, r0
 340:	00000000 	andeq	r0, r0, r0
 344:	00000040 	andeq	r0, r0, r0, asr #32
 348:	00000000 	andeq	r0, r0, r0
	sti_aux;
 34c:	00000034 	andeq	r0, r0, r4, lsr r0
}
 350:	00000000 	andeq	r0, r0, r0
 354:	0000003c 	andeq	r0, r0, ip, lsr r0
 358:	00000000 	andeq	r0, r0, r0
void AONRTCIntHandler () {
 35c:	0000003c 	andeq	r0, r0, ip, lsr r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 360:	00001344 	andeq	r1, r0, r4, asr #6
 364:	00000002 	andeq	r0, r0, r2
	...
		if (__pi_utims [0] == 0)
 370:	00000034 	andeq	r0, r0, r4, lsr r0
		if (*(__pi_utims [0])) {
 374:	4a110002 	bmi	440384 <__ccfg+0x4203dc>
 378:	00040000 	andeq	r0, r4, r0
			(*(__pi_utims [0]))--;
 37c:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
 380:	00001346 	andeq	r1, r0, r6, asr #6
		if (*(__pi_utims [1])) {
 384:	00000002 	andeq	r0, r0, r2
			aux_timer_inactive = 0;
 388:	00001348 	andeq	r1, r0, r8, asr #6
			(*(__pi_utims [1]))--;
 38c:	00000002 	andeq	r0, r0, r2
		if (__pi_utims [2] == 0)
 390:	0000134a 	andeq	r1, r0, sl, asr #6
		if (*(__pi_utims [2])) {
 394:	00000002 	andeq	r0, r0, r2
			(*(__pi_utims [2]))--;
 398:	0000134c 	andeq	r1, r0, ip, asr #6
		if (__pi_utims [3] != 0) {
 39c:	00000044 	andeq	r0, r0, r4, asr #32
	...
				(*(__pi_utims [3]))--;
 3a8:	00000014 	andeq	r0, r0, r4, lsl r0
	if (__pi_systat.ledsts) {
 3ac:	4b890002 	blmi	fe2403bc <_estack+0xde23b3bc>
 3b0:	00040000 	andeq	r0, r4, r0
	...
			if (__pi_systat.ledblk) {
 3c0:	00000024 	andeq	r0, r0, r4, lsr #32
 3c4:	50c40002 	sbcpl	r0, r4, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 3c8:	00040000 	andeq	r0, r4, r0
	...
 3d4:	00000002 	andeq	r0, r0, r2
 3d8:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
 3dc:	00000058 	andeq	r0, r0, r8, asr r0
	...
			if (__pi_systat.fstblk)
 3e8:	00000024 	andeq	r0, r0, r4, lsr #32
 3ec:	55c80002 	strbpl	r0, [r8, #2]
				__pi_systat.ledblc = 200;
 3f0:	00040000 	andeq	r0, r4, r0
	...
		__pi_new += setdel;
 3fc:	000000cc 	andeq	r0, r0, ip, asr #1
 400:	00000000 	andeq	r0, r0, r0
		setdel = 0;
 404:	00000038 	andeq	r0, r0, r8, lsr r0
	...
		RISE_N_SHINE;
 410:	0000008c 	andeq	r0, r0, ip, lsl #1
 414:	5ac20002 	bpl	ff080424 <_estack+0xdf07b424>
		aux_timer_inactive = 1;
 418:	00040000 	andeq	r0, r4, r0
 41c:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x1)
 420:	00001398 	muleq	r0, r8, r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 424:	00000034 	andeq	r0, r0, r4, lsr r0
 428:	000013cc 	andeq	r1, r0, ip, asr #7
				if (__pi_systat.ledsts & 0x2)
 42c:	00000030 	andeq	r0, r0, r0, lsr r0
 430:	000013fc 	strdeq	r1, [r0], -ip
 434:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x8)
 438:	00001414 	andeq	r1, r0, r4, lsl r4
				__pi_systat.ledblk = 1;
 43c:	00000054 	andeq	r0, r0, r4, asr r0
 440:	00001468 	andeq	r1, r0, r8, ror #8
		if (aux_timer_inactive) {
 444:	00000040 	andeq	r0, r0, r0, asr #32
			cli_aux;
 448:	000014a8 	andeq	r1, r0, r8, lsr #9
 44c:	00000024 	andeq	r0, r0, r4, lsr #32
 450:	000014cc 	andeq	r1, r0, ip, asr #9
 454:	00000014 	andeq	r0, r0, r4, lsl r0
 458:	000014e0 	andeq	r1, r0, r0, ror #9
 45c:	00000014 	andeq	r0, r0, r4, lsl r0
 460:	00000000 	andeq	r0, r0, r0
 464:	00000064 	andeq	r0, r0, r4, rrx
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000128 	andeq	r0, r0, r8, lsr #2
word tci_update_delay_ticks (Boolean force) {
 470:	00000000 	andeq	r0, r0, r0
	cli_tim;
 474:	000000ec 	andeq	r0, r0, ip, ror #1
 478:	00000000 	andeq	r0, r0, r0
	if (setdel) {
 47c:	00000002 	andeq	r0, r0, r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 480:	00000000 	andeq	r0, r0, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 484:	00000004 	andeq	r0, r0, r4
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 490:	00000000 	andeq	r0, r0, r0
				AON_RTC_O_CH0CMP)) - gettav ());
 494:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a4:	656d0002 	strbvs	r0, [sp, #-2]!
}
 4a8:	00040000 	andeq	r0, r4, r0
		sti_tim;
 4ac:	00000000 	andeq	r0, r0, r0
		return YES;
 4b0:	000014f4 	strdeq	r1, [r0], -r4
 4b4:	00000054 	andeq	r0, r0, r4, asr r0
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
	UARTDisable (UART0_BASE);
 4c4:	69bd0002 	ldmibvs	sp!, {r1}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 4c8:	00040000 	andeq	r0, r4, r0
	UARTDisable (UART0_BASE);
 4cc:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
 4d0:	00001548 	andeq	r1, r0, r8, asr #10
 4d4:	00000060 	andeq	r0, r0, r0, rrx
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 4e0:	0000006c 	andeq	r0, r0, ip, rrx
 4e4:	6e0d0002 	cdpvs	0, 0, cr0, cr13, cr2, {0}
 4e8:	00040000 	andeq	r0, r4, r0
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 4f4:	00000020 	andeq	r0, r0, r0, lsr #32
	urates [0] = rate;
 4f8:	00000000 	andeq	r0, r0, r0
}
 4fc:	00000190 	muleq	r0, r0, r1
 500:	00000000 	andeq	r0, r0, r0
 504:	00000048 	andeq	r0, r0, r8, asr #32
 508:	00000000 	andeq	r0, r0, r0
 50c:	00000024 	andeq	r0, r0, r4, lsr #32
 510:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 514:	0000005c 	andeq	r0, r0, ip, asr r0
 518:	00000000 	andeq	r0, r0, r0
 51c:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 520:	00000000 	andeq	r0, r0, r0
 524:	00000180 	andeq	r0, r0, r0, lsl #3
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 528:	00000000 	andeq	r0, r0, r0
 52c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	__pi_uart_setrate (urates [0], __pi_uart);
 530:	00000000 	andeq	r0, r0, r0
 534:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 538:	000015a8 	andeq	r1, r0, r8, lsr #11
 53c:	00000070 	andeq	r0, r0, r0, ror r0
 540:	00000000 	andeq	r0, r0, r0
 544:	00000174 	andeq	r0, r0, r4, ror r1
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	92850002 	addls	r0, r5, #2
 558:	00040000 	andeq	r0, r4, r0
 55c:	00000000 	andeq	r0, r0, r0
 560:	00001618 	andeq	r1, r0, r8, lsl r6
				*buf++ = uart_a_read;
 564:	00000070 	andeq	r0, r0, r0, ror r0
	...
			while (len && uart_a_char_available) {
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	96b60002 	ldrtls	r0, [r6], r2
			if (len != operation) {
 578:	00040000 	andeq	r0, r4, r0
}
 57c:	00000000 	andeq	r0, r0, r0
 580:	00001688 	andeq	r1, r0, r8, lsl #13
			uart_a_disable_int;
 584:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 590:	0000002c 	andeq	r0, r0, ip, lsr #32
 594:	9afa0002 	bls	ffe805a4 <_estack+0xdfe7b5a4>
			if (uart_a_char_available) {
 598:	00040000 	andeq	r0, r4, r0
 59c:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 5a0:	000017a4 	andeq	r1, r0, r4, lsr #15
 5a4:	00000020 	andeq	r0, r0, r0, lsr #32
				goto Redo_rx;
 5a8:	000017c4 	andeq	r1, r0, r4, asr #15
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 5ac:	00000230 	andeq	r0, r0, r0, lsr r2
 5b0:	000019f4 	strdeq	r1, [r0], -r4
			return -2;
 5b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
				uart_a_write (*buf);
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
			while (len && uart_a_room_in_tx) {
 5c4:	a0ee0002 	rscge	r0, lr, r2
 5c8:	00040000 	andeq	r0, r4, r0
 5cc:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
 5d0:	00001a44 	andeq	r1, r0, r4, asr #20
			uart_a_disable_int;
 5d4:	00000390 	muleq	r0, r0, r3
	...
			if (uart_a_room_in_tx) {
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
				uart_a_enable_int;
 5e4:	a6810002 	strge	r0, [r1], r2
 5e8:	00040000 	andeq	r0, r4, r0
				*buf++ = uart_a_read;
 5ec:	00000000 	andeq	r0, r0, r0
			if (uart_a_room_in_tx) {
 5f0:	00001dd4 	ldrdeq	r1, [r0], -r4
				uart_a_write (*buf);
 5f4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 600:	00000024 	andeq	r0, r0, r4, lsr #32
			uart_a_enable_int;
 604:	a75a0002 	ldrbge	r0, [sl, -r2]
 608:	00040000 	andeq	r0, r4, r0
	...
			if (len == UART_CNTRL_SETRATE) {
 614:	00000020 	andeq	r0, r0, r0, lsr #32
				if (__pi_uart_setrate (*((word*)buf),
 618:	00001e04 	andeq	r1, r0, r4, lsl #28
 61c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
			syserror (ENOOPER, "uai");
 628:	0000003c 	andeq	r0, r0, ip, lsr r0
			if (len == UART_CNTRL_GETRATE) {
 62c:	a8a10002 	stmiage	r1!, {r1}
				return 1;
 630:	00040000 	andeq	r0, r4, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 634:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
 638:	00001e1c 	andeq	r1, r0, ip, lsl lr
 63c:	00000008 	andeq	r0, r0, r8
 640:	00000000 	andeq	r0, r0, r0
 644:	00000006 	andeq	r0, r0, r6
 648:	00001e24 	andeq	r1, r0, r4, lsr #28
 64c:	00000008 	andeq	r0, r0, r8
 650:	00000000 	andeq	r0, r0, r0
 654:	00000006 	andeq	r0, r0, r6
 658:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 65c:	00000008 	andeq	r0, r0, r8
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 668:	00000064 	andeq	r0, r0, r4, rrx
 66c:	a9db0002 	ldmibge	fp, {r1}^
 670:	00040000 	andeq	r0, r4, r0
 674:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 678:	00001e2c 	andeq	r1, r0, ip, lsr #28
 67c:	0000005c 	andeq	r0, r0, ip, asr r0
		RISE_N_SHINE;
 680:	00001e88 	andeq	r1, r0, r8, lsl #29
 684:	0000002c 	andeq	r0, r0, ip, lsr #32
		i_trigger (devevent (UART_A, READ));
 688:	00000000 	andeq	r0, r0, r0
 68c:	00000090 	muleq	r0, r0, r0
 690:	00000000 	andeq	r0, r0, r0
 694:	00000018 	andeq	r0, r0, r8, lsl r0
 698:	00000000 	andeq	r0, r0, r0
 69c:	00000060 	andeq	r0, r0, r0, rrx
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	00000034 	andeq	r0, r0, r4, lsr r0
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	00000038 	andeq	r0, r0, r8, lsr r0
 6b0:	00000000 	andeq	r0, r0, r0
 6b4:	0000000c 	andeq	r0, r0, ip
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	00000034 	andeq	r0, r0, r4, lsr r0
 6c0:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, WRITE));
 6c4:	0000001c 	andeq	r0, r0, ip, lsl r0
	...
		RISE_N_SHINE;
 6d0:	00000024 	andeq	r0, r0, r4, lsr #32
 6d4:	b29e0002 	addslt	r0, lr, #2
 6d8:	00040000 	andeq	r0, r4, r0
		i_trigger (devevent (UART_A, WRITE));
 6dc:	00000000 	andeq	r0, r0, r0
 6e0:	00001eb4 			; <UNDEFINED> instruction: 0x00001eb4
 6e4:	000000d4 	ldrdeq	r0, [r0], -r4
 6e8:	00001f88 	andeq	r1, r0, r8, lsl #31
 6ec:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
 6f8:	000000b4 	strheq	r0, [r0], -r4
 6fc:	b4a90002 	strtlt	r0, [r9], #2
 700:	00040000 	andeq	r0, r4, r0
 704:	00000000 	andeq	r0, r0, r0
}
 708:	0000202c 	andeq	r2, r0, ip, lsr #32
 70c:	0000007c 	andeq	r0, r0, ip, ror r0
 710:	000020a8 	andeq	r2, r0, r8, lsr #1
 714:	000000ac 	andeq	r0, r0, ip, lsr #1
 718:	00002154 	andeq	r2, r0, r4, asr r1
void __buttons_setirq (int val) {
 71c:	0000005c 	andeq	r0, r0, ip, asr r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 720:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
 724:	00000018 	andeq	r0, r0, r8, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 728:	00000000 	andeq	r0, r0, r0
 72c:	00000010 	andeq	r0, r0, r0, lsl r0
 730:	000021c8 	andeq	r2, r0, r8, asr #3
		bn = BUTTON_GPIO (__button_list [i]);
 734:	00000010 	andeq	r0, r0, r0, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 738:	000021d8 	ldrdeq	r2, [r0], -r8
 73c:	00000014 	andeq	r0, r0, r4, lsl r0
 740:	000021ec 	andeq	r2, r0, ip, ror #3
 744:	00000064 	andeq	r0, r0, r4, rrx
 748:	00002250 	andeq	r2, r0, r0, asr r2
 74c:	00000014 	andeq	r0, r0, r4, lsl r0
}
 750:	00002264 	andeq	r2, r0, r4, ror #4
 754:	00000014 	andeq	r0, r0, r4, lsl r0
 758:	00002278 	andeq	r2, r0, r8, ror r2
 75c:	00000014 	andeq	r0, r0, r4, lsl r0
void __pinlist_setirq (int val) {
 760:	0000228c 	andeq	r2, r0, ip, lsl #5
	for (i = 0; i < N_PINLIST; i++) {
 764:	00000028 	andeq	r0, r0, r8, lsr #32
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 768:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 76c:	00000010 	andeq	r0, r0, r0, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
 770:	000022c4 	andeq	r2, r0, r4, asr #5
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 774:	0000002c 	andeq	r0, r0, ip, lsr #32
 778:	000022f0 	strdeq	r2, [r0], -r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 77c:	00000014 	andeq	r0, r0, r4, lsl r0
 780:	00002304 	andeq	r2, r0, r4, lsl #6
 784:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
 788:	00002318 	andeq	r2, r0, r8, lsl r3
}
 78c:	00000110 	andeq	r0, r0, r0, lsl r1
 790:	00002428 	andeq	r2, r0, r8, lsr #8
 794:	00000064 	andeq	r0, r0, r4, rrx
 798:	0000248c 	andeq	r2, r0, ip, lsl #9
void GPIOIntHandler () {
 79c:	00000028 	andeq	r0, r0, r8, lsr #32
if (buttons_int) {
 7a0:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
 7a4:	00000150 	andeq	r0, r0, r0, asr r1
	...
	i_trigger ((aword)&__button_list);
 7b0:	0000003c 	andeq	r0, r0, ip, lsr r0
 7b4:	bfc40002 	svclt	0x00c40002
 7b8:	00040000 	andeq	r0, r4, r0
	...
 7c4:	000000f4 	strdeq	r0, [r0], -r4
 7c8:	00002604 	andeq	r2, r0, r4, lsl #12
 7cc:	00000220 	andeq	r0, r0, r0, lsr #4
 7d0:	00002824 	andeq	r2, r0, r4, lsr #16
 7d4:	00000060 	andeq	r0, r0, r0, rrx
 7d8:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
 7dc:	00000078 	andeq	r0, r0, r8, ror r0
 7e0:	00002884 	andeq	r2, r0, r4, lsl #17
 7e4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	i_trigger ((aword)(&__input_pins));
 7f0:	00000044 	andeq	r0, r0, r4, asr #32
 7f4:	c8eb0002 	stmiagt	fp!, {r1}^
 7f8:	00040000 	andeq	r0, r4, r0
	...
 804:	00000010 	andeq	r0, r0, r0, lsl r0
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000018 	andeq	r0, r0, r8, lsl r0
 810:	0000289c 	muleq	r0, ip, r8
 814:	0000004c 	andeq	r0, r0, ip, asr #32
 818:	00000000 	andeq	r0, r0, r0
	__pinsen_disable_and_clear;
 81c:	00000030 	andeq	r0, r0, r0, lsr r0
	RISE_N_SHINE;
 820:	000028e8 	andeq	r2, r0, r8, ror #17
 824:	0000006c 	andeq	r0, r0, ip, rrx
 828:	00002954 	andeq	r2, r0, r4, asr r9
}
 82c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 838:	00000044 	andeq	r0, r0, r4, asr #32
 83c:	ccbb0002 	ldcgt	0, cr0, [fp], #8
void system_init () {
 840:	00040000 	andeq	r0, r4, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
 844:	00000000 	andeq	r0, r0, r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
 848:	0000296c 	andeq	r2, r0, ip, ror #18
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
 84c:	00000028 	andeq	r0, r0, r8, lsr #32
 850:	00002994 	muleq	r0, r4, r9
 854:	00000008 	andeq	r0, r0, r8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
 858:	00000000 	andeq	r0, r0, r0
 85c:	00000022 	andeq	r0, r0, r2, lsr #32
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
 860:	00000000 	andeq	r0, r0, r0
 864:	0000002e 	andeq	r0, r0, lr, lsr #32
 868:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
 86c:	00000034 	andeq	r0, r0, r4, lsr r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
 870:	00000000 	andeq	r0, r0, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
 874:	00000040 	andeq	r0, r0, r0, asr #32
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000da 	ldrdeq	r0, [r0], -sl
       4:	00000190 	muleq	r0, r0, r1
}
       8:	00000194 	muleq	r0, r4, r1
       c:	000001c0 	andeq	r0, r0, r0, asr #3
	...
      18:	0000010e 	andeq	r0, r0, lr, lsl #2
      1c:	00000150 	andeq	r0, r0, r0, asr r1
      20:	00000194 	muleq	r0, r4, r1
      24:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
	...
      30:	00000001 	andeq	r0, r0, r1
      34:	00000001 	andeq	r0, r0, r1
      38:	000000c8 	andeq	r0, r0, r8, asr #1
      3c:	00000200 	andeq	r0, r0, r0, lsl #4
	...
				j->Next = k;
      48:	000002ae 	andeq	r0, r0, lr, lsr #5
}
      4c:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
      50:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
      54:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
		release;
      58:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
      5c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
	...
      68:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
      6c:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
      70:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
      74:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
	...
      80:	000002cc 	andeq	r0, r0, ip, asr #5
      84:	000002ce 	andeq	r0, r0, lr, asr #5
      88:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      8c:	000002d2 	ldrdeq	r0, [r0], -r2
	...
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      98:	00000306 	andeq	r0, r0, r6, lsl #6
	if (s == NULL)
      9c:	0000030a 	andeq	r0, r0, sl, lsl #6
		syserror (EMALLOC, "tcv05");
      a0:	0000030c 	andeq	r0, r0, ip, lsl #6
      a4:	0000030e 	andeq	r0, r0, lr, lsl #6
      a8:	00000310 	andeq	r0, r0, r0, lsl r3
      ac:	00000318 	andeq	r0, r0, r8, lsl r3
	...
      b8:	0000033c 	andeq	r0, r0, ip, lsr r3
      bc:	00000342 	andeq	r0, r0, r2, asr #6
      c0:	00000344 	andeq	r0, r0, r4, asr #6
      c4:	0000034a 	andeq	r0, r0, sl, asr #6
	...
      d0:	0000036c 	andeq	r0, r0, ip, ror #6
      d4:	000003f2 	strdeq	r0, [r0], -r2
      d8:	00000418 	andeq	r0, r0, r8, lsl r4
      dc:	00000470 	andeq	r0, r0, r0, ror r4
	...
      e8:	000004e0 	andeq	r0, r0, r0, ror #9
      ec:	000004e2 	andeq	r0, r0, r2, ror #9
      f0:	000004e4 	andeq	r0, r0, r4, ror #9
			wwait (st, 50);
      f4:	000004f8 	strdeq	r0, [r0], -r8
	...
		if (from >= EE_SIZE || upto < from)
     100:	00000514 	andeq	r0, r0, r4, lsl r5
     104:	00000516 	andeq	r0, r0, r6, lsl r5
			upto = EE_SIZE - 1;
     108:	00000518 	andeq	r0, r0, r8, lsl r5
     10c:	00000520 	andeq	r0, r0, r0, lsr #10
	...
     118:	0000065c 	andeq	r0, r0, ip, asr r6
     11c:	00000660 	andeq	r0, r0, r0, ror #12
     120:	00000662 	andeq	r0, r0, r2, ror #12
     124:	00000664 	andeq	r0, r0, r4, ror #12
        switch (choice)
     128:	00000666 	andeq	r0, r0, r6, ror #12
     12c:	00000668 	andeq	r0, r0, r8, ror #12
	...
     138:	000006c4 	andeq	r0, r0, r4, asr #13
     13c:	000006c8 	andeq	r0, r0, r8, asr #13
     140:	000006da 	ldrdeq	r0, [r0], -sl
     144:	00000706 	andeq	r0, r0, r6, lsl #14
	...
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	0000071c 	andeq	r0, r0, ip, lsl r7
     154:	0000071c 	andeq	r0, r0, ip, lsl r7
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	0000071e 	andeq	r0, r0, lr, lsl r7
     15c:	00000720 	andeq	r0, r0, r0, lsr #14
	...
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	00000720 	andeq	r0, r0, r0, lsr #14
     16c:	00000722 	andeq	r0, r0, r2, lsr #14
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	00000724 	andeq	r0, r0, r4, lsr #14
     174:	00000726 	andeq	r0, r0, r6, lsr #14
     178:	0000072c 	andeq	r0, r0, ip, lsr #14
    if (node < 1 || node > 25) {
     17c:	00000732 	andeq	r0, r0, r2, lsr r7
     180:	0000073c 	andeq	r0, r0, ip, lsr r7
            proceed Set_Node_ID;
     184:	0000073e 	andeq	r0, r0, lr, lsr r7
     188:	0000074a 	andeq	r0, r0, sl, asr #14
        proceed Menu_Header;
     18c:	0000074c 	andeq	r0, r0, ip, asr #14
	...
            proceed Set_Node_ID;
     198:	00000760 	andeq	r0, r0, r0, ror #14
     19c:	00000760 	andeq	r0, r0, r0, ror #14
            diag("Find neighbours");
     1a0:	00000762 	andeq	r0, r0, r2, ror #14
            diag("Reset Local Storage");
     1a4:	00000764 	andeq	r0, r0, r4, ror #14
	...
            diag("Retrieve Record on Neighbour");
     1b0:	00000766 	andeq	r0, r0, r6, ror #14
            diag("Show Local Records");
     1b4:	00000768 	andeq	r0, r0, r8, ror #14
            diag("Reset Local Storage");
     1b8:	0000076a 	andeq	r0, r0, sl, ror #14
     1bc:	0000076c 	andeq	r0, r0, ip, ror #14
     1c0:	00000776 	andeq	r0, r0, r6, ror r7
     1c4:	0000077a 	andeq	r0, r0, sl, ror r7
     1c8:	00000784 	andeq	r0, r0, r4, lsl #15
     1cc:	00000786 	andeq	r0, r0, r6, lsl #15
	...
     1d8:	0000086a 	andeq	r0, r0, sl, ror #16
     1dc:	0000086c 	andeq	r0, r0, ip, ror #16
     1e0:	0000086e 	andeq	r0, r0, lr, ror #16
     1e4:	00000872 	andeq	r0, r0, r2, ror r8
     1e8:	00000882 	andeq	r0, r0, r2, lsl #17
     1ec:	00000884 	andeq	r0, r0, r4, lsl #17
	...
     1f8:	0000086c 	andeq	r0, r0, ip, ror #16
     1fc:	0000086e 	andeq	r0, r0, lr, ror #16
static void devinit_uart (int devnum) {
     200:	00000872 	andeq	r0, r0, r2, ror r8
	adddevfunc (ioreq_uart_a, devnum);
     204:	00000882 	andeq	r0, r0, r2, lsl #17
     208:	00000884 	andeq	r0, r0, r4, lsl #17
void udelay (volatile word n) {
     20c:	000008be 			; <UNDEFINED> instruction: 0x000008be
	...
	while (n) {
     218:	00000876 	andeq	r0, r0, r6, ror r8
}
     21c:	0000087a 	andeq	r0, r0, sl, ror r8
	while (n--);
     220:	000008a2 	andeq	r0, r0, r2, lsr #17
     224:	000008aa 	andeq	r0, r0, sl, lsr #17
	...
		n--;
     230:	0000087a 	andeq	r0, r0, sl, ror r8
     234:	0000087e 	andeq	r0, r0, lr, ror r8
void mdelay (volatile word n) {
     238:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
     23c:	000008ba 			; <UNDEFINED> instruction: 0x000008ba
	...
}
     248:	0000087e 	andeq	r0, r0, lr, ror r8
		udelay (999);
     24c:	00000882 	andeq	r0, r0, r2, lsl #17
     250:	000008b0 			; <UNDEFINED> instruction: 0x000008b0
		n--;
     254:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
	...
     260:	000008be 			; <UNDEFINED> instruction: 0x000008be
void __pi_ondomain (lword d) {
     264:	000008c0 	andeq	r0, r0, r0, asr #17
     268:	000008c2 	andeq	r0, r0, r2, asr #17
		if (__pi_systat.effpdm > 1)
     26c:	000008c4 	andeq	r0, r0, r4, asr #17
     270:	000008c6 	andeq	r0, r0, r6, asr #17
			__pi_systat.effpdm = 1;
     274:	000008c8 	andeq	r0, r0, r8, asr #17
	...
	PRCMPowerDomainOn (d);
     280:	000008c0 	andeq	r0, r0, r0, asr #17
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     284:	000008c2 	andeq	r0, r0, r2, asr #17
     288:	000008c8 	andeq	r0, r0, r8, asr #17
     28c:	000008ca 	andeq	r0, r0, sl, asr #17
	...
}
     298:	000008da 	ldrdeq	r0, [r0], -sl
     29c:	000008dc 	ldrdeq	r0, [r0], -ip
void __pi_syserror (word ec, const char *m) {
     2a0:	000008de 	ldrdeq	r0, [r0], -lr
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	000008e0 	andeq	r0, r0, r0, ror #17
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2b0:	000008f2 	strdeq	r0, [r0], -r2
     2b4:	000008f4 	strdeq	r0, [r0], -r4
     2b8:	000008f6 	strdeq	r0, [r0], -r6
		all_leds_blink;
     2bc:	000008f8 	strdeq	r0, [r0], -r8
	...
     2c8:	0000093a 	andeq	r0, r0, sl, lsr r9
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	0000093a 	andeq	r0, r0, sl, lsr r9
     2d0:	0000093e 	andeq	r0, r0, lr, lsr r9
     2d4:	00000940 	andeq	r0, r0, r0, asr #18
	...
     2e0:	00000970 	andeq	r0, r0, r0, ror r9
	while (1) {
     2e4:	00000972 	andeq	r0, r0, r2, ror r9
     2e8:	00000974 	andeq	r0, r0, r4, ror r9
     2ec:	0000097c 	andeq	r0, r0, ip, ror r9
	...
	setdel = __pi_mintk - __pi_old;
     2f8:	000009f8 	strdeq	r0, [r0], -r8
     2fc:	000009f8 	strdeq	r0, [r0], -r8
     300:	000009fe 	strdeq	r0, [r0], -lr
     304:	00000a00 	andeq	r0, r0, r0, lsl #20
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     308:	00000a02 	andeq	r0, r0, r2, lsl #20
     30c:	00000a06 	andeq	r0, r0, r6, lsl #20
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	00000a12 	andeq	r0, r0, r2, lsl sl
	sti_tim;
     31c:	00000a14 	andeq	r0, r0, r4, lsl sl
}
     320:	00000a2a 	andeq	r0, r0, sl, lsr #20
     324:	00000a2c 	andeq	r0, r0, ip, lsr #20
     328:	00000a3e 	andeq	r0, r0, lr, lsr sl
     32c:	00000a5a 	andeq	r0, r0, sl, asr sl
     330:	00000a7e 	andeq	r0, r0, lr, ror sl
	cli_aux;
     334:	00000bd8 	ldrdeq	r0, [r0], -r8
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     340:	00000a12 	andeq	r0, r0, r2, lsl sl
     344:	00000a14 	andeq	r0, r0, r4, lsl sl
     348:	00000ab2 			; <UNDEFINED> instruction: 0x00000ab2
	sti_aux;
     34c:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
	...
}
     358:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
void AONRTCIntHandler () {
     35c:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     360:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
     364:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	00000ac2 	andeq	r0, r0, r2, asr #21
		if (__pi_utims [0] == 0)
     36c:	00000ac4 	andeq	r0, r0, r4, asr #21
	...
		if (*(__pi_utims [0])) {
     378:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
			(*(__pi_utims [0]))--;
     37c:	00000aba 			; <UNDEFINED> instruction: 0x00000aba
		if (__pi_utims [1] == 0)
     380:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (*(__pi_utims [1])) {
     384:	00000ad2 	ldrdeq	r0, [r0], -r2
			aux_timer_inactive = 0;
     388:	00000ad6 	ldrdeq	r0, [r0], -r6
			(*(__pi_utims [1]))--;
     38c:	00000ada 	ldrdeq	r0, [r0], -sl
	...
			(*(__pi_utims [2]))--;
     398:	00000abe 			; <UNDEFINED> instruction: 0x00000abe
		if (__pi_utims [3] != 0) {
     39c:	00000ac2 	andeq	r0, r0, r2, asr #21
			if (*(__pi_utims [3])) {
     3a0:	00000ac4 	andeq	r0, r0, r4, asr #21
				aux_timer_inactive = 0;
     3a4:	00000ac6 	andeq	r0, r0, r6, asr #21
				(*(__pi_utims [3]))--;
     3a8:	00000aca 	andeq	r0, r0, sl, asr #21
	if (__pi_systat.ledsts) {
     3ac:	00000ace 	andeq	r0, r0, lr, asr #21
	...
		if (__pi_systat.ledblc++ == 0) {
     3b8:	00000ad2 	ldrdeq	r0, [r0], -r2
			if (__pi_systat.ledblk) {
     3bc:	00000ad6 	ldrdeq	r0, [r0], -r6
     3c0:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     3c4:	00000af4 	strdeq	r0, [r0], -r4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	00000af6 	strdeq	r0, [r0], -r6
     3cc:	00000afe 	strdeq	r0, [r0], -lr
	...
     3d8:	00000ae8 	andeq	r0, r0, r8, ror #21
				if (__pi_systat.ledsts & 0x4)
     3dc:	00000aea 	andeq	r0, r0, sl, ror #21
				__pi_systat.ledblk = 0;
     3e0:	00000aec 	andeq	r0, r0, ip, ror #21
     3e4:	00000af0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
				__pi_systat.ledblc = 200;
     3f0:	00000b2c 	andeq	r0, r0, ip, lsr #22
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f4:	00000b30 	andeq	r0, r0, r0, lsr fp
		cli_tim;
     3f8:	00000b32 	andeq	r0, r0, r2, lsr fp
		__pi_new += setdel;
     3fc:	00000b3a 	andeq	r0, r0, sl, lsr fp
	...
		RISE_N_SHINE;
     408:	00000b30 	andeq	r0, r0, r0, lsr fp
		__pi_new += setdel;
     40c:	00000b32 	andeq	r0, r0, r2, lsr fp
		RISE_N_SHINE;
     410:	00000b3e 	andeq	r0, r0, lr, lsr fp
     414:	00000b40 	andeq	r0, r0, r0, asr #22
	...
				if (__pi_systat.ledsts & 0x1)
     420:	00000b5e 	andeq	r0, r0, lr, asr fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     424:	00000b60 	andeq	r0, r0, r0, ror #22
     428:	00000b62 	andeq	r0, r0, r2, ror #22
				if (__pi_systat.ledsts & 0x2)
     42c:	00000b64 	andeq	r0, r0, r4, ror #22
	...
				if (__pi_systat.ledsts & 0x8)
     438:	00000b60 	andeq	r0, r0, r0, ror #22
				__pi_systat.ledblk = 1;
     43c:	00000b62 	andeq	r0, r0, r2, ror #22
     440:	00000b64 	andeq	r0, r0, r4, ror #22
		if (aux_timer_inactive) {
     444:	00000b68 	andeq	r0, r0, r8, ror #22
	...
			cli_aux;
     450:	00000bbe 			; <UNDEFINED> instruction: 0x00000bbe
     454:	00000bc0 	andeq	r0, r0, r0, asr #23
     458:	00000bc0 	andeq	r0, r0, r0, asr #23
     45c:	00000bc2 	andeq	r0, r0, r2, asr #23
	...
     468:	00000bc6 	andeq	r0, r0, r6, asr #23
     46c:	00000bca 	andeq	r0, r0, sl, asr #23
word tci_update_delay_ticks (Boolean force) {
     470:	00000bcc 	andeq	r0, r0, ip, asr #23
	cli_tim;
     474:	00000bce 	andeq	r0, r0, lr, asr #23
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	00000001 	andeq	r0, r0, r1
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     484:	00000001 	andeq	r0, r0, r1
     488:	00000001 	andeq	r0, r0, r1
     48c:	00000001 	andeq	r0, r0, r1
	...
	return NO;
     498:	00000c50 	andeq	r0, r0, r0, asr ip
			setdel = 0;
     49c:	00000c50 	andeq	r0, r0, r0, asr ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     4a0:	00000c54 	andeq	r0, r0, r4, asr ip
     4a4:	00000c60 	andeq	r0, r0, r0, ror #24
	...
		return YES;
     4b0:	00000200 	andeq	r0, r0, r0, lsl #4
     4b4:	0000020c 	andeq	r0, r0, ip, lsl #4
     4b8:	0000020c 	andeq	r0, r0, ip, lsl #4
     4bc:	00000238 	andeq	r0, r0, r8, lsr r2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	00000238 	andeq	r0, r0, r8, lsr r2
	UARTDisable (UART0_BASE);
     4c4:	00000262 	andeq	r0, r0, r2, ror #4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	00000264 	andeq	r0, r0, r4, ror #4
	UARTDisable (UART0_BASE);
     4cc:	000002a0 	andeq	r0, r0, r0, lsr #5
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	00000001 	andeq	r0, r0, r1
     4d4:	00000001 	andeq	r0, r0, r1
     4d8:	00000001 	andeq	r0, r0, r1
     4dc:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	000002a0 	andeq	r0, r0, r0, lsr #5
     4e4:	000002f4 	strdeq	r0, [r0], -r4
     4e8:	000002f4 	strdeq	r0, [r0], -r4
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	00000334 	andeq	r0, r0, r4, lsr r3
     4f0:	00000334 	andeq	r0, r0, r4, lsr r3
     4f4:	0000035c 	andeq	r0, r0, ip, asr r3
	urates [0] = rate;
     4f8:	0000035c 	andeq	r0, r0, ip, asr r3
}
     4fc:	00000470 	andeq	r0, r0, r0, ror r4
     500:	00000470 	andeq	r0, r0, r0, ror r4
     504:	000004c0 	andeq	r0, r0, r0, asr #9
     508:	000004c0 	andeq	r0, r0, r0, asr #9
     50c:	00000514 	andeq	r0, r0, r4, lsl r5
     510:	00000514 	andeq	r0, r0, r4, lsl r5
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     514:	0000054c 	andeq	r0, r0, ip, asr #10
     518:	0000054c 	andeq	r0, r0, ip, asr #10
     51c:	0000065c 	andeq	r0, r0, ip, asr r6
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	00000001 	andeq	r0, r0, r1
     524:	00000001 	andeq	r0, r0, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     528:	0000065c 	andeq	r0, r0, ip, asr r6
     52c:	0000071c 	andeq	r0, r0, ip, lsl r7
	__pi_uart_setrate (urates [0], __pi_uart);
     530:	0000071c 	andeq	r0, r0, ip, lsl r7
     534:	00000760 	andeq	r0, r0, r0, ror #14
     538:	00000760 	andeq	r0, r0, r0, ror #14
     53c:	0000079c 	muleq	r0, ip, r7
     540:	0000079c 	muleq	r0, ip, r7
     544:	00000840 	andeq	r0, r0, r0, asr #16
     548:	00000840 	andeq	r0, r0, r0, asr #16
	switch (operation) {
     54c:	000009f8 	strdeq	r0, [r0], -r8
static int ioreq_uart_a (int operation, char *buf, int len) {
     550:	00000001 	andeq	r0, r0, r1
     554:	00000001 	andeq	r0, r0, r1
     558:	00000001 	andeq	r0, r0, r1
     55c:	00000001 	andeq	r0, r0, r1
     560:	000009f8 	strdeq	r0, [r0], -r8
				*buf++ = uart_a_read;
     564:	00000c50 	andeq	r0, r0, r0, asr ip
     568:	00000001 	andeq	r0, r0, r1
			while (len && uart_a_char_available) {
     56c:	00000001 	andeq	r0, r0, r1
     570:	00000001 	andeq	r0, r0, r1
     574:	00000001 	andeq	r0, r0, r1
			if (len != operation) {
     578:	00000c50 	andeq	r0, r0, r0, asr ip
}
     57c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	...
			if (uart_a_char_available) {
     588:	00000d6c 	andeq	r0, r0, ip, ror #26
				*buf++ = uart_a_read;
     58c:	00000d6e 	andeq	r0, r0, lr, ror #26
			uart_a_disable_int;
     590:	00000d6e 	andeq	r0, r0, lr, ror #26
     594:	00000d70 	andeq	r0, r0, r0, ror sp
	...
				uart_a_enable_int;
     5a0:	00000da2 	andeq	r0, r0, r2, lsr #27
     5a4:	00000e44 	andeq	r0, r0, r4, asr #28
				goto Redo_rx;
     5a8:	00000e48 	andeq	r0, r0, r8, asr #28
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5ac:	00000e4c 	andeq	r0, r0, ip, asr #28
	...
			return -2;
     5b8:	000011cc 	andeq	r1, r0, ip, asr #3
				uart_a_write (*buf);
     5bc:	000011ce 	andeq	r1, r0, lr, asr #3
     5c0:	000011d2 	ldrdeq	r1, [r0], -r2
			while (len && uart_a_room_in_tx) {
     5c4:	000011d4 	ldrdeq	r1, [r0], -r4
     5c8:	000011d8 	ldrdeq	r1, [r0], -r8
     5cc:	000011dc 	ldrdeq	r1, [r0], -ip
			if (len != operation) {
     5d0:	000011de 	ldrdeq	r1, [r0], -lr
			uart_a_disable_int;
     5d4:	000011e8 	andeq	r1, r0, r8, ror #3
	...
			if (uart_a_room_in_tx) {
     5e0:	0000121a 	andeq	r1, r0, sl, lsl r2
				uart_a_enable_int;
     5e4:	0000121c 	andeq	r1, r0, ip, lsl r2
     5e8:	0000121e 	andeq	r1, r0, lr, lsl r2
				*buf++ = uart_a_read;
     5ec:	00001222 	andeq	r1, r0, r2, lsr #4
			if (uart_a_room_in_tx) {
     5f0:	000012b2 			; <UNDEFINED> instruction: 0x000012b2
				uart_a_write (*buf);
     5f4:	00001314 	andeq	r1, r0, r4, lsl r3
     5f8:	00001318 	andeq	r1, r0, r8, lsl r3
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5fc:	0000131c 	andeq	r1, r0, ip, lsl r3
     600:	0000131e 	andeq	r1, r0, lr, lsl r3
			uart_a_enable_int;
     604:	00001320 	andeq	r1, r0, r0, lsr #6
	...
			return 0;
     610:	00001236 	andeq	r1, r0, r6, lsr r2
			if (len == UART_CNTRL_SETRATE) {
     614:	00001238 	andeq	r1, r0, r8, lsr r2
				if (__pi_uart_setrate (*((word*)buf),
     618:	00001238 	andeq	r1, r0, r8, lsr r2
     61c:	0000123a 	andeq	r1, r0, sl, lsr r2
	...
			syserror (ENOOPER, "uai");
     628:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
			if (len == UART_CNTRL_GETRATE) {
     62c:	00000cec 	andeq	r0, r0, ip, ror #25
				return 1;
     630:	00000cec 	andeq	r0, r0, ip, ror #25
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     634:	00000d6c 	andeq	r0, r0, ip, ror #26
			syserror (ENOOPER, "uai");
     638:	00000d6c 	andeq	r0, r0, ip, ror #26
     63c:	00000d84 	andeq	r0, r0, r4, lsl #27
     640:	00000001 	andeq	r0, r0, r1
     644:	00000001 	andeq	r0, r0, r1
     648:	00000d84 	andeq	r0, r0, r4, lsl #27
     64c:	00000d94 	muleq	r0, r4, sp
     650:	00000001 	andeq	r0, r0, r1
     654:	00000001 	andeq	r0, r0, r1
     658:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     65c:	00000001 	andeq	r0, r0, r1
void UART0IntHandler () {
     660:	00000001 	andeq	r0, r0, r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	00000001 	andeq	r0, r0, r1
     668:	00000d94 	muleq	r0, r4, sp
     66c:	00000e60 	andeq	r0, r0, r0, ror #28
     670:	00000e60 	andeq	r0, r0, r0, ror #28
     674:	00000e74 	andeq	r0, r0, r4, ror lr
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     678:	00000e74 	andeq	r0, r0, r4, ror lr
     67c:	00000ea8 	andeq	r0, r0, r8, lsr #29
		RISE_N_SHINE;
     680:	00000ea8 	andeq	r0, r0, r8, lsr #29
     684:	00000edc 	ldrdeq	r0, [r0], -ip
		i_trigger (devevent (UART_A, READ));
     688:	00000001 	andeq	r0, r0, r1
     68c:	00000001 	andeq	r0, r0, r1
     690:	00000edc 	ldrdeq	r0, [r0], -ip
     694:	00000f00 	andeq	r0, r0, r0, lsl #30
     698:	00000f00 	andeq	r0, r0, r0, lsl #30
     69c:	00000f38 	andeq	r0, r0, r8, lsr pc
     6a0:	00000001 	andeq	r0, r0, r1
     6a4:	00000001 	andeq	r0, r0, r1
     6a8:	00000001 	andeq	r0, r0, r1
     6ac:	00000001 	andeq	r0, r0, r1
     6b0:	00000001 	andeq	r0, r0, r1
     6b4:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b8:	00000f38 	andeq	r0, r0, r8, lsr pc
     6bc:	00000f5c 	andeq	r0, r0, ip, asr pc
     6c0:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     6c4:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	00000f5c 	andeq	r0, r0, ip, asr pc
     6cc:	00000f6a 	andeq	r0, r0, sl, ror #30
		RISE_N_SHINE;
     6d0:	00000001 	andeq	r0, r0, r1
     6d4:	00000001 	andeq	r0, r0, r1
     6d8:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     6dc:	00000001 	andeq	r0, r0, r1
     6e0:	00000001 	andeq	r0, r0, r1
     6e4:	00000001 	andeq	r0, r0, r1
     6e8:	00000001 	andeq	r0, r0, r1
     6ec:	00000001 	andeq	r0, r0, r1
     6f0:	00000001 	andeq	r0, r0, r1
     6f4:	00000001 	andeq	r0, r0, r1
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
     700:	00000f6c 	andeq	r0, r0, ip, ror #30
     704:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
}
     708:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     70c:	0000102c 	andeq	r1, r0, ip, lsr #32
     710:	0000102c 	andeq	r1, r0, ip, lsr #32
     714:	0000107c 	andeq	r1, r0, ip, ror r0
     718:	0000107c 	andeq	r1, r0, ip, ror r0
void __buttons_setirq (int val) {
     71c:	000010c4 	andeq	r1, r0, r4, asr #1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	000010c4 	andeq	r1, r0, r4, asr #1
     724:	00001114 	andeq	r1, r0, r4, lsl r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
     730:	00001114 	andeq	r1, r0, r4, lsl r1
		bn = BUTTON_GPIO (__button_list [i]);
     734:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     738:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
     73c:	000011f0 	strdeq	r1, [r0], -r0
     740:	000011f0 	strdeq	r1, [r0], -r0
     744:	00001208 	andeq	r1, r0, r8, lsl #4
     748:	00000001 	andeq	r0, r0, r1
     74c:	00000001 	andeq	r0, r0, r1
}
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
     758:	00001208 	andeq	r1, r0, r8, lsl #4
     75c:	00001344 	andeq	r1, r0, r4, asr #6
void __pinlist_setirq (int val) {
     760:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     764:	00000001 	andeq	r0, r0, r1
	...
     770:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     774:	00000001 	andeq	r0, r0, r1
     778:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77c:	00000001 	andeq	r0, r0, r1
     780:	00000001 	andeq	r0, r0, r1
     784:	00000001 	andeq	r0, r0, r1
	...
}
     790:	00000001 	andeq	r0, r0, r1
     794:	00000001 	andeq	r0, r0, r1
     798:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     79c:	00000001 	andeq	r0, r0, r1
	...
	buttons_disable ();
     7a8:	00000001 	andeq	r0, r0, r1
     7ac:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
     7b0:	00000001 	andeq	r0, r0, r1
     7b4:	00000001 	andeq	r0, r0, r1
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000001 	andeq	r0, r0, r1
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	00000001 	andeq	r0, r0, r1
     7cc:	00000001 	andeq	r0, r0, r1
     7d0:	00000001 	andeq	r0, r0, r1
     7d4:	00000001 	andeq	r0, r0, r1
     7d8:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
if (pin_sensor_int) {
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     7f0:	00000001 	andeq	r0, r0, r1
     7f4:	00000001 	andeq	r0, r0, r1
     7f8:	00000001 	andeq	r0, r0, r1
     7fc:	00000001 	andeq	r0, r0, r1
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
     808:	00000001 	andeq	r0, r0, r1
     80c:	00000001 	andeq	r0, r0, r1
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
     818:	00000001 	andeq	r0, r0, r1
	__pinsen_disable_and_clear;
     81c:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     820:	00000001 	andeq	r0, r0, r1
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
}
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
     834:	00000001 	andeq	r0, r0, r1
     838:	00000001 	andeq	r0, r0, r1
     83c:	00000001 	andeq	r0, r0, r1
void system_init () {
     840:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     848:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     874:	00000001 	andeq	r0, r0, r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     878:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87c:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     880:	00000001 	andeq	r0, r0, r1
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	00000001 	andeq	r0, r0, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	00000001 	andeq	r0, r0, r1
		pin = (port_confs [i] >> 19) & 0x1f;
     88c:	00000001 	andeq	r0, r0, r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     890:	00001344 	andeq	r1, r0, r4, asr #6
     894:	00001346 	andeq	r1, r0, r6, asr #6
	...
		if (port_confs [i] & 0x80)
     8a0:	00001346 	andeq	r1, r0, r6, asr #6
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a4:	00001348 	andeq	r1, r0, r8, asr #6
     8a8:	00001348 	andeq	r1, r0, r8, asr #6
		if (port_confs [i] & 0x40)
     8ac:	0000134a 	andeq	r1, r0, sl, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	0000134a 	andeq	r1, r0, sl, asr #6
     8b4:	0000134c 	andeq	r1, r0, ip, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b8:	0000134c 	andeq	r1, r0, ip, asr #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8bc:	00001390 	muleq	r0, r0, r3
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8c8:	00000001 	andeq	r0, r0, r1
	all_leds_blink;
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
	...
     8f0:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	00000001 	andeq	r0, r0, r1
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_RTC_COMB);
     908:	00000001 	andeq	r0, r0, r1
	__pi_malloc_init ();
     90c:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_GPIO_EDGE);
     910:	00000001 	andeq	r0, r0, r1
     914:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     918:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     91c:	00000001 	andeq	r0, r0, r1
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
     938:	00000001 	andeq	r0, r0, r1
	urates [0] = UART_RATE / 100;
     93c:	00000001 	andeq	r0, r0, r1
	...
	EXTRA_INITIALIZERS;
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
     958:	00000001 	andeq	r0, r0, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     95c:	00000001 	andeq	r0, r0, r1
	...
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     968:	00000001 	andeq	r0, r0, r1
			devinit [i] . init (devinit [i] . param);
     96c:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_UART0_COMB);
     980:	0000139c 	muleq	r0, ip, r3
}
     984:	000013a0 	andeq	r1, r0, r0, lsr #7
	tci_run_auxiliary_timer ();
     988:	000013a6 	andeq	r1, r0, r6, lsr #7
		diag ("");
     98c:	000013a8 	andeq	r1, r0, r8, lsr #7
     990:	000013b6 			; <UNDEFINED> instruction: 0x000013b6
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     994:	000013b6 			; <UNDEFINED> instruction: 0x000013b6
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     998:	000013b8 			; <UNDEFINED> instruction: 0x000013b8
		diag ("Leftover RAM: %d bytes",
     99c:	000013ba 			; <UNDEFINED> instruction: 0x000013ba
	...
     9a8:	000013a2 	andeq	r1, r0, r2, lsr #7
     9ac:	000013a4 	andeq	r1, r0, r4, lsr #7
     9b0:	000013ba 			; <UNDEFINED> instruction: 0x000013ba
     9b4:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
	...
     9c0:	000013a4 	andeq	r1, r0, r4, lsr #7
     9c4:	000013a6 	andeq	r1, r0, r6, lsr #7
     9c8:	000013a8 	andeq	r1, r0, r8, lsr #7
     9cc:	000013aa 	andeq	r1, r0, sl, lsr #7
     9d0:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
     9d4:	000013b0 			; <UNDEFINED> instruction: 0x000013b0
	...
     9e0:	000013d4 	ldrdeq	r1, [r0], -r4
     9e4:	000013dc 	ldrdeq	r1, [r0], -ip
     9e8:	000013e6 	andeq	r1, r0, r6, ror #7
     9ec:	000013e6 	andeq	r1, r0, r6, ror #7
     9f0:	000013ea 	andeq	r1, r0, sl, ror #7
     9f4:	000013ec 	andeq	r1, r0, ip, ror #7
	...
__attribute__ ((noreturn)) void __pi_release () {
     a00:	000013ec 	andeq	r1, r0, ip, ror #7
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a04:	000013ec 	andeq	r1, r0, ip, ror #7
	check_stack_overflow;
     a08:	000013ee 	andeq	r1, r0, lr, ror #7
     a0c:	000013f0 	strdeq	r1, [r0], -r0
	...
	update_n_wake (MAX_WORD, NO);
     a18:	000013fc 	strdeq	r1, [r0], -ip
     a1c:	000013fe 	strdeq	r1, [r0], -lr
	for_all_tasks (__pi_curr) {
     a20:	00001400 	andeq	r1, r0, r0, lsl #8
     a24:	00001404 	andeq	r1, r0, r4, lsl #8
	...
	__SLEEP;
     a30:	0000141c 	andeq	r1, r0, ip, lsl r4
     a34:	0000141e 	andeq	r1, r0, lr, lsl r4
     a38:	00001422 	andeq	r1, r0, r2, lsr #8
     a3c:	00001424 	andeq	r1, r0, r4, lsr #8
	system_event_count ++;
     a40:	0000142a 	andeq	r1, r0, sl, lsr #8
     a44:	0000143a 	andeq	r1, r0, sl, lsr r4
	...
	switch (__pi_systat.effpdm) {
     a50:	0000141c 	andeq	r1, r0, ip, lsl r4
     a54:	0000141e 	andeq	r1, r0, lr, lsl r4
			__WFI ();
     a58:	00001422 	andeq	r1, r0, r2, lsr #8
     a5c:	00001424 	andeq	r1, r0, r4, lsr #8
     a60:	0000142a 	andeq	r1, r0, sl, lsr #8
	check_stack_overflow;
     a64:	0000142a 	andeq	r1, r0, sl, lsr #8
     a68:	0000142c 	andeq	r1, r0, ip, lsr #8
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     a6c:	0000142e 	andeq	r1, r0, lr, lsr #8
	...
			goto Redo;
     a78:	00001482 	andeq	r1, r0, r2, lsl #9
	for_all_tasks (__pi_curr) {
     a7c:	00001486 	andeq	r1, r0, r6, lsl #9
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	00001488 	andeq	r1, r0, r8, lsl #9
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a84:	0000148a 	andeq	r1, r0, sl, lsl #9
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     a90:	0000148e 	andeq	r1, r0, lr, lsl #9
     a94:	0000148e 	andeq	r1, r0, lr, lsl #9
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a98:	00001490 	muleq	r0, r0, r4
     a9c:	00001492 	muleq	r0, r2, r4
	...
			__WFI ();
     aa8:	00000001 	andeq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     aac:	00000001 	andeq	r0, r0, r1
     ab0:	00000001 	andeq	r0, r0, r1
}
     ab4:	00000001 	andeq	r0, r0, r1
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ac0:	00000001 	andeq	r0, r0, r1
     ac4:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac8:	00000001 	andeq	r0, r0, r1
     acc:	00000001 	andeq	r0, r0, r1
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad8:	00000001 	andeq	r0, r0, r1
     adc:	00000001 	andeq	r0, r0, r1
     ae0:	00000001 	andeq	r0, r0, r1
     ae4:	00000001 	andeq	r0, r0, r1
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	00000001 	andeq	r0, r0, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     af4:	00000001 	andeq	r0, r0, r1
     af8:	00000001 	andeq	r0, r0, r1
     afc:	00000001 	andeq	r0, r0, r1
	...
			SysCtrlSetRechargeBeforePowerDown
     b08:	00001398 	muleq	r0, r8, r3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b0c:	000013cc 	andeq	r1, r0, ip, asr #7
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b10:	000013cc 	andeq	r1, r0, ip, asr #7
     b14:	000013fc 	strdeq	r1, [r0], -ip
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	000013fc 	strdeq	r1, [r0], -ip
     b1c:	00001414 	andeq	r1, r0, r4, lsl r4
     b20:	00001414 	andeq	r1, r0, r4, lsl r4
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b24:	00001468 	andeq	r1, r0, r8, ror #8
     b28:	00001468 	andeq	r1, r0, r8, ror #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	000014a8 	andeq	r1, r0, r8, lsr #9
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	000014a8 	andeq	r1, r0, r8, lsr #9
     b34:	000014cc 	andeq	r1, r0, ip, asr #9
     b38:	000014cc 	andeq	r1, r0, ip, asr #9
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b3c:	000014e0 	andeq	r1, r0, r0, ror #9
			while (!(AONWUCPowerStatusGet () &
     b40:	000014e0 	andeq	r1, r0, r0, ror #9
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b44:	000014f4 	strdeq	r1, [r0], -r4
     b48:	00000001 	andeq	r0, r0, r1
     b4c:	00000001 	andeq	r0, r0, r1
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b50:	00000001 	andeq	r0, r0, r1
     b54:	00000001 	andeq	r0, r0, r1
     b58:	00000001 	andeq	r0, r0, r1
     b5c:	00000001 	andeq	r0, r0, r1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	00000001 	andeq	r0, r0, r1
     b64:	00000001 	andeq	r0, r0, r1
     b68:	00000001 	andeq	r0, r0, r1
     b6c:	00000001 	andeq	r0, r0, r1
			SysCtrlAdjustRechargeAfterPowerDown ();
     b70:	00000001 	andeq	r0, r0, r1
			reinit_uart ();
     b74:	00000001 	andeq	r0, r0, r1
     b78:	00000001 	andeq	r0, r0, r1
     b7c:	00000001 	andeq	r0, r0, r1
	...
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     b88:	000014f4 	strdeq	r1, [r0], -r4
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b8c:	00001548 	andeq	r1, r0, r8, asr #10
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	00001548 	andeq	r1, r0, r8, asr #10
     b9c:	000015a8 	andeq	r1, r0, r8, lsr #11
	...
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     ba8:	00000001 	andeq	r0, r0, r1
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     bac:	00000001 	andeq	r0, r0, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	00000001 	andeq	r0, r0, r1
     bb4:	00000001 	andeq	r0, r0, r1
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000001 	andeq	r0, r0, r1
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc8:	00000001 	andeq	r0, r0, r1
     bcc:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (
     bd0:	00000001 	andeq	r0, r0, r1
     bd4:	00000001 	andeq	r0, r0, r1
	...
  __ASM volatile ("cpsie i" : : : "memory");
     be0:	00000001 	andeq	r0, r0, r1
	goto Redo;
     be4:	00000001 	andeq	r0, r0, r1
     be8:	00000001 	andeq	r0, r0, r1
     bec:	00000001 	andeq	r0, r0, r1
	...
     bf8:	00000001 	andeq	r0, r0, r1
     bfc:	00000001 	andeq	r0, r0, r1
     c00:	00000001 	andeq	r0, r0, r1
     c04:	00000001 	andeq	r0, r0, r1
     c08:	00000001 	andeq	r0, r0, r1
     c0c:	00000001 	andeq	r0, r0, r1
	...
     c18:	00000001 	andeq	r0, r0, r1
     c1c:	00000001 	andeq	r0, r0, r1
     c20:	00000001 	andeq	r0, r0, r1
     c24:	00000001 	andeq	r0, r0, r1
     c28:	00000001 	andeq	r0, r0, r1
     c2c:	00000001 	andeq	r0, r0, r1
	...
     c38:	00000001 	andeq	r0, r0, r1
     c3c:	00000001 	andeq	r0, r0, r1
     c40:	00000001 	andeq	r0, r0, r1
     c44:	00000001 	andeq	r0, r0, r1
     c48:	00000001 	andeq	r0, r0, r1
     c4c:	00000001 	andeq	r0, r0, r1
int main (void) {
     c50:	00000001 	andeq	r0, r0, r1
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	00000001 	andeq	r0, r0, r1
     c58:	00000001 	andeq	r0, r0, r1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	00000001 	andeq	r0, r0, r1
	...
	tcv_init ();
     c68:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c6c:	00000001 	andeq	r0, r0, r1
     c70:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	00000001 	andeq	r0, r0, r1
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c80:	00000001 	andeq	r0, r0, r1
     c84:	00000001 	andeq	r0, r0, r1
	delay (16, 0);
     c88:	00000001 	andeq	r0, r0, r1
     c8c:	00000001 	andeq	r0, r0, r1
	...
	__pi_release ();
     c98:	000015c6 	andeq	r1, r0, r6, asr #11
     c9c:	000015c8 	andeq	r1, r0, r8, asr #11
     ca0:	000015ca 	andeq	r1, r0, sl, asr #11
     ca4:	000015ce 	andeq	r1, r0, lr, asr #11
	...
static void killev (__pi_pcb_t *pid) {
     cb0:	000015c8 	andeq	r1, r0, r8, asr #11
	wfun = (aword)(pid->code);
     cb4:	000015ca 	andeq	r1, r0, sl, asr #11
	for_all_tasks (i) {
     cb8:	000015ce 	andeq	r1, r0, lr, asr #11
		for (j = 0; j < nevents (i); j++) {
     cbc:	000015f4 	strdeq	r1, [r0], -r4
	...
			    || i->Events [j] . Event == wfun
     cc8:	00000001 	andeq	r0, r0, r1
		for (j = 0; j < nevents (i); j++) {
     ccc:	00000001 	andeq	r0, r0, r1
			if (i->Events [j] . Event == (aword)pid
     cd0:	00000001 	andeq	r0, r0, r1
     cd4:	00000001 	andeq	r0, r0, r1
     cd8:	00000001 	andeq	r0, r0, r1
				wakeupev (i, j);
     cdc:	00000001 	andeq	r0, r0, r1
     ce0:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
     ce4:	00000001 	andeq	r0, r0, r1
}
     ce8:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	00000001 	andeq	r0, r0, r1
static void qfree (aword *ch) {
     cf0:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf4:	00000001 	andeq	r0, r0, r1
	cc = (aword*)(mpools + MA_NP);
     cf8:	00000001 	andeq	r0, r0, r1
	m_setnextp (ch, chunk);
     cfc:	00000001 	andeq	r0, r0, r1
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d08:	00000001 	andeq	r0, r0, r1
     d0c:	00000001 	andeq	r0, r0, r1
     d10:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     d14:	00000001 	andeq	r0, r0, r1
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     d20:	00000001 	andeq	r0, r0, r1
     d24:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d28:	00000001 	andeq	r0, r0, r1
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	00000001 	andeq	r0, r0, r1
     d30:	00000001 	andeq	r0, r0, r1
     d34:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     d38:	00000001 	andeq	r0, r0, r1
			m_size (ch) += m_hdrlen + m_size (chunk);
     d3c:	00000001 	andeq	r0, r0, r1
     d40:	00000001 	andeq	r0, r0, r1
     d44:	00000001 	andeq	r0, r0, r1
     d48:	00000001 	andeq	r0, r0, r1
     d4c:	00000001 	andeq	r0, r0, r1
     d50:	00000001 	andeq	r0, r0, r1
			if (m_size (chunk) >= m_size (ch))
     d54:	00000001 	andeq	r0, r0, r1
     d58:	00000001 	andeq	r0, r0, r1
     d5c:	00000001 	andeq	r0, r0, r1
		chunk = m_nextp (chunk))
     d60:	00000001 	andeq	r0, r0, r1
     d64:	00000001 	andeq	r0, r0, r1
     d68:	000015a8 	andeq	r1, r0, r8, lsr #11
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	00001618 	andeq	r1, r0, r8, lsl r6
	diag_wait (a);
     d70:	00000001 	andeq	r0, r0, r1
	diag_wchar (c, a);
     d74:	00000001 	andeq	r0, r0, r1
	...
}
     d80:	00001626 	andeq	r1, r0, r6, lsr #12
	syserror (ESTATE, "state");
     d84:	00001626 	andeq	r1, r0, r6, lsr #12
     d88:	0000162c 	andeq	r1, r0, ip, lsr #12
     d8c:	00001688 	andeq	r1, r0, r8, lsl #13
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	00001618 	andeq	r1, r0, r8, lsl r6
     d9c:	00001688 	andeq	r1, r0, r8, lsl #13
	...
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da8:	0000169c 	muleq	r0, ip, r6
     dac:	00001780 	andeq	r1, r0, r0, lsl #15
     db0:	00001786 	andeq	r1, r0, r6, lsl #15
     db4:	0000178a 	andeq	r1, r0, sl, lsl #15
     db8:	00001790 	muleq	r0, r0, r7
     dbc:	000017a4 	andeq	r1, r0, r4, lsr #15
	...
     dc8:	00001688 	andeq	r1, r0, r8, lsl #13
     dcc:	000017a4 	andeq	r1, r0, r4, lsr #15
	...
		for_all_tasks (i) {
     dd8:	000017d0 	ldrdeq	r1, [r0], -r0
	__pi_mintk = znew + min;
     ddc:	000017d2 	ldrdeq	r1, [r0], -r2
     de0:	000018a0 	andeq	r1, r0, r0, lsr #17
			if (!twaiting (i))
     de4:	000018c4 	andeq	r1, r0, r4, asr #17
     de8:	000018c6 	andeq	r1, r0, r6, asr #17
			if (twakecnd (__pi_old, znew, i->Timer)) {
     dec:	0000190e 	andeq	r1, r0, lr, lsl #18
     df0:	00001938 	andeq	r1, r0, r8, lsr r9
     df4:	0000193a 	andeq	r1, r0, sl, lsr r9
	...
     e00:	000017d2 	ldrdeq	r1, [r0], -r2
     e04:	000017d4 	ldrdeq	r1, [r0], -r4
     e08:	00001876 	andeq	r1, r0, r6, ror r8
     e0c:	000018a0 	andeq	r1, r0, r0, lsr #17
     e10:	000018c4 	andeq	r1, r0, r4, asr #17
     e14:	000018c6 	andeq	r1, r0, r6, asr #17
	...
				wakeuptm (i);
     e20:	00001812 	andeq	r1, r0, r2, lsl r8
		for_all_tasks (i) {
     e24:	0000181a 	andeq	r1, r0, sl, lsl r8
				d = i->Timer - znew;
     e28:	000019be 			; <UNDEFINED> instruction: 0x000019be
     e2c:	000019ca 	andeq	r1, r0, sl, asr #19
	...
		if ((word)(__pi_mintk - znew) < min) 
     e38:	00001918 	andeq	r1, r0, r8, lsl r9
     e3c:	00001938 	andeq	r1, r0, r8, lsr r9
	__pi_old = znew;
     e40:	0000193a 	andeq	r1, r0, sl, lsr r9
}
     e44:	0000197e 	andeq	r1, r0, lr, ror r9
	...
     e50:	000017a4 	andeq	r1, r0, r4, lsr #15
     e54:	000017c4 	andeq	r1, r0, r4, asr #15
     e58:	000017c4 	andeq	r1, r0, r4, asr #15
     e5c:	000019f4 	strdeq	r1, [r0], -r4
void proceed (word state) {
     e60:	000019f4 	strdeq	r1, [r0], -r4
	prcdstate (__pi_curr, state);
     e64:	00001a44 	andeq	r1, r0, r4, asr #20
	...
	release;
     e70:	00001a58 	andeq	r1, r0, r8, asr sl
void __pi_wait (aword event, word state) {
     e74:	00001a5c 	andeq	r1, r0, ip, asr sl
	sint j = nevents (__pi_curr);
     e78:	00001d36 	andeq	r1, r0, r6, lsr sp
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	00001d7e 	andeq	r1, r0, lr, ror sp
	...
		syserror (ENEVENTS, "sw");
     e88:	00001a5c 	andeq	r1, r0, ip, asr sl
     e8c:	00001a62 	andeq	r1, r0, r2, ror #20
	setestate (__pi_curr->Events [j], state, event);
     e90:	00001a9a 	muleq	r0, sl, sl
	incwait (__pi_curr);
     e94:	00001b06 	andeq	r1, r0, r6, lsl #22
	setestate (__pi_curr->Events [j], state, event);
     e98:	00001d9a 	muleq	r0, sl, sp
}
     e9c:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
	...
void __pi_trigger (aword event) {
     ea8:	00001bbe 			; <UNDEFINED> instruction: 0x00001bbe
	for_all_tasks (i) {
     eac:	00001c38 	andeq	r1, r0, r8, lsr ip
		for (j = 0; j < nevents (i); j++) {
     eb0:	00001dc2 	andeq	r1, r0, r2, asr #27
     eb4:	00001dca 	andeq	r1, r0, sl, asr #27
	...
			if (i->Events [j] . Event == event) {
     ec0:	00001c50 	andeq	r1, r0, r0, asr ip
     ec4:	00001ca6 	andeq	r1, r0, r6, lsr #25
     ec8:	00001d1c 	andeq	r1, r0, ip, lsl sp
				wakeupev (i, j);
     ecc:	00001d36 	andeq	r1, r0, r6, lsr sp
	...
}
     ed8:	00001cac 	andeq	r1, r0, ip, lsr #25
aword __pi_join (aword pid, word st) {
     edc:	00001d1c 	andeq	r1, r0, ip, lsl sp
	for_all_tasks (i) {
     ee0:	00001d7e 	andeq	r1, r0, lr, ror sp
     ee4:	00001d86 	andeq	r1, r0, r6, lsl #27
	return 0;
     ee8:	00001dca 	andeq	r1, r0, sl, asr #27
		if ((aword)i == pid) {
     eec:	00001dd4 	ldrdeq	r1, [r0], -r4
	...
	for_all_tasks (i) {
     ef8:	00001a44 	andeq	r1, r0, r4, asr #20
     efc:	00001dd4 	ldrdeq	r1, [r0], -r4
	...
	settstate (__pi_curr, state);
     f08:	00001dd4 	ldrdeq	r1, [r0], -r4
     f0c:	00001e04 	andeq	r1, r0, r4, lsl #28
	...
	update_n_wake (d, YES);
     f18:	00000001 	andeq	r0, r0, r1
	__pi_curr->Timer = __pi_old + d;
     f1c:	00000001 	andeq	r0, r0, r1
     f20:	00001e04 	andeq	r1, r0, r4, lsl #28
	inctimer (__pi_curr);
     f24:	00001e1c 	andeq	r1, r0, ip, lsl lr
	...
}
     f30:	00001e1c 	andeq	r1, r0, ip, lsl lr
     f34:	00001e24 	andeq	r1, r0, r4, lsr #28
	if (fun == NULL)
     f38:	00000001 	andeq	r0, r0, r1
		return (int) __pi_curr;
     f3c:	00000001 	andeq	r0, r0, r1
     f40:	00001e24 	andeq	r1, r0, r4, lsr #28
	for_all_tasks (i)
     f44:	00001e2c 	andeq	r1, r0, ip, lsr #28
}
     f48:	00000001 	andeq	r0, r0, r1
		if (i->code == fun)
     f4c:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i)
     f50:	00000001 	andeq	r0, r0, r1
     f54:	00000001 	andeq	r0, r0, r1
	...
	for (i = 0; *(s+i) != '\0'; i++);
     f60:	00001e8e 	andeq	r1, r0, lr, lsl #29
}
     f64:	00001e9e 	muleq	r0, lr, lr
	for (i = 0; *(s+i) != '\0'; i++);
     f68:	00001ea4 	andeq	r1, r0, r4, lsr #29
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	00001ea6 	andeq	r1, r0, r6, lsr #29
	...
	if (ioreq [loc] != NULL)
     f78:	00001e2c 	andeq	r1, r0, ip, lsr #28
     f7c:	00001e88 	andeq	r1, r0, r8, lsl #29
		syserror (ERESOURCE, "addv");
     f80:	00001e88 	andeq	r1, r0, r8, lsl #29
	ioreq [loc] = rf;
     f84:	00001eb4 			; <UNDEFINED> instruction: 0x00001eb4
}
     f88:	00000001 	andeq	r0, r0, r1
     f8c:	00000001 	andeq	r0, r0, r1
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	00000001 	andeq	r0, r0, r1
     f94:	00000001 	andeq	r0, r0, r1
     f98:	00000001 	andeq	r0, r0, r1
     f9c:	00000001 	andeq	r0, r0, r1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     fa0:	00000001 	andeq	r0, r0, r1
     fa4:	00000001 	andeq	r0, r0, r1
     fa8:	00000001 	andeq	r0, r0, r1
		syserror (ENODEVICE, "io");
     fac:	00000001 	andeq	r0, r0, r1
     fb0:	00000001 	andeq	r0, r0, r1
	if (len == 0)
     fb4:	00000001 	andeq	r0, r0, r1
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	00000001 	andeq	r0, r0, r1
     fbc:	00000001 	andeq	r0, r0, r1
	if (ret >= 0)
     fc0:	00000001 	andeq	r0, r0, r1
	if (ret == -1) {
     fc4:	00000001 	andeq	r0, r0, r1
	...
		iowait (dev, operation, retry);
     fd0:	00001eb4 			; <UNDEFINED> instruction: 0x00001eb4
     fd4:	00001f88 	andeq	r1, r0, r8, lsl #31
     fd8:	00001f88 	andeq	r1, r0, r8, lsl #31
			release;
     fdc:	0000202c 	andeq	r2, r0, ip, lsr #32
	...
		if (retry != WNONE) {
     fe8:	0000203a 	andeq	r2, r0, sl, lsr r0
			iowait (dev, operation, retry);
     fec:	0000203c 	andeq	r2, r0, ip, lsr r0
     ff0:	00002040 	andeq	r2, r0, r0, asr #32
			(ioreq [dev]) (NONE, buf, len);
     ff4:	00002044 	andeq	r2, r0, r4, asr #32
	...
		(ioreq [dev]) (NONE, buf, len);
    1000:	00002348 	andeq	r2, r0, r8, asr #6
    1004:	0000234a 	andeq	r2, r0, sl, asr #6
    1008:	0000234c 	andeq	r2, r0, ip, asr #6
}
    100c:	0000234e 	andeq	r2, r0, lr, asr #6
	...
		delay (-ret - 2, retry);
    1018:	0000202c 	andeq	r2, r0, ip, lsr #32
    101c:	000020a8 	andeq	r2, r0, r8, lsr #1
    1020:	000020a8 	andeq	r2, r0, r8, lsr #1
		release;
    1024:	00002154 	andeq	r2, r0, r4, asr r1
    1028:	00002154 	andeq	r2, r0, r4, asr r1
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    1030:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
    1034:	000021c8 	andeq	r2, r0, r8, asr #3
    1038:	00000001 	andeq	r0, r0, r1
    103c:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "mal1");
    1040:	000021c8 	andeq	r2, r0, r8, asr #3
    1044:	000021d8 	ldrdeq	r2, [r0], -r8
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1048:	000021d8 	ldrdeq	r2, [r0], -r8
    104c:	000021ec 	andeq	r2, r0, ip, ror #3
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1050:	000021ec 	andeq	r2, r0, ip, ror #3
	m_size (mpools [0]) = mlen - m_hdrlen;
    1054:	00002250 	andeq	r2, r0, r0, asr r2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1058:	00002250 	andeq	r2, r0, r0, asr r2
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105c:	00002264 	andeq	r2, r0, r4, ror #4
    1060:	00002264 	andeq	r2, r0, r4, ror #4
}
    1064:	00002278 	andeq	r2, r0, r8, ror r2
    1068:	00002278 	andeq	r2, r0, r8, ror r2
    106c:	0000228c 	andeq	r2, r0, ip, lsl #5
    1070:	0000228c 	andeq	r2, r0, ip, lsl #5
    1074:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    1078:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
void __pi_free (aword *ch) {
    107c:	000022c4 	andeq	r2, r0, r4, asr #5
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1080:	000022c4 	andeq	r2, r0, r4, asr #5
    1084:	000022f0 	strdeq	r2, [r0], -r0
		syserror (EMALLOC, "malg");
    1088:	000022f0 	strdeq	r2, [r0], -r0
    108c:	00002304 	andeq	r2, r0, r4, lsl #6
	mcfree [MA_NP] += m_size (ch);
    1090:	00002304 	andeq	r2, r0, r4, lsl #6
		m_size (ch) ^= MALLOC_UMASK;
    1094:	00002318 	andeq	r2, r0, r8, lsl r3
    1098:	00002318 	andeq	r2, r0, r8, lsl r3
	mcfree [MA_NP] += m_size (ch);
    109c:	00002428 	andeq	r2, r0, r8, lsr #8
	QFREE;
    10a0:	00002428 	andeq	r2, r0, r8, lsr #8
	if (mevent [MA_NP] . nwait) {
    10a4:	0000248c 	andeq	r2, r0, ip, lsl #9
    10a8:	0000248c 	andeq	r2, r0, ip, lsl #9
		trigger ((aword)(&(mevent [MA_NP])));
    10ac:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
		mevent [MA_NP] . nwait --;
    10b0:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
}
    10b4:	00002604 	andeq	r2, r0, r4, lsl #12
	...
    10c0:	00000001 	andeq	r0, r0, r1
void kill (aword pid) {
    10c4:	00000001 	andeq	r0, r0, r1
		pid = (aword) __pi_curr;
    10c8:	00000001 	andeq	r0, r0, r1
	j = NULL;
    10cc:	00000001 	andeq	r0, r0, r1
	...
	syserror (EREQPAR, "kpi");
    10d8:	0000267a 	andeq	r2, r0, sl, ror r6
		if ((aword)i == pid) {
    10dc:	0000267c 	andeq	r2, r0, ip, ror r6
    10e0:	0000267e 	andeq	r2, r0, lr, ror r6
				__PCB = i->Next;
    10e4:	00002682 	andeq	r2, r0, r2, lsl #13
	...
			if (i == __pi_curr)
    10f0:	00000001 	andeq	r0, r0, r1
    10f4:	00000001 	andeq	r0, r0, r1
				release;
    10f8:	00002604 	andeq	r2, r0, r4, lsl #12
				j->Next = i->Next;
    10fc:	00002824 	andeq	r2, r0, r4, lsr #16
    1100:	00002824 	andeq	r2, r0, r4, lsr #16
    1104:	00002884 	andeq	r2, r0, r4, lsl #17
}
    1108:	00000001 	andeq	r0, r0, r1
    110c:	00000001 	andeq	r0, r0, r1
    1110:	00002884 	andeq	r2, r0, r4, lsl #17
	if (size < 8)
    1114:	0000289c 	muleq	r0, ip, r8
	...
		_size = (((aword)size) + 3) >> 2;
    1120:	000028ea 	andeq	r2, r0, sl, ror #17
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	000028ee 	andeq	r2, r0, lr, ror #17
		_size = (((aword)size) + 3) >> 2;
    1128:	000028f4 	strdeq	r2, [r0], -r4
		if (mevent [MA_NP] . nfail != 255)
    112c:	000028f6 	strdeq	r2, [r0], -r6
	...
		mnfree [MA_NP] = 0;
    1138:	000028ee 	andeq	r2, r0, lr, ror #17
    113c:	000028f4 	strdeq	r2, [r0], -r4
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	000028f6 	strdeq	r2, [r0], -r6
    1144:	000028fe 	strdeq	r2, [r0], -lr
	...
		if (m_size (chunk) >= _size)
    1150:	00000001 	andeq	r0, r0, r1
    1154:	00000001 	andeq	r0, r0, r1
		chunk = m_nextp (chunk)) {
    1158:	00000001 	andeq	r0, r0, r1
		m_setnextp (cc, m_nextp (chunk));
    115c:	00000001 	andeq	r0, r0, r1
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1160:	0000289c 	muleq	r0, ip, r8
    1164:	000028e8 	andeq	r2, r0, r8, ror #17
			m_size (chunk) = _size;
    1168:	00000001 	andeq	r0, r0, r1
			cc = chunk + _size + m_hdrlen;
    116c:	00000001 	andeq	r0, r0, r1
    1170:	000028e8 	andeq	r2, r0, r8, ror #17
			m_size (cc) = waste - m_hdrlen;
    1174:	00002954 	andeq	r2, r0, r4, asr r9
			QFREE;
    1178:	00002954 	andeq	r2, r0, r4, asr r9
		mevent [MA_NP] . nfail = 0;
    117c:	0000296a 	andeq	r2, r0, sl, ror #18
	...
		mcfree [MA_NP] -= m_size (chunk);
    1188:	0000296c 	andeq	r2, r0, ip, ror #18
    118c:	00002994 	muleq	r0, r4, r9
		m_size (chunk) |= MALLOC_UMASK;
    1190:	00002994 	muleq	r0, r4, r9
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1194:	0000299c 	muleq	r0, ip, r9
		m_size (chunk) |= MALLOC_UMASK;
    1198:	00000001 	andeq	r0, r0, r1
			mnfree [MA_NP] = mcfree [MA_NP];
    119c:	00000001 	andeq	r0, r0, r1
}
    11a0:	00000001 	andeq	r0, r0, r1
    11a4:	00000001 	andeq	r0, r0, r1
    11a8:	00000001 	andeq	r0, r0, r1
    11ac:	00000001 	andeq	r0, r0, r1
    11b0:	00000001 	andeq	r0, r0, r1
    11b4:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000002f2 	strdeq	r0, [r0], -r2
       4:	024a0003 	subeq	r0, sl, #3
}
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	2f727375 	svccs	0x00727375
      20:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      24:	2f656475 	svccs	0x00656475
      28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
      2c:	6d2f6269 	sfmvs	f6, 4, [pc, #-420]!	; fffffe90 <_estack+0xdfffae90>
      30:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
      34:	2f00656e 	svccs	0x0000656e
      38:	2f727375 	svccs	0x00727375
      3c:	2f62696c 	svccs	0x0062696c
			i = k;
      40:	2f636367 	svccs	0x00636367
				j->Next = k;
      44:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
      48:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
}
      4c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
      50:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
      54:	2f312e32 	svccs	0x00312e32
		release;
      58:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      5c:	00656475 	rsbeq	r6, r5, r5, ror r4
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      68:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      6c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
      70:	2f62696c 	svccs	0x0062696c
      74:	00737973 	rsbseq	r7, r3, r3, ror r9
      78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc4 <_estack+0xdfffafc4>
      7c:	616d2f65 	cmnvs	sp, r5, ror #30
      80:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      84:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      88:	706f746b 	rsbvc	r7, pc, fp, ror #8
      8c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	descriptors [fd] = s;
      90:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	4349502f 	movtmi	r5, #36911	; 0x902f
      98:	502f534f 	eorpl	r5, pc, pc, asr #6
	if (s == NULL)
      9c:	534f6369 	movtpl	r6, #62313	; 0xf369
		syserror (EMALLOC, "tcv05");
      a0:	3143432f 	cmpcc	r3, pc, lsr #6
      a4:	00585833 	subseq	r5, r8, r3, lsr r8
      a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; fffffff4 <_estack+0xdfffaff4>
      ac:	616d2f65 	cmnvs	sp, r5, ror #30
      b0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
      bc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      c0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      c4:	4349502f 	movtmi	r5, #36911	; 0x902f
      c8:	502f534f 	eorpl	r5, pc, pc, asr #6
      cc:	534f6369 	movtpl	r6, #62313	; 0xf369
      d0:	6f682f00 	svcvs	0x00682f00
      d4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff28 <_estack+0xdfffaf28>
      d8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      dc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      e0:	6f746b73 	svcvs	0x00746b73
      e4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      e8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      ec:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      f0:	2f534f43 	svccs	0x00534f43
			wwait (st, 50);
      f4:	4f636950 	svcmi	0x00636950
			curr += 0x1000;
      f8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
      fc:	2f736269 	svccs	0x00736269
		if (from >= EE_SIZE || upto < from)
     100:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
     104:	682f0049 	stmdavs	pc!, {r0, r3, r6}	; <UNPREDICTABLE>
			upto = EE_SIZE - 1;
     108:	2f656d6f 	svccs	0x00656d6f
     10c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     110:	442f6e69 	strtmi	r6, [pc], #-3689	; 118 <_Min_Stack_Size+0x18>
     114:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     118:	4f2f706f 	svcmi	0x002f706f
     11c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     120:	502f5445 	eorpl	r5, pc, r5, asr #8
     124:	534f4349 	movtpl	r4, #62281	; 0xf349
        switch (choice)
     128:	6369502f 	cmnvs	r9, #47	; 0x2f
     12c:	6b2f534f 	blvs	bd4e70 <__ccfg+0xbb4ec8>
     130:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     134:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     138:	2f656d6f 	svccs	0x00656d6f
     13c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     140:	442f6e69 	strtmi	r6, [pc], #-3689	; 148 <_Min_Stack_Size+0x48>
     144:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     148:	4f2f706f 	svcmi	0x002f706f
        proceed Menu_Header;
     14c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	502f5445 	eorpl	r5, pc, r5, asr #8
     154:	534f4349 	movtpl	r4, #62281	; 0xf349
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	6369502f 	cmnvs	r9, #47	; 0x2f
     15c:	562f534f 	strtpl	r5, [pc], -pc, asr #6
     160:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
        proceed Menu_Header;
     164:	756c502f 	strbvc	r5, [ip, #-47]!	; 0xffffffd1
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	6c754e67 	ldclvs	14, cr4, [r5], #-412	; 0xfffffe64
     16c:	6100006c 	tstvs	r0, ip, rrx
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
     174:	00000063 	andeq	r0, r0, r3, rrx
     178:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    if (node < 1 || node > 25) {
     17c:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     180:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
            proceed Set_Node_ID;
     184:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
     188:	00010068 	andeq	r0, r1, r8, rrx
        proceed Menu_Header;
     18c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     190:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
            proceed Set_Group_ID;
     194:	00020068 	andeq	r0, r2, r8, rrx
            proceed Set_Node_ID;
     198:	79745f00 	ldmdbvc	r4!, {r8, r9, sl, fp, ip, lr}^
     19c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
            diag("Find neighbours");
     1a0:	00030068 	andeq	r0, r3, r8, rrx
            diag("Reset Local Storage");
     1a4:	65657200 	strbvs	r7, [r5, #-512]!	; 0xfffffe00
            diag("Create Record on Neighbour");
     1a8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
            diag("Delete Record on Neighbour");
     1ac:	00000300 	andeq	r0, r0, r0, lsl #6
            diag("Retrieve Record on Neighbour");
     1b0:	6b636f6c 	blvs	18dbf68 <__ccfg+0x18bbfc0>
            diag("Show Local Records");
     1b4:	0300682e 	movweq	r6, #2094	; 0x82e
            diag("Reset Local Storage");
     1b8:	735f0000 	cmpvc	pc, #0
     1bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
     1c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
     1c4:	74000003 	strvc	r0, [r0], #-3
     1c8:	73657079 	cmnvc	r5, #121	; 0x79
     1cc:	0300682e 	movweq	r6, #2094	; 0x82e
     1d0:	74730000 	ldrbtvc	r0, [r3], #-0
     1d4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
     1d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1dc:	72610000 	rsbvc	r0, r1, #0
     1e0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     1e4:	00000400 	andeq	r0, r0, r0, lsl #8
     1e8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     1ec:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     1f0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
     1f4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     1f8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     1fc:	00000400 	andeq	r0, r0, r0, lsl #8
static void devinit_uart (int devnum) {
     200:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
	adddevfunc (ioreq_uart_a, devnum);
     204:	5f736e6f 	svcpl	0x00736e6f
     208:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
void udelay (volatile word n) {
     20c:	00040068 	andeq	r0, r4, r8, rrx
     210:	73797300 	cmnvc	r9, #0, 6
	while (n) {
     214:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     218:	00000500 	andeq	r0, r0, r0, lsl #10
}
     21c:	5f766374 	svcpl	0x00766374
	while (n--);
     220:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
     224:	0600682e 	streq	r6, [r0], -lr, lsr #16
     228:	656b0000 	strbvs	r0, [fp, #-0]!
		n--;
     22c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     230:	0700682e 	streq	r6, [r0, -lr, lsr #16]
     234:	6c700000 	ldclvs	0, cr0, [r0], #-0
void mdelay (volatile word n) {
     238:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
     23c:	2e6c6c75 	mcrcs	12, 3, r6, cr12, cr5, {3}
	while (n) {
     240:	00080068 	andeq	r0, r8, r8, rrx
     244:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
}
     248:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
		udelay (999);
     24c:	003e6e69 	eorseq	r6, lr, r9, ror #28
     250:	00000000 	andeq	r0, r0, r0
		n--;
     254:	05002205 	streq	r2, [r0, #-517]	; 0xfffffdfb
     258:	00000002 	andeq	r0, r0, r2
     25c:	01220300 			; <UNDEFINED> instruction: 0x01220300
     260:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
void __pi_ondomain (lword d) {
     264:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     268:	05022501 	streq	r2, [r2, #-1281]	; 0xfffffaff
		if (__pi_systat.effpdm > 1)
     26c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     270:	0205001a 	andeq	r0, r5, #26
			__pi_systat.effpdm = 1;
     274:	000000c8 	andeq	r0, r0, r8, asr #1
	PRCMPowerDomainOn (d);
     278:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
     27c:	1a05011c 	bne	1406f4 <__ccfg+0x12074c>
     280:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     284:	0a039206 	beq	e4aa4 <__ccfg+0xc4afc>
     288:	15090501 	strne	r0, [r9, #-1281]	; 0xfffffaff
     28c:	01061505 	tsteq	r6, r5, lsl #10
	__pi_systat.ondmns |= d;
     290:	3e060905 	vmlacc.f16	s0, s12, s10	; <UNPREDICTABLE>
     294:	01061005 	tsteq	r6, r5
}
     298:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     29c:	01061105 	tsteq	r6, r5, lsl #2
void __pi_syserror (word ec, const char *m) {
     2a0:	31060905 	tstcc	r6, r5, lsl #18
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	144dd913 	strbne	sp, [sp], #-2323	; 0xfffff6ed
     2a8:	082c0368 	stmdaeq	ip!, {r3, r5, r6, r8, r9}
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	5a4c3f74 	bpl	1310084 <__ccfg+0x12f00dc>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2b0:	05684d3f 	strbeq	r4, [r8, #-3391]!	; 0xfffff2c1
     2b4:	7f9e0305 	svcvc	0x009e0305
     2b8:	06120501 	ldreq	r0, [r2], -r1, lsl #10
		all_leds_blink;
     2bc:	20080501 	andcs	r0, r8, r1, lsl #10
     2c0:	3d060905 	vstrcc.16	s0, [r6, #-10]	; <UNPREDICTABLE>
     2c4:	e2030d05 	and	r0, r3, #320	; 0x140
     2c8:	09050100 	stmdbeq	r5, {r8}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	3e01053f 	mcrcc	5, 0, r0, cr1, cr15, {1}
     2d0:	43030d05 	movwmi	r0, #15621	; 0x3d05
     2d4:	0625062e 	strteq	r0, [r5], -lr, lsr #12
     2d8:	06331f2f 	ldrteq	r1, [r3], -pc, lsr #30
     2dc:	06201903 	strteq	r1, [r0], -r3, lsl #18
     2e0:	206b032f 	rsbcs	r0, fp, pc, lsr #6
	while (1) {
     2e4:	33333333 	teqcc	r3, #-872415232	; 0xcc000000
     2e8:	1a031305 	bne	c4f04 <__ccfg+0xa4f5c>
     2ec:	0601052e 	streq	r0, [r1], -lr, lsr #10
     2f0:	0020022e 	eoreq	r0, r0, lr, lsr #4
void tci_run_delay_timer () {
     2f4:	155c0101 	ldrbne	r0, [ip, #-257]	; 0xfffffeff
	setdel = __pi_mintk - __pi_old;
     2f8:	00030000 	andeq	r0, r3, r0
     2fc:	0000029b 	muleq	r0, fp, r2
     300:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     304:	0101000d 	tsteq	r1, sp
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     308:	00000101 	andeq	r0, r0, r1, lsl #2
     30c:	00000100 	andeq	r0, r0, r0, lsl #2
     310:	6f682f01 	svcvs	0x00682f01
     314:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 168 <_Min_Stack_Size+0x68>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	sti_tim;
     31c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
}
     320:	6f746b73 	svcvs	0x00746b73
     324:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     328:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     32c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     330:	2f534f43 	svccs	0x00534f43
	cli_aux;
     334:	4f636950 	svcmi	0x00636950
     338:	43432f53 	movtmi	r2, #16211	; 0x3f53
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     33c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     340:	6f682f00 	svcvs	0x00682f00
     344:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 198 <_Min_Stack_Size+0x98>
     348:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	sti_aux;
     34c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
}
     350:	6f746b73 	svcvs	0x00746b73
     354:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     358:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
void AONRTCIntHandler () {
     35c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     360:	2f534f43 	svccs	0x00534f43
     364:	4f636950 	svcmi	0x00636950
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	43432f53 	movtmi	r2, #16211	; 0x3f53
		if (__pi_utims [0] == 0)
     36c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     370:	3143432f 	cmpcc	r3, pc, lsr #6
		if (*(__pi_utims [0])) {
     374:	57585833 	smmlarpl	r8, r3, r8, r5
     378:	2f455241 	svccs	0x00455241
			(*(__pi_utims [0]))--;
     37c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
		if (__pi_utims [1] == 0)
     380:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		if (*(__pi_utims [1])) {
     384:	682f0062 	stmdavs	pc!, {r1, r5, r6}	; <UNPREDICTABLE>
			aux_timer_inactive = 0;
     388:	2f656d6f 	svccs	0x00656d6f
			(*(__pi_utims [1]))--;
     38c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
		if (__pi_utims [2] == 0)
     390:	442f6e69 	strtmi	r6, [pc], #-3689	; 398 <AONRTCIntHandler+0x3c>
		if (*(__pi_utims [2])) {
     394:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
			(*(__pi_utims [2]))--;
     398:	4f2f706f 	svcmi	0x002f706f
		if (__pi_utims [3] != 0) {
     39c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			if (*(__pi_utims [3])) {
     3a0:	502f5445 	eorpl	r5, pc, r5, asr #8
				aux_timer_inactive = 0;
     3a4:	534f4349 	movtpl	r4, #62281	; 0xf349
				(*(__pi_utims [3]))--;
     3a8:	6369502f 	cmnvs	r9, #47	; 0x2f
	if (__pi_systat.ledsts) {
     3ac:	502f534f 	eorpl	r5, pc, pc, asr #6
     3b0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
		if (__pi_systat.ledblc++ == 0) {
     3b4:	004f492f 	subeq	r4, pc, pc, lsr #18
     3b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 304 <tci_run_delay_timer+0x10>
			if (__pi_systat.ledblk) {
     3bc:	616d2f65 	cmnvs	sp, r5, ror #30
     3c0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     3c4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     3cc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
				if (__pi_systat.ledsts & 0x2)
     3d0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     3d4:	4349502f 	movtmi	r5, #36911	; 0x902f
     3d8:	502f534f 	eorpl	r5, pc, pc, asr #6
				if (__pi_systat.ledsts & 0x4)
     3dc:	534f6369 	movtpl	r6, #62313	; 0xf369
				__pi_systat.ledblk = 0;
     3e0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
     3e4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
			if (__pi_systat.fstblk)
     3e8:	6f736e65 	svcvs	0x00736e65
     3ec:	2f007372 	svccs	0x00007372
				__pi_systat.ledblc = 200;
     3f0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
		cli_tim;
     3f8:	2f6e6974 	svccs	0x006e6974
		__pi_new += setdel;
     3fc:	6b736544 	blvs	1cd9914 <__ccfg+0x1cb996c>
     400:	2f706f74 	svccs	0x00706f74
		setdel = 0;
     404:	4f534c4f 	svcmi	0x00534c4f
		RISE_N_SHINE;
     408:	2f54454e 	svccs	0x0054454e
		__pi_new += setdel;
     40c:	4f434950 	svcmi	0x00434950
		RISE_N_SHINE;
     410:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     414:	2f534f63 	svccs	0x00534f63
		aux_timer_inactive = 1;
     418:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     41c:	2f006c65 	svccs	0x00006c65
				if (__pi_systat.ledsts & 0x1)
     420:	2f727375 	svccs	0x00727375
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     424:	2f62696c 	svccs	0x0062696c
     428:	2f636367 	svccs	0x00636367
				if (__pi_systat.ledsts & 0x2)
     42c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     430:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
     434:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
				if (__pi_systat.ledsts & 0x8)
     438:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
				__pi_systat.ledblk = 1;
     43c:	2f312e32 	svccs	0x00312e32
     440:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
		if (aux_timer_inactive) {
     444:	00656475 	rsbeq	r6, r5, r5, ror r4
			cli_aux;
     448:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 394 <AONRTCIntHandler+0x38>
     44c:	616d2f65 	cmnvs	sp, r5, ror #30
     450:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     454:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     458:	706f746b 	rsbvc	r7, pc, fp, ror #8
     45c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     460:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     464:	4349502f 	movtmi	r5, #36911	; 0x902f
     468:	502f534f 	eorpl	r5, pc, pc, asr #6
     46c:	534f6369 	movtpl	r6, #62313	; 0xf369
word tci_update_delay_ticks (Boolean force) {
     470:	616d0000 	cmnvs	sp, r0
	cli_tim;
     474:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
     478:	00000100 	andeq	r0, r0, r0, lsl #2
	if (setdel) {
     47c:	5f737973 	svcpl	0x00737973
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     484:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     488:	6d630000 	stclvs	0, cr0, [r3, #-0]
     48c:	5f736973 	svcpl	0x00736973
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     490:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
				AON_RTC_O_CH0CMP)) - gettav ());
     494:	00010068 	andeq	r0, r1, r8, rrx
	return NO;
     498:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
			setdel = 0;
     49c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     4a0:	69000002 	stmdbvs	r0, {r1}
     4a4:	745f7172 	ldrbvc	r7, [pc], #-370	; 4ac <tci_update_delay_ticks+0x3c>
}
     4a8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
		sti_tim;
     4ac:	64656c5f 	strbtvs	r6, [r5], #-3167	; 0xfffff3a1
		return YES;
     4b0:	00682e73 	rsbeq	r2, r8, r3, ror lr
     4b4:	75000003 	strvc	r0, [r0, #-3]
     4b8:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
     4bc:	00020068 	andeq	r0, r2, r8, rrx
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	71726900 	cmnvc	r2, r0, lsl #18
	UARTDisable (UART0_BASE);
     4c4:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
	UARTDisable (UART0_BASE);
     4cc:	0300682e 	movweq	r6, #2094	; 0x82e
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	72690000 	rsbvc	r0, r9, #0
     4d4:	69705f71 	ldmdbvs	r0!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     4d8:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
     4dc:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     4e4:	72700000 	rsbsvc	r0, r0, #0
     4e8:	682e6d63 	stmdavs	lr!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	00000200 	andeq	r0, r0, r0, lsl #4
     4f0:	5f6e6f61 	svcpl	0x006e6f61
     4f4:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
	urates [0] = rate;
     4f8:	00020068 	andeq	r0, r2, r8, rrx
}
     4fc:	72777000 	rsbsvc	r7, r7, #0
     500:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
     504:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     508:	61000002 	tstvs	r0, r2
     50c:	695f6e6f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
     510:	682e636f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     514:	00000200 	andeq	r0, r0, r0, lsl #4
     518:	65686373 	strbvs	r6, [r8, #-883]!	; 0xfffffc8d
     51c:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	00682e72 	rsbeq	r2, r8, r2, ror lr
     524:	61000005 	tstvs	r0, r5
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     528:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
     52c:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
	__pi_uart_setrate (urates [0], __pi_uart);
     530:	00000200 	andeq	r0, r0, r0, lsl #4
     534:	5f6e6f61 	svcpl	0x006e6f61
     538:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
     53c:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     540:	00000200 	andeq	r0, r0, r0, lsl #4
     544:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     548:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
	switch (operation) {
     54c:	00000600 	andeq	r0, r0, r0, lsl #12
static int ioreq_uart_a (int operation, char *buf, int len) {
     550:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     554:	0100682e 	tsteq	r0, lr, lsr #16
     558:	616d0000 	cmnvs	sp, r0
     55c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     560:	00000100 	andeq	r0, r0, r0, lsl #2
				*buf++ = uart_a_read;
     564:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
     568:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
			while (len && uart_a_char_available) {
     56c:	0100682e 	tsteq	r0, lr, lsr #16
     570:	75620000 	strbvc	r0, [r2, #-0]!
     574:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
			if (len != operation) {
     578:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
}
     57c:	00682e73 	rsbeq	r2, r8, r3, ror lr
     580:	73000001 	movwvc	r0, #1
			uart_a_disable_int;
     584:	6f697379 	svcvs	0x00697379
			if (uart_a_char_available) {
     588:	0700682e 	streq	r6, [r0, -lr, lsr #16]
				*buf++ = uart_a_read;
     58c:	656b0000 	strbvs	r0, [fp, #-0]!
			uart_a_disable_int;
     590:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     594:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
			if (uart_a_char_available) {
     598:	05000000 	streq	r0, [r0, #-0]
     59c:	02050027 	andeq	r0, r5, #39	; 0x27
				uart_a_enable_int;
     5a0:	00000200 	andeq	r0, r0, r0, lsl #4
     5a4:	0106fc03 	tsteq	r6, r3, lsl #24	; <UNPREDICTABLE>
				goto Redo_rx;
     5a8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5ac:	05100627 	ldreq	r0, [r0, #-1575]	; 0xfffff9d9
     5b0:	05022202 	streq	r2, [r2, #-514]	; 0xfffffdfe
			return -2;
     5b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     5b8:	0205001f 	andeq	r0, r5, #31
				uart_a_write (*buf);
     5bc:	0000020c 	andeq	r0, r0, ip, lsl #4
     5c0:	05011803 	streq	r1, [r1, #-2051]	; 0xfffff7fd
			while (len && uart_a_room_in_tx) {
     5c4:	08053d02 	stmdaeq	r5, {r1, r8, sl, fp, ip, sp}
     5c8:	06090501 	streq	r0, [r9], -r1, lsl #10
     5cc:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
			if (len != operation) {
     5d0:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
			uart_a_disable_int;
     5d4:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
     5d8:	0d051b02 	vstreq	d1, [r5, #-8]
			if (uart_a_room_in_tx) {
     5dc:	01080501 	tsteq	r8, r1, lsl #10
     5e0:	01060a05 	tsteq	r6, r5, lsl #20
				uart_a_enable_int;
     5e4:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
     5e8:	05340603 	ldreq	r0, [r4, #-1539]!	; 0xfffff9fd
				*buf++ = uart_a_read;
     5ec:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
			if (uart_a_room_in_tx) {
     5f0:	01010007 	tsteq	r1, r7
				uart_a_write (*buf);
     5f4:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
     5f8:	00023802 	andeq	r3, r2, r2, lsl #16
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5fc:	011f0300 	tsteq	pc, r0, lsl #6
     600:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
			uart_a_enable_int;
     604:	09050108 	stmdbeq	r5, {r3, r8}
     608:	08050106 	stmdaeq	r5, {r1, r2, r8}
     60c:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
			return 0;
     610:	39060305 	stmdbcc	r6, {r0, r2, r8, r9}
			if (len == UART_CNTRL_SETRATE) {
     614:	0604054b 	streq	r0, [r4], -fp, asr #10
				if (__pi_uart_setrate (*((word*)buf),
     618:	00070201 	andeq	r0, r7, r1, lsl #4
     61c:	1e050101 	adfnes	f0, f5, f1
     620:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
				syserror (EREQPAR, "uar");
     624:	03000002 	movweq	r0, #2
			syserror (ENOOPER, "uai");
     628:	0205012a 	andeq	r0, r5, #-2147483638	; 0x8000000a
			if (len == UART_CNTRL_GETRATE) {
     62c:	061e0516 			; <UNDEFINED> instruction: 0x061e0516
				return 1;
     630:	2405050e 	strcs	r0, [r5], #-1294	; 0xfffffaf2
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     634:	051c1e05 	ldreq	r1, [ip, #-3589]	; 0xfffff1fb
			syserror (ENOOPER, "uai");
     638:	03052405 	movweq	r2, #21509	; 0x5405
     63c:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
     640:	06050106 	streq	r0, [r5], -r6, lsl #2
     644:	0604052e 	streq	r0, [r4], -lr, lsr #10
     648:	06170521 	ldreq	r0, [r7], -r1, lsr #10
     64c:	06020501 	streq	r0, [r2], -r1, lsl #10
     650:	3b05593f 	blcc	156b54 <__ccfg+0x136bac>
     654:	01080501 	tsteq	r8, r1, lsl #10
     658:	01060905 	tsteq	r6, r5, lsl #18
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     65c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
void UART0IntHandler () {
     660:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     668:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
     66c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     670:	0205001f 	andeq	r0, r5, #31
     674:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     678:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
     67c:	1f051702 	svcne	0x00051702
		RISE_N_SHINE;
     680:	02050d06 	andeq	r0, r5, #384	; 0x180
     684:	1b1f0525 	blne	7c1b20 <__ccfg+0x7a1b78>
		i_trigger (devevent (UART_A, READ));
     688:	06250205 	strteq	r0, [r5], -r5, lsl #4
     68c:	013c053d 	teqeq	ip, sp, lsr r5
     690:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     694:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     698:	02054a08 	andeq	r4, r5, #8, 20	; 0x8000
     69c:	05053006 	streq	r3, [r5, #-6]
     6a0:	03050106 	movweq	r0, #20742	; 0x5106
     6a4:	12054b06 	andne	r4, r5, #6144	; 0x1800
     6a8:	27050106 	strcs	r0, [r5, -r6, lsl #2]
     6ac:	20060520 	andcs	r0, r6, r0, lsr #10
     6b0:	21060405 	tstcs	r6, r5, lsl #8
     6b4:	01062405 	tsteq	r6, r5, lsl #8
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b8:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
     6bc:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     6c0:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
		i_trigger (devevent (UART_A, WRITE));
     6c4:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     6cc:	02050013 	andeq	r0, r5, #19
		RISE_N_SHINE;
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	0100ce03 	tsteq	r0, r3, lsl #28
     6d8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
		i_trigger (devevent (UART_A, WRITE));
     6dc:	051e0613 	ldreq	r0, [lr, #-1555]	; 0xfffff9ed
     6e0:	33062202 	movwcc	r2, #25090	; 0x6202
     6e4:	13030536 	movwne	r0, #13622	; 0x3536
     6e8:	04050204 	streq	r0, [r5], #-516	; 0xfffffdfc
     6ec:	0101f003 	tsteq	r1, r3	; <UNPREDICTABLE>
     6f0:	065c0530 			; <UNDEFINED> instruction: 0x065c0530
     6f4:	06040501 	streq	r0, [r4], -r1, lsl #10
     6f8:	0a05143e 	beq	1457f8 <__ccfg+0x125850>
     6fc:	00050210 	andeq	r0, r5, r0, lsl r2
     700:	2d050101 	stfcss	f0, [r5, #-4]
     704:	a0020500 	andge	r0, r2, r0, lsl #10
}
     708:	03000002 	movweq	r0, #2
     70c:	05010197 	streq	r0, [r1, #-407]	; 0xfffffe69
     710:	01011402 	tsteq	r1, r2, lsl #8
     714:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     718:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
void __buttons_setirq (int val) {
     71c:	03063502 	movweq	r3, #25858	; 0x6502
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	03044a09 	movweq	r4, #18953	; 0x4a09
     724:	b5030305 	strlt	r0, [r3, #-773]	; 0xfffffcfb
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	0404017f 	streq	r0, [r4], #-383	; 0xfffffe81
     72c:	03062d05 	movweq	r2, #27909	; 0x6d05
     730:	042001cb 	strteq	r0, [r0], #-459	; 0xfffffe35
		bn = BUTTON_GPIO (__button_list [i]);
     734:	06020501 	streq	r0, [r2], -r1, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     738:	3c7f8f03 	ldclcc	15, cr8, [pc], #-12	; 734 <__buttons_setirq+0x18>
     73c:	01130305 	tsteq	r3, r5, lsl #6
     740:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
     744:	00eb0329 	rsceq	r0, fp, r9, lsr #6
     748:	17050501 	strne	r0, [r5, -r1, lsl #10]
     74c:	01062d05 	tsteq	r6, r5, lsl #26
}
     750:	03050104 	movweq	r0, #20740	; 0x5104
     754:	207f9003 	rsbscs	r9, pc, r3
     758:	2d050404 	cfstrscs	mvf0, [r5, #-16]
     75c:	2000f003 	andcs	pc, r0, r3
void __pinlist_setirq (int val) {
     760:	03050104 	movweq	r0, #20740	; 0x5104
	for (i = 0; i < N_PINLIST; i++) {
     764:	7f900306 	svcvc	0x00900306
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     768:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     76c:	00eb0329 	rsceq	r0, fp, r9, lsr #6
	for (i = 0; i < N_PINLIST; i++) {
     770:	17050501 	strne	r0, [r5, -r1, lsl #10]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     774:	01062d05 	tsteq	r6, r5, lsl #26
     778:	03050104 	movweq	r0, #20740	; 0x5104
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77c:	7f900306 	svcvc	0x00900306
     780:	01010120 	tsteq	r1, r0, lsr #2
     784:	66010101 	strvs	r0, [r1], -r1, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     788:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
}
     78c:	03290504 			; <UNDEFINED> instruction: 0x03290504
     790:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
     794:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     798:	01040106 	tsteq	r4, r6, lsl #2
void GPIOIntHandler () {
     79c:	da030305 	ble	c13b8 <__ccfg+0xa1410>
if (buttons_int) {
     7a0:	0404207e 	streq	r2, [r4], #-126	; 0xffffff82
     7a4:	a6032d05 	strge	r2, [r3], -r5, lsl #26
	buttons_disable ();
     7a8:	01042001 	tsteq	r4, r1
     7ac:	03060305 	movweq	r0, #25349	; 0x6305
	i_trigger ((aword)&__button_list);
     7b0:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
     7b4:	03290504 			; <UNDEFINED> instruction: 0x03290504
     7b8:	050101a1 	streq	r0, [r1, #-417]	; 0xfffffe5f
     7bc:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     7c0:	01040106 	tsteq	r4, r6, lsl #2
     7c4:	03060305 	movweq	r0, #25349	; 0x6305
     7c8:	01207eda 	ldrdeq	r7, [r0, -sl]!
     7cc:	01010101 	tsteq	r1, r1, lsl #2
     7d0:	2e015801 	cdpcs	8, 0, cr5, cr1, cr1, {0}
     7d4:	02110805 	andseq	r0, r1, #327680	; 0x50000
     7d8:	01010009 	tsteq	r1, r9
	RISE_N_SHINE;
     7dc:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
     7e0:	0002f402 	andeq	pc, r2, r2, lsl #8
     7e4:	029d0300 	addseq	r0, sp, #0, 6
if (pin_sensor_int) {
     7e8:	16020501 	strne	r0, [r2], -r1, lsl #10
     7ec:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
	i_trigger ((aword)(&__input_pins));
     7f0:	05241605 	streq	r1, [r4, #-1541]!	; 0xfffff9fb
     7f4:	16054a09 	strne	r4, [r5], -r9, lsl #20
     7f8:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
     7fc:	23060205 	movwcs	r0, #25093	; 0x6205
     800:	05017603 	streq	r7, [r1, #-1539]	; 0xfffff9fd
     804:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     808:	2e0d0302 	cdpcs	3, 0, cr0, cr13, cr2, {0}
     80c:	73032f05 	movwvc	r2, #16133	; 0x3f05
     810:	032a0520 			; <UNDEFINED> instruction: 0x032a0520
     814:	2f05200a 	svccs	0x0005200a
     818:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
	__pinsen_disable_and_clear;
     81c:	2a052e36 	bcs	14c0fc <__ccfg+0x12c154>
	RISE_N_SHINE;
     820:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
     824:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     828:	022f0601 	eoreq	r0, pc, #1048576	; 0x100000
}
     82c:	0101000b 	tsteq	r1, fp
     830:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
     834:	00033402 	andeq	r3, r3, r2, lsl #8
     838:	02aa0300 	adceq	r0, sl, #0, 6
     83c:	17020501 	strne	r0, [r2, -r1, lsl #10]
void system_init () {
     840:	1b062105 	blne	188c5c <__ccfg+0x168cb4>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     848:	052e0609 	streq	r0, [lr, #-1545]!	; 0xfffff9f7
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	69031402 	stmdbvs	r3, {r1, sl, ip}
     850:	06110501 	ldreq	r0, [r1], -r1, lsl #10
     854:	2e2f0501 	cfsh64cs	mvdx0, mvdx15, #1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     858:	17032a05 	strne	r2, [r3, -r5, lsl #20]
     85c:	032f0520 			; <UNDEFINED> instruction: 0x032f0520
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	36052069 	strcc	r2, [r5], -r9, rrx
     864:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     868:	02052017 	andeq	r2, r5, #23
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     870:	0601052e 	streq	r0, [r1], -lr, lsr #10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     874:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     878:	1a050101 	bne	140c84 <__ccfg+0x120cdc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87c:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     880:	03000003 	movweq	r0, #3
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	050102b7 	streq	r0, [r1, #-695]	; 0xfffffd49
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
		pin = (port_confs [i] >> 19) & 0x1f;
     88c:	050e061a 	streq	r0, [lr, #-1562]	; 0xfffff9e6
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     890:	0905240b 	stmdbeq	r5, {r0, r1, r3, sl, sp}
     894:	0602052e 	streq	r0, [r2], -lr, lsr #10
     898:	06050532 			; <UNDEFINED> instruction: 0x06050532
     89c:	1e2b0514 	mcrne	5, 1, r0, cr11, cr4, {0}
		if (port_confs [i] & 0x80)
     8a0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a4:	01060505 	tsteq	r6, r5, lsl #10
     8a8:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
		if (port_confs [i] & 0x40)
     8ac:	12051518 	andne	r1, r5, #24, 10	; 0x6000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	06050106 	streq	r0, [r5], -r6, lsl #2
     8b4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b8:	06070530 			; <UNDEFINED> instruction: 0x06070530
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8bc:	20060501 	andcs	r0, r6, r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8c0:	2f060405 	svccs	0x00060405
	all_leds_blink;
     8c4:	01061705 	tsteq	r6, r5, lsl #14
     8c8:	2f060405 	svccs	0x00060405
     8cc:	01061705 	tsteq	r6, r5, lsl #14
     8d0:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     8d4:	01061205 	tsteq	r6, r5, lsl #4
     8d8:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     8dc:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8e0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     8e4:	04052006 	streq	r2, [r5], #-6
     8e8:	17052106 	strne	r2, [r5, -r6, lsl #2]
     8ec:	051f1306 	ldreq	r1, [pc, #-774]	; 5ee <ioreq_uart_a+0xa2>
     8f0:	052f0604 	streq	r0, [pc, #-1540]!	; 2f4 <tci_run_delay_timer>
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	12051403 	andne	r1, r5, #50331648	; 0x3000000
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8f8:	06050106 	streq	r0, [r5], -r6, lsl #2
     8fc:	06030520 	streq	r0, [r3], -r0, lsr #10
	IntEnable (INT_AON_RTC_COMB);
     900:	06070522 	streq	r0, [r7], -r2, lsr #10
     904:	20060501 	andcs	r0, r6, r1, lsl #10
     908:	21060405 	tstcs	r6, r5, lsl #8
	__pi_malloc_init ();
     90c:	13061705 	movwne	r1, #26373	; 0x6705
	IntEnable (INT_AON_GPIO_EDGE);
     910:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     914:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     918:	01061205 	tsteq	r6, r5, lsl #4
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     91c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     920:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     924:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     928:	05052007 	streq	r2, [r5, #-7]
     92c:	18052106 	stmdane	r5, {r1, r2, r8, sp}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     930:	051f1306 	ldreq	r1, [pc, #-774]	; 632 <ioreq_uart_a+0xe6>
     934:	042f0605 	strteq	r0, [pc], #-1541	; 93c <system_init+0xfc>
     938:	03020505 	movweq	r0, #9477	; 0x2505
	urates [0] = UART_RATE / 100;
     93c:	05017da3 	streq	r7, [r1, #-3491]	; 0xfffff25d
     940:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
	reinit_uart ();
     944:	03052e05 	movweq	r2, #24069	; 0x5e05
	EXTRA_INITIALIZERS;
     948:	12053006 	andne	r3, r5, #6
     94c:	19050106 	stmdbne	r5, {r1, r2, r8}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     950:	3c060520 	cfstr32cc	mvfx0, [r6], {32}
     954:	21060405 	tstcs	r6, r5, lsl #8
     958:	01061305 	tsteq	r6, r5, lsl #6
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     95c:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     960:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     964:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     968:	06080521 	streq	r0, [r8], -r1, lsr #10
			devinit [i] . init (devinit [i] . param);
     96c:	06060501 	streq	r0, [r6], -r1, lsl #10
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     970:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     974:	02960329 	addseq	r0, r6, #-1543503872	; 0xa4000000
     978:	17050501 	strne	r0, [r5, -r1, lsl #10]
	IntEnable (INT_UART0_COMB);
     97c:	01062d05 	tsteq	r6, r5, lsl #26
     980:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
}
     984:	7de60306 	stclvc	3, cr0, [r6, #24]!
	tci_run_auxiliary_timer ();
     988:	0614054a 	ldreq	r0, [r4], -sl, asr #10
		diag ("");
     98c:	20080501 	andcs	r0, r8, r1, lsl #10
     990:	21060605 	tstcs	r6, r5, lsl #12
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     994:	29050404 	stmdbcs	r5, {r2, sl}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     998:	01029403 	tsteq	r2, r3, lsl #8
		diag ("Leftover RAM: %d bytes",
     99c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     9a0:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     9a4:	06050505 	streq	r0, [r5], -r5, lsl #10
     9a8:	4a7de803 	bmi	1f7a9bc <__ccfg+0x1f5aa14>
     9ac:	01061405 	tsteq	r6, r5, lsl #8
     9b0:	21060605 	tstcs	r6, r5, lsl #12
     9b4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     9b8:	06140513 			; <UNDEFINED> instruction: 0x06140513
     9bc:	06060501 	streq	r0, [r6], -r1, lsl #10
     9c0:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
     9c4:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
     9c8:	0a030106 	beq	c0de8 <__ccfg+0xa0e40>
     9cc:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
     9d0:	06130522 	ldreq	r0, [r3], -r2, lsr #10
     9d4:	20070501 	andcs	r0, r7, r1, lsl #10
     9d8:	2f060505 	svccs	0x00060505
     9dc:	01061805 	tsteq	r6, r5, lsl #16
     9e0:	0b050104 	bleq	140df8 <__ccfg+0x120e50>
     9e4:	02cd0306 	sbceq	r0, sp, #402653184	; 0x18000000
     9e8:	1a02052e 	bne	81ea8 <__ccfg+0x61f00>
     9ec:	01060505 	tsteq	r6, r5, lsl #10
     9f0:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     9f4:	30060c05 	andcc	r0, r6, r5, lsl #24
__attribute__ ((noreturn)) void __pi_release () {
     9f8:	062c0305 	strteq	r0, [ip], -r5, lsl #6
     9fc:	060c0522 	streq	r0, [ip], -r2, lsr #10
     a00:	2f0a0501 	svccs	0x000a0501
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a04:	051f0c05 	ldreq	r0, [pc, #-3077]	; fffffe07 <_estack+0xdfffae07>
	check_stack_overflow;
     a08:	0c052203 	sfmeq	f2, 4, [r5], {3}
     a0c:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
     a10:	4a01132f 	bmi	456d4 <__ccfg+0x2572c>
	update_n_wake (MAX_WORD, NO);
     a14:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
     a18:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
     a1c:	20450316 	subcs	r0, r5, r6, lsl r3
	for_all_tasks (__pi_curr) {
     a20:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     a24:	7dc90306 	stclvc	3, cr0, [r9, #24]
     a28:	0608054a 	streq	r0, [r8], -sl, asr #10
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	06060501 	streq	r0, [r6], -r1, lsl #10
	__SLEEP;
     a30:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     a34:	02c20329 	sbceq	r0, r2, #-1543503872	; 0xa4000000
     a38:	17050501 	strne	r0, [r5, -r1, lsl #10]
     a3c:	01062d05 	tsteq	r6, r5, lsl #26
	system_event_count ++;
     a40:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     a44:	7dba0306 	ldcvc	3, cr0, [sl, #24]!
	switch (__pi_systat.effpdm) {
     a48:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     a4c:	20080501 	andcs	r0, r8, r1, lsl #10
     a50:	21060605 	tstcs	r6, r5, lsl #12
     a54:	29050404 	stmdbcs	r5, {r2, sl}
			__WFI ();
     a58:	0102c003 	tsteq	r2, r3
     a5c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     a60:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	check_stack_overflow;
     a64:	06050505 	streq	r0, [r5], -r5, lsl #10
     a68:	4a7dbc03 	bmi	1f6fa7c <__ccfg+0x1f4fad4>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     a6c:	01061405 	tsteq	r6, r5, lsl #8
     a70:	21060605 	tstcs	r6, r5, lsl #12
			(__pi_curr->code) (tstate (__pi_curr));
     a74:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
			goto Redo;
     a78:	06140513 			; <UNDEFINED> instruction: 0x06140513
	for_all_tasks (__pi_curr) {
     a7c:	06060501 	streq	r0, [r6], -r1, lsl #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a84:	18051305 	stmdane	r5, {r0, r2, r8, r9, ip}
     a88:	01040106 	tsteq	r4, r6, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     a8c:	03060305 	movweq	r0, #25349	; 0x6305
     a90:	054a02ce 	strbeq	r0, [sl, #-718]	; 0xfffffd32
     a94:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a98:	02300604 	eorseq	r0, r0, #4, 12	; 0x400000
     a9c:	01010015 	tsteq	r1, r5, lsl r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     aa0:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
     aa4:	00047002 	andeq	r7, r4, r2
			__WFI ();
     aa8:	03890300 	orreq	r0, r9, #0, 6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     aac:	16020501 	strne	r0, [r2], -r1, lsl #10
     ab0:	0e062d05 	cdpeq	13, 0, cr2, cr6, cr5, {0}
}
     ab4:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	02052f06 	andeq	r2, r5, #6, 30
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     abc:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ac0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     ac4:	03052005 	movweq	r2, #20485	; 0x5005
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac8:	20090306 	andcs	r0, r9, r6, lsl #6
     acc:	01060605 	tsteq	r6, r5, lsl #12
     ad0:	23060405 	movwcs	r0, #25605	; 0x6405
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ad4:	01061a05 	tsteq	r6, r5, lsl #20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad8:	03060205 	movweq	r0, #25093	; 0x6205
     adc:	052e7ef9 	streq	r7, [lr, #-3833]!	; 0xfffff107
     ae0:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     ae4:	1a052e2e 	bne	14c3a4 <__ccfg+0x12c3fc>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ae8:	3c018703 	stccc	7, cr8, [r1], {3}
     aec:	2018052f 	andscs	r0, r8, pc, lsr #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	051f1705 	ldreq	r1, [pc, #-1797]	; 3f3 <AONRTCIntHandler+0x97>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     af4:	200a0309 	andcs	r0, sl, r9, lsl #6
     af8:	76030d05 	strvc	r0, [r3], -r5, lsl #26
     afc:	230b0520 	movwcs	r0, #46368	; 0xb520
     b00:	051d0d05 	ldreq	r0, [sp, #-3333]	; 0xfffff2fb
     b04:	134d0604 	movtne	r0, #54788	; 0xd604
			SysCtrlSetRechargeBeforePowerDown
     b08:	19060105 	stmdbne	r6, {r0, r2, r8}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b0c:	29060305 	stmdbcs	r6, {r0, r2, r8, r9}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b10:	060a052f 	streq	r0, [sl], -pc, lsr #10
     b14:	00090201 	andeq	r0, r9, r1, lsl #4
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	33050101 	movwcc	r0, #20737	; 0x5101
     b1c:	c0020500 	andgt	r0, r2, r0, lsl #10
     b20:	03000004 	movweq	r0, #4
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b24:	050105d3 	streq	r0, [r1, #-1491]	; 0xfffffa2d
     b28:	05171402 	ldreq	r1, [r7, #-1026]	; 0xfffffbfe
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	79030633 	stmdbvc	r3, {r0, r1, r4, r5, r9, sl}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	27020501 	strcs	r0, [r2, -r1, lsl #10]
     b34:	79033305 	stmdbvc	r3, {r0, r2, r8, r9, ip, sp}
     b38:	2702053c 	smladxcs	r2, ip, r5, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b3c:	02043e06 	andeq	r3, r4, #6, 28	; 0x60
			while (!(AONWUCPowerStatusGet () &
     b40:	d5030505 	strle	r0, [r3, #-1285]	; 0xfffffafb
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b44:	0104017b 	tsteq	r4, fp, ror r1
     b48:	03060205 	movweq	r0, #25093	; 0x6205
     b4c:	060104ab 	streq	r0, [r1], -fp, lsr #9
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b50:	04820903 	streq	r0, [r2], #2307	; 0x903
     b54:	03240506 			; <UNDEFINED> instruction: 0x03240506
     b58:	05017dd9 	streq	r7, [r1, #-3545]	; 0xfffff227
     b5c:	23051705 	movwcs	r1, #22277	; 0x5705
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	01040106 	tsteq	r4, r6, lsl #2
     b64:	a5030105 	strge	r0, [r3, #-261]	; 0xfffffefb
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b68:	06042002 	streq	r2, [r4], -r2
     b6c:	db032305 	blle	c9788 <__ccfg+0xa97e0>
			SysCtrlAdjustRechargeAfterPowerDown ();
     b70:	0505207d 	streq	r2, [r5, #-125]	; 0xffffff83
			reinit_uart ();
     b74:	22054f06 	andcs	r4, r5, #6, 30
     b78:	01040106 	tsteq	r4, r6, lsl #2
     b7c:	03060205 	movweq	r0, #25093	; 0x6205
}
     b80:	0566029e 	strbeq	r0, [r6, #-670]!	; 0xfffffd62
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     b84:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
     b88:	052f0602 	streq	r0, [pc, #-1538]!	; 58e <ioreq_uart_a+0x42>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b8c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
     b90:	0101000c 	tsteq	r1, ip
     b94:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	00051402 	andeq	r1, r5, r2, lsl #8
     b9c:	05ef0300 	strbeq	r0, [pc, #768]!	; ea4 <__pi_wait+0x30>
     ba0:	17020501 	strne	r0, [r2, -r1, lsl #10]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ba4:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     ba8:	017df703 	cmneq	sp, r3, lsl #14	; <UNPREDICTABLE>
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     bac:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
     bb4:	03020501 	movweq	r0, #9473	; 0x2501
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     bb8:	04200288 	strteq	r0, [r0], #-648	; 0xfffffd78
     bbc:	03230506 			; <UNDEFINED> instruction: 0x03230506
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc0:	04207df8 	strteq	r7, [r0], #-3576	; 0xfffff208
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     bc4:	06020501 	streq	r0, [r2], -r1, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc8:	4a028503 	bmi	a1fdc <__ccfg+0x82034>
     bcc:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
			PRCMPowerDomainOff (
     bd0:	017cc903 	cmneq	ip, r3, lsl #18
     bd4:	17172d05 	ldrne	r2, [r7, -r5, lsl #26]
	__SLEEP;
     bd8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     bdc:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
  __ASM volatile ("cpsie i" : : : "memory");
     be0:	06020501 	streq	r0, [r2], -r1, lsl #10
	goto Redo;
     be4:	3c03a903 			; <UNDEFINED> instruction: 0x3c03a903
     be8:	27050604 	strcs	r0, [r5, -r4, lsl #12]
     bec:	0102ce03 	tsteq	r2, r3, lsl #28
     bf0:	05140505 	ldreq	r0, [r4, #-1285]	; 0xfffffafb
     bf4:	04010624 	streq	r0, [r1], #-1572	; 0xfffff9dc
     bf8:	06020501 	streq	r0, [r2], -r1, lsl #10
     bfc:	587db203 	ldmdapl	sp!, {r0, r1, r9, ip, sp, pc}^
     c00:	01000e02 	tsteq	r0, r2, lsl #28
     c04:	003d0501 	eorseq	r0, sp, r1, lsl #10
     c08:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
     c0c:	8f030000 	svchi	0x00030000
     c10:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     c14:	063d0514 			; <UNDEFINED> instruction: 0x063d0514
     c18:	05052e1e 	streq	r2, [r5, #-3614]	; 0xfffff1e2
     c1c:	820b0306 	andhi	r0, fp, #402653184	; 0x18000000
     c20:	01060e05 	tsteq	r6, r5, lsl #28
     c24:	052f0805 	streq	r0, [pc, #-2053]!	; 427 <AONRTCIntHandler+0xcb>
     c28:	05051f0e 	streq	r1, [r5, #-3854]	; 0xfffff0f2
     c2c:	0a052f06 	beq	14c84c <__ccfg+0x12c8a4>
     c30:	0612050f 	ldreq	r0, [r2], -pc, lsl #10
     c34:	2e0f0520 	cfsh32cs	mvfx0, mvfx15, #16
     c38:	34060405 	strcc	r0, [r6], #-1029	; 0xfffffbfb
     c3c:	01060705 	tsteq	r6, r5, lsl #14
     c40:	03060505 	movweq	r0, #25861	; 0x6505
     c44:	16052e28 	strne	r2, [r5], -r8, lsr #28
     c48:	01050106 	tsteq	r5, r6, lsl #2
     c4c:	05203403 	streq	r3, [r0, #-1027]!	; 0xfffffbfd
int main (void) {
     c50:	7fa00309 	svcvc	0x00a00309
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	0304053c 	movweq	r0, #17724	; 0x453c
     c58:	0805200b 	stmdaeq	r5, {r0, r1, r3, sp}
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	030e0521 	movweq	r0, #58657	; 0xe521
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c60:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
	system_init ();
     c64:	3c0b0306 	stccc	3, cr0, [fp], {6}
	tcv_init ();
     c68:	0608054b 	streq	r0, [r8], -fp, asr #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c6c:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
     c70:	30060505 	andcc	r0, r6, r5, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	2404054b 	strcs	r0, [r4], #-1355	; 0xfffffab5
     c78:	03060b05 	movweq	r0, #27397	; 0x6b05
     c7c:	04054a24 	streq	r4, [r5], #-2596	; 0xfffff5dc
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c80:	0521062d 	streq	r0, [r1, #-1581]!	; 0xfffff9d3
     c84:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
	delay (16, 0);
     c88:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
     c8c:	06080520 	streq	r0, [r8], -r0, lsr #10
     c90:	1e050530 	cfmv64hrne	mvdx5, r0
	__pi_release ();
     c94:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
     c98:	12050e0a 	andne	r0, r5, #10, 28	; 0xa0
     c9c:	0f052006 	svceq	0x00052006
     ca0:	0604052e 	streq	r0, [r4], -lr, lsr #10
     ca4:	06070535 			; <UNDEFINED> instruction: 0x06070535
     ca8:	06040501 	streq	r0, [r4], -r1, lsl #10
     cac:	08054b34 	stmdaeq	r5, {r2, r4, r5, r8, r9, fp, lr}
static void killev (__pi_pcb_t *pid) {
     cb0:	07050106 	streq	r0, [r5, -r6, lsl #2]
	wfun = (aword)(pid->code);
     cb4:	0605052e 	streq	r0, [r5], -lr, lsr #10
	for_all_tasks (i) {
     cb8:	09054b2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
		for (j = 0; j < nevents (i); j++) {
     cbc:	204d0306 	subcs	r0, sp, r6, lsl #6
     cc0:	30030405 	andcc	r0, r3, r5, lsl #8
     cc4:	21080520 	tstcs	r8, r0, lsr #10
			    || i->Events [j] . Event == wfun
     cc8:	74030505 	strvc	r0, [r3], #-1285	; 0xfffffafb
		for (j = 0; j < nevents (i); j++) {
     ccc:	0604052e 	streq	r0, [r4], -lr, lsr #10
			if (i->Events [j] . Event == (aword)pid
     cd0:	5e3c1103 	rsfple	f1, f4, f3
     cd4:	3d060b05 	vstrcc	d0, [r6, #-20]	; 0xffffffec
     cd8:	061f0405 	ldreq	r0, [pc], -r5, lsl #8
				wakeupev (i, j);
     cdc:	060b052f 	streq	r0, [fp], -pc, lsr #10
     ce0:	06040501 	streq	r0, [r4], -r1, lsl #10
	for_all_tasks (i) {
     ce4:	06070525 	streq	r0, [r7], -r5, lsr #10
}
     ce8:	06050501 	streq	r0, [r5], -r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	0609052f 	streq	r0, [r9], -pc, lsr #10
static void qfree (aword *ch) {
     cf0:	4a080501 	bmi	2020fc <__ccfg+0x1e2154>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf4:	31060505 	tstcc	r6, r5, lsl #10
	cc = (aword*)(mpools + MA_NP);
     cf8:	03060405 	movweq	r0, #25605	; 0x6405
	m_setnextp (ch, chunk);
     cfc:	03062e16 	movweq	r2, #28182	; 0x6e16
	m_setnextp (cc, ch);
     d00:	07052e6d 	streq	r2, [r5, -sp, ror #28]
}
     d04:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d08:	02052f06 	andeq	r2, r5, #6, 30
     d0c:	017f8803 	cmneq	pc, r3, lsl #16
     d10:	01061005 	tsteq	r6, r5
			m_setnextp (cc, m_nextp (chunk));
     d14:	f9030c05 			; <UNDEFINED> instruction: 0xf9030c05
			m_size (chunk) += m_hdrlen + m_size (ch);
     d18:	13052000 	movwne	r2, #20480	; 0x5000
     d1c:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     d20:	060c052f 	streq	r0, [ip], -pc, lsr #10
     d24:	06040501 	streq	r0, [r4], -r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d28:	02201103 	eoreq	r1, r0, #-1073741824	; 0xc0000000
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	01010012 	tsteq	r1, r2, lsl r0
     d30:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
     d34:	00000002 	andeq	r0, r0, r2
			m_setnextp (cc, m_nextp (chunk));
     d38:	05ea0300 	strbeq	r0, [sl, #768]!	; 0x300
			m_size (ch) += m_hdrlen + m_size (chunk);
     d3c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     d40:	13060105 	movwne	r0, #24837	; 0x6105
     d44:	01000602 	tsteq	r0, r2, lsl #12
     d48:	00190501 	andseq	r0, r9, r1, lsl #10
     d4c:	065c0205 	ldrbeq	r0, [ip], -r5, lsl #4
     d50:	81030000 	mrshi	r0, (UNDEF: 3)
			if (m_size (chunk) >= m_size (ch))
     d54:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
     d58:	05060414 	streq	r0, [r6, #-1044]	; 0xfffffbec
     d5c:	01120324 	tsteq	r2, r4, lsr #6
		chunk = m_nextp (chunk))
     d60:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     d64:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
     d68:	03190501 	tsteq	r9, #4194304	; 0x400000
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	06042e67 	streq	r2, [r4], -r7, ror #28
	diag_wait (a);
     d70:	19032205 	stmdbne	r3, {r0, r2, r9, sp}
	diag_wchar (c, a);
     d74:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     d78:	206b0306 	rsbcs	r0, fp, r6, lsl #6
}
     d7c:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
     d80:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
	syserror (ESTATE, "state");
     d84:	06020501 	streq	r0, [r2], -r1, lsl #10
     d88:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
     d8c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     d90:	29052005 	stmdbcs	r5, {r0, r2, sp}
void update_n_wake (word min, Boolean force) {
     d94:	2e1c052e 	cfmul64cs	mvdx0, mvdx12, mvdx14
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	2f060305 	svccs	0x00060305
     d9c:	1358014b 	cmpne	r8, #-1073741806	; 0xc0000012
     da0:	2e010101 	adfcss	f0, f1, f1
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da4:	66062006 	strvs	r2, [r6], -r6
     da8:	014a662e 	cmpeq	sl, lr, lsr #12
     dac:	1502052e 	strne	r0, [r2, #-1326]	; 0xfffffad2
     db0:	01060605 	tsteq	r6, r5, lsl #12
     db4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
     db8:	18052e25 	stmdane	r5, {r0, r2, r5, r9, sl, fp, sp}
     dbc:	0603052e 	streq	r0, [r3], -lr, lsr #10
     dc0:	2c14062f 	ldccs	6, cr0, [r4], {47}	; 0x2f
     dc4:	58014b06 	stmdapl	r1, {r1, r2, r8, r9, fp, lr}
     dc8:	01010113 	tsteq	r1, r3, lsl r1
     dcc:	0620062e 	strteq	r0, [r0], -lr, lsr #12
     dd0:	4a582e66 	bmi	160c770 <__ccfg+0x15ec7c8>
     dd4:	06010501 	streq	r0, [r1], -r1, lsl #10
		for_all_tasks (i) {
     dd8:	000b0232 	andeq	r0, fp, r2, lsr r2
	__pi_mintk = znew + min;
     ddc:	21050101 	tstcs	r5, r1, lsl #2
     de0:	1c020500 	cfstr32ne	mvfx0, [r2], {-0}
			if (!twaiting (i))
     de4:	03000007 	movweq	r0, #7
     de8:	050107d9 	streq	r0, [r1, #-2009]	; 0xfffff827
			if (twakecnd (__pi_old, znew, i->Timer)) {
     dec:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
     df0:	03050304 	movweq	r0, #21252	; 0x5304
     df4:	0178fe03 	cmneq	r8, r3, lsl #28	; <UNPREDICTABLE>
     df8:	21050104 	tstcs	r5, r4, lsl #2
     dfc:	06fd0306 	ldrbteq	r0, [sp], r6, lsl #6
     e00:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
     e04:	79830303 	stmibvc	r3, {r0, r1, r8, r9}
     e08:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     e0c:	83030602 	movwhi	r0, #13826	; 0x3602
     e10:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
     e14:	13030501 	movwne	r0, #13569	; 0x3501
     e18:	33050404 	movwcc	r0, #21508	; 0x5404
				wakeuptm (i);
     e1c:	7dad0306 	stcvc	3, cr0, [sp, #24]!
     e20:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		for_all_tasks (i) {
     e24:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
				d = i->Timer - znew;
     e28:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     e2c:	7dad032d 	stcvc	3, cr0, [sp, #180]!	; 0xb4
     e30:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		if ((word)(__pi_mintk - znew) < min) 
     e34:	02d30308 	sbcseq	r0, r3, #8, 6	; 0x20000000
     e38:	22030520 	andcs	r0, r3, #32, 10	; 0x8000000
     e3c:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
	__pi_old = znew;
     e40:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
}
     e44:	03290504 			; <UNDEFINED> instruction: 0x03290504
	TCI_RUN_DELAY_TIMER;
     e48:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
}
     e4c:	33051705 	movwcc	r1, #22277	; 0x5705
     e50:	2d050106 	stfcss	f0, [r5, #-24]	; 0xffffffe8
     e54:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
     e58:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
     e5c:	08052002 	stmdaeq	r5, {r1, sp}
void proceed (word state) {
     e60:	03051e06 	movweq	r1, #24070	; 0x5e06
	prcdstate (__pi_curr, state);
     e64:	2c080522 	cfstr32cs	mvfx0, [r8], {34}	; 0x22
     e68:	33050404 	movwcc	r0, #21508	; 0x5404
	release;
     e6c:	207dad03 	rsbscs	sl, sp, r3, lsl #26
     e70:	03050104 	movweq	r0, #20740	; 0x5104
void __pi_wait (aword event, word state) {
     e74:	2002d503 	andcs	sp, r2, r3, lsl #10
	sint j = nevents (__pi_curr);
     e78:	05584105 	ldrbeq	r4, [r8, #-261]	; 0xfffffefb
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
     e80:	0305010e 	movweq	r0, #20750	; 0x510e
     e84:	04041313 	streq	r1, [r4], #-787	; 0xfffffced
		syserror (ENEVENTS, "sw");
     e88:	a7032905 	strge	r2, [r3, -r5, lsl #18]
     e8c:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
	setestate (__pi_curr->Events [j], state, event);
     e90:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	incwait (__pi_curr);
     e94:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	setestate (__pi_curr->Events [j], state, event);
     e98:	d5030603 	strle	r0, [r3, #-1539]	; 0xfffff9fd
}
     e9c:	41052002 	tstmi	r5, r2
     ea0:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
     ea4:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
void __pi_trigger (aword event) {
     ea8:	18020501 	stmdane	r2, {r0, r8, sl}
	for_all_tasks (i) {
     eac:	03050304 	movweq	r0, #21252	; 0x5304
		for (j = 0; j < nevents (i); j++) {
     eb0:	0178ec03 	cmneq	r8, r3, lsl #24
     eb4:	01050104 	tsteq	r5, r4, lsl #2
     eb8:	07950306 	ldreq	r0, [r5, r6, lsl #6]
     ebc:	00080220 	andeq	r0, r8, r0, lsr #4
			if (i->Events [j] . Event == event) {
     ec0:	21050101 	tstcs	r5, r1, lsl #2
     ec4:	60020500 	andvs	r0, r2, r0, lsl #10
     ec8:	03000007 	movweq	r0, #7
				wakeupev (i, j);
     ecc:	050107ec 	streq	r0, [r1, #-2028]	; 0xfffff814
     ed0:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
	for_all_tasks (i) {
     ed4:	03050304 	movweq	r0, #21252	; 0x5304
}
     ed8:	0178eb03 	cmneq	r8, r3, lsl #22
aword __pi_join (aword pid, word st) {
     edc:	21050104 	tstcs	r5, r4, lsl #2
	for_all_tasks (i) {
     ee0:	07900306 	ldreq	r0, [r0, r6, lsl #6]
     ee4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
	return 0;
     ee8:	78f00303 	ldmvc	r0!, {r0, r1, r8, r9}^
		if ((aword)i == pid) {
     eec:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			__pi_wait (pid, st);
     ef0:	96030602 	strls	r0, [r3], -r2, lsl #12
}
     ef4:	0e052007 	cdpeq	0, 0, cr2, cr5, cr7, {0}
	for_all_tasks (i) {
     ef8:	06090501 	streq	r0, [r9], -r1, lsl #10
     efc:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
void delay (word d, word state) {
     f00:	7d9b0333 	ldcvc	3, cr0, [fp, #204]	; 0xcc
	settstate (__pi_curr, state);
     f04:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     f08:	02e60308 	rsceq	r0, r6, #8, 6	; 0x20000000
     f0c:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     f10:	7d9a032d 	ldcvc	3, cr0, [sl, #180]	; 0xb4
	update_n_wake (d, YES);
     f14:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
     f18:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
	__pi_curr->Timer = __pi_old + d;
     f1c:	051e0620 	ldreq	r0, [lr, #-1568]	; 0xfffff9e0
     f20:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
	inctimer (__pi_curr);
     f24:	06051f1e 			; <UNDEFINED> instruction: 0x06051f1e
     f28:	06030521 	streq	r0, [r3], -r1, lsr #10
     f2c:	0504042f 	streq	r0, [r4, #-1071]	; 0xfffffbd1
}
     f30:	7d940329 	ldcvc	3, cr0, [r4, #164]	; 0xa4
     f34:	17050501 	strne	r0, [r5, -r1, lsl #10]
	if (fun == NULL)
     f38:	01063305 	tsteq	r6, r5, lsl #6
		return (int) __pi_curr;
     f3c:	03050104 	movweq	r0, #20740	; 0x5104
     f40:	2e02e803 	cdpcs	8, 0, cr14, cr2, cr3, {0}
	for_all_tasks (i)
     f44:	04470205 	strbeq	r0, [r7], #-517	; 0xfffffdfb
}
     f48:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
		if (i->code == fun)
     f4c:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
	for_all_tasks (i)
     f50:	06030501 	streq	r0, [r3], -r1, lsl #10
     f54:	2002e803 	andcs	lr, r2, r3, lsl #16
     f58:	01064105 	tsteq	r6, r5, lsl #2
int __pi_strlen (const char *s) {
     f5c:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	for (i = 0; *(s+i) != '\0'; i++);
     f60:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
}
     f64:	06010602 	streq	r0, [r1], -r2, lsl #12
	for (i = 0; *(s+i) != '\0'; i++);
     f68:	05030426 	streq	r0, [r3, #-1062]	; 0xfffffbda
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	78d90303 	ldmvc	r9, {r0, r1, r8, r9}^
		syserror (EREQPAR, "addv");
     f70:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (ERESOURCE, "addv");
     f74:	a8030601 	stmdage	r3, {r0, r9, sl}
	if (ioreq [loc] != NULL)
     f78:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
     f7c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		syserror (ERESOURCE, "addv");
     f80:	02050018 	andeq	r0, r5, #24
	ioreq [loc] = rf;
     f84:	0000079c 	muleq	r0, ip, r7
}
     f88:	0107c503 	tsteq	r7, r3, lsl #10
     f8c:	01050704 	tsteq	r5, r4, lsl #14
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	0178bb03 	cmneq	r8, r3, lsl #22
     f94:	18050104 	stmdane	r5, {r2, r8}
     f98:	07c50306 	strbeq	r0, [r5, r6, lsl #6]
     f9c:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     fa0:	78bb0305 	ldmvc	fp!, {r0, r2, r8, r9}
     fa4:	2e040520 	cfsh32cs	mvfx0, mvfx4, #16
     fa8:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
		syserror (ENODEVICE, "io");
     fac:	0101013d 	tsteq	r1, sp, lsr r1
     fb0:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
	if (len == 0)
     fb4:	4a582e66 	bmi	160c954 <__ccfg+0x15ec9ac>
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	01132e01 	tsteq	r3, r1, lsl #28
     fbc:	05080458 	streq	r0, [r8, #-1112]	; 0xfffffba8
	if (ret >= 0)
     fc0:	05050f01 	streq	r0, [r5, #-3841]	; 0xfffff0ff
	if (ret == -1) {
     fc4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     fc8:	06020520 	streq	r0, [r2], -r0, lsr #10
		if (retry == WNONE)
     fcc:	0101013d 	tsteq	r1, sp, lsr r1
		iowait (dev, operation, retry);
     fd0:	0620063c 			; <UNDEFINED> instruction: 0x0620063c
     fd4:	4a582e66 	bmi	160c974 <__ccfg+0x15ec9cc>
     fd8:	2f132e01 	svccs	0x00132e01
			release;
     fdc:	01045801 	tsteq	r4, r1, lsl #16
	if (ret == -2) {
     fe0:	03060105 	movweq	r0, #24837	; 0x6105
		if (retry != WNONE) {
     fe4:	020107d0 	andeq	r0, r1, #208, 14	; 0x3400000
     fe8:	0101000b 	tsteq	r1, fp
			iowait (dev, operation, retry);
     fec:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
     ff0:	00084002 	andeq	r4, r8, r2
			(ioreq [dev]) (NONE, buf, len);
     ff4:	08800300 	stmeq	r0, {r8, r9}
     ff8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     ffc:	10061505 	andne	r1, r6, r5, lsl #10
		(ioreq [dev]) (NONE, buf, len);
    1000:	1e320205 	cdpne	2, 3, cr0, cr2, cr5, {0}
    1004:	59593e06 	ldmdbpl	r9, {r1, r2, r9, sl, fp, ip, sp}^
    1008:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
}
    100c:	7ca70305 	stcvc	3, cr0, [r7], #20
	if (retry != WNONE) {
    1010:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
		delay (-ret - 2, retry);
    1014:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1018:	7dc5030b 	stclvc	3, cr0, [r5, #44]	; 0x2c
    101c:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    1020:	02bb0331 	adcseq	r0, fp, #-1006632960	; 0xc4000000
		release;
    1024:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1028:	7dc80332 	stclvc	3, cr0, [r8, #200]	; 0xc8
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	0504042e 	streq	r0, [r4, #-1070]	; 0xfffffbd2
    1030:	029b0305 	addseq	r0, fp, #335544320	; 0x14000000
    1034:	032d052e 			; <UNDEFINED> instruction: 0x032d052e
    1038:	032e7ecc 			; <UNDEFINED> instruction: 0x032e7ecc
    103c:	09042e4a 	stmdbeq	r4, {r1, r3, r6, r9, sl, fp, sp}
		syserror (ERESOURCE, "mal1");
    1040:	87033105 	strhi	r3, [r3, -r5, lsl #2]
    1044:	01042e02 	tsteq	r4, r2, lsl #28
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1048:	03060205 	movweq	r0, #25093	; 0x6205
    104c:	032003dc 			; <UNDEFINED> instruction: 0x032003dc
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1050:	140179e7 	strne	r7, [r1], #-2535	; 0xfffff619
	m_size (mpools [0]) = mlen - m_hdrlen;
    1054:	05010705 	streq	r0, [r1, #-1797]	; 0xfffff8fb
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1058:	03050112 	movweq	r0, #20754	; 0x5112
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105c:	06150514 			; <UNDEFINED> instruction: 0x06150514
    1060:	2c3d0501 	cfldr32cs	mvfx0, [sp], #-4
}
    1064:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    1068:	052f0603 	streq	r0, [pc, #-1539]!	; a6d <__pi_release+0x75>
    106c:	05580632 	ldrbeq	r0, [r8, #-1586]	; 0xfffff9ce
    1070:	03052e21 	movweq	r2, #24097	; 0x5e21
    1074:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1078:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
void __pi_free (aword *ch) {
    107c:	04042206 	streq	r2, [r4], #-518	; 0xfffffdfa
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1080:	91032905 	tstls	r3, r5, lsl #18
    1084:	3d050102 	stfccs	f0, [r5, #-8]
		syserror (EMALLOC, "malg");
    1088:	17050514 	smladne	r5, r4, r5, r0
    108c:	3c063805 	stccc	8, cr3, [r6], {5}
	mcfree [MA_NP] += m_size (ch);
    1090:	03050104 	movweq	r0, #20740	; 0x5104
		m_size (ch) ^= MALLOC_UMASK;
    1094:	7de90306 	stclvc	3, cr0, [r9, #24]!
    1098:	06060520 	streq	r0, [r6], -r0, lsr #10
	mcfree [MA_NP] += m_size (ch);
    109c:	0604052e 	streq	r0, [r4], -lr, lsr #10
	QFREE;
    10a0:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
	if (mevent [MA_NP] . nwait) {
    10a4:	01270329 			; <UNDEFINED> instruction: 0x01270329
    10a8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		trigger ((aword)(&(mevent [MA_NP])));
    10ac:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
		mevent [MA_NP] . nwait --;
    10b0:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    10b4:	043c5603 	ldrteq	r5, [ip], #-1539	; 0xfffff9fd
    10b8:	03290504 			; <UNDEFINED> instruction: 0x03290504
    10bc:	050100db 	streq	r0, [r1, #-219]	; 0xffffff25
    10c0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
void kill (aword pid) {
    10c4:	01040106 	tsteq	r4, r6, lsl #2
		pid = (aword) __pi_curr;
    10c8:	03063c05 	movweq	r3, #27653	; 0x6c05
	j = NULL;
    10cc:	052e7f96 	streq	r7, [lr, #-3990]!	; 0xfffff06a
	for_all_tasks (i) {
    10d0:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
	syserror (EREQPAR, "kpi");
    10d4:	03060106 	movweq	r0, #24838	; 0x6106
    10d8:	012e069a 			; <UNDEFINED> instruction: 0x012e069a
		if ((aword)i == pid) {
    10dc:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    10e0:	7a950329 	bvc	fe541d8c <_estack+0xde53cd8c>
				__PCB = i->Next;
    10e4:	17050501 	strne	r0, [r5, -r1, lsl #10]
			killev (i);
    10e8:	01062d05 	tsteq	r6, r5, lsl #26
			ufree (i);
    10ec:	02050104 	andeq	r0, r5, #4, 2
			if (i == __pi_curr)
    10f0:	3c05e603 	stccc	6, cr14, [r5], {3}
    10f4:	2d050404 	cfstrscs	mvf0, [r5, #-16]
				release;
    10f8:	207a9a03 	rsbscs	r9, sl, r3, lsl #20
				j->Next = i->Next;
    10fc:	02050104 	andeq	r0, r5, #4, 2
    1100:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
    1104:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
}
    1108:	7a950329 	bvc	fe541db4 <_estack+0xde53cdb4>
    110c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1110:	01062d05 	tsteq	r6, r5, lsl #26
	if (size < 8)
    1114:	02050104 	andeq	r0, r5, #4, 2
		_size = 2;
    1118:	05e60306 	strbeq	r0, [r6, #774]!	; 0x306
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    111c:	01010120 	tsteq	r1, r0, lsr #2
		_size = (((aword)size) + 3) >> 2;
    1120:	66010101 	strvs	r0, [r1], -r1, lsl #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	04012e01 	streq	r2, [r1], #-3585	; 0xfffff1ff
		_size = (((aword)size) + 3) >> 2;
    1128:	03290504 			; <UNDEFINED> instruction: 0x03290504
		if (mevent [MA_NP] . nfail != 255)
    112c:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
    1130:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
			mevent [MA_NP] . nfail ++;
    1134:	01040106 	tsteq	r4, r6, lsl #2
		mnfree [MA_NP] = 0;
    1138:	b0030205 	andlt	r0, r3, r5, lsl #4
    113c:	04042005 	streq	r2, [r4], #-5
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	d0032d05 	andle	r2, r3, r5, lsl #26
    1144:	0104207a 	tsteq	r4, sl, ror r0
			syserror (EMALLOC, "malc");
    1148:	03060205 	movweq	r0, #25093	; 0x6205
    114c:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
		if (m_size (chunk) >= _size)
    1150:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1154:	05017acb 	streq	r7, [r1, #-2763]	; 0xfffff535
		chunk = m_nextp (chunk)) {
    1158:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		m_setnextp (cc, m_nextp (chunk));
    115c:	01040106 	tsteq	r4, r6, lsl #2
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1160:	03060205 	movweq	r0, #25093	; 0x6205
    1164:	012005b0 			; <UNDEFINED> instruction: 0x012005b0
			m_size (chunk) = _size;
    1168:	01010101 	tsteq	r1, r1, lsl #2
			cc = chunk + _size + m_hdrlen;
    116c:	06230501 	strteq	r0, [r3], -r1, lsl #10
    1170:	05011003 	streq	r1, [r1, #-3]
			m_size (cc) = waste - m_hdrlen;
    1174:	20700302 	rsbscs	r0, r0, r2, lsl #6
			QFREE;
    1178:	2e015806 	cdpcs	8, 0, cr5, cr1, cr6, {0}
		mevent [MA_NP] . nfail = 0;
    117c:	04010d03 	streq	r0, [r1], #-3331	; 0xfffff2fd
		mcfree [MA_NP] -= m_size (chunk);
    1180:	0305050a 	movweq	r0, #21770	; 0x550a
    1184:	05017ecd 	streq	r7, [r1, #-3789]	; 0xfffff133
    1188:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
    118c:	03270501 			; <UNDEFINED> instruction: 0x03270501
		m_size (chunk) |= MALLOC_UMASK;
    1190:	042001ba 	strteq	r0, [r0], #-442	; 0xfffffe46
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1194:	032f050a 			; <UNDEFINED> instruction: 0x032f050a
		m_size (chunk) |= MALLOC_UMASK;
    1198:	04207ec6 	strteq	r7, [r0], #-3782	; 0xfffff13a
			mnfree [MA_NP] = mcfree [MA_NP];
    119c:	06020501 	streq	r0, [r2], -r1, lsl #10
}
    11a0:	2001b503 	andcs	fp, r1, r3, lsl #10
    11a4:	13062305 	movwne	r2, #25349	; 0x6305
    11a8:	0c030205 	sfmeq	f0, 4, [r3], {5}
    11ac:	03230520 			; <UNDEFINED> instruction: 0x03230520
    11b0:	02052074 	andeq	r2, r5, #116	; 0x74
    11b4:	27052406 	strcs	r2, [r5, -r6, lsl #8]
    11b8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
aword __pi_fork (fsmcode func, aword data) {
    11bc:	03270528 			; <UNDEFINED> instruction: 0x03270528
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c0:	02052078 	andeq	r2, r5, #120	; 0x78
    11c4:	313f2806 	teqcc	pc, r6, lsl #16
    11c8:	404a0a03 	submi	r0, sl, r3, lsl #20
		if ((j = __PCB) == NULL)
    11cc:	017dc003 	cmneq	sp, r3
	i->Next = NULL;
    11d0:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
	i->data = data;
    11d4:	03050509 	movweq	r0, #21769	; 0x5509
		if ((j = __PCB) == NULL)
    11d8:	04017eae 	streq	r7, [r1], #-3758	; 0xfffff152
}
    11dc:	060d0501 	streq	r0, [sp], -r1, lsl #10
			for (; j->Next != NULL; j = j->Next);
    11e0:	0101d403 	tsteq	r1, r3, lsl #8
    11e4:	31050904 	tstcc	r5, r4, lsl #18
	return (aword) i;
    11e8:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
    11ec:	02050104 	andeq	r0, r5, #4, 2
	if (mevent [MA_NP] . nwait != 255)
    11f0:	01d40306 	bicseq	r0, r4, r6, lsl #6
    11f4:	060d0520 	streq	r0, [sp], -r0, lsr #10
    11f8:	06020501 	streq	r0, [r2], -r1, lsl #10
		mevent [MA_NP] . nwait ++;
    11fc:	02c70322 	sbceq	r0, r7, #-2013265920	; 0x88000000
	wait ((aword)(&(mevent [MA_NP])), state);
    1200:	2e2e012e 	sufcsep	f0, f6, #0.5
    1204:	06060515 			; <UNDEFINED> instruction: 0x06060515
void diag (const char *mess, ...) {
    1208:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    120c:	30060305 	andcc	r0, r6, r5, lsl #6
    1210:	05050b04 	streq	r0, [r5, #-2820]	; 0xfffff4fc
	diag_disable_int (a, is);
    1214:	0179c303 	cmneq	r9, r3, lsl #6
    1218:	5e030c04 	cdppl	12, 0, cr0, cr3, cr4, {0}
    121c:	062e0501 	strteq	r0, [lr], -r1, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    1220:	050b0401 	streq	r0, [fp, #-1025]	; 0xfffffbff
	diag_disable_int (a, is);
    1224:	23030605 	movwcs	r0, #13829	; 0x3605
	while (*mess != '\0') {
    1228:	0634052e 	ldrteq	r0, [r4], -lr, lsr #10
	dgout ('\r');
    122c:	06050501 	streq	r0, [r5], -r1, lsl #10
	dgout ('\n');
    1230:	0501044b 	streq	r0, [r1, #-1099]	; 0xfffffbb5
    1234:	06d50315 			; <UNDEFINED> instruction: 0x06d50315
    1238:	1303054a 	movwne	r0, #13642	; 0x354a
	diag_wait (a);
    123c:	05130405 	ldreq	r0, [r3, #-1029]	; 0xfffffbfb
	diag_enable_int (a, is);
    1240:	02053a15 	andeq	r3, r5, #86016	; 0x15000
    1244:	7ecb0319 	mcrvc	3, 6, r0, cr11, cr9, {0}
}
    1248:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
    124c:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
    1250:	17050501 	strne	r0, [r5, -r1, lsl #10]
		if (*mess == '%') {
    1254:	01062305 	tsteq	r6, r5, lsl #6
    1258:	02050104 	andeq	r0, r5, #4, 2
			if (*mess == 'l') {
    125c:	2002dd03 	andcs	sp, r2, r3, lsl #26
    1260:	23050604 	movwcs	r0, #22020	; 0x5604
				mess++;
    1264:	207da303 	rsbscs	sl, sp, r3, lsl #6
				val = va_arg (ap, lword);
    1268:	02050104 	andeq	r0, r5, #4, 2
				bc = 32;
    126c:	02dd0306 	sbcseq	r0, sp, #402653184	; 0x18000000
				bc = 16;
    1270:	01054e4a 	tsteq	r5, sl, asr #28
			switch (*mess) {
    1274:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    1278:	0603052d 	streq	r0, [r3], -sp, lsr #10
    127c:	412e5f03 			; <UNDEFINED> instruction: 0x412e5f03
				dgout ('%');
    1280:	06040541 	streq	r0, [r4], -r1, asr #10
    1284:	1f030513 	svcne	0x00030513
				dgout (*mess);
    1288:	01002f02 	tsteq	r0, r2, lsl #30
    128c:	001f0501 	andseq	r0, pc, r1, lsl #10
			switch (*mess) {
    1290:	00000205 	andeq	r0, r0, r5, lsl #4
					v = __pi_hex_enc_table [
    1294:	fd030000 	stc2	0, cr0, [r3, #-0]
					i += 4;
    1298:	02050108 	andeq	r0, r5, #8, 2
					(val >> (bc - i)) & 0xf];
    129c:	2c051617 	stccs	6, cr1, [r5], {23}
    12a0:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
					dgout (v);
    12a4:	202c0566 	eorcs	r0, ip, r6, ror #10
    12a8:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
				while (i < bc) {
    12ac:	15052112 	strne	r2, [r5, #-274]	; 0xfffffeee
			mess++;
    12b0:	01054a1f 	tsteq	r5, pc, lsl sl
					d /= 10;
    12b4:	00030223 	andeq	r0, r3, r3, lsr #4
				if ((val >> (bc - 1)) & 1) {
    12b8:	1c050101 	stfnes	f0, [r5], {1}
    12bc:	00020500 	andeq	r0, r2, r0, lsl #10
					dgout ('-');
    12c0:	03000000 	movweq	r0, #0
    12c4:	05010adb 	streq	r0, [r1, #-2779]	; 0xfffff525
						val |= 0xffff0000;
    12c8:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    12cc:	1c05010f 	stfnes	f0, [r5], {15}
    12d0:	06050e06 	streq	r0, [r5], -r6, lsl #28
				d = (bc == 16) ? 10000 : 1000000000;
    12d4:	20070525 	andcs	r0, r7, r5, lsr #10
    12d8:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
    12dc:	052e0603 	streq	r0, [lr, #-1539]!	; 0xfffff9fd
					v = (word) (val / d);
    12e0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
					if (v || d == 1) break;
    12e4:	052d0631 	streq	r0, [sp, #-1585]!	; 0xfffff9cf
    12e8:	0205010f 	andeq	r0, r5, #-1073741821	; 0xc0000003
					d /= 10;
    12ec:	4d062006 	stcmi	0, cr2, [r6, #-24]	; 0xffffffe8
				d = (bc == 16) ? 10000 : 1000000000;
    12f0:	13060105 	movwne	r0, #24837	; 0x6105
					dgout (v + '0');
    12f4:	01000402 	tsteq	r0, r2, lsl #8
    12f8:	00310501 	eorseq	r0, r1, r1, lsl #10
    12fc:	09f80205 	ldmibeq	r8!, {r0, r2, r9}^
					d /= 10;
    1300:	e7030000 	str	r0, [r3, -r0]
					val = val - (v * d);
    1304:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
					if (d == 0) break;
    1308:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
					v = (word) (val / d);
    130c:	77b20303 	ldrvc	r0, [r2, r3, lsl #6]!
    1310:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				if (bc == 16)
    1314:	cc030631 	stcgt	6, cr0, [r3], {49}	; 0x31
				d = (bc == 16) ? 10000 : 1000000000;
    1318:	03040108 	movweq	r0, #16648	; 0x4108
					val &= 0xffff;
    131c:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
					dgout (*s);
    1320:	01043c77 	tsteq	r4, r7, ror ip
					s++;
    1324:	cc033105 	stfgts	f3, [r3], {5}
				while (*s != '\0') {
    1328:	03042008 	movweq	r2, #16392	; 0x4008
    132c:	b4030305 	strlt	r0, [r3], #-773	; 0xfffffcfb
			dgout (*mess++);
    1330:	01042077 	tsteq	r4, r7, ror r0
    1334:	03060205 	movweq	r0, #25093	; 0x6205
    1338:	012e08d0 	ldrdeq	r0, [lr, -r0]!	; <UNPREDICTABLE>
    133c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    1340:	76dd0306 	ldrbvc	r0, [sp], r6, lsl #6
}
    1344:	05010466 	streq	r0, [r1, #-1126]	; 0xfffffb9a
    while(1)
    1348:	a3030602 	movwge	r0, #13826	; 0x3602
{
    134c:	0d042009 	stceq	0, cr2, [r4, #-36]	; 0xffffffdc
    SetupTrimDevice();
    1350:	01759b03 	cmneq	r5, r3, lsl #22
    pui32Src = &_etext;
    1354:	5b190101 	blpl	641760 <__ccfg+0x6217b8>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1358:	0501044a 	streq	r0, [r1, #-1098]	; 0xfffffbb6
    __asm("    ldr     r0, =_bss\n"
    135c:	9d03061a 	stcls	6, cr0, [r3, #-104]	; 0xffffff98
    1360:	0d042e09 	stceq	14, cr2, [r4, #-36]	; 0xffffffdc
    1364:	03060205 	movweq	r0, #25093	; 0x6205
    1368:	012076f9 	strdeq	r7, [r0, -r9]!
    136c:	01010101 	tsteq	r1, r1, lsl #2
   main();
    1370:	03050304 	movweq	r0, #21252	; 0x5304
    FaultISR();
    1374:	04013603 	streq	r3, [r1], #-1539	; 0xfffff9fd
        *pui32Dest++ = *pui32Src++;
    1378:	0302050d 	movweq	r0, #9485	; 0x250d
    137c:	0482204a 	streq	r2, [r2], #74	; 0x4a
    1380:	08eb0301 	stmiaeq	fp!, {r0, r8, r9}^
    1384:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    1388:	06020501 	streq	r0, [r2], -r1, lsl #10
    138c:	0615054c 	ldreq	r0, [r5], -ip, asr #10
    1390:	20020501 	andcs	r0, r2, r1, lsl #10
    1394:	05201505 	streq	r1, [r0, #-1285]!	; 0xfffffafb
static byte get_byte () {
    1398:	04052002 	streq	r2, [r5], #-2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    139c:	04216a06 	strteq	r6, [r1], #-2566	; 0xfffff5fa
    13a0:	0302050d 	movweq	r0, #9485	; 0x250d
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    13a4:	0401778e 	streq	r7, [r1], #-1934	; 0xfffff872
    13a8:	03030503 	movweq	r0, #13571	; 0x3503
		if (ee_inp)
    13ac:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
			b |= 1;
    13b0:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    13b4:	04202020 	strteq	r2, [r0], #-32	; 0xffffffe0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13b8:	0ac50301 	beq	ff141fc4 <_estack+0xdf13cfc4>
	for (b = 0, i = 0; i < 8; i++) {
    13bc:	050d0420 	streq	r0, [sp, #-1056]	; 0xfffffbe0
}
    13c0:	75a60303 	strvc	r0, [r6, #771]!	; 0x303
    13c4:	0610054a 	ldreq	r0, [r0], -sl, asr #10
    13c8:	20060501 	andcs	r0, r6, r1, lsl #10
static void put_byte (byte b) {
    13cc:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
    13d0:	0405201f 	streq	r2, [r5], #-31	; 0xffffffe1
    13d4:	0e053006 	cdpeq	0, 0, cr3, cr5, cr6, {0}
    13d8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if (b & 0x80)
    13dc:	02052f06 	andeq	r2, r5, #6, 30
    13e0:	0501041c 	streq	r0, [r1, #-1052]	; 0xfffffbe4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13e4:	098f0304 	stmibeq	pc, {r2, r8, r9}	; <UNPREDICTABLE>
	for (i = 0; i < 8; i++) {
    13e8:	062a052e 	strteq	r0, [sl], -lr, lsr #10
		b <<= 1;
    13ec:	27040501 	strcs	r0, [r4, -r1, lsl #10]
	for (i = 0; i < 8; i++) {
    13f0:	79032a05 	stmdbvc	r3, {r0, r2, r9, fp, sp}
}
    13f4:	06040520 	streq	r0, [r4], -r0, lsr #10
    13f8:	0309044e 	movweq	r0, #37966	; 0x944e
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13fc:	05017fb2 	streq	r7, [r1, #-4018]	; 0xfffff04e
    1400:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
	put_byte (cmd);
    1404:	06040501 	streq	r0, [r4], -r1, lsl #10
    1408:	6600d103 	strvs	sp, [r0], -r3, lsl #2
}
    140c:	0502044d 	streq	r0, [r2, #-1101]	; 0xfffffbb3
    1410:	789f0305 	ldmvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
static void wwait (word st, word del) {
    1414:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1418:	07e50304 	strbeq	r0, [r5, r4, lsl #6]!
    141c:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
	while (dopen && (rdsr () & 1)) {
    1420:	06040501 	streq	r0, [r4], -r1, lsl #10
    1424:	1a05214b 	bne	149958 <__ccfg+0x1299b0>
    1428:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    142c:	02044d06 	andeq	r4, r4, #384	; 0x180
	put_byte (CMD_RDSR);
    1430:	96030505 	strls	r0, [r3], -r5, lsl #10
	r = get_byte ();
    1434:	01050178 	tsteq	r5, r8, ror r1
    1438:	01042106 	tsteq	r4, r6, lsl #2
	while (dopen && (rdsr () & 1)) {
    143c:	03060405 	movweq	r0, #25605	; 0x6405
}
    1440:	042007f1 	strteq	r0, [r0], #-2033	; 0xfffff80f
		if (st == WNONE)
    1444:	0305050c 	movweq	r0, #21772	; 0x550c
    1448:	040178a0 	streq	r7, [r1], #-2208	; 0xfffff760
			mdelay (1);
    144c:	06310509 	ldrteq	r0, [r1], -r9, lsl #10
    1450:	0102d403 	tsteq	r2, r3, lsl #8
			delay (del, st);
    1454:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
    1458:	2e7dac03 	cdpcs	12, 7, cr10, cr13, cr3, {0}
			release;
    145c:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
    1460:	2e028803 	cdpcs	8, 0, cr8, cr2, cr3, {0}
    1464:	2e050c04 	cdpcs	12, 0, cr0, cr5, cr4, {0}
static void ready () {
    1468:	2e7df803 	cdpcs	8, 7, cr15, cr13, cr3, {0}
	if (dopen) {
    146c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		wwait (WNONE, 1);
    1470:	07e50306 	strbeq	r0, [r5, r6, lsl #6]!
    1474:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    1478:	7aa00331 	bvc	fe802144 <_estack+0xde7fd144>
	dstat = 0;
    147c:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
}
    1480:	01065205 	tsteq	r6, r5, lsl #4
    1484:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1488:	2005e503 	andcs	lr, r5, r3, lsl #10
	udelay (1);
    148c:	52050e04 	andpl	r0, r5, #4, 28	; 0x40
    1490:	2e7a9b03 	vaddcs.f64	d25, d10, d3
	udelay (1);
    1494:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		dopen = DOPEN_TEMP;
    1498:	05e00306 	strbeq	r0, [r0, #774]!	; 0x306
    149c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    14a0:	78860305 	stmvc	r6, {r0, r2, r8, r9}
    14a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
static void cclose () {
    14a8:	07fc0304 	ldrbeq	r0, [ip, r4, lsl #6]!
	if (dopen == DOPEN_TEMP) {
    14ac:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
    14b0:	7aea0305 	bvc	ffa820cc <_estack+0xdfa7d0cc>
		wwait (WNONE, 1);
    14b4:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    14b8:	03290501 			; <UNDEFINED> instruction: 0x03290501
	cmd_0 (CMD_DP);
    14bc:	052004b6 	streq	r0, [r0, #-1206]!	; 0xfffffb4a
    14c0:	7bca0331 	blvc	ff28218c <_estack+0xdf27d18c>
		dopen = 0;
    14c4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
}
    14c8:	99030604 	stmdbls	r3, {r2, r9, sl}
word ee_open () {
    14cc:	23052e05 	movwcs	r2, #24069	; 0x5e05
	ready ();
    14d0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	dopen = DOPEN_PERM;
    14d4:	046a0620 	strbteq	r0, [sl], #-1568	; 0xfffff9e0
    14d8:	03050509 	movweq	r0, #21769	; 0x5509
}
    14dc:	0501799f 	streq	r7, [r1, #-2463]	; 0xfffff661
	if (dopen) {
    14e0:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
    14e4:	03040501 	movweq	r0, #17665	; 0x4501
		dopen = DOPEN_TEMP;
    14e8:	042006ed 	strteq	r0, [r0], #-1773	; 0xfffff913
		cclose ();
    14ec:	033f0509 	teqeq	pc, #37748736	; 0x2400000
}
    14f0:	04207993 	strteq	r7, [r0], #-2451	; 0xfffff66d
int ser_outf (word st, const char *m, ...) {
    14f4:	06040501 	streq	r0, [r4], -r1, lsl #10
    14f8:	2e06ea03 	vmlacs.f32	s28, s12, s6
	if ((prcs = running (__outserial)) != 0) {
    14fc:	90030904 	andls	r0, r3, r4, lsl #18
    1500:	2905017f 	stmdbcs	r5, {r0, r1, r2, r3, r4, r5, r6, r8}
		join (prcs, st);
    1504:	01040106 	tsteq	r4, r6, lsl #2
    1508:	f3030405 	vshl.u8	d0, d5, d3
		release;
    150c:	09042e00 	stmdbeq	r4, {r9, sl, fp, sp}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1510:	8d032905 	vstrhi.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    1514:	0104207f 	tsteq	r4, pc, ror r0
    1518:	03060405 	movweq	r0, #25605	; 0x6405
		umwait (st);
    151c:	4d4a00f3 	stclmi	0, cr0, [sl, #-972]	; 0xfffffc34
    1520:	05020440 	streq	r0, [r2, #-1088]	; 0xfffffbc0
	if (runstrand (__outserial, buf) == 0) {
    1524:	77ea0305 	strbvc	r0, [sl, r5, lsl #6]!
    1528:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    152c:	08990304 	ldmeq	r9, {r2, r8, r9}
		ufree (buf);
    1530:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
		npwait (st);
    1534:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    1538:	1a05214b 	bne	149a6c <__ccfg+0x129ac4>
    153c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1540:	1d1a0523 	cfldr32ne	mvfx0, [sl, #-140]	; 0xffffff74
    1544:	3f060405 	svccc	0x00060405
int ser_inf (word st, const char *fmt, ...) {
    1548:	03090459 	movweq	r0, #37977	; 0x9459
    154c:	05017eee 	streq	r7, [r1, #-3822]	; 0xfffff112
	if (fmt == NULL)
    1550:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
	if (__inpline == NULL) {
    1554:	030d050e 	movweq	r0, #54542	; 0xd50e
		if ((prcs = running (__inserial)) == 0) {
    1558:	042e7bdb 	strteq	r7, [lr], #-3035	; 0xfffff425
    155c:	03290509 			; <UNDEFINED> instruction: 0x03290509
			prcs = runthread (__inserial);
    1560:	042004a5 	strteq	r0, [r0], #-1189	; 0xfffffb5b
    1564:	06040501 	streq	r0, [r4], -r1, lsl #10
			if (prcs == 0) {
    1568:	4a019703 	bmi	6717c <__ccfg+0x471d4>
				npwait (st);
    156c:	31050e04 	tstcc	r5, r4, lsl #28
		release;
    1570:	0179f303 	cmneq	r9, r3, lsl #6	; <UNPREDICTABLE>
		join (prcs, st);
    1574:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
    1578:	04010652 	streq	r0, [r1], #-1618	; 0xfffff9ae
	va_start (ap, fmt);
    157c:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
	prcs = vscan (__inpline, fmt, ap);
    1580:	2e068c03 	cdpcs	12, 0, cr8, cr6, cr3, {0}
    1584:	04110a05 	ldreq	r0, [r1], #-2565	; 0xfffff5fb
	ufree (__inpline);
    1588:	0305050e 	movweq	r0, #21774	; 0x550e
	__inpline = NULL;
    158c:	05017ac3 	streq	r7, [r1, #-2755]	; 0xfffff53d
}
    1590:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    1594:	030a0501 	movweq	r0, #42241	; 0xa501
    1598:	052005bd 	streq	r0, [r0, #-1469]!	; 0xfffffa43
		return 0;
    159c:	59320604 	ldmdbpl	r2!, {r2, r9, sl}
    15a0:	01060b05 	tsteq	r6, r5, lsl #22
    15a4:	21061a05 	tstcs	r6, r5, lsl #20
void RFCCPE0IntHandler (void) {
    15a8:	05110a05 	ldreq	r0, [r1, #-2565]	; 0xfffff5fb
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    15ac:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
		_BIS (dstate, DSTATE_IRST);
    15b0:	0405580a 	streq	r5, [r5], #-2058	; 0xfffff7f6
    15b4:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
    15b8:	b8030505 	stmdalt	r3, {r0, r2, r8, sl}
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    15bc:	3105017a 	tstcc	r5, sl, ror r1
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    15c0:	3f050106 	svccc	0x00050106
    15c4:	207ebc03 	rsbscs	fp, lr, r3, lsl #24
	p_trigger (drvprcs, qevent);
    15c8:	c4033105 	strgt	r3, [r3], #-261	; 0xfffffefb
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    15cc:	01042001 	tsteq	r4, r1
    15d0:	03060405 	movweq	r0, #25605	; 0x6405
    15d4:	042005cb 	strteq	r0, [r0], #-1483	; 0xfffffa35
    15d8:	03050509 	movweq	r0, #21769	; 0x5509
    15dc:	050178f1 	streq	r7, [r1, #-2289]	; 0xfffff70f
    15e0:	0401063f 	streq	r0, [r1], #-1599	; 0xfffff9c1
    15e4:	06040501 	streq	r0, [r4], -r1, lsl #10
    15e8:	2e079203 	cdpcs	2, 0, cr9, cr7, cr3, {0}
    15ec:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
    15f0:	0177f503 	cmneq	r7, r3, lsl #10	; <UNPREDICTABLE>
	RISE_N_SHINE;
    15f4:	01062e05 	tsteq	r6, r5, lsl #28
    15f8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    15fc:	088e0306 	stmeq	lr, {r1, r2, r8, r9}
}
    1600:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    1604:	77c90305 	strbvc	r0, [r9, r5, lsl #6]
    1608:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    160c:	08ba0304 	ldmeq	sl!, {r2, r8, r9}
    1610:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    1614:	0302052f 	movweq	r0, #9519	; 0x252f
strand (__outserial, const char*)
    1618:	04017db0 	streq	r7, [r1], #-3504	; 0xfffff250
    161c:	03240506 			; <UNDEFINED> instruction: 0x03240506
    1620:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
    1624:	23051705 	movwcs	r1, #22277	; 0x5705
endstrand
    1628:	01040106 	tsteq	r4, r6, lsl #2
    162c:	a8030105 	stmdage	r3, {r0, r2, r8}
	ptr = data;
    1630:	04055801 	streq	r5, [r5], #-2049	; 0xfffff7ff
    1634:	02f00306 	rscseq	r0, r0, #402653184	; 0x18000000
	if (*ptr)
    1638:	2c055b20 			; <UNDEFINED> instruction: 0x2c055b20
		len = strlen (ptr);
    163c:	32050106 	andcc	r0, r5, #-2147483647	; 0x80000001
    1640:	032c0527 			; <UNDEFINED> instruction: 0x032c0527
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1644:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    1648:	2d054c06 	stccs	12, cr4, [r5, #-24]	; 0xffffffe8
    164c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1650:	32055d06 	andcc	r5, r5, #384	; 0x180
    1654:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	len -= quant;
    1658:	32053e06 	andcc	r3, r5, #6, 28	; 0x60
    165c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1660:	02042406 	andeq	r2, r4, #100663296	; 0x6000000
	if (len == 0) {
    1664:	8b030505 	blhi	c2a80 <__ccfg+0xa2ad8>
		ufree (data);
    1668:	01040177 	tsteq	r4, r7, ror r1
		finish;
    166c:	f8030405 			; <UNDEFINED> instruction: 0xf8030405
    1670:	0e042008 	cdpeq	0, 0, cr2, cr4, cr8, {0}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1674:	88030505 	stmdahi	r3, {r0, r2, r8, sl}
    1678:	2d05017a 	stfcss	f0, [r5, #-488]	; 0xfffffe18
    167c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1680:	4d053106 	stfmis	f3, [r5, #-24]	; 0xffffffe8
    1684:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
strand (__inserial, address)
    1688:	2e053d06 	cdpcs	13, 0, cr3, cr5, cr6, {0}
    168c:	01040106 	tsteq	r4, r6, lsl #2
    1690:	03060405 	movweq	r0, #25605	; 0x6405
    1694:	043c05f7 	ldrteq	r0, [ip], #-1527	; 0xfffffa09
    1698:	03050502 	movweq	r0, #21762	; 0x5502
	if (__inpline != NULL)
    169c:	04017785 	streq	r7, [r1], #-1925	; 0xfffff87b
    16a0:	060d050e 	streq	r0, [sp], -lr, lsl #10
		finish;
    16a4:	2002e803 	andcs	lr, r2, r3, lsl #16
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    16a8:	39050104 	stmdbcc	r5, {r2, r8}
    16ac:	06960306 	ldreq	r0, [r6], r6, lsl #6
    16b0:	010a0520 	tsteq	sl, r0, lsr #10
    16b4:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
		umwait (IM_INIT);
    16b8:	0179ea03 	cmneq	r9, r3, lsl #20
		release;
    16bc:	01060d05 	tsteq	r6, r5, lsl #26
	savedata (data);
    16c0:	0a050104 	beq	141ad8 <__ccfg+0x121b30>
	len = MAX_LINE_LENGTH;
    16c4:	20069603 	andcs	r9, r6, r3, lsl #12
	io (IM_READ, __cport, READ, ptr, 1);
    16c8:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    16cc:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    16d0:	0177ec03 	cmneq	r7, r3, lsl #24
    16d4:	01064105 	tsteq	r6, r5, lsl #2
	if (ptr == (char*) data) { // new line
    16d8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    16dc:	2e089703 	cdpcs	7, 0, cr9, cr8, cr3, {0}
		if (*ptr == '\0') { // bin cmd
    16e0:	41050904 	tstmi	r5, r4, lsl #18
			proceed (IM_BIN);
    16e4:	2077e903 	rsbscs	lr, r7, r3, lsl #18
    16e8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		if (*ptr < 0x20)
    16ec:	08970306 	ldmeq	r7, {r1, r2, r8, r9}
    16f0:	0d045220 	sfmeq	f5, 4, [r4, #-128]	; 0xffffff80
			proceed (IM_READ);
    16f4:	d1030205 	tstle	r3, r5, lsl #4
    16f8:	014a2075 	hvceq	41477	; 0xa205
	if (*ptr == '\n' || *ptr == '\r') {
    16fc:	03040101 	movweq	r0, #16641	; 0x4101
    1700:	2b030305 	blcs	c231c <__ccfg+0xa2374>
    1704:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
		*ptr = '\0';
    1708:	20550302 	subscs	r0, r5, r2, lsl #6
		__inpline = (char*)data;
    170c:	00370216 	eorseq	r0, r7, r6, lsl r2
		finish;
    1710:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
	if (len) {
    1714:	00020500 	andeq	r0, r2, r0, lsl #10
		ptr++;
    1718:	03000000 	movweq	r0, #0
    171c:	050100e1 	streq	r0, [r1, #-225]	; 0xffffff1f
		len--;
    1720:	12051402 	andne	r1, r5, #33554432	; 0x2000000
	proceed (IM_READ);
    1724:	02051e06 	andeq	r1, r5, #6, 28	; 0x60
	io (IM_BIN, __cport, READ, ptr, 1);
    1728:	061f2122 	ldreq	r2, [pc], -r2, lsr #2
    172c:	3f4b2f21 	svccc	0x004b2f21
    1730:	01060805 	tsteq	r6, r5, lsl #16
    1734:	2f060205 	svccs	0x00060205
    1738:	01000802 	tsteq	r0, r2, lsl #16
	len -= 2;
    173c:	003a0501 	eorseq	r0, sl, r1, lsl #10
	if (len > *ptr + 1) // 1 for 0x04
    1740:	00000205 	andeq	r0, r0, r5, lsl #4
    1744:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
		len = *ptr + 1;
    1748:	02050100 	andeq	r0, r5, #0, 2
    174c:	3a051414 	bcc	1467a4 <__ccfg+0x1267fc>
	ptr++;
    1750:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1754:	3a052406 	bcc	14a774 <__ccfg+0x12a7cc>
    1758:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    175c:	3f060305 	svccc	0x00060305
    1760:	01060605 	tsteq	r6, r5, lsl #12
    1764:	30060405 	andcc	r0, r6, r5, lsl #8
    1768:	01061205 	tsteq	r6, r5, lsl #4
	len -= quant;
    176c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
		__inpline = (char*)data;
    1770:	05250603 	streq	r0, [r5, #-1539]!	; 0xfffff9fd
		finish;
    1774:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
	ptr += quant;
    1778:	032f050f 			; <UNDEFINED> instruction: 0x032f050f
    177c:	01042015 	tsteq	r4, r5, lsl r0
endstrand
    1780:	6b030905 	blvs	c3b9c <__ccfg+0xa3bf4>
    1784:	06030520 	streq	r0, [r3], -r0, lsr #10
	proceed (IM_BINL);
    1788:	050f0421 	streq	r0, [pc, #-1057]	; 136f <zero_loop+0xb>
endstrand
    178c:	01140305 	tsteq	r4, r5, lsl #6
    1790:	01062f05 	tsteq	r6, r5, lsl #30
    1794:	01050104 	tsteq	r5, r4, lsl #2
    1798:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    179c:	6f030604 	svcvs	0x00030604
    17a0:	050f0420 	streq	r0, [pc, #-1056]	; 1388 <zero_loop+0x24>
		if (res && (d < n))
    17a4:	00c30305 	sbceq	r0, r3, r5, lsl #6
    17a8:	18051401 	stmdane	r5, {r0, sl, ip}
    17ac:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    17b0:	01043306 	tsteq	r4, r6, lsl #6
			res [d] = (char) c;
    17b4:	03060b05 	movweq	r0, #27397	; 0x6b05
		d++;
    17b8:	05017fb6 	streq	r7, [r1, #-4022]	; 0xfffff04a
    17bc:	04340603 	ldrteq	r0, [r4], #-1539	; 0xfffff9fd
    17c0:	0e05050f 	cfsh32eq	mvfx0, mvfx5, #15
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17c4:	01062f05 	tsteq	r6, r5, lsl #30
    17c8:	03050104 	movweq	r0, #20740	; 0x5104
    17cc:	06054106 	streq	r4, [r5], -r6, lsl #2
				enci (10000);
    17d0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17d4:	2b06053f 	blcs	182cd8 <__ccfg+0x162d30>
    17d8:	23060405 	movwcs	r0, #25605	; 0x6405
	d = 0;
    17dc:	2203052f 	andcs	r0, r3, #197132288	; 0xbc00000
		c = *fm++;
    17e0:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
		if (c == '\\') {
    17e4:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
			if ((c = *fm++) == '\0') {
    17e8:	09022f21 	stmdbeq	r2, {r0, r5, r8, r9, sl, fp, sp}
    17ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				outc ('\\');
    17f0:	02050011 	andeq	r0, r5, #17
			if ((c = *fm++) == '\0') {
    17f4:	00000c50 	andeq	r0, r0, r0, asr ip
				outc ('\\');
    17f8:	010af103 	tsteq	sl, r3, lsl #2	; <UNPREDICTABLE>
    17fc:	13160305 	tstne	r6, #335544320	; 0x14000000
			outc (c);
    1800:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1804:	200d0611 	andcs	r0, sp, r1, lsl r6
			if (c == '\0')
    1808:	05262505 	streq	r2, [r6, #-1285]!	; 0xfffffafb
    180c:	04051f03 	streq	r1, [r5], #-3843	; 0xfffff0fd
			outc (c);
    1810:	25052106 	strcs	r2, [r5, #-262]	; 0xfffffefa
				outc (val);
    1814:	37050106 	strcc	r0, [r5, -r6, lsl #2]
				val = (word) va_arg (ap, aword);
    1818:	0f052d06 	svceq	0x00052d06
		if (c == '%') {
    181c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1820:	06020501 	streq	r0, [r2], -r1, lsl #10
			c = *fm++;
    1824:	03190632 	tsteq	r9, #52428800	; 0x3200000
			switch (c) {
    1828:	31062079 	tstcc	r6, r9, ror r0
    182c:	055b5b32 	ldrbeq	r5, [fp, #-2866]	; 0xfffff4ce
    1830:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    1834:	02054a0c 	andeq	r4, r5, #12, 20	; 0xc000
    1838:	1d0c0523 	cfstr32ne	mvfx0, [ip, #-140]	; 0xffffff74
    183c:	23060205 	movwcs	r0, #25093	; 0x6205
    1840:	0503043e 	streq	r0, [r3, #-1086]	; 0xfffffbc2
    1844:	75c50303 	strbvc	r0, [r5, #771]	; 0x303
				outc ('%');
    1848:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    184c:	0abd0302 	beq	fef4245c <_estack+0xdef3d45c>
				outc (c);
    1850:	000e0220 	andeq	r0, lr, r0, lsr #4
    1854:	0ee00101 	cdpeq	1, 14, cr0, cr0, cr1, {0}
    1858:	00030000 	andeq	r0, r3, r0
				if (c == '\0')
    185c:	00000190 	muleq	r0, r0, r1
				return d;
    1860:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
}
    1864:	0101000d 	tsteq	r1, sp
    1868:	00000101 	andeq	r0, r0, r1, lsl #2
			switch (c) {
    186c:	00000100 	andeq	r0, r0, r0, lsl #2
    1870:	6f682f01 	svcvs	0x00682f01
    1874:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 16c8 <__inserial+0x40>
				for (i = 12; ; i -= 4) {
    1878:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
				val = (word) va_arg (ap, aword);
    187c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
						[ (val >> i) & 0xf ]);
    1880:	6f746b73 	svcvs	0x00746b73
    1884:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1888:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
					outc (__pi_hex_enc_table
    188c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1890:	2f534f43 	svccs	0x00534f43
					if (i == 0)
    1894:	4f636950 	svcmi	0x00636950
    1898:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
				for (i = 12; ; i -= 4) {
    189c:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
				val = (word) va_arg (ap, aword);
    18a0:	6f682f00 	svcvs	0x00682f00
				if (c == 'd' && (val & 0x8000) != 0) {
    18a4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 16f8 <__inserial+0x70>
				val = (word) va_arg (ap, aword);
    18a8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
				if (c == 'd' && (val & 0x8000) != 0) {
    18ac:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    18b0:	6f746b73 	svcvs	0x00746b73
					outc ('-');
    18b4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    18b8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
					val = (~val) + 1;
    18bc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    18c0:	2f534f43 	svccs	0x00534f43
				for (i = 12; ; i -= 4) {
    18c4:	4f636950 	svcmi	0x00636950
				enci (10000);
    18c8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    18cc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    18d0:	3143432f 	cmpcc	r3, pc, lsr #6
    18d4:	57585833 	smmlarpl	r8, r3, r8, r5
    18d8:	2f455241 	svccs	0x00455241
    18dc:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    18e0:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    18e4:	752f0062 	strvc	r0, [pc, #-98]!	; 188a <__pi_vfparse+0xc6>
    18e8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1724 <__inserial+0x9c>
    18ec:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    18f0:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    18f4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    18f8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    18fc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1900:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    1904:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    1908:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    190c:	2f006564 	svccs	0x00006564
				if (c == 'd' || c == 'u') {
    1910:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1914:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
					if (c == 'd' &&
    1918:	2f6e6974 	svccs	0x006e6974
					val = va_arg (ap, lword);
    191c:	6b736544 	blvs	1cdae34 <__ccfg+0x1cbae8c>
					fm++;
    1920:	2f706f74 	svccs	0x00706f74
					if (c == 'd' &&
    1924:	4f534c4f 	svcmi	0x00534c4f
    1928:	2f54454e 	svccs	0x0054454e
						outc ('-');
    192c:	4f434950 	svcmi	0x00434950
    1930:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
						val = (~val) + 1;
    1934:	2f534f63 	svccs	0x00534f63
				enci (10000);
    1938:	33314343 	teqcc	r1, #201326593	; 0xc000001
					enci (1000000000UL);
    193c:	2f005858 	svccs	0x00005858
    1940:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1944:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1948:	2f6e6974 	svccs	0x006e6974
    194c:	6b736544 	blvs	1cdae64 <__ccfg+0x1cbaebc>
    1950:	2f706f74 	svccs	0x00706f74
    1954:	4f534c4f 	svcmi	0x00534c4f
    1958:	2f54454e 	svccs	0x0054454e
    195c:	4f434950 	svcmi	0x00434950
    1960:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1964:	00534f63 	subseq	r4, r3, r3, ror #30
    1968:	72656b00 	rsbvc	r6, r5, #0, 22
    196c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    1970:	00010063 	andeq	r0, r1, r3, rrx
    1974:	72617500 	rsbvc	r7, r1, #0, 10
    1978:	00682e74 	rsbeq	r2, r8, r4, ror lr
    197c:	73000002 	movwvc	r0, #2
				} else if (c == 'x') {
    1980:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
					for (i = 28; ; i -= 4) {
    1984:	00682e74 	rsbeq	r2, r8, r4, ror lr
					val = va_arg (ap, lword);
    1988:	73000003 	movwvc	r0, #3
							[ (val >> i) & 0xf ]);
    198c:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    1990:	00682e67 	rsbeq	r2, r8, r7, ror #28
						outc (__pi_hex_enc_table
    1994:	61000003 	tstvs	r0, r3
    1998:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    199c:	00040068 	andeq	r0, r4, r8, rrx
						if (i == 0)
    19a0:	63616d00 	cmnvs	r1, #0, 26
    19a4:	00682e68 	rsbeq	r2, r8, r8, ror #28
					for (i = 28; ; i -= 4) {
    19a8:	70000004 	andvc	r0, r0, r4
					outc ('%');
    19ac:	5f736e69 	svcpl	0x00736e69
    19b0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    19b4:	00040068 	andeq	r0, r4, r8, rrx
					outc ('l');
    19b8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    19bc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
				val = (word) va_arg (ap, aword);
    19c0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
				outc (val);
    19c4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    19c8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
				while (*st != '\0') {
    19cc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    19d0:	00050068 	andeq	r0, r5, r8, rrx
    19d4:	72656b00 	rsbvc	r6, r5, #0, 22
    19d8:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
					outc (*st);
    19dc:	00010068 	andeq	r0, r1, r8, rrx
    19e0:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
					st++;
    19e4:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
		c = *fm++;
    19e8:	003e6e69 	eorseq	r6, lr, r9, ror #28
    19ec:	00000000 	andeq	r0, r0, r0
    19f0:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
char *vform (char *res, const char *fm, va_list aq) {
    19f4:	000cb002 	andeq	fp, ip, r2
    19f8:	03c30300 	biceq	r0, r3, #0, 6
	if (res != NULL) {
    19fc:	16020501 	strne	r0, [r2], -r1, lsl #10
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1a00:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    1a04:	78030626 	stmdavc	r3, {r1, r2, r5, r9, sl}
    1a08:	03020501 	movweq	r0, #9473	; 0x2501
}
    1a0c:	07052009 	streq	r2, [r5, -r9]
    1a10:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
	fml = strlen (fm) + 17;
    1a14:	13052021 	movwne	r2, #20513	; 0x5021
    1a18:	0a052106 	beq	149e38 <__ccfg+0x129e90>
    1a1c:	2013053c 	andscs	r0, r3, ip, lsr r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1a20:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
    1a24:	052c060f 	streq	r0, [ip, #-1551]!	; 0xfffff9f1
    1a28:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1a2c:	052f0604 	streq	r0, [pc, #-1540]!	; 1430 <wwait+0x1c>
    1a30:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    1a34:	05053c07 	streq	r3, [r5, #-3079]	; 0xfffff3f9
    1a38:	054b3106 	strbeq	r3, [fp, #-262]	; 0xfffffefa
		ufree (res);
    1a3c:	017a0302 	cmneq	sl, r2, lsl #6
		goto Again;
    1a40:	03060105 	movweq	r0, #24837	; 0x6105
	if (buf == NULL || fmt == NULL)
    1a44:	03022e0a 	movweq	r2, #11786	; 0x2e0a
int vscan (const char *buf, const char *fmt, va_list ap) {
    1a48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	if (buf == NULL || fmt == NULL)
    1a4c:	0205001f 	andeq	r0, r5, #31
    1a50:	00000cec 	andeq	r0, r0, ip, ror #25
    1a54:	0106c903 	tsteq	r6, r3, lsl #18
		    	    case 'u': scanu (lword); break;
    1a58:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
			while (isspace (*buf)) buf++;
    1a5c:	05131401 	ldreq	r1, [r3, #-1025]	; 0xfffffbff
    1a60:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
	while (*fmt != '\0') {
    1a64:	2070031f 	rsbscs	r0, r0, pc, lsl r3
		if (*fmt++ != '%')
    1a68:	10030d05 	andne	r0, r3, r5, lsl #26
		switch (*fmt++) {
    1a6c:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
    1a70:	06020520 	streq	r0, [r2], -r0, lsr #10
    1a74:	11030601 	tstne	r3, r1, lsl #12
    1a78:	0d051320 	stceq	3, cr1, [r5, #-128]	; 0xffffff80
    1a7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1a80:	061f051f 			; <UNDEFINED> instruction: 0x061f051f
    1a84:	06020521 	streq	r0, [r2], -r1, lsr #10
}
    1a88:	21250601 			; <UNDEFINED> instruction: 0x21250601
		switch (*fmt++) {
    1a8c:	15060f05 	strne	r0, [r6, #-3845]	; 0xfffff0fb
    1a90:	061d0205 	ldreq	r0, [sp], -r5, lsl #4
    1a94:	060f0523 	streq	r0, [pc], -r3, lsr #10
    1a98:	24010501 	strcs	r0, [r1], #-1281	; 0xfffffaff
			while (isspace (*buf)) buf++;
    1a9c:	03060305 	movweq	r0, #25349	; 0x6305
    1aa0:	1e052062 	cdpne	0, 0, cr2, cr5, cr2, {3}
    1aa4:	06050106 	streq	r0, [r5], -r6, lsl #2
    1aa8:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1aac:	13052130 	movwne	r2, #20784	; 0x5130
    1ab0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
			if (*buf == '\0')
    1ab4:	2e059106 	mvfcss	f1, f6
			if (*buf != ',') {
    1ab8:	0636050d 	ldrteq	r0, [r6], -sp, lsl #10
			sap = va_arg (ap, char*);
    1abc:	060a0501 	streq	r0, [sl], -r1, lsl #10
			nc++;
    1ac0:	061f0534 			; <UNDEFINED> instruction: 0x061f0534
			if (*buf != ',') {
    1ac4:	580d0501 	stmdapl	sp, {r0, r8, sl}
				while (!isspace (*buf) && *buf != ',' &&
    1ac8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    1acc:	0610052f 	ldreq	r0, [r0], -pc, lsr #10
    1ad0:	06040501 	streq	r0, [r4], -r1, lsl #10
    1ad4:	05ac0b03 	streq	r0, [ip, #2819]!	; 0xb03
    1ad8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    1adc:	0564062e 	strbeq	r0, [r4, #-1582]!	; 0xfffff9d2
    1ae0:	02130609 	andseq	r0, r3, #9437184	; 0x900000
			while (isspace (*buf)) buf++;
    1ae4:	01010007 	tsteq	r1, r7
    1ae8:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    1aec:	000d6c02 	andeq	r6, sp, r2, lsl #24
    1af0:	08c60300 	stmiaeq	r6, {r8, r9}^
    1af4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
			if (*buf == ',') buf++;
    1af8:	0d050204 	sfmeq	f0, 4, [r5, #-16]
    1afc:	7cdf0306 	ldclvc	3, cr0, [pc], {6}
			*sap = '\0';
    1b00:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			break;
    1b04:	a103060f 	tstge	r3, pc, lsl #12
		    case 'd': scani (word); break;
    1b08:	02052003 	andeq	r2, r5, #3
    1b0c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    1b10:	7cda0324 	ldclvc	3, cr0, [sl], {36}	; 0x24
    1b14:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1b18:	01060d05 	tsteq	r6, r5, lsl #26
    1b1c:	02050104 	andeq	r0, r5, #4, 2
    1b20:	2003a103 	andcs	sl, r3, r3, lsl #2
    1b24:	01052f06 	tsteq	r5, r6, lsl #30
    1b28:	05023d06 	streq	r3, [r2, #-3334]	; 0xfffff2fa
    1b2c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1b30:	02050027 	andeq	r0, r5, #39	; 0x27
    1b34:	00000000 	andeq	r0, r0, r0
    1b38:	0100de03 	tsteq	r0, r3, lsl #28
    1b3c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1b40:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
    1b44:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    1b48:	02051c27 	andeq	r1, r5, #9984	; 0x2700
    1b4c:	23200624 			; <UNDEFINED> instruction: 0x23200624
    1b50:	05480305 	strbeq	r0, [r8, #-773]	; 0xfffffcfb
    1b54:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1b58:	052d0602 	streq	r0, [sp, #-1538]!	; 0xfffff9fe
    1b5c:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
    1b60:	01010005 	tsteq	r1, r5
    1b64:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
    1b68:	000d8402 	andeq	r8, sp, r2, lsl #8
    1b6c:	00fa0300 	rscseq	r0, sl, r0, lsl #6
    1b70:	13020501 	movwne	r0, #9473	; 0x2501
    1b74:	1f061b05 	svcne	0x00061b05
		    case 'u': scanu (word); break;
    1b78:	02210205 	eoreq	r0, r1, #1342177280	; 0x50000000
    1b7c:	01010006 	tsteq	r1, r6
    1b80:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    1b84:	00000002 	andeq	r0, r0, r2
    1b88:	00fe0300 	rscseq	r0, lr, r0, lsl #6
    1b8c:	16020501 	strne	r0, [r2], -r1, lsl #10
    1b90:	010e0514 	tsteq	lr, r4, lsl r5
    1b94:	03061e05 	movweq	r1, #28165	; 0x6e05
    1b98:	0905207a 	stmdbeq	r5, {r1, r3, r4, r5, r6, sp}
    1b9c:	031e0534 	tsteq	lr, #52, 10	; 0xd000000
    1ba0:	0305207a 	movweq	r2, #20602	; 0x507a
    1ba4:	12052706 	andne	r2, r5, #1572864	; 0x180000
    1ba8:	06050106 	streq	r0, [r5], -r6, lsl #2
    1bac:	061f052e 	ldreq	r0, [pc], -lr, lsr #10
    1bb0:	0620051f 			; <UNDEFINED> instruction: 0x0620051f
    1bb4:	060e0501 	streq	r0, [lr], -r1, lsl #10
    1bb8:	06020520 	streq	r0, [r2], -r0, lsr #10
    1bbc:	05320601 	ldreq	r0, [r2, #-1537]!	; 0xfffff9ff
		    case 'x': scanx (word); break;
    1bc0:	02051303 	andeq	r1, r5, #201326592	; 0xc000000
    1bc4:	1105153b 	tstne	r5, fp, lsr r5
    1bc8:	01050106 	tsteq	r5, r6, lsl #2
    1bcc:	0006022f 	andeq	r0, r6, pc, lsr #4
    1bd0:	21050101 	tstcs	r5, r1, lsl #2
    1bd4:	00020500 	andeq	r0, r2, r0, lsl #10
    1bd8:	03000000 	movweq	r0, #0
    1bdc:	0501018e 	streq	r0, [r1, #-398]	; 0xfffffe72
    1be0:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    1be4:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
    1be8:	21052006 	tstcs	r5, r6
    1bec:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    1bf0:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    1bf4:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1bf8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    1bfc:	03052106 	movweq	r2, #20742	; 0x5106
    1c00:	0606054b 	streq	r0, [r6], -fp, asr #10
    1c04:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    1c08:	0620052b 	strteq	r0, [r0], -fp, lsr #10
    1c0c:	060e0501 	streq	r0, [lr], -r1, lsl #10
    1c10:	06020520 	streq	r0, [r2], -r0, lsr #10
    1c14:	05340601 	ldreq	r0, [r4, #-1537]!	; 0xfffff9ff
    1c18:	0205580b 	andeq	r5, r5, #720896	; 0xb0000
    1c1c:	01080513 	tsteq	r8, r3, lsl r5
    1c20:	052f0305 	streq	r0, [pc, #-773]!	; 1923 <__pi_vfparse+0x15f>
    1c24:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    1c28:	12052021 	andne	r2, r5, #33	; 0x21
    1c2c:	06030520 	streq	r0, [r3], -r0, lsr #10
    1c30:	0606052f 	streq	r0, [r6], -pc, lsr #10
    1c34:	06020501 	streq	r0, [r2], -r1, lsl #10
			switch (*fmt++) {
    1c38:	2e0b0532 	mcrcs	5, 0, r0, cr11, cr2, {1}
    1c3c:	13060105 	movwne	r0, #24837	; 0x6105
    1c40:	01000702 	tsteq	r0, r2, lsl #14
    1c44:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1c48:	00000205 	andeq	r0, r0, r5, lsl #4
    1c4c:	a6030000 	strge	r0, [r3], -r0
		    	    case 'd': scani (lword); break;
    1c50:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    1c54:	06050514 			; <UNDEFINED> instruction: 0x06050514
    1c58:	06020501 	streq	r0, [r2], -r1, lsl #10
    1c5c:	00020221 	andeq	r0, r2, r1, lsr #4
    1c60:	2e050101 	adfcss	f0, f5, f1
    1c64:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    1c68:	0300000d 	movweq	r0, #13
    1c6c:	060101ae 	streq	r0, [r1], -lr, lsr #3
    1c70:	06020520 	streq	r0, [r2], -r0, lsr #10
    1c74:	13200e03 			; <UNDEFINED> instruction: 0x13200e03
    1c78:	05011003 	streq	r1, [r1, #-3]
    1c7c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1c80:	02053c05 	andeq	r3, r5, #1280	; 0x500
    1c84:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    1c88:	01060605 	tsteq	r6, r5, lsl #12
    1c8c:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    1c90:	03053c06 	movweq	r3, #23558	; 0x5c06
    1c94:	2e270806 	cdpcs	8, 2, cr0, cr7, cr6, {0}
    1c98:	29030205 	stmdbcs	r3, {r0, r2, r9}
    1c9c:	06140520 	ldreq	r0, [r4], -r0, lsr #10
    1ca0:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    1ca4:	03060405 	movweq	r0, #25605	; 0x6405
    1ca8:	09052e59 	stmdbeq	r5, {r0, r3, r4, r6, r9, sl, fp, sp}
		    	    case 'x': scanx (lword); break;
    1cac:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1cb0:	06040520 	streq	r0, [r4], -r0, lsr #10
    1cb4:	06080531 			; <UNDEFINED> instruction: 0x06080531
    1cb8:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    1cbc:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    1cc0:	3e080605 	cfmadd32cc	mvax0, mvfx0, mvfx8, mvfx5
    1cc4:	79030305 	stmdbvc	r3, {r0, r2, r8, r9}
    1cc8:	0305053c 	movweq	r0, #21820	; 0x553c
    1ccc:	12052e0b 	andne	r2, r5, #11, 28	; 0xb0
    1cd0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1cd4:	07052106 	streq	r2, [r5, -r6, lsl #2]
    1cd8:	03051106 	movweq	r1, #20742	; 0x5106
    1cdc:	66170306 	ldrvs	r0, [r7], -r6, lsl #6
    1ce0:	01060705 	tsteq	r6, r5, lsl #14
    1ce4:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1ce8:	16030602 	strne	r0, [r3], -r2, lsl #12
    1cec:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
    1cf0:	06020501 	streq	r0, [r2], -r1, lsl #10
    1cf4:	06010540 	streq	r0, [r1], -r0, asr #10
    1cf8:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    1cfc:	2e730302 	cdpcs	3, 7, cr0, cr3, cr2, {0}
    1d00:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    1d04:	000a022e 	andeq	r0, sl, lr, lsr #4
    1d08:	1b050101 	blne	142114 <__ccfg+0x12216c>
    1d0c:	60020500 	andvs	r0, r2, r0, lsl #10
    1d10:	0300000e 	movweq	r0, #14
    1d14:	050102d2 	streq	r0, [r1, #-722]	; 0xfffffd2e
    1d18:	1b051402 	blne	146d28 <__ccfg+0x126d80>
		    	    case 'd': scani (lword); break;
    1d1c:	02051006 	andeq	r1, r5, #6
    1d20:	024b0622 	subeq	r0, fp, #35651584	; 0x2200000
    1d24:	01010005 	tsteq	r1, r5
    1d28:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    1d2c:	000e7402 	andeq	r7, lr, r2, lsl #8
    1d30:	02d80300 	sbcseq	r0, r8, #0, 6
    1d34:	16020501 	strne	r0, [r2], -r1, lsl #10
		    	    case 'u': scanu (lword); break;
    1d38:	0e062a05 	vmlaeq.f32	s4, s12, s10
    1d3c:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
    1d40:	02053e05 	andeq	r3, r5, #5, 28	; 0x50
    1d44:	05054a06 	streq	r4, [r5, #-2566]	; 0xfffff5fa
    1d48:	03050106 	movweq	r0, #20742	; 0x5106
    1d4c:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    1d50:	3d06014c 	stfccs	f0, [r6, #-304]	; 0xfffffed0
    1d54:	2020061f 	eorcs	r0, r0, pc, lsl r6
    1d58:	06010513 			; <UNDEFINED> instruction: 0x06010513
    1d5c:	00060221 	andeq	r0, r6, r1, lsr #4
    1d60:	21050101 	tstcs	r5, r1, lsl #2
    1d64:	a8020500 	stmdage	r2, {r8, sl}
    1d68:	0300000e 	movweq	r0, #14
    1d6c:	050102e5 	streq	r0, [r1, #-741]	; 0xfffffd1b
    1d70:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    1d74:	03062105 	movweq	r2, #24837	; 0x6105
    1d78:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
    1d7c:	052e0627 	streq	r0, [lr, #-1575]!	; 0xfffff9d9
		    	    case 'x': scanx (lword); break;
    1d80:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    1d84:	1305200a 	movwne	r2, #20490	; 0x500a
			if ((c = *buf++) == '\0')
    1d88:	060f0520 	streq	r0, [pc], -r0, lsr #10
    1d8c:	0603054a 	streq	r0, [r3], -sl, asr #10
			sap = va_arg (ap, char*);
    1d90:	06040501 	streq	r0, [r4], -r1, lsl #10
			nc++;
    1d94:	0607052f 	streq	r0, [r7], -pc, lsr #10
			break;
    1d98:	06050501 	streq	r0, [r5], -r1, lsl #10
			while (isspace (*buf)) buf++;
    1d9c:	02054b5a 	andeq	r4, r5, #92160	; 0x16800
    1da0:	0601050d 	streq	r0, [r1], -sp, lsl #10
    1da4:	022e0903 	eoreq	r0, lr, #49152	; 0xc000
						*sap++ = *buf++;
    1da8:	01010003 	tsteq	r1, r3
    1dac:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
			while (isspace (*buf)) buf++;
    1db0:	00000002 	andeq	r0, r0, r2
    1db4:	02f70300 	rscseq	r0, r7, #0, 6
    1db8:	16020501 	strne	r0, [r2], -r1, lsl #10
		return 0;
    1dbc:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    1dc0:	01790306 	cmneq	r9, r6, lsl #6
		    case 'x': scanx (word); break;
    1dc4:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    1dc8:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
		    	    case 'x': scanx (lword); break;
    1dcc:	0e050106 	adfeqs	f0, f5, f6
    1dd0:	12052e06 	andne	r2, r5, #6, 28	; 0x60
    1dd4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1dd8:	3301053c 	movwcc	r0, #5436	; 0x153c
    1ddc:	1c060305 	stcne	3, cr0, [r6], {5}
    1de0:	01060605 	tsteq	r6, r5, lsl #12
    1de4:	051f2005 	ldreq	r2, [pc, #-5]	; 1de7 <NOROM_AONBatMonTemperatureGetDegC+0x13>
    1de8:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    1dec:	1f052106 	svcne	0x00052106
    1df0:	00010264 	andeq	r0, r1, r4, ror #4
    1df4:	26050101 	strcs	r0, [r5], -r1, lsl #2
    1df8:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
    1dfc:	0300000e 	movweq	r0, #14
    1e00:	05010387 	streq	r0, [r1, #-903]	; 0xfffffc79
    1e04:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    1e08:	200e0626 	andcs	r0, lr, r6, lsr #12
    1e0c:	06240205 	strteq	r0, [r4], -r5, lsl #4
    1e10:	0609052e 	streq	r0, [r9], -lr, lsr #10
    1e14:	06030528 	streq	r0, [r3], -r8, lsr #10
    1e18:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    1e1c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1e20:	3d300604 	ldccc	6, cr0, [r0, #-16]!
    1e24:	17060105 	strne	r0, [r6, -r5, lsl #2]
    1e28:	03060205 	movweq	r0, #25093	; 0x6205
    1e2c:	04022e77 	streq	r2, [r2], #-3703	; 0xfffff189
    1e30:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e34:	02050021 	andeq	r0, r5, #33	; 0x21
    1e38:	00000f00 	andeq	r0, r0, r0, lsl #30
    1e3c:	01039903 	tsteq	r3, r3, lsl #18
    1e40:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    1e44:	200e0621 	andcs	r0, lr, r1, lsr #12
    1e48:	06240205 	strteq	r0, [r4], -r5, lsl #4
    1e4c:	1e053e85 	cdpne	14, 0, cr3, cr5, cr5, {4}
    1e50:	0b050106 	bleq	142270 <__ccfg+0x1222c8>
    1e54:	201e052e 	andscs	r0, lr, lr, lsr #10
    1e58:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    1e5c:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
    1e60:	02590601 	subseq	r0, r9, #1048576	; 0x100000
    1e64:	01010005 	tsteq	r1, r5
    1e68:	05001405 	streq	r1, [r0, #-1029]	; 0xfffffbfb
    1e6c:	00000002 	andeq	r0, r0, r2
    1e70:	03a70300 			; <UNDEFINED> instruction: 0x03a70300
    1e74:	16020501 	strne	r0, [r2], -r1, lsl #10
    1e78:	67060105 	strvs	r0, [r6, -r5, lsl #2]
    1e7c:	01000402 	tsteq	r0, r2, lsl #8
    1e80:	00180501 	andseq	r0, r8, r1, lsl #10
    1e84:	00000205 	andeq	r0, r0, r5, lsl #4
    1e88:	b2030000 	andlt	r0, r3, #0
    1e8c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    1e90:	18051414 	stmdane	r5, {r2, r4, sl, ip}
    1e94:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    1e98:	5a062402 	bpl	18aea8 <__ccfg+0x16af00>
    1e9c:	01060505 	tsteq	r6, r5, lsl #10
    1ea0:	21060305 	tstcs	r6, r5, lsl #6
    1ea4:	01060505 	tsteq	r6, r5, lsl #10
    1ea8:	35060205 	strcc	r0, [r6, #-517]	; 0xfffffdfb
    1eac:	01061205 	tsteq	r6, r5, lsl #4
    1eb0:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
    1eb4:	7a030603 	bvc	c36c8 <__ccfg+0xa3720>
    1eb8:	06053d20 	streq	r3, [r5], -r0, lsr #26
    1ebc:	17050106 	strne	r0, [r5, -r6, lsl #2]
    1ec0:	3d0b052e 	cfstr32cc	mvfx0, [fp, #-184]	; 0xffffff48
    1ec4:	01000802 	tsteq	r0, r2, lsl #16
    1ec8:	001d0501 	andseq	r0, sp, r1, lsl #10
    1ecc:	00000205 	andeq	r0, r0, r5, lsl #4
    1ed0:	92030000 	andls	r0, r3, #0
    1ed4:	02050104 	andeq	r0, r5, #4, 2
    1ed8:	1d051414 	cfstrsne	mvf1, [r5, #-80]	; 0xffffffb0
    1edc:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
    1ee0:	06030524 	streq	r0, [r3], -r4, lsr #10
    1ee4:	06050521 	streq	r0, [r5], -r1, lsr #10
    1ee8:	06020501 	streq	r0, [r2], -r1, lsl #10
    1eec:	06010532 			; <UNDEFINED> instruction: 0x06010532
    1ef0:	06030513 			; <UNDEFINED> instruction: 0x06030513
    1ef4:	0006022b 	andeq	r0, r6, fp, lsr #4
    1ef8:	1d050101 	stfnes	f0, [r5, #-4]
    1efc:	38020500 	stmdacc	r2, {r8, sl}
    1f00:	0300000f 	movweq	r0, #15
    1f04:	0501049e 	streq	r0, [r1, #-1182]	; 0xfffffb62
    1f08:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    1f0c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1f10:	052f0603 	streq	r0, [pc, #-1539]!	; 1915 <__pi_vfparse+0x151>
    1f14:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    1f18:	2e3e0602 	cfmsuba32cs	mvax0, mvax0, mvfx14, mvfx2
    1f1c:	25060105 	strcs	r0, [r6, #-261]	; 0xfffffefb
    1f20:	1c060305 	stcne	3, cr0, [r6], {5}
    1f24:	01060605 	tsteq	r6, r5, lsl #12
    1f28:	3b060205 	blcc	182744 <__ccfg+0x16279c>
    1f2c:	01000602 	tsteq	r0, r2, lsl #12
    1f30:	001d0501 	andseq	r0, sp, r1, lsl #10
    1f34:	00000205 	andeq	r0, r0, r5, lsl #4
    1f38:	ac030000 	stcge	0, cr0, [r3], {-0}
    1f3c:	02050104 	andeq	r0, r5, #4, 2
    1f40:	13141314 	tstne	r4, #20, 6	; 0x50000000
    1f44:	03061d05 	movweq	r1, #27909	; 0x6d05
    1f48:	0405017a 	streq	r0, [r5], #-378	; 0xfffffe86
    1f4c:	21020525 	tstcs	r2, r5, lsr #10
    1f50:	01052e06 	tsteq	r5, r6, lsl #28
    1f54:	03052406 	movweq	r2, #21510	; 0x5406
    1f58:	06051d06 	streq	r1, [r5], -r6, lsl #26
    1f5c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1f60:	2106051f 	tstcs	r6, pc, lsl r5
    1f64:	21060405 	tstcs	r6, r5, lsl #8
    1f68:	01060505 	tsteq	r6, r5, lsl #10
    1f6c:	3a060205 	bcc	182788 <__ccfg+0x1627e0>
    1f70:	01000402 	tsteq	r0, r2, lsl #8
    1f74:	00210501 	eoreq	r0, r1, r1, lsl #10
    1f78:	0f5c0205 	svceq	0x005c0205
    1f7c:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    1f80:	02050104 	andeq	r0, r5, #4, 2
    1f84:	21051414 	tstcs	r5, r4, lsl r4
    1f88:	09050e06 	stmdbeq	r5, {r1, r2, r9, sl, fp}
    1f8c:	060e0524 	streq	r0, [lr], -r4, lsr #10
    1f90:	06020520 	streq	r0, [r2], -r0, lsr #10
    1f94:	31010501 	tstcc	r1, r1, lsl #10
    1f98:	1d062205 	sfmne	f2, 4, [r6, #-20]	; 0xffffffec
    1f9c:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
    1fa0:	0201061f 	andeq	r0, r1, #32505856	; 0x1f00000
    1fa4:	01010002 	tsteq	r1, r2
    1fa8:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    1fac:	00000002 	andeq	r0, r0, r2
    1fb0:	04c10300 	strbeq	r0, [r1], #768	; 0x300
    1fb4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1fb8:	05202005 	streq	r2, [r0, #-5]!
    1fbc:	1a050108 	bne	1423e4 <__ccfg+0x12243c>
    1fc0:	18050106 	stmdane	r5, {r1, r2, r8}
    1fc4:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    1fc8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1fcc:	01010001 	tsteq	r1, r1
    1fd0:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    1fd4:	00000002 	andeq	r0, r0, r2
    1fd8:	04c60300 	strbeq	r0, [r6], #768	; 0x300
    1fdc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1fe0:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    1fe4:	05053002 	streq	r3, [r5, #-2]
    1fe8:	01050106 	tsteq	r5, r6, lsl #2
    1fec:	1d11052f 	cfldr32ne	mvfx0, [r1, #-188]	; 0xffffff44
    1ff0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    1ff4:	052f0603 	streq	r0, [pc, #-1539]!	; 19f9 <vform+0x5>
    1ff8:	02010608 	andeq	r0, r1, #8, 12	; 0x800000
    1ffc:	01010003 	tsteq	r1, r3
    2000:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    2004:	00000002 	andeq	r0, r0, r2
    2008:	04cd0300 	strbeq	r0, [sp], #768	; 0x300
    200c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2010:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2014:	02024b02 	andeq	r4, r2, #2048	; 0x800
    2018:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    201c:	02050033 	andeq	r0, r5, #51	; 0x33
    2020:	00000000 	andeq	r0, r0, r0
    2024:	0104d303 	tsteq	r4, r3, lsl #6
    2028:	02140205 	andseq	r0, r4, #1342177280	; 0x50000000
    202c:	01010003 	tsteq	r1, r3
    2030:	05003705 	streq	r3, [r0, #-1797]	; 0xfffff8fb
    2034:	00000002 	andeq	r0, r0, r2
    2038:	04d80300 	ldrbeq	r0, [r8], #768	; 0x300
    203c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2040:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2044:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    2048:	051f0603 	ldreq	r0, [pc, #-1539]	; 1a4d <vscan+0x9>
    204c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2050:	03022e0b 	movweq	r2, #11787	; 0x2e0b
    2054:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2058:	0205002e 	andeq	r0, r5, #46	; 0x2e
    205c:	00000000 	andeq	r0, r0, r0
    2060:	0104de03 	tsteq	r4, r3, lsl #28
    2064:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2068:	01052008 	tsteq	r5, r8
    206c:	03053006 	movweq	r3, #20486	; 0x5006
    2070:	0b051f06 	bleq	149c90 <__ccfg+0x129ce8>
    2074:	03020106 	movweq	r0, #8454	; 0x2106
    2078:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    207c:	0205002b 	andeq	r0, r5, #43	; 0x2b
    2080:	00000f6c 	andeq	r0, r0, ip, ror #30
    2084:	0104e803 	tsteq	r4, r3, lsl #16
    2088:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    208c:	0510062b 	ldreq	r0, [r0, #-1579]	; 0xfffff9d5
    2090:	03052205 	movweq	r2, #20997	; 0x5205
    2094:	31062106 	tstcc	r6, r6, lsl #2
    2098:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    209c:	01060c05 	tsteq	r6, r5, lsl #24
    20a0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    20a4:	052f0603 	streq	r0, [pc, #-1539]!	; 1aa9 <vscan+0x65>
    20a8:	0e053e02 	cdpeq	14, 0, cr3, cr5, cr2, {0}
    20ac:	01050106 	tsteq	r5, r6, lsl #2
    20b0:	00050221 	andeq	r0, r5, r1, lsr #4
    20b4:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
    20b8:	90020500 	andls	r0, r2, r0, lsl #10
    20bc:	0300000f 	movweq	r0, #15
    20c0:	050104f8 	streq	r0, [r1, #-1272]	; 0xfffffb08
    20c4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    20c8:	2e0e0645 	cfmadd32cs	mvax2, mvfx0, mvfx14, mvfx5
    20cc:	055c0505 	ldrbeq	r0, [ip, #-1285]	; 0xfffffafb
    20d0:	19052022 	stmdbne	r5, {r1, r5, sp}
    20d4:	0603054a 	streq	r0, [r3], -sl, asr #10
    20d8:	4c020521 	cfstr32mi	mvfx0, [r2], {33}	; 0x21
    20dc:	01060505 	tsteq	r6, r5, lsl #10
    20e0:	40060205 	andmi	r0, r6, r5, lsl #4
    20e4:	01060f05 	tsteq	r6, r5, lsl #30
    20e8:	4c060205 	sfmmi	f0, 4, [r6], {5}
    20ec:	01060505 	tsteq	r6, r5, lsl #10
    20f0:	31060205 	tstcc	r6, r5, lsl #4
    20f4:	01060505 	tsteq	r6, r5, lsl #10
    20f8:	4f060305 	svcmi	0x00060305
    20fc:	01060605 	tsteq	r6, r5, lsl #12
    2100:	30060305 	andcc	r0, r6, r5, lsl #6
    2104:	03040559 	movweq	r0, #17753	; 0x4559
    2108:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    210c:	052e7603 	streq	r7, [lr, #-1539]!	; 0xfffff9fd
    2110:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2114:	05350603 	ldreq	r0, [r5, #-1539]!	; 0xfffff9fd
    2118:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    211c:	594b0604 	stmdbpl	fp, {r2, r9, sl}^
    2120:	01060b05 	tsteq	r6, r5, lsl #22
    2124:	69060305 	stmdbvs	r6, {r0, r2, r8, r9}
    2128:	01060a05 	tsteq	r6, r5, lsl #20
    212c:	59060305 	stmdbpl	r6, {r0, r2, r8, r9}
    2130:	03060a05 	movweq	r0, #27141	; 0x6a05
    2134:	01050161 	tsteq	r5, r1, ror #2
    2138:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
    213c:	7a030602 	bvc	c394c <__ccfg+0xa39a4>
    2140:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2144:	06030501 	streq	r0, [r3], -r1, lsl #10
    2148:	0502752f 	streq	r7, [r2, #-1327]	; 0xfffffad1
    214c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2150:	0205001a 	andeq	r0, r5, #26
    2154:	0000102c 	andeq	r1, r0, ip, lsr #32
    2158:	0105ef03 	tsteq	r5, r3, lsl #30
    215c:	03170205 	tsteq	r7, #1342177280	; 0x50000000
    2160:	15050113 	strne	r0, [r5, #-275]	; 0xfffffeed
    2164:	1a050106 	bne	142584 <__ccfg+0x1225dc>
    2168:	05206803 	streq	r6, [r0, #-2051]!	; 0xfffff7fd
    216c:	20180315 	andscs	r0, r8, r5, lsl r3
    2170:	05580c05 	ldrbeq	r0, [r8, #-3077]	; 0xfffff3fb
    2174:	03052005 	movweq	r2, #20485	; 0x5005
    2178:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    217c:	060d0552 			; <UNDEFINED> instruction: 0x060d0552
    2180:	06020501 	streq	r0, [r2], -r1, lsl #10
    2184:	0617053e 			; <UNDEFINED> instruction: 0x0617053e
    2188:	2b1d0515 	blcs	7435e4 <__ccfg+0x72363c>
    218c:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
    2190:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2194:	05140617 	ldreq	r0, [r4, #-1559]	; 0xfffff9e9
    2198:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    219c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    21a0:	01052e0d 	tsteq	r5, sp, lsl #28
    21a4:	022e2c03 	eoreq	r2, lr, #768	; 0x300
    21a8:	0101000d 	tsteq	r1, sp
    21ac:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    21b0:	00107c02 	andseq	r7, r0, r2, lsl #24
    21b4:	06fb0300 	ldrbteq	r0, [fp], r0, lsl #6
    21b8:	03020501 	movweq	r0, #9473	; 0x2501
    21bc:	1c05010c 	stfnes	f0, [r5], {12}
    21c0:	01740306 	cmneq	r4, r6, lsl #6
    21c4:	0c030505 	cfstr32eq	mvfx0, [r3], {5}
    21c8:	06020520 	streq	r0, [r2], -r0, lsr #10
    21cc:	06070525 	streq	r0, [r7], -r5, lsr #10
    21d0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    21d4:	2f060305 	svccs	0x00060305
    21d8:	0611054c 	ldreq	r0, [r1], -ip, asr #10
    21dc:	1c0f0516 	cfstr32ne	mvfx0, [pc], {22}
    21e0:	05321105 	ldreq	r1, [r2, #-261]!	; 0xfffffefb
    21e4:	02051c0f 	andeq	r1, r5, #3840	; 0xf00
    21e8:	11053206 	tstne	r5, r6, lsl #4
    21ec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    21f0:	05303006 	ldreq	r3, [r0, #-6]!
    21f4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    21f8:	03052005 	movweq	r2, #20485	; 0x5005
    21fc:	052f2f06 	streq	r2, [pc, #-3846]!	; 12fe <diag+0xf6>
    2200:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2204:	08024201 	stmdaeq	r2, {r0, r9, lr}
    2208:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    220c:	02050017 	andeq	r0, r5, #23
    2210:	000010c4 	andeq	r1, r0, r4, asr #1
    2214:	0103d803 	tsteq	r3, r3, lsl #16
    2218:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    221c:	03061705 	movweq	r1, #26373	; 0x6705
    2220:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    2224:	06030526 	streq	r0, [r3], -r6, lsr #10
    2228:	06090521 	streq	r0, [r9], -r1, lsr #10
    222c:	20070501 	andcs	r0, r7, r1, lsl #10
    2230:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    2234:	06040513 			; <UNDEFINED> instruction: 0x06040513
    2238:	21020511 	tstcs	r2, r1, lsl r5
    223c:	0f032e06 	svceq	0x00032e06
    2240:	03030520 	movweq	r0, #13600	; 0x3520
    2244:	06054a72 			; <UNDEFINED> instruction: 0x06054a72
    2248:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    224c:	07053e06 	streq	r3, [r5, -r6, lsl #28]
    2250:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2254:	0b052106 	bleq	14a674 <__ccfg+0x12a6cc>
    2258:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    225c:	2f3d2306 	svccs	0x003d2306
    2260:	01060a05 	tsteq	r6, r5, lsl #20
    2264:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2268:	2a3d0605 	bcs	f43a84 <__ccfg+0xf23adc>
    226c:	01060d05 	tsteq	r6, r5, lsl #26
    2270:	0a030105 	beq	c268c <__ccfg+0xa26e4>
    2274:	00070258 	andeq	r0, r7, r8, asr r2
    2278:	1c050101 	stfnes	f0, [r5], {1}
    227c:	00020500 	andeq	r0, r2, r0, lsl #10
    2280:	03000000 	movweq	r0, #0
    2284:	050103f4 	streq	r0, [r1, #-1012]	; 0xfffffc0c
    2288:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    228c:	1c051313 	stcne	3, cr1, [r5], {19}
    2290:	01770306 	cmneq	r7, r6, lsl #6
    2294:	05360405 	ldreq	r0, [r6, #-1029]!	; 0xfffffbfb
    2298:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    229c:	031c0522 	tsteq	ip, #142606336	; 0x8800000
    22a0:	0a052077 	beq	14a484 <__ccfg+0x12a4dc>
    22a4:	05201003 	streq	r1, [r0, #-3]!
    22a8:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    22ac:	20061205 	andcs	r1, r6, r5, lsl #4
    22b0:	01060205 	tsteq	r6, r5, lsl #4
    22b4:	20110306 	andscs	r0, r1, r6, lsl #6
    22b8:	01060505 	tsteq	r6, r5, lsl #10
    22bc:	21060305 	tstcs	r6, r5, lsl #6
    22c0:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
    22c4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    22c8:	13590604 	cmpne	r9, #4, 12	; 0x400000
    22cc:	01060705 	tsteq	r6, r5, lsl #14
    22d0:	21060505 	tstcs	r6, r5, lsl #10
    22d4:	01060b05 	tsteq	r6, r5, lsl #22
    22d8:	31060405 	tstcc	r6, r5, lsl #8
    22dc:	01060705 	tsteq	r6, r5, lsl #14
    22e0:	052f0905 	streq	r0, [pc, #-2309]!	; 19e3 <__pi_vfparse+0x21f>
    22e4:	2f3d0604 	svccs	0x003d0604
    22e8:	4505052f 	strmi	r0, [r5, #-1327]	; 0xfffffad1
    22ec:	01060d05 	tsteq	r6, r5, lsl #26
    22f0:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    22f4:	0007023c 	andeq	r0, r7, ip, lsr r2
    22f8:	20050101 	andcs	r0, r5, r1, lsl #2
    22fc:	14020500 	strne	r0, [r2], #-1280	; 0xfffffb00
    2300:	03000011 	movweq	r0, #17
    2304:	050107a2 	streq	r0, [r1, #-1954]	; 0xfffff85e
    2308:	14161a02 	ldrne	r1, [r6], #-2562	; 0xfffff5fe
    230c:	01060505 	tsteq	r6, r5, lsl #10
    2310:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    2314:	0f060905 	svceq	0x00060905
    2318:	70032005 	andvc	r2, r3, r5
    231c:	030d052e 	movweq	r0, #54574	; 0xd52e
    2320:	1a052023 	bne	14a3b4 <__ccfg+0x12a40c>
    2324:	05207003 	streq	r7, [r0, #-3]!
    2328:	2e10030d 	cdpcs	3, 1, cr0, cr0, cr13, {0}
    232c:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    2330:	206d0309 	rsbcs	r0, sp, r9, lsl #6
    2334:	03060205 	movweq	r0, #25093	; 0x6205
    2338:	05132e0f 	ldreq	r2, [r3, #-3599]	; 0xfffff1f1
    233c:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
    2340:	03060106 	movweq	r0, #24838	; 0x6106
    2344:	03052009 	movweq	r2, #20489	; 0x5009
    2348:	05011903 	streq	r1, [r1, #-2307]	; 0xfffff6fd
    234c:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2350:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    2354:	1b052f06 	blne	14df74 <__ccfg+0x12dfcc>
    2358:	03050106 	movweq	r0, #20742	; 0x5106
    235c:	2e0d0306 	cdpcs	3, 0, cr0, cr13, cr6, {0}
    2360:	01061205 	tsteq	r6, r5, lsl #4
    2364:	40060205 	andmi	r0, r6, r5, lsl #4
    2368:	01060905 	tsteq	r6, r5, lsl #18
    236c:	03060305 	movweq	r0, #25349	; 0x6305
    2370:	0605204f 	streq	r2, [r5], -pc, asr #32
    2374:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2378:	03053d06 	movweq	r3, #23814	; 0x5d06
    237c:	0606054c 	streq	r0, [r6], -ip, asr #10
    2380:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    2384:	054a7a03 	strbeq	r7, [sl, #-2563]	; 0xfffff5fd
    2388:	05130609 	ldreq	r0, [r3, #-1545]	; 0xfffff9f7
    238c:	05440602 	strbeq	r0, [r4, #-1538]	; 0xfffff9fe
    2390:	05221403 	streq	r1, [r2, #-1027]!	; 0xfffffbfd
    2394:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2398:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    239c:	13053006 	movwne	r3, #20486	; 0x5006
    23a0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    23a4:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    23a8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    23ac:	06040520 	streq	r0, [r4], -r0, lsr #10
    23b0:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
    23b4:	20100501 	andscs	r0, r0, r1, lsl #10
    23b8:	30060405 	andcc	r0, r6, r5, lsl #8
    23bc:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    23c0:	1a051503 	bne	1477d4 <__ccfg+0x12782c>
    23c4:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    23c8:	1e1a0530 	cfmvr64hne	r0, mvdx10
    23cc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    23d0:	01061505 	tsteq	r6, r5, lsl #10
    23d4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    23d8:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    23dc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    23e0:	06052512 			; <UNDEFINED> instruction: 0x06052512
    23e4:	25120529 	ldrcs	r0, [r2, #-1321]	; 0xfffffad7
    23e8:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    23ec:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    23f0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    23f4:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    23f8:	1b030601 	blne	c3c04 <__ccfg+0xa3c5c>
    23fc:	000e0201 	andeq	r0, lr, r1, lsl #4
    2400:	2c050101 	stfcss	f0, [r5], {1}
    2404:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
    2408:	03000011 	movweq	r0, #17
    240c:	050102ab 	streq	r0, [r1, #-683]	; 0xfffffd55
    2410:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    2414:	200e062c 	andcs	r0, lr, ip, lsr #12
    2418:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
    241c:	19051c2c 	stmdbne	r5, {r2, r3, r5, sl, fp, ip}
    2420:	3c050524 	cfstr32cc	mvfx0, [r5], {36}	; 0x24
    2424:	23060205 	movwcs	r0, #25093	; 0x6205
    2428:	03060a05 	movweq	r0, #27141	; 0x6a05
    242c:	0c05010b 	stfeqs	f0, [r5], {11}
    2430:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2434:	0323260a 			; <UNDEFINED> instruction: 0x0323260a
    2438:	02052076 	andeq	r2, r5, #118	; 0x76
    243c:	05182f06 	ldreq	r2, [r8, #-3846]	; 0xfffff0fa
    2440:	05131403 	ldreq	r1, [r3, #-1027]	; 0xfffffbfd
    2444:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2448:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    244c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2450:	200f0301 	andcs	r0, pc, r1, lsl #6
    2454:	03060b05 	movweq	r0, #27397	; 0x6b05
    2458:	0c052073 	stceq	0, cr2, [r5], {115}	; 0x73
    245c:	04052006 	streq	r2, [r5], #-6
    2460:	052f0620 	streq	r0, [pc, #-1568]!	; 1e48 <NOROM_OSCClockSourceSet+0x1c>
    2464:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    2468:	0b030602 	bleq	c3c78 <__ccfg+0xa3cd0>
    246c:	06090520 	streq	r0, [r9], -r0, lsr #10
    2470:	00040201 	andeq	r0, r4, r1, lsl #4
    2474:	20050101 	andcs	r0, r5, r1, lsl #2
    2478:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    247c:	03000011 	movweq	r0, #17
    2480:	05010881 	streq	r0, [r1, #-2177]	; 0xfffff77f
    2484:	01090302 	tsteq	r9, r2, lsl #6
    2488:	01061505 	tsteq	r6, r5, lsl #10
    248c:	77032005 	strvc	r2, [r3, -r5]
    2490:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    2494:	02052009 	andeq	r2, r5, #9
    2498:	1d050523 	cfstr32ne	mvfx0, [r5, #-140]	; 0xffffff74
    249c:	21060305 	tstcs	r6, r5, lsl #6
    24a0:	01061a05 	tsteq	r6, r5, lsl #20
    24a4:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    24a8:	01000402 	tsteq	r0, r2, lsl #8
    24ac:	00210501 	eoreq	r0, r1, r1, lsl #10
    24b0:	00000205 	andeq	r0, r0, r5, lsl #4
    24b4:	94030000 	strls	r0, [r3], #-0
    24b8:	02050108 	andeq	r0, r5, #8, 2
    24bc:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
    24c0:	77030621 	strvc	r0, [r3, -r1, lsr #12]
    24c4:	03050501 	movweq	r0, #21761	; 0x5501
    24c8:	03053c09 	movweq	r3, #23561	; 0x5c09
    24cc:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    24d0:	0a050106 	beq	1428f0 <__ccfg+0x122948>
    24d4:	2008052e 	andcs	r0, r8, lr, lsr #10
    24d8:	05221205 	streq	r1, [r2, #-517]!	; 0xfffffdfb
    24dc:	03051e08 	movweq	r1, #24072	; 0x5e08
    24e0:	02054c06 	andeq	r4, r5, #1536	; 0x600
    24e4:	06090514 			; <UNDEFINED> instruction: 0x06090514
    24e8:	5a010501 	bpl	438f4 <__ccfg+0x2394c>
    24ec:	01000602 	tsteq	r0, r2, lsl #12
    24f0:	00200501 	eoreq	r0, r0, r1, lsl #10
    24f4:	00000205 	andeq	r0, r0, r5, lsl #4
    24f8:	a7030000 	strge	r0, [r3, -r0]
    24fc:	02050108 	andeq	r0, r5, #8, 2
    2500:	13010903 	movwne	r0, #6403	; 0x1903
    2504:	06200514 			; <UNDEFINED> instruction: 0x06200514
    2508:	05017403 	streq	r7, [r1, #-1027]	; 0xfffffbfd
    250c:	200c031d 	andcs	r0, ip, sp, lsl r3
    2510:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    2514:	2f05200b 	svccs	0x0005200b
    2518:	02052006 	andeq	r2, r5, #6
    251c:	24060106 	strcs	r0, [r6], #-262	; 0xfffffefa
    2520:	2e060505 	cfsh32cs	mvfx0, mvfx6, #5
    2524:	21060305 	tstcs	r6, r5, lsl #6
    2528:	01060705 	tsteq	r6, r5, lsl #14
    252c:	4c060205 	sfmmi	f0, 4, [r6], {5}
    2530:	01060905 	tsteq	r6, r5, lsl #18
    2534:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
    2538:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    253c:	0623052e 	strteq	r0, [r3], -lr, lsr #10
    2540:	0606052d 	streq	r0, [r6], -sp, lsr #10
    2544:	060e054a 	streq	r0, [lr], -sl, asr #10
    2548:	00040201 	andeq	r0, r4, r1, lsl #4
    254c:	23050101 	movwcs	r0, #20737	; 0x5101
    2550:	08020500 	stmdaeq	r2, {r8, sl}
    2554:	03000012 	movweq	r0, #18
    2558:	05010981 	streq	r0, [r1, #-2433]	; 0xfffff67f
    255c:	13134102 	tstne	r3, #-2147483648	; 0x80000000
    2560:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    2564:	75030623 	strvc	r0, [r3, #-1571]	; 0xfffff9dd
    2568:	03020501 	movweq	r0, #9473	; 0x2501
    256c:	061f3c0c 	ldreq	r3, [pc], -ip, lsl #24
    2570:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    2574:	28030608 	stmdacs	r3, {r3, r9, sl}
    2578:	03020520 	movweq	r0, #9504	; 0x2520
    257c:	1c052058 	stcne	0, cr2, [r5], {88}	; 0x58
    2580:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    2584:	2e5d0302 	cdpcs	3, 5, cr0, cr13, cr2, {0}
    2588:	05142e06 	ldreq	r2, [r4, #-3590]	; 0xfffff1fa
    258c:	09050108 	stmdbeq	r5, {r3, r8}
    2590:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2594:	06020520 	streq	r0, [r2], -r0, lsr #10
    2598:	2000c703 	andcs	ip, r0, r3, lsl #14
    259c:	02043d3d 	andeq	r3, r4, #3904	; 0xf40
    25a0:	03060d05 	movweq	r0, #27909	; 0x6d05
    25a4:	04017bcf 	streq	r7, [r1], #-3023	; 0xfffff431
    25a8:	060f0501 	streq	r0, [pc], -r1, lsl #10
    25ac:	2004b103 	andcs	fp, r4, r3, lsl #2
    25b0:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
    25b4:	03240502 			; <UNDEFINED> instruction: 0x03240502
    25b8:	05017bca 	streq	r7, [r1, #-3018]	; 0xfffff436
    25bc:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
    25c0:	01040106 	tsteq	r4, r6, lsl #2
    25c4:	b1030205 	tstlt	r3, r5, lsl #4
    25c8:	2f062004 	svccs	0x00062004
    25cc:	05580101 	ldrbeq	r0, [r8, #-257]	; 0xfffffeff
    25d0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    25d4:	b6030603 	strlt	r0, [r3], -r3, lsl #12
    25d8:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    25dc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    25e0:	05134b06 	ldreq	r4, [r3, #-2822]	; 0xfffff4fa
    25e4:	05200607 	streq	r0, [r0, #-1543]!	; 0xfffff9f9
    25e8:	134b0605 	movtne	r0, #46597	; 0xb605
    25ec:	06090513 			; <UNDEFINED> instruction: 0x06090513
    25f0:	0c052d01 	stceq	13, cr2, [r5], {1}
    25f4:	03080528 	movweq	r0, #34088	; 0x8528
    25f8:	05052077 	streq	r2, [r5, #-119]	; 0xffffff89
    25fc:	05153206 	ldreq	r3, [r5, #-518]	; 0xfffffdfa
    2600:	050f0608 	streq	r0, [pc, #-1544]	; 2000 <NOROM_SetupTrimDevice+0x78>
    2604:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    2608:	74310305 	ldrtvc	r0, [r1], #-773	; 0xfffffcfb
    260c:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    2610:	054a4e03 	strbeq	r4, [sl, #-3587]	; 0xfffff1fd
    2614:	0605411d 			; <UNDEFINED> instruction: 0x0605411d
    2618:	08052d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, sp}
    261c:	06050106 	streq	r0, [r5], -r6, lsl #2
    2620:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    2624:	0511060b 	ldreq	r0, [r1, #-1547]	; 0xfffff9f5
    2628:	06053c18 			; <UNDEFINED> instruction: 0x06053c18
    262c:	060b052f 	streq	r0, [fp], -pc, lsr #10
    2630:	03040546 	movweq	r0, #17734	; 0x4546
    2634:	08052e31 	stmdaeq	r5, {r0, r4, r5, r9, sl, fp, sp}
    2638:	6a030106 	bvs	c2a58 <__ccfg+0xa2ab0>
    263c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2640:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    2644:	01061505 	tsteq	r6, r5, lsl #10
    2648:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
    264c:	06052e08 	streq	r2, [r5], -r8, lsl #28
    2650:	053d2f06 	ldreq	r2, [sp, #-3846]!	; 0xfffff0fa
    2654:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2658:	05210607 	streq	r0, [r1, #-1543]!	; 0xfffff9f9
    265c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2660:	05590606 	ldrbeq	r0, [r9, #-1542]	; 0xfffff9fa
    2664:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2668:	05230605 	streq	r0, [r3, #-1541]!	; 0xfffff9fb
    266c:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    2670:	05590605 	ldrbeq	r0, [r9, #-1541]	; 0xfffff9fb
    2674:	16051406 	strne	r1, [r5], -r6, lsl #8
    2678:	08050106 	stmdaeq	r5, {r1, r2, r8}
    267c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2680:	06090521 	streq	r0, [r9], -r1, lsr #10
    2684:	200c0501 	andcs	r0, ip, r1, lsl #10
    2688:	2f060605 	svccs	0x00060605
    268c:	01060805 	tsteq	r6, r5, lsl #16
    2690:	2a060b05 	bcs	1852ac <__ccfg+0x165304>
    2694:	14060805 	strne	r0, [r6], #-2053	; 0xfffff7fb
    2698:	051d1c05 	ldreq	r1, [sp, #-3077]	; 0xfffff3fb
    269c:	05350605 	ldreq	r0, [r5, #-1541]!	; 0xfffff9fb
    26a0:	05591306 	ldrbeq	r1, [r9, #-774]	; 0xfffffcfa
    26a4:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    26a8:	0a051f08 	beq	14a2d0 <__ccfg+0x12a328>
    26ac:	0606052d 	streq	r0, [r6], -sp, lsr #10
    26b0:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    26b4:	06050106 	streq	r0, [r5], -r6, lsl #2
    26b8:	16052106 	strne	r2, [r5], -r6, lsl #2
    26bc:	08050106 	stmdaeq	r5, {r1, r2, r8}
    26c0:	0b05222c 	bleq	14af78 <__ccfg+0x12afd0>
    26c4:	06051b06 	streq	r1, [r5], -r6, lsl #22
    26c8:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    26cc:	20090306 	andcs	r0, r9, r6, lsl #6
    26d0:	01060805 	tsteq	r6, r5, lsl #16
    26d4:	2f060605 	svccs	0x00060605
    26d8:	03061c05 	movweq	r1, #27653	; 0x6c05
    26dc:	0a05016e 	beq	142c9c <__ccfg+0x122cf4>
    26e0:	052e1203 	streq	r1, [lr, #-515]!	; 0xfffffdfd
    26e4:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    26e8:	03060520 	movweq	r0, #25888	; 0x6520
    26ec:	052f2017 	streq	r2, [pc, #-23]!	; 26dd <NOROM_SysCtrlSetRechargeBeforePowerDown+0xd9>
    26f0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    26f4:	051e060b 	ldreq	r0, [lr, #-1547]	; 0xfffff9f5
    26f8:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    26fc:	0405200b 	streq	r2, [r5], #-11
    2700:	3c0c0306 	stccc	3, cr0, [ip], {6}
    2704:	01000b02 	tsteq	r0, r2, lsl #22
    2708:	000f0501 	andeq	r0, pc, r1, lsl #10
    270c:	00000205 	andeq	r0, r0, r5, lsl #4
    2710:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    2714:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    2718:	06250513 			; <UNDEFINED> instruction: 0x06250513
    271c:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
    2720:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2724:	25052018 	strcs	r2, [r5, #-24]	; 0xffffffe8
    2728:	2e0c0520 	cfsh32cs	mvfx0, mvfx12, #16
    272c:	21060205 	tstcs	r6, r5, lsl #4
    2730:	01051406 	tsteq	r5, r6, lsl #8
    2734:	00080231 	andeq	r0, r8, r1, lsr r2
    2738:	0cb70101 	ldfeqs	f0, [r7], #4
    273c:	00030000 	andeq	r0, r3, r0
    2740:	000001a1 	andeq	r0, r0, r1, lsr #3
    2744:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2748:	0101000d 	tsteq	r1, sp
    274c:	00000101 	andeq	r0, r0, r1, lsl #2
    2750:	00000100 	andeq	r0, r0, r0, lsl #2
    2754:	6f682f01 	svcvs	0x00682f01
    2758:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 25ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf8>
    275c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2760:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2764:	6f746b73 	svcvs	0x00746b73
    2768:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    276c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2770:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2774:	2f534f43 	svccs	0x00534f43
    2778:	4f636950 	svcmi	0x00636950
    277c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2780:	2f736269 	svccs	0x00736269
    2784:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
    2788:	752f0049 	strvc	r0, [pc, #-73]!	; 2747 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x143>
    278c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 25c8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x114>
    2790:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    2794:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    2798:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    279c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    27a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    27a4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    27a8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    27ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    27b0:	2f006564 	svccs	0x00006564
    27b4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    27b8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    27bc:	2f6e6974 	svccs	0x006e6974
    27c0:	6b736544 	blvs	1cdbcd8 <__ccfg+0x1cbbd30>
    27c4:	2f706f74 	svccs	0x00706f74
    27c8:	4f534c4f 	svcmi	0x00534c4f
    27cc:	2f54454e 	svccs	0x0054454e
    27d0:	4f434950 	svcmi	0x00434950
    27d4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    27d8:	2f534f63 	svccs	0x00534f63
    27dc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    27e0:	2f005858 	svccs	0x00005858
    27e4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    27e8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    27ec:	2f6e6974 	svccs	0x006e6974
    27f0:	6b736544 	blvs	1cdbd08 <__ccfg+0x1cbbd60>
    27f4:	2f706f74 	svccs	0x00706f74
    27f8:	4f534c4f 	svcmi	0x00534c4f
    27fc:	2f54454e 	svccs	0x0054454e
    2800:	4f434950 	svcmi	0x00434950
    2804:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2808:	00534f63 	subseq	r4, r3, r3, ror #30
    280c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2758 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x154>
    2810:	616d2f65 	cmnvs	sp, r5, ror #30
    2814:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2818:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    281c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2820:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2824:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2828:	4349502f 	movtmi	r5, #36911	; 0x902f
    282c:	502f534f 	eorpl	r5, pc, pc, asr #6
    2830:	534f6369 	movtpl	r6, #62313	; 0xf369
    2834:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    2838:	006c656e 	rsbeq	r6, ip, lr, ror #10
    283c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2840:	0100632e 	tsteq	r0, lr, lsr #6
    2844:	74730000 	ldrbtvc	r0, [r3], #-0
    2848:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    284c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    2850:	74730000 	ldrbtvc	r0, [r3], #-0
    2854:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    2858:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    285c:	72610000 	rsbvc	r0, r1, #0
    2860:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    2864:	00000300 	andeq	r0, r0, r0, lsl #6
    2868:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    286c:	0300682e 	movweq	r6, #2094	; 0x82e
    2870:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    2874:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    2878:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    287c:	00000300 	andeq	r0, r0, r0, lsl #6
    2880:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    2884:	5f736e6f 	svcpl	0x00736e6f
    2888:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    288c:	00030068 	andeq	r0, r3, r8, rrx
    2890:	73797300 	cmnvc	r9, #0, 6
    2894:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    2898:	00000400 	andeq	r0, r0, r0, lsl #8
    289c:	5f766374 	svcpl	0x00766374
    28a0:	73666564 	cmnvc	r6, #100, 10	; 0x19000000
    28a4:	0100682e 	tsteq	r0, lr, lsr #16
    28a8:	656b0000 	strbvs	r0, [fp, #-0]!
    28ac:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    28b0:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    28b4:	63740000 	cmnvs	r4, #0
    28b8:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    28bc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    28c0:	74000001 	strvc	r0, [r0], #-1
    28c4:	6e5f7663 	cdpvs	6, 5, cr7, cr15, cr3, {3}
    28c8:	5f65646f 	svcpl	0x0065646f
    28cc:	61746164 	cmnvs	r4, r4, ror #2
    28d0:	0100682e 	tsteq	r0, lr, lsr #16
    28d4:	623c0000 	eorsvs	r0, ip, #0
    28d8:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    28dc:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    28e0:	00000000 	andeq	r0, r0, r0
    28e4:	00310500 	eorseq	r0, r1, r0, lsl #10
    28e8:	00000205 	andeq	r0, r0, r5, lsl #4
    28ec:	93030000 	movwls	r0, #12288	; 0x3000
    28f0:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    28f4:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    28f8:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
    28fc:	07052001 	streq	r2, [r5, -r1]
    2900:	22160526 	andscs	r0, r6, #159383552	; 0x9800000
    2904:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    2908:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    290c:	0513061a 	ldreq	r0, [r3, #-1562]	; 0xfffff9e6
    2910:	02051f0e 	andeq	r1, r5, #14, 30	; 0x38
    2914:	1a052106 	bne	14ad34 <__ccfg+0x12ad8c>
    2918:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    291c:	200c0306 	andcs	r0, ip, r6, lsl #6
    2920:	16060105 	strne	r0, [r6], -r5, lsl #2
    2924:	01000102 	tsteq	r0, r2, lsl #2
    2928:	002e0501 	eoreq	r0, lr, r1, lsl #10
    292c:	00000205 	andeq	r0, r0, r5, lsl #4
    2930:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    2934:	02050100 	andeq	r0, r5, #0, 2
    2938:	06060516 			; <UNDEFINED> instruction: 0x06060516
    293c:	20050501 	andcs	r0, r5, r1, lsl #10
    2940:	2f060305 	svccs	0x00060305
    2944:	01062905 	tsteq	r6, r5, lsl #18
    2948:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
    294c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2950:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    2954:	0305201c 	movweq	r2, #20508	; 0x501c
    2958:	1a052106 	bne	14ad78 <__ccfg+0x12add0>
    295c:	01050106 	tsteq	r5, r6, lsl #2
    2960:	0001024c 	andeq	r0, r1, ip, asr #4
    2964:	2e050101 	adfcss	f0, f5, f1
    2968:	00020500 	andeq	r0, r2, r0, lsl #10
    296c:	03000000 	movweq	r0, #0
    2970:	05010283 	streq	r0, [r1, #-643]	; 0xfffffd7d
    2974:	2e051602 	cfmadd32cs	mvax0, mvfx1, mvfx5, mvfx2
    2978:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    297c:	012f0624 			; <UNDEFINED> instruction: 0x012f0624
    2980:	01011301 	tsteq	r1, r1, lsl #6
    2984:	06010514 			; <UNDEFINED> instruction: 0x06010514
    2988:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    298c:	01000202 	tsteq	r0, r2, lsl #4
    2990:	003a0501 	eorseq	r0, sl, r1, lsl #10
    2994:	00000205 	andeq	r0, r0, r5, lsl #4
    2998:	a7030000 	strge	r0, [r3, -r0]
    299c:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    29a0:	3a052406 	bcc	14b9c0 <__ccfg+0x12ba18>
    29a4:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    29a8:	3a050124 	bcc	142e40 <__ccfg+0x122e98>
    29ac:	02051c06 	andeq	r1, r5, #1536	; 0x600
    29b0:	4a200624 	bmi	804248 <__ccfg+0x7e42a0>
    29b4:	06050513 			; <UNDEFINED> instruction: 0x06050513
    29b8:	06030501 	streq	r0, [r3], -r1, lsl #10
    29bc:	2f02053d 	svccs	0x0002053d
    29c0:	01060605 	tsteq	r6, r5, lsl #12
    29c4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    29c8:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    29cc:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    29d0:	03052114 	movweq	r2, #20756	; 0x5114
    29d4:	04052f06 	streq	r2, [r5], #-3846	; 0xfffff0fa
    29d8:	11050106 	tstne	r5, r6, lsl #2
    29dc:	06030520 	streq	r0, [r3], -r0, lsr #10
    29e0:	060b0521 	streq	r0, [fp], -r1, lsr #10
    29e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    29e8:	06190528 	ldreq	r0, [r9], -r8, lsr #10
    29ec:	4b010501 	blmi	43df8 <__ccfg+0x23e50>
    29f0:	03060305 	movweq	r0, #25349	; 0x6305
    29f4:	1405207a 	strne	r2, [r5], #-122	; 0xffffff86
    29f8:	03050106 	movweq	r0, #20742	; 0x5106
    29fc:	17052106 	strne	r2, [r5, -r6, lsl #2]
    2a00:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    2a04:	06030520 	streq	r0, [r3], -r0, lsr #10
    2a08:	06110521 	ldreq	r0, [r1], -r1, lsr #10
    2a0c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2a10:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2a14:	00050201 	andeq	r0, r5, r1, lsl #4
    2a18:	3a050101 	bcc	142e24 <__ccfg+0x122e7c>
    2a1c:	00020500 	andeq	r0, r2, r0, lsl #10
    2a20:	03000000 	movweq	r0, #0
    2a24:	060101df 			; <UNDEFINED> instruction: 0x060101df
    2a28:	06020520 	streq	r0, [r2], -r0, lsr #10
    2a2c:	30200903 	eorcc	r0, r0, r3, lsl #18
    2a30:	05840405 	streq	r0, [r4, #1029]	; 0x405
    2a34:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2a38:	014c0604 	cmpeq	ip, r4, lsl #12
    2a3c:	4a065806 	bmi	198a5c <__ccfg+0x178ab4>
    2a40:	03062706 	movweq	r2, #26374	; 0x6706
    2a44:	05133c79 	ldreq	r3, [r3, #-3193]	; 0xfffff387
    2a48:	12030601 	andne	r0, r3, #1048576	; 0x100000
    2a4c:	03040520 	movweq	r0, #17696	; 0x4520
    2a50:	2b062e75 	blcs	18e42c <__ccfg+0x16e484>
    2a54:	01061b05 	tsteq	r6, r5, lsl #22
    2a58:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2a5c:	132e9001 			; <UNDEFINED> instruction: 0x132e9001
    2a60:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    2a64:	0304051a 	movweq	r0, #17690	; 0x451a
    2a68:	01052e78 	tsteq	r5, r8, ror lr
    2a6c:	000c0236 	andeq	r0, ip, r6, lsr r2
    2a70:	31050101 	tstcc	r5, r1, lsl #2
    2a74:	00020500 	andeq	r0, r2, r0, lsl #10
    2a78:	03000000 	movweq	r0, #0
    2a7c:	050102ba 	streq	r0, [r1, #-698]	; 0xfffffd46
    2a80:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
    2a84:	78030631 	stmdavc	r3, {r0, r4, r5, r9, sl}
    2a88:	03060501 	movweq	r0, #25857	; 0x6501
    2a8c:	04052009 	streq	r2, [r5], #-9
    2a90:	0602052d 	streq	r0, [r2], -sp, lsr #10
    2a94:	0605052f 	streq	r0, [r5], -pc, lsr #10
    2a98:	06030501 	streq	r0, [r3], -r1, lsl #10
    2a9c:	6606012f 	strvs	r0, [r6], -pc, lsr #2
    2aa0:	21064a06 	tstcs	r6, r6, lsl #20
    2aa4:	01133b06 	tsteq	r3, r6, lsl #22
    2aa8:	064a6606 	strbeq	r6, [sl], -r6, lsl #12
    2aac:	05132e2e 	ldreq	r2, [r3, #-3630]	; 0xfffff1d2
    2ab0:	09030601 	stmdbeq	r3, {r0, r9, sl}
    2ab4:	0303053c 	movweq	r0, #13628	; 0x353c
    2ab8:	36062e77 			; <UNDEFINED> instruction: 0x36062e77
    2abc:	21060105 	tstcs	r6, r5, lsl #2
    2ac0:	022d0305 	eoreq	r0, sp, #335544320	; 0x14000000
    2ac4:	0101000b 	tsteq	r1, fp
    2ac8:	05004a05 	streq	r4, [r0, #-2565]	; 0xfffff5fb
    2acc:	00000002 	andeq	r0, r0, r2
    2ad0:	03f50300 	mvnseq	r0, #0, 6
    2ad4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2ad8:	13141313 	tstne	r4, #1275068416	; 0x4c000000
    2adc:	03064a05 	movweq	r4, #27141	; 0x6a05
    2ae0:	053c0179 	ldreq	r0, [ip, #-377]!	; 0xfffffe87
    2ae4:	3c0b0305 	stccc	3, cr0, [fp], {5}
    2ae8:	75034a05 	strvc	r4, [r3, #-2565]	; 0xfffff5fb
    2aec:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    2af0:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    2af4:	30050106 	andcc	r0, r5, r6, lsl #2
    2af8:	20250520 	eorcs	r0, r5, r0, lsr #10
    2afc:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
    2b00:	25053c30 	strcs	r3, [r5, #-3120]	; 0xfffff3d0
    2b04:	06040520 	streq	r0, [r4], -r0, lsr #10
    2b08:	0603054b 	streq	r0, [r3], -fp, asr #10
    2b0c:	052e1503 	streq	r1, [lr, #-1283]!	; 0xfffffafd
    2b10:	6e030602 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx2
    2b14:	1713132e 	ldrne	r1, [r3, -lr, lsr #6]
    2b18:	01061205 	tsteq	r6, r5, lsl #4
    2b1c:	76060205 	strvc	r0, [r6], -r5, lsl #4
    2b20:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    2b24:	0520060a 	streq	r0, [r0, #-1546]!	; 0xfffff9f6
    2b28:	052f0603 	streq	r0, [pc, #-1539]!	; 252d <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x79>
    2b2c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2b30:	22052e06 	andcs	r2, r5, #6, 28	; 0x60
    2b34:	24051f06 	strcs	r1, [r5], #-3846	; 0xfffff0fa
    2b38:	0f050106 	svceq	0x00050106
    2b3c:	02052006 	andeq	r2, r5, #6
    2b40:	0a050106 	beq	142f60 <__ccfg+0x122fb8>
    2b44:	03010533 	movweq	r0, #5427	; 0x1533
    2b48:	02052e13 	andeq	r2, r5, #304	; 0x130
    2b4c:	66730306 	ldrbtvs	r0, [r3], -r6, lsl #6
    2b50:	15061a05 	strne	r1, [r6, #-2565]	; 0xfffff5fb
    2b54:	05391305 	ldreq	r1, [r9, #-773]!	; 0xfffffcfb
    2b58:	052f0602 	streq	r0, [pc, #-1538]!	; 255e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xaa>
    2b5c:	0514061a 	ldreq	r0, [r4, #-1562]	; 0xfffff9e6
    2b60:	2f061e02 	svccs	0x00061e02
    2b64:	4a011413 	bmi	47bb8 <__ccfg+0x27c10>
    2b68:	0605143c 			; <UNDEFINED> instruction: 0x0605143c
    2b6c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2b70:	0602054a 	streq	r0, [r2], -sl, asr #10
    2b74:	06130532 			; <UNDEFINED> instruction: 0x06130532
    2b78:	06020501 	streq	r0, [r2], -r1, lsl #10
    2b7c:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2b80:	06020501 	streq	r0, [r2], -r1, lsl #10
    2b84:	15206d03 	strne	r6, [r0, #-3331]!	; 0xfffff2fd
    2b88:	01061305 	tsteq	r6, r5, lsl #6
    2b8c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    2b90:	01060505 	tsteq	r6, r5, lsl #10
    2b94:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2b98:	01001002 	tsteq	r0, r2
    2b9c:	003a0501 	eorseq	r0, sl, r1, lsl #10
    2ba0:	00000205 	andeq	r0, r0, r5, lsl #4
    2ba4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    2ba8:	02050104 	andeq	r0, r5, #4, 2
    2bac:	01141314 	tsteq	r4, r4, lsl r3
    2bb0:	1b063a05 	blne	1913cc <__ccfg+0x171424>
    2bb4:	25020520 	strcs	r0, [r2, #-1312]	; 0xfffffae0
    2bb8:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2bbc:	79030627 	stmdbvc	r3, {r0, r1, r2, r5, r9, sl}
    2bc0:	1514143c 	ldrne	r1, [r4, #-1084]	; 0xfffffbc4
    2bc4:	4a580601 	bmi	16043d0 <__ccfg+0x15e4428>
    2bc8:	142e2e06 	strtne	r2, [lr], #-3590	; 0xfffff1fa
    2bcc:	01060605 	tsteq	r6, r5, lsl #12
    2bd0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    2bd4:	0305300a 	movweq	r3, #20490	; 0x500a
    2bd8:	05134106 	ldreq	r4, [r3, #-262]	; 0xfffffefa
    2bdc:	0a052b08 	beq	14d804 <__ccfg+0x12d85c>
    2be0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    2be4:	06020520 	streq	r0, [r2], -r0, lsr #10
    2be8:	13053d33 	movwne	r3, #23859	; 0x5d33
    2bec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2bf0:	01053d06 	tsteq	r5, r6, lsl #26
    2bf4:	0b021306 	bleq	87814 <__ccfg+0x6786c>
    2bf8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2bfc:	02050043 	andeq	r0, r5, #67	; 0x43
    2c00:	00000000 	andeq	r0, r0, r0
    2c04:	0104c903 	tsteq	r4, r3, lsl #18
    2c08:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2c0c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2c10:	26052f0f 	strcs	r2, [r5], -pc, lsl #30
    2c14:	211d053b 	tstcs	sp, fp, lsr r5
    2c18:	31060205 	tstcc	r6, r5, lsl #4
    2c1c:	01061005 	tsteq	r6, r5
    2c20:	2f060205 	svccs	0x00060205
    2c24:	01060905 	tsteq	r6, r5, lsl #18
    2c28:	052b0a05 	streq	r0, [fp, #-2565]!	; 0xfffff5fb
    2c2c:	04023201 	streq	r3, [r2], #-513	; 0xfffffdff
    2c30:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2c34:	0205003c 	andeq	r0, r5, #60	; 0x3c
    2c38:	00000000 	andeq	r0, r0, r0
    2c3c:	0104d503 	tsteq	r4, r3, lsl #10
    2c40:	13190205 	tstne	r9, #1342177280	; 0x50000000
    2c44:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2c48:	7503063c 	strvc	r0, [r3, #-1596]	; 0xfffff9c4
    2c4c:	02052020 	andeq	r2, r5, #32
    2c50:	20200b03 	eorcs	r0, r0, r3, lsl #22
    2c54:	03064a06 	movweq	r4, #27142	; 0x6a06
    2c58:	03062013 	movweq	r2, #24595	; 0x6013
    2c5c:	13143c6d 	tstne	r4, #27904	; 0x6d00
    2c60:	01060405 	tsteq	r6, r5, lsl #8
    2c64:	21060205 	tstcs	r6, r5, lsl #4
    2c68:	01060505 	tsteq	r6, r5, lsl #10
    2c6c:	30060305 	andcc	r0, r6, r5, lsl #6
    2c70:	01060605 	tsteq	r6, r5, lsl #12
    2c74:	4b060405 	blmi	183c90 <__ccfg+0x163ce8>
    2c78:	3302053d 	movwcc	r0, #9533	; 0x253d
    2c7c:	1501013d 	strne	r0, [r1, #-317]	; 0xfffffec3
    2c80:	04051406 	streq	r1, [r5], #-1030	; 0xfffffbfa
    2c84:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    2c88:	4a060130 	bmi	183150 <__ccfg+0x1631a8>
    2c8c:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2c90:	22053e13 	andcs	r3, r5, #304	; 0x130
    2c94:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    2c98:	06020557 			; <UNDEFINED> instruction: 0x06020557
    2c9c:	06010523 	streq	r0, [r1], -r3, lsr #10
    2ca0:	030a0513 	movweq	r0, #42259	; 0xa513
    2ca4:	0b022e70 	bleq	8e66c <__ccfg+0x6e6c4>
    2ca8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2cac:	02050038 	andeq	r0, r5, #56	; 0x38
    2cb0:	00000000 	andeq	r0, r0, r0
    2cb4:	0104fc03 	tsteq	r4, r3, lsl #24	; <UNPREDICTABLE>
    2cb8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2cbc:	01141313 	tsteq	r4, r3, lsl r3
    2cc0:	03063805 	movweq	r3, #26629	; 0x6805
    2cc4:	02052077 	andeq	r2, r5, #119	; 0x77
    2cc8:	20200903 	eorcs	r0, r0, r3, lsl #18
    2ccc:	03054a06 	movweq	r4, #23046	; 0x5a06
    2cd0:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2cd4:	03060205 	movweq	r0, #25093	; 0x6205
    2cd8:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    2cdc:	01061a05 	tsteq	r6, r5, lsl #20
    2ce0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2ce4:	052f0603 	streq	r0, [pc, #-1539]!	; 26e9 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xe5>
    2ce8:	05131902 	ldreq	r1, [r3, #-2306]	; 0xfffff6fe
    2cec:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2cf0:	03052005 	movweq	r2, #20485	; 0x5005
    2cf4:	200a0306 	andcs	r0, sl, r6, lsl #6
    2cf8:	03060505 	movweq	r0, #25861	; 0x6505
    2cfc:	0a050175 	beq	1432d8 <__ccfg+0x123330>
    2d00:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    2d04:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    2d08:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    2d0c:	052f0604 	streq	r0, [pc, #-1540]!	; 2710 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x10c>
    2d10:	0511062c 	ldreq	r0, [r1, #-1580]	; 0xfffff9d4
    2d14:	2a052106 	bcs	14b134 <__ccfg+0x12b18c>
    2d18:	09051f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, ip}
    2d1c:	05206f03 	streq	r6, [r0, #-3843]!	; 0xfffff0fd
    2d20:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    2d24:	0305200c 	movweq	r2, #20492	; 0x500c
    2d28:	20052f06 	andcs	r2, r5, r6, lsl #30
    2d2c:	06050106 	streq	r0, [r5], -r6, lsl #2
    2d30:	20200520 	eorcs	r0, r0, r0, lsr #10
    2d34:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2d38:	13330602 	teqne	r3, #2097152	; 0x200000
    2d3c:	01060505 	tsteq	r6, r5, lsl #10
    2d40:	2a060305 	bcs	18395c <__ccfg+0x1639b4>
    2d44:	06050542 	streq	r0, [r5], -r2, asr #10
    2d48:	230a050f 	movwcs	r0, #42255	; 0xa50f
    2d4c:	20061a05 	andcs	r1, r6, r5, lsl #20
    2d50:	01060305 	tsteq	r6, r5, lsl #6
    2d54:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    2d58:	0604052e 	streq	r0, [r4], -lr, lsr #10
    2d5c:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    2d60:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2d64:	05052007 	streq	r2, [r5, #-7]
    2d68:	2c052f06 	stccs	15, cr2, [r5], {6}
    2d6c:	07051006 	streq	r1, [r5, -r6]
    2d70:	062a0522 	strteq	r0, [sl], -r2, lsr #10
    2d74:	000a021e 	andeq	r0, sl, lr, lsl r2
    2d78:	38050101 	stmdacc	r5, {r0, r8}
    2d7c:	00020500 	andeq	r0, r2, r0, lsl #10
    2d80:	03000000 	movweq	r0, #0
    2d84:	050105a3 	streq	r0, [r1, #-1443]	; 0xfffffa5d
    2d88:	13131602 	tstne	r3, #2097152	; 0x200000
    2d8c:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2d90:	77030638 	smladxvc	r3, r8, r6, r0
    2d94:	03020520 	movweq	r0, #9504	; 0x2520
    2d98:	06202009 	strteq	r2, [r0], -r9
    2d9c:	0603054a 	streq	r0, [r3], -sl, asr #10
    2da0:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    2da4:	77030602 	strvc	r0, [r3, -r2, lsl #12]
    2da8:	0514142e 	ldreq	r1, [r4, #-1070]	; 0xfffffbd2
    2dac:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2db0:	03052005 	movweq	r2, #20485	; 0x5005
    2db4:	02052f06 	andeq	r2, r5, #6, 30
    2db8:	06050519 			; <UNDEFINED> instruction: 0x06050519
    2dbc:	201b0501 	andscs	r0, fp, r1, lsl #10
    2dc0:	6b033805 	blvs	d0ddc <__ccfg+0xb0e34>
    2dc4:	06030520 	streq	r0, [r3], -r0, lsr #10
    2dc8:	207cb303 	rsbscs	fp, ip, r3, lsl #6
    2dcc:	01060505 	tsteq	r6, r5, lsl #10
    2dd0:	21060305 	tstcs	r6, r5, lsl #6
    2dd4:	01060605 	tsteq	r6, r5, lsl #12
    2dd8:	31060305 	tstcc	r6, r5, lsl #6
    2ddc:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    2de0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2de4:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    2de8:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    2dec:	dc030609 	stcle	6, cr0, [r3], {9}
    2df0:	21052003 	tstcs	r5, r3
    2df4:	0c050106 	stfeqs	f0, [r5], {6}
    2df8:	06030520 	streq	r0, [r3], -r0, lsr #10
    2dfc:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    2e00:	20060501 	andcs	r0, r6, r1, lsl #10
    2e04:	05202005 	streq	r2, [r0, #-5]!
    2e08:	02052006 	andeq	r2, r5, #6
    2e0c:	1b053306 	blne	14fa2c <__ccfg+0x12fa84>
    2e10:	03050106 	movweq	r0, #20742	; 0x5106
    2e14:	01052b06 	tsteq	r5, r6, lsl #22
    2e18:	3c0a0306 	stccc	3, cr0, [sl], {6}
    2e1c:	21060205 	tstcs	r6, r5, lsl #4
    2e20:	01060905 	tsteq	r6, r5, lsl #18
    2e24:	20061905 	andcs	r1, r6, r5, lsl #18
    2e28:	01060205 	tsteq	r6, r5, lsl #4
    2e2c:	0a030105 	beq	c3248 <__ccfg+0xa32a0>
    2e30:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2e34:	052e7703 	streq	r7, [lr, #-1795]!	; 0xfffff8fd
    2e38:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    2e3c:	04052006 	streq	r2, [r5], #-6
    2e40:	052f3006 	streq	r3, [pc, #-6]!	; 2e42 <__exidx_end+0x20a>
    2e44:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2e48:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2e4c:	2b051b29 	blcs	149af8 <__ccfg+0x129b50>
    2e50:	0a020106 	beq	83270 <__ccfg+0x632c8>
    2e54:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2e58:	02050016 	andeq	r0, r5, #22
    2e5c:	00000000 	andeq	r0, r0, r0
    2e60:	0105cd03 	tsteq	r5, r3, lsl #26
    2e64:	13130205 	tstne	r3, #1342177280	; 0x50000000
    2e68:	01141313 	tsteq	r4, r3, lsl r3
    2e6c:	03061605 	movweq	r1, #26117	; 0x6605
    2e70:	0520207a 	streq	r2, [r0, #-122]!	; 0xffffff86
    2e74:	06204202 	strteq	r4, [r0], -r2, lsl #4
    2e78:	0624064a 	strteq	r0, [r4], -sl, asr #12
    2e7c:	01141438 	tsteq	r4, r8, lsr r4
    2e80:	064a5806 	strbeq	r5, [sl], -r6, lsl #16
    2e84:	05162e2e 	ldreq	r2, [r6, #-3630]	; 0xfffff1d2
    2e88:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    2e8c:	052f0602 	streq	r0, [pc, #-1538]!	; 2892 <NOROM_SysCtrlResetSourceGet+0xe>
    2e90:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
    2e94:	02051e0e 	andeq	r1, r5, #14, 28	; 0xe0
    2e98:	0d053006 	stceq	0, cr3, [r5, #-24]	; 0xffffffe8
    2e9c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2ea0:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2ea4:	06060522 	streq	r0, [r6], -r2, lsr #10
    2ea8:	4e0a0501 	cfsh32mi	mvfx0, mvfx10, #1
    2eac:	21030105 	tstcs	r3, r5, lsl #2
    2eb0:	06040520 	streq	r0, [r4], -r0, lsr #10
    2eb4:	3d2e5c03 	stccc	12, cr5, [lr, #-12]!
    2eb8:	05011703 	streq	r1, [r1, #-1795]	; 0xfffff8fd
    2ebc:	2e6e0302 	cdpcs	3, 6, cr0, cr14, cr2, {0}
    2ec0:	032e3c01 			; <UNDEFINED> instruction: 0x032e3c01
    2ec4:	0b05010b 	bleq	1432f8 <__ccfg+0x123350>
    2ec8:	17050106 	strne	r0, [r5, -r6, lsl #2]
    2ecc:	200b054a 	andcs	r0, fp, sl, asr #10
    2ed0:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    2ed4:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    2ed8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2edc:	054e0604 	strbeq	r0, [lr, #-1540]	; 0xfffff9fc
    2ee0:	10055002 	andne	r5, r5, r2
    2ee4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2ee8:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    2eec:	03050106 	movweq	r0, #20742	; 0x5106
    2ef0:	1a052106 	bne	14b310 <__ccfg+0x12b368>
    2ef4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2ef8:	1b054b06 	blne	155b18 <__ccfg+0x135b70>
    2efc:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    2f00:	02051f2f 	andeq	r1, r5, #47, 30	; 0xbc
    2f04:	05142106 	ldreq	r2, [r4, #-262]	; 0xfffffefa
    2f08:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    2f0c:	0101000c 	tsteq	r1, ip
    2f10:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    2f14:	00000002 	andeq	r0, r0, r2
    2f18:	06870300 	streq	r0, [r7], r0, lsl #6
    2f1c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2f20:	0e064405 	cdpeq	4, 0, cr4, cr6, cr5, {0}
    2f24:	06020520 	streq	r0, [r2], -r0, lsr #10
    2f28:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    2f2c:	03440501 	movteq	r0, #17665	; 0x4501
    2f30:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    2f34:	4a090306 	bmi	243b54 <__ccfg+0x223bac>
    2f38:	01060505 	tsteq	r6, r5, lsl #10
    2f3c:	2f060305 	svccs	0x00060305
    2f40:	06160567 	ldreq	r0, [r6], -r7, ror #10
    2f44:	06030501 	streq	r0, [r3], -r1, lsl #10
    2f48:	06160567 	ldreq	r0, [r6], -r7, ror #10
    2f4c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2f50:	0601055b 			; <UNDEFINED> instruction: 0x0601055b
    2f54:	00020213 	andeq	r0, r2, r3, lsl r2
    2f58:	4b050101 	blmi	143364 <__ccfg+0x1233bc>
    2f5c:	00020500 	andeq	r0, r2, r0, lsl #10
    2f60:	03000000 	movweq	r0, #0
    2f64:	05010699 	streq	r0, [r1, #-1689]	; 0xfffff967
    2f68:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    2f6c:	7a03064b 	bvc	c48a0 <__ccfg+0xa48f8>
    2f70:	261a0501 	ldrcs	r0, [sl], -r1, lsl #10
    2f74:	7a034b05 	bvc	d5b90 <__ccfg+0xb5be8>
    2f78:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2f7c:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    2f80:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2f84:	672f0603 	strvs	r0, [pc, -r3, lsl #12]!
    2f88:	01061605 	tsteq	r6, r5, lsl #12
    2f8c:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    2f90:	01061605 	tsteq	r6, r5, lsl #12
    2f94:	5a060205 	bpl	1837b0 <__ccfg+0x163808>
    2f98:	13060105 	movwne	r0, #24837	; 0x6105
    2f9c:	01000202 	tsteq	r0, r2, lsl #4
    2fa0:	00310501 	eorseq	r0, r1, r1, lsl #10
    2fa4:	00000205 	andeq	r0, r0, r5, lsl #4
    2fa8:	aa030000 	bge	c2fb0 <__ccfg+0xa3008>
    2fac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2fb0:	06050516 			; <UNDEFINED> instruction: 0x06050516
    2fb4:	06030501 	streq	r0, [r3], -r1, lsl #10
    2fb8:	06010521 	streq	r0, [r1], -r1, lsr #10
    2fbc:	0001023d 	andeq	r0, r1, sp, lsr r2
    2fc0:	48050101 	stmdami	r5, {r0, r8}
    2fc4:	00020500 	andeq	r0, r2, r0, lsl #10
    2fc8:	03000000 	movweq	r0, #0
    2fcc:	050106d1 	streq	r0, [r1, #-1745]	; 0xfffff92f
    2fd0:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    2fd4:	02051c48 	andeq	r1, r5, #72, 24	; 0x4800
    2fd8:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    2fdc:	200e0648 	andcs	r0, lr, r8, asr #12
    2fe0:	20240205 	eorcs	r0, r4, r5, lsl #4
    2fe4:	134a4a06 	movtne	r4, #43526	; 0xaa06
    2fe8:	13060105 	movwne	r0, #24837	; 0x6105
    2fec:	022d1305 	eoreq	r1, sp, #335544320	; 0x14000000
    2ff0:	01010006 	tsteq	r1, r6
    2ff4:	05004605 	streq	r4, [r0, #-1541]	; 0xfffff9fb
    2ff8:	00000002 	andeq	r0, r0, r2
    2ffc:	06b20300 	ldrteq	r0, [r2], r0, lsl #6
    3000:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3004:	0d064605 	stceq	6, cr4, [r6, #-20]	; 0xffffffec
    3008:	05250505 	streq	r0, [r5, #-1285]!	; 0xfffffafb
    300c:	052f0603 	streq	r0, [pc, #-1539]!	; 2a11 <NOROM_DDI32RegWrite+0x7d>
    3010:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3014:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    3018:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    301c:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    3020:	01060705 	tsteq	r6, r5, lsl #14
    3024:	30060405 	andcc	r0, r6, r5, lsl #8
    3028:	01060b05 	tsteq	r6, r5, lsl #22
    302c:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    3030:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    3034:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3038:	20090301 	andcs	r0, r9, r1, lsl #6
    303c:	03060305 	movweq	r0, #25349	; 0x6305
    3040:	0605207a 			; <UNDEFINED> instruction: 0x0605207a
    3044:	03050106 	movweq	r0, #20742	; 0x5106
    3048:	13053006 	movwne	r3, #20486	; 0x5006
    304c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3050:	06014c06 	streq	r4, [r1], -r6, lsl #24
    3054:	4a4a062e 	bmi	1284914 <__ccfg+0x126496c>
    3058:	06370513 			; <UNDEFINED> instruction: 0x06370513
    305c:	21010501 	tstcs	r1, r1, lsl #10
    3060:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    3064:	3c71030b 	ldclcc	3, cr0, [r1], #-44	; 0xffffffd4
    3068:	01000b02 	tsteq	r0, r2, lsl #22
    306c:	003d0501 	eorseq	r0, sp, r1, lsl #10
    3070:	00000205 	andeq	r0, r0, r5, lsl #4
    3074:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    3078:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    307c:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    3080:	02051c06 	andeq	r1, r5, #1536	; 0x600
    3084:	4a062024 	bmi	18b11c <__ccfg+0x16b174>
    3088:	2505134a 	strcs	r1, [r5, #-842]	; 0xfffffcb6
    308c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3090:	43056706 	movwmi	r6, #22278	; 0x5706
    3094:	22050106 	andcs	r0, r5, #-2147483647	; 0x80000001
    3098:	2e43052e 	cdpcs	5, 4, cr0, cr3, cr14, {1}
    309c:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    30a0:	05024b01 	streq	r4, [r2, #-2817]	; 0xfffff4ff
    30a4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    30a8:	0205003d 	andeq	r0, r5, #61	; 0x3d
    30ac:	00000000 	andeq	r0, r0, r0
    30b0:	0106e203 	tsteq	r6, r3, lsl #4
    30b4:	01160205 	tsteq	r6, r5, lsl #4
    30b8:	1c063d05 	stcne	13, cr3, [r6], {5}
    30bc:	20240205 	eorcs	r0, r4, r5, lsl #4
    30c0:	134a4a06 	movtne	r4, #43526	; 0xaa06
    30c4:	01062205 	tsteq	r6, r5, lsl #4
    30c8:	02670105 	rsbeq	r0, r7, #1073741825	; 0x40000001
    30cc:	01010005 	tsteq	r1, r5
    30d0:	05004005 	streq	r4, [r0, #-5]
    30d4:	00000002 	andeq	r0, r0, r2
    30d8:	06ea0300 	strbteq	r0, [sl], r0, lsl #6
    30dc:	16020501 	strne	r0, [r2], -r1, lsl #10
    30e0:	06400514 			; <UNDEFINED> instruction: 0x06400514
    30e4:	20017a03 	andcs	r7, r1, r3, lsl #20
    30e8:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    30ec:	2e7a0340 	cdpcs	3, 7, cr0, cr10, cr0, {2}
    30f0:	05260c05 	streq	r0, [r6, #-3077]!	; 0xfffff3fb
    30f4:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    30f8:	05843306 	streq	r3, [r4, #774]	; 0x306
    30fc:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3100:	11053102 	tstne	r5, r2, lsl #2
    3104:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
    3108:	1a051321 	bne	147d94 <__ccfg+0x127dec>
    310c:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    3110:	053d3e06 	ldreq	r3, [sp, #-3590]!	; 0xfffff1fa
    3114:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    3118:	02022101 	andeq	r2, r2, #1073741824	; 0x40000000
    311c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3120:	0205003e 	andeq	r0, r5, #62	; 0x3e
    3124:	00000000 	andeq	r0, r0, r0
    3128:	0106fe03 	tsteq	r6, r3, lsl #28	; <UNPREDICTABLE>
    312c:	02160205 	andseq	r0, r6, #1342177280	; 0x50000000
    3130:	01010003 	tsteq	r1, r3
    3134:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    3138:	00000002 	andeq	r0, r0, r2
    313c:	07850300 	streq	r0, [r5, r0, lsl #6]
    3140:	16020501 	strne	r0, [r2], -r1, lsl #10
    3144:	06450514 			; <UNDEFINED> instruction: 0x06450514
    3148:	2e017a03 	vmlacs.f32	s14, s2, s6
    314c:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3150:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    3154:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3158:	052f0604 	streq	r0, [pc, #-1540]!	; 2b5c <NOROM_DDI32RegWrite+0x1c8>
    315c:	062f0603 	strteq	r0, [pc], -r3, lsl #12
    3160:	2e06012e 	adfcssp	f0, f6, #0.5
    3164:	033c4a06 	teqeq	ip, #24576	; 0x6000
    3168:	0c05011d 	stfeqs	f0, [r5], {29}
    316c:	06050106 	streq	r0, [r5], -r6, lsl #2
    3170:	350a052e 	strcc	r0, [sl, #-1326]	; 0xfffffad2
    3174:	05270105 	streq	r0, [r7, #-261]!	; 0xfffffefb
    3178:	73030604 	movwvc	r0, #13828	; 0x3604
    317c:	06200520 	strteq	r0, [r0], -r0, lsr #10
    3180:	31040501 	tstcc	r4, r1, lsl #10
    3184:	051d1205 	ldreq	r1, [sp, #-517]	; 0xfffffdfb
    3188:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    318c:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    3190:	2f3d0604 	svccs	0x003d0604
    3194:	01060b05 	tsteq	r6, r5, lsl #22
    3198:	41060205 	tstmi	r6, r5, lsl #4
    319c:	01060b05 	tsteq	r6, r5, lsl #22
    31a0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    31a4:	052f0603 	streq	r0, [pc, #-1539]!	; 2ba9 <NOROM_DDI32RegWrite+0x215>
    31a8:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
    31ac:	01010009 	tsteq	r1, r9
    31b0:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    31b4:	00000002 	andeq	r0, r0, r2
    31b8:	09860300 	stmibeq	r6, {r8, r9}
    31bc:	18020501 	stmdane	r2, {r0, r8, sl}
    31c0:	06050514 			; <UNDEFINED> instruction: 0x06050514
    31c4:	03480501 	movteq	r0, #34049	; 0x8501
    31c8:	05202078 	streq	r2, [r0, #-120]!	; 0xffffff88
    31cc:	31052805 	tstcc	r5, r5, lsl #16
    31d0:	20250520 	eorcs	r0, r5, r0, lsr #10
    31d4:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    31d8:	02053506 	andeq	r3, r5, #25165824	; 0x1800000
    31dc:	11052906 	tstne	r5, r6, lsl #18
    31e0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    31e4:	11052f06 	tstne	r5, r6, lsl #30
    31e8:	21050106 	tstcs	r5, r6, lsl #2
    31ec:	1e110522 	cfmul64ne	mvdx0, mvdx1, mvdx2
    31f0:	30060205 	andcc	r0, r6, r5, lsl #4
    31f4:	01062105 	tsteq	r6, r5, lsl #2
    31f8:	052e1005 	streq	r1, [lr, #-5]!
    31fc:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3200:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3204:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3208:	05343d02 	ldreq	r3, [r4, #-3330]!	; 0xfffff2fe
    320c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3210:	0101000b 	tsteq	r1, fp
    3214:	05004405 	streq	r4, [r0, #-1029]	; 0xfffffbfb
    3218:	00000002 	andeq	r0, r0, r2
    321c:	09a00300 	stmibeq	r0!, {r8, r9}
    3220:	17020501 	strne	r0, [r2, -r1, lsl #10]
    3224:	01141313 	tsteq	r4, r3, lsl r3
    3228:	03064405 	movweq	r4, #25605	; 0x6405
    322c:	02050177 	andeq	r0, r5, #-1073741795	; 0xc000001d
    3230:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    3234:	20770344 	rsbscs	r0, r7, r4, asr #6
    3238:	09030205 	stmdbeq	r3, {r0, r2, r9}
    323c:	4a06204a 	bmi	18b36c <__ccfg+0x16b3c4>
    3240:	03060305 	movweq	r0, #25349	; 0x6305
    3244:	0e05200d 	cdpeq	0, 0, cr2, cr5, cr13, {0}
    3248:	0603054b 	streq	r0, [r3], -fp, asr #10
    324c:	060f0547 	streq	r0, [pc], -r7, asr #10
    3250:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    3254:	03062805 	movweq	r2, #26629	; 0x6805
    3258:	1e052078 	mcrne	0, 0, r2, cr5, cr8, {3}
    325c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3260:	030a0501 	movweq	r0, #42241	; 0xa501
    3264:	01052e16 	tsteq	r5, r6, lsl lr
    3268:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    326c:	67030603 	strvs	r0, [r3, -r3, lsl #12]
    3270:	2e58013c 	mrccs	1, 2, r0, cr8, cr12, {1}
    3274:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3278:	74060501 	strvc	r0, [r6], #-1281	; 0xfffffaff
    327c:	42060205 	andmi	r0, r6, #1342177280	; 0x50000000
    3280:	01060505 	tsteq	r6, r5, lsl #10
    3284:	36060205 	strcc	r0, [r6], -r5, lsl #4
    3288:	01060c05 	tsteq	r6, r5, lsl #24
    328c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3290:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    3294:	06020520 	streq	r0, [r2], -r0, lsr #10
    3298:	060b0523 	streq	r0, [fp], -r3, lsr #10
    329c:	4a050501 	bmi	1446a8 <__ccfg+0x124700>
    32a0:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    32a4:	06090568 	streq	r0, [r9], -r8, ror #10
    32a8:	000a0201 	andeq	r0, sl, r1, lsl #4
    32ac:	3e050101 	adfccs	f0, f5, f1
    32b0:	00020500 	andeq	r0, r2, r0, lsl #10
    32b4:	03000000 	movweq	r0, #0
    32b8:	050109d1 	streq	r0, [r1, #-2513]	; 0xfffff62f
    32bc:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    32c0:	063e0501 	ldrteq	r0, [lr], -r1, lsl #10
    32c4:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    32c8:	06202802 	strteq	r2, [r0], -r2, lsl #16
    32cc:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    32d0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    32d4:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    32d8:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    32dc:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    32e0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    32e4:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    32e8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    32ec:	2f2f0602 	svccs	0x002f0602
    32f0:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    32f4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    32f8:	0a052101 	beq	14b704 <__ccfg+0x12b75c>
    32fc:	02207903 	eoreq	r7, r0, #49152	; 0xc000
    3300:	01010009 	tsteq	r1, r9
    3304:	05003405 	streq	r3, [r0, #-1029]	; 0xfffffbfb
    3308:	00000002 	andeq	r0, r0, r2
    330c:	09e80300 	stmibeq	r8!, {r8, r9}^
    3310:	16020501 	strne	r0, [r2], -r1, lsl #10
    3314:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3318:	79030634 	stmdbvc	r3, {r2, r4, r5, r9, sl}
    331c:	27020520 	strcs	r0, [r2, -r0, lsr #10]
    3320:	4a4a0620 	bmi	1284ba8 <__ccfg+0x1264c00>
    3324:	06050514 			; <UNDEFINED> instruction: 0x06050514
    3328:	06020501 	streq	r0, [r2], -r1, lsl #10
    332c:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    3330:	06020501 	streq	r0, [r2], -r1, lsl #10
    3334:	06050521 	streq	r0, [r5], -r1, lsr #10
    3338:	06020501 	streq	r0, [r2], -r1, lsl #10
    333c:	060a0523 	streq	r0, [sl], -r3, lsr #10
    3340:	30090510 	andcc	r0, r9, r0, lsl r5
    3344:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    3348:	01010007 	tsteq	r1, r7
    334c:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    3350:	00000002 	andeq	r0, r0, r2
    3354:	09f90300 	ldmibeq	r9!, {r8, r9}^
    3358:	16020501 	strne	r0, [r2], -r1, lsl #10
    335c:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    3360:	05260205 	streq	r0, [r6, #-517]!	; 0xfffffdfb
    3364:	02052c0c 	andeq	r2, r5, #12, 24	; 0xc00
    3368:	06013006 	streq	r3, [r1], -r6
    336c:	2e064a4a 	vmlscs.f32	s8, s12, s20
    3370:	0105134a 	tsteq	r5, sl, asr #6
    3374:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    3378:	0006022c 	andeq	r0, r6, ip, lsr #4
    337c:	32050101 	andcc	r0, r5, #1073741824	; 0x40000000
    3380:	00020500 	andeq	r0, r2, r0, lsl #10
    3384:	03000000 	movweq	r0, #0
    3388:	05010a84 	streq	r0, [r1, #-2692]	; 0xfffff57c
    338c:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3390:	051c0632 	ldreq	r0, [ip, #-1586]	; 0xfffff9ce
    3394:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3398:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    339c:	cc03060a 	stcgt	6, cr0, [r3], {10}
    33a0:	09050177 	stmdbeq	r5, {r0, r1, r2, r4, r5, r6, r8}
    33a4:	2008b403 	andcs	fp, r8, r3, lsl #8
    33a8:	03060205 	movweq	r0, #25093	; 0x6205
    33ac:	133c77c9 	teqne	ip, #52690944	; 0x3240000
    33b0:	13030514 	movwne	r0, #13588	; 0x3514
    33b4:	01060505 	tsteq	r6, r5, lsl #10
    33b8:	21060305 	tstcs	r6, r5, lsl #6
    33bc:	01060605 	tsteq	r6, r5, lsl #12
    33c0:	31060305 	tstcc	r6, r5, lsl #6
    33c4:	05291105 	streq	r1, [r9, #-261]!	; 0xfffffefb
    33c8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    33cc:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    33d0:	05130605 	ldreq	r0, [r3, #-1541]	; 0xfffff9fb
    33d4:	08b40301 	ldmeq	r4!, {r0, r8, r9}
    33d8:	00080220 	andeq	r0, r8, r0, lsr #4
    33dc:	28050101 	stmdacs	r5, {r0, r8}
    33e0:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    33e4:	03000013 	movweq	r0, #19
    33e8:	05010a8c 	streq	r0, [r1, #-2700]	; 0xfffff574
    33ec:	011a0301 	tsteq	sl, r1, lsl #6
    33f0:	01000102 	tsteq	r0, r2, lsl #2
    33f4:	00012301 	andeq	r2, r1, r1, lsl #6
    33f8:	89000300 	stmdbhi	r0, {r8, r9}
    33fc:	02000000 	andeq	r0, r0, #0
    3400:	0d0efb01 	vstreq	d15, [lr, #-4]
    3404:	01010100 	mrseq	r0, (UNDEF: 17)
    3408:	00000001 	andeq	r0, r0, r1
    340c:	01000001 	tsteq	r0, r1
    3410:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 335c <__exidx_end+0x724>
    3414:	616d2f65 	cmnvs	sp, r5, ror #30
    3418:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    341c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3420:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3424:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3428:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    342c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3430:	502f534f 	eorpl	r5, pc, pc, asr #6
    3434:	534f6369 	movtpl	r6, #62313	; 0xf369
    3438:	3143432f 	cmpcc	r3, pc, lsr #6
    343c:	00585833 	subseq	r5, r8, r3, lsr r8
    3440:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3444:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3448:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    344c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3450:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3454:	61652d65 	cmnvs	r5, r5, ror #26
    3458:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    345c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3460:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3464:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3468:	74730000 	ldrbtvc	r0, [r3], #-0
    346c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    3470:	63675f70 	cmnvs	r7, #112, 30	; 0x1c0
    3474:	00632e63 	rsbeq	r2, r3, r3, ror #28
    3478:	73000001 	movwvc	r0, #1
    347c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3480:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3484:	00000002 	andeq	r0, r0, r2
    3488:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    348c:	00134602 	andseq	r4, r3, r2, lsl #12
    3490:	02840300 	addeq	r0, r4, #0, 6
    3494:	16050501 	strne	r0, [r5], -r1, lsl #10
    3498:	100a0514 	andne	r0, sl, r4, lsl r5
    349c:	01000102 	tsteq	r0, r2, lsl #2
    34a0:	00010501 	andeq	r0, r1, r1, lsl #10
    34a4:	13480205 	movtne	r0, #33285	; 0x8205
    34a8:	96030000 	strls	r0, [r3], -r0
    34ac:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    34b0:	0a051416 	beq	148510 <__ccfg+0x128568>
    34b4:	00010210 	andeq	r0, r1, r0, lsl r2
    34b8:	01050101 	tsteq	r5, r1, lsl #2
    34bc:	4a020500 	bmi	848c4 <__ccfg+0x6491c>
    34c0:	03000013 	movweq	r0, #19
    34c4:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    34c8:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    34cc:	0102100a 	tsteq	r2, sl
    34d0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34d4:	02050001 	andeq	r0, r5, #1
    34d8:	0000134c 	andeq	r1, r0, ip, asr #6
    34dc:	0101d203 	tsteq	r1, r3, lsl #4
    34e0:	17130505 	ldrne	r0, [r3, -r5, lsl #10]
    34e4:	03060105 	movweq	r0, #24837	; 0x6105
    34e8:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    34ec:	13330626 	teqne	r3, #39845888	; 0x2600000
    34f0:	1f060e05 	svcne	0x00060e05
    34f4:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    34f8:	0520061d 	streq	r0, [r0, #-1565]!	; 0xfffff9e3
    34fc:	06010605 	streq	r0, [r1], -r5, lsl #12
    3500:	03040536 	movweq	r0, #17718	; 0x4536
    3504:	0505900d 	streq	r9, [r5, #-13]
    3508:	06010533 			; <UNDEFINED> instruction: 0x06010533
    350c:	0609052f 	streq	r0, [r9], -pc, lsr #10
    3510:	05206703 	streq	r6, [r0, #-1795]!	; 0xfffff8fd
    3514:	02010616 	andeq	r0, r1, #23068672	; 0x1600000
    3518:	01010010 	tsteq	r1, r0, lsl r0
    351c:	00000185 	andeq	r0, r0, r5, lsl #3
    3520:	017f0003 	cmneq	pc, r3
    3524:	01020000 	mrseq	r0, (UNDEF: 2)
    3528:	000d0efb 	strdeq	r0, [sp], -fp
    352c:	01010101 	tsteq	r1, r1, lsl #2
    3530:	01000000 	mrseq	r0, (UNDEF: 0)
    3534:	2f010000 	svccs	0x00010000
    3538:	2f727375 	svccs	0x00727375
    353c:	2f62696c 	svccs	0x0062696c
    3540:	2f636367 	svccs	0x00636367
    3544:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3548:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    354c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3550:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3554:	2f312e32 	svccs	0x00312e32
    3558:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    355c:	00656475 	rsbeq	r6, r5, r5, ror r4
    3560:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 34ac <__exidx_end+0x874>
    3564:	616d2f65 	cmnvs	sp, r5, ror #30
    3568:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    356c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3570:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3574:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3578:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    357c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3580:	502f534f 	eorpl	r5, pc, pc, asr #6
    3584:	534f6369 	movtpl	r6, #62313	; 0xf369
    3588:	3143432f 	cmpcc	r3, pc, lsr #6
    358c:	2f585833 	svccs	0x00585833
    3590:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3594:	41575858 	cmpmi	r7, r8, asr r8
    3598:	692f4552 	stmdbvs	pc!, {r1, r4, r6, r8, sl, lr}	; <UNPREDICTABLE>
    359c:	2f00636e 	svccs	0x0000636e
    35a0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    35a4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    35a8:	2f6e6974 	svccs	0x006e6974
    35ac:	6b736544 	blvs	1cdcac4 <__ccfg+0x1cbcb1c>
    35b0:	2f706f74 	svccs	0x00706f74
    35b4:	4f534c4f 	svcmi	0x00534c4f
    35b8:	2f54454e 	svccs	0x0054454e
    35bc:	4f434950 	svcmi	0x00434950
    35c0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    35c4:	2f534f63 	svccs	0x00534f63
    35c8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    35cc:	2f005858 	svccs	0x00005858
    35d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    35d4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    35d8:	2f6e6974 	svccs	0x006e6974
    35dc:	6b736544 	blvs	1cdcaf4 <__ccfg+0x1cbcb4c>
    35e0:	2f706f74 	svccs	0x00706f74
    35e4:	4f534c4f 	svcmi	0x00534c4f
    35e8:	2f54454e 	svccs	0x0054454e
    35ec:	4f434950 	svcmi	0x00434950
    35f0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    35f4:	00534f63 	subseq	r4, r3, r3, ror #30
    35f8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3544 <__exidx_end+0x90c>
    35fc:	616d2f65 	cmnvs	sp, r5, ror #30
    3600:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3604:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3608:	706f746b 	rsbvc	r7, pc, fp, ror #8
    360c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3610:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3614:	4349502f 	movtmi	r5, #36911	; 0x902f
    3618:	502f534f 	eorpl	r5, pc, pc, asr #6
    361c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3620:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3624:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3628:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    362c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3630:	00010068 	andeq	r0, r1, r8, rrx
    3634:	5f776800 	svcpl	0x00776800
    3638:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    363c:	6d69735f 	stclvs	3, cr7, [r9, #-380]!	; 0xfffffe84
    3640:	5f656c70 	svcpl	0x00656c70
    3644:	75727473 	ldrbvc	r7, [r2, #-1139]!	; 0xfffffb8d
    3648:	682e7463 	stmdavs	lr!, {r0, r1, r5, r6, sl, ip, sp, lr}
    364c:	00000200 	andeq	r0, r0, r0, lsl #4
    3650:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3654:	0300682e 	movweq	r6, #2094	; 0x82e
    3658:	616d0000 	cmnvs	sp, r0
    365c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3660:	00000300 	andeq	r0, r0, r0, lsl #6
    3664:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3668:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    366c:	0300682e 	movweq	r6, #2094	; 0x82e
    3670:	75620000 	strbvc	r0, [r2, #-0]!
    3674:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3678:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    367c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3680:	73000003 	movwvc	r0, #3
    3684:	6f697379 	svcvs	0x00697379
    3688:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    368c:	656b0000 	strbvs	r0, [fp, #-0]!
    3690:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3694:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3698:	63630000 	cmnvs	r3, #0
    369c:	632e6766 			; <UNDEFINED> instruction: 0x632e6766
    36a0:	00000300 	andeq	r0, r0, r0, lsl #6
    36a4:	00029900 	andeq	r9, r2, r0, lsl #18
    36a8:	c0000300 	andgt	r0, r0, r0, lsl #6
    36ac:	02000001 	andeq	r0, r0, #1
    36b0:	0d0efb01 	vstreq	d15, [lr, #-4]
    36b4:	01010100 	mrseq	r0, (UNDEF: 17)
    36b8:	00000001 	andeq	r0, r0, r1
    36bc:	01000001 	tsteq	r0, r1
    36c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 360c <__exidx_end+0x9d4>
    36c4:	616d2f65 	cmnvs	sp, r5, ror #30
    36c8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    36cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    36d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    36d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    36d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    36dc:	4349502f 	movtmi	r5, #36911	; 0x902f
    36e0:	502f534f 	eorpl	r5, pc, pc, asr #6
    36e4:	534f6369 	movtpl	r6, #62313	; 0xf369
    36e8:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    36ec:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    36f0:	6f736e65 	svcvs	0x00736e65
    36f4:	2f007372 	svccs	0x00007372
    36f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    36fc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3700:	2f6e6974 	svccs	0x006e6974
    3704:	6b736544 	blvs	1cdcc1c <__ccfg+0x1cbcc74>
    3708:	2f706f74 	svccs	0x00706f74
    370c:	4f534c4f 	svcmi	0x00534c4f
    3710:	2f54454e 	svccs	0x0054454e
    3714:	4f434950 	svcmi	0x00434950
    3718:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    371c:	2f534f63 	svccs	0x00534f63
    3720:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3724:	2f005858 	svccs	0x00005858
    3728:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    372c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3730:	2f6e6974 	svccs	0x006e6974
    3734:	6b736544 	blvs	1cdcc4c <__ccfg+0x1cbcca4>
    3738:	2f706f74 	svccs	0x00706f74
    373c:	4f534c4f 	svcmi	0x00534c4f
    3740:	2f54454e 	svccs	0x0054454e
    3744:	4f434950 	svcmi	0x00434950
    3748:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    374c:	2f534f63 	svccs	0x00534f63
    3750:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3754:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3758:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    375c:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3760:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    3764:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3768:	0062696c 	rsbeq	r6, r2, ip, ror #18
    376c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3770:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3774:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3778:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    377c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3780:	61652d65 	cmnvs	r5, r5, ror #26
    3784:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3788:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    378c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3790:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    3794:	6f682f00 	svcvs	0x00682f00
    3798:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 35ec <__exidx_end+0x9b4>
    379c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37a4:	6f746b73 	svcvs	0x00746b73
    37a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37b4:	2f534f43 	svccs	0x00534f43
    37b8:	4f636950 	svcmi	0x00636950
    37bc:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    37c0:	2f656d6f 	svccs	0x00656d6f
    37c4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    37c8:	442f6e69 	strtmi	r6, [pc], #-3689	; 37d0 <__exidx_end+0xb98>
    37cc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    37d0:	4f2f706f 	svcmi	0x002f706f
    37d4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    37d8:	502f5445 	eorpl	r5, pc, r5, asr #8
    37dc:	534f4349 	movtpl	r4, #62281	; 0xf349
    37e0:	6369502f 	cmnvs	r9, #47	; 0x2f
    37e4:	6b2f534f 	blvs	bd8528 <__ccfg+0xbb8580>
    37e8:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    37ec:	7000006c 	andvc	r0, r0, ip, rrx
    37f0:	735f6e69 	cmpvc	pc, #1680	; 0x690
    37f4:	6f736e65 	svcvs	0x00736e65
    37f8:	00632e72 	rsbeq	r2, r3, r2, ror lr
    37fc:	63000001 	movwvs	r0, #1
    3800:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
    3804:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
    3808:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    380c:	70670000 	rsbvc	r0, r7, r0
    3810:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3814:	00000300 	andeq	r0, r0, r0, lsl #6
    3818:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    381c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3820:	00000400 	andeq	r0, r0, r0, lsl #8
    3824:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3828:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    382c:	616d0000 	cmnvs	sp, r0
    3830:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3834:	00000200 	andeq	r0, r0, r0, lsl #4
    3838:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    383c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3840:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3844:	75620000 	strbvc	r0, [r2, #-0]!
    3848:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    384c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3850:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3854:	73000002 	movwvc	r0, #2
    3858:	6f697379 	svcvs	0x00697379
    385c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3860:	656b0000 	strbvs	r0, [fp, #-0]!
    3864:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3868:	0600682e 	streq	r6, [r0], -lr, lsr #16
    386c:	05000000 	streq	r0, [r0, #-0]
    3870:	02050019 	andeq	r0, r5, #25
    3874:	00000000 	andeq	r0, r0, r0
    3878:	05010e03 	streq	r0, [r1, #-3587]	; 0xfffff1fd
    387c:	0101011b 	tsteq	r1, fp, lsl r1
    3880:	01060105 	tsteq	r6, r5, lsl #2
    3884:	01000102 	tsteq	r0, r2, lsl #2
    3888:	003f0501 	eorseq	r0, pc, r1, lsl #10
    388c:	00000205 	andeq	r0, r0, r5, lsl #4
    3890:	10030000 	andne	r0, r3, r0
    3894:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    3898:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    389c:	7a03063f 	bvc	c51a0 <__ccfg+0xa51f8>
    38a0:	05052001 	streq	r2, [r5, #-1]
    38a4:	06030526 	streq	r0, [r3], -r6, lsr #10
    38a8:	06060522 	streq	r0, [r6], -r2, lsr #10
    38ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    38b0:	0302044d 	movweq	r0, #9293	; 0x244d
    38b4:	040100c1 	streq	r0, [r1], #-193	; 0xffffff3f
    38b8:	20400301 	subcs	r0, r0, r1, lsl #6
    38bc:	02044b3d 	andeq	r4, r4, #62464	; 0xf400
    38c0:	04013303 	streq	r3, [r1], #-771	; 0xfffffcfd
    38c4:	204e0301 	subcs	r0, lr, r1, lsl #6
    38c8:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    38cc:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    38d0:	030f0503 	movweq	r0, #62723	; 0xf503
    38d4:	042e018b 	strteq	r0, [lr], #-395	; 0xfffffe75
    38d8:	03070501 	movweq	r0, #29953	; 0x7501
    38dc:	05207ef5 	streq	r7, [r0, #-3829]!	; 0xfffff10b
    38e0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    38e4:	0305130b 	movweq	r1, #21259	; 0x530b
    38e8:	05030413 	streq	r0, [r3, #-1043]	; 0xfffffbed
    38ec:	01830329 	orreq	r0, r3, r9, lsr #6
    38f0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    38f4:	0b050104 	bleq	143d0c <__ccfg+0x123d64>
    38f8:	7ef80306 	cdpvc	3, 15, cr0, cr8, cr6, {0}
    38fc:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3900:	0188030f 	orreq	r0, r8, pc, lsl #6
    3904:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3908:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    390c:	05030420 	streq	r0, [r3, #-1056]	; 0xfffffbe0
    3910:	01880333 	orreq	r0, r8, r3, lsr r3
    3914:	2042052e 	subcs	r0, r2, lr, lsr #10
    3918:	0b050104 	bleq	143d30 <__ccfg+0x123d88>
    391c:	2e7ef803 	cdpcs	8, 7, cr15, cr14, cr3, {0}
    3920:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3924:	0805201f 	stmdaeq	r5, {r0, r1, r2, r3, r4, sp}
    3928:	1e02052e 	cfsh32ne	mvfx0, mvfx2, #30
    392c:	05220805 	streq	r0, [r2, #-2053]!	; 0xfffff7fb
    3930:	051f063a 	ldreq	r0, [pc, #-1594]	; 32fe <__exidx_end+0x6c6>
    3934:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    3938:	01051106 	tsteq	r5, r6, lsl #2
    393c:	00060223 	andeq	r0, r6, r3, lsr #4
    3940:	033c0101 	teqeq	ip, #1073741824	; 0x40000000
    3944:	00030000 	andeq	r0, r3, r0
    3948:	000001a9 	andeq	r0, r0, r9, lsr #3
    394c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3950:	0101000d 	tsteq	r1, sp
    3954:	00000101 	andeq	r0, r0, r1, lsl #2
    3958:	00000100 	andeq	r0, r0, r0, lsl #2
    395c:	6f682f01 	svcvs	0x00682f01
    3960:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 37b4 <__exidx_end+0xb7c>
    3964:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3968:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    396c:	6f746b73 	svcvs	0x00746b73
    3970:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3974:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3978:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    397c:	2f534f43 	svccs	0x00534f43
    3980:	4f636950 	svcmi	0x00636950
    3984:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3988:	2f736269 	svccs	0x00736269
    398c:	2f004f49 	svccs	0x00004f49
    3990:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3994:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3998:	2f6e6974 	svccs	0x006e6974
    399c:	6b736544 	blvs	1cdceb4 <__ccfg+0x1cbcf0c>
    39a0:	2f706f74 	svccs	0x00706f74
    39a4:	4f534c4f 	svcmi	0x00534c4f
    39a8:	2f54454e 	svccs	0x0054454e
    39ac:	4f434950 	svcmi	0x00434950
    39b0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    39b4:	2f534f63 	svccs	0x00534f63
    39b8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    39bc:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    39c0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    39c4:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    39c8:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    39cc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    39d0:	0062696c 	rsbeq	r6, r2, ip, ror #18
    39d4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    39d8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    39dc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    39e0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    39e4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    39e8:	61652d65 	cmnvs	r5, r5, ror #26
    39ec:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    39f0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    39f4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    39f8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    39fc:	6f682f00 	svcvs	0x00682f00
    3a00:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3854 <__exidx_end+0xc1c>
    3a04:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3a08:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3a0c:	6f746b73 	svcvs	0x00746b73
    3a10:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3a14:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3a18:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3a1c:	2f534f43 	svccs	0x00534f43
    3a20:	4f636950 	svcmi	0x00636950
    3a24:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3a28:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3a2c:	6f682f00 	svcvs	0x00682f00
    3a30:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3884 <__exidx_end+0xc4c>
    3a34:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3a38:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3a3c:	6f746b73 	svcvs	0x00746b73
    3a40:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3a44:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3a48:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3a4c:	2f534f43 	svccs	0x00534f43
    3a50:	4f636950 	svcmi	0x00636950
    3a54:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    3a58:	2f656d6f 	svccs	0x00656d6f
    3a5c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3a60:	442f6e69 	strtmi	r6, [pc], #-3689	; 3a68 <__exidx_end+0xe30>
    3a64:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3a68:	4f2f706f 	svcmi	0x002f706f
    3a6c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3a70:	502f5445 	eorpl	r5, pc, r5, asr #8
    3a74:	534f4349 	movtpl	r4, #62281	; 0xf349
    3a78:	6369502f 	cmnvs	r9, #47	; 0x2f
    3a7c:	6b2f534f 	blvs	bd87c0 <__ccfg+0xbb8818>
    3a80:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3a84:	6200006c 	andvs	r0, r0, #108	; 0x6c
    3a88:	6f747475 	svcvs	0x00747475
    3a8c:	632e736e 			; <UNDEFINED> instruction: 0x632e736e
    3a90:	00000100 	andeq	r0, r0, r0, lsl #2
    3a94:	6f697067 	svcvs	0x00697067
    3a98:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3a9c:	74730000 	ldrbtvc	r0, [r3], #-0
    3aa0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3aa4:	0300682e 	movweq	r6, #2094	; 0x82e
    3aa8:	72610000 	rsbvc	r0, r1, #0
    3aac:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3ab0:	00000400 	andeq	r0, r0, r0, lsl #8
    3ab4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3ab8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3abc:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3ac0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3ac4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3ac8:	00000400 	andeq	r0, r0, r0, lsl #8
    3acc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3ad0:	5f736e6f 	svcpl	0x00736e6f
    3ad4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3ad8:	00040068 	andeq	r0, r4, r8, rrx
    3adc:	73797300 	cmnvc	r9, #0, 6
    3ae0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3ae4:	00000500 	andeq	r0, r0, r0, lsl #10
    3ae8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3aec:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    3af0:	00000600 	andeq	r0, r0, r0, lsl #12
    3af4:	00010500 	andeq	r0, r1, r0, lsl #10
    3af8:	00000205 	andeq	r0, r0, r5, lsl #4
    3afc:	1b030000 	blne	c3b04 <__ccfg+0xa3b5c>
    3b00:	2e060101 	adfcss	f0, f6, f1
    3b04:	6a060205 	bvs	184320 <__ccfg+0x164378>
    3b08:	01060e05 	tsteq	r6, r5, lsl #28
    3b0c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3b10:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    3b14:	0f054002 	svceq	0x00054002
    3b18:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3b1c:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    3b20:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3b24:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    3b28:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    3b2c:	05200614 	streq	r0, [r0, #-1556]!	; 0xfffff9ec
    3b30:	0501061c 	streq	r0, [r1, #-1564]	; 0xfffff9e4
    3b34:	03062002 	movweq	r2, #24578	; 0x6002
    3b38:	3d4b2e11 	stclcc	14, cr2, [fp, #-68]	; 0xffffffbc
    3b3c:	71030305 	tstvc	r3, r5, lsl #6
    3b40:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3b44:	00fe0329 	rscseq	r0, lr, r9, lsr #6
    3b48:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3b4c:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3b50:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    3b54:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3b58:	0183030f 	orreq	r0, r3, pc, lsl #6
    3b5c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3b60:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3b64:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3b68:	01830333 	orreq	r0, r3, r3, lsr r3
    3b6c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3b70:	7efd0306 	cdpvc	3, 15, cr0, cr13, cr6, {0}
    3b74:	06040520 	streq	r0, [r4], -r0, lsr #10
    3b78:	06050530 			; <UNDEFINED> instruction: 0x06050530
    3b7c:	06040501 	streq	r0, [r4], -r1, lsl #10
    3b80:	06030540 	streq	r0, [r3], -r0, asr #10
    3b84:	062e1203 	strteq	r1, [lr], -r3, lsl #4
    3b88:	0306052f 	movweq	r0, #25903	; 0x652f
    3b8c:	0d052064 	stceq	0, cr2, [r5, #-400]	; 0xfffffe70
    3b90:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3b94:	3c160306 	ldccc	3, cr0, [r6], {6}
    3b98:	01060705 	tsteq	r6, r5, lsl #14
    3b9c:	29050204 	stmdbcs	r5, {r2, r9}
    3ba0:	00eb0306 	rsceq	r0, fp, r6, lsl #6
    3ba4:	17050558 	smlsdne	r5, r8, r5, r0
    3ba8:	01060f05 	tsteq	r6, r5, lsl #30
    3bac:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3bb0:	207f9003 	rsbscs	r9, pc, r3
    3bb4:	0f050204 	svceq	0x00050204
    3bb8:	2000f003 	andcs	pc, r0, r3
    3bbc:	04203305 	strteq	r3, [r0], #-773	; 0xfffffcfb
    3bc0:	03050501 	movweq	r0, #21761	; 0x5501
    3bc4:	05207f90 	streq	r7, [r0, #-3984]!	; 0xfffff070
    3bc8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3bcc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3bd0:	053e0603 	ldreq	r0, [lr, #-1539]!	; 0xfffff9fd
    3bd4:	07055102 	streq	r5, [r5, -r2, lsl #2]
    3bd8:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3bdc:	03062905 	movweq	r2, #26885	; 0x6905
    3be0:	053c00df 	ldreq	r0, [ip, #-223]!	; 0xffffff21
    3be4:	0f051705 	svceq	0x00051705
    3be8:	01040106 	tsteq	r4, r6, lsl #2
    3bec:	9c030705 	stcls	7, cr0, [r3], {5}
    3bf0:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3bf4:	e4030f05 	str	r0, [r3], #-3845	; 0xfffff0fb
    3bf8:	01042e00 	tsteq	r4, r0, lsl #28
    3bfc:	9c030705 	stcls	7, cr0, [r3], {5}
    3c00:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3c04:	e4033305 	str	r3, [r3], #-773	; 0xfffffcfb
    3c08:	01042000 	mrseq	r2, (UNDEF: 4)
    3c0c:	9c030505 	cfstr32ls	mvfx0, [r3], {5}
    3c10:	0205207f 	andeq	r2, r5, #127	; 0x7f
    3c14:	0e053106 	adfeqs	f3, f5, f6
    3c18:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3c1c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3c20:	06030531 			; <UNDEFINED> instruction: 0x06030531
    3c24:	06020501 	streq	r0, [r2], -r1, lsl #10
    3c28:	06010522 	streq	r0, [r1], -r2, lsr #10
    3c2c:	2c020522 	cfstr32cs	mvfx0, [r2], {34}	; 0x22
    3c30:	4c060105 	stfmis	f0, [r6], {5}
    3c34:	01000c02 	tsteq	r0, r2, lsl #24
    3c38:	00290501 	eoreq	r0, r9, r1, lsl #10
    3c3c:	00000205 	andeq	r0, r0, r5, lsl #4
    3c40:	d7030000 	strle	r0, [r3, -r0]
    3c44:	02050100 	andeq	r0, r5, #0, 2
    3c48:	060f0516 			; <UNDEFINED> instruction: 0x060f0516
    3c4c:	1c290501 	cfstr32ne	mvfx0, [r9], #-4
    3c50:	05240f05 	streq	r0, [r4, #-3845]!	; 0xfffff0fb
    3c54:	03052005 	movweq	r2, #20485	; 0x5005
    3c58:	01052106 	tsteq	r5, r6, lsl #2
    3c5c:	03051a06 	movweq	r1, #23046	; 0x5a06
    3c60:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    3c64:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    3c68:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    3c6c:	03053c05 	movweq	r3, #23557	; 0x5c05
    3c70:	052f2f06 	streq	r2, [pc, #-3846]!	; 2d72 <__exidx_end+0x13a>
    3c74:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    3c78:	01052c03 	tsteq	r5, r3, lsl #24
    3c7c:	0006023e 	andeq	r0, r6, lr, lsr r2
    3c80:	09310101 	ldmdbeq	r1!, {r0, r8}
    3c84:	00030000 	andeq	r0, r3, r0
    3c88:	000001cc 	andeq	r0, r0, ip, asr #3
    3c8c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3c90:	0101000d 	tsteq	r1, sp
    3c94:	00000101 	andeq	r0, r0, r1, lsl #2
    3c98:	00000100 	andeq	r0, r0, r0, lsl #2
    3c9c:	6f682f01 	svcvs	0x00682f01
    3ca0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3af4 <__exidx_end+0xebc>
    3ca4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3ca8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3cac:	6f746b73 	svcvs	0x00746b73
    3cb0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3cb4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3cb8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3cbc:	2f534f43 	svccs	0x00534f43
    3cc0:	4f636950 	svcmi	0x00636950
    3cc4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    3cc8:	2f736269 	svccs	0x00736269
    3ccc:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
    3cd0:	00656761 	rsbeq	r6, r5, r1, ror #14
    3cd4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3c20 <__exidx_end+0xfe8>
    3cd8:	616d2f65 	cmnvs	sp, r5, ror #30
    3cdc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3ce0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3ce4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ce8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3cec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3cf0:	4349502f 	movtmi	r5, #36911	; 0x902f
    3cf4:	502f534f 	eorpl	r5, pc, pc, asr #6
    3cf8:	534f6369 	movtpl	r6, #62313	; 0xf369
    3cfc:	3143432f 	cmpcc	r3, pc, lsr #6
    3d00:	2f585833 	svccs	0x00585833
    3d04:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3d08:	41575858 	cmpmi	r7, r8, asr r8
    3d0c:	642f4552 	strtvs	r4, [pc], #-1362	; 3d14 <__exidx_end+0x10dc>
    3d10:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3d14:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3d18:	73752f00 	cmnvc	r5, #0, 30
    3d1c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3d20:	63672f62 	cmnvs	r7, #392	; 0x188
    3d24:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3d28:	6f6e2d6d 	svcvs	0x006e2d6d
    3d2c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3d30:	2f696261 	svccs	0x00696261
    3d34:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3d38:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3d3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3d40:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3d44:	2f656d6f 	svccs	0x00656d6f
    3d48:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3d4c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3d54 <__exidx_end+0x111c>
    3d50:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3d54:	4f2f706f 	svcmi	0x002f706f
    3d58:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3d5c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3d60:	534f4349 	movtpl	r4, #62281	; 0xf349
    3d64:	6369502f 	cmnvs	r9, #47	; 0x2f
    3d68:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3d6c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3d70:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3d74:	2f656d6f 	svccs	0x00656d6f
    3d78:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3d7c:	442f6e69 	strtmi	r6, [pc], #-3689	; 3d84 <__exidx_end+0x114c>
    3d80:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3d84:	4f2f706f 	svcmi	0x002f706f
    3d88:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3d8c:	502f5445 	eorpl	r5, pc, r5, asr #8
    3d90:	534f4349 	movtpl	r4, #62281	; 0xf349
    3d94:	6369502f 	cmnvs	r9, #47	; 0x2f
    3d98:	2f00534f 	svccs	0x0000534f
    3d9c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3da0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3da4:	2f6e6974 	svccs	0x006e6974
    3da8:	6b736544 	blvs	1cdd2c0 <__ccfg+0x1cbd318>
    3dac:	2f706f74 	svccs	0x00706f74
    3db0:	4f534c4f 	svcmi	0x00534c4f
    3db4:	2f54454e 	svccs	0x0054454e
    3db8:	4f434950 	svcmi	0x00434950
    3dbc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3dc0:	2f534f63 	svccs	0x00534f63
    3dc4:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3dc8:	00006c65 	andeq	r6, r0, r5, ror #24
    3dcc:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    3dd0:	5f656761 	svcpl	0x00656761
    3dd4:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    3dd8:	33303872 	teqcc	r0, #7471104	; 0x720000
    3ddc:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    3de0:	67000001 	strvs	r0, [r0, -r1]
    3de4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    3de8:	00020068 	andeq	r0, r2, r8, rrx
    3dec:	6f747300 	svcvs	0x00747300
    3df0:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3df4:	7065655f 	rsbvc	r6, r5, pc, asr r5
    3df8:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    3dfc:	00010068 	andeq	r0, r1, r8, rrx
    3e00:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3e04:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3e08:	00030068 	andeq	r0, r3, r8, rrx
    3e0c:	63726100 	cmnvs	r2, #0, 2
    3e10:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3e14:	6d000004 	stcvs	0, cr0, [r0, #-16]
    3e18:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    3e1c:	00040068 	andeq	r0, r4, r8, rrx
    3e20:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3e24:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3e28:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3e2c:	62000004 	andvs	r0, r0, #4
    3e30:	6f747475 	svcvs	0x00747475
    3e34:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3e38:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3e3c:	00000400 	andeq	r0, r0, r0, lsl #8
    3e40:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3e44:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3e48:	6b000005 	blvs	3e64 <__exidx_end+0x122c>
    3e4c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3e50:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3e54:	00000006 	andeq	r0, r0, r6
    3e58:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    3e5c:	00139802 	andseq	r9, r3, r2, lsl #16
    3e60:	01180300 	tsteq	r8, r0, lsl #6
    3e64:	13140205 	tstne	r4, #1342177280	; 0x50000000
    3e68:	01150514 	tsteq	r5, r4, lsl r5
    3e6c:	0d061905 	vstreq.16	s2, [r6, #-10]	; <UNPREDICTABLE>
    3e70:	04250905 	strteq	r0, [r5], #-2309	; 0xfffff6fb
    3e74:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    3e78:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    3e7c:	03190501 	tsteq	r9, #4194304	; 0x400000
    3e80:	042e7df1 	strteq	r7, [lr], #-3569	; 0xfffff20f
    3e84:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    3e88:	052002c5 	streq	r0, [r0, #-709]!	; 0xfffffd3b
    3e8c:	7ed0030f 	cdpvc	3, 13, cr0, cr0, cr15, {0}
    3e90:	032d0520 			; <UNDEFINED> instruction: 0x032d0520
    3e94:	042000fa 	strteq	r0, [r0], #-250	; 0xffffff06
    3e98:	06030501 	streq	r0, [r3], -r1, lsl #10
    3e9c:	207df703 	rsbscs	pc, sp, r3, lsl #14
    3ea0:	0f050204 	svceq	0x00050204
    3ea4:	018f0306 	orreq	r0, pc, r6, lsl #6
    3ea8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3eac:	7ef10305 	cdpvc	3, 15, cr0, cr1, cr5, {0}
    3eb0:	21060520 	tstcs	r6, r0, lsr #10
    3eb4:	051f0505 	ldreq	r0, [pc, #-1285]	; 39b7 <__exidx_end+0xd7f>
    3eb8:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    3ebc:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3ec0:	05010189 	streq	r0, [r1, #-393]	; 0xfffffe77
    3ec4:	01041705 	tsteq	r4, r5, lsl #14
    3ec8:	f3030405 	vshl.u8	d0, d5, d3
    3ecc:	0605017e 			; <UNDEFINED> instruction: 0x0605017e
    3ed0:	03050106 	movweq	r0, #20742	; 0x5106
    3ed4:	02043d06 	andeq	r3, r4, #384	; 0x180
    3ed8:	81032905 	tsthi	r3, r5, lsl #18
    3edc:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    3ee0:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3ee4:	f6030602 			; <UNDEFINED> instruction: 0xf6030602
    3ee8:	0204017d 	andeq	r0, r4, #1073741855	; 0x4000001f
    3eec:	8a032d05 	bhi	cf308 <__ccfg+0xaf360>
    3ef0:	01042002 	tsteq	r4, r2
    3ef4:	03060305 	movweq	r0, #25349	; 0x6305
    3ef8:	04207dfb 	strteq	r7, [r0], #-3579	; 0xfffff205
    3efc:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3f00:	050102b6 	streq	r0, [r1, #-694]	; 0xfffffd4a
    3f04:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    3f08:	01040106 	tsteq	r4, r6, lsl #2
    3f0c:	03061c05 	movweq	r1, #27653	; 0x6c05
    3f10:	05207dc0 	streq	r7, [r0, #-3520]!	; 0xfffff240
    3f14:	02050115 	andeq	r0, r5, #1073741829	; 0x40000005
    3f18:	01050106 	tsteq	r5, r6, lsl #2
    3f1c:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    3f20:	01010007 	tsteq	r1, r7
    3f24:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    3f28:	0013cc02 	andseq	ip, r3, r2, lsl #24
    3f2c:	01280300 			; <UNDEFINED> instruction: 0x01280300
    3f30:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    3f34:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    3f38:	200e061f 	andcs	r0, lr, pc, lsl r6
    3f3c:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    3f40:	3c01ff03 	stccc	15, cr15, [r1], {3}
    3f44:	03050104 	movweq	r0, #20740	; 0x5104
    3f48:	7e860306 	cdpvc	3, 8, cr0, cr6, cr6, {0}
    3f4c:	0606054a 	streq	r0, [r6], -sl, asr #10
    3f50:	06040501 	streq	r0, [r4], -r1, lsl #10
    3f54:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    3f58:	01f40329 	mvnseq	r0, r9, lsr #6
    3f5c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3f60:	01062d05 	tsteq	r6, r5, lsl #26
    3f64:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    3f68:	7e890306 	cdpvc	3, 8, cr0, cr9, cr6, {0}
    3f6c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    3f70:	02a80329 	adceq	r0, r8, #-1543503872	; 0xa4000000
    3f74:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3f78:	01062d05 	tsteq	r6, r5, lsl #26
    3f7c:	03050104 	movweq	r0, #20740	; 0x5104
    3f80:	7dd40306 	ldclvc	3, cr0, [r4, #24]
    3f84:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3f88:	01f10329 	mvnseq	r0, r9, lsr #6
    3f8c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3f90:	03060104 	movweq	r0, #24836	; 0x6104
    3f94:	05017e8c 	streq	r7, [r1, #-3724]	; 0xfffff174
    3f98:	20790302 	rsbscs	r0, r9, r2, lsl #6
    3f9c:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    3fa0:	2001fb03 	andcs	pc, r1, r3, lsl #22
    3fa4:	03050104 	movweq	r0, #20740	; 0x5104
    3fa8:	7e8b0306 	cdpvc	3, 8, cr0, cr11, cr6, {0}
    3fac:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3fb0:	02a60329 	adceq	r0, r6, #-1543503872	; 0xa4000000
    3fb4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    3fb8:	03060104 	movweq	r0, #24836	; 0x6104
    3fbc:	04017dd6 	streq	r7, [r1], #-3542	; 0xfffff22a
    3fc0:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    3fc4:	042002aa 	strteq	r0, [r0], #-682	; 0xfffffd56
    3fc8:	06030501 	streq	r0, [r3], -r1, lsl #10
    3fcc:	207dd603 	rsbscs	sp, sp, r3, lsl #12
    3fd0:	79031505 	stmdbvc	r3, {r0, r2, r8, sl, ip}
    3fd4:	010e0501 	tsteq	lr, r1, lsl #10
    3fd8:	01060205 	tsteq	r6, r5, lsl #4
    3fdc:	09030105 	stmdbeq	r3, {r0, r2, r8}
    3fe0:	00050220 	andeq	r0, r5, r0, lsr #4
    3fe4:	1e050101 	adfnes	f0, f5, f1
    3fe8:	fc020500 	stc2	5, cr0, [r2], {-0}
    3fec:	03000013 	movweq	r0, #19
    3ff0:	02050139 	andeq	r0, r5, #1073741838	; 0x4000000e
    3ff4:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    3ff8:	03cf0329 	biceq	r0, pc, #-1543503872	; 0xa4000000
    3ffc:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4000:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4004:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4008:	031e0501 	tsteq	lr, #4194304	; 0x400000
    400c:	04207ca8 	strteq	r7, [r0], #-3240	; 0xfffff358
    4010:	03380502 	teqeq	r8, #8388608	; 0x800000
    4014:	042003d8 	strteq	r0, [r0], #-984	; 0xfffffc28
    4018:	06020501 	streq	r0, [r2], -r1, lsl #10
    401c:	2e7cab03 	vaddcs.f64	d26, d12, d3
    4020:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4024:	03cd0329 	biceq	r0, sp, #-1543503872	; 0xa4000000
    4028:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    402c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4030:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4034:	03010501 	movweq	r0, #5377	; 0x1501
    4038:	022e7cad 	eoreq	r7, lr, #44288	; 0xad00
    403c:	01010004 	tsteq	r1, r4
    4040:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    4044:	00141402 	andseq	r1, r4, r2, lsl #8
    4048:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    404c:	16020501 	strne	r0, [r2], -r1, lsl #10
    4050:	0e062705 	cdpeq	7, 0, cr2, cr6, cr5, {0}
    4054:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    4058:	03ba0338 			; <UNDEFINED> instruction: 0x03ba0338
    405c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4060:	7cca0309 	stclvc	3, cr0, [sl], {9}
    4064:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4068:	03b60338 			; <UNDEFINED> instruction: 0x03b60338
    406c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    4070:	ca030608 	bgt	c5898 <__ccfg+0xa58f0>
    4074:	0205207c 	andeq	r2, r5, #124	; 0x7c
    4078:	143c7303 	ldrtne	r7, [ip], #-771	; 0xfffffcfd
    407c:	29050204 	stmdbcs	r5, {r2, r9}
    4080:	0103ba03 	tsteq	r3, r3, lsl #20
    4084:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4088:	01041705 	tsteq	r4, r5, lsl #14
    408c:	03060205 	movweq	r0, #25093	; 0x6205
    4090:	04017cc0 	streq	r7, [r1], #-3264	; 0xfffff340
    4094:	03380502 	teqeq	r8, #8388608	; 0x800000
    4098:	042003c0 	strteq	r0, [r0], #-960	; 0xfffffc40
    409c:	06020501 	streq	r0, [r2], -r1, lsl #10
    40a0:	207cc003 	rsbscs	ip, ip, r3
    40a4:	0606052f 	streq	r0, [r6], -pc, lsr #10
    40a8:	06020501 	streq	r0, [r2], -r1, lsl #10
    40ac:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    40b0:	03b70329 			; <UNDEFINED> instruction: 0x03b70329
    40b4:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    40b8:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    40bc:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    40c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    40c4:	2e7cc303 	cdpcs	3, 7, cr12, cr12, cr3, {0}
    40c8:	19060f05 	stmdbne	r6, {r0, r2, r8, r9, sl, fp}
    40cc:	05360105 	ldreq	r0, [r6, #-261]!	; 0xfffffefb
    40d0:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    40d4:	0606052e 	streq	r0, [r6], -lr, lsr #10
    40d8:	06040501 	streq	r0, [r4], -r1, lsl #10
    40dc:	024b4c4b 	subeq	r4, fp, #19200	; 0x4b00
    40e0:	01010007 	tsteq	r1, r7
    40e4:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    40e8:	00146802 	andseq	r6, r4, r2, lsl #16
    40ec:	01810300 	orreq	r0, r1, r0, lsl #6
    40f0:	16020501 	strne	r0, [r2], -r1, lsl #10
    40f4:	0e061605 	cfmadd32eq	mvax0, mvfx1, mvfx6, mvfx5
    40f8:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    40fc:	03052005 	movweq	r2, #20485	; 0x5005
    4100:	02053006 	andeq	r3, r5, #6
    4104:	0608055e 			; <UNDEFINED> instruction: 0x0608055e
    4108:	3d010501 	cfstr32cc	mvfx0, [r1, #-4]
    410c:	1b060305 	blne	184d28 <__ccfg+0x164d80>
    4110:	66030205 	strvs	r0, [r3], -r5, lsl #4
    4114:	14010101 	strne	r0, [r1], #-257	; 0xfffffeff
    4118:	29050204 	stmdbcs	r5, {r2, r9}
    411c:	01039903 	tsteq	r3, r3, lsl #18
    4120:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4124:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4128:	01040106 	tsteq	r4, r6, lsl #2
    412c:	e1030205 	tst	r3, r5, lsl #4
    4130:	02042e7c 	andeq	r2, r4, #124, 28	; 0x7c0
    4134:	9f033805 	svcls	0x00033805
    4138:	01042003 	tsteq	r4, r3
    413c:	03060205 	movweq	r0, #25093	; 0x6205
    4140:	2f207ce1 	svccs	0x00207ce1
    4144:	29050204 	stmdbcs	r5, {r2, r9}
    4148:	01039703 	tsteq	r3, r3, lsl #14
    414c:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4150:	01041705 	tsteq	r4, r5, lsl #14
    4154:	03060205 	movweq	r0, #25093	; 0x6205
    4158:	04017ce3 	streq	r7, [r1], #-3299	; 0xfffff31d
    415c:	03380502 	teqeq	r8, #8388608	; 0x800000
    4160:	0420039d 	strteq	r0, [r0], #-925	; 0xfffffc63
    4164:	06020501 	streq	r0, [r2], -r1, lsl #10
    4168:	207ce303 	rsbscs	lr, ip, r3, lsl #6
    416c:	16030305 	strne	r0, [r3], -r5, lsl #6
    4170:	0609052e 	streq	r0, [r9], -lr, lsr #10
    4174:	00090201 	andeq	r0, r9, r1, lsl #4
    4178:	17050101 	strne	r0, [r5, -r1, lsl #2]
    417c:	a8020500 	stmdage	r2, {r8, sl}
    4180:	03000014 	movweq	r0, #20
    4184:	050100f7 	streq	r0, [r1, #-247]	; 0xffffff09
    4188:	17051402 	strne	r1, [r5, -r2, lsl #8]
    418c:	0c051006 	stceq	0, cr1, [r5], {6}
    4190:	20050522 	andcs	r0, r5, r2, lsr #10
    4194:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    4198:	03020559 	movweq	r0, #9561	; 0x2559
    419c:	0305016e 	movweq	r0, #20846	; 0x516e
    41a0:	053c1303 	ldreq	r1, [ip, #-771]!	; 0xfffffcfd
    41a4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    41a8:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
    41ac:	06010501 	streq	r0, [r1], -r1, lsl #10
    41b0:	00030214 	andeq	r0, r3, r4, lsl r2
    41b4:	11050101 	tstne	r5, r1, lsl #2
    41b8:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    41bc:	03000014 	movweq	r0, #20
    41c0:	05010192 	streq	r0, [r1, #-402]	; 0xfffffe6e
    41c4:	11051602 	tstne	r5, r2, lsl #12
    41c8:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    41cc:	052f0624 	streq	r0, [pc, #-1572]!	; 3bb0 <__exidx_end+0xf78>
    41d0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    41d4:	2e0e0301 	cdpcs	3, 0, cr0, cr14, cr1, {0}
    41d8:	72030805 	andvc	r0, r3, #327680	; 0x50000
    41dc:	06020520 	streq	r0, [r2], -r0, lsr #10
    41e0:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    41e4:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    41e8:	01010003 	tsteq	r1, r3
    41ec:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    41f0:	0014e002 	andseq	lr, r4, r2
    41f4:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    41f8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    41fc:	01060605 	tsteq	r6, r5, lsl #12
    4200:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4204:	052f0603 	streq	r0, [pc, #-1539]!	; 3c09 <__exidx_end+0xfd1>
    4208:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    420c:	052f0603 	streq	r0, [pc, #-1539]!	; 3c11 <__exidx_end+0xfd9>
    4210:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    4214:	01010003 	tsteq	r1, r3
    4218:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    421c:	00000002 	andeq	r0, r0, r2
    4220:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    4224:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    4228:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    422c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4230:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    4234:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4238:	12053c18 	andne	r3, r5, #24, 24	; 0x1800
    423c:	06020520 	streq	r0, [r2], -r0, lsr #10
    4240:	0204303f 	andeq	r3, r4, #63	; 0x3f
    4244:	d1032905 	tstle	r3, r5, lsl #18
    4248:	3d050102 	stfccs	f0, [r5, #-8]
    424c:	17050514 	smladne	r5, r4, r5, r0
    4250:	01063805 	tsteq	r6, r5, lsl #16
    4254:	02050104 	andeq	r0, r5, #4, 2
    4258:	2e7daa03 	vaddcs.f32	s21, s26, s6
    425c:	38050204 	stmdacc	r5, {r2, r9}
    4260:	2002d603 	andcs	sp, r2, r3, lsl #12
    4264:	02050104 	andeq	r0, r5, #4, 2
    4268:	7daa0306 	stcvc	3, cr0, [sl, #24]!
    426c:	4b4b2f20 	blmi	12cfef4 <__ccfg+0x12aff4c>
    4270:	2008053e 	andcs	r0, r8, lr, lsr r5
    4274:	04310205 	ldrteq	r0, [r1], #-517	; 0xfffffdfb
    4278:	03290502 			; <UNDEFINED> instruction: 0x03290502
    427c:	050102c7 	streq	r0, [r1, #-711]	; 0xfffffd39
    4280:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4284:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4288:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    428c:	b4030602 	strlt	r0, [r3], #-1538	; 0xfffff9fe
    4290:	05302e7d 	ldreq	r2, [r0, #-3709]!	; 0xfffff183
    4294:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    4298:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    429c:	060a052e 	streq	r0, [sl], -lr, lsr #10
    42a0:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    42a4:	74030a05 	strvc	r0, [r3], #-2565	; 0xfffff5fb
    42a8:	0005023c 	andeq	r0, r5, ip, lsr r2
    42ac:	31050101 	tstcc	r5, r1, lsl #2
    42b0:	00020500 	andeq	r0, r2, r0, lsl #10
    42b4:	03000000 	movweq	r0, #0
    42b8:	050101ca 	streq	r0, [r1, #-458]	; 0xfffffe36
    42bc:	31051402 	tstcc	r5, r2, lsl #8
    42c0:	0c051006 	stceq	0, cr1, [r5], {6}
    42c4:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    42c8:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    42cc:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    42d0:	06030530 			; <UNDEFINED> instruction: 0x06030530
    42d4:	06060532 			; <UNDEFINED> instruction: 0x06060532
    42d8:	20170501 	andscs	r0, r7, r1, lsl #10
    42dc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    42e0:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    42e4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    42e8:	03053c17 	movweq	r3, #23575	; 0x5c17
    42ec:	05303206 	ldreq	r3, [r0, #-518]!	; 0xfffffdfa
    42f0:	010a0304 	tsteq	sl, r4, lsl #6
    42f4:	01061005 	tsteq	r6, r5
    42f8:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    42fc:	09052010 	stmdbeq	r5, {r4, sp}
    4300:	06040520 	streq	r0, [r4], -r0, lsr #10
    4304:	06110522 	ldreq	r0, [r1], -r2, lsr #10
    4308:	20090501 	andcs	r0, r9, r1, lsl #10
    430c:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    4310:	04052e09 	streq	r2, [r5], #-3593	; 0xfffff1f7
    4314:	0d052406 	cfstrseq	mvf2, [r5, #-24]	; 0xffffffe8
    4318:	07050106 	streq	r0, [r5, -r6, lsl #2]
    431c:	0605054a 	streq	r0, [r5], -sl, asr #10
    4320:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4324:	06050501 	streq	r0, [r5], -r1, lsl #10
    4328:	0c052f2f 	stceq	15, cr2, [r5], {47}	; 0x2f
    432c:	01050106 	tsteq	r5, r6, lsl #2
    4330:	05203103 	streq	r3, [r0, #-259]!	; 0xfffffefd
    4334:	52030604 	andpl	r0, r3, #4, 12	; 0x400000
    4338:	060e0520 	streq	r0, [lr], -r0, lsr #10
    433c:	20070501 	andcs	r0, r7, r1, lsl #10
    4340:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    4344:	0505201d 	streq	r2, [r5, #-29]	; 0xffffffe3
    4348:	0b053e06 	bleq	153b68 <__ccfg+0x133bc0>
    434c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4350:	1e0b0528 	cfsh32ne	mvfx0, mvfx11, #24
    4354:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4358:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    435c:	96030638 			; <UNDEFINED> instruction: 0x96030638
    4360:	01040102 	tsteq	r4, r2, lsl #2
    4364:	ea030405 	b	c5380 <__ccfg+0xa53d8>
    4368:	02052e7d 	andeq	r2, r5, #2000	; 0x7d0
    436c:	7ec70306 	cdpvc	3, 12, cr0, cr7, cr6, {0}
    4370:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4374:	03c80329 	biceq	r0, r8, #-1543503872	; 0xa4000000
    4378:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    437c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4380:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4384:	06020501 	streq	r0, [r2], -r1, lsl #10
    4388:	207cb203 	rsbscs	fp, ip, r3, lsl #4
    438c:	3d4b4b2f 	vstrcc	d20, [fp, #-188]	; 0xffffff44
    4390:	29050204 	stmdbcs	r5, {r2, r9}
    4394:	0103c303 	tsteq	r3, r3, lsl #6
    4398:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    439c:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    43a0:	01040106 	tsteq	r4, r6, lsl #2
    43a4:	03060205 	movweq	r0, #25093	; 0x6205
    43a8:	052e7dee 	streq	r7, [lr, #-3566]!	; 0xfffff212
    43ac:	5503060b 	strpl	r0, [r3, #-1547]	; 0xfffff9f5
    43b0:	06090582 	streq	r0, [r9], -r2, lsl #11
    43b4:	052e1f03 	streq	r1, [lr, #-3843]!	; 0xfffff0fd
    43b8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    43bc:	2a052e0c 	bcs	14fbf4 <__ccfg+0x12fc4c>
    43c0:	20220520 	eorcs	r0, r2, r0, lsr #10
    43c4:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    43c8:	01060b05 	tsteq	r6, r5, lsl #22
    43cc:	31060505 	tstcc	r6, r5, lsl #10
    43d0:	01060b05 	tsteq	r6, r5, lsl #22
    43d4:	05350205 	ldreq	r0, [r5, #-517]!	; 0xfffffdfb
    43d8:	0a030604 	beq	c5bf0 <__ccfg+0xa5c48>
    43dc:	0905592e 	stmdbeq	r5, {r1, r2, r3, r5, r8, fp, ip, lr}
    43e0:	0e030106 	adfeqs	f0, f3, f6
    43e4:	0604054a 	streq	r0, [r4], -sl, asr #10
    43e8:	206b0321 	rsbcs	r0, fp, r1, lsr #6
    43ec:	200b0359 	andcs	r0, fp, r9, asr r3
    43f0:	0609054b 	streq	r0, [r9], -fp, asr #10
    43f4:	06040501 	streq	r0, [r4], -r1, lsl #10
    43f8:	09054b5e 	stmdbeq	r5, {r1, r2, r3, r4, r6, r8, r9, fp, lr}
    43fc:	03050106 	movweq	r0, #20742	; 0x5106
    4400:	7fba0306 	svcvc	0x00ba0306
    4404:	06060558 			; <UNDEFINED> instruction: 0x06060558
    4408:	3b090501 	blcc	245814 <__ccfg+0x22586c>
    440c:	01010008 	tsteq	r1, r8
    4410:	05003b05 	streq	r3, [r0, #-2821]	; 0xfffff4fb
    4414:	00000002 	andeq	r0, r0, r2
    4418:	02a00300 	adceq	r0, r0, #0, 6
    441c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4420:	063b0514 			; <UNDEFINED> instruction: 0x063b0514
    4424:	320c050e 	andcc	r0, ip, #58720256	; 0x3800000
    4428:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    442c:	3b052405 	blcc	14d448 <__ccfg+0x12d4a0>
    4430:	3205051c 	andcc	r0, r5, #28, 10	; 0x7000000
    4434:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4438:	01060605 	tsteq	r6, r5, lsl #12
    443c:	053c1a05 	ldreq	r1, [ip, #-2565]!	; 0xfffff5fb
    4440:	03052e14 	movweq	r2, #24084	; 0x5e14
    4444:	08053f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, ip, sp}
    4448:	03050106 	movweq	r0, #20742	; 0x5106
    444c:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4450:	03050106 	movweq	r0, #20742	; 0x5106
    4454:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    4458:	03050106 	movweq	r0, #20742	; 0x5106
    445c:	052f3006 	streq	r3, [pc, #-6]!	; 445e <__exidx_end+0x1826>
    4460:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4464:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4468:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    446c:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4470:	0a052206 	beq	14cc90 <__ccfg+0x12cce8>
    4474:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4478:	052f2106 	streq	r2, [pc, #-262]!	; 437a <__exidx_end+0x1742>
    447c:	22030601 	andcs	r0, r3, #1048576	; 0x100000
    4480:	06030501 	streq	r0, [r3], -r1, lsl #10
    4484:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    4488:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    448c:	03052006 	movweq	r2, #20486	; 0x5006
    4490:	24063e06 	strcs	r3, [r6], #-3590	; 0xfffff1fa
    4494:	04304a06 	ldrteq	r4, [r0], #-2566	; 0xfffff5fa
    4498:	03290502 			; <UNDEFINED> instruction: 0x03290502
    449c:	050101c8 	streq	r0, [r1, #-456]	; 0xfffffe38
    44a0:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    44a4:	06380517 			; <UNDEFINED> instruction: 0x06380517
    44a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    44ac:	7eb30303 	cdpvc	3, 11, cr0, cr3, cr3, {0}
    44b0:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    44b4:	01cd0338 	biceq	r0, sp, r8, lsr r3
    44b8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    44bc:	b3030603 	movwlt	r0, #13827	; 0x3603
    44c0:	052f2e7e 	streq	r2, [pc, #-3710]!	; 364a <__exidx_end+0xa12>
    44c4:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    44c8:	4b062e03 	blmi	18fcdc <__ccfg+0x16fd34>
    44cc:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    44d0:	0c053106 	stfeqs	f3, [r5], {6}
    44d4:	2e09052b 	cfsh32cs	mvfx0, mvfx9, #27
    44d8:	05230805 	streq	r0, [r3, #-2053]!	; 0xfffff7fb
    44dc:	051d0609 	ldreq	r0, [sp, #-1545]	; 0xfffff9f7
    44e0:	02042603 	andeq	r2, r4, #3145728	; 0x300000
    44e4:	bb032905 	bllt	ce900 <__ccfg+0xae958>
    44e8:	3d050101 	stfccs	f0, [r5, #-4]
    44ec:	17050514 	smladne	r5, r4, r5, r0
    44f0:	01063805 	tsteq	r6, r5, lsl #16
    44f4:	02050104 	andeq	r0, r5, #4, 2
    44f8:	7ec10306 	cdpvc	3, 12, cr0, cr1, cr6, {0}
    44fc:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    4500:	06020501 	streq	r0, [r2], -r1, lsl #10
    4504:	04054b40 	streq	r4, [r5], #-2880	; 0xfffff4c0
    4508:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    450c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    4510:	3d063c04 	stccc	12, cr3, [r6, #-16]
    4514:	01060805 	tsteq	r6, r5, lsl #16
    4518:	59060405 	stmdbpl	r6, {r0, r2, sl}
    451c:	01060805 	tsteq	r6, r5, lsl #16
    4520:	5d030b05 	vstrpl	d0, [r3, #-20]	; 0xffffffec
    4524:	000d024a 	andeq	r0, sp, sl, asr #4
    4528:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    452c:	00020500 	andeq	r0, r2, r0, lsl #10
    4530:	03000000 	movweq	r0, #0
    4534:	050102da 	streq	r0, [r1, #-730]	; 0xfffffd26
    4538:	01021501 	tsteq	r2, r1, lsl #10
    453c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4540:	02050018 	andeq	r0, r5, #24
    4544:	00000000 	andeq	r0, r0, r0
    4548:	0102df03 	tsteq	r2, r3, lsl #30
    454c:	05150205 	ldreq	r0, [r5, #-517]	; 0xfffffdfb
    4550:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4554:	01010002 	tsteq	r1, r2
    4558:	29050304 	stmdbcs	r5, {r2, r8, r9}
    455c:	00020500 	andeq	r0, r2, r0, lsl #10
    4560:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    4564:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4568:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    456c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4570:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4574:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    4578:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    457c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4580:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4584:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    4588:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    458c:	01010003 	tsteq	r1, r3
    4590:	17050304 	strne	r0, [r5, -r4, lsl #6]
    4594:	00020500 	andeq	r0, r2, r0, lsl #10
    4598:	03000000 	movweq	r0, #0
    459c:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    45a0:	06170514 			; <UNDEFINED> instruction: 0x06170514
    45a4:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
    45a8:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    45ac:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    45b0:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    45b4:	9e010100 	adflss	f0, f1, f0
    45b8:	03000001 	movweq	r0, #1
    45bc:	00013d00 	andeq	r3, r1, r0, lsl #26
    45c0:	fb010200 	blx	44dca <__ccfg+0x24e22>
    45c4:	01000d0e 	tsteq	r0, lr, lsl #26
    45c8:	00010101 	andeq	r0, r1, r1, lsl #2
    45cc:	00010000 	andeq	r0, r1, r0
    45d0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    45d4:	2f656d6f 	svccs	0x00656d6f
    45d8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    45dc:	442f6e69 	strtmi	r6, [pc], #-3689	; 45e4 <__exidx_end+0x19ac>
    45e0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    45e4:	4f2f706f 	svcmi	0x002f706f
    45e8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    45ec:	502f5445 	eorpl	r5, pc, r5, asr #8
    45f0:	534f4349 	movtpl	r4, #62281	; 0xf349
    45f4:	6369502f 	cmnvs	r9, #47	; 0x2f
    45f8:	502f534f 	eorpl	r5, pc, pc, asr #6
    45fc:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4600:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4604:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4608:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    460c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4610:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4614:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4618:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    461c:	61652d65 	cmnvs	r5, r5, ror #26
    4620:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4624:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4628:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    462c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4630:	6f682f00 	svcvs	0x00682f00
    4634:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4488 <__exidx_end+0x1850>
    4638:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    463c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4640:	6f746b73 	svcvs	0x00746b73
    4644:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4648:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    464c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4650:	2f534f43 	svccs	0x00534f43
    4654:	4f636950 	svcmi	0x00636950
    4658:	43432f53 	movtmi	r2, #16211	; 0x3f53
    465c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4660:	6f682f00 	svcvs	0x00682f00
    4664:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 44b8 <__exidx_end+0x1880>
    4668:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    466c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4670:	6f746b73 	svcvs	0x00746b73
    4674:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4678:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    467c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4680:	2f534f43 	svccs	0x00534f43
    4684:	4f636950 	svcmi	0x00636950
    4688:	73000053 	movwvc	r0, #83	; 0x53
    468c:	6f5f7265 	svcvs	0x005f7265
    4690:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
    4694:	00010063 	andeq	r0, r1, r3, rrx
    4698:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    469c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    46a0:	00020068 	andeq	r0, r2, r8, rrx
    46a4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    46a8:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    46ac:	00020068 	andeq	r0, r2, r8, rrx
    46b0:	63726100 	cmnvs	r2, #0, 2
    46b4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    46b8:	6d000003 	stcvs	0, cr0, [r0, #-12]
    46bc:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    46c0:	00030068 	andeq	r0, r3, r8, rrx
    46c4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    46c8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    46cc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    46d0:	62000003 	andvs	r0, r0, #3
    46d4:	6f747475 	svcvs	0x00747475
    46d8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    46dc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    46e0:	00000300 	andeq	r0, r0, r0, lsl #6
    46e4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    46e8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    46ec:	3c000004 	stccc	0, cr0, [r0], {4}
    46f0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    46f4:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    46f8:	0000003e 	andeq	r0, r0, lr, lsr r0
    46fc:	2c050000 	stccs	0, cr0, [r5], {-0}
    4700:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    4704:	03000014 	movweq	r0, #20
    4708:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    470c:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    4710:	03062c05 	movweq	r2, #27653	; 0x6c05
    4714:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    4718:	0505260e 	streq	r2, [r5, #-1550]	; 0xfffff9f2
    471c:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    4720:	0a033d30 	beq	d3be8 <__ccfg+0xb3c40>
    4724:	03020501 	movweq	r0, #9473	; 0x2501
    4728:	0d052e79 	stceq	14, cr2, [r5, #-484]	; 0xfffffe1c
    472c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    4730:	0522061e 	streq	r0, [r2, #-1566]!	; 0xfffff9e2
    4734:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4738:	03052e05 	movweq	r2, #24069	; 0x5e05
    473c:	02053206 	andeq	r3, r5, #1610612736	; 0x60000000
    4740:	0606054e 	streq	r0, [r6], -lr, asr #10
    4744:	4a050501 	bmi	145b50 <__ccfg+0x125ba8>
    4748:	21060305 	tstcs	r6, r5, lsl #6
    474c:	2402053d 	strcs	r0, [r2], #-1341	; 0xfffffac3
    4750:	13060105 	movwne	r0, #24837	; 0x6105
    4754:	01000902 	tsteq	r0, r2, lsl #18
    4758:	0001af01 	andeq	sl, r1, r1, lsl #30
    475c:	3c000300 	stccc	3, cr0, [r0], {-0}
    4760:	02000001 	andeq	r0, r0, #1
    4764:	0d0efb01 	vstreq	d15, [lr, #-4]
    4768:	01010100 	mrseq	r0, (UNDEF: 17)
    476c:	00000001 	andeq	r0, r0, r1
    4770:	01000001 	tsteq	r0, r1
    4774:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 46c0 <__exidx_end+0x1a88>
    4778:	616d2f65 	cmnvs	sp, r5, ror #30
    477c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4780:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4784:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4788:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    478c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4790:	4349502f 	movtmi	r5, #36911	; 0x902f
    4794:	502f534f 	eorpl	r5, pc, pc, asr #6
    4798:	534f6369 	movtpl	r6, #62313	; 0xf369
    479c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    47a0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    47a4:	61697265 	cmnvs	r9, r5, ror #4
    47a8:	752f006c 	strvc	r0, [pc, #-108]!	; 4744 <__exidx_end+0x1b0c>
    47ac:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 45e8 <__exidx_end+0x19b0>
    47b0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    47b4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    47b8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    47bc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    47c0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    47c4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    47c8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    47cc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    47d0:	2f006564 	svccs	0x00006564
    47d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    47d8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    47dc:	2f6e6974 	svccs	0x006e6974
    47e0:	6b736544 	blvs	1cddcf8 <__ccfg+0x1cbdd50>
    47e4:	2f706f74 	svccs	0x00706f74
    47e8:	4f534c4f 	svcmi	0x00534c4f
    47ec:	2f54454e 	svccs	0x0054454e
    47f0:	4f434950 	svcmi	0x00434950
    47f4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    47f8:	2f534f63 	svccs	0x00534f63
    47fc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4800:	2f005858 	svccs	0x00005858
    4804:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4808:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    480c:	2f6e6974 	svccs	0x006e6974
    4810:	6b736544 	blvs	1cddd28 <__ccfg+0x1cbdd80>
    4814:	2f706f74 	svccs	0x00706f74
    4818:	4f534c4f 	svcmi	0x00534c4f
    481c:	2f54454e 	svccs	0x0054454e
    4820:	4f434950 	svcmi	0x00434950
    4824:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4828:	00534f63 	subseq	r4, r3, r3, ror #30
    482c:	72657300 	rsbvc	r7, r5, #0, 6
    4830:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    4834:	0100632e 	tsteq	r0, lr, lsr #6
    4838:	74730000 	ldrbtvc	r0, [r3], #-0
    483c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4840:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4844:	74730000 	ldrbtvc	r0, [r3], #-0
    4848:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    484c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4850:	72610000 	rsbvc	r0, r1, #0
    4854:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4858:	00000300 	andeq	r0, r0, r0, lsl #6
    485c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4860:	0300682e 	movweq	r6, #2094	; 0x82e
    4864:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4868:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    486c:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4870:	00000300 	andeq	r0, r0, r0, lsl #6
    4874:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4878:	5f736e6f 	svcpl	0x00736e6f
    487c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4880:	00030068 	andeq	r0, r3, r8, rrx
    4884:	73797300 	cmnvc	r9, #0, 6
    4888:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    488c:	00000400 	andeq	r0, r0, r0, lsl #8
    4890:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    4894:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    4898:	00003e6e 	andeq	r3, r0, lr, ror #28
    489c:	05000000 	streq	r0, [r0, #-0]
    48a0:	0205002d 	andeq	r0, r5, #45	; 0x2d
    48a4:	00001548 	andeq	r1, r0, r8, asr #10
    48a8:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    48ac:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    48b0:	03062d05 	movweq	r2, #27909	; 0x6d05
    48b4:	052e0178 	streq	r0, [lr, #-376]!	; 0xfffffe88
    48b8:	02053605 	andeq	r3, r5, #5242880	; 0x500000
    48bc:	10052306 	andne	r2, r5, r6, lsl #6
    48c0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    48c4:	06030520 	streq	r0, [r3], -r0, lsr #10
    48c8:	060f052f 	streq	r0, [pc], -pc, lsr #10
    48cc:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    48d0:	21060405 	tstcs	r6, r5, lsl #8
    48d4:	01060b05 	tsteq	r6, r5, lsl #22
    48d8:	4b060405 	blmi	1858f4 <__ccfg+0x16594c>
    48dc:	01060705 	tsteq	r6, r5, lsl #14
    48e0:	21060505 	tstcs	r6, r5, lsl #10
    48e4:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    48e8:	4f02052d 	svcmi	0x0002052d
    48ec:	06090530 			; <UNDEFINED> instruction: 0x06090530
    48f0:	06020501 	streq	r0, [r2], -r1, lsl #10
    48f4:	0c053d3e 	stceq	13, cr3, [r5], {62}	; 0x3e
    48f8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    48fc:	01053006 	tsteq	r5, r6
    4900:	0a051306 	beq	149520 <__ccfg+0x129578>
    4904:	02666903 	rsbeq	r6, r6, #49152	; 0xc000
    4908:	01010006 	tsteq	r1, r6
    490c:	00000ca9 	andeq	r0, r0, r9, lsr #25
    4910:	02990003 	addseq	r0, r9, #3
    4914:	01020000 	mrseq	r0, (UNDEF: 2)
    4918:	000d0efb 	strdeq	r0, [sp], -fp
    491c:	01010101 	tsteq	r1, r1, lsl #2
    4920:	01000000 	mrseq	r0, (UNDEF: 0)
    4924:	2f010000 	svccs	0x00010000
    4928:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    492c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4930:	2f6e6974 	svccs	0x006e6974
    4934:	6b736544 	blvs	1cdde4c <__ccfg+0x1cbdea4>
    4938:	2f706f74 	svccs	0x00706f74
    493c:	4f534c4f 	svcmi	0x00534c4f
    4940:	2f54454e 	svccs	0x0054454e
    4944:	4f434950 	svcmi	0x00434950
    4948:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    494c:	2f534f63 	svccs	0x00534f63
    4950:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4954:	2f005858 	svccs	0x00005858
    4958:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    495c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4960:	2f6e6974 	svccs	0x006e6974
    4964:	6b736544 	blvs	1cdde7c <__ccfg+0x1cbded4>
    4968:	2f706f74 	svccs	0x00706f74
    496c:	4f534c4f 	svcmi	0x00534c4f
    4970:	2f54454e 	svccs	0x0054454e
    4974:	4f434950 	svcmi	0x00434950
    4978:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    497c:	2f534f63 	svccs	0x00534f63
    4980:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4984:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    4988:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    498c:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    4990:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    4994:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    4998:	0062696c 	rsbeq	r6, r2, ip, ror #18
    499c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 48e8 <__exidx_end+0x1cb0>
    49a0:	616d2f65 	cmnvs	sp, r5, ror #30
    49a4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    49a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    49ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
    49b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    49b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    49b8:	4349502f 	movtmi	r5, #36911	; 0x902f
    49bc:	502f534f 	eorpl	r5, pc, pc, asr #6
    49c0:	534f6369 	movtpl	r6, #62313	; 0xf369
    49c4:	3143432f 	cmpcc	r3, pc, lsr #6
    49c8:	2f585833 	svccs	0x00585833
    49cc:	33314343 	teqcc	r1, #201326593	; 0xc000001
    49d0:	41575858 	cmpmi	r7, r8, asr r8
    49d4:	722f4552 	eorvc	r4, pc, #343932928	; 0x14800000
    49d8:	61705f66 	cmnvs	r0, r6, ror #30
    49dc:	65686374 	strbvs	r6, [r8, #-884]!	; 0xfffffc8c
    49e0:	752f0073 	strvc	r0, [pc, #-115]!	; 4975 <__exidx_end+0x1d3d>
    49e4:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4820 <__exidx_end+0x1be8>
    49e8:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    49ec:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    49f0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    49f4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    49f8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    49fc:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4a00:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4a04:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4a08:	2f006564 	svccs	0x00006564
    4a0c:	2f727375 	svccs	0x00727375
    4a10:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4a14:	2f656475 	svccs	0x00656475
    4a18:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4a1c:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    4a20:	2f007379 	svccs	0x00007379
    4a24:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a28:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a2c:	2f6e6974 	svccs	0x006e6974
    4a30:	6b736544 	blvs	1cddf48 <__ccfg+0x1cbdfa0>
    4a34:	2f706f74 	svccs	0x00706f74
    4a38:	4f534c4f 	svcmi	0x00534c4f
    4a3c:	2f54454e 	svccs	0x0054454e
    4a40:	4f434950 	svcmi	0x00434950
    4a44:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a48:	00534f63 	subseq	r4, r3, r3, ror #30
    4a4c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4998 <__exidx_end+0x1d60>
    4a50:	616d2f65 	cmnvs	sp, r5, ror #30
    4a54:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4a58:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4a5c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a60:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a64:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a68:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a6c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a70:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a74:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    4a78:	006c656e 	rsbeq	r6, ip, lr, ror #10
    4a7c:	70667200 	rsbvc	r7, r6, r0, lsl #4
    4a80:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
    4a84:	00010063 	andeq	r0, r1, r3, rrx
    4a88:	63667200 	cmnvs	r6, #0, 4
    4a8c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4a90:	70670000 	rsbvc	r0, r7, r0
    4a94:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4a98:	00000200 	andeq	r0, r0, r0, lsl #4
    4a9c:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    4aa0:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    4aa4:	6570635f 	ldrbvs	r6, [r0, #-863]!	; 0xfffffca1
    4aa8:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    4aac:	2e6b7366 	cdpcs	3, 6, cr7, cr11, cr6, {3}
    4ab0:	00030068 	andeq	r0, r3, r8, rrx
    4ab4:	5f667200 	svcpl	0x00667200
    4ab8:	63746170 	cmnvs	r4, #112, 2
    4abc:	66725f68 	ldrbtvs	r5, [r2], -r8, ror #30
    4ac0:	65675f65 	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
    4ac4:	6b73666e 	blvs	1cde484 <__ccfg+0x1cbe4dc>
    4ac8:	0300682e 	movweq	r6, #2094	; 0x82e
    4acc:	74730000 	ldrbtvc	r0, [r3], #-0
    4ad0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4ad4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4ad8:	74730000 	ldrbtvc	r0, [r3], #-0
    4adc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    4ae0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4ae4:	745f0000 	ldrbvc	r0, [pc], #-0	; 4aec <__exidx_end+0x1eb4>
    4ae8:	73657079 	cmnvc	r5, #121	; 0x79
    4aec:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4af0:	65720000 	ldrbvs	r0, [r2, #-0]!
    4af4:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
    4af8:	00050068 	andeq	r0, r5, r8, rrx
    4afc:	636f6c00 	cmnvs	pc, #0, 24
    4b00:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    4b04:	72000005 	andvc	r0, r0, #5
    4b08:	616d5f66 	cmnvs	sp, r6, ror #30
    4b0c:	6f626c69 	svcvs	0x00626c69
    4b10:	00682e78 	rsbeq	r2, r8, r8, ror lr
    4b14:	72000002 	andvc	r0, r0, #2
    4b18:	6f635f66 	svcvs	0x00635f66
    4b1c:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
    4b20:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
    4b24:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4b28:	66720000 	ldrbtvs	r0, [r2], -r0
    4b2c:	6f72705f 	svcvs	0x0072705f
    4b30:	6d635f70 	stclvs	15, cr5, [r3, #-448]!	; 0xfffffe40
    4b34:	00682e64 	rsbeq	r2, r8, r4, ror #28
    4b38:	72000002 	andvc	r0, r0, #2
    4b3c:	61645f66 	cmnvs	r4, r6, ror #30
    4b40:	655f6174 	ldrbvs	r6, [pc, #-372]	; 49d4 <__exidx_end+0x1d9c>
    4b44:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    4b48:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4b4c:	72610000 	rsbvc	r0, r1, #0
    4b50:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4b54:	00000100 	andeq	r0, r0, r0, lsl #2
    4b58:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4b5c:	0100682e 	tsteq	r0, lr, lsr #16
    4b60:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4b64:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4b68:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4b6c:	00000100 	andeq	r0, r0, r0, lsl #2
    4b70:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4b74:	5f736e6f 	svcpl	0x00736e6f
    4b78:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4b7c:	00010068 	andeq	r0, r1, r8, rrx
    4b80:	73797300 	cmnvc	r9, #0, 6
    4b84:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4b88:	00000600 	andeq	r0, r0, r0, lsl #12
    4b8c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4b90:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4b94:	00000700 	andeq	r0, r0, r0, lsl #14
    4b98:	72616d73 	rsbvc	r6, r1, #7360	; 0x1cc0
    4b9c:	5f667274 	svcpl	0x00667274
    4ba0:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
    4ba4:	73676e69 	cmnvc	r7, #1680	; 0x690
    4ba8:	0100682e 	tsteq	r0, lr, lsr #16
    4bac:	05000000 	streq	r0, [r0, #-0]
    4bb0:	02050017 	andeq	r0, r5, #23
    4bb4:	00000000 	andeq	r0, r0, r0
    4bb8:	01039f03 	tsteq	r3, r3, lsl #30
    4bbc:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4bc0:	05140638 	ldreq	r0, [r4, #-1592]	; 0xfffff9c8
    4bc4:	38052026 	stmdacc	r5, {r1, r2, r5, sp}
    4bc8:	3c260520 	cfstr32cc	mvfx0, [r6], #-128	; 0xffffff80
    4bcc:	051e1505 	ldreq	r1, [lr, #-1285]	; 0xfffffafb
    4bd0:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    4bd4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4bd8:	0205002a 	andeq	r0, r5, #42	; 0x2a
    4bdc:	00000000 	andeq	r0, r0, r0
    4be0:	0106c903 	tsteq	r6, r3, lsl #18
    4be4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    4be8:	0e062a05 	vmlaeq.f32	s4, s12, s10
    4bec:	06040520 	streq	r0, [r4], -r0, lsr #10
    4bf0:	17054408 	strne	r4, [r5, -r8, lsl #8]
    4bf4:	0c050106 	stfeqs	f0, [r5], {6}
    4bf8:	03080520 	movweq	r0, #34080	; 0x8520
    4bfc:	04053c20 	streq	r3, [r5], #-3104	; 0xfffff3e0
    4c00:	64032106 	strvs	r2, [r3], #-262	; 0xfffffefa
    4c04:	06060520 	streq	r0, [r6], -r0, lsr #10
    4c08:	05587503 	ldrbeq	r7, [r8, #-1283]	; 0xfffffafd
    4c0c:	0d030604 	stceq	6, cr0, [r3, #-16]
    4c10:	9e010120 	adflssp	f0, f1, f0
    4c14:	054a582e 	strbeq	r5, [sl, #-2094]	; 0xfffff7d2
    4c18:	fa030601 	blx	c6424 <__ccfg+0xa647c>
    4c1c:	04050100 	streq	r0, [r5], #-256	; 0xffffff00
    4c20:	7f900306 	svcvc	0x00900306
    4c24:	0b055d20 	bleq	15c0ac <__ccfg+0x13c104>
    4c28:	20200106 	eorcs	r0, r0, r6, lsl #2
    4c2c:	2f060405 	svccs	0x00060405
    4c30:	03060605 	movweq	r0, #26117	; 0x6605
    4c34:	04050163 	streq	r0, [r5], #-355	; 0xfffffe9d
    4c38:	2e210306 	cdpcs	3, 2, cr0, cr1, cr6, {0}
    4c3c:	01060a05 	tsteq	r6, r5, lsl #20
    4c40:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    4c44:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4c48:	00e20302 	rsceq	r0, r2, r2, lsl #6
    4c4c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4c50:	06030501 	streq	r0, [r3], -r1, lsl #10
    4c54:	0f02052f 	svceq	0x0002052f
    4c58:	15060805 	strne	r0, [r6, #-2053]	; 0xfffff7fb
    4c5c:	051d0905 	ldreq	r0, [sp, #-2309]	; 0xfffff6fb
    4c60:	a4030604 	strge	r0, [r3], #-1540	; 0xfffff9fc
    4c64:	1105207f 	tstne	r5, pc, ror r0
    4c68:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4c6c:	05054106 	streq	r4, [r5, #-262]	; 0xfffffefa
    4c70:	07051306 	streq	r1, [r5, -r6, lsl #6]
    4c74:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
    4c78:	04055b21 	streq	r5, [r5], #-2849	; 0xfffff4df
    4c7c:	06070552 			; <UNDEFINED> instruction: 0x06070552
    4c80:	06050501 	streq	r0, [r5], -r1, lsl #10
    4c84:	06010122 	streq	r0, [r1], -r2, lsr #2
    4c88:	054a065a 	strbeq	r0, [sl, #-1626]	; 0xfffff9a6
    4c8c:	0535060d 	ldreq	r0, [r5, #-1549]!	; 0xfffff9f3
    4c90:	05052120 	streq	r2, [r5, #-288]	; 0xfffffee0
    4c94:	11053c06 	tstne	r5, r6, lsl #24
    4c98:	08051306 	stmdaeq	r5, {r1, r2, r8, r9, ip}
    4c9c:	061b052d 	ldreq	r0, [fp], -sp, lsr #10
    4ca0:	061e052d 	ldreq	r0, [lr], -sp, lsr #10
    4ca4:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    4ca8:	06040520 	streq	r0, [r4], -r0, lsr #10
    4cac:	10030601 	andne	r0, r3, r1, lsl #12
    4cb0:	062e053c 			; <UNDEFINED> instruction: 0x062e053c
    4cb4:	21140501 	tstcs	r4, r1, lsl #10
    4cb8:	051f2e05 	ldreq	r2, [pc, #-3589]	; 3ebb <__exidx_end+0x1283>
    4cbc:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    4cc0:	0501062e 	streq	r0, [r1, #-1582]	; 0xfffff9d2
    4cc4:	04052024 	streq	r2, [r5], #-36	; 0xffffffdc
    4cc8:	24594b06 	ldrbcs	r4, [r9], #-2822	; 0xfffff4fa
    4ccc:	01060a05 	tsteq	r6, r5, lsl #20
    4cd0:	0e030805 	cdpeq	8, 0, cr0, cr3, cr5, {0}
    4cd4:	06040520 	streq	r0, [r4], -r0, lsr #10
    4cd8:	20750322 	rsbscs	r0, r5, r2, lsr #6
    4cdc:	01060c05 	tsteq	r6, r5, lsl #24
    4ce0:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    4ce4:	0520490c 	streq	r4, [r0, #-2316]!	; 0xfffff6f4
    4ce8:	03300604 	teqeq	r0, #4, 12	; 0x400000
    4cec:	032f0111 			; <UNDEFINED> instruction: 0x032f0111
    4cf0:	0a055875 	beq	15aecc <__ccfg+0x13af24>
    4cf4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4cf8:	0a053606 	beq	152518 <__ccfg+0x132570>
    4cfc:	06050106 	streq	r0, [r5], -r6, lsl #2
    4d00:	1f0a0521 	svcne	0x000a0521
    4d04:	3c20202e 	stccc	0, cr2, [r0], #-184	; 0xffffff48
    4d08:	03060405 	movweq	r0, #25605	; 0x6405
    4d0c:	0d056609 	stceq	6, cr6, [r5, #-36]	; 0xffffffdc
    4d10:	20200106 	eorcs	r0, r0, r6, lsl #2
    4d14:	30060405 	andcc	r0, r6, r5, lsl #8
    4d18:	1e060d05 	cdpne	13, 0, cr0, cr6, cr5, {0}
    4d1c:	42060405 	andmi	r0, r6, #83886080	; 0x5000000
    4d20:	01001f02 	tsteq	r0, r2, lsl #30
    4d24:	00230501 	eoreq	r0, r3, r1, lsl #10
    4d28:	00000205 	andeq	r0, r0, r5, lsl #4
    4d2c:	c4030000 	strgt	r0, [r3], #-0
    4d30:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4d34:	23051517 	movwcs	r1, #21783	; 0x5517
    4d38:	01780306 	cmneq	r8, r6, lsl #6
    4d3c:	06020520 	streq	r0, [r2], -r0, lsr #10
    4d40:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    4d44:	0e051303 	cdpeq	3, 0, cr1, cr5, cr3, {0}
    4d48:	0c050106 	stfeqs	f0, [r5], {6}
    4d4c:	2006053c 	andcs	r0, r6, ip, lsr r5
    4d50:	31060305 	tstcc	r6, r5, lsl #6
    4d54:	01060605 	tsteq	r6, r5, lsl #12
    4d58:	30060405 	andcc	r0, r6, r5, lsl #8
    4d5c:	03052606 	movweq	r2, #22022	; 0x5606
    4d60:	06053a06 	streq	r3, [r5], -r6, lsl #20
    4d64:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4d68:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
    4d6c:	08053103 	stmdaeq	r5, {r0, r1, r8, ip, sp}
    4d70:	053c7103 	ldreq	r7, [ip, #-259]!	; 0xfffffefd
    4d74:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    4d78:	20100301 	andscs	r0, r0, r1, lsl #6
    4d7c:	01000902 	tsteq	r0, r2, lsl #18
    4d80:	00160501 	andseq	r0, r6, r1, lsl #10
    4d84:	00000205 	andeq	r0, r0, r5, lsl #4
    4d88:	94030000 	strls	r0, [r3], #-0
    4d8c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    4d90:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4d94:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    4d98:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4d9c:	3d3f0602 	ldccc	6, cr0, [pc, #-8]!	; 4d9c <__exidx_end+0x2164>
    4da0:	4b060105 	blmi	1851bc <__ccfg+0x165214>
    4da4:	01000602 	tsteq	r0, r2, lsl #12
    4da8:	00170501 	andseq	r0, r7, r1, lsl #10
    4dac:	00000205 	andeq	r0, r0, r5, lsl #4
    4db0:	e0030000 	and	r0, r3, r0
    4db4:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4db8:	06170516 			; <UNDEFINED> instruction: 0x06170516
    4dbc:	240e050e 	strcs	r0, [lr], #-1294	; 0xfffffaf2
    4dc0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4dc4:	043f0602 	ldrteq	r0, [pc], #-1538	; 4dcc <__exidx_end+0x2194>
    4dc8:	06350502 	ldrteq	r0, [r5], -r2, lsl #10
    4dcc:	017eb903 	cmneq	lr, r3, lsl #18
    4dd0:	02050104 	andeq	r0, r5, #4, 2
    4dd4:	2001c703 	andcs	ip, r1, r3, lsl #14
    4dd8:	303f5a06 	eorscc	r5, pc, r6, lsl #20
    4ddc:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    4de0:	017eb203 	cmneq	lr, r3, lsl #4
    4de4:	01063505 	tsteq	r6, r5, lsl #10
    4de8:	02050104 	andeq	r0, r5, #4, 2
    4dec:	2001d003 	andcs	sp, r1, r3
    4df0:	35050204 	strcc	r0, [r5, #-516]	; 0xfffffdfc
    4df4:	207eb003 	rsbscs	fp, lr, r3
    4df8:	02050104 	andeq	r0, r5, #4, 2
    4dfc:	01d00306 	bicseq	r0, r0, r6, lsl #6
    4e00:	48053120 	stmdami	r5, {r5, r8, ip, sp}
    4e04:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4e08:	01313106 	teqeq	r1, r6, lsl #2
    4e0c:	29050304 	stmdbcs	r5, {r2, r8, r9}
    4e10:	05015f03 	streq	r5, [r1, #-3843]	; 0xfffff0fd
    4e14:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4e18:	01040106 	tsteq	r4, r6, lsl #2
    4e1c:	03060205 	movweq	r0, #25093	; 0x6205
    4e20:	03044a1c 	movweq	r4, #18972	; 0x4a1c
    4e24:	5f032905 	svcpl	0x00032905
    4e28:	17050501 	strne	r0, [r5, -r1, lsl #10]
    4e2c:	01062d05 	tsteq	r6, r5, lsl #26
    4e30:	02050104 	andeq	r0, r5, #4, 2
    4e34:	2e1c0306 	cdpcs	3, 1, cr0, cr12, cr6, {0}
    4e38:	01014b14 	tsteq	r1, r4, lsl fp
    4e3c:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    4e40:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4e44:	0101000b 	tsteq	r1, fp
    4e48:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    4e4c:	00000002 	andeq	r0, r0, r2
    4e50:	01e10300 	mvneq	r0, r0, lsl #6
    4e54:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    4e58:	054f0602 	strbeq	r0, [pc, #-1538]	; 485e <__exidx_end+0x1c26>
    4e5c:	0a051303 	beq	149a70 <__ccfg+0x129ac8>
    4e60:	06050106 	streq	r0, [r5], -r6, lsl #2
    4e64:	06030520 	streq	r0, [r3], -r0, lsr #10
    4e68:	06060531 			; <UNDEFINED> instruction: 0x06060531
    4e6c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4e70:	03055b30 	movweq	r5, #23344	; 0x5b30
    4e74:	0308054c 	movweq	r0, #34124	; 0x854c
    4e78:	06053c75 			; <UNDEFINED> instruction: 0x06053c75
    4e7c:	01051306 	tsteq	r5, r6, lsl #6
    4e80:	02200c03 	eoreq	r0, r0, #768	; 0x300
    4e84:	01010005 	tsteq	r1, r5
    4e88:	05000d05 	streq	r0, [r0, #-3333]	; 0xfffff2fb
    4e8c:	00000002 	andeq	r0, r0, r2
    4e90:	01fe0300 	mvnseq	r0, r0, lsl #6
    4e94:	03020501 	movweq	r0, #9473	; 0x2501
    4e98:	04010109 	streq	r0, [r1], #-265	; 0xfffffef7
    4e9c:	03290503 			; <UNDEFINED> instruction: 0x03290503
    4ea0:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    4ea4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4ea8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4eac:	3c57030d 	mrrccc	3, 0, r0, r7, cr13
    4eb0:	2d050304 	stccs	3, cr0, [r5, #-16]
    4eb4:	042e2903 	strteq	r2, [lr], #-2307	; 0xfffff6fd
    4eb8:	06020501 	streq	r0, [r2], -r1, lsl #10
    4ebc:	04206003 	strteq	r6, [r0], #-3
    4ec0:	03290503 			; <UNDEFINED> instruction: 0x03290503
    4ec4:	0505011b 	streq	r0, [r5, #-283]	; 0xfffffee5
    4ec8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    4ecc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4ed0:	60030602 	andvs	r0, r3, r2, lsl #12
    4ed4:	052f192e 	streq	r1, [pc, #-2350]!	; 45ae <__exidx_end+0x1976>
    4ed8:	1c050107 	stfnes	f0, [r5], {7}
    4edc:	061e053c 			; <UNDEFINED> instruction: 0x061e053c
    4ee0:	2e020501 	cfsh32cs	mvfx0, mvfx2, #1
    4ee4:	48053106 	stmdami	r5, {r1, r2, r8, ip, sp}
    4ee8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4eec:	1c480532 	cfstr64ne	mvdx0, [r8], {50}	; 0x32
    4ef0:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    4ef4:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    4ef8:	7ee40305 	cdpvc	3, 14, cr0, cr4, cr5, {0}
    4efc:	06350501 	ldrteq	r0, [r5], -r1, lsl #10
    4f00:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4f04:	019f0302 	orrseq	r0, pc, r2, lsl #6
    4f08:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
    4f0c:	7ee10335 	mcrvc	3, 7, r0, cr1, cr5, {1}
    4f10:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4f14:	9f030602 	svcls	0x00030602
    4f18:	04322001 	ldrteq	r2, [r2], #-1
    4f1c:	03040504 	movweq	r0, #17668	; 0x4504
    4f20:	73030110 	movwvc	r0, #12560	; 0x3110
    4f24:	03010501 	movweq	r0, #5377	; 0x1501
    4f28:	0405016b 	streq	r0, [r5], #-363	; 0xfffffe95
    4f2c:	03011603 	movweq	r1, #5635	; 0x1603
    4f30:	03150161 	tsteq	r5, #1073741848	; 0x40000018
    4f34:	6d03661d 	stcvs	6, cr6, [r3, #-116]	; 0xffffff8c
    4f38:	05151301 	ldreq	r1, [r5, #-769]	; 0xfffffcff
    4f3c:	04010612 	streq	r0, [r1], #-1554	; 0xfffff9ee
    4f40:	03040505 	movweq	r0, #17669	; 0x4505
    4f44:	042e01f1 	strteq	r0, [lr], #-497	; 0xfffffe0f
    4f48:	03120504 	tsteq	r2, #4, 10	; 0x1000000
    4f4c:	05207e8f 	streq	r7, [r0, #-3727]!	; 0xfffff171
    4f50:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4f54:	3d130612 	ldccc	6, cr0, [r3, #-72]	; 0xffffffb8
    4f58:	2f3d1305 	svccs	0x003d1305
    4f5c:	052f1205 	streq	r1, [pc, #-517]!	; 4d5f <__exidx_end+0x2127>
    4f60:	12053e11 	andne	r3, r5, #272	; 0x110
    4f64:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    4f68:	132f0604 			; <UNDEFINED> instruction: 0x132f0604
    4f6c:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    4f70:	01061105 	tsteq	r6, r5, lsl #2
    4f74:	1c050504 	cfstr32ne	mvfx0, [r5], {4}
    4f78:	2001d403 	andcs	sp, r1, r3, lsl #8
    4f7c:	051f1405 	ldreq	r1, [pc, #-1029]	; 4b7f <__exidx_end+0x1f47>
    4f80:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
    4f84:	0a051307 	beq	149ba8 <__ccfg+0x129c00>
    4f88:	051b1806 	ldreq	r1, [fp, #-2054]	; 0xfffff7fa
    4f8c:	052f0607 	streq	r0, [pc, #-1543]!	; 498d <__exidx_end+0x1d55>
    4f90:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    4f94:	052f0607 	streq	r0, [pc, #-1543]!	; 4995 <__exidx_end+0x1d5d>
    4f98:	0513060a 	ldreq	r0, [r3, #-1546]	; 0xfffff9f6
    4f9c:	132f0607 			; <UNDEFINED> instruction: 0x132f0607
    4fa0:	01060a05 	tsteq	r6, r5, lsl #20
    4fa4:	2f210d05 	svccs	0x00210d05
    4fa8:	21212f2f 			; <UNDEFINED> instruction: 0x21212f2f
    4fac:	30040521 	andcc	r0, r4, r1, lsr #10
    4fb0:	03060705 	movweq	r0, #26373	; 0x6705
    4fb4:	13133c78 	tstne	r3, #120, 24	; 0x7800
    4fb8:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    4fbc:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    4fc0:	060c052e 	streq	r0, [ip], -lr, lsr #10
    4fc4:	06040521 	streq	r0, [r4], -r1, lsr #10
    4fc8:	13220601 			; <UNDEFINED> instruction: 0x13220601
    4fcc:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    4fd0:	01060a05 	tsteq	r6, r5, lsl #20
    4fd4:	09050104 	stmdbeq	r5, {r2, r8}
    4fd8:	207e9503 	rsbscs	r9, lr, r3, lsl #10
    4fdc:	0a050504 	beq	1463f4 <__ccfg+0x12644c>
    4fe0:	2001eb03 	andcs	lr, r1, r3, lsl #22
    4fe4:	21060405 	tstcs	r6, r5, lsl #8
    4fe8:	01060a05 	tsteq	r6, r5, lsl #20
    4fec:	2f060405 	svccs	0x00060405
    4ff0:	01060a05 	tsteq	r6, r5, lsl #20
    4ff4:	2f060405 	svccs	0x00060405
    4ff8:	01060a05 	tsteq	r6, r5, lsl #20
    4ffc:	2f060405 	svccs	0x00060405
    5000:	01060a05 	tsteq	r6, r5, lsl #20
    5004:	09050104 	stmdbeq	r5, {r2, r8}
    5008:	7e910306 	cdpvc	3, 9, cr0, cr1, cr6, {0}
    500c:	3602052e 	strcc	r0, [r2], -lr, lsr #10
    5010:	053f0905 	ldreq	r0, [pc, #-2309]!	; 4713 <__exidx_end+0x1adb>
    5014:	3c120302 	ldccc	3, cr0, [r2], {2}
    5018:	3d435c3e 	stclcc	12, cr5, [r3, #-248]	; 0xffffff08
    501c:	2506135a 	strcs	r1, [r6, #-858]	; 0xfffffca6
    5020:	0569061b 	strbeq	r0, [r9, #-1563]!	; 0xfffff9e5
    5024:	05010630 	streq	r0, [r1, #-1584]	; 0xfffff9d0
    5028:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    502c:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    5030:	052f0602 	streq	r0, [pc, #-1538]!	; 4a36 <__exidx_end+0x1dfe>
    5034:	051f062d 	ldreq	r0, [pc, #-1581]	; 4a0f <__exidx_end+0x1dd7>
    5038:	01052102 	tsteq	r5, r2, lsl #2
    503c:	03020528 	movweq	r0, #9512	; 0x2528
    5040:	33022e78 	movwcc	r2, #11896	; 0x2e78
    5044:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5048:	0205001e 	andeq	r0, r5, #30
    504c:	00000000 	andeq	r0, r0, r0
    5050:	0103b403 	tsteq	r3, r3, lsl #8
    5054:	13140205 	tstne	r4, #1342177280	; 0x50000000
    5058:	04010903 	streq	r0, [r1], #-2307	; 0xfffff6fd
    505c:	03030502 	movweq	r0, #13570	; 0x3502
    5060:	04017dee 	streq	r7, [r1], #-3566	; 0xfffff212
    5064:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    5068:	01028603 	tsteq	r2, r3, lsl #12
    506c:	30050204 	andcc	r0, r5, r4, lsl #4
    5070:	2e7dfa03 	vaddcs.f32	s31, s26, s6
    5074:	057b3205 	ldrbeq	r3, [fp, #-517]!	; 0xfffffdfb
    5078:	05290603 	streq	r0, [r9, #-1539]!	; 0xfffff9fd
    507c:	32051705 	andcc	r1, r5, #1310720	; 0x140000
    5080:	09050106 	stmdbeq	r5, {r1, r2, r8}
    5084:	0a052106 	beq	14d4a4 <__ccfg+0x12d4fc>
    5088:	03050106 	movweq	r0, #20742	; 0x5106
    508c:	04330620 	ldrteq	r0, [r3], #-1568	; 0xfffff9e0
    5090:	060a0501 	streq	r0, [sl], -r1, lsl #10
    5094:	01028b03 	tsteq	r2, r3, lsl #22
    5098:	30050204 	andcc	r0, r5, r4, lsl #4
    509c:	207df503 	rsbscs	pc, sp, r3, lsl #10
    50a0:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    50a4:	20029e03 	andcs	r9, r2, r3, lsl #28
    50a8:	30050204 	andcc	r0, r5, r4, lsl #4
    50ac:	207de203 	rsbscs	lr, sp, r3, lsl #4
    50b0:	2d050104 	stfcss	f0, [r5, #-16]
    50b4:	20029103 	andcs	r9, r2, r3, lsl #2
    50b8:	30050204 	andcc	r0, r5, r4, lsl #4
    50bc:	2e7def03 	cdpcs	15, 7, cr14, cr13, cr3, {0}
    50c0:	02050104 	andeq	r0, r5, #4, 2
    50c4:	028b0306 	addeq	r0, fp, #402653184	; 0x18000000
    50c8:	06270558 			; <UNDEFINED> instruction: 0x06270558
    50cc:	03050501 	movweq	r0, #21761	; 0x5501
    50d0:	0a05200f 	beq	14d114 <__ccfg+0x12d16c>
    50d4:	052e7103 	streq	r7, [lr, #-259]!	; 0xfffffefd
    50d8:	052f0606 	streq	r0, [pc, #-1542]!	; 4ada <__exidx_end+0x1ea2>
    50dc:	06051303 	streq	r1, [r5], -r3, lsl #6
    50e0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    50e4:	01013d06 	tsteq	r1, r6, lsl #26
    50e8:	06190513 			; <UNDEFINED> instruction: 0x06190513
    50ec:	200d0514 	andcs	r0, sp, r4, lsl r5
    50f0:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    50f4:	06052007 	streq	r2, [r5], -r7
    50f8:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    50fc:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5100:	20210501 	eorcs	r0, r1, r1, lsl #10
    5104:	054a3705 	strbeq	r3, [sl, #-1797]	; 0xfffff8fb
    5108:	053f0605 	ldreq	r0, [pc, #-1541]!	; 4b0b <__exidx_end+0x1ed3>
    510c:	05160615 	ldreq	r0, [r6, #-1557]	; 0xfffff9eb
    5110:	05052a08 	streq	r2, [r5, #-2568]	; 0xfffff5f8
    5114:	1f052406 	svcne	0x00052406
    5118:	13050106 	movwne	r0, #20742	; 0x5106
    511c:	201f0520 	andscs	r0, pc, r0, lsr #10
    5120:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    5124:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    5128:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    512c:	052f0605 	streq	r0, [pc, #-1541]!	; 4b2f <__exidx_end+0x1ef7>
    5130:	0f056e04 	svceq	0x00056e04
    5134:	13050106 	movwne	r0, #20742	; 0x5106
    5138:	2e6a0306 	cdpcs	3, 6, cr0, cr10, cr6, {0}
    513c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5140:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    5144:	05052f1b 	streq	r2, [r5, #-3867]	; 0xfffff0e5
    5148:	3c120306 	ldccc	3, cr0, [r2], {6}
    514c:	0a030205 	beq	c5968 <__ccfg+0xa59c0>
    5150:	0605054a 	streq	r0, [r5], -sl, asr #10
    5154:	06030501 	streq	r0, [r3], -r1, lsl #10
    5158:	14010121 	strne	r0, [r1], #-289	; 0xfffffedf
    515c:	01050101 	tsteq	r5, r1, lsl #2
    5160:	03053106 	movweq	r3, #20742	; 0x5106
    5164:	6901052b 	stmdbvs	r1, {r0, r1, r3, r5, r8, sl}
    5168:	01001302 	tsteq	r0, r2, lsl #6
    516c:	00010501 	andeq	r0, r1, r1, lsl #10
    5170:	00000205 	andeq	r0, r0, r5, lsl #4
    5174:	8c030000 	stchi	0, cr0, [r3], {-0}
    5178:	06010104 	streq	r0, [r1], -r4, lsl #2
    517c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5180:	05820a03 	streq	r0, [r2, #2563]	; 0xa03
    5184:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5188:	04052006 	streq	r2, [r5], #-6
    518c:	05304c06 	ldreq	r4, [r0, #-3078]!	; 0xfffff3fa
    5190:	0e054f03 	cdpeq	15, 0, cr4, cr5, cr3, {0}
    5194:	06050106 	streq	r0, [r5], -r6, lsl #2
    5198:	06040520 	streq	r0, [r4], -r0, lsr #10
    519c:	0607054b 	streq	r0, [r7], -fp, asr #10
    51a0:	06050501 	streq	r0, [r5], -r1, lsl #10
    51a4:	36030521 	strcc	r0, [r3], -r1, lsr #10
    51a8:	01060e05 	tsteq	r6, r5, lsl #28
    51ac:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    51b0:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    51b4:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    51b8:	0705581b 	smladeq	r5, fp, r8, r5
    51bc:	06050520 	streq	r0, [r5], -r0, lsr #10
    51c0:	05130633 	ldreq	r0, [r3, #-1587]	; 0xfffff9cd
    51c4:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    51c8:	1f0c0521 	svcne	0x000c0521
    51cc:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    51d0:	05051f0c 	streq	r1, [r5, #-3852]	; 0xfffff0f4
    51d4:	06012106 	streq	r2, [r1], -r6, lsl #2
    51d8:	2e062e20 	cdpcs	14, 0, cr2, cr6, cr0, {1}
    51dc:	72030a05 	andvc	r0, r3, #20480	; 0x5000
    51e0:	060d054a 	streq	r0, [sp], -sl, asr #10
    51e4:	06040501 	streq	r0, [r4], -r1, lsl #10
    51e8:	03020530 	movweq	r0, #9520	; 0x2530
    51ec:	05017dde 	streq	r7, [r1, #-3550]	; 0xfffff222
    51f0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    51f4:	88030602 	stmdahi	r3, {r1, r9, sl}
    51f8:	27052e01 	strcs	r2, [r5, -r1, lsl #28]
    51fc:	0a050106 	beq	14561c <__ccfg+0x125674>
    5200:	06060520 	streq	r0, [r6], -r0, lsr #10
    5204:	1303052f 	movwne	r0, #13615	; 0x352f
    5208:	01060e05 	tsteq	r6, r5, lsl #28
    520c:	2d061305 	stccs	3, cr1, [r6, #-20]	; 0xffffffec
    5210:	01061b05 	tsteq	r6, r5, lsl #22
    5214:	20060605 	andcs	r0, r6, r5, lsl #12
    5218:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    521c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5220:	051f0613 	ldreq	r0, [pc, #-1555]	; 4c15 <__exidx_end+0x1fdd>
    5224:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5228:	47033016 	smladmi	r3, r6, r0, r3
    522c:	05010174 	streq	r0, [r1, #-372]	; 0xfffffe8c
    5230:	01cd0304 	biceq	r0, sp, r4, lsl #6
    5234:	03020501 	movweq	r0, #9473	; 0x2501
    5238:	13017ede 	movwne	r7, #7902	; 0x1ede
    523c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    5240:	aa030601 	bge	c6a4c <__ccfg+0xa6aa4>
    5244:	01154a01 	tsteq	r5, r1, lsl #20
    5248:	08051401 	stmdaeq	r5, {r0, sl, ip}
    524c:	10050106 	andne	r0, r5, r6, lsl #2
    5250:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    5254:	22060605 	andcs	r0, r6, #5242880	; 0x500000
    5258:	01062905 	tsteq	r6, r5, lsl #18
    525c:	31060505 	tstcc	r6, r5, lsl #10
    5260:	01061b05 	tsteq	r6, r5, lsl #22
    5264:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    5268:	01060605 	tsteq	r6, r5, lsl #12
    526c:	30060405 	andcc	r0, r6, r5, lsl #8
    5270:	060f054b 	streq	r0, [pc], -fp, asr #10
    5274:	20070501 	andcs	r0, r7, r1, lsl #10
    5278:	30060505 	andcc	r0, r6, r5, lsl #10
    527c:	05350405 	ldreq	r0, [r5, #-1029]!	; 0xfffffbfb
    5280:	0e052a0b 	vmlaeq.f32	s4, s10, s22
    5284:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5288:	03053006 	movweq	r3, #20486	; 0x5006
    528c:	0607056b 	streq	r0, [r7], -fp, ror #10
    5290:	20060501 	andcs	r0, r6, r1, lsl #10
    5294:	33060405 	movwcc	r0, #25605	; 0x6405
    5298:	07054b59 	smlsdeq	r5, r9, fp, r4
    529c:	03050106 	movweq	r0, #20742	; 0x5106
    52a0:	4a100306 	bmi	405ec0 <__ccfg+0x3e5f18>
    52a4:	9e030205 	cdpls	2, 0, cr0, cr3, cr5, {0}
    52a8:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
    52ac:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    52b0:	00d60306 	sbcseq	r0, r6, r6, lsl #6
    52b4:	05010158 	streq	r0, [r1, #-344]	; 0xfffffea8
    52b8:	028d0303 	addeq	r0, sp, #201326592	; 0xc000000
    52bc:	2e1e0301 	cdpcs	3, 1, cr0, cr14, cr1, {0}
    52c0:	01061905 	tsteq	r6, r5, lsl #18
    52c4:	05213105 	streq	r3, [r1, #-261]!	; 0xfffffefb
    52c8:	03052d19 	movweq	r2, #23833	; 0x5d19
    52cc:	31052106 	tstcc	r5, r6, lsl #2
    52d0:	03050106 	movweq	r0, #20742	; 0x5106
    52d4:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    52d8:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    52dc:	06070532 			; <UNDEFINED> instruction: 0x06070532
    52e0:	20060501 	andcs	r0, r6, r1, lsl #10
    52e4:	5b060305 	blpl	185f00 <__ccfg+0x165f58>
    52e8:	01060805 	tsteq	r6, r5, lsl #16
    52ec:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    52f0:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    52f4:	13054103 	movwne	r4, #20739	; 0x5103
    52f8:	06050106 	streq	r0, [r5], -r6, lsl #2
    52fc:	0604052e 	streq	r0, [r4], -lr, lsr #10
    5300:	0607054b 	streq	r0, [r7], -fp, asr #10
    5304:	06050501 	streq	r0, [r5], -r1, lsl #10
    5308:	061b0541 	ldreq	r0, [fp], -r1, asr #10
    530c:	06050501 	streq	r0, [r5], -r1, lsl #10
    5310:	0633052f 	ldrteq	r0, [r3], -pc, lsr #10
    5314:	06050501 	streq	r0, [r5], -r1, lsl #10
    5318:	04052f3e 	streq	r2, [r5], #-3902	; 0xfffff0c2
    531c:	060b053f 			; <UNDEFINED> instruction: 0x060b053f
    5320:	06040501 	streq	r0, [r4], -r1, lsl #10
    5324:	013c0903 	teqeq	ip, r3, lsl #18
    5328:	06030501 	streq	r0, [r3], -r1, lsl #10
    532c:	5800c303 	stmdapl	r0, {r0, r1, r8, r9, lr, pc}
    5330:	6d034206 	sfmvs	f4, 4, [r3, #-24]	; 0xffffffe8
    5334:	0a053d20 	beq	1547bc <__ccfg+0x134814>
    5338:	03050106 	movweq	r0, #20742	; 0x5106
    533c:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    5340:	2074030a 	rsbscs	r0, r4, sl, lsl #6
    5344:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    5348:	01060b05 	tsteq	r6, r5, lsl #22
    534c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    5350:	03150101 	tsteq	r5, #1073741824	; 0x40000000
    5354:	0705200b 	streq	r2, [r5, -fp]
    5358:	06050106 	streq	r0, [r5], -r6, lsl #2
    535c:	581f052e 	ldmdapl	pc, {r1, r2, r3, r5, r8, sl}	; <UNPREDICTABLE>
    5360:	053d0705 	ldreq	r0, [sp, #-1797]!	; 0xfffff8fb
    5364:	0405493e 	streq	r4, [r5], #-2366	; 0xfffff6c2
    5368:	01053e06 	tsteq	r5, r6, lsl #28
    536c:	2002013f 	andcs	r0, r2, pc, lsr r1
    5370:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5374:	0205001f 	andeq	r0, r5, #31
    5378:	000015a8 	andeq	r1, r0, r8, lsr #11
    537c:	0103eb03 	tsteq	r3, r3, lsl #22
    5380:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    5384:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
    5388:	05052506 	streq	r2, [r5, #-1286]	; 0xfffffafa
    538c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5390:	05020423 	streq	r0, [r2, #-1059]	; 0xfffffbdd
    5394:	b0030630 	andlt	r0, r3, r0, lsr r6
    5398:	0305667e 	movweq	r6, #22142	; 0x567e
    539c:	05051b06 	streq	r1, [r5, #-2822]	; 0xfffff4fa
    53a0:	06300517 			; <UNDEFINED> instruction: 0x06300517
    53a4:	060a0501 	streq	r0, [sl], -r1, lsl #10
    53a8:	060b0521 	streq	r0, [fp], -r1, lsr #10
    53ac:	20030501 	andcs	r0, r3, r1, lsl #10
    53b0:	02050104 	andeq	r0, r5, #4, 2
    53b4:	01d60306 	bicseq	r0, r6, r6, lsl #6
    53b8:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    53bc:	7e810303 	cdpvc	3, 8, cr0, cr1, cr3, {0}
    53c0:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    53c4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    53c8:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    53cc:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    53d0:	7dfe0332 	ldclvc	3, cr0, [lr, #200]!	; 0xc8
    53d4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    53d8:	02820302 	addeq	r0, r2, #134217728	; 0x8000000
    53dc:	2e82062e 	cdpcs	6, 8, cr0, cr2, cr14, {1}
    53e0:	14014a58 	strne	r4, [r1], #-2648	; 0xfffff5a8
    53e4:	01055801 	tsteq	r5, r1, lsl #16
    53e8:	0d021306 	stceq	3, cr1, [r2, #-24]	; 0xffffffe8
    53ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    53f0:	02050025 	andeq	r0, r5, #37	; 0x25
    53f4:	00000000 	andeq	r0, r0, r0
    53f8:	0107d603 	tsteq	r7, r3, lsl #12
    53fc:	09030205 	stmdbeq	r3, {r0, r2, r9}
    5400:	06250501 	strteq	r0, [r5], -r1, lsl #10
    5404:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    5408:	2e09030d 	cdpcs	3, 0, cr0, cr9, cr13, {0}
    540c:	77032505 	strvc	r2, [r3, -r5, lsl #10]
    5410:	03050520 	movweq	r0, #21792	; 0x5520
    5414:	03052009 	movweq	r2, #20489	; 0x5009
    5418:	36063006 	strcc	r3, [r6], -r6
    541c:	03060205 	movweq	r0, #25093	; 0x6205
    5420:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    5424:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5428:	0e052406 	cdpeq	4, 0, cr2, cr5, cr6, {0}
    542c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5430:	06030520 	streq	r0, [r3], -r0, lsr #10
    5434:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5438:	06020537 			; <UNDEFINED> instruction: 0x06020537
    543c:	06040528 	streq	r0, [r4], -r8, lsr #10
    5440:	017ea103 	cmneq	lr, r3, lsl #2
    5444:	df030905 	svcle	0x00030905
    5448:	0e052001 	cdpeq	0, 0, cr2, cr5, cr1, {0}
    544c:	2e7eac03 	cdpcs	12, 7, cr10, cr14, cr3, {0}
    5450:	05281305 	streq	r1, [r8, #-773]!	; 0xfffffcfb
    5454:	01cc030b 	biceq	r0, ip, fp, lsl #6
    5458:	0602052e 	streq	r0, [r2], -lr, lsr #10
    545c:	7e9b0323 	cdpvc	3, 9, cr0, cr11, cr3, {1}
    5460:	13141301 	tstne	r4, #67108864	; 0x4000000
    5464:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    5468:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
    546c:	055d0603 	ldrbeq	r0, [sp, #-1539]	; 0xfffff9fd
    5470:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5474:	052f0604 	streq	r0, [pc, #-1540]!	; 4e78 <__exidx_end+0x2240>
    5478:	0e055a03 	vmlaeq.f32	s10, s10, s6
    547c:	03050106 	movweq	r0, #20742	; 0x5106
    5480:	06053006 	streq	r3, [r5], -r6
    5484:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5488:	13053006 	movwne	r3, #20486	; 0x5006
    548c:	03050106 	movweq	r0, #20742	; 0x5106
    5490:	13133206 	tstne	r3, #1610612736	; 0x60000000
    5494:	14060605 	strne	r0, [r6], #-1541	; 0xfffff9fb
    5498:	051f1705 	ldreq	r1, [pc, #-1797]	; 4d9b <__exidx_end+0x2163>
    549c:	17052106 	strne	r2, [r5, -r6, lsl #2]
    54a0:	2b13051f 	blcs	4c6924 <__ccfg+0x4a697c>
    54a4:	31060305 	tstcc	r6, r5, lsl #6
    54a8:	01060e05 	tsteq	r6, r5, lsl #28
    54ac:	21060305 	tstcs	r6, r5, lsl #6
    54b0:	01060605 	tsteq	r6, r5, lsl #12
    54b4:	26060205 	strcs	r0, [r6], -r5, lsl #4
    54b8:	01061105 	tsteq	r6, r5, lsl #2
    54bc:	23060205 	movwcs	r0, #25093	; 0x6205
    54c0:	01061a05 	tsteq	r6, r5, lsl #20
    54c4:	053c0905 	ldreq	r0, [ip, #-2309]!	; 0xfffff6fb
    54c8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    54cc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    54d0:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    54d4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    54d8:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    54dc:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    54e0:	0b052002 	bleq	14d4f0 <__ccfg+0x12d548>
    54e4:	2001c003 	andcs	ip, r1, r3
    54e8:	c0031505 	andgt	r1, r3, r5, lsl #10
    54ec:	0205207e 	andeq	r2, r5, #126	; 0x7e
    54f0:	19052306 	stmdbne	r5, {r1, r2, r8, r9, sp}
    54f4:	0b050106 	bleq	145914 <__ccfg+0x12596c>
    54f8:	2001bd03 	andcs	fp, r1, r3, lsl #26
    54fc:	c3031905 	movwgt	r1, #14597	; 0x3905
    5500:	0205207e 	andeq	r2, r5, #126	; 0x7e
    5504:	15132306 	ldrne	r2, [r3, #-774]	; 0xfffffcfa
    5508:	25051613 	strcs	r1, [r5, #-1555]	; 0xfffff9ed
    550c:	01770306 	cmneq	r7, r6, lsl #6
    5510:	03060205 	movweq	r0, #25093	; 0x6205
    5514:	0905660c 	stmdbeq	r5, {r2, r3, r9, sl, sp, lr}
    5518:	0b050106 	bleq	145938 <__ccfg+0x125990>
    551c:	2001ae03 	andcs	sl, r1, r3, lsl #28
    5520:	d2030905 	andle	r0, r3, #81920	; 0x14000
    5524:	02052e7e 	andeq	r2, r5, #2016	; 0x7e0
    5528:	01ab0306 			; <UNDEFINED> instruction: 0x01ab0306
    552c:	0609052e 	streq	r0, [r9], -lr, lsr #10
    5530:	06020501 	streq	r0, [r2], -r1, lsl #10
    5534:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    5538:	2e090501 	cfsh32cs	mvfx0, mvfx9, #1
    553c:	05270205 	streq	r0, [r7, #-517]!	; 0xfffffdfb
    5540:	2e790309 	cdpcs	3, 7, cr0, cr9, cr9, {0}
    5544:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    5548:	01130101 	tsteq	r3, r1, lsl #2
    554c:	01011301 	tsteq	r1, r1, lsl #6
    5550:	053f4f15 	ldreq	r4, [pc, #-3861]!	; 4643 <__exidx_end+0x1a0b>
    5554:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5558:	02054a0a 	andeq	r4, r5, #40960	; 0xa000
    555c:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    5560:	03050106 	movweq	r0, #20742	; 0x5106
    5564:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    5568:	06220560 	strteq	r0, [r2], -r0, ror #10
    556c:	03440501 	movteq	r0, #17665	; 0x4501
    5570:	053c7ba0 	ldreq	r7, [ip, #-2976]!	; 0xfffff460
    5574:	04e00322 	strbteq	r0, [r0], #802	; 0x322
    5578:	06020520 	streq	r0, [r2], -r0, lsr #10
    557c:	7b9b0324 	blvc	fe6c6214 <_estack+0xde6c1214>
    5580:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    5584:	06020501 	streq	r0, [r2], -r1, lsl #10
    5588:	0644053d 			; <UNDEFINED> instruction: 0x0644053d
    558c:	2d2e0501 	cfstr32cs	mvfx0, [lr, #-4]!
    5590:	03060205 	movweq	r0, #25093	; 0x6205
    5594:	200804e7 	andcs	r0, r8, r7, ror #9
    5598:	06280532 			; <UNDEFINED> instruction: 0x06280532
    559c:	23020501 	movwcs	r0, #9473	; 0x2501
    55a0:	051d2805 	ldreq	r2, [sp, #-2053]	; 0xfffff7fb
    55a4:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    55a8:	02052f09 	andeq	r2, r5, #9, 30	; 0x24
    55ac:	0630054e 	ldrteq	r0, [r0], -lr, asr #10
    55b0:	2f010501 	svccs	0x00010501
    55b4:	01002702 	tsteq	r0, r2, lsl #14
    55b8:	0001a101 	andeq	sl, r1, r1, lsl #2
    55bc:	26000300 	strcs	r0, [r0], -r0, lsl #6
    55c0:	02000001 	andeq	r0, r0, #1
    55c4:	0d0efb01 	vstreq	d15, [lr, #-4]
    55c8:	01010100 	mrseq	r0, (UNDEF: 17)
    55cc:	00000001 	andeq	r0, r0, r1
    55d0:	01000001 	tsteq	r0, r1
    55d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5520 <__exidx_end+0x28e8>
    55d8:	616d2f65 	cmnvs	sp, r5, ror #30
    55dc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    55e0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    55e4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    55e8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    55ec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    55f0:	4349502f 	movtmi	r5, #36911	; 0x902f
    55f4:	502f534f 	eorpl	r5, pc, pc, asr #6
    55f8:	534f6369 	movtpl	r6, #62313	; 0xf369
    55fc:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    5600:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    5604:	61697265 	cmnvs	r9, r5, ror #4
    5608:	752f006c 	strvc	r0, [pc, #-108]!	; 55a4 <__exidx_end+0x296c>
    560c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 5448 <__exidx_end+0x2810>
    5610:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5614:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5618:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    561c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5620:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5624:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5628:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    562c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5630:	2f006564 	svccs	0x00006564
    5634:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5638:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    563c:	2f6e6974 	svccs	0x006e6974
    5640:	6b736544 	blvs	1cdeb58 <__ccfg+0x1cbebb0>
    5644:	2f706f74 	svccs	0x00706f74
    5648:	4f534c4f 	svcmi	0x00534c4f
    564c:	2f54454e 	svccs	0x0054454e
    5650:	4f434950 	svcmi	0x00434950
    5654:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5658:	2f534f63 	svccs	0x00534f63
    565c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5660:	2f005858 	svccs	0x00005858
    5664:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5668:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    566c:	2f6e6974 	svccs	0x006e6974
    5670:	6b736544 	blvs	1cdeb88 <__ccfg+0x1cbebe0>
    5674:	2f706f74 	svccs	0x00706f74
    5678:	4f534c4f 	svcmi	0x00534c4f
    567c:	2f54454e 	svccs	0x0054454e
    5680:	4f434950 	svcmi	0x00434950
    5684:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5688:	00534f63 	subseq	r4, r3, r3, ror #30
    568c:	6f5f5f00 	svcvs	0x005f5f00
    5690:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
    5694:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    5698:	0100632e 	tsteq	r0, lr, lsr #6
    569c:	74730000 	ldrbtvc	r0, [r3], #-0
    56a0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    56a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    56a8:	72610000 	rsbvc	r0, r1, #0
    56ac:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    56b0:	00000300 	andeq	r0, r0, r0, lsl #6
    56b4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    56b8:	0300682e 	movweq	r6, #2094	; 0x82e
    56bc:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    56c0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    56c4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    56c8:	00000300 	andeq	r0, r0, r0, lsl #6
    56cc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    56d0:	5f736e6f 	svcpl	0x00736e6f
    56d4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    56d8:	00030068 	andeq	r0, r3, r8, rrx
    56dc:	73797300 	cmnvc	r9, #0, 6
    56e0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    56e4:	00000400 	andeq	r0, r0, r0, lsl #8
    56e8:	00010500 	andeq	r0, r1, r0, lsl #10
    56ec:	16180205 	ldrne	r0, [r8], -r5, lsl #4
    56f0:	1c030000 	stcne	0, cr0, [r3], {-0}
    56f4:	20060101 	andcs	r0, r6, r1, lsl #2
    56f8:	26033c06 	strcs	r3, [r3], -r6, lsl #24
    56fc:	0205013c 	andeq	r0, r5, #60, 2
    5700:	13585f03 	cmpne	r8, #3, 30
    5704:	01011513 	tsteq	r1, r3, lsl r5
    5708:	06060513 			; <UNDEFINED> instruction: 0x06060513
    570c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5710:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    5714:	06030501 	streq	r0, [r3], -r1, lsl #10
    5718:	0609052f 	streq	r0, [r9], -pc, lsr #10
    571c:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    5720:	05280a05 	streq	r0, [r8, #-2565]!	; 0xfffff5fb
    5724:	052e0602 	streq	r0, [lr, #-1538]!	; 0xfffff9fe
    5728:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    572c:	05830602 	streq	r0, [r3, #1538]	; 0x602
    5730:	21010606 	tstcs	r1, r6, lsl #12
    5734:	051f211f 	ldreq	r2, [pc, #-287]	; 561d <__exidx_end+0x29e5>
    5738:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    573c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5740:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    5744:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5748:	3d300603 	ldccc	6, cr0, [r0, #-12]!
    574c:	054a7403 	strbeq	r7, [sl, #-1027]	; 0xfffffbfd
    5750:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5754:	07052011 	smladeq	r5, r1, r0, r2
    5758:	00080220 	andeq	r0, r8, r0, lsr #4
    575c:	024b0101 	subeq	r0, fp, #1073741824	; 0x40000000
    5760:	00030000 	andeq	r0, r3, r0
    5764:	00000125 	andeq	r0, r0, r5, lsr #2
    5768:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    576c:	0101000d 	tsteq	r1, sp
    5770:	00000101 	andeq	r0, r0, r1, lsl #2
    5774:	00000100 	andeq	r0, r0, r0, lsl #2
    5778:	6f682f01 	svcvs	0x00682f01
    577c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 55d0 <__exidx_end+0x2998>
    5780:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5784:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5788:	6f746b73 	svcvs	0x00746b73
    578c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5790:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5794:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5798:	2f534f43 	svccs	0x00534f43
    579c:	4f636950 	svcmi	0x00636950
    57a0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    57a4:	2f736269 	svccs	0x00736269
    57a8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    57ac:	2f006c61 	svccs	0x00006c61
    57b0:	2f727375 	svccs	0x00727375
    57b4:	2f62696c 	svccs	0x0062696c
    57b8:	2f636367 	svccs	0x00636367
    57bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    57c0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    57c4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    57c8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    57cc:	2f312e32 	svccs	0x00312e32
    57d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    57d4:	00656475 	rsbeq	r6, r5, r5, ror r4
    57d8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5724 <__exidx_end+0x2aec>
    57dc:	616d2f65 	cmnvs	sp, r5, ror #30
    57e0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    57e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    57e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    57ec:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    57f0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    57f4:	4349502f 	movtmi	r5, #36911	; 0x902f
    57f8:	502f534f 	eorpl	r5, pc, pc, asr #6
    57fc:	534f6369 	movtpl	r6, #62313	; 0xf369
    5800:	3143432f 	cmpcc	r3, pc, lsr #6
    5804:	00585833 	subseq	r5, r8, r3, lsr r8
    5808:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5754 <__exidx_end+0x2b1c>
    580c:	616d2f65 	cmnvs	sp, r5, ror #30
    5810:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5814:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5818:	706f746b 	rsbvc	r7, pc, fp, ror #8
    581c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5820:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5824:	4349502f 	movtmi	r5, #36911	; 0x902f
    5828:	502f534f 	eorpl	r5, pc, pc, asr #6
    582c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5830:	5f5f0000 	svcpl	0x005f0000
    5834:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    5838:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    583c:	0100632e 	tsteq	r0, lr, lsr #6
    5840:	74730000 	ldrbtvc	r0, [r3], #-0
    5844:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5848:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    584c:	72610000 	rsbvc	r0, r1, #0
    5850:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5854:	00000300 	andeq	r0, r0, r0, lsl #6
    5858:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    585c:	0300682e 	movweq	r6, #2094	; 0x82e
    5860:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    5864:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5868:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    586c:	00000300 	andeq	r0, r0, r0, lsl #6
    5870:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    5874:	5f736e6f 	svcpl	0x00736e6f
    5878:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    587c:	00030068 	andeq	r0, r3, r8, rrx
    5880:	73797300 	cmnvc	r9, #0, 6
    5884:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    5888:	00000400 	andeq	r0, r0, r0, lsl #8
    588c:	00010500 	andeq	r0, r1, r0, lsl #10
    5890:	16880205 	strne	r0, [r8], r5, lsl #4
    5894:	22030000 	andcs	r0, r3, #0
    5898:	20060101 	andcs	r0, r6, r1, lsl #2
    589c:	02053c06 	andeq	r3, r5, #1536	; 0x600
    58a0:	1613136b 	ldrne	r1, [r3], -fp, ror #6
    58a4:	01061005 	tsteq	r6, r5
    58a8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    58ac:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    58b0:	1d053f02 	stcne	15, cr3, [r5, #-8]
    58b4:	0b050106 	bleq	145cd4 <__ccfg+0x125d2c>
    58b8:	201d053c 	andscs	r0, sp, ip, lsr r5
    58bc:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    58c0:	03052005 	movweq	r2, #20485	; 0x5005
    58c4:	052f2406 	streq	r2, [pc, #-1030]!	; 54c6 <__exidx_end+0x288e>
    58c8:	06053002 	streq	r3, [r5], -r2
    58cc:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    58d0:	052f061f 	streq	r0, [pc, #-1567]!	; 52b9 <__exidx_end+0x2681>
    58d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    58d8:	01300602 	teqeq	r0, r2, lsl #12
    58dc:	05831601 	streq	r1, [r3, #1537]	; 0x601
    58e0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    58e4:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    58e8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    58ec:	052f0604 	streq	r0, [pc, #-1540]!	; 52f0 <__exidx_end+0x26b8>
    58f0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    58f4:	07052104 	streq	r2, [r5, -r4, lsl #2]
    58f8:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
    58fc:	31030521 	tstcc	r3, r1, lsr #10
    5900:	01060705 	tsteq	r6, r5, lsl #14
    5904:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5908:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    590c:	06053e02 	streq	r3, [r5], -r2, lsl #28
    5910:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5914:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    5918:	2f060305 	svccs	0x00060305
    591c:	01060805 	tsteq	r6, r5, lsl #16
    5920:	2f060305 	svccs	0x00060305
    5924:	01060d05 	tsteq	r6, r5, lsl #26
    5928:	2f060305 	svccs	0x00060305
    592c:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    5930:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5934:	03052e05 	movweq	r2, #24069	; 0x5e05
    5938:	06052106 	streq	r2, [r5], -r6, lsl #2
    593c:	1f210106 	svcne	0x00210106
    5940:	2f060305 	svccs	0x00060305
    5944:	01060605 	tsteq	r6, r5, lsl #12
    5948:	23060205 	movwcs	r0, #25093	; 0x6205
    594c:	06059140 	streq	r9, [r5], -r0, asr #2
    5950:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5954:	0c053d06 	stceq	13, cr3, [r5], {6}
    5958:	11050106 	tstne	r5, r6, lsl #2
    595c:	2107053c 	tstcs	r7, ip, lsr r5
    5960:	4b060205 	blmi	18617c <__ccfg+0x1661d4>
    5964:	01060505 	tsteq	r6, r5, lsl #10
    5968:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    596c:	01060a05 	tsteq	r6, r5, lsl #20
    5970:	059f0605 	ldreq	r0, [pc, #1541]	; 5f7d <__exidx_end+0x3345>
    5974:	02051f0a 	andeq	r1, r5, #10, 30	; 0x28
    5978:	06052106 	streq	r2, [r5], -r6, lsl #2
    597c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5980:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    5984:	03050106 	movweq	r0, #20742	; 0x5106
    5988:	0d052106 	stfeqs	f2, [r5, #-24]	; 0xffffffe8
    598c:	03050106 	movweq	r0, #20742	; 0x5106
    5990:	02052f06 	andeq	r2, r5, #6, 30
    5994:	06060530 			; <UNDEFINED> instruction: 0x06060530
    5998:	06020501 	streq	r0, [r2], -r1, lsl #10
    599c:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    59a0:	3a020522 	bcc	86e30 <__ccfg+0x66e88>
    59a4:	30060105 	andcc	r0, r6, r5, lsl #2
    59a8:	01000d02 	tsteq	r0, r2, lsl #26
    59ac:	0003bd01 	andeq	fp, r3, r1, lsl #26
    59b0:	3a000300 	bcc	65b8 <__exidx_end+0x3980>
    59b4:	02000001 	andeq	r0, r0, #1
    59b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    59bc:	01010100 	mrseq	r0, (UNDEF: 17)
    59c0:	00000001 	andeq	r0, r0, r1
    59c4:	01000001 	tsteq	r0, r1
    59c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5914 <__exidx_end+0x2cdc>
    59cc:	616d2f65 	cmnvs	sp, r5, ror #30
    59d0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    59d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    59d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    59dc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    59e0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    59e4:	4349502f 	movtmi	r5, #36911	; 0x902f
    59e8:	502f534f 	eorpl	r5, pc, pc, asr #6
    59ec:	534f6369 	movtpl	r6, #62313	; 0xf369
    59f0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    59f4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    59f8:	61697265 	cmnvs	r9, r5, ror #4
    59fc:	752f006c 	strvc	r0, [pc, #-108]!	; 5998 <__exidx_end+0x2d60>
    5a00:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 583c <__exidx_end+0x2c04>
    5a04:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    5a08:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    5a0c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5a10:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5a14:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5a18:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    5a1c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    5a20:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5a24:	2f006564 	svccs	0x00006564
    5a28:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5a2c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5a30:	2f6e6974 	svccs	0x006e6974
    5a34:	6b736544 	blvs	1cdef4c <__ccfg+0x1cbefa4>
    5a38:	2f706f74 	svccs	0x00706f74
    5a3c:	4f534c4f 	svcmi	0x00534c4f
    5a40:	2f54454e 	svccs	0x0054454e
    5a44:	4f434950 	svcmi	0x00434950
    5a48:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5a4c:	2f534f63 	svccs	0x00534f63
    5a50:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5a54:	2f005858 	svccs	0x00005858
    5a58:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    5a5c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5a60:	2f6e6974 	svccs	0x006e6974
    5a64:	6b736544 	blvs	1cdef7c <__ccfg+0x1cbefd4>
    5a68:	2f706f74 	svccs	0x00706f74
    5a6c:	4f534c4f 	svcmi	0x00534c4f
    5a70:	2f54454e 	svccs	0x0054454e
    5a74:	4f434950 	svcmi	0x00434950
    5a78:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    5a7c:	00534f63 	subseq	r4, r3, r3, ror #30
    5a80:	6f667600 	svcvs	0x00667600
    5a84:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
    5a88:	00000100 	andeq	r0, r0, r0, lsl #2
    5a8c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5a90:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5a94:	00000200 	andeq	r0, r0, r0, lsl #4
    5a98:	61647473 	smcvs	18243	; 0x4743
    5a9c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    5aa0:	00000200 	andeq	r0, r0, r0, lsl #4
    5aa4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5aa8:	0300682e 	movweq	r6, #2094	; 0x82e
    5aac:	616d0000 	cmnvs	sp, r0
    5ab0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5ab4:	00000300 	andeq	r0, r0, r0, lsl #6
    5ab8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    5abc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5ac0:	0300682e 	movweq	r6, #2094	; 0x82e
    5ac4:	75620000 	strbvc	r0, [r2, #-0]!
    5ac8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    5acc:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5ad0:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5ad4:	73000003 	movwvc	r0, #3
    5ad8:	6f697379 	svcvs	0x00697379
    5adc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5ae0:	623c0000 	eorsvs	r0, ip, #0
    5ae4:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    5ae8:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    5aec:	00000000 	andeq	r0, r0, r0
    5af0:	00150500 	andseq	r0, r5, r0, lsl #10
    5af4:	17a40205 	strne	r0, [r4, r5, lsl #4]!
    5af8:	0c030000 	stceq	0, cr0, [r3], {-0}
    5afc:	13030501 	movwne	r0, #13569	; 0x3501
    5b00:	01060605 	tsteq	r6, r5, lsl #12
    5b04:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
    5b08:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5b0c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    5b10:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    5b14:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    5b18:	01025902 	tsteq	r2, r2, lsl #18
    5b1c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5b20:	02050043 	andeq	r0, r5, #67	; 0x43
    5b24:	000017c4 	andeq	r1, r0, r4, asr #15
    5b28:	052e0619 	streq	r0, [lr, #-1561]!	; 0xfffff9e7
    5b2c:	04052006 	streq	r2, [r5], #-6
    5b30:	052e1d03 	streq	r1, [lr, #-3331]!	; 0xfffff2fd
    5b34:	20280305 	eorcs	r0, r8, r5, lsl #6
    5b38:	71030705 	tstvc	r3, r5, lsl #14
    5b3c:	03060520 	movweq	r0, #25888	; 0x6520
    5b40:	0205204a 	andeq	r2, r5, #74	; 0x4a
    5b44:	14133e06 	ldrne	r3, [r3], #-3590	; 0xfffff1fa
    5b48:	05180305 	ldreq	r0, [r8, #-773]	; 0xfffffcfb
    5b4c:	01120302 	tsteq	r2, r2, lsl #6
    5b50:	01060405 	tsteq	r6, r5, lsl #8
    5b54:	30060205 	andcc	r0, r6, r5, lsl #4
    5b58:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    5b5c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5b60:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    5b64:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5b68:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5b6c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5b70:	05052e10 	streq	r2, [r5, #-3600]	; 0xfffff1f0
    5b74:	2d070521 	cfstr32cs	mvfx0, [r7, #-132]	; 0xffffff7c
    5b78:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    5b7c:	0304053d 	movweq	r0, #17725	; 0x453d
    5b80:	590100da 	stmdbpl	r1, {r1, r3, r4, r6, r7}
    5b84:	01060705 	tsteq	r6, r5, lsl #14
    5b88:	03060405 	movweq	r0, #25605	; 0x6405
    5b8c:	054a7fa7 	strbeq	r7, [sl, #-4007]	; 0xfffff059
    5b90:	c2030605 	andgt	r0, r3, #5242880	; 0x500000
    5b94:	2f062000 	svccs	0x00062000
    5b98:	10061205 	andne	r1, r6, r5, lsl #4
    5b9c:	03060305 	movweq	r0, #25349	; 0x6305
    5ba0:	06052e43 	streq	r2, [r5], -r3, asr #28
    5ba4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5ba8:	06054c06 	streq	r4, [r5], -r6, lsl #24
    5bac:	0b050106 	bleq	145fcc <__ccfg+0x126024>
    5bb0:	0604052e 	streq	r0, [r4], -lr, lsr #10
    5bb4:	03050521 	movweq	r0, #21793	; 0x5521
    5bb8:	59e400c9 	stmibpl	r4!, {r0, r3, r6, r7}^
    5bbc:	06080559 			; <UNDEFINED> instruction: 0x06080559
    5bc0:	06050501 	streq	r0, [r5], -r1, lsl #10
    5bc4:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    5bc8:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    5bcc:	04053101 	streq	r3, [r5], #-257	; 0xfffffeff
    5bd0:	3c7fa903 			; <UNDEFINED> instruction: 0x3c7fa903
    5bd4:	68060505 	stmdavs	r6, {r0, r2, r8, sl}
    5bd8:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    5bdc:	0c051305 	stceq	3, cr1, [r5], {5}
    5be0:	12051306 	andne	r1, r5, #402653184	; 0x18000000
    5be4:	0605052d 	streq	r0, [r5], -sp, lsr #10
    5be8:	060e052f 	streq	r0, [lr], -pc, lsr #10
    5bec:	06060514 			; <UNDEFINED> instruction: 0x06060514
    5bf0:	060e052d 	streq	r0, [lr], -sp, lsr #10
    5bf4:	2e140513 	mrccs	5, 0, r0, cr4, cr3, {0}
    5bf8:	062d0605 	strteq	r0, [sp], -r5, lsl #12
    5bfc:	0609055a 			; <UNDEFINED> instruction: 0x0609055a
    5c00:	06140501 	ldreq	r0, [r4], -r1, lsl #10
    5c04:	06160539 			; <UNDEFINED> instruction: 0x06160539
    5c08:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    5c0c:	0606052e 	streq	r0, [r6], -lr, lsr #10
    5c10:	06050513 			; <UNDEFINED> instruction: 0x06050513
    5c14:	13200903 			; <UNDEFINED> instruction: 0x13200903
    5c18:	01061205 	tsteq	r6, r5, lsl #4
    5c1c:	052f0805 	streq	r0, [pc, #-2053]!	; 541f <__exidx_end+0x27e7>
    5c20:	05052d09 	streq	r2, [r5, #-3337]	; 0xfffff2f7
    5c24:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    5c28:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5c2c:	06060520 	streq	r0, [r6], -r0, lsr #10
    5c30:	0a055930 	beq	15c0f8 <__ccfg+0x13c150>
    5c34:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5c38:	0c054c06 	stceq	12, cr4, [r5], {6}
    5c3c:	016f0306 	cmneq	pc, r6, lsl #6
    5c40:	11030505 	tstne	r3, r5, lsl #10
    5c44:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    5c48:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    5c4c:	8274014a 	rsbshi	r0, r4, #-2147483630	; 0x80000012
    5c50:	204a2020 	subcs	r2, sl, r0, lsr #32
    5c54:	0705252e 	streq	r2, [r5, -lr, lsr #10]
    5c58:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5c5c:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    5c60:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5c64:	0606052e 	streq	r0, [r6], -lr, lsr #10
    5c68:	09051330 	stmdbeq	r5, {r4, r5, r8, r9, ip}
    5c6c:	0a051406 	beq	14ac8c <__ccfg+0x12ace4>
    5c70:	2d08051f 	cfstr32cs	mvfx0, [r8, #-124]	; 0xffffff84
    5c74:	2f060605 	svccs	0x00060605
    5c78:	06090513 			; <UNDEFINED> instruction: 0x06090513
    5c7c:	20130501 	andscs	r0, r3, r1, lsl #10
    5c80:	3f060705 	svccc	0x00060705
    5c84:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    5c88:	06060501 	streq	r0, [r6], -r1, lsl #10
    5c8c:	06050530 			; <UNDEFINED> instruction: 0x06050530
    5c90:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    5c94:	20110306 	andscs	r0, r1, r6, lsl #6
    5c98:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    5c9c:	4a063c06 	bmi	194cbc <__ccfg+0x174d14>
    5ca0:	01666601 	cmneq	r6, r1, lsl #12
    5ca4:	2e20582e 	cdpcs	8, 2, cr5, cr0, cr14, {1}
    5ca8:	05210c05 	streq	r0, [r1, #-3077]!	; 0xfffff3fb
    5cac:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    5cb0:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    5cb4:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    5cb8:	2d0a0514 	cfstr32cs	mvfx0, [sl, #-80]	; 0xffffffb0
    5cbc:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    5cc0:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    5cc4:	0f051407 	svceq	0x00051407
    5cc8:	15051306 	strne	r1, [r5, #-774]	; 0xfffffcfa
    5ccc:	2d07052e 	cfstr32cs	mvfx0, [r7, #-184]	; 0xffffff48
    5cd0:	0a055a06 	beq	15c4f0 <__ccfg+0x13c548>
    5cd4:	15050106 	strne	r0, [r5, #-262]	; 0xfffffefa
    5cd8:	17054706 	strne	r4, [r5, -r6, lsl #14]
    5cdc:	13050106 	movwne	r0, #20742	; 0x5106
    5ce0:	07052e06 	streq	r2, [r5, -r6, lsl #28]
    5ce4:	06051306 	streq	r1, [r5], -r6, lsl #6
    5ce8:	05592606 	ldrbeq	r2, [r9, #-1542]	; 0xfffff9fa
    5cec:	13134f05 	tstne	r3, #5, 30
    5cf0:	11060905 	tstne	r6, r5, lsl #18
    5cf4:	062f0505 	strteq	r0, [pc], -r5, lsl #10
    5cf8:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    5cfc:	0c054a0b 			; <UNDEFINED> instruction: 0x0c054a0b
    5d00:	0b050106 	bleq	146120 <__ccfg+0x126178>
    5d04:	0606052e 	streq	r0, [r6], -lr, lsr #10
    5d08:	0a054b3d 	beq	158a04 <__ccfg+0x138a5c>
    5d0c:	7fad0306 	svcvc	0x00ad0306
    5d10:	00070220 	andeq	r0, r7, r0, lsr #4
    5d14:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    5d18:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    5d1c:	03000019 	movweq	r0, #25
    5d20:	05010190 	streq	r0, [r1, #-400]	; 0xfffffe70
    5d24:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    5d28:	2e0e0635 	mcrcs	6, 0, r0, cr14, cr5, {1}
    5d2c:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
    5d30:	67300603 	ldrvs	r0, [r0, -r3, lsl #12]!
    5d34:	03060105 	movweq	r0, #24837	; 0x6105
    5d38:	02050112 	andeq	r0, r5, #-2147483644	; 0x80000004
    5d3c:	3c720306 	ldclcc	3, cr0, [r2], #-24	; 0xffffffe8
    5d40:	01060805 	tsteq	r6, r5, lsl #16
    5d44:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    5d48:	053f0602 	ldreq	r0, [pc, #-1538]!	; 574e <__exidx_end+0x2b16>
    5d4c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    5d50:	02053c05 	andeq	r3, r5, #1280	; 0x500
    5d54:	0b054006 	bleq	155d74 <__ccfg+0x135dcc>
    5d58:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5d5c:	200b0558 	andcs	r0, fp, r8, asr r5
    5d60:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    5d64:	3d220603 	stccc	6, cr0, [r2, #-12]!
    5d68:	00020213 	andeq	r0, r2, r3, lsl r2
    5d6c:	02c60101 	sbceq	r0, r6, #1073741824	; 0x40000000
    5d70:	00030000 	andeq	r0, r3, r0
    5d74:	0000013a 	andeq	r0, r0, sl, lsr r1
    5d78:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5d7c:	0101000d 	tsteq	r1, sp
    5d80:	00000101 	andeq	r0, r0, r1, lsl #2
    5d84:	00000100 	andeq	r0, r0, r0, lsl #2
    5d88:	6f682f01 	svcvs	0x00682f01
    5d8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5be0 <__exidx_end+0x2fa8>
    5d90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5d94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5d98:	6f746b73 	svcvs	0x00746b73
    5d9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5da0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5da4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5da8:	2f534f43 	svccs	0x00534f43
    5dac:	4f636950 	svcmi	0x00636950
    5db0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    5db4:	2f736269 	svccs	0x00736269
    5db8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5dbc:	2f006c61 	svccs	0x00006c61
    5dc0:	2f727375 	svccs	0x00727375
    5dc4:	2f62696c 	svccs	0x0062696c
    5dc8:	2f636367 	svccs	0x00636367
    5dcc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5dd0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5dd4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5dd8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5ddc:	2f312e32 	svccs	0x00312e32
    5de0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5de4:	00656475 	rsbeq	r6, r5, r5, ror r4
    5de8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5d34 <__exidx_end+0x30fc>
    5dec:	616d2f65 	cmnvs	sp, r5, ror #30
    5df0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5df4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5df8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5dfc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5e00:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5e04:	4349502f 	movtmi	r5, #36911	; 0x902f
    5e08:	502f534f 	eorpl	r5, pc, pc, asr #6
    5e0c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5e10:	3143432f 	cmpcc	r3, pc, lsr #6
    5e14:	00585833 	subseq	r5, r8, r3, lsr r8
    5e18:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 5d64 <__exidx_end+0x312c>
    5e1c:	616d2f65 	cmnvs	sp, r5, ror #30
    5e20:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5e24:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5e28:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5e2c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5e30:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5e34:	4349502f 	movtmi	r5, #36911	; 0x902f
    5e38:	502f534f 	eorpl	r5, pc, pc, asr #6
    5e3c:	534f6369 	movtpl	r6, #62313	; 0xf369
    5e40:	73760000 	cmnvc	r6, #0
    5e44:	2e6e6163 	powcsez	f6, f6, f3
    5e48:	00010063 	andeq	r0, r1, r3, rrx
    5e4c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5e50:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5e54:	00020068 	andeq	r0, r2, r8, rrx
    5e58:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5e5c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    5e60:	00020068 	andeq	r0, r2, r8, rrx
    5e64:	63726100 	cmnvs	r2, #0, 2
    5e68:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5e6c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5e70:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    5e74:	00030068 	andeq	r0, r3, r8, rrx
    5e78:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5e7c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5e80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5e84:	62000003 	andvs	r0, r0, #3
    5e88:	6f747475 	svcvs	0x00747475
    5e8c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5e90:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    5e94:	00000300 	andeq	r0, r0, r0, lsl #6
    5e98:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5e9c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5ea0:	3c000004 	stccc	0, cr0, [r0], {4}
    5ea4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5ea8:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5eac:	0000003e 	andeq	r0, r0, lr, lsr r0
    5eb0:	3a050000 	bcc	145eb8 <__ccfg+0x125f10>
    5eb4:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    5eb8:	1900001a 	stmdbne	r0, {r1, r3, r4}
    5ebc:	03140205 	tsteq	r4, #1342177280	; 0x50000000
    5ec0:	0505013a 	streq	r0, [r5, #-314]	; 0xfffffec6
    5ec4:	3a050106 	bcc	1462e4 <__ccfg+0x12633c>
    5ec8:	05204403 	streq	r4, [r0, #-1027]!	; 0xfffffbfd
    5ecc:	2e3c0305 	cdpcs	3, 3, cr0, cr12, cr5, {0}
    5ed0:	053c1205 	ldreq	r1, [ip, #-517]!	; 0xfffffdfb
    5ed4:	16054005 	strne	r4, [r5], -r5
    5ed8:	05200e03 	streq	r0, [r0, #-3587]!	; 0xfffff1fd
    5edc:	2e11030b 	cdpcs	3, 1, cr0, cr1, cr11, {0}
    5ee0:	03060805 	movweq	r0, #26629	; 0x6805
    5ee4:	09053c62 	stmdbeq	r5, {r1, r5, r6, sl, fp, ip, sp}
    5ee8:	08050106 	stmdaeq	r5, {r1, r2, r8}
    5eec:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5ef0:	06060521 	streq	r0, [r6], -r1, lsr #10
    5ef4:	06030501 	streq	r0, [r3], -r1, lsl #10
    5ef8:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    5efc:	200f0501 	andcs	r0, pc, r1, lsl #10
    5f00:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
    5f04:	ac2e0301 	stcge	3, cr0, [lr], #-4
    5f08:	52030305 	andpl	r0, r3, #335544320	; 0x14000000
    5f0c:	030b053c 	movweq	r0, #46396	; 0xb53c
    5f10:	0a05741b 	beq	162f84 <__ccfg+0x142fdc>
    5f14:	0b052e06 	bleq	151734 <__ccfg+0x13178c>
    5f18:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5f1c:	0705ad06 	streq	sl, [r5, -r6, lsl #26]
    5f20:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5f24:	07053006 	streq	r3, [r5, -r6]
    5f28:	08051506 	stmdaeq	r5, {r1, r2, r8, sl, ip}
    5f2c:	2d06051e 	cfstr32cs	mvfx0, [r6, #-120]	; 0xffffff88
    5f30:	2f060405 	svccs	0x00060405
    5f34:	06070514 			; <UNDEFINED> instruction: 0x06070514
    5f38:	060b0501 	streq	r0, [fp], -r1, lsl #10
    5f3c:	060d052f 	streq	r0, [sp], -pc, lsr #10
    5f40:	660c0501 	strvs	r0, [ip], -r1, lsl #10
    5f44:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
    5f48:	0b052e2b 	bleq	1517fc <__ccfg+0x131854>
    5f4c:	060a054e 	streq	r0, [sl], -lr, asr #10
    5f50:	060b053c 			; <UNDEFINED> instruction: 0x060b053c
    5f54:	06040501 	streq	r0, [r4], -r1, lsl #10
    5f58:	06180583 	ldreq	r0, [r8], -r3, lsl #11
    5f5c:	06040501 	streq	r0, [r4], -r1, lsl #10
    5f60:	0609054b 	streq	r0, [r9], -fp, asr #10
    5f64:	06040501 	streq	r0, [r4], -r1, lsl #10
    5f68:	0311052f 	tsteq	r1, #197132288	; 0xbc00000
    5f6c:	063c2059 			; <UNDEFINED> instruction: 0x063c2059
    5f70:	2e062e66 	cdpcs	14, 0, cr2, cr6, cr6, {3}
    5f74:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    5f78:	20013c66 	andcs	r3, r1, r6, ror #24
    5f7c:	3c060106 	stfccs	f0, [r6], {6}
    5f80:	4a063c74 	bmi	195158 <__ccfg+0x1751b0>
    5f84:	21743c06 	cmncs	r4, r6, lsl #24
    5f88:	013c902e 	teqeq	ip, lr, lsr #32
    5f8c:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5f90:	2190822e 	orrscs	r8, r0, lr, lsr #4
    5f94:	0690064a 	ldreq	r0, [r0], sl, asr #12
    5f98:	2e013c58 	mcrcs	12, 0, r3, cr1, cr8, {2}
    5f9c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    5fa0:	6682063c 			; <UNDEFINED> instruction: 0x6682063c
    5fa4:	3c3c3c06 	ldccc	12, cr3, [ip], #-24	; 0xffffffe8
    5fa8:	7704053c 	smladxvc	r4, ip, r5, r0
    5fac:	01060c05 	tsteq	r6, r5, lsl #24
    5fb0:	05201005 	streq	r1, [r0, #-5]!
    5fb4:	06ae0616 	ssateq	r0, #15, r6, lsl #12
    5fb8:	2e062e66 	cdpcs	14, 0, cr2, cr6, cr6, {3}
    5fbc:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    5fc0:	2e013c3c 	mcrcs	12, 0, r3, cr1, cr12, {1}
    5fc4:	3c060106 	stfccs	f0, [r6], {6}
    5fc8:	06923c82 	ldreq	r3, [r2], r2, lsl #25
    5fcc:	3c580690 	mrrccc	6, 9, r0, r8, cr0
    5fd0:	06012e01 	streq	r2, [r1], -r1, lsl #28
    5fd4:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    5fd8:	3c066674 	stccc	6, cr6, [r6], {116}	; 0x74
    5fdc:	723c3c3c 	eorsvc	r3, ip, #60, 24	; 0x3c00
    5fe0:	2e063c06 	cdpcs	12, 0, cr3, cr6, cr6, {0}
    5fe4:	903c2174 	eorsls	r2, ip, r4, ror r1
    5fe8:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    5fec:	902e0601 	eorls	r0, lr, r1, lsl #12
    5ff0:	04052174 	streq	r2, [r5], #-372	; 0xfffffe8c
    5ff4:	0b05144f 	bleq	14b138 <__ccfg+0x12b190>
    5ff8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    5ffc:	0604052e 	streq	r0, [r4], -lr, lsr #10
    6000:	0608053e 			; <UNDEFINED> instruction: 0x0608053e
    6004:	2d060513 	cfstr32cs	mvfx0, [r6, #-76]	; 0xffffffb4
    6008:	21060405 	tstcs	r6, r5, lsl #8
    600c:	06090513 			; <UNDEFINED> instruction: 0x06090513
    6010:	06040501 	streq	r0, [r4], -r1, lsl #10
    6014:	060b0521 	streq	r0, [fp], -r1, lsr #10
    6018:	06070524 	streq	r0, [r7], -r4, lsr #10
    601c:	05740903 	ldrbeq	r0, [r4, #-2307]!	; 0xfffff6fd
    6020:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    6024:	0a053e0b 	beq	155858 <__ccfg+0x1358b0>
    6028:	05665403 	strbeq	r5, [r6, #-1027]!	; 0xfffffbfd
    602c:	4a0a0311 	bmi	286c78 <__ccfg+0x266cd0>
    6030:	02511605 	subseq	r1, r1, #5242880	; 0x500000
    6034:	01010005 	tsteq	r1, r5
    6038:	00000167 	andeq	r0, r0, r7, ror #2
    603c:	01470002 	cmpeq	r7, r2
    6040:	01020000 	mrseq	r0, (UNDEF: 2)
    6044:	000d0efb 	strdeq	r0, [sp], -fp
    6048:	01010101 	tsteq	r1, r1, lsl #2
    604c:	01000000 	mrseq	r0, (UNDEF: 0)
    6050:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6054:	2f2e2e2f 	svccs	0x002e2e2f
    6058:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    605c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6060:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6064:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6068:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    606c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6070:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6074:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6078:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    607c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6080:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6084:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6088:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    608c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6090:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6094:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5f2c <__exidx_end+0x32f4>
    6098:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    609c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    60a0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    60a4:	6f6e2d6d 	svcvs	0x006e2d6d
    60a8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    60ac:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    60b0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    60b4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    60b8:	615c3371 	cmpvs	ip, r1, ror r3
    60bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    60c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    60c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    60c8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    60cc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    60d0:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    60d4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    60d8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    60dc:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    60e0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    60e4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    60e8:	31303030 	teqcc	r0, r0, lsr r0
    60ec:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    60f0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    60f4:	61746562 	cmnvs	r4, r2, ror #10
    60f8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    60fc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6100:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5f38 <__exidx_end+0x3300>
    6104:	6f635c73 	svcvs	0x00635c73
    6108:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    610c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6110:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6114:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6118:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    611c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6120:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6124:	3130322d 	teqcc	r0, sp, lsr #4
    6128:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    612c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6130:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6134:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6138:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    613c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6140:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6144:	61000073 	tstvs	r0, r3, ror r0
    6148:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    614c:	6f6d7461 	svcvs	0x006d7461
    6150:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    6154:	5f000001 	svcpl	0x00000001
    6158:	61666564 	cmnvs	r6, r4, ror #10
    615c:	5f746c75 	svcpl	0x00746c75
    6160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6164:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6168:	5f000002 	svcpl	0x00000002
    616c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6170:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6174:	00000300 	andeq	r0, r0, r0, lsl #6
    6178:	5f6e6f61 	svcpl	0x006e6f61
    617c:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6180:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6184:	00000100 	andeq	r0, r0, r0, lsl #2
    6188:	02050000 	andeq	r0, r5, #0
    618c:	00001dd4 	ldrdeq	r1, [r0], -r4
    6190:	1a013c03 	bne	551a4 <__ccfg+0x351fc>
    6194:	77032f36 	smladxvc	r3, r6, pc, r2	; <UNPREDICTABLE>
    6198:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    619c:	09023d4c 	stmdbeq	r2, {r2, r3, r6, r8, sl, fp, ip, sp}
    61a0:	a9010100 	stmdbge	r1, {r8}
    61a4:	02000001 	andeq	r0, r0, #1
    61a8:	00014100 	andeq	r4, r1, r0, lsl #2
    61ac:	fb010200 	blx	469b6 <__ccfg+0x26a0e>
    61b0:	01000d0e 	tsteq	r0, lr, lsl #26
    61b4:	00010101 	andeq	r0, r1, r1, lsl #2
    61b8:	00010000 	andeq	r0, r1, r0
    61bc:	2f2e0100 	svccs	0x002e0100
    61c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    61c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    61c8:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    61cc:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    61d0:	63006269 	movwvs	r6, #617	; 0x269
    61d4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    61d8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    61dc:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    61e0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    61e4:	5f393130 	svcpl	0x00393130
    61e8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    61ec:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    61f0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    61f4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    61f8:	6f745c36 	svcvs	0x00745c36
    61fc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6200:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6204:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6208:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    620c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6210:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6214:	61652d65 	cmnvs	r5, r5, ror #26
    6218:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    621c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6220:	71353130 	teqvc	r5, r0, lsr r1
    6224:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6228:	6f6e2d6d 	svcvs	0x006e2d6d
    622c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6230:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6234:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6238:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    623c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6240:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6244:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6248:	63635c69 	cmnvs	r3, #26880	; 0x6900
    624c:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6250:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6254:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6258:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    625c:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6260:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6264:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6268:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    626c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6270:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6108 <__exidx_end+0x34d0>
    6274:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6278:	63675c72 	cmnvs	r7, #29184	; 0x7200
    627c:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6280:	6f6e2d6d 	svcvs	0x006e2d6d
    6284:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6288:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    628c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6290:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6294:	615c3371 	cmpvs	ip, r1, ror r3
    6298:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    629c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    62a0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    62a4:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    62a8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    62ac:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    62b0:	6f610000 	svcvs	0x00610000
    62b4:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    62b8:	00632e63 	rsbeq	r2, r3, r3, ror #28
    62bc:	5f000001 	svcpl	0x00000001
    62c0:	61666564 	cmnvs	r6, r4, ror #10
    62c4:	5f746c75 	svcpl	0x00746c75
    62c8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    62cc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    62d0:	5f000002 	svcpl	0x00000002
    62d4:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    62d8:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    62dc:	00000300 	andeq	r0, r0, r0, lsl #6
    62e0:	5f6e6f61 	svcpl	0x006e6f61
    62e4:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    62e8:	00010068 	andeq	r0, r1, r8, rrx
    62ec:	05000000 	streq	r0, [r0, #-0]
    62f0:	00000002 	andeq	r0, r0, r2
    62f4:	013e0300 	teqeq	lr, r0, lsl #6
    62f8:	01040200 	mrseq	r0, R12_usr
    62fc:	00010a03 	andeq	r0, r1, r3, lsl #20
    6300:	21010402 	tstcs	r1, r2, lsl #8
    6304:	01040200 	mrseq	r0, R12_usr
    6308:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    630c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6310:	00210104 	eoreq	r0, r1, r4, lsl #2
    6314:	21010402 	tstcs	r1, r2, lsl #8
    6318:	08022130 	stmdaeq	r2, {r4, r5, r8, sp}
    631c:	00010100 	andeq	r0, r1, r0, lsl #2
    6320:	1e040205 	cdpne	2, 0, cr0, cr4, cr5, {0}
    6324:	d7030000 	strle	r0, [r3, -r0]
    6328:	02000100 	andeq	r0, r0, #0, 2
    632c:	0c030104 	stfeqs	f0, [r3], {4}
    6330:	04020001 	streq	r0, [r2], #-1
    6334:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    6338:	001f0104 	andseq	r0, pc, r4, lsl #2
    633c:	21010402 	tstcs	r1, r2, lsl #8
    6340:	01040200 	mrseq	r0, R12_usr
    6344:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6348:	02312101 	eorseq	r2, r1, #1073741824	; 0x40000000
    634c:	01010005 	tsteq	r1, r5
    6350:	0000019c 	muleq	r0, ip, r1
    6354:	01390002 	teqeq	r9, r2
    6358:	01020000 	mrseq	r0, (UNDEF: 2)
    635c:	000d0efb 	strdeq	r0, [sp], -fp
    6360:	01010101 	tsteq	r1, r1, lsl #2
    6364:	01000000 	mrseq	r0, (UNDEF: 0)
    6368:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    636c:	2f2e2e2f 	svccs	0x002e2e2f
    6370:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6374:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6378:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    637c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6380:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6384:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6388:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    638c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6390:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6394:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6398:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    639c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    63a0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    63a4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    63a8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    63ac:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6244 <__exidx_end+0x360c>
    63b0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    63b4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    63b8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    63bc:	6f6e2d6d 	svcvs	0x006e2d6d
    63c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    63c4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    63c8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    63cc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    63d0:	615c3371 	cmpvs	ip, r1, ror r3
    63d4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    63d8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    63dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    63e0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    63e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    63e8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    63ec:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    63f0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    63f4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    63f8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    63fc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6400:	31303030 	teqcc	r0, r0, lsr r0
    6404:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6408:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    640c:	61746562 	cmnvs	r4, r2, ror #10
    6410:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6414:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6418:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6250 <__exidx_end+0x3618>
    641c:	6f635c73 	svcvs	0x00635c73
    6420:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6424:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6428:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    642c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6430:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6434:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6438:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    643c:	3130322d 	teqcc	r0, sp, lsr #4
    6440:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6444:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6448:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    644c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6450:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6454:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6458:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    645c:	63000073 	movwvs	r0, #115	; 0x73
    6460:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
    6464:	00000100 	andeq	r0, r0, r0, lsl #2
    6468:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    646c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6470:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6474:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6478:	00000200 	andeq	r0, r0, r0, lsl #4
    647c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6480:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6484:	00030068 	andeq	r0, r3, r8, rrx
    6488:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    648c:	0100682e 	tsteq	r0, lr, lsr #16
    6490:	00000000 	andeq	r0, r0, r0
    6494:	1e1c0205 	cdpne	2, 1, cr0, cr12, cr5, {0}
    6498:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    649c:	12030100 	andne	r0, r3, #0, 2
    64a0:	00040201 	andeq	r0, r4, r1, lsl #4
    64a4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    64a8:	00000002 	andeq	r0, r0, r2
    64ac:	01c00300 	biceq	r0, r0, r0, lsl #6
    64b0:	01110301 	tsteq	r1, r1, lsl #6
    64b4:	01000302 	tsteq	r0, r2, lsl #6
    64b8:	02050001 	andeq	r0, r5, #1
    64bc:	00001e24 	andeq	r1, r0, r4, lsr #28
    64c0:	01028d03 	tsteq	r2, r3, lsl #26
    64c4:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    64c8:	01010004 	tsteq	r1, r4
    64cc:	00020500 	andeq	r0, r2, r0, lsl #10
    64d0:	03000000 	movweq	r0, #0
    64d4:	030102d8 	movweq	r0, #4824	; 0x12d8
    64d8:	03020111 	movweq	r0, #8465	; 0x2111
    64dc:	00010100 	andeq	r0, r1, r0, lsl #2
    64e0:	00000205 	andeq	r0, r0, r5, lsl #4
    64e4:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    64e8:	02160103 	andseq	r0, r6, #-1073741824	; 0xc0000000
    64ec:	01010004 	tsteq	r1, r4
    64f0:	000002d6 	ldrdeq	r0, [r0], -r6
    64f4:	017c0002 	cmneq	ip, r2
    64f8:	01020000 	mrseq	r0, (UNDEF: 2)
    64fc:	000d0efb 	strdeq	r0, [sp], -fp
    6500:	01010101 	tsteq	r1, r1, lsl #2
    6504:	01000000 	mrseq	r0, (UNDEF: 0)
    6508:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    650c:	2f2e2e2f 	svccs	0x002e2e2f
    6510:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6514:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6518:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    651c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6520:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6524:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6528:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    652c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6530:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6534:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6538:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    653c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6540:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6544:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6548:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    654c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 63e4 <__exidx_end+0x37ac>
    6550:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6554:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6558:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    655c:	6f6e2d6d 	svcvs	0x006e2d6d
    6560:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6564:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6568:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    656c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6570:	615c3371 	cmpvs	ip, r1, ror r3
    6574:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6578:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    657c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6580:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6584:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6588:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    658c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6590:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6594:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6598:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    659c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    65a0:	31303030 	teqcc	r0, r0, lsr r0
    65a4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    65a8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    65ac:	61746562 	cmnvs	r4, r2, ror #10
    65b0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    65b4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    65b8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 63f0 <__exidx_end+0x37b8>
    65bc:	6f635c73 	svcvs	0x00635c73
    65c0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    65c4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    65c8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    65cc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    65d0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    65d4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    65d8:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    65dc:	3130322d 	teqcc	r0, sp, lsr #4
    65e0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    65e4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    65e8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    65ec:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    65f0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    65f4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    65f8:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    65fc:	2f2e0073 	svccs	0x002e0073
    6600:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6604:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6608:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    660c:	736f0000 	cmnvc	pc, #0
    6610:	00632e63 	rsbeq	r2, r3, r3, ror #28
    6614:	6f000001 	svcvs	0x00000001
    6618:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    661c:	00000100 	andeq	r0, r0, r0, lsl #2
    6620:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6624:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6628:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    662c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6630:	00000200 	andeq	r0, r0, r0, lsl #4
    6634:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6638:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    663c:	00030068 	andeq	r0, r3, r8, rrx
    6640:	5f776800 	svcpl	0x00776800
    6644:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6648:	00682e73 	rsbeq	r2, r8, r3, ror lr
    664c:	72000004 	andvc	r0, r0, #4
    6650:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6654:	00000100 	andeq	r0, r0, r0, lsl #2
    6658:	5f6e6f61 	svcpl	0x006e6f61
    665c:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    6660:	00010068 	andeq	r0, r1, r8, rrx
    6664:	6e6f6100 	powvse	f6, f7, f0
    6668:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    666c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    6670:	00010068 	andeq	r0, r1, r8, rrx
    6674:	05000000 	streq	r0, [r0, #-0]
    6678:	001e2c02 	andseq	r2, lr, r2, lsl #24
    667c:	00e50300 	rsceq	r0, r5, r0, lsl #6
    6680:	0f032001 	svceq	0x00032001
    6684:	20710320 	rsbscs	r0, r1, r0, lsr #6
    6688:	25200f03 	strcs	r0, [r0, #-3843]!	; 0xfffff0fd
    668c:	309e0903 	addscc	r0, lr, r3, lsl #18
    6690:	339e0903 	orrscc	r0, lr, #49152	; 0xc000
    6694:	000702a3 	andeq	r0, r7, r3, lsr #5
    6698:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    669c:	001e8802 	andseq	r8, lr, r2, lsl #16
    66a0:	01a00300 	lsleq	r0, r0, #6
    66a4:	2e0c0301 	cdpcs	3, 0, cr0, cr12, cr1, {0}
    66a8:	7a038822 	bvc	e8738 <__ccfg+0xc8790>
    66ac:	0225263c 	eoreq	r2, r5, #60, 12	; 0x3c00000
    66b0:	01010006 	tsteq	r1, r6
    66b4:	00020500 	andeq	r0, r2, r0, lsl #10
    66b8:	03000000 	movweq	r0, #0
    66bc:	200101c2 	andcs	r0, r1, r2, asr #3
    66c0:	03349125 	teqeq	r4, #1073741833	; 0x40000009
    66c4:	03272e79 			; <UNDEFINED> instruction: 0x03272e79
    66c8:	00262e7a 	eoreq	r2, r6, sl, ror lr
    66cc:	03010402 	movweq	r0, #5122	; 0x1402
    66d0:	0200207a 	andeq	r2, r0, #122	; 0x7a
    66d4:	30500104 	subscc	r0, r0, r4, lsl #2
    66d8:	241f302d 	ldrcs	r3, [pc], #-45	; 66e0 <__exidx_end+0x3aa8>
    66dc:	341f3d4b 	ldrcc	r3, [pc], #-3403	; 66e4 <__exidx_end+0x3aac>
    66e0:	03326c3d 	teqeq	r2, #15616	; 0x3d00
    66e4:	1003666d 	andne	r6, r3, sp, ror #12
    66e8:	0902263c 	stmdbeq	r2, {r2, r3, r4, r5, r9, sl, sp}
    66ec:	00010100 	andeq	r0, r1, r0, lsl #2
    66f0:	00000205 	andeq	r0, r0, r5, lsl #4
    66f4:	f3030000 	vhadd.u8	d0, d3, d0
    66f8:	4b210101 	blmi	846b04 <__ccfg+0x826b5c>
    66fc:	01000702 	tsteq	r0, r2, lsl #14
    6700:	02050001 	andeq	r0, r5, #1
    6704:	00000000 	andeq	r0, r0, r0
    6708:	01028003 	tsteq	r2, r3
    670c:	03020424 	movweq	r0, #9252	; 0x2424
    6710:	01045822 	tsteq	r4, r2, lsr #16
    6714:	04826203 	streq	r6, [r2], #515	; 0x203
    6718:	203c0302 	eorscs	r0, ip, r2, lsl #6
    671c:	4a030104 	bmi	c6b34 <__ccfg+0xa6b8c>
    6720:	211f3d4a 	tstcs	pc, sl, asr #26
    6724:	30221f3d 	eorcc	r1, r2, sp, lsr pc
    6728:	2322301f 			; <UNDEFINED> instruction: 0x2322301f
    672c:	01000c02 	tsteq	r0, r2, lsl #24
    6730:	02050001 	andeq	r0, r5, #1
    6734:	00000000 	andeq	r0, r0, r0
    6738:	0102a303 	tsteq	r2, r3, lsl #6
    673c:	02044f25 	andeq	r4, r4, #37, 30	; 0x94
    6740:	044a1703 	strbeq	r1, [sl], #-1795	; 0xfffff8fd
    6744:	4a6d0301 	bmi	1b47350 <__ccfg+0x1b273a8>
    6748:	0009024b 	andeq	r0, r9, fp, asr #4
    674c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6750:	00000002 	andeq	r0, r0, r2
    6754:	02bc0300 	adcseq	r0, ip, #0, 6
    6758:	17032201 	strne	r2, [r3, -r1, lsl #4]
    675c:	20690320 	rsbcs	r0, r9, r0, lsr #6
    6760:	3c100328 	ldccc	3, cr0, [r0], {40}	; 0x28
    6764:	032e6c03 			; <UNDEFINED> instruction: 0x032e6c03
    6768:	6d032e15 	stcvs	14, cr2, [r3, #-84]	; 0xffffffac
    676c:	20130358 	andscs	r0, r3, r8, asr r3
    6770:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    6774:	023f2011 	eorseq	r2, pc, #17
    6778:	01010006 	tsteq	r1, r6
    677c:	00020500 	andeq	r0, r2, r0, lsl #10
    6780:	03000000 	movweq	r0, #0
    6784:	030102e3 	movweq	r0, #4835	; 0x12e3
    6788:	024d0121 	subeq	r0, sp, #1073741832	; 0x40000008
    678c:	01010002 	tsteq	r1, r2
    6790:	00020500 	andeq	r0, r2, r0, lsl #10
    6794:	03000000 	movweq	r0, #0
    6798:	03010390 	movweq	r0, #5008	; 0x1390
    679c:	1f212010 	svcne	0x00212010
    67a0:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
    67a4:	003e0104 	eorseq	r0, lr, r4, lsl #2
    67a8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    67ac:	341d313d 	ldrcc	r3, [sp], #-317	; 0xfffffec3
    67b0:	01000702 	tsteq	r0, r2, lsl #14
    67b4:	02050001 	andeq	r0, r5, #1
    67b8:	00000000 	andeq	r0, r0, r0
    67bc:	0103b503 	tsteq	r3, r3, lsl #10
    67c0:	332c3117 			; <UNDEFINED> instruction: 0x332c3117
    67c4:	0005023d 	andeq	r0, r5, sp, lsr r2
    67c8:	01e90101 	mvneq	r0, r1, lsl #2
    67cc:	00020000 	andeq	r0, r2, r0
    67d0:	00000167 	andeq	r0, r0, r7, ror #2
    67d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    67d8:	0101000d 	tsteq	r1, sp
    67dc:	00000101 	andeq	r0, r0, r1, lsl #2
    67e0:	00000100 	andeq	r0, r0, r0, lsl #2
    67e4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    67e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    67ec:	2f2e2e2f 	svccs	0x002e2e2f
    67f0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    67f4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    67f8:	3a630062 	bcc	18c6988 <__ccfg+0x18a69e0>
    67fc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6800:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6804:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6808:	3030302e 	eorscc	r3, r0, lr, lsr #32
    680c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6810:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6814:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6818:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    681c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6820:	6f6f745c 	svcvs	0x006f745c
    6824:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6828:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    682c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6830:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6834:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6838:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    683c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6840:	5f342d69 	svcpl	0x00342d69
    6844:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6848:	33713531 	cmncc	r1, #205520896	; 0xc400000
    684c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6850:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6854:	61652d65 	cmnvs	r5, r5, ror #26
    6858:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    685c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6860:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6864:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6868:	6300656e 	movwvs	r6, #1390	; 0x56e
    686c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6870:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6874:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6878:	30302e30 	eorscc	r2, r0, r0, lsr lr
    687c:	5f393130 	svcpl	0x00393130
    6880:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6884:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6888:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    688c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6890:	6f745c36 	svcvs	0x00745c36
    6894:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6898:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    689c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    68a0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    68a4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    68a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    68ac:	61652d65 	cmnvs	r5, r5, ror #26
    68b0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    68b4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    68b8:	71353130 	teqvc	r5, r0, lsr r1
    68bc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    68c0:	6f6e2d6d 	svcvs	0x006e2d6d
    68c4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    68c8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    68cc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    68d0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    68d4:	00737973 	rsbseq	r7, r3, r3, ror r9
    68d8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    68dc:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    68e0:	00000100 	andeq	r0, r0, r0, lsl #2
    68e4:	5f6e6f61 	svcpl	0x006e6f61
    68e8:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    68ec:	00010068 	andeq	r0, r1, r8, rrx
    68f0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    68f4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    68f8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    68fc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6900:	00020068 	andeq	r0, r2, r8, rrx
    6904:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6908:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    690c:	0300682e 	movweq	r6, #2094	; 0x82e
    6910:	65730000 	ldrbvs	r0, [r3, #-0]!
    6914:	5f707574 	svcpl	0x00707574
    6918:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    691c:	00010068 	andeq	r0, r1, r8, rrx
    6920:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    6924:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    6928:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    692c:	73000001 	movwvc	r0, #1
    6930:	70757465 	rsbsvc	r7, r5, r5, ror #8
    6934:	0100682e 	tsteq	r0, lr, lsr #16
    6938:	00000000 	andeq	r0, r0, r0
    693c:	1eb40205 	cdpne	2, 11, cr0, cr4, cr5, {0}
    6940:	8d030000 	stchi	0, cr0, [r3, #-0]
    6944:	03200102 			; <UNDEFINED> instruction: 0x03200102
    6948:	0200200a 	andeq	r2, r0, #10
    694c:	4f410104 	svcmi	0x00410104
    6950:	212d4342 			; <UNDEFINED> instruction: 0x212d4342
    6954:	0302041f 	movweq	r0, #9247	; 0x241f
    6958:	04660487 	strbteq	r0, [r6], #-1159	; 0xfffffb79
    695c:	7c860301 	stcvc	3, cr0, [r6], {1}
    6960:	0342363c 	movteq	r3, #9788	; 0x263c
    6964:	3d2d4a09 	vpushcc	{s8-s16}
    6968:	2f1f2f2f 	svccs	0x001f2f2f
    696c:	3123212f 			; <UNDEFINED> instruction: 0x3123212f
    6970:	0a032548 	beq	cfe98 <__ccfg+0xafef0>
    6974:	3f5d4158 	svccc	0x005d4158
    6978:	01001e02 	tsteq	r0, r2, lsl #28
    697c:	02050001 	andeq	r0, r5, #1
    6980:	00001f88 	andeq	r1, r0, r8, lsl #31
    6984:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    6988:	33433028 	movtcc	r3, #12328	; 0x3028
    698c:	3c090341 	stccc	3, cr0, [r9], {65}	; 0x41
    6990:	2e0b0333 	mcrcs	3, 0, r0, cr11, cr3, {1}
    6994:	273c0e03 	ldrcs	r0, [ip, -r3, lsl #28]!
    6998:	03207903 			; <UNDEFINED> instruction: 0x03207903
    699c:	09032015 	stmdbeq	r3, {r0, r2, r4, sp}
    69a0:	4967422e 	stmdbmi	r7!, {r1, r2, r3, r5, r9, lr}^
    69a4:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
    69a8:	4b69242d 	blmi	1a4fa64 <__ccfg+0x1a2fabc>
    69ac:	01040200 	mrseq	r0, R12_usr
    69b0:	13024d27 	movwne	r4, #11559	; 0x2d27
    69b4:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    69b8:	02000004 	andeq	r0, r0, #4
    69bc:	00016500 	andeq	r6, r1, r0, lsl #10
    69c0:	fb010200 	blx	471ca <__ccfg+0x27222>
    69c4:	01000d0e 	tsteq	r0, lr, lsl #26
    69c8:	00010101 	andeq	r0, r1, r1, lsl #2
    69cc:	00010000 	andeq	r0, r1, r0
    69d0:	2f2e0100 	svccs	0x002e0100
    69d4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    69d8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    69dc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    69e0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    69e4:	63006269 	movwvs	r6, #617	; 0x269
    69e8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    69ec:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    69f0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    69f4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    69f8:	5f393130 	svcpl	0x00393130
    69fc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6a00:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6a04:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6a08:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6a0c:	6f745c36 	svcvs	0x00745c36
    6a10:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6a14:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6a18:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6a1c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6a20:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6a24:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6a28:	61652d65 	cmnvs	r5, r5, ror #26
    6a2c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6a30:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6a34:	71353130 	teqvc	r5, r0, lsr r1
    6a38:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6a3c:	6f6e2d6d 	svcvs	0x006e2d6d
    6a40:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a44:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6a48:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6a4c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6a50:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6a54:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6a58:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6a5c:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6a60:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6a64:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6a68:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6a6c:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6a70:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6a74:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6a78:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a7c:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6a80:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6a84:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 691c <__exidx_end+0x3ce4>
    6a88:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6a8c:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6a90:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6a94:	6f6e2d6d 	svcvs	0x006e2d6d
    6a98:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a9c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6aa0:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6aa4:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6aa8:	615c3371 	cmpvs	ip, r1, ror r3
    6aac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6ab0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6ab4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6ab8:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6abc:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6ac0:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6ac4:	65730000 	ldrbvs	r0, [r3, #-0]!
    6ac8:	5f707574 	svcpl	0x00707574
    6acc:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    6ad0:	00010063 	andeq	r0, r1, r3, rrx
    6ad4:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    6ad8:	725f7075 	subsvc	r7, pc, #117	; 0x75
    6adc:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6ae0:	00000100 	andeq	r0, r0, r0, lsl #2
    6ae4:	5f737973 	svcpl	0x00737973
    6ae8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    6aec:	0100682e 	tsteq	r0, lr, lsr #16
    6af0:	645f0000 	ldrbvs	r0, [pc], #-0	; 6af8 <__exidx_end+0x3ec0>
    6af4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6af8:	745f746c 	ldrbvc	r7, [pc], #-1132	; 6b00 <__exidx_end+0x3ec8>
    6afc:	73657079 	cmnvc	r5, #121	; 0x79
    6b00:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6b04:	735f0000 	cmpvc	pc, #0
    6b08:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6b0c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6b10:	64000003 	strvs	r0, [r0], #-3
    6b14:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    6b18:	00000100 	andeq	r0, r0, r0, lsl #2
    6b1c:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    6b20:	00010068 	andeq	r0, r1, r8, rrx
    6b24:	05000000 	streq	r0, [r0, #-0]
    6b28:	00202c02 	eoreq	r2, r0, r2, lsl #24
    6b2c:	00ff0300 	rscseq	r0, pc, r0, lsl #6
    6b30:	200b0301 	andcs	r0, fp, r1, lsl #6
    6b34:	032e0e03 			; <UNDEFINED> instruction: 0x032e0e03
    6b38:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    6b3c:	0302042e 	movweq	r0, #9262	; 0x242e
    6b40:	042000d7 	strteq	r0, [r0], #-215	; 0xffffff29
    6b44:	7fa80301 	svcvc	0x00a80301
    6b48:	03020420 	movweq	r0, #9248	; 0x2420
    6b4c:	2d2e00d9 	stccs	0, cr0, [lr, #-868]!	; 0xfffffc9c
    6b50:	03010421 	movweq	r0, #5153	; 0x1421
    6b54:	302e7fac 	eorcc	r7, lr, ip, lsr #31
    6b58:	652f214d 	strvs	r2, [pc, #-333]!	; 6a13 <__exidx_end+0x3ddb>
    6b5c:	1e222222 	cdpne	2, 2, cr2, cr2, cr2, {1}
    6b60:	58780322 	ldmdapl	r8!, {r1, r5, r8, r9}^
    6b64:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    6b68:	10033c73 	andne	r3, r3, r3, ror ip
    6b6c:	21212120 			; <UNDEFINED> instruction: 0x21212120
    6b70:	000d0221 	andeq	r0, sp, r1, lsr #4
    6b74:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6b78:	0020a802 	eoreq	sl, r0, r2, lsl #16
    6b7c:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    6b80:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    6b84:	0328204a 			; <UNDEFINED> instruction: 0x0328204a
    6b88:	7a03200e 	bvc	cebc8 <__ccfg+0xaec20>
    6b8c:	0e03422e 	cdpeq	2, 0, cr4, cr3, cr14, {1}
    6b90:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
    6b94:	02042d43 	andeq	r2, r4, #4288	; 0x10c0
    6b98:	01042130 	tsteq	r4, r0, lsr r1
    6b9c:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    6ba0:	0323652f 			; <UNDEFINED> instruction: 0x0323652f
    6ba4:	2c4d660c 	mcrrcs	6, 0, r6, sp, cr12
    6ba8:	522d2830 	eorpl	r2, sp, #48, 16	; 0x300000
    6bac:	0015022d 	andseq	r0, r5, sp, lsr #4
    6bb0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6bb4:	00215402 	eoreq	r5, r1, r2, lsl #8
    6bb8:	049f0300 	ldreq	r0, [pc], #768	; 6bc0 <__exidx_end+0x3f88>
    6bbc:	010c0301 	tsteq	ip, r1, lsl #6
    6bc0:	03200903 			; <UNDEFINED> instruction: 0x03200903
    6bc4:	31212077 			; <UNDEFINED> instruction: 0x31212077
    6bc8:	30302733 	eorscc	r2, r0, r3, lsr r7
    6bcc:	1d2d2231 	sfmne	f2, 4, [sp, #-196]!	; 0xffffff3c
    6bd0:	3e3d3135 	mrccc	1, 1, r3, cr13, cr5, {1}
    6bd4:	1d3b223d 	lfmne	f2, 4, [fp, #-244]!	; 0xffffff0c
    6bd8:	20760327 	rsbscs	r0, r6, r7, lsr #6
    6bdc:	022e1203 	eoreq	r1, lr, #805306368	; 0x30000000
    6be0:	01010006 	tsteq	r1, r6
    6be4:	b0020500 	andlt	r0, r2, r0, lsl #10
    6be8:	03000021 	movweq	r0, #33	; 0x21
    6bec:	180104e5 	stmdane	r1, {r0, r2, r5, r6, r7, sl}
    6bf0:	20790334 	rsbscs	r0, r9, r4, lsr r3
    6bf4:	05023336 	streq	r3, [r2, #-822]	; 0xfffffcca
    6bf8:	00010100 	andeq	r0, r1, r0, lsl #2
    6bfc:	00000205 	andeq	r0, r0, r5, lsl #4
    6c00:	81030000 	mrshi	r0, (UNDEF: 3)
    6c04:	33180105 	tstcc	r8, #1073741825	; 0x40000001
    6c08:	01000602 	tsteq	r0, r2, lsl #12
    6c0c:	02050001 	andeq	r0, r5, #1
    6c10:	000021c8 	andeq	r2, r0, r8, asr #3
    6c14:	01059503 	tsteq	r5, r3, lsl #10
    6c18:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    6c1c:	01000602 	tsteq	r0, r2, lsl #12
    6c20:	02050001 	andeq	r0, r5, #1
    6c24:	000021d8 	ldrdeq	r2, [r0], -r8
    6c28:	0105b803 	tsteq	r5, r3, lsl #16
    6c2c:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    6c30:	01000802 	tsteq	r0, r2, lsl #16
    6c34:	02050001 	andeq	r0, r5, #1
    6c38:	000021ec 	andeq	r2, r0, ip, ror #3
    6c3c:	0105db03 	tsteq	r5, r3, lsl #22
    6c40:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    6c44:	77032009 	strvc	r2, [r3, -r9]
    6c48:	20090320 	andcs	r0, r9, r0, lsr #6
    6c4c:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    6c50:	3122322a 			; <UNDEFINED> instruction: 0x3122322a
    6c54:	27473230 	smlaldxcs	r3, r7, r0, r2
    6c58:	03473230 	movteq	r3, #29232	; 0x7230
    6c5c:	36372e17 			; <UNDEFINED> instruction: 0x36372e17
    6c60:	0802273a 	stmdaeq	r2, {r1, r3, r4, r5, r8, r9, sl, sp}
    6c64:	00010100 	andeq	r0, r1, r0, lsl #2
    6c68:	22500205 	subscs	r0, r0, #1342177280	; 0x50000000
    6c6c:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    6c70:	21150106 	tstcs	r5, r6, lsl #2
    6c74:	20090355 	andcs	r0, r9, r5, asr r3
    6c78:	01000302 	tsteq	r0, r2, lsl #6
    6c7c:	02050001 	andeq	r0, r5, #1
    6c80:	00002264 	andeq	r2, r0, r4, ror #4
    6c84:	0106bc03 	tsteq	r6, r3, lsl #24
    6c88:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    6c8c:	03022009 	movweq	r2, #8201	; 0x2009
    6c90:	00010100 	andeq	r0, r1, r0, lsl #2
    6c94:	22780205 	rsbscs	r0, r8, #1342177280	; 0x50000000
    6c98:	cf030000 	svcgt	0x00030000
    6c9c:	21150106 	tstcs	r5, r6, lsl #2
    6ca0:	20090355 	andcs	r0, r9, r5, asr r3
    6ca4:	01000302 	tsteq	r0, r2, lsl #6
    6ca8:	02050001 	andeq	r0, r5, #1
    6cac:	0000228c 	andeq	r2, r0, ip, lsl #5
    6cb0:	0106e203 	tsteq	r6, r3, lsl #4
    6cb4:	2f432116 	svccs	0x00432116
    6cb8:	40207a03 	eormi	r7, r0, r3, lsl #20
    6cbc:	71032c35 	tstvc	r3, r5, lsr ip
    6cc0:	2e160320 	cdpcs	3, 1, cr0, cr6, cr0, {1}
    6cc4:	01000302 	tsteq	r0, r2, lsl #6
    6cc8:	02050001 	andeq	r0, r5, #1
    6ccc:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    6cd0:	01078203 	tsteq	r7, r3, lsl #4
    6cd4:	06023316 			; <UNDEFINED> instruction: 0x06023316
    6cd8:	00010100 	andeq	r0, r1, r0, lsl #2
    6cdc:	22c40205 	sbccs	r0, r4, #1342177280	; 0x50000000
    6ce0:	94030000 	strls	r0, [r3], #-0
    6ce4:	21160107 	tstcs	r6, r7, lsl #2
    6ce8:	33342943 	teqcc	r4, #1097728	; 0x10c000
    6cec:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    6cf0:	2e71031e 	mrccs	3, 3, r0, cr1, cr14, {0}
    6cf4:	02201603 	eoreq	r1, r0, #3145728	; 0x300000
    6cf8:	01010005 	tsteq	r1, r5
    6cfc:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    6d00:	03000022 	movweq	r0, #34	; 0x22
    6d04:	150107b4 	strne	r0, [r1, #-1972]	; 0xfffff84c
    6d08:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    6d0c:	00030220 	andeq	r0, r3, r0, lsr #4
    6d10:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6d14:	00230402 	eoreq	r0, r3, r2, lsl #8
    6d18:	07c80300 	strbeq	r0, [r8, r0, lsl #6]
    6d1c:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6d20:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    6d24:	01010003 	tsteq	r1, r3
    6d28:	18020500 	stmdane	r2, {r8, sl}
    6d2c:	03000023 	movweq	r0, #35	; 0x23
    6d30:	200102a7 	andcs	r0, r1, r7, lsr #5
    6d34:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
    6d38:	2f4e211f 	svccs	0x004e211f
    6d3c:	ac02d103 	stfged	f5, [r2], {3}
    6d40:	207db903 	rsbscs	fp, sp, r3, lsl #18
    6d44:	2002c703 	andcs	ip, r2, r3, lsl #14
    6d48:	207db903 	rsbscs	fp, sp, r3, lsl #18
    6d4c:	211f2f5c 	tstcs	pc, ip, asr pc	; <UNPREDICTABLE>
    6d50:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    6d54:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
    6d58:	3d6e3d43 	stclcc	13, cr3, [lr, #-268]!	; 0xfffffef4
    6d5c:	211f3d52 	tstcs	pc, r2, asr sp	; <UNPREDICTABLE>
    6d60:	3d3c0903 			; <UNDEFINED> instruction: 0x3d3c0903
    6d64:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    6d68:	3d660b03 	fstmdbxcc	r6!, {d16}	;@ Deprecated
    6d6c:	211f3d7c 	tstcs	pc, ip, ror sp	; <UNPREDICTABLE>
    6d70:	12024b40 	andne	r4, r2, #64, 22	; 0x10000
    6d74:	00010100 	andeq	r0, r1, r0, lsl #2
    6d78:	24280205 	strtcs	r0, [r8], #-517	; 0xfffffdfb
    6d7c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    6d80:	02000107 	andeq	r0, r0, #-1073741823	; 0xc0000001
    6d84:	0e030104 	adfeqs	f0, f3, f4
    6d88:	1d235220 	sfmne	f5, 4, [r3, #-128]!	; 0xffffff80
    6d8c:	684d1d23 	stmdavs	sp, {r0, r1, r5, r8, sl, fp, ip}^
    6d90:	207a034b 	rsbscs	r0, sl, fp, asr #6
    6d94:	02004134 	andeq	r4, r0, #52, 2
    6d98:	5b3d0104 	blpl	f471b0 <__ccfg+0xf27208>
    6d9c:	000b0231 	andeq	r0, fp, r1, lsr r2
    6da0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6da4:	00248c02 	eoreq	r8, r4, r2, lsl #24
    6da8:	08930300 	ldmeq	r3, {r8, r9}
    6dac:	01090301 	tsteq	r9, r1, lsl #6
    6db0:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    6db4:	01040200 	mrseq	r0, R12_usr
    6db8:	07024b3d 	smladxeq	r2, sp, fp, r4
    6dbc:	00010100 	andeq	r0, r1, r0, lsl #2
    6dc0:	24b40205 	ldrtcs	r0, [r4], #517	; 0x205
    6dc4:	9b030000 	blls	c6dcc <__ccfg+0xa6e24>
    6dc8:	09030103 	stmdbeq	r3, {r0, r1, r8}
    6dcc:	3c770301 	ldclcc	3, cr0, [r7], #-4
    6dd0:	20090320 	andcs	r0, r9, r0, lsr #6
    6dd4:	03313052 	teqeq	r1, #82	; 0x52
    6dd8:	2b234a0a 	blcs	8d9608 <__ccfg+0x8b9660>
    6ddc:	2f24484c 	svccs	0x0024484c
    6de0:	2933762d 	ldmdbcs	r3!, {r0, r2, r3, r5, r9, sl, ip, sp, lr}
    6de4:	26501c32 			; <UNDEFINED> instruction: 0x26501c32
    6de8:	4d4f3d52 	stclmi	13, cr3, [pc, #-328]	; 6ca8 <__exidx_end+0x4070>
    6dec:	4b845d2f 	blmi	fe11e2b0 <_estack+0xde1192b0>
    6df0:	003d243d 	eorseq	r2, sp, sp, lsr r4
    6df4:	4b010402 	blmi	47e04 <__ccfg+0x27e5c>
    6df8:	864b2f5b 			; <UNDEFINED> instruction: 0x864b2f5b
    6dfc:	09033f4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    6e00:	1e221e4a 	cdpne	14, 2, cr1, cr2, cr10, {2}
    6e04:	043c0b03 	ldrteq	r0, [ip], #-2819	; 0xfffff4fd
    6e08:	7db90303 	ldcvc	3, cr0, [r9, #12]!
    6e0c:	001f024a 	andseq	r0, pc, sl, asr #4
    6e10:	03650101 	cmneq	r5, #1073741824	; 0x40000000
    6e14:	00020000 	andeq	r0, r2, r0
    6e18:	000001a8 	andeq	r0, r0, r8, lsr #3
    6e1c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6e20:	0101000d 	tsteq	r1, sp
    6e24:	00000101 	andeq	r0, r0, r1, lsl #2
    6e28:	00000100 	andeq	r0, r0, r0, lsl #2
    6e2c:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6e30:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6e34:	2f2e2e2f 	svccs	0x002e2e2f
    6e38:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6e3c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6e40:	3a630062 	bcc	18c6fd0 <__ccfg+0x18a7028>
    6e44:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6e48:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6e4c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6e50:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6e54:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6e58:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6e5c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6e60:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6e64:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6e68:	6f6f745c 	svcvs	0x006f745c
    6e6c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6e70:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6e74:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6e78:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6e7c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6e80:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6e84:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6e88:	5f342d69 	svcpl	0x00342d69
    6e8c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6e90:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6e94:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6e98:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6e9c:	61652d65 	cmnvs	r5, r5, ror #26
    6ea0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6ea4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6ea8:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6eac:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6eb0:	6300656e 	movwvs	r6, #1390	; 0x56e
    6eb4:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6eb8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6ebc:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6ec0:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6ec4:	5f393130 	svcpl	0x00393130
    6ec8:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6ecc:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6ed0:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6ed4:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6ed8:	6f745c36 	svcvs	0x00745c36
    6edc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6ee0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6ee4:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6ee8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6eec:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6ef0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6ef4:	61652d65 	cmnvs	r5, r5, ror #26
    6ef8:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6efc:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6f00:	71353130 	teqvc	r5, r0, lsr r1
    6f04:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6f08:	6f6e2d6d 	svcvs	0x006e2d6d
    6f0c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6f10:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6f14:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6f18:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6f1c:	00737973 	rsbseq	r7, r3, r3, ror r9
    6f20:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6f24:	2f2e2e2f 	svccs	0x002e2e2f
    6f28:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    6f2c:	0000636e 	andeq	r6, r0, lr, ror #6
    6f30:	5f737973 	svcpl	0x00737973
    6f34:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    6f38:	0100632e 	tsteq	r0, lr, lsr #6
    6f3c:	6f610000 	svcvs	0x00610000
    6f40:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    6f44:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6f48:	6f000001 	svcvs	0x00000001
    6f4c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    6f50:	00000100 	andeq	r0, r0, r0, lsl #2
    6f54:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    6f58:	0100682e 	tsteq	r0, lr, lsr #16
    6f5c:	65730000 	ldrbvs	r0, [r3, #-0]!
    6f60:	5f707574 	svcpl	0x00707574
    6f64:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    6f68:	00010068 	andeq	r0, r1, r8, rrx
    6f6c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6f70:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6f74:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6f78:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6f7c:	00020068 	andeq	r0, r2, r8, rrx
    6f80:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6f84:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6f88:	0300682e 	movweq	r6, #2094	; 0x82e
    6f8c:	77680000 	strbvc	r0, [r8, -r0]!
    6f90:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6f94:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6f98:	00000400 	andeq	r0, r0, r0, lsl #8
    6f9c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    6fa0:	00010068 	andeq	r0, r1, r8, rrx
    6fa4:	73797300 	cmnvc	r9, #0, 6
    6fa8:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    6fac:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    6fb0:	61000001 	tstvs	r0, r1
    6fb4:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    6fb8:	6f6d7461 	svcvs	0x006d7461
    6fbc:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    6fc0:	00000001 	andeq	r0, r0, r1
    6fc4:	00020500 	andeq	r0, r2, r0, lsl #10
    6fc8:	03000000 	movweq	r0, #0
    6fcc:	040100f9 	streq	r0, [r1], #-249	; 0xffffff07
    6fd0:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    6fd4:	03010401 	movweq	r0, #5121	; 0x1401
    6fd8:	042e7d97 	strteq	r7, [lr], #-3479	; 0xfffff269
    6fdc:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    6fe0:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6fe4:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    6fe8:	00010420 	andeq	r0, r1, r0, lsr #8
    6fec:	03010402 	movweq	r0, #5122	; 0x1402
    6ff0:	032e7cd1 			; <UNDEFINED> instruction: 0x032e7cd1
    6ff4:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    6ff8:	89670104 	stmdbhi	r7!, {r2, r8}^
    6ffc:	4a09034b 	bmi	247d30 <__ccfg+0x227d88>
    7000:	a5030304 	strge	r0, [r3, #-772]	; 0xfffffcfc
    7004:	01045801 	tsteq	r4, r1, lsl #16
    7008:	4a7ee403 	bmi	1fc001c <__ccfg+0x1fa0074>
    700c:	01040200 	mrseq	r0, R12_usr
    7010:	0304045d 	movweq	r0, #17501	; 0x445d
    7014:	00740381 	rsbseq	r0, r4, r1, lsl #7
    7018:	03010402 	movweq	r0, #5122	; 0x1402
    701c:	01043c14 	tsteq	r4, r4, lsl ip
    7020:	01040200 	mrseq	r0, R12_usr
    7024:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    7028:	b7030404 	strlt	r0, [r3, -r4, lsl #8]
    702c:	1c322e03 	ldcne	14, cr2, [r2], #-12
    7030:	20420324 	subcs	r0, r2, r4, lsr #6
    7034:	01040200 	mrseq	r0, R12_usr
    7038:	042e1403 	strteq	r1, [lr], #-1027	; 0xfffffbfd
    703c:	04020001 	streq	r0, [r2], #-1
    7040:	7cf70301 	ldclvc	3, cr0, [r7], #4
    7044:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    7048:	83281b41 			; <UNDEFINED> instruction: 0x83281b41
    704c:	1b24384b 	blne	915180 <__ccfg+0x8f51d8>
    7050:	e7030404 	str	r0, [r3, -r4, lsl #8]
    7054:	02002e02 	andeq	r2, r0, #2, 28
    7058:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    705c:	0001043c 	andeq	r0, r1, ip, lsr r4
    7060:	03010402 	movweq	r0, #5122	; 0x1402
    7064:	30207d8d 	eorcc	r7, r0, sp, lsl #27
    7068:	01001702 	tsteq	r0, r2, lsl #14
    706c:	02050001 	andeq	r0, r5, #1
    7070:	00002604 	andeq	r2, r0, r4, lsl #12
    7074:	0101da03 	tsteq	r1, r3, lsl #20
    7078:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    707c:	1d032063 	stcne	0, cr2, [r3, #-396]	; 0xfffffe74
    7080:	412f5920 			; <UNDEFINED> instruction: 0x412f5920
    7084:	1c223232 	sfmne	f3, 4, [r2], #-200	; 0xffffff38
    7088:	5c942132 	ldfpls	f2, [r4], {50}	; 0x32
    708c:	05041b32 	streq	r1, [r4, #-2866]	; 0xfffff4ce
    7090:	212e5f03 			; <UNDEFINED> instruction: 0x212e5f03
    7094:	24030104 	strcs	r0, [r3], #-260	; 0xfffffefc
    7098:	1b32432e 	blne	c97d58 <__ccfg+0xc77db0>
    709c:	03050433 	movweq	r0, #21555	; 0x5433
    70a0:	04212050 	strteq	r2, [r1], #-80	; 0xffffffb0
    70a4:	2e2e0301 	cdpcs	3, 2, cr0, cr14, cr1, {0}
    70a8:	51030504 	tstpl	r3, r4, lsl #10
    70ac:	0301042e 	movweq	r0, #5166	; 0x142e
    70b0:	05042034 	streq	r2, [r4, #-52]	; 0xffffffcc
    70b4:	04204d03 	strteq	r4, [r0], #-3331	; 0xfffff2fd
    70b8:	2e340301 	cdpcs	3, 3, cr0, cr4, cr1, {0}
    70bc:	6923652f 	stmdbvs	r3!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}
    70c0:	3e214d2f 	cdpcc	13, 2, cr4, cr1, cr15, {1}
    70c4:	02003221 	andeq	r3, r0, #268435458	; 0x10000002
    70c8:	58060104 	stmdapl	r6, {r2, r8}
    70cc:	4a0f0306 	bmi	3c7cec <__ccfg+0x3a7d44>
    70d0:	2a2f3fca 	bcs	bd7000 <__ccfg+0xbb7058>
    70d4:	322b2424 	eorcc	r2, fp, #36, 8	; 0x24000000
    70d8:	3d319340 	ldccc	3, cr9, [r1, #-256]!	; 0xffffff00
    70dc:	213e3d3e 	teqcs	lr, lr, lsr sp
    70e0:	2d3c6303 	ldccs	3, cr6, [ip, #-12]!
    70e4:	31202603 			; <UNDEFINED> instruction: 0x31202603
    70e8:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    70ec:	0b03213e 	bleq	cf5ec <__ccfg+0xaf644>
    70f0:	7803212e 	stmdavc	r3, {r1, r2, r3, r5, r8, sp}
    70f4:	2009033c 	andcs	r0, r9, ip, lsr r3
    70f8:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    70fc:	03213c0e 			; <UNDEFINED> instruction: 0x03213c0e
    7100:	0f032071 	svceq	0x00032071
    7104:	231d7b3c 	tstcs	sp, #60, 22	; 0xf000
    7108:	21226521 			; <UNDEFINED> instruction: 0x21226521
    710c:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    7110:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    7114:	3e213d4c 	cdpcc	13, 2, cr3, cr1, cr12, {2}
    7118:	3d322c40 	ldccc	12, cr2, [r2, #-256]!	; 0xffffff00
    711c:	01002102 	tsteq	r0, r2, lsl #2
    7120:	02050001 	andeq	r0, r5, #1
    7124:	00002824 	andeq	r2, r0, r4, lsr #16
    7128:	0103b603 	tsteq	r3, r3, lsl #12
    712c:	2f224027 	svccs	0x00224027
    7130:	404e24a2 	submi	r2, lr, r2, lsr #9
    7134:	02864e2a 	addeq	r4, r6, #672	; 0x2a0
    7138:	01010009 	tsteq	r1, r9
    713c:	00020500 	andeq	r0, r2, r0, lsl #10
    7140:	03000000 	movweq	r0, #0
    7144:	030103e5 	movweq	r0, #5093	; 0x13e5
    7148:	282f200c 	stmdacs	pc!, {r2, r3, sp}	; <UNPREDICTABLE>
    714c:	302d5a30 	eorcc	r5, sp, r0, lsr sl
    7150:	211f322d 	tstcs	pc, sp, lsr #4
    7154:	2c2f2b24 			; <UNDEFINED> instruction: 0x2c2f2b24
    7158:	302f2432 	eorcc	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    715c:	224b2f34 	subcs	r2, fp, #52, 30	; 0xd0
    7160:	0c023e1e 	stceq	14, cr3, [r2], {30}
    7164:	00010100 	andeq	r0, r1, r0, lsl #2
    7168:	28840205 	stmcs	r4, {r0, r2, r9}
    716c:	a6030000 	strge	r0, [r3], -r0
    7170:	3f130104 	svccc	0x00130104
    7174:	04022648 	streq	r2, [r2], #-1608	; 0xfffff9b8
    7178:	2b010100 	blcs	47580 <__ccfg+0x275d8>
    717c:	02000002 	andeq	r0, r0, #2
    7180:	00014300 	andeq	r4, r1, r0, lsl #6
    7184:	fb010200 	blx	4798e <__ccfg+0x279e6>
    7188:	01000d0e 	tsteq	r0, lr, lsl #26
    718c:	00010101 	andeq	r0, r1, r1, lsl #2
    7190:	00010000 	andeq	r0, r1, r0
    7194:	2f2e0100 	svccs	0x002e0100
    7198:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    719c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    71a0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    71a4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    71a8:	63006269 	movwvs	r6, #617	; 0x269
    71ac:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    71b0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    71b4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    71b8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    71bc:	5f393130 	svcpl	0x00393130
    71c0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    71c4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    71c8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    71cc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    71d0:	6f745c36 	svcvs	0x00745c36
    71d4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    71d8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    71dc:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    71e0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    71e4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    71e8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    71ec:	61652d65 	cmnvs	r5, r5, ror #26
    71f0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    71f4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    71f8:	71353130 	teqvc	r5, r0, lsr r1
    71fc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    7200:	6f6e2d6d 	svcvs	0x006e2d6d
    7204:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7208:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    720c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    7210:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    7214:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    7218:	00656e69 	rsbeq	r6, r5, r9, ror #28
    721c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    7220:	63635c69 	cmnvs	r3, #26880	; 0x6900
    7224:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    7228:	302e302e 	eorcc	r3, lr, lr, lsr #32
    722c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    7230:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    7234:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    7238:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    723c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7240:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    7244:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    7248:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 70e0 <__exidx_end+0x44a8>
    724c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    7250:	63675c72 	cmnvs	r7, #29184	; 0x7200
    7254:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    7258:	6f6e2d6d 	svcvs	0x006e2d6d
    725c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    7260:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    7264:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    7268:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    726c:	615c3371 	cmpvs	ip, r1, ror r3
    7270:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    7274:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    7278:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    727c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    7280:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    7284:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    7288:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    728c:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    7290:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    7294:	00000100 	andeq	r0, r0, r0, lsl #2
    7298:	70696863 	rsbvc	r6, r9, r3, ror #16
    729c:	6f666e69 	svcvs	0x00666e69
    72a0:	0100682e 	tsteq	r0, lr, lsr #16
    72a4:	645f0000 	ldrbvs	r0, [pc], #-0	; 72ac <__exidx_end+0x4674>
    72a8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    72ac:	745f746c 	ldrbvc	r7, [pc], #-1132	; 72b4 <__exidx_end+0x467c>
    72b0:	73657079 	cmnvc	r5, #121	; 0x79
    72b4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    72b8:	735f0000 	cmpvc	pc, #0
    72bc:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    72c0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    72c4:	00000003 	andeq	r0, r0, r3
    72c8:	00020500 	andeq	r0, r2, r0, lsl #10
    72cc:	03000000 	movweq	r0, #0
    72d0:	130100c4 	movwne	r0, #4292	; 0x10c4
    72d4:	0006022f 	andeq	r0, r6, pc, lsr #4
    72d8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    72dc:	00000002 	andeq	r0, r0, r2
    72e0:	00d00300 	sbcseq	r0, r0, r0, lsl #6
    72e4:	032f1401 			; <UNDEFINED> instruction: 0x032f1401
    72e8:	08022e0a 	stmdaeq	r2, {r1, r3, r9, sl, fp, sp}
    72ec:	00010100 	andeq	r0, r1, r0, lsl #2
    72f0:	289c0205 	ldmcs	ip, {r0, r2, r9}
    72f4:	e6030000 	str	r0, [r3], -r0
    72f8:	2a1a0100 	bcs	687700 <__ccfg+0x667758>
    72fc:	0302044e 	movweq	r0, #9294	; 0x244e
    7300:	042e019b 	strteq	r0, [lr], #-411	; 0xfffffe65
    7304:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
    7308:	4b4c232e 	blmi	130ffc8 <__ccfg+0x12f0020>
    730c:	242f724b 	strtcs	r7, [pc], #-587	; 7314 <__exidx_end+0x46dc>
    7310:	01000502 	tsteq	r0, r2, lsl #10
    7314:	02050001 	andeq	r0, r5, #1
    7318:	00000000 	andeq	r0, r0, r0
    731c:	01018303 	tsteq	r1, r3, lsl #6
    7320:	b0030204 	andlt	r0, r3, r4, lsl #4
    7324:	01042001 	tsteq	r4, r1
    7328:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    732c:	03233139 			; <UNDEFINED> instruction: 0x03233139
    7330:	0a033c78 	beq	d6518 <__ccfg+0xb6570>
    7334:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    7338:	00050225 	andeq	r0, r5, r5, lsr #4
    733c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    7340:	0028e802 	eoreq	lr, r8, r2, lsl #16
    7344:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    7348:	03020401 	movweq	r0, #9217	; 0x2401
    734c:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    7350:	6f032e11 	svcvs	0x00032e11
    7354:	2011033c 	andscs	r0, r1, ip, lsr r3
    7358:	03010425 	movweq	r0, #5157	; 0x1425
    735c:	923c7f8c 	eorsls	r7, ip, #140, 30	; 0x230
    7360:	21222195 			; <UNDEFINED> instruction: 0x21222195
    7364:	39414122 	stmdbcc	r1, {r1, r5, r8, lr}^
    7368:	272e0903 	strcs	r0, [lr, -r3, lsl #18]!
    736c:	212e7303 			; <UNDEFINED> instruction: 0x212e7303
    7370:	03206403 			; <UNDEFINED> instruction: 0x03206403
    7374:	04022030 	streq	r2, [r2], #-48	; 0xffffffd0
    7378:	00010100 	andeq	r0, r1, r0, lsl #2
    737c:	29540205 	ldmdbcs	r4, {r0, r2, r9}^
    7380:	e0030000 	and	r0, r3, r0
    7384:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    7388:	2001a403 	andcs	sl, r1, r3, lsl #8
    738c:	dd030104 	stfles	f0, [r3, #-16]
    7390:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    7394:	2e029003 	cdpcs	0, 0, cr9, cr2, cr3, {0}
    7398:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    739c:	02002e7d 	andeq	r2, r0, #2000	; 0x7d0
    73a0:	09030104 	stmdbeq	r3, {r2, r8}
    73a4:	0002022e 	andeq	r0, r2, lr, lsr #4
    73a8:	021e0101 	andseq	r0, lr, #1073741824	; 0x40000000
    73ac:	00020000 	andeq	r0, r2, r0
    73b0:	00000142 	andeq	r0, r0, r2, asr #2
    73b4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    73b8:	0101000d 	tsteq	r1, sp
    73bc:	00000101 	andeq	r0, r0, r1, lsl #2
    73c0:	00000100 	andeq	r0, r0, r0, lsl #2
    73c4:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    73c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    73cc:	2f2e2e2f 	svccs	0x002e2e2f
    73d0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    73d4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    73d8:	3a630062 	bcc	18c7568 <__ccfg+0x18a75c0>
    73dc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    73e0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    73e4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    73e8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    73ec:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    73f0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    73f4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    73f8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    73fc:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    7400:	6f6f745c 	svcvs	0x006f745c
    7404:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    7408:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    740c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    7410:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    7414:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    7418:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    741c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    7420:	5f342d69 	svcpl	0x00342d69
    7424:	30322d39 	eorscc	r2, r2, r9, lsr sp
    7428:	33713531 	cmncc	r1, #205520896	; 0xc400000
    742c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    7430:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    7434:	61652d65 	cmnvs	r5, r5, ror #26
    7438:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    743c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    7440:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    7444:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    7448:	6300656e 	movwvs	r6, #1390	; 0x56e
    744c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    7450:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    7454:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    7458:	30302e30 	eorscc	r2, r0, r0, lsr lr
    745c:	5f393130 	svcpl	0x00393130
    7460:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    7464:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    7468:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    746c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    7470:	6f745c36 	svcvs	0x00745c36
    7474:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    7478:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    747c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    7480:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    7484:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    7488:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    748c:	61652d65 	cmnvs	r5, r5, ror #26
    7490:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    7494:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    7498:	71353130 	teqvc	r5, r0, lsr r1
    749c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    74a0:	6f6e2d6d 	svcvs	0x006e2d6d
    74a4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    74a8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    74ac:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    74b0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    74b4:	00737973 	rsbseq	r7, r3, r3, ror r9
    74b8:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    74bc:	0100682e 	tsteq	r0, lr, lsr #16
    74c0:	64640000 	strbtvs	r0, [r4], #-0
    74c4:	00632e69 	rsbeq	r2, r3, r9, ror #28
    74c8:	5f000001 	svcpl	0x00000001
    74cc:	61666564 	cmnvs	r6, r4, ror #10
    74d0:	5f746c75 	svcpl	0x00746c75
    74d4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    74d8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    74dc:	5f000002 	svcpl	0x00000002
    74e0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    74e4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    74e8:	00000300 	andeq	r0, r0, r0, lsl #6
    74ec:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    74f0:	00010068 	andeq	r0, r1, r8, rrx
    74f4:	05000000 	streq	r0, [r0, #-0]
    74f8:	00296c02 	eoreq	r6, r9, r2, lsl #24
    74fc:	01880300 	orreq	r0, r8, r0, lsl #6
    7500:	30312001 	eorscc	r2, r1, r1
    7504:	22221e50 	eorcs	r1, r2, #80, 28	; 0x500
    7508:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    750c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7510:	02050002 	andeq	r0, r5, #2
    7514:	00002994 	muleq	r0, r4, r9
    7518:	0100c303 	tsteq	r0, r3, lsl #6
    751c:	02010a03 	andeq	r0, r1, #12288	; 0x3000
    7520:	01010004 	tsteq	r1, r4
    7524:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    7528:	00000002 	andeq	r0, r0, r2
    752c:	00d80300 	sbcseq	r0, r8, r0, lsl #6
    7530:	010e0301 	tsteq	lr, r1, lsl #6
    7534:	78032333 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, sp}
    7538:	4f35352e 	svcmi	0x0035352e
    753c:	01000402 	tsteq	r0, r2, lsl #8
    7540:	00020401 	andeq	r0, r2, r1, lsl #8
    7544:	00000205 	andeq	r0, r0, r5, lsl #4
    7548:	85030000 	strhi	r0, [r3, #-0]
    754c:	11030101 	tstne	r3, r1, lsl #2
    7550:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    7554:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    7558:	09032e79 	stmdbeq	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
    755c:	7103342e 	tstvc	r3, lr, lsr #8
    7560:	0c03442e 	cfstrseq	mvf4, [r3], {46}	; 0x2e
    7564:	022d2f2e 	eoreq	r2, sp, #46, 30	; 0xb8
    7568:	01010002 	tsteq	r1, r2
    756c:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    7570:	00000002 	andeq	r0, r0, r2
    7574:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    7578:	20110301 	andscs	r0, r1, r1, lsl #6
    757c:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    7580:	2f201303 	svccs	0x00201303
    7584:	69030104 	stmdbvs	r3, {r2, r8}
    7588:	234d3020 	movtcs	r3, #53280	; 0xd020
    758c:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    7590:	1d030204 	sfmne	f0, 4, [r3, #-16]
    7594:	0005022e 	andeq	r0, r5, lr, lsr #4
    7598:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    759c:	00020500 	andeq	r0, r2, r0, lsl #10
    75a0:	03000000 	movweq	r0, #0
    75a4:	030101de 	movweq	r0, #4574	; 0x11de
    75a8:	031b2011 	tsteq	fp, #17
    75ac:	14032e74 	strne	r2, [r3], #-3700	; 0xfffff18c
    75b0:	04302d2e 	ldrteq	r2, [r0], #-3374	; 0xfffff2d2
    75b4:	7fb90301 	svcvc	0x00b90301
    75b8:	234d3020 	movtcs	r3, #53280	; 0xd020
    75bc:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    75c0:	c8030204 	stmdagt	r3, {r2, r9}
    75c4:	02422e00 	subeq	r2, r2, #0, 28
    75c8:	01010005 	tsteq	r1, r5

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6f636572 	svcvs	0x00636572
       4:	45006472 	strmi	r6, [r0, #-1138]	; 0xfffffb8e
}
       8:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
       c:	6c700073 	ldclvs	0, cr0, [r0], #-460	; 0xfffffe34
      10:	6e5f6775 	mrcvs	7, 2, r6, cr15, cr5, {3}
      14:	006c6c75 	rsbeq	r6, ip, r5, ror ip
      18:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      1c:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
      20:	7000735f 	andvc	r7, r0, pc, asr r3
      24:	646f6d64 	strbtvs	r6, [pc], #-3428	; 2c <g_pfnVectors+0x2c>
      28:	6f5f0065 	svcvs	0x005f0065
      2c:	78655f6e 	stmdavc	r5!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
      30:	615f7469 	cmpvs	pc, r9, ror #8
      34:	00736772 	rsbseq	r6, r3, r2, ror r7
      38:	7463775f 	strbtvc	r7, [r3], #-1887	; 0xfffff8a1
      3c:	5f626d6f 	svcpl	0x00626d6f
			i = k;
      40:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
				j->Next = k;
      44:	656d0065 	strbvs	r0, [sp, #-101]!	; 0xffffff9b
      48:	67617373 			; <UNDEFINED> instruction: 0x67617373
}
      4c:	725f0065 	subsvc	r0, pc, #101	; 0x65
      50:	6e003834 	mcrvs	8, 0, r3, cr0, cr4, {1}
      54:	0065646f 	rsbeq	r6, r5, pc, ror #8
		release;
      58:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
      5c:	5f006449 	svcpl	0x00006449
      60:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      64:	535f6261 	cmppl	pc, #268435462	; 0x10000006
      68:	4e5f7465 	cdpmi	4, 5, cr7, cr15, cr5, {3}
      6c:	5f65646f 	svcpl	0x0065646f
      70:	47004449 	strmi	r4, [r0, -r9, asr #8]
      74:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      78:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	31303220 	teqcc	r0, r0, lsr #4
      84:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
      88:	72282035 	eorvc	r2, r8, #53	; 0x35
      8c:	61656c65 	cmnvs	r5, r5, ror #24
	descriptors [fd] = s;
      90:	20296573 	eorcs	r6, r9, r3, ror r5
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
      98:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
	if (s == NULL)
      9c:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
		syserror (EMALLOC, "tcv05");
      a0:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
      a4:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
      a8:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
      ac:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
      b0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
      b4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
      b8:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
      bc:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
      c0:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
      c4:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
      c8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
      cc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
      d0:	6f6c666d 	svcvs	0x006c666d
      d4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
      d8:	733d6962 	teqvc	sp, #1605632	; 0x188000
      dc:	2074666f 	rsbscs	r6, r4, pc, ror #12
      e0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      e4:	613d6863 	teqvs	sp, r3, ror #16
      e8:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
      ec:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
      f0:	672d2067 	strvs	r2, [sp, -r7, rrx]!
			wwait (st, 50);
      f4:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
			curr += 0x1000;
      f8:	20332d66 	eorscs	r2, r3, r6, ror #26
      fc:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
		if (from >= EE_SIZE || upto < from)
     100:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     104:	6177642d 	cmnvs	r7, sp, lsr #8
			upto = EE_SIZE - 1;
     108:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
     10c:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
     110:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     114:	20393963 	eorscs	r3, r9, r3, ror #18
     118:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
     11c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     120:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
     124:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
        switch (choice)
     128:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     12c:	6164662d 	cmnvs	r4, sp, lsr #12
     130:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     134:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     138:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     13c:	6f6e662d 	svcvs	0x006e662d
     140:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
     144:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     148:	61696c61 	cmnvs	r9, r1, ror #24
        proceed Menu_Header;
     14c:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	61662d20 	cmnvs	r6, r0, lsr #26
     154:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
     15c:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
     160:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
        proceed Menu_Header;
     164:	5f003031 	svcpl	0x00003031
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
     16c:	6174735f 	cmnvs	r4, pc, asr r3
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	5f5f7472 	svcpl	0x005f7472
     174:	735f5f00 	cmpvc	pc, #0, 30
     178:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
    if (node < 1 || node > 25) {
     17c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
     180:	646f4e5f 	strbtvs	r4, [pc], #-3679	; 188 <_Min_Stack_Size+0x88>
            proceed Set_Node_ID;
     184:	44495f65 	strbmi	r5, [r9], #-3941	; 0xfffff09b
     188:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
        proceed Menu_Header;
     18c:	746d745f 	strbtvc	r7, [sp], #-1119	; 0xfffffba1
     190:	6f6f7200 	svcvs	0x006f7200
            proceed Set_Group_ID;
     194:	6c5f0074 	mrrcvs	0, 7, r0, pc, cr4	; <UNPREDICTABLE>
            proceed Set_Node_ID;
     198:	69736662 	ldmdbvs	r3!, {r1, r5, r6, r9, sl, sp, lr}^
     19c:	5f00657a 	svcpl	0x0000657a
            diag("Find neighbours");
     1a0:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
            diag("Reset Local Storage");
     1a4:	65680073 	strbvs	r0, [r8, #-115]!	; 0xffffff8d
            diag("Create Record on Neighbour");
     1a8:	5f006461 	svcpl	0x00006461
            diag("Delete Record on Neighbour");
     1ac:	4b434f4c 	blmi	10d3ee4 <__ccfg+0x10b3f3c>
            diag("Retrieve Record on Neighbour");
     1b0:	4345525f 	movtmi	r5, #21087	; 0x525f
            diag("Show Local Records");
     1b4:	49535255 	ldmdbmi	r3, {r0, r2, r4, r6, r9, ip, lr}^
            diag("Reset Local Storage");
     1b8:	545f4556 	ldrbpl	r4, [pc], #-1366	; 1c0 <_Min_Stack_Size+0xc0>
     1bc:	626d5f00 	rsbvs	r5, sp, #0, 30
     1c0:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     1c4:	6174735f 	cmnvs	r4, pc, asr r3
     1c8:	66006574 			; <UNDEFINED> instruction: 0x66006574
     1cc:	6c627473 	cfstrdvs	mvd7, [r2], #-460	; 0xfffffe34
     1d0:	5f5f006b 	svcpl	0x005f006b
     1d4:	6f5f6970 	svcvs	0x005f6970
     1d8:	6900646c 	stmdbvs	r0, {r2, r3, r5, r6, sl, sp, lr}
     1dc:	6c615673 	stclvs	6, cr5, [r1], #-460	; 0xfffffe34
     1e0:	6f4e6469 	svcvs	0x004e6469
     1e4:	64496564 	strbvs	r6, [r9], #-1380	; 0xfffffa9c
     1e8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
     1ec:	74756f64 	ldrbtvc	r6, [r5], #-3940	; 0xfffff09c
     1f0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
     1f4:	61745365 	cmnvs	r4, r5, ror #6
     1f8:	5f00706d 	svcpl	0x0000706d
     1fc:	736f7066 	cmnvc	pc, #102	; 0x66
static void devinit_uart (int devnum) {
     200:	5f00745f 	svcpl	0x0000745f
	adddevfunc (ioreq_uart_a, devnum);
     204:	00736e66 	rsbseq	r6, r3, r6, ror #28
     208:	6f6f635f 	svcvs	0x006f635f
void udelay (volatile word n) {
     20c:	0065696b 	rsbeq	r6, r5, fp, ror #18
     210:	5f766374 	svcpl	0x00766374
	while (n) {
     214:	6f666e69 	svcvs	0x00666e69
     218:	73797300 	cmnvc	r9, #0, 6
}
     21c:	5f746174 	svcpl	0x00746174
	while (n--);
     220:	5f5f0074 	svcpl	0x005f0074
     224:	5f737362 	svcpl	0x00737362
     228:	5f646e65 	svcpl	0x00646e65
		n--;
     22c:	425f005f 	subsmi	r0, pc, #95	; 0x5f
     230:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     234:	5f5f0074 	svcpl	0x005f0074
void mdelay (volatile word n) {
     238:	616c7473 	smcvs	51011	; 0xc743
     23c:	6e495f62 	cdpvs	15, 4, cr5, cr9, cr2, {3}
	while (n) {
     240:	61697469 	cmnvs	r9, r9, ror #8
     244:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
}
     248:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 250 <mdelay+0x18>
		udelay (999);
     24c:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
     250:	5f007961 	svcpl	0x00007961
		n--;
     254:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
     258:	5f00746c 	svcpl	0x0000746c
     25c:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     260:	535f6261 	cmppl	pc, #268435462	; 0x10000006
void __pi_ondomain (lword d) {
     264:	475f7465 	ldrbmi	r7, [pc, -r5, ror #8]
     268:	70756f72 	rsbsvc	r6, r5, r2, ror pc
		if (__pi_systat.effpdm > 1)
     26c:	0044495f 	subeq	r4, r4, pc, asr r9
     270:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
			__pi_systat.effpdm = 1;
     274:	756f685f 	strbvc	r6, [pc, #-2143]!	; fffffa1d <_estack+0xdfffaa1d>
	PRCMPowerDomainOn (d);
     278:	6e650072 	mcrvs	0, 3, r0, cr5, cr2, {3}
     27c:	706f7274 	rsbvc	r7, pc, r4, ror r2	; <UNPREDICTABLE>
     280:	5f5f0079 	svcpl	0x005f0079
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     284:	616c7473 	smcvs	51011	; 0xc743
     288:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
     28c:	68435f74 	stmdavs	r3, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	__pi_systat.ondmns |= d;
     290:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
     294:	635f5f00 	cmpvs	pc, #0, 30
}
     298:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     29c:	736f6800 	cmnvc	pc, #0, 16
void __pi_syserror (word ec, const char *m) {
     2a0:	64695f74 	strbtvs	r5, [r9], #-3956	; 0xfffff08c
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	735f5f00 	cmpvc	pc, #0, 30
     2a8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2b0:	6f72475f 	svcvs	0x0072475f
     2b4:	495f7075 	ldmdbmi	pc, {r0, r2, r4, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     2b8:	5f5f0044 	svcpl	0x005f0044
		all_leds_blink;
     2bc:	75706e69 	ldrbvc	r6, [r0, #-3689]!	; 0xfffff197
     2c0:	69705f74 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     2c4:	5f00736e 	svcpl	0x0000736e
     2c8:	5f6d745f 	svcpl	0x006d745f
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	006e696d 	rsbeq	r6, lr, sp, ror #18
     2d0:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
     2d4:	5f006674 	svcpl	0x00006674
     2d8:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
     2dc:	5f003834 	svcpl	0x00003834
     2e0:	75736572 	ldrbvc	r6, [r3, #-1394]!	; 0xfffffa8e
	while (1) {
     2e4:	6b5f746c 	blvs	17dd49c <__ccfg+0x17bd4f4>
     2e8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
     2ec:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
     2f0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
void tci_run_delay_timer () {
     2f4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
	setdel = __pi_mintk - __pi_old;
     2f8:	6f6c2067 	svcvs	0x006c2067
     2fc:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
     300:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     304:	2064656e 	rsbcs	r6, r4, lr, ror #10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     308:	00746e69 	rsbseq	r6, r4, r9, ror #28
     30c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
     310:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     314:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	735f5f00 	cmpvc	pc, #0, 30
	sti_tim;
     31c:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
}
     320:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
     324:	5f5f0073 	svcpl	0x005f0073
     328:	655f6970 	ldrbvs	r6, [pc, #-2416]	; fffff9c0 <_estack+0xdfffa9c0>
     32c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     330:	5f00745f 	svcpl	0x0000745f
	cli_aux;
     334:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     338:	5f363174 	svcpl	0x00363174
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     33c:	5f5f0074 	svcpl	0x005f0074
     340:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
     344:	63657200 	cmnvs	r5, #0, 4
     348:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
	sti_aux;
     34c:	00644972 	rsbeq	r4, r4, r2, ror r9
}
     350:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
     354:	00746573 	rsbseq	r6, r4, r3, ror r5
     358:	5f766374 	svcpl	0x00766374
void AONRTCIntHandler () {
     35c:	0065706f 	rsbeq	r7, r5, pc, rrx
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     360:	656d655f 	strbvs	r6, [sp, #-1375]!	; 0xfffffaa1
     364:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	5f007963 	svcpl	0x00007963
		if (__pi_utims [0] == 0)
     36c:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0xfffff8a1
     370:	61765f63 	cmnvs	r6, r3, ror #30
		if (*(__pi_utims [0])) {
     374:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     378:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
			(*(__pi_utims [0]))--;
     37c:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
		if (__pi_utims [1] == 0)
     380:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
		if (*(__pi_utims [1])) {
     384:	5f5f0074 	svcpl	0x005f0074
			aux_timer_inactive = 0;
     388:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
			(*(__pi_utims [1]))--;
     38c:	5f006365 	svcpl	0x00006365
		if (__pi_utims [2] == 0)
     390:	5f6d745f 	svcpl	0x006d745f
		if (*(__pi_utims [2])) {
     394:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
			(*(__pi_utims [2]))--;
     398:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
		if (__pi_utims [3] != 0) {
     39c:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
			if (*(__pi_utims [3])) {
     3a0:	5f00646e 	svcpl	0x0000646e
				aux_timer_inactive = 0;
     3a4:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
				(*(__pi_utims [3]))--;
     3a8:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
	if (__pi_systat.ledsts) {
     3ac:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
     3b0:	00657461 	rsbeq	r7, r5, r1, ror #8
		if (__pi_systat.ledblc++ == 0) {
     3b4:	65676465 	strbvs	r6, [r7, #-1125]!	; 0xfffffb9b
     3b8:	6f686300 	svcvs	0x00686300
			if (__pi_systat.ledblk) {
     3bc:	00656369 	rsbeq	r6, r5, r9, ror #6
     3c0:	61765f5f 	cmnvs	r6, pc, asr pc
     3c4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	7335705f 	teqvc	r5, #95	; 0x5f
     3cc:	625f5f00 	subsvs	r5, pc, #0, 30
				if (__pi_systat.ledsts & 0x2)
     3d0:	6f747475 	svcvs	0x00747475
     3d4:	696c5f6e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     3d8:	5f007473 	svcpl	0x00007473
				if (__pi_systat.ledsts & 0x4)
     3dc:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
				__pi_systat.ledblk = 0;
     3e0:	4d5f6261 	lfmmi	f6, 2, [pc, #-388]	; 264 <__pi_ondomain>
     3e4:	5f756e65 	svcpl	0x00756e65
			if (__pi_systat.fstblk)
     3e8:	64616548 	strbtvs	r6, [r1], #-1352	; 0xfffffab8
     3ec:	5f007265 	svcpl	0x00007265
				__pi_systat.ledblc = 200;
     3f0:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f4:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
		cli_tim;
     3f8:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
		__pi_new += setdel;
     3fc:	00657461 	rsbeq	r7, r5, r1, ror #8
     400:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
		setdel = 0;
     404:	735f6e65 	cmpvc	pc, #1616	; 0x650
		RISE_N_SHINE;
     408:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
		__pi_new += setdel;
     40c:	6f776100 	svcvs	0x00776100
		RISE_N_SHINE;
     410:	65006472 	strvs	r6, [r0, #-1138]	; 0xfffffb8e
     414:	70746e76 	rsbsvc	r6, r4, r6, ror lr
		aux_timer_inactive = 1;
     418:	656c006e 	strbvs	r0, [ip, #-110]!	; 0xffffff92
     41c:	636c6264 	cmnvs	ip, #100, 4	; 0x40000006
				if (__pi_systat.ledsts & 0x1)
     420:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 428 <AONRTCIntHandler+0xcc>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     424:	646d5f6d 	strbtvs	r5, [sp], #-3949	; 0xfffff093
     428:	5f007961 	svcpl	0x00007961
				if (__pi_systat.ledsts & 0x2)
     42c:	5f676973 	svcpl	0x00676973
     430:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     434:	626d5f00 	rsbvs	r5, sp, #0, 30
				if (__pi_systat.ledsts & 0x8)
     438:	776f7472 			; <UNDEFINED> instruction: 0x776f7472
				__pi_systat.ledblk = 1;
     43c:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
     440:	00657461 	rsbeq	r7, r5, r1, ror #8
		if (aux_timer_inactive) {
     444:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
			cli_aux;
     448:	30746978 	rsbscc	r6, r4, r8, ror r9
     44c:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     450:	006b6c62 	rsbeq	r6, fp, r2, ror #24
     454:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     458:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     45c:	00746174 	rsbseq	r6, r4, r4, ror r1
     460:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     464:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
     468:	5f006b74 	svcpl	0x00006b74
     46c:	636f6c66 	cmnvs	pc, #26112	; 0x6600
word tci_update_delay_ticks (Boolean force) {
     470:	00745f6b 	rsbseq	r5, r4, fp, ror #30
	cli_tim;
     474:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     478:	5f62616c 	svcpl	0x0062616c
	if (setdel) {
     47c:	6974704f 	ldmdbvs	r4!, {r0, r1, r2, r3, r6, ip, sp, lr}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	00736e6f 	rsbseq	r6, r3, pc, ror #28
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     484:	63775f5f 	cmnvs	r7, #380	; 0x17c
     488:	695f0068 	ldmdbvs	pc, {r3, r5, r6}^	; <UNPREDICTABLE>
     48c:	0073626f 	rsbseq	r6, r3, pc, ror #4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     490:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
				AON_RTC_O_CH0CMP)) - gettav ());
     494:	5f00745f 	svcpl	0x0000745f
	return NO;
     498:	6964735f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
			setdel = 0;
     49c:	696e6964 	stmdbvs	lr!, {r2, r5, r6, r8, fp, sp, lr}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     4a0:	776f0074 			; <UNDEFINED> instruction: 0x776f0074
     4a4:	4972656e 	ldmdbmi	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
}
     4a8:	735f0064 	cmpvc	pc, #100	; 0x64
		sti_tim;
     4ac:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
		return YES;
     4b0:	61675f00 	cmnvs	r7, r0, lsl #30
     4b4:	5f616d6d 	svcpl	0x00616d6d
     4b8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     4bc:	006d6167 	rsbeq	r6, sp, r7, ror #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
	UARTDisable (UART0_BASE);
     4c4:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
	UARTDisable (UART0_BASE);
     4cc:	625f0074 	subsvs	r0, pc, #116	; 0x74
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	00657361 	rsbeq	r7, r5, r1, ror #6
     4d4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     4d8:	73696c65 	cmnvc	r9, #25856	; 0x6500
     4dc:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 314 <tci_run_delay_timer+0x20>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	00746c75 	rsbseq	r6, r4, r5, ror ip
     4e4:	504d544b 	subpl	r5, sp, fp, asr #8
     4e8:	7070612f 	rsbsvc	r6, r0, pc, lsr #2
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	5f00632e 	svcpl	0x0000632e
     4f0:	6f4c555f 	svcvs	0x004c555f
     4f4:	5f00676e 	svcpl	0x0000676e
	urates [0] = rate;
     4f8:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
}
     4fc:	5f626d6f 	svcpl	0x00626d6f
     500:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     504:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     508:	00656c69 	rsbeq	r6, r5, r9, ror #24
     50c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 458 <AONRTCIntHandler+0xfc>
     510:	616d2f65 	cmnvs	sp, r5, ror #30
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     514:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     518:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     51c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     524:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     528:	4349502f 	movtmi	r5, #36911	; 0x902f
     52c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	__pi_uart_setrate (urates [0], __pi_uart);
     530:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
     534:	415f3436 	cmpmi	pc, r6, lsr r4	; <UNPREDICTABLE>
     538:	67697373 			; <UNDEFINED> instruction: 0x67697373
     53c:	6e656d6e 	cdpvs	13, 6, cr6, cr5, cr14, {3}
     540:	5f003274 	svcpl	0x00003274
     544:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
     548:	70756e61 	rsbsvc	r6, r5, r1, ror #28
	switch (operation) {
     54c:	626d5f00 	rsbvs	r5, sp, #0, 30
static int ioreq_uart_a (int operation, char *buf, int len) {
     550:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     554:	00745f65 	rsbseq	r5, r4, r5, ror #30
     558:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
     55c:	655f6d65 	ldrbvs	r6, [pc, #-3429]	; fffff7ff <_estack+0xdfffa7ff>
     560:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
				*buf++ = uart_a_read;
     564:	756f635f 	strbvc	r6, [pc, #-863]!	; 20d <udelay+0x1>
     568:	5f00746e 	svcpl	0x0000746e
			while (len && uart_a_char_available) {
     56c:	5f6d745f 	svcpl	0x006d745f
     570:	73647369 	cmnvc	r4, #-1543503871	; 0xa4000001
     574:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
			if (len != operation) {
     578:	6d647071 	stclvs	0, cr7, [r4, #-452]!	; 0xfffffe3c
}
     57c:	5f685f00 	svcpl	0x00685f00
     580:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
			uart_a_disable_int;
     584:	6374006f 	cmnvs	r4, #111	; 0x6f
			if (uart_a_char_available) {
     588:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
				*buf++ = uart_a_read;
     58c:	6e6f006f 	cdpvs	0, 6, cr0, cr15, cr15, {3}
			uart_a_disable_int;
     590:	736e6d64 	cmnvc	lr, #100, 26	; 0x1900
     594:	756e7000 	strbvc	r7, [lr, #-0]!
			if (uart_a_char_available) {
     598:	5f5f006d 	svcpl	0x005f006d
     59c:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffffc34 <_estack+0xdfffac34>
				uart_a_enable_int;
     5a0:	00747261 	rsbseq	r7, r4, r1, ror #4
     5a4:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
				goto Redo_rx;
     5a8:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5ac:	78654e00 	stmdavc	r5!, {r9, sl, fp, lr}^
     5b0:	63740074 	cmnvs	r4, #116	; 0x74
			return -2;
     5b4:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffff646 <_estack+0xdfffa646>
     5b8:	6f420074 	svcvs	0x00420074
				uart_a_write (*buf);
     5bc:	61656c6f 	cmnvs	r5, pc, ror #24
     5c0:	5f5f006e 	svcpl	0x005f006e
			while (len && uart_a_room_in_tx) {
     5c4:	685f6970 	ldmdavs	pc, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
     5c8:	655f7865 	ldrbvs	r7, [pc, #-2149]	; fffffd6b <_estack+0xdfffad6b>
     5cc:	745f636e 	ldrbvc	r6, [pc], #-878	; 5d4 <ioreq_uart_a+0x88>
			if (len != operation) {
     5d0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
			uart_a_disable_int;
     5d4:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
     5d8:	6c5f746e 	cfldrdvs	mvd7, [pc], {110}	; 0x6e
			if (uart_a_room_in_tx) {
     5dc:	74736165 	ldrbtvc	r6, [r3], #-357	; 0xfffffe9b
     5e0:	745f3436 	ldrbvc	r3, [pc], #-1078	; 5e8 <ioreq_uart_a+0x9c>
				uart_a_enable_int;
     5e4:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
     5e8:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
				*buf++ = uart_a_read;
     5ec:	626d5f00 	rsbvs	r5, sp, #0, 30
			if (uart_a_room_in_tx) {
     5f0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
				uart_a_write (*buf);
     5f4:	63740065 	cmnvs	r4, #101	; 0x65
     5f8:	6d785f76 	ldclvs	15, cr5, [r8, #-472]!	; 0xfffffe28
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5fc:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
     600:	2074726f 	rsbscs	r7, r4, pc, ror #4
			uart_a_enable_int;
     604:	00746e69 	rsbseq	r6, r4, r9, ror #28
     608:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     60c:	5f007374 	svcpl	0x00007374
			return 0;
     610:	0066735f 	rsbeq	r7, r6, pc, asr r3
			if (len == UART_CNTRL_SETRATE) {
     614:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
				if (__pi_uart_setrate (*((word*)buf),
     618:	6970006e 	ldmdbvs	r0!, {r1, r2, r3, r5, r6}^
     61c:	646f696e 	strbtvs	r6, [pc], #-2414	; 624 <ioreq_uart_a+0xd8>
     620:	5f00745f 	svcpl	0x0000745f
				syserror (EREQPAR, "uar");
     624:	61746164 	cmnvs	r4, r4, ror #2
			syserror (ENOOPER, "uai");
     628:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
			if (len == UART_CNTRL_GETRATE) {
     62c:	00626863 	rsbeq	r6, r2, r3, ror #16
				return 1;
     630:	6f6c675f 	svcvs	0x006c675f
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     634:	5f6c6162 	svcpl	0x006c6162
			syserror (ENOOPER, "uai");
     638:	75706d69 	ldrbvc	r6, [r0, #-3433]!	; 0xfffff297
     63c:	705f6572 	subsvc	r6, pc, r2, ror r5	; <UNPREDICTABLE>
     640:	5f007274 	svcpl	0x00007274
     644:	5f6d745f 	svcpl	0x006d745f
     648:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
     64c:	6f6c5f00 	svcvs	0x006c5f00
     650:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
     654:	5f656d69 	svcpl	0x00656d69
     658:	00667562 	rsbeq	r7, r6, r2, ror #10
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     65c:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
void UART0IntHandler () {
     660:	00646573 	rsbeq	r6, r4, r3, ror r5
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     668:	5f38746e 	svcpl	0x0038746e
     66c:	635f0074 	cmpvs	pc, #116	; 0x74
     670:	656c7476 	strbvs	r7, [ip, #-1142]!	; 0xfffffb8a
     674:	6d5f006e 	ldclvs	0, cr0, [pc, #-440]	; 4c4 <__pi_uart_setrate+0x4>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     678:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
     67c:	6c5f0073 	mrrcvs	0, 7, r0, pc, cr3	; <UNPREDICTABLE>
		RISE_N_SHINE;
     680:	5f613436 	svcpl	0x00613436
     684:	00667562 	rsbeq	r7, r6, r2, ror #10
		i_trigger (devevent (UART_A, READ));
     688:	6b6c625f 	blvs	1b1900c <__ccfg+0x1af9064>
     68c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     690:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 698 <UART0IntHandler+0x3c>
     694:	5f5f006d 	svcpl	0x005f006d
     698:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
     69c:	00747369 	rsbseq	r7, r4, r9, ror #6
     6a0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     6a4:	6461006b 	strbtvs	r0, [r1], #-107	; 0xffffff95
     6a8:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
     6ac:	5f5f0073 	svcpl	0x005f0073
     6b0:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
     6b4:	00727275 	rsbseq	r7, r2, r5, ror r2
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b8:	5f766374 	svcpl	0x00766374
     6bc:	00766372 	rsbseq	r6, r6, r2, ror r3
     6c0:	6f696e5f 	svcvs	0x00696e5f
		i_trigger (devevent (UART_A, WRITE));
     6c4:	77007362 	strvc	r7, [r0, -r2, ror #6]
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	5f746e69 	svcpl	0x00746e69
     6cc:	5f5f0074 	svcpl	0x005f0074
		RISE_N_SHINE;
     6d0:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
     6d4:	745f6263 	ldrbvc	r6, [pc], #-611	; 6dc <UART0IntHandler+0x80>
     6d8:	6d695400 	cfstrdvs	mvd5, [r9, #-0]
		i_trigger (devevent (UART_A, WRITE));
     6dc:	5f007265 	svcpl	0x00007265
     6e0:	5f6f7364 	svcpl	0x006f7364
     6e4:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
     6e8:	5f00656c 	svcpl	0x0000656c
     6ec:	5f69705f 	svcpl	0x0069705f
     6f0:	5f007473 	svcpl	0x00007473
     6f4:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
     6f8:	75006675 	strvc	r6, [r0, #-1653]	; 0xfffff98b
     6fc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     700:	2064656e 	rsbcs	r6, r4, lr, ror #10
     704:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
}
     708:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     70c:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
     710:	5f5f0077 	svcpl	0x005f0077
     714:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
     718:	745f3233 	ldrbvc	r3, [pc], #-563	; 720 <__buttons_setirq+0x4>
void __buttons_setirq (int val) {
     71c:	6d736600 	ldclvs	6, cr6, [r3, #-0]
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     724:	505f5f00 	subspl	r5, pc, r0, lsl #30
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	6d004243 	sfmvs	f4, 4, [r0, #-268]	; 0xfffffef4
     72c:	00756e65 	rsbseq	r6, r5, r5, ror #28
     730:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
		bn = BUTTON_GPIO (__button_list [i]);
     734:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     738:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
     73c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     740:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
     744:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
     748:	5f5f006c 	svcpl	0x005f006c
     74c:	66756273 			; <UNDEFINED> instruction: 0x66756273
}
     750:	72617500 	rsbvc	r7, r1, #0, 10
     754:	00745f74 	rsbseq	r5, r4, r4, ror pc
     758:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
     75c:	5f5f0065 	svcpl	0x005f0065
void __pinlist_setirq (int val) {
     760:	5f007061 	svcpl	0x00007061
	for (i = 0; i < N_PINLIST; i++) {
     764:	6c67735f 	stclvs	3, cr7, [r7], #-380	; 0xfffffe84
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     768:	5f006575 	svcpl	0x00006575
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     76c:	74727473 	ldrbtvc	r7, [r2], #-1139	; 0xfffffb8d
	for (i = 0; i < N_PINLIST; i++) {
     770:	6c5f6b6f 	mrrcvs	11, 6, r6, pc, cr15	; <UNPREDICTABLE>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     774:	00747361 	rsbseq	r7, r4, r1, ror #6
     778:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77c:	5f63776f 	svcpl	0x0063776f
     780:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     784:	6c5f0065 	mrrcvs	0, 6, r0, pc, cr5	; <UNPREDICTABLE>
	for (i = 0; i < N_PINLIST; i++) {
     788:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
}
     78c:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
     790:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
     794:	63740073 	cmnvs	r4, #115	; 0x73
     798:	756c7076 	strbvc	r7, [ip, #-118]!	; 0xffffff8a
void GPIOIntHandler () {
     79c:	00745f67 	rsbseq	r5, r4, r7, ror #30
if (buttons_int) {
     7a0:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
     7a4:	7300746e 	movwvc	r7, #1134	; 0x46e
	buttons_disable ();
     7a8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
     7ac:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
	i_trigger ((aword)&__button_list);
     7b0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     7b4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     7b8:	61640074 	smcvs	16388	; 0x4004
     7bc:	61626174 	smcvs	9748	; 0x2614
     7c0:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
     7c4:	64617663 	strbtvs	r7, [r1], #-1635	; 0xfffff99d
     7c8:	00745f70 	rsbseq	r5, r4, r0, ror pc
     7cc:	746e665f 	strbtvc	r6, [lr], #-1631	; 0xfffff9a1
     7d0:	73657079 	cmnvc	r5, #121	; 0x79
     7d4:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
     7d8:	00745f66 	rsbseq	r5, r4, r6, ror #30
	RISE_N_SHINE;
     7dc:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
     7e0:	755f0066 	ldrbvc	r0, [pc, #-102]	; 782 <__pinlist_setirq+0x22>
     7e4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
if (pin_sensor_int) {
     7e8:	61725f64 	cmnvs	r2, r4, ror #30
     7ec:	5f00646e 	svcpl	0x0000646e
	i_trigger ((aword)(&__input_pins));
     7f0:	70736e75 	rsbsvc	r6, r3, r5, ror lr
     7f4:	66696365 	strbtvs	r6, [r9], -r5, ror #6
     7f8:	5f646569 	svcpl	0x00646569
     7fc:	61636f6c 	cmnvs	r3, ip, ror #30
     800:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     804:	006f666e 	rsbeq	r6, pc, lr, ror #12
     808:	616c665f 	cmnvs	ip, pc, asr r6
     80c:	00327367 	eorseq	r7, r2, r7, ror #6
     810:	5f73695f 	svcpl	0x0073695f
     814:	00617863 	rsbeq	r7, r1, r3, ror #16
     818:	756f7267 	strbvc	r7, [pc, #-615]!	; 5b9 <ioreq_uart_a+0x6d>
	__pinsen_disable_and_clear;
     81c:	00644970 	rsbeq	r4, r4, r0, ror r9
	RISE_N_SHINE;
     820:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
     824:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
     828:	5f007478 	svcpl	0x00007478
}
     82c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
     830:	5f656c61 	svcpl	0x00656c61
     834:	735f0074 	cmpvc	pc, #116	; 0x74
     838:	006b6565 	rsbeq	r6, fp, r5, ror #10
     83c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
void system_init () {
     840:	00727265 	rsbseq	r7, r2, r5, ror #4
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	616d6e5f 	cmnvs	sp, pc, asr lr
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     848:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	62755f00 	rsbsvs	r5, r5, #0, 30
     850:	65006675 	strvs	r6, [r0, #-1653]	; 0xfffff98b
     854:	64706666 	ldrbtvs	r6, [r0], #-1638	; 0xfffff99a
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     858:	6572006d 	ldrbvs	r0, [r2, #-109]!	; 0xffffff93
     85c:	00746573 	rsbseq	r6, r4, r3, ror r5
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	4f495047 	svcmi	0x00495047
     864:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     868:	7074754f 	rsbsvc	r7, r4, pc, asr #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     870:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     874:	006f6944 	rsbeq	r6, pc, r4, asr #18
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     878:	424e4f41 	submi	r4, lr, #260	; 0x104
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87c:	6f4d7461 	svcvs	0x004d7461
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     880:	616e456e 	cmnvs	lr, lr, ror #10
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	00656c62 	rsbeq	r6, r5, r2, ror #24
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		pin = (port_confs [i] >> 19) & 0x1f;
     88c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     890:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     894:	666f5f69 	strbtvs	r5, [pc], -r9, ror #30
     898:	6d6f6466 	cfstrdvs	mvd6, [pc, #-408]!	; 708 <UART0IntHandler+0xac>
     89c:	006e6961 	rsbeq	r6, lr, r1, ror #18
		if (port_confs [i] & 0x80)
     8a0:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a4:	75007661 	strvc	r7, [r0, #-1633]	; 0xfffff99f
     8a8:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
		if (port_confs [i] & 0x40)
     8ac:	5f5f0073 	svcpl	0x005f0073
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     8b4:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b8:	77007172 	smlsdxvc	r0, r2, r1, r7
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8bc:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8c0:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
	all_leds_blink;
     8c4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     8c8:	5f6e7566 	svcpl	0x006e7566
     8cc:	4f410074 	svcmi	0x00410074
     8d0:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
     8d4:	57787541 	ldrbpl	r7, [r8, -r1, asr #10]!
     8d8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
     8dc:	65764570 	ldrbvs	r4, [r6, #-1392]!	; 0xfffffa90
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8e0:	4100746e 	tstmi	r0, lr, ror #8
     8e4:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     8e8:	776f5043 	strbvc	r5, [pc, -r3, asr #32]!
     8ec:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
     8f0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	00746547 	rsbseq	r6, r4, r7, asr #10
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8f8:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     8fc:	43746e49 	cmnmi	r4, #1168	; 0x490
	IntEnable (INT_AON_RTC_COMB);
     900:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     904:	73797300 	cmnvc	r9, #0, 6
     908:	5f6d6574 	svcpl	0x006d6574
	__pi_malloc_init ();
     90c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	IntEnable (INT_AON_GPIO_EDGE);
     910:	4e4f4100 	dvfmie	f4, f7, f0
     914:	53435557 	movtpl	r5, #13655	; 0x3557
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     918:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     91c:	456e776f 	strbmi	r7, [lr, #-1903]!	; 0xfffff891
     920:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     924:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     928:	6c656474 	cfstrdvs	mvd6, [r5], #-464	; 0xfffffe30
     92c:	43525000 	cmpmi	r2, #0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     930:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
     934:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
     938:	66664f72 	uqsub16vs	r4, r6, r2
	urates [0] = UART_RATE / 100;
     93c:	735f5f00 	cmpvc	pc, #0, 30
     940:	4d5f7465 	cfldrdmi	mvd7, [pc, #-404]	; 7b4 <GPIOIntHandler+0x18>
	reinit_uart ();
     944:	64005053 	strvs	r5, [r0], #-83	; 0xffffffad
	EXTRA_INITIALIZERS;
     948:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     94c:	745f7469 	ldrbvc	r7, [pc], #-1129	; 954 <system_init+0x114>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     950:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     954:	6e6f5f69 	cdpvs	15, 6, cr5, cr15, cr9, {3}
     958:	616d6f64 	cmnvs	sp, r4, ror #30
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     95c:	55006e69 	strpl	r6, [r0, #-3689]	; 0xfffff197
     960:	48545241 	ldmdami	r4, {r0, r6, r9, ip, lr}^
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     964:	6f6c4677 	svcvs	0x006c4677
     968:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
			devinit [i] . init (devinit [i] . param);
     96c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 7a4 <GPIOIntHandler+0x8>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     970:	61736944 	cmnvs	r3, r4, asr #18
     974:	00656c62 	rsbeq	r6, r5, r2, ror #24
     978:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	IntEnable (INT_UART0_COMB);
     97c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     980:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
}
     984:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
	tci_run_auxiliary_timer ();
     988:	4f410065 	svcmi	0x00410065
		diag ("");
     98c:	434f494e 	movtmi	r4, #63822	; 0xf94e
     990:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     994:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     998:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
		diag ("Leftover RAM: %d bytes",
     99c:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     9a0:	78523233 	ldmdavc	r2, {r0, r1, r4, r5, r9, ip, sp}^
     9a4:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     9a8:	6552006c 	ldrbvs	r0, [r2, #-108]	; 0xffffff94
     9ac:	725f6f64 	subsvc	r6, pc, #100, 30	; 0x190
     9b0:	69750078 	ldmdbvs	r5!, {r3, r4, r5, r6}^
     9b4:	78543233 	ldmdavc	r4, {r0, r1, r4, r5, r9, ip, sp}^
     9b8:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     9bc:	7953006c 	ldmdbvc	r3, {r2, r3, r5, r6}^
     9c0:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
     9c4:	6f6c436c 	svcvs	0x006c436c
     9c8:	65476b63 	strbvs	r6, [r7, #-2915]	; 0xfffff49d
     9cc:	52500074 	subspl	r0, r0, #116	; 0x74
     9d0:	61434d43 	cmpvs	r3, r3, asr #26
     9d4:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
     9d8:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
     9dc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     9e0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     9e4:	5000656c 	andpl	r6, r0, ip, ror #10
     9e8:	4c4d4352 	mcrrmi	3, 5, r4, sp, cr2
     9ec:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     9f0:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
     9f4:	45323369 	ldrmi	r3, [r2, #-873]!	; 0xfffffc97
__attribute__ ((noreturn)) void __pi_release () {
     9f8:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     9fc:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
     a00:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a04:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
	check_stack_overflow;
     a08:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
     a0c:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     a10:	73747075 	cmnvc	r4, #117	; 0x75
	update_n_wake (MAX_WORD, NO);
     a14:	52415500 	subpl	r5, r1, #0, 10
     a18:	46494654 			; <UNDEFINED> instruction: 0x46494654
     a1c:	616e454f 	cmnvs	lr, pc, asr #10
	for_all_tasks (__pi_curr) {
     a20:	00656c62 	rsbeq	r6, r5, r2, ror #24
     a24:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     a28:	46746e49 	ldrbtmi	r6, [r4], -r9, asr #28
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	7367616c 	cmnvc	r7, #108, 2
	__SLEEP;
     a30:	6f696400 	svcvs	0x00696400
     a34:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     a38:	5f007265 	svcpl	0x00007265
     a3c:	5f69705f 	svcpl	0x0069705f
	system_event_count ++;
     a40:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     a44:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	switch (__pi_systat.effpdm) {
     a48:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     a4c:	776f5000 	strbvc	r5, [pc, -r0]!
     a50:	74437265 	strbvc	r7, [r3], #-613	; 0xfffffd9b
     a54:	4f496c72 	svcmi	0x00496c72
			__WFI ();
     a58:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     a5c:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
     a60:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
	check_stack_overflow;
     a64:	52500065 	subspl	r0, r0, #101	; 0x65
     a68:	61434d43 	cmpvs	r3, r3, asr #26
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     a6c:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
     a70:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
			(__pi_curr->code) (tstate (__pi_curr));
     a74:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			goto Redo;
     a78:	61736944 	cmnvs	r3, r4, asr #18
	for_all_tasks (__pi_curr) {
     a7c:	00656c62 	rsbeq	r6, r5, r2, ror #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	70746573 	rsbsvc	r6, r4, r3, ror r5
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a84:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     a88:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     a8c:	65706f00 	ldrbvs	r6, [r0, #-3840]!	; 0xfffff100
     a90:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     a94:	61006e6f 	tstvs	r0, pc, ror #28
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a98:	745f7875 	ldrbvc	r7, [pc], #-2165	; aa0 <__pi_release+0xa8>
     a9c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     aa0:	616e695f 	cmnvs	lr, pc, asr r9
     aa4:	76697463 	strbtvc	r7, [r9], -r3, ror #8
			__WFI ();
     aa8:	6f700065 	svcvs	0x00700065
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     aac:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
     ab0:	73666e6f 	cmnvc	r6, #1776	; 0x6f0
}
     ab4:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	78745f6f 	ldmdavc	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     abc:	33697500 	cmncc	r9, #0, 10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ac0:	636e4932 	cmnvs	lr, #819200	; 0xc8000
     ac4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac8:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     acc:	61423233 	cmpvs	r2, r3, lsr r2
     ad0:	5f006573 	svcpl	0x00006573
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ad4:	5f6f645f 	svcpl	0x006f645f
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad8:	5f696677 	svcpl	0x00696677
     adc:	6e5f7361 	cdpvs	3, 5, cr7, cr15, cr1, {3}
     ae0:	65646565 	strbvs	r6, [r4, #-1381]!	; 0xfffffa9b
     ae4:	4f410064 	svcmi	0x00410064
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ae8:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
     aec:	56636e49 	strbtpl	r6, [r3], -r9, asr #28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     af4:	53326843 	teqpl	r2, #4390912	; 0x430000
     af8:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
     afc:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     b00:	755f7469 	ldrbvc	r7, [pc, #-1129]	; 69f <UART0IntHandler+0x43>
     b04:	00747261 	rsbseq	r7, r4, r1, ror #4
			SysCtrlSetRechargeBeforePowerDown
     b08:	524e4f41 	subpl	r4, lr, #260	; 0x104
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b0c:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b10:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     b14:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	72617000 	rsbvc	r7, r1, #0
     b1c:	74006d61 	strvc	r6, [r0], #-3425	; 0xfffff29f
     b20:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b24:	645f6e75 	ldrbvs	r6, [pc], #-3701	; b2c <__pi_release+0x134>
     b28:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	5f007265 	svcpl	0x00007265
     b34:	5f69705f 	svcpl	0x0069705f
     b38:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b3c:	00657361 	rsbeq	r7, r5, r1, ror #6
			while (!(AONWUCPowerStatusGet () &
     b40:	6f646552 	svcvs	0x00646552
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b44:	65727000 	ldrbvs	r7, [r2, #-0]!
     b48:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     b4c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b50:	6f660074 	svcvs	0x00660074
     b54:	00656372 	rsbeq	r6, r5, r2, ror r3
     b58:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     b5c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	4700656c 	strmi	r6, [r0, -ip, ror #10]
     b64:	5f4f4950 	svcpl	0x004f4950
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b68:	61656c63 	cmnvs	r5, r3, ror #24
     b6c:	65764572 	ldrbvs	r4, [r6, #-1394]!	; 0xfffffa8e
			SysCtrlAdjustRechargeAfterPowerDown ();
     b70:	6944746e 	stmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
			reinit_uart ();
     b74:	5f5f006f 	svcpl	0x005f006f
     b78:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     b7c:	5f736e6f 	svcpl	0x00736e6f
}
     b80:	69746573 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     b84:	6d007172 	stfvss	f7, [r0, #-456]	; 0xfffffe38
     b88:	616c6564 	cmnvs	ip, r4, ror #10
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b8c:	5f5f0079 	svcpl	0x005f0079
     b90:	61736964 	cmnvs	r3, r4, ror #18
     b94:	5f656c62 	svcpl	0x00656c62
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	00717269 	rsbseq	r7, r1, r9, ror #4
     b9c:	4f495047 	svcmi	0x00495047
     ba0:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ba4:	69447261 	stmdbvs	r4, {r0, r5, r6, r9, ip, sp, lr}^
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     ba8:	7953006f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6}^
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     bac:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	6e6f416c 	powvsez	f4, f7, #4.0
     bb4:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     bb8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     bbc:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc0:	666b6361 	strbtvs	r6, [fp], -r1, ror #6
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     bc4:	00656572 	rsbeq	r6, r5, r2, ror r5
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc8:	5f696374 	svcpl	0x00696374
     bcc:	5f6e7572 	svcpl	0x006e7572
			PRCMPowerDomainOff (
     bd0:	69787561 	ldmdbvs	r8!, {r0, r5, r6, r8, sl, ip, sp, lr}^
     bd4:	7261696c 	rsbvc	r6, r1, #108, 18	; 0x1b0000
	__SLEEP;
     bd8:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     bdc:	0072656d 	rsbseq	r6, r2, sp, ror #10
  __ASM volatile ("cpsie i" : : : "memory");
     be0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	goto Redo;
     be4:	73696c6e 	cmnvc	r9, #28160	; 0x6e00
     be8:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
     bec:	71726974 	cmnvc	r2, r4, ror r9
     bf0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     bf4:	746e494f 	strbtvc	r4, [lr], #-2383	; 0xfffff6b1
     bf8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     bfc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     c00:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     c04:	4f464946 	svcmi	0x00464946
     c08:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     c0c:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
     c10:	73795300 	cmnvc	r9, #0, 6
     c14:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     c18:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     c1c:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xfffff29b
     c20:	00746573 	rsbseq	r6, r4, r3, ror r5
     c24:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
     c28:	65007661 	strvs	r7, [r0, #-1633]	; 0xfffff99f
     c2c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     c30:	64750073 	ldrbtvs	r0, [r5], #-115	; 0xffffff8d
     c34:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     c38:	4e4f4100 	dvfmie	f4, f7, f0
     c3c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
     c40:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     c44:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     c48:	5f5f0065 	svcpl	0x005f0065
     c4c:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
int main (void) {
     c50:	6f6d7461 	svcvs	0x006d7461
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	4f41006e 	svcmi	0x0041006e
     c58:	434f494e 	movtmi	r4, #63822	; 0xf94e
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c60:	6e45657a 	mcrvs	5, 2, r6, cr5, cr10, {3}
	system_init ();
     c64:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	tcv_init ();
     c68:	4e4f4100 	dvfmie	f4, f7, f0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c6c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
     c70:	61426e6f 	cmpvs	r2, pc, ror #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     c78:	6c6f5679 	stclvs	6, cr5, [pc], #-484	; a9c <__pi_release+0xa4>
     c7c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c80:	00746547 	rsbseq	r6, r4, r7, asr #10
     c84:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
	delay (16, 0);
     c88:	61755f71 	cmnvs	r5, r1, ror pc
     c8c:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
     c90:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	__pi_release ();
     c94:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     c98:	00736d69 	rsbseq	r6, r3, r9, ror #26
     c9c:	746e6973 	strbtvc	r6, [lr], #-2419	; 0xfffff68d
     ca0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     ca4:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
     ca8:	6f694474 	svcvs	0x00694474
     cac:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
static void killev (__pi_pcb_t *pid) {
     cb0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
	wfun = (aword)(pid->code);
     cb4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	for_all_tasks (i) {
     cb8:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
		for (j = 0; j < nevents (i); j++) {
     cbc:	72726573 	rsbsvc	r6, r2, #482344960	; 0x1cc00000
     cc0:	6400726f 	strvs	r7, [r0], #-623	; 0xfffffd91
     cc4:	756e7665 	strbvc	r7, [lr, #-1637]!	; 0xfffff99b
			    || i->Events [j] . Event == wfun
     cc8:	682f006d 	stmdavs	pc!, {r0, r2, r3, r5, r6}	; <UNPREDICTABLE>
		for (j = 0; j < nevents (i); j++) {
     ccc:	2f656d6f 	svccs	0x00656d6f
			if (i->Events [j] . Event == (aword)pid
     cd0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     cd4:	442f6e69 	strtmi	r6, [pc], #-3689	; cdc <killev+0x2c>
     cd8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
				wakeupev (i, j);
     cdc:	4f2f706f 	svcmi	0x002f706f
     ce0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	for_all_tasks (i) {
     ce4:	502f5445 	eorpl	r5, pc, r5, asr #8
}
     ce8:	534f4349 	movtpl	r4, #62281	; 0xf349
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	6369502f 	cmnvs	r9, #47	; 0x2f
static void qfree (aword *ch) {
     cf0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	cc = (aword*)(mpools + MA_NP);
     cf8:	616d2f58 	cmnvs	sp, r8, asr pc
	m_setnextp (ch, chunk);
     cfc:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
	m_setnextp (cc, ch);
     d00:	33697500 	cmncc	r9, #0, 10
}
     d04:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d08:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
     d0c:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
     d10:	00797265 	rsbseq	r7, r9, r5, ror #4
			m_setnextp (cc, m_nextp (chunk));
     d14:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
			m_size (chunk) += m_hdrlen + m_size (ch);
     d18:	45746e49 	ldrbmi	r6, [r4, #-3657]!	; 0xfffff1b7
     d1c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     d20:	52500065 	subspl	r0, r0, #101	; 0x65
     d24:	634d4d43 	movtvs	r4, #56643	; 0xdd43
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d28:	646c5575 	strbtvs	r5, [ip], #-1397	; 0xfffffa8b
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	6e6f436f 	cdpvs	3, 6, cr4, cr15, cr15, {3}
     d30:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
     d34:	6f006572 	svcvs	0x00006572
			m_setnextp (cc, m_nextp (chunk));
     d38:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
			m_size (ch) += m_hdrlen + m_size (chunk);
     d3c:	616e4574 	smcvs	58452	; 0xe454
     d40:	56656c62 	strbtpl	r6, [r5], -r2, ror #24
     d44:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     d48:	6c616800 	stclvs	8, cr6, [r1], #-0
     d4c:	6f740074 	svcvs	0x00740074
     d50:	4d664f70 	stclmi	15, cr4, [r6, #-448]!	; 0xfffffe40
			if (m_size (chunk) >= m_size (ch))
     d54:	536e6961 	cmnpl	lr, #1589248	; 0x184000
     d58:	6b636174 	blvs	18d9330 <__ccfg+0x18b9388>
     d5c:	64675f00 	strbtvs	r5, [r7], #-3840	; 0xfffff100
		chunk = m_nextp (chunk))
     d60:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     d64:	52415500 	subpl	r5, r1, #0, 10
     d68:	6e493054 	mcrvs	0, 2, r3, cr9, cr4, {2}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
	diag_wait (a);
     d70:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
	diag_wchar (c, a);
     d74:	65654400 	strbvs	r4, [r5, #-1024]!	; 0xfffffc00
     d78:	656c5370 	strbvs	r5, [ip, #-880]!	; 0xfffffc90
}
     d7c:	70007065 	andvc	r7, r0, r5, rrx
     d80:	5f74726f 	svcpl	0x0074726f
	syserror (ESTATE, "state");
     d84:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     d88:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
     d8c:	755f6963 	ldrbvc	r6, [pc, #-2403]	; 431 <AONRTCIntHandler+0xd5>
     d90:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
void update_n_wake (word min, Boolean force) {
     d94:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xfffff09b
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	5f79616c 	svcpl	0x0079616c
     d9c:	6b636974 	blvs	18db374 <__ccfg+0x18bb3cc>
     da0:	654d0073 	strbvs	r0, [sp, #-115]	; 0xffffff8d
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da4:	72757361 	rsbsvc	r7, r5, #-2080374783	; 0x84000001
     da8:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
     dac:	71657276 	smcvc	22310	; 0x5726
     db0:	5f6e7566 	svcpl	0x006e7566
     db4:	696b0074 	stmdbvs	fp!, {r2, r4, r5, r6}^
     db8:	76656c6c 	strbtvc	r6, [r5], -ip, ror #24
     dbc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     dc0:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     dc4:	79706372 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sp, lr}^
     dc8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     dcc:	616d5f69 	cmnvs	sp, r9, ror #30
     dd0:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     dd4:	776e7500 	strbvc	r7, [lr, -r0, lsl #10]!
		for_all_tasks (i) {
     dd8:	00746961 	rsbseq	r6, r4, r1, ror #18
	__pi_mintk = znew + min;
     ddc:	65726671 	ldrbvs	r6, [r2, #-1649]!	; 0xfffff98f
     de0:	6f690065 	svcvs	0x00690065
			if (!twaiting (i))
     de4:	00716572 	rsbseq	r6, r1, r2, ror r5
     de8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			if (twakecnd (__pi_old, znew, i->Timer)) {
     dec:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     df0:	696b006b 	stmdbvs	fp!, {r0, r1, r3, r5, r6}^
     df4:	6d006c6c 	stcvs	12, cr6, [r0, #-432]	; 0xfffffe50
     df8:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; c40 <__pi_release+0x248>
     dfc:	74750073 	ldrbtvc	r0, [r5], #-115	; 0xffffff8d
     e00:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     e04:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
     e08:	52415500 	subpl	r5, r1, #0, 10
     e0c:	73754254 	cmnvc	r5, #84, 4	; 0x40000005
     e10:	5f5f0079 	svcpl	0x005f0079
     e14:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; d3c <qfree+0x50>	; <UNPREDICTABLE>
     e18:	6f6c6c61 	svcvs	0x006c6c61
				wakeuptm (i);
     e1c:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
     e20:	2f007469 	svccs	0x00007469
		for_all_tasks (i) {
     e24:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
				d = i->Timer - znew;
     e28:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     e2c:	2f6e6974 	svccs	0x006e6974
     e30:	6b736544 	blvs	1cda348 <__ccfg+0x1cba3a0>
		if ((word)(__pi_mintk - znew) < min) 
     e34:	2f706f74 	svccs	0x00706f74
     e38:	4f534c4f 	svcmi	0x00534c4f
     e3c:	2f54454e 	svccs	0x0054454e
	__pi_old = znew;
     e40:	4f434950 	svcmi	0x00434950
}
     e44:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	TCI_RUN_DELAY_TIMER;
     e48:	2f534f63 	svccs	0x00534f63
}
     e4c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
     e50:	6b2f6c65 	blvs	bdbfec <__ccfg+0xbbc044>
     e54:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     e58:	00632e6c 	rsbeq	r2, r3, ip, ror #28
     e5c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void proceed (word state) {
     e60:	6972745f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
	prcdstate (__pi_curr, state);
     e64:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     e68:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	release;
     e6c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     e70:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
void __pi_wait (aword event, word state) {
     e74:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	sint j = nevents (__pi_curr);
     e78:	616d5f69 	cmnvs	sp, r9, ror #30
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	65726678 	ldrbvs	r6, [r2, #-1656]!	; 0xfffff988
     e80:	72630065 	rsbvc	r0, r3, #101	; 0x65
     e84:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
		syserror (ENEVENTS, "sw");
     e88:	6e00676e 	cdpvs	7, 0, cr6, cr0, cr14, {3}
     e8c:	006b6863 	rsbeq	r6, fp, r3, ror #16
	setestate (__pi_curr->Events [j], state, event);
     e90:	72666e6d 	rsbvc	r6, r6, #1744	; 0x6d0
	incwait (__pi_curr);
     e94:	70006565 	andvc	r6, r0, r5, ror #10
	setestate (__pi_curr->Events [j], state, event);
     e98:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xfffff08e
}
     e9c:	6d006465 	cfstrsvs	mvf6, [r0, #-404]	; 0xfffffe6c
     ea0:	006e656c 	rsbeq	r6, lr, ip, ror #10
     ea4:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void __pi_trigger (aword event) {
     ea8:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
	for_all_tasks (i) {
     eac:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
		for (j = 0; j < nevents (i); j++) {
     eb0:	64610072 	strbtvs	r0, [r1], #-114	; 0xffffff8e
     eb4:	76656464 	strbtvc	r6, [r5], -r4, ror #8
     eb8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     ebc:	64697000 	strbtvs	r7, [r9], #-0
			if (i->Events [j] . Event == event) {
     ec0:	00726576 	rsbseq	r6, r2, r6, ror r5
     ec4:	67616964 	strbvs	r6, [r1, -r4, ror #18]!
     ec8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
				wakeupev (i, j);
     ecc:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     ed0:	74616372 	strbtvc	r6, [r1], #-882	; 0xfffffc8e
	for_all_tasks (i) {
     ed4:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
}
     ed8:	5f746e65 	svcpl	0x00746e65
aword __pi_join (aword pid, word st) {
     edc:	636d0074 	cmnvs	sp, #116	; 0x74
	for_all_tasks (i) {
     ee0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     ee4:	73617700 	cmnvc	r1, #0, 14
	return 0;
     ee8:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
		if ((aword)i == pid) {
     eec:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
			__pi_wait (pid, st);
     ef0:	73656400 	cmnvc	r5, #0, 8
}
     ef4:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
	for_all_tasks (i) {
     ef8:	6d007373 	stcvs	3, cr7, [r0, #-460]	; 0xfffffe34
     efc:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
void delay (word d, word state) {
     f00:	5f5f0074 	svcpl	0x005f0074
	settstate (__pi_curr, state);
     f04:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
     f08:	74736461 	ldrbtvc	r6, [r3], #-1121	; 0xfffffb9f
     f0c:	00657461 	rsbeq	r7, r5, r1, ror #8
     f10:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	update_n_wake (d, YES);
     f14:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     f18:	5f5f0074 	svcpl	0x005f0074
	__pi_curr->Timer = __pi_old + d;
     f1c:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
     f20:	6d746961 			; <UNDEFINED> instruction: 0x6d746961
	inctimer (__pi_curr);
     f24:	6c006d65 	stcvs	13, cr6, [r0], {101}	; 0x65
     f28:	00646e72 	rsbeq	r6, r4, r2, ror lr
     f2c:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
}
     f30:	006c6c61 	rsbeq	r6, ip, r1, ror #24
     f34:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	if (fun == NULL)
     f38:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
		return (int) __pi_curr;
     f3c:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     f40:	6f425f00 	svcvs	0x00425f00
	for_all_tasks (i)
     f44:	63006c6f 	movwvs	r6, #3183	; 0xc6f
}
     f48:	6b6e7568 	blvs	1b9e4f0 <__ccfg+0x1b7e548>
		if (i->code == fun)
     f4c:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
	for_all_tasks (i)
     f50:	5f657461 	svcpl	0x00657461
     f54:	61775f6e 	cmnvs	r7, lr, ror #30
     f58:	5f00656b 	svcpl	0x0000656b
int __pi_strlen (const char *s) {
     f5c:	5f69705f 	svcpl	0x0069705f
	for (i = 0; *(s+i) != '\0'; i++);
     f60:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
}
     f64:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
	for (i = 0; *(s+i) != '\0'; i++);
     f68:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	656c6400 	strbvs	r6, [ip, #-1024]!	; 0xfffffc00
		syserror (EREQPAR, "addv");
     f70:	5f007466 	svcpl	0x00007466
		syserror (ERESOURCE, "addv");
     f74:	5f69705f 	svcpl	0x0069705f
	if (ioreq [loc] != NULL)
     f78:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
     f7c:	64007970 	strvs	r7, [r0], #-2416	; 0xfffff690
		syserror (ERESOURCE, "addv");
     f80:	74756f67 	ldrbtvc	r6, [r5], #-3943	; 0xfffff099
	ioreq [loc] = rf;
     f84:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
     f88:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     f8c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     f94:	75667700 	strbvc	r7, [r6, #-1792]!	; 0xfffff900
     f98:	666e006e 	strbtvs	r0, [lr], -lr, rrx
     f9c:	006c6961 	rsbeq	r6, ip, r1, ror #18
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     fa0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     fa4:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
     fa8:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
		syserror (ENODEVICE, "io");
     fac:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
     fb0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	if (len == 0)
     fb4:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
     fbc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	if (ret >= 0)
     fc0:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
	if (ret == -1) {
     fc4:	70636e72 	rsbvc	r6, r3, r2, ror lr
     fc8:	5f5f0079 	svcpl	0x005f0079
		if (retry == WNONE)
     fcc:	6a5f6970 	bvs	17db594 <__ccfg+0x17bb5ec>
		iowait (dev, operation, retry);
     fd0:	006e696f 	rsbeq	r6, lr, pc, ror #18
     fd4:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     fd8:	645f7265 	ldrbvs	r7, [pc], #-613	; fe0 <io+0x50>
			release;
     fdc:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
	if (ret == -2) {
     fe0:	5f5f0065 	svcpl	0x005f0065
		if (retry != WNONE) {
     fe4:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     fe8:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
			iowait (dev, operation, retry);
     fec:	74007461 	strvc	r7, [r0], #-1121	; 0xfffffb9f
     ff0:	715f7663 	cmpvc	pc, r3, ror #12
			(ioreq [dev]) (NONE, buf, len);
     ff4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
     ff8:	65727000 	ldrbvs	r7, [r2, #-0]!
     ffc:	5f5f0076 	svcpl	0x005f0076
		(ioreq [dev]) (NONE, buf, len);
    1000:	5f766374 	svcpl	0x00766374
    1004:	74746162 	ldrbtvc	r6, [r4], #-354	; 0xfffffe9e
    1008:	00745f72 	rsbseq	r5, r4, r2, ror pc
}
    100c:	70766374 	rsbsvc	r6, r6, r4, ror r3
	if (retry != WNONE) {
    1010:	745f7968 	ldrbvc	r7, [pc], #-2408	; 1018 <io+0x88>
		delay (-ret - 2, retry);
    1014:	7400706f 	strvc	r7, [r0], #-111	; 0xffffff91
    1018:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
    101c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    1020:	2f006c6f 	svccs	0x00006c6f
		release;
    1024:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1028:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	2f6e6974 	svccs	0x006e6974
    1030:	6b736544 	blvs	1cda548 <__ccfg+0x1cba5a0>
    1034:	2f706f74 	svccs	0x00706f74
    1038:	4f534c4f 	svcmi	0x00534c4f
    103c:	2f54454e 	svccs	0x0054454e
		syserror (ERESOURCE, "mal1");
    1040:	4f434950 	svcmi	0x00434950
    1044:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1048:	2f534f63 	svccs	0x00534f63
    104c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1050:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
	m_size (mpools [0]) = mlen - m_hdrlen;
    1054:	2f497465 	svccs	0x00497465
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1058:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105c:	63740063 	cmnvs	r4, #99	; 0x63
    1060:	645f7076 	ldrbvs	r7, [pc], #-118	; 1068 <__pi_malloc_init+0x3c>
}
    1064:	6f707369 	svcvs	0x00707369
    1068:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
    106c:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    1070:	65725f79 	ldrbvs	r5, [r2, #-3961]!	; 0xfffff087
    1074:	74630067 	strbtvc	r0, [r3], #-103	; 0xffffff99
    1078:	75666c72 	strbvc	r6, [r6, #-3186]!	; 0xfffff38e
void __pi_free (aword *ch) {
    107c:	00745f6e 	rsbseq	r5, r4, lr, ror #30
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1080:	70766374 	rsbsvc	r6, r6, r4, ror r3
    1084:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
		syserror (EMALLOC, "malg");
    1088:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
    108c:	6f5f7663 	svcvs	0x005f7663
	mcfree [MA_NP] += m_size (ch);
    1090:	006e6570 	rsbeq	r6, lr, r0, ror r5
		m_size (ch) ^= MALLOC_UMASK;
    1094:	5f766374 	svcpl	0x00766374
    1098:	706f7264 	rsbvc	r7, pc, r4, ror #4
	mcfree [MA_NP] += m_size (ch);
    109c:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
	QFREE;
    10a0:	666e6973 			; <UNDEFINED> instruction: 0x666e6973
	if (mevent [MA_NP] . nwait) {
    10a4:	6d65006f 	stclvs	0, cr0, [r5, #-444]!	; 0xfffffe44
    10a8:	00797470 	rsbseq	r7, r9, r0, ror r4
		trigger ((aword)(&(mevent [MA_NP])));
    10ac:	70766374 	rsbsvc	r6, r6, r4, ror r3
		mevent [MA_NP] . nwait --;
    10b0:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 750 <__buttons_setirq+0x34>
}
    10b4:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
    10b8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    10bc:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
    10c0:	68636174 	stmdavs	r3!, {r2, r4, r5, r6, r8, sp, lr}^
void kill (aword pid) {
    10c4:	75716f00 	ldrbvc	r6, [r1, #-3840]!	; 0xfffff100
		pid = (aword) __pi_curr;
    10c8:	73657565 	cmnvc	r5, #423624704	; 0x19400000
	j = NULL;
    10cc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 10d4 <kill+0x10>
	for_all_tasks (i) {
    10d0:	715f7663 	cmpvc	pc, r3, ror #12
	syserror (EREQPAR, "kpi");
    10d4:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    10d8:	5f00735f 	svcpl	0x0000735f
		if ((aword)i == pid) {
    10dc:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    10e0:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
				__PCB = i->Next;
    10e4:	745f6d65 	ldrbvc	r6, [pc], #-3429	; 10ec <kill+0x28>
			killev (i);
    10e8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 10f0 <kill+0x2c>
			ufree (i);
    10ec:	685f7663 	ldmdavs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
			if (i == __pi_curr)
    10f0:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    10f4:	00745f6b 	rsbseq	r5, r4, fp, ror #30
				release;
    10f8:	70747461 	rsbsvc	r7, r4, r1, ror #8
				j->Next = i->Next;
    10fc:	67727500 	ldrbvs	r7, [r2, -r0, lsl #10]!
    1100:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1104:	725f7245 	subsvc	r7, pc, #1342177284	; 0x50000004
}
    1108:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    110c:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
    1110:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
	if (size < 8)
    1114:	63740073 	cmnvs	r4, #115	; 0x73
		_size = 2;
    1118:	72655f76 	rsbvc	r5, r5, #472	; 0x1d8
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    111c:	00657361 	rsbeq	r7, r5, r1, ror #6
		_size = (((aword)size) + 3) >> 2;
    1120:	5f766374 	svcpl	0x00766374
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	70646e65 	rsbvc	r6, r4, r5, ror #28
		_size = (((aword)size) + 3) >> 2;
    1128:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		if (mevent [MA_NP] . nfail != 255)
    112c:	656e5f70 	strbvs	r5, [lr, #-3952]!	; 0xfffff090
    1130:	71720077 	cmnvc	r2, r7, ror r0
			mevent [MA_NP] . nfail ++;
    1134:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
		mnfree [MA_NP] = 0;
    1138:	72747000 	rsbsvc	r7, r4, #0
    113c:	6f700073 	svcvs	0x00700073
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    1144:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
			syserror (EMALLOC, "malc");
    1148:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
    114c:	0073706e 	rsbseq	r7, r3, lr, rrx
		if (m_size (chunk) >= _size)
    1150:	5f766374 	svcpl	0x00766374
    1154:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
		chunk = m_nextp (chunk)) {
    1158:	63740065 	cmnvs	r4, #101	; 0x65
		m_setnextp (cc, m_nextp (chunk));
    115c:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1160:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1164:	63745f5f 	cmnvs	r4, #380	; 0x17c
			m_size (chunk) = _size;
    1168:	65735f76 	ldrbvs	r5, [r3, #-3958]!	; 0xfffff08a
			cc = chunk + _size + m_hdrlen;
    116c:	73656473 	cmnvc	r5, #1929379840	; 0x73000000
    1170:	00745f63 	rsbseq	r5, r4, r3, ror #30
			m_size (cc) = waste - m_hdrlen;
    1174:	73796870 	cmnvc	r9, #112, 16	; 0x700000
			QFREE;
    1178:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
		mevent [MA_NP] . nfail = 0;
    117c:	61636973 	smcvs	13971	; 0x3693
		mcfree [MA_NP] -= m_size (chunk);
    1180:	7571006c 	ldrbvc	r0, [r1, #-108]!	; 0xffffff94
    1184:	64657565 	strbtvs	r7, [r5], #-1381	; 0xfffffa9b
    1188:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    118c:	6165725f 	cmnvs	r5, pc, asr r2
		m_size (chunk) |= MALLOC_UMASK;
    1190:	63740064 	cmnvs	r4, #100	; 0x64
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1194:	6e695f76 	mcrvs	15, 3, r5, cr9, cr6, {3}
		m_size (chunk) |= MALLOC_UMASK;
    1198:	73007469 	movwvc	r7, #1129	; 0x469
			mnfree [MA_NP] = mcfree [MA_NP];
    119c:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
}
    11a0:	74006e6f 	strvc	r6, [r0], #-3695	; 0xfffff191
    11a4:	5f707663 	svcpl	0x00707663
    11a8:	6e6f6c63 	cdpvs	12, 6, cr6, cr15, cr3, {3}
    11ac:	63740065 	cmnvs	r4, #101	; 0x65
    11b0:	615f7076 	cmpvs	pc, r6, ror r0	; <UNPREDICTABLE>
    11b4:	67697373 			; <UNDEFINED> instruction: 0x67697373
    11b8:	6c70006e 	ldclvs	0, cr0, [r0], #-440	; 0xfffffe48
aword __pi_fork (fsmcode func, aword data) {
    11bc:	74006469 	strvc	r6, [r0], #-1129	; 0xfffffb97
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c0:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    11c4:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
    11c8:	74610064 	strbtvc	r0, [r1], #-100	; 0xffffff9c
		if ((j = __PCB) == NULL)
    11cc:	74617074 	strbtvc	r7, [r1], #-116	; 0xffffff8c
	i->Next = NULL;
    11d0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	i->data = data;
    11d4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
		if ((j = __PCB) == NULL)
    11d8:	756c705f 	strbvc	r7, [ip, #-95]!	; 0xffffffa1
}
    11dc:	74610067 	strbtvc	r0, [r1], #-103	; 0xffffff99
			for (; j->Next != NULL; j = j->Next);
    11e0:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    11e4:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
	return (aword) i;
    11e8:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 11f0 <__pi_waitmem>
    11ec:	715f7663 	cmpvc	pc, r3, ror #12
	if (mevent [MA_NP] . nwait != 255)
    11f0:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
    11f4:	7000745f 	andvc	r7, r0, pc, asr r4
    11f8:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
		mevent [MA_NP] . nwait ++;
    11fc:	656c006e 	strbvs	r0, [ip, #-110]!	; 0xffffff92
	wait ((aword)(&(mevent [MA_NP])), state);
    1200:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    1204:	73696400 	cmnvc	r9, #0, 8
void diag (const char *mess, ...) {
    1208:	63740070 	cmnvs	r4, #112	; 0x70
    120c:	6e725f76 	mrcvs	15, 3, r5, cr2, cr6, {3}
    1210:	63740070 	cmnvs	r4, #112	; 0x70
	diag_disable_int (a, is);
    1214:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
    1218:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
    121c:	75716200 	ldrbvc	r6, [r1, #-512]!	; 0xfffffe00
				d = (bc == 16) ? 10000 : 1000000000;
    1220:	00657565 	rsbeq	r7, r5, r5, ror #10
	diag_disable_int (a, is);
    1224:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
	while (*mess != '\0') {
    1228:	00736e69 	rsbseq	r6, r3, r9, ror #28
	dgout ('\r');
    122c:	63745f5f 	cmnvs	r4, #380	; 0x17c
	dgout ('\n');
    1230:	62685f76 	rsbvs	r5, r8, #472	; 0x1d8
    1234:	6b636f6c 	blvs	18dcfec <__ccfg+0x18bd044>
    1238:	6f00735f 	svcvs	0x0000735f
	diag_wait (a);
    123c:	6f677475 	svcvs	0x00677475
	diag_enable_int (a, is);
    1240:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1244:	70766374 	rsbsvc	r6, r6, r4, ror r3
}
    1248:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
    124c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1084 <__pi_free+0x8>
    1250:	73655f00 	cmnvc	r5, #0, 30
		if (*mess == '%') {
    1254:	6b636174 	blvs	18d982c <__ccfg+0x18b9884>
    1258:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
			if (*mess == 'l') {
    125c:	72533233 	subsvc	r3, r3, #805306371	; 0x30000003
    1260:	61460063 	cmpvs	r6, r3, rrx
				mess++;
    1264:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
				val = va_arg (ap, lword);
    1268:	61485253 	cmpvs	r8, r3, asr r2
				bc = 32;
    126c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
				bc = 16;
    1270:	6d4e0072 	stclvs	0, cr0, [lr, #-456]	; 0xfffffe38
			switch (*mess) {
    1274:	48525369 	ldmdami	r2, {r0, r3, r5, r6, r8, r9, ip, lr}^
    1278:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    127c:	5f007265 	svcpl	0x00007265
				dgout ('%');
    1280:	78657465 	stmdavc	r5!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1284:	655f0074 	ldrbvs	r0, [pc, #-116]	; 1218 <diag+0x10>
				dgout (*mess);
    1288:	00737362 	rsbseq	r7, r3, r2, ror #6
    128c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 11d8 <__pi_fork+0x1c>
			switch (*mess) {
    1290:	616d2f65 	cmnvs	sp, r5, ror #30
					v = __pi_hex_enc_table [
    1294:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
					i += 4;
    1298:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
					(val >> (bc - i)) & 0xf];
    129c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    12a0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
					dgout (v);
    12a4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    12a8:	4349502f 	movtmi	r5, #36911	; 0x902f
				while (i < bc) {
    12ac:	502f534f 	eorpl	r5, pc, pc, asr #6
			mess++;
    12b0:	534f6369 	movtpl	r6, #62313	; 0xf369
					d /= 10;
    12b4:	3143432f 	cmpcc	r3, pc, lsr #6
				if ((val >> (bc - 1)) & 1) {
    12b8:	2f585833 	svccs	0x00585833
    12bc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
					dgout ('-');
    12c0:	5f707574 	svcpl	0x00707574
    12c4:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
						val |= 0xffff0000;
    12c8:	625f0063 	subsvs	r0, pc, #99	; 0x63
    12cc:	5f007373 	svcpl	0x00007373
    12d0:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
				d = (bc == 16) ? 10000 : 1000000000;
    12d4:	6e490061 	cdpvs	0, 4, cr0, cr9, cr1, {3}
    12d8:	66654474 			; <UNDEFINED> instruction: 0x66654474
    12dc:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
					v = (word) (val / d);
    12e0:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
					if (v || d == 1) break;
    12e4:	0072656c 	rsbseq	r6, r2, ip, ror #10
    12e8:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
					d /= 10;
    12ec:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
				d = (bc == 16) ? 10000 : 1000000000;
    12f0:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
					dgout (v + '0');
    12f4:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
    12f8:	65443233 	strbvs	r3, [r4, #-563]	; 0xfffffdcd
    12fc:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
					d /= 10;
    1300:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
					val = val - (v * d);
    1304:	00525349 	subseq	r5, r2, r9, asr #6
					if (d == 0) break;
    1308:	47464343 	strbmi	r4, [r6, -r3, asr #6]
					v = (word) (val / d);
    130c:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    1310:	4f4c5f54 	svcmi	0x004c5f54
				if (bc == 16)
    1314:	305f4441 	subscc	r4, pc, r1, asr #8
				d = (bc == 16) ? 10000 : 1000000000;
    1318:	46434300 	strbmi	r4, [r3], -r0, lsl #6
					val &= 0xffff;
    131c:	4f565f47 	svcmi	0x00565f47
					dgout (*s);
    1320:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
					s++;
    1324:	5f44414f 	svcpl	0x0044414f
				while (*s != '\0') {
    1328:	43430031 	movtmi	r0, #12337	; 0x3031
    132c:	425f4746 	subsmi	r4, pc, #18350080	; 0x1180000
			dgout (*mess++);
    1330:	4f435f4c 	svcmi	0x00435f4c
    1334:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    1338:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    133c:	54525f47 	ldrbpl	r5, [r2], #-3911	; 0xfffff0b9
    1340:	464f5f43 	strbmi	r5, [pc], -r3, asr #30
}
    1344:	54455346 	strbpl	r5, [r5], #-838	; 0xfffffcba
    while(1)
    1348:	46434300 	strbmi	r4, [r3], -r0, lsl #6
{
    134c:	4f4d5f47 	svcmi	0x004d5f47
    SetupTrimDevice();
    1350:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
    pui32Src = &_etext;
    1354:	00464e4f 	subeq	r4, r6, pc, asr #28
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1358:	63635f5f 	cmnvs	r3, #380	; 0x17c
    __asm("    ldr     r0, =_bss\n"
    135c:	2f006766 	svccs	0x00006766
    1360:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1364:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1368:	2f6e6974 	svccs	0x006e6974
    136c:	6b736544 	blvs	1cda884 <__ccfg+0x1cba8dc>
   main();
    1370:	2f706f74 	svccs	0x00706f74
    FaultISR();
    1374:	4f534c4f 	svcmi	0x00534c4f
        *pui32Dest++ = *pui32Src++;
    1378:	2f54454e 	svccs	0x0054454e
    137c:	4f434950 	svcmi	0x00434950
    1380:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1384:	2f534f63 	svccs	0x00534f63
    1388:	33314343 	teqcc	r1, #201326593	; 0xc000001
    138c:	632f5858 			; <UNDEFINED> instruction: 0x632f5858
    1390:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    1394:	43430063 	movtmi	r0, #12387	; 0x3063
static byte get_byte () {
    1398:	535f4746 	cmppl	pc, #18350080	; 0x1180000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    139c:	5f455a49 	svcpl	0x00455a49
    13a0:	5f444e41 	svcpl	0x00444e41
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    13a4:	5f534944 	svcpl	0x00534944
    13a8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
		if (ee_inp)
    13ac:	43430053 	movtmi	r0, #12371	; 0x3053
			b |= 1;
    13b0:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    13b4:	5f454545 	svcpl	0x00454545
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13b8:	5f43414d 	svcpl	0x0043414d
	for (b = 0, i = 0; i < 8; i++) {
    13bc:	43430030 	movtmi	r0, #12336	; 0x3030
}
    13c0:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    13c4:	5f454545 	svcpl	0x00454545
    13c8:	5f43414d 	svcpl	0x0043414d
static void put_byte (byte b) {
    13cc:	43430031 	movtmi	r0, #12337	; 0x3031
    13d0:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 12c0 <diag+0xb8>
    13d4:	5f45444f 	svcpl	0x0045444f
    13d8:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
		if (b & 0x80)
    13dc:	4300315f 	movwmi	r3, #351	; 0x15f
    13e0:	5f474643 	svcpl	0x00474643
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13e4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for (i = 0; i < 8; i++) {
    13e8:	5041545f 	subpl	r5, r1, pc, asr r4
		b <<= 1;
    13ec:	5041445f 	subpl	r4, r1, pc, asr r4
	for (i = 0; i < 8; i++) {
    13f0:	4300305f 	movwmi	r3, #95	; 0x5f
}
    13f4:	5f474643 	svcpl	0x00474643
    13f8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13fc:	5041545f 	subpl	r5, r1, pc, asr r4
    1400:	5041445f 	subpl	r4, r1, pc, asr r4
	put_byte (cmd);
    1404:	6300315f 	movwvs	r3, #351	; 0x15f
    1408:	5f676663 	svcpl	0x00676663
}
    140c:	43430074 	movtmi	r0, #12404	; 0x3074
    1410:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
static void wwait (word st, word del) {
    1414:	5f474643 	svcpl	0x00474643
    1418:	544f5250 	strbpl	r5, [pc], #-592	; 1420 <wwait+0xc>
    141c:	3732315f 			; <UNDEFINED> instruction: 0x3732315f
	while (dopen && (rdsr () & 1)) {
    1420:	0036395f 	eorseq	r3, r6, pc, asr r9
    1424:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1428:	4152455f 	cmpmi	r2, pc, asr r5
    142c:	435f4553 	cmpmi	pc, #348127232	; 0x14c00000
	put_byte (CMD_RDSR);
    1430:	00464e4f 	subeq	r4, r6, pc, asr #28
	r = get_byte ();
    1434:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1438:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	while (dopen && (rdsr () & 1)) {
    143c:	52505f47 	subspl	r5, r0, #284	; 0x11c
}
    1440:	335f544f 	cmpcc	pc, #1325400064	; 0x4f000000
		if (st == WNONE)
    1444:	00305f31 	eorseq	r5, r0, r1, lsr pc
    1448:	47464343 	strbmi	r4, [r6, -r3, asr #6]
			mdelay (1);
    144c:	414d495f 	cmpmi	sp, pc, asr r9
    1450:	565f4547 	ldrbpl	r4, [pc], -r7, asr #10
			delay (del, st);
    1454:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
    1458:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
			release;
    145c:	43430046 	movtmi	r0, #12358	; 0x3046
    1460:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
    1464:	5f514552 	svcpl	0x00514552
static void ready () {
    1468:	5346464f 	movtpl	r4, #26191	; 0x664f
	if (dopen) {
    146c:	43005445 	movwmi	r5, #1093	; 0x445
		wwait (WNONE, 1);
    1470:	5f474643 	svcpl	0x00474643
    1474:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1478:	4f52505f 	svcmi	0x0052505f
	dstat = 0;
    147c:	33365f54 	teqcc	r6, #84, 30	; 0x150
}
    1480:	0032335f 	eorseq	r3, r2, pc, asr r3
    1484:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1488:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
	udelay (1);
    148c:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
    1490:	00305f45 	eorseq	r5, r0, r5, asr #30
	udelay (1);
    1494:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		dopen = DOPEN_TEMP;
    1498:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
    149c:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
    14a0:	00315f45 	eorseq	r5, r1, r5, asr #30
    14a4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
static void cclose () {
    14a8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	if (dopen == DOPEN_TEMP) {
    14ac:	52505f47 	subspl	r5, r0, #284	; 0x11c
    14b0:	395f544f 	ldmdbcc	pc, {r0, r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
		wwait (WNONE, 1);
    14b4:	34365f35 	ldrtcc	r5, [r6], #-3893	; 0xfffff0cb
    14b8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	cmd_0 (CMD_DP);
    14bc:	58455f47 	stmdapl	r5, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    14c0:	464c5f54 			; <UNDEFINED> instruction: 0x464c5f54
		dopen = 0;
    14c4:	4b4c435f 	blmi	1312248 <__ccfg+0x12f22a0>
}
    14c8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
word ee_open () {
    14cc:	43435f47 	movtmi	r5, #16199	; 0x3f47
	ready ();
    14d0:	545f4746 	ldrbpl	r4, [pc], #-1862	; 14d8 <ee_open+0xc>
	dopen = DOPEN_PERM;
    14d4:	504f5f49 	subpl	r5, pc, r9, asr #30
    14d8:	4e4f4954 			; <UNDEFINED> instruction: 0x4e4f4954
}
    14dc:	50470053 	subpl	r0, r7, r3, asr r0
	if (dopen) {
    14e0:	725f4f49 	subsvc	r4, pc, #292	; 0x124
    14e4:	44646165 	strbtmi	r6, [r4], #-357	; 0xfffffe9b
		dopen = DOPEN_TEMP;
    14e8:	6a006f69 	bvs	1d294 <__exidx_end+0x1a65c>
		cclose ();
    14ec:	006b6e75 	rsbeq	r6, fp, r5, ror lr
}
    14f0:	5f6e6970 	svcpl	0x006e6970
int ser_outf (word st, const char *m, ...) {
    14f4:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    14f8:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
	if ((prcs = running (__outserial)) != 0) {
    14fc:	00646165 	rsbeq	r6, r4, r5, ror #2
    1500:	5f6e6970 	svcpl	0x006e6970
		join (prcs, st);
    1504:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    1508:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		release;
    150c:	0074696e 	rsbseq	r6, r4, lr, ror #18
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1510:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 145c <wwait+0x48>
    1514:	616d2f65 	cmnvs	sp, r5, ror #30
    1518:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		umwait (st);
    151c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1520:	706f746b 	rsbvc	r7, pc, fp, ror #8
	if (runstrand (__outserial, buf) == 0) {
    1524:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1528:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    152c:	4349502f 	movtmi	r5, #36911	; 0x902f
		ufree (buf);
    1530:	502f534f 	eorpl	r5, pc, pc, asr #6
		npwait (st);
    1534:	534f6369 	movtpl	r6, #62313	; 0xf369
}
    1538:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    153c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1540:	6f736e65 	svcvs	0x00736e65
    1544:	702f7372 	eorvc	r7, pc, r2, ror r3	; <UNPREDICTABLE>
int ser_inf (word st, const char *fmt, ...) {
    1548:	735f6e69 	cmpvc	pc, #1680	; 0x690
    154c:	6f736e65 	svcvs	0x00736e65
	if (fmt == NULL)
    1550:	00632e72 	rsbeq	r2, r3, r2, ror lr
	if (__inpline == NULL) {
    1554:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
		if ((prcs = running (__inserial)) == 0) {
    1558:	63616200 	cmnvs	r1, #0, 4
    155c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			prcs = runthread (__inserial);
    1560:	62654400 	rsbvs	r4, r5, #0, 8
    1564:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
			if (prcs == 0) {
    1568:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
				npwait (st);
    156c:	2f656d6f 	svccs	0x00656d6f
		release;
    1570:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
		join (prcs, st);
    1574:	442f6e69 	strtmi	r6, [pc], #-3689	; 157c <ser_inf+0x34>
    1578:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	va_start (ap, fmt);
    157c:	4f2f706f 	svcmi	0x002f706f
	prcs = vscan (__inpline, fmt, ap);
    1580:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1584:	502f5445 	eorpl	r5, pc, r5, asr #8
	ufree (__inpline);
    1588:	534f4349 	movtpl	r4, #62281	; 0xf349
	__inpline = NULL;
    158c:	6369502f 	cmnvs	r9, #47	; 0x2f
}
    1590:	502f534f 	eorpl	r5, pc, pc, asr #6
    1594:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1598:	2f4f492f 	svccs	0x004f492f
		return 0;
    159c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    15a0:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    15a4:	62700063 	rsbsvs	r0, r0, #99	; 0x63
void RFCCPE0IntHandler (void) {
    15a8:	6f747475 	svcvs	0x00747475
	if (HWREG (RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIFG) &
    15ac:	5f5f006e 	svcpl	0x005f006e
		_BIS (dstate, DSTATE_IRST);
    15b0:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
    15b4:	6f747475 	svcvs	0x00747475
    15b8:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
    HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) = ~ui32Mask;
    15bc:	6f747475 	svcvs	0x00747475
  }while (HWREG(RFC_DBELL_BASE+RFC_DBELL_O_RFCPEIFG) & ui32Mask);
    15c0:	615f736e 	cmpvs	pc, lr, ror #6
    15c4:	6f697463 	svcvs	0x00697463
	p_trigger (drvprcs, qevent);
    15c8:	4345006e 	movtmi	r0, #20590	; 0x506e
  HWREG( RFC_DBELL_BASE + RFC_DBELL_O_RFCPEIEN ) &= ~ui32Mask;
    15cc:	00746e6f 	rsbseq	r6, r4, pc, ror #28
    15d0:	695f6565 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    15d4:	5f74696e 	svcpl	0x0074696e
    15d8:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    15dc:	70750065 	rsbsvc	r0, r5, r5, rrx
    15e0:	63006f74 	movwvs	r6, #3956	; 0xf74
    15e4:	305f646d 	subscc	r6, pc, sp, ror #8
    15e8:	5f656500 	svcpl	0x00656500
    15ec:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    15f0:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
	RISE_N_SHINE;
    15f4:	6172655f 	cmnvs	r2, pc, asr r5
    15f8:	65006573 	strvs	r6, [r0, #-1395]	; 0xfffffa8d
    15fc:	72775f65 	rsbsvc	r5, r7, #404	; 0x194
}
    1600:	00657469 	rsbeq	r7, r5, r9, ror #8
    1604:	65706f64 	ldrbvs	r6, [r0, #-3940]!	; 0xfffff09c
    1608:	6565006e 	strbvs	r0, [r5, #-110]!	; 0xffffff92
    160c:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
    1610:	4357006e 	cmpmi	r7, #110	; 0x6e
    1614:	00746e6f 	rsbseq	r6, r4, pc, ror #28
strand (__outserial, const char*)
    1618:	5f646d63 	svcpl	0x00646d63
    161c:	65650033 	strbvs	r0, [r5, #-51]!	; 0xffffffcd
    1620:	6e61705f 	mcrvs	0, 3, r7, cr1, cr15, {2}
    1624:	65006369 	strvs	r6, [r0, #-873]	; 0xfffffc97
endstrand
    1628:	79735f65 	ldmdbvc	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    162c:	6600636e 	strvs	r6, [r0], -lr, ror #6
	ptr = data;
    1630:	006d6f72 	rsbeq	r6, sp, r2, ror pc
    1634:	725f6565 	subsvc	r6, pc, #423624704	; 0x19400000
	if (*ptr)
    1638:	00646165 	rsbeq	r6, r4, r5, ror #2
		len = strlen (ptr);
    163c:	72736472 	rsbsvc	r6, r3, #1912602624	; 0x72000000
    1640:	6f682f00 	svcvs	0x00682f00
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    1644:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1498 <ready+0x30>
    1648:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    164c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1650:	6f746b73 	svcvs	0x00746b73
    1654:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	len -= quant;
    1658:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    165c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1660:	2f534f43 	svccs	0x00534f43
	if (len == 0) {
    1664:	4f636950 	svcmi	0x00636950
		ufree (data);
    1668:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
		finish;
    166c:	2f736269 	svccs	0x00736269
    1670:	726f7453 	rsbvc	r7, pc, #1392508928	; 0x53000000
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1674:	2f656761 	svccs	0x00656761
    1678:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    167c:	5f656761 	svcpl	0x00656761
    1680:	3532786d 	ldrcc	r7, [r2, #-2157]!	; 0xfffff793
    1684:	33303872 	teqcc	r0, #7471104	; 0x720000
strand (__inserial, address)
    1688:	00632e35 	rsbeq	r2, r3, r5, lsr lr
    168c:	6f6c6363 	svcvs	0x006c6363
    1690:	64006573 	strvs	r6, [r0], #-1395	; 0xfffffa8d
    1694:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1698:	706f6300 	rsbvc	r6, pc, r0, lsl #6
	if (__inpline != NULL)
    169c:	63006e65 	movwvs	r6, #3685	; 0xe65
    16a0:	00727470 	rsbseq	r7, r2, r0, ror r4
		finish;
    16a4:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    16a8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    16ac:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    16b0:	44450079 	strbmi	r0, [r5], #-121	; 0xffffff87
    16b4:	00656e6f 	rsbeq	r6, r5, pc, ror #28
		umwait (IM_INIT);
    16b8:	776f6470 			; <UNDEFINED> instruction: 0x776f6470
		release;
    16bc:	7777006e 	ldrbvc	r0, [r7, -lr, rrx]!
	savedata (data);
    16c0:	00746961 	rsbseq	r6, r4, r1, ror #18
	len = MAX_LINE_LENGTH;
    16c4:	5f746567 	svcpl	0x00746567
	io (IM_READ, __cport, READ, ptr, 1);
    16c8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    16cc:	74757000 	ldrbtvc	r7, [r5], #-0
    16d0:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
    16d4:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
	if (ptr == (char*) data) { // new line
    16d8:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 76e <__pinlist_setirq+0xe>
    16dc:	2f006674 	svccs	0x00006674
		if (*ptr == '\0') { // bin cmd
    16e0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			proceed (IM_BIN);
    16e4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    16e8:	2f6e6974 	svccs	0x006e6974
		if (*ptr < 0x20)
    16ec:	6b736544 	blvs	1cdac04 <__ccfg+0x1cbac5c>
    16f0:	2f706f74 	svccs	0x00706f74
			proceed (IM_READ);
    16f4:	4f534c4f 	svcmi	0x00534c4f
    16f8:	2f54454e 	svccs	0x0054454e
	if (*ptr == '\n' || *ptr == '\r') {
    16fc:	4f434950 	svcmi	0x00434950
    1700:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1704:	2f534f63 	svccs	0x00534f63
		*ptr = '\0';
    1708:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
		__inpline = (char*)data;
    170c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
		finish;
    1710:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
	if (len) {
    1714:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
		ptr++;
    1718:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    171c:	00632e66 	rsbeq	r2, r3, r6, ror #28
		len--;
    1720:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
	proceed (IM_READ);
    1724:	6e696c70 	mcrvs	12, 3, r6, cr9, cr0, {3}
	io (IM_BIN, __cport, READ, ptr, 1);
    1728:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    172c:	2f656d6f 	svccs	0x00656d6f
    1730:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1734:	442f6e69 	strtmi	r6, [pc], #-3689	; 173c <__inserial+0xb4>
    1738:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	len -= 2;
    173c:	4f2f706f 	svcmi	0x002f706f
	if (len > *ptr + 1) // 1 for 0x04
    1740:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1744:	502f5445 	eorpl	r5, pc, r5, asr #8
		len = *ptr + 1;
    1748:	534f4349 	movtpl	r4, #62281	; 0xf349
    174c:	6369502f 	cmnvs	r9, #47	; 0x2f
	ptr++;
    1750:	502f534f 	eorpl	r5, pc, pc, asr #6
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1754:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1758:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    175c:	2f6c6169 	svccs	0x006c6169
    1760:	5f726573 	svcpl	0x00726573
    1764:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    1768:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
	len -= quant;
    176c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
		__inpline = (char*)data;
    1770:	73690066 	cmnvc	r9, #102	; 0x66
		finish;
    1774:	5f657573 	svcpl	0x00657573
	ptr += quant;
    1778:	00646d63 	rsbeq	r6, r4, r3, ror #26
    177c:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
endstrand
    1780:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    1784:	63006e6f 	movwvs	r6, #3695	; 0xe6f
	proceed (IM_BINL);
    1788:	616d6d6f 	cmnvs	sp, pc, ror #26
endstrand
    178c:	6f4e646e 	svcvs	0x004e646e
    1790:	70416200 	subvc	r6, r1, r0, lsl #4
    1794:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1798:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    179c:	72007375 	andvc	r7, r0, #-738197503	; 0xd4000001
    17a0:	6e6f5f66 	cdpvs	15, 6, cr5, cr15, cr6, {3}
		if (res && (d < n))
    17a4:	54667200 	strbtpl	r7, [r6], #-512	; 0xfffffe00
    17a8:	006d6972 	rsbeq	r6, sp, r2, ror r9
    17ac:	72615662 	rsbvc	r5, r1, #102760448	; 0x6200000
    17b0:	006e654c 	rsbeq	r6, lr, ip, asr #10
			res [d] = (char) c;
    17b4:	746b5070 	strbtvc	r5, [fp], #-112	; 0xffffff90
		d++;
    17b8:	6e656300 	cdpvs	3, 6, cr6, cr5, cr0, {0}
    17bc:	46726574 			; <UNDEFINED> instruction: 0x46726574
    17c0:	00716572 	rsbseq	r6, r1, r2, ror r5
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17c4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    17c8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    17cc:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
				enci (10000);
    17d0:	506b7366 	rsbpl	r7, fp, r6, ror #6
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    17d4:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    17d8:	69687700 	stmdbvs	r8!, {r8, r9, sl, ip, sp, lr}^
	d = 0;
    17dc:	4d6e6574 	cfstr64mi	mvdx6, [lr, #-464]!	; 0xfffffe30
		c = *fm++;
    17e0:	0065646f 	rsbeq	r6, r5, pc, ror #8
		if (c == '\\') {
    17e4:	5f636672 	svcpl	0x00636672
			if ((c = *fm++) == '\0') {
    17e8:	5f444d43 	svcpl	0x00444d43
    17ec:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
				outc ('\\');
    17f0:	5f53435f 	svcpl	0x0053435f
			if ((c = *fm++) == '\0') {
    17f4:	61700073 	cmnvs	r0, r3, ror r0
				outc ('\\');
    17f8:	72547473 	subsvc	r7, r4, #1929379840	; 0x73000000
    17fc:	72006769 	andvc	r6, r0, #27525120	; 0x1a40000
			outc (c);
    1800:	69725466 	ldmdbvs	r2!, {r1, r2, r5, r6, sl, ip, lr}^
    1804:	00745f6d 	rsbseq	r5, r4, sp, ror #30
			if (c == '\0')
    1808:	66756272 			; <UNDEFINED> instruction: 0x66756272
    180c:	44006c66 	strmi	r6, [r0], #-3174	; 0xfffff39a
			outc (c);
    1810:	4f4c5f52 	svcmi	0x004c5f52
				outc (val);
    1814:	5f5f504f 	svcpl	0x005f504f
				val = (word) va_arg (ap, aword);
    1818:	754f7000 	strbvc	r7, [pc, #-0]	; 1820 <__pi_vfparse+0x5c>
		if (c == '%') {
    181c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1820:	65526200 	ldrbvs	r6, [r2, #-512]	; 0xfffffe00
			c = *fm++;
    1824:	74616570 	strbtvc	r6, [r1], #-1392	; 0xfffffa90
			switch (c) {
    1828:	6e006b4f 	vmlsvs.f64	d6, d0, d15
    182c:	67497852 	smlsldvs	r7, r9, r2, r8
    1830:	65726f6e 	ldrbvs	r6, [r2, #-3950]!	; 0xfffff092
    1834:	65660064 	strbvs	r0, [r6, #-100]!	; 0xffffff9c
    1838:	646f4d63 	strbtvs	r4, [pc], #-3427	; 1840 <__pi_vfparse+0x7c>
    183c:	526e0065 	rsbpl	r0, lr, #101	; 0x65
    1840:	6b6f4e78 	blvs	1bd5228 <__ccfg+0x1bb5280>
    1844:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
				outc ('%');
    1848:	616c6564 	cmnvs	ip, r4, ror #10
    184c:	72700079 	rsbsvc	r0, r0, #121	; 0x79
				outc (c);
    1850:	4d6d6165 	stfmie	f6, [sp, #-404]!	; 0xfffffe6c
    1854:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1858:	72754370 	rsbsvc	r4, r5, #112, 6	; 0xc0000001
				if (c == '\0')
    185c:	746e4572 	strbtvc	r4, [lr], #-1394	; 0xfffffa8e
				return d;
    1860:	69007972 	stmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
}
    1864:	6e497172 	mcrvs	1, 2, r7, cr9, cr2, {3}
    1868:	77007674 	smlsdxvc	r0, r4, r6, r7
			switch (c) {
    186c:	5f746961 	svcpl	0x00746961
    1870:	00646d63 	rsbeq	r6, r4, r3, ror #26
    1874:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
				for (i = 12; ; i -= 4) {
    1878:	6f437461 	svcvs	0x00437461
				val = (word) va_arg (ap, aword);
    187c:	7300666e 	movwvc	r6, #1646	; 0x66e
						[ (val >> i) & 0xf ]);
    1880:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1884:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    1888:	70416200 	subvc	r6, r1, r0, lsl #4
					outc (__pi_hex_enc_table
    188c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1890:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
					if (i == 0)
    1894:	6d617473 	cfstrdvs	mvd7, [r1, #-460]!	; 0xfffffe34
    1898:	4e700070 	mrcmi	0, 3, r0, cr0, cr0, {3}
				for (i = 12; ; i -= 4) {
    189c:	45747865 	ldrbmi	r7, [r4, #-2149]!	; 0xfffff79b
				val = (word) va_arg (ap, aword);
    18a0:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
				if (c == 'd' && (val & 0x8000) != 0) {
    18a4:	5f465200 	svcpl	0x00465200
				val = (word) va_arg (ap, aword);
    18a8:	50646d63 	rsbpl	r6, r4, r3, ror #26
				if (c == 'd' && (val & 0x8000) != 0) {
    18ac:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    18b0:	6f696461 	svcvs	0x00696461
					outc ('-');
    18b4:	53766944 	cmnpl	r6, #68, 18	; 0x110000
    18b8:	70757465 	rsbsvc	r7, r5, r5, ror #8
					val = (~val) + 1;
    18bc:	76657100 	strbtvc	r7, [r5], -r0, lsl #2
    18c0:	00746e65 	rsbseq	r6, r4, r5, ror #28
				for (i = 12; ; i -= 4) {
    18c4:	43746b70 	cmnmi	r4, #112, 22	; 0x1c000
				enci (10000);
    18c8:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    18cc:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    18d0:	3163635f 	cmncc	r3, pc, asr r3
    18d4:	00303533 	eorseq	r3, r0, r3, lsr r5
    18d8:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    18dc:	645f3035 	ldrbvs	r3, [pc], #-53	; 18e4 <__pi_vfparse+0x120>
    18e0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    18e4:	66720072 			; <UNDEFINED> instruction: 0x66720072
    18e8:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    18ec:	53465f44 	movtpl	r5, #28484	; 0x6f44
    18f0:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    18f4:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    18f8:	465f444d 	ldrbmi	r4, [pc], -sp, asr #8
    18fc:	00745f53 	rsbseq	r5, r4, r3, asr pc
    1900:	6f507874 	svcvs	0x00507874
    1904:	00726577 	rsbseq	r6, r2, r7, ror r5
    1908:	77427872 	smlsldxvc	r7, r2, r2, r8
    190c:	70706100 	rsbsvc	r6, r0, r0, lsl #2
				if (c == 'd' || c == 'u') {
    1910:	6547796c 	strbvs	r7, [r7, #-2412]	; 0xfffff694
    1914:	6b73666e 	blvs	1cdb2d4 <__ccfg+0x1cbb32c>
					if (c == 'd' &&
    1918:	63746150 	cmnvs	r4, #80, 2
					val = va_arg (ap, lword);
    191c:	68630068 	stmdavs	r3!, {r3, r5, r6}^
					fm++;
    1920:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xfffff19f
					if (c == 'd' &&
    1924:	7973006c 	ldmdbvc	r3!, {r2, r3, r5, r6}^
    1928:	4368746e 	cmnmi	r8, #1845493760	; 0x6e000000
						outc ('-');
    192c:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    1930:	74754162 	ldrbtvc	r4, [r5], #-354	; 0xfffffe9e
						val = (~val) + 1;
    1934:	756c466f 	strbvc	r4, [ip, #-1647]!	; 0xfffff991
				enci (10000);
    1938:	72436873 	subvc	r6, r3, #7536640	; 0x730000
					enci (1000000000UL);
    193c:	72724563 	rsbsvc	r4, r2, #415236096	; 0x18c00000
    1940:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1944:	52676966 	rsbpl	r6, r7, #1671168	; 0x198000
    1948:	6f724666 	svcvs	0x00724666
    194c:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
    1950:	54620064 	strbtpl	r0, [r2], #-100	; 0xffffff9c
    1954:	646f4d78 	strbtvs	r4, [pc], #-3448	; 195c <__pi_vfparse+0x198>
    1958:	6e610065 	cdpvs	0, 6, cr0, cr1, cr5, {3}
    195c:	676f6c61 	strbvs	r6, [pc, -r1, ror #24]!
    1960:	4d676643 	stclmi	6, cr6, [r7, #-268]!	; 0xfffffef4
    1964:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1968:	616e4562 	cmnvs	lr, r2, ror #10
    196c:	00646d43 	rsbeq	r6, r4, r3, asr #26
    1970:	436d756e 	cmnmi	sp, #461373440	; 0x1b800000
    1974:	4972726f 	ldmdbmi	r2!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1978:	7000766e 	andvc	r7, r0, lr, ror #12
    197c:	50717249 	rsbspl	r7, r1, r9, asr #4
				} else if (c == 'x') {
    1980:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
					for (i = 28; ; i -= 4) {
    1984:	61507000 	cmpvs	r0, r0
					val = va_arg (ap, lword);
    1988:	56686374 			; <UNDEFINED> instruction: 0x56686374
							[ (val >> i) & 0xf ]);
    198c:	52006365 	andpl	r6, r0, #-1811939327	; 0x94000001
    1990:	70434346 	subvc	r4, r3, r6, asr #6
						outc (__pi_hex_enc_table
    1994:	746e4965 	strbtvc	r4, [lr], #-2405	; 0xfffff69b
    1998:	61736944 	cmnvs	r3, r4, asr #18
    199c:	00656c62 	rsbeq	r6, r5, r2, ror #24
						if (i == 0)
    19a0:	5078616d 	rsbspl	r6, r8, sp, ror #2
    19a4:	654c746b 	strbvs	r7, [ip, #-1131]	; 0xfffffb95
					for (i = 28; ; i -= 4) {
    19a8:	6f63006e 	svcvs	0x0063006e
					outc ('%');
    19ac:	6f437272 	svcvs	0x00437272
    19b0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    19b4:	74617200 	strbtvc	r7, [r1], #-512	; 0xfffffe00
					outc ('l');
    19b8:	69620030 	stmdbvs	r2!, {r4, r5}^
    19bc:	6f4d7361 	svcvs	0x004d7361
				val = (word) va_arg (ap, aword);
    19c0:	52006564 	andpl	r6, r0, #100, 10	; 0x19000000
				outc (val);
    19c4:	70434346 	subvc	r4, r3, r6, asr #6
    19c8:	6e493065 	cdpvs	0, 4, cr3, cr9, cr5, {3}
				while (*st != '\0') {
    19cc:	616e4574 	smcvs	58452	; 0xe454
    19d0:	00656c62 	rsbeq	r6, r5, r2, ror #24
    19d4:	636e4962 	cmnvs	lr, #1605632	; 0x188000
    19d8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
					outc (*st);
    19dc:	00637243 	rsbeq	r7, r3, r3, asr #4
    19e0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
					st++;
    19e4:	66496769 	strbvs	r6, [r9], -r9, ror #14
		c = *fm++;
    19e8:	00636441 	rsbeq	r6, r3, r1, asr #8
    19ec:	5f636672 	svcpl	0x00636672
    19f0:	5f444d43 	svcpl	0x00444d43
char *vform (char *res, const char *fm, va_list aq) {
    19f4:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    19f8:	5f58525f 	svcpl	0x0058525f
	if (res != NULL) {
    19fc:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1a00:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
    1a04:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1a08:	63667200 	cmnvs	r6, #0, 4
}
    1a0c:	444d435f 	strbmi	r4, [sp], #-863	; 0xfffffca1
    1a10:	4f52505f 	svcmi	0x0052505f
	fml = strlen (fm) + 17;
    1a14:	53435f50 	movtpl	r5, #16208	; 0x3f50
    1a18:	6600745f 			; <UNDEFINED> instruction: 0x6600745f
    1a1c:	746e6f72 	strbtvc	r6, [lr], #-3954	; 0xfffff08e
	if ((res = (char*) umalloc (fml)) == NULL)
    1a20:	4d646e45 	stclmi	14, cr6, [r4, #-276]!	; 0xfffffeec
    1a24:	0065646f 	rsbeq	r6, r5, pc, ror #8
    1a28:	67697274 			; <UNDEFINED> instruction: 0x67697274
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1a2c:	4e726567 	cdpmi	5, 7, cr6, cr2, cr7, {3}
    1a30:	5170006f 	cmnpl	r0, pc, rrx
    1a34:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    1a38:	646e6500 	strbtvs	r6, [lr], #-1280	; 0xfffffb00
		ufree (res);
    1a3c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
		goto Again;
    1a40:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
	if (buf == NULL || fmt == NULL)
    1a44:	0073635f 	rsbseq	r6, r3, pc, asr r3
int vscan (const char *buf, const char *fmt, va_list ap) {
    1a48:	69737372 	ldmdbvs	r3!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}^
	if (buf == NULL || fmt == NULL)
    1a4c:	00726854 	rsbseq	r6, r2, r4, asr r8
    1a50:	436d756e 	cmnmi	sp, #461373440	; 0x1b800000
    1a54:	4272726f 	rsbsmi	r7, r2, #-268435450	; 0xf0000006
		    	    case 'u': scanu (lword); break;
    1a58:	00797375 	rsbseq	r7, r9, r5, ror r3
			while (isspace (*buf)) buf++;
    1a5c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    1a60:	52007375 	andpl	r7, r0, #-738197503	; 0xd4000001
	while (*fmt != '\0') {
    1a64:	006c6156 	rsbeq	r6, ip, r6, asr r1
		if (*fmt++ != '%')
    1a68:	646e6f63 	strbtvs	r6, [lr], #-3939	; 0xfffff09d
		switch (*fmt++) {
    1a6c:	6f697469 	svcvs	0x00697469
    1a70:	4962006e 	stmdbmi	r2!, {r1, r2, r3, r5, r6}^
    1a74:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    1a78:	64486564 	strbvs	r6, [r8], #-1380	; 0xfffffa9c
    1a7c:	616c0072 	smcvs	49154	; 0xc002
    1a80:	73527473 	cmpvc	r2, #1929379840	; 0x73000000
    1a84:	6d006973 	vstrvs.16	s12, [r0, #-230]	; 0xffffff1a	; <UNPREDICTABLE>
}
    1a88:	7954646f 	ldmdbvc	r4, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
		switch (*fmt++) {
    1a8c:	70006570 	andvc	r6, r0, r0, ror r5
    1a90:	7473614c 	ldrbtvc	r6, [r3], #-332	; 0xfffffeb4
    1a94:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    1a98:	526e0079 	rsbpl	r0, lr, #121	; 0x79
			while (isspace (*buf)) buf++;
    1a9c:	66754278 			; <UNDEFINED> instruction: 0x66754278
    1aa0:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
    1aa4:	5f787200 	svcpl	0x00787200
    1aa8:	75006361 	strvc	r6, [r0, #-865]	; 0xfffffc9f
    1aac:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    1ab0:	006b7361 	rsbeq	r7, fp, r1, ror #6
			if (*buf == '\0')
    1ab4:	6e457363 	cdpvs	3, 4, cr7, cr5, cr3, {3}
			if (*buf != ',') {
    1ab8:	69725464 	ldmdbvs	r2!, {r2, r5, r6, sl, ip, lr}^
			sap = va_arg (ap, char*);
    1abc:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
			nc++;
    1ac0:	69426200 	stmdbvs	r2, {r9, sp, lr}^
			if (*buf != ',') {
    1ac4:	76655274 			; <UNDEFINED> instruction: 0x76655274
				while (!isspace (*buf) && *buf != ',' &&
    1ac8:	61737265 	cmnvs	r3, r5, ror #4
    1acc:	5f5f006c 	svcpl	0x005f006c
    1ad0:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    1ad4:	73003079 	movwvc	r3, #121	; 0x79
    1ad8:	6f626d79 	svcvs	0x00626d79
    1adc:	7461526c 	strbtvc	r5, [r1], #-620	; 0xfffffd94
    1ae0:	6e690065 	cdpvs	0, 6, cr0, cr9, cr5, {3}
			while (isspace (*buf)) buf++;
    1ae4:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
    1ae8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1aec:	4e700073 	mrcmi	0, 3, r0, cr0, cr3, {3}
    1af0:	4f747865 	svcmi	0x00747865
    1af4:	6e690070 	mcrvs	0, 3, r0, cr9, cr0, {3}
			if (*buf == ',') buf++;
    1af8:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    1afc:	41620071 	smcmi	8193	; 0x2001
			*sap = '\0';
    1b00:	466f7475 			; <UNDEFINED> instruction: 0x466f7475
			break;
    1b04:	6873756c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
		    case 'd': scani (word); break;
    1b08:	6f6e6749 	svcvs	0x006e6749
    1b0c:	00646572 	rsbeq	r6, r4, r2, ror r5
    1b10:	5f636672 	svcpl	0x00636672
    1b14:	69646172 	stmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1b18:	5f704f6f 	svcpl	0x00704f6f
    1b1c:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    1b20:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    1b24:	67676972 			; <UNDEFINED> instruction: 0x67676972
    1b28:	70007265 	andvc	r7, r0, r5, ror #4
    1b2c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1b30:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1b34:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
    1b38:	006b7366 	rsbeq	r7, fp, r6, ror #6
    1b3c:	6f5f6672 	svcvs	0x005f6672
    1b40:	62006666 	andvs	r6, r0, #106954752	; 0x6600000
    1b44:	43616e45 	cmnmi	r1, #1104	; 0x450
    1b48:	0072726f 	rsbseq	r7, r2, pc, ror #4
    1b4c:	4f734662 	svcmi	0x00734662
    1b50:	64496666 	strbvs	r6, [r9], #-1638	; 0xfffff99a
    1b54:	5200656c 	andpl	r6, r0, #108, 10	; 0x1b000000
    1b58:	6d635f46 	stclvs	15, cr5, [r3, #-280]!	; 0xfffffee8
    1b5c:	00734664 	rsbseq	r4, r3, r4, ror #12
    1b60:	61657270 	smcvs	22304	; 0x5720
    1b64:	6e6f436d 	cdpvs	3, 6, cr4, cr15, cr13, {3}
    1b68:	79730066 	ldmdbvc	r3!, {r1, r2, r5, r6}^
    1b6c:	6f57636e 	svcvs	0x0057636e
    1b70:	6f006472 	svcvs	0x00006472
    1b74:	6f697470 	svcvs	0x00697470
		    case 'u': scanu (word); break;
    1b78:	6170006e 	cmnvs	r0, lr, rrx
    1b7c:	47686374 			; <UNDEFINED> instruction: 0x47686374
    1b80:	73666e65 	cmnvc	r6, #1616	; 0x650
    1b84:	6566526b 	strbvs	r5, [r6, #-619]!	; 0xfffffd95
    1b88:	6f682f00 	svcvs	0x00682f00
    1b8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 19e0 <__pi_vfparse+0x21c>
    1b90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1b94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1b98:	6f746b73 	svcvs	0x00746b73
    1b9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1ba0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1ba4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1ba8:	2f534f43 	svccs	0x00534f43
    1bac:	4f636950 	svcmi	0x00636950
    1bb0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    1bb4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1bb8:	7066722f 	rsbvc	r7, r6, pc, lsr #4
    1bbc:	2e706f72 	mrccs	15, 3, r6, cr0, cr2, {3}
		    case 'x': scanx (word); break;
    1bc0:	73630063 	cmnvc	r3, #99	; 0x63
    1bc4:	54646e45 	strbtpl	r6, [r4], #-3653	; 0xfffff1bb
    1bc8:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1bcc:	61746172 	cmnvs	r4, r2, ror r1
    1bd0:	5f656c62 	svcpl	0x00656c62
    1bd4:	6f630074 	svcvs	0x00630074
    1bd8:	65507272 	ldrbvs	r7, [r0, #-626]	; 0xfffffd8e
    1bdc:	646f6972 	strbtvs	r6, [pc], #-2418	; 1be4 <vscan+0x1a0>
    1be0:	756c7000 	strbvc	r7, [ip, #-0]!
    1be4:	00747267 	rsbseq	r7, r4, r7, ror #4
    1be8:	43434652 	movtmi	r4, #13906	; 0x3652
    1bec:	6e496570 	mcrvs	5, 2, r6, cr9, cr0, {3}
    1bf0:	656c4374 	strbvs	r4, [ip, #-884]!	; 0xfffffc8c
    1bf4:	70007261 	andvc	r7, r0, r1, ror #4
    1bf8:	6367756c 	cmnvs	r7, #108, 10	; 0x1b000000
    1bfc:	61720068 	cmnvs	r2, r8, rrx
    1c00:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    1c04:	69740065 	ldmdbvs	r4!, {r0, r2, r5, r6}^
    1c08:	756f656d 	strbvc	r6, [pc, #-1389]!	; 16a3 <__inserial+0x1b>
    1c0c:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
    1c10:	61726600 	cmnvs	r2, r0, lsl #12
    1c14:	72467463 	subvc	r7, r6, #1660944384	; 0x63000000
    1c18:	70007165 	andvc	r7, r0, r5, ror #2
    1c1c:	63536572 	cmpvs	r3, #478150656	; 0x1c800000
    1c20:	00656c61 	rsbeq	r6, r5, r1, ror #24
    1c24:	4277536e 	rsbsmi	r5, r7, #-1207959551	; 0xb8000001
    1c28:	00737469 	rsbseq	r7, r3, r9, ror #8
    1c2c:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
    1c30:	6c00704f 	stcvs	0, cr7, [r0], {79}	; 0x4f
    1c34:	7669446f 	strbtvc	r4, [r9], -pc, ror #8
			switch (*fmt++) {
    1c38:	72656469 	rsbvc	r6, r5, #1761607680	; 0x69000000
    1c3c:	61747300 	cmnvs	r4, r0, lsl #6
    1c40:	00646974 	rsbeq	r6, r4, r4, ror r9
    1c44:	705f6672 	subsvc	r6, pc, r2, ror r6	; <UNPREDICTABLE>
    1c48:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
    1c4c:	6570635f 	ldrbvs	r6, [r0, #-863]!	; 0xfffffca1
		    	    case 'd': scani (lword); break;
    1c50:	6e65675f 	mcrvs	7, 3, r6, cr5, cr15, {2}
    1c54:	006b7366 	rsbeq	r7, fp, r6, ror #6
    1c58:	6f437872 	svcvs	0x00437872
    1c5c:	6200666e 	andvs	r6, r0, #115343360	; 0x6e00000
    1c60:	73466f4e 	movtvc	r6, #28494	; 0x6f4e
    1c64:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    1c68:	00705572 	rsbseq	r5, r0, r2, ror r5
    1c6c:	7645524f 	strbvc	r5, [r5], -pc, asr #4
    1c70:	6200746e 	andvs	r7, r0, #1845493760	; 0x6e000000
    1c74:	664f7346 	strbvs	r7, [pc], -r6, asr #6
    1c78:	73754266 	cmnvc	r5, #1610612742	; 0x60000006
    1c7c:	72760079 	rsbsvc	r0, r6, #121	; 0x79
    1c80:	00657461 	rsbeq	r7, r5, r1, ror #8
    1c84:	72747874 	rsbsvc	r7, r4, #116, 16	; 0x740000
    1c88:	00736569 	rsbseq	r6, r3, r9, ror #10
    1c8c:	62734d62 	rsbsvs	r4, r3, #6272	; 0x1880
    1c90:	73726946 	cmnvc	r2, #1146880	; 0x118000
    1c94:	78720074 	ldmdavc	r2!, {r2, r4, r5, r6}^
    1c98:	0065645f 	rsbeq	r6, r5, pc, asr r4
    1c9c:	695f7872 	ldmdbvs	pc, {r1, r4, r5, r6, fp, ip, sp, lr}^	; <UNPREDICTABLE>
    1ca0:	655f746e 	ldrbvs	r7, [pc, #-1134]	; 183a <__pi_vfparse+0x76>
    1ca4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    1ca8:	64610065 	strbtvs	r0, [r1], #-101	; 0xffffff9b
		    	    case 'x': scanx (lword); break;
    1cac:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    1cb0:	61003073 	tstvs	r0, r3, ror r0
    1cb4:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1cb8:	00317373 	eorseq	r7, r1, r3, ror r3
    1cbc:	5f636672 	svcpl	0x00636672
    1cc0:	5f444d43 	svcpl	0x00444d43
    1cc4:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1cc8:	4441525f 	strbmi	r5, [r1], #-607	; 0xfffffda1
    1ccc:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 1cd4 <vscan+0x290>
    1cd0:	535f5649 	cmppl	pc, #76546048	; 0x4900000
    1cd4:	50555445 	subspl	r5, r5, r5, asr #8
    1cd8:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    1cdc:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1ce0:	505f444d 	subspl	r4, pc, sp, asr #8
    1ce4:	5f504f52 	svcpl	0x00504f52
    1ce8:	49444152 	stmdbmi	r4, {r1, r4, r6, r8, lr}^
    1cec:	49445f4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1cf0:	45535f56 	ldrbmi	r5, [r3, #-3926]	; 0xfffff0aa
    1cf4:	5f505554 	svcpl	0x00505554
    1cf8:	66720074 			; <UNDEFINED> instruction: 0x66720074
    1cfc:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1d00:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1d04:	525f504f 	subspl	r5, pc, #79	; 0x4f
    1d08:	00745f58 	rsbseq	r5, r4, r8, asr pc
    1d0c:	61746170 	cmnvs	r4, r0, ror r1
    1d10:	00656c62 	rsbeq	r6, r5, r2, ror #24
    1d14:	5378526e 	cmnpl	r8, #-536870906	; 0xe0000006
    1d18:	70706f74 	rsbsvc	r6, r0, r4, ror pc
		    	    case 'd': scani (lword); break;
    1d1c:	6e006465 	cdpvs	4, 0, cr6, cr0, cr5, {3}
    1d20:	73526d75 	cmpvc	r2, #7488	; 0x1d40
    1d24:	64496973 	strbvs	r6, [r9], #-2419	; 0xfffff68d
    1d28:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
    1d2c:	57657461 	strbpl	r7, [r5, -r1, ror #8]!
    1d30:	0064726f 	rsbeq	r7, r4, pc, ror #4
    1d34:	74737872 	ldrbtvc	r7, [r3], #-2162	; 0xfffff78e
		    	    case 'u': scanu (lword); break;
    1d38:	70007461 	andvc	r7, r0, r1, ror #8
    1d3c:	4f676552 	svcmi	0x00676552
    1d40:	72726576 	rsbsvc	r6, r2, #494927872	; 0x1d800000
    1d44:	00656469 	rsbeq	r6, r5, r9, ror #8
    1d48:	6d746172 	ldfvse	f6, [r4, #-456]!	; 0xfffffe38
    1d4c:	00745f72 	rsbseq	r5, r4, r2, ror pc
    1d50:	70704162 	rsbsvc	r4, r0, r2, ror #2
    1d54:	52646e65 	rsbpl	r6, r4, #1616	; 0x650
    1d58:	00697373 	rsbeq	r7, r9, r3, ror r3
    1d5c:	5f636672 	svcpl	0x00636672
    1d60:	706f7270 	rsbvc	r7, pc, r0, ror r2	; <UNPREDICTABLE>
    1d64:	754f7852 	strbvc	r7, [pc, #-2130]	; 151a <ser_outf+0x26>
    1d68:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1d6c:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    1d70:	705f6366 	subsvc	r6, pc, r6, ror #6
    1d74:	52706f72 	rsbspl	r6, r0, #456	; 0x1c8
    1d78:	74754f78 	ldrbtvc	r4, [r5], #-3960	; 0xfffff088
    1d7c:	5f747570 	svcpl	0x00747570
		    	    case 'x': scanx (lword); break;
    1d80:	46520074 			; <UNDEFINED> instruction: 0x46520074
    1d84:	6f6c4343 	svcvs	0x006c4343
			if ((c = *buf++) == '\0')
    1d88:	69446b63 	stmdbvs	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1d8c:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
			sap = va_arg (ap, char*);
    1d90:	6f630065 	svcvs	0x00630065
			nc++;
    1d94:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
			break;
    1d98:	746e7953 	strbtvc	r7, [lr], #-2387	; 0xfffff6ad
			while (isspace (*buf)) buf++;
    1d9c:	78740068 	ldmdavc	r4!, {r3, r5, r6}^
    1da0:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    1da4:	00726574 	rsbseq	r6, r2, r4, ror r5
						*sap++ = *buf++;
    1da8:	536e656c 	cmnpl	lr, #108, 10	; 0x1b000000
    1dac:	6672007a 			; <UNDEFINED> instruction: 0x6672007a
			while (isspace (*buf)) buf++;
    1db0:	61725f63 	cmnvs	r2, r3, ror #30
    1db4:	4f6f6964 	svcmi	0x006f6964
    1db8:	00735f70 	rsbseq	r5, r3, r0, ror pc
		return 0;
    1dbc:	70655262 	rsbvc	r5, r5, r2, ror #4
    1dc0:	4e746165 	rpwmisz	f6, f4, f5
		    case 'x': scanx (word); break;
    1dc4:	66006b6f 	strvs	r6, [r0], -pc, ror #22
    1dc8:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
		    	    case 'x': scanx (lword); break;
    1dcc:	00704f72 	rsbseq	r4, r0, r2, ror pc
    1dd0:	5f636672 	svcpl	0x00636672
    1dd4:	61746164 	cmnvs	r4, r4, ror #2
    1dd8:	72746e45 	rsbsvc	r6, r4, #1104	; 0x450
    1ddc:	6e654779 	mcrvs	7, 3, r4, cr5, cr9, {3}
    1de0:	6c617265 	sfmvs	f7, 2, [r1], #-404	; 0xfffffe6c
    1de4:	7200735f 	andvc	r7, r0, #2080374785	; 0x7c000001
    1de8:	645f6366 	ldrbvs	r6, [pc], #-870	; 1df0 <NOROM_AONBatMonTemperatureGetDegC+0x1c>
    1dec:	45617461 	strbmi	r7, [r1, #-1121]!	; 0xfffffb9f
    1df0:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1df4:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
    1df8:	5f6c6172 	svcpl	0x006c6172
    1dfc:	66720074 			; <UNDEFINED> instruction: 0x66720074
    1e00:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
    1e04:	725f6863 	subsvc	r6, pc, #6488064	; 0x630000
    1e08:	675f6566 	ldrbvs	r6, [pc, -r6, ror #10]
    1e0c:	73666e65 	cmnvc	r6, #1616	; 0x650
    1e10:	526e006b 	rsbpl	r0, lr, #107	; 0x6b
    1e14:	006b4f78 	rsbeq	r4, fp, r8, ror pc
    1e18:	74655252 	strbtvc	r5, [r5], #-594	; 0xfffffdae
    1e1c:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 1e24 <NOROM_CPUcpsie>
    1e20:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    1e24:	5f5f0031 	svcpl	0x005f0031
    1e28:	6d6d7564 	cfstr64vs	mvdx7, [sp, #-400]!	; 0xfffffe70
    1e2c:	5f003279 	svcpl	0x00003279
    1e30:	6d75645f 	cfldrdvs	mvd6, [r5, #-380]!	; 0xfffffe84
    1e34:	0033796d 	eorseq	r7, r3, sp, ror #18
    1e38:	6574496e 	ldrbvs	r4, [r4, #-2414]!	; 0xfffff692
    1e3c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    1e40:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    1e44:	4c746b70 			; <UNDEFINED> instruction: 0x4c746b70
    1e48:	72006e65 	andvc	r6, r0, #1616	; 0x650
    1e4c:	00656c75 	rsbeq	r6, r5, r5, ror ip
    1e50:	635f4652 	cmpvs	pc, #85983232	; 0x5200000
    1e54:	7250646d 	subsvc	r6, r0, #1828716544	; 0x6d000000
    1e58:	7852706f 	ldmdavc	r2, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    1e5c:	43465200 	movtmi	r5, #25088	; 0x6200
    1e60:	30455043 	subcc	r5, r5, r3, asr #32
    1e64:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
    1e68:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    1e6c:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
    1e70:	6f656d69 	svcvs	0x00656d69
    1e74:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    1e78:	72707672 	rsbsvc	r7, r0, #119537664	; 0x7200000
    1e7c:	6e007363 	cdpvs	3, 0, cr7, cr0, cr3, {3}
    1e80:	61657250 	cmnvs	r5, r0, asr r2
    1e84:	7479426d 	ldrbtvc	r4, [r9], #-621	; 0xfffffd93
    1e88:	62007365 	andvs	r7, r0, #-1811939327	; 0x94000001
    1e8c:	5f666b63 	svcpl	0x00666b63
    1e90:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1e94:	66720072 			; <UNDEFINED> instruction: 0x66720072
    1e98:	4d435f63 	stclmi	15, cr5, [r3, #-396]	; 0xfffffe74
    1e9c:	52505f44 	subspl	r5, r0, #68, 30	; 0x110
    1ea0:	545f504f 	ldrbpl	r5, [pc], #-79	; 1ea8 <NOROM_OSCClockSourceGet+0x20>
    1ea4:	00745f58 	rsbseq	r5, r4, r8, asr pc
    1ea8:	5f636672 	svcpl	0x00636672
    1eac:	5f444d43 	svcpl	0x00444d43
    1eb0:	504f5250 	subpl	r5, pc, r0, asr r2	; <UNPREDICTABLE>
    1eb4:	5f58545f 	svcpl	0x0058545f
    1eb8:	64690073 	strbtvs	r0, [r9], #-115	; 0xffffff8d
    1ebc:	704f656c 	subvc	r6, pc, ip, ror #10
    1ec0:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
    1ec4:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    1ec8:	70007963 	andvc	r7, r0, r3, ror #18
    1ecc:	63746150 	cmnvs	r4, #80, 2
    1ed0:	62615468 	rsbvs	r5, r1, #104, 8	; 0x68000000
    1ed4:	46736300 	ldrbtmi	r6, [r3], -r0, lsl #6
    1ed8:	6e6f4373 	mcrvs	3, 3, r4, cr15, cr3, {3}
    1edc:	6d630066 	stclvs	0, cr0, [r3, #-408]!	; 0xfffffe68
    1ee0:	72735f64 	rsbsvc	r5, r3, #100, 30	; 0x190
    1ee4:	46620074 			; <UNDEFINED> instruction: 0x46620074
    1ee8:	66664f73 	uqsub16vs	r4, r6, r3
    1eec:	6e6f6300 	cdpvs	3, 6, cr6, cr15, cr0, {0}
    1ef0:	4d676966 			; <UNDEFINED> instruction: 0x4d676966
    1ef4:	41637369 	cmnmi	r3, r9, ror #6
    1ef8:	65006364 	strvs	r6, [r0, #-868]	; 0xfffffc9c
    1efc:	6954646e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, sp, lr}^
    1f00:	6200656d 	andvs	r6, r0, #457179136	; 0x1b400000
    1f04:	416b6843 	cmnmi	fp, r3, asr #16
    1f08:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
    1f0c:	65007373 	strvs	r7, [r0, #-883]	; 0xfffffc8d
    1f10:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1f14:	666e6547 	strbtvs	r6, [lr], -r7, asr #10
    1f18:	70436b73 	subvc	r6, r3, r3, ror fp
    1f1c:	74615065 	strbtvc	r5, [r1], #-101	; 0xffffff9b
    1f20:	72006863 	andvc	r6, r0, #6488064	; 0x630000
    1f24:	435f6366 	cmpmi	pc, #-1744830463	; 0x98000001
    1f28:	535f444d 	cmppl	pc, #1291845632	; 0x4d000000
    1f2c:	5f434e59 	svcpl	0x00434e59
    1f30:	52415453 	subpl	r5, r1, #1392508928	; 0x53000000
    1f34:	41525f54 	cmpmi	r2, r4, asr pc
    1f38:	00735f54 	rsbseq	r5, r3, r4, asr pc
    1f3c:	5f636672 	svcpl	0x00636672
    1f40:	5f444d43 	svcpl	0x00444d43
    1f44:	434e5953 	movtmi	r5, #59731	; 0xe953
    1f48:	4154535f 	cmpmi	r4, pc, asr r3
    1f4c:	525f5452 	subspl	r5, pc, #1375731712	; 0x52000000
    1f50:	745f5441 	ldrbvc	r5, [pc], #-1089	; 1f58 <TrimAfterColdResetWakeupFromShutDown+0xa4>
    1f54:	79617000 	stmdbvc	r1!, {ip, sp, lr}^
    1f58:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1f5c:	526d756e 	rsbpl	r7, sp, #461373440	; 0x1b800000
    1f60:	42697373 	rsbmi	r7, r9, #-872415231	; 0xcc000001
    1f64:	00797375 	rsbseq	r7, r9, r5, ror r3
    1f68:	61747374 	cmnvs	r4, r4, ror r3
    1f6c:	55620074 	strbpl	r0, [r2, #-116]!	; 0xffffff8c
    1f70:	72436573 	subvc	r6, r3, #482344960	; 0x1cc00000
    1f74:	6e650063 	cdpvs	0, 6, cr0, cr5, cr3, {3}
    1f78:	47726574 			; <UNDEFINED> instruction: 0x47726574
    1f7c:	73666e65 	cmnvc	r6, #1616	; 0x650
    1f80:	7379536b 	cmnvc	r9, #-1409286143	; 0xac000001
    1f84:	63746150 	cmnvs	r4, #80, 2
    1f88:	65640068 	strbvs	r0, [r4, #-104]!	; 0xffffff98
    1f8c:	74616976 	strbtvc	r6, [r1], #-2422	; 0xfffff68a
    1f90:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1f94:	6f437363 	svcvs	0x00437363
    1f98:	6400666e 	strvs	r6, [r0], #-1646	; 0xfffff992
    1f9c:	51617461 	cmnpl	r1, r1, ror #8
    1fa0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
    1fa4:	6e00745f 	cfmvsrvs	mvf0, r7
    1fa8:	70696b53 	rsbvc	r6, r9, r3, asr fp
    1fac:	6e456200 	cdpvs	2, 4, cr6, cr5, cr0, {0}
    1fb0:	73735261 	cmnvc	r3, #268435462	; 0x10000006
    1fb4:	68700069 	ldmdavs	r0!, {r0, r3, r5, r6}^
    1fb8:	64697379 	strbtvs	r7, [r9], #-889	; 0xfffffc87
    1fbc:	5f465200 	svcpl	0x00465200
    1fc0:	50646d63 	rsbpl	r6, r4, r3, ror #26
    1fc4:	54706f72 	ldrbtpl	r6, [r0], #-3954	; 0xfffff08e
    1fc8:	65720078 	ldrbvs	r0, [r2, #-120]!	; 0xffffff88
    1fcc:	65724666 	ldrbvs	r4, [r2, #-1638]!	; 0xfffff99a
    1fd0:	46520071 			; <UNDEFINED> instruction: 0x46520071
    1fd4:	6f6c4343 	svcvs	0x006c4343
    1fd8:	6e456b63 	vmlsvs.f64	d22, d5, d19
    1fdc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1fe0:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1fe4:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
    1fe8:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    1fec:	6f682f00 	svcvs	0x00682f00
    1ff0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1e44 <NOROM_OSCClockSourceSet+0x18>
    1ff4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1ff8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1ffc:	6f746b73 	svcvs	0x00746b73
    2000:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2004:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2008:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    200c:	2f534f43 	svccs	0x00534f43
    2010:	4f636950 	svcmi	0x00636950
    2014:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2018:	2f736269 	svccs	0x00736269
    201c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2020:	5f2f6c61 	svcpl	0x002f6c61
    2024:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    2028:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    202c:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    2030:	61757100 	cmnvs	r5, r0, lsl #2
    2034:	5f00746e 	svcpl	0x0000746e
    2038:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    203c:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    2040:	5f006c61 	svcpl	0x00006c61
    2044:	5f4d4f5f 	svcpl	0x004d4f5f
    2048:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
    204c:	5f5f0045 	svcpl	0x005f0045
    2050:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
    2054:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    2058:	6f682f00 	svcvs	0x00682f00
    205c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1eb0 <NOROM_OSCClockSourceGet+0x28>
    2060:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2064:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2068:	6f746b73 	svcvs	0x00746b73
    206c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2070:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2074:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2078:	2f534f43 	svccs	0x00534f43
    207c:	4f636950 	svcmi	0x00636950
    2080:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2084:	2f736269 	svccs	0x00736269
    2088:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    208c:	5f2f6c61 	svcpl	0x002f6c61
    2090:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    2094:	61697265 	cmnvs	r9, r5, ror #4
    2098:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    209c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1fe8 <NOROM_SetupTrimDevice+0x60>
    20a0:	616d2f65 	cmnvs	sp, r5, ror #30
    20a4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    20a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    20ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
    20b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    20b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    20b8:	4349502f 	movtmi	r5, #36911	; 0x902f
    20bc:	502f534f 	eorpl	r5, pc, pc, asr #6
    20c0:	534f6369 	movtpl	r6, #62313	; 0xf369
    20c4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    20c8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    20cc:	61697265 	cmnvs	r9, r5, ror #4
    20d0:	66762f6c 	ldrbtvs	r2, [r6], -ip, ror #30
    20d4:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    20d8:	67410063 	strbvs	r0, [r1, -r3, rrx]
    20dc:	006e6961 	rsbeq	r6, lr, r1, ror #18
    20e0:	6374756f 	cmnvs	r4, #465567744	; 0x1bc00000
    20e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    20e8:	66765f69 	ldrbtvs	r5, [r6], -r9, ror #30
    20ec:	73726170 	cmnvc	r2, #112, 2
    20f0:	66760065 	ldrbtvs	r0, [r6], -r5, rrx
    20f4:	006d726f 	rsbeq	r7, sp, pc, ror #4
    20f8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
    20fc:	5f645f79 	svcpl	0x00645f79
    2100:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
    2104:	6f682f00 	svcvs	0x00682f00
    2108:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1f5c <TrimAfterColdResetWakeupFromShutDown+0xa8>
    210c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2110:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2114:	6f746b73 	svcvs	0x00746b73
    2118:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    211c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2120:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2124:	2f534f43 	svccs	0x00534f43
    2128:	4f636950 	svcmi	0x00636950
    212c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    2130:	2f736269 	svccs	0x00736269
    2134:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    2138:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
    213c:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    2140:	7600632e 	strvc	r6, [r0], -lr, lsr #6
    2144:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    2148:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
    214c:	645f7972 	ldrbvs	r7, [pc], #-2418	; 2154 <NOROM_SetupGetTrimForAnabypassValue1>
    2150:	6f776c5f 	svcvs	0x00776c5f
    2154:	4e006472 	mcrmi	4, 0, r6, cr0, cr2, {3}
    2158:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2024 <NOROM_SetupTrimDevice+0x9c>
    215c:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
    2160:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
    2164:	65546e6f 	ldrbvs	r6, [r4, #-3695]	; 0xfffff191
    2168:	7265706d 	rsbvc	r7, r5, #109	; 0x6d
    216c:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    2170:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    2174:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    2178:	6c6f7600 	stclvs	6, cr7, [pc], #-0	; 2180 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    217c:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    2180:	706f6c53 	rsbvc	r6, pc, r3, asr ip	; <UNPREDICTABLE>
    2184:	5f5f0065 	svcpl	0x005f0065
    2188:	33746e69 	cmncc	r4, #1680	; 0x690
    218c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    2190:	20554e47 	subscs	r4, r5, r7, asr #28
    2194:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
    2198:	20332e39 	eorscs	r2, r3, r9, lsr lr
    219c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    21a0:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
    21a4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    21a8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    21ac:	5b202965 	blpl	80c748 <__ccfg+0x7ec7a0>
    21b0:	2f4d5241 	svccs	0x004d5241
    21b4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
    21b8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
    21bc:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    21c0:	6172622d 	cmnvs	r2, sp, lsr #4
    21c4:	2068636e 	rsbcs	r6, r8, lr, ror #6
    21c8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    21cc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    21d0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
    21d4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
    21d8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
    21dc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
    21e0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    21e4:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
    21e8:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
    21ec:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
    21f0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    21f4:	20734f2d 	rsbscs	r4, r3, sp, lsr #30
    21f8:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
    21fc:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
    2200:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    2204:	74732d6f 	ldrbtvc	r2, [r3], #-3439	; 0xfffff291
    2208:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
    220c:	696c612d 	stmdbvs	ip!, {r0, r2, r3, r5, r8, sp, lr}^
    2210:	6e697361 	cdpvs	3, 6, cr7, cr9, cr1, {3}
    2214:	662d2067 	strtvs	r2, [sp], -r7, rrx
    2218:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    221c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2220:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    2224:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2228:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    222c:	61746164 	cmnvs	r4, r4, ror #2
    2230:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
    2234:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2238:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
    223c:	006d7361 	rsbeq	r7, sp, r1, ror #6
    2240:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2244:	745f3874 	ldrbvc	r3, [pc], #-2164	; 224c <NOROM_SetupGetTrimForAmpcompCtrl+0x60>
    2248:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    224c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2250:	2f2e2e2f 	svccs	0x002e2e2f
    2254:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    2258:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    225c:	6f612f62 	svcvs	0x00612f62
    2260:	61625f6e 	cmnvs	r2, lr, ror #30
    2264:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    2268:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    226c:	43706d65 	cmnmi	r0, #6464	; 0x1940
    2270:	6572726f 	ldrbvs	r7, [r2, #-623]!	; 0xfffffd91
    2274:	6f697463 	svcvs	0x00697463
    2278:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
    227c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    2280:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2284:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
    2288:	6b6e654a 	blvs	1b9b7b8 <__ccfg+0x1b7b810>
    228c:	5c736e69 	ldclpl	14, cr6, [r3], #-420	; 0xfffffe5c
    2290:	73626f6a 	cmnvc	r2, #424	; 0x1a8
    2294:	4757465c 			; <UNDEFINED> instruction: 0x4757465c
    2298:	70756f72 	rsbsvc	r6, r5, r2, ror pc
    229c:	6972442d 	ldmdbvs	r2!, {r0, r2, r3, r5, sl, lr}^
    22a0:	4c726576 	cfldr64mi	mvdx6, [r2], #-472	; 0xfffffe28
    22a4:	775c6269 	ldrbvc	r6, [ip, -r9, ror #4]
    22a8:	736b726f 	cmnvc	fp, #-268435450	; 0xf0000006
    22ac:	65636170 	strbvs	r6, [r3, #-368]!	; 0xfffffe90
    22b0:	646f6d5c 	strbtvs	r6, [pc], #-3420	; 22b8 <NOROM_SetupGetTrimForXoscHfFastStart+0x4>
    22b4:	73656c75 	cmnvc	r5, #29952	; 0x7500
    22b8:	74756f5c 	ldrbtvc	r6, [r5], #-3932	; 0xfffff0a4
    22bc:	5c747570 	cfldr64pl	mvdx7, [r4], #-448	; 0xfffffe40
    22c0:	33316363 	teqcc	r1, #-1946157055	; 0x8c000001
    22c4:	635f7878 	cmpvs	pc, #120, 16	; 0x780000
    22c8:	325f6168 	subscc	r6, pc, #104, 2
    22cc:	655f305f 	ldrbvs	r3, [pc, #-95]	; 2275 <NOROM_SetupGetTrimForAdcShModeEn+0x11>
    22d0:	645c7478 	ldrbvs	r7, [ip], #-1144	; 0xfffffb88
    22d4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    22d8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    22dc:	6e69625c 	mcrvs	2, 3, r6, cr9, cr12, {2}
    22e0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    22e4:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    22e8:	566e7275 			; <UNDEFINED> instruction: 0x566e7275
    22ec:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    22f0:	33697500 	cmncc	r9, #0, 10
    22f4:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
    22f8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    22fc:	00636553 	rsbeq	r6, r3, r3, asr r5
    2300:	4f524f4e 	svcmi	0x00524f4e
    2304:	4f415f4d 	svcmi	0x00415f4d
    2308:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    230c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2310:	43746e65 	cmnmi	r4, #1616	; 0x650
    2314:	61706d6f 	cmnvs	r0, pc, ror #26
    2318:	61566572 	cmpvs	r6, r2, ror r5
    231c:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
    2320:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    2324:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    2328:	6e6f6365 	cdpvs	3, 6, cr6, cr15, cr5, {3}
    232c:	63655364 	cmnvs	r5, #100, 6	; 0x90000001
    2330:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2334:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 143c <wwait+0x28>
    2338:	36746e69 	ldrbtcc	r6, [r4], -r9, ror #28
    233c:	00745f34 	rsbseq	r5, r4, r4, lsr pc
    2340:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2344:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    2348:	53746e65 	cmnpl	r4, #1616	; 0x650
    234c:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    2350:	4f4e0063 	svcmi	0x004e0063
    2354:	5f4d4f52 	svcpl	0x004d4f52
    2358:	524e4f41 	subpl	r4, lr, #260	; 0x104
    235c:	75434354 	strbvc	r4, [r3, #-852]	; 0xfffffcac
    2360:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2364:	42343674 	eorsmi	r3, r4, #116, 12	; 0x7400000
    2368:	61567469 	cmpvs	r6, r9, ror #8
    236c:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
    2370:	63007465 	movwvs	r7, #1125	; 0x465
    2374:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2378:	7452746e 	ldrbvc	r7, [r2], #-1134	; 0xfffffb92
    237c:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    2380:	646e4163 	strbtvs	r4, [lr], #-355	; 0xfffffe9d
    2384:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    2388:	2e006365 	cdpcs	3, 0, cr6, cr0, cr5, {3}
    238c:	2f2e2e2f 	svccs	0x002e2e2f
    2390:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2394:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2398:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    239c:	2f62696c 	svccs	0x0062696c
    23a0:	5f6e6f61 	svcpl	0x006e6f61
    23a4:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    23a8:	69730063 	ldmdbvs	r3!, {r0, r1, r5, r6}^
    23ac:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
    23b0:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
    23b4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2280 <NOROM_SetupGetTrimForAdcShVbufEn+0x8>
    23b8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    23bc:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    23c0:	47697270 			; <UNDEFINED> instruction: 0x47697270
    23c4:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    23c8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2294 <NOROM_SetupGetTrimForXoscHfCtl+0x8>
    23cc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    23d0:	616c6564 	cmnvs	ip, r4, ror #10
    23d4:	69750079 	ldmdbvs	r5!, {r0, r3, r4, r5, r6}^
    23d8:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    23dc:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    23e0:	6f433233 	svcvs	0x00433233
    23e4:	00746e75 	rsbseq	r6, r4, r5, ror lr
    23e8:	4f524f4e 	svcmi	0x00524f4e
    23ec:	50435f4d 	subpl	r5, r3, sp, asr #30
    23f0:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
    23f4:	4e006469 	cdpmi	4, 0, cr6, cr0, cr9, {3}
    23f8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 22c4 <NOROM_SetupGetTrimForRadcExtCfg>
    23fc:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    2400:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
    2404:	2f2e0065 	svccs	0x002e0065
    2408:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    240c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2410:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2414:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2418:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    241c:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
    2420:	524f4e00 	subpl	r4, pc, #0, 28
    2424:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2428:	72705550 	rsbsvc	r5, r0, #80, 10	; 0x14000000
    242c:	73616d69 	cmnvc	r1, #6720	; 0x1a40
    2430:	4f4e006b 	svcmi	0x004e006b
    2434:	5f4d4f52 	svcpl	0x004d4f52
    2438:	4343534f 	movtmi	r5, #13135	; 0x334f
    243c:	6b636f6c 	blvs	18de1f4 <__ccfg+0x18be24c>
    2440:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2444:	65536563 	ldrbvs	r6, [r3, #-1379]	; 0xfffffa9d
    2448:	50460074 	subpl	r0, r6, r4, ror r0
    244c:	465f5254 			; <UNDEFINED> instruction: 0x465f5254
    2450:	4354454c 	cmpmi	r4, #76, 10	; 0x13000000
    2454:	33524548 	cmpcc	r2, #72, 10	; 0x12000000
    2458:	00545f32 	subseq	r5, r4, r2, lsr pc
    245c:	52545046 	subspl	r5, r4, #70	; 0x46
    2460:	4454535f 	ldrbmi	r5, [r4], #-863	; 0xfffffca1
    2464:	4c415644 	mcrrmi	6, 4, r5, r1, cr4
    2468:	4e00545f 	cfmvsrmi	mvf0, r5
    246c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2338 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x20>
    2470:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2474:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2478:	756f536b 	strbvc	r5, [pc, #-875]!	; 2115 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x6d>
    247c:	47656372 			; <UNDEFINED> instruction: 0x47656372
    2480:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    2484:	4f323369 	svcmi	0x00323369
    2488:	53006373 	movwpl	r6, #883	; 0x373
    248c:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2490:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 22c8 <NOROM_SetupGetTrimForRadcExtCfg+0x4>
    2494:	65524270 	ldrbvs	r4, [r2, #-624]	; 0xfffffd90
    2498:	50460066 	subpl	r0, r6, r6, rrx
    249c:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    24a0:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    24a4:	34444556 	strbcc	r4, [r4], #-1366	; 0xfffffaaa
    24a8:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    24ac:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    24b0:	4f63736f 	svcmi	0x0063736f
    24b4:	56435f6e 	strbpl	r5, [r3], -lr, ror #30
    24b8:	524f4e00 	subpl	r4, pc, #0, 28
    24bc:	4f5f4d4f 	svcmi	0x005f4d4f
    24c0:	46484353 			; <UNDEFINED> instruction: 0x46484353
    24c4:	7474415f 	ldrbtvc	r4, [r4], #-351	; 0xfffffea1
    24c8:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    24cc:	77536f54 			; <UNDEFINED> instruction: 0x77536f54
    24d0:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    24d4:	6f586f54 	svcvs	0x00586f54
    24d8:	48006373 	stmdami	r0, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    24dc:	756f5346 	strbvc	r5, [pc, #-838]!	; 219e <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    24e0:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    24e4:	53656661 	cmnpl	r5, #101711872	; 0x6100000
    24e8:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    24ec:	65740068 	ldrbvs	r0, [r4, #-104]!	; 0xffffff98
    24f0:	6f58706d 	svcvs	0x0058706d
    24f4:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    24f8:	61530066 	cmpvs	r3, r6, rrx
    24fc:	61486566 	cmpvs	r8, r6, ror #10
    2500:	6f566970 	svcvs	0x00566970
    2504:	6e006469 	cdpvs	4, 0, cr6, cr0, cr9, {3}
    2508:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
    250c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2510:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2514:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2518:	61700073 	cmnvs	r0, r3, ror r0
    251c:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2520:	61700031 	cmnvs	r0, r1, lsr r0
    2524:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2528:	61700032 	cmnvs	r0, r2, lsr r0
    252c:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2530:	50460033 	subpl	r0, r6, r3, lsr r0
    2534:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2538:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    253c:	33444556 	movtcc	r4, #17750	; 0x4556
    2540:	7000545f 	andvc	r5, r0, pc, asr r4
    2544:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2548:	5373756f 	cmnpl	r3, #465567744	; 0x1bc00000
    254c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2550:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2554:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    2558:	2e007355 	mcrcs	3, 0, r7, cr0, cr5, {2}
    255c:	2f2e2e2f 	svccs	0x002e2e2f
    2560:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2564:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2568:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    256c:	2f62696c 	svccs	0x0062696c
    2570:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    2574:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    2578:	6f58656d 	svcvs	0x0058656d
    257c:	74536373 	ldrbvc	r6, [r3], #-883	; 0xfffffc8d
    2580:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2584:	0056435f 	subseq	r4, r6, pc, asr r3
    2588:	706d6574 	rsbvc	r6, sp, r4, ror r5
    258c:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    2590:	6f6c0061 	svcvs	0x006c0061
    2594:	72685477 	rsbvc	r5, r8, #1996488704	; 0x77000000
    2598:	6f687365 	svcvs	0x00687365
    259c:	5200646c 	andpl	r6, r0, #108, 8	; 0x6c000000
    25a0:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    25a4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    25a8:	4e006563 	cfsh32mi	mvfx6, mvfx0, #51
    25ac:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2478 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x50>
    25b0:	43534f5f 	cmpmi	r3, #380	; 0x17c
    25b4:	545f4648 	ldrbpl	r4, [pc], #-1608	; 25bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x108>
    25b8:	4f6e7275 	svcmi	0x006e7275
    25bc:	736f586e 	cmnvc	pc, #7208960	; 0x6e0000
    25c0:	50460063 	subpl	r0, r6, r3, rrx
    25c4:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    25c8:	54455345 	strbpl	r5, [r5], #-837	; 0xfffffcbb
    25cc:	5f564544 	svcpl	0x00564544
    25d0:	50460054 	subpl	r0, r6, r4, asr r0
    25d4:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    25d8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    25dc:	32444556 	subcc	r4, r4, #360710144	; 0x15800000
    25e0:	5200545f 	andpl	r5, r0, #1593835520	; 0x5f000000
    25e4:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    25e8:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    25ec:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    25f0:	336e6f69 	cmncc	lr, #420	; 0x1a4
    25f4:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    25f8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    25fc:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
    2600:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2604:	6f4c6465 	svcvs	0x004c6465
    2608:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    260c:	00346e6f 	eorseq	r6, r4, pc, ror #28
    2610:	4f524f4e 	svcmi	0x00524f4e
    2614:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2618:	5f464843 	svcpl	0x00464843
    261c:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2620:	6f546863 	svcvs	0x00546863
    2624:	734f6352 	movtvc	r6, #62290	; 0xf352
    2628:	72755463 	rsbsvc	r5, r5, #1660944384	; 0x63000000
    262c:	66664f6e 	strbtvs	r4, [r6], -lr, ror #30
    2630:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2634:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2638:	414d5f52 	cmpmi	sp, r2, asr pc
    263c:	4c415658 	mcrrmi	6, 5, r5, r1, cr8
    2640:	5300545f 	movwpl	r5, #1119	; 0x45f
    2644:	63656c65 	cmnvs	r5, #25856	; 0x6500
    2648:	43444174 	movtmi	r4, #16756	; 0x4174
    264c:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2650:	706e4942 	rsbvc	r4, lr, r2, asr #18
    2654:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
    2658:	61746c65 	cmnvs	r4, r5, ror #24
    265c:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2660:	78614d00 	stmdavc	r1!, {r8, sl, fp, lr}^
    2664:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2668:	4f4e0065 	svcmi	0x004e0065
    266c:	5f4d4f52 	svcpl	0x004d4f52
    2670:	5f43534f 	svcpl	0x0043534f
    2674:	534f5048 	movtpl	r5, #61512	; 0xf048
    2678:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    267c:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    2680:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2684:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2688:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    268c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2690:	00746547 	rsbseq	r6, r4, r7, asr #10
    2694:	4f524f4e 	svcmi	0x00524f4e
    2698:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    269c:	5f464843 	svcpl	0x00464843
    26a0:	75626544 	strbvc	r6, [r2, #-1348]!	; 0xfffffabc
    26a4:	74654767 	strbtvc	r4, [r5], #-1895	; 0xfffff899
    26a8:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    26ac:	416c6174 	smcmi	50708	; 0xc614
    26b0:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    26b4:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    26b8:	61654d00 	cmnvs	r5, r0, lsl #26
    26bc:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    26c0:	46006575 			; <UNDEFINED> instruction: 0x46006575
    26c4:	5f525450 	svcpl	0x00525450
    26c8:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    26cc:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    26d0:	00545f31 	subseq	r5, r4, r1, lsr pc
    26d4:	33637243 	cmncc	r3, #805306372	; 0x30000004
    26d8:	6c460032 	mcrrvs	0, 3, r0, r6, cr2
    26dc:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    26e0:	32337265 	eorscc	r7, r3, #1342177286	; 0x50000006
    26e4:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    26e8:	70696843 	rsbvc	r6, r9, r3, asr #16
    26ec:	46006449 	strmi	r6, [r0], -r9, asr #8
    26f0:	5f525450 	svcpl	0x00525450
    26f4:	4e41454d 	cdpmi	5, 4, cr4, cr1, cr13, {2}
    26f8:	5f4c4156 	svcpl	0x004c4156
    26fc:	50460054 	subpl	r0, r6, r4, asr r0
    2700:	415f5254 	cmpmi	pc, r4, asr r2	; <UNPREDICTABLE>
    2704:	4f434344 	svcmi	0x00434344
    2708:	4942504d 	stmdbmi	r2, {r0, r2, r3, r6, ip, lr}^
    270c:	00545f4e 	subseq	r5, r4, lr, asr #30
    2710:	52545046 	subspl	r5, r4, #70	; 0x46
    2714:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 25a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xec>
    2718:	45524250 	ldrbmi	r4, [r2, #-592]	; 0xfffffdb0
    271c:	00545f46 	subseq	r5, r4, r6, asr #30
    2720:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2724:	6f437463 	svcvs	0x00437463
    2728:	4941706d 	stmdbmi	r1, {r0, r2, r3, r5, r6, ip, sp, lr}^
    272c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    2730:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2734:	4f565f52 	svcmi	0x00565f52
    2738:	565f4449 	ldrbpl	r4, [pc], -r9, asr #8
    273c:	5f44494f 	svcpl	0x0044494f
    2740:	50460054 	subpl	r0, r6, r4, asr r0
    2744:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    2748:	41504d4f 	cmpmi	r0, pc, asr #26
    274c:	545f4e49 	ldrbpl	r4, [pc], #-3657	; 2754 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x150>
    2750:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2754:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2758:	32586174 	subscc	r6, r8, #116, 2
    275c:	63736f00 	cmnvs	r3, #0, 30
    2760:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    2764:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    2768:	50480073 	subpl	r0, r8, r3, ror r0
    276c:	5f43534f 	svcpl	0x0043534f
    2770:	466c6552 			; <UNDEFINED> instruction: 0x466c6552
    2774:	4f716572 	svcmi	0x00716572
    2778:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    277c:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    2780:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2784:	53656d69 	cmnpl	r5, #6720	; 0x1a40
    2788:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    278c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2790:	6e496e4f 	cdpvs	14, 4, cr6, cr9, cr15, {2}
    2794:	6400734d 	strvs	r7, [r0], #-845	; 0xfffffcb3
    2798:	61746c65 	cmnvs	r4, r5, ror #24
    279c:	706d6554 	rsbvc	r6, sp, r4, asr r5
    27a0:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    27a4:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    27a8:	006e4f63 	rsbeq	r4, lr, r3, ror #30
    27ac:	50746966 	rsbspl	r6, r4, r6, ror #18
    27b0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    27b4:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    27b8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    27bc:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    27c0:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    27c4:	69740073 	ldmdbvs	r4!, {r0, r1, r4, r5, r6}^
    27c8:	6f58656d 	svcvs	0x0058656d
    27cc:	664f6373 			; <UNDEFINED> instruction: 0x664f6373
    27d0:	56435f66 	strbpl	r5, [r3], -r6, ror #30
    27d4:	43534f00 	cmpmi	r3, #0, 30
    27d8:	6f536648 	svcvs	0x00536648
    27dc:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    27e0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    27e4:	6d610079 	stclvs	0, cr0, [r1, #-484]!	; 0xfffffe1c
    27e8:	6d6f4370 	stclvs	3, cr4, [pc, #-448]!	; 2630 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x2c>
    27ec:	31685470 	smccc	34112	; 0x8540
    27f0:	63734f00 	cmnvs	r3, #0, 30
    27f4:	6c476648 	mcrrvs	6, 4, r6, r7, cr8
    27f8:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    27fc:	00745f73 	rsbseq	r5, r4, r3, ror pc
    2800:	44524148 	ldrbmi	r4, [r2], #-328	; 0xfffffeb8
    2804:	4950415f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, lr}^
    2808:	7400545f 	strvc	r5, [r0], #-1119	; 0xfffffba1
    280c:	55656d69 	strbpl	r6, [r5, #-3433]!	; 0xfffff297
    2810:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    2814:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2818:	6e497075 	mcrvs	0, 2, r7, cr9, cr5, {3}
    281c:	7500734d 	strvc	r7, [r0, #-845]	; 0xfffffcb3
    2820:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    2824:	6c436372 	mcrrvs	3, 7, r6, r3, cr2
    2828:	534f006b 	movtpl	r0, #61547	; 0xf06b
    282c:	53664843 	cmnpl	r6, #4390912	; 0x430000
    2830:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2834:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    2838:	00686374 	rsbeq	r6, r8, r4, ror r3
    283c:	52545046 	subspl	r5, r4, #70	; 0x46
    2840:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    2844:	545f3233 	ldrbpl	r3, [pc], #-563	; 284c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x28>
    2848:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    284c:	67654470 			; <UNDEFINED> instruction: 0x67654470
    2850:	50460043 	subpl	r0, r6, r3, asr #32
    2854:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 270c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x108>
    2858:	41564e49 	cmpmi	r6, r9, asr #28
    285c:	00545f4c 	subseq	r5, r4, ip, asr #30
    2860:	52545046 	subspl	r5, r4, #70	; 0x46
    2864:	5346485f 	movtpl	r4, #26719	; 0x685f
    2868:	4352554f 	cmpmi	r2, #331350016	; 0x13c00000
    286c:	46415345 	strbmi	r5, [r1], -r5, asr #6
    2870:	49575345 	ldmdbmi	r7, {r0, r2, r6, r8, r9, ip, lr}^
    2874:	5f484354 	svcpl	0x00484354
    2878:	694d0054 	stmdbvs	sp, {r2, r4, r6}^
    287c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2880:	70006575 	andvc	r6, r0, r5, ror r5
    2884:	4c766572 	cfldr64mi	mvdx6, [r6], #-456	; 0xfffffe38
    2888:	696d6d69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    288c:	49353274 	ldmdbmi	r5!, {r2, r4, r5, r6, r9, ip, sp}
    2890:	0073556e 	rsbseq	r5, r3, lr, ror #10
    2894:	4f524f4e 	svcmi	0x00524f4e
    2898:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    289c:	50485f43 	subpl	r5, r8, r3, asr #30
    28a0:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
    28a4:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
    28a8:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    28ac:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    28b0:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    28b4:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    28b8:	6f547465 	svcvs	0x00547465
    28bc:	6f434652 	svcvs	0x00434652
    28c0:	6f466572 	svcvs	0x00466572
    28c4:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    28c8:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    28cc:	00747265 	rsbseq	r7, r4, r5, ror #4
    28d0:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    28d4:	6f437463 	svcvs	0x00437463
    28d8:	5241706d 	subpl	r7, r1, #109	; 0x6d
    28dc:	75006665 	strvc	r6, [r0, #-1637]	; 0xfffff99b
    28e0:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    28e4:	6b636f6c 	blvs	18de69c <__ccfg+0x18be6f4>
    28e8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    28ec:	52006563 	andpl	r6, r0, #415236096	; 0x18c00000
    28f0:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    28f4:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    28f8:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    28fc:	316e6f69 	cmncc	lr, r9, ror #30
    2900:	73655200 	cmnvc	r5, #0, 4
    2904:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2908:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    290c:	6f697461 	svcvs	0x00697461
    2910:	5f00326e 	svcpl	0x0000326e
    2914:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    2918:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2920 <NOROM_ChipInfo_GetHwRevision+0x38>
    291c:	73655200 	cmnvc	r5, #0, 4
    2920:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2924:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2928:	6f697461 	svcvs	0x00697461
    292c:	5300356e 	movwpl	r3, #1390	; 0x56e
    2930:	646e6174 	strbtvs	r6, [lr], #-372	; 0xfffffe8c
    2934:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2938:	6f697461 	svcvs	0x00697461
    293c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2940:	72006575 	andvc	r6, r0, #490733568	; 0x1d400000
    2944:	726f4366 	rsbvc	r4, pc, #-1744830463	; 0x98000001
    2948:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    294c:	66664f71 	uqsub16vs	r4, r6, r1
    2950:	00746573 	rsbseq	r6, r4, r3, ror r5
    2954:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    2958:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    295c:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2798 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x194>
    2960:	4f4e0064 	svcmi	0x004e0064
    2964:	5f4d4f52 	svcpl	0x004d4f52
    2968:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    296c:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
    2970:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
    2974:	78457465 	stmdavc	r5, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2978:	74636570 	strbtvc	r6, [r3], #-1392	; 0xfffffa90
    297c:	76416465 	strbvc	r6, [r1], -r5, ror #8
    2980:	67617265 	strbvs	r7, [r1, -r5, ror #4]!
    2984:	79724365 	ldmdbvc	r2!, {r0, r2, r5, r6, r8, r9, lr}^
    2988:	6c617473 	cfstrdvs	mvd7, [r1], #-460	; 0xfffffe34
    298c:	6c706d41 	ldclvs	13, cr6, [r0], #-260	; 0xfffffefc
    2990:	64757469 	ldrbtvs	r7, [r5], #-1129	; 0xfffffb97
    2994:	736f0065 	cmnvc	pc, #101	; 0x65
    2998:	67664363 	strbvs	r4, [r6, -r3, ror #6]!
    299c:	43676552 	cmnmi	r7, #343932928	; 0x14800000
    29a0:	0079706f 	rsbseq	r7, r9, pc, rrx
    29a4:	52545046 	subspl	r5, r4, #70	; 0x46
    29a8:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    29ac:	49534c46 	ldmdbmi	r3, {r1, r2, r6, sl, fp, lr}^
    29b0:	545f455a 	ldrbpl	r4, [pc], #-1370	; 29b8 <NOROM_DDI32RegWrite+0x24>
    29b4:	524f4e00 	subpl	r4, pc, #0, 28
    29b8:	4f5f4d4f 	svcmi	0x005f4d4f
    29bc:	46484353 			; <UNDEFINED> instruction: 0x46484353
    29c0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    29c4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    29c8:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    29cc:	00656d69 	rsbeq	r6, r5, r9, ror #26
    29d0:	73616c46 	cmnvc	r1, #17920	; 0x4600
    29d4:	74654768 	strbtvc	r4, [r5], #-1896	; 0xfffff898
    29d8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    29dc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    29e0:	4f435f52 	svcmi	0x00435f52
    29e4:	5241504d 	subpl	r5, r1, #77	; 0x4d
    29e8:	545f4645 	ldrbpl	r4, [pc], #-1605	; 29f0 <NOROM_DDI32RegWrite+0x5c>
    29ec:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    29f0:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
    29f4:	49484354 	stmdbmi	r8, {r2, r4, r6, r8, r9, lr}^
    29f8:	5f444950 	svcpl	0x00444950
    29fc:	50460054 	subpl	r0, r6, r4, asr r0
    2a00:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2a04:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    2a08:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
    2a0c:	7000545f 	andvc	r5, r0, pc, asr r4
    2a10:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2a14:	6d003050 	stcvs	0, cr3, [r0, #-320]	; 0xfffffec0
    2a18:	65723170 	ldrbvs	r3, [r2, #-368]!	; 0xfffffe90
    2a1c:	72540076 	subsvc	r0, r4, #118	; 0x76
    2a20:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    2a24:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2a28:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2a2c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2a30:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2a34:	72467075 	subvc	r7, r6, #117	; 0x75
    2a38:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a3c:	6f447475 	svcvs	0x00447475
    2a40:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    2a44:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2910 <NOROM_ChipInfo_GetHwRevision+0x28>
    2a48:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2a4c:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2a50:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2a54:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2a58:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2a5c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2a60:	72467075 	subvc	r7, r6, #117	; 0x75
    2a64:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a68:	6f447475 	svcvs	0x00447475
    2a6c:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2a70:	4e003167 	adfmisz	f3, f0, f7
    2a74:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2940 <NOROM_ChipInfo_GetHwRevision+0x58>
    2a78:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2a7c:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2a80:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2a84:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2a88:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2a8c:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2a90:	72467075 	subvc	r7, r6, #117	; 0x75
    2a94:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a98:	6f447475 	svcvs	0x00447475
    2a9c:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2aa0:	4e003267 	cdpmi	2, 0, cr3, cr0, cr7, {3}
    2aa4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2970 <AuxAdiDdiSafeWrite.constprop.1+0x4>
    2aa8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2aac:	66417075 			; <UNDEFINED> instruction: 0x66417075
    2ab0:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    2ab4:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    2ab8:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2abc:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2ac0:	72467075 	subvc	r7, r6, #117	; 0x75
    2ac4:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2ac8:	6f447475 	svcvs	0x00447475
    2acc:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    2ad0:	2e003367 	cdpcs	3, 0, cr3, cr0, cr7, {3}
    2ad4:	2f2e2e2f 	svccs	0x002e2e2f
    2ad8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2adc:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2ae0:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2ae4:	2f62696c 	svccs	0x0062696c
    2ae8:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    2aec:	00632e70 	rsbeq	r2, r3, r0, ror lr
    2af0:	4f524f4e 	svcmi	0x00524f4e
    2af4:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2af8:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    2afc:	61437465 	cmpvs	r3, r5, ror #8
    2b00:	4d656863 	stclmi	8, cr6, [r5, #-396]!	; 0xfffffe74
    2b04:	4165646f 	cmnmi	r5, pc, ror #8
    2b08:	726f6363 	rsbvc	r6, pc, #-1946157055	; 0x8c000001
    2b0c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    2b10:	63436f54 	movtvs	r6, #16212	; 0x3f54
    2b14:	65536766 	ldrbvs	r6, [r3, #-1894]	; 0xfffff89a
    2b18:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2b1c:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
    2b20:	63463233 	movtvs	r3, #25139	; 0x6233
    2b24:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
    2b28:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    2b2c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    2b30:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
    2b34:	744a4355 	strbvc	r4, [sl], #-853	; 0xfffffcab
    2b38:	6f506761 	svcvs	0x00506761
    2b3c:	4f726577 	svcmi	0x00726577
    2b40:	54006666 	strpl	r6, [r0], #-1638	; 0xfffff99a
    2b44:	416d6972 	smcmi	54930	; 0xd692
    2b48:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    2b4c:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    2b50:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2b54:	4f4e0074 	svcmi	0x004e0074
    2b58:	5f4d4f52 	svcpl	0x004d4f52
    2b5c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2b60:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    2b64:	7665446d 	strbtvc	r4, [r5], -sp, ror #8
    2b68:	00656369 	rsbeq	r6, r5, r9, ror #6
    2b6c:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    2b70:	64755f6d 	ldrbtvs	r5, [r5], #-3949	; 0xfffff093
    2b74:	75006769 	strvc	r6, [r0, #-1897]	; 0xfffff897
    2b78:	41323369 	teqmi	r2, r9, ror #6
    2b7c:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    2b80:	73655273 	cmnvc	r5, #805306375	; 0x30000007
    2b84:	74637465 	strbtvc	r7, [r3], #-1125	; 0xfffffb9b
    2b88:	6363006c 	cmnvs	r3, #108	; 0x6c
    2b8c:	4d5f6766 	ldclmi	7, cr6, [pc, #-408]	; 29fc <NOROM_DDI32RegWrite+0x68>
    2b90:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    2b94:	52666e6f 	rsbpl	r6, r6, #1776	; 0x6f0
    2b98:	54006765 	strpl	r6, [r0], #-1893	; 0xfffff89b
    2b9c:	416d6972 	smcmi	54930	; 0xd692
    2ba0:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    2ba4:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    2ba8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2bac:	6b615774 	blvs	1858984 <__ccfg+0x18389dc>
    2bb0:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    2bb4:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    2bb8:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    2bbc:	576e776f 	strbpl	r7, [lr, -pc, ror #14]!
    2bc0:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    2bc4:	6f724670 	svcvs	0x00724670
    2bc8:	776f506d 	strbvc	r5, [pc, -sp, rrx]!
    2bcc:	6f447265 	svcvs	0x00447265
    2bd0:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
    2bd4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2aa0 <NOROM_DDI32RegWrite+0x10c>
    2bd8:	6968545f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
    2bdc:	646f4373 	strbtvs	r4, [pc], #-883	; 2be4 <port_confs+0x2c>
    2be0:	42734965 	rsbsmi	r4, r3, #1654784	; 0x194000
    2be4:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    2be8:	43726f46 	cmnmi	r2, #280	; 0x118
    2bec:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    2bf0:	52774878 	rsbspl	r4, r7, #120, 16	; 0x780000
    2bf4:	30327665 	eorscc	r7, r2, r5, ror #12
    2bf8:	4c646e41 	stclmi	14, cr6, [r4], #-260	; 0xfffffefc
    2bfc:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
    2c00:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
    2c04:	56664974 			; <UNDEFINED> instruction: 0x56664974
    2c08:	616c6f69 	cmnvs	ip, r9, ror #30
    2c0c:	00646574 	rsbeq	r6, r4, r4, ror r5
    2c10:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    2c14:	6f625f6d 	svcvs	0x00625f6d
    2c18:	63630064 	cmnvs	r3, #100	; 0x64
    2c1c:	78456766 	stmdavc	r5, {r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    2c20:	43664c74 	cmnmi	r6, #116, 24	; 0x7400
    2c24:	63006b6c 	movwvs	r6, #2924	; 0xb6c
    2c28:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2c2c:	6648746e 	strbvs	r7, [r8], -lr, ror #8
    2c30:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2c34:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
    2c38:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    2c3c:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    2c40:	61566d69 	cmpvs	r6, r9, ror #26
    2c44:	4f4e006c 	svcmi	0x004e006c
    2c48:	5f4d4f52 	svcpl	0x004d4f52
    2c4c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2c50:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    2c54:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2c58:	41726f46 	cmnmi	r2, r6, asr #30
    2c5c:	7962616e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    2c60:	73736170 	cmnvc	r3, #112, 2
    2c64:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2c68:	4e003165 	adfmisz	f3, f0, f5
    2c6c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2b38 <NOROM_DDI32RegWrite+0x1a4>
    2c70:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2c74:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    2c78:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2c7c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    2c80:	726c6244 	rsbvc	r6, ip, #68, 4	; 0x40000004
    2c84:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    2c88:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    2c8c:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    2c90:	56746573 			; <UNDEFINED> instruction: 0x56746573
    2c94:	61746c6f 	cmnvs	r4, pc, ror #24
    2c98:	63006567 	movwvs	r6, #1383	; 0x567
    2c9c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    2ca0:	7254746e 	subsvc	r7, r4, #1845493760	; 0x6e000000
    2ca4:	76006d69 	strvc	r6, [r0], -r9, ror #26
    2ca8:	43736d69 	cmnmi	r3, #6720	; 0x1a40
    2cac:	6f4d6c74 	svcvs	0x004d6c74
    2cb0:	00306564 	eorseq	r6, r0, r4, ror #10
    2cb4:	61696269 	cmnvs	r9, r9, ror #4
    2cb8:	66664f73 	uqsub16vs	r4, r6, r3
    2cbc:	00746573 	rsbseq	r6, r4, r3, ror r5
    2cc0:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    2cc4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2cc8:	6f58726f 	svcvs	0x0058726f
    2ccc:	66686373 			; <UNDEFINED> instruction: 0x66686373
    2cd0:	566c7443 	strbtpl	r7, [ip], -r3, asr #8
    2cd4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2cd8:	524f4e00 	subpl	r4, pc, #0, 28
    2cdc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2ce0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2ce4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    2ce8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2cec:	6f58726f 	svcvs	0x0058726f
    2cf0:	66486373 			; <UNDEFINED> instruction: 0x66486373
    2cf4:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
    2cf8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2cfc:	4f4e0074 	svcmi	0x004e0074
    2d00:	5f4d4f52 	svcpl	0x004d4f52
    2d04:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2d08:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    2d0c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2d10:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    2d14:	63734f63 	cmnvs	r3, #396	; 0x18c
    2d18:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
    2d1c:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    2d20:	006d6972 	rsbeq	r6, sp, r2, ror r9
    2d24:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2d28:	6a644161 	bvs	19132b4 <__ccfg+0x18f330c>
    2d2c:	00747375 	rsbseq	r7, r4, r5, ror r3
    2d30:	4f524f4e 	svcmi	0x00524f4e
    2d34:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2d38:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2d3c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2d40:	6f466d69 	svcvs	0x00466d69
    2d44:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    2d48:	43664863 	cmnmi	r6, #6488064	; 0x630000
    2d4c:	67006c74 	smlsdxvs	r0, r4, ip, r6
    2d50:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2d54:	6f466d69 	svcvs	0x00466d69
    2d58:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
    2d5c:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
    2d60:	56676643 	strbtpl	r6, [r7], -r3, asr #12
    2d64:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2d68:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2d6c:	72546174 	subsvc	r6, r4, #116, 2
    2d70:	75006d69 	strvc	r6, [r0, #-3433]	; 0xfffff297
    2d74:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    2d78:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    2d7c:	73614666 	cmnvc	r1, #106954752	; 0x6600000
    2d80:	61745374 	cmnvs	r4, r4, ror r3
    2d84:	61567472 	cmpvs	r6, r2, ror r4
    2d88:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2d8c:	4f524f4e 	svcmi	0x00524f4e
    2d90:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2d94:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2d98:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2d9c:	6f466d69 	svcvs	0x00466d69
    2da0:	706d4172 	rsbvc	r4, sp, r2, ror r1
    2da4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    2da8:	00316854 	eorseq	r6, r1, r4, asr r8
    2dac:	4f524f4e 	svcmi	0x00524f4e
    2db0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2db4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2db8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2dbc:	6f466d69 	svcvs	0x00466d69
    2dc0:	706d4172 	rsbvc	r4, sp, r2, ror r1
    2dc4:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    2dc8:	00326854 	eorseq	r6, r2, r4, asr r8
    2dcc:	4f524f4e 	svcmi	0x00524f4e
    2dd0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    2dd4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    2dd8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2ddc:	6f466d69 	svcvs	0x00466d69
    2de0:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    2de4:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    2de8:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    2dec:	524f4e00 	subpl	r4, pc, #0, 28
    2df0:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 2df8 <__exidx_end+0x1c0>
    2df4:	32334944 	eorscc	r4, r3, #68, 18	; 0x110000
    2df8:	57676552 			; <UNDEFINED> instruction: 0x57676552
    2dfc:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2e00:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2e04:	61443167 	cmpvs	r4, r7, ror #2
    2e08:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
    2e0c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2e10:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    2e14:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    2e18:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    2e1c:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
    2e20:	61566d69 	cmpvs	r6, r9, ror #26
    2e24:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2e28:	67726174 			; <UNDEFINED> instruction: 0x67726174
    2e2c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2e30:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    2e34:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2d00 <__exidx_end+0xc8>
    2e38:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    2e3c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    2e40:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    2e44:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    2e48:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    2e4c:	43747845 	cmnmi	r4, #4521984	; 0x450000
    2e50:	2e006766 	cdpcs	7, 0, cr6, cr0, cr6, {3}
    2e54:	2f2e2e2f 	svccs	0x002e2e2f
    2e58:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2e5c:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2e60:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2e64:	2f62696c 	svccs	0x0062696c
    2e68:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    2e6c:	6f725f70 	svcvs	0x00725f70
    2e70:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    2e74:	53627573 	cmnpl	r2, #482344960	; 0x1cc00000
    2e78:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    2e7c:	4f4e0063 	svcmi	0x004e0063
    2e80:	5f4d4f52 	svcpl	0x004d4f52
    2e84:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2e88:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    2e8c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2e90:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    2e94:	63734f63 	cmnvs	r3, #396	; 0x18c
    2e98:	7452664c 	ldrbvc	r6, [r2], #-1612	; 0xfffff9b4
    2e9c:	43656e75 	cmnmi	r5, #1872	; 0x750
    2ea0:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    2ea4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2ea8:	524f4e00 	subpl	r4, pc, #0, 28
    2eac:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2eb0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2eb4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    2eb8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2ebc:	6f58726f 	svcvs	0x0058726f
    2ec0:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    2ec4:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    2ec8:	6f74616c 	svcvs	0x0074616c
    2ecc:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    2ed0:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    2ed4:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    2ed8:	6f697461 	svcvs	0x00697461
    2edc:	33697500 	cmncc	r9, #0, 10
    2ee0:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    2ee4:	6553006d 	ldrbvs	r0, [r3, #-109]	; 0xffffff93
    2ee8:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    2eec:	456e6769 	strbmi	r6, [lr, #-1897]!	; 0xfffff897
    2ef0:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    2ef4:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
    2ef8:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    2efc:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    2f00:	67006575 	smlsdxvs	r0, r5, r5, r6
    2f04:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2f08:	6f466d69 	svcvs	0x00466d69
    2f0c:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    2f10:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    2f14:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    2f18:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2f1c:	4f4e0065 	svcmi	0x004e0065
    2f20:	5f4d4f52 	svcpl	0x004d4f52
    2f24:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    2f28:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    2f2c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2f30:	41726f46 	cmnmi	r2, r6, asr #30
    2f34:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    2f38:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    2f3c:	69006e45 	stmdbvs	r0, {r0, r2, r6, r9, sl, fp, sp, lr}
    2f40:	69533233 	ldmdbvs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    2f44:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    2f48:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    2f4c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    2f50:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    2f54:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    2f58:	69750031 	ldmdbvs	r5!, {r0, r4, r5}^
    2f5c:	63463233 	movtvs	r3, #25139	; 0x6233
    2f60:	56316766 	ldrtpl	r6, [r1], -r6, ror #14
    2f64:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2f68:	524f4e00 	subpl	r4, pc, #0, 28
    2f6c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2f70:	70757465 	rsbsvc	r7, r5, r5, ror #8
    2f74:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    2f78:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    2f7c:	6f58726f 	svcvs	0x0058726f
    2f80:	66486373 			; <UNDEFINED> instruction: 0x66486373
    2f84:	61696249 	cmnvs	r9, r9, asr #4
    2f88:	65687473 	strbvs	r7, [r8, #-1139]!	; 0xfffffb8d
    2f8c:	67006d72 	smlsdxvs	r0, r2, sp, r6
    2f90:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    2f94:	6f466d69 	svcvs	0x00466d69
    2f98:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    2f9c:	6f4d6853 	svcvs	0x004d6853
    2fa0:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    2fa4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2fa8:	33690065 	cmncc	r9, #101	; 0x65
    2fac:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    2fb0:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    2fb4:	72547065 	subsvc	r7, r4, #101	; 0x65
    2fb8:	66006d69 	strvs	r6, [r0], -r9, ror #26
    2fbc:	31676663 	cmncc	r7, r3, ror #12
    2fc0:	4363734f 	cmnmi	r3, #1006632961	; 0x3c000001
    2fc4:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    2fc8:	726c6264 	rsbvc	r6, ip, #100, 4	; 0x40000006
    2fcc:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    2fd0:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    2fd4:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    2fd8:	56746573 			; <UNDEFINED> instruction: 0x56746573
    2fdc:	61746c6f 	cmnvs	r4, pc, ror #24
    2fe0:	61566567 	cmpvs	r6, r7, ror #10
    2fe4:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2fe8:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    2fec:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    2ff0:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    2ff4:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    2ff8:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    2ffc:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    3000:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    3004:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
    3008:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    300c:	6c61566f 	stclvs	6, cr5, [r1], #-444	; 0xfffffe44
    3010:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    3014:	73616962 	cmnvc	r1, #1605632	; 0x188000
    3018:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    301c:	524f4e00 	subpl	r4, pc, #0, 28
    3020:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    3024:	70757465 	rsbsvc	r7, r5, r5, ror #8
    3028:	41746553 	cmnmi	r4, r3, asr r5
    302c:	74526e6f 	ldrbvc	r6, [r2], #-3695	; 0xfffff191
    3030:	62755363 	rsbsvs	r5, r5, #-1946157055	; 0x8c000001
    3034:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    3038:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
    303c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2f08 <__exidx_end+0x2d0>
    3040:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    3044:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    3048:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    304c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    3050:	63706d41 	cmnvs	r0, #4160	; 0x1040
    3054:	43706d6f 	cmnmi	r0, #7104	; 0x1bc0
    3058:	006c7274 	rsbeq	r7, ip, r4, ror r2
    305c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3060:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    3064:	6f526648 	svcvs	0x00526648
    3068:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    306c:	6f583233 	svcvs	0x00583233
    3070:	66486373 			; <UNDEFINED> instruction: 0x66486373
    3074:	006c6f43 	rsbeq	r6, ip, r3, asr #30
    3078:	4f524f4e 	svcmi	0x00524f4e
    307c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    3080:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    3084:	64567465 	ldrbvs	r7, [r6], #-1125	; 0xfffffb9b
    3088:	654c7264 	strbvs	r7, [ip, #-612]	; 0xfffffd9c
    308c:	006c6576 	rsbeq	r6, ip, r6, ror r5
    3090:	5477656e 	ldrbtpl	r6, [r7], #-1390	; 0xfffffa92
    3094:	526d6972 	rsbpl	r6, sp, #1867776	; 0x1c8000
    3098:	75007761 	strvc	r7, [r0, #-1889]	; 0xfffff89f
    309c:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
    30a0:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    30a4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    30a8:	32336900 	eorscc	r6, r3, #0, 18
    30ac:	74737543 	ldrbtvc	r7, [r3], #-1347	; 0xfffffabd
    30b0:	72656d6f 	rsbvc	r6, r5, #7104	; 0x1bc0
    30b4:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    30b8:	6a644161 	bvs	1913644 <__ccfg+0x18f369c>
    30bc:	00747375 	rsbseq	r7, r4, r5, ror r3
    30c0:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    30c4:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    30c8:	7065656c 	rsbvc	r6, r5, ip, ror #10
    30cc:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    30d0:	64760061 	ldrbtvs	r0, [r6], #-97	; 0xffffff9f
    30d4:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    30d8:	63416d69 	movtvs	r6, #7529	; 0x1d69
    30dc:	00657674 	rsbeq	r7, r5, r4, ror r6
    30e0:	54727563 	ldrbtpl	r7, [r2], #-1379	; 0xfffffa9d
    30e4:	00706d65 	rsbseq	r6, r0, r5, ror #26
    30e8:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    30ec:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    30f0:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    30f4:	6c536576 	cfldr64vs	mvdx6, [r3], {118}	; 0x76
    30f8:	00706565 	rsbseq	r6, r0, r5, ror #10
    30fc:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    3100:	526d6152 	rsbpl	r6, sp, #-2147483628	; 0x80000014
    3104:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    3108:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    310c:	616f6c00 	cmnvs	pc, r0, lsl #24
    3110:	4f4e0064 	svcmi	0x004e0064
    3114:	5f4d4f52 	svcpl	0x004d4f52
    3118:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    311c:	416c7274 	smcmi	50980	; 0xc724
    3120:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
    3124:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    3128:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    312c:	74664165 	strbtvc	r4, [r6], #-357	; 0xfffffe9b
    3130:	6f507265 	svcvs	0x00507265
    3134:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    3138:	006e776f 	rsbeq	r7, lr, pc, ror #14
    313c:	4f524f4e 	svcmi	0x00524f4e
    3140:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3144:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3148:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
    314c:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    3150:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    3154:	6f666542 	svcvs	0x00666542
    3158:	6f506572 	svcvs	0x00506572
    315c:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    3160:	006e776f 	rsbeq	r7, lr, pc, ror #14
    3164:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    3168:	2f2e2e2f 	svccs	0x002e2e2f
    316c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 3174 <__exidx_end+0x53c>
    3170:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3174:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3178:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    317c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    3180:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    3184:	4f524f4e 	svcmi	0x00524f4e
    3188:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    318c:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    3190:	7365526c 	cmnvc	r5, #108, 4	; 0xc0000006
    3194:	6f537465 	svcvs	0x00537465
    3198:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    319c:	00746547 	rsbseq	r6, r4, r7, asr #10
    31a0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    31a4:	616d6f44 	cmnvs	sp, r4, asr #30
    31a8:	00736e69 	rsbseq	r6, r3, r9, ror #28
    31ac:	45726570 	ldrbmi	r6, [r2, #-1392]!	; 0xfffffa90
    31b0:	54647000 	strbtpl	r7, [r4], #-0
    31b4:	00706d65 	rsbseq	r6, r0, r5, ror #26
    31b8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    31bc:	43787541 	cmnmi	r8, #272629760	; 0x10400000
    31c0:	6b636f6c 	blvs	18def78 <__ccfg+0x18befd0>
    31c4:	52500073 	subspl	r0, r0, #115	; 0x73
    31c8:	6f444d43 	svcvs	0x00444d43
    31cc:	6e69616d 	powvsez	f6, f1, #5.0
    31d0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    31d4:	7000656c 	andvc	r6, r0, ip, ror #10
    31d8:	004d7265 	subeq	r7, sp, r5, ror #4
    31dc:	5277656e 	rsbspl	r6, r7, #461373440	; 0x1b800000
    31e0:	61686365 	cmnvs	r8, r5, ror #6
    31e4:	50656772 	rsbpl	r6, r5, r2, ror r7
    31e8:	6f697265 	svcvs	0x00697265
    31ec:	64760064 	ldrbtvs	r0, [r6], #-100	; 0xffffff9c
    31f0:	61437264 	cmpvs	r3, r4, ror #4
    31f4:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    31f8:	64493233 	strbvs	r3, [r9], #-563	; 0xfffffdcd
    31fc:	64700078 	ldrbtvs	r0, [r0], #-120	; 0xffffff88
    3200:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    3204:	6f6c0065 	svcvs	0x006c0065
    3208:	7365676e 	cmnvc	r5, #28835840	; 0x1b80000
    320c:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    3210:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    3214:	72655065 	rsbvc	r5, r5, #101	; 0x65
    3218:	00646f69 	rsbeq	r6, r4, r9, ror #30
    321c:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    3220:	64645661 	strbtvs	r5, [r4], #-1633	; 0xfffff99f
    3224:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    3228:	72547065 	subsvc	r7, r4, #101	; 0x65
    322c:	62006d69 	andvs	r6, r0, #6720	; 0x1a40
    3230:	68547461 	ldmdavs	r4, {r0, r5, r6, sl, ip, sp, lr}^
    3234:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    3238:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    323c:	63736f78 	cmnvs	r3, #120, 30	; 0x1e0
    3240:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    3244:	646f4d72 	strbtvs	r4, [pc], #-3442	; 324c <__exidx_end+0x614>
    3248:	52500065 	subspl	r0, r0, #101	; 0x65
    324c:	6f4c4d43 	svcvs	0x004c4d43
    3250:	65476461 	strbvs	r6, [r7, #-1121]	; 0xfffffb9f
    3254:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
    3258:	65746669 	ldrbvs	r6, [r4, #-1641]!	; 0xfffff997
    325c:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    3260:	63740070 	cmnvs	r4, #112	; 0x70
    3264:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    3268:	5f670061 	svcpl	0x00670061
    326c:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    3270:	646f4d32 	strbtvs	r4, [pc], #-3378	; 3278 <__exidx_end+0x640>
    3274:	43656c75 	cmnmi	r5, #29952	; 0x7500
    3278:	75630047 	strbvc	r0, [r3, #-71]!	; 0xffffffb9
    327c:	61745372 	cmnvs	r4, r2, ror r3
    3280:	61006574 	tstvs	r0, r4, ror r5
    3284:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    3288:	6c746373 	ldclvs	3, cr6, [r4], #-460	; 0xfffffe34
    328c:	63727750 	cmnvs	r2, #80, 14	; 0x1400000
    3290:	70006c74 	andvc	r6, r0, r4, ror ip
    3294:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    3298:	4f4e0065 	svcmi	0x004e0065
    329c:	5f4d4f52 	svcpl	0x004d4f52
    32a0:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    32a4:	506c7274 	rsbpl	r7, ip, r4, ror r2
    32a8:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    32ac:	72657645 	rsbvc	r7, r5, #72351744	; 0x4500000
    32b0:	69687479 	stmdbvs	r8!, {r0, r3, r4, r5, r6, sl, ip, sp, lr}^
    32b4:	7000676e 	andvc	r6, r0, lr, ror #14
    32b8:	6b6f6f4c 	blvs	1bdeff0 <__ccfg+0x1bbf048>
    32bc:	61547075 	cmpvs	r4, r5, ror r0
    32c0:	00656c62 	rsbeq	r6, r5, r2, ror #24
    32c4:	65526470 	ldrbvs	r6, [r2, #-1136]	; 0xfffffb90
    32c8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    32cc:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    32d0:	646f6972 	strbtvs	r6, [pc], #-2418	; 32d8 <__exidx_end+0x6a0>
    32d4:	6e6f6100 	powvse	f6, f7, f0
    32d8:	6d746142 	ldfvse	f6, [r4, #-264]!	; 0xfffffef8
    32dc:	61426e6f 	cmpvs	r2, pc, ror #28
    32e0:	64760074 	ldrbtvs	r0, [r6], #-116	; 0xffffff8c
    32e4:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    32e8:	6c536d69 	mrrcvs	13, 6, r6, r3, cr9
    32ec:	00706565 	rsbseq	r6, r0, r5, ror #10
    32f0:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    32f4:	61755172 	cmnvs	r5, r2, ror r1
    32f8:	6f6c476c 	svcvs	0x006c476c
    32fc:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    3300:	4e00745f 	cfmvsrmi	mvf0, r7
    3304:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 31d0 <__exidx_end+0x598>
    3308:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    330c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    3310:	4443445f 	strbmi	r4, [r3], #-1119	; 0xfffffba1
    3314:	6f565f43 	svcvs	0x00565f43
    3318:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    331c:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
    3320:	69746964 	ldmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
    3324:	6c616e6f 	stclvs	14, cr6, [r1], #-444	; 0xfffffe44
    3328:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    332c:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    3330:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xfffff090
    3334:	61755172 	cmnvs	r5, r2, ror r1
    3338:	6f6c476c 	svcvs	0x006c476c
    333c:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    3340:	4f525000 	svcmi	0x00525000
    3344:	4f434f54 	svcmi	0x00434f54
    3348:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    334c:	6f72505f 	svcvs	0x0072505f
    3350:	65697270 	strbvs	r7, [r9, #-624]!	; 0xfffffd90
    3354:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    3358:	43415000 	movtmi	r5, #4096	; 0x1000
    335c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    3360:	3478345f 	ldrbtcc	r3, [r8], #-1119	; 0xfffffba1
    3364:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3368:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    336c:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3370:	34363243 	ldrtcc	r3, [r6], #-579	; 0xfffffdbd
    3374:	61770030 	cmnvs	r7, r0, lsr r0
    3378:	49726566 	ldmdbmi	r2!, {r1, r2, r5, r6, r8, sl, sp, lr}^
    337c:	41460064 	cmpmi	r6, r4, rrx
    3380:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3384:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    3388:	5f787836 	svcpl	0x00787836
    338c:	007a694c 	rsbseq	r6, sl, ip, asr #18
    3390:	4f524f4e 	svcmi	0x00524f4e
    3394:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3398:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    339c:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    33a0:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    33a4:	61467069 	cmpvs	r6, r9, rrx
    33a8:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    33ac:	524f4e00 	subpl	r4, pc, #0, 28
    33b0:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    33b4:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    33b8:	5f6f666e 	svcpl	0x006f666e
    33bc:	50746547 	rsbspl	r6, r4, r7, asr #10
    33c0:	616b6361 	cmnvs	fp, r1, ror #6
    33c4:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    33c8:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
    33cc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3298 <__exidx_end+0x660>
    33d0:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    33d4:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    33d8:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    33dc:	52774874 	rsbspl	r4, r7, #116, 16	; 0x740000
    33e0:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    33e4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    33e8:	6b636170 	blvs	18db9b0 <__ccfg+0x18bba08>
    33ec:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    33f0:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    33f4:	70795470 	rsbsvc	r5, r9, r0, ror r4
    33f8:	00745f65 	rsbseq	r5, r4, r5, ror #30
    33fc:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    3400:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    3404:	745f6e6f 	ldrbvc	r6, [pc], #-3695	; 340c <__exidx_end+0x7d4>
    3408:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    340c:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3410:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3414:	31333143 	teqcc	r3, r3, asr #2
    3418:	68430030 	stmdavs	r3, {r4, r5}^
    341c:	61467069 	cmpvs	r6, r9, rrx
    3420:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    3424:	6800745f 	stmdavs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    3428:	76655277 			; <UNDEFINED> instruction: 0x76655277
    342c:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3430:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    3434:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3438:	35363243 	ldrcc	r3, [r6, #-579]!	; 0xfffffdbd
    343c:	41500030 	cmpmi	r0, r0, lsr r0
    3440:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    3444:	43575f45 	cmpmi	r7, #276	; 0x114
    3448:	6d005053 	stcvs	0, cr5, [r0, #-332]	; 0xfffffeb4
    344c:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    3450:	00766552 	rsbseq	r6, r6, r2, asr r5
    3454:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    3458:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    345c:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    3460:	32525f78 	subscc	r5, r2, #120, 30	; 0x1e0
    3464:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    3468:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    346c:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    3470:	35333143 	ldrcc	r3, [r3, #-323]!	; 0xfffffebd
    3474:	68430030 	stmdavs	r3, {r4, r5}^
    3478:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    347c:	435f6f66 	cmpmi	pc, #408	; 0x198
    3480:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    3484:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    3488:	43734979 	cmnmi	r3, #1982464	; 0x1e4000
    348c:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    3490:	41460078 	hvcmi	24584	; 0x6008
    3494:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    3498:	6b6e555f 	blvs	1b98a1c <__ccfg+0x1b78a74>
    349c:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    34a0:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    34a4:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    34a8:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    34ac:	32363243 	eorscc	r3, r6, #805306372	; 0x30000004
    34b0:	63660030 	cmnvs	r6, #48	; 0x30
    34b4:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
    34b8:	46007665 	strmi	r7, [r0], -r5, ror #12
    34bc:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    34c0:	43435f59 	movtmi	r5, #16217	; 0x3f59
    34c4:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    34c8:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    34cc:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    34d0:	52574800 	subspl	r4, r7, #0, 16
    34d4:	555f5645 	ldrbpl	r5, [pc, #-1605]	; 2e97 <__exidx_end+0x25f>
    34d8:	6f6e6b6e 	svcvs	0x006e6b6e
    34dc:	66006e77 			; <UNDEFINED> instruction: 0x66006e77
    34e0:	31676663 	cmncc	r7, r3, ror #12
    34e4:	746f7250 	strbtvc	r7, [pc], #-592	; 34ec <__exidx_end+0x8b4>
    34e8:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 3334 <__exidx_end+0x6fc>
    34ec:	6f725000 	svcvs	0x00725000
    34f0:	6f636f74 	svcvs	0x00636f74
    34f4:	7469426c 	strbtvc	r4, [r9], #-620	; 0xfffffd94
    34f8:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    34fc:	745f726f 	ldrbvc	r7, [pc], #-623	; 3504 <__exidx_end+0x8cc>
    3500:	4f525000 	svcmi	0x00525000
    3504:	4f434f54 	svcmi	0x00434f54
    3508:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    350c:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
    3510:	30385f45 	eorscc	r5, r8, r5, asr #30
    3514:	35315f32 	ldrcc	r5, [r1, #-3890]!	; 0xfffff0ce
    3518:	4300345f 	movwmi	r3, #1119	; 0x45f
    351c:	5f504948 	svcpl	0x00504948
    3520:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    3524:	6b6e555f 	blvs	1b98aa8 <__ccfg+0x1b78b00>
    3528:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    352c:	52574800 	subspl	r4, r7, #0, 16
    3530:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    3534:	4600325f 			; <UNDEFINED> instruction: 0x4600325f
    3538:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    353c:	43435f59 	movtmi	r5, #16217	; 0x3f59
    3540:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    3544:	43415000 	movtmi	r5, #4096	; 0x1000
    3548:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    354c:	3778375f 			; <UNDEFINED> instruction: 0x3778375f
    3550:	4f525000 	svcmi	0x00525000
    3554:	4f434f54 	svcmi	0x00434f54
    3558:	6e555f4c 	cdpvs	15, 5, cr5, cr5, cr12, {2}
    355c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    3560:	5748006e 	strbpl	r0, [r8, -lr, rrx]
    3564:	5f564552 	svcpl	0x00564552
    3568:	00305f32 	eorseq	r5, r0, r2, lsr pc
    356c:	4f524f4e 	svcmi	0x00524f4e
    3570:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    3574:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    3578:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    357c:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    3580:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    3584:	48006570 	stmdami	r0, {r4, r5, r6, r8, sl, sp, lr}
    3588:	56455257 			; <UNDEFINED> instruction: 0x56455257
    358c:	315f325f 	cmpcc	pc, pc, asr r2	; <UNPREDICTABLE>
    3590:	4f525000 	svcmi	0x00525000
    3594:	4f434f54 	svcmi	0x00434f54
    3598:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    359c:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    35a0:	4d414600 	stclmi	6, cr4, [r1, #-0]
    35a4:	5f594c49 	svcpl	0x00594c49
    35a8:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    35ac:	415f7878 	cmpmi	pc, r8, ror r8	; <UNPREDICTABLE>
    35b0:	48006167 	stmdami	r0, {r0, r1, r2, r5, r6, r8, sp, lr}
    35b4:	56455257 			; <UNDEFINED> instruction: 0x56455257
    35b8:	335f325f 	cmpcc	pc, #-268435451	; 0xf0000005
    35bc:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    35c0:	70795470 	rsbsvc	r5, r9, r0, ror r4
    35c4:	48430065 	stmdami	r3, {r0, r2, r5, r6}^
    35c8:	545f5049 	ldrbpl	r5, [pc], #-73	; 35d0 <__exidx_end+0x998>
    35cc:	5f455059 	svcpl	0x00455059
    35d0:	54535543 	ldrbpl	r5, [r3], #-1347	; 0xfffffabd
    35d4:	305f4d4f 	subscc	r4, pc, pc, asr #26
    35d8:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    35dc:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    35e0:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    35e4:	4f545355 	svcmi	0x00545355
    35e8:	00315f4d 	eorseq	r5, r1, sp, asr #30
    35ec:	50494843 	subpl	r4, r9, r3, asr #16
    35f0:	5059545f 	subspl	r5, r9, pc, asr r4
    35f4:	43435f45 	movtmi	r5, #16197	; 0x3f45
    35f8:	30333632 	eorscc	r3, r3, r2, lsr r6
    35fc:	52574800 	subspl	r4, r7, #0, 16
    3600:	315f5645 	cmpcc	pc, r5, asr #12
    3604:	5000305f 	andpl	r3, r0, pc, asr r0
    3608:	414b4341 	cmpmi	fp, r1, asr #6
    360c:	555f4547 	ldrbpl	r4, [pc, #-1351]	; 30cd <__exidx_end+0x495>
    3610:	6f6e6b6e 	svcvs	0x006e6b6e
    3614:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    3618:	2f2e2e2f 	svccs	0x002e2e2f
    361c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    3620:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    3624:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3628:	2f62696c 	svccs	0x0062696c
    362c:	70696863 	rsbvc	r6, r9, r3, ror #16
    3630:	6f666e69 	svcvs	0x00666e69
    3634:	6600632e 	strvs	r6, [r0], -lr, lsr #6
    3638:	31676663 	cmncc	r7, r3, ror #12
    363c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    3640:	43006449 	movwmi	r6, #1097	; 0x449
    3644:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    3648:	5f6f666e 	svcpl	0x006f666e
    364c:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    3650:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    3654:	48644965 	stmdami	r4!, {r0, r2, r5, r6, r8, fp, lr}^
    3658:	76655277 			; <UNDEFINED> instruction: 0x76655277
    365c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    3660:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    3664:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3668:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    366c:	6e694d74 	mcrvs	13, 3, r4, cr9, cr4, {3}
    3670:	7748726f 	strbvc	r7, [r8, -pc, ror #4]
    3674:	00766552 	rsbseq	r6, r6, r2, asr r5
    3678:	6f6e696d 	svcvs	0x006e696d
    367c:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    3680:	4e007665 	cfmadd32mi	mvax3, mvfx7, mvfx0, mvfx5
    3684:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 3550 <__exidx_end+0x918>
    3688:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    368c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    3690:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    3694:	70755374 	rsbsvc	r5, r5, r4, ror r3
    3698:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    369c:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
    36a0:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    36a4:	425f6c6f 	subsmi	r6, pc, #28416	; 0x6f00
    36a8:	41500056 	cmpmi	r0, r6, asr r0
    36ac:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    36b0:	41575f45 	cmpmi	r7, r5, asr #30
    36b4:	00524546 	subseq	r4, r2, r6, asr #10
    36b8:	4b434150 	blmi	10d3c00 <__ccfg+0x10b3c58>
    36bc:	5f454741 	svcpl	0x00454741
    36c0:	00357835 	eorseq	r7, r5, r5, lsr r8
    36c4:	6b636150 	blvs	18dbc0c <__ccfg+0x18bbc64>
    36c8:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
    36cc:	5f657079 	svcpl	0x00657079
    36d0:	68430074 	stmdavs	r3, {r2, r4, r5, r6}^
    36d4:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    36d8:	485f6f66 	ldmdami	pc, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    36dc:	76655277 			; <UNDEFINED> instruction: 0x76655277
    36e0:	6f697369 	svcvs	0x00697369
    36e4:	5f73496e 	svcpl	0x0073496e
    36e8:	51455447 	cmppl	r5, r7, asr #8
    36ec:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    36f0:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    36f4:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    36f8:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    36fc:	65735574 	ldrbvs	r5, [r3, #-1396]!	; 0xfffffa8c
    3700:	00644972 	rsbeq	r4, r4, r2, ror r9
    3704:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    3708:	00676552 	rsbeq	r6, r7, r2, asr r5
    370c:	4f524f4e 	svcmi	0x00524f4e
    3710:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3714:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3718:	69667469 	stmdbvs	r6!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    371c:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
    3720:	00646165 	rsbeq	r6, r4, r5, ror #2
    3724:	6464416e 	strbtvs	r4, [r4], #-366	; 0xfffffe92
    3728:	4f4e0072 	svcmi	0x004e0072
    372c:	5f4d4f52 	svcpl	0x004d4f52
    3730:	31494444 	cmpcc	r9, r4, asr #8
    3734:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    3738:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    373c:	65526e00 	ldrbvs	r6, [r2, #-3584]	; 0xfffff200
    3740:	75410074 	strbvc	r0, [r1, #-116]	; 0xffffff8c
    3744:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    3748:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    374c:	57656661 	strbpl	r6, [r5, -r1, ror #12]!
    3750:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3754:	31697500 	cmncc	r9, r0, lsl #10
    3758:	74614436 	strbtvc	r4, [r1], #-1078	; 0xfffffbca
    375c:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    3760:	72573233 	subsvc	r3, r7, #805306371	; 0x30000003
    3764:	61746144 	cmnvs	r4, r4, asr #2
    3768:	33697500 	cmncc	r9, #0, 10
    376c:	74614432 	strbtvc	r4, [r1], #-1074	; 0xfffffbce
    3770:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    3774:	68533233 	ldmdavs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    3778:	00746669 	rsbseq	r6, r4, r9, ror #12
    377c:	4f524f4e 	svcmi	0x00524f4e
    3780:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    3784:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    3788:	69667469 	stmdbvs	r6!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    378c:	57646c65 	strbpl	r6, [r4, -r5, ror #24]!
    3790:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    3794:	61446e00 	cmpvs	r4, r0, lsl #28
    3798:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    379c:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    37a0:	41006c61 	tstmi	r0, r1, ror #24
    37a4:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    37a8:	69644469 	stmdbvs	r4!, {r0, r3, r5, r6, sl, lr}^
    37ac:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    37b0:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    37b4:	524f4e00 	subpl	r4, pc, #0, 28
    37b8:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 37c0 <__exidx_end+0xb88>
    37bc:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    37c0:	57746942 	ldrbpl	r6, [r4, -r2, asr #18]!
    37c4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    37c8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    37cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    37d0:	2f2e2e2f 	svccs	0x002e2e2f
    37d4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    37d8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    37dc:	64642f62 	strbtvs	r2, [r4], #-3938	; 0xfffff09e
    37e0:	00632e69 	rsbeq	r2, r3, r9, ror #28
    37e4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    37e8:	41676552 	cmnmi	r7, r2, asr r5
    37ec:	00726464 	rsbseq	r6, r2, r4, ror #8
    37f0:	71724962 	cmnvc	r2, r2, ror #18
    37f4:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    37f8:	0064656c 	rsbeq	r6, r4, ip, ror #10
    37fc:	7a69536e 	bvc	1a585bc <__ccfg+0x1a38614>
    3800:	Address 0x0000000000003800 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
}
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	0901084d 	stmdbeq	r1, {r0, r2, r3, r6, fp}
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1e011a01 	vmlane.f32	s2, s2, s2
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000000c 	andeq	r0, r0, ip
	...
      1c:	0000000c 	andeq	r0, r0, ip
      20:	0000001c 	andeq	r0, r0, ip, lsl r0
      24:	00000000 	andeq	r0, r0, r0
      28:	000000c8 	andeq	r0, r0, r8, asr #1
      2c:	00000138 	andeq	r0, r0, r8, lsr r1
      30:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
      34:	02018e02 	andeq	r8, r1, #2, 28
      38:	080e0a64 	stmdaeq	lr, {r2, r5, r6, r9, fp}
      3c:	00000b41 	andeq	r0, r0, r1, asr #22
			i = k;
      40:	0000000c 	andeq	r0, r0, ip
				j->Next = k;
      44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      48:	7c020001 	stcvc	0, cr0, [r2], {1}
}
      4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000040 	andeq	r0, r0, r0, asr #32
      58:	00000200 	andeq	r0, r0, r0, lsl #4
      5c:	0000000c 	andeq	r0, r0, ip
      60:	00000018 	andeq	r0, r0, r8, lsl r0
      64:	00000040 	andeq	r0, r0, r0, asr #32
      68:	0000020c 	andeq	r0, r0, ip, lsl #4
      6c:	0000002c 	andeq	r0, r0, ip, lsr #32
      70:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      74:	41000e0a 	tstmi	r0, sl, lsl #28
      78:	0000000b 	andeq	r0, r0, fp
      7c:	00000018 	andeq	r0, r0, r8, lsl r0
      80:	00000040 	andeq	r0, r0, r0, asr #32
      84:	00000238 	andeq	r0, r0, r8, lsr r2
      88:	0000002a 	andeq	r0, r0, sl, lsr #32
      8c:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
	descriptors [fd] = s;
      90:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	000b4204 	andeq	r4, fp, r4, lsl #4
      98:	00000018 	andeq	r0, r0, r8, lsl r0
	if (s == NULL)
      9c:	00000040 	andeq	r0, r0, r0, asr #32
		syserror (EMALLOC, "tcv05");
      a0:	00000264 	andeq	r0, r0, r4, ror #4
      a4:	0000003c 	andeq	r0, r0, ip, lsr r0
      a8:	83100e41 	tsthi	r0, #1040	; 0x410
      ac:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      b0:	00018e02 	andeq	r8, r1, r2, lsl #28
      b4:	00000018 	andeq	r0, r0, r8, lsl r0
      b8:	00000040 	andeq	r0, r0, r0, asr #32
      bc:	00000000 	andeq	r0, r0, r0
      c0:	00000040 	andeq	r0, r0, r0, asr #32
      c4:	83100e41 	tsthi	r0, #1040	; 0x410
      c8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      cc:	00018e02 	andeq	r8, r1, r2, lsl #28
      d0:	00000014 	andeq	r0, r0, r4, lsl r0
      d4:	00000040 	andeq	r0, r0, r0, asr #32
      d8:	00000000 	andeq	r0, r0, r0
      dc:	00000020 	andeq	r0, r0, r0, lsr #32
      e0:	83080e42 	movwhi	r0, #36418	; 0x8e42
      e4:	00018e02 	andeq	r8, r1, r2, lsl #28
      e8:	00000014 	andeq	r0, r0, r4, lsl r0
      ec:	00000040 	andeq	r0, r0, r0, asr #32
      f0:	000002a0 	andeq	r0, r0, r0, lsr #5
			wwait (st, 50);
      f4:	00000054 	andeq	r0, r0, r4, asr r0
			curr += 0x1000;
      f8:	87080e42 	strhi	r0, [r8, -r2, asr #28]
      fc:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (from >= EE_SIZE || upto < from)
     100:	00000014 	andeq	r0, r0, r4, lsl r0
     104:	00000040 	andeq	r0, r0, r0, asr #32
			upto = EE_SIZE - 1;
     108:	000002f4 	strdeq	r0, [r0], -r4
     10c:	00000040 	andeq	r0, r0, r0, asr #32
     110:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     114:	00018e02 	andeq	r8, r1, r2, lsl #28
     118:	00000014 	andeq	r0, r0, r4, lsl r0
     11c:	00000040 	andeq	r0, r0, r0, asr #32
     120:	00000334 	andeq	r0, r0, r4, lsr r3
     124:	00000028 	andeq	r0, r0, r8, lsr #32
        switch (choice)
     128:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
     130:	00000014 	andeq	r0, r0, r4, lsl r0
     134:	00000040 	andeq	r0, r0, r0, asr #32
     138:	0000035c 	andeq	r0, r0, ip, asr r3
     13c:	00000114 	andeq	r0, r0, r4, lsl r1
     140:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     144:	00018e02 	andeq	r8, r1, r2, lsl #28
     148:	0000001c 	andeq	r0, r0, ip, lsl r0
        proceed Menu_Header;
     14c:	00000040 	andeq	r0, r0, r0, asr #32
        ser_outf(Set_Group_ID, "New Group ID: ");
     150:	00000470 	andeq	r0, r0, r0, ror r4
     154:	00000050 	andeq	r0, r0, r0, asr r0
        ser_inf(Get_Group_ID, "%d", &groupId);
     158:	83180e41 	tsthi	r8, #1040	; 0x410
     15c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     160:	87038604 	strhi	r8, [r3, -r4, lsl #12]
        proceed Menu_Header;
     164:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Set_Node_ID, "New node ID (1-25):");
     168:	00000018 	andeq	r0, r0, r8, lsl r0
     16c:	00000040 	andeq	r0, r0, r0, asr #32
        ser_inf(Get_Node_ID, "%d", &nodeId);
     170:	000004c0 	andeq	r0, r0, r0, asr #9
     174:	00000054 	andeq	r0, r0, r4, asr r0
     178:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    if (node < 1 || node > 25) {
     17c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     180:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Set_Node_ID;
     184:	0000000c 	andeq	r0, r0, ip
     188:	00000040 	andeq	r0, r0, r0, asr #32
        proceed Menu_Header;
     18c:	00000514 	andeq	r0, r0, r4, lsl r5
     190:	00000038 	andeq	r0, r0, r8, lsr r0
            proceed Set_Group_ID;
     194:	00000020 	andeq	r0, r0, r0, lsr #32
            proceed Set_Node_ID;
     198:	00000040 	andeq	r0, r0, r0, asr #32
     19c:	0000054c 	andeq	r0, r0, ip, asr #10
            diag("Find neighbours");
     1a0:	00000110 	andeq	r0, r0, r0, lsl r1
            diag("Reset Local Storage");
     1a4:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
            diag("Create Record on Neighbour");
     1a8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
            diag("Delete Record on Neighbour");
     1ac:	87058606 	strhi	r8, [r5, -r6, lsl #12]
            diag("Retrieve Record on Neighbour");
     1b0:	89038804 	stmdbhi	r3, {r2, fp, pc}
            diag("Show Local Records");
     1b4:	00018e02 	andeq	r8, r1, r2, lsl #28
            diag("Reset Local Storage");
     1b8:	0000000c 	andeq	r0, r0, ip
     1bc:	00000040 	andeq	r0, r0, r0, asr #32
     1c0:	00000000 	andeq	r0, r0, r0
     1c4:	0000000c 	andeq	r0, r0, ip
     1c8:	00000018 	andeq	r0, r0, r8, lsl r0
     1cc:	00000040 	andeq	r0, r0, r0, asr #32
     1d0:	0000065c 	andeq	r0, r0, ip, asr r6
     1d4:	000000c0 	andeq	r0, r0, r0, asr #1
     1d8:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     1dc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     1e0:	00000001 	andeq	r0, r0, r1
     1e4:	00000018 	andeq	r0, r0, r8, lsl r0
     1e8:	00000040 	andeq	r0, r0, r0, asr #32
     1ec:	0000071c 	andeq	r0, r0, ip, lsl r7
     1f0:	00000044 	andeq	r0, r0, r4, asr #32
     1f4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     1f8:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1fc:	00018e02 	andeq	r8, r1, r2, lsl #28
static void devinit_uart (int devnum) {
     200:	0000001c 	andeq	r0, r0, ip, lsl r0
	adddevfunc (ioreq_uart_a, devnum);
     204:	00000040 	andeq	r0, r0, r0, asr #32
     208:	00000760 	andeq	r0, r0, r0, ror #14
void udelay (volatile word n) {
     20c:	0000003c 	andeq	r0, r0, ip, lsr r0
     210:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
	while (n) {
     214:	86048505 	strhi	r8, [r4], -r5, lsl #10
     218:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
}
     21c:	00000001 	andeq	r0, r0, r1
	while (n--);
     220:	00000018 	andeq	r0, r0, r8, lsl r0
     224:	00000040 	andeq	r0, r0, r0, asr #32
     228:	0000079c 	muleq	r0, ip, r7
		n--;
     22c:	000000a4 	andeq	r0, r0, r4, lsr #1
     230:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     234:	86038504 	strhi	r8, [r3], -r4, lsl #10
void mdelay (volatile word n) {
     238:	00018e02 	andeq	r8, r1, r2, lsl #28
     23c:	00000030 	andeq	r0, r0, r0, lsr r0
	while (n) {
     240:	00000040 	andeq	r0, r0, r0, asr #32
     244:	00000840 	andeq	r0, r0, r0, asr #16
}
     248:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
		udelay (999);
     24c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     250:	86078508 	strhi	r8, [r7], -r8, lsl #10
		n--;
     254:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     258:	8a038904 	bhi	e2670 <__ccfg+0xc26c8>
     25c:	02018e02 	andeq	r8, r1, #2, 28
     260:	cace0aa2 	bgt	ff382cf0 <_estack+0xdf37dcf0>
void __pi_ondomain (lword d) {
     264:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     268:	000ec4c5 	andeq	ip, lr, r5, asr #9
		if (__pi_systat.effpdm > 1)
     26c:	00000b42 	andeq	r0, r0, r2, asr #22
     270:	0000000c 	andeq	r0, r0, ip
			__pi_systat.effpdm = 1;
     274:	00000040 	andeq	r0, r0, r0, asr #32
	PRCMPowerDomainOn (d);
     278:	00000000 	andeq	r0, r0, r0
     27c:	00000024 	andeq	r0, r0, r4, lsr #32
     280:	0000000c 	andeq	r0, r0, ip
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     284:	00000040 	andeq	r0, r0, r0, asr #32
     288:	00000000 	andeq	r0, r0, r0
     28c:	00000028 	andeq	r0, r0, r8, lsr #32
	__pi_systat.ondmns |= d;
     290:	0000001c 	andeq	r0, r0, ip, lsl r0
     294:	00000040 	andeq	r0, r0, r0, asr #32
}
     298:	000009f8 	strdeq	r0, [r0], -r8
     29c:	00000258 	andeq	r0, r0, r8, asr r2
void __pi_syserror (word ec, const char *m) {
     2a0:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
	diag ("SYSERR: %x, %s", ec, m);
     2a4:	8e028b03 	vmlahi.f64	d8, d2, d3
     2a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     2ac:	00070d42 	andeq	r0, r7, r2, asr #26
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     2b0:	00000014 	andeq	r0, r0, r4, lsl r0
     2b4:	00000040 	andeq	r0, r0, r0, asr #32
     2b8:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
     2bc:	00000030 	andeq	r0, r0, r0, lsr r0
     2c0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     2c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     2c8:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     2cc:	00000040 	andeq	r0, r0, r0, asr #32
     2d0:	00000000 	andeq	r0, r0, r0
     2d4:	0000005c 	andeq	r0, r0, ip, asr r0
     2d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     2dc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     2e0:	00018e02 	andeq	r8, r1, r2, lsl #28
	while (1) {
     2e4:	00000014 	andeq	r0, r0, r4, lsl r0
     2e8:	00000040 	andeq	r0, r0, r0, asr #32
     2ec:	00000c50 	andeq	r0, r0, r0, asr ip
     2f0:	00000060 	andeq	r0, r0, r0, rrx
void tci_run_delay_timer () {
     2f4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	setdel = __pi_mintk - __pi_old;
     2f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     2fc:	0000000c 	andeq	r0, r0, ip
     300:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     304:	7c020001 	stcvc	0, cr0, [r2], {1}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     308:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     30c:	00000018 	andeq	r0, r0, r8, lsl r0
     310:	000002fc 	strdeq	r0, [r0], -ip
     314:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     318:	0000003c 	andeq	r0, r0, ip, lsr r0
	sti_tim;
     31c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
     320:	86038504 	strhi	r8, [r3], -r4, lsl #10
     324:	00018e02 	andeq	r8, r1, r2, lsl #28
     328:	00000018 	andeq	r0, r0, r8, lsl r0
     32c:	000002fc 	strdeq	r0, [r0], -ip
     330:	00000cec 	andeq	r0, r0, ip, ror #25
	cli_aux;
     334:	00000080 	andeq	r0, r0, r0, lsl #1
     338:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     33c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     340:	00000001 	andeq	r0, r0, r1
     344:	0000000c 	andeq	r0, r0, ip
     348:	000002fc 	strdeq	r0, [r0], -ip
	sti_aux;
     34c:	00000d6c 	andeq	r0, r0, ip, ror #26
}
     350:	00000018 	andeq	r0, r0, r8, lsl r0
     354:	00000014 	andeq	r0, r0, r4, lsl r0
     358:	000002fc 	strdeq	r0, [r0], -ip
void AONRTCIntHandler () {
     35c:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     360:	00000024 	andeq	r0, r0, r4, lsr #32
     364:	83080e41 	movwhi	r0, #36417	; 0x8e41
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     368:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [0] == 0)
     36c:	00000014 	andeq	r0, r0, r4, lsl r0
     370:	000002fc 	strdeq	r0, [r0], -ip
		if (*(__pi_utims [0])) {
     374:	00000d84 	andeq	r0, r0, r4, lsl #27
     378:	00000010 	andeq	r0, r0, r0, lsl r0
			(*(__pi_utims [0]))--;
     37c:	83080e42 	movwhi	r0, #36418	; 0x8e42
		if (__pi_utims [1] == 0)
     380:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (*(__pi_utims [1])) {
     384:	00000014 	andeq	r0, r0, r4, lsl r0
			aux_timer_inactive = 0;
     388:	000002fc 	strdeq	r0, [r0], -ip
			(*(__pi_utims [1]))--;
     38c:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [2] == 0)
     390:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (*(__pi_utims [2])) {
     394:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
			(*(__pi_utims [2]))--;
     398:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [3] != 0) {
     39c:	00000014 	andeq	r0, r0, r4, lsl r0
			if (*(__pi_utims [3])) {
     3a0:	000002fc 	strdeq	r0, [r0], -ip
				aux_timer_inactive = 0;
     3a4:	00000000 	andeq	r0, r0, r0
				(*(__pi_utims [3]))--;
     3a8:	0000004c 	andeq	r0, r0, ip, asr #32
	if (__pi_systat.ledsts) {
     3ac:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3b0:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_systat.ledblc++ == 0) {
     3b4:	0000000c 	andeq	r0, r0, ip
     3b8:	000002fc 	strdeq	r0, [r0], -ip
			if (__pi_systat.ledblk) {
     3bc:	00000000 	andeq	r0, r0, r0
     3c0:	00000006 	andeq	r0, r0, r6
     3c4:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     3c8:	000002fc 	strdeq	r0, [r0], -ip
     3cc:	00000d94 	muleq	r0, r4, sp
				if (__pi_systat.ledsts & 0x2)
     3d0:	000000cc 	andeq	r0, r0, ip, asr #1
     3d4:	83180e41 	tsthi	r8, #1040	; 0x410
     3d8:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
				if (__pi_systat.ledsts & 0x4)
     3dc:	87038604 	strhi	r8, [r3, -r4, lsl #12]
				__pi_systat.ledblk = 0;
     3e0:	02018e02 	andeq	r8, r1, #2, 28
     3e4:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
			if (__pi_systat.fstblk)
     3e8:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     3ec:	0b42000e 	bleq	108042c <__ccfg+0x1060484>
				__pi_systat.ledblc = 200;
     3f0:	00000014 	andeq	r0, r0, r4, lsl r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     3f4:	000002fc 	strdeq	r0, [r0], -ip
		cli_tim;
     3f8:	00000e60 	andeq	r0, r0, r0, ror #28
		__pi_new += setdel;
     3fc:	00000014 	andeq	r0, r0, r4, lsl r0
     400:	83080e41 	movwhi	r0, #36417	; 0x8e41
		setdel = 0;
     404:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     408:	00000014 	andeq	r0, r0, r4, lsl r0
		__pi_new += setdel;
     40c:	000002fc 	strdeq	r0, [r0], -ip
		RISE_N_SHINE;
     410:	00000e74 	andeq	r0, r0, r4, ror lr
     414:	00000034 	andeq	r0, r0, r4, lsr r0
		aux_timer_inactive = 1;
     418:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     41c:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x1)
     420:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     424:	000002fc 	strdeq	r0, [r0], -ip
     428:	00000ea8 	andeq	r0, r0, r8, lsr #29
				if (__pi_systat.ledsts & 0x2)
     42c:	00000034 	andeq	r0, r0, r4, lsr r0
     430:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     434:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
				if (__pi_systat.ledsts & 0x8)
     438:	00000001 	andeq	r0, r0, r1
				__pi_systat.ledblk = 1;
     43c:	00000018 	andeq	r0, r0, r8, lsl r0
     440:	000002fc 	strdeq	r0, [r0], -ip
		if (aux_timer_inactive) {
     444:	00000000 	andeq	r0, r0, r0
			cli_aux;
     448:	0000002c 	andeq	r0, r0, ip, lsr #32
     44c:	83100e41 	tsthi	r0, #1040	; 0x410
     450:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     454:	00018e02 	andeq	r8, r1, r2, lsl #28
     458:	00000014 	andeq	r0, r0, r4, lsl r0
     45c:	000002fc 	strdeq	r0, [r0], -ip
     460:	00000edc 	ldrdeq	r0, [r0], -ip
     464:	00000024 	andeq	r0, r0, r4, lsr #32
     468:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     46c:	00018e02 	andeq	r8, r1, r2, lsl #28
word tci_update_delay_ticks (Boolean force) {
     470:	00000018 	andeq	r0, r0, r8, lsl r0
	cli_tim;
     474:	000002fc 	strdeq	r0, [r0], -ip
     478:	00000f00 	andeq	r0, r0, r0, lsl #30
	if (setdel) {
     47c:	00000038 	andeq	r0, r0, r8, lsr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     480:	83100e41 	tsthi	r0, #1040	; 0x410
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     484:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     488:	00018e02 	andeq	r8, r1, r2, lsl #28
     48c:	0000000c 	andeq	r0, r0, ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     490:	000002fc 	strdeq	r0, [r0], -ip
				AON_RTC_O_CH0CMP)) - gettav ());
     494:	00000000 	andeq	r0, r0, r0
	return NO;
     498:	00000014 	andeq	r0, r0, r4, lsl r0
			setdel = 0;
     49c:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     4a0:	000002fc 	strdeq	r0, [r0], -ip
     4a4:	00000000 	andeq	r0, r0, r0
}
     4a8:	00000040 	andeq	r0, r0, r0, asr #32
		sti_tim;
     4ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		return YES;
     4b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b4:	00000014 	andeq	r0, r0, r4, lsl r0
     4b8:	000002fc 	strdeq	r0, [r0], -ip
     4bc:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c0:	00000018 	andeq	r0, r0, r8, lsl r0
	UARTDisable (UART0_BASE);
     4c4:	83080e41 	movwhi	r0, #36417	; 0x8e41
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     4c8:	00018e02 	andeq	r8, r1, r2, lsl #28
	UARTDisable (UART0_BASE);
     4cc:	0000000c 	andeq	r0, r0, ip
	UARTConfigSetExpClk (UART0_BASE,
     4d0:	000002fc 	strdeq	r0, [r0], -ip
     4d4:	00000f38 	andeq	r0, r0, r8, lsr pc
     4d8:	00000024 	andeq	r0, r0, r4, lsr #32
     4dc:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     4e0:	000002fc 	strdeq	r0, [r0], -ip
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     4ec:	0000000c 	andeq	r0, r0, ip
     4f0:	000002fc 	strdeq	r0, [r0], -ip
     4f4:	00000f5c 	andeq	r0, r0, ip, asr pc
	urates [0] = rate;
     4f8:	0000000e 	andeq	r0, r0, lr
}
     4fc:	0000000c 	andeq	r0, r0, ip
     500:	000002fc 	strdeq	r0, [r0], -ip
     504:	00000000 	andeq	r0, r0, r0
     508:	00000010 	andeq	r0, r0, r0, lsl r0
     50c:	0000000c 	andeq	r0, r0, ip
     510:	000002fc 	strdeq	r0, [r0], -ip
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     514:	00000000 	andeq	r0, r0, r0
     518:	0000001c 	andeq	r0, r0, ip, lsl r0
     51c:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     520:	000002fc 	strdeq	r0, [r0], -ip
     524:	00000000 	andeq	r0, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     528:	00000010 	andeq	r0, r0, r0, lsl r0
     52c:	0000000c 	andeq	r0, r0, ip
	__pi_uart_setrate (urates [0], __pi_uart);
     530:	000002fc 	strdeq	r0, [r0], -ip
     534:	00000000 	andeq	r0, r0, r0
     538:	00000006 	andeq	r0, r0, r6
     53c:	0000000c 	andeq	r0, r0, ip
     540:	000002fc 	strdeq	r0, [r0], -ip
     544:	00000000 	andeq	r0, r0, r0
     548:	00000014 	andeq	r0, r0, r4, lsl r0
	switch (operation) {
     54c:	0000000c 	andeq	r0, r0, ip
static int ioreq_uart_a (int operation, char *buf, int len) {
     550:	000002fc 	strdeq	r0, [r0], -ip
     554:	00000000 	andeq	r0, r0, r0
     558:	0000000e 	andeq	r0, r0, lr
     55c:	00000014 	andeq	r0, r0, r4, lsl r0
     560:	000002fc 	strdeq	r0, [r0], -ip
				*buf++ = uart_a_read;
     564:	00000f6c 	andeq	r0, r0, ip, ror #30
     568:	00000024 	andeq	r0, r0, r4, lsr #32
			while (len && uart_a_char_available) {
     56c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     570:	00018e02 	andeq	r8, r1, r2, lsl #28
     574:	00000020 	andeq	r0, r0, r0, lsr #32
			if (len != operation) {
     578:	000002fc 	strdeq	r0, [r0], -ip
}
     57c:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     580:	0000009c 	muleq	r0, ip, r0
			uart_a_disable_int;
     584:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			if (uart_a_char_available) {
     588:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
				*buf++ = uart_a_read;
     58c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			uart_a_disable_int;
     590:	89038804 	stmdbhi	r3, {r2, fp, pc}
     594:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (uart_a_char_available) {
     598:	00000014 	andeq	r0, r0, r4, lsl r0
     59c:	000002fc 	strdeq	r0, [r0], -ip
				uart_a_enable_int;
     5a0:	0000102c 	andeq	r1, r0, ip, lsr #32
     5a4:	00000050 	andeq	r0, r0, r0, asr r0
				goto Redo_rx;
     5a8:	83080e42 	movwhi	r0, #36418	; 0x8e42
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     5ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     5b0:	00000014 	andeq	r0, r0, r4, lsl r0
			return -2;
     5b4:	000002fc 	strdeq	r0, [r0], -ip
     5b8:	0000107c 	andeq	r1, r0, ip, ror r0
				uart_a_write (*buf);
     5bc:	00000048 	andeq	r0, r0, r8, asr #32
     5c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
			while (len && uart_a_room_in_tx) {
     5c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c8:	00000014 	andeq	r0, r0, r4, lsl r0
     5cc:	000002fc 	strdeq	r0, [r0], -ip
			if (len != operation) {
     5d0:	000010c4 	andeq	r1, r0, r4, asr #1
			uart_a_disable_int;
     5d4:	00000050 	andeq	r0, r0, r0, asr r0
     5d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			if (uart_a_room_in_tx) {
     5dc:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e0:	00000020 	andeq	r0, r0, r0, lsr #32
				uart_a_enable_int;
     5e4:	000002fc 	strdeq	r0, [r0], -ip
     5e8:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     5ec:	00000058 	andeq	r0, r0, r8, asr r0
			if (uart_a_room_in_tx) {
     5f0:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
				uart_a_write (*buf);
     5f4:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     5f8:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     5fc:	89038804 	stmdbhi	r3, {r2, fp, pc}
     600:	00018e02 	andeq	r8, r1, r2, lsl #28
			uart_a_enable_int;
     604:	00000018 	andeq	r0, r0, r8, lsl r0
     608:	000002fc 	strdeq	r0, [r0], -ip
     60c:	00001114 	andeq	r1, r0, r4, lsl r1
			return 0;
     610:	000000a8 	andeq	r0, r0, r8, lsr #1
			if (len == UART_CNTRL_SETRATE) {
     614:	83100e44 	tsthi	r0, #68, 28	; 0x440
				if (__pi_uart_setrate (*((word*)buf),
     618:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     61c:	00018e02 	andeq	r8, r1, r2, lsl #28
     620:	00000018 	andeq	r0, r0, r8, lsl r0
				syserror (EREQPAR, "uar");
     624:	000002fc 	strdeq	r0, [r0], -ip
			syserror (ENOOPER, "uai");
     628:	000011bc 			; <UNDEFINED> instruction: 0x000011bc
			if (len == UART_CNTRL_GETRATE) {
     62c:	00000034 	andeq	r0, r0, r4, lsr r0
				return 1;
     630:	83100e41 	tsthi	r0, #1040	; 0x410
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     634:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			syserror (ENOOPER, "uai");
     638:	00018e02 	andeq	r8, r1, r2, lsl #28
     63c:	0000000c 	andeq	r0, r0, ip
     640:	000002fc 	strdeq	r0, [r0], -ip
     644:	000011f0 	strdeq	r1, [r0], -r0
     648:	00000018 	andeq	r0, r0, r8, lsl r0
     64c:	00000014 	andeq	r0, r0, r4, lsl r0
     650:	000002fc 	strdeq	r0, [r0], -ip
     654:	00000000 	andeq	r0, r0, r0
     658:	00000030 	andeq	r0, r0, r0, lsr r0
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     65c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
void UART0IntHandler () {
     660:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     664:	00000014 	andeq	r0, r0, r4, lsl r0
     668:	000002fc 	strdeq	r0, [r0], -ip
     66c:	00000000 	andeq	r0, r0, r0
     670:	00000038 	andeq	r0, r0, r8, lsr r0
     674:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     678:	00018e02 	andeq	r8, r1, r2, lsl #28
     67c:	00000040 	andeq	r0, r0, r0, asr #32
		RISE_N_SHINE;
     680:	000002fc 	strdeq	r0, [r0], -ip
     684:	00001208 	andeq	r1, r0, r8, lsl #4
		i_trigger (devevent (UART_A, READ));
     688:	0000013c 	andeq	r0, r0, ip, lsr r1
     68c:	80100e41 	andshi	r0, r0, r1, asr #28
     690:	82038104 	andhi	r8, r3, #4, 2
     694:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     698:	0b84380e 	bleq	fe10e6d8 <_estack+0xde1096d8>
     69c:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6a0:	07880887 	streq	r0, [r8, r7, lsl #17]
     6a4:	058e0689 	streq	r0, [lr, #1673]	; 0x689
     6a8:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     6ac:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     6b0:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     6b4:	c341100e 	movtgt	r1, #4110	; 0x100e
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     6b8:	0ec0c1c2 	acseqdm	f4, f2
     6bc:	000b4100 	andeq	r4, fp, r0, lsl #2
     6c0:	0000000c 	andeq	r0, r0, ip
		i_trigger (devevent (UART_A, WRITE));
     6c4:	000002fc 	strdeq	r0, [r0], -ip
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	00000024 	andeq	r0, r0, r4, lsr #32
		RISE_N_SHINE;
     6d0:	0000000c 	andeq	r0, r0, ip
     6d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     6d8:	7c020001 	stcvc	0, cr0, [r2], {1}
		i_trigger (devevent (UART_A, WRITE));
     6dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     6e0:	00000014 	andeq	r0, r0, r4, lsl r0
     6e4:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     6e8:	00000000 	andeq	r0, r0, r0
     6ec:	00000016 	andeq	r0, r0, r6, lsl r0
     6f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     6f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     6f8:	0000000c 	andeq	r0, r0, ip
     6fc:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     700:	00000000 	andeq	r0, r0, r0
     704:	0000001a 	andeq	r0, r0, sl, lsl r0
}
     708:	00000018 	andeq	r0, r0, r8, lsl r0
     70c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     710:	00000000 	andeq	r0, r0, r0
     714:	0000000e 	andeq	r0, r0, lr
     718:	83080e41 	movwhi	r0, #36417	; 0x8e41
void __buttons_setirq (int val) {
     71c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     720:	000ec3ce 	andeq	ip, lr, lr, asr #7
     724:	00000018 	andeq	r0, r0, r8, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     728:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     72c:	00000000 	andeq	r0, r0, r0
     730:	0000004c 	andeq	r0, r0, ip, asr #32
		bn = BUTTON_GPIO (__button_list [i]);
     734:	83100e41 	tsthi	r0, #1040	; 0x410
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     738:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     73c:	00018e02 	andeq	r8, r1, r2, lsl #28
     740:	00000020 	andeq	r0, r0, r0, lsr #32
     744:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     748:	00000000 	andeq	r0, r0, r0
     74c:	0000008c 	andeq	r0, r0, ip, lsl #1
}
     750:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     754:	5f018e02 	svcpl	0x00018e02
     758:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     75c:	560b4200 	strpl	r4, [fp], -r0, lsl #4
void __pinlist_setirq (int val) {
     760:	000ec4ce 	andeq	ip, lr, lr, asr #9
	for (i = 0; i < N_PINLIST; i++) {
     764:	00000020 	andeq	r0, r0, r0, lsr #32
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     768:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     76c:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     770:	00000070 	andeq	r0, r0, r0, ror r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     774:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     778:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     77c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     780:	430b4200 	movwmi	r4, #45568	; 0xb200
     784:	000ec4ce 	andeq	ip, lr, lr, asr #9
	for (i = 0; i < N_PINLIST; i++) {
     788:	0000003c 	andeq	r0, r0, ip, lsr r0
}
     78c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     790:	00000000 	andeq	r0, r0, r0
     794:	000000c0 	andeq	r0, r0, r0, asr #1
     798:	82080e41 	andhi	r0, r8, #1040	; 0x410
void GPIOIntHandler () {
     79c:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
if (buttons_int) {
     7a0:	0a84300e 	beq	fe10c7e0 <_estack+0xde1077e0>
     7a4:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
	buttons_disable ();
     7a8:	06880787 	streq	r0, [r8], r7, lsl #15
     7ac:	048a0589 	streq	r0, [sl], #1417	; 0x589
	i_trigger ((aword)&__button_list);
     7b0:	0a6b038e 	beq	1ac15f0 <__ccfg+0x1aa1648>
     7b4:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     7b8:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
     7bc:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     7c0:	c2c34108 	sbcgt	r4, r3, #8, 2
     7c4:	0b41000e 	bleq	1040804 <__ccfg+0x102085c>
     7c8:	0000001c 	andeq	r0, r0, ip, lsl r0
     7cc:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7d0:	00000000 	andeq	r0, r0, r0
     7d4:	0000006c 	andeq	r0, r0, ip, rrx
     7d8:	83180e42 	tsthi	r8, #1056	; 0x420
	RISE_N_SHINE;
     7dc:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     7e0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     7e4:	00018e02 	andeq	r8, r1, r2, lsl #28
if (pin_sensor_int) {
     7e8:	0000000c 	andeq	r0, r0, ip
     7ec:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	i_trigger ((aword)(&__input_pins));
     7f0:	00000000 	andeq	r0, r0, r0
     7f4:	00000024 	andeq	r0, r0, r4, lsr #32
     7f8:	00000018 	andeq	r0, r0, r8, lsl r0
     7fc:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     800:	00000000 	andeq	r0, r0, r0
     804:	00000080 	andeq	r0, r0, r0, lsl #1
     808:	83100e42 	tsthi	r0, #1056	; 0x420
     80c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     810:	00018e02 	andeq	r8, r1, r2, lsl #28
     814:	00000014 	andeq	r0, r0, r4, lsl r0
     818:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	__pinsen_disable_and_clear;
     81c:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
     820:	00000070 	andeq	r0, r0, r0, ror r0
     824:	83080e42 	movwhi	r0, #36418	; 0x8e42
     828:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     82c:	00000018 	andeq	r0, r0, r8, lsl r0
     830:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     834:	00000000 	andeq	r0, r0, r0
     838:	00000078 	andeq	r0, r0, r8, ror r0
     83c:	83100e42 	tsthi	r0, #1056	; 0x420
void system_init () {
     840:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     844:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     848:	00000020 	andeq	r0, r0, r0, lsr #32
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     84c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     850:	00000000 	andeq	r0, r0, r0
     854:	000000bc 	strheq	r0, [r0], -ip
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     858:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     85c:	86048505 	strhi	r8, [r4], -r5, lsl #10
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     860:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     864:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     868:	000b4114 	andeq	r4, fp, r4, lsl r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     86c:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     870:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     874:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     878:	0000003a 	andeq	r0, r0, sl, lsr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     87c:	83100e41 	tsthi	r0, #1040	; 0x410
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     880:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		pin = (port_confs [i] >> 19) & 0x1f;
     884:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     888:	00000018 	andeq	r0, r0, r8, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
     88c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     890:	00000000 	andeq	r0, r0, r0
     894:	00000038 	andeq	r0, r0, r8, lsr r0
     898:	83100e41 	tsthi	r0, #1040	; 0x410
     89c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (port_confs [i] & 0x80)
     8a0:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     8a4:	0000000c 	andeq	r0, r0, ip
     8a8:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (port_confs [i] & 0x40)
     8ac:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8b0:	0000000a 	andeq	r0, r0, sl
     8b4:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8b8:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     8bc:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     8c0:	0000002c 	andeq	r0, r0, ip, lsr #32
	all_leds_blink;
     8c4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     8c8:	4c018e02 	stcmi	14, cr8, [r1], {2}
     8cc:	000ec4ce 	andeq	ip, lr, lr, asr #9
     8d0:	0000001c 	andeq	r0, r0, ip, lsl r0
     8d4:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     8d8:	00000000 	andeq	r0, r0, r0
     8dc:	00000060 	andeq	r0, r0, r0, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     8e0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     8e4:	61018e02 	tstvs	r1, r2, lsl #28
     8e8:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     8ec:	000b4300 	andeq	r4, fp, r0, lsl #6
     8f0:	00000014 	andeq	r0, r0, r4, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     8f4:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     8f8:	00000000 	andeq	r0, r0, r0
     8fc:	00000040 	andeq	r0, r0, r0, asr #32
	IntEnable (INT_AON_RTC_COMB);
     900:	83080e42 	movwhi	r0, #36418	; 0x8e42
     904:	00018e02 	andeq	r8, r1, r2, lsl #28
     908:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_malloc_init ();
     90c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	IntEnable (INT_AON_GPIO_EDGE);
     910:	00000000 	andeq	r0, r0, r0
     914:	0000002c 	andeq	r0, r0, ip, lsr #32
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     918:	83080e42 	movwhi	r0, #36418	; 0x8e42
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     91c:	00018e02 	andeq	r8, r1, r2, lsl #28
     920:	0000001c 	andeq	r0, r0, ip, lsl r0
     924:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     928:	00000000 	andeq	r0, r0, r0
     92c:	0000003c 	andeq	r0, r0, ip, lsr r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     930:	83180e41 	tsthi	r8, #1040	; 0x410
     934:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     938:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	urates [0] = UART_RATE / 100;
     93c:	00018e02 	andeq	r8, r1, r2, lsl #28
     940:	0000000c 	andeq	r0, r0, ip
	reinit_uart ();
     944:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	EXTRA_INITIALIZERS;
     948:	00000000 	andeq	r0, r0, r0
     94c:	00000006 	andeq	r0, r0, r6
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     950:	0000001c 	andeq	r0, r0, ip, lsl r0
     954:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     958:	00000000 	andeq	r0, r0, r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     95c:	00000068 	andeq	r0, r0, r8, rrx
     960:	83180e41 	tsthi	r8, #1040	; 0x410
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     964:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     968:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			devinit [i] . init (devinit [i] . param);
     96c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     970:	00000014 	andeq	r0, r0, r4, lsl r0
     974:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     978:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_UART0_COMB);
     97c:	00000050 	andeq	r0, r0, r0, asr r0
     980:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
}
     984:	00018e02 	andeq	r8, r1, r2, lsl #28
	tci_run_auxiliary_timer ();
     988:	0000002c 	andeq	r0, r0, ip, lsr #32
		diag ("");
     98c:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     990:	00000000 	andeq	r0, r0, r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     994:	0000009c 	muleq	r0, ip, r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     998:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
		diag ("Leftover RAM: %d bytes",
     99c:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9a0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9a4:	8a048905 	bhi	122dc0 <__ccfg+0x102e18>
     9a8:	8e028b03 	vmlahi.f64	d8, d2, d3
     9ac:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     9b0:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     9b4:	00000b42 	andeq	r0, r0, r2, asr #22
     9b8:	00000014 	andeq	r0, r0, r4, lsl r0
     9bc:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	00000040 	andeq	r0, r0, r0, asr #32
     9c8:	83080e42 	movwhi	r0, #36418	; 0x8e42
     9cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     9d0:	00000014 	andeq	r0, r0, r4, lsl r0
     9d4:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	00000034 	andeq	r0, r0, r4, lsr r0
     9e0:	83080e42 	movwhi	r0, #36418	; 0x8e42
     9e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9e8:	00000018 	andeq	r0, r0, r8, lsl r0
     9ec:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9f0:	00000000 	andeq	r0, r0, r0
     9f4:	0000003c 	andeq	r0, r0, ip, lsr r0
__attribute__ ((noreturn)) void __pi_release () {
     9f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     9fc:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a00:	000ec4ce 	andeq	ip, lr, lr, asr #9
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a04:	00000018 	andeq	r0, r0, r8, lsl r0
	check_stack_overflow;
     a08:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a0c:	00000000 	andeq	r0, r0, r0
     a10:	0000003c 	andeq	r0, r0, ip, lsr r0
	update_n_wake (MAX_WORD, NO);
     a14:	83100e42 	tsthi	r0, #1056	; 0x420
     a18:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     a1c:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (__pi_curr) {
     a20:	0000000c 	andeq	r0, r0, ip
     a24:	000006d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     a28:	00001344 	andeq	r1, r0, r4, asr #6
  __ASM volatile ("cpsid i" : : : "memory");
     a2c:	00000002 	andeq	r0, r0, r2
	__SLEEP;
     a30:	0000000c 	andeq	r0, r0, ip
     a34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a38:	7c020001 	stcvc	0, cr0, [r2], {1}
     a3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	system_event_count ++;
     a40:	0000000c 	andeq	r0, r0, ip
     a44:	00000a30 	andeq	r0, r0, r0, lsr sl
	switch (__pi_systat.effpdm) {
     a48:	00001346 	andeq	r1, r0, r6, asr #6
     a4c:	00000002 	andeq	r0, r0, r2
     a50:	0000000c 	andeq	r0, r0, ip
     a54:	00000a30 	andeq	r0, r0, r0, lsr sl
			__WFI ();
     a58:	00001348 	andeq	r1, r0, r8, asr #6
     a5c:	00000002 	andeq	r0, r0, r2
     a60:	0000000c 	andeq	r0, r0, ip
	check_stack_overflow;
     a64:	00000a30 	andeq	r0, r0, r0, lsr sl
     a68:	0000134a 	andeq	r1, r0, sl, asr #6
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     a6c:	00000002 	andeq	r0, r0, r2
     a70:	00000014 	andeq	r0, r0, r4, lsl r0
			(__pi_curr->code) (tstate (__pi_curr));
     a74:	00000a30 	andeq	r0, r0, r0, lsr sl
			goto Redo;
     a78:	0000134c 	andeq	r1, r0, ip, asr #6
	for_all_tasks (__pi_curr) {
     a7c:	00000044 	andeq	r0, r0, r4, asr #32
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a80:	83080e41 	movwhi	r0, #36417	; 0x8e41
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     a84:	00018e02 	andeq	r8, r1, r2, lsl #28
     a88:	0000000c 	andeq	r0, r0, ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     a8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a90:	7c020001 	stcvc	0, cr0, [r2], {1}
     a94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     a98:	0000000c 	andeq	r0, r0, ip
     a9c:	00000a88 	andeq	r0, r0, r8, lsl #21
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	00000002 	andeq	r0, r0, r2
			__WFI ();
     aa8:	00000018 	andeq	r0, r0, r8, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     aac:	00000a88 	andeq	r0, r0, r8, lsl #21
     ab0:	00000000 	andeq	r0, r0, r0
}
     ab4:	00000058 	andeq	r0, r0, r8, asr r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ab8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     abc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
     ac4:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ac8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     acc:	7c020001 	stcvc	0, cr0, [r2], {1}
     ad0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ad4:	0000002c 	andeq	r0, r0, ip, lsr #32
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ad8:	00000ac4 	andeq	r0, r0, r4, asr #21
     adc:	00000000 	andeq	r0, r0, r0
     ae0:	000000cc 	andeq	r0, r0, ip, asr #1
     ae4:	83100e42 	tsthi	r0, #1056	; 0x420
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     ae8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     aec:	02018e02 	andeq	r8, r1, #2, 28
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     af0:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     af4:	000ec3c4 	andeq	ip, lr, r4, asr #7
     af8:	ce420b44 	vmlsgt.f64	d16, d2, d4
     afc:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     b00:	00000000 	andeq	r0, r0, r0
     b04:	00000024 	andeq	r0, r0, r4, lsr #32
			SysCtrlSetRechargeBeforePowerDown
     b08:	00000ac4 	andeq	r0, r0, r4, asr #21
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b0c:	00000000 	andeq	r0, r0, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b10:	00000038 	andeq	r0, r0, r8, lsr r0
     b14:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b18:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     b1c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b20:	4a0b4300 	bmi	2d1728 <__ccfg+0x2b1780>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     b24:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b28:	000b4300 	andeq	r4, fp, r0, lsl #6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b2c:	0000000c 	andeq	r0, r0, ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     b30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b34:	7c020001 	stcvc	0, cr0, [r2], {1}
     b38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b3c:	00000018 	andeq	r0, r0, r8, lsl r0
			while (!(AONWUCPowerStatusGet () &
     b40:	00000b2c 	andeq	r0, r0, ip, lsr #22
			PRCMPowerDomainOn (__pi_systat.ondmns);
     b44:	00001398 	muleq	r0, r8, r3
     b48:	00000034 	andeq	r0, r0, r4, lsr r0
     b4c:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     b50:	86038504 	strhi	r8, [r3], -r4, lsl #10
     b54:	00018e02 	andeq	r8, r1, r2, lsl #28
     b58:	00000018 	andeq	r0, r0, r8, lsl r0
     b5c:	00000b2c 	andeq	r0, r0, ip, lsr #22
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b60:	000013cc 	andeq	r1, r0, ip, asr #7
     b64:	00000030 	andeq	r0, r0, r0, lsr r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b68:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     b6c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			SysCtrlAdjustRechargeAfterPowerDown ();
     b70:	00000001 	andeq	r0, r0, r1
			reinit_uart ();
     b74:	00000014 	andeq	r0, r0, r4, lsl r0
     b78:	00000b2c 	andeq	r0, r0, ip, lsr #22
     b7c:	000013fc 	strdeq	r1, [r0], -ip
}
     b80:	00000018 	andeq	r0, r0, r8, lsl r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     b84:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     b88:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	00000b2c 	andeq	r0, r0, ip, lsr #22
     b94:	00001414 	andeq	r1, r0, r4, lsl r4
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     b98:	00000054 	andeq	r0, r0, r4, asr r0
     b9c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     ba0:	86058506 	strhi	r8, [r5], -r6, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     ba4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     ba8:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     bb0:	00000b2c 	andeq	r0, r0, ip, lsr #22
     bb4:	00001468 	andeq	r1, r0, r8, ror #8
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     bb8:	00000040 	andeq	r0, r0, r0, asr #32
     bbc:	83180e41 	tsthi	r8, #1040	; 0x410
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     bc4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     bc8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bcc:	00000014 	andeq	r0, r0, r4, lsl r0
			PRCMPowerDomainOff (
     bd0:	00000b2c 	andeq	r0, r0, ip, lsr #22
     bd4:	000014a8 	andeq	r1, r0, r8, lsr #9
	__SLEEP;
     bd8:	00000024 	andeq	r0, r0, r4, lsr #32
     bdc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
  __ASM volatile ("cpsie i" : : : "memory");
     be0:	00018e02 	andeq	r8, r1, r2, lsl #28
	goto Redo;
     be4:	00000014 	andeq	r0, r0, r4, lsl r0
     be8:	00000b2c 	andeq	r0, r0, ip, lsr #22
     bec:	000014cc 	andeq	r1, r0, ip, asr #9
     bf0:	00000014 	andeq	r0, r0, r4, lsl r0
     bf4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     bf8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bfc:	0000000c 	andeq	r0, r0, ip
     c00:	00000b2c 	andeq	r0, r0, ip, lsr #22
     c04:	000014e0 	andeq	r1, r0, r0, ror #9
     c08:	00000014 	andeq	r0, r0, r4, lsl r0
     c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c10:	00000b2c 	andeq	r0, r0, ip, lsr #22
     c14:	00000000 	andeq	r0, r0, r0
     c18:	00000064 	andeq	r0, r0, r4, rrx
     c1c:	83180e41 	tsthi	r8, #1040	; 0x410
     c20:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c24:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
     c2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c30:	00000b2c 	andeq	r0, r0, ip, lsr #22
     c34:	00000000 	andeq	r0, r0, r0
     c38:	00000128 	andeq	r0, r0, r8, lsr #2
     c3c:	83180e41 	tsthi	r8, #1040	; 0x410
     c40:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c44:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c48:	00018e02 	andeq	r8, r1, r2, lsl #28
     c4c:	00000024 	andeq	r0, r0, r4, lsr #32
int main (void) {
     c50:	00000b2c 	andeq	r0, r0, ip, lsr #22
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     c54:	00000000 	andeq	r0, r0, r0
     c58:	000000ec 	andeq	r0, r0, ip, ror #1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     c5c:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c60:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
	system_init ();
     c64:	87078608 	strhi	r8, [r7, -r8, lsl #12]
	tcv_init ();
     c68:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     c6c:	8b038a04 	blhi	e3484 <__ccfg+0xc34dc>
     c70:	00018e02 	andeq	r8, r1, r2, lsl #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     c74:	0000000c 	andeq	r0, r0, ip
     c78:	00000b2c 	andeq	r0, r0, ip, lsr #22
     c7c:	00000000 	andeq	r0, r0, r0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     c80:	00000002 	andeq	r0, r0, r2
     c84:	0000000c 	andeq	r0, r0, ip
	delay (16, 0);
     c88:	00000b2c 	andeq	r0, r0, ip, lsr #22
     c8c:	00000000 	andeq	r0, r0, r0
     c90:	00000004 	andeq	r0, r0, r4
	__pi_release ();
     c94:	0000000c 	andeq	r0, r0, ip
     c98:	00000b2c 	andeq	r0, r0, ip, lsr #22
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	00000014 	andeq	r0, r0, r4, lsl r0
     ca4:	00000018 	andeq	r0, r0, r8, lsl r0
     ca8:	00000b2c 	andeq	r0, r0, ip, lsr #22
     cac:	00000000 	andeq	r0, r0, r0
static void killev (__pi_pcb_t *pid) {
     cb0:	0000001a 	andeq	r0, r0, sl, lsl r0
	wfun = (aword)(pid->code);
     cb4:	83080e41 	movwhi	r0, #36417	; 0x8e41
	for_all_tasks (i) {
     cb8:	4a018e02 	bmi	644c8 <__ccfg+0x44520>
		for (j = 0; j < nevents (i); j++) {
     cbc:	000ec3ce 	andeq	ip, lr, lr, asr #7
     cc0:	0000000c 	andeq	r0, r0, ip
     cc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			    || i->Events [j] . Event == wfun
     cc8:	7c020001 	stcvc	0, cr0, [r2], {1}
		for (j = 0; j < nevents (i); j++) {
     ccc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			if (i->Events [j] . Event == (aword)pid
     cd0:	00000030 	andeq	r0, r0, r0, lsr r0
     cd4:	00000cc0 	andeq	r0, r0, r0, asr #25
     cd8:	000014f4 	strdeq	r1, [r0], -r4
				wakeupev (i, j);
     cdc:	00000054 	andeq	r0, r0, r4, asr r0
     ce0:	810c0e41 	tsthi	ip, r1, asr #28
	for_all_tasks (i) {
     ce4:	83028203 	movwhi	r8, #8707	; 0x2203
}
     ce8:	280e4101 	stmdacs	lr, {r0, r8, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cec:	06850784 	streq	r0, [r5], r4, lsl #15
static void qfree (aword *ch) {
     cf0:	048e0586 	streq	r0, [lr], #1414	; 0x586
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     cf4:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
	cc = (aword*)(mpools + MA_NP);
     cf8:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
	m_setnextp (ch, chunk);
     cfc:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
	m_setnextp (cc, ch);
     d00:	000ec1c2 	andeq	ip, lr, r2, asr #3
}
     d04:	0000000c 	andeq	r0, r0, ip
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d0c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			m_setnextp (cc, m_nextp (chunk));
     d14:	00000030 	andeq	r0, r0, r0, lsr r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     d18:	00000d04 	andeq	r0, r0, r4, lsl #26
     d1c:	00001548 	andeq	r1, r0, r8, asr #10
     d20:	00000060 	andeq	r0, r0, r0, rrx
     d24:	810c0e41 	tsthi	ip, r1, asr #28
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d28:	83028203 	movwhi	r8, #8707	; 0x2203
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     d2c:	200e4101 	andcs	r4, lr, r1, lsl #2
     d30:	05850684 	streq	r0, [r5, #1668]	; 0x684
     d34:	0a64048e 	beq	1901f74 <__ccfg+0x18e1fcc>
			m_setnextp (cc, m_nextp (chunk));
     d38:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
			m_size (ch) += m_hdrlen + m_size (chunk);
     d3c:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
     d40:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     d44:	0b41000e 	bleq	1040d84 <__ccfg+0x1020ddc>
     d48:	0000000c 	andeq	r0, r0, ip
     d4c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d50:	7c020001 	stcvc	0, cr0, [r2], {1}
			if (m_size (chunk) >= m_size (ch))
     d54:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d58:	0000000c 	andeq	r0, r0, ip
     d5c:	00000d48 	andeq	r0, r0, r8, asr #26
		chunk = m_nextp (chunk))
     d60:	00000000 	andeq	r0, r0, r0
     d64:	00000020 	andeq	r0, r0, r0, lsr #32
     d68:	00000018 	andeq	r0, r0, r8, lsl r0
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     d6c:	00000d48 	andeq	r0, r0, r8, asr #26
	diag_wait (a);
     d70:	00000000 	andeq	r0, r0, r0
	diag_wchar (c, a);
     d74:	00000190 	muleq	r0, r0, r1
     d78:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
     d7c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     d80:	00018e02 	andeq	r8, r1, r2, lsl #28
	syserror (ESTATE, "state");
     d84:	00000018 	andeq	r0, r0, r8, lsl r0
     d88:	00000d48 	andeq	r0, r0, r8, asr #26
     d8c:	00000000 	andeq	r0, r0, r0
     d90:	00000048 	andeq	r0, r0, r8, asr #32
void update_n_wake (word min, Boolean force) {
     d94:	83100e41 	tsthi	r0, #1040	; 0x410
	if (TCI_UPDATE_DELAY_TICKS (force))
     d98:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     d9c:	00018e02 	andeq	r8, r1, r2, lsl #28
     da0:	00000014 	andeq	r0, r0, r4, lsl r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     da4:	00000d48 	andeq	r0, r0, r8, asr #26
     da8:	00000000 	andeq	r0, r0, r0
     dac:	00000024 	andeq	r0, r0, r4, lsr #32
     db0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     db4:	00018e02 	andeq	r8, r1, r2, lsl #28
     db8:	00000018 	andeq	r0, r0, r8, lsl r0
     dbc:	00000d48 	andeq	r0, r0, r8, asr #26
     dc0:	00000000 	andeq	r0, r0, r0
     dc4:	0000005c 	andeq	r0, r0, ip, asr r0
     dc8:	83100e41 	tsthi	r0, #1040	; 0x410
     dcc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     dd0:	00018e02 	andeq	r8, r1, r2, lsl #28
     dd4:	00000018 	andeq	r0, r0, r8, lsl r0
		for_all_tasks (i) {
     dd8:	00000d48 	andeq	r0, r0, r8, asr #26
	__pi_mintk = znew + min;
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	00000038 	andeq	r0, r0, r8, lsr r0
			if (!twaiting (i))
     de4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     de8:	86038504 	strhi	r8, [r3], -r4, lsl #10
			if (twakecnd (__pi_old, znew, i->Timer)) {
     dec:	00018e02 	andeq	r8, r1, r2, lsl #28
     df0:	00000028 	andeq	r0, r0, r8, lsr #32
     df4:	00000d48 	andeq	r0, r0, r8, asr #26
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	00000180 	andeq	r0, r0, r0, lsl #3
     e00:	84180e45 	ldrhi	r0, [r8], #-3653	; 0xfffff1bb
     e04:	86058506 	strhi	r8, [r5], -r6, lsl #10
     e08:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     e0c:	02018e02 	andeq	r8, r1, #2, 28
     e10:	c7c8ce88 	strbgt	ip, [r8, r8, lsl #29]
     e14:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e18:	00000000 	andeq	r0, r0, r0
				wakeuptm (i);
     e1c:	00000030 	andeq	r0, r0, r0, lsr r0
     e20:	00000d48 	andeq	r0, r0, r8, asr #26
		for_all_tasks (i) {
     e24:	00000000 	andeq	r0, r0, r0
				d = i->Timer - znew;
     e28:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     e2c:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     e30:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		if ((word)(__pi_mintk - znew) < min) 
     e34:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     e38:	89038804 	stmdbhi	r3, {r2, fp, pc}
     e3c:	02018e02 	andeq	r8, r1, #2, 28
	__pi_old = znew;
     e40:	c9ce0a4d 	stmibgt	lr, {r0, r2, r3, r6, r9, fp}^
}
     e44:	c5c6c7c8 	strbgt	ip, [r6, #1992]	; 0x7c8
	TCI_RUN_DELAY_TIMER;
     e48:	000ec3c4 	andeq	ip, lr, r4, asr #7
}
     e4c:	00000b46 	andeq	r0, r0, r6, asr #22
     e50:	00000020 	andeq	r0, r0, r0, lsr #32
     e54:	00000d48 	andeq	r0, r0, r8, asr #26
     e58:	00000000 	andeq	r0, r0, r0
     e5c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
void proceed (word state) {
     e60:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
	prcdstate (__pi_curr, state);
     e64:	86038504 	strhi	r8, [r3], -r4, lsl #10
     e68:	02018e02 	andeq	r8, r1, #2, 28
	release;
     e6c:	c5c6ced8 	strbgt	ip, [r6, #3800]	; 0xed8
     e70:	00000ec4 	andeq	r0, r0, r4, asr #29
void __pi_wait (aword event, word state) {
     e74:	00000018 	andeq	r0, r0, r8, lsl r0
	sint j = nevents (__pi_curr);
     e78:	00000d48 	andeq	r0, r0, r8, asr #26
	if (j >= MAX_EVENTS_PER_TASK)
     e7c:	000015a8 	andeq	r1, r0, r8, lsr #11
     e80:	00000070 	andeq	r0, r0, r0, ror r0
     e84:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		syserror (ENEVENTS, "sw");
     e88:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     e8c:	00000001 	andeq	r0, r0, r1
	setestate (__pi_curr->Events [j], state, event);
     e90:	00000024 	andeq	r0, r0, r4, lsr #32
	incwait (__pi_curr);
     e94:	00000d48 	andeq	r0, r0, r8, asr #26
	setestate (__pi_curr->Events [j], state, event);
     e98:	00000000 	andeq	r0, r0, r0
}
     e9c:	00000174 	andeq	r0, r0, r4, ror r1
     ea0:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     ea4:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
void __pi_trigger (aword event) {
     ea8:	87078608 	strhi	r8, [r7, -r8, lsl #12]
	for_all_tasks (i) {
     eac:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
		for (j = 0; j < nevents (i); j++) {
     eb0:	8b038a04 	blhi	e36c8 <__ccfg+0xc3720>
     eb4:	00018e02 	andeq	r8, r1, r2, lsl #28
     eb8:	0000000c 	andeq	r0, r0, ip
     ebc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			if (i->Events [j] . Event == event) {
     ec0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ec4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ec8:	00000028 	andeq	r0, r0, r8, lsr #32
				wakeupev (i, j);
     ecc:	00000eb8 			; <UNDEFINED> instruction: 0x00000eb8
     ed0:	00001618 	andeq	r1, r0, r8, lsl r6
	for_all_tasks (i) {
     ed4:	00000070 	andeq	r0, r0, r0, ror r0
}
     ed8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
aword __pi_join (aword pid, word st) {
     edc:	86048505 	strhi	r8, [r4], -r5, lsl #10
	for_all_tasks (i) {
     ee0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     ee4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
	return 0;
     ee8:	c7ce4214 	bfigt	r4, r4, #4, #11
		if ((aword)i == pid) {
     eec:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
			__pi_wait (pid, st);
     ef0:	000b4200 	andeq	r4, fp, r0, lsl #4
}
     ef4:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
     ef8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     efc:	7c020001 	stcvc	0, cr0, [r2], {1}
void delay (word d, word state) {
     f00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	settstate (__pi_curr, state);
     f04:	00000028 	andeq	r0, r0, r8, lsr #32
     f08:	00000ef4 	strdeq	r0, [r0], -r4
     f0c:	00001688 	andeq	r1, r0, r8, lsl #13
     f10:	0000011c 	andeq	r0, r0, ip, lsl r1
	update_n_wake (d, YES);
     f14:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     f18:	86048505 	strhi	r8, [r4], -r5, lsl #10
	__pi_curr->Timer = __pi_old + d;
     f1c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     f20:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
	inctimer (__pi_curr);
     f24:	c7ce4214 	bfigt	r4, r4, #4, #11
     f28:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     f2c:	00000000 	andeq	r0, r0, r0
}
     f30:	0000000c 	andeq	r0, r0, ip
     f34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (fun == NULL)
     f38:	7c020001 	stcvc	0, cr0, [r2], {1}
		return (int) __pi_curr;
     f3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f40:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i)
     f44:	00000f30 	andeq	r0, r0, r0, lsr pc
}
     f48:	000017a4 	andeq	r1, r0, r4, lsr #15
		if (i->code == fun)
     f4c:	00000020 	andeq	r0, r0, r0, lsr #32
	for_all_tasks (i)
     f50:	00000028 	andeq	r0, r0, r8, lsr #32
     f54:	00000f30 	andeq	r0, r0, r0, lsr pc
     f58:	000017c4 	andeq	r1, r0, r4, asr #15
int __pi_strlen (const char *s) {
     f5c:	00000230 	andeq	r0, r0, r0, lsr r2
	for (i = 0; *(s+i) != '\0'; i++);
     f60:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
}
     f64:	86078508 	strhi	r8, [r7], -r8, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
     f68:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
void adddevfunc (devreqfun_t rf, int loc) {
     f6c:	8a038904 	bhi	e3384 <__ccfg+0xc33dc>
		syserror (EREQPAR, "addv");
     f70:	02018e02 	andeq	r8, r1, #2, 28
		syserror (ERESOURCE, "addv");
     f74:	200e0a4f 	andcs	r0, lr, pc, asr #20
	if (ioreq [loc] != NULL)
     f78:	00000b42 	andeq	r0, r0, r2, asr #22
     f7c:	0000001c 	andeq	r0, r0, ip, lsl r0
		syserror (ERESOURCE, "addv");
     f80:	00000f30 	andeq	r0, r0, r0, lsr pc
	ioreq [loc] = rf;
     f84:	000019f4 	strdeq	r1, [r0], -r4
}
     f88:	00000050 	andeq	r0, r0, r0, asr r0
     f8c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
sint io (word retry, word dev, word operation, char *buf, word len) {
     f90:	86058506 	strhi	r8, [r5], -r6, lsl #10
     f94:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     f98:	00018e02 	andeq	r8, r1, r2, lsl #28
     f9c:	0000000c 	andeq	r0, r0, ip
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
     fa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fa4:	7c020001 	stcvc	0, cr0, [r2], {1}
     fa8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		syserror (ENODEVICE, "io");
     fac:	00000020 	andeq	r0, r0, r0, lsr #32
     fb0:	00000f9c 	muleq	r0, ip, pc	; <UNPREDICTABLE>
	if (len == 0)
     fb4:	00001a44 	andeq	r1, r0, r4, asr #20
	ret = (ioreq [dev]) (operation, buf, len);
     fb8:	00000390 	muleq	r0, r0, r3
     fbc:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
	if (ret >= 0)
     fc0:	86068507 	strhi	r8, [r6], -r7, lsl #10
	if (ret == -1) {
     fc4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
     fc8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
		if (retry == WNONE)
     fcc:	00000001 	andeq	r0, r0, r1
		iowait (dev, operation, retry);
     fd0:	0000000c 	andeq	r0, r0, ip
     fd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fd8:	7c020001 	stcvc	0, cr0, [r2], {1}
			release;
     fdc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fe0:	0000000c 	andeq	r0, r0, ip
		if (retry != WNONE) {
     fe4:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     fe8:	00001dd4 	ldrdeq	r1, [r0], -r4
			iowait (dev, operation, retry);
     fec:	00000030 	andeq	r0, r0, r0, lsr r0
     ff0:	0000000c 	andeq	r0, r0, ip
			(ioreq [dev]) (NONE, buf, len);
     ff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ff8:	7c020001 	stcvc	0, cr0, [r2], {1}
     ffc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1000:	0000000c 	andeq	r0, r0, ip
		(ioreq [dev]) (NONE, buf, len);
    1004:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1008:	00000000 	andeq	r0, r0, r0
}
    100c:	00000020 	andeq	r0, r0, r0, lsr #32
	if (retry != WNONE) {
    1010:	0000000c 	andeq	r0, r0, ip
		delay (-ret - 2, retry);
    1014:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1018:	00001e04 	andeq	r1, r0, r4, lsl #28
    101c:	00000018 	andeq	r0, r0, r8, lsl r0
    1020:	0000000c 	andeq	r0, r0, ip
		release;
    1024:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1028:	7c020001 	stcvc	0, cr0, [r2], {1}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    102c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00001020 	andeq	r1, r0, r0, lsr #32
    1038:	00001e1c 	andeq	r1, r0, ip, lsl lr
    103c:	00000008 	andeq	r0, r0, r8
		syserror (ERESOURCE, "mal1");
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00001020 	andeq	r1, r0, r0, lsr #32
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1048:	00000000 	andeq	r0, r0, r0
    104c:	00000006 	andeq	r0, r0, r6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1050:	0000000c 	andeq	r0, r0, ip
	m_size (mpools [0]) = mlen - m_hdrlen;
    1054:	00001020 	andeq	r1, r0, r0, lsr #32
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1058:	00001e24 	andeq	r1, r0, r4, lsr #28
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    105c:	00000008 	andeq	r0, r0, r8
    1060:	0000000c 	andeq	r0, r0, ip
}
    1064:	00001020 	andeq	r1, r0, r0, lsr #32
    1068:	00000000 	andeq	r0, r0, r0
    106c:	00000006 	andeq	r0, r0, r6
    1070:	0000000c 	andeq	r0, r0, ip
    1074:	00001020 	andeq	r1, r0, r0, lsr #32
    1078:	00000000 	andeq	r0, r0, r0
void __pi_free (aword *ch) {
    107c:	00000008 	andeq	r0, r0, r8
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1080:	0000000c 	andeq	r0, r0, ip
    1084:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		syserror (EMALLOC, "malg");
    1088:	7c020001 	stcvc	0, cr0, [r2], {1}
    108c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1090:	0000001c 	andeq	r0, r0, ip, lsl r0
		m_size (ch) ^= MALLOC_UMASK;
    1094:	00001080 	andeq	r1, r0, r0, lsl #1
    1098:	00001e2c 	andeq	r1, r0, ip, lsr #28
	mcfree [MA_NP] += m_size (ch);
    109c:	0000005c 	andeq	r0, r0, ip, asr r0
	QFREE;
    10a0:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	if (mevent [MA_NP] . nwait) {
    10a4:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10a8:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		trigger ((aword)(&(mevent [MA_NP])));
    10ac:	0000100e 	andeq	r1, r0, lr
		mevent [MA_NP] . nwait --;
    10b0:	00000014 	andeq	r0, r0, r4, lsl r0
}
    10b4:	00001080 	andeq	r1, r0, r0, lsl #1
    10b8:	00001e88 	andeq	r1, r0, r8, lsl #29
    10bc:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
void kill (aword pid) {
    10c4:	00018e02 	andeq	r8, r1, r2, lsl #28
		pid = (aword) __pi_curr;
    10c8:	00000018 	andeq	r0, r0, r8, lsl r0
	j = NULL;
    10cc:	00001080 	andeq	r1, r0, r0, lsl #1
	for_all_tasks (i) {
    10d0:	00000000 	andeq	r0, r0, r0
	syserror (EREQPAR, "kpi");
    10d4:	00000090 	muleq	r0, r0, r0
    10d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		if ((aword)i == pid) {
    10dc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    10e0:	00018e02 	andeq	r8, r1, r2, lsl #28
				__PCB = i->Next;
    10e4:	00000014 	andeq	r0, r0, r4, lsl r0
			killev (i);
    10e8:	00001080 	andeq	r1, r0, r0, lsl #1
			ufree (i);
    10ec:	00000000 	andeq	r0, r0, r0
			if (i == __pi_curr)
    10f0:	00000018 	andeq	r0, r0, r8, lsl r0
    10f4:	83080e41 	movwhi	r0, #36417	; 0x8e41
				release;
    10f8:	00018e02 	andeq	r8, r1, r2, lsl #28
				j->Next = i->Next;
    10fc:	00000014 	andeq	r0, r0, r4, lsl r0
    1100:	00001080 	andeq	r1, r0, r0, lsl #1
    1104:	00000000 	andeq	r0, r0, r0
}
    1108:	00000060 	andeq	r0, r0, r0, rrx
    110c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1110:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (size < 8)
    1114:	00000014 	andeq	r0, r0, r4, lsl r0
		_size = 2;
    1118:	00001080 	andeq	r1, r0, r0, lsl #1
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    111c:	00000000 	andeq	r0, r0, r0
		_size = (((aword)size) + 3) >> 2;
    1120:	00000034 	andeq	r0, r0, r4, lsr r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1124:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		_size = (((aword)size) + 3) >> 2;
    1128:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (mevent [MA_NP] . nfail != 255)
    112c:	00000018 	andeq	r0, r0, r8, lsl r0
    1130:	00001080 	andeq	r1, r0, r0, lsl #1
			mevent [MA_NP] . nfail ++;
    1134:	00000000 	andeq	r0, r0, r0
		mnfree [MA_NP] = 0;
    1138:	00000038 	andeq	r0, r0, r8, lsr r0
    113c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		if (m_magic (chunk) != MALLOC_MAGIC)
    1140:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1144:	00000001 	andeq	r0, r0, r1
			syserror (EMALLOC, "malc");
    1148:	0000000c 	andeq	r0, r0, ip
    114c:	00001080 	andeq	r1, r0, r0, lsl #1
		if (m_size (chunk) >= _size)
    1150:	00000000 	andeq	r0, r0, r0
    1154:	0000000c 	andeq	r0, r0, ip
		chunk = m_nextp (chunk)) {
    1158:	00000018 	andeq	r0, r0, r8, lsl r0
		m_setnextp (cc, m_nextp (chunk));
    115c:	00001080 	andeq	r1, r0, r0, lsl #1
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1160:	00000000 	andeq	r0, r0, r0
    1164:	00000034 	andeq	r0, r0, r4, lsr r0
			m_size (chunk) = _size;
    1168:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			cc = chunk + _size + m_hdrlen;
    116c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1170:	00018e02 	andeq	r8, r1, r2, lsl #28
			m_size (cc) = waste - m_hdrlen;
    1174:	0000000c 	andeq	r0, r0, ip
			QFREE;
    1178:	00001080 	andeq	r1, r0, r0, lsl #1
		mevent [MA_NP] . nfail = 0;
    117c:	00000000 	andeq	r0, r0, r0
		mcfree [MA_NP] -= m_size (chunk);
    1180:	0000001c 	andeq	r0, r0, ip, lsl r0
    1184:	0000000c 	andeq	r0, r0, ip
    1188:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    118c:	7c020001 	stcvc	0, cr0, [r2], {1}
		m_size (chunk) |= MALLOC_UMASK;
    1190:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1194:	00000018 	andeq	r0, r0, r8, lsl r0
    1198:	00001184 	andeq	r1, r0, r4, lsl #3
			mnfree [MA_NP] = mcfree [MA_NP];
    119c:	00001eb4 			; <UNDEFINED> instruction: 0x00001eb4
}
    11a0:	000000d4 	ldrdeq	r0, [r0], -r4
    11a4:	83100e41 	tsthi	r0, #1040	; 0x410
    11a8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    11ac:	00018e02 	andeq	r8, r1, r2, lsl #28
    11b0:	00000014 	andeq	r0, r0, r4, lsl r0
    11b4:	00001184 	andeq	r1, r0, r4, lsl #3
    11b8:	00001f88 	andeq	r1, r0, r8, lsl #31
aword __pi_fork (fsmcode func, aword data) {
    11bc:	000000a4 	andeq	r0, r0, r4, lsr #1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    11c0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    11c8:	0000000c 	andeq	r0, r0, ip
		if ((j = __PCB) == NULL)
    11cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	i->Next = NULL;
    11d0:	7c020001 	stcvc	0, cr0, [r2], {1}
	i->data = data;
    11d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11d8:	00000018 	andeq	r0, r0, r8, lsl r0
}
    11dc:	000011c8 	andeq	r1, r0, r8, asr #3
			for (; j->Next != NULL; j = j->Next);
    11e0:	0000202c 	andeq	r2, r0, ip, lsr #32
    11e4:	0000007c 	andeq	r0, r0, ip, ror r0
	return (aword) i;
    11e8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    11ec:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	if (mevent [MA_NP] . nwait != 255)
    11f0:	00000001 	andeq	r0, r0, r1
    11f4:	00000014 	andeq	r0, r0, r4, lsl r0
    11f8:	000011c8 	andeq	r1, r0, r8, asr #3
		mevent [MA_NP] . nwait ++;
    11fc:	000020a8 	andeq	r2, r0, r8, lsr #1
	wait ((aword)(&(mevent [MA_NP])), state);
    1200:	000000ac 	andeq	r0, r0, ip, lsr #1
    1204:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
void diag (const char *mess, ...) {
    1208:	00018e02 	andeq	r8, r1, r2, lsl #28
    120c:	0000000c 	andeq	r0, r0, ip
    1210:	000011c8 	andeq	r1, r0, r8, asr #3
	diag_disable_int (a, is);
    1214:	00002154 	andeq	r2, r0, r4, asr r1
    1218:	0000005c 	andeq	r0, r0, ip, asr r0
    121c:	0000000c 	andeq	r0, r0, ip
				d = (bc == 16) ? 10000 : 1000000000;
    1220:	000011c8 	andeq	r1, r0, r8, asr #3
	diag_disable_int (a, is);
    1224:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
	while (*mess != '\0') {
    1228:	00000018 	andeq	r0, r0, r8, lsl r0
	dgout ('\r');
    122c:	0000000c 	andeq	r0, r0, ip
	dgout ('\n');
    1230:	000011c8 	andeq	r1, r0, r8, asr #3
    1234:	00000000 	andeq	r0, r0, r0
    1238:	00000010 	andeq	r0, r0, r0, lsl r0
	diag_wait (a);
    123c:	0000000c 	andeq	r0, r0, ip
	diag_enable_int (a, is);
    1240:	000011c8 	andeq	r1, r0, r8, asr #3
    1244:	000021c8 	andeq	r2, r0, r8, asr #3
}
    1248:	00000010 	andeq	r0, r0, r0, lsl r0
    124c:	0000000c 	andeq	r0, r0, ip
    1250:	000011c8 	andeq	r1, r0, r8, asr #3
		if (*mess == '%') {
    1254:	000021d8 	ldrdeq	r2, [r0], -r8
    1258:	00000014 	andeq	r0, r0, r4, lsl r0
			if (*mess == 'l') {
    125c:	00000018 	andeq	r0, r0, r8, lsl r0
    1260:	000011c8 	andeq	r1, r0, r8, asr #3
				mess++;
    1264:	000021ec 	andeq	r2, r0, ip, ror #3
				val = va_arg (ap, lword);
    1268:	00000064 	andeq	r0, r0, r4, rrx
				bc = 32;
    126c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				bc = 16;
    1270:	86038504 	strhi	r8, [r3], -r4, lsl #10
			switch (*mess) {
    1274:	00018e02 	andeq	r8, r1, r2, lsl #28
    1278:	0000000c 	andeq	r0, r0, ip
    127c:	000011c8 	andeq	r1, r0, r8, asr #3
				dgout ('%');
    1280:	00002250 	andeq	r2, r0, r0, asr r2
    1284:	00000014 	andeq	r0, r0, r4, lsl r0
				dgout (*mess);
    1288:	0000000c 	andeq	r0, r0, ip
    128c:	000011c8 	andeq	r1, r0, r8, asr #3
			switch (*mess) {
    1290:	00002264 	andeq	r2, r0, r4, ror #4
					v = __pi_hex_enc_table [
    1294:	00000014 	andeq	r0, r0, r4, lsl r0
					i += 4;
    1298:	0000000c 	andeq	r0, r0, ip
					(val >> (bc - i)) & 0xf];
    129c:	000011c8 	andeq	r1, r0, r8, asr #3
    12a0:	00002278 	andeq	r2, r0, r8, ror r2
					dgout (v);
    12a4:	00000014 	andeq	r0, r0, r4, lsl r0
    12a8:	0000000c 	andeq	r0, r0, ip
				while (i < bc) {
    12ac:	000011c8 	andeq	r1, r0, r8, asr #3
			mess++;
    12b0:	0000228c 	andeq	r2, r0, ip, lsl #5
					d /= 10;
    12b4:	00000028 	andeq	r0, r0, r8, lsr #32
				if ((val >> (bc - 1)) & 1) {
    12b8:	0000000c 	andeq	r0, r0, ip
    12bc:	000011c8 	andeq	r1, r0, r8, asr #3
					dgout ('-');
    12c0:	000022b4 			; <UNDEFINED> instruction: 0x000022b4
    12c4:	00000010 	andeq	r0, r0, r0, lsl r0
						val |= 0xffff0000;
    12c8:	0000000c 	andeq	r0, r0, ip
    12cc:	000011c8 	andeq	r1, r0, r8, asr #3
    12d0:	000022c4 	andeq	r2, r0, r4, asr #5
				d = (bc == 16) ? 10000 : 1000000000;
    12d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    12d8:	0000000c 	andeq	r0, r0, ip
    12dc:	000011c8 	andeq	r1, r0, r8, asr #3
					v = (word) (val / d);
    12e0:	000022f0 	strdeq	r2, [r0], -r0
					if (v || d == 1) break;
    12e4:	00000014 	andeq	r0, r0, r4, lsl r0
    12e8:	0000000c 	andeq	r0, r0, ip
					d /= 10;
    12ec:	000011c8 	andeq	r1, r0, r8, asr #3
				d = (bc == 16) ? 10000 : 1000000000;
    12f0:	00002304 	andeq	r2, r0, r4, lsl #6
					dgout (v + '0');
    12f4:	00000014 	andeq	r0, r0, r4, lsl r0
    12f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    12fc:	000011c8 	andeq	r1, r0, r8, asr #3
					d /= 10;
    1300:	00002318 	andeq	r2, r0, r8, lsl r3
					val = val - (v * d);
    1304:	00000110 	andeq	r0, r0, r0, lsl r1
					if (d == 0) break;
    1308:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
					v = (word) (val / d);
    130c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1310:	02018e02 	andeq	r8, r1, #2, 28
				if (bc == 16)
    1314:	00100e76 	andseq	r0, r0, r6, ror lr
				d = (bc == 16) ? 10000 : 1000000000;
    1318:	00000018 	andeq	r0, r0, r8, lsl r0
					val &= 0xffff;
    131c:	000011c8 	andeq	r1, r0, r8, asr #3
					dgout (*s);
    1320:	00002428 	andeq	r2, r0, r8, lsr #8
					s++;
    1324:	00000064 	andeq	r0, r0, r4, rrx
				while (*s != '\0') {
    1328:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    132c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			dgout (*mess++);
    1330:	00000001 	andeq	r0, r0, r1
    1334:	0000000c 	andeq	r0, r0, ip
    1338:	000011c8 	andeq	r1, r0, r8, asr #3
    133c:	0000248c 	andeq	r2, r0, ip, lsl #9
    1340:	00000028 	andeq	r0, r0, r8, lsr #32
}
    1344:	00000014 	andeq	r0, r0, r4, lsl r0
    while(1)
    1348:	000011c8 	andeq	r1, r0, r8, asr #3
{
    134c:	000024b4 			; <UNDEFINED> instruction: 0x000024b4
    SetupTrimDevice();
    1350:	00000150 	andeq	r0, r0, r0, asr r1
    pui32Src = &_etext;
    1354:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1358:	00018e02 	andeq	r8, r1, r2, lsl #28
    __asm("    ldr     r0, =_bss\n"
    135c:	0000000c 	andeq	r0, r0, ip
    1360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1364:	7c020001 	stcvc	0, cr0, [r2], {1}
    1368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    136c:	0000001c 	andeq	r0, r0, ip, lsl r0
   main();
    1370:	0000135c 	andeq	r1, r0, ip, asr r3
    FaultISR();
    1374:	00000000 	andeq	r0, r0, r0
        *pui32Dest++ = *pui32Src++;
    1378:	000000f4 	strdeq	r0, [r0], -r4
    137c:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    1380:	86058506 	strhi	r8, [r5], -r6, lsl #10
    1384:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    1388:	00018e02 	andeq	r8, r1, r2, lsl #28
    138c:	00000028 	andeq	r0, r0, r8, lsr #32
    1390:	0000135c 	andeq	r1, r0, ip, asr r3
    1394:	00002604 	andeq	r2, r0, r4, lsl #12
static byte get_byte () {
    1398:	00000220 	andeq	r0, r0, r0, lsr #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    139c:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    13a0:	86088509 	strhi	r8, [r8], -r9, lsl #10
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    13a4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    13a8:	8a048905 	bhi	1237c4 <__ccfg+0x10381c>
		if (ee_inp)
    13ac:	8e028b03 	vmlahi.f64	d8, d2, d3
			b |= 1;
    13b0:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
    13b4:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    13b8:	00000014 	andeq	r0, r0, r4, lsl r0
	for (b = 0, i = 0; i < 8; i++) {
    13bc:	0000135c 	andeq	r1, r0, ip, asr r3
}
    13c0:	00002824 	andeq	r2, r0, r4, lsr #16
    13c4:	00000060 	andeq	r0, r0, r0, rrx
    13c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
static void put_byte (byte b) {
    13cc:	00018e02 	andeq	r8, r1, r2, lsl #28
    13d0:	00000014 	andeq	r0, r0, r4, lsl r0
    13d4:	0000135c 	andeq	r1, r0, ip, asr r3
    13d8:	00000000 	andeq	r0, r0, r0
		if (b & 0x80)
    13dc:	00000078 	andeq	r0, r0, r8, ror r0
    13e0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    13e4:	00018e02 	andeq	r8, r1, r2, lsl #28
	for (i = 0; i < 8; i++) {
    13e8:	0000000c 	andeq	r0, r0, ip
		b <<= 1;
    13ec:	0000135c 	andeq	r1, r0, ip, asr r3
	for (i = 0; i < 8; i++) {
    13f0:	00002884 	andeq	r2, r0, r4, lsl #17
}
    13f4:	00000018 	andeq	r0, r0, r8, lsl r0
    13f8:	0000000c 	andeq	r0, r0, ip
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    13fc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1400:	7c020001 	stcvc	0, cr0, [r2], {1}
	put_byte (cmd);
    1404:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1408:	0000000c 	andeq	r0, r0, ip
}
    140c:	000013f8 	strdeq	r1, [r0], -r8
    1410:	00000000 	andeq	r0, r0, r0
static void wwait (word st, word del) {
    1414:	00000010 	andeq	r0, r0, r0, lsl r0
    1418:	0000000c 	andeq	r0, r0, ip
    141c:	000013f8 	strdeq	r1, [r0], -r8
	while (dopen && (rdsr () & 1)) {
    1420:	00000000 	andeq	r0, r0, r0
    1424:	00000018 	andeq	r0, r0, r8, lsl r0
    1428:	0000000c 	andeq	r0, r0, ip
    142c:	000013f8 	strdeq	r1, [r0], -r8
	put_byte (CMD_RDSR);
    1430:	0000289c 	muleq	r0, ip, r8
	r = get_byte ();
    1434:	0000004c 	andeq	r0, r0, ip, asr #32
    1438:	00000014 	andeq	r0, r0, r4, lsl r0
	while (dopen && (rdsr () & 1)) {
    143c:	000013f8 	strdeq	r1, [r0], -r8
}
    1440:	00000000 	andeq	r0, r0, r0
		if (st == WNONE)
    1444:	00000030 	andeq	r0, r0, r0, lsr r0
    1448:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			mdelay (1);
    144c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1450:	00000018 	andeq	r0, r0, r8, lsl r0
			delay (del, st);
    1454:	000013f8 	strdeq	r1, [r0], -r8
    1458:	000028e8 	andeq	r2, r0, r8, ror #17
			release;
    145c:	0000006c 	andeq	r0, r0, ip, rrx
    1460:	83100e41 	tsthi	r0, #1040	; 0x410
    1464:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
static void ready () {
    1468:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (dopen) {
    146c:	00000014 	andeq	r0, r0, r4, lsl r0
		wwait (WNONE, 1);
    1470:	000013f8 	strdeq	r1, [r0], -r8
    1474:	00002954 	andeq	r2, r0, r4, asr r9
    1478:	00000016 	andeq	r0, r0, r6, lsl r0
	dstat = 0;
    147c:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
    1480:	00018e02 	andeq	r8, r1, r2, lsl #28
    1484:	0000000c 	andeq	r0, r0, ip
    1488:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	udelay (1);
    148c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1490:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1494:	00000024 	andeq	r0, r0, r4, lsr #32
		dopen = DOPEN_TEMP;
    1498:	00001484 	andeq	r1, r0, r4, lsl #9
    149c:	0000296c 	andeq	r2, r0, ip, ror #18
    14a0:	00000028 	andeq	r0, r0, r8, lsr #32
    14a4:	83100e41 	tsthi	r0, #1040	; 0x410
static void cclose () {
    14a8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	if (dopen == DOPEN_TEMP) {
    14ac:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    14b0:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
		wwait (WNONE, 1);
    14b4:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    14b8:	0000000b 	andeq	r0, r0, fp
	cmd_0 (CMD_DP);
    14bc:	0000000c 	andeq	r0, r0, ip
    14c0:	00001484 	andeq	r1, r0, r4, lsl #9
		dopen = 0;
    14c4:	00002994 	muleq	r0, r4, r9
}
    14c8:	00000008 	andeq	r0, r0, r8
word ee_open () {
    14cc:	0000000c 	andeq	r0, r0, ip
	ready ();
    14d0:	00001484 	andeq	r1, r0, r4, lsl #9
	dopen = DOPEN_PERM;
    14d4:	00000000 	andeq	r0, r0, r0
    14d8:	00000022 	andeq	r0, r0, r2, lsr #32
}
    14dc:	00000018 	andeq	r0, r0, r8, lsl r0
	if (dopen) {
    14e0:	00001484 	andeq	r1, r0, r4, lsl #9
    14e4:	00000000 	andeq	r0, r0, r0
		dopen = DOPEN_TEMP;
    14e8:	0000002e 	andeq	r0, r0, lr, lsr #32
		cclose ();
    14ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
    14f0:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
int ser_outf (word st, const char *m, ...) {
    14f4:	000ec4ce 	andeq	ip, lr, lr, asr #9
    14f8:	00000018 	andeq	r0, r0, r8, lsl r0
	if ((prcs = running (__outserial)) != 0) {
    14fc:	00001484 	andeq	r1, r0, r4, lsl #9
    1500:	00000000 	andeq	r0, r0, r0
		join (prcs, st);
    1504:	00000034 	andeq	r0, r0, r4, lsr r0
    1508:	83100e41 	tsthi	r0, #1040	; 0x410
		release;
    150c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1510:	00018e02 	andeq	r8, r1, r2, lsl #28
    1514:	00000018 	andeq	r0, r0, r8, lsl r0
    1518:	00001484 	andeq	r1, r0, r4, lsl #9
		umwait (st);
    151c:	00000000 	andeq	r0, r0, r0
    1520:	00000040 	andeq	r0, r0, r0, asr #32
	if (runstrand (__outserial, buf) == 0) {
    1524:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1528:	86038504 	strhi	r8, [r3], -r4, lsl #10
    152c:	00018e02 	andeq	r8, r1, r2, lsl #28
